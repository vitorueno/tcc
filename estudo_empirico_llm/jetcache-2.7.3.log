Assert.assertArrayEquals(buildKey("123"), buildKey(new String("123")))
Assert.assertArrayEquals(buildKey(new byte[] { 1, 2, 3 }), buildKey(new byte[] { 1, 2, 3 }))
Assert.assertArrayEquals(buildKey(123), buildKey(123))
Assert.assertArrayEquals(buildKey(123L), buildKey(123L))
Assert.assertArrayEquals(buildKey(true), buildKey(true))
Assert.assertArrayEquals(buildKey(new Date(123)), buildKey(new Date(123)))
Assert.assertArrayEquals(buildKey(new Date(123)), buildKey(new Date(123)))
Assert.assertArrayEquals(buildKey(c1), buildKey(c2))
assertArrayEquals(byteKey, c.buildKey(byteKey))
assertArrayEquals(strKey.getBytes(), c.buildKey(strKey))
assertArrayEquals(byteKey, c.buildKey(byteKey))
assertArrayEquals(strKey.getBytes(), c.buildKey(strKey))
assertArrayEquals(convertedKey.getBytes(), c.buildKey(byteKey))
assertArrayEquals(convertedKey.getBytes(), c.buildKey(strKey))
assertArrayEquals(convertedKey.getBytes(), c.buildKey("long long long str"))
assertArrayEquals(convertedKey.getBytes(), c.buildKey(1))
assertArrayEquals(strKey.getBytes(), c.buildKey(strKey.getBytes()))
assertArrayEquals(strKey.getBytes(), c.buildKey(strKey.getBytes()))
assertArrayEquals(strKey.getBytes(), c.buildKey(strKey.getBytes()))
Assert.assertEquals(target.count(), target.count())
Assert.assertNotEquals(service.notCachedCount(), service.notCachedCount())
Assert.assertEquals(service.countWithAnnoOnClass(), service.countWithAnnoOnClass())
Assert.assertEquals(service.countWithAnnoOnInterface(), service.countWithAnnoOnInterface())
Assert.assertNotEquals(service.enableCacheWithNoCacheCount(bean), service.enableCacheWithNoCacheCount(bean))
Assert.assertEquals(service.enableCacheWithAnnoOnClass(bean), service.enableCacheWithAnnoOnClass(bean))
Assert.assertEquals(service.enableCacheWithAnnoOnInterface(bean), service.enableCacheWithAnnoOnInterface(bean))
Assert.assertEquals(v1, service.count("K1"))
Assert.assertNotEquals(v1, v2)
Assert.assertEquals(v2, service.count("K1"))
Assert.assertEquals(200, service.count("K1"))
Assert.assertEquals(200, service.count("K1"))
Assert.assertEquals(service.count("K1"), service.count("K1"))
Assert.assertNotEquals(service.count("K1"), service.count("K2"))
Assert.assertNotEquals(bean.noCacheCount(), bean.noCacheCount())
Assert.assertEquals(bean.staticCount(), bean.staticCount())
Assert.assertEquals(bean.count(), bean.count())
Assert.assertEquals(bean.countWithLocalCache(), bean.countWithLocalCache())
Assert.assertEquals(bean.countWithBoth(), bean.countWithBoth())
Assert.assertNotEquals(bean.countWithDisabledCache(), bean.countWithDisabledCache())
Assert.assertEquals(x, bean.countWithExpire50())
Assert.assertNotEquals(x, bean.countWithExpire50())
Assert.assertNotEquals(x1, x2)
Assert.assertEquals(x1, x3)
Assert.assertNotEquals(x1, x2)
Assert.assertEquals(x1, x3)
Assert.assertNotEquals(x1, x2)
Assert.assertEquals(x1, x3)
Assert.assertNotEquals(x1, x2)
Assert.assertEquals(x1, x3)
Assert.assertEquals(bean.countEnabledWithConfigBean(), bean.countEnabledWithConfigBean())
Assert.assertNotEquals(bean.countDisabledWithConfigBean(), bean.countDisabledWithConfigBean())
Assert.assertNotEquals(bean.countWithWrongCondition(), bean.countWithWrongCondition())
Assert.assertEquals(bean.count(true), bean.count(true))
Assert.assertNotEquals(bean.count(false), bean.count(false))
Assert.assertNotEquals(bean.count(), bean.count1())
Assert.assertEquals(bean.namedCount1_WithNameN1(), bean.namedCount1_WithNameN1())
Assert.assertEquals(bean.namedCount1_WithNameN1(), bean.namedCount2_WithNameN1())
Assert.assertNotEquals(bean.namedCount1_WithNameN1(), bean.namedCount_WithNameN2())
Assert.assertEquals(bean.namedCount_WithNameN2(), bean.namedCount_WithNameN2())
Assert.assertEquals(v1, bean.count("K1"))
Assert.assertNotEquals(v1, v2)
Assert.assertEquals(v2, bean.count("K1"))
Assert.assertEquals(200, bean.count("K1"))
Assert.assertEquals(200, bean.count("K1"))
Assert.assertEquals(bean.count("K1"), bean.count("K1"))
Assert.assertNotEquals(bean.count("K1"), bean.count("K2"))
Assert.assertSame(c, c2)
Assert.assertEquals(CacheResultCode.NOT_EXISTS, cache.GET("BASE_K1").getResultCode())
Assert.assertEquals(CacheResultCode.SUCCESS, cache.PUT("BASE_K1", "V1", 10, TimeUnit.SECONDS).getResultCode())
Assert.assertEquals(CacheResultCode.SUCCESS, cache.GET("BASE_K1").getResultCode())
Assert.assertEquals("V1", cache.GET("BASE_K1").getValue())
Assert.assertEquals(CacheResultCode.SUCCESS, cache.PUT("BASE_K1", "V2", 10, TimeUnit.SECONDS).getResultCode())
Assert.assertEquals("V2", cache.GET("BASE_K1").getValue())
Assert.assertEquals(CacheResultCode.SUCCESS, cache.REMOVE("BASE_K1").getResultCode())
Assert.assertEquals(CacheResultCode.NOT_EXISTS, cache.GET("BASE_K1").getResultCode())
Assert.assertTrue(r.isSuccess())
Assert.assertNull(r.getValue())
Assert.assertNull(cache.get(null))
Assert.assertEquals(CacheResultCode.FAIL, cache.GET(null).getResultCode())
Assert.assertEquals(CacheResult.MSG_ILLEGAL_ARGUMENT, cache.GET(null).getMessage())
Assert.assertNull(cache.getAll(null))
Assert.assertEquals(CacheResultCode.FAIL, cache.GET_ALL(null).getResultCode())
Assert.assertEquals(CacheResult.MSG_ILLEGAL_ARGUMENT, cache.GET_ALL(null).getMessage())
Assert.assertEquals(CacheResultCode.FAIL, cache.PUT(null, "V1").getResultCode())
Assert.assertEquals(CacheResult.MSG_ILLEGAL_ARGUMENT, cache.PUT(null, "V1").getMessage())
Assert.assertEquals(CacheResultCode.FAIL, cache.PUT(null, "V1", 1, TimeUnit.SECONDS).getResultCode())
Assert.assertEquals(CacheResult.MSG_ILLEGAL_ARGUMENT, cache.PUT(null, "V1", 1, TimeUnit.SECONDS).getMessage())
Assert.assertEquals(CacheResultCode.FAIL, cache.PUT_ALL(null).getResultCode())
Assert.assertEquals(CacheResult.MSG_ILLEGAL_ARGUMENT, cache.PUT_ALL(null).getMessage())
Assert.assertEquals(CacheResultCode.FAIL, cache.PUT_ALL(null, 1, TimeUnit.SECONDS).getResultCode())
Assert.assertEquals(CacheResult.MSG_ILLEGAL_ARGUMENT, cache.PUT_ALL(null, 1, TimeUnit.SECONDS).getMessage())
Assert.assertEquals(CacheResultCode.FAIL, cache.REMOVE(null).getResultCode())
Assert.assertEquals(CacheResult.MSG_ILLEGAL_ARGUMENT, cache.REMOVE(null).getMessage())
Assert.assertEquals(CacheResultCode.FAIL, cache.REMOVE_ALL(null).getResultCode())
Assert.assertEquals(CacheResult.MSG_ILLEGAL_ARGUMENT, cache.REMOVE_ALL(null).getMessage())
Assert.assertNull(cache.tryLock(null, 1, TimeUnit.SECONDS))
Assert.assertTrue(r.isSuccess())
Assert.assertEquals(3, r.getValues().size())
Assert.assertTrue(r.getValues().get(k1).isSuccess())
Assert.assertEquals("V1", r.getValues().get(k1).getValue())
Assert.assertTrue(r.getValues().get(k2).isSuccess())
Assert.assertEquals("V2", r.getValues().get(k2).getValue())
Assert.assertEquals(CacheResultCode.NOT_EXISTS, r.getValues().get(k3).getResultCode())
Assert.assertNull(r.getValues().get(k3).getValue())
Assert.assertEquals(2, map.size())
Assert.assertEquals("V1", map.get(k1))
Assert.assertEquals("V2", map.get(k2))
Assert.assertNull(map.get(k3))
Assert.assertEquals(0, cache.getAll(Collections.emptySet()).size())
Assert.assertTrue(cache.PUT_ALL(m).isSuccess())
Assert.assertEquals("V1", cache.get(k1))
Assert.assertEquals("V2", cache.get(k2))
Assert.assertEquals("V3", cache.get(k3))
Assert.assertEquals("V4", cache.get(k4))
Assert.assertEquals("V5", cache.get(k5))
Assert.assertEquals("V6", cache.get(k6))
Assert.assertTrue(cache.PUT_ALL(m, 5000, TimeUnit.MILLISECONDS).isSuccess())
Assert.assertEquals("V7", cache.get(k7))
Assert.assertEquals("V8", cache.get(k8))
Assert.assertEquals("V9", cache.get(k9))
Assert.assertEquals("V77", cache.get(k7))
Assert.assertEquals("V88", cache.get(k8))
Assert.assertEquals("V99", cache.get(k9))
Assert.assertNull(cache.get(k1))
Assert.assertNull(cache.get(k2))
Assert.assertNotNull(cache.get(k3))
Assert.assertTrue(cache.REMOVE_ALL(s).isSuccess())
Assert.assertNull(cache.get(k1))
Assert.assertNull(cache.get(k2))
Assert.assertNull(cache.get(k3))
Assert.assertTrue(cache.putIfAbsent("PIA_K1", "V1"))
Assert.assertEquals("V1", cache.get("PIA_K1"))
Assert.assertTrue(cache.remove("PIA_K1"))
Assert.assertEquals(CacheResultCode.SUCCESS, cache.PUT_IF_ABSENT("PIA_K2", "V2", 10, TimeUnit.SECONDS).getResultCode())
Assert.assertEquals(CacheResultCode.EXISTS, cache.PUT_IF_ABSENT("PIA_K2", "V2", 10, TimeUnit.SECONDS).getResultCode())
Assert.assertEquals("V2", cache.get("PIA_K2"))
Assert.assertTrue(cache.remove("PIA_K2"))
Assert.assertEquals(CacheResultCode.SUCCESS, cache.PUT_IF_ABSENT("PIA_K3", "V3", 5, TimeUnit.MILLISECONDS).getResultCode())
Assert.assertEquals(CacheResultCode.SUCCESS, cache.PUT_IF_ABSENT("PIA_K3", "V3", 5, TimeUnit.MILLISECONDS).getResultCode())
Assert.assertEquals(a2, fromCache)
Assert.assertNotEquals(a3, fromCache)
Assert.assertNotNull(cache.tryLock("LockKey1", 50, TimeUnit.MILLISECONDS))
Assert.assertNull(cache.tryLock("LockKey1", 50, TimeUnit.MILLISECONDS))
Assert.assertNotNull(cache.tryLock("LockKey1", 50, TimeUnit.MILLISECONDS))
Assert.assertEquals(1, runCount[0])
Assert.assertEquals(1, runCount[1])
Assert.assertEquals(CacheResultCode.SUCCESS, cache.PUT("EXPIRE_A_K1", "V1").getResultCode())
Assert.assertEquals(CacheResultCode.SUCCESS, r.getResultCode())
Assert.assertEquals("V1", r.getValue())
Assert.assertEquals(CacheResultCode.SUCCESS, r.getResultCode())
Assert.assertEquals("V1", r.getValue())
Assert.assertTrue(r.getResultCode() == CacheResultCode.EXPIRED || r.getResultCode() == CacheResultCode.NOT_EXISTS)
Assert.assertNull(r.getValue())
Assert.assertEquals("V1", cache.get(key))
Assert.assertEquals("V1", cache.get(key))
Assert.assertEquals("V1", cache.get(key))
Assert.assertTrue(r.getResultCode() == CacheResultCode.EXPIRED || r.getResultCode() == CacheResultCode.NOT_EXISTS)
Assert.assertNull(r.getValue())
Assert.assertEquals("V1", cache.get(d2))
Assert.assertNull(cache.get(d3))
Assert.assertEquals(lockAtommicCount1.get(), lockCount1.get())
Assert.assertEquals(lockAtommicCount2.get(), lockCount2.get())
Assert.assertEquals(3, loadSuccess.get())
Assert.assertEquals(2 + 3, getFailCount.get())
Assert.assertNull(failMsg[0])
Assert.assertEquals("V", v)
Assert.assertEquals(2, loadSuccess.intValue())
Assert.assertEquals(2, loadSuccess.intValue())
assertEquals("V1", l1Cache.get("SIMPLE_K1"))
assertEquals("V1", l2Cache.get("SIMPLE_K1"))
assertEquals("V2", cache.get("SIMPLE_K2"))
assertNull(l2Cache.get("SIMPLE_K2"))
assertNull(l1Cache.get("SIMPLE_K3"))
assertEquals("V3", cache.get("SIMPLE_K3"))
assertEquals("V3", l1Cache.get("SIMPLE_K3"))
assertTrue(r1.getHolder().getValue() instanceof CacheValueHolder)
assertTrue(r2.getHolder().getValue() instanceof CacheValueHolder)
assertTrue(multiResult.isSuccess())
assertTrue(multiResult.getValues().get("MIX_K1").isSuccess())
assertEquals("V1", multiResult.getValues().get("MIX_K1").getValue())
assertTrue(multiResult.getValues().get("MIX_K1").getHolder().getValue() instanceof CacheValueHolder)
assertTrue(multiResult.getValues().get("MIX_K2").isSuccess())
assertNull(multiResult.getValues().get("MIX_K2").getValue())
assertTrue(multiResult.getValues().get("MIX_K2").getHolder().getValue() instanceof CacheValueHolder)
assertNull(multiResult.getValues().get("MIX_K3").getValue())
assertNull(multiResult.getValues().get("MIX_K3").getHolder())
assertTrue(r1.getHolder().getValue() instanceof String)
assertNull(r2.getHolder().getValue())
assertTrue(multiResult.isSuccess())
assertTrue(multiResult.getValues().get("MIX_K1").isSuccess())
assertEquals("V1", multiResult.getValues().get("MIX_K1").getValue())
assertTrue(multiResult.getValues().get("MIX_K1").getHolder().getValue() instanceof String)
assertTrue(multiResult.getValues().get("MIX_K2").isSuccess())
assertNull(multiResult.getValues().get("MIX_K2").getValue())
assertNull(multiResult.getValues().get("MIX_K2").getHolder().getValue())
assertNull(multiResult.getValues().get("MIX_K3").getValue())
assertNull(multiResult.getValues().get("MIX_K3").getHolder())
Assertions.assertEquals("V1", c1.get("K"))
assertEquals(CacheResultCode.FAIL, cr.getResultCode())
assertNull(cr.getValue())
assertEquals(CacheResultCode.FAIL, cr.getResultCode())
assertNull(cr.getValue())
assertEquals(CacheResultCode.FAIL, cr.getResultCode())
assertNull(cr.getValues())
assertEquals(CacheResultCode.FAIL, cr.getResultCode())
assertNull(cr.getValues())
assertEquals(CacheResultCode.FAIL, cr.getResultCode())
assertEquals(CacheResultCode.FAIL, cr.getResultCode())
assertEquals(CacheResultCode.FAIL, cr.getResultCode())
assertEquals("XXX", cr.getMessage())
assertEquals(CacheResultCode.FAIL, cr.getResultCode())
assertEquals(CacheResultCode.FAIL, cr.getResultCode())
assertEquals(CacheResultCode.FAIL, cr.getResultCode())
assertEquals(CacheResultCode.FAIL, cr.getResultCode())
assertEquals(CacheResultCode.FAIL, cr.getResultCode())
assertEquals(CacheResultCode.FAIL, cr.getResultCode())
assertEquals(CacheResultCode.FAIL, cr.getResultCode())
assertEquals(CacheResultCode.FAIL, cr.getResultCode())
assertEquals(CacheResultCode.FAIL, cr.getResultCode())
assertEquals(CacheResultCode.FAIL, cr.getResultCode())
assertEquals("XXX", cr.getMessage())
Assert.assertEquals("V1", cache.get("K1"))
Assert.assertEquals("V1", cache.get("K1"))
assertEquals(CacheResultCode.FAIL, cr.getResultCode())
assertNull(cr.getValue())
assertEquals(CacheResultCode.FAIL, cr.getResultCode())
assertNull(cr.getValues())
assertEquals(CacheResultCode.FAIL, cr.getResultCode())
assertEquals(CacheResultCode.FAIL, cr.getResultCode())
assertEquals("XXX", cr.getMessage())
assertEquals(CacheResultCode.FAIL, cr.getResultCode())
assertEquals(CacheResultCode.FAIL, cr.getResultCode())
assertEquals(CacheResultCode.FAIL, cr.getResultCode())
assertEquals(CacheResultCode.FAIL, cr.getResultCode())
assertEquals(CacheResultCode.FAIL, cr.getResultCode())
assertEquals("XXX", cr.getMessage())
Assertions.assertTrue(result.isSuccess())
Assert.assertArrayEquals(bs, (byte[]) codec.decodeKey(codec.encodeKey(bs)))
Assert.assertArrayEquals(bs, (byte[]) codec.decodeValue(codec.encodeValue(bs)))
Assert.assertTrue(cache.unwrap(AbstractRedisClient.class) instanceof AbstractRedisClient)
Assert.assertEquals("V1", cache.get("readFromSlaveTest_K1"))
Assert.assertEquals("V1", cache.get("readFromSlaveTest_K1"))
Assert.assertEquals("V1", cache.get("readFromSlaveTest_K1"))
Assert.assertEquals("V1", cache.get("readFromSlaveTest_K1"))
Assert.assertEquals(CacheResultCode.NOT_EXISTS, cache.GET("vetoTest").getResultCode())
Assert.assertEquals(CacheResultCode.NOT_EXISTS, cache.GET("vetoTest").getResultCode())
Assert.assertNull(cache.get("nullValueTest_K1"))
Assert.assertEquals(1, monitor.getCacheStat().getGetCount())
Assert.assertEquals(0, monitor.getCacheStat().getGetHitCount())
Assert.assertEquals(1, monitor.getCacheStat().getGetMissCount())
Assert.assertEquals(1, monitor.getCacheStat().getLoadCount())
Assert.assertEquals(0, monitor.getCacheStat().getPutCount())
Assert.assertNull(cache.get("nullValueTest_K1"))
Assert.assertEquals(2, monitor.getCacheStat().getGetCount())
Assert.assertEquals(0, monitor.getCacheStat().getGetHitCount())
Assert.assertEquals(2, monitor.getCacheStat().getGetMissCount())
Assert.assertEquals(2, monitor.getCacheStat().getLoadCount())
Assert.assertEquals(1, monitor.getCacheStat().getPutCount())
Assert.assertNull(cache.get("nullValueTest_K1"))
Assert.assertEquals(3, monitor.getCacheStat().getGetCount())
Assert.assertEquals(1, monitor.getCacheStat().getGetHitCount())
Assert.assertEquals(2, monitor.getCacheStat().getGetMissCount())
Assert.assertEquals(2, monitor.getCacheStat().getLoadCount())
Assert.assertEquals(1, monitor.getCacheStat().getPutCount())
Assert.assertEquals("LoadingCache_Key1_V0", cache.get("LoadingCache_Key1"))
Assert.assertEquals(1, monitor.getCacheStat().getGetCount())
Assert.assertEquals(0, monitor.getCacheStat().getGetHitCount())
Assert.assertEquals(1, monitor.getCacheStat().getGetMissCount())
Assert.assertEquals(1, monitor.getCacheStat().getLoadCount())
Assert.assertEquals(1, monitor.getCacheStat().getPutCount())
Assert.assertEquals("LoadingCache_Key1_V0", cache.get("LoadingCache_Key1"))
Assert.assertEquals(2, monitor.getCacheStat().getGetCount())
Assert.assertEquals(1, monitor.getCacheStat().getGetHitCount())
Assert.assertEquals(1, monitor.getCacheStat().getGetMissCount())
Assert.assertEquals(1, monitor.getCacheStat().getLoadCount())
Assert.assertEquals(1, monitor.getCacheStat().getPutCount())
Assert.assertEquals("LoadingCache_Key1_V0", map.get("LoadingCache_Key1"))
Assert.assertEquals("LoadingCache_Key2_V1", map.get("LoadingCache_Key2"))
Assert.assertEquals("LoadingCache_Key3_V2", map.get("LoadingCache_Key3"))
Assert.assertEquals(5, monitor.getCacheStat().getGetCount())
Assert.assertEquals(2, monitor.getCacheStat().getGetHitCount())
Assert.assertEquals(3, monitor.getCacheStat().getGetMissCount())
Assert.assertEquals(3, monitor.getCacheStat().getLoadCount())
Assert.assertEquals(3, monitor.getCacheStat().getPutCount())
Assert.assertTrue(cache.unwrap(LinkedHashMap.class) instanceof LinkedHashMap)
Assert.assertTrue(cache.unwrap(com.github.benmanes.caffeine.cache.Cache.class) instanceof com.github.benmanes.caffeine.cache.Cache)
Assert.assertEquals("V1", cache.get("KK1"))
Assert.assertNull(l1Cache.get("useSubExpire_key"))
Assert.assertEquals("V1", cache.get("useSubExpire_key"))
Assert.assertNull(l1Cache.get("useSubExpire_key"))
Assert.assertNull(l1Cache.get("useSubExpire_key"))
Assert.assertEquals("V2", cache.getAll(s).get("useSubExpire_key"))
Assert.assertNull(l1Cache.get("useSubExpire_key"))
Assert.assertEquals(oldStat.getGetCount() + 1, m.getCacheStat().getGetCount())
Assert.assertEquals(oldStat.getGetMissCount() + 1, m.getCacheStat().getGetMissCount())
Assert.assertEquals(oldStat.getPutCount() + 1, m.getCacheStat().getPutCount())
Assert.assertEquals(oldStat.getGetCount() + 1, m.getCacheStat().getGetCount())
Assert.assertEquals(oldStat.getGetHitCount() + 1, m.getCacheStat().getGetHitCount())
Assert.assertEquals(oldStat.getRemoveCount() + 1, m.getCacheStat().getRemoveCount())
Assert.assertEquals(oldStat.getGetCount() + 1, m.getCacheStat().getGetCount())
Assert.assertEquals(oldStat.getGetMissCount() + 1, m.getCacheStat().getGetMissCount())
Assert.assertEquals(oldStat.getPutCount(), m.getCacheStat().getPutCount())
Assert.assertEquals(oldStat.getLoadCount() + 1, m.getCacheStat().getLoadCount())
Assert.assertEquals(oldStat.getLoadSuccessCount() + 1, m.getCacheStat().getLoadSuccessCount())
Assert.assertEquals(oldStat.getGetCount() + 1, m.getCacheStat().getGetCount())
Assert.assertEquals(oldStat.getGetMissCount() + 1, m.getCacheStat().getGetMissCount())
Assert.assertEquals(oldStat.getPutCount() + 1, m.getCacheStat().getPutCount())
Assert.assertEquals(oldStat.getLoadCount() + 1, m.getCacheStat().getLoadCount())
Assert.assertEquals(oldStat.getLoadSuccessCount() + 1, m.getCacheStat().getLoadSuccessCount())
Assert.assertEquals(oldStat.getGetCount() + 1, m.getCacheStat().getGetCount())
Assert.assertEquals(oldStat.getGetHitCount() + 1, m.getCacheStat().getGetHitCount())
Assert.assertEquals(oldStat.getRemoveCount() + 1, m.getCacheStat().getRemoveCount())
Assert.assertEquals(oldStat.getGetCount() + 1, m.getCacheStat().getGetCount())
Assert.assertEquals(oldStat.getGetMissCount() + 1, m.getCacheStat().getGetMissCount())
Assert.assertEquals(oldStat.getPutCount(), m.getCacheStat().getPutCount())
Assert.assertEquals(oldStat.getLoadCount() + 1, m.getCacheStat().getLoadCount())
Assert.assertEquals(oldStat.getLoadSuccessCount() + 1, m.getCacheStat().getLoadSuccessCount())
Assert.assertEquals(oldStat.getGetCount() + 1, m.getCacheStat().getGetCount())
Assert.assertEquals(oldStat.getGetMissCount() + 1, m.getCacheStat().getGetMissCount())
Assert.assertEquals(oldStat.getPutCount() + 1, m.getCacheStat().getPutCount())
Assert.assertEquals(oldStat.getLoadCount() + 1, m.getCacheStat().getLoadCount())
Assert.assertEquals(oldStat.getLoadSuccessCount() + 1, m.getCacheStat().getLoadSuccessCount())
Assert.assertEquals(oldStat.getGetCount() + 1, m.getCacheStat().getGetCount())
Assert.assertEquals(oldStat.getGetHitCount() + 1, m.getCacheStat().getGetHitCount())
Assert.assertEquals(oldStat.getRemoveCount() + 1, m.getCacheStat().getRemoveCount())
Assert.assertEquals(oldStat.getPutCount() + 2, m.getCacheStat().getPutCount())
Assert.assertEquals(oldStat.getGetCount() + 3, m.getCacheStat().getGetCount())
Assert.assertEquals(oldStat.getGetHitCount() + 2, m.getCacheStat().getGetHitCount())
Assert.assertEquals(oldStat.getGetMissCount() + 1, m.getCacheStat().getGetMissCount())
Assert.assertEquals(oldStat.getRemoveCount() + 3, m.getCacheStat().getRemoveCount())
Assert.assertEquals(oldStat.getRemoveCount() + 3, m.getCacheStat().getRemoveSuccessCount())
Assert.assertEquals(k1, k2)
Assert.assertEquals(g.apply(new Object[] { q1 }), g.apply(new Object[] { q2 }))
Assert.assertEquals(g.apply(new Object[] { q1 }), g.apply(new Object[] { q2 }))
Assert.assertEquals(g.apply(new Object[] { q1 }), g.apply(new Object[] { q2 }))
Assert.assertEquals(t.withSecond(34).withNano(0), rt)
Assert.assertEquals(t.withSecond(34).withNano(0), rt)
Assert.assertEquals(t.withMinute(51).withSecond(0).withNano(0), rt)
Assert.assertEquals(t.withMinute(51).withSecond(0).withNano(0), rt)
Assert.assertEquals(t.withMinute(51).withSecond(0).withNano(0), rt)
Assert.assertEquals(t.withMinute(55).withSecond(0).withNano(0), rt)
Assert.assertEquals(t.withDayOfMonth(12).withHour(0).withMinute(0).withSecond(0).withNano(0), rt)
Assert.assertEquals(t.withDayOfMonth(12).withHour(0).withMinute(0).withSecond(0).withNano(0), rt)
Assert.assertEquals(t.withDayOfMonth(12).withHour(0).withMinute(0).withSecond(0).withNano(0), rt)
Assert.assertEquals(t.withDayOfMonth(12).withHour(0).withMinute(0).withSecond(0).withNano(0), rt)
Assert.assertEquals(t.withDayOfMonth(12).withHour(0).withMinute(0).withSecond(0).withNano(0), rt)
Assert.assertEquals(t.withDayOfMonth(12).withHour(0).withMinute(0).withSecond(0).withNano(0), rt)
Assertions.assertEquals("V1", local1.get("K1"))
Assertions.assertEquals("V1", local2.get("K1"))
Assertions.assertEquals("V2", local1.get("K1"))
Assertions.assertEquals("V1", local1.get("K1"))
Assertions.assertEquals("V1", local2.get("K1"))
Assertions.assertEquals(null, local2.get("K1"))
Assertions.assertEquals("V1", local2.get("K1"))
Assertions.assertEquals("V1", local1.get("K1"))
Assertions.assertEquals("V2_new", local1.get("K2"))
assertNull(decoder.apply(encoder.apply(null)))
assertEquals("", decoder.apply(encoder.apply("")))
assertEquals("123", decoder.apply(encoder.apply("123")))
assertEquals(123, decoder.apply(encoder.apply(123)))
assertEquals(date, decoder.apply(encoder.apply(date)))
assertArrayEquals(new byte[] { 1, 2, 3, -1 }, (byte[]) decoder.apply(encoder.apply(new byte[] { 1, 2, 3, -1 })))
assertEquals(h.getExpireTime(), h2.getExpireTime())
assertNull(h2.getValue())
assertEquals(h.getExpireTime(), h2.getExpireTime())
assertEquals("c", cm2.getCacheName())
assertNull(cm2.getKeys())
assertEquals("12", cm2.getKeys()[0])
assertEquals("34", cm2.getKeys()[1])
assertEquals("1", m2.get(1))
assertEquals("2", m2.get(2))
assertEquals("3", m2.get(3))
assertEquals("4", m2.get(4))
assertEquals("5", m2.get(5))
assertEquals(1, list2.get(0))
assertEquals(2, list2.get(1))
assertEquals(3, list2.get(2))
assertEquals(4, list2.get(3))
assertEquals(5, list2.get(4))
assertTrue(s2.contains(1))
assertTrue(s2.contains(2))
assertTrue(s2.contains(3))
assertTrue(s2.contains(4))
assertTrue(s2.contains(5))
assertEquals(q.getId(), q2.getId())
assertEquals(q.getName(), q2.getName())
assertEquals(q.getEmail(), q2.getEmail())
Assert.assertSame(m.commands(client), m.commands(client))
Assert.assertSame(m.asyncCommands(client), m.asyncCommands(client))
Assert.assertSame(m.reactiveCommands(client), m.reactiveCommands(client))
Assert.assertSame(m.commands(client), m.commands(client))
Assert.assertSame(m.asyncCommands(client), m.asyncCommands(client))
Assert.assertSame(m.reactiveCommands(client), m.reactiveCommands(client))
Assert.assertNotSame(pool1, ((RedisCache) cache).readCommands())
Assert.assertNotSame(pool1, ((RedisCache) cache).readCommands())
Assert.assertNotSame(pool1, ((RedisCache) cache).readCommands())
Assert.assertNotSame(pool1, ((RedisCache) cache).readCommands())
Assert.assertNotNull(l1Cache.get("useSubExpire_key"))
Assert.assertNotNull(l1Cache.get("useSubExpire_key"))
Assert.assertNotEquals(k1, k3)
Assert.assertNotEquals(k1, k2)
Assert.assertNotEquals(g.apply(new Object[] { q1 }), g.apply(new Object[] { q2 }))
Assert.assertNotEquals(g.apply(new Object[] { q1 }), g.apply(new Object[] { q2 }))
assertNull(cache.tryLock(null, 1, TimeUnit.HOURS))
assertNotNull(lock)
assertNotNull(concreteCache.get("key"))
assertNotNull(lock)
assertNull(lock)
assertNull(lock)
assertNull(lock)
assertNotNull(lock)
assertNotNull(lock)
assertNull(lock)
assertEquals(CacheResultCode.NOT_EXISTS, concreteCache.GET("key").getResultCode())
assertEquals(CacheResultCode.NOT_EXISTS, concreteCache.GET("key").getResultCode())
assertNotNull(concreteCache.get("key"))
assertNotNull(concreteCache.get("key"))
assertNotNull(concreteCache.GET("key"))
Assert.assertNotNull(t1)
Assert.assertNotNull(t2)
Assert.assertNotSame(t1, t2)
Assert.assertTrue(new LettuceFactory(acb, key, StatefulRedisConnection.class).getObject() instanceof StatefulRedisConnection)
Assert.assertTrue(new LettuceFactory(acb, key, RedisCommands.class).getObject() instanceof RedisCommands)
Assert.assertTrue(new LettuceFactory(acb, key, RedisAsyncCommands.class).getObject() instanceof RedisAsyncCommands)
Assert.assertTrue(new LettuceFactory(acb, key, RedisReactiveCommands.class).getObject() instanceof RedisReactiveCommands)
Assert.assertNotNull(c1.unwrap(RedisClient.class))
Assert.assertEquals(20000, cc1.getExpireAfterWriteInMillis())
Assert.assertEquals("V1", a1SlaveCache.get("K1"))
Assert.assertNotNull(defaultClient)
Assert.assertNotNull(a1Client)
Assert.assertTrue(cache.PUT("K", "V").isSuccess())
assertEquals(8, configTree.getProperties().size())
assertEquals(3, configTree.subTree("remote.default").getProperties().size())
assertEquals(5, configTree.subTree("remote.A1.").getProperties().size())
assertEquals(1, configTree.subTree("remote.default.uri").getProperties().size())
assertEquals(3, configTree.subTree("remote.A1.uri").getProperties().size())
assertTrue(configTree.containsProperty("remote.default.type"))
assertTrue(configTree.containsProperty("remote.default.uri"))
assertEquals("redis://127.0.0.1:6379/", configTree.getProperty("remote.default.uri"))
assertEquals(1, children.size())
assertTrue(children.contains("remote"))
assertEquals(2, children.size())
assertTrue(children.contains("default"))
assertTrue(children.contains("A1"))
assertEquals(0, children.size())
Assert.assertTrue(cache.PUT("K", "V").isSuccess())
Assert.assertTrue(t1 instanceof Pool)
Assert.assertTrue(t2 instanceof JedisSentinelPool)
Assert.assertEquals(200, cc1.getLimit())
Assert.assertEquals(10000, cc1.getExpireAfterWriteInMillis())
Assert.assertEquals(2, slavePools.length)
Assert.assertTrue(Arrays.equals(new int[] { 30, 100 }, ws) || Arrays.equals(new int[] { 100, 30 }, ws))
assertTrue(c instanceof AbstractExternalCache)
assertEquals(cb.getConfig().getExpireAfterWriteInMillis(), c.config().getExpireAfterWriteInMillis())
assertSame(cb.getConfig().getKeyConvertor(), config.getKeyConvertor())
assertSame(cb.getConfig().getValueEncoder(), config.getValueEncoder())
assertSame(cb.getConfig().getValueDecoder(), config.getValueDecoder())
assertEquals(cb.getConfig().isCacheNullValue(), config.isCacheNullValue())
assertEquals(cb.getConfig().getKeyPrefix() + cacheName, config.getKeyPrefix())
assertEquals(cb.getConfig().isCachePenetrationProtect(), config.isCachePenetrationProtect())
assertEquals(cb.getConfig().getPenetrationProtectTimeout(), config.getPenetrationProtectTimeout())
assertNull(c.config().getRefreshPolicy())
assertEquals(2000, remoteConfig.getExpireAfterWriteInMillis())
assertEquals(1000, localConfig.getExpireAfterWriteInMillis())
assertEquals(1, localConfig.getLimit())
assertSame(keyConvertor, localConfig.getKeyConvertor())
assertSame(keyConvertor, remoteConfig.getKeyConvertor())
assertSame(valueEncoder, remoteConfig.getValueEncoder())
assertSame(valueDecoder, remoteConfig.getValueDecoder())
assertTrue(localConfig.isCacheNullValue())
assertTrue(remoteConfig.isCacheNullValue())
assertEquals(cb.getConfig().getKeyPrefix() + CacheConsts.DEFAULT_AREA + "_" + cacheName, remoteConfig.getKeyPrefix())
assertTrue(multiConfig.isCachePenetrationProtect())
assertEquals(Duration.ofSeconds(20), multiConfig.getPenetrationProtectTimeout())
assertSame(rp, multiConfig.getRefreshPolicy())
assertTrue(c instanceof AbstractEmbeddedCache)
assertEquals("K1V", cache.get("K1"))
assertEquals("K10", cache.get("K1"))
Assert.assertEquals(testBean.count(), testBean.count())
Assert.assertTrue(cache.PUT("K1", "V1").isSuccess())
Assert.assertEquals("V1", cache.get("K1"))
Assert.assertEquals(serviceDelegate.combinedTest1(), serviceDelegate.combinedTest1())
Assert.assertEquals(serviceDelegate.combinedTest2(), serviceDelegate.combinedTest2())
Assert.assertEquals(service.combinedTest1(), service.combinedTest1())
Assert.assertEquals(service.combinedTest2(), service.combinedTest2())
Assertions.assertEquals(1000, c1.config().getExpireAfterWriteInMillis())
Assertions.assertEquals(1000, c2.config().getExpireAfterWriteInMillis())
Assert.assertTrue(pc.matches(C1.class))
Assert.assertTrue(pc.matches(I1.class))
Assert.assertTrue(pc.matches(m1, C1.class))
Assert.assertTrue(pc.matches(m2, C1.class))
Assert.assertTrue(pc.matches(m1, I1.class))
Assert.assertTrue(pc.matches(m2, I1.class))
Assert.assertTrue(pc.matches(m1, o1.getClass()))
Assert.assertTrue(pc.matches(m2, o1.getClass()))
Assert.assertTrue(pc.matches(o1.getClass().getMethod("foo"), o1.getClass()))
Assert.assertTrue(pc.matches(m1, C2.class))
Assert.assertTrue(pc.matches(m2, C2.class))
Assert.assertTrue(pc.matches(m2, I2.class))
Assert.assertTrue(pc.matches(m1, o1.getClass()))
Assert.assertTrue(pc.matches(m2, o1.getClass()))
Assert.assertTrue(pc.matches(o1.getClass().getMethod("foo"), o1.getClass()))
Assert.assertTrue(pc.matches(m1, C3.class))
Assert.assertTrue(pc.matches(m2, C3.class))
Assert.assertTrue(pc.matches(m3, C3.class))
Assert.assertTrue(pc.matches(m1, I3.class))
Assert.assertTrue(pc.matches(m2, I3.class))
Assert.assertTrue(pc.matches(m3, I3.class))
Assert.assertTrue(map.getByMethodInfo(CachePointcut.getKey(m1, I3.class)).isEnableCacheContext())
Assert.assertTrue(map.getByMethodInfo(CachePointcut.getKey(m1, C3.class)).isEnableCacheContext())
Assert.assertTrue(map.getByMethodInfo(CachePointcut.getKey(m2, I3.class)).isEnableCacheContext())
Assert.assertTrue(map.getByMethodInfo(CachePointcut.getKey(m2, C3.class)).isEnableCacheContext())
Assert.assertTrue(map.getByMethodInfo(CachePointcut.getKey(m3, I3.class)).isEnableCacheContext())
Assert.assertTrue(map.getByMethodInfo(CachePointcut.getKey(m3, C3.class)).isEnableCacheContext())
Assert.assertEquals("A1", cac.getArea())
Assert.assertEquals(false, cac.isEnabled())
Assert.assertEquals(1, cac.getExpire())
Assert.assertEquals(CacheType.BOTH, cac.getCacheType())
Assert.assertEquals(2, cac.getLocalLimit())
Assert.assertTrue(pc.matches(m1, C4.class))
Assert.assertTrue(pc.matches(m2, C4.class))
Assert.assertTrue(pc.matches(m1, I4.class))
Assert.assertTrue(pc.matches(m2, I4.class))
Assert.assertTrue(map.getByMethodInfo(CachePointcut.getKey(m1, C4.class)).isEnableCacheContext())
Assert.assertTrue(map.getByMethodInfo(CachePointcut.getKey(m2, I4.class)).isEnableCacheContext())
Assert.assertTrue(map.getByMethodInfo(CachePointcut.getKey(m2, C4.class)).isEnableCacheContext())
Assert.assertTrue(pc.matches(C5.class))
Assert.assertTrue(pc.matches(C5.class.getMethod("bar2"), C5.class))
Assert.assertTrue(pc.matches(m1, C6_2.class))
Assert.assertTrue(pc.matches(m3, I6.class))
Assert.assertTrue(pc.matches(m3, C6_2.class))
assertNotEquals(c1.count(), c1.count())
assertNotEquals(c1.countWithoutCache(), c1.countWithoutCache())
assertEquals(c2.count(), c2.count())
assertNotEquals(c2.countWithoutCache(), c2.countWithoutCache())
assertNotEquals(c1.count(), c1.count())
assertNotEquals(c1.countWithoutCache(), c1.countWithoutCache())
assertEquals(c2.count(), c2.count())
assertNotEquals(c2.countWithoutCache(), c2.countWithoutCache())
assertEquals(c2.count(), c4.count())
assertNotEquals(c1.count(), c1.count())
assertNotEquals(c1.countWithoutCache(), c1.countWithoutCache())
assertEquals(c2.count(), c2.count())
assertNotEquals(c2.countWithoutCache(), c2.countWithoutCache())
assertNotEquals(c1.count(), c1.count())
assertNotEquals(c1.countWithoutCache(), c1.countWithoutCache())
assertEquals(c2.count(), c2.count())
assertNotEquals(c2.countWithoutCache(), c2.countWithoutCache())
assertNotEquals(c1.count(), c1.count())
assertNotEquals(c1.countWithoutCache(), c1.countWithoutCache())
assertNotEquals(c2.count(), c2.count())
assertNotEquals(c2.countWithoutCache(), c2.countWithoutCache())
assertNotEquals(c1.count(), c1.count())
assertNotEquals(c1.countWithoutCache(), c1.countWithoutCache())
assertEquals(c2.count(), c2.count())
assertNotEquals(c2.countWithoutCache(), c2.countWithoutCache())
assertNotEquals(c2_1.count(), c2_1.count())
assertNotEquals(c2_2.countWithoutCache(), c2_2.countWithoutCache())
assertEquals(c2_2.count(), c2_2.count())
assertEquals(v1, i8_proxy.count("K1"))
assertNotEquals(v1, v2)
assertEquals(v2, i8_proxy.count("K1"))
assertEquals(200, i8_proxy.count("K1"))
assertEquals(200, i8_proxy.count("K1"))
assertEquals(i8_proxy.count("K1"), i8_proxy.count("K1"))
assertNotEquals(i8_proxy.count("K1"), i8_proxy.count("K2"))
assertEquals(i8_proxy.randomUpdate("K1"), i8_proxy.count("K1"))
assertEquals(i8_proxy.randomUpdate2("K1"), i8_proxy.count("K1"))
Assert.assertNotNull(c1.unwrap(com.github.benmanes.caffeine.cache.Cache.class))
Assert.assertNotNull(defaultPool)
Assert.assertNotNull(A1Pool)
Assert.assertNotNull(cache)
Assert.assertNotNull(map.getByMethodInfo(CachePointcut.getKey(m1, C1.class)).getCachedAnnoConfig())
Assert.assertNotNull(map.getByMethodInfo(CachePointcut.getKey(m1, I1.class)).getCachedAnnoConfig())
Assert.assertNotNull(map.getByMethodInfo(CachePointcut.getKey(m2, C1.class)).getCachedAnnoConfig())
Assert.assertNotNull(map.getByMethodInfo(CachePointcut.getKey(m2, I1.class)).getCachedAnnoConfig())
Assert.assertNotNull(map.getByMethodInfo(CachePointcut.getKey(m1, C2.class)).getCachedAnnoConfig())
Assert.assertNotNull(map.getByMethodInfo(CachePointcut.getKey(m2, I2.class)).getCachedAnnoConfig())
Assert.assertNotNull(map.getByMethodInfo(CachePointcut.getKey(m2, C2.class)).getCachedAnnoConfig())
Assert.assertNotNull(map.getByMethodInfo(CachePointcut.getKey(m1, I4.class)).getCachedAnnoConfig())
Assert.assertNotNull(map.getByMethodInfo(CachePointcut.getKey(m1, C4.class)).getCachedAnnoConfig())
Assert.assertNotNull(map.getByMethodInfo(CachePointcut.getKey(m2, I4.class)).getCachedAnnoConfig())
Assert.assertNotNull(map.getByMethodInfo(CachePointcut.getKey(m2, C4.class)).getCachedAnnoConfig())
assertNull(cache.get("KEY"))
assertNull(cache.get("KEY1"))
assertNull(cache.get("KEY2"))
assertNull(cache.get("KEY"))
assertNotNull(cache.get("KEY"))
assertNotNull(cache.get("KEY"))
assertNotNull(cache.get("KEY"))
Assert.assertNotSame(t1, t2)
Assert.assertSame(CacheInvokeConfig.getNoCacheInvokeConfigInstance(), map.getByMethodInfo(CachePointcut.getKey(m1, I2.class)))
assertTrue(e.getTarget() instanceof SpelEvaluator)
assertTrue(e.getTarget() instanceof SpelEvaluator)
assertTrue(e.getTarget() instanceof MvelEvaluator)
assertEquals("a_bean", e.apply(root))
assertEquals("123", e.apply(root))
assertNull(e.apply(root))
assertEquals(3, is.length)
assertNull(ClassUtil.getShortClassName(null))
assertEquals("j.l.String", ClassUtil.getShortClassName("java.lang.String"))
assertEquals("String", ClassUtil.getShortClassName("String"))
assertEquals(s1, s2)
assertEquals(s1, s2)
assertEquals(s1, s2)
assertEquals(x1, x2)
assertEquals(x1, x3)
assertEquals(X1, X3)
assertEquals(X2, X4)
assertEquals(x1, x4)
assertEquals(x2, x5)
assertEquals(x3, x6)
assertNull(x1)
assertNotNull(x2)
assertNotNull(x3)
assertEquals(x2, x3)
assertNull(x1)
assertNull(x2)
assertNull(x3)
assertNotEquals(x1, x2)
assertEquals(x1, x2)
assertNotEquals(x1, x2)
assertEquals(x2, x3)
assertEquals(x1, x2)
assertNotEquals(x1, x2)
assertTrue(x1 != x2 && x1 != x3 && x2 != x3)
assertTrue(x1 != x2 && x1 != x3 && x2 != x3)
assertEquals(x1, x2)
assertEquals(x1, x3)
assertEquals(x1, x2)
assertNotEquals(x1, x2)
assertEquals(x1, x2)
assertTrue(ExpressionUtil.evalCondition(context, cachedAnnoConfig))
assertTrue(ExpressionUtil.evalCondition(context, cachedAnnoConfig))
assertTrue(ExpressionUtil.evalCondition(context, cachedAnnoConfig))
assertTrue(ExpressionUtil.evalPostCondition(context, cachedAnnoConfig))
assertTrue(ExpressionUtil.evalPostCondition(context, cachedAnnoConfig))
assertTrue(ExpressionUtil.evalPostCondition(context, cachedAnnoConfig))
assertEquals(5678, ExpressionUtil.evalKey(context, cachedAnnoConfig))
assertNull(ExpressionUtil.evalKey(context, cachedAnnoConfig))
assertEquals(5678, ExpressionUtil.evalValue(context, updateAnnoConfig))
assertNull(ExpressionUtil.evalValue(context, updateAnnoConfig))
assertNotNull(cic.getCachedAnnoConfig())
assertNull(cic.getCachedAnnoConfig().getRefreshPolicy())
assertNotNull(cic.getCachedAnnoConfig())
assertNotNull(cic.getCachedAnnoConfig().getRefreshPolicy())
assertTrue(cic.isEnableCacheContext())
assertNotNull(cic.getInvalidateAnnoConfigs())
assertNotNull(cic.getUpdateAnnoConfig())
assertNotNull(cic.getInvalidateAnnoConfigs())
assertNotNull(cic.getUpdateAnnoConfig())
assertNotNull(cic.getInvalidateAnnoConfigs())
assertEquals(2, cic.getInvalidateAnnoConfigs().size())
assertEquals("a_bean", e.apply(new RootObject()))
assertEquals(1000, cache.get("K1"))
assertEquals(1000, cache.get("K1"))
assertEquals("V", cache.get("K1"))
assertEquals("V", cache.get("K1"))
assertEquals("V", cache.get("K1"))
assertEquals("V", cache.get("K1"))
Assertions.assertEquals(2, cacheManager.getCacheBuilderTemplate().getCacheMonitorInstallers().size())
Assertions.assertEquals(2, monitors.size())
Assertions.assertEquals("K1", MockRemoteCacheBuilder.getLastPublishMessage().getKeys()[0])
assertEquals(s1, s2)
assertEquals(s1, s2)
assertEquals(s1, s2)
assertEquals(s1, s2)
assertEquals("Foo", g.removeHiddenPackage(hs, "com.foo.Foo"))
assertEquals("foo.Bar", g.removeHiddenPackage(hs, "com.bar.foo.Bar"))
assertEquals("", g.removeHiddenPackage(hs, "com.foo"))
assertEquals("com.bar.foo.Bar", g.removeHiddenPackage(null, "com.bar.foo.Bar"))
assertEquals(null, g.removeHiddenPackage(hs, null))
assertEquals(JavaValueEncoder.class, parser.parseEncoder("java").getClass())
assertSame(func, parser.parseEncoder("bean:myBean"))
assertSame(func, parser.parseEncoder("bean:sp"))
assertEquals(KryoValueDecoder.class, parser.parseDecoder("kryo").getClass())
assertSame(func, parser.parseDecoder("bean:myBean"))
assertSame(func, parser.parseDecoder("bean:sp"))
assertSame(FastjsonKeyConvertor.INSTANCE, parser.parseKeyConvertor("fastjson"))
assertSame(func, parser.parseKeyConvertor("bean:cvt"))
Assertions.assertTrue(MockRemoteCacheBuilder.isSubscribeStart())
Assert.assertEquals(value, bean.count("K1"))
Assert.assertNotEquals(value, bean.count("K1"))
Assert.assertNotNull(cm.getCache("C1"))
Assert.assertNotNull(cm.getCache("C2"))
Assert.assertTrue(CacheContext.isEnabled())
Assert.assertEquals(value, bean.count("K1"))
Assert.assertNotEquals(value, bean.count("K1"))
Assert.assertEquals(CacheMessage.TYPE_PUT, MockRemoteCacheBuilder.getLastPublishMessage().getType())
Assert.assertEquals("K1", MockRemoteCacheBuilder.getLastPublishMessage().getKeys()[0])
Assert.assertEquals(CacheMessage.TYPE_PUT_ALL, MockRemoteCacheBuilder.getLastPublishMessage().getType())
Assert.assertEquals("K1", MockRemoteCacheBuilder.getLastPublishMessage().getKeys()[0])
Assert.assertEquals("K2", MockRemoteCacheBuilder.getLastPublishMessage().getKeys()[1])
Assert.assertEquals(CacheMessage.TYPE_REMOVE, MockRemoteCacheBuilder.getLastPublishMessage().getType())
Assert.assertEquals("K3", MockRemoteCacheBuilder.getLastPublishMessage().getKeys()[0])
Assert.assertEquals(CacheMessage.TYPE_REMOVE_ALL, MockRemoteCacheBuilder.getLastPublishMessage().getType())
Assert.assertEquals("K1", MockRemoteCacheBuilder.getLastPublishMessage().getKeys()[0])
Assert.assertEquals("K3", MockRemoteCacheBuilder.getLastPublishMessage().getKeys()[1])
assertEquals(0, DefaultEncoderParser.parseQueryParameters(null).size())
assertEquals("b", DefaultEncoderParser.parseQueryParameters("a=b").get("a"))
assertEquals("b", m.get("a"))
assertEquals("d", m.get("c"))
assertEquals(KryoValueEncoder.class, encoder.getClass())
assertTrue(encoder.isUseIdentityNumber())
assertEquals(JavaValueEncoder.class, encoder.getClass())
assertEquals(KryoValueDecoder.class, decoder.getClass())
assertTrue(decoder.isUseIdentityNumber())
assertEquals(JavaValueDecoder.class, decoder.getClass())
