assertTrue(ClassUtils.isAssignable(new ParameterizedTypeReference<PropertySource<Iterable<ConfigurationPropertySource>>>() {
}, EncryptableConfigurationPropertySourcesPropertySource.class))
assertFalse(ClassUtils.isAssignable(new ParameterizedTypeReference<PropertySource<Map<String, Object>>>() {
}, EncryptableConfigurationPropertySourcesPropertySource.class))
assertTrue(ClassUtils.isAssignable(new ParameterizedTypeReference<PropertySource<Map<String, Object>>>() {
}, EncryptableMapPropertySourceWrapper.class))
assertFalse(ClassUtils.isAssignable(new ParameterizedTypeReference<PropertySource<Iterable<ConfigurationPropertySource>>>() {
}, EncryptableMapPropertySourceWrapper.class))
assertTrue(filter.shouldInclude(source, "some.property"))
assertTrue(filter.shouldInclude(source, "some.property"))
assertTrue(filter.shouldInclude(source, "some.property"))
assertTrue(filter.shouldInclude(source, "some.property"))
assertTrue(filter.shouldInclude(source, "some.property"))
assertTrue(filter.shouldInclude(source, "some.property"))
assertTrue(filter.shouldInclude(source, "some.property"))
assertTrue(filter.shouldInclude(source, "some.property"))
assertTrue(filter.shouldInclude(source, "some.property"))
assertTrue(filter.shouldInclude(source, "some.property"))
assertTrue(filter.shouldInclude(source, "some.property"))
assertTrue(filter.shouldInclude(source, "some.property"))
assertTrue(filter.shouldInclude(source, "some.property"))
assertFalse(filter.shouldInclude(source, "some.property"))
assertFalse(filter.shouldInclude(source, "some.property"))
assertFalse(filter.shouldInclude(source, "some.property"))
assertFalse(filter.shouldInclude(source, "some.property"))
assertFalse(filter.shouldInclude(source, "some.property"))
assertFalse(filter.shouldInclude(source, "some.property"))
assertFalse(filter.shouldInclude(source, "some.property"))
assertFalse(filter.shouldInclude(source, "some.property"))
assertFalse(filter.shouldInclude(source, "some.property"))
assertFalse(filter.shouldInclude(source, "some.property"))
assertFalse(filter.shouldInclude(source, "some.property"))
assertFalse(filter.shouldInclude(source, "some.property"))
assertFalse(filter.shouldInclude(source, "some.property"))
assertEquals(decrypted, message)
assertEquals(decrypted, message)
assertEquals(decrypted, message)
assertEquals(decrypted, message)
assertEquals(decrypted, message)
assertEquals(decrypted, message)
assertEquals(message, decrypted)
assertEquals(message, decrypted)
assertEquals(message, decrypted)
assertEquals(message, decrypted)
assertEquals(message, decrypted)
assertEquals(message, decrypted)
assertEquals(message, decrypted)
assertEquals(message, decrypted)
assertEquals(message, decrypted)
assertNotNull(this.context.getBean(EnableEncryptablePropertiesBeanFactoryPostProcessor.class))
assertNotNull(this.context.getBean(EnableEncryptablePropertiesBeanFactoryPostProcessor.class))
assertEquals("test1", myProperties.getFooString())
assertEquals("test2", myProperties.getBarString())
assertNotNull(myProperties.getFooList())
assertEquals("[a1, b1]", myProperties.getFooList().toString())
assertNotNull(myProperties.getBarList())
assertEquals("[a2, b2]", myProperties.getBarList().toString())
assertNotNull(myProperties.getStringMap())
assertEquals("{k1=v1}", myProperties.getStringMap().toString())
assertNotNull(myProperties.getListMap())
assertEquals("{k2=[v2]}", myProperties.getListMap().toString())
