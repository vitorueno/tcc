Assertions.assertTrue(sync(list.add("1")))
Assertions.assertTrue(sync(list.add("2")))
Assertions.assertTrue(sync(list.add("3")))
Assertions.assertTrue(sync(list.add("4")))
Assertions.assertTrue(sync(list.add("5")))
Assertions.assertEquals(true, sync(list2.addAll(list.iterator())))
Assertions.assertEquals(5, sync(list2.size()).intValue())
Assertions.assertTrue(sync(set.add("a")))
Assertions.assertTrue(sync(set.add("b")))
Assertions.assertTrue(sync(set.add("c")))
Assertions.assertTrue(sync(set.add("d")))
Assertions.assertTrue(sync(set.add("e")))
Assertions.assertTrue(sync(set.add("f")))
Assertions.assertTrue(sync(set.add("g")))
Assertions.assertEquals(0, sync(set.removeRangeTail("z", false)).intValue())
Assertions.assertEquals(4, sync(set.removeRangeTail("c", false)).intValue())
Assertions.assertEquals(1, sync(set.removeRangeTail("c", true)).intValue())
Assertions.assertEquals(2, sync(set.removeRangeHead("c", false)).intValue())
Assertions.assertEquals(1, (int) sync(set.removeRangeHead("c", true)))
Assertions.assertEquals(5, sync(set.removeRange("aaa", true, "g", false)).intValue())
Assertions.assertTrue(sync(set.add("a")))
Assertions.assertTrue(sync(set.add("b")))
Assertions.assertTrue(sync(set.add("c")))
Assertions.assertTrue(sync(set.add("d")))
Assertions.assertTrue(sync(set.add("e")))
Assertions.assertTrue(sync(set.add("f")))
Assertions.assertTrue(sync(set.add("g")))
Assertions.assertEquals(5, (int) sync(set.count("b", true, "f", true)))
Assertions.assertEquals(3, (int) sync(set.count("b", false, "f", false)))
Assertions.assertEquals("1", iter.next())
Assertions.assertEquals("4", iter.next())
Assertions.assertEquals(4, iteration)
Assertions.assertEquals(0, list.size())
Assertions.assertTrue(list.isEmpty())
Assertions.assertEquals(0, setCopy.size())
Assertions.assertTrue(setRes)
Assertions.assertTrue(set.add(1))
Assertions.assertTrue(set.add(2))
Assertions.assertTrue(set.add(3))
Assertions.assertTrue(set.add(4))
Assertions.assertTrue(set.add(5))
Assertions.assertTrue(setRes3)
Assertions.assertTrue(set.add(2))
Assertions.assertTrue(set.add(3))
Assertions.assertTrue(set.add(1))
Assertions.assertTrue(set.add(4))
Assertions.assertTrue(set.add(10))
Assertions.assertTrue(set.add(-1))
Assertions.assertTrue(set.add(0))
Assertions.assertEquals(-1, (int) set.peek())
Assertions.assertTrue(set.remove(3))
Assertions.assertTrue(set.remove(1))
Assertions.assertTrue(set.retainAll(Arrays.asList(1, 2)))
Assertions.assertEquals(2, set.size())
Assertions.assertTrue(set.containsAll(Arrays.asList(30, 11)))
Assertions.assertTrue(set.contains(new TestObject("2", "3")))
Assertions.assertTrue(set.contains(new TestObject("1", "2")))
Assertions.assertEquals(5, set.size())
Assertions.assertEquals(7, set.size())
Assertions.assertEquals(5, sync(bs.length()).intValue())
Assertions.assertEquals(32, sync(bs.length()).intValue())
Assertions.assertEquals(8, sync(bs.length()).intValue())
Assertions.assertEquals(122, sync(bs.length()).intValue())
Assertions.assertEquals(1, sync(bs.length()).intValue())
Assertions.assertEquals("{3, 4, 5, 6, 7}", bs.toString())
Assertions.assertEquals("{0, 1, 2, 4, 6, 7}", bs.toString())
Assertions.assertEquals("{3, 5}", bs.toString())
Assertions.assertEquals("{1, 10}", bs.toString())
Assertions.assertEquals(0, sync(bitset.cardinality()).intValue())
Assertions.assertEquals(0, sync(bitset.size()).intValue())
Assertions.assertTrue(sync(bitset.get(31)))
Assertions.assertTrue(sync(bitset.get(10)))
Assertions.assertEquals(2, sync(bitset.cardinality()).intValue())
Assertions.assertEquals(32, sync(bitset.size()).intValue())
Assertions.assertEquals(7, sync(bs.cardinality()).intValue())
Assertions.assertEquals(16, sync(bs.size()).intValue())
Assertions.assertEquals(2, sync(bs1.cardinality()).intValue())
Assertions.assertEquals(8, sync(bs1.size()).intValue())
Assertions.assertTrue(sync(bs1.get(4)))
Assertions.assertTrue(sync(bs2.get(10)))
Assertions.assertEquals(1, sync(bs1.cardinality()).intValue())
Assertions.assertEquals(16, sync(bs1.size()).intValue())
Assertions.assertTrue(executor.awaitTermination(10, TimeUnit.SECONDS))
Assertions.assertEquals(true, sync(list2.addAll(list.iterator())))
Assertions.assertEquals(5, sync(list2.size()).intValue())
Assertions.assertNull(sync(set.removeRandom()))
Assertions.assertEquals(sb.getLng(), toIterator(set.iterator()).next().getLng())
Assertions.assertTrue(sync(set.remove(1)))
Assertions.assertEquals(0, setCopy.size())
Assertions.assertTrue(sync(set.retainAll(Arrays.asList(1, 2))))
Assertions.assertEquals(2, sync(set.size()).intValue())
Assertions.assertTrue(sync(set.containsAll(Collections.emptyList())))
Assertions.assertTrue(sync(set.containsAll(Arrays.asList(30, 11))))
Assertions.assertTrue(sync(set.contains(new TestObject("2", "3"))))
Assertions.assertTrue(sync(set.contains(new TestObject("1", "2"))))
Assertions.assertEquals(4, sync(set.size()).intValue())
Assertions.assertEquals(5, sync(set.size()).intValue())
Assertions.assertTrue(sync(set.retainAll(Collections.<Integer>emptyList())))
Assertions.assertEquals(0, sync(set.size()).intValue())
Assertions.assertTrue(sync(set.move("otherSet", 1)))
Assertions.assertEquals(1, sync(set.size()).intValue())
Assertions.assertEquals(1, sync(otherSet.size()).intValue())
Assertions.assertEquals(1, sync(set.size()).intValue())
Assertions.assertEquals(0, sync(otherSet.size()).intValue())
Assertions.assertEquals(2, count.intValue())
Assertions.assertTrue(sync(tmp.contains(1)))
Assertions.assertTrue(sync(tmp.contains(3)))
Assertions.assertEquals(expectedMap, filtered)
Assertions.assertTrue(filteredAgain.isEmpty())
Assertions.assertEquals(expectedMap, filtered)
Assertions.assertEquals(0, cache.size())
Assertions.assertEquals(0, cache.size())
Assertions.assertEquals(1, cache.size())
Assertions.assertTrue(map.keySet().contains(new SimpleKey("33")))
Assertions.assertTrue(map.keySet().contains(new SimpleKey("1")))
Assertions.assertTrue(map.keySet().contains(new SimpleKey("1")))
Assertions.assertTrue(map.values().contains(new SimpleValue("44")))
Assertions.assertTrue(map.values().contains(new SimpleValue("2")))
Assertions.assertTrue(map.values().contains(new SimpleValue("2")))
Assertions.assertTrue(map.containsValue(new SimpleValue("44")))
Assertions.assertTrue(map.containsKey(new SimpleKey("33")))
Assertions.assertTrue(res)
Assertions.assertNull(val1)
Assertions.assertEquals(0, map.size())
Assertions.assertEquals("2", val1.getValue())
Assertions.assertEquals("2", val1.getValue())
Assertions.assertTrue(res)
Assertions.assertEquals("3", val1.getValue())
Assertions.assertNull(map.get(new SimpleKey("33")))
Assertions.assertEquals(3, map.size())
Assertions.assertEquals(0, map.size())
Assertions.assertNull(map.get(new SimpleKey("33")))
Assertions.assertEquals("44", val1.getValue())
Assertions.assertEquals(1, map.size())
Assertions.assertEquals("44", val2.getValue())
Assertions.assertEquals(1, map.size())
Assertions.assertNull(map.get(new SimpleKey("33")))
Assertions.assertNull(map.get(new SimpleKey("33")))
Assertions.assertNull(map.get(new SimpleKey("55")))
Assertions.assertEquals("44", val1.getValue())
Assertions.assertEquals("66", val2.getValue())
Assertions.assertEquals(2, map.size())
Assertions.assertEquals("44", val3.getValue())
Assertions.assertEquals("66", val4.getValue())
Assertions.assertEquals(2, map.size())
Assertions.assertNull(map.get(new SimpleKey("33")))
Assertions.assertNull(map.get(new SimpleKey("55")))
Assertions.assertEquals(value, map.putIfAbsent(key, new SimpleValue("3"), 1, TimeUnit.SECONDS))
Assertions.assertEquals(value, map.get(key))
Assertions.assertEquals(new SimpleValue("4"), map.get(new SimpleKey("4")))
Assertions.assertNull(map.get(new SimpleKey("4")))
Assertions.assertEquals(new SimpleValue("4"), map.get(new SimpleKey("4")))
Assertions.assertNull(map.putIfAbsent(key1, value1, 2, TimeUnit.SECONDS))
Assertions.assertEquals(value1, map.get(key1))
Assertions.assertEquals(3, (int) map.get("123"))
Assertions.assertEquals(1L, mapCache.get("4"))
Assertions.assertEquals(1L, mapCache.get("4"))
Assertions.assertEquals(1L, map.get("4"))
Assertions.assertEquals(2.23, mapCache1.get("4"))
assertEquals("redis://127.0.0.1", config.getAddress())
assertEquals("redis://1.1.1.1", config.getAddress())
assertEquals("redis://1.1.1.1", config.getAddress())
assertEquals("redis://1.1.1.1:6379", config.getAddress())
assertEquals("redis://1.1.1.1:6379", config.getAddress())
assertEquals("redis://${REDIS_URI}", config.getAddress())
assertEquals("redis://11.0.0.1", config.getAddress())
assertEquals("redis://11.0.0.1", config.getAddress())
assertEquals("redis://11.0.0.1:1234", config.getAddress())
assertEquals("redis://11.0.0.1:1234", config.getAddress())
assertEquals("redis://10.0.0.1", config.getAddress())
assertEquals("redis://127.0.0.1:6379", config.getAddress())
assertEquals("redis://11.0.0.1:1234", config.getAddress())
assertEquals("redis://127.0.0.1:6379", config.getAddress())
Assertions.assertTrue(spendTime < 2020)
Assertions.assertTrue(latch.await(1, TimeUnit.SECONDS))
Assertions.assertTrue(lock.isHeldByCurrentThread())
Assertions.assertTrue(lock.isLocked())
Assertions.assertTrue(lock.isLocked())
Assertions.assertTrue(lock.tryLock())
Assertions.assertTrue(lock.tryLock())
Assertions.assertTrue(1 == iterator.next())
Assertions.assertTrue(2 == iterator.next())
Assertions.assertTrue(3 == iterator.next())
Assertions.assertTrue(4 == iterator.next())
Assertions.assertTrue(5 == iterator.next())
Assertions.assertTrue(0 == iterator.next())
Assertions.assertTrue(7 == iterator.next())
Assertions.assertTrue(8 == iterator.next())
Assertions.assertTrue(0 == iterator.next())
Assertions.assertTrue(10 == iterator.next())
Assertions.assertTrue(10 == iterator.next())
Assertions.assertTrue(0 == iterator.next())
Assertions.assertTrue(8 == iterator.next())
Assertions.assertTrue(7 == iterator.next())
Assertions.assertTrue(0 == iterator.next())
Assertions.assertTrue(5 == iterator.next())
Assertions.assertTrue(4 == iterator.next())
Assertions.assertTrue(3 == iterator.next())
Assertions.assertTrue(2 == iterator.next())
Assertions.assertTrue(1 == iterator.next())
Assertions.assertTrue(55 == sync(list.indexOf(56)))
Assertions.assertTrue(99 == sync(list.indexOf(100)))
Assertions.assertTrue(-1 == sync(list.indexOf(200)))
Assertions.assertTrue(-1 == sync(list.indexOf(0)))
Assertions.assertTrue(1 == val)
Assertions.assertTrue(sync(list.removeAll(Arrays.asList(3, 2, 10, 6))))
Assertions.assertTrue(sync(list.removeAll(Arrays.asList(4))))
Assertions.assertTrue(sync(list.removeAll(Arrays.asList(1, 5, 1, 5))))
Assertions.assertTrue(sync(list.retainAll(Arrays.asList(3, 2, 10, 6))))
Assertions.assertTrue(sync(list.retainAll(Collections.<Integer>emptyList())))
Assertions.assertTrue(sync(list.containsAll(Arrays.asList(30, 11))))
Assertions.assertTrue(sync(list.containsAll(Arrays.asList(30))))
Assertions.assertTrue(sync(list.containsAll(Collections.emptyList())))
Assertions.assertTrue(Arrays.asList(1).containsAll(Collections.emptyList()))
Assertions.assertTrue(sync(list.contains("3")))
Assertions.assertTrue(sync(list.contains("1")))
Assertions.assertTrue(set.add("a"))
Assertions.assertTrue(set.add("b"))
Assertions.assertTrue(set.add("c"))
Assertions.assertTrue(set.add("d"))
Assertions.assertTrue(set.add("e"))
Assertions.assertTrue(set.add("f"))
Assertions.assertTrue(set.add("g"))
Assertions.assertTrue(set.add("a"))
Assertions.assertTrue(set.add("b"))
Assertions.assertTrue(set.add("c"))
Assertions.assertTrue(set.add("d"))
Assertions.assertTrue(set.add("e"))
Assertions.assertTrue(set.add("f"))
Assertions.assertTrue(set.add("g"))
Assertions.assertTrue(set.add("a"))
Assertions.assertTrue(set.add("b"))
Assertions.assertTrue(set.add("c"))
Assertions.assertTrue(set.add("d"))
Assertions.assertTrue(set.add("e"))
Assertions.assertTrue(set.add("f"))
Assertions.assertTrue(set.add("g"))
Assertions.assertTrue(executor.awaitTermination(RedissonRuntimeEnvironment.isTravis ? 10 : 3, TimeUnit.MINUTES))
Assertions.assertTrue(executor.awaitTermination(5, TimeUnit.MINUTES))
Assertions.assertTrue(executor.awaitTermination(5, TimeUnit.MINUTES))
Assertions.assertTrue(executor.awaitTermination(5, TimeUnit.MINUTES))
Assertions.assertTrue(pool.awaitTermination(RedissonRuntimeEnvironment.isTravis ? 20 : 3, TimeUnit.MINUTES))
Assertions.assertTrue(unlocked)
Assertions.assertTrue(locked)
Assertions.assertTrue(unlocked)
Assertions.assertTrue(locked)
Assertions.assertTrue(locked)
Assertions.assertTrue(unlocked)
Assertions.assertTrue(spendTime < 2020)
Assertions.assertTrue(latch.await(1, TimeUnit.SECONDS))
Assertions.assertTrue(lock.isHeldByCurrentThread())
Assertions.assertTrue(lock.isLocked())
Assertions.assertTrue(lock.isLocked())
Assertions.assertTrue(lock.tryLock())
Assertions.assertTrue(lock.tryLock())
Assertions.assertTrue(sync(b1.get()) instanceof RBucketReactive)
Assertions.assertTrue(sync(b4.get()) instanceof RMapCacheReactive)
Assertions.assertTrue(sync(s1.add(b1)))
Assertions.assertTrue(codec == b1.getCodec())
Assertions.assertTrue(codec == b2.getCodec())
Assertions.assertTrue(sync(b2.get()) instanceof MyObject)
Assertions.assertTrue(spendTime < 2020)
Assertions.assertTrue(latch.await(1, TimeUnit.SECONDS))
Assertions.assertTrue(lock.isHeldByCurrentThread())
Assertions.assertTrue(lock.isLocked())
Assertions.assertTrue(lock.isLocked())
Assertions.assertTrue(lock.tryLock())
Assertions.assertTrue(lock.tryLock())
Assertions.assertTrue(b1.get().getClass().equals(RedissonBucket.class))
Assertions.assertTrue(b4.get() instanceof RedissonMapCache)
Assertions.assertTrue(redisson.getBucket("b5").get() instanceof RLiveObject)
Assertions.assertTrue(s1.add(b1))
Assertions.assertTrue(codec == b1.getCodec())
Assertions.assertTrue(codec == b2.getCodec())
Assertions.assertTrue(b2.get() instanceof MyObject)
Assertions.assertTrue(future.get())
Assertions.assertTrue(set.contains(2))
Assertions.assertTrue(set.removeAsync(1).get())
Assertions.assertTrue(list.isEmpty())
Assertions.assertTrue(setRes)
Assertions.assertTrue(set.add(1))
Assertions.assertTrue(set.add(2))
Assertions.assertTrue(set.add(3))
Assertions.assertTrue(set.add(4))
Assertions.assertTrue(set.add(5))
Assertions.assertTrue(setRes3)
Assertions.assertTrue(set.add(2))
Assertions.assertTrue(set.add(3))
Assertions.assertTrue(set.add(1))
Assertions.assertTrue(set.add(4))
Assertions.assertTrue(set.add(10))
Assertions.assertTrue(set.add(-1))
Assertions.assertTrue(set.add(0))
Assertions.assertTrue(set.remove(3))
Assertions.assertTrue(set.retainAll(Arrays.asList(1, 2)))
Assertions.assertTrue(set.containsAll(Arrays.asList(30, 11)))
Assertions.assertTrue(set.contains(new TestObject("2", "3")))
Assertions.assertTrue(set.contains(new TestObject("1", "2")))
Assertions.assertTrue(set.add(new TestObject("1", "2")))
Assertions.assertTrue(set.add(new TestObject("2", "3")))
Assertions.assertTrue(set.add(new TestObject("3", "4")))
Assertions.assertTrue(set.add(new TestObject("5", "6")))
assertTrue(stringIterator2.hasNext())
Assertions.assertEquals(0, lock.getHoldCount())
Assertions.assertEquals(1, lock.getHoldCount())
Assertions.assertEquals(0, lock.getHoldCount())
Assertions.assertEquals(2, lock.getHoldCount())
Assertions.assertEquals(1, lock.getHoldCount())
Assertions.assertEquals(0, lock.getHoldCount())
Assertions.assertEquals(iterations, lockedCounter.get())
Assertions.assertEquals(16 * iterations, lockedCounter.get())
Assertions.assertEquals(iterations, lockedCounter.get())
Assertions.assertEquals(126145, list.hashCode())
Assertions.assertEquals(true, sync(list2.addAll(list.iterator())))
Assertions.assertEquals(5, sync(list2.size()).intValue())
Assertions.fail(error.getMessage())
fail(error.getMessage(), "A execução falhou por uma causa deliberada")
Assertions.assertEquals(-1, sync(list.lastIndexOf(10)).intValue())
Assertions.assertEquals(2, index)
Assertions.assertEquals(5, index)
Assertions.assertEquals(8, index)
Assertions.assertEquals(0, sync(list.size()).longValue())
Assertions.assertEquals(2, sync(list.size()).longValue())
Assertions.assertEquals(3, (int) sync(list.get(0)))
Assertions.assertEquals(0, sync(list.size()).intValue())
Assertions.assertEquals(true, sync(list.addAll(2, Arrays.asList(7, 8, 9))))
Assertions.assertEquals(true, sync(list.addAll(0, Arrays.asList(6, 7))))
Assertions.assertEquals(true, sync(list.addAll(Arrays.asList(7, 8, 9))))
Assertions.assertEquals(true, sync(list.addAll(Arrays.asList(9, 1, 9))))
Assertions.assertEquals(false, sync(list.addAll(Collections.<Integer>emptyList())))
Assertions.assertEquals(0, sync(list.size()).intValue())
Assertions.assertEquals(sync(list.size()).intValue(), iteration)
Assertions.assertEquals("1", val1)
Assertions.assertEquals("5", val2)
Assertions.assertEquals(5, sync(list.size()).intValue())
Assertions.assertEquals("c", set.pollLast())
Assertions.assertEquals("a", set.pollFirst())
Assertions.assertEquals("a", set.first())
Assertions.assertEquals("d", set.last())
Assertions.assertEquals(0, (int) set.removeRangeTail("z", false))
Assertions.assertEquals(4, (int) set.removeRangeTail("c", false))
Assertions.assertEquals(1, (int) set.removeRangeTail("c", true))
Assertions.assertEquals(2, (int) set.removeRangeHead("c", false))
Assertions.assertEquals(1, (int) set.removeRangeHead("c", true))
Assertions.assertEquals(5, set.removeRange("aaa", true, "g", false))
Assertions.assertEquals(0, lock.getHoldCount())
Assertions.assertEquals(1, lock.getHoldCount())
Assertions.assertEquals(0, lock.getHoldCount())
Assertions.assertEquals(2, lock.getHoldCount())
Assertions.assertEquals(1, lock.getHoldCount())
Assertions.assertEquals(0, lock.getHoldCount())
Assertions.assertEquals(iterations, lockedCounter.get())
Assertions.assertEquals(16 * iterations, lockedCounter.get())
Assertions.assertEquals(iterations, lockedCounter.get())
Assertions.assertEquals("b3", ((RBucketReactive) sync(((RBucketReactive) sync(b1.get())).get())).getName())
Assertions.assertEquals("b2", ((RBucketReactive) sync(((RMapCacheReactive) sync(b4.get())).get(b1))).getName())
Assertions.assertEquals("b2", result.get(0).getName())
Assertions.assertEquals("b3", result.get(1).getName())
Assertions.assertEquals("b1", result.get(2).getName())
Assertions.assertEquals("b2", result.get(0).getName())
Assertions.assertEquals("b3", result.get(1).getName())
Assertions.assertEquals("b1", result.get(2).getName())
Assertions.assertEquals(0, lock.getHoldCount())
Assertions.assertEquals(1, lock.getHoldCount())
Assertions.assertEquals(0, lock.getHoldCount())
Assertions.assertEquals(2, lock.getHoldCount())
Assertions.assertEquals(1, lock.getHoldCount())
Assertions.assertEquals(0, lock.getHoldCount())
Assertions.assertEquals(iterations, lockedCounter.get())
Assertions.assertEquals(16 * iterations, lockedCounter.get())
Assertions.assertEquals(iterations, lockedCounter.get())
Assertions.assertEquals("b3", ((RBucket) ((RBucket) b1.get()).get()).getName())
Assertions.assertEquals("b2", ((RBucket) ((RedissonMapCache) b4.get()).get(b1)).getName())
Assertions.assertEquals("t1", ((RedissonLiveObjectServiceTest.TestREntity) redisson.getBucket("b5").get()).getName())
Assertions.assertEquals("t2", ((RedissonLiveObjectServiceTest.TestREntity) redisson.getBucket("b5").get()).getValue())
Assertions.assertEquals("b2", result.get(0).getName())
Assertions.assertEquals("b3", result.get(1).getName())
Assertions.assertEquals("b1", result.get(2).getName())
Assertions.assertEquals("b2", result.get(0).getName())
Assertions.assertEquals("b3", result.get(1).getName())
Assertions.assertEquals("b1", result.get(2).getName())
Assertions.assertEquals(b2.get(), b1.iterator().next().get())
Assertions.assertEquals(2, redisson.getKeys().count())
Assertions.assertEquals(b2.get(), b1.iterator().next().get())
Assertions.assertEquals(2, redisson.getKeys().count())
Assertions.assertEquals(b2.get(), entryRange.iterator().next().getValue().get())
Assertions.assertEquals(b2.get(), b1.readAll().iterator().next().get())
Assertions.assertEquals(2, redisson.getKeys().count())
Assertions.assertEquals(b2.get(), b3.readAllMap().get("1").iterator().next().get())
Assertions.assertEquals(b2.get(), b3.readAllEntrySet().iterator().next().getValue().iterator().next().get())
Assertions.assertEquals(b2.get(), b3.readAllValues().iterator().next().iterator().next().get())
Assertions.assertEquals(b2.get(), b4.readAllKeySet().iterator().next().get())
Assertions.assertEquals(b2.get(), q1.readAll().get(0).get())
Assertions.assertEquals(b2.get(), q2.readAll().get(0).get())
Assertions.assertEquals(b2.get(), q3.readAll().get(0).get())
Assertions.assertEquals(b2.get(), l1.readAll().get(0).get())
Assertions.assertEquals(b2.get(), sl1.readAll().get(0).get())
Assertions.assertEquals(b2.get(), m1.readAllMap().get("1").get())
Assertions.assertEquals(b2.get(), m1.readAllEntrySet().iterator().next().getValue().get())
Assertions.assertEquals(b2.get(), m1.readAllValues().iterator().next().get())
Assertions.assertEquals(b2.get(), m1.readAllMap().get("1").get())
Assertions.assertEquals(b2.get(), m1.readAllEntrySet().iterator().next().getValue().get())
Assertions.assertEquals(b2.get(), m1.readAllValues().iterator().next().get())
Assertions.assertEquals(b2.get(), m2.readAllKeySet().iterator().next().get())
Assertions.assertEquals(b2.get(), m2.readAllKeySet().iterator().next().get())
Assertions.assertEquals(b2.get(), m3.readAllMap().get("1").iterator().next().get())
Assertions.assertEquals(b2.get(), m3.readAllEntrySet().iterator().next().getValue().iterator().next().get())
Assertions.assertEquals(b2.get(), m3.readAllValues().iterator().next().iterator().next().get())
Assertions.assertEquals(b2.get(), m4.readAllKeySet().iterator().next().get())
Assertions.assertEquals(b2.get(), g1.readAll().iterator().next().get())
Assertions.assertEquals(b2.get(), s1.readAll().iterator().next().get())
Assertions.assertEquals(b2.get(), mm1.get("1").readAll().get(0).get())
Assertions.assertEquals(b2.get(), mm2.get(b2).readAll().get(0).get())
Assertions.assertEquals(b2.get(), mm3.get("1").readAll().iterator().next().get())
Assertions.assertEquals(b2.get(), mm4.get(b2).readAll().iterator().next().get())
Assertions.assertEquals(b2.get(), map.values().iterator().next().get())
Assertions.assertEquals(b1.get(), map.keySet().iterator().next().get())
Assertions.assertNotEquals(3, redisson.getKeys().count())
Assertions.assertEquals(1, redisson.getKeys().count())
Assertions.assertNotEquals(1, redisson.getKeys().count())
Assertions.assertEquals(3, redisson.getKeys().count())
Assertions.assertEquals("1", iter.next())
Assertions.assertEquals("4", iter.next())
Assertions.assertEquals(4, iteration)
Assertions.assertEquals(0, list.size())
Assertions.assertEquals(0, setCopy.size())
Assertions.assertEquals(-1, (int) set.first())
Assertions.assertEquals(10, (int) set.last())
Assertions.assertEquals(2, set.size())
Assertions.assertEquals(4, set.size())
Assertions.assertEquals(5, set.size())
assertEquals(multiDecoder, actualDecoder)
assertNotEquals(msgMultiDecoder, actualDecoder)
assertEquals(subMultiDecoder, actualDecoder)
assertEquals(multiDecoder.getDecoder(null, 0, null), actualDecoder)
assertEquals(expectedDecoder, actualDecoder)
assertNotEquals(multiDecoder.getDecoder(null, 0, null), actualDecoder)
assertEquals(ByteArrayCodec.INSTANCE.getValueDecoder(), actualDecoder)
Assertions.assertTrue(future.get())
Assertions.assertTrue(set.contains(2))
Assertions.assertTrue(set.removeAsync(1).get())
Assertions.assertTrue(list.isEmpty())
Assertions.assertTrue(set.retainAll(Arrays.asList(1, 2)))
Assertions.assertTrue(set.containsAll(Collections.emptyList()))
Assertions.assertTrue(set.containsAll(Arrays.asList(30, 11)))
Assertions.assertTrue(set.contains(new TestObject("2", "3")))
Assertions.assertTrue(set.contains(new TestObject("1", "2")))
Assertions.assertTrue(set.retainAll(Collections.<Integer>emptyList()))
Assertions.assertTrue(list.removeAll(Arrays.asList(3, 2, 10, 6)))
Assertions.assertTrue(list.removeAll(Arrays.asList(4)))
Assertions.assertTrue(list.removeAll(Arrays.asList(1, 5, 1, 5)))
Assertions.assertTrue(list.isEmpty())
Assertions.assertTrue(stringIterator2.hasNext())
Assertions.assertTrue(res)
Assertions.assertTrue(res)
Assertions.assertTrue(map.fastPut("1", 2))
Assertions.assertTrue(System.currentTimeMillis() - s > 2000)
Assertions.assertTrue(System.currentTimeMillis() - s > 9000)
Assertions.assertTrue(System.currentTimeMillis() - s > 5000)
assertTrue(stringIterator2.hasNext())
Assertions.assertTrue(al.compareAndSet(0, 2))
Assertions.assertTrue(al2.compareAndSet(0, 2))
Assertions.assertTrue(al.compareAndSet(0, 2))
Assertions.assertTrue(System.currentTimeMillis() - s > 2000)
Assertions.assertTrue(System.currentTimeMillis() - s > 2000)
Assertions.assertTrue(System.currentTimeMillis() - s > 2000)
Assertions.assertTrue(future.get())
Assertions.assertTrue(set.contains(2))
Assertions.assertTrue(set.contains(3))
Assertions.assertTrue(set.contains(3))
Assertions.assertTrue(set.removeAsync(1).get())
Assertions.assertTrue(set.isEmpty())
Assertions.assertTrue(set.retainAll(Arrays.asList(1, 2)))
Assertions.assertTrue(set.removeAll(Arrays.asList(1, 2)))
Assertions.assertTrue(set.add(4, 2))
Assertions.assertTrue(set.add(5, 3))
Assertions.assertTrue(set.add(3, 1))
Assertions.assertTrue(set.add(6, 4))
Assertions.assertTrue(set.add(1000, 10))
Assertions.assertTrue(set.add(1, -1))
Assertions.assertTrue(set.add(2, 0))
Assertions.assertTrue(set.remove(3))
Assertions.assertTrue(set.containsAll(Arrays.asList(30, 11)))
Assertions.assertTrue(set.contains(new TestObject("2", "3")))
Assertions.assertTrue(set.contains(new TestObject("1", "2")))
Assertions.assertTrue(set.add(0, new TestObject("1", "2")))
Assertions.assertTrue(set.add(2, new TestObject("2", "3")))
Assertions.assertTrue(set.add(3, new TestObject("3", "4")))
Assertions.assertTrue(set.add(4, new TestObject("5", "6")))
Assertions.assertTrue(new Double(112.3).compareTo(res2) == 0)
Assertions.assertTrue(new Double(112.3).compareTo(res2) == 0)
Assertions.assertTrue(new Double(112.3).compareTo(res2) == 0)
Assertions.assertTrue(new Double(112.3).compareTo(res2) == 0)
assertTrue(stringIterator2.hasNext())
Assertions.assertNull(set.pollLast())
Assertions.assertNull(set.pollFirst())
Assertions.assertNull(ttl)
Assertions.assertNotNull(firstTTL)
Assertions.assertNotNull(secondTTL)
Assertions.assertNotNull(thirdTTL)
Assertions.assertNotNull(fourthTTL)
Assertions.assertNotNull(firstTTL)
Assertions.assertNotNull(thirdTTL)
Assertions.assertNotNull(fourthTTL)
Assertions.assertNotNull(unlocked)
Assertions.assertNull(ttl)
Assertions.assertNotNull(thirdTTL)
Assertions.assertNotNull(fourthTTL)
Assertions.assertNull(ttl)
Assertions.assertNotNull(firstTTL)
Assertions.assertNotNull(secondTTL)
Assertions.assertNotNull(unlocked)
Assertions.assertNull(ttl)
Assertions.assertNotNull(thirdTTL)
Assertions.assertNotNull(secondTTLAgain)
Assertions.assertNotNull(thirdTTL)
Assertions.assertNull(ttl)
Assertions.assertNotNull(firstTTL)
Assertions.assertNotNull(secondTTL)
Assertions.assertNotNull(thirdTTL)
Assertions.assertNull(ttl)
Assertions.assertEquals("192.168.234.129", node.getAddress().getHost())
Assertions.assertEquals(7001, node.getAddress().getPort())
Assertions.assertEquals(sb.getLng(), set.iterator().next().getLng())
Assertions.assertEquals(4, iteration)
Assertions.assertEquals(0, list.size())
Assertions.assertEquals(0, setCopy.size())
Assertions.assertEquals(2, set.size())
Assertions.assertEquals(0, set.size())
Assertions.assertEquals(10000, cnt)
Assertions.assertEquals(4, set.size())
Assertions.assertEquals(5, set.size())
Assertions.assertEquals(0, set.size())
Assertions.assertEquals(1, set.size())
Assertions.assertEquals(0, otherSet.size())
Assertions.assertEquals(expectedValuesSet, actualValuesSet)
Assertions.assertEquals(expectedMap.entrySet(), m.readAllEntrySet())
Assertions.assertEquals(value, map.putIfAbsent(key, new SimpleValue("3")))
Assertions.assertEquals(value, map.get(key))
Assertions.assertNull(map.putIfAbsent(key1, value1))
Assertions.assertEquals(value1, map.get(key1))
Assertions.assertNull(val1)
Assertions.assertEquals(0, map.size())
Assertions.assertEquals("2", val1.getValue())
Assertions.assertEquals("2", val1.getValue())
Assertions.assertEquals("3", val1.getValue())
Assertions.assertEquals("2", res.getValue())
Assertions.assertEquals("3", val1.getValue())
Assertions.assertEquals(1, map.size())
Assertions.assertEquals(2, l)
Assertions.assertEquals(3, l)
Assertions.assertEquals((Integer) 1, sync(queue1.poll(2, TimeUnit.SECONDS)))
Assertions.assertNull(sync(queue1.poll(5, TimeUnit.SECONDS)))
Assertions.assertEquals((Integer) 1, sync(queue1.poll(10, TimeUnit.SECONDS)))
Assertions.assertEquals((Integer) 1, sync(queue.poll()))
Assertions.assertEquals((Integer) 2, sync(queue.peek()))
Assertions.assertEquals(0, sync(queue.size()).intValue())
Assertions.assertNull(sync(queue.poll()))
Assertions.assertEquals(100, sync(queue.size()).intValue())
Assertions.assertEquals(10, count)
Assertions.assertEquals(10, batch.size())
Assertions.assertEquals(90, sync(queue.size()).intValue())
Assertions.assertEquals(0, sync(queue.size()).intValue())
Assertions.assertEquals(0, sync(queue1.size()).intValue())
Assertions.assertEquals(1, sync(queue1.size()).intValue())
Assertions.assertEquals(0, semaphore.availablePermits())
Assertions.assertEquals(2, semaphore.availablePermits())
Assertions.assertEquals(0, semaphore.availablePermits())
Assertions.assertEquals(2, semaphore.availablePermits())
Assertions.assertEquals(0, semaphore.acquiredPermits())
Assertions.assertEquals(1, semaphore.acquiredPermits())
Assertions.assertEquals(2, semaphore.acquiredPermits())
Assertions.assertEquals(0, semaphore.acquiredPermits())
Assertions.assertEquals(2, semaphore.getPermits())
Assertions.assertEquals(2, semaphore.getPermits())
Assertions.assertEquals(2, semaphore.getPermits())
Assertions.assertEquals(0, al.getAndSet(12))
Assertions.assertEquals(2, al.get())
Assertions.assertEquals(2, al2.get())
Assertions.assertEquals(0, al.get())
Assertions.assertEquals(2, al.get())
Assertions.assertEquals(2, al.getAndIncrement())
Assertions.assertEquals(3, al.get())
Assertions.assertEquals(1, al.incrementAndGet())
Assertions.assertEquals(1, al.get())
Assertions.assertEquals(0, al.getAndIncrement())
Assertions.assertEquals(1, al.get())
Assertions.assertEquals(0, al.get())
Assertions.assertEquals(0, al.getAndIncrement())
Assertions.assertEquals(1, al.get())
Assertions.assertEquals(1, al.getAndDecrement())
Assertions.assertEquals(0, al.get())
Assertions.assertEquals(0, al.getAndIncrement())
Assertions.assertEquals(1, al.getAndSet(12))
Assertions.assertEquals(12, al.get())
Assertions.assertEquals(1, state)
Assertions.assertEquals(Long.MAX_VALUE - 1000, newState)
Assertions.assertTimeout(Duration.ofSeconds(7), () -> {
    RScheduledExecutorService executor = redisson.getExecutorService("test");
    ScheduledFuture<Long> future1 = executor.schedule(new ScheduledCallableTask(), 5, TimeUnit.SECONDS);
    ScheduledFuture<Long> future2 = executor.schedule(new ScheduledCallableTask(), 5, TimeUnit.SECONDS);
    ScheduledFuture<Long> future3 = executor.schedule(new ScheduledCallableTask(), 5, TimeUnit.SECONDS);
    node.shutdown();
    RedissonNodeConfig nodeConfig = new RedissonNodeConfig(redisson.getConfig());
    nodeConfig.setExecutorServiceWorkers(Collections.singletonMap("test", 1));
    node = RedissonNode.create(nodeConfig);
    node.start();
    assertThat(future1.get()).isEqualTo(100);
    assertThat(future2.get()).isEqualTo(100);
    assertThat(future3.get()).isEqualTo(100);
})
Assertions.assertTimeout(Duration.ofSeconds(15), () -> {
    RScheduledExecutorService e = redisson.getExecutorService("myExecutor");
    e.registerWorkers(WorkerOptions.defaults());
    String taskId = redisson.getExecutorService("myExecutor").schedule(new RunnableTask2(), 2000, TimeUnit.MILLISECONDS).getTaskId();
    Thread.sleep(5500);
    assertThat(e.cancelTask(taskId)).isFalse();
})
Assertions.assertEquals(1, listener.getSessionCreatedEvents())
Assertions.assertEquals(0, listener.getSessionExpiredEvents())
Assertions.assertEquals(1, listener.getSessionCreatedEvents())
Assertions.assertEquals(1, listener.getSessionExpiredEvents())
Assertions.assertEquals(2, listener.getSessionCreatedEvents())
Assertions.assertEquals(1, listener.getSessionExpiredEvents())
Assertions.assertEquals(1, listener.getSessionExpiredEvents())
Assertions.assertEquals(2, listener.getSessionExpiredEvents())
Assertions.assertEquals(1, listener.getSessionCreatedEvents())
Assertions.assertEquals(0, listener.getSessionDeletedEvents())
Assertions.assertEquals(1, listener.getSessionCreatedEvents())
Assertions.assertEquals(1, listener.getSessionDeletedEvents())
Assertions.assertEquals("OK", response)
Assertions.assertEquals(value, response)
Assertions.assertEquals(value, response)
Assertions.assertEquals("OK", response)
Assertions.assertEquals("OK", response)
Assertions.assertTimeout(Duration.ofSeconds(3), () -> {
    RBlockingDeque<Integer> queue = redisson.getPriorityBlockingDeque("queue:pollany");
    queue.pollLastAsync(500, TimeUnit.MILLISECONDS);
    queue.pollFirstAsync(10, TimeUnit.MICROSECONDS);
})
Assertions.assertEquals("test2", sync(redisson.getKeys().randomKey()))
Assertions.assertNull(sync(redisson.getKeys().randomKey()))
Assertions.assertEquals(2, sync(redisson.getKeys().deleteByPattern("test?")).intValue())
Assertions.assertEquals(2, sync(redisson.getKeys().delete("test", "map2")).intValue())
Assertions.assertEquals(0, sync(redisson.getKeys().delete("test", "map2")).intValue())
Assertions.assertEquals(1, l)
Assertions.assertEquals(2, l)
Assertions.assertEquals(2, l)
Assertions.assertNull(set.pollLast())
Assertions.assertEquals("c", set.pollLast())
Assertions.assertNull(set.pollFirst())
Assertions.assertEquals("a", set.pollFirst())
Assertions.assertEquals("a", set.first())
Assertions.assertEquals("d", set.last())
Assertions.assertEquals(2, set.removeRangeByScore(0.1, false, 0.3, true))
Assertions.assertEquals(3, set.removeRangeByScore(Double.NEGATIVE_INFINITY, false, 0.3, true))
Assertions.assertEquals(3, set.removeRangeByScore(0.4, false, Double.POSITIVE_INFINITY, true))
Assertions.assertEquals(2, set.removeRangeByRank(0, 1))
Assertions.assertEquals(new Integer(0), future.get())
Assertions.assertEquals(new Integer(1), future2.get())
Assertions.assertEquals(new Integer(0), future3.get())
Assertions.assertEquals(new Integer(0), future.get())
Assertions.assertEquals(new Integer(0), future2.get())
Assertions.assertEquals(new Integer(2), future3.get())
Assertions.assertEquals("1", iter.next())
Assertions.assertEquals("4", iter.next())
Assertions.assertEquals(4, iteration)
Assertions.assertEquals(0, set.size())
Assertions.assertEquals(0, setCopy.size())
Assertions.assertEquals(2, set.size())
Assertions.assertEquals(1, set.size())
Assertions.assertEquals(4, set.size())
Assertions.assertEquals(5, set.size())
Assertions.assertArrayEquals(new String[] { "c", "d" }, a)
Assertions.assertArrayEquals(new String[] { "b", "c" }, a)
Assertions.assertArrayEquals(new String[] { "c", "d" }, a)
Assertions.assertEquals(2, r.size())
Assertions.assertEquals("c", a[0].getValue())
Assertions.assertEquals("d", a[1].getValue())
Assertions.assertEquals(2, r.size())
Assertions.assertEquals("c", a[0].getValue())
Assertions.assertEquals("b", a[1].getValue())
Assertions.assertEquals("b", a[0].getValue())
Assertions.assertEquals("c", a[1].getValue())
Assertions.assertEquals("c", a[0].getValue())
Assertions.assertEquals("d", a[1].getValue())
Assertions.assertArrayEquals(new Double[] { 112.3d, null, null }, res.toArray())
Assertions.assertArrayEquals(new Integer[] { 2, 0, 1 }, res.toArray())
Assertions.assertEquals(3, l)
Assertions.assertTrue(System.currentTimeMillis() - s > 9000)
Assertions.assertEquals((Integer) 1, sync(queue1.poll(2, TimeUnit.SECONDS)))
Assertions.assertNull(sync(queue1.poll(5, TimeUnit.SECONDS)))
Assertions.assertTrue(System.currentTimeMillis() - s > 5000)
Assertions.assertEquals((Integer) 1, sync(queue1.poll(10, TimeUnit.SECONDS)))
Assertions.assertEquals(100, sync(queue.size()).intValue())
Assertions.assertEquals(10, count)
Assertions.assertEquals(10, batch.size())
Assertions.assertEquals(90, sync(queue.size()).intValue())
Assertions.assertEquals(0, sync(queue.size()).intValue())
Assertions.assertEquals(0, sync(queue1.size()).intValue())
Assertions.assertEquals(1, sync(queue1.size()).intValue())
Assertions.assertEquals(sb.getLng(), set.iterator().next().getLng())
Assertions.assertTrue(set.remove(1))
Assertions.assertTrue(set.remove(3))
Assertions.assertEquals(1, set.size())
Assertions.assertEquals(2, iteration)
Assertions.assertTrue(set.retainAll(Arrays.asList(1, 2)))
Assertions.assertEquals(2, set.size())
Assertions.assertEquals(10000, cnt)
Assertions.assertEquals(0, set.size())
Assertions.assertTrue(set.containsAll(Collections.emptyList()))
Assertions.assertTrue(set.containsAll(Arrays.asList(30, 11)))
Assertions.assertTrue(set.contains(new TestObject("1", "2")))
Assertions.assertEquals(4, set.size())
Assertions.assertEquals(5, set.size())
Assertions.assertTrue(set.retainAll(Collections.<Integer>emptyList()))
Assertions.assertEquals(0, set.size())
Assertions.assertEquals(0, cache.size())
Assertions.assertEquals(0, cache.size())
Assertions.assertEquals(1, cache.size())
Assertions.assertTrue(cache.add("33", 5, TimeUnit.SECONDS))
Assertions.assertEquals(0, cache.size())
Assertions.assertTrue(latch.trySetCount(1))
Assertions.assertTrue(executor.awaitTermination(10, TimeUnit.SECONDS))
Assertions.assertTrue(latch.trySetCount(1))
Assertions.assertTrue(executor.awaitTermination(10, TimeUnit.SECONDS))
Assertions.assertEquals(2, latch.getCount())
Assertions.assertEquals(1, latch.getCount())
Assertions.assertEquals(0, latch.getCount())
Assertions.assertEquals(0, latch.getCount())
Assertions.assertEquals(0, latch.getCount())
Assertions.assertEquals(0, latch.getCount())
Assertions.assertEquals(0, latch.getCount())
Assertions.assertEquals(0, latch.getCount())
Assertions.assertEquals(0, latch.getCount())
Assertions.assertEquals(0, latch.getCount())
Assertions.assertTrue(latch.delete())
Assertions.assertEquals(0, setCopy.size())
Assertions.assertEquals(112, (int) res)
Assertions.assertEquals(112, (int) res)
Assertions.assertTrue(new Double(112.3).compareTo(res2) == 0)
Assertions.assertTrue(new Double(112.3).compareTo(res2) == 0)
Assertions.assertEquals(expectedMap, filtered)
Assertions.assertEquals(expectedMap, filtered)
Assertions.assertEquals(2, sync(map.size()).intValue())
Assertions.assertEquals(2, val.intValue())
Assertions.assertEquals(4, val2.intValue())
Assertions.assertEquals(2, sync(map.size()).intValue())
Assertions.assertEquals(2L, val.longValue())
Assertions.assertEquals(4L, val2.longValue())
Assertions.assertEquals("33", val)
Assertions.assertEquals(1, sync(map.size()).intValue())
Assertions.assertTrue(sync(map.containsValue(new SimpleValue("2"))))
Assertions.assertTrue(sync(map.containsKey(new SimpleKey("33"))))
Assertions.assertTrue(size)
Assertions.assertNull(val1)
Assertions.assertEquals(0, sync(map.size()).intValue())
Assertions.assertEquals("2", val1.getValue())
Assertions.assertEquals("2", val1.getValue())
Assertions.assertTrue(res)
Assertions.assertEquals("3", val1.getValue())
Assertions.assertEquals("2", res.getValue())
Assertions.assertEquals("3", val1.getValue())
Assertions.assertEquals("44", val1.getValue())
Assertions.assertEquals("abc", val2.getValue())
Assertions.assertEquals("44", val1.getValue())
Assertions.assertEquals("6", val2.getValue())
Assertions.assertEquals(value, sync(map.putIfAbsent(key, new SimpleValue("3"))))
Assertions.assertEquals(value, sync(map.get(key)))
Assertions.assertNull(sync(map.putIfAbsent(key1, value1)))
Assertions.assertEquals(value1, sync(map.get(key1)))
Assertions.assertEquals(3, sync(map.size()).intValue())
Assertions.assertEquals(3, sync(map.size()).intValue())
Assertions.assertEquals(3, sync(map.size()).intValue())
Assertions.assertEquals(4, sync(map.size()).intValue())
Assertions.assertEquals(3, sync(map.size()).intValue())
Assertions.assertEquals((Long) 3L, sync(map.fastRemove(1, 3, 7)))
Assertions.assertEquals(1, sync(map.size()).intValue())
Assertions.assertEquals(0, keys.size())
Assertions.assertEquals(0, values.size())
Assertions.assertTrue(sync(map.fastPut(1, 2)))
Assertions.assertEquals(1, sync(map.size()).intValue())
Assertions.assertEquals(0, sync(map.fastRemove()).intValue())
Assertions.assertEquals(1, sync(map.size()).intValue())

Assertions.fail()
Assertions.assertEquals(1, i.get())
Assertions.assertEquals(1, str.get())
Assertions.assertTrue(messageRecieved.await(5, TimeUnit.SECONDS))
Assertions.assertTrue(messageRecieved.await(5, TimeUnit.SECONDS))
Assertions.assertEquals("topic.*", pattern)
Assertions.assertTrue(messageRecieved.await(5, TimeUnit.SECONDS))
Assertions.assertEquals("topic.*", pattern)
Assertions.assertTrue(executor.awaitTermination(threads * loops * 1000, TimeUnit.SECONDS))
Assertions.assertTrue(writeLock.tryLock(1, 10, TimeUnit.SECONDS))
Assertions.assertTrue(readLock.tryLock(1, 4, TimeUnit.SECONDS))
Assertions.assertTrue(readLock2.tryLock(1, 4, TimeUnit.SECONDS))
Assertions.assertTrue(writeLock.tryLock())
Assertions.assertTrue(rLock.tryLock())
Assertions.assertTrue(readWriteLock.writeLock().tryLock())
Assertions.assertTrue(lock.writeLock().tryLock())
Assertions.assertTrue(lock.readLock().tryLock())
Assertions.assertTrue(writeLock.isHeldByCurrentThread())
Assertions.assertTrue(writeLock.isLocked())
Assertions.assertTrue(lock.readLock().tryLock())
Assertions.assertTrue(redisson.getReadWriteLock("lock").readLock().tryLock())
Assertions.assertTrue(readLock2.get().isLocked())
Assertions.assertTrue(lock.writeLock().tryLock())
Assertions.assertTrue(lock.writeLock().isLocked())
Assertions.assertTrue(lock.writeLock().isHeldByCurrentThread())
Assertions.assertTrue(lock.writeLock().tryLock())
Assertions.assertTrue(readLock1.isLocked())
Assertions.assertTrue(spendTime < 2050)
Assertions.assertTrue(spendTime < 2050)
Assertions.assertEquals(0, lock.getHoldCount())
Assertions.assertEquals(1, lock.getHoldCount())
Assertions.assertEquals(0, lock.getHoldCount())
Assertions.assertEquals(2, lock.getHoldCount())
Assertions.assertEquals(1, lock.getHoldCount())
Assertions.assertEquals(0, lock.getHoldCount())
Assertions.assertTrue(lock.isHeldByCurrentThread())
Assertions.assertTrue(lock.isLocked())
Assertions.assertTrue(lock.isLocked())
Assertions.assertTrue(lock.tryLock())
Assertions.assertTrue(lock.tryLock())
Assertions.assertTrue(lock.tryLock())
Assertions.assertEquals(iterations, lockedCounter.get())
Assertions.assertEquals(16 * iterations, lockedCounter.get())
Assertions.assertEquals(iterations, lockedCounter.get())
Assertions.assertTimeout(Duration.ofSeconds(3), () -> {
    final String lockName = "lock1";
    final CountDownLatch startSignal = new CountDownLatch(1);
    final CountDownLatch testSignal = new CountDownLatch(1);
    final CountDownLatch completeSignal = new CountDownLatch(2);
    System.out.println("configure");
    final long millis = System.currentTimeMillis();
    new Thread() {

        @Override
        public void run() {
            try {
                startSignal.await();
                RLock lock = redisson.getLock(lockName);
                System.out.println("1. getlock " + lock.getName() + " - " + Thread.currentThread().getId());
                lock.lock();
                System.out.println("1. lock " + lock.getName() + " - " + Thread.currentThread().getId());
                testSignal.countDown();
                Thread.sleep(500);
                lock.unlock();
                System.out.println("1. unlock " + lock.getName() + " - " + Thread.currentThread().getId());
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            completeSignal.countDown();
        }
    }.start();
    new Thread() {

        @Override
        public void run() {
            try {
                testSignal.await();
                RLock lock = redisson.getLock(lockName);
                System.out.println("2. getlock " + lock.getName() + " - " + Thread.currentThread().getId());
                lock.lock();
                System.out.println("2. lock " + lock.getName() + " - " + Thread.currentThread().getId());
                long current = System.currentTimeMillis();
                Assertions.assertTrue(current - millis >= 500, "current=" + current + ", millis=" + millis);
                Thread.sleep(500);
                lock.unlock();
                System.out.println("2. unlock " + lock.getName() + " - " + Thread.currentThread().getId());
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            completeSignal.countDown();
        }
    }.start();
    System.out.println("start");
    startSignal.countDown();
    completeSignal.await();
    System.out.println("complete");
})
Assertions.assertTimeout(Duration.ofSeconds(3), () -> {
    final String countDownName = getClass().getName() + ":countDown#1";
    final CountDownLatch startSignal = new CountDownLatch(1);
    final CountDownLatch testSignal = new CountDownLatch(1);
    final CountDownLatch completeSignal = new CountDownLatch(2);
    System.out.println("configure");
    final long millis = System.currentTimeMillis();
    new Thread() {

        @Override
        public void run() {
            try {
                startSignal.await();
                RCountDownLatch countDownLatch = redisson.getCountDownLatch(countDownName);
                System.out.println("1. getCountDownLatch " + countDownLatch.getName() + " - " + Thread.currentThread().getId());
                countDownLatch.trySetCount(1);
                System.out.println("1. trySetCount " + countDownLatch.getName() + " - " + Thread.currentThread().getId());
                Thread.sleep(500);
                testSignal.countDown();
                Thread.sleep(500);
                System.out.println("1. sleep " + countDownLatch.getName() + " - " + Thread.currentThread().getId());
                countDownLatch.countDown();
                System.out.println("1. countDown " + countDownLatch.getName() + " - " + Thread.currentThread().getId());
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            completeSignal.countDown();
        }
    }.start();
    new Thread() {

        @Override
        public void run() {
            try {
                testSignal.await();
                RCountDownLatch countDownLatch = redisson.getCountDownLatch(countDownName);
                System.out.println("2. getCountDownLatch " + countDownLatch.getName() + " - " + Thread.currentThread().getId());
                countDownLatch.await();
                System.out.println("2. await " + countDownLatch.getName() + " - " + Thread.currentThread().getId());
                long current = System.currentTimeMillis();
                Assertions.assertTrue((current - millis) >= 1000, "current=" + current + ", millis=" + millis);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            completeSignal.countDown();
        }
    }.start();
    System.out.println("start");
    startSignal.countDown();
    completeSignal.await();
    System.out.println("complete");
})
Assertions.assertTrue(executor.awaitTermination(10, TimeUnit.MINUTES))
Assertions.assertEquals(0, p.stop())
Assertions.assertEquals(0, pp.stop())
Assertions.assertEquals(0, runner.stop())
Assertions.assertEquals(0, pp.stop())
Assertions.assertTrue(r.isShuttingDown())
Assertions.assertTrue(r.isShutdown())
Assertions.assertEquals(list, decodedList)
Assertions.assertTrue(objectMapper.getDeserializationConfig().isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES))
Assertions.assertEquals(1, (int) sync(queue1.removeLast()))
Assertions.assertEquals(2, (int) sync(queue1.removeLast()))
Assertions.assertEquals(3, (int) sync(queue1.removeLast()))
Assertions.assertEquals(3, (int) sync(queue1.removeFirst()))
Assertions.assertEquals(2, (int) sync(queue1.removeFirst()))
Assertions.assertEquals(1, (int) sync(queue1.removeFirst()))
Assertions.assertNull(sync(queue1.peekFirst()))
Assertions.assertNull(sync(queue1.peekLast()))
Assertions.assertEquals(2, (int) sync(queue1.peekFirst()))
Assertions.assertEquals(2, (int) sync(queue1.peekLast()))
Assertions.assertEquals(a, resa)
Assertions.assertTrue(set.contains(new TestObject("2", "3")))
Assertions.assertTrue(set.contains(new TestObject("1", "2")))
Assertions.assertEquals(3, l)
Assertions.assertTrue(System.currentTimeMillis() - s > 3900)
Assertions.assertEquals(3, l)
Assertions.assertTrue(System.currentTimeMillis() - s > 9000)
Assertions.assertEquals((Integer) 1, queue1.poll(2, TimeUnit.SECONDS))
Assertions.assertNull(queue1.poll(5, TimeUnit.SECONDS))
Assertions.assertTrue(System.currentTimeMillis() - s > 4900)
Assertions.assertEquals(100, queue.size())
Assertions.assertEquals(10, count)
Assertions.assertEquals(10, batch.size())
Assertions.assertEquals(90, queue.size())
Assertions.assertEquals(0, queue.size())
Assertions.assertTrue(queue.add(1))
Assertions.assertEquals(1, queue.size())
Assertions.assertEquals(1, count)
Assertions.assertEquals(1, batch.size())
Assertions.assertTrue(queue.isEmpty())
Assertions.assertEquals(4, iteration)
Assertions.assertEquals(0, queue.size())
Assertions.assertTrue(queue.isEmpty())
Assertions.assertEquals("282297a0228f48cd3fc6a55de6316f31422f5d17", r)
Assertions.assertEquals(1, r1.size())
Assertions.assertTrue(r1.get(0))
Assertions.assertEquals(1, r2.size())
Assertions.assertEquals("282297a0228f48cd3fc6a55de6316f31422f5d17", r)
Assertions.assertEquals("bar", r1)
Assertions.assertEquals("282297a0228f48cd3fc6a55de6316f31422f5d17", r)
Assertions.assertEquals("bar", r1)
Assertions.assertEquals("282297a0228f48cd3fc6a55de6316f31422f5d17", res)
Assertions.assertEquals("bar", r1)
Assertions.assertEquals(0, sync(al.get()).intValue())
Assertions.assertTrue(sync(al.compareAndSet(0, 2)))
Assertions.assertEquals(2, sync(al.get()).intValue())
Assertions.assertEquals(2, sync(al.getAndIncrement()).intValue())
Assertions.assertEquals(3, sync(al.get()).intValue())
Assertions.assertEquals(1, sync(al.incrementAndGet()).intValue())
Assertions.assertEquals(1, sync(al.get()).intValue())
Assertions.assertEquals(0, sync(al.getAndIncrement()).intValue())
Assertions.assertEquals(1, sync(al.get()).intValue())
Assertions.assertEquals(0, sync(al.get()).intValue())
Assertions.assertEquals(0, sync(al.getAndIncrement()).intValue())
Assertions.assertEquals(1, sync(al.get()).intValue())
Assertions.assertEquals(1, sync(al.getAndDecrement()).intValue())
Assertions.assertEquals(0, sync(al.get()).intValue())
Assertions.assertEquals(0, sync(al.getAndIncrement()).intValue())
Assertions.assertEquals(1, sync(al.getAndSet(12)).intValue())
Assertions.assertEquals(12, sync(al.get()).intValue())
Assertions.assertEquals(1, state)
Assertions.assertEquals(Long.MAX_VALUE - 1000, newState)
Assertions.assertEquals(3L, sync(log.count()).longValue())
Assertions.assertTrue(sync(hll1.add("foo")))
Assertions.assertTrue(sync(hll1.add("bar")))
Assertions.assertTrue(sync(hll1.add("zap")))
Assertions.assertTrue(sync(hll1.add("a")))
Assertions.assertTrue(sync(hll2.add("a")))
Assertions.assertTrue(sync(hll2.add("b")))
Assertions.assertTrue(sync(hll2.add("c")))
Assertions.assertTrue(sync(hll2.add("foo")))
Assertions.assertEquals(6L, sync(hll3.count()).longValue())
Assertions.assertTimeout(Duration.ofSeconds(5), () -> {
    RMap<String, SimpleObjectWithoutDefaultConstructor> map = getMap("deserializationFailure", new JsonJacksonCodec());
    Assumptions.assumeTrue(!(map instanceof RLocalCachedMap));
    SimpleObjectWithoutDefaultConstructor object = new SimpleObjectWithoutDefaultConstructor("test-val");
    assertThat(object.getTestField()).isEqualTo("test-val");
    map.put("test-key", object);
    try {
        map.get("test-key");
        Assertions.fail("Expected exception from map.get() call");
    } catch (Exception e) {
        e.printStackTrace();
    }
    destroy(map);
})
Assertions.assertNotNull(sync(bucket.get()))
Assertions.assertNull(sync(bucket.get()))
Assertions.assertTrue(sync(bucket.renamenx("test1")))
Assertions.assertNull(sync(oldBucket.get()))
Assertions.assertEquals("someValue", sync(newBucket.get()))
Assertions.assertNull(sync(oldBucket.get()))
Assertions.assertEquals("someValue", sync(newBucket.get()))
Assertions.assertNull(sync(bucket.get()))
Assertions.assertEquals(value, sync(bucket.get()))
Assertions.assertEquals(value, sync(bucket.get()))
Assertions.assertTrue(sync(bucket.delete()))
Assertions.assertNull(sync(bucket.get()))
Assertions.assertNull(sync(bucket.get()))
Assertions.assertEquals(value, sync(bucket.get()))
Assertions.assertTrue(sync(bucket.isExists()))
Assertions.assertNull(sync(bucket.get()))
Assertions.assertEquals(value, sync(bucket.get()))
Assertions.assertTrue(sync(bucket.isExists()))
Assertions.assertEquals(2, buckets.size())
Assertions.assertTrue(names.contains(buckets.get(0).getName()))
Assertions.assertTrue(names.contains(buckets.get(1).getName()))
Assertions.assertTrue(vals.contains(sync(buckets.get(0).get())))
Assertions.assertTrue(vals.contains(sync(buckets.get(1).get())))
Assertions.assertEquals(0, queue1.size())
Assertions.assertEquals(1, queue1.size())
Assertions.assertEquals(t, cache.get("1"))
Assertions.assertEquals("2", cache.get("1"))
Assertions.assertEquals("value", result)
Assertions.assertNull(cache.get("key"))
Assertions.assertNull(cache.get("key"))
Assertions.assertEquals("2", cache.get("1"))
Assertions.assertEquals("2", cache.get("1"))
Assertions.assertNotNull(cache.get(key))
Assertions.assertNull(cache.get(key))
assertEquals("111", t.getMyClass().getValue())
assertEquals("1", t.getName())
assertTrue(redisson.getMap(scheme.getName(TestREntity.class, "1")).isExists())
assertEquals("3333", t.getName())
assertTrue(redisson.getMap(scheme.getName(TestREntity.class, "3333")).isExists())
assertEquals("111", t.getValue())
assertTrue(redisson.getMap(scheme.getName(TestREntity.class, "3333")).isExists())
assertTrue(!redisson.getMap(scheme.getName(TestREntity.class, "1")).isExists())
assertEquals("111", redisson.getMap(scheme.getName(TestREntity.class, "3333")).get("value"))
assertEquals("123", t2.getValue().get("field"))
assertEquals("333", t3.getValue().get("field"))
assertEquals("hello", t3.getValue().get("field"))
assertEquals("123", s.<TestREntityWithRMap>get(TestREntityWithRMap.class, "2").getValue().get("field"))
assertEquals("333", s.<TestREntityWithRMap>get(TestREntityWithRMap.class, "2").getValue().get("field"))
assertEquals("123", s.get(TestREntityWithRMap.class, "111").getValue().get("field"))
assertEquals("123", s.get(TestREntityValueNested.class, "122").getValue().getValue().get("field"))
assertTrue(Objects.equals("55555", t.getId()))
assertTrue(Objects.equals(90909l, t.getId()))
assertTrue(Objects.equals(90909, t.getId()))
assertTrue(Objects.equals(new ObjectId(9090909), t.getId()))
assertEquals(new Byte("0"), Byte.valueOf(t.getId().toString()))
assertEquals((byte) 90, Byte.parseByte(t.getId().toString()))
assertTrue(l.removeAll((List) t.getId()))
assertTrue(l.isEmpty())
assertEquals(3, redisson.getKeys().count())
assertEquals(1, persisted.getValues().size())
assertEquals("123", ((TestREntity) persisted.getContent()).getName())
assertEquals(new ObjectId(100), persisted.getId())
assertEquals("VALUE", persisted.getValue())
assertEquals(new ObjectId(100), merged.getId())
assertEquals("VALUE", merged.getValue())
assertNull(ts.getValue())
assertEquals("VALUE", merged.getValue())
assertEquals("CODE", merged.getCode())
assertEquals("VALUE", merged.getValue())
assertEquals("CODE", merged.getCode())
assertEquals(ts, detach)
assertTrue(service.isExists(service.get(TestClass.class, new ObjectId(100))))
assertTrue(service.isExists(persisted))
assertTrue(service.isLiveObject(persisted))
assertEquals(new ObjectId(100), liveObject.getLiveObjectId())
assertTrue(service.isClassRegistered(TestClass.class))
assertTrue(newService.isClassRegistered(TestClass.class))
assertTrue(service.isClassRegistered(TestClass.class))
assertTrue(newRedisson.getLiveObjectService().isClassRegistered(TestClass.class))
assertNull(service.get(TestClass.class, new ObjectId(100)))
assertNotNull(service.get(TestClass.class, new ObjectId(100)))
assertNotNull(service.get(TestClass.class, new ObjectId(100)))
assertTrue(service.isExists(persisted))
assertTrue(service.isExists(persisted))
assertEquals(4, uuid.version())
assertEquals(new Long(1), tc1.getName())
assertEquals(new Long(1), tc2.getName())
assertTrue(RMap.class.isAssignableFrom(ts.getContent().getClass()))
assertTrue(RSet.class.isAssignableFrom(ts.getContent().getClass()))
assertTrue(RSortedSet.class.isAssignableFrom(ts.getContent().getClass()))
assertTrue(RList.class.isAssignableFrom(ts.getContent().getClass()))
assertTrue(RMap.class.isAssignableFrom(ts.getContent().getClass()))
assertTrue(RBlockingQueue.class.isAssignableFrom(ts.getContent().getClass()))
assertTrue(RQueue.class.isAssignableFrom(ts.getContent().getClass()))
assertTrue(RBlockingDeque.class.isAssignableFrom(ts.getContent().getClass()))
assertTrue(RDeque.class.isAssignableFrom(ts.getContent().getClass()))
assertTrue(HashMap.class.isAssignableFrom(ts.getContent().getClass()))
assertTrue(HashSet.class.isAssignableFrom(ts.getContent().getClass()))
assertTrue(TreeSet.class.isAssignableFrom(ts.getContent().getClass()))
assertTrue(ArrayList.class.isAssignableFrom(ts.getContent().getClass()))
assertTrue(ConcurrentHashMap.class.isAssignableFrom(ts.getContent().getClass()))
assertTrue(ConcurrentLinkedQueue.class.isAssignableFrom(ts.getContent().getClass()))
assertTrue(LinkedBlockingDeque.class.isAssignableFrom(ts.getContent().getClass()))
assertTrue(LinkedList.class.isAssignableFrom(ts.getContent().getClass()))
assertTrue(service.asLiveObject(myObject).isExists())
assertEquals("123345", service.asRMap(myObject).get("value"))
assertEquals("9999", myObject.getValue())
assertEquals("123345", myObject.get("value"))
assertEquals("9999", myObject.get("value"))
assertEquals("9999", myObject.getValue())
Assertions.assertTimeout(Duration.ofSeconds(10), () -> {
    RLiveObjectService s = redisson.getLiveObjectService();
    List<TestREntity> objects = new ArrayList<>();
    int objectsAmount = 100000;
    for (int i = 0; i < objectsAmount; i++) {
        TestREntity e = new TestREntity();
        e.setName("" + i);
        e.setValue("value" + i);
        objects.add(e);
    }
    List<Object> attachedObjects = s.merge(objects.toArray());
    assertThat(attachedObjects).hasSize(objectsAmount);
    objects.clear();
    for (int i = 0; i < objectsAmount; i++) {
        TestREntity e = (TestREntity) attachedObjects.get(i);
        e.setName("" + i);
        e.setValue("value" + i * 1000);
        objects.add(e);
    }
    List<Object> attachedObjects2 = s.merge(objects.toArray());
    assertThat(attachedObjects2).hasSize(objectsAmount);
    assertThat(redisson.getKeys().count()).isEqualTo(objectsAmount);
})
Assertions.assertTimeout(Duration.ofSeconds(40), () -> {
    RLiveObjectService s = redisson.getLiveObjectService();
    List<TestREntity> objects = new ArrayList<>();
    int objectsAmount = 1000000;
    for (int i = 0; i < objectsAmount; i++) {
        TestREntity e = new TestREntity();
        e.setName("" + i);
        e.setValue("value" + i);
        objects.add(e);
    }
    List<Object> attachedObjects = s.persist(objects.toArray());
    assertThat(attachedObjects).hasSize(objectsAmount);
    assertThat(redisson.getKeys().count()).isEqualTo(objectsAmount);
})
Assertions.assertTrue(bucket.renamenx("test1"))
Assertions.assertTrue(bucket.delete())
Assertions.assertTrue(bucket.isExists())
Assertions.assertTrue(bucket.isExists())
Assertions.assertTrue(System.currentTimeMillis() - s > 2000)
Assertions.assertTrue(System.currentTimeMillis() - s > 9000)
Assertions.assertTrue(System.currentTimeMillis() - s > 4900)
Assertions.assertTrue(queue.add(1))
Assertions.assertTrue(queue.isEmpty())
Assertions.assertTrue(r1.get(0))
Assertions.assertTrue(1 == iterator.next())
Assertions.assertTrue(2 == iterator.next())
Assertions.assertTrue(3 == iterator.next())
Assertions.assertTrue(4 == iterator.next())
Assertions.assertTrue(1 == iterator.next())
Assertions.assertTrue(2 == iterator.next())
Assertions.assertTrue(3 == iterator.next())
Assertions.assertTrue(4 == iterator.next())
Assertions.assertTrue(1 == iterator.next())
Assertions.assertTrue(iterator.hasPrevious())
Assertions.assertTrue(1 == iterator.previous())
Assertions.assertTrue(iterator.hasNext())
Assertions.assertTrue(1 == iterator.next())
Assertions.assertTrue(2 == iterator.next())
Assertions.assertTrue(iterator.hasPrevious())
Assertions.assertTrue(3 == iterator.next())
Assertions.assertTrue(iterator.hasPrevious())
Assertions.assertTrue(3 == iterator.previous())
Assertions.assertTrue(iterator.hasPrevious())
Assertions.assertTrue(2 == iterator.previous())
Assertions.assertTrue(iterator.hasPrevious())
Assertions.assertTrue(1 == iterator.previous())
Assertions.assertTrue(1 == iterator.next())
Assertions.assertTrue(1 == iterator.nextIndex())
Assertions.assertTrue(0 == iterator.previousIndex())
Assertions.assertTrue(2 == iterator.next())
Assertions.assertTrue(3 == iterator.next())
Assertions.assertTrue(4 == iterator.next())
Assertions.assertTrue(5 == iterator.next())
Assertions.assertTrue(0 == iterator.next())
Assertions.assertTrue(7 == iterator.next())
Assertions.assertTrue(8 == iterator.next())
Assertions.assertTrue(0 == iterator.next())
Assertions.assertTrue(10 == iterator.next())
Assertions.assertTrue(9 == iterator.previousIndex())
Assertions.assertTrue(10 == iterator.nextIndex())
Assertions.assertTrue(1 == iterator.next())
Assertions.assertTrue(1 == iterator.nextIndex())
Assertions.assertTrue(0 == iterator.previousIndex())
Assertions.assertTrue(2 == iterator.next())
Assertions.assertTrue(3 == iterator.next())
Assertions.assertTrue(4 == iterator.next())
Assertions.assertTrue(5 == iterator.next())
Assertions.assertTrue(0 == iterator.next())
Assertions.assertTrue(7 == iterator.next())
Assertions.assertTrue(8 == iterator.next())
Assertions.assertTrue(0 == iterator.next())
Assertions.assertTrue(10 == iterator.next())
Assertions.assertTrue(9 == iterator.previousIndex())
Assertions.assertTrue(10 == iterator.nextIndex())
Assertions.assertTrue(1 == iterator.next())
Assertions.assertTrue(iterator.hasPrevious())
Assertions.assertTrue(1 == iterator.previous())
Assertions.assertTrue(iterator.hasNext())
Assertions.assertTrue(1 == iterator.next())
Assertions.assertTrue(2 == iterator.next())
Assertions.assertTrue(iterator.hasPrevious())
Assertions.assertTrue(3 == iterator.next())
Assertions.assertTrue(iterator.hasPrevious())
Assertions.assertTrue(3 == iterator.previous())
Assertions.assertTrue(iterator.hasPrevious())
Assertions.assertTrue(2 == iterator.previous())
Assertions.assertTrue(iterator.hasPrevious())
Assertions.assertTrue(1 == iterator.previous())
Assertions.assertTrue(55 == list.indexOf(56))
Assertions.assertTrue(99 == list.indexOf(100))
Assertions.assertTrue(-1 == list.indexOf(200))
Assertions.assertTrue(-1 == list.indexOf(0))
Assertions.assertTrue(list.removeAll(Arrays.asList(3, 2, 10, 6)))
Assertions.assertTrue(list.removeAll(Arrays.asList(4)))
Assertions.assertTrue(list.removeAll(Arrays.asList(1, 5, 1, 5)))
Assertions.assertTrue(list.isEmpty())
Assertions.assertTrue(list.retainAll(Arrays.asList(3, 2, 10, 6)))
Assertions.assertTrue(list.retainAll(Collections.<Integer>emptyList()))
Assertions.assertTrue(list.addAll(Arrays.asList(7, 8, 9)))
Assertions.assertTrue(list.addAll(Arrays.asList(9, 1, 9)))
Assertions.assertTrue(list.containsAll(Arrays.asList(30, 11)))
Assertions.assertTrue(list.containsAll(Arrays.asList(30)))
Assertions.assertTrue(list.containsAll(Collections.emptyList()))
Assertions.assertTrue(Arrays.asList(1).containsAll(Collections.emptyList()))
Assertions.assertTrue(list.isEmpty())
Assertions.assertTrue(list.contains("3"))
Assertions.assertTrue(list.contains("1"))
assertTrue(stringIterator2.hasNext())
assertTrue(stringIterator2.hasNext())
Assertions.assertTrue(queue.addAll(Arrays.asList(7, 8, 9)))
Assertions.assertTrue(queue.addAll(Arrays.asList(9, 1, 9)))
Assertions.assertTrue(queue.removeAll(Arrays.asList(3, 2, 10, 6)))
Assertions.assertTrue(queue.removeAll(Arrays.asList(4)))
Assertions.assertTrue(queue.removeAll(Arrays.asList(1, 5, 1, 5)))
Assertions.assertTrue(queue.isEmpty())
Assertions.assertTrue(System.currentTimeMillis() - s > 2000)
Assertions.assertTrue(System.currentTimeMillis() - s > 9000)
Assertions.assertTrue(System.currentTimeMillis() - s > 5000)
Assertions.assertTrue(queue.isEmpty())
Assertions.assertTrue(r1.get(0))
Assertions.assertTrue(e.awaitTermination(30, TimeUnit.SECONDS))
Assertions.assertTrue((Boolean) res.get(0))
Assertions.assertTrue((Boolean) res.get(1))
Assertions.assertTrue(sync(redisson.getMap("test").remove("2", "5")))
Assertions.assertTrue(sync(redisson.getMap("test").remove("1", "2")))
Assertions.assertTrue(sync(set.remove(1)))
Assertions.assertTrue(sync(set.retainAll(Arrays.asList(1, 2))))
Assertions.assertTrue(sync(set.containsAll(Collections.emptyList())))
Assertions.assertTrue(sync(set.containsAll(Arrays.asList(30, 11))))
Assertions.assertTrue(sync(set.contains(new TestObject("2", "3"))))
Assertions.assertTrue(sync(set.contains(new TestObject("1", "2"))))
Assertions.assertTrue(sync(set.retainAll(Collections.<Integer>emptyList())))
Assertions.assertTrue(sync(set.move("otherSet", 1)))
Assertions.assertTrue(sync(tmp.contains(1)))
Assertions.assertTrue(sync(tmp.contains(3)))
Assertions.assertTrue(System.currentTimeMillis() - s > 2000)
Assertions.assertTrue(System.currentTimeMillis() - s > 9000)
Assertions.assertTrue(System.currentTimeMillis() - s > 5000)
