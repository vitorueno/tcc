assertEquals(n, belly.getCukes())
assertDoesNotThrow(factory::stop)
assertDoesNotThrow(factory::start)
assertDoesNotThrow(factory::stop)
assertAll(() -> assertThat(bean.getClass(), not(is(ApplicationScopedBean.class))), () -> assertThat(bean.getClass().getSuperclass(), is(ApplicationScopedBean.class)))
assertTrue(hasTheSameRowsAs(table).inOrder().matches(identical))
assertFalse(hasTheSameRowsAs(table).inOrder().matches(shuffled))
assertFalse(hasTheSameRowsAs(table).inOrder().matches(different))
assertTrue(hasTheSameRowsAs(table).matches(identical))
assertTrue(hasTheSameRowsAs(table).matches(shuffled))
assertFalse(hasTheSameRowsAs(table).matches(different))
assertEquals(Optional.of(asList(outline, examplesA, example1)), pathTo)
assertEquals(Optional.of(asList(outline, examplesA, example2)), pathTo)
assertEquals(Optional.of(asList(outline, examplesB, example3)), pathTo)
assertEquals(Optional.of(asList(outline, examplesB, example4)), pathTo)
assertEquals(Optional.of(asList(outline, examplesA)), pathTo)
assertEquals(Optional.of(asList(emptyOutline, emptyExamplesA)), pathTo)
assertEquals(Optional.of(asList(outline, examplesB)), pathTo)
assertEquals(Optional.of(asList(emptyOutline, emptyExamplesB)), pathTo)
assertEquals(Optional.of(asList(outline)), pathTo)
assertEquals(Optional.of(asList(emptyOutline)), pathTo)
assertEquals(Optional.empty(), pathTo)
assertEquals(Optional.empty(), pathTo)
assertEquals(Optional.of(asList(example1)), pathTo)
assertEquals(Optional.empty(), pathTo)
assertNotNull(events.get(0).getUndefinedParameterType())
assertEquals(parameterInfos.size(), args.length)
assertAll(() -> assertThat(uri.getScheme(), is(equalTo("classpath"))), () -> assertThat(uri.getSchemeSpecificPart(), is(equalTo("/path/to/file.feature"))))
assertAll(() -> assertThat(uri.getScheme(), is("classpath")), () -> assertThat(uri.getSchemeSpecificPart(), is("/")))
assertAll(() -> assertThat(uri.getScheme(), is("classpath")), () -> assertThat(uri.getSchemeSpecificPart(), is("/")))
assertAll(() -> assertThat(uri.getScheme(), is("classpath")), () -> assertThat(uri.getSchemeSpecificPart(), is("/path/to/file.feature")))
assertAll(() -> assertThat(uri.getScheme(), is("classpath")), () -> assertThat(uri.getSchemeSpecificPart(), is("/path/to")))
assertAll(() -> assertThat(uri.getScheme(), is("file")), () -> assertThat(uri.getSchemeSpecificPart(), is("/path/to/file.feature")))
assertAll(() -> assertThat(uri.getScheme(), is("file")), () -> assertThat(uri.getSchemeSpecificPart(), is("/path/to")))
assertAll(() -> assertThat(uri.getScheme(), is("file")), () -> assertThat(uri.getSchemeSpecificPart(), endsWith("path/to/file.feature")))
assertAll(() -> assertThat(uri.getScheme(), is("file")), () -> assertThat(uri.getSchemeSpecificPart(), endsWith("path/to/file.feature")))
assertAll(() -> assertThat(uri.getScheme(), is("file")), () -> assertThat(uri.getSchemeSpecificPart(), endsWith("path/to/file.feature")))
assertAll(() -> assertThat(uri.getScheme(), is(is("file"))), () -> assertThat(uri.getSchemeSpecificPart(), is("/C:/path/to/file.feature")))
assertAll(() -> assertThat(uri.getScheme(), is(is("file"))), () -> assertThat(uri.getSchemeSpecificPart(), endsWith("path/to the/file.feature")))
assertAll(() -> assertThat(uri.getScheme(), is("file")), () -> assertThat(uri.getSchemeSpecificPart(), is("/C:/path/to/file.feature")))
assertAll(() -> assertThat(uri.getScheme(), is("classpath")), () -> assertThat(uri.getSchemeSpecificPart(), is("/")))
assertAll(() -> assertThat(uri.getScheme(), is("classpath")), () -> assertThat(uri.getSchemeSpecificPart(), is("/")))
assertAll(() -> assertThat(uri.getScheme(), is("classpath")), () -> assertThat(uri.getSchemeSpecificPart(), is("/")))
assertAll(() -> assertThat(uri.getScheme(), is("classpath")), () -> assertThat(uri.getSchemeSpecificPart(), is("com/example/app")))
assertAll(() -> assertThat(uri.getScheme(), is("classpath")), () -> assertThat(uri.getSchemeSpecificPart(), is("/com/example/app")))
assertAll(() -> assertThat(uri.getScheme(), is("classpath")), () -> assertThat(uri.getSchemeSpecificPart(), is("/com/example/app")))
assertAll(() -> assertThat(uri.getScheme(), is("classpath")), () -> assertThat(uri.getSchemeSpecificPart(), is("/com/example/app")))
assertAll(() -> assertThat(uri.getScheme(), is("classpath")), () -> assertThat(uri.getSchemeSpecificPart(), is(equalTo("/com/example/app"))))
assertAll(() -> assertThat(featureWithLines.uri(), is(URI.create("classpath:example.feature"))), () -> assertThat(featureWithLines.lines(), emptyCollectionOf(Integer.class)))
assertAll(() -> assertThat(featureWithLines.uri(), is(URI.create("classpath:example.feature"))), () -> assertThat(featureWithLines.lines(), contains(999)))
assertAll(() -> assertThat(featureWithLines.uri(), is(URI.create("classpath:example.feature"))), () -> assertThat(featureWithLines.lines(), contains(999, 2000)))
assertNotNull(optionsBuilder)
assertNotNull(options)
assertAll(() -> assertThat(options.getFeaturePaths(), contains(new File("somewhere_else.feature").toURI())), () -> assertThat(options.getLineFilters(), hasEntry(new File("somewhere_else.feature").toURI(), singleton(3))))
assertAll(() -> assertThat(logRecordListener.getLogRecords().get(0).getMessage(), is("Use '--no-summary' instead of '-p/--plugin null_summary'. '-p/--plugin null_summary' will be removed in a future release.")), () -> assertThat(plugins.getPlugins(), not(hasItem(plugin("io.cucumber.core.plugin.DefaultSummaryPrinter")))))
assertAll(() -> assertThat(plugins.getPlugins(), not(hasItem(plugin("io.cucumber.core.plugin.DefaultSummaryPrinter")))))
assertAll(() -> assertThat(actual, contains("@should_not_be_clobbered")), () -> assertThat(options.getLineFilters(), hasEntry(new File("this/should/be/rerun.feature").toURI(), singleton(12))))
assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat(plugins.getPlugins(), not(hasItem(plugin("io.cucumber.core.plugin.DefaultSummaryPrinter")))))
assertAll(() -> assertThat(options.getFeaturePaths(), contains(URI.create("classpath:com/example.feature"))), () -> assertThat(tagExpressions, contains("@example")))
assertAll(() -> assertThat(options.getFeaturePaths(), contains(URI.create("classpath:path/to.feature"))), () -> assertThat(options.getTagExpressions(), not(contains("@example"))))
assertAll(() -> assertThat(runtimeOptions.getFeaturePaths(), hasSize(0)), () -> assertThat(runtimeOptions.getLineFilters(), equalTo(emptyMap())))
assertAll(() -> assertThat(runtimeOptions.getFeaturePaths(), hasSize(0)), () -> assertThat(runtimeOptions.getLineFilters(), equalTo(emptyMap())))
assertAll(() -> assertThat(runtimeOptions.getFeaturePaths(), hasSize(0)), () -> assertThat(runtimeOptions.getLineFilters(), equalTo(emptyMap())))
assertAll(() -> assertThat(runtimeOptions.getFeaturePaths(), hasSize(0)), () -> assertThat(runtimeOptions.getLineFilters(), equalTo(emptyMap())))
assertAll(() -> assertThat(runtimeOptions.getFeaturePaths(), contains(URI.create("file:/home/users/mp/My%20Documents/tests/bar.feature"))), () -> assertThat(runtimeOptions.getLineFilters(), hasEntry(URI.create("file:/home/users/mp/My%20Documents/tests/bar.feature"), singleton(2))))
assertAll(() -> assertThat(options.getFeaturePaths(), contains(new File("path/bar.feature").toURI())), () -> assertThat(options.getLineFilters(), hasEntry(new File("path/bar.feature").toURI(), singleton(2))))
assertEquals(prettyPluginA, prettyPluginB)
assertEquals(prettyPluginA.hashCode(), prettyPluginB.hashCode())
assertEquals(htmlPluginA, htmlPluginB)
assertEquals(htmlPluginA.hashCode(), htmlPluginB.hashCode())
assertNotEquals(prettyPluginA, htmlPluginA)
assertNotEquals(prettyPluginA.hashCode(), htmlPluginA.hashCode())
assertAll(() -> assertThat(plugins.getPlugins(), is(empty())))
assertAll(() -> assertThat(getRegexpPattern(iterator.next()), is(equalTo("name1"))), () -> assertThat(getRegexpPattern(iterator.next()), is(equalTo("name2"))))
assertAll(() -> assertThat(actual.getMessage(), is("Invalid tag expression at 'io.cucumber.core.options.CucumberOptionsAnnotationParserTest$ClassWithInvalidTagExpression'")), () -> assertThat(actual.getCause(), isA(TagExpressionException.class)))
assertAll(() -> assertThat(actual.getMessage(), is("Invalid tag expression at 'io.cucumber.core.options.CucumberOptionsAnnotationParserTest$ClassWithInvalidTagExpression'")), () -> assertThat(actual.getCause(), isA(TagExpressionException.class)))
assertAll(() -> assertPluginExists(pluginList, HtmlFormatter.class.getName()), () -> assertPluginExists(pluginList, PrettyFormatter.class.getName()))
assertTrue(runtimeOptions.isMonochrome())
assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat(plugins.getPlugins(), is(empty())))
assertAll(() -> assertThat(snakeCase.generate(sentence), is(equalTo(expectedSnakeCase))), () -> assertThat(camelCase.generate(sentence), is(equalTo(expectedCamelCase))))
assertTrue(JarUriFileSystemService.supports(URI.create("jar:file:/example.jar!com/example/app")))
assertTrue(JarUriFileSystemService.supports(URI.create("file:/example.jar")))
assertTrue(fileSystem1.isOpen())
assertTrue(fileSystem2.isOpen())
assertFalse(fileSystem1.isOpen())
assertFalse(fileSystem2.isOpen())
assertEquals("com.example", packageName)
assertEquals("com.example", packageName)
assertEquals("com.example.app", packageName)
assertEquals("com.example.app", packageName)
assertEquals("com.example.app", packageName)
assertEquals("com.example.app.App", fqn)
assertEquals("com.example.app.App", fqn)
assertEquals("com.example.app.App", fqn)
assertEquals(URI.create("classpath:com/example/app/app.feature"), fqn)
assertEquals(URI.create("classpath:com/example/app/app.feature"), fqn)
assertEquals(URI.create("classpath:com/example/app/app.feature"), fqn)
assertAll(() -> assertThat(runners[0], is(not(equalTo(runners[1])))), () -> assertThat(runners[1], is(not(equalTo(runners[0])))))
assertAll(() -> assertThat(eventBus, is(not(equalTo(runnerBus)))), () -> assertThat(runnerBus, is(not(equalTo(eventBus)))))
assertTrue(predicate.test(pickle))
assertFalse(predicate.test(pickle))
assertTrue(predicate.test(pickle))
assertTrue(predicate.test(pickle))
assertTrue(predicate.test(pickle))
assertTrue(predicate.test(pickle))
assertFalse(predicate.test(pickle))
assertTrue(predicate.test(pickle))
assertTrue(predicate.test(pickle))
assertFalse(predicate.test(pickle))
assertTrue(predicate.test(pickle))
assertFalse(predicate.test(pickle))
assertTrue(predicate.test(pickle))
assertTrue(predicate.test(pickle))
assertFalse(predicate.test(pickle))
assertTrue(predicate.test(pickle))
assertFalse(predicate.test(pickle))
assertTrue(predicate.test(pickle))
assertFalse(predicate.test(pickle))
assertTrue(predicate.test(pickle))
assertTrue(predicate.test(pickle))
assertTrue(predicate.test(pickle))
assertFalse(predicate.test(pickle))
assertTrue(passedResult.getStatus().isOk())
assertTrue(skippedResult.getStatus().isOk())
assertFalse(failedResult.getStatus().isOk())
assertNull(collector.getThrowable())
assertEquals(exception, collector.getThrowable())
assertEquals(firstException, collector.getThrowable())
assertEquals(secondException, collector.getThrowable().getSuppressed()[0])
assertEquals(secondException, collector.getThrowable())
assertEquals(firstException, collector.getThrowable().getSuppressed()[0])
assertEquals(firstException, collector.getThrowable())
assertEquals(secondException, collector.getThrowable().getSuppressed()[0])
assertEquals(DataTable.create(singletonList(singletonList(null))), arguments.get(0).getValue())
assertAll(() -> assertThat(stepDefs.cell(0, 0), is(equalTo("Birth Date"))), () -> assertThat(stepDefs.cell(1, 0), is(equalTo("1957-05-10"))))
assertAll(() -> assertThat(stepDefs.cell(0, 0), is(equalTo("Birth Date"))), () -> assertThat(stepDefs.cell(0, 1), is(equalTo("1957-05-10"))))
assertEquals(parameterInfos.size(), args.length)
assertTrue(ambiguousCalled)
assertFalse(isTestAbortedExceptionPredicate.test(new RuntimeException()))
assertTrue(isTestAbortedExceptionPredicate.test(new TestAbortedException()))
assertTrue(isTestAbortedExceptionPredicate.test(new TestAbortedExceptionSubClass()))
assertAll(() -> assertThat(expectedThrown.getMessage(), is(equalTo("Duplicate step definitions in StepDefinitionA_Location and StepDefinitionB_Location"))), () -> assertThat(expectedThrown.getCause(), is(nullValue())))
assertAll(() -> assertThat(s.getStatus(), is(equalTo(FAILED))), () -> assertTrue(s.isFailed()))
assertAll(() -> assertThat(s.getStatus(), is(equalTo(SKIPPED))), () -> assertFalse(s.isFailed()))
assertAll(() -> assertThat(s.getStatus(), is(equalTo(UNDEFINED))), () -> assertFalse(s.isFailed()))
assertAll(() -> assertThat(s.getStatus(), is(equalTo(UNDEFINED))), () -> assertFalse(s.isFailed()))
assertTrue(Files.exists(reportJsFile))
assertAll(() -> assertTimelineTestDataIsAsExpected(expectedTests, actualOutput.tests, true, true), () -> assertTimelineGroupDataIsAsExpected(expectedGroups, actualOutput.groups))
assertDoesNotThrow(() -> rethrowIfUnrecoverable(new Throwable()))
assertAll(() -> assertThat(expectedThrown.getMessage(), is(equalTo("java.lang.RuntimeException"))), () -> assertThat(expectedThrown.getCause(), isA(RuntimeException.class)))
assertAll(() -> assertThat(expectedThrown.getMessage(), is(nullValue())), () -> assertThat(expectedThrown.getCause(), is(nullValue())))
assertAll(() -> assertThat(expectedThrown.getMessage(), is(equalTo("message"))), () -> assertThat(expectedThrown.getCause(), is(nullValue())))
assertAll(() -> assertThat(expectedThrown.getMessage(), is(nullValue())), () -> assertThat(expectedThrown.getCause(), is(nullValue())))
assertAll(() -> assertThat(expectedThrown.getMessage(), is(equalTo("message"))), () -> assertThat(expectedThrown.getCause(), isA(RuntimeException.class)))
assertAll(() -> assertThat(expectedThrown.getMessage(), is(nullValue())), () -> assertThat(expectedThrown.getCause(), is(nullValue())))
assertEquals(belly.getContents(), Collections.nCopies(n, "cukes"))
assertEquals("glass", container)
assertEquals("milk", liquid)
assertEquals("happy", mood)
assertFalse(steps.getBelly().isDisposed())
assertTrue(steps.getBelly().isDisposed())
assertTrue(new CucumberEngineOptions(ansiColors).isMonochrome())
assertFalse(new CucumberEngineOptions(noAnsiColors).isMonochrome())
assertTrue(new CucumberEngineOptions(dryRun).isDryRun())
assertFalse(new CucumberEngineOptions(noDryRun).isDryRun())
assertTrue(new CucumberEngineOptions(enabled).isParallelExecutionEnabled())
assertFalse(new CucumberEngineOptions(disabled).isParallelExecutionEnabled())
assertFalse(new CucumberEngineOptions(absent).isParallelExecutionEnabled())
assertEquals("A feature with scenario outlines", feature.getDisplayName())
assertEquals(emptySet(), feature.getTags())
assertEquals(of(from(featurePath)), feature.getSource())
assertEquals(CONTAINER, feature.getType())
assertEquals(id.append("feature", featureSegmentValue), feature.getUniqueId())
assertEquals("A scenario", scenario.getDisplayName())
assertEquals(asSet(create("FeatureTag"), create("ScenarioTag"), create("ResourceA"), create("ResourceAReadOnly")), scenario.getTags())
assertEquals(of(from(featurePath, from(5, 3))), scenario.getSource())
assertEquals(TEST, scenario.getType())
assertEquals(id.append("feature", featureSegmentValue).append("scenario", "5"), scenario.getUniqueId())
assertEquals(Optional.of("io.cucumber.junit.platform.engine"), pickleDescriptor.getPackage())
assertEquals(asSet(new ExclusiveResource("resource-a", LockMode.READ_WRITE), new ExclusiveResource("resource-a", LockMode.READ)), pickleDescriptor.getExclusiveResources())
assertEquals("A scenario outline", outline.getDisplayName())
assertEquals(emptySet(), outline.getTags())
assertEquals(of(from(featurePath, from(11, 3))), outline.getSource())
assertEquals(CONTAINER, outline.getType())
assertEquals(id.append("feature", featureSegmentValue).append("scenario", "11"), outline.getUniqueId())
assertEquals("Example #1.1", example.getDisplayName())
assertEquals(asSet(create("FeatureTag"), create("Example1Tag"), create("ScenarioOutlineTag")), example.getTags())
assertEquals(of(from(featurePath, from(19, 7))), example.getSource())
assertEquals(TEST, example.getType())
assertEquals(id.append("feature", featureSegmentValue).append("scenario", "11").append("examples", "17").append("example", "19"), example.getUniqueId())
assertEquals(Optional.of("io.cucumber.junit.platform.engine"), pickleDescriptor.getPackage())
assertEquals("A feature with scenario outlines - A scenario outline - With some text - Example #1.1", example.getDisplayName())
assertTrue(getNodes().size() > 0)
assertTrue(getPickles().size() > 0)
assertTrue(getNodes().size() > 0)
assertTrue(getPickles().size() > 0)
assertEquals(ENGINE_ID, engine.getId())
assertEquals(Optional.of("DEVELOPMENT"), engine.getVersion())
assertNotNull(engine.createExecutionContext(execution))
assertEquals(0, testDescriptor.getChildren().size())
assertEquals(1, testDescriptor.getChildren().size())
assertEquals(1, testDescriptor.getChildren().size())
assertEquals(1L, testDescriptor.getDescendants().stream().filter(TestDescriptor::isTest).count())
assertEquals(2L, testDescriptor.getDescendants().stream().filter(TestDescriptor::isTest).count())
assertEquals(2, testDescriptor.getChildren().size())
assertEquals(7, testDescriptor.getChildren().size())
assertEquals(unsorted, sorted)
assertEquals(4, tests.size())
assertEquals(2, tests.size())
assertEquals(1, tests.size())
assertEquals(1, tests.size())
assertEquals(2, tests.size())
assertEquals(1, tests.size())
assertEquals(1, testDescriptor.getChildren().size())
assertEquals(1L, testDescriptor.getDescendants().stream().filter(TestDescriptor::isTest).count())
assertEquals(2L, testDescriptor.getDescendants().stream().filter(TestDescriptor::isTest).count())
assertEquals(6, testDescriptor.getChildren().size())
assertEquals(6, testDescriptor.getChildren().size())
assertTrue(testDescriptor.getDescendants().isEmpty())
assertEquals(1, testDescriptor.getChildren().size())
assertEquals(1, testDescriptor.getChildren().size())
assertEquals(selectors, testDescriptor.getDescendants().stream().filter(PickleDescriptor.class::isInstance).map(TestDescriptor::getUniqueId).collect(toSet()))
assertEquals(6, testDescriptor.getChildren().size())
assertEquals(0, testDescriptor.getChildren().size())
assertEquals(1, logRecordListener.getLogRecords().size())
assertEquals(Level.WARNING, logRecord.getLevel())
assertEquals("No features found in package 'io.cucumber.junit.platform.engine.nofeatures'", logRecord.getMessage())
assertAll(() -> {
    assertThat(results).extracting(Message::getContent).isEqualTo(contents);
    assertThat(results).extracting(Message::getAuthor).extracting(User::getId).allMatch(user.getId()::equals);
})
assertEquals(expectedResult, result)
assertEquals(expected, calc.value())
assertEquals(-calc.value().intValue(), change)
assertEquals(expectedResult, result)
assertEquals(expected, calc.value())
assertEquals(-calc.value().intValue(), change)
assertEquals(groceriesPrice, totalPrice)
assertEquals(-calc.value().intValue(), change)
assertEquals(expectedResult, result)
assertEquals(expected, calc.value())
assertEquals(1, transform.size())
assertEquals(here, transform.get(0).name)
assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> {
    assertThat(results).extracting(Message::getContent).isEqualTo(contents);
    assertThat(results).extracting(Message::getAuthor).extracting(User::getId).allMatch(user.getId()::equals);
})
assertNull(lookupTableTypeByType)
assertNull(lookupTableTypeByType)
assertNull(lookupTableTypeByType)
assertSame(cell, lookupTableTypeByType)
assertSame(ENTRY, lookupTableTypeByType)
assertEquals(singletonList(singletonList(new BigDecimal("2105.88"))), dataTableType.transform(singletonList(singletonList("2,105.88"))))
assertEquals(singletonList(singletonList(new BigDecimal("2105.88"))), dataTableType.transform(singletonList(singletonList("2.105,88"))))
assertEquals(singletonList(singletonList(null)), dataTableType.transform(singletonList(singletonList(null))))
assertEquals(singletonList(singletonList(null)), dataTableType.transform(singletonList(singletonList(null))))
assertEquals(singletonList(singletonList(null)), dataTableType.transform(singletonList(singletonList(null))))
assertEquals(singletonList(singletonList(null)), dataTableType.transform(singletonList(singletonList(null))))
assertEquals(singletonList(singletonList(null)), dataTableType.transform(singletonList(singletonList(null))))
assertEquals(singletonList(singletonList(null)), dataTableType.transform(singletonList(singletonList(null))))
assertEquals(singletonList(singletonList(null)), dataTableType.transform(singletonList(singletonList(null))))
assertEquals(singletonList(singletonList(null)), dataTableType.transform(singletonList(singletonList(null))))
assertEquals(singletonList(singletonList(null)), dataTableType.transform(singletonList(singletonList(null))))
assertEquals(singletonList(singletonList("")), dataTableType.transform(singletonList(singletonList("[blank]"))))
assertEquals(singletonList(singletonList("")), dataTableType.transform(singletonList(singletonList("[blank]"))))
assertEquals(singletonList(singletonList(Boolean.TRUE)), dataTableType.transform(singletonList(singletonList("true"))))
assertEquals(singletonList(singletonList(Boolean.FALSE)), dataTableType.transform(singletonList(singletonList("false"))))
assertEquals(singletonList(singletonList(Boolean.TRUE)), dataTableType.transform(singletonList(singletonList("yes"))))
assertTrue(new TableDiffer(table(), table()).calculateDiffs().isEmpty())
assertEquals(emptyTable.cells(), emptyList)
assertTrue(new TableDiffer(table(), table()).calculateUnorderedDiffs().isEmpty())
assertTrue(new TableDiffer(table(), otherTableWithDifferentOrder()).calculateUnorderedDiffs().isEmpty())
assertEquals(emptyList(), converter.toList(table, Integer.class))
assertEquals(emptyList(), converter.convert(table, LIST_OF_INT))
assertEquals(emptyList(), converter.toLists(table, Integer.class))
assertEquals(emptyList(), converter.convert(table, LIST_OF_LIST_OF_INT))
assertEquals(emptyList(), converter.convert(table, LIST_OF_AUTHOR))
assertEquals(emptyMap(), converter.toMap(table, Integer.class, Integer.class))
assertEquals(emptyMap(), converter.convert(table, MAP_OF_INT_TO_INT))
assertEquals(emptyMap(), converter.toMap(table, Integer.class, Integer.class))
assertEquals(emptyMap(), converter.convert(table, MAP_OF_INT_TO_INT))
assertEquals(emptyList(), converter.toMaps(table, Integer.class, Integer.class))
assertEquals(emptyList(), converter.convert(table, LIST_OF_MAP_OF_INT_TO_INT))
assertEquals(emptyList(), converter.toMaps(table, String.class, Integer.class))
assertEquals(emptyList(), converter.convert(table, LIST_OF_MAP_OF_STRING_TO_INT))
assertSame(table, converter.convert(table, DataTable.class))
assertEquals(expected, converter.toList(table, String.class))
assertEquals(expected, converter.convert(table, List.class))
assertEquals(expected, converter.toList(table, OPTIONAL_BIG_DECIMAL))
assertEquals(expected, converter.toMaps(table, OPTIONAL_STRING, OPTIONAL_BIG_INTEGER))
assertEquals(expected, converter.toList(table, Integer.class))
assertEquals(expected, converter.convert(table, LIST_OF_INT))
assertEquals(expected, converter.convert(table, LIST_OF_MAP))
assertEquals(expected, converter.toList(table, Author.class))
assertEquals(expected, converter.convert(table, LIST_OF_AUTHOR))
assertEquals(expected, converter.toList(table, Author.class))
assertEquals(expected, converter.convert(table, LIST_OF_AUTHOR))
assertEquals(expected, converter.toList(table, Author.class))
assertEquals(expected, converter.convert(table, LIST_OF_AUTHOR))
assertEquals(expected, converter.toList(table, Author.class))
assertEquals(expected, converter.convert(table, LIST_OF_AUTHOR))
assertEquals(expected, converter.toList(table, Integer.class))
assertEquals(expected, converter.convert(table, LIST_OF_INT))
assertEquals(expected, converter.toList(table, Integer.class))
assertEquals(expected, converter.convert(table, LIST_OF_INT))
assertEquals(expected, converter.toList(table, OPTIONAL_STRING))
assertEquals(expected, converter.convert(table, LIST_OF_OPTIONAL_STRING))
assertEquals(expected, converter.toList(table, OPTIONAL_STRING))
assertEquals(expected, converter.convert(table, LIST_OF_OPTIONAL_STRING))
assertEquals(expected, converter.convert(table, LIST_OF_LIST))
assertEquals(expected, converter.toLists(table, String.class))
assertEquals(expected, converter.toLists(table, Integer.class))
assertEquals(expected, converter.convert(table, LIST_OF_LIST_OF_INT))
assertEquals(expected, converter.toMap(table, String.class, String.class))
assertEquals(expected, converter.convert(table, Map.class))
assertEquals(expected, converter.toMap(table, String.class, String.class))
assertEquals(expected, converter.convert(table, Map.class))
assertEquals(expected, converter.toMap(table, Integer.class, Integer.class))
assertEquals(expected, converter.convert(table, MAP_OF_INT_TO_INT))
assertEquals(expected, converter.toMap(table, AirPortCode.class, Coordinate.class))
assertEquals(expected, converter.convert(table, MAP_OF_AIR_PORT_CODE_TO_COORDINATE))
assertEquals(expected, converter.toMap(table, AirPortCode.class, Coordinate.class))
assertEquals(expected, converter.convert(table, MAP_OF_AIR_PORT_CODE_TO_COORDINATE))
assertEquals(expected, converter.toMap(table, AirPortCode.class, Coordinate.class))
assertEquals(expected, converter.convert(table, MAP_OF_AIR_PORT_CODE_TO_COORDINATE))
assertEquals(expected, converter.toMap(table, AirPortCode.class, Coordinate.class))
assertEquals(expected, converter.convert(table, MAP_OF_AIR_PORT_CODE_TO_COORDINATE))
assertEquals(expected, converter.toMap(table, AirPortCode.class, AirPortCode.class))
assertEquals(expected, converter.convert(table, MAP_OF_AIR_PORT_CODE_TO_AIR_PORT_CODE))
assertEquals(expected, converter.convert(table, MAP_OF_AIR_PORT_CODE_TO_AIR_PORT_CODE))
assertEquals(expected, converter.convert(table, MAP_OF_STRING_TO_LIST_OF_DOUBLE))
assertEquals(expected, converter.convert(table, MAP_OF_STRING_TO_LIST_OF_DATE))
assertEquals(expected, converter.convert(table, MAP_OF_STRING_TO_LIST_OF_DATE))
assertEquals(expected, converter.convert(table, MAP_OF_STRING_TO_LIST_OF_DOUBLE))
assertEquals(expected, converter.convert(table, MAP_OF_STRING_TO_MAP_OF_INTEGER_TO_PIECE))
assertEquals(expected, converter.convert(table, MAP_OF_STRING_TO_MAP_OF_STRING_DOUBLE))
assertEquals(expected, converter.toMap(table, String.class, Coordinate.class))
assertEquals(expected, converter.convert(table, MAP_OF_STRING_TO_COORDINATE))
assertEquals(expected, converter.toMap(table, Integer.class, String.class))
assertEquals(expected, converter.convert(table, MAP_OF_INT_TO_STRING))
assertEquals(expected, converter.convert(table, MAP_OF_STRING_TO_MAP))
assertEquals(expected, converter.toMaps(table, Integer.class, Integer.class))
assertEquals(expected, converter.convert(table, LIST_OF_MAP_OF_INT_TO_INT))
assertEquals(expected, converter.toMaps(table, Integer.class, Integer.class))
assertEquals(expected, converter.convert(table, LIST_OF_MAP_OF_INT_TO_INT))
assertEquals(expected, converter.convert(table, ChessBoard.class))
assertEquals(Optional.empty(), converter.convert(table, OPTIONAL_CHESS_BOARD_TYPE))
assertNull(converter.convert(table, Integer.class))
assertEquals(Integer.valueOf(3), converter.convert(table, Integer.class))
assertEquals(Piece.BLACK_BISHOP, converter.convert(table, Piece.class))
assertEquals(Piece.BLACK_BISHOP, converter.convert(table, Piece.class))
assertEquals(Piece.BLACK_BISHOP, converter.convert(table, Piece.class))
assertSame(expected, converter.convert(table, DataTable.class))
assertEquals(table.transpose(), converter.convert(table, DataTable.class, true))
assertTrue(table.isEmpty())
assertTrue(table.cells().isEmpty())
assertSame(tableConverter, lowerCaseTable.getTableConverter())
assertEquals(raw, table.cells())
assertEquals(raw, table.cells())
assertEquals(raw, table.cells())
assertEquals(raw.get(0).get(0), table.cell(0, 0))
assertEquals(raw.get(0).get(1), table.cell(0, 1))
assertEquals(raw.get(1).get(0), table.cell(1, 0))
assertEquals(raw.get(1).get(1), table.cell(1, 1))
assertEquals(asList(asList("ten", "10"), asList("hundred", "100")), table.subTable(0, 0, 2, 2).cells())
assertEquals(asList(asList("100", "2"), asList("1000", "3")), table.subTable(1, 1).cells())
assertEquals(table.cells(), table.subTable(0, 0).cells())
assertEquals("ten", table.subTable(0, 0, 3, 3).cell(0, 0))
assertEquals("1", table.subTable(0, 0).cell(0, 2))
assertEquals("thousand", table.subTable(0, 0, 3, 3).cell(2, 0))
assertEquals("3", table.subTable(0, 0).cell(2, 2))
assertEquals(emptyDataTable(), subTable)
assertTrue(subTable.isEmpty())
assertEquals(0, subTable.height())
assertEquals(0, subTable.width())
assertEquals(emptyList(), subTable.cells())
assertEquals(raw.get(2), table.row(2))
assertEquals(asList(asList("hundred", "100"), asList("thousand", "1000")), table.rows(1).cells())
assertEquals(DataTable.create(singletonList(asList("hundred", "100"))), table.rows(1, 2))
assertEquals(asList("100", "1000"), table.column(1))
assertEquals(asList("thousand", "1000", "3"), table.column(1))
assertEquals(asList(asList("100", "2"), asList("1000", "3")), table.columns(1).cells())
assertEquals(DataTable.create(asList(singletonList("100"), singletonList("1000"))), table.columns(1, 2))
assertEquals(raw, table.asLists())
assertTrue(table.isEmpty())
assertTrue(table.cells().isEmpty())
assertEquals("" + "| one  | four  | seven  |\n" + "| 4444 | 55555 | 666666 |\n", other.toString())
assertEquals(1L, table.convert(Long.class, false))
assertEquals(1L, table.<Long>convert((Type) Long.class, false))
assertEquals(asList("1", "100", "2", "1000"), table.values())
assertEquals(asList(1L, 2L), table.asList(Long.class))
assertEquals(asList(1L, 2L), table.asList((Type) Long.class))
assertEquals(asList("1", "2"), table.asList())
assertEquals(asList(asList(1L, 100L), asList(2L, 1000L)), table.asLists(Long.class))
assertEquals(asList(asList(1L, 100L), asList(2L, 1000L)), table.asLists((Type) Long.class))
assertEquals(raw, table.asLists())
assertEquals(expected, table.asMaps(String.class, Long.class))
assertEquals(expected, table.asMaps((Type) String.class, (Type) Long.class))
assertEquals(singletonList(expected), table.asMaps())
assertEquals(singletonList(expected), table.asMaps())
assertEquals(singletonList(expected), table.asMaps())
assertEquals(table.entries(), table.asMaps())
assertEquals(expected, table.asMap(String.class, Long.class))
assertEquals(expected, table.asMap((Type) String.class, (Type) Long.class))
assertEquals(expected, table.asMap())
assertEquals(createSimpleTable(), createSimpleTable())
assertEquals(createSimpleTable().hashCode(), createSimpleTable().hashCode())
assertEquals(createSimpleTable().transpose(), createSimpleTable().transpose())
assertEquals(createSimpleTable().transpose().hashCode(), createSimpleTable().transpose().hashCode())
assertNotEquals(createSimpleTable(), createSimpleNumberTable())
assertNotEquals(createSimpleTable().hashCode(), createSimpleNumberTable().hashCode())
assertNotEquals(createSimpleTable().transpose(), createSimpleNumberTable().transpose())
assertNotEquals(createSimpleTable().transpose().hashCode(), createSimpleNumberTable().transpose().hashCode())
assertEquals(expected, appendable.toString())
assertEquals(expected, appendable.toString())
assertSame(table, table.transpose().transpose())
assertEquals("| hello |\n", formatter.format(table))
assertEquals("| hello |\n", stringBuilder.toString())
assertEquals("| hello |\n", appendable.toString())
assertEquals("" + "| 1 | 1 | 1 |\n" + "| 4 | 5 | 6 |\n" + "| 7 | 8 | 9 |\n", formatter.format(table))
assertEquals("|  |\n", formatter.format(table))
assertEquals("| [empty] |\n", formatter.format(table))
assertEquals("" + "| \\| |\n" + "| \\\\ |\n" + "| \\n |\n", formatter.format(table))
assertEquals("    | Hello |\n", formatter.format(table))
assertEquals("" + "+ | 1 | 1 | 1 |\n" + "- | 4 | 5 | 6 |\n" + "  | 7 | 8 | 9 |\n", formatter.format(table))
assertEquals("| | |\n", formatter.format(table))
assertEquals(new BigDecimal("1042.0000000000000000000002"), english.parseBigDecimal("1,042.0000000000000000000002"))
assertEquals(new BigDecimal("1042.0000000000000000000002"), german.parseBigDecimal("1.042,0000000000000000000002"))
assertAll(() -> assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("Instantiation of 'some.bogus.Class' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor."))), () -> assertThat("Unexpected exception cause class", actualThrown.getCause(), isA(ClassNotFoundException.class)))
assertAll(() -> assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("Instantiation of 'java.lang.String' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor."))), () -> assertThat("Unexpected exception cause class", actualThrown.getCause(), isA(ClassCastException.class)))
assertAll(() -> assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("Instantiation of 'io.cucumber.guice.InjectorSourceFactoryTest$PrivateConstructor' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor."))), () -> assertThat("Unexpected exception cause class", actualThrown.getCause(), isA(NoSuchMethodException.class)))
assertAll(() -> assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("Instantiation of 'io.cucumber.guice.InjectorSourceFactoryTest$NoDefaultConstructor' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor."))), () -> assertThat("Unexpected exception cause class", actualThrown.getCause(), isA(NoSuchMethodException.class)))
assertAll(() -> assertDoesNotMatch(matcher, arg), () -> assertMismatchDescription("was null", matcher, arg))
assertAll(() -> assertDoesNotMatch(matcher, arg), () -> assertMismatchDescription("collection did not contain more than one element <[foo]>", matcher, arg))
assertAll(() -> assertDoesNotMatch(matcher, arg), () -> assertMismatchDescription("collection contained null element <[foo, null]>", matcher, arg))
assertAll(() -> assertDoesNotMatch(matcher, arg), () -> assertMismatchDescription("collection contained elements that are not unique <[foo, foo]>", matcher, arg))
assertAll(() -> assertDoesNotMatch(matcher, arg), () -> assertMismatchDescription("collection contained elements that are not unique <[foo, bar, foo]>", matcher, arg))
assertAll(() -> assertDoesNotMatch(matcher, arg), () -> assertMismatchDescription("collection contained elements that are not unique <[foo, foo, foo]>", matcher, arg))
assertAll(() -> assertDoesNotMatch(matcher, arg), () -> assertMismatchDescription("was null", matcher, arg))
assertAll(() -> assertDoesNotMatch(matcher, arg), () -> assertMismatchDescription("collection did not contain more than one element <[foo]>", matcher, arg))
assertAll(() -> assertDoesNotMatch(matcher, arg), () -> assertMismatchDescription("collection contained null element <[null, null]>", matcher, arg))
assertAll(() -> assertDoesNotMatch(matcher, arg), () -> assertMismatchDescription("collection contained elements that are not equal <[foo, bar]>", matcher, arg))
assertAll(() -> assertDoesNotMatch(matcher, arg), () -> assertMismatchDescription("collection contained elements that are not equal <[foo, foo, bar]>", matcher, arg))
assertAll(() -> assertDoesNotMatch(matcher, arg), () -> assertMismatchDescription("collection contained elements that are not equal <[foo, bar, baz]>", matcher, arg))
assertAll(() -> assertThat(list.size(), equalTo(1)), () -> assertThat(list.get(0), equalTo(element)))
assertTrue(factory.addClass(YourInjectorSource.class))
assertTrue(factory.addClass(YourInjectorSource.class))
assertTrue(factory.addClass(YourInjectorSource.class))
assertTrue(factory.addClass(YourInjectorSource.class))
assertEquals(n, belly.getCukes())
assertEquals(42, cukeCount)
assertEquals("LHR", flight.from)
assertEquals("CDG", flight.to)
assertEquals(45, delay)
assertEquals(expectedCount, this.count)
assertEquals(expected, toTranspose.transpose())
assertNull(options.objectFactory())
assertNotNull(options.objectFactory())
assertEquals(TestObjectFactory.class, options.objectFactory())
assertEquals(stepOccurrence1.getText(), stepOccurrence2.getText())
assertNotEquals(stepDescription1, stepDescription2)
assertNotEquals(stepDescription1, stepDescription2)
assertEquals("first", stepDescription.getClassName())
assertEquals("step", stepDescription.getMethodName())
assertEquals("step(first)", stepDescription.getDisplayName())
assertEquals("scenario name", runner.getDescription().getDisplayName())
assertEquals("it works", runner.getDescription().getChildren().get(0).getMethodName())
assertEquals("scenario_name", runner.getDescription().getDisplayName())
assertEquals("scenario_name", runner.getDescription().getChildren().get(0).getClassName())
assertEquals("it_works", runner.getDescription().getChildren().get(0).getMethodName())
assertTrue(descriptions.contains(description))
assertTrue(descriptions.add(description))
assertTrue(scenarioA.getChildren().isEmpty())
assertTrue(scenarioB.getChildren().isEmpty())
assertTrue(scenarioC0.getChildren().isEmpty())
assertTrue(scenarioC1.getChildren().isEmpty())
assertTrue(scenarioC2.getChildren().isEmpty())
assertNotNull(o1)
assertNotSame(o1, o2)
assertEquals(n, belly.getCukes())
assertTrue(inTheBelly)
assertEquals(42, cukes.intValue())
assertEquals("belly", what)
assertTrue(invoked.get())
assertEquals(42, cuckes.intValue())
assertEquals(42, cuckes)
assertEquals(42, cuckes.intValue())
assertEquals("42", number)
assertEquals("42", this.number)
assertEquals("314", number)
assertEquals(TestObjectFactory.class, options.objectFactory())
assertEquals(exception.getCause(), error)
assertEquals(exception.getCause(), error)
assertEquals(exception.getCause(), error)
assertEquals(scenarioNames, asList("\"SC1\"", "\"SC2\"", "\"SC3\""))
assertEquals(frequency(featureNames, "\"A feature containing 3 scenarios\""), 3)
assertEquals(scenarios.length, 1)
assertEquals(1, events.stream().map(Object::getClass).filter(TestRunStarted.class::isAssignableFrom).count())
assertEquals(1, events.stream().map(Object::getClass).filter(TestRunFinished.class::isAssignableFrom).count())
assertEquals(1, events.stream().map(Object::getClass).filter(TestRunStarted.class::isAssignableFrom).count())
assertEquals(1, events.stream().map(Object::getClass).filter(TestRunFinished.class::isAssignableFrom).count())
assertEquals(n, belly.getCukes())
assertEquals(n, belly.getCukes())
assertEquals(0, belly.getCukes())
assertEquals(0, bellyBean.getCukes())
assertEquals(n, bellyBean.getCukes())
assertNotNull(options.objectFactory())
assertNotNull(belly)
assertNotNull(bellyBean)
assertEquals(concurrency, map.size())
assertNotEquals(response, response2)
assertTrue(CucumberTestContext.getInstance().getId().isEmpty())
assertTrue(CucumberTestContext.getInstance().getId().isEmpty())
assertTrue(CucumberTestContext.getInstance().getId().isEmpty())
assertEquals(testContextId1.get() + 1, testContextId2.get())
assertTrue(stepdef.isAutowired())
assertTrue(stepdef.isAutowired())
assertDoesNotThrow(belly::getInstanceId)
assertDoesNotThrow(factory::stop)
assertDoesNotThrow(factory::stop)
assertDoesNotThrow(factory::stop)
assertDoesNotThrow(factory::start)
assertDoesNotThrow(factory::start)
assertEquals(n, belly.getCukes())
assertEquals(0, belly.getCukes())
assertEquals(0, bellyBean.getCukes())
assertEquals(n, bellyBean.getCukes())
assertNotNull(context)
assertNotNull(belly)
assertNotNull(bellyBean)
assertEquals(arg1, cucumbers)
assertEquals(arg1, oneStepDef.cucumbers)
assertEquals(n, belly.getCukes())
assertDoesNotThrow(factory::stop)
assertDoesNotThrow(factory::start)
assertDoesNotThrow(factory::stop)
assertAll(() -> assertThat(bean.getClass(), not(is(ApplicationScopedBean.class))), () -> assertThat(bean.getClass().getSuperclass(), is(ApplicationScopedBean.class)))
assertNull(options.objectFactory())
assertTrue(feature.isPresent())
assertEquals(0, feature.get().getPickles().size())
assertEquals(path, receivedPath.get())
assertEquals(source, recievedSource.get())
assertEquals(idGenerator, recievedIdGenerator.get())
assertTrue(authors.contains(expectedAuthor))
assertTrue(authors.contains(expectedAuthor))
assertEquals(expectedAuthor, author)
assertEquals(expectedAuthor, author)
assertTrue(persons.contains(expectedPerson))
assertTrue(persons.contains(mononymousPerson))
assertEquals(expected, date)
assertEquals(this.scenarioName, scenarioName)
assertEquals(expected, body)
assertTrue(invoked)
assertTrue(invoked)
assertTrue(invoked)
assertAll(() -> assertThat(stackTraceElement.getMethodName(), is("method_throws")), () -> assertThat(stackTraceElement.getClassName(), is(JavaStepDefinitionTest.class.getName())))
assertAll(() -> assertThrows(InvalidMethodSignatureException.class, () -> new JavaDocStringTypeDefinition("", voidMethod, lookup)), () -> assertThrows(InvalidMethodSignatureException.class, () -> new JavaDocStringTypeDefinition("", voidObjectMethod, lookup)))
assertFalse(isTransposed(m))
assertTrue(isTransposed(m))
assertTrue(authors.contains(expectedAuthor))
assertTrue(authors.contains(expectedAuthor))
