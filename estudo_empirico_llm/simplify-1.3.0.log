assertEquals(expectedRegisterCount, actualRegisterCount)
assertArrayEquals(expectedLines, actualLines)
assertEquals(Opcode.IGET, UnreflectionStrategy.getGetOpcode("I", isStatic))
assertEquals(Opcode.IGET_BOOLEAN, UnreflectionStrategy.getGetOpcode("Z", isStatic))
assertEquals(Opcode.IGET_BYTE, UnreflectionStrategy.getGetOpcode("B", isStatic))
assertEquals(Opcode.IGET_CHAR, UnreflectionStrategy.getGetOpcode("C", isStatic))
assertEquals(Opcode.IGET_OBJECT, UnreflectionStrategy.getGetOpcode("Ljava/lang/Object;", isStatic))
assertEquals(Opcode.IGET_SHORT, UnreflectionStrategy.getGetOpcode("S", isStatic))
assertEquals(Opcode.IGET_WIDE, UnreflectionStrategy.getGetOpcode("J", isStatic))
assertEquals(Opcode.IGET_WIDE, UnreflectionStrategy.getGetOpcode("D", isStatic))
assertEquals(Opcode.SGET, UnreflectionStrategy.getGetOpcode("I", isStatic))
assertEquals(Opcode.SGET_BOOLEAN, UnreflectionStrategy.getGetOpcode("Z", isStatic))
assertEquals(Opcode.SGET_BYTE, UnreflectionStrategy.getGetOpcode("B", isStatic))
assertEquals(Opcode.SGET_CHAR, UnreflectionStrategy.getGetOpcode("C", isStatic))
assertEquals(Opcode.SGET_OBJECT, UnreflectionStrategy.getGetOpcode("Ljava/lang/Object;", isStatic))
assertEquals(Opcode.SGET_SHORT, UnreflectionStrategy.getGetOpcode("S", isStatic))
assertEquals(Opcode.SGET_WIDE, UnreflectionStrategy.getGetOpcode("J", isStatic))
assertEquals(Opcode.SGET_WIDE, UnreflectionStrategy.getGetOpcode("D", isStatic))
assertEquals(expected.getOpcode(), actual.getOpcode())
assertFalse(changesMade)
assertEquals(before.toSmali(), after.toSmali())
assertEquals(Opcode.GOTO_32, instruction.getOpcode())
assertEquals(4, ((OffsetInstruction) instruction).getCodeOffset())
assertEquals("Ljava/lang/Class;->forName(Ljava/lang/String;)Ljava/lang/Class;", methodDescriptor)
assertEquals(Opcode.CONST_CLASS, instruction.getOpcode())
assertEquals(0, instruction.getRegisterA())
assertEquals(expectedClassName, actualClassName)
assertArrayEquals(new int[] { 0 }, manipulator.getAddresses())
assertEquals("return-void", manipulator.getOp(0).toString())
assertArrayEquals(new int[] { 0, 2, 4 }, addresses)
assertEquals("if-eqz r0, :addr_4", manipulator.getOp(0).toString())
assertEquals("sget r0, Ljava/lang/Integer;->MAX_VALUE:I", manipulator.getOp(2).toString())
assertEquals("return-void", manipulator.getOp(4).toString())
assertArrayEquals(new int[] { 0, 2 }, manipulator.getAddresses())
assertEquals("check-cast r0, Ljava/lang/Integer;", manipulator.getOp(0).toString())
assertEquals("return-void", manipulator.getOp(2).toString())
assertArrayEquals(new int[] { 0, 2, 3, 6, 7, 9 }, manipulator.getAddresses())
assertEquals("if-eqz r1, :addr_7", manipulator.getOp(0).toString())
assertEquals("const/4 r0, 0x0", manipulator.getOp(2).toString())
assertEquals("invoke-static {r0}, Ljava/lang/Integer;->valueOf(I)Ljava/lang/Integer;", manipulator.getOp(3).toString())
assertEquals("move-result r1", manipulator.getOp(6).toString())
assertEquals("check-cast r1, Ljava/lang/Integer;", manipulator.getOp(7).toString())
assertEquals("return-void", manipulator.getOp(9).toString())
assertEquals("Ljava/lang/String;-><init>([B)V", methodDescriptor)
assertEquals(Opcode.CONST_STRING, instruction.getOpcode())
assertEquals(0, instruction.getRegisterA())
assertEquals(expectedConstant, actualConstant)
assertEquals(BuilderInstruction21c.class, manipulator.getInstruction(ADDRESS).getClass())
assertEquals(Opcode.CONST_CLASS, instruction.getOpcode())
assertEquals(0, instruction.getRegisterA())
assertEquals(CLASS_NAME, actualClassName)
assertEquals(BuilderInstruction21c.class, manipulator.getInstruction(ADDRESS).getClass())
assertEquals(Opcode.CONST_CLASS, instruction.getOpcode())
assertEquals(0, instruction.getRegisterA())
assertEquals(CLASS_NAME, actualClassName)
assertEquals(expected, found)
assertEquals(Opcode.INVOKE_DIRECT, instruction.getOpcode())
assertEquals(0, found.size())
assertEquals(expected, found)
assertEquals(expected, found)
assertEquals(expected, found)
assertEquals(expected, found)
assertEquals(expected, found)
assertEquals(expected, found)
assertEquals(expected, found)
assertEquals(expected, found)
assertEquals(expected, found)
assertEquals(expectedInstr.getOpcode(), actualInstr.getOpcode())
assertTrue(outFile.exists())
assertTrue(outFile.exists())
assertEquals(0, template.getChildren().size())
assertNotNull(template.getOp().getChildren())
assertEquals(template.getOp(), node.getOp())
assertEquals(1, children.size())
assertEquals(1, childLocations.length)
assertEquals(node, child.getParent())
assertEquals(node.getContext(), child.getContext().getParent())
assertEquals(childOp.getLocation(), childLocations[0])
assertEquals(childOp.getLocation(), node.getOp().getChildren()[0])
assertArrayEquals(expectedAddresses, actualAddresses)
assertArrayEquals(new int[] { 0 }, parentState.getRegistersAssigned())
assertArrayEquals(new int[] { 2 }, childState.getRegistersAssigned())
assertArrayEquals(new int[] { 3 }, grandchildState.getRegistersAssigned())
assertEquals(2, manipulator.getTryBlocks().size())
assertEquals(0, manipulator.getTryBlocks().size())
assertEquals(0, consensus.getValue())
assertEquals(1, consensus.getValue())
assertEquals(2, consensus.getValue())
assertEquals(1, manipulator.getInstruction(3).getLocation().getLabels().size())
assertEquals(1, manipulator.getInstruction(3).getLocation().getLabels().size())
assertTrue(configuration.isImmutable("Ljava/lang/String;"))
assertFalse(configuration.isImmutable("[Ljava/lang/String;"))
assertFalse(configuration.isImmutable("Ljava/lang/StringBuilder;"))
assertEquals(cmpValue.getClass(), setItem.getValue().getValue().getClass())
assertEquals(CMP_TYPE, setItem.getValue().getType())
assertEquals("cmp-long r0, r2, r4", op.toString())
assertEquals(cmpValue.getClass(), setItem.getValue().getValue().getClass())
assertEquals(CMP_TYPE, setItem.getValue().getType())
assertEquals(cmpValue, setItem.getValue().getValue())
assertEquals(CMP_TYPE, setItem.getValue().getType())
assertEquals(exceptionClass, item.getValue().getClass())
assertEquals(ClassNameUtils.toInternal(exceptionClass), item.getType())
assertEquals(exceptionMessage, ((Throwable) item.getValue()).getMessage())
assertEquals(0, mState.getRegistersAssigned().length)
assertEquals("[[" + CLASS_NAME, consensus.getType())
assertEquals(length, Array.getLength(consensus.getValue()))
assertEquals("[[" + CLASS_NAME, actualClass.getName())
assertEquals("[" + CLASS_NAME, consensus.getType())
assertEquals(length, Array.getLength(consensus.getValue()))
assertEquals("[" + CLASS_NAME, actualClass.getName())
assertEquals(exceptionClass, item.getValue().getClass())
assertEquals(ClassNameUtils.toInternal(exceptionClass), item.getType())
assertEquals(0, mState.getRegistersAssigned().length)
assertEquals("div-long r" + DEST_REGISTER + ", r" + ARG1_REGISTER + ", r" + ARG2_REGISTER, op.toString())
assertEquals("double-to-float r" + REGISTER_A + ", r" + REGISTER_B, op.toString())
assertSame(register0, register1)
assertTrue(register0 instanceof Object)
assertEquals("packed-switch-payload [1 -> :addr_10, 2 -> :addr_20]", op.toString())
assertEquals(exceptionClass, item.getValue().getClass())
assertEquals(ClassNameUtils.toInternal(exceptionClass), item.getType())
assertEquals(0, mState.getRegistersAssigned().length)
assertEquals(2, exceptions.size())
assertTrue(exceptionClasses.contains(ArrayIndexOutOfBoundsException.class))
assertTrue(exceptionClasses.contains(NullPointerException.class))
assertEquals(CommonTypes.OBJECT, item.getType())
assertEquals(UnknownValue.class, item.getValue().getClass())
assertEquals(exceptionClass, item.getValue().getClass())
assertEquals(ClassNameUtils.toInternal(exceptionClass), item.getType())
assertEquals(item, throwItem)
assertEquals(exceptionClass, item.getValue().getClass())
assertEquals(ClassNameUtils.toInternal(exceptionClass), item.getType())
assertFalse(graph.wasAddressReached(2))
assertEquals(0, mState.getRegistersAssigned().length)
assertEquals("monitor-exit r0", node.getOp().toString())
assertEquals("monitor-enter r0", node.getOp().toString())
assertEquals(UnknownValue.class, setItem.getValue().getValue().getClass())
assertEquals("[I", setItem.getValue().getType())
assertEquals("filled-new-array {r0, r1}, [I", op.toString())
assertEquals(UnknownValue.class, setItem.getValue().getValue().getClass())
assertEquals("[I", setItem.getValue().getType())
assertEquals("filled-new-array/range {r0 .. r5}, [I", op.toString())
assertEquals("iput r" + REGISTER_A + ", r" + REGISTER_B + ", Lsome/class;->someMethod:I", op.toString())
assertEquals("Lhash_code;", consensus.getType())
assertEquals("Lextends_enum;", consensus.getType())
assertEquals(exceptionClass, item.getValue().getClass())
assertEquals(ClassNameUtils.toInternal(exceptionClass), item.getType())
assertEquals(item, throwItem)
assertEquals(instanceClassName, consensus.getType())
assertEquals(virtualClass.getName(), consensus.getValue().getClass().getName())
assertEquals(instanceClassName, consensus.getType())
assertEquals(virtualClass.getName(), consensus.getValue().getClass().getName())
assertEquals(instanceClassName, consensus.getType())
assertEquals(virtualClass.getName(), consensus.getValue().getClass().getName())
assertEquals(exceptionClass, item.getValue().getClass())
assertEquals(ClassNameUtils.toInternal(exceptionClass), item.getType())
assertEquals(CLASS_NAME, consensus.getType())
assertEquals(virtualClass, consensus.getValue().getClass())
assertEquals(CLASS_NAME, consensus.getType())
assertEquals(virtualClass.getName(), consensus.getValue().getClass().getName())
assertNull(consensus)
assertEquals(instance.getClass(), consensus.getValue())
assertEquals(exception.getMessage(), "Can't find Smali file for Lim_not_your_friend_buddy;")
assertEquals("invoke-static {}, " + CLASS_NAME + "->returnVoid()V", op.toString())
assertEquals(exception.getMessage(), "Can't find Smali file for Lsome/unknown/classzzzzz;")
assertEquals(1, graph.getNodePile(ADDRESS_NOP).size())
assertEquals(2, graph.getNodePile(ADDRESS_RETURN).size())
assertEquals("if-ge r2, r4, :addr_0", op.toString())
assertEquals(exceptionClass, item.getValue().getClass())
assertEquals(ClassNameUtils.toInternal(exceptionClass), item.getType())
assertEquals(exceptionMessage, ((Throwable) item.getValue()).getMessage())
assertEquals(0, mState.getRegistersAssigned().length)
assertEquals(exceptionClass, item.getValue().getClass())
assertEquals(ClassNameUtils.toInternal(exceptionClass), item.getType())
assertEquals(exceptionMessage, ((Throwable) item.getValue()).getMessage())
assertEquals(0, mState.getRegistersAssigned().length)
assertEquals(UnknownValue.class, setItem.getValue().getValue().getClass())
assertEquals("I", setItem.getValue().getType())
assertEquals("iget r" + REGISTER_A + ", r" + REGISTER_B + ", Lsome/class;->someMethod:I", op.toString())
assertEquals(expected, state.toString())
assertEquals(expected, state.toString(false))
assertArrayEquals(expected, actual)
assertEquals(CommonTypes.OBJECT, item.getType())
assertEquals(CommonTypes.OBJECT, item.getType())
assertEquals(CommonTypes.STRING, item.getType())
assertEquals(CommonTypes.OBJECT, item.getType())
assertEquals(CommonTypes.UNKNOWN, item.getType())
assertEquals("[" + CommonTypes.OBJECT, item.getType())
assertEquals(expected, digraph)
fail("Not yet implemented")
assertEquals(handlerCodeAddress2, actual)
assertEquals(handlerCodeAddress1, actual)
assertEquals(handlerCodeAddress, actual)
assertEquals(expectedValue, instance.getValue())
assertEquals(expectedValue, instance.getValue())
assertEquals(2, templateMethodState.getRegisterCount())
assertEquals(1, templateMethodState.getParameterCount())
assertEquals(1, instanceRegister)
assertEquals(CLASS_NAME, instanceItem.getType())
assertEquals(UnknownValue.class, instanceItem.getValue().getClass())
assertEquals(1, templateMethodState.getRegisterCount())
assertEquals(1, templateMethodState.getParameterCount())
assertEquals(0, instanceRegister)
assertEquals(CLASS_NAME, instanceItem.getType())
assertEquals(UninitializedInstance.class, instanceItem.getValue().getClass())
assertEquals(CommonTypes.STRING, virtualClass.getName())
assertEquals(CommonTypes.STRING, virtualClass.getName())
assertEquals(CommonTypes.INTEGER, virtualType.getName())
assertTrue(virtualType instanceof VirtualPrimitive)
assertEquals(CommonTypes.INTEGER, virtualType.getName())
assertTrue(virtualType instanceof VirtualPrimitive)
assertEquals(typeSignature, virtualType.getName())
assertTrue(virtualType instanceof VirtualArray)
assertEquals("[" + CommonTypes.STRING, virtualType.getName())
assertTrue(virtualType instanceof VirtualArray)
assertTrue(classDefs.size() > 0)
assertEquals(klazz, enumConstant.getClass())
assertArrayEquals(expectedEnumStrings, enumStrings)
assertEquals(klazz, enumConstant.getClass())
assertEquals(exception.getMessage(), "does/not/exist")
assertEquals(1, methods1.size())
assertEquals(1, methods2.size())
assertEquals(methods1.get(0).getReturnType(), klazz2)
assertEquals(methods2.get(0).getReturnType(), klazz1)
assertEquals(2, fields.size())
assertEquals("public static int org.cf.test.OverloadedFields.field1", fields.get(0).toString())
assertEquals("public static java.lang.Object org.cf.test.OverloadedFields.field1", fields.get(1).toString())
assertEquals(superName, superClass.getName())
assertEquals(superClass, klazz.getSuperclass())
assertEquals(6, methods.size())
assertEquals(1, fields.size())
assertEquals(1, fields.size())
assertEquals(arrayClass, fields.get(0).getType())
assertEquals(1, methods.size())
assertEquals(1, parameterTypes.length)
assertEquals(klazz, parameterTypes[0])
assertEquals(1, methods.size())
assertEquals("public static void " + className + ".simpleLoop(int,java.lang.Object)", methods.get(0).toString())
assertEquals(exception.getMessage(), nonExistentClassName)
assertEquals(exception.getMessage(), nonExistentClassName)
assertEquals(0, alwaysZeroItem.getValue())
assertEquals(0, testInt1Item.getValue())
assertEquals(1, testInt2Item.getValue())
assertEquals(ArrayList.class, item.getValue().getClass())
assertEquals(1, list.size())
assertEquals("added item!", list.get(0))
assertEquals(item, fieldItem)
assertEquals(ArrayList.class, item.getValue().getClass())
assertEquals(1, list.size())
assertEquals("added item!", list.get(0))
assertEquals(item, fieldItem)
assertEquals(expectedImmediateAncestors, ancestors)
assertEquals(expectedImmediateAncestors, ancestors)
assertEquals(expectedAncestors, ancestors)
assertEquals(expectedAncestors, ancestors)
assertEquals(fieldType, returnItem.getType())
assertEquals(IllegalAccessException.class, actualException.getClass())
assertEquals(error, actualException.getMessage())
assertEquals(level, method.getSideEffectLevel())
assertEquals(level, method.getSideEffectLevel())
assertEquals(level, method.getSideEffectLevel())
assertEquals(1, method.getExceptions().size())
assertEquals(exception, actualException)
assertEquals(SideEffect.Level.NONE, method.getSideEffectLevel())
assertEquals(SideEffect.Level.NONE, graph.getHighestSideEffectLevel())
assertEquals(SideEffect.Level.NONE, graph.getHighestSideEffectLevel())
assertEquals(SideEffect.Level.NONE, graph.getHighestSideEffectLevel())
assertEquals(SideEffect.Level.STRONG, graph.getHighestSideEffectLevel())
assertEquals(SideEffect.Level.STRONG, graph.getHighestSideEffectLevel())
assertEquals(SideEffect.Level.NONE, graph.getHighestSideEffectLevel())
assertEquals(SideEffect.Level.WEAK, graph.getHighestSideEffectLevel())
assertEquals(SideEffect.Level.NONE, graph.getHighestSideEffectLevel())
assertEquals(SideEffect.Level.STRONG, graph.getHighestSideEffectLevel())
assertEquals(SideEffect.Level.WEAK, graph.getHighestSideEffectLevel())
assertEquals(SideEffect.Level.NONE, graph.getHighestSideEffectLevel())
assertEquals(SideEffect.Level.NONE, graph.getHighestSideEffectLevel())
assertEquals(SideEffect.Level.STRONG, graph.getHighestSideEffectLevel())
assertEquals(EXCEPTION_CLASS_NAME, item.getType())
assertEquals(UninitializedInstance.class, item.getValue().getClass())
assertEquals(EXCEPTION_CLASS_NAME, instance.getType().getName())
assertEquals(CommonTypes.UNKNOWN, item.getType())
assertTrue(item.isUnknown())
assertEquals(expectedValue, fieldItem.getValue())
assertEquals(expectedValue, fieldItem.getValue())
assertEquals(expectedValue, fieldItem.getValue())
assertEquals(expectedValue, fieldItem.getValue())
assertEquals(expectedValue, fieldItem.getValue())
assertEquals(expectedValue, fieldItem.getValue())
assertEquals(expectedValue, fieldItem.getValue())
assertEquals(expectedValue, fieldItem.getValue())
assertEquals(EXPECTED_VALUE, item.getValue())
assertEquals(EXPECTED_VALUE, value)
assertEquals("parentMethod", item.getValue())
assertArrayEquals(expectedAddresses, actualAddresses)
assertEquals(exceptionClass, argument.getValue().getClass())
assertEquals(message, argument.getValue().getMessage())
assertEquals("Lsome/class;", componentBase)
assertEquals("Lsome.class;", componentBase)
assertEquals("some.class", componentBase)
assertEquals("[[[[[Lsome/class;", componentType)
assertEquals("[[Lsome.class;", componentType)
assertEquals("some.class[][]", componentType)
assertEquals("some.package", ClassNameUtils.getPackageName("Lsome/package/Class;"))
assertEquals("", ClassNameUtils.getPackageName("LSomeClass;"))
assertEquals("", ClassNameUtils.getPackageName("SomeClass"))
assertEquals("", ClassNameUtils.getPackageName("SomeClass[]"))
assertEquals("", ClassNameUtils.getPackageName("[LSomeClass;"))
assertEquals("J", primitive)
assertEquals("J", primitive)
assertEquals("J", primitive)
assertEquals("[[[I", primitive)
assertEquals(3, actual)
assertEquals("java.lang.Object", ClassNameUtils.toFormat("Ljava/lang/Object;", TypeFormat.SOURCE))
assertEquals("java.lang.Object", ClassNameUtils.toFormat("java.lang.Object", TypeFormat.SOURCE))
assertEquals("java.lang.Object[]", ClassNameUtils.toFormat("[Ljava.lang.Object;", TypeFormat.SOURCE))
assertEquals("SomeClass", ClassNameUtils.toFormat("LSomeClass;", TypeFormat.SOURCE))
assertEquals("SomeClass", ClassNameUtils.toFormat("SomeClass", TypeFormat.SOURCE))
assertEquals("SomeClass[]", ClassNameUtils.toFormat("[LSomeClass;", TypeFormat.SOURCE))
assertEquals("[Ljava/lang/Object;", ClassNameUtils.toFormat("java.lang.Object[]", TypeFormat.INTERNAL))
assertEquals("I", ClassNameUtils.toFormat("int", TypeFormat.INTERNAL))
assertEquals("[I", ClassNameUtils.toFormat("int[]", TypeFormat.INTERNAL))
assertEquals("[Ljava/lang/Object;", ClassNameUtils.toFormat("[Ljava.lang.Object;", TypeFormat.INTERNAL))
assertEquals("[Ljava/lang/Object;", ClassNameUtils.toFormat("[Ljava/lang/Object;", TypeFormat.INTERNAL))
assertEquals("[Ljava.lang.Object;", ClassNameUtils.toFormat("java.lang.Object[]", TypeFormat.BINARY))
assertEquals("java.lang.Object", ClassNameUtils.toFormat("java.lang.Object", TypeFormat.BINARY))
assertEquals("java.lang.Object", ClassNameUtils.toFormat("Ljava/lang/Object;", TypeFormat.BINARY))
assertEquals("int", ClassNameUtils.toFormat("I", TypeFormat.BINARY))
assertEquals("[I", ClassNameUtils.toFormat("[I", TypeFormat.BINARY))
assertEquals(expected, actual)
assertEquals(expected, actual)
assertEquals(expected, actual)
assertArrayEquals(expected, (int[]) actual)
assertArrayEquals(expected, (int[][]) actual)
assertArrayEquals(expected, (String[][][]) actual)
assertEquals(expected, actual)
assertEquals(expected, actual)
assertEquals(3, intToObject.size())
assertEquals("one", intToObject.get(1))
assertEquals("two", intToObject.get(4))
assertEquals("three", intToObject.get(5))
assertEquals(2, intToObject.size())
assertEquals("two", intToObject.get(1))
assertEquals("three", intToObject.get(2))
assertEquals(2, typeNames.size())
assertEquals("typeRef1", typeNames.get(0))
assertEquals("typeRef2", typeNames.get(1))
assertEquals(3, registerSize)
assertEquals(true, Utils.castToPrimitive(Boolean.TRUE, "Z"))
assertEquals(false, Utils.castToPrimitive(Boolean.FALSE, "Ljava/lang/Boolean;"))
assertEquals((byte) 1, Utils.castToPrimitive(Boolean.TRUE, "B"))
assertEquals((byte) 0, Utils.castToPrimitive(Boolean.FALSE, "Ljava/lang/Byte;"))
assertEquals(1, Utils.castToPrimitive(Boolean.TRUE, "I"))
assertEquals(0, Utils.castToPrimitive(Boolean.FALSE, "Ljava/lang/Integer;"))
assertEquals((short) 1, Utils.castToPrimitive(Boolean.TRUE, "S"))
assertEquals((short) 0, Utils.castToPrimitive(Boolean.FALSE, "Ljava/lang/Short;"))
assertEquals(value1, Utils.castToPrimitive(value1, "C"))
assertEquals(value2, Utils.castToPrimitive(Character.valueOf(value2), "Ljava/lang/Character;"))
assertEquals(true, Utils.castToPrimitive((char) 1, "Z"))
assertEquals(false, Utils.castToPrimitive((char) 0, "Ljava/lang/Boolean;"))
assertEquals((byte) value1, Utils.castToPrimitive(value1, "B"))
assertEquals((byte) value2, Utils.castToPrimitive(value2, "Ljava/lang/Byte;"))
assertEquals((int) value1, Utils.castToPrimitive(value1, "I"))
assertEquals((int) value2, Utils.castToPrimitive(value2, "Ljava/lang/Integer;"))
assertEquals((short) value1, Utils.castToPrimitive(value1, "S"))
assertEquals((short) value2, Utils.castToPrimitive(value2, "Ljava/lang/Short;"))
assertEquals((byte) value1, Utils.castToPrimitive(Byte.valueOf((byte) value1), "B"))
assertEquals((byte) value2, Utils.castToPrimitive(Byte.valueOf((byte) value2), "Ljava/lang/Byte;"))
assertEquals((double) value1, Utils.castToPrimitive(Double.valueOf(value1), "D"))
assertEquals((double) value2, Utils.castToPrimitive(Double.valueOf(value2), "Ljava/lang/Double;"))
assertEquals((float) value1, Utils.castToPrimitive(Float.valueOf(value1), "F"))
assertEquals((float) value2, Utils.castToPrimitive(Float.valueOf(value2), "Ljava/lang/Float;"))
assertEquals(value1, Utils.castToPrimitive(value1, "I"))
assertEquals(value2, Utils.castToPrimitive(value2, "Ljava/lang/Integer;"))
assertEquals((long) value1, Utils.castToPrimitive(Long.valueOf(value1), "J"))
assertEquals((long) value2, Utils.castToPrimitive(Long.valueOf(value2), "Ljava/lang/Long;"))
assertEquals((short) value1, Utils.castToPrimitive(Short.valueOf((short) value1), "S"))
assertEquals((short) value2, Utils.castToPrimitive(Short.valueOf((short) value2), "Ljava/lang/Short;"))
assertEquals((char) value1, Utils.castToPrimitive(value1, "C"))
assertEquals((char) value2, Utils.castToPrimitive(value2, "Ljava/lang/Character;"))
assertEquals(true, Utils.castToPrimitive(1, "Z"))
assertEquals(false, Utils.castToPrimitive(0, "Ljava/lang/Boolean;"))
