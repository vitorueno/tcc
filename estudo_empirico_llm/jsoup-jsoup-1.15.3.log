assertNotNull(files)
assertTrue(files.length > 10)
assertNotNull(files)
assertTrue(files.length > 10)
assertNotNull(doc)
assertNotNull(doc)
assertNotNull(xmlDoc)
assertNotNull(doc)
assertNotNull(doc)
Validate.fail("Should not be reachable")
assertTrue(runner.isInterrupted())
assertTrue(body[0].length() > 0)
assertTrue(body[0].contains("<p>Are you still there?"))
assertTrue(runner.isInterrupted())
assertEquals(0, body[0].length())
assertTrue(threw)
assertEquals("outatime", h1.text())
assertEquals("outatime", h1.text())
assertEquals(0, catcher.exceptionCount.get())
assertEquals(numThreads - 1, catcher.multiThreadExceptions.get())
assertEquals(numThreads - 1, catcher.exceptionCount.get())
fail("Should not be reachable", "A execução falhou por uma causa deliberada")
assertEquals("Hello, World!", p.text())
assertTrue(doc.title().contains("Environment Variables"))
assertTrue(doc.title().contains("Environment Variables"))
assertTrue(threw)
assertTrue(threw)
assertEquals(404, res.statusCode())
assertEquals("Webserver Environment Variables", doc.title())
assertEquals("POST", ihVal("Method", doc))
assertEquals("gzip", ihVal("Accept-Encoding", doc))
assertEquals("auth=token", ihVal("Cookie", doc))
assertEquals("度一下", ihVal("百", doc))
assertEquals("Jsoup, Jonathan", ihVal("uname", doc))
assertEquals("application/x-www-form-urlencoded; charset=UTF-8", ihVal("Content-Type", doc))
assertTrue(ihVal("Content-Type", doc).contains(MULTIPART_FORM_DATA))
assertTrue(ihVal("Content-Type", doc).contains("boundary"))
assertEquals("Jsoup, Jonathan", ihVal("uname", doc))
assertEquals("度一下", ihVal("百", doc))
assertEquals("hello", ihVal("Random-Header-name", doc))
assertEquals("cross-site", ihVal("Sec-Fetch-Site", doc))
assertEquals("cors", ihVal("Sec-Fetch-Mode", doc))
assertEquals("hello", ihVal("Random-Header-name", doc))
assertEquals("cross-site", ihVal("Sec-Fetch-Site", doc))
assertEquals("cors", ihVal("Sec-Fetch-Mode", doc))
assertEquals("POST", ihVal("Method", doc))
assertEquals("application/json", ihVal("Content-Type", doc))
assertEquals("foo=true", ihVal("Query String", doc))
assertEquals(body, ihVal("Post Data", doc))
assertEquals("POST", ihVal("Method", doc))
assertEquals("application/json", ihVal("Content-Type", doc))
assertEquals(body, ihVal("Post Data", doc))
assertEquals("POST", ihVal("Method", doc))
assertEquals("text/plain", ihVal("Content-Type", doc))
assertEquals(body, ihVal("Post Data", doc))
assertEquals("POST", ihVal("Method", doc))
assertEquals("uname=Jsoup&uname=Jonathan&%E7%99%BE=%E5%BA%A6%E4%B8%80%E4%B8%8B", ihVal("Query String", doc))
assertEquals(body, ihVal("Post Data", doc))
assertEquals("what=the&what=about+%26+me%3F", ihVal("Query String", doc))
assertEquals("the, about & me?", ihVal("what", doc))
assertEquals("Mozilla", ihVal("User-Agent", doc))
assertEquals("http://example.com", ihVal("Referer", doc))
assertEquals("PUT", ihVal("Method", doc))
assertEquals("gzip", ihVal("Accept-Encoding", doc))
assertEquals("auth=token", ihVal("Cookie", doc))
assertEquals("4", ihVal("Parts", res))
assertEquals("application/octet-stream", ihVal("Part secondPart ContentType", res))
assertEquals("secondPart", ihVal("Part secondPart Name", res))
assertEquals("google-ipod.html.gz", ihVal("Part secondPart Filename", res))
assertEquals("12212", ihVal("Part secondPart Size", res))
assertEquals("image/jpeg", ihVal("Part firstPart ContentType", res))
assertEquals("firstPart", ihVal("Part firstPart Name", res))
assertEquals("thumb.jpg", ihVal("Part firstPart Filename", res))
assertEquals("1052", ihVal("Part firstPart Size", res))
assertEquals("Jay", ihVal("firstname", res))
assertEquals("Soup", ihVal("surname", res))
assertTrue(doc.title().contains("Environment"))
assertTrue(doc2.title().contains("Environment"))
assertTrue(body.contains("Environment"))
assertTrue(bytes.length > 100)
assertTrue(doc.title().contains("Environment"))
assertEquals("asdfg123", cookies.get("token"))
assertEquals("jhy", cookies.get("uid"))
assertEquals("token=asdfg123; uid=jhy", ihVal("Cookie", doc))
assertEquals(0, res.cookies().size())
assertEquals(echoUrl, doc.location())
assertEquals("True", ihVal("Cookie: LetMeIn", doc))
assertEquals("Yes", ihVal("Cookie: DoesItWork", doc))
assertEquals("deflate", res.header("Content-Encoding"))
assertEquals("Hello, World!", doc.selectFirst("p").text())
assertEquals("Something", document.title())
assertEquals(0, document.select("p").size())
assertEquals(0, doc.select("p").size())
assertEquals("Hello, World!", p.text())
assertEquals(HelloServlet.Url, doc.location())
assertTrue(threw)
assertEquals(EchoServlet.Url, doc.location())
assertEquals("GET", ihVal("Method", doc))
assertNull(ihVal("Hello", doc))
assertEquals(EchoServlet.Url, doc.location())
assertEquals("POST", ihVal("Method", doc))
assertEquals("there", ihVal("Hello", doc))
assertEquals("UTF-8", con.response().charset())
assertEquals("OK", doc.title())
assertTrue(threw)
assertNotNull(title)
assertEquals("jsoup RSS news", title.text())
assertEquals("channel", title.parent().nodeName())
assertEquals("", doc.title())
assertEquals(3, doc.select("link").size())
assertEquals("application/rss+xml", con.response().contentType())
assertTrue(doc.parser().getTreeBuilder() instanceof XmlTreeBuilder)
assertEquals(Document.OutputSettings.Syntax.xml, doc.outputSettings().syntax())
assertEquals(1052, bytes.length)
assertEquals(14766, text.length())
assertEquals(text, docFromLocalServer.body().text())
assertEquals(text, docFromFileRead.body().text())
assertEquals(1, forms.size())
assertNotNull(fileData)
assertEquals(ihVal("Method", doc), "POST")
assertEquals(ihVal("Part _file Filename", doc), "check.html")
assertEquals(ihVal("Part _file Name", doc), "_file")
assertEquals(ihVal("_function", doc), "tidy")
assertTrue(req.parser().getTreeBuilder() instanceof XmlTreeBuilder)
assertEquals("<doc><val>One<val>Two</val>Three</val></doc>\n", doc.outerHtml())
assertEquals(con.response().contentType(), contentType)
assertTrue(req.parser().getTreeBuilder() instanceof HtmlTreeBuilder)
assertEquals("<html> <head></head> <body> <doc> <val> One <val> Two </val>Three </val> </doc> </body> </html>", StringUtil.normaliseWhitespace(doc.outerHtml()))
assertEquals("text/html;charset=utf-8", res.header("Content-Type"))
assertEquals("no-cache, no-store", res.header("Cache-Control"))
assertEquals(2, header.size())
assertEquals("no-cache", header.get(0))
assertEquals("no-store", header.get(1))
assertEquals("text/xml", response.header("Content-Type"))
assertEquals("", response.body())
assertEquals("", doc.text())
assertEquals(url, wDoc.getDocumentURI())
assertTrue(html.contains("Upload"))
assertEquals("http://example.com/foo.jpg", doc.select("img").first().absUrl("src"))
assertEquals(actualDocText, defaultRes.parse().text().length())
assertEquals(49165, smallRes.parse().text().length())
assertEquals(196577, mediumRes.parse().text().length())
assertEquals(actualDocText, largeRes.parse().text().length())
assertEquals(actualDocText, unlimitedRes.parse().text().length())
assertEquals("Large HTML", doc1.title())
assertEquals("Large HTML", doc2.title())
assertEquals(actualDocText, defaultRes.body().length())
assertEquals(50 * 1024, smallRes.body().length())
assertEquals(200 * 1024, mediumRes.body().length())
assertEquals(actualDocText, largeRes.body().length())
assertEquals(actualDocText, unlimitedRes.body().length())
assertEquals("GBK", doc.outputSettings().charset().displayName())
assertEquals("GBK", res.charset())
assertEquals("text/html;charset=gbk", res.contentType())
assertTrue(threw)
assertEquals("", doc.title())
assertTrue(doc.title().contains("jsoup"))
assertTrue(doc.title().contains("jsoup"))
assertEquals("https://jsoup.org/", con.response().url().toString())
assertEquals("https://jsoup.org/", res.url().toExternalForm())
assertEquals(Connection.Method.GET, res.method())
assertTrue(doc.title().contains("Google"))
assertTrue(doc.title().contains("HTML Tidy Online"))
assertTrue(doc.title().contains("OK"))
assertEquals(doc.location(), "http://direct.infohound.net/tools/ok.html")
assertEquals(doc.location(), "http://esportspenedes.cat/ep/index.php")
assertTrue(doc.title().contains("Google"))
assertTrue(true)
assertEquals(500, res.statusCode())
assertEquals("Application Error", res.statusMessage())
assertEquals("Woops", doc.select("h1").first().text())
assertEquals(500, res.statusCode())
assertEquals("Application Error", res.statusMessage())
assertEquals(200, res.statusCode())
assertEquals("All Good", res.statusMessage())
assertEquals(200, res.statusCode())
assertEquals(200, res.statusCode())
assertEquals(302, res.statusCode())
assertEquals("http://jsoup.org", res.header("Location"))
assertEquals("asdfg123", res.cookie("token"))
assertEquals("token=asdfg123; uid=jhy", ihVal("HTTP_COOKIE", doc))
assertTrue(threw)
assertEquals("text/html; charset=UFT8", res.header("Content-Type"))
assertNull(res.charset())
assertTrue(doc.text().contains("Hello!"))
assertEquals("UTF-8", res.charset())
assertEquals("ISO-8859-1", res.charset())
assertEquals("ISO-8859-1", res.charset())
assertEquals("UTF-8", res.charset())
assertEquals("UTF-8", res.charset())
assertEquals("ISO-8859-1", res.charset())
assertEquals("https://jsoup.org/", doc.location())
assertTrue(doc.title().contains("jsoup"))
assertTrue(doc.title().contains("jsoup"))
assertTrue(caught)
assertTrue(doc.title().contains("jsoup"))
assertTrue(caught)
assertNull(res1.charset())
assertEquals("windows-1252", doc1.charset().displayName())
assertEquals("Cost is €100", doc1.select("p").text())
assertTrue(doc1.text().contains("€"))
assertNull(res2.charset())
assertEquals("UTF-8", doc2.charset().displayName())
assertEquals("Cost is �100", doc2.select("p").text())
assertTrue(doc2.text().contains("�"))
assertNull(res3.charset())
assertEquals("windows-1252", res3.charset())
assertEquals("windows-1252", doc3.charset().displayName())
assertEquals("Cost is €100", doc3.select("p").text())
assertTrue(doc3.text().contains("€"))
assertEquals(doc.body().text(), "\uD83D\uDCA9!")
assertEquals(doc.location(), urlEscaped)
assertEquals("/tools/test\uD83D\uDCA9.html", res2.header("Location"))
assertEquals("http://infohound.net/tools/q.pl?q=one%20two", doc.location())
assertEquals("http://infohound.net/tools/q.pl?q=one%20two", doc.location())
assertEquals("\uD83D\uDCA9!", doc.body().text())
assertEquals(urlEscaped, doc.location())
assertEquals("http://www.omroepbrabant.nl/?news/2474781303/Gestrande+ree+in+Oss+niet+verdoofd,+maar+doodgeschoten+%E2%80%98Dit+kan+gewoon+niet,+bizar%E2%80%99+[VIDEO].aspx", doc.location())
assertEquals("https://saudi.souq.com/sa-en/%D8%AE%D8%B2%D9%86%D8%A9-%D8%A2%D9%85%D9%86%D8%A9-3-%D8%B7%D8%A8%D9%82%D8%A7%D8%AA-%D8%A8%D9%86%D8%B8%D8%A7%D9%85-%D9%82%D9%81%D9%84-%D8%A5%D9%84%D9%83%D8%AA%D8%B1%D9%88%D9%86%D9%8A-bsd11523-6831477/i/?ctype=dsrch", doc.location())
assertEquals(200, res.statusCode())
assertEquals("gąska - Szukaj w Google", doc.title())
assertEquals("Index of /archiv/TV/A/%23No.Title", doc.title())
assertEquals("M2J | Sv.stargate Wiki | FANDOM powered by Wikia", doc.title())
assertEquals(110160, doc.select("dd").size())
assertTrue(System.currentTimeMillis() - start < 1000)
assertEquals("石嘴山市环境保护局", doc.title())
assertEquals("https://xn--rksmrgs-5wao1o.josefsson.org/", doc.location())
assertTrue(doc.title().contains("Räksmörgås.josefßon.org"))
assertEquals("The board’s next fear: the female quota", doc.title())
assertEquals("en", doc.select("html").attr("xml:lang"))
assertEquals(17, articleBody.size())
assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title())
assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim())
assertEquals("/entertainment/horoscopes", a.attr("href"))
assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href"))
assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href"))
assertEquals(hs.attr("href"), hs.attr("abs:href"))
assertEquals("ipod - Google Search", doc.title())
assertEquals(12, results.size())
assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href"))
assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href"))
assertEquals("Yahoo! JAPAN", doc.title())
assertEquals("http://www.yahoo.co.jp/_ylh=X3oDMTB0NWxnaGxsBF9TAzIwNzcyOTYyNjUEdGlkAzEyBHRtcGwDZ2Ex/t/2322m2", a.attr("abs:href"))
assertEquals("全国、人気の駅ランキング", a.text())
assertEquals("百度一下", submit.attr("value"))
assertEquals("su", submit.id())
assertEquals("http://news.baidu.com", newsLink.absUrl("href"))
assertEquals("GB2312", doc.outputSettings().charset().displayName())
assertEquals("<title>百度一下，你就知道      </title>", doc.select("title").outerHtml())
assertEquals("<title>&#x767e;&#x5ea6;&#x4e00;&#x4e0b;&#xff0c;&#x4f60;&#x5c31;&#x77e5;&#x9053;      </title>", doc.select("title").outerHtml())
assertEquals("GB2312", doc.outputSettings().charset().displayName())
assertEquals("<title>百度一下，你就知道</title>", doc.select("title").outerHtml())
assertEquals("新", doc.text())
assertEquals("GB2312", doc.outputSettings().charset().displayName())
assertEquals("UTF-8", doc.outputSettings().charset().displayName())
assertNotEquals("新", doc.text())
assertEquals("UTF-8", doc.outputSettings().charset().displayName())
assertEquals("新", doc.text())
assertEquals("UTF-8", doc.outputSettings().charset().displayName())
assertEquals("As BP Lays Out Future, It Will Not Include Hayward", headline.text())
assertEquals("In July, GM said its electric Chevrolet Volt will be sold in the United States at $41,000 -- $8,000 more than its nearest competitor, the Nissan Leaf.", p.text())
assertEquals(2, form.children().size())
assertEquals("UTF-8", doc.outputSettings().charset().name())
assertEquals("XWiki Jetty HSQLDB 12.1-SNAPSHOT", doc.select("#xwikiplatformversion").text())
assertEquals(wantHtml, doc.select("[data-id=userdirectory]").outerHtml())
assertEquals("XWiki Jetty HSQLDB 12.1-SNAPSHOT", doc.select("#xwikiplatformversion").text())
assertEquals(0, errors.size())
assertTrue(doc.select("[data-id=userdirectory]").outerHtml().startsWith(wantHtml))
assertEquals("XWiki Jetty HSQLDB 12.1-SNAPSHOT", doc.select("#xwikiplatformversion").text())
assertTrue(doc.select("[data-id=userdirectory]").outerHtml().startsWith(wantHtml))
assertEquals("XWiki Jetty HSQLDB 12.1-SNAPSHOT", doc.select("#xwikiplatformversion").text())
assertEquals(wantHtml, doc.select("[data-id=userdirectory]").outerHtml())
assertEquals("XWiki Jetty HSQLDB 12.1-SNAPSHOT", doc.select("#xwikiplatformversion").text())
assertEquals(0, doc1.select("table tr").size())
assertEquals(0, doc2.select("table tr").size())
assertEquals(1, cookies.size())
assertEquals("Root", cookies.get("One"))
assertEquals(userAgent, keyText("User-Agent", echo))
assertEquals(0, doc4.select("table tr").size())
assertEquals("Qux", doc5Bar.first().text())
assertEquals(2, doc.select("table tr").size())
assertEquals(2, doc3Els.size())
assertEquals("CookieServlet", doc3Els.get(0).text())
assertEquals("Root", doc3Els.get(1).text())
assertEquals(2, echoEls.size())
assertEquals("EchoServlet", echoEls.get(0).text())
assertEquals("Root", echoEls.get(1).text())
assertEquals(EchoServlet.Url, doc1.location())
assertEquals(xmlVal, doc1.html())
assertTrue(doc2.html().startsWith("<html>"))
assertEquals(xmlVal, doc3.html())
assertEquals("<p><opentag openattr=\"\">Hello</opentag></p>", TextUtil.stripNewlines(openClean))
assertEquals("<p>Hello</p>", clean)
assertNotEquals(p1, p2)
assertSame(script1, script2)
assertEquals(p1, p2)
assertEquals(p1, p2)
assertSame(p1, p2)
assertTrue(div.isBlock())
assertTrue(div.formatAsBlock())
assertTrue(p.isBlock())
assertTrue(img.isInline())
assertTrue(img.isSelfClosing())
assertEquals(foo, foo2)
assertTrue(foo.isInline())
assertTrue(foo.formatAsBlock())
assertTrue(Tag.isKnownTag("div"))
assertEquals("<doc id=\"2\" href=\"/bar\">Foo <br /><link>One</link><link>Two</link></doc>", TextUtil.stripNewlines(doc.html()))
assertEquals(doc.getElementById("2").absUrl("href"), "http://foo.com/bar")
assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", TextUtil.stripNewlines(doc.html()))
assertEquals("<!DOCTYPE HTML><!-- a comment -->One <qux />Two", TextUtil.stripNewlines(doc.html()))
assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", TextUtil.stripNewlines(doc.html()))
assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", TextUtil.stripNewlines(xmlDoc.html()))
assertNotEquals(htmlDoc, xmlDoc)
assertEquals(xmlDoc, autoXmlDoc)
assertEquals(1, htmlDoc.select("head").size())
assertEquals(0, xmlDoc.select("head").size())
assertEquals(0, autoXmlDoc.select("head").size())
assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", TextUtil.stripNewlines(doc.html()))
assertEquals("<br>one<br>", htmlDoc.body().html())
assertEquals("<br>one</br>", xmlDoc.html())
assertEquals("<?xml encoding=\"UTF-8\"?><body>One</body><!-- comment -->", doc.outerHtml())
assertEquals("#declaration", doc.childNode(0).nodeName())
assertEquals("#comment", doc.childNode(2).nodeName())
assertEquals(3, nodes.size())
assertEquals("http://example.com/foo/", nodes.get(0).absUrl("src"))
assertEquals("one", nodes.get(0).nodeName())
assertEquals("Two", ((TextNode) nodes.get(1)).text())
assertEquals(Syntax.xml, doc.outputSettings().syntax())
assertEquals("<img src=\"asdf\" onerror=\"alert(1)\" x=\"\" />", xmlDoc.html())
assertEquals("ISO-8859-1", doc.charset().name())
assertEquals("<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?><data>äöåéü</data>", TextUtil.stripNewlines(doc.html()))
assertEquals("1", decl.attr("version"))
assertEquals("UTF-8", decl.attr("encoding"))
assertEquals("else", decl.attr("something"))
assertEquals("version=\"1\" encoding=\"UTF-8\" something=\"else\"", decl.getWholeDeclaration())
assertEquals("<?xml version=\"1\" encoding=\"UTF-8\" something=\"else\"?>", decl.outerHtml())
assertEquals("myProcessingInstruction", decl.name())
assertTrue(decl.hasAttr("My"))
assertEquals("<?myProcessingInstruction My Processing instruction.?>", decl.outerHtml())
assertEquals("<?XML version=\"1\" encoding=\"UTF-8\" something=\"else\"?>", doc.outerHtml())
assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + "<html>\n" + " <head></head>\n" + " <body></body>\n" + "</html>", document.outerHtml())
assertEquals("<CHECK>One</CHECK><TEST ID=\"1\">Check</TEST>", TextUtil.stripNewlines(doc.html()))
assertEquals("<One>One<Two ID=\"2\">Two</Two></One>", TextUtil.stripNewlines(doc.html()))
assertEquals(xml, doc.html())
assertEquals("<test id=\"1\">Check</test>", TextUtil.stripNewlines(doc.html()))
assertEquals("<div>test</div><p></p>", document.html())
assertEquals("<html>\n <foo><&amp;", div.text())
assertEquals(0, div.children().size())
assertEquals(1, div.childNodeSize())
assertEquals("<div id=\"1\"><![CDATA[\n<html>\n <foo><&amp;]]></div>", div.outerHtml())
assertEquals("\n<html>\n <foo><&amp;", cdata.text())
assertEquals(xml, doc.outerHtml())
assertEquals("//\n\n  foo();\n//", doc.selectFirst("script").text())
assertEquals("One", doc.select("val").text())
assertEquals("<script> var a=\"<!--?\"; var b=\"?-->\"; </script>", doc.html())
assertEquals("<p One=\"One\" ONE=\"Two\" one=\"Three\" two=\"Six\" Two=\"Eight\">Text</p>", doc.selectFirst("p").outerHtml())
assertNull(treeBuilder.reader)
assertNull(treeBuilder.tokeniser)
assertEquals(doc.outputSettings().syntax(), Syntax.xml)
assertEquals(doc.outputSettings().escapeMode(), Entities.EscapeMode.xhtml)
assertEquals("<p one=\"&lt;two>©\">Three</p>", doc.html())
assertEquals(doc.outputSettings().syntax(), Syntax.xml)
assertEquals("<p one=\"&lt;two>&copy;\">Three</p>", doc.html())
assertEquals(Syntax.xml, doc.outputSettings().syntax())
assertEquals("<body style=\"color: red\" name=\"\"><div></div></body>", out)
assertEquals("foo", t1.getName())
assertEquals("FOO", t3.getName())
assertSame(t1, t2)
assertSame(t3, t4)
assertEquals("p", p.tagName())
assertEquals("foo.png", img.attr("src"))
assertEquals("img", img.tagName())
assertEquals("p", p.tagName())
assertEquals("foo > bar", p.attr("class"))
assertEquals("<p one=\"One\" two=\"two\">Text</p>", p.outerHtml())
assertEquals(1, parser.getErrors().size())
assertEquals("Dropped duplicate attribute(s) in tag [p]", parser.getErrors().get(0).getErrorMessage())
assertEquals("<p One=\"One\" one=\"Three\" two=\"Four\" Two=\"Six\">Text</p>", doc.selectFirst("p").outerHtml())
assertEquals("<p a>One<a></a></p><p><a>Something</a></p><a>Else</a>", TextUtil.stripNewlines(doc.body().html()))
assertEquals("<p .....></p>", doc.body().html())
assertEquals(" <table><tr><td></table> ", comment.getData())
assertEquals("Hello", text.getWholeText())
assertEquals("Hello", p.text())
assertEquals("Hello", text.getWholeText())
assertEquals(" <tr><td>", comment.getData())
assertEquals("--", comment.getData())
assertEquals(0, parser.getErrors().size())
assertEquals(0, doc.getElementsByTag("p").size())
assertEquals("", doc.text())
assertEquals("", doc.text())
assertEquals("", doc.text())
assertEquals("one", t.text())
assertEquals("two", doc.select("p").get(1).text())
assertEquals(2, options.size())
assertEquals("One", options.first().text())
assertEquals("TwoThree", options.last().text())
assertEquals(0, parser.getErrors().size())
assertEquals("<div><a name=\"top\"></a><p id=\"1\">Hello</p></div>", TextUtil.stripNewlines(doc.body().html()))
assertEquals(1, doc.children().size())
assertEquals(2, doc.child(0).children().size())
assertEquals(3, head.children().size())
assertEquals(1, body.children().size())
assertEquals("keywords", head.getElementsByTag("meta").get(0).attr("name"))
assertEquals(0, body.getElementsByTag("meta").size())
assertEquals("jsoup", doc.title())
assertEquals("Hello world", body.text())
assertEquals("Hello world", body.children().get(0).text())
assertEquals("foo bar baz", doc.text())
assertEquals("Surf & Turf", div.attr("title"))
assertEquals("Reef & Beef", div.text())
assertEquals("font-family: bold", tels.get(0).data())
assertEquals("", tels.get(0).text())
assertEquals("Hello There", doc.text())
assertEquals("obj.insert('<a rel=\"none\" />');\ni++;", doc.data())
assertEquals("<html><head></head><body>pre <script>inner</script> aft</body></html>", TextUtil.stripNewlines(doc.html()))
assertEquals("Hello", els.text())
assertEquals("Hello", els.val())
assertEquals(expect, el.text())
assertEquals(expect, el.val())
assertEquals(expect, el.html())
assertEquals("<textarea>\n\t" + expect + "\n</textarea>", el.outerHtml())
assertEquals(expect, el.data())
assertEquals("One\n\tTwo\n\tThree", el.html())
assertEquals("<script>" + expect + "</script>", el.outerHtml())
assertEquals(0, ol.size())
assertEquals(2, lis.size())
assertEquals("body", lis.first().parent().tagName())
assertEquals(0, doc2.select("ul").size())
assertEquals(1, doc2.select("ol").size())
assertEquals(2, doc2.select("ol li").size())
assertEquals(2, doc2.select("ol li p").size())
assertEquals(1, doc2.select("ol li").get(0).children().size())
assertEquals("Hello<p>There</p><p>now</p>", TextUtil.stripNewlines(doc.body().html()))
assertEquals("<table><tbody><tr><td>1</td></tr><tr><td>2</td></tr><tr><td><table><tbody><tr><td>3</td><td>4</td></tr></tbody></table></td></tr><tr><td>5</td></tr></tbody></table>", TextUtil.stripNewlines(doc.body().html()))
assertEquals("<table><colgroup><col></colgroup><colgroup><col><col><col></colgroup><thead><tr><th></th><th>2008</th><th>2007</th><th>2006</th></tr></thead><tbody><tr><th scope=\"rowgroup\">Research and development</th><td>$ 1,109</td><td>$ 782</td><td>$ 712</td></tr><tr><th scope=\"row\">Percentage of net sales</th><td>3.4%</td><td>3.3%</td><td>3.7%</td></tr></tbody><tbody><tr><th scope=\"rowgroup\">Selling, general, and administrative</th><td>$ 3,761</td><td>$ 2,963</td><td>$ 2,433</td></tr><tr><th scope=\"row\">Percentage of net sales</th><td>11.6%</td><td>12.3%</td><td>12.6%</td></tr></tbody></table>", TextUtil.stripNewlines(doc.body().html()))
assertEquals("<table><tbody><tr><td>aaa</td><td>bbb</td></tr></tbody></table>", TextUtil.stripNewlines(doc.body().html()))
assertEquals("<table><caption>A caption</caption><tbody><tr><td>One</td><td>Two</td></tr></tbody></table>", TextUtil.stripNewlines(doc.body().html()))
assertEquals("<table><tbody><tr><td>One</td><td><table><tbody><tr><td>Two</td></tr></tbody></table><table><tbody><tr><td>Three</td></tr></tbody></table></td></tr></tbody></table>", TextUtil.stripNewlines(doc.body().html()))
assertEquals("<table><tbody><tr><td>One</td><td><table><tbody><tr><td>Two</td></tr></tbody></table></td><td>Three</td></tr></tbody></table>", TextUtil.stripNewlines(doc.body().html()))
assertEquals("http://foo/2/", doc.baseUri())
assertEquals(3, anchors.size())
assertEquals("http://foo/2/", anchors.get(0).baseUri())
assertEquals("http://foo/2/", anchors.get(1).baseUri())
assertEquals("http://foo/2/", anchors.get(2).baseUri())
assertEquals("http://foo/2/1", anchors.get(0).absUrl("href"))
assertEquals("http://foo/2/3", anchors.get(1).absUrl("href"))
assertEquals("http://foo/4", anchors.get(2).absUrl("href"))
assertEquals("https://example.net/img.jpg", el.absUrl("src"))
assertEquals("<html>\n <foo><&amp;", div.text())
assertEquals(0, div.children().size())
assertEquals(1, div.childNodeSize())
assertEquals("<html>\n <foo><&amp;", div.text())
assertEquals(0, div.children().size())
assertEquals(1, div.childNodeSize())
assertEquals("<div id=\"1\"><![CDATA[\n<html>\n <foo><&amp;]]>\n</div>", div.outerHtml())
assertEquals("\n<html>\n <foo><&amp;", cdata.text())
assertEquals(cdata, node.text())
assertEquals("", script.text())
assertEquals(data, script.data())
assertEquals(html, script.outerHtml())
assertEquals(data, dataNode.getWholeData())
assertEquals(1, doc.body().childNodeSize())
assertEquals("One ", ((TextNode) nodes.get(0)).getWholeText())
assertEquals("Two <&", ((TextNode) nodes.get(1)).getWholeText())
assertEquals("Two <&", ((CDataNode) nodes.get(1)).getWholeText())
assertEquals(" Three", ((TextNode) nodes.get(2)).getWholeText())
assertEquals(h, p.outerHtml())
assertEquals("One ", nodes.get(0).text())
assertEquals(" Two <& ", nodes.get(1).text())
assertEquals(" Three", nodes.get(2).text())
assertEquals("Hello < There <&>", doc.select("div").first().text())
assertEquals(2, foos.size())
assertEquals("bar", foos.first().attr("title"))
assertEquals("qux", foos.last().attr("title"))
assertEquals("there", foos.last().text())
assertEquals(h, TextUtil.stripNewlines(out))
assertEquals("<body><!-- comment --><p><a href=\"foo\">One</a></p></body>", TextUtil.stripNewlines(doc.body().outerHtml()))
assertEquals("http://example.com/foo", doc.select("a").first().absUrl("href"))
assertEquals(expectedHtml, doc.body().html())
assertEquals(expectedHtml, doc.body().html())
assertEquals("<input>\n<table></table>", doc.body().html())
assertEquals("<foo:bar id=\"1\" /><abc:def id=\"2\">Foo<p>Hello</p></abc:def><foo:bar>There</foo:bar>", TextUtil.stripNewlines(doc.body().html()))
assertEquals("<div id=\"1\"></div><script src=\"/foo\"></script><div id=\"2\"><img><img></div><a id=\"3\"></a><i></i><foo /><foo>One</foo><hr> hr text <hr> hr text two", TextUtil.stripNewlines(doc.body().html()))
assertEquals("<html><head><noframes></noframes><meta name=\"foo\"></head><body>One</body></html>", TextUtil.stripNewlines(doc.html()))
assertEquals("<html><head><style></style><meta name=\"foo\"></head><body>One</body></html>", TextUtil.stripNewlines(doc.html()))
assertEquals("<html><head><title></title><meta name=\"foo\"></head><body>One</body></html>", TextUtil.stripNewlines(doc.html()))
assertEquals("<html><head></head><body><p>One</p><iframe id=\"1\"></iframe><p>Two</p></body></html>", TextUtil.stripNewlines(doc.html()))
assertEquals("<a href=\"/\">link</a>", doc.body().html())
assertEquals(3, doc.select("p").size())
assertEquals(3, doc.body().children().size())
assertEquals(0, doc.select("dl").size())
assertEquals(4, doc.select("dt, dd").size())
assertEquals(2, dts.size())
assertEquals("Zug", dts.get(1).nextElementSibling().text())
assertEquals("dt", doc.select("#1").first().parent().tagName())
assertEquals("dd", doc.select("#2").first().parent().tagName())
assertEquals("<dl><dt><div id=\"1\">Term</div></dt><dd><div id=\"2\">Def</div></dd></dl>", TextUtil.stripNewlines(doc.body().html()))
assertEquals("<html><head><script></script><noscript></noscript></head><frameset><frame src=\"foo\"><frame src=\"foo\"></frameset></html>", TextUtil.stripNewlines(doc.html()))
assertEquals("<html><head><title>One</title></head><frameset><frame><frame></frameset></html>", TextUtil.stripNewlines(doc.html()))
assertEquals("Deprecated", a.text())
assertEquals("font", a.child(0).tagName())
assertEquals("b", a.child(0).child(0).tagName())
assertEquals("/foo", a.attr("href"))
assertEquals("http://example.com/foo", a.attr("abs:href"))
assertEquals("<!doctype html><html><head></head><body>OneTwoThree<link>FourFive Six Seven</body></html>", TextUtil.stripNewlines(doc.html()))
assertEquals("<html><head></head><body></body></html>", TextUtil.stripNewlines(doc.html()))
assertEquals("<html><head></head><body><span class=\"foo\">bar</span></body></html>", TextUtil.stripNewlines(doc.html()))
assertEquals("<html><head></head><body class=\"name\"><font face=\"Arial\"><div>One</div></font></body></html>", TextUtil.stripNewlines(doc.html()))
assertEquals("gb2312", doc.select("meta").attr("charset"))
assertEquals("<h1>Hello</h1><h2>There <hgroup><h1>Another</h1><h2>headline</h2></hgroup><hgroup><h1>More</h1><p>stuff</p></hgroup></h2>", TextUtil.stripNewlines(doc.body().html()))
assertEquals("<abc_def id=\"1\">Hello</abc_def> <abc-def>There</abc-def>", TextUtil.stripNewlines(doc.body().html()))
assertEquals("<h1>Hello <div>There</div> now</h1><h2>More</h2><h3>Content</h3>", TextUtil.stripNewlines(doc.body().html()))
assertEquals("<span>Hello <div>there</div> <span>now</span></span>", TextUtil.stripNewlines(doc.body().html()))
assertEquals("<html><head><noscript>&lt;img src=\"foo\"&gt;</noscript></head><body><p>Hello</p></body></html>", TextUtil.stripNewlines(doc.html()))
assertEquals("<a>Hello <div>there</div> <span>now</span></a>", TextUtil.stripNewlines(doc.body().html()))
assertEquals("<font>Hello <div>there</div> <span>now</span></font>", TextUtil.stripNewlines(doc.body().html()))
assertEquals("<p>1<b>2<i>3</i></b><i>4</i>5</p>", doc.body().html())
assertEquals("<b>1</b>\n<p><b>2</b>3</p>", doc.body().html())
assertEquals(StringUtil.normaliseWhitespace(w), StringUtil.normaliseWhitespace(doc.body().html()))
assertEquals("<b></b><b>bbb</b><table><tbody><tr><td>aaa</td></tr></tbody></table><b>ccc</b>", TextUtil.stripNewlines(doc.body().html()))
assertEquals(want, doc.html())
assertEquals(want, doc.body().html())
assertEquals("<p><b class=\"one\">One <i>Two <b>Three</b></i></b></p>\n<p><b class=\"one\"><i><b>Hello</b></i></b></p>", doc.body().html())
assertEquals(want, doc.body().html())
assertEquals("<!-- comment --><!-- comment 2 --><html><head></head><body><p>One</p></body></html>", TextUtil.stripNewlines(doc.html()))
assertEquals("<td>One</td>\n<td id=\"2\"></td>", doc.select("tr").first().html())
assertEquals("link text", a.text())
assertEquals("/lib/14160711/", a.attr("href"))
assertEquals(doc.select("span").first().children().size(), 0)
assertEquals(doc.select("table").size(), 1)
assertEquals("Data", Jsoup.parse("<title>Data").title())
assertEquals("Data<", Jsoup.parse("<title>Data<").title())
assertEquals("Data</", Jsoup.parse("<title>Data</").title())
assertEquals("Data</t", Jsoup.parse("<title>Data</t").title())
assertEquals("Data</ti", Jsoup.parse("<title>Data</ti").title())
assertEquals("Data", Jsoup.parse("<title>Data</title>").title())
assertEquals("Data", Jsoup.parse("<title>Data</title >").title())
assertEquals("One <b>Two <b>Three", one.title())
assertEquals("Test", one.select("p").first().text())
assertEquals("One", two.title())
assertEquals("<b>Two <p>Test</p></b>", two.body().html())
assertEquals("Data", Jsoup.parse("<script>Data").select("script").first().data())
assertEquals("Data<", Jsoup.parse("<script>Data<").select("script").first().data())
assertEquals("Data</sc", Jsoup.parse("<script>Data</sc").select("script").first().data())
assertEquals("Data</-sc", Jsoup.parse("<script>Data</-sc").select("script").first().data())
assertEquals("Data</sc-", Jsoup.parse("<script>Data</sc-").select("script").first().data())
assertEquals("Data</sc--", Jsoup.parse("<script>Data</sc--").select("script").first().data())
assertEquals("Data", Jsoup.parse("<script>Data</script>").select("script").first().data())
assertEquals("Data</script", Jsoup.parse("<script>Data</script").select("script").first().data())
assertEquals("Data", Jsoup.parse("<script>Data</script ").select("script").first().data())
assertEquals("Data", Jsoup.parse("<script>Data</script n").select("script").first().data())
assertEquals("Data", Jsoup.parse("<script>Data</script n=").select("script").first().data())
assertEquals("Data", Jsoup.parse("<script>Data</script n=\"").select("script").first().data())
assertEquals("Data", Jsoup.parse("<script>Data</script n=\"p").select("script").first().data())
assertEquals("Data", Jsoup.parse("<style>Data").select("style").first().data())
assertEquals("Data</st", Jsoup.parse("<style>Data</st").select("style").first().data())
assertEquals("Data", Jsoup.parse("<style>Data</style>").select("style").first().data())
assertEquals("Data</style", Jsoup.parse("<style>Data</style").select("style").first().data())
assertEquals("Data</-style", Jsoup.parse("<style>Data</-style").select("style").first().data())
assertEquals("Data</style-", Jsoup.parse("<style>Data</style-").select("style").first().data())
assertEquals("Data</style--", Jsoup.parse("<style>Data</style--").select("style").first().data())
assertEquals("<textarea>One</textarea>", doc.body().html())
assertEquals("<!-- one <script>Blah</script> -->", doc.select("script").first().data())
assertEquals("0\n<p>0</p>", doc.body().html())
assertEquals("<p id=\"\uFFFD\">Blah &#x0;</p>", doc.body().html())
assertEquals("<!-- \uFFFD \uFFFD -->", doc.body().html())
assertEquals("<a href=\"one\" id=\"two\"></a>", doc.body().html())
assertEquals("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">", doc.childNode(0).outerHtml())
assertEquals(9, errors.size())
assertEquals("<1:21>: Attributes incorrectly present on end tag [/p]", errors.get(0).toString())
assertEquals("<2:16>: Unexpected Doctype token [<!doctype html>] when in state [InBody]", errors.get(1).toString())
assertEquals("<3:2>: Invalid character reference: invalid named reference [arrgh]", errors.get(2).toString())
assertEquals("<3:16>: Tag [font] cannot be self closing; not a void tag", errors.get(3).toString())
assertEquals("<3:20>: Invalid character reference: missing semicolon on [&#33]", errors.get(4).toString())
assertEquals("<3:25>: Invalid character reference: missing semicolon on [&amp]", errors.get(5).toString())
assertEquals("<3:34>: Invalid character reference: character [55296] outside of valid range", errors.get(6).toString())
assertEquals("<3:46>: Unexpected EndTag token [</div>] when in state [InBody]", errors.get(7).toString())
assertEquals("<3:51>: Unexpectedly reached end of file (EOF) in input state [TagName]", errors.get(8).toString())
assertEquals(3, errors.size())
assertEquals("<1:21>: Attributes incorrectly present on end tag [/p]", errors.get(0).toString())
assertEquals("<2:16>: Unexpected Doctype token [<!doctype html>] when in state [InBody]", errors.get(1).toString())
assertEquals("<3:2>: Invalid character reference: invalid named reference [arrgh]", errors.get(2).toString())
assertEquals(0, errors.size())
assertEquals(0, errors.size())
assertEquals("<html><head></head><body><table><tbody><tr><td>text</td><!-- Comment --></tr></tbody></table></body></html>", TextUtil.stripNewlines(node.outerHtml()))
assertEquals("<script>\n" + "  <!--\n" + "    document.write('</scr' + 'ipt>');\n" + "  // -->\n" + "</script>", node.body().html())
assertEquals(1, nodes.size())
assertEquals("html", nodes.get(0).nodeName())
assertEquals("<html> <head></head> <body> <ol> <li>One</li> </ol> <p>Two</p> </body> </html>", StringUtil.normaliseWhitespace(nodes.get(0).outerHtml()))
assertEquals(StringUtil.normaliseWhitespace("One &amp;clubsuite; ♣"), doc.body().html())
assertEquals("&amp; \" &reg; &amp;icy &amp;hopf &icy; &hopf;", doc.body().html())
assertEquals("<!--?xml encoding='UTF-8' ?--> <html> <head></head> <body> One </body> </html>", StringUtil.normaliseWhitespace(doc.outerHtml()))
assertEquals("<textarea>&lt;p&gt;Jsoup&lt;/p&gt;</textarea>", doc.body().html())
assertEquals(2, controls.size())
assertEquals("1", controls.get(0).id())
assertEquals("2", controls.get(1).id())
assertEquals(2, controls.size())
assertEquals("1", controls.get(0).id())
assertEquals("2", controls.get(1).id())
assertEquals("<table><tbody><tr><form></form><input type=\"hidden\" id=\"1\"><td><input type=\"text\" id=\"2\"></td></tr><tr></tr></tbody></table>", TextUtil.stripNewlines(doc.body().html()))
assertEquals(1, doc.select("table input").size())
assertEquals(2, doc.select("input").size())
assertEquals("<img>\n<svg>\n <image />\n</svg>", doc.body().html())
assertEquals("<!doctype> <html> <head></head> <body></body> </html>", StringUtil.normaliseWhitespace(doc.outerHtml()))
assertEquals("<!doctype> <html> <head></head> <body> <p>Foo</p> </body> </html>", StringUtil.normaliseWhitespace(doc.outerHtml()))
assertEquals("<!doctype �> <html> <head></head> <body></body> </html>", StringUtil.normaliseWhitespace(doc.outerHtml()))
assertEquals(50000, doc.body().childNodeSize())
assertTrue(System.currentTimeMillis() - start < 1000)
assertEquals("<form action=\"/submit\"> <hr><label>This is a searchable index. Enter search keywords: <input name=\"isindex\"></label> <hr> </form>", StringUtil.normaliseWhitespace(doc.body().html()))
assertEquals(1, doc.body().children().size())
assertEquals("hello", main.text())
assertEquals("Yes", els.text())
assertEquals("Correct", els.text())
assertEquals("Check", els.text())
assertEquals("<script type=\"text/javascript\">console.log('foo');</script>\n" + "<div id=\"somecontent\">\n" + " some content\n" + "</div>\n" + "<script type=\"text/javascript\">console.log('bar');</script>", body.body().html())
assertEquals("<!doctype html> <html> <head></head> <body> <div id=\"1\"> One </div> </body> </html>", StringUtil.normaliseWhitespace(doc.outerHtml()))
assertEquals("<tag>One</tag>", TextUtil.stripNewlines(div.nextElementSibling().outerHtml()))
assertEquals("<!doctype html> <html> <head></head> <body> <img alt=\"One\"> </body> </html>", StringUtil.normaliseWhitespace(doc.outerHtml()))
assertEquals("<form name=\"one\"></form>", StringUtil.normaliseWhitespace(doc.body().html()))
assertEquals("<html> <head></head> <body> <div id=\"1\"> <SPAN id=\"2\"></SPAN> </div> </body> </html>", StringUtil.normaliseWhitespace(doc.outerHtml()))
assertEquals("<TaG id=\"one\">One</TaG>", TextUtil.stripNewlines(div.nextElementSibling().outerHtml()))
assertEquals("<html> <head></head> <body> <div id=\"1\"> <span ID=\"2\"></span> </div> </body> </html>", StringUtil.normaliseWhitespace(doc.outerHtml()))
assertEquals("<tag ID=\"one\">One</tag>", TextUtil.stripNewlines(div.nextElementSibling().outerHtml()))
assertEquals("<html> <head></head> <body> <div id=\"1\"> <SPAN ID=\"2\"></SPAN> </div> </body> </html>", StringUtil.normaliseWhitespace(doc.outerHtml()))
assertEquals("<TaG ID=\"one\">One</TaG>", TextUtil.stripNewlines(div.nextElementSibling().outerHtml()))
assertEquals("<p><a>One</a><a></a><a foo=\"bar\">Two</a></p>", doc.body().html())
assertEquals("<r> <X> A </X> <y> B </y> </r>", StringUtil.normaliseWhitespace(doc.body().html()))
assertEquals("<r> <x> A </x> <y> B </y> </r>", StringUtil.normaliseWhitespace(doc.body().html()))
assertEquals("<A>ONE </A><A>Two</A>", doc.body().html())
assertEquals("<div>\n test\n</div>\n<p></p>", document.body().html())
assertEquals(0, parser.getErrors().size())
assertTrue(Jsoup.isValid(html, Safelist.basic()))
assertEquals("<p>test<br>test<br></p>", clean)
assertEquals(1, parser.getErrors().size())
assertEquals("<3:8>: Tag [div] cannot be self closing; not a void tag", parser.getErrors().get(0).toString())
assertEquals("<p>test</p> <div></div> <div> Two </div>", StringUtil.normaliseWhitespace(clean))
assertEquals(200, doc.select("span").size())
assertEquals(1, doc.select("p").size())
assertTrue(doc.childNode(0) instanceof Comment)
assertEquals("One\nTwo", pre.text())
assertEquals("\nOne\nTwo\n", pre.wholeText())
assertEquals("<!--?xml version=\"1.0\" encoding=\"utf-8\"?--><!-- so --> <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"><!-- what --> <html xml:lang=\"en\" lang=\"en\" xmlns=\"http://www.w3.org/1999/xhtml\"><!-- now --> <head><!-- then --> <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> <title>A Certain Kind of Test</title> </head> <body> <h1>Hello</h1>h1&gt; (There is a UTF8 hidden BOM at the top of this file.) </body> </html>", StringUtil.normaliseWhitespace(doc.html()))
assertEquals("A Certain Kind of Test", doc.head().select("title").text())
assertEquals("UTF-8", doc.charset().name())
assertEquals("One", doc.text())
assertEquals("<html><head><meta charset=\"UTF-8\"></head><body>One</body></html>", TextUtil.stripNewlines(html))
assertEquals(2, links.size())
assertEquals(expectedHref, links.get(0).attr("href"))
assertEquals(expectedHref, links.get(1).attr("href"))
assertEquals("<div><div><textarea></textarea></div></div>", TextUtil.stripNewlines(doc.body().html()))
assertEquals("Just<a>One</a><a>Two</a>", doc.body().html())
assertEquals("JustOneTwo", doc.body().text())
assertEquals("<div>\n" + " <p><a href=\"one\">One</a></p>\n" + " <p><a href=\"two\">Two</a></p>\n" + "</div>", doc.body().html())
assertEquals("<body>\n" + " <p>1</p>\n" + " <p>2</p>\n" + "</body>", doc.body().outerHtml())
assertEquals("<body>\n" + " <p>1</p>\n" + " <P>2</P>\n" + "</body>", caseDoc.body().outerHtml())
assertEquals("H<sub>2</sub>O", clean)
assertEquals("H2O", doc.text())
assertEquals("t<u>es</u>t <b>on</b> <i>f</i><u>ir</u>e", clean)
assertEquals("test on fire", doc.text())
assertEquals(text, doc.text())
assertEquals(2, select.childrenSize())
assertEquals("<optgroup label=\"a\"> <option>one </option><option>two </option><option>three </option></optgroup><optgroup label=\"b\"> <option>four </option><option>fix </option><option>six </option></optgroup>", select.html())
assertNull(treeBuilder.reader)
assertNull(treeBuilder.tokeniser)
assertTrue(doc.selectFirst("script").childNode(0) instanceof DataNode)
assertTrue(doc.selectFirst("style").childNode(0) instanceof DataNode)
assertTrue(doc.selectFirst("script").childNode(0) instanceof DataNode)
assertTrue(doc.selectFirst("style").childNode(0) instanceof DataNode)
assertEquals("YES YES", doc.selectFirst("textarea").val())
assertEquals("YES YES", doc.selectFirst("textarea").val())
assertEquals("<!doctype html>\n<html>\n<head>\n<title>Hello</title>\n</head>\n<body>\n<p>One</p>\n</body>\n</html>\n", doc.outerHtml())
assertEquals("<html><head></head><body>One<p>Hello!</p><p>There</p></body>  </html> ", doc.outerHtml())
assertEquals("One\tTwo", pre.text())
assertEquals("Three Four", span.text())
assertEquals("\tThree\tFour", span.wholeText())
assertEquals("One\tTwo Three Four", doc.body().text())
assertEquals("<pre>One\tTwo</pre><span> Three Four</span>", doc.body().html())
assertEquals(html, doc.body().html())
assertNotNull(div)
assertEquals("\nOne\nTwo Three\nFour", div.wholeText())
assertEquals("\nOne\nTwo ", div.wholeOwnText())
assertTrue(didAddElements(bare))
assertEquals("<tr>\n <tr>\n  <td>One</td>\n </tr>\n</tr>", element.outerHtml())
assertEquals(1, nodes.size())
assertEquals("h2", node.nodeName())
assertEquals("<p><h2>text</h2></p>", node.parent().outerHtml())
assertEquals(2, nodes.size())
assertEquals("<p><p></p><a></a></p>", node.parent().outerHtml())
assertNotNull(doc)
assertEquals("<a> <b> </b></a><b><div><a> </a><a>test</a></div> </b>", TextUtil.stripNewlines(doc.body().html()))
assertEquals(Document.OutputSettings.Syntax.html, doc.outputSettings().syntax())
assertEquals("<body style=\"color: red\" name>\n <div></div>\n</body>", out)
assertEquals(want, TextUtil.stripNewlines(doc.html()))
assertEquals(want, TextUtil.stripNewlines(doc.html()))
assertEquals(want, TextUtil.stripNewlines(doc.html()))
assertNotNull(tmplRow)
assertNotNull(tmplTbl)
assertEquals(want, TextUtil.stripNewlines(doc.html()))
assertEquals(want, TextUtil.stripNewlines(doc.html()))
assertEquals("p", p.normalName())
assertEquals(p, p1)
assertEquals(want, TextUtil.stripNewlines(table.html()))
assertEquals(want, TextUtil.stripNewlines(doc.body().html()))
assertEquals(want, TextUtil.stripNewlines(tmpl.html()))
assertEquals(want, TextUtil.stripNewlines(doc.html()))
assertEquals(want, TextUtil.stripNewlines(tmpl.html()))
assertEquals(want, TextUtil.stripNewlines(doc.html()))
assertEquals(want, TextUtil.stripNewlines(frag.body().html()))
assertNotNull(doc)
assertEquals("<template><form><hr><label>This is a searchable index. Enter search keywords: <input name=\"isindex\"></label><hr></form></template>", TextUtil.stripNewlines(doc.head().html()))
assertNotNull(doc)
assertEquals("<template><select></select><input>&lt;</template>", TextUtil.stripNewlines(doc.head().html()))
assertEquals("One & Two", s)
assertEquals(body, Parser.unescapeEntities(body, false))
assertEquals(text, "H\u00E9llo, w\u00F6rld!")
assertEquals(38, constants.size())
assertEquals("<html>\n" + " <head></head>\n" + " <body><a href=\"#1\"> </a>\n" + "  <div>\n" + "   <a href=\"#1\"> </a><a href=\"#2\">child</a>\n" + "  </div>\n" + " </body>\n" + "</html>", s)
assertEquals("<html>\n" + " <head></head>\n" + " <body><a href=\"#1\"> </a>\n" + "  <div>\n" + "   <a href=\"#1\"> </a>\n" + "   <div>\n" + "    <a href=\"#1\"> </a><a href=\"#2\">child</a>\n" + "   </div>\n" + "  </div>\n" + " </body>\n" + "</html>", s)
assertEquals(0, r.pos())
assertEquals('o', r.current())
assertEquals('o', r.consume())
assertEquals(1, r.pos())
assertEquals('n', r.current())
assertEquals(1, r.pos())
assertEquals('n', r.consume())
assertEquals('e', r.consume())
assertTrue(r.isEmpty())
assertEquals(CharacterReader.EOF, r.consume())
assertTrue(r.isEmpty())
assertEquals(CharacterReader.EOF, r.consume())
assertEquals('o', r.consume())
assertEquals('n', r.current())
assertEquals('o', r.current())
assertEquals('o', r.consume())
assertEquals('n', r.consume())
assertEquals('e', r.consume())
assertTrue(r.isEmpty())
assertEquals('e', r.current())
assertEquals('e', r.consume())
assertTrue(r.isEmpty())
assertEquals(CharacterReader.EOF, r.consume())
assertTrue(r.isEmpty())
assertEquals('e', r.consume())
assertTrue(r.isEmpty())
assertEquals(CharacterReader.EOF, r.consume())
assertTrue(r.isEmpty())
assertEquals(1, r.pos())
assertEquals('n', r.consume())
assertEquals('e', r.consume())
assertTrue(r.isEmpty())
assertEquals(1, r.pos())
assertEquals('n', r.consume())
assertEquals(2, r.pos())
assertEquals(in, toEnd)
assertTrue(r.isEmpty())
assertEquals(-1, r.nextIndexOf('x'))
assertEquals(3, r.nextIndexOf('h'))
assertEquals("bla", pull)
assertEquals(2, r.nextIndexOf('l'))
assertEquals(" blah", r.consumeToEnd())
assertEquals(-1, r.nextIndexOf('x'))
assertEquals(-1, r.nextIndexOf("Foo"))
assertEquals(4, r.nextIndexOf("Two"))
assertEquals("One Two ", r.consumeTo("something"))
assertEquals(10, r.nextIndexOf("Two"))
assertEquals("something Two Three Four", r.consumeToEnd())
assertEquals(-1, r.nextIndexOf("Two"))
assertEquals(-1, r.nextIndexOf("]]>"))
assertEquals("One ", r.consumeTo('T'))
assertEquals("", r.consumeTo('T'))
assertEquals('T', r.consume())
assertEquals("wo ", r.consumeTo('T'))
assertEquals('T', r.consume())
assertEquals("hree", r.consumeTo('T'))
assertEquals("One ", r.consumeTo("Two"))
assertEquals('T', r.consume())
assertEquals("wo ", r.consumeTo("Two"))
assertEquals('T', r.consume())
assertEquals("wo Four", builder.toString())
assertEquals('O', r.consume())
assertEquals('e', r.consume())
assertEquals("One ", r.consumeToAny('&', ';'))
assertTrue(r.matches('&'))
assertTrue(r.matches("&bar;"))
assertEquals('&', r.consume())
assertEquals("bar", r.consumeToAny('&', ';'))
assertEquals(';', r.consume())
assertEquals(" qux", r.consumeToAny('&', ';'))
assertEquals("One", r.consumeLetterSequence())
assertEquals(" &", r.consumeTo("bar;"))
assertEquals("bar", r.consumeLetterSequence())
assertEquals("; qux", r.consumeToEnd())
assertEquals("One12", r.consumeLetterThenDigitSequence())
assertEquals(' ', r.consume())
assertEquals("Two", r.consumeLetterThenDigitSequence())
assertEquals(" &bar; qux", r.consumeToEnd())
assertTrue(r.matches('O'))
assertTrue(r.matches("One Two Three"))
assertTrue(r.matches("One"))
assertEquals('O', r.consume())
assertTrue(r.matches("ne Two Three"))
assertEquals("ne Two Three", r.consumeToEnd())
assertTrue(r.isEmpty())
assertTrue(r.matchesIgnoreCase("O"))
assertTrue(r.matchesIgnoreCase("o"))
assertTrue(r.matches('O'))
assertTrue(r.matchesIgnoreCase("One Two Three"))
assertTrue(r.matchesIgnoreCase("ONE two THREE"))
assertTrue(r.matchesIgnoreCase("One"))
assertTrue(r.matchesIgnoreCase("one"))
assertEquals('O', r.consume())
assertTrue(r.matchesIgnoreCase("NE Two Three"))
assertEquals("ne Two Three", r.consumeToEnd())
assertTrue(r.containsIgnoreCase("two"))
assertTrue(r.containsIgnoreCase("three"))
assertTrue(r.containsIgnoreCase("</title>"))
assertTrue(r.containsIgnoreCase("</title>"))
assertTrue(r.containsIgnoreCase("</title>"))
assertTrue(r.matches("<p>"))
assertTrue(r.containsIgnoreCase("</title>"))
assertTrue(r.containsIgnoreCase("</title>"))
assertTrue(r.matches("<p>"))
assertTrue(r.matches("<foo>"))
assertTrue(r.containsIgnoreCase("</TITLE>"))
assertTrue(r.containsIgnoreCase("</title>"))
assertEquals("One", r.consumeToAny(scan))
assertTrue(r.matchesAny(scan))
assertEquals('\n', r.consume())
assertEquals("Check", one)
assertEquals("Check", two)
assertEquals("Check", three)
assertEquals("CHOKE", four)
assertSame(one, two)
assertSame(two, three)
assertNotSame(three, four)
assertNotSame(four, five)
assertEquals(five, "A string that is longer than 16 chars")
assertTrue(r.rangeEquals(0, 5, "Check"))
assertTrue(r.rangeEquals(6, 5, "Check"))
assertTrue(r.rangeEquals(12, 5, "Check"))
assertTrue(r.rangeEquals(18, 5, "CHOKE"))
assertTrue(r.matchConsume("One"))
assertTrue(r.isEmpty())
assertEquals("Two", two)
assertTrue(r.matchConsume("<!"))
assertTrue(r.isEmpty())
assertEquals("", after)
assertTrue(r.isEmpty())
assertEquals("How", r.consumeTo(' '))
assertEquals(' ', r.consume())
assertEquals(4, r.pos())
assertEquals('a', r.consume())
assertEquals(5, r.pos())
assertEquals('b', r.consume())
assertEquals('o', r.consume())
assertEquals('u', r.consume())
assertEquals('t', r.consume())
assertEquals(' ', r.consume())
assertEquals('n', r.consume())
assertEquals('o', r.consume())
assertEquals('w', r.consume())
assertTrue(r.isEmpty())
assertTrue(r.isEmpty())
assertTrue(reader.isTrackNewlines())
assertTrue(track.isTrackNewlines())
assertEquals(0, noTrack.pos())
assertEquals(1, noTrack.lineNumber())
assertEquals(1, noTrack.columnNumber())
assertEquals(12, noTrack.pos())
assertEquals(1, noTrack.lineNumber())
assertEquals(13, noTrack.columnNumber())
assertEquals("1:13", noTrack.cursorPos())
assertEquals(32778, noTrack.pos())
assertEquals(1, noTrack.lineNumber())
assertEquals(noTrack.pos() + 1, noTrack.columnNumber())
assertEquals("1:32779", noTrack.cursorPos())
assertEquals(0, track.pos())
assertEquals(1, track.lineNumber())
assertEquals(1, track.columnNumber())
assertEquals(1, track.lineNumber())
assertEquals(6, track.columnNumber())
assertEquals(2, track.lineNumber())
assertEquals(1, track.columnNumber())
assertEquals("<bar>", track.consumeTo('\n'))
assertEquals(2, track.lineNumber())
assertEquals(6, track.columnNumber())
assertEquals("\n", track.consumeTo("<qux>"))
assertEquals(12, track.pos())
assertEquals(3, track.lineNumber())
assertEquals(1, track.columnNumber())
assertEquals("3:1", track.cursorPos())
assertEquals("<qux>", track.consumeTo('\n'))
assertEquals("3:6", track.cursorPos())
assertEquals(32778, track.pos())
assertEquals(4, track.lineNumber())
assertEquals(32761, track.columnNumber())
assertEquals("4:32761", track.cursorPos())
assertEquals("4:32766", track.cursorPos())
assertEquals(5, track.lineNumber())
assertEquals("5:1", track.cursorPos())
assertEquals("5:6", track.cursorPos())
assertEquals("1:1", reader.cursorPos())
assertEquals(131096, reader.pos())
assertEquals(reader.pos() + 1, reader.columnNumber())
assertEquals(1, reader.lineNumber())
assertEquals(280218, reader.pos())
assertEquals(1002, reader.lineNumber())
assertEquals(1, reader.columnNumber())
assertEquals(1002, reader.lineNumber())
assertEquals(14, reader.columnNumber())
assertEquals(2, doc.body().childNodeSize())
assertEquals(25000, doc.select("dd").size())
assertTrue(System.currentTimeMillis() - start < 20000)
assertEquals(7, attr.size())
assertEquals("123", attr.get("id"))
assertEquals("baz = 'bar'", attr.get("class"))
assertEquals("border: 2px", attr.get("style"))
assertEquals("", attr.get("qux"))
assertEquals("", attr.get("zim"))
assertEquals("12", attr.get("foo"))
assertEquals("18", attr.get("mux"))
assertEquals(2, el.attributes().size())
assertEquals("bar\r\nqux", el.attr("foo"))
assertEquals("two", el.attr("bar"))
assertEquals(0, attr.size())
assertEquals(1, attr.size())
assertTrue(attr.hasKey("=empty"))
assertEquals("", attr.get("=empty"))
assertEquals("?foo=bar&mid&lt=true", els.first().attr("href"))
assertEquals("?foo=bar<qux&lg=1", els.last().attr("href"))
assertEquals("&wr_id=123&mid-size=true&ok=&wr", els.first().attr("href"))
assertEquals("123", el.attr("normal"))
assertEquals("", el.attr("boolean"))
assertEquals("", el.attr("empty"))
assertEquals(html, el.outerHtml())
assertEquals("<img onerror=\"doMyJob\">", doc.body().html())
assertEquals("<img onerror=\"doMyJob\" />", doc.html())
assertEquals("IMG", bothOn.normalizeTag("IMG"))
assertEquals("ID", bothOn.normalizeAttribute("ID"))
assertEquals("img", bothOff.normalizeTag("IMG"))
assertEquals("id", bothOff.normalizeAttribute("ID"))
assertEquals("IMG", tagOn.normalizeTag("IMG"))
assertEquals("id", tagOn.normalizeAttribute("ID"))
assertEquals("img", attrOn.normalizeTag("IMG"))
assertEquals("ID", attrOn.normalizeAttribute("ID"))
assertEquals("hidden", normalizedAttribute)
assertEquals("item", normalizedAttributes.asList().get(0).getKey())
assertEquals(8, constants.size())
assertNotNull(parseMethod)
assertTrue(seen)
assertEquals(":contains", pre)
assertEquals("one (two) three", guts)
assertEquals(" four", remainder)
assertEquals(":contains", pre)
assertEquals("one (two) \\( \\) \\) three", guts)
assertEquals("one (two) ( ) ) three", TokenQueue.unescape(guts))
assertEquals(" four", remainder)
assertEquals("something(or another)", match)
assertEquals("one ( ) \\", TokenQueue.unescape("one \\( \\) \\\\"))
assertEquals("<textarea>one < two ", data)
assertEquals("<textarea> one two < three </oops>", data)
assertEquals("Three Two", tq.remainder())
assertEquals("<textarea>one < two ", data)
assertEquals(" third ", data)
assertEquals("#identifier", Jsoup.parse(html).select(selector).first().cssSelector())
assertEquals("\n\\) foo1", doc.select("div:matches(" + Pattern.quote("\\)") + ")").get(0).childNode(0).toString())
assertEquals("\n( foo2", doc.select("div:matches(" + Pattern.quote("(") + ")").get(0).childNode(0).toString())
assertEquals("\n1) foo3", doc.select("div:matches(" + Pattern.quote("1)") + ")").get(0).childNode(0).toString())
assertEquals("You&I", els.text())
assertEquals("hello world</", els.text())
assertEquals("hello world", els.text())
assertEquals("fake", els.text())
assertEquals("fake", els.text())
assertEquals("<fake>", els.text())
assertEquals("", els.text())
assertEquals("hello world</?fake", els.text())
assertEquals(" <table><tr><td></table> --! --- ", comment.getData())
assertEquals("Hello", text.getWholeText())
assertEquals(" <table><tr><td></table> --!-", comment.getData())
assertEquals("Hello", text.getWholeText())
assertEquals("<p></p><p></p><div id=\"one\"><span>Two</span></div>", TextUtil.stripNewlines(doc.body().html()))
assertEquals(CharacterReader.readAheadLimit - 1, errorList.get(0).getPosition())
assertEquals(6, errorList.get(0).getPosition())
assertEquals(7, errorList.get(0).getPosition())
assertEquals(5, errorList.get(0).getPosition())
assertEquals("One �Two", doc.title())
assertEquals("<html><head></head><body><div>One<plaintext>&lt;div&gt;Two&lt;/plaintext&gt;�no &lt; Return</plaintext></div></body></html>", TextUtil.stripNewlines(doc.html()))
assertEquals("<di�v>\n One\n</di�v>Two", doc.body().html())
assertEquals("foo<bar", p.attr("name"))
assertEquals("<p foo></p>", doc.body().html())
assertEquals(1, els.size())
assertNotNull(el)
assertEquals("One", el.text())
assertEquals(tag, el.tagName())
assertEquals(1, els.size())
assertNotNull(el)
assertEquals("One", el.text())
assertEquals(attrName.toLowerCase(), attribute.getKey())
assertEquals("foo", attribute.getValue())
assertEquals(1, els.size())
assertNotNull(el)
assertEquals(text, el.text())
assertEquals(1, els.size())
assertNotNull(el)
assertEquals(" " + comment + " ", child.getData())
assertEquals(1, els.size())
assertNotNull(el)
assertEquals(cdata, el.text())
assertEquals(cdata, child.getWholeText())
assertEquals(1, els.size())
assertNotNull(el)
assertEquals(title, el.text())
assertEquals(title, child.getWholeText())
assertEquals(title, doc.title())
assertEquals("\u20ac", Jsoup.parse("&#0128;").text())
assertEquals("\u201a", Jsoup.parse("&#0130;").text())
assertEquals("\u20ac", Jsoup.parse("&#x80;").text())
assertEquals("\u20ac", parser.parseInput("<html><body>&#0128;</body></html>", "").text())
assertEquals(1, parser.getErrors().size())
assertEquals(expectedCommentData, ((Comment) commentNode).getData())
assertEquals(cdataContents, ((CDataNode) cdataNode).text())
assertEquals("#comment", comment.nodeName())
assertEquals(" This is one heck of a comment! ", comment.getData())
assertEquals("<!-- This is one heck of a comment! -->", comment.toString())
assertEquals("<div>\n <!-- comment-->\n</div>", doc.body().html())
assertEquals("<p>One<!-- comment -->Two</p>", doc.body().html())
assertEquals("OneTwo", doc.text())
assertEquals("<!-- a simple comment --><html><head></head><body></body></html>", doc.html())
assertEquals("<!-- a simple comment -->", c1.outerHtml())
assertNotSame(comment, c1)
assertEquals(comment.getData(), comment.getData())
assertEquals("New", c1.getData())
assertNotEquals(c1.getData(), comment.getData())
assertTrue(decl.isXmlDeclaration())
assertNotNull(xmlDeclaration)
assertTrue(hasAnyAttributes(doc))
assertEquals(1, els.size())
assertEquals("", id)
assertTrue(p.hasClass("Foobs"))
assertTrue(hasAnyAttributes(html))
assertTrue(hasAnyAttributes(p))
assertTrue(attributes.hasKey("class"))
assertEquals("key=\"value &amp;\"", attr.html())
assertEquals(attr.html(), attr.toString())
assertEquals(s + "=\"A" + s + "B\"", attr.html())
assertEquals(attr.html(), attr.toString())
assertEquals("", attributes.get("hidden"))
assertEquals("hidden", first.getKey())
assertEquals("", first.getValue())
assertTrue(Attribute.isBooleanAttribute(first.getKey()))
assertEquals("two", oldVal)
assertEquals("three", attr.getKey())
assertEquals("four", attr.getValue())
assertNull(attr.parent)
assertTrue(a1.hasDeclaredValue())
assertTrue(a3.hasDeclaredValue())
assertEquals("one", attr.html())
assertEquals("val", oldVal)
assertEquals("", oldVal)
assertTrue(Attribute.isBooleanAttribute("required"))
assertTrue(Attribute.isBooleanAttribute("REQUIRED"))
assertTrue(Attribute.isBooleanAttribute("rEQUIREd"))
assertEquals("<a href=\"autofocus\" required>One</a>", doc.selectFirst("a").outerHtml())
assertEquals("<a href=\"autofocus\" REQUIRED>One</a>", doc2.selectFirst("a").outerHtml())
assertTrue(htmlParser.isTrackPosition())
assertTrue(xmlParser.isTrackPosition())
assertNotNull(text)
assertNotNull(now)
assertNotNull(comment)
assertEquals("1,1:0-2,12:19", pRange.toString())
assertTrue(pStart.isTracked())
assertEquals(0, pStart.pos())
assertEquals(1, pStart.columnNumber())
assertEquals(1, pStart.lineNumber())
assertEquals("1,1:0", pStart.toString())
assertTrue(pStart.isTracked())
assertEquals(19, pEnd.pos())
assertEquals(12, pEnd.columnNumber())
assertEquals(2, pEnd.lineNumber())
assertEquals("2,12:19", pEnd.toString())
assertEquals("3,1:20", span.sourceRange().start().toString())
assertEquals("3,7:26", span.sourceRange().end().toString())
assertTrue(spanEnd.isTracked())
assertEquals("5,14:52-5,21:59", spanEnd.toString())
assertEquals("Hello\n ®\n there ©.", wholeText)
assertEquals(textRange.end().pos() - textRange.start().pos(), textOrig.length())
assertEquals("3,7:26", textRange.start().toString())
assertEquals("5,14:52", textRange.end().toString())
assertEquals("6,2:66", comment.sourceRange().start().toString())
assertEquals("6,18:82", comment.sourceRange().end().toString())
assertNotNull(doctype)
assertEquals("html", doctype.name())
assertEquals("1,1:0-2,6:15", doctype.sourceRange().toString())
assertNotNull(titleText)
assertEquals("jsoup ©\n2022", title.text())
assertEquals(titleText.getWholeText(), title.text())
assertEquals("3,1:16-3,8:23", title.sourceRange().toString())
assertEquals("3,8:23-4,5:40", titleText.sourceRange().toString())
assertEquals("\n<jsoup>\n", cdata.text())
assertEquals("5,1:55-7,4:76", cdata.sourceRange().toString())
assertNotNull(script)
assertEquals("2,1:7-2,9:15", script.sourceRange().toString())
assertNotNull(data)
assertEquals("2,9:15-4,8:33", data.sourceRange().toString())
assertEquals("1,1:0-1,39:38", decl.sourceRange().toString())
assertEquals("2,1:39-2,16:54", doctype.sourceRange().toString())
assertNotNull(rss)
assertEquals("3,1:55-3,14:68", rss.sourceRange().toString())
assertEquals("5,1:73-5,7:79", rss.endSourceRange().toString())
assertNotNull(text)
assertEquals("3,14:68-5,1:73", text.sourceRange().toString())
assertEquals("6,1:80-6,17:96", comment.sourceRange().toString())
assertNotNull(firstP)
assertEquals("4,1:53-4,4:56", firstP.sourceRange().toString())
assertNotNull(p)
assertEquals("1000,1:279646-1000,10:279655", p.sourceRange().toString())
assertEquals("1000,567:280212-1000,571:280216", p.endSourceRange().toString())
assertNotNull(text)
assertEquals("1000,10:279655-1000,357:280002", text.sourceRange().toString())
assertNotNull(item)
assertEquals("13,5:496-13,11:502", item.sourceRange().toString())
assertEquals("17,5:779-17,12:786", item.endSourceRange().toString())
assertEquals("<!doctype html>", html5.outerHtml())
assertEquals("<!DOCTYPE html PUBLIC \"-//IETF//DTD HTML//\">", publicDocType.outerHtml())
assertEquals("<!DOCTYPE html SYSTEM \"http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd\">", systemDocType.outerHtml())
assertEquals("<!DOCTYPE notHtml PUBLIC \"--public\" \"--system\">", combo.outerHtml())
assertEquals("notHtml", combo.name())
assertEquals("--public", combo.publicId())
assertEquals("--system", combo.systemId())
assertEquals("<!doctype html>", htmlOutput(base))
assertEquals(base, xmlOutput(base))
assertEquals(publicDoc, htmlOutput(publicDoc))
assertEquals(publicDoc, xmlOutput(publicDoc))
assertEquals(systemDoc, htmlOutput(systemDoc))
assertEquals(systemDoc, xmlOutput(systemDoc))
assertEquals(legacyDoc, htmlOutput(legacyDoc))
assertEquals(legacyDoc, xmlOutput(legacyDoc))
assertEquals(3, a.size())
assertTrue(a.hasKey("Tot"))
assertTrue(a.hasKey("Hello"))
assertTrue(a.hasKey("data-name"))
assertTrue(a.hasKeyIgnoreCase("tot"))
assertEquals("There", a.getIgnoreCase("hEllo"))
assertEquals(1, dataset.size())
assertEquals("Jsoup", dataset.get("name"))
assertEquals("", a.get("tot"))
assertEquals("a&p", a.get("Tot"))
assertEquals("a&p", a.getIgnoreCase("tot"))
assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", a.html())
assertEquals(a.html(), a.toString())
assertTrue(a.hasKey("Tot"))
assertEquals("Tot", attr.getKey())
assertEquals(2, a.size())
assertEquals("Hello", attr.getKey())
assertEquals("There", attr.getValue())
assertEquals(2, a.size())
assertEquals("There", a.get("Hello"))
assertEquals("a&p", a.get("Foo"))
assertEquals("Qux", a.get("Bar"))
assertEquals(3, seen)
assertTrue(iterator.hasNext())
assertEquals(datas.length, i)
assertTrue(it.hasNext())
assertEquals("One", it.next().getKey())
assertTrue(it.hasNext())
assertEquals("Two", it.next().getKey())
assertEquals(2, seen)
assertEquals(2, attributes.size())
assertEquals("One", attributes.get(0).getKey())
assertEquals("Two", attributes.get(1).getKey())
assertEquals(" One=\"One\" Two=\"Two\"", a.html())
assertEquals(5, a.size())
assertEquals(3, a.size())
assertTrue(a.hasKey("tot"))
assertTrue(ats.hasDeclaredValueForKey("a"))
assertTrue(ats.hasDeclaredValueForKeyIgnoreCase("A"))
assertEquals(2, a.size())
assertEquals(4, a.size())
assertEquals(2, a.asList().size())
assertEquals(" foo bar=\"\" async qux=\"qux\" defer=\"deferring\" ismap inert", el.attributes().html())
assertEquals("key", attribute.html())
assertEquals(" key", attributes.html())
assertEquals("checked", attribute.html())
assertEquals(" checked", attributes.html())
assertEquals("checked", attribute.html())
assertEquals(" checked", attributes.html())
assertEquals(one, one.clone())
assertEquals(one, two)
assertEquals(two, two)
assertEquals(one, three)
assertEquals(two, three)
assertEquals(three, three)
assertEquals(three, three.clone())
assertEquals(four, four)
assertEquals(four, four.clone())
assertNotEquals(one, four)
assertEquals(3, two.size())
assertEquals("Val2", two.get("Key2"))
assertEquals(one, two)
assertEquals(4, two.size())
assertEquals(3, one.size())
assertNotEquals(one, two)
assertEquals(8, form.elements().size())
assertEquals(6, data.size())
assertEquals("one=two", data.get(0).toString())
assertEquals("three=four", data.get(1).toString())
assertEquals("three=five", data.get(2).toString())
assertEquals("six=seven", data.get(3).toString())
assertEquals("seven=on", data.get(4).toString())
assertEquals("eight=on", data.get(5).toString())
assertEquals("test=foo", form.formData().get(0).toString())
assertEquals(Connection.Method.GET, con.request().method())
assertEquals("http://example.com/search", con.request().url().toExternalForm())
assertEquals("q=jsoup", dataList.get(0).toString())
assertEquals(Connection.Method.POST, con2.request().method())
assertEquals("http://example.com/", con.request().url().toExternalForm())
assertTrue(threw)
assertTrue(formEl instanceof FormElement)
assertEquals(1, form.elements().size())
assertTrue(formEl instanceof FormElement)
assertEquals(1, form.elements().size())
assertEquals("foo=bar", data.get(0).toString())
assertEquals("on", data.get(0).value())
assertEquals("foo", data.get(0).key())
assertEquals(3, data.size())
assertEquals("user", data.get(0).key())
assertEquals("pass", data.get(1).key())
assertEquals("login", data.get(2).key())
assertEquals(2, data.size())
assertEquals("user", data.get(0).key())
assertEquals("login", data.get(1).key())
assertNull(doc.selectFirst("input[name=pass]"))
assertEquals(echoUrl, echo.location())
assertEquals("EchoServlet", els.get(0).nextElementSibling().text())
assertEquals("Root", els.get(1).nextElementSibling().text())
assertTrue(cookieDoc.connection().response().url().toExternalForm().contains("CookieServlet"))
assertTrue(formDoc.connection().response().url().toExternalForm().contains("upload-form"))
assertTrue(echo.connection().response().url().toExternalForm().contains("EchoServlet"))
assertEquals("Hello &amp;&lt;&gt; &Aring; &aring; &#x3c0; &#x65b0; there &frac34; &copy; &raquo;", escapedAscii)
assertEquals("Hello &amp;&lt;&gt; &angst; &aring; &pi; &#x65b0; there &frac34; &copy; &raquo;", escapedAsciiFull)
assertEquals("Hello &amp;&lt;&gt; &#xc5; &#xe5; &#x3c0; &#x65b0; there &#xbe; &#xa9; &#xbb;", escapedAsciiXhtml)
assertEquals("Hello &amp;&lt;&gt; Å å π 新 there ¾ © »", escapedUtfFull)
assertEquals("Hello &amp;&lt;&gt; Å å π 新 there ¾ © »", escapedUtfMin)
assertEquals(text, Entities.unescape(escapedAscii))
assertEquals(text, Entities.unescape(escapedAsciiFull))
assertEquals(text, Entities.unescape(escapedAsciiXhtml))
assertEquals(text, Entities.unescape(escapedUtfFull))
assertEquals(text, Entities.unescape(escapedUtfMin))
assertEquals("&#x1d559;", escapedAscii)
assertEquals("&hopf;", escapedAsciiFull)
assertEquals(text, escapedUtf)
assertEquals(un, Entities.unescape(text))
assertEquals("&Gt; &Gg;&#x338; &Gt;&#x20d2; &Gt;&#x338; &Gt; &Gt;", escaped)
assertEquals(un, Entities.unescape(escaped))
assertEquals(38, xhtml.codepointForName("amp"))
assertEquals(62, xhtml.codepointForName("gt"))
assertEquals(60, xhtml.codepointForName("lt"))
assertEquals(34, xhtml.codepointForName("quot"))
assertEquals("amp", xhtml.nameForCodepoint(38))
assertEquals("gt", xhtml.nameForCodepoint(62))
assertEquals("lt", xhtml.nameForCodepoint(60))
assertEquals("quot", xhtml.nameForCodepoint(34))
assertEquals("≫⃒", Entities.getByName("nGt"))
assertEquals("fj", Entities.getByName("fjlig"))
assertEquals("≫", Entities.getByName("gg"))
assertEquals("©", Entities.getByName("copy"))
assertEquals("&#x210c1;", escapedAscii)
assertEquals(text, escapedUtf)
assertEquals(un, Entities.unescape(text))
assertEquals(un, Entities.unescape(text))
assertEquals("Hello Æ &<> ® Å &angst π π 新 there &! ¾ © ©", Entities.unescape(text))
assertEquals("&0987654321; &unknown", Entities.unescape("&0987654321; &unknown"))
assertEquals("Hello &amp= &", Entities.unescape(text, true))
assertEquals("Hello &= &", Entities.unescape(text))
assertEquals("Hello &= &", Entities.unescape(text, false))
assertEquals("&Uuml; &uuml; &amp; &amp;", Entities.escape(unescaped, new OutputSettings().charset("ascii").escapeMode(extended)))
assertEquals("Ü ü & &", Entities.unescape(escaped))
assertEquals(unescaped, Entities.unescape(escaped))
assertEquals("&sup1;&sup2;&sup3;&frac14;&frac12;&frac34;", p.html())
assertEquals("¹²³¼½¾", p.text())
assertEquals("¹²³¼½¾", p.html())
assertEquals(string, Entities.unescape(string))
assertEquals("<a title=\"<p>One</p>\">One</a>", element.outerHtml())
assertEquals("<a title=\"&lt;p>One&lt;/p>\">One</a>", element.outerHtml())
assertEquals(input, doc.body().html())
assertEquals(input, xml.html())
assertEquals("", noBase.absUrl("relHref"))
assertEquals("http://bar/qux", noBase.absUrl("absHref"))
assertEquals("http://foo/foo", withBase.absUrl("relHref"))
assertEquals("http://bar/qux", withBase.absUrl("absHref"))
assertEquals("", withBase.absUrl("noval"))
assertEquals("http://bar/qux", dodgyBase.absUrl("absHref"))
assertEquals("", dodgyBase.absUrl("relHref"))
assertEquals(baseUri, doc.baseUri())
assertEquals(baseUri, doc.select("div").first().baseUri())
assertEquals(baseUri, doc.select("p").first().baseUri())
assertEquals("/foo", a.attr("href"))
assertEquals("https://jsoup.org/foo", a.attr("abs:href"))
assertTrue(a.hasAttr("abs:href"))
assertEquals("https://jsoup.org/rez/osi_logo.png", img.attr("abs:src"))
assertEquals(img.absUrl("src"), img.attr("abs:src"))
assertTrue(one.hasAttr("href"))
assertEquals("", one.absUrl("href"))
assertTrue(two.hasAttr("abs:href"))
assertTrue(two.hasAttr("href"))
assertEquals("https://jsoup.org/", two.absUrl("href"))
assertTrue(el.hasAttr("abs:href"))
assertEquals("odd", el.attr("abs:href"))
assertEquals("file:/etc/password", one.absUrl("href"))
assertEquals("file:/var/log/messages", two.absUrl("href"))
assertEquals("file://localhost/etc/password", one.absUrl("href"))
assertEquals("http://example.net/foo", one.absUrl("href"))
assertEquals("https://example.net/foo", two.absUrl("href"))
assertEquals("https://www.google.com/images/errors/logo_sm.gif", doc3.select("img").attr("abs:src"))
assertEquals("https://jsoup.org/path/file?foo", a1.absUrl("href"))
assertEquals("https://jsoup.org/path/bar.html?foo", a2.absUrl("href"))
assertEquals("http://example.com/one/two.html", a1.absUrl("href"))
assertEquals("two three", p.text())
assertEquals("<span>two</span> three", TextUtil.stripNewlines(p.html()))
assertEquals("One <em>foo</em> three", p.html())
assertSame(p.ownerDocument(), doc)
assertSame(doc.ownerDocument(), doc)
assertNull(doc.parent())
assertSame(doc, root)
assertNull(root.parent())
assertSame(doc.root(), doc)
assertSame(doc.root(), doc.ownerDocument())
assertNull(standAlone.parent())
assertSame(standAlone.root(), standAlone)
assertNull(standAlone.ownerDocument())
assertEquals("<p>One <em>four</em><b>two</b> three</p>", doc.body().html())
assertEquals("<p>One <em>four</em><i>five</i><b>two</b> three</p>", doc.body().html())
assertEquals("<p>One <b>two</b><em>four</em> three</p>", doc.body().html())
assertEquals("<p>One <b>two</b><i>five</i><em>four</em> three</p>", doc.body().html())
assertEquals("<div>One Two <b>Three</b> Four</div>", TextUtil.stripNewlines(doc.body().html()))
assertTrue(node instanceof TextNode)
assertEquals("Two ", ((TextNode) node).text())
assertEquals(node, twoText)
assertEquals(node.parent(), doc.select("div").first())
assertEquals("<div>One  Two</div>", TextUtil.stripNewlines(doc.body().html()))
assertNull(node)
assertEquals("<div><p><#text></#text></p></div>", accum.toString())
assertEquals("<div><p>Hello</p></div><div>There Now<p>Another</p></div>", TextUtil.stripNewlines(doc.body().html()))
assertEquals(0, node.siblingIndex())
assertEquals(0, node.siblingNodes().size())
assertNull(node.previousSibling())
assertNull(node.nextSibling())
assertEquals(0, el.siblingElements().size())
assertNull(el.previousElementSibling())
assertNull(el.nextElementSibling())
assertEquals("Two", p2.text())
assertEquals(2, nodes.size())
assertEquals("<p>One</p>", nodes.get(0).outerHtml())
assertEquals("<p>Three</p>", nodes.get(1).outerHtml())
assertEquals(5, divChildren.size())
assertEquals("Text 1 ", tn1.text())
assertEquals("<div id=\"1\">Text 1 <p>One</p> Text 2 <p>Two</p><p>Three</p></div><div id=\"2\">Text 1 updated" + "<p>One</p> Text 2 <p>Two</p><p>Three</p></div>", TextUtil.stripNewlines(doc.body().html()))
assertTrue(el.hasClass("foo"))
assertTrue(elClone.hasClass("foo"))
assertEquals("Text", elClone.text())
assertTrue(elClone.hasClass("foo"))
assertEquals("None", el.text())
assertEquals("Text", elClone.text())
assertEquals(singletonAttributes(), getAttributesCaseInsensitive(inputElement))
assertNotNull(div)
assertNotNull(text)
assertNotNull(docClone)
assertNotSame(doc, docClone)
assertTrue(doc.outputSettings().prettyPrint())
assertEquals(1, docClone.childNodes().size())
assertEquals(textClone, docClone.childNode(0))
assertNotNull(div)
assertNotNull(a)
assertEquals("One ", first.text())
assertEquals(" Three", last.text())
assertNull(a.firstChild())
assertNull(a.lastChild())
assertEquals("span", firstEl.tagName())
assertEquals("a", lastEl.tagName())
assertNull(a.firstElementChild())
assertNull(a.lastElementChild())
assertNull(firstEl.firstElementChild())
assertNull(firstEl.lastElementChild())
assertEquals("", el.text())
assertEquals("", el.ownText())
assertEquals("", el.wholeText())
assertEquals(src, el.html())
assertEquals(src, el.data())
assertEquals("var foo = 5 < 2; var bar = 1 && 2;", el.text())
assertEquals("var foo = 5 < 2; var bar = 1 && 2;", el.ownText())
assertEquals("var foo = 5 < 2;\nvar bar = 1 && 2;", el.wholeText())
assertEquals("var foo = 5 &lt; 2;\nvar bar = 1 &amp;&amp; 2;", el.html())
assertEquals("", el.data())
assertEquals("Foo", el.id())
assertEquals("Foo", el.id())
assertEquals(2, divs.size())
assertEquals("div1", divs.get(0).id())
assertEquals("div2", divs.get(1).id())
assertEquals(2, ps.size())
assertEquals("Hello", ((TextNode) ps.get(0).childNode(0)).getWholeText())
assertEquals("Another ", ((TextNode) ps.get(1).childNode(0)).getWholeText())
assertEquals(ps, ps2)
assertEquals("foo.png", imgs.get(0).attr("src"))
assertEquals(0, empty.size())
assertEquals(1, els.size())
assertEquals("1", els.first().id())
assertEquals("abc:def", els.first().tagName())
assertEquals("div1", div.id())
assertNull(doc.getElementById("none"))
assertEquals("div", div2.tagName())
assertEquals("span", span.tagName())
assertEquals("Hello Another element", doc.text())
assertEquals("Another element", doc.getElementsByTag("p").get(1).text())
assertEquals("Hello there now", p.text())
assertEquals("Hello now", p.ownText())
assertEquals("Hello There. Here is some text.", text)
assertEquals("Hello there.   What's \n\n  that?", doc.text())
assertEquals("code\n\ncode", doc.text())
assertEquals("<pre><code>code\n\ncode</code></pre>", doc.body().html())
assertEquals("code\n\ncode", doc.text())
assertEquals("<pre><code><span><b>code\n\ncode</b></span></code></pre>", doc.body().html())
assertEquals("Hello there", doc.text())
assertEquals("Hello there", doc.select("p").first().ownText())
assertEquals("Hello there", doc.text())
assertEquals("Hello there now", doc.text())
assertEquals("Hello there now", doc.select("p").first().ownText())
assertEquals("Hello there now", doc.text())
assertEquals(" Hello\nthere    ", doc.wholeText())
assertEquals("Hello  \n  there", doc.wholeText())
assertEquals("Hello  \n  there", doc.wholeText())
assertEquals("there", p.text())
assertEquals("Hello", p.previousElementSibling().text())
assertEquals("this", p.nextElementSibling().text())
assertEquals("Hello", p.firstElementSibling().text())
assertEquals("element", p.lastElementSibling().text())
assertEquals("there", p.text())
assertEquals("Hello", p.previousElementSibling().text())
assertEquals("this", p.nextElementSibling().text())
assertEquals("this", p.nextElementSibling().nextElementSibling().text())
assertEquals("is", p.nextElementSibling().nextElementSibling().nextElementSibling().text())
assertEquals("Hello", p.firstElementSibling().text())
assertEquals("element", p.lastElementSibling().text())
assertSame(p, p.firstElementSibling())
assertSame(p, p.lastElementSibling())
assertSame(one, one.firstElementSibling())
assertSame(one, two.firstElementSibling())
assertSame(three, three.lastElementSibling())
assertSame(three, two.lastElementSibling())
assertEquals(4, parents.size())
assertEquals("p", parents.get(0).tagName())
assertEquals("div", parents.get(1).tagName())
assertEquals("body", parents.get(2).tagName())
assertEquals("html", parents.get(3).tagName())
assertEquals(0, ps.get(0).elementSiblingIndex())
assertEquals(1, ps.get(1).elementSiblingIndex())
assertEquals(2, ps.get(2).elementSiblingIndex())
assertEquals(0, ps.get(0).elementSiblingIndex())
assertEquals(1, ps.get(1).elementSiblingIndex())
assertEquals(2, ps.get(2).elementSiblingIndex())
assertEquals(2, els.size())
assertEquals("div", els.get(0).tagName())
assertEquals("span", els.get(1).tagName())
assertEquals(2, els2.size())
assertEquals("div", els2.get(0).tagName())
assertEquals("b", els2.get(1).tagName())
assertEquals(0, none.size())
assertEquals(2, els.size())
assertEquals("div", els.get(0).tagName())
assertEquals("b", els.get(1).tagName())
assertEquals(0, none.size())
assertEquals(1, meta.size())
assertEquals("1", meta.first().id())
assertEquals(1, els.size())
assertEquals("div", els.get(0).tagName())
assertEquals(0, none.size())
assertEquals("mellow yellow", span.className())
assertTrue(span.hasClass("mellow"))
assertTrue(span.hasClass("yellow"))
assertEquals(2, classes.size())
assertTrue(classes.contains("mellow"))
assertTrue(classes.contains("yellow"))
assertEquals("", doc.className())
assertEquals(0, classes.size())
assertTrue(hasClass)
assertTrue(hasClass)
assertTrue(hasClass)
assertTrue(hasClass)
assertTrue(hasClass)
assertTrue(hasClass)
assertTrue(hasClass)
assertTrue(hasClass)
assertTrue(hasClass)
assertEquals("mellow yellow green", div.className())
assertEquals("mellow green", div.className())
assertEquals("mellow red", div.className())
assertEquals("<html><head></head><body><div title=\"Tags &amp;c.\"><img src=\"foo.png\"><p><!-- comment -->Hello</p><p>there</p></div></body></html>", TextUtil.stripNewlines(doc.outerHtml()))
assertEquals("<p>Hello</p>", doc.getElementsByTag("div").get(0).html())
assertEquals("<html>\n <head>\n  <title>Format test</title>\n </head>\n <body>\n  <div>\n   <p>Hello <span>jsoup <span>users</span></span></p>\n   <p>Good.</p>\n  </div>\n </body>\n</html>", doc.html())
assertEquals("<html>\n <head>\n  <title>Format test</title>\n </head>\n <body>\n  <div>\n   <p>\n    Hello \n    <span>\n     jsoup \n     <span>users</span>\n    </span>\n   </p>\n   <p>Good.</p>\n  </div>\n </body>\n</html>", doc.html())
assertEquals("<html>\n<head></head>\n<body>\n<div>\n<p>Hello there</p>\n</div>\n</body>\n</html>", doc.html())
assertEquals(defaultMax, settings.maxPaddingWidth())
assertTrue(html.contains("                              <div>\n" + "                              Foo\n" + "                              </div>"))
assertEquals(32, settings.maxPaddingWidth())
assertTrue(html.contains("                                <div>\n" + "                                Foo\n" + "                                </div>"))
assertEquals(-1, settings.maxPaddingWidth())
assertTrue(html.contains("                                         <div>\n" + "                                          Foo\n" + "                                         </div>"))
assertEquals("<html><head></head><body><div>   \n<p>Hello\n there\n</p></div></body></html>", doc.html())
assertEquals("   \n<p>Hello\n there\n</p>", div.html())
assertEquals("<div><span>1:15</span>–<span>2:15</span>&nbsp;p.m.</div>", document.body().html())
assertEquals("<div>\n <span>1:15</span>–<span>2:15</span>&nbsp;p.m.\n</div>", document.body().html())
assertEquals("<div>\n <span>1:15</span>\n –\n <span>2:15</span>\n &nbsp;p.m.\n</div>", document.body().html())
assertEquals("<span>0</span>.\n" + "<div>\n" + " <span>1</span>-<span>2</span>\n" + " <p><span>3</span>-<span>4</span></p>\n" + " <div>\n" + "  5\n" + " </div>\n" + "</div>", doc.body().html())
assertEquals("<section>\n <div></div>\n</section>", doc.select("section").first().outerHtml())
assertEquals("<script>one\ntwo</script>\n<style>three\nfour</style>", doc.head().html())
assertEquals("<title>Hello there</title>", doc.select("title").first().outerHtml())
assertEquals("<div>\n <p>Hello</p>\n <p>there</p>\n</div>", doc.select("div").first().outerHtml())
assertEquals("<div>\n <p>Hello</p>\n <p>there</p>\n</div>\n<div>\n Another\n</div>", doc.select("body").first().html())
assertEquals("Hello there now", doc.text())
assertEquals("there now", doc.select("p").get(0).text())
assertEquals("Gone", div.text())
assertEquals(0, doc.select("p").size())
assertEquals("<html><head></head><body><div id=\"1\"><p>Hello</p><p>there</p><p class=\"second\">now</p></div></body></html>", TextUtil.stripNewlines(doc.html()))
assertTrue(div.hasAttr("true"))
assertEquals("", div.attr("true"))
assertEquals("<div true></div>", div.outerHtml())
assertEquals("<table><tbody><tr><td>1</td></tr><tr><td>2</td></tr></tbody></table>", TextUtil.stripNewlines(doc.body().html()))
assertEquals("<table><tbody><tr><td>2</td></tr><tr><td>1</td></tr></tbody></table>", TextUtil.stripNewlines(doc.body().html()))
assertEquals("Before", div.child(0).text())
assertEquals("Hello", div.child(1).text())
assertEquals("Hello there & now >", div.text())
assertEquals("<p>Hello</p> there &amp; now &gt;", TextUtil.stripNewlines(div.html()))
assertEquals("there & now > Hello", div.text())
assertEquals("there &amp; now &gt; <p>Hello</p>", TextUtil.stripNewlines(div.html()))
assertEquals("<p>Hello</p><p>there</p><p>now</p>", TextUtil.stripNewlines(div.html()))
assertEquals("<p>there</p><p>now</p><p>Hello</p>", TextUtil.stripNewlines(div.html()))
assertEquals("<p>there</p><p>now</p>", TextUtil.stripNewlines(div.html()))
assertEquals("good", title.html())
assertEquals("&lt;i&gt;bad&lt;/i&gt;", title.html())
assertEquals("<title>&lt;i&gt;bad&lt;/i&gt;</title>", head.html())
assertEquals("<div><div class=\"head\"><p>Hello</p></div><p>There</p></div>", TextUtil.stripNewlines(doc.body().html()))
assertEquals("<div><div class=\"head\"><div><div class=\"foo\"><p>Hello</p></div><p>What?</p></div></div><p>There</p></div>", TextUtil.stripNewlines(doc.body().html()))
assertEquals(ret, p)
assertSame(p, wrapped)
assertEquals("<div><p>Hello</p></div>", TextUtil.stripNewlines(doc.body().html()))
assertSame(orphan, wrapped)
assertTrue(orphan.hasParent())
assertNotNull(orphan.parent())
assertEquals("div", orphan.parent().tagName())
assertEquals("<div>\n <span>Hello!</span>\n</div>", orphan.parent().outerHtml())
assertEquals("div", i.parent().tagName())
assertEquals("<p>Hello <div id=\"id1\"><i>there</i></div> quite now.</p>", TextUtil.stripNewlines(doc.body().html()))
assertEquals("<div><div>one</div><div>two</div><p>Hello</p><p>There</p></div>", TextUtil.stripNewlines(doc.body().html()))
assertEquals("<div><div>one</div><div>two</div><p>Hello</p><p>Three</p><!-- four --><p>There</p></div>", TextUtil.stripNewlines(doc.body().html()))
assertEquals("<div><p>Hello</p><div>one</div><div>two</div><p>There</p></div>", TextUtil.stripNewlines(doc.body().html()))
assertEquals("<div><p>Hello</p><div>one</div><div>two</div><p>There</p><p>Three</p><!-- four --></div>", TextUtil.stripNewlines(doc.body().html()))
assertEquals("<div><div class=\"head\"><p>Hello</p></div><p>There!</p></div>", TextUtil.stripNewlines(doc.body().html()))
assertNotNull(body)
assertEquals("body", body.tagName())
assertNotNull(div)
assertEquals("div", div.tagName())
assertSame(div, p.parent())
assertSame(body, div.parent())
assertEquals("<div><p>Hello</p></div> There", TextUtil.stripNewlines(doc.body().html()))
assertTrue(div.hasText())
assertTrue(ps.first().hasText())
assertEquals(2, dataset.size())
assertEquals("jsoup", dataset.get("name"))
assertEquals("jar", dataset.get("package"))
assertEquals(2, dataset.size())
assertEquals(4, attributes.size())
assertEquals("jsoup updated", attributes.get("data-name"))
assertEquals("jsoup updated", dataset.get("name"))
assertEquals("java", attributes.get("data-language"))
assertEquals("java", dataset.get("language"))
assertEquals(3, dataset.size())
assertEquals("bacon", dataset.get("food"))
assertNull(dataset.get(""))
assertEquals(0, p.dataset().size())
assertEquals("<img src=\"foo\">", img.toString())
assertEquals("<img src=\"foo\">", img.toString())
assertEquals("<div id=\"foo\">\n Hello\n</div>", orphan.toString())
assertNotNull(clone.parentNode)
assertEquals(1, clone.parentNode.childNodeSize())
assertSame(clone.ownerDocument(), clone.parentNode)
assertEquals(0, clone.siblingIndex)
assertEquals(1, p.siblingIndex)
assertNotNull(p.parent())
assertEquals("<p><span>Two</span><span>Three</span></p>", TextUtil.stripNewlines(clone.outerHtml()))
assertEquals("<div><p>One</p><p><span>Two</span></p></div>", TextUtil.stripNewlines(doc.body().html()))
assertNotNull(clone.parent())
assertEquals("<div><p>One</p><p><span>Two</span></p></div><p><span>Two</span><span>Three</span></p>", TextUtil.stripNewlines(doc.body().html()))
assertEquals(2, classes.size())
assertTrue(classes.contains("one"))
assertTrue(classes.contains("two"))
assertEquals(2, copyClasses.size())
assertTrue(copyClasses.contains("one"))
assertTrue(copyClasses.contains("two"))
assertTrue(classes.contains("one"))
assertTrue(copyClasses.contains("three"))
assertEquals("", div.html())
assertEquals("", copy.html())
assertEquals(1, d.childNodeSize())
assertEquals(0, d2.childNodeSize())
assertEquals(1, p.childNodeSize())
assertEquals(0, p2.childNodeSize())
assertEquals("", p2.text())
assertEquals("One", t2.text())
assertEquals("two", p2.className())
assertEquals("two", p.className())
assertEquals(1, d2.childNodeSize())
assertEquals("Three", d2.text())
assertEquals("One", d.text())
assertEquals(base, d2.baseUri())
assertEquals(0, doc.select("i").size())
assertEquals(1, doc.select("em").size())
assertEquals("<em>Hello</em>", doc.select("div").first().html())
assertTrue(doc.html().contains(doc.select("title").outerHtml()))
assertTrue(doc.html().contains(doc.select("div").outerHtml()))
assertEquals(3, textNodes.size())
assertEquals("One ", textNodes.get(0).text())
assertEquals(" Three ", textNodes.get(1).text())
assertEquals(" Four", textNodes.get(2).text())
assertEquals(0, doc.select("br").first().textNodes().size())
assertEquals("One Two three-more Fo-ur", p.text())
assertEquals("One three-more Fo-ur", p.ownText())
assertEquals(4, p.textNodes().size())
assertEquals(1, scriptData.size())
assertEquals("One Two", scriptData.get(0).getWholeData())
assertEquals(1, styleData.size())
assertEquals("Three Four", styleData.get(0).getWholeData())
assertEquals(0, pData.size())
assertEquals("Two", p2.text())
assertEquals(2, els.size())
assertEquals("<p>One</p>", els.get(0).outerHtml())
assertEquals("<p>Three</p>", els.get(1).outerHtml())
assertEquals(2, div.children().size())
assertEquals("One", div.child(0).text())
assertEquals(4, div1.childNodeSize())
assertEquals(4, children.size())
assertEquals(4, children.size())
assertEquals(0, div1.childNodeSize())
assertEquals(4, div2.childNodeSize())
assertEquals("<div id=\"1\"></div>\n<div id=\"2\">\n Text \n <p>One</p> Text \n <p>Two</p>\n</div>", doc.body().html())
assertEquals(2, div2.childNodeSize())
assertEquals(2, div1.childNodeSize())
assertEquals(4, div2.childNodeSize())
assertEquals(3, p1s.get(1).siblingIndex())
assertNull(el1.parent())
assertEquals(div2, el1.parent())
assertEquals(7, div2.childNodeSize())
assertEquals(3, el1.siblingIndex())
assertEquals(4, el2.siblingIndex())
assertEquals(5, tn1.siblingIndex())
assertEquals(4, div1.childNodeSize())
assertEquals(2, div2.childNodeSize())
assertEquals("<div id=\"1\">Text <p>One</p> Text <p>Two</p></div><div id=\"2\"><p>One cloned</p><p>Two</p></div>", TextUtil.stripNewlines(doc.body().html()))
assertEquals(divA.cssSelector(), "#id1")
assertEquals(divB.cssSelector(), "html > body > div:nth-child(2)")
assertEquals(divC.cssSelector(), "html > body > div.c1.c2")
assertSame(divA, doc.select(divA.cssSelector()).first())
assertSame(divB, doc.select(divB.cssSelector()).first())
assertSame(divC, doc.select(divC.cssSelector()).first())
assertEquals(divA.cssSelector(), "html > body > article > div:nth-child(1)")
assertEquals(divB.cssSelector(), "html > body > article > div:nth-child(2)")
assertEquals(divC.cssSelector(), "html > body > article > div.c1")
assertSame(divA, doc.select(divA.cssSelector()).first())
assertSame(divB, doc.select(divB.cssSelector()).first())
assertSame(divC, doc.select(divC.cssSelector()).first())
assertEquals("c1 c2", div.className())
assertEquals(2, arr1.length)
assertEquals("c1", arr1[0])
assertEquals("c2", arr1[1])
assertEquals(2, div.classNames().size())
assertEquals("c1 c2", div.className())
assertEquals("c1 c2 c3", div.className())
assertEquals(3, arr2.length)
assertEquals("c1", arr2[0])
assertEquals("c2", arr2[1])
assertEquals("c3", arr2[2])
assertEquals(8, els.size())
assertEquals(e0, e0)
assertTrue(e0.hasSameValue(e1))
assertTrue(e0.hasSameValue(e4))
assertTrue(e0.hasSameValue(e5))
assertNotEquals(e0, e2)
assertEquals(e0.hashCode(), e0.hashCode())
assertNotEquals(e0.hashCode(), (e2.hashCode()))
assertNotEquals(e0.hashCode(), (e3).hashCode())
assertNotEquals(e0.hashCode(), (e6).hashCode())
assertNotEquals(e0.hashCode(), (e7).hashCode())
assertEquals("http://example.com/bar/one.html", els.get(0).absUrl("href"))
assertEquals("http://example.com/bar/two.html", els.get(1).absUrl("href"))
assertEquals("http://example.com/three.html", els.get(2).absUrl("href"))
assertEquals("http://example2.com/four/", els.get(3).absUrl("href"))
assertEquals("https://example2.com/five/", els.get(4).absUrl("href"))
assertEquals("", els.get(5).absUrl("href"))
assertEquals("http://example.com/bar/", els.get(6).absUrl("href"))
assertEquals(idnFoo, hrefOne)
assertEquals("https://www.测试.测试/bar.html?qux", hrefTwo)
assertEquals("<body><div3>Check</div3><div4></div4><div1></div1><div2></div2></body>", result)
assertTrue(set.contains(root))
assertEquals(1, els.size())
assertEquals("html > body > fb|comments", els.get(0).cssSelector())
assertEquals("<a>Text</a>", a.outerHtml())
assertEquals("<a>Text</a>\n<p>Two</p>", doc.body().html())
assertTrue(p.is("p"))
assertTrue(p.is("p:has(a)"))
assertTrue(p.is("p:first-child"))
assertTrue(p.is("*"))
assertTrue(p.is("div p"))
assertTrue(q.is("p"))
assertTrue(q.is("p ~ p"))
assertTrue(q.is("p + p"))
assertTrue(q.is("p:last-child"))
assertEquals("One Three", p.ownText())
assertTrue(p.is(QueryParser.parse("p")))
assertEquals("div", a.closest(QueryParser.parse("div:has( > p)")).tagName())
assertEquals("body", body.nodeName())
assertEquals("Here is div-03", el.text())
assertEquals("div-03", el.id())
assertEquals("div-02", el.closest("#div-02").id())
assertEquals(el, el.closest("div div"))
assertEquals("div-01", el.closest("article > div").id())
assertEquals("article", el.closest(":not(div)").tagName())
assertNull(el.closest("p"))
assertEquals("P", a.tagName())
assertEquals(2, docChildren.size())
assertEquals("<p><a>One</a></p>", docChildren.get(0).outerHtml())
assertEquals("<p><a>Two</a></p>", docChildren.get(1).outerHtml())
assertEquals(3, div.childNodes().size())
assertEquals("Three", div.childNodes().get(2).outerHtml())
assertEquals(1, p.children().size())
assertEquals("One", p.children().text())
assertEquals(0, span.children().size())
assertEquals(1, span.childNodes().size())
assertEquals("Four", span.childNodes().get(0).outerHtml())
assertEquals(0, foo.children().size())
assertEquals(0, foo.childNodes().size())
assertEquals(0, img.children().size())
assertEquals(0, img.childNodes().size())
assertEquals(2, els.size())
assertEquals(3, nodes.size())
assertEquals(2, els.size())
assertEquals(4, els2.size())
assertEquals("<p><a>One</a></p>\n" + "<p>P3</p>\n" + "<p><a>Two</a></p>\n" + "<p>P4</p>Three", div.html())
assertEquals("P3", els2.get(1).text())
assertEquals("P4", els2.get(3).text())
assertEquals(5, els3.size())
assertEquals("span", els3.get(2).tagName())
assertEquals("Another", els3.get(2).text())
assertEquals("<p><a>One</a></p>\n" + "<p>P3</p><span>Another</span>\n" + "<p><a>Two</a></p>\n" + "<p>P4</p>Three", div.html())
assertEquals("SomeText AnotherText", p.className())
assertTrue(p.classNames().contains("SomeText"))
assertTrue(p.classNames().contains("AnotherText"))
assertTrue(p.hasClass("SomeText"))
assertTrue(p.hasClass("sometext"))
assertTrue(p.hasClass("AnotherText"))
assertTrue(p.hasClass("anothertext"))
assertEquals("One", p1.text())
assertEquals(p1, p2)
assertEquals(p1, p3)
assertEquals(p1, p4)
assertEquals(p1, p5)
assertEquals(p1, p6)
assertEquals(p1, p7)
assertEquals(p1, p8)
assertEquals(p1, p9)
assertEquals(p1, p10)
assertEquals(div, appendTo1)
assertEquals(p, appendTo2)
assertEquals("<div class=\"a\"></div>\n<div class=\"b\">\n <p>Two</p>\n</div>", parentDoc.body().html())
assertEquals("", childDoc.body().html())
assertEquals("You can't always get what you want.", p.text())
assertEquals("<p>" + escaped + "</p>", p.outerHtml())
assertEquals(withNbsp, p.textNodes().get(0).getWholeText())
assertEquals(160, withNbsp.charAt(29))
assertEquals("p", matched.nodeName())
assertTrue(matched.is(":containsOwn(get what you want)"))
assertEquals("Thisisonelongword", p.text())
assertEquals("<p>" + escaped + "</p>", p.outerHtml())
assertEquals(decoded, p.textNodes().get(0).getWholeText())
assertEquals("p", matched.nodeName())
assertTrue(matched.is(":containsOwn(Thisisonelongword)"))
assertEquals("<body><div><p>XXX</p><p>after1</p><p>after2</p></div></body>", TextUtil.stripNewlines(body.outerHtml()))
assertEquals("<body><div><p>before1</p><p>before2</p><p>XXX</p></div></body>", TextUtil.stripNewlines(body.outerHtml()))
assertEquals(expectedText, originalNextElementSibling.text())
assertEquals(expectedText, originalNextSibling.text())
assertEquals(cloneExpect, cloneNextElementSibling.text())
assertEquals(cloneExpect, cloneNextSibling.text())
assertEquals("<img src=\"foo\" noshade nohref async autofocus=\"false\">", img.outerHtml())
assertEquals("One Two", doc.text())
assertEquals("One Two Three Four", doc.text())
assertNotNull(elementSiblings)
assertEquals(2, elementSiblings.size())
assertEquals("b", elementSiblings.get(0).id())
assertEquals("c", elementSiblings.get(1).id())
assertNotNull(elementSiblings1)
assertEquals(1, elementSiblings1.size())
assertEquals("c", elementSiblings1.get(0).id())
assertEquals(0, elementSiblings2.size())
assertNotNull(elementSiblings3)
assertEquals(1, elementSiblings3.size())
assertEquals("div", elementSiblings3.get(0).id())
assertEquals(0, elementSiblings4.size())
assertNotNull(elementSiblings)
assertEquals(1, elementSiblings.size())
assertEquals("a", elementSiblings.get(0).id())
assertEquals(0, elementSiblings1.size())
assertNotNull(elementSiblings2)
assertEquals(2, elementSiblings2.size())
assertEquals("b", elementSiblings2.get(0).id())
assertEquals("a", elementSiblings2.get(1).id())
assertEquals(0, elementSiblings3.size())
assertEquals("<a href=\"http://example.com\">Hello</a>", el.outerHtml())
assertSame(el, el2)
assertEquals("<a>Hello</a>", el2.outerHtml())
assertEquals("<a href=\"http://example.com\" id=\"1\">Hello</a>", el.outerHtml())
assertSame(el, el2)
assertEquals("<a id=\"1\">Hello</a>", el2.outerHtml())
assertEquals("<a><span>Hello</span></a>", el.outerHtml())
assertNotNull(span)
assertSame(el, el2)
assertSame(doc, div.root())
assertSame(doc, div.ownerDocument())
assertNotNull(div)
assertEquals(7, counter.get())
assertEquals(div2, div)
assertNotNull(div)
assertEquals(7, counter.get())
assertEquals(div2, div)
assertNotNull(div)
assertSame(div, div2)
assertEquals("<div><p>One</p><p>Three</p></div>", TextUtil.stripNewlines(doc.body().html()))
assertEquals("<div><p>Hello</p></div><div>There Now<p>Another</p></div>", TextUtil.stripNewlines(doc.body().html()))
assertEquals(12, p.text().length())
assertEquals(text, p.text())
assertEquals(7, d.text().length())
assertEquals("One\u200DTwo", d.text())
assertTrue(found.hasSameValue(d))
assertEquals("<div><p>One</p><p>Two</p></div><p>Three</p><p>Four</p>", TextUtil.stripNewlines(doc.body().html()))
assertEquals("<p>Three</p><p>Four</p><div><p>One</p><p>Two</p></div>", TextUtil.stripNewlines(doc.body().html()))
assertEquals("<p>Four</p><p>Three</p><p>Three</p><p>Four</p><div><p>One</p><p>Two</p></div>", TextUtil.stripNewlines(doc.body().html()))
assertEquals("<p>Four</p><p>Three</p><p>Four</p><div><p>One</p><p>Two</p></div><p>Three</p>", TextUtil.stripNewlines(doc.body().html()))
assertEquals("<div><p>One</p><p>Two</p></div>", TextUtil.stripNewlines(div.outerHtml()))
assertEquals("<nav><p>One</p><p>Three</p></nav>", TextUtil.stripNewlines(wrap.outerHtml()))
assertEquals("<div><p>Two</p><nav><p>One</p><p>Three</p></nav></div>", TextUtil.stripNewlines(div.outerHtml()))
assertEquals("<div><p>Two</p><nav><p>One</p><p>Three</p></nav></div>", TextUtil.stripNewlines(div.outerHtml()))
assertEquals(2, row.childrenSize())
assertEquals(5, row.childNodeSize())
assertTrue(doc.selectFirst("div").isBlock())
assertTrue(doc.selectFirst("p").isBlock())
assertNotNull(el)
assertNotNull(xEl)
assertEquals("<script>var foo = 4 < 2;\nvar bar > 1 && 2;</script>", el.outerHtml())
assertEquals("<script>" + escaped + "</script>", xEl.outerHtml())
assertEquals("<p></p>", pH)
assertEquals("<i></i>", iH)
assertEquals(p.outerHtml(), p.toString())
assertEquals(i.outerHtml(), i.toString())
assertNotNull(style)
assertEquals(styleContents, style.html())
assertEquals(styleContents, style.html())
assertEquals("", style.text())
assertEquals("", style.text())
assertEquals(styleContents, style.html())
assertEquals("<div></div>\n<div>\n <p>One</p>\n <p>Two</p>\n <p>Three</p>\n</div>", doc.body().html())
assertEquals("<div></div>\n<div></div>\n<p>One</p>\n<p>Two</p>\n<p>Three</p>", doc.body().html())
assertEquals("<div></div>\n<div>\n <p>Four</p>\n <p>One</p>\n <p>Two</p>\n <p>Three</p>\n</div>", doc.body().html())
assertEquals("<div></div>\n<div>\n <p>One</p>\n <p>Two</p>\n <p>Three</p>\n <p>Four</p>\n</div>", doc.body().html())
assertNotNull(outer)
assertEquals("<div></div>\n<div>\n <p>Four</p>\n</div>\n<p>One</p>\n<p>Two</p>\n<p>Three</p>", doc.body().html())
assertEquals("", div.attr("href"))
assertEquals(1, hrefs.size())
assertTrue(a.hasAttributes())
assertEquals(0, p.childNodeSize())
assertEquals(0, p.childrenSize())
assertEquals(0, childNodes.size())
assertEquals(0, children.size())
assertEquals(0, els.size())
assertEquals(1, els.size())
assertNotNull(p)
assertEquals(0, p.attributesSize())
assertEquals(1, p.attributesSize())
assertTrue(p.hasAttributes())
assertEquals(0, p.attributesSize())
assertNotNull(div)
assertNotNull(text)
assertNotNull(docClone)
assertNotSame(doc, docClone)
assertSame(docClone, divClone.childNode(0).ownerDocument())
assertTrue(doc.outputSettings().prettyPrint())
assertEquals(1, docClone.children().size())
assertEquals(divClone, docClone.child(0))
assertEquals(html, html2)
assertEquals(html, html2)
assertNotNull(p)
assertEquals(html, p.outerHtml())
assertEquals("Hello World", p.text())
assertEquals("Hello\nWorld", p.wholeText())
assertNotNull(div)
assertEquals(expect, actual)
assertEquals(expectText, div.wholeText())
assertEquals(expectOwn, div.child(0).wholeOwnText())
assertEquals("Three", span.text())
assertNull(doc.selectFirst("div"))
assertTrue(threw)
assertTrue(threw)
assertTrue(threw)
assertEquals(text, body.text())
assertEquals(text, body.text())
assertEquals("<p><span>One</span> <span>Two</span> <span>Three</span></p>", body.html())
assertEquals("<!--\nlicense\n-->\n<!doctype html>\n<html>\n <head></head>\n <body></body>\n</html>", doc1.html())
assertEquals("<!--\nlicense\n--><!doctype html>\n<html><head></head><body></body></html>", doc1.html())
assertEquals("<!doctype html>\n<html>\n <head></head>\n <body></body>\n</html>", doc2.html())
assertEquals("<!doctype html>\n<html>\n <head></head>\n <body></body>\n</html>", doc3.html())
assertEquals("<!doctype html>\n<html>\n <head></head>\n <body></body>\n</html>", doc4.html())
assertEquals("<!--\n comment \n -->\n<!doctype html>\n<html>\n <head></head>\n <body></body>\n</html>", doc5.html())
assertEquals("<!--\n comment \n -->\n<!doctype html>\n<html>\n <head></head>\n <body></body>\n</html>", doc6.html())
assertEquals("<div>\n {{ msg }}\n</div>\n<div>\n {{ msg }}\n</div>", doc.body().html())
assertEquals("<p>This <span>is </span>fine.</p>", doc.body().html())
assertEquals("<div>\n" + " <p>One Two</p> <a> Hello </a>\n" + " <p>Some text</p>\n" + "</div>", doc.body().html())
assertEquals("<div><a>Text</a>\n</div>", doc.body().html())
assertTrue(one.isBlank())
assertTrue(two.isBlank())
assertTrue(three.isBlank())
assertEquals("two &", span.text())
assertEquals("two &", spanText.text())
assertEquals(" three &", tn.text())
assertEquals("One <span>two &amp;</span> POW!", TextUtil.stripNewlines(p.html()))
assertEquals("kablam &", tn.text())
assertEquals("One <span>two &amp;</span>kablam &amp;", TextUtil.stripNewlines(p.html()))
assertEquals("Hello ", tn.getWholeText())
assertEquals("there", tail.getWholeText())
assertEquals("Hello there!", div.text())
assertSame(tn.parent(), tail.parent())
assertEquals("Hello <b>there</b>", TextUtil.stripNewlines(div.html()))
assertEquals(new String(Character.toChars(135361)), t.outerHtml().trim())
assertEquals(0, nodes.size())
assertEquals(whole, tn.getWholeText())
assertEquals(norm, tn.text())
assertEquals(norm, tn.outerHtml())
assertEquals(norm, tn.toString())
assertEquals(whole, tn.getWholeText())
assertEquals(norm, tn.text())
assertEquals(norm, tn.outerHtml())
assertEquals(norm, tn.toString())
assertEquals("<p>" + norm + "</p>", el.outerHtml())
assertEquals(norm, el.html())
assertEquals(whole, el.wholeText())
assertNotSame(x, y)
assertEquals(x.outerHtml(), y.outerHtml())
assertNotEquals(x.outerHtml(), y.outerHtml())
assertEquals("zzz", x.text())
assertEquals("zzz", x.text())
assertEquals("xxx", y.text())
assertEquals("zzz", x.text())
assertEquals("xxx", y.text())
assertTrue(foundFirst)
assertEquals(rows, wrapper.childNodes.size())
assertEquals(rows, childNodes.size())
assertEquals(0, doc.body().childNodes().size())
assertEquals(wrapper, wrapperAcutal)
assertEquals("El-1", wrapperAcutal.children().get(0).text())
assertEquals("El-" + rows, wrapperAcutal.children().get(rows - 1).text())
assertTrue(runtime <= 10000)
assertEquals(2, wrapper.childNodes.size())
assertEquals(rows + 2, wrapper.childNodes.size())
assertEquals(rows, childNodes.size())
assertEquals(0, doc.body().childNodes().size())
assertEquals(wrapper, wrapperAcutal)
assertEquals("Prior Content", wrapperAcutal.children().get(0).text())
assertEquals("El-1", wrapperAcutal.children().get(1).text())
assertEquals("El-" + rows, wrapperAcutal.children().get(rows).text())
assertEquals("End Content", wrapperAcutal.children().get(rows + 1).text())
assertTrue(runtime <= 10000)
assertEquals("Replaced", doc.text())
assertEquals("Replaced", doc.body().text())
assertEquals(1, doc.select("head").size())
assertEquals("", noTitle.title())
assertEquals("Hello", noTitle.title())
assertEquals("Hello", noTitle.select("title").first().text())
assertEquals("First", withTitle.title())
assertEquals("Hello", withTitle.title())
assertEquals("Hello", withTitle.select("title").first().text())
assertEquals("Hello there now", normaliseTitle.title())
assertEquals("<p title=\"π\">π &amp; &lt; &gt;</p>", doc.body().html())
assertEquals("UTF-8", doc.outputSettings().charset().name())
assertEquals(Entities.EscapeMode.base, doc.outputSettings().escapeMode())
assertEquals("<p title=\"&#x3c0;\">&#x3c0; &amp; &lt; &gt;</p>", doc.body().html())
assertEquals("<p title=\"&pi;\">&pi; &amp; &lt; &gt;</p>", doc.body().html())
assertEquals("&lt; &gt; &amp; \" ' ×", doc.body().html())
assertEquals("<html><head><script>one</script><noscript>&lt;p&gt;two</noscript></head><body><p>three</p><p>four</p></body></html>", TextUtil.stripNewlines(doc.html()))
assertEquals("", doc.html())
assertEquals("body", body.tagName())
assertEquals("head", head.tagName())
assertEquals("<html><head></head><body></body></html>", TextUtil.stripNewlines(doc.html()))
assertEquals("BODY", body.tagName())
assertEquals("body", body.normalName())
assertEquals("HEAD", head.tagName())
assertEquals("body", body.normalName())
assertEquals("HTML", root.tagName())
assertEquals("html", root.normalName())
assertEquals("SHOUTY", doc.title())
assertEquals("<html><head><title>Hello</title></head><body><p>One</p><p>Two</p></body></html>", TextUtil.stripNewlines(clone.html()))
assertEquals("<html><head><title>Hello there</title></head><body><p id=\"1\">One more</p><p>Two</p></body></html>", TextUtil.stripNewlines(clone.html()))
assertEquals("<html><head><title>Hello</title></head><body><p>One</p><p>Two</p></body></html>", TextUtil.stripNewlines(doc.html()))
assertEquals(expect, doc.html())
assertEquals(doc.html(), clone.html())
assertEquals("<!doctype html><html><head><title>Doctype test</title></head><body></body></html>", TextUtil.stripNewlines(clone.html()))
assertEquals("http://www.yahoo.co.jp/index.html", location)
assertEquals("http://www.yahoo.co.jp/_ylh=X3oDMTB0NWxnaGxsBF9TAzIwNzcyOTYyNjUEdGlkAzEyBHRtcGwDZ2Ex/", baseUri)
assertEquals("http://www.nytimes.com/2010/07/26/business/global/26bp.html?hp", location)
assertEquals("http://www.nytimes.com/2010/07/26/business/global/26bp.html?hp", baseUri)
assertEquals("", doc.location())
assertEquals("<!doctype html>\n" + "<html>\n" + " <head></head>\n" + " <body>\n" + "  <img async checked src=\"&amp;<>&quot;\">&lt;&gt;&amp;\"<foo />bar\n" + " </body>\n" + "</html>", doc.html())
assertEquals("<!DOCTYPE html>\n" + "<html>\n" + " <head></head>\n" + " <body>\n" + "  <img async=\"\" checked=\"checked\" src=\"&amp;&lt;>&quot;\" />&lt;&gt;&amp;\"<foo />bar\n" + " </body>\n" + "</html>", doc.html())
assertEquals(Syntax.html, doc.outputSettings().syntax())
assertEquals(htmlContent, document.html(new StringWriter()).toString())
assertEquals(expectedLink, doc.selectFirst("a").attr("abs:href"))
assertEquals(expectedLink, clone.selectFirst("a").attr("abs:href"))
assertNotEquals(docA, docB)
assertEquals(docA, docA)
assertEquals(docA.hashCode(), docA.hashCode())
assertNotEquals(docA.hashCode(), docC.hashCode())
assertTrue(docA.hasSameValue(docB))
assertEquals(htmlCharsetUTF8, doc.toString())
assertEquals(charsetUtf8, doc.charset().name())
assertEquals(charsetUtf8, selectedElement.attr("charset"))
assertEquals(doc.charset(), doc.outputSettings().charset())
assertEquals(htmlCharsetISO, doc.toString())
assertEquals(charsetIso8859, doc.charset().name())
assertEquals(charsetIso8859, selectedElement.attr("charset"))
assertEquals(doc.charset(), doc.outputSettings().charset())
assertEquals(charsetUtf8, docNoCharset.select("meta[charset]").first().attr("charset"))
assertEquals(htmlCharsetUTF8, docNoCharset.toString())
assertEquals(htmlNoCharset, docDisabled.toString())
assertNull(docDisabled.select("meta[charset]").first())
assertEquals(htmlCharset, doc.toString())
assertNotNull(selectedElement)
assertEquals("dontTouch", selectedElement.attr("charset"))
assertNotNull(selectedElement)
assertEquals("dontTouch", selectedElement.attr("content"))
assertEquals(charsetUtf8, selectedElement.attr("charset"))
assertTrue(doc.select("meta[name=charset]").isEmpty())
assertEquals(htmlCharsetUTF8, doc.toString())
assertEquals(xmlCharsetUTF8, doc.toString())
assertEquals(charsetUtf8, doc.charset().name())
assertEquals(charsetUtf8, selectedNode.attr("encoding"))
assertEquals(doc.charset(), doc.outputSettings().charset())
assertEquals(xmlCharsetISO, doc.toString())
assertEquals(charsetIso8859, doc.charset().name())
assertEquals(charsetIso8859, selectedNode.attr("encoding"))
assertEquals(doc.charset(), doc.outputSettings().charset())
assertEquals(xmlCharsetUTF8, doc.toString())
assertEquals(charsetUtf8, selectedNode.attr("encoding"))
assertEquals(xmlNoCharset, doc.toString())
assertEquals(xmlCharset, doc.toString())
assertEquals("dontTouch", selectedNode.attr("encoding"))
assertEquals("dontTouch", selectedNode.attr("version"))
assertEquals(html, p.outerHtml())
assertEquals(html, out[0])
assertEquals(StandardCharsets.US_ASCII, doc.outputSettings().charset())
assertEquals(asci, p.outerHtml())
assertNotNull(documentType)
assertEquals("html", documentType.name())
assertNotNull(head)
assertEquals("Frame Test", doc.title())
assertNull(doc.selectFirst("body"))
assertNotNull(frameset)
assertNotNull(body)
assertSame(frameset, body)
assertEquals("frame", body.child(0).tagName())
assertNull(doc.selectFirst("body"))
assertEquals(expected, doc.html())
assertEquals(0, meta.getLength())
assertEquals(expected, TextUtil.stripNewlines(out))
assertEquals("Text", roundTrip.getElementsByTagName("p").item(0).getTextContent())
assertTrue(furtherOut.length() > out.length())
assertEquals(furtherExpected, TextUtil.stripNewlines(furtherOut))
assertNull(htmlEl.getNamespaceURI())
assertEquals("html", htmlEl.getLocalName())
assertEquals("html", htmlEl.getNodeName())
assertSame(doctype, doctypeNode)
assertEquals("html", doctype.getName())
assertTrue(xml.contains("ipod"))
assertEquals("Images", roundTrip.getElementsByTagName("a").item(0).getTextContent())
assertEquals(doc.location(), wDoc.getDocumentURI())
assertEquals("http://www.w3.org/1999/xhtml", htmlEl.getNamespaceURI())
assertEquals("html", htmlEl.getLocalName())
assertEquals("html", htmlEl.getNodeName())
assertEquals("http://www.w3.org/1999/xhtml", head.getNamespaceURI())
assertEquals("head", head.getLocalName())
assertEquals("head", head.getNodeName())
assertEquals("Check", epubTitle.getTextContent())
assertEquals("http://www.idpf.org/2007/ops", epubTitle.getNamespaceURI())
assertEquals("title", epubTitle.getLocalName())
assertEquals("epub:title", epubTitle.getNodeName())
assertEquals("urn:test", xSection.getNamespaceURI())
assertEquals("section", xSection.getLocalName())
assertEquals("x:section", xSection.getNodeName())
assertEquals("http://www.w3.org/2000/svg", svg.getNamespaceURI())
assertEquals("svg", svg.getLocalName())
assertEquals("svg", svg.getNodeName())
assertEquals("http://www.w3.org/2000/svg", path.getNamespaceURI())
assertEquals("path", path.getLocalName())
assertEquals("path", path.getNodeName())
assertEquals("http://example.com/clip", clip.getNamespaceURI())
assertEquals("clip", clip.getLocalName())
assertEquals("clip", clip.getNodeName())
assertEquals("456", clip.getTextContent())
assertEquals("http://www.w3.org/1999/xhtml", picture.getNamespaceURI())
assertEquals("picture", picture.getLocalName())
assertEquals("picture", picture.getNodeName())
assertEquals("http://www.w3.org/1999/xhtml", img.getNamespaceURI())
assertEquals("img", img.getLocalName())
assertEquals("img", img.getNodeName())
assertTrue(body.hasAttr("\""))
assertTrue(body.hasAttr("name\""))
assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><html><head/><body name=\"\" style=\"color: red\"/></html>", xml)
assertEquals(expected, TextUtil.stripNewlines(out))
assertEquals(expected, TextUtil.stripNewlines(out))
assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><html><head/><body>&lt;インセンティブで高収入！&gt;Text <p>More</p></body></html>", xml)
assertNull(htmlEl.getNamespaceURI())
assertEquals("html", htmlEl.getLocalName())
assertEquals("html", htmlEl.getNodeName())
assertNull(fb.getNamespaceURI())
assertEquals("like", fb.getLocalName())
assertEquals("fb:like", fb.getNodeName())
assertEquals("div", nodeList.item(0).getLocalName())
assertNull(nodeList)
assertNotNull(nodeList)
assertEquals(1, nodeList.getLength())
assertEquals("div", nodeList.item(0).getLocalName())
assertEquals("http://www.w3.org/1999/xhtml", nodeList.item(0).getNamespaceURI())
assertNull(nodeList.item(0).getPrefix())
assertEquals("body", item.getNodeName())
assertNull(item.getNamespaceURI())
assertNull(item.getPrefix())
assertNull(nodeList)
assertTrue(w3c.namespaceAware())
assertEquals("div", nodeList.item(0).getLocalName())
assertTrue(output(publicDoc, false).startsWith("<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE html PUBLIC"))
assertEquals(want.toLowerCase(Locale.ROOT), have.toLowerCase(Locale.ROOT))
assertNotNull(jDiv)
assertEquals("div", div.getLocalName())
assertEquals(jDiv, div.getUserData(W3CDom.SourceProperty))
assertEquals("One", textNode.getTextContent())
assertEquals(Node.TEXT_NODE, textNode.getNodeType())
assertEquals(jText, textNode.getUserData(W3CDom.SourceProperty))
assertEquals("utf-8", DataUtil.getCharsetFromContentType("text/html;charset=utf-8 "))
assertEquals("UTF-8", DataUtil.getCharsetFromContentType("text/html; charset=UTF-8"))
assertEquals("ISO-8859-1", DataUtil.getCharsetFromContentType("text/html; charset=ISO-8859-1"))
assertNull(DataUtil.getCharsetFromContentType("text/html"))
assertNull(DataUtil.getCharsetFromContentType(null))
assertNull(DataUtil.getCharsetFromContentType("text/html;charset=Unknown"))
assertEquals("utf-8", DataUtil.getCharsetFromContentType("text/html; charset=\"utf-8\""))
assertEquals("UTF-8", DataUtil.getCharsetFromContentType("text/html;charset=\"UTF-8\""))
assertEquals("ISO-8859-1", DataUtil.getCharsetFromContentType("text/html; charset=\"ISO-8859-1\""))
assertNull(DataUtil.getCharsetFromContentType("text/html; charset=\"Unsupported\""))
assertEquals("UTF-8", DataUtil.getCharsetFromContentType("text/html; charset='UTF-8'"))
assertEquals("One", doc.head().text())
assertEquals("One", doc.head().text())
assertEquals("UTF-8", doc.outputSettings().charset().displayName())
assertNull(DataUtil.getCharsetFromContentType("text/html; charset="))
assertNull(DataUtil.getCharsetFromContentType("text/html; charset=;"))
assertEquals("ISO-8859-1", DataUtil.getCharsetFromContentType("text/html; charset=ISO-8859-1, charset=1251"))
assertEquals("iso-8859-1", DataUtil.getCharsetFromContentType("text/html; charset=charset=iso-8859-1"))
assertNull(DataUtil.getCharsetFromContentType("text/html; charset=$HJKDF§$/("))
assertEquals(DataUtil.boundaryLength, m1.length())
assertEquals(DataUtil.boundaryLength, m2.length())
assertNotSame(m1, m2)
assertEquals(expected, doc.toString())
assertEquals("한국어", doc.body().text())
assertEquals("Übergrößenträger", doc.body().text())
assertEquals(fileContent, doc.outerHtml())
assertTrue(doc.title().contains("UTF-16BE"))
assertTrue(doc.text().contains("가각갂갃간갅"))
assertTrue(doc.title().contains("UTF-16LE"))
assertTrue(doc.text().contains("가각갂갃간갅"))
assertTrue(doc.title().contains("UTF-32BE"))
assertTrue(doc.text().contains("가각갂갃간갅"))
assertTrue(doc.title().contains("UTF-32LE"))
assertTrue(doc.text().contains("가각갂갃간갅"))
assertEquals("OK", doc.head().select("title").text())
assertEquals("OK", doc.head().select("title").text())
assertEquals("There is a UTF8 BOM at the top (before the XML decl). If not read correctly, will look like a non-joining space.", doc.body().text())
assertEquals("Hellö Wörld!", doc.body().text())
assertEquals("Gzip test", doc.title())
assertEquals("This is a gzipped HTML file.", doc.selectFirst("p").text())
assertEquals("Gzip test", doc.title())
assertEquals("This is a gzipped HTML file.", doc.selectFirst("p").text())
assertEquals("This is not gzipped", doc.title())
assertEquals("And should still be readable.", doc.selectFirst("p").text())
assertTrue(doc.hasSameValue(expected))
assertEquals(input, read)
assertEquals(Connection.Method.GET, con.request().method())
assertTrue(res.hasHeader("Accept-Encoding"))
assertTrue(res.hasHeader("accept-encoding"))
assertTrue(res.hasHeader("accept-Encoding"))
assertTrue(res.hasHeader("ACCEPT-ENCODING"))
assertEquals("gzip", res.header("accept-Encoding"))
assertEquals("gzip", res.header("ACCEPT-ENCODING"))
assertEquals("text/html", res.header("Content-Type"))
assertEquals("http://example.com", res.header("Referrer"))
assertEquals("deflate", res.header("Accept-Encoding"))
assertEquals("deflate", res.header("accept-Encoding"))
assertEquals("text/html", con.request().header("content-type"))
assertEquals("keep-alive", con.request().header("Connection"))
assertEquals("http://example.com", con.request().header("Host"))
assertEquals("no-cache, no-store", res.header("Cache-Control"))
assertTrue(req.hasHeader("Accept"))
assertTrue(req.hasHeader("ACCEpt"))
assertEquals("Something, Everything", req.header("accept"))
assertTrue(req.hasHeader("fOO"))
assertEquals("Bar", req.header("foo"))
assertEquals(2, accept.size())
assertEquals("Something", accept.get(0))
assertEquals("Everything", accept.get(1))
assertEquals(accept, headers.get("Accept"))
assertEquals("Bar", headers.get("Foo").get(0))
assertTrue(req.hasHeader("Accept"))
assertTrue(req.hasHeaderWithValue("accept", "Something"))
assertTrue(req.hasHeaderWithValue("accept", "Everything"))
assertEquals("Bar", headers.get("Foo").get(0))
assertNull(headers.get("Accept"))
assertEquals(0, res.cookies().size())
assertEquals(4, res.cookies().size())
assertEquals("", res.cookie("one"))
assertEquals("", res.cookie("two"))
assertEquals("", res.cookie("three"))
assertEquals("data", res.cookie("four"))
assertEquals("http://example.com", con.request().url().toExternalForm())
assertEquals(HttpConnection.DEFAULT_UA, con.request().header("User-Agent"))
assertEquals("Mozilla", con.request().header("User-Agent"))
assertEquals(30 * 1000, con.request().timeout())
assertEquals(1000, con.request().timeout())
assertEquals("http://foo.com", con.request().header("Referer"))
assertEquals(Connection.Method.GET, con.request().method())
assertEquals(Connection.Method.POST, con.request().method())
assertEquals("Name", one.key())
assertEquals("Val", one.value())
assertEquals("Foo", two.key())
assertEquals("bar", two.value())
assertEquals("Val", con.request().cookie("Name"))
assertEquals("file", kv.key())
assertEquals("thumb.jpg", kv.value())
assertTrue(kv.hasInputStream())
assertEquals("one", kv.key())
assertEquals("two", kv.value())
assertEquals("foo", con.request().requestBody())
assertEquals("http://test.com/?q=white%20space", url2.toExternalForm())
assertTrue(threw)
assertEquals(puny, con.request().url().toExternalForm())
assertEquals(puny, req.url().toExternalForm())
assertTrue(urlThrew)
assertTrue(threw)
Assertions.assertTrue(threw)
Assertions.assertTrue(threw)
assertTrue(threw)
assertFalse(p.formatAsBlock())
assertFalse(img.isBlock())
assertFalse(Tag.isKnownTag("explain"))
assertFalse(Jsoup.isValid(html, Safelist.relaxed()))
assertFalse(doc.body().html().contains("&lt;"))
assertFalse(doc.body().html().contains("&gt;"))
assertFalse(didAddElements(full))
assertFalse(r.isEmpty())
assertFalse(r.isEmpty())
assertFalse(r.isEmpty())
assertFalse(r.matches("one"))
assertFalse(r.matches("One"))
assertFalse(r.matches("ne Two Three Four"))
assertFalse(r.matches("ne"))
assertFalse(r.matches('o'))
assertFalse(r.matchesIgnoreCase("One"))
assertFalse(r.matchesIgnoreCase("ne Two Three Four"))
assertFalse(r.matchesIgnoreCase("ne"))
assertFalse(r.containsIgnoreCase("one"))
assertFalse(r.containsIgnoreCase("</not>"))
assertFalse(r.containsIgnoreCase("</not>"))
assertFalse(r.containsIgnoreCase("</not>"))
assertFalse(r.containsIgnoreCase("</not>"))
assertFalse(r.containsIgnoreCase("</title>"))
assertFalse(r.matches("<foo>"))
assertFalse(r.matchesAny(scan))
assertFalse(r.matchesAny(scan))
assertFalse(r.rangeEquals(0, 5, "CHOKE"))
assertFalse(r.rangeEquals(0, 5, "Chec"))
assertFalse(r.rangeEquals(6, 5, "Chuck"))
assertFalse(r.rangeEquals(12, 5, "Cheeky"))
assertFalse(r.rangeEquals(18, 5, "CHIKE"))
assertFalse(r.isEmpty())
assertFalse(reader.isTrackNewlines())
assertFalse(reader.isTrackNewlines())
assertFalse(noTrack.isTrackNewlines())
assertFalse(comment.isXmlDeclaration())
assertFalse(hasAnyAttributes(html))
assertFalse(hasAnyAttributes(html))
assertFalse(hasAnyAttributes(html))
assertFalse(hasAnyAttributes(html))
assertFalse(p.hasClass("Foobs"))
assertFalse(hasAnyAttributes(html))
assertFalse(hasAnyAttributes(p))
assertFalse(hasAnyAttributes(html))
assertFalse(attributes.hasKey("class"))
assertFalse(first.hasDeclaredValue())
assertFalse(a2.hasDeclaredValue())
assertFalse(Attribute.isBooleanAttribute("random string"))
assertFalse(htmlParser.isTrackPosition())
assertFalse(xmlParser.isTrackPosition())
assertFalse(body.sourceRange().isTracked())
assertFalse(pEndRange.isTracked())
assertFalse(a.hasKey("tot"))
assertFalse(a.hasKey("Tot"))
assertFalse(a.hasKey("Foo"))
assertFalse(a.hasKey("Tot"))
assertFalse(a.hasKey("Hello"))
assertFalse(it.hasNext())
assertFalse(iterator.hasNext())
assertFalse(a.hasKey("Tot"))
assertFalse(ats.hasDeclaredValueForKey("A"))
assertFalse(ats.hasDeclaredValueForKey("c"))
assertFalse(ats.hasDeclaredValueForKey("C"))
assertFalse(ats.hasDeclaredValueForKeyIgnoreCase("C"))
assertFalse(one.hasAttr("abs:href"))
assertFalse(el.hasClass("foo"))
assertFalse(docClone.outputSettings().prettyPrint())
assertFalse(docClone.outputSettings().prettyPrint())
assertFalse(doc.hasClass("mellow"))
assertFalse(hasClass)
assertFalse(hasClass)
assertFalse(hasClass)
assertFalse(div.hasAttr("false"))
assertFalse(orphan.hasParent())
assertFalse(ps.last().hasText())
assertFalse(classes.contains("three"))
assertFalse(copyClasses.contains("one"))
assertFalse(e0.hasSameValue(e2))
assertFalse(e0.hasSameValue(e3))
assertFalse(e0.hasSameValue(e6))
assertFalse(e0.hasSameValue(e7))
assertFalse(p.is("div"))
assertFalse(p.is("a"))
assertFalse(p.is("p:last-child"))
assertFalse(q.is("p a"))
assertFalse(q.is("a"))
assertFalse(p.is(aEval))
assertFalse(hasClass)
assertFalse(doc.body().html().contains("class=\"\""))
assertFalse(doc.selectFirst("span").isBlock())
assertFalse(div.hasAttributes())
assertFalse(p.hasAttributes())
assertFalse(p.hasChildNodes())
assertFalse(p.hasChildNodes())
assertFalse(p.hasAttributes())
assertFalse(p.hasAttributes())
assertFalse(docClone.outputSettings().prettyPrint())
assertFalse(docClone.outputSettings().prettyPrint())
assertFalse(four.isBlank())
assertFalse(five.isBlank())
assertFalse(docA.hasSameValue(docC))
assertFalse(doc.updateMetaCharsetElement())
assertFalse(w3c.namespaceAware())
assertFalse(doc.outerHtml().contains("\u0000"))
assertFalse(res.hasHeader("content-type"))
assertFalse(res.hasHeader("Accept-Encoding"))
assertFalse(req.hasHeaderWithValue("accept", "Something for nothing"))
assertFalse(req.hasHeader("Accept"))
assertFalse(kv.hasInputStream())
assertFalse(safelist2.isSafeTag("invalidTag"))
assertFalse(safelist2.isSafeAttribute(TEST_TAG, null, new Attribute("invalidAttribute", TEST_VALUE)))
assertFalse(safelist2.isSafeAttribute(TEST_TAG, invalidElement, invalidAttribute))
assertEquals("Hello <b>there</b>!", TextUtil.stripNewlines(cleanHtml))
assertEquals("Hello <b>there</b>!", TextUtil.stripNewlines(cleanHtml))
assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml))
assertEquals("<p><img src=\"http://example.com/\" alt=\"Image\"></p><p><img></p>", TextUtil.stripNewlines(cleanHtml))
assertEquals("<h1>Head</h1><table><tbody><tr><td>One</td><td>Two</td></tr></tbody></table>", TextUtil.stripNewlines(cleanHtml))
assertEquals("<p>Nice</p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml))
assertEquals("<p>Nice</p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml))
assertEquals("<p><a href=\"http://nice.com\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml))
assertEquals("<p>Contact me <a rel=\"nofollow\">here</a></p>", TextUtil.stripNewlines(cleanHtml))
assertEquals("<a href=\"SOMETHING://x\"></a>", TextUtil.stripNewlines(cleanHtml))
assertEquals("<p>Hello</p>", cleanHtml)
assertEquals("<p>Hello</p>", cleanHtml)
assertEquals("", cleanHtml)
assertEquals("<img>", cleanHtml)
assertEquals("<a>XSS</a>", cleanHtml)
assertEquals("<a>Valid anchor</a>", cleanHtml)
assertEquals("<a>Invalid anchor</a>", cleanHtml)
assertEquals(validAnchor, cleanHtml)
assertEquals("<a>Invalid anchor</a>", cleanHtml)
assertEquals("<p>Test</p>", cleanHtml)
assertEquals("<img alt=\"\">", cleanHtml)
assertTrue(Jsoup.isValid(ok, Safelist.basic()))
assertTrue(Jsoup.isValid(ok1, Safelist.basic()))
assertTrue(cleaner.isValid(okDoc))
assertEquals("<a href=\"http://example.com/foo\" rel=\"nofollow\">Link</a><img src=\"http://example.com/bar\">", clean)
assertEquals("<a href=\"/foo\" rel=\"nofollow\">Link</a><img src=\"/bar\"> <img>", clean)
assertEquals("<a rel=\"nofollow\">Link</a>", clean)
assertEquals("<a rel=\"nofollow\">Link</a>", clean)
assertEquals("<a rel=\"nofollow\">Link</a>", cleanColon)
assertEquals("<a rel=\"nofollow\">Link</a>", clean)
assertEquals("<img> <img>", dropped)
assertEquals("<img src=\"cid:12345\"> <img src=\"data:gzzt\">", preserved)
assertEquals("<p class=\"foo\"><a class=\"qux\">link</a></p>", clean)
assertEquals("<p class=\"foo\">One</p>", clean)
assertNotSame(defaultOut, customOut)
assertEquals("<div><p>&Bscr;</p></div>", customOut)
assertEquals("<div>\n" + " <p>ℬ</p>\n" + "</div>", defaultOut)
assertEquals("<div><p>&#x212c;</p></div>", customOut2)
assertEquals("", clean)
assertNotNull(cleanDoc)
assertEquals(0, cleanDoc.body().childNodeSize())
assertEquals("привет", Jsoup.clean("привет", Safelist.none()))
assertTrue(Jsoup.isValid("Hello<script>alert('Doh')</script>World !", safelist))
assertEquals("<a rel=\"nofollow\"></a>", clean)
assertEquals("<a rel=\"nofollow\">Clean</a>", clean)
assertEquals("<a>One</a> <a>Two</a>", clean)
assertEquals(orig, TextUtil.stripNewlines(clean))
assertTrue(isValid)
assertEquals(Document.OutputSettings.Syntax.xml, result.outputSettings().syntax())
assertEquals("<p>test<br /></p>", result.body().html())
assertEquals("2,2:22-2,5:25", origRange.toString())
assertEquals(cleanRange, origRange)
assertEquals(clean.endSourceRange(), orig.endSourceRange())
assertEquals("", StringUtil.join(Collections.singletonList(""), " "))
assertEquals("one", StringUtil.join(Collections.singletonList("one"), " "))
assertEquals("one two three", StringUtil.join(Arrays.asList("one", "two", "three"), " "))
assertEquals("", StringUtil.padding(0))
assertEquals(" ", StringUtil.padding(1))
assertEquals("  ", StringUtil.padding(2))
assertEquals("               ", StringUtil.padding(15))
assertEquals("                              ", StringUtil.padding(45))
assertEquals("", StringUtil.padding(0, -1))
assertEquals("                    ", StringUtil.padding(20, -1))
assertEquals("                     ", StringUtil.padding(21, -1))
assertEquals("                              ", StringUtil.padding(30, -1))
assertEquals("                                             ", StringUtil.padding(45, -1))
assertEquals("", StringUtil.padding(0, 0))
assertEquals("", StringUtil.padding(21, 0))
assertEquals("", StringUtil.padding(0, 30))
assertEquals(" ", StringUtil.padding(1, 30))
assertEquals("  ", StringUtil.padding(2, 30))
assertEquals("               ", StringUtil.padding(15, 30))
assertEquals("                              ", StringUtil.padding(45, 30))
assertEquals(5, StringUtil.padding(20, 5).length())
assertEquals(21, padding.length)
assertTrue(StringUtil.isBlank(null))
assertTrue(StringUtil.isBlank(""))
assertTrue(StringUtil.isBlank("      "))
assertTrue(StringUtil.isBlank("   \r\n  "))
assertTrue(StringUtil.isNumeric("1"))
assertTrue(StringUtil.isNumeric("1234"))
assertTrue(StringUtil.isWhitespace('\t'))
assertTrue(StringUtil.isWhitespace('\n'))
assertTrue(StringUtil.isWhitespace('\r'))
assertTrue(StringUtil.isWhitespace('\f'))
assertTrue(StringUtil.isWhitespace(' '))
assertEquals(" ", normaliseWhitespace("    \r \n \r\n"))
assertEquals(" hello there ", normaliseWhitespace("   hello   \r \n  there    \n"))
assertEquals("hello", normaliseWhitespace("hello"))
assertEquals("hello there", normaliseWhitespace("hello\nthere"))
assertEquals(test71540charsExpectedSingleWhitespace, normaliseWhitespace(test71540chars))
assertEquals(test71540charsExpectedSingleWhitespace, extractedText)
assertEquals("http://example.com/one/two?three", resolve("http://example.com", "./one/two?three"))
assertEquals("http://example.com/one/two?three", resolve("http://example.com?one", "./one/two?three"))
assertEquals("http://example.com/one/two?three#four", resolve("http://example.com", "./one/two?three#four"))
assertEquals("https://example.com/one", resolve("http://example.com/", "https://example.com/one"))
assertEquals("http://example.com/one/two.html", resolve("http://example.com/two/", "../one/two.html"))
assertEquals("https://example2.com/one", resolve("https://example.com/", "//example2.com/one"))
assertEquals("https://example.com:8080/one", resolve("https://example.com:8080", "./one"))
assertEquals("https://example2.com/one", resolve("http://example.com/", "https://example2.com/one"))
assertEquals("https://example.com/one", resolve("wrong", "https://example.com/one"))
assertEquals("https://example.com/one", resolve("https://example.com/one", ""))
assertEquals("", resolve("wrong", "also wrong"))
assertEquals("ftp://example.com/one", resolve("ftp://example.com/two/", "../one"))
assertEquals("ftp://example.com/one/two.c", resolve("ftp://example.com/one/", "./two.c"))
assertEquals("ftp://example.com/one/two.c", resolve("ftp://example.com/one/", "two.c"))
assertEquals("http://example.com/g", resolve("http://example.com/b/c/d;p?q", "../../../g"))
assertEquals("http://example.com/g", resolve("http://example.com/b/c/d;p?q", "../../../../g"))
assertEquals("http://example.com/g", resolve("http://example.com/b/c/d;p?q", "/./g"))
assertEquals("http://example.com/g", resolve("http://example.com/b/c/d;p?q", "/../g"))
assertEquals("http://example.com/b/c/g.", resolve("http://example.com/b/c/d;p?q", "g."))
assertEquals("http://example.com/b/c/.g", resolve("http://example.com/b/c/d;p?q", ".g"))
assertEquals("http://example.com/b/c/g..", resolve("http://example.com/b/c/d;p?q", "g.."))
assertEquals("http://example.com/b/c/..g", resolve("http://example.com/b/c/d;p?q", "..g"))
assertEquals("http://example.com/b/g", resolve("http://example.com/b/c/d;p?q", "./../g"))
assertEquals("http://example.com/b/c/g/", resolve("http://example.com/b/c/d;p?q", "./g/."))
assertEquals("http://example.com/b/c/g/h", resolve("http://example.com/b/c/d;p?q", "g/./h"))
assertEquals("http://example.com/b/c/h", resolve("http://example.com/b/c/d;p?q", "g/../h"))
assertEquals("http://example.com/b/c/g;x=1/y", resolve("http://example.com/b/c/d;p?q", "g;x=1/./y"))
assertEquals("http://example.com/b/c/y", resolve("http://example.com/b/c/d;p?q", "g;x=1/../y"))
assertEquals("http://example.com/b/c/g?y/./x", resolve("http://example.com/b/c/d;p?q", "g?y/./x"))
assertEquals("http://example.com/b/c/g?y/../x", resolve("http://example.com/b/c/d;p?q", "g?y/../x"))
assertEquals("http://example.com/b/c/g#s/./x", resolve("http://example.com/b/c/d;p?q", "g#s/./x"))
assertEquals("http://example.com/b/c/g#s/../x", resolve("http://example.com/b/c/d;p?q", "g#s/../x"))
assertEquals("foo:bar", resolve("\nhttps://\texample.com/", "\r\nfo\to:ba\br"))
assertEquals("https://example.com/foo bar/", resolve("HTTPS://example.com/example/", "../foo bar/"))
assertTrue(StringUtil.isAscii(""))
assertTrue(StringUtil.isAscii("example.com"))
assertTrue(StringUtil.isAscii("One Two"))
assertEquals(3, els.size())
assertEquals("1", els.get(0).id())
assertEquals("2", els.get(1).id())
assertEquals("3", els.get(2).id())
assertEquals(0, none.size())
assertEquals(2, els.size())
assertEquals("Hello", els.get(0).text())
assertEquals("Foo two!", els.get(1).text())
assertEquals(0, none.size())
assertEquals(2, els.size())
assertEquals("0", els.get(0).id())
assertEquals("1", els.get(1).id())
assertEquals(0, none.size())
assertEquals(1, els2.size())
assertEquals(elsFromAttr.size(), elsFromClass.size())
assertEquals(3, elsFromClass.size())
assertEquals("Two", elsFromClass.get(1).text())
assertEquals(4, withTitle.size())
assertEquals(1, foo.size())
assertEquals(1, foo2.size())
assertEquals(1, foo3.size())
assertEquals(1, dataName.size())
assertEquals("with spaces", dataName.first().attr("data-name"))
assertEquals(5, not.size())
assertEquals("Foo", not.first().attr("title"))
assertEquals(2, starts.size())
assertEquals("Bar", starts.first().attr("title"))
assertEquals("Balim", starts.last().attr("title"))
assertEquals(2, ends.size())
assertEquals("Balim", ends.first().attr("title"))
assertEquals("SLIM", ends.last().attr("title"))
assertEquals(2, contains.size())
assertEquals("Balim", contains.first().attr("title"))
assertEquals("SLIM", contains.last().attr("title"))
assertEquals(2, byTag.size())
assertEquals("1", byTag.first().id())
assertEquals("2", byTag.last().id())
assertEquals(1, byAttr.size())
assertEquals("2", byAttr.last().id())
assertEquals(1, byTagAttr.size())
assertEquals("2", byTagAttr.last().id())
assertEquals(2, byContains.size())
assertEquals("1", byContains.first().id())
assertEquals("2", byContains.last().id())
assertEquals(2, byTag.size())
assertEquals("1", byTag.first().id())
assertEquals("2", byTag.last().id())
assertEquals(1, byAttr.size())
assertEquals("2", byAttr.last().id())
assertEquals(1, byTagAttr.size())
assertEquals("2", byTagAttr.last().id())
assertEquals(2, byContains.size())
assertEquals("1", byContains.first().id())
assertEquals("2", byContains.last().id())
assertEquals(2, byTag.size())
assertEquals("1", byTag.first().id())
assertEquals("2", byTag.last().id())
assertEquals(1, byAttr.size())
assertEquals("2", byAttr.last().id())
assertEquals(1, byTagAttr.size())
assertEquals("2", byTagAttr.last().id())
assertEquals(2, byContains.size())
assertEquals("1", byContains.first().id())
assertEquals("2", byContains.last().id())
assertEquals(els1, els2)
assertEquals(els3, els4)
assertEquals("One", els1.text())
assertEquals(1, els1.size())
assertEquals("Two", els3.text())
assertEquals(1, els2.size())
assertEquals(2, withData.size())
assertEquals("1", withData.first().id())
assertEquals("2", withData.last().id())
assertEquals(1, withData.size())
assertEquals("2", withData.first().id())
assertEquals(1, doc.select("[^attrib]").size())
assertEquals(3, imgs.size())
assertEquals("1", imgs.get(0).id())
assertEquals("2", imgs.get(1).id())
assertEquals("3", imgs.get(2).id())
assertEquals(2, imgs.size())
assertEquals("1", imgs.get(0).id())
assertEquals("4", imgs.get(1).id())
assertEquals(1, els.size())
assertEquals("Hello", els.text())
assertEquals(1, els.size())
assertEquals("Two +", els.text())
assertEquals("p", els.first().tagName())
assertEquals(8, allDoc.size())
assertEquals(3, allUnderDiv.size())
assertEquals("p", allUnderDiv.first().tagName())
assertEquals(2, ps.size())
assertEquals(5, els.size())
assertEquals("div", els.get(0).tagName())
assertEquals("foo", els.get(0).attr("title"))
assertEquals("div", els.get(1).tagName())
assertEquals("bar", els.get(1).attr("title"))
assertEquals("div", els.get(2).tagName())
assertEquals(0, els.get(2).attr("title").length())
assertEquals("p", els.get(3).tagName())
assertEquals("span", els.get(4).tagName())
assertEquals(3, els.size())
assertEquals("1", els.get(0).id())
assertEquals("2", els.get(1).id())
assertEquals("foo", els.get(2).attr("title"))
assertEquals(2, els.size())
assertEquals("Hello", els.get(0).text())
assertEquals("There", els.get(1).text())
assertEquals(1, p.size())
assertEquals("Hello", p.get(0).text())
assertEquals(0, empty.size())
assertEquals(0, aboveRoot.size())
assertEquals(1, div.size())
assertEquals("div", div.first().tagName())
assertEquals(1, p.size())
assertEquals("p", p.first().tagName())
assertEquals(1, div2.size())
assertEquals("div", div2.first().tagName())
assertEquals(1, p2.size())
assertEquals("p", p2.first().tagName())
assertEquals(1, els.size())
assertEquals("Hello", els.first().text())
assertEquals("span", els.first().tagName())
assertEquals(0, aboveRoot.size())
assertEquals(2, divs.size())
assertEquals("2", divs.get(0).id())
assertEquals("3", divs.get(1).id())
assertEquals(1, div2.size())
assertEquals("2", div2.get(0).id())
assertEquals(3, allAs.size())
assertEquals("a", allAs.first().tagName())
assertEquals(2, fooAs.size())
assertEquals("a", fooAs.first().tagName())
assertEquals(1, barAs.size())
assertEquals(3, divChilds.size())
assertEquals("p", divChilds.get(0).tagName())
assertEquals("p", divChilds.get(1).tagName())
assertEquals("span", divChilds.get(2).tagName())
assertEquals(1, els.size())
assertEquals("a", els.first().tagName())
assertEquals(2, doc.select("DiV").size())
assertEquals(1, doc.select("DiV[TiTLE]").size())
assertEquals(1, doc.select("DiV[TiTLE=BAR]").size())
assertEquals(0, doc.select("DiV[TiTLE=BARBARELLA]").size())
assertEquals(2, sibs.size())
assertEquals("Two", sibs.get(0).text())
assertEquals("Three", sibs.get(1).text())
assertEquals(1, sibs.size())
assertEquals("Two", sibs.get(0).text())
assertEquals(0, sibs.size())
assertEquals(2, sibs.size())
assertEquals("Two", sibs.get(0).text())
assertEquals("Three", sibs.get(1).text())
assertEquals(3, els.size())
assertEquals("ol", els.get(0).tagName())
assertEquals("Two", els.get(1).text())
assertEquals("Three", els.get(2).text())
assertEquals(1, els.size())
assertEquals("Three", els.first().text())
assertEquals("One", el1.text())
assertEquals("Two", el2.text())
assertEquals("One", el3.text())
assertEquals("Two", el4.text())
assertEquals(2, spans.size())
assertEquals("One", spans.first().text())
assertEquals("2", div.id())
assertEquals(3, ps.size())
assertEquals("One", ps.get(0).text())
assertEquals("Two", ps.get(1).text())
assertEquals("Four", ps.get(2).text())
assertEquals(2, ps.size())
assertEquals("Two", ps.get(0).text())
assertEquals("Three", ps.get(1).text())
assertEquals(2, ps.size())
assertEquals("One", ps.get(0).text())
assertEquals("Four", ps.get(1).text())
assertEquals(1, ps2.size())
assertEquals("One", ps2.get(0).text())
assertEquals("p", ps2.get(0).tagName())
assertEquals(1, ps.size())
assertEquals("Two", ps.get(0).text())
assertEquals(1, ps.size())
assertEquals("Two", ps.get(0).text())
assertEquals(2, divs1.size())
assertEquals("0", divs1.get(0).id())
assertEquals("1", divs1.get(1).id())
assertEquals(1, divs2.size())
assertEquals("1", divs2.get(0).id())
assertEquals(3, divs3.size())
assertEquals("0", divs3.get(0).id())
assertEquals("1", divs3.get(1).id())
assertEquals("2", divs3.get(2).id())
assertEquals(3, els1.size())
assertEquals("body", els1.first().tagName())
assertEquals("0", els1.get(1).id())
assertEquals("2", els1.get(2).id())
assertEquals(2, els2.size())
assertEquals("p", els2.first().tagName())
assertEquals("1", els2.get(1).id())
assertEquals(1, divs.size())
assertEquals("One", divs.first().text())
assertEquals(1, divs.size())
assertEquals("div", divs.first().tagName())
assertEquals("Two", divs.first().text())
assertEquals(1, divs.size())
assertEquals("div", divs.first().tagName())
assertEquals("Two", divs.first().text())
assertEquals(3, ps1.size())
assertEquals(2, ps2.size())
assertEquals("The Rain.", ps2.first().html())
assertEquals("The <i>RAIN</i>.", ps2.last().html())
assertEquals(1, ps3.size())
assertEquals("light", ps3.first().className())
assertEquals(1, ps4.size())
assertEquals("light", ps3.first().className())
assertEquals(8, ps5.size())
assertEquals(8, ps6.size())
assertEquals(1, ps1.size())
assertEquals("1", ps1.first().id())
assertEquals(1, ps2.size())
assertEquals("2", ps2.first().id())
assertEquals(1, es1.size())
assertEquals(1, es2.size())
assertEquals(ps.get(0), es1.first())
assertEquals(ps.get(1), es2.first())
assertEquals(0, doc.select("div:containsWholeText(jsoup the html parser)").size())
assertEquals(0, doc.select("div:containsWholeText(jsoup\n the html parser)").size())
assertEquals(1, blanks.size())
assertEquals(".  ", blanks.first().wholeText())
assertEquals(1, es1.size())
assertEquals(1, es2.size())
assertEquals(ps.get(0), es1.first())
assertEquals(ps.get(1), es2.first())
assertEquals(0, doc.select("div:containsWholeOwnText(jsoup the html parser)").size())
assertEquals(0, doc.select("div:containsWholeOwnText(jsoup\n the  parser)").size())
assertEquals(1, blanks.size())
assertEquals(".  ", blanks.first().wholeText())
assertEquals(1, ps.size())
assertEquals("1", ps.first().id())
assertEquals(0, doc.select("p:containsOwn(there)").size())
assertEquals(1, doc2.select("p:containsOwn(igor)").size())
assertEquals(0, p1.size())
assertEquals(1, p2.size())
assertEquals("1", p2.first().id())
assertEquals(1, p4.size())
assertEquals("4", p4.first().id())
assertEquals(1, p5.size())
assertEquals("2", p5.first().id())
assertEquals(1, p6.size())
assertEquals("3", p6.first().id())
assertEquals(1, p7.size())
assertEquals("1", p7.first().id())
assertEquals(1, p1.size())
assertEquals("1", p1.first().id())
assertEquals(0, doc.select("p:matchesOwn(there)").size())
assertEquals(1, p1.size())
assertEquals("1", p1.first().id())
assertEquals(1, doc.select("p:matchesWholeText(there\n now)").size())
assertEquals(0, doc.select("p:matchesWholeText(There\n now)").size())
assertEquals(1, p2.size())
assertEquals("2", p2.first().id())
assertEquals(1, p3.size())
assertEquals("3", p3.first().id())
assertEquals(1, p1.size())
assertEquals("1", p1.first().id())
assertEquals(0, doc.select("p:matchesWholeOwnText(there\n now)").size())
assertEquals(1, p2.size())
assertEquals("2", p2.first().id())
assertEquals(1, p3.size())
assertEquals("3", p3.first().id())
assertEquals(1, el1.size())
assertEquals("1", el1.first().id())
assertEquals(1, el2.size())
assertEquals("2", el2.first().id())
assertEquals(2, el1.size())
assertEquals("Two", el1.first().text())
assertEquals("Three", el1.last().text())
assertEquals(2, el2.size())
assertEquals("One", el2.first().text())
assertEquals("Two", el2.last().text())
assertEquals(2, el1.size())
assertEquals("body", el1.first().tagName())
assertEquals("span", el1.last().tagName())
assertEquals(1, el1.size())
assertEquals("1", el1.first().id())
assertEquals(1, ps.size())
assertEquals(2, containers.size())
assertEquals("div", containers.get(0).tagName())
assertEquals("li", containers.get(1).tagName())
assertEquals("123", containers.get(1).text())
assertEquals("div", doc.select("div[k" + s + "]").first().tagName())
assertEquals("div", doc.select("div:containsOwn(" + s + ")").first().tagName())
assertEquals(2, found.size())
assertEquals("class without space", found.get(0).text())
assertEquals("class with space", found.get(1).text())
assertEquals(2, found.size())
assertEquals("class without space", found.get(0).text())
assertEquals("class with space", found.get(1).text())
assertEquals(0, found.size())
assertEquals(2, els.size())
assertEquals(2, subSelect.size())
assertEquals("One", doc.select("div[data='End]']").first().text())
assertEquals("Two", doc.select("div[data='[Another)]]']").first().text())
assertEquals("One", doc.select("div[data=\"End]\"]").first().text())
assertEquals("Two", doc.select("div[data=\"[Another)]]\"]").first().text())
assertEquals(2, dataEls1.size())
assertEquals(1, dataEls2.size())
assertEquals(dataEls1.last(), dataEls2.first())
assertEquals("<script>FUNCTION</script>", dataEls2.outerHtml())
assertEquals(1, dataEls3.size())
assertEquals("span", dataEls3.first().tagName())
assertEquals(3, dataEls4.size())
assertEquals("body", dataEls4.first().tagName())
assertEquals("script", dataEls4.get(1).tagName())
assertEquals("span", dataEls4.get(2).tagName())
assertEquals(1, dataEls5.size())
assertEquals(1, els.size())
assertEquals("One'One", els.text())
assertEquals("One", doc.selectFirst("p").text())
assertEquals("Two", doc.selectFirst("p.foo").text())
assertEquals("One", doc.selectFirst("p, div").text())
assertEquals("One", one.first().text())
assertEquals("Two", two.first().text())
assertEquals(origHtml, doc.html())
assertEquals("Two", doc.select("p:matchText + br + *").text())
assertEquals(0, els.size())
assertEquals(3, els.size())
assertEquals("One", els.get(0).text())
assertEquals("Two", els.get(1).text())
assertEquals("Three", els.get(2).toString())
assertEquals(1, els.size())
assertEquals("Four", els.text())
assertEquals(1, els.size())
assertEquals("Two", els.text())
assertEquals(1, els.size())
assertEquals(1, els.size())
assertEquals(0, doc.select("mixedCase").size())
assertEquals(1, doc.select("*|mixedCase").size())
assertEquals(0, doc.select("lowercase").size())
assertEquals(1, doc.select("*|lowercase").size())
assertEquals(0, doc.select("mixedCase").size())
assertEquals(1, doc.select("*|mixedCase").size())
assertEquals(0, doc.select("lowercase").size())
assertEquals(1, doc.select("*|lowercase").size())
assertEquals(1, els.size())
assertEquals("Hello", els.first().text())
assertEquals(2, select.size())
assertEquals("1111", select.get(0).text())
assertEquals("2222", select.get(1).text())
assertEquals("1", outer.id())
assertEquals("1", span.id())
assertEquals("2", inner.id())
assertEquals(outer, span)
assertNotEquals(outer, inner)
assertNotNull(div)
assertEquals(2, spans.size())
assertEquals("One Two", spans.get(0).text())
assertEquals("Three Four", spans.get(1).text())
assertEquals(1, metaEls.size())
assertEquals("One", metaEls.get(0).text())
assertEquals(2, nsEls.size())
assertEquals("One", nsEls.get(0).text())
assertEquals("Two", nsEls.get(1).text())
assertEquals(1, a.size())
assertEquals(a, b)
assertEquals(a, c)
assertEquals(a, d)
assertEquals(0, e.size())
assertNotEquals(a, e)
assertEquals("%&", ex.getMessage())
assertEquals(2, els.size())
assertEquals("One", els.get(0).text())
assertEquals("Two", els.get(1).text())
assertNotNull(div)
assertSame(div, w3cDiv)
assertEquals(1, els.size())
assertEquals("One", els.get(0).text())
assertEquals("p", els.get(0).tagName())
assertEquals(1, div.selectXpath("//body").size())
assertEquals(1, doc.selectXpath("//body").size())
assertEquals(0, doc.selectXpath("//div").size())
assertTrue(threw)
assertEquals(1, elements.size())
assertEquals("One", elements.first().id())
assertEquals(1, elements.size())
assertEquals(1, elements.size())
assertEquals("One", elements.first().id())
assertTrue(fromCss.size() >= 1)
assertTrue(fromXpath.size() >= 1)
assertEquals(fromCss, fromXpath)
assertEquals(3, text.size())
assertEquals("One", text.get(0).text())
assertEquals("Two", text.get(1).text())
assertEquals("Three and some more", text.get(2).text())
assertEquals(3, nodes.size())
assertEquals("One", nodes.get(0).outerHtml())
assertEquals("Two", nodes.get(1).outerHtml())
assertEquals("Three and some more", nodes.get(2).outerHtml())
assertEquals(2, hrefs.size())
assertEquals("/foo", hrefs.get(0))
assertEquals("/bar", hrefs.get(1))
assertEquals(3, ps.size())
assertEquals("One", p1.text())
assertEquals(2, sibs.size())
assertEquals("Two", sibs.get(0).text())
assertEquals("Three", sibs.get(1).text())
assertNotNull(p)
assertEquals(4, chain.size())
assertEquals("html", chain.get(0).tagName())
assertEquals("p", chain.get(3).tagName())
assertTrue(threw)
assertEquals(1, elements.size())
assertEquals("One", elements.first().id())
assertEquals(1, elements.size())
assertEquals("Cheaper by the Dozen", elements.first().text())
assertEquals(1, byPrefix.size())
assertEquals("Cheaper by the Dozen", byPrefix.first().text())
assertEquals(1, byLocalName.size())
assertEquals("Cheaper by the Dozen", byLocalName.first().text())
assertEquals(1, isbn.size())
assertEquals("1568491379", isbn.first().text())
assertEquals(2, els.size())
assertEquals("Hello", els.get(0).text())
assertEquals("There", els.get(1).text())
assertEquals(2, withTitle.size())
assertTrue(withTitle.hasAttr("title"))
assertEquals("foo", withTitle.attr("title"))
assertEquals(2, withTitle.size())
assertEquals(0, doc.select("p[title]").size())
assertEquals(4, ps.size())
assertEquals("classy", ps.last().attr("style"))
assertEquals("bar", ps.last().attr("class"))
assertTrue(ps.hasAttr("class"))
assertTrue(two.hasAttr("abs:href"))
assertTrue(both.hasAttr("abs:href"))
assertEquals("foo", classVal)
assertEquals("", one.attr("abs:href"))
assertEquals("https://jsoup.org", two.attr("abs:href"))
assertEquals("https://jsoup.org", both.attr("abs:href"))
assertTrue(els.hasClass("red"))
assertEquals("blue", els.get(0).className())
assertEquals("red green blue mellow", els.get(1).className())
assertTrue(one.hasClass("One"))
assertTrue(one.hasClass("ONE"))
assertTrue(two.hasClass("TWO"))
assertTrue(two.hasClass("Two"))
assertTrue(thr.hasClass("ThreE"))
assertTrue(thr.hasClass("three"))
assertEquals("Hello there world", doc.select("div > *").text())
assertTrue(divs.hasText())
assertEquals("<p>Hello</p>\n<p>There</p>", divs.html())
assertEquals("<div><p>Hello</p></div><div><p>There</p></div>", TextUtil.stripNewlines(divs.outerHtml()))
assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml()))
assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml()))
assertEquals(2, els.size())
assertEquals("one", els.val())
assertEquals("two", els.last().val())
assertEquals("three", els.first().val())
assertEquals("three", els.last().val())
assertEquals("<textarea>three</textarea>", els.last().outerHtml())
assertEquals("<p>This <span>foo</span><a>is</a> <span>foo</span><a>jsoup</a>.</p>", TextUtil.stripNewlines(doc.body().html()))
assertEquals("<p>This <a>is</a><span>foo</span> <a>jsoup</a><span>foo</span>.</p>", TextUtil.stripNewlines(doc.body().html()))
assertEquals("<p><i><b>This</b></i> is <i><b>jsoup</b></i></p>", doc.body().html())
assertEquals("<div>\n <p><b>This</b> is <b>jsoup</b>.</p>\n</div>\n<div>\n <p>How do you like it?</p>\n</div>", doc.body().html())
assertEquals("<div>One <a href=\"/\">Two</a></div>", TextUtil.stripNewlines(doc.body().html()))
assertEquals("<a>One</a> Two Three <i>Four</i> Fix <i>Six</i>", TextUtil.stripNewlines(doc.body().html()))
assertEquals("<p>One two three four</p>", doc.body().html())
assertEquals("<div><p></p> <p></p></div>", doc.body().html())
assertEquals("<div> jsoup </div>", doc.body().html())
assertEquals("there", doc.select("p").eq(1).text())
assertEquals("there", doc.select("p").get(1).text())
assertTrue(ps.is("[title=foo]"))
assertEquals(3, parents.size())
assertEquals("div", parents.get(0).tagName())
assertEquals("body", parents.get(1).tagName())
assertEquals("html", parents.get(2).tagName())
assertEquals(1, div1.size())
assertEquals("1", div1.first().id())
assertEquals(1, div2.size())
assertEquals("2", div2.first().id())
assertEquals("<p>Hello <em>there</em> <em>now</em></p>", doc.body().html())
assertEquals("<div><p><#text></#text></p></div><div><#text></#text></div>", accum.toString())
assertEquals(3, els.size())
assertEquals(2, forms.size())
assertNotNull(forms.get(0))
assertNotNull(forms.get(1))
assertEquals("1", forms.get(0).id())
assertEquals("2", forms.get(1).id())
assertEquals(2, comments.size())
assertEquals(" comment2 ", comments.get(0).getData())
assertEquals(" comment3 ", comments.get(1).getData())
assertEquals(1, comments1.size())
assertEquals(" comment3 ", comments1.get(0).getData())
assertEquals(2, textNodes.size())
assertEquals("Two", textNodes.get(0).text())
assertEquals("Four", textNodes.get(1).text())
assertEquals(2, dataNodes.size())
assertEquals("Two", dataNodes.get(0).getWholeData())
assertEquals("Three", dataNodes.get(1).getWholeData())
assertEquals(1, scriptNode.size())
assertEquals("<crux>", dataNode.getWholeData())
assertEquals("<script type=\"application/json\"><cromulent></script>", script.outerHtml())
assertEquals(0, doc.select("form").textNodes().size())
assertEquals(1, els.size())
assertEquals("Check", els.text())
assertEquals(2, els.size())
assertEquals(2, next.size())
assertEquals("5", next.first().text())
assertEquals("11", next.last().text())
assertEquals(0, els.next("p:contains(6)").size())
assertEquals(1, nextF.size())
assertEquals("5", nextF.first().text())
assertEquals(4, nextA.size())
assertEquals("5", nextA.first().text())
assertEquals("12", nextA.last().text())
assertEquals(1, nextAF.size())
assertEquals("6", nextAF.first().text())
assertEquals(2, prev.size())
assertEquals("3", prev.first().text())
assertEquals("9", prev.last().text())
assertEquals(0, els.prev("p:contains(1)").size())
assertEquals(1, prevF.size())
assertEquals("3", prevF.first().text())
assertEquals(6, prevA.size())
assertEquals("3", prevA.first().text())
assertEquals("7", prevA.last().text())
assertEquals(1, prevAF.size())
assertEquals("1", prevAF.first().text())
assertEquals(2, divText.size())
assertEquals("1 2 3 4 5 6", divText.get(0))
assertEquals("7 8 9 10 11 12", divText.get(1))
assertEquals(13, ps.size())
assertEquals(12, pText.size())
assertEquals("1", pText.get(0))
assertEquals("2", pText.get(1))
assertEquals("5", pText.get(4))
assertEquals("7", pText.get(6))
assertEquals("12", pText.get(11))
assertEquals(3, hrefAttrs.size())
assertEquals("/foo", hrefAttrs.get(0))
assertEquals("http://example.com/bar", hrefAttrs.get(1))
assertEquals("", hrefAttrs.get(2))
assertEquals(4, doc.select("a").size())
assertEquals(3, absAttrs.size())
assertEquals(3, absAttrs.size())
assertEquals("http://example.com/foo", absAttrs.get(0))
assertEquals("http://example.com/bar", absAttrs.get(1))
assertEquals("http://example.com", absAttrs.get(2))
assertEquals("l1 l2 yes", doc.body().select(">p>strong,>*>li>strong").text())
assertEquals("l2 yes", doc.select("body>p>strong,body>*>li>strong").text())
assertEquals("yes", doc.select(">body>*>li>strong,>body>p>strong").text())
assertEquals("l2", doc.select(">body>p>strong,>body>*>li>strong").text())
assertTrue(eval instanceof CombiningEvaluator.Or)
assertEquals(3, or.evaluators.size())
assertTrue(eval instanceof CombiningEvaluator.Or)
assertEquals(2, or.evaluators.size())
assertEquals(".foo > ol", andLeft.toString())
assertEquals(2, andLeft.evaluators.size())
assertEquals("ol > li + li", andRight.toString())
assertEquals(2, andRight.evaluators.size())
assertEquals(query, eval.toString())
assertEquals("span div", parse.toString())
assertEquals(q, parse.toString())
assertEquals(3, sel.size())
assertEquals("head", sel.get(0).tagName())
assertEquals("br", sel.get(1).tagName())
assertEquals("p", sel.get(2).tagName())
assertEquals(1, sel.size())
assertEquals("br", sel.get(0).tagName())
assertEquals(6, sel.size())
assertEquals("head", sel.get(0).tagName())
assertEquals("body", sel.get(1).tagName())
assertEquals("span", sel.get(2).tagName())
assertEquals("br", sel.get(3).tagName())
assertEquals("p", sel.get(4).tagName())
assertTrue(sel.get(4).hasClass("empty"))
assertEquals("em", sel.get(5).tagName())
assertEquals(1, sel.size())
assertNotNull(sel.get(0))
assertEquals(Tag.valueOf("html"), sel.get(0).tag())
assertEquals(1, sel2.size())
assertNotNull(sel2.get(0))
assertEquals(Tag.valueOf("body"), sel2.get(0).tag())
assertEquals("<div><p><#text></#text></p></div><div><#text></#text></div>", accum.toString())
assertEquals("<div><p></p></div><div><#text></#text></div>", accum.toString())
assertEquals("<div></div><div><#text></#text></div>", accum.toString())
assertEquals("<div></div>\n<div>\n There be\n</div>", doc.select("body").html())
assertEquals("<div><p><#text></#text></p>", accum.toString())
assertNotNull(p)
assertEquals("<p>One <u>two</u> <u>three</u> four.</p>", p.outerHtml())
assertEquals("<div>\n" + " <p><span>0</span><span>1</span></p>\n" + " <p><span>2</span><span>3</span></p>\n" + "</div>", doc.body().html())
assertEquals(7, count[0])
assertEquals("<div><p id=\"2\">Two</p><p></p></div>", TextUtil.stripNewlines(doc.body().html()))
