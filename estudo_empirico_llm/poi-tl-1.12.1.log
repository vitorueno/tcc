assertEquals(typeArguments[0], TextRenderData.class)
assertEquals(typeArguments[0], TextRenderData.class)
assertEquals(result.getText(), data.getText())
assertEquals(((HyperlinkTextRenderData) result).getUrl(), ((HyperlinkTextRenderData) data).getUrl())
assertEquals(result.getStyle().getColor(), data.getStyle().getColor())
assertEquals(result.getStyle().getUnderlinePatterns(), data.getStyle().getUnderlinePatterns())
assertEquals(result.getPictureStyle().getWidth(), data.getPictureStyle().getWidth())
assertEquals(result.getPictureStyle().getHeight(), data.getPictureStyle().getHeight())
assertEquals(result.getPictureType(), data.getPictureType())
assertEquals(result.getAltMeta(), data.getAltMeta())
assertEquals(result.getChartTitle(), data.getChartTitle())
assertArrayEquals(result.getCategories(), data.getCategories())
assertEquals(result.getSeriesDatas().get(0).getName(), data.getSeriesDatas().get(0).getName())
assertEquals(result.getSeriesDatas().get(0).getComboType(), data.getSeriesDatas().get(0).getComboType())
assertArrayEquals(result.getMergedDoc(), data.getMergedDoc())
assertEquals(result.getTableStyle().getWidth(), data.getTableStyle().getWidth())
assertEquals(result.getTableStyle().getAlign(), data.getTableStyle().getAlign())
assertEquals(contents2.size(), contents.size())
assertArrayEquals(result.getFormats().toArray(), data.getFormats().toArray())
assertEquals(result.getItems().get(1).getItem().getParagraphStyle().getGlyphStyle().getColor(), data.getItems().get(1).getItem().getParagraphStyle().getGlyphStyle().getColor())
assertEquals(PictureType.SVG, PictureType.suggestFileType(ByteUtils.getLocalByteArray(new File("src/test/resources/picture/p.svg"))))
assertEquals(PictureType.GIF, PictureType.suggestFileType(ByteUtils.getLocalByteArray(new File("src/test/resources/picture/p.gif"))))
assertEquals(PictureType.PNG, PictureType.suggestFileType(ByteUtils.getLocalByteArray(new File("src/test/resources/picture/p.png"))))
assertEquals(PictureType.JPEG, PictureType.suggestFileType(ByteUtils.getLocalByteArray(new File("src/test/resources/picture/p.jpg"))))
assertEquals(PictureType.BMP, PictureType.suggestFileType(ByteUtils.getLocalByteArray(new File("src/test/resources/picture/p.bmp"))))
assertEquals(PictureType.TIFF, PictureType.suggestFileType(ByteUtils.getLocalByteArray(new File("src/test/resources/picture/p.tif"))))
assertEquals(PictureType.PNG, PictureType.suggestFileType(ByteUtils.getUrlByteArray("http://deepoove.com/images/icecream.png")))
assertEquals(PictureType.SVG, PictureType.suggestFileType(ByteUtils.getUrlByteArray("http://deepoove.com/images/%E8%8C%84%E5%AD%90.svg")))
assertEquals(renew.getElementTemplates().size(), 0)
assertEquals(renew.getElementTemplates().size(), 4)
assertEquals(template.getElementTemplates().size(), 3)
assertEquals(template.getElementTemplates().size(), 5)
assertEquals(renew.getElementTemplates().size(), 0)
assertEquals(Arrays.toString(text.split(regexLine, -1)), "[hello, poi-tl]")
assertEquals(Arrays.toString(text1.split(regexLine, -1)), "[hello, , poi-tl]")
assertEquals(Arrays.toString(text2.split(regexLine, -1)), "[hello, , ]")
assertEquals(Arrays.toString(text3.split(regexLine, -1)), "[, , poi-tl]")
assertEquals(Arrays.toString(text4.split(regexLine, -1)), "[, , , , ]")
assertEquals(Arrays.toString(text5.split(regexLine, -1)), "[hi, , , , what, is, , , this]")
assertEquals(Arrays.toString(text7.split(regexLine, -1)), "[hi, , , , what, is, , this]")
assertEquals("123", document.getParagraphArray(0).getText())
assertEquals(paragraph.getText(), "Sayi")
assertEquals(paragraph.getText(), "卅一")
assertNull(paragraph)
assertEquals(document.getAllPictures().size(), 1)
assertEquals(document.getTables().size(), 1)
assertTrue(exception.getCause() instanceof ExpressionEvalException)
assertEquals(paragraph.getText(), "Sayi")
assertEquals(paragraph.getText(), "卅一")
assertEquals(paragraph.getText(), "2018-10-01")
assertEquals(paragraph.getText(), "http://www.deepoove.com")
assertEquals(document.getAllPictures().size(), 1)
assertEquals(document.getTables().size(), 1)
assertEquals(args.get("sea"), document.getParagraphArray(0).getText())
assertEquals(1, document.getAllPictures().size())
assertEquals("面朝大海春暖花开", document.getParagraphArray(2).getText())
assertTrue(null != document.getParagraphArray(2).getNumID())
assertEquals("今朝有酒今朝醉", document.getParagraphArray(3).getText())
assertTrue(null != document.getParagraphArray(3).getNumID())
assertEquals(document.getParagraphArray(2).getNumID(), document.getParagraphArray(3).getNumID())
assertEquals("日落：日落山花红四海", document.getTables().get(0).getRow(1).getCell(1).getText())
assertEquals("123", document.getParagraphArray(0).getText())
assertEquals(spelForMap.compute("['name']"), "Sayi")
assertEquals(spelForMap.compute("['data']['hello']"), "poi-tl")
assertEquals(spelForMap.compute("name"), "Sayi")
assertEquals(spelForMap.compute("data.hello"), "poi-tl")
assertEquals(spelForMap.compute("localDate.format(T(java.time.format.DateTimeFormatter).ofPattern('yyyy年MM月dd日'))"), "2021年03月08日")
assertEquals(spelForBean.compute("name"), "poi-tl")
assertEquals(spelForBean.compute("name == 'poi-tl'"), true)
assertEquals(spelForBean.compute("name.toUpperCase()"), "POI-TL")
assertEquals(spelForBean.compute("empty?:'这个字段为空'"), "这个字段为空")
assertEquals(spelForBean.compute("sex ? '男' : '女'"), "男")
assertEquals(spelForBean.compute("new java.text.SimpleDateFormat('yyyy-MM-dd HH:mm:ss').format(time)"), "2019-05-20 22:14:10")
assertEquals(spelForBean.compute("new java.text.SimpleDateFormat('yyyy-MM-dd hh:mm').format(time)"), "2019-05-20 10:14")
assertEquals(spelForBean.compute("price"), 88880000L)
assertEquals(spelForBean.compute("price + '元'"), "88880000元")
assertEquals(spelForBean.compute("price + '元' == '88880000元'"), true)
assertEquals(spelForBean.compute("price/1000 + '千元'"), "88880千元")
assertEquals(spelForBean.compute("price/10000 + '万元'"), "8888万元")
assertEquals(spelForBean.compute("dogs[0].name"), "阿黄")
assertEquals(spelForBean.compute("dogs[1].age"), 6)
assertEquals(spelForBean.compute("dogs[2].name"), "阿蓝")
assertEquals(spelForBean.compute("dogsArr[2].name"), "阿蓝")
assertEquals(spelForBean.compute("data['hello']"), "poi-tl")
assertEquals(spelForFunction.compute("#substringStaticMethod('spElFunction', 2)"), "ElFunction")
assertEquals(paragraph.getText(), "poi-tl")
assertEquals(paragraph.getText(), "lowCase:poi-tlUpcase:POI-TL")
assertEquals(paragraph.getText(), "这个字段为空")
assertEquals(paragraph.getText(), "男")
assertEquals(paragraph.getText(), "2019-05-20 22:14:10")
assertEquals(paragraph.getText(), "2019-05-20 10:14")
assertEquals(paragraph.getText(), "88880000")
assertEquals(paragraph.getText(), "8888万元")
assertEquals(paragraph.getText(), "阿黄")
assertEquals(paragraph.getText(), "6")
assertEquals(paragraph.getText(), "阿蓝")
assertEquals(paragraph.getText(), "ElFunction")
assertEquals(Configure.DEFAULT_GRAMER_REGEX, config.getGrammerRegex())
assertNotEquals(Configure.DEFAULT_GRAMER_REGEX, config.getGrammerRegex())
assertFalse(pattern.matcher("abc-123").matches())
assertFalse(pattern.matcher("##this").matches())
assertFalse(pattern.matcher("#.").matches())
assertFalse(pattern.matcher("#.a").matches())
assertTrue(pattern.matcher("#23.a").matches())
assertTrue(pattern.matcher("123").matches())
assertTrue(pattern.matcher("ABC").matches())
assertTrue(pattern.matcher("abc123").matches())
assertTrue(pattern.matcher("_123abc").matches())
assertTrue(pattern.matcher("abc_123").matches())
assertTrue(pattern.matcher("好123").matches())
assertTrue(pattern.matcher("你好").matches())
assertTrue(pattern.matcher("123好_好abc").matches())
assertTrue(pattern.matcher("abc.123").matches())
assertTrue(pattern.matcher("").matches())
assertTrue(pattern.matcher("abc.123").matches())
assertTrue(pattern.matcher("abc.123.123").matches())
assertTrue(pattern.matcher("abc.好.123").matches())
assertTrue(pattern.matcher("abc.好123").matches())
assertTrue(pattern.matcher("好.123").matches())
assertTrue(pattern.matcher("好.123.好").matches())
assertTrue(pattern.matcher("#this").matches())
assertFalse(pattern.matcher("好..123").matches())
assertFalse(pattern.matcher("abc..123").matches())
assertFalse(pattern.matcher("abc23.").matches())
assertFalse(pattern.matcher("好123.").matches())
assertFalse(pattern.matcher(".好123").matches())
assertEquals(matcher.start(), "lowCase:".length())
assertEquals(matcher.group(), "{{name}}")
assertEquals(matcher.end(), "lowCase:{{name}}".length())
assertEquals(matcher.start(), "lowCase:{{name}}Upcase:".length())
assertEquals(matcher.group(), "{{name.toUpperCase()}}")
assertEquals(matcher.end(), "lowCase:{{name}}Upcase:{{name.toUpperCase()}}".length())
assertFalse(matcher.find())
assertEquals(matcher.start(), "lowCase:{{nameUpcase:".length())
assertEquals(matcher.group(), "{{name.toUpperCase()}}")
assertEquals(matcher.end(), "lowCase:{{nameUpcase:{{name.toUpperCase()}}".length())
assertFalse(matcher.find())
assertEquals(matcher.start(), "lowCase:".length())
assertEquals(matcher.group(), "{{name}}")
assertEquals(matcher.end(), "lowCase:{{name}}".length())
assertFalse(matcher.find())
assertEquals(matcher.start(), "lowCase:".length())
assertEquals(matcher.group(), "{{/}}")
assertEquals(matcher.end(), "lowCase:{{/}}".length())
assertFalse(matcher.find())
assertEquals(matcher.start(), "lowCase:".length())
assertEquals(matcher.group(), "${name}")
assertEquals(matcher.end(), "lowCase:${name}".length())
assertEquals(matcher.start(), "lowCase:${name}Upcase:".length())
assertEquals(matcher.group(), "${name.toUpperCase()}")
assertEquals(matcher.end(), "lowCase:${name}Upcase:${name.toUpperCase()}".length())
assertFalse(matcher.find())
assertEquals(matcher.start(), "lowCase:${nameUpcase:".length())
assertEquals(matcher.group(), "${name.toUpperCase()}")
assertEquals(matcher.end(), "lowCase:${nameUpcase:${name.toUpperCase()}".length())
assertFalse(matcher.find())
assertEquals(matcher.start(), "lowCase:".length())
assertEquals(matcher.group(), "${name}")
assertEquals(matcher.end(), "lowCase:${name}".length())
assertFalse(matcher.find())
assertEquals(tag, "/")
assertEquals(template.toString(), text)
assertEquals(template.getTagName(), "")
assertEquals(tag, "")
assertEquals(template.toString(), text)
assertEquals(template.getTagName(), "")
assertEquals(tag, "name")
assertEquals(template.toString(), text)
assertEquals(template.getTagName(), "name")
assertEquals(tag, "?name")
assertEquals(template.toString(), text)
assertEquals(template.getTagName(), "name")
assertTrue(elementTemplates.get(0) instanceof InlineIterableTemplate)
assertEquals(elementTemplates.get(0).variable(), "{{?isShowTitle}}")
assertEquals(((IterableTemplate) elementTemplates.get(0)).getTemplates().get(0).variable(), "{{title}}")
assertTrue(elementTemplates.get(1) instanceof IterableTemplate)
assertEquals(iterable.variable(), "{{?showUser}}")
assertTrue(iterableTemplates.get(0) instanceof RunTemplate)
assertEquals(iterableTemplates.get(0).variable(), "{{user}}")
assertTrue(iterableTemplates.get(1) instanceof InlineIterableTemplate)
assertEquals(iterableTemplates.get(1).variable(), "{{?showDate}}")
assertEquals(((IterableTemplate) iterableTemplates.get(1)).getTemplates().get(0).variable(), "{{date}}")
assertTrue(iterableTemplates.get(2) instanceof IterableTemplate)
assertEquals(iterableTemplates.get(2).variable(), "{{?showDate}}")
assertEquals(((IterableTemplate) iterableTemplates.get(2)).getTemplates().get(0).variable(), "{{date}}")
assertTrue(iterableTemplates.get(3) instanceof InlineIterableTemplate)
assertEquals(iterableTemplates.get(3).variable(), "{{?showDate}}")
assertEquals(((IterableTemplate) iterableTemplates.get(3)).getTemplates().get(0).variable(), "{{date}}")
assertEquals(elementTemplates.size(), 22)
assertEquals(elementTemplates.get(i++).variable(), "{{@icon}}")
assertEquals(elementTemplates.get(i++).variable(), "{{author}}")
assertEquals(elementTemplates.get(i++).variable(), "{{date}}")
assertEquals(elementTemplates.get(i++).variable(), "{{dfa}}")
assertEquals(elementTemplates.get(i++).variable(), "{{fafd}}")
assertEquals(elementTemplates.get(i++).variable(), "{{author}}")
assertEquals(elementTemplates.get(i++).variable(), "{{madan}}")
assertEquals(elementTemplates.get(i++).variable(), "{{aad}}")
assertEquals(elementTemplates.get(i++).variable(), "{{date}}")
assertEquals(elementTemplates.get(i++).variable(), "{{ada}}")
assertEquals(elementTemplates.get(i++).variable(), "{{faf}}")
assertEquals(elementTemplates.get(i++).variable(), "{{dfa}}")
assertEquals(elementTemplates.get(i++).variable(), "{{dfdf}}")
assertEquals(elementTemplates.get(i++).variable(), "{{fafd}}")
assertEquals(elementTemplates.get(i++).variable(), "{{adaf}}")
assertEquals(elementTemplates.get(i++).variable(), "{{ada}}")
assertEquals(elementTemplates.get(i++).variable(), "{{yi}}")
assertEquals(elementTemplates.get(i++).variable(), "{{dafd}}")
assertEquals(elementTemplates.get(i++).variable(), "{{dfas}}")
assertEquals(elementTemplates.get(i++).variable(), "{{@af}}")
assertEquals(elementTemplates.get(i++).variable(), "{{table0}}")
assertEquals(elementTemplates.get(i++).variable(), "{{table}}")
assertEquals(elementTemplates.size(), 22)
assertEquals(elementTemplates.get(i++).variable(), "${@icon}")
assertEquals(elementTemplates.get(i++).variable(), "${author}")
assertEquals(elementTemplates.get(i++).variable(), "${date}")
assertEquals(elementTemplates.get(i++).variable(), "${dfa}")
assertEquals(elementTemplates.get(i++).variable(), "${fafd}")
assertEquals(elementTemplates.get(i++).variable(), "${author}")
assertEquals(elementTemplates.get(i++).variable(), "${madan}")
assertEquals(elementTemplates.get(i++).variable(), "${aad}")
assertEquals(elementTemplates.get(i++).variable(), "${date}")
assertEquals(elementTemplates.get(i++).variable(), "${ada}")
assertEquals(elementTemplates.get(i++).variable(), "${faf}")
assertEquals(elementTemplates.get(i++).variable(), "${dfa}")
assertEquals(elementTemplates.get(i++).variable(), "${dfdf}")
assertEquals(elementTemplates.get(i++).variable(), "${fafd}")
assertEquals(elementTemplates.get(i++).variable(), "${adaf}")
assertEquals(elementTemplates.get(i++).variable(), "${ada}")
assertEquals(elementTemplates.get(i++).variable(), "${yi}")
assertEquals(elementTemplates.get(i++).variable(), "${dafd}")
assertEquals(elementTemplates.get(i++).variable(), "${dfas}")
assertEquals(elementTemplates.get(i++).variable(), "${@af}")
assertEquals(elementTemplates.get(i++).variable(), "${table0}")
assertEquals(elementTemplates.get(i++).variable(), "${table}")
assertEquals(1, paragraph.getRuns().size())
assertEquals(text, paragraph.getParagraphText())
assertEquals(5, paragraph.getRuns().size())
assertEquals("{{Hi}}", paragraph.getRuns().get(0).getText(0))
assertEquals("\n", paragraph.getRuns().get(1).toString())
assertEquals("\n", paragraph.getRuns().get(2).toString())
assertEquals("{{world}}", paragraph.getRuns().get(3).getText(0))
assertEquals("2", paragraph.getRuns().get(4).getText(0))
assertEquals(2, paragraph.getRuns().size())
assertEquals(3, paragraph.getRuns().size())
assertEquals("{{Hi}}", paragraph.getRuns().get(0).getText(0))
assertEquals("AA", paragraph.getRuns().get(1).toString())
assertEquals("http://deepoove.com", paragraph.getRuns().get(2).toString())
assertEquals(3, xwpfParagraph.getRuns().size())
assertEquals("{{Hi}}", xwpfParagraph.getRuns().get(0).getText(0))
assertEquals("AA", xwpfParagraph.getRuns().get(1).toString())
assertEquals("http://deepoove.com", xwpfParagraph.getRuns().get(2).toString())
assertEquals(person.getAliasName(), elObject.eval("aliasName"))
assertEquals(person.getAliasName(), elObject.eval("alias_name"))
assertEquals(person.getWork(), elObject.eval("work"))
assertEquals(person, elObject.eval("#this"))
assertEquals(user, elObject.eval("user"))
assertEquals(18, elObject.eval("user.age"))
assertEquals(user.getName(), elObject.eval("user.name"))
assertEquals(user.getPlace(), elObject.eval("user.place"))
assertEquals(user.isEnable(), elObject.eval("user.enable"))
assertEquals(asList, elObject.eval("user.alias"))
assertEquals("page1", paragraph.getParagraphText())
assertEquals("\n", paragraph1.getRuns().get(0).text())
assertEquals("page2", paragraph2.getParagraphText())
assertEquals(paragraph.getRuns().size(), 6)
assertEquals(paragraph.getRuns().size(), 0)
assertEquals(container.getPosOfParagraphCTP(paragraph.getCTP()), 2)
assertEquals(header.getTables().size(), 2)
assertEquals(header.getParagraphs().size(), 2)
assertEquals(container.getPosOfParagraph(paragraph), 2)
assertEquals(bodyElements.size(), 6)
assertEquals(header.getParagraphs().size(), 4)
assertEquals(container.getPosOfParagraph(paragraph), 3)
assertEquals(header.getParagraphs().size(), 4)
assertEquals(container.getPosOfParagraph(paragraph), 3)
assertEquals(container.getParaPos(paragraph), 1)
assertEquals(header.getTables().size(), 4)
assertEquals(container.getPosOfParagraph(paragraph), 3)
assertEquals(container.getTablePos(table), 1)
assertEquals(header.getTables().size(), 4)
assertEquals(container.getPosOfParagraph(paragraph), 3)
assertEquals(header.getParagraphs().size(), 2)
assertEquals(header.getParagraphs().size(), 3)
assertEquals(sourceSize + targetSize, resultSize)
assertEquals(sourceSize - 1 + targetSize1 + targetSize2, resultSize)
assertEquals(-1, source.getXWPFDocument().getDocument().toString().indexOf(":wps="))
assertNotEquals(-1, target.getXWPFDocument().getDocument().toString().indexOf(":wps="))
assertEquals(result.getParagraphs().size(), 1)
assertEquals(result.getParagraphArray(0).getText(), "")
assertNotEquals(-1, target.getXWPFDocument().getDocument().toString().indexOf(":wps="))
assertEquals(container.getPosOfParagraphCTP(paragraph.getCTP()), 2)
assertEquals(doc.getTables().size(), 2)
assertEquals(doc.getParagraphs().size(), 2)
assertEquals(container.getPosOfParagraph(paragraph), 2)
assertEquals(bodyElements.size(), 6)
assertEquals(doc.getParagraphs().size(), 4)
assertEquals(container.getPosOfParagraph(paragraph), 3)
assertEquals(doc.getParagraphs().size(), 4)
assertEquals(container.getPosOfParagraph(paragraph), 3)
assertEquals(container.getParaPos(paragraph), 1)
assertEquals(doc.getTables().size(), 4)
assertEquals(container.getPosOfParagraph(paragraph), 3)
assertEquals(container.getTablePos(table), 1)
assertEquals(doc.getTables().size(), 4)
assertEquals(container.getPosOfParagraph(paragraph), 3)
assertEquals(doc.getParagraphs().size(), 2)
assertEquals(doc.getParagraphs().size(), 3)
assertEquals(container.getPosOfParagraphCTP(paragraph.getCTP()), 2)
assertEquals(cell.getTables().size(), 2)
assertEquals(cell.getParagraphs().size(), 2)
assertEquals(container.getPosOfParagraph(paragraph), 2)
assertEquals(bodyElements.size(), 6)
assertEquals(cell.getParagraphs().size(), 4)
assertEquals(container.getPosOfParagraph(paragraph), 3)
assertEquals(cell.getParagraphs().size(), 4)
assertEquals(container.getPosOfParagraph(paragraph), 3)
assertEquals(container.getParaPos(paragraph), 1)
assertEquals(cell.getTables().size(), 4)
assertEquals(container.getPosOfParagraph(paragraph), 3)
assertEquals(container.getTablePos(table), 1)
assertEquals(cell.getTables().size(), 4)
assertEquals(container.getPosOfParagraph(paragraph), 3)
assertEquals(cell.getParagraphs().size(), 2)
assertEquals(cell.getParagraphs().size(), 3)
assertEquals(" Chinathis is endnote", xwpfEndnote.getParagraphArray(0).getText())
assertEquals("世界地图this is footernote", xwpfFootnote.getParagraphArray(0).getText())
assertNull(paragraph.getRuns().get(0).getFontFamily())
assertEquals(text, paragraph.getText())
assertEquals("微软雅黑", paragraph.getRuns().get(0).getFontFamily())
assertEquals(text, paragraph.getText())
assertEquals("index:1_is_first:true_is_last:false_has_next:true_is_even_item:false_is_odd_item:trueindex:2_is_first:false_is_last:false_has_next:true_is_even_item:true_is_odd_item:falseindex:3_is_first:false_is_last:false_has_next:true_is_even_item:false_is_odd_item:trueindex:4_is_first:false_is_last:true_has_next:false_is_even_item:true_is_odd_item:false", text)
assertEquals("[" + obj.getName() + "]", document.getParagraphArray(1).getText())
assertEquals("[" + obj.getWord() + "]", document.getParagraphArray(2).getText())
assertEquals("[" + obj.getTime() + "]", document.getParagraphArray(3).getText())
assertEquals("00", document.getTables().get(0).getRow(0).getCell(0).getText())
assertEquals(1, document.getAllPictures().size())
assertEquals(1, document.getHyperlinks().length)
assertEquals(paragraph.getText(), "Hi, poi-tl")
assertEquals(cell.getText(), "Hi, poi-tl")
assertEquals(paragraph.getText(), "Hi, poi-tl")
assertEquals(paragraph.getText(), "Hi, poi-tl")
assertEquals(paragraph.getText(), "Hello, My perfect.")
assertEquals(paragraph.getText(), "UserName: Sayi")
assertEquals(paragraph.getText(), "Date: 2020-02-10")
assertEquals(paragraph.getText(), "Date: 2020-02-10")
assertEquals(paragraph.getText(), "I love this Game Date: 2020-02-10 and good game.")
assertEquals("Hi, poi-tl", document.getParagraphArray(0).getText())
assertEquals("My perfect Sayi.My perfect Deepoove.", document.getParagraphArray(1).getText())
assertEquals("Please My perfect Sayi.My perfect Deepoove.", document.getParagraphArray(2).getText())
assertEquals("Good My perfect Sayi.My perfect Deepoove. Game.", document.getParagraphArray(3).getText())
assertEquals("Hello, My perfect Sayi.", document.getParagraphArray(5).getText())
assertEquals("Sayi", table0.getRow(1).getCell(2).getText())
assertEquals("addr: Hangzhou,China.", table0.getRow(2).getCell(1).getParagraphArray(0).getText())
assertEquals("addr: Shanghai,China.", table0.getRow(2).getCell(1).getParagraphArray(1).getText())
assertEquals("Deepoove", table1.getRow(1).getCell(2).getText())
assertEquals("", table1.getRow(2).getCell(1).getText())
assertEquals("开始，", document.getParagraphArray(0).getText())
assertEquals("结束。", document.getParagraphArray(1).getText())
assertEquals("开始，结束。", document.getParagraphArray(3).getText())
assertEquals("Hello, My perfect, http://deepoove.com,Sayi." + "addr:http://deepoove.comHangzhou,China.addr:http://deepoove.comShanghai,China." + "Hello, My perfect, http://deepoove.com,Deepoove website..", document.getParagraphArray(6).getText())
assertEquals(paragraph.getText(), "testTitle")
assertEquals(paragraph.getText(), "老师：t1\n" + "年龄：18")
assertEquals(paragraph.getText(), "老师：t2\n" + "年龄：36")
assertEquals(paragraph.getText(), "{{title}}")
assertEquals(paragraph.getText(), "{{+students}}")
assertEquals(paragraph.getText(), "{{+teachers}}")
assertEquals(paragraph.getText(), "{{title}}")
assertEquals(paragraph.getText(), "{{+students}}")
assertEquals(paragraph.getText(), "{{+teachers}}")
assertEquals(paragraph.getText(), "")
assertEquals(paragraph.getText(), "{{title}}")
assertEquals(paragraph.getText(), "{{+students}}")
assertEquals(paragraph.getText(), "{{+teachers}}")
assertEquals(result.getParagraphs().size(), 1)
assertEquals(result.getParagraphArray(0).getText(), "")
assertEquals(result.getParagraphs().size(), 1)
assertEquals(result.getParagraphArray(0).getText(), "")
assertEquals(result.getParagraphs().size(), 1)
assertEquals(result.getParagraphArray(0).getText(), "")
assertEquals(template.getElementTemplates().get(0).variable(), "{{orderInfo.Self}}")
assertEquals(template.getElementTemplates().get(1).variable(), "{{orderInfo.Remoter}}")
assertEquals(result.getBodyElements().size(), size + target.getBodyElements().size())
Assertions.assertEquals(paragraph.getText(), "data1\tdata1\tdata1")
assertEquals(tables.size(), 2)
assertEquals(tables.get(0).getRows().size(), 3)
assertEquals(tables.get(1).getRows().size(), 2)
assertEquals(paragraph.getText(), "姓名测试姓名0，年龄：测试年龄0。\n" + "姓名测试姓名1，年龄：测试年龄1。\n" + "姓名测试姓名2，年龄：测试年龄2。\n" + "姓名测试姓名3，年龄：测试年龄3。\n" + "姓名测试姓名4，年龄：测试年龄4。\n" + "姓名测试姓名0，年龄：测试年龄0。\n" + "姓名测试姓名1，年龄：测试年龄1。\n" + "姓名测试姓名2，年龄：测试年龄2。\n" + "姓名测试姓名3，年龄：测试年龄3。\n" + "姓名测试姓名4，年龄：测试年龄4。\n")
assertEquals(dataMap.get("projectName"), xwpfTable.getRow(1).getCell(1).getText())
assertEquals(dataMap.get("designDeptName"), xwpfTable.getRow(2).getCell(1).getText())
assertEquals(dataMap.get("applyUnitName"), xwpfTable.getRow(2).getCell(3).getText())
assertTrue(-1 != text.indexOf(dataMap.get("ownerDeptName")))
assertTrue(-1 != text.indexOf(dataMap.get("optimizeReason")))
assertTrue(-1 != text.indexOf(dataMap.get("optimizeChangeName")))
assertTrue(-1 != text.indexOf(dataMap.get("changeType")))
assertTrue(-1 != text.indexOf(dataMap.get("moneyChange")))
assertEquals("QA4时20分2020/3/2 16:20Deepoove website. and 发邮件给作者", document.getParagraphArray(0).getText())
assertEquals("HiAAhttp://baidu.comhttp:deepoove.com", document.getParagraphArray(0).getText())
assertEquals(1, newDocument.getParagraphs().size())
assertEquals("11ff22", StyleUtils.toRgb("#1f2"))
assertEquals("01645a", StyleUtils.toRgb("rgb(1,100,90)"))
assertEquals("000000", StyleUtils.toRgb("black"))
assertFalse(allCssStyles.isEmpty())
