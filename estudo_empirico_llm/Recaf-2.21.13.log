assertEquals("test/Person", graph.getCommon("test/Jedi", "test/Sith"))
assertEquals("test/Person", graph.getCommon("test/Jedi", "test/Person"))
assertEquals("test/Person", graph.getCommon("test/Person", "test/Person"))
assertEquals(expected.size(), hierarchy.stream().filter(v -> expected.contains(v.getData().getClassName())).count())
assertTrue(graph.isLibrary("test/Yoda", "toString", "()Ljava/lang/String;"))
assertTrue(graph.areLinked("test/Yoda", "say", "()V", "test/Greetings", "say", "()V"))
assertEquals(1, results.size())
assertEquals(Collections.emptySet(), result.getDifference())
assertEquals(1, results.size())
assertEquals(20, mappings.size())
assertEquals(1, results.size())
assertEquals(1, difference.size())
assertEquals("Start", vertex.getValue().getOwner())
assertEquals("main", vertex.getValue().getName())
assertEquals("([Ljava/lang/String;)V", vertex.getValue().getDesc())
assertEquals(Collections.emptySet(), result.getDifference())
assertEquals(1, results.size())
assertEquals(0, mappings.size())
assertEquals(0, mappings.size())
assertEquals(1, fields.size())
assertEquals("i", field.getName())
assertEquals("int", field.getType())
assertEquals("", field.getDescription())
assertEquals("protected", field.getModifiers().get(0))
assertEquals("final", field.getModifiers().get(1))
assertEquals(2, methods.size())
assertEquals("evaluate", method.getName())
assertEquals("double", method.getReturnType())
assertEquals("Evaluates an expression as a level deeper than the current one in the expression tree,", method.getDescription())
assertEquals("protected", method.getModifiers().get(0))
assertEquals("final", method.getModifiers().get(1))
assertEquals("Evaluated result.", method.getReturnDescription())
assertEquals(1, method.getParameters().size())
assertEquals("expression", parameter.getName())
assertEquals("Some math expression.", parameter.getDescription())
assertEquals("accept", method.getName())
assertEquals("double", method.getReturnType())
assertEquals("", method.getDescription())
assertEquals("public", method.getModifiers().get(0))
assertEquals("abstract", method.getModifiers().get(1))
assertEquals("Evaluated result.", method.getReturnDescription())
assertEquals(1, method.getParameters().size())
assertEquals("expression", parameter.getName())
assertEquals("Some math expression.", parameter.getDescription())
assertEquals(2, inheritance.size())
assertEquals("calc/Calculator", inheritance.get(0))
assertEquals("java/lang/Object", inheritance.get(1))
assertEquals(keys.length, subclasses.size())
assertEquals(0, subclasses.size())
assertEquals(small, frames[frames.length - 2].getLocal(0).getValue())
assertEquals(str, frames[3].getStack(0).getValue())
assertEquals(str.length(), frames[4].getStack(0).getValue())
assertEquals(part1 + part2, frames[frames.length - 2].getStack(0).getValue())
assertEquals(part1 + part2, retFrameLocal.getValue())
assertNotEquals(initial, retFrameLocal.getValue())
assertNotEquals(one, retFrameLocal.getValue())
assertNotEquals(two, retFrameLocal.getValue())
assertNotEquals(initial, retFrameLocal.getValue())
assertNotEquals(one, retFrameLocal.getValue())
assertEquals(two, retFrameLocal.getValue())
assertNotNull(result)
assertTrue(Arrays.binarySearch(paths, path) >= 0)
assertTrue(directedGraph.getVertex(1).isRoot())
assertTrue(directedGraph.getVertex(6).isRoot())
assertTrue(roots.contains(v1))
assertTrue(roots.contains(v6))
assertEquals(2, roots.size())
assertTrue(roots.contains(v1))
assertEquals(1, roots.size())
assertTrue(roots.contains(v1))
assertEquals(1, roots.size())
assertTrue(directedGraph.getVertex(4).isLeaf())
assertTrue(directedGraph.getVertex(5).isLeaf())
assertTrue(leaves.contains(v4))
assertTrue(leaves.contains(v5))
assertEquals(2, leaves.size())
assertTrue(leaves.contains(v5))
assertEquals(1, leaves.size())
assertTrue(leaves.contains(v5))
assertEquals(1, leaves.size())
assertEquals(2, resultMapping.size())
assertEquals("calc/Calculator.MAX_DEPTH_LEVEL", resultMapping.get("calc/Calculator.MAX_DEPTH"))
assertEquals("calc/Calculator.doEvaluate(ILjava/lang/String;)D", resultMapping.get("calc/Calculator.evaluate(ILjava/lang/String;)D"))
assertEquals(3, aggregateMapping.size())
assertEquals("renamed/MyCalc", aggregateMapping.get("calc/Calculator"))
assertEquals("MAX_DEPTH_LEVEL", aggregateMapping.get("calc/Calculator.MAX_DEPTH"))
assertEquals("doEvaluate", aggregateMapping.get("calc/Calculator.evaluate(ILjava/lang/String;)D"))
assertEquals(3, aggregateMapping.size())
assertEquals("renamed/MyCalc", aggregateMapping.get("calc/Calculator"))
assertEquals("MAX_DEPTH_LEVEL", aggregateMapping.get("calc/Calculator.MAX_DEPTH"))
assertEquals("doEvaluate", aggregateMapping.get("calc/Calculator.evaluate(ILjava/lang/String;)D"))
assertEquals(3, aggregateMapping.size())
assertEquals("renamed2/MyCalc2", aggregateMapping.get("calc/Calculator"))
assertEquals("MAX_DEPTH_LEVEL", aggregateMapping.get("calc/Calculator.MAX_DEPTH"))
assertEquals("doEvaluate", aggregateMapping.get("calc/Calculator.evaluate(ILjava/lang/String;)D"))
assertTrue(node instanceof ClassOrInterfaceType)
assertEquals("Scanner", ((ClassOrInterfaceType) node).asString())
assertTrue(node instanceof VariableDeclarator)
assertEquals("scanner", ((VariableDeclarator) node).getNameAsString())
assertTrue(node instanceof ClassOrInterfaceType)
assertEquals("Scanner", ((ClassOrInterfaceType) node).asString())
assertTrue(node instanceof FieldAccessExpr)
assertTrue(((FieldAccessExpr) node).getScope() instanceof NameExpr)
assertEquals("System", ((NameExpr) ((FieldAccessExpr) node).getScope()).getNameAsString())
assertEquals("in", ((FieldAccessExpr) node).getNameAsString())
assertTrue(node instanceof ClassOrInterfaceType)
assertEquals("java/lang/String", toInternal(dec))
assertTrue(node instanceof ClassOrInterfaceType)
assertEquals("calc/Exponent", toInternal(dec))
assertTrue(node instanceof PrimitiveType)
assertEquals("java/lang/Integer", toInternal(decPrim))
assertTrue(node instanceof FieldAccessExpr)
assertEquals("java/lang/System", getOwner(dec))
assertEquals("in", dec.getName())
assertEquals("Ljava/io/InputStream;", getDescriptor(dec))
assertTrue(node instanceof MethodCallExpr)
assertEquals("calc/Parenthesis", getOwner(dec))
assertEquals("accept", dec.getName())
assertEquals("(Ljava/lang/String;)D", getDescriptor(dec))
assertTrue(node instanceof MethodCallExpr)
assertEquals("java/io/PrintStream", getOwner(dec))
assertEquals("println", dec.getName())
assertEquals("(Ljava/lang/String;)V", getDescriptor(dec))
assertEquals(0, imports.size())
assertEquals(8, imports.size() - SourceCode.LANG_PACKAGE_NAMES.length)
assertEquals(2, imports.size())
assertTrue(imports.contains("java/util/regex/Matcher"))
assertTrue(imports.contains("java/util/regex/Pattern"))
assertEquals(9, imports.size())
assertTrue(imports.contains("java/util/Scanner"))
assertEquals(expected, actual)
assertNotEquals(emptySet(), expectedSrcNames)
assertNotEquals(emptySet(), foundSrcNames)
assertEquals(emptySet(), difference)
assertEquals(1, resource.getClassHistory(key).size())
assertEquals(1, resource.getFileHistory(key).size())
assertEquals(1, resource.getClassHistory(key).size())
assertEquals(1, resource.getClassHistory(key).size())
assertEquals(2, resource.getClassHistory(key).size())
assertEquals(3, resource.getClassHistory(key).size())
assertEquals(2, resource.getFileHistory(key).size())
assertEquals(3, resource.getFileHistory(key).size())
assertArrayEquals(DUMMY, resource.getClassHistory(key).pop())
assertArrayEquals(initial, resource.getClassHistory(key).pop())
assertArrayEquals(DUMMY, resource.getFileHistory(key).pop())
assertArrayEquals(initial, resource.getFileHistory(key).pop())
assertTrue(c.compile())
assertNotNull(outer)
assertNotNull(inner)
assertTrue(cDebug.compile())
assertTrue(cNone.compile())
assertNotNull(debug)
assertNotNull(nodebug)
assertTrue(debug.length > nodebug.length)
assertEquals("calc.jar", controller.getWorkspace().getPrimary().getShortName().toString())
assertEquals("Manifest.jar", controller.getWorkspace().getPrimary().getShortName().toString())
assertNotEquals(manifestBytes, null)
assertEquals(attr.size(), 2)
assertEquals(mainClass, "Code/Code/Code")
assertEquals(mainClass, "some/pkg/Main")
assertTrue(putted.contains(valueToPut))
assertTrue(resource.getDirtyClasses().contains(valueToPut))
assertTrue(putted.contains(valueToPut))
assertTrue(resource.getDirtyFiles().contains(valueToPut))
assertTrue(putted.contains(valueToPut1))
assertTrue(putted.contains(valueToPut2))
assertTrue(resource.getDirtyClasses().contains(valueToPut1))
assertTrue(resource.getDirtyClasses().contains(valueToPut2))
assertTrue(putted.contains(valueToPut1))
assertTrue(putted.contains(valueToPut2))
assertTrue(resource.getDirtyFiles().contains(valueToPut1))
assertTrue(resource.getDirtyFiles().contains(valueToPut2))
assertTrue(removed.contains(valueToRemove))
assertTrue(removed.contains(valueToRemove))
assertEquals(1, one.getEdges().size())
assertEquals("java/io/PrintStream", other.getOwner())
assertEquals("println", other.getName())
assertEquals("(Ljava/lang/String;)V", other.getDesc())
assertEquals(count, calledCount)
assertNotNull(result)
assertEquals(3, path.size())
assertEquals(one, path.get(0))
assertEquals(two, path.get(1))
assertEquals(three, path.get(2))
assertEquals(two, oneEdge)
assertEquals(three, twoEdge)
assertEquals(one, threeEdge)
assertEquals(parentThing, calledParent)
assertEquals(interfaceThing, calledInterface)
assertEquals(1, edges.size())
assertEquals(1, results.size())
assertEquals("EVAL: ", res.getText())
assertEquals(2, results.size())
assertEquals(2, results.size())
assertEquals(30, resVal.getValue())
assertEquals("EVAL: ", resStr.getText())
assertEquals(4, results.size())
assertEquals(4, results.size())
assertTrue(results.contains("calc/Expression.i I"))
assertTrue(results.contains("calc/Expression.<init>(I)V"))
assertTrue(results.contains("calc/Expression.accept(Ljava/lang/String;)D"))
assertTrue(results.contains("calc/Expression.evaluate(Ljava/lang/String;)D"))
assertEquals(3, results.size())
assertTrue(results.contains("calc/Parenthesis.LEVEL_UNSET I"))
assertTrue(results.contains("calc/Calculator.MAX_DEPTH I"))
assertTrue(results.contains("calc/Expression.i I"))
assertEquals(3, results.size())
assertEquals(2, exp)
assertEquals(1, calc)
assertEquals(2, results.size())
assertEquals(0, results.size())
assertEquals(1, results.size())
assertEquals("Start", ((ClassResult) results.get(0)).getName())
assertEquals(1, results.size())
assertEquals("Start", ((ClassResult) results.get(0)).getName())
assertEquals(1, results.size())
assertEquals("calc/Parenthesis", ((ClassResult) results.get(0)).getName())
assertEquals(1, results.size())
assertEquals("Start", ((ClassResult) results.get(0)).getName())
assertEquals(5, results.size())
assertTrue(results.contains("calc/Parenthesis"))
assertTrue(results.contains("calc/Exponent"))
assertTrue(results.contains("calc/MultAndDiv"))
assertTrue(results.contains("calc/AddAndSub"))
assertTrue(results.contains("calc/Constant"))
assertTrue(context instanceof Context.MemberContext)
assertEquals(owner, member.getParent().getName())
assertEquals(name, member.getName())
assertEquals(desc, member.getDesc())
assertEquals(msg, ast.getComment())
assertEquals(line, ast.print())
assertEquals(sig, ast.getSignature())
assertEquals(pre + sig, ast.print())
assertEquals("LDC \"Hello World\"", ldc.print())
assertEquals("LDC \"Hello World\"", ldc.print())
assertEquals(msg, ast.getComment())
assertEquals(line, ast.print())
assertEquals(name, ast.getName().getName())
assertEquals(line, ast.print())
assertEquals(type, ast.getType().getType())
assertEquals(line, ast.print())
assertEquals("main", def.getName().getName())
assertEquals(2, def.getModifiers().size())
assertEquals("public", def.getModifiers().get(0).getName())
assertEquals("static", def.getModifiers().get(1).getName())
assertEquals(1, def.getArguments().size())
assertEquals("[Ljava/lang/String;", def.getArguments().get(0).getDesc().getDesc())
assertEquals("args", def.getArguments().get(0).getVariableName().getName())
assertEquals("V", def.getReturnType().getDesc())
assertEquals("myList", def.getName().getName())
assertEquals(2, def.getModifiers().size())
assertEquals("public", def.getModifiers().get(0).getName())
assertEquals("static", def.getModifiers().get(1).getName())
assertEquals("Ljava/util/List;", def.getType().getDesc())
assertEquals("func", def.getName().getName())
assertEquals(0, def.getModifiers().size())
assertEquals("myList", def.getName().getName())
assertEquals("Ljava/util/List;", def.getType().getDesc())
assertEquals(0, def.getModifiers().size())
assertEquals("myLong", def.getName().getName())
assertEquals("J", def.getType().getDesc())
assertEquals(0, def.getModifiers().size())
assertEquals("func", def.getName().getName())
assertEquals(0, def.getArguments().size())
assertEquals("func", def.getName().getName())
assertEquals(2, def.getArguments().size())
assertEquals("I", def.getArguments().get(0).getDesc().getDesc())
assertEquals("int1", def.getArguments().get(0).getVariableName().getName())
assertEquals("I", def.getArguments().get(1).getDesc().getDesc())
assertEquals("int2", def.getArguments().get(1).getVariableName().getName())
assertEquals("start", def.getLblStart().getName())
assertEquals("end", def.getLblEnd().getName())
assertEquals("handler", def.getLblHandler().getName())
assertEquals("java/lang/Exception", def.getType().getType())
assertEquals(root.getChildren().get(0), root.getChildren().get(1).getPrev())
assertEquals(root.getChildren().get(1), root.getChildren().get(2).getPrev())
assertEquals(root.getChildren().get(1), root.getChildren().get(0).getNext())
assertEquals(root.getChildren().get(2), root.getChildren().get(1).getNext())
assertEquals(line, root.print())
assertEquals("ACONST_NULL", root.getChildren().get(0).print())
assertEquals("ARETURN", root.getChildren().get(1).print())
assertEquals(text, iiAst.print())
assertEquals("BIPUSH", iiAst.getOpcode().print())
assertEquals(5, iiAst.getValue().getIntValue())
assertEquals(text, iiAst.print())
assertEquals("ILOAD", iiAst.getOpcode().print())
assertEquals("i", iiAst.getVariableName().getName())
assertEquals(text, tiAST.print())
assertEquals("NEW", tiAST.getOpcode().print())
assertEquals("java/lang/String", tiAST.getType().getType())
assertEquals(text, tiAST.print())
assertEquals("IINC", tiAST.getOpcode().print())
assertEquals("i", tiAST.getVariableName().getName())
assertEquals(2, tiAST.getIncrement().getIntValue())
assertEquals(text, lineAST.print())
assertEquals("LINE", lineAST.getOpcode().print())
assertEquals("lbl", lineAST.getLabel().getName())
assertEquals(2, lineAST.getLineNumber().getIntValue())
assertEquals(text, arrayAST.print())
assertEquals(TypeUtil.typeToNewArrayArg(Type.INT_TYPE), arrayAST.getValue().getIntValue())
assertEquals(text, arrayAST.print())
assertEquals("MULTIANEWARRAY", arrayAST.getOpcode().print())
assertEquals("[[Ljava/lang/String;", arrayAST.getDesc().getDesc())
assertEquals(2, arrayAST.getDimensions().getIntValue())
assertEquals(text, fieldAST.print())
assertEquals("GETSTATIC", fieldAST.getOpcode().print())
assertEquals("java/lang/System", fieldAST.getOwner().getType())
assertEquals("out", fieldAST.getName().getName())
assertEquals("Ljava/io/PrintStream;", fieldAST.getDesc().getDesc())
assertEquals(text, methodAST.print())
assertEquals("INVOKEVIRTUAL", methodAST.getOpcode().print())
assertEquals("java/io/PrintStream", methodAST.getOwner().getType())
assertEquals("println", methodAST.getName().getName())
assertEquals("(Ljava/lang/String;)V", methodAST.getDesc().getDesc())
assertEquals(text, methodAST.print())
assertEquals("INVOKEVIRTUAL", methodAST.getOpcode().print())
assertEquals("java/lang/String", methodAST.getOwner().getType())
assertEquals("getBytes", methodAST.getName().getName())
assertEquals("()[B", methodAST.getDesc().getDesc())
assertEquals(text, ldc.print())
assertEquals("LDC", ldc.getOpcode().print())
assertEquals(1, ((NumberAST) ldc.getContent()).getIntValue())
assertEquals(text, ldc.print())
assertEquals(-10, ((NumberAST) ldc.getContent()).getIntValue())
assertEquals(text, ldc.print())
assertEquals(10000000000L, ((NumberAST) ldc.getContent()).getLongValue())
assertEquals(text, ldc.print())
assertEquals(-10000000000L, ((NumberAST) ldc.getContent()).getLongValue())
assertEquals(text, ldc.print())
assertEquals(2.5, ((NumberAST) ldc.getContent()).getDoubleValue())
assertEquals(text, ldc.print())
assertEquals(-2.5, ((NumberAST) ldc.getContent()).getDoubleValue())
assertEquals(text, ldc.print())
assertEquals(2.6F, ((NumberAST) ldc.getContent()).getFloatValue())
assertEquals(text, ldc.print())
assertEquals(-2.6F, ((NumberAST) ldc.getContent()).getFloatValue())
assertEquals(text, ldc.print())
assertEquals("text", ((StringAST) ldc.getContent()).getValue())
assertEquals(text, ldc.print())
assertEquals("", ((StringAST) ldc.getContent()).getValue())
assertEquals(text, ldc.print())
assertEquals("\\n", ((StringAST) ldc.getContent()).getValue())
assertEquals("\n", ((StringAST) ldc.getContent()).getUnescapedValue())
assertEquals(text, ldc.print())
assertEquals("\\t", ((StringAST) ldc.getContent()).getValue())
assertEquals("\t", ((StringAST) ldc.getContent()).getUnescapedValue())
assertEquals(text, ldc.print())
assertEquals("\t", ((StringAST) ldc.getContent()).getValue())
assertEquals("\t", ((StringAST) ldc.getContent()).getUnescapedValue())
assertEquals(text, ldc.print())
assertEquals("\\u0000", ((StringAST) ldc.getContent()).getUnescapedValue())
assertEquals("\\u4E0B\\u96E8\\u4E86", ((StringAST) ldc.getContent()).getValue())
assertEquals("下雨了", ((StringAST) ldc.getContent()).getUnescapedValue())
assertEquals(text, ldc.print())
assertEquals("下雨了", ((StringAST) ldc.getContent()).getValue())
assertEquals("下雨了", ((StringAST) ldc.getContent()).getUnescapedValue())
assertEquals(text, ldc.print())
assertEquals("\\u048", ((StringAST) ldc.getContent()).getValue())
assertEquals("\\u048", ((StringAST) ldc.getContent()).getUnescapedValue())
assertEquals(text, ldc.print())
assertEquals("C:\\\\example\\\\recaf.jar", ((StringAST) ldc.getContent()).getValue())
assertEquals("C:\\example\\recaf.jar", ((StringAST) ldc.getContent()).getUnescapedValue())
assertEquals(text, ldc.print())
assertEquals(text, ldc.print())
assertEquals("Ljava/lang/String;", ((DescAST) ldc.getContent()).getDesc())
assertEquals(text, tbl.print())
assertEquals("TABLESWITCH", tbl.getOpcode().print())
assertEquals("D", tbl.getDfltLabel().print())
assertEquals(0, tbl.getRangeMin().getIntValue())
assertEquals(2, tbl.getRangeMax().getIntValue())
assertEquals(3, tbl.getLabels().size())
assertEquals(text, tbl.print())
assertEquals("LOOKUPSWITCH", tbl.getOpcode().print())
assertEquals("D", tbl.getDfltLabel().print())
assertEquals(3, tbl.getMapping().size())
assertEquals(text, tbl.print())
assertEquals("LOOKUPSWITCH", tbl.getOpcode().print())
assertEquals("D", tbl.getDfltLabel().print())
assertEquals(0, tbl.getMapping().size())
assertEquals(text, indy.print())
assertEquals("INVOKEDYNAMIC", indy.getOpcode().print())
assertEquals("handle", indy.getName().getName())
assertEquals("(Lgame/SnakeController;)Ljavafx/event/EventHandler;", indy.getDesc().getDesc())
assertEquals(text, indy.print())
assertEquals(text, indy.print())
assertEquals("H_INVOKESTATIC", handle.getTag().getName())
assertEquals("TextBlockLiteralExpr", handle.getOwner().getType())
assertEquals("stripIndent", handle.getName().getName())
assertEquals("([LString;I)LPair;", handle.getDesc().getDesc())
assertEquals(text, indy.print())
assertEquals(text, indy.print())
assertTrue(suggestions.contains("java/lang/String"))
assertTrue(suggestions.contains("[Ljava/lang/String;"))
assertTrue(suggestions.contains("java/lang/System"))
assertTrue(suggestions.contains("out Ljava/io/PrintStream;"))
assertTrue(suggestions.contains("java/lang/System"))
assertTrue(suggestions.contains("println(Ljava/lang/String;)V"))
assertTrue(suggestions.contains("example"))
assertEquals(1, suggestions.size())
assertTrue(suggestions.contains("args"))
assertEquals(1, suggestions.size())
assertTrue(suggestions.contains("example"))
assertEquals(1, suggestions.size())
assertTrue(suggestions.contains("example"))
assertEquals(1, suggestions.size())
assertTrue(suggestions.contains("example"))
assertEquals(1, suggestions.size())
assertTrue(suggestions.contains("example"))
assertEquals(1, suggestions.size())
assertTrue(suggestions.contains("example"))
assertEquals(1, suggestions.size())
assertTrue(suggestions.contains("java/lang/Exception"))
assertTrue(suggestions.contains("example"))
assertEquals(1, suggestions.size())
assertTrue(suggestions.contains("H_GETSTATIC"))
assertTrue(suggestions.contains("H_GETFIELD"))
assertEquals(2, suggestions.size())
assertTrue(suggestions.contains("out Ljava/io/PrintStream;"))
assertEquals(1, suggestions.size())
assertTrue(suggestions.contains("println(Ljava/lang/String;)V"))
assertTrue(suggestions.isEmpty())
