assertFalse(mappings.get(0).getRequest().getHeaders().containsKey("No"))
assertTrue(match.isExactMatch())
assertTrue(match.isExactMatch())
assertTrue(result)
assertTrue(result)
assertFalse(result)
assertTrue(pattern.isMatchAny())
assertFalse(pattern.isMatchAll())
assertTrue(pattern.isMatchAny())
assertFalse(pattern.isMatchAll())
assertTrue(pattern.isMatchAll())
assertFalse(pattern.isMatchAny())
assertNull(pattern)
assertTrue(matcher.match("2022-06-14T12:13:14Z").isExactMatch())
assertFalse(matcher.match("2020-06-14T12:13:14Z").isExactMatch())
assertTrue(matcher.match("2022-06-14T12:13:14").isExactMatch())
assertFalse(matcher.match("2020-06-14T12:13:14").isExactMatch())
assertTrue(matcher.match("2022-06-14T12:13:14Z").isExactMatch())
assertFalse(matcher.match("2020-06-14T12:13:14Z").isExactMatch())
assertTrue(matcher.match("2021-07-01T23:59:59").isExactMatch())
assertFalse(matcher.match("2021-06-01T15:15:15").isExactMatch())
assertTrue(matcher.match(good.toString()).isExactMatch())
assertFalse(matcher.match(bad.toString()).isExactMatch())
assertTrue(matcher.match(good.toString()).isExactMatch())
assertFalse(matcher.match(bad.toString()).isExactMatch())
assertFalse(matcher.match(null).isExactMatch())
assertTrue(matcher.match(good.toString()).isExactMatch())
assertFalse(matcher.match(bad.toString()).isExactMatch())
assertTrue(matcher.match("2021-01-01T00:00:00Z").isExactMatch())
assertTrue(matcher.match("2021-01-01T00:00:00").isExactMatch())
assertTrue(matcher.match("2022-06-01T11:22:33Z").isExactMatch())
assertTrue(matcher.match("2019-06-01T11:22:33Z").isExactMatch())
assertFalse(matcher.match("2020-06-01T11:22:33Z").isExactMatch())
assertFalse(matchResult.isExactMatch())
assertTrue(matchResult.isExactMatch())
assertFalse(matchResult.isExactMatch())
assertTrue(matchResult.isExactMatch())
assertFalse(matchResult.isExactMatch())
assertTrue(matchResult.isExactMatch())
assertFalse(matchResult.isExactMatch())
assertTrue(matchResult.isExactMatch())
assertFalse(matchResult.isExactMatch())
assertTrue(matchResult.isExactMatch())
assertFalse(matchResult.isExactMatch())
assertTrue(matchResult.isExactMatch())
assertFalse(matchResult.isExactMatch())
assertFalse(matchResult.isExactMatch())
assertTrue(matchResult.isExactMatch())
assertTrue(matchResult.isExactMatch())
assertFalse(matchResult.isExactMatch())
assertFalse(matchResult.isExactMatch())
assertFalse(matchResult.isExactMatch())
assertTrue(WireMock.notContaining("thing").match("otherstuff").isExactMatch())
assertTrue(WireMock.notContaining("thing").match(null).isExactMatch())
assertFalse(matchResult.isExactMatch())
assertTrue(WireMock.containing("thing").match("mythings").isExactMatch())
assertFalse(matchResult.isExactMatch())
assertFalse(matchResult.isExactMatch())
assertFalse(matchResult.isExactMatch())
assertFalse(matchResult.isExactMatch())
assertTrue(pattern.match("<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n" + "<things>\n" + "    <thing characteristic=\"tepid\"/>\n" + "    <thing characteristic=\"tedious\"/>\n" + "</things>").isExactMatch())
assertTrue(pattern.match("<things><thing characteristic=\"tepid\"/><thing characteristic=\"tedious\"/></things>").isExactMatch())
assertFalse(matchResult.isExactMatch())
assertTrue(match.isExactMatch())
assertTrue(match.isExactMatch())
assertFalse(pattern.match("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n" + "<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n" + "    <soap:Body>\n" + "        <stuff xmlns=\"https://example.com/the-wrong-namespace\">\n" + "            <things />\n" + "        </stuff>\n" + "    </soap:Body>\n" + "</soap:Envelope>\n").isExactMatch())
assertTrue(pattern.match("<my-attribs two=\"2\" one=\"1\" three=\"3\"/>").isExactMatch())
assertTrue(pattern.match("<my-elements>\n" + "    <two />\n" + "    <three />\n" + "    <one />\n" + "</my-elements>").isExactMatch())
assertTrue(pattern.match(xmlWithDtdThatCannotBeFetched).isExactMatch())
assertNull(equalToXmlPattern.getPlaceholderOpeningDelimiterRegex())
assertNull(equalToXmlPattern.getPlaceholderClosingDelimiterRegex())
assertTrue(matchResult.isExactMatch())
assertTrue(matchResult.isExactMatch())
assertTrue(stringValuePattern instanceof EqualToXmlPattern)
assertTrue(stringValuePattern instanceof EqualToXmlPattern)
assertEquals(enablePlaceholders, equalToXmlPattern.isEnablePlaceholders())
assertEquals(placeholderOpeningDelimiterRegex, equalToXmlPattern.getPlaceholderOpeningDelimiterRegex())
assertEquals(placeholderClosingDelimiterRegex, equalToXmlPattern.getPlaceholderClosingDelimiterRegex())
assertTrue(matchResult.isExactMatch())
assertTrue(pattern.match(actual).isExactMatch())
assertTrue(pattern.isMatchAny())
assertNull(pattern.getBodyPatterns())
assertTrue(pattern.isMatchAll())
assertNull(pattern.getHeaders())
assertTrue(pattern.isMatchAny())
assertTrue(pattern.isMatchAny())
assertEquals(pattern.getBodyPatterns().get(0).getExpected(), expectedBinary)
assertTrue(pattern.isMatchAll())
assertFalse(pattern.isMatchAll())
assertFalse(pattern.isMatchAny())
assertFalse(pattern.isMatchAll())
assertFalse(pattern.isMatchAll())
assertFalse(pattern.isMatchAny())
assertTrue(matcher.match("2021-06-14T12:13:14Z").isExactMatch())
assertFalse(matcher.match("1921-06-14T12:13:14Z").isExactMatch())
assertTrue(matcher.match("2021-06-24T12:40:27Z").isExactMatch())
assertFalse(matcher.match("2021-06-24T13:40:27Z").isExactMatch())
assertTrue(matcher.match("2021-06-14T12:13:14").isExactMatch())
assertFalse(matcher.match("1921-06-14T12:13:14").isExactMatch())
assertTrue(matcher.match("2021-06-14T12:13:14Z").isExactMatch())
assertFalse(matcher.match("1921-06-14T12:13:14Z").isExactMatch())
assertTrue(matcher.match(good).isExactMatch())
assertFalse(matcher.match(bad).isExactMatch())
assertTrue(matcher.match(good).isExactMatch())
assertFalse(matcher.match(bad).isExactMatch())
assertTrue(matcher.match(good).isExactMatch())
assertFalse(matcher.match(bad).isExactMatch())
assertFalse(matcher.match(null).isExactMatch())
assertTrue(matcher.match(good.toString()).isExactMatch())
assertFalse(matcher.match(bad.toString()).isExactMatch())
assertTrue(matcher.match("2020-08-29T00:00:00Z").isExactMatch())
assertTrue(matcher.match("2020-08-29T00:00:00").isExactMatch())
assertTrue(MultiValuePattern.absent().match(HttpHeader.absent("any-key")).isExactMatch())
assertFalse(MultiValuePattern.absent().match(httpHeader("the-key", "the value")).isExactMatch())
assertFalse(MultiValuePattern.of(beforeNow()).match(HttpHeader.absent("any-key")).isExactMatch())
assertTrue(MultiValuePattern.of(equalTo("required-value")).match(httpHeader("the-key", "required-value")).isExactMatch())
assertFalse(matchResult.isExactMatch())
assertTrue(MultiValuePattern.of(equalTo("required-value")).match(httpHeader("any-key", "require1234567", "required-value", "1234567rrrr")).isExactMatch())
assertTrue(MultiValuePattern.of(equalTo("required-value")).match(queryParam("any-key", "require1234567", "required-value", "1234567rrrr")).isExactMatch())
assertTrue(matcher.match("2020-06-01T11:22:33Z").isExactMatch())
assertFalse(matcher.match("2021-06-01T11:22:33Z").isExactMatch())
assertTrue(matcher.match("2021-06-01T15:15:15Z").isExactMatch())
assertFalse(matcher.match("2021-07-01T23:59:59Z").isExactMatch())
assertTrue(matcher.match("2021-06-01T15:15:15").isExactMatch())
assertFalse(matcher.match("2021-07-01T23:59:59").isExactMatch())
assertTrue(matcher.match("2021-06-01T15:15:15").isExactMatch())
assertFalse(matcher.match("2021-07-01T23:59:59").isExactMatch())
assertTrue(matcher.match("2021-06-01T15:15:15Z").isExactMatch())
assertFalse(matcher.match("2021-07-01T23:59:59Z").isExactMatch())
assertFalse(matcher.match("2021-06-01T15:15:blahsdfj123").isExactMatch())
assertFalse(matcher.match(null).isExactMatch())
assertFalse(matcher.match("2021-06-01T15:15:15Z").isExactMatch())
assertTrue(matcher.match("Tue, 01 Jun 2021 15:16:17 GMT").isExactMatch())
assertFalse(matcher.match("Thu, 01 Jul 2021 15:16:17 GMT").isExactMatch())
assertTrue(matcher.match("Tuesday, 01-Jun-21 14:14:14 GMT").isExactMatch())
assertFalse(matcher.match("Thursday, 01-Jul-21 15:16:17 GMT").isExactMatch())
assertTrue(matcher.match("Tue Jun  1 01:01:01 2021").isExactMatch())
assertFalse(matcher.match("Thu Jul  1 01:01:01 2021").isExactMatch())
assertTrue(matcher.match("Thu Jun 10 01:01:01 2021").isExactMatch())
assertFalse(matcher.match("Sat Jul 10 01:01:01 2021").isExactMatch())
assertTrue(matcher.match("2021-06-14T15:15:15+01:00[Europe/London]").isExactMatch())
assertFalse(matcher.match("2021-06-14T16:15:15+01:00[Europe/London]").isExactMatch())
assertTrue(matcher.match("01/06/2021").isExactMatch())
assertFalse(matcher.match("01/07/2021").isExactMatch())
assertTrue(matcher.match(right).isExactMatch())
assertFalse(matcher.match(wrong).isExactMatch())
assertTrue(matcher.match(right).isExactMatch())
assertFalse(matcher.match(wrong).isExactMatch())
assertTrue(matcher.match(good.toString()).isExactMatch())
assertFalse(matcher.match(bad.toString()).isExactMatch())
assertTrue(matcher.match(good.toString()).isExactMatch())
assertFalse(matcher.match(bad.toString()).isExactMatch())
assertTrue(matcher.match(good.toString()).isExactMatch())
assertFalse(matcher.match(bad.toString()).isExactMatch())
assertTrue(matcher.match(good.toString()).isExactMatch())
assertFalse(matcher.match(bad.toString()).isExactMatch())
assertTrue(matcher.match("2019-01-01T00:00:00Z").isExactMatch())
assertTrue(matcher.match("2019-01-01T00:00:00").isExactMatch())
assertTrue(WireMock.equalToJson("{                  \n" + "   \"one\":    1,  \n" + "   \"two\":    2,  \n" + "   \"three\":  3,  \n" + "   \"four\":   4   \n" + "}                  \n").match("{                  \n" + "   \"one\":    1,  \n" + "   \"three\":  3,  \n" + "   \"two\":    2,  \n" + "   \"four\":   4   \n" + "}                  \n").isExactMatch())
assertFalse(WireMock.equalToJson("[1, 2, 3, 4]").match("[1, 3, 2, 4]").isExactMatch())
assertTrue(WireMock.equalToJson("[1, 2, 3, 4]", true, false).match("[1, 3, 2, 4]").isExactMatch())
assertTrue(WireMock.equalToJson("{\n" + "    \"one\": 1,\n" + "    \"two\": [\n" + "        { \"val\": 1 },\n" + "        { \"val\": 2 },\n" + "        { \"val\": 3 }\n" + "    ]\n" + "}", true, false).match("{\n" + "    \"one\": 1,\n" + "    \"two\": [\n" + "        { \"val\": 3 },\n" + "        { \"val\": 2 },\n" + "        { \"val\": 1 }\n" + "    ]\n" + "}").isExactMatch())
assertTrue(WireMock.equalToJson("{                  \n" + "   \"one\":    1,  \n" + "   \"two\":    2,  \n" + "   \"three\":  3,  \n" + "   \"four\":   4   \n" + "}                  \n", false, true).match("{                  \n" + "   \"one\":    1,  \n" + "   \"three\":  3,  \n" + "   \"two\":    2,  \n" + "   \"four\":   4,  \n" + "   \"five\":   5,  \n" + "   \"six\":    6   \n" + "}                  \n").isExactMatch())
assertTrue(WireMock.equalToJson("{                          \n" + "   \"one\":    1,          \n" + "   \"two\":    2,          \n" + "   \"three\":  3,          \n" + "   \"four\":   [1, 2, 3]   \n" + "}                  \n", true, true).match("{                          \n" + "   \"one\":    1,          \n" + "   \"three\":  3,          \n" + "   \"two\":    2,          \n" + "   \"four\":   [2, 1, 3],  \n" + "   \"five\":   5,          \n" + "   \"six\":    6           \n" + "}                          \n").isExactMatch())
assertFalse(new EqualToJsonPattern("{\n" + "    \"outer\": {\n" + "        \"inner:\": {\n" + "            \"wrong\": 1\n" + "        }\n" + "    }\n" + "}", false, false).match("{\n" + "    \"outer\": {\n" + "        \"inner:\": {\n" + "            \"thing\": 1\n" + "        }\n" + "    }\n" + "}").isExactMatch())
assertFalse(match.isExactMatch())
assertFalse(match.isExactMatch())
assertFalse(match.isExactMatch())
assertFalse(match.isExactMatch())
assertFalse(match.isExactMatch())
assertFalse(match.isExactMatch())
assertFalse(match.isExactMatch())
assertFalse(match.isExactMatch())
assertTrue(result.isExactMatch())
assertTrue(urlPattern.match("/my/exact/url?one=1&two=2&three=3333333").isExactMatch())
assertFalse(urlPattern.match("/my/wrong/url?one=1&three=3333333").isExactMatch())
assertTrue(urlPattern.match("/my/regex/url?one=1&two=123456&three=3333333").isExactMatch())
assertFalse(urlPattern.match("/my/BAD/url?one=1&two=123456&three=3333333").isExactMatch())
assertTrue(urlPathPattern.match("/the/exact/path").isExactMatch())
assertFalse(urlPathPattern.match("/totally/incorrect/path").isExactMatch())
assertTrue(urlPathPattern.match("/my/regex/path?one=not_looked_at").isExactMatch())
assertFalse(urlPathPattern.match("/my/12345/path").isExactMatch())
assertTrue(match.isExactMatch())
assertTrue(match.isExactMatch())
assertTrue(match.isExactMatch())
assertTrue(match.isExactMatch())
assertTrue(match.isExactMatch())
assertTrue(match.isExactMatch())
assertTrue(match.isExactMatch())
assertTrue(result.isExactMatch())
assertTrue(result.isExactMatch())
assertFalse(match.isExactMatch())
assertFalse(match.isExactMatch())
assertEquals(200, statusCode)
assertEquals(200, statusCode)
assertEquals(200, statusCode)
assertEquals(200, statusCode)
assertEquals(200, response.statusCode())
assertNull(httpConnector)
assertSame(one, two)
assertFalse(options.getStores().getSettingsStore().get().getProxyPassThrough())
assertTrue(options.getStores().getSettingsStore().get().getProxyPassThrough())
assertTrue(options.getStores().getSettingsStore().get().getProxyPassThrough())
assertTrue(wm.listAllStubMappings().getMappings().isEmpty())
assertTrue(wm.listAllStubMappings().getMappings().isEmpty())
assertFalse(fetchedSettings.getProxyPassThrough())
assertTrue(callSucceeded.get())
assertTrue(callSucceeded.get())
assertTrue(exception.getMessage().contains("Not listening on HTTP port. Either HTTP is not enabled or the WireMock server is stopped."))
assertEquals(loggedResponse.getBodyAsString(), "")
assertTrue(loggedRequest.containsHeader("content-type"))
assertNotNull(loggedRequest.getHeader("content-type"))
assertTrue(loggedRequest.containsHeader("CONTENT-TYPE"))
assertNotNull(loggedRequest.getHeader("CONTENT-TYPE"))
assertTrue(loggedRequest.containsHeader("Accept"))
assertNotNull(loggedRequest.getHeader("Accept"))
assertTrue(reqMap.containsKey("queryParams"))
assertEquals("value-1", ((List) ((Map) ((Map) reqMap.get("queryParams")).get("test-param-1")).get("values")).get(0))
assertEquals("value-2", ((List) ((Map) ((Map) reqMap.get("queryParams")).get("test-param-2")).get("values")).get(0))
assertEquals("test-param-1", req.queryParameter("test-param-1").key())
assertEquals("value-1", req.queryParameter("test-param-1").firstValue())
assertEquals("test-param-2", req.queryParameter("test-param-2").key())
assertEquals("value-2", req.queryParameter("test-param-2").firstValue())
assertDoesNotThrow(() -> new DirectCallHttpServer(options, adminRequestHandler, stubRequestHandler))
assertDoesNotThrow(server::start)
assertTrue(server.isRunning())
assertEquals(server.isRunning(), isRunning)
assertEquals(server.port(), -1)
assertEquals(server.httpsPort(), -2)
assertEquals(response, actual)

fail()
assertEquals("The request was not handled within the timeout of 5ms", actual.getMessage())
assertTrue(actual.getCause() instanceof TimeoutException)
assertEquals(404, response.getStatus())
assertEquals(200, response.getStatus())
assertEquals("THINGS!", response.getBodyAsString())
assertNull(alias)
assertEquals("default_alias", alias)
assertEquals("default_alias", alias)
assertEquals("default_alias", alias)
assertEquals("default_alias", alias)
assertEquals("default_alias", alias)
assertEquals("default_alias", alias)
assertEquals("default_alias", alias)
assertEquals("default_alias", alias)
assertNull(generatingKeyManager.getCertificateChain(hostname))
assertNull(generatingKeyManager.getPrivateKey(hostname))
assertEquals(hostname, keyAlias)
assertEquals(2, generatingKeyManager.getCertificateChain(keyAlias).length)
assertEquals(myPublicKey, generatingKeyManager.getCertificateChain(keyAlias)[0].getPublicKey())
assertEquals(keyAlias, sameKeyAlias)
assertEquals(privateKey, generatingKeyManager.getPrivateKey(sameKeyAlias))
assertArrayEquals(certificateChain, generatingKeyManager.getCertificateChain(sameKeyAlias))
assertNull(alias)
assertEquals("default_alias", alias)
assertEquals("default_alias", alias)
assertEquals("default_alias", alias)
assertEquals("default_alias", alias)
assertEquals("default_alias", alias)
assertEquals("default_alias", alias)
assertEquals("default_alias", alias)
fail("A execução falhou por uma causa deliberada")
assertEquals(invalidCertForTrustManager1, thrown)
assertEquals(invalidCertForTrustManager2, thrown)
assertArrayEquals(new X509Certificate[] { cert1, cert2, cert3, cert4 }, acceptedIssuers)
assertArrayEquals(new X509Certificate[] { cert1, cert2, cert3, cert4 }, compositeTrustManager.getAcceptedIssuers())
assertEquals("Hello World", result)
assertEquals(response.getBodyAsString(), "Result")
assertEquals(HTTP_INTERNAL_ERROR, response.getStatus())
assertEquals(response.getBodyAsString(), "Result")
fail("A execução falhou por uma causa deliberada", "A execução falhou por uma causa deliberada")
assertTrue(encoding.isPresent())
assertTrue(encoding.isPresent())
assertTrue(encoding.isPresent())
fail("WireMock did not shut down")
fail("WireMock did not shut down")
fail(String.format("Couldn't find a file under %s named like %s", directory.getPath(), namePart))
fail(String.format("Couldn't find a file under %s named like %s", directory.getPath(), namePart), "A execução falhou por uma causa deliberada")
assertTrue(exception.getMessage().contains("No requests exactly matched. Most similar request was:"))
assertNotNull(keyStore)
assertNotNull(keyStore)
assertNotNull(keyStore)
assertFalse(header.encodingPart().isPresent())
assertTrue(ContentTypes.determineIsTextFromExtension("txt"))
assertTrue(ContentTypes.determineIsTextFromExtension("json"))
assertTrue(ContentTypes.determineIsTextFromExtension("xml"))
assertTrue(ContentTypes.determineIsTextFromExtension("html"))
assertTrue(ContentTypes.determineIsTextFromExtension("htm"))
assertTrue(ContentTypes.determineIsTextFromExtension("yaml"))
assertTrue(ContentTypes.determineIsTextFromExtension("csv"))
assertFalse(ContentTypes.determineIsTextFromExtension("jpg"))
assertFalse(ContentTypes.determineIsTextFromExtension("png"))
assertFalse(ContentTypes.determineIsTextFromExtension(null))
assertFalse(ContentTypes.determineIsTextFromExtension(""))
assertTrue(ContentTypes.determineIsTextFromMimeType("text/plain"))
assertTrue(ContentTypes.determineIsTextFromMimeType("text/html"))
assertTrue(ContentTypes.determineIsTextFromMimeType("application/json"))
assertTrue(ContentTypes.determineIsTextFromMimeType("some-preamble; application/json"))
assertTrue(ContentTypes.determineIsTextFromMimeType("application/blah.something+json"))
assertTrue(ContentTypes.determineIsTextFromMimeType("application/xml"))
assertTrue(ContentTypes.determineIsTextFromMimeType("text/xml"))
assertTrue(ContentTypes.determineIsTextFromMimeType("text/xml; utf-8"))
assertTrue(ContentTypes.determineIsTextFromMimeType("application/csv"))
assertTrue(ContentTypes.determineIsTextFromMimeType("application/x-www-form-urlencoded"))
assertFalse(ContentTypes.determineIsTextFromMimeType("application/octet-stream"))
assertFalse(ContentTypes.determineIsTextFromMimeType("image/jpeg"))
assertFalse(ContentTypes.determineIsTextFromMimeType("application/pdf"))
assertTrue(ContentTypes.determineIsText("txt", "text/plain"))
assertTrue(ContentTypes.determineIsText("xml", ""))
assertTrue(ContentTypes.determineIsText("json", null))
assertFalse(ContentTypes.determineIsText("png", null))
assertFalse(ContentTypes.determineIsText(null, "image/jpeg"))
assertEquals("/home/bob/myfile.txt", path)
assertEquals(Paths.get("C:/Users/bob/myfile.txt"), path)
assertArrayEquals(empty, concat(empty, empty))
assertArrayEquals(new Integer[] { 1, 2 }, result)
assertArrayEquals(new Integer[] { 1, 2 }, result)
assertArrayEquals(new Integer[] { 1, 2 }, result)
assertArrayEquals(new Integer[] { 1, 2 }, result)
assertArrayEquals(new Integer[] { 1, 2, 3, 4 }, result)
assertArrayEquals(new Integer[] { 1, 2, 3, 4 }, result)
assertArrayEquals(new Integer[] { null }, prepend(null, empty))
assertArrayEquals(new Integer[] { 1 }, result)
assertArrayEquals(new Integer[] { null, 1, 2 }, result)
assertArrayEquals(new Integer[] { null, 1, 2 }, result)
assertArrayEquals(new Integer[] { 1, 2, 3 }, result)
assertArrayEquals(new Integer[] { 1, 2, 3 }, result)
fail("WireMock did not shut down", "A execução falhou por uma causa deliberada")
fail("WireMock did not shut down", "A execução falhou por uma causa deliberada")
assertEquals(pair(Collections.<Number>emptyList(), Collections.<Integer>emptyList()), splitByType(input, Integer.class))
assertEquals(pair(singletonList(1L), Collections.<Integer>emptyList()), splitByType(input, Integer.class))
assertEquals(pair(Collections.<Number>emptyList(), singletonList(1)), splitByType(input, Integer.class))
assertEquals(pair(asList(1L, 2L, 3L), asList(1, 2, 3)), splitByType(input, Integer.class))
assertTrue(PathTemplate.couldBePathTemplate("/things/{id}"))
assertTrue(PathTemplate.couldBePathTemplate("/things/**"))
assertTrue(PathTemplate.couldBePathTemplate("/things/{id}/stuff"))
assertTrue(optional.isPresent())
assertEquals(Integer.valueOf(number), optional.get())
assertTrue(optional.isPresent())
assertEquals(Long.valueOf(longNumber), optional.get())
assertTrue(Limit.UNLIMITED.isUnlimited())
assertEquals(3, proxyingService.getStubMappings().size())
assertFalse(PathTemplate.couldBePathTemplate("/things/in/path"))
assertFalse(PathTemplate.couldBePathTemplate("/thing"))
assertFalse(jettySettings.getAcceptors().isPresent())
assertFalse(jettySettings.getAcceptQueueSize().isPresent())
assertFalse(jettySettings.getRequestHeaderSize().isPresent())
assertFalse(jettySettings.getStopTimeout().isPresent())
assertFalse(jettySettings.getIdleTimeout().isPresent())
assertFalse(wireMockConfiguration.getStores().getSettingsStore().get().getProxyPassThrough())
assertEquals(stubMapping, result)
assertEquals(stubMapping, result)
assertEquals("/?transformed=nonglobal", result.getRequest().getUrl())
assertEquals("/?transformed=global", result.getRequest().getUrl())
assertEquals(FULL, SnapshotOutputFormatter.fromString(null))
assertEquals(FULL, SnapshotOutputFormatter.fromString("full"))
assertEquals(IDS, SnapshotOutputFormatter.fromString("ids"))
assertEquals(expected.build(), new RequestPatternTransformer(null, null).apply(request).build())
assertEquals(expected.build(), new RequestPatternTransformer(headers, null).apply(request).build())
assertEquals(new ResponseDefinitionBodyMatcher(Long.MAX_VALUE, Long.MAX_VALUE), matcher)
assertEquals(new ResponseDefinitionBodyMatcher(100, Long.MAX_VALUE), matcher)
assertEquals(new ResponseDefinitionBodyMatcher(100, 10), matcher)
assertFalse(matcher.match(new ResponseDefinition()).isExactMatch())
assertTrue(matcher.match(textResponseDefinition("a")).isExactMatch())
assertTrue(matcher.match(binaryResponseDefinition(new byte[] { 0x1 })).isExactMatch())
assertFalse(matcher.match(textResponseDefinition("f")).isExactMatch())
assertFalse(matcher.match(textResponseDefinition("fo")).isExactMatch())
assertTrue(matcher.match(textResponseDefinition("foo")).isExactMatch())
assertFalse(matcher.match(binaryResponseDefinition(new byte[] { 0x1 })).isExactMatch())
assertFalse(matcher.match(binaryResponseDefinition(new byte[] { 0x1, 0xc })).isExactMatch())
assertTrue(matcher.match(binaryResponseDefinition(new byte[] { 0x1, 0xc, 0xf })).isExactMatch())
assertEquals(responseDefinition().withStatus(401).build(), aTransformer().apply(response))
assertEquals(expected, aTransformer().apply(response))
assertEquals(expected, aTransformer().apply(response))
assertEquals(expected, aTransformer().apply(response))
assertEquals(expected, aTransformer().apply(response))
assertTrue(filters.apply(serveEvent))
assertTrue(filters.apply(serveEvent))
assertFalse(filters.apply(serveEvent))
assertTrue(filters.apply(proxiedServeEvent(request)))
assertTrue(filters.apply(proxiedServeEvent(request.url("/bar"))))
assertFalse(filters.apply(proxiedServeEvent(request.method(POST))))
assertTrue(filters.apply(proxiedServeEvent(ids.get(0))))
assertTrue(filters.apply(proxiedServeEvent(ids.get(1))))
assertFalse(filters.apply(proxiedServeEvent(UUID.fromString("00000000-0000-0000-0000-000000000002"))))
assertTrue(filters.apply(proxiedServeEvent(request)))
assertFalse(filters.apply(proxiedServeEvent(request.url("/bar"))))
assertFalse(filters.apply(proxiedServeEvent(request.method(POST))))
assertTrue(filters.apply(proxiedServeEvent(ids.get(0), request)))
assertFalse(filters.apply(proxiedServeEvent(UUID.fromString("00000000-0000-0000-0000-000000000002"), request)))
assertFalse(filters.apply(proxiedServeEvent(ids.get(0), request.method(POST))))
assertNotNull(output)
assertTrue(output.length() > 0)
assertNull(output)
assertEquals("[ERROR: Access to TEST_VAR is denied]", value)
assertEquals("[ERROR: The key cannot be empty]", value)
assertEquals("aaa", System.getProperty("test.key"))
assertEquals("aaa", value)
assertEquals("[ERROR: Access to test.key is denied]", value)
assertNull(output)
assertTrue(authoriser.isPermitted("allowed_key_1"))
assertTrue(authoriser.isPermitted("ALLOWED_KEY_2"))
assertTrue(authoriser.isPermitted("permitted_key_3"))
assertFalse(authoriser.isPermitted("forbidden_key_1"))
assertFalse(authoriser.isPermitted("notallowed_key_2"))
assertFalse(authoriser.isPermitted("notpermitted_key_3"))
assertTrue(authoriser.isPermitted("wiremock_key_1"))
assertTrue(authoriser.isPermitted("wiremock.thing.2"))
assertFalse(authoriser.isPermitted("notallowed_key_2"))
assertNotNull(pojo)
assertNotNull(pojo)
assertNotNull(pojo)
assertTrue(response.equals(copiedResponse))
assertTrue(responseDefinition.specifiesBodyFile())
assertFalse(responseDefinition.specifiesBodyContent())
assertFalse(responseDefinition.specifiesBodyFile())
assertTrue(responseDefinition.specifiesBodyContent())
assertNull(response.content())
assertEquals(200, certResponse.statusCode())
assertEquals("application/x-pem-file", certResponse.firstHeader("Content-Type"))
assertEquals(keyStore.getCertificateAuthority().certificateChain()[0], cert)
assertNotNull(wmRuntimeInfo)
assertNotNull(wmRuntimeInfo.getWireMock())
assertDoesNotThrow(wm1RuntimeInfo::getHttpsPort)
assertDoesNotThrow(() -> extension.afterEach(extensionContext))
assertDoesNotThrow(wm1RuntimeInfo::getHttpsPort)
assertDoesNotThrow(info::getHttpBaseUrl)
assertEquals("Domain 1", responseBody)
assertEquals("Domain 2", responseBody)
assertEquals("Domain 1", responseBody)
assertEquals("Domain 2", responseBody)
assertTrue(false)
assertTrue(true)
assertEquals("body", retrievedBody)
