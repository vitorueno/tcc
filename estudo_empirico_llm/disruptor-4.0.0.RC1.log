assertNotNull(eventHandlerGroup)
assertSame(testException, actualException)
assertSame(testException, actualException)
assertSame(testException, actualException)
assertSame(testException, actualException)
assertEquals(0, sequencer.next())
assertEquals(3, sequencer.next(4))
assertTrue(sequencer.hasAvailableCapacity(1))
assertTrue(sequencer.hasAvailableCapacity(BUFFER_SIZE))
assertFalse(sequencer.hasAvailableCapacity(BUFFER_SIZE + 1))
assertTrue(sequencer.hasAvailableCapacity(BUFFER_SIZE - 1))
assertFalse(sequencer.hasAvailableCapacity(BUFFER_SIZE))
assertFalse(sequencer.hasAvailableCapacity(1))
assertFalse(sequencer.isAvailable(seq))
assertTrue(sequencer.isAvailable(seq))
assertTrue(sequencer.isAvailable(seq))
assertFalse(sequencer.isAvailable(seq))
assertTrue(eventLatch.await(2, TimeUnit.SECONDS))
assertTrue(exceptionLatch.await(2, TimeUnit.SECONDS))
assertEquals(Arrays.asList(3L, 2L, 1L), batchSizes)
assertTrue(h1.awaitStart(2, TimeUnit.SECONDS))
assertTrue(h1.awaitStop(2, TimeUnit.SECONDS))
assertTrue(timeWaiting >= theTimeout)
assertEquals(10, sequence.addAndGet(10))
assertEquals(10, sequence.get())
assertEquals(1, sequence.incrementAndGet())
assertEquals(1, sequence.get())
assertEquals(0, sequence.getAndAdd(1))
assertEquals(1, sequence.get())
assertEquals(-1L, batchEventProcessor.getSequence().get())
assertEquals(0L, batchEventProcessor.getSequence().get())
assertEquals(0L, batchEventProcessor.getSequence().get())
assertEquals(TEST_VALUE, event.getTestString())
assertEquals(SingleProducerSequencer.INITIAL_CURSOR_VALUE, ringBuffer.getCursor())
assertEquals(0, sequence)
assertEquals(expectedEvent, event)
assertEquals(0L, ringBuffer.getCursor())
assertEquals(expectedEvent, messages.get().get(0))
assertEquals(expectedSequence, available)
assertEquals(expectedSequence, available)
assertFalse(ringBuffer.tryPublishEvent(StubEvent.TRANSLATOR, 3, "3"))
assertFalse(publisherComplete.get())
assertTrue(publisherComplete.get())
assertTrue(ringBuffer.tryPublishEvents(translators))
assertTrue(ringBuffer.tryPublishEvents(translators, 0, 1))
assertTrue(ringBuffer.tryPublishEvents(translators, 1, 2))
assertTrue(ringBuffer.tryPublishEvents(translator, new String[] { "Foo", "Foo" }))
assertTrue(ringBuffer.tryPublishEvents(translator, 0, 1, new String[] { "Foo", "Foo" }))
assertTrue(ringBuffer.tryPublishEvents(translator, 1, 2, new String[] { "Foo", "Foo", "Foo" }))
assertTrue(ringBuffer.tryPublishEvents(translator, 1, 2, new String[] { "Foo3", "Foo4", "Foo5" }, new String[] { "Bar3", "Bar4", "Bar5" }, new String[] { "Baz3", "Baz4", "Baz5" }))
assertTrue(ringBuffer.tryPublishEvents(translator, new String[] { "Foo", "Bar", "Baz", "Bam" }, new String[] { "Foo", "Bar", "Baz", "Bam" }))
assertTrue(ringBuffer.tryPublishEvents(translator, 0, 1, new String[] { "Foo", "Bar", "Baz", "Bam" }, new String[] { "Foo", "Bar", "Baz", "Bam" }))
assertTrue(ringBuffer.tryPublishEvents(translator, 1, 2, new String[] { "Foo3", "Bar3", "Baz3", "Bam3" }, new String[] { "Foo4", "Bar4", "Baz4", "Bam4" }, new String[] { "Foo5", "Bar5", "Baz5", "Bam5" }))
assertTrue(ringBuffer.removeGatingSequence(sequenceThree))
assertEquals(Long.MAX_VALUE, sequenceGroup.get())
assertEquals(sequence.get(), sequenceGroup.get())
assertEquals(sequenceThree.get(), sequenceGroup.get())
assertEquals(3, sequenceGroup.size())
assertEquals(sequenceThree.get(), sequenceGroup.get())
assertTrue(sequenceGroup.remove(sequenceThree))
assertEquals(sequenceSeven.get(), sequenceGroup.get())
assertEquals(1, sequenceGroup.size())
assertEquals(sequenceThree.get(), sequenceGroup.get())
assertTrue(sequenceGroup.remove(sequenceThree))
assertEquals(sequenceSeven.get(), sequenceGroup.get())
assertEquals(1, sequenceGroup.size())
assertEquals(expectedSequence, sequenceThree.get())
assertEquals(expectedSequence, sequenceSeven.get())
assertTrue(completedWorkSequence >= expectedWorkSequence)
assertTrue(completedWorkSequence >= expectedWorkSequence)
assertTrue(completedWorkSequence >= expectedWorkSequence)
assertFalse(sequenceBarrier.isAlerted())
assertTrue(sequenceBarrier.isAlerted())
assertFalse(sequenceBarrier.isAlerted())
assertTrue(timeWaiting >= theTimeout)
assertEquals("not rewindable", exceptionHandled.get().getMessage())
assertEquals(3, rewindPauseStrategy.count)
assertEquals(0, rewindPauseStrategy.count)
assertEquals(1024, powerOfTwo)
assertEquals(1024, powerOfTwo)
assertEquals(3L, Util.getMinimumSequence(sequences))
assertEquals(Long.MAX_VALUE, Util.getMinimumSequence(sequences))
assertEquals(causeException, ex.getCause())
