assertNull(p1.getUnderlyingDataset())
assertEquals(p1.getItemCount(), 0)
assertTrue(p1.getKeys().isEmpty())
assertNull(p1.getValue("R1"))
assertEquals(d1.getValue("C1"), 1.1)
assertEquals(d1.getValue("C2"), 2.2)
assertEquals(d1.getKey(0), "C1")
assertEquals(d1.getKey(1), "C2")
assertEquals(0, d1.getIndex("C1"))
assertEquals(1, d1.getIndex("C2"))
assertEquals(-1, d1.getIndex("XX"))
assertTrue(pass)
assertTrue(d1.equals(d2))
assertEquals(d1, d2)
assertEquals(d1.getUnderlyingDataset(), d2.getUnderlyingDataset())
assertEquals(d1.getExtractType(), d2.getExtractType())
assertEquals(d1.getExtractIndex(), d2.getExtractIndex())
assertEquals(1.0, d.getValue("R1", "C1"))
assertTrue(pass)
assertTrue(pass)
assertTrue(pass)
assertEquals(3.0, d.getValue("R1", "C1"))
assertEquals(2.0, d.getValue("R2", "C1"))
assertTrue(pass)
assertTrue(pass)
assertTrue(d.getRowCount() == 0)
assertTrue(d.getRowCount() == 1)
assertTrue(d.getRowCount() == 2)
assertTrue(d.getRowCount() == 2)
assertTrue(d.getRowCount() == 2)
assertTrue(d.getColumnCount() == 0)
assertTrue(d.getColumnCount() == 1)
assertTrue(d.getColumnCount() == 2)
assertTrue(d.getColumnCount() == 2)
assertTrue(d.getColumnCount() == 2)
assertTrue(d1.equals(d2))
assertTrue(d2.equals(d1))
assertFalse(d1.equals(d2))
assertTrue(d1.equals(d2))
assertFalse(d1.equals(d2))
assertTrue(d1.equals(d2))
assertEquals(d1, d2)
assertNull(d1.getValue("R1", "C1"))
assertEquals(1.0, d1.getValue("R2", "C1"))
assertTrue(pass)
assertEquals(0, d.getRowCount())
assertEquals(0, d.getColumnCount())
assertEquals(2.0, d.getValue(0, 0))
assertTrue(pass)
assertTrue(pass)
assertTrue(d1 != d2)
assertTrue(d1.getClass() == d2.getClass())
assertTrue(d1.equals(d2))
assertTrue(d1 != d2)
assertTrue(d1.getClass() == d2.getClass())
assertTrue(d1.equals(d2))
assertFalse(d1.equals(d2))
assertTrue(d1.equals(d2))
assertTrue(d instanceof PublicCloneable)
assertEquals(2, d.getColumnCount())
assertEquals(1, d.getColumnCount())
assertTrue(pass)
assertTrue(pass)
assertEquals(2, d.getRowCount())
assertEquals(1, d.getRowCount())
assertTrue(pass)
assertTrue(pass)
assertEquals(0.1, d.getStartValue("Series 1", "Category 1"))
assertEquals(0.2, d.getStartValue("Series 1", "Category 2"))
assertEquals(0.3, d.getStartValue("Series 1", "Category 3"))
assertEquals(0.3, d.getStartValue("Series 2", "Category 1"))
assertEquals(0.4, d.getStartValue("Series 2", "Category 2"))
assertEquals(0.5, d.getStartValue("Series 2", "Category 3"))
assertEquals(0.5, d.getEndValue("Series 1", "Category 1"))
assertEquals(0.6, d.getEndValue("Series 1", "Category 2"))
assertEquals(0.7, d.getEndValue("Series 1", "Category 3"))
assertEquals(0.7, d.getEndValue("Series 2", "Category 1"))
assertEquals(0.8, d.getEndValue("Series 2", "Category 2"))
assertEquals(0.9, d.getEndValue("Series 2", "Category 3"))
assertTrue(pass)
assertTrue(pass)
assertEquals(2, d.getRowCount())
assertEquals(3, d.getColumnCount())
assertTrue(dA.equals(dB))
assertTrue(dB.equals(dA))
assertTrue(empty1.equals(empty2))
assertEquals(d1, d2)
assertTrue(d1 != d2)
assertTrue(d1.getClass() == d2.getClass())
assertTrue(d1.equals(d2))
assertFalse(d1.equals(d2))
assertTrue(d1.equals(d2))
assertTrue(d1 != d2)
assertTrue(d1.getClass() == d2.getClass())
assertTrue(d1.equals(d2))
assertEquals(99.9, d1.getStartValue("Series 1", "Category 2"))
assertTrue(pass)
assertTrue(pass)
assertEquals(99.9, d1.getEndValue("Series 1", "Category 2"))
assertTrue(pass)
assertTrue(pass)
assertEquals(0, empty.getSeriesCount())
assertEquals(0, empty.getCategoryCount())
assertEquals(-1, empty.getSeriesIndex("ABC"))
assertEquals(-1, empty.getRowIndex("ABC"))
assertTrue(pass)
assertEquals(-1, empty.getCategoryIndex("ABC"))
assertEquals(-1, empty.getColumnIndex("ABC"))
assertTrue(pass)
assertEquals(0, keys.size())
assertEquals(0, keys.size())
assertEquals(0, empty.getColumnCount())
assertEquals(0, empty.getColumnCount())
assertTrue(d1.equals(d2))
assertFalse(d1.equals(d2))
assertTrue(d1.equals(d2))
assertFalse(d1.equals(d2))
assertTrue(d1.equals(d2))
assertFalse(d1.equals(d2))
assertTrue(d1.equals(d2))
assertTrue(d1 != d2)
assertTrue(d1.getClass() == d2.getClass())
assertTrue(d1.equals(d2))
assertFalse(d1.equals(d2))
assertTrue(d1.equals(d2))
assertEquals(d1, d2)
assertFalse(d1.equals(d2))
assertTrue(d1.equals(d2))
assertEquals(0, dataset.getColumnCount())
assertEquals(0, dataset.getColumnCount())
assertEquals(0, dataset.getColumnCount())
assertEquals(2, dataset.getColumnCount())
assertEquals(2, dataset.getColumnCount())
assertEquals(1, dataset.getColumnCount())
assertEquals(0, dataset.getColumnCount())
assertEquals(0, dataset.getRowCount())
assertEquals(1, dataset.getRowCount())
assertEquals(0, dataset.getRowCount())
assertEquals(-1, dataset.getColumnIndex("C1"))
assertEquals(0, dataset.getColumnIndex("C2"))
assertEquals(1, dataset.getColumnIndex("C3"))
assertEquals(-1, dataset.getColumnIndex("C4"))
assertEquals(0, dataset.getRowIndex("R1"))
assertEquals(1, dataset.getRowIndex("R2"))
assertEquals(2, dataset.getRowIndex("R3"))
assertEquals(3, dataset.getRowIndex("R4"))
assertEquals(2.0, dataset.getValue("R1", "C2"))
assertEquals(3.0, dataset.getValue("R1", "C3"))
assertTrue(pass)
assertTrue(pass)
assertTrue(keys.contains("C2"))
assertTrue(keys.contains("C3"))
assertEquals(2, keys.size())
assertTrue(keys.contains("C4"))
assertEquals(1, keys.size())
assertTrue(ko1 != ko2)
assertTrue(ko1.getClass() == ko2.getClass())
assertTrue(ko1.equals(ko2))
assertTrue(ko1 != ko2)
assertTrue(ko1.getClass() == ko2.getClass())
assertTrue(ko1.equals(ko2))
assertTrue(ko2.getObject("K1") == obj1)
assertTrue(ko1 != ko2)
assertTrue(ko1.getClass() == ko2.getClass())
assertTrue(ko1.equals(ko2))
assertTrue(ko2.getObject("K1") != obj1)
assertEquals(data.getKey(0), "A")
assertEquals(data.getKey(1), "B")
assertEquals(data.getKey(2), "C")
assertEquals(data.getKey(3), "D")
assertEquals(data.getObject("A"), 1.0)
assertEquals(data.getObject("B"), 2.0)
assertEquals(data.getObject("C"), 3.0)
assertEquals(data.getObject("D"), null)
assertTrue(pass)
assertEquals(data.getObject(0), 1.0)
assertEquals(data.getObject(1), 2.0)
assertEquals(data.getObject(2), 3.0)
assertEquals(data.getObject(3), null)
assertEquals(ko1, ko2)
assertEquals("Object 1", ko1.getObject(0))
assertNull(ko1.getObject(1))
assertEquals("Object 2", ko1.getObject(2))
assertTrue(pass)
assertTrue(pass)
assertEquals("Key 1", ko1.getKey(0))
assertEquals("Key 2", ko1.getKey(1))
assertEquals("Key 3", ko1.getKey(2))
assertTrue(pass)
assertTrue(pass)
assertEquals(0, ko1.getIndex("Key 1"))
assertEquals(1, ko1.getIndex("Key 2"))
assertEquals(2, ko1.getIndex("Key 3"))
assertTrue(pass)
assertEquals("Object 1", ko1.getObject("Key 1"))
assertEquals(null, ko1.getObject("Key 2"))
assertEquals("Object 2", ko1.getObject("Key 3"))
assertEquals("AAA", ko1.getObject("Key 2"))
assertEquals("BBB", ko1.getObject("Key 3"))
assertTrue(pass)
assertEquals(2, ko1.getItemCount())
assertEquals(1, ko1.getIndex("Key 3"))
assertEquals(1, ko1.getItemCount())
assertEquals(0, ko1.getIndex("Key 3"))
assertTrue(pass)
assertTrue(pass)
assertEquals(2, ko1.getItemCount())
assertEquals(1, ko1.getIndex("Key 3"))
assertTrue(pass)
assertTrue(pass)
assertEquals(RangeType.FULL, RangeType.FULL)
assertEquals(RangeType.NEGATIVE, RangeType.NEGATIVE)
assertEquals(RangeType.POSITIVE, RangeType.POSITIVE)
assertFalse(RangeType.FULL.equals(RangeType.NEGATIVE))
assertFalse(RangeType.FULL.equals(RangeType.POSITIVE))
assertFalse(RangeType.FULL.equals(null))
assertFalse(RangeType.NEGATIVE.equals(RangeType.FULL))
assertFalse(RangeType.NEGATIVE.equals(RangeType.POSITIVE))
assertFalse(RangeType.NEGATIVE.equals(null))
assertFalse(RangeType.POSITIVE.equals(RangeType.NEGATIVE))
assertFalse(RangeType.POSITIVE.equals(RangeType.FULL))
assertFalse(RangeType.POSITIVE.equals(null))
assertTrue(r1.equals(r2))
assertEquals(h1, h2)
assertSame(r1, r2)
assertEquals(2, n.length)
assertEquals(4, n[0].length)
assertEquals(5, n[1].length)
assertTrue(DataUtils.equal(null, null))
assertTrue(DataUtils.equal(a, b))
assertFalse(DataUtils.equal(a, b))
assertTrue(DataUtils.equal(a, b))
assertFalse(DataUtils.equal(a, b))
assertTrue(DataUtils.equal(a, b))
assertFalse(DataUtils.equal(a, b))
assertTrue(DataUtils.equal(a, b))
assertFalse(DataUtils.equal(a, b))
assertTrue(DataUtils.equal(a, b))
assertFalse(DataUtils.equal(a, b))
assertTrue(DataUtils.equal(a, b))
assertFalse(DataUtils.equal(a, b))
assertTrue(DataUtils.equal(a, b))
assertFalse(DataUtils.equal(a, b))
assertFalse(DataUtils.equal(a, b))
assertTrue(DataUtils.equal(a, b))
assertTrue(DataUtils.equal(a, b))
assertFalse(DataUtils.equal(a, b))
assertTrue(DataUtils.equal(a, b))
assertTrue(DataUtils.equal(a, b))
assertFalse(DataUtils.equal(a, b))
assertTrue(DataUtils.equal(a, b))
assertTrue(d1.equals(d2))
assertTrue(d2.equals(d1))
assertFalse(d1.equals(d2))
assertTrue(d1.equals(d2))
assertTrue(d1 != d2)
assertTrue(d1.getClass() == d2.getClass())
assertTrue(d1.equals(d2))
assertTrue(d1 != d2)
assertTrue(d1.getClass() == d2.getClass())
assertTrue(d1.equals(d2))
assertTrue(d1 instanceof PublicCloneable)
assertEquals(d1, d2)
assertEquals(d1, d2)
assertEquals("Series 1", d.getSeriesKey(0))
assertEquals("Series 2", d.getSeriesKey(1))
assertTrue(pass)
assertTrue(pass)
assertEquals(0, d.indexOf("Series 1"))
assertEquals(1, d.indexOf("Series 2"))
assertEquals(-1, d.indexOf("Green Eggs and Ham"))
assertEquals(-1, d.indexOf(null))
assertEquals(i1, i2)
assertFalse(i1.equals(i2))
assertTrue(i1.equals(i2))
assertFalse(i1.equals(i2))
assertTrue(i1.equals(i2))
assertFalse(i1.equals(i2))
assertTrue(i1.equals(i2))
assertFalse(i1 instanceof Cloneable)
assertEquals(i1, i2)
assertEquals(1.0, item1.getX())
assertTrue(item1.equals(item2))
assertTrue(item2.equals(item1))
assertFalse(item1.equals(item2))
assertTrue(item1.equals(item2))
assertFalse(item1.equals(item2))
assertTrue(item1.equals(item2))
assertFalse(item1.equals(item2))
assertTrue(item1.equals(item2))
assertFalse(item1.equals(item2))
assertTrue(item1.equals(item2))
assertTrue(item1 != item2)
assertTrue(item1.getClass() == item2.getClass())
assertTrue(item1.equals(item2))
assertEquals(item1, item2)
assertTrue(v1.equals(v2))
assertTrue(v2.equals(v1))
assertFalse(v1.equals(v2))
assertTrue(v1.equals(v2))
assertFalse(v1.equals(v2))
assertTrue(v1.equals(v2))
assertFalse(v1.equals(v2))
assertTrue(v1.equals(v2))
assertFalse(v1.equals(v2))
assertTrue(v1.equals(v2))
assertTrue(v1.equals(v2))
assertEquals(h1, h2)
assertTrue(v1 != v2)
assertTrue(v1.getClass() == v2.getClass())
assertTrue(v1.equals(v2))
assertEquals(v1, v2)
assertTrue(s1.equals(s2))
assertTrue(s2.equals(s1))
assertFalse(s1.equals(s2))
assertTrue(s1.equals(s2))
assertFalse(s1.equals(s2))
assertTrue(s1.equals(s2))
assertEquals(s1, s2)
assertEquals(s1.hashCode(), s2.hashCode())
assertEquals(s1, s2)
assertEquals(s1.hashCode(), s2.hashCode())
assertEquals(s1, s2)
assertEquals(s1.hashCode(), s2.hashCode())
assertEquals(s1, s2)
assertEquals(s1.hashCode(), s2.hashCode())
assertEquals(s1, s2)
assertEquals(s1.hashCode(), s2.hashCode())
assertTrue(s1 != s2)
assertTrue(s1.getClass() == s2.getClass())
assertTrue(s1.equals(s2))
assertTrue(s1.equals(s2))
assertFalse(s1.equals(s2))
assertTrue(s1.equals(s2))
assertTrue(s1.equals(s2))
assertFalse(s1.equals(s2))
assertTrue(s1.equals(s2))
assertEquals(s1, s2)
assertEquals(0, s1.indexOf(1.0))
assertEquals(1, s1.indexOf(2.0))
assertEquals(2, s1.indexOf(3.0))
assertEquals(-4, s1.indexOf(99.9))
assertEquals(0, s1.indexOf(1.0))
assertEquals(1, s1.indexOf(3.0))
assertEquals(2, s1.indexOf(2.0))
assertEquals(0, s1.indexOf(1.0))
assertEquals(1, s1.indexOf(2.0))
assertEquals(3, s1.getItemCount())
assertEquals(3.0, s1.getX(1))
assertEquals(3.0, s1.getX(0))
assertEquals(6, s1.getItemCount())
assertEquals(5, s1.getItemCount())
assertEquals(2, series.getY(0))
assertEquals(3, series.getY(0))
assertEquals(99.0, series.getY(1))
assertTrue(old == null)
assertEquals(1, series.getItemCount())
assertEquals(2L, series.getY(0))
assertTrue(old == null)
assertEquals(2, series.getItemCount())
assertEquals(3L, series.getY(1))
assertEquals(new XYDataItem(Long.valueOf(1), Long.valueOf(2)), old)
assertEquals(2, series.getItemCount())
assertEquals(99L, series.getY(0))
assertEquals(3L, series.getY(1))
assertEquals(1.0, series.getY(0))
assertEquals(2.0, series.getY(1))
assertEquals(3.0, series.getY(2))
assertEquals(3, series.getItemCount())
assertEquals(Integer.MAX_VALUE, s1.getMaximumItemCount())
assertEquals(2, s1.getMaximumItemCount())
assertEquals(2, array.length)
assertEquals(0, array[0].length)
assertEquals(0, array[1].length)
assertEquals(1, array[0].length)
assertEquals(1, array[1].length)
assertEquals(2, array.length)
assertEquals(2, array.length)
assertEquals(2, array[0].length)
assertEquals(2, array[1].length)
assertTrue(Double.isNaN(array[1][1]))
assertEquals(1, dataset.getSeriesCount())
assertEquals(4, dataset.getItemCount(0))
assertEquals("S", dataset.getSeriesKey(0))
assertTrue(Double.isNaN(dataset.getYValue(0, 3)))
assertEquals(1.0, series.getY(0))
assertEquals(2.0, series.getY(1))
assertEquals(2, series.getItemCount())
assertEquals(2, s1.getItemCount())
assertTrue(Double.isNaN(s1.getMinX()))
assertTrue(Double.isNaN(s1.getMaxX()))
assertTrue(Double.isNaN(s1.getMinY()))
assertTrue(Double.isNaN(s1.getMaxY()))
assertEquals(3, s1.getItemCount())
assertEquals(0, s1.getItemCount())
assertTrue(Double.isNaN(s1.getMinX()))
assertTrue(Double.isNaN(s1.getMaxX()))
assertTrue(Double.isNaN(s1.getMinY()))
assertTrue(Double.isNaN(s1.getMaxY()))
assertTrue(Double.isNaN(s1.getMinY()))
assertTrue(Double.isNaN(s1.getMaxY()))
assertTrue(Double.isNaN(s1.getMinY()))
assertTrue(Double.isNaN(s1.getMaxY()))
assertTrue(Double.isNaN(s1.getMinY()))
assertTrue(Double.isNaN(s1.getMaxY()))
assertEquals("S1", s1.getKey())
assertEquals("OK", s1.getKey())
assertEquals(c1, c2)
assertFalse(c1.equals(c2))
assertTrue(c1.equals(c2))
assertFalse(c1.equals(c2))
assertTrue(c1.equals(c2))
assertTrue(c1 != c2)
assertTrue(c1.getClass() == c2.getClass())
assertTrue(c1.equals(c2))
assertFalse(c1.equals(c2))
assertTrue(c1 instanceof PublicCloneable)
assertEquals(c1, c2)
assertEquals(0, c.getSeriesCount())
assertTrue(pass)
assertTrue(pass)
assertEquals(c1, c2)
assertFalse(c1.equals(c2))
assertTrue(c1.equals(c2))
assertFalse(c1.equals(c2))
assertTrue(c1.equals(c2))
assertTrue(c1 != c2)
assertTrue(c1.getClass() == c2.getClass())
assertTrue(c1.equals(c2))
assertFalse(c1.equals(c2))
assertTrue(c1.equals(c2))
assertTrue(c1 instanceof PublicCloneable)
assertEquals(c1, c2)
assertFalse(c1.equals(c2))
assertTrue(c1.equals(c2))
assertEquals(0, c.getSeriesCount())
assertTrue(pass)
assertTrue(pass)
assertEquals(c1, c2)
assertFalse(c1.equals(c2))
assertTrue(c1.equals(c2))
assertFalse(c1.equals(c2))
assertTrue(c1.equals(c2))
assertTrue(c1 != c2)
assertTrue(c1.getClass() == c2.getClass())
assertTrue(c1.equals(c2))
assertFalse(c1.equals(c2))
assertTrue(c1 instanceof PublicCloneable)
assertEquals(c1, c2)
assertEquals(0, c.getSeriesCount())
assertTrue(pass)
assertTrue(pass)
assertEquals(i1, i2)
assertFalse(i1.equals(i2))
assertTrue(i1.equals(i2))
assertFalse(i1.equals(i2))
assertTrue(i1.equals(i2))
assertFalse(i1.equals(i2))
assertTrue(i1.equals(i2))
assertFalse(i1.equals(i2))
assertTrue(i1.equals(i2))
assertFalse(i1.equals(i2))
assertTrue(i1.equals(i2))
assertFalse(i1 instanceof Cloneable)
assertEquals(i1, i2)
assertTrue(d1.equals(d2))
assertTrue(d2.equals(d1))
assertFalse(d1.equals(d2))
assertTrue(d1.equals(d2))
assertFalse(d1.equals(d2))
assertTrue(d1.equals(d2))
assertFalse(d1.equals(d2))
assertTrue(d1.equals(d2))
assertFalse(d1.equals(d2))
assertTrue(d1.equals(d2))
assertFalse(d1.equals(d2))
assertTrue(d1.equals(d2))
assertFalse(d1.equals(d2))
assertTrue(d1.equals(d2))
assertFalse(d1.equals(d2))
assertTrue(d1.equals(d2))
assertTrue(d1 != d2)
assertTrue(d1.getClass() == d2.getClass())
assertTrue(d1.equals(d2))
assertTrue(d1 instanceof PublicCloneable)
assertEquals(d1, d2)
assertTrue(d1.equals(d2))
assertTrue(d2.equals(d1))
assertFalse(d1.equals(d2))
assertTrue(d1.equals(d2))
assertFalse(d1.equals(d2))
assertTrue(d1.equals(d2))
assertFalse(d1.equals(d2))
assertTrue(d1.equals(d2))
assertTrue(d1 != d2)
assertTrue(d1.getClass() == d2.getClass())
assertTrue(d1.equals(d2))
assertEquals(d1, d2)
assertTrue(s1.equals(s2))
assertFalse(s1.equals(s2))
assertTrue(s1.equals(s2))
assertFalse(s1.equals(s2))
assertTrue(s1.equals(s2))
assertFalse(s1.equals(s2))
assertTrue(s1.equals(s2))
assertFalse(s1.equals(s2))
assertTrue(s2.equals(s1))
assertFalse(s1.equals(s2))
assertTrue(s2.equals(s1))
assertFalse(s1.equals(s2))
assertTrue(s2.equals(s1))
assertTrue(s1 != s2)
assertTrue(s1.getClass() == s2.getClass())
assertTrue(s1.equals(s2))
assertEquals(s1, s2)
assertEquals(0, s1.indexOf(new XYCoordinate(1.0, 1.0)))
assertEquals(0, s1.indexOf(new XYCoordinate(1.0, 1.0)))
assertEquals(1, s1.indexOf(new XYCoordinate(3.0, 3.0)))
assertEquals(2, s1.indexOf(new XYCoordinate(2.0, 2.0)))
assertEquals(3, s1.getItemCount())
assertEquals(Integer.MAX_VALUE, s1.getMaximumItemCount())
assertEquals(2, s1.getMaximumItemCount())
assertNull(this.lastEvent)
assertTrue(s1.isEmpty())
assertFalse(s1.isEmpty())
assertNotNull(this.lastEvent)
assertTrue(s1.isEmpty())
assertTrue(d1.equals(d2))
assertTrue(d2.equals(d1))
assertFalse(d1.equals(d2))
assertTrue(d1.equals(d2))
assertTrue(d1 != d2)
assertTrue(d1.getClass() == d2.getClass())
assertTrue(d1.equals(d2))
assertTrue(d1 != d2)
assertTrue(d1.getClass() == d2.getClass())
assertTrue(d1.equals(d2))
assertFalse(d1.equals(d2))
assertTrue(d1.equals(d2))
assertTrue(d1 instanceof PublicCloneable)
assertEquals(d1, d2)
assertEquals(d1, d2)
assertEquals("S1", d.getSeriesKey(0))
assertEquals("S2", d.getSeriesKey(1))
assertTrue(pass)
assertTrue(pass)
assertEquals(0, d.indexOf("S1"))
assertEquals(1, d.indexOf("S2"))
assertEquals(-1, d.indexOf("Green Eggs and Ham"))
assertEquals(-1, d.indexOf(null))
assertEquals(1, d.getSeriesCount())
assertEquals("S1", d.getSeriesKey(0))
assertEquals(1, d.getSeriesCount())
assertTrue(pass)
assertTrue(c1.equals(c2))
assertTrue(c2.equals(c1))
assertFalse(c1.equals(c2))
assertTrue(c1.equals(c2))
assertTrue(c1 != c2)
assertTrue(c1.getClass() == c2.getClass())
assertTrue(c1.equals(c2))
assertFalse(c1.equals(c2))
assertTrue(d1 instanceof PublicCloneable)
assertEquals(c1, c2)
assertEquals(2, vsc.getSeriesCount())
assertTrue(b)
assertEquals(1, vsc.getSeriesCount())
assertEquals("S2", vsc.getSeriesKey(0))
assertFalse(b)
assertEquals(1, vsc.getSeriesCount())
assertTrue(b)
assertEquals(0, vsc.getSeriesCount())
assertTrue(item1.equals(item2))
assertTrue(item2.equals(item1))
assertFalse(item1.equals(item2))
assertTrue(item1.equals(item2))
assertFalse(item1.equals(item2))
assertTrue(item1.equals(item2))
assertFalse(item1.equals(item2))
assertTrue(item1.equals(item2))
assertFalse(item1.equals(item2))
assertTrue(item1.equals(item2))
assertFalse(item1.equals(item2))
assertTrue(item1.equals(item2))
assertFalse(item1.equals(item2))
assertTrue(item1.equals(item2))
assertTrue(item1 != item2)
assertTrue(item1.getClass() == item2.getClass())
assertTrue(item1.equals(item2))
assertEquals(item1, item2)
assertEquals(i1, i2)
assertFalse(i1.equals(i2))
assertTrue(i1.equals(i2))
assertFalse(i1.equals(i2))
assertTrue(i1.equals(i2))
assertFalse(i1.equals(i2))
assertTrue(i1.equals(i2))
assertFalse(i1 instanceof Cloneable)
assertEquals(i1, i2)
assertTrue(c1.equals(c2))
assertTrue(c2.equals(c1))
assertFalse(c1.equals(c2))
assertTrue(c1.equals(c2))
assertTrue(c1 != c2)
assertTrue(c1.getClass() == c2.getClass())
assertTrue(c1.equals(c2))
assertFalse(c1.equals(c2))
assertTrue(c1 instanceof PublicCloneable)
assertEquals(c1, c2)
assertTrue(v1.equals(v2))
assertTrue(v2.equals(v1))
assertFalse(v1.equals(v2))
assertTrue(v1.equals(v2))
assertFalse(v1.equals(v2))
assertTrue(v1.equals(v2))
assertTrue(v1.equals(v2))
assertEquals(h1, h2)
assertFalse(v1 instanceof Cloneable)
assertEquals(v1, v2)
assertTrue(i1.equals(i2))
assertTrue(i2.equals(i1))
assertFalse(i1 instanceof Cloneable)
assertEquals(i1, i2)
assertTrue(d1.equals(d2))
assertTrue(d2.equals(d1))
assertFalse(d1.equals(d2))
assertTrue(d1.equals(d2))
assertTrue(d1 != d2)
assertTrue(d1.getClass() == d2.getClass())
assertTrue(d1.equals(d2))
assertTrue(d1 != d2)
assertTrue(d1.getClass() == d2.getClass())
assertTrue(d1.equals(d2))
assertFalse(d1.equals(d2))
assertTrue(d1.equals(d2))
assertTrue(d1 instanceof PublicCloneable)
assertEquals(d1, d2)
assertEquals(d1, d2)
assertEquals("S1", d.getSeriesKey(0))
assertEquals("S2", d.getSeriesKey(1))
assertTrue(pass)
assertTrue(pass)
assertEquals(0, d.indexOf("S1"))
assertEquals(1, d.indexOf("S2"))
assertEquals(-1, d.indexOf("Green Eggs and Ham"))
assertEquals(-1, d.indexOf(null))
assertEquals(1, d.getSeriesCount())
assertEquals("S1", d.getSeriesKey(0))
assertEquals(1, d.getSeriesCount())
assertTrue(pass)
assertTrue(d1.equals(d2))
assertTrue(d2.equals(d1))
assertFalse(d1.equals(d2))
assertTrue(d1.equals(d2))
assertTrue(d1 != d2)
assertTrue(d1.getClass() == d2.getClass())
assertTrue(d1.equals(d2))
assertTrue(d1 instanceof PublicCloneable)
assertEquals(d1, d2)
assertEquals(6, dataset.getItemCount())
assertEquals(6, dataset.getX(0, 5).intValue())
assertEquals(null, dataset.getY(0, 5))
assertEquals(6, dataset.getX(1, 5).intValue())
assertEquals(2, dataset.getY(1, 5).intValue())
assertEquals(7, dataset.getItemCount())
assertEquals(null, dataset.getY(0, 6))
assertEquals(2, dataset.getY(1, 6).intValue())
assertEquals(7, dataset.getItemCount())
assertEquals(4, dataset.getItemCount())
assertEquals(4, dataset.getItemCount())
assertEquals(0, dataset.getItemCount())
assertEquals(5, dataset.getItemCount())
assertEquals(1.0, dataset.getX(0, 0))
assertEquals(3.0, dataset.getX(0, 1))
assertEquals(4.0, dataset.getX(0, 2))
assertEquals(5.0, dataset.getX(0, 3))
assertEquals(6.0, dataset.getX(0, 4))
assertEquals(4, dataset.getItemCount())
assertEquals(2, dataset.getItemCount())
assertEquals(2, dataset.getItemCount())
assertEquals(1, dataset.getItemCount())
assertEquals(2, dataset2.getItemCount())
assertEquals(2, dataset2.getItemCount())
assertEquals(1, dataset2.getItemCount())
assertTrue(s1.equals(s2))
assertFalse(s1.equals(s2))
assertTrue(s1.equals(s2))
assertFalse(s1.equals(s2))
assertTrue(s1.equals(s2))
assertFalse(s1.equals(s2))
assertTrue(s1.equals(s2))
assertFalse(s1.equals(s2))
assertTrue(s2.equals(s1))
assertFalse(s1.equals(s2))
assertTrue(s2.equals(s1))
assertFalse(s1.equals(s2))
assertTrue(s2.equals(s1))
assertTrue(s1 != s2)
assertTrue(s1.getClass() == s2.getClass())
assertTrue(s1.equals(s2))
assertEquals(s1, s2)
assertEquals(0, s1.indexOf(1.0))
assertEquals(0, s1.indexOf(1.0))
assertEquals(1, s1.indexOf(3.0))
assertEquals(2, s1.indexOf(2.0))
assertEquals(3, s1.getItemCount())
assertEquals(3.0, s1.getX(1))
assertEquals(3.0, s1.getX(0))
assertEquals(Integer.MAX_VALUE, s1.getMaximumItemCount())
assertEquals(2, s1.getMaximumItemCount())
assertNull(this.lastEvent)
assertTrue(s1.isEmpty())
assertFalse(s1.isEmpty())
assertNotNull(this.lastEvent)
assertTrue(s1.isEmpty())
assertTrue(d1.equals(d2))
assertTrue(d2.equals(d1))
assertFalse(d1.equals(d2))
assertTrue(d1.equals(d2))
assertTrue(d1 != d2)
assertTrue(d1.getClass() == d2.getClass())
assertTrue(d1.equals(d2))
assertFalse(d1.equals(d2))
assertTrue(d1 instanceof PublicCloneable)
assertEquals(d1, d2)
assertEquals("Series 1", d1.getSeries(0).getKey())
assertTrue(pass)
assertTrue(pass)
assertTrue(s1.equals(s2))
assertFalse(s1.equals(s2))
assertTrue(s1.equals(s2))
assertFalse(s1.equals(s2))
assertTrue(s1.equals(s2))
assertFalse(s1.equals(s2))
assertTrue(s1.equals(s2))
assertFalse(s1.equals(s2))
assertTrue(s2.equals(s1))
assertFalse(s1.equals(s2))
assertTrue(s2.equals(s1))
assertFalse(s1.equals(s2))
assertTrue(s2.equals(s1))
assertTrue(s1 != s2)
assertTrue(s1.getClass() == s2.getClass())
assertTrue(s1.equals(s2))
assertEquals(s1, s2)
assertEquals(0, s1.indexOf(1.0))
assertEquals(0, s1.indexOf(1.0))
assertEquals(1, s1.indexOf(3.0))
assertEquals(2, s1.indexOf(2.0))
assertEquals(3, s1.getItemCount())
assertEquals(3.0, s1.getX(1))
assertEquals(3.0, s1.getX(0))
assertEquals(Integer.MAX_VALUE, s1.getMaximumItemCount())
assertEquals(2, s1.getMaximumItemCount())
assertNull(this.lastEvent)
assertTrue(s1.isEmpty())
assertFalse(s1.isEmpty())
assertNotNull(this.lastEvent)
assertTrue(s1.isEmpty())
assertTrue(i1.equals(i2))
assertTrue(i2.equals(i1))
assertFalse(i1.equals(i2))
assertTrue(i1.equals(i2))
assertTrue(i1 != i2)
assertTrue(i1.getClass() == i2.getClass())
assertTrue(i1.equals(i2))
assertEquals(i1, i2)
assertTrue(d1.equals(d2))
assertTrue(d2.equals(d1))
assertFalse(d1.equals(d2))
assertTrue(d1.equals(d2))
assertTrue(d1 != d2)
assertTrue(d1.getClass() == d2.getClass())
assertTrue(d1.equals(d2))
assertFalse(d1.equals(d2))
assertTrue(d1.equals(d2))
assertFalse(d1.equals(d2))
assertTrue(d1.equals(d2))
assertTrue(d1 != d2)
assertTrue(d1.getClass() == d2.getClass())
assertTrue(d1.equals(d2))
assertFalse(d1.equals(d2))
assertTrue(d1.equals(d2))
assertFalse(d1.equals(d2))
assertTrue(d1.equals(d2))
assertTrue(d1 instanceof PublicCloneable)
assertEquals(d1, d2)
assertEquals(0, xysc.getSeriesCount())
assertEquals(c1, c2)
assertEquals(c2, c1)
assertFalse(c1.equals(c2))
assertEquals(c1, c2)
assertFalse(c1.equals(c2))
assertEquals(c1, c2)
assertFalse(c1.equals(c2))
assertEquals(c1, c2)
assertFalse(c1.equals(c2))
assertEquals(c1, c2)
assertNotSame(c1, c2)
assertSame(c1.getClass(), c2.getClass())
assertEquals(c1, c2)
assertFalse(c1.equals(c2))
assertTrue(c1 instanceof PublicCloneable)
assertEquals(c1, c2)
assertEquals("s1", c.getSeries(0).getKey())
assertEquals("s1", c.getSeries("s1").getKey())
assertEquals(1, c.getSeriesCount())
assertEquals(0, c.getSeriesCount())
assertEquals(-1, dataset.indexOf(s1))
assertEquals(-1, dataset.indexOf(s2))
assertEquals(0, dataset.indexOf(s1))
assertEquals(-1, dataset.indexOf(s2))
assertEquals(0, dataset.indexOf(s1))
assertEquals(1, dataset.indexOf(s2))
assertEquals(-1, dataset.indexOf(s1))
assertEquals(0, dataset.indexOf(s2))
assertEquals(0, dataset.indexOf(s2b))
assertNull(r)
assertNull(r)
assertNull(r)
assertNull(r)
assertEquals(new Range(1.0, 1.0), r)
assertEquals(new Range(0.5, 1.5), r)
assertEquals(new Range(-1.0, 1.0), r)
assertEquals(new Range(-1.5, 1.5), r)
assertNull(dataset.getRangeBounds(false))
assertNull(dataset.getRangeBounds(true))
assertNull(dataset.getRangeBounds(false))
assertNull(dataset.getRangeBounds(true))
assertEquals(new Range(1.1, 1.1), dataset.getRangeBounds(false))
assertEquals(new Range(1.1, 1.1), dataset.getRangeBounds(true))
assertEquals(new Range(-1.1, 1.1), dataset.getRangeBounds(false))
assertEquals(new Range(-1.1, 1.1), dataset.getRangeBounds(true))
assertEquals(new Range(-1.1, 1.1), dataset.getRangeBounds(false))
assertEquals(new Range(-1.1, 1.1), dataset.getRangeBounds(true))
assertEquals(new Range(-1.1, 1.1), dataset.getRangeBounds(false))
assertEquals(new Range(-1.1, 1.1), dataset.getRangeBounds(true))
assertEquals(new Range(-1.1, 5.0), dataset.getRangeBounds(false))
assertEquals(new Range(-1.1, 5.0), dataset.getRangeBounds(true))
assertTrue(Double.isNaN(dataset.getRangeLowerBound(false)))
assertTrue(Double.isNaN(dataset.getRangeLowerBound(true)))
assertTrue(Double.isNaN(dataset.getRangeLowerBound(false)))
assertTrue(Double.isNaN(dataset.getRangeLowerBound(true)))
assertTrue(Double.isNaN(dataset.getRangeUpperBound(false)))
assertTrue(Double.isNaN(dataset.getRangeUpperBound(true)))
assertTrue(Double.isNaN(dataset.getRangeUpperBound(false)))
assertTrue(Double.isNaN(dataset.getRangeUpperBound(true)))
assertEquals("C", collection.getSeries(0).getKey())
assertEquals("B", series2.getKey())
assertTrue(bd1.equals(bd2))
assertTrue(bd2.equals(bd1))
assertTrue(bd1 != bd2)
assertTrue(bd1.getClass() == bd2.getClass())
assertTrue(bd1.equals(bd2))
assertFalse(bd1.equals(bd2))
assertTrue(bd1.equals(bd2))
assertTrue(bd1 instanceof PublicCloneable)
assertEquals(bd1, bd2)
assertTrue(v1.equals(v2))
assertTrue(v2.equals(v1))
assertFalse(v1.equals(v2))
assertTrue(v1.equals(v2))
assertFalse(v1.equals(v2))
assertTrue(v1.equals(v2))
assertTrue(v1.equals(v2))
assertEquals(h1, h2)
assertFalse(v1 instanceof Cloneable)
assertEquals(v1, v2)
assertEquals(1.0, item1.getX())
assertTrue(item1.equals(item2))
assertTrue(item2.equals(item1))
assertFalse(item1.equals(item2))
assertTrue(item1.equals(item2))
assertFalse(item1.equals(item2))
assertTrue(item1.equals(item2))
assertFalse(item1.equals(item2))
assertTrue(item1.equals(item2))
assertFalse(item1.equals(item2))
assertTrue(item1.equals(item2))
assertTrue(item1 != item2)
assertTrue(item1.getClass() == item2.getClass())
assertTrue(item1.equals(item2))
assertEquals(item1, item2)
assertTrue(d1.equals(d2))
assertTrue(d2.equals(d1))
assertFalse(d1.equals(d2))
assertTrue(d1.equals(d2))
assertFalse(d1.equals(d2))
assertTrue(d1.equals(d2))
assertTrue(d1 != d2)
assertTrue(d1.getClass() == d2.getClass())
assertTrue(d1.equals(d2))
assertTrue(d1 != d2)
assertTrue(d1.getClass() == d2.getClass())
assertTrue(d1.equals(d2))
assertFalse(d1.equals(d2))
assertTrue(d1 instanceof PublicCloneable)
assertEquals(d1, d2)
assertEquals(0, d.getSeriesCount())
assertEquals(2, d.getSeriesCount())
assertEquals("S1", d.getSeriesKey(0))
assertEquals("S2", d.getSeriesKey(1))
assertTrue(pass)
assertTrue(pass)
assertEquals(3, d.getItemCount(0))
assertEquals(3, d.getItemCount(1))
assertTrue(pass)
assertTrue(d1.equals(d2))
assertTrue(d2.equals(d1))
assertFalse(d1.equals(d2))
assertTrue(d1.equals(d2))
assertTrue(d1 != d2)
assertTrue(d1.getClass() == d2.getClass())
assertTrue(d1.equals(d2))
assertTrue(d1 != d2)
assertTrue(d1.getClass() == d2.getClass())
assertTrue(d1.equals(d2))
assertTrue(d1 != d2)
assertTrue(d1.getClass() == d2.getClass())
assertTrue(d1.equals(d2))
assertFalse(d1.equals(d2))
assertTrue(d1 instanceof PublicCloneable)
assertEquals(d1, d2)
assertEquals(d1, d2)
assertEquals(0, d.indexOf("S1"))
assertEquals(1, d.indexOf("S2"))
assertEquals(-1, d.indexOf("Green Eggs and Ham"))
assertEquals(-1, d.indexOf(null))
assertEquals(1, d.getSeriesCount())
assertEquals("S1", d.getSeriesKey(0))
assertEquals(1, d.getSeriesCount())
assertTrue(pass)
assertTrue(s1.equals(s2))
assertFalse(s1.equals(s2))
assertTrue(s1.equals(s2))
assertFalse(s1.equals(s2))
assertTrue(s1.equals(s2))
assertFalse(s1.equals(s2))
assertTrue(s1.equals(s2))
assertFalse(s1.equals(s2))
assertTrue(s2.equals(s1))
assertFalse(s1.equals(s2))
assertTrue(s2.equals(s1))
assertFalse(s1.equals(s2))
assertTrue(s2.equals(s1))
assertTrue(s1 != s2)
assertTrue(s1.getClass() == s2.getClass())
assertTrue(s1.equals(s2))
assertEquals(s1, s2)
assertEquals(0, s1.indexOf(1.0))
assertEquals(0, s1.indexOf(1.0))
assertEquals(1, s1.indexOf(3.0))
assertEquals(2, s1.indexOf(2.0))
assertEquals(3, s1.getItemCount())
assertEquals(3.0, s1.getX(1))
assertEquals(3.0, s1.getX(0))
assertEquals(Integer.MAX_VALUE, s1.getMaximumItemCount())
assertEquals(2, s1.getMaximumItemCount())
assertNull(this.lastEvent)
assertTrue(s1.isEmpty())
assertFalse(s1.isEmpty())
assertNotNull(this.lastEvent)
assertTrue(s1.isEmpty())
assertTrue(m1.equals(m2))
assertTrue(m2.equals(m1))
assertFalse(m1.equals(m2))
assertTrue(m1.equals(m2))
assertFalse(m1.equals(m2))
assertTrue(m1.equals(m2))
assertFalse(m1.equals(m2))
assertTrue(m1.equals(m2))
assertFalse(m1.equals(m2))
assertTrue(m1.equals(m2))
assertTrue(m1 != m2)
assertTrue(m1.getClass() == m2.getClass())
assertTrue(m1.equals(m2))
assertEquals(m1, m2)
assertEquals(0, m.getItemColumn(0))
assertEquals(1, m.getItemColumn(1))
assertEquals(0, m.getItemColumn(2))
assertEquals(1, m.getItemColumn(3))
assertEquals(0, m.getItemColumn(4))
assertEquals(1, m.getItemColumn(5))
assertEquals(0, m.getItemRow(0))
assertEquals(0, m.getItemRow(1))
assertEquals(1, m.getItemRow(2))
assertEquals(1, m.getItemRow(3))
assertEquals(2, m.getItemRow(4))
assertEquals(2, m.getItemRow(5))
assertTrue(ko1.equals(ko2))
assertTrue(ko2.equals(ko1))
assertFalse(ko1.equals(ko2))
assertFalse(ko1.equals(ko2))
assertTrue(ko1 != ko2)
assertTrue(ko1.getClass() == ko2.getClass())
assertTrue(ko1.equals(ko2))
assertTrue(ko1 != ko2)
assertTrue(ko1.getClass() == ko2.getClass())
assertTrue(ko1.equals(ko2))
assertTrue(ko2.getObject() == obj1)
assertTrue(ko1 != ko2)
assertTrue(ko1.getClass() == ko2.getClass())
assertTrue(ko1.equals(ko2))
assertTrue(ko2.getObject() != obj1)
assertEquals(ko1, ko2)
assertEquals(item1, item2)
assertNotEquals(item1, item2)
assertEquals(item1, item2)
assertNotEquals(item1, item2)
assertEquals(item1, item2)
assertNotSame(item1, item2)
assertSame(item1.getClass(), item2.getClass())
assertEquals(item1, item2)
assertEquals(item1, item2)
assertTrue(item2.compareTo(item1) > 0)
assertTrue(item3.compareTo(item1) > 0)
assertTrue(item4.compareTo(item1) == 0)
assertTrue(item1.compareTo(item2) < 0)
assertEquals(1.0, d.getValue("R1", "C1"))
assertTrue(pass)
assertTrue(pass)
assertTrue(v1 != v2)
assertTrue(v1.getClass() == v2.getClass())
assertTrue(v1.equals(v2))
assertFalse(v1.equals(v2))
assertEquals(kv2D1, kv2D2)
assertTrue(d1.equals(d2))
assertTrue(d2.equals(d1))
assertFalse(d1.equals(d2))
assertTrue(d1.equals(d2))
assertEquals(11, d.getValue("R1", "C1"))
assertNull(d.getValue("R1", "C2"))
assertEquals(22, d.getValue("R2", "C2"))
assertNull(d.getValue("R2", "C1"))
assertEquals(0, d.getRowCount())
assertEquals(1, d.getRowCount())
assertEquals(2, d.getRowCount())
assertEquals(0, d.getColumnCount())
assertEquals(1, d.getColumnCount())
assertEquals(2, d.getColumnCount())
assertTrue(pass)
assertNull(d.getValue(1, 0))
assertNull(d.getValue(0, 1))
assertTrue(pass)
assertTrue(pass)
assertEquals("R1", d.getRowKey(0))
assertEquals("R2", d.getRowKey(1))
assertEquals("R1", d.getRowKey(0))
assertEquals("R0", d.getRowKey(0))
assertEquals("R1", d.getRowKey(1))
assertTrue(pass)
assertEquals("C1", d.getColumnKey(0))
assertEquals("C2", d.getColumnKey(1))
assertEquals(0, d.getRowCount())
assertEquals(0, d.getColumnCount())
assertEquals(2.0, d.getValue(0, 0))
assertEquals(2, d.getColumnCount())
assertEquals(2, d.getRowCount())
assertEquals(1, d.getColumnCount())
assertEquals(1, d.getRowCount())
assertEquals(1.0, d.getValue(0, 0))
assertTrue(pass)
assertTrue(pass)
assertTrue(f1.equals(f2))
assertFalse(f1.equals(f2))
assertTrue(f1.equals(f2))
assertEquals(f1, f2)
assertEquals(f1.hashCode(), f2.hashCode())
assertEquals(f1, f2)
assertNotEquals(f1, f2)
assertEquals(f1, f2)
assertEquals(f1, f2)
assertEquals(f1.hashCode(), f2.hashCode())
assertTrue(Arrays.equals(new double[] { 1.0, 2.0 }, f.getCoefficients()))
assertTrue(pass)
assertTrue(Arrays.equals(new double[] { 1.0, 2.0 }, c))
assertTrue(Arrays.equals(new double[] { 1.0, 2.0 }, f.getCoefficients()))
assertEquals(1, f.getOrder())
assertTrue(f1.equals(f2))
assertFalse(f1.equals(f2))
assertTrue(f1.equals(f2))
assertEquals(f1, f2)
assertEquals(f1.hashCode(), f2.hashCode())
assertEquals(f1, f2)
assertNotEquals(f1, f2)
assertEquals(f1, f2)
assertEquals(f1, f2)
assertEquals(f1.hashCode(), f2.hashCode())
assertEquals("A", v.getKey())
assertEquals(1, v.getValue())
assertTrue(pass)
assertNull(v.getValue())
assertTrue(v1.equals(v2))
assertTrue(v2.equals(v1))
assertFalse(v1.equals(v2))
assertFalse(v1.equals(v2))
assertTrue(v1.equals(v2))
assertFalse(v1.equals(v2))
assertFalse(v2.equals(v1))
assertTrue(v1 != v2)
assertTrue(v1.getClass() == v2.getClass())
assertTrue(v1.equals(v2))
assertFalse(v1.equals(v2))
assertEquals(v1, v2)
assertTrue(d1.equals(d2))
assertFalse(d1.equals(d2))
assertTrue(d1.equals(d2))
assertEquals(d1, d2)
assertFalse(d1.equals(d2))
assertTrue(d1 != d2)
assertTrue(d1.getClass() == d2.getClass())
assertTrue(d1.equals(d2))
assertFalse(d1.equals(d2))
assertEquals(new Range(5.0, 6.0), dataset.getRangeBounds(false))
assertEquals(1, dataset.getSeriesCount())
assertEquals(0, dataset.getItemCount(0))
assertTrue(Double.isNaN(dataset.getRangeLowerBound(false)))
assertTrue(Double.isNaN(dataset.getRangeUpperBound(false)))
assertEquals(new Range(5.0, 6.0), d1.getRangeBounds(false))
assertEquals(new Range(5.0, 6.0), d1.getRangeBounds(true))
assertEquals(new Range(5.0, 6.5), d1.getRangeBounds(false))
assertEquals(new Range(5.0, 6.5), d1.getRangeBounds(true))
assertEquals(new Range(5.0, 7.5), d1.getRangeBounds(false))
assertEquals(new Range(5.0, 7.5), d1.getRangeBounds(true))
assertTrue(d1.equals(d2))
assertTrue(d2.equals(d1))
assertFalse(d1.equals(d2))
assertTrue(d1.equals(d2))
assertTrue(d1 != d2)
assertTrue(d1.getClass() == d2.getClass())
assertTrue(d1.equals(d2))
assertFalse(d1.equals(d2))
assertTrue(d1.equals(d2))
assertEquals(d1, d2)
assertFalse(d1.equals(d2))
assertTrue(d1.equals(d2))
assertEquals("Series 1", d1.getSeriesKey(0))
assertTrue(values[0] > d.getStartXValue(0, 630))
assertTrue(values[0] < d.getEndXValue(0, 630))
assertNotNull(this.lastEvent)
assertTrue(pass)
assertTrue(pass)
assertTrue(Double.isNaN(Statistics.calculateMean(new Number[0])))
assertTrue(Double.isNaN(Statistics.calculateMean(new Number[0], false)))
assertTrue(Double.isNaN(Statistics.calculateMean(values)))
assertTrue(Double.isNaN(Statistics.calculateMean(values, true)))
assertTrue(Double.isNaN(Statistics.calculateMean(values)))
assertTrue(Double.isNaN(Statistics.calculateMean(values, true)))
assertTrue(pass)
assertTrue(pass)
assertTrue(Double.isNaN(Statistics.calculateMean(values)))
assertTrue(Double.isNaN(Statistics.calculateMean(values, true)))
assertTrue(Double.isNaN(Statistics.calculateMean(values, false)))
assertTrue(Double.isNaN(Statistics.calculateMean(values)))
assertTrue(Double.isNaN(Statistics.calculateMean(values, true)))
assertTrue(Double.isNaN(Statistics.calculateMean(values)))
assertTrue(Double.isNaN(Statistics.calculateMean(values, true)))
assertTrue(Double.isNaN(Statistics.calculateMean(values)))
assertTrue(Double.isNaN(Statistics.calculateMedian(null, false)))
assertTrue(Double.isNaN(Statistics.calculateMedian(null, true)))
assertTrue(Double.isNaN(Statistics.calculateMedian(list, false)))
assertTrue(Double.isNaN(Statistics.calculateMedian(list, true)))
assertTrue(pass)
assertTrue(pass)
assertTrue(pass)
assertTrue(pass)
assertTrue(pass)
assertTrue(pass)
assertTrue(Double.isNaN(Statistics.getStdDev(new Double[] { 1.0 })))
assertEquals(b1, b2)
assertTrue(b1 != b2)
assertTrue(b1.getClass() == b2.getClass())
assertTrue(b1.equals(b2))
assertEquals(b1, b2)
assertTrue(d1.equals(d2))
assertFalse(d1.equals(d2))
assertTrue(d1.equals(d2))
assertTrue(d1 != d2)
assertTrue(d1.getClass() == d2.getClass())
assertTrue(d1.equals(d2))
assertFalse(d1.equals(d2))
assertEquals(d1, d2)
assertEquals(0, d1.getItemCount(0))
assertEquals(2, d1.getItemCount(0))
assertEquals(0, d1.getItemCount(0))
assertNull(d.getRangeBounds(true))
assertEquals(new Range(4.5, 4.5), d.getRangeBounds(false))
assertEquals(new Range(3.5, 5.5), d.getRangeBounds(true))
assertEquals(new Range(0.5, 4.5), d.getRangeBounds(false))
assertEquals(new Range(-1.5, 5.5), d.getRangeBounds(true))
assertEquals(new Range(0.5, 4.5), d.getRangeBounds(false))
assertEquals(new Range(-1.5, 5.5), d.getRangeBounds(true))
assertEquals(new Range(Double.NEGATIVE_INFINITY, 4.5), d.getRangeBounds(false))
assertEquals(new Range(Double.NEGATIVE_INFINITY, 5.5), d.getRangeBounds(true))
assertEquals(new Range(0.5, Double.POSITIVE_INFINITY), d.getRangeBounds(false))
assertEquals(new Range(-1.5, Double.POSITIVE_INFINITY), d.getRangeBounds(true))
assertTrue(d1.equals(d2))
assertTrue(d2.equals(d1))
assertTrue(d1 != d2)
assertTrue(d1.getClass() == d2.getClass())
assertTrue(d1.equals(d2))
assertFalse(d1.equals(d2))
assertEquals(d1, d2)
assertEquals(d1, d2)
assertEquals(new Range(1.0, 1.0), d1.getRangeBounds(false))
assertEquals(new Range(-1.0, 3.0), d1.getRangeBounds(true))
assertEquals(new Range(10.0, 10.0), d1.getRangeBounds(false))
assertEquals(new Range(-10.0, 30.0), d1.getRangeBounds(true))
assertTrue(pass)
assertEquals(new Range(1.0, 1.0), data.getRangeBounds(false))
assertEquals(new Range(0.5, 1.5), data.getRangeBounds(true))
assertEquals(1.5, d.getValue("R1", "C1"))
assertTrue(pass)
assertTrue(pass)
assertTrue(pass)
assertTrue(d.getRowCount() == 0)
assertTrue(d.getRowCount() == 1)
assertTrue(d.getRowCount() == 2)
assertTrue(d.getRowCount() == 2)
assertTrue(d.getColumnCount() == 0)
assertTrue(d.getColumnCount() == 1)
assertTrue(d.getColumnCount() == 2)
assertTrue(d.getColumnCount() == 2)
assertTrue(d1.equals(d2))
assertTrue(d2.equals(d1))
assertFalse(d1.equals(d2))
assertTrue(d1.equals(d2))
assertFalse(d1.equals(d2))
assertTrue(d1.equals(d2))
assertFalse(d1.equals(d2))
assertTrue(d1.equals(d2))
assertEquals(d1, d2)
assertTrue(pass)
assertEquals(values, d1.getValues("R2", "C1"))
assertTrue(pass)
assertTrue(d1 != d2)
assertTrue(d1.getClass() == d2.getClass())
assertTrue(d1.equals(d2))
assertTrue(d1 != d2)
assertTrue(d1.getClass() == d2.getClass())
assertTrue(d1.equals(d2))
assertFalse(d1.equals(d2))
assertTrue(d1.equals(d2))
assertTrue(pass)
assertTrue(pass)
assertTrue(Double.isNaN(q1))
assertTrue(pass)
assertTrue(Double.isNaN(q3))
assertTrue(i1.equals(i2))
assertTrue(i2.equals(i1))
assertEquals(i1, i2)
assertFalse(bin1.accepts(0.0))
assertTrue(bin1.accepts(1.0))
assertTrue(bin1.accepts(1.5))
assertTrue(bin1.accepts(2.0))
assertFalse(bin1.accepts(2.1))
assertFalse(bin1.accepts(Double.NaN))
assertFalse(bin2.accepts(0.0))
assertFalse(bin2.accepts(1.0))
assertTrue(bin2.accepts(1.5))
assertFalse(bin2.accepts(2.0))
assertFalse(bin2.accepts(2.1))
assertFalse(bin2.accepts(Double.NaN))
assertTrue(b1.overlapsWith(b2))
assertTrue(b2.overlapsWith(b1))
assertFalse(b1.overlapsWith(b3))
assertFalse(b3.overlapsWith(b1))
assertTrue(b1.overlapsWith(b4))
assertTrue(b4.overlapsWith(b1))
assertFalse(b1.overlapsWith(b5))
assertFalse(b5.overlapsWith(b1))
assertTrue(b1.overlapsWith(b6))
assertTrue(b6.overlapsWith(b1))
assertTrue(b1.equals(b2))
assertTrue(b2.equals(b1))
assertFalse(b1.equals(b2))
assertTrue(b1.equals(b2))
assertFalse(b1.equals(b2))
assertTrue(b1.equals(b2))
assertFalse(b1.equals(b2))
assertTrue(b1.equals(b2))
assertFalse(b1.equals(b2))
assertTrue(b1.equals(b2))
assertFalse(b1.equals(b2))
assertTrue(b1.equals(b2))
assertTrue(b1 != b2)
assertTrue(b1.getClass() == b2.getClass())
assertTrue(b1.equals(b2))
assertFalse(b1.equals(b2))
assertEquals(b1, b2)
assertTrue(m1.equals(m2))
assertTrue(m2.equals(m1))
assertFalse(m1.equals(m2))
assertTrue(m1.equals(m2))
assertFalse(m1.equals(m2))
assertTrue(m1.equals(m2))
assertFalse(m1 instanceof Cloneable)
assertEquals(m1, m2)
assertTrue(d1.equals(d2))
assertTrue(d2.equals(d1))
assertEquals(d1, d2)
assertTrue(d1 != d2)
assertTrue(d1.getClass() == d2.getClass())
assertTrue(d1.equals(d2))
assertFalse(d1.equals(d2))
assertEquals(new Range(7.0, 8.0), dataset.getRangeBounds(false))
assertEquals(new Range(7.5, 8.5), dataset.getRangeBounds(false))
assertEquals(0, dataset.getColumnCount())
assertEquals(0, dataset.getRowCount())
assertTrue(Double.isNaN(dataset.getRangeLowerBound(false)))
assertTrue(Double.isNaN(dataset.getRangeUpperBound(false)))
assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(false))
assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(true))
assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(false))
assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(true))
assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(false))
assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(true))
assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(false))
assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(true))
assertTrue(pass)
assertEquals(new Range(7.0, 8.0), data.getRangeBounds(false))
assertEquals(new Range(7.0, 8.0), data.getRangeBounds(true))
assertEquals(new Range(7.0, 9.5), data.getRangeBounds(false))
assertEquals(new Range(7.0, 9.5), data.getRangeBounds(true))
assertEquals(new Range(8.5, 9.5), data.getRangeBounds(false))
assertEquals(new Range(8.5, 9.5), data.getRangeBounds(true))
assertTrue(k1.equals(k2))
assertTrue(k2.equals(k1))
assertFalse(k1.equals(k2))
assertTrue(k1.equals(k2))
assertTrue(o1 != o2)
assertTrue(o1.getClass() == o2.getClass())
assertTrue(o1.equals(o2))
assertFalse(o1.equals(o2))
assertEquals(ko2D1, ko2D2)
assertEquals("Obj1", data.getObject(0, 0))
assertEquals("Obj2", data.getObject(1, 1))
assertNull(data.getObject(0, 1))
assertNull(data.getObject(1, 0))
assertTrue(pass)
assertTrue(pass)
assertTrue(pass)
assertTrue(pass)
assertEquals("Obj1", data.getObject("R1", "C1"))
assertEquals("Obj2", data.getObject("R2", "C2"))
assertNull(data.getObject("R1", "C2"))
assertNull(data.getObject("R2", "C1"))
assertTrue(pass)
assertTrue(pass)
assertTrue(pass)
assertTrue(pass)
assertEquals("Obj1", data.getObject("R1", "C1"))
assertEquals("Obj2", data.getObject("R2", "C2"))
assertNull(data.getObject("R1", "C2"))
assertNull(data.getObject("R2", "C1"))
assertEquals("ABC", data.getObject("R2", "C2"))
assertTrue(pass)
assertTrue(pass)
assertEquals(1, data.getRowCount())
assertEquals("Obj2", data.getObject(0, 1))
assertTrue(pass)
assertTrue(pass)
assertEquals(1, data.getColumnCount())
assertEquals("Obj2", data.getObject(1, 0))
assertTrue(pass)
assertTrue(pass)
assertEquals(1, data.getRowCount())
assertEquals("Obj1", data.getObject(0, 0))
assertTrue(pass)
assertTrue(pass)
assertEquals(1, data.getColumnCount())
assertEquals("Obj1", data.getObject(0, 0))
assertTrue(pass)
assertTrue(pass)
assertEquals(1, data.getRowCount())
assertEquals(1, data.getColumnCount())
assertEquals("Obj1", data.getObject(0, 0))
assertTrue(t1.equals(t2))
assertTrue(t2.equals(t1))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertTrue(t1 != t2)
assertTrue(t1.getClass() == t2.getClass())
assertTrue(t1.equals(t2))
assertEquals(t1, t2)
assertEquals(0, t1.getSubtaskCount())
assertEquals(1, t1.getSubtaskCount())
assertEquals(2, t1.getSubtaskCount())
assertEquals(3, t1.getSubtaskCount())
assertEquals(2, t1.getSubtaskCount())
assertTrue(d1.equals(d2))
assertFalse(d1.equals(d2))
assertTrue(d1.equals(d2))
assertFalse(d1.equals(d2))
assertTrue(d1.equals(d2))
assertFalse(d1.equals(d2))
assertTrue(d1.equals(d2))
assertTrue(d1 != d2)
assertTrue(d1.getClass() == d2.getClass())
assertTrue(d1.equals(d2))
assertFalse(d1.equals(d2))
assertTrue(d1.equals(d2))
assertEquals(d1, d2)
assertFalse(d1.equals(d2))
assertTrue(d1.equals(d2))
assertEquals(2, c.getSeriesCount())
assertEquals("S1", c.getSeriesKey(0))
assertEquals("S2", c.getSeriesKey(1))
assertEquals(2, c.getRowCount())
assertEquals("S1", c.getRowKey(0))
assertEquals("S2", c.getRowKey(1))
assertEquals(0, c.getRowIndex("S1"))
assertEquals(1, c.getRowIndex("S2"))
assertEquals(1L, c.getValue("S1", "Task 1"))
assertEquals(3L, c.getValue("S1", "Task 2"))
assertEquals(5L, c.getValue("S2", "Task 3"))
assertEquals(1L, c.getValue(0, 0))
assertEquals(3L, c.getValue(0, 1))
assertEquals(null, c.getValue(0, 2))
assertEquals(null, c.getValue(1, 0))
assertEquals(null, c.getValue(1, 1))
assertEquals(5L, c.getValue(1, 2))
assertEquals(1L, c.getStartValue("S1", "Task 1"))
assertEquals(3L, c.getStartValue("S1", "Task 2"))
assertEquals(5L, c.getStartValue("S2", "Task 3"))
assertEquals(1L, c.getStartValue(0, 0))
assertEquals(3L, c.getStartValue(0, 1))
assertEquals(null, c.getStartValue(0, 2))
assertEquals(null, c.getStartValue(1, 0))
assertEquals(null, c.getStartValue(1, 1))
assertEquals(5L, c.getStartValue(1, 2))
assertEquals(100L, c3.getStartValue(0, 0))
assertEquals(220L, c3.getStartValue(0, 1))
assertTrue(c3.getStartValue(1, 0) == null)
assertEquals(2220L, c3.getStartValue(1, 1))
assertEquals(10L, c.getStartValue("S1", "Task 1", 0))
assertEquals(16L, c.getStartValue("S1", "Task 1", 1))
assertEquals(30L, c.getStartValue("S1", "Task 2", 0))
assertEquals(36L, c.getStartValue("S1", "Task 2", 1))
assertEquals(50L, c.getStartValue("S2", "Task 3", 0))
assertEquals(56L, c.getStartValue("S2", "Task 3", 1))
assertEquals(10L, c.getStartValue(0, 0, 0))
assertEquals(16L, c.getStartValue(0, 0, 1))
assertEquals(30L, c.getStartValue(0, 1, 0))
assertEquals(36L, c.getStartValue(0, 1, 1))
assertEquals(50L, c.getStartValue(1, 2, 0))
assertEquals(56L, c.getStartValue(1, 2, 1))
assertEquals(11L, c3.getStartValue(0, 0, 0))
assertEquals(22L, c3.getStartValue(0, 1, 0))
assertEquals(33L, c3.getStartValue(0, 1, 1))
assertTrue(c3.getStartValue(1, 0, 0) == null)
assertEquals(44L, c3.getStartValue(1, 1, 0))
assertEquals(55L, c3.getStartValue(1, 1, 1))
assertEquals(66L, c3.getStartValue(1, 1, 2))
assertTrue(millis == null)
assertEquals(2L, c.getEndValue("S1", "Task 1"))
assertEquals(4L, c.getEndValue("S1", "Task 2"))
assertEquals(6L, c.getEndValue("S2", "Task 3"))
assertEquals(2L, c.getEndValue(0, 0))
assertEquals(4L, c.getEndValue(0, 1))
assertEquals(null, c.getEndValue(0, 2))
assertEquals(null, c.getEndValue(1, 0))
assertEquals(null, c.getEndValue(1, 1))
assertEquals(6L, c.getEndValue(1, 2))
assertEquals(200L, c3.getEndValue(0, 0))
assertEquals(350L, c3.getEndValue(0, 1))
assertTrue(c3.getEndValue(1, 0) == null)
assertEquals(3350L, c3.getEndValue(1, 1))
assertEquals(15L, c.getEndValue("S1", "Task 1", 0))
assertEquals(20L, c.getEndValue("S1", "Task 1", 1))
assertEquals(35L, c.getEndValue("S1", "Task 2", 0))
assertEquals(40L, c.getEndValue("S1", "Task 2", 1))
assertEquals(55L, c.getEndValue("S2", "Task 3", 0))
assertEquals(60L, c.getEndValue("S2", "Task 3", 1))
assertEquals(15L, c.getEndValue(0, 0, 0))
assertEquals(20L, c.getEndValue(0, 0, 1))
assertEquals(35L, c.getEndValue(0, 1, 0))
assertEquals(40L, c.getEndValue(0, 1, 1))
assertEquals(55L, c.getEndValue(1, 2, 0))
assertEquals(60L, c.getEndValue(1, 2, 1))
assertEquals(111L, c3.getEndValue(0, 0, 0))
assertEquals(222L, c3.getEndValue(0, 1, 0))
assertEquals(333L, c3.getEndValue(0, 1, 1))
assertTrue(c3.getEndValue(1, 0, 0) == null)
assertEquals(444L, c3.getEndValue(1, 1, 0))
assertEquals(555L, c3.getEndValue(1, 1, 1))
assertEquals(666L, c3.getEndValue(1, 1, 2))
assertTrue(millis == null)
assertEquals(0.10, c.getPercentComplete("S1", "Task 1"))
assertEquals(0.20, c.getPercentComplete("S1", "Task 2"))
assertEquals(0.30, c.getPercentComplete("S2", "Task 3"))
assertEquals(0.10, c.getPercentComplete(0, 0))
assertEquals(0.20, c.getPercentComplete(0, 1))
assertEquals(null, c.getPercentComplete(0, 2))
assertEquals(null, c.getPercentComplete(1, 0))
assertEquals(null, c.getPercentComplete(1, 1))
assertEquals(0.30, c.getPercentComplete(1, 2))
assertEquals(0.1, c3.getPercentComplete(0, 0))
assertEquals(0.2, c3.getPercentComplete(0, 1))
assertTrue(c3.getPercentComplete(1, 0) == null)
assertEquals(0.3, c3.getPercentComplete(1, 1))
assertEquals(0.111, c3.getPercentComplete(0, 0, 0))
assertEquals(0.222, c3.getPercentComplete(0, 1, 0))
assertEquals(0.333, c3.getPercentComplete(0, 1, 1))
assertEquals(0.444, c3.getPercentComplete(1, 1, 0))
assertEquals(0.555, c3.getPercentComplete(1, 1, 1))
assertEquals(0.666, c3.getPercentComplete(1, 1, 2))
assertEquals(3, c.getColumnCount())
assertEquals("Task 1", c.getColumnKey(0))
assertEquals("Task 2", c.getColumnKey(1))
assertEquals("Task 3", c.getColumnKey(2))
assertEquals(0, c.getColumnIndex("Task 1"))
assertEquals(1, c.getColumnIndex("Task 2"))
assertEquals(2, c.getColumnIndex("Task 3"))
assertTrue(c1.equals(c2))
assertTrue(c2.equals(c1))
assertTrue(c1 != c2)
assertTrue(c1.getClass() == c2.getClass())
assertTrue(c1.equals(c2))
assertFalse(c1.equals(c2))
assertTrue(c1.equals(c2))
assertEquals(c1, c2)
assertEquals(3, taskCount)
assertEquals(1, tsc.getSubIntervalCount(0, 0))
assertEquals(2, tsc.getSubIntervalCount(0, 1))
assertEquals(0, tsc.getSubIntervalCount(1, 0))
assertEquals(3, tsc.getSubIntervalCount(1, 1))
assertEquals(c.getSeries(0), s1)
assertEquals(c.getSeries("S1"), s1)
assertEquals(c.getSeries("XX"), null)
assertEquals(c.getSeries(1), s2)
assertEquals(c.getSeries("S2"), s2)
assertTrue(pass)
assertEquals("S1", c.getSeries(0).getKey())
assertEquals(0, c.getSeriesCount())
assertTrue(pass)
assertTrue(pass)
assertTrue(d1.equals(d2))
assertFalse(d1.equals(d2))
assertTrue(d1.equals(d2))
assertFalse(d1.equals(d2))
assertTrue(d1.equals(d2))
assertFalse(d1.equals(d2))
assertTrue(d1.equals(d2))
assertTrue(d1 != d2)
assertTrue(d1.getClass() == d2.getClass())
assertTrue(d1.equals(d2))
assertFalse(d1.equals(d2))
assertTrue(d1.equals(d2))
assertEquals(d1, d2)
assertFalse(d1.equals(d2))
assertTrue(d1.equals(d2))
assertTrue(s1.equals(s2))
assertTrue(s2.equals(s1))
assertFalse(s1.equals(s2))
assertTrue(s1.equals(s2))
assertTrue(s1 != s2)
assertTrue(s1.getClass() == s2.getClass())
assertTrue(s1.equals(s2))
assertFalse(s1.equals(s2))
assertTrue(s1.equals(s2))
assertEquals(s1, s2)
assertTrue(t1.equals(new Task("T1", new Date(1), new Date(2))))
assertTrue(t2.equals(new Task("T2", new Date(11), new Date(22))))
assertTrue(t3 == null)
assertEquals(r1, r2)
assertEquals(r2, r1)
assertFalse(r1.equals(r2))
assertFalse(r1.equals(r2))
assertFalse(r1.equals(0.0))
assertEquals(a1.hashCode(), a2.hashCode())
assertEquals(a1.hashCode(), a2.hashCode())
assertFalse(r1.contains(Double.NaN))
assertFalse(r1.contains(Double.NEGATIVE_INFINITY))
assertFalse(r1.contains(-1.0))
assertTrue(r1.contains(0.0))
assertTrue(r1.contains(0.5))
assertTrue(r1.contains(1.0))
assertFalse(r1.contains(2.0))
assertFalse(r1.contains(Double.POSITIVE_INFINITY))
assertTrue(Double.isNaN(d))
assertFalse(r1.intersects(-2.0, -1.0))
assertFalse(r1.intersects(-2.0, 0.0))
assertTrue(r1.intersects(-2.0, 0.5))
assertTrue(r1.intersects(-2.0, 1.0))
assertTrue(r1.intersects(-2.0, 1.5))
assertTrue(r1.intersects(0.0, 0.5))
assertTrue(r1.intersects(0.0, 1.0))
assertTrue(r1.intersects(0.0, 1.5))
assertTrue(r1.intersects(0.5, 0.6))
assertTrue(r1.intersects(0.5, 1.0))
assertTrue(r1.intersects(0.5, 1.5))
assertFalse(r1.intersects(1.0, 1.1))
assertFalse(r1.intersects(1.5, 2.0))
assertEquals(r1, r2)
assertEquals(r1, r2)
assertEquals(r1, r2)
assertEquals(r1, r2)
assertNull(Range.combine(null, null))
assertEquals(r1, Range.combine(r1, null))
assertEquals(r2, Range.combine(null, r2))
assertEquals(new Range(1.0, 2.5), Range.combine(r1, r2))
assertTrue(Double.isNaN(rr.getLowerBound()))
assertTrue(Double.isNaN(rr.getUpperBound()))
assertNull(Range.combineIgnoringNaN(null, null))
assertEquals(r1, Range.combineIgnoringNaN(r1, null))
assertEquals(r2, Range.combineIgnoringNaN(null, r2))
assertEquals(new Range(1.0, 2.5), Range.combineIgnoringNaN(r1, r2))
assertTrue(new Range(Double.NaN, Double.NaN).isNaNRange())
assertFalse(new Range(1.0, 2.0).isNaNRange())
assertFalse(new Range(Double.NaN, 2.0).isNaNRange())
assertFalse(new Range(1.0, Double.NaN).isNaNRange())
assertEquals(0, d.getItemCount())
assertEquals(0, d.getItemCount())
assertEquals(1, d.getItemCount())
assertEquals(2, d.getItemCount())
assertEquals(0, d.getItemCount())
assertTrue(keys.isEmpty())
assertEquals(1, keys.size())
assertTrue(keys.contains("A"))
assertEquals(2, keys.size())
assertTrue(keys.contains("A"))
assertTrue(keys.contains("B"))
assertEquals(0, keys.size())
assertEquals(2, v1.getItemCount())
assertEquals(0, v1.getItemCount())
assertEquals(3, v2.getValue(2))
assertTrue(pass)
assertEquals("K2", v2.getKey(1))
assertEquals(-1, v1.getIndex("K1"))
assertEquals(2, v2.getIndex("K3"))
assertTrue(pass)
assertEquals(-1, v.getIndex("K1"))
assertEquals(0, v.getIndex("K1"))
assertEquals(-1, v.getIndex("K1"))
assertEquals(1.0, v1.getValue("A"))
assertEquals(2.0, v1.getValue("B"))
assertEquals(3.0, v1.getValue("B"))
assertEquals(2, v1.getItemCount())
assertNull(v1.getValue("A"))
assertEquals(2, v1.getItemCount())
assertTrue(pass)
assertEquals(1.0, v1.getValue(0))
assertEquals(2.0, v1.getValue(0))
assertEquals(1.0, v1.getValue(1))
assertEquals(2.0, v1.getValue(0))
assertEquals(1.0, v1.getValue(1))
assertEquals(3.0, v1.getValue(2))
assertEquals(1.0, v1.getValue(0))
assertEquals(3.0, v1.getValue(1))
assertEquals(4.0, v1.getValue(2))
assertTrue(v1 != v2)
assertTrue(v1.getClass() == v2.getClass())
assertTrue(v1.equals(v2))
assertFalse(v1.equals(v2))
assertEquals(data.getKey(0), "A")
assertEquals(data.getKey(1), "B")
assertEquals(data.getKey(2), "C")
assertEquals(data.getKey(3), "D")
assertEquals(data.getValue("A"), 1.0)
assertEquals(data.getValue("B"), 2.0)
assertEquals(data.getValue("C"), 3.0)
assertEquals(data.getValue("D"), null)
assertEquals(data.getValue(0), 1.0)
assertEquals(data.getValue(1), 2.0)
assertEquals(data.getValue(2), 3.0)
assertEquals(data.getValue(3), null)
assertEquals(1, data.getIndex("B"))
assertEquals(-1, data.getIndex("B"))
assertTrue(pass)
assertEquals(data.getKey(0), "A")
assertEquals(data.getKey(1), "B")
assertEquals(data.getKey(2), "C")
assertEquals(data.getKey(3), "D")
assertEquals(data.getValue("A"), 2.0)
assertEquals(data.getValue("B"), null)
assertEquals(data.getValue("C"), 1.0)
assertEquals(data.getValue("D"), 3.0)
assertEquals(data.getValue(0), 2.0)
assertEquals(data.getValue(1), null)
assertEquals(data.getValue(2), 1.0)
assertEquals(data.getValue(3), 3.0)
assertEquals(data.getKey(0), "D")
assertEquals(data.getKey(1), "C")
assertEquals(data.getKey(2), "B")
assertEquals(data.getKey(3), "A")
assertEquals(data.getValue("A"), 2.0)
assertEquals(data.getValue("B"), null)
assertEquals(data.getValue("C"), 1.0)
assertEquals(data.getValue("D"), 3.0)
assertEquals(data.getValue(0), 3.0)
assertEquals(data.getValue(1), 1.0)
assertEquals(data.getValue(2), null)
assertEquals(data.getValue(3), 2.0)
assertEquals(data.getKey(0), "C")
assertEquals(data.getKey(1), "A")
assertEquals(data.getKey(2), "D")
assertEquals(data.getKey(3), "B")
assertEquals(data.getValue("A"), 2.0)
assertEquals(data.getValue("B"), null)
assertEquals(data.getValue("C"), 1.0)
assertEquals(data.getValue("D"), 3.0)
assertEquals(data.getValue(0), 1.0)
assertEquals(data.getValue(1), 2.0)
assertEquals(data.getValue(2), 3.0)
assertEquals(data.getValue(3), null)
assertEquals(data.getKey(0), "D")
assertEquals(data.getKey(1), "A")
assertEquals(data.getKey(2), "C")
assertEquals(data.getKey(3), "B")
assertEquals(data.getValue("A"), 2.0)
assertEquals(data.getValue("B"), null)
assertEquals(data.getValue("C"), 1.0)
assertEquals(data.getValue("D"), 3.0)
assertEquals(data.getValue(0), 3.0)
assertEquals(data.getValue(1), 2.0)
assertEquals(data.getValue(2), 1.0)
assertEquals(data.getValue(3), null)
assertEquals(v1, v2)
assertEquals(1.5, d.getFlow(0, "A", "Z"))
assertEquals(1, d.getStageCount())
assertEquals(1, d.getStageCount())
assertEquals(2, d.getStageCount())
assertEquals(d1, d2)
assertNotEquals(d1, d2)
assertEquals(d1, d2)
assertEquals(d1, d2)
assertTrue(d1 != d2)
assertTrue(d1.getClass() == d2.getClass())
assertTrue(d1.equals(d2))
assertNotEquals(d1, d2)
assertEquals(d1, d2)
assertTrue(d instanceof PublicCloneable)
assertTrue(k1.equals(k2))
assertTrue(k2.equals(k1))
assertFalse(k1.equals(k2))
assertTrue(k1.equals(k2))
assertFalse(k1.equals(k2))
assertTrue(k1.equals(k2))
assertTrue(k1 != k2)
assertTrue(k1.getClass() == k2.getClass())
assertTrue(k1.equals(k2))
assertEquals(k1, k2)
assertTrue(k1.equals(k2))
assertTrue(k2.equals(k1))
assertFalse(k1.equals(k2))
assertTrue(k1.equals(k2))
assertFalse(k1.equals(k2))
assertTrue(k1.equals(k2))
assertTrue(k1 != k2)
assertTrue(k1.getClass() == k2.getClass())
assertTrue(k1.equals(k2))
assertEquals(k1, k2)
assertTrue(millisecond.equals(millisecond))
assertTrue(milli1.equals(milli2))
assertEquals(122, m1.getMillisecond())
assertEquals(1016729759122L, m1.getLastMillisecond(cal))
assertEquals(123, m2.getMillisecond())
assertEquals(1016729759123L, m2.getFirstMillisecond(cal))
assertEquals(122, m1.getMillisecond())
assertEquals(1016722559122L, m1.getLastMillisecond(cal))
assertEquals(123, m2.getMillisecond())
assertEquals(1016722559123L, m2.getFirstMillisecond(cal))
assertEquals(m1, m2)
assertTrue(m1.equals(m2))
assertEquals(hash1, hash2)
assertEquals(ms.getFirstMillisecond(), ms.getMiddleMillisecond())
assertEquals(ms.getMiddleMillisecond(), ms.getLastMillisecond())
assertEquals(ms.getFirstMillisecond(), ms.getMiddleMillisecond())
assertEquals(ms.getMiddleMillisecond(), ms.getLastMillisecond())
assertFalse(m instanceof Cloneable)
assertEquals(1143902595500L, m.getFirstMillisecond())
assertEquals(-623289609500L, m.getFirstMillisecond(cal))
assertTrue(pass)
assertEquals(955766455500L, m.getFirstMillisecond(calendar))
assertTrue(pass)
assertEquals(61750L, m.getLastMillisecond())
assertEquals(-614962684250L, m.getLastMillisecond(cal))
assertTrue(pass)
assertEquals(987889550250L, m.getLastMillisecond(calendar))
assertTrue(pass)
assertEquals(3155850061500L, m.getSerialIndex())
assertEquals(176461500L, m.getSerialIndex())
assertEquals(2000, m.getSecond().getMinute().getHour().getYear())
assertEquals(12, m.getSecond().getMinute().getHour().getMonth())
assertEquals(12, m.getSecond().getMinute().getHour().getDayOfMonth())
assertEquals(1, m.getSecond().getMinute().getHour().getHour())
assertEquals(30, m.getSecond().getMinute().getMinute())
assertEquals(55, m.getSecond().getSecond())
assertEquals(556, m.getMillisecond())
assertNull(m.next())
assertEquals(cal.getTime(), m.getStart())
assertEquals(cal.getTime(), m.getEnd())
assertTrue(item.equals(item))
assertTrue(item1.equals(item2))
assertTrue(item2.equals(item1))
assertFalse(item1.equals(item2))
assertTrue(item1.equals(item2))
assertEquals(item1, item2)
assertTrue(quarter.equals(quarter))
assertTrue(q1.equals(q2))
assertEquals(1, q1.getQuarter())
assertEquals(1017619199999L, q1.getLastMillisecond(cal))
assertEquals(2, q2.getQuarter())
assertEquals(1017619200000L, q2.getFirstMillisecond(cal))
assertEquals(1, q1.getQuarter())
assertEquals(1017608399999L, q1.getLastMillisecond(cal))
assertEquals(2, q2.getQuarter())
assertEquals(1017608400000L, q2.getFirstMillisecond(cal))
assertNull(previous)
assertEquals(this.q2Y1900, next)
assertEquals(this.q3Y9999, previous)
assertNull(next)
assertEquals(1, quarter.getQuarter())
assertEquals(2000, quarter.getYear().getYear())
assertEquals(2, quarter.getQuarter())
assertEquals(2001, quarter.getYear().getYear())
assertEquals(3, quarter.getQuarter())
assertEquals(2002, quarter.getYear().getYear())
assertEquals(q1, q2)
assertTrue(q1.equals(q2))
assertEquals(h1, h2)
assertFalse(q instanceof Cloneable)
assertTrue(pass)
assertTrue(pass)
assertEquals(15634800000L, q.getFirstMillisecond())
assertEquals(-623347200000L, q.getFirstMillisecond(cal))
assertTrue(pass)
assertEquals(978307200000L, q.getFirstMillisecond(calendar))
assertTrue(pass)
assertEquals(23583599999L, q.getLastMillisecond())
assertEquals(-615488400001L, q.getLastMillisecond(cal))
assertTrue(pass)
assertEquals(1001894399999L, q.getLastMillisecond(calendar))
assertTrue(pass)
assertEquals(8001L, q.getSerialIndex())
assertEquals(7601L, q.getSerialIndex())
assertEquals(new Year(2000), q.getYear())
assertEquals(2, q.getQuarter())
assertNull(q.next())
assertEquals(cal.getTime(), q.getStart())
assertEquals(cal.getTime(), q.getEnd())
assertTrue(hour.equals(hour))
assertTrue(hour1.equals(hour2))
assertEquals(15, h1.getHour())
assertEquals(1014307199999L, h1.getLastMillisecond(cal))
assertEquals(16, h2.getHour())
assertEquals(1014307200000L, h2.getFirstMillisecond(cal))
assertEquals(15, h1.getHour())
assertEquals(1014267599999L, h1.getLastMillisecond(cal))
assertEquals(16, h2.getHour())
assertEquals(1014267600000L, h2.getFirstMillisecond(cal))
assertNull(previous)
assertEquals(1, next.getHour())
assertEquals(1900, next.getYear())
assertEquals(22, previous.getHour())
assertEquals(9999, previous.getYear())
assertNull(next)
assertEquals(13, h.getHour())
assertEquals(h1, h2)
assertTrue(h1.equals(h2))
assertEquals(hash1, hash2)
assertFalse(h instanceof Cloneable)
assertEquals(1143900000000L, h.getFirstMillisecond())
assertEquals(-623293200000L, h.getFirstMillisecond(cal))
assertTrue(pass)
assertEquals(955764000000L, h.getFirstMillisecond(calendar))
assertTrue(pass)
assertEquals(3599999L, h.getLastMillisecond())
assertEquals(-614959200001L, h.getLastMillisecond(cal))
assertTrue(pass)
assertEquals(987890399999L, h.getLastMillisecond(calendar))
assertTrue(pass)
assertEquals(876625L, h.getSerialIndex())
assertEquals(49L, h.getSerialIndex())
assertEquals(2000, h.getYear())
assertEquals(12, h.getMonth())
assertEquals(12, h.getDayOfMonth())
assertEquals(2, h.getHour())
assertNull(h.next())
assertEquals(cal.getTime(), h.getStart())
assertEquals(cal.getTime(), h.getEnd())
assertTrue(second.equals(second))
assertTrue(second1.equals(second2))
assertEquals(58, s1.getSecond())
assertEquals(1016729758999L, s1.getLastMillisecond(cal))
assertEquals(59, s2.getSecond())
assertEquals(1016729759000L, s2.getFirstMillisecond(cal))
assertEquals(58, s1.getSecond())
assertEquals(1016751358999L, s1.getLastMillisecond(cal))
assertEquals(59, s2.getSecond())
assertEquals(1016751359000L, s2.getFirstMillisecond(cal))
assertEquals(s1, s2)
assertTrue(s1.equals(s2))
assertEquals(h1, h2)
assertFalse(s instanceof Cloneable)
assertEquals(1143902595000L, s.getFirstMillisecond())
assertEquals(-623289610000L, s.getFirstMillisecond(cal))
assertTrue(pass)
assertEquals(955766455000L, s.getFirstMillisecond(calendar))
assertTrue(pass)
assertEquals(61999L, s.getLastMillisecond())
assertEquals(-614962684001L, s.getLastMillisecond(cal))
assertTrue(pass)
assertEquals(987889550999L, s.getLastMillisecond(calendar))
assertTrue(pass)
assertEquals(3155850061L, s.getSerialIndex())
assertEquals(176461L, s.getSerialIndex())
assertEquals(2000, s.getMinute().getHour().getYear())
assertEquals(12, s.getMinute().getHour().getMonth())
assertEquals(12, s.getMinute().getHour().getDayOfMonth())
assertEquals(1, s.getMinute().getHour().getHour())
assertEquals(30, s.getMinute().getMinute())
assertEquals(56, s.getSecond())
assertNull(s.next())
assertEquals(cal.getTime(), s.getStart())
assertEquals(cal.getTime(), s.getEnd())
assertEquals(d.getItemCount(), 1)
assertEquals(d.getSeriesCount(), 1)
assertEquals(d.getItemCount(), 2)
assertEquals(d.getSeriesCount(), 2)
assertTrue(Double.isNaN(d.getYValue(0, 1)))
assertTrue(Double.isNaN(d.getYValue(1, 0)))
assertEquals(d.getTimePeriod(0), new Year(1996))
assertEquals(d.getTimePeriod(1), new Year(1998))
assertEquals(d.getTimePeriod(2), new Year(1999))
assertTrue(d1.equals(d2))
assertTrue(d2.equals(d1))
assertFalse(d1.equals(d2))
assertTrue(d1.equals(d2))
assertFalse(d1.equals(d2))
assertTrue(d1.equals(d2))
assertFalse(d1.equals(d2))
assertTrue(clone.equals(d))
assertFalse(clone.equals(d))
assertTrue(d1.equals(d2))
assertEquals(d.getItemCount(), 1)
assertEquals(d.getSeriesCount(), 1)
assertEquals(0, d.getItemCount())
assertEquals(0, d.getSeriesCount())
assertTrue(p.equals(p))
assertTrue(p1.equals(p2))
assertTrue(p2.equals(p1))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertEquals(p1, p2)
assertTrue(s1.equals(s2))
assertEquals(h1, h2)
assertFalse(s1 instanceof Cloneable)
assertEquals(p1, p2)
assertEquals(p1, p2)
assertEquals(new Date(10L), p1.getStart())
assertEquals(0, s1.compareTo(s2))
assertEquals(-1, s1.compareTo(s2))
assertEquals(1, s1.compareTo(s2))
assertEquals(-1, s1.compareTo(s2))
assertEquals(1, s1.compareTo(s2))
assertEquals(-1, s1.compareTo(s2))
assertEquals(1, s1.compareTo(s2))
assertTrue(tpv.equals(tpv))
assertTrue(tpv1.equals(tpv2))
assertTrue(tpv2.equals(tpv1))
assertEquals(tpv1, tpv2)
assertTrue(day.equals(day))
assertTrue(day1.equals(day2))
assertEquals(MonthConstants.FEBRUARY, d1.getMonth())
assertEquals(1078099199999L, d1.getLastMillisecond(cal))
assertEquals(MonthConstants.MARCH, d2.getMonth())
assertEquals(1078099200000L, d2.getFirstMillisecond(cal))
assertEquals(MonthConstants.FEBRUARY, d1.getMonth())
assertEquals(1078091999999L, d1.getLastMillisecond(cal))
assertEquals(MonthConstants.MARCH, d2.getMonth())
assertEquals(1078092000000L, d2.getFirstMillisecond(cal))
assertNull(previous)
assertEquals(2, next.getDayOfMonth())
assertEquals(30, previous.getDayOfMonth())
assertNull(next)
assertEquals(37256, d.getSerialDate().toSerial())
assertEquals(d1, d2)
assertTrue(d1.equals(d2))
assertEquals(h1, h2)
assertFalse(d instanceof Cloneable)
assertEquals(2, d.getSerialIndex())
assertEquals(36631, d.getSerialIndex())
assertEquals(5094000000L, d.getFirstMillisecond())
assertEquals(-621187200000L, d.getFirstMillisecond(cal))
assertTrue(pass)
assertEquals(1007164800000L, d.getFirstMillisecond(calendar))
assertTrue(pass)
assertEquals(82799999L, d.getLastMillisecond())
assertEquals(-628358400001L, d.getLastMillisecond(cal))
assertTrue(pass)
assertEquals(989017199999L, d.getLastMillisecond(calendar))
assertTrue(pass)
assertEquals(2000, d.getYear())
assertEquals(12, d.getMonth())
assertEquals(26, d.getDayOfMonth())
assertNull(d.next())
assertEquals(cal.getTime(), d.getStart())
assertEquals(cal.getTime(), d.getEnd())
assertEquals(42, seriesValue)
assertEquals(10, cloneValue)
assertEquals("Test Series", series.getKey())
assertEquals("Clone Series", clone.getKey())
assertEquals(1, value)
assertTrue(s1.equals(s2))
assertFalse(s1.equals(s2))
assertTrue(s1.equals(s2))
assertFalse(s1.equals(s2))
assertTrue(s1.equals(s2))
assertFalse(s1.equals(s2))
assertTrue(s1.equals(s2))
assertFalse(s1.equals(s2))
assertTrue(s1.equals(s2))
assertEquals(0, tpv.getItemCount())
assertEquals(1, tpv.getItemCount())
assertEquals(tpv, listener.getLastEvent().getSource())
assertTrue(pass)
assertEquals(-1, s.getMinStartIndex())
assertEquals(0, s.getMinStartIndex())
assertEquals(0, s.getMinStartIndex())
assertEquals(2, s.getMinStartIndex())
assertEquals(-1, s.getMaxStartIndex())
assertEquals(0, s.getMaxStartIndex())
assertEquals(1, s.getMaxStartIndex())
assertEquals(1, s.getMaxStartIndex())
assertEquals(-1, s.getMinMiddleIndex())
assertEquals(0, s.getMinMiddleIndex())
assertEquals(0, s.getMinMiddleIndex())
assertEquals(2, s.getMinMiddleIndex())
assertEquals(-1, s.getMaxMiddleIndex())
assertEquals(0, s.getMaxMiddleIndex())
assertEquals(1, s.getMaxMiddleIndex())
assertEquals(1, s.getMaxMiddleIndex())
assertEquals(1, s.getMaxMiddleIndex())
assertEquals(-1, s.getMinEndIndex())
assertEquals(0, s.getMinEndIndex())
assertEquals(0, s.getMinEndIndex())
assertEquals(2, s.getMinEndIndex())
assertEquals(-1, s.getMaxEndIndex())
assertEquals(0, s.getMaxEndIndex())
assertEquals(1, s.getMaxEndIndex())
assertEquals(1, s.getMaxEndIndex())
assertEquals(new Year(2006), item1.getPeriod())
assertTrue(item1.equals(item2))
assertTrue(item2.equals(item1))
assertFalse(item1.equals(item2))
assertTrue(item1.equals(item2))
assertFalse(item1.equals(item2))
assertTrue(item1.equals(item2))
assertFalse(item1.equals(item2))
assertTrue(item1.equals(item2))
assertFalse(item1.equals(item2))
assertTrue(item1.equals(item2))
assertFalse(item1.equals(item2))
assertTrue(item1.equals(item2))
assertTrue(item1 != item2)
assertTrue(item1.getClass() == item2.getClass())
assertTrue(item1.equals(item2))
assertEquals(item1, item2)
assertTrue(i1.equals(i2))
assertEquals(h1, h2)
assertEquals(c1, c2)
assertFalse(c1.equals(c2))
assertTrue(c1.equals(c2))
assertFalse(c1.equals(c2))
assertTrue(c1.equals(c2))
assertFalse(c1.equals(c2))
assertTrue(c1.equals(c2))
assertTrue(c1 != c2)
assertTrue(c1.getClass() == c2.getClass())
assertTrue(c1.equals(c2))
assertFalse(c1.equals(c2))
assertEquals(c1, c2)
assertTrue(c1.equals(c2))
assertEquals(h1, h2)
assertTrue(c1.getSeries(2).equals(s4))
assertTrue(c1.getSeries(0).equals(s2))
assertEquals(2, c1.getSeriesCount())
assertTrue(c1.getSeries(2).equals(s4))
assertTrue(c1.getSeries(0).equals(s2))
assertEquals(2, c1.getSeriesCount())
assertNull(this.lastEvent)
assertEquals(0, c1.getSeriesCount())
assertNotNull(this.lastEvent)
assertTrue(s1.equals(s2))
assertFalse(s1.equals(s2))
assertTrue(s1.equals(s2))
assertFalse(s1.equals(s2))
assertTrue(s2.equals(s1))
assertFalse(s1.equals(s2))
assertTrue(s2.equals(s1))
assertFalse(s1.equals(s2))
assertTrue(s2.equals(s1))
assertTrue(s1.equals(s2))
assertEquals(h1, h2)
assertTrue(s1 != s2)
assertTrue(s1.getClass() == s2.getClass())
assertTrue(s1.equals(s2))
assertEquals(s1, s2)
assertEquals(0, s1.indexOf(new Year(2006)))
assertEquals(1, s1.indexOf(new Year(2010)))
assertEquals(2, s1.indexOf(new Year(2011)))
assertEquals(3, s1.getItemCount())
assertEquals(new Year(2011), s1.getPeriod(1))
assertEquals(new Year(2011), s1.getPeriod(0))
assertEquals(3, s1.getItemCount())
assertEquals(2, s1.getItemCount())
assertEquals(new Year(2010), s1.getPeriod(1))
assertTrue(pass)
assertEquals(Integer.MAX_VALUE, s1.getMaximumItemCount())
assertEquals(2, s1.getMaximumItemCount())
assertEquals(new Year(2007), s1.getPeriod(0))
assertEquals(new Year(2008), s1.getPeriod(1))
assertEquals(new Year(2007), s1.getPeriod(0))
assertEquals(new Year(2008), s1.getPeriod(1))
assertNull(this.lastEvent)
assertTrue(s1.isEmpty())
assertFalse(s1.isEmpty())
assertNotNull(this.lastEvent)
assertTrue(s1.isEmpty())
assertEquals(i1, i2)
assertFalse(i1.equals(i2))
assertTrue(i1.equals(i2))
assertFalse(i1.equals(i2))
assertTrue(i1.equals(i2))
assertFalse(i1.equals(i2))
assertTrue(i1.equals(i2))
assertFalse(i1.equals(i2))
assertTrue(i1.equals(i2))
assertFalse(i1 instanceof Cloneable)
assertEquals(i1, i2)
assertTrue(i1.equals(i2))
assertEquals(h1, h2)
assertEquals(m1, m2)
assertTrue(m1.equals(m2))
assertEquals(h1, h2)
assertFalse(m instanceof Cloneable)
assertEquals(20L, fm.getFirstMillisecond())
assertTrue(TimePeriodAnchor.START.equals(TimePeriodAnchor.START))
assertTrue(TimePeriodAnchor.MIDDLE.equals(TimePeriodAnchor.MIDDLE))
assertTrue(TimePeriodAnchor.END.equals(TimePeriodAnchor.END))
assertTrue(a1 == a2)
assertTrue(year.equals(year))
assertTrue(year1.equals(year2))
assertFalse(year1.equals(year2))
assertTrue(year1.equals(year2))
assertEquals(2001, y1.getYear())
assertEquals(1009843199999L, y1.getLastMillisecond(cal))
assertEquals(2002, y2.getYear())
assertEquals(1009843200000L, y2.getFirstMillisecond(cal))
assertEquals(2001, y1.getYear())
assertEquals(1009871999999L, y1.getLastMillisecond(cal))
assertEquals(2002, y2.getYear())
assertEquals(1009872000000L, y2.getFirstMillisecond(cal))
assertNull(previous)
assertEquals(1901, next.getYear())
assertEquals(9998, previous.getYear())
assertNull(next)
assertEquals(2000, year.getYear())
assertEquals(2001, year.getYear())
assertEquals(99, year.getYear())
assertEquals(y1, y2)
assertFalse(y instanceof Cloneable)
assertTrue(y1.equals(y2))
assertEquals(h1, h2)
assertEquals(-3600000L, y.getFirstMillisecond())
assertEquals(-631123200000L, y.getFirstMillisecond(cal))
assertTrue(pass)
assertEquals(978307200000L, y.getFirstMillisecond(calendar))
assertTrue(pass)
assertEquals(31532399999L, y.getLastMillisecond())
assertEquals(-599587200001L, y.getLastMillisecond(cal))
assertTrue(pass)
assertEquals(1009843199999L, y.getLastMillisecond(calendar))
assertTrue(pass)
assertEquals(2000L, y.getSerialIndex())
assertEquals(2001, y.getYear())
assertNull(y.next())
assertEquals(cal.getTime(), y.getStart())
assertEquals(cal.getTime(), y.getEnd())
assertTrue(b1)
assertTrue(c1.getSeries(2).equals(s4))
assertTrue(c1.getSeries(0).equals(s2))
assertEquals(2, c1.getSeriesCount())
assertTrue(result[0] == -1)
assertTrue(result[1] == -1)
assertTrue(result[0] == -1)
assertTrue(result[1] == 0)
assertTrue(result[0] == 0)
assertTrue(result[1] == 0)
assertTrue(result[0] == 0)
assertTrue(result[1] == -1)
assertTrue(result[0] == 0)
assertTrue(result[1] == 1)
assertTrue(result[0] == 1)
assertTrue(result[1] == 1)
assertTrue(result[0] == 1)
assertTrue(result[1] == -1)
assertTrue(result[0] == -1)
assertTrue(result[1] == 0)
assertTrue(result[0] == 0)
assertTrue(result[1] == 0)
assertTrue(result[0] == 0)
assertTrue(result[1] == 1)
assertEquals(c1, c2)
assertEquals(-1, dataset.indexOf(s1))
assertEquals(-1, dataset.indexOf(s2))
assertEquals(0, dataset.indexOf(s1))
assertEquals(-1, dataset.indexOf(s2))
assertEquals(0, dataset.indexOf(s1))
assertEquals(1, dataset.indexOf(s2))
assertEquals(-1, dataset.indexOf(s1))
assertEquals(0, dataset.indexOf(s2))
assertEquals(0, dataset.indexOf(s2b))
assertNull(r)
assertNull(r)
assertTrue(c1 != c2)
assertTrue(c1.getClass() == c2.getClass())
assertTrue(c1.equals(c2))
assertFalse(c1.equals(c2))
assertTrue(c1.equals(c2))
assertNull(dataset.getRangeBounds(false))
assertNull(dataset.getRangeBounds(true))
assertNull(dataset.getRangeBounds(false))
assertNull(dataset.getRangeBounds(true))
assertEquals(new Range(1.0, 1.0), dataset.getRangeBounds(false))
assertEquals(new Range(1.0, 1.0), dataset.getRangeBounds(true))
assertEquals(new Range(-1.0, 1.0), dataset.getRangeBounds(false))
assertEquals(new Range(-1.0, 1.0), dataset.getRangeBounds(true))
assertEquals(new Range(-1.0, 1.0), dataset.getRangeBounds(false))
assertEquals(new Range(-1.0, 1.0), dataset.getRangeBounds(true))
assertEquals(new Range(-1.0, 1.0), dataset.getRangeBounds(false))
assertEquals(new Range(-1.0, 1.0), dataset.getRangeBounds(true))
assertEquals(new Range(-1.0, 5.0), dataset.getRangeBounds(false))
assertEquals(new Range(-1.0, 5.0), dataset.getRangeBounds(true))
assertNull(dataset.getRangeBounds(false))
assertNull(dataset.getRangeBounds(true))
assertNull(dataset.getRangeBounds(false))
assertNull(dataset.getRangeBounds(true))
assertEquals(new Range(100.0, 100.0), dataset.getRangeBounds(false))
assertEquals(new Range(100.0, 100.0), dataset.getRangeBounds(true))
assertNull(collection.getRangeBounds(Collections.EMPTY_LIST, range, true))
assertEquals(new Range(10.0, 10.0), collection.getRangeBounds(Arrays.asList("S1"), range, true))
assertEquals(new Range(10.0, 10.0), collection.getRangeBounds(Arrays.asList("S1"), range, true))
assertNull(collection.getRangeBounds(Arrays.asList("S1"), range, true))
assertEquals(7, maverage.getItemCount())
assertTrue(month.equals(month))
assertTrue(m1.equals(m2))
assertEquals(MonthConstants.FEBRUARY, m1.getMonth())
assertEquals(951868799999L, m1.getLastMillisecond(cal))
assertEquals(MonthConstants.MARCH, m2.getMonth())
assertEquals(951868800000L, m2.getFirstMillisecond(cal))
assertEquals(MonthConstants.FEBRUARY, m1.getMonth())
assertEquals(951821999999L, m1.getLastMillisecond(cal))
assertEquals(MonthConstants.MARCH, m2.getMonth())
assertEquals(951822000000L, m2.getFirstMillisecond(cal))
assertNull(previous)
assertEquals(this.feb1900, next)
assertEquals(this.nov9999, previous)
assertNull(next)
assertEquals(1, month.getMonth())
assertEquals(1990, month.getYear().getYear())
assertEquals(2, month.getMonth())
assertEquals(1991, month.getYear().getYear())
assertEquals(3, month.getMonth())
assertEquals(1993, month.getYear().getYear())
assertEquals(m1, m2)
assertTrue(m1.equals(m2))
assertEquals(h1, h2)
assertFalse(m instanceof Cloneable)
assertEquals(5094000000L, m.getFirstMillisecond())
assertEquals(-628444800000L, m.getFirstMillisecond(cal))
assertTrue(pass)
assertEquals(978307200000L, m.getFirstMillisecond(calendar))
assertTrue(pass)
assertEquals(7772399999L, m.getLastMillisecond())
assertEquals(-626025600001L, m.getLastMillisecond(cal))
assertTrue(pass)
assertEquals(986083199999L, m.getLastMillisecond(calendar))
assertTrue(pass)
assertEquals(24001L, m.getSerialIndex())
assertEquals(22801L, m.getSerialIndex())
assertEquals(new Year(2001), m.getYear())
assertEquals(1, m.getMonth())
assertNull(m.next())
assertEquals(cal.getTime(), m.getStart())
assertEquals(cal.getTime(), m.getEnd())
assertTrue(minute.equals(minute))
assertTrue(minute1.equals(minute2))
assertEquals(54, m1.getMinute())
assertEquals(1016729699999L, m1.getLastMillisecond(cal))
assertEquals(55, m2.getMinute())
assertEquals(1016729700000L, m2.getFirstMillisecond(cal))
assertEquals(54, m1.getMinute())
assertEquals(1016700899999L, m1.getLastMillisecond(cal))
assertEquals(55, m2.getMinute())
assertEquals(1016700900000L, m2.getFirstMillisecond(cal))
assertEquals(m1, m2)
assertTrue(m1.equals(m2))
assertEquals(h1, h2)
assertFalse(m instanceof Cloneable)
assertEquals(1143902580000L, m.getFirstMillisecond())
assertEquals(-623289660000L, m.getFirstMillisecond(cal))
assertTrue(pass)
assertEquals(955766400000L, m.getFirstMillisecond(calendar))
assertTrue(pass)
assertEquals(119999L, m.getLastMillisecond())
assertEquals(-614962680001L, m.getLastMillisecond(cal))
assertTrue(pass)
assertEquals(987889559999L, m.getLastMillisecond(calendar))
assertTrue(pass)
assertEquals(52597501L, m.getSerialIndex())
assertEquals(2941L, m.getSerialIndex())
assertEquals(2000, m.getHour().getYear())
assertEquals(12, m.getHour().getMonth())
assertEquals(12, m.getHour().getDayOfMonth())
assertEquals(1, m.getHour().getHour())
assertEquals(31, m.getMinute())
assertNull(m.next())
assertEquals(cal.getTime(), m.getStart())
assertEquals(cal.getTime(), m.getEnd())
assertEquals(m2, new Minute(59, 9, 15, 4, 2000))
assertTrue(r1.equals(r2))
assertTrue(r2.equals(r1))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertEquals(r1, r2)
assertFalse(r1 instanceof Cloneable)
assertEquals(new Date(10L), r.getLowerDate())
assertEquals(new Date(20L), r.getUpperDate())
assertEquals(42, seriesValue)
assertEquals(10, cloneValue)
assertEquals("Test Series", series.getKey())
assertEquals("Clone Series", clone.getKey())
assertTrue(s1.equals(s2))
assertFalse(s1.equals(s2))
assertTrue(s1.equals(s2))
assertEquals(1, value)
assertNull(value1)
assertEquals(102000, value2)
assertEquals(5, this.seriesA.getItemCount())
assertNull(value)
assertTrue(this.gotSeriesChangeEvent)
assertEquals(2, s1.getItemCount())
assertEquals(null, s1.getValue(new Year(2001)))
assertFalse(this.gotSeriesChangeEvent)
assertEquals(2, s1.getItemCount())
assertEquals(new Year(2011), s1.getTimePeriod(0))
assertEquals(new Year(2012), s1.getTimePeriod(1))
assertTrue(s1.equals(s2))
assertTrue(s1.equals(s2))
assertTrue(pass)
assertTrue(pass)
assertTrue(s1.getItemCount() == 5)
assertTrue(s1.getItemCount() == 3)
assertTrue(item.getPeriod().equals(new Year(2002)))
assertEquals(1, s1.getItemCount())
assertEquals(2, s1.getItemCount())
assertEquals(2, s1.getItemCount())
assertEquals(2, s1.getItemCount())
assertEquals(2, s1.getItemCount())
assertEquals(Year.class, s1.getTimePeriodClass())
assertTrue(pass)
assertNull(overwritten)
assertEquals(20.09, overwritten.getValue())
assertEquals(1.0, ts.getValue(new Year(2009)))
assertEquals(1.0, ts.getValue(new Year(2009)))
assertNull(overwritten)
assertEquals(20.10, ts.getValue(new Year(2010)))
assertEquals(20.10, ts.getValue(new Year(2010)))
assertEquals(1, ts.getItemCount())
assertTrue(s1 != s2)
assertTrue(s1.getClass() == s2.getClass())
assertTrue(s1.equals(s2))
assertFalse(s1.equals(s2))
assertEquals(-1, series.getIndex(new Month(1, 2003)))
assertEquals(0, series.getIndex(new Month(1, 2003)))
assertEquals(-1, series.getIndex(new Month(12, 2002)))
assertEquals(-2, series.getIndex(new Month(2, 2003)))
assertEquals(-1, series.getIndex(new Month(12, 2002)))
assertEquals(0, series.getIndex(new Month(1, 2003)))
assertEquals(-2, series.getIndex(new Month(2, 2003)))
assertEquals(1, series.getIndex(new Month(3, 2003)))
assertEquals(-3, series.getIndex(new Month(4, 2003)))
assertTrue(pass)
assertEquals(new Year(2006), item.getPeriod())
assertTrue(pass)
assertTrue(pass)
assertNull(series.getDataItem(new Year(2006)))
assertTrue(pass)
assertEquals(Long.MAX_VALUE, series.getMaximumItemAge())
assertEquals(Integer.MAX_VALUE, series.getMaximumItemCount())
assertEquals(0, series.getItemCount())
assertFalse(this.gotSeriesChangeEvent)
assertEquals(1, series.getItemCount())
assertFalse(this.gotSeriesChangeEvent)
assertEquals(2, series.getItemCount())
assertEquals(0, series.getIndex(new Year(1999)))
assertFalse(this.gotSeriesChangeEvent)
assertEquals(1, series.getItemCount())
assertEquals(0, series.getIndex(new Year(2001)))
assertTrue(this.gotSeriesChangeEvent)
assertEquals(Long.MAX_VALUE, series.getMaximumItemAge())
assertEquals(Integer.MAX_VALUE, series.getMaximumItemCount())
assertEquals(0, series.getItemCount())
assertFalse(this.gotSeriesChangeEvent)
assertEquals(1, series.getItemCount())
assertFalse(this.gotSeriesChangeEvent)
assertEquals(0, series.getItemCount())
assertTrue(this.gotSeriesChangeEvent)
assertEquals(2, series.getItemCount())
assertEquals(2, series.getItemCount())
assertEquals(2, series.getItemCount())
assertFalse(this.gotSeriesChangeEvent)
assertEquals(1, series.getItemCount())
assertTrue(this.gotSeriesChangeEvent)
assertTrue(pass)
assertEquals(3, s1.getItemCount())
assertEquals(3, s1.getItemCount())
assertEquals(s1, s2)
assertEquals(s1.hashCode(), s2.hashCode())
assertEquals(s1, s2)
assertEquals(s1.hashCode(), s2.hashCode())
assertEquals(s1, s2)
assertEquals(s1.hashCode(), s2.hashCode())
assertEquals(s1, s2)
assertEquals(s1.hashCode(), s2.hashCode())
assertEquals(s1, s2)
assertEquals(s1.hashCode(), s2.hashCode())
assertTrue(pass)
assertTrue(Double.isNaN(s1.getMinY()))
assertTrue(Double.isNaN(ts.getMinY()))
assertTrue(Double.isNaN(ts.getMinY()))
assertTrue(Double.isNaN(ts.getMinY()))
assertTrue(Double.isNaN(s1.getMaxY()))
assertTrue(Double.isNaN(ts.getMaxY()))
assertTrue(Double.isNaN(ts.getMaxY()))
assertTrue(Double.isNaN(ts.getMaxY()))
assertEquals(2, s1.getItemCount())
assertEquals(0, s1.getItemCount())
assertTrue(Double.isNaN(s1.getMinY()))
assertTrue(Double.isNaN(s1.getMaxY()))
assertEquals(2, s1.getItemCount())
assertTrue(item.equals(series.getDataItem(0)))
assertFalse(item.equals(series.getDataItem(0)))
assertEquals("S1", s1.getKey())
assertEquals("OK", s1.getKey())
assertNull(ts.findValueRange())
assertEquals(new Range(1.0, 1.0), ts.findValueRange())
assertEquals(new Range(1.0, 2.0), ts.findValueRange())
assertEquals(new Range(1.0, 2.0), ts.findValueRange())
assertEquals(new Range(1.0, 2.0), ts.findValueRange())
assertNull(ts.findValueRange())
assertTrue(ts.findValueRange().isNaNRange())
assertNull(ts.findValueRange(range, TimePeriodAnchor.START, tzone))
assertNull(ts.findValueRange(range, TimePeriodAnchor.MIDDLE, tzone))
assertNull(ts.findValueRange(range, TimePeriodAnchor.END, tzone))
assertTrue(ts.findValueRange(range, TimePeriodAnchor.START, tzone).isNaNRange())
assertEquals(new Range(5.0, 5.0), ts.findValueRange(range, TimePeriodAnchor.MIDDLE, tzone))
assertEquals(new Range(5.0, 5.0), ts.findValueRange(range, TimePeriodAnchor.END, tzone))
assertEquals(new Range(6.0, 6.0), ts.findValueRange(range, TimePeriodAnchor.START, tzone))
assertEquals(new Range(5.0, 6.0), ts.findValueRange(range, TimePeriodAnchor.MIDDLE, tzone))
assertEquals(new Range(5.0, 5.0), ts.findValueRange(range, TimePeriodAnchor.END, tzone))
assertTrue(ts.findValueRange(range, TimePeriodAnchor.START, tzone).isNaNRange())
assertTrue(ts.findValueRange(range, TimePeriodAnchor.MIDDLE, tzone).isNaNRange())
assertTrue(ts.findValueRange(range, TimePeriodAnchor.END, tzone).isNaNRange())
assertNull(ts.findValueRange(range, TimePeriodAnchor.START, tzone))
assertNull(ts.findValueRange(range, TimePeriodAnchor.MIDDLE, tzone))
assertNull(ts.findValueRange(range, TimePeriodAnchor.END, tzone))
assertEquals(new Range(2.0, 99.0), ts.findValueRange(range, TimePeriodAnchor.START, tzone))
assertEquals(new Range(1.0, 99.0), ts.findValueRange(range, TimePeriodAnchor.MIDDLE, tzone))
assertEquals(new Range(1.0, 99.0), ts.findValueRange(range, TimePeriodAnchor.END, tzone))
assertEquals(new Range(2.0, 99.0), ts.findValueRange(range, TimePeriodAnchor.START, tzone))
assertEquals(new Range(1.0, 99.0), ts.findValueRange(range, TimePeriodAnchor.MIDDLE, tzone))
assertEquals(new Range(1.0, 99.0), ts.findValueRange(range, TimePeriodAnchor.END, tzone))
assertTrue(exception.getMessage().contains("week"))
assertTrue(exception2.getMessage().contains("week"))
assertTrue(exception3.getMessage().contains("week"))
assertTrue(exception2.getMessage().contains("week"))
assertTrue(w1.equals(w2))
assertTrue(w2.equals(w1))
assertFalse(w1.equals(w2))
assertTrue(w1.equals(w2))
assertFalse(w1.equals(w2))
assertTrue(w1.equals(w2))
assertNull(previous)
assertEquals(this.w2Y1900, next)
assertEquals(this.w51Y9999, previous)
assertNull(next)
assertEquals(w1, w2)
assertTrue(w1.equals(w2))
assertEquals(h1, h2)
assertFalse(w instanceof Cloneable)
assertEquals(1104710400000L, w1.getFirstMillisecond(c1))
assertEquals(1105315199999L, w1.getLastMillisecond(c1))
assertEquals(1104706800000L, w1.getFirstMillisecond(c2))
assertEquals(1105311599999L, w1.getLastMillisecond(c2))
assertEquals(1104037200000L, w1.getFirstMillisecond(c3))
assertEquals(1104641999999L, w1.getLastMillisecond(c3))
assertEquals(1104105600000L, w1.getFirstMillisecond(c1))
assertEquals(1104710399999L, w1.getLastMillisecond(c1))
assertEquals(1104102000000L, w1.getFirstMillisecond(c2))
assertEquals(1104706799999L, w1.getLastMillisecond(c2))
assertEquals(1135486800000L, w1.getFirstMillisecond(c3))
assertEquals(1136091599999L, w1.getLastMillisecond(c3))
assertEquals(946800000L, w.getFirstMillisecond())
assertTrue(pass)
assertEquals(978307200000L, w.getFirstMillisecond(calendar))
assertTrue(pass)
assertEquals(18485999999L, w.getLastMillisecond())
assertTrue(pass)
assertEquals(1009756799999L, w.getLastMillisecond(calendar))
assertTrue(pass)
assertEquals(106001L, w.getSerialIndex())
assertEquals(100701L, w.getSerialIndex())
assertEquals(new Year(2000), w.getYear())
assertEquals(13, w.getWeek())
assertNull(w.next())
assertEquals(cal.getTime(), w.getStart())
assertEquals(cal.getTime(), w.getEnd())
assertEquals(Calendar.MONDAY, cal.getFirstDayOfWeek())
assertEquals(34, w.getWeek())
assertEquals(Calendar.SUNDAY, cal.getFirstDayOfWeek())
assertEquals(35, w.getWeek())
assertEquals(34, w.getWeek())
assertTrue(pass)
assertTrue(pass)
assertEquals(1, dataset.getSeriesCount())
assertEquals(0, dataset.getSeriesCount())
assertEquals(1, dataset.getSeriesCount())
assertTrue(c1.equals(c2))
assertFalse(c1.equals(c2))
assertTrue(c1.equals(c2))
assertFalse(c1.equals(c2))
assertTrue(c1.equals(c2))
assertEquals(c1, c2)
assertEquals("Series 1", c1.getSeries(0).getKey())
assertTrue(pass)
assertTrue(pass)
assertNull(r)
assertNull(r)
assertEquals(DomainOrder.NONE, DomainOrder.NONE)
assertEquals(DomainOrder.ASCENDING, DomainOrder.ASCENDING)
assertEquals(DomainOrder.DESCENDING, DomainOrder.DESCENDING)
assertFalse(DomainOrder.NONE.equals(DomainOrder.ASCENDING))
assertFalse(DomainOrder.NONE.equals(DomainOrder.DESCENDING))
assertFalse(DomainOrder.NONE.equals(null))
assertFalse(DomainOrder.ASCENDING.equals(DomainOrder.NONE))
assertFalse(DomainOrder.ASCENDING.equals(DomainOrder.DESCENDING))
assertFalse(DomainOrder.ASCENDING.equals(null))
assertFalse(DomainOrder.DESCENDING.equals(DomainOrder.NONE))
assertFalse(DomainOrder.DESCENDING.equals(DomainOrder.ASCENDING))
assertFalse(DomainOrder.DESCENDING.equals(null))
assertTrue(d1.equals(d2))
assertEquals(h1, h2)
assertSame(d1, d2)
assertTrue(Double.isNaN(Math.min(1.0, Double.NaN)))
assertTrue(Double.isNaN(Math.max(1.0, Double.NaN)))
assertNull(r)
assertNull(r)
assertNull(r)
assertNull(r)
assertNull(r)
assertNull(r)
assertNull(r)
assertEquals(1.0, minimum)
assertEquals(3.0, maximum)
assertEquals(1.0, min1)
assertEquals(100.0, min2)
assertEquals(6.0, max1)
assertEquals(105.0, maximum)
assertTrue(min.doubleValue() < 100.1)
assertTrue(max.doubleValue() > 101.0)
assertTrue(n.doubleValue() > 101.0)
assertTrue(dataset.getRowCount() == 3)
assertTrue(dataset.getColumnCount() == 2)
assertTrue(pass)
assertTrue(dataset == null)
assertTrue(max.equals(answer))
assertTrue(r == null)
assertTrue(r == null)
assertEquals(r, new Range(0.0, 0.0))
assertTrue(DatasetUtils.isEmptyOrNull(dataset))
assertTrue(DatasetUtils.isEmptyOrNull(dataset))
assertTrue(DatasetUtils.isEmptyOrNull(dataset))
assertFalse(DatasetUtils.isEmptyOrNull(dataset))
assertTrue(DatasetUtils.isEmptyOrNull(dataset))
assertEquals(0, d2.getItemCount())
assertEquals(3, d2.getItemCount())
assertEquals("Item 1", d2.getKey(0))
assertEquals("Item 2", d2.getKey(1))
assertEquals("Item 3", d2.getKey(2))
assertEquals(3, d2.getItemCount())
assertEquals("Item 2", d2.getKey(0))
assertEquals("Item 3", d2.getKey(1))
assertEquals("Other", d2.getKey(2))
assertEquals(2.0, d2.getValue("Other"))
assertEquals(1, dataset.getSeriesCount())
assertEquals("S1", dataset.getSeriesKey(0))
assertEquals(2, dataset.getItemCount(0))
assertNull(min)
assertNull(max)
assertTrue(pass)
assertTrue(pass)
assertTrue(pass)
assertNull(r)
assertNull(r)
assertNull(r)
assertNull(r)
assertEquals(new Range(5.0, 5.0), r)
assertEquals(new Range(5.0, 6.0), r)
assertEquals(new Range(5.0, 6.0), r)
assertEquals(new Range(5.0, 6.0), r)
assertEquals(new Range(5.0, 15.0), r)
assertEquals(new Range(5.0, 15.0), r)
assertEquals(new Range(5.0, 150.0), r)
assertNull(DatasetUtils.iterateToFindRangeBounds(dataset, visibleSeriesKeys, xRange, false))
assertEquals(new Range(5.0, 5.0), DatasetUtils.iterateToFindRangeBounds(dataset, visibleSeriesKeys, xRange, false))
assertEquals(new Range(1.0, 9.0), DatasetUtils.iterateToFindRangeBounds(dataset, visibleSeriesKeys, xRange, true))
assertNull(DatasetUtils.iterateToFindRangeBounds(dataset, visibleSeriesKeys, false))
assertEquals(new Range(1.0, 1.0), DatasetUtils.iterateToFindRangeBounds(dataset, visibleSeriesKeys, false))
assertEquals(new Range(0.5, 1.5), DatasetUtils.iterateToFindRangeBounds(dataset, visibleSeriesKeys, true))
assertNull(DatasetUtils.iterateToFindRangeBounds(dataset, visibleSeriesKeys, true))
assertEquals(new Range(1.0, 1.0), DatasetUtils.iterateToFindRangeBounds(dataset, visibleSeriesKeys, true))
assertEquals(new Range(1.0, 3.0), DatasetUtils.iterateToFindRangeBounds(dataset, visibleSeriesKeys, true))
assertEquals(new Range(1.0, 3.0), DatasetUtils.iterateToFindRangeBounds(dataset, visibleSeriesKeys, true))
assertEquals(new Range(-2.0, 3.0), DatasetUtils.iterateToFindRangeBounds(dataset, visibleSeriesKeys, true))
assertEquals(new Range(1.0, 3.0), DatasetUtils.iterateRangeBounds(d))
assertEquals(new Range(2.0, 3.0), DatasetUtils.iterateRangeBounds(d))
assertEquals(new Range(2.0, 4.0), DatasetUtils.iterateRangeBounds(d))
assertEquals(new Range(2.0, 3.0), DatasetUtils.iterateRangeBounds(d))
assertNull(DatasetUtils.iterateRangeBounds(d))
assertEquals(new Range(1.0, 1.0), DatasetUtils.iterateRangeBounds(d))
assertEquals(new Range(1.0, 1.0), DatasetUtils.iterateRangeBounds(d))
assertEquals(new Range(1.0, 1.0), DatasetUtils.iterateRangeBounds(d))
assertEquals(new Range(2.0, 4.0), DatasetUtils.iterateRangeBounds(d))
assertTrue(Double.isNaN(DatasetUtils.findYValue(dataset, 0, 100.0)))
assertTrue(Double.isNaN(DatasetUtils.findYValue(dataset, 0, 0.0)))
assertTrue(Double.isNaN(DatasetUtils.findYValue(dataset, 0, 2.0)))
assertTrue(Double.isNaN(DatasetUtils.findYValue(dataset, 0, 0.0)))
assertTrue(Double.isNaN(DatasetUtils.findYValue(dataset, 0, 3.0)))
assertTrue(Double.isNaN(DatasetUtils.findYValue(dataset, 0, 100.0)))
assertTrue(Double.isNaN(DatasetUtils.findYValue(dataset, 0, 0.0)))
assertTrue(Double.isNaN(DatasetUtils.findYValue(dataset, 0, 2.0)))
assertTrue(Double.isNaN(DatasetUtils.findYValue(dataset, 0, -0.5)))
assertTrue(Double.isNaN(DatasetUtils.findYValue(dataset, 0, 5.0)))
assertTrue(Double.isNaN(DatasetUtils.findYValue(dataset, 0, 100.0)))
assertTrue(Double.isNaN(DatasetUtils.findYValue(dataset, 0, 0.0)))
assertTrue(Double.isNaN(DatasetUtils.findYValue(dataset, 0, 2.0)))
assertTrue(Double.isNaN(DatasetUtils.findYValue(dataset, 0, 0.0)))
assertTrue(Double.isNaN(DatasetUtils.findYValue(dataset, 0, 2.0)))
assertTrue(Double.isNaN(DatasetUtils.findYValue(dataset, 0, 0.0)))
assertTrue(Double.isNaN(DatasetUtils.findYValue(dataset, 0, 3.0)))
assertNull(this.lastEvent)
assertEquals(1, d.getItemCount())
assertNotNull(this.lastEvent)
assertEquals(0, d.getItemCount())
assertEquals("A", d.getKey(0))
assertEquals("B", d.getKey(1))
assertTrue(pass)
assertTrue(pass)
assertEquals(0, d.getIndex("A"))
assertEquals(1, d.getIndex("B"))
assertEquals(-1, d.getIndex("XX"))
assertTrue(pass)
assertTrue(d1 != d2)
assertTrue(d1.getClass() == d2.getClass())
assertTrue(d1.equals(d2))
assertEquals(d1, d2)
assertEquals(1.0, d.getValue(0))
assertEquals(g1, g2)
assertTrue(d1 != d2)
assertTrue(d1.getClass() == d2.getClass())
assertTrue(d1.equals(d2))
assertEquals(d1, d2)
assertTrue(d1 != d2)
assertTrue(d1.getClass() == d2.getClass())
assertTrue(d1.equals(d2))
assertEquals(d1, d2)
assertTrue(d1.equals(d2))
assertTrue(d2.equals(d1))
assertFalse(d1.equals(d2))
assertFalse(d1.equals(d2))
assertTrue(d1 != d2)
assertTrue(d1.getClass() == d2.getClass())
assertTrue(d1.equals(d2))
assertTrue(d1.equals(d2))
assertFalse(d1.equals(d2))
assertTrue(d1.equals(d2))
assertEquals(d1, d2)
assertEquals(10, d.getXSampleCount())
assertEquals(5, d.getYSampleCount())
assertNull(this.lastEvent)
assertNotNull(this.lastEvent)
assertEquals(d1, d2)
assertFalse(d1.equals(d2))
assertTrue(d1.equals(d2))
assertFalse(d1.equals(d2))
assertTrue(d1.equals(d2))
assertFalse(d1.equals(d2))
assertTrue(d1.equals(d2))
assertFalse(d1.equals(d2))
assertTrue(d1.equals(d2))
assertFalse(d1.equals(d2))
assertTrue(d1.equals(d2))
assertFalse(d1.equals(d2))
assertTrue(d1.equals(d2))
assertFalse(d1.equals(d2))
assertTrue(d1.equals(d2))
assertFalse(d1.equals(d2))
assertTrue(d1.equals(d2))
assertFalse(d1.equals(d2))
assertTrue(d1.equals(d2))
assertFalse(d1.equals(d2))
assertTrue(d1.equals(d2))
assertTrue(d1 != d2)
assertTrue(d1.getClass() == d2.getClass())
assertTrue(d1.equals(d2))
assertFalse(d1.equals(d2))
assertTrue(d1.equals(d2))
assertEquals(d1, d2)
assertEquals("s1", s1.getKey())
assertNull(s1.getDescription())
assertTrue(s1.getAllowDuplicateXValues())
assertTrue(s1.getAutoSort())
assertEquals(0, s1.getItemCount())
assertEquals(Integer.MAX_VALUE, s1.getMaximumItemCount())
assertTrue(pass)
assertTrue(s1.equals(s2))
assertTrue(s2.equals(s1))
assertNotEquals(s1, s2)
assertTrue(s1.equals(s2))
assertNotEquals(s1, s2)
assertTrue(s1.equals(s2))
assertNotEquals(s1, s2)
assertTrue(s1.equals(s2))
assertNotEquals(s1, s2)
assertTrue(s1.equals(s2))
assertNotEquals(s1, s2)
assertTrue(s1.equals(s2))
assertNotEquals(s1, s2)
assertTrue(s1.equals(s2))
assertTrue(s1 != s2)
assertTrue(s1.getClass() == s2.getClass())
assertTrue(s1.equals(s2))
assertEquals(s1, s2)
assertEquals(s1, s2)
assertEquals(s1.hashCode(), s2.hashCode())
assertEquals(s1, s2)
assertEquals(s1.hashCode(), s2.hashCode())
assertEquals(s1, s2)
assertEquals(s1.hashCode(), s2.hashCode())
assertEquals(s1, s2)
assertEquals(s1.hashCode(), s2.hashCode())
assertEquals(s1, s2)
assertEquals(s1.hashCode(), s2.hashCode())
assertEquals("G1", m1.getGroup("K1"))
assertEquals("G2", m1.getGroup("K2"))
assertEquals("G1", m1.getGroup("K2"))
assertTrue(pass)
assertEquals(1, m1.getGroupCount())
assertEquals(2, m1.getGroupCount())
assertEquals(2, m1.getGroupCount())
assertEquals(3, m1.getGroupCount())
assertEquals(2, m1.getGroupCount())
assertEquals(0, m1.getKeyCount("Default Group"))
assertEquals(1, m1.getKeyCount("G1"))
assertEquals(0, m1.getKeyCount("G1"))
assertEquals(1, m1.getKeyCount("Default Group"))
assertEquals(3, m1.getKeyCount("Default Group"))
assertEquals(2, m1.getKeyCount("G2"))
assertEquals(2, m1.getKeyCount("G1"))
assertEquals(0, m1.getKeyCount("G2"))
assertEquals(0, m1.getGroupIndex("Default Group"))
assertEquals(-1, m1.getGroupIndex("G3"))
assertEquals(1, m1.getGroupIndex("G3"))
assertEquals(2, m1.getGroupIndex("G1"))
assertEquals(3, m1.getGroupIndex("G2"))
assertEquals("Default Group", m1.getGroup("K1"))
assertEquals("G1", m1.getGroup("K1"))
assertEquals("G2", m1.getGroup("K1"))
assertEquals("Default Group", m1.getGroup("K1"))
assertTrue(pass)
assertTrue(m1.equals(m2))
assertTrue(m2.equals(m1))
assertFalse(m1.equals(m2))
assertTrue(m1.equals(m2))
assertTrue(m1 != m2)
assertTrue(m1.getClass() == m2.getClass())
assertTrue(m1.equals(m2))
assertFalse(m1.equals(m2))
assertTrue(m1.equals(m2))
assertEquals(m1, m2)
assertTrue(b1.equals(b2))
assertTrue(b2.equals(b1))
assertFalse(b1.equals(b2))
assertTrue(b1.equals(b2))
assertFalse(b1.equals(b2))
assertTrue(b1.equals(b2))
assertFalse(b1.equals(b2))
assertTrue(b1.equals(b2))
assertFalse(b1.equals(b2))
assertTrue(b1.equals(b2))
assertFalse(b1.equals(b2))
assertTrue(b1.equals(b2))
assertFalse(b1 instanceof Cloneable)
assertEquals(b1, b2)
assertTrue(b1.equals(b2))
assertTrue(b2.equals(b2))
assertFalse(b1.equals(b2))
assertTrue(b1.equals(b2))
assertFalse(b1.equals(b2))
assertTrue(b1.equals(b2))
assertFalse(b1.equals(b2))
assertTrue(b1.equals(b2))
assertFalse(b1.equals(b2))
assertTrue(b1.equals(b2))
assertFalse(b1.equals(b2))
assertTrue(b1.equals(b2))
assertFalse(b1.equals(b2))
assertTrue(b1.equals(b2))
assertFalse(b1.equals(b2))
assertTrue(b1.equals(b2))
assertTrue(b1 != b2)
assertTrue(b1.getClass() == b2.getClass())
assertTrue(b1.equals(b2))
assertEquals(b1, b2)
assertTrue(b1.equals(b2))
assertTrue(b2.equals(b2))
assertFalse(b1.equals(b2))
assertTrue(b1.equals(b2))
assertFalse(b1.equals(b2))
assertTrue(b1.equals(b2))
assertFalse(b1.equals(b2))
assertTrue(b1.equals(b2))
assertTrue(b1 != b2)
assertTrue(b1.getClass() == b2.getClass())
assertTrue(b1.equals(b2))
assertFalse(b1.equals(b2))
assertTrue(b1.equals(b2))
assertEquals(b1, b2)
assertTrue(c1.equals(c2))
assertTrue(c2.equals(c1))
assertFalse(c1.equals(c2))
assertTrue(c1.equals(c2))
assertFalse(c1.equals(c2))
assertTrue(c1.equals(c2))
assertFalse(c1.equals(c2))
assertTrue(c1.equals(c2))
assertFalse(c1.equals(c2))
assertTrue(c1.equals(c2))
assertFalse(f1 instanceof Cloneable)
assertEquals(f1, f2)
assertTrue(f1.equals(f2))
assertTrue(f2.equals(f1))
assertFalse(f1.equals(f2))
assertTrue(f1.equals(f2))
assertFalse(f1.equals(f2))
assertTrue(f1.equals(f2))
assertFalse(f1 instanceof Cloneable)
assertEquals(f1, f2)
assertTrue(b1.equals(b2))
assertTrue(b2.equals(b2))
assertFalse(b1.equals(b2))
assertTrue(b1.equals(b2))
assertFalse(b1.equals(b2))
assertTrue(b1.equals(b2))
assertFalse(b1.equals(b2))
assertTrue(b1.equals(b2))
assertFalse(b1 instanceof Cloneable)
assertEquals(b1, b2)
assertTrue(c1.equals(c2))
assertTrue(c2.equals(c2))
assertFalse(c1.equals(c2))
assertTrue(c1.equals(c2))
assertFalse(c1.equals(c2))
assertTrue(c1.equals(c2))
assertTrue(c1 != c2)
assertTrue(c1.getClass() == c2.getClass())
assertTrue(c1.equals(c2))
assertEquals(c1, c2)
assertTrue(b1.equals(b2))
assertTrue(b2.equals(b2))
assertFalse(b1.equals(b2))
assertTrue(b1.equals(b2))
assertFalse(b1.equals(b2))
assertTrue(b1.equals(b2))
assertFalse(b1.equals(b2))
assertTrue(b1.equals(b2))
assertFalse(b1.equals(b2))
assertTrue(b1.equals(b2))
assertFalse(b1.equals(b2))
assertTrue(b1.equals(b2))
assertFalse(b1.equals(b2))
assertTrue(b1.equals(b2))
assertFalse(b1.equals(b2))
assertTrue(b1.equals(b2))
assertFalse(b1.equals(b2))
assertTrue(b1.equals(b2))
assertFalse(b1.equals(b2))
assertTrue(b1.equals(b2))
assertTrue(b1 != b2)
assertTrue(b1.getClass() == b2.getClass())
assertTrue(b1.equals(b2))
assertFalse(b1.equals(b2))
assertTrue(b1.equals(b2))
assertEquals(b1, b2)
assertTrue(b1.equals(b2))
assertTrue(b2.equals(b2))
assertFalse(b1.equals(b2))
assertTrue(b1.equals(b2))
assertFalse(b1.equals(b2))
assertTrue(b1.equals(b2))
assertTrue(b1 != b2)
assertTrue(b1.getClass() == b2.getClass())
assertTrue(b1.equals(b2))
assertEquals(b1, b2)
assertTrue(b1.equals(b2))
assertTrue(b2.equals(b2))
assertFalse(b1.equals(b2))
assertTrue(b1.equals(b2))
assertFalse(b1.equals(b2))
assertTrue(b1.equals(b2))
assertFalse(b1 instanceof Cloneable)
assertEquals(b1, b2)
assertTrue(f1.equals(f2))
assertTrue(f2.equals(f1))
assertFalse(f1.equals(f2))
assertTrue(f1.equals(f2))
assertFalse(f1.equals(f2))
assertTrue(f1.equals(f2))
assertFalse(f1.equals(f2))
assertTrue(f1.equals(f2))
assertFalse(f1.equals(f2))
assertTrue(f1.equals(f2))
assertFalse(f1 instanceof Cloneable)
assertEquals(f1, f2)
assertTrue(n1.equals(n2))
assertTrue(n2.equals(n1))
assertTrue(n1 != n2)
assertTrue(n1.getClass() == n2.getClass())
assertTrue(n1.equals(n2))
assertTrue(n1.equals(n2))
assertTrue(n1.equals(n2))
assertFalse(n1.equals(n2))
assertTrue(n1.equals(n2))
assertFalse(n1.equals(n2))
assertTrue(n1.equals(n2))
assertFalse(n1.equals(n2))
assertTrue(n1.equals(n2))
assertFalse(n1.equals(n2))
assertTrue(n1.equals(n2))
assertFalse(n1.equals(n2))
assertTrue(n1.equals(n2))
assertFalse(n1.equals(n2))
assertTrue(n1.equals(n2))
assertFalse(n1.equals(n2))
assertTrue(n1.equals(n2))
assertTrue(n1.equals(n2))
assertTrue(n2.equals(n1))
assertTrue(n1 != n2)
assertTrue(n1.getClass() == n2.getClass())
assertTrue(n1.equals(n2))
assertTrue(n1.equals(n2))
assertTrue(n1.equals(n2))
assertTrue(n2.equals(n1))
assertTrue(n1 != n2)
assertTrue(n1.getClass() == n2.getClass())
assertTrue(n1.equals(n2))
assertTrue(n1.equals(n2))
assertTrue(n1.equals(n2))
assertTrue(n2.equals(n1))
assertFalse(n1.equals(n2))
assertTrue(n1.equals(n2))
assertTrue(n1 != n2)
assertTrue(n1.getClass() == n2.getClass())
assertTrue(n1.equals(n2))
assertTrue(n1.equals(n2))
assertTrue(n1.equals(n2))
assertTrue(n2.equals(n1))
assertTrue(n1 != n2)
assertTrue(n1.getClass() == n2.getClass())
assertTrue(n1.equals(n2))
assertTrue(n1.equals(n2))
assertTrue(n1.equals(n2))
assertTrue(n2.equals(n1))
assertTrue(n1 != n2)
assertTrue(n1.getClass() == n2.getClass())
assertTrue(n1.equals(n2))
assertTrue(n1.equals(n2))
assertTrue(n1.equals(n2))
assertTrue(n2.equals(n1))
assertTrue(n1 != n2)
assertTrue(n1.getClass() == n2.getClass())
assertTrue(n1.equals(n2))
assertTrue(n1.equals(n2))
assertTrue(n1.equals(n2))
assertTrue(n2.equals(n1))
assertTrue(n1 != n2)
assertTrue(n1.getClass() == n2.getClass())
assertTrue(n1.equals(n2))
assertTrue(n1.equals(n2))
assertTrue(n1.equals(n2))
assertTrue(n2.equals(n1))
assertTrue(n1 != n2)
assertTrue(n1.getClass() == n2.getClass())
assertTrue(n1.equals(n2))
assertTrue(n1.equals(n2))
assertEquals(i1, i2)
assertFalse(i1.equals(i2))
assertEquals(i1, i2)
assertFalse(i1.equals(i2))
assertEquals(i1, i2)
assertFalse(i1.equals(i2))
assertNotSame(i1, i2)
assertSame(i1.getClass(), i2.getClass())
assertEquals(i1, i2)
assertFalse(i1.equals(i2))
assertEquals(i1, i2)
assertFalse(i1.equals(i2))
assertEquals(i1, i2)
assertEquals(i1, i2)
assertEquals(i1, i2)
assertEquals(i2, i2.getPlotInfo().getOwner())
assertEquals(true, l.flag)
assertSame(tt2, tt)
assertSame(url2, url1)
assertEquals(true, l.flag)
assertTrue(tt2 == tt)
assertTrue(url2 == url1)
assertEquals(chart1, chart2)
assertEquals(chart2, chart1)
assertFalse(chart1.equals(chart2))
assertEquals(chart1, chart2)
assertFalse(chart1.equals(chart2))
assertEquals(chart1, chart2)
assertFalse(chart1.equals(chart2))
assertEquals(chart1, chart2)
assertFalse(chart1.equals(chart2))
assertEquals(chart1, chart2)
assertFalse(chart1.equals(chart2))
assertEquals(chart1, chart2)
assertFalse(chart1.equals(chart2))
assertEquals(chart1, chart2)
assertFalse(chart1.equals(chart2))
assertEquals(chart1, chart2)
assertFalse(chart1.equals(chart2))
assertEquals(chart1, chart2)
assertFalse(chart1.equals(chart2))
assertEquals(chart1, chart2)
assertFalse(chart1.equals(chart2))
assertEquals(chart1, chart2)
assertFalse(chart1.equals(chart2))
assertEquals(chart1, chart2)
assertFalse(chart1.equals(chart2))
assertFalse(chart2.equals(chart1))
assertEquals(1, count)
assertTrue(t instanceof LegendTitle)
assertEquals(c1, c2)
assertSame(lt2.getSources()[0], c2.getPlot())
assertEquals(c1, c2)
assertEquals(c1, c2)
assertEquals(c1, c2)
assertEquals(t0, chart.getSubtitle(0))
assertEquals(t1, chart.getSubtitle(2))
assertEquals(1, chart.getSubtitleCount())
assertEquals(1, chart.getSubtitleCount())
assertNotNull(this.lastChartChangeEvent)
assertNotNull(this.lastChartChangeEvent)
assertNotNull(this.lastChartChangeEvent)
assertNotNull(this.lastChartChangeEvent)
assertNull(this.lastChartChangeEvent)
assertEquals(title, ChartFactory.createPieChart(title, new DefaultPieDataset()).getTitle().getText())
assertTrue(m1.equals(m2))
assertTrue(m2.equals(m1))
assertFalse(m1.equals(m2))
assertTrue(m1.equals(m2))
assertFalse(m1.equals(m2))
assertTrue(m1.equals(m2))
assertFalse(m1.equals(m2))
assertTrue(m1.equals(m2))
assertFalse(m1.equals(m2))
assertTrue(m1.equals(m2))
assertFalse(m1.equals(m2))
assertTrue(m1.equals(m2))
assertFalse(m1.equals(m2))
assertTrue(m1.equals(m2))
assertFalse(m1.equals(m2))
assertTrue(m1.equals(m2))
assertFalse(m1.equals(m2))
assertTrue(m1.equals(m2))
assertFalse(m1.equals(m2))
assertTrue(m1.equals(m2))
assertFalse(m1.equals(m2))
assertTrue(m1.equals(m2))
assertFalse(m1.equals(m2))
assertTrue(m1.equals(m2))
assertFalse(m1.equals(m2))
assertTrue(m1.equals(m2))
assertFalse(m1.equals(m2))
assertTrue(m1.equals(m2))
assertTrue(m1 != m2)
assertTrue(m1.getClass() == m2.getClass())
assertTrue(m1.equals(m2))
assertEquals(m1, m2)
assertEquals(m, this.lastEvent.getMarker())
assertEquals(m1, m2)
assertEquals(Color.RED, m.getPaint())
assertEquals(stroke, m.getStroke())
assertEquals(Color.BLUE, m.getOutlinePaint())
assertEquals(outlineStroke, m.getOutlineStroke())
assertEquals(2, items.getItemCount())
assertEquals("A", item1.getLabel())
assertEquals("B", item2.getLabel())
assertEquals(4, items.getItemCount())
assertEquals("A", item1.getLabel())
assertEquals("B", item2.getLabel())
assertEquals("C", item3.getLabel())
assertEquals("D", item4.getLabel())
assertTrue(plot1.equals(plot2))
assertTrue(plot2.equals(plot1))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertTrue(p1 != p2)
assertTrue(p1.getClass() == p2.getClass())
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertTrue(p1 != p2)
assertTrue(p1.getClass() == p2.getClass())
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertEquals(p1, p2)
assertTrue(i1.equals(i2))
assertFalse(i1.equals(i2))
assertTrue(i1.equals(i2))
assertFalse(i1.equals(i2))
assertTrue(i1.equals(i2))
assertEquals(p1, p2)
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertEquals(p1, p2)
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertTrue(i1.equals(i2))
assertEquals(h1, h2)
assertTrue(i1 != i2)
assertTrue(i1.getClass() == i2.getClass())
assertTrue(i1.equals(i2))
assertTrue(i1.hasListener(l1))
assertFalse(i2.hasListener(l1))
assertEquals(i1, i2)
assertEquals(i1, i2)
assertTrue(c1.equals(c2))
assertFalse(c1.equals(c2))
assertTrue(c1.equals(c2))
assertTrue(c1 != c2)
assertTrue(c1.getClass() == c2.getClass())
assertTrue(c1.equals(c2))
assertTrue(c1.hasListener(l1))
assertFalse(c2.hasListener(l1))
assertEquals(c1, c2)
assertTrue(c1.hasListener(l1))
assertFalse(c2.hasListener(l1))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertTrue(p1.equals(p2))
assertEquals(h1, h2)
assertTrue(p1 != p2)
assertTrue(p1.getClass() == p2.getClass())
assertTrue(p1.equals(p2))
assertEquals(p1, p2)
assertNotNull(this.lastEvent)
assertNull(this.lastEvent)
assertNotNull(this.lastEvent)
assertNotNull(this.lastEvent)
assertNull(this.lastEvent)
assertNotNull(this.lastEvent)
assertNotNull(this.lastEvent)
assertNull(this.lastEvent)
assertNotNull(this.lastEvent)
assertNotNull(this.lastEvent)
assertNull(this.lastEvent)
assertNotNull(this.lastEvent)
assertNotNull(this.lastEvent)
assertNotNull(this.lastEvent)
assertNotNull(this.lastEvent)
assertNull(this.lastEvent)
assertTrue(f1.equals(f2))
assertFalse(f1.equals(f2))
assertTrue(f1.equals(f2))
assertFalse(f1.equals(f2))
assertTrue(f1.equals(f2))
assertFalse(f1.equals(f2))
assertTrue(f1.equals(f2))
assertFalse(f1.equals(f2))
assertTrue(f1.equals(f2))
assertFalse(f1.equals(f2))
assertTrue(f1.equals(f2))
assertTrue(f1.equals(f2))
assertEquals(h1, h2)
assertTrue(f1 != f2)
assertTrue(f1.getClass() == f2.getClass())
assertTrue(f1.equals(f2))
assertTrue(f1.hasListener(l1))
assertFalse(f2.hasListener(l1))
assertEquals(f1, f2)
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertTrue(a1.equals(a2))
assertEquals(h1, h2)
assertTrue(a1 != a2)
assertTrue(a1.getClass() == a2.getClass())
assertTrue(a1.equals(a2))
assertTrue(a1.hasListener(l1))
assertFalse(a2.hasListener(l1))
assertEquals(a1, a2)
assertEquals(a1, a2)
assertTrue(c1.equals(c2))
assertFalse(c1.equals(c2))
assertTrue(c1.equals(c2))
assertFalse(c1.equals(c2))
assertFalse(c1.equals(c2))
assertTrue(c1.equals(c2))
assertFalse(c1.equals(c2))
assertTrue(c1.equals(c2))
assertFalse(c1.equals(c2))
assertTrue(c1.equals(c2))
assertTrue(c1.equals(c2))
assertEquals(h1, h2)
assertTrue(c1 != c2)
assertTrue(c1.getClass() == c2.getClass())
assertTrue(c1.equals(c2))
assertTrue(c1 != c2)
assertTrue(c1.getClass() == c2.getClass())
assertTrue(c1.equals(c2))
assertTrue(c1.hasListener(l1))
assertFalse(c2.hasListener(l1))
assertEquals(c1, c2)
assertEquals(c1, c2)
assertTrue(s1.equals(s2))
assertFalse(s1.equals(s2))
assertTrue(s1.equals(s2))
assertFalse(s1.equals(s2))
assertTrue(s1.equals(s2))
assertFalse(s1.equals(s2))
assertTrue(s1.equals(s2))
assertFalse(s1.equals(s2))
assertTrue(s1.equals(s2))
assertFalse(s1.equals(s2))
assertTrue(s1.equals(s2))
assertFalse(s1.equals(s2))
assertTrue(s1.equals(s2))
assertFalse(s1.equals(s2))
assertTrue(s1.equals(s2))
assertFalse(s1.equals(s2))
assertTrue(s1.equals(s2))
assertFalse(s1.equals(s2))
assertTrue(s1.equals(s2))
assertFalse(s1.equals(s2))
assertTrue(s1.equals(s2))
assertFalse(s1.equals(s2))
assertTrue(s1.equals(s2))
assertFalse(s1.equals(s2))
assertTrue(s1.equals(s2))
assertFalse(s1.equals(s2))
assertTrue(s1.equals(s2))
assertFalse(s1.equals(s2))
assertTrue(s1.equals(s2))
assertFalse(s1.equals(s2))
assertTrue(s1.equals(s2))
assertFalse(s1.equals(s2))
assertTrue(s1.equals(s2))
assertTrue(s1.equals(s2))
assertEquals(h1, h2)
assertTrue(s1 != s2)
assertTrue(s1.getClass() == s2.getClass())
assertTrue(s1.equals(s2))
assertTrue(s1 != s2)
assertTrue(s1.getClass() == s2.getClass())
assertTrue(s1.equals(s2))
assertTrue(s1.hasListener(l1))
assertFalse(s2.hasListener(l1))
assertEquals(s1, s2)
assertEquals(s1, s2)
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertTrue(r1.equals(r2))
assertEquals(h1, h2)
assertTrue(r1 != r2)
assertTrue(r1.getClass() == r2.getClass())
assertTrue(r1.equals(r2))
assertTrue(r1.hasListener(l1))
assertFalse(r2.hasListener(l1))
assertEquals(r1, r2)
assertTrue(i1.equals(i2))
assertFalse(i1.equals(i2))
assertTrue(i1.equals(i2))
assertFalse(i1.equals(i2))
assertTrue(i1.equals(i2))
assertFalse(i1.equals(i2))
assertTrue(i1.equals(i2))
assertFalse(i1.equals(i2))
assertTrue(i1.equals(i2))
assertFalse(i1.equals(i2))
assertTrue(i1.equals(i2))
assertFalse(i1.equals(i2))
assertTrue(i1.equals(i2))
assertFalse(i1.equals(i2))
assertTrue(i1.equals(i2))
assertFalse(i1.equals(i2))
assertTrue(i1.equals(i2))
assertFalse(i1.equals(i2))
assertTrue(i1.equals(i2))
assertFalse(i1.equals(i2))
assertTrue(i1.equals(i2))
assertFalse(i1.equals(i2))
assertTrue(i1.equals(i2))
assertFalse(i1.equals(i2))
assertTrue(i1.equals(i2))
assertFalse(i1.equals(i2))
assertTrue(i1.equals(i2))
assertFalse(i1.equals(i2))
assertTrue(i1.equals(i2))
assertTrue(i1.equals(i2))
assertEquals(h1, h2)
assertTrue(i1 != i2)
assertTrue(i1.getClass() == i2.getClass())
assertTrue(i1.equals(i2))
assertTrue(i1.hasListener(l1))
assertFalse(i2.hasListener(l1))
assertEquals(i1, i2)
assertTrue(f1.equals(f2))
assertFalse(f1.equals(f2))
assertTrue(f1.equals(f2))
assertFalse(f1.equals(f2))
assertTrue(f1.equals(f2))
assertFalse(f1.equals(f2))
assertTrue(f1.equals(f2))
assertFalse(f1.equals(f2))
assertTrue(f1.equals(f2))
assertFalse(f1.equals(f2))
assertTrue(f1.equals(f2))
assertFalse(f1.equals(f2))
assertTrue(f1.equals(f2))
assertFalse(f1.equals(f2))
assertTrue(f1.equals(f2))
assertFalse(f1.equals(f2))
assertTrue(f1.equals(f2))
assertTrue(f1.equals(f2))
assertEquals(h1, h2)
assertTrue(f1 != f2)
assertTrue(f1.getClass() == f2.getClass())
assertTrue(f1.equals(f2))
assertTrue(f1.hasListener(l1))
assertFalse(f2.hasListener(l1))
assertEquals(f1, f2)
assertTrue(b1.equals(b2))
assertFalse(b1.equals(b2))
assertTrue(b1.equals(b2))
assertFalse(b1.equals(b2))
assertTrue(b1.equals(b2))
assertFalse(b1.equals(b2))
assertTrue(b1.equals(b2))
assertTrue(b1.equals(b2))
assertEquals(h1, h2)
assertTrue(b1 != b2)
assertTrue(b1.getClass() == b2.getClass())
assertTrue(b1.equals(b2))
assertTrue(b1 != b2)
assertTrue(b1.getClass() == b2.getClass())
assertTrue(b1.equals(b2))
assertTrue(b1.hasListener(l1))
assertFalse(b2.hasListener(l1))
assertEquals(b1, b2)
assertEquals(b1, b2)
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertEquals(p1, p2)
assertTrue(p1 != p2)
assertTrue(p1.getClass() == p2.getClass())
assertTrue(p1.equals(p2))
assertTrue(plots.get(0) == plot1)
assertEquals(1, plots.size())
assertTrue(plot1.equals(plot2))
assertTrue(plot1 != plot2)
assertTrue(plot1.getClass() == plot2.getClass())
assertTrue(plot1.equals(plot2))
assertEquals(plot1, plot2)
assertEquals(1, this.events.size())
assertTrue(this.events.isEmpty())
assertTrue(plot1.equals(plot2))
assertTrue(plot2.equals(plot1))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertTrue(p1 != p2)
assertTrue(p1.getClass() == p2.getClass())
assertTrue(p1.equals(p2))
assertEquals(p1, p2)
assertEquals(Color.GRAY, m.getPaint())
assertEquals(Color.BLUE, m.getPaint())
assertEquals(m, this.lastEvent.getMarker())
assertEquals(new BasicStroke(0.5f), m.getStroke())
assertEquals(new BasicStroke(1.1f), m.getStroke())
assertEquals(m, this.lastEvent.getMarker())
assertEquals(Color.GRAY, m.getOutlinePaint())
assertEquals(Color.YELLOW, m.getOutlinePaint())
assertEquals(m, this.lastEvent.getMarker())
assertEquals(null, m.getOutlinePaint())
assertEquals(new BasicStroke(0.5f), m.getOutlineStroke())
assertEquals(new BasicStroke(1.1f), m.getOutlineStroke())
assertEquals(m, this.lastEvent.getMarker())
assertEquals(null, m.getOutlineStroke())
assertEquals(m, this.lastEvent.getMarker())
assertEquals(null, m.getLabel())
assertEquals("XYZ", m.getLabel())
assertEquals(m, this.lastEvent.getMarker())
assertEquals(null, m.getLabel())
assertEquals(new Font("SansSerif", Font.PLAIN, 9), m.getLabelFont())
assertEquals(new Font("SansSerif", Font.BOLD, 10), m.getLabelFont())
assertEquals(m, this.lastEvent.getMarker())
assertEquals(Color.BLACK, m.getLabelPaint())
assertEquals(Color.RED, m.getLabelPaint())
assertEquals(m, this.lastEvent.getMarker())
assertEquals(RectangleAnchor.TOP_LEFT, m.getLabelAnchor())
assertEquals(RectangleAnchor.TOP, m.getLabelAnchor())
assertEquals(m, this.lastEvent.getMarker())
assertEquals(new RectangleInsets(3, 3, 3, 3), m.getLabelOffset())
assertEquals(new RectangleInsets(1, 2, 3, 4), m.getLabelOffset())
assertEquals(m, this.lastEvent.getMarker())
assertEquals(LengthAdjustmentType.CONTRACT, m.getLabelOffsetType())
assertEquals(LengthAdjustmentType.EXPAND, m.getLabelOffsetType())
assertEquals(m, this.lastEvent.getMarker())
assertEquals(TextAnchor.CENTER, m.getLabelTextAnchor())
assertEquals(TextAnchor.BASELINE_LEFT, m.getLabelTextAnchor())
assertEquals(m, this.lastEvent.getMarker())
assertTrue(Arrays.asList(listeners1).contains(plot))
assertTrue(Arrays.asList(listeners2).contains(plot))
assertFalse(Arrays.asList(listeners1).contains(plot))
assertFalse(Arrays.asList(listeners2).contains(plot))
assertTrue(Arrays.asList(listeners1).contains(plot))
assertTrue(Arrays.asList(listeners2).contains(plot))
assertFalse(Arrays.asList(listeners1).contains(plot))
assertFalse(Arrays.asList(listeners2).contains(plot))
assertTrue(p1.equals(p2))
assertTrue(p2.equals(p1))
assertFalse(p1.equals(p2))
assertTrue(p2.equals(p1))
assertFalse(p1.equals(p2))
assertTrue(p2.equals(p1))
assertFalse(p1.equals(p2))
assertTrue(p2.equals(p1))
assertFalse(p1.equals(p2))
assertTrue(p2.equals(p1))
assertFalse(p1.equals(p2))
assertTrue(p2.equals(p1))
assertFalse(p1.equals(p2))
assertTrue(p2.equals(p1))
assertFalse(p1.equals(p2))
assertTrue(p2.equals(p1))
assertFalse(p1.equals(p2))
assertTrue(p2.equals(p1))
assertFalse(p1.equals(p2))
assertTrue(p2.equals(p1))
assertFalse(p1.equals(p2))
assertTrue(p2.equals(p1))
assertFalse(p1.equals(p2))
assertTrue(p2.equals(p1))
assertFalse(p1.equals(p2))
assertTrue(p2.equals(p1))
assertFalse(p1.equals(p2))
assertTrue(p2.equals(p1))
assertFalse(p1.equals(p2))
assertTrue(p2.equals(p1))
assertFalse(p1.equals(p2))
assertTrue(p2.equals(p1))
assertTrue(p1 != p2)
assertTrue(p1.getClass() == p2.getClass())
assertTrue(p1.equals(p2))
assertTrue(p1.equals(p2))
assertTrue(p1.equals(p2))
assertTrue(r1.equals(r2))
assertTrue(r2.equals(r1))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertTrue(r1 != r2)
assertTrue(r1.getClass() == r2.getClass())
assertTrue(r1.equals(r2))
assertEquals(r1, r2)
assertTrue(m1.equals(m2))
assertTrue(m2.equals(m1))
assertFalse(m1.equals(m2))
assertTrue(m1.equals(m2))
assertFalse(m1.equals(m2))
assertTrue(m1.equals(m2))
assertFalse(m1.equals(m2))
assertTrue(m1.equals(m2))
assertTrue(m1 != m2)
assertTrue(m1.getClass() == m2.getClass())
assertTrue(m1.equals(m2))
assertEquals(m1, m2)
assertEquals(m, this.lastEvent.getMarker())
assertEquals(m, this.lastEvent.getMarker())
assertTrue(p1.equals(p2))
assertTrue(p2.equals(p1))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1 instanceof Cloneable)
assertTrue(b)
assertTrue(plot1.equals(plot2))
assertTrue(plot2.equals(plot1))
assertTrue(plots.get(0) == plot1)
assertTrue(plot1 != plot2)
assertTrue(plot1.getClass() == plot2.getClass())
assertTrue(plot1.equals(plot2))
assertEquals(plot1, plot2)
assertEquals(1, this.events.size())
assertTrue(this.events.isEmpty())
assertEquals(0, plot.getDatasetCount())
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertEquals(p1, p2)
assertNotEquals(p1, p2)
assertEquals(p1, p2)
assertNotEquals(p1, p2)
assertEquals(p1, p2)
assertNotEquals(p1, p2)
assertEquals(p1, p2)
assertNotEquals(p1, p2)
assertEquals(p1, p2)
assertNotEquals(p1, p2)
assertTrue(p1 != p2)
assertTrue(p1.getClass() == p2.getClass())
assertTrue(p1.equals(p2))
assertTrue(p1 != p2)
assertTrue(p1.getClass() == p2.getClass())
assertTrue(p1.equals(p2))
assertTrue(p1 != p2)
assertTrue(p1.getClass() == p2.getClass())
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1 != p2)
assertTrue(p1.getClass() == p2.getClass())
assertTrue(p1.equals(p2))
assertTrue(r2.hasListener(p2))
assertTrue(p1 != p2)
assertTrue(p1.getClass() == p2.getClass())
assertTrue(p1.equals(p2))
assertTrue(p2.getQuadrantOrigin() != p)
assertTrue(p1 != p2)
assertTrue(p1.getClass() == p2.getClass())
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertTrue(p1 != p2)
assertTrue(p1.getClass() == p2.getClass())
assertTrue(p1.equals(p2))
assertTrue(r2.getPlot() == p2)
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertTrue(!failed)
assertEquals(p1, p2)
assertEquals(p1, p2)
assertEquals(chart, chart2)
assertEquals(chart, chart2)
assertEquals(p1, p2)
assertTrue(datasetA.hasListener(p2))
assertTrue(domainAxisA.hasListener(p2))
assertTrue(rangeAxisA.hasListener(p2))
assertTrue(rendererA.hasListener(p2))
assertTrue(datasetB.hasListener(p2))
assertTrue(domainAxisB.hasListener(p2))
assertTrue(rangeAxisB.hasListener(p2))
assertTrue(rendererB.hasListener(p2))
assertEquals(r0, plot.getRendererForDataset(d0))
assertEquals(r0, plot.getRendererForDataset(d1))
assertEquals(r2, plot.getRendererForDataset(d2))
assertEquals(null, plot.getRendererForDataset(d3))
assertEquals(null, plot.getRendererForDataset(null))
assertEquals(2, items.getItemCount())
assertTrue(listener.getEvent() != null)
assertEquals(x, a1)
assertTrue(a1.equals(a3))
assertEquals(x, a3)
assertTrue(listeners.contains(plot))
assertFalse(listeners.contains(plot))
assertTrue(listeners.contains(plot))
assertFalse(listeners.contains(plot))
assertFalse(plot.removeDomainMarker(new ValueMarker(0.5)))
assertFalse(plot.removeRangeMarker(new ValueMarker(0.5)))
assertEquals(xAxis, plot.getDomainAxisForDataset(0))
assertTrue(pass)
assertEquals(xAxis, plot.getDomainAxisForDataset(0))
assertEquals(xAxis2, plot.getDomainAxisForDataset(0))
assertEquals(xAxis, plot.getDomainAxisForDataset(0))
assertEquals(xAxis2, plot.getDomainAxisForDataset(0))
assertEquals(yAxis, plot.getRangeAxisForDataset(0))
assertTrue(pass)
assertEquals(yAxis, plot.getRangeAxisForDataset(0))
assertEquals(yAxis2, plot.getRangeAxisForDataset(0))
assertEquals(yAxis, plot.getRangeAxisForDataset(0))
assertEquals(yAxis2, plot.getRangeAxisForDataset(0))
assertEquals(dataset, plot.getDataset(0))
assertEquals(2, plot.getDatasetCount())
assertEquals(dataset2, plot.getDataset(99))
assertEquals(0, plot.indexOf(dataset))
assertEquals(99, plot.indexOf(dataset2))
assertEquals(xAxis, plot.getDomainAxis(0))
assertEquals(yAxis, plot.getRangeAxis(0))
assertEquals(xAxis2, plot.getDomainAxis(99))
assertEquals(yAxis2, plot.getRangeAxis(99))
assertEquals(AxisLocation.BOTTOM_OR_RIGHT, plot.getDomainAxisLocation(99))
assertEquals(AxisLocation.BOTTOM_OR_LEFT, plot.getRangeAxisLocation(99))
assertEquals(renderer, plot.getRenderer(0))
assertEquals(2, plot.getRendererCount())
assertEquals(renderer2, plot.getRenderer(20))
assertEquals(20, plot.getIndexOf(renderer2))
assertEquals(renderer, plot.getRendererForDataset(dataset2))
assertEquals(renderer2, plot.getRendererForDataset(dataset2))
assertEquals(xAxis, plot.getDomainAxisForDataset(99))
assertEquals(xAxis2, plot.getDomainAxisForDataset(99))
assertEquals(yAxis, plot.getRangeAxisForDataset(99))
assertEquals(yAxis2, plot.getRangeAxisForDataset(99))
assertTrue(plot.getDomainMarkers(99, Layer.FOREGROUND).contains(xMarker1))
assertTrue(plot.getRangeMarkers(99, Layer.FOREGROUND).contains(yMarker1))
assertEquals(null, plot.getDataRange(xAxis))
assertEquals(null, plot.getDataRange(yAxis))
assertEquals(new Range(1.0, 1.0), plot.getDataRange(xAxis))
assertEquals(new Range(2.0, 2.0), plot.getDataRange(yAxis))
assertEquals(new Range(1.0, 5.0), plot.getDataRange(xAxis))
assertEquals(new Range(2.0, 2.0), plot.getDataRange(yAxis))
assertEquals(new Range(1.0, 6.0), plot.getDataRange(xAxis))
assertEquals(new Range(2.0, 2.0), plot.getDataRange(yAxis))
assertEquals(null, plot.getDataRange(xAxis))
assertEquals(null, plot.getDataRange(yAxis))
assertEquals(new Range(1.0, 1.0), plot.getDataRange(xAxis))
assertEquals(new Range(2.0, 2.0), plot.getDataRange(yAxis))
assertEquals(new Range(1.0, 5.0), plot.getDataRange(xAxis))
assertEquals(new Range(2.0, 10.0), plot.getDataRange(yAxis))
assertEquals(new Range(1.0, 6.0), plot.getDataRange(xAxis))
assertEquals(new Range(2.0, 10.0), plot.getDataRange(yAxis))
assertEquals(new Range(1.0, 6.0), plot.getDataRange(xAxis))
assertEquals(new Range(2.0, 10.0), plot.getDataRange(yAxis))
assertTrue(plot1.equals(plot2))
assertTrue(plot1 != plot2)
assertTrue(plot1.getClass() == plot2.getClass())
assertTrue(plot1.equals(plot2))
assertEquals(plot1, plot2)
assertEquals(2, plots.size())
assertEquals(1, this.events.size())
assertTrue(this.events.isEmpty())
assertEquals(null, plot.getDomainAxis())
assertTrue(plots.get(0) == plot1)
assertTrue(plot1.equals(plot2))
assertTrue(plot2.equals(plot1))
assertTrue(plot1 != plot2)
assertTrue(plot1.getClass() == plot2.getClass())
assertTrue(plot1.equals(plot2))
assertEquals(plot1, plot2)
assertEquals(1, this.events.size())
assertTrue(this.events.isEmpty())
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertTrue(p1 != p2)
assertTrue(p1.getClass() == p2.getClass())
assertTrue(p1.equals(p2))
assertTrue(p1.getDataset() == p2.getDataset())
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertEquals(p1, p2)
assertEquals(p1, p2)
assertTrue(c1.equals(c1))
assertTrue(c2.equals(c1))
assertFalse(c1.equals(c2))
assertTrue(c1.equals(c2))
assertFalse(c1.equals(c2))
assertTrue(c1.equals(c2))
assertFalse(c1.equals(c2))
assertTrue(c1.equals(c2))
assertFalse(c1.equals(c2))
assertTrue(c1.equals(c2))
assertFalse(c1.equals(c2))
assertTrue(c1.equals(c2))
assertFalse(c1.equals(c2))
assertTrue(c1.equals(c2))
assertFalse(c1.equals(c2))
assertTrue(c1.equals(c2))
assertFalse(c1.equals(c2))
assertTrue(c1.equals(c2))
assertFalse(c1.equals(c2))
assertTrue(c1.equals(c2))
assertFalse(c1.equals(c2))
assertTrue(c1.equals(c2))
assertFalse(c1.equals(c2))
assertTrue(c1.equals(c2))
assertFalse(c1.equals(c2))
assertTrue(c1.equals(c2))
assertFalse(c1.equals(c2))
assertTrue(c1.equals(c2))
assertFalse(c1.equals(c2))
assertTrue(c1.equals(c2))
assertFalse(c1.equals(c2))
assertTrue(c1.equals(c2))
assertTrue(c1.equals(c2))
assertTrue(c1.hashCode() == c2.hashCode())
assertTrue(c1 != c2)
assertTrue(c1.getClass() == c2.getClass())
assertTrue(c1.equals(c2))
assertTrue(c1 instanceof PublicCloneable)
assertEquals(c1, c2)
assertNotNull(this.lastEvent)
assertNotNull(this.lastEvent)
assertNotNull(this.lastEvent)
assertNotNull(this.lastEvent)
assertNotNull(this.lastEvent)
assertNotNull(this.lastEvent)
assertNotNull(this.lastEvent)
assertNotNull(this.lastEvent)
assertNotNull(this.lastEvent)
assertNotNull(this.lastEvent)
assertTrue(p1.equals(p2))
assertTrue(p2.equals(p1))
assertTrue(p1 != p2)
assertTrue(p1.getClass() == p2.getClass())
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p1))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p1))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p1))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p1))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p1))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p1))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p1))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p1))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p1))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertEquals(p1, p2)
assertTrue(plot1.equals(plot2))
assertTrue(plot2.equals(plot1))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertTrue(p1 != p2)
assertTrue(p1.getClass() == p2.getClass())
assertTrue(p1.equals(p2))
assertTrue(p1 != p2)
assertTrue(p1.getClass() == p2.getClass())
assertTrue(p1.equals(p2))
assertTrue(p1.getURLGenerator() != p2.getURLGenerator())
assertTrue(p1 != p2)
assertTrue(p1.getClass() == p2.getClass())
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1 != p2)
assertTrue(p1.getClass() == p2.getClass())
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1 != p2)
assertTrue(p1.getClass() == p2.getClass())
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1 != p2)
assertTrue(p1.getClass() == p2.getClass())
assertTrue(p1.equals(p2))
assertTrue(p1.getLegendLabelURLGenerator() != p2.getLegendLabelURLGenerator())
assertEquals(p1, p2)
assertEquals(4, items.getItemCount())
assertEquals(3, items.getItemCount())
assertEquals(2, items.getItemCount())
assertEquals(2, items.getItemCount())
assertNotNull(plot.getDefaultSectionPaint())
assertTrue(pass)
assertTrue(success)
assertEquals(Color.RED, plot1.getSectionPaint("A"))
assertEquals(Color.GREEN, plot1.getSectionPaint("B"))
assertEquals(Color.BLUE, plot2.getSectionPaint("A"))
assertEquals(Color.YELLOW, plot2.getSectionPaint("B"))
assertEquals(Color.RED, plot1.getSectionOutlinePaint("A"))
assertEquals(Color.GREEN, plot1.getSectionOutlinePaint("B"))
assertEquals(Color.BLUE, plot2.getSectionOutlinePaint("A"))
assertEquals(Color.YELLOW, plot2.getSectionOutlinePaint("B"))
assertEquals(new BasicStroke(5.0f), plot1.getSectionOutlineStroke("A"))
assertEquals(new BasicStroke(6.0f), plot1.getSectionOutlineStroke("B"))
assertEquals(new BasicStroke(7.0f), plot2.getSectionOutlineStroke("A"))
assertEquals(new BasicStroke(8.0f), plot2.getSectionOutlineStroke("B"))
assertNotEquals(plot1, plot2)
assertTrue(m1.equals(m2))
assertTrue(m2.equals(m1))
assertFalse(m1.equals(m2))
assertTrue(m1.equals(m2))
assertFalse(m1.equals(m2))
assertTrue(m1.equals(m2))
assertFalse(m1.equals(m2))
assertTrue(m1.equals(m2))
assertFalse(m1.equals(m2))
assertTrue(m1.equals(m2))
assertFalse(m1.equals(m2))
assertTrue(m1.equals(m2))
assertFalse(m1.equals(m2))
assertTrue(m1.equals(m2))
assertTrue(m1 != m2)
assertTrue(m1.getClass() == m2.getClass())
assertTrue(m1.equals(m2))
assertEquals(m1, m2)
assertEquals("X", m.getKey())
assertEquals("Y", m.getKey())
assertEquals(m, this.lastEvent.getMarker())
assertEquals(false, m.getDrawAsLine())
assertEquals(true, m.getDrawAsLine())
assertEquals(m, this.lastEvent.getMarker())
assertTrue(m1.equals(m2))
assertTrue(m2.equals(m1))
assertFalse(m1.equals(m2))
assertTrue(m1.equals(m2))
assertFalse(m1 instanceof Cloneable)
assertEquals(m1, m2)
assertTrue(plot1.equals(plot2))
assertTrue(plot2.equals(plot1))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertTrue(plot2.equals(plot1))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertTrue(p1 != p2)
assertTrue(p1.getClass() == p2.getClass())
assertTrue(p1.equals(p2))
assertEquals(p1, p2)
assertTrue(p1.equals(p2))
assertTrue(p2.equals(p1))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertTrue(p1 != p2)
assertTrue(p1.getClass() == p2.getClass())
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertEquals(p1, p2)
assertEquals(2, legendItems.getItemCount())
assertEquals("S1", item1.getLabel())
assertEquals("S1", item1.getSeriesKey())
assertEquals(0, item1.getSeriesIndex())
assertEquals(dataset, item1.getDataset())
assertEquals(0, item1.getDatasetIndex())
assertEquals("S2", item2.getLabel())
assertEquals("S2", item2.getSeriesKey())
assertEquals(1, item2.getSeriesIndex())
assertEquals(dataset, item2.getDataset())
assertEquals(0, item2.getDatasetIndex())
assertTrue(plot1.equals(plot2))
assertTrue(plot2.equals(plot1))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertTrue(p1.equals(p2))
assertTrue(p2.equals(p1))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertEquals(p1, p2)
assertTrue(success)
assertTrue(p1.equals(p2))
assertTrue(p2.equals(p1))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertTrue(p1 != p2)
assertTrue(p1.getClass() == p2.getClass())
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertEquals(p1, p2)
assertEquals(RectangleInsets.ZERO_INSETS, plot.getAxisOffset())
assertTrue(plot1.equals(plot2))
assertTrue(plot2.equals(plot1))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertFalse(plot1.equals(plot2))
assertTrue(plot1.equals(plot2))
assertEquals(p1, p2)
assertNotEquals(p1, p2)
assertEquals(p1, p2)
assertNotEquals(p1, p2)
assertEquals(p1, p2)
assertNotEquals(p1, p2)
assertEquals(p1, p2)
assertNotEquals(p1, p2)
assertEquals(p1, p2)
assertNotEquals(p1, p2)
assertTrue(p1 != p2)
assertTrue(p1.getClass() == p2.getClass())
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertTrue(p1 != p2)
assertTrue(p1.getClass() == p2.getClass())
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertTrue(p1 != p2)
assertTrue(p1.getClass() == p2.getClass())
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertTrue(p1 != p2)
assertTrue(p1.getClass() == p2.getClass())
assertTrue(p1.equals(p2))
assertTrue(r2.getPlot() == p2)
assertTrue(p1.equals(p2))
assertEquals(p1, p2)
assertEquals(chart, chart2)
assertEquals(p1, p2)
assertTrue(datasetA.hasListener(p2))
assertTrue(domainAxisA.hasListener(p2))
assertTrue(rangeAxisA.hasListener(p2))
assertTrue(rendererA.hasListener(p2))
assertTrue(datasetB.hasListener(p2))
assertTrue(domainAxisB.hasListener(p2))
assertTrue(rangeAxisB.hasListener(p2))
assertTrue(rendererB.hasListener(p2))
assertTrue(listener.getEvent() != null)
assertTrue(true)
assertTrue(listeners.contains(plot))
assertFalse(listeners.contains(plot))
assertTrue(listeners.contains(plot))
assertFalse(listeners.contains(plot))
assertEquals(0, plot.getDomainAxisIndex(domainAxis1))
assertEquals(-1, plot.getDomainAxisIndex(domainAxis2))
assertEquals(1, plot.getDomainAxisIndex(domainAxis2))
assertEquals(-1, plot.getDomainAxisIndex(new CategoryAxis("X2")))
assertTrue(pass)
assertEquals(0, plot.getRangeAxisIndex(rangeAxis1))
assertEquals(-1, plot.getRangeAxisIndex(rangeAxis2))
assertEquals(1, plot.getRangeAxisIndex(rangeAxis2))
assertEquals(-1, plot.getRangeAxisIndex(new NumberAxis("Y2")))
assertTrue(pass)
assertFalse(plot.removeDomainMarker(new CategoryMarker("Category 1")))
assertFalse(plot.removeRangeMarker(new ValueMarker(0.5)))
assertEquals(xAxis, plot.getDomainAxisForDataset(0))
assertTrue(pass)
assertEquals(xAxis, plot.getDomainAxisForDataset(0))
assertEquals(xAxis2, plot.getDomainAxisForDataset(0))
assertEquals(xAxis, plot.getDomainAxisForDataset(0))
assertEquals(xAxis2, plot.getDomainAxisForDataset(0))
assertEquals(yAxis, plot.getRangeAxisForDataset(0))
assertTrue(pass)
assertEquals(yAxis, plot.getRangeAxisForDataset(0))
assertEquals(yAxis2, plot.getRangeAxisForDataset(0))
assertEquals(yAxis, plot.getRangeAxisForDataset(0))
assertEquals(yAxis2, plot.getRangeAxisForDataset(0))
assertEquals(dataset, plot.getDataset(0))
assertEquals(2, plot.getDatasetCount())
assertEquals(dataset2, plot.getDataset(99))
assertEquals(0, plot.indexOf(dataset))
assertEquals(99, plot.indexOf(dataset2))
assertEquals(xAxis, plot.getDomainAxis(0))
assertEquals(yAxis, plot.getRangeAxis(0))
assertEquals(xAxis2, plot.getDomainAxis(99))
assertEquals(yAxis2, plot.getRangeAxis(99))
assertEquals(AxisLocation.BOTTOM_OR_RIGHT, plot.getDomainAxisLocation(99))
assertEquals(AxisLocation.BOTTOM_OR_LEFT, plot.getRangeAxisLocation(99))
assertEquals(renderer, plot.getRenderer(0))
assertEquals(2, plot.getRendererCount())
assertEquals(renderer2, plot.getRenderer(20))
assertEquals(20, plot.getIndexOf(renderer2))
assertEquals(renderer, plot.getRendererForDataset(dataset2))
assertEquals(renderer2, plot.getRendererForDataset(dataset2))
assertEquals(xAxis, plot.getDomainAxisForDataset(99))
assertEquals(xAxis2, plot.getDomainAxisForDataset(99))
assertEquals(yAxis, plot.getRangeAxisForDataset(99))
assertEquals(yAxis2, plot.getRangeAxisForDataset(99))
assertTrue(plot.getDomainMarkers(99, Layer.FOREGROUND).contains(xMarker1))
assertTrue(plot.getRangeMarkers(99, Layer.FOREGROUND).contains(yMarker1))
assertNull(plot.getDataset())
assertTrue(dataset.hasListener(plot))
assertTrue(p1.equals(p2))
assertTrue(p2.equals(p1))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertTrue(p1 != p2)
assertTrue(p1.getClass() == p2.getClass())
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertEquals(p1, p2)
assertEquals(2, legendItems.getItemCount())
assertEquals("S1", item1.getLabel())
assertEquals("S1", item1.getSeriesKey())
assertEquals(0, item1.getSeriesIndex())
assertEquals(dataset, item1.getDataset())
assertEquals(0, item1.getDatasetIndex())
assertEquals("S2", item2.getLabel())
assertEquals("S2", item2.getSeriesKey())
assertEquals(1, item2.getSeriesIndex())
assertEquals(dataset, item2.getDataset())
assertEquals(0, item2.getDatasetIndex())
assertEquals(PlotOrientation.HORIZONTAL, PlotOrientation.HORIZONTAL)
assertEquals(PlotOrientation.VERTICAL, PlotOrientation.VERTICAL)
assertFalse(PlotOrientation.HORIZONTAL.equals(PlotOrientation.VERTICAL))
assertFalse(PlotOrientation.VERTICAL.equals(PlotOrientation.HORIZONTAL))
assertEquals(orientation1, orientation2)
assertEquals(true, same)
assertEquals(o1, o2)
assertEquals(o1, o2)
assertTrue(o1 != o2)
assertTrue(o1.getClass() == o2.getClass())
assertTrue(o1.equals(o2))
assertFalse(o1.equals(o2))
assertTrue(t1.equals(t2))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertTrue(t1.equals(t2))
assertTrue(t1 != t2)
assertTrue(t1.getClass() == t2.getClass())
assertTrue(t1.equals(t2))
assertEquals(" href=\"abc\"", g.generateURLFragment("abc"))
assertEquals(" href=\"images/abc.png\"", g.generateURLFragment("images/abc.png"))
assertEquals(" href=\"http://www.jfree.org/images/abc.png\"", g.generateURLFragment("http://www.jfree.org/images/abc.png"))
assertEquals(" onMouseOver=\"return overlib('abc');\"" + " onMouseOut=\"return nd();\"", g.generateToolTipFragment("abc"))
assertEquals(" onMouseOver=\"return overlib(" + "'It\\'s \\\"A\\\", 100.0');\" onMouseOut=\"return nd();\"", g.generateToolTipFragment("It\'s \"A\", 100.0"))
assertEquals("", ImageMapUtils.htmlEscape(""))
assertEquals("abc", ImageMapUtils.htmlEscape("abc"))
assertEquals("&amp;", ImageMapUtils.htmlEscape("&"))
assertEquals("&quot;", ImageMapUtils.htmlEscape("\""))
assertEquals("&lt;", ImageMapUtils.htmlEscape("<"))
assertEquals("&gt;", ImageMapUtils.htmlEscape(">"))
assertEquals("&#39;", ImageMapUtils.htmlEscape("\'"))
assertEquals("&#092;abc", ImageMapUtils.htmlEscape("\\abc"))
assertEquals("abc\n", ImageMapUtils.htmlEscape("abc\n"))
assertEquals("", ImageMapUtils.javascriptEscape(""))
assertEquals("abc", ImageMapUtils.javascriptEscape("abc"))
assertEquals("\\\'", ImageMapUtils.javascriptEscape("\'"))
assertEquals("\\\"", ImageMapUtils.javascriptEscape("\""))
assertEquals("\\\\", ImageMapUtils.javascriptEscape("\\"))
assertEquals(" onMouseOver=\"return overlib('abc');\"" + " onMouseOut=\"return nd();\"", g.generateToolTipFragment("abc"))
assertEquals(" onMouseOver=\"return overlib(" + "'It\\'s \\\"A\\\", 100.0');\" onMouseOut=\"return nd();\"", g.generateToolTipFragment("It\'s \"A\", 100.0"))
assertEquals(" title=\"abc\" alt=\"\"", g.generateToolTipFragment("abc"))
assertEquals(" title=\"Series &quot;A&quot;, 100.0\" alt=\"\"", g.generateToolTipFragment("Series \"A\", 100.0"))
assertTrue(g1.equals(g2))
assertTrue(g2.equals(g1))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertTrue(g1 != g2)
assertTrue(g1.getClass() == g2.getClass())
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertTrue(g1 != g2)
assertTrue(g1.getClass() == g2.getClass())
assertTrue(g1.equals(g2))
assertEquals(g1, g2)
assertEquals(g1, g2)
assertEquals(Color.RED, s.getDefaultPaint())
assertEquals(Color.BLACK, s.getPaint(-1.0))
assertEquals(Color.BLACK, s.getPaint(0.0))
assertEquals(Color.BLACK, s.getPaint(50.0))
assertEquals(Color.BLACK, s.getPaint(100.0))
assertEquals(Color.BLACK, s.getPaint(101.0))
assertEquals(Color.BLACK, s.getPaint(-1.0))
assertEquals(Color.BLACK, s.getPaint(0.0))
assertEquals(Color.BLUE, s.getPaint(50.0))
assertEquals(Color.BLUE, s.getPaint(100.0))
assertEquals(Color.BLACK, s.getPaint(101.0))
assertEquals(Color.BLACK, s.getPaint(-1.0))
assertEquals(Color.BLACK, s.getPaint(0.0))
assertEquals(Color.RED, s.getPaint(50.0))
assertEquals(Color.RED, s.getPaint(100.0))
assertEquals(Color.BLACK, s.getPaint(101.0))
assertEquals(Color.BLACK, s.getPaint(-1.0))
assertEquals(Color.BLACK, s.getPaint(0.0))
assertEquals(Color.GREEN, s.getPaint(25.0))
assertEquals(Color.RED, s.getPaint(50.0))
assertEquals(Color.RED, s.getPaint(100.0))
assertEquals(Color.BLACK, s.getPaint(101.0))
assertEquals(Color.BLACK, s.getPaint(-1.0))
assertEquals(Color.BLACK, s.getPaint(0.0))
assertEquals(Color.GREEN, s.getPaint(25.0))
assertEquals(Color.RED, s.getPaint(50.0))
assertEquals(Color.YELLOW, s.getPaint(75.0))
assertEquals(Color.YELLOW, s.getPaint(100.0))
assertEquals(Color.BLACK, s.getPaint(101.0))
assertTrue(r1.equals(r2))
assertTrue(r2.equals(r1))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertTrue(r1.equals(r2))
assertEquals(h1, h2)
assertTrue(r1 != r2)
assertTrue(r1.getClass() == r2.getClass())
assertTrue(r1.equals(r2))
assertTrue(r1 instanceof PublicCloneable)
assertEquals(r1, r2)
assertTrue(detector.getNotified())
assertNotNull(li)
assertNull(li)
assertEquals("R5", li.getLabel())
assertEquals(1, li.getDatasetIndex())
assertEquals(2, li.getSeriesIndex())
assertNull(r.findRangeBounds(null))
assertNull(r.findRangeBounds(dataset))
assertEquals(new Range(0.0, 1.0), r.findRangeBounds(dataset))
assertEquals(new Range(1.0, 1.0), r.findRangeBounds(dataset))
assertEquals(new Range(-2.0, 1.0), r.findRangeBounds(dataset))
assertEquals(new Range(-2.0, 1.0), r.findRangeBounds(dataset))
assertEquals(new Range(-6.0, 1.0), r.findRangeBounds(dataset))
assertEquals(new Range(-2.0, 1.0), r.findRangeBounds(dataset))
assertTrue(r1.equals(r2))
assertTrue(r2.equals(r1))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertTrue(r1.equals(r2))
assertEquals(h1, h2)
assertTrue(r1 != r2)
assertTrue(r1.getClass() == r2.getClass())
assertTrue(r1.equals(r2))
assertTrue(checkIndependence(r1, r2))
assertTrue(r1 instanceof PublicCloneable)
assertEquals(r1, r2)
assertEquals("R5", li.getLabel())
assertEquals(1, li.getDatasetIndex())
assertEquals(2, li.getSeriesIndex())
assertEquals(r1, r2)
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertTrue(r1.equals(r2))
assertEquals(h1, h2)
assertTrue(r1 != r2)
assertTrue(r1.getClass() == r2.getClass())
assertTrue(r1.equals(r2))
assertTrue(checkIndependence(r1, r2))
assertTrue(r1 instanceof PublicCloneable)
assertEquals(r1, r2)
assertNull(r.findRangeBounds(null))
assertNull(r.findRangeBounds(dataset))
assertEquals(new Range(1.0, 1.0), r.findRangeBounds(dataset))
assertEquals(new Range(1.0, 2.2), r.findRangeBounds(dataset))
assertEquals(new Range(-3.2, 2.2), r.findRangeBounds(dataset))
assertEquals(new Range(-3.2, 6.0), r.findRangeBounds(dataset))
assertEquals(new Range(-3.2, 2.2), r.findRangeBounds(dataset))
assertEquals(r1, r2)
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertTrue(r1.equals(r2))
assertEquals(h1, h2)
assertTrue(r1 != r2)
assertTrue(r1.getClass() == r2.getClass())
assertTrue(r1.equals(r2))
assertTrue(r1 instanceof PublicCloneable)
assertEquals(r1, r2)
assertEquals(r1, r2)
assertFalse(r1.equals(r2))
assertEquals(r1, r2)
assertFalse(r1.equals(r2))
assertEquals(r1, r2)
assertFalse(r1.equals(r2))
assertEquals(r1, r2)
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertTrue(r1.equals(r2))
assertEquals(h1, h2)
assertTrue(r1 != r2)
assertTrue(r1.getClass() == r2.getClass())
assertTrue(r1.equals(r2))
assertTrue(r1 instanceof PublicCloneable)
assertEquals(r1, r2)
assertTrue(success)
assertTrue(success)
assertNotNull(li)
assertNull(li)
assertEquals("R5", li.getLabel())
assertEquals(1, li.getDatasetIndex())
assertEquals(2, li.getSeriesIndex())
assertTrue(success)
assertTrue(success)
assertTrue(success)
assertTrue(success)
assertTrue(success)
assertTrue(success)
assertTrue(success)
assertTrue(r1.equals(r2))
assertTrue(r2.equals(r1))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertTrue(r1 != r2)
assertTrue(r1.getClass() == r2.getClass())
assertTrue(r1.equals(r2))
assertTrue(r1 instanceof PublicCloneable)
assertEquals(r1, r2)
assertNull(r.findRangeBounds(null))
assertNull(r.findRangeBounds(dataset))
assertEquals(new Range(0.0, 1.0), r.findRangeBounds(dataset))
assertEquals(new Range(-2.0, 1.0), r.findRangeBounds(dataset))
assertEquals(new Range(-2.0, 1.0), r.findRangeBounds(dataset))
assertEquals(new Range(-2.0, 1.0), r.findRangeBounds(dataset))
assertEquals(new Range(-2.0, 5.0), r.findRangeBounds(dataset))
assertNull(r.findRangeBounds(null))
assertEquals(r1, r2)
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertTrue(r1.equals(r2))
assertEquals(h1, h2)
assertTrue(r1 != r2)
assertTrue(r1.getClass() == r2.getClass())
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertTrue(r1 instanceof PublicCloneable)
assertEquals(r1, r2)
assertEquals(r1, r2)
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertTrue(r1 != r2)
assertTrue(r1.getClass() == r2.getClass())
assertTrue(r1.equals(r2))
assertTrue(r1 instanceof PublicCloneable)
assertEquals(r1, r2)
assertEquals("R5", li.getLabel())
assertEquals(1, li.getDatasetIndex())
assertEquals(2, li.getSeriesIndex())
assertTrue(r1.equals(r2))
assertTrue(r2.equals(r1))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertTrue(r1.equals(r2))
assertEquals(h1, h2)
assertTrue(r1 != r2)
assertTrue(r1.getClass() == r2.getClass())
assertTrue(r1.equals(r2))
assertTrue(r1 instanceof PublicCloneable)
assertEquals(r1, r2)
assertNull(r.findRangeBounds(null))
assertNull(r.findRangeBounds(dataset))
assertEquals(new Range(0.0, 1.0), r.findRangeBounds(dataset))
assertEquals(new Range(-2.0, 1.0), r.findRangeBounds(dataset))
assertEquals(new Range(-2.0, 1.0), r.findRangeBounds(dataset))
assertEquals(new Range(-2.0, 3.0), r.findRangeBounds(dataset))
assertEquals(new Range(-2.0, 3.0), r.findRangeBounds(dataset))
assertEquals(r1, r2)
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertTrue(r1.equals(r2))
assertEquals(h1, h2)
assertTrue(r1 != r2)
assertTrue(r1.getClass() == r2.getClass())
assertTrue(r1.equals(r2))
assertTrue(r1 instanceof PublicCloneable)
assertEquals(r1, r2)
assertEquals(r1, r2)
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertTrue(r1.equals(r2))
assertEquals(h1, h2)
assertTrue(r1 != r2)
assertTrue(r1.getClass() == r2.getClass())
assertTrue(r1.equals(r2))
assertTrue(checkIndependence(r1, r2))
assertTrue(r1 instanceof PublicCloneable)
assertEquals(r1, r2)
assertEquals("R5", li.getLabel())
assertEquals(1, li.getDatasetIndex())
assertEquals(2, li.getSeriesIndex())
assertNull(r.findRangeBounds(null))
assertNull(r.findRangeBounds(dataset))
assertEquals(new Range(1.0, 1.0), r.findRangeBounds(dataset))
assertEquals(new Range(-2.0, 1.0), r.findRangeBounds(dataset))
assertEquals(new Range(-2.0, 1.0), r.findRangeBounds(dataset))
assertEquals(new Range(-6.0, 1.0), r.findRangeBounds(dataset))
assertEquals(new Range(-2.0, 1.0), r.findRangeBounds(dataset))
assertEquals(r1, r2)
assertFalse(r1.equals(r2))
assertTrue(r2.equals(r1))
assertFalse(r1.equals(r2))
assertTrue(r2.equals(r1))
assertTrue(r1.equals(r2))
assertEquals(h1, h2)
assertTrue(r1 != r2)
assertTrue(r1.getClass() == r2.getClass())
assertTrue(r1.equals(r2))
assertTrue(r1 instanceof PublicCloneable)
assertEquals(r1, r2)
assertNull(r.findRangeBounds(null))
assertNull(r.findRangeBounds(dataset))
assertEquals(new Range(0.0, 1.5), r.findRangeBounds(dataset))
assertEquals(new Range(0.5, 1.5), r.findRangeBounds(dataset))
assertEquals(new Range(-2.2, 1.5), r.findRangeBounds(dataset))
assertEquals(new Range(-2.2, 1.5), r.findRangeBounds(dataset))
assertEquals(new Range(-2.2, 6.0), r.findRangeBounds(dataset))
assertEquals(new Range(-2.2, 1.5), r.findRangeBounds(dataset))
assertEquals(p1, p2)
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertTrue(p1.equals(p2))
assertEquals(h1, h2)
assertFalse(p1 instanceof Cloneable)
assertFalse(p1 instanceof PublicCloneable)
assertEquals(p1, p2)
assertEquals(r1, r2)
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertTrue(r1.equals(r2))
assertEquals(h1, h2)
assertTrue(r1 != r2)
assertTrue(r1.getClass() == r2.getClass())
assertTrue(r1.equals(r2))
assertTrue(r1 instanceof PublicCloneable)
assertEquals(r1, r2)
assertEquals("R5", li.getLabel())
assertEquals(1, li.getDatasetIndex())
assertEquals(2, li.getSeriesIndex())
assertEquals(r1, r2)
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertEquals(r1, r2)
assertNotEquals(r1, r2)
assertEquals(r1, r2)
assertNotEquals(r1, r2)
assertEquals(r1, r2)
assertNotEquals(r1, r2)
assertTrue(r1 != r2)
assertTrue(r1.getClass() == r2.getClass())
assertTrue(r1.equals(r2))
assertTrue(r1 != r2)
assertTrue(r1.getClass() == r2.getClass())
assertTrue(r1.equals(r2))
assertTrue(r1 != r2)
assertTrue(r1.getClass() == r2.getClass())
assertTrue(r1.equals(r2))
assertTrue(r1 != r2)
assertTrue(r1.getClass() == r2.getClass())
assertTrue(r1.equals(r2))
assertTrue(r1 != r2)
assertTrue(r1.getClass() == r2.getClass())
assertTrue(r1.equals(r2))
assertTrue(r1 != r2)
assertTrue(r1.getClass() == r2.getClass())
assertTrue(r1.equals(r2))
assertTrue(r1 != r2)
assertTrue(r1.getClass() == r2.getClass())
assertTrue(r1.equals(r2))
assertTrue(r1.getLegendItemLabelGenerator() != r2.getLegendItemLabelGenerator())
assertTrue(r1 != r2)
assertTrue(r1.getClass() == r2.getClass())
assertTrue(r1.equals(r2))
assertTrue(r1.getLegendItemToolTipGenerator() != r2.getLegendItemToolTipGenerator())
assertTrue(r1 != r2)
assertTrue(r1.getClass() == r2.getClass())
assertTrue(r1.equals(r2))
assertTrue(r1.getLegendItemURLGenerator() != r2.getLegendItemURLGenerator())
assertNull(r.findRangeBounds(null))
assertNull(r.findRangeBounds(dataset))
assertEquals(new Range(1.0, 1.0), r.findRangeBounds(dataset))
assertEquals(new Range(-2.0, 1.0), r.findRangeBounds(dataset))
assertEquals(new Range(-2.0, 1.0), r.findRangeBounds(dataset))
assertNotNull(r.getLegendItems())
assertEquals(0, r.getLegendItems().getItemCount())
assertEquals(0, r.getLegendItems().getItemCount())
assertEquals(1, lic.getItemCount())
assertEquals("S1", lic.get(0).getLabel())
assertEquals(r1, r2)
assertTrue(r1.equals(r2))
assertEquals(h1, h2)
assertTrue(r1 != r2)
assertTrue(r1.getClass() == r2.getClass())
assertTrue(r1.equals(r2))
assertTrue(r1 instanceof PublicCloneable)
assertEquals(r1, r2)
assertEquals(p1, p2)
assertTrue(p1.equals(p2))
assertEquals(h1, h2)
assertFalse(p1 instanceof Cloneable)
assertFalse(p1 instanceof PublicCloneable)
assertEquals(p1, p2)
assertNull(r.findRangeBounds(null))
assertNull(r.findRangeBounds(dataset))
assertEquals(new Range(0.0, 1.0), r.findRangeBounds(dataset))
assertEquals(new Range(-2.0, 1.0), r.findRangeBounds(dataset))
assertEquals(new Range(-2.0, 1.0), r.findRangeBounds(dataset))
assertEquals(new Range(-2.0, 3.0), r.findRangeBounds(dataset))
assertEquals(new Range(-2.0, 3.0), r.findRangeBounds(dataset))
assertEquals(r1, r2)
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertTrue(r1.equals(r2))
assertEquals(h1, h2)
assertTrue(r1 != r2)
assertTrue(r1.getClass() == r2.getClass())
assertTrue(r1.equals(r2))
assertTrue(r1 instanceof PublicCloneable)
assertEquals(r1, r2)
assertTrue(r1.equals(r2))
assertTrue(r2.equals(r1))
assertFalse(r1.equals(r2))
assertTrue(r2.equals(r1))
assertTrue(r1.equals(r2))
assertEquals(h1, h2)
assertTrue(r1 != r2)
assertTrue(r1.getClass() == r2.getClass())
assertTrue(r1.equals(r2))
assertTrue(r1 instanceof PublicCloneable)
assertEquals(r1, r2)
assertTrue(r.getDefaultLinesVisible())
assertFalse(r.getDefaultShapesVisible())
assertFalse(r.getDefaultLinesVisible())
assertTrue(r.getDefaultShapesVisible())
assertNull(r.findRangeBounds(null))
assertNull(r.findRangeBounds(dataset))
assertEquals(new Range(0.5, 1.5), r.findRangeBounds(dataset))
assertEquals(new Range(-2.2, 1.5), r.findRangeBounds(dataset))
assertEquals(new Range(-2.2, 1.5), r.findRangeBounds(dataset))
assertEquals(new Range(-2.2, 6.0), r.findRangeBounds(dataset))
assertEquals(new Range(-2.2, 1.5), r.findRangeBounds(dataset))
assertEquals(r1, r2)
assertFalse(r1.equals(br))
assertTrue(r1.equals(r2))
assertEquals(h1, h2)
assertTrue(r1 != r2)
assertTrue(r1.getClass() == r2.getClass())
assertTrue(r1.equals(r2))
assertTrue(r1 instanceof PublicCloneable)
assertEquals(r1, r2)
assertNull(r.findRangeBounds(null))
assertNull(r.findRangeBounds(dataset))
assertEquals(new Range(0.0, 0.9), r.findRangeBounds(dataset))
assertEquals(new Range(0.1, 0.9), r.findRangeBounds(dataset))
assertEquals(new Range(0.0, 0.7), r.findRangeBounds(dataset))
assertEquals(r1, r2)
assertTrue(r1.equals(r2))
assertEquals(h1, h2)
assertTrue(r1 != r2)
assertTrue(r1.getClass() == r2.getClass())
assertTrue(r1.equals(r2))
assertTrue(r1 instanceof PublicCloneable)
assertEquals(r1, r2)
assertEquals(AreaRendererEndType.LEVEL, AreaRendererEndType.LEVEL)
assertEquals(AreaRendererEndType.TAPER, AreaRendererEndType.TAPER)
assertEquals(AreaRendererEndType.TRUNCATE, AreaRendererEndType.TRUNCATE)
assertEquals(t1, t2)
assertEquals(true, same)
assertEquals(r1, r2)
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertTrue(r1.equals(r2))
assertEquals(h1, h2)
assertTrue(r1 != r2)
assertTrue(r1.getClass() == r2.getClass())
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertTrue(r1 instanceof PublicCloneable)
assertEquals(r1, r2)
assertEquals("S5", li.getLabel())
assertEquals(1, li.getDatasetIndex())
assertEquals(2, li.getSeriesIndex())
assertEquals(r1, r2)
assertTrue(r1.equals(r2))
assertEquals(h1, h2)
assertTrue(r1 != r2)
assertTrue(r1.getClass() == r2.getClass())
assertTrue(r1.equals(r2))
assertTrue(r1 instanceof PublicCloneable)
assertEquals(r1, r2)
assertTrue(r1.equals(r2))
assertTrue(r2.equals(r1))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertTrue(r1.equals(r2))
assertEquals(h1, h2)
assertTrue(r1 != r2)
assertTrue(r1.getClass() == r2.getClass())
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertTrue(r1 instanceof PublicCloneable)
assertEquals(r1, r2)
assertEquals(r1, r2)
assertFalse(bounds.contains(0.3))
assertTrue(bounds.contains(0.5))
assertTrue(bounds.contains(2.5))
assertFalse(bounds.contains(2.8))
assertEquals("S5", li.getLabel())
assertEquals(1, li.getDatasetIndex())
assertEquals(2, li.getSeriesIndex())
assertEquals(r1, r2)
assertEquals(r2, r1)
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertTrue(r1.equals(r2))
assertEquals(h1, h2)
assertTrue(r1 != r2)
assertTrue(r1.getClass() == r2.getClass())
assertTrue(r1.equals(r2))
assertTrue(r1 instanceof PublicCloneable)
assertEquals(r1, r2)
assertTrue(renderer.findDomainBounds(null) == null)
assertEquals(r1, r2)
assertFalse(r1.equals(r2))
assertEquals(r1, r2)
assertFalse(r1.equals(r2))
assertEquals(r1, r2)
assertFalse(r1.equals(r2))
assertEquals(r1, r2)
assertFalse(r1.equals(r2))
assertEquals(r1, r2)
assertFalse(r1.equals(r2))
assertEquals(r1, r2)
assertTrue(r1.equals(r2))
assertEquals(h1, h2)
assertTrue(r1 != r2)
assertTrue(r1.getClass() == r2.getClass())
assertTrue(r1.equals(r2))
assertTrue(r1 instanceof PublicCloneable)
assertEquals(r1, r2)
assertEquals(r1, r2)
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertTrue(r1.equals(r2))
assertEquals(h1, h2)
assertTrue(r1 != r2)
assertTrue(r1.getClass() == r2.getClass())
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1 instanceof PublicCloneable)
assertEquals(r1, r2)
assertEquals("S5", li.getLabel())
assertEquals(1, li.getDatasetIndex())
assertEquals(2, li.getSeriesIndex())
assertTrue(r1.equals(r2))
assertTrue(r2.equals(r1))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertTrue(r1.equals(r2))
assertEquals(h1, h2)
assertTrue(r1 != r2)
assertTrue(r1.getClass() == r2.getClass())
assertTrue(r1.equals(r2))
assertTrue(r1 instanceof PublicCloneable)
assertEquals(r1, r2)
assertEquals(Color.GREEN, r1.getUpPaint())
assertEquals(Color.RED, r1.getDownPaint())
assertFalse(r1.getUseOutlinePaint())
assertTrue(r1.getDrawVolume())
assertEquals(Color.GRAY, r1.getVolumePaint())
assertEquals(r1, r2)
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertTrue(r1.equals(r2))
assertEquals(h1, h2)
assertTrue(r1 != r2)
assertTrue(r1.getClass() == r2.getClass())
assertTrue(r1.equals(r2))
assertTrue(r1 instanceof PublicCloneable)
assertEquals(r1, r2)
assertEquals(new Range(1.0, 4.0), range)
assertEquals(new Range(-1.0, 4.0), range)
assertNull(range)
assertNull(range)
assertTrue(r1.equals(r2))
assertTrue(r2.equals(r1))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertTrue(r1.equals(r2))
assertEquals(h1, h2)
assertTrue(r1 != r2)
assertTrue(r1.getClass() == r2.getClass())
assertTrue(r1.equals(r2))
assertTrue(r1 instanceof PublicCloneable)
assertEquals(r1, r2)
assertEquals(r1, r2)
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertTrue(r1.equals(r2))
assertEquals(h1, h2)
assertTrue(r1 != r2)
assertTrue(r1.getClass() == r2.getClass())
assertTrue(r1.equals(r2))
assertTrue(r1 instanceof PublicCloneable)
assertEquals(r1, r2)
assertEquals("S5", li.getLabel())
assertEquals(1, li.getDatasetIndex())
assertEquals(2, li.getSeriesIndex())
assertEquals(r1, r2)
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertTrue(r1.equals(r2))
assertEquals(h1, h2)
assertTrue(r1 != r2)
assertTrue(r1.getClass() == r2.getClass())
assertTrue(r1.equals(r2))
assertTrue(r1 instanceof PublicCloneable)
assertEquals(r1, r2)
assertTrue(renderer.findDomainBounds(null) == null)
assertTrue(renderer.findRangeBounds(null) == null)
assertTrue(r1 != r2)
assertTrue(r1.getClass() == r2.getClass())
assertTrue(r1.equals(r2))
assertTrue(r1.getLegendItemLabelGenerator() != r2.getLegendItemLabelGenerator())
assertTrue(r1 != r2)
assertTrue(r1.getClass() == r2.getClass())
assertTrue(r1.equals(r2))
assertTrue(r1.getLegendItemToolTipGenerator() != r2.getLegendItemToolTipGenerator())
assertTrue(r1 != r2)
assertTrue(r1.getClass() == r2.getClass())
assertTrue(r1.equals(r2))
assertTrue(r1.getLegendItemURLGenerator() != r2.getLegendItemURLGenerator())
assertEquals(r1, r2)
assertNotEquals(r1, r2)
assertEquals(r1, r2)
assertNotEquals(r1, r2)
assertEquals(r1, r2)
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertTrue(r1.equals(r2))
assertEquals(h1, h2)
assertTrue(r1.equals(r2))
assertEquals(h1, h2)
assertTrue(r1 != r2)
assertTrue(r1.getClass() == r2.getClass())
assertTrue(r1.equals(r2))
assertTrue(r1 instanceof PublicCloneable)
assertEquals(r1, r2)
assertEquals("S5", li.getLabel())
assertEquals(1, li.getDatasetIndex())
assertEquals(2, li.getSeriesIndex())
assertEquals(r1, r2)
assertEquals(r2, r1)
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertTrue(r1.equals(r2))
assertEquals(h1, h2)
assertTrue(r1 != r2)
assertTrue(r1.getClass() == r2.getClass())
assertTrue(r1.equals(r2))
assertTrue(r1 instanceof PublicCloneable)
assertEquals(r1, r2)
assertEquals(r1, r2)
assertEquals(r2, r1)
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertEquals(r1, r2)
assertEquals(r2, r1)
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertTrue(r1.equals(r2))
assertEquals(h1, h2)
assertTrue(r1 != r2)
assertTrue(r1.getClass() == r2.getClass())
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertTrue(r1 instanceof PublicCloneable)
assertEquals(r1, r2)
assertFalse(bounds.contains(0.9))
assertTrue(bounds.contains(1.0))
assertTrue(bounds.contains(2.0))
assertFalse(bounds.contains(2.10))
assertFalse(bounds.contains(1.0))
assertTrue(bounds.contains(2.0))
assertTrue(bounds.contains(5.0))
assertFalse(bounds.contains(6.0))
assertEquals("S5", li.getLabel())
assertEquals(1, li.getDatasetIndex())
assertEquals(2, li.getSeriesIndex())
assertTrue(success)
assertEquals(r1, r2)
assertEquals(r2, r1)
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertTrue(r1.equals(r2))
assertEquals(h1, h2)
assertTrue(r1 != r2)
assertTrue(r1.getClass() == r2.getClass())
assertTrue(r1.equals(r2))
assertTrue(r1 instanceof PublicCloneable)
assertEquals(r1, r2)
assertTrue(bounds.contains(6.0))
assertTrue(bounds.contains(8.0))
assertNull(renderer.findRangeBounds(null))
assertNull(renderer.findRangeBounds(new DefaultTableXYDataset()))
assertTrue(r1.equals(r2))
assertTrue(r2.equals(r1))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertTrue(r1 != r2)
assertTrue(r1.getClass() == r2.getClass())
assertTrue(r1.equals(r2))
assertEquals(r1, r2)
assertNull(r.findZBounds(null))
assertNotNull(range)
assertNotNull(range)
assertNotNull(range)
assertNull(renderer.findRangeBounds(null))
assertNull(r)
assertNull(r)
assertEquals(r1, r2)
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertTrue(r1.equals(r2))
assertEquals(h1, h2)
assertFalse(r1.hashCode() == r2.hashCode())
assertTrue(r1 != r2)
assertTrue(r1.getClass() == r2.getClass())
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertTrue(r1 instanceof PublicCloneable)
assertEquals(r1, r2)
assertEquals("S5", li.getLabel())
assertEquals(1, li.getDatasetIndex())
assertEquals(2, li.getSeriesIndex())
assertTrue(r1.equals(r2))
assertTrue(r2.equals(r1))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertTrue(r1.equals(r2))
assertEquals(h1, h2)
assertFalse(h1 == h2)
assertTrue(r1 != r2)
assertTrue(r1.getClass() == r2.getClass())
assertTrue(r1.equals(r2))
assertTrue(r1 instanceof PublicCloneable)
assertEquals(r1, r2)
assertFalse(bounds.contains(0.3))
assertTrue(bounds.contains(0.5))
assertTrue(bounds.contains(2.5))
assertFalse(bounds.contains(2.8))
assertTrue(bounds.contains(6.0))
assertTrue(bounds.contains(8.0))
assertEquals(r1, r2)
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertTrue(r1.equals(r2))
assertEquals(h1, h2)
assertTrue(r1 != r2)
assertTrue(r1.getClass() == r2.getClass())
assertTrue(r1.equals(r2))
assertTrue(r1 != r2)
assertTrue(r1.getClass() == r2.getClass())
assertTrue(r1.equals(r2))
assertTrue(r1 instanceof PublicCloneable)
assertEquals(r1, r2)
assertEquals(r1, r2)
assertNull(r.findDomainBounds(null))
assertNull(r.findRangeBounds(null))
assertTrue(r1.equals(r2))
assertTrue(r2.equals(r1))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertTrue(r1.equals(r2))
assertEquals(h1, h2)
assertTrue(r1 != r2)
assertTrue(r1.getClass() == r2.getClass())
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertTrue(r1 instanceof PublicCloneable)
assertEquals(r1, r2)
assertTrue(range == null)
assertTrue(range == null)
assertTrue(range == null)
assertTrue(range == null)
assertNull(renderer.findRangeBounds(null))
assertNull(r)
assertNull(renderer.findRangeBounds(null))
assertNull(r)
assertEquals(r1, r2)
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(null))
assertTrue(r1.equals(r2))
assertEquals(h1, h2)
assertTrue(r1 != r2)
assertTrue(r1.getClass() == r2.getClass())
assertTrue(r1.equals(r2))
assertTrue(r1 instanceof PublicCloneable)
assertEquals(r1, r2)
assertEquals("S5", li.getLabel())
assertEquals(1, li.getDatasetIndex())
assertEquals(2, li.getSeriesIndex())
assertEquals(r1, r2)
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertTrue(r1.equals(r2))
assertEquals(h1, h2)
assertTrue(r1 != r2)
assertTrue(r1.getClass() == r2.getClass())
assertTrue(r1.equals(r2))
assertTrue(r1 instanceof PublicCloneable)
assertEquals(r1, r2)
assertEquals(p1, p2)
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertTrue(p1.equals(p2))
assertEquals(h1, h2)
assertFalse(p1 instanceof Cloneable)
assertFalse(p1 instanceof PublicCloneable)
assertEquals(p1, p2)
assertTrue(r1.equals(r2))
assertTrue(r2.equals(r1))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertTrue(r1.equals(r2))
assertEquals(h1, h2)
assertTrue(r1 != r2)
assertTrue(r1.getClass() == r2.getClass())
assertTrue(r1.equals(r2))
assertTrue(r1 instanceof PublicCloneable)
assertEquals(r1, r2)
assertEquals(r1, r2)
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertTrue(r1.equals(r2))
assertEquals(h1, h2)
assertTrue(r1 != r2)
assertTrue(r1.getClass() == r2.getClass())
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertTrue(r1 instanceof PublicCloneable)
assertEquals(r1, r2)
assertEquals("S5", li.getLabel())
assertEquals(1, li.getDatasetIndex())
assertEquals(2, li.getSeriesIndex())
assertFalse(TestUtils.containsInstanceOf(ec.getEntities(), XYItemEntity.class))
assertEquals(p1, p2)
assertTrue(p1.equals(p2))
assertEquals(h1, h2)
assertFalse(p1 instanceof Cloneable)
assertFalse(p1 instanceof PublicCloneable)
assertEquals(p1, p2)
assertEquals(r1, r2)
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertTrue(r1.equals(r2))
assertEquals(h1, h2)
assertTrue(r1 != r2)
assertTrue(r1.getClass() == r2.getClass())
assertTrue(r1.equals(r2))
assertTrue(r1 instanceof PublicCloneable)
assertEquals(r1, r2)
assertEquals(new Range(1.0, 4.0), range)
assertEquals(new Range(-1.0, 4.0), range)
assertNull(range)
assertNull(range)
assertEquals(r1, r2)
assertEquals(r2, r1)
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertTrue(r1.equals(r2))
assertEquals(h1, h2)
assertTrue(r1 != r2)
assertTrue(r1.getClass() == r2.getClass())
assertTrue(r1.equals(r2))
assertTrue(r1 instanceof PublicCloneable)
assertEquals(r1, r2)
assertTrue(bounds.contains(6.0))
assertTrue(bounds.contains(8.0))
assertTrue(r1.equals(r2))
assertTrue(r2.equals(r1))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertEquals(r1, r2)
assertNotEquals(r1, r2)
assertEquals(r1, r2)
assertNotEquals(r1, r2)
assertEquals(r1, r2)
assertNotEquals(r1, r2)
assertEquals(r1, r2)
assertNotEquals(r1, r2)
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertTrue(r1 != r2)
assertTrue(r1.getClass() == r2.getClass())
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertTrue(r1 != r2)
assertTrue(r1.getClass() == r2.getClass())
assertTrue(r1.equals(r2))
assertTrue(listener.lastEvent.getRenderer() == r2)
assertFalse(r1.hasListener(listener))
assertTrue(detector.getNotified())
assertTrue(detector.getNotified())
assertTrue(detector.getNotified())
assertTrue(detector.getNotified())
assertTrue(detector.getNotified())
assertTrue(detector.getNotified())
assertTrue(detector.getNotified())
assertTrue(detector.getNotified())
assertTrue(detector.getNotified())
assertTrue(detector.getNotified())
assertTrue(detector.getNotified())
assertTrue(detector.getNotified())
assertTrue(detector.getNotified())
assertTrue(detector.getNotified())
assertTrue(detector.getNotified())
assertTrue(detector.getNotified())
assertTrue(detector.getNotified())
assertTrue(detector.getNotified())
assertTrue(detector.getNotified())
assertTrue(detector.getNotified())
assertEquals(r1, r2)
assertEquals(true, r.getAutoPopulateSeriesPaint())
assertEquals(false, r.getAutoPopulateSeriesFillPaint())
assertEquals(false, r.getAutoPopulateSeriesOutlinePaint())
assertEquals(true, r.getAutoPopulateSeriesStroke())
assertEquals(false, r.getAutoPopulateSeriesOutlineStroke())
assertEquals(true, r.getAutoPopulateSeriesShape())
assertEquals(Color.BLUE, r.getDefaultPaint())
assertEquals(Color.BLUE, r.lookupSeriesPaint(0))
assertNull(r.getSeriesPaint(0))
assertEquals(DefaultDrawingSupplier.DEFAULT_PAINT_SEQUENCE[0], r.lookupSeriesPaint(0))
assertNotNull(r.getSeriesPaint(0))
assertEquals(Color.WHITE, r.getDefaultFillPaint())
assertEquals(Color.WHITE, r.lookupSeriesFillPaint(0))
assertNull(r.getSeriesFillPaint(0))
assertEquals(DefaultDrawingSupplier.DEFAULT_FILL_PAINT_SEQUENCE[0], r.lookupSeriesFillPaint(0))
assertNotNull(r.getSeriesFillPaint(0))
assertEquals(Color.GRAY, r.getDefaultOutlinePaint())
assertEquals(Color.GRAY, r.lookupSeriesOutlinePaint(0))
assertNull(r.getSeriesOutlinePaint(0))
assertEquals(DefaultDrawingSupplier.DEFAULT_OUTLINE_PAINT_SEQUENCE[0], r.lookupSeriesOutlinePaint(0))
assertNotNull(r.getSeriesOutlinePaint(0))
assertEquals(255, gps.getAlpha())
assertTrue(c.equals(Color.BLACK))
assertTrue(c.equals(Color.WHITE))
assertTrue(c.equals(Color.BLACK))
assertTrue(c.equals(Color.WHITE))
assertTrue(g1.equals(g2))
assertTrue(g2.equals(g1))
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertTrue(g1 != g2)
assertTrue(g1.getClass() == g2.getClass())
assertTrue(g1.equals(g2))
assertEquals(g1, g2)
assertEquals(0, RendererUtils.findLiveItemsLowerBound(d, 0, 10.0, 11.0))
assertEquals(0, RendererUtils.findLiveItemsLowerBound(d, 1, 0.0, 1.1))
assertEquals(0, RendererUtils.findLiveItemsLowerBound(d, 1, 2.0, 3.3))
assertEquals(0, RendererUtils.findLiveItemsLowerBound(d, 2, 0.0, 1.1))
assertEquals(1, RendererUtils.findLiveItemsLowerBound(d, 2, 1.0, 2.2))
assertEquals(1, RendererUtils.findLiveItemsLowerBound(d, 2, 2.0, 3.3))
assertEquals(1, RendererUtils.findLiveItemsLowerBound(d, 2, 3.0, 4.4))
assertEquals(0, RendererUtils.findLiveItemsLowerBound(d, 3, 0.0, 1.1))
assertEquals(0, RendererUtils.findLiveItemsLowerBound(d, 3, 1.0, 2.2))
assertEquals(1, RendererUtils.findLiveItemsLowerBound(d, 3, 2.0, 3.3))
assertEquals(2, RendererUtils.findLiveItemsLowerBound(d, 3, 3.0, 4.4))
assertEquals(0, RendererUtils.findLiveItemsLowerBound(d, 4, 0.0, 1.1))
assertEquals(0, RendererUtils.findLiveItemsLowerBound(d, 4, 1.0, 2.2))
assertEquals(1, RendererUtils.findLiveItemsLowerBound(d, 4, 2.0, 3.3))
assertEquals(3, RendererUtils.findLiveItemsLowerBound(d, 4, 3.0, 4.4))
assertEquals(3, RendererUtils.findLiveItemsLowerBound(d, 4, 4.0, 5.5))
assertEquals(0, RendererUtils.findLiveItemsLowerBound(d, 0, 10.0, 11.1))
assertEquals(0, RendererUtils.findLiveItemsLowerBound(d, 1, 0.0, 1.1))
assertEquals(0, RendererUtils.findLiveItemsLowerBound(d, 1, 2.0, 2.2))
assertEquals(0, RendererUtils.findLiveItemsLowerBound(d, 2, 0.0, 1.1))
assertEquals(0, RendererUtils.findLiveItemsLowerBound(d, 2, 1.0, 2.2))
assertEquals(1, RendererUtils.findLiveItemsLowerBound(d, 2, 2.0, 3.3))
assertEquals(1, RendererUtils.findLiveItemsLowerBound(d, 2, 3.0, 4.4))
assertEquals(0, RendererUtils.findLiveItemsLowerBound(d, 3, 0.0, 1.1))
assertEquals(0, RendererUtils.findLiveItemsLowerBound(d, 3, 1.0, 2.2))
assertEquals(1, RendererUtils.findLiveItemsLowerBound(d, 3, 2.0, 3.3))
assertEquals(2, RendererUtils.findLiveItemsLowerBound(d, 3, 3.0, 4.4))
assertEquals(0, RendererUtils.findLiveItemsLowerBound(d, 4, 0.0, 1.1))
assertEquals(0, RendererUtils.findLiveItemsLowerBound(d, 4, 1.0, 2.2))
assertEquals(1, RendererUtils.findLiveItemsLowerBound(d, 4, 2.0, 3.3))
assertEquals(2, RendererUtils.findLiveItemsLowerBound(d, 4, 3.0, 4.4))
assertEquals(3, RendererUtils.findLiveItemsLowerBound(d, 4, 4.0, 5.5))
assertEquals(0, RendererUtils.findLiveItemsLowerBound(d, 4, 0.0, 4.0))
assertEquals(0, RendererUtils.findLiveItemsLowerBound(d, 4, 1.0, 4.0))
assertEquals(1, RendererUtils.findLiveItemsLowerBound(d, 4, 2.0, 4.0))
assertEquals(4, RendererUtils.findLiveItemsLowerBound(d, 4, 3.0, 4.0))
assertEquals(0, RendererUtils.findLiveItemsLowerBound(d, 0, 10.0, 11.0))
assertEquals(0, RendererUtils.findLiveItemsLowerBound(d, 1, 0.0, 1.0))
assertEquals(0, RendererUtils.findLiveItemsLowerBound(d, 1, 1.1, 2.0))
assertEquals(1, RendererUtils.findLiveItemsLowerBound(d, 2, 0.1, 0.5))
assertEquals(1, RendererUtils.findLiveItemsLowerBound(d, 2, 0.1, 1.0))
assertEquals(0, RendererUtils.findLiveItemsLowerBound(d, 2, 1.1, 2.0))
assertEquals(0, RendererUtils.findLiveItemsLowerBound(d, 2, 2.2, 3.0))
assertEquals(0, RendererUtils.findLiveItemsLowerBound(d, 2, 3.3, 4.0))
assertEquals(2, RendererUtils.findLiveItemsLowerBound(d, 3, 0.0, 1.0))
assertEquals(1, RendererUtils.findLiveItemsLowerBound(d, 3, 1.0, 2.0))
assertEquals(0, RendererUtils.findLiveItemsLowerBound(d, 3, 2.0, 3.0))
assertEquals(0, RendererUtils.findLiveItemsLowerBound(d, 3, 3.0, 4.0))
assertEquals(3, RendererUtils.findLiveItemsLowerBound(d, 4, 0.1, 0.5))
assertEquals(3, RendererUtils.findLiveItemsLowerBound(d, 4, 0.1, 1.0))
assertEquals(2, RendererUtils.findLiveItemsLowerBound(d, 4, 1.1, 2.0))
assertEquals(1, RendererUtils.findLiveItemsLowerBound(d, 4, 2.2, 3.0))
assertEquals(0, RendererUtils.findLiveItemsLowerBound(d, 4, 3.3, 4.0))
assertEquals(0, RendererUtils.findLiveItemsLowerBound(d, 4, 4.4, 5.0))
assertEquals(0, RendererUtils.findLiveItemsLowerBound(d, 5, 0.0, 3.0))
assertEquals(1, RendererUtils.findLiveItemsLowerBound(d, 5, 0.0, 2.0))
assertEquals(4, RendererUtils.findLiveItemsLowerBound(d, 5, 0.0, 1.0))
assertEquals(4, RendererUtils.findLiveItemsLowerBound(d, 5, 0.0, 0.5))
assertEquals(0, RendererUtils.findLiveItemsUpperBound(d, 0, 10.0, 11.0))
assertEquals(0, RendererUtils.findLiveItemsUpperBound(d, 1, 0.0, 1.1))
assertEquals(0, RendererUtils.findLiveItemsUpperBound(d, 1, 2.0, 3.3))
assertEquals(0, RendererUtils.findLiveItemsUpperBound(d, 2, 0.0, 1.1))
assertEquals(1, RendererUtils.findLiveItemsUpperBound(d, 2, 1.0, 2.2))
assertEquals(1, RendererUtils.findLiveItemsUpperBound(d, 2, 2.0, 3.3))
assertEquals(1, RendererUtils.findLiveItemsUpperBound(d, 2, 3.0, 4.4))
assertEquals(0, RendererUtils.findLiveItemsUpperBound(d, 3, 0.0, 1.1))
assertEquals(2, RendererUtils.findLiveItemsUpperBound(d, 3, 1.0, 2.2))
assertEquals(2, RendererUtils.findLiveItemsUpperBound(d, 3, 2.0, 3.3))
assertEquals(2, RendererUtils.findLiveItemsUpperBound(d, 3, 3.0, 4.4))
assertEquals(0, RendererUtils.findLiveItemsUpperBound(d, 4, 0.0, 1.1))
assertEquals(3, RendererUtils.findLiveItemsUpperBound(d, 4, 1.0, 2.2))
assertEquals(3, RendererUtils.findLiveItemsUpperBound(d, 4, 2.0, 3.3))
assertEquals(3, RendererUtils.findLiveItemsUpperBound(d, 4, 3.0, 4.4))
assertEquals(3, RendererUtils.findLiveItemsUpperBound(d, 4, 4.0, 5.5))
assertEquals(0, RendererUtils.findLiveItemsUpperBound(d, 0, 10.0, 11.1))
assertEquals(0, RendererUtils.findLiveItemsUpperBound(d, 1, 0.0, 1.1))
assertEquals(0, RendererUtils.findLiveItemsUpperBound(d, 1, 2.0, 2.2))
assertEquals(0, RendererUtils.findLiveItemsUpperBound(d, 2, 0.0, 1.0))
assertEquals(1, RendererUtils.findLiveItemsUpperBound(d, 2, 1.0, 2.2))
assertEquals(1, RendererUtils.findLiveItemsUpperBound(d, 2, 2.0, 3.3))
assertEquals(1, RendererUtils.findLiveItemsUpperBound(d, 2, 3.0, 4.4))
assertEquals(0, RendererUtils.findLiveItemsUpperBound(d, 3, 0.0, 1.1))
assertEquals(1, RendererUtils.findLiveItemsUpperBound(d, 3, 1.0, 2.2))
assertEquals(2, RendererUtils.findLiveItemsUpperBound(d, 3, 2.0, 3.3))
assertEquals(2, RendererUtils.findLiveItemsUpperBound(d, 3, 3.0, 4.4))
assertEquals(0, RendererUtils.findLiveItemsUpperBound(d, 4, 0.0, 1.1))
assertEquals(1, RendererUtils.findLiveItemsUpperBound(d, 4, 1.0, 2.2))
assertEquals(2, RendererUtils.findLiveItemsUpperBound(d, 4, 2.0, 3.3))
assertEquals(3, RendererUtils.findLiveItemsUpperBound(d, 4, 3.0, 4.4))
assertEquals(3, RendererUtils.findLiveItemsUpperBound(d, 4, 4.0, 5.5))
assertEquals(0, RendererUtils.findLiveItemsUpperBound(d, 4, 0.0, 1.0))
assertEquals(3, RendererUtils.findLiveItemsUpperBound(d, 4, 0.0, 2.0))
assertEquals(4, RendererUtils.findLiveItemsUpperBound(d, 4, 0.0, 3.0))
assertEquals(4, RendererUtils.findLiveItemsUpperBound(d, 4, 0.0, 4.0))
assertEquals(0, RendererUtils.findLiveItemsUpperBound(d, 0, 10.0, 11.0))
assertEquals(0, RendererUtils.findLiveItemsUpperBound(d, 1, 0.0, 1.0))
assertEquals(0, RendererUtils.findLiveItemsUpperBound(d, 1, 1.1, 2.0))
assertEquals(1, RendererUtils.findLiveItemsUpperBound(d, 2, 0.1, 0.5))
assertEquals(1, RendererUtils.findLiveItemsUpperBound(d, 2, 0.1, 1.0))
assertEquals(0, RendererUtils.findLiveItemsUpperBound(d, 2, 1.1, 2.0))
assertEquals(0, RendererUtils.findLiveItemsUpperBound(d, 2, 2.2, 3.0))
assertEquals(0, RendererUtils.findLiveItemsUpperBound(d, 2, 3.3, 4.0))
assertEquals(2, RendererUtils.findLiveItemsUpperBound(d, 3, 0.0, 1.0))
assertEquals(2, RendererUtils.findLiveItemsUpperBound(d, 3, 1.0, 2.0))
assertEquals(1, RendererUtils.findLiveItemsUpperBound(d, 3, 2.0, 3.0))
assertEquals(0, RendererUtils.findLiveItemsUpperBound(d, 3, 3.0, 4.0))
assertEquals(3, RendererUtils.findLiveItemsUpperBound(d, 4, 0.1, 0.5))
assertEquals(3, RendererUtils.findLiveItemsUpperBound(d, 4, 0.1, 1.0))
assertEquals(2, RendererUtils.findLiveItemsUpperBound(d, 4, 1.1, 2.0))
assertEquals(1, RendererUtils.findLiveItemsUpperBound(d, 4, 2.2, 3.0))
assertEquals(0, RendererUtils.findLiveItemsUpperBound(d, 4, 3.3, 4.0))
assertEquals(0, RendererUtils.findLiveItemsUpperBound(d, 4, 4.4, 5.0))
assertEquals(4, RendererUtils.findLiveItemsUpperBound(d, 5, 0.0, 5.0))
assertEquals(4, RendererUtils.findLiveItemsUpperBound(d, 5, 1.0, 5.0))
assertEquals(3, RendererUtils.findLiveItemsUpperBound(d, 5, 2.0, 5.0))
assertEquals(0, RendererUtils.findLiveItemsUpperBound(d, 5, 3.0, 5.0))
assertEquals(1, RendererUtils.findLiveItemsLowerBound(dataset, 0, 10.0, 20.0))
assertEquals(2, RendererUtils.findLiveItemsUpperBound(dataset, 0, 10.0, 20.0))
assertEquals(1, bounds[0])
assertEquals(2, bounds[1])
assertEquals(r1, r2)
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertTrue(r1.equals(r2))
assertEquals(h1, h2)
assertTrue(r1 != r2)
assertTrue(r1.getClass() == r2.getClass())
assertTrue(r1.equals(r2))
assertFalse(r1.equals(r2))
assertTrue(r1.equals(r2))
assertEquals(r1, r2)
assertTrue(out1.equals(out2))
assertTrue(out2.equals(out1))
assertFalse(out1.equals(out2))
assertTrue(out1.equals(out2))
assertFalse(out1.equals(out2))
assertTrue(out1.equals(out2))
assertFalse(out1.equals(out2))
assertTrue(out1.equals(out2))
assertFalse(out1 instanceof Cloneable)
assertFalse(out1 instanceof Serializable)
assertEquals(null, m1.getStroke("A"))
assertEquals(new BasicStroke(1.1f), m1.getStroke("A"))
assertEquals(null, m1.getStroke("A"))
assertTrue(pass)
assertEquals(new BasicStroke(1.1f), m1.getStroke("A"))
assertTrue(pass)
assertTrue(m1.equals(m1))
assertTrue(m1.equals(m2))
assertFalse(m1.equals(null))
assertFalse(m1.equals("ABC"))
assertFalse(m1.equals(m2))
assertTrue(m1.equals(m2))
assertFalse(m1.equals(m2))
assertTrue(m1.equals(m2))
assertFalse(m1.equals(m2))
assertTrue(m1.equals(m2))
assertTrue(m1.equals(m2))
assertTrue(m1.equals(m2))
assertEquals(m1, m2)
assertEquals(m1, m2)
assertEquals(true, l.flag)
assertSame(tt2, tt)
assertSame(url2, url1)
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertTrue(a1.equals(a2))
assertEquals(h1, h2)
assertTrue(a1 != a2)
assertTrue(a1.getClass() == a2.getClass())
assertTrue(a1.equals(a2))
assertTrue(a1 instanceof PublicCloneable)
assertEquals(a1, a2)
assertTrue(a1.equals(a2))
assertTrue(a2.equals(a1))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertTrue(a1.equals(a2))
assertEquals(h1, h2)
assertTrue(a1 != a2)
assertTrue(a1.getClass() == a2.getClass())
assertTrue(a1.equals(a2))
assertTrue(a1 instanceof PublicCloneable)
assertEquals(a1, a2)
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertTrue(a1.equals(a2))
assertEquals(h1, h2)
assertTrue(a1 != a2)
assertTrue(a1.getClass() == a2.getClass())
assertTrue(a1.equals(a2))
assertEquals(a1, a2)
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertTrue(a1.equals(a2))
assertEquals(h1, h2)
assertTrue(a1 != a2)
assertTrue(a1.getClass() == a2.getClass())
assertTrue(a1.equals(a2))
assertTrue(a1 instanceof PublicCloneable)
assertEquals(a1, a2)
assertTrue(a1.equals(a2))
assertTrue(a2.equals(a1))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertTrue(a1.equals(a2))
assertEquals(h1, h2)
assertTrue(a1 != a2)
assertTrue(a1.getClass() == a2.getClass())
assertTrue(a1.equals(a2))
assertTrue(a1 instanceof PublicCloneable)
assertEquals(a1, a2)
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertTrue(a1.equals(a2))
assertEquals(h1, h2)
assertTrue(a1 != a2)
assertTrue(a1.getClass() == a2.getClass())
assertTrue(a1.equals(a2))
assertTrue(a1 instanceof PublicCloneable)
assertEquals(a1, a2)
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertTrue(a1.equals(a2))
assertEquals(h1, h2)
assertTrue(a1 != a2)
assertTrue(a1.getClass() == a2.getClass())
assertTrue(a1.equals(a2))
assertTrue(a1 instanceof PublicCloneable)
assertEquals(a1, a2)
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertTrue(a1.equals(a2))
assertEquals(h1, h2)
assertTrue(a1 != a2)
assertTrue(a1.getClass() == a2.getClass())
assertTrue(a1.equals(a2))
assertTrue(a1 instanceof PublicCloneable)
assertEquals(a1, a2)
assertTrue(a1.equals(a2))
assertTrue(a2.equals(a1))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertTrue(a1.equals(a2))
assertEquals(h1, h2)
assertTrue(a1 != a2)
assertTrue(a1.getClass() == a2.getClass())
assertTrue(a1.equals(a2))
assertTrue(a1 instanceof PublicCloneable)
assertEquals(a1, a2)
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertTrue(a1.equals(a2))
assertEquals(h1, h2)
assertNotNull(this.lastEvent)
assertNotNull(this.lastEvent)
assertNotNull(this.lastEvent)
assertNotNull(this.lastEvent)
assertNotNull(this.lastEvent)
assertNotNull(this.lastEvent)
assertNotNull(this.lastEvent)
assertTrue(a1.equals(a2))
assertTrue(a2.equals(a1))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertTrue(a1.equals(a2))
assertEquals(h1, h2)
assertTrue(a1 != a2)
assertTrue(a1.getClass() == a2.getClass())
assertTrue(a1.equals(a2))
assertTrue(a1 instanceof PublicCloneable)
assertEquals(a1, a2)
assertTrue(a1.equals(a2))
assertTrue(a2.equals(a1))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertTrue(a1.equals(a2))
assertEquals(h1, h2)
assertTrue(a1 != a2)
assertTrue(a1.getClass() == a2.getClass())
assertTrue(a1.equals(a2))
assertTrue(a1 instanceof PublicCloneable)
assertEquals(a1, a2)
assertEquals(p1, p2)
assertTrue(!p1.equals(p2))
assertTrue(p1.equals(p2))
assertTrue(!p1.equals(p2))
assertTrue(p1.equals(p2))
assertTrue(!p1.equals(p2))
assertTrue(p1.equals(p2))
assertTrue(!p1.equals(p2))
assertTrue(p1.equals(p2))
assertTrue(p1.equals(p2))
assertEquals(h1, h2)
assertEquals(p1, p2)
assertTrue(t1.equals(t2))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertTrue(t1.equals(t2))
assertEquals(h1, h2)
assertTrue(t1 != t2)
assertTrue(t1.getClass() == t2.getClass())
assertTrue(t1.equals(t2))
assertEquals(t1, t2)
assertTrue(info1.equals(info2))
assertTrue(info2.equals(info1))
assertFalse(info1.equals(info2))
assertTrue(info1.equals(info2))
assertFalse(info1.equals(info2))
assertTrue(info1.equals(info2))
assertFalse(info1.equals(info2))
assertTrue(info1.equals(info2))
assertFalse(info1.equals(info2))
assertTrue(info1.equals(info2))
assertFalse(info1.equals(info2))
assertTrue(info1.equals(info2))
assertFalse(info1.equals(info2))
assertTrue(info1.equals(info2))
assertFalse(info1.equals(info2))
assertTrue(info1.equals(info2))
assertFalse(info1.equals(info2))
assertTrue(info1.equals(info2))
assertTrue(info1.equals(info2))
assertEquals(h1, h2)
assertTrue(info1 != info2)
assertTrue(info1.getClass() == info2.getClass())
assertTrue(info1.equals(info2))
assertEquals(info1, info2)
assertEquals(new Day(1, 1, 1970), d)
assertEquals(new Year(1970), y)
assertTrue(t1.equals(t2))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertTrue(t1.equals(t2))
assertEquals(h1, h2)
assertTrue(t1 != t2)
assertTrue(t1.getClass() == t2.getClass())
assertTrue(t1.equals(t2))
assertEquals(t1, t2)
assertEquals(a1, a2)
assertTrue(a1 != a2)
assertTrue(a1.getClass() == a2.getClass())
assertTrue(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertTrue(a1.equals(a2))
assertEquals(h1, h2)
assertEquals(a1, a2)
assertTrue(axis.isTickMarksVisible())
assertEquals(AxisLocation.TOP_OR_RIGHT, AxisLocation.TOP_OR_RIGHT)
assertEquals(AxisLocation.BOTTOM_OR_RIGHT, AxisLocation.BOTTOM_OR_RIGHT)
assertEquals(AxisLocation.TOP_OR_LEFT, AxisLocation.TOP_OR_LEFT)
assertEquals(AxisLocation.BOTTOM_OR_LEFT, AxisLocation.BOTTOM_OR_LEFT)
assertTrue(a1.equals(a2))
assertEquals(h1, h2)
assertEquals(location1, location2)
assertEquals(true, same)
assertTrue(t1.equals(t2))
assertEquals(t1, t2)
assertTrue(qf1.equals(qf2))
assertTrue(qf2.equals(qf1))
assertFalse(qf1.equals(qf2))
assertTrue(qf1.equals(qf2))
assertFalse(qf1.equals(qf2))
assertTrue(qf1.equals(qf2))
assertFalse(qf1.equals(qf2))
assertTrue(qf1.equals(qf2))
assertTrue(qf1.equals(qf2))
assertEquals(h1, h2)
assertTrue(qf1 != qf2)
assertTrue(qf1.getClass() == qf2.getClass())
assertTrue(qf1.equals(qf2))
assertEquals(qf1, qf2)
assertNotSame(a1, a2)
assertSame(a1.getClass(), a2.getClass())
assertEquals(a1, a2)
assertEquals(a1, a2)
assertNotEquals(a1, a2)
assertEquals(a1, a2)
assertNotEquals(a1, a2)
assertEquals(a1, a2)
assertNotEquals(a1, a2)
assertEquals(a1, a2)
assertNotEquals(a1, a2)
assertEquals(a1, a2)
assertNotEquals(a1, a2)
assertEquals(a1, a2)
assertNotEquals(a1, a2)
assertEquals(a1, a2)
assertNotEquals(a1, a2)
assertEquals(a1, a2)
assertNotEquals(a1, a2)
assertEquals(a1, a2)
assertNotEquals(a1, a2)
assertEquals(a1, a2)
assertNotEquals(a1, a2)
assertEquals(a1, a2)
assertNotEquals(a1, a2)
assertEquals(a1, a2)
assertNotEquals(a1, a2)
assertEquals(a1, a2)
assertNotEquals(a1, a2)
assertEquals(a1, a2)
assertNotEquals(a1, a2)
assertEquals(a1, a2)
assertNotEquals(a1, a2)
assertEquals(a1, a2)
assertNotEquals(a1, a2)
assertEquals(a1, a2)
assertNotEquals(a1, a2)
assertEquals(a1, a2)
assertNotEquals(a1, a2)
assertEquals(a1, a2)
assertNotEquals(a1, a2)
assertEquals(a1, a2)
assertNotEquals(a1, a2)
assertEquals(a1, a2)
assertNotEquals(a1, a2)
assertEquals(a1, a2)
assertNotEquals(a1, a2)
assertEquals(a1, a2)
assertNotEquals(a1, a2)
assertEquals(a1, a2)
assertNotEquals(a1, a2)
assertEquals(a1, a2)
assertNotEquals(a1, a2)
assertEquals(a1, a2)
assertEquals(a1, a2)
assertEquals(h1, h2)
assertEquals(a1, a2)
assertEquals(CategoryLabelWidthType.CATEGORY, CategoryLabelWidthType.CATEGORY)
assertEquals(CategoryLabelWidthType.RANGE, CategoryLabelWidthType.RANGE)
assertTrue(a1.equals(a2))
assertEquals(h1, h2)
assertEquals(w1, w2)
assertTrue(w1 == w2)
assertEquals(a1, a2)
assertTrue(a1 != a2)
assertTrue(a1.getClass() == a2.getClass())
assertTrue(a1.equals(a2))
assertTrue(a1.equals(a2))
assertTrue(a2.equals(a1))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertTrue(a1 != a2)
assertTrue(a1.getClass() == a2.getClass())
assertTrue(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertTrue(a1.equals(a2))
assertEquals(h1, h2)
assertEquals(a1, a2)
assertTrue(p1.equals(p2))
assertTrue(p2.equals(p1))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertFalse(p1.equals(p2))
assertTrue(p1.equals(p2))
assertTrue(a1.equals(a2))
assertEquals(h1, h2)
assertEquals(p1, p2)
assertTrue(t1.equals(t2))
assertTrue(t1.equals(t2))
assertEquals(h1, h2)
assertEquals(a1, a2)
assertTrue(mf1.equals(mf2))
assertTrue(mf2.equals(mf1))
assertFalse(mf1.equals(mf2))
assertTrue(mf1.equals(mf2))
assertFalse(mf1.equals(mf2))
assertTrue(mf1.equals(mf2))
assertFalse(mf1.equals(mf2))
assertTrue(mf1.equals(mf2))
assertFalse(mf1.equals(mf2))
assertTrue(mf1.equals(mf2))
assertFalse(mf1.equals(mf2))
assertTrue(mf1.equals(mf2))
assertTrue(mf1.equals(mf2))
assertEquals(h1, h2)
assertTrue(mf1 != mf2)
assertTrue(mf1.getClass() == mf2.getClass())
assertTrue(mf1.equals(mf2))
assertTrue(mf1.equals(mf2))
assertEquals(a1, a2)
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertTrue(s1.equals(s2))
assertEquals(h1, h2)
assertTrue(s1 != s2)
assertTrue(s1.getClass() == s2.getClass())
assertTrue(s1.equals(s2))
assertTrue(t1.equals(t2))
assertTrue(t2.equals(t1))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertEquals(h1, h2)
assertFalse(t1 instanceof Cloneable)
assertEquals(t1, t2)
assertTrue(a1 != a2)
assertTrue(a1.getClass() == a2.getClass())
assertTrue(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertTrue(a1.equals(a2))
assertEquals(h1, h2)
assertEquals(a1, a2)
assertEquals(CategoryAnchor.START, CategoryAnchor.START)
assertEquals(CategoryAnchor.MIDDLE, CategoryAnchor.MIDDLE)
assertEquals(CategoryAnchor.END, CategoryAnchor.END)
assertFalse(CategoryAnchor.START.equals(CategoryAnchor.END))
assertFalse(CategoryAnchor.MIDDLE.equals(CategoryAnchor.END))
assertTrue(a1.equals(a2))
assertEquals(h1, h2)
assertEquals(a1, a2)
assertTrue(a1 == a2)
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertTrue(a1.equals(a2))
assertEquals(h1, h2)
assertTrue(a1 != a2)
assertTrue(a1.getClass() == a2.getClass())
assertTrue(a1.equals(a2))
assertTrue(a1 != a2)
assertTrue(a1.getClass() == a2.getClass())
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertEquals(a1, a2)
assertTrue(a1.equals(a2))
assertTrue(a2.equals(a1))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertTrue(a1.equals(a2))
assertTrue(a2.equals(a1))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertTrue(a1.equals(a2))
assertEquals(h1, h2)
assertTrue(a1 != a2)
assertTrue(a1.getClass() == a2.getClass())
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertTrue(b)
assertTrue(this.lastEvent != null)
assertEquals(a1, a2)
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertTrue(a1.equals(a2))
assertEquals(h1, h2)
assertEquals(a1, a2)
assertEquals(t1, t2)
assertTrue(t1 != t2)
assertTrue(t1.getClass() == t2.getClass())
assertTrue(t1.equals(t2))
assertTrue(t1.equals(t2))
assertTrue(t2.equals(t1))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertTrue(a1.equals(a2))
assertEquals(h1, h2)
assertTrue(a1 != a2)
assertTrue(a1.getClass() == a2.getClass())
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertTrue(a1 != a2)
assertTrue(a1.getClass() == a2.getClass())
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertEquals(a1, a2)
assertTrue(a1.equals(a2))
assertFalse(a1.equals(null))
assertFalse(a1.equals("Some non-DateAxis object"))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertTrue(a1.equals(a2))
assertEquals(h1, h2)
assertTrue(a1 != a2)
assertTrue(a1.getClass() == a2.getClass())
assertTrue(a1.equals(a2))
assertEquals(d1, range.getLowerDate())
assertEquals(d2, range.getUpperDate())
assertEquals(date, axis.getMaximumDate())
assertEquals(d0, axis.getMinimumDate())
assertEquals(d1, axis.getMinimumDate())
assertEquals(d3, axis.getMaximumDate())
assertTrue(same(y1, 95.8333333, 1.0))
assertTrue(same(y2, 95.8333333, 1.0))
assertTrue(same(x1, 58.125, 1.0))
assertTrue(same(x2, 58.125, 1.0))
assertTrue(same(y3, 54.1666667, 1.0))
assertTrue(same(y4, 54.1666667, 1.0))
assertTrue(same(x3, 91.875, 1.0))
assertTrue(same(x4, 91.875, 1.0))
assertEquals(a1, a2)
assertTrue(psd.getTime() < d0.getTime())
assertTrue(nsd.getTime() >= d0.getTime())
assertTrue(psd.getTime() < d1.getTime())
assertTrue(nsd.getTime() >= d1.getTime())
assertTrue(psd.getTime() < d1.getTime())
assertTrue(nsd.getTime() >= d1.getTime())
assertTrue(psd.getTime() < d2.getTime())
assertTrue(nsd.getTime() >= d2.getTime())
assertTrue(psd.getTime() < d3.getTime())
assertTrue(nsd.getTime() >= d3.getTime())
assertTrue(psd.getTime() < d3.getTime())
assertTrue(nsd.getTime() >= d3.getTime())
assertTrue(psd.getTime() < d4.getTime())
assertTrue(nsd.getTime() >= d4.getTime())
assertTrue(psd.getTime() < d0.getTime())
assertTrue(nsd.getTime() >= d0.getTime())
assertTrue(psd.getTime() < d1.getTime())
assertTrue(nsd.getTime() >= d1.getTime())
assertTrue(psd.getTime() < d1.getTime())
assertTrue(nsd.getTime() >= d1.getTime())
assertTrue(psd.getTime() < d2.getTime())
assertTrue(nsd.getTime() >= d2.getTime())
assertTrue(psd.getTime() < d3.getTime())
assertTrue(nsd.getTime() >= d3.getTime())
assertTrue(psd.getTime() < d3.getTime())
assertTrue(nsd.getTime() >= d3.getTime())
assertTrue(psd.getTime() < d4.getTime())
assertTrue(nsd.getTime() >= d4.getTime())
assertTrue(psd.getTime() < d0.getTime())
assertTrue(nsd.getTime() >= d0.getTime())
assertTrue(psd.getTime() < d1.getTime())
assertTrue(nsd.getTime() >= d1.getTime())
assertTrue(psd.getTime() < d1.getTime())
assertTrue(nsd.getTime() >= d1.getTime())
assertTrue(psd.getTime() < d2.getTime())
assertTrue(nsd.getTime() >= d2.getTime())
assertTrue(psd.getTime() < d3.getTime())
assertTrue(nsd.getTime() >= d3.getTime())
assertTrue(psd.getTime() < d3.getTime())
assertTrue(nsd.getTime() >= d3.getTime())
assertTrue(psd.getTime() < d4.getTime())
assertTrue(nsd.getTime() >= d4.getTime())
assertTrue(psd.getTime() < d0.getTime())
assertTrue(nsd.getTime() >= d0.getTime())
assertTrue(psd.getTime() < d1.getTime())
assertTrue(nsd.getTime() >= d1.getTime())
assertTrue(psd.getTime() < d1.getTime())
assertTrue(nsd.getTime() >= d1.getTime())
assertTrue(psd.getTime() < d2.getTime())
assertTrue(nsd.getTime() >= d2.getTime())
assertTrue(psd.getTime() < d3.getTime())
assertTrue(nsd.getTime() >= d3.getTime())
assertTrue(psd.getTime() < d3.getTime())
assertTrue(nsd.getTime() >= d3.getTime())
assertTrue(psd.getTime() < d4.getTime())
assertTrue(nsd.getTime() >= d4.getTime())
assertTrue(psd.getTime() < d0.getTime())
assertTrue(nsd.getTime() >= d0.getTime())
assertTrue(psd.getTime() < d1.getTime())
assertTrue(nsd.getTime() >= d1.getTime())
assertTrue(psd.getTime() < d1.getTime())
assertTrue(nsd.getTime() >= d1.getTime())
assertTrue(psd.getTime() < d2.getTime())
assertTrue(nsd.getTime() >= d2.getTime())
assertTrue(psd.getTime() < d3.getTime())
assertTrue(nsd.getTime() >= d3.getTime())
assertTrue(psd.getTime() < d3.getTime())
assertTrue(nsd.getTime() >= d3.getTime())
assertTrue(psd.getTime() < d4.getTime())
assertTrue(nsd.getTime() >= d4.getTime())
assertTrue(psd.getTime() < d0.getTime())
assertTrue(nsd.getTime() >= d0.getTime())
assertTrue(psd.getTime() < d1.getTime())
assertTrue(nsd.getTime() >= d1.getTime())
assertTrue(psd.getTime() < d1.getTime())
assertTrue(nsd.getTime() >= d1.getTime())
assertTrue(psd.getTime() < d2.getTime())
assertTrue(nsd.getTime() >= d2.getTime())
assertTrue(psd.getTime() < d3.getTime())
assertTrue(nsd.getTime() >= d3.getTime())
assertTrue(psd.getTime() < d3.getTime())
assertTrue(nsd.getTime() >= d3.getTime())
assertTrue(psd.getTime() < d4.getTime())
assertTrue(nsd.getTime() >= d4.getTime())
assertTrue(psd.getTime() < d0.getTime())
assertTrue(nsd.getTime() >= d0.getTime())
assertTrue(psd.getTime() < d1.getTime())
assertTrue(nsd.getTime() >= d1.getTime())
assertTrue(psd.getTime() < d1.getTime())
assertTrue(nsd.getTime() >= d1.getTime())
assertTrue(psd.getTime() < d2.getTime())
assertTrue(nsd.getTime() >= d2.getTime())
assertTrue(psd.getTime() < d3.getTime())
assertTrue(nsd.getTime() >= d3.getTime())
assertTrue(psd.getTime() < d3.getTime())
assertTrue(nsd.getTime() >= d3.getTime())
assertTrue(psd.getTime() < d4.getTime())
assertTrue(nsd.getTime() >= d4.getTime())
assertTrue(psd.getTime() < d0.getTime())
assertTrue(nsd.getTime() >= d0.getTime())
assertTrue(psd.getTime() < d1.getTime())
assertTrue(nsd.getTime() >= d1.getTime())
assertTrue(psd.getTime() < d1.getTime())
assertTrue(nsd.getTime() >= d1.getTime())
assertTrue(psd.getTime() < d2.getTime())
assertTrue(nsd.getTime() >= d2.getTime())
assertTrue(psd.getTime() < d3.getTime())
assertTrue(nsd.getTime() >= d3.getTime())
assertTrue(psd.getTime() < d3.getTime())
assertTrue(nsd.getTime() >= d3.getTime())
assertTrue(psd.getTime() < d4.getTime())
assertTrue(nsd.getTime() >= d4.getTime())
assertTrue(psd.getTime() < d0.getTime())
assertTrue(nsd.getTime() >= d0.getTime())
assertTrue(psd.getTime() < d1.getTime())
assertTrue(nsd.getTime() >= d1.getTime())
assertTrue(psd.getTime() < d1.getTime())
assertTrue(nsd.getTime() >= d1.getTime())
assertTrue(psd.getTime() < d2.getTime())
assertTrue(nsd.getTime() >= d2.getTime())
assertTrue(psd.getTime() < d3.getTime())
assertTrue(nsd.getTime() >= d3.getTime())
assertTrue(psd.getTime() < d3.getTime())
assertTrue(nsd.getTime() >= d3.getTime())
assertTrue(psd.getTime() < d4.getTime())
assertTrue(nsd.getTime() >= d4.getTime())
assertTrue(psd.getTime() < d0.getTime())
assertTrue(nsd.getTime() >= d0.getTime())
assertTrue(psd.getTime() < d1.getTime())
assertTrue(nsd.getTime() >= d1.getTime())
assertTrue(psd.getTime() < d1.getTime())
assertTrue(nsd.getTime() >= d1.getTime())
assertTrue(psd.getTime() < d2.getTime())
assertTrue(nsd.getTime() >= d2.getTime())
assertTrue(psd.getTime() < d3.getTime())
assertTrue(nsd.getTime() >= d3.getTime())
assertTrue(psd.getTime() < d3.getTime())
assertTrue(nsd.getTime() >= d3.getTime())
assertTrue(psd.getTime() < d4.getTime())
assertTrue(nsd.getTime() >= d4.getTime())
assertTrue(psd.getTime() < d0.getTime())
assertTrue(nsd.getTime() >= d0.getTime())
assertTrue(psd.getTime() < d0.getTime())
assertTrue(nsd.getTime() >= d0.getTime())
assertTrue(psd.getTime() < d0.getTime())
assertTrue(nsd.getTime() >= d0.getTime())
assertTrue(psd.getTime() < d0.getTime())
assertTrue(nsd.getTime() >= d0.getTime())
assertTrue(psd.getTime() < d0.getTime())
assertTrue(nsd.getTime() >= d0.getTime())
assertTrue(psd.getTime() < d0.getTime())
assertTrue(nsd.getTime() >= d0.getTime())
assertEquals(3, ticks.size())
assertEquals("31-Mar-2008", t1.getText())
assertEquals("30-Apr-2008", t2.getText())
assertEquals("31-May-2008", t3.getText())
assertEquals(3, ticks.size())
assertEquals("31-Mar-2008", t1.getText())
assertEquals("30-Apr-2008", t2.getText())
assertEquals("31-May-2008", t3.getText())
assertEquals(new Year(2010).getFirstMillisecond(cal), yprev.getTime())
assertEquals(new Month(9, 2016).getFirstMillisecond(cal), mprev.getTime())
assertEquals(new Day(7, 1, 2016).getFirstMillisecond(cal), dprev.getTime())
assertEquals(new Hour(12, 24, 8, 2016).getFirstMillisecond(cal), hprev.getTime())
assertEquals(1472040600000L - 5 * 60 * 1000L, minprev.getTime())
assertEquals(new Second(40, 30, 18, 24, 8, 2016).getFirstMillisecond(cal), sprev.getTime())
assertEquals(new Millisecond(490, 50, 30, 18, 24, 8, 2016).getFirstMillisecond(cal), msprev.getTime())
assertTrue(a1.equals(a2))
assertTrue(a2.equals(a1))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertTrue(a1.equals(a2))
assertEquals(h1, h2)
assertTrue(a1 != a2)
assertTrue(a1.getClass() == a2.getClass())
assertTrue(a1.equals(a2))
assertEquals(a1, a2)
assertTrue(a1 != a2)
assertTrue(a1.getClass() == a2.getClass())
assertTrue(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertEquals(DateTickMarkPosition.START, DateTickMarkPosition.START)
assertEquals(DateTickMarkPosition.MIDDLE, DateTickMarkPosition.MIDDLE)
assertEquals(DateTickMarkPosition.END, DateTickMarkPosition.END)
assertFalse(DateTickMarkPosition.START.equals(null))
assertFalse(DateTickMarkPosition.START.equals(DateTickMarkPosition.END))
assertFalse(DateTickMarkPosition.MIDDLE.equals(DateTickMarkPosition.END))
assertTrue(a1.equals(a2))
assertEquals(h1, h2)
assertEquals(p1, p2)
assertTrue(p1 == p2)
assertTrue(a1 != a2)
assertTrue(a1.getClass() == a2.getClass())
assertTrue(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertFalse(a1.equals(a2))
assertTrue(a1.equals(a2))
assertTrue(a1.equals(a2))
assertEquals(h1, h2)
assertEquals(a1, a2)
assertTrue(e1.equals(e2))
assertFalse(e1.equals(e2))
assertTrue(e1.equals(e2))
assertFalse(e1.equals(e2))
assertTrue(e1.equals(e2))
assertFalse(e1.equals(e2))
assertTrue(e1.equals(e2))
assertFalse(e1.equals(e2))
assertTrue(e1.equals(e2))
assertFalse(e1.equals(e2))
assertTrue(e1.equals(e2))
assertFalse(e1.equals(e2))
assertTrue(e1.equals(e2))
assertFalse(e1.equals(e2))
assertTrue(e1.equals(e2))
assertTrue(e1 != e2)
assertTrue(e1.getClass() == e2.getClass())
assertTrue(e1.equals(e2))
assertEquals(e1, e2)
assertTrue(e1.equals(e2))
assertFalse(e1.equals(e2))
assertTrue(e1.equals(e2))
assertFalse(e1.equals(e2))
assertTrue(e1.equals(e2))
assertFalse(e1.equals(e2))
assertTrue(e1.equals(e2))
assertFalse(e1.equals(e2))
assertTrue(e1.equals(e2))
assertFalse(e1.equals(e2))
assertTrue(e1.equals(e2))
assertTrue(e1 != e2)
assertTrue(e1.getClass() == e2.getClass())
assertTrue(e1.equals(e2))
assertEquals(e1, e2)
assertTrue(e1.equals(e2))
assertFalse(e1.equals(e2))
assertTrue(e1.equals(e2))
assertFalse(e1.equals(e2))
assertTrue(e1.equals(e2))
assertFalse(e1.equals(e2))
assertTrue(e1.equals(e2))
assertFalse(e1.equals(e2))
assertTrue(e1.equals(e2))
assertFalse(e1.equals(e2))
assertTrue(e1.equals(e2))
assertTrue(e1 != e2)
assertTrue(e1.getClass() == e2.getClass())
assertTrue(e1.equals(e2))
assertEquals(e1, e2)
assertTrue(f1.equals(f2))
assertTrue(f2.equals(f1))
assertFalse(f1.equals(f2))
assertTrue(f1.equals(f2))
assertFalse(f1.equals(f2))
assertTrue(f1.equals(f2))
assertFalse(f1.equals(f2))
assertTrue(f1.equals(f2))
assertFalse(f1.equals(f2))
assertTrue(f1.equals(f2))
assertTrue(f1 != f2)
assertTrue(f1.getClass() == f2.getClass())
assertTrue(f1.equals(f2))
assertEquals(f1, f2)
assertTrue(e1.equals(e2))
assertFalse(e1.equals(e2))
assertTrue(e1.equals(e2))
assertFalse(e1.equals(e2))
assertTrue(e1.equals(e2))
assertFalse(e1.equals(e2))
assertTrue(e1.equals(e2))
assertFalse(e1.equals(e2))
assertTrue(e1.equals(e2))
assertTrue(e1 != e2)
assertTrue(e1.getClass() == e2.getClass())
assertTrue(e1.equals(e2))
assertEquals(e1, e2)
assertTrue(c1.equals(c2))
assertFalse(c1.equals(c2))
assertTrue(c1.equals(c2))
assertTrue(c1 != c2)
assertTrue(c1.getClass() == c2.getClass())
assertTrue(c1.equals(c2))
assertFalse(c1.equals(c2))
assertTrue(c1.equals(c2))
assertEquals(c1, c2)
assertTrue(e1.equals(e2))
assertFalse(e1.equals(e2))
assertTrue(e1.equals(e2))
assertFalse(e1.equals(e2))
assertTrue(e1.equals(e2))
assertFalse(e1.equals(e2))
assertTrue(e1.equals(e2))
assertTrue(e1 != e2)
assertTrue(e1.getClass() == e2.getClass())
assertTrue(e1.equals(e2))
assertEquals(e1, e2)
assertTrue(e1.equals(e2))
assertFalse(e1.equals(e2))
assertTrue(e1.equals(e2))
assertFalse(e1.equals(e2))
assertTrue(e1.equals(e2))
assertFalse(e1.equals(e2))
assertTrue(e1.equals(e2))
assertTrue(e1 != e2)
assertTrue(e1.getClass() == e2.getClass())
assertTrue(e1.equals(e2))
assertEquals(e1, e2)
assertTrue(g1.equals(g2))
assertTrue(g2.equals(g1))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertTrue(g1.equals(g2))
assertTrue(g1.hashCode() == g2.hashCode())
assertTrue(g1 != g2)
assertTrue(g1.getClass() == g2.getClass())
assertTrue(g1.equals(g2))
assertTrue(g1 instanceof PublicCloneable)
assertEquals(g1, g2)
assertTrue(g1.equals(g2))
assertTrue(g2.equals(g1))
assertTrue(g1.equals(g2))
assertTrue(g1.hashCode() == g2.hashCode())
assertTrue(g1 != g2)
assertTrue(g1.getClass() == g2.getClass())
assertTrue(g1.equals(g2))
assertTrue(g1 instanceof PublicCloneable)
assertEquals(g1, g2)
assertTrue(g1.equals(g2))
assertTrue(g2.equals(g1))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertTrue(g1.equals(g2))
assertTrue(g1.hashCode() == g2.hashCode())
assertTrue(g1 != g2)
assertTrue(g1.getClass() == g2.getClass())
assertTrue(g1.equals(g2))
assertTrue(g1 instanceof PublicCloneable)
assertEquals(g1, g2)
assertTrue(g1 != g2)
assertTrue(g1.getClass() == g2.getClass())
assertTrue(g1.equals(g2))
assertTrue(g1 instanceof PublicCloneable)
assertEquals(g1, g2)
assertTrue(s.startsWith("1"))
assertTrue(s.endsWith("000"))
assertEquals("-", s)
assertTrue(g1.equals(g2))
assertTrue(g2.equals(g1))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertTrue(g1.equals(g2))
assertTrue(g1.hashCode() == g2.hashCode())
assertTrue(g1 != g2)
assertTrue(g1.getClass() == g2.getClass())
assertTrue(g1.equals(g2))
assertTrue(g1 instanceof PublicCloneable)
assertEquals(g1, g2)
assertFalse(g1.equals(g2))
assertEquals("Series 1", g.generateLabel(dataset, 0))
assertEquals("Series 2", g.generateLabel(dataset, 1))
assertTrue(g1.equals(g2))
assertTrue(g2.equals(g1))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertTrue(g1.equals(g2))
assertTrue(g1.hashCode() == g2.hashCode())
assertTrue(g1 != g2)
assertTrue(g1.getClass() == g2.getClass())
assertTrue(g1.equals(g2))
assertTrue(g1 instanceof PublicCloneable)
assertEquals(g1, g2)
assertTrue(g1.equals(g2))
assertTrue(g2.equals(g1))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertTrue(g1.equals(g2))
assertTrue(g1.hashCode() == g2.hashCode())
assertTrue(g1 != g2)
assertTrue(g1.getClass() == g2.getClass())
assertTrue(g1.equals(g2))
assertTrue(g1 instanceof PublicCloneable)
assertEquals(g1, g2)
assertTrue(g1.equals(g2))
assertTrue(g2.equals(g1))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertTrue(g1.equals(g2))
assertTrue(g2.equals(g1))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertTrue(g1.equals(g2))
assertTrue(g1.hashCode() == g2.hashCode())
assertTrue(g1 != g2)
assertTrue(g1.getClass() == g2.getClass())
assertTrue(g1.equals(g2))
assertTrue(g1 instanceof PublicCloneable)
assertEquals(g1, g2)
assertEquals("R0", s)
assertTrue(g1.equals(g2))
assertTrue(g2.equals(g1))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertTrue(g1.equals(g2))
assertTrue(g1.hashCode() == g2.hashCode())
assertTrue(g1 != g2)
assertTrue(g1.getClass() == g2.getClass())
assertTrue(g1.equals(g2))
assertTrue(g1 instanceof PublicCloneable)
assertEquals(g1, g2)
assertEquals(p1, p2)
assertEquals(p1, p2)
assertTrue(g1.equals(g2))
assertTrue(g2.equals(g1))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertTrue(g1.equals(g2))
assertTrue(g1.hashCode() == g2.hashCode())
assertTrue(g1 != g2)
assertTrue(g1.getClass() == g2.getClass())
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertTrue(g1 instanceof PublicCloneable)
assertEquals(g1, g2)
assertTrue(g1.equals(g2))
assertTrue(g2.equals(g1))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertTrue(g1.equals(g2))
assertTrue(g2.equals(g1))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertTrue(g1.equals(g2))
assertTrue(g1.hashCode() == g2.hashCode())
assertTrue(g1 != g2)
assertTrue(g1.getClass() == g2.getClass())
assertTrue(g1.equals(g2))
assertTrue(g1 instanceof PublicCloneable)
assertEquals(g1, g2)
assertEquals("{3}", g.generateLabel(dataset, 0, 0))
assertEquals("{3}", g.generateLabel(dataset, 0, 1))
assertTrue(g1.equals(g2))
assertTrue(g2.equals(g1))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertTrue(g1.hashCode() == g2.hashCode())
assertTrue(g1 != g2)
assertTrue(g1.getClass() == g2.getClass())
assertTrue(g1.equals(g2))
assertTrue(g1 instanceof PublicCloneable)
assertEquals(g1, g2)
assertTrue(g1.equals(g2))
assertTrue(g2.equals(g1))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertTrue(g1.hashCode() == g2.hashCode())
assertTrue(g1 != g2)
assertTrue(g1.getClass() == g2.getClass())
assertTrue(g1.equals(g2))
assertTrue(g1 instanceof PublicCloneable)
assertEquals(g1, g2)
assertTrue(g1.equals(g2))
assertTrue(g2.equals(g1))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertTrue(g1.equals(g2))
assertTrue(g1.hashCode() == g2.hashCode())
assertTrue(g1 != g2)
assertTrue(g1.getClass() == g2.getClass())
assertTrue(g1.equals(g2))
assertTrue(g1 instanceof PublicCloneable)
assertEquals(g1, g2)
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertTrue(g2.equals(g1))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertTrue(g1.equals(g2))
assertTrue(g1.hashCode() == g2.hashCode())
assertTrue(g1 != g2)
assertTrue(g1.getClass() == g2.getClass())
assertTrue(g1.equals(g2))
assertTrue(g1 instanceof PublicCloneable)
assertEquals(g1, g2)
assertTrue(ItemLabelAnchor.INSIDE1.equals(ItemLabelAnchor.INSIDE1))
assertFalse(ItemLabelAnchor.INSIDE1.equals(ItemLabelAnchor.INSIDE2))
assertTrue(a1 == a2)
assertTrue(g1.equals(g2))
assertTrue(g2.equals(g1))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertTrue(g1.equals(g2))
assertTrue(g2.equals(g1))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertTrue(g1.equals(g2))
assertTrue(g1.hashCode() == g2.hashCode())
assertTrue(g1 != g2)
assertTrue(g1.getClass() == g2.getClass())
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertTrue(g1 != g2)
assertTrue(g1.getClass() == g2.getClass())
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertTrue(g1 instanceof PublicCloneable)
assertEquals(g1, g2)
assertTrue(g1.equals(g2))
assertTrue(g2.equals(g1))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertTrue(g1.equals(g2))
assertTrue(g1.hashCode() == g2.hashCode())
assertTrue(g1 != g2)
assertTrue(g1.getClass() == g2.getClass())
assertTrue(g1.equals(g2))
assertTrue(g1.getNumberFormat() != g2.getNumberFormat())
assertTrue(g1.getPercentFormat() != g2.getPercentFormat())
assertTrue(g1 instanceof PublicCloneable)
assertEquals(g1, g2)
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertTrue(g1.equals(g2))
assertTrue(g1.hashCode() == g2.hashCode())
assertTrue(g1 != g2)
assertTrue(g1.getClass() == g2.getClass())
assertTrue(g1.equals(g2))
assertTrue(g1 instanceof PublicCloneable)
assertEquals(g1, g2)
assertTrue(g1.equals(g2))
assertTrue(g2.equals(g1))
assertEquals(g1, g2)
assertEquals(c1, c2)
assertEquals(c2, c1)
assertFalse(c1.equals(c2))
assertEquals(c1, c2)
assertEquals(c1, c2)
assertNotSame(c1, c2)
assertSame(c1.getClass(), c2.getClass())
assertEquals(c1, c2)
assertFalse(c1.equals(c2))
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertTrue(g1 != g2)
assertTrue(g1.getClass() == g2.getClass())
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertTrue(g1 instanceof PublicCloneable)
assertEquals(g1, g2)
assertEquals(1, g1.getListCount())
assertEquals(0, g1.getURLCount(0))
assertEquals(2, g1.getListCount())
assertEquals(0, g1.getURLCount(0))
assertEquals(1, g1.getURLCount(1))
assertEquals("URL1", g1.getURL(1, 0))
assertEquals("URL1", g1.getURL(1, 0))
assertEquals("index.html?series=R1&amp;category=C1", g1.generateURL(dataset, 0, 0))
assertEquals("index.html?series=R1&amp;category=C2", g1.generateURL(dataset, 0, 1))
assertEquals("index.html?series=R2&amp;category=C2", g1.generateURL(dataset, 1, 1))
assertEquals("index.html?series=R%26&amp;category=C%26", g1.generateURL(dataset, 2, 2))
assertFalse(g1 instanceof PublicCloneable)
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertEquals(g1, g2)
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertFalse(g1 instanceof PublicCloneable)
assertEquals(g1, g2)
assertEquals("chart.jsp?category=Beta&amp;pieIndex=0", url)
assertEquals("chart.jsp?category=Alpha+%271%27&amp;pieIndex=0", url)
assertEquals(g1, g2)
assertFalse(g1 instanceof PublicCloneable)
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertTrue(g1 != g2)
assertTrue(g1.getClass() == g2.getClass())
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1 instanceof PublicCloneable)
assertEquals(g1, g2)
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertTrue(g1 != g2)
assertTrue(g1.getClass() == g2.getClass())
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertTrue(g1 instanceof PublicCloneable)
assertEquals(g1, g2)
assertEquals(1, g1.getListCount())
assertEquals(0, g1.getURLCount(0))
assertEquals(2, g1.getListCount())
assertEquals(0, g1.getURLCount(0))
assertEquals(1, g1.getURLCount(1))
assertEquals("URL1", g1.getURL(1, 0))
assertEquals("URL1", g1.getURL(1, 0))
assertTrue(s.startsWith("index.html?series=Series+%271%27&amp;item="))
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertEquals(g1, g2)
assertFalse(g1 instanceof PublicCloneable)
assertEquals(true, l.flag)
assertTrue(tt2 == tt)
assertTrue(url2 == url1)
assertEquals(null, m1.getPaint("A"))
assertEquals(Color.RED, m1.getPaint("A"))
assertEquals(null, m1.getPaint("A"))
assertEquals(Color.RED, m1.getPaint("A"))
assertEquals(m1, m1)
assertEquals(m1, m2)
assertFalse(m1.equals(null))
assertFalse(m1.equals("ABC"))
assertFalse(m1.equals(m2))
assertEquals(m1, m2)
assertFalse(m1.equals(m2))
assertEquals(m1, m2)
assertFalse(m1.equals(m2))
assertEquals(m1, m2)
assertEquals(m1, m2)
assertEquals(m1, m2)
assertEquals(m1, m2)
assertEquals(m1, m2)
assertEquals(Color.BLUE, m.getPaint(99))
assertEquals(true, l.flag)
assertNull(plot.getDataset())
assertEquals(true, l.flag)
assertTrue(tt2 == tt)
assertEquals(true, l.flag)
assertTrue(tt2 == tt)
assertTrue(tt2 == tt)
assertTrue(url2 == url1)
assertEquals(true, l.flag)
assertTrue(tt2 == tt)
assertEquals(true, l.flag)
assertTrue(tt2 == tt)
assertEquals(t1, t2)
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertTrue(t1.equals(t2))
assertEquals(h1, h2)
assertTrue(t1 != t2)
assertTrue(t1.getClass() == t2.getClass())
assertTrue(t1.equals(t2))
assertEquals(t1, t2)
assertEquals(t1, t2)
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertTrue(t1.equals(t2))
assertEquals(h1, h2)
assertEquals(t1, t2)
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertTrue(t1.equals(t2))
assertEquals(h1, h2)
assertTrue(t1 != t2)
assertTrue(t1.getClass() == t2.getClass())
assertTrue(t1.equals(t2))
assertEquals(t1, t2)
assertEquals(t1, t2)
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertTrue(t1.equals(t2))
assertEquals(h1, h2)
assertTrue(t1 != t2)
assertTrue(t1.getClass() == t2.getClass())
assertTrue(t1.equals(t2))
assertEquals(t1, t2)
assertTrue(l1.equals(l2))
assertTrue(l2.equals(l1))
assertFalse(l1.equals(l2))
assertTrue(l1.equals(l2))
assertFalse(l1.equals(l2))
assertTrue(l1.equals(l2))
assertFalse(l1.equals(l2))
assertTrue(l1.equals(l2))
assertFalse(l1.equals(l2))
assertTrue(l1.equals(l2))
assertFalse(l1.equals(l2))
assertTrue(l1.equals(l2))
assertFalse(l1.equals(l2))
assertTrue(l1.equals(l2))
assertFalse(l1.equals(l2))
assertTrue(l1.equals(l2))
assertFalse(l1.equals(l2))
assertTrue(l1.equals(l2))
assertFalse(l1.equals(l2))
assertTrue(l1.equals(l2))
assertFalse(l1.equals(l2))
assertTrue(l1.equals(l2))
assertTrue(l1.equals(l2))
assertEquals(h1, h2)
assertTrue(l1 != l2)
assertTrue(l1.getClass() == l2.getClass())
assertTrue(l1.equals(l2))
assertEquals(l1, l2)
assertNull(t.getBackgroundPaint())
assertEquals(t1, t2)
assertEquals(t2, t1)
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertTrue(t1.equals(t2))
assertEquals(h1, h2)
assertTrue(t1 != t2)
assertTrue(t1.getClass() == t2.getClass())
assertTrue(t1.equals(t2))
assertEquals(t1, t2)
assertEquals(g1, g2)
assertEquals(g2, g1)
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertTrue(g1.equals(g2))
assertEquals(h1, h2)
assertTrue(g1 != g2)
assertTrue(g1.getClass() == g2.getClass())
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1 != g2)
assertTrue(g1.getClass() == g2.getClass())
assertTrue(g1.equals(g2))
assertFalse(g1.equals(g2))
assertTrue(g1.equals(g2))
assertEquals(t1, t2)
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertTrue(t1.equals(t2))
assertEquals(h1, h2)
assertTrue(t1 != t2)
assertTrue(t1.getClass() == t2.getClass())
assertTrue(t1.equals(t2))
assertFalse(t1.equals(t2))
assertTrue(t1.equals(t2))
assertTrue(t1.equals(t2))
assertTrue(t2.getSources()[0].equals(plot))
assertEquals(item1, item2)
assertEquals(item2, item1)
assertFalse(item1.equals(item2))
assertEquals(item1, item2)
assertFalse(item1.equals(item2))
assertEquals(item1, item2)
assertFalse(item1.equals(item2))
assertEquals(item1, item2)
assertFalse(item1.equals(item2))
assertEquals(item1, item2)
assertFalse(item1.equals(item2))
assertEquals(item1, item2)
assertFalse(item1.equals(item2))
assertEquals(item1, item2)
assertFalse(item1.equals(item2))
assertEquals(item1, item2)
assertFalse(item1.equals(item2))
assertEquals(item1, item2)
assertFalse(item1.equals(item2))
assertEquals(item1, item2)
assertFalse(item1.equals(item2))
assertEquals(item1, item2)
assertFalse(item1.equals(item2))
assertEquals(item1, item2)
assertFalse(item1.equals(item2))
assertEquals(item1, item2)
assertFalse(item1.equals(item2))
assertEquals(item1, item2)
assertFalse(item1.equals(item2))
assertEquals(item1, item2)
assertFalse(item1.equals(item2))
assertEquals(item1, item2)
assertFalse(item1.equals(item2))
assertEquals(item1, item2)
assertFalse(item1.equals(item2))
assertEquals(item1, item2)
assertFalse(item1.equals(item2))
assertEquals(item1, item2)
assertFalse(item1.equals(item2))
assertEquals(item1, item2)
assertEquals(item1, item2)
assertEquals(item1, item2)
assertNotSame(item1, item2)
assertSame(item1.getClass(), item2.getClass())
assertEquals(item1, item2)
assertSame(item1.getDataset(), item2.getDataset())
assertEquals(true, l.flag)
assertTrue(tt2 == tt)
assertEquals(h1, h2)
assertFalse(h1 == h3)
assertEquals(true, l.flag)
assertTrue(tt2 == tt)
assertEquals(true, l.flag)
assertTrue(tt2 == tt)
assertTrue(url2 == url1)
assertEquals(true, l.flag)
assertTrue(tt2 == tt)
assertSame(tt2, tt)
assertSame(url2, url1)
assertEquals(true, l.flag)
assertEquals(null, panel.getChart())
assertEquals(null, panel.getChart())
assertEquals(1, listeners.length)
assertEquals(this, listeners[0])
assertEquals(0, listeners.length)
assertEquals(0, listeners.length)
assertTrue(pass)
assertTrue(pass)
assertEquals(1, this.chartChangeEvents.size())
assertEquals(1, this.chartChangeEvents.size())
assertEquals(1, this.chartChangeEvents.size())
assertEquals(1, this.chartChangeEvents.size())
assertEquals(1, this.chartChangeEvents.size())
assertEquals(1, this.chartChangeEvents.size())
assertEquals(1, this.chartChangeEvents.size())
assertEquals(1, this.chartChangeEvents.size())
assertEquals(1, this.chartChangeEvents.size())
assertEquals(1, this.chartChangeEvents.size())
assertTrue(panel.isMouseWheelEnabled())
assertTrue(panel.isMouseWheelEnabled())
assertFalse(panel.isMouseWheelEnabled())
assertFalse(LineUtils.clipLine(line, rect))
assertTrue(lineEquals(line, 0.0, 0.0, 0.0, 0.0))
assertFalse(LineUtils.clipLine(line, rect))
assertTrue(lineEquals(line, 0.5, 0.5, 0.6, 0.6))
assertFalse(LineUtils.clipLine(line, rect))
assertTrue(lineEquals(line, 0.5, 0.5, 1.6, 0.6))
assertFalse(LineUtils.clipLine(line, rect))
assertTrue(lineEquals(line, 0.5, 0.5, 2.6, 0.6))
assertFalse(LineUtils.clipLine(line, rect))
assertTrue(lineEquals(line, 0.5, 0.5, 0.6, 1.6))
assertTrue(LineUtils.clipLine(line, rect))
assertTrue(lineEquals(line, 1.0, 1.0, 1.6, 1.6))
assertTrue(LineUtils.clipLine(line, rect))
assertTrue(lineEquals(line, 1.4545454545454546, 1.0, 2.0, 1.2857142857142858))
assertFalse(LineUtils.clipLine(line, rect))
assertTrue(lineEquals(line, 0.5, 0.5, 0.5, 2.6))
assertTrue(LineUtils.clipLine(line, rect))
assertTrue(lineEquals(line, 1.0, 1.55, 1.2142857142857142, 2.0))
assertTrue(LineUtils.clipLine(line, rect))
assertTrue(lineEquals(line, 1.0, 1.025, 1.9285714285714284, 2.0))
assertTrue(LineUtils.clipLine(line, rect))
assertTrue(lineEquals(line, 1.0, 1.0, 1.5, 1.5))
assertTrue(LineUtils.clipLine(line, rect))
assertTrue(lineEquals(line, 2.0, 1.25, 1.5, 1.5))
assertTrue(LineUtils.clipLine(line, rect))
assertTrue(lineEquals(line, 1.5, 1.5, 2.0, 1.25))
assertEquals(f1, f2)
assertFalse(f1.equals(f2))
assertTrue(f1.equals(f2))
assertFalse(f1.equals(f2))
assertTrue(f1.equals(f2))
assertFalse(f1.equals(f2))
assertTrue(f1.equals(f2))
assertFalse(f1.equals(f2))
assertTrue(f1.equals(f2))
assertTrue(f1.equals(f2))
assertEquals(h1, h2)
assertTrue(f1 != f2)
assertTrue(f1.getClass() == f2.getClass())
assertTrue(f1.equals(f2))
assertEquals(f1, f2)
assertEquals("2h2m2.500s", s)
assertEquals("02:02:02", s)
assertEquals(df1, df2)
assertFalse(df1.equals(df2))
assertTrue(df1.equals(df2))
assertFalse(df1.equals(df2))
assertTrue(df1.equals(df2))
assertFalse(df1.equals(df2))
assertTrue(df1.equals(df2))
assertFalse(df1.equals(df2))
assertTrue(df1.equals(df2))
assertFalse(df1.equals(df2))
assertTrue(df1.equals(df2))
assertFalse(df1.equals(df2))
assertTrue(df1.equals(df2))
assertFalse(df1.equals(df2))
assertTrue(df1.equals(df2))
assertFalse(df1.equals(df2))
assertTrue(df1.equals(df2))
assertFalse(df1.equals(df2))
assertTrue(df1.equals(df2))
assertFalse(df1.equals(df2))
assertTrue(df1.equals(df2))
assertTrue(df1.equals(df2))
assertEquals(h1, h2)
assertTrue(df1 != df2)
assertTrue(df1.getClass() == df2.getClass())
assertTrue(df1.equals(df2))
assertFalse(df1.equals(df2))
assertEquals("-0h0m1s", df1.format(new Date(-1000L)))
assertEquals("00:00:00", formatter.format(0))
assertEquals("00:00:59", formatter.format(59))
assertEquals("00:01:01", formatter.format(61))
assertEquals("00:59:59", formatter.format(3599))
assertEquals("01:00:00", formatter.format(3600))
assertEquals("01:00:01", formatter.format(3601))
assertEquals(true, l.flag)
assertNull(plot.getDataset())
