assertNotNull(cdiLiquibase)
assertEquals(shouldBeRunning, cdiLiquibase.isInitialized())
assertEquals(shouldBeRunning, cdiLiquibase.isUpdateSuccessful())
assertEquals(liquibaseSchemas.size(), resolved.size())
Assert.assertEquals(9, previous.size())
assertEquals(schemes.size(), resolved.size())
Assert.assertEquals(16, previous.size())
assertEquals(liquibaseSchemas.size(), resolved.size())
Assert.assertEquals(7, resolved.size())
Assert.assertEquals(1, locations.size())
Assert.assertEquals(mojo.changeLogDirectory, dirLocation)
assertNotNull(mojo)
assertEquals("target/liquibase/myOutputDirectory", mojo.getOutputDirectory())
assertEquals("TIMESTAMP_NTZ", databaseDataType.getType())
assertEquals("TIMESTAMP_NTZ", databaseDataType.toSql())
assertFalse(databaseDataType.isAutoIncrement())
assertEquals(2, aliases.length)
assertTrue(Arrays.asList(aliases).contains("datetime"))
assertTrue(Arrays.asList(aliases).contains("java.sql.Types.DATETIME"))
assertEquals("liquibase.datatype.core.TimestampNTZTypeSnowflake", liquibaseDataType.getClass().getName())
assertTrue(timestampNTZType.supports(snowflakeDatabase))
assertFalse(timestampNTZType.supports(new PostgresDatabase()))
assertEquals(PRIORITY_DATABASE, timestampNTZType.getPriority())
assertEquals(0, timestampNTZType.getMinParameters(snowflakeDatabase))
assertEquals(0, timestampNTZType.getMinParameters(snowflakeDatabase))
assertEquals("snowflake", database.getShortName())
assertEquals("Snowflake", database.getDefaultDatabaseProductName())
assertNull(database.getDefaultPort())
assertEquals("current_timestamp::timestamp_ntz", database.getCurrentDateTimeFunction())
assertEquals(PRIORITY_DATABASE, database.getPriority())
assertFalse(database.supportsInitiallyDeferrableColumns())
assertTrue(database.supportsDropTableCascadeConstraints())
assertTrue(database.isCorrectDatabaseImplementation(jdbcConnection))
assertEquals("net.snowflake.client.jdbc.SnowflakeDriver", database.getDefaultDriver("jdbc:snowflake:"))
assertNull(database.getDefaultDriver("jdbc:wrong-name:"))
assertTrue(database.supportsSchemas())
assertTrue(database.supportsCatalogs())
assertFalse(database.supportsCatalogInObjectName(null))
assertTrue(database.supportsSequences())
assertEquals("DATABASECHANGELOG", database.getDatabaseChangeLogTableName())
assertEquals("DATABASECHANGELOGLOCK", database.getDatabaseChangeLogLockTableName())
assertFalse(database.supportsTablespaces())
assertTrue(database.supportsAutoIncrement())
assertEquals("AUTOINCREMENT", database.getAutoIncrementClause())
assertEquals("AUTOINCREMENT (1, 1)", database.getAutoIncrementClause(null, null, null, null))
assertEquals("AUTOINCREMENT (1, 1)", database.getAutoIncrementClause(new BigInteger("1"), new BigInteger("1"), null, null))
assertEquals("AUTOINCREMENT (7, 1)", database.getAutoIncrementClause(new BigInteger("7"), new BigInteger("1"), null, null))
assertEquals("AUTOINCREMENT (1, 7)", database.getAutoIncrementClause(new BigInteger("1"), new BigInteger("7"), null, null))
assertEquals("AUTOINCREMENT (7, 1)", database.getAutoIncrementClause(new BigInteger("7"), null, null, null))
assertEquals("AUTOINCREMENT (1, 7)", database.getAutoIncrementClause(null, new BigInteger("7"), null, null))
assertTrue(database.generateAutoIncrementStartWith(new BigInteger("1")))
assertTrue(database.generateAutoIncrementBy(new BigInteger("1")))
assertTrue(database.supportsRestrictForeignKeys())
assertTrue(database.isReservedWord("table"))
assertNull(database.getDefaultCatalogName())
assertNull(database.getDefaultSchemaName())
assertNull(database.getJdbcCatalogName(new CatalogAndSchema(null, null)))
assertNull(database.getJdbcSchemaName(new CatalogAndSchema(null, null)))
assertEquals(1, pk.getColumnNamesAsList().size())
assertEquals(2, pk.getColumnNamesAsList().size())
assertEquals("id1", pk.getColumnNamesAsList().get(0))
assertEquals("id2", pk.getColumnNamesAsList().get(1))
assertEquals(2, pk.getColumnNamesAsList().size())
assertEquals("id1", pk.getColumnNamesAsList().get(0))
assertEquals("id2", pk.getColumnNamesAsList().get(1))
assertNotNull(ChangeLogSerializerFactory.getInstance())
assertSame(ChangeLogSerializerFactory.getInstance(), ChangeLogSerializerFactory.getInstance())
assertEquals(0, ChangeLogSerializerFactory.getInstance().getSerializers().size())
assertEquals(1, ChangeLogSerializerFactory.getInstance().getSerializers().size())
assertEquals(0, factory.getSerializers().size())
assertEquals(2, factory.getSerializers().size())
assertEquals(1, factory.getSerializers().size())
assertNotSame(instance1, ChangeLogSerializerFactory.getInstance())
assertEquals(6, serializers.size())
assertNotNull(serializer)
assertSame(XMLChangeLogSerializer.class, serializer.getClass())
assertEquals(1, ChangeLogSerializerFactory.getInstance().getSerializers("xml").size())
assertSame(highestPriority, factory.getSerializer("xml"))
assertEquals(3, factory.getSerializers().get("xml").size())
assertEquals("{\n" + "  \"changeSet\": {\n" + "    \"id\": \"1\",\n" + "    \"author\": \"nvoxland\",\n" + "    \"ignore\": true,\n" + "    \"objectQuotingStrategy\": \"LEGACY\",\n" + "    \"preconditions\": {\n" + "      \"preConditions\": {\n" + "        \"nestedPreconditions\": [\n" + "          {\n" + "            \"preConditions\": {\n" + "              \"onError\": \"WARN\",\n" + "              \"onFail\": \"CONTINUE\",\n" + "              \"onSqlOutput\": \"TEST\"\n" + "            }\n" + "          }\n" + "        ]\n" + "        ,\n" + "        \"onError\": \"CONTINUE\",\n" + "        \"onFail\": \"MARK_RAN\",\n" + "        \"onSqlOutput\": \"FAIL\"\n" + "      }\n" + "    },\n" + "    \"runInTransaction\": false,\n" + "    \"runOrder\": \"last\",\n" + "    \"changes\": [\n" + "      {\n" + "        \"addColumn\": {\n" + "          \"catalogName\": \"cat\",\n" + "          \"columns\": [\n" + "            {\n" + "              \"column\": {\n" + "                \"defaultValueNumeric\": 3,\n" + "                \"name\": \"col1\"\n" + "              }\n" + "            },\n" + "            {\n" + "              \"column\": {\n" + "                \"defaultValueComputed\": \"NOW()\",\n" + "                \"name\": \"col2\"\n" + "              }\n" + "            },\n" + "            {\n" + "              \"column\": {\n" + "                \"defaultValueBoolean\": true,\n" + "                \"name\": \"col3\"\n" + "              }\n" + "            },\n" + "            {\n" + "              \"column\": {\n" + "                \"defaultValueDate\": \"1970-01-01T00:00:00\",\n" + "                \"name\": \"col2\"\n" + "              }\n" + "            },\n" + "            {\n" + "              \"column\": {\n" + "                \"defaultValueSequenceNext\": \"seq_me\",\n" + "                \"name\": \"col2\"\n" + "              }\n" + "            }\n" + "          ]\n" + "          \n" + "        }\n" + "      }\n" + "    ]\n" + "    \n" + "  }\n" + "}\n", serializedJson)
assertEquals("addAutoIncrement", node.getTagName())
assertEquals("addColumn", node.getTagName())
assertEquals("TAB", node.getAttribute("tableName"))
assertEquals(1, columns.getLength())
assertEquals("column", ((Element) columns.item(0)).getTagName())
assertEquals("NEWCOL", ((Element) columns.item(0)).getAttribute("name"))
assertEquals("TYP", ((Element) columns.item(0)).getAttribute("type"))
assertEquals("addDefaultValue", node.getTagName())
assertEquals("SCHEMA_NAME", node.getAttribute("schemaName"))
assertEquals("TABLE_NAME", node.getAttribute("tableName"))
assertEquals("COLUMN_NAME", node.getAttribute("columnName"))
assertEquals("DEF STRING", node.getAttribute("defaultValue"))
assertEquals("42", node.getAttribute("defaultValueNumeric"))
assertEquals("true", node.getAttribute("defaultValueBoolean"))
assertEquals("2007-01-02", node.getAttribute("defaultValueDate"))
assertEquals("sampleSeq", node.getAttribute("defaultValueSequenceNext"))
assertEquals("addForeignKeyConstraint", node.getTagName())
assertEquals("FK_NAME", node.getAttribute("constraintName"))
assertEquals("BASE_SCHEMA_NAME", node.getAttribute("baseTableSchemaName"))
assertEquals("BASE_TABLE_NAME", node.getAttribute("baseTableName"))
assertEquals("BASE_COL_NAME", node.getAttribute("baseColumnNames"))
assertEquals("REF_SCHEMA_NAME", node.getAttribute("referencedTableSchemaName"))
assertEquals("REF_TABLE_NAME", node.getAttribute("referencedTableName"))
assertEquals("REF_COL_NAME", node.getAttribute("referencedColumnNames"))
assertEquals("true", node.getAttribute("deferrable"))
assertEquals("true", node.getAttribute("initiallyDeferred"))
assertEquals("true", node.getAttribute("validate"))
assertEquals("CASCADE", node.getAttribute("onDelete"))
assertEquals("CASCADE", node.getAttribute("onUpdate"))
assertEquals("addNotNullConstraint", node.getTagName())
assertEquals("TABLE_NAME", node.getAttribute("tableName"))
assertEquals("COL_HERE", node.getAttribute("columnName"))
assertEquals("DEFAULT_VALUE", node.getAttribute("defaultNullValue"))
assertEquals("addPrimaryKey", node.getTagName())
assertEquals("SCHEMA_NAME", node.getAttribute("schemaName"))
assertEquals("TABLE_NAME", node.getAttribute("tableName"))
assertEquals("COL_HERE", node.getAttribute("columnNames"))
assertEquals("PK_NAME", node.getAttribute("constraintName"))
assertEquals("TABLESPACE_NAME", node.getAttribute("tablespace"))
assertEquals("true", node.getAttribute("validate"))
assertEquals("addUniqueConstraint", node.getTagName())
assertEquals("SCHEMA_NAME", node.getAttribute("schemaName"))
assertEquals("TABLE_NAME", node.getAttribute("tableName"))
assertEquals("COL_HERE", node.getAttribute("columnNames"))
assertEquals("PK_NAME", node.getAttribute("constraintName"))
assertEquals("TABLESPACE_NAME", node.getAttribute("tablespace"))
assertEquals("true", node.getAttribute("disabled"))
assertEquals("true", node.getAttribute("deferrable"))
assertEquals("true", node.getAttribute("initiallyDeferred"))
assertEquals("true", node.getAttribute("validate"))
assertEquals("alterSequence", node.getNodeName())
assertEquals("SEQ_NAME", node.getAttribute("sequenceName"))
assertFalse(node.hasAttribute("incrementBy"))
assertFalse(node.hasAttribute("maxValue"))
assertFalse(node.hasAttribute("minValue"))
assertFalse(node.hasAttribute("ordered"))
assertEquals("alterSequence", node.getNodeName())
assertEquals("SCHEMA_NAME", node.getAttribute("schemaName"))
assertEquals("SEQ_NAME", node.getAttribute("sequenceName"))
assertEquals("1", node.getAttribute("incrementBy"))
assertEquals("2", node.getAttribute("maxValue"))
assertEquals("3", node.getAttribute("minValue"))
assertEquals("true", node.getAttribute("ordered"))
assertEquals("2008", node.getAttribute("cacheSize"))
assertEquals("column", element.getTagName())
assertEquals("id", element.getAttribute("name"))
assertEquals("varchar(255)", element.getAttribute("type"))
assertEquals("test Value", element.getAttribute("defaultValue"))
assertEquals("some value here", element.getAttribute("value"))
assertEquals(12, constraintsElement.getAttributes().getLength())
assertEquals("true", constraintsElement.getAttribute("deferrable"))
assertEquals("true", constraintsElement.getAttribute("validateNullable"))
assertEquals("true", constraintsElement.getAttribute("validateUnique"))
assertEquals("true", constraintsElement.getAttribute("validatePrimaryKey"))
assertEquals("true", constraintsElement.getAttribute("validateForeignKey"))
assertEquals("true", constraintsElement.getAttribute("deleteCascade"))
assertEquals("FK_NAME", constraintsElement.getAttribute("foreignKeyName"))
assertEquals("true", constraintsElement.getAttribute("initiallyDeferred"))
assertEquals("false", constraintsElement.getAttribute("nullable"))
assertEquals("true", constraintsElement.getAttribute("primaryKey"))
assertEquals("state(id)", constraintsElement.getAttribute("references"))
assertEquals("true", constraintsElement.getAttribute("unique"))
assertEquals("createIndex", element.getTagName())
assertEquals("IDX_TEST", element.getAttribute("indexName"))
assertEquals("TAB_NAME", element.getAttribute("tableName"))
assertEquals(2, element.getChildNodes().getLength())
assertEquals("column", ((Element) element.getChildNodes().item(0)).getTagName())
assertEquals("COL1", ((Element) element.getChildNodes().item(0)).getAttribute("name"))
assertEquals("column", ((Element) element.getChildNodes().item(1)).getTagName())
assertEquals("COL2", ((Element) element.getChildNodes().item(1)).getAttribute("name"))
assertEquals("true", ((Element) element.getChildNodes().item(1)).getAttribute("descending"))
assertEquals("createProcedure", element.getTagName())
assertEquals("CREATE PROC PROCBODY HERE", element.getTextContent())
assertEquals("createSequence", node.getNodeName())
assertEquals("SEQ_NAME", node.getAttribute("sequenceName"))
assertFalse(node.hasAttribute("incrementBy"))
assertFalse(node.hasAttribute("maxValue"))
assertFalse(node.hasAttribute("minValue"))
assertFalse(node.hasAttribute("ordered"))
assertFalse(node.hasAttribute("startValue"))
assertFalse(node.hasAttribute("cycle"))
assertEquals("createSequence", node.getNodeName())
assertEquals("SEQ_NAME", node.getAttribute("sequenceName"))
assertEquals("1", node.getAttribute("incrementBy"))
assertEquals("2", node.getAttribute("maxValue"))
assertEquals("3", node.getAttribute("minValue"))
assertEquals("true", node.getAttribute("ordered"))
assertEquals("4", node.getAttribute("startValue"))
assertEquals("true", node.getAttribute("cycle"))
assertEquals("createTable", element.getTagName())
assertEquals(5, element.getChildNodes().getLength())
assertEquals("column", columnElement.getTagName())
assertEquals("id", columnElement.getAttribute("name"))
assertEquals("int", columnElement.getAttribute("type"))
assertEquals("constraints", constraintsElement.getTagName())
assertEquals(2, constraintsElement.getAttributes().getLength())
assertEquals("true", constraintsElement.getAttribute("primaryKey"))
assertEquals("false", constraintsElement.getAttribute("nullable"))
assertEquals("column", columnElement.getTagName())
assertEquals("name", columnElement.getAttribute("name"))
assertEquals("varchar(255)", columnElement.getAttribute("type"))
assertEquals("column", columnElement.getTagName())
assertEquals("state_id", columnElement.getAttribute("name"))
assertEquals("constraints", constraintsElement.getTagName())
assertEquals(5, constraintsElement.getAttributes().getLength())
assertEquals("false", constraintsElement.getAttribute("nullable"))
assertEquals("true", constraintsElement.getAttribute("deferrable"))
assertEquals("true", constraintsElement.getAttribute("initiallyDeferred"))
assertEquals("fk_tab_ref", constraintsElement.getAttribute("foreignKeyName"))
assertEquals("state(id)", constraintsElement.getAttribute("references"))
assertEquals("column", columnElement.getTagName())
assertEquals("phone", columnElement.getAttribute("name"))
assertEquals("varchar(255)", columnElement.getAttribute("type"))
assertEquals("column", columnElement.getTagName())
assertEquals("phone2", columnElement.getAttribute("name"))
assertEquals("varchar(255)", columnElement.getAttribute("type"))
assertEquals("constraints", constraintsElement.getTagName())
assertEquals(1, constraintsElement.getAttributes().getLength())
assertEquals("true", constraintsElement.getAttribute("unique"))
assertEquals("dropColumn", node.getTagName())
assertFalse(node.hasAttribute("schemaName"))
assertEquals("TABLE_NAME", node.getAttribute("tableName"))
assertEquals("COL_NAME", node.getAttribute("columnName"))
assertEquals("dropColumn", node.getTagName())
assertEquals("SCHEMA_NAME", node.getAttribute("schemaName"))
assertEquals("TABLE_NAME", node.getAttribute("tableName"))
assertEquals("COL_NAME", node.getAttribute("columnName"))
assertEquals("dropDefaultValue", node.getTagName())
assertFalse(node.hasAttribute("schemaName"))
assertEquals("TABLE_NAME", node.getAttribute("tableName"))
assertEquals("COL_NAME", node.getAttribute("columnName"))
assertEquals("dropDefaultValue", node.getTagName())
assertEquals("SCHEMA_NAME", node.getAttribute("schemaName"))
assertEquals("TABLE_NAME", node.getAttribute("tableName"))
assertEquals("COL_NAME", node.getAttribute("columnName"))
assertEquals("dropForeignKeyConstraint", node.getTagName())
assertEquals("SCHEMA_NAME", node.getAttribute("baseTableSchemaName"))
assertEquals("TABLE_NAME", node.getAttribute("baseTableName"))
assertEquals("FK_NAME", node.getAttribute("constraintName"))
assertEquals("dropIndex", element.getTagName())
assertEquals("IDX_NAME", element.getAttribute("indexName"))
assertEquals("dropNotNullConstraint", node.getTagName())
assertEquals("TABLE_NAME", node.getAttribute("tableName"))
assertEquals("COL_HERE", node.getAttribute("columnName"))
assertEquals("dropPrimaryKey", node.getTagName())
assertEquals("SCHEMA_NAME", node.getAttribute("schemaName"))
assertEquals("TABLE_NAME", node.getAttribute("tableName"))
assertEquals("PK_NAME", node.getAttribute("constraintName"))
assertEquals("dropSequence", element.getTagName())
assertEquals("SEQ_NAME", element.getAttribute("sequenceName"))
assertEquals("dropTable", element.getTagName())
assertEquals("TAB_NAME", element.getAttribute("tableName"))
assertEquals("true", element.getAttribute("cascadeConstraints"))
assertEquals("dropTable", element.getTagName())
assertEquals("TAB_NAME", element.getAttribute("tableName"))
assertEquals("true", element.getAttribute("cascadeConstraints"))
assertTrue(element.hasAttribute("schemaName"))
assertEquals("dropTable", element.getTagName())
assertFalse(element.hasAttribute("cascadeConstraints"))
assertEquals("dropUniqueConstraint", element.getTagName())
assertEquals("SCHEMA_NAME", element.getAttribute("schemaName"))
assertEquals("TAB_NAME", element.getAttribute("tableName"))
assertEquals("UQ_CONSTRAINT", element.getAttribute("constraintName"))
assertEquals("dropUniqueConstraint", element.getTagName())
assertEquals("TAB_NAME", element.getAttribute("tableName"))
assertEquals("UQ_CONSTRAINT", element.getAttribute("constraintName"))
assertFalse(element.hasAttribute("schemaName"))
assertEquals("dropView", node.getTagName())
assertFalse(node.hasAttribute("schemaName"))
assertEquals("VIEW_NAME", node.getAttribute("viewName"))
assertEquals("dropView", node.getTagName())
assertEquals("SCHEMA_NAME", node.getAttribute("schemaName"))
assertEquals("VIEW_NAME", node.getAttribute("viewName"))
assertEquals("insert", node.getTagName())
assertEquals("TABLE_NAME", node.getAttribute("tableName"))
assertEquals(4, columns.getLength())
assertEquals("column", ((Element) columns.item(0)).getTagName())
assertEquals("id", ((Element) columns.item(0)).getAttribute("name"))
assertEquals("123", ((Element) columns.item(0)).getAttribute("valueNumeric"))
assertEquals("column", ((Element) columns.item(1)).getTagName())
assertEquals("name", ((Element) columns.item(1)).getAttribute("name"))
assertEquals("Andrew", ((Element) columns.item(1)).getAttribute("value"))
assertEquals("column", ((Element) columns.item(2)).getTagName())
assertEquals("age", ((Element) columns.item(2)).getAttribute("name"))
assertEquals("21", ((Element) columns.item(2)).getAttribute("valueNumeric"))
assertEquals("column", ((Element) columns.item(3)).getTagName())
assertEquals("height", ((Element) columns.item(3)).getAttribute("name"))
assertEquals("1.78", ((Element) columns.item(3)).getAttribute("valueNumeric"))
assertEquals("loadData", node.getNodeName())
assertEquals("SCHEMA_NAME", node.getAttribute("schemaName"))
assertEquals("TABLE_NAME", node.getAttribute("tableName"))
assertEquals("FILE_NAME", node.getAttribute("file"))
assertEquals(StandardCharsets.UTF_8.name(), node.getAttribute("encoding"))
assertEquals("sql", element.getTagName())
assertEquals("SOME SQL HERE", element.getTextContent())
assertEquals("renameColumn", node.getTagName())
assertEquals("SCHEMA_NAME", node.getAttribute("schemaName"))
assertEquals("TABLE_NAME", node.getAttribute("tableName"))
assertEquals("oldColName", node.getAttribute("oldColumnName"))
assertEquals("newColName", node.getAttribute("newColumnName"))
assertEquals("renameTable", node.getTagName())
assertEquals("SCHEMA_NAME", node.getAttribute("schemaName"))
assertEquals("OLD_NAME", node.getAttribute("oldTableName"))
assertEquals("NEW_NAME", node.getAttribute("newTableName"))
assertEquals("renameSequence", node.getTagName())
assertEquals("SCHEMA_NAME", node.getAttribute("schemaName"))
assertEquals("OLD_NAME", node.getAttribute("oldSequenceName"))
assertEquals("NEW_NAME", node.getAttribute("newSequenceName"))
assertEquals("renameView", node.getTagName())
assertEquals("SCHEMA_NAME", node.getAttribute("schemaName"))
assertEquals("OLD_NAME", node.getAttribute("oldViewName"))
assertEquals("NEW_NAME", node.getAttribute("newViewName"))
assertEquals("sqlFile", element.getTagName())
assertEquals(fileName, element.getAttribute("path"))
assertEquals("tagDatabase", node.getTagName())
assertEquals("TAG_NAME", node.getAttribute("tag"))
assertEquals("createView", node.getTagName())
assertEquals("SCHEMA_NAME", node.getAttribute("schemaName"))
assertEquals("VIEW_NAME", node.getAttribute("viewName"))
assertEquals("SELECT * FROM EXISTING_TABLE", node.getTextContent())
assertEquals("<update catalogName=\"a\"\n" + "        schemaName=\"b\"\n" + "        tableName=\"c\">\n" + "    <where>Some Text</where>\n" + "</update>", out)
assertEquals("<changeSet author=\"tms\"\n" + "        contextFilter=\"context\"\n" + "        created=\"created\"\n" + "        dbms=\"mssql\"\n" + "        failOnError=\"true\"\n" + "        id=\"1\"\n" + "        ignore=\"true\"\n" + "        labels=\"label\"\n" + "        logicalFilePath=\"path/to/file.json\"\n" + "        objectQuotingStrategy=\"LEGACY\"\n" + "        runAlways=\"true\"\n" + "        runInTransaction=\"false\"\n" + "        runOnChange=\"true\"\n" + "        runOrder=\"last\"/>", out)
assertEquals("<createTable catalogName=\"a\"\n" + "        schemaName=\"b\"\n" + "        tableName=\"c\">\n" + "    <column defaultValue=\"x1\" name=\"x\"/>\n" + "    <column defaultValue=\"y1\" name=\"y\"/>\n" + "</createTable>", out)
assertEquals("<addAutoIncrement catalogName=\"a\"\n" + "        schemaName=\"b\"\n" + "        tableName=\"c\"/>", out)
assertEquals("ValHere", ReflectionSerializer.getInstance().getValue(visitor, "value"))
assertEquals(true, ReflectionSerializer.getInstance().getValue(visitor, "applyToRollback"))
assertEquals(0, errMsgs.size())
assertEquals(1, errMsgs.size())
assertEquals(0, errMsgs.size())
assertEquals("DRIVER", cli.driver)
assertEquals("USERNAME", cli.username)
assertEquals("PASSWD", cli.password)
assertEquals("URL", cli.url)
assertEquals("FILE", cli.changeLogFile)
assertEquals("CLASSPAHT", cli.classpath)
assertEquals("CONTEXTS", cli.contexts)
assertEquals(Boolean.TRUE, cli.promptForNonLocalDatabase)
assertEquals("DRIVER", cli.driver)
assertEquals("PASSED USERNAME", cli.username)
assertEquals("PASSED PASSWD", cli.password)
assertEquals("URL", cli.url)
assertEquals("FILE", cli.changeLogFile)
assertEquals("CLASSPAHT", cli.classpath)
assertEquals("CONTEXTS", cli.contexts)
assertEquals(Boolean.TRUE, cli.promptForNonLocalDatabase)
assertFalse(cli.checkSetup().isEmpty())
assertFalse(cli.checkSetup().isEmpty())
assertFalse(cli.checkSetup().isEmpty())
assertEquals(0, cli.checkSetup().size())
assertEquals(0, cli.checkSetup().size())
assertEquals(0, cli.checkSetup().size())
assertEquals(0, cli.checkSetup().size())
assertEquals(1, cli.checkSetup().size())
assertEquals(0, cli.checkSetup().size())
assertEquals(1, cli.checkSetup().size())
assertEquals(url, cli.url)
assertEquals("--defaultsFile=liquibase.properties migrate", StringUtil.join(Arrays.asList(fixedArgs), " "))
assertEquals("--defaultsFile=liquibase.properties migrate", StringUtil.join(Arrays.asList(fixedArgs), " "))
assertEquals("--driver=DRIVER --username=USERNAME --password=PASSWORD --url=URL --changeLogFile=FILE " + "--classpath=CLASSPATH;CLASSPATH2 --contexts=CONTEXT1,CONTEXT2 " + "--promptForNonLocalDatabase=true migrate", StringUtil.join(Arrays.asList(fixedArgs), " "))
assertTrue(true)
assertNotNull(LockServiceFactory.getInstance())
assertSame(LockServiceFactory.getInstance(), LockServiceFactory.getInstance())
assertNotNull(lockServiceFactory.getLockService(oracle1))
assertNotNull(lockServiceFactory.getLockService(oracle2))
assertNotNull(lockServiceFactory.getLockService(mysql))
assertSame(lockServiceFactory.getLockService(oracle1), lockServiceFactory.getLockService(oracle1))
assertSame(lockServiceFactory.getLockService(oracle2), lockServiceFactory.getLockService(oracle2))
assertSame(lockServiceFactory.getLockService(mysql), lockServiceFactory.getLockService(mysql))
assertNotSame(lockServiceFactory.getLockService(oracle1), lockServiceFactory.getLockService(oracle2))
assertNotSame(lockServiceFactory.getLockService(oracle1), lockServiceFactory.getLockService(mysql))
assertTrue(lockServiceFactory.getLockService(getMockDatabase()) instanceof MockLockService)
assertEquals(expected, bt.objectToSql("'111111111111'", new PostgresDatabase()))
assertEquals(expected, bt.objectToSql("b'111111111111'", new PostgresDatabase()))
assertEquals(expected, bt.objectToSql("'111111111111'::bit", new PostgresDatabase()))
assertEquals(expected, bt.objectToSql("b'111111111111'::bit", new PostgresDatabase()))
assertEquals(expected, bt.objectToSql("'111111111111'::\"bit\"", new PostgresDatabase()))
assertEquals(expected, bt.objectToSql("b'111111111111'::\"bit\"", new PostgresDatabase()))
assertNotEquals("b'1'", bt.objectToSql("'12'", new PostgresDatabase()))
assertEquals(this.getClass().getName().replaceFirst("Test$", ""), generatorUnderTest.getClass().getName())
assertNull(chain.generateSql(new MockSqlStatement(), new MockDatabase()))
assertEquals(0, chain.generateSql(new MockSqlStatement(), new MockDatabase()).length)
assertEquals(2, sql.length)
assertEquals("A1", sql[0].toSql())
assertEquals("A2", sql[1].toSql())
assertEquals(4, sql.length)
assertEquals("B1", sql[0].toSql())
assertEquals("B2", sql[1].toSql())
assertEquals("A1", sql[2].toSql())
assertEquals("A2", sql[3].toSql())
assertEquals(6, sql.length)
assertEquals("C1", sql[0].toSql())
assertEquals("C2", sql[1].toSql())
assertEquals("B1", sql[2].toSql())
assertEquals("B2", sql[3].toSql())
assertEquals("A1", sql[4].toSql())
assertEquals("A2", sql[5].toSql())
assertFalse(validationErrors.hasErrors())
assertFalse(validationErrors.hasErrors())
assertTrue(validationErrors.hasErrors())
assertFalse(validationErrors.hasErrors())
assertTrue(validationErrors.hasErrors())
assertTrue(validationErrors.hasErrors())
assertEquals("CREATE TABLE SCHEMA_NAME.TABLE_NAME (, CONSTRAINT fk_test_parent FOREIGN KEY (id) REFERENCES \"my-schema\".TABLE_NAME(id))", generatedSql[0].toSql())
assertEquals(expectedSql, generatedSql[0].toSql())
assertTrue(actualNames.containsAll(expectedNames))
assertTrue(expectedNames.containsAll(actualNames))
Assert.assertTrue(sql[0].toSql().contains("TEST_TABLE") && sql[0].toSql().contains("col1"))
Assert.assertTrue(sql[2].toSql().contains("TEST_TABLE") && sql[2].toSql().contains("col2"))
Assert.assertTrue(sql[0].toSql().contains("TEST_TABLE") && sql[0].toSql().contains("col1"))
Assert.assertEquals(1, sql.length)
Assert.assertEquals("ALTER TABLE TEST_TABLE DROP col1, DROP col2", sql[0].toSql())
Assert.assertEquals(4, sql.length)
Assert.assertEquals("ALTER TABLE TEST_TABLE DROP COLUMN col1", sql[1].toSql())
Assert.assertEquals("ALTER TABLE TEST_TABLE DROP COLUMN col2", sql[3].toSql())
Assert.assertEquals(2, sql.length)
Assert.assertEquals("ALTER TABLE TEST_TABLE DROP COLUMN col1", sql[1].toSql())
assertEquals("", result)
assertEquals(String.format("UPDATE %s.%s SET %s = '%s' WHERE %s = '%s';\n", SCHEMA_NAME, TABLE_NAME, "col0", "value0", "pk1", "keyvalue1"), result)
assertThat(results, is(arrayWithSize(1)))
assertEquals(String.format("MERGE INTO %s.%s (%s, %s) KEY(%s) VALUES ('%s', '%s');", SCHEMA_NAME, TABLE_NAME, "pk1", "col0", "pk1", "keyvalue1", "value0"), results[0].toSql())
assertThat(results, is(arrayWithSize(1)))
assertEquals(String.format("MERGE INTO %s.%s (%s, %s) KEY(%s) VALUES ('%s', '%s');", SCHEMA_NAME, TABLE_NAME, "pk1", "col0", "pk1", "keyvalue1", "scale values mean"), results[0].toSql())
Assert.assertEquals("CREATE INDEX INDEX1 ON SCHEMA1.TABLE1(COL1, COL2 DESC)", result[0].toSql())
assertEquals(1, sqls.length)
assertTrue(sql.contains("COMMENTS = 'comment12345'"))
assertTrue(sql.contains("CONTEXTS = '(childChangeLogContext1, childChangeLogContext2 AND childChangeLogContext3) AND (includeContext1, includeContext2 AND includeContext3) AND (rootContext1 OR (rootContext2) AND (rootContext3)) AND (changeSetContext1 AND changeSetContext2)'"))
assertTrue(sql.contains("LABELS = 'newlabel123'"))
assertEquals("a", new MarkChangeSetRanGenerator().getLabelsColumn(changeSet))
assertEquals("a,b", new MarkChangeSetRanGenerator().getLabelsColumn(changeSet))
assertEquals("p1,a,b", new MarkChangeSetRanGenerator().getLabelsColumn(changeSet))
assertEquals("p1,a", new MarkChangeSetRanGenerator().getLabelsColumn(changeSet))
assertEquals("p1", new MarkChangeSetRanGenerator().getLabelsColumn(changeSet))
assertEquals("p1", new MarkChangeSetRanGenerator().getLabelsColumn(changeSet))
assertEquals("a", new MarkChangeSetRanGenerator().getContextsColumn(changeSet))
assertEquals("(a or b)", new MarkChangeSetRanGenerator().getContextsColumn(changeSet))
assertEquals("p1 AND (a or b)", new MarkChangeSetRanGenerator().getContextsColumn(changeSet))
assertEquals("p1 AND a", new MarkChangeSetRanGenerator().getContextsColumn(changeSet))
assertEquals("p1", new MarkChangeSetRanGenerator().getContextsColumn(changeSet))
assertEquals("p1", new MarkChangeSetRanGenerator().getContextsColumn(changeSet))
assertTrue(truncatedPath.endsWith("/..."))
assertTrue(truncatedPath.length() <= filePath.length())
assertTrue(validationErrors.getErrorMessages().contains("Cannot add an identity column to derby"))
Assert.assertFalse(generatorUnderTest.validate(drop, new MySQLDatabase(), new MockSqlGeneratorChain()).hasErrors())
Assert.assertFalse(generatorUnderTest.validate(drop, new MSSQLDatabase(), new MockSqlGeneratorChain()).hasErrors())
Assert.assertFalse(generatorUnderTest.validate(drop, new MSSQLDatabase(), new MockSqlGeneratorChain()).hasErrors())
assertEquals(String.format("INSERT INTO %s.%s (col3) VALUES (nextval('%s.%s'))", SCHEMA_NAME, TABLE_NAME, SCHEMA_NAME, SEQUENCE_NAME), theSql)
assertEquals(String.format("INSERT INTO %s.%s (col3) VALUES (nextval('%s.%s'))", SCHEMA_NAME, TABLE_NAME, SCHEMA_NAME, SEQUENCE_NAME), theSql)
assertTrue(theSql.contains("INSERT INTO mycatalog.mytable (pk_col1, col2) VALUES ('value1', 'value2');"))
assertTrue(theSql.contains("UPDATE mycatalog.mytable"))
assertEquals("DECLARE", sqlLines[lineToCheck].trim())
assertEquals("v_reccount NUMBER := 0;", sqlLines[lineToCheck].trim())
assertEquals("BEGIN", sqlLines[lineToCheck].trim())
assertEquals("SELECT COUNT(*) INTO v_reccount FROM mycatalog.mytable WHERE pk_col1 = 'value1';", sqlLines[lineToCheck].trim())
assertEquals("IF v_reccount = 0 THEN", sqlLines[lineToCheck].trim())
assertEquals("INSERT INTO mycatalog.mytable (pk_col1, col2) VALUES ('value1', 'value2');", sqlLines[lineToCheck])
assertEquals("ELSIF v_reccount = 1 THEN", sqlLines[lineToCheck].trim())
assertEquals("UPDATE mycatalog.mytable SET col2 = 'value2' WHERE pk_col1 = 'value1';", sqlLines[lineToCheck].trim())
assertEquals("END IF;", sqlLines[lineToCheck].trim())
assertEquals("END;", sqlLines[lineToCheck].trim())
assertEquals("UPDATE mycatalog.mytable SET col2 = 'value2' WHERE pk_col1 = 'value1'", sqlLines[lineToCheck].trim())
assertEquals("INSERT INTO mycatalog.mytable (col3) VALUES (myschema.my_seq.nextval)", prepareInsertStatement(sequenceNext))
assertEquals("INSERT INTO mycatalog.mytable (col3) VALUES (myschema.my_seq.nextval)", prepareInsertStatement(sequenceNext))
assertEquals("UPDATE mycatalog.mytable SET col3 = myschema.my_seq.nextval", prepareUpdateStatement(sequenceNext))
assertEquals("UPDATE mycatalog.mytable SET col3 = myschema.my_seq.nextval", prepareUpdateStatement(sequenceNext))
assertEquals("DROP INDEX \"defaultSchema\".\"indexName\"", sqls[0].toSql())
assertEquals("DROP INDEX default_schema.index_name", sqls[0].toSql())
assertEquals("DROP INDEX index_name", sqls[0].toSql())
assertEquals("", result)
assertEquals(String.format("UPDATE %s.%s SET %s = '%s' WHERE %s = '%s';\n", CATALOG_NAME, TABLE_NAME, "col0", "value0", "pk1", "keyvalue1"), result)
assertThat(results, is(arrayWithSize(1)))
assertEquals(String.format("INSERT INTO %s.%s (%s, %s) VALUES ('%s', '%s')\nON DUPLICATE KEY UPDATE col0 = 'value0'", CATALOG_NAME, TABLE_NAME, "pk1", "col0", "keyvalue1", "value0"), results[0].toSql())
assertNotNull(recordCheck)
assertEquals("MERGE INTO mycatalog:myschema.mytable AS dst", lines[lineNumber])
assertEquals("USING (", lines[lineNumber])
assertEquals("\tSELECT 1 AS pk_col1, 2 AS pk_col2, 'value2' AS col2, NULL::INTEGER AS col3", lines[lineNumber])
assertEquals("\tFROM sysmaster:informix.sysdual", lines[lineNumber])
assertEquals(") AS src", lines[lineNumber])
assertEquals("ON dst.pk_col1 = src.pk_col1 AND dst.pk_col2 = src.pk_col2", lines[lineNumber])
assertEquals("WHEN NOT MATCHED THEN", lines[lineNumber])
assertNotNull(insertStatement)
assertEquals("INSERT (dst.pk_col1, dst.pk_col2, dst.col2, dst.col3) VALUES (src.pk_col1, src.pk_col2, src.col2, src.col3)", lines[lineNumber])
assertNotNull(elseStatement)
assertEquals("", lines[lineNumber])
assertNotNull(updateStatement)
assertEquals("WHEN MATCHED THEN", lines[lineNumber])
assertEquals("UPDATE SET dst.col2 = src.col2, dst.col3 = src.col3", lines[lineNumber])
assertNotNull(updateStatement)
assertEquals("", lines[lineNumber])
assertNotNull(o)
assertNotNull(methodName)
fail("Method '" + methodName + "' not found")
assertEquals("DECLARE @reccount integer", lines[lineNumber])
assertEquals("SELECT @reccount = count(*) FROM mycatalog.myschema.mytable WHERE " + where, lines[lineNumber])
assertEquals("IF @reccount = 0", lines[lineNumber])
assertEquals("BEGIN", lines[lineNumber])
assertTrue(lines[lineNumber].startsWith("INSERT"))
assertEquals("END", lines[lineNumber])
assertEquals("ELSE", lines[lineNumber])
assertEquals("BEGIN", lines[lineNumber])
assertTrue(lines[lineNumber].startsWith("UPDATE"))
assertEquals("END", lines[lineNumber])
fail("A execução falhou por uma causa deliberada", "Method '" + methodName + "' not found")
Assert.assertNotNull(o)
Assert.assertNotNull(methodName)
Assert.fail("Method '" + methodName + "' not found")
assertFalse(generatorUnderTest.validate(addPKColumn, new OracleDatabase(), new MockSqlGeneratorChain()).hasErrors())
assertFalse(generatorUnderTest.validate(addPKColumn, new H2Database(), new MockSqlGeneratorChain()).hasErrors())
assertTrue(generatorUnderTest.validate(addPKColumn, new DB2Database(), new MockSqlGeneratorChain()).getErrorMessages().contains("Cannot add a primary key column"))
assertTrue(generatorUnderTest.validate(addPKColumn, new DerbyDatabase(), new MockSqlGeneratorChain()).getErrorMessages().contains("Cannot add a primary key column"))
assertTrue(generatorUnderTest.validate(addPKColumn, new SQLiteDatabase(), new MockSqlGeneratorChain()).getErrorMessages().contains("Cannot add a primary key column"))
assertTrue(generatorUnderTest.validate(new AddColumnStatement(null, null, null, null, null, null, new AutoIncrementConstraint()), new MySQLDatabase(), new MockSqlGeneratorChain()).getErrorMessages().contains("Cannot add a non-primary key identity column"))
assertTrue(generatorUnderTest.validate(new AddColumnStatement(null, null, null, null, null, null, new AutoIncrementConstraint()), new MySQLDatabase(), new MockSqlGeneratorChain()).getErrorMessages().contains("Cannot add a non-primary key identity column"))
assertTrue(generatorUnderTest.validate(new AddColumnStatement(new AddColumnStatement(null, null, TABLE_NAME, COLUMN_NAME, COLUMN_TYPE, null), new AddColumnStatement(null, null, "other_table", "other_column", COLUMN_TYPE, null)), new MySQLDatabase(), new MockSqlGeneratorChain()).getErrorMessages().contains("All columns must be targeted at the same table"))
assertFalse(generatorUnderTest.validate(createSampleSqlStatement(), h2DatabaseV1, new MockSqlGeneratorChain()).hasErrors())
assertFalse(generatorUnderTest.validate(statement, new MySQLDatabase(), new MockSqlGeneratorChain()).hasErrors())
assertFalse(generatorUnderTest.validate(columns, new MySQLDatabase(), new MockSqlGeneratorChain()).hasErrors())
assertEquals(1, sql.length)
assertEquals("ALTER TABLE " + TABLE_NAME + " ADD column1 INT NOT NULL, ADD column2 INT NOT NULL", sql[0].toSql())
assertTrue(actualNames.containsAll(expectedNames))
assertTrue(expectedNames.containsAll(actualNames))
assertFalse(generatorUnderTest.validate(columns, new MariaDBDatabase(), new MockSqlGeneratorChain()).hasErrors())
assertEquals(1, sql.length)
assertEquals("ALTER TABLE " + TABLE_NAME + " ADD `PERIOD` INT NOT NULL", sql[0].toSql())
assertFalse(generatorUnderTest.validate(columns, h2Database, new MockSqlGeneratorChain()).hasErrors())
assertTrue(generatorUnderTest.validate(columns, new H2Database() {

    @Override
    public int getDatabaseMajorVersion() throws DatabaseException {
        return 1;
    }
}, new MockSqlGeneratorChain()).hasErrors())
assertEquals(1, sql.length)
assertEquals("ALTER TABLE table_name ADD ID BIGINT NOT NULL PRIMARY KEY", sql[0].toSql())
assertEquals(5, sql.length)
assertEquals("ALTER TABLE schema_name.table_name ADD column1 BIGINT NULL, ADD column2 BIT(1) NULL", sql[0].toSql())
assertEquals("UPDATE schema_name.table_name SET column1 = 0", sql[1].toSql())
assertEquals("UPDATE schema_name.table_name SET column2 = 1", sql[2].toSql())
assertEquals("ALTER TABLE schema_name.table_name MODIFY column1 BIGINT NOT NULL", sql[3].toSql())
assertEquals("ALTER TABLE schema_name.table_name MODIFY column2 BIT(1) NOT NULL", sql[4].toSql())
assertEquals("UPDATE DATABASECHANGELOG " + "SET MD5SUM = '7:e27bf9c0c2313160ef960a15d44ced47' " + "WHERE ID = N'SYPA: AUTO_START tüüp INT -> TEXT, vaartus 0 00 17 * * ?' " + "AND AUTHOR = 'martin' " + "AND FILENAME = 'db/changelog.xml'", sqls[0].toSql())
assertEquals("UPDATE DATABASECHANGELOG " + "SET MD5SUM = '7:e27bf9c0c2313160ef960a15d44ced47' " + "WHERE ID = N'SYPA: AUTO_START tüüp INT -> TEXT, vaartus 0 00 17 * * ?' " + "AND AUTHOR = 'martin' " + "AND FILENAME = 'db/changelog.xml'", sqls[0].toSql())
assertEquals(1, sql.length)
assertEquals("UPDATE changelog " + "SET TAG = 'v1.0' " + "FROM DATABASECHANGELOG AS changelog " + "INNER JOIN (" + "SELECT TOP (1) ID, AUTHOR, FILENAME " + "FROM DATABASECHANGELOG " + "ORDER BY DATEEXECUTED DESC, ORDEREXECUTED DESC" + ") AS latest " + "ON latest.ID = changelog.ID " + "AND latest.AUTHOR = changelog.AUTHOR " + "AND latest.FILENAME = changelog.FILENAME", sql[0].toSql())
assertEquals(1, sql.length)
assertEquals("UPDATE DATABASECHANGELOG " + "SET TAG = 'v1.0' " + "WHERE DATEEXECUTED = (" + "SELECT MAX(DATEEXECUTED) " + "FROM DATABASECHANGELOG" + ")", sql[0].toSql())
assertEquals(1, sql.length)
assertEquals("ALTER TABLE catalog1:schema2.table3 MODIFY (column4 TYPE5 DEFAULT 'default-value-6')", sql[0].toSql())
assertEquals("ALTER TABLE tbl1 MODIFY (id INT8 DEFAULT 1)", sqls[0].toSql())
assertEquals(1, sqls.length)
assertEquals("ALTER TABLE schema_name.table_name MODIFY column_name NOT NULL", sql.toSql())
assertEquals(1, sqls.length)
assertEquals("ALTER TABLE schema_name.table_name MODIFY column_name NOT NULL ENABLE NOVALIDATE", sql.toSql())
assertEquals(1, sqls.length)
assertEquals("ALTER TABLE schema_name.table_name MODIFY column_name CONSTRAINT constraint_name NOT NULL", sql.toSql())
assertEquals(1, sql.length)
assertEquals("select text from syscomments where id = object_id('dbo.view_name') order by colid", sql[0].toSql())
assertEquals(1, sql.length)
assertEquals("select text from syscomments where id = object_id('OWNER.view_name') order by colid", sql[0].toSql())
assertEquals("DELETE FROM DATABASECHANGELOG " + "WHERE ID = '1' " + "AND AUTHOR = 'a' " + "AND FILENAME = 'server_principals/BUILTIN$Administrators.xml'", sqls[0].toSql())
fail("A execução falhou por uma causa deliberada", "Method '" + methodName + "' not found")
assertNotNull(SqlGeneratorFactory.getInstance())
assertSame(SqlGeneratorFactory.getInstance(), SqlGeneratorFactory.getInstance())
assertEquals(0, factory.getGenerators().size())
assertEquals(1, factory.getGenerators().size())
assertEquals(0, factory.getGenerators().size())
assertEquals(3, factory.getGenerators().size())
assertEquals(2, factory.getGenerators().size())
assertEquals(0, factory.getGenerators().size())
assertEquals(3, factory.getGenerators().size())
assertEquals(2, factory.getGenerators().size())
assertEquals(0, factory.getGenerators().size())
assertEquals(3, factory.getGenerators().size())
assertEquals(3, factory.getGenerators().size())
assertEquals(0, factory.getGenerators(statement, database).size())
assertEquals(2, factory.getGenerators(statement, database).size())
assertEquals(1, factory.getGenerators(statement, database).size())
assertEquals(0, factory.getGenerators(statement, database).size())
assertEquals(2, factory.getGenerators(statement, database).size())
assertEquals(2, factory.getGenerators(statement, database).size())
assertNotSame(factory, SqlGeneratorFactory.getInstance())
assertTrue(generators.size() > 10)
assertNotNull(allGenerators)
assertEquals(1, allGenerators.size())
assertNotNull(Scope.getCurrentScope().getSingleton(ExecutorService.class).getExecutor("jdbc", oracle1))
assertNotNull(Scope.getCurrentScope().getSingleton(ExecutorService.class).getExecutor("jdbc", oracle2))
assertNotNull(Scope.getCurrentScope().getSingleton(ExecutorService.class).getExecutor("jdbc", mysql))
assertSame(Scope.getCurrentScope().getSingleton(ExecutorService.class).getExecutor("jdbc", oracle1), Scope.getCurrentScope().getSingleton(ExecutorService.class).getExecutor("jdbc", oracle1))
assertSame(Scope.getCurrentScope().getSingleton(ExecutorService.class).getExecutor("jdbc", oracle2), Scope.getCurrentScope().getSingleton(ExecutorService.class).getExecutor("jdbc", oracle2))
assertSame(Scope.getCurrentScope().getSingleton(ExecutorService.class).getExecutor("jdbc", mysql), Scope.getCurrentScope().getSingleton(ExecutorService.class).getExecutor("jdbc", mysql))
assertNotSame(Scope.getCurrentScope().getSingleton(ExecutorService.class).getExecutor("jdbc", oracle1), Scope.getCurrentScope().getSingleton(ExecutorService.class).getExecutor("jdbc", oracle2))
assertNotSame(Scope.getCurrentScope().getSingleton(ExecutorService.class).getExecutor("jdbc", oracle1), Scope.getCurrentScope().getSingleton(ExecutorService.class).getExecutor("jdbc", mysql))
assertEquals("", new JdbcExecutor().getErrorCode(new RuntimeException()))
assertEquals("(123) ", new JdbcExecutor().getErrorCode(new SQLException("reason", "sqlState", 123)))
assertEquals("(0) ", new JdbcExecutor().getErrorCode(new SQLException()))
assertNotNull(generator)
assertTrue(generator instanceof StandardDiffGenerator)
assertEquals(primaryKey, statement.getPrimaryKey())
assertEquals(Boolean.FALSE, statement.getOnlyUpdate())
assertEquals(Boolean.TRUE, statement.getOnlyUpdate())
assertEquals(Boolean.FALSE, statement.getOnlyUpdate())
fail("did not find a generator")
assertFalse(new UpdateExecutablePreparedStatement(database, "catalogName", "schemaName", "tableName", new ArrayList<ColumnConfig>(), changeSet, resourceAccessor).continueOnError())
fail("A execução falhou por uma causa deliberada", "did not find a generator")
assertNotEquals(java.sql.Types.NULL, stmt.getParamTypes().get(1).intValue())
assertEquals(java.sql.Types.DATE, stmt.getParamTypes().get(1).intValue())
assertNotEquals(java.sql.Types.NULL, stmt.getParamTypes().get(1).intValue())
assertEquals(java.sql.Types.TIMESTAMP, stmt.getParamTypes().get(1).intValue())
assertNotEquals(java.sql.Types.NULL, stmt.getParamTypes().get(1).intValue())
assertEquals(java.sql.Types.TIMESTAMP, stmt.getParamTypes().get(1).intValue())
assertEquals(java.sql.Types.NULL, stmt.getParamTypes().get(1).intValue())
assertFalse(new InsertExecutablePreparedStatement(database, "catalogName", "schemaName", "tableName", new ArrayList<ColumnConfig>(), changeSet, resourceAccessor).continueOnError())
assertEquals("COL_NAME", constraint.getColumnName())
assertNotNull(ChangeLogParserFactory.getInstance())
assertSame(ChangeLogParserFactory.getInstance(), ChangeLogParserFactory.getInstance())
assertEquals(5, ChangeLogParserFactory.getInstance().getParsers().size())
assertEquals(6, ChangeLogParserFactory.getInstance().getParsers().size())
assertEquals(5, factory.getParsers().size())
assertEquals(7, factory.getParsers().size())
assertEquals(6, factory.getParsers().size())
assertNotSame(instance1, ChangeLogParserFactory.getInstance())
assertEquals(5, generators.size())
assertNotNull(parser)
assertTrue(parser instanceof XMLChangeLogSAXParser)
assertNotNull(defaultParser)
assertTrue(defaultParser instanceof XMLChangeLogSAXParser)
assertNotNull(PreconditionFactory.getInstance())
assertSame(PreconditionFactory.getInstance(), PreconditionFactory.getInstance())
assertEquals(0, PreconditionFactory.getInstance().getPreconditions().size())
assertEquals(1, PreconditionFactory.getInstance().getPreconditions().size())
assertEquals(0, factory.getPreconditions().size())
assertEquals(2, factory.getPreconditions().size())
assertEquals(1, factory.getPreconditions().size())
assertNotSame(instance1, PreconditionFactory.getInstance())
assertTrue(generators.size() > 5)
assertNotNull(precondtion)
assertTrue(precondtion instanceof AndPrecondition)
assertTrue(ranChangeSet.isSameAs(incomingChangeSet))
assertEquals(7, testChangeLogVisitor.visitedChangeSets.size())
assertEquals(7, testChangeLogVisitor.visitedChangeSets.size())
assertEquals(7, testChangeLogVisitor.visitedChangeSets.size())
assertEquals(4, testChangeLogVisitor.visitedChangeSets.size())
assertEquals(3, testChangeLogVisitor.visitedChangeSets.size())
assertEquals("1", testChangeLogVisitor.visitedChangeSets.get(0).getId())
assertEquals("4", testChangeLogVisitor.visitedChangeSets.get(1).getId())
assertEquals("5", testChangeLogVisitor.visitedChangeSets.get(2).getId())
assertEquals(3, testChangeLogVisitor.visitedChangeSets.size())
assertEquals("5", testChangeLogVisitor.visitedChangeSets.get(0).getId())
assertEquals("4", testChangeLogVisitor.visitedChangeSets.get(1).getId())
assertEquals("1", testChangeLogVisitor.visitedChangeSets.get(2).getId())
assertTrue(writer.toString().contains("CREATE TABLE PUBLIC.DATABASECHANGELOG"))
assertTrue(writer.toString().contains("INSERT INTO PUBLIC.DATABASECHANGELOG"))
assertTrue(new File(temporaryFolder.getRoot(), CHANGE_LOG_CSV).exists())
assertFalse(new File(temporaryFolder.getRoot(), CHANGE_LOG_CSV + ".new").exists())
assertFalse(writer.toString().contains("CREATE TABLE PUBLIC.DATABASECHANGELOG"))
assertTrue(writer.toString().contains("INSERT INTO PUBLIC.DATABASECHANGELOG"))
assertFalse(filter.accepts(new ChangeSet("1", "testAuthor", false, false, "path/changelog", null, null, null)).isAccepted())
assertFalse(filter.accepts(new ChangeSet("2", "testAuthor", false, false, "path/changelog", null, null, null)).isAccepted())
assertTrue(filter.accepts(new ChangeSet("3", "testAuthor", false, false, "path/changelog", null, null, null)).isAccepted())
assertTrue(filter.accepts(new ChangeSet(null, null, false, false, null, "test1", null, null)).isAccepted())
assertTrue(filter.accepts(new ChangeSet(null, null, false, false, null, "test2", null, null)).isAccepted())
assertTrue(filter.accepts(new ChangeSet(null, null, false, false, null, "test1, test2", null, null)).isAccepted())
assertTrue(filter.accepts(new ChangeSet(null, null, false, false, null, null, null, null)).isAccepted())
assertTrue(filter.accepts(new ChangeSet(null, null, false, false, null, "test1", null, null)).isAccepted())
assertTrue(filter.accepts(new ChangeSet(null, null, false, false, null, "test2", null, null)).isAccepted())
assertTrue(filter.accepts(new ChangeSet(null, null, false, false, null, "test1, test2", null, null)).isAccepted())
assertTrue(filter.accepts(new ChangeSet(null, null, false, false, null, null, null, null)).isAccepted())
assertTrue(filter.accepts(new ChangeSet(null, null, false, false, null, "test1", null, null)).isAccepted())
assertTrue(filter.accepts(new ChangeSet(null, null, false, false, null, "test1, test2", null, null)).isAccepted())
assertTrue(filter.accepts(new ChangeSet(null, null, false, false, null, null, null, null)).isAccepted())
assertTrue(filter.accepts(new ChangeSet(null, null, false, false, null, "test1", null, null)).isAccepted())
assertTrue(filter.accepts(new ChangeSet(null, null, false, false, null, "test2", null, null)).isAccepted())
assertTrue(filter.accepts(new ChangeSet(null, null, false, false, null, "test1, test2", null, null)).isAccepted())
assertTrue(filter.accepts(new ChangeSet(null, null, false, false, null, null, null, null)).isAccepted())
assertTrue(filter.accepts(new ChangeSet(null, null, false, false, null, "test1", null, null)).isAccepted())
assertTrue(filter.accepts(new ChangeSet(null, null, false, false, null, "test1, test2", null, null)).isAccepted())
assertFalse(filter.accepts(new ChangeSet(null, null, false, false, null, "test2", null, null)).isAccepted())
assertTrue(filter.accepts(new ChangeSet(null, null, false, false, null, null, null, null)).isAccepted())
assertTrue(filter.accepts(new ChangeSet(null, null, false, false, null, "test1", null, null)).isAccepted())
assertTrue(filter.accepts(new ChangeSet(null, null, false, false, null, "test2", null, null)).isAccepted())
assertTrue(filter.accepts(new ChangeSet(null, null, false, false, null, "test1, test2", null, null)).isAccepted())
assertFalse(filter.accepts(new ChangeSet(null, null, false, false, null, "test3", null, null)).isAccepted())
assertTrue(filter.accepts(new ChangeSet(null, null, false, false, null, "test3, test1", null, null)).isAccepted())
assertTrue(filter.accepts(new ChangeSet(null, null, false, false, null, "test3, TEST1", null, null)).isAccepted())
assertTrue(filter.accepts(new ChangeSet(null, null, false, false, null, null, null, null)).isAccepted())
assertTrue(filter.accepts(new ChangeSet(null, null, false, false, null, "test1", null, null)).isAccepted())
assertTrue(filter.accepts(new ChangeSet(null, null, false, false, null, "test2", null, null)).isAccepted())
assertTrue(filter.accepts(new ChangeSet(null, null, false, false, null, "test1, test2", null, null)).isAccepted())
assertFalse(filter.accepts(new ChangeSet(null, null, false, false, null, "test3", null, null)).isAccepted())
assertTrue(filter.accepts(new ChangeSet(null, null, false, false, null, "test3, test1", null, null)).isAccepted())
assertTrue(filter.accepts(new ChangeSet(null, null, false, false, null, "test3, TEST1", null, null)).isAccepted())
assertTrue(filter.accepts(new ChangeSet(null, null, false, false, null, null, null, null)).isAccepted())
assertTrue(filter.accepts(changeSet).isAccepted())
assertEquals(1, changeSet.getSqlVisitors().size())
assertTrue(filter.accepts(changeSet).isAccepted())
assertEquals(1, changeSet.getSqlVisitors().size())
assertTrue(filter.accepts(changeSet).isAccepted())
assertEquals(1, changeSet.getSqlVisitors().size())
assertTrue(filter.accepts(changeSet).isAccepted())
assertEquals(1, changeSet.getSqlVisitors().size())
assertFalse(filter.accepts(new ChangeSet("1", "testAuthor", false, false, "path/changelog", null, null, null)).isAccepted())
assertFalse(filter.accepts(new ChangeSet("1", "testAuthor", false, false, "path/changelog", null, null, null)).isAccepted())
assertFalse(filter.accepts(new ChangeSet("1", "testAuthor", false, false, "path/changelog", null, null, null)).isAccepted())
assertFalse(filter.accepts(new ChangeSet("2", "testAuthor", false, false, "path/changelog", null, null, null)).isAccepted())
assertTrue(filter.accepts(new ChangeSet("3", "testAuthor", false, false, "path/changelog", null, null, null)).isAccepted())
assertFalse(filter.accepts(new ChangeSet("a1", "b1", false, false, "c1", null, null, null)).isAccepted())
assertFalse(filter.accepts(new ChangeSet("a2", "b2", false, false, "c2", null, null, null)).isAccepted())
assertTrue(filter.accepts(new ChangeSet("a1", "b1", false, false, "c1", null, null, null)).isAccepted())
assertFalse(filter.accepts(new ChangeSet("a2", "b2", false, false, "c2", null, null, null)).isAccepted())
assertTrue(filter.accepts(new ChangeSet("a1", "b1", false, false, "c1", null, null, null)).isAccepted())
assertTrue(filter.accepts(new ChangeSet("a2", "b2", false, false, "c2", null, null, null)).isAccepted())
assertFalse(filter.accepts(new ChangeSet("a3", "b3", false, false, "c3", null, null, null)).isAccepted())
assertTrue(filter.accepts(new ChangeSet(null, null, false, false, null, null, "mysql", null)).isAccepted())
assertTrue(filter.accepts(new ChangeSet(null, null, false, false, null, null, "mysql, oracle", null)).isAccepted())
assertFalse(filter.accepts(new ChangeSet(null, null, false, false, null, null, "oracle", null)).isAccepted())
assertTrue(filter.accepts(new ChangeSet(null, null, false, false, null, null, null, null)).isAccepted())
assertFalse(filter.accepts(new ChangeSet(null, null, false, false, null, null, "h2,!mysql", null)).isAccepted())
assertTrue(Files.isDirectory(columnsOutputDirPath))
assertEquals(expectedNumberOfColumnHtmlFiles, Files.list(columnsOutputDirPath).count())
assertTrue(handler.validationPassed())
assertEquals(1, handler.getSetupExceptions().size())
assertEquals("Test message", handler.getSetupExceptions().get(0).getMessage())
assertFalse(handler.validationPassed())
assertEquals(1, handler.getDuplicateChangeSets().size())
assertFalse(handler.validationPassed())
assertEquals(1, handler.getValidationErrors().getErrorMessages().size())
assertTrue(handler.getValidationErrors().getErrorMessages().get(0).startsWith("Test message"))
assertFalse(handler.validationPassed())
assertEquals(1, handler.getValidationErrors().getErrorMessages().size())
assertTrue(handler.getValidationErrors().getErrorMessages().get(0).contains("Author"))
assertFalse(handler.validationPassed())
assertEquals(1, handler.getValidationErrors().getErrorMessages().size())
assertTrue(handler.getValidationErrors().getErrorMessages().get(0).contains("Id"))
assertFalse(handler.validationPassed())
assertEquals(1, handler.getValidationErrors().getErrorMessages().size())
assertTrue(handler.getValidationErrors().getErrorMessages().get(0).contains("Author"))
assertTrue(handler.getValidationErrors().getErrorMessages().get(0).contains("Id"))
assertFalse(handler.validationPassed())
assertEquals(0, handler.getSetupExceptions().size())
assertTrue(handler.validationPassed())
assertTrue(handler.validationPassed())
assertTrue(handler.validationPassed())
assertFalse(handler.validationPassed())
assertTrue(handler.validationPassed())
assertTrue(handler.validationPassed())
assertFalse(exceptionThrown)
assertTrue(failedExceptionThrown)
assertFalse(errorExceptionThrown)
assertFalse(exceptionThrown)
assertNotNull(ChangeLogParserFactory.getInstance())
assertSame(ChangeLogParserFactory.getInstance(), ChangeLogParserFactory.getInstance())
assertEquals(1, ChangeLogParserFactory.getInstance().getParsers().size())
assertEquals(3, factory.getParsers().size())
assertEquals(2, factory.getParsers().size())
assertThat(factory.getParsers(), empty())
assertNotNull(parser)
assertSame(xmlChangeLogParser, parser)
assertNotNull(parser)
assertSame(xmlChangeLogParser, parser)
assertEquals(higherPriorityParser, factory.getParser("banana", new JUnitResourceAccessor()))
assertThat(factory.getParsers(), not(hasItem(mockChangeLogParser)))
assertNotSame(instance1, ChangeLogParserFactory.getInstance())
assertThat(parsers, not(empty()))
assertNotNull(change)
assertTrue(change instanceof CreateTableChange)
assertNotSame(change, Scope.getCurrentScope().getSingleton(ChangeFactory.class).create("createTable"))
assertNull(change)
assertEquals(3, checkSum.getVersion())
assertEquals(checksumString, checkSum.toString())
assertNull(CheckSum.parse(null))
assertEquals(1, checkSum.getVersion())
assertEquals("1:asdf", checkSum.toString())
assertEquals(8, CheckSum.getCurrentVersion())
assertEquals(CheckSum.getCurrentVersion(), checkSum.getVersion())
assertNotEquals(checkSum.toString(), valueToHash)
assertEquals(checkSum2, checkSum1)
assertEquals(CheckSum.getCurrentVersion(), checkSum.getVersion())
assertNotEquals(checkSum.toString(), valueToHash)
assertEquals(CheckSum.compute(valueToHash).toString(), checkSum.toString())
assertTrue(CheckSum.parse("9:asdf").toString().startsWith("9:"))
assertEquals(CheckSum.parse("9:asdf"), CheckSum.parse("9:asdf"))
assertNotEquals(CheckSum.parse("9:asdf"), CheckSum.parse("8:asdf"))
assertNotEquals(CheckSum.parse("9:asdf"), CheckSum.parse("9:qwert"))
assertNotEquals(12, CheckSum.parse("9:asdf"))
assertNotEquals(null, CheckSum.parse("9:asdf"))
assertEquals(checkSum, CheckSum.compute("a string\rwith\rlines").toString())
assertEquals(checkSum, CheckSum.compute("a string\r\nwith\r\nlines").toString())
assertEquals(checkSum, CheckSum.compute("a string\rwith\nlines").toString())
assertNotEquals(checkSum, CheckSum.compute("a string\n\nwith\n\nlines").toString())
assertEquals(checkSum, CheckSum.compute(new ByteArrayInputStream("a string\nwith\nlines".getBytes()), true).toString())
assertEquals(checkSum, CheckSum.compute(new ByteArrayInputStream("a string\rwith\rlines".getBytes()), true).toString())
assertEquals(checkSum, CheckSum.compute(new ByteArrayInputStream("a string\r\nwith\r\nlines".getBytes()), true).toString())
assertEquals(checkSum, CheckSum.compute(new ByteArrayInputStream("a string\rwith\r\nlines".getBytes()), true).toString())
assertEquals(checkSum, CheckSum.compute("a string\r\rwith\r\rlines").toString())
assertEquals(checkSum, CheckSum.compute("a string\r\n\r\nwith\r\n\r\nlines").toString())
assertEquals(checkSum, CheckSum.compute(new ByteArrayInputStream("a string\n\nwith\n\nlines".getBytes()), true).toString())
assertEquals(checkSum, CheckSum.compute(new ByteArrayInputStream("a string\r\rwith\r\rlines".getBytes()), true).toString())
assertEquals(checkSum, CheckSum.compute(new ByteArrayInputStream("a string\r\n\r\nwith\r\n\r\nlines".getBytes()), true).toString())
Assert.assertEquals(1, statements.length)
Assert.assertNotNull(statements[0])
Assert.assertEquals(3, ((InsertSetStatement) statements[0]).getStatementsArray().length)
Assert.assertEquals("EnumValOne", ((InsertSetStatement) statements[0]).getStatementsArray()[0].getColumnValues().get("enum_col"))
Assert.assertEquals("EnumValTwo", ((InsertSetStatement) statements[0]).getStatementsArray()[1].getColumnValues().get("enum_col"))
Assert.assertEquals("NULL", ((InsertSetStatement) statements[0]).getStatementsArray()[2].getColumnValues().get("enum_col"))
Assert.assertEquals(1, statements.length)
Assert.assertTrue(statements[0] instanceof AddColumnStatement)
Assert.assertTrue(stmt.isMultiple())
Assert.assertEquals(2, stmt.getColumns().size())
Assert.assertEquals(2, statements.length)
Assert.assertTrue(statements[0] instanceof AddColumnStatement)
Assert.assertTrue(stmt.isMultiple())
Assert.assertEquals(2, stmt.getColumns().size())
Assert.assertTrue(statements[1] instanceof ReorganizeTableStatement)
Assert.assertEquals(1, statements.length)
Assert.assertTrue(statements[0] instanceof AddColumnStatement)
Assert.assertEquals(myUniqueConstraintName, stmt.getUniqueStatementName())
Assert.assertEquals(1, statements.length)
Assert.assertTrue(statements[0] instanceof AddColumnStatement)
Assert.assertNull(stmt.getUniqueStatementName())
Assert.assertEquals(1, statements.length)
Assert.assertTrue(statements[0] instanceof DropColumnStatement)
Assert.assertEquals("catalog1", dropStmt.getCatalogName())
Assert.assertEquals("schema1", dropStmt.getSchemaName())
Assert.assertEquals("table1", dropStmt.getTableName())
assertEquals("x", metaData.getParameterName())
assertEquals("y", metaData.getDisplayName())
assertEquals("integer", metaData.getDataType())
assertEquals(2, metaData.getRequiredForDatabase().size())
assertTrue(metaData.getRequiredForDatabase().contains("mysql"))
assertTrue(metaData.getRequiredForDatabase().contains("mssql"))
assertEquals("column", metaData.getMustEqualExisting())
assertEquals(LiquibaseSerializable.SerializationType.NESTED_OBJECT, metaData.getSerializationType())
assertEquals("desc", metaData.getDescription())
assertEquals("examp", metaData.getExampleValue(new MockDatabase()))
assertEquals("2.1", metaData.getSince())
assertEquals(3, metaData.getSupportedDatabases().size())
assertTrue(metaData.getSupportedDatabases().contains("mysql"))
assertTrue(metaData.getSupportedDatabases().contains("mssql"))
assertTrue(metaData.getSupportedDatabases().contains("h2"))
assertEquals(0, new ChangeParameterMetaData(new ExampleAbstractChange(), "x", "y", null, null, null, Integer.class, null, null, null, LiquibaseSerializable.SerializationType.NAMED_FIELD).getRequiredForDatabase().size())
assertEquals(0, new ChangeParameterMetaData(new ExampleAbstractChange(), "x", "y", null, null, null, Integer.class, new String[] { "none" }, null, null, LiquibaseSerializable.SerializationType.NAMED_FIELD).getRequiredForDatabase().size())
assertTrue(new ChangeParameterMetaData(new ExampleAbstractChange(), "x", "y", null, null, null, Integer.class, new String[] { "mysql" }, null, null, LiquibaseSerializable.SerializationType.NAMED_FIELD).isRequiredFor(new MySQLDatabase()))
assertTrue(new ChangeParameterMetaData(new ExampleAbstractChange(), "x", "y", null, null, null, Integer.class, new String[] { "mysql" }, null, null, LiquibaseSerializable.SerializationType.NAMED_FIELD).isRequiredFor(new MySQLDatabase() {
}))
assertFalse(new ChangeParameterMetaData(new ExampleAbstractChange(), "x", "y", null, null, null, Integer.class, new String[] { "mysql" }, null, null, LiquibaseSerializable.SerializationType.NAMED_FIELD).isRequiredFor(new MSSQLDatabase()))
assertTrue(new ChangeParameterMetaData(new ExampleAbstractChange(), "x", "y", null, null, null, Integer.class, new String[] { "mysql", "mssql" }, null, null, LiquibaseSerializable.SerializationType.NAMED_FIELD).isRequiredFor(new MySQLDatabase()))
assertTrue(new ChangeParameterMetaData(new ExampleAbstractChange(), "x", "y", null, null, null, Integer.class, new String[] { "mysql", "mssql" }, null, null, LiquibaseSerializable.SerializationType.NAMED_FIELD).isRequiredFor(new MSSQLDatabase()))
assertFalse(new ChangeParameterMetaData(new ExampleAbstractChange(), "x", "y", null, null, null, Integer.class, new String[] { "mysql", "mssql" }, null, null, LiquibaseSerializable.SerializationType.NAMED_FIELD).isRequiredFor(new OracleDatabase()))
assertTrue(new ChangeParameterMetaData(new ExampleAbstractChange(), "x", "y", null, null, null, Integer.class, new String[] { "all" }, null, null, LiquibaseSerializable.SerializationType.NAMED_FIELD).isRequiredFor(new OracleDatabase()))
assertTrue(new ChangeParameterMetaData(new ExampleAbstractChange(), "x", "y", null, null, null, Integer.class, new String[] { "all" }, null, null, LiquibaseSerializable.SerializationType.NAMED_FIELD).isRequiredFor(new MySQLDatabase()))
assertFalse(new ChangeParameterMetaData(new ExampleAbstractChange(), "x", "y", null, null, null, Integer.class, new String[] {}, null, null, LiquibaseSerializable.SerializationType.NAMED_FIELD).isRequiredFor(new OracleDatabase()))
assertFalse(new ChangeParameterMetaData(new ExampleAbstractChange(), "x", "y", null, null, null, Integer.class, new String[] {}, null, null, LiquibaseSerializable.SerializationType.NAMED_FIELD).isRequiredFor(new MySQLDatabase()))
assertEquals("newTable", tableNameMetaData.getCurrentValue(change))
assertEquals("newCatalog", catalogNameMetaData.getCurrentValue(change))
assertNull(remarksMetaData.getCurrentValue(change))
assertEquals("changedTableName", tableNameMetaData.getCurrentValue(change))
Assert.assertEquals(1, statements.length)
Assert.assertTrue(statements[0] instanceof DropColumnStatement)
Assert.assertTrue(stmt.isMultiple())
Assert.assertEquals(2, stmt.getColumns().size())
assertFalse(change.isStripComments())
assertTrue(change.isSplitStatements())
assertNull(change.getEndDelimiter())
assertTrue(change.isStripComments())
assertFalse(change.isStripComments())
assertFalse(change.isStripComments())
assertTrue(change.isSplitStatements())
assertFalse(change.isSplitStatements())
assertTrue(change.isSplitStatements())
assertEquals("SOME SQL", sql.getSql())
assertEquals("GO", change.getEndDelimiter())
assertEquals(";", change.getEndDelimiter())
assertEquals(sql.toString(), sqlCRLF.toString())
assertEquals(sql.toString(), sqlLF.toString())
assertNotEquals(sql.toString(), sqlDifferent.toString())
assertNotNull(new ExampleAbstractSQLChange().generateCheckSum())
assertNotEquals(baseCheckSum.toString(), change.generateCheckSum().toString())
assertNotEquals(baseCheckSum.toString(), change.generateCheckSum().toString())
assertNotEquals(baseCheckSum.toString(), change.generateCheckSum().toString())
assertEquals(1, statements.length)
assertEquals("LINE 1;\r\n\r\nLINE 2;\r\nLINE 3;", ((RawSqlStatement) statements[0]).getSql())
assertEquals("x:true:false:" + expected, StreamUtil.readStreamAsString(normalizingStream))
assertEquals("MESSAGE HERE", duplicateChangeSetException.getMessage())
assertEquals("Message Here", ex.getMessage())
assertFalse(errors.hasErrors())
assertTrue(errors.hasErrors())
assertFalse(errors.hasErrors())
assertTrue(errors.hasErrors())
assertTrue(errors.getErrorMessages().contains("testField is required"))
assertTrue(DatabaseList.definitionMatches("", new OracleDatabase(), true))
assertFalse(DatabaseList.definitionMatches("", new OracleDatabase(), false))
assertTrue(DatabaseList.definitionMatches((String) null, new OracleDatabase(), true))
assertFalse(DatabaseList.definitionMatches((String) null, new OracleDatabase(), false))
assertTrue(DatabaseList.definitionMatches("   ", new OracleDatabase(), true))
assertFalse(DatabaseList.definitionMatches("   ", new OracleDatabase(), false))
assertTrue(DatabaseList.definitionMatches("oracle", new OracleDatabase(), false))
assertTrue(DatabaseList.definitionMatches("oracle,mysql,mssql", new OracleDatabase(), false))
assertTrue(DatabaseList.definitionMatches("oracle,mysql,mssql", new MySQLDatabase(), false))
assertTrue(DatabaseList.definitionMatches("oracle,mysql,mssql", new MSSQLDatabase(), false))
assertFalse(DatabaseList.definitionMatches("oracle,mysql,mssql", new H2Database(), false))
assertTrue(DatabaseList.definitionMatches("!h2", new MySQLDatabase(), false))
assertTrue(DatabaseList.definitionMatches("!h2", new MySQLDatabase(), true))
assertFalse(DatabaseList.definitionMatches("!h2", new H2Database(), false))
assertFalse(DatabaseList.definitionMatches("!h2", new H2Database(), true))
assertFalse(DatabaseList.definitionMatches("!h2,mysql", new H2Database(), false))
assertTrue(DatabaseList.definitionMatches("!h2,mysql", new MySQLDatabase(), false))
assertFalse(getDatabase().supportsInitiallyDeferrableColumns())
assertEquals("GETDATE()", getDatabase().getCurrentDateTimeFunction())
assertTrue(database instanceof MSSQLDatabase)
assertTrue(mssqlDatabase.dataTypeIsNotModifiable("datetime"))
assertEquals("MySchema.MyUDT", database.escapeDataTypeName("MySchema.MyUDT"))
assertEquals("[MySchema€].[MyUDT€]", database.escapeDataTypeName("MySchema€.MyUDT€"))
assertEquals("MySchema.[MyUDT]", database.escapeDataTypeName("MySchema.[MyUDT]"))
assertEquals("[MySchema].MyUDT", database.escapeDataTypeName("[MySchema].MyUDT"))
assertEquals("[MySchema].[MyUDT]", database.escapeDataTypeName("[MySchema].[MyUDT]"))
assertEquals("MySchema.MyUDT", database.unescapeDataTypeName("MySchema.MyUDT"))
assertEquals("MySchema.MyUDT", database.unescapeDataTypeName("MySchema.[MyUDT]"))
assertEquals("MySchema.MyUDT", database.unescapeDataTypeName("[MySchema].MyUDT"))
assertEquals("MySchema.MyUDT", database.unescapeDataTypeName("[MySchema].[MyUDT]"))
assertEquals("int", database.unescapeDataTypeString("int"))
assertEquals("int", database.unescapeDataTypeString("[int]"))
assertEquals("decimal(19, 2)", database.unescapeDataTypeString("decimal(19, 2)"))
assertEquals("decimal(19, 2)", database.unescapeDataTypeString("[decimal](19, 2)"))
assertThat(oracleDataType.getType(), CoreMatchers.is("TIMESTAMP"))
assertEquals("UPDATE \"SAMPLESCHEMA\".\"test_table\" SET \"id\" = \"SAMPLESCHEMA\".\"test_table_id_seq\".nextval;", mockExecutor.getRanSql().trim())
assertEquals("TO_DATE('2017-08-16 16:32:55', 'YYYY-MM-DD HH24:MI:SS')", database.getDateLiteral("2017-08-16T16:32:55"))
assertEquals("TO_DATE('2017-08-16', 'YYYY-MM-DD')", database.getDateLiteral("2017-08-16"))
assertEquals("TO_DATE('16:32:55', 'HH24:MI:SS')", database.getDateLiteral("16:32:55"))
assertEquals("TO_TIMESTAMP('2017-08-16 16:32:55.125', 'YYYY-MM-DD HH24:MI:SS.FF')", database.getDateLiteral("2017-08-16T16:32:55.125"))
assertEquals("TO_TIMESTAMP('2017-08-16 16:32:55.3', 'YYYY-MM-DD HH24:MI:SS.FF')", database.getDateLiteral("2017-08-16T16:32:55.3"))
assertEquals("UNSUPPORTED:2017-08-16T16:32:55_3", database.getDateLiteral("2017-08-16T16:32:55_3"))
assertEquals("UNSUPPORTED:123", database.getDateLiteral("123"))
assertFalse(getDatabase().supportsInitiallyDeferrableColumns())
Assert.assertEquals("NOW()", getDatabase().getCurrentDateTimeFunction())
assertEquals("org.h2.Driver", database.getDefaultDriver("jdbc:h2:mem:liquibase"))
assertNull(database.getDefaultDriver("jdbc:db2://localhost;databaseName=liquibase"))
assertEquals("tableName", database.escapeTableName(null, null, "tableName"))
assertEquals("schemaName.tableName", database.escapeTableName("catalogName", "schemaName", "tableName"))
Assert.assertEquals(1, statements.length)
Assert.assertTrue(statements[0] instanceof AddColumnStatement)
Assert.assertTrue(stmt.isMultiple())
Assert.assertEquals(2, stmt.getColumns().size())
assertEquals("DATETIME (2010-11-12 13:14:15) YEAR TO FRACTION(5)", d)
assertEquals("'2010-11-12'", d)
assertEquals("DATETIME (13:14:15) HOUR TO FRACTION(5)", d)
assertEquals("com.informix.jdbc.IfxDriver", database.getDefaultDriver("jdbc:informix-sqli://localhost:9088/liquibase:informixserver=ol_ids_1150_1"))
assertEquals(12, database.getMaxFractionalDigitsForTimestamp())
assertTrue(getDatabase().supportsInitiallyDeferrableColumns())
Assert.assertEquals("NOW()", getDatabase().getCurrentDateTimeFunction())
assertEquals("\"tableName\"", database.escapeTableName(null, null, "tableName"))
assertEquals("tbl", database.escapeTableName(null, null, "tbl"))
assertEquals("\"user\"", database.escapeTableName(null, null, "user"))
assertEquals("\"schemaName\".\"tableName\"", database.escapeTableName("catalogName", "schemaName", "tableName"))
assertEquals("\"user\"", database.escapeTableName(null, null, "user"))
assertEquals("tableName", database.escapeTableName(null, null, "tableName"))
assertEquals("\"tbl\"", database.escapeTableName(null, null, "tbl"))
assertEquals("\"user\"", database.escapeTableName(null, null, "user"))
assertEquals(COLUMN_AUTHOR, result)
assertTrue(tableName.matches("[\\[\\\"`]?My Table  [\\]\\\"`]?"))
assertEquals("\"MyTable\"", tableName)
assertTrue(tableName.matches("[\\[\\\"`]?My Table[\\]\\\"`]?"))
assertEquals("", database.getConcatSql())
assertEquals("foo", database.getConcatSql("foo"))
assertEquals("foo || bar", database.getConcatSql("foo", "bar"))
assertEquals("one || two || | three", database.getConcatSql("one", "two", "| three"))
assertTrue(expected.getBytes(GlobalConfiguration.FILE_ENCODING.getCurrentValue()).length <= PostgresDatabase.PGSQL_PK_BYTES_LIMIT)
assertFalse(getDatabase().supportsInitiallyDeferrableColumns())
Assert.assertEquals("NOW()", getDatabase().getCurrentDateTimeFunction())
Assert.assertEquals("NOW(1)", mySQLDatabase.getCurrentDateTimeFunction(1))
Assert.assertEquals("NOW(2)", mySQLDatabase.getCurrentDateTimeFunction(2))
Assert.assertEquals("NOW(5)", mySQLDatabase.getCurrentDateTimeFunction(5))
assertEquals("NOW()", mySQLDatabase.generateDatabaseFunctionValue(new DatabaseFunction("CURRENT_TIMESTAMP()")))
assertNull(mySQLDatabase.generateDatabaseFunctionValue(new DatabaseFunction(null)))
assertEquals("NOW(2)", mySQLDatabase.generateDatabaseFunctionValue(new DatabaseFunction("CURRENT_TIMESTAMP(2)")))
assertEquals("NOW(3)", mySQLDatabase.generateDatabaseFunctionValue(new DatabaseFunction("CURRENT_TIMESTAMP(3)")))
assertEquals("NOW()", mySQLDatabase.generateDatabaseFunctionValue(new DatabaseFunction("CURRENT_TIMESTAMP(string)")))
assertEquals("tableName", database.escapeTableName(null, null, "tableName"))
assertEquals("catalogName.tableName", database.escapeTableName("catalogName", "schemaName", "tableName"))
Assert.assertEquals("\\\\0", database.escapeStringForDatabase("\\0"))
assertFalse(getDatabase().supportsInitiallyDeferrableColumns())
Assert.assertEquals("NOW()", getDatabase().getCurrentDateTimeFunction())
assertEquals("org.mariadb.jdbc.Driver", this.database.getDefaultDriver("jdbc:mariadb://localhost/liquibase"))
assertNull(this.database.getDefaultDriver("jdbc:db2://localhost;databaseName=liquibase"))
assertEquals("tableName", database.escapeTableName(null, null, "tableName"))
assertEquals("catalogName.tableName", database.escapeTableName("catalogName", "schemaName", "tableName"))
Assert.assertEquals("\\\\0", database.escapeStringForDatabase("\\0"))
assertEquals("TIMESTAMP('2008-01-25 13:57:41')", new DerbyDatabase().getDateLiteral("2008-01-25 13:57:41"))
assertEquals("TIMESTAMP('2008-01-25 13:57:41.300000')", new DerbyDatabase().getDateLiteral("2008-01-25 13:57:41.3"))
assertEquals("TIMESTAMP('2008-01-25 13:57:41.340000')", new DerbyDatabase().getDateLiteral("2008-01-25 13:57:41.34"))
assertEquals("TIMESTAMP('2008-01-25 13:57:41.347000')", new DerbyDatabase().getDateLiteral("2008-01-25 13:57:41.347"))
assertEquals(12, database.getMaxFractionalDigitsForTimestamp())
assertEquals("tableName", database.escapeTableName(null, null, "tableName"))
assertEquals("DROP TABLE test_table;", mockExecutor.getRanSql().trim())
assertEquals("DROP TABLE test_table SHOULD BE APPENDED;", mockExecutor.getRanSql().trim())
assertEquals("DROP TABLE test_table;", mockExecutor.getRanSql().trim())
assertEquals("DROP TABLE test_table SHOULD BE APPENDED;", mockExecutor.getRanSql().trim())
assertTrue(database.isDateOnly("2018-01-01"))
assertFalse(database.isDateOnly("18-01-01"))
assertFalse(database.isDateOnly("2018-1-1"))
assertTrue(database.isDateOnly("now"))
assertTrue(database.isDateOnly("now+1year"))
assertTrue(database.isDateOnly("now+1day"))
assertTrue(database.isDateOnly("now-11hours"))
assertTrue(database.isDateOnly("now+111minutes"))
assertTrue(database.isDateOnly("today"))
assertTrue(database.isDateOnly("today+2"))
assertTrue(database.isDateOnly("today-1"))
assertTrue(database.isDateOnly("TODAY"))
assertFalse(database.isDateOnly("NO"))
assertFalse(database.isDateOnly("TODA"))
assertTrue(database.isDateTime("2018-01-01 10:11:12"))
assertTrue(database.isDateTime("2018-01-01 10:11:12.2"))
assertTrue(database.isDateTime("2018-01-01T10:11:12"))
assertTrue(database.isDateTime("2018-01-01T10:11:12.2"))
assertFalse(database.isDateTime("18-01-01T10:11:12.2"))
assertFalse(database.isDateTime("2018-01-01"))
assertTrue(database.isDateTime("now"))
assertTrue(database.isDateTime("now+1year"))
assertTrue(database.isDateTime("now+1day"))
assertTrue(database.isDateTime("now-11hours"))
assertTrue(database.isDateTime("now+111minutes"))
assertTrue(database.isDateTime("today"))
assertTrue(database.isDateTime("today+2"))
assertTrue(database.isDateTime("today-2"))
assertTrue(database.isDateTime("TODAY"))
assertFalse(database.isDateTime("NO"))
assertFalse(database.isDateTime("TODA"))
assertTrue(database.isTimestamp("2018-01-01T10:11:12.2"))
assertFalse(database.isTimestamp("2018-01-01T10:11:12"))
assertFalse(database.isTimestamp("2018-01-01 10:11:12.2"))
assertFalse(database.isTimestamp("18-01-01T10:11:12.2"))
assertFalse(database.isTimestamp("2018-01-01"))
assertTrue(database.isTimestamp("now"))
assertTrue(database.isTimestamp("now+1year"))
assertTrue(database.isTimestamp("now+1day"))
assertTrue(database.isTimestamp("now-11hours"))
assertTrue(database.isTimestamp("now+111minutes"))
assertTrue(database.isTimestamp("today"))
assertTrue(database.isTimestamp("today+2"))
assertTrue(database.isTimestamp("today-2"))
assertTrue(database.isTimestamp("TODAY"))
assertFalse(database.isTimestamp("NO"))
assertFalse(database.isTimestamp("TODA"))
assertTrue(database.isTimeOnly("10:11:12"))
assertFalse(database.isTimeOnly("2018-01-01 10:11:12"))
assertFalse(database.isTimeOnly("2018-01-01T10:11:12"))
assertFalse(database.isTimeOnly("10:11:12.2"))
assertTrue(database.isTimeOnly("now"))
assertTrue(database.isTimeOnly("now+1year"))
assertTrue(database.isTimeOnly("now+1day"))
assertTrue(database.isTimeOnly("now-11hours"))
assertTrue(database.isTimeOnly("now+111minutes"))
assertTrue(database.isTimeOnly("today"))
assertTrue(database.isTimeOnly("today+2"))
assertTrue(database.isTimeOnly("today-2"))
assertTrue(database.isTimeOnly("TODAY"))
assertFalse(database.isTimeOnly("NO"))
assertFalse(database.isTimeOnly("TODA"))
assertTrue(tableName.matches("[\\[\\\"`]?My Table  [\\]\\\"`]?"))
assertEquals("MyTable", tableName)
assertTrue(tableName.matches("[\\[\\\"`]?My Table[\\]\\\"`]?"))
assertNotNull(DatabaseFactory.getInstance())
assertThat(dbConnection, notNullValue())
assertThat(dbConnection, instanceOf(OfflineConnection.class))
assertThat(dbConnection.getConnectionUserName(), equalTo(username))
assertThat(dbConnection, notNullValue())
assertThat(dbConnection.getDatabaseProductName(), equalTo("H2"))
assertThat(dbConnection, notNullValue())
assertThat(dbConnection.getDatabaseProductName(), equalTo("H2"))
assertThat(dbConnection, notNullValue())
assertThat(dbConnection.getDatabaseProductName(), equalTo("H2"))
assertThat(dbConnection, notNullValue())
assertThat(dbConnection.getDatabaseProductName(), equalTo("H2"))
assertThat(dbConnection, notNullValue())
assertThat(dbConnection.getDatabaseProductName(), equalTo("H2"))
assertTrue(liquibase.tagExists("Test Tag"))
assertFalse(lockService.hasChangeLogLock())
assertTrue(tableSnapshotGenerator.has(new Table().setName("hyphen_context"), database))
assertTrue(tableSnapshotGenerator.has(new Table().setName("camel_context"), database))
assertTrue(tableSnapshotGenerator.has(new Table().setName("bar_id"), database))
assertTrue(tableSnapshotGenerator.has(new Table().setName("foo_id"), database))
assertTrue(liquibase.getDatabaseChangeLog().getChangeSets().stream().allMatch(changeSet -> changeSet.getDescription().contains(pathToSet)))
assertTrue(true)
assertEquals(2, seenSequences.size())
assertEquals("seq_owned", seenSequences.get(0))
assertEquals("seq_unowned", seenSequences.get(1))
assertTrue(sql.startsWith("CREATE TABLE primary_table_numero_uno (name CHAR(20));"))
assertTrue(sql.endsWith("CREATE TABLE primary_table_numero_cinco(name CHAR(20));"))
assertTrue(indexOwner.next())
assertTrue(indexOwner.next())
assertEquals("LBCAT2", owner)
assertEquals("LBCAT2", owner)
assertNotNull(defaultValue)
assertEquals("0000-00-00 00:00:00", defaultValue)
assertNotNull(defaultValue)
assertEquals("0000-00-00 00:00:00", defaultValue)
Assert.assertEquals(1, queryResult.size())
Assert.assertEquals(insertedValue.toString(), queryResult.get(0).get(colName))
Assert.assertEquals(insertedValue.toString(), queryResult.get(1).get(colName))
assertEquals("a", columns.get(0).getName())
assertNull(columns.get(0).getDescending())
assertEquals("b", columns.get(1).getName())
assertNull(columns.get(1).getDescending())
assertEquals("c", columns.get(2).getName())
assertTrue(columns.get(2).getDescending())
