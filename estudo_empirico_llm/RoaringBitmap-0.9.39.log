assertFalse(RoaringBitmap.bitmapOf().stream().iterator().hasNext())
assertFalse(RoaringBitmap.bitmapOf().reverseStream().iterator().hasNext())
assertEquals(bitmap.getCardinality(), iteratorCopy.size())
assertEquals(bitmap.getCardinality(), intIteratorCopy.size())
assertEquals(bitmap.getCardinality(), reverseIntIteratorCopy.size())
assertEquals(Ints.asList(data), iteratorCopy)
assertEquals(Ints.asList(data), intIteratorCopy)
assertEquals(Lists.reverse(Ints.asList(data)), reverseIntIteratorCopy)
assertEquals(ImmutableList.of(1, 2, 3), iteratorCopy)
assertEquals(ImmutableList.of(1, 2, 3), intIteratorCopy)
assertEquals(ImmutableList.of(3, 2, 1), reverseIntIteratorCopy)
assertEquals(bitmap.last(), bitmap.reverseStream().max().getAsInt())
assertEquals(bitmap.last(), bitmap.stream().max().getAsInt())
Assertions.assertEquals(total, source.size())
assertEquals(rb1, rb2)
assertNotEquals(rb1, rb2)
assertEquals(rb1, rb2)
Assertions.assertEquals(total, i)
Assertions.assertEquals(source.size(), i)
Assertions.assertEquals(select2, deserStreamOne.select(2))
Assertions.assertEquals(select2, deserBBOne.select(2))
assertFalse(map.getLongIterator().hasNext())
assertEquals(0, map.getLongCardinality())
assertTrue(map.isEmpty())
assertFalse(map.contains(0))
assertEquals(0, map.rankLong(Long.MIN_VALUE))
assertEquals(0, map.rankLong(Long.MIN_VALUE + 1))
assertEquals(0, map.rankLong(-1))
assertEquals(0, map.rankLong(0))
assertEquals(0, map.rankLong(1))
assertEquals(0, map.rankLong(Long.MAX_VALUE - 1))
assertEquals(0, map.rankLong(Long.MAX_VALUE))
assertTrue(iterator.hasNext())
assertEquals(0, iterator.next())
assertEquals(0, map.select(0))
assertTrue(map.contains(0))
assertFalse(iterator.hasNext())
assertEquals(1, map.getLongCardinality())
assertFalse(map.isEmpty())
assertEquals(1, map.rankLong(Long.MIN_VALUE))
assertEquals(1, map.rankLong(Integer.MIN_VALUE - 1L))
assertEquals(1, map.rankLong(-1))
assertEquals(1, map.rankLong(0))
assertEquals(1, map.rankLong(1))
assertEquals(1, map.rankLong(Integer.MAX_VALUE + 1L))
assertEquals(1, map.rankLong(Long.MAX_VALUE))
assertTrue(iterator.hasNext())
assertEquals(-1, iterator.next())
assertEquals(-1, map.select(0))
assertTrue(map.contains(-1))
assertFalse(iterator.hasNext())
assertEquals(1, map.getLongCardinality())
assertFalse(map.isEmpty())
assertEquals(0, map.rankLong(Long.MIN_VALUE))
assertEquals(0, map.rankLong(Integer.MIN_VALUE - 1L))
assertEquals(0, map.rankLong(0))
assertEquals(0, map.rankLong(1))
assertEquals(0, map.rankLong(Integer.MAX_VALUE + 1L))
assertEquals(0, map.rankLong(Long.MAX_VALUE))
assertEquals(0, map.rankLong(-2))
assertEquals(1, map.rankLong(-1))
assertArrayEquals(new long[] { -1L }, map.toArray())
assertTrue(iterator.hasNext())
assertEquals(123, iterator.next())
assertEquals(123, map.select(0))
assertTrue(map.contains(123))
assertTrue(iterator.hasNext())
assertEquals(234, iterator.next())
assertEquals(234, map.select(1))
assertTrue(map.contains(234))
assertFalse(iterator.hasNext())
assertFalse(map.contains(345))
assertEquals(2, map.getLongCardinality())
assertEquals(0, map.rankLong(0))
assertEquals(1, map.rankLong(123))
assertEquals(1, map.rankLong(233))
assertEquals(2, map.rankLong(234))
assertEquals(2, map.rankLong(235))
assertEquals(2, map.rankLong(Integer.MAX_VALUE + 1L))
assertEquals(2, map.rankLong(Long.MAX_VALUE))
assertArrayEquals(new long[] { 123L, 234L }, map.toArray())
assertEquals(0xFFFFFFFFL, map.select(0))
assertTrue(map.getLongIterator().hasNext())
assertEquals(0, map.getLongIterator().next())
assertTrue(iterator.hasNext())
assertEquals(Long.MAX_VALUE, iterator.next())
assertEquals(Long.MAX_VALUE, map.select(0))
assertFalse(iterator.hasNext())
assertEquals(1, map.getLongCardinality())
assertEquals(1, map.rankLong(Long.MIN_VALUE))
assertEquals(1, map.rankLong(Long.MIN_VALUE + 1))
assertEquals(1, map.rankLong(-1))
assertEquals(0, map.rankLong(0))
assertEquals(0, map.rankLong(1))
assertEquals(0, map.rankLong(Long.MAX_VALUE - 1))
assertEquals(1, map.rankLong(Long.MAX_VALUE))
assertArrayEquals(new long[] { Long.MAX_VALUE }, map.toArray())
assertTrue(iterator.hasNext())
assertEquals(Long.MIN_VALUE, iterator.next())
assertEquals(Long.MIN_VALUE, map.select(0))
assertFalse(iterator.hasNext())
assertEquals(1, map.getLongCardinality())
assertEquals(1, map.rankLong(Long.MIN_VALUE))
assertEquals(1, map.rankLong(Long.MIN_VALUE + 1))
assertEquals(1, map.rankLong(-1))
assertEquals(0, map.rankLong(0))
assertEquals(0, map.rankLong(1))
assertEquals(0, map.rankLong(Long.MAX_VALUE - 1))
assertEquals(0, map.rankLong(Long.MAX_VALUE))
assertEquals(0, iterator.next())
assertEquals(0, map.select(0))
assertEquals(1, iterator.next())
assertEquals(1, map.select(1))
assertEquals(Long.MAX_VALUE, iterator.next())
assertEquals(Long.MAX_VALUE, map.select(2))
assertEquals(Long.MIN_VALUE, iterator.next())
assertEquals(Long.MIN_VALUE, map.select(3))
assertFalse(iterator.hasNext())
assertEquals(4, map.getLongCardinality())
assertEquals(4, map.rankLong(Long.MIN_VALUE))
assertEquals(4, map.rankLong(Long.MIN_VALUE + 1))
assertEquals(4, map.rankLong(-1))
assertEquals(1, map.rankLong(0))
assertEquals(2, map.rankLong(1))
assertEquals(2, map.rankLong(2))
assertEquals(2, map.rankLong(Long.MAX_VALUE - 1))
assertEquals(3, map.rankLong(Long.MAX_VALUE))
assertEquals(Arrays.asList(0L, 1L, Long.MAX_VALUE, Long.MIN_VALUE), foreach)
assertTrue(iterator.hasNext())
assertEquals(234, iterator.next())
assertTrue(iterator.hasNext())
assertEquals(123, iterator.next())
assertFalse(iterator.hasNext())
assertTrue(iterator.hasNext())
assertEquals(Long.MAX_VALUE, iterator.next())
assertTrue(iterator.hasNext())
assertEquals(123, iterator.next())
assertFalse(iterator.hasNext())
assertEquals(1L, map.getLongCardinality())
assertEquals(0L, map.getLongCardinality())
assertTrue(map.isEmpty())
assertEquals(1L, map.getLongCardinality())
assertEquals(2L, map.getLongCardinality())
assertEquals(1L, map.getLongCardinality())
assertEquals(123L, map.select(0))
assertEquals(2L, map.getLongCardinality())
assertEquals(123L, map.select(0))
assertEquals(Long.MAX_VALUE, map.select(1))
assertEquals(2L, map.getLongCardinality())
assertEquals(1L, map.getLongCardinality())
assertEquals(123L, map.select(0))
assertEquals(2L, map.getLongCardinality())
assertEquals(123L, map.select(0))
assertEquals(Long.MAX_VALUE / 2L, map.select(1))
assertEquals(2L, map.getLongCardinality())
assertEquals(1L, map.getLongCardinality())
assertEquals(123L, map.select(0))
assertEquals(2L, map.getLongCardinality())
assertEquals(123L, map.select(0))
assertEquals(Long.MAX_VALUE, map.select(1))
assertEquals(problemSize, cardinality)
assertEquals(cardinality, map.rankLong(last))
assertEquals(positive, first)
assertEquals(negative, last)
assertEquals(2, map.rankLong(negative))
assertEquals(positive, first)
assertEquals(negative, last)
assertEquals(Long.MAX_VALUE, map.select(0))
assertEquals(666, map.select(0))
assertEquals(Long.MAX_VALUE, map.select(1))
assertNotSame(map, clone)
assertEquals(0, clone.getLongCardinality())
assertEquals(map.serializedSizeInBytes(), buffer.position())
assertNotSame(map, clone)
assertEquals(1, clone.getLongCardinality())
assertEquals(123, clone.select(0))
assertNotSame(map, clone)
assertEquals(1, clone.getLongCardinality())
assertEquals(123, clone.select(0))
assertNotSame(map, clone)
assertEquals(3, clone.getLongCardinality())
assertEquals(123, clone.select(0))
assertEquals(Long.MAX_VALUE, clone.select(1))
assertEquals(-123, clone.select(2))
assertEquals(3, anotherDeserMap.getLongCardinality())
assertEquals(123, anotherDeserMap.select(0))
assertEquals(Long.MAX_VALUE, anotherDeserMap.select(1))
assertEquals(-123, anotherDeserMap.select(2))
assertEquals(2, left.getLongCardinality())
assertEquals(123, left.select(0))
assertEquals(234, left.select(1))
assertEquals(3, left.getLongCardinality())
assertEquals(123, left.select(0))
assertEquals(234, left.select(1))
assertEquals(Long.MAX_VALUE, left.select(2))
assertEquals(2, left.getLongCardinality())
assertEquals(123, left.select(0))
assertEquals(Long.MAX_VALUE / 2, left.select(1))
assertEquals(2, left.getLongCardinality())
assertEquals(123, left.select(0))
assertEquals(Long.MAX_VALUE, left.select(1))
assertEquals(2, left.getLongCardinality())
assertEquals(123, left.select(0))
assertEquals(234, left.select(1))
assertEquals(1, right.getLongCardinality())
assertEquals(123, right.select(0))
assertEquals(2, left.getLongCardinality())
assertEquals(123, left.select(0))
assertEquals(345, left.select(1))
assertEquals(2, left.getLongCardinality())
assertEquals(123, left.select(0))
assertEquals(345, left.select(1))
assertEquals(2, left.getLongCardinality())
assertEquals(123, left.select(0))
assertEquals(Long.MAX_VALUE, left.select(1))
assertEquals(1, left.getLongCardinality())
assertEquals(123, left.select(0))
assertEquals(1, left.getLongCardinality())
assertEquals(234, left.select(0))
assertEquals(1, left.getLongCardinality())
assertEquals(123, left.select(0))
assertEquals(0, left.getLongCardinality())
assertEquals(0, swapLeft.getLongCardinality())
assertEquals(0, left.getLongCardinality())
assertEquals(1, left.getLongCardinality())
assertEquals(Long.MAX_VALUE, left.select(0))
assertEquals(1, left.getLongCardinality())
assertEquals(123, left.select(0))
assertEquals(1, left.getLongCardinality())
assertEquals(123, left.select(0))
assertEquals(1, left.getLongCardinality())
assertEquals(123, left.select(0))
assertEquals(1, left.getLongCardinality())
assertEquals(123, left.select(0))
assertEquals(2, map.getLongCardinality())
assertEquals(1, map.select(1))
assertEquals(3, map.getLongCardinality())
assertEquals(0x10001, map.select(1))
assertEquals(2, map.getLongCardinality())
assertEquals(0x10001, map.select(1))
assertEquals(2, map.getLongCardinality())
assertEquals(0xFFFF, map.select(1))
assertEquals(4, map.getLongCardinality())
assertEquals(0x10001, map.select(3))
assertEquals(2, map.getLongCardinality())
assertEquals(1, map.select(0))
assertEquals(0x10001, map.select(1))
assertEquals(1, map.getLongCardinality())
assertEquals(0, map.select(0))
assertEquals(1, map.getLongCardinality())
assertEquals(0, map.select(0))
assertEquals(1, map.getLongCardinality())
assertEquals(0, map.select(0))
assertEquals(1, map.getLongCardinality())
assertEquals(0, map.select(0))
assertEquals(3, map.getLongCardinality())
assertEquals(0L, map.select(0))
assertEquals(0x7FffFFffFFffFFffL, map.select(1))
assertEquals(0x8000000000000000L, map.select(2))
assertEquals(3, map.getLongCardinality())
assertEquals(0L, map.select(0))
assertEquals(9223372036854775807L, map.select(1))
assertEquals(-9223372036854775808L, map.select(2))
assertEquals(2, map.getLongCardinality())
assertEquals(0L, map.select(0))
assertEquals(-4294967297L, map.select(1))
assertEquals(3, map.getLongCardinality())
assertEquals(0L, map.select(0))
assertEquals(-2L, map.select(1))
assertEquals("{123,9223372036854775807,-9223372036854775808}", map.toString())
assertEquals(map.getIntCardinality(), 1)
assertEquals(0xFFFFFFFFL, addedInt)
assertEquals(7L, map.getLongCardinality())
assertEquals(5L, map.select(0))
assertEquals(11L, map.select(6L))
assertEquals(2, map.getLongCardinality())
assertEquals(end - 2, map.select(0))
assertEquals(end - 1, map.select(1))
assertEquals(nbItems, map.getLongCardinality())
assertEquals(from, map.select(0))
assertEquals(to - 1, map.select(nbItems - 1))
assertEquals(outOfSingleRoaring, map.getLongCardinality())
assertEquals(outOfSingleRoaring, map.getLongCardinality())
assertEquals(0, map.select(0))
assertEquals(outOfSingleRoaring - 1, map.select(outOfSingleRoaring - 1))
assertEquals(maxForRoaringBitmap, map.getLongCardinality())
assertEquals(-1, map.select(-1))
assertNotEquals(RoaringIntPacking.high(to), RoaringIntPacking.high(from))
assertTrue(it.hasNext())
assertEquals(123L, it.next().longValue())
assertTrue(it.hasNext())
assertEquals(234, it.next().longValue())
assertFalse(it.hasNext())
assertEquals(123L, map.select(0))
assertEquals(Long.MAX_VALUE, map.select(1))
assertEquals(0, map.rankLong(0))
assertEquals(1, map.rankLong(123))
assertEquals(1, map.rankLong(Long.MAX_VALUE - 1))
assertEquals(2, map.rankLong(Long.MAX_VALUE))
assertEquals(1, map.rankLong(Long.MAX_VALUE / 2L))
assertEquals(1, r.getLongCardinality())
assertEquals(0, r.getLongCardinality())
assertFalse(map.contains(0))
assertTrue(map.getLongCardinality() == 0)
assertArrayEquals(bitmapAsIntArray, Ints.toArray(Longs.asList(longBitmapAsArray)))
assertArrayEquals(Longs.toArray(Ints.asList(bitmapAsIntArray)), longBitmapAsArray)
assertTrue(map.isEmpty())
assertEquals(left.hashCode(), right.hashCode())
assertEquals(left, right)
assertEquals(right, left)
assertEquals(0, compareRB.getIntCardinality())
assertEquals(14, compareRB.getIntCardinality())
assertEquals(13, compareRB.getIntCardinality())
assertEquals(0, crossRB.getIntCardinality())
assertEquals(0, crossRB.getIntCardinality())
assertEquals(0, crossRB.getIntCardinality())
assertEquals(b1, bitIt.peekNext())
assertEquals(b1, bitIt.next())
assertTrue(bitset.contains(p2))
assertEquals(p2, bitIt.peekNext())
assertEquals(p2, bitIt.next())
assertFalse(bitset.contains(pgap))
assertTrue(bitset.contains(b2))
assertTrue(bitset.contains(b2e - 1L))
assertEquals(b2, bitIt.peekNext())
assertTrue(bitset.contains(b2))
assertEquals(b2, bitIt.peekNext())
assertEquals(b2, bitIt.next())
assertEquals(b1, bitIt.peekNext())
assertEquals(b1, bitIt.next())
assertTrue(bitset.contains(p2))
assertEquals(p2, bitIt.peekNext())
assertEquals(p2, bitIt.next())
assertFalse(bitset.contains(pgapSameContainer))
assertTrue(bitset.contains(b3))
assertTrue(bitset.contains(b3e - 1L))
assertEquals(b3, bitIt.peekNext())
assertTrue(bitset.contains(b3))
assertEquals(b3, bitIt.peekNext())
assertEquals(b3, bitIt.next())
assertFalse(bitset.contains(pgapNextContainer))
assertEquals(b3, bitIt.peekNext())
assertEquals(b3, bitIt.peekNext())
assertEquals(b3, bitIt.next())
assertEquals(b2e - 1L, bitIt.peekNext())
assertEquals(b2e - 1L, bitIt.next())
assertTrue(bitset.contains(p2))
assertEquals(p2, bitIt.peekNext())
assertEquals(p2, bitIt.next())
assertFalse(bitset.contains(pgap))
assertTrue(bitset.contains(b1))
assertTrue(bitset.contains(b1e - 1L))
assertEquals(b1e - 1L, bitIt.peekNext())
assertTrue(bitset.contains(b2))
assertEquals(b1e - 1L, bitIt.peekNext())
assertEquals(b1e - 1L, bitIt.next())
assertEquals(b3e - 1L, bitIt.peekNext())
assertEquals(b3e - 1L, bitIt.next())
assertTrue(bitset.contains(p3))
assertEquals(p3, bitIt.peekNext())
assertEquals(p3, bitIt.next())
assertFalse(bitset.contains(pgapSameContainer))
assertTrue(bitset.contains(b1))
assertTrue(bitset.contains(b1e - 1L))
assertEquals(b1e - 1L, bitIt.peekNext())
assertTrue(bitset.contains(b1))
assertEquals(b1e - 1L, bitIt.peekNext())
assertEquals(b1e - 1L, bitIt.next())
assertFalse(bitset.contains(pgapNextContainer))
assertEquals(b1e - 1L, bitIt.peekNext())
assertEquals(b1e - 1L, bitIt.peekNext())
assertEquals(b1e - 1L, bitIt.next())
assertEquals(Long.MAX_VALUE, bitIt.peekNext())
assertEquals(Long.MIN_VALUE + 1, bitIt.peekNext())
assertEquals(Long.MIN_VALUE + 1, bitIt.peekNext())
assertEquals(Long.MAX_VALUE, bitIt.peekNext())
assertEquals(9900, consumer.getNumberOfValuesConsumed())
assertEquals(1000, consumer2.getNumberOfValuesConsumed())
assertEquals(5, consumer3.getNumberOfValuesConsumed())
assertEquals(5, consumer4.getNumberOfValuesConsumed())
assertEquals(100000, consumer.getNumberOfValuesConsumed())
assertEquals(3500, consumer2.getNumberOfValuesConsumed())
assertEquals(6, consumer3.getNumberOfValuesConsumed())
assertEquals(100000, consumer.getNumberOfValuesConsumed())
assertEquals(3500, consumer2.getNumberOfValuesConsumed())
assertEquals(1000, consumer3.getNumberOfValuesConsumed())
assertFalse(c.contains(275846320L))
assertFalse(c.contains(275846320L))
assertEquals(maxLong, 45011744312L)
assertEquals(expected[offset], value)
assertTrue(b1.equals(Roaring64Bitmap.bitmapOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))
assertTrue(b1.isEmpty())
assertTrue(b1.equals(Roaring64Bitmap.bitmapOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))
assertTrue(b1.isEmpty())
assertEquals(count, 7)
Assertions.assertEquals(3L, x.getLongCardinality())
Assertions.assertArrayEquals(x.toArray(), new long[] { 0, Long.MAX_VALUE, -1L })
Assertions.assertEquals(4L, x.getLongCardinality())
Assertions.assertArrayEquals(x.toArray(), new long[] { Long.MAX_VALUE - 1L, Long.MAX_VALUE, Long.MIN_VALUE, Long.MIN_VALUE + 1L })
Assertions.assertEquals(2L, x.getLongCardinality())
Assertions.assertArrayEquals(new long[] { -3L, -2L }, x.toArray())
assertEquals(2, rb.first())
assertEquals(8, rb.last())
assertEquals(-128, rb.first())
assertEquals(-32, rb.last())
assertEquals(2, rb.first())
assertEquals(-32, rb.last())
assertEquals(source.stream().min((l, r) -> Long.compareUnsigned(l, r)).get(), rb.first())
assertEquals(source.stream().max((l, r) -> Long.compareUnsigned(l, r)).get(), rb.last())
Assertions.assertEquals(0, leafNode.getContainerIdx())
Assertions.assertEquals(1, leafNode.getContainerIdx())
Assertions.assertEquals(1, containerIdx2)
Assertions.assertEquals(0, leafNode.getContainerIdx())
Assertions.assertEquals(1, leafNode.getContainerIdx())
Assertions.assertEquals(3, containerIdx)
Assertions.assertEquals(4, containerIdx)
Assertions.assertEquals(art.findByKey(key5), deserArt.findByKey(key5))
Assertions.assertEquals(art.findByKey(key5), deserArt.findByKey(key5))
Assertions.assertEquals(2, containerIdx4)
Assertions.assertEquals(art.findByKey(key13), deserArt.findByKey(key13))
Assertions.assertEquals(art.findByKey(key13), deserArt.findByKey(key13))
Assertions.assertEquals(art.getKeySize(), deserArt.getKeySize())
Assertions.assertEquals(11, containerIdx12)
Assertions.assertEquals(10, containerIdx)
Assertions.assertEquals(sizeInBytesI, byteArrayOutputStream.toByteArray().length)
Assertions.assertEquals(36, containerIdx)
Assertions.assertEquals(36, containerIdx)
assertEquals(revertVal, v)
assertEquals(revertVal, v)
assertEquals(revertVal, v)
assertEquals(0xBBCCDDDD, IntegerUtil.shiftLeftFromSpecifiedPosition(0xAABBCCDD, 0, 3))
assertEquals(0xBBCCCCDD, IntegerUtil.shiftLeftFromSpecifiedPosition(0xAABBCCDD, 0, 2))
assertEquals(0xBBBBCCDD, IntegerUtil.shiftLeftFromSpecifiedPosition(0xAABBCCDD, 0, 1))
assertEquals(0xAABBCCDD, IntegerUtil.shiftLeftFromSpecifiedPosition(0xAABBCCDD, 0, 0))
assertEquals(0xAACCDDDD, IntegerUtil.shiftLeftFromSpecifiedPosition(0xAABBCCDD, 1, 2))
assertEquals(0xAACCCCDD, IntegerUtil.shiftLeftFromSpecifiedPosition(0xAABBCCDD, 1, 1))
assertEquals(0xAABBCCDD, IntegerUtil.shiftLeftFromSpecifiedPosition(0xAABBCCDD, 1, 0))
assertEquals(0xAABBDDDD, IntegerUtil.shiftLeftFromSpecifiedPosition(0xAABBCCDD, 2, 1))
assertEquals(0xAABBCCDD, IntegerUtil.shiftLeftFromSpecifiedPosition(0xAABBCCDD, 2, 0))
assertEquals(0xAABBCCDD, IntegerUtil.shiftLeftFromSpecifiedPosition(0xAABBCCDD, 3, 0))
Assertions.assertDoesNotThrow(bitmap::toArray)
Assertions.assertTrue(hasNext)
Assertions.assertTrue(BytesUtil.same(leafNode.getKeyBytes(), key1))
Assertions.assertTrue(leafNode.getContainerIdx() == 0)
Assertions.assertTrue(!hasNext)
Assertions.assertTrue(art.findByKey(key1) == Node.ILLEGAL_IDX)
Assertions.assertTrue(hasNext)
Assertions.assertTrue(BytesUtil.same(leafNode.getKeyBytes(), key1))
Assertions.assertTrue(hasNext)
Assertions.assertTrue(BytesUtil.same(leafNode.getKeyBytes(), key2))
Assertions.assertTrue(!hasNext)
Assertions.assertTrue(hasNext)
Assertions.assertTrue(BytesUtil.same(leafNode.getKeyBytes(), key1))
Assertions.assertTrue(hasNext)
Assertions.assertTrue(BytesUtil.same(leafNode.getKeyBytes(), key2))
Assertions.assertTrue(hasNext)
Assertions.assertTrue(containerIdx == 0)
Assertions.assertTrue(containerIdx == 10)
Assertions.assertTrue(containerIdx == 12)
Assertions.assertTrue(containerIdx == 0)
Assertions.assertTrue(containerIdx == 16)
Assertions.assertTrue(containerIdx == 36)
Assertions.assertTrue(containerIdx == Node.ILLEGAL_IDX)
Assertions.assertTrue(containerIdx == 10)
Assertions.assertTrue(hasNext)
Assertions.assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key0))
Assertions.assertTrue(lnIt.hasNext())
Assertions.assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key0))
Assertions.assertTrue(lnIt.hasNext())
Assertions.assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key1))
Assertions.assertTrue(lnIt.hasNext())
Assertions.assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key2))
Assertions.assertTrue(BytesUtil.same(lnIt.next().getKeyBytes(), key2))
Assertions.assertTrue(lnIt.hasNext())
Assertions.assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key1))
Assertions.assertTrue(hasNext)
Assertions.assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key2))
Assertions.assertTrue(lnIt.hasNext())
Assertions.assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key2))
Assertions.assertTrue(lnIt.hasNext())
Assertions.assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key1))
Assertions.assertTrue(lnIt.hasNext())
Assertions.assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key0))
Assertions.assertTrue(BytesUtil.same(lnIt.next().getKeyBytes(), key0))
Assertions.assertTrue(lnIt.hasNext())
Assertions.assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key1))
Assertions.assertTrue(hasNext)
Assertions.assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key0))
Assertions.assertTrue(lnIt.hasNext())
Assertions.assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key0))
Assertions.assertTrue(lnIt.hasNext())
Assertions.assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key1))
Assertions.assertTrue(lnIt.hasNext())
Assertions.assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key2))
Assertions.assertTrue(BytesUtil.same(lnIt.next().getKeyBytes(), key2))
Assertions.assertTrue(lnIt.hasNext())
Assertions.assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key0))
Assertions.assertTrue(lnIt.hasNext())
Assertions.assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key1))
Assertions.assertTrue(lnIt.hasNext())
Assertions.assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key2))
Assertions.assertTrue(lnIt.hasNext())
Assertions.assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key0))
Assertions.assertTrue(hasNext)
Assertions.assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key0))
Assertions.assertTrue(lnIt.hasNext())
Assertions.assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key0))
Assertions.assertTrue(lnIt.hasNext())
Assertions.assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key1))
Assertions.assertTrue(lnIt.hasNext())
Assertions.assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key2))
Assertions.assertTrue(BytesUtil.same(lnIt.next().getKeyBytes(), key2))
Assertions.assertTrue(lnIt.hasNext())
Assertions.assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key0))
Assertions.assertTrue(lnIt.hasNext())
Assertions.assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key1))
Assertions.assertTrue(lnIt.hasNext())
Assertions.assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key2))
Assertions.assertTrue(lnIt.hasNext())
Assertions.assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key0))
Assertions.assertTrue(container == arrayContainer)
Assertions.assertTrue(container == bitmapContainer)
Assertions.assertTrue(container == runContainer)
Assertions.assertTrue(containerSize == 3)
Assertions.assertTrue(container != arrayContainer)
Assertions.assertTrue(container == anotherArrayContainer)
Assertions.assertTrue(i == 3)
Assertions.assertEquals(23, replacedContainer.select(0))
Assertions.assertTrue(replacedContainer == arrayContainer1)
Assertions.assertEquals(1, containerSize)
Assertions.assertTrue(container instanceof ArrayContainer)
Assertions.assertEquals(20, deseredArrayContainer.getCardinality())
Assertions.assertEquals(1, containerSize)
Assertions.assertTrue(container instanceof ArrayContainer)
Assertions.assertEquals(20, container.getCardinality())
Assertions.assertTrue(LongUtils.isMaxHigh(LongUtils.highPart(-1L)))
assertArrayEquals(expectedCardinalities, Arrays.copyOf(bitmap.getSortedCumulatedCardinality(), expectedCardinalities.length))
assertEquals(baos.toByteArray().length, bitmap.serializedSizeInBytes())
assertNotNull(new RoaringIntPacking())
assertEquals(0, map.getLongCardinality())
assertTrue(map.isEmpty())
assertEquals(0, map.rankLong(Long.MIN_VALUE))
assertEquals(0, map.rankLong(Long.MIN_VALUE + 1))
assertEquals(0, map.rankLong(-1))
assertEquals(0, map.rankLong(0))
assertEquals(0, map.rankLong(1))
assertEquals(0, map.rankLong(Long.MAX_VALUE - 1))
assertEquals(0, map.rankLong(Long.MAX_VALUE))
assertEquals(1, map.getLongCardinality())
assertEquals(0, map.rankLong(Long.MIN_VALUE))
assertEquals(0, map.rankLong(Integer.MIN_VALUE - 1L))
assertEquals(0, map.rankLong(-1))
assertEquals(1, map.rankLong(0))
assertEquals(1, map.rankLong(1))
assertEquals(1, map.rankLong(Integer.MAX_VALUE + 1L))
assertEquals(1, map.rankLong(Long.MAX_VALUE))
assertEquals(1, map.getLongCardinality())
assertEquals(0, map.rankLong(Long.MIN_VALUE))
assertEquals(0, map.rankLong(Integer.MIN_VALUE - 1L))
assertEquals(0, map.rankLong(0))
assertEquals(0, map.rankLong(1))
assertEquals(0, map.rankLong(Integer.MAX_VALUE + 1L))
assertEquals(0, map.rankLong(Long.MAX_VALUE))
assertEquals(0, map.rankLong(-2))
assertEquals(1, map.rankLong(-1))
assertArrayEquals(new long[] { -1L }, map.toArray())
assertEquals(1, map.getLongCardinality())
assertEquals(0, map.rankLong(Long.MIN_VALUE))
assertEquals(0, map.rankLong(Integer.MIN_VALUE - 1L))
assertEquals(0, map.rankLong(-1))
assertEquals(1, map.rankLong(0))
assertEquals(1, map.rankLong(1))
assertEquals(1, map.rankLong(Integer.MAX_VALUE + 1L))
assertEquals(1, map.rankLong(Long.MAX_VALUE))
assertEquals(2, map.getLongCardinality())
assertEquals(0, map.rankLong(0))
assertEquals(1, map.rankLong(123))
assertEquals(1, map.rankLong(233))
assertEquals(2, map.rankLong(234))
assertEquals(2, map.rankLong(235))
assertEquals(2, map.rankLong(Integer.MAX_VALUE + 1L))
assertEquals(2, map.rankLong(Long.MAX_VALUE))
assertArrayEquals(new long[] { 123L, 234L }, map.toArray())
assertEquals(left.hashCode(), right.hashCode())
assertEquals(left, right)
assertEquals(right, left)
assertEquals(Util.toUnsignedLong(-1), map.select(0))
assertTrue(map.getLongIterator().hasNext())
assertEquals(0, map.getLongIterator().next())
assertEquals(1, map.getLongCardinality())
assertEquals(0, map.rankLong(Long.MIN_VALUE))
assertEquals(0, map.rankLong(Long.MIN_VALUE + 1))
assertEquals(0, map.rankLong(-1))
assertEquals(0, map.rankLong(0))
assertEquals(0, map.rankLong(1))
assertEquals(0, map.rankLong(Long.MAX_VALUE - 1))
assertEquals(1, map.rankLong(Long.MAX_VALUE))
assertArrayEquals(new long[] { Long.MAX_VALUE }, map.toArray())
assertEquals(1, map.getLongCardinality())
assertEquals(1, map.rankLong(Long.MIN_VALUE))
assertEquals(1, map.rankLong(Long.MIN_VALUE + 1))
assertEquals(1, map.rankLong(-1))
assertEquals(1, map.rankLong(0))
assertEquals(1, map.rankLong(1))
assertEquals(1, map.rankLong(Long.MAX_VALUE - 1))
assertEquals(1, map.rankLong(Long.MAX_VALUE))
assertEquals(4, map.getLongCardinality())
assertEquals(1, map.rankLong(Long.MIN_VALUE))
assertEquals(1, map.rankLong(Long.MIN_VALUE + 1))
assertEquals(1, map.rankLong(-1))
assertEquals(2, map.rankLong(0))
assertEquals(3, map.rankLong(1))
assertEquals(3, map.rankLong(2))
assertEquals(3, map.rankLong(Long.MAX_VALUE - 1))
assertEquals(4, map.rankLong(Long.MAX_VALUE))
assertEquals(Arrays.asList(Long.MIN_VALUE, 0L, 1L, Long.MAX_VALUE), foreach)
assertEquals(rbm.getHighToBitmap().size(), 1)
assertTrue(rbm.getHighToBitmap().isEmpty())
assertEquals(rbm, empty)
assertEquals(rbm.getHighToBitmap().size(), 1)
assertEquals(rbm.getHighToBitmap().size(), 2)
assertEquals(rbm.getHighToBitmap().size(), 1)
assertEquals(rbm.getHighToBitmap().size(), 2)
assertEquals(1L, map.getLongCardinality())
assertEquals(0L, map.getLongCardinality())
assertTrue(map.isEmpty())
assertEquals(1L, map.getLongCardinality())
assertEquals(1L, map.getLongCardinality())
assertEquals(0L, map.getLongCardinality())
assertTrue(map.isEmpty())
assertEquals(1L, map.getLongCardinality())
assertEquals(2L, map.getLongCardinality())
assertEquals(1L, map.getLongCardinality())
assertEquals(123L, map.select(0))
assertEquals(2L, map.getLongCardinality())
assertEquals(123L, map.select(0))
assertEquals(Long.MAX_VALUE, map.select(1))
assertEquals(2L, map.getLongCardinality())
assertEquals(1L, map.getLongCardinality())
assertEquals(123L, map.select(0))
assertEquals(2L, map.getLongCardinality())
assertEquals(123L, map.select(0))
assertEquals(Long.MAX_VALUE / 2L, map.select(1))
assertEquals(2L, map.getLongCardinality())
assertEquals(1L, map.getLongCardinality())
assertEquals(123L, map.select(0))
assertEquals(2L, map.getLongCardinality())
assertEquals(123L, map.select(0))
assertEquals(Long.MAX_VALUE, map.select(1))
assertEquals(problemSize, cardinality)
assertEquals(problemSize * Integer.MAX_VALUE + 1L, last)
assertEquals(cardinality, map.rankLong(last))
assertEquals(problemSize, cardinality)
assertEquals(problemSize * Integer.MAX_VALUE + 1L, last)
assertEquals(cardinality, map.rankLong(last))
assertTrue(natural.compare(-1, 1) < 0)
assertTrue(natural.compare(Integer.MAX_VALUE, Integer.MAX_VALUE + 1) > 0)
assertTrue(unsigned.compare(Integer.MAX_VALUE + 1, Integer.MAX_VALUE + 2) < 0)
assertEquals(negative, first)
assertEquals(positive, last)
assertEquals(positive, first)
assertEquals(negative, last)
assertEquals(1, map.rankLong(negative))
assertEquals(2, map.rankLong(negative))
assertEquals(negative, first)
assertEquals(positive, last)
assertEquals(positive, first)
assertEquals(negative, last)
assertEquals(Long.MAX_VALUE, map.select(0))
assertEquals(666, map.select(0))
assertEquals(Long.MAX_VALUE, map.select(1))
assertNotSame(map, clone)
assertEquals(0, clone.getLongCardinality())
assertNotSame(map, clone)
assertEquals(1, clone.getLongCardinality())
assertEquals(123, clone.select(0))
assertNotSame(map, clone)
assertEquals(1, clone.getLongCardinality())
assertEquals(123, clone.select(0))
assertNotSame(map, clone)
assertEquals(3, clone.getLongCardinality())
assertEquals(-123, clone.select(0))
assertEquals(123, clone.select(1))
assertEquals(Long.MAX_VALUE, clone.select(2))
assertNotSame(map, clone)
assertEquals(3, clone.getLongCardinality())
assertEquals(123, clone.select(0))
assertEquals(Long.MAX_VALUE, clone.select(1))
assertEquals(-123, clone.select(2))
Assertions.assertTrue(map.getHighToBitmap().firstEntry().getValue() instanceof MutableRoaringBitmap)
Assertions.assertTrue(clone.getHighToBitmap().firstEntry().getValue() instanceof RoaringBitmap)
assertEquals(2, left.getLongCardinality())
assertEquals(123, left.select(0))
assertEquals(234, left.select(1))
assertEquals(3, left.getLongCardinality())
assertEquals(123, left.select(0))
assertEquals(234, left.select(1))
assertEquals(Long.MAX_VALUE, left.select(2))
assertEquals(2, left.getLongCardinality())
assertEquals(123, left.select(0))
assertEquals(Long.MAX_VALUE / 2, left.select(1))
assertEquals(2, left.getLongCardinality())
assertEquals(123, left.select(0))
assertEquals(234, left.select(1))
assertEquals(2, left.getLongCardinality())
assertEquals(123, left.select(0))
assertEquals(Long.MAX_VALUE, left.select(1))
assertEquals(2, left.getLongCardinality())
assertEquals(123, left.select(0))
assertEquals(234, left.select(1))
assertEquals(2, left.getLongCardinality())
assertEquals(123, left.select(0))
assertEquals(234, left.select(1))
assertEquals(1, right.getLongCardinality())
assertEquals(123, right.select(0))
assertEquals(2, left.getLongCardinality())
assertEquals(123, left.select(0))
assertEquals(345, left.select(1))
assertEquals(2, left.getLongCardinality())
assertEquals(123, left.select(0))
assertEquals(345, left.select(1))
assertEquals(2, left.getLongCardinality())
assertEquals(123, left.select(0))
assertEquals(Long.MAX_VALUE, left.select(1))
assertEquals(1, left.getLongCardinality())
assertEquals(123, left.select(0))
assertEquals(1, left.getLongCardinality())
assertEquals(234, left.select(0))
assertEquals(1, left.getLongCardinality())
assertEquals(123, left.select(0))
assertEquals(0, left.getLongCardinality())
assertEquals(1, left.getLongCardinality())
assertEquals(Long.MAX_VALUE, left.select(0))
assertEquals(1, left.getLongCardinality())
assertEquals(123, left.select(0))
assertEquals(1, left.getLongCardinality())
assertEquals(123, left.select(0))
assertEquals(1, left.getLongCardinality())
assertEquals(123, left.select(0))
assertEquals(1, left.getLongCardinality())
assertEquals(123, left.select(0))
assertEquals("{-9223372036854775808,123,9223372036854775807}", map.toString())
assertEquals("{123,9223372036854775807,9223372036854775808}", map.toString())
assertEquals(7L, map.getLongCardinality())
assertEquals(5L, map.select(0))
assertEquals(11L, map.select(6L))
assertEquals(7L, map.getLongCardinality())
assertEquals(5L, map.select(0))
assertEquals(11L, map.select(6L))
assertEquals(2, map.getLongCardinality())
assertEquals(end - 2, map.select(0))
assertEquals(end - 1, map.select(1))
assertEquals(nbItems, map.getLongCardinality())
assertEquals(from, map.select(0))
assertEquals(to - 1, map.select(nbItems - 1))
assertEquals(outOfSingleRoaring, map.getLongCardinality())
assertEquals(outOfSingleRoaring, map.getLongCardinality())
assertEquals(0, map.select(0))
assertEquals(outOfSingleRoaring - 1, map.select(outOfSingleRoaring - 1))
assertEquals(maxForRoaringBitmap, map.getLongCardinality())
assertEquals(-1, map.select(-1))
assertEquals(maxForRoaringBitmap, map.getLongCardinality())
assertEquals(-1, map.select(-1))
assertNotEquals(RoaringIntPacking.high(to), RoaringIntPacking.high(from))
assertTrue(it.hasNext())
assertEquals(123L, it.next().longValue())
assertTrue(it.hasNext())
assertEquals(234, it.next().longValue())
assertEquals(123L, map.select(0))
assertEquals(Long.MAX_VALUE, map.select(1))
assertEquals(0, map.rankLong(0))
assertEquals(1, map.rankLong(123))
assertEquals(1, map.rankLong(Long.MAX_VALUE - 1))
assertEquals(2, map.rankLong(Long.MAX_VALUE))
assertEquals(1, map.rankLong(Long.MAX_VALUE / 2L))
assertEquals(1, r.getLongCardinality())
assertEquals(0, r.getLongCardinality())
assertArrayEquals(bitmapAsIntArray, Ints.toArray(Longs.asList(longBitmapAsArray)))
assertArrayEquals(Longs.toArray(Ints.asList(bitmapAsIntArray)), longBitmapAsArray)
assertEquals(bitmap.select(0), longBitmap.select(0))
assertEquals(Util.toUnsignedLong(bitmap.select(0)), longBitmap.select(0))
assertTrue(map.isEmpty())
assertEquals(16, map.getLongSizeInBytes())
assertEquals(3, map.getHighToBitmap().size())
assertEquals(228, map.getLongSizeInBytes())
assertEquals(264, map.getLongSizeInBytes())
assertEquals(map2, map1)
Assertions.assertTrue(x.getHighToBitmap().values().iterator().next() instanceof RoaringBitmap)
Assertions.assertTrue(y.getHighToBitmap().values().iterator().next() instanceof RoaringBitmap)
Assertions.assertEquals(16L, x.getLongCardinality())
Assertions.assertEquals(8L, x.getLongCardinality())
Assertions.assertEquals(reference.length, bitmap.serializedSizeInBytes())
Assertions.assertArrayEquals(reference, baos.toByteArray())
Assertions.assertEquals(0, bitmap.getLongCardinality())
Assertions.assertEquals(0, bitmap.getHighToBitmap().size())
Assertions.assertEquals(10, bitmap.getLongCardinality())
Assertions.assertEquals(1, bitmap.getHighToBitmap().size())
Assertions.assertEquals(0, bitmap.select(0))
Assertions.assertEquals(9, bitmap.select(9))
Assertions.assertEquals(100, bitmap.getLongCardinality())
Assertions.assertEquals(10, bitmap.getHighToBitmap().size())
Assertions.assertEquals(0, bitmap.select(0))
Assertions.assertEquals(9, bitmap.select(9))
Assertions.assertEquals((9L << 32) + 0L, bitmap.select(90))
Assertions.assertEquals((9L << 32) + 1L, bitmap.select(91))
Assertions.assertEquals((9L << 32) + 9L, bitmap.select(99))
Assertions.assertEquals(121, bitmap.getLongCardinality())
Assertions.assertEquals(11, bitmap.getHighToBitmap().size())
Assertions.assertEquals(((maxInt - 10L) << 32) + (maxInt - 10), bitmap.select(0))
Assertions.assertEquals(((maxInt - 10L) << 32) + (maxInt - 0), bitmap.select(10))
Assertions.assertEquals(((maxInt - 0L) << 32) + (maxInt - 10), bitmap.select(110))
Assertions.assertEquals(((maxInt - 0L) << 32) + (maxInt - 9), bitmap.select(111))
Assertions.assertEquals(((maxInt - 0L) << 32) + (maxInt - 0), bitmap.select(120))
Assertions.assertEquals(3L, x.getLongCardinality())
Assertions.assertArrayEquals(new long[] { 0, Long.MAX_VALUE, -1L }, x.toArray())
Assertions.assertEquals(3L, x.getLongCardinality())
Assertions.assertArrayEquals(new long[] { -1L, 0, Long.MAX_VALUE }, x.toArray())
Assertions.assertEquals(2L, x.getLongCardinality())
Assertions.assertArrayEquals(new long[] { -3L, -2L }, x.toArray())
Assertions.assertEquals(2L, x.getLongCardinality())
Assertions.assertArrayEquals(new long[] { -3L, -2L }, x.toArray())
Assertions.assertEquals(4L, x.getLongCardinality())
Assertions.assertEquals(1L, x.getHighToBitmap().size())
Assertions.assertArrayEquals(new long[] { Integer.MAX_VALUE - 1L, Integer.MAX_VALUE, Integer.MAX_VALUE + 1L, Integer.MAX_VALUE + 2L }, x.toArray())
Assertions.assertEquals(4L, x.getLongCardinality())
Assertions.assertEquals(2L, x.getHighToBitmap().size())
Assertions.assertArrayEquals(new long[] { rangeStart, rangeStart + 1L, rangeStart + 2L, rangeStart + 3L }, x.toArray())
Assertions.assertEquals(4L, x.getLongCardinality())
Assertions.assertArrayEquals(new long[] { Long.MAX_VALUE - 1L, Long.MAX_VALUE, Long.MIN_VALUE, Long.MIN_VALUE + 1L }, x.toArray())
assertEquals(2, rb.first())
assertEquals(8, rb.last())
assertEquals(-128, rb.first())
assertEquals(-32, rb.last())
assertEquals(2, rb.first())
assertEquals(-32, rb.last())
assertEquals(presentValues.length, expectedValueIndex)
assertTrue(BitSetUtil.equals(bitset, bitmap))
assertEquals(-2, map.select(-2))
assertEquals(-1, map.select(-1))
assertEquals(imrempty.isEmpty(), true)
assertEquals(count1, count2)
assertEquals(cksum1, cksum2)
assertEquals(count1, count2)
assertEquals(cksum1, cksum2)
assertEquals(bitmap_emptyr.isEmpty(), true)
assertEquals(bitmap_empty.isEmpty(), true)
assertEquals(cksum1, cksum2)
assertEquals(emptyt.isEmpty(), true)
assertEquals(cksum1, cksum2)
assertEquals(bitmap_a, bitmap_ar)
assertEquals(bitmap_am, bitmap_amr)
assertEquals(bitmap_am.serializedSizeInBytes(), bitmap_a.serializedSizeInBytes())
assertEquals(bitmap_amr.serializedSizeInBytes(), bitmap_ar.serializedSizeInBytes())
assertEquals(bitmap_a, bitmap_c1)
assertEquals(bitmap_a, bitmap_c2)
assertEquals(bitmap_a, bitmap_c3)
assertEquals(bitmap_a, bitmap_c4)
assertEquals(bitmap_ar, bitmap_c1)
assertEquals(bitmap_ar, bitmap_c2)
assertEquals(bitmap_ar, bitmap_c3)
assertEquals(bitmap_ar, bitmap_c4)
assertEquals(bitmap_a, bitmap_c)
assertEquals(expected, Util.cardinalityInBitmapRange(bc.bitmap, begin, end))
assertEquals("{5,6,7,8,9,10,11,12,13,14,65517,65533}", bc2.toString())
assertEquals(0, bc.ixor(bc3).getCardinality())
assertEquals(bc, bc3)
assertEquals(bc.hashCode(), bc3.hashCode())
assertEquals(0, bc.iandNot(bc3).getCardinality())
assertEquals(0, bc3.getCardinality())
assertEquals(bc, bc2)
assertEquals(0, bc.iand(bc3).getCardinality())
assertEquals(bc, bc2)
assertEquals(bc, bc2)
assertEquals(0, bc.iandNot(rc).getCardinality())
assertEquals(-1, result.getCardinality())
assertEquals(-1, iresult.getCardinality())
assertEquals(1 << 16, repaired.getCardinality())
assertEquals(1 << 16, irepaired.getCardinality())
assertTrue(repaired instanceof RunContainer)
assertTrue(irepaired instanceof RunContainer)
assertEquals(-1, result.getCardinality())
assertEquals(-1, iresult.getCardinality())
assertEquals(1 << 16, repaired.getCardinality())
assertEquals(1 << 16, irepaired.getCardinality())
assertTrue(repaired instanceof RunContainer)
assertTrue(irepaired instanceof RunContainer)
assertEquals(-1, result.getCardinality())
assertEquals(-1, iresult.getCardinality())
assertEquals(1 << 16, repaired.getCardinality())
assertEquals(1 << 16, irepaired.getCardinality())
assertTrue(repaired instanceof RunContainer)
assertTrue(irepaired instanceof RunContainer)
assertEquals(8280, bc.cardinality)
assertEquals(8280, bc.cardinality)
assertEquals(8677, bc.cardinality)
assertEquals(5274, bc.cardinality)
assertEquals(5274, bc.cardinality)
assertEquals(5046, bc.cardinality)
assertEquals(6031, bc.cardinality)
assertEquals(4, bc2.getCardinality())
assertEquals(130, rc1.getCardinality())
assertTrue(iterator.hasNext())
assertEquals(256, iterator.next())
assertTrue(iterator.hasNext())
assertEquals(257, iterator.next())
assertEquals(130, rc1.getCardinality())
assertTrue(iterator.hasNext())
assertEquals(256, iterator.next())
assertTrue(iterator.hasNext())
assertEquals(260, iterator.next())
assertEquals(130, rc1.getCardinality())
assertTrue(iterator.hasNext())
assertEquals(256, iterator.next())
assertTrue(iterator.hasNext())
assertEquals(257, iterator.next())
assertEquals(130, rc1.getCardinality())
assertTrue(iterator.hasNext())
assertEquals(256, iterator.next())
assertTrue(iterator.hasNext())
assertEquals(257, iterator.next())
assertEquals(130, rc1.getCardinality())
assertTrue(iterator.hasNext())
assertEquals(256, iterator.next())
assertTrue(iterator.hasNext())
assertEquals(260, iterator.next())
assertEquals(9, bc.getCardinality())
assertEquals(1 << 16, result.getCardinality())
assertTrue(result instanceof RunContainer)
assertEquals(1 << 16, result.getCardinality())
assertTrue(result instanceof RunContainer)
assertEquals(1 << 16, result.getCardinality())
assertEquals(1 << 16, iresult.getCardinality())
assertTrue(result instanceof RunContainer)
assertTrue(iresult instanceof RunContainer)
assertEquals(1 << 16, iresult.getCardinality())
assertTrue(iresult instanceof RunContainer)
assertEquals(0, bc.getCardinality())
assertEquals(4, bc.getCardinality())
assertEquals(8082, bc.getCardinality())
assertEquals(9, bc.getCardinality())
assertEquals(8082, bc.getCardinality())
assertEquals(8082, bc.getCardinality())
assertEquals(9, bc.getCardinality())
assertTrue(bc.contains(subset))
assertTrue(bc.contains(subset))
assertTrue(bc.contains(subset))
assertTrue(bc.contains(subset))
assertTrue(bc.contains(subset))
assertTrue(bc.contains(subset))
assertTrue(bc.contains(subset))
assertTrue(bc.contains(subset))
assertTrue(bc.contains(subset))
assertTrue(bc.contains(subset))
assertTrue(bc.contains(subset))
assertTrue(bc.contains(subset))
assertTrue(container.intersects(0, 1))
assertTrue(container.intersects(0, 101))
assertTrue(container.intersects(0, 1 << 16))
assertEquals(intersects, container.intersects(min, sup))
assertTrue(container.intersects(0, 1))
assertTrue(container.intersects(0, 101))
assertTrue(container.intersects(0, 1 << 16))
assertTrue(container.intersects(11, 1 << 16))
assertTrue(container.intersects(501, 511))
assertTrue(container.intersects(0, lower16Bits(-40)))
assertTrue(container.intersects(lower16Bits(-50), lower16Bits(-10)))
assertTrue(container.intersects(lower16Bits(-400), lower16Bits(-11)))
assertTrue(container.intersects(lower16Bits(-11), lower16Bits(-1)))
assertTrue(container.intersects(lower16Bits(-650), lower16Bits(-500)))
assertTrue(container.intersects(lower16Bits(-501), lower16Bits(-1)))
assertTrue(container.contains(0, 1))
assertTrue(container.contains(64 * 10, 64 * 11))
assertTrue(container.contains(1 + 64 * 10, (64 * 11) - 1))
assertTrue(container.contains(0, 1))
assertTrue(container.contains(64 * 10, (64 * 13) - 31))
assertTrue(container.contains(1 + 64 * 10, (64 * 13) - 32))
assertTrue(container.contains(64 * 10, 64 * 12))
assertTrue(container.contains(1 + 64 * 1023, 64 * 1024 - 1))
assertTrue(container.contains(1 + 64 * 1023, 64 * 1024 - 2))
assertTrue(container.contains(64 * 1023 + 1, 64 * 1023 + 2))
assertEquals(0, container.nextSetBit(0))
assertEquals(2, container.nextSetBit(1))
assertEquals(2, container.nextSetBit(2))
assertEquals(4, container.nextSetBit(3))
assertEquals(-1, container.nextSetBit((64 * 1023) + 5))
assertEquals(64, container.nextSetBit(1))
assertEquals(10, container.nextValue((char) 10))
assertEquals(20, container.nextValue((char) 11))
assertEquals(30, container.nextValue((char) 30))
assertEquals(-1, container.nextValue((char) 31))
assertEquals(64, container.nextValue((char) 0))
assertEquals(64, container.nextValue((char) 64))
assertEquals(65, container.nextValue((char) 65))
assertEquals(128, container.nextValue((char) 128))
assertEquals(-1, container.nextValue((char) 129))
assertEquals(-1, container.nextValue((char) 5000))
assertEquals(64, container.nextValue((char) 0))
assertEquals(64, container.nextValue((char) 64))
assertEquals(65, container.nextValue((char) 65))
assertEquals(128, container.nextValue((char) 128))
assertEquals(256, container.nextValue((char) 129))
assertEquals(-1, container.nextValue((char) 512))
assertEquals(64, container.nextValue((char) 0))
assertEquals(64, container.nextValue((char) 63))
assertEquals(64, container.nextValue((char) 64))
assertEquals(65, container.nextValue((char) 65))
assertEquals(128, container.nextValue((char) 128))
assertEquals(200, container.nextValue((char) 129))
assertEquals(200, container.nextValue((char) 199))
assertEquals(200, container.nextValue((char) 200))
assertEquals(250, container.nextValue((char) 250))
assertEquals(5000, container.nextValue((char) 2500))
assertEquals(5000, container.nextValue((char) 5000))
assertEquals(5200, container.nextValue((char) 5200))
assertEquals(-1, container.nextValue((char) 5201))
assertEquals(((1 << 15) | 5), container.nextValue((char) ((1 << 15) | 4)))
assertEquals(((1 << 15) | 5), container.nextValue((char) ((1 << 15) | 5)))
assertEquals(((1 << 15) | 7), container.nextValue((char) ((1 << 15) | 6)))
assertEquals(((1 << 15) | 7), container.nextValue((char) ((1 << 15) | 7)))
assertEquals(-1, container.nextValue((char) ((1 << 15) | 8)))
assertEquals(-1, container.previousValue((char) 0))
assertEquals(-1, container.previousValue((char) 63))
assertEquals(64, container.previousValue((char) 64))
assertEquals(65, container.previousValue((char) 65))
assertEquals(128, container.previousValue((char) 128))
assertEquals(128, container.previousValue((char) 129))
assertEquals(-1, container.previousValue((char) 0))
assertEquals(-1, container.previousValue((char) 63))
assertEquals(64, container.previousValue((char) 64))
assertEquals(65, container.previousValue((char) 65))
assertEquals(128, container.previousValue((char) 128))
assertEquals(128, container.previousValue((char) 129))
assertEquals(128, container.previousValue((char) 199))
assertEquals(200, container.previousValue((char) 200))
assertEquals(250, container.previousValue((char) 250))
assertEquals(500, container.previousValue((char) 2500))
assertEquals(5000, container.previousValue((char) 5000))
assertEquals(5200, container.previousValue((char) 5200))
assertEquals(-1, container.previousValue((char) 5))
assertEquals(-1, container.previousValue((char) 9))
assertEquals(10, container.previousValue((char) 10))
assertEquals(10, container.previousValue((char) 11))
assertEquals(20, container.previousValue((char) 21))
assertEquals(30, container.previousValue((char) 30))
assertEquals(30, container.previousValue((char) 31))
assertEquals(0, container.previousValue((char) 0))
assertEquals(0, container.previousValue((char) 1))
assertEquals(2, container.previousValue((char) 2))
assertEquals(2, container.previousValue((char) 3))
assertEquals(-1, container.previousValue((char) ((1 << 15) | 4)))
assertEquals(((1 << 15) | 5), container.previousValue((char) ((1 << 15) | 5)))
assertEquals(((1 << 15) | 5), container.previousValue((char) ((1 << 15) | 6)))
assertEquals(((1 << 15) | 7), container.previousValue((char) ((1 << 15) | 7)))
assertEquals(((1 << 15) | 7), container.previousValue((char) ((1 << 15) | 8)))
assertEquals(0, container.previousAbsentValue((char) 0))
assertEquals(63, container.previousAbsentValue((char) 63))
assertEquals(63, container.previousAbsentValue((char) 64))
assertEquals(63, container.previousAbsentValue((char) 65))
assertEquals(63, container.previousAbsentValue((char) 128))
assertEquals(129, container.previousAbsentValue((char) 129))
assertEquals(0, container.previousAbsentValue((char) 0))
assertEquals(63, container.previousAbsentValue((char) 63))
assertEquals(63, container.previousAbsentValue((char) 64))
assertEquals(63, container.previousAbsentValue((char) 65))
assertEquals(63, container.previousAbsentValue((char) 128))
assertEquals(129, container.previousAbsentValue((char) 129))
assertEquals(199, container.previousAbsentValue((char) 199))
assertEquals(199, container.previousAbsentValue((char) 200))
assertEquals(199, container.previousAbsentValue((char) 250))
assertEquals(2500, container.previousAbsentValue((char) 2500))
assertEquals(4999, container.previousAbsentValue((char) 5000))
assertEquals(4999, container.previousAbsentValue((char) 5200))
assertEquals(9, container.previousAbsentValue((char) 9))
assertEquals(9, container.previousAbsentValue((char) 10))
assertEquals(11, container.previousAbsentValue((char) 11))
assertEquals(21, container.previousAbsentValue((char) 21))
assertEquals(29, container.previousAbsentValue((char) 30))
assertEquals(((1 << 15) | 4), container.previousAbsentValue((char) ((1 << 15) | 4)))
assertEquals(((1 << 15) | 4), container.previousAbsentValue((char) ((1 << 15) | 5)))
assertEquals(((1 << 15) | 6), container.previousAbsentValue((char) ((1 << 15) | 6)))
assertEquals(((1 << 15) | 6), container.previousAbsentValue((char) ((1 << 15) | 7)))
assertEquals(((1 << 15) | 8), container.previousAbsentValue((char) ((1 << 15) | 8)))
assertEquals(0, container.nextAbsentValue((char) 0))
assertEquals(63, container.nextAbsentValue((char) 63))
assertEquals(129, container.nextAbsentValue((char) 64))
assertEquals(129, container.nextAbsentValue((char) 65))
assertEquals(129, container.nextAbsentValue((char) 128))
assertEquals(129, container.nextAbsentValue((char) 129))
assertEquals(0, container.nextAbsentValue((char) 0))
assertEquals(63, container.nextAbsentValue((char) 63))
assertEquals(129, container.nextAbsentValue((char) 64))
assertEquals(129, container.nextAbsentValue((char) 65))
assertEquals(129, container.nextAbsentValue((char) 128))
assertEquals(129, container.nextAbsentValue((char) 129))
assertEquals(199, container.nextAbsentValue((char) 199))
assertEquals(501, container.nextAbsentValue((char) 200))
assertEquals(501, container.nextAbsentValue((char) 250))
assertEquals(2500, container.nextAbsentValue((char) 2500))
assertEquals(5201, container.nextAbsentValue((char) 5000))
assertEquals(5201, container.nextAbsentValue((char) 5200))
assertEquals(9, container.nextAbsentValue((char) 9))
assertEquals(11, container.nextAbsentValue((char) 10))
assertEquals(11, container.nextAbsentValue((char) 11))
assertEquals(21, container.nextAbsentValue((char) 21))
assertEquals(31, container.nextAbsentValue((char) 30))
assertEquals(((1 << 15) | 4), container.nextAbsentValue((char) ((1 << 15) | 4)))
assertEquals(((1 << 15) | 6), container.nextAbsentValue((char) ((1 << 15) | 5)))
assertEquals(((1 << 15) | 6), container.nextAbsentValue((char) ((1 << 15) | 6)))
assertEquals(((1 << 15) | 8), container.nextAbsentValue((char) ((1 << 15) | 7)))
assertEquals(((1 << 15) | 8), container.nextAbsentValue((char) ((1 << 15) | 8)))
assertEquals(11, consumer.getNumberOfValuesConsumed())
assertEquals(5, consumer2.getNumberOfValuesConsumed())
assertEquals(6, consumer3.getNumberOfValuesConsumed())
assertEquals(bitmap.last(), bitmap.previousValue(testValue))
assertEquals(mutable.last(), bitmap.previousValue(testValue))
assertEquals(1, array.size)
assertEquals(2, array.keys.length)
assertEquals(3, array.size)
assertEquals(4, array.keys.length)
assertEquals(5, array.size)
assertArrayEquals(new char[] { 0, 2, 5, 6, 7 }, array.keys)
assertEquals("{1,2,3,4294967294,4294967295}", bitmap.toString())
assertEquals("{2,3,4}", bitmap.toString())
assertEquals("{1,2,3,4294967295}", bitmap.toString())
assertTrue(it.hasNext())
assertEquals(101993170, it.next())
assertTrue(it.hasNext())
assertEquals(101993170, it.next())
assertEquals(1000000, limited.getCardinality())
assertEquals(1000000, c.count)
assertEquals(1000000, limited.toArray().length)
assertEquals(1, r.limit(1).getCardinality())
assertEquals(10, r.limit(10).getCardinality())
assertEquals(100, r.limit(100).getCardinality())
assertEquals(1000, r.limit(1000).getCardinality())
assertEquals(10000, r.limit(10000).getCardinality())
assertEquals(100000, r.limit(100000).getCardinality())
assertEquals(1000000, r.limit(1000000).getCardinality())
assertNotEquals(cp.getContainer(), null)
assertNotEquals(cpo.getContainer(), null)
assertEquals(cp.compareTo(cpo), 0)
assertEquals(cp.getCardinality(), (1 << 16) / 2)
assertTrue(cp.isBitmapContainer())
assertTrue(cp.compareTo(cpo) > 0)
assertNotEquals(cp.getContainer(), null)
assertEquals(cp.getCardinality(), (1 << 16) / 512)
assertTrue(cp.compareTo(cpo) > 0)
assertNotEquals(cp.getContainer(), null)
assertEquals(cp.getCardinality(), (1 << 16))
assertTrue(cp.isRunContainer())
assertTrue(cp.compareTo(cpo) > 0)
assertEquals(0, cp.compareTo(cpo))
assertNull(cp.getContainer())
assertArrayEquals(correct, resand)
assertEquals(rrand.getCardinality(), RoaringBitmap.andCardinality(rr, rr2))
assertEquals(rrand.getCardinality(), RoaringBitmap.andCardinality(rr2, rr))
assertEquals(rrand.getCardinality(), RoaringBitmap.andCardinality(rr2, rr))
assertEquals(rrand.getCardinality(), rrandCount)
assertTrue(i.hasNext())
assertEquals(1, i.next())
assertTrue(i.hasNext())
assertEquals(2 << 16, i.next())
assertArrayEquals(correct, resandNot)
assertEquals(correct, rr)
assertEquals(rb, andNotresult)
assertEquals(rb2, off)
assertEquals(rb2, off)
assertEquals(array.length, 1)
assertEquals(array[0], 13)
assertEquals(array.length, 1)
assertEquals(array[0], 13)
assertEquals(correct, rr)
assertEquals(array.length, 1)
assertEquals(array[0], 13)
assertArrayEquals(arrayand, arrayres)
assertEquals(andresult, off)
assertEquals(0, andresult.getCardinality())
assertEquals(0, andresult.getCardinality())
assertEquals(0, andresult2.getCardinality())
assertEquals(0, andresult.getCardinality())
assertEquals(rc.getCardinality(), rb.getCardinality())
assertEquals(array[0], (char) 110)
assertEquals(array[1], (char) 114)
assertEquals(array[2], (char) 115)
assertArrayEquals(array, a)
assertArrayEquals(cuiRelsArray, back)
assertEquals(array[0], (char) 110)
assertEquals(array[1], (char) 114)
assertEquals(array[2], (char) 115)
assertEquals(0, rb.getCardinality())
assertTrue(0 != rb2.getCardinality())
assertEquals(1, andresult.getCardinality())
assertEquals(rb2.getCardinality(), orresult.getCardinality())
assertArrayEquals(arrayrr, arrayrr3)
assertTrue(validate(rbc, ac1))
assertTrue(validate(rbc, ac2))
assertTrue(validate(rbc, ac3))
assertTrue(r2.contains(131000))
assertTrue(r2.contains(131000))
assertTrue(r2.contains(killingPosition))
assertEquals(182, bitmap.getCardinality())
assertEquals(100000, rbcard)
assertTrue(equals(bs, rb))
assertEquals(100000, rbcard)
assertEquals(0, rb.getCardinality())
assertTrue(equals(bs, rb))
assertTrue(equals(bs, rb1))
assertEquals(0, rbcard)
assertTrue(equals(bs, rb))
assertEquals(0, rbcard)
assertEquals(1, rb.getCardinality())
assertTrue(equals(bs, rb1))
assertTrue(equals(bs, rb))
assertEquals(9, rbcard)
assertTrue(equals(bs, rb))
assertEquals(9, rbcard)
assertTrue(equals(bs, rb2))
assertEquals(96608, rbcard)
assertTrue(equals(bs, rb))
assertEquals(96608, rbcard)
assertTrue(equals(bs, rb2))
assertEquals(46464, rbcard)
assertTrue(equals(bs, rb))
assertEquals(46464, rbcard)
assertTrue(equals(bs, rb2))
assertEquals(1928, rbcard)
assertTrue(equals(bs, rb))
assertEquals(1928, rbcard)
assertTrue(equals(bs, rb2))
assertEquals(132000 - 651 + 2, rbcard)
assertTrue(equals(bs, rb))
assertEquals(132000 - 651 + 2, rbcard)
assertTrue(equals(bs, rb2))
assertTrue(equals(bs, rb2))
assertEquals(99999, rb2.getCardinality())
assertTrue(rb2.contains(Integer.MAX_VALUE + 100000))
assertTrue(rb2.contains(Integer.MAX_VALUE + 199999))
assertTrue(RoaringBitmap.intersects(rr1, rr2))
assertTrue(RoaringBitmap.intersects(rr3, rr2))
assertTrue(RoaringBitmap.intersects(rr1, rr2))
assertTrue(rr1.intersects(0, 3))
assertTrue(rr1.intersects(0, 11))
assertTrue(rr1.intersects(2, 3))
assertTrue(rr1.intersects(4, 8))
assertTrue(rr1.intersects(8, 12))
assertTrue(rr2.intersects(0, 11))
assertTrue(rr2.intersects(2, 3))
assertTrue(rr2.intersects(4, 8))
assertTrue(rr2.intersects(8, 12))
assertTrue(rr3.intersects(5, 10))
assertTrue(bitmap.intersects(first - 1, first + 1))
assertTrue(bitmap.intersects(first, first + 1))
assertArrayEquals(correct, resor)
assertEquals(rror.getCardinality(), RoaringBitmap.orCardinality(rr, rr2))
assertEquals(xor.getCardinality(), RoaringBitmap.xorCardinality(rb, rb2))
assertEquals(andNot.getCardinality(), RoaringBitmap.andNotCardinality(rb, rb2))
assertEquals(andNot.getCardinality(), RoaringBitmap.andNotCardinality(big, small))
assertEquals(andNot.getCardinality(), RoaringBitmap.andNotCardinality(small, big))
assertArrayEquals(array, arrayrr)
assertArrayEquals(array, arrayirr)
assertEquals(correct, rr)
assertArrayEquals(arrayor, arrayrr)
assertTrue(valide)
assertEquals(orresult, off)
assertEquals(rb2card, orresult.getCardinality())
assertEquals(rb2card, orresult.getCardinality())
assertEquals(rb2.getCardinality() + rb.getCardinality(), orresult2.getCardinality())
assertEquals(rb, orresult2)
assertEquals((4 << 16) - 1, rb.getCardinality())
assertEquals(one, RoaringBitmap.bitmapOf(32))
assertEquals(one, RoaringBitmap.bitmapOf(32))
assertEquals(one, RoaringBitmap.bitmapOf(32))
assertEquals((4 << 16) - 1, rb.getCardinality())
assertEquals((5 << 16) - 2, rb.getCardinality())
assertEquals((2 << 16) + (2 << 14), rb.getCardinality())
assertEquals((5 << 16), rb.getCardinality())
assertEquals((1 << 14) + 4, rb.getCardinality())
assertTrue(iterator.hasNext())
assertEquals((1 << 16) - 1, iterator.next())
assertTrue(iterator.hasNext())
assertEquals(1 << 16, iterator.next())
assertTrue(iterator.hasNext())
assertEquals(2 << 16, iterator.next())
assertTrue(iterator.hasNext())
assertEquals(3 << 16, iterator.next())
assertEquals(0, array[0])
assertEquals(array[1], -1)
assertEquals(rb.getCardinality(), N)
assertEquals(1, and.getCardinality())
assertTrue(and.contains(1 << 31))
assertEquals(1, rr1.getCardinality())
assertTrue(and.contains(1 << 31))
assertEquals(1, andNot.getCardinality())
assertTrue(andNot.contains(1))
assertEquals(1, rr1.getCardinality())
assertTrue(andNot.contains(1))
assertEquals(2, or.getCardinality())
assertTrue(or.contains(1))
assertTrue(or.contains(1 << 31))
assertEquals(2, rr1.getCardinality())
assertTrue(or.contains(1))
assertTrue(or.contains(1 << 31))
assertEquals(1, xor.getCardinality())
assertTrue(xor.contains(1))
assertEquals(1, rr1.getCardinality())
assertTrue(xor.contains(1))
assertEquals(answer.getCardinality(), array1.length)
assertEquals(rr1, rr3)
assertNotEquals(rr1, rr2)
assertNotEquals(rr3, rr2)
assertEquals(10, r1.getCardinality())
assertEquals(rbm1.hashCode(), rbm2.hashCode())
assertEquals(rbm1.hashCode(), rbm2.hashCode())
assertEquals(8, a.getCardinality())
assertEquals(8, a.getCardinality())
assertEquals(copy1, rb)
assertEquals(copy2, rb)
assertEquals(copy1, rb)
assertEquals(copy2, rb)
assertTrue(result.contains(13))
assertTrue(result.contains(42))
assertTrue(result.contains(1))
assertTrue(result.contains(2))
assertEquals(RoaringBitmap.or(rb1, rb2), RoaringBitmap.or(rrb1, rrb2))
assertEquals(rbor, FastAggregation.horizontal_or(rb1, rb2))
assertEquals(0, Util.select(1, 0))
assertEquals(0, Util.select(5, 0))
assertEquals(2, Util.select(5, 1))
assertEquals(rr.getCardinality(), rrback.getCardinality())
assertEquals(rr, rrback)
assertEquals(rr.getCardinality(), rrback.getCardinality())
assertEquals(rr, rrback)
assertEquals(rr.getCardinality(), rrback.getCardinality())
assertEquals(rr, rrback)
assertEquals(howmuch, bos.toByteArray().length)
assertEquals(rr.getCardinality(), rrback.getCardinality())
assertEquals(rr, rrback)
assertEquals(rr.getCardinality(), rrback.getCardinality())
assertEquals(rr, rrback)
assertEquals(howmuch, bos.toByteArray().length)
assertEquals(rr.getCardinality(), rrback.getCardinality())
assertEquals(rr, rrback)
assertEquals(rr.getCardinality(), rrback.getCardinality())
assertEquals(rr, rrback)
assertEquals(howmuch, bos.toByteArray().length)
assertEquals(rr.getCardinality(), rrback.getCardinality())
assertEquals(rr, rrback)
assertEquals(howmuch, bos.toByteArray().length)
assertEquals(rr.getCardinality(), rrback.getCardinality())
assertEquals(rr, rrback)
assertEquals(howmuch, bos.toByteArray().length)
assertEquals(rr.getCardinality(), rrback.getCardinality())
assertEquals(rr, rrback)
assertEquals(howmuch, bos.toByteArray().length)
assertEquals(rr.getCardinality(), rrback.getCardinality())
assertEquals(rr, rrback)
assertEquals(howmuch, bos.toByteArray().length)
assertEquals(rr.getCardinality(), rrback.getCardinality())
assertEquals(rr, rrback)
assertEquals(howmuch, bos.toByteArray().length)
assertEquals(rr.getCardinality(), rrback.getCardinality())
assertEquals(rr, rrback)
assertEquals(howmuch, bos.toByteArray().length)
assertEquals(rr.getCardinality(), rrback.getCardinality())
assertEquals(rr, rrback)
assertEquals(howmuch, bos.toByteArray().length)
assertEquals(rr.getCardinality(), rrback.getCardinality())
assertEquals(rr, rrback)
assertEquals(howmuch, bos.toByteArray().length)
assertEquals(rr.getCardinality(), rrback.getCardinality())
assertEquals(rr, rrback)
assertEquals(howmuch, bos.toByteArray().length)
assertEquals(rr.getCardinality(), rrback.getCardinality())
assertEquals(rr, rrback)
assertArrayEquals(expectedresult, result)
assertEquals(rxor, ror)
assertEquals(0, wastedBytes)
assertArrayEquals(correct, resxor)
assertEquals(correct, rr)
assertTrue(valide)
assertEquals(xorresult, off)
assertEquals(rb2card, xorresult.getCardinality())
assertEquals(rb2card, xorresult.getCardinality())
assertEquals(rb2.getCardinality() + rb.getCardinality(), xorresult2.getCardinality())
assertEquals(xorresult2, rb)
assertEquals(rb4, RoaringBitmap.lazyorfromlazyinputs(rb1, rb2))
assertEquals(rb5, RoaringBitmap.or(rb1, rb2, rb3))
assertEquals(rb2, rb1)
assertEquals(1, rb.first())
assertEquals(7, rb.last())
assertEquals(0, rb.first())
assertEquals(8, rb.last())
assertEquals(3, rb.first())
assertEquals(max, rb.last())
assertEquals(0, rb.first())
assertEquals(max, rb.last())
assertEquals(2, rb.first())
assertEquals(8, rb.last())
assertEquals(2, rb.first())
assertEquals((1 << 14) - 1, rb.last())
assertEquals(2, rb.first())
assertEquals((1L << 30) - 1, rb.last())
assertTrue(baseline.isHammingSimilar(baseline, 0))
assertTrue(baseline.isHammingSimilar(other, 9))
assertTrue(baseline.isHammingSimilar(other, 6))
assertEquals(baseline.getCardinality(), RoaringBitmap.andCardinality(baseline, baseline))
assertTrue(baseline.isHammingSimilar(baseline, 0))
assertTrue(baseline.isHammingSimilar(other, 1))
assertTrue(baseline.isHammingSimilar(other, 2))
assertTrue(baseline.isHammingSimilar(other, 3))
assertEquals(baseline, RoaringBitmap.and(baseline, baseline))
assertEquals(baseline.getCardinality(), RoaringBitmap.andCardinality(baseline, baseline))
assertEquals(0, RoaringBitmap.bitmapOf(65537).rank(1))
assertEquals(1, RoaringBitmap.bitmapOf(65537).rank(65537))
assertEquals(1, RoaringBitmap.bitmapOf(65537).rank(65538))
assertEquals("{4294967289}", bitmap.toString())
assertEquals(-7, bitmap.last())
assertTrue(bitmap.contains(1L, 999_999L))
assertTrue(bitmap.contains(0L, 500_000L))
assertTrue(bitmap.contains(1, 6))
assertTrue(bitmap.contains(1, 5))
assertTrue(bitmap.contains(2, 6))
assertTrue(bitmap.contains(2, 7))
assertTrue(bitmap.contains(0L, 1L))
assertTrue(bitmap.contains(1L << 10, 1 | (1L << 10)))
assertEquals(rb.contains(0), true)
assertEquals(rb.getCardinality(), 1)
assertEquals(-1, RoaringBitmap.bitmapOf(27399807).previousValue(403042))
assertEquals(-1, RoaringBitmap.bitmapOf().previousValue(403042))
assertEquals(1, r.rangeCardinality(60000, 70000))
assertEquals(-1, r.nextValue(7))
assertNotEquals(rbB, rbA)
assertNotEquals(rbB, rbA)
assertNotEquals(rbB, rbA)
assertTrue(map.contains(32))
assertTrue(bitmap.cardinalityExceeds(runLength + bitmapCount + 1))
assertTrue(bitmap.cardinalityExceeds(runLength + bitmapCount - 1))
assertTrue(bitmap.cardinalityExceeds(runLength - 1))
assertTrue(b1.equals(RoaringBitmap.bitmapOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))
assertTrue(b1.isEmpty())
assertTrue(b1.equals(RoaringBitmap.bitmapOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))
assertTrue(b1.isEmpty())
assertTrue(roaringbits < bitsetbits)
assertArrayEquals(RoaringBitmap.bitmapOf(0, 1 << 17).toArray(), writer.getUnderlying().toArray())
assertTrue(writer.getUnderlying().contains(0))
assertTrue(writer.getUnderlying().contains(1 << 17))
assertTrue(writer.getUnderlying().contains(0))
assertTrue(writer.getUnderlying().contains(1 << 17))
assertArrayEquals(RoaringBitmap.bitmapOf(0, 1).toArray(), writer.getUnderlying().toArray())
assertArrayEquals(expected.toArray(), writer.getUnderlying().toArray())
assertArrayEquals(RoaringBitmap.bitmapOf(0, -2).toArray(), writer.get().toArray())
assertArrayEquals(RoaringBitmap.bitmapOf(0, -2, -1).toArray(), writer.get().toArray())
assertArrayEquals(new int[] { 0, -2 }, writer.get().toArray())
assertArrayEquals(new int[] { 4, 5, 6, 100 }, writer.get().toArray())
Assertions.assertFalse(lnIt.hasNext())
Assertions.assertFalse(lnIt.hasNext())
Assertions.assertFalse(lnIt.hasNext())
Assertions.assertFalse(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key0))
Assertions.assertFalse(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key0))
Assertions.assertFalse(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key1))
Assertions.assertFalse(lnIt.hasNext())
Assertions.assertFalse(lnIt.hasNext())
Assertions.assertFalse(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key0))
Assertions.assertFalse(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key0))
Assertions.assertFalse(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key1))
Assertions.assertFalse(lnIt.hasNext())
Assertions.assertFalse(LongUtils.isMaxHigh(LongUtils.highPart(0)))
Assertions.assertFalse(LongUtils.isMaxHigh(LongUtils.highPart(Long.MAX_VALUE)))
Assertions.assertFalse(LongUtils.isMaxHigh(LongUtils.highPart(Long.MIN_VALUE)))
assertFalse(map.getLongIterator().hasNext())
assertFalse(map.contains(0))
assertFalse(map.isEmpty())
assertFalse(map.isEmpty())
assertFalse(map.isEmpty())
assertFalse(map.contains(345))
assertFalse(unsigned.compare(-1, 1) < 0)
assertFalse(unsigned.compare(Integer.MAX_VALUE, Integer.MAX_VALUE + 1) > 0)
assertFalse(it.hasNext())
assertFalse(map.contains(0))
assertFalse(map.contains(0))
assertFalse(iterator.hasNext())
assertFalse(iterator.hasNext())
assertFalse(iterator.hasNext())
assertFalse(iterator.hasNext())
assertFalse(iterator.hasNext())
assertFalse(bc.contains(superset))
assertFalse(bc.contains(shifted))
assertFalse(bc.contains(disjoint))
assertFalse(disjoint.contains(bc))
assertFalse(bc.contains(superset))
assertFalse(bc.contains(shifted))
assertFalse(bc.contains(disjoint))
assertFalse(disjoint.contains(bc))
assertFalse(bc.contains(superset))
assertFalse(bc.contains(shifted))
assertFalse(bc.contains(disjoint))
assertFalse(disjoint.contains(bc))
assertFalse(container.intersects(11, lower16Bits(-1)))
assertFalse(container.intersects(0, 1))
assertFalse(container.intersects(lower16Bits(-100), lower16Bits(-55)))
assertFalse(container.intersects(lower16Bits(-9), lower16Bits(-1)))
assertFalse(container.intersects(lower16Bits(-10), lower16Bits(-1)))
assertFalse(container.intersects(lower16Bits(-500), lower16Bits(-1)))
assertFalse(container.intersects(lower16Bits(-499), 1 << 16))
assertFalse(container.contains(64 * 10, 2 + 64 * 11))
assertFalse(container.contains(64 * 10, (64 * 13) - 30))
assertFalse(container.contains(64 * 10, 2 + 64 * 13))
assertFalse(container.contains(64 * 1023, 64 * 1024))
assertFalse(container.contains(64 * 1023, 64 * 1024 - 1))
assertFalse(container.contains(64 * 1023, 64 * 1023 + 2))
assertFalse(rr1.intersects((1 << 15), 0xFFFF))
assertFalse(it.hasNext())
assertFalse(it.hasNext())
assertFalse(cp.isRunContainer())
assertFalse(cp.isBitmapContainer())
assertFalse(cp.isRunContainer())
assertFalse(cp.isBitmapContainer())
assertFalse(i.hasNext())
assertFalse(r1.contains(killingPosition))
assertFalse(r1.contains(killingPosition))
assertFalse(r1.contains(killingPosition))
assertFalse(rb2.contains(Integer.MAX_VALUE + 100002))
assertFalse(RoaringBitmap.intersects(rr1, rr2))
assertFalse(RoaringBitmap.intersects(rr3, rr1))
assertFalse(rr1.intersects(0, 1))
assertFalse(rr1.intersects(12, 14))
assertFalse(rr1.intersects(4, 5))
assertFalse(rr2.intersects(12, 14))
assertFalse(rr2.intersects(4, 5))
assertFalse(bitmap.intersects(0, bitmap.first() & 0xFFFFFFFFL))
assertFalse(bitmap.intersects(first - 1, first))
assertFalse(iterator.hasNext())
assertFalse(iterator.hasNext())
assertFalse(iterator.hasNext())
assertFalse(iterator.hasNext())
assertFalse(iterator.hasNext())
assertFalse(iterator.hasNext())
assertFalse(r1.contains(killingPosition))
assertFalse(r1.contains(killingPosition))
assertFalse(r1.contains(killingPosition))
assertFalse(small.isHammingSimilar(big, 1))
assertFalse(big.isHammingSimilar(small, 1))
assertFalse(baseline.isHammingSimilar(shifted, 0))
assertFalse(baseline.isHammingSimilar(other, 0))
assertFalse(baseline.isHammingSimilar(other, 1))
assertFalse(baseline.isHammingSimilar(other, 2))
assertFalse(bitmap.contains(1L, 1_000_001L))
assertFalse(bitmap.contains(1L, 999_999L))
assertFalse(bitmap.contains(1L, 999_999L))
assertFalse(bitmap.contains(2_000_001L, 10_000_000L))
assertFalse(bitmap.contains(2, 8))
assertFalse(bitmap.contains(0, 6))
assertFalse(bitmap.contains(0, 1))
assertFalse(bitmap.contains(6, 10))
assertFalse(bitmap.contains(7, 1 << 16))
assertFalse(bitmap.contains(1 << 17, 1 << 19))
assertFalse(bitmap.contains(0L, 2_000_000L))
assertFalse(bitmap.contains(0L, 2L))
assertFalse(bitmap.contains(1L << 31, 1L << 32))
assertFalse(map.contains(30))
assertFalse(bitmap.cardinalityExceeds(Integer.MAX_VALUE))
assertFalse(bitmap.cardinalityExceeds(runLength + bitmapCount + arrayCount))
assertEquals(asList(bits.getCharIterator()), ImmutableList.of(0, 127))
assertEquals(asList(bits.getReverseCharIterator()), ImmutableList.of(127, 0))
assertFalse(RoaringBitmap.bitmapOf().iterator().hasNext())
assertFalse(RoaringBitmap.bitmapOf().getIntIterator().hasNext())
assertFalse(RoaringBitmap.bitmapOf().getReverseIntIterator().hasNext())
assertEquals(bitmap.getCardinality(), iteratorCopy.size())
assertEquals(bitmap.getCardinality(), intIteratorCopy.size())
assertEquals(bitmap.getCardinality(), reverseIntIteratorCopy.size())
assertEquals(Ints.asList(data), iteratorCopy)
assertEquals(Ints.asList(data), intIteratorCopy)
assertEquals(Lists.reverse(Ints.asList(data)), reverseIntIteratorCopy)
assertEquals(ImmutableList.of(1, 2, 3), iteratorCopy)
assertEquals(ImmutableList.of(1, 2, 3), intIteratorCopy)
assertEquals(ImmutableList.of(3, 2, 1), reverseIntIteratorCopy)
assertEquals(2000000, bitIt.peekNext())
assertEquals(2000000, bitIt.next())
assertTrue(bitset.contains(2100000))
assertEquals(2100000, bitIt.peekNext())
assertEquals(2100000, bitIt.next())
assertFalse(bitset.contains(2300000))
assertEquals(4000000, bitIt.peekNext())
assertTrue(bitset.contains(4000000))
assertEquals(4000000, bitIt.peekNext())
assertEquals(4000000, bitIt.next())
assertEquals(2000000, bitIt.peekNext())
assertEquals(2000000, bitIt.next())
assertTrue(bitset.contains(2100000))
assertEquals(2100000, bitIt.peekNext())
assertEquals(2100000, bitIt.next())
assertFalse(bitset.contains(4325376 - 5))
assertEquals(6000000, bitIt.peekNext())
assertTrue(bitset.contains(6000000))
assertEquals(6000000, bitIt.peekNext())
assertEquals(6000000, bitIt.next())
assertEquals(2000000, bitIt.peekNext())
assertEquals(2000000, bitIt.next())
assertEquals(2100000, bitIt.peekNext())
assertEquals(2100000, bitIt.next())
assertFalse(bitset.contains(4325376 + 5))
assertEquals(6000000, bitIt.peekNext())
assertEquals(6000000, bitIt.peekNext())
assertEquals(6000000, bitIt.next())
assertTrue(one.contains(10))
assertEquals(bitmap, copy)
assertEquals(bitmap, result)
assertEquals(bitmap.getCardinality(), cardinality)
assertEquals(expected, result)
assertEquals(expected.getCardinality(), consumed)
assertEquals(expected, result)
assertEquals(expected.getCardinality(), consumed)
assertEquals(0, consumed)
assertTrue(result.isEmpty())
assertTrue(bi.hasNext())
assertEquals(n, 1)
assertEquals(batch[0], 8511)
assertTrue(bi.hasNext())
assertTrue(it.hasNext())
assertEquals(n, 3)
assertEquals(batch[0], 3 << 16)
assertEquals(batch[1], (3 << 16) + 5)
assertEquals(batch[2], (3 << 16) + 10)
assertEquals(1, b.rank(123))
assertEquals(2, b.rank(123))
assertEquals(1, b.rank(123))
assertEquals(1, b.rank(123))
assertEquals(123, b.select(0))
assertEquals(123, b.select(0))
assertEquals(Integer.MAX_VALUE, b.select(1))
assertEquals(0, b.rank(123 - 1))
assertEquals(1, b.rank(123))
assertEquals(1, b.rank(123 + 1))
assertEquals(1, b.rank(Integer.MAX_VALUE - 1))
assertEquals(2, b.rank(Integer.MAX_VALUE))
assertEquals(2, b.rank(Integer.MAX_VALUE + 1))
assertEquals(Integer.MAX_VALUE, b.select(0))
assertEquals(0, b.rank(Integer.MAX_VALUE - 1))
assertEquals(1, b.rank(Integer.MAX_VALUE))
assertEquals(1, b.rank(Integer.MAX_VALUE + 1))
assertEquals(123, b.select(0))
assertEquals(123, b.select(0))
assertEquals(Integer.MAX_VALUE, b.select(1))
assertEquals(0, b.rank(123 - 1))
assertEquals(1, b.rank(123))
assertEquals(1, b.rank(123 + 1))
assertEquals(1, b.rank(Integer.MAX_VALUE - 1))
assertEquals(2, b.rank(Integer.MAX_VALUE))
assertEquals(2, b.rank(Integer.MAX_VALUE + 1))
assertEquals(123, b.select(0))
assertEquals(0, b.rank(123 - 1))
assertEquals(1, b.rank(123))
assertEquals(1, b.rank(123 + 1))
assertEquals(1, b.rank(123))
assertEquals(123, b.select(0))
assertEquals(123, b.select(0))
assertEquals(-234, b.select(1))
assertEquals(0, b.rank(123 - 1))
assertEquals(1, b.rank(123))
assertEquals(1, b.rank(123 + 1))
assertEquals(1, b.rank(-234 - 1))
assertEquals(2, b.rank(-234))
assertEquals(2, b.rank(-234 + 1))
assertEquals(-234, b.select(0))
assertEquals(0, b.rank(-234 - 1))
assertEquals(1, b.rank(-234))
assertEquals(1, b.rank(-234 + 1))
assertEquals(123, b.select(0))
assertEquals(123, b.select(0))
assertEquals(-234, b.select(1))
assertEquals(0, b.rank(123 - 1))
assertEquals(1, b.rank(123))
assertEquals(1, b.rank(123 + 1))
assertEquals(1, b.rank(-234 - 1))
assertEquals(2, b.rank(-234))
assertEquals(2, b.rank(-234 + 1))
assertEquals(123, b.select(0))
assertEquals(0, b.rank(123 - 1))
assertEquals(1, b.rank(123))
assertEquals(1, b.rank(123 + 1))
assertEquals(0, b.getLongCardinality())
assertEquals(nbReallyAdded, b.getLongCardinality())
assertTrue(fast.isCacheDismissed())
assertTrue(fast.isCacheDismissed())
assertTrue(fast.isCacheDismissed())
assertTrue(fast.isCacheDismissed())
assertTrue(fast.isCacheDismissed())
assertTrue(fast.isCacheDismissed())
assertTrue(fast.isCacheDismissed())
assertTrue(fast.isCacheDismissed())
assertTrue(fast.isCacheDismissed())
assertTrue(fast.isCacheDismissed())
assertTrue(fast.isCacheDismissed())
assertTrue(fast.isCacheDismissed())
assertTrue(fast.isCacheDismissed())
assertTrue(fast.isCacheDismissed())
assertTrue(fast.isCacheDismissed())
assertTrue(fast.isCacheDismissed())
assertTrue(fast.isCacheDismissed())
assertEquals(16, fast.getLongSizeInBytes())
assertEquals(34, fast.getLongSizeInBytes())
assertEquals(42, fast.getLongSizeInBytes())
assertEquals(0, rankRoaringBitmap.rank(3))
assertEquals(3, rankRoaringBitmap.select(0))
assertEquals(5, rankRoaringBitmap.select(1))
assertEquals(5, roaringBitmap.select(roaringBitmap.getCardinality() - 1))
assertEquals(5, rankRoaringBitmap.select(rankRoaringBitmap.getCardinality() - 1))
assertEquals(expected, xor)
assertEquals(expected, ImmutableRoaringBitmap.or(a, b))
assertEquals(expected, ImmutableRoaringBitmap.or(b, a))
assertEquals(expected, andNot)
assertEquals((4 << 16) - 1, rb.getCardinality())
assertEquals((4 << 16) - 1, rb.getCardinality())
assertEquals((5 << 16) - 2, rb.getCardinality())
assertEquals((2 << 16) + (2 << 14), rb.getCardinality())
assertEquals((5 << 16), rb.getCardinality())
assertEquals((1 << 14) + 4, rb.getCardinality())
assertTrue(iterator.hasNext())
assertEquals((1 << 16) - 1, iterator.next())
assertTrue(iterator.hasNext())
assertEquals(1 << 16, iterator.next())
assertTrue(iterator.hasNext())
assertEquals(2 << 16, iterator.next())
assertTrue(iterator.hasNext())
assertEquals(3 << 16, iterator.next())
assertEquals((1 << 14) + 3, rb.getCardinality())
assertTrue(iterator.hasNext())
assertEquals(1 << 16, iterator.next())
assertTrue(iterator.hasNext())
assertEquals(2 << 16, iterator.next())
assertTrue(iterator.hasNext())
assertEquals(3 << 16, iterator.next())
assertEquals(5, rb.last())
assertEquals((int) (65535L * 65536L + 65523), rb3.last())
assertTrue(rb.isEmpty())
assertEquals(RoaringBitmap.bitmapOf(1, 0x10001, 0x20001), rb)
assertTrue(result.isEmpty())
assertEquals(RoaringBitmap.bitmapOf(1, 0x10001, 0x20001), RoaringBitmap.orNot(rb, full, 0x30000L))
assertEquals(expected, actual)
assertEquals(expected, actual)
Assertions.assertEquals(0, minPos)
Assertions.assertEquals(255, maxPos)
Assertions.assertEquals((byte) 119, node256.getChildKey(pos119))
Assertions.assertEquals(119, pos119)
Assertions.assertEquals(121, pos121)
Assertions.assertEquals(119, nextPos119)
Assertions.assertEquals(minLeafNode256, minLeafNode48)
Assertions.assertEquals(offset, nodes.getMinPos())
Assertions.assertEquals(Node.ILLEGAL_IDX, nodes.getNextSmallerPos(nodes.getMinPos()))
Assertions.assertEquals(Node.ILLEGAL_IDX, nodes.getNextLargerPos(nodes.getMaxPos()))
Assertions.assertEquals(offset, nodes.getMinPos())
Assertions.assertEquals(Node.ILLEGAL_IDX, nodes.getNextSmallerPos(nodes.getMinPos()))
Assertions.assertEquals(Node.ILLEGAL_IDX, nodes.getNextLargerPos(nodes.getMaxPos()))
Assertions.assertEquals(SearchResult.Outcome.NOT_FOUND, sr.outcome)
Assertions.assertEquals(Node.ILLEGAL_IDX, sr.getNextSmallerPos())
Assertions.assertEquals(SearchResult.Outcome.NOT_FOUND, sr.outcome)
Assertions.assertEquals(Node.ILLEGAL_IDX, sr.getNextLargerPos())
Assertions.assertEquals(SearchResult.Outcome.NOT_FOUND, sr.outcome)
Assertions.assertEquals(Node.ILLEGAL_IDX, sr.getNextSmallerPos())
Assertions.assertEquals(SearchResult.Outcome.NOT_FOUND, sr.outcome)
Assertions.assertEquals(Node.ILLEGAL_IDX, sr.getNextLargerPos())
Assertions.assertEquals(12, node16.getChildPos(key))
Assertions.assertEquals(key, node16.getChildKey(12))
Assertions.assertEquals(12, node16.getChildPos(key12))
Assertions.assertEquals(key12, node16.getChildKey(12))
Assertions.assertEquals(13, node16.getChildPos(key))
Assertions.assertEquals(key, node16.getChildKey(13))
Assertions.assertEquals(16, maxPos)
Assertions.assertEquals(maxPos, pos)
Assertions.assertEquals(0, node16.getMinPos())
Assertions.assertEquals(lastValue, node16.getMaxPos())
Assertions.assertEquals(Node.ILLEGAL_IDX, node16.getNextSmallerPos(0))
Assertions.assertEquals(SearchResult.Outcome.NOT_FOUND, sr.outcome)
Assertions.assertEquals(Node.ILLEGAL_IDX, sr.getNextSmallerPos())
Assertions.assertEquals(SearchResult.Outcome.NOT_FOUND, sr.outcome)
Assertions.assertEquals(Node.ILLEGAL_IDX, sr.getNextLargerPos())
Assertions.assertEquals(SearchResult.Outcome.NOT_FOUND, sr.outcome)
Assertions.assertEquals(Node.ILLEGAL_IDX, sr.getNextSmallerPos())
Assertions.assertEquals(SearchResult.Outcome.NOT_FOUND, sr.outcome)
Assertions.assertEquals(Node.ILLEGAL_IDX, sr.getNextLargerPos())
Assertions.assertEquals(Node.ILLEGAL_IDX, nodes.getNextSmallerPos(nodes.getMinPos()))
Assertions.assertEquals(Node.ILLEGAL_IDX, nodes.getNextLargerPos(nodes.getMaxPos()))
Assertions.assertEquals(Node.ILLEGAL_IDX, nodes.getNextSmallerPos(nodes.getMinPos()))
Assertions.assertEquals(Node.ILLEGAL_IDX, nodes.getNextLargerPos(nodes.getMaxPos()))
Assertions.assertEquals(0, minPos)
Assertions.assertEquals(0, ((LeafNode) node48.getChild(minPos)).getContainerIdx())
Assertions.assertEquals(47, maxPos)
Assertions.assertEquals(sizeInBytes, byteArrayOutputStream.toByteArray().length)
Assertions.assertEquals(1, newMinPos)
Assertions.assertEquals(offset, nodes.getMinPos())
Assertions.assertEquals(Node.ILLEGAL_IDX, nodes.getNextSmallerPos(nodes.getMinPos()))
Assertions.assertEquals(Node.ILLEGAL_IDX, nodes.getNextLargerPos(nodes.getMaxPos()))
Assertions.assertEquals(offset, nodes.getMinPos())
Assertions.assertEquals(Node.ILLEGAL_IDX, nodes.getNextSmallerPos(nodes.getMinPos()))
Assertions.assertEquals(Node.ILLEGAL_IDX, nodes.getNextLargerPos(nodes.getMaxPos()))
Assertions.assertEquals(48, pos48)
Assertions.assertEquals(48, node256.getMaxPos())
Assertions.assertEquals(47, node256.getNextSmallerPos(48))
Assertions.assertEquals(12, maxPos)
Assertions.assertEquals(0, pos)
Assertions.assertEquals(Node.ILLEGAL_IDX, pos)
Assertions.assertEquals(11, pos)
Assertions.assertEquals(128, minPos)
Assertions.assertEquals(0, ((LeafNode) node48.getChild(minPos)).getContainerIdx())
Assertions.assertEquals(175, maxPos)
Assertions.assertEquals(129, newMinPos)
Assertions.assertEquals(SearchResult.Outcome.NOT_FOUND, sr.outcome)
Assertions.assertEquals(Node.ILLEGAL_IDX, sr.getNextSmallerPos())
Assertions.assertEquals(SearchResult.Outcome.NOT_FOUND, sr.outcome)
Assertions.assertEquals(Node.ILLEGAL_IDX, sr.getNextLargerPos())
Assertions.assertEquals(SearchResult.Outcome.NOT_FOUND, sr.outcome)
Assertions.assertEquals(Node.ILLEGAL_IDX, sr.getNextSmallerPos())
Assertions.assertEquals(SearchResult.Outcome.NOT_FOUND, sr.outcome)
Assertions.assertEquals(Node.ILLEGAL_IDX, sr.getNextLargerPos())
Assertions.assertEquals(Node.ILLEGAL_IDX, nodes.getNextSmallerPos(66))
Assertions.assertEquals(67, nodes.getChildKey(nodes.getNextSmallerPos(74)))
Assertions.assertEquals(Node.ILLEGAL_IDX, nodes.getNextLargerPos(68))
Assertions.assertEquals(67, nodes.getChildKey(nodes.getNextLargerPos(60)))
Assertions.assertEquals(0x6700_0000_0000_0000L, longs[0])
Assertions.assertEquals(0x6723_0000_0000_0000L, longs[0])
Assertions.assertEquals(0x6723_1400_0000_0000L, longs[0])
Assertions.assertEquals(0x6723_1498_0000_0000L, longs[0])
Assertions.assertEquals(0x0067_0000_0000_0000L, longs[31])
Assertions.assertEquals(0x0067_2300_0000_0000L, longs[31])
Assertions.assertEquals(0x0067_2314_0000_0000L, longs[31])
Assertions.assertEquals(0x0067_2314_9800_0000L, longs[31])
Assertions.assertEquals(bytesSize, byteArrayOutputStream.toByteArray().length)
Assertions.assertEquals(0, deserializedNode4.getChildPos(key2))
Assertions.assertEquals(1, deserializedNode4.getChildPos(key3))
Assertions.assertEquals(Node.ILLEGAL_IDX, deserializedNode4.getChildPos(key1))
Assertions.assertEquals(SearchResult.Outcome.FOUND, sr.outcome)
Assertions.assertEquals(key1Pos, sr.getKeyPos())
Assertions.assertEquals(key1, node.getChildKey(sr.getKeyPos()))
Assertions.assertEquals(SearchResult.Outcome.NOT_FOUND, sr.outcome)
Assertions.assertEquals(key1Pos, sr.getNextSmallerPos())
Assertions.assertEquals(Node.ILLEGAL_IDX, sr.getNextLargerPos())
Assertions.assertEquals(SearchResult.Outcome.NOT_FOUND, sr.outcome)
Assertions.assertEquals(Node.ILLEGAL_IDX, sr.getNextSmallerPos())
Assertions.assertEquals(key1Pos, sr.getNextLargerPos())
Assertions.assertEquals(SearchResult.Outcome.FOUND, sr.outcome)
Assertions.assertEquals(key1Pos, sr.getKeyPos())
Assertions.assertEquals(SearchResult.Outcome.FOUND, sr.outcome)
Assertions.assertEquals(key2Pos, sr.getKeyPos())
Assertions.assertEquals(SearchResult.Outcome.NOT_FOUND, sr.outcome)
Assertions.assertEquals(key1Pos, sr.getNextSmallerPos())
Assertions.assertEquals(key2Pos, sr.getNextLargerPos())
Assertions.assertEquals(SearchResult.Outcome.NOT_FOUND, sr.outcome)
Assertions.assertEquals(Node.ILLEGAL_IDX, sr.getNextSmallerPos())
Assertions.assertEquals(key1Pos, sr.getNextLargerPos())
Assertions.assertEquals(SearchResult.Outcome.NOT_FOUND, sr.outcome)
Assertions.assertEquals(key1Pos, sr.getNextSmallerPos())
Assertions.assertEquals(key2Pos, sr.getNextLargerPos())
Assertions.assertEquals(SearchResult.Outcome.NOT_FOUND, sr.outcome)
Assertions.assertEquals(key2Pos, sr.getNextSmallerPos())
Assertions.assertEquals(Node.ILLEGAL_IDX, sr.getNextLargerPos())
Assertions.assertEquals(SearchResult.Outcome.NOT_FOUND, sr.outcome)
Assertions.assertEquals(Node.ILLEGAL_IDX, sr.getNextSmallerPos())
Assertions.assertEquals(SearchResult.Outcome.NOT_FOUND, sr.outcome)
Assertions.assertEquals(Node.ILLEGAL_IDX, sr.getNextLargerPos())
Assertions.assertEquals(SearchResult.Outcome.NOT_FOUND, sr.outcome)
Assertions.assertEquals(Node.ILLEGAL_IDX, sr.getNextSmallerPos())
Assertions.assertEquals(SearchResult.Outcome.NOT_FOUND, sr.outcome)
Assertions.assertEquals(Node.ILLEGAL_IDX, sr.getNextLargerPos())
Assertions.assertEquals(Node.ILLEGAL_IDX, nodes.getNextSmallerPos(nodes.getMinPos()))
Assertions.assertEquals(Node.ILLEGAL_IDX, nodes.getNextLargerPos(nodes.getMaxPos()))
Assertions.assertEquals(Node.ILLEGAL_IDX, nodes.getNextSmallerPos(nodes.getMinPos()))
Assertions.assertEquals(Node.ILLEGAL_IDX, nodes.getNextLargerPos(nodes.getMaxPos()))
assertEquals(input, deserialised)
assertEquals(input, deserialised)
assertEquals(input, deserialised)
assertEquals(10 + serialisedSize, buffer.position())
assertEquals(0, buffer.remaining())
assertEquals(input, roundtrip)
assertEquals(0, buffer.remaining())
assertEquals(input, roundtrip)
assertEquals(rb.getCardinality(), 200100)
assertEquals(rb.getCardinality(), 200100)
assertEquals(superSet.containsAll(subSet), superSetRB.contains(subSetRB))
assertEquals(subSet.containsAll(superSet), subSetRB.contains(superSetRB))
assertEquals(3, it2.nextBatch(buffer))
assertArrayEquals(c1, Arrays.copyOfRange(buffer, 0, 3))
assertEquals(2, it2.nextBatch(buffer))
assertArrayEquals(c2, Arrays.copyOfRange(buffer, 0, 2))
assertEquals(0, it2.nextBatch(buffer))
assertEquals(3, it1.nextBatch(buffer))
assertArrayEquals(c1, Arrays.copyOfRange(buffer, 0, 3))
assertEquals(2, it1.nextBatch(buffer))
assertArrayEquals(c2, Arrays.copyOfRange(buffer, 0, 2))
assertEquals(0, it1.nextBatch(buffer))
Assertions.assertTrue(node instanceof Node48)
Assertions.assertTrue(nodes instanceof Node256)
Assertions.assertTrue(nodes instanceof Node256)
Assertions.assertTrue(nodes instanceof Node256)
Assertions.assertTrue(nodes instanceof Node256)
Assertions.assertTrue(degenerativeNode instanceof Node4)
Assertions.assertTrue(node16.getChildPos(key) == 4)
Assertions.assertTrue(node16.getChildKey(4) == key)
Assertions.assertTrue(node instanceof Node48)
Assertions.assertTrue(nodes instanceof Node16)
Assertions.assertTrue(nodes instanceof Node16)
Assertions.assertTrue(nodes instanceof Node16)
Assertions.assertTrue(nodes instanceof Node16)
Assertions.assertTrue(nodes instanceof Node48)
Assertions.assertTrue(nodes instanceof Node48)
Assertions.assertTrue(node instanceof Node256)
Assertions.assertTrue(node instanceof Node16)
Assertions.assertTrue(nodes instanceof Node48)
Assertions.assertTrue(nodes instanceof Node48)
Assertions.assertTrue(nodes instanceof Node48)
Assertions.assertTrue(node4.getMaxPos() == 0)
Assertions.assertTrue(node4.getMinPos() == 0)
Assertions.assertTrue(node4.getChildPos(key1) == 0)
Assertions.assertTrue(node4.getChildKey(0) == key1)
Assertions.assertTrue(node4.getChildPos(key2) == 0)
Assertions.assertTrue(node4.getChildPos(key1) == 1)
Assertions.assertTrue(node4.getChildKey(0) == key2)
Assertions.assertTrue(node4.getChildPos(key3) == 2)
Assertions.assertTrue(node4.getChildKey(2) == key3)
Assertions.assertTrue(node4.getChildPos(key2) == 0)
Assertions.assertTrue(node4.getChildPos(key3) == 1)
Assertions.assertTrue(node4.getChildKey(1) == key3)
Assertions.assertTrue(node4.getChildPos(key1) == Node.ILLEGAL_IDX)
Assertions.assertTrue(node instanceof LeafNode)
Assertions.assertTrue(sr.hasKeyPos())
Assertions.assertTrue((key1 + 1) < (key2 - 1))
Assertions.assertTrue(node instanceof Node4)
Assertions.assertTrue(nodes instanceof Node4)
Assertions.assertTrue(nodes instanceof Node4)
Assertions.assertTrue(nodes instanceof Node4)
Assertions.assertTrue(nodes instanceof Node4)
assertTrue(string.contains(BitmapStatistics.class.getSimpleName()))
assertTrue(Double.isNaN(bitmapFraction))
assertEquals(Long.MAX_VALUE, averageArraysCardinality)
assertFalse(bi.hasNext())
assertFalse(bi.hasNext())
assertFalse(fast.isCacheDismissed())
assertFalse(iterator.hasNext())
assertFalse(iterator.hasNext())
assertFalse(iterator.hasNext())
assertFalse(iterator.hasNext())
assertFalse(iterator.hasNext())
assertFalse(iterator.hasNext())
assertFalse(iterator.hasNext())
Assertions.assertFalse(sr.hasKeyPos())
Assertions.assertFalse(sr.hasKeyPos())
Assertions.assertFalse(sr.hasKeyPos())
Assertions.assertFalse(sr.hasKeyPos())
Assertions.assertFalse(sr.hasKeyPos())
Assertions.assertFalse(sr.hasKeyPos())
Assertions.assertFalse(sr.hasKeyPos())
Assertions.assertFalse(sr.hasKeyPos())
Assertions.assertFalse(sr.hasKeyPos())
Assertions.assertFalse(sr.hasKeyPos())
Assertions.assertFalse(sr.hasKeyPos())
Assertions.assertFalse(sr.hasKeyPos())
Assertions.assertFalse(sr.hasKeyPos())
Assertions.assertFalse(sr.hasKeyPos())
Assertions.assertFalse(sr.hasKeyPos())
Assertions.assertFalse(sr.hasKeyPos())
Assertions.assertFalse(sr.hasKeyPos())
Assertions.assertFalse(sr.hasKeyPos())
Assertions.assertFalse(sr.hasKeyPos())
Assertions.assertFalse(sr.hasKeyPos())
Assertions.assertFalse(sr.hasKeyPos())
Assertions.assertFalse(sr.hasKeyPos())
assertTrue(recommendation.contains(".initialCapacity(2005)"))
assertTrue(recommendation.contains(".optimiseForArrays()"))
assertTrue(recommendation.contains(".expectedContainerSize(10)"))
assertTrue(recommendation.contains(".constantMemory()"))
assertTrue(recommendation.contains(".initialCapacity(718)"))
assertTrue(recommendation.contains(".optimiseForRuns()"))
assertTrue(recommendation.contains(".initialCapacity(250)"))
assertTrue(recommendation.contains(".constantMemory()"))
assertTrue(recommendation.contains(".initialCapacity(526)"))
assertTrue(recommendation.contains(".constantMemory()"))
assertFalse(recommendation.contains(".initialCapacity"))
assertEquals(expected, result)
assertEquals(totalBitmaps, result.getBitmapsCount())
Assertions.assertNotEquals(Node.ILLEGAL_IDX, nodes.getNextSmallerPos(74))
Assertions.assertNotEquals(Node.ILLEGAL_IDX, nodes.getNextLargerPos(60))
assertEquals(new BitmapContainer().getContainerName(), Container.ContainerNames[0])
assertEquals(new ArrayContainer().getContainerName(), Container.ContainerNames[1])
assertEquals(new RunContainer().getContainerName(), Container.ContainerNames[2])
assertTrue(checkContent(c, s))
assertTrue(c1 instanceof ArrayContainer)
assertEquals(14, c1.getCardinality())
assertTrue(checkContent(c1, new char[] { 0, 2, 4, (char) 65190, (char) 65191, (char) 65192, (char) 65193, (char) 65194, (char) 65195, (char) 65196, (char) 65197, (char) 65198, (char) 65199, (char) 65200 }))
assertTrue(checkContent(c, content))
assertTrue(c.contains((char) 3) && !c.contains((char) 4))
assertEquals(32768, c.getCardinality())
assertTrue(c instanceof ArrayContainer)
assertEquals(999 - 4 + 1 - 3 + 2, c.getCardinality())
assertTrue(checkContent(c, content))
assertTrue(c instanceof BitmapContainer)
assertEquals(31773, c.getCardinality())
assertTrue(c instanceof BitmapContainer)
assertTrue(checkContent(c, content))
assertTrue(c instanceof BitmapContainer)
assertEquals(32762, c.getCardinality())
assertTrue(c instanceof BitmapContainer)
assertTrue(checkContent(c, content))
assertEquals(1773, c.getCardinality())
assertTrue(checkContent(c, content))
assertTrue(c instanceof ArrayContainer)
assertEquals(10, c.getCardinality())
assertTrue(c instanceof ArrayContainer)
assertTrue(checkContent(c, content))
assertTrue(checkContent(c1, s))
assertTrue(checkContent(c, content))
assertTrue(c1 instanceof ArrayContainer)
assertEquals(40 + 58, c1.getCardinality())
assertTrue(checkContent(c1, rightAns))
assertTrue(c1 instanceof ArrayContainer)
assertEquals(40 + 58, c1.getCardinality())
assertTrue(checkContent(c1, rightAns))
assertTrue(checkContent(c2, content))
assertTrue(c1.contains((char) 3) && !c1.contains((char) 4))
assertEquals(32768, c1.getCardinality())
assertTrue(c1 instanceof ArrayContainer)
assertEquals(999 - 4 + 1 - 3 + 2, c1.getCardinality())
assertTrue(checkContent(c2, content))
assertTrue(c1 instanceof BitmapContainer)
assertEquals(31773, c1.getCardinality())
assertTrue(c2 instanceof BitmapContainer)
assertTrue(checkContent(c2, content))
assertTrue(c1 instanceof BitmapContainer)
assertEquals(32762, c1.getCardinality())
assertTrue(c2 instanceof BitmapContainer)
assertTrue(checkContent(c2, content))
assertEquals(1773, c1.getCardinality())
assertTrue(checkContent(c2, content))
assertTrue(c1 instanceof BitmapContainer)
assertEquals(32773, c1.getCardinality())
assertTrue(c2 instanceof BitmapContainer)
assertTrue(checkContent(c2, content))
assertTrue(c1 instanceof BitmapContainer)
assertEquals(32438, c1.getCardinality())
assertTrue(c2 instanceof BitmapContainer)
assertTrue(checkContent(c2, content))
assertEquals(rc.numberOfRuns(), ac.numberOfRuns())
assertEquals(rc.numberOfRuns(), bc.numberOfRuns())
assertTrue(checkContent(result, new char[] { 1, 3, 5, (char) 50000, (char) 50001 }))
assertTrue(checkContent(result, new char[] { 1, 4, 5, (char) 50000, (char) 50002, (char) 50003, (char) 50004 }))
assertTrue(checkContent(result, new char[] { 1, 3, 4, 5, (char) 50000, (char) 50001, (char) 50002, (char) 50003, (char) 50004 }))
assertTrue(checkContent(result, new char[] { 1, 3, 4, 5, (char) 50000, (char) 50001, (char) 50002, (char) 50003, (char) 50004, (char) 50011 }))
assertTrue(checkContent(result, new char[] { 1, 3, 4, 5, (char) 50000, (char) 50001 }))
assertEquals(10 - 4 + 1, c.getCardinality())
assertTrue(checkContent(c, new char[] { 4, 5, 6, 7, 8, 9, 10 }))
assertEquals(35000 - 1000 + 1, c.getCardinality())
assertTrue(checkContent(c, s))
assertTrue(c instanceof RunContainer)
assertEquals(ac, c)
assertTrue(c instanceof ArrayContainer)
assertSame(ac, c)
assertTrue(c instanceof RunContainer)
assertEquals(bc, c)
assertTrue(c instanceof BitmapContainer)
assertSame(c, bc)
assertTrue(c instanceof RunContainer)
assertSame(c, rc)
assertTrue(c instanceof ArrayContainer)
assertEquals(c, rc)
assertTrue(c instanceof BitmapContainer)
assertEquals(c, rc)
assertEquals(c.getCardinality(), 4096)
assertTrue(c instanceof ArrayContainer)
assertEquals(c.getCardinality(), 4096)
assertTrue(c instanceof ArrayContainer)
assertEquals(c.getCardinality(), 4097)
assertTrue(c instanceof BitmapContainer)
assertEquals(c.getCardinality(), 4096)
assertTrue(c instanceof ArrayContainer)
assertTrue(checkContent(result, new char[] { 1, 3, 5, (char) 50000, (char) 50001 }))
assertTrue(checkContent(result, new char[] { 1, 4, 5, (char) 50000, (char) 50002, (char) 50003, (char) 50004 }))
assertTrue(checkContent(result, new char[] { 3, 4, (char) 50001, (char) 50002, (char) 50003, (char) 50004 }))
assertEquals(expected, ac.toString())
assertEquals(expected, bc.toString())
assertEquals(expected, normalizedRCstr)
assertTrue(checkContent(result, new char[] { 3, 4, (char) 50001, (char) 50002, (char) 50003, (char) 50004, (char) 50011 }))
assertTrue(checkContent(result, new char[] { 3, 4 }))
assertEquals(container.getCardinality(), data.length)
assertEquals(expected.length, consumer.getNumberOfValuesConsumed())
assertEquals(value, expected++)
assertEquals(cardinality.value, bitmap.getCardinality())
assertEquals(value, expected)
assertEquals(cardinality.value, bitmap.getCardinality())
assertEquals(value, expected)
assertEquals(cardinality.value, bitmap.getCardinality())
assertEquals(expectedValues.length, cardinality)
assertEquals(expectedValues.length, cardinality)
assertEquals(baselineHLC.size, rbHLC.size)
assertEquals(baseline, rb)
assertFalse(iter.hasNext())
assertFalse(reverseIter.hasNext())
assertEquals(bitmap.getCardinality(), intIteratorCopy.size())
assertEquals(bitmap.getCardinality(), reverseIntIteratorCopy.size())
assertEquals(Ints.asList(data), intIteratorCopy)
assertEquals(Lists.reverse(Ints.asList(data)), reverseIntIteratorCopy)
assertEquals(iter.peekNext(), data[0])
assertEquals(iter.peekNext(), data[0])
assertEquals(bitmap.getCardinality(), intIteratorCopy.size())
assertEquals(bitmap.getCardinality(), reverseIntIteratorCopy.size())
assertEquals(Ints.asList(data), intIteratorCopy)
assertEquals(Lists.reverse(Ints.asList(data)), reverseIntIteratorCopy)
assertEquals(bitmap.getCardinality(), intIteratorCopy.size())
assertEquals(bitmap.getCardinality(), reverseIntIteratorCopy.size())
assertEquals(Ints.asList(data), intIteratorCopy)
assertEquals(Lists.reverse(Ints.asList(data)), reverseIntIteratorCopy)
assertEquals(bitmap.getCardinality(), intIteratorCopy.size())
assertEquals(bitmap.getCardinality(), reverseIntIteratorCopy.size())
assertEquals(Ints.asList(data), intIteratorCopy)
assertEquals(Lists.reverse(Ints.asList(data)), reverseIntIteratorCopy)
assertEquals(ImmutableList.of(1, 2, 3), intIteratorCopy)
assertEquals(ImmutableList.of(3, 2, 1), reverseIntIteratorCopy)
assertEquals(iterList.toString(), iterCloneList.toString())
assertEquals(denseRoaringFromFile, roaringDense)
assertEquals(sparseRoaringFromFile, roaringSparse)
assertEquals(RoaringBitmap.intersects(bitmap, test), bitmap.intersects(minimum, supremum))
assertEquals(!test.isEmpty() && bitmap.contains(test), bitmap.contains(minimum, supremum))
assertTrue(test.isEmpty() || test.contains(minimum, supremum))
assertTrue(!contains || intersects)
assertEquals(m2.getCardinality(), count)
assertEquals(mrb.getCardinality(), count)
assertTrue(m2.serializedSizeInBytes() < mrb.serializedSizeInBytes())
assertEquals(m2, mrb)
assertEquals(r1, b1)
assertEquals(r2, b2)
assertEquals(r3, b3)
assertEquals(r4, b4)
assertEquals(r5, b5)
assertEquals(r6, b6)
assertEquals(r7, b7)
assertEquals(12, container.getSizeInBytes())
assertEquals(4, container.getCardinality())
assertTrue(container.contains((char) 0))
assertTrue(container.contains((char) 1))
assertTrue(container.contains((char) 2))
assertTrue(container.contains((char) 55))
assertNotSame(container, newContainer)
assertEquals(20, newContainer.getCardinality())
assertEquals(8, newContainer.getSizeInBytes())
assertNotSame(container, newContainer)
assertEquals(20, newContainer.getCardinality())
assertEquals(8, newContainer.getSizeInBytes())
assertNotSame(container, newContainer)
assertEquals(90, newContainer.getCardinality())
assertNotSame(container, newContainer)
assertEquals(92, newContainer.getCardinality())
assertTrue(newContainer.contains((char) 1))
assertTrue(newContainer.contains((char) 256))
assertNotSame(container, newContainer)
assertEquals(119, newContainer.getCardinality())
assertNotSame(container, newContainer)
assertEquals(90, newContainer.getCardinality())
assertNotSame(container, newContainer)
assertEquals(92, newContainer.getCardinality())
assertEquals(rc, result)
assertEquals(1, result.getCardinality())
assertTrue(result.contains((char) 1))
assertEquals(0, result.getCardinality())
assertEquals(100, intersectionNOT.getCardinality())
assertEquals(200, bc.getCardinality())
assertEquals(200, rc.getCardinality())
assertEquals(100, intersectionNOT.getCardinality())
assertEquals(200, ac.getCardinality())
assertEquals(200, rc.getCardinality())
assertEquals(1, rc.getCardinality())
assertEquals(0, rc.getCardinality())
assertEquals(ac, ar)
assertEquals(ac, ar)
assertEquals(0, array[0])
assertEquals(1, array[1])
assertEquals(3, array[2])
assertEquals(12, array[3])
assertTrue(rc.contains((char) 1))
assertEquals(40, rc.getCardinality())
assertEquals(12, rc.getSizeInBytes())
assertEquals(30, rc.getCardinality())
assertEquals(12, rc.getSizeInBytes())
assertEquals(30, rc.getCardinality())
assertEquals(8, rc.getSizeInBytes())
assertEquals(35, rc.getCardinality())
assertEquals(8, rc.getSizeInBytes())
assertEquals(40, rc.getCardinality())
assertEquals(12, rc.getSizeInBytes())
assertEquals(40, rc.getCardinality())
assertEquals(12, rc.getSizeInBytes())
assertEquals(40, rc.getCardinality())
assertEquals(12, rc.getSizeInBytes())
assertEquals(35, rc.getCardinality())
assertEquals(16, rc.getSizeInBytes())
assertEquals(40, rc.getCardinality())
assertEquals(12, rc.getSizeInBytes())
assertEquals(35, rc.getCardinality())
assertEquals(16, rc.getSizeInBytes())
assertEquals(45, rc.getCardinality())
assertEquals(12, rc.getSizeInBytes())
assertEquals(20, container.getCardinality())
assertEquals(8, container.getSizeInBytes())
assertEquals(119, container.getCardinality())
assertEquals(90, container.getCardinality())
assertSame(container, result)
assertEquals(5, container.getCardinality())
assertEquals(5, result.getCardinality())
assertEquals(7, result.getCardinality())
assertEquals(9, result.getCardinality())
assertEquals(2, result.getCardinality())
assertEquals(10, result.getCardinality())
assertTrue(container instanceof RunContainer)
assertSame(container, result)
assertEquals(5, result.getCardinality())
assertEquals(4, result.getCardinality())
assertEquals(8, result.getCardinality())
assertEquals(8, result.getCardinality())
assertEquals(2, result.getCardinality())
assertEquals(4, result.getCardinality())
assertEquals(5, result.getCardinality())
assertEquals(4, result.getCardinality())
assertEquals(ac, ac.and(rc))
assertEquals(ac, rc.and(ac))
assertEquals(ac, ac.and(rc))
assertEquals(ac, rc.and(ac))
assertEquals(0, rc.and(ac).getCardinality())
assertEquals(100, intersection.getCardinality())
assertEquals(200, bc.getCardinality())
assertEquals(200, rc.getCardinality())
assertEquals(256, rc1.getCardinality())
assertEquals(512, rc.getCardinality())
assertEquals(130, rc1.getCardinality())
assertTrue(iterator.hasNext())
assertEquals(256, iterator.next())
assertTrue(iterator.hasNext())
assertEquals(257, iterator.next())
assertEquals(130, rc1.getCardinality())
assertTrue(iterator.hasNext())
assertEquals(256, iterator.next())
assertTrue(iterator.hasNext())
assertEquals(260, iterator.next())
assertEquals(130, rc1.getCardinality())
assertTrue(iterator.hasNext())
assertEquals(256, iterator.next())
assertTrue(iterator.hasNext())
assertEquals(257, iterator.next())
assertEquals(130, rc1.getCardinality())
assertTrue(iterator.hasNext())
assertEquals(256, iterator.next())
assertTrue(iterator.hasNext())
assertEquals(257, iterator.next())
assertEquals(130, rc1.getCardinality())
assertTrue(iterator.hasNext())
assertEquals(256, iterator.next())
assertTrue(iterator.hasNext())
assertEquals(260, iterator.next())
assertEquals(0, rc.getCardinality())
assertEquals(5, rc.getCardinality())
assertEquals(8, rc.getSizeInBytes())
assertEquals(0, rc.getCardinality())
assertEquals(0, rc.getCardinality())
assertEquals(10, rc.getCardinality())
assertEquals(12, rc.getSizeInBytes())
assertEquals(5, rc.getCardinality())
assertEquals(8, rc.getSizeInBytes())
assertEquals(10, rc.getCardinality())
assertEquals(12, rc.getSizeInBytes())
assertEquals(5, rc.getCardinality())
assertEquals(8, rc.getSizeInBytes())
assertEquals(0, rc.getCardinality())
assertEquals(100, rc.getCardinality())
assertEquals(1150, rc.getCardinality())
assertEquals(9, rc.getCardinality())
assertEquals(8, rc.getSizeInBytes())
assertEquals(1149, rc.getCardinality())
assertEquals(19, rc.getCardinality())
assertEquals(12, rc.getSizeInBytes())
assertEquals(5, rc.getCardinality())
assertEquals(8, rc.getSizeInBytes())
assertEquals(0, rc.getCardinality())
assertEquals(5, rc.getCardinality())
assertEquals(8, rc.getSizeInBytes())
assertEquals(0, rc.getCardinality())
assertEquals(14, rc.getCardinality())
assertEquals(12, rc.getSizeInBytes())
assertEquals(19, rc.getCardinality())
assertEquals(12, rc.getSizeInBytes())
assertEquals(0, container.getCardinality())
assertEquals(0, container.getCardinality())
assertNotSame(container, limit)
assertEquals(container, limit)
assertNotSame(container, limit)
assertEquals(3, limit.getCardinality())
assertTrue(limit.contains((char) 0))
assertTrue(limit.contains((char) 2))
assertTrue(limit.contains((char) 55))
assertNotSame(container, result)
assertEquals(container, result)
assertEquals(5, result.getCardinality())
assertEquals(7, result.getCardinality())
assertEquals(9, result.getCardinality())
assertEquals(2, result.getCardinality())
assertEquals(10, result.getCardinality())
assertTrue(container instanceof RunContainer)
assertTrue(result instanceof RunContainer)
assertEquals(5, result.getCardinality())
assertEquals(4, result.getCardinality())
assertEquals(8, result.getCardinality())
assertEquals(8, result.getCardinality())
assertEquals(2, result.getCardinality())
assertEquals(4, result.getCardinality())
assertEquals(5, result.getCardinality())
assertEquals(4, result.getCardinality())
assertEquals(1, container.rank((char) 0))
assertEquals(2, container.rank((char) 10))
assertEquals(4, container.rank((char) 128))
assertEquals(5, container.rank((char) 1024))
assertTrue(container instanceof RunContainer)
assertEquals(16, container.rank((char) 32))
assertEquals(0, newContainer.getCardinality())
assertTrue(atLeastOneArray)
assertTrue(atLeastOneArray)
assertEquals(new ArrayContainer(8, new char[] { 0, 2, 4, 15, 16, 48, 50, 80 }), ac.andNot(rc))
assertEquals(new ArrayContainer(), ac.andNot(rc))
assertEquals(new ArrayContainer(), ac.andNot(rc))
assertTrue(atLeastOneArray)
assertTrue(atLeastOneArray)
assertEquals(rc, rc2)
assertEquals(rc, rc2)
assertEquals(rc, rc2)
assertEquals(rc, rc2)
assertTrue(rc instanceof RunContainer)
assertEquals(1 << 16, result.getCardinality())
assertTrue(result instanceof RunContainer)
assertTrue(rc instanceof RunContainer)
assertEquals(1 << 16, result.getCardinality())
assertTrue(result instanceof RunContainer)
assertTrue(rc instanceof RunContainer)
assertEquals(1 << 16, result.getCardinality())
assertTrue(result instanceof RunContainer)
assertEquals(container, newContainer)
assertEquals(container.serializedSizeInBytes(), newContainer.serializedSizeInBytes())
assertEquals(0, container.select(0))
assertEquals(2, container.select(1))
assertEquals(55, container.select(2))
assertEquals(64, container.select(3))
assertEquals(256, container.select(4))
assertEquals(answer.getCardinality(), array1.length)
assertEquals(1, setWithOptimize.size())
assertEquals(1, setWithoutOptimize.size())
assertTrue(ac instanceof ArrayContainer)
assertEquals(DEFAULT_MAX_SIZE / 2, ac.getCardinality())
assertTrue(bc instanceof BitmapContainer)
assertEquals(2 * DEFAULT_MAX_SIZE, bc.getCardinality())
assertEquals(200, union.getCardinality())
assertEquals(100, bc.getCardinality())
assertEquals(100, rc.getCardinality())
assertEquals(200, union.getCardinality())
assertEquals(100, ac.getCardinality())
assertEquals(100, rc.getCardinality())
assertEquals(4 * DEFAULT_MAX_SIZE, result.getCardinality())
assertEquals(4 * DEFAULT_MAX_SIZE, bc.getCardinality())
assertEquals(4 * DEFAULT_MAX_SIZE, rc.getCardinality())
assertEquals(4 * DEFAULT_MAX_SIZE, result.getCardinality())
assertEquals(4 * DEFAULT_MAX_SIZE, bc.getCardinality())
assertEquals(4 * DEFAULT_MAX_SIZE, rc.getCardinality())
assertTrue(bc instanceof ArrayContainer)
assertTrue(rc instanceof RunContainer)
assertEquals(rcSize, rc.getCardinality())
assertEquals(bcSize, bc.getCardinality())
assertEquals(rcSize, result.getCardinality())
assertTrue(bc instanceof ArrayContainer)
assertTrue(rc instanceof RunContainer)
assertEquals(rcSize, rc.getCardinality())
assertEquals(bcSize, bc.getCardinality())
assertEquals(rcSize - bcSize, result.getCardinality())
assertTrue(bc instanceof ArrayContainer)
assertTrue(rc instanceof RunContainer)
assertEquals(rcSize, rc.getCardinality())
assertEquals(bcSize, bc.getCardinality())
assertEquals(rcSize - 3, result.getCardinality())
assertTrue(result.contains((char) 5))
assertTrue(result.contains((char) 0))
assertEquals(1, result.getCardinality())
assertTrue(result.contains((char) 1))
assertEquals(1, result.getCardinality())
assertTrue(result.contains((char) 1))
assertEquals(1, result.getCardinality())
assertTrue(result.contains((char) 1))
assertEquals(1, result.getCardinality())
assertTrue(result.contains((char) 1))
assertEquals(0, result.getCardinality())
assertEquals(0, result.getCardinality())
assertEquals(answer, result)
assertEquals(rc2, rc1.xor(rc2))
assertEquals(rc2, rc2.xor(rc1))
assertTrue(rc.intersects(ac))
assertTrue(ac.intersects(rc))
assertTrue(rc1.intersects(rc2))
assertTrue(rc.contains((char) 13))
assertTrue(rc.contains((char) 13))
assertEquals("[32200,34999][65535,65535]", rc.toString())
assertEquals(1, rc.getCardinality())
assertEquals(13, rc.getCardinality())
assertEquals(1 << 16, rc.getCardinality())
assertEquals(1, rc.getCardinality())
assertEquals(13, rc.getCardinality())
assertEquals(1 << 16, rc.getCardinality())
assertEquals(-1, rbc.getCardinality())
assertEquals(1 << 16, repaired.getCardinality())
assertTrue(repaired instanceof RunContainer)
assertEquals(1 << 16, rbc.getCardinality())
assertTrue(rbc instanceof RunContainer)
assertEquals(1 << 16, result.getCardinality())
assertEquals(1 << 16, iresult.getCardinality())
assertTrue(result instanceof RunContainer)
assertTrue(iresult instanceof RunContainer)
assertEquals(8677, result.getCardinality())
assertTrue(rc.getCardinality() > ArrayContainer.DEFAULT_MAX_SIZE)
assertEquals(11437, result.getCardinality())
assertEquals(5046, result.getCardinality())
assertEquals(6031, result.getCardinality())
assertEquals(roaringWithRun.first(), 32768)
assertTrue(rc.contains(subset))
assertTrue(rc.contains(subset))
assertTrue(rc.contains(subset))
assertTrue(rc.contains(subset))
assertTrue(rc.contains(subset))
assertTrue(rc.contains(subset))
assertTrue(rc.contains(subset))
assertTrue(rc.contains(subset))
assertTrue(rc.contains(subset))
assertTrue(rc.contains(subset))
assertTrue(rc.contains(subset))
assertTrue(rc.contains(subset))
assertEquals(rc, ac)
assertEquals(ac, rc)
assertNotEquals(rc, ac)
assertNotEquals(ac, rc)
assertNotEquals(rc, ac)
assertNotEquals(ac, rc)
assertNotEquals(rc, ac)
assertNotEquals(ac, rc)
assertNotEquals(rc, ac)
assertNotEquals(ac, rc)
assertNotEquals(full, new ArrayContainer().add(0, 10))
assertTrue(RunContainer.full().isFull())
assertTrue(c.isFull())
assertEquals(65536, c.getCardinality())
assertEquals(983, c.getCardinality())
assertEquals(a, b)
assertEquals(45679, c.getCardinality())
assertEquals(2, c.getCardinality())
assertTrue(container.intersects(0, 1))
assertTrue(container.intersects(0, 101))
assertTrue(container.intersects(0, 1 << 16))
assertTrue(container.intersects(0, lower16Bits(-40)))
assertTrue(container.intersects(11, 1 << 16))
assertTrue(container.intersects(0, 1))
assertTrue(container.intersects(0, 101))
assertTrue(container.intersects(0, lower16Bits(-1)))
assertTrue(container.intersects(11, lower16Bits(-1)))
assertTrue(container.intersects(0, lower16Bits(-40)))
assertTrue(container.intersects(11, 1 << 16))
assertTrue(RunContainer.full().contains(0, 1 << 16))
assertTrue(rc.contains(1, 100))
assertTrue(rc.contains(1, 99))
assertTrue(rc.contains(2, 100))
assertTrue(rc.contains(5000, 10000))
assertTrue(rc.contains(5000, 9999))
assertTrue(rc.contains(5001, 9999))
assertTrue(rc.contains(5001, 10000))
assertTrue(rc.contains(502, 600))
assertTrue(rc.contains(9999, 10000))
assertEquals(64, container.nextValue((char) 0))
assertEquals(64, container.nextValue((char) 64))
assertEquals(65, container.nextValue((char) 65))
assertEquals(128, container.nextValue((char) 128))
assertEquals(-1, container.nextValue((char) 129))
assertEquals(64, container.nextValue((char) 0))
assertEquals(64, container.nextValue((char) 64))
assertEquals(65, container.nextValue((char) 65))
assertEquals(128, container.nextValue((char) 128))
assertEquals(256, container.nextValue((char) 129))
assertEquals(-1, container.nextValue((char) 512))
assertEquals(64, container.nextValue((char) 0))
assertEquals(64, container.nextValue((char) 63))
assertEquals(64, container.nextValue((char) 64))
assertEquals(65, container.nextValue((char) 65))
assertEquals(128, container.nextValue((char) 128))
assertEquals(200, container.nextValue((char) 129))
assertEquals(200, container.nextValue((char) 199))
assertEquals(200, container.nextValue((char) 200))
assertEquals(250, container.nextValue((char) 250))
assertEquals(5000, container.nextValue((char) 2500))
assertEquals(5000, container.nextValue((char) 5000))
assertEquals(5200, container.nextValue((char) 5200))
assertEquals(-1, container.nextValue((char) 5201))
assertEquals(-1, container.previousValue((char) 0))
assertEquals(-1, container.previousValue((char) 63))
assertEquals(64, container.previousValue((char) 64))
assertEquals(65, container.previousValue((char) 65))
assertEquals(128, container.previousValue((char) 128))
assertEquals(128, container.previousValue((char) 129))
assertEquals(-1, container.previousValue((char) 0))
assertEquals(-1, container.previousValue((char) 63))
assertEquals(64, container.previousValue((char) 64))
assertEquals(65, container.previousValue((char) 65))
assertEquals(128, container.previousValue((char) 128))
assertEquals(128, container.previousValue((char) 129))
assertEquals(128, container.previousValue((char) 199))
assertEquals(200, container.previousValue((char) 200))
assertEquals(250, container.previousValue((char) 250))
assertEquals(500, container.previousValue((char) 2500))
assertEquals(5000, container.previousValue((char) 5000))
assertEquals(5200, container.previousValue((char) 5200))
assertEquals(-1, container.previousValue((char) ((1 << 15) | 4)))
assertEquals(((1 << 15) | 5), container.previousValue((char) ((1 << 15) | 5)))
assertEquals(((1 << 15) | 5), container.previousValue((char) ((1 << 15) | 6)))
assertEquals(((1 << 15) | 7), container.previousValue((char) ((1 << 15) | 7)))
assertEquals(((1 << 15) | 7), container.previousValue((char) ((1 << 15) | 8)))
assertEquals(((1 << 15) | 5), container.nextValue((char) ((1 << 15) | 4)))
assertEquals(((1 << 15) | 5), container.nextValue((char) ((1 << 15) | 5)))
assertEquals(((1 << 15) | 7), container.nextValue((char) ((1 << 15) | 6)))
assertEquals(((1 << 15) | 7), container.nextValue((char) ((1 << 15) | 7)))
assertEquals(-1, container.nextValue((char) ((1 << 15) | 8)))
assertEquals(0, container.previousAbsentValue((char) 0))
assertEquals(63, container.previousAbsentValue((char) 63))
assertEquals(63, container.previousAbsentValue((char) 64))
assertEquals(63, container.previousAbsentValue((char) 65))
assertEquals(63, container.previousAbsentValue((char) 128))
assertEquals(129, container.previousAbsentValue((char) 129))
assertEquals(0, container.previousAbsentValue((char) 0))
assertEquals(63, container.previousAbsentValue((char) 63))
assertEquals(63, container.previousAbsentValue((char) 64))
assertEquals(63, container.previousAbsentValue((char) 65))
assertEquals(63, container.previousAbsentValue((char) 128))
assertEquals(129, container.previousAbsentValue((char) 129))
assertEquals(199, container.previousAbsentValue((char) 199))
assertEquals(199, container.previousAbsentValue((char) 200))
assertEquals(199, container.previousAbsentValue((char) 250))
assertEquals(2500, container.previousAbsentValue((char) 2500))
assertEquals(4999, container.previousAbsentValue((char) 5000))
assertEquals(4999, container.previousAbsentValue((char) 5200))
assertEquals(9, container.previousAbsentValue((char) 9))
assertEquals(9, container.previousAbsentValue((char) 10))
assertEquals(11, container.previousAbsentValue((char) 11))
assertEquals(21, container.previousAbsentValue((char) 21))
assertEquals(29, container.previousAbsentValue((char) 30))
assertEquals(((1 << 15) | 4), container.previousAbsentValue((char) ((1 << 15) | 4)))
assertEquals(((1 << 15) | 4), container.previousAbsentValue((char) ((1 << 15) | 5)))
assertEquals(((1 << 15) | 6), container.previousAbsentValue((char) ((1 << 15) | 6)))
assertEquals(((1 << 15) | 6), container.previousAbsentValue((char) ((1 << 15) | 7)))
assertEquals(((1 << 15) | 8), container.previousAbsentValue((char) ((1 << 15) | 8)))
assertEquals(0, container.nextAbsentValue((char) 0))
assertEquals(63, container.nextAbsentValue((char) 63))
assertEquals(129, container.nextAbsentValue((char) 64))
assertEquals(129, container.nextAbsentValue((char) 65))
assertEquals(129, container.nextAbsentValue((char) 128))
assertEquals(129, container.nextAbsentValue((char) 129))
assertEquals(0, container.nextAbsentValue((char) 0))
assertEquals(63, container.nextAbsentValue((char) 63))
assertEquals(129, container.nextAbsentValue((char) 64))
assertEquals(129, container.nextAbsentValue((char) 65))
assertEquals(129, container.nextAbsentValue((char) 128))
assertEquals(129, container.nextAbsentValue((char) 129))
assertEquals(199, container.nextAbsentValue((char) 199))
assertEquals(501, container.nextAbsentValue((char) 200))
assertEquals(501, container.nextAbsentValue((char) 250))
assertEquals(2500, container.nextAbsentValue((char) 2500))
assertEquals(5201, container.nextAbsentValue((char) 5000))
assertEquals(5201, container.nextAbsentValue((char) 5200))
assertEquals(9, container.nextAbsentValue((char) 9))
assertEquals(11, container.nextAbsentValue((char) 10))
assertEquals(11, container.nextAbsentValue((char) 11))
assertEquals(21, container.nextAbsentValue((char) 21))
assertEquals(31, container.nextAbsentValue((char) 30))
assertEquals(((1 << 15) | 4), container.nextAbsentValue((char) ((1 << 15) | 4)))
assertEquals(((1 << 15) | 6), container.nextAbsentValue((char) ((1 << 15) | 5)))
assertEquals(((1 << 15) | 6), container.nextAbsentValue((char) ((1 << 15) | 6)))
assertEquals(((1 << 15) | 8), container.nextAbsentValue((char) ((1 << 15) | 7)))
assertEquals(((1 << 15) | 8), container.nextAbsentValue((char) ((1 << 15) | 8)))
assertEquals(11, consumer.getNumberOfValuesConsumed())
assertEquals(5, consumer2.getNumberOfValuesConsumed())
assertEquals(6, consumer3.getNumberOfValuesConsumed())
assertEquals(expected, result)
assertEquals(expected, result)
assertEquals(expected, result)
assertEquals(expected, result)
assertEquals(expected, result)
assertTrue(bResult.contains(2))
assertTrue(bResult.contains(2))
assertTrue(ebResult.contains(2))
assertTrue(bResult.contains(2))
assertTrue(ebResult.contains(2))
assertTrue(bItResult.contains(1))
assertTrue(bItResult.contains(2))
assertTrue(bItResult.contains(3))
assertTrue(ebItResult.contains(1))
assertTrue(ebItResult.contains(2))
assertTrue(ebItResult.contains(3))
assertTrue(bResult.contains(1))
assertTrue(bResult.contains(2))
assertTrue(bResult.contains(3))
assertTrue(ebResult.contains(1))
assertTrue(ebResult.contains(2))
assertTrue(ebResult.contains(3))
assertTrue(bResult.contains(1))
assertTrue(bResult.contains(3))
assertTrue(ebResult.contains(1))
assertTrue(ebResult.contains(3))
assertEquals(expected, result)
assertEquals(expected, result)
assertEquals(expected, result)
assertTrue(BufferBitSetUtil.equals(bitset, bitmap))
assertEquals(-2, map.select(-2))
assertEquals(-1, map.select(-1))
assertEquals(expectedValues.length, cardinality)
assertEquals(expectedValues.length, cardinality)
assertEquals("{1,2,3,4294967294,4294967295}", bitmap.toString())
assertEquals("{1,2,3,4294967295}", bitmap.toString())
assertTrue(it.hasNext())
assertEquals(101993170, it.next())
assertTrue(it.hasNext())
assertEquals(101993170, it.next())
assertEquals(1000000, limited.getCardinality())
assertEquals(1000000, c.count)
assertEquals(1000000, limited.toArray().length)
assertEquals(1, r.limit(1).getCardinality())
assertEquals(10, r.limit(10).getCardinality())
assertEquals(100, r.limit(100).getCardinality())
assertEquals(1000, r.limit(1000).getCardinality())
assertEquals(10000, r.limit(10000).getCardinality())
assertEquals(100000, r.limit(100000).getCardinality())
assertEquals(1000000, r.limit(1000000).getCardinality())
assertNotEquals(cp.getContainer(), null)
assertNotEquals(cpo.getContainer(), null)
assertEquals(cp.compareTo(cpo), 0)
assertEquals(cp.getCardinality(), (1 << 16) / 2)
assertTrue(cp.isBitmapContainer())
assertTrue(cp.compareTo(cpo) > 0)
assertNotEquals(cp.getContainer(), null)
assertEquals(cp.getCardinality(), (1 << 16) / 512)
assertTrue(cp.compareTo(cpo) > 0)
assertNotEquals(cp.getContainer(), null)
assertEquals(cp.getCardinality(), (1 << 16))
assertTrue(cp.isRunContainer())
assertTrue(cp.compareTo(cpo) > 0)
assertTrue(cp.compareTo(cpo) == 0)
assertEquals(cp.getContainer(), null)
assertNotEquals(cp.getContainer(), null)
assertNotEquals(cpo.getContainer(), null)
assertEquals(cp.compareTo(cpo), 0)
assertEquals(cp.getCardinality(), (1 << 16) / 2)
assertTrue(cp.isBitmapContainer())
assertTrue(cp.compareTo(cpo) > 0)
assertNotEquals(cp.getContainer(), null)
assertEquals(cp.getCardinality(), (1 << 16) / 512)
assertTrue(cp.compareTo(cpo) > 0)
assertNotEquals(cp.getContainer(), null)
assertEquals(cp.getCardinality(), (1 << 16))
assertTrue(cp.isRunContainer())
assertTrue(cp.compareTo(cpo) > 0)
assertTrue(cp.compareTo(cpo) == 0)
assertEquals(cp.getContainer(), null)
assertEquals(rb, rb2)
assertEquals(irb.toRoaringBitmap(), rb2)
assertTrue(r1.getCardinality() == 10)
assertTrue(r2.contains(131000))
assertTrue(r2.contains(131000))
assertTrue(r2.contains(killingPosition))
assertEquals(MutableRoaringBitmap.or(rb1, rb2), MutableRoaringBitmap.or(rrb1, rrb2))
assertEquals(answer.getCardinality(), array1.length)
assertEquals(rr1, rr3)
assertNotEquals(rr1, rr2)
assertNotEquals(rr3, rr2)
assertArrayEquals(cuiRelsArray, back)
assertTrue(Arrays.equals(expectedresult, result))
assertTrue(rxor.equals(ror))
assertEquals(8, a.getCardinality())
assertEquals(8, a.getCardinality())
assertTrue(rbm1.hashCode() == rbm2.hashCode())
assertTrue(rbm1.hashCode() == rbm2.hashCode())
assertEquals(1, andNot.getCardinality())
assertTrue(andNot.contains(1))
assertEquals(1, rr1.getCardinality())
assertTrue(andNot.contains(1))
assertTrue(correct.equals(rr))
assertEquals(rb, andNotresult)
assertEquals(rb2, off)
assertEquals(rb2, off)
assertEquals(1, and.getCardinality())
assertTrue(and.contains(1 << 31))
assertEquals(1, rr1.getCardinality())
assertTrue(and.contains(1 << 31))
assertEquals(array.length, 1)
assertEquals(array[0], 13)
assertEquals(array.length, 1)
assertEquals(array[0], 13)
assertTrue(correct.equals(rr))
assertEquals(array.length, 1)
assertEquals(array[0], 13)
assertTrue(Arrays.equals(arrayand, arrayres))
assertTrue(andresult.equals(off))
assertEquals(0, andresult.getCardinality())
assertEquals(0, andresult.getCardinality())
assertEquals(0, andresult2.getCardinality())
assertEquals(0, andresult.getCardinality())
assertEquals(rc.getCardinality(), rb.getCardinality())
assertEquals(0, wastedBytes)
assertEquals(array[0], (char) 110)
assertEquals(array[1], (char) 114)
assertEquals(array[2], (char) 115)
assertTrue(Arrays.equals(array, a))
assertEquals(array[0], (char) 110)
assertEquals(array[1], (char) 114)
assertEquals(array[2], (char) 115)
assertEquals(0, rb.getCardinality())
assertTrue(0 != rb2.getCardinality())
assertEquals(1, andresult.getCardinality())
assertEquals(rb2.getCardinality(), orresult.getCardinality())
assertTrue(Arrays.equals(arrayrr, arrayrr3))
assertTrue(validate(rbc, ac1))
assertTrue(validate(rbc, ac2))
assertTrue(validate(rbc, ac3))
assertEquals(100000, rbcard)
assertTrue(equals(bs, rb))
assertEquals(100000, rbcard)
assertEquals(0, rb.getCardinality())
assertTrue(equals(bs, rb))
assertTrue(equals(bs, rb1))
assertEquals(0, rbcard)
assertTrue(equals(bs, rb))
assertEquals(0, rbcard)
assertEquals(1, rb.getCardinality())
assertTrue(equals(bs, rb1))
assertTrue(equals(bs, rb))
assertEquals(9, rbcard)
assertTrue(equals(bs, rb))
assertEquals(9, rbcard)
assertTrue(equals(bs, rb2))
assertEquals(96608, rbcard)
assertTrue(equals(bs, rb))
assertEquals(96608, rbcard)
assertTrue(equals(bs, rb2))
assertEquals(46464, rbcard)
assertTrue(equals(bs, rb))
assertEquals(46464, rbcard)
assertTrue(equals(bs, rb2))
assertEquals(1928, rbcard)
assertTrue(equals(bs, rb))
assertEquals(1928, rbcard)
assertTrue(equals(bs, rb2))
assertEquals(132000 - 651 + 2, rbcard)
assertTrue(equals(bs, rb))
assertEquals(132000 - 651 + 2, rbcard)
assertTrue(equals(bs, rb2))
assertEquals(99999, rb2.getCardinality())
assertTrue(rb2.contains(Integer.MAX_VALUE + 100000))
assertTrue(rb2.contains(Integer.MAX_VALUE + 199999))
assertEquals(2, or.getCardinality())
assertTrue(or.contains(1))
assertTrue(or.contains(1 << 31))
assertEquals(2, rr1.getCardinality())
assertTrue(or.contains(1))
assertTrue(or.contains(1 << 31))
assertTrue(Arrays.equals(array, arrayrr))
assertTrue(Arrays.equals(array, arrayirr))
assertTrue(correct.equals(rr))
assertTrue(Arrays.equals(arrayor, arrayrr))
assertEquals(valide, true)
assertTrue(orresult.equals(off))
assertEquals(rb2card, orresult.getCardinality())
assertEquals(rb2card, orresult.getCardinality())
assertEquals(rb2.getCardinality() + rb.getCardinality(), orresult2.getCardinality())
assertTrue(rb.equals(orresult2))
assertEquals((4 << 16) - 1, rb.getCardinality())
assertEquals(one, MutableRoaringBitmap.bitmapOf(32))
assertEquals(one, MutableRoaringBitmap.bitmapOf(32))
assertEquals(one, MutableRoaringBitmap.bitmapOf(32))
assertEquals((4 << 16) - 1, rb.getCardinality())
assertEquals((5 << 16) - 2, rb.getCardinality())
assertEquals((2 << 16) + (2 << 14), rb.getCardinality())
assertEquals((5 << 16), rb.getCardinality())
assertEquals((1 << 14) + 4, rb.getCardinality())
assertTrue(iterator.hasNext())
assertEquals((1 << 16) - 1, iterator.next())
assertTrue(iterator.hasNext())
assertEquals(1 << 16, iterator.next())
assertTrue(iterator.hasNext())
assertEquals(2 << 16, iterator.next())
assertTrue(iterator.hasNext())
assertEquals(3 << 16, iterator.next())
assertEquals(rb.getCardinality(), N)
assertTrue(rr.equals(rrback))
assertEquals(rr.getCardinality(), rrback.getCardinality())
assertTrue(rr.equals(rrback))
assertEquals(rr.getCardinality(), rrback.getCardinality())
assertTrue(rr.equals(rrback))
assertEquals(rr.getCardinality(), rrback.getCardinality())
assertTrue(rr.equals(rrback))
assertEquals(howmuch, bos.toByteArray().length)
assertEquals(rr.getCardinality(), rrback.getCardinality())
assertTrue(rr.equals(rrback))
assertEquals(howmuch, bos.toByteArray().length)
assertEquals(rr.getCardinality(), rrback.getCardinality())
assertTrue(rr.equals(rrback))
assertEquals(1, xor.getCardinality())
assertTrue(xor.contains(1))
assertEquals(1, rr1.getCardinality())
assertTrue(xor.contains(1))
assertTrue(correct.equals(rr))
assertTrue(copy1.equals(rb))
assertTrue(copy2.equals(rb))
assertTrue(copy1.equals(rb))
assertTrue(copy2.equals(rb))
assertTrue(ocopy1.equals(orb))
assertTrue(copy2.equals(toMapped(orb)))
assertTrue(ocopy1.equals(orb))
assertTrue(copy2.equals(toMapped(orb)))
assertEquals(valide, true)
assertTrue(xorresult.equals(off))
assertEquals(rb2card, xorresult.getCardinality())
assertEquals(rb2card, xorresult.getCardinality())
assertEquals(rb2.getCardinality() + rb.getCardinality(), xorresult2.getCardinality())
assertTrue(xorresult2.equals(rb))
assertTrue(rr1.intersects(0, 3))
assertTrue(rr1.intersects(0, 11))
assertTrue(rr1.intersects(2, 3))
assertTrue(rr1.intersects(4, 8))
assertTrue(rr1.intersects(8, 12))
assertTrue(rr2.intersects(0, 11))
assertTrue(rr2.intersects(2, 3))
assertTrue(rr2.intersects(4, 8))
assertTrue(rr2.intersects(8, 12))
assertTrue(rr3.intersects(5, 10))
assertTrue(rbor.equals(BufferFastAggregation.horizontal_or(rb1, rb2)))
assertEquals(ImmutableRoaringBitmap.intersects(rr1, rr2), false)
assertEquals(ImmutableRoaringBitmap.intersects(rr1, rr2), true)
assertEquals(ImmutableRoaringBitmap.intersects(rr3, rr2), true)
assertEquals(ImmutableRoaringBitmap.intersects(rr3, rr1), false)
assertEquals(ImmutableRoaringBitmap.intersects(rr1, rr2), true)
assertEquals(182, bitmap.getCardinality())
assertEquals(rrand.getCardinality(), rrandCount)
assertEquals(rrand.getCardinality(), rrandCountm)
assertEquals(rrand.getCardinality(), ImmutableRoaringBitmap.andCardinality(rr, rr2))
assertEquals(rrand.getCardinality(), ImmutableRoaringBitmap.andCardinality(rr2, rr))
assertEquals(rrand.getCardinality(), ImmutableRoaringBitmap.andCardinality(rrm, rr2))
assertEquals(rrand.getCardinality(), ImmutableRoaringBitmap.andCardinality(rr2, rrm))
assertEquals(rrand.getCardinality(), ImmutableRoaringBitmap.andCardinality(rr2, rr))
assertEquals(rrand.getCardinality(), ImmutableRoaringBitmap.andCardinality(rr2, rrm))
assertEquals(rror.getCardinality(), ImmutableRoaringBitmap.orCardinality(rr, rr2))
assertEquals(rb4, rb1)
assertEquals(2, rb.first())
assertEquals(8, rb.last())
assertEquals(2, rb.first())
assertEquals((1 << 14) - 1, rb.last())
assertEquals(2, rb.first())
assertEquals((1L << 30) - 1, rb.last())
assertEquals(baseline, MutableRoaringBitmap.and(baseline, baseline))
assertEquals(baseline.getCardinality(), MutableRoaringBitmap.andCardinality(baseline, baseline))
assertEquals(rb.contains(0), true)
assertEquals(rb.getCardinality(), 1)
assertEquals(-1, r.nextValue(7))
assertNotEquals(rbB, rbA)
assertNotEquals(rbB, rbA)
assertNotEquals(rbB, rbA)
assertTrue(map.contains(32))
assertTrue(bitmap.cardinalityExceeds(runLength + bitmapCount + 1))
assertTrue(bitmap.cardinalityExceeds(runLength + bitmapCount - 1))
assertTrue(bitmap.cardinalityExceeds(runLength - 1))
assertTrue(b1.equals(MutableRoaringBitmap.bitmapOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))
assertTrue(b1.isEmpty())
assertTrue(b1.equals(MutableRoaringBitmap.bitmapOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))
assertTrue(b1.isEmpty())
assertEquals(-1, ImmutableRoaringBitmap.bitmapOf(27399807).previousValue(403042))
assertEquals(-1, ImmutableRoaringBitmap.bitmapOf().previousValue(403042))
Assertions.assertEquals(2L, x.getLongCardinality())
Assertions.assertArrayEquals(new int[] { -2, -1 }, x.toArray())
assertEquals(bitmap, copy)
assertEquals(bitmap, result)
assertEquals(bitmap.getCardinality(), cardinality)
assertEquals(expected, result)
assertEquals(expected.getCardinality(), consumed)
assertEquals(expected, result)
assertEquals(expected.getCardinality(), consumed)
assertEquals(0, consumed)
assertTrue(result.isEmpty())
assertTrue(bi.hasNext())
assertEquals(n, 1)
assertEquals(batch[0], 8511)
assertTrue(bi.hasNext())
assertTrue(it.hasNext())
assertEquals(n, 3)
assertEquals(batch[0], 3 << 16)
assertEquals(batch[1], (3 << 16) + 5)
assertEquals(batch[2], (3 << 16) + 10)
assertFalse(rc.contains((char) 1))
assertFalse(iterator.hasNext())
assertFalse(iterator.hasNext())
assertFalse(iterator.hasNext())
assertFalse(iterator.hasNext())
assertFalse(iterator.hasNext())
assertFalse(i.hasNext())
assertFalse(i.hasNext())
assertFalse(i.hasNext())
assertFalse(i.hasNext())
assertFalse(i.hasNext())
assertFalse(rc.intersects(ac))
assertFalse(ac.intersects(rc))
assertFalse(rc.intersects(ac))
assertFalse(ac.intersects(rc))
assertFalse(rc.intersects(ac))
assertFalse(ac.intersects(rc))
assertFalse(rc1.intersects(rc2))
assertFalse(rc1.intersects(rc2))
assertFalse(rc1.intersects(rc2))
assertFalse(rc1.intersects(rc2))
assertFalse(rc.intersects(bc))
assertFalse(rc.contains(subset))
assertFalse(rc.contains(superset))
assertFalse(rc.contains(disjoint))
assertFalse(disjoint.contains(rc))
assertFalse(rc.contains(superset))
assertFalse(rc.contains(subset))
assertFalse(rc.contains(disjoint))
assertFalse(disjoint.contains(rc))
assertFalse(rc.contains(shifted))
assertFalse(rc.contains(superset))
assertFalse(rc.contains(disjoint))
assertFalse(disjoint.contains(rc))
assertFalse(rc.contains(disjoint))
assertFalse(disjoint.contains(rc))
assertFalse(rc.contains(disjoint))
assertFalse(disjoint.contains(rc))
assertFalse(rc.contains(disjoint))
assertFalse(disjoint.contains(rc))
assertFalse(container.intersects(11, 1 << 16))
assertFalse(container.intersects(0, 1))
assertFalse(container.intersects(lower16Bits(-100), lower16Bits(-55)))
assertFalse(container.intersects(lower16Bits(-100), lower16Bits(-55)))
assertFalse(container.intersects(lower16Bits(-9), lower16Bits(-1)))
assertFalse(RunContainer.full().flip((char) (1 << 15)).contains(0, 1 << 16))
assertFalse(rc.contains(0, 100))
assertFalse(rc.contains(0, 100000))
assertFalse(rc.contains(100, 5000))
assertFalse(rc.contains(50, 5000))
assertFalse(rc.contains(4000, 6000))
assertFalse(rc.contains(10001, 20000))
assertFalse(rc.contains(0, 100))
assertFalse(rc.contains(500, 600))
assertFalse(rc.contains(501, 600))
assertFalse(rc.contains(600, 700))
assertFalse(rc.contains(9999, 10001))
assertFalse(rc.contains(48, 49))
assertFalse(rc.intersects(57, 215))
assertFalse(bResult.contains(1))
assertFalse(bResult.contains(3))
assertFalse(bResult.contains(1))
assertFalse(bResult.contains(3))
assertFalse(ebResult.contains(1))
assertFalse(ebResult.contains(3))
assertFalse(bResult.contains(1))
assertFalse(bResult.contains(3))
assertFalse(ebResult.contains(1))
assertFalse(ebResult.contains(3))
assertFalse(bResult.contains(2))
assertFalse(ebResult.contains(2))
assertFalse(it.hasNext())
assertFalse(it.hasNext())
assertFalse(cp.isRunContainer())
assertFalse(cp.isBitmapContainer())
assertFalse(cp.isRunContainer())
assertFalse(cp.isBitmapContainer())
assertFalse(cp.isRunContainer())
assertFalse(cp.isBitmapContainer())
assertFalse(cp.isRunContainer())
assertFalse(cp.isBitmapContainer())
assertFalse(r1.contains(killingPosition))
assertFalse(r1.contains(killingPosition))
assertFalse(r1.contains(killingPosition))
assertFalse(r1.contains(killingPosition))
assertFalse(r1.contains(killingPosition))
assertFalse(r1.contains(killingPosition))
assertFalse(rb2.contains(Integer.MAX_VALUE + 100002))
assertFalse(iterator.hasNext())
assertFalse(iterator.hasNext())
assertFalse(iterator.hasNext())
assertFalse(iterator.hasNext())
assertFalse(iterator.hasNext())
assertFalse(iterator.hasNext())
assertFalse(rr1.intersects(0, 1))
assertFalse(rr1.intersects(12, 14))
assertFalse(rr1.intersects(4, 5))
assertFalse(rr2.intersects(12, 14))
assertFalse(rr2.intersects(4, 5))
assertFalse(map.contains(30))
assertFalse(bitmap.cardinalityExceeds(Integer.MAX_VALUE))
assertFalse(bitmap.cardinalityExceeds(runLength + bitmapCount + arrayCount))
assertFalse(bi.hasNext())
assertFalse(bi.hasNext())
assertEquals(asList(bits.getCharIterator()), ImmutableList.of(0, 127))
assertEquals(asList(bits.getReverseCharIterator()), ImmutableList.of(127, 0))
assertFalse(MutableRoaringBitmap.bitmapOf().iterator().hasNext())
assertFalse(MutableRoaringBitmap.bitmapOf().getIntIterator().hasNext())
assertFalse(MutableRoaringBitmap.bitmapOf().getReverseIntIterator().hasNext())
assertEquals(bitmap.getCardinality(), iteratorCopy.size())
assertEquals(bitmap.getCardinality(), intIteratorCopy.size())
assertEquals(bitmap.getCardinality(), reverseIntIteratorCopy.size())
assertEquals(Ints.asList(data), iteratorCopy)
assertEquals(Ints.asList(data), intIteratorCopy)
assertEquals(Lists.reverse(Ints.asList(data)), reverseIntIteratorCopy)
assertEquals(bitmap.getCardinality(), iteratorCopy.size())
assertEquals(bitmap.getCardinality(), intIteratorCopy.size())
assertEquals(bitmap.getCardinality(), reverseIntIteratorCopy.size())
assertEquals(Ints.asList(data), iteratorCopy)
assertEquals(Ints.asList(data), intIteratorCopy)
assertEquals(Lists.reverse(Ints.asList(data)), reverseIntIteratorCopy)
assertEquals(ImmutableList.of(1, 2, 3), iteratorCopy)
assertEquals(ImmutableList.of(1, 2, 3), intIteratorCopy)
assertEquals(ImmutableList.of(3, 2, 1), reverseIntIteratorCopy)
assertEquals(ImmutableList.of(1, 2, 3), iteratorCopy)
assertEquals(ImmutableList.of(1, 2, 3), intIteratorCopy)
assertEquals(ImmutableList.of(3, 2, 1), reverseIntIteratorCopy)
assertEquals(j, jj)
assertEquals((4 << 16) - 1, rb.getCardinality())
assertEquals((4 << 16) - 1, rb.getCardinality())
assertEquals((5 << 16) - 2, rb.getCardinality())
assertEquals((2 << 16) + (2 << 14), rb.getCardinality())
assertEquals((5 << 16), rb.getCardinality())
assertEquals((1 << 14) + 4, rb.getCardinality())
assertTrue(iterator.hasNext())
assertEquals((1 << 16) - 1, iterator.next())
assertTrue(iterator.hasNext())
assertEquals(1 << 16, iterator.next())
assertTrue(iterator.hasNext())
assertEquals(2 << 16, iterator.next())
assertTrue(iterator.hasNext())
assertEquals(3 << 16, iterator.next())
assertEquals((1 << 14) + 3, rb.getCardinality())
assertTrue(iterator.hasNext())
assertEquals(1 << 16, iterator.next())
assertTrue(iterator.hasNext())
assertEquals(2 << 16, iterator.next())
assertTrue(iterator.hasNext())
assertEquals(3 << 16, iterator.next())
assertEquals(5, rb.last())
assertEquals((int) (65535L * 65536L + 65523), rb3.last())
assertTrue(rb.isEmpty())
assertEquals(MutableRoaringBitmap.bitmapOf(1, 0x10001, 0x20001), rb)
assertTrue(result.isEmpty())
assertEquals(MutableRoaringBitmap.bitmapOf(1, 0x10001, 0x20001), ImmutableRoaringBitmap.orNot(rb, full, 0x30000L))
assertEquals(expected, actual)
assertEquals(expected, actual)
assertEquals(correct, rr)
assertEquals(correct.hashCode(), rr.hashCode())
assertEquals(rb, andNotresult)
assertEquals(rb2, off)
assertEquals(rb2, off)
assertEquals(rb, andNotresult)
assertEquals(rb2, off)
assertEquals(rb2, off)
assertEquals(correct, rr)
assertEquals(correct.hashCode(), rr.hashCode())
assertEquals(correct, rr)
assertEquals(correct.hashCode(), rr.hashCode())
assertEquals(correct, rr)
assertEquals(correct.hashCode(), rr.hashCode())
assertEquals(result, rb2)
assertEquals(result, rb2)
assertTrue((mr.getMappeableRoaringArray().getContainerAtIndex(0)) instanceof MappeableArrayContainer)
assertTrue((mr.getMappeableRoaringArray().getContainerAtIndex(1)) instanceof MappeableArrayContainer)
assertTrue((mr.getMappeableRoaringArray().getContainerAtIndex(2)) instanceof MappeableBitmapContainer)
assertTrue((mr.getMappeableRoaringArray().getContainerAtIndex(3)) instanceof MappeableBitmapContainer)
assertTrue((mr.getMappeableRoaringArray().getContainerAtIndex(4)) instanceof MappeableBitmapContainer)
assertTrue((mr.getMappeableRoaringArray().getContainerAtIndex(5)) instanceof MappeableArrayContainer)
assertTrue((mr.getMappeableRoaringArray().getContainerAtIndex(6)) instanceof MappeableBitmapContainer)
assertEquals(256, mr.getMappeableRoaringArray().getContainerAtIndex(0).getCardinality())
assertEquals(4000, mr.getMappeableRoaringArray().getContainerAtIndex(1).getCardinality())
assertEquals(9000, mr.getMappeableRoaringArray().getContainerAtIndex(2).getCardinality())
assertEquals(7000, mr.getMappeableRoaringArray().getContainerAtIndex(3).getCardinality())
assertEquals(10000, mr.getMappeableRoaringArray().getContainerAtIndex(4).getCardinality())
assertEquals(1000, mr.getMappeableRoaringArray().getContainerAtIndex(5).getCardinality())
assertEquals(30000, mr.getMappeableRoaringArray().getContainerAtIndex(6).getCardinality())
assertTrue((mr2.getMappeableRoaringArray().getContainerAtIndex(0)) instanceof MappeableArrayContainer)
assertTrue((mr2.getMappeableRoaringArray().getContainerAtIndex(1)) instanceof MappeableArrayContainer)
assertTrue((mr2.getMappeableRoaringArray().getContainerAtIndex(2)) instanceof MappeableBitmapContainer)
assertTrue((mr2.getMappeableRoaringArray().getContainerAtIndex(3)) instanceof MappeableArrayContainer)
assertTrue((mr2.getMappeableRoaringArray().getContainerAtIndex(4)) instanceof MappeableArrayContainer)
assertTrue((mr2.getMappeableRoaringArray().getContainerAtIndex(5)) instanceof MappeableBitmapContainer)
assertEquals(256, mr2.getMappeableRoaringArray().getContainerAtIndex(0).getCardinality())
assertEquals(4000, mr2.getMappeableRoaringArray().getContainerAtIndex(1).getCardinality())
assertEquals(6000, mr2.getMappeableRoaringArray().getContainerAtIndex(2).getCardinality())
assertEquals(1000, mr2.getMappeableRoaringArray().getContainerAtIndex(3).getCardinality())
assertEquals(2000, mr2.getMappeableRoaringArray().getContainerAtIndex(4).getCardinality())
assertEquals(5000, mr2.getMappeableRoaringArray().getContainerAtIndex(5).getCardinality())
assertEquals(0, mr3.getCardinality())
assertTrue((mr.getMappeableRoaringArray().getContainerAtIndex(0)) instanceof MappeableRunContainer)
assertTrue((mr.getMappeableRoaringArray().getContainerAtIndex(1)) instanceof MappeableRunContainer)
assertTrue((mr.getMappeableRoaringArray().getContainerAtIndex(2)) instanceof MappeableRunContainer)
assertTrue((mr.getMappeableRoaringArray().getContainerAtIndex(3)) instanceof MappeableRunContainer)
assertTrue((mr.getMappeableRoaringArray().getContainerAtIndex(4)) instanceof MappeableRunContainer)
assertTrue((mr.getMappeableRoaringArray().getContainerAtIndex(5)) instanceof MappeableRunContainer)
assertTrue((mr.getMappeableRoaringArray().getContainerAtIndex(6)) instanceof MappeableRunContainer)
assertEquals(256, mr.getMappeableRoaringArray().getContainerAtIndex(0).getCardinality())
assertEquals(4000, mr.getMappeableRoaringArray().getContainerAtIndex(1).getCardinality())
assertEquals(9000, mr.getMappeableRoaringArray().getContainerAtIndex(2).getCardinality())
assertEquals(7000, mr.getMappeableRoaringArray().getContainerAtIndex(3).getCardinality())
assertEquals(10000, mr.getMappeableRoaringArray().getContainerAtIndex(4).getCardinality())
assertEquals(1000, mr.getMappeableRoaringArray().getContainerAtIndex(5).getCardinality())
assertEquals(30000, mr.getMappeableRoaringArray().getContainerAtIndex(6).getCardinality())
assertTrue((mr2.getMappeableRoaringArray().getContainerAtIndex(0)) instanceof MappeableRunContainer)
assertTrue((mr2.getMappeableRoaringArray().getContainerAtIndex(1)) instanceof MappeableRunContainer)
assertTrue((mr2.getMappeableRoaringArray().getContainerAtIndex(2)) instanceof MappeableRunContainer)
assertTrue((mr2.getMappeableRoaringArray().getContainerAtIndex(3)) instanceof MappeableRunContainer)
assertTrue((mr2.getMappeableRoaringArray().getContainerAtIndex(4)) instanceof MappeableRunContainer)
assertTrue((mr2.getMappeableRoaringArray().getContainerAtIndex(5)) instanceof MappeableRunContainer)
assertEquals(256, mr2.getMappeableRoaringArray().getContainerAtIndex(0).getCardinality())
assertEquals(4000, mr2.getMappeableRoaringArray().getContainerAtIndex(1).getCardinality())
assertEquals(6000, mr2.getMappeableRoaringArray().getContainerAtIndex(2).getCardinality())
assertEquals(1000, mr2.getMappeableRoaringArray().getContainerAtIndex(3).getCardinality())
assertEquals(2000, mr2.getMappeableRoaringArray().getContainerAtIndex(4).getCardinality())
assertEquals(5000, mr2.getMappeableRoaringArray().getContainerAtIndex(5).getCardinality())
assertEquals(0, mr3.getCardinality())
assertEquals(rbm1.hashCode(), rbm2.hashCode())
assertEquals(rbm1.hashCode(), rbm2.hashCode())
assertTrue(ir.contains(5))
assertEquals(result, resultInt)
assertEquals(50000, result.getCardinality())
assertEquals(result, resultInt)
assertEquals(0, resultInt.getCardinality())
assertEquals(result, resultInt)
assertEquals(250000, result.getCardinality())
assertEquals(result, resultInt)
assertEquals(0, resultInt.getCardinality())
assertEquals(result, resultInt)
assertEquals(50000, result.getCardinality())
assertEquals(result, resultInt)
assertEquals(0, resultInt.getCardinality())
assertEquals(result, resultInt)
assertEquals(100000, result.getCardinality())
assertEquals(result, resultInt)
assertEquals(0, resultInt.getCardinality())
assertEquals(2, rb.toImmutableRoaringBitmap().first())
assertEquals(8, rb.toImmutableRoaringBitmap().last())
assertEquals(2, rb.toImmutableRoaringBitmap().first())
assertEquals((1 << 14) - 1, rb.toImmutableRoaringBitmap().last())
assertEquals(2, rb.toImmutableRoaringBitmap().first())
assertEquals((1L << 30) - 1, rb.toImmutableRoaringBitmap().last())
assertTrue(baseline.isHammingSimilar(baseline, 0))
assertTrue(baseline.isHammingSimilar(other, 9))
assertTrue(baseline.isHammingSimilar(other, 6))
assertTrue(baseline.isHammingSimilar(baseline, 0))
assertTrue(baseline.isHammingSimilar(other, 1))
assertTrue(baseline.isHammingSimilar(other, 2))
assertTrue(baseline.isHammingSimilar(other, 3))
assertEquals(xor.getCardinality(), ImmutableRoaringBitmap.xorCardinality(rb, rb2))
assertEquals(andNot.getCardinality(), ImmutableRoaringBitmap.andNotCardinality(rb, rb2))
assertEquals(0, ImmutableRoaringBitmap.bitmapOf(65537).rank(1))
assertEquals(1, ImmutableRoaringBitmap.bitmapOf(65537).rank(65537))
assertEquals(1, ImmutableRoaringBitmap.bitmapOf(65537).rank(65538))
assertEquals("{4294967289}", bitmap.toString())
assertEquals(-7, bitmap.last())
assertTrue(bitmap.contains(1L, 999_999L))
assertTrue(bitmap.contains(0L, 500_000L))
assertTrue(bitmap.contains(1, 6))
assertTrue(bitmap.contains(1, 5))
assertTrue(bitmap.contains(2, 6))
assertTrue(bitmap.contains(2, 7))
assertTrue(bitmap.contains(0L, 1L))
assertTrue(bitmap.contains(1L << 10, 1 | (1L << 10)))
assertEquals(1, r.rangeCardinality(60000, 70000))
assertEquals(99, rc.getCardinality())
assertEquals(64, rc.getCardinality())
assertEquals(9, result.getCardinality())
assertEquals(4, rc.getCardinality())
assertEquals(4, rc2.getCardinality())
assertEquals(0, rc.andCardinality(ac))
assertEquals(5, rc.andCardinality(ac))
assertEquals(6, rc.andCardinality(ac))
assertEquals(0, rc.andCardinality(ac))
assertEquals(5, rc.andCardinality(ac))
assertEquals(6, rc.andCardinality(ac))
assertEquals(0, rc1.andCardinality(rc2))
assertEquals(0, rc2.andCardinality(rc1))
assertEquals(5, rc1.andCardinality(rc2))
assertEquals(5, rc2.andCardinality(rc1))
assertEquals(6, rc1.andCardinality(rc2))
assertEquals(6, rc2.andCardinality(rc1))
assertEquals(6, rc1.andCardinality(rc2))
assertEquals(6, rc2.andCardinality(rc1))
assertEquals(16, rc1.andCardinality(rc2))
assertEquals(16, rc2.andCardinality(rc1))
assertTrue(rc instanceof MappeableRunContainer)
assertEquals(1 << 16, result.getCardinality())
assertTrue(result instanceof MappeableRunContainer)
assertTrue(rc instanceof MappeableRunContainer)
assertEquals(1 << 16, result.getCardinality())
assertTrue(result instanceof MappeableRunContainer)
assertTrue(rc instanceof MappeableRunContainer)
assertEquals(1 << 16, result.getCardinality())
assertTrue(result instanceof MappeableRunContainer)
assertEquals(-1, rbc.getCardinality())
assertEquals(1 << 16, repaired.getCardinality())
assertTrue(repaired instanceof MappeableRunContainer)
assertEquals(1 << 16, rbc.getCardinality())
assertTrue(rbc instanceof MappeableRunContainer)
assertEquals(1 << 16, result.getCardinality())
assertEquals(1 << 16, iresult.getCardinality())
assertTrue(result instanceof MappeableRunContainer)
assertTrue(iresult instanceof MappeableRunContainer)
assertEquals(8677, result.getCardinality())
assertTrue(rc.getCardinality() > MappeableArrayContainer.DEFAULT_MAX_SIZE)
assertEquals(11437, result.getCardinality())
assertEquals(5046, result.getCardinality())
assertEquals(6031, result.getCardinality())
assertTrue(rc.equals(ac))
assertTrue(ac.equals(rc))
assertEquals(0xAAAAAAAAAAAAAAAAL, bits[0])
assertEquals(0L, bits[0])
assertEquals(0xAAAAAAAAAAAAAAAAL, bits[0])
assertEquals(-1L, bits[0])
assertEquals(rb.getCardinality(), 200100)
assertEquals(rb.getCardinality(), 200100)
assertEquals(rb.getCardinality(), 200100)
assertEquals(rb.getCardinality(), 200100)
assertEquals(input, deserialised)
assertEquals(input, deserialised)
assertEquals(input, deserialised)
assertEquals(10 + serialisedSize, buffer.position())
assertEquals(0, buffer.remaining())
assertEquals(input, roundtrip)
assertEquals(0, buffer.remaining())
assertEquals(input, roundtrip)
assertEquals(superSet.containsAll(subSet), superSetRB.contains(subSetRB))
assertEquals(subSet.containsAll(superSet), subSetRB.contains(superSetRB))
assertEquals(0, ac.getCardinality())
assertEquals(79, ac.getCardinality())
assertEquals(1, ac.getCardinality())
assertTrue(ac.contains((char) 1))
assertEquals(0, ac.getCardinality())
assertEquals(12, ac.getCardinality())
assertEquals(5, ac.getCardinality())
assertEquals(5000, ac.getCardinality())
assertTrue(ac.contains((char) 7000))
assertEquals(5, ac.getCardinality())
assertEquals(4, ac.getCardinality())
assertEquals(5000, ac.getCardinality())
assertTrue(ac.contains((char) 7000))
assertEquals(5, ac.getCardinality())
assertEquals(5, ac.getCardinality())
assertEquals(5, ac.getCardinality())
assertTrue(ac1.intersects(ac2))
assertEquals(1, ac.numberOfRuns())
assertEquals(4, ac2.getCardinality())
assertEquals(8192, ac.getCardinality())
assertEquals(8182, ac.getCardinality())
assertEquals(value, expected++)
assertEquals(1 << 16, result.getCardinality())
assertTrue(result instanceof MappeableRunContainer)
assertEquals(1 << 16, result.getCardinality())
assertTrue(result instanceof MappeableRunContainer)
assertEquals(-1, rbc.getCardinality())
assertEquals(1 << 16, repaired.getCardinality())
assertTrue(repaired instanceof MappeableRunContainer)
assertEquals("{5,6,7,8,9,10,11,12,13,14,65519,65533}", ac1.toString())
assertTrue(ac1.contains((char) 128))
assertTrue(ac1.contains((char) 256))
assertTrue(ac1.contains((char) 1024))
assertTrue(ac1.contains((char) 128))
assertTrue(ac1.contains((char) 256))
assertTrue(ac1.contains((char) 512))
assertTrue(ac1.contains((char) 513))
assertTrue(ac1.contains((char) 1024))
assertTrue(ac.contains(disjoint))
assertTrue(container.intersects(0, 1))
assertTrue(container.intersects(0, 101))
assertTrue(container.intersects(0, lower16Bits(-1)))
assertTrue(container.intersects(0, lower16Bits(-40)))
assertTrue(container.intersects(11, 1 << 16))
assertTrue(container.intersects(0, 300))
assertTrue(container.intersects(1, 300))
assertTrue(container.intersects(0, lower16Bits(-1)))
assertTrue(ac.contains(20, 100))
assertTrue(ac.contains(20, 99))
assertTrue(ac.contains(21, 100))
assertTrue(ac.contains(1, 2))
assertTrue(ac.contains(1 << 15, 1 << 8 | 1 << 15))
assertTrue(ac.contains(1 + (1 << 15), (1 << 8 | 1 << 15) - 1))
assertEquals(10, container.nextValue((char) 5))
assertEquals(10, container.nextValue((char) 10))
assertEquals(20, container.nextValue((char) 11))
assertEquals(30, container.nextValue((char) 30))
assertEquals(-1, container.nextValue((char) 31))
assertTrue(container instanceof MappeableArrayContainer)
assertEquals(64, container.nextValue((char) 0))
assertEquals(64, container.nextValue((char) 64))
assertEquals(65, container.nextValue((char) 65))
assertEquals(128, container.nextValue((char) 128))
assertEquals(-1, container.nextValue((char) 129))
assertEquals(-1, container.nextValue((char) 5000))
assertTrue(container instanceof MappeableArrayContainer)
assertEquals(64, container.nextValue((char) 0))
assertEquals(64, container.nextValue((char) 64))
assertEquals(65, container.nextValue((char) 65))
assertEquals(128, container.nextValue((char) 128))
assertEquals(256, container.nextValue((char) 129))
assertEquals(-1, container.nextValue((char) 512))
assertTrue(container instanceof MappeableArrayContainer)
assertEquals(64, container.nextValue((char) 0))
assertEquals(64, container.nextValue((char) 63))
assertEquals(64, container.nextValue((char) 64))
assertEquals(65, container.nextValue((char) 65))
assertEquals(128, container.nextValue((char) 128))
assertEquals(200, container.nextValue((char) 129))
assertEquals(200, container.nextValue((char) 199))
assertEquals(200, container.nextValue((char) 200))
assertEquals(250, container.nextValue((char) 250))
assertEquals(5000, container.nextValue((char) 2500))
assertEquals(5000, container.nextValue((char) 5000))
assertEquals(5200, container.nextValue((char) 5200))
assertEquals(-1, container.nextValue((char) 5201))
assertTrue(container instanceof MappeableArrayContainer)
assertEquals(-1, container.previousValue((char) 0))
assertEquals(-1, container.previousValue((char) 63))
assertEquals(64, container.previousValue((char) 64))
assertEquals(65, container.previousValue((char) 65))
assertEquals(128, container.previousValue((char) 128))
assertEquals(128, container.previousValue((char) 129))
assertTrue(container instanceof MappeableArrayContainer)
assertEquals(-1, container.previousValue((char) 0))
assertEquals(-1, container.previousValue((char) 63))
assertEquals(64, container.previousValue((char) 64))
assertEquals(65, container.previousValue((char) 65))
assertEquals(128, container.previousValue((char) 128))
assertEquals(128, container.previousValue((char) 129))
assertEquals(128, container.previousValue((char) 199))
assertEquals(200, container.previousValue((char) 200))
assertEquals(250, container.previousValue((char) 250))
assertEquals(500, container.previousValue((char) 2500))
assertEquals(5000, container.previousValue((char) 5000))
assertEquals(5200, container.previousValue((char) 5200))
assertEquals(-1, container.previousValue((char) 5))
assertEquals(-1, container.previousValue((char) 9))
assertEquals(10, container.previousValue((char) 10))
assertEquals(10, container.previousValue((char) 11))
assertEquals(20, container.previousValue((char) 21))
assertEquals(30, container.previousValue((char) 30))
assertEquals(-1, container.previousValue((char) ((1 << 15) | 4)))
assertEquals(((1 << 15) | 5), container.previousValue((char) ((1 << 15) | 5)))
assertEquals(((1 << 15) | 5), container.previousValue((char) ((1 << 15) | 6)))
assertEquals(((1 << 15) | 7), container.previousValue((char) ((1 << 15) | 7)))
assertEquals(((1 << 15) | 7), container.previousValue((char) ((1 << 15) | 8)))
assertEquals(((1 << 15) | 5), container.nextValue((char) ((1 << 15) | 4)))
assertEquals(((1 << 15) | 5), container.nextValue((char) ((1 << 15) | 5)))
assertEquals(((1 << 15) | 7), container.nextValue((char) ((1 << 15) | 6)))
assertEquals(((1 << 15) | 7), container.nextValue((char) ((1 << 15) | 7)))
assertEquals(-1, container.nextValue((char) ((1 << 15) | 8)))
assertEquals(30, container.previousValue((char) 31))
assertEquals(0, container.previousAbsentValue((char) 0))
assertEquals(63, container.previousAbsentValue((char) 63))
assertEquals(63, container.previousAbsentValue((char) 64))
assertEquals(63, container.previousAbsentValue((char) 65))
assertEquals(63, container.previousAbsentValue((char) 128))
assertEquals(129, container.previousAbsentValue((char) 129))
assertEquals(0, container.previousAbsentValue((char) 0))
assertEquals(63, container.previousAbsentValue((char) 63))
assertEquals(63, container.previousAbsentValue((char) 64))
assertEquals(63, container.previousAbsentValue((char) 65))
assertEquals(63, container.previousAbsentValue((char) 128))
assertEquals(129, container.previousAbsentValue((char) 129))
assertEquals(199, container.previousAbsentValue((char) 199))
assertEquals(199, container.previousAbsentValue((char) 200))
assertEquals(199, container.previousAbsentValue((char) 250))
assertEquals(2500, container.previousAbsentValue((char) 2500))
assertEquals(4999, container.previousAbsentValue((char) 5000))
assertEquals(4999, container.previousAbsentValue((char) 5200))
assertEquals(9, container.previousAbsentValue((char) 9))
assertEquals(9, container.previousAbsentValue((char) 10))
assertEquals(11, container.previousAbsentValue((char) 11))
assertEquals(21, container.previousAbsentValue((char) 21))
assertEquals(29, container.previousAbsentValue((char) 30))
assertEquals(((1 << 15) | 4), container.previousAbsentValue((char) ((1 << 15) | 4)))
assertEquals(((1 << 15) | 4), container.previousAbsentValue((char) ((1 << 15) | 5)))
assertEquals(((1 << 15) | 6), container.previousAbsentValue((char) ((1 << 15) | 6)))
assertEquals(((1 << 15) | 6), container.previousAbsentValue((char) ((1 << 15) | 7)))
assertEquals(((1 << 15) | 8), container.previousAbsentValue((char) ((1 << 15) | 8)))
assertEquals(0, container.nextAbsentValue((char) 0))
assertEquals(63, container.nextAbsentValue((char) 63))
assertEquals(129, container.nextAbsentValue((char) 64))
assertEquals(129, container.nextAbsentValue((char) 65))
assertEquals(129, container.nextAbsentValue((char) 128))
assertEquals(129, container.nextAbsentValue((char) 129))
assertEquals(0, container.nextAbsentValue((char) 0))
assertEquals(63, container.nextAbsentValue((char) 63))
assertEquals(129, container.nextAbsentValue((char) 64))
assertEquals(129, container.nextAbsentValue((char) 65))
assertEquals(129, container.nextAbsentValue((char) 128))
assertEquals(129, container.nextAbsentValue((char) 129))
assertEquals(199, container.nextAbsentValue((char) 199))
assertEquals(501, container.nextAbsentValue((char) 200))
assertEquals(501, container.nextAbsentValue((char) 250))
assertEquals(2500, container.nextAbsentValue((char) 2500))
assertEquals(5201, container.nextAbsentValue((char) 5000))
assertEquals(5201, container.nextAbsentValue((char) 5200))
assertEquals(9, container.nextAbsentValue((char) 9))
assertEquals(11, container.nextAbsentValue((char) 10))
assertEquals(11, container.nextAbsentValue((char) 11))
assertEquals(21, container.nextAbsentValue((char) 21))
assertEquals(31, container.nextAbsentValue((char) 30))
assertEquals(((1 << 15) | 4), container.nextAbsentValue((char) ((1 << 15) | 4)))
assertEquals(((1 << 15) | 6), container.nextAbsentValue((char) ((1 << 15) | 5)))
assertEquals(((1 << 15) | 6), container.nextAbsentValue((char) ((1 << 15) | 6)))
assertEquals(((1 << 15) | 8), container.nextAbsentValue((char) ((1 << 15) | 7)))
assertEquals(((1 << 15) | 8), container.nextAbsentValue((char) ((1 << 15) | 8)))
assertEquals(0xAAAAAAAAAAAAAAAAL, bits[0])
assertEquals(0L, bits[0])
assertEquals(0xAAAAAAAAAAAAAAAAL, bits[0])
assertEquals(-1L, bits[0])
assertEquals(3, it2.nextBatch(buffer))
assertArrayEquals(c1, Arrays.copyOfRange(buffer, 0, 3))
assertEquals(2, it2.nextBatch(buffer))
assertArrayEquals(c2, Arrays.copyOfRange(buffer, 0, 2))
assertEquals(0, it2.nextBatch(buffer))
assertEquals(3, it1.nextBatch(buffer))
assertArrayEquals(c1, Arrays.copyOfRange(buffer, 0, 3))
assertEquals(2, it1.nextBatch(buffer))
assertArrayEquals(c2, Arrays.copyOfRange(buffer, 0, 2))
assertEquals(0, it1.nextBatch(buffer))
assertNotNull(tmbcClone)
assertEquals(tmbcList, tmbcCloneList)
assertEquals(new MappeableBitmapContainer().getContainerName(), MappeableContainer.ContainerNames[0])
assertEquals(new MappeableArrayContainer().getContainerName(), MappeableContainer.ContainerNames[1])
assertEquals(new MappeableRunContainer().getContainerName(), MappeableContainer.ContainerNames[2])
assertTrue(checkContent(c, s))
assertTrue(c1 instanceof MappeableArrayContainer)
assertEquals(14, c1.getCardinality())
assertTrue(checkContent(c1, new char[] { 0, 2, 4, (char) 65190, (char) 65191, (char) 65192, (char) 65193, (char) 65194, (char) 65195, (char) 65196, (char) 65197, (char) 65198, (char) 65199, (char) 65200 }))
assertTrue(c instanceof MappeableRunContainer)
assertTrue(c1 instanceof MappeableRunContainer)
assertEquals(16, c1.getCardinality())
assertTrue(checkContent(c1, new char[] { 1, 2, 3, 4, 5, (char) 65190, (char) 65191, (char) 65192, (char) 65193, (char) 65194, (char) 65195, (char) 65196, (char) 65197, (char) 65198, (char) 65199, (char) 65200 }))
assertTrue(checkContent(c, s))
assertTrue(checkContent(c, content))
assertTrue(c instanceof MappeableRunContainer)
assertTrue(c instanceof MappeableRunContainer)
assertTrue(checkContent(c, content))
assertTrue(c.contains((char) 3) && !c.contains((char) 4))
assertEquals(32768, c.getCardinality())
assertTrue(c instanceof MappeableArrayContainer)
assertEquals(999 - 4 + 1 - 3 + 2, c.getCardinality())
assertTrue(checkContent(c, content))
assertTrue(c instanceof MappeableRunContainer)
assertEquals(995, c.getCardinality())
assertTrue(checkContent(c, content))
assertTrue(c instanceof MappeableBitmapContainer)
assertEquals(31773, c.getCardinality())
assertTrue(c instanceof MappeableBitmapContainer)
assertTrue(checkContent(c, content))
assertTrue(c instanceof MappeableRunContainer)
assertEquals(31773, c.getCardinality())
assertTrue(c instanceof MappeableRunContainer)
assertTrue(checkContent(c, content))
assertTrue(c instanceof MappeableBitmapContainer)
assertEquals(32762, c.getCardinality())
assertTrue(c instanceof MappeableBitmapContainer)
assertTrue(checkContent(c, content))
assertEquals(1773, c.getCardinality())
assertTrue(checkContent(c, content))
assertTrue(c instanceof MappeableArrayContainer)
assertEquals(10, c.getCardinality())
assertTrue(c instanceof MappeableArrayContainer)
assertTrue(checkContent(c, content))
assertTrue(checkContent(c1, s))
assertTrue(checkContent(c, content))
assertTrue(c1 instanceof MappeableArrayContainer)
assertEquals(40 + 58, c1.getCardinality())
assertTrue(checkContent(c1, rightAns))
assertTrue(c1 instanceof MappeableArrayContainer)
assertEquals(40 + 58, c1.getCardinality())
assertTrue(checkContent(c1, rightAns))
assertTrue(checkContent(c1, s))
assertTrue(checkContent(c, content))
assertTrue(checkContent(c2, content))
assertTrue(checkContent(c2, content))
assertTrue(c1.contains((char) 3) && !c1.contains((char) 4))
assertEquals(32768, c1.getCardinality())
assertTrue(c1 instanceof MappeableArrayContainer)
assertEquals(999 - 4 + 1 - 3 + 2, c1.getCardinality())
assertTrue(checkContent(c2, content))
assertTrue(c1 instanceof MappeableRunContainer)
assertEquals(995, c1.getCardinality())
assertTrue(checkContent(c2, content))
assertTrue(c1 instanceof MappeableBitmapContainer)
assertEquals(31773, c1.getCardinality())
assertTrue(c2 instanceof MappeableBitmapContainer)
assertTrue(checkContent(c2, content))
assertTrue(c1 instanceof MappeableBitmapContainer)
assertEquals(32762, c1.getCardinality())
assertTrue(c2 instanceof MappeableBitmapContainer)
assertTrue(checkContent(c2, content))
assertEquals(1773, c1.getCardinality())
assertTrue(checkContent(c2, content))
assertTrue(c1 instanceof MappeableRunContainer)
assertTrue(c1 instanceof MappeableRunContainer)
assertEquals(1773, c1.getCardinality())
assertTrue(c2 instanceof MappeableRunContainer)
assertTrue(checkContent(c2, content))
assertTrue(c1 instanceof MappeableBitmapContainer)
assertEquals(32773, c1.getCardinality())
assertTrue(c2 instanceof MappeableBitmapContainer)
assertTrue(checkContent(c2, content))
assertTrue(c1 instanceof MappeableBitmapContainer)
assertEquals(32438, c1.getCardinality())
assertTrue(c2 instanceof MappeableBitmapContainer)
assertTrue(checkContent(c2, content))
assertEquals(rc.numberOfRuns(), ac.numberOfRuns())
assertEquals(rc.numberOfRuns(), bc.numberOfRuns())
assertEquals(10 - 4 + 1, c.getCardinality())
assertTrue(checkContent(c, new char[] { 4, 5, 6, 7, 8, 9, 10 }))
assertTrue(c instanceof MappeableRunContainer)
assertTrue(checkContent(c, new char[] { 4, 5, 6, 7, 8, 9, 10 }))
assertEquals(35000 - 1000 + 1, c.getCardinality())
assertTrue(checkContent(c, s))
assertTrue(checkContent(c, s))
assertEquals(c.getCardinality(), 4096)
assertTrue(c instanceof MappeableArrayContainer)
assertEquals(c.getCardinality(), 4096)
assertTrue(c instanceof MappeableArrayContainer)
assertEquals(c.getCardinality(), 4097)
assertTrue(c instanceof MappeableBitmapContainer)
assertEquals(c.getCardinality(), 4096)
assertTrue(c instanceof MappeableArrayContainer)
assertEquals(c.getCardinality(), 4096)
assertTrue(c instanceof MappeableRunContainer)
assertEquals(c.getCardinality(), 1)
assertTrue(c instanceof MappeableArrayContainer)
assertEquals(expected, ac.toString())
assertEquals(expected, bc.toString())
assertEquals(expected, normalizedRCstr)
assertEquals(value, expected++)
assertEquals(cardinality.value, bitmap.getCardinality())
assertEquals(value, expected)
assertEquals(cardinality.value, bitmap.getCardinality())
assertEquals(value, expected)
assertEquals(cardinality.value, bitmap.getCardinality())
assertFalse(iterator.hasNext())
assertFalse(iterator.hasNext())
assertFalse(iterator.hasNext())
assertFalse(iterator.hasNext())
assertFalse(iterator.hasNext())
assertFalse(iterator.hasNext())
assertFalse(iterator.hasNext())
assertFalse(ir.contains(5))
assertFalse(small.isHammingSimilar(big, 1))
assertFalse(big.isHammingSimilar(small, 1))
assertFalse(baseline.isHammingSimilar(shifted, 0))
assertFalse(baseline.isHammingSimilar(other, 0))
assertFalse(baseline.isHammingSimilar(other, 1))
assertFalse(baseline.isHammingSimilar(other, 2))
assertFalse(bitmap.contains(1L, 1_000_001L))
assertFalse(bitmap.contains(1L, 999_999L))
assertFalse(bitmap.contains(1L, 999_999L))
assertFalse(bitmap.contains(2_000_001L, 10_000_000L))
assertFalse(bitmap.contains(2, 8))
assertFalse(bitmap.contains(0, 6))
assertFalse(bitmap.contains(0, 1))
assertFalse(bitmap.contains(6, 10))
assertFalse(bitmap.contains(7, 1 << 16))
assertFalse(bitmap.contains(1 << 17, 1 << 19))
assertFalse(bitmap.contains(0L, 2_000_000L))
assertFalse(bitmap.contains(0L, 2L))
assertFalse(bitmap.contains(1L << 31, 1L << 32))
assertFalse(rc.equals(ac))
assertFalse(ac.equals(rc))
assertFalse(rc.equals(ac))
assertFalse(ac.equals(rc))
assertFalse(rc.equals(ac))
assertFalse(ac.equals(rc))
assertFalse(rc.equals(ac))
assertFalse(ac.equals(rc))
assertFalse(new MappeableArrayContainer().add('a').isFull())
assertFalse(container.intersects(11, lower16Bits(-1)))
assertFalse(container.intersects(0, 1))
assertFalse(container.intersects(lower16Bits(-100), lower16Bits(-55)))
assertFalse(container.intersects(lower16Bits(-9), lower16Bits(-1)))
assertFalse(container.intersects(2, 300))
assertFalse(container.intersects(2, 299))
assertFalse(container.intersects(1025, 1 << 16))
assertFalse(ac.contains(1, 21))
assertFalse(ac.contains(1, 19))
assertFalse(ac.contains(21, 101))
assertFalse(ac.contains(19, 99))
assertFalse(ac.contains(190, 9999))
assertFalse(ac.contains(1, 21))
assertFalse(ac.contains(1, 20))
assertFalse(ac.contains(1 + (1 << 15), (1 << 8 | 1 << 15) + 1))
assertFalse(ac.contains((1 << 15) - 1, (1 << 8 | 1 << 15) - 1))
assertFalse(ac.contains(0, 1 << 15))
assertFalse(ac.contains(1 << 8 | 1 << 15 | 1, 1 << 16))
assertFalse(bc.isArrayBacked())
assertEquals(expected, BufferUtil.cardinalityInBitmapRange(bc.bitmap, begin, end))
assertFalse(iter.hasNext())
assertFalse(reverseIter.hasNext())
assertEquals(bitmap.getCardinality(), intIteratorCopy.size())
assertEquals(bitmap.getCardinality(), reverseIntIteratorCopy.size())
assertEquals(Ints.asList(data), intIteratorCopy)
assertEquals(Lists.reverse(Ints.asList(data)), reverseIntIteratorCopy)
assertEquals(iter.peekNext(), data[0])
assertEquals(iter.peekNext(), data[0])
assertEquals(bitmap.getCardinality(), intIteratorCopy.size())
assertEquals(bitmap.getCardinality(), reverseIntIteratorCopy.size())
assertEquals(Ints.asList(data), intIteratorCopy)
assertEquals(Lists.reverse(Ints.asList(data)), reverseIntIteratorCopy)
assertEquals(bitmap.getCardinality(), intIteratorCopy.size())
assertEquals(bitmap.getCardinality(), reverseIntIteratorCopy.size())
assertEquals(Ints.asList(data), intIteratorCopy)
assertEquals(Lists.reverse(Ints.asList(data)), reverseIntIteratorCopy)
assertEquals(bitmap.getCardinality(), intIteratorCopy.size())
assertEquals(bitmap.getCardinality(), reverseIntIteratorCopy.size())
assertEquals(Ints.asList(data), intIteratorCopy)
assertEquals(Lists.reverse(Ints.asList(data)), reverseIntIteratorCopy)
assertEquals(ImmutableList.of(1, 2, 3), intIteratorCopy)
assertEquals(ImmutableList.of(3, 2, 1), reverseIntIteratorCopy)
assertEquals(ImmutableRoaringBitmap.intersects(bitmap, test), bitmap.intersects(minimum, supremum))
assertEquals(MutableRoaringBitmap.intersects(bitmap, test), bitmap.intersects(minimum, supremum))
assertEquals(!test.isEmpty() && bitmap.contains(test), bitmap.contains(minimum, supremum))
assertTrue(test.isEmpty() || test.contains(minimum, supremum))
assertTrue(!contains || intersects)
assertEquals("[32200,34999][65535,65535]", rc.toString())
assertEquals(m2.getCardinality(), count)
assertEquals(mrb.getCardinality(), count)
assertTrue(m2.serializedSizeInBytes() < mrb.serializedSizeInBytes())
assertEquals(m2, mrb)
assertEquals(toMapped(m2), mrb)
assertEquals(toMapped(m2), toMapped(mrb))
assertEquals(m2, toMapped(mrb))
assertEquals(r1, b1)
assertEquals(r2, b2)
assertEquals(r3, b3)
assertEquals(r4, b4)
assertEquals(r5, b5)
assertEquals(r6, b6)
assertEquals(r7, b7)
assertEquals(12, container.getSizeInBytes())
assertEquals(4, container.getCardinality())
assertTrue(container.contains((char) 0))
assertTrue(container.contains((char) 1))
assertTrue(container.contains((char) 2))
assertTrue(container.contains((char) 55))
assertNotSame(container, newContainer)
assertEquals(20, newContainer.getCardinality())
assertEquals(8, newContainer.getSizeInBytes())
assertNotSame(container, newContainer)
assertEquals(20, newContainer.getCardinality())
assertEquals(8, newContainer.getSizeInBytes())
assertNotSame(container, newContainer)
assertEquals(90, newContainer.getCardinality())
assertNotSame(container, newContainer)
assertEquals(92, newContainer.getCardinality())
assertTrue(newContainer.contains((char) 1))
assertTrue(newContainer.contains((char) 256))
assertNotSame(container, newContainer)
assertEquals(119, newContainer.getCardinality())
assertNotSame(container, newContainer)
assertEquals(90, newContainer.getCardinality())
assertNotSame(container, newContainer)
assertEquals(92, newContainer.getCardinality())
assertEquals(rc, result)
assertEquals(1, result.getCardinality())
assertTrue(result.contains((char) 1))
assertEquals(0, result.getCardinality())
assertEquals(100, intersectionNOT.getCardinality())
assertEquals(200, bc.getCardinality())
assertEquals(200, rc.getCardinality())
assertEquals(100, intersectionNOT.getCardinality())
assertEquals(200, ac.getCardinality())
assertEquals(200, rc.getCardinality())
assertEquals(1, rc.getCardinality())
assertEquals(0, rc.getCardinality())
assertEquals(ac, ar)
assertEquals(ac, ar)
assertEquals(0, array[0])
assertEquals(1, array[1])
assertEquals(3, array[2])
assertEquals(12, array[3])
assertTrue(rc.contains((char) 1))
assertEquals(40, rc.getCardinality())
assertEquals(12, rc.getSizeInBytes())
assertEquals(30, rc.getCardinality())
assertEquals(12, rc.getSizeInBytes())
assertEquals(30, rc.getCardinality())
assertEquals(8, rc.getSizeInBytes())
assertEquals(35, rc.getCardinality())
assertEquals(8, rc.getSizeInBytes())
assertEquals(40, rc.getCardinality())
assertEquals(12, rc.getSizeInBytes())
assertEquals(40, rc.getCardinality())
assertEquals(12, rc.getSizeInBytes())
assertEquals(40, rc.getCardinality())
assertEquals(12, rc.getSizeInBytes())
assertEquals(35, rc.getCardinality())
assertEquals(16, rc.getSizeInBytes())
assertEquals(40, rc.getCardinality())
assertEquals(12, rc.getSizeInBytes())
assertEquals(35, rc.getCardinality())
assertEquals(16, rc.getSizeInBytes())
assertEquals(45, rc.getCardinality())
assertEquals(12, rc.getSizeInBytes())
assertEquals(20, container.getCardinality())
assertEquals(8, container.getSizeInBytes())
assertEquals(119, container.getCardinality())
assertEquals(90, container.getCardinality())
assertEquals(ac, ac.and(rc))
assertEquals(ac, rc.and(ac))
assertEquals(ac, ac.and(rc))
assertEquals(ac, rc.and(ac))
assertEquals(0, rc.and(ac).getCardinality())
assertEquals(100, intersection.getCardinality())
assertEquals(200, bc.getCardinality())
assertEquals(200, rc.getCardinality())
assertEquals(256, rc1.getCardinality())
assertEquals(0, rc.getCardinality())
assertEquals(5, rc.getCardinality())
assertEquals(8, rc.getSizeInBytes())
assertEquals(0, rc.getCardinality())
assertEquals(0, rc.getCardinality())
assertEquals(10, rc.getCardinality())
assertEquals(12, rc.getSizeInBytes())
assertEquals(5, rc.getCardinality())
assertEquals(8, rc.getSizeInBytes())
assertEquals(10, rc.getCardinality())
assertEquals(12, rc.getSizeInBytes())
assertEquals(5, rc.getCardinality())
assertEquals(8, rc.getSizeInBytes())
assertEquals(rc.getCardinality(), 0)
assertEquals(9, rc.getCardinality())
assertEquals(8, rc.getSizeInBytes())
assertEquals(19, rc.getCardinality())
assertEquals(12, rc.getSizeInBytes())
assertEquals(5, rc.getCardinality())
assertEquals(8, rc.getSizeInBytes())
assertEquals(0, rc.getCardinality())
assertEquals(5, rc.getCardinality())
assertEquals(8, rc.getSizeInBytes())
assertEquals(0, rc.getCardinality())
assertEquals(14, rc.getCardinality())
assertEquals(12, rc.getSizeInBytes())
assertEquals(19, rc.getCardinality())
assertEquals(12, rc.getSizeInBytes())
assertNotSame(container, limit)
assertEquals(container, limit)
assertNotSame(container, limit)
assertEquals(3, limit.getCardinality())
assertTrue(limit.contains((char) 0))
assertTrue(limit.contains((char) 2))
assertTrue(limit.contains((char) 55))
assertTrue(atLeastOneArray)
assertTrue(atLeastOneArray)
assertEquals(new MappeableArrayContainer(CharBuffer.wrap(new char[] { 0, 2, 4, 15, 16, 48, 50, 80 }), 8), ac.andNot(rc))
assertEquals(new MappeableArrayContainer(), ac.andNot(rc))
assertEquals(new MappeableArrayContainer(), ac.andNot(rc))
assertTrue(atLeastOneArray)
assertTrue(atLeastOneArray)
assertNotSame(container, result)
assertEquals(container, result)
assertEquals(5, result.getCardinality())
assertEquals(7, result.getCardinality())
assertEquals(9, result.getCardinality())
assertEquals(2, result.getCardinality())
assertEquals(10, result.getCardinality())
assertTrue(result instanceof MappeableRunContainer)
assertEquals(5, result.getCardinality())
assertEquals(4, result.getCardinality())
assertEquals(8, result.getCardinality())
assertEquals(8, result.getCardinality())
assertEquals(2, result.getCardinality())
assertEquals(4, result.getCardinality())
assertEquals(5, result.getCardinality())
assertEquals(4, result.getCardinality())
assertEquals(1, container.rank((char) 0))
assertEquals(2, container.rank((char) 10))
assertEquals(4, container.rank((char) 128))
assertEquals(5, container.rank((char) 1024))
assertTrue(container instanceof MappeableRunContainer)
assertEquals(16, container.rank((char) 32))
assertEquals(0, newContainer.getCardinality())
assertEquals(0, container.select(0))
assertEquals(2, container.select(1))
assertEquals(55, container.select(2))
assertEquals(64, container.select(3))
assertEquals(256, container.select(4))
assertEquals(answer.getCardinality(), array1.length)
assertEquals(1, setWithOptimize.size())
assertEquals(1, setWithoutOptimize.size())
assertTrue(ac instanceof MappeableArrayContainer)
assertEquals(DEFAULT_MAX_SIZE / 2, ac.getCardinality())
assertTrue(bc instanceof MappeableBitmapContainer)
assertEquals(2 * DEFAULT_MAX_SIZE, bc.getCardinality())
assertEquals(200, union.getCardinality())
assertEquals(100, bc.getCardinality())
assertEquals(100, rc.getCardinality())
assertEquals(2 * N, union.getCardinality())
assertEquals(N, ac.getCardinality())
assertEquals(N, rc.getCardinality())
assertEquals(4 * DEFAULT_MAX_SIZE, result.getCardinality())
assertEquals(4 * DEFAULT_MAX_SIZE, bc.getCardinality())
assertEquals(4 * DEFAULT_MAX_SIZE, rc.getCardinality())
assertEquals(4 * DEFAULT_MAX_SIZE, result.getCardinality())
assertEquals(4 * DEFAULT_MAX_SIZE, bc.getCardinality())
assertEquals(4 * DEFAULT_MAX_SIZE, rc.getCardinality())
assertEquals(1, result.getCardinality())
assertTrue(result.contains((char) 1))
assertEquals(1, result.getCardinality())
assertTrue(result.contains((char) 1))
assertEquals(1, result.getCardinality())
assertTrue(result.contains((char) 1))
assertEquals(1, result.getCardinality())
assertTrue(result.contains((char) 1))
assertEquals(0, result.getCardinality())
assertEquals(0, result.getCardinality())
assertEquals(answer, result)
assertEquals(1, rc.getCardinality())
assertEquals(13, rc.getCardinality())
assertEquals(1 << 16, rc.getCardinality())
assertEquals(1, rc.getCardinality())
assertEquals(1 << 16, rc.getCardinality())
assertEquals(1, rc1.getCardinality())
assertEquals(13, rc1.getCardinality())
assertEquals(1 << 16, rc1.getCardinality())
assertTrue(rc1.intersects(rc2))
assertTrue(rc.intersects(ac))
assertEquals(roaringWithRun.first(), 32768)
assertTrue(rc.contains(subset))
assertTrue(rc.contains(subset))
assertTrue(rc.contains(subset))
assertTrue(rc.contains(subset))
assertTrue(rc.contains(subset))
assertTrue(rc.contains(subset))
assertTrue(rc.contains(subset))
assertTrue(rc.contains(subset))
assertTrue(rc.contains(subset))
assertTrue(rc.contains(subset))
assertTrue(rc.contains(subset))
assertTrue(rc.contains(subset))
assertEquals(rc, ac)
assertEquals(ac, rc)
assertNotEquals(rc, ac)
assertNotEquals(ac, rc)
assertNotEquals(rc, ac)
assertNotEquals(ac, rc)
assertNotEquals(rc, ac)
assertNotEquals(ac, rc)
assertNotEquals(rc, ac)
assertNotEquals(ac, rc)
assertNotEquals(full, new MappeableArrayContainer().add(0, 10))
assertTrue(MappeableRunContainer.full().isFull())
assertTrue(full.isFull())
assertEquals(65536, full.getCardinality())
assertEquals(983, c.getCardinality())
assertEquals(a, b)
assertEquals(45679, c.getCardinality())
assertEquals(2, c.getCardinality())
assertTrue(container.intersects(0, 1))
assertTrue(container.intersects(0, 101))
assertTrue(container.intersects(0, 1 << 16))
assertTrue(container.intersects(0, lower16Bits(-40)))
assertTrue(container.intersects(11, 1 << 16))
assertTrue(container.intersects(0, 1))
assertTrue(container.intersects(0, 101))
assertTrue(container.intersects(0, lower16Bits(-1)))
assertTrue(container.intersects(11, lower16Bits(-1)))
assertTrue(container.intersects(0, lower16Bits(-40)))
assertTrue(container.intersects(11, 1 << 16))
assertTrue(MappeableRunContainer.full().contains(0, 1 << 16))
assertTrue(rc.contains(1, 100))
assertTrue(rc.contains(1, 99))
assertTrue(rc.contains(2, 100))
assertTrue(rc.contains(5000, 10000))
assertTrue(rc.contains(5000, 9999))
assertTrue(rc.contains(5001, 9999))
assertTrue(rc.contains(5001, 10000))
assertTrue(rc.contains(1, 100))
assertTrue(rc.contains(1, 99))
assertTrue(rc.contains(300, 400))
assertTrue(rc.contains(2, 100))
assertTrue(rc.contains(5000, 10000))
assertTrue(rc.contains(5000, 9999))
assertTrue(rc.contains(5001, 9999))
assertTrue(rc.contains(5001, 10000))
assertTrue(rc.contains(502, 600))
assertTrue(rc.contains(9999, 10000))
assertEquals(64, container.nextValue((char) 0))
assertEquals(64, container.nextValue((char) 64))
assertEquals(65, container.nextValue((char) 65))
assertEquals(128, container.nextValue((char) 128))
assertEquals(-1, container.nextValue((char) 129))
assertEquals(64, container.nextValue((char) 0))
assertEquals(64, container.nextValue((char) 64))
assertEquals(65, container.nextValue((char) 65))
assertEquals(128, container.nextValue((char) 128))
assertEquals(256, container.nextValue((char) 129))
assertEquals(-1, container.nextValue((char) 512))
assertEquals(64, container.nextValue((char) 0))
assertEquals(64, container.nextValue((char) 63))
assertEquals(64, container.nextValue((char) 64))
assertEquals(65, container.nextValue((char) 65))
assertEquals(128, container.nextValue((char) 128))
assertEquals(200, container.nextValue((char) 129))
assertEquals(200, container.nextValue((char) 199))
assertEquals(200, container.nextValue((char) 200))
assertEquals(250, container.nextValue((char) 250))
assertEquals(5000, container.nextValue((char) 2500))
assertEquals(5000, container.nextValue((char) 5000))
assertEquals(5200, container.nextValue((char) 5200))
assertEquals(-1, container.nextValue((char) 5201))
assertEquals(-1, container.previousValue((char) 0))
assertEquals(-1, container.previousValue((char) 63))
assertEquals(64, container.previousValue((char) 64))
assertEquals(65, container.previousValue((char) 65))
assertEquals(128, container.previousValue((char) 128))
assertEquals(128, container.previousValue((char) 129))
assertEquals(-1, container.previousValue((char) 0))
assertEquals(-1, container.previousValue((char) 63))
assertEquals(64, container.previousValue((char) 64))
assertEquals(65, container.previousValue((char) 65))
assertEquals(128, container.previousValue((char) 128))
assertEquals(128, container.previousValue((char) 129))
assertEquals(128, container.previousValue((char) 199))
assertEquals(200, container.previousValue((char) 200))
assertEquals(250, container.previousValue((char) 250))
assertEquals(500, container.previousValue((char) 2500))
assertEquals(5000, container.previousValue((char) 5000))
assertEquals(5200, container.previousValue((char) 5200))
assertEquals(-1, container.previousValue((char) ((1 << 15) | 4)))
assertEquals(((1 << 15) | 5), container.previousValue((char) ((1 << 15) | 5)))
assertEquals(((1 << 15) | 5), container.previousValue((char) ((1 << 15) | 6)))
assertEquals(((1 << 15) | 7), container.previousValue((char) ((1 << 15) | 7)))
assertEquals(((1 << 15) | 7), container.previousValue((char) ((1 << 15) | 8)))
assertEquals(((1 << 15) | 5), container.nextValue((char) ((1 << 15) | 4)))
assertEquals(((1 << 15) | 5), container.nextValue((char) ((1 << 15) | 5)))
assertEquals(((1 << 15) | 7), container.nextValue((char) ((1 << 15) | 6)))
assertEquals(((1 << 15) | 7), container.nextValue((char) ((1 << 15) | 7)))
assertEquals(-1, container.nextValue((char) ((1 << 15) | 8)))
assertEquals(0, container.previousAbsentValue((char) 0))
assertEquals(63, container.previousAbsentValue((char) 63))
assertEquals(63, container.previousAbsentValue((char) 64))
assertEquals(63, container.previousAbsentValue((char) 65))
assertEquals(63, container.previousAbsentValue((char) 128))
assertEquals(129, container.previousAbsentValue((char) 129))
assertEquals(0, container.previousAbsentValue((char) 0))
assertEquals(63, container.previousAbsentValue((char) 63))
assertEquals(63, container.previousAbsentValue((char) 64))
assertEquals(63, container.previousAbsentValue((char) 65))
assertEquals(63, container.previousAbsentValue((char) 128))
assertEquals(129, container.previousAbsentValue((char) 129))
assertEquals(199, container.previousAbsentValue((char) 199))
assertEquals(199, container.previousAbsentValue((char) 200))
assertEquals(199, container.previousAbsentValue((char) 250))
assertEquals(2500, container.previousAbsentValue((char) 2500))
assertEquals(4999, container.previousAbsentValue((char) 5000))
assertEquals(4999, container.previousAbsentValue((char) 5200))
assertEquals(9, container.previousAbsentValue((char) 9))
assertEquals(9, container.previousAbsentValue((char) 10))
assertEquals(11, container.previousAbsentValue((char) 11))
assertEquals(21, container.previousAbsentValue((char) 21))
assertEquals(29, container.previousAbsentValue((char) 30))
assertEquals(((1 << 15) | 4), container.previousAbsentValue((char) ((1 << 15) | 4)))
assertEquals(((1 << 15) | 4), container.previousAbsentValue((char) ((1 << 15) | 5)))
assertEquals(((1 << 15) | 6), container.previousAbsentValue((char) ((1 << 15) | 6)))
assertEquals(((1 << 15) | 6), container.previousAbsentValue((char) ((1 << 15) | 7)))
assertEquals(((1 << 15) | 8), container.previousAbsentValue((char) ((1 << 15) | 8)))
assertEquals(0, container.nextAbsentValue((char) 0))
assertEquals(63, container.nextAbsentValue((char) 63))
assertEquals(129, container.nextAbsentValue((char) 64))
assertEquals(129, container.nextAbsentValue((char) 65))
assertEquals(129, container.nextAbsentValue((char) 128))
assertEquals(129, container.nextAbsentValue((char) 129))
assertEquals(0, container.nextAbsentValue((char) 0))
assertEquals(63, container.nextAbsentValue((char) 63))
assertEquals(129, container.nextAbsentValue((char) 64))
assertEquals(129, container.nextAbsentValue((char) 65))
assertEquals(129, container.nextAbsentValue((char) 128))
assertEquals(129, container.nextAbsentValue((char) 129))
assertEquals(199, container.nextAbsentValue((char) 199))
assertEquals(501, container.nextAbsentValue((char) 200))
assertEquals(501, container.nextAbsentValue((char) 250))
assertEquals(2500, container.nextAbsentValue((char) 2500))
assertEquals(5201, container.nextAbsentValue((char) 5000))
assertEquals(5201, container.nextAbsentValue((char) 5200))
assertEquals(9, container.nextAbsentValue((char) 9))
assertEquals(11, container.nextAbsentValue((char) 10))
assertEquals(11, container.nextAbsentValue((char) 11))
assertEquals(21, container.nextAbsentValue((char) 21))
assertEquals(31, container.nextAbsentValue((char) 30))
assertEquals(((1 << 15) | 4), container.nextAbsentValue((char) ((1 << 15) | 4)))
assertEquals(((1 << 15) | 6), container.nextAbsentValue((char) ((1 << 15) | 5)))
assertEquals(((1 << 15) | 6), container.nextAbsentValue((char) ((1 << 15) | 6)))
assertEquals(((1 << 15) | 8), container.nextAbsentValue((char) ((1 << 15) | 7)))
assertEquals(((1 << 15) | 8), container.nextAbsentValue((char) ((1 << 15) | 8)))
assertEquals(data3, BufferFastAggregation.naive_and(data1, data2))
assertEquals(new MutableRoaringBitmap(), BufferFastAggregation.naive_and(data4))
assertEquals(data3, BufferFastAggregation.priorityqueue_or(data1, data2))
assertEquals(data1, BufferFastAggregation.priorityqueue_or(data1))
assertEquals(data1, BufferFastAggregation.priorityqueue_or(data1, data4))
assertEquals(data3, BufferFastAggregation.priorityqueue_or(data5.iterator()))
assertEquals(new MutableRoaringBitmap(), BufferFastAggregation.priorityqueue_or(data6.iterator()))
assertEquals(data1, BufferFastAggregation.priorityqueue_or(data6.iterator()))
assertEquals(data3, BufferFastAggregation.naive_and(data1, data2))
assertEquals(new MutableRoaringBitmap(), BufferFastAggregation.naive_and(data4))
assertEquals(data3, BufferFastAggregation.priorityqueue_or(data1, data2))
assertEquals(data1, BufferFastAggregation.priorityqueue_or(data1))
assertEquals(data1, BufferFastAggregation.priorityqueue_or(data1, data4))
assertEquals(data3, BufferFastAggregation.priorityqueue_or(data5.iterator()))
assertEquals(new MutableRoaringBitmap(), BufferFastAggregation.priorityqueue_or(data6.iterator()))
assertEquals(data1, BufferFastAggregation.priorityqueue_or(data6.iterator()))
assertEquals(mrb, BufferFastAggregation.or(data1, data2, data3))
assertEquals(expected, result)
assertEquals(expected, result)
assertEquals(expected, result)
assertEquals(expected, result)
assertEquals(expected, result)
assertEquals(expected, result)
assertEquals(expected, result)
assertEquals(expected, result)
assertEquals("{5,6,7,8,9,10,11,12,13,14,65517,65533}", s)
assertEquals(0, bc.ixor(bc3).getCardinality())
assertEquals(bc, bc3)
assertEquals(bc.hashCode(), bc3.hashCode())
assertEquals(0, bc.iandNot(bc3).getCardinality())
assertEquals(0, bc3.getCardinality())
assertEquals(bc, bc2)
assertEquals(0, bc.iand(bc3).getCardinality())
assertEquals(bc, bc2)
assertEquals(bc, bc2)
assertEquals(0, bc.iandNot(rc).getCardinality())
assertEquals(0, bc.ixor(bc3).getCardinality())
assertEquals(bc, bc3)
assertEquals(bc, bc2)
assertEquals(0, bc.iand(bc3).getCardinality())
assertEquals(bc, bc2)
assertEquals(bc, bc2)
assertEquals(8280, bc.cardinality)
assertEquals(8280, bc.cardinality)
assertEquals(8677, bc.cardinality)
assertEquals(5274, bc.cardinality)
assertEquals(5274, bc.cardinality)
assertEquals(5046, bc.cardinality)
assertEquals(6031, bc.cardinality)
assertEquals(8, result.getCardinality())
assertEquals(26, result.getCardinality())
assertEquals(0, bc.getCardinality())
assertEquals(0, bc.getCardinality())
assertEquals(8182, bc.getCardinality())
assertEquals(2, bc.numberOfRuns())
assertEquals(2, bc.numberOfRuns())
assertEquals(100, bc.select(100))
assertEquals(32, bc.getCardinality())
assertEquals(32, bc.getCardinality())
assertTrue(bc.intersects(ac))
assertTrue(bc.intersects(bc2))
assertEquals(14, bc.getCardinality())
assertEquals(14, bc.getCardinality())
assertEquals(54, bc.getCardinality())
assertEquals(10, bc.getCardinality())
assertEquals(5000, bc.getCardinality())
assertEquals(value, expected++)
assertEquals(64, bc2.getCardinality())
assertEquals(1 << 16, result.getCardinality())
assertTrue(result instanceof MappeableRunContainer)
assertEquals(1 << 16, result.getCardinality())
assertTrue(result instanceof MappeableRunContainer)
assertEquals(-1, result.getCardinality())
assertEquals(-1, iresult.getCardinality())
assertEquals(1 << 16, repaired.getCardinality())
assertEquals(1 << 16, irepaired.getCardinality())
assertTrue(repaired instanceof MappeableRunContainer)
assertTrue(irepaired instanceof MappeableRunContainer)
assertEquals(1 << 16, iresult.getCardinality())
assertTrue(iresult instanceof MappeableRunContainer)
assertEquals(-1, result.getCardinality())
assertEquals(-1, iresult.getCardinality())
assertEquals(1 << 16, repaired.getCardinality())
assertEquals(1 << 16, irepaired.getCardinality())
assertTrue(repaired instanceof MappeableRunContainer)
assertTrue(irepaired instanceof MappeableRunContainer)
assertEquals(-1, result.getCardinality())
assertEquals(-1, iresult.getCardinality())
assertEquals(1 << 16, repaired.getCardinality())
assertEquals(1 << 16, irepaired.getCardinality())
assertTrue(repaired instanceof MappeableRunContainer)
assertTrue(irepaired instanceof MappeableRunContainer)
assertEquals(62, mbc.first())
assertEquals(96, mbc.last())
assertTrue(container.intersects(0, 1))
assertTrue(container.intersects(0, 101))
assertTrue(container.intersects(0, 1 << 16))
assertEquals(intersects, container.intersects(min, sup))
assertTrue(container.intersects(0, 1))
assertTrue(container.intersects(0, 101))
assertTrue(container.intersects(0, 1 << 16))
assertTrue(container.intersects(11, 1 << 16))
assertTrue(container.intersects(501, 511))
assertTrue(container.intersects(0, lower16Bits(-40)))
assertTrue(container.intersects(lower16Bits(-50), lower16Bits(-10)))
assertTrue(container.intersects(lower16Bits(-400), lower16Bits(-11)))
assertTrue(container.intersects(lower16Bits(-11), lower16Bits(-1)))
assertTrue(container.intersects(lower16Bits(-650), lower16Bits(-500)))
assertTrue(container.intersects(lower16Bits(-501), lower16Bits(-1)))
assertTrue(container.contains(0, 1))
assertTrue(container.contains(64 * 10, 64 * 11))
assertTrue(container.contains(1 + 64 * 10, (64 * 11) - 1))
assertTrue(container.contains(0, 1))
assertTrue(container.contains(64 * 10, (64 * 13) - 31))
assertTrue(container.contains(1 + 64 * 10, (64 * 13) - 32))
assertTrue(container.contains(64 * 10, 64 * 12))
assertTrue(container.contains(1 + 64 * 1023, 64 * 1024 - 1))
assertTrue(container.contains(1 + 64 * 1023, 64 * 1024 - 2))
assertTrue(container.contains(64 * 1023 + 1, 64 * 1023 + 2))
assertEquals(10, container.nextValue((char) 10))
assertEquals(20, container.nextValue((char) 11))
assertEquals(30, container.nextValue((char) 30))
assertEquals(-1, container.nextValue((char) 31))
assertEquals(64, container.nextValue((char) 0))
assertEquals(64, container.nextValue((char) 64))
assertEquals(65, container.nextValue((char) 65))
assertEquals(128, container.nextValue((char) 128))
assertEquals(-1, container.nextValue((char) 129))
assertEquals(-1, container.nextValue((char) 5000))
assertEquals(64, container.nextValue((char) 0))
assertEquals(64, container.nextValue((char) 64))
assertEquals(65, container.nextValue((char) 65))
assertEquals(128, container.nextValue((char) 128))
assertEquals(256, container.nextValue((char) 129))
assertEquals(-1, container.nextValue((char) 512))
assertEquals(64, container.nextValue((char) 0))
assertEquals(64, container.nextValue((char) 63))
assertEquals(64, container.nextValue((char) 64))
assertEquals(65, container.nextValue((char) 65))
assertEquals(128, container.nextValue((char) 128))
assertEquals(200, container.nextValue((char) 129))
assertEquals(200, container.nextValue((char) 199))
assertEquals(200, container.nextValue((char) 200))
assertEquals(250, container.nextValue((char) 250))
assertEquals(5000, container.nextValue((char) 2500))
assertEquals(5000, container.nextValue((char) 5000))
assertEquals(5200, container.nextValue((char) 5200))
assertEquals(-1, container.nextValue((char) 5201))
assertEquals(-1, container.previousValue((char) 0))
assertEquals(-1, container.previousValue((char) 63))
assertEquals(64, container.previousValue((char) 64))
assertEquals(65, container.previousValue((char) 65))
assertEquals(128, container.previousValue((char) 128))
assertEquals(128, container.previousValue((char) 129))
assertEquals(-1, container.previousValue((char) 0))
assertEquals(-1, container.previousValue((char) 63))
assertEquals(64, container.previousValue((char) 64))
assertEquals(65, container.previousValue((char) 65))
assertEquals(128, container.previousValue((char) 128))
assertEquals(128, container.previousValue((char) 129))
assertEquals(128, container.previousValue((char) 199))
assertEquals(200, container.previousValue((char) 200))
assertEquals(250, container.previousValue((char) 250))
assertEquals(500, container.previousValue((char) 2500))
assertEquals(5000, container.previousValue((char) 5000))
assertEquals(5200, container.previousValue((char) 5200))
assertEquals(-1, container.previousValue((char) 5))
assertEquals(-1, container.previousValue((char) 9))
assertEquals(10, container.previousValue((char) 10))
assertEquals(10, container.previousValue((char) 11))
assertEquals(20, container.previousValue((char) 21))
assertEquals(30, container.previousValue((char) 30))
assertEquals(30, container.previousValue((char) 31))
assertEquals(0, container.previousValue((char) 0))
assertEquals(0, container.previousValue((char) 1))
assertEquals(2, container.previousValue((char) 2))
assertEquals(2, container.previousValue((char) 3))
assertEquals(-1, container.previousValue((char) ((1 << 15) | 4)))
assertEquals(((1 << 15) | 5), container.previousValue((char) ((1 << 15) | 5)))
assertEquals(((1 << 15) | 5), container.previousValue((char) ((1 << 15) | 6)))
assertEquals(((1 << 15) | 7), container.previousValue((char) ((1 << 15) | 7)))
assertEquals(((1 << 15) | 7), container.previousValue((char) ((1 << 15) | 8)))
assertEquals(((1 << 15) | 5), container.nextValue((char) ((1 << 15) | 4)))
assertEquals(((1 << 15) | 5), container.nextValue((char) ((1 << 15) | 5)))
assertEquals(((1 << 15) | 7), container.nextValue((char) ((1 << 15) | 6)))
assertEquals(((1 << 15) | 7), container.nextValue((char) ((1 << 15) | 7)))
assertEquals(-1, container.nextValue((char) ((1 << 15) | 8)))
assertEquals(0, container.previousAbsentValue((char) 0))
assertEquals(63, container.previousAbsentValue((char) 63))
assertEquals(63, container.previousAbsentValue((char) 64))
assertEquals(63, container.previousAbsentValue((char) 65))
assertEquals(63, container.previousAbsentValue((char) 128))
assertEquals(129, container.previousAbsentValue((char) 129))
assertEquals(0, container.previousAbsentValue((char) 0))
assertEquals(63, container.previousAbsentValue((char) 63))
assertEquals(63, container.previousAbsentValue((char) 64))
assertEquals(63, container.previousAbsentValue((char) 65))
assertEquals(63, container.previousAbsentValue((char) 128))
assertEquals(129, container.previousAbsentValue((char) 129))
assertEquals(199, container.previousAbsentValue((char) 199))
assertEquals(199, container.previousAbsentValue((char) 200))
assertEquals(199, container.previousAbsentValue((char) 250))
assertEquals(2500, container.previousAbsentValue((char) 2500))
assertEquals(4999, container.previousAbsentValue((char) 5000))
assertEquals(4999, container.previousAbsentValue((char) 5200))
assertEquals(9, container.previousAbsentValue((char) 9))
assertEquals(9, container.previousAbsentValue((char) 10))
assertEquals(11, container.previousAbsentValue((char) 11))
assertEquals(21, container.previousAbsentValue((char) 21))
assertEquals(29, container.previousAbsentValue((char) 30))
assertEquals(((1 << 15) | 4), container.previousAbsentValue((char) ((1 << 15) | 4)))
assertEquals(((1 << 15) | 4), container.previousAbsentValue((char) ((1 << 15) | 5)))
assertEquals(((1 << 15) | 6), container.previousAbsentValue((char) ((1 << 15) | 6)))
assertEquals(((1 << 15) | 6), container.previousAbsentValue((char) ((1 << 15) | 7)))
assertEquals(((1 << 15) | 8), container.previousAbsentValue((char) ((1 << 15) | 8)))
assertEquals(0, container.nextAbsentValue((char) 0))
assertEquals(63, container.nextAbsentValue((char) 63))
assertEquals(129, container.nextAbsentValue((char) 64))
assertEquals(129, container.nextAbsentValue((char) 65))
assertEquals(129, container.nextAbsentValue((char) 128))
assertEquals(129, container.nextAbsentValue((char) 129))
assertEquals(0, container.nextAbsentValue((char) 0))
assertEquals(63, container.nextAbsentValue((char) 63))
assertEquals(129, container.nextAbsentValue((char) 64))
assertEquals(129, container.nextAbsentValue((char) 65))
assertEquals(129, container.nextAbsentValue((char) 128))
assertEquals(129, container.nextAbsentValue((char) 129))
assertEquals(199, container.nextAbsentValue((char) 199))
assertEquals(501, container.nextAbsentValue((char) 200))
assertEquals(501, container.nextAbsentValue((char) 250))
assertEquals(2500, container.nextAbsentValue((char) 2500))
assertEquals(5201, container.nextAbsentValue((char) 5000))
assertEquals(5201, container.nextAbsentValue((char) 5200))
assertEquals(9, container.nextAbsentValue((char) 9))
assertEquals(11, container.nextAbsentValue((char) 10))
assertEquals(11, container.nextAbsentValue((char) 11))
assertEquals(21, container.nextAbsentValue((char) 21))
assertEquals(31, container.nextAbsentValue((char) 30))
assertEquals(((1 << 15) | 4), container.nextAbsentValue((char) ((1 << 15) | 4)))
assertEquals(((1 << 15) | 6), container.nextAbsentValue((char) ((1 << 15) | 5)))
assertEquals(((1 << 15) | 6), container.nextAbsentValue((char) ((1 << 15) | 6)))
assertEquals(((1 << 15) | 8), container.nextAbsentValue((char) ((1 << 15) | 7)))
assertEquals(((1 << 15) | 8), container.nextAbsentValue((char) ((1 << 15) | 8)))
assertEquals(0xAAAAAAAAAAAAAAAAL, bits[0])
assertEquals(0L, bits[0])
assertEquals(0xAAAAAAAAAAAAAAAAL, bits[0])
assertEquals(-1L, bits[0])
assertTrue(Arrays.equals(content, result))
assertTrue(BufferUtil.unsignedIntersects(data1, data1.limit(), data3, data3.limit()))
assertEquals(1, BufferUtil.advanceUntil(data, -1, data.limit(), (char) 3))
assertEquals(5, BufferUtil.advanceUntil(data, -1, data.limit(), (char) 28))
assertEquals(5, BufferUtil.advanceUntil(data, -1, data.limit(), (char) 29))
assertEquals(7, BufferUtil.advanceUntil(data, -1, data.limit(), (char) -342))
assertEquals(1, BufferUtil.iterateUntil(data, 0, data.limit(), ((char) 3)))
assertEquals(5, BufferUtil.iterateUntil(data, 0, data.limit(), ((char) 28)))
assertEquals(5, BufferUtil.iterateUntil(data, 0, data.limit(), ((char) 29)))
assertEquals(7, BufferUtil.iterateUntil(data, 0, data.limit(), ((char) -342)))
assertEquals(expectedCardinality, cardinality)
assertTrue(ac <= c)
assertTrue(rac <= c)
assertNotNull(rmrClone)
assertEquals(rmrList, rmrCloneList)
assertEquals(14, rmr.nextAsInt())
assertEquals(13, rmr.nextAsInt())
assertEquals(0, i.next())
assertEquals(1, i.next())
assertEquals(rb1, rb2)
assertEquals(rb1, rb2)
assertTrue(TestRoaringBitmap.equals(bs, rb))
assertEquals(0, rb.getCardinality())
assertTrue(TestRoaringBitmap.equals(bs, rbstatic))
assertTrue(TestRoaringBitmap.equals(bs, rbinplace))
assertEquals(rbinplace, rbstatic)
assertTrue(TestRoaringBitmap.equals(bs, rb))
assertTrue(TestRoaringBitmap.equals(bs, rb))
assertEquals(100000, rbcard)
assertTrue(TestRoaringBitmap.equals(bs, rb))
assertEquals(100000, rbcard)
assertEquals(0, rb.getCardinality())
assertTrue(TestRoaringBitmap.equals(bs, rb))
assertTrue(TestRoaringBitmap.equals(bs, rb1))
assertEquals(0, rbcard)
assertTrue(TestRoaringBitmap.equals(bs, rb))
assertEquals(0, rbcard)
assertEquals(1, rb.getCardinality())
assertTrue(TestRoaringBitmap.equals(bs, rb1))
assertTrue(TestRoaringBitmap.equals(bs, rb))
assertEquals(65536, rbcard)
assertTrue(TestRoaringBitmap.equals(bs, rb))
assertEquals(200000, rbcard)
assertTrue(TestRoaringBitmap.equals(bs, rb2))
assertEquals(196608, rbcard)
assertTrue(TestRoaringBitmap.equals(bs, rb))
assertEquals(196608, rbcard)
assertTrue(TestRoaringBitmap.equals(bs, rb2))
assertEquals(196608, rbcard)
assertTrue(TestRoaringBitmap.equals(bs, rb))
assertEquals(434464, rbcard)
assertTrue(TestRoaringBitmap.equals(bs, rb2))
assertEquals(97536, rbcard)
assertTrue(TestRoaringBitmap.equals(bs, rb))
assertEquals(97536, rbcard)
assertTrue(TestRoaringBitmap.equals(bs, rb2))
assertEquals(318, rbcard)
assertTrue(TestRoaringBitmap.equals(bs, rb))
assertTrue(TestRoaringBitmap.equals(bs, rb))
assertEquals(rb1, rb)
assertTrue(TestRoaringBitmap.equals(bs, rb1))
assertEquals(rb2, rb)
assertTrue(TestRoaringBitmap.equals(bs, rb2))
assertTrue(TestRoaringBitmap.equals(bs, rb3))
assertEquals(rb2, rb3)
assertEquals(rb2, rb3)
assertTrue(TestRoaringBitmap.equals(bs, rb3))
assertEquals(rb2, rb3)
assertTrue(TestRoaringBitmap.equals(bs, rb3))
assertEquals(255, rbcard)
assertEquals(rb2, rb3)
assertTrue(TestRoaringBitmap.equals(bs, rb3))
assertEquals(rb2, rb3)
assertTrue(TestRoaringBitmap.equals(bs, rb3))
assertEquals(rb2, rb3)
assertTrue(TestRoaringBitmap.equals(bs, rb3))
assertEquals(rb2, rb)
assertTrue(TestRoaringBitmap.equals(bs, rb2))
assertEquals(312320, rbcard)
assertTrue(TestRoaringBitmap.equals(bs, rb))
assertEquals(2964, rbcard)
assertTrue(TestRoaringBitmap.equals(bs, rb))
assertEquals(2964, rbcard)
assertTrue(TestRoaringBitmap.equals(bs, rb2))
assertEquals(2, rbcard)
assertTrue(TestRoaringBitmap.equals(bs, rb))
assertEquals(2, rbcard)
assertTrue(TestRoaringBitmap.equals(bs, rb2))
assertTrue((bitmap.getCardinality() == 1) && bitmap.contains(1))
assertTrue((bitmap.getCardinality() == 1) && bitmap.contains(1))
assertTrue((bitmap.getCardinality() == 1) && bitmap.contains(1))
assertTrue((bitmap.getCardinality() == 1) && bitmap.contains(1))
assertTrue(bitmap.isEmpty())
assertTrue(bitmap.isEmpty())
assertTrue(bitmap.isEmpty())
assertEquals(rb1, rb2)
assertEquals(rb1, rb2)
assertEquals(rb1, rb2)
assertEquals(rb1, rb2)
assertEquals(rb1, rb2)
assertEquals(rb1, rb2)
assertEquals(rb1, rb2)
assertEquals(rb1, rb2)
assertEquals(rb1, rb2)
assertEquals(rb1, rb2)
assertTrue(bitmap.intersects(minValueThatWorks, baseValue))
assertTrue(bitmap.intersects(minValueThatWorks - 1, baseValue))
assertTrue(rr1.equals(rrback1))
assertTrue(rr1.equals(rrback1))
assertTrue(rr2.equals(rrback2))
assertTrue(rr1.equals(rrback1))
assertTrue(rr1.equals(rrback1))
assertTrue(rr2.equals(rrback2))
assertTrue(rr1.equals(rrback1c))
assertTrue(rr2.equals(rrback2c))
assertTrue(rrback1.equals(rrback1c))
assertTrue(rrback2.equals(rrback2c))
assertEquals(rr1.hashCode(), rrback1.hashCode())
assertEquals(rr1.hashCode(), rrback1c.hashCode())
assertEquals(rr2.hashCode(), rrback2.hashCode())
assertEquals(rr2.hashCode(), rrback2c.hashCode())
assertTrue(copy1.equals(rb))
assertTrue(copy2.equals(rb))
assertEquals(totalcard, M)
assertEquals(FastAggregation.or(one, two, three), ParallelAggregation.or(one, two, three))
assertEquals(FastAggregation.or(one, two, three), ParallelAggregation.or(one, two, three))
assertEquals(FastAggregation.or(one, two, three), ParallelAggregation.or(one, two, three))
assertEquals(FastAggregation.or(input), ParallelAggregation.or(input))
assertEquals(FastAggregation.or(input), ParallelAggregation.or(input))
assertEquals(FastAggregation.or(input), ParallelAggregation.or(input))
assertEquals(FastAggregation.or(input), ParallelAggregation.or(input))
assertEquals(FastAggregation.or(input), NO_PARALLELISM_AVAILABLE.submit(() -> ParallelAggregation.or(input)).join())
assertEquals(FastAggregation.or(input), NO_PARALLELISM_AVAILABLE.submit(() -> ParallelAggregation.or(input)).join())
assertEquals(FastAggregation.or(input), NO_PARALLELISM_AVAILABLE.submit(() -> ParallelAggregation.or(input)).join())
assertEquals(FastAggregation.or(input), POOL.submit(() -> ParallelAggregation.or(input)).join())
assertEquals(FastAggregation.or(input), BIG_POOL.submit(() -> ParallelAggregation.or(input)).join())
assertEquals(FastAggregation.or(input), POOL.submit(() -> ParallelAggregation.or(input)).join())
assertEquals(FastAggregation.or(input), POOL.submit(() -> ParallelAggregation.or(input)).join())
assertEquals(FastAggregation.or(one, two, three), ParallelAggregation.or(one, two, three))
assertEquals(FastAggregation.xor(one, two, three), ParallelAggregation.xor(one, two, three))
assertEquals(FastAggregation.xor(one, two, three), ParallelAggregation.xor(one, two, three))
assertEquals(FastAggregation.xor(one, two, three), ParallelAggregation.xor(one, two, three))
assertEquals(FastAggregation.xor(one, two, three), ParallelAggregation.xor(one, two, three))
assertEquals(FastAggregation.xor(one, two, three), ParallelAggregation.xor(one, two, three))
assertEquals(BufferFastAggregation.or(one, two, three), BufferParallelAggregation.or(one, two, three))
assertEquals(BufferFastAggregation.or(one, two, three), BufferParallelAggregation.or(one, two, three))
assertEquals(BufferFastAggregation.or(one, two, three), BufferParallelAggregation.or(one, two, three))
assertEquals(BufferFastAggregation.or(one, two, three), BufferParallelAggregation.or(one, two, three))
assertEquals(BufferFastAggregation.or(input), BufferParallelAggregation.or(input))
assertEquals(BufferFastAggregation.or(input), BufferParallelAggregation.or(input))
assertEquals(BufferFastAggregation.or(input), BufferParallelAggregation.or(input))
assertEquals(BufferFastAggregation.or(input), BufferParallelAggregation.or(input))
assertEquals(BufferFastAggregation.or(input), NO_PARALLELISM_AVAILABLE.submit(() -> BufferParallelAggregation.or(input)).join())
assertEquals(BufferFastAggregation.or(input), NO_PARALLELISM_AVAILABLE.submit(() -> BufferParallelAggregation.or(input)).join())
assertEquals(BufferFastAggregation.or(input), NO_PARALLELISM_AVAILABLE.submit(() -> BufferParallelAggregation.or(input)).join())
assertEquals(BufferFastAggregation.or(input), POOL.submit(() -> BufferParallelAggregation.or(input)).join())
assertEquals(BufferFastAggregation.or(input), POOL.submit(() -> BufferParallelAggregation.or(input)).join())
assertEquals(BufferFastAggregation.or(input), POOL.submit(() -> BufferParallelAggregation.or(input)).join())
assertEquals(BufferFastAggregation.xor(one, two, three), BufferParallelAggregation.xor(one, two, three))
assertEquals(BufferFastAggregation.xor(one, two, three), BufferParallelAggregation.xor(one, two, three))
assertEquals(BufferFastAggregation.xor(one, two, three), BufferParallelAggregation.xor(one, two, three))
assertEquals(BufferFastAggregation.xor(one, two, three), BufferParallelAggregation.xor(one, two, three))
assertEquals(BufferFastAggregation.xor(one, two, three), BufferParallelAggregation.xor(one, two, three))
assertEquals(0, cnt)
assertEquals(1, cnt)
assertEquals(0, cnt)
assertEquals(1, cnt)
assertEquals(0, cnt)
assertEquals(1, cnt)
assertTrue(writer().constantMemory().get() instanceof ConstantMemoryContainerAppender)
assertNotNull(writer().fastRank().get().getUnderlying())
assertEquals(20, writer().initialCapacity(20).get().getUnderlying().highLowContainer.keys.length)
assertEquals(baselineHLC.size, testHLC.size)
assertEquals(baseline, test)
assertTrue(Util.unsignedIntersects(data1, data1.length, data2, data2.length))
assertEquals(8, Util.branchyUnsignedBinarySearch(data1, 0, data1.length, data1[8]))
assertEquals(0, Util.branchyUnsignedBinarySearch(data1, 0, data1.length, data1[0]))
assertEquals(data1.length - 1, Util.branchyUnsignedBinarySearch(data1, data1.length - 1, data1.length, data1[data1.length - 1]))
assertEquals(-1, Util.branchyUnsignedBinarySearch(data1, 0, 0, (char) 0))
assertEquals(-10, Util.branchyUnsignedBinarySearch(data1, 0, data1.length, (char) -1))
assertArrayEquals(data, test)
assertEquals(1, Util.advanceUntil(data, -1, data.length, (char) 3))
assertEquals(5, Util.advanceUntil(data, -1, data.length, (char) 28))
assertEquals(5, Util.advanceUntil(data, -1, data.length, (char) 29))
assertEquals(7, Util.advanceUntil(data, -1, data.length, (char) -342))
assertEquals(0, Util.reverseUntil(data, data.length, data.length, (char) 0))
assertEquals(1, Util.reverseUntil(data, data.length, data.length, (char) 3))
assertEquals(4, Util.reverseUntil(data, data.length, data.length, (char) 28))
assertEquals(5, Util.reverseUntil(data, data.length, data.length, (char) 29))
assertEquals(6, Util.reverseUntil(data, data.length, data.length, (char) 30))
assertEquals(6, Util.reverseUntil(data, data.length, data.length, (char) 31))
assertEquals(7, Util.reverseUntil(data, data.length, data.length, (char) -342))
assertEquals(1, Util.iterateUntil(data, 0, data.length, ((char) 3)))
assertEquals(5, Util.iterateUntil(data, 0, data.length, ((char) 28)))
assertEquals(5, Util.iterateUntil(data, 0, data.length, ((char) 29)))
assertEquals(7, Util.iterateUntil(data, 0, data.length, ((char) -342)))
assertEquals(expectedCardinality, cardinality)
assertArrayEquals(referenceBitmap, bitmap)
assertTrue(rb.getSizeInBytes() <= 50)
assertTrue(ac <= c)
assertTrue(rac <= c)
assertEquals(9900, consumer.getNumberOfValuesConsumed())
assertEquals(1000, consumer2.getNumberOfValuesConsumed())
assertEquals(5, consumer3.getNumberOfValuesConsumed())
assertEquals(5, consumer4.getNumberOfValuesConsumed())
assertEquals(100000, consumer.getNumberOfValuesConsumed())
assertEquals(3500, consumer2.getNumberOfValuesConsumed())
assertEquals(6, consumer3.getNumberOfValuesConsumed())
assertEquals(100000, consumer.getNumberOfValuesConsumed())
assertEquals(3500, consumer2.getNumberOfValuesConsumed())
assertEquals(1000, consumer3.getNumberOfValuesConsumed())
assertEquals(2, consumer.getNumberOfValuesConsumed())
assertEquals(2, consumer2.getNumberOfValuesConsumed())
assertEquals(2, consumer3.getNumberOfValuesConsumed())
assertEquals(2, consumer.getNumberOfValuesConsumed())
assertEquals(2, consumer2.getNumberOfValuesConsumed())
assertEquals(2, consumer3.getNumberOfValuesConsumed())
assertFalse(rc.contains((char) 1))
assertFalse(i.hasNext())
assertFalse(i.hasNext())
assertFalse(i.hasNext())
assertFalse(i.hasNext())
assertFalse(i.hasNext())
assertFalse(rc1.intersects(rc2))
assertFalse(rc1.intersects(rc2))
assertFalse(rc2.intersects(rc1))
assertFalse(rc.intersects(ac))
assertFalse(rc.intersects(ac))
assertFalse(rc.contains(subset))
assertFalse(rc.contains(superset))
assertFalse(rc.contains(disjoint))
assertFalse(disjoint.contains(rc))
assertFalse(rc.contains(superset))
assertFalse(rc.contains(subset))
assertFalse(rc.contains(disjoint))
assertFalse(disjoint.contains(rc))
assertFalse(rc.contains(shifted))
assertFalse(rc.contains(superset))
assertFalse(rc.contains(disjoint))
assertFalse(disjoint.contains(rc))
assertFalse(container.intersects(11, 1 << 16))
assertFalse(container.intersects(0, 1))
assertFalse(container.intersects(lower16Bits(-100), lower16Bits(-55)))
assertFalse(container.intersects(lower16Bits(-100), lower16Bits(-55)))
assertFalse(container.intersects(lower16Bits(-9), lower16Bits(-1)))
assertFalse(MappeableRunContainer.full().flip((char) (1 << 15)).contains(0, 1 << 16))
assertFalse(rc.contains(0, 100))
assertFalse(rc.contains(0, 100000))
assertFalse(rc.contains(100, 5000))
assertFalse(rc.contains(50, 5000))
assertFalse(rc.contains(4000, 6000))
assertFalse(rc.contains(10001, 20000))
assertFalse(rc.contains(0, 100))
assertFalse(rc.contains(0, 100000))
assertFalse(rc.contains(100, 5000))
assertFalse(rc.contains(50, 5000))
assertFalse(rc.contains(4000, 6000))
assertFalse(rc.contains(10001, 20000))
assertFalse(rc.contains(0, 100))
assertFalse(rc.contains(500, 600))
assertFalse(rc.contains(501, 600))
assertFalse(rc.contains(600, 700))
assertFalse(rc.contains(9999, 10001))
assertFalse(rc.contains(48, 49))
assertFalse(iterator.hasNext())
assertFalse(container.intersects(11, lower16Bits(-1)))
assertFalse(container.intersects(0, 1))
assertFalse(container.intersects(lower16Bits(-100), lower16Bits(-55)))
assertFalse(container.intersects(lower16Bits(-9), lower16Bits(-1)))
assertFalse(container.intersects(lower16Bits(-10), lower16Bits(-1)))
assertFalse(container.intersects(lower16Bits(-500), lower16Bits(-1)))
assertFalse(container.intersects(lower16Bits(-499), 1 << 16))
assertFalse(container.contains(64 * 10, 2 + 64 * 11))
assertFalse(container.contains(64 * 10, (64 * 13) - 30))
assertFalse(container.contains(64 * 10, 2 + 64 * 13))
assertFalse(container.contains(64 * 1023, 64 * 1024))
assertFalse(container.contains(64 * 1023, 64 * 1024 - 1))
assertFalse(container.contains(64 * 1023, 64 * 1023 + 2))
assertFalse(BufferUtil.unsignedIntersects(data1, data1.limit(), data2, data2.limit()))
assertFalse(BufferUtil.unsignedIntersects(data4, data4.limit(), data5, data5.limit()))
assertFalse(i.hasNext())
assertFalse(bitmap.hasRunCompression())
assertFalse(Util.unsignedIntersects(data3, data3.length, data4, data4.length))
assertFalse(Util.unsignedIntersects(data5, data5.length, data6, data6.length))
assertEquals(RoaringBitmap.bitmapOfRange(0, size), range.lte(size))
assertEquals(expected, range.lt(0))
assertEquals(expected.getCardinality(), range.ltCardinality(0))
assertEquals(expected, range.lte(999_999))
assertEquals(expected.getCardinality(), range.lteCardinality(999_999))
assertEquals(expected, range.lte(1_000_000))
assertEquals(expected.getCardinality(), range.lteCardinality(1_000_000))
assertEquals(expected, range.lt(1_000_000))
assertEquals(expected.getCardinality(), range.ltCardinality(1_000_000))
assertEquals(expected, range.lte(1_000_000_000))
assertEquals(expected.getCardinality(), range.lteCardinality(1_000_000_000))
assertEquals(expected, range.lt(1_000_000_000))
assertEquals(expected.getCardinality(), range.ltCardinality(1_000_000_000))
assertEquals(RoaringBitmap.bitmapOfRange(0, size), range.lte(size))
assertEquals(size, range.lteCardinality(size))
assertEquals(RoaringBitmap.bitmapOfRange(0, size), range.lte(size + 1))
assertEquals(size, range.lteCardinality(size + 1))
assertEquals(RoaringBitmap.bitmapOfRange(0, size), range.lte(size * 10L))
assertEquals(size, range.lteCardinality(size * 10L))
assertFalse(bitmap.lte(Long.MIN_VALUE).isEmpty())
assertTrue(bitmap.lteCardinality(Long.MIN_VALUE) > 0)
assertTrue(bitmap.lte(Long.MIN_VALUE).isEmpty())
assertEquals(0, bitmap.lteCardinality(Long.MIN_VALUE))
assertEquals(values.length, bitmap.lte(max).getCardinality())
assertEquals(values.length, bitmap.lteCardinality(max))
assertEquals(values.length, bitmap.gte(0).getCardinality())
assertEquals(values.length, bitmap.gteCardinality(0))
assertAll(LongStream.range(0, 7).map(i -> (long) Math.pow(10, i)).mapToObj(threshold -> () -> {
    assertEquals(referenceImplementation.lessThanOrEqualTo(threshold), sut.lte(threshold));
    assertEquals(referenceImplementation.lessThanOrEqualTo(threshold).getCardinality(), sut.lteCardinality(threshold));
}))
assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", LongStream.range(0, 7).map(i -> (long) Math.pow(10, i)).mapToObj(threshold -> () -> {
    assertEquals(referenceImplementation.lessThanOrEqualTo(threshold), sut.lte(threshold));
    assertEquals(referenceImplementation.lessThanOrEqualTo(threshold).getCardinality(), sut.lteCardinality(threshold));
}))
assertAll(IntStream.range(0, 7).mapToObj(i -> () -> {
    assertEquals(precomputed[i], sut.lte((long) Math.pow(10, i)));
    assertEquals(precomputed[i].getCardinality(), sut.lteCardinality((long) Math.pow(10, i)));
}))
assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", IntStream.range(0, 7).mapToObj(i -> () -> {
    assertEquals(precomputed[i], sut.lte((long) Math.pow(10, i)));
    assertEquals(precomputed[i].getCardinality(), sut.lteCardinality((long) Math.pow(10, i)));
}))
assertAll(IntStream.range(0, 7).mapToObj(i -> () -> {
    assertEquals(all, RoaringBitmap.or((sut.lte((long) Math.pow(10, i))), sut.gt((long) Math.pow(10, i))));
    assertEquals(all.getCardinality(), sut.lteCardinality((long) Math.pow(10, i)) + sut.gtCardinality((long) Math.pow(10, i)));
}))
assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", IntStream.range(0, 7).mapToObj(i -> () -> {
    assertEquals(all, RoaringBitmap.or((sut.lte((long) Math.pow(10, i))), sut.gt((long) Math.pow(10, i))));
    assertEquals(all.getCardinality(), sut.lteCardinality((long) Math.pow(10, i)) + sut.gtCardinality((long) Math.pow(10, i)));
}))
assertAll(IntStream.range(0, 7).mapToObj(i -> () -> {
    assertEquals(all, RoaringBitmap.or((sut.lt((long) Math.pow(10, i))), sut.gte((long) Math.pow(10, i))));
    assertEquals(all.getCardinality(), sut.ltCardinality((long) Math.pow(10, i)) + sut.gteCardinality((long) Math.pow(10, i)));
}))
assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", IntStream.range(0, 7).mapToObj(i -> () -> {
    assertEquals(all, RoaringBitmap.or((sut.lt((long) Math.pow(10, i))), sut.gte((long) Math.pow(10, i))));
    assertEquals(all.getCardinality(), sut.ltCardinality((long) Math.pow(10, i)) + sut.gteCardinality((long) Math.pow(10, i)));
}))
assertAll(IntStream.range(0, 7).mapToObj(i -> () -> {
    assertEquals(RoaringBitmap.andNot(all, precomputed[i]), sut.gt((long) Math.pow(10, i)));
    assertEquals(RoaringBitmap.andNot(all, precomputed[i]).getCardinality(), sut.gtCardinality((long) Math.pow(10, i)));
}))
assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", IntStream.range(0, 7).mapToObj(i -> () -> {
    assertEquals(RoaringBitmap.andNot(all, precomputed[i]), sut.gt((long) Math.pow(10, i)));
    assertEquals(RoaringBitmap.andNot(all, precomputed[i]).getCardinality(), sut.gtCardinality((long) Math.pow(10, i)));
}))
assertEquals(sut.between(0, 10), RoaringBitmap.bitmapOfRange(0, 10))
assertEquals(sut.betweenCardinality(0, 10), 10)
assertEquals(sut.between(1, 10), RoaringBitmap.bitmapOfRange(1, 10))
assertEquals(sut.betweenCardinality(1, 10), 9)
assertEquals(sut.between(1, 9), RoaringBitmap.bitmapOfRange(1, 10))
assertEquals(sut.betweenCardinality(1, 9), 9)
assertEquals(sut.between(1, 9), RoaringBitmap.bitmapOfRange(1, 10))
assertEquals(sut.betweenCardinality(1, 9), 9)
assertEquals(sut.between(2, 8), RoaringBitmap.bitmapOfRange(2, 9))
assertEquals(sut.betweenCardinality(2, 8), 7)
assertEquals(sut.between(3, 7), RoaringBitmap.bitmapOfRange(3, 8))
assertEquals(sut.betweenCardinality(3, 7), 5)
assertEquals(RoaringBitmap.bitmapOfRange(0, 11), sut.between(0, 10))
assertEquals(11, sut.betweenCardinality(0, 10))
assertEquals(RoaringBitmap.bitmapOfRange(1, 11), sut.between(1, 10))
assertEquals(10, sut.betweenCardinality(1, 10))
assertEquals(RoaringBitmap.bitmapOfRange(1, 10), sut.between(1, 9))
assertEquals(9, sut.betweenCardinality(1, 9))
assertEquals(RoaringBitmap.bitmapOfRange(1, 10), sut.between(1, 9))
assertEquals(9, sut.betweenCardinality(1, 9))
assertEquals(RoaringBitmap.bitmapOfRange(2, 9), sut.between(2, 8))
assertEquals(7, sut.betweenCardinality(2, 8))
assertEquals(RoaringBitmap.bitmapOfRange(3, 8), sut.between(3, 7))
assertEquals(5, sut.betweenCardinality(3, 7))
assertEquals(RoaringBitmap.bitmapOfRange(0x10000 - 5, 0x10000 + 6), sut.between(0x10000 - 5, 0x10000 + 5))
assertEquals(11, RoaringBitmap.bitmapOfRange(0x10000 - 5, 0x10000 + 6).getCardinality())
assertEquals(11, sut.betweenCardinality(0x10000 - 5, 0x10000 + 5))
assertEquals(RoaringBitmap.bitmapOf(0), sut.between(-4620693217682128896L, -4616189618054758400L))
assertEquals(1, sut.betweenCardinality(-4620693217682128896L, -4616189618054758400L))
assertEquals(RoaringBitmap.bitmapOfRange(5, 47), sut.between(1, 42))
assertEquals(42, sut.betweenCardinality(1, 42))
assertEquals(RoaringBitmap.or(RoaringBitmap.bitmapOf(3), sequentialValues), sut.between(0, 4571364728013586431L))
assertEquals(RoaringBitmap.or(RoaringBitmap.bitmapOf(3), sequentialValues).getCardinality(), sut.betweenCardinality(0, 4571364728013586431L))
assertEquals(RoaringBitmap.or(RoaringBitmap.bitmapOf(1, 3), sequentialValues), sut.between(0, 4601552919265804287L))
assertEquals(RoaringBitmap.or(RoaringBitmap.bitmapOf(1, 3), sequentialValues).getCardinality(), sut.betweenCardinality(0, 4601552919265804287L))
assertEquals(RoaringBitmap.bitmapOf(0), sut.between(Long.MAX_VALUE, -4616189618054758400L))
assertEquals(1, sut.betweenCardinality(Long.MAX_VALUE, -4616189618054758400L))
assertEquals(RoaringBitmap.bitmapOf(0, 2), sut.between(Long.MAX_VALUE, -4586634745500139520L))
assertEquals(2, sut.betweenCardinality(Long.MAX_VALUE, -4586634745500139520L))
assertEquals(RoaringBitmap.bitmapOfRange(0, numSequentialValues + 4), sut.between(0, 0xFFFFFFFFFFFFFFFFL))
assertEquals(RoaringBitmap.bitmapOfRange(0, numSequentialValues + 4).getCardinality(), sut.betweenCardinality(0, 0xFFFFFFFFFFFFFFFFL))
assertEquals(RoaringBitmap.bitmapOfRange(0, 4), sut.between(4571364728013586431L, -4586634745500139520L))
assertEquals(4, sut.betweenCardinality(4571364728013586431L, -4586634745500139520L))
assertEquals(RoaringBitmap.bitmapOf(0, 2), sut.between(Long.MAX_VALUE, 0xFFFFFFFFFFFFFFFFL))
assertEquals(2, sut.betweenCardinality(Long.MAX_VALUE, 0xFFFFFFFFFFFFFFFFL))
assertEquals(RoaringBitmap.or(RoaringBitmap.bitmapOf(1, 3), sequentialValues), sut.between(0, Long.MAX_VALUE))
assertEquals(RoaringBitmap.orCardinality(RoaringBitmap.bitmapOf(1, 3), sequentialValues), sut.betweenCardinality(0, Long.MAX_VALUE))
assertEquals(new RoaringBitmap(), sut.between(-42, 0xFFFFFFFFFFFFFFFFL))
assertEquals(0, sut.betweenCardinality(-42, 0xFFFFFFFFFFFFFFFFL))
assertEquals(RoaringBitmap.bitmapOf(0), sut.between(-4620693217682128896L, -4616189618054758400L))
assertEquals(1, sut.betweenCardinality(-4620693217682128896L, -4616189618054758400L))
assertEquals(new RoaringBitmap(), empty.lte(10, nonEmpty))
assertEquals(0, empty.lteCardinality(10, nonEmpty))
assertEquals(new RoaringBitmap(), empty.lt(10, nonEmpty))
assertEquals(0, empty.ltCardinality(10, nonEmpty))
assertEquals(new RoaringBitmap(), empty.gt(10, nonEmpty))
assertEquals(0, empty.gtCardinality(10, nonEmpty))
assertEquals(new RoaringBitmap(), empty.gte(10, nonEmpty))
assertEquals(0, empty.gteCardinality(10, nonEmpty))
assertEquals(RoaringBitmap.bitmapOf(), bitmap.gt(-1L))
assertEquals(0, bitmap.gtCardinality(-1L))
assertEquals(RoaringBitmap.bitmapOf(2), bitmap.gte(-1L))
assertEquals(1, bitmap.gteCardinality(-1L))
assertEquals(RoaringBitmap.bitmapOf(0, 1, 2), bitmap.lte(-1L))
assertEquals(3, bitmap.lteCardinality(-1L))
assertEquals(RoaringBitmap.bitmapOf(0, 1), bitmap.lte(-2L))
assertEquals(2, bitmap.lteCardinality(-2L))
assertEquals(RoaringBitmap.bitmapOf(0, 1), bitmap.lt(-1L))
assertEquals(2, bitmap.ltCardinality(-1L))
assertEquals(RoaringBitmap.bitmapOf(0, 1), bitmap.lt(-2L))
assertEquals(2, bitmap.ltCardinality(-2L))
assertEquals(RoaringBitmap.bitmapOf(0, 1), bitmap.lte(Long.MIN_VALUE))
assertEquals(2, bitmap.lteCardinality(Long.MIN_VALUE))
assertEquals(RoaringBitmap.bitmapOf(0), bitmap.lt(Long.MIN_VALUE))
assertEquals(1, bitmap.ltCardinality(Long.MIN_VALUE))
assertEquals(RoaringBitmap.bitmapOf(2), bitmap.gt(Long.MIN_VALUE))
assertEquals(1, bitmap.gtCardinality(Long.MIN_VALUE))
assertEquals(RoaringBitmap.bitmapOf(1, 2), bitmap.gte(Long.MIN_VALUE))
assertEquals(2, bitmap.gteCardinality(Long.MIN_VALUE))
assertEquals(RoaringBitmap.bitmapOf(0), bitmap.lte(0))
assertEquals(1, bitmap.lteCardinality(0))
assertEquals(RoaringBitmap.bitmapOf(), bitmap.lt(0))
assertEquals(0, bitmap.ltCardinality(0))
assertEquals(RoaringBitmap.bitmapOf(0, 1, 2), bitmap.gte(0))
assertEquals(3, bitmap.gteCardinality(0))
assertEquals(RoaringBitmap.bitmapOf(1, 2), bitmap.gt(0))
assertEquals(2, bitmap.gtCardinality(0))
assertEquals(RoaringBitmap.bitmapOf(), bitmap.eq(2L))
assertEquals(RoaringBitmap.bitmapOf(0, 1, 2), bitmap.neq(2L))
assertEquals(RoaringBitmap.bitmapOf(0), bitmap.eq(0L))
assertEquals(RoaringBitmap.bitmapOf(1), bitmap.eq(Long.MIN_VALUE))
assertEquals(RoaringBitmap.bitmapOf(2), bitmap.eq(-1L))
assertEquals(RoaringBitmap.bitmapOf(1, 2), bitmap.neq(0L))
assertEquals(RoaringBitmap.bitmapOf(0, 2), bitmap.neq(Long.MIN_VALUE))
assertEquals(RoaringBitmap.bitmapOf(0, 1), bitmap.neq(-1L))
assertEquals(accumulator.build().gte(value).getCardinality(), 1)
assertEquals(accumulator.build().gteCardinality(value), 1)
assertEquals(accumulator.build().lte(value).getCardinality(), 1)
assertEquals(accumulator.build().lteCardinality(value), 1)
assertEquals(accumulator.build().between(value, value).getCardinality(), 1)
assertEquals(accumulator.build().betweenCardinality(value, value), 1)
assertEquals(accumulator.build().gte(value).getCardinality(), count)
assertEquals(accumulator.build().gteCardinality(value), count)
assertEquals(accumulator.build().lte(value).getCardinality(), count)
assertEquals(accumulator.build().lteCardinality(value), count)
assertEquals(accumulator.build().between(value, value).getCardinality(), count)
assertEquals(accumulator.build().betweenCardinality(value, value), count)
assertTrue(bitmap.intersects(minValueThatWorks, baseValue))
assertTrue(bitmap.intersects(minValueThatWorks - 1, baseValue))
assertEquals(rangeBitmap.gte(low, rangeBitmap.lte(high)), rangeBitmap.between(low, high))
assertEquals(1, rangeBitmap.between(low, high).getCardinality())
assertTrue(fast.isCacheDismissed())
assertTrue(bitmap.isCacheDismissed())
assertEquals(0, i.next())
assertEquals(1, i.next())
assertTrue(TestRoaringBitmap.equals(bs, rb))
assertEquals(0, rb.getCardinality())
assertTrue(TestRoaringBitmap.equals(bs, rbstatic))
assertTrue(TestRoaringBitmap.equals(bs, rbinplace))
assertEquals(rbinplace, rbstatic)
assertTrue(TestRoaringBitmap.equals(bs, rb))
assertTrue(TestRoaringBitmap.equals(bs, rb))
assertEquals(100000, rbcard)
assertTrue(TestRoaringBitmap.equals(bs, rb))
assertEquals(100000, rbcard)
assertEquals(0, rb.getCardinality())
assertTrue(TestRoaringBitmap.equals(bs, rb))
assertTrue(TestRoaringBitmap.equals(bs, rb1))
assertEquals(0, rbcard)
assertTrue(TestRoaringBitmap.equals(bs, rb))
assertEquals(0, rbcard)
assertEquals(1, rb.getCardinality())
assertTrue(TestRoaringBitmap.equals(bs, rb1))
assertTrue(TestRoaringBitmap.equals(bs, rb))
assertEquals(65536, rbcard)
assertTrue(TestRoaringBitmap.equals(bs, rb))
assertEquals(200000, rbcard)
assertTrue(TestRoaringBitmap.equals(bs, rb2))
assertEquals(196608, rbcard)
assertTrue(TestRoaringBitmap.equals(bs, rb))
assertEquals(196608, rbcard)
assertTrue(TestRoaringBitmap.equals(bs, rb2))
assertEquals(196608, rbcard)
assertTrue(TestRoaringBitmap.equals(bs, rb))
assertEquals(434464, rbcard)
assertTrue(TestRoaringBitmap.equals(bs, rb2))
assertEquals(97536, rbcard)
assertTrue(TestRoaringBitmap.equals(bs, rb))
assertEquals(97536, rbcard)
assertTrue(TestRoaringBitmap.equals(bs, rb2))
assertEquals(318, rbcard)
assertTrue(TestRoaringBitmap.equals(bs, rb))
assertTrue(TestRoaringBitmap.equals(bs, rb))
assertEquals(rb1, rb)
assertTrue(TestRoaringBitmap.equals(bs, rb1))
assertEquals(rb2, rb)
assertTrue(TestRoaringBitmap.equals(bs, rb2))
assertTrue(TestRoaringBitmap.equals(bs, rb3))
assertEquals(rb2, rb3)
assertEquals(rb2, rb3)
assertTrue(TestRoaringBitmap.equals(bs, rb3))
assertEquals(rb2, rb3)
assertTrue(TestRoaringBitmap.equals(bs, rb3))
assertEquals(255, rbcard)
assertEquals(rb2, rb3)
assertTrue(TestRoaringBitmap.equals(bs, rb3))
assertEquals(rb2, rb3)
assertTrue(TestRoaringBitmap.equals(bs, rb3))
assertEquals(rb2, rb3)
assertTrue(TestRoaringBitmap.equals(bs, rb3))
assertEquals(rb2, rb)
assertTrue(TestRoaringBitmap.equals(bs, rb2))
assertEquals(312320, rbcard)
assertTrue(TestRoaringBitmap.equals(bs, rb))
assertEquals(2964, rbcard)
assertTrue(TestRoaringBitmap.equals(bs, rb))
assertEquals(2964, rbcard)
assertTrue(TestRoaringBitmap.equals(bs, rb2))
assertEquals(2, rbcard)
assertTrue(TestRoaringBitmap.equals(bs, rb))
assertEquals(2, rbcard)
assertTrue(TestRoaringBitmap.equals(bs, rb2))
assertTrue((bitmap.getCardinality() == 1) && bitmap.contains(1))
assertTrue((bitmap.getCardinality() == 1) && bitmap.contains(1))
assertTrue((bitmap.getCardinality() == 1) && bitmap.contains(1))
assertTrue((bitmap.getCardinality() == 1) && bitmap.contains(1))
assertTrue(bitmap.isEmpty())
assertTrue(bitmap.isEmpty())
assertTrue(bitmap.isEmpty())
assertEquals(rb1, rb2)
assertEquals(rb1, rb2)
assertEquals(rb1, rb2)
assertEquals(rb1, rb2)
assertEquals(rb1, rb2)
assertEquals(rb1, rb2)
assertEquals(rb1, rb2)
assertEquals(rb1, rb2)
assertEquals(rb1, rb2)
assertEquals(rb1, rb2)
assertEquals(rb1, rb2)
assertEquals(rb1, rb2)
assertEquals(result, resultInt)
assertEquals(50000, result.getCardinality())
assertEquals(result, resultInt)
assertEquals(0, resultInt.getCardinality())
assertEquals(result, resultInt)
assertEquals(250000, result.getCardinality())
assertEquals(result, resultInt)
assertEquals(0, resultInt.getCardinality())
assertEquals(result, resultInt)
assertEquals(50000, result.getCardinality())
assertEquals(result, resultInt)
assertEquals(0, resultInt.getCardinality())
assertEquals(result, resultInt)
assertEquals(100000, result.getCardinality())
assertEquals(result, resultInt)
assertEquals(0, resultInt.getCardinality())
assertEquals(ac1, ac2)
assertEquals(ac1, ac2)
assertEquals("{5,6,7,8,9,10,11,12,13,14,65519,65533}", ac1.toString())
assertEquals(ac2, ac3)
assertNotNull(rac2)
assertEquals(asList(rac1), asList(rac2))
assertEquals(4, ac2.getCardinality())
assertTrue(ac.intersects(ac2))
assertEquals(1 << 16, result.getCardinality())
assertTrue(result instanceof RunContainer)
assertEquals(1 << 16, result.getCardinality())
assertTrue(result instanceof RunContainer)
assertEquals(5, ac.getCardinality())
assertEquals(5, ac.getCardinality())
assertEquals(0, ac.getCardinality())
assertEquals(0, ac.getCardinality())
assertEquals(79, ac.getCardinality())
assertEquals(0, ac.getCardinality())
assertEquals(-1, rbc.getCardinality())
assertEquals(1 << 16, repaired.getCardinality())
assertTrue(repaired instanceof RunContainer)
assertTrue(ac.contains(subset))
assertTrue(ac.contains(subset))
assertTrue(ac.contains(subset))
assertTrue(ac.contains(subset))
assertTrue(ac.contains(subset))
assertTrue(ac.contains(subset))
assertTrue(ac.contains(subset))
assertTrue(ac.contains(subset))
assertTrue(ac1.contains((char) 128))
assertTrue(ac1.contains((char) 256))
assertTrue(ac1.contains((char) 1024))
assertTrue(ac1.contains((char) 128))
assertTrue(ac1.contains((char) 256))
assertTrue(ac1.contains((char) 512))
assertTrue(ac1.contains((char) 513))
assertTrue(ac1.contains((char) 1024))
assertTrue(ac.contains(disjoint))
assertEquals(130, rc1.getCardinality())
assertTrue(iterator.hasNext())
assertEquals(256, iterator.next())
assertTrue(iterator.hasNext())
assertEquals(257, iterator.next())
assertEquals(130, rc1.getCardinality())
assertTrue(iterator.hasNext())
assertEquals(256, iterator.next())
assertTrue(iterator.hasNext())
assertEquals(260, iterator.next())
assertEquals(130, rc1.getCardinality())
assertTrue(iterator.hasNext())
assertEquals(256, iterator.next())
assertTrue(iterator.hasNext())
assertEquals(257, iterator.next())
assertEquals(130, rc1.getCardinality())
assertTrue(iterator.hasNext())
assertEquals(256, iterator.next())
assertTrue(iterator.hasNext())
assertEquals(257, iterator.next())
assertEquals(130, rc1.getCardinality())
assertTrue(iterator.hasNext())
assertEquals(256, iterator.next())
assertTrue(iterator.hasNext())
assertEquals(260, iterator.next())
assertTrue(container.intersects(0, 1))
assertTrue(container.intersects(0, 101))
assertTrue(container.intersects(0, lower16Bits(-1)))
assertTrue(container.intersects(0, lower16Bits(-40)))
assertTrue(container.intersects(11, 1 << 16))
assertTrue(container.intersects(0, 300))
assertTrue(container.intersects(1, 300))
assertTrue(container.intersects(0, lower16Bits(-1)))
assertTrue(ac.contains(20, 100))
assertTrue(ac.contains(20, 99))
assertTrue(ac.contains(21, 100))
assertTrue(ac.contains(1, 2))
assertTrue(ac.contains(1 << 15, 1 << 8 | 1 << 15))
assertTrue(ac.contains(1 + (1 << 15), (1 << 8 | 1 << 15) - 1))
assertEquals(10, container.nextValue((char) 5))
assertEquals(10, container.nextValue((char) 10))
assertEquals(20, container.nextValue((char) 11))
assertEquals(30, container.nextValue((char) 30))
assertEquals(-1, container.nextValue((char) 31))
assertTrue(container instanceof ArrayContainer)
assertEquals(64, container.nextValue((char) 0))
assertEquals(64, container.nextValue((char) 64))
assertEquals(65, container.nextValue((char) 65))
assertEquals(128, container.nextValue((char) 128))
assertEquals(-1, container.nextValue((char) 129))
assertEquals(-1, container.nextValue((char) 5000))
assertTrue(container instanceof ArrayContainer)
assertEquals(64, container.nextValue((char) 0))
assertEquals(64, container.nextValue((char) 64))
assertEquals(65, container.nextValue((char) 65))
assertEquals(128, container.nextValue((char) 128))
assertEquals(256, container.nextValue((char) 129))
assertEquals(-1, container.nextValue((char) 512))
assertTrue(container instanceof ArrayContainer)
assertEquals(64, container.nextValue((char) 0))
assertEquals(64, container.nextValue((char) 63))
assertEquals(64, container.nextValue((char) 64))
assertEquals(65, container.nextValue((char) 65))
assertEquals(128, container.nextValue((char) 128))
assertEquals(200, container.nextValue((char) 129))
assertEquals(200, container.nextValue((char) 199))
assertEquals(200, container.nextValue((char) 200))
assertEquals(250, container.nextValue((char) 250))
assertEquals(5000, container.nextValue((char) 2500))
assertEquals(5000, container.nextValue((char) 5000))
assertEquals(5200, container.nextValue((char) 5200))
assertEquals(-1, container.nextValue((char) 5201))
assertTrue(container instanceof ArrayContainer)
assertEquals(-1, container.previousValue((char) 0))
assertEquals(-1, container.previousValue((char) 63))
assertEquals(64, container.previousValue((char) 64))
assertEquals(65, container.previousValue((char) 65))
assertEquals(128, container.previousValue((char) 128))
assertEquals(128, container.previousValue((char) 129))
assertTrue(container instanceof ArrayContainer)
assertEquals(-1, container.previousValue((char) 0))
assertEquals(-1, container.previousValue((char) 63))
assertEquals(64, container.previousValue((char) 64))
assertEquals(65, container.previousValue((char) 65))
assertEquals(128, container.previousValue((char) 128))
assertEquals(128, container.previousValue((char) 129))
assertEquals(128, container.previousValue((char) 199))
assertEquals(200, container.previousValue((char) 200))
assertEquals(250, container.previousValue((char) 250))
assertEquals(500, container.previousValue((char) 2500))
assertEquals(5000, container.previousValue((char) 5000))
assertEquals(5200, container.previousValue((char) 5200))
assertEquals(-1, container.previousValue((char) 5))
assertEquals(-1, container.previousValue((char) 9))
assertEquals(10, container.previousValue((char) 10))
assertEquals(10, container.previousValue((char) 11))
assertEquals(20, container.previousValue((char) 21))
assertEquals(30, container.previousValue((char) 30))
assertEquals(-1, container.previousValue((char) ((1 << 15) | 4)))
assertEquals(((1 << 15) | 5), container.previousValue((char) ((1 << 15) | 5)))
assertEquals(((1 << 15) | 5), container.previousValue((char) ((1 << 15) | 6)))
assertEquals(((1 << 15) | 7), container.previousValue((char) ((1 << 15) | 7)))
assertEquals(((1 << 15) | 7), container.previousValue((char) ((1 << 15) | 8)))
assertEquals(((1 << 15) | 5), container.nextValue((char) ((1 << 15) | 4)))
assertEquals(((1 << 15) | 5), container.nextValue((char) ((1 << 15) | 5)))
assertEquals(((1 << 15) | 7), container.nextValue((char) ((1 << 15) | 6)))
assertEquals(((1 << 15) | 7), container.nextValue((char) ((1 << 15) | 7)))
assertEquals(-1, container.nextValue((char) ((1 << 15) | 8)))
assertEquals(30, container.previousValue((char) 31))
assertEquals(0, container.previousAbsentValue((char) 0))
assertEquals(63, container.previousAbsentValue((char) 63))
assertEquals(63, container.previousAbsentValue((char) 64))
assertEquals(63, container.previousAbsentValue((char) 65))
assertEquals(63, container.previousAbsentValue((char) 128))
assertEquals(129, container.previousAbsentValue((char) 129))
assertEquals(0, container.previousAbsentValue((char) 0))
assertEquals(63, container.previousAbsentValue((char) 63))
assertEquals(63, container.previousAbsentValue((char) 64))
assertEquals(63, container.previousAbsentValue((char) 65))
assertEquals(63, container.previousAbsentValue((char) 128))
assertEquals(129, container.previousAbsentValue((char) 129))
assertEquals(199, container.previousAbsentValue((char) 199))
assertEquals(199, container.previousAbsentValue((char) 200))
assertEquals(199, container.previousAbsentValue((char) 250))
assertEquals(2500, container.previousAbsentValue((char) 2500))
assertEquals(4999, container.previousAbsentValue((char) 5000))
assertEquals(4999, container.previousAbsentValue((char) 5200))
assertEquals(9, container.previousAbsentValue((char) 9))
assertEquals(9, container.previousAbsentValue((char) 10))
assertEquals(11, container.previousAbsentValue((char) 11))
assertEquals(21, container.previousAbsentValue((char) 21))
assertEquals(29, container.previousAbsentValue((char) 30))
assertEquals(((1 << 15) | 4), container.previousAbsentValue((char) ((1 << 15) | 4)))
assertEquals(((1 << 15) | 4), container.previousAbsentValue((char) ((1 << 15) | 5)))
assertEquals(((1 << 15) | 6), container.previousAbsentValue((char) ((1 << 15) | 6)))
assertEquals(((1 << 15) | 6), container.previousAbsentValue((char) ((1 << 15) | 7)))
assertEquals(((1 << 15) | 8), container.previousAbsentValue((char) ((1 << 15) | 8)))
assertEquals(0, container.nextAbsentValue((char) 0))
assertEquals(63, container.nextAbsentValue((char) 63))
assertEquals(129, container.nextAbsentValue((char) 64))
assertEquals(129, container.nextAbsentValue((char) 65))
assertEquals(129, container.nextAbsentValue((char) 128))
assertEquals(129, container.nextAbsentValue((char) 129))
assertEquals(0, container.nextAbsentValue((char) 0))
assertEquals(63, container.nextAbsentValue((char) 63))
assertEquals(129, container.nextAbsentValue((char) 64))
assertEquals(129, container.nextAbsentValue((char) 65))
assertEquals(129, container.nextAbsentValue((char) 128))
assertEquals(129, container.nextAbsentValue((char) 129))
assertEquals(199, container.nextAbsentValue((char) 199))
assertEquals(501, container.nextAbsentValue((char) 200))
assertEquals(501, container.nextAbsentValue((char) 250))
assertEquals(2500, container.nextAbsentValue((char) 2500))
assertEquals(5201, container.nextAbsentValue((char) 5000))
assertEquals(5201, container.nextAbsentValue((char) 5200))
assertEquals(9, container.nextAbsentValue((char) 9))
assertEquals(11, container.nextAbsentValue((char) 10))
assertEquals(11, container.nextAbsentValue((char) 11))
assertEquals(21, container.nextAbsentValue((char) 21))
assertEquals(31, container.nextAbsentValue((char) 30))
assertEquals(((1 << 15) | 4), container.nextAbsentValue((char) ((1 << 15) | 4)))
assertEquals(((1 << 15) | 6), container.nextAbsentValue((char) ((1 << 15) | 5)))
assertEquals(((1 << 15) | 6), container.nextAbsentValue((char) ((1 << 15) | 6)))
assertEquals(((1 << 15) | 8), container.nextAbsentValue((char) ((1 << 15) | 7)))
assertEquals(((1 << 15) | 8), container.nextAbsentValue((char) ((1 << 15) | 8)))
assertEquals(11, consumer.getNumberOfValuesConsumed())
assertEquals(5, consumer2.getNumberOfValuesConsumed())
assertEquals(6, consumer3.getNumberOfValuesConsumed())
assertEquals(totalcard, M)
assertEquals(expected, bench.pairwiseAndNot(bs))
assertEquals(0, bench.wideAnd_naive(bs))
assertEquals(expected, bench.wideOr_naive(bs))
assertEquals(expected, bench.iterate(bs))
assertEquals(expected, bench.pairwiseIOr(bs))
assertEquals((int) EXPECTED_RESULTS.get(dataset), bench.pairwiseOr(bs))
assertEquals((int) EXPECTED_RESULTS_NO_CARDINALITY.get(dataset), bench.pairwiseOr_NoCardinality(bs))
assertEquals(expected, bench.forEach(bs))
assertEquals(expected, bench.reverseIterate(bs))
assertEquals(expected, bench.wideOr_pq(bs))
assertEquals(expected, bench.pairwiseXor(bs))
assertEquals(expected, bench.pairwiseAnd(bs))
