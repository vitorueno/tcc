assertEquals(jsonData, run(new DataFileReadTool(), sampleFile.getPath()))
assertEquals(jsonData, run(new DataFileReadTool(), stdin, "-"))
assertEquals(jsonData, run(new DataFileReadTool(), "--pretty", sampleFile.getPath()))
assertEquals(jsonData, run(new DataFileReadTool(), "--reader-schema", "\"long\"", sampleFile.getPath()))
assertEquals(jsonData, run(new DataFileReadTool(), "--reader-schema-file", readerSchemaFile.getPath(), sampleFile.getPath()))
assertEquals(expectedJson, run(new DataFileReadTool(), "--head", sampleFile.getPath()))
assertEquals(expectedJson, run(new DataFileReadTool(), "--head=3", sampleFile.getPath()))
assertEquals(expectedJson, run(new DataFileReadTool(), "--head", "5", sampleFile.getPath()))
assertEquals(jsonData, run(new DataFileReadTool(), "--head=3000000000", sampleFile.getPath()))
assertEquals("\n", run(new DataFileReadTool(), "--head=0", sampleFile.getPath()))
assertEquals("\n", run(new DataFileReadTool(), "--head=-5", sampleFile.getPath()))
assertEquals(schema.toString() + "\n", run(new DataFileGetMetaTool(), sampleFile.getPath(), "--key", "avro.schema"))
assertEquals(schema.toString() + "\n", run(new DataFileGetSchemaTool(), sampleFile.getPath()))
assertEquals(0, countRecords(outFile))
assertEquals(5, countRecords(outFile))
assertTrue(baos.toString().contains("Compression codec (default: null)"))
assertEquals(readFileAsString(protocol), readFileAsString(outfile))
assertEquals("Warning: Found documentation comment at line 19, column 1. Ignoring previous one at line 1, column 1: \"" + "Licensed to the Apache Software Foundation (ASF) under one\n" + "or more contributor license agreements.  See the NOTICE file\n" + "distributed with this work for additional information\n" + "regarding copyright ownership.  The ASF licenses this file\n" + "to you under the Apache License, Version 2.0 (the\n" + "\"License\"); you may not use this file except in compliance\n" + "with the License.  You may obtain a copy of the License at\n\n" + "    https://www.apache.org/licenses/LICENSE-2.0\n\n" + "Unless required by applicable law or agreed to in writing, software\n" + "distributed under the License is distributed on an \"AS IS\" BASIS,\n" + "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n" + "See the License for the specific language governing permissions and\n" + "limitations under the License." + "\"\nDid you mean to use a multiline comment ( /* ... */ ) instead?", warnings)
assertTrue(err.toString().contains("Need count (--count)"))
assertTrue(err.toString().contains("Compression codec (default: deflate)"))
assertEquals(COUNT, i)
assertEquals(WordCountUtil.COUNTS.size(), numWords)
assertEquals(4, files.length)
assertEquals("Warning: Found documentation comment at line 19, column 1. Ignoring previous one at line 1, column 1: \"" + "Licensed to the Apache Software Foundation (ASF) under one\n" + "or more contributor license agreements.  See the NOTICE file\n" + "distributed with this work for additional information\n" + "regarding copyright ownership.  The ASF licenses this file\n" + "to you under the Apache License, Version 2.0 (the\n" + "\"License\"); you may not use this file except in compliance\n" + "with the License.  You may obtain a copy of the License at\n\n" + "    https://www.apache.org/licenses/LICENSE-2.0\n\n" + "Unless required by applicable law or agreed to in writing, software\n" + "distributed under the License is distributed on an \"AS IS\" BASIS,\n" + "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n" + "See the License for the specific language governing permissions and\n" + "limitations under the License." + "\"\nDid you mean to use a multiline comment ( /* ... */ ) instead?", warnings)
assertEquals(1, returnCode)
assertEquals(0, returnCode)
assertEquals("220" + System.lineSeparator(), out.toString())
assertEquals(json, baos.toString(UTF8).replace("\r", ""))
assertEquals(avro, baos.toString(UTF8))
Assert.assertTrue(baos.toString().contains("Compression codec (default: deflate)"))
assertFalse(r.hasNext())
Assert.assertEquals(defaultOutputFile.length(), nullOutputFile.length())
assertEquals(0, returnCode)
assertEquals(LIMIT_WITHIN_INPUT_BOUNDS, numRowsInFile(output))
assertEquals(0, returnCode)
assertEquals(LIMIT_WITHIN_INPUT_BOUNDS, numRowsInFile(output))
assertEquals(0, returnCode)
assertEquals(LIMIT_WITHIN_INPUT_BOUNDS, numRowsInFile(output))
assertEquals(0, returnCode)
assertEquals(ROWS_IN_INPUT_FILES - OFFSET, numRowsInFile(output))
assertEquals(0, returnCode)
assertEquals(0, returnCode)
assertEquals(0, returnCode)
assertEquals(0, returnCode)
assertEquals(0, returnCode)
assertTrue(baos1.toString("UTF-8").replace("\r", "").endsWith("hello\t{\"greeting\":\"Hi!\"}\n"))
assertEquals("\"Hello!\"\n", baos2.toString("UTF-8").replace("\r", ""))
Assert.assertEquals(String.format("zstandard[%d]", level), codec.toString())
assertEquals(0, returnCode)
assertEquals(ROWS_IN_INPUT_FILES * 3, numRowsInFile(output))
assertEquals(0, returnCode)
assertEquals(ROWS_IN_INPUT_FILES * 3, numRowsInFile(output))
assertEquals(0, returnCode)
assertEquals(ROWS_IN_INPUT_FILES * 3, numRowsInFile(output))
assertEquals(getCodec(input1).getClass(), getCodec(output).getClass())
assertEquals(1, returnCode)
assertEquals(2, returnCode)
assertEquals(3, returnCode)
assertEquals(0, returnCode)
Assert.assertEquals(0, in.tell())
Assert.assertEquals(0, in.length())
Assert.assertEquals(1, bytes.length)
Assert.assertEquals(0, bytes[0])
Assert.assertEquals(0, in.readInt())
Assert.assertEquals(sentinel, in.readLong())
Assert.assertEquals(sentinel, in.readLong())
Assert.assertEquals(sentinel, in.readLong())
Assert.assertEquals(sentinel, in.readLong())
Assert.assertEquals(sentinel, in.readLong())
Assert.assertEquals(sentinel, in.readLong())
Assert.assertEquals(sentinel, in.readLong())
Assert.assertEquals(sentinel, in.readLong())
Assert.assertEquals(sentinel, in.readLong())
Assert.assertEquals(sentinel, in.readLong())
Assert.assertEquals(sentinel, in.readLong())
Assert.assertEquals(0, in.getRowCount())
Assert.assertEquals(0, in.getColumnCount())
Assert.assertEquals(0, in.getRowCount())
Assert.assertEquals(1, in.getColumnCount())
Assert.assertEquals(COUNT, in.getRowCount())
Assert.assertEquals(1, in.getColumnCount())
Assert.assertEquals(COUNT, count)
Assert.assertEquals(COUNT, in.getRowCount())
Assert.assertEquals(1, in.getColumnCount())
Assert.assertEquals(COUNT, count)
Assert.assertEquals(COUNT, in.getRowCount())
Assert.assertEquals(1, in.getColumnCount())
Assert.assertEquals(COUNT, count)
Assert.assertEquals(COUNT, in.getRowCount())
Assert.assertEquals(2, in.getColumnCount())
Assert.assertEquals(COUNT, count)
Assert.assertEquals(0, min)
Assert.assertTrue(max > 1024 * 32)
Assert.assertTrue(average > 16.0f)
Assert.assertTrue(average < 64.0f)
assertTrue(compressedSize > 0)
assertTrue(compressedSize < inputSize || codec.equals("null"))
assertEquals(decompressedBuffer, inputByteBuffer)
assertTrue(compressedSize > 0)
assertEquals(decompressedBuffer, inputByteBuffer)
assertEquals(WordCountUtil.TOTAL, total)
assertEquals(COUNTS.size(), numWords)
assertEquals(COUNTS.size(), numWords)
assertEquals(expected.length, shredded.length)
assertEquals(WordCountUtil.TOTAL, total)
assertEquals(WordCountUtil.TOTAL, total)
assertTrue(metadata.get("test1") != null)
assertTrue(new String(metadata.get("test1")).equals("1"))
assertTrue(metadata.get("test2") != null)
assertTrue(new String(metadata.get("test2")).equals("2"))
assertTrue(metadata.get("test5") != null)
assertTrue(new String(metadata.get("test5")).equals("5"))
assertTrue(metadata.get("test3") == null)
assertTrue(metadata.get("test4") == null)
assertEquals(test, o)
Assert.assertEquals(src, dst)
Assert.assertEquals(expected, dst)
assertTrue(compilesWithoutError)
assertTrue(new File(OUTPUT_DIR.getRoot(), "SimpleRecord.java").exists())
assertTrue(compiler.publicFields())
assertFalse(compiler.privateFields())
assertTrue(this.outputFile.exists())
assertTrue(this.outputFile.exists())
assertTrue(foundAllArgsConstructor)
assertTrue(new SpecificCompiler(validSchema1).compile().size() > 0)
assertTrue(new SpecificCompiler(validSchema2).compile().size() > 0)
assertTrue(new SpecificCompiler(validSchema3).compile().size() > 0)
assertTrue(new SpecificCompiler(validSchema4).compile().size() > 0)
assertFalse(compiler.publicFields())
assertTrue(compiler.privateFields())
assertTrue(this.outputFile.exists())
assertTrue(compiler.isCreateSetters())
assertTrue(this.outputFile.exists())
assertFalse(compiler.isCreateSetters())
assertTrue(this.outputFile.exists())
Assert.assertEquals(1, usedCustomLogicalTypeFactories.size())
Assert.assertEquals("string-custom", entry.getKey())
Assert.assertEquals("org.apache.avro.compiler.specific.TestSpecificCompiler.StringCustomLogicalTypeFactory", entry.getValue())
Assert.assertEquals(0, usedCustomLogicalTypeFactories.size())
Assert.assertEquals(1, usedConversionClasses.size())
Assert.assertEquals("org.apache.avro.Conversions.DecimalConversion", usedConversionClasses.iterator().next())
Assert.assertEquals(2, conversions.size())
Assert.assertEquals(1, usedConversionClasses.size())
Assert.assertEquals("org.apache.avro.data.TimeConversions.DateConversion", usedConversionClasses.iterator().next())
Assert.assertEquals(1, usedConversionClasses.size())
Assert.assertEquals("org.apache.avro.data.TimeConversions.DateConversion", usedConversionClasses.iterator().next())
Assert.assertEquals(1, usedConversionClasses.size())
Assert.assertEquals("org.apache.avro.data.TimeConversions.DateConversion", usedConversionClasses.iterator().next())
Assert.assertEquals(1, usedConversionClasses.size())
Assert.assertEquals("org.apache.avro.data.TimeConversions.DateConversion", usedConversionClasses.iterator().next())
Assert.assertEquals(1, usedConversionClasses.size())
Assert.assertEquals("org.apache.avro.data.TimeConversions.DateConversion", usedConversionClasses.iterator().next())
assertTrue(this.outputFile.exists())
assertTrue(this.outputFile.exists())
assertEquals(9, optionalFound)
assertTrue(this.outputFile.exists())
assertEquals(5, optionalFound)
assertTrue(this.outputFile.exists())
assertEquals(17, optionalFound)
assertTrue(this.outputFile.exists())
assertTrue(this.outputFile.exists())
assertEquals(1, itWorksFound)
assertTrue(this.outputFile.exists())
Assert.assertEquals(SchemaCompatibility.SchemaCompatibilityType.COMPATIBLE, compat)
Assert.assertEquals(SchemaCompatibility.SchemaCompatibilityType.COMPATIBLE, compat)
Assert.assertEquals("caca", trimmed.getDoc())
Assert.assertEquals(SchemaCompatibility.SchemaCompatibilityType.COMPATIBLE, compat)
Assert.assertEquals(SchemaCompatibility.SchemaCompatibilityType.COMPATIBLE, compat)
Assert.assertEquals("N", Schemas.getJavaClassName(new Schema.Parser().parse("{\"type\": \"fixed\", \"name\": \"N\", \"size\": 10}")))
Assert.assertEquals("N", Schemas.getJavaClassName(new Schema.Parser().parse("{\"type\": \"fixed\", \"name\": \"N\", \"size\": 10, \"namespace\": \"\"}")))
Assert.assertEquals("com.example.N", Schemas.getJavaClassName(new Schema.Parser().parse("{\"type\": \"fixed\", \"name\": \"N\", \"size\": 10, \"namespace\": \"com.example\"}")))
Assert.assertEquals("t1.", Schemas.visit(new Schema.Parser().parse(s1), new TestVisitor()))
Assert.assertEquals("c1.\"int\"!", Schemas.visit(new Schema.Parser().parse(s2), new TestVisitor()))
Assert.assertEquals("ss1.", Schemas.visit(new Schema.Parser().parse(s3), new TestVisitor()))
Assert.assertEquals("st1.!", Schemas.visit(new Schema.Parser().parse(s4), new TestVisitor()))
Assert.assertEquals("c1.c2.\"int\"!\"long\"!", Schemas.visit(new Schema.Parser().parse(s5), new TestVisitor()))
Assert.assertEquals("c1.ss2.!", Schemas.visit(new Schema.Parser().parse(s6), new TestVisitor()))
Assert.assertEquals("c1.css2.\"int\"!!", Schemas.visit(new Schema.Parser().parse(s7), new TestVisitor()))
Assert.assertEquals("c1.ct2.\"int\"!", Schemas.visit(new Schema.Parser().parse(s9), new TestVisitor()))
Assert.assertEquals("c1.c2.\"int\".!\"long\".!", Schemas.visit(new Schema.Parser().parse(s11), new TestVisitor() {

    public SchemaVisitorAction visitTerminal(Schema terminal) {
        sb.append(terminal).append('.');
        return SchemaVisitorAction.SKIP_SIBLINGS;
    }
}))
Assert.assertEquals("c1.ct2.\"int\".", Schemas.visit(new Schema.Parser().parse(s12), new TestVisitor() {

    public SchemaVisitorAction visitTerminal(Schema terminal) {
        sb.append(terminal).append('.');
        return SchemaVisitorAction.TERMINATE;
    }
}))
Assert.assertEquals("\"int\".", Schemas.visit(new Schema.Parser().parse(s12), new TestVisitor() {

    public SchemaVisitorAction visitTerminal(Schema terminal) {
        sb.append(terminal).append('.');
        return SchemaVisitorAction.SKIP_SIBLINGS;
    }
}))
Assert.assertEquals(5, protocol.getTypes().size())
assertEquals(DocCommentHelper.getDoc(), "This is a token.")
assertEquals(DocCommentHelper.getDoc(), "This is the second token.")
assertEquals(schemaComment, DocCommentHelper.stripIndents(parsedComment))
assertEquals(schemaComment, DocCommentHelper.stripIndents(parsedComment))
Assert.assertEquals(data.toString(), read.toString())
Assert.assertNull(trimmed.getDoc())
Assert.assertTrue(Schemas.hasGeneratedJavaClass(new Schema.Parser().parse("{\"type\": \"fixed\", \"name\": \"N\", \"size\": 10}")))
assertNull(DocCommentHelper.getDoc())
assertTrue(TEST_DIR.exists())
assertTrue(TEST_INPUT_DIR.exists())
assertTrue(TEST_OUTPUT_DIR.exists())
assertEquals(slurped.trim(), output.replace("\\r", "").trim())
Assert.assertEquals(LogicalTypes.date(), logicalTypeOfField("aDate"))
Assert.assertEquals(LogicalTypes.timeMillis(), logicalTypeOfField("aTime"))
Assert.assertEquals(LogicalTypes.timestampMillis(), logicalTypeOfField("aTimestamp"))
Assert.assertEquals(LogicalTypes.localTimestampMillis(), logicalTypeOfField("aLocalTimestamp"))
Assert.assertEquals(LogicalTypes.decimal(6, 2), logicalTypeOfField("pocketMoney"))
Assert.assertEquals(LogicalTypes.uuid(), logicalTypeOfField("identifier"))
Assert.assertEquals(LogicalTypes.timestampMicros(), logicalTypeOfField("anotherTimestamp"))
Assert.assertEquals(LogicalTypes.decimal(6, 2), logicalTypeOfField("allowance"))
Assert.assertEquals("decimal", fieldSchema.getObjectProp("logicalType"))
Assert.assertEquals(3000000000L, fieldSchema.getObjectProp("precision"))
Assert.assertEquals(0, fieldSchema.getObjectProp("scale"))
assertEquals(0, ((GenericRecord) request).get("x"))
assertEquals(1, r.request("m", params))
assertTrue(o.contains("10 calls"))
assertTrue(r.contains("m: 0ms"))
assertTrue(r.contains("m: 100ms"))
assertTrue(r.contains("Average: 500.0ms"))
assertTrue(resp.contains("Average: 2.0"))
Assert.assertNotNull(recSchema.getDoc())
Assert.assertNotNull(cv.toString())
Assert.assertNotNull(recSchema.getDoc())
Assert.assertEquals(SIZE, data.remaining())
assertEquals(new Utf8("goodbye"), response)
assertEquals(record, echoed)
assertEquals(data, echoed)
assertNotNull(error)
assertEquals("an error", ((GenericRecord) error.getValue()).get("message").toString())
assertNotNull(error)
assertTrue(error.toString().contains("foo"))
Assert.assertFalse(Schemas.hasGeneratedJavaClass(new Schema.Parser().parse("{\"type\": \"int\"}")))
Assert.assertTrue(buf.remaining() > 0)
Assert.assertTrue(buf.remaining() > 0)
Assert.assertTrue(buf.remaining() > 0)
Assert.assertTrue(buf.remaining() > 0)
Assert.assertTrue(buf.remaining() > 0)
Assert.assertEquals("apache", str)
fail("Should NEVER get here")
assertEquals(NetworkType.IPv4, request1.getConnection().getNetworkType())
assertEquals("1.1.1.1", request1.getConnection().getNetworkAddress())
assertEquals("Chrome 123", request1.getHttpRequest().getUserAgent().getUseragent())
assertEquals("Foo", request1.getHttpRequest().getUserAgent().getId())
assertEquals(HttpMethod.GET, request1.getHttpRequest().getURI().getMethod())
assertEquals("/index.html", request1.getHttpRequest().getURI().getPath())
assertEquals(1, request1.getHttpRequest().getURI().getParameters().size())
assertEquals("Foo", request1.getHttpRequest().getURI().getParameters().get(0).getName())
assertEquals("Bar", request1.getHttpRequest().getURI().getParameters().get(0).getValue())
assertEquals(NetworkType.IPv4, request2.getConnection().getNetworkType())
assertEquals("2.2.2.2", request2.getConnection().getNetworkAddress())
assertEquals("Chrome 123", request2.getHttpRequest().getUserAgent().getUseragent())
assertEquals("Bar", request2.getHttpRequest().getUserAgent().getId())
assertEquals(HttpMethod.GET, request2.getHttpRequest().getURI().getMethod())
assertEquals("/index.html", request2.getHttpRequest().getURI().getPath())
assertEquals(1, request2.getHttpRequest().getURI().getParameters().size())
assertEquals("Foo", request2.getHttpRequest().getURI().getParameters().get(0).getName())
assertEquals("Bar", request2.getHttpRequest().getURI().getParameters().get(0).getValue())
assertEquals(NetworkType.IPv4, request1.getConnection().getNetworkType())
assertEquals("1.1.1.1", request1.getConnection().getNetworkAddress())
assertEquals("Chrome 123", request1.getHttpRequest().getUserAgent().getUseragent())
assertEquals("Foo", request1.getHttpRequest().getUserAgent().getId())
assertEquals(HttpMethod.GET, request1.getHttpRequest().getURI().getMethod())
assertEquals("/index.html", request1.getHttpRequest().getURI().getPath())
assertEquals(1, request1.getHttpRequest().getURI().getParameters().size())
assertEquals("Foo", request1.getHttpRequest().getURI().getParameters().get(0).getName())
assertEquals("Bar", request1.getHttpRequest().getURI().getParameters().get(0).getValue())
assertEquals(NetworkType.IPv4, request2.getConnection().getNetworkType())
assertEquals("2.2.2.2", request2.getConnection().getNetworkAddress())
assertEquals("Firefox 456", request2.getHttpRequest().getUserAgent().getUseragent())
assertEquals("Bar", request2.getHttpRequest().getUserAgent().getId())
assertEquals(HttpMethod.POST, request2.getHttpRequest().getURI().getMethod())
assertEquals("/index.html", request2.getHttpRequest().getURI().getPath())
assertEquals(1, request2.getHttpRequest().getURI().getParameters().size())
assertEquals("Foo", request2.getHttpRequest().getURI().getParameters().get(0).getName())
assertEquals("Bar", request2.getHttpRequest().getURI().getParameters().get(0).getValue())
assertEquals(NetworkType.IPv4, request.getConnection().getNetworkType())
assertEquals("1.1.1.1", request.getConnection().getNetworkAddress())
assertEquals(0, request.getHttpRequest().getURI().getParameters().size())
assertEquals("Firefox 321", request.getHttpRequest().getUserAgent().getUseragent())
assertEquals("Bar", request.getHttpRequest().getUserAgent().getId())
assertEquals(HttpMethod.POST, request.getHttpRequest().getURI().getMethod())
assertEquals("/login.php", request.getHttpRequest().getURI().getPath())
assertEquals(NetworkType.IPv4, request.getConnection().getNetworkType())
assertEquals("1.1.1.1", request.getConnection().getNetworkAddress())
assertEquals("Chrome 123", request.getHttpRequest().getUserAgent().getUseragent())
assertEquals("Foo", request.getHttpRequest().getUserAgent().getId())
assertEquals(0, request.getHttpRequest().getURI().getParameters().size())
assertEquals(HttpMethod.GET, request.getHttpRequest().getURI().getMethod())
assertEquals("/index.html", request.getHttpRequest().getURI().getPath())
assertFalse(builder.hasNullableRecordBuilder())
assertFalse(builder.hasNullableRecord())
assertFalse(builder.hasNullableString())
assertFalse(builder.hasNullableLong())
assertFalse(builder.hasNullableInt())
assertFalse(builder.hasNullableMap())
assertFalse(builder.hasNullableArray())
assertFalse(builderCopy.hasNullableRecordBuilder())
assertFalse(builderCopy.hasNullableRecord())
assertFalse(builderCopy.hasNullableString())
assertFalse(builderCopy.hasNullableLong())
assertFalse(builderCopy.hasNullableInt())
assertFalse(builderCopy.hasNullableMap())
assertFalse(builderCopy.hasNullableArray())
assertFalse(builder.hasNullableRecordBuilder())
assertFalse(builder.hasNullableRecord())
assertFalse(builder.hasNullableString())
assertFalse(builder.hasNullableLong())
assertFalse(builder.hasNullableInt())
assertFalse(builder.hasNullableMap())
assertFalse(builder.hasNullableArray())
assertFalse(builder.hasNullableRecordBuilder())
assertTrue(builder.hasNullableRecord())
assertTrue(builder.hasNullableString())
assertTrue(builder.hasNullableLong())
assertTrue(builder.hasNullableInt())
assertTrue(builder.hasNullableMap())
assertTrue(builder.hasNullableArray())
assertTrue(builder.hasNullableRecordBuilder())
assertFalse(builder.hasNullableRecord())
assertTrue(builder.hasNullableRecordBuilder())
assertFalse(builder.hasNullableRecord())
assertTrue(builder.hasNullableString())
assertTrue(builder.hasNullableLong())
assertTrue(builder.hasNullableInt())
assertTrue(builder.hasNullableMap())
assertTrue(builder.hasNullableArray())
assertEquals("Chrome 123", Optional.of(request).flatMap(Request::getOptionalHttpRequest).flatMap(HttpRequest::getOptionalUserAgent).flatMap(UserAgent::getOptionalUseragent).orElse("UNKNOWN"))
assertFalse(Optional.of(request).flatMap(Request::getOptionalHttpRequest).flatMap(HttpRequest::getOptionalUserAgent).flatMap(UserAgent::getOptionalId).isPresent())
assertEquals(HttpMethod.GET, Optional.of(request).flatMap(Request::getOptionalHttpRequest).flatMap(HttpRequest::getOptionalURI).flatMap(HttpURI::getOptionalMethod).orElse(null))
assertEquals("/index.html", Optional.of(request).flatMap(Request::getOptionalHttpRequest).flatMap(HttpRequest::getOptionalURI).flatMap(HttpURI::getOptionalPath).orElse(null))
assertThat(conversions, hasItem("org.apache.avro.data.TimeConversions.TimestampMillisConversion"))
assertThat(conversions, hasItem("org.apache.avro.data.TimeConversions.TimestampMicrosConversion"))
Assert.assertNull(fieldSchema.getLogicalType())
Assert.assertNotNull(context.requestHandshakeMeta())
Assert.assertNotNull(context.responseHandshakeMeta())
Assert.assertNull(context.getRequestPayload())
Assert.assertNull(context.getResponsePayload())
Assert.assertNotNull(buf)
Assert.assertNotNull(buf.array())
Assert.assertNotNull(partialstr)
Assert.assertNull(context.getRequestPayload())
Assert.assertNull(context.getResponsePayload())
Assert.assertNotNull(handshakeMeta)
Assert.assertNotNull(buf)
Assert.assertNotNull(buf.array())
Assert.assertNotNull(partialstr)
Assert.assertNotNull(context.getMessage())
Assert.assertNotNull(context.getRequestPayload())
Assert.assertNull(context.getResponsePayload())
Assert.assertNotNull(meta)
Assert.assertNotNull(context.getMessage())
Assert.assertNull(context.getResponsePayload())
Assert.assertNotNull(buf)
Assert.assertNotNull(buf.array())
Assert.assertNotNull(partialstr)
Assert.assertNotNull(context.requestCallMeta())
Assert.assertNotNull(context.responseCallMeta())
Assert.assertNotNull(context.getResponsePayload())
Assert.assertNotNull(buf)
Assert.assertNotNull(buf.array())
Assert.assertNotNull(partialstr)
Assert.assertNotNull(context.responseCallMeta())
Assert.assertNotNull(context.getRequestPayload())
Assert.assertNotNull(buf)
Assert.assertNotNull(buf.array())
Assert.assertNotNull(partialstr)
Assert.assertNotNull(rpcMeta)
Assert.assertNotNull(keybuf)
fail("A execução falhou por uma causa deliberada", "Should NEVER get here")
assertEquals(specificRecord, deserialized)
assertEquals(stringablesRecord, deserialized)
Assert.assertTrue(builder.hasName())
Assert.assertEquals("James Gosling", builder.getName())
Assert.assertTrue(builder.hasYearOfBirth())
Assert.assertEquals(1955, builder.getYearOfBirth())
Assert.assertFalse(builder.hasCountry())
Assert.assertNull(builder.getCountry())
Assert.assertTrue(builder.hasState())
Assert.assertEquals("CA", builder.getState())
Assert.assertFalse(builder.hasFriends())
Assert.assertNull(builder.getFriends())
Assert.assertFalse(builder.hasLanguages())
Assert.assertNull(builder.getLanguages())
Assert.assertEquals("James Gosling", person.getName())
Assert.assertEquals(1955, person.getYearOfBirth())
Assert.assertEquals("US", person.getCountry())
Assert.assertEquals("CA", person.getState())
Assert.assertNotNull(person.getFriends())
Assert.assertEquals(0, person.getFriends().size())
Assert.assertNotNull(person.getLanguages())
Assert.assertEquals(2, person.getLanguages().size())
Assert.assertEquals("English", person.getLanguages().get(0))
Assert.assertEquals("Java", person.getLanguages().get(1))
Assert.assertEquals(builder, Person.newBuilder(builder))
Assert.assertEquals(person, Person.newBuilder(person).build())
Assert.assertEquals("James Gosling", builderCopy.getName())
Assert.assertEquals(1955, builderCopy.getYearOfBirth())
Assert.assertEquals("US", builderCopy.getCountry())
Assert.assertEquals("CA", builderCopy.getState())
Assert.assertNotNull(builderCopy.getFriends())
Assert.assertEquals(0, builderCopy.getFriends().size())
Assert.assertFalse(builderCopy.hasFriends())
Assert.assertFalse(builderCopy.hasCountry())
Assert.assertNull(builderCopy.getFriends())
Assert.assertNull(builderCopy.getCountry())
Assert.assertNotNull(person2.getFriends())
Assert.assertTrue(person2.getFriends().isEmpty())
Assert.assertEquals(datetime, p.getDatetime())
Assert.assertEquals(ProductPage.class, p.getPageContext().getClass())
Assert.assertEquals(product, ((ProductPage) p.getPageContext()).getProduct())
Assert.assertEquals(datetime, p2.getDatetime())
Assert.assertEquals(ProductPage.class, p2.getPageContext().getClass())
Assert.assertEquals(product, ((ProductPage) p2.getPageContext()).getProduct())
Assert.assertEquals(p, p2)
Assert.assertEquals(interop.getArrayField().size(), copy.getArrayField().size())
Assert.assertEquals(interop.getArrayField(), copy.getArrayField())
Assert.assertEquals(interop.getBoolField(), copy.getBoolField())
Assert.assertEquals(interop.getBytesField(), copy.getBytesField())
Assert.assertEquals(interop.getEnumField(), copy.getEnumField())
Assert.assertEquals(interop.getFixedField(), copy.getFixedField())
Assert.assertEquals(interop.getIntField(), copy.getIntField())
Assert.assertEquals(interop.getLongField(), copy.getLongField())
Assert.assertEquals(interop.getMapField(), copy.getMapField())
Assert.assertEquals(interop.getRecordField(), copy.getRecordField())
Assert.assertEquals(interop.getStringField(), copy.getStringField())
Assert.assertEquals(interop.getUnionField(), copy.getUnionField())
Assert.assertEquals(interop, copy)
assertEquals(expectedJson, out.toString("UTF-8"))
Assert.assertEquals("value", testError.getValue())
Assert.assertEquals("value", testError.getMessage())
Assert.assertEquals("message$", testError.getMessage$())
Assert.assertEquals(testErrorBuilder, TestError.newBuilder(testErrorBuilder))
Assert.assertEquals(testErrorBuilder, TestError.newBuilder(testError))
Assert.assertEquals(error, TestError.newBuilder().setValue("value").setCause(new NullPointerException()).setMessage$("message").build())
Assert.assertEquals(TestRecord.getClassSchema(), TestRecord.SCHEMA$)
Assert.assertEquals(MD5.getClassSchema(), MD5.SCHEMA$)
Assert.assertEquals(Kind.getClassSchema(), Kind.SCHEMA$)
Assert.assertEquals(before, after)
Assert.assertEquals(Reserved.default$, SpecificData.get().createEnum("default", Reserved.SCHEMA$))
assertEquals(nestedEvolve1.getRootName(), "RootName")
assertEquals(nestedEvolve1.getNested().getName(), "Name")
assertEquals(nestedEvolve1.getNested().getValue(), 1)
Assert.assertTrue(testErrorBuilder.hasValue())
Assert.assertNotNull(testErrorBuilder.getValue())
Assert.assertTrue(testErrorBuilder.hasCause())
Assert.assertNotNull(testErrorBuilder.getCause())
Assert.assertTrue(testErrorBuilder.hasMessage$())
Assert.assertNotNull(testErrorBuilder.getMessage$())
Assert.assertFalse(testErrorBuilder.hasValue())
Assert.assertFalse(testErrorBuilder.hasCause())
Assert.assertFalse(testErrorBuilder.hasMessage$())
assertEquals(responder.getSpecificData().getClassLoader(), loader)
assertEquals(requestor.getSpecificData().getClassLoader(), loader)
assertEquals(Simple.PROTOCOL, SpecificRequestor.getRemote(proxy))
assertEquals("goodbye", response)
assertEquals(record, echoed)
assertEquals(record.hashCode(), echoed.hashCode())
assertEquals(3, result)
assertEquals(data, echoed)
assertEquals(data, echoed)
assertNotNull(error)
assertEquals("an error", error.getMessage$())
assertNotNull(error)
assertTrue(error.toString().contains("foo"))
assertEquals(2, ackCount)
Assert.assertNull(testErrorBuilder.getValue())
Assert.assertNull(testErrorBuilder.getCause())
Assert.assertNull(testErrorBuilder.getMessage$())
assertEquals(Schema.create(Type.NULL), new Schema.Parser().parse("\"null\""))
assertEquals(Schema.create(Type.NULL), new Schema.Parser().parse("{\"type\":\"null\"}"))
assertEquals(Schema.create(Type.BOOLEAN), new Schema.Parser().parse("\"boolean\""))
assertEquals(Schema.create(Type.BOOLEAN), new Schema.Parser().parse("{\"type\":\"boolean\"}"))
assertEquals(Schema.create(Type.STRING), new Schema.Parser().parse("\"string\""))
assertEquals(Schema.create(Type.STRING), new Schema.Parser().parse("{\"type\":\"string\"}"))
assertEquals(Schema.create(Type.BYTES), new Schema.Parser().parse("\"bytes\""))
assertEquals(Schema.create(Type.BYTES), new Schema.Parser().parse("{\"type\":\"bytes\"}"))
assertEquals(Schema.create(Type.INT), new Schema.Parser().parse("\"int\""))
assertEquals(Schema.create(Type.INT), new Schema.Parser().parse("{\"type\":\"int\"}"))
assertEquals(Schema.create(Type.LONG), new Schema.Parser().parse("\"long\""))
assertEquals(Schema.create(Type.LONG), new Schema.Parser().parse("{\"type\":\"long\"}"))
assertEquals(Schema.create(Type.FLOAT), new Schema.Parser().parse("\"float\""))
assertEquals(Schema.create(Type.FLOAT), new Schema.Parser().parse("{\"type\":\"float\"}"))
assertEquals(Schema.create(Type.DOUBLE), new Schema.Parser().parse("\"double\""))
assertEquals(Schema.create(Type.DOUBLE), new Schema.Parser().parse("{\"type\":\"double\"}"))
assertEquals("bar", schema.getField("f").getProp("foo"))
assertEquals("bar", new Schema.Parser().parse(schema.toString()).getField("f").getProp("foo"))
assertEquals("boo", schema.getField("f").getProp("baz"))
assertEquals(s1, s2)
assertNull(s.getProp("foo"))
assertEquals(json, s.toString())
assertEquals(new Schema.Parser().parse("\"boolean\""), s)
assertEquals("p.Z", xs.getField("g").schema().getFullName())
assertEquals("q.Z", ys.getField("f").schema().getFullName())
assertEquals(xs, new Schema.Parser().parse(xs.toString()))
assertEquals(outer, new Schema.Parser().parse(outer.toString()))
assertEquals(outer, new Schema.Parser().parse(outer.toString()))
assertEquals(outer, new Schema.Parser().parse(outer.toString()))
assertEquals(outer, new Schema.Parser().parse(outer.toString()))
assertEquals(nullOuter, new Schema.Parser().parse(nullOuter.toString()))
assertEquals(nullOuter, new Schema.Parser().parse(nullOuter.toString()))
assertEquals("x.Y", u.getFullName())
fail("Should not have parsed: " + json)
assertEquals("This is not a world record.", schema.getDoc())
assertEquals("Inner Fixed", schema.getField("inner_fixed").doc())
assertEquals("Very Inner Fixed", schema.getField("inner_fixed").schema().getDoc())
assertEquals("Inner String", schema.getField("inner_string").doc())
assertEquals("Inner Enum", schema.getField("inner_enum").doc())
assertEquals("Very Inner Enum", schema.getField("inner_enum").schema().getDoc())
assertEquals("Inner Union", schema.getField("inner_union").doc())
assertEquals("test", schema.getField("f").doc())
assertEquals("test", schema.getField("f").doc())
assertEquals(s1.getAliases(), Collections.emptySet())
assertEquals(s1.getField("f").aliases(), Collections.emptySet())
assertEquals(s2.getAliases(), Collections.singleton("a.b"))
assertEquals(s2.getField("g").aliases(), Collections.singleton("f"))
assertNotSame(s2, s3)
assertEquals(s2, s3)
assertNotSame(s2, s3)
assertEquals(s2, s3)
assertNotSame(s2, s3)
assertEquals(s2, s3)
assertEquals(s1.getAliases(), Collections.emptySet())
assertEquals(s2.getAliases(), Collections.singleton("a"))
assertNotSame(s2, s3)
assertEquals(s2, s3)
assertNull(s0.getProp("foo"))
assertEquals("bar", s1.getProp("foo"))
assertNotEquals(s0, s1)
assertEquals("bar", s2.getProp("foo"))
assertEquals(s1, s2)
assertNotEquals(s0, s2)
assertEquals(schema, names.get(new Schema.Name("Name", "space")))
assertEquals(schema, names.get("Name"))
assertEquals(schema, names.get(new Schema.Name("Name", "")))
assertEquals(schema, names.get("Name"))
assertNull(names.get("Name"))
assertEquals(record, echoed)
assertEquals(record.hashCode(), echoed.hashCode())
assertNotNull(error)
assertEquals("an error", error.getMessage$())
assertEquals(protocol.getDoc(), "Protocol used for testing.")
assertEquals(6, protocol.getMessages().size())
assertEquals("Pretend you're in a cave!", protocol.getMessages().get("echo").getDoc())
assertTrue(m.isOneWay())
assertTrue(m.isOneWay())
assertNotNull(msg)
assertNotNull(field)
assertTrue(field.aliases().contains("salute"))
assertNotNull(msg)
assertNotNull(field)
assertEquals("customValue", field.getProp("customProp"))
assertEquals(duplicate, original)
assertEquals("\\\"", SpecificCompiler.javaEscape("\""))
assertEquals("foo/bar/Baz.java".replace("/", File.separator), compiler.makePath("Baz", "foo.bar"))
assertEquals("baz.java", compiler.makePath("baz", ""))
assertEquals(0, new SpecificCompiler(new Schema.Parser().parse("\"double\"")).compile().size())
assertEquals(1, outputs.size())
assertEquals(o.path, "Test.java")
assertTrue(o.contents.contains("public enum Test"))
assertEquals("foo", SpecificCompiler.mangle("foo"))
assertEquals("goto$", SpecificCompiler.mangle("goto"))
assertTrue(errType.contains("public class finally$ extends org.apache.avro.specific.SpecificExceptionBase"))
assertTrue(errType.contains("private boolean catch$;"))
assertTrue(protocol.contains("java.lang.CharSequence goto$(java.lang.CharSequence break$)"))
assertTrue(protocol.contains("public interface default$"))
assertTrue(protocol.contains(" finally$"))
assertEquals(1, outputs.size())
assertTrue(contents.contains("private java.lang.CharSequence package$;"))
assertTrue(contents.contains("class volatile$ extends"))
assertTrue(contents.contains("volatile$ short$;"))
assertEquals(1, outputs.size())
assertTrue(contents.contains("new$"))
assertEquals(3, outputs.size())
assertEquals(3, count)
assertEquals(6, out.size())
assertTrue(!outputFile.exists())
assertTrue(!outputDir.exists())
assertTrue(outputDir.exists())
assertTrue(outputFile.exists())
assertEquals(lastModified, outputFile.lastModified())
assertTrue(lastModified != outputFile.lastModified())
assertEquals("getHeight", SpecificCompiler.generateGetMethod(createRecord("test", false, height), height))
assertEquals("getHeightAndWidth", SpecificCompiler.generateGetMethod(createRecord("test", false, height_and_width), height_and_width))
assertEquals("getMessage", SpecificCompiler.generateGetMethod(createRecord("test", false, message), message))
assertEquals("getMessage$", SpecificCompiler.generateGetMethod(createRecord("test", true, message), message))
assertEquals("getCause", SpecificCompiler.generateGetMethod(createRecord("test", false, cause), cause))
assertEquals("getCause$", SpecificCompiler.generateGetMethod(createRecord("test", true, cause), cause))
assertEquals("getClass$", SpecificCompiler.generateGetMethod(createRecord("test", false, clasz), clasz))
assertEquals("getClass$", SpecificCompiler.generateGetMethod(createRecord("test", true, clasz), clasz))
assertEquals("getSchema$", SpecificCompiler.generateGetMethod(createRecord("test", false, schema), schema))
assertEquals("getSchema$", SpecificCompiler.generateGetMethod(createRecord("test", true, schema), schema))
assertEquals("getHeight", SpecificCompiler.generateGetMethod(createRecord("test", false, Height), Height))
assertEquals("getHeight$0", SpecificCompiler.generateGetMethod(createRecord("test", false, height, Height), height))
assertEquals("getHeight$1", SpecificCompiler.generateGetMethod(createRecord("test", false, height, Height), Height))
assertEquals("getMessage$", SpecificCompiler.generateGetMethod(createRecord("test", true, Message), Message))
assertEquals("getMessage$0", SpecificCompiler.generateGetMethod(createRecord("test", true, message, Message), message))
assertEquals("getMessage$1", SpecificCompiler.generateGetMethod(createRecord("test", true, message, Message), Message))
assertEquals("getSchema$", SpecificCompiler.generateGetMethod(createRecord("test", false, Schema$), Schema$))
assertEquals("getSchema$0", SpecificCompiler.generateGetMethod(createRecord("test", false, schema, Schema$), schema))
assertEquals("getSchema$1", SpecificCompiler.generateGetMethod(createRecord("test", false, schema, Schema$), Schema$))
assertEquals("setHeight", SpecificCompiler.generateSetMethod(createRecord("test", false, height), height))
assertEquals("setHeightAndWidth", SpecificCompiler.generateSetMethod(createRecord("test", false, height_and_width), height_and_width))
assertEquals("setMessage", SpecificCompiler.generateSetMethod(createRecord("test", false, message), message))
assertEquals("setMessage$", SpecificCompiler.generateSetMethod(createRecord("test", true, message), message))
assertEquals("setCause", SpecificCompiler.generateSetMethod(createRecord("test", false, cause), cause))
assertEquals("setCause$", SpecificCompiler.generateSetMethod(createRecord("test", true, cause), cause))
assertEquals("setClass$", SpecificCompiler.generateSetMethod(createRecord("test", false, clasz), clasz))
assertEquals("setClass$", SpecificCompiler.generateSetMethod(createRecord("test", true, clasz), clasz))
assertEquals("setSchema$", SpecificCompiler.generateSetMethod(createRecord("test", false, schema), schema))
assertEquals("setSchema$", SpecificCompiler.generateSetMethod(createRecord("test", true, schema), schema))
assertEquals("setHeight", SpecificCompiler.generateSetMethod(createRecord("test", false, Height), Height))
assertEquals("setHeight$0", SpecificCompiler.generateSetMethod(createRecord("test", false, height, Height), height))
assertEquals("setHeight$1", SpecificCompiler.generateSetMethod(createRecord("test", false, height, Height), Height))
assertEquals("setMessage$", SpecificCompiler.generateSetMethod(createRecord("test", true, Message), Message))
assertEquals("setMessage$0", SpecificCompiler.generateSetMethod(createRecord("test", true, message, Message), message))
assertEquals("setMessage$1", SpecificCompiler.generateSetMethod(createRecord("test", true, message, Message), Message))
assertEquals("setSchema$", SpecificCompiler.generateSetMethod(createRecord("test", false, Schema$), Schema$))
assertEquals("setSchema$0", SpecificCompiler.generateSetMethod(createRecord("test", false, schema, Schema$), schema))
assertEquals("setSchema$1", SpecificCompiler.generateSetMethod(createRecord("test", false, schema, Schema$), Schema$))
assertEquals("hasHeight", SpecificCompiler.generateHasMethod(createRecord("test", false, height), height))
assertEquals("hasHeightAndWidth", SpecificCompiler.generateHasMethod(createRecord("test", false, height_and_width), height_and_width))
assertEquals("hasMessage", SpecificCompiler.generateHasMethod(createRecord("test", false, message), message))
assertEquals("hasMessage$", SpecificCompiler.generateHasMethod(createRecord("test", true, message), message))
assertEquals("hasCause", SpecificCompiler.generateHasMethod(createRecord("test", false, cause), cause))
assertEquals("hasCause$", SpecificCompiler.generateHasMethod(createRecord("test", true, cause), cause))
assertEquals("hasClass$", SpecificCompiler.generateHasMethod(createRecord("test", false, clasz), clasz))
assertEquals("hasClass$", SpecificCompiler.generateHasMethod(createRecord("test", true, clasz), clasz))
assertEquals("hasSchema$", SpecificCompiler.generateHasMethod(createRecord("test", false, schema), schema))
assertEquals("hasSchema$", SpecificCompiler.generateHasMethod(createRecord("test", true, schema), schema))
assertEquals("hasHeight", SpecificCompiler.generateHasMethod(createRecord("test", false, Height), Height))
assertEquals("hasHeight$0", SpecificCompiler.generateHasMethod(createRecord("test", false, height, Height), height))
assertEquals("hasHeight$1", SpecificCompiler.generateHasMethod(createRecord("test", false, height, Height), Height))
assertEquals("hasMessage$", SpecificCompiler.generateHasMethod(createRecord("test", true, Message), Message))
assertEquals("hasMessage$0", SpecificCompiler.generateHasMethod(createRecord("test", true, message, Message), message))
assertEquals("hasMessage$1", SpecificCompiler.generateHasMethod(createRecord("test", true, message, Message), Message))
assertEquals("hasSchema$", SpecificCompiler.generateHasMethod(createRecord("test", false, Schema$), Schema$))
assertEquals("hasSchema$0", SpecificCompiler.generateHasMethod(createRecord("test", false, schema, Schema$), schema))
assertEquals("hasSchema$1", SpecificCompiler.generateHasMethod(createRecord("test", false, schema, Schema$), Schema$))
assertEquals("clearHeight", SpecificCompiler.generateClearMethod(createRecord("test", false, height), height))
assertEquals("clearHeightAndWidth", SpecificCompiler.generateClearMethod(createRecord("test", false, height_and_width), height_and_width))
assertEquals("clearMessage", SpecificCompiler.generateClearMethod(createRecord("test", false, message), message))
assertEquals("clearMessage$", SpecificCompiler.generateClearMethod(createRecord("test", true, message), message))
assertEquals("clearCause", SpecificCompiler.generateClearMethod(createRecord("test", false, cause), cause))
assertEquals("clearCause$", SpecificCompiler.generateClearMethod(createRecord("test", true, cause), cause))
assertEquals("clearClass$", SpecificCompiler.generateClearMethod(createRecord("test", false, clasz), clasz))
assertEquals("clearClass$", SpecificCompiler.generateClearMethod(createRecord("test", true, clasz), clasz))
assertEquals("clearSchema$", SpecificCompiler.generateClearMethod(createRecord("test", false, schema), schema))
assertEquals("clearSchema$", SpecificCompiler.generateClearMethod(createRecord("test", true, schema), schema))
assertEquals("clearHeight", SpecificCompiler.generateClearMethod(createRecord("test", false, Height), Height))
assertEquals("clearHeight$0", SpecificCompiler.generateClearMethod(createRecord("test", false, height, Height), height))
assertEquals("clearHeight$1", SpecificCompiler.generateClearMethod(createRecord("test", false, height, Height), Height))
assertEquals("clearMessage$", SpecificCompiler.generateClearMethod(createRecord("test", true, Message), Message))
assertEquals("clearMessage$0", SpecificCompiler.generateClearMethod(createRecord("test", true, message, Message), message))
assertEquals("clearMessage$1", SpecificCompiler.generateClearMethod(createRecord("test", true, message, Message), Message))
assertEquals("clearSchema$", SpecificCompiler.generateClearMethod(createRecord("test", false, Schema$), Schema$))
assertEquals("clearSchema$0", SpecificCompiler.generateClearMethod(createRecord("test", false, schema, Schema$), schema))
assertEquals("clearSchema$1", SpecificCompiler.generateClearMethod(createRecord("test", false, schema, Schema$), Schema$))
assertNotNull(Simple.class.getAnnotation(TestAnnotation.class))
assertNotNull(TestRecord.class.getAnnotation(TestAnnotation.class))
assertNotNull(MD5.class.getAnnotation(TestAnnotation.class))
assertNotNull(Kind.class.getAnnotation(TestAnnotation.class))
assertNotNull(TestRecord.class.getDeclaredField("name").getAnnotation(TestAnnotation.class))
assertNotNull(Simple.class.getMethod("ack").getAnnotation(TestAnnotation.class))
assertEquals(1, outputs.size())
assertEquals(o.path, "X.java")
assertTrue(o.contents.contains("[\\\"Y\\\"]"))
assertTrue(o.contents.contains("[\\\"g\\\"]"))
assertNotNull(outputs)
assertNotNull(outputs)
assertTrue(cTask.call())
assertEquals(1, outputs.size())
assertTrue(contents.contains("private java.net.URI"))
assertTrue(contents.contains("catch (java.net.URISyntaxException e)"))
assertTrue(contents.contains("private java.net.URL"))
assertTrue(contents.contains("catch (java.net.MalformedURLException e)"))
assertEquals(responder.getReflectData().getClassLoader(), loader)
assertEquals(requestor.getReflectData().getClassLoader(), loader)
assertEquals("goodbye", response)
assertEquals(record, echoed)
assertEquals(3, result)
assertArrayEquals(data, echoed)
assertNotNull(error)
assertEquals("foo", error.getMessage())
assertNotNull(error)
assertTrue(error.toString().contains("foo"))
assertEquals(new Utf8("goodbye"), response)
assertEquals(new Utf8("goodbye"), response)
fail("A execução falhou por uma causa deliberada", "Should not have parsed: " + json)
assertEquals(20, s.elapsedNanos())
assertEquals(60, s.elapsedNanos())
assertTrue(s.elapsedNanos() >= 0)
assertEquals(20, h.getCount())
assertArrayEquals(new int[] { 1, 1, 2, 4, 8, 4 }, h.getHistogram())
assertEquals("[0,1)=1;[1,2)=1;[2,4)=2;[4,8)=4;[8,16)=8;[16,infinity)=4", h.toString())
assertEquals(correctBucketLabels.length, pos)
assertEquals(correctBucketLabels.length, labels.size())
assertEquals(correctBoundryLabels.length, boundryLabels.size())
assertEquals("[0,1)", entries.get(0).bucket)
assertEquals(4, entries.get(5).count)
assertEquals(6, entries.size())
assertTrue(recent.contains(1010))
assertTrue(recent.contains(9191))
assertEquals(3, h.getCount())
assertEquals(0, orderCounter.getAndIncrement())
assertEquals(1, orderCounter.getAndIncrement())
assertEquals(6, orderCounter.getAndIncrement())
assertEquals(5, orderCounter.getAndIncrement())
assertEquals(2, orderCounter.getAndIncrement())
assertEquals(3, orderCounter.getAndIncrement())
assertEquals(4, orderCounter.getAndIncrement())
assertEquals(new Utf8("hello"), ((GenericRecord) request).get("x"))
assertEquals(0, BinaryData.compare(b, 0, b, 0, schema))
assertEquals(-1, BinaryData.compare(b1, 0, b2, 0, schema))
assertEquals(1, BinaryData.compare(b2, 0, b1, 0, schema))
assertEquals(0, BinaryData.compare(b1, 0, b1, 0, schema))
assertEquals(0, BinaryData.compare(b2, 0, b2, 0, schema))
assertEquals(-1, compare(o1, o2, schema, comparable, comparator))
assertEquals(1, compare(o2, o1, schema, comparable, comparator))
assertEquals(0, compare(o1, o1, schema, comparable, comparator))
assertEquals(0, compare(o2, o2, schema, comparable, comparator))
assertEquals(comparator.hashCode(o1, schema), BinaryData.hashCode(b1, 0, b1.length, schema))
assertEquals(comparator.hashCode(o2, schema), BinaryData.hashCode(b2, 0, b2.length, schema))
assertEquals(foo, o)
assertEquals(foo.getInt32(), o.getInt32())
assertEquals(foo.getBool(), o.getBool())
assertEquals(0, o.getFooArrayCount())
assertEquals(s.getField("fooArray").defaultVal(), Lists.newArrayList())
assertEquals(N.class.getName(), SpecificData.get().getClass(s).getName())
assertEquals(org.apache.avro.protobuf.noopt.Test.class.getName(), s.getNamespace())
assertEquals(org.apache.avro.protobuf.multiplefiles.Foo.class.getPackage().getName(), fooSchema.getNamespace())
assertEquals(org.apache.avro.protobuf.multiplefiles.M.class.getName(), nSchema.getNamespace())
assertNotEquals(conversion.getRecommendedSchema(), s1)
assertEquals(conversion.getRecommendedSchema(), s2)
assertEquals("A", decodedDatum.get("field1").toString())
assertEquals("B", decodedDatum.get("field1").toString())
assertEquals("A", decodedDatum.get("field1").toString())
assertEquals(value, result)
assertEquals(value, result)
assertEquals(new BigDecimal("99892.123400000000000"), result)
assertEquals(value, result)
assertEquals(value, result)
assertEquals(new BigDecimal("99892.123400000000000"), result)
assertEquals(value, result)
assertEquals(new BigDecimal("123.45"), result)
assertEquals(decimal.getPrecision(), bigDecimal.precision())
assertTrue(decimal.getScale() >= bigDecimal.scale())
assertNotEquals(0, bigDecimal.compareTo(fromFixed))
assertNotEquals(bigDecimal, fromFixed)
assertEquals(new BigDecimal("123.45"), fromFixed)
assertEquals(decimal.getPrecision(), bigDecimal.precision())
assertTrue(decimal.getScale() >= bigDecimal.scale())
assertNotEquals(0, bigDecimal.compareTo(fromBytes))
assertNotEquals(bigDecimal, fromBytes)
assertEquals(new BigDecimal("123.45"), fromBytes)
Assert.assertEquals("myrecord", schema.getName())
Assert.assertEquals("org.example", schema.getNamespace())
Assert.assertEquals("org.example.oldrecord", schema.getAliases().iterator().next())
Assert.assertEquals(4, fields.size())
Assert.assertEquals(new Schema.Field("f0", Schema.create(Schema.Type.STRING)), fields.get(0))
Assert.assertEquals(new Schema.Field("f1", Schema.create(Schema.Type.LONG), "This is f1"), fields.get(1))
Assert.assertEquals(new Schema.Field("f2", optional, null, true), fields.get(2))
Assert.assertEquals(new Schema.Field("f3", optional2, null, Schema.Field.NULL_DEFAULT_VALUE), fields.get(3))
Assert.assertEquals("mydoc", s.getDoc())
Assert.assertEquals(2, size)
Assert.assertEquals("v1", s.getProp("p1"))
Assert.assertEquals("v2real", s.getProp("p2"))
Assert.assertEquals(7, s.getObjectProps().size())
Assert.assertEquals(true, s.getObjectProp("booleanProp"))
Assert.assertEquals(Integer.MAX_VALUE, s.getObjectProp("intProp"))
Assert.assertEquals(Long.MAX_VALUE, s.getObjectProp("longProp"))
Assert.assertEquals(1.0d, s.getObjectProp("floatProp"))
Assert.assertEquals(Double.MAX_VALUE, s.getObjectProp("doubleProp"))
Assert.assertEquals("ABC", s.getObjectProp("byteProp"))
Assert.assertEquals("abc", s.getObjectProp("stringProp"))
Assert.assertEquals(7, f.getObjectProps().size())
Assert.assertEquals(true, f.getObjectProp("booleanProp"))
Assert.assertEquals(Integer.MAX_VALUE, f.getObjectProp("intProp"))
Assert.assertEquals(Long.MAX_VALUE, f.getObjectProp("longProp"))
Assert.assertEquals(1.0d, f.getObjectProp("floatProp"))
Assert.assertEquals(Double.MAX_VALUE, f.getObjectProp("doubleProp"))
Assert.assertEquals("ABC", f.getObjectProp("byteProp"))
Assert.assertEquals("abc", f.getObjectProp("stringProp"))
Assert.assertEquals(1, s.getObjectProps().size())
Assert.assertEquals(7, valueCollection.size())
Assert.assertEquals(true, iter.next())
Assert.assertEquals(Integer.MAX_VALUE, iter.next())
Assert.assertEquals(Long.MAX_VALUE, iter.next())
Assert.assertEquals(1.0d, iter.next())
Assert.assertEquals(Double.MAX_VALUE, iter.next())
Assert.assertEquals("ABC", iter.next())
Assert.assertEquals("abc", iter.next())
Assert.assertEquals(1, f.getObjectProps().size())
Assert.assertEquals(7, valueCollection.size())
Assert.assertEquals(true, iter.next())
Assert.assertEquals(Integer.MAX_VALUE, iter.next())
Assert.assertEquals(Long.MAX_VALUE, iter.next())
Assert.assertEquals(1.0d, iter.next())
Assert.assertEquals(Double.MAX_VALUE, iter.next())
Assert.assertEquals("ABC", iter.next())
Assert.assertEquals("abc", iter.next())
Assert.assertEquals(values.size(), valueMap.size())
Assert.assertEquals(true, valueMap.get("booleanKey"))
Assert.assertEquals(Integer.MAX_VALUE, valueMap.get("intKey"))
Assert.assertEquals(Long.MAX_VALUE, valueMap.get("longKey"))
Assert.assertEquals(1.0d, valueMap.get("floatKey"))
Assert.assertEquals(Double.MAX_VALUE, valueMap.get("doubleKey"))
Assert.assertEquals("ABC", valueMap.get("byteKey"))
Assert.assertEquals("abc", valueMap.get("stringKey"))
Assert.assertEquals(values.size(), valueMap.size())
Assert.assertEquals(true, valueMap.get("booleanKey"))
Assert.assertEquals(Integer.MAX_VALUE, valueMap.get("intKey"))
Assert.assertEquals(Long.MAX_VALUE, valueMap.get("longKey"))
Assert.assertEquals(1.0d, valueMap.get("floatKey"))
Assert.assertEquals(Double.MAX_VALUE, valueMap.get("doubleKey"))
Assert.assertEquals("ABC", valueMap.get("byteKey"))
Assert.assertEquals("abc", valueMap.get("stringKey"))
Assert.assertEquals("myrecord", s1.getName())
Assert.assertEquals("myrecord", s2.getName())
Assert.assertEquals("myrecord", s3.getName())
Assert.assertEquals("myrecord", s4.getName())
Assert.assertEquals("org.example", s1.getNamespace())
Assert.assertEquals("org.example", s2.getNamespace())
Assert.assertEquals("org.example", s3.getNamespace())
Assert.assertEquals("org.example", s4.getNamespace())
Assert.assertEquals("org.example.myrecord", s1.getFullName())
Assert.assertEquals("org.example.myrecord", s2.getFullName())
Assert.assertEquals("org.example.myrecord", s3.getFullName())
Assert.assertEquals("org.example.myrecord", s4.getFullName())
Assert.assertEquals(expected, built1)
Assert.assertEquals(expected, built1)
Assert.assertEquals(expected, built1)
Assert.assertEquals(expected, built1)
Assert.assertEquals(expected, built1)
Assert.assertEquals(expected, built1)
Assert.assertEquals(expected, built1)
Assert.assertEquals(expected, built1)
Assert.assertEquals(Schema.create(type), bareByName)
Assert.assertEquals(bareByName, bare)
Assert.assertEquals("LongList", schema.getName())
Assert.assertEquals(2, fields.size())
Assert.assertEquals(new Schema.Field("value", Schema.create(Schema.Type.LONG), null), fields.get(0))
Assert.assertEquals(Schema.Type.UNION, fields.get(1).schema().getType())
Assert.assertEquals(Schema.Type.NULL, fields.get(1).schema().getTypes().get(0).getType())
Assert.assertEquals(Schema.Type.RECORD, recordSchema.getType())
Assert.assertEquals("LongList", recordSchema.getName())
Assert.assertEquals(NullNode.getInstance(), fields.get(1).defaultValue())
Assert.assertEquals(expected, schema)
Assert.assertEquals(expected, schema)
Assert.assertEquals(expected, schema)
Assert.assertEquals(expected, schema1)
Assert.assertEquals(expected, schema2)
Assert.assertEquals(expected, schema3)
Assert.assertEquals(expected, schema1)
Assert.assertEquals(expected, schema2)
Assert.assertEquals(expected, schema3)
Assert.assertEquals(expected, schema)
Assert.assertEquals(expected, schema)
Assert.assertEquals("documented", rec.getField("documented").doc())
Assert.assertEquals(Order.ASCENDING, rec.getField("ascending").order())
Assert.assertEquals(Order.DESCENDING, rec.getField("descending").order())
Assert.assertEquals(Order.IGNORE, rec.getField("ignored").order())
Assert.assertEquals(full, shortcut)
Assert.assertEquals(Schema.createFixed("Foo", null, null, 1), f)
Assert.assertEquals(expected, r.getField(name).schema())
Assert.assertEquals(false, newRec.get("boolF"))
Assert.assertEquals(false, newRec.get("boolU"))
Assert.assertEquals(1, newRec.get("intF"))
Assert.assertEquals(1, newRec.get("intU"))
Assert.assertEquals(2L, newRec.get("longF"))
Assert.assertEquals(2L, newRec.get("longU"))
Assert.assertEquals(3f, newRec.get("floatF"))
Assert.assertEquals(3f, newRec.get("floatU"))
Assert.assertEquals(4d, newRec.get("doubleF"))
Assert.assertEquals(4d, newRec.get("doubleU"))
Assert.assertEquals("def", newRec.get("stringF").toString())
Assert.assertEquals("def", newRec.get("stringU").toString())
Assert.assertEquals(bufdef, newRec.get("bytesF1"))
Assert.assertEquals(bufdef, newRec.get("bytesF2"))
Assert.assertEquals(bufdef, newRec.get("bytesF3"))
Assert.assertEquals(bufdef, newRec.get("bytesU"))
Assert.assertEquals("S", newRec.get("enumF").toString())
Assert.assertEquals("SS", newRec.get("enumU").toString())
Assert.assertEquals(mapdef.size(), map.size())
Assert.assertEquals(newRec.get("mapF"), newRec.get("mapU"))
Assert.assertEquals(arrdef.size(), arr.size())
Assert.assertEquals(newRec.get("arrayF"), newRec.get("arrayU"))
Assert.assertEquals(recdef, newRec.get("recordF"))
Assert.assertEquals(recdef2, newRec.get("recordU"))
Assert.assertEquals("S", newRec.get("byName").toString())
Assert.assertEquals(1, rec1.get("requiredInt"))
Assert.assertEquals(null, rec1.get("optionalInt"))
Assert.assertEquals(3, rec1.get("nullableIntWithDefault"))
Assert.assertEquals(1, rec2.get("requiredInt"))
Assert.assertEquals(2, rec2.get("optionalInt"))
Assert.assertEquals(13, rec2.get("nullableIntWithDefault"))
Assert.assertEquals(a2, a1)
fail("File descriptor leaked from new DataFileReader() over " + maxTries + " tries: (" + sb.substring(0, sb.length() - 1) + ")")
assertEquals("TestSchema", r.getSchema().getName())
assertEquals("TestSchema", r2.getSchema().getName())
Assert.assertNotNull(field.defaultVal())
Assert.assertArrayEquals(new byte[16], (byte[]) field.defaultVal())
Assert.assertFalse(schema.isError())
Assert.assertTrue(fields.get(0).aliases().contains("f0alias"))
Assert.assertNotEquals(new Schema.Field("f3", optional2, null, (Object) null), fields.get(3))
Assert.assertTrue(s.getObjectProp("booleanProp") instanceof Boolean)
Assert.assertTrue(s.getObjectProp("intProp") instanceof Integer)
Assert.assertTrue(s.getObjectProp("intProp") instanceof Integer)
Assert.assertTrue(s.getObjectProp("longProp") instanceof Long)
Assert.assertTrue(s.getObjectProp("floatProp") instanceof Double)
Assert.assertTrue(s.getObjectProp("doubleProp") instanceof Double)
Assert.assertTrue(s.getObjectProp("byteProp") instanceof String)
Assert.assertTrue(s.getObjectProp("stringProp") instanceof String)
Assert.assertTrue(f.getObjectProp("booleanProp") instanceof Boolean)
Assert.assertTrue(f.getObjectProp("intProp") instanceof Integer)
Assert.assertTrue(f.getObjectProp("intProp") instanceof Integer)
Assert.assertTrue(f.getObjectProp("longProp") instanceof Long)
Assert.assertTrue(f.getObjectProp("floatProp") instanceof Double)
Assert.assertTrue(f.getObjectProp("doubleProp") instanceof Double)
Assert.assertTrue(f.getObjectProp("byteProp") instanceof String)
Assert.assertTrue(f.getObjectProp("stringProp") instanceof String)
Assert.assertTrue(s.getObjectProp("arrayProp") instanceof Collection)
Assert.assertTrue(f.getObjectProp("arrayProp") instanceof Collection)
Assert.assertTrue(s.getObjectProp("mapProp") instanceof Map)
Assert.assertTrue(valueMap.get("booleanKey") instanceof Boolean)
Assert.assertTrue(valueMap.get("intKey") instanceof Integer)
Assert.assertTrue(valueMap.get("longKey") instanceof Long)
Assert.assertTrue(valueMap.get("floatKey") instanceof Double)
Assert.assertTrue(valueMap.get("doubleKey") instanceof Double)
Assert.assertTrue(valueMap.get("byteKey") instanceof String)
Assert.assertTrue(valueMap.get("stringKey") instanceof String)
Assert.assertTrue(f.getObjectProp("mapProp") instanceof Map)
Assert.assertTrue(valueMap.get("booleanKey") instanceof Boolean)
Assert.assertTrue(valueMap.get("intKey") instanceof Integer)
Assert.assertTrue(valueMap.get("longKey") instanceof Long)
Assert.assertTrue(valueMap.get("floatKey") instanceof Double)
Assert.assertTrue(valueMap.get("doubleKey") instanceof Double)
Assert.assertTrue(valueMap.get("byteKey") instanceof String)
Assert.assertTrue(valueMap.get("stringKey") instanceof String)
Assert.assertTrue(rec.getField("aliased").aliases().contains("anAlias"))
Assert.assertNull(newRec.get("nullF"))
Assert.assertNull(newRec.get("nullU"))
Assert.assertArrayEquals(bytedef, ((GenericData.Fixed) newRec.get("fixedF1")).bytes())
Assert.assertArrayEquals(bytedef, ((GenericData.Fixed) newRec.get("fixedF2")).bytes())
Assert.assertArrayEquals(bytedef, ((GenericData.Fixed) newRec.get("fixedF3")).bytes())
Assert.assertArrayEquals(bytedef, ((GenericData.Fixed) newRec.get("fixedU")).bytes())
Assert.assertNotSame(schema1, schema2)
Assert.assertNotSame(schema1, schema3)
MatcherAssert.assertThat(LogicalTypes.getCustomRegisteredTypes(), IsMapContaining.hasEntry("registered", factory))
MatcherAssert.assertThat(LogicalTypes.getCustomRegisteredTypes(), IsMapContaining.hasEntry("factory", factory))
MatcherAssert.assertThat(LogicalTypes.getCustomRegisteredTypes(), IsMapContaining.hasEntry("logicalTypeName", factory))
MatcherAssert.assertThat(LogicalTypes.getCustomRegisteredTypes(), IsMapContaining.hasEntry(equalTo("service-example"), instanceOf(LogicalTypes.LogicalTypeFactory.class)))
assertThat(decoded.get("parentField1").toString(), equalTo("parentValue1"))
assertThat(decoded.get("parentField2").toString(), equalTo("parentValue2"))
assertThat(((GenericData.Record) decoded.get("child1")).get("childField").toString(), equalTo("childValue1"))
assertThat(decoded.get("parentField1").toString(), equalTo("parentValue1"))
assertThat(decoded.get("parentField2").toString(), equalTo("parentValue2"))
assertThat(((GenericData.Record) decoded.get("child1")).get("childField").toString(), equalTo("childValue1"))
fail("A execução falhou por uma causa deliberada", "File descriptor leaked from new DataFileReader() over " + maxTries + " tries: (" + sb.substring(0, sb.length() - 1) + ")")
Assert.assertTrue(RecordBuilderBase.isValidValue(new Field("f", Schema.create(Type.NULL), null, null), null))
Assert.assertTrue(RecordBuilderBase.isValidValue(new Field("f", unionWithoutNull, null, null), new Object()))
Assert.assertFalse(RecordBuilderBase.isValidValue(new Field("f", unionWithoutNull, null, null), null))
Assert.assertTrue(RecordBuilderBase.isValidValue(new Field("f", unionWithNull, null, null), new Object()))
Assert.assertTrue(RecordBuilderBase.isValidValue(new Field("f", unionWithNull, null, null), null))
assertTrue(intClass.isPrimitive())
assertFalse(integerClass.isPrimitive())
assertNotNull(Reflection.class.getMethod("primitive", intClass))
assertNotNull(Reflection.class.getMethod("primitiveWrapper", integerClass))
assertEquals(1, record.get("x"))
assertEquals("str", record.get("y"))
assertEquals(before, after)
assertEquals(record, copy)
assertEquals(record, copy)
assertTrue(out.flushCount < currentCount && out.flushCount >= flushCounter)
Assert.assertEquals(allAsV2, decodedUsingV2)
Assert.assertEquals(V2_BUILDER.set("id", 6L).set("message", "m-6").clear("data").build(), record)
Assert.assertEquals(V2_BUILDER.set("id", 4L).set("message", "m-4").clear("data").build(), record)
Assert.assertEquals(V1_RECORDS.get(2), record)
Assert.assertEquals(b0.array(), b1.array())
assertEquals(1, data.resolveUnion(s, new ArrayList<Float>()))
assertEquals(1, data.resolveUnion(s, new HashMap<String, Float>()))
assertEquals(1, data.resolveUnion(s, map))
assertEquals(1, data.resolveUnion(s, new GenericData.Fixed(f)))
assertEquals(1, data.resolveUnion(s, E.A))
assertEquals(1, data.resolveUnion(s, ByteBuffer.wrap(new byte[] { 1 })))
assertEquals(Schema.Type.UNION, response.getType())
assertEquals(Schema.Type.NULL, response.getTypes().get(0).getType())
assertEquals(Schema.Type.STRING, response.getTypes().get(1).getType())
assertEquals(Schema.Type.UNION, param.getType())
assertEquals(Schema.Type.NULL, param.getTypes().get(0).getType())
assertEquals(Schema.Type.STRING, param.getTypes().get(1).getType())
assertEquals(String.class, ReflectData.get().getClass(response))
assertEquals(String.class, ReflectData.get().getClass(param))
assertEquals(Schema.Type.STRING, r10Schema.getType())
assertEquals(R10.class.getName(), r10Schema.getProp("java-class"))
assertEquals(Schema.Type.RECORD, r11Record.getType())
assertEquals(JsonProperties.NULL_VALUE, r11Field.defaultVal())
assertEquals(Schema.Type.UNION, r11FieldSchema.getType())
assertEquals(Schema.Type.NULL, r11FieldSchema.getTypes().get(0).getType())
assertEquals(Schema.Type.STRING, r11String.getType())
assertEquals(Schema.Type.UNION, response.getType())
assertEquals(Schema.Type.NULL, response.getTypes().get(0).getType())
assertEquals(Schema.Type.STRING, response.getTypes().get(1).getType())
assertEquals(Schema.Type.UNION, param.getType())
assertEquals(Schema.Type.NULL, param.getTypes().get(0).getType())
assertEquals(Schema.Type.STRING, param.getTypes().get(1).getType())
assertEquals(String.class, ReflectData.get().getClass(response))
assertEquals(String.class, ReflectData.get().getClass(param))
assertEquals(Schema.Type.INT, s.getField("x").schema().getType())
assertEquals(new Schema.Parser().parse("{\"type\":\"array\",\"items\":[\"null\",\"string\"]}"), s.getField("strings").schema())
assertEquals(Schema.Type.NULL, s.getType())
assertEquals(Schema.Type.INT, message.getResponse().getType())
assertEquals(Schema.Type.INT, field.schema().getType())
assertEquals(Schema.Type.RECORD, e1.getType())
assertTrue(e1.isError())
assertEquals(Schema.Type.UNION, messageSchema.getType())
assertEquals(Schema.Type.NULL, messageSchema.getTypes().get(0).getType())
assertEquals(Schema.Type.STRING, messageSchema.getTypes().get(1).getType())
assertEquals(Schema.Type.UNION, response.getType())
assertEquals(Schema.Type.STRING, response.getTypes().get(0).getType())
assertEquals(e1, response.getTypes().get(1))
assertEquals(noPackage.getName(), ReflectData.getClassName(s))
assertEquals(object, after)
assertEquals(schemaJson, ReflectData.get().getSchema(type).toString())
assertEquals(record, decoded)
assertTrue(decoded.i1 == null)
assertTrue(decoded.i2 == null)
assertTrue(decoded.i3 == null)
assertTrue(decoded.i4 == null)
assertTrue(decoded.i5 == 5)
assertTrue(decoded.i6 == 6)
assertTrue(decoded.i7.getTime() == 7)
assertTrue(decoded.i8 == 8)
assertTrue(decoded.i9.getTime() == 9)
assertTrue(decoded.i10.getTime() == 10)
assertTrue(decoded.i11.getTime() == 11)
assertEquals(schm.toString(), "{\"type\":\"record\",\"name\":\"AvroEncRecord\",\"namespace" + "\":\"org.apache.avro.reflect.TestReflect\",\"fields\":[{\"name\":\"date\"," + "\"type\":{\"type\":\"long\",\"CustomEncoding\":\"DateAsLongEncoding\"}}]}")
assertEquals(record, decoded)
assertEquals(a, decoded)
assertEquals(b, decoded)
assertEquals(reflected, reparsed)
assertEquals("{\"type\":\"string\",\"java-class\":\"" + c.getName() + "\"}", schema.toString())
assertEquals(0, reflectData.compare(datum, decoded, schema, equals))
assertEquals(data.getSchema(data.getClass(s)).toString(), "{\"type\":\"record\",\"name\":\"Z\",\"namespace\":\"org.apache.avro.reflect.TestReflect\",\"fields\":[]}")
Assert.assertEquals(requiredSchema(boolean.class), primitives.getField("aBoolean").schema())
Assert.assertEquals(requiredSchema(byte.class), primitives.getField("aByte").schema())
Assert.assertEquals(requiredSchema(short.class), primitives.getField("aShort").schema())
Assert.assertEquals(requiredSchema(int.class), primitives.getField("anInt").schema())
Assert.assertEquals(requiredSchema(long.class), primitives.getField("aLong").schema())
Assert.assertEquals(requiredSchema(float.class), primitives.getField("aFloat").schema())
Assert.assertEquals(requiredSchema(double.class), primitives.getField("aDouble").schema())
Assert.assertEquals(nullableSchema(boolean.class), wrappers.getField("aBoolean").schema())
Assert.assertEquals(nullableSchema(byte.class), wrappers.getField("aByte").schema())
Assert.assertEquals(nullableSchema(short.class), wrappers.getField("aShort").schema())
Assert.assertEquals(nullableSchema(int.class), wrappers.getField("anInt").schema())
Assert.assertEquals(nullableSchema(long.class), wrappers.getField("aLong").schema())
Assert.assertEquals(nullableSchema(float.class), wrappers.getField("aFloat").schema())
Assert.assertEquals(nullableSchema(double.class), wrappers.getField("aDouble").schema())
Assert.assertEquals(nullableSchema(Primitives.class), wrappers.getField("anObject").schema())
assertEquals(pojoWithList, deserialized)
assertEquals(pojoWithArray, deserialized)
assertEquals(pojo, deserializedPojo)
assertTrue(deserializedPojo.getTestEnum().is_V())
assertTrue(employeeRecord instanceof GenericRecord)
assertTrue(key instanceof GenericRecord)
assertTrue(value instanceof GenericRecord)
assertTrue((id.equals(1) && name.equals("Foo")) || (id.equals(2) && name.equals("Bar")))
assertNotNull(co.getEmployees())
assertEquals(2, co.getEmployees().size())
assertTrue(employeeMapElement instanceof GenericRecord)
assertEquals(11, key)
assertTrue(value instanceof GenericRecord)
assertEquals("Foo", name)
assertTrue(companyMap instanceof GenericArray)
assertTrue(companyMapElement instanceof GenericRecord)
assertEquals(14, key)
assertEquals("CompanyFoo", value)
assertNotNull(co.getEmployees())
assertEquals(1, co.getEmployees().size())
assertTrue(map1element instanceof GenericRecord)
assertEquals(1, key)
assertEquals("Foo", value.toString())
assertEquals(map1obj, map2obj)
assertNotNull(entity.getMap1())
assertEquals(1, entity.getMap1().size())
assertEquals(entity.getMap1(), entity.getMap2())
assertEquals(entity.getMap1(), entity.getMap3())
assertEquals(entity.getMap1(), entity.getMap4())
assertEquals(map1schema.getFullName(), "org.apache.avro.reflect.PairIntegerString")
assertEquals(map1schema, map2schema)
assertEquals(map1schema, map3schema)
assertEquals(map1schema, map4schema)
Assert.assertNotEquals(b0.array(), b1.array())
Assert.assertArrayEquals(fileBuffer, buffer.array())
assertThat(s.getField("a1").schema().getLogicalType(), nullValue())
assertThat(getCapturedStdErr(), is(""))
assertThat(s.getField("a1").schema().getLogicalType(), nullValue())
assertThat(getCapturedStdErr(), containsString("Ignored the A.a1.logicalType property (\"date\"). It should" + " probably be nested inside the \"type\" for the field."))
assertThat(s.getField("a1").schema().getLogicalType(), nullValue())
assertThat(s.getField("a1").schema().getLogicalType(), nullValue())
assertThat(getCapturedStdErr(), is(""))
assertThat(s.getField("a1").schema().getLogicalType(), is(LogicalTypes.date()))
assertThat(s.getField("a1").schema().getLogicalType(), nullValue())
assertThat(getCapturedStdErr(), containsString("Ignoring invalid logical type for name: date"))
assertThat(data.getSchema(data.getClass(s)).getFullName(), is("org.apache.avro.reflect.TestReflect.SampleRecord.AnotherSampleRecord"))
assertThat(protocol.getTypes(), contains(recordSchema))
assertThat(protocol.getMessages().keySet(), containsInAnyOrder("store", "findById", "exists"))
assertThat(storeArgument.schema(), equalTo(recordSchema))
assertThat(findByIdArgument.schema(), equalTo(Schema.create(Schema.Type.STRING)))
assertThat(findByIdResponse, equalTo(recordSchema))
assertThat(existsArgument.schema(), equalTo(Schema.create(Schema.Type.STRING)))
assertNotNull(parsedStringSchema)
assertNotNull(parsedArrayOfStringSchema)
assertEquals(parsedStringSchema.toString(), parsedArrayOfStringSchema.toString())
assertEquals(expected, schema)
assertNotNull(schemaString)
assertNotNull(schemaString)
assertNotNull(schemaString)
assertNotNull(schemaString)
assertEquals(2, schema.getFields().size())
assertTrue(schema.isUnion())
assertTrue(schema.isUnion())
assertFalse(schema.isUnion())
assertFalse(schema.isUnion())
assertFalse(schema.isUnion())
assertFalse(schema.isUnion())
assertFalse(schema.isUnion())
assertTrue(schema.isNullable())
assertFalse(schema.isNullable())
assertFalse(schema.isNullable())
assertEquals(parent, parentWithoutInlinedChildReference)
assertTrue(field.hasDefaultValue())
assertEquals(1, field.defaultVal())
assertEquals(1, GenericData.get().getDefaultValue(field))
assertTrue(field.hasDefaultValue())
assertEquals(Integer.MIN_VALUE, field.defaultVal())
assertEquals(Integer.MIN_VALUE, GenericData.get().getDefaultValue(field))
assertTrue(field.hasDefaultValue())
assertEquals(Integer.MAX_VALUE, field.defaultVal())
assertEquals(Integer.MAX_VALUE, GenericData.get().getDefaultValue(field))
assertTrue(field.hasDefaultValue())
assertEquals(1, field.defaultVal())
assertEquals(1, GenericData.get().getDefaultValue(field))
assertTrue(field.hasDefaultValue())
assertEquals(Integer.MIN_VALUE, field.defaultVal())
assertEquals(Integer.MIN_VALUE, GenericData.get().getDefaultValue(field))
assertTrue(field.hasDefaultValue())
assertEquals(Integer.MAX_VALUE, field.defaultVal())
assertEquals(Integer.MAX_VALUE, GenericData.get().getDefaultValue(field))
assertTrue(field.hasDefaultValue())
assertEquals(1L, field.defaultVal())
assertEquals(1L, GenericData.get().getDefaultValue(field))
assertTrue(field.hasDefaultValue())
assertEquals(Long.MIN_VALUE, field.defaultVal())
assertEquals(Long.MIN_VALUE, GenericData.get().getDefaultValue(field))
assertTrue(field.hasDefaultValue())
assertEquals(Long.MAX_VALUE, field.defaultVal())
assertEquals(Long.MAX_VALUE, GenericData.get().getDefaultValue(field))
assertTrue(field.hasDefaultValue())
assertEquals(1L, field.defaultVal())
assertEquals(1L, GenericData.get().getDefaultValue(field))
assertTrue(field.hasDefaultValue())
assertEquals(1.0d, field.defaultVal())
assertEquals(1.0d, GenericData.get().getDefaultValue(field))
assertTrue(field.hasDefaultValue())
assertEquals(1.0d, field.defaultVal())
assertEquals(1.0d, GenericData.get().getDefaultValue(field))
assertTrue(field.hasDefaultValue())
assertEquals(1.0d, field.defaultVal())
assertEquals(1.0d, GenericData.get().getDefaultValue(field))
assertTrue(field.hasDefaultValue())
assertEquals(1.0d, field.defaultVal())
assertEquals(1.0d, GenericData.get().getDefaultValue(field))
assertTrue(field.hasDefaultValue())
assertEquals(1.0f, field.defaultVal())
assertEquals(1.0f, GenericData.get().getDefaultValue(field))
assertTrue(field.hasDefaultValue())
assertEquals(1.0f, field.defaultVal())
assertEquals(1.0f, GenericData.get().getDefaultValue(field))
assertTrue(field.hasDefaultValue())
assertEquals(1.0f, field.defaultVal())
assertEquals(1.0f, GenericData.get().getDefaultValue(field))
assertTrue(field.hasDefaultValue())
assertEquals(1.0f, field.defaultVal())
assertEquals(1.0f, GenericData.get().getDefaultValue(field))
assertEquals(schema, schema2)
assertEquals("name", name.getQualified("space"))
assertEquals("space.name", name.getQualified("otherdefault"))
assertEquals("Int", nameInt.getQualified("space"))
Assert.assertEquals(bbr, deserialized)
Assert.assertEquals(toCheck, o)
assertEquals(StringBuilder.class, object.getClass())
assertEquals("Hello", builder.toString())
assertEquals(r, o)
Assert.assertNotNull(toCheck)
Assert.assertNotNull(o)
Assertions.assertEquals(original, copy)
assertEquals(r0, r1)
assertEquals(r0, r2)
assertEquals(r1, r2)
assertFalse(record2.equals(record1))
assertFalse(record1.equals(record2))
assertTrue(forward.equals(backward))
assertEquals(Integer.valueOf(99), array.get(0))
assertEquals(array, list)
assertEquals(list, array)
assertEquals(list.hashCode(), array.hashCode())
assertEquals(0, array.size())
assertEquals(5, array.size())
assertEquals(Integer.valueOf(6), array.get(0))
assertEquals(6, array.size())
assertEquals(Integer.valueOf(0), array.get(1))
assertEquals(Integer.valueOf(4), array.get(5))
assertEquals(Integer.valueOf(7), array.get(6))
assertEquals(7, array.size())
assertEquals(Integer.valueOf(6), array.get(0))
assertEquals(Integer.valueOf(4), array.get(5))
assertEquals(Integer.valueOf(8), array.get(1))
assertEquals(Integer.valueOf(0), array.get(2))
assertEquals(Integer.valueOf(6), array.get(0))
assertEquals(8, array.size())
assertEquals(10, array.size())
assertEquals(Integer.valueOf(0), array.get(0))
assertEquals(Integer.valueOf(9), array.get(9))
assertEquals(9, array.size())
assertEquals(Integer.valueOf(1), array.get(0))
assertEquals(Integer.valueOf(2), array.get(1))
assertEquals(Integer.valueOf(9), array.get(8))
assertEquals(Integer.valueOf(9), array.remove(8))
assertEquals(8, array.size())
assertEquals(Integer.valueOf(88), array.get(8))
assertEquals(10, array.size())
assertEquals(Integer.valueOf(0), array.get(0))
assertEquals(Integer.valueOf(5), array.get(5))
assertEquals(Integer.valueOf(5), array.set(5, 55))
assertEquals(10, array.size())
assertEquals(Integer.valueOf(55), array.get(5))
assertEquals("\"a\\nb\"", data.toString(bytes))
assertEquals("\"a\\nb\"", data.toString(bytes))
assertEquals("{\"a\\n\\\\b\": \"a\\n\\\\b\"}", data.toString(m))
assertEquals("[97, 10, 98]", data.toString(new GenericData.Fixed(Schema.createFixed("test", null, null, 3), new byte[] { 'a', '\n', 'b' })))
assertEquals("\"/\"", data.toString("/"))
assertEquals("\"Infinity\"", data.toString(Float.POSITIVE_INFINITY))
assertEquals("\"-Infinity\"", data.toString(Float.NEGATIVE_INFINITY))
assertEquals("\"NaN\"", data.toString(Float.NaN))
assertEquals("\"Infinity\"", data.toString(Double.POSITIVE_INFINITY))
assertEquals("\"-Infinity\"", data.toString(Double.NEGATIVE_INFINITY))
assertEquals("\"NaN\"", data.toString(Double.NaN))
assertEquals("\"1961-04-12T06:07:10Z\"", data.toString(Instant.parse("1961-04-12T06:07:10Z")))
assertEquals("\"1961-04-12\"", data.toString(LocalDate.parse("1961-04-12")))
assertEquals("\"1961-04-12T06:07:10\"", data.toString(LocalDateTime.parse("1961-04-12T06:07:10")))
assertEquals("\"10:10:10\"", data.toString(LocalTime.parse("10:10:10")))
assertEquals(0, z.compareTo(z2))
assertTrue(y.compareTo(z) > 0)
assertTrue(z.compareTo(y) < 0)
assertEquals(buffer, buffer_copy)
assertTrue(GenericData.get().validate(schema, z))
assertTrue(GenericData.get().validate(schema, y))
assertTrue(GenericData.get().validate(schema, x))
assertFalse(GenericData.get().validate(schema, w))
assertTrue(GenericData.get().validate(schema, null))
assertTrue(GenericData.get().validate(schema, z))
assertTrue(GenericData.get().validate(schema, y))
assertTrue(GenericData.get().validate(schema, x))
assertFalse(GenericData.get().validate(schema, w))
assertTrue(GenericData.get().validate(schema, null))
assertTrue(gd.validate(schema, new GenericData.EnumSymbol(schema, "ONE")))
assertTrue(gd.validate(schema, new GenericData.EnumSymbol(schema, anEnum.ONE)))
assertTrue(GenericData.get().validate(unionSchema, record))
assertTrue(record == list.peek())
assertNull(list.peek())
Assert.assertEquals(anArray, builder.get("anArray"))
Assert.assertEquals(1, record.get("intField"))
Assert.assertEquals(anArray, record.get("anArray"))
Assert.assertEquals("0", record.get("id").toString())
Assert.assertEquals(builder, new GenericRecordBuilder(builder))
Assert.assertEquals(record, new GenericRecordBuilder(record).build())
assertEquals(0, GenericData.get().compare(specificRecord, deserialized, FooBarSpecificRecord.SCHEMA$))
assertEquals(specificRecord, deserialized)
Assert.assertNull(builder.get("id"))
Assert.assertNotNull(record.get("id"))
Assert.assertNull(builder.get("intField"))
assertEquals(expectedResult, checkReaderWriterCompatibility(reader, WRITER_SCHEMA))
assertEquals(expectedResult, checkReaderWriterCompatibility(reader, WRITER_SCHEMA))
assertEquals(expectedResult, checkReaderWriterCompatibility(reader, WRITER_SCHEMA))
assertEquals(expectedResult, checkReaderWriterCompatibility(reader, WRITER_SCHEMA))
assertEquals(SchemaCompatibility.SchemaCompatibilityType.INCOMPATIBLE, compatibility.getType())
assertEquals(SchemaCompatibility.SchemaCompatibilityResult.incompatible(SchemaIncompatibilityType.READER_FIELD_MISSING_DEFAULT_VALUE, reader, WRITER_SCHEMA, "newfield1", asList("", "fields", "1")), compatibility.getResult())
assertEquals(String.format("Data encoded using writer schema:%n%s%n" + "will or may fail to decode using reader schema:%n%s%n", WRITER_SCHEMA.toString(true), reader.toString(true)), compatibility.getDescription())
assertEquals(reader, compatibility.getReader())
assertEquals(WRITER_SCHEMA, compatibility.getWriter())
assertEquals(validResult, checkReaderWriterCompatibility(validReader, STRING_ARRAY_SCHEMA))
assertEquals(invalidResult, checkReaderWriterCompatibility(invalidReader, STRING_ARRAY_SCHEMA))
assertEquals(validResult, checkReaderWriterCompatibility(validReader, STRING_SCHEMA))
assertEquals(invalidResult, checkReaderWriterCompatibility(INT_SCHEMA, STRING_SCHEMA))
assertEquals(SchemaCompatibilityType.INCOMPATIBLE, result.getType())
assertEquals(reader, compatibility.getReader())
assertEquals(writer, compatibility.getWriter())
assertEquals(SchemaCompatibilityType.INCOMPATIBLE, compatibilityResult.getCompatibility())
assertEquals(incompatibilityTypes.size(), compatibilityResult.getIncompatibilities().size())
assertEquals(description, compatibility.getDescription())
assertNotNull(loc.get("lat"))
assertNull(loc.get("long_r2"))
Assert.assertFalse(builder.has("intField"))
assertThat(conversion.fromBytes(d1bytes, bytesSchema, decimal), is(d1))
assertThat(conversion.fromBytes(d2bytes, bytesSchema, decimal), is(d2))
assertThat(conversion.fromFixed(d1fixed, fixedSchema, decimal), is(d1))
assertThat(conversion.fromFixed(d2fixed, fixedSchema, decimal), is(d2))
assertEquals(JsonProperties.NULL_VALUE, leftField.defaultVal())
assertEquals(Type.UNION, leftFieldSchema.getType())
assertEquals("null", leftFieldSchema.getTypes().get(0).getName())
assertEquals("Node", leftFieldSchema.getTypes().get(1).getName())
assertEquals(JsonProperties.NULL_VALUE, rightField.defaultVal())
assertEquals(Type.UNION, rightFieldSchema.getType())
assertEquals("null", rightFieldSchema.getTypes().get(0).getName())
assertEquals("Node", rightFieldSchema.getTypes().get(1).getName())
assertEquals(JsonProperties.NULL_VALUE, leftField.defaultVal())
assertEquals(Type.UNION, leftFieldSchema.getType())
assertEquals("null", leftFieldSchema.getTypes().get(0).getName())
assertEquals("string", leftFieldSchema.getTypes().get(1).getName())
assertEquals("Node", leftFieldSchema.getTypes().get(2).getName())
assertEquals(JsonProperties.NULL_VALUE, rightField.defaultVal())
assertEquals(Type.UNION, rightFieldSchema.getType())
assertEquals("null", rightFieldSchema.getTypes().get(0).getName())
assertEquals("string", rightFieldSchema.getTypes().get(1).getName())
assertEquals("Node", rightFieldSchema.getTypes().get(2).getName())
assertEquals(33, exceptions)
assertFalse(p1.equals(p2))
assertNotNull(parsedStringProtocol)
assertNotNull(parsedArrayOfStringProtocol)
assertEquals(parsedStringProtocol.toString(), parsedArrayOfStringProtocol.toString())
assertEquals(m1.getName(), m2.getName())
assertEquals(m1.getDoc(), m2.getDoc())
assertEquals(m1.getProp("foo"), m2.getProp("foo"))
Assert.assertEquals(genericEnumSymbol, readRecord(schema1, data).get("field"))
Assert.assertEquals(genericEnumSymbol, readRecord(schema2, data).get("field"))
Assert.assertEquals(2, action.rindex)
Assert.assertEquals(2, action.rindex)
Assert.assertEquals(2, action.rindex)
Assert.assertEquals(4, action.rindex)
Assert.assertTrue(grammar.production[1] instanceof Symbol.UnionAdjustAction)
Assert.assertTrue(grammar.production[1] instanceof Symbol.UnionAdjustAction)
Assert.assertTrue(grammar.production[1] instanceof Symbol.UnionAdjustAction)
Assert.assertTrue(grammar.production[1] instanceof Symbol.UnionAdjustAction)
assertThat(outer, not(outer2))
assertThat(out.get("a1"), instanceOf(String.class))
assertThat(((GenericRecord) out.get("inner")).get("b1"), instanceOf(String.class))
Assert.assertEquals(nextIndex, 10)
Assert.assertEquals(legacydata.length, result.length)
Assert.assertArrayEquals(legacydata, result)
Assert.assertEquals(complexdata.length, result2.length)
Assert.assertArrayEquals(complexdata, result2)
Assert.assertEquals(legacydata.length, result.length)
Assert.assertArrayEquals(legacydata, result)
Assert.assertEquals(complexdata.length, result2.length)
Assert.assertArrayEquals(complexdata, result2)
Assert.assertEquals(legacydata.length, result.length)
Assert.assertArrayEquals(legacydata, result)
Assert.assertEquals(complexdata.length + 2, result2.length)
Assert.assertEquals(complexdata[0] >>> 1, result2[0])
Assert.assertEquals(100, in.readLong())
Assert.assertEquals(200, in.readLong())
assertEquals(n, buf.remaining())
assertEquals(s, s2)
Assert.assertEquals(b1.length, bb1.limit() - bb1.position())
Assert.assertEquals(b1.length, bb2.limit() - bb2.position())
Assert.assertEquals(0, test.skip(5))
Assert.assertEquals(0, test.available())
Assert.assertFalse(test.getClass() != ByteArrayInputStream.class && test.markSupported())
Assert.assertEquals(-1, test.read())
Assert.assertEquals("Invalid int encoding", message)
Assert.assertEquals("Invalid long encoding", message)
Assert.assertTrue(null != eof)
Assert.assertEquals(0x10000000000000L, d.readLong())
Assert.assertSame(enc, factory.binaryEncoder(out, enc))
Assert.assertSame(reuse, factory.blockingBinaryEncoder(out, reuse))
Assert.assertSame(enc, factory.directBinaryEncoder(out, enc))
Assert.assertEquals("1" + separator + "2", out.toString())
Assert.assertEquals(mapper.readTree("{\"b\":\"myVal\",\"a\":1}"), mapper.readTree(fromAvroToJson(avroBytes, schema, false)))
Assert.assertEquals(mapper.readTree("{\"b\":{\"string\":\"myVal\"},\"a\":1}"), mapper.readTree(fromAvroToJson(avroBytes, schema, true)))
Assert.assertEquals("{\"a\": 1, \"b\": 2}", o.toString())
Assert.assertEquals("{\"a\": {\"a1\": null, \"a2\": true}, \"b\": {\"b1\": \"h\", \"b2\": 3.14, \"b3\": 1.4}}", o.toString())
Assert.assertEquals("{\"a\": {\"a1\": null, \"a2\": true}}", o.toString())
Assert.assertEquals("{\"a\": {\"a1\": null, \"a2\": true}}", o.toString())
assertThat(asList(buffer.position(), buffer.remaining()), is(asList(0, EXAMPLE_DATA_SIZE)))
assertThat(output.toByteArray(), equalTo(avroEncoded(someBytes(EXAMPLE_DATA_SIZE))))
assertThat(asList(buffer.position(), buffer.remaining()), is(asList(0, EXAMPLE_DATA_SIZE)))
assertEquals(SchemaNormalization.toParsingForm(new Schema.Parser().parse(input)), expectedOutput)
assertEquals(carefulFP, Long.parseLong(expectedOutput))
assertEquals(carefulFP, Long.parseLong(expectedOutput))
assertTrue(codec instanceof ZstandardCodec)
assertTrue(codec.getName().equals("zstandard"))
assertTrue(codec.toString().equals("zstandard[3]"))
Assert.assertNotNull(result)
Assert.assertTrue(result instanceof GenericRecord)
Assert.assertEquals(new Utf8("testValue"), ((GenericRecord) result).get("name"))
assertTrue(customCodec.equals(new CustomCodec()))
assertFalse(customCodec.equals(snappyCodec))
assertEquals(testString, new String(decompressed.array(), UTF_8))
assertTrue(codecClass.isInstance(codecInstance))
assertTrue(codecInstance.getName().equals(codec))
assertTrue(compressedSize > 0)
assertTrue(compressedSize < inputSize || codec.equals("null"))
assertTrue(compressedSize > 0)
fail("IOException should have been thrown")
Assert.assertEquals(decompressedBuffer, inputByteBuffer)
Assert.assertEquals(decompressedBuffer, inputByteBuffer)
assertEquals(42.0, decoded.get(FIELD_A))
assertEquals(42L, decoded.get(FIELD_A))
assertEquals(42.0, decoded.get(FIELD_A))
assertEquals(42.0, decoded.get(FIELD_A))
assertEquals(42.0f, decoded.get(FIELD_A))
assertEquals(42.0f, decoded.get(FIELD_A))
assertEquals(42.0f, decoded.get(FIELD_A))
assertEquals(42.0f, decoded.get(FIELD_A))
assertEquals(42L, decoded.get(FIELD_A))
assertEquals(42.0F, decoded.get(FIELD_A))
assertEquals(42.0, decodeGenericBlob(DOUBLE_RECORD, writer, encoded).get(FIELD_A))
assertEquals(42.0f, decodeGenericBlob(FLOAT_RECORD, writer, encoded).get(FIELD_A))
assertEquals(42L, decodeGenericBlob(LONG_RECORD, writer, encoded).get(FIELD_A))
assertEquals(42, decodeGenericBlob(INT_RECORD, writer, encoded).get(FIELD_A))
assertArrayEquals("42".getBytes(StandardCharsets.UTF_8), actual.array())
assertArrayEquals(goeran.getBytes(StandardCharsets.UTF_8), actual.array())
assertEquals("42", read.toString())
assertEquals(goeran, read.toString())
assertEquals("A", decoded.get(FIELD_A).toString())
assertEquals("A", decoded.get(FIELD_A).toString())
assertEquals(42, decoded.get(FIELD_A))
assertEquals(42, decoded.get(FIELD_A))
assertEquals(314, decoded.get("newFieldWithDefault"))
assertEquals(1, decoded.get("fname"))
assertFalse(Arrays.equals(randSyncFile, customSyncFile))
assertTrue(Arrays.equals(customSyncFile, sameCustomSyncFile))
Assert.assertTrue(threw)
assertEquals(bs.length, u.getByteLength())
assertEquals(5, u.getByteLength())
assertEquals(3, u.getByteLength())
assertSame(content, u.getBytes())
assertEquals(4, u.getByteLength())
assertSame(content, u.getBytes())
assertEquals(97, new Utf8("a").hashCode())
assertEquals(3904, new Utf8("zz").hashCode())
assertEquals(122, new Utf8("z").hashCode())
assertEquals(99162322, new Utf8("hello").hashCode())
assertEquals(3198781, new Utf8("hell").hashCode())
assertEquals(97, u.hashCode())
assertEquals(97, u.hashCode())
assertEquals(97, u.hashCode())
assertEquals(97, u.hashCode())
assertNotEquals(97, u.hashCode())
assertEquals(3904, u.hashCode())
assertEquals(122, u.hashCode())
assertEquals(99162322, u.hashCode())
assertEquals(3198781, u.hashCode())
assertEquals(3904, u.hashCode())
assertEquals(122, u.hashCode())
assertEquals(99162322, u.hashCode())
assertEquals(3198781, u.hashCode())
assertEquals(null, toJsonNode(null))
assertEquals(NullNode.getInstance(), toJsonNode(JsonProperties.NULL_VALUE))
assertEquals(BooleanNode.TRUE, toJsonNode(true))
assertEquals(IntNode.valueOf(1), toJsonNode(1))
assertEquals(LongNode.valueOf(2), toJsonNode(2L))
assertEquals(FloatNode.valueOf(1.0f), toJsonNode(1.0f))
assertEquals(DoubleNode.valueOf(2.0), toJsonNode(2.0))
assertEquals(TextNode.valueOf("\u0001\u0002"), toJsonNode(new byte[] { 1, 2 }))
assertEquals(TextNode.valueOf("a"), toJsonNode("a"))
assertEquals(TextNode.valueOf("UP"), toJsonNode(Direction.UP))
assertEquals(BigIntegerNode.valueOf(BigInteger.ONE), toJsonNode(BigInteger.ONE))
assertEquals(DecimalNode.valueOf(BigDecimal.ONE), toJsonNode(BigDecimal.ONE))
assertEquals(an, toJsonNode(Collections.singletonList(1)))
assertEquals(on, toJsonNode(Collections.singletonMap("a", 1)))
assertEquals(null, toObject(null))
assertEquals(JsonProperties.NULL_VALUE, toObject(NullNode.getInstance()))
assertEquals(true, toObject(BooleanNode.TRUE))
assertEquals(1, toObject(IntNode.valueOf(1)))
assertEquals(2L, toObject(IntNode.valueOf(2), Schema.create(Schema.Type.LONG)))
assertEquals(1.0f, toObject(DoubleNode.valueOf(1.0), Schema.create(Schema.Type.FLOAT)))
assertEquals(2.0, toObject(DoubleNode.valueOf(2.0)))
assertEquals(TextNode.valueOf("\u0001\u0002"), toJsonNode(new byte[] { 1, 2 }))
assertArrayEquals(new byte[] { 1, 2 }, (byte[]) toObject(TextNode.valueOf("\u0001\u0002"), Schema.create(Schema.Type.BYTES)))
assertEquals("a", toObject(TextNode.valueOf("a")))
assertEquals("UP", toObject(TextNode.valueOf("UP"), SchemaBuilder.enumeration("Direction").symbols("UP", "DOWN")))
assertEquals(Collections.singletonList(1), toObject(an))
assertEquals(Collections.singletonMap("a", 1), toObject(on))
assertEquals(Collections.singletonMap("a", 1L), toObject(on, SchemaBuilder.record("r").fields().requiredLong("a").endRecord()))
assertEquals(JsonProperties.NULL_VALUE, toObject(NullNode.getInstance(), SchemaBuilder.unionOf().nullType().and().intType().endUnion()))
assertEquals("a", toObject(TextNode.valueOf("a"), SchemaBuilder.unionOf().stringType().and().intType().endUnion()))
Assert.assertEquals(original, copy)
Assert.assertEquals(original.hashCode(), copy.hashCode())
Assert.assertEquals(original.toString(), copy.toString())
Assert.assertEquals(DEFAULT_VALUE, instanceOfGeneratedClass.getNonNullDate())
assertEquals(1, parsedArgs.length)
assertEquals(record, parsedArgs[0])
assertEquals(record, parsedResponse)
fail("A execução falhou por uma causa deliberada", "IOException should have been thrown")
assertEquals(record, echoedRecord)
assertEquals(10, result)
assertEquals(val1 + val2 + val3 + val4, stub.concatenate(val1, val2, val3, val4))
assertEquals(record, future.get(1, TimeUnit.SECONDS))
assertEquals(0, oneWayCount.get())
assertEquals(3, oneWayCount.get())
assertEquals(null, stub.concatenate("foo", true, 42L, 42))
assertThat(fromCache, is("class java.lang.String"))
assertThat(cache.apply(String.class), sameInstance(fromCache))
assertThat(stringLogicalType.getSomeIdentifier(), instanceOf(UUID.class))
assertThat(StringLogicalType.getClassSchema().getField("someJavaString").schema().getProp(GenericData.STRING_PROP), equalTo("String"))
assertEquals(writerSchema, serializer.getWriterSchema())
assertEquals("record1", record.toString())
assertEquals("record2", record.toString())
assertEquals("foo", converter.convert(avroKey).toString())
assertEquals(42, converter.convert(avroValue).intValue())
assertEquals(true, converter.convert(new BooleanWritable(true)))
assertEquals(1, bytes.get(0))
assertEquals(2, bytes.get(1))
assertEquals(3, bytes.get(2))
assertEquals(42, converter.convert(new ByteWritable((byte) 42)).bytes()[0])
assertEquals(2, converter.convert(new IntWritable(2)).intValue())
assertEquals(123L, converter.convert(new LongWritable(123L)).longValue())
assertNull(converter.convert(NullWritable.get()))
assertEquals("foo", converter.convert(new Text("foo")).toString())
assertEquals(writerSchema, deserializer.getWriterSchema())
assertEquals(readerSchema, deserializer.getReaderSchema())
assertEquals("record1", record.datum().toString())
assertEquals("record2", record.datum().toString())
assertEquals(writerSchema, deserializer.getWriterSchema())
assertEquals(readerSchema, deserializer.getReaderSchema())
assertEquals("record1", record.datum().toString())
assertEquals("record2", record.datum().toString())
assertTrue(serialization.accept(AvroKey.class))
assertTrue(serialization.accept(AvroValue.class))
assertFalse(serialization.accept(AvroWrapper.class))
assertFalse(serialization.accept(String.class))
assertTrue(serializer instanceof AvroSerializer)
assertEquals(writerSchema, avroSerializer.getWriterSchema())
assertTrue(serializer instanceof AvroSerializer)
assertEquals(writerSchema, avroSerializer.getWriterSchema())
assertTrue(deserializer instanceof AvroKeyDeserializer)
assertEquals(readerSchema, avroDeserializer.getReaderSchema())
assertTrue(deserializer instanceof AvroValueDeserializer)
assertEquals(readerSchema, avroDeserializer.getReaderSchema())
Assert.assertEquals(loader, data.getClassLoader())
assertTrue(roundTrip(schema, "record", null) instanceof String)
assertTrue(roundTrip(schema, "record", GenericData.class) instanceof Utf8)
assertEquals("deflate", reader.getMetaString("avro.codec"))
assertTrue(directory.exists())
assertEquals(2, indexRecords.size())
assertEquals("apple", indexRecords.get(0).getKey().toString())
assertEquals("carrot", indexRecords.get(1).getKey().toString())
assertTrue(hadoopDeflateCodec.getClass().equals(avroDeflateCodec.getClass()))
assertTrue(hadoopSnappyCodec.getClass().equals(avroSnappyCodec.getClass()))
assertTrue(hadoopSnappyCodec.getClass().equals(avroSnappyCodec.getClass()))
assertTrue(hadoopSnappyCodec.getClass().equals(avroSnappyCodec.getClass()))
assertTrue(hadoopSnappyCodec == null)
assertEquals(0, mComparator.compare("", ""))
assertThat(mComparator.compare("", "a"), lessThan(0))
assertThat(mComparator.compare("a", ""), greaterThan(0))
assertEquals(0, mComparator.compare("a", "a"))
assertThat(mComparator.compare("a", "b"), lessThan(0))
assertThat(mComparator.compare("b", "a"), greaterThan(0))
assertEquals(0, mComparator.compare("ab", "ab"))
assertThat(mComparator.compare("a", "aa"), lessThan(0))
assertThat(mComparator.compare("aa", "a"), greaterThan(0))
assertThat(mComparator.compare("abc", "abcdef"), lessThan(0))
assertThat(mComparator.compare("abcdef", "abc"), greaterThan(0))
assertEquals(0, mComparator.compare(new Utf8(""), new Utf8("")))
assertThat(mComparator.compare(new Utf8(""), new Utf8("a")), lessThan(0))
assertThat(mComparator.compare(new Utf8("a"), new Utf8("")), greaterThan(0))
assertEquals(0, mComparator.compare(new Utf8("a"), new Utf8("a")))
assertThat(mComparator.compare(new Utf8("a"), new Utf8("b")), lessThan(0))
assertThat(mComparator.compare(new Utf8("b"), new Utf8("a")), greaterThan(0))
assertEquals(0, mComparator.compare(new Utf8("ab"), new Utf8("ab")))
assertThat(mComparator.compare(new Utf8("a"), new Utf8("aa")), lessThan(0))
assertThat(mComparator.compare(new Utf8("aa"), new Utf8("a")), greaterThan(0))
assertThat(mComparator.compare(new Utf8("abc"), new Utf8("abcdef")), lessThan(0))
assertThat(mComparator.compare(new Utf8("abcdef"), new Utf8("abc")), greaterThan(0))
assertEquals(0, mComparator.compare(new Utf8(""), ""))
assertThat(mComparator.compare(new Utf8(""), "a"), lessThan(0))
assertThat(mComparator.compare(new Utf8("a"), ""), greaterThan(0))
assertEquals(0, mComparator.compare(new Utf8("a"), "a"))
assertThat(mComparator.compare(new Utf8("a"), "b"), lessThan(0))
assertThat(mComparator.compare(new Utf8("b"), "a"), greaterThan(0))
assertEquals(0, mComparator.compare(new Utf8("ab"), "ab"))
assertThat(mComparator.compare(new Utf8("a"), "aa"), lessThan(0))
assertThat(mComparator.compare(new Utf8("aa"), "a"), greaterThan(0))
assertThat(mComparator.compare(new Utf8("abc"), "abcdef"), lessThan(0))
assertThat(mComparator.compare(new Utf8("abcdef"), "abc"), greaterThan(0))
Assert.assertTrue(job.waitForCompletion(true))
Assert.assertEquals(1, outputFiles.length)
Assert.assertEquals(3, counts.get("apple").intValue())
Assert.assertEquals(2, counts.get("banana").intValue())
Assert.assertEquals(1, counts.get("carrot").intValue())
Assert.assertTrue(job.waitForCompletion(true))
Assert.assertEquals(1, outputFiles.length)
Assert.assertEquals(3, counts.get("apple").intValue())
Assert.assertEquals(2, counts.get("banana").intValue())
Assert.assertEquals(1, counts.get("carrot").intValue())
Assert.assertTrue(job.waitForCompletion(true))
Assert.assertEquals(1, outputFiles.length)
Assert.assertEquals(3, counts.get("apple").intValue())
Assert.assertEquals(2, counts.get("banana").intValue())
Assert.assertEquals(1, counts.get("carrot").intValue())
Assert.assertTrue(job.waitForCompletion(true))
Assert.assertEquals(1, outputFiles.length)
Assert.assertEquals(3, counts.get("apple").intValue())
Assert.assertEquals(2, counts.get("banana").intValue())
Assert.assertEquals(1, counts.get("carrot").intValue())
Assert.assertTrue(job.waitForCompletion(true))
Assert.assertEquals(1, outputFiles.length)
Assert.assertEquals(3, counts.get("apple").intValue())
Assert.assertEquals(2, counts.get("banana").intValue())
Assert.assertEquals(1, counts.get("carrot").intValue())
Assert.assertTrue(job.waitForCompletion(true))
Assert.assertEquals(1, outputFiles.length)
Assert.assertEquals(3, counts.get("apple").intValue())
Assert.assertEquals(2, counts.get("banana").intValue())
Assert.assertEquals(1, counts.get("carrot").intValue())
Assert.assertTrue(job.waitForCompletion(true))
Assert.assertEquals(1, outputFiles.length)
Assert.assertNotNull(inputStream)
assertNotNull(inputFormat)
assertTrue(dataFileReader.hasNext())
assertEquals(1, dataFileReader.next().intValue())
assertTrue(dataFileReader.hasNext())
assertEquals(2, dataFileReader.next().intValue())
assertFalse(dataFileReader.hasNext())
assertTrue(dataFileReader.hasNext())
assertEquals(2, dataFileReader.next())
assertTrue(dataFileReader.hasNext())
assertEquals(1, dataFileReader.next())
assertTrue(job.waitForCompletion(true))
assertTrue(avroFileReader.hasNext())
assertTrue(job.waitForCompletion(true))
assertTrue(avroFileReader.hasNext())
assertNotNull(appleRecord.get())
assertEquals("apple", appleRecord.getKey().toString())
assertEquals(3, appleDocs.size())
assertTrue(appleDocs.contains(1))
assertTrue(appleDocs.contains(2))
assertTrue(appleDocs.contains(3))
assertTrue(avroFileReader.hasNext())
assertNotNull(bananaRecord.get())
assertEquals("banana", bananaRecord.getKey().toString())
assertEquals(2, bananaDocs.size())
assertTrue(bananaDocs.contains(1))
assertTrue(bananaDocs.contains(2))
assertTrue(avroFileReader.hasNext())
assertEquals("carrot", carrotRecord.getKey().toString())
assertEquals(1, carrotDocs.size())
assertTrue(carrotDocs.contains(1))
assertFalse(avroFileReader.hasNext())
assertTrue(job.waitForCompletion(true))
assertTrue(avroFileReader.hasNext())
assertNotNull(record1.get())
assertEquals(1, record1.getKey().intValue())
assertEquals("apple banana carrot", record1.getValue().toString())
assertTrue(avroFileReader.hasNext())
assertNotNull(record2.get())
assertEquals(2, record2.getKey().intValue())
assertEquals("apple banana", record2.getValue().toString())
assertTrue(avroFileReader.hasNext())
assertNotNull(record3.get())
assertEquals(3, record3.getKey().intValue())
assertEquals("apple", record3.getValue().toString())
assertFalse(avroFileReader.hasNext())
Assert.assertTrue(job.waitForCompletion(true))
Assert.assertEquals(1, outputFiles.length)
Assert.assertEquals(3, counts.get("apple").intValue())
Assert.assertEquals(2, counts.get("banana").intValue())
Assert.assertEquals(1, counts.get("carrot").intValue())
Assert.assertEquals(1, outputFiles.length)
Assert.assertEquals(3, counts.get("apple").intValue())
Assert.assertEquals(2, counts.get("banana").intValue())
Assert.assertEquals(1, counts.get("carrot").intValue())
Assert.assertEquals(1, outputFiles.length)
Assert.assertEquals(3, counts.get("apple").intValue())
Assert.assertEquals(2, counts.get("banana").intValue())
Assert.assertEquals(1, counts.get("carrot").intValue())
Assert.assertEquals(1, outputFiles.length)
Assert.assertEquals(3, counts.get("apple").intValue())
Assert.assertEquals(2, counts.get("banana").intValue())
Assert.assertEquals(1, counts.get("carrot").intValue())
Assert.assertEquals(1, outputFiles.length)
Assert.assertEquals(3, counts.get("apple").intValue())
Assert.assertEquals(2, counts.get("banana").intValue())
Assert.assertEquals(1, counts.get("carrot").intValue())
Assert.assertTrue(job.waitForCompletion(true))
Assert.assertEquals(1, outputFiles.length)
Assert.assertEquals(3, counts.get("apple").intValue())
Assert.assertEquals(2, counts.get("banana").intValue())
Assert.assertEquals(1, counts.get("carrot").intValue())
Assert.assertTrue(job.waitForCompletion(true))
Assert.assertEquals(1, outputFiles.length)
Assert.assertEquals(3, counts.get("apple").intValue())
Assert.assertEquals(2, counts.get("banana").intValue())
Assert.assertEquals(1, counts.get("carrot").intValue())
Assert.assertTrue(job.waitForCompletion(true))
Assert.assertEquals(1, outputFiles.length)
Assert.assertEquals(3, counts.get("apple").intValue())
Assert.assertEquals(2, counts.get("banana").intValue())
Assert.assertEquals(1, counts.get("carrot").intValue())
Assert.assertTrue(job.waitForCompletion(true))
Assert.assertEquals(1, outputFiles.length)
Assert.assertEquals(3, counts.get("apple").intValue())
Assert.assertEquals(2, counts.get("banana").intValue())
Assert.assertEquals(1, counts.get("carrot").intValue())
Assert.assertEquals(1, outputFiles.length)
Assert.assertEquals(3, counts.get("apple").intValue())
Assert.assertEquals(2, counts.get("banana").intValue())
Assert.assertEquals(1, counts.get("carrot").intValue())
Assert.assertEquals(1, outputFiles.length)
Assert.assertEquals(3, counts.get("apple").intValue())
Assert.assertEquals(2, counts.get("banana").intValue())
Assert.assertEquals(1, counts.get("carrot").intValue())
Assert.assertEquals(1, outputFiles.length)
Assert.assertEquals(3, counts.get("apple").intValue())
Assert.assertEquals(2, counts.get("banana").intValue())
Assert.assertEquals(1, counts.get("carrot").intValue())
Assert.assertEquals(1, outputFiles.length)
Assert.assertEquals(3, counts.get("apple").intValue())
Assert.assertEquals(2, counts.get("banana").intValue())
Assert.assertEquals(1, counts.get("carrot").intValue())
Assert.assertTrue(job.waitForCompletion(true))
Assert.assertEquals(1, outputFiles.length)
Assert.assertEquals(3, counts.get("apple").intValue())
Assert.assertEquals(2, counts.get("banana").intValue())
Assert.assertEquals(1, counts.get("carrot").intValue())
Assert.assertTrue(job.waitForCompletion(true))
Assert.assertEquals(1, outputFiles.length)
Assert.assertEquals(3, counts.get("apple").intValue())
Assert.assertEquals(2, counts.get("banana").intValue())
Assert.assertEquals(1, counts.get("carrot").intValue())
Assert.assertTrue(job.waitForCompletion(true))
Assert.assertEquals(1, outputFiles.length)
Assert.assertEquals(3, counts.get("apple").intValue())
Assert.assertEquals(2, counts.get("banana").intValue())
Assert.assertEquals(1, counts.get("carrot").intValue())
assertTrue(avroFileReader.hasNext())
assertNotNull(firstRecord.get())
assertEquals("apple", firstRecord.getKey().toString())
assertEquals("apple", firstRecord.getValue().getName().toString())
assertTrue(avroFileReader.hasNext())
assertNotNull(secondRecord.get())
assertEquals("banana", secondRecord.getKey().toString())
assertEquals("banana", secondRecord.getValue().getName().toString())
assertFalse(avroFileReader.hasNext())
assertTrue(avroFileReader.hasNext())
assertNotNull(firstRecord.get())
assertEquals("reflectionData", firstRecord.getKey().toString())
assertEquals(record.attribute, firstRecord.getValue().attribute)
assertTrue(avroFileReader.hasNext())
assertNotNull(secondRecord.get())
assertEquals("banana", secondRecord.getKey().toString())
assertEquals("banana", secondRecord.getValue().getName().toString())
assertTrue(avroFileReader.hasNext())
assertNotNull(firstRecord.get())
assertEquals("apple", firstRecord.getKey().toString())
assertEquals("apple", firstRecord.getValue().getName().toString())
assertEquals(fsInput.length(), FILE_CONTENTS.length())
assertThat(actualBytes, is(equalTo(expectedBytes)))
assertThat(actualByteCount, is(equalTo(expectedBytes.length)))
assertThat(actualByte, is(equalTo(expectedByte)))
assertThat(actualTellPos, is(equalTo(expectedTellPos)))
assertEquals("first", key.datum().toString())
assertEquals(1, value.datum().intValue())
assertEquals("second", key.datum().toString())
assertEquals(2, value.datum().intValue())
assertTrue(job.waitForCompletion(true))
assertTrue(avroFileReader.hasNext())
assertNotNull(appleRecord.get())
assertEquals("apple", appleRecord.getKey().toString())
assertEquals(3, appleRecord.getValue().intValue())
assertTrue(avroFileReader.hasNext())
assertNotNull(bananaRecord.get())
assertEquals("banana", bananaRecord.getKey().toString())
assertEquals(2, bananaRecord.getValue().intValue())
assertTrue(avroFileReader.hasNext())
assertEquals("carrot", carrotRecord.getKey().toString())
assertEquals(1, carrotRecord.getValue().intValue())
assertFalse(avroFileReader.hasNext())
assertNotNull(capturedCodecFactory.getValue())
assertEquals(expectedCodec.toString(), capturedCodecFactory.getValue().toString())
assertNotNull(recordWriter)
assertSame(expectedRecordWriter, recordWriter)
assertEquals("first", firstString.toString())
assertEquals("second", secondString.toString())
assertEquals(numOfCounts, WordCountUtil.COUNTS.size())
assertEquals(sumOfCounts, actualSumOfCounts)
Assert.assertEquals(numOfCounts, WordCountUtil.COUNTS.size())
Assert.assertEquals(sumOfCounts, actualSumOfCounts)
Assert.assertEquals(numOfCounts, WordCountUtil.COUNTS.size())
Assert.assertEquals(sumOfCounts, actualSumOfCounts)
Assert.assertEquals(numOfCounts, WordCountUtil.COUNTS.size())
Assert.assertEquals(sumOfCounts, actualSumOfCounts)
Assert.assertEquals(numOfCounts, WordCountUtil.COUNTS.size())
Assert.assertEquals(sumOfCounts, actualSumOfCounts)
assertEquals(WordCountUtil.COUNTS.size(), numWords)
assertEquals(5, numRecs)
assertEquals(newSyncInterval, jobConf.getInt(AvroOutputFormat.SYNC_INTERVAL_KEY, -1))
assertNull(AvroOutputFormat.getCodecFactory(job))
assertNull(AvroOutputFormat.getCodecFactory(job))
assertNull(AvroOutputFormat.getCodecFactory(job))
assertNotNull(factory)
assertEquals(factory.getClass(), avroBZip2Codec.getClass())
assertNotNull(factory)
assertEquals(factory.getClass(), avroBZip2Codec.getClass())
assertNotNull(factory)
assertEquals(factory.getClass(), avroDeflateCodec.getClass())
assertNotNull(factory)
assertEquals(factory.getClass(), avroDeflateCodec.getClass())
assertNotNull(factory)
assertEquals(factory.getClass(), avroSnappyCodec.getClass())
assertNotNull(factory)
assertEquals(factory.getClass(), avroSnappyCodec.getClass())
assertNotNull(factory)
assertEquals(factory.getClass(), avroDeflateCodec.getClass())
assertEquals(datum, wrapper.toString())
fail("Expected an AvroRuntimeException")
assertEquals("k1", asString(fileReader.next()))
assertEquals("k2", asString(fileReader.next()))
assertEquals("v1", asString(fileReader.next()))
assertEquals("v2", asString(fileReader.next()))
assertEquals("k3\tv3", asString(fileReader.next()))
assertEquals("k4\tv4", asString(fileReader.next()))
fail("A execução falhou por uma causa deliberada", "Expected an AvroRuntimeException")
assertEquals(COUNTS.size(), numWords)
assertEquals(STRING_META_VALUE, in.getMetaString(STRING_KEY))
assertEquals(LONG_META_VALUE, in.getMetaLong(LONG_KEY))
assertTrue(Arrays.equals(BYTES_META_VALUE, in.getMeta(BYTES_KEY)))
assertEquals(1, mapCloseCalls.get())
assertEquals(1, reducerCloseCalls.get())
assertEquals(1, mapConfigureCalls.get())
assertEquals(1, reducerConfigureCalls.get())
assertEquals(COUNT, i)
assertEquals(WordCountUtil.COUNTS.size(), numWords)
assertEquals(1, statuses.length)
assertEquals("somefile.avro", statuses[0].getPath().getName())
assertEquals(2, statuses.length)
assertTrue(names.contains("somefile.avro"))
assertTrue(names.contains("someotherfile.txt"))
outputClient.fail(message)
Assert.fail("Expected " + TestError.class.getCanonicalName())
Assert.assertEquals("wait", response)
Assert.assertEquals("Hello, how are you?", simpleClient.hello("how are you?"))
Assert.assertEquals("Hello, World!", future1.get(2, TimeUnit.SECONDS))
Assert.assertEquals("Hello, what's up?", future2.get(2, TimeUnit.SECONDS))
Assert.assertEquals(record, simpleClient.echo(record))
Assert.assertEquals(record, future1.get(2, TimeUnit.SECONDS))
Assert.assertEquals(record, future2.get(2, TimeUnit.SECONDS))
Assert.assertEquals(8, simpleClient.add(2, 6))
Assert.assertEquals(Integer.valueOf(16), future1.get(2, TimeUnit.SECONDS))
Assert.assertEquals(Integer.valueOf(768), future2.get(2, TimeUnit.SECONDS))
Assert.assertEquals(byteBuffer, simpleClient.echoBytes(byteBuffer))
Assert.assertEquals(byteBuffer, future1.get(2, TimeUnit.SECONDS))
Assert.assertEquals(byteBuffer, future2.get(2, TimeUnit.SECONDS))
assertEquals(0, allMessages.getCount())
Assert.assertEquals("Sent message to [wife] from [husband] with body [I love you!]", result)
Assert.assertEquals(2, ((NettyServer) server).getNumActiveConnections())
Assert.assertEquals(1, numActiveConnections)
