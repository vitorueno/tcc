"java.lang.Object" não é igual ao resultado de type.describe()
Tempo limite de 1000 milissegundos excedido ou exceção lançada durante a execução do código fornecido. Detalhes da exceção: [inserir aqui a exceção caso ocorra]
O valor booleano calculado não é verdadeiro: fae.calculateResolvedType().describe().equals("java.lang.String")
"AFIELD" não é igual ao resultado de value.getName()
"a" não é igual ao resultado de fd.get().getVariable(0).getInitializer().get().asStringLiteralExpr().getValue()
"X.A.bar" não é igual ao resultado de mce.resolve().getQualifiedName()
"java.lang.Runnable" não é igual ao resultado de resolved.getParam(0).getType().describe()
O valor booleano calculado é falso: !resolved.isGeneric()
"MyAnnotation" não é igual ao resultado de declaration.getNameAsString()
"MyAnnotationWithElements" não é igual ao resultado de declaration.getNameAsString()
"VoidVisitor" não é igual ao resultado de declaration.getNameAsString()
true não é igual ao resultado de declaration.isInterface()
"AccessSpecifier" não é igual ao resultado de declaration.getNameAsString()
"AccessSpecifier" não é igual ao resultado de enumDeclaration.getNameAsString()
"PUBLIC" não é igual ao resultado de declaration.getNameAsString()
"CompilationUnit" não é igual ao resultado de classDeclaration.getNameAsString()
"CompilationUnit" não é igual ao resultado de classDeclaration.getNameAsString()
"getComments" não é igual ao resultado de resolvedDeclaration.getName()
0 não é igual ao resultado de resolvedDeclaration.getNumberOfParams()
"CompilationUnit" não é igual ao resultado de classDeclaration.getNameAsString()
"bar(Optional.of(new Derived()))" não é igual ao resultado de mces.get(0).toString()
"Base.bar(java.util.Optional<Base>)" não é igual ao resultado de mces.get(0).resolve().getQualifiedSignature()
O valor de foo é nulo.
true não é igual ao resultado de pr.isSuccessful()
"com.github.javaparser.symbolsolver.testingclasses.UtilityClass.method(com.github.javaparser.symbolsolver.testingclasses.SomeClass.InnerEnum)" não é igual ao resultado de rmd.getQualifiedSignature()
"CONSTANT" não é igual ao resultado de rvd.getName()
"com.github.javaparser.symbolsolver.testingclasses.SomeClass.InnerEnum" não é igual ao resultado de rvd.getType().describe()
"A.method" não é igual ao resultado de mce.resolve().getQualifiedName()
"Test.setRunnable(java.lang.String, java.lang.Runnable)" não é igual ao resultado de mce.get(0).resolve().getQualifiedSignature()
"Test.getContext(Test)" não é igual ao resultado de mce.get(1).resolve().getQualifiedSignature()
"Test.getContext(Test)" não é igual ao resultado de sig
"java.lang.String" não é igual ao resultado de exprs.get(0).calculateResolvedType().describe()
"java.lang.String" não é igual ao resultado de exprs.get(1).calculateResolvedType().describe()
"java.lang.String" não é igual ao resultado de exprs.get(2).calculateResolvedType().describe()
"float" não é igual ao resultado de exprs.get(3).calculateResolvedType().describe()
"double" não é igual ao resultado de exprs.get(4).calculateResolvedType().describe()
"int" não é igual ao resultado de exprs.get(5).calculateResolvedType().describe()
"long" não é igual ao resultado de exprs.get(6).calculateResolvedType().describe()
"long" não é igual ao resultado de exprs.get(7).calculateResolvedType().describe()
"int" não é igual ao resultado de exprs.get(8).calculateResolvedType().describe()
"long" não é igual ao resultado de exprs.get(9).calculateResolvedType().describe()
"long" não é igual ao resultado de exprs.get(10).calculateResolvedType().describe()
"int" não é igual ao resultado de exprs.get(11).calculateResolvedType().describe()
"int" não é igual ao resultado de exprs.get(12).calculateResolvedType().describe()
"int" não é igual ao resultado de exprs.get(13).calculateResolvedType().describe()
"InnerClass(int)" não é igual ao resultado de rcd.getSignature()
"InnerClass(int)" não é igual ao resultado de rcd.getSignature()
"InnerClass(int)" não é igual ao resultado de rcd.getSignature()
"void" não é igual ao resultado de mce.calculateResolvedType().describe()
"java.util.concurrent.TimeUnit" não é igual ao resultado de mce.getArgument(0).calculateResolvedType().describe()
O valor booleano calculado não é verdadeiro: method.isSolved()
O valor de javaParserFacade.solve(expression) é nulo.
O valor de javaParserFacade.convertToUsage(expression.getType()) é nulo.
O valor booleano calculado não é verdadeiro: parseResult.isSuccessful()
"D" não é igual ao resultado de javaParserFacade.solve(methodCallExprs.get(0)).getCorrespondingDeclaration().getReturnType().describe()
"D" não é igual ao resultado de javaParserFacade.solve(methodCallExprs.get(2)).getCorrespondingDeclaration().getReturnType().describe()
"void" não é igual ao resultado de javaParserFacade.solve(methodCallExprs.get(1)).getCorrespondingDeclaration().getReturnType().describe()
"D" não é igual ao resultado de javaParserFacade.solve(methodCallExprs.get(4)).getCorrespondingDeclaration().getReturnType().describe()
"java.lang.Object" não é igual ao resultado de a.getQualifiedName()
O valor de resultsQualifiedName.get(expr.toString()) não é igual ao valor de qName.
O valor de resultsResolvedType.get(expr.toString()) não é igual ao valor de resolvedType.
O valor booleano calculado não é verdadeiro: parseResult.isSuccessful()
O valor booleano calculado não é verdadeiro: parseResult.getResult().isPresent()
"int" não é igual ao resultado de resolve.getType().describe()
"Test1.Test2" não é igual ao resultado de oce.get(0).calculateResolvedType().describe()
"Test1.Test3" não é igual ao resultado de oce.get(1).calculateResolvedType().describe()
O valor booleano calculado não é verdadeiro: methodType.isPresent()
"java.util.ArrayList" não é igual ao resultado de resolvedType
"foo(new Object[5])" não é igual ao resultado de mce.toString()
"TestClass2.foo(java.lang.Object)" não é igual ao resultado de mce.resolve().getQualifiedSignature()
"void" não é igual ao resultado de mce.calculateResolvedType().describe()
O valor booleano calculado não é verdadeiro: fae.isPresent()
"foo.bar.BinaryExpr.Operator" não é igual ao resultado de fae.get().resolve().getType().describe()
"OR" não é igual ao resultado de fae.get().resolve().getName()
O valor booleano calculado não é verdadeiro: fae.isPresent()
"foo.bar.BinaryExpr.Operator" não é igual ao resultado de fae.get().resolve().getType().describe()
"AND" não é igual ao resultado de fae.get().resolve().getName()
O valor booleano calculado não é verdadeiro: fae.isPresent()
"foo.bar.BinaryExpr.Operator" não é igual ao resultado de fae.get().resolve().getType().describe()
"OR" não é igual ao resultado de fae.get().resolve().getName()
O valor booleano calculado não é verdadeiro: fae.isPresent()
"foo.bar.BinaryExpr.Operator" não é igual ao resultado de fae.get().resolve().getType().describe()
"AND" não é igual ao resultado de fae.get().resolve().getName()
O valor booleano calculado não é verdadeiro: parseResult.isSuccessful()
O valor de syntacticClassification não é igual ao resultado de NameLogic.syntacticClassificationAccordingToContext(nameNode)
O valor de nameCategory não é igual ao resultado de NameLogic.classifyReference(nameNode, typeSolver)
O valor de nameCategory não é igual ao resultado de NameLogic.syntacticClassificationAccordingToContext(nameNode)
O valor de nameRole não é igual ao resultado de NameLogic.classifyRole(nameNode)
O valor booleano calculado não é verdadeiro: NameLogic.isSimpleName(nameNode)
O valor booleano calculado não é verdadeiro: NameLogic.isQualifiedName(nameNode)
true não é igual ao resultado de NameLogic.isAName(cu)