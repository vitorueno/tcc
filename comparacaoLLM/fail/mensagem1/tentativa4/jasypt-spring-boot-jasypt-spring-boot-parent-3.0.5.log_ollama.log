assertTrue(ClassUtils.isAssignable(new ParameterizedTypeReference<PropertySource<Iterable<ConfigurationPropertySource>>>() {
}, EncryptableConfigurationPropertySourcesPropertySource.class), "Tipo de source incorreto")
assertFalse(ClassUtils.isAssignable(new ParameterizedTypeReference<PropertySource<Map<String, Object>>>() {
}, EncryptableConfigurationPropertySourcesPropertySource.class))
assertTrue(ClassUtils.isAssignable(new ParameterizedTypeReference<PropertySource<Map<String, Object>>>() {
}, EncryptableMapPropertySourceWrapper.class), "Tipo de wrapper incorreto")
assertFalse(ClassUtils.isAssignable(new ParameterizedTypeReference<PropertySource<Iterable<ConfigurationPropertySource>>>() {
}, EncryptableMapPropertySourceWrapper.class))
assertTrue(filter.shouldInclude(source, "some.property"), "Valor 'some.property' não deve ser excluído")
assertFalse(filter.shouldInclude(source, "some.property"), "Valor 'some.property' deveria ser excluído")
assertTrue(filter.shouldInclude(source, "some.property"))
assertTrue(filter.shouldInclude(source, "some.property"))
assertTrue(filter.shouldInclude(source, "some.property"))
assertTrue(filter.shouldInclude(source, "some.property"))
assertTrue(filter.shouldInclude(source, "some.property"))
assertTrue(filter.shouldInclude(source, "some.property"))
assertTrue(filter.shouldInclude(source, "some.property"))
assertTrue(filter.shouldInclude(source, "some.property"))
assertTrue(filter.shouldInclude(source, "some.property"))
assertTrue(filter.shouldInclude(source, "some.property"))
assertTrue(filter.shouldInclude(source, "some.property"))
assertTrue(filter.shouldInclude(source, "some.property"))
assertFalse(filter.shouldInclude(source, "some.property"), "Valor 'some.property' não deve ser incluído")
assertFalse(filter.shouldInclude(source, "some.property"), "Valor 'some.property' deveria ser excluído")
assertFalse(filter.shouldInclude(source, "some.property"))
FALSE
assertTrue(filter.shouldInclude(source, "some.property"))
assertEquals(decrypted, message)
assertEquals(decrypted, message)
assertEquals(decrypted, message)
assertEquals(decrypted, message)
assertEquals(decrypted, message)
assertEquals(decrypted, message)
assertEquals(message, decrypted)
assertEquals(message, decrypted)
assertEquals(message, decrypted)
assertEquals(message, decrypted)
assertEquals(message, decrypted)
assertEquals(message, decrypted)
assertEquals(message, decrypted)
assertEquals(message, decrypted)
assertEquals("test1", myProperties.getFooString())
assertEquals("test2", myProperties.getBarString())
assertNotNull(this.context.getBean(EnableEncryptablePropertiesBeanFactoryPostProcessor.class))
assertNotNull(this.context.getBean(EnableEncryptablePropertiesBeanFactoryPostProcessor.class))
assertEquals("test1", myProperties.getFooString(), "Valor 'test1' não é corret")
assertEquals("test2", myProperties.getBarString())
assertNotNull(myProperties.getFooList())
assertEquals("[a1, b1]", myProperties.getFooList().toString(), "Lista de strings incorreta")
assertEquals("[a2, b2]", myProperties.getBarList().toString(), "Lista de strings incorreta")
assertNotNull(myProperties.getStringMap())
assertEquals("{k1=v1}", myProperties.getStringMap().toString(), "Mapeamento de strings incorreto")
assertEquals("{k2=[v2]}", myProperties.getListMap().toString(), "Mapeamento de listas incorreto")