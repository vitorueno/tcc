assertEquals("test/Person", graph.getCommon("test/Jedi", "test/Sith")) - "Valores não coincidem para 'test/Jedi' e 'test/Sith'"
assertEquals("test/Person", graph.getCommon("test/Jedi", "test/Person")) - "Os valores não coincidem para 'test/Jedi' e 'test/Person'"
assertEquals("test/Person", graph.getCommon("test/Person", "test/Person")) - "O valor de 'test/Person' não coincide com 'test/Person'"
assertTrue(graph.isLibrary("test/Yoda", "toString", "()Ljava/lang/String;")) - "A biblioteca não é 'test/Yoda', método 'toString', tipo 'java.lang.String'"
assertTrue(graph.areLinked("test/Yoda", "say", "()V", "test/Greetings", "say", "()V")) - "Os vértices não estão ligados como esperado"
assertEquals(1, results.size()) - "O tamanho do resultado deve ser 1"
assertEquals(Collections.emptySet(), result.getDifference()) - "A diferença de resultados não é uma coleção vazia"
assertEquals(20, mappings.size()) - "O número de mapeamentos é menor que o esperado"
assertEquals(1, results.size()) - "O tamanho do resultado deve ser 1"
assertEquals(0, mappings.size()) - "O número de mapeamentos é maior que o esperado"
assertEquals("Start", vertex.getValue().getOwner()) - "O nome do dono não é 'Start'"
assertEquals("main", vertex.getValue().getName()) - "O nome não é 'main'"
assertEquals("([Ljava/lang/String;)V", vertex.getValue().getDesc()) - "A descrição do valor não é a esperada"
assertEquals(Collections.emptySet(), result.getDifference()) - "A diferença de resultados não é uma coleção vazia"
assertEquals(1, results.size()) - "O tamanho do resultado deve ser 1"
assertEquals("i", field.getName()) - "O nome do campo não é 'i'"
assertEquals("int", field.getType()) - "O tipo do campo não é int"
assertEquals("", field.getDescription()) - "A descrição do campo está vazia"
assertEquals("protected", field.getModifiers().get(0)) - "Os modificadores do campo estão errados"
assertEquals("final", field.getModifiers().get(1)) - "Os modificadores do campo estão errados"
assertEquals(2, methods.size()) - "O número de métodos é menor que o esperado"
assertEquals("evaluate", method.getName()) - "O nome do método não é 'evaluate'"
assertEquals("double", method.getReturnType()) - "O tipo do retorno do método não é double"
assertEquals("Evaluates an expression as a level deeper than the current one in the expression tree,", method.getDescription()) - "A descrição do método está errada"
assertEquals("protected", method.getModifiers().get(0)) - "Os modificadores do método estão errados"
assertEquals("final", method.getModifiers().get(1)) - "Os modificadores do método estão errados"
assertEquals("Evaluated result.", method.getReturnDescription()) - "A descrição do retorno do método está errada"
assertEquals(1, method.getParameters().size()) - "O número de parâmetros é menor que o esperado"
assertEquals("expression", parameter.getName()) - "O nome do parâmetro não é 'expression'"
assertEquals("Some math expression.", parameter.getDescription()) - "A descrição do parâmetro está errada"
assertEquals("accept", method.getName()) - "O nome do método não é 'accept'"
assertEquals("", method.getDescription()) - "A descrição do método está vazia"
assertEquals("public", method.getModifiers().get(0)) - "Os modificadores do método estão errados"
assertEquals("final", method.getModifiers().get(1)) - "Os modificadores do método estão errados"
assertEquals(3, aggregateMapping.size()) - "O número de mapeamentos é menor que o esperado"
assertEquals("renamed/MyCalc", aggregateMapping.get("calc/Calculator")) - "O mapeamento não está correto"
assertEquals("MAX_DEPTH_LEVEL", aggregateMapping.get("calc/Calculator.MAX_DEPTH")) - "A chave do mapeamento está errada"
assertEquals("doEvaluate", aggregateMapping.get("calc/Calculator.evaluate(ILjava/lang/String;)D")) - "A descrição do mapeamento está errada"
assertEquals(3, aggregateMapping.size()) - "O número de mapeamentos é menor que o esperado"
assertEquals("renamed/MyCalc", aggregateMapping.get("calc/Calculator")) - "O mapeamento não está correto"
assertEquals("MAX_DEPTH_LEVEL", aggregateMapping.get("calc/Calculator.MAX_DEPTH")) - "A chave do mapeamento está errada"
assertEquals("doEvaluate", aggregateMapping.get("calc/Calculator.evaluate(ILjava/lang/String;)D")) - "A descrição do mapeamento está errada"
assertEquals(3, aggregateMapping.size()) - "O número de mapeamentos é menor que o esperado"
assertEquals("renamed2/MyCalc2", aggregateMapping.get("calc/Calculator")) - "O mapeamento não está correto"
assertEquals("MAX_DEPTH_LEVEL", aggregateMapping.get("calc/Calculator.MAX_DEPTH")) - "A chave do mapeamento está errada"
assertEquals("doEvaluate", aggregateMapping.get("calc/Calculator.evaluate(ILjava/lang/String;)D")) - "A descrição do mapeamento está errada"
assertEquals(3, aggregateMapping.size()) - "O número de mapeamentos é menor que o esperado"