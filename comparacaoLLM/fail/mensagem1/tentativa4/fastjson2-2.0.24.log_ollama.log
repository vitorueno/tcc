assertEquals("Canonically qualified name of sun.misc.Unsafe cannot be null", "sun.misc.Unsafe")
assertEquals("Expected id to be 1, but got {}", user.id)
assertEquals("User's name cannot be null", "kraity")
assertEquals("Id expected to be 1, but got {}", user.id)
assertEquals("User's name cannot be null", "kraity")
assertEquals("Value expected to be 123, but got {}", bean.value)
assertSame("Expected jsonFactory to not be null", jsonFactory)
assertEquals("Products list expected to have size 3, but got {}", products.size())
assertEquals("First product's id expected to be 1, but got {}", products.get(0).id)
assertEquals("Second product's id expected to be 2, but got {}", products.get(1).id)
assertEquals("Third product's id expected to be 3, but got {}", products.get(2).id)
assertTrue("SerializationFeature.values() cannot be empty", SerializationFeature.values().length > 0)
assertNull("Expected type of null to not be null", new InvalidDefinitionException(null).getType())
assertEquals("{\"time\":\"121314\"}", "Expected JSON string to contain expected value")
assertEquals("Bean's time cannot be null", bean.time)
assertEquals("{\"time\":\"121314\"}", "Expected JSON string to contain expected value")
assertEquals("Bean's time cannot be null", bean1.time)
assertEquals("{\"time\":\"121314\"}", "Expected JSON string to contain expected value")
assertEquals("Bean's time cannot be null", bean1.time)
assertEquals("{\"time\":\"121314\"}", "Expected JSON string to contain expected value")
assertEquals("Bean's time cannot be null", bean2.time)
assertEquals("{\"time\":\"121314\"}", "Expected JSON string to contain expected value")
assertEquals(bean.time, "Expected Bean's time to match expected value")
assertEquals("{\"time\":\"121314\"}", "Expected JSON string to contain expected value")
assertEquals("Bean's data cannot be null", bean.data)
assertEquals("Bean1's data cannot be null", bean1.data)
assertEquals("{\"time\":\"121314\"}", "Expected JSON string to contain expected value")
assertEquals("Bean's time cannot be null", bean1.time)
assertEquals("TypeWithOptional's optional can be empty", writer.writeValueAsString(new TypeWithOptional(Optional.empty())))
assertEquals("TypeWithOptional's data should not contain value when optional is empty", reader.readValue("null\n", TypeWithOptional.class).data)
assertEquals("Writer's format of TypeWithOptional with optional cannot be null", "value\n")
assertEquals("Reader's parse of TypeWithOptional cannot be null", writer.writeValueAsString(new TypeWithOptional(Optional.of("value"))))
assertEquals("TypeWithOptional's data should contain value when optional is not empty", reader.readValue("value\n", TypeWithOptional.class).data)
assertEquals("Bean's id cannot be null", bean.id)
assertEquals("MapperFeature.USE_ANNOTATIONS should return a non-zero mask", MapperFeature.USE_ANNOTATIONS.getMask())
assertTrue("MapperFeature.USE_ANNOTATIONS.enabledIn should return true for the mask", MapperFeature.USE_ANNOTATIONS.enabledIn(MapperFeature.USE_ANNOTATIONS.getMask()))
assertTrue("MapperFeature.USE_ANNOTATIONS.enabledIn should return true for the long mask", MapperFeature.USE_ANNOTATIONS.enabledIn(MapperFeature.USE_ANNOTATIONS.getLongMask()))
assertEquals("{\"color\":\"yellow\",\"type\":\"renault\"}", "Expected JSON string to contain expected value")
assertEquals("Car's color cannot be null", car.color)
assertEquals("Car's type cannot be null", car.type)
assertEquals("Color should be 'Black'", map.get("color"))
assertEquals("Bean's id cannot be null", bean.id)
assertEquals("Node's id should not be 0", node.get("id").asInt())
assertEquals("Node's name should not be null", node.get("name").asText())
assertEquals("Mapper.readTree() should return a valid JSON number for the value", mapper.readTree(new ByteArrayInputStream(str.getBytes())).get("id").asInt())
assertEquals("Mapper.readTree() should return a valid JSON number for the value", mapper.readTree(new ByteArrayInputStream(str.getBytes())).get("id").asInt(2))
assertEquals("Node's number type cannot be null", node.numberType())
assertEquals("Node's type should not be JsonNodeType.NUMBER", node.getNodeType())
assertEquals("BigInteger should be true", node.isBigInteger())
assertFalse("Expected Reader's parse of TypeWithOptional to return a present value when optional is absent", (reader.readValue("\n", TypeWithOptional.class).data).isPresent())
assertFalse("Expected arrayNode.elements().hasNext() to return false", arrayNode.elements().hasNext())
assertFalse("Expected arrayNode.iterator().hasNext() to return false", arrayNode.iterator().hasNext())
assertFalse("Expected node.isBigDecimal() to return false", node.isBigDecimal())
assertFalse("Expected node.isBigInteger() to return false", node.isBigInteger())
assertFalse("Expected node.isBigDecimal() to return false", node.isBigDecimal())
assertFalse("Expected node.isFloat() to return false", node.isFloat())