assertNull(p1.getUnderlyingDataset(), "dataset não encontrado")
assertEquals(p1.getItemCount(), 0, "item count inválido")
assertTrue(p1.getKeys().isEmpty(), "chave existente")
assertNull(p1.getValue("R1"), "valor não encontrado")
assertEquals(d1.getValue("C1"), 1.1, "valor inválido")
assertEquals(d1.getValue("C2"), 2.2, "valor inválido")
assertEquals(d1.getKey(0), "C1", "chave inválida")
assertEquals(d1.getKey(1), "C2", "chave inválida")
assertEquals(0, d1.getIndex("C1"), "índice inválido")
assertEquals(1, d1.getIndex("C2"), "índice inválido")
assertEquals(-1, d1.getIndex("XX"), "índice inválido")
assertTrue(pass)
assertTrue(d1.equals(d2), "objetos não iguais")
assertEquals(d1, d2, "objetos não iguais")
assertEquals(d1.getUnderlyingDataset(), d2.getUnderlyingDataset(), "datasets não iguais")
assertEquals(d1.getExtractType(), d2.getExtractType(), "tipos de extração não iguais")
assertEquals(d1.getExtractIndex(), d2.getExtractIndex(), "índices de extração não iguais")
assertEquals(1.0, d.getValue("R1", "C1"), "valor inválido")
assertTrue(pass)
assertTrue(pass)
assertTrue(pass)
assertEquals(3.0, d.getValue("R1", "C1"), "valor inválido")
assertEquals(2.0, d.getValue("R2", "C1"), "valor inválido")
assertTrue(pass)
assertTrue(pass)
assertTrue(d.getRowCount() == 0, "contagem de linha inválida")
assertTrue(d.getRowCount() == 1, "contagem de linha inválida")
assertTrue(d.getRowCount() == 2, "contagem de linha inválida")
assertTrue(d.getRowCount() == 2, "contagem de linha inválida")
assertTrue(d.getRowCount() == 2, "contagem de linha inválida")
assertTrue(d.getColumnCount() == 0, "contagem de coluna inválida")
assertTrue(d.getColumnCount() == 1, "contagem de coluna inválida")
assertTrue(d.getColumnCount() == 2, "contagem de coluna inválida")
assertTrue(d.getColumnCount() == 2, "contagem de coluna inválida")
assertTrue(d.getColumnCount() == 2, "contagem de coluna inválida")
assertTrue(d1.equals(d2), "objetos não iguais")
assertTrue(d2.equals(d1), "objetos não iguais")
assertFalse(d1.equals(d2), "objetos não iguais")
assertTrue(d1.equals(d2), "objetos não iguais")
assertFalse(d1.equals(d2), "objetos não iguais")
assertTrue(d1.equals(d2), "objetos não iguais")
assertEquals(99.9, d.getStartValue("Series 1", "Category 2"), "valor inválido")
assertTrue(pass)
assertTrue(pass)