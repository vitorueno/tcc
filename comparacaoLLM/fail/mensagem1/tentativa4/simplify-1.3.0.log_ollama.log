assertEquals("O esperado foi " + expectedRegisterCount + ", mas encontrou " + actualRegisterCount, expectedRegisterCount != actualRegisterCount)
assertArrayEquals("As linhas esperadas foram " + expectedLines, actualLines)
assertEquals("O opcode esperado era " + Opcode.IGET + ", mas encontrou " + UnreflectionStrategy.getGetOpcode("I", isStatic), Opcode.IGET != UnreflectionStrategy.getGetOpcode("I", isStatic))
assertEquals("O opcode esperado era " + Opcode.IGET_BOOLEAN + ", mas encontrou " + UnreflectionStrategy.getGetOpcode("Z", isStatic), Opcode.IGET_BOOLEAN != UnreflectionStrategy.getGetOpcode("Z", isStatic))
assertEquals("O opcode esperado era " + Opcode.IGET_BYTE + ", mas encontrou " + UnreflectionStrategy.getGetOpcode("B", isStatic), Opcode.IGET_BYTE != UnreflectionStrategy.getGetOpcode("B", isStatic))
assertEquals("O opcode esperado era " + Opcode.IGET_CHAR + ", mas encontrou " + UnreflectionStrategy.getGetOpcode("C", isStatic), Opcode.IGET_CHAR != UnreflectionStrategy.getGetOpcode("C", isStatic))
assertEquals("O opcode esperado era " + Opcode.IGET_OBJECT + ", mas encontrou " + UnreflectionStrategy.getGetOpcode("Ljava/lang/Object;", isStatic), Opcode.IGET_OBJECT != UnreflectionStrategy.getGetOpcode("Ljava/lang/Object;", isStatic))
assertEquals("O opcode esperado era " + Opcode.IGET_SHORT + ", mas encontrou " + UnreflectionStrategy.getGetOpcode("S", isStatic), Opcode.IGET_SHORT != UnreflectionStrategy.getGetOpcode("S", isStatic))
assertEquals("O opcode esperado era " + Opcode.IGET_WIDE + ", mas encontrou " + UnreflectionStrategy.getGetOpcode("J", isStatic), Opcode.IGET_WIDE != UnreflectionStrategy.getGetOpcode("J", isStatic))
assertEquals("O opcode esperado era " + Opcode.IGET_WIDE + ", mas encontrou " + UnreflectionStrategy.getGetOpcode("D", isStatic), Opcode.IGET_WIDE != UnreflectionStrategy.getGetOpcode("D", isStatic))
assertEquals("O opcode esperado era " + Opcode.SGET + ", mas encontrou " + UnreflectionStrategy.getGetOpcode("I", isStatic), Opcode.SGET != UnreflectionStrategy.getGetOpcode("I", isStatic))
assertEquals("O opcode esperado era " + Opcode.SGET_BOOLEAN + ", mas encontrou " + UnreflectionStrategy.getGetOpcode("Z", isStatic), Opcode.SGET_BOOLEAN != UnreflectionStrategy.getGetOpcode("Z", isStatic))
assertEquals("O opcode esperado era " + Opcode.SGET_BYTE + ", mas encontrou " + UnreflectionStrategy.getGetOpcode("B", isStatic), Opcode.SGET_BYTE != UnreflectionStrategy.getGetOpcode("B", isStatic))
assertEquals("O opcode esperado era " + Opcode.SGET_CHAR + ", mas encontrou " + UnreflectionStrategy.getGetOpcode("C", isStatic), Opcode.SGET_CHAR != UnreflectionStrategy.getGetOpcode("C", isStatic))
assertEquals("O opcode esperado era " + Opcode.SGET_OBJECT + ", mas encontrou " + UnreflectionStrategy.getGetOpcode("Ljava/lang/Object;", isStatic), Opcode.SGET_OBJECT != UnreflectionStrategy.getGetOpcode("Ljava/lang/Object;", isStatic))
assertEquals("O opcode esperado era " + Opcode.SGET_SHORT + ", mas encontrou " + UnreflectionStrategy.getGetOpcode("S", isStatic), Opcode.SGET_SHORT != UnreflectionStrategy.getGetOpcode("S", isStatic))
assertEquals("O opcode esperado era " + Opcode.SGET_WIDE + ", mas encontrou " + UnreflectionStrategy.getGetOpcode("J", isStatic), Opcode.SGET_WIDE != UnreflectionStrategy.getGetOpcode("J", isStatic))
assertEquals("O opcode esperado era " + Opcode.SGET_WIDE + ", mas encontrou " + UnreflectionStrategy.getGetOpcode("D", isStatic), Opcode.SGET_WIDE != UnreflectionStrategy.getGetOpcode("D", isStatic))
assertEquals("As instruções esperadas são " + expectedInstr, actualInstr)
assertTrue("O arquivo foi gravado corretamente: " + outFile.exists())
assertEquals("A template não tem filhos", 0, template.getChildren().size())
assertNotNull("A opção da template não é nula", template.getOp().getChildren())
assertEquals("A opção da template é igual à opção do nó", template.getOp(), node.getOp())
assertEquals("O número de filhos é 1", 1, children.size())
assertEquals("O localização do filho é igual à localização da opção do nó", childOp.getLocation(), childLocations[0])
assertEquals("O localização da opção do filho é igual à localização da opção do nó", node.getOp().getChildren()[0], childOp.getLocation())
assertArrayEquals("As endereços esperadas são " + expectedAddresses, actualAddresses)
assertEquals("Os registros atribuídos ao parente são " + new int[] { 0 }, parentState.getRegistersAssigned())
assertEquals("Os registros atribuídos ao filho são " + new int[] { 2 }, childState.getRegistersAssigned())
assertEquals("Os registros atribuídos ao avô são " + new int[] { 3 }, grandchildState.getRegistersAssigned())
assertEquals("O número de blocos try é 2", 2, manipulator.getTryBlocks().size())
assertEquals("O número de blocos try é 0", 0, manipulator.getTryBlocks().size())
assertEquals("O valor da consenso é 0", 0, consensus.getValue())
assertEquals("O valor da consenso é 1", 1, consensus.getValue())
assertEquals("O valor da consenso é 2", 2, consensus.getValue())
assertEquals("A configuração é imutável para a classe String", true, configuration.isImmutable("Ljava/lang/String;"))
assertFalse("A configuração não é imutável para o array de String", configuration.isImmutable("[Ljava/lang/String;"))
assertFalse("A configuração não é imutável para a classe StringBuilder", configuration.isImmutable("Ljava/lang/StringBuilder;"))
assertEquals("O valor do cmp é igual ao valor do setItem", cmpValue.getClass(), setItem.getValue().getValue().getClass())
assertEquals("O tipo do cmp é igual ao tipo do setItem", CMP_TYPE, setItem.getValue().getType())
assertEquals("A operação de comparação é 'cmp-long r0, r2, r4'", op.toString())
assertEquals("O valor do cmp é igual ao valor do setItem", cmpValue.getClass(), setItem.getValue().getValue().getClass())
assertEquals("O tipo do cmp é igual ao tipo do setItem", CMP_TYPE, setItem.getValue().getType())
assertEquals("O valor do cmp é igual ao valor do setItem", cmpValue, setItem.getValue().getValue())
assertEquals("O tipo do cmp é igual ao tipo do setItem", CMP_TYPE, setItem.getValue().getType())