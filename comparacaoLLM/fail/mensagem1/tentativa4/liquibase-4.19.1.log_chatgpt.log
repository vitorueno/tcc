"cdiLiquibase não deve ser nulo"
"cdiLiquibase.isInitialized() deve ser igual a shouldBeRunning"
"cdiLiquibase.isUpdateSuccessful() deve ser igual a shouldBeRunning"
"resolved.size() deve ser igual a liquibaseSchemas.size()"
"previous.size() deve ser igual a 9"
"resolved.size() deve ser igual a schemes.size()"
"previous.size() deve ser igual a 16"
"resolved.size() deve ser igual a liquibaseSchemas.size()"
"resolved.size() deve ser igual a 7"
"locations.size() deve ser igual a 1"
"dirLocation deve ser igual a mojo.changeLogDirectory"
"mojo não deve ser nulo"
"mojo.getOutputDirectory() deve ser igual a 'target/liquibase/myOutputDirectory'"
"databaseDataType.getType() deve ser igual a 'TIMESTAMP_NTZ'"
"databaseDataType.toSql() deve ser igual a 'TIMESTAMP_NTZ'"
"databaseDataType.isAutoIncrement() deve ser falso"
"aliases deve conter 'datetime' e 'java.sql.Types.DATETIME'"
"liquibaseDataType.getClass().getName() deve ser igual a 'liquibase.datatype.core.TimestampNTZTypeSnowflake'"
"timestampNTZType deve suportar snowflakeDatabase"
"timestampNTZType não deve suportar PostgresDatabase"
"timestampNTZType.getPriority() deve ser igual a PRIORITY_DATABASE"
"timestampNTZType.getMinParameters(snowflakeDatabase) deve ser igual a 0"
"timestampNTZType.getMinParameters(snowflakeDatabase) deve ser igual a 0"
"database.getShortName() deve ser igual a 'snowflake'"
"database.getDefaultDatabaseProductName() deve ser igual a 'Snowflake'"
"database.getDefaultPort() deve ser nulo"
"database.getCurrentDateTimeFunction() deve ser igual a 'current_timestamp::timestamp_ntz'"
"database.getPriority() deve ser igual a PRIORITY_DATABASE"
"database não deve suportar colunas inicialmente adiáveis"
"database deve suportar cascata de exclusão de tabelas"
"jdbcConnection deve ser implementação correta de database"
"database.getDefaultDriver('jdbc:snowflake:') deve ser igual a 'net.snowflake.client.jdbc.SnowflakeDriver'"
"database.getDefaultDriver('jdbc:wrong-name:') deve ser nulo"
"database deve suportar schemas"
"database deve suportar catálogos"
"database não deve suportar catálogo em nome de objeto nulo"
"database deve suportar sequências"
"database.getDatabaseChangeLogTableName() deve ser igual a 'DATABASECHANGELOG'"
"database.getDatabaseChangeLogLockTableName() deve ser igual a 'DATABASECHANGELOGLOCK'"
"database não deve suportar tablespaces"
"database deve suportar incremento automático"
"database.getAutoIncrementClause() deve retornar 'AUTOINCREMENT'"
"database.getAutoIncrementClause(null, null, null, null) deve retornar 'AUTOINCREMENT (1, 1)'"
"database.getAutoIncrementClause(new BigInteger('1'), new BigInteger('1'), null, null) deve retornar 'AUTOINCREMENT (1, 1)'"
"database.getAutoIncrementClause(new BigInteger('7'), new BigInteger('1'), null, null) deve retornar 'AUTOINCREMENT (7, 1)'"
"database.getAutoIncrementClause(new BigInteger('1'), new BigInteger('7'), null, null) deve retornar 'AUTOINCREMENT (1, 7)'"
"database.getAutoIncrementClause(new BigInteger('7'), null, null, null) deve retornar 'AUTOINCREMENT (7, 1)'"
"database.getAutoIncrementClause(null, new BigInteger('7'), null, null) deve retornar 'AUTOINCREMENT (1, 7)'"
"database.generateAutoIncrementStartWith(new BigInteger('1')) deve retornar verdadeiro"
"database.generateAutoIncrementBy(new BigInteger('1')) deve retornar verdadeiro"
"database deve suportar chaves estrangeiras restringidas"
"'table' deve ser palavra reservada de database"
"database.getDefaultCatalogName() deve ser nulo"
"database.getDefaultSchemaName() deve ser nulo"
"database.getJdbcCatalogName(null) deve ser nulo"
"database.getJdbcSchemaName(null) deve ser nulo"
"pk deve conter 1 nome de coluna"
"pk deve conter 2 nomes de coluna"
"pk deve conter 'id1' como primeiro nome de coluna"
"pk deve conter 'id2' como segundo nome de coluna"
"pk deve conter 2 nomes de coluna"
"pk deve conter 'id1' como primeiro nome de coluna"
"pk deve conter 'id2' como segundo nome de coluna"
"ChangeLogSerializerFactory.getInstance() não deve ser nulo"
"ChangeLogSerializerFactory.getInstance() deve ser o mesmo objeto que ChangeLogSerializerFactory.getInstance()"
"ChangeLogSerializerFactory.getInstance().getSerializers() deve ter tamanho 0"
"ChangeLogSerializerFactory.getInstance().getSerializers() deve ter tamanho 1"
"factory.getSerializers() deve ter tamanho 0"
"factory.getSerializers() deve ter tamanho 2"
"factory.getSerializers() deve ter tamanho 1"
"instance1 e ChangeLogSerializerFactory.getInstance() não devem ser o mesmo objeto"
"serializers deve ter tamanho 6"
"serializer deve ser diferente de nulo"
"serializer deve ser uma instância de XMLChangeLogSerializer"
"ChangeLogSerializerFactory.getInstance().getSerializers('xml') deve ter tamanho 1"
"serializer com maior prioridade deve ser retornado ao solicitar 'xml'"
"factory.getSerializers().get('xml') deve ter tamanho 3"
"serializedJson deve ser igual ao JSON serializado fornecido"
"node.getTagName() deve ser 'addAutoIncrement'"
"node.getTagName() deve ser 'addColumn'"
"node.getAttribute('tableName') deve ser 'TAB'"
"columns.getLength() deve ser igual a 1"
"((Element) columns.item(0)).getTagName() deve ser 'column'"
"((Element) columns.item(0)).getAttribute('name') deve ser 'NEWCOL'"
"((Element) columns.item(0)).getAttribute('type') deve ser 'TYP'"
"node.getTagName() deve ser 'addDefaultValue'"
"node.getAttribute('schemaName') deve ser 'SCHEMA_NAME'"
"node.getAttribute('tableName') deve ser 'TABLE_NAME'"
"node.getAttribute('columnName') deve ser 'COLUMN_NAME'"
"node.getAttribute('defaultValue') deve ser 'DEF STRING'"
"node.getAttribute('defaultValueNumeric') deve ser '42'"
"node.getAttribute('defaultValueBoolean') deve ser 'true'"
"node.getAttribute('defaultValueDate') deve ser '2007-01-02'"
"node.getAttribute('defaultValueSequenceNext') deve ser 'sampleSeq'"
"node.getTagName() deve ser 'addForeignKeyConstraint'"
"node.getAttribute('constraintName') deve ser 'FK_NAME'"
"node.getAttribute('baseTableSchemaName') deve ser 'BASE_SCHEMA_NAME'"
"node.getAttribute('baseTableName') deve ser 'BASE_TABLE_NAME'"