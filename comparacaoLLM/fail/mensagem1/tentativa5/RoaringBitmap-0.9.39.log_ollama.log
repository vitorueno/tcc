assertFalse("Bitmap não contém elemento")
assertFalse("Bitmap reversa não contém elemento")
assertEquals("Carteira tem o mesmo tamanho que o iterator", bitmap.getCardinality(), iteratorCopy.size())
assertEquals("Carteira tem o mesmo tamanho que o iterator", bitmap.getCardinality(), intIteratorCopy.size())
assertEquals("Carteira tem o mesmo tamanho que a iteração reversa do iterator", bitmap.getCardinality(), reverseIntIteratorCopy.size())
assertEquals("Lista de dados é igual ao iterator", ints.asList(data), iteratorCopy)
assertEquals("Lista de dados é igual ao iterator", ints.asList(data), intIteratorCopy)
assertEquals("Lista de dados em ordem reversa é igual à iteração reversa do iterator", Lists.reverse(Ints.asList(data)), reverseIntIteratorCopy)
assertEquals("Lista de dados com elementos específicos é igual ao iterator", ImmutableList.of(1, 2, 3), iteratorCopy)
assertEquals("Lista de dados com elementos específicos é igual ao iterator", ImmutableList.of(1, 2, 3), intIteratorCopy)
assertEquals("Lista de dados em ordem reversa com elementos específicos é igual à iteração reversa do iterator", ImmutableList.of(3, 2, 1), reverseIntIteratorCopy)
assertEquals("Último elemento da bitmap é igual ao máximo da iteração reversa", bitmap.last(), bitmap.reverseStream().max().getAsInt())
assertEquals("Último elemento da bitmap é igual ao máximo da iteração", bitmap.last(), bitmap.stream().max().getAsInt())
Assertions.assertEquals("Tamanho do source é igual à variável total", total, source.size())
assertEquals("O valor de rb1 é igual a rb2", rb1, rb2)
assertNotEquals("Os valores de rb1 e rb2 são diferentes", rb1, rb2)
assertEquals("O valor de rb1 é igual a rb2", rb1, rb2)
Assertions.assertEquals("Tamanho do source é igual à variável i", total, i)
Assertions.assertEquals("Tamanho do source é igual à variável i", source.size(), i)
Assertions.assertEquals("O valor de select2 é igual ao select 2", select2, deserStreamOne.select(2))
Assertions.assertEquals("O valor de select2 é igual ao select 2", select2, deserBBOne.select(2))
assertFalse("Iterator de longos não contém elemento")
assertEquals("Carteira tem cardinalidade zero", 0, map.getLongCardinality())
assertTrue("Bitmap está vazia", map.isEmpty())
assertFalse("Valor presente na bitmap não existe")
assertEquals("O valor de rankLong Long.MIN_VALUE é igual a 0", 0, map.rankLong(Long.MIN_VALUE))
assertEquals("O valor de rankLong Long.MIN_VALUE + 1 é igual a 0", 0, map.rankLong(Long.MIN_VALUE + 1))
assertEquals("O valor de rankLong -1 é igual a 0", 0, map.rankLong(-1))
assertEquals("O valor de rankLong 0 é igual a 0", 0, map.rankLong(0))
assertEquals("O valor de rankLong 1 é igual a 0", 0, map.rankLong(1))
assertEquals("O valor de rankLong Long.MAX_VALUE - 1 é igual a 0", 0, map.rankLong(Long.MAX_VALUE - 1))
assertEquals("O valor de rankLong Long.MAX_VALUE é igual a 0", 0, map.rankLong(Long.MAX_VALUE))
assertTrue("Iterator tem próximo elemento")
assertEquals("Valor do próximo elemento é igual a 0", 0, iterator.next())
assertEquals("O valor selecionado da bitmap é igual a 0", 0, map.select(0))
assertTrue("O valor presente na bitmap existe")
assertFalse("Iterator não contém elemento")
assertEquals("Carteira tem cardinalidade um", 1, map.getLongCardinality())
assertFalse("Bitmap está vazia")
assertEquals("O valor de rankLong Long.MIN_VALUE é igual a 1", 1, map.rankLong(Long.MIN_VALUE))
assertEquals("O valor de rankLong Integer.MIN_VALUE - 1L é igual a 1", 1, map.rankLong(Integer.MIN_VALUE - 1L))
assertEquals("O valor de rankLong -1 é igual a 1", 1, map.rankLong(-1))
assertEquals("O valor de rankLong 0 é igual a 1", 1, map.rankLong(0))
assertEquals("O valor de rankLong 1 é igual a 0", 0, map.rankLong(1))
assertEquals("O valor de rankLong Long.MAX_VALUE - 1 é igual a 1", 1, map.rankLong(Long.MAX_VALUE - 1))
assertEquals("O valor de rankLong Long.MAX_VALUE é igual a 1", 1, map.rankLong(Long.MAX_VALUE))
assertArrayEquals("Valor da bitmap é igual a [Long.MAX_VALUE]", new long[] { Long.MAX_VALUE }, map.toArray())
assertTrue("Iterator tem próximo elemento")
assertEquals("Valor do próximo elemento é igual a Long.MIN_VALUE", Long.MIN_VALUE, iterator.next())