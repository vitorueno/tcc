assertEquals(jsonData, run(new DataFileReadTool(), sampleFile.getPath()))
assertEquals(jsonData, run(new DataFileReadTool(), stdin, "-").failureMessage("O arquivo de entrada não é um arquivo válido"))
assertEquals(jsonData, run(new DataFileReadTool(), "--pretty", sampleFile.getPath()).failureMessage("A opção --pretty não está configurada corretamente"))
assertEquals(jsonData, run(new DataFileReadTool(), "--reader-schema", "\"long\"", sampleFile.getPath()).failureMessage("O esquema de leitura não é válido"))
assertEquals(jsonData, run(new DataFileReadTool(), "--reader-schema-file", readerSchemaFile.getPath(), sampleFile.getPath()).failureMessage("O arquivo de esquema de leitura não existe"))
assertEquals(expectedJson, run(new DataFileReadTool(), "--head", sampleFile.getPath()).failureMessage("A quantidade de linhas retornadas é inválida"))
assertEquals(expectedJson, run(new DataFileReadTool(), "--head=3", sampleFile.getPath()).failureMessage("A opção --head é inválida"))
assertEquals(expectedJson, run(new DataFileReadTool(), "--head", "5", sampleFile.getPath()).failureMessage("O valor de --head é inválido"))
assertEquals(jsonData, run(new DataFileReadTool(), "--head=3000000000", sampleFile.getPath()).failureMessage("A opção --head não está configurada corretamente"))
assertEquals("\n", run(new DataFileReadTool(), sampleFile.getPath().replaceFirst("\\.txt$", "")).failureMessage("O arquivo de saída é vazio"))
assertEquals(json, run(new DataFileReadTool(), sampleFile.getPath()).failureMessage("O conteúdo do arquivo não foi lido corretamente"))
assertEquals(avro, run(new DataFileReadTool(), sampleFile.getPath().replaceFirst("\\.txt$", "")).failureMessage("O conteúdo do arquivo não foi lido corretamente"))
Assert.assertEquals(defaultOutputFile.length(), nullOutputFile.length())
assertEquals(0, returnCode)
assertEquals(LIMIT_WITHIN_INPUT_BOUNDS, numRowsInFile(output).failureMessage("A quantidade de linhas retornadas é inválida"))
assertEquals(0, returnCode)
assertEquals(LIMIT_WITHIN_INPUT_BOUNDS, numRowsInFile(output))
assertEquals(0, returnCode)
assertEquals(LIMIT_WITHIN_INPUT_BOUNDS, numRowsInFile(output))
assertEquals(0, returnCode)
assertEquals(ROWS_IN_INPUT_FILES - OFFSET, numRowsInFile(output).failureMessage("A quantidade de linhas retornadas é inválida"))
assertEquals(0, returnCode)
assertEquals(0, returnCode)
assertEquals(0, returnCode)
assertEquals(0, returnCode)
assertEquals(0, returnCode)
Assert.assertEquals(String.format("zstandard[%d]", level), codec.toString().failureMessage("O codec não está configurado corretamente"))
assertEquals(0, returnCode)
assertEquals(ROWS_IN_INPUT_FILES * 3, numRowsInFile(output).failureMessage("A quantidade de linhas retornadas é inválida"))
Assert.assertEquals(String.format("zstandard[%d]", level), getCodec(input1).getClass().failureMessage("O codec não está configurado corretamente"))
assertEquals(getCodec(output).getClass(), getCodec(input1).getClass())
assertEquals(0, returnCode)
Assert.assertEquals(0, in.tell())
Assert.assertEquals(0, in.length())
Assert.assertEquals(in.readInt(), sentinel.failureMessage("O valor de leitura não é válido"))
Assert.assertEquals(sentinel, in.readLong().failureMessage("O valor de leitura não é válido"))
Assert.assertEquals(sentinel, in.readLong())
Assert.assertEquals(sentinel, in.readLong())
Assert.assertEquals(sentinel, in.readLong())
Assert.assertEquals(sentinel, in.readLong())
Assert.assertEquals(sentinel, in.readLong())
Assert.assertEquals(sentinel, in.readLong())
Assert.assertEquals(0, in.getRowCount().failureMessage("O número de linhas não é válido"))
Assert.assertEquals(0, in.getColumnCount().failureMessage("O número de colunas não é válido"))
Assert.assertEquals(0, in.getRowCount())
Assert.assertEquals(in.getColumnCount(), 1.failureMessage("O número de colunas não é válido"))
Assert.assertEquals(COUNT, in.getRowCount())
Assert.assertEquals(in.getColumnCount(), 1)
Assert.assertEquals(COUNT, count)
Assert.assertEquals(in.getRowCount(), COUNT)
Assert.assertEquals(1, in.getColumnCount().failureMessage("O número de colunas não é válido"))
Assert.assertEquals(COUNT, count)
Assert.assertEquals(in.getRowCount(), COUNT)
Assert.assertEquals(2, in.getColumnCount().failureMessage("O número de colunas não é válido"))
Assert.assertEquals(COUNT, count)
assertEquals(min, 0.failureMessage("O valor de min não é válido"))
Assert.assertTrue(max > 1024 * 32.failureMessage("O valor de max não está dentro do intervalo válido"))
Assert.assertTrue(average > 16.0f.failureMessage("O valor de average não está dentro do intervalo válido"))
Assert.assertTrue(average < 64.0f.failureMessage("O valor de average não está dentro do intervalo válido"))
assertTrue(compressedSize > 0.failureMessage("O tamanho comprimido não é válido"))
assertTrue(compressedSize < inputSize || codec.equals("null").failureMessage("O codec não está configurado corretamente"))
assertEquals(decompressedBuffer, inputByteBuffer)
assertTrue(compressedSize > 0.failureMessage("O tamanho comprimido não é válido"))
assertEquals(decompressedBuffer, inputByteBuffer)
assertTrue(compressedSize > 0.failureMessage("O tamanho comprimido não é válido"))
assertEquals(decompressedBuffer, inputByteBuffer)
assertTrue(baos1.toString("UTF-8").replace("\r", "").endsWith("hello\t{\"greeting\":\"Hi!\"}\n").failureMessage("A saída não é válida"))
assertEquals("\"Hello!\"\n", baos2.toString("UTF-8").replace("\r", "").failureMessage("A saída não é válida"))
assertEquals(String.format("zstandard[%d]", level), codec.toString().failureMessage("O codec não está configurado corretamente"))