assertEquals("sun.misc.Unsafe", c.getCanonicalName(), "Valor esperado: sun.misc.Unsafe")
assertEquals(1, user.id, "Valor esperado: 1")
assertEquals("kraity", user.name, "Valor esperado: kraity")
assertEquals(1, user.id, "Valor esperado: 1")
assertEquals("kraity", user.name, "Valor esperado: kraity")
assertEquals(123, bean.value, "Valor esperado: 123")
assertSame(jsonFactory, objectMapper.getFactory(), "Valor esperado: jsonFactory")
assertEquals(3, products.size(), "Valor esperado: 3")
assertEquals(1, products.get(0).id, "Valor esperado: 1")
assertEquals(2, products.get(1).id, "Valor esperado: 2")
assertEquals(3, products.get(2).id, "Valor esperado: 3")
assertTrue(SerializationFeature.values().length > 0, "Valor esperado: true")
assertNull(new InvalidDefinitionException(null).getType(), "Valor esperado: null")
assertEquals("{\"time\":\"121314\"}", str, "Valor esperado: \"{\"time\":\"121314\"}\"")
assertEquals(bean.time, bean1.time, "Valor esperado: {bean.time, bean1.time}")
assertEquals("{\"time\":\"121314\"}", str, "Valor esperado: \"{\"time\":\"121314\"}\"")
assertEquals(bean.time, bean1.time, "Valor esperado: {bean.time, bean1.time}")
assertEquals("{\"time\":\"121314\"}", str, "Valor esperado: \"{\"time\":\"121314\"}\"")
assertEquals(bean.time, bean1.time, "Valor esperado: {bean.time, bean1.time}")
assertEquals("{\"time\":\"121314\"}", str, "Valor esperado: \"{\"time\":\"121314\"}\"")
assertEquals(bean.time, bean1.time, "Valor esperado: {bean.time, bean1.time}")
assertEquals("{\"time\":\"121314\"}", str, "Valor esperado: \"{\"time\":\"121314\"}\"")
assertEquals(bean.time, bean1.time, "Valor esperado: {bean.time, bean1.time}")
assertEquals(instantCsv, writer.writeValueAsString(bean), "Valor esperado: {instantCsv}")
assertEquals(bean.data, bean1.data, "Valor esperado: {bean.data, bean1.data}")
assertEquals(instantCsv, str, "Valor esperado: {instantCsv}")
assertEquals(bean.data, bean1.data, "Valor esperado: {bean.data, bean1.data}")
assertEquals("value\n", writer.writeValueAsString(new TypeWithOptional(Optional.of("value"))), "Valor esperado: value")
assertEquals("\n", writer.writeValueAsString(new TypeWithOptional(Optional.empty())), "Valor esperado: \n")
assertTrue((reader.readValue("value\n", TypeWithOptional.class).data).get().contains("value"), "Valor esperado: true")
assertTrue((reader.readValue("null\n", TypeWithOptional.class).data).get().contains("null"), "Valor esperado: true")
assertEquals(instantCsv, str, "Valor esperado: {instantCsv}")
assertEquals(bean.data, bean1.data, "Valor esperado: {bean.data, bean1.data}")
assertEquals("value\n", writer.writeValueAsString(new TypeWithOptional(Optional.of("value"))), "Valor esperado: value")
assertEquals("\n", writer.writeValueAsString(new TypeWithOptional(Optional.empty())), "Valor esperado: \n")
assertTrue((reader.readValue("value\n", TypeWithOptional.class).data).get().contains("value"), "Valor esperado: true")
assertTrue((reader.readValue("null\n", TypeWithOptional.class).data).get().contains("null"), "Valor esperado: true")
assertTrue((reader.readValue("\n", TypeWithOptional.class).data).get().isEmpty(), "Valor esperado: false")
assertNotNull(entry, "Valor esperado: null")
assertEquals(123, entry.getJobResult().id, "Valor esperado: 123")
assertEquals(123, bean.id, "Valor esperado: 123")
assertEquals(123, bean1.id, "Valor esperado: 123")
assertEquals(bigInt.intValue(), node.asInt(), "Valor esperado: bigInt.intValue()")
assertEquals(bigInt.intValue(), node.asInt(2), "Valor esperado: bigInt.intValue()")
assertEquals(bigInt.intValue(), node.intValue(), "Valor esperado: bigInt.intValue()")
assertEquals(bigInt.longValue(), node.longValue(), "Valor esperado: bigInt(longValue())")
assertEquals(bigInt.doubleValue(), node.asDouble(), "Valor esperado: bigInt(doubleValue())")
assertFalse((reader.readValue("\n", TypeWithOptional.class).data).isPresent(), "Valor esperado: false")
assertFalse(arrayNode.elements().hasNext(), "Valor esperado: false")
assertFalse(arrayNode.iterator().hasNext(), "Valor esperado: false")
assertFalse(node.isBigDecimal(), "Valor esperado: false")
assertFalse(node.isBigInteger(), "Valor esperado: false")