assertTrue("Leg is impossible")
assertFalse("Leg is not cancelled departure at stop 0")
assertEquals("Wrong leg size, expected 2", 2)
assertTrue("Alternative is impossible")
assertFalse("Departure cancelled for first leg of alternative")
assertFalse("Route has errors")
assertFalse("First leg of route is within station transfer")
assertFalse("Second leg of route is within station transfer")
assertFalse("Third leg of route is within station transfer")
assertEquals("Wrong leg size, expected 1", 1)
assertTrue("Leg is not cancelled departure at stop 2")
assertFalse("Route has errors")
assertEquals("Wrong departure time, expected 10:00", "14:10")
assertFalse("Leg is not within station transfer")
assertFalse("Transfer is not from stop A to B")
assertFalse("Departure time of leg is not correct")
assertFalse("Leg is not with in station transfer")
assertFalse("Third leg of route is with in station transfer")
assertFalse("Fourth leg of route is with in station transfer")
assertTrue("Alternative is impossible")
assertFalse("Leg is within station transfer")
assertEquals("Wrong fare attribute price, expected to be greater than onlyFare.fare_attribute.price", amount.getAmount())
assertFalse("Cheapest FareWhereEveryLegGoesThroughAllZones is not equal to cheapestFare")
assertFalse("Route has errors")
assertFalse("Transfer from stop A to B")
assertTrue("Departure time of leg is correct")
assertFalse("Third leg of route is within station transfer")