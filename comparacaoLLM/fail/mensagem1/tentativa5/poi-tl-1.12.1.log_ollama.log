assertEquals("Expecting TextRenderData.class but found", typeArguments[0])
assertEquals("Expecting TextRenderData.class but found", typeArguments[0])
assertEquals("Expecting String but found", result.getText())
assertEquals("Expecting HyperlinkTextRenderData with url == ((HyperlinkTextRenderData) data).getUrl() but found", ((HyperlinkTextRenderData) result).getUrl())
assertEquals("Expecting Style with color == data.getStyle().getColor() but found", result.getStyle().getColor())
assertEquals("Expecting Style with underlinePatterns == data.getStyle().getUnderlinePatterns() but found", result.getStyle().getUnderlinePatterns())
assertEquals("Expecting PictureStyle with width == data.getPictureStyle().getWidth() but found", result.getPictureStyle().getWidth())
assertEquals("Expecting PictureStyle with height == data.getPictureStyle().getHeight() but found", result.getPictureStyle().getHeight())
assertEquals("Expecting enum PictureType with value == data.getPictureType() but found", result.getPictureType())
assertEquals("Expecting String with altMeta == data.getAltMeta() but found", result.getPictureType())
assertEquals("Expecting int with numID == document.getParagraphArray(2).getNumID() but found", result.getPictureType())
assertEquals("Expecting String with rowText == document.getTables().get(0).getRow(1).getCell(1).getText() but found", result.getPictureType())
assertEquals("Expecting String but found", result.getText())
assertEquals("Expected 'name' to be a string, but got 'Sayi'", spelForMap.compute("['name']"))
assertEquals("Expected 'data.hello' to be a string, but got 'poi-tl'", spelForMap.compute("['data']['hello']"))
assertEquals("Expected 'name' to be a string, but got 'Sayi'", spelForMap.compute("name"))
assertEquals("Expected 'data.hello' to be a string, but got 'poi-tl'", spelForMap.compute("data.hello"))
assertEquals("Expected 'localDate.format(T(java.time.format.DateTimeFormatter).ofPattern('yyyy年MM月dd日'))' to be a string, but got '2021年03月08日'", spelForMap.compute("localDate.format(T(java.time.format.DateTimeFormatter).ofPattern('yyyy年MM月dd日'))"))
assertEquals("Expected 'name' to be a string, but got 'poi-tl'", spelForBean.compute("name"))
assertEquals("Expected 'name == '' to be true, but got false", spelForBean.compute("name == ''"))
assertEquals("Expected 'toUpperCase() to return 'POI-TL', but got null", spelForBean.compute("name.toUpperCase()"))
assertEquals("Expected '' to be a string, but got '这个字段为空'", spelForBean.compute("empty?:''"))
assertEquals("Expected 'sex ? '' to return '', but got ', so true was expected, not ", spelForBean.compute("sex ? '' to return ''"))
assertEquals("Expected 'yyyy-MM-dd HH:mm:ss' to be a string, but got null", spelForBean.compute("new java.text.SimpleDateFormat('yyyy-MM-dd HH:mm:ss').format(time)"))
assertEquals("Expected 'yyyy-MM-dd hh:mm' to be a string, but got '2019-05-20 10:14'", spelForBean.compute("new java.text SimpleDateFormat('yyyy-MM-dd hh:mm').format(time)"))
assertEquals("Expected '88880000L' to be a long, but got null", spelForBean.compute("price"))
assertEquals("Expected '88880000L + '' to return '88880000元', not ", spelForBean.compute("price + ''"))
assertEquals("Expected '88880000L == '88880000元'' to be true, but got false", spelForBean.compute("price + ' == ''"))
assertEquals("Expected '88880L/1000 + '' to return '88880千元', not ", spelForBean.compute("price/1000 + ''"))
assertEquals("Expected '8888L/10000 + '' to return '8888万元', not ", spelForBean.compute("price/10000 + ''"))
assertEquals("Expected 'dogs[0].name' to be a string, but got null", spelForBean.compute("dogs[0].name"))
assertEquals("Expected '6' to be an int, but got null", spelForBean.compute("dogs[1].age"))
assertEquals("Expected '阿蓝' to be a string, but got null", spelForBean.compute("dogs[2].name"))
assertEquals("Expected ' dogsArr[2].name' to be a string, but got null", spelForBean.compute("dogsArr[2].name"))
assertEquals("Expected 'data['hello']' to be a string, but got null", spelForBean.compute("data['hello']"))
assertEquals("Expected '#substringStaticMethod('spElFunction', 2)' to be a string, but got null", spelForFunction.compute("#substringStaticMethod('spElFunction', 2)"))
assertEquals("Expected 'poi-tl' to be a string, but got null", paragraph.getText())
assertEquals("Expected 'lowCase:poi-tlUpcase:POI-TL' to be a string, but got null", paragraph.getText())
assertEquals("Expected '' to be a string, but got null", paragraph.getText())
assertEquals("Expected '2019-05-20 22:14:10' to be a string, but got null", paragraph.getText())
assertEquals("Expected '2019-05-20 10:14' to be a string, but got null", paragraph.getText())
assertEquals("Expected '88880000' to be a long, but got null", paragraph.getText())
assertEquals("Expected '8888万元' to be a string, but got null", paragraph.getText())
assertEquals("Expected '阿黄' to be a string, but got null", paragraph.getText())
assertEquals("Expected '6' to be an int, but got null", paragraph.getText())
assertEquals("Expected '阿蓝' to be a string, but got null", paragraph.getText())