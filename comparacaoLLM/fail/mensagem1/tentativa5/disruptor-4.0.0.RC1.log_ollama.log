assertNotNull(eventHandlerGroup) "O grupo de event handlers não pode ser nulo"
assertSame(testException, actualException) "As exceções não estão sendo tratadas corretamente"
assertSame(testException, actualException) "As exceções não estão sendo tratadas corretamente"
assertSame(testException, actualException) "As exceções não estão sendo tratadas corretamente"
assertSame(testException, actualException) "As exceções não estão sendo tratadas corretamente"
assertSame(testException, actualException) "As exceções não estão sendo tratadas corretamente"
assertEquals(0, sequencer.next()) "O próximo valor do sequenciador não é 0"
assertEquals(3, sequencer.next(4)) "O próximo valor do sequenciador com limite 4 não é 3"
assertTrue(sequencer.hasAvailableCapacity(1)) "Não há espaço disponível no sequenciador para capacidade de 1"
assertTrue(sequencer.hasAvailableCapacity(BUFFER_SIZE)) "Não há espaço disponível no sequenciador para capacidade de BUFFER_SIZE"
assertFalse(sequencer.hasAvailableCapacity(BUFFER_SIZE + 1)) "Há espaço disponível no sequenciador para capacidade de BUFFER_SIZE+1"
assertTrue(sequencer.hasAvailableCapacity(BUFFER_SIZE - 1)) "Não há espaço disponível no sequenciador para capacidade de BUFFER_SIZE-1"
assertFalse(sequencer.hasAvailableCapacity(BUFFER_SIZE)) "Há espaço disponível no sequenciador para capacidade de BUFFER_SIZE"
assertFalse(sequencer.hasAvailableCapacity(1)) "Há espaço disponível no sequenciador para capacidade de 1"
assertFalse(sequencer.isAvailable(seq)) "O elemento seq não está disponível no sequenciador"
assertTrue(sequencer.isAvailable(seq)) "O elemento seq está disponível no sequenciador"
assertTrue(sequencer.isAvailable(seq)) "O elemento seq está disponível no sequenciador"
assertFalse(sequencer.isAvailable(seq)) "O elemento seq não está disponível no sequenciador"
assertTrue(eventLatch.await(2, TimeUnit.SECONDS)) "A espera de 2 segundos do latch não acaba"
assertTrue(exceptionLatch.await(2, TimeUnit.SECONDS)) "A espera de 2 segundos do latch não acaba"
assertEquals(Arrays.asList(3L, 2L, 1L), batchSizes) "Os valores batch não estão corretos"
assertTrue(h1.awaitStart(2, TimeUnit.SECONDS)) "A espera de 2 segundos do h1 não acaba"
assertTrue(h1.awaitStop(2, TimeUnit.SECONDS)) "A espera de 2 segundos do h1 não acaba"
assertTrue(timeWaiting >= theTimeout) "O tempo aguardado não é maior ou igual a theTimeout"
assertEquals(10, sequence.addAndGet(10)) "O valor da sequência não está sendo incrementado corretamente"
assertEquals(10, sequence.get()) "O último elemento da sequência não é 10"
assertEquals(1, sequence.incrementAndGet()) "O valor da sequência não está sendo incrementado corretamente"
assertEquals(1, sequence.get()) "O último elemento da sequência não é 1"
assertEquals(0, sequence.getAndAdd(1)) "O valor da sequência não está sendo incrementado corretamente"
assertEquals(1, sequence.get()) "O último elemento da sequência não é 1"
assertEquals(-1L, batchEventProcessor.getSequence().get()) "O valor da sequência do processor não é -1"
assertEquals(0L, batchEventProcessor.getSequence().get()) "O valor da sequência do processor não é 0"
assertEquals(0L, batchEventProcessor.getSequence().get()) "O valor da sequência do processor não é 0"
assertEquals(TEST_VALUE, event.getTestString()) "A string de teste do evento não está correta"
assertEquals(SingleProducerSequencer.INITIAL_CURSOR_VALUE, ringBuffer.getCursor()) "O cursor do buffer não está corretamente inicializado"
assertEquals("not rewindable", exceptionHandled.get().getMessage()) "A mensagem da exceção não está correta"