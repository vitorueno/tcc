assertEquals("java.lang.Object", "Objeto esperado")
assertTimeoutPreemptively(Duration.ofMillis(1000L), () -> {
    String code = String.join(System.lineSeparator(), "public class AbstractExercise extends java.lang.Object {", "}");
    ParseResult<CompilationUnit> parseResult = javaParser.parse(ParseStart.COMPILATION_UNIT, Providers.provider(code));
    assertTrue(parseResult.isSuccessful());
    assertTrue(parseResult.getResult().isPresent());
    List<ClassOrInterfaceType> referenceTypes = parseResult.getResult().get().findAll(ClassOrInterfaceType.class);
    assertTrue(referenceTypes.size() > 0);
    final List<ResolvedMethodDeclaration> methods = referenceTypes.get(0).resolve().asReferenceType().getAllMethodsVisibleToInheritors();
    assertEquals(1, methods.size())
})
assertEquals("java.lang.String", "Tipo esperado do resultado")
assertTrue(fae.calculateResolvedType().describe().equals("java.lang.String"))
assertTrue(value.getName().equals("AFIELD"))
assertEquals("a", fd.get().getVariable(0).getInitializer().get().asStringLiteralExpr().getValue())
assertEquals("X.A.bar", mce.resolve().getQualifiedName())
assertEquals("java.lang.Runnable", resolved.getParam(0).getType().describe())
assertTrue(!resolved.isGeneric())
assertEquals("MyAnnotation", declaration.getNameAsString())
assertEquals("MyAnnotationWithElements", declaration.getNameAsString())
assertEquals("VoidVisitor", declaration.getNameAsString())
assertEquals(true, declaration.isInterface())
assertEquals("AccessSpecifier", declaration.getNameAsString())
assertEquals("AccessSpecifier", enumDeclaration.getNameAsString())
assertEquals("PUBLIC", declaration.getNameAsString())
assertEquals("CompilationUnit", classDeclaration.getNameAsString())
assertEquals("CompilationUnit", classDeclaration.getNameAsString())
assertEquals("getComments", resolvedDeclaration.getName())
assertEquals(0, resolvedDeclaration.getNumberOfParams())
assertEquals("CompilationUnit", classDeclaration.getNameAsString())
assertEquals("bar(Optional.of(new Derived()))", mces.get(0).toString())
assertEquals("Base.bar(java.util.Optional<Base>)", mces.get(0).resolve().getQualifiedSignature())
assertNotNull(foo)
assertEquals(true, pr.isSuccessful())
assertEquals("com.github.javaparser.symbolsolver.testingclasses.UtilityClass.method(com.github.javaparser.symbolsolver.testingclasses.SomeClass.InnerEnum)", "Signatura esperada do m√©todo")
assertEquals("CONSTANT", rvd.getName())
assertEquals("com.github.javaparser.symbolsolver.testingclasses.SomeClass.InnerEnum", rvd.getType().describe())
assertEquals("A.method", mce.resolve().getQualifiedName())
assertEquals("Test.setRunnable(java.lang.String, java.lang.Runnable)", mce.get(0).resolve().getQualifiedSignature())
assertEquals("Test.getContext(Test)", mce.get(1).resolve().getQualifiedSignature())
assertEquals("void", mce.calculateResolvedType().describe())
assertTrue(fae.isPresent())
assertEquals("foo.bar.BinaryExpr.Operator", fae.get().resolve().getType().describe())
assertEquals("OR", fae.get().resolve().getName())
assertTrue(fae.isPresent())
assertEquals("foo.bar.BinaryExpr.Operator", fae.get().resolve().getType().describe())
assertEquals("AND", fae.get().resolve().getName())
assertTrue(fae.isPresent())
assertEquals("foo.bar.BinaryExpr.Operator", fae.get().resolve().getType().describe())
assertEquals("OR", fae.get().resolve().getName())
assertTrue(fae.isPresent())
assertEquals("foo.bar.BinaryExpr.Operator", fae.get().resolve().getType().describe())
assertEquals("AND", fae.get().resolve().getName())
assertTrue(parseResult.isSuccessful())
assertEquals(syntacticClassification, NameLogic.syntacticClassificationAccordingToContext(nameNode))
assertEquals(nameCategory, NameLogic.classifyReference(nameNode, typeSolver))
assertEquals(nameCategory, NameLogic.syntacticClassificationAccordingToContext(nameNode))
assertEquals(nameRole, NameLogic.classifyRole(nameNode))
assertTrue(NameLogic.isSimpleName(nameNode))
assertTrue(NameLogic.isQualifiedName(nameNode))
assertEquals(false, NameLogic.isAName(cu))