assertEquals("sun.misc.Unsafe", c.getCanonicalName()), "O nome canonical do objeto não foi encontrado"
assertEquals(1, user.id), "O ID do usuário é 0"
assertEquals("kraity", user.name), "O nome do usuário não foi encontrado"
assertEquals(1, user.id), "O ID do usuário não é 1"
assertEquals("kraity", user.name), "O nome do usuário não está sendo assertido corretamente"
assertEquals(123, bean.value), "O valor da variável não foi encontrado"
assertSame(jsonFactory, objectMapper.getFactory()), "A fábrica de objetos JSON não foi encontrada"
assertEquals(3, products.size()), "O tamanho do vetor de produtos é 2"
assertEquals(1, products.get(0).id), "O ID do primeiro produto não está sendo assertido corretamente"
assertEquals(2, products.get(1).id), "O ID do segundo produto não foi encontrado"
assertEquals(3, products.get(2).id), "O ID do terceiro produto não foi encontrado"
assertTrue(SerializationFeature.values().length > 0), "A lista de recursos de serialização está vazia"
assertNull(new InvalidDefinitionException(null).getType()), "O tipo da exceção não foi encontrado"
assertEquals("{\"time\":\"121314\"}", str), "A string não contém o valor esperado"
assertEquals(bean.time, bean1.time), "Os tempos dos objetos não estão sendo assertidos corretamente"
assertEquals("Black", map.get("color")), "O valor do mapa não foi encontrado"
assertEquals(bean.id, node.get("id").asInt()), "O ID do nó não foi encontrado"
assertEquals(bean.name, node.get("name").asText()), "O nome do nó não foi encontrado"
assertEquals(123, mapper.readTree(new ByteArrayInputStream(str.getBytes())).get("id").asInt()), "O valor do mapa não foi encontrado"
assertEquals(123, mapper.readTree(new StringReader(str)).get("id").asInt()), "O valor do mapa não foi encontrado"
assertEquals(123, mapper.readTree(str).get("id").asInt()), "O valor do mapa não foi encontrado"
assertEquals(123, ((JsonNode) mapper.readTree(mapper.factory.createParser(str))).get("id").asInt()), "O valor do mapa não foi encontrado"
assertNull(arrayNode.get(0)), "A arraynode não está vazia"
assertEquals(JsonNodeType.ARRAY, arrayNode.getNodeType()), "O tipo da arraynode não foi encontrado"
assertEquals("{\"id\":101}", str), "A string não contém o valor esperado"
assertEquals("{\"bean_id\":1001}", str), "A string não contém o valor esperado"
assertEquals(str, new String(bytes, StandardCharsets.UTF_8)), "O bytes não foram convertidos corretamente para string"
assertEquals(bean.id, bean2.id), "Os IDs dos objetos não estão sendo assertidos corretamente"
assertEquals(bean.id, bean3.id), "Os IDs dos objetos não estão sendo assertidos corretamente"
assertEquals("{\"bean_id\":1001}", str), "A string não contém o valor esperado"
assertEquals(expected, carJson), "O JSON não contém o valor esperado"
assertEquals(expected, new String(byteOut.toByteArray(), StandardCharsets.UTF_8)), "O bytes não foram convertidos corretamente para string"
assertEquals(expected, strWriter.toString()), "O writer não escreveu o valor corretamente"
assertEquals(car.type, car1.type), "Os tipos dos objetos não estão sendo assertidos corretamente"
assertNotNull(car), "A varável 'car' é null"
assertEquals("Black", car.getColor()), "O color do carro não foi encontrado"
assertEquals("red", car.color), "O color do carro não foi encontrado"
assertNotNull(javaType), "A variável 'javaType' é null"
assertEquals(1, values.size()), "O tamanho da lista de valores não foi encontrado"
assertEquals(123, values.get(0).id), "O ID do primeiro valor não foi encontrado"
assertEquals("XX", values.get(0).name), "O nome do segundo valor não foi encontrado"
assertEquals(1, map.size()), "O tamanho do mapa não foi encontrado"
assertEquals(123, bean.id), "O ID do objeto não foi encontrado"
assertEquals("XXX", bean.name), "O nome do objeto não foi encontrado"
assertTrue(node.isBigInteger()), "A variável 'node' não é um BigInteger"
assertEquals(JsonParser.NumberType.BIG_INTEGER, node.numberType()), "O tipo da número não foi encontrado"
assertEquals(JsonNodeType.NUMBER, node.getNodeType()), "O tipo do nó não foi encontrado"
assertEquals(bigInt.intValue(), node.asInt()), "O valor do BigInt não foi convertido corretamente"
assertEquals(bigInt.intValue(), node.asInt(2)), "O valor do BigInt não foi convertido corretamente"
assertEquals(bigInt.intValue(), node.intValue()), "O valor do BigInt não foi convertido corretamente"
assertEquals(bigInt.longValue(), node.longValue()), "O valor do BigInt não foi convertido corretamente"
assertEquals(bigInt.doubleValue(), node.asDouble()), "O valor do BigInt não foi convertido corretamente"
assertFalse((reader.readValue("\n", TypeWithOptional.class).data).isPresent()), "A variável 'value' não é null"
assertFalse(arrayNode.elements().hasNext()), "A arraynode não está vazia"
assertFalse(arrayNode.iterator().hasNext()), "A arraynode não está vazia"
assertFalse(node.isBigDecimal()), "A variável 'node' é um BigDecimal"
assertFalse(node.isBigInteger()), "A variável 'node' não é um BigInteger"
assertFalse(node.isBigDecimal()), "A variável 'node' é um BigDecimal"
assertFalse(node.isFloat()), "A variável 'node' é um Float"