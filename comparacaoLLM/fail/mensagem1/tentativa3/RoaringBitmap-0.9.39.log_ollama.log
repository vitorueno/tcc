assertFalse("Bitmap não contém elemento")
assertFalse("Reverso do bitmap não contém elemento")
assertEquals("O tamanho do bitmap deve ser igual ao tamanho da lista de iterators", bitmap.getCardinality(), iteratorCopy.size())
assertEquals("O tamanho do bitmap deve ser igual ao tamanho da lista de int iterators", bitmap.getCardinality(), intIteratorCopy.size())
assertEquals("O tamanho do bitmap deve ser igual ao tamanho da lista de reversos de int iterators", bitmap.getCardinality(), reverseIntIteratorCopy.size())
assertEquals("A lista de elementos não é igual à lista de iterators", ints.asList(data), iteratorCopy)
assertEquals("A lista de elementos não é igual à lista de int iterators", ints.asList(data), intIteratorCopy)
assertEquals("A lista de elementos não é a lista reversa da lista de elementos", Lists.reverse(ints.asList(data)), reverseIntIteratorCopy)
assertEquals("O bitmap não contém elemento", ImmutableList.of(1, 2, 3), iteratorCopy)
assertEquals("O bitmap não contém elemento", ImmutableList.of(1, 2, 3), intIteratorCopy)
assertEquals("A lista de elementos reversa não é igual à lista de reversos de int iterators", ImmutableList.of(3, 2, 1), reverseIntIteratorCopy)
assertEquals("O último elemento do bitmap não é igual ao último elemento do bitmap reverso", bitmap.last(), bitmap.reverseStream().max().getAsInt())
assertEquals("O último elemento do bitmap não é igual ao último elemento do bitmap reverso", bitmap.last(), bitmap.stream().max().getAsInt())
Assertions.assertEquals("A quantidade de elementos do bitmap deve ser igual à quantidade de elementos da lista de source", total, source.size())
assertEquals("O bitmap é igual à variável rb1", rb1, rb2)
assertNotEquals("As variáveis rb1 e rb2 não são iguais", rb1, rb2)
assertEquals("A variável rb1 é igual à variável rb2", rb1, rb2)
Assertions.assertEquals("A quantidade de elementos do bitmap deve ser igual à quantidade de elementos da lista de source", total, i)
Assertions.assertEquals("A quantidade de elementos do bitmap não está relacionada à quantidade de elementos da lista de source", source.size(), i)
Assertions.assertEquals("A variável select2 é igual à variável deserStreamOne.select(2)", select2, deserStreamOne.select(2))
Assertions.assertEquals("A variável select2 é igual à variável deserBBOne.select(2)", select2, deserBBOne.select(2))
assertFalse("O iterator do bitmap não contém elemento")
assertEquals("O valor zero é igual ao valor da carteira", 0, map.getLongCardinality())
assertTrue("A carteira está vazia", map.isEmpty())
assertFalse("A variável cartão não contém o valor zero", map.contains(0))
assertEquals("O valor zero tem um rango de -1", 0, map.rankLong(Long.MIN_VALUE))
assertEquals("O valor zero tem um rango de -1", 0, map.rankLong(Long.MIN_VALUE + 1))
assertEquals("O valor zero tem um rango de -1", 0, map.rankLong(-1))
assertEquals("O valor zero tem um rango de 0", 0, map.rankLong(0))
assertEquals("O valor zero tem um rango de 0", 0, map.rankLong(1))
assertEquals("O valor zero tem um rango de -1", 0, map.rankLong(Long.MAX_VALUE - 1))
assertEquals("O valor zero tem um rango de -1", 1, map.rankLong(Long.MAX_VALUE))
assertArrayEquals("A lista de valores não é igual à lista de elementos", new long[] { Long.MAX_VALUE }, map.toArray())
assertTrue("O iterator do bitmap contém elemento")
assertEquals("O valor mínimo do bitmap não é igual ao valor da carteira", Long.MIN_VALUE, iterator.next())
assertEquals("O valor mínimo do bitmap não é igual ao valor da carteira", Long.MIN_VALUE, map.select(0))