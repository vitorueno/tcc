assertEquals("O valor esperado foi 2, mas obteve 4", 2, s.nextStreamId(map))
assertEquals("O valor esperado foi 4, mas obteve 6", 4, s.nextStreamId(map))
assertFalse("O valor não é anterior ou igual a 1", s.isBeforeOrCurrent(1))
assertFalse("O valor não é anterior ou igual a 3", s.isBeforeOrCurrent(3))
assertTrue("O valor é anterior ou igual a 1", s.isBeforeOrCurrent(1))
assertFalse("O valor não é anterior ou igual a 3", s.isBeforeOrCurrent(3))
assertTrue("O valor é anterior ou igual a 3", s.isBeforeOrCurrent(3))
assertFalse("O valor não é anterior ou igual a -1", s.isBeforeOrCurrent(-1))
assertFalse("O valor não é anterior ou igual a 0", s.isBeforeOrCurrent(0))
assertTrue("O valor é anterior ou igual a 2", s.isBeforeOrCurrent(2))
assertFalse("O valor não é anterior ou igual a 2", s.isBeforeOrCurrent(2))
assertFalse("O valor não é anterior ou igual a 4", s.isBeforeOrCurrent(4))
assertTrue("O valor é anterior ou igual a 2", s.isBeforeOrCurrent(2))
assertFalse("O valor não é anterior ou igual a 4", s.isBeforeOrCurrent(4))
assertTrue("O valor é anterior ou igual a 4", s.isBeforeOrCurrent(4))
assertFalse("O valor não é anterior ou igual a -2", s.isBeforeOrCurrent(-2))
assertFalse("O valor não é anterior ou igual a 0", s.isBeforeOrCurrent(0))
assertTrue("O valor é anterior ou igual a 1", s.isBeforeOrCurrent(1))
assertEquals("O valor esperado foi 2147483646, mas obteve 2", 2147483646, s.nextStreamId(map))
assertEquals("O valor esperado foi 2, mas obteve 4", 2, s.nextStreamId(map))
assertEquals("O valor esperado foi 4, mas obteve 6", 4, s.nextStreamId(map))
assertEquals("O valor esperado foi 2147483647, mas obteve 4", 2147483647, s.nextStreamId(map))
assertEquals("O valor esperado foi 1, mas obteve 3", 1, s.nextStreamId(map))
assertEquals("O valor esperado foi 3, mas obteve 1", 3, s.nextStreamId(map))
assertEquals("O valor esperado foi 7, mas obteve 1", 7, s.nextStreamId(map))
assertEquals("O valor esperado foi 11, mas obteve 3", 11, s.nextStreamId(map))
assertTrue("A lease terá honors", setupPayload.willClientHonorLease())
assertEquals("O intervalo de reavaliação deve ser 0", KEEP_ALIVE_INTERVAL, setupPayload.keepAliveInterval())
assertEquals("O limite de vida da reavaliação deve ser 2147483647", KEEP_ALIVE_MAX_LIFETIME, setupPayload.keepAliveMaxLifetime())
assertEquals("A metadada do frame é 'd'", METADATA_TYPE, SetupFrameCodec.metadataMimeType(frame))
assertEquals("O tipo de dados do frame é 'd'", DATA_TYPE, SetupFrameCodec.dataMimeType(frame))
assertTrue("A carga de metadada existe", setupPayload.hasMetadata())
assertNotNull("A carga de metadada não pode ser nula", setupPayload.metadata())
assertEquals("A carga de dados é igual à do payload", payload.metadata(), setupPayload.metadata())
assertEquals("A carga de dados é igual à do payload", payload.data(), setupPayload.data())
assertNotNull("A carga de metadada existe", setupPayload.metadata())
assertEquals("O número de bytes lidos da metadada é 0", 0, setupPayload.metadata().readableBytes())
assertEquals("A carga de dados é igual à do payload", payload.data(), setupPayload.data())
assertTrue("A carga de metadada existe", setupPayload.hasMetadata())
assertNotNull("A carga de metadada não pode ser nula", setupPayload.metadata())
assertEquals("O número de bytes lidos da metadada é 0", 0, setupPayload.metadata().readableBytes())
assertEquals("A carga de dados é igual à do payload", payload.data(), setupPayload.data())
assertEquals("O valor esperado foi 42L, mas obteve L.MAX_VALUE", 42L, actualRequest)
assertNull("A metadada não pode ser nula", metadata)