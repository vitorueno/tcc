assertEquals("O Expectado != Valor Atual", expectedRegisterCount, actualRegisterCount)
assertArrayEquals("Arrays Inesperadas", expectedLines, actualLines)
assertEquals("Expecto Opcode: " + Opcode.IGET, UnreflectionStrategy.getGetOpcode("I", isStatic))
assertEquals("Expecto Opcode: " + Opcode.IGET_BOOLEAN, UnreflectionStrategy.getGetOpcode("Z", isStatic))
assertEquals("Expecto Opcode: " + Opcode.IGET_BYTE, UnreflectionStrategy.getGetOpcode("B", isStatic))
assertEquals("Expecto Opcode: " + Opcode.IGET_CHAR, UnreflectionStrategy.getGetOpcode("C", isStatic))
assertEquals("Expecto Opcode: " + Opcode.IGET_OBJECT, UnreflectionStrategy.getGetOpcode("Ljava/lang/Object;", isStatic))
assertEquals("Expecto Opcode: " + Opcode.IGET_SHORT, UnreflectionStrategy.getGetOpcode("S", isStatic))
assertEquals("Expecto Opcode: " + Opcode.IGET_WIDE, UnreflectionStrategy.getGetOpcode("J", isStatic))
assertEquals("Expecto Opcode: " + Opcode.IGET_WIDE, UnreflectionStrategy.getGetOpcode("D", isStatic))
assertEquals("Expecto Opcode: " + Opcode.SGET, UnreflectionStrategy.getGetOpcode("I", isStatic))
assertEquals("Expecto Opcode: " + Opcode.SGET_BOOLEAN, UnreflectionStrategy.getGetOpcode("Z", isStatic))
assertEquals("Expecto Opcode: " + Opcode.SGET_BYTE, UnreflectionStrategy.getGetOpcode("B", isStatic))
assertEquals("Expecto Opcode: " + Opcode.SGET_CHAR, UnreflectionStrategy.getGetOpcode("C", isStatic))
assertEquals("Expecto Opcode: " + Opcode.SGET_OBJECT, UnreflectionStrategy.getGetOpcode("Ljava/lang/Object;", isStatic))
assertEquals("Expecto Opcode: " + Opcode.SGET_SHORT, UnreflectionStrategy.getGetOpcode("S", isStatic))
assertEquals("Expecto Opcode: " + Opcode.SGET_WIDE, UnreflectionStrategy.getGetOpcode("J", isStatic))
assertEquals("Expecto Opcode: " + Opcode.SGET_WIDE, UnreflectionStrategy.getGetOpcode("D", isStatic))
assertEquals("Expecto Opcode: " + expected.getOpcode(), actual.getOpcode())
assertFalse("Não foi alterado nada")
assertEquals("Strings iguais", before.toSmali(), after.toSmali())
assertEquals("Expecto Opcode: " + Opcode.GOTO_32, instruction.getOpcode())
assertEquals("Expecto valor do offset código: 4", ((OffsetInstruction) instruction).getCodeOffset())
assertEquals("Expecto método descriptor:", methodDescriptor)
assertEquals("Expecto Opcode: " + Opcode.CONST_CLASS, instruction.getOpcode())
assertEquals("Esperado valor register A: 0", 0, found.size())
assertEquals("Expecto valor encontrado", expected, found)
assertEquals("Esperado valor encontrado", expected, found)
assertEquals("Esperado valor encontrado", expected, found)
assertEquals("Esperado valor encontrado", expected, found)
assertEquals("Esperado valor encontrado", expected, found)
assertEquals("Esperado valor encontrado", expected, found)
assertEquals("Esperado valor encontrado", expected, found)
assertEquals("Expecto opcode de instrução: " + expectedInstr.getOpcode(), actualInstr.getOpcode())
assertTrue("Arquivo existente")
assertTrue("Arquivo existente")
assertEquals("Expecto tamanho do nó sem filhos: 0", 0, template.getChildren().size())
assertNotNull("Esperado filho com opção não nulo")
assertEquals("Expecto opção pai:", node.getOp())
assertEquals("Expecto número de filhos: 1", 1, children.size())
assertEquals("Expecto localização dos filhos:", childLocations)
assertEquals("Expecto localização do pai: " + childOp.getLocation(), childOp.getLocation())
assertEquals("Expecto localização do pai: " + node.getOp().getChildren()[0], childOp.getLocation())
assertArrayEquals("Esperado endereço de espera", expectedAddresses, actualAddresses)
assertArrayEquals("Esperado estado de regras registradas", new int[] { 0 }, parentState.getRegistersAssigned())
assertArrayEquals("Esperado estado de regras registradas", new int[] { 2 }, childState.getRegistersAssigned())
assertArrayEquals("Esperado estado de regras registradas", new int[] { 3 }, grandchildState.getRegistersAssigned())
assertEquals("Expecto número de bloco tentativa: 2", 2, manipulator.getTryBlocks().size())
assertEquals("Expecto número de bloco tentativa: 0", 0, manipulator.getTryBlocks().size())
assertEquals("Esperado valor da consenso: 1", 1, consensus.getValue())
assertEquals("Esperado valor da consenso: 2", 2, consensus.getValue())
assertEquals("Esperado número de labels no bloco da instrução: 1", 1, manipulator.getInstruction(3).getLocation().getLabels().size())
assertEquals("Esperado número de labels no bloco da instrução: 1", 1, manipulator.getInstruction(3).getLocation().getLabels().size())
assertTrue("Verificando imutabilidade")
assertFalse("String não imutável: " + configuration.isImmutable("[Ljava/lang/String;"))
assertTrue("String imutável: " + configuration.isImmutable("Ljava/lang/String;"))
assertEquals("Esperado tipo de valor: " + CMP_TYPE, setItem.getValue().getType())
assertEquals("Espero valores igual", cmpValue.getClass(), setItem.getValue().getValue().getClass())
assertEquals("Espero tipo igual", CMP_TYPE, setItem.getValue().getType())
assertEquals("Esperando valores iguais", cmpValue, setItem.getValue().getValue())
assertEquals(CMP_TYPE, setItem.getValue().getType())