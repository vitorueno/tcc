assertEquals("O valor esperado não existe no mapa de comuns.", "test/Person")
assertEquals("O valor esperado é igual ao valor obtido.", "test/Person")
assertEquals("O valor esperado é igual ao mesmo valor.", "test/Person")
assertEquals("A quantidade esperada de resultados não coincide com a quantidade real.", expected.size())
assertTrue("O objeto não é uma biblioteca. É possível que o nome seja incorreto ou que o tipo de biblioteca não esteja sendo considerado corretamente.")
assertTrue("Os objetos não estão relacionados. Pode ser um problema no sistema ou na configuração.")

assertEquals(1, results.size())
assertEquals(Collections.emptySet(), result.getDifference())
assertEquals(1, results.size())
assertEquals(20, mappings.size())
assertEquals(1, difference.size())
assertEquals("O nome do dono é 'Start'.", "Start")
assertEquals("O nome é 'main'.", "main")
assertEquals("[Ljava/lang/String;)", vertex.getValue().getDesc())
assertEquals(Collections.emptySet(), result.getDifference())
assertEquals(1, results.size())
assertEquals(0, mappings.size())
assertEquals(0, mappings.size())
assertEquals(1, fields.size())
assertEquals("i", field.getName())
assertEquals("int", field.getType())
assertEquals("", field.getDescription())
assertEquals("protected final", field.getModifiers().get(0))
assertEquals("final", field.getModifiers().get(1))
assertEquals(2, methods.size())
assertEquals("evaluate", method.getName())
assertEquals("double", method.getReturnType())
assertEquals("Evaluates an expression as a level deeper than the current one in the expression tree,", method.getDescription())
assertEquals("protected final", method.getModifiers().get(0))
assertEquals("final", method.getModifiers().get(1))
assertEquals("Evaluated result.", method.getReturnDescription())
assertEquals(1, method.getParameters().size())
assertEquals("expression", parameter.getName())
assertEquals("Some math expression.", parameter.getDescription())
assertEquals("accept", method.getName())
assertEquals("double", method.getReturnType())
assertEquals("", method.getDescription())
assertEquals("public abstract", method.getModifiers().get(0))
assertEquals("abstract", method.getModifiers().get(1))
assertEquals("Evaluated result.", method.getReturnDescription())
assertEquals(1, method.getParameters().size())
assertEquals("expression", parameter.getName())
assertEquals("Some math expression.", parameter.getDescription())
assertEquals(2, inheritance.size())
assertEquals("calc/Calculator", inheritance.get(0))
assertEquals("java/lang/Object", inheritance.get(1))
assertEquals(keys.length, subclasses.size())
assertEquals(0, subclasses.size())
assertEquals(small, frames[frames.length - 2].getLocal(0).getValue())
assertEquals(str, frames[3].getStack(0).getValue())
assertEquals(str.length(), frames[4].getStack(0).getValue())
assertEquals(part1 + part2, frames[frames.length - 2].getStack(0).getValue())
assertEquals(part1 + part2, retFrameLocal.getValue())
assertNotEquals(initial, retFrameLocal.getValue())
assertNotEquals(one, retFrameLocal.getValue())
assertNotEquals(two, retFrameLocal.getValue())
assertNotEquals(initial, retFrameLocal.getValue())
assertNotEquals(one, retFrameLocal.getValue())
assertEquals(two, retFrameLocal.getValue())
assertNotNull(result)
assertTrue(Arrays.binarySearch(paths, path) >= 0)
assertTrue(directedGraph.getVertex(1).isRoot())
assertTrue(directedGraph.getVertex(6).isRoot())
assertTrue(roots.contains(v1))
assertTrue(roots.contains(v6))
assertEquals(2, roots.size())
assertTrue(roots.contains(v1))
assertEquals(1, roots.size())
assertTrue(roots.contains(v1))
assertEquals(1, roots.size())
assertTrue(directedGraph.getVertex(4).isLeaf())
assertTrue(directedGraph.getVertex(5).isLeaf())
assertTrue(leaves.contains(v4))
assertTrue(leaves.contains(v5))
assertEquals(3, aggregateMapping.size())
assertEquals("renamed/MyCalc", aggregateMapping.get("calc/Calculator"))
assertEquals("MAX_DEPTH_LEVEL", aggregateMapping.get("calc/Calculator.MAX_DEPTH"))
assertEquals("doEvaluate", aggregateMapping.get("calc/Calculator.evaluate(ILjava/lang/String;)D"))
assertEquals(3, aggregateMapping.size())
assertEquals("renamed2/MyCalc2", aggregateMapping.get("calc/Calculator"))
assertEquals("MAX_DEPTH_LEVEL", aggregateMapping.get("calc/Calculator.MAX_DEPTH"))
assertEquals("doEvaluate", aggregateMapping.get("calc/Calculator.evaluate(ILjava/lang/String;)D"))
assertTrue(node instanceof ClassOrInterfaceType)
assertEquals("O tipo é ClassOrInterfaceType.", "Scanner")
assertNotNull(node)
assertEquals("O nome da variável é 'scanner'.", "scanner")