"consoleAppender não deve ser nulo"
"checker.isErrorFree(0) deve ser verdadeiro"
"consoleAppender deve ser nulo"
"checker.isErrorFree(0) deve ser verdadeiro"
"consoleAppender deve ser nulo"
"listAppender não deve ser nulo"
"checker.isErrorFree(0) deve ser verdadeiro"
"listAppender não deve ser nulo"
"listAppender.list.size() deve ser igual a 1"
"listAppender.list.size() deve ser igual a 1"
"ae não deve ser nulo"
"listAppender.strList.size() deve ser igual a 1"
"listAppender.strList.get(0) deve começar com 'testMethod'"
"o não deve ser nulo"
"aeBack.getResponseHeaderMap() deve ser igual a DummyResponse.DUMMY_DEFAULT_HDEADER_MAP"
"aeBack.getResponseHeader('x') deve ser igual a DummyResponse.DUMMY_DEFAULT_HDEADER_MAP.get('x')"
"aeBack.getResponseHeader('headerName1') deve ser igual a DummyResponse.DUMMY_DEFAULT_HDEADER_MAP.get('headerName1')"
"aeBack.getResponseHeaderNameList().size() deve ser igual a DummyResponse.DUMMY_DEFAULT_HDEADER_MAP.size()"
"aeBack.getContentLength() deve ser igual a DummyResponse.DUMMY_DEFAULT_CONTENT_COUNT"
"aeBack.getStatusCode() deve ser igual a DummyResponse.DUMMY_DEFAULT_STATUS"
"aeBack.getRequestContent() deve ser igual a DummyRequest.DUMMY_CONTENT_STRING"
"aeBack.getResponseContent() deve ser igual a DummyRequest.DUMMY_RESPONSE_CONTENT_STRING"
"aeBack.getAttribute('testKey') deve ser igual a DummyRequest.DUMMY_DEFAULT_ATTR_MAP.get('testKey')"
"event.getAttribute('testKey') deve ser igual a 'ORIGINAL'"
"ae.getAttribute(key) deve ser igual a val"
"ae.getRequestHeader(key) deve ser igual a val"
"ae.getRequestParameter(key)[0] deve ser igual a val"
"ae.getAttribute(key) deve ser igual a val"
"ae.getRequestHeader(key) deve ser igual a val"
"ae.getRequestParameter(key)[0] deve ser igual a val"
"statsByDay.getLastCount() deve ser igual a 0"
"statsByDay.getLastCount() deve ser igual a 0"
"statsByDay.getLastCount() deve ser igual a 1"
"statsByDay.getLastCount() deve ser igual a 2"
"statsByDay.getLastCount() deve ser igual a 2"
"statsByDay.getLastCount() deve ser igual a 4"
"result deve ser igual a 'hello world'"
"result deve ser igual a 'hello world'"
"event.getRemoteHost() deve ser igual a '127.0.0.1'"
"event.getServerName() deve ser igual a 'localhost'"
"evaluator.evaluate(ae) deve ser verdadeiro"
"evaluator.evaluate(ae) deve ser verdadeiro"
"result deve ser igual a Long.toString(event.getServerAdapter().getContentLength())"
"result deve ser igual a converter.cachingDateFormatter.format(event.getTimeStamp())"
"result deve ser igual a '21/Oct/2022:21:30:20 +1100'"
"result deve ser igual a converter.cachingDateFormatter.format(event.getTimeStamp())"
"result deve ser igual a Integer.toString(request.getLocalPort())"
"result deve ser igual a request.getRemoteHost()"
"result deve ser igual a request.getRemoteAddr()"
"result deve ser igual a request.getRemoteUser()"
"result deve ser igual a request.getAttribute('testKey')"
"result deve ser igual a cookie.getValue()"
"result deve ser igual a request.getHeader('headerName1')"
"result deve ser igual a request.getMethod()"
"result deve ser igual a request.getProtocol()"
"result deve ser igual a request.getRequestURI()"
"result deve ser igual a expected"
"result deve ser igual a request.getHeader('headerName1')"
"result deve ser igual a request.getServerName()"
"result deve ser igual a Integer.toString(event.getServerAdapter().getStatusCode())"
"keySet.size() deve ser igual a 3"
"witnessSet e keySet devem ser iguais"
"expectedCount e listAppender.list.size() devem ser iguais"
"evaluator.evaluate(ae) deve ser falso"
"evaluator.evaluate(ae) deve ser verdadeiro"
"evaluator.evaluate(ae) deve ser verdadeiro"
"valve.getScheduledExecutorService() não deve ser nulo"
"TeeFilter.extractNameList('a') deve ser igual a Arrays.asList(new String[] { 'a' })"
"TeeFilter.extractNameList('a, b') deve ser igual a Arrays.asList(new String[] { 'a', 'b' })"
"TeeFilter.extractNameList('a; b') deve ser igual a Arrays.asList(new String[] { 'a', 'b' })"
"TeeFilter.extractNameList('a; b, c') deve ser igual a Arrays.asList(new String[] { 'a', 'b', 'c' })"
"TeeFilter.computeActivation('somehost', '', '') deve ser verdadeiro"
"TeeFilter.computeActivation('somehost', null, null) deve ser verdadeiro"
"TeeFilter.computeActivation('a', 'a', null) deve ser verdadeiro"
"TeeFilter.computeActivation('a', 'a, b', null) deve ser verdadeiro"
"TeeFilter.computeActivation('a', 'b', null) deve ser falso"
"TeeFilter.computeActivation('a', 'b, c', null) deve ser falso"
"TeeFilter.computeActivation('a', null, 'a') deve ser falso"
"TeeFilter.computeActivation('a', null, 'a, b') deve ser falso"
"TeeFilter.computeActivation('a', null, 'b') deve ser verdadeiro"
"TeeFilter.computeActivation('a', null, 'b, c') deve ser verdadeiro"
"TeeFilter.computeActivation('a', 'a', 'a') deve ser falso"
"TeeFilter.computeActivation('a', 'a', 'b') deve ser verdadeiro"
"TeeFilter.computeActivation('a', 'b', 'a') deve ser falso"
"TeeFilter.computeActivation('a', 'b', 'b') deve ser falso"
"expectedBytes e byteArrayOutputStream.toByteArray() devem ser iguais"
"fail()"
"Assertions.assertNotNull(condition)"
"Assertions.assertTrue(condition.evaluate())"
"Assertions.assertNotNull(condition)"
"Assertions.assertTrue(checker.isErrorFree(0))"
"Assertions.assertTrue(checker.isErrorFree(0))"
"Assertions.assertNull(System.getProperty(sysKey))"
"Assertions.assertNull(context.getProperty(dynaKey))"
"Assertions.assertNotNull(context.getProperty(dynaKey))"
"Assertions.assertNull(context.getProperty(dynaKey))"
"Assertions.assertNull(context.getProperty(dynaKey))"
"consoleAppender não deve ser nulo"
"fileAppender não deve ser nulo"
"Assertions.assertTrue(checker.isErrorFree(0))"
"fileAppender não deve ser nulo"
"consoleAppender deve ser nulo"
"Assertions.assertTrue(checker.isErrorFree(0))"
"fileAppender não deve ser nulo"
"consoleAppender deve ser nulo"
"listAppender não deve ser nulo"
"Assertions.assertTrue(checker.isErrorFree(0))"
"consoleAppender não deve ser nulo"
"Assertions.assertTrue(checker.isErrorFree(0))"
"consoleAppender deve ser nulo"
"listAppender não deve ser nulo"
"Assertions.assertTrue(checker.isErrorFree(0))"
"consoleAppender não deve ser nulo"
"Assertions.assertTrue(checker.isErrorFree(0))"
"consoleAppender deve ser nulo"
"listAppender não deve ser nulo"
"Assertions.assertTrue(checker.isErrorFree(0))"
"consoleAppender não deve ser nulo"
"Assertions.assertTrue(checker.isErrorFree(0))"
"assertNotNull(ae)"
"Assertions.assertEquals(1, listAppender.strList.size())"
"Assertions.assertTrue(listAppender.strList.get(0).startsWith('testMethod'))"
"Assertions.assertNotNull(o)"
"Assertions.assertEquals(DummyResponse.DUMMY_DEFAULT_HDEADER_MAP, aeBack.getResponseHeaderMap())"
"Assertions.assertEquals(DummyResponse.DUMMY_DEFAULT_HDEADER_MAP.get('x'), aeBack.getResponseHeader('x'))"
"Assertions.assertEquals(DummyResponse.DUMMY_DEFAULT_HDEADER_MAP.get('headerName1'), aeBack.getResponseHeader('headerName1'))"
"Assertions.assertEquals(DummyResponse.DUMMY_DEFAULT_HDEADER_MAP.size(), aeBack.getResponseHeaderNameList().size())"
"assertEquals(DummyResponse.DUMMY_DEFAULT_CONTENT_COUNT, aeBack.getContentLength())"
"assertEquals(DummyResponse.DUMMY_DEFAULT_STATUS, aeBack.getStatusCode())"
"assertEquals(DummyRequest.DUMMY_CONTENT_STRING, aeBack.getRequestContent())"
"assertEquals(DummyRequest.DUMMY_RESPONSE_CONTENT_STRING, aeBack.getResponseContent())"
"assertEquals(DummyRequest.DUMMY_DEFAULT_ATTR_MAP.get('testKey'), aeBack.getAttribute('testKey'))"
"assertEquals('ORIGINAL', event.getAttribute('testKey'))"
"assertEquals(val, ae.getAttribute(key))"
"assertEquals(val, ae.getRequestHeader(key))"
"assertEquals(val, ae.getRequestParameter(key)[0])"
"assertEquals(val, ae.getAttribute(key))"
"assertEquals(val, ae.getRequestHeader(key))"
"assertEquals(val, ae.getRequestParameter(key)[0])"
"assertEquals(0, statsByDay.getLastCount())"
"assertEquals(0, statsByDay.getLastCount())"
"assertEquals(1, statsByDay.getLastCount())"
"assertEquals(2,