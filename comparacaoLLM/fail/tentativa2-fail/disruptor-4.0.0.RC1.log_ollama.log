*NotNull(eventHandlerGroup)
*AssertThat(testException, actualException)
*AssertThat(testException, actualException)
*AssertThat(testException, actualException)
*AssertThat(testException, actualException)
*AssertThat(0, sequencer.next())
*AssertThat(3, sequencer.next(4))
*AssertThat(true, sequencer.hasAvailableCapacity(1))
*AssertThat(true, sequencer.hasAvailableCapacity(BUFFER_SIZE))
*AssertThat(false, sequencer.hasAvailableCapacity(BUFFER_SIZE + 1))
*AssertThat(true, sequencer.hasAvailableCapacity(BUFFER_SIZE - 1))
*AssertThat(false, sequencer.hasAvailableCapacity(BUFFER_SIZE))
*AssertThat(false, sequencer.hasAvailableCapacity(1))
*AssertThat(false, sequencer.isAvailable(seq))
*AssertThat(true, sequencer.isAvailable(seq))
*AssertThat(true, sequencer.isAvailable(seq))
*AssertThat(false, sequencer.isAvailable(seq))
*AssertThat(true, eventLatch.await(2, TimeUnit.SECONDS))
*AssertThat(true, exceptionLatch.await(2, TimeUnit.SECONDS))
*AssertThat(Arrays.asList(3L, 2L, 1L), batchSizes)
*AssertThat(true, h1.awaitStart(2, TimeUnit.SECONDS))
*AssertThat(true, h1.awaitStop(2, TimeUnit.SECONDS))
*AssertThat(timeWaiting >= theTimeout)
*AssertThat(10, sequence.addAndGet(10))
*AssertThat(10, sequence.get())
*AssertThat(1, sequence.incrementAndGet())
*AssertThat(1, sequence.get())
*AssertThat(0, sequence.getAndAdd(1))
*AssertThat(1, sequence.get())
*AssertThat(-1L, batchEventProcessor.getSequence().get())
*AssertThat(0L, batchEventProcessor.getSequence().get())
*AssertThat(0L, batchEventProcessor.getSequence().get())
*AssertThat(TEST_VALUE, event.getTestString())
*AssertThat(SingleProducerSequencer.INITIAL_CURSOR_VALUE, ringBuffer.getCursor())
*AssertThat(0, sequence)
*AssertThat(expectedEvent, event)
*AssertThat(0L, ringBuffer.getCursor())
*AssertThat(expectedEvent, messages.get().get(0))
*AssertThat(expectedSequence, available)
*AssertThat(expectedSequence, available)
*AssertThat(false, ringBuffer.tryPublishEvent(StubEvent.TRANSLATOR, 3, "3"))
*AssertThat(true, publisherComplete.get())
*AssertThat(true, publisherComplete.get())
*AssertThat(true, publisherComplete.get())
*AssertThat(true, ringBuffer.tryPublishEvents(translators))
*AssertThat(true, ringBuffer.tryPublishEvents(translators, 0, 1))
*AssertThat(true, ringBuffer.tryPublishEvents(translators, 1, 2))
*AssertThat(true, ringBuffer.tryPublishEvents(translator, new String[] { "Foo", "Foo" }))
*AssertThat(true, ringBuffer.tryPublishEvents(translator, 0, 1, new String[] { "Foo", "Foo" }))
*AssertThat(true, ringBuffer.tryPublishEvents(translator, 1, 2, new String[] { "Foo3", "Foo4", "Foo5" }, new String[] { "Bar3", "Bar4", "Bar5" }, new String[] { "Baz3", "Baz4", "Baz5" }))
*AssertThat(true, ringBuffer.tryPublishEvents(translator, new String[] { "Foo", "Bar", "Baz", "Bam" }, new String[] { "Foo", "Bar", "Baz", "Bam" }))
*AssertThat(true, ringBuffer.tryPublishEvents(translator, 0, 1, new String[] { "Foo", "Bar", "Baz", "Bam" }, new String[] { "Foo", "Bar", "Baz", "Bam" }))
*AssertThat(true, ringBuffer.tryPublishEvents(translator, 1, 2, new String[] { "Foo3", "Foo4", "Foo5" }, new String[] { "Bar3", "Bar4", "Bar5" }, new String[] { "Baz3", "Baz4", "Baz5" }))
*AssertThat(true, sequenceBarrier.isAlerted())
*AssertThat(true, sequenceBarrier.isAlerted())
*AssertThat(false, sequenceBarrier.isAlerted())
*AssertThat(true, timeWaiting >= theTimeout)
*AssertThat("not rewindable", exceptionHandled.get().getMessage())
*AssertThat(3L, Util.getMinimumSequence(sequences))
*AssertThat(Long.MAX_VALUE, Util.getMinimumSequence(sequences))
*AssertThat(causeException, ex.getCause())