"O eventHandlerGroup não pode ser nulo"
"testException e actualException não são o mesmo objeto"
"testException e actualException não são o mesmo objeto"
"testException e actualException não são o mesmo objeto"
"testException e actualException não são o mesmo objeto"
"O próximo valor do sequenciador não é 0"
"O próximo valor do sequenciador com entrada 4 não é 3"
"O sequenciador não possui capacidade disponível para 1"
"O sequenciador não possui capacidade disponível para BUFFER_SIZE"
"O sequenciador possui capacidade disponível para BUFFER_SIZE + 1"
"O sequenciador não possui capacidade disponível para BUFFER_SIZE - 1"
"O sequenciador possui capacidade disponível para BUFFER_SIZE"
"O sequenciador possui capacidade disponível para 1"
"O sequenciador indica que seq está disponível"
"O sequenciador indica que seq não está disponível"
"O sequenciador indica que seq não está disponível"
"O sequenciador indica que seq está disponível"
"eventLatch não foi acionado dentro do tempo limite"
"exceptionLatch não foi acionado dentro do tempo limite"
"batchSizes não é igual a [3L, 2L, 1L]"
"h1 não iniciou dentro do tempo limite"
"h1 não parou dentro do tempo limite"
"timeWaiting é menor que theTimeout"
"sequence.addAndGet(10) não retornou 10"
"sequence.get() não retornou 10"
"sequence.incrementAndGet() não retornou 1"
"sequence.get() não retornou 1"
"sequence.getAndAdd(1) não retornou 0"
"sequence.get() não retornou 1"
"batchEventProcessor.getSequence().get() não retornou -1L"
"batchEventProcessor.getSequence().get() não retornou 0L"
"batchEventProcessor.getSequence().get() não retornou 0L"
"event.getTestString() não retornou TEST_VALUE"
"ringBuffer.getCursor() não retornou SingleProducerSequencer.INITIAL_CURSOR_VALUE"
"sequence não é igual a 0"
"event não é igual a expectedEvent"
"ringBuffer.getCursor() não retornou 0L"
"messages.get().get(0) não é igual a expectedEvent"
"available não é igual a expectedSequence"
"available não é igual a expectedSequence"
"ringBuffer.tryPublishEvent(StubEvent.TRANSLATOR, 3, \"3\") retornou true"
"publisherComplete.get() retornou true"
"publisherComplete.get() retornou false"
"ringBuffer.tryPublishEvents(translators) retornou false"
"ringBuffer.tryPublishEvents(translators, 0, 1) retornou false"
"ringBuffer.tryPublishEvents(translators, 1, 2) retornou false"
"ringBuffer.tryPublishEvents(translator, new String[] { \"Foo\", \"Foo\" }) retornou false"
"ringBuffer.tryPublishEvents(translator, 0, 1, new String[] { \"Foo\", \"Foo\" }) retornou false"
"ringBuffer.tryPublishEvents(translator, 1, 2, new String[] { \"Foo\", \"Foo\", \"Foo\" }) retornou false"
"ringBuffer.tryPublishEvents(translator, 1, 2, new String[] { \"Foo3\", \"Foo4\", \"Foo5\" }, new String[] { \"Bar3\", \"Bar4\", \"Bar5\" }, new String[] { \"Baz3\", \"Baz4\", \"Baz5\" }) retornou false"
"ringBuffer.tryPublishEvents(translator, new String[] { \"Foo\", \"Bar\", \"Baz\", \"Bam\" }, new String[] { \"Foo\", \"Bar\", \"Baz\", \"Bam\" }) retornou false"
"ringBuffer.tryPublishEvents(translator, 0, 1, new String[] { \"Foo\", \"Bar\", \"Baz\", \"Bam\" }, new String[] { \"Foo\", \"Bar\", \"Baz\", \"Bam\" }) retornou false"
"ringBuffer.tryPublishEvents(translator, 1, 2, new String[] { \"Foo3\", \"Bar3\", \"Baz3\", \"Bam3\" }, new String[] { \"Foo4\", \"Bar4\", \"Baz4\", \"Bam4\" }, new String[] { \"Foo5\", \"Bar5\", \"Baz5\", \"Bam5\" }) retornou false"
"ringBuffer.removeGatingSequence(sequenceThree) retornou false"
"sequenceGroup.get() não retornou Long.MAX_VALUE"
"sequenceGroup.get() não retornou sequence.get()"
"sequenceGroup.get() não retornou sequenceThree.get()"
"sequenceGroup.size() não retornou 3"
"sequenceGroup.get() não retornou sequenceThree.get()"
"sequenceGroup.remove(sequenceThree) retornou false"
"sequenceGroup.get() não retornou sequenceSeven.get()"
"sequenceGroup.size() não retornou 1"
"sequenceGroup.get() não retornou sequenceThree.get()"
"sequenceGroup.remove(sequenceThree) retornou false"
"sequenceGroup.get() não retornou sequenceSeven.get()"
"sequenceGroup.size() não retornou 1"
"sequenceThree.get() não é igual a expectedSequence"
"sequenceSeven.get() não é igual a expectedSequence"
"completedWorkSequence é menor que expectedWorkSequence"
"completedWorkSequence é menor que expectedWorkSequence"
"completedWorkSequence é menor que expectedWorkSequence"
"sequenceBarrier.isAlerted() retornou true"
"sequenceBarrier.isAlerted() retornou false"
"sequenceBarrier.isAlerted() retornou true"
"timeWaiting é menor que theTimeout"
"exceptionHandled.get().getMessage() não retornou \"not rewindable\""
"rewindPauseStrategy.count não é igual a 3"
"rewindPauseStrategy.count não é igual a 0"
"powerOfTwo não é igual a 1024"
"powerOfTwo não é igual a 1024"
"Util.getMinimumSequence(sequences) não retornou 3L"
"Util.getMinimumSequence(sequences) não retornou Long.MAX_VALUE"
"ex.getCause() não retornou causeException"

