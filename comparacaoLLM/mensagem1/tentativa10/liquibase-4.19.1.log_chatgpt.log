"cdiLiquibase não deve ser nulo"
"cdiLiquibase.isInitialized() deve ser igual a shouldBeRunning"
"cdiLiquibase.isUpdateSuccessful() deve ser igual a shouldBeRunning"
"O tamanho de liquibaseSchemas e resolved deve ser igual"
"previous.size() deve ser igual a 9"
"O tamanho de schemes e resolved deve ser igual"
"previous.size() deve ser igual a 16"
"O tamanho de liquibaseSchemas e resolved deve ser igual"
"resolved.size() deve ser igual a 7"
"locations.size() deve ser igual a 1"
"mojo não deve ser nulo"
"mojo.getOutputDirectory() deve ser igual a 'target/liquibase/myOutputDirectory'"
"databaseDataType.getType() deve ser igual a 'TIMESTAMP_NTZ'"
"databaseDataType.toSql() deve ser igual a 'TIMESTAMP_NTZ'"
"databaseDataType não deve ser auto incremento"
"O tamanho de aliases deve ser igual a 2"
"aliases deve conter 'datetime'"
"aliases deve conter 'java.sql.Types.DATETIME'"
"liquibaseDataType.getClass().getName() deve ser igual a 'liquibase.datatype.core.TimestampNTZTypeSnowflake'"
"timestampNTZType deve suportar snowflakeDatabase"
"timestampNTZType não deve suportar PostgresDatabase"
"timestampNTZType.getPriority() deve ser igual a PRIORITY_DATABASE"
"timestampNTZType.getMinParameters(snowflakeDatabase) deve ser igual a 0"
"timestampNTZType.getMinParameters(snowflakeDatabase) deve ser igual a 0"
"database.getShortName() deve ser igual a 'snowflake'"
"database.getDefaultDatabaseProductName() deve ser igual a 'Snowflake'"
"database.getDefaultPort() deve ser nulo"
"database.getCurrentDateTimeFunction() deve ser igual a 'current_timestamp::timestamp_ntz'"
"database.getPriority() deve ser igual a PRIORITY_DATABASE"
"database não deve suportar colunas inicialmente adiáveis"
"database deve suportar drop table cascade constraints"
"database.isCorrectDatabaseImplementation(jdbcConnection) deve ser verdadeiro"
"database.getDefaultDriver('jdbc:snowflake:') deve ser igual a 'net.snowflake.client.jdbc.SnowflakeDriver'"
"database.getDefaultDriver('jdbc:wrong-name:') deve ser nulo"
"database deve suportar schemas"
"database deve suportar catálogos"
"database não deve suportar catálogo em nome de objeto nulo"
"database deve suportar sequences"
"database.getDatabaseChangeLogTableName() deve ser igual a 'DATABASECHANGELOG'"
"database.getDatabaseChangeLogLockTableName() deve ser igual a 'DATABASECHANGELOGLOCK'"
"database não deve suportar tablespaces"
"database deve suportar auto incremento"
"database.getAutoIncrementClause() deve ser igual a 'AUTOINCREMENT'"
"database.getAutoIncrementClause(null, null, null, null) deve ser igual a 'AUTOINCREMENT (1, 1)'"
"database.getAutoIncrementClause(new BigInteger('1'), new BigInteger('1'), null, null) deve ser igual a 'AUTOINCREMENT (1, 1)'"
"database.getAutoIncrementClause(new BigInteger('7'), new BigInteger('1'), null, null) deve ser igual a 'AUTOINCREMENT (7, 1)'"
"database.getAutoIncrementClause(new BigInteger('1'), new BigInteger('7'), null, null) deve ser igual a 'AUTOINCREMENT (1, 7)'"
"database.getAutoIncrementClause(new BigInteger('7'), null, null, null) deve ser igual a 'AUTOINCREMENT (7, 1)'"
"database.getAutoIncrementClause(null, new BigInteger('7'), null, null) deve ser igual a 'AUTOINCREMENT (1, 7)'"
"database.generateAutoIncrementStartWith(new BigInteger('1')) deve ser verdadeiro"
"database.generateAutoIncrementBy(new BigInteger('1')) deve ser verdadeiro"
"database deve suportar restrição de chaves estrangeiras"
"table deve ser palavra reservada"
"database.getDefaultCatalogName() deve ser nulo"
"database.getDefaultSchemaName() deve ser nulo"
"database.getJdbcCatalogName(new CatalogAndSchema(null, null)) deve ser nulo"
"database.getJdbcSchemaName(new CatalogAndSchema(null, null)) deve ser nulo"
"pk.getColumnNamesAsList() deve ter tamanho 1"
"pk.getColumnNamesAsList() deve ter tamanho 2"
"pk.getColumnNamesAsList().get(0) deve ser igual a 'id1'"
"pk.getColumnNamesAsList().get(1) deve ser igual a 'id2'"
"pk.getColumnNamesAsList() deve ter tamanho 2"
"pk.getColumnNamesAsList().get(0) deve ser igual a 'id1'"
"pk.getColumnNamesAsList().get(1) deve ser igual a 'id2'"
"ChangeLogSerializerFactory.getInstance() não deve ser nulo"
"ChangeLogSerializerFactory.getInstance() e ChangeLogSerializerFactory.getInstance() não devem ser a mesma instância"
"ChangeLogSerializerFactory.getInstance().getSerializers() deve ter tamanho 0"
"ChangeLogSerializerFactory.getInstance().getSerializers() deve ter tamanho 1"
"factory.getSerializers() deve ter tamanho 0"
"factory.getSerializers() deve ter tamanho 2"
"factory.getSerializers() deve ter tamanho 1"
"instance1 e ChangeLogSerializerFactory.getInstance() não devem ser a mesma instância"
"serializers deve ter tamanho 6"
"serializer deve ser do tipo XMLChangeLogSerializer"
"ChangeLogSerializerFactory.getInstance().getSerializers('xml') deve ter tamanho 1"
"serializer com maior prioridade deve ser obtido para 'xml'"
"factory.getSerializers().get('xml') deve ter tamanho 3"
"serializedJson deve ser igual a JSON serializado"
"node.getTagName() deve ser igual a 'addAutoIncrement'"
"node.getTagName() deve ser igual a 'addColumn'"
"node.getAttribute('tableName') deve ser igual a 'TAB'"
"columns.getLength() deve ser igual a 1"
"((Element) columns.item(0)).getTagName() deve ser igual a 'column'"
"((Element) columns.item(0)).getAttribute('name') deve ser igual a 'NEWCOL'"
"((Element) columns.item(0)).getAttribute('type') deve ser igual a 'TYP'"
"node.getTagName() deve ser igual a 'addDefaultValue'"
"node.getAttribute('schemaName') deve ser igual a 'SCHEMA_NAME'"
"node.getAttribute('tableName') deve ser igual a 'TABLE_NAME'"
"node.getAttribute('columnName') deve ser igual a 'COLUMN_NAME'"
"node.getAttribute('defaultValue') deve ser igual a 'DEF STRING'"
"node.getAttribute('defaultValueNumeric') deve ser igual a '42'"
"node.getAttribute('defaultValueBoolean') deve ser igual a 'true'"
"node.getAttribute('defaultValueDate') deve ser igual a '2007-01-02'"
"node.getAttribute('defaultValueSequenceNext') deve ser igual a 'sampleSeq'"
"node.getTagName() deve ser igual a 'addForeignKeyConstraint'"
"node.getAttribute('constraintName') deve ser igual a 'FK_NAME'"
"node.getAttribute('baseTableSchemaName') deve ser igual a 'BASE_SCHEMA_NAME'"
"node.getAttribute('baseTableName') deve ser igual a 'BASE_TABLE_NAME'"