"cdiLiquibase não deve ser nulo"
"cdiLiquibase.isInitialized() deve ser igual a shouldBeRunning"
"cdiLiquibase.isUpdateSuccessful() deve ser igual a shouldBeRunning"
"resolved.size() deve ser igual a liquibaseSchemas.size()"
"previous.size() deve ser igual a 9"
"resolved.size() deve ser igual a schemes.size()"
"previous.size() deve ser igual a 16"
"resolved.size() deve ser igual a liquibaseSchemas.size()"
"resolved.size() deve ser igual a 7"
"locations.size() deve ser igual a 1"
"dirLocation deve ser igual a mojo.changeLogDirectory"
"mojo não deve ser nulo"
"mojo.getOutputDirectory() deve ser igual a 'target/liquibase/myOutputDirectory'"
"databaseDataType.getType() deve ser igual a 'TIMESTAMP_NTZ'"
"databaseDataType.toSql() deve ser igual a 'TIMESTAMP_NTZ'"
"databaseDataType.isAutoIncrement() deve ser falso"
"aliases deve conter 'datetime'"
"aliases deve conter 'java.sql.Types.DATETIME'"
"liquibaseDataType.getClass().getName() deve ser igual a 'liquibase.datatype.core.TimestampNTZTypeSnowflake'"
"timestampNTZType deve suportar snowflakeDatabase"
"timestampNTZType não deve suportar PostgresDatabase()"
"timestampNTZType.getPriority() deve ser igual a PRIORITY_DATABASE"
"timestampNTZType.getMinParameters(snowflakeDatabase) deve retornar 0"
"timestampNTZType.getMinParameters(snowflakeDatabase) deve retornar 0"
"database.getShortName() deve ser igual a 'snowflake'"
"database.getDefaultDatabaseProductName() deve ser igual a 'Snowflake'"
"database.getDefaultPort() deve ser nulo"
"database.getCurrentDateTimeFunction() deve ser igual a 'current_timestamp::timestamp_ntz'"
"database.getPriority() deve ser igual a PRIORITY_DATABASE"
"database não deve suportar colunas inicialmente adiáveis"
"database deve suportar restrições de chave estrangeira em cascata"
"jdbcConnection deve ser uma implementação correta do banco de dados"
"database.getDefaultDriver('jdbc:snowflake:') deve retornar 'net.snowflake.client.jdbc.SnowflakeDriver'"
"database.getDefaultDriver('jdbc:wrong-name:') deve ser nulo"
"database deve suportar esquemas"
"database deve suportar catálogos"
"database não deve suportar catálogo em nome de objeto nulo"
"database deve suportar sequências"
"database.getDatabaseChangeLogTableName() deve retornar 'DATABASECHANGELOG'"
"database.getDatabaseChangeLogLockTableName() deve retornar 'DATABASECHANGELOGLOCK'"
"database não deve suportar tablespaces"
"database deve suportar auto incremento"
"database.getAutoIncrementClause() deve retornar 'AUTOINCREMENT'"
"database.getAutoIncrementClause(null, null, null, null) deve retornar 'AUTOINCREMENT (1, 1)'"
"database.getAutoIncrementClause(new BigInteger('1'), new BigInteger('1'), null, null) deve retornar 'AUTOINCREMENT (1, 1)'"
"database.getAutoIncrementClause(new BigInteger('7'), new BigInteger('1'), null, null) deve retornar 'AUTOINCREMENT (7, 1)'"
"database.getAutoIncrementClause(new BigInteger('1'), new BigInteger('7'), null, null) deve retornar 'AUTOINCREMENT (1, 7)'"
"database.getAutoIncrementClause(new BigInteger('7'), null, null, null) deve retornar 'AUTOINCREMENT (7, 1)'"
"database.getAutoIncrementClause(null, new BigInteger('7'), null, null) deve retornar 'AUTOINCREMENT (1, 7)'"
"database.generateAutoIncrementStartWith(new BigInteger('1')) deve ser verdadeiro"
"database.generateAutoIncrementBy(new BigInteger('1')) deve ser verdadeiro"
"database deve suportar chaves estrangeiras com restrição em cascata"
"table deve ser uma palavra reservada para o banco de dados"
"database.getDefaultCatalogName() deve ser nulo"
"database.getDefaultSchemaName() deve ser nulo"
"database.getJdbcCatalogName(null) deve ser nulo"
"database.getJdbcSchemaName(null) deve ser nulo"
"pk deve ter uma lista de nomes de colunas com tamanho 1"
"pk deve ter uma lista de nomes de colunas com tamanho 2"
"pk.getColumnNamesAsList().get(0) deve ser igual a 'id1'"
"pk.getColumnNamesAsList().get(1) deve ser igual a 'id2'"
"pk deve ter uma lista de nomes de colunas com tamanho 2"
"pk.getColumnNamesAsList().get(0) deve ser igual a 'id1'"
"pk.getColumnNamesAsList().get(1) deve ser igual a 'id2'"
"ChangeLogSerializerFactory.getInstance() não deve ser nulo"
"ChangeLogSerializerFactory.getInstance() deve ser o mesmo objeto que ChangeLogSerializerFactory.getInstance()"
"ChangeLogSerializerFactory.getInstance().getSerializers().size() deve ser igual a 0"
"ChangeLogSerializerFactory.getInstance().getSerializers().size() deve ser igual a 1"
"factory.getSerializers().size() deve ser igual a 0"
"factory.getSerializers().size() deve ser igual a 2"
"factory.getSerializers().size() deve ser igual a 1"
"instance1 não deve ser o mesmo objeto que ChangeLogSerializerFactory.getInstance()"
"serializers deve ter tamanho 6"
"serializer deve ser diferente de nulo"
"serializer deve ser uma instância de XMLChangeLogSerializer"
"ChangeLogSerializerFactory.getInstance().getSerializers('xml').size() deve ser igual a 1"
"factory.getSerializer('xml') deve ser o serializer de maior prioridade"
"factory.getSerializers().get('xml').size() deve ser igual a 3"
"serializedJson deve ser igual a um JSON serializado específico"
"node.getTagName() deve retornar 'addAutoIncrement'"
"node.getTagName() deve retornar 'addColumn'"
"node.getAttribute('tableName') deve retornar 'TAB'"
"columns.getLength() deve ser igual a 1"
"((Element) columns.item(0)).getTagName() deve ser 'column'"
"((Element) columns.item(0)).getAttribute('name') deve ser 'NEWCOL'"
"((Element) columns.item(0)).getAttribute('type') deve ser 'TYP'"
"node.getTagName() deve retornar 'addDefaultValue'"
"node.getAttribute('schemaName') deve ser igual a 'SCHEMA_NAME'"
"node.getAttribute('tableName') deve ser igual a 'TABLE_NAME'"
"node.getAttribute('columnName') deve ser igual a 'COLUMN_NAME'"
"node.getAttribute('defaultValue') deve ser igual a 'DEF STRING'"
"node.getAttribute('defaultValueNumeric') deve ser igual a '42'"
"node.getAttribute('defaultValueBoolean') deve ser igual a 'true'"
"node.getAttribute('defaultValueDate') deve ser igual a '2007-01-02'"
"node.getAttribute('defaultValueSequenceNext') deve ser igual a 'sampleSeq'"
"node.getTagName() deve retornar 'addForeignKeyConstraint'"
"node.getAttribute('constraintName') deve ser igual a 'FK_NAME'"
"node.getAttribute('baseTableSchemaName') deve ser igual a 'BASE_SCHEMA_NAME'"
"node.getAttribute('baseTableName') deve ser igual a 'BASE_TABLE_NAME'"