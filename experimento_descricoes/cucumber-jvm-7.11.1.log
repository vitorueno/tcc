
Projeto: /home/vitor-otto/opensource/cucumber-jvm-7.11.1

Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/docstring/src/test/java/io/cucumber/docstring/DocStringTest.java linha: 15 Método: assertThrows(CucumberDocStringException.class, () -> docString.convert(Object.class))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/docstring/src/test/java/io/cucumber/docstring/DocStringTypeRegistryDocStringConverterTest.java linha: 90 Método: assertThrows(CucumberDocStringException.class, () -> converter.convert(docString, Object.class))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/docstring/src/test/java/io/cucumber/docstring/DocStringTypeRegistryDocStringConverterTest.java linha: 102 Método: assertThrows(CucumberDocStringException.class, () -> converter.convert(docString, String.class))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/docstring/src/test/java/io/cucumber/docstring/DocStringTypeRegistryDocStringConverterTest.java linha: 115 Método: assertThrows(CucumberDocStringException.class, () -> converter.convert(docString, JsonNode.class))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/docstring/src/test/java/io/cucumber/docstring/DocStringTypeRegistryDocStringConverterTest.java linha: 125 Método: assertThrows(CucumberDocStringException.class, () -> converter.convert(docString, JsonNode.class))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/docstring/src/test/java/io/cucumber/docstring/DocStringTypeRegistryDocStringConverterTest.java linha: 137 Método: assertThrows(CucumberDocStringException.class, () -> converter.convert(docString, JsonNode.class))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/docstring/src/test/java/io/cucumber/docstring/DocStringTypeRegistryDocStringConverterTest.java linha: 149 Método: assertThrows(CucumberDocStringException.class, () -> converter.convert(docString, JsonNode.class))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/docstring/src/test/java/io/cucumber/docstring/DocStringTypeRegistryDocStringConverterTest.java linha: 168 Método: assertAll(() -> assertThat(docStringJson.getContent(), equalTo(converter.convert(docStringJson, String.class))), () -> assertThat(docStringXml.getContent(), equalTo(converter.convert(docStringXml, String.class))), () -> assertThat(docStringYml.getContent(), equalTo(converter.convert(docStringYml, String.class))))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/docstring/src/test/java/io/cucumber/docstring/DocStringTypeRegistryTest.java linha: 26 Método: assertThrows(CucumberDocStringException.class, () -> registry.defineDocStringType(docStringType))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/docstring/src/test/java/io/cucumber/docstring/DocStringTypeRegistryTest.java linha: 45 Método: assertThrows(CucumberDocStringException.class, () -> registry.defineDocStringType(duplicate))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-cdi2/src/test/java/io/cucumber/cdi2/Cdi2FactoryTest.java linha: 64 Método: assertAll(() -> assertThat(a1, is(notNullValue())), () -> assertThat(a1, is(not(equalTo(b1)))), () -> assertThat(b1, is(not(equalTo(a1)))))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/stepexpression/StepExpressionFactoryTest.java linha: 65 Método: assertThrows(CucumberException.class, () -> stepExpressionFactory.createExpression(stepDefinition))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/backend/DefaultObjectFactoryTest.java linha: 31 Método: assertAll(() -> assertThat(o1, is(notNullValue())), () -> assertThat(o1, is(not(equalTo(o2)))), () -> assertThat(o2, is(not(equalTo(o1)))))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/backend/DefaultObjectFactoryTest.java linha: 39 Método: assertThrows(CucumberException.class, () -> factory.getInstance(NoAccessibleConstructor.class))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/FeatureIdentifierTest.java linha: 28 Método: assertThrows(IllegalArgumentException.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/FeatureIdentifierTest.java linha: 29 Método: assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("featureIdentifier does not reference a single feature file: classpath:/path/to/file.feature:10:40")))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/FeatureIdentifierTest.java linha: 36 Método: assertThrows(IllegalArgumentException.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/FeatureIdentifierTest.java linha: 37 Método: assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("featureIdentifier does not reference a single feature file: classpath:/path/to")))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/FeaturePathTest.java linha: 21 Método: assertThrows(IllegalArgumentException.class, () -> FeaturePath.parse(""))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/GluePathTest.java linha: 97 Método: assertThrows(IllegalArgumentException.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/GluePathTest.java linha: 98 Método: assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("The glue path must have a classpath scheme file:com/example/app")))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/GluePathTest.java linha: 105 Método: assertThrows(IllegalArgumentException.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/GluePathTest.java linha: 106 Método: assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("The glue path contained invalid identifiers 01-examples")))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/GluePathTest.java linha: 124 Método: assertThrows(IllegalArgumentException.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/GluePathTest.java linha: 125 Método: assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("The glue path must have a classpath scheme C:/com/example/app")))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CurlOptionTest.java linha: 29 Método: assertThrows(IllegalArgumentException.class, () -> CurlOption.parse(""))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CurlOptionTest.java linha: 43 Método: assertThrows(IllegalArgumentException.class, () -> CurlOption.parse("https://example.com -X NO-SUCH-METHOD"))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CurlOptionTest.java linha: 58 Método: assertThrows(IllegalArgumentException.class, () -> CurlOption.parse("https://example.com -H 'Content-Type'"))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CurlOptionTest.java linha: 66 Método: assertThrows(IllegalArgumentException.class, () -> CurlOption.parse(uri))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CurlOptionTest.java linha: 74 Método: assertThrows(IllegalArgumentException.class, () -> CurlOption.parse(uri))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CurlOptionTest.java linha: 93 Método: assertThrows(IllegalArgumentException.class, () -> CurlOption.parse(uri))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CurlOptionTest.java linha: 100 Método: assertThrows(IllegalArgumentException.class, () -> CurlOption.parse(uri))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CurlOptionTest.java linha: 107 Método: assertThrows(IllegalArgumentException.class, () -> CurlOption.parse(uri))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CurlOptionTest.java linha: 115 Método: assertThrows(IllegalArgumentException.class, () -> CurlOption.parse(uri))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CurlOptionTest.java linha: 122 Método: assertThrows(IllegalArgumentException.class, () -> CurlOption.parse(uri))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CommandlineOptionsParserTest.java linha: 175 Método: assertThrows(RuntimeException.class, () -> {
    RuntimeOptions options = parser.parse("--tags", ")").build();
})
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CommandlineOptionsParserTest.java linha: 367 Método: assertAll(() -> assertThat(actual, contains("@should_not_be_clobbered")), () -> assertThat(options.getLineFilters(), is(emptyMap())), () -> assertThat(options.getFeaturePaths(), contains(new File("path/to.feature").toURI())))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CommandlineOptionsParserTest.java linha: 500 Método: assertThrows(IllegalArgumentException.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberPropertiesParserTest.java linha: 216 Método: assertThrows(CucumberException.class, () -> cucumberPropertiesParser.parse(properties).build())
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/RerunFileTest.java linha: 48 Método: assertAll(() -> assertThat(runtimeOptions.getFeaturePaths(), contains(new File("path/bar.feature").toURI(), new File("path/foo.feature").toURI())), () -> assertThat(runtimeOptions.getLineFilters(), hasEntry(new File("path/bar.feature").toURI(), singleton(2))), () -> assertThat(runtimeOptions.getLineFilters(), hasEntry(new File("path/foo.feature").toURI(), singleton(4))))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/RerunFileTest.java linha: 125 Método: assertAll(() -> assertThat(runtimeOptions.getFeaturePaths(), contains(URI.create("classpath:path/bar.feature"), URI.create("classpath:path/foo.feature"))), () -> assertThat(runtimeOptions.getLineFilters(), hasEntry(URI.create("classpath:path/bar.feature"), singleton(2))), () -> assertThat(runtimeOptions.getLineFilters(), hasEntry(URI.create("classpath:path/foo.feature"), singleton(4))))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/RerunFileTest.java linha: 161 Método: assertAll(() -> assertThat(runtimeOptions.getFeaturePaths(), contains(URI.create("file:/home/users/mp/My%20Documents/tests/bar.feature"), URI.create("file:/home/users/mp/My%20Documents/tests/foo.feature"))), () -> assertThat(runtimeOptions.getLineFilters(), hasEntry(URI.create("file:/home/users/mp/My%20Documents/tests/bar.feature"), singleton(2))), () -> assertThat(runtimeOptions.getLineFilters(), hasEntry(URI.create("file:/home/users/mp/My%20Documents/tests/foo.feature"), singleton(4))))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/PluginOptionTest.java linha: 22 Método: assertAll(() -> assertThat(option.pluginClass(), is(PrettyFormatter.class)), () -> assertThat(option.argument(), nullValue()), () -> assertThat(option.isEventListener(), is(true)))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/PluginOptionTest.java linha: 48 Método: assertThrows(IllegalArgumentException.class, () -> PluginOption.parse("io.qameta.allure.cucumber4jvm.AllureCucumber4Jvm"))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/PluginOptionTest.java linha: 66 Método: assertThrows(IllegalArgumentException.class, () -> PluginOption.parse(String.class.getName()))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/PluginOptionTest.java linha: 83 Método: assertThrows(IllegalArgumentException.class, () -> PluginOption.parse("no-such-plugin"))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberOptionsAnnotationParserTest.java linha: 46 Método: assertAll(() -> assertThat(runtimeOptions.getObjectFactoryClass(), is(nullValue())), () -> assertThat(runtimeOptions.getFeaturePaths(), contains(uri("classpath:/io/cucumber/core/options"))), () -> assertThat(runtimeOptions.getGlue(), contains(uri("classpath:/io/cucumber/core/options"))))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberOptionsAnnotationParserTest.java linha: 75 Método: assertThat(pluginName + " not found among the plugins", found, is(equalTo(true)))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberOptionsAnnotationParserTest.java linha: 87 Método: assertAll(() -> assertThat(runtimeOptions.getFeaturePaths(), contains(uri("classpath:/io/cucumber/core/options"))), () -> assertThat(runtimeOptions.getGlue(), contains(uri("classpath:/io/cucumber/core/options"))), () -> assertThat(plugins.getPlugins(), is(empty())))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberOptionsAnnotationParserTest.java linha: 97 Método: assertAll(() -> assertTrue(runtimeOptions.getTagExpressions().isEmpty()), () -> assertTrue(runtimeOptions.getNameFilters().isEmpty()), () -> assertTrue(runtimeOptions.getLineFilters().isEmpty()))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberOptionsAnnotationParserTest.java linha: 133 Método: assertThrows(RuntimeException.class, () -> parser().parse(ClassWithInvalidTagExpression.class).build())
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberOptionsAnnotationParserTest.java linha: 144 Método: assertThrows(RuntimeException.class, () -> parser().parse(ClassWithInheredInvalidTagExpression.class).build())
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberOptionsAnnotationParserTest.java linha: 250 Método: assertThrows(CucumberException.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberOptionsAnnotationParserTest.java linha: 251 Método: assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("glue and extraGlue cannot be specified at the same time")))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/BooleanStringTest.java linha: 33 Método: assertThrows(IllegalArgumentException.class, () -> BooleanString.parseBoolean(value))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/snippets/IdentifierGeneratorTest.java linha: 20 Método: assertThrows(IllegalArgumentException.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/resource/ResourceScannerTest.java linha: 130 Método: assertThrows(IllegalArgumentException.class, () -> resourceScanner.scanForResourcesPath(file.toPath()))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/resource/ResourceScannerTest.java linha: 168 Método: assertThrows(CucumberException.class, () -> resourceScanner.scanForResourcesUri(resourceUri))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/FeatureBuilderTest.java linha: 68 Método: assertAll(() -> assertThat(features.size(), equalTo(2)), () -> assertThat(features.get(0).getUri(), equalTo(featurePath1)), () -> assertThat(features.get(1).getUri(), equalTo(featurePath2)))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/FeatureBuilderTest.java linha: 90 Método: assertAll(() -> assertThat(features.get(0).getUri(), equalTo(featurePath3)), () -> assertThat(features.get(1).getUri(), equalTo(featurePath2)), () -> assertThat(features.get(2).getUri(), equalTo(featurePath1)))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/CucumberExecutionContextTest.java linha: 47 Método: assertThrows(IllegalStateException.class, () -> context.runTestCase(runner -> {
    throw failure;
}))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/CucumberExecutionContextTest.java linha: 56 Método: assertThrows(IllegalStateException.class, () -> context.runTestCase(runner -> {
    try (TestCaseResultObserver r = new TestCaseResultObserver(bus)) {
        bus.send(new TestCaseFinished(bus.getInstant(), mock(TestCase.class), new Result(Status.FAILED, Duration.ZERO, failure)));
        r.assertTestCasePassed(Exception::new, Function.identity(), (suggestions) -> new Exception(), Function.identity());
    }
}))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/CucumberExecutionContextTest.java linha: 80 Método: assertThrows(IllegalStateException.class, () -> context.runTestCase(runner -> {
    throw failure;
}))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/BackendServiceLoaderTest.java linha: 36 Método: assertThrows(CucumberException.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/BackendServiceLoaderTest.java linha: 37 Método: assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("No backends were found. Please make sure you have a backend module on your CLASSPATH.")))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/FeaturePathFeatureSupplierTest.java linha: 52 Método: assertThrows(IllegalArgumentException.class, supplier::get)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/FeaturePathFeatureSupplierTest.java linha: 63 Método: assertThrows(IllegalArgumentException.class, supplier::get)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/FeaturePathFeatureSupplierTest.java linha: 74 Método: assertThrows(IllegalArgumentException.class, supplier::get)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/ObjectFactoryServiceLoaderTest.java linha: 52 Método: assertThrows(CucumberException.class, loader::loadObjectFactory)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/ObjectFactoryServiceLoaderTest.java linha: 71 Método: assertThrows(CucumberException.class, loader::loadObjectFactory)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/RuntimeTest.java linha: 140 Método: assertThrows(FeatureParserException.class, runtime::run)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/RuntimeTest.java linha: 364 Método: assertThrows(CompositeCucumberException.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/RuntimeTest.java linha: 383 Método: assertThrows(RuntimeException.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/RuntimeTest.java linha: 400 Método: assertThrows(RuntimeException.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/ResultTest.java linha: 69 Método: assertThat("No checks performed", checkCount > 0, is(equalTo(true)))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/ResultTest.java linha: 84 Método: assertThat("No checks performed", checkCount > 0, is(equalTo(true)))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CamelCaseConverterTest.java linha: 53 Método: assertThrows(CucumberException.class, () -> camelCaseConverter.toCamelCase(table))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/ThrowableCollectorTest.java linha: 73 Método: assertThrows(OutOfMemoryError.class, () -> collector.execute(() -> {
    throw new OutOfMemoryError();
}))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/AmbiguousStepDefinitionsExceptionTest.java linha: 43 Método: assertAll(() -> assertThat(expectedThrown.getMessage(), is(equalTo("" + "\"I have 4 cukes in my belly\" matches more than one step definition:\n" + "  \"PickleStepDefinitionMatchOne_Pattern\" in PickleStepDefinitionMatchOne_Location\n" + "  \"PickleStepDefinitionMatchTwo_Pattern\" in PickleStepDefinitionMatchTwo_Location"))), () -> assertThat(expectedThrown.getCause(), is(nullValue())), () -> assertThat(expectedThrown.getMatches(), is(equalTo(matches))))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/UndefinedStepDefinitionMatchTest.java linha: 27 Método: assertThrows(UndefinedStepDefinitionException.class, () -> match.runStep(mock(TestCaseState.class)))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/UndefinedStepDefinitionMatchTest.java linha: 34 Método: assertThrows(UndefinedStepDefinitionException.class, () -> match.dryRunStep(mock(TestCaseState.class)))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CoreStepDefinitionTest.java linha: 98 Método: assertAll(() -> assertThat(stepDefs, hasEntry(1000.0, 999.0)), () -> assertThat(stepDefs, hasEntry(0.5, -0.5)), () -> assertThat(stepDefs, hasEntry(100.5, 99.5)))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/HookTest.java linha: 85 Método: assertThrows(RuntimeException.class, () -> new Runner(bus, Collections.singleton(backend), objectFactory, runtimeOptions))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/AmbiguousStepDefinitionMatchTest.java linha: 32 Método: assertThrows(AmbiguousStepDefinitionsException.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/AmbiguousStepDefinitionMatchTest.java linha: 41 Método: assertThrows(AmbiguousStepDefinitionsException.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 69 Método: assertThrows(DuplicateStepDefinitionException.class, () -> glue.prepareGlue(stepTypeRegistry))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 80 Método: assertThrows(DuplicateDefaultParameterTransformers.class, () -> glue.prepareGlue(stepTypeRegistry))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 94 Método: assertThrows(DuplicateDefaultDataTableEntryTransformers.class, () -> glue.prepareGlue(stepTypeRegistry))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 108 Método: assertThrows(DuplicateDefaultDataTableCellTransformers.class, () -> glue.prepareGlue(stepTypeRegistry))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 138 Método: assertAll(() -> assertThat(glue.getStepDefinitions().size(), is(equalTo(1))), () -> assertThat(glue.getBeforeHooks().size(), is(equalTo(1))), () -> assertThat(glue.getAfterHooks().size(), is(equalTo(1))), () -> assertThat(glue.getBeforeStepHooks().size(), is(equalTo(1))), () -> assertThat(glue.getAfterStepHooks().size(), is(equalTo(1))), () -> assertThat(glue.getDataTableTypeDefinitions().size(), is(equalTo(1))), () -> assertThat(glue.getParameterTypeDefinitions().size(), is(equalTo(1))), () -> assertThat(glue.getDefaultParameterTransformers().size(), is(equalTo(1))), () -> assertThat(glue.getDefaultDataTableCellTransformers().size(), is(equalTo(1))), () -> assertThat(glue.getDefaultDataTableEntryTransformers().size(), is(equalTo(1))), () -> assertThat(glue.getDocStringTypeDefinitions().size(), is(equalTo(1))))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 153 Método: assertAll(() -> assertThat(glue.getStepDefinitions().size(), is(equalTo(0))), () -> assertThat(glue.getBeforeHooks().size(), is(equalTo(0))), () -> assertThat(glue.getAfterHooks().size(), is(equalTo(0))), () -> assertThat(glue.getBeforeStepHooks().size(), is(equalTo(0))), () -> assertThat(glue.getAfterStepHooks().size(), is(equalTo(0))), () -> assertThat(glue.getDataTableTypeDefinitions().size(), is(equalTo(0))), () -> assertThat(glue.getParameterTypeDefinitions().size(), is(equalTo(0))), () -> assertThat(glue.getDefaultParameterTransformers().size(), is(equalTo(0))), () -> assertThat(glue.getDefaultDataTableCellTransformers().size(), is(equalTo(0))), () -> assertThat(glue.getDefaultDataTableEntryTransformers().size(), is(equalTo(0))), () -> assertThat(glue.getDocStringTypeDefinitions().size(), is(equalTo(0))))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/PickleStepTestStepTest.java linha: 290 Método: assertAll(() -> assertThat(started.getInstant(), is(equalTo(ofEpochMilli(234L)))), () -> assertThat(finished.getInstant(), is(equalTo(ofEpochMilli(1234L)))), () -> assertThat(finished.getResult().getDuration(), is(equalTo(ofMillis(1000L)))))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/TestCaseStateTest.java linha: 175 Método: assertThrows(IllegalStateException.class, () -> state.attach("Hello World", "text/plain", "hello.txt"))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/TestCaseStateTest.java linha: 176 Método: assertThrows(IllegalStateException.class, () -> state.attach("Hello World".getBytes(UTF_8), "text/plain", "hello.txt"))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/TestCaseStateTest.java linha: 178 Método: assertThrows(IllegalStateException.class, () -> state.log("Hello World"))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/RunnerTest.java linha: 227 Método: assertThrows(RuntimeException.class, runner::runBeforeAllHooks)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/StepDefinitionMatchTest.java linha: 89 Método: assertThrows(CucumberException.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/StepDefinitionMatchTest.java linha: 90 Método: assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("Step [I have {int} cukes in my belly] is defined with 0 parameters at '{stubbed location with details}'.\n" + "However, the gherkin step has 1 arguments:\n" + " * 4\n" + "Step text: I have 4 cukes in my belly")))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/StepDefinitionMatchTest.java linha: 116 Método: assertThrows(CucumberException.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/StepDefinitionMatchTest.java linha: 117 Método: assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("Step [I have {int} cukes in my belly] is defined with 0 parameters at '{stubbed location with details}'.\n" + "However, the gherkin step has 2 arguments:\n" + " * 4\n" + " * Table:\n" + "      | A | B |\n" + "      | C | D |\n" + "\n" + "Step text: I have 4 cukes in my belly")))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/StepDefinitionMatchTest.java linha: 148 Método: assertThrows(CucumberException.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/StepDefinitionMatchTest.java linha: 149 Método: assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("Step [I have {int} cukes in my belly] is defined with 3 parameters at '{stubbed location with details}'.\n" + "However, the gherkin step has 2 arguments:\n" + " * 4\n" + " * Table:\n" + "      | A | B |\n" + "      | C | D |\n" + "\n" + "Step text: I have 4 cukes in my belly")))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/StepDefinitionMatchTest.java linha: 176 Método: assertThrows(CucumberException.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/StepDefinitionMatchTest.java linha: 177 Método: assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("Step [I have cukes in my belly] is defined with 3 parameters at '{stubbed location with details}'.\n" + "However, the gherkin step has 0 arguments.\n" + "Step text: I have cukes in my belly")))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/StepDefinitionMatchTest.java linha: 205 Método: assertThrows(CucumberException.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/StepDefinitionMatchTest.java linha: 206 Método: assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("Could not convert arguments for step [I have a data table] defined at '{stubbed location with details}'.\n" + "It appears you did not register a data table type.")))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/StepDefinitionMatchTest.java linha: 233 Método: assertThrows(CucumberException.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/StepDefinitionMatchTest.java linha: 234 Método: assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("Could not convert arguments for step [I have {itemQuantity} in my belly] defined at '{stubbed location with details}'.")))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/StepDefinitionMatchTest.java linha: 263 Método: assertThrows(RuntimeException.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/StepDefinitionMatchTest.java linha: 287 Método: assertThrows(CucumberException.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/StepDefinitionMatchTest.java linha: 318 Método: assertThrows(RuntimeException.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/StepDefinitionMatchTest.java linha: 344 Método: assertThrows(CucumberException.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/StepDefinitionMatchTest.java linha: 373 Método: assertThrows(RuntimeException.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/StepDefinitionMatchTest.java linha: 399 Método: assertThrows(CucumberException.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/StepDefinitionMatchTest.java linha: 400 Método: assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("Could not convert arguments for step [I have a data table] defined at '{stubbed location with details}'.\n" + "It appears there was a problem with a hook or transformer definition.")))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/StepDefinitionMatchTest.java linha: 432 Método: assertThrows(CucumberException.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/StepDefinitionMatchTest.java linha: 433 Método: assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("Could not invoke step [I have a data table] defined at '{stubbed location with details}'.\n" + "It appears there was a problem with the step definition.\n" + "The converted arguments types were (java.lang.String, java.lang.String)")))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/StepDefinitionMatchTest.java linha: 461 Método: assertThrows(CucumberException.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/StepDefinitionMatchTest.java linha: 462 Método: assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("Could not invoke step [I have an {word} value] defined at '{stubbed location with details}'.\n" + "It appears there was a problem with the step definition.\n" + "The converted arguments types were (null)")))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/PrettyFormatterTest.java linha: 591 Método: assertThrows(StubException.class, () -> Runtime.builder().withFeatureSupplier(new StubFeatureSupplier(feature)).withAdditionalPlugins(new PrettyFormatter(out)).withBackendSupplier(new StubBackendSupplier(emptyList(), emptyList(), emptyList(), emptyList(), emptyList(), emptyList(), singletonList(new StubStaticHookDefinition(new StubException("Hook failed", "the stack trace"))))).build().run())
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/TeamCityPluginTest.java linha: 324 Método: assertThrows(StubException.class, () -> Runtime.builder().withFeatureSupplier(new StubFeatureSupplier(feature)).withAdditionalPlugins(new TeamCityPlugin(new PrintStream(out))).withEventBus(new TimeServiceEventBus(fixed(EPOCH, of("UTC")), UUID::randomUUID)).withBackendSupplier(new StubBackendSupplier(emptyList(), emptyList(), emptyList(), emptyList(), emptyList(), emptyList(), singletonList(new StubStaticHookDefinition(new StubException("Hook failed", "the stack trace"))))).build().run())
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/JsonFormatterTest.java linha: 155 Método: assertEquals(expected, actual, true)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/TimelineFormatterTest.java linha: 127 Método: assertTrue(Files.exists(actualFile), resource + ": did not exist in output dir")
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/TimelineFormatterTest.java linha: 130 Método: assertThat(resource + " differs", actual, is(equalTo(expected)))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/TimelineFormatterTest.java linha: 179 Método: assertThat(String.format("id on group %s, was not as expected", idx), actual.getId() > 0, is(equalTo(true)))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/TimelineFormatterTest.java linha: 182 Método: assertThat(String.format("content on group %s, was not as expected", idx), actual.getContent(), is(notNullValue()))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/TimelineFormatterTest.java linha: 263 Método: assertThat("Number of tests was not as expected", actualOutput.size(), is(equalTo(expectedTests.length)))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/TimelineFormatterTest.java linha: 271 Método: assertThat(String.format("feature on item %s, was not as expected", idx), actual.getFeature(), is(equalTo(expected.getFeature())))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/TimelineFormatterTest.java linha: 274 Método: assertThat(String.format("className on item %s, was not as expected", idx), actual.getClassName(), is(equalTo(expected.getClassName())))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/TimelineFormatterTest.java linha: 277 Método: assertThat(String.format("content on item %s, was not as expected", idx), actual.getContent(), is(equalTo(expected.getContent())))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/TimelineFormatterTest.java linha: 280 Método: assertThat(String.format("tags on item %s, was not as expected", idx), actual.getTags(), is(equalTo(expected.getTags())))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/TimelineFormatterTest.java linha: 292 Método: assertThat(String.format("startTime on item %s, was not as expected", idx), actual.getStart(), is(notNullValue()))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/TimelineFormatterTest.java linha: 294 Método: assertThat(String.format("endTime on item %s, was not as expected", idx), actual.getEnd(), is(notNullValue()))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/TimelineFormatterTest.java linha: 286 Método: assertThat(String.format("startTime on item %s, was not as expected", idx), actual.getStart(), is(equalTo(expected.getStart())))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/TimelineFormatterTest.java linha: 288 Método: assertThat(String.format("endTime on item %s, was not as expected", idx), actual.getEnd(), is(equalTo(expected.getEnd())))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/TimelineFormatterTest.java linha: 304 Método: assertThat(String.format("threadId on item %s, was not as expected", idx), actual.getGroup(), is(notNullValue()))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/TimelineFormatterTest.java linha: 300 Método: assertThat(String.format("threadId on item %s, was not as expected", idx), actual.getGroup(), is(equalTo(expected.getGroup())))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/TimelineFormatterTest.java linha: 270 Método: assertAll(() -> assertThat(String.format("feature on item %s, was not as expected", idx), actual.getFeature(), is(equalTo(expected.getFeature()))), () -> assertThat(String.format("className on item %s, was not as expected", idx), actual.getClassName(), is(equalTo(expected.getClassName()))), () -> assertThat(String.format("content on item %s, was not as expected", idx), actual.getContent(), is(equalTo(expected.getContent()))), () -> assertThat(String.format("tags on item %s, was not as expected", idx), actual.getTags(), is(equalTo(expected.getTags()))), () -> {
    if (checkActualTimeStamps) {
        assertAll(() -> assertThat(String.format("startTime on item %s, was not as expected", idx), actual.getStart(), is(equalTo(expected.getStart()))), () -> assertThat(String.format("endTime on item %s, was not as expected", idx), actual.getEnd(), is(equalTo(expected.getEnd()))));
    } else {
        assertAll(() -> assertThat(String.format("startTime on item %s, was not as expected", idx), actual.getStart(), is(notNullValue())), () -> assertThat(String.format("endTime on item %s, was not as expected", idx), actual.getEnd(), is(notNullValue())));
    }
}, () -> {
    if (checkActualThreadData) {
        assertThat(String.format("threadId on item %s, was not as expected", idx), actual.getGroup(), is(equalTo(expected.getGroup())));
    } else {
        assertThat(String.format("threadId on item %s, was not as expected", idx), actual.getGroup(), is(notNullValue()));
    }
})
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/TimelineFormatterTest.java linha: 351 Método: assertThat("Number of groups was not as expected", actualOutput.size(), is(equalTo(expectedGroups.length)))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/TimelineFormatterTest.java linha: 359 Método: assertThat(String.format("id on group %s, was not as expected", idx), actual.getId(), is(equalTo(expected.getId())))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/TimelineFormatterTest.java linha: 362 Método: assertThat(String.format("content on group %s, was not as expected", idx), actual.getContent(), is(equalTo(expected.getContent())))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 92 Método: assertAll(() -> assertThat(comparator.compare(runStarted, runStarted), equalTo(EQUAL_TO)), () -> assertThat(comparator.compare(runStarted, testRead), lessThan(EQUAL_TO)), () -> assertThat(comparator.compare(runStarted, testParsed), lessThan(EQUAL_TO)), () -> assertThat(comparator.compare(runStarted, suggested), lessThan(EQUAL_TO)), () -> assertThat(comparator.compare(runStarted, feature1Case1Started), lessThan(EQUAL_TO)), () -> assertThat(comparator.compare(runStarted, feature1Case2Started), lessThan(EQUAL_TO)), () -> assertThat(comparator.compare(runStarted, feature1Case3Started), lessThan(EQUAL_TO)), () -> assertThat(comparator.compare(runStarted, feature2Case1Started), lessThan(EQUAL_TO)), () -> assertThat(comparator.compare(runStarted, runFinished), lessThan(EQUAL_TO)))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 106 Método: assertAll(() -> assertThat(comparator.compare(testRead, runStarted), greaterThan(EQUAL_TO)), () -> assertThat(comparator.compare(testRead, testRead), equalTo(EQUAL_TO)), () -> assertThat(comparator.compare(testRead, testParsed), lessThan(EQUAL_TO)), () -> assertThat(comparator.compare(testRead, suggested), lessThan(EQUAL_TO)), () -> assertThat(comparator.compare(testRead, feature1Case1Started), lessThan(EQUAL_TO)), () -> assertThat(comparator.compare(testRead, feature1Case2Started), lessThan(EQUAL_TO)), () -> assertThat(comparator.compare(testRead, feature1Case3Started), lessThan(EQUAL_TO)), () -> assertThat(comparator.compare(testRead, feature2Case1Started), lessThan(EQUAL_TO)), () -> assertThat(comparator.compare(testRead, runFinished), lessThan(EQUAL_TO)))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 120 Método: assertAll(() -> assertThat(comparator.compare(testParsed, runStarted), greaterThan(EQUAL_TO)), () -> assertThat(comparator.compare(testParsed, testRead), greaterThan(EQUAL_TO)), () -> assertThat(comparator.compare(testParsed, testParsed), equalTo(EQUAL_TO)), () -> assertThat(comparator.compare(testParsed, suggested), lessThan(EQUAL_TO)), () -> assertThat(comparator.compare(testParsed, feature1Case1Started), lessThan(EQUAL_TO)), () -> assertThat(comparator.compare(testParsed, feature1Case2Started), lessThan(EQUAL_TO)), () -> assertThat(comparator.compare(testParsed, feature1Case3Started), lessThan(EQUAL_TO)), () -> assertThat(comparator.compare(testParsed, feature2Case1Started), lessThan(EQUAL_TO)), () -> assertThat(comparator.compare(testParsed, runFinished), lessThan(EQUAL_TO)))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 134 Método: assertAll(() -> assertThat(comparator.compare(suggested, runStarted), greaterThan(EQUAL_TO)), () -> assertThat(comparator.compare(suggested, testRead), greaterThan(EQUAL_TO)), () -> assertThat(comparator.compare(suggested, testParsed), greaterThan(EQUAL_TO)), () -> assertThat(comparator.compare(suggested, suggested), equalTo(EQUAL_TO)), () -> assertThat(comparator.compare(suggested, suggested2), lessThan(EQUAL_TO)), () -> assertThat(comparator.compare(suggested, feature1Case1Started), lessThan(EQUAL_TO)), () -> assertThat(comparator.compare(suggested, feature1Case2Started), lessThan(EQUAL_TO)), () -> assertThat(comparator.compare(suggested, feature1Case3Started), lessThan(EQUAL_TO)), () -> assertThat(comparator.compare(suggested, feature2Case1Started), lessThan(EQUAL_TO)), () -> assertThat(comparator.compare(suggested, runFinished), lessThan(EQUAL_TO)))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 151 Método: assertAll(() -> assertThat(comparator.compare(feature1Case1Started, e), greaterThan(EQUAL_TO)), () -> assertThat(comparator.compare(feature1Case2Started, e), greaterThan(EQUAL_TO)), () -> assertThat(comparator.compare(feature1Case3Started, e), greaterThan(EQUAL_TO)), () -> assertThat(comparator.compare(feature2Case1Started, e), greaterThan(EQUAL_TO)))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 160 Método: assertAll(() -> assertThat(comparator.compare(feature1Case1Started, e), lessThan(EQUAL_TO)), () -> assertThat(comparator.compare(feature1Case2Started, e), lessThan(EQUAL_TO)), () -> assertThat(comparator.compare(feature1Case3Started, e), lessThan(EQUAL_TO)), () -> assertThat(comparator.compare(feature2Case1Started, e), lessThan(EQUAL_TO)), () -> assertThat(comparator.compare(e, feature1Case1Started), greaterThan(EQUAL_TO)), () -> assertThat(comparator.compare(e, feature1Case2Started), greaterThan(EQUAL_TO)), () -> assertThat(comparator.compare(e, feature1Case3Started), greaterThan(EQUAL_TO)), () -> assertThat(comparator.compare(e, feature2Case1Started), greaterThan(EQUAL_TO)))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 171 Método: assertAll(() -> assertThat(comparator.compare(feature1Case1Started, feature1Case1Started), equalTo(EQUAL_TO)), () -> assertThat(comparator.compare(feature1Case1Started, feature1Case1Started2), lessThan(EQUAL_TO)), () -> assertThat(comparator.compare(feature1Case1Started, feature1Case2Started), lessThan(EQUAL_TO)), () -> assertThat(comparator.compare(feature1Case1Started, feature1Case2Started), lessThan(EQUAL_TO)), () -> assertThat(comparator.compare(feature1Case2Started, feature1Case3Started), lessThan(EQUAL_TO)), () -> assertThat(comparator.compare(feature1Case3Started, feature2Case1Started), lessThan(EQUAL_TO)))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 182 Método: assertAll(() -> assertThat(comparator.compare(runFinished, runStarted), greaterThan(EQUAL_TO)), () -> assertThat(comparator.compare(runFinished, suggested), greaterThan(EQUAL_TO)), () -> assertThat(comparator.compare(runFinished, testRead), greaterThan(EQUAL_TO)), () -> assertThat(comparator.compare(runFinished, testParsed), greaterThan(EQUAL_TO)), () -> assertThat(comparator.compare(runFinished, feature1Case1Started), greaterThan(EQUAL_TO)), () -> assertThat(comparator.compare(runFinished, feature1Case2Started), greaterThan(EQUAL_TO)), () -> assertThat(comparator.compare(runFinished, feature1Case3Started), greaterThan(EQUAL_TO)), () -> assertThat(comparator.compare(runFinished, feature2Case1Started), greaterThan(EQUAL_TO)), () -> assertThat(comparator.compare(runFinished, runFinished), equalTo(EQUAL_TO)))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/PluginFactoryTest.java linha: 85 Método: assertAll(() -> assertThat(Files.exists(file), is(false)), () -> assertDoesNotThrow(() -> {
    Object plugin = fc.create(option);
    releaseResources(plugin);
}), () -> assertThat(Files.exists(file), is(true)))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/PluginFactoryTest.java linha: 103 Método: assertThrows(IllegalArgumentException.class, () -> fc.create(jsonOption))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/PluginFactoryTest.java linha: 125 Método: assertThrows(IllegalArgumentException.class, () -> fc.create(htmlOption))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/PluginFactoryTest.java linha: 140 Método: assertThrows(IllegalArgumentException.class, () -> fc.create(option))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/PluginFactoryTest.java linha: 147 Método: assertThrows(CucumberException.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/PluginFactoryTest.java linha: 213 Método: assertThrows(CucumberException.class, () -> fc.create(option))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/PluginFactoryTest.java linha: 276 Método: assertThrows(CucumberException.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/PluginFactoryTest.java linha: 285 Método: assertThrows(CucumberException.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/PluginFactoryTest.java linha: 294 Método: assertThrows(CucumberException.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/JsonParallelRuntimeTest.java linha: 49 Método: assertEquals(serial.toString(), parallel.toString(), false)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/JsonParallelRuntimeTest.java linha: 86 Método: assertEquals(serial.toString(), parallel.toString(), false)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/UsageFormatterTest.java linha: 160 Método: assertEquals(json, out.toString(), true)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/UsageFormatterTest.java linha: 200 Método: assertEquals(json, out.toString(), true)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/exception/UnrecoverableExceptionsTest.java linha: 12 Método: assertThrows(OutOfMemoryError.class, () -> rethrowIfUnrecoverable(new OutOfMemoryError()))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/exception/CompositeCucumberExceptionTest.java linha: 22 Método: assertAll(() -> assertThat(expectedThrown.getMessage(), is(equalTo("There were 0 exceptions. The details are in the stacktrace below."))), () -> assertThat(expectedThrown.getCause(), is(nullValue())), () -> assertThat(expectedThrown.getSuppressed(), is(arrayWithSize(0))))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/exception/CompositeCucumberExceptionTest.java linha: 33 Método: assertAll(() -> assertThat(expectedThrown.getMessage(), is(equalTo("There were 1 exceptions. The details are in the stacktrace below."))), () -> assertThat(expectedThrown.getCause(), is(nullValue())), () -> assertThat(expectedThrown.getSuppressed(), is(arrayWithSize(1))))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/exception/CompositeCucumberExceptionTest.java linha: 44 Método: assertAll(() -> assertThat(expectedThrown.getMessage(), is(equalTo("There were 2 exceptions. The details are in the stacktrace below."))), () -> assertThat(expectedThrown.getCause(), is(nullValue())), () -> assertThat(expectedThrown.getSuppressed(), is(arrayWithSize(2))))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-picocontainer/src/test/java/io/cucumber/picocontainer/PicoFactoryTest.java linha: 33 Método: assertAll(() -> assertThat(o1, is(notNullValue())), () -> assertThat(o1, is(not(equalTo(o2)))), () -> assertThat(o2, is(not(equalTo(o1)))))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/TestCaseResultObserverTest.java linha: 183 Método: assertThrows(Exception.class, observer::assertTestCasePassed)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/TestCaseResultObserverTest.java linha: 194 Método: assertThrows(Exception.class, observer::assertTestCasePassed)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/TestCaseResultObserverTest.java linha: 205 Método: assertThrows(Exception.class, observer::assertTestCasePassed)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/TestCaseResultObserverTest.java linha: 227 Método: assertThrows(Exception.class, observer::assertTestCasePassed)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTest.java linha: 54 Método: assertThrows(DuplicateTypeException.class, () -> registry.defineDataTableType(new DataTableType(Place.class, (TableTransformer<Place>) table -> new Place(table.cell(0, 0)))))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 256 Método: assertThrows(CucumberDataTableException.class, () -> converter.toList(table, Integer.class))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 280 Método: assertThrows(CucumberDataTableException.class, () -> converter.toList(table, Integer.class))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 407 Método: assertThrows(CucumberDataTableException.class, () -> converter.convert(table, LIST_OF_AUTHOR))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 486 Método: assertThrows(CucumberDataTableException.class, () -> converter.convert(table, LIST_OF_AUTHOR))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 540 Método: assertThrows(CucumberDataTableException.class, () -> converter.convert(table, LIST_OF_LIST_OF_DATE))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1012 Método: assertThrows(CucumberDataTableException.class, () -> converter.convert(table, MAP_OF_STRING_TO_LIST_OF_DOUBLE))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1031 Método: assertThrows(CucumberDataTableException.class, () -> converter.convert(table, MAP_OF_STRING_TO_STRING))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1113 Método: assertThrows(UndefinedDataTableTypeException.class, () -> converter.convert(table, OPTIONAL_CHESS_BOARD_TYPE))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1151 Método: assertThrows(CucumberDataTableException.class, () -> converter.convert(table, Piece.class))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1167 Método: assertThrows(CucumberDataTableException.class, () -> converter.convert(table, Piece.class))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1255 Método: assertThrows(CucumberDataTableException.class, () -> converter.convert(table, Piece.class))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1281 Método: assertThrows(CucumberDataTableException.class, () -> converter.convert(table, Piece.class))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1309 Método: assertThrows(CucumberDataTableException.class, () -> converter.toList(table, Piece.class))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1344 Método: assertThrows(CucumberDataTableException.class, () -> converter.toList(table, Author.class))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1371 Método: assertThrows(CucumberDataTableException.class, () -> converter.toLists(table, Author.class))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1402 Método: assertThrows(CucumberDataTableException.class, () -> converter.toMap(table, AirPortCode.class, Coordinate.class))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1422 Método: assertThrows(CucumberDataTableException.class, () -> converter.toMap(table, AirPortCode.class, String.class))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1450 Método: assertThrows(CucumberDataTableException.class, () -> converter.toMap(table, AirPortCode.class, Coordinate.class))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1472 Método: assertThrows(CucumberDataTableException.class, () -> converter.toMap(table, AirPortCode.class, Coordinate.class))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1492 Método: assertThrows(CucumberDataTableException.class, () -> converter.toMap(table, String.class, Coordinate.class))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1511 Método: assertThrows(CucumberDataTableException.class, () -> converter.toMap(table, String.class, String.class))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1528 Método: assertThrows(CucumberDataTableException.class, () -> converter.toMap(table, Author.class, String.class))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1566 Método: assertThrows(CucumberDataTableException.class, () -> converter.toMap(table, AirPortCode.class, Coordinate.class))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1591 Método: assertThrows(CucumberDataTableException.class, () -> converter.toMap(table, String.class, Date.class))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1617 Método: assertThrows(CucumberDataTableException.class, () -> converter.convert(table, MAP_OF_STRING_TO_LIST_OF_DATE))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1640 Método: assertThrows(CucumberDataTableException.class, () -> converter.toMaps(table, Integer.class, Integer.class))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1655 Método: assertThrows(CucumberDataTableException.class, () -> converter.toMaps(table, Integer.class, Integer.class))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1673 Método: assertThrows(CucumberDataTableException.class, () -> converter.toMaps(table, String.class, Coordinate.class))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1701 Método: assertThrows(CucumberDataTableException.class, () -> converter.toMaps(table, Piece.class, String.class))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 118 Método: assertThrows(IndexOutOfBoundsException.class, () -> table.subTable(-1, 0, 1, 1))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 124 Método: assertThrows(IndexOutOfBoundsException.class, () -> table.subTable(0, -1, 1, 1))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 130 Método: assertThrows(IndexOutOfBoundsException.class, () -> table.subTable(0, 0, 4, 1))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 136 Método: assertThrows(IndexOutOfBoundsException.class, () -> table.subTable(0, 0, 1, 4))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 142 Método: assertThrows(IllegalArgumentException.class, () -> table.subTable(2, 0, 1, 1))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 148 Método: assertThrows(IllegalArgumentException.class, () -> table.subTable(0, 2, 1, 1))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 154 Método: assertThrows(IndexOutOfBoundsException.class, () -> table.subTable(0, 0, 1, 1).cell(-1, 0))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 161 Método: assertThrows(IndexOutOfBoundsException.class, () -> table.subTable(0, 0, 1, 1).cell(0, -1))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 168 Método: assertThrows(IndexOutOfBoundsException.class, () -> table.subTable(0, 0, 1, 1).cell(1, 0))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 175 Método: assertThrows(IndexOutOfBoundsException.class, () -> table.subTable(0, 0, 1, 1).cell(0, 1))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 247 Método: assertThrows(IndexOutOfBoundsException.class, () -> createSimpleTable().column(-1))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 252 Método: assertThrows(IndexOutOfBoundsException.class, () -> createSimpleTable().column(0).get(-1))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 257 Método: assertThrows(IndexOutOfBoundsException.class, () -> createSimpleTable().column(4))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 262 Método: assertThrows(IndexOutOfBoundsException.class, () -> createSimpleTable().column(0).get(4))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 318 Método: assertEquals(2, raw.size(), "Rows size")
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 320 Método: assertEquals(3, list.size(), "Cols size: " + list)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 327 Método: assertEquals(3, raw.size(), "Rows size")
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 329 Método: assertEquals(2, list.size(), "Cols size: " + list)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 339 Método: assertThrows(IllegalArgumentException.class, () -> DataTable.create(raw, tableConverter))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 347 Método: assertThrows(IllegalArgumentException.class, () -> DataTable.create(table, tableConverter))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 363 Método: assertThrows(UnsupportedOperationException.class, () -> createSimpleTable().cells().remove(0))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 368 Método: assertThrows(UnsupportedOperationException.class, () -> createSimpleTable().cells().get(0).remove(0))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 395 Método: assertThrows(IndexOutOfBoundsException.class, () -> table.values().get(5))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 404 Método: assertThrows(IndexOutOfBoundsException.class, () -> table.values().get(-1))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 486 Método: assertThrows(CucumberDataTableException.class, table::asMaps)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 503 Método: assertThrows(CucumberDataTableException.class, table::asMaps)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/NoConverterDefinedTest.java linha: 17 Método: assertThrows(CucumberDataTableException.class, () -> converter.convert(table, DataTable.class, false))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/NoConverterDefinedTest.java linha: 22 Método: assertThrows(CucumberDataTableException.class, () -> converter.toList(table, Integer.class))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/NoConverterDefinedTest.java linha: 27 Método: assertThrows(CucumberDataTableException.class, () -> converter.toLists(table, Integer.class))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/NoConverterDefinedTest.java linha: 32 Método: assertThrows(CucumberDataTableException.class, () -> converter.toMap(table, String.class, Integer.class))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/NoConverterDefinedTest.java linha: 37 Método: assertThrows(CucumberDataTableException.class, () -> converter.toMaps(table, String.class, Integer.class))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/NumberParserTest.java linha: 19 Método: assertEquals(1042.2f, english.parseFloat("1,042.2"), 0)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/NumberParserTest.java linha: 20 Método: assertEquals(1042.2f, german.parseFloat("1.042,2"), 0)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/NumberParserTest.java linha: 27 Método: assertEquals(1042.000000000000002, english.parseDouble("1,042.000000000000002"), 0)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/NumberParserTest.java linha: 28 Método: assertEquals(1042.000000000000002, german.parseDouble("1.042,000000000000002"), 0)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/TypeFactoryTest.java linha: 149 Método: assertThrows(InvalidDataTableTypeException.class, () -> TypeFactory.constructType(typeVariable))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/integration/ScenarioScopedSteps.java linha: 51 Método: assertThat("Expected test scenario to provide three objects.", OBJECTS.size(), equalTo(3))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/integration/ScenarioScopedSteps.java linha: 63 Método: assertThat("Expected test scenario to provide two objects.", OBJECTS.size(), equalTo(2))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/integration/SingletonScopedSteps.java linha: 50 Método: assertThat("Expected test scenario to provide three objects.", OBJECTS.size(), equalTo(3))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/integration/SingletonScopedSteps.java linha: 62 Método: assertThat("Expected test scenario to provide two objects.", OBJECTS.size(), equalTo(2))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/integration/UnScopedSteps.java linha: 47 Método: assertThat("Expected test scenario to provide three objects.", OBJECTS.size(), equalTo(3))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/GuiceBackendTest.java linha: 71 Método: assertThrows(NullPointerException.class, () -> backend.loadGlue(glue, null))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/InjectorSourceFactoryTest.java linha: 41 Método: assertThrows(InjectorSourceInstantiationFailed.class, () -> InjectorSourceFactory.loadInjectorSourceFromProperties(properties))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/InjectorSourceFactoryTest.java linha: 44 Método: assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("Instantiation of 'some.bogus.Class' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor.")))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/InjectorSourceFactoryTest.java linha: 46 Método: assertThat("Unexpected exception cause class", actualThrown.getCause(), isA(ClassNotFoundException.class))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/InjectorSourceFactoryTest.java linha: 55 Método: assertThrows(InjectorSourceInstantiationFailed.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/InjectorSourceFactoryTest.java linha: 58 Método: assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("Instantiation of 'java.lang.String' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor.")))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/InjectorSourceFactoryTest.java linha: 60 Método: assertThat("Unexpected exception cause class", actualThrown.getCause(), isA(ClassCastException.class))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/InjectorSourceFactoryTest.java linha: 69 Método: assertThrows(InjectorSourceInstantiationFailed.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/InjectorSourceFactoryTest.java linha: 72 Método: assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("Instantiation of 'io.cucumber.guice.InjectorSourceFactoryTest$PrivateConstructor' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor.")))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/InjectorSourceFactoryTest.java linha: 74 Método: assertThat("Unexpected exception cause class", actualThrown.getCause(), isA(NoSuchMethodException.class))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/InjectorSourceFactoryTest.java linha: 83 Método: assertThrows(InjectorSourceInstantiationFailed.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/InjectorSourceFactoryTest.java linha: 86 Método: assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("Instantiation of 'io.cucumber.guice.InjectorSourceFactoryTest$NoDefaultConstructor' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor.")))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/InjectorSourceFactoryTest.java linha: 88 Método: assertThat("Unexpected exception cause class", actualThrown.getCause(), isA(NoSuchMethodException.class))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/matcher/AbstractMatcherTest.java linha: 15 Método: assertTrue(matcher.matches(arg), "Expected match, but mismatched because: '" + mismatchDescription(matcher, arg) + "'")
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/matcher/AbstractMatcherTest.java linha: 26 Método: assertFalse(c.matches(arg), "Unexpected match")
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/matcher/AbstractMatcherTest.java linha: 32 Método: Assertions.assertEquals(expected, description.toString().trim(), "Expected description")
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/matcher/AbstractMatcherTest.java linha: 36 Método: assertFalse(matcher.matches(arg), "Precondition: Matcher should not match item.")
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/matcher/AbstractMatcherTest.java linha: 37 Método: Assertions.assertEquals(expected, mismatchDescription(matcher, arg), "Expected mismatch description")
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/matcher/ElementsAreAllEqualMatcher.java linha: 39 Método: fail("collection contained elements that are not equal", item, mismatchDescription)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/matcher/ElementsAreAllMatcher.java linha: 19 Método: fail("collection did not contain more than one element", item, mismatchDescription)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/matcher/ElementsAreAllMatcher.java linha: 31 Método: fail("collection contained null element", item, mismatchDescription)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/matcher/ElementsAreAllUniqueMatcher.java linha: 38 Método: fail("collection contained elements that are not unique", item, mismatchDescription)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/collection/CollectionUtilTest.java linha: 28 Método: assertThrows(NullPointerException.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/collection/CollectionUtilTest.java linha: 35 Método: assertThrows(IllegalArgumentException.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/GuiceFactoryTest.java linha: 82 Método: assertThrows(ConfigurationException.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/GuiceFactoryTest.java linha: 83 Método: assertThat("Unexpected exception message", actualThrown.getMessage(), startsWith("Guice configuration errors:\n" + "\n" + "1) [Guice/MissingImplementation]: No implementation for ScenarioScope was bound."))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/GuiceFactoryTest.java linha: 237 Método: assertThrows(CucumberBackendException.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/GuiceFactoryTest.java linha: 247 Método: assertThat("Unexpected exception message", actualThrown.getMessage(), is(exceptionMessage))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/CucumberTest.java linha: 70 Método: assertThrows(FeatureParserException.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/CucumberTest.java linha: 84 Método: assertThrows(FeatureParserException.class, () -> new Cucumber(FormatterWithLexerErrorFeature.class))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/CucumberTest.java linha: 86 Método: assertFalse(new File("target/lexor_error_feature.ndjson").exists(), "File is created despite Lexor Error")
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/CucumberTest.java linha: 182 Método: assertThrows(CucumberException.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/AssertionsTest.java linha: 21 Método: assertThrows(CucumberException.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java8/src/test/java/io/cucumber/java8/Java8LambdaStepDefinitionMarksCorrectStackElementTest.java linha: 30 Método: assertThrows(CucumberInvocationTargetException.class, () -> stepDefinition.execute(new Object[0]))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java8/src/test/java/io/cucumber/java8/Java8LambdaStepDefinitionTest.java linha: 49 Método: assertThrows(CucumberBackendException.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java8/src/test/java/io/cucumber/java8/Java8LambdaStepDefinitionTest.java linha: 50 Método: assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("Can't use java.util.List in lambda step definition \"some step\". " + "Declare a DataTable or DocString argument instead and convert " + "manually with 'asList/asLists/asMap/asMaps' and 'convert' respectively")))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java8/src/test/java/io/cucumber/java8/Java8LambdaStepDefinitionTest.java linha: 63 Método: assertThrows(CucumberBackendException.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java8/src/test/java/io/cucumber/java8/Java8LambdaStepDefinitionTest.java linha: 64 Método: assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("Can't use java.util.List in lambda step definition \"some step\". " + "Declare a DataTable or DocString argument instead and convert " + "manually with 'asList/asLists/asMap/asMaps' and 'convert' respectively")))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-testng/src/test/java/io/cucumber/testng/AbstractTestNGCucumberTestsTest.java linha: 38 Método: assertTrue(listener.getInvokedTestMethods().stream().filter(IInvokedMethod::isConfigurationMethod).map(IInvokedMethod::getTestMethod).map(ITestNGMethod::getMethodName).anyMatch("setUpClass"::equals), "setUpClass() must be invoked")
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-testng/src/test/java/io/cucumber/testng/AbstractTestNGCucumberTestsTest.java linha: 48 Método: assertTrue(listener.getInvokedTestMethods().stream().filter(IInvokedMethod::isConfigurationMethod).map(IInvokedMethod::getTestMethod).map(ITestNGMethod::getMethodName).anyMatch("tearDownClass"::equals), "tearDownClass() must be invoked")
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-testng/src/test/java/io/cucumber/testng/AbstractTestNGCucumberTestsTest.java linha: 64 Método: assertEquals(frequency(invokedTestMethodNames, "runScenario"), 3, "runScenario() must be invoked three times")
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-testng/src/test/java/io/cucumber/testng/TestNGCucumberRunnerTest.java linha: 52 Método: assertThrows(UndefinedStepException.class, () -> testNGCucumberRunner.runScenario(wrapper.getPickle()))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 65 Método: assertAll(() -> assertThat(o1, is(notNullValue())), () -> assertThat(o2, is(notNullValue())), () -> assertThat(o1, is(not(equalTo(o2)))), () -> assertThat(o2, is(not(equalTo(o1)))))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 109 Método: assertAll(() -> assertThat(o1, is(notNullValue())), () -> assertThat(o2, is(notNullValue())), () -> assertThat(o1, is(equalTo(o1))), () -> assertThat(o2, is(equalTo(o2))))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 132 Método: assertAll(() -> assertThat(o1, is(notNullValue())), () -> assertThat(o2, is(notNullValue())), () -> assertThat(o1, is(equalTo(o1))), () -> assertThat(o2, is(equalTo(o2))))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 151 Método: assertAll(() -> assertThat(o1.getThirdStepDef(), is(notNullValue())), () -> assertThat(o2, is(notNullValue())), () -> assertThat(o1.getThirdStepDef(), is(equalTo(o2))), () -> assertThat(o2, is(equalTo(o1.getThirdStepDef()))))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 170 Método: assertAll(() -> assertThat(o1.getThirdStepDef(), is(notNullValue())), () -> assertThat(o3.getThirdStepDef(), is(notNullValue())), () -> assertThat(o1.getThirdStepDef(), is(equalTo(o3.getThirdStepDef()))), () -> assertThat(o3.getThirdStepDef(), is(equalTo(o1.getThirdStepDef()))))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 217 Método: assertAll(() -> assertThat(o1, is(notNullValue())), () -> assertThat(o2, is(notNullValue())), () -> assertThat(o1, is(not(equalTo(o2)))), () -> assertThat(o2, is(not(equalTo(o1)))))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 240 Método: assertAll(() -> assertThat(o1, is(notNullValue())), () -> assertThat(o2, is(notNullValue())), () -> assertThat(o1, is(not(equalTo(o2)))), () -> assertThat(o2, is(not(equalTo(o1)))))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 264 Método: assertThrows(CucumberBackendException.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 276 Método: assertThrows(CucumberBackendException.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 286 Método: assertThrows(CucumberBackendException.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 308 Método: assertAll(() -> assertThat(glueInstance1, is(not(glueInstance2))), () -> assertThat(glueInstance2, is(not(glueInstance1))), () -> assertThat(bellyInstance1, is(bellyInstance2)), () -> assertThat(bellyInstance2, is(bellyInstance1)))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 326 Método: assertThrows(BeanCreationException.class, glue::getInstanceId)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 334 Método: assertThrows(IllegalStateException.class, factory::start)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 345 Método: assertThrows(IllegalStateException.class, factory::start)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 355 Método: assertThrows(CucumberBackendException.class, factory::start)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/TestTestContextAdaptorTest.java linha: 73 Método: assertThrows(CucumberBackendException.class, adaptor::start)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/TestTestContextAdaptorTest.java linha: 89 Método: assertThrows(CucumberBackendException.class, adaptor::start)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/TestTestContextAdaptorTest.java linha: 105 Método: assertThrows(CucumberBackendException.class, adaptor::start)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/TestTestContextAdaptorTest.java linha: 124 Método: assertThrows(CucumberBackendException.class, adaptor::start)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/TestTestContextAdaptorTest.java linha: 150 Método: assertThrows(CucumberBackendException.class, adaptor::stop)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/TestTestContextAdaptorTest.java linha: 171 Método: assertThrows(CucumberBackendException.class, adaptor::stop)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/TestTestContextAdaptorTest.java linha: 192 Método: assertThrows(CucumberBackendException.class, adaptor::stop)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/TestTestContextAdaptorTest.java linha: 204 Método: assertAll(() -> assertDoesNotThrow(adaptor::start), () -> assertNotNull(manager.getTestContext().getTestInstance()), () -> assertSame(manager.getTestContext().getTestInstance(), adaptor.getInstance(testClass)), () -> assertEquals(1, adaptor.getInstance(testClass).autowiredCount()), () -> assertEquals(1, adaptor.getInstance(testClass).postProcessedCount()), () -> assertNotNull(adaptor.getInstance(testClass).getBelly()), () -> assertNotNull(adaptor.getInstance(testClass).getDummyComponent()), () -> assertDoesNotThrow(adaptor::stop))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-jakarta-cdi/src/test/java/io/cucumber/jakarta/cdi/CdiJakartaFactoryTest.java linha: 63 Método: assertAll(() -> assertThat(a1, is(notNullValue())), () -> assertThat(a1, is(not(equalTo(b1)))), () -> assertThat(b1, is(not(equalTo(a1)))))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-gherkin-messages/src/test/java/io/cucumber/core/gherkin/messages/FeatureParserTest.java linha: 134 Método: assertThrows(FeatureParserException.class, () -> parser.parse(uri, source, UUID::randomUUID))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/GlueAdaptorTest.java linha: 151 Método: assertAll(() -> assertThat(stepDefinitions, containsInAnyOrder(aStep, repeated)), () -> assertThat(defaultDataTableCellTransformer, notNullValue()), () -> assertThat(defaultDataTableEntryTransformer, notNullValue()), () -> assertThat(defaultParameterTransformer, notNullValue()), () -> assertThat(dataTableTypeDefinition, notNullValue()), () -> assertThat(parameterTypeDefinition.parameterType().getRegexps(), is(singletonList("pattern"))), () -> assertThat(parameterTypeDefinition.parameterType().getName(), is("name")), () -> assertThat(parameterTypeDefinition.parameterType().preferForRegexpMatch(), is(true)), () -> assertThat(parameterTypeDefinition.parameterType().useForSnippets(), is(true)), () -> assertThat(parameterTypeDefinition.parameterType().useRegexpMatchAsStrongTypeHint(), is(false)), () -> assertThat(afterStepHook, notNullValue()), () -> assertThat(beforeStepHook, notNullValue()), () -> assertThat(afterHook, notNullValue()), () -> assertThat(beforeHook, notNullValue()), () -> assertThat(beforeAllHook, notNullValue()), () -> assertThat(afterAllHook, notNullValue()), () -> assertThat(docStringTypeDefinition, notNullValue()))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/MethodScannerTest.java linha: 52 Método: assertThrows(InvalidMethodException.class, () -> MethodScanner.scan(ExtendedSteps.class, backend))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaHookDefinitionTest.java linha: 68 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaHookDefinition(method, "", 0, lookup))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaHookDefinitionTest.java linha: 85 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaHookDefinition(method, "", 0, lookup))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaHookDefinitionTest.java linha: 97 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaHookDefinition(method, "", 0, lookup))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaHookDefinitionTest.java linha: 109 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaHookDefinition(method, "", 0, lookup))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaBackendTest.java linha: 69 Método: assertThrows(InvalidMethodException.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaStaticHookDefinitionTest.java linha: 49 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaStaticHookDefinition(method, 0, lookup))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaStaticHookDefinitionTest.java linha: 66 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaStaticHookDefinition(method, 0, lookup))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaStepDefinitionTest.java linha: 45 Método: assertThrows(CucumberInvocationTargetException.class, () -> definition.execute(new Object[0]))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDefaultDataTableCellTransformerDefinitionTest.java linha: 78 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaDefaultDataTableCellTransformerDefinition(method, lookup, new String[0]))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDefaultDataTableCellTransformerDefinitionTest.java linha: 93 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaDefaultDataTableCellTransformerDefinition(oneArg, lookup, new String[0]))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDefaultDataTableCellTransformerDefinitionTest.java linha: 97 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaDefaultDataTableCellTransformerDefinition(threeArg, lookup, new String[0]))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDefaultDataTableCellTransformerDefinitionTest.java linha: 113 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaDefaultDataTableCellTransformerDefinition(threeArg, lookup, new String[0]))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDefaultDataTableCellTransformerDefinitionTest.java linha: 125 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaDefaultDataTableCellTransformerDefinition(threeArg, lookup, new String[0]))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDefaultDataTableEntryTransformerDefinitionTest.java linha: 83 Método: assertThrows(IllegalArgumentException.class, () -> definition.tableEntryByTypeTransformer().transform(fromValue, String.class, cellTransformer))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDefaultDataTableEntryTransformerDefinitionTest.java linha: 122 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaDefaultDataTableEntryTransformerDefinition(toFew, lookup))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDefaultDataTableEntryTransformerDefinitionTest.java linha: 126 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaDefaultDataTableEntryTransformerDefinition(toMany, lookup))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDefaultDataTableEntryTransformerDefinitionTest.java linha: 142 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaDefaultDataTableEntryTransformerDefinition(method, lookup))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDefaultDataTableEntryTransformerDefinitionTest.java linha: 153 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaDefaultDataTableEntryTransformerDefinition(method, lookup))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDefaultDataTableEntryTransformerDefinitionTest.java linha: 157 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaDefaultDataTableEntryTransformerDefinition(method2, lookup))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDefaultDataTableEntryTransformerDefinitionTest.java linha: 161 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaDefaultDataTableEntryTransformerDefinition(method3, lookup))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDefaultDataTableEntryTransformerDefinitionTest.java linha: 181 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaDefaultDataTableEntryTransformerDefinition(method, lookup))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDefaultDataTableEntryTransformerDefinitionTest.java linha: 193 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaDefaultDataTableEntryTransformerDefinition(method, lookup))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDocStringTypeDefinitionTest.java linha: 61 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaDocStringTypeDefinition("", noArgs, lookup))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDocStringTypeDefinitionTest.java linha: 64 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaDocStringTypeDefinition("", twoArgs, lookup))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDocStringTypeDefinitionTest.java linha: 78 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaDocStringTypeDefinition("", method, lookup))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDocStringTypeDefinitionTest.java linha: 98 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaDocStringTypeDefinition("", voidMethod, lookup))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDocStringTypeDefinitionTest.java linha: 100 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaDocStringTypeDefinition("", voidObjectMethod, lookup))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaSnippetTest.java linha: 169 Método: assertThat(expected, snippetFor("the DI system receives a message saying \"{ dataIngestion: { feeds: [ feed: { merchantId: 666, feedId: 1, feedFileLocation: feed.csv } ] }\""), is(equalTo(expected)))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaParameterTypeDefinitionTest.java linha: 94 Método: assertThrows(CucumberExpressionException.class, () -> test.get(0).getValue())
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaParameterTypeDefinitionTest.java linha: 100 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaParameterTypeDefinition("", "(.*)", method, false, false, false, lookup))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaParameterTypeDefinitionTest.java linha: 127 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaParameterTypeDefinition("", "(.*)", method, false, false, false, lookup))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaParameterTypeDefinitionTest.java linha: 138 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaParameterTypeDefinition("", "(.*)", method, false, false, false, lookup))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaParameterTypeDefinitionTest.java linha: 150 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaParameterTypeDefinition("", "(.*)", method, false, false, false, lookup))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDefaultParameterTransformerDefinitionTest.java linha: 58 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaDefaultParameterTransformerDefinition(method, lookup))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDefaultParameterTransformerDefinitionTest.java linha: 73 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaDefaultParameterTransformerDefinition(oneArg, lookup))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDefaultParameterTransformerDefinitionTest.java linha: 77 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaDefaultParameterTransformerDefinition(threeArg, lookup))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDefaultParameterTransformerDefinitionTest.java linha: 93 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaDefaultParameterTransformerDefinition(threeArg, lookup))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDefaultParameterTransformerDefinitionTest.java linha: 105 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaDefaultParameterTransformerDefinition(threeArg, lookup))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDataTableTypeDefinitionTest.java linha: 151 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaDataTableTypeDefinition(method, lookup, new String[0]))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDataTableTypeDefinitionTest.java linha: 161 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaDataTableTypeDefinition(noArgs, lookup, new String[0]))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDataTableTypeDefinitionTest.java linha: 165 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaDataTableTypeDefinition(twoArgs, lookup, new String[0]))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDataTableTypeDefinitionTest.java linha: 180 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaDataTableTypeDefinition(method, lookup, new String[0]))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDataTableTypeDefinitionTest.java linha: 191 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaDataTableTypeDefinition(method, lookup, new String[0]))
Total asserts: 2165
Asserts sem descrição: 1769
Asserts com descrição: 354
Assertion Roulette: 1084
