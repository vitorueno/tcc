
Projeto: /home/vitor-otto/opensource/spring-batch-5.0.1

Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-samples/src/test/java/org/springframework/batch/sample/TradeJobFunctionalTests.java linha: 119 Método: assertEquals(customer.getCredit(), rs.getDouble(2), .01)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-samples/src/test/java/org/springframework/batch/sample/TaskletJobFunctionalTests.java linha: 58 Método: assertEquals(3.14, doubleValue, 0.01)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-samples/src/test/java/org/springframework/batch/sample/CustomerFilterJobFunctionalTests.java linha: 98 Método: assertEquals(customer.getCredit(), rs.getDouble(2), .01)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-samples/src/test/java/org/springframework/batch/sample/iosample/TwoJobInstancesPagingFunctionalTests.java linha: 69 Método: assertNotSame(first, second, "The number of records above the threshold did not change")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-samples/src/test/java/org/springframework/batch/sample/domain/trade/CompositeCustomerUpdateLineTokenizerTests.java linha: 78 Método: assertThrows(IllegalArgumentException.class, () -> compositeTokenizer.tokenize(invalidLine))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-samples/src/test/java/org/springframework/batch/sample/domain/trade/CustomerUpdateProcessorTests.java linha: 63 Método: assertNull(processor.process(customerUpdate), "Processor should return null")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-samples/src/test/java/org/springframework/batch/sample/domain/trade/CustomerUpdateProcessorTests.java linha: 70 Método: assertNull(processor.process(customerUpdate), "Processor should return null")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-samples/src/test/java/org/springframework/batch/sample/domain/trade/CustomerUpdateProcessorTests.java linha: 85 Método: assertNull(processor.process(customerUpdate), "Processor should return null")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-samples/src/test/java/org/springframework/batch/sample/domain/multiline/AggregateItemTests.java linha: 43 Método: assertThrows(IllegalStateException.class, () -> AggregateItem.getHeader().getItem())
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-samples/src/test/java/org/springframework/batch/sample/domain/multiline/AggregateItemTests.java linha: 48 Método: assertThrows(IllegalStateException.class, () -> AggregateItem.getFooter().getItem())
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-samples/src/test/java/org/springframework/batch/sample/domain/multiline/AggregateItemFieldSetMapperTests.java linha: 55 Método: assertThrows(IllegalStateException.class, mapper::afterPropertiesSet)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-samples/src/test/java/org/springframework/batch/sample/JobOperatorFunctionalTests.java linha: 95 Método: assertTrue(runningExecutions.contains(executionId), "Wrong executions: " + runningExecutions + " expected: " + executionId)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-samples/src/test/java/org/springframework/batch/sample/JobOperatorFunctionalTests.java linha: 97 Método: assertTrue(operator.getSummary(executionId).contains(BatchStatus.STARTED.toString()), "Wrong summary: " + operator.getSummary(executionId))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-samples/src/test/java/org/springframework/batch/sample/JobOperatorFunctionalTests.java linha: 110 Método: assertFalse(runningExecutions.contains(executionId), "Wrong executions: " + runningExecutions + " expected: " + executionId)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-samples/src/test/java/org/springframework/batch/sample/JobOperatorFunctionalTests.java linha: 112 Método: assertTrue(operator.getSummary(executionId).contains(BatchStatus.STOPPED.toString()), "Wrong summary: " + operator.getSummary(executionId))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-samples/src/test/java/org/springframework/batch/sample/JobOperatorFunctionalTests.java linha: 151 Método: assertTrue(running, String.format("Jobs not started: [%s] and [%s]", operator.getSummary(exec1), operator.getSummary(exec1)))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-samples/src/test/java/org/springframework/batch/sample/launch/RemoteLauncherTests.java linha: 71 Método: assertThrows(RuntimeException.class, () -> launcher.start("foo", properties))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-samples/src/test/java/org/springframework/batch/sample/launch/RemoteLauncherTests.java linha: 73 Método: assertTrue(message.contains("NoSuchJobException"), "Wrong message: " + message)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-samples/src/test/java/org/springframework/batch/sample/launch/RemoteLauncherTests.java linha: 102 Método: assertNotSame(executionId, resumedId, "Picked up the same execution after pause and resume")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-samples/src/test/java/org/springframework/batch/sample/launch/RemoteLauncherTests.java linha: 110 Método: assertNotSame(executionId, resumeId2, "Picked up the same execution after pause and resume")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-samples/src/test/java/org/springframework/batch/sample/support/RetrySampleItemWriterTests.java linha: 42 Método: assertThrows(RuntimeException.class, () -> processor.write(Chunk.of(item, item, item)))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-samples/src/test/java/org/springframework/batch/sample/support/ItemTrackingItemWriterTests.java linha: 54 Método: assertThrows(IOException.class, () -> writer.write(Chunk.of(a, b, c)))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-samples/src/test/java/org/springframework/batch/sample/jmx/JobExecutionNotificationPublisherTests.java linha: 53 Método: assertTrue(message.contains("foo"), "Message does not contain 'foo': ")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-samples/src/test/java/org/springframework/batch/sample/PartitionJdbcJobFunctionalTests.java linha: 67 Método: assertTrue(applicationContext.containsBeanDefinition("outputTestReader"), "Define a prototype bean called 'outputTestReader' to check the output")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-samples/src/test/java/org/springframework/batch/sample/PartitionJdbcJobFunctionalTests.java linha: 86 Método: assertTrue(itemCount > 0, "Input from reader has no entries.")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-samples/src/test/java/org/springframework/batch/sample/HeaderFooterSampleFunctionalTests.java linha: 61 Método: assertTrue("input line should correspond to output line", outputReader.readLine().contains(line))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-samples/src/test/java/org/springframework/batch/sample/HeaderFooterSampleFunctionalTests.java linha: 66 Método: assertTrue("OutputReader did not contain the values specified", outputReader.readLine().contains(String.valueOf(itemCount)))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-samples/src/test/java/org/springframework/batch/sample/PartitionFileJobFunctionalTests.java linha: 67 Método: assertTrue(applicationContext.containsBeanDefinition("outputTestReader"), "Define a prototype bean called 'outputTestReader' to check the output")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-samples/src/test/java/org/springframework/batch/sample/PartitionFileJobFunctionalTests.java linha: 86 Método: assertTrue(itemCount > 0, "No entries were available in the input")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-samples/src/test/java/org/springframework/batch/sample/DatabaseShutdownFunctionalTests.java linha: 77 Método: assertFalse(jobExecution.isRunning(), "Timed out waiting for job to end.")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-samples/src/test/java/org/springframework/batch/sample/GracefulShutdownFunctionalTests.java linha: 80 Método: assertFalse(jobExecution.isRunning(), "Timed out waiting for job to end.")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/async/AsyncItemWriterTests.java linha: 144 Método: assertThrows(RuntimeException.class, () -> writer.write(processedItems))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/async/AsyncItemWriterTests.java linha: 183 Método: assertThrows(Exception.class, () -> writer.write(processedItems))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/async/AsyncItemProcessorTests.java linha: 49 Método: assertThrows(IllegalStateException.class, processor::afterPropertiesSet)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/config/xml/RemoteChunkingParserTests.java linha: 68 Método: assertNotNull(chunkProcessor, "ChunkProcessor must not be null")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/config/xml/RemoteChunkingParserTests.java linha: 71 Método: assertNotNull(itemWriter, "ChunkProcessor ItemWriter must not be null")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/config/xml/RemoteChunkingParserTests.java linha: 72 Método: assertTrue(itemWriter instanceof Writer, "Got wrong instance of ItemWriter")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/config/xml/RemoteChunkingParserTests.java linha: 76 Método: assertNotNull(itemProcessor, "ChunkProcessor ItemWriter must not be null")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/config/xml/RemoteChunkingParserTests.java linha: 77 Método: assertTrue(itemProcessor instanceof Processor, "Got wrong instance of ItemProcessor")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/config/xml/RemoteChunkingParserTests.java linha: 80 Método: assertNotNull(serviceActivatorFactoryBean, "ServiceActivatorFactoryBean must not be null")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/config/xml/RemoteChunkingParserTests.java linha: 81 Método: assertNotNull(TestUtils.getPropertyValue(serviceActivatorFactoryBean, "outputChannelName"), "Output channel name must not be null")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/config/xml/RemoteChunkingParserTests.java linha: 85 Método: assertNotNull(inputChannel, "Input channel must not be null")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/config/xml/RemoteChunkingParserTests.java linha: 88 Método: assertNotNull(targetMethodName, "Target method name must not be null")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/config/xml/RemoteChunkingParserTests.java linha: 89 Método: assertEquals("handleChunk", targetMethodName, "Target method name must be handleChunk, got: " + targetMethodName)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/config/xml/RemoteChunkingParserTests.java linha: 94 Método: assertNotNull(targetObject, "Target object must not be null")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/config/xml/RemoteChunkingParserTests.java linha: 106 Método: assertNotNull(chunkProcessor, "ChunkProcessor must not be null")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/config/xml/RemoteChunkingParserTests.java linha: 110 Método: assertNotNull(itemProcessor, "ChunkProcessor ItemWriter must not be null")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/config/xml/RemoteChunkingParserTests.java linha: 111 Método: assertTrue(itemProcessor instanceof PassThroughItemProcessor, "Got wrong instance of ItemProcessor")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/config/xml/RemoteChunkingParserTests.java linha: 121 Método: assertNotNull(TestUtils.getPropertyValue(itemWriter, "messagingGateway"), "Messaging template must not be null")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/config/xml/RemoteChunkingParserTests.java linha: 123 Método: assertNotNull(TestUtils.getPropertyValue(itemWriter, "replyChannel"), "Reply channel must not be null")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/config/xml/RemoteChunkingParserTests.java linha: 127 Método: assertNotNull(TestUtils.getPropertyValue(remoteChunkingHandlerFactoryBean, "chunkWriter"), "Chunk writer must not be null")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/config/xml/RemoteChunkingParserTests.java linha: 129 Método: assertNotNull(TestUtils.getPropertyValue(remoteChunkingHandlerFactoryBean, "step"), "Step must not be null")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/config/xml/RemoteChunkingParserTests.java linha: 139 Método: assertThrows(BeanDefinitionStoreException.class, applicationContext::refresh)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/config/xml/RemoteChunkingParserTests.java linha: 140 Método: assertTrue(exception.getCause() instanceof IllegalArgumentException, "Nested exception must be of type IllegalArgumentException")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/config/xml/RemoteChunkingParserTests.java linha: 154 Método: assertThrows(BeanDefinitionStoreException.class, applicationContext::refresh)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/config/xml/RemoteChunkingParserTests.java linha: 155 Método: assertTrue(exception.getCause() instanceof IllegalArgumentException, "Nested exception must be of type IllegalArgumentException")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/config/xml/RemoteChunkingParserTests.java linha: 169 Método: assertThrows(BeanDefinitionStoreException.class, applicationContext::refresh)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/config/xml/RemoteChunkingParserTests.java linha: 170 Método: assertTrue(exception.getCause() instanceof IllegalArgumentException, "Nested exception must be of type IllegalArgumentException")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/config/xml/RemoteChunkingParserTests.java linha: 184 Método: assertThrows(BeanDefinitionStoreException.class, applicationContext::refresh)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/config/xml/RemoteChunkingParserTests.java linha: 185 Método: assertTrue(exception.getCause() instanceof IllegalArgumentException, "Nested exception must be of type IllegalArgumentException")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/config/xml/RemoteChunkingParserTests.java linha: 199 Método: assertThrows(BeanDefinitionStoreException.class, applicationContext::refresh)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/config/xml/RemoteChunkingParserTests.java linha: 200 Método: assertTrue(exception.getCause() instanceof IllegalArgumentException, "Nested exception must be of type IllegalArgumentException")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/config/xml/RemoteChunkingParserTests.java linha: 214 Método: assertThrows(BeanDefinitionStoreException.class, applicationContext::refresh)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/config/xml/RemoteChunkingParserTests.java linha: 215 Método: assertTrue(exception.getCause() instanceof IllegalArgumentException, "Nested exception must be of type IllegalArgumentException")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/config/xml/RemoteChunkingParserTests.java linha: 229 Método: assertThrows(BeanDefinitionStoreException.class, applicationContext::refresh)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/config/xml/RemoteChunkingParserTests.java linha: 230 Método: assertTrue(exception.getCause() instanceof IllegalArgumentException, "Nested exception must be of type IllegalArgumentException")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/config/xml/RemoteChunkingParserTests.java linha: 244 Método: assertThrows(BeanDefinitionStoreException.class, applicationContext::refresh)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/config/xml/RemoteChunkingParserTests.java linha: 245 Método: assertTrue(exception.getCause() instanceof IllegalArgumentException, "Nested exception must be of type IllegalArgumentException")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/config/xml/JobLaunchingGatewayParserTests.java linha: 62 Método: assertEquals(123L, sendTimeout, "Wrong sendTimeout")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/config/xml/JobLaunchingGatewayParserTests.java linha: 75 Método: assertEquals(-1L, sendTimeout, "Wrong sendTimeout")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/config/xml/JobLaunchingGatewayParserTests.java linha: 80 Método: assertThrows(BeanCreationException.class, () -> setUp("JobLaunchingGatewayParserTestsNoJobLauncher-context.xml", getClass()))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/chunk/RemoteChunkingManagerStepBuilderTests.java linha: 98 Método: assertThrows(IllegalArgumentException.class, () -> new RemoteChunkingManagerStepBuilder<String, String>("step", this.jobRepository).inputChannel(null).build())
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/chunk/RemoteChunkingManagerStepBuilderTests.java linha: 109 Método: assertThrows(IllegalArgumentException.class, () -> new RemoteChunkingManagerStepBuilder<String, String>("step", this.jobRepository).outputChannel(null).build())
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/chunk/RemoteChunkingManagerStepBuilderTests.java linha: 120 Método: assertThrows(IllegalArgumentException.class, () -> new RemoteChunkingManagerStepBuilder<String, String>("step", this.jobRepository).messagingTemplate(null).build())
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/chunk/RemoteChunkingManagerStepBuilderTests.java linha: 131 Método: assertThrows(IllegalArgumentException.class, () -> new RemoteChunkingManagerStepBuilder<String, String>("step", this.jobRepository).maxWaitTimeouts(-1).build())
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/chunk/RemoteChunkingManagerStepBuilderTests.java linha: 142 Método: assertThrows(IllegalArgumentException.class, () -> new RemoteChunkingManagerStepBuilder<String, String>("step", this.jobRepository).throttleLimit(-1L).build())
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/chunk/RemoteChunkingManagerStepBuilderTests.java linha: 157 Método: assertThrows(IllegalArgumentException.class, builder::build)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/chunk/RemoteChunkingManagerStepBuilderTests.java linha: 171 Método: assertThrows(IllegalStateException.class, builder::build)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/chunk/RemoteChunkingManagerStepBuilderTests.java linha: 181 Método: assertThrows(UnsupportedOperationException.class, () -> new RemoteChunkingManagerStepBuilder<String, String>("step", this.jobRepository).reader(this.itemReader).writer(items -> {
}).repository(this.jobRepository).transactionManager(this.transactionManager).inputChannel(this.inputChannel).outputChannel(this.outputChannel).build())
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/chunk/ChunkMessageItemWriterIntegrationTests.java linha: 199 Método: assertTrue(message.contains("wrong job"), "Message does not contain 'wrong job': " + message)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/chunk/ChunkMessageItemWriterIntegrationTests.java linha: 231 Método: assertTrue(message.contains("fail"), "Message does not contain 'fail': " + message)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/chunk/ChunkMessageItemWriterIntegrationTests.java linha: 269 Método: assertTrue(message.toLowerCase().contains("timed out"), "Message did not contain 'timed out': " + message)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/chunk/ChunkMessageItemWriterIntegrationTests.java linha: 302 Método: assertTrue(exitDescription.contains(AsynchronousFailureException.class.getName()), "Exit description does not contain exception type name: " + exitDescription)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/chunk/RemoteChunkingWorkerBuilderTests.java linha: 43 Método: assertThrows(IllegalArgumentException.class, () -> new RemoteChunkingWorkerBuilder<String, String>().itemProcessor(null).build())
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/chunk/RemoteChunkingWorkerBuilderTests.java linha: 53 Método: assertThrows(IllegalArgumentException.class, () -> new RemoteChunkingWorkerBuilder<String, String>().itemWriter(null).build())
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/chunk/RemoteChunkingWorkerBuilderTests.java linha: 63 Método: assertThrows(IllegalArgumentException.class, () -> new RemoteChunkingWorkerBuilder<String, String>().inputChannel(null).build())
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/chunk/RemoteChunkingWorkerBuilderTests.java linha: 73 Método: assertThrows(IllegalArgumentException.class, () -> new RemoteChunkingWorkerBuilder<String, String>().outputChannel(null).build())
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/chunk/RemoteChunkingWorkerBuilderTests.java linha: 86 Método: assertThrows(IllegalArgumentException.class, builder::build)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/chunk/RemoteChunkingWorkerBuilderTests.java linha: 100 Método: assertThrows(IllegalArgumentException.class, builder::build)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/chunk/RemoteChunkingWorkerBuilderTests.java linha: 114 Método: assertThrows(IllegalArgumentException.class, builder::build)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/chunk/MessageSourcePollerInterceptorTests.java linha: 33 Método: assertThrows(IllegalStateException.class, interceptor::afterPropertiesSet)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/partition/JmsIntegrationTests.java linha: 68 Método: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), jobExecution.getExitStatus().getExitDescription())
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/partition/RemotePartitioningManagerStepBuilderTests.java linha: 63 Método: assertThrows(IllegalArgumentException.class, () -> builder.inputChannel(null))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/partition/RemotePartitioningManagerStepBuilderTests.java linha: 77 Método: assertThrows(IllegalArgumentException.class, () -> builder.outputChannel(null))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/partition/RemotePartitioningManagerStepBuilderTests.java linha: 91 Método: assertThrows(IllegalArgumentException.class, () -> builder.messagingTemplate(null))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/partition/RemotePartitioningManagerStepBuilderTests.java linha: 105 Método: assertThrows(IllegalArgumentException.class, () -> builder.jobExplorer(null))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/partition/RemotePartitioningManagerStepBuilderTests.java linha: 119 Método: assertThrows(IllegalArgumentException.class, () -> builder.pollInterval(-1))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/partition/RemotePartitioningManagerStepBuilderTests.java linha: 133 Método: assertThrows(IllegalStateException.class, builder::build)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/partition/RemotePartitioningManagerStepBuilderTests.java linha: 148 Método: assertThrows(UnsupportedOperationException.class, () -> builder.partitionHandler(partitionHandler))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/partition/ExampleItemReaderTests.java linha: 67 Método: assertThrows(Exception.class, reader::read)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/partition/MessageChannelPartitionHandlerTests.java linha: 150 Método: assertThrows(MessageTimeoutException.class, () -> messageChannelPartitionHandler.handle(stepExecutionSplitter, managerStepExecution))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/partition/MessageChannelPartitionHandlerTests.java linha: 240 Método: assertThrows(TimeoutException.class, () -> messageChannelPartitionHandler.handle(stepExecutionSplitter, managerStepExecution))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/partition/RemotePartitioningWorkerStepBuilderTests.java linha: 51 Método: assertThrows(IllegalArgumentException.class, () -> builder.inputChannel(null))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/partition/RemotePartitioningWorkerStepBuilderTests.java linha: 65 Método: assertThrows(IllegalArgumentException.class, () -> builder.outputChannel(null))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/partition/RemotePartitioningWorkerStepBuilderTests.java linha: 79 Método: assertThrows(IllegalArgumentException.class, () -> builder.jobExplorer(null))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/partition/RemotePartitioningWorkerStepBuilderTests.java linha: 93 Método: assertThrows(IllegalArgumentException.class, () -> builder.stepLocator(null))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/partition/RemotePartitioningWorkerStepBuilderTests.java linha: 107 Método: assertThrows(IllegalArgumentException.class, () -> builder.beanFactory(null))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/partition/RemotePartitioningWorkerStepBuilderTests.java linha: 121 Método: assertThrows(IllegalArgumentException.class, () -> builder.tasklet(this.tasklet, this.transactionManager))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/partition/RemotePartitioningWorkerStepBuilderTests.java linha: 136 Método: assertThrows(IllegalArgumentException.class, () -> builder.tasklet(this.tasklet, this.transactionManager))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/launch/JobLaunchingMessageHandlerTests.java linha: 51 Método: assertEquals(1, jobLauncher.jobs.size(), "Wrong job count")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/launch/JobLaunchingMessageHandlerTests.java linha: 52 Método: assertEquals("testjob", jobLauncher.jobs.get(0).getName(), "Wrong job name")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/launch/JobLaunchingGatewayTests.java linha: 52 Método: assertThrows(MessageHandlingException.class, () -> jobLaunchingGateway.handleMessage(message))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/launch/JobLaunchingMessageHandlerIntegrationTests.java linha: 69 Método: assertThrows(MessagingException.class, () -> requestChannel.send(trigger))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/launch/JobLaunchingMessageHandlerIntegrationTests.java linha: 71 Método: assertTrue(message.contains("replyChannel"), "Wrong message: " + message)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/launch/JobLaunchingMessageHandlerIntegrationTests.java linha: 74 Método: assertNull(executionMessage, "JobExecution message received when no return address set")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/launch/JobLaunchingMessageHandlerIntegrationTests.java linha: 91 Método: assertNotNull(executionMessage, "No response received")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/launch/JobLaunchingMessageHandlerIntegrationTests.java linha: 93 Método: assertNotNull(execution, "JobExecution not returned")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/launch/JobLaunchingGatewayIntegrationTests.java linha: 86 Método: assertThrows(MessagingException.class, () -> requestChannel.send(trigger))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/launch/JobLaunchingGatewayIntegrationTests.java linha: 88 Método: assertTrue(message.contains("replyChannel"), "Wrong message: " + message)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/launch/JobLaunchingGatewayIntegrationTests.java linha: 91 Método: assertNull(executionMessage, "JobExecution message received when no return address set")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/launch/JobLaunchingGatewayIntegrationTests.java linha: 108 Método: assertNotNull(executionMessage, "No response received")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/launch/JobLaunchingGatewayIntegrationTests.java linha: 110 Método: assertNotNull(execution, "JobExecution not returned")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/launch/JobLaunchingGatewayIntegrationTests.java linha: 119 Método: assertThrows(MessageHandlingException.class, () -> requestChannel.send(stringMessage))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/launch/JobLaunchingGatewayIntegrationTests.java linha: 121 Método: assertTrue(message.contains("The payload must be of type JobLaunchRequest."), "Wrong message: " + message)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/launch/JobLaunchingGatewayIntegrationTests.java linha: 124 Método: assertNull(executionMessage, "JobExecution message received when no return address set")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/launch/JobLaunchingGatewayIntegrationTests.java linha: 145 Método: assertNotNull(executionMessage, "No response received")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-integration/src/test/java/org/springframework/batch/integration/launch/JobLaunchingGatewayIntegrationTests.java linha: 148 Método: assertNotNull(execution, "JobExecution not returned")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/ExecutionContextTests.java linha: 50 Método: assertEquals(4.4, context.getDouble("4"), 0)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/ExecutionContextTests.java linha: 51 Método: assertEquals(5.5, context.getDouble("55", 5.5), 0)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/ExecutionContextTests.java linha: 61 Método: assertThrows(ClassCastException.class, () -> context.getDouble("1"))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/validator/ValidatingItemProcessorTests.java linha: 51 Método: assertThrows(ValidationException.class, () -> processFailedValidation(tested))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/validator/SpringValidatorTests.java linha: 47 Método: assertThrows(IllegalStateException.class, validator::afterPropertiesSet)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/validator/SpringValidatorTests.java linha: 55 Método: assertThrows(ValidationException.class, () -> validator.validate(1))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/validator/SpringValidatorTests.java linha: 72 Método: assertThrows(ValidationException.class, () -> validator.validate(MockSpringValidator.REJECT_VALUE))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/validator/SpringValidatorTests.java linha: 80 Método: assertThrows(ValidationException.class, () -> validator.validate(MockSpringValidator.REJECT_VALUE))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/validator/SpringValidatorTests.java linha: 90 Método: assertThrows(ValidationException.class, () -> validator.validate(MockSpringValidator.REJECT_MULTI_VALUE))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/validator/SpringValidatorTests.java linha: 93 Método: assertTrue(message.contains("TestBeanToString"), "message should contain the item#toString() value")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/validator/SpringValidatorTests.java linha: 94 Método: assertTrue(message.contains("foo"), "message should contain names of the invalid fields")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/validator/SpringValidatorTests.java linha: 95 Método: assertTrue(message.contains("bar"), "message should contain names of the invalid fields")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/validator/BeanValidatingItemProcessorTests.java linha: 53 Método: assertThrows(ValidationException.class, () -> validatingItemProcessor.process(foo))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/kafka/KafkaItemWriterTests.java linha: 72 Método: assertThrows(IllegalStateException.class, () -> this.writer.afterPropertiesSet())
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/kafka/KafkaItemWriterTests.java linha: 76 Método: assertThrows(IllegalStateException.class, () -> this.writer.afterPropertiesSet())
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/kafka/builder/KafkaItemWriterBuilderTests.java linha: 58 Método: assertThrows(IllegalArgumentException.class, builder::build)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/kafka/builder/KafkaItemWriterBuilderTests.java linha: 71 Método: assertThrows(IllegalArgumentException.class, builder::build)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/kafka/builder/KafkaItemReaderBuilderTests.java linha: 67 Método: assertThrows(IllegalArgumentException.class, builder::build)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/kafka/builder/KafkaItemReaderBuilderTests.java linha: 76 Método: assertThrows(IllegalArgumentException.class, builder::build)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/kafka/builder/KafkaItemReaderBuilderTests.java linha: 82 Método: assertThrows(IllegalArgumentException.class, builder::build)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/kafka/builder/KafkaItemReaderBuilderTests.java linha: 87 Método: assertThrows(IllegalArgumentException.class, builder::build)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/kafka/builder/KafkaItemReaderBuilderTests.java linha: 92 Método: assertThrows(IllegalArgumentException.class, builder::build)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/kafka/builder/KafkaItemReaderBuilderTests.java linha: 107 Método: assertThrows(IllegalArgumentException.class, builder::build)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/kafka/builder/KafkaItemReaderBuilderTests.java linha: 120 Método: assertThrows(IllegalArgumentException.class, builder::build)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/kafka/builder/KafkaItemReaderBuilderTests.java linha: 133 Método: assertThrows(IllegalArgumentException.class, builder::build)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/kafka/builder/KafkaItemReaderBuilderTests.java linha: 146 Método: assertThrows(IllegalArgumentException.class, builder::build)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/kafka/builder/KafkaItemReaderBuilderTests.java linha: 159 Método: assertThrows(IllegalArgumentException.class, builder::build)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/kafka/builder/KafkaItemReaderBuilderTests.java linha: 172 Método: assertThrows(IllegalArgumentException.class, builder::build)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/kafka/KafkaItemReaderTests.java linha: 97 Método: assertThrows(IllegalArgumentException.class, () -> new KafkaItemReader<>(null, "topic", 0))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/kafka/KafkaItemReaderTests.java linha: 101 Método: assertThrows(IllegalArgumentException.class, () -> new KafkaItemReader<>(new Properties(), "topic", 0))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/kafka/KafkaItemReaderTests.java linha: 107 Método: assertThrows(IllegalArgumentException.class, () -> new KafkaItemReader<>(consumerProperties, "topic", 0))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/kafka/KafkaItemReaderTests.java linha: 112 Método: assertThrows(IllegalArgumentException.class, () -> new KafkaItemReader<>(consumerProperties, "topic", 0))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/kafka/KafkaItemReaderTests.java linha: 117 Método: assertThrows(IllegalArgumentException.class, () -> new KafkaItemReader<>(consumerProperties, "topic", 0))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/kafka/KafkaItemReaderTests.java linha: 122 Método: assertThrows(IllegalArgumentException.class, () -> new KafkaItemReader<>(consumerProperties, "", 0))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/kafka/KafkaItemReaderTests.java linha: 126 Método: assertThrows(Exception.class, () -> new KafkaItemReader<>(consumerProperties, "topic"))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/kafka/KafkaItemReaderTests.java linha: 131 Método: assertThrows(IllegalArgumentException.class, () -> this.reader.setPollTimeout(null))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/kafka/KafkaItemReaderTests.java linha: 134 Método: assertThrows(IllegalArgumentException.class, () -> this.reader.setPollTimeout(Duration.ZERO))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/kafka/KafkaItemReaderTests.java linha: 137 Método: assertThrows(IllegalArgumentException.class, () -> this.reader.setPollTimeout(Duration.ofSeconds(-1)))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/MongoItemReaderTests.java linha: 75 Método: assertThrows(IllegalStateException.class, reader::afterPropertiesSet)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/MongoItemReaderTests.java linha: 80 Método: assertThrows(IllegalStateException.class, reader::afterPropertiesSet)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/MongoItemReaderTests.java linha: 85 Método: assertThrows(IllegalStateException.class, reader::afterPropertiesSet)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/MongoItemReaderTests.java linha: 90 Método: assertThrows(IllegalStateException.class, reader::afterPropertiesSet)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/Neo4jItemWriterTests.java linha: 53 Método: assertThrows(IllegalStateException.class, writer::afterPropertiesSet)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/MongoItemWriterTests.java linha: 101 Método: assertThrows(IllegalStateException.class, writer::afterPropertiesSet)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/MongoItemWriterTests.java linha: 171 Método: assertThrows(RuntimeException.class, () -> new TransactionTemplate(transactionManager).execute((TransactionCallback<Void>) status -> {
    assertDoesNotThrow(() -> writer.write(items));
    throw new RuntimeException("force rollback");
}))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/Neo4jItemReaderTests.java linha: 71 Método: assertThrows(IllegalStateException.class, reader::afterPropertiesSet)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/Neo4jItemReaderTests.java linha: 76 Método: assertThrows(IllegalStateException.class, reader::afterPropertiesSet)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/Neo4jItemReaderTests.java linha: 81 Método: assertThrows(IllegalStateException.class, reader::afterPropertiesSet)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/Neo4jItemReaderTests.java linha: 86 Método: assertThrows(IllegalStateException.class, reader::afterPropertiesSet)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/Neo4jItemReaderTests.java linha: 91 Método: assertThrows(IllegalStateException.class, reader::afterPropertiesSet)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/RepositoryItemReaderTests.java linha: 76 Método: assertThrows(IllegalStateException.class, reader::afterPropertiesSet)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/RepositoryItemReaderTests.java linha: 80 Método: assertThrows(IllegalStateException.class, reader::afterPropertiesSet)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/RepositoryItemReaderTests.java linha: 85 Método: assertThrows(IllegalStateException.class, reader::afterPropertiesSet)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/RepositoryItemReaderTests.java linha: 90 Método: assertThrows(IllegalStateException.class, reader::afterPropertiesSet)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/RepositoryItemReaderTests.java linha: 96 Método: assertThrows(IllegalStateException.class, reader::afterPropertiesSet)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/RepositoryItemReaderTests.java linha: 185 Método: assertSame(objectList.get(85), o, "Fetched object should be at index 85 in the current page")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/RepositoryItemReaderTests.java linha: 204 Método: assertSame(objectList.get(0), reader.doRead(), "Fetched object should be the first one in the current page")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/RepositoryItemReaderTests.java linha: 224 Método: assertThrows(DynamicMethodInvocationException.class, reader::doPageRead)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/RepositoryItemWriterTests.java linha: 58 Método: assertThrows(IllegalStateException.class, writer::afterPropertiesSet)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/RepositoryItemWriterTests.java linha: 63 Método: assertThrows(IllegalStateException.class, writer::afterPropertiesSet)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/builder/RepositoryItemReaderBuilderTests.java linha: 85 Método: assertEquals(TEST_CONTENT, result, "Result returned from reader was not expected value.")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/builder/RepositoryItemReaderBuilderTests.java linha: 86 Método: assertEquals(10, this.pageRequestContainer.getValue().getPageSize(), "page size was not expected value.")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/builder/RepositoryItemReaderBuilderTests.java linha: 93 Método: assertNull(reader.read(), "Result returned from reader was not null.")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/builder/RepositoryItemReaderBuilderTests.java linha: 101 Método: assertEquals(2, this.pageRequestContainer.getValue().getPageSize(), "page size was not expected value.")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/builder/RepositoryItemReaderBuilderTests.java linha: 108 Método: assertThrows(IllegalArgumentException.class, builder::build)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/builder/RepositoryItemReaderBuilderTests.java linha: 113 Método: assertThrows(IllegalArgumentException.class, builder::build)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/builder/RepositoryItemReaderBuilderTests.java linha: 121 Método: assertThrows(IllegalStateException.class, builder::build)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/builder/RepositoryItemReaderBuilderTests.java linha: 133 Método: assertThrows(IllegalArgumentException.class, builder::build)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/builder/RepositoryItemReaderBuilderTests.java linha: 140 Método: assertThrows(IllegalArgumentException.class, builder::build)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/builder/RepositoryItemReaderBuilderTests.java linha: 147 Método: assertThrows(IllegalArgumentException.class, builder::build)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/builder/RepositoryItemReaderBuilderTests.java linha: 195 Método: assertEquals(TEST_CONTENT, result, "Result returned from reader was not expected value.")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/builder/RepositoryItemReaderBuilderTests.java linha: 196 Método: assertEquals(ARG1, arg1Captor.getValue(), "ARG1 for calling method did not match expected result")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/builder/RepositoryItemReaderBuilderTests.java linha: 197 Método: assertEquals(ARG2, arg2Captor.getValue(), "ARG2 for calling method did not match expected result")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/builder/RepositoryItemReaderBuilderTests.java linha: 198 Método: assertEquals(ARG3, arg3Captor.getValue(), "ARG3 for calling method did not match expected result")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/builder/RepositoryItemReaderBuilderTests.java linha: 199 Método: assertEquals(10, this.pageRequestContainer.getValue().getPageSize(), "Result Total Pages did not match expected result")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/builder/RepositoryItemWriterBuilderTests.java linha: 49 Método: assertThrows(IllegalArgumentException.class, builder::build)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/builder/RepositoryItemWriterBuilderTests.java linha: 56 Método: assertThrows(IllegalArgumentException.class, builder::build)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/builder/MongoItemWriterBuilderTests.java linha: 128 Método: assertThrows(IllegalArgumentException.class, () -> new MongoItemWriterBuilder<>().build())
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/builder/Neo4jItemWriterBuilderTests.java linha: 88 Método: assertThrows(IllegalArgumentException.class, () -> new Neo4jItemWriterBuilder<String>().build())
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/builder/Neo4jItemReaderBuilderTests.java linha: 65 Método: assertEquals("foo", itemReader.read(), "The expected value was not returned by reader.")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/builder/Neo4jItemReaderBuilderTests.java linha: 66 Método: assertEquals("bar", itemReader.read(), "The expected value was not returned by reader.")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/builder/Neo4jItemReaderBuilderTests.java linha: 67 Método: assertEquals("baz", itemReader.read(), "The expected value was not returned by reader.")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/builder/Neo4jItemReaderBuilderTests.java linha: 81 Método: assertEquals("foo", itemReader.read(), "The expected value was not returned by reader.")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/builder/Neo4jItemReaderBuilderTests.java linha: 82 Método: assertNull(itemReader.read(), "The expected value was not should be null.")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/builder/Neo4jItemReaderBuilderTests.java linha: 100 Método: assertEquals("foo", itemReader.read(), "The expected value was not returned by reader.")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/builder/Neo4jItemReaderBuilderTests.java linha: 107 Método: assertThrows(IllegalArgumentException.class, builder::build)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/builder/Neo4jItemReaderBuilderTests.java linha: 186 Método: assertThrows(IllegalArgumentException.class, builder::build)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/builder/MongoItemReaderBuilderTests.java linha: 73 Método: assertNull(reader.read(), "reader should not return result")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/builder/MongoItemReaderBuilderTests.java linha: 88 Método: assertNull(reader.read(), "reader should not return result")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/builder/MongoItemReaderBuilderTests.java linha: 102 Método: assertNull(reader.read(), "reader should not return result")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/builder/MongoItemReaderBuilderTests.java linha: 118 Método: assertNull(reader.read(), "reader should not return result")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/builder/MongoItemReaderBuilderTests.java linha: 136 Método: assertNull(reader.read(), "reader should not return result")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/builder/MongoItemReaderBuilderTests.java linha: 152 Método: assertNull(reader.read(), "reader should not return result")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/builder/MongoItemReaderBuilderTests.java linha: 165 Método: assertNull(reader.read(), "reader should not return result")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/builder/MongoItemReaderBuilderTests.java linha: 211 Método: assertThrows(RuntimeException.class, builder::build)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/adapter/AbstractDelegatorTests.java linha: 121 Método: assertThrows(IllegalStateException.class, delegator::afterPropertiesSet)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/adapter/AbstractDelegatorTests.java linha: 122 Método: assertThrows(IllegalArgumentException.class, delegator::invokeDelegateMethod)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/adapter/AbstractDelegatorTests.java linha: 132 Método: assertThrows(IllegalArgumentException.class, () -> delegator.invokeDelegateMethodWithArgument(new Object()))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/adapter/AbstractDelegatorTests.java linha: 142 Método: assertThrows(IllegalArgumentException.class, delegator::invokeDelegateMethod)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/adapter/AbstractDelegatorTests.java linha: 162 Método: assertThrows(IllegalStateException.class, delegator::afterPropertiesSet)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/adapter/AbstractDelegatorTests.java linha: 166 Método: assertThrows(IllegalStateException.class, delegator::afterPropertiesSet)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/adapter/AbstractDelegatorTests.java linha: 177 Método: assertThrows(Exception.class, delegator::invokeDelegateMethod)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/adapter/AbstractDelegatorTests.java linha: 189 Método: assertThrows(InvocationTargetThrowableWrapper.class, delegator::invokeDelegateMethod)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/function/FunctionItemProcessorTests.java linha: 36 Método: assertThrows(IllegalArgumentException.class, () -> new FunctionItemProcessor<>(null))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/json/JsonFileItemWriterFunctionalTests.java linha: 283 Método: assertThrows(IllegalArgumentException.class, () -> writer.write(Chunk.of(this.trade1)))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/json/JsonFileItemWriterFunctionalTests.java linha: 315 Método: JSONAssert.assertEquals(getContent(expected), getContent(actual), false)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/json/JsonItemReaderTests.java linha: 50 Método: assertThrows(IllegalArgumentException.class, () -> new JsonItemReader<>(null, this.jsonObjectReader))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/json/JsonItemReaderTests.java linha: 54 Método: assertThrows(IllegalArgumentException.class, () -> new JsonItemReader<>(new ByteArrayResource("[{}]".getBytes()), null))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/json/JsonItemReaderTests.java linha: 65 Método: assertThrows(ItemStreamException.class, () -> this.itemReader.open(new ExecutionContext()))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/json/JsonItemReaderTests.java linha: 79 Método: assertThrows(ItemStreamException.class, () -> this.itemReader.open(new ExecutionContext()))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/json/JsonFileItemWriterTests.java linha: 56 Método: assertThrows(IllegalArgumentException.class, () -> new JsonFileItemWriter<>(null, this.jsonObjectMarshaller))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/json/JsonFileItemWriterTests.java linha: 61 Método: assertThrows(IllegalArgumentException.class, () -> new JsonFileItemWriter<>(this.resource, null))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/json/JsonItemReaderFunctionalTests.java linha: 104 Método: assertThrows(ItemStreamException.class, () -> itemReader.open(new ExecutionContext()))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/json/JsonItemReaderFunctionalTests.java linha: 120 Método: assertThrows(ParseException.class, itemReader::read)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/json/builder/JsonFileItemWriterBuilderTests.java linha: 59 Método: assertThrows(IllegalArgumentException.class, builder::build)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/json/builder/JsonFileItemWriterBuilderTests.java linha: 65 Método: assertThrows(IllegalArgumentException.class, builder::build)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/json/builder/JsonFileItemWriterBuilderTests.java linha: 72 Método: assertThrows(IllegalArgumentException.class, builder::build)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/json/builder/JsonItemReaderBuilderTests.java linha: 46 Método: assertThrows(IllegalArgumentException.class, () -> new JsonItemReaderBuilder<String>().build())
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/json/builder/JsonItemReaderBuilderTests.java linha: 50 Método: assertThrows(IllegalStateException.class, () -> new JsonItemReaderBuilder<String>().jsonObjectReader(this.jsonObjectReader).build())
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/xml/Jaxb2NamespaceMarshallingTests.java linha: 136 Método: assertTrue(content.contains("<customer>bar</customer>"), "Wrong content: " + content)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/xml/stax/UnopenedElementClosingEventWriterTests.java linha: 130 Método: assertThrows(XMLStreamException.class, () -> writer.add(endElementB))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/xml/stax/DefaultFragmentEventReaderTests.java linha: 95 Método: assertThrows(NoSuchElementException.class, fragmentReader::nextEvent)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/xml/StaxEventItemReaderTests.java linha: 119 Método: assertThrows(IllegalStateException.class, source::afterPropertiesSet)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/xml/StaxEventItemReaderTests.java linha: 123 Método: assertThrows(IllegalStateException.class, source::afterPropertiesSet)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/xml/StaxEventItemReaderTests.java linha: 228 Método: assertThrows(NonTransientResourceException.class, source::read)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/xml/StaxEventItemReaderTests.java linha: 472 Método: assertThrows(Exception.class, newSource::read)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/xml/StaxEventItemReaderTests.java linha: 495 Método: assertThrows(ItemStreamException.class, () -> source.open(executionContext))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/xml/StaxEventItemReaderTests.java linha: 548 Método: assertThrows(ItemStreamException.class, () -> source.open(executionContext))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/xml/StaxEventItemReaderTests.java linha: 563 Método: assertThrows(UnmarshallingFailureException.class, source::read)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/xml/StaxEventItemReaderTests.java linha: 566 Método: assertThrows(UnmarshallingFailureException.class, source::read)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/xml/StaxEventItemReaderTests.java linha: 597 Método: assertThrows(Exception.class, reader::read)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/xml/TransactionalStaxEventItemWriterTests.java linha: 104 Método: assertTrue(content.contains(TEST_STRING), "Wrong content: " + content)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/xml/TransactionalStaxEventItemWriterTests.java linha: 129 Método: assertThrows(RuntimeException.class, () -> new TransactionTemplate(transactionManager).execute((TransactionCallback<Void>) status -> {
    try {
        writer.write(items);
    } catch (Exception e) {
        throw new RuntimeException(e);
    }
    throw new RuntimeException("Planned");
}))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/xml/TransactionalStaxEventItemWriterTests.java linha: 155 Método: assertEquals(1, StringUtils.countOccurrencesOf(content, ("<header/>")), "Wrong content: " + content)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/xml/TransactionalStaxEventItemWriterTests.java linha: 156 Método: assertEquals(1, StringUtils.countOccurrencesOf(content, TEST_STRING), "Wrong content: " + content)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/xml/TransactionalStaxEventItemWriterTests.java linha: 196 Método: assertThrows(RuntimeException.class, () -> new TransactionTemplate(transactionManager).execute((TransactionCallback<Void>) status -> {
    try {
        writer.write(items);
    } catch (Exception e) {
        throw new RuntimeException(e);
    }
    throw new RuntimeException("Planned");
}))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/xml/TransactionalStaxEventItemWriterTests.java linha: 208 Método: assertEquals(1, StringUtils.countOccurrencesOf(content, ("<header/>")), "Wrong content: " + content)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/xml/TransactionalStaxEventItemWriterTests.java linha: 209 Método: assertEquals(1, StringUtils.countOccurrencesOf(content, TEST_STRING), "Wrong content: " + content)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/xml/builder/StaxEventItemReaderBuilderTests.java linha: 59 Método: assertThrows(IllegalStateException.class, () -> new StaxEventItemReaderBuilder<Foo>().resource(this.resource).build())
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/xml/builder/StaxEventItemReaderBuilderTests.java linha: 63 Método: assertThrows(IllegalArgumentException.class, () -> new StaxEventItemReaderBuilder<Foo>().resource(this.resource).saveState(false).build())
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/xml/builder/StaxEventItemReaderBuilderTests.java linha: 144 Método: assertThrows(ItemStreamException.class, () -> reader.open(executionContext))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/xml/builder/StaxEventItemWriterBuilderTests.java linha: 91 Método: assertThrows(ItemStreamException.class, () -> staxEventItemWriter.open(new ExecutionContext()))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/xml/builder/StaxEventItemWriterBuilderTests.java linha: 171 Método: assertThrows(IllegalArgumentException.class, builder::build)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/xml/builder/StaxEventItemWriterBuilderTests.java linha: 177 Método: assertThrows(IllegalArgumentException.class, builder::build)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/xml/StaxEventItemWriterTests.java linha: 134 Método: assertTrue(executionContext.containsKey("test.position"), "execution context keys should be prefixed with writer name")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/xml/StaxEventItemWriterTests.java linha: 142 Método: assertThrows(WriterNotOpenException.class, () -> writer.write(Chunk.of("foo")))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/xml/StaxEventItemWriterTests.java linha: 183 Método: assertTrue(content.contains(TEST_STRING), "Wrong content: " + content)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/xml/StaxEventItemWriterTests.java linha: 193 Método: assertTrue(content.contains(TEST_STRING), "Wrong content: " + content)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/xml/StaxEventItemWriterTests.java linha: 411 Método: assertTrue(content.contains(("<header/>")), "Wrong content: " + content)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/xml/StaxEventItemWriterTests.java linha: 412 Método: assertTrue(content.contains(TEST_STRING), "Wrong content: " + content)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/xml/StaxEventItemWriterTests.java linha: 490 Método: assertThrows(IllegalStateException.class, () -> writer.open(executionContext))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/xml/StaxEventItemWriterTests.java linha: 505 Método: assertTrue(content.contains(TEST_STRING), "Wrong content: " + content)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/xml/StaxEventItemWriterTests.java linha: 517 Método: assertFalse(resource.getFile().exists(), "file should be deleted" + resource)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/xml/StaxEventItemWriterTests.java linha: 561 Método: assertFalse(resource.getFile().exists(), "file should be deleted" + resource)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/xml/StaxEventItemWriterTests.java linha: 581 Método: assertTrue(content.contains(TEST_STRING), "Wrong content: " + content)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/xml/StaxEventItemWriterTests.java linha: 601 Método: assertTrue(content.contains(TEST_STRING), "Wrong content: " + content)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/xml/StaxEventItemWriterTests.java linha: 646 Método: assertFalse(resource.getFile().exists(), "file should be deleted" + resource)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/xml/StaxEventItemWriterTests.java linha: 652 Método: assertTrue(content.contains(TEST_STRING), "Wrong content: " + content)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/xml/StaxEventItemWriterTests.java linha: 666 Método: assertTrue(content.contains(("<root xmlns=\"https://www.springframework.org/test\">")), "Wrong content: " + content)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/xml/StaxEventItemWriterTests.java linha: 668 Método: assertTrue(content.contains(TEST_STRING), "Wrong content: " + content)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/xml/StaxEventItemWriterTests.java linha: 669 Método: assertTrue(content.contains(("</root>")), "Wrong content: " + content)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/xml/StaxEventItemWriterTests.java linha: 685 Método: assertTrue(content.contains(("<ns:root xmlns:ns=\"https://www.springframework.org/test\">")), "Wrong content: " + content)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/xml/StaxEventItemWriterTests.java linha: 687 Método: assertTrue(content.contains(NS_TEST_STRING), "Wrong content: " + content)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/xml/StaxEventItemWriterTests.java linha: 688 Método: assertTrue(content.contains(("</ns:root>")), "Wrong content: " + content)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/xml/StaxEventItemWriterTests.java linha: 689 Método: assertTrue(content.contains(("<ns:root")), "Wrong content: " + content)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/xml/StaxEventItemWriterTests.java linha: 706 Método: assertTrue(content.contains(("<ns:root xmlns:ns=\"https://www.springframework.org/test\" " + "xmlns:foo=\"urn:org.test.foo\">")), "Wrong content: " + content)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/xml/StaxEventItemWriterTests.java linha: 709 Método: assertTrue(content.contains(FOO_TEST_STRING), "Wrong content: " + content)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/xml/StaxEventItemWriterTests.java linha: 710 Método: assertTrue(content.contains(("</ns:root>")), "Wrong content: " + content)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/xml/StaxEventItemWriterTests.java linha: 711 Método: assertTrue(content.contains(("<ns:root")), "Wrong content: " + content)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/xml/StaxEventItemWriterTests.java linha: 737 Método: assertEquals("<root xmlns=\"https://www.springframework.org/test\"><item/><item/></root>", content, "Wrong content: " + content)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/xml/StaxEventItemWriterTests.java linha: 764 Método: assertEquals("<ns:root xmlns:ns=\"https://www.springframework.org/test\"><ns:item/><ns:item/></ns:root>", content, "Wrong content: " + content)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/xml/StaxEventItemWriterTests.java linha: 793 Método: assertEquals("<foo:root xmlns:foo=\"urn:org.test.foo\" xmlns:ns=\"https://www.springframework.org/test\"><ns:item/><ns:item/></foo:root>", content, "Wrong content: " + content)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/xml/StaxEventItemWriterTests.java linha: 836 Método: assertEquals("<ns:testroot xmlns:ns=\"https://www.springframework.org/test\"><ns:group><StaxEventItemWriter-testString/></ns:group></ns:testroot>", content, "Wrong content: " + content)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/xml/StaxEventItemWriterTests.java linha: 859 Método: assertEquals("<ns:testroot xmlns:ns=\"https://www.springframework.org/test\">" + "<ns:group><StaxEventItemWriter-testString/><StaxEventItemWriter-testString/></ns:group></ns:testroot>", content, "Wrong content: " + content)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/xml/StaxEventItemWriterTests.java linha: 882 Método: assertEquals("<ns:testroot xmlns:ns=\"https://www.springframework.org/test\">" + "<preHeader>PRE-HEADER</preHeader><ns:group><subGroup><postHeader>POST-HEADER</postHeader>" + "<StaxEventItemWriter-testString/><StaxEventItemWriter-testString/>" + "<preFooter>PRE-FOOTER</preFooter></subGroup></ns:group><postFooter>POST-FOOTER</postFooter>" + "</ns:testroot>", content, "Wrong content: " + content)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/xml/Jaxb2MarshallingTests.java linha: 41 Método: assertTrue(content.contains("<customer>bar</customer>"), "Wrong content: " + content)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/mail/SimpleMailMessageItemWriterTests.java linha: 97 Método: assertThrows(MailSendException.class, () -> writer.write(Chunk.of(items)))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/mail/javamail/MimeMessageItemWriterTests.java linha: 97 Método: assertThrows(MailSendException.class, () -> writer.write(Chunk.of(items)))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/mail/builder/SimpleMailMessageItemWriterBuilderTests.java linha: 77 Método: assertThrows(IllegalArgumentException.class, () -> new SimpleMailMessageItemWriterBuilder().build())
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/mail/builder/SimpleMailMessageItemWriterBuilderTests.java linha: 90 Método: assertThrows(MailSendException.class, () -> writer.write(Chunk.of(this.items)))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/mail/DefaultMailErrorHandlerTests.java linha: 45 Método: assertThrows(MailException.class, () -> handler.handle(mailMessage, new MessagingException()))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/mail/DefaultMailErrorHandlerTests.java linha: 48 Método: assertTrue(message.matches(".*SimpleMailMessage: f.*"), "Wrong message: " + message)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/mail/DefaultMailErrorHandlerTests.java linha: 56 Método: assertThrows(MailSendException.class, () -> handler.handle(new SimpleMailMessage(), new MessagingException()))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/jms/JmsItemWriterTests.java linha: 47 Método: assertThrows(IllegalArgumentException.class, () -> itemWriter.setJmsTemplate(jmsTemplate))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/jms/JmsItemReaderTests.java linha: 79 Método: assertThrows(IllegalStateException.class, itemReader::read)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/jms/JmsItemReaderTests.java linha: 99 Método: assertThrows(IllegalArgumentException.class, () -> itemReader.setJmsTemplate(jmsTemplate))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/jms/JmsItemReaderTests.java linha: 106 Método: assertThrows(IllegalArgumentException.class, () -> itemReader.setJmsTemplate(jmsTemplate))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/jms/builder/JmsItemReaderBuilderTests.java linha: 72 Método: assertThrows(IllegalStateException.class, itemReader::read)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/jms/builder/JmsItemReaderBuilderTests.java linha: 89 Método: assertThrows(IllegalArgumentException.class, () -> new JmsItemReaderBuilder<String>().itemType(String.class).build())
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/jms/builder/JmsItemWriterBuilderTests.java linha: 47 Método: assertEquals("foo", argCaptor.getAllValues().get(0), "Expected foo")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/jms/builder/JmsItemWriterBuilderTests.java linha: 48 Método: assertEquals("bar", argCaptor.getAllValues().get(1), "Expected bar")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/jms/builder/JmsItemWriterBuilderTests.java linha: 53 Método: assertThrows(IllegalArgumentException.class, () -> new JmsItemWriterBuilder<String>().build())
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/support/SynchronizedItemStreamWriterTests.java linha: 39 Método: assertThrows(IllegalStateException.class, () -> ((InitializingBean) new SynchronizedItemStreamWriter<>()).afterPropertiesSet())
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/support/ItemCountingItemStreamItemReaderTests.java linha: 68 Método: assertThrows(IllegalArgumentException.class, () -> reader.open(new ExecutionContext()))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/support/ScriptItemProcessorTests.java linha: 64 Método: assertEquals("SS", scriptItemProcessor.process("ss"), "Incorrect transformed value")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/support/ScriptItemProcessorTests.java linha: 76 Método: assertEquals("SS", scriptItemProcessor.process("ss"), "Incorrect transformed value")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/support/ScriptItemProcessorTests.java linha: 87 Método: assertEquals("SS", scriptItemProcessor.process("ss"), "Incorrect transformed value")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/support/ScriptItemProcessorTests.java linha: 98 Método: assertEquals("SS", scriptItemProcessor.process("ss"), "Incorrect transformed value")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/support/ScriptItemProcessorTests.java linha: 109 Método: assertEquals("SS", scriptItemProcessor.process("ss"), "Incorrect transformed value")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/support/ScriptItemProcessorTests.java linha: 121 Método: assertEquals("SS", scriptItemProcessor.process("ss"), "Incorrect transformed value")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/support/ScriptItemProcessorTests.java linha: 132 Método: assertEquals("SS", scriptItemProcessor.process("ss"), "Incorrect transformed value")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/support/ScriptItemProcessorTests.java linha: 144 Método: assertEquals("SS", scriptItemProcessor.process("ss"), "Incorrect transformed value")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/support/ScriptItemProcessorTests.java linha: 157 Método: assertEquals("SS", scriptItemProcessor.process("ss"), "Incorrect transformed value")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/support/ScriptItemProcessorTests.java linha: 170 Método: assertEquals(true, scriptItemProcessor.process("Hello World"), "Incorrect transformed value")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/support/ScriptItemProcessorTests.java linha: 176 Método: assertThrows(IllegalStateException.class, scriptItemProcessor::afterPropertiesSet)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/support/ScriptItemProcessorTests.java linha: 184 Método: assertThrows(IllegalStateException.class, scriptItemProcessor::afterPropertiesSet)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/support/ScriptItemProcessorTests.java linha: 190 Método: assertThrows(IllegalStateException.class, () -> scriptItemProcessor.process("blah"))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/support/ScriptItemProcessorTests.java linha: 196 Método: assertThrows(IllegalArgumentException.class, () -> scriptItemProcessor.setScriptSource("function process(item) { return item.toUpperCase(); } process(item);", null))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/support/ScriptItemProcessorTests.java linha: 210 Método: assertEquals("SS", scriptItemProcessor.process("ss"), "Incorrect transformed value")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/support/ScriptItemProcessorTests.java linha: 223 Método: assertEquals("SS", scriptItemProcessor.process("ss"), "Incorrect transformed value")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/support/ScriptItemProcessorTests.java linha: 236 Método: assertEquals("SS", scriptItemProcessor.process("ss"), "Incorrect transformed value")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/support/CompositeItemProcessorTests.java linha: 106 Método: assertThrows(IllegalStateException.class, composite::afterPropertiesSet)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/support/CompositeItemProcessorTests.java linha: 110 Método: assertThrows(IllegalStateException.class, composite::afterPropertiesSet)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/support/ClassifierCompositeItemWriterTests.java linha: 75 Método: assertThrows(IllegalArgumentException.class, () -> writer.setClassifier(null))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/support/TransactionAwareListItemReaderTests.java linha: 93 Método: assertThrows(RuntimeException.class, () -> new TransactionTemplate(transactionManager).execute((TransactionCallback<Void>) status -> {
    taken.add(reader.read());
    throw new RuntimeException("Rollback!");
}))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/support/builder/ClassifierCompositeItemWriterBuilderTests.java linha: 73 Método: assertThrows(IllegalArgumentException.class, () -> new ClassifierCompositeItemWriterBuilder<>().build())
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/support/builder/SynchronizedItemStreamWriterBuilderTests.java linha: 42 Método: assertThrows(IllegalArgumentException.class, builder::build)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/support/builder/SingleItemPeekableItemReaderBuilderTests.java linha: 58 Método: assertThrows(IllegalArgumentException.class, () -> new SingleItemPeekableItemReaderBuilder<Foo>().build())
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/support/builder/ScriptItemProcessorBuilderTests.java linha: 64 Método: assertEquals("AA", scriptItemProcessor.process("aa"), "Incorrect transformed value")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/support/builder/ScriptItemProcessorBuilderTests.java linha: 73 Método: assertEquals(true, scriptItemProcessor.process("Hello World"), "Incorrect transformed value")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/support/builder/ScriptItemProcessorBuilderTests.java linha: 83 Método: assertEquals("BB", scriptItemProcessor.process("bb"), "Incorrect transformed value")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/support/builder/ScriptItemProcessorBuilderTests.java linha: 100 Método: assertThrows(IllegalArgumentException.class, builder::build)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/support/builder/ClassifierCompositeItemProcessorBuilderTests.java linha: 55 Método: assertThrows(IllegalArgumentException.class, () -> new ClassifierCompositeItemProcessorBuilder<String, String>().build())
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/support/builder/CompositeItemProcessorBuilderTests.java linha: 95 Método: assertThrows(IllegalArgumentException.class, builder::build)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/mapping/PatternMatchingCompositeLineMapperTests.java linha: 47 Método: assertThrows(IllegalArgumentException.class, () -> mapper.setFieldSetMappers(fieldSetMappers))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/mapping/PatternMatchingCompositeLineMapperTests.java linha: 112 Método: assertThrows(IllegalStateException.class, () -> mapper.mapLine("bar", 1))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/mapping/DefaultLineMapperTests.java linha: 38 Método: assertThrows(IllegalStateException.class, tested::afterPropertiesSet)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/mapping/DefaultLineMapperTests.java linha: 44 Método: assertThrows(IllegalStateException.class, tested::afterPropertiesSet)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/mapping/BeanWrapperFieldSetMapperFuzzyMatchingTests.java linha: 38 Método: assertThrows(NotWritablePropertyException.class, () -> mapper.mapFieldSet(lineTokenizer.tokenize("brown,green,great,groin,braun")))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/mapping/BeanWrapperFieldSetMapperTests.java linha: 79 Método: assertThrows(IllegalStateException.class, mapper::afterPropertiesSet)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/mapping/BeanWrapperFieldSetMapperTests.java linha: 86 Método: assertThrows(IllegalStateException.class, mapper::afterPropertiesSet)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/mapping/BeanWrapperFieldSetMapperTests.java linha: 266 Método: assertThrows(NotWritablePropertyException.class, () -> mapper.mapFieldSet(fieldSet))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/mapping/BeanWrapperFieldSetMapperTests.java linha: 283 Método: assertThrows(NotWritablePropertyException.class, () -> mapper.mapFieldSet(fieldSet))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/mapping/BeanWrapperFieldSetMapperTests.java linha: 412 Método: assertEquals(9876.1, bean.getVarDouble(), 0.01)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/mapping/BeanWrapperFieldSetMapperTests.java linha: 413 Método: assertEquals(7890.1, bean.getVarFloat(), 0.01)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/mapping/BeanWrapperFieldSetMapperTests.java linha: 428 Método: assertEquals(bean.getVarString(), "CONVERTED", "Expecting the conversion to have returned \"CONVERTED\"")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/mapping/BeanWrapperFieldSetMapperTests.java linha: 453 Método: assertEquals(bean.getVarInt(), 12, "Expected 12 for varInt")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/mapping/BeanWrapperFieldSetMapperTests.java linha: 454 Método: assertEquals(bean.getVarLong(), 12345L, "Expected 12345 for varLong")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/mapping/BeanWrapperFieldSetMapperTests.java linha: 455 Método: assertEquals(bean.isVarBoolean(), true, "Expected true for varBoolean")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/mapping/BeanWrapperFieldSetMapperTests.java linha: 456 Método: assertEquals(bean.getVarChar(), 'Z', "Expected Z for varChar")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/mapping/BeanWrapperFieldSetMapperTests.java linha: 457 Método: assertEquals(bean.getVarByte(), 123, "Expected A for varByte")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/mapping/BeanWrapperFieldSetMapperTests.java linha: 458 Método: assertEquals(bean.getVarFloat(), 12345F, 1F, "Expected 12345 for varFloat")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/mapping/BeanWrapperFieldSetMapperTests.java linha: 459 Método: assertEquals(bean.getVarDouble(), 12345D, 1D, "Expected 12345 for varDouble")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/mapping/BeanWrapperFieldSetMapperTests.java linha: 460 Método: assertEquals(bean.getVarShort(), 12, "Expected 12 for varShort")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/mapping/BeanWrapperFieldSetMapperTests.java linha: 461 Método: assertEquals(bean.getVarDate().toString(), dateString, "Expected currentDate for varDate")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/mapping/BeanWrapperFieldSetMapperTests.java linha: 462 Método: assertEquals(bean.getVarBigDecimal(), bigDecimal, "Expected 12345 for varBigDecimal")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/mapping/BeanWrapperFieldSetMapperTests.java linha: 463 Método: assertEquals(bean.getVarString(), sampleString, "Expected " + sampleString + " for varString")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/mapping/BeanWrapperFieldSetMapperTests.java linha: 475 Método: assertThrows(IllegalStateException.class, mapper::afterPropertiesSet)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/mapping/BeanWrapperFieldSetMapperTests.java linha: 487 Método: assertThrows(BindException.class, () -> mapper.mapFieldSet(fieldSet))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/mapping/BeanWrapperFieldSetMapperTests.java linha: 508 Método: assertEquals(9876.1, bean.getValue(), 0.01)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/mapping/BeanWrapperFieldSetMapperTests.java linha: 509 Método: assertEquals(7890.1, bean.getOther(), 0.01)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/mapping/BeanWrapperFieldSetMapperTests.java linha: 529 Método: assertEquals(9876.1, bean.getValue(), 0.01)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/mapping/BeanWrapperFieldSetMapperTests.java linha: 530 Método: assertEquals(7890.1, bean.getOther(), 0.01)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/mapping/BeanWrapperFieldSetMapperTests.java linha: 543 Método: assertThrows(NotWritablePropertyException.class, () -> mapper.mapFieldSet(fieldSet))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/mapping/JsonLineMapperTests.java linha: 46 Método: assertThrows(JsonParseException.class, () -> mapper.mapLine("{\"foo\": 1", 1))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/mapping/RecordFieldSetMapperTests.java linha: 54 Método: assertThrows(IllegalArgumentException.class, () -> recordFieldSetMapper.mapFieldSet(fieldSet))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/mapping/RecordFieldSetMapperTests.java linha: 66 Método: assertThrows(IllegalArgumentException.class, () -> recordFieldSetMapper.mapFieldSet(fieldSet))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/MultiResourceItemReaderIntegrationTests.java linha: 326 Método: assertThrows(ItemStreamException.class, tested::read)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/MultiResourceItemReaderIntegrationTests.java linha: 349 Método: assertThrows(ItemStreamException.class, tested::read)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/MultiResourceItemReaderIntegrationTests.java linha: 379 Método: assertThrows(ItemStreamException.class, tested::read)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/MultiResourceItemReaderIntegrationTests.java linha: 394 Método: assertThrows(IllegalStateException.class, () -> tested.open(ctx))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/MultiResourceItemReaderIntegrationTests.java linha: 406 Método: assertTrue(true, "empty input doesn't cause an error")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/FlatFileItemReaderTests.java linha: 142 Método: assertThrows(FlatFileParseException.class, reader::read)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/FlatFileItemReaderTests.java linha: 381 Método: assertThrows(ItemStreamException.class, () -> reader.open(executionContext))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/FlatFileItemReaderTests.java linha: 434 Método: assertThrows(ItemStreamException.class, () -> reader.open(executionContext))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/FlatFileItemReaderTests.java linha: 458 Método: assertThrows(FlatFileParseException.class, reader::read)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/FlatFileItemWriterTests.java linha: 536 Método: assertTrue(file.exists(), "Test file must exist: " + file)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/FlatFileItemWriterTests.java linha: 537 Método: assertTrue(file.getFile().setReadOnly(), "Test file set to read-only: " + file)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/FlatFileItemWriterTests.java linha: 538 Método: assertFalse(file.getFile().canWrite(), "Should be readonly file: " + file)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/FlatFileItemWriterTests.java linha: 540 Método: assertThrows(IllegalStateException.class, () -> writer.open(executionContext))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/FlatFileItemWriterTests.java linha: 542 Método: assertTrue(message.contains("writable"), "Message does not contain 'writable': " + message)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/FlatFileItemWriterTests.java linha: 548 Método: assertThrows(IllegalStateException.class, writer::afterPropertiesSet)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/FlatFileItemWriterTests.java linha: 570 Método: assertThrows(ItemStreamException.class, () -> writer.open(executionContext))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/FlatFileItemWriterTests.java linha: 803 Método: assertThrows(RuntimeException.class, () -> writer.write(items))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/FlatFileItemWriterTests.java linha: 821 Método: assertFalse(toBeCreated.exists(), "output file does not exist yet")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/FlatFileItemWriterTests.java linha: 827 Método: assertTrue(toBeCreated.exists(), "output file was created")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/builder/MultiResourceItemReaderBuilderTests.java linha: 68 Método: assertThrows(IllegalArgumentException.class, () -> new MultiResourceItemReaderBuilder<String>().resources(new Resource[] {}).build())
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/builder/MultiResourceItemReaderBuilderTests.java linha: 76 Método: assertThrows(IllegalArgumentException.class, () -> new MultiResourceItemReaderBuilder<String>().delegate(mock(FlatFileItemReader.class)).build())
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/builder/MultiResourceItemWriterBuilderTests.java linha: 212 Método: assertThrows(IllegalArgumentException.class, builder::build)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/builder/MultiResourceItemWriterBuilderTests.java linha: 220 Método: assertThrows(IllegalArgumentException.class, builder::build)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/builder/MultiResourceItemWriterBuilderTests.java linha: 228 Método: assertThrows(IllegalArgumentException.class, builder::build)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/transform/BeanWrapperFieldExtractorTests.java linha: 63 Método: assertThrows(NotReadablePropertyException.class, () -> extractor.extract(n))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/transform/BeanWrapperFieldExtractorTests.java linha: 69 Método: assertThrows(IllegalArgumentException.class, () -> extractor.setNames(null))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/transform/RangeArrayPropertyEditorTests.java linha: 102 Método: assertThrows(IllegalArgumentException.class, () -> pe.setAsText("1-10, 5-15"))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/transform/RangeArrayPropertyEditorTests.java linha: 120 Método: assertThrows(IllegalArgumentException.class, () -> pe.setAsText("1-5, b"))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/transform/DelimitedLineTokenizerTests.java linha: 35 Método: assertTrue(tokens.readString(0).equals("sfd"), TOKEN_MATCHES)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/transform/DelimitedLineTokenizerTests.java linha: 36 Método: assertTrue(tokens.readString(1).equals("Well,I have no idea what to do in the afternoon"), TOKEN_MATCHES)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/transform/DelimitedLineTokenizerTests.java linha: 37 Método: assertTrue(tokens.readString(2).equals("sFj"), TOKEN_MATCHES)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/transform/DelimitedLineTokenizerTests.java linha: 38 Método: assertTrue(tokens.readString(3).equals("asdf"), TOKEN_MATCHES)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/transform/DelimitedLineTokenizerTests.java linha: 39 Método: assertTrue(tokens.readString(4).equals(""), TOKEN_MATCHES)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/transform/DelimitedLineTokenizerTests.java linha: 40 Método: assertTrue(tokens.readString(5).equals("as"), TOKEN_MATCHES)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/transform/DelimitedLineTokenizerTests.java linha: 44 Método: assertTrue(tokens.readString(0).equals("First string"), TOKEN_MATCHES)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/transform/DelimitedLineTokenizerTests.java linha: 45 Método: assertTrue(tokens.readString(1).equals(""), TOKEN_MATCHES)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/transform/DelimitedLineTokenizerTests.java linha: 51 Método: assertTrue(tokens.readString(0).equals(""), TOKEN_MATCHES)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/transform/DelimitedLineTokenizerTests.java linha: 57 Método: assertTrue(tokens.readString(0).equals(""), TOKEN_MATCHES)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/transform/DelimitedLineTokenizerTests.java linha: 62 Método: assertThrows(Exception.class, () -> new DelimitedLineTokenizer(String.valueOf(DelimitedLineTokenizer.DEFAULT_QUOTE_CHARACTER)))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/transform/DelimitedLineTokenizerTests.java linha: 83 Método: assertThrows(IncorrectTokenCountException.class, () -> tokenizer.tokenize("a,b,c"))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/transform/DelimitedLineTokenizerTests.java linha: 96 Método: assertTrue(tokens.readString(0).equals("a"), TOKEN_MATCHES)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/transform/DelimitedLineTokenizerTests.java linha: 97 Método: assertTrue(tokens.readString(1).equals("b"), TOKEN_MATCHES)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/transform/DelimitedLineTokenizerTests.java linha: 121 Método: assertTrue(tokens.readString(0).equals("a"), TOKEN_MATCHES)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/transform/DelimitedLineTokenizerTests.java linha: 122 Método: assertTrue(tokens.readString(1).equals("b"), TOKEN_MATCHES)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/transform/DelimitedLineTokenizerTests.java linha: 123 Método: assertTrue(tokens.readString(2).equals("c"), TOKEN_MATCHES)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/transform/DelimitedLineTokenizerTests.java linha: 124 Método: assertTrue(tokens.readString(3).equals(""), TOKEN_MATCHES)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/transform/DelimitedLineTokenizerTests.java linha: 125 Método: assertTrue(tokens.readString(4).equals(""), TOKEN_MATCHES)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/transform/DelimitedLineTokenizerTests.java linha: 137 Método: assertThrows(IllegalArgumentException.class, () -> new DelimitedLineTokenizer(null))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/transform/DelimitedLineTokenizerTests.java linha: 143 Método: assertThrows(IllegalStateException.class, tokenizer::afterPropertiesSet)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/transform/DelimitedLineTokenizerTests.java linha: 366 Método: assertThrows(IncorrectTokenCountException.class, () -> tokenizer.tokenize("\"a\",\"b\",\"c\",\"d\""))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/transform/DelimitedLineTokenizerTests.java linha: 373 Método: assertThrows(IncorrectTokenCountException.class, () -> tokenizer.tokenize("\"a\",\"b\",\"c\",\"d\""))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/transform/DefaultFieldSetTests.java linha: 66 Método: assertThrows(IllegalStateException.class, fieldSet::getNames)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/transform/DefaultFieldSetTests.java linha: 112 Método: assertEquals(354224, fieldSet.readFloat(5), .001)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/transform/DefaultFieldSetTests.java linha: 113 Método: assertEquals(354224, fieldSet.readFloat("Integer"), .001)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/transform/DefaultFieldSetTests.java linha: 128 Método: assertEquals(354224, fieldSet.readDouble(5), .001)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/transform/DefaultFieldSetTests.java linha: 129 Método: assertEquals(354224, fieldSet.readDouble("Integer"), .001)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/transform/DefaultFieldSetTests.java linha: 188 Método: assertThrows(IllegalArgumentException.class, () -> fieldSet.readString("something"))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/transform/DefaultFieldSetTests.java linha: 194 Método: assertThrows(IndexOutOfBoundsException.class, () -> fieldSet.readShort(-1))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/transform/DefaultFieldSetTests.java linha: 195 Método: assertThrows(Exception.class, () -> fieldSet.readShort(99))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/transform/DefaultFieldSetTests.java linha: 215 Método: assertThrows(IllegalArgumentException.class, () -> fieldSet.readChar(1))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/transform/DefaultFieldSetTests.java linha: 216 Método: assertThrows(IllegalArgumentException.class, () -> fieldSet.readChar("Boolean"))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/transform/DefaultFieldSetTests.java linha: 242 Método: assertThrows(NumberFormatException.class, () -> fieldSet.readInt(13))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/transform/DefaultFieldSetTests.java linha: 243 Método: assertThrows(NumberFormatException.class, () -> fieldSet.readInt("BlankInput"))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/transform/DefaultFieldSetTests.java linha: 288 Método: assertThrows(IllegalArgumentException.class, () -> fieldSet.readBigDecimal(0))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/transform/DefaultFieldSetTests.java linha: 294 Método: assertThrows(IllegalArgumentException.class, () -> fieldSet.readBigDecimal("String"))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/transform/DefaultFieldSetTests.java linha: 323 Método: assertThrows(IllegalArgumentException.class, () -> fieldSet.readDate(0))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/transform/DefaultFieldSetTests.java linha: 329 Método: assertThrows(IllegalArgumentException.class, () -> fieldSet.readDate("String"))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/transform/DefaultFieldSetTests.java linha: 335 Método: assertThrows(IllegalArgumentException.class, () -> fieldSet.readDate(0, "dd-MM-yyyy"))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/transform/DefaultFieldSetTests.java linha: 349 Método: assertThrows(IllegalArgumentException.class, () -> fieldSet.readDate(1, defaultDate))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/transform/DefaultFieldSetTests.java linha: 352 Método: assertThrows(IllegalArgumentException.class, () -> fieldSet.readDate("String", defaultDate))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/transform/DefaultFieldSetTests.java linha: 356 Método: assertThrows(IllegalArgumentException.class, () -> fieldSet.readDate(1, "dd-MM-yyyy", defaultDate))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/transform/DefaultFieldSetTests.java linha: 359 Método: assertThrows(IllegalArgumentException.class, () -> fieldSet.readDate("String", "dd-MM-yyyy", defaultDate))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/transform/DefaultFieldSetTests.java linha: 368 Método: assertThrows(IllegalArgumentException.class, () -> fieldSet.readDate(0, "dd-MM-yyyy"))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/transform/DefaultFieldSetTests.java linha: 370 Método: assertTrue(message.contains("dd-MM-yyyy"), "Message did not contain: " + message)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/transform/DefaultFieldSetTests.java linha: 376 Método: assertThrows(IllegalArgumentException.class, () -> fieldSet.readDate(0, "yyyyMMdd"))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/transform/DefaultFieldSetTests.java linha: 378 Método: assertTrue(message.contains("yyyyMMdd"), "Message did not contain: " + message)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/transform/DefaultFieldSetTests.java linha: 383 Método: assertThrows(IllegalArgumentException.class, () -> fieldSet.readDate("String", "dd-MM-yyyy"))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/transform/DefaultFieldSetTests.java linha: 440 Método: assertThrows(IllegalArgumentException.class, () -> new DefaultFieldSet(new String[] { "1", "2" }, new String[] { "a" }))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/transform/DefaultFieldSetTests.java linha: 470 Método: assertThrows(IllegalStateException.class, () -> new DefaultFieldSet(new String[] { "foo", "bar" }).getProperties())
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/transform/DefaultFieldSetTests.java linha: 491 Método: assertThrows(IllegalArgumentException.class, () -> new DefaultFieldSet(new String[] { "1", "2" }).readInt("a"))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/transform/PatternMatchingCompositeLineTokenizerTests.java linha: 41 Método: assertThrows(IllegalStateException.class, tokenizer::afterPropertiesSet)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/transform/PatternMatchingCompositeLineTokenizerTests.java linha: 81 Método: assertThrows(IllegalStateException.class, () -> tokenizer.tokenize("nomatch"))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/transform/FormatterLineAggregatorTests.java linha: 54 Método: assertThrows(IllegalArgumentException.class, () -> aggregator.aggregate(args))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/transform/FormatterLineAggregatorTests.java linha: 65 Método: assertThrows(IllegalStateException.class, () -> aggregator.aggregate(args))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/transform/FixedLengthTokenizerTests.java linha: 37 Método: assertThrows(IncorrectLineLengthException.class, () -> tokenizer.tokenize(""))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/transform/FixedLengthTokenizerTests.java linha: 52 Método: assertThrows(IncorrectLineLengthException.class, () -> tokenizer.tokenize("12345"))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/transform/FixedLengthTokenizerTests.java linha: 86 Método: assertThrows(IncorrectLineLengthException.class, () -> tokenizer.tokenize(null))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/transform/FixedLengthTokenizerTests.java linha: 118 Método: assertThrows(IncorrectLineLengthException.class, () -> tokenizer.tokenize(line))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/transform/FixedLengthTokenizerTests.java linha: 189 Método: assertThrows(IncorrectTokenCountException.class, () -> tokenizer.tokenize("12345"))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/avro/AvroItemReaderTests.java linha: 75 Método: assertThrows(IllegalStateException.class, () -> new AvroItemReader<User>(new ClassPathResource("doesnotexist"), schemaResource))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/avro/AvroItemReaderTests.java linha: 81 Método: assertThrows(IllegalStateException.class, () -> new AvroItemReader<User>(dataResource, new ClassPathResource("doesnotexist")))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/avro/builder/AvroItemWriterBuilderTests.java linha: 97 Método: assertThrows(IllegalArgumentException.class, () -> new AvroItemWriterBuilder<GenericRecord>().type(GenericRecord.class).build())
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/avro/builder/AvroItemWriterBuilderTests.java linha: 103 Método: assertThrows(IllegalArgumentException.class, () -> new AvroItemWriterBuilder<>().resource(output).schema(schemaResource).build())
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/avro/builder/AvroItemReaderBuilderTests.java linha: 73 Método: assertThrows(IllegalArgumentException.class, () -> new AvroItemReaderBuilder<GenericRecord>().schema("").resource(dataResource).build())
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/avro/builder/AvroItemReaderBuilderTests.java linha: 79 Método: assertThrows(IllegalArgumentException.class, () -> new AvroItemReaderBuilder<GenericRecord>().resource(dataResource).build())
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/avro/builder/AvroItemReaderBuilderTests.java linha: 85 Método: assertThrows(IllegalArgumentException.class, () -> new AvroItemReaderBuilder<GenericRecord>().schema(schemaResource).build())
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/avro/AvroItemWriterTests.java linha: 94 Método: assertThrows(IllegalArgumentException.class, () -> new AvroItemWriter<>(null, this.schemaResource, User.class).open(new ExecutionContext()))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/avro/AvroItemWriterTests.java linha: 100 Método: assertThrows(IllegalArgumentException.class, () -> new AvroItemWriter<>(this.output, this.schemaResource, null).open(new ExecutionContext()))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/amqp/AmqpItemWriterTests.java linha: 41 Método: assertThrows(IllegalArgumentException.class, () -> new AmqpItemWriter<String>(null))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/amqp/AmqpItemReaderTests.java linha: 42 Método: assertThrows(IllegalArgumentException.class, () -> new AmqpItemReader<String>(null))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/amqp/AmqpItemReaderTests.java linha: 89 Método: assertThrows(IllegalStateException.class, amqpItemReader::read)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/amqp/AmqpItemReaderTests.java linha: 99 Método: assertThrows(IllegalArgumentException.class, () -> amqpItemReader.setItemType(null))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/amqp/builder/AmqpItemReaderBuilderTests.java linha: 74 Método: assertThrows(IllegalArgumentException.class, () -> new AmqpItemReaderBuilder<Message>().build())
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/amqp/builder/AmqpItemWriterBuilderTests.java linha: 41 Método: assertThrows(IllegalArgumentException.class, () -> new AmqpItemWriterBuilder<Message>().build())
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/AbstractDataSourceItemReaderIntegrationTests.java linha: 198 Método: assertThrows(Exception.class, () -> getAsItemStream(reader).open(executionContext))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/StoredProcedureItemReaderCommonTests.java linha: 88 Método: assertThrows(ReaderNotOpenException.class, tested::read)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/JdbcCursorItemReaderCommonTests.java linha: 68 Método: assertThrows(ReaderNotOpenException.class, tested::read)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/HibernateItemWriterTests.java linha: 65 Método: assertThrows(IllegalStateException.class, writer::afterPropertiesSet)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/HibernateItemWriterTests.java linha: 67 Método: assertTrue(message.contains("SessionFactory"), "Wrong message for exception: " + message)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/HibernateItemWriterTests.java linha: 100 Método: assertThrows(RuntimeException.class, () -> writer.write(Chunk.of("foo")))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/HibernateItemWriterTests.java linha: 126 Método: assertThrows(RuntimeException.class, () -> writer.write(Chunk.of("foo")))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/ExtendedConnectionDataSourceProxyTests.java linha: 69 Método: assertNotSame(con1, con2, "shouldn't be the same connection")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/ExtendedConnectionDataSourceProxyTests.java linha: 71 Método: assertTrue(csds.shouldClose(con1), "should be able to close connection")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/ExtendedConnectionDataSourceProxyTests.java linha: 73 Método: assertTrue(csds.shouldClose(con2), "should be able to close connection")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/ExtendedConnectionDataSourceProxyTests.java linha: 79 Método: assertSame(con3, con3_1, "should be same connection")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/ExtendedConnectionDataSourceProxyTests.java linha: 80 Método: assertFalse(csds.shouldClose(con3), "should not be able to close connection")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/ExtendedConnectionDataSourceProxyTests.java linha: 83 Método: assertSame(con3, con3_2, "should be same connection")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/ExtendedConnectionDataSourceProxyTests.java linha: 85 Método: assertNotSame(con3, con4, "shouldn't be same connection")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/ExtendedConnectionDataSourceProxyTests.java linha: 87 Método: assertTrue(csds.shouldClose(con3), "should be able to close connection")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/ExtendedConnectionDataSourceProxyTests.java linha: 91 Método: assertTrue(csds.shouldClose(con4), "should be able to close connection")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/ExtendedConnectionDataSourceProxyTests.java linha: 111 Método: assertSame(con1, con1_1, "should be same connection")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/ExtendedConnectionDataSourceProxyTests.java linha: 114 Método: assertSame(con1, con1_2, "should be same connection")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/ExtendedConnectionDataSourceProxyTests.java linha: 116 Método: assertNotSame(con1, con2, "shouldn't be same connection")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/ExtendedConnectionDataSourceProxyTests.java linha: 118 Método: assertTrue(csds.shouldClose(con1), "should be able to close connection")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/ExtendedConnectionDataSourceProxyTests.java linha: 122 Método: assertTrue(csds.shouldClose(con2), "should be able to close connection")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/ExtendedConnectionDataSourceProxyTests.java linha: 234 Método: assertThrows(IllegalStateException.class, tested::afterPropertiesSet)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/ExtendedConnectionDataSourceProxyTests.java linha: 244 Método: assertThrows(SQLException.class, () -> tested.unwrap(Unsupported.class))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/JpaItemWriterTests.java linha: 64 Método: assertThrows(IllegalStateException.class, writer::afterPropertiesSet)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/JpaItemWriterTests.java linha: 66 Método: assertTrue(message.contains("EntityManagerFactory"), "Wrong message for exception: " + message)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/JpaItemWriterTests.java linha: 107 Método: assertThrows(RuntimeException.class, () -> writer.write(Chunk.of("foo", "bar")))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/support/DefaultDataFieldMaxValueIncrementerFactoryTests.java linha: 78 Método: assertThrows(IllegalArgumentException.class, () -> factory.getIncrementer("invalidtype", "NAME"))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/support/DefaultDataFieldMaxValueIncrementerFactoryTests.java linha: 83 Método: assertThrows(IllegalArgumentException.class, () -> factory.getIncrementer("db2", null))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/support/H2PagingQueryProviderIntegrationTests.java linha: 67 Método: assertArrayEquals(new String[] { "Spring", "Batch" }, firstPage.toArray(), "firstPage")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/support/H2PagingQueryProviderIntegrationTests.java linha: 71 Método: assertArrayEquals(new String[] { "Infrastructure" }, secondPage.toArray(), "secondPage")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/support/SqlPagingQueryProviderFactoryBeanTests.java linha: 73 Método: assertThrows(IllegalArgumentException.class, factory::getObject)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/support/SqlPagingQueryProviderFactoryBeanTests.java linha: 79 Método: assertThrows(IllegalArgumentException.class, factory::getObject)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/support/SqlPagingQueryProviderFactoryBeanTests.java linha: 87 Método: assertTrue(query.contains("x=y"), "Wrong query: " + query)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/support/SqlPagingQueryProviderFactoryBeanTests.java linha: 94 Método: assertTrue(query.contains("ASC"), "Wrong query: " + query)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/support/SqlPagingQueryProviderFactoryBeanTests.java linha: 100 Método: assertThrows(IllegalArgumentException.class, factory::getObject)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/support/SqlPagingQueryProviderFactoryBeanTests.java linha: 106 Método: assertThrows(IllegalArgumentException.class, factory::getObject)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/support/DerbyPagingQueryProviderTests.java linha: 74 Método: assertThrows(InvalidDataAccessResourceUsageException.class, () -> pagingQueryProvider.init(ds))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/support/DerbyPagingQueryProviderTests.java linha: 101 Método: assertTrue(s.contains("id asc"), "Wrong query: " + s)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/support/DerbyPagingQueryProviderTests.java linha: 113 Método: assertTrue(s.contains("id desc"), "Wrong query: " + s)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/support/AbstractSqlPagingQueryProviderTests.java linha: 58 Método: assertTrue(s.contains("id asc"), "Wrong query: " + s)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/support/AbstractSqlPagingQueryProviderTests.java linha: 65 Método: assertTrue(s.contains("id desc"), "Wrong query: " + s)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/HibernateCursorProjectionItemReaderIntegrationTests.java linha: 82 Método: assertThrows(ClassCastException.class, () -> {
    Object[] foo1 = reader.read();
})
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/JdbcBatchItemWriterClassicTests.java linha: 88 Método: assertThrows(IllegalStateException.class, writer::afterPropertiesSet)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/JdbcBatchItemWriterClassicTests.java linha: 89 Método: assertTrue(exception.getMessage().contains("NamedParameterJdbcTemplate"), "Message does not contain ' NamedParameterJdbcTemplate'.")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/JdbcBatchItemWriterClassicTests.java linha: 93 Método: assertThrows(IllegalStateException.class, writer::afterPropertiesSet)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/JdbcBatchItemWriterClassicTests.java linha: 95 Método: assertTrue(message.toLowerCase().contains("sql"), "Message does not contain 'sql'.")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/JdbcBatchItemWriterClassicTests.java linha: 98 Método: assertThrows(IllegalStateException.class, writer::afterPropertiesSet)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/JdbcBatchItemWriterClassicTests.java linha: 99 Método: assertTrue(exception.getMessage().contains("ItemPreparedStatementSetter"), "Message does not contain 'ItemPreparedStatementSetter'.")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/JdbcBatchItemWriterClassicTests.java linha: 120 Método: assertThrows(EmptyResultDataAccessException.class, () -> writer.write(Chunk.of("bar")))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/JdbcBatchItemWriterClassicTests.java linha: 122 Método: assertTrue(message.contains("did not update"), "Wrong message: " + message)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/JdbcBatchItemWriterClassicTests.java linha: 139 Método: assertThrows(RuntimeException.class, () -> writer.write(Chunk.of("foo")))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/RepositoryItemReaderIntegrationTests.java linha: 56 Método: assertEquals(2, books.size(), "Books list size must be = 2")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/RepositoryItemReaderIntegrationTests.java linha: 57 Método: assertEquals("author 1 - book 1", books.get(0).getName(), "First book must be author 1 - book 1")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/RepositoryItemReaderIntegrationTests.java linha: 58 Método: assertEquals("author 1 - book 2", books.get(1).getName(), "Second book must be author 1 - book 2")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/RepositoryItemReaderIntegrationTests.java linha: 70 Método: assertEquals(2, books.size(), "Books list size must be = 2")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/RepositoryItemReaderIntegrationTests.java linha: 71 Método: assertEquals("author 2 - book 1", books.get(0).getName(), "First book must be author 2 - book 1")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/RepositoryItemReaderIntegrationTests.java linha: 72 Método: assertEquals("author 2 - book 2", books.get(1).getName(), "Second book must be author 2 - book 2")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/RepositoryItemReaderIntegrationTests.java linha: 85 Método: assertEquals(2, books.size(), "Books list size must be = 2")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/RepositoryItemReaderIntegrationTests.java linha: 86 Método: assertEquals("author 3 - book 1", books.get(0).getName(), "First book must be author 3 - book 1")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/RepositoryItemReaderIntegrationTests.java linha: 87 Método: assertEquals("author 3 - book 2", books.get(1).getName(), "Second book must be author 3 - book 2")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/RepositoryItemReaderIntegrationTests.java linha: 100 Método: assertEquals(2, books.size(), "Books list size must be = 2")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/RepositoryItemReaderIntegrationTests.java linha: 101 Método: assertEquals("author 2 - book 1", books.get(0).getName(), "First book must be author 2 - book 1")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/RepositoryItemReaderIntegrationTests.java linha: 102 Método: assertEquals("author 2 - book 2", books.get(1).getName(), "Second book must be author 2 - book 2")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/RepositoryItemReaderIntegrationTests.java linha: 116 Método: assertEquals(2, books.size(), "Books list size must be = 2")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/RepositoryItemReaderIntegrationTests.java linha: 117 Método: assertEquals("author 3 - book 1", books.get(0).getName(), "First book must be author 3 - book 1")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/RepositoryItemReaderIntegrationTests.java linha: 118 Método: assertEquals("author 3 - book 2", books.get(1).getName(), "Second book must be author 3 - book 2")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/JdbcBatchItemWriterNamedParameterTests.java linha: 104 Método: assertThrows(IllegalStateException.class, writer::afterPropertiesSet)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/JdbcBatchItemWriterNamedParameterTests.java linha: 106 Método: assertTrue(message.contains("NamedParameterJdbcTemplate"), "Message does not contain 'NamedParameterJdbcTemplate'.")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/JdbcBatchItemWriterNamedParameterTests.java linha: 110 Método: assertThrows(IllegalStateException.class, writer::afterPropertiesSet)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/JdbcBatchItemWriterNamedParameterTests.java linha: 112 Método: assertTrue(message.contains("sql"), "Message does not contain 'sql'.")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/JdbcBatchItemWriterNamedParameterTests.java linha: 176 Método: assertThrows(EmptyResultDataAccessException.class, () -> writer.write(Chunk.of(new Foo("bar"))))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/JdbcBatchItemWriterNamedParameterTests.java linha: 179 Método: assertTrue(message.contains("did not update"), "Wrong message: " + message)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/JdbcBatchItemWriterNamedParameterTests.java linha: 189 Método: assertThrows(RuntimeException.class, () -> writer.write(Chunk.of(new Foo("bar"))))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/builder/HibernatePagingItemReaderBuilderTests.java linha: 162 Método: assertThrows(IllegalStateException.class, () -> new HibernatePagingItemReaderBuilder<Foo>().sessionFactory(this.sessionFactory).fetchSize(-2).build())
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/builder/HibernatePagingItemReaderBuilderTests.java linha: 167 Método: assertThrows(IllegalArgumentException.class, () -> new HibernatePagingItemReaderBuilder<Foo>().build())
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/builder/HibernatePagingItemReaderBuilderTests.java linha: 171 Método: assertThrows(IllegalArgumentException.class, () -> new HibernatePagingItemReaderBuilder<Foo>().sessionFactory(this.sessionFactory).saveState(true).build())
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/builder/HibernatePagingItemReaderBuilderTests.java linha: 175 Método: assertThrows(IllegalStateException.class, () -> new HibernatePagingItemReaderBuilder<Foo>().sessionFactory(this.sessionFactory).saveState(false).build())
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/builder/HibernateItemWriterBuilderTests.java linha: 92 Método: assertThrows(IllegalStateException.class, () -> new HibernateItemWriterBuilder<Foo>().build())
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/builder/StoredProcedureItemReaderBuilderTests.java linha: 133 Método: assertThrows(IllegalArgumentException.class, builder::build)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/builder/StoredProcedureItemReaderBuilderTests.java linha: 137 Método: assertThrows(IllegalArgumentException.class, builder::build)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/builder/StoredProcedureItemReaderBuilderTests.java linha: 141 Método: assertThrows(IllegalArgumentException.class, builder::build)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/builder/StoredProcedureItemReaderBuilderTests.java linha: 146 Método: assertThrows(IllegalArgumentException.class, builder::build)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/builder/JdbcCursorItemReaderBuilderTests.java linha: 286 Método: assertThrows(IllegalArgumentException.class, builder::build)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/builder/JdbcCursorItemReaderBuilderTests.java linha: 290 Método: assertThrows(IllegalArgumentException.class, builder::build)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/builder/JdbcCursorItemReaderBuilderTests.java linha: 294 Método: assertThrows(IllegalArgumentException.class, builder::build)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/builder/JdbcCursorItemReaderBuilderTests.java linha: 298 Método: assertThrows(IllegalArgumentException.class, builder::build)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/builder/JpaCursorItemReaderBuilderTests.java linha: 190 Método: assertThrows(IllegalArgumentException.class, builder::build)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/builder/JpaCursorItemReaderBuilderTests.java linha: 194 Método: assertThrows(IllegalArgumentException.class, builder::build)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/builder/JpaCursorItemReaderBuilderTests.java linha: 199 Método: assertThrows(IllegalArgumentException.class, builder::build)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/builder/JdbcPagingItemReaderBuilderTests.java linha: 240 Método: assertThrows(IllegalArgumentException.class, builder::build)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/builder/JdbcPagingItemReaderBuilderTests.java linha: 244 Método: assertThrows(IllegalArgumentException.class, builder::build)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/builder/JdbcPagingItemReaderBuilderTests.java linha: 248 Método: assertThrows(IllegalArgumentException.class, builder::build)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/builder/JdbcPagingItemReaderBuilderTests.java linha: 252 Método: assertThrows(IllegalArgumentException.class, builder::build)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/builder/JdbcPagingItemReaderBuilderTests.java linha: 256 Método: assertThrows(IllegalArgumentException.class, builder::build)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/builder/JdbcPagingItemReaderBuilderTests.java linha: 261 Método: assertThrows(IllegalArgumentException.class, builder::build)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/builder/JdbcPagingItemReaderBuilderTests.java linha: 266 Método: assertThrows(IllegalArgumentException.class, builder::build)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/builder/JpaPagingItemReaderBuilderTests.java linha: 196 Método: assertThrows(IllegalArgumentException.class, builder::build)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/builder/JpaPagingItemReaderBuilderTests.java linha: 200 Método: assertThrows(IllegalArgumentException.class, builder::build)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/builder/JpaPagingItemReaderBuilderTests.java linha: 204 Método: assertThrows(IllegalArgumentException.class, builder::build)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/builder/JpaPagingItemReaderBuilderTests.java linha: 209 Método: assertThrows(IllegalArgumentException.class, builder::build)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/builder/JdbcBatchItemWriterBuilderTests.java linha: 137 Método: assertThrows(EmptyResultDataAccessException.class, () -> writer.write(items))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/builder/JdbcBatchItemWriterBuilderTests.java linha: 176 Método: assertThrows(IllegalStateException.class, builder::build)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/builder/JdbcBatchItemWriterBuilderTests.java linha: 181 Método: assertThrows(IllegalArgumentException.class, builder::build)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/builder/JdbcBatchItemWriterBuilderTests.java linha: 186 Método: assertThrows(IllegalStateException.class, builder::build)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/builder/HibernateCursorItemReaderBuilderTests.java linha: 174 Método: assertThrows(IllegalStateException.class, () -> new HibernateCursorItemReaderBuilder<Foo>().fetchSize(-2).build())
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/builder/HibernateCursorItemReaderBuilderTests.java linha: 178 Método: assertThrows(IllegalStateException.class, () -> new HibernateCursorItemReaderBuilder<Foo>().build())
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/builder/HibernateCursorItemReaderBuilderTests.java linha: 182 Método: assertThrows(IllegalStateException.class, () -> new HibernateCursorItemReaderBuilder<Foo>().sessionFactory(this.sessionFactory).saveState(true).build())
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/builder/HibernateCursorItemReaderBuilderTests.java linha: 186 Método: assertThrows(IllegalStateException.class, () -> new HibernateCursorItemReaderBuilder<Foo>().sessionFactory(this.sessionFactory).saveState(false).build())
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/builder/JpaItemWriterBuilderTests.java linha: 79 Método: assertThrows(IllegalStateException.class, () -> new JpaItemWriterBuilder<String>().build())
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/HibernateCursorItemReaderIntegrationTests.java linha: 44 Método: assertThrows(IllegalStateException.class, () -> inputSource.setUseStatelessSession(false))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/AbstractJdbcItemReaderIntegrationTests.java linha: 147 Método: assertThrows(IllegalStateException.class, () -> getAsItemStream(itemReader).open(executionContext))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/util/ExecutionContextUserSupportTests.java linha: 45 Método: assertThrows(IllegalArgumentException.class, () -> tested.getKey("arbitrary string"))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/util/FileUtilsTests.java linha: 53 Método: assertThrows(Exception.class, () -> FileUtils.setUpOutputFile(file, false, false, false))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/util/FileUtilsTests.java linha: 80 Método: assertThrows(ItemStreamException.class, () -> FileUtils.setUpOutputFile(file, true, false, false))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/util/FileUtilsTests.java linha: 81 Método: assertThrows(ItemStreamException.class, () -> FileUtils.setUpOutputFile(file, true, false, true))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/util/FileUtilsTests.java linha: 174 Método: assertTrue(message.startsWith("Output file was not created"), "Wrong message: " + message)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/context/SynchronizedAttributeAccessorTests.java linha: 43 Método: assertEquals(accessor.hashCode(), another.hashCode(), "Object.hashCode() contract broken")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/context/RepeatContextSupportTests.java linha: 79 Método: assertThrows(RuntimeException.class, context::close)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/interceptor/RepeatOperationsInterceptorTests.java linha: 107 Método: assertThrows(IllegalStateException.class, service::service)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/interceptor/RepeatOperationsInterceptorTests.java linha: 109 Método: assertTrue(message.toLowerCase().contains("no result available"), "Wrong exception message: " + message)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/interceptor/RepeatOperationsInterceptorTests.java linha: 128 Método: assertThrows(RuntimeException.class, service::exception)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/interceptor/RepeatOperationsInterceptorTests.java linha: 135 Método: assertThrows(Error.class, service::error)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/interceptor/RepeatOperationsInterceptorTests.java linha: 181 Método: assertThrows(IllegalStateException.class, () -> interceptor.invoke(new MethodInvocation() {

    @Override
    public Method getMethod() {
        try {
            return Object.class.getMethod("toString");
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Override
    public Object[] getArguments() {
        return null;
    }

    @Override
    public AccessibleObject getStaticPart() {
        return null;
    }

    @Override
    public Object getThis() {
        return null;
    }

    @Override
    public Object proceed() throws Throwable {
        return null;
    }
}))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/interceptor/RepeatOperationsInterceptorTests.java linha: 214 Método: assertTrue(message.contains("MethodInvocation"), "Exception message should contain MethodInvocation: " + message)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/jms/SynchronousTests.java linha: 161 Método: assertTrue(msgs.contains("foo"), "Foo not on queue")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/jms/SynchronousTests.java linha: 198 Método: assertTrue(session instanceof SessionProxy, "Not a SessionProxy - wrong spring version?")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/jms/SynchronousTests.java linha: 228 Método: assertTrue(msgs.contains("foo"), "Foo not on queue")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/jms/SynchronousTests.java linha: 229 Método: assertTrue(msgs.contains("bar"), "Bar not on queue")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/jms/AsynchronousTests.java linha: 173 Método: assertTrue(msgs.contains("foo"), "Foo not on queue")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/support/TaskExecutorRepeatTemplateAsynchronousTests.java linha: 67 Método: assertThrows(IllegalStateException.class, () -> template.iterate(context -> {
    count++;
    throw new IllegalStateException("foo!");
}))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/support/TaskExecutorRepeatTemplateAsynchronousTests.java linha: 73 Método: assertTrue(count >= 1, "Too few attempts: " + count)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/support/TaskExecutorRepeatTemplateAsynchronousTests.java linha: 74 Método: assertTrue(count <= 10, "Too many attempts: " + count)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/support/TaskExecutorRepeatTemplateAsynchronousTests.java linha: 100 Método: assertTrue(count >= 1, "Too few attempts: " + count)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/support/TaskExecutorRepeatTemplateAsynchronousTests.java linha: 101 Método: assertTrue(count <= 10, "Too many attempts: " + count)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/support/TaskExecutorRepeatTemplateAsynchronousTests.java linha: 116 Método: assertNotSame(context, context.getParent(), "Nested batch should have new session")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/support/TaskExecutorRepeatTemplateAsynchronousTests.java linha: 130 Método: assertTrue(count >= 1, "Too few attempts: " + count)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/support/TaskExecutorRepeatTemplateAsynchronousTests.java linha: 131 Método: assertTrue(count <= 10, "Too many attempts: " + count)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/support/TaskExecutorRepeatTemplateBulkAsynchronousTests.java linha: 217 Método: assertThrows(Exception.class, () -> template.iterate(callback))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/support/TaskExecutorRepeatTemplateBulkAsynchronousTests.java linha: 246 Método: assertThrows(OutOfMemoryError.class, () -> template.iterate(callback))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/support/ThrottleLimitResultQueueTests.java linha: 49 Método: assertThrows(IllegalArgumentException.class, () -> queue.put("foo"))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/support/ThrottleLimitResultQueueTests.java linha: 55 Método: assertThrows(NoSuchElementException.class, queue::take)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/support/ThrottleLimitResultQueueTests.java linha: 79 Método: assertTrue(t1 - t0 > 50, "Did not block on expect (throttle limit should have been hit): time taken=" + (t1 - t0))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/support/ChunkedRepeatTests.java linha: 107 Método: assertTrue(count >= 3, "Expected at least 3 chunks but found: " + count)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/support/SimpleRepeatTemplateTests.java linha: 86 Método: assertThrows(IllegalStateException.class, () -> template.iterate(context -> {
    count++;
    throw new IllegalStateException("foo!");
}))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/support/SimpleRepeatTemplateTests.java linha: 93 Método: assertTrue(count <= 10, "Too many attempts: " + count)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/support/SimpleRepeatTemplateTests.java linha: 153 Método: assertThrows(RuntimeException.class, () -> template.iterate(context1 -> {
    count++;
    throw new RuntimeException("foo");
}))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/support/SimpleRepeatTemplateTests.java linha: 177 Método: assertThrows(RuntimeException.class, () -> template.iterate(context -> {
    count++;
    throw new RuntimeException("foo");
}))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/support/SimpleRepeatTemplateTests.java linha: 253 Método: assertNotSame(context, context.getParent(), "Nested batch should have new session")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/support/SimpleRepeatTemplateTests.java linha: 301 Método: assertNotSame(context, context.getParent(), "Nested batch should have new session")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/support/SimpleRepeatTemplateTests.java linha: 331 Método: assertThrows(Exception.class, () -> template.iterate(context -> {
    count++;
    if (count < 2) {
        return RepeatStatus.CONTINUABLE;
    }
    throw new RuntimeException("Barf second try count=" + count);
}))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/support/SimpleRepeatTemplateTests.java linha: 352 Método: assertThrows(RuntimeException.class, () -> template.iterate(new ItemReaderRepeatCallback<>(provider, processor) {

    @Override
    public RepeatStatus doInIteration(RepeatContext context) throws Exception {
        RepeatStatus result = super.doInIteration(context);
        if (processor.count >= 2) {
            context.setCompleteOnly();
            throw new RuntimeException("Barf second try count=" + processor.count);
        }
        return result;
    }
}))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/support/SimpleRepeatTemplateTests.java linha: 423 Método: assertThrows(RepeatException.class, () -> template.iterate(context -> {
    throw new RepeatException("typically thrown by nested repeat template", exception);
}))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/listener/RepeatListenerTests.java linha: 212 Método: assertThrows(IllegalStateException.class, () -> template.iterate(context -> {
    throw new IllegalStateException("Bogus");
}))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/listener/RepeatListenerTests.java linha: 234 Método: assertThrows(IllegalStateException.class, () -> template.iterate(context -> {
    throw new IllegalStateException("Bogus");
}))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/listener/RepeatListenerTests.java linha: 260 Método: assertThrows(IllegalStateException.class, () -> template.iterate(context -> {
    throw new IllegalStateException("Bogus");
}))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/exception/DefaultExceptionHandlerTests.java linha: 33 Método: assertThrows(RuntimeException.class, () -> handler.handleException(context, new RuntimeException("Foo")))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/exception/DefaultExceptionHandlerTests.java linha: 40 Método: assertThrows(Error.class, () -> handler.handleException(context, new Error("Foo")))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/exception/RethrowOnThresholdExceptionHandlerTests.java linha: 41 Método: assertThrows(RuntimeException.class, () -> handler.handleException(context, new RuntimeException("Foo")))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/exception/RethrowOnThresholdExceptionHandlerTests.java linha: 48 Método: assertThrows(Error.class, () -> handler.handleException(context, new Error("Foo")))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/exception/RethrowOnThresholdExceptionHandlerTests.java linha: 68 Método: assertThrows(RuntimeException.class, () -> handler.handleException(context, new RuntimeException("Foo")))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/exception/RethrowOnThresholdExceptionHandlerTests.java linha: 90 Método: assertThrows(RuntimeException.class, () -> handler.handleException(context, new RuntimeException("Foo")))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/exception/LogOrRethrowExceptionHandlerTests.java linha: 64 Método: assertThrows(RuntimeException.class, () -> handler.handleException(context, new RuntimeException("Foo")))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/exception/LogOrRethrowExceptionHandlerTests.java linha: 71 Método: assertThrows(Error.class, () -> handler.handleException(context, new Error("Foo")))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/exception/SimpleLimitExceptionHandlerTests.java linha: 50 Método: assertThrows(IllegalArgumentException.class, () -> handler.handleException(null, new RuntimeException("foo")))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/exception/SimpleLimitExceptionHandlerTests.java linha: 55 Método: assertThrows(IllegalArgumentException.class, () -> handler.handleException(null, null))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/exception/SimpleLimitExceptionHandlerTests.java linha: 61 Método: assertThrows(RuntimeException.class, () -> handler.handleException(new RepeatContextSupport(null), throwable))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/exception/SimpleLimitExceptionHandlerTests.java linha: 80 Método: assertThrows(RuntimeException.class, () -> handler.handleException(new RepeatContextSupport(null), throwable))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/exception/SimpleLimitExceptionHandlerTests.java linha: 138 Método: assertThrows(RuntimeException.class, () -> {
    RepeatContextSupport context = new RepeatContextSupport(parent);
    handler.handleException(context, throwable);
    context = new RepeatContextSupport(parent);
    handler.handleException(context, throwable);
})
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/exception/SimpleLimitExceptionHandlerTests.java linha: 199 Método: assertThrows(RuntimeException.class, () -> {
    for (Throwable throwable : throwables) {
        handler.handleException(context, throwable);
    }
})
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/exception/SimpleLimitExceptionHandlerTests.java linha: 207 Método: assertThrows(RuntimeException.class, () -> handler.handleException(context, new RuntimeException("foo")))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/poller/DirectPollerTests.java linha: 108 Método: assertThrows(ExecutionException.class, () -> poller.poll(callback).get(1000L, TimeUnit.MILLISECONDS))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/retry/jms/ExternalRetryTests.java linha: 115 Método: assertThrows(Exception.class, () -> new TransactionTemplate(transactionManager).execute(status -> {
    try {
        final Object item = provider.read();
        RetryCallback<Object, Exception> callback = context -> {
            writer.write(Chunk.of(item));
            return null;
        };
        return retryTemplate.execute(callback, new DefaultRetryState(item));
    } catch (Exception e) {
        throw new RuntimeException(e.getMessage(), e);
    }
}))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/retry/jms/SynchronousTests.java linha: 340 Método: assertThrows(RuntimeException.class, () -> retryTemplate.execute((RetryCallback<String, Exception>) status -> {
    TransactionTemplate transactionTemplate = new TransactionTemplate(transactionManager);
    transactionTemplate.setPropagationBehavior(TransactionTemplate.PROPAGATION_REQUIRES_NEW);
    return transactionTemplate.execute(status1 -> {
        final String text = (String) jmsTemplate.receiveAndConvert("queue");
        list.add(text);
        jdbcTemplate.update("INSERT into T_BARS (id,name,foo_date) values (?,?,null)", list.size(), text);
        throw new RuntimeException("Rollback!");
    });
}))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/support/LastModifiedResourceComparatorTests.java linha: 43 Método: assertThrows(IllegalArgumentException.class, () -> comparator.compare(garbage, crap))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/support/LastModifiedResourceComparatorTests.java linha: 50 Método: assertThrows(IllegalArgumentException.class, () -> comparator.compare(exists, crap))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/support/SystemPropertyInitializerTests.java linha: 59 Método: assertThrows(IllegalStateException.class, initializer::afterPropertiesSet)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/support/PropertiesConverterTests.java linha: 57 Método: assertTrue(value.contains("key1=value1"), "Wrong value: " + value)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/support/PropertiesConverterTests.java linha: 58 Método: assertTrue(value.contains("key2=value2"), "Wrong value: " + value)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/support/PropertiesConverterTests.java linha: 75 Método: Assertions.assertThrows(IllegalArgumentException.class, () -> PropertiesConverter.stringToProperties(null))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/support/PropertiesConverterTests.java linha: 86 Método: Assertions.assertThrows(IllegalArgumentException.class, () -> PropertiesConverter.propertiesToString(null))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/support/DatabaseTypeTests.java linha: 66 Método: assertThrows(IllegalArgumentException.class, () -> fromProductName("bad product name"))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/support/DatabaseTypeTests.java linha: 156 Método: assertThrows(MetaDataAccessException.class, () -> DatabaseType.fromMetaData(ds))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/support/transaction/ResourcelessTransactionManagerTests.java linha: 116 Método: assertThrows(RuntimeException.class, () -> new TransactionTemplate(transactionManager).execute(status -> {
    TransactionSynchronizationManager.registerSynchronization(new TransactionSynchronization() {

        @Override
        public void afterCompletion(int status) {
            txStatus = status;
        }
    });
    throw new RuntimeException("Rollback!");
}))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/support/transaction/ResourcelessTransactionManagerTests.java linha: 133 Método: assertThrows(RuntimeException.class, () -> transactionTemplate.execute(outerStatus -> {
    TransactionSynchronizationManager.registerSynchronization(new TransactionSynchronization() {

        @Override
        public void afterCompletion(int status) {
            txStatus = status;
            count++;
        }
    });
    transactionTemplate.execute(innerStatus -> {
        assertEquals(0, count);
        count++;
        throw new RuntimeException("Rollback!");
    });
    assertEquals(1, count);
    return null;
}))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/support/transaction/ResourcelessTransactionManagerTests.java linha: 157 Método: assertThrows(RuntimeException.class, () -> transactionTemplate.execute(outerStatus -> {
    TransactionSynchronizationManager.registerSynchronization(new TransactionSynchronization() {

        @Override
        public void afterCompletion(int status) {
            txStatus = status;
            count++;
        }
    });
    transactionTemplate.execute(innerStatus -> {
        assertEquals(0, count);
        count++;
        return null;
    });
    assertEquals(1, count);
    throw new RuntimeException("Rollback!");
}))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/support/transaction/TransactionAwareMapFactoryTests.java linha: 147 Método: assertThrows(RuntimeException.class, () -> transactionTemplate.execute((TransactionCallback<Void>) status -> {
    testAdd();
    throw new RuntimeException("Rollback!");
}))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/support/transaction/TransactionAwareMapFactoryTests.java linha: 158 Método: assertThrows(RuntimeException.class, () -> transactionTemplate.execute((TransactionCallback<Void>) status -> {
    testRemove();
    throw new RuntimeException("Rollback!");
}))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/support/transaction/TransactionAwareMapFactoryTests.java linha: 169 Método: assertThrows(RuntimeException.class, () -> transactionTemplate.execute((TransactionCallback<Void>) status -> {
    testClear();
    throw new RuntimeException("Rollback!");
}))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/support/transaction/TransactionAwareBufferedWriterTests.java linha: 254 Método: assertThrows(RuntimeException.class, () -> new TransactionTemplate(transactionManager).execute((TransactionCallback<Void>) status -> {
    try {
        writer.write("foo");
    } catch (IOException e) {
        throw new IllegalStateException("Unexpected IOException", e);
    }
    throw new RuntimeException("Planned failure");
}))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/support/transaction/TransactionAwareBufferedWriterTests.java linha: 265 Método: assertEquals("Planned failure", message, "Wrong message:  " + message)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/support/transaction/TransactionAwareBufferedWriterTests.java linha: 280 Método: assertThrows(FlushFailedException.class, () -> new TransactionTemplate(transactionManager).execute((TransactionCallback<Void>) status -> {
    try {
        writer.write("foo");
    } catch (IOException e) {
        throw new IllegalStateException("Unexpected IOException", e);
    }
    return null;
}))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/support/transaction/TransactionAwareSetFactoryTests.java linha: 96 Método: assertThrows(RuntimeException.class, () -> transactionTemplate.execute((TransactionCallback<Void>) status -> {
    testAdd();
    throw new RuntimeException("Rollback!");
}))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/support/transaction/TransactionAwareSetFactoryTests.java linha: 107 Método: assertThrows(RuntimeException.class, () -> transactionTemplate.execute((TransactionCallback<Void>) status -> {
    testRemove();
    throw new RuntimeException("Rollback!");
}))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/support/transaction/TransactionAwareSetFactoryTests.java linha: 118 Método: assertThrows(RuntimeException.class, () -> transactionTemplate.execute((TransactionCallback<Void>) status -> {
    testClear();
    throw new RuntimeException("Rollback!");
}))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/support/transaction/TransactionAwareListFactoryTests.java linha: 105 Método: assertThrows(RuntimeException.class, () -> transactionTemplate.execute((TransactionCallback<Void>) status -> {
    testAdd();
    throw new RuntimeException("Rollback!");
}))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/support/transaction/TransactionAwareListFactoryTests.java linha: 116 Método: assertThrows(RuntimeException.class, () -> transactionTemplate.execute((TransactionCallback<Void>) status -> {
    testRemove();
    throw new RuntimeException("Rollback!");
}))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/support/transaction/TransactionAwareListFactoryTests.java linha: 127 Método: assertThrows(RuntimeException.class, () -> transactionTemplate.execute((TransactionCallback<Void>) status -> {
    testClear();
    throw new RuntimeException("Rollback!");
}))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/support/transaction/ConcurrentTransactionAwareProxyTests.java linha: 81 Método: assertThrows(Throwable.class, () -> testSet(set))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/support/transaction/ConcurrentTransactionAwareProxyTests.java linha: 105 Método: assertThrows(ExecutionException.class, () -> testMap(map))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/support/transaction/ConcurrentTransactionAwareProxyTests.java linha: 177 Método: assertEquals(innerMax, result.size(), "Wrong number of results in inner task")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/support/transaction/ConcurrentTransactionAwareProxyTests.java linha: 180 Método: assertEquals(innerMax * outerMax, list.size(), "Wrong number of results in aggregate")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/support/AnnotationMethodResolverTests.java linha: 46 Método: assertThrows(IllegalArgumentException.class, () -> resolver.findMethod(MultipleAnnotationTestBean.class))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/support/SimpleMethodInvokerTests.java linha: 81 Método: assertThrows(IllegalArgumentException.class, () -> methodInvoker.invokeMethod(value))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/support/SimpleMethodInvokerTests.java linha: 87 Método: assertThrows(IllegalArgumentException.class, () -> new SimpleMethodInvoker(testClass, "beforeWithTooManyArguments", String.class))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/support/PatternMatcherTests.java linha: 125 Método: assertThrows(IllegalStateException.class, () -> matcher.match("bat"))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/support/DefaultPropertyEditorRegistrarTests.java linha: 52 Método: assertThrows(IllegalArgumentException.class, () -> mapper.setCustomEditors(customEditors))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/support/DefaultPropertyEditorRegistrarTests.java linha: 72 Método: assertThrows(IllegalArgumentException.class, () -> mapper.setCustomEditors(customEditors))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/container/jms/BatchMessageListenerContainerTests.java linha: 69 Método: assertTrue(received, "Message not received")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/container/jms/BatchMessageListenerContainerTests.java linha: 89 Método: assertFalse(received, "Message not received")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/container/jms/BatchMessageListenerContainerTests.java linha: 99 Método: assertThrows(IllegalStateException.class, () -> doTestWithException(new IllegalStateException("No way!"), true, 2))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/container/jms/BatchMessageListenerContainerTests.java linha: 111 Método: assertTrue(received, "Message not received but listener not transactional so this should be true")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-infrastructure/src/test/java/org/springframework/batch/container/jms/BatchMessageListenerContainerTests.java linha: 121 Método: assertTrue(received, "Message not received but listener not transactional so this should be true")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-test/src/test/java/org/springframework/batch/test/context/BatchTestContextCustomizerTests.java linha: 67 Método: assertThrows(IllegalArgumentException.class, () -> this.contextCustomizer.customizeContext(context, mergedConfig))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-test/src/test/java/org/springframework/batch/test/ExecutionContextTestUtilsTests.java linha: 55 Método: assertThrows(IllegalArgumentException.class, () -> ExecutionContextTestUtils.getValueFromStepInJob(jobExecution, "spam", "foo"))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-test/src/test/java/org/springframework/batch/test/AbstractSampleJobTests.java linha: 77 Método: assertThrows(IllegalStateException.class, () -> jobLauncherTestUtils.launchStep("nonExistent"))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/annotation/JobScopeConfigurationTests.java linha: 118 Método: assertThrows(BeanCreationException.class, () -> {
    SimpleHolder value = context.getBean(SimpleHolder.class);
    assertEquals("JOB", value.call());
})
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/annotation/JobScopeConfigurationTests.java linha: 131 Método: assertThrows(BeanCreationException.class, () -> {
    SimpleHolder value = context.getBean(SimpleHolder.class);
    assertEquals("JOB", value.call());
})
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/annotation/JobScopeConfigurationTests.java linha: 152 Método: assertThrows(BeanCreationException.class, () -> {
    @SuppressWarnings("unchecked")
    Callable<String> value = context.getBean(Callable.class);
    assertEquals("JOB", value.call());
})
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/annotation/StepScopeConfigurationTests.java linha: 130 Método: assertThrows(BeanCreationException.class, () -> {
    SimpleHolder value = context.getBean(SimpleHolder.class);
    assertEquals("STEP", value.call());
})
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/annotation/StepScopeConfigurationTests.java linha: 143 Método: assertThrows(BeanCreationException.class, () -> {
    SimpleHolder value = context.getBean(SimpleHolder.class);
    assertEquals("STEP", value.call());
})
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/annotation/StepScopeConfigurationTests.java linha: 165 Método: assertThrows(BeanCreationException.class, () -> {
    @SuppressWarnings("unchecked")
    Callable<String> value = context.getBean(Callable.class);
    assertEquals("STEP", value.call());
})
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/PartitionStepParserTests.java linha: 143 Método: assertNotNull(job3, "the reference to the job3 configured in the XML file must not be null")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/PartitionStepParserTests.java linha: 159 Método: assertNotNull(taskletStep, "the taskletStep wasn't configured with a step. " + "We're trusting that the factory ensured " + "a reference was given.")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/PartitionStepParserTests.java linha: 182 Método: assertNotNull(job4, "the reference to the job4 configured in the XML file must not be null")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/PartitionStepParserTests.java linha: 199 Método: assertNotNull(taskletStep, "the taskletStep wasn't configured with a step. " + "We're trusting that the factory ensured " + "a reference was given.")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/StopCustomStatusJobParserTests.java linha: 45 Método: assertEquals("[stop]", stepNamesList.toString(), "Wrong steps executed: " + stepNamesList)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/StopCustomStatusJobParserTests.java linha: 61 Método: assertEquals("[s2]", stepNamesList.toString(), "Wrong steps executed: " + stepNamesList)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/DuplicateTransitionJobParserTests.java linha: 34 Método: assertThrows(BeanDefinitionStoreException.class, () -> new ClassPathXmlApplicationContext(ClassUtils.addResourcePathToPackagePath(getClass(), "NextAttributeMultipleFinalJobParserTests-context.xml")))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/DuplicateTransitionJobParserTests.java linha: 40 Método: assertThrows(BeanDefinitionStoreException.class, () -> new ClassPathXmlApplicationContext(ClassUtils.addResourcePathToPackagePath(getClass(), "DuplicateTransitionJobParserTests-context.xml")))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/SplitInterruptedJobParserTests.java linha: 53 Método: assertTrue(count < 10, "Timed out waiting for job to stop: " + jobExecution)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/SplitInterruptedJobParserTests.java linha: 58 Método: assertTrue(stepNamesList.contains("stop"), "Wrong step names: " + stepNamesList)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/AutoRegisteringStepScopeTests.java linha: 37 Método: assertEquals(1, beans.size(), "StepScope not defined properly")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/AutoRegisteringStepScopeTests.java linha: 45 Método: assertEquals(1, beans.size(), "StepScope not defined properly")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/ParentStepFactoryBeanParserTests.java linha: 39 Método: assertNotNull(step, "Step not parsed")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/ParentStepFactoryBeanParserTests.java linha: 42 Método: assertTrue(chunkProcessor instanceof FaultTolerantChunkProcessor<?, ?>, "Wrong processor type")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/ParentStepFactoryBeanParserTests.java linha: 50 Método: assertNotNull(step, "Step not parsed")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/ParentStepFactoryBeanParserTests.java linha: 53 Método: assertTrue(chunkProcessor instanceof FaultTolerantChunkProcessor<?, ?>, "Wrong processor type")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/ParentStepFactoryBeanParserTests.java linha: 61 Método: assertNotNull(step, "Step not parsed")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/ParentStepFactoryBeanParserTests.java linha: 64 Método: assertTrue(chunkProcessor instanceof FaultTolerantChunkProcessor<?, ?>, "Wrong processor type")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/ParentStepFactoryBeanParserTests.java linha: 73 Método: assertNotNull(step, "Step not parsed")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/ParentStepFactoryBeanParserTests.java linha: 76 Método: assertTrue(chunkProcessor instanceof FaultTolerantChunkProcessor<?, ?>, "Wrong processor type")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/ParentStepFactoryBeanParserTests.java linha: 85 Método: assertNotNull(step, "Step not parsed")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/ParentStepFactoryBeanParserTests.java linha: 88 Método: assertTrue(chunkProcessor instanceof FaultTolerantChunkProcessor<?, ?>, "Wrong processor type")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/JobParserValidatorTests.java linha: 62 Método: assertThrows(JobParametersInvalidException.class, () -> validator.validate(new JobParameters()))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/JobParserValidatorTests.java linha: 71 Método: assertThrows(JobParametersInvalidException.class, () -> validator.validate(new JobParameters()))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/JobParserValidatorTests.java linha: 80 Método: assertThrows(JobParametersInvalidException.class, () -> validator.validate(new JobParameters()))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/StepWithSimpleTaskJobParserTests.java linha: 79 Método: assertTrue(step instanceof TaskletStep, "Wrong type for step name=" + stepName + ": " + step)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/JobParserExceptionTests.java linha: 31 Método: assertThrows(BeanDefinitionParsingException.class, () -> new ClassPathXmlApplicationContext("org/springframework/batch/core/configuration/xml/JobParserUnreachableStepTests-context.xml"))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/JobParserExceptionTests.java linha: 39 Método: assertThrows(BeanDefinitionParsingException.class, () -> new ClassPathXmlApplicationContext("org/springframework/batch/core/configuration/xml/JobParserUnreachableStepInFlowTests-context.xml"))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/JobParserExceptionTests.java linha: 47 Método: assertThrows(BeanCreationException.class, () -> new ClassPathXmlApplicationContext("org/springframework/batch/core/configuration/xml/JobParserNextOutOfScopeTests-context.xml"))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/JobParserExceptionTests.java linha: 51 Método: assertTrue(message.matches(".*Missing state for \\[StateTransition: \\[state=.*s2, pattern=\\*, next=.*s3\\]\\]"), "Wrong message: " + message)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/JobParserExceptionTests.java linha: 58 Método: assertThrows(BeanDefinitionParsingException.class, () -> new ClassPathXmlApplicationContext("org/springframework/batch/core/configuration/xml/JobParserWrongSchemaInRootTests-context.xml"))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/JobParserExceptionTests.java linha: 62 Método: assertTrue(message.startsWith("Configuration problem: You are using a version of the spring-batch XSD"), "Wrong message: " + message)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/EndTransitionJobParserTests.java linha: 64 Método: assertThrows(JobInstanceAlreadyCompleteException.class, this::createJobExecution)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/JobParserJobFactoryBeanTests.java linha: 28 Método: assertTrue(factory.isSingleton(), "Expected singleton")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/ChunkElementParserTests.java linha: 68 Método: assertNotNull(step, "Step not parsed")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/ChunkElementParserTests.java linha: 71 Método: assertTrue(chunkProcessor instanceof SimpleChunkProcessor, "Wrong processor type")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/ChunkElementParserTests.java linha: 79 Método: assertNotNull(step, "Step not parsed")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/ChunkElementParserTests.java linha: 87 Método: assertNotNull(step, "Step not parsed")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/ChunkElementParserTests.java linha: 92 Método: assertThrows(BeanCreationException.class, () -> new ClassPathXmlApplicationContext("org/springframework/batch/core/configuration/xml/ChunkElementIllegalSkipAndRetryAttributeParserTests-context.xml"))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/ChunkElementParserTests.java linha: 140 Método: assertNotNull(step, "Step not parsed")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/ChunkElementParserTests.java linha: 145 Método: assertFalse(processorTransactional, "Flag not set")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/ChunkElementParserTests.java linha: 153 Método: assertNotNull(step, "Step not parsed")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/ChunkElementParserTests.java linha: 161 Método: assertThrows(BeanCreationException.class, () -> new ClassPathXmlApplicationContext("org/springframework/batch/core/configuration/xml/ChunkElementIllegalTransactionalAttributeParserTests-context.xml"))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/ChunkElementParserTests.java linha: 165 Método: assertTrue(msg.contains("The field 'processor-transactional' cannot be false if 'reader-transactional"), "Wrong message: " + msg)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/StepWithBasicProcessTaskJobParserTests.java linha: 71 Método: assertEquals(10, ci, "wrong chunk-size:")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/StepWithBasicProcessTaskJobParserTests.java linha: 73 Método: assertEquals(2, ((Set<StepExecutionListener>) listeners).size(), "wrong number of listeners:")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/StepWithBasicProcessTaskJobParserTests.java linha: 75 Método: assertEquals(1, ((ItemStream[]) streams).length, "wrong number of streams:")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/StepParserStepFactoryBeanTests.java linha: 66 Método: assertThrows(StepBuilderException.class, fb::getObject)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/StepParserStepFactoryBeanTests.java linha: 101 Método: assertThrows(StepBuilderException.class, fb::getObject)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/StepParserStepFactoryBeanTests.java linha: 159 Método: assertThrows(IllegalStateException.class, fb::getObject)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/StepParserStepFactoryBeanTests.java linha: 190 Método: assertThrows(IllegalArgumentException.class, fb::getObject)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/StepWithFaultTolerantProcessTaskJobParserTests.java linha: 78 Método: assertEquals(10, ci, "wrong chunk-size:")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/StepWithFaultTolerantProcessTaskJobParserTests.java linha: 80 Método: assertEquals(20, sl, "wrong skip-limit:")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/StepWithFaultTolerantProcessTaskJobParserTests.java linha: 82 Método: assertEquals(3, rl, "wrong retry-limit:")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/StepWithFaultTolerantProcessTaskJobParserTests.java linha: 84 Método: assertEquals(100, cc, "wrong cache-capacity:")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/StepWithFaultTolerantProcessTaskJobParserTests.java linha: 85 Método: assertEquals(Propagation.REQUIRED, ReflectionTestUtils.getField(factory, "propagation"), "wrong transaction-attribute:")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/StepWithFaultTolerantProcessTaskJobParserTests.java linha: 87 Método: assertEquals(Isolation.DEFAULT, ReflectionTestUtils.getField(factory, "isolation"), "wrong transaction-attribute:")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/StepWithFaultTolerantProcessTaskJobParserTests.java linha: 89 Método: assertEquals(10, ReflectionTestUtils.getField(factory, "transactionTimeout"), "wrong transaction-attribute:")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/StepWithFaultTolerantProcessTaskJobParserTests.java linha: 91 Método: assertEquals(true, txq, "wrong reader-transactional-queue:")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/StepWithFaultTolerantProcessTaskJobParserTests.java linha: 93 Método: assertEquals(ConcurrentTaskExecutor.class, te.getClass(), "wrong task-executor:")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/StepWithFaultTolerantProcessTaskJobParserTests.java linha: 95 Método: assertEquals(2, ((Set<StepExecutionListener>) listeners).size(), "wrong number of listeners:")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/StepWithFaultTolerantProcessTaskJobParserTests.java linha: 97 Método: assertEquals(2, ((RetryListener[]) retryListeners).length, "wrong number of retry-listeners:")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/StepWithFaultTolerantProcessTaskJobParserTests.java linha: 99 Método: assertEquals(1, ((ItemStream[]) streams).length, "wrong number of streams:")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/AutoRegisteringJobScopeTests.java linha: 38 Método: assertEquals(1, beans.size(), "JobScope not defined properly")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/AutoRegisteringJobScopeTests.java linha: 46 Método: assertEquals(1, beans.size(), "JobScope not defined properly")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/StopIncompleteJobParserTests.java linha: 45 Método: assertEquals("[fail]", stepNamesList.toString(), "Wrong steps executed: " + stepNamesList)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/StopIncompleteJobParserTests.java linha: 61 Método: assertEquals("[s2]", stepNamesList.toString(), "Wrong steps executed: " + stepNamesList)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/SplitDifferentResultsFailSecondJobParserTests.java linha: 40 Método: assertEquals(3, stepNamesList.size(), "Wrong step names: " + stepNamesList)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/SplitDifferentResultsFailSecondJobParserTests.java linha: 41 Método: assertTrue(stepNamesList.contains("s1"), "Wrong step names: " + stepNamesList)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/SplitDifferentResultsFailSecondJobParserTests.java linha: 42 Método: assertTrue(stepNamesList.contains("fail"), "Wrong step names: " + stepNamesList)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/StepNameTests.java linha: 66 Método: assertFalse(stepNames.isEmpty(), "Job has no steps: " + jobName)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/StepNameTests.java linha: 69 Método: assertEquals(stepName, registeredName, "Step name not equal to registered value: " + stepName + "!=" + registeredName + ", " + jobName)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/SplitDifferentResultsFailFirstJobParserTests.java linha: 40 Método: assertEquals("[fail, s1]", stepNamesList.toString(), "Wrong step names: " + stepNamesList)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/StepParserTests.java linha: 91 Método: assertEquals(25, bean.getStartLimit(), "wrong start-limit:")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/StepParserTests.java linha: 101 Método: assertTrue(beans.containsKey("s1"), "'s1' bean not found")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/StepParserTests.java linha: 103 Método: assertEquals("s1", s1.getName(), "wrong name")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/StepParserTests.java linha: 108 Método: assertThrows(BeanDefinitionParsingException.class, () -> new ClassPathXmlApplicationContext("org/springframework/batch/core/configuration/xml/StepParserCommitIntervalCompletionPolicyTests-context.xml"))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/StepParserTests.java linha: 117 Método: assertTrue(beans.containsKey("s1"), "'s1' bean not found")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/StepParserTests.java linha: 129 Método: assertTrue(beans.containsKey("s1"), "'s1' bean not found")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/StepParserTests.java linha: 144 Método: assertThrows(BeanDefinitionParsingException.class, () -> new ClassPathXmlApplicationContext("org/springframework/batch/core/configuration/xml/StepParserNoCommitIntervalOrCompletionPolicyTests-context.xml"))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/StepParserTests.java linha: 150 Método: assertThrows(BeanDefinitionParsingException.class, () -> new ClassPathXmlApplicationContext("org/springframework/batch/core/configuration/xml/StepParserBadStepListenerTests-context.xml"))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/StepParserTests.java linha: 156 Método: assertThrows(BeanDefinitionParsingException.class, () -> new ClassPathXmlApplicationContext("org/springframework/batch/core/configuration/xml/StepParserBadRetryListenerTests-context.xml"))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/support/DefaultJobLoaderTests.java linha: 151 Método: assertThrows(UnsupportedOperationException.class, () -> jobLoader.load(factory))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/support/DefaultJobLoaderTests.java linha: 194 Método: assertThrows(NoSuchStepException.class, () -> stepRegistry.getStep(jobName, stepName))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/support/MapJobRegistryTests.java linha: 44 Método: assertThrows(NoSuchJobException.class, () -> registry.getJob("foo"))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/support/MapJobRegistryTests.java linha: 52 Método: assertThrows(DuplicateJobException.class, () -> registry.register(jobFactory))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/support/MapJobRegistryTests.java linha: 60 Método: assertThrows(DuplicateJobException.class, () -> registry.register(jobFactory))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/support/DefaultBatchConfigurationTests.java linha: 71 Método: Assertions.assertThrows(BeanCreationException.class, new Executable() {

    @Override
    public void execute() throws Throwable {
        new AnnotationConfigApplicationContext(MyJobConfigurationWithoutDataSource.class);
    }
})
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/support/DefaultBatchConfigurationTests.java linha: 81 Método: Assertions.assertThrows(BeanCreationException.class, new Executable() {

    @Override
    public void execute() throws Throwable {
        new AnnotationConfigApplicationContext(MyJobConfigurationWithoutTransactionManager.class);
    }
})
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/support/AutomaticJobRegistrarTests.java linha: 151 Método: assertThrows(BeanCreationException.class, registrar::start)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/support/JobRegistryBeanPostProcessorTests.java linha: 41 Método: assertThrows(IllegalStateException.class, processor::afterPropertiesSet)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/support/JobRegistryBeanPostProcessorTests.java linha: 85 Método: assertThrows(FatalBeanException.class, () -> processor.postProcessAfterInitialization(job, "spam"))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/support/GenericApplicationContextFactoryTests.java linha: 59 Método: assertTrue(context.getId().contains("trivial-context.xml"), "Wrong id: " + context)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/support/GenericApplicationContextFactoryTests.java linha: 78 Método: assertEquals(4, context.getBean("foo", Foo.class).values[1], 0.01)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/support/GenericApplicationContextFactoryTests.java linha: 120 Método: assertEquals(4, context.getBean("foo", Foo.class).values[1], 0.01)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/support/GenericApplicationContextFactoryTests.java linha: 135 Método: assertEquals(4, context.getBean("foo", Foo.class).values[1], 0.01)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/support/GenericApplicationContextFactoryTests.java linha: 170 Método: assertEquals(4, context.getBean("foo", Foo.class).values[1], 0.01)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/support/GenericApplicationContextFactoryTests.java linha: 189 Método: assertThrows(IllegalArgumentException.class, factory::createApplicationContext)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/support/MapStepRegistryTests.java linha: 48 Método: assertThrows(IllegalArgumentException.class, () -> stepRegistry.register(null, new HashSet<>()))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/support/MapStepRegistryTests.java linha: 54 Método: assertThrows(IllegalArgumentException.class, () -> stepRegistry.register("fdsfsd", null))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/support/MapStepRegistryTests.java linha: 106 Método: assertThrows(DuplicateJobException.class, () -> stepRegistry.register(jobName, getStepCollection(createStep("myFourthStep"), createStep("lastOne"))))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/support/MapStepRegistryTests.java linha: 113 Método: assertThrows(IllegalArgumentException.class, () -> stepRegistry.getStep(null, "a step"))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/support/MapStepRegistryTests.java linha: 122 Método: assertThrows(IllegalArgumentException.class, () -> stepRegistry.getStep(null, stepName))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/support/MapStepRegistryTests.java linha: 142 Método: assertThrows(IllegalArgumentException.class, () -> stepRegistry.unregisterStepsFromJob(null))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/support/MapStepRegistryTests.java linha: 171 Método: assertThrows(NoSuchJobException.class, () -> stepRegistry.getStep(jobName, "a step"))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/configuration/support/MapStepRegistryTests.java linha: 187 Método: assertThrows(NoSuchStepException.class, () -> stepRegistry.getStep(jobName, stepName))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/StepExecutionTests.java linha: 161 Método: assertThrows(IllegalArgumentException.class, () -> new StepExecution(null, new JobExecution(new JobInstance(null, "job"), null)))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/StepExecutionTests.java linha: 167 Método: assertTrue(execution.toString().contains("read"), "Should contain read count: " + execution.toString())
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/StepExecutionTests.java linha: 168 Método: assertTrue(execution.toString().contains("write"), "Should contain write count: " + execution.toString())
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/StepExecutionTests.java linha: 169 Método: assertTrue(execution.toString().contains("filter"), "Should contain filter count: " + execution.toString())
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/StepExecutionTests.java linha: 170 Método: assertTrue(execution.toString().contains("commit"), "Should contain commit count: " + execution.toString())
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/StepExecutionTests.java linha: 171 Método: assertTrue(execution.toString().contains("rollback"), "Should contain rollback count: " + execution.toString())
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/StepExecutionTests.java linha: 240 Método: assertTrue(new Entity(execution.getId()).hashCode() != execution.hashCode(), "Hash code same as parent")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/StepExecutionTests.java linha: 245 Método: assertTrue(new Entity(execution.getId()).hashCode() != blankExecution.hashCode(), "Hash code not same as parent")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/observability/BatchMetricsTests.java linha: 151 Método: assertDoesNotThrow(() -> Metrics.globalRegistry.get("spring.batch.job.launch.count").counter(), "There should be a meter of type COUNTER named spring.batch.job.launch.count registered in the global registry")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/observability/BatchMetricsTests.java linha: 154 Método: assertDoesNotThrow(() -> Metrics.globalRegistry.get("spring.batch.job").tag("spring.batch.job.name", "job").tag("spring.batch.job.status", "COMPLETED").timer(), "There should be a meter of type TIMER named spring.batch.job registered in the global registry")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/observability/BatchMetricsTests.java linha: 159 Método: assertDoesNotThrow(() -> Metrics.globalRegistry.get("spring.batch.job.active").tag("spring.batch.job.active.name", "job").longTaskTimer(), "There should be a meter of type LONG_TASK_TIMER named spring.batch.job.active" + " registered in the global registry")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/observability/BatchMetricsTests.java linha: 167 Método: assertDoesNotThrow(() -> Metrics.globalRegistry.get("spring.batch.step").tag("spring.batch.step.name", "step1").tag("spring.batch.step.job.name", "job").tag("spring.batch.step.status", "COMPLETED").timer(), "There should be a meter of type TIMER named spring.batch.step registered in the global registry")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/observability/BatchMetricsTests.java linha: 174 Método: assertDoesNotThrow(() -> Metrics.globalRegistry.get("spring.batch.step").tag("spring.batch.step.name", "step2").tag("spring.batch.step.job.name", "job").tag("spring.batch.step.status", "COMPLETED").timer(), "There should be a meter of type TIMER named spring.batch.step registered in the global registry")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/observability/BatchMetricsTests.java linha: 179 Método: assertDoesNotThrow(() -> Metrics.globalRegistry.get("spring.batch.item.read").tag("spring.batch.item.read.job.name", "job").tag("spring.batch.item.read.step.name", "step2").tag("spring.batch.item.read.status", "SUCCESS").timer(), "There should be a meter of type TIMER named spring.batch.item.read registered in the global registry")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/observability/BatchMetricsTests.java linha: 185 Método: assertDoesNotThrow(() -> Metrics.globalRegistry.get("spring.batch.item.process").tag("spring.batch.item.process.job.name", "job").tag("spring.batch.item.process.step.name", "step2").tag("spring.batch.item.process.status", "SUCCESS").timer(), "There should be a meter of type TIMER named spring.batch.item.process registered in the global registry")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/observability/BatchMetricsTests.java linha: 190 Método: assertDoesNotThrow(() -> Metrics.globalRegistry.get("spring.batch.chunk.write").tag("spring.batch.chunk.write.job.name", "job").tag("spring.batch.chunk.write.step.name", "step2").tag("spring.batch.chunk.write.status", "SUCCESS").timer(), "There should be a meter of type TIMER named spring.batch.chunk.write registered in the global registry")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/observability/BatchMetricsTests.java linha: 197 Método: assertDoesNotThrow(() -> Metrics.globalRegistry.get("spring.batch.step").tag("spring.batch.step.name", "step3").tag("spring.batch.step.job.name", "job").tag("spring.batch.step.status", "COMPLETED").timer(), "There should be a meter of type TIMER named spring.batch.step registered in the global registry")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/observability/BatchMetricsTests.java linha: 202 Método: assertDoesNotThrow(() -> Metrics.globalRegistry.get("spring.batch.item.read").tag("spring.batch.item.read.job.name", "job").tag("spring.batch.item.read.step.name", "step3").tag("spring.batch.item.read.status", "SUCCESS").timer(), "There should be a meter of type TIMER named spring.batch.item.read registered in the global registry")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/observability/BatchMetricsTests.java linha: 208 Método: assertDoesNotThrow(() -> Metrics.globalRegistry.get("spring.batch.item.process").tag("spring.batch.item.process.job.name", "job").tag("spring.batch.item.process.step.name", "step3").tag("spring.batch.item.process.status", "SUCCESS").timer(), "There should be a meter of type TIMER named spring.batch.item.process registered in the global registry")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/observability/BatchMetricsTests.java linha: 213 Método: assertDoesNotThrow(() -> Metrics.globalRegistry.get("spring.batch.chunk.write").tag("spring.batch.chunk.write.job.name", "job").tag("spring.batch.chunk.write.step.name", "step3").tag("spring.batch.chunk.write.status", "SUCCESS").timer(), "There should be a meter of type TIMER named spring.batch.chunk.write registered in the global registry")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/scope/context/ChunkContextTests.java linha: 59 Método: assertTrue(value.contains("stepContext="), "Wrong toString: " + value)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/scope/context/ChunkContextTests.java linha: 60 Método: assertTrue(value.contains("complete=false"), "Wrong toString: " + value)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/scope/context/ChunkContextTests.java linha: 61 Método: assertTrue(value.contains("attributes=[]"), "Wrong toString: " + value)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/scope/context/JobContextTests.java linha: 64 Método: assertThrows(IllegalArgumentException.class, () -> new JobContext(null))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/scope/context/JobContextTests.java linha: 128 Método: assertThrows(RuntimeException.class, () -> context.close())
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/scope/context/JobContextTests.java linha: 173 Método: assertThrows(IllegalStateException.class, context::getId)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/scope/context/StepContextTests.java linha: 58 Método: assertThrows(IllegalArgumentException.class, () -> new StepContext(null))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/scope/context/StepContextTests.java linha: 122 Método: assertThrows(RuntimeException.class, () -> context.close())
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/scope/context/StepContextTests.java linha: 183 Método: assertThrows(IllegalStateException.class, context::getId)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/scope/JobScopeTests.java linha: 63 Método: assertThrows(IllegalStateException.class, () -> scope.get("foo", new ObjectFactory<String>() {

    @Override
    public String getObject() throws BeansException {
        return foo;
    }
}))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/scope/StepScopeTests.java linha: 66 Método: assertThrows(IllegalStateException.class, () -> scope.get("foo", new ObjectFactory<Object>() {

    @Override
    public Object getObject() throws BeansException {
        return foo;
    }
}))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/scope/StepScopeProxyTargetClassOverrideIntegrationTests.java linha: 131 Método: assertTrue(((String) TestStep.getContext().getAttribute("parent.class")).matches(CGLIB_PROXY_TO_STRING_REGEX), "Scoped proxy not created")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/scope/StepScopeProxyTargetClassOverrideIntegrationTests.java linha: 140 Método: assertTrue(((String) TestStep.getContext().getAttribute("parent.class")).matches(CGLIB_PROXY_TO_STRING_REGEX), "Scoped proxy not created")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/scope/StepScopeProxyTargetClassOverrideIntegrationTests.java linha: 149 Método: assertTrue(((String) TestStep.getContext().getAttribute("parent.class")).matches(JDK_PROXY_TO_STRING_REGEX), "Scoped proxy not created")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/scope/StepScopeIntegrationTests.java linha: 81 Método: assertTrue(((String) TestStep.getContext().getAttribute("collaborator.class")).matches(PROXY_TO_STRING_REGEX), "Scoped proxy not created")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/scope/StepScopeIntegrationTests.java linha: 95 Método: assertTrue(((String) TestStep.getContext().getAttribute("parent.class")).matches(PROXY_TO_STRING_REGEX), "Scoped proxy not created")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/scope/JobScopeIntegrationTests.java linha: 80 Método: assertTrue(((String) TestJob.getContext().getAttribute("collaborator.class")).matches(PROXY_TO_STRING_REGEX), "Scoped proxy not created")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/scope/JobScopeIntegrationTests.java linha: 94 Método: assertTrue(((String) TestJob.getContext().getAttribute("parent.class")).matches(PROXY_TO_STRING_REGEX), "Scoped proxy not created")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/JobParametersBuilderTests.java linha: 95 Método: assertEquals(1, parameters.getDouble("DOUBLE").doubleValue(), 1e-15)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/JobParametersBuilderTests.java linha: 111 Método: assertEquals(1, parameters.getDouble("DOUBLE").doubleValue(), 1e-15)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/JobParametersBuilderTests.java linha: 165 Método: assertThrows(IllegalArgumentException.class, () -> this.parametersBuilder.getNextJobParameters(this.job))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/JobParametersBuilderTests.java linha: 210 Método: assertThrows(IllegalStateException.class, () -> this.parametersBuilder.getNextJobParameters(this.job))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/JobParameterTests.java linha: 45 Método: assertThrows(IllegalArgumentException.class, () -> new JobParameter((String) null, String.class, true))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/JobParameterTests.java linha: 75 Método: assertThrows(IllegalArgumentException.class, () -> new JobParameter((Date) null, Date.class, true))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/explore/support/SimpleJobExplorerTests.java linha: 197 Método: assertThrows(NoSuchJobException.class, () -> jobExplorer.getJobInstanceCount("throwException"))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/test/repository/JdbcJobRepositoryTests.java linha: 113 Método: assertThrows(JobExecutionAlreadyRunningException.class, this::doConcurrentStart)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/test/repository/JdbcJobRepositoryTests.java linha: 145 Método: assertThrows(JobExecutionAlreadyRunningException.class, this::doConcurrentStart)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/test/repository/JdbcJobRepositoryTests.java linha: 196 Método: assertEquals(1, list.size(), "Timed out waiting for JobExecution to be created")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/test/repository/JdbcJobRepositoryTests.java linha: 197 Método: assertTrue(list.get(0) instanceof JobExecution, "JobExecution not created in thread: " + list.get(0))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/test/ldif/LdifReaderTests.java linha: 99 Método: assertEquals(expectedLine, actualLine, "Line number " + lineNum + " does not match.")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/test/ldif/LdifReaderTests.java linha: 103 Método: assertNull(actualLine, "More lines than expected.  There should not be a line number " + lineNum + ".")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/test/ldif/builder/MappingLdifReaderBuilderTests.java linha: 67 Método: assertEquals("cn=Bjorn Jensen, ou=Accounting, dc=airius, dc=com", ldapAttributes.getName().toString(), "The attribute name for the second record did not match expected result")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/test/ldif/builder/MappingLdifReaderBuilderTests.java linha: 76 Método: assertEquals("cn=Barbara Jensen, ou=Product Development, dc=airius, dc=com", ldapAttributes.getName().toString(), "The attribute name for the first record did not match expected result")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/test/ldif/builder/MappingLdifReaderBuilderTests.java linha: 87 Método: assertEquals("cn=Gern Jensen, ou=Product Testing, dc=airius, dc=com", ldapAttributes.getName().toString(), "The attribute name for the third record did not match expected result")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/test/ldif/builder/MappingLdifReaderBuilderTests.java linha: 97 Método: assertEquals("cn=Barbara Jensen, ou=Product Development, dc=airius, dc=com", ldapAttributes.getName().toString(), "The attribute name for the first record did not match expected result")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/test/ldif/builder/MappingLdifReaderBuilderTests.java linha: 101 Método: assertNull(ldapAttributes, "The second read should have returned null")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/test/ldif/builder/MappingLdifReaderBuilderTests.java linha: 110 Método: assertEquals("cn=Barbara Jensen, ou=Product Development, dc=airius, dc=com", this.callbackAttributeName, "The attribute name from the callback handler did not match the  expected result")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/test/ldif/builder/MappingLdifReaderBuilderTests.java linha: 121 Método: assertEquals(1, executionContext.getInt("foo.read.count"), "foo.read.count did not have the expected result")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/test/ldif/builder/MappingLdifReaderBuilderTests.java linha: 131 Método: assertEquals(0, executionContext.size(), "ExecutionContext should have been empty")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/test/ldif/builder/MappingLdifReaderBuilderTests.java linha: 139 Método: assertThrows(ItemStreamException.class, () -> this.mappingLdifReader.open(new ExecutionContext()))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/test/ldif/builder/MappingLdifReaderBuilderTests.java linha: 141 Método: assertEquals("Failed to initialize the reader", exception.getMessage(), "IllegalStateException message did not match the expected result.")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/test/ldif/builder/MappingLdifReaderBuilderTests.java linha: 151 Método: assertThrows(IllegalArgumentException.class, () -> new MappingLdifReaderBuilder<LdapAttributes>().resource(context.getResource("classpath:/teadsfst.ldif")).build())
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/test/ldif/builder/MappingLdifReaderBuilderTests.java linha: 154 Método: assertEquals("RecordMapper is required.", exception.getMessage(), "IllegalArgumentException message did not match the expected result.")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/test/ldif/builder/LdifReaderBuilderTests.java linha: 64 Método: assertEquals("cn=Bjorn Jensen, ou=Accounting, dc=airius, dc=com", ldapAttributes.getName().toString(), "The attribute name for the second record did not match expected result")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/test/ldif/builder/LdifReaderBuilderTests.java linha: 73 Método: assertEquals("cn=Barbara Jensen, ou=Product Development, dc=airius, dc=com", ldapAttributes.getName().toString(), "The attribute name for the first record did not match expected result")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/test/ldif/builder/LdifReaderBuilderTests.java linha: 83 Método: assertEquals("cn=Gern Jensen, ou=Product Testing, dc=airius, dc=com", ldapAttributes.getName().toString(), "The attribute name for the third record did not match expected result")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/test/ldif/builder/LdifReaderBuilderTests.java linha: 92 Método: assertEquals("cn=Barbara Jensen, ou=Product Development, dc=airius, dc=com", ldapAttributes.getName().toString(), "The attribute name for the first record did not match expected result")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/test/ldif/builder/LdifReaderBuilderTests.java linha: 96 Método: assertNull(ldapAttributes, "The second read should have returned null")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/test/ldif/builder/LdifReaderBuilderTests.java linha: 104 Método: assertEquals("cn=Barbara Jensen, ou=Product Development, dc=airius, dc=com", this.callbackAttributeName, "The attribute name from the callback handler did not match the  expected result")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/test/ldif/builder/LdifReaderBuilderTests.java linha: 115 Método: assertEquals(1, executionContext.getInt("foo.read.count"), "foo.read.count did not have the expected result")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/test/ldif/builder/LdifReaderBuilderTests.java linha: 125 Método: assertEquals(0, executionContext.size(), "ExecutionContext should have been empty")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/test/ldif/builder/LdifReaderBuilderTests.java linha: 133 Método: assertThrows(ItemStreamException.class, () -> this.ldifReader.open(new ExecutionContext()))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/test/ldif/builder/LdifReaderBuilderTests.java linha: 135 Método: assertEquals("Failed to initialize the reader", exception.getMessage(), "IllegalStateException message did not match the expected result.")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/job/DefaultJobParametersValidatorTests.java linha: 31 Método: assertThrows(JobParametersInvalidException.class, () -> validator.validate(null))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/job/DefaultJobParametersValidatorTests.java linha: 49 Método: assertThrows(JobParametersInvalidException.class, () -> validator.validate(new JobParameters()))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/job/DefaultJobParametersValidatorTests.java linha: 62 Método: assertThrows(JobParametersInvalidException.class, () -> validator.validate(jobParameters))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/job/DefaultJobParametersValidatorTests.java linha: 76 Método: assertThrows(IllegalStateException.class, validator::afterPropertiesSet)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/job/CompositeJobParametersValidatorTests.java linha: 44 Método: assertThrows(IllegalStateException.class, compositeJobParametersValidator::afterPropertiesSet)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/job/CompositeJobParametersValidatorTests.java linha: 50 Método: assertThrows(IllegalStateException.class, compositeJobParametersValidator::afterPropertiesSet)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/job/ExtendedAbstractJobTests.java linha: 117 Método: assertTrue(value.contains("name="), "Should contain name: " + value)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/job/ExtendedAbstractJobTests.java linha: 123 Método: assertThrows(IllegalStateException.class, () -> job.afterPropertiesSet())
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/job/ExtendedAbstractJobTests.java linha: 147 Método: assertTrue(description.contains("FOO"), "Wrong description: " + description)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowStepTests.java linha: 72 Método: assertThrows(IllegalStateException.class, step::afterPropertiesSet)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowExecutionTests.java linha: 40 Método: assertTrue(first.compareTo(second) < 0, "Should be negative")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowExecutionTests.java linha: 41 Método: assertTrue(second.compareTo(first) > 0, "Should be positive")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowExecutionTests.java linha: 48 Método: assertTrue(first.compareTo(second) < 0, "Should be negative")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowExecutionTests.java linha: 49 Método: assertTrue(second.compareTo(first) > 0, "Should be positive")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowExecutionTests.java linha: 56 Método: assertTrue(first.compareTo(second) < 0, "Should be negative")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowExecutionTests.java linha: 57 Método: assertTrue(second.compareTo(first) > 0, "Should be positive")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowExecutionTests.java linha: 64 Método: assertTrue(first.compareTo(second) < 0, "Should be negative")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowExecutionTests.java linha: 65 Método: assertTrue(second.compareTo(first) > 0, "Should be positive")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowExecutionTests.java linha: 72 Método: assertTrue(first.compareTo(second) < 0, "Should be negative")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowExecutionTests.java linha: 73 Método: assertTrue(second.compareTo(first) > 0, "Should be positive")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/support/StateTransitionTests.java linha: 81 Método: assertTrue(string.contains("Transition"), "Wrong string: " + string)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/support/StateTransitionTests.java linha: 82 Método: assertTrue(string.contains("start"), "Wrong string: " + string)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/support/StateTransitionTests.java linha: 83 Método: assertTrue(string.contains("CONTIN???LE"), "Wrong string: " + string)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/support/StateTransitionTests.java linha: 84 Método: assertTrue(string.contains("next="), "Wrong string: " + string)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/support/SimpleFlowTests.java linha: 57 Método: assertThrows(IllegalArgumentException.class, flow::afterPropertiesSet)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/support/SimpleFlowTests.java linha: 63 Método: assertThrows(IllegalArgumentException.class, flow::afterPropertiesSet)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/support/SimpleFlowTests.java linha: 81 Método: assertThrows(IllegalArgumentException.class, flow::afterPropertiesSet)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/support/SimpleFlowTests.java linha: 99 Método: assertThrows(FlowExecutionException.class, () -> flow.start(executor))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/support/SimpleFlowTests.java linha: 101 Método: assertTrue(message.toLowerCase().contains("next state not found"), "Wrong message: " + message)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/support/state/SimpleFlowExecutionAggregatorTests.java linha: 40 Método: assertTrue(first.compareTo(second) < 0, "Should be negative")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/support/state/SimpleFlowExecutionAggregatorTests.java linha: 41 Método: assertTrue(second.compareTo(first) > 0, "Should be positive")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/job/SimpleStepHandlerTests.java linha: 68 Método: assertThrows(IllegalStateException.class, stepHandler::afterPropertiesSet)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/job/SimpleJobTests.java linha: 358 Método: assertTrue(ex.getMessage().contains("start limit exceeded"), "Wrong message in exception: " + ex.getMessage())
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/job/SimpleJobTests.java linha: 398 Método: assertTrue(exitStatus.getExitDescription().contains("no steps configured"), "Wrong message in execution: " + exitStatus)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/JobExecutionTests.java linha: 192 Método: assertTrue(execution.toString().contains("id="), "JobExecution string does not contain id")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/JobExecutionTests.java linha: 193 Método: assertTrue(execution.toString().contains("foo"), "JobExecution string does not contain name: " + execution)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/JobExecutionTests.java linha: 199 Método: assertTrue(execution.toString().contains("id="), "JobExecution string does not contain id")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/JobExecutionTests.java linha: 200 Método: assertTrue(execution.toString().contains("job="), "JobExecution string does not contain job: " + execution)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/resource/StepExecutionSimpleCompletionPolicyTests.java linha: 61 Método: assertTrue("String does not contain chunk size", msg.contains("chunkSize=2"))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/partition/ExampleItemReaderTests.java linha: 67 Método: assertThrows(Exception.class, reader::read)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/partition/support/SimpleStepExecutionSplitterTests.java linha: 78 Método: assertNotNull(execution.getId(), "step execution partition is saved")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/partition/support/SimpleStepExecutionSplitterTests.java linha: 165 Método: assertTrue(message.contains("UNKNOWN"), "Wrong message: " + message)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/partition/support/SimpleStepExecutionSplitterTests.java linha: 204 Método: assertTrue(message.contains("STARTED"), "Wrong message: " + message)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/partition/support/SimpleStepExecutionSplitterTests.java linha: 221 Método: assertTrue(message.contains("ABANDONED"), "Wrong message: " + message)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/partition/support/RemoteStepExecutionAggregatorTests.java linha: 99 Método: assertThrows(IllegalStateException.class, () -> aggregator.aggregate(result, List.of(stepExecution1, stepExecution2)))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/partition/support/MultiResourcePartitionerTests.java linha: 47 Método: assertThrows(IllegalStateException.class, () -> partitioner.partition(0))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/partition/support/TaskExecutorPartitionHandlerTests.java linha: 82 Método: assertThrows(IllegalStateException.class, handler::afterPropertiesSet)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/partition/support/TaskExecutorPartitionHandlerTests.java linha: 84 Método: assertEquals("A Step must be provided.", message, "Wrong message: " + message)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/partition/support/TaskExecutorPartitionHandlerTests.java linha: 90 Método: assertThrows(IllegalArgumentException.class, () -> handler.handle(stepExecutionSplitter, stepExecution))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/partition/support/TaskExecutorPartitionHandlerTests.java linha: 93 Método: assertTrue(message.contains("Step"), "Wrong message: " + message)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/launch/TaskExecutorJobLauncherTests.java linha: 95 Método: assertThrows(JobParametersInvalidException.class, () -> jobLauncher.run(job, jobParameters))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/launch/TaskExecutorJobLauncherTests.java linha: 144 Método: assertThrows(JobRestartException.class, () -> jobLauncher.run(job, jobParameters))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/launch/TaskExecutorJobLauncherTests.java linha: 201 Método: assertThrows(RuntimeException.class, () -> run(ExitStatus.FAILED))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/launch/TaskExecutorJobLauncherTests.java linha: 214 Método: assertThrows(Error.class, () -> run(ExitStatus.FAILED))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/launch/TaskExecutorJobLauncherTests.java linha: 220 Método: assertThrows(IllegalStateException.class, () -> new TaskExecutorJobLauncher().afterPropertiesSet())
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/launch/TaskExecutorJobLauncherTests.java linha: 222 Método: assertTrue(exception.getMessage().toLowerCase().contains("repository"), "Message did not contain repository: " + exception.getMessage())
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/launch/TaskExecutorJobLauncherTests.java linha: 254 Método: assertThrows(JobRestartException.class, () -> testRestartStepExecutionInvalidStatus(BatchStatus.UNKNOWN))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/launch/TaskExecutorJobLauncherTests.java linha: 259 Método: assertThrows(JobExecutionAlreadyRunningException.class, () -> testRestartStepExecutionInvalidStatus(BatchStatus.STARTING))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/launch/TaskExecutorJobLauncherTests.java linha: 265 Método: assertThrows(JobExecutionAlreadyRunningException.class, () -> testRestartStepExecutionInvalidStatus(BatchStatus.STARTED))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/launch/TaskExecutorJobLauncherTests.java linha: 271 Método: assertThrows(JobExecutionAlreadyRunningException.class, () -> testRestartStepExecutionInvalidStatus(BatchStatus.STOPPING))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/launch/support/SimpleJobOperatorTests.java linha: 133 Método: assertTrue(properties.containsKey("a"), "Wrong properties")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/launch/support/SimpleJobOperatorTests.java linha: 150 Método: assertThrows(IllegalStateException.class, jobOperator::afterPropertiesSet)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/launch/support/SimpleJobOperatorTests.java linha: 187 Método: assertThrows(JobInstanceAlreadyExistsException.class, () -> jobOperator.start("foo", properties))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/launch/support/SimpleJobOperatorTests.java linha: 214 Método: assertThrows(NoSuchJobExecutionException.class, () -> jobOperator.getSummary(111L))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/launch/support/SimpleJobOperatorTests.java linha: 234 Método: assertThrows(NoSuchJobExecutionException.class, () -> jobOperator.getStepExecutionSummaries(111L))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/launch/support/SimpleJobOperatorTests.java linha: 251 Método: assertThrows(NoSuchJobException.class, () -> jobOperator.getRunningExecutions("no-such-job"))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/launch/support/SimpleJobOperatorTests.java linha: 266 Método: assertThrows(NoSuchJobExecutionException.class, () -> jobOperator.getParameters(111L))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/launch/support/SimpleJobOperatorTests.java linha: 283 Método: assertThrows(NoSuchJobException.class, () -> jobOperator.getJobInstances("no-such-job", 0, 2))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/launch/support/SimpleJobOperatorTests.java linha: 306 Método: assertTrue(names.contains("foo"), "Wrong names: " + names)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/launch/support/SimpleJobOperatorTests.java linha: 323 Método: assertThrows(NoSuchJobInstanceException.class, () -> jobOperator.getExecutions(123L))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/launch/support/SimpleJobOperatorTests.java linha: 436 Método: assertThrows(JobExecutionAlreadyRunningException.class, () -> jobOperator.abandon(123L))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/launch/support/CommandLineJobRunnerTests.java linha: 101 Método: assertTrue(StubJobParametersConverter.called, "Injected JobParametersConverter not used instead of default")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/launch/support/CommandLineJobRunnerTests.java linha: 109 Método: assertTrue(StubJobParametersConverter.called, "Injected JobParametersConverter not used instead of default")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/launch/support/CommandLineJobRunnerTests.java linha: 127 Método: assertTrue(errorMessage.contains("At least 2 arguments are required: JobPath/JobClass and jobIdentifier."), "Wrong error message: " + errorMessage)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/launch/support/CommandLineJobRunnerTests.java linha: 137 Método: assertTrue((errorMessage.contains("No bean named 'no-such-job' is defined") || (errorMessage.contains("No bean named 'no-such-job' available"))), "Wrong error message: " + errorMessage)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/launch/support/CommandLineJobRunnerTests.java linha: 242 Método: assertTrue(errorMessage.contains("in the form name=value"), "Wrong error message: " + errorMessage)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/launch/support/CommandLineJobRunnerTests.java linha: 346 Método: assertTrue(errorMessage.contains("No failed or stopped execution found"), "Wrong error message: " + errorMessage)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/launch/support/CommandLineJobRunnerTests.java linha: 378 Método: assertTrue(errorMessage.contains(" No job parameters incrementer found"), "Wrong error message: " + errorMessage)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/launch/support/CommandLineJobRunnerTests.java linha: 398 Método: assertTrue(errorMessage.contains("A JobLauncher must be provided.  Please add one to the configuration."), "Wrong error message: " + errorMessage)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/launch/support/DataFieldMaxValueJobParametersIncrementerTests.java linha: 40 Método: assertThrows(IllegalArgumentException.class, () -> jobParametersIncrementer.setKey(""))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/launch/support/DataFieldMaxValueJobParametersIncrementerTests.java linha: 46 Método: assertThrows(IllegalArgumentException.class, () -> new DataFieldMaxValueJobParametersIncrementer(null))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/launch/support/RunIdIncrementerTests.java linha: 71 Método: assertThrows(IllegalArgumentException.class, () -> this.incrementer.getNext(jobParameters))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/ThreadStepInterruptionPolicyTests.java linha: 44 Método: assertThrows(JobInterruptedException.class, () -> policy.checkInterrupted(context))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/item/FaultTolerantStepFactoryBeanRetryTests.java linha: 627 Método: assertEquals("Write error - planned but not skippable.", message, "Wrong message: " + message)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/item/SimpleStepFactoryBeanTests.java linha: 104 Método: assertThrows(IllegalStateException.class, factoryBean::getObject)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/item/SimpleStepFactoryBeanTests.java linha: 114 Método: assertThrows(IllegalStateException.class, factory::getObject)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/item/SimpleStepFactoryBeanTests.java linha: 127 Método: assertThrows(IllegalStateException.class, factory::getObject)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/item/SimpleStepFactoryBeanTests.java linha: 337 Método: assertTrue(writeListener.trail.startsWith("1234"), "Listener order not as expected: " + writeListener.trail)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/item/SimpleStepFactoryBeanTests.java linha: 353 Método: assertThrows(IllegalStateException.class, factory::getObject)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/item/SimpleStepFactoryBeanTests.java linha: 368 Método: assertThrows(IllegalStateException.class, factory::getObject)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/item/SimpleStepFactoryBeanTests.java linha: 460 Método: assertTrue(listenerCalls.contains(type), "Missing listener call: " + type + " from " + listenerCalls)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/item/FaultTolerantStepFactoryBeanTests.java linha: 157 Método: assertThrows(IllegalStateException.class, factory::getObject)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/item/FaultTolerantStepFactoryBeanTests.java linha: 170 Método: assertThrows(IllegalStateException.class, factory::getObject)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/item/FaultTolerantStepFactoryBeanTests.java linha: 464 Método: assertEquals("Ouch!", message, "Wrong message: " + message)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/item/FaultTolerantStepFactoryBeanTests.java linha: 726 Método: assertEquals(3, stepExecution.getSkipCount(), "bad skip count")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/item/FaultTolerantStepFactoryBeanTests.java linha: 727 Método: assertEquals(2, stepExecution.getReadSkipCount(), "bad read skip count")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/item/FaultTolerantStepFactoryBeanTests.java linha: 728 Método: assertEquals(1, stepExecution.getWriteSkipCount(), "bad write skip count")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/item/FaultTolerantStepFactoryBeanTests.java linha: 851 Método: assertTrue(listenerCalls.contains(i), "didn't call listener " + i)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/item/SimpleRetryExceptionHandlerTests.java linha: 64 Método: assertThrows(RuntimeException.class, () -> handler.handleException(context.getParent(), ex))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/item/SimpleRetryExceptionHandlerTests.java linha: 100 Método: assertThrows(RuntimeException.class, () -> handler.handleException(context.getParent(), ex))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/item/SkipWrapperTests.java linha: 62 Método: assertTrue(wrapper.toString().contains("foo"), "foo")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/item/FaultTolerantChunkProcessorTests.java linha: 119 Método: assertThrows(Exception.class, () -> processor.process(contribution, inputs))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/item/FaultTolerantChunkProcessorTests.java linha: 204 Método: assertThrows(Error.class, () -> processor.process(contribution, inputs))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/item/FaultTolerantChunkProcessorTests.java linha: 221 Método: assertThrows(RuntimeException.class, () -> processor.process(contribution, inputs))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/item/FaultTolerantChunkProcessorTests.java linha: 224 Método: assertThrows(RuntimeException.class, () -> processor.process(contribution, inputs))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/item/FaultTolerantChunkProcessorTests.java linha: 243 Método: assertThrows(RuntimeException.class, () -> processor.process(contribution, inputs))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/item/FaultTolerantChunkProcessorTests.java linha: 247 Método: assertThrows(RuntimeException.class, () -> processor.process(contribution, inputs))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/item/FaultTolerantChunkProcessorTests.java linha: 387 Método: assertThrows(RuntimeException.class, () -> processor.process(contribution, inputs))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/item/FaultTolerantChunkProcessorTests.java linha: 390 Método: assertThrows(RuntimeException.class, () -> processor.process(contribution, inputs))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/item/FaultTolerantChunkProcessorTests.java linha: 395 Método: assertThrows(RuntimeException.class, () -> processor.process(contribution, inputs))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/item/FaultTolerantChunkProcessorTests.java linha: 419 Método: assertThrows(RuntimeException.class, () -> processor.process(contribution, inputs))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/item/FaultTolerantChunkProcessorTests.java linha: 422 Método: assertThrows(RuntimeException.class, () -> processor.process(contribution, inputs))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/item/FaultTolerantChunkProcessorTests.java linha: 427 Método: assertThrows(RuntimeException.class, () -> processor.process(contribution, inputs))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/item/FaultTolerantChunkProcessorTests.java linha: 430 Método: assertThrows(RuntimeException.class, () -> processor.process(contribution, inputs))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/item/FaultTolerantChunkProcessorTests.java linha: 459 Método: assertThrows(IllegalArgumentException.class, () -> processor.process(contribution, inputs))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/item/FaultTolerantChunkProcessorTests.java linha: 463 Método: assertThrows(IllegalArgumentException.class, () -> processor.process(contribution, inputs))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/item/FaultTolerantChunkProcessorTests.java linha: 468 Método: assertThrows(IllegalArgumentException.class, () -> processor.process(contribution, inputs))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/item/FaultTolerantChunkProcessorTests.java linha: 471 Método: assertThrows(RuntimeException.class, () -> processor.process(contribution, inputs))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/item/FaultTolerantChunkProcessorTests.java linha: 501 Método: assertThrows(IllegalArgumentException.class, () -> processor.process(contribution, inputs))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/item/FaultTolerantChunkProcessorTests.java linha: 504 Método: assertThrows(IllegalArgumentException.class, () -> processor.process(contribution, inputs))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/item/FaultTolerantChunkProcessorTests.java linha: 549 Método: assertThrows(RuntimeException.class, () -> processor.process(contribution, chunk))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/item/BatchRetryTemplateTests.java linha: 58 Método: assertTrue(context.getClass().getSimpleName().contains("Batch"), "Wrong context type: " + context.getClass().getSimpleName())
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/item/BatchRetryTemplateTests.java linha: 85 Método: assertThrows(RecoverableException.class, () -> template.execute(retryCallback, states))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/item/BatchRetryTemplateTests.java linha: 111 Método: assertThrows(RecoverableException.class, () -> template.execute(retryCallback, BatchRetryTemplate.createState(outputs)))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/item/BatchRetryTemplateTests.java linha: 115 Método: assertThrows(ExhaustedRetryException.class, () -> template.execute(retryCallback, BatchRetryTemplate.createState(outputs)))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/item/BatchRetryTemplateTests.java linha: 137 Método: assertThrows(RecoverableException.class, () -> template.execute(retryCallback, BatchRetryTemplate.createState(outputs)))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/item/BatchRetryTemplateTests.java linha: 142 Método: assertThrows(ExhaustedRetryException.class, () -> template.execute(retryCallback, BatchRetryTemplate.createState(outputs)))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/item/BatchRetryTemplateTests.java linha: 153 Método: assertThrows(ExhaustedRetryException.class, () -> template.execute(retryCallback, BatchRetryTemplate.createState(outputs)))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/item/BatchRetryTemplateTests.java linha: 191 Método: assertThrows(RecoverableException.class, () -> template.execute(retryCallback, recoveryCallback, BatchRetryTemplate.createState(outputs)))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/item/AlmostStatefulRetryChunkTests.java linha: 72 Método: assertTrue(count < BACKSTOP_LIMIT, "Backstop reached.  Probably an infinite loop...")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/item/ChunkOrientedTaskletTests.java linha: 88 Método: assertThrows(RuntimeException.class, () -> handler.execute(contribution, context))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/item/ChunkMonitorTests.java linha: 123 Método: assertThrows(ItemStreamException.class, () -> monitor.open(executionContext))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/tasklet/TaskletStepTests.java linha: 332 Método: assertTrue(description.contains("FOO"), "Description does not include 'FOO': " + description)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/tasklet/TaskletStepTests.java linha: 632 Método: assertTrue(msg.contains("JobInterruptedException"), "Message does not contain 'JobInterruptedException': " + msg)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/tasklet/TaskletStepTests.java linha: 716 Método: assertTrue(msg.contains("ResetFailedException"), "Message does not contain ResetFailedException: " + msg)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/tasklet/StepExecutorInterruptionTests.java linha: 137 Método: assertTrue(count < 1000, "Timed out waiting for step to be interrupted.")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/tasklet/StepExecutorInterruptionTests.java linha: 188 Método: assertTrue(count < 1000, "Timed out waiting for step to be interrupted.")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/tasklet/StepExecutorInterruptionTests.java linha: 211 Método: assertTrue(locked, "Lock released before it is acquired")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/tasklet/CallableTaskletAdapterTests.java linha: 43 Método: assertThrows(IllegalStateException.class, adapter::afterPropertiesSet)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/tasklet/ConfigurableSystemProcessExitCodeMapperTests.java linha: 71 Método: assertThrows(IllegalArgumentException.class, () -> mapper.setMappings(missingElse))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/tasklet/SystemCommandTaskletIntegrationTests.java linha: 148 Método: assertThrows(java.util.concurrent.ExecutionException.class, () -> tasklet.execute(null, null))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/tasklet/SystemCommandTaskletIntegrationTests.java linha: 162 Método: assertThrows(SystemCommandException.class, () -> tasklet.execute(null, null))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/tasklet/SystemCommandTaskletIntegrationTests.java linha: 177 Método: assertThrows(JobInterruptedException.class, () -> tasklet.execute(null, null))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/tasklet/SystemCommandTaskletIntegrationTests.java linha: 190 Método: assertThrows(IllegalStateException.class, tasklet::afterPropertiesSet)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/tasklet/SystemCommandTaskletIntegrationTests.java linha: 199 Método: assertThrows(IllegalStateException.class, tasklet::afterPropertiesSet)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/tasklet/SystemCommandTaskletIntegrationTests.java linha: 202 Método: assertThrows(IllegalStateException.class, tasklet::afterPropertiesSet)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/tasklet/SystemCommandTaskletIntegrationTests.java linha: 212 Método: assertThrows(IllegalStateException.class, tasklet::afterPropertiesSet)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/tasklet/SystemCommandTaskletIntegrationTests.java linha: 224 Método: assertThrows(IllegalArgumentException.class, () -> tasklet.setWorkingDirectory(notExistingFile.getCanonicalPath()))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/tasklet/SystemCommandTaskletIntegrationTests.java linha: 231 Método: assertThrows(IllegalArgumentException.class, () -> tasklet.setWorkingDirectory(notDirectory.getCanonicalPath()))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/tasklet/AsyncTaskletStepTests.java linha: 141 Método: assertTrue(stepExecution.getCommitCount() > processed.size() / 2, "Not enough commits: " + stepExecution.getCommitCount())
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/tasklet/AsyncTaskletStepTests.java linha: 143 Método: assertTrue(stepExecution.getCommitCount() <= processed.size() / 2 + throttleLimit + 1, "Too many commits: " + stepExecution.getCommitCount())
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/tasklet/MethodInvokingTaskletAdapterTests.java linha: 135 Método: assertThrows(IllegalArgumentException.class, () -> adapter.execute(stepContribution, chunkContext))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/job/JobStepTests.java linha: 78 Método: assertThrows(IllegalStateException.class, step::afterPropertiesSet)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/job/JobStepTests.java linha: 85 Método: assertThrows(IllegalStateException.class, step::afterPropertiesSet)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/job/JobStepTests.java linha: 105 Método: assertTrue(stepExecution.getExecutionContext().containsKey(JobStep.class.getName() + ".JOB_PARAMETERS"), "Missing job parameters in execution context: " + stepExecution.getExecutionContext())
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/NonAbstractStepTests.java linha: 215 Método: assertTrue(repository.saved.containsKey("beforeStep"), "Execution context modifications made by listener should be persisted")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/NonAbstractStepTests.java linha: 217 Método: assertTrue(repository.saved.containsKey("afterStep"), "Execution context modifications made by listener should be persisted")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/NonAbstractStepTests.java linha: 262 Método: assertTrue(exitDescription.contains("crash"), "Wrong message: " + exitDescription)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/NonAbstractStepTests.java linha: 264 Método: assertTrue(repository.saved.containsKey("afterStep"), "Execution context modifications made by listener should be persisted")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/NonAbstractStepTests.java linha: 300 Método: assertTrue(repository.saved.containsKey("afterStep"), "Execution context modifications made by listener should be persisted")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/NonAbstractStepTests.java linha: 324 Método: assertTrue(repository.saved.containsKey("afterStep"), "Execution context modifications made by listener should be persisted")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/NonAbstractStepTests.java linha: 367 Método: assertThrows(IllegalStateException.class, tested::afterPropertiesSet)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/step/skip/LimitCheckingItemSkipPolicyTests.java linha: 51 Método: assertThrows(SkipLimitExceededException.class, () -> failurePolicy.shouldSkip(new FlatFileParseException("", ""), 2))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/DefaultJobKeyGeneratorTests.java linha: 29 Método: assertThrows(IllegalArgumentException.class, () -> jobKeyGenerator.generateKey(null))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/repository/support/SimpleJobRepositoryProxyTests.java linha: 57 Método: assertThrows(IllegalStateException.class, () -> jobRepository.createJobExecution(job.getName(), new JobParameters()))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/repository/support/SimpleJobRepositoryIntegrationTests.java linha: 193 Método: assertThrows(JobExecutionAlreadyRunningException.class, () -> jobRepository.createJobExecution(job.getName(), jobParameters))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/repository/support/SimpleJobRepositoryTests.java linha: 171 Método: assertThrows(Exception.class, () -> jobRepository.update(jobExecution))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/repository/support/SimpleJobRepositoryTests.java linha: 190 Método: assertThrows(Exception.class, () -> jobRepository.add(stepExecution))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/repository/support/SimpleJobRepositoryTests.java linha: 223 Método: assertThrows(IllegalArgumentException.class, () -> jobRepository.addAll(null))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/repository/support/SimpleJobRepositoryTests.java linha: 275 Método: assertThrows(JobExecutionAlreadyRunningException.class, () -> jobRepository.createJobExecution("foo", new JobParameters()))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/repository/support/SimpleJobRepositoryTests.java linha: 287 Método: assertThrows(JobRestartException.class, () -> jobRepository.createJobExecution("foo", new JobParameters()))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/repository/support/SimpleJobRepositoryTests.java linha: 298 Método: assertThrows(JobInstanceAlreadyCompleteException.class, () -> jobRepository.createJobExecution("foo", new JobParameters()))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/repository/support/SimpleJobRepositoryTests.java linha: 307 Método: assertThrows(IllegalStateException.class, () -> jobRepository.createJobExecution("foo", new JobParameters()))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/repository/dao/AbstractJobDaoTests.java linha: 135 Método: assertThrows(IllegalArgumentException.class, () -> jobInstanceDao.getJobInstance(null, null))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/repository/dao/AbstractJobDaoTests.java linha: 194 Método: assertThrows(NoSuchObjectException.class, () -> jobExecutionDao.updateJobExecution(execution))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/repository/dao/AbstractJobDaoTests.java linha: 202 Método: assertThrows(IllegalArgumentException.class, () -> jobExecutionDao.updateJobExecution(execution))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/repository/dao/AbstractJobDaoTests.java linha: 278 Método: assertThrows(IllegalStateException.class, () -> jobInstanceDao.createJobInstance(jobName, jobParameters))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/repository/dao/AbstractExecutionContextDaoTests.java linha: 136 Método: assertThrows(IllegalArgumentException.class, () -> contextDao.saveExecutionContexts(null))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/repository/dao/JdbcJobInstanceDaoTests.java linha: 82 Método: assertEquals(32, output.length(), "Wrong hash: " + output)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/repository/dao/JdbcJobInstanceDaoTests.java linha: 84 Método: assertEquals(32, value.length(), "Wrong hash: " + value)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/repository/dao/JdbcStepExecutionDaoTests.java linha: 66 Método: assertTrue(retrievedAfterSave.getExitStatus().getExitDescription().length() < stepExecution.getExitStatus().getExitDescription().length(), "Exit description should be truncated")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/repository/dao/JdbcStepExecutionDaoTests.java linha: 73 Método: assertTrue(retrievedAfterUpdate.getExitStatus().getExitDescription().length() < stepExecution.getExitStatus().getExitDescription().length(), "Exit description should be truncated")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/repository/dao/Jackson2ExecutionContextStringSerializerTests.java linha: 146 Método: assertThrows(Exception.class, () -> j.deserialize(in))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/repository/dao/AbstractJobInstanceDaoTests.java linha: 134 Método: assertTrue(jobInstances.get(0).getId() > jobInstances.get(1).getId(), "Last instance should be first on the list")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/repository/dao/AbstractJobInstanceDaoTests.java linha: 155 Método: assertEquals(jobInstances.get(0), lastJobInstance, "Last instance should be first on the list")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/repository/dao/AbstractJobInstanceDaoTests.java linha: 233 Método: assertThrows(IllegalStateException.class, () -> dao.createJobInstance(fooJob, fooParams))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/repository/dao/AbstractJobExecutionDaoTests.java linha: 315 Método: assertThrows(OptimisticLockingFailureException.class, () -> dao.updateJobExecution(exec2))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/repository/dao/JdbcExecutionContextDaoTests.java linha: 34 Método: assertThrows(IllegalArgumentException.class, () -> jdbcExecutionContextDao.setSerializer(null))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/repository/dao/DefaultExecutionContextSerializerTests.java linha: 40 Método: assertThrows(IllegalArgumentException.class, () -> serializer.serialize(m1, new ByteArrayOutputStream()))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/repository/dao/JdbcJobDaoQueryTests.java linha: 82 Método: assertTrue("Query did not contain FOO_:" + query, query.contains("FOO_"))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/repository/dao/OptimisticLockingFailureTests.java linha: 78 Método: assertEquals(1, numStepExecutions, "Should only be one StepExecution but got: " + numStepExecutions)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/repository/dao/OptimisticLockingFailureTests.java linha: 79 Método: assertEquals("step1", stepName, "Step name for execution should be step1 but got: " + stepName)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/repository/dao/OptimisticLockingFailureTests.java linha: 80 Método: assertEquals(stepExecutionStatus, BatchStatus.STOPPED, "Step execution status should be STOPPED but got: " + stepExecutionStatus)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/repository/dao/OptimisticLockingFailureTests.java linha: 82 Método: assertEquals(jobExecutionStatus, BatchStatus.STOPPED, "Job execution status should be STOPPED but got:" + jobExecutionStatus)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/repository/dao/OptimisticLockingFailureTests.java linha: 95 Método: assertEquals(2, restartNumStepExecutions, "Should be two StepExecution's on restart but got: " + restartNumStepExecutions)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/repository/dao/OptimisticLockingFailureTests.java linha: 101 Método: assertEquals(restartStepExecutionStatus, BatchStatus.COMPLETED, "Step execution status should be COMPLETED but got: " + restartStepExecutionStatus)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/repository/dao/OptimisticLockingFailureTests.java linha: 106 Método: assertEquals(restartJobExecutionStatus, BatchStatus.COMPLETED, "Job execution status should be COMPLETED but got:" + restartJobExecutionStatus)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/repository/dao/AbstractStepExecutionDaoTests.java linha: 194 Método: assertThrows(IllegalArgumentException.class, () -> dao.saveStepExecutions(null))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/repository/dao/AbstractStepExecutionDaoTests.java linha: 237 Método: assertThrows(IllegalArgumentException.class, () -> dao.saveStepExecution(stepExecution))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/repository/dao/AbstractStepExecutionDaoTests.java linha: 247 Método: assertThrows(IllegalArgumentException.class, () -> dao.saveStepExecution(stepExecution))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/repository/dao/AbstractStepExecutionDaoTests.java linha: 294 Método: assertThrows(OptimisticLockingFailureException.class, () -> dao.updateStepExecution(exec2))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/repository/dao/AbstractStepExecutionDaoTests.java linha: 301 Método: assertEquals(count, jobExecution.getStepExecutions().size(), "Incorrect size of collection")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/converter/DefaultJobParametersConverterTests.java linha: 128 Método: assertTrue(message.contains("foo"), "Message should contain wrong number: " + message)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/converter/DefaultJobParametersConverterTests.java linha: 142 Método: assertTrue(message.contains("1.03"), "Message should contain wrong number: " + message)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/converter/DefaultJobParametersConverterTests.java linha: 156 Método: assertTrue(message.contains("foo"), "Message should contain wrong number: " + message)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/converter/DefaultJobParametersConverterTests.java linha: 167 Método: assertEquals(1.38, props.getDouble("value"), Double.MIN_VALUE)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/converter/DefaultJobParametersConverterTests.java linha: 177 Método: assertEquals(1.0, props.getDouble("value"), Double.MIN_VALUE)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/converter/DefaultJobParametersConverterTests.java linha: 187 Método: assertEquals(1.0, props.getDouble("value"), Double.MIN_VALUE)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/ExitStatusTests.java linha: 152 Método: assertTrue(description.contains("Foo"), "Wrong description: " + description)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/ExitStatusTests.java linha: 153 Método: assertTrue(description.contains("RuntimeException"), "Wrong description: " + description)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/listener/MulticasterBatchListenerTests.java linha: 108 Método: assertThrows(StepListenerFailedException.class, () -> multicast.afterStep(null))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/listener/MulticasterBatchListenerTests.java linha: 110 Método: assertEquals("listener error", message, "Wrong message: " + message)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/listener/MulticasterBatchListenerTests.java linha: 133 Método: assertThrows(StepListenerFailedException.class, () -> multicast.beforeStep(null))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/listener/MulticasterBatchListenerTests.java linha: 135 Método: assertEquals("listener error", message, "Wrong message: " + message)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/listener/MulticasterBatchListenerTests.java linha: 158 Método: assertThrows(StepListenerFailedException.class, () -> multicast.afterChunk(null))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/listener/MulticasterBatchListenerTests.java linha: 160 Método: assertEquals("listener error", message, "Wrong message: " + message)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/listener/MulticasterBatchListenerTests.java linha: 183 Método: assertThrows(StepListenerFailedException.class, () -> multicast.beforeChunk(null))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/listener/MulticasterBatchListenerTests.java linha: 185 Método: assertEquals("listener error", message, "Wrong message: " + message)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/listener/MulticasterBatchListenerTests.java linha: 208 Método: assertThrows(StepListenerFailedException.class, () -> multicast.afterRead(null))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/listener/MulticasterBatchListenerTests.java linha: 210 Método: assertEquals("listener error", message, "Wrong message: " + message)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/listener/MulticasterBatchListenerTests.java linha: 233 Método: assertThrows(StepListenerFailedException.class, () -> multicast.beforeRead())
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/listener/MulticasterBatchListenerTests.java linha: 235 Método: assertEquals("listener error", message, "Wrong message: " + message)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/listener/MulticasterBatchListenerTests.java linha: 258 Método: assertThrows(StepListenerFailedException.class, () -> multicast.onReadError(new RuntimeException("foo")))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/listener/MulticasterBatchListenerTests.java linha: 261 Método: assertEquals("listener error", message, "Wrong message: " + message)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/listener/MulticasterBatchListenerTests.java linha: 284 Método: assertThrows(StepListenerFailedException.class, () -> multicast.afterWrite(null))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/listener/MulticasterBatchListenerTests.java linha: 286 Método: assertEquals("listener error", message, "Wrong message: " + message)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/listener/MulticasterBatchListenerTests.java linha: 309 Método: assertThrows(StepListenerFailedException.class, () -> multicast.beforeWrite(null))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/listener/MulticasterBatchListenerTests.java linha: 311 Método: assertEquals("listener error", message, "Wrong message: " + message)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/listener/MulticasterBatchListenerTests.java linha: 334 Método: assertThrows(StepListenerFailedException.class, () -> multicast.onWriteError(new RuntimeException("foo"), null))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/listener/MulticasterBatchListenerTests.java linha: 337 Método: assertEquals("listener error", message, "Wrong message: " + message)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/listener/MulticasterBatchListenerTests.java linha: 372 Método: assertThrows(RuntimeException.class, () -> multicast.onSkipInRead(new RuntimeException("bar")))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/listener/MulticasterBatchListenerTests.java linha: 375 Método: assertEquals("foo", message, "Wrong message: " + message)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/listener/MulticasterBatchListenerTests.java linha: 410 Método: assertThrows(RuntimeException.class, () -> multicast.onSkipInWrite(null, new RuntimeException("bar")))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/listener/MulticasterBatchListenerTests.java linha: 413 Método: assertEquals("foo", message, "Wrong message: " + message)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/listener/MulticasterBatchListenerTests.java linha: 448 Método: assertThrows(RuntimeException.class, () -> multicast.onSkipInProcess(null, new RuntimeException("bar")))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/listener/MulticasterBatchListenerTests.java linha: 451 Método: assertEquals("foo", message, "Wrong message: " + message)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/listener/MulticasterBatchListenerTests.java linha: 460 Método: assertThrows(StepListenerFailedException.class, () -> multicast.beforeRead())
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/listener/MulticasterBatchListenerTests.java linha: 464 Método: assertEquals("listener error", message, "Wrong message: " + message)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/listener/MulticasterBatchListenerTests.java linha: 472 Método: assertThrows(StepListenerFailedException.class, () -> multicast.afterRead(null))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/listener/MulticasterBatchListenerTests.java linha: 476 Método: assertEquals("listener error", message, "Wrong message: " + message)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/listener/MulticasterBatchListenerTests.java linha: 484 Método: assertThrows(StepListenerFailedException.class, () -> multicast.beforeProcess(null))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/listener/MulticasterBatchListenerTests.java linha: 488 Método: assertEquals("listener error", message, "Wrong message: " + message)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/listener/MulticasterBatchListenerTests.java linha: 496 Método: assertThrows(StepListenerFailedException.class, () -> multicast.afterProcess(null, null))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/listener/MulticasterBatchListenerTests.java linha: 500 Método: assertEquals("listener error", message, "Wrong message: " + message)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/listener/MulticasterBatchListenerTests.java linha: 508 Método: assertThrows(StepListenerFailedException.class, () -> multicast.beforeWrite(null))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/listener/MulticasterBatchListenerTests.java linha: 512 Método: assertEquals("listener error", message, "Wrong message: " + message)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/listener/MulticasterBatchListenerTests.java linha: 520 Método: assertThrows(StepListenerFailedException.class, () -> multicast.afterWrite(null))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/listener/MulticasterBatchListenerTests.java linha: 524 Método: assertEquals("listener error", message, "Wrong message: " + message)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/listener/MulticasterBatchListenerTests.java linha: 532 Método: assertThrows(StepListenerFailedException.class, () -> multicast.beforeChunk(null))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/listener/MulticasterBatchListenerTests.java linha: 536 Método: assertEquals("listener error", message, "Wrong message: " + message)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/listener/MulticasterBatchListenerTests.java linha: 544 Método: assertThrows(StepListenerFailedException.class, () -> multicast.afterChunk(null))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/listener/MulticasterBatchListenerTests.java linha: 548 Método: assertEquals("listener error", message, "Wrong message: " + message)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/listener/JobListenerFactoryBeanTests.java linha: 133 Método: assertTrue(listener instanceof Ordered, "Listener is not of correct type")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/listener/JobListenerFactoryBeanTests.java linha: 183 Método: assertThrows(IllegalArgumentException.class, factoryBean::getObject)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/listener/JobListenerFactoryBeanTests.java linha: 233 Método: assertThrows(IllegalArgumentException.class, factoryBean::getObject)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/listener/StepListenerFactoryBeanTests.java linha: 200 Método: assertTrue(listener instanceof Ordered, "Listener is not of correct type")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/listener/StepListenerFactoryBeanTests.java linha: 216 Método: assertTrue(StepListenerFactoryBean.getListener(factory.getProxy()) instanceof StepExecutionListener, "Listener is not of correct type")
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/listener/StepListenerFactoryBeanTests.java linha: 318 Método: assertThrows(IllegalArgumentException.class, factoryBean::getObject)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/listener/StepListenerFactoryBeanTests.java linha: 370 Método: assertThrows(IllegalArgumentException.class, factoryBean::getObject)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/listener/ExecutionContextPromotionListenerTests.java linha: 243 Método: assertThrows(IllegalArgumentException.class, () -> listener.afterStep(stepExecution))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/listener/ExecutionContextPromotionListenerTests.java linha: 250 Método: assertThrows(IllegalStateException.class, listener::afterPropertiesSet)
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/JobInstanceTests.java linha: 45 Método: assertThrows(IllegalArgumentException.class, () -> new JobInstance(null, null))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/BatchStatusTests.java linha: 92 Método: assertThrows(IllegalArgumentException.class, () -> BatchStatus.valueOf("foo"))
Assert com mensagem: /home/vitor-otto/opensource/spring-batch-5.0.1/spring-batch-core/src/test/java/org/springframework/batch/core/BatchStatusTests.java linha: 97 Método: assertThrows(NullPointerException.class, () -> BatchStatus.valueOf(null))
Total asserts: 7126
Asserts sem descrição: 5974
Asserts com descrição: 1152
Assertion Roulette: 4934
