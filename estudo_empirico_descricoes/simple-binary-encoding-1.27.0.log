
Projeto: /home/vitor-otto/opensource/simple-binary-encoding-1.27.0

Assert com mensagem: /home/vitor-otto/opensource/simple-binary-encoding-1.27.0/sbe-tool/src/test/java/uk/co/real_logic/sbe/xml/EnumTypeTest.java linha: 192 Método: assertThrows(IllegalArgumentException.class, () -> parseTestXmlWithMap("/types/enum", testXmlString))
Assert com mensagem: /home/vitor-otto/opensource/simple-binary-encoding-1.27.0/sbe-tool/src/test/java/uk/co/real_logic/sbe/xml/EnumTypeTest.java linha: 208 Método: assertThrows(IllegalArgumentException.class, () -> parseTestXmlWithMap("/types/enum", testXmlString))
Assert com mensagem: /home/vitor-otto/opensource/simple-binary-encoding-1.27.0/sbe-tool/src/test/java/uk/co/real_logic/sbe/xml/EnumTypeTest.java linha: 224 Método: assertThrows(IllegalArgumentException.class, () -> parseTestXmlWithMap("/types/enum", testXmlString))
Assert com mensagem: /home/vitor-otto/opensource/simple-binary-encoding-1.27.0/sbe-tool/src/test/java/uk/co/real_logic/sbe/xml/EnumTypeTest.java linha: 239 Método: assertThrows(IllegalArgumentException.class, () -> parseTestXmlWithMap("/types/enum", testXmlString))
Assert com mensagem: /home/vitor-otto/opensource/simple-binary-encoding-1.27.0/sbe-tool/src/test/java/uk/co/real_logic/sbe/xml/EnumTypeTest.java linha: 254 Método: assertThrows(IllegalArgumentException.class, () -> parseTestXmlWithMap("/types/enum", testXmlString))
Assert com mensagem: /home/vitor-otto/opensource/simple-binary-encoding-1.27.0/sbe-tool/src/test/java/uk/co/real_logic/sbe/xml/EnumTypeTest.java linha: 269 Método: assertThrows(NumberFormatException.class, () -> parseTestXmlWithMap("/types/enum", testXmlString))
Assert com mensagem: /home/vitor-otto/opensource/simple-binary-encoding-1.27.0/sbe-tool/src/test/java/uk/co/real_logic/sbe/xml/EnumTypeTest.java linha: 278 Método: assertThrows(IllegalStateException.class, () -> parse(file, ParserOptions.builder().suppressOutput(true).build()))
Assert com mensagem: /home/vitor-otto/opensource/simple-binary-encoding-1.27.0/sbe-tool/src/test/java/uk/co/real_logic/sbe/xml/SinceVersionSchemaTransformerTest.java linha: 68 Método: assertNull(findAndRemove(transformedMessagesCopy, originalMessage, comparing(Message::id)), "Message (" + originalMessage.name() + ") should be removed")
Assert com mensagem: /home/vitor-otto/opensource/simple-binary-encoding-1.27.0/sbe-tool/src/test/java/uk/co/real_logic/sbe/xml/SinceVersionSchemaTransformerTest.java linha: 61 Método: assertNotNull(transformedMessage, "Message (" + originalMessage.name() + ") should be retained")
Assert com mensagem: /home/vitor-otto/opensource/simple-binary-encoding-1.27.0/sbe-tool/src/test/java/uk/co/real_logic/sbe/xml/SinceVersionSchemaTransformerTest.java linha: 74 Método: assertTrue(transformedMessagesCopy.isEmpty(), "Messages should have been removed: " + transformedMessagesCopy)
Assert com mensagem: /home/vitor-otto/opensource/simple-binary-encoding-1.27.0/sbe-tool/src/test/java/uk/co/real_logic/sbe/xml/SinceVersionSchemaTransformerTest.java linha: 103 Método: assertNull(findAndRemove(transformedFieldsCopy, originalField, comparing(Field::name)), "Field (" + originalField.name() + ") should be removed")
Assert com mensagem: /home/vitor-otto/opensource/simple-binary-encoding-1.27.0/sbe-tool/src/test/java/uk/co/real_logic/sbe/xml/SinceVersionSchemaTransformerTest.java linha: 96 Método: assertNotNull(transformedField, "Field (" + originalField.name() + ") should be retained")
Assert com mensagem: /home/vitor-otto/opensource/simple-binary-encoding-1.27.0/sbe-tool/src/test/java/uk/co/real_logic/sbe/xml/SinceVersionSchemaTransformerTest.java linha: 109 Método: assertTrue(transformedFieldsCopy.isEmpty(), "Fields should have been removed: " + transformedFields)
Assert com mensagem: /home/vitor-otto/opensource/simple-binary-encoding-1.27.0/sbe-tool/src/test/java/uk/co/real_logic/sbe/xml/SinceVersionSchemaTransformerTest.java linha: 130 Método: assertNull(findAndRemove(transformedTypesCopy, type, comparing(Type::name)), "Type (" + type.name() + ") should be removed")
Assert com mensagem: /home/vitor-otto/opensource/simple-binary-encoding-1.27.0/sbe-tool/src/test/java/uk/co/real_logic/sbe/xml/SinceVersionSchemaTransformerTest.java linha: 124 Método: assertNotNull(findAndRemove(transformedTypesCopy, type, comparing(Type::name)), "Type (" + type.name() + ") should be retained")
Assert com mensagem: /home/vitor-otto/opensource/simple-binary-encoding-1.27.0/sbe-tool/src/test/java/uk/co/real_logic/sbe/xml/SinceVersionSchemaTransformerTest.java linha: 136 Método: assertTrue(transformedTypesCopy.isEmpty(), "Types should have been removed: " + transformedTypesCopy)
Assert com mensagem: /home/vitor-otto/opensource/simple-binary-encoding-1.27.0/sbe-tool/src/test/java/uk/co/real_logic/sbe/xml/CompositeTypeTest.java linha: 169 Método: assertThrows(IllegalArgumentException.class, () -> parseTestXmlWithMap("/types/composite", testXmlString))
Assert com mensagem: /home/vitor-otto/opensource/simple-binary-encoding-1.27.0/sbe-tool/src/test/java/uk/co/real_logic/sbe/xml/EncodedDataTypeTest.java linha: 133 Método: assertThrows(IllegalArgumentException.class, () -> parseTestXmlWithMap("/types/type", testXmlString))
Assert com mensagem: /home/vitor-otto/opensource/simple-binary-encoding-1.27.0/sbe-tool/src/test/java/uk/co/real_logic/sbe/xml/EncodedDataTypeTest.java linha: 144 Método: assertThrows(IllegalStateException.class, () -> parseTestXmlWithMap("/types/type", testXmlString))
Assert com mensagem: /home/vitor-otto/opensource/simple-binary-encoding-1.27.0/sbe-tool/src/test/java/uk/co/real_logic/sbe/xml/EncodedDataTypeTest.java linha: 155 Método: assertThrows(IllegalStateException.class, () -> parseTestXmlWithMap("/types/type", testXmlString))
Assert com mensagem: /home/vitor-otto/opensource/simple-binary-encoding-1.27.0/sbe-tool/src/test/java/uk/co/real_logic/sbe/xml/EncodedDataTypeTest.java linha: 199 Método: assertThrows(IllegalArgumentException.class, () -> parseTestXmlWithMap("/types/type", testXmlString))
Assert com mensagem: /home/vitor-otto/opensource/simple-binary-encoding-1.27.0/sbe-tool/src/test/java/uk/co/real_logic/sbe/xml/EncodedDataTypeTest.java linha: 298 Método: assertThrows(IllegalArgumentException.class, () -> parseTestXmlWithMap("/types/type", testXmlString))
Assert com mensagem: /home/vitor-otto/opensource/simple-binary-encoding-1.27.0/sbe-tool/src/test/java/uk/co/real_logic/sbe/xml/SetTypeTest.java linha: 128 Método: assertThrows(IllegalArgumentException.class, () -> parseTestXmlWithMap("/types/set", testXmlString))
Assert com mensagem: /home/vitor-otto/opensource/simple-binary-encoding-1.27.0/sbe-tool/src/test/java/uk/co/real_logic/sbe/xml/SetTypeTest.java linha: 143 Método: assertThrows(IllegalArgumentException.class, () -> parseTestXmlWithMap("/types/set", testXmlString))
Assert com mensagem: /home/vitor-otto/opensource/simple-binary-encoding-1.27.0/sbe-tool/src/test/java/uk/co/real_logic/sbe/xml/SetTypeTest.java linha: 158 Método: assertThrows(IllegalArgumentException.class, () -> parseTestXmlWithMap("/types/set", testXmlString))
Assert com mensagem: /home/vitor-otto/opensource/simple-binary-encoding-1.27.0/sbe-tool/src/test/java/uk/co/real_logic/sbe/xml/SetTypeTest.java linha: 173 Método: assertThrows(IllegalArgumentException.class, () -> parseTestXmlWithMap("/types/set", testXmlString))
Assert com mensagem: /home/vitor-otto/opensource/simple-binary-encoding-1.27.0/sbe-tool/src/test/java/uk/co/real_logic/sbe/generation/csharp/Issue567GroupSizeTest.java linha: 63 Método: assertThrows(IllegalArgumentException.class, () -> XmlSchemaParser.parse(is, options))
Assert com mensagem: /home/vitor-otto/opensource/simple-binary-encoding-1.27.0/sbe-tool/src/test/java/uk/co/real_logic/sbe/generation/rust/RustUtilTest.java linha: 42 Método: assertThrows(NullPointerException.class, () -> RustUtil.eightBitCharacter(null))
Assert com mensagem: /home/vitor-otto/opensource/simple-binary-encoding-1.27.0/sbe-tool/src/test/java/uk/co/real_logic/sbe/generation/rust/RustUtilTest.java linha: 48 Método: assertThrows(IllegalArgumentException.class, () -> RustUtil.eightBitCharacter(""))
Assert com mensagem: /home/vitor-otto/opensource/simple-binary-encoding-1.27.0/sbe-tool/src/test/java/uk/co/real_logic/sbe/generation/rust/RustUtilTest.java linha: 54 Método: assertThrows(IllegalArgumentException.class, () -> RustUtil.eightBitCharacter("ABC"))
Assert com mensagem: /home/vitor-otto/opensource/simple-binary-encoding-1.27.0/sbe-tool/src/test/java/uk/co/real_logic/sbe/generation/rust/RustUtilTest.java linha: 97 Método: assertThrows(NullPointerException.class, () -> generateRustLiteral(null, "65"))
Assert com mensagem: /home/vitor-otto/opensource/simple-binary-encoding-1.27.0/sbe-tool/src/test/java/uk/co/real_logic/sbe/generation/rust/RustUtilTest.java linha: 103 Método: assertThrows(NullPointerException.class, () -> generateRustLiteral(INT8, null))
Assert com mensagem: /home/vitor-otto/opensource/simple-binary-encoding-1.27.0/sbe-tool/src/test/java/uk/co/real_logic/sbe/generation/java/JavaGeneratorTest.java linha: 587 Método: assertThrows(IllegalArgumentException.class, () -> new JavaGenerator(ir, "dasdsads", BUFFER_NAME, false, false, false, outputManager))
Assert com mensagem: /home/vitor-otto/opensource/simple-binary-encoding-1.27.0/sbe-tool/src/test/java/uk/co/real_logic/sbe/generation/java/JavaGeneratorTest.java linha: 595 Método: assertThrows(IllegalArgumentException.class, () -> new JavaGenerator(ir, "java.nio.ByteBuffer", BUFFER_NAME, false, false, false, outputManager))
Assert com mensagem: /home/vitor-otto/opensource/simple-binary-encoding-1.27.0/sbe-tool/src/test/java/uk/co/real_logic/sbe/generation/java/JavaGeneratorTest.java linha: 603 Método: assertThrows(IllegalArgumentException.class, () -> new JavaGenerator(ir, BUFFER_NAME, "dasdsads", false, false, false, outputManager))
Assert com mensagem: /home/vitor-otto/opensource/simple-binary-encoding-1.27.0/sbe-tool/src/test/java/uk/co/real_logic/sbe/generation/java/JavaGeneratorTest.java linha: 611 Método: assertThrows(IllegalArgumentException.class, () -> new JavaGenerator(ir, BUFFER_NAME, "java.nio.ByteBuffer", false, false, false, outputManager))
Assert com mensagem: /home/vitor-otto/opensource/simple-binary-encoding-1.27.0/sbe-tool/src/test/java/uk/co/real_logic/sbe/codec/java/TypesTest.java linha: 50 Método: assertFalse(result, "bit set i = " + i)
Assert com mensagem: /home/vitor-otto/opensource/simple-binary-encoding-1.27.0/sbe-tool/src/test/java/uk/co/real_logic/sbe/codec/java/TypesTest.java linha: 88 Método: assertFalse(result, "bit set i = " + i)
Assert com mensagem: /home/vitor-otto/opensource/simple-binary-encoding-1.27.0/sbe-tool/src/test/java/uk/co/real_logic/sbe/codec/java/TypesTest.java linha: 126 Método: assertFalse(result, "bit set i = " + i)
Assert com mensagem: /home/vitor-otto/opensource/simple-binary-encoding-1.27.0/sbe-tool/src/test/java/uk/co/real_logic/sbe/TargetCodeGeneratorTest.java linha: 31 Método: assertThrows(IllegalArgumentException.class, () -> SbeTool.generate(mock(Ir.class), ".", "none"))
Assert com mensagem: /home/vitor-otto/opensource/simple-binary-encoding-1.27.0/sbe-tool/src/test/java/uk/co/real_logic/sbe/ir/EncodedIrTest.java linha: 165 Método: assertThat(name + " token count", decodedTokenList.size(), is(tokens.size()))
Total asserts: 937
Asserts sem descrição: 896
Asserts com descrição: 41
Assertion Roulette: 850
