
Projeto: /home/vitor-otto/opensource/cucumber-jvm-7.11.1

Antes do refactor: 
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/docstring/src/test/java/io/cucumber/docstring/DocStringTest.java linha: 15 Método: assertThrows(CucumberDocStringException.class, () -> docString.convert(Object.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/docstring/src/test/java/io/cucumber/docstring/DocStringTest.java linha: 18 Método: assertThat(exception.getMessage(), is("" + "Can't convert DocString to class java.lang.Object. You have to write the conversion for it in this method"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/docstring/src/test/java/io/cucumber/docstring/DocStringTest.java linha: 30 Método: assertThat(docString.toString(), is("" + "      \"\"\"application/json\n" + "      {\n" + "        \"hello\":\"world\"\n" + "      }\n" + "      \"\"\""))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/docstring/src/test/java/io/cucumber/docstring/DocStringTest.java linha: 52 Método: assertThat(docString, CoreMatchers.equalTo(other))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/docstring/src/test/java/io/cucumber/docstring/DocStringTest.java linha: 53 Método: assertThat(docString.hashCode(), CoreMatchers.equalTo(other.hashCode()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/docstring/src/test/java/io/cucumber/docstring/DocStringTest.java linha: 62 Método: assertThat(docString.toString(), is("" + "      \"\"\"application/json\n" + "      \n" + "      \"\"\""))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/docstring/src/test/java/io/cucumber/docstring/DocStringTypeRegistryDocStringConverterTest.java linha: 56 Método: assertThat(converted, is(docString))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/docstring/src/test/java/io/cucumber/docstring/DocStringTypeRegistryDocStringConverterTest.java linha: 62 Método: assertThat(converter.convert(docString, String.class), is("hello world"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/docstring/src/test/java/io/cucumber/docstring/DocStringTypeRegistryDocStringConverterTest.java linha: 68 Método: assertThat(converter.convert(docString, String.class), is("hello world"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/docstring/src/test/java/io/cucumber/docstring/DocStringTypeRegistryDocStringConverterTest.java linha: 76 Método: assertThat(converted.get("hello").textValue(), is("world"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/docstring/src/test/java/io/cucumber/docstring/DocStringTypeRegistryDocStringConverterTest.java linha: 83 Método: assertThat(converter.convert(docString, String.class), is("hello world"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/docstring/src/test/java/io/cucumber/docstring/DocStringTypeRegistryDocStringConverterTest.java linha: 90 Método: assertThrows(CucumberDocStringException.class, () -> converter.convert(docString, Object.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/docstring/src/test/java/io/cucumber/docstring/DocStringTypeRegistryDocStringConverterTest.java linha: 93 Método: assertThat(exception.getMessage(), is("" + "It appears you did not register docstring type for 'json' or java.lang.Object"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/docstring/src/test/java/io/cucumber/docstring/DocStringTypeRegistryDocStringConverterTest.java linha: 102 Método: assertThrows(CucumberDocStringException.class, () -> converter.convert(docString, String.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/docstring/src/test/java/io/cucumber/docstring/DocStringTypeRegistryDocStringConverterTest.java linha: 105 Método: assertThat(exception.getMessage(), is("Multiple converters found for type java.lang.String, and the content type 'json' " + "did not match any of the registered types [[anonymous], text]. Change the content type of the docstring " + "or register a docstring type for 'json'"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/docstring/src/test/java/io/cucumber/docstring/DocStringTypeRegistryDocStringConverterTest.java linha: 115 Método: assertThrows(CucumberDocStringException.class, () -> converter.convert(docString, JsonNode.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/docstring/src/test/java/io/cucumber/docstring/DocStringTypeRegistryDocStringConverterTest.java linha: 118 Método: assertThat(exception.getMessage(), is("" + "It appears you did not register docstring type for 'application/json' or com.fasterxml.jackson.databind.JsonNode"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/docstring/src/test/java/io/cucumber/docstring/DocStringTypeRegistryDocStringConverterTest.java linha: 125 Método: assertThrows(CucumberDocStringException.class, () -> converter.convert(docString, JsonNode.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/docstring/src/test/java/io/cucumber/docstring/DocStringTypeRegistryDocStringConverterTest.java linha: 128 Método: assertThat(exception.getMessage(), is("" + "It appears you did not register docstring type for com.fasterxml.jackson.databind.JsonNode"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/docstring/src/test/java/io/cucumber/docstring/DocStringTypeRegistryDocStringConverterTest.java linha: 137 Método: assertThrows(CucumberDocStringException.class, () -> converter.convert(docString, JsonNode.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/docstring/src/test/java/io/cucumber/docstring/DocStringTypeRegistryDocStringConverterTest.java linha: 140 Método: assertThat(exception.getMessage(), is("" + "Multiple converters found for type com.fasterxml.jackson.databind.JsonNode, " + "add one of the following content types to your docstring [json, xml]"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/docstring/src/test/java/io/cucumber/docstring/DocStringTypeRegistryDocStringConverterTest.java linha: 149 Método: assertThrows(CucumberDocStringException.class, () -> converter.convert(docString, JsonNode.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/docstring/src/test/java/io/cucumber/docstring/DocStringTypeRegistryDocStringConverterTest.java linha: 152 Método: assertThat(exception.getMessage(), is(equalToCompressingWhiteSpace("" + "'json' could not transform\n" + "      \"\"\"json\n" + "      {\"hello\":\"world\"}\n" + "      \"\"\"")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/docstring/src/test/java/io/cucumber/docstring/DocStringTypeRegistryDocStringConverterTest.java linha: 169 Método: assertThat(docStringJson.getContent(), equalTo(converter.convert(docStringJson, String.class)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/docstring/src/test/java/io/cucumber/docstring/DocStringTypeRegistryDocStringConverterTest.java linha: 170 Método: assertThat(docStringXml.getContent(), equalTo(converter.convert(docStringXml, String.class)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/docstring/src/test/java/io/cucumber/docstring/DocStringTypeRegistryDocStringConverterTest.java linha: 171 Método: assertThat(docStringYml.getContent(), equalTo(converter.convert(docStringYml, String.class)))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/docstring/src/test/java/io/cucumber/docstring/DocStringTypeRegistryDocStringConverterTest.java linha: 168 Método: assertAll(() -> assertThat(docStringJson.getContent(), equalTo(converter.convert(docStringJson, String.class))), () -> assertThat(docStringXml.getContent(), equalTo(converter.convert(docStringXml, String.class))), () -> assertThat(docStringYml.getContent(), equalTo(converter.convert(docStringYml, String.class))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/docstring/src/test/java/io/cucumber/docstring/DocStringTypeRegistryDocStringConverterTest.java linha: 202 Método: assertThat(converter.convert(docStringGreet, Greet.class), equalTo(expectedGreet))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/docstring/src/test/java/io/cucumber/docstring/DocStringTypeRegistryDocStringConverterTest.java linha: 203 Método: assertThat(converter.convert(docStringMeet, Meet.class), equalTo(expectedMeet))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/docstring/src/test/java/io/cucumber/docstring/DocStringTypeRegistryDocStringConverterTest.java linha: 204 Método: assertThat(converter.convert(docStringLeave, Leave.class), equalTo(expectedLeave))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/docstring/src/test/java/io/cucumber/docstring/DocStringTypeRegistryTest.java linha: 26 Método: assertThrows(CucumberDocStringException.class, () -> registry.defineDocStringType(docStringType))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/docstring/src/test/java/io/cucumber/docstring/DocStringTypeRegistryTest.java linha: 28 Método: assertThat(actualThrown.getMessage(), is(equalTo("There is already docstring type registered for '[anonymous]' and java.lang.String.\n" + "You are trying to add '[anonymous]' and java.lang.String")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/docstring/src/test/java/io/cucumber/docstring/DocStringTypeRegistryTest.java linha: 45 Método: assertThrows(CucumberDocStringException.class, () -> registry.defineDocStringType(duplicate))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/docstring/src/test/java/io/cucumber/docstring/DocStringTypeRegistryTest.java linha: 48 Método: assertThat(exception.getMessage(), is("" + "There is already docstring type registered for 'application/json' and com.fasterxml.jackson.databind.JsonNode.\n" + "You are trying to add 'application/json' and com.fasterxml.jackson.databind.JsonNode"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/docstring/src/test/java/io/cucumber/docstring/DocStringTypeRegistryTest.java linha: 71 Método: assertThat(registry.lookup(null, JsonNode.class), hasSize(3))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/docstring/src/test/java/io/cucumber/docstring/DocStringTypeRegistryTest.java linha: 91 Método: assertThat(registry.lookup(null, JsonNode.class), hasSize(3))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/docstring/src/test/java/io/cucumber/docstring/DocStringTypeRegistryTest.java linha: 106 Método: assertThat(registry.lookup(DEFAULT_CONTENT_TYPE, JsonNode.class), hasSize(1))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/docstring/src/test/java/io/cucumber/docstring/DocStringTypeRegistryTest.java linha: 107 Método: assertThat(registry.lookup(DEFAULT_CONTENT_TYPE, TreeNode.class), hasSize(1))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/docstring/src/test/java/io/cucumber/docstring/DocStringTypeRegistryTest.java linha: 122 Método: assertThat(registry.lookup("application/json", JsonNode.class), hasSize(1))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/docstring/src/test/java/io/cucumber/docstring/DocStringTypeRegistryTest.java linha: 123 Método: assertThat(registry.lookup("application/json", TreeNode.class), hasSize(1))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-cdi2/src/test/java/io/cucumber/cdi2/example/BellyStepDefinitions.java linha: 29 Método: assertEquals(n, belly.getCukes())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-cdi2/src/test/java/io/cucumber/cdi2/Cdi2FactoryTest.java linha: 33 Método: assertDoesNotThrow(factory::stop)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-cdi2/src/test/java/io/cucumber/cdi2/Cdi2FactoryTest.java linha: 35 Método: assertDoesNotThrow(factory::start)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-cdi2/src/test/java/io/cucumber/cdi2/Cdi2FactoryTest.java linha: 37 Método: assertDoesNotThrow(factory::stop)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-cdi2/src/test/java/io/cucumber/cdi2/Cdi2FactoryTest.java linha: 54 Método: assertThat(a1, is(equalTo(a2)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-cdi2/src/test/java/io/cucumber/cdi2/Cdi2FactoryTest.java linha: 65 Método: assertThat(a1, is(notNullValue()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-cdi2/src/test/java/io/cucumber/cdi2/Cdi2FactoryTest.java linha: 66 Método: assertThat(a1, is(not(equalTo(b1))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-cdi2/src/test/java/io/cucumber/cdi2/Cdi2FactoryTest.java linha: 67 Método: assertThat(b1, is(not(equalTo(a1))))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-cdi2/src/test/java/io/cucumber/cdi2/Cdi2FactoryTest.java linha: 64 Método: assertAll(() -> assertThat(a1, is(notNullValue())), () -> assertThat(a1, is(not(equalTo(b1)))), () -> assertThat(b1, is(not(equalTo(a1)))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-cdi2/src/test/java/io/cucumber/cdi2/Cdi2FactoryTest.java linha: 84 Método: assertThat(bean.getClass(), not(is(ApplicationScopedBean.class)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-cdi2/src/test/java/io/cucumber/cdi2/Cdi2FactoryTest.java linha: 85 Método: assertThat(bean.getClass().getSuperclass(), is(ApplicationScopedBean.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-cdi2/src/test/java/io/cucumber/cdi2/Cdi2FactoryTest.java linha: 82 Método: assertAll(() -> assertThat(bean.getClass(), not(is(ApplicationScopedBean.class))), () -> assertThat(bean.getClass().getSuperclass(), is(ApplicationScopedBean.class)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-cdi2/src/test/java/io/cucumber/cdi2/Cdi2FactoryTest.java linha: 99 Método: assertThat(bean.getClass(), is(UnmanagedBean.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-cdi2/src/test/java/io/cucumber/cdi2/Cdi2FactoryTest.java linha: 122 Método: assertThat(stepDefinitions.injected, is(notNullValue()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable-matchers/src/test/java/io/cucumber/datatable/matchers/DataTableHasTheSameRowsAsTest.java linha: 43 Método: assertTrue(hasTheSameRowsAs(table).inOrder().matches(identical))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable-matchers/src/test/java/io/cucumber/datatable/matchers/DataTableHasTheSameRowsAsTest.java linha: 44 Método: assertFalse(hasTheSameRowsAs(table).inOrder().matches(shuffled))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable-matchers/src/test/java/io/cucumber/datatable/matchers/DataTableHasTheSameRowsAsTest.java linha: 45 Método: assertFalse(hasTheSameRowsAs(table).inOrder().matches(different))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable-matchers/src/test/java/io/cucumber/datatable/matchers/DataTableHasTheSameRowsAsTest.java linha: 50 Método: assertTrue(hasTheSameRowsAs(table).matches(identical))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable-matchers/src/test/java/io/cucumber/datatable/matchers/DataTableHasTheSameRowsAsTest.java linha: 51 Método: assertTrue(hasTheSameRowsAs(table).matches(shuffled))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable-matchers/src/test/java/io/cucumber/datatable/matchers/DataTableHasTheSameRowsAsTest.java linha: 52 Método: assertFalse(hasTheSameRowsAs(table).matches(different))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable-matchers/src/test/java/io/cucumber/datatable/matchers/DataTableHasTheSameRowsAsTest.java linha: 57 Método: assertThat(identical, hasTheSameRowsAs(table).inOrder())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable-matchers/src/test/java/io/cucumber/datatable/matchers/DataTableHasTheSameRowsAsTest.java linha: 58 Método: assertThat(shuffled, hasTheSameRowsAs(table))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-plugin/src/test/java/io/cucumber/plugin/event/NodeTest.java linha: 317 Método: assertEquals(Optional.of(asList(outline, examplesA, example1)), pathTo)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-plugin/src/test/java/io/cucumber/plugin/event/NodeTest.java linha: 323 Método: assertEquals(Optional.of(asList(outline, examplesA, example2)), pathTo)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-plugin/src/test/java/io/cucumber/plugin/event/NodeTest.java linha: 329 Método: assertEquals(Optional.of(asList(outline, examplesB, example3)), pathTo)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-plugin/src/test/java/io/cucumber/plugin/event/NodeTest.java linha: 335 Método: assertEquals(Optional.of(asList(outline, examplesB, example4)), pathTo)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-plugin/src/test/java/io/cucumber/plugin/event/NodeTest.java linha: 341 Método: assertEquals(Optional.of(asList(outline, examplesA)), pathTo)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-plugin/src/test/java/io/cucumber/plugin/event/NodeTest.java linha: 348 Método: assertEquals(Optional.of(asList(emptyOutline, emptyExamplesA)), pathTo)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-plugin/src/test/java/io/cucumber/plugin/event/NodeTest.java linha: 354 Método: assertEquals(Optional.of(asList(outline, examplesB)), pathTo)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-plugin/src/test/java/io/cucumber/plugin/event/NodeTest.java linha: 361 Método: assertEquals(Optional.of(asList(emptyOutline, emptyExamplesB)), pathTo)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-plugin/src/test/java/io/cucumber/plugin/event/NodeTest.java linha: 367 Método: assertEquals(Optional.of(asList(outline)), pathTo)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-plugin/src/test/java/io/cucumber/plugin/event/NodeTest.java linha: 374 Método: assertEquals(Optional.of(asList(emptyOutline)), pathTo)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-plugin/src/test/java/io/cucumber/plugin/event/NodeTest.java linha: 380 Método: assertEquals(Optional.empty(), pathTo)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-plugin/src/test/java/io/cucumber/plugin/event/NodeTest.java linha: 386 Método: assertEquals(Optional.empty(), pathTo)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-plugin/src/test/java/io/cucumber/plugin/event/NodeTest.java linha: 392 Método: assertEquals(Optional.of(asList(example1)), pathTo)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-plugin/src/test/java/io/cucumber/plugin/event/NodeTest.java linha: 398 Método: assertEquals(Optional.empty(), pathTo)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/stepexpression/StepTypeRegistryTest.java linha: 35 Método: assertThat(expresion.getRegexp().pattern(), is("^(.*)$"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/stepexpression/StepExpressionFactoryTest.java linha: 53 Método: assertThat(expression.getSource(), is("Given a step"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/stepexpression/StepExpressionFactoryTest.java linha: 54 Método: assertThat(expression.getExpressionType(), is(CucumberExpression.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/stepexpression/StepExpressionFactoryTest.java linha: 55 Método: assertThat(expression.match("Given a step"), is(emptyList()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/stepexpression/StepExpressionFactoryTest.java linha: 65 Método: assertThrows(CucumberException.class, () -> stepExpressionFactory.createExpression(stepDefinition))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/stepexpression/StepExpressionFactoryTest.java linha: 68 Método: assertThat(exception.getMessage(), is("" + "Could not create a cucumber expression for 'Given a {unknownParameterType}'.\n" + "It appears you did not register a parameter type."))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/stepexpression/StepExpressionFactoryTest.java linha: 73 Método: assertThat(events, iterableWithSize(1))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/stepexpression/StepExpressionFactoryTest.java linha: 74 Método: assertNotNull(events.get(0).getUndefinedParameterType())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/stepexpression/StepExpressionFactoryTest.java linha: 86 Método: assertThat(dataTable.cells(), is(equalTo(table)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/stepexpression/StepExpressionFactoryTest.java linha: 98 Método: assertThat(ingredient.name, is(equalTo("chocolate")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/stepexpression/StepExpressionFactoryTest.java linha: 131 Método: assertThat(ingredient.amount, is(equalTo(2)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/stepexpression/StepExpressionFactoryTest.java linha: 148 Método: assertThat(match.get(0).getValue(), is(equalTo(DataTable.create(table))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/stepexpression/StepExpressionFactoryTest.java linha: 157 Método: assertThat(match.get(0).getValue(), is(equalTo(DocString.create(docString))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/stepexpression/StepExpressionFactoryTest.java linha: 166 Método: assertThat(match.get(0).getValue(), is(equalTo(docString)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/stepexpression/StepExpressionFactoryTest.java linha: 175 Método: assertThat(match.get(0).getValue(), is(equalTo(DocString.create(docString))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/stepexpression/StepExpressionFactoryTest.java linha: 177 Método: assertThat(match.get(0).getValue(), is(equalTo(DataTable.create(table))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/stepexpression/StepExpressionFactoryTest.java linha: 193 Método: assertThat(node.asText(), equalTo(docString))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/stepexpression/StepExpressionFactoryTest.java linha: 210 Método: assertThat(ingredient.name, is(equalTo("chocolate")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/logging/LoggerFactoryTest.java linha: 52 Método: assertThat(logged, logRecord("Error", Level.SEVERE, null))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/logging/LoggerFactoryTest.java linha: 54 Método: assertThat(logged, logRecord("Error", Level.SEVERE, exception))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/logging/LoggerFactoryTest.java linha: 88 Método: assertThat(logged, logRecord("Warn", Level.WARNING, null))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/logging/LoggerFactoryTest.java linha: 90 Método: assertThat(logged, logRecord("Warn", Level.WARNING, exception))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/logging/LoggerFactoryTest.java linha: 96 Método: assertThat(logged, logRecord("Info", Level.INFO, null))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/logging/LoggerFactoryTest.java linha: 98 Método: assertThat(logged, logRecord("Info", Level.INFO, exception))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/logging/LoggerFactoryTest.java linha: 104 Método: assertThat(logged, logRecord("Config", Level.CONFIG, null))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/logging/LoggerFactoryTest.java linha: 106 Método: assertThat(logged, logRecord("Config", Level.CONFIG, exception))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/logging/LoggerFactoryTest.java linha: 112 Método: assertThat(logged, logRecord("Debug", Level.FINE, null))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/logging/LoggerFactoryTest.java linha: 114 Método: assertThat(logged, logRecord("Debug", Level.FINE, exception))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/logging/LoggerFactoryTest.java linha: 120 Método: assertThat(logged, logRecord("Trace", Level.FINER, null))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/logging/LoggerFactoryTest.java linha: 122 Método: assertThat(logged, logRecord("Trace", Level.FINER, exception))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/backend/DefaultObjectFactoryTest.java linha: 32 Método: assertThat(o1, is(notNullValue()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/backend/DefaultObjectFactoryTest.java linha: 33 Método: assertThat(o1, is(not(equalTo(o2))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/backend/DefaultObjectFactoryTest.java linha: 34 Método: assertThat(o2, is(not(equalTo(o1))))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/backend/DefaultObjectFactoryTest.java linha: 31 Método: assertAll(() -> assertThat(o1, is(notNullValue())), () -> assertThat(o1, is(not(equalTo(o2)))), () -> assertThat(o2, is(not(equalTo(o1)))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/backend/DefaultObjectFactoryTest.java linha: 39 Método: assertThrows(CucumberException.class, () -> factory.getInstance(NoAccessibleConstructor.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/backend/DefaultObjectFactoryTest.java linha: 42 Método: assertThat(exception.getMessage(), is("" + "class io.cucumber.core.backend.DefaultObjectFactoryTest$NoAccessibleConstructor does not have a public zero-argument constructor.\n" + "\n" + "To use dependency injection add an other ObjectFactory implementation such as:\n" + " * cucumber-picocontainer\n" + " * cucumber-spring\n" + " * cucumber-jakarta-cdi\n" + " * ...etc\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/backend/StubStepDefinition.java linha: 57 Método: assertEquals(parameterInfos.size(), args.length)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/backend/StubStepDefinition.java linha: 59 Método: assertEquals(parameterInfos.get(i).getType(), args[i].getClass())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/FeatureIdentifierTest.java linha: 21 Método: assertThat(uri.getScheme(), is(equalTo("classpath")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/FeatureIdentifierTest.java linha: 22 Método: assertThat(uri.getSchemeSpecificPart(), is(equalTo("/path/to/file.feature")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/FeatureIdentifierTest.java linha: 20 Método: assertAll(() -> assertThat(uri.getScheme(), is(equalTo("classpath"))), () -> assertThat(uri.getSchemeSpecificPart(), is(equalTo("/path/to/file.feature"))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/FeatureIdentifierTest.java linha: 28 Método: assertThrows(IllegalArgumentException.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/FeatureIdentifierTest.java linha: 29 Método: assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("featureIdentifier does not reference a single feature file: classpath:/path/to/file.feature:10:40")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/FeatureIdentifierTest.java linha: 36 Método: assertThrows(IllegalArgumentException.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/FeatureIdentifierTest.java linha: 37 Método: assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("featureIdentifier does not reference a single feature file: classpath:/path/to")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/FeaturePathTest.java linha: 21 Método: assertThrows(IllegalArgumentException.class, () -> FeaturePath.parse(""))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/FeaturePathTest.java linha: 24 Método: assertThat(exception.getMessage(), is("featureIdentifier may not be empty"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/FeaturePathTest.java linha: 31 Método: assertThat(uri.getScheme(), is("classpath"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/FeaturePathTest.java linha: 32 Método: assertThat(uri.getSchemeSpecificPart(), is("/"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/FeaturePathTest.java linha: 30 Método: assertAll(() -> assertThat(uri.getScheme(), is("classpath")), () -> assertThat(uri.getSchemeSpecificPart(), is("/")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/FeaturePathTest.java linha: 41 Método: assertThat(uri.getScheme(), is("classpath"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/FeaturePathTest.java linha: 42 Método: assertThat(uri.getSchemeSpecificPart(), is("/"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/FeaturePathTest.java linha: 40 Método: assertAll(() -> assertThat(uri.getScheme(), is("classpath")), () -> assertThat(uri.getSchemeSpecificPart(), is("/")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/FeaturePathTest.java linha: 50 Método: assertThat(uri.getScheme(), is("classpath"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/FeaturePathTest.java linha: 51 Método: assertThat(uri.getSchemeSpecificPart(), is("/path/to/file.feature"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/FeaturePathTest.java linha: 49 Método: assertAll(() -> assertThat(uri.getScheme(), is("classpath")), () -> assertThat(uri.getSchemeSpecificPart(), is("/path/to/file.feature")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/FeaturePathTest.java linha: 59 Método: assertThat(uri.getScheme(), is("classpath"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/FeaturePathTest.java linha: 60 Método: assertThat(uri.getSchemeSpecificPart(), is("/path/to"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/FeaturePathTest.java linha: 58 Método: assertAll(() -> assertThat(uri.getScheme(), is("classpath")), () -> assertThat(uri.getSchemeSpecificPart(), is("/path/to")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/FeaturePathTest.java linha: 69 Método: assertThat(uri.getScheme(), is("file"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/FeaturePathTest.java linha: 70 Método: assertThat(uri.getSchemeSpecificPart(), is("/path/to/file.feature"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/FeaturePathTest.java linha: 68 Método: assertAll(() -> assertThat(uri.getScheme(), is("file")), () -> assertThat(uri.getSchemeSpecificPart(), is("/path/to/file.feature")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/FeaturePathTest.java linha: 79 Método: assertThat(uri.getScheme(), is("file"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/FeaturePathTest.java linha: 80 Método: assertThat(uri.getSchemeSpecificPart(), is("/path/to"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/FeaturePathTest.java linha: 78 Método: assertAll(() -> assertThat(uri.getScheme(), is("file")), () -> assertThat(uri.getSchemeSpecificPart(), is("/path/to")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/FeaturePathTest.java linha: 88 Método: assertThat(uri.getScheme(), is("file"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/FeaturePathTest.java linha: 89 Método: assertThat(uri.getSchemeSpecificPart(), endsWith("path/to/file.feature"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/FeaturePathTest.java linha: 87 Método: assertAll(() -> assertThat(uri.getScheme(), is("file")), () -> assertThat(uri.getSchemeSpecificPart(), endsWith("path/to/file.feature")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/FeaturePathTest.java linha: 95 Método: assertThat(uri.getScheme(), is(is("file")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/FeaturePathTest.java linha: 98 Método: assertThat(uri.getSchemeSpecificPart(), is(file.toURI().getSchemeSpecificPart()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/FeaturePathTest.java linha: 106 Método: assertThat(uri.getScheme(), is("file"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/FeaturePathTest.java linha: 107 Método: assertThat(uri.getSchemeSpecificPart(), endsWith("path/to/file.feature"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/FeaturePathTest.java linha: 105 Método: assertAll(() -> assertThat(uri.getScheme(), is("file")), () -> assertThat(uri.getSchemeSpecificPart(), endsWith("path/to/file.feature")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/FeaturePathTest.java linha: 116 Método: assertThat(uri.getScheme(), is("file"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/FeaturePathTest.java linha: 117 Método: assertThat(uri.getSchemeSpecificPart(), endsWith("path/to/file.feature"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/FeaturePathTest.java linha: 115 Método: assertAll(() -> assertThat(uri.getScheme(), is("file")), () -> assertThat(uri.getSchemeSpecificPart(), endsWith("path/to/file.feature")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/FeaturePathTest.java linha: 126 Método: assertThat(uri.getScheme(), is(is("file")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/FeaturePathTest.java linha: 127 Método: assertThat(uri.getSchemeSpecificPart(), is("/C:/path/to/file.feature"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/FeaturePathTest.java linha: 125 Método: assertAll(() -> assertThat(uri.getScheme(), is(is("file"))), () -> assertThat(uri.getSchemeSpecificPart(), is("/C:/path/to/file.feature")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/FeaturePathTest.java linha: 135 Método: assertThat(uri.getScheme(), is(is("file")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/FeaturePathTest.java linha: 136 Método: assertThat(uri.getSchemeSpecificPart(), endsWith("path/to the/file.feature"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/FeaturePathTest.java linha: 134 Método: assertAll(() -> assertThat(uri.getScheme(), is(is("file"))), () -> assertThat(uri.getSchemeSpecificPart(), endsWith("path/to the/file.feature")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/FeaturePathTest.java linha: 145 Método: assertThat(uri.getScheme(), is("file"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/FeaturePathTest.java linha: 146 Método: assertThat(uri.getSchemeSpecificPart(), is("/C:/path/to/file.feature"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/FeaturePathTest.java linha: 144 Método: assertAll(() -> assertThat(uri.getScheme(), is("file")), () -> assertThat(uri.getSchemeSpecificPart(), is("/C:/path/to/file.feature")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/GluePathTest.java linha: 35 Método: assertThat(uri.getScheme(), is("classpath"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/GluePathTest.java linha: 36 Método: assertThat(uri.getSchemeSpecificPart(), is("/"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/GluePathTest.java linha: 34 Método: assertAll(() -> assertThat(uri.getScheme(), is("classpath")), () -> assertThat(uri.getSchemeSpecificPart(), is("/")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/GluePathTest.java linha: 44 Método: assertThat(uri.getScheme(), is("classpath"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/GluePathTest.java linha: 45 Método: assertThat(uri.getSchemeSpecificPart(), is("/"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/GluePathTest.java linha: 43 Método: assertAll(() -> assertThat(uri.getScheme(), is("classpath")), () -> assertThat(uri.getSchemeSpecificPart(), is("/")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/GluePathTest.java linha: 54 Método: assertThat(uri.getScheme(), is("classpath"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/GluePathTest.java linha: 55 Método: assertThat(uri.getSchemeSpecificPart(), is("/"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/GluePathTest.java linha: 53 Método: assertAll(() -> assertThat(uri.getScheme(), is("classpath")), () -> assertThat(uri.getSchemeSpecificPart(), is("/")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/GluePathTest.java linha: 63 Método: assertThat(uri.getScheme(), is("classpath"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/GluePathTest.java linha: 64 Método: assertThat(uri.getSchemeSpecificPart(), is("com/example/app"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/GluePathTest.java linha: 62 Método: assertAll(() -> assertThat(uri.getScheme(), is("classpath")), () -> assertThat(uri.getSchemeSpecificPart(), is("com/example/app")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/GluePathTest.java linha: 72 Método: assertThat(uri.getScheme(), is("classpath"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/GluePathTest.java linha: 73 Método: assertThat(uri.getSchemeSpecificPart(), is("/com/example/app"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/GluePathTest.java linha: 71 Método: assertAll(() -> assertThat(uri.getScheme(), is("classpath")), () -> assertThat(uri.getSchemeSpecificPart(), is("/com/example/app")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/GluePathTest.java linha: 81 Método: assertThat(uri.getScheme(), is("classpath"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/GluePathTest.java linha: 82 Método: assertThat(uri.getSchemeSpecificPart(), is("/com/example/app"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/GluePathTest.java linha: 80 Método: assertAll(() -> assertThat(uri.getScheme(), is("classpath")), () -> assertThat(uri.getSchemeSpecificPart(), is("/com/example/app")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/GluePathTest.java linha: 90 Método: assertThat(uri.getScheme(), is("classpath"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/GluePathTest.java linha: 91 Método: assertThat(uri.getSchemeSpecificPart(), is("/com/example/app"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/GluePathTest.java linha: 89 Método: assertAll(() -> assertThat(uri.getScheme(), is("classpath")), () -> assertThat(uri.getSchemeSpecificPart(), is("/com/example/app")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/GluePathTest.java linha: 97 Método: assertThrows(IllegalArgumentException.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/GluePathTest.java linha: 98 Método: assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("The glue path must have a classpath scheme file:com/example/app")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/GluePathTest.java linha: 105 Método: assertThrows(IllegalArgumentException.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/GluePathTest.java linha: 106 Método: assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("The glue path contained invalid identifiers 01-examples")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/GluePathTest.java linha: 116 Método: assertThat(uri.getScheme(), is("classpath"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/GluePathTest.java linha: 117 Método: assertThat(uri.getSchemeSpecificPart(), is(equalTo("/com/example/app")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/GluePathTest.java linha: 115 Método: assertAll(() -> assertThat(uri.getScheme(), is("classpath")), () -> assertThat(uri.getSchemeSpecificPart(), is(equalTo("/com/example/app"))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/GluePathTest.java linha: 124 Método: assertThrows(IllegalArgumentException.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/GluePathTest.java linha: 125 Método: assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("The glue path must have a classpath scheme C:/com/example/app")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/GluePathTest.java linha: 144 Método: assertThat(logMessage, logPattern)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/FeatureWithLinesTest.java linha: 20 Método: assertThat(featureWithLines.uri(), is(URI.create("classpath:example.feature")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/FeatureWithLinesTest.java linha: 21 Método: assertThat(featureWithLines.lines(), emptyCollectionOf(Integer.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/FeatureWithLinesTest.java linha: 19 Método: assertAll(() -> assertThat(featureWithLines.uri(), is(URI.create("classpath:example.feature"))), () -> assertThat(featureWithLines.lines(), emptyCollectionOf(Integer.class)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/FeatureWithLinesTest.java linha: 29 Método: assertThat(featureWithLines.uri(), is(URI.create("classpath:example.feature")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/FeatureWithLinesTest.java linha: 30 Método: assertThat(featureWithLines.lines(), contains(999))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/FeatureWithLinesTest.java linha: 28 Método: assertAll(() -> assertThat(featureWithLines.uri(), is(URI.create("classpath:example.feature"))), () -> assertThat(featureWithLines.lines(), contains(999)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/FeatureWithLinesTest.java linha: 38 Método: assertThat(featureWithLines.uri(), is(URI.create("classpath:example.feature")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/FeatureWithLinesTest.java linha: 39 Método: assertThat(featureWithLines.lines(), contains(999, 2000))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/feature/FeatureWithLinesTest.java linha: 37 Método: assertAll(() -> assertThat(featureWithLines.uri(), is(URI.create("classpath:example.feature"))), () -> assertThat(featureWithLines.lines(), contains(999, 2000)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CurlOptionTest.java linha: 24 Método: assertThat(option.getUri(), is(URI.create("https://example.com")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CurlOptionTest.java linha: 29 Método: assertThrows(IllegalArgumentException.class, () -> CurlOption.parse(""))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CurlOptionTest.java linha: 30 Método: assertThat(exception.getMessage(), is("'' was not a valid curl command"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CurlOptionTest.java linha: 37 Método: assertThat(option.getUri(), is(URI.create("https://example.com")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CurlOptionTest.java linha: 38 Método: assertThat(option.getMethod(), is(HttpMethod.POST))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CurlOptionTest.java linha: 43 Método: assertThrows(IllegalArgumentException.class, () -> CurlOption.parse("https://example.com -X NO-SUCH-METHOD"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CurlOptionTest.java linha: 46 Método: assertThat(exception.getMessage(), is("NO-SUCH-METHOD was not a http method"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CurlOptionTest.java linha: 52 Método: assertThat(option.getUri(), is(URI.create("https://example.com")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CurlOptionTest.java linha: 53 Método: assertThat(option.getHeaders(), is(singletonList(new SimpleEntry<>("Content-Type", "application/x-ndjson"))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CurlOptionTest.java linha: 58 Método: assertThrows(IllegalArgumentException.class, () -> CurlOption.parse("https://example.com -H 'Content-Type'"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CurlOptionTest.java linha: 60 Método: assertThat(exception.getMessage(), is("'Content-Type' was not a valid header"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CurlOptionTest.java linha: 66 Método: assertThrows(IllegalArgumentException.class, () -> CurlOption.parse(uri))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CurlOptionTest.java linha: 67 Método: assertThat(exception.getMessage(), is("'https://example.com/path https://example.com/other/path' was not a valid curl command"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CurlOptionTest.java linha: 74 Método: assertThrows(IllegalArgumentException.class, () -> CurlOption.parse(uri))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CurlOptionTest.java linha: 75 Método: assertThat(exception.getCause(), instanceOf(URISyntaxException.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CurlOptionTest.java linha: 81 Método: assertThat(option.getProxy(), is(new Proxy(Type.HTTP, new InetSocketAddress("proxy.example.com", 3129))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CurlOptionTest.java linha: 87 Método: assertThat(option.getProxy(), is(new Proxy(Type.SOCKS, new InetSocketAddress("proxy.example.com", 3129))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CurlOptionTest.java linha: 93 Método: assertThrows(IllegalArgumentException.class, () -> CurlOption.parse(uri))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CurlOptionTest.java linha: 94 Método: assertThat(exception.getMessage(), is("'!@#%' was not a valid proxy address"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CurlOptionTest.java linha: 100 Método: assertThrows(IllegalArgumentException.class, () -> CurlOption.parse(uri))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CurlOptionTest.java linha: 101 Método: assertThat(exception.getMessage(), is("'//proxy.example.com:3129' did not have a valid proxy protocol"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CurlOptionTest.java linha: 107 Método: assertThrows(IllegalArgumentException.class, () -> CurlOption.parse(uri))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CurlOptionTest.java linha: 108 Método: assertThat(exception.getMessage(), is("'no-such-protocol://proxy.example.com:3129' did not have a valid proxy protocol"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CurlOptionTest.java linha: 115 Método: assertThrows(IllegalArgumentException.class, () -> CurlOption.parse(uri))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CurlOptionTest.java linha: 116 Método: assertThat(exception.getMessage(), is("'https://:3129' did not have a valid proxy host"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CurlOptionTest.java linha: 122 Método: assertThrows(IllegalArgumentException.class, () -> CurlOption.parse(uri))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CurlOptionTest.java linha: 123 Método: assertThat(exception.getMessage(), is("'https://proxy.example.com' did not have a valid proxy port"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberPropertiesTest.java linha: 19 Método: assertThat(CucumberProperties.fromEnvironment().get("PATH"), is(notNullValue()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberPropertiesTest.java linha: 25 Método: assertThat(properties.get("pxfj54#"), is(nullValue()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberPropertiesTest.java linha: 31 Método: assertThat(properties.getOrDefault("pxfj54#", "default"), is("default"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberPropertiesTest.java linha: 38 Método: assertThat(properties.get("a.b"), is(equalTo("a.b")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberPropertiesTest.java linha: 45 Método: assertThat(properties.get("b.c"), is(equalTo("B_C")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberPropertiesTest.java linha: 52 Método: assertThat(properties.get("B_C"), is(equalTo("B_C")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberPropertiesTest.java linha: 59 Método: assertThat(properties.get("c.D"), is(equalTo("C_D")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CommandlineOptionsParserTest.java linha: 73 Método: assertNotNull(optionsBuilder)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CommandlineOptionsParserTest.java linha: 75 Método: assertNotNull(options)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CommandlineOptionsParserTest.java linha: 76 Método: assertThat(options.getObjectFactoryClass(), Is.is(equalTo(TestObjectFactory.class)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CommandlineOptionsParserTest.java linha: 82 Método: assertThat(output(), matchesPattern("\\d+\\.\\d+\\.\\d+(-RC\\d+)?(-SNAPSHOT)?\r?\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CommandlineOptionsParserTest.java linha: 83 Método: assertThat(parser.exitStatus(), is(Optional.of((byte) 0x0)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CommandlineOptionsParserTest.java linha: 93 Método: assertThat(output(), startsWith("Unknown option: --not-an-option"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CommandlineOptionsParserTest.java linha: 94 Método: assertThat(parser.exitStatus(), is(Optional.of((byte) 0x1)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CommandlineOptionsParserTest.java linha: 101 Método: assertThat(output(), startsWith("Usage"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CommandlineOptionsParserTest.java linha: 107 Método: assertThat(output(), startsWith("af              Afrikaans                 Afrikaans"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CommandlineOptionsParserTest.java linha: 113 Método: assertThat(output(), startsWith("      | feature          | \"Feature\", \"Business Need\", \"Ability\"   |"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CommandlineOptionsParserTest.java linha: 121 Método: assertThat(options.getFeaturePaths(), contains(new File("somewhere_else").toURI()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CommandlineOptionsParserTest.java linha: 131 Método: assertThat(options.getFeaturePaths(), contains(new File("somewhere_else.feature").toURI()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CommandlineOptionsParserTest.java linha: 132 Método: assertThat(options.getLineFilters(), hasEntry(new File("somewhere_else.feature").toURI(), singleton(3)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CommandlineOptionsParserTest.java linha: 130 Método: assertAll(() -> assertThat(options.getFeaturePaths(), contains(new File("somewhere_else.feature").toURI())), () -> assertThat(options.getLineFilters(), hasEntry(new File("somewhere_else.feature").toURI(), singleton(3))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CommandlineOptionsParserTest.java linha: 141 Método: assertThat(options.getFeaturePaths(), contains(new File("somewhere_else.feature").toURI()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CommandlineOptionsParserTest.java linha: 143 Método: assertThat(options.getLineFilters(), hasEntry(new File("somewhere_else.feature").toURI(), lines))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CommandlineOptionsParserTest.java linha: 151 Método: assertThat(options.getFeaturePaths(), contains(uri("classpath:somewhere_else.feature")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CommandlineOptionsParserTest.java linha: 153 Método: assertThat(options.getLineFilters(), hasEntry(uri("classpath:somewhere_else.feature"), lines))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CommandlineOptionsParserTest.java linha: 170 Método: assertThat(tagExpressions, contains("@keep_this"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CommandlineOptionsParserTest.java linha: 175 Método: assertThrows(RuntimeException.class, () -> {
    RuntimeOptions options = parser.parse("--tags", ")").build();
})
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CommandlineOptionsParserTest.java linha: 187 Método: assertThat(options.getGlue(), contains(uri("classpath:/somewhere")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CommandlineOptionsParserTest.java linha: 198 Método: assertThat(plugins.getPlugins().get(0).getClass().getName(), is("io.cucumber.core.plugin.HtmlFormatter"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CommandlineOptionsParserTest.java linha: 209 Método: assertThat(plugins.getPlugins(), is(empty()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CommandlineOptionsParserTest.java linha: 221 Método: assertThat(plugins.getPlugins(), hasItem(plugin("io.cucumber.core.plugin.DefaultSummaryPrinter")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CommandlineOptionsParserTest.java linha: 233 Método: assertThat(plugins.getPlugins(), hasItem(plugin("io.cucumber.core.plugin.DefaultSummaryPrinter")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CommandlineOptionsParserTest.java linha: 260 Método: assertThat(logRecordListener.getLogRecords().get(0).getMessage(), is("Use '--no-summary' instead of '-p/--plugin null_summary'. '-p/--plugin null_summary' will be removed in a future release."))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CommandlineOptionsParserTest.java linha: 262 Método: assertThat(plugins.getPlugins(), not(hasItem(plugin("io.cucumber.core.plugin.DefaultSummaryPrinter"))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CommandlineOptionsParserTest.java linha: 259 Método: assertAll(() -> assertThat(logRecordListener.getLogRecords().get(0).getMessage(), is("Use '--no-summary' instead of '-p/--plugin null_summary'. '-p/--plugin null_summary' will be removed in a future release.")), () -> assertThat(plugins.getPlugins(), not(hasItem(plugin("io.cucumber.core.plugin.DefaultSummaryPrinter")))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CommandlineOptionsParserTest.java linha: 276 Método: assertThat(plugins.getPlugins(), not(hasItem(plugin("io.cucumber.core.plugin.DefaultSummaryPrinter"))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CommandlineOptionsParserTest.java linha: 275 Método: assertAll(() -> assertThat(plugins.getPlugins(), not(hasItem(plugin("io.cucumber.core.plugin.DefaultSummaryPrinter")))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CommandlineOptionsParserTest.java linha: 288 Método: assertThat(plugins.getPlugins(), not(hasItem(plugin("io.cucumber.core.plugin.PrettyPrinter"))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CommandlineOptionsParserTest.java linha: 296 Método: assertThat(options.isWip(), is(true))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CommandlineOptionsParserTest.java linha: 304 Método: assertThat(options.isWip(), is(true))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CommandlineOptionsParserTest.java linha: 312 Método: assertThat(options.isWip(), is(false))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CommandlineOptionsParserTest.java linha: 321 Método: assertThat(actualPattern.pattern(), is("someName"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CommandlineOptionsParserTest.java linha: 330 Método: assertThat(actualPattern.pattern(), is("some Name"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CommandlineOptionsParserTest.java linha: 348 Método: assertThat(actual, contains("@should_not_be_clobbered"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CommandlineOptionsParserTest.java linha: 349 Método: assertThat(options.getLineFilters(), hasEntry(new File("this/should/be/rerun.feature").toURI(), singleton(12)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CommandlineOptionsParserTest.java linha: 347 Método: assertAll(() -> assertThat(actual, contains("@should_not_be_clobbered")), () -> assertThat(options.getLineFilters(), hasEntry(new File("this/should/be/rerun.feature").toURI(), singleton(12))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CommandlineOptionsParserTest.java linha: 368 Método: assertThat(actual, contains("@should_not_be_clobbered"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CommandlineOptionsParserTest.java linha: 369 Método: assertThat(options.getLineFilters(), is(emptyMap()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CommandlineOptionsParserTest.java linha: 370 Método: assertThat(options.getFeaturePaths(), contains(new File("path/to.feature").toURI()))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CommandlineOptionsParserTest.java linha: 367 Método: assertAll(() -> assertThat(actual, contains("@should_not_be_clobbered")), () -> assertThat(options.getLineFilters(), is(emptyMap())), () -> assertThat(options.getFeaturePaths(), contains(new File("path/to.feature").toURI())))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CommandlineOptionsParserTest.java linha: 378 Método: assertThat(output(), startsWith("Unknown option: -concreteUnsupportedOption"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CommandlineOptionsParserTest.java linha: 379 Método: assertThat(parser.exitStatus(), is(Optional.of((byte) 0x1)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CommandlineOptionsParserTest.java linha: 387 Método: assertThat(options.getThreads(), is(1))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CommandlineOptionsParserTest.java linha: 395 Método: assertThat(options.getThreads(), is(10))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CommandlineOptionsParserTest.java linha: 403 Método: assertThat(output(), equalToCompressingWhiteSpace("--threads must be > 0"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CommandlineOptionsParserTest.java linha: 404 Método: assertThat(parser.exitStatus(), is(Optional.of((byte) 0x1)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CommandlineOptionsParserTest.java linha: 416 Método: assertThat(formatter.isMonochrome(), is(true))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CommandlineOptionsParserTest.java linha: 428 Método: assertThat(formatter.isStrict(), is(true))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CommandlineOptionsParserTest.java linha: 440 Método: assertThat(options.getSnippetType(), is(SnippetType.UNDERSCORE))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CommandlineOptionsParserTest.java linha: 450 Método: assertThat(options.getPickleOrder().orderPickles(Arrays.asList(a, b)), contains(a, b))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CommandlineOptionsParserTest.java linha: 470 Método: assertThat(options.getPickleOrder().orderPickles(Arrays.asList(a, b)), contains(b, a))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CommandlineOptionsParserTest.java linha: 490 Método: assertThat(options.getPickleOrder().orderPickles(Arrays.asList(a, b, c)), contains(c, a, b))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CommandlineOptionsParserTest.java linha: 500 Método: assertThrows(IllegalArgumentException.class, testMethod)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CommandlineOptionsParserTest.java linha: 501 Método: assertThat(actualThrown.getMessage(), is(equalTo("Invalid order. Must be either reverse, random or random:<long>")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CommandlineOptionsParserTest.java linha: 510 Método: assertThat(output(), equalToCompressingWhiteSpace("--count must be > 0"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CommandlineOptionsParserTest.java linha: 511 Método: assertThat(parser.exitStatus(), is(Optional.of((byte) 0x1)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CommandlineOptionsParserTest.java linha: 520 Método: assertThat(options.getGlue(), is(singletonList(rootPackageUri())))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CommandlineOptionsParserTest.java linha: 529 Método: assertThat(options.getFeaturePaths(), is(singletonList(rootPackageUri())))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CommandlineOptionsParserTest.java linha: 530 Método: assertThat(options.getLineFilters(), is(emptyMap()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberPropertiesParserTest.java linha: 48 Método: assertThat(options.isMonochrome(), equalTo(true))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberPropertiesParserTest.java linha: 55 Método: assertThat(options.isDryRun(), equalTo(true))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberPropertiesParserTest.java linha: 62 Método: assertThat(options.getPickleOrder(), equalTo(StandardPickleOrders.reverseLexicalUriOrder()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberPropertiesParserTest.java linha: 69 Método: assertThat(options.getFeaturePaths(), contains(URI.create("classpath:com/example.feature")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberPropertiesParserTest.java linha: 78 Método: assertThat(options.getFeaturePaths(), contains(URI.create("classpath:com/example/app.feature"), URI.create("classpath:com/example/other.feature")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberPropertiesParserTest.java linha: 95 Método: assertThat(options.getFeaturePaths(), contains(URI.create("classpath:com/example.feature")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberPropertiesParserTest.java linha: 97 Método: assertThat(tagExpressions, contains("@example"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberPropertiesParserTest.java linha: 94 Método: assertAll(() -> assertThat(options.getFeaturePaths(), contains(URI.create("classpath:com/example.feature"))), () -> assertThat(tagExpressions, contains("@example")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberPropertiesParserTest.java linha: 104 Método: assertThat(options.getNameFilters().get(0).pattern(), equalTo("Test.*"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberPropertiesParserTest.java linha: 117 Método: assertThat(tagExpressions, contains("( @No and not ( @Never ) )"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberPropertiesParserTest.java linha: 124 Método: assertThat(options.getGlue(), contains(URI.create("classpath:/com/example/steps")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberPropertiesParserTest.java linha: 132 Método: assertThat(options.getGlue(), contains(URI.create("classpath:/com/example/app/steps"), URI.create("classpath:/com/example/other/steps")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberPropertiesParserTest.java linha: 141 Método: assertThat(options.getObjectFactoryClass(), equalTo(CustomObjectFactory.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberPropertiesParserTest.java linha: 148 Método: assertThat(logRecordListener.getLogRecords().get(0).getMessage(), equalTo("" + "Passing commandline options via the property 'cucumber.options' is no longer supported. " + "Please use individual properties instead. " + "See the java doc on io.cucumber.core.options.Constants for details."))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberPropertiesParserTest.java linha: 158 Método: assertThat(options.plugins().get(0).pluginString(), equalTo("message:target/cucumber.ndjson"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberPropertiesParserTest.java linha: 159 Método: assertThat(options.plugins().get(1).pluginString(), equalTo("html:target/cucumber.html"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberPropertiesParserTest.java linha: 168 Método: assertThat(options.plugins().get(0).pluginString(), equalTo("io.cucumber.core.plugin.NoPublishFormatter"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberPropertiesParserTest.java linha: 175 Método: assertThat(options.plugins(), empty())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberPropertiesParserTest.java linha: 185 Método: assertThat(options.plugins().get(0).pluginString(), equalTo("io.cucumber.core.plugin.PublishFormatter"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberPropertiesParserTest.java linha: 195 Método: assertThat(options.plugins().get(0).pluginString(), equalTo("io.cucumber.core.plugin.PublishFormatter:some/value"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberPropertiesParserTest.java linha: 203 Método: assertThat(options.getSnippetType(), equalTo(SnippetType.CAMELCASE))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberPropertiesParserTest.java linha: 210 Método: assertThat(options.isWip(), equalTo(true))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberPropertiesParserTest.java linha: 216 Método: assertThrows(CucumberException.class, () -> cucumberPropertiesParser.parse(properties).build())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberPropertiesParserTest.java linha: 219 Método: assertThat(exception.getMessage(), equalTo("Failed to parse 'cucumber.object-factory' with value 'garbage'"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberPropertiesParserTest.java linha: 227 Método: assertThat(options.getFeaturePaths(), containsInAnyOrder(URI.create("classpath:path/to.feature")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberPropertiesParserTest.java linha: 238 Método: assertThat(options.getFeaturePaths(), contains(URI.create("classpath:path/to.feature")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberPropertiesParserTest.java linha: 239 Método: assertThat(options.getTagExpressions(), not(contains("@example")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberPropertiesParserTest.java linha: 237 Método: assertAll(() -> assertThat(options.getFeaturePaths(), contains(URI.create("classpath:path/to.feature"))), () -> assertThat(options.getTagExpressions(), not(contains("@example"))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/RerunFileTest.java linha: 49 Método: assertThat(runtimeOptions.getFeaturePaths(), contains(new File("path/bar.feature").toURI(), new File("path/foo.feature").toURI()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/RerunFileTest.java linha: 52 Método: assertThat(runtimeOptions.getLineFilters(), hasEntry(new File("path/bar.feature").toURI(), singleton(2)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/RerunFileTest.java linha: 54 Método: assertThat(runtimeOptions.getLineFilters(), hasEntry(new File("path/foo.feature").toURI(), singleton(4)))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/RerunFileTest.java linha: 48 Método: assertAll(() -> assertThat(runtimeOptions.getFeaturePaths(), contains(new File("path/bar.feature").toURI(), new File("path/foo.feature").toURI())), () -> assertThat(runtimeOptions.getLineFilters(), hasEntry(new File("path/bar.feature").toURI(), singleton(2))), () -> assertThat(runtimeOptions.getLineFilters(), hasEntry(new File("path/foo.feature").toURI(), singleton(4))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/RerunFileTest.java linha: 73 Método: assertThat(runtimeOptions.getFeaturePaths(), hasSize(0))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/RerunFileTest.java linha: 74 Método: assertThat(runtimeOptions.getLineFilters(), equalTo(emptyMap()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/RerunFileTest.java linha: 72 Método: assertAll(() -> assertThat(runtimeOptions.getFeaturePaths(), hasSize(0)), () -> assertThat(runtimeOptions.getLineFilters(), equalTo(emptyMap())))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/RerunFileTest.java linha: 86 Método: assertThat(runtimeOptions.getFeaturePaths(), hasSize(0))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/RerunFileTest.java linha: 87 Método: assertThat(runtimeOptions.getLineFilters(), equalTo(emptyMap()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/RerunFileTest.java linha: 85 Método: assertAll(() -> assertThat(runtimeOptions.getFeaturePaths(), hasSize(0)), () -> assertThat(runtimeOptions.getLineFilters(), equalTo(emptyMap())))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/RerunFileTest.java linha: 99 Método: assertThat(runtimeOptions.getFeaturePaths(), hasSize(0))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/RerunFileTest.java linha: 100 Método: assertThat(runtimeOptions.getLineFilters(), equalTo(emptyMap()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/RerunFileTest.java linha: 98 Método: assertAll(() -> assertThat(runtimeOptions.getFeaturePaths(), hasSize(0)), () -> assertThat(runtimeOptions.getLineFilters(), equalTo(emptyMap())))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/RerunFileTest.java linha: 112 Método: assertThat(runtimeOptions.getFeaturePaths(), hasSize(0))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/RerunFileTest.java linha: 113 Método: assertThat(runtimeOptions.getLineFilters(), equalTo(emptyMap()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/RerunFileTest.java linha: 111 Método: assertAll(() -> assertThat(runtimeOptions.getFeaturePaths(), hasSize(0)), () -> assertThat(runtimeOptions.getLineFilters(), equalTo(emptyMap())))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/RerunFileTest.java linha: 126 Método: assertThat(runtimeOptions.getFeaturePaths(), contains(URI.create("classpath:path/bar.feature"), URI.create("classpath:path/foo.feature")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/RerunFileTest.java linha: 128 Método: assertThat(runtimeOptions.getLineFilters(), hasEntry(URI.create("classpath:path/bar.feature"), singleton(2)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/RerunFileTest.java linha: 130 Método: assertThat(runtimeOptions.getLineFilters(), hasEntry(URI.create("classpath:path/foo.feature"), singleton(4)))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/RerunFileTest.java linha: 125 Método: assertAll(() -> assertThat(runtimeOptions.getFeaturePaths(), contains(URI.create("classpath:path/bar.feature"), URI.create("classpath:path/foo.feature"))), () -> assertThat(runtimeOptions.getLineFilters(), hasEntry(URI.create("classpath:path/bar.feature"), singleton(2))), () -> assertThat(runtimeOptions.getLineFilters(), hasEntry(URI.create("classpath:path/foo.feature"), singleton(4))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/RerunFileTest.java linha: 145 Método: assertThat(runtimeOptions.getFeaturePaths(), contains(URI.create("file:/home/users/mp/My%20Documents/tests/bar.feature")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/RerunFileTest.java linha: 147 Método: assertThat(runtimeOptions.getLineFilters(), hasEntry(URI.create("file:/home/users/mp/My%20Documents/tests/bar.feature"), singleton(2)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/RerunFileTest.java linha: 144 Método: assertAll(() -> assertThat(runtimeOptions.getFeaturePaths(), contains(URI.create("file:/home/users/mp/My%20Documents/tests/bar.feature"))), () -> assertThat(runtimeOptions.getLineFilters(), hasEntry(URI.create("file:/home/users/mp/My%20Documents/tests/bar.feature"), singleton(2))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/RerunFileTest.java linha: 162 Método: assertThat(runtimeOptions.getFeaturePaths(), contains(URI.create("file:/home/users/mp/My%20Documents/tests/bar.feature"), URI.create("file:/home/users/mp/My%20Documents/tests/foo.feature")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/RerunFileTest.java linha: 165 Método: assertThat(runtimeOptions.getLineFilters(), hasEntry(URI.create("file:/home/users/mp/My%20Documents/tests/bar.feature"), singleton(2)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/RerunFileTest.java linha: 167 Método: assertThat(runtimeOptions.getLineFilters(), hasEntry(URI.create("file:/home/users/mp/My%20Documents/tests/foo.feature"), singleton(4)))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/RerunFileTest.java linha: 161 Método: assertAll(() -> assertThat(runtimeOptions.getFeaturePaths(), contains(URI.create("file:/home/users/mp/My%20Documents/tests/bar.feature"), URI.create("file:/home/users/mp/My%20Documents/tests/foo.feature"))), () -> assertThat(runtimeOptions.getLineFilters(), hasEntry(URI.create("file:/home/users/mp/My%20Documents/tests/bar.feature"), singleton(2))), () -> assertThat(runtimeOptions.getLineFilters(), hasEntry(URI.create("file:/home/users/mp/My%20Documents/tests/foo.feature"), singleton(4))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/RerunFileTest.java linha: 180 Método: assertThat(options.getFeaturePaths(), contains(new File("path/bar.feature").toURI()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/RerunFileTest.java linha: 181 Método: assertThat(options.getLineFilters(), hasEntry(new File("path/bar.feature").toURI(), singleton(2)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/RerunFileTest.java linha: 179 Método: assertAll(() -> assertThat(options.getFeaturePaths(), contains(new File("path/bar.feature").toURI())), () -> assertThat(options.getLineFilters(), hasEntry(new File("path/bar.feature").toURI(), singleton(2))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/RerunFileTest.java linha: 191 Método: assertThat(options.getFeaturePaths(), contains(new File("path/file.feature").toURI()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/PluginOptionTest.java linha: 23 Método: assertThat(option.pluginClass(), is(PrettyFormatter.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/PluginOptionTest.java linha: 24 Método: assertThat(option.argument(), nullValue())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/PluginOptionTest.java linha: 25 Método: assertThat(option.isEventListener(), is(true))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/PluginOptionTest.java linha: 22 Método: assertAll(() -> assertThat(option.pluginClass(), is(PrettyFormatter.class)), () -> assertThat(option.argument(), nullValue()), () -> assertThat(option.isEventListener(), is(true)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/PluginOptionTest.java linha: 31 Método: assertThat(option.argument(), is("out.txt"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/PluginOptionTest.java linha: 37 Método: assertThat(option.pluginClass(), is(PrettyFormatter.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/PluginOptionTest.java linha: 43 Método: assertThat(option.pluginClass(), is(TeamCityPlugin.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/PluginOptionTest.java linha: 48 Método: assertThrows(IllegalArgumentException.class, () -> PluginOption.parse("io.qameta.allure.cucumber4jvm.AllureCucumber4Jvm"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/PluginOptionTest.java linha: 51 Método: assertThat(exception.getMessage(), is("The plugin specification 'io.qameta.allure.cucumber4jvm.AllureCucumber4Jvm' has a problem:\n" + "\n" + "This plugin is not compatible with this version of Cucumber.\n" + "\n" + "Plugin specifications should have the format of PLUGIN[:[PATH|[URI [OPTIONS]]]\n" + "\n" + "Valid values for PLUGIN are: html, json, junit, message, pretty, progress, rerun, summary, teamcity, testng, timeline, unused, usage\n" + "\n" + "PLUGIN can also be a fully qualified class name, allowing registration of 3rd party plugins. The 3rd party plugin must implement io.cucumber.plugin.Plugin"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/PluginOptionTest.java linha: 66 Método: assertThrows(IllegalArgumentException.class, () -> PluginOption.parse(String.class.getName()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/PluginOptionTest.java linha: 69 Método: assertThat(exception.getMessage(), is("The plugin specification 'java.lang.String' has a problem:\n" + "\n" + "'java.lang.String' does not implement 'io.cucumber.plugin.Plugin'.\n" + "\n" + "Plugin specifications should have the format of PLUGIN[:[PATH|[URI [OPTIONS]]]\n" + "\n" + "Valid values for PLUGIN are: html, json, junit, message, pretty, progress, rerun, summary, teamcity, testng, timeline, unused, usage\n" + "\n" + "PLUGIN can also be a fully qualified class name, allowing registration of 3rd party plugins. The 3rd party plugin must implement io.cucumber.plugin.Plugin"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/PluginOptionTest.java linha: 83 Método: assertThrows(IllegalArgumentException.class, () -> PluginOption.parse("no-such-plugin"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/PluginOptionTest.java linha: 86 Método: assertThat(exception.getMessage(), is("The plugin specification 'no-such-plugin' has a problem:\n" + "\n" + "Could not load plugin class 'no-such-plugin'.\n" + "\n" + "Plugin specifications should have the format of PLUGIN[:[PATH|[URI [OPTIONS]]]\n" + "\n" + "Valid values for PLUGIN are: html, json, junit, message, pretty, progress, rerun, summary, teamcity, testng, timeline, unused, usage\n" + "\n" + "PLUGIN can also be a fully qualified class name, allowing registration of 3rd party plugins. The 3rd party plugin must implement io.cucumber.plugin.Plugin"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/PluginOptionTest.java linha: 105 Método: assertEquals(prettyPluginA, prettyPluginB)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/PluginOptionTest.java linha: 106 Método: assertEquals(prettyPluginA.hashCode(), prettyPluginB.hashCode())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/PluginOptionTest.java linha: 107 Método: assertEquals(htmlPluginA, htmlPluginB)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/PluginOptionTest.java linha: 108 Método: assertEquals(htmlPluginA.hashCode(), htmlPluginB.hashCode())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/PluginOptionTest.java linha: 109 Método: assertNotEquals(prettyPluginA, htmlPluginA)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/PluginOptionTest.java linha: 110 Método: assertNotEquals(prettyPluginA.hashCode(), htmlPluginA.hashCode())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/ShellWordsTest.java linha: 16 Método: MatcherAssert.assertThat(ShellWords.parse("  --glue  somewhere   somewhere_else"), contains("--glue", "somewhere", "somewhere_else"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/ShellWordsTest.java linha: 22 Método: assertThat(ShellWords.parse("--name 'The Fox'"), is(equalTo(asList("--name", "The Fox"))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/ShellWordsTest.java linha: 27 Método: assertThat(ShellWords.parse("--name 'some Name'"), contains("--name", "some Name"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/ShellWordsTest.java linha: 32 Método: assertThat(ShellWords.parse("--name \"The Fox\""), is(equalTo(asList("--name", "The Fox"))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/ShellWordsTest.java linha: 37 Método: assertThat(ShellWords.parse("--name \"The Fox\" --fur 'Brown White'"), is(equalTo(asList("--name", "The Fox", "--fur", "Brown White"))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/ShellWordsTest.java linha: 43 Método: assertThat(ShellWords.parse("\"'\" '\"'"), is(equalTo(asList("'", "\""))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberOptionsAnnotationParserTest.java linha: 47 Método: assertThat(runtimeOptions.getObjectFactoryClass(), is(nullValue()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberOptionsAnnotationParserTest.java linha: 48 Método: assertThat(runtimeOptions.getFeaturePaths(), contains(uri("classpath:/io/cucumber/core/options")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberOptionsAnnotationParserTest.java linha: 49 Método: assertThat(runtimeOptions.getGlue(), contains(uri("classpath:/io/cucumber/core/options")))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberOptionsAnnotationParserTest.java linha: 46 Método: assertAll(() -> assertThat(runtimeOptions.getObjectFactoryClass(), is(nullValue())), () -> assertThat(runtimeOptions.getFeaturePaths(), contains(uri("classpath:/io/cucumber/core/options"))), () -> assertThat(runtimeOptions.getGlue(), contains(uri("classpath:/io/cucumber/core/options"))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberOptionsAnnotationParserTest.java linha: 55 Método: assertThat(plugins.getPlugins(), is(empty()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberOptionsAnnotationParserTest.java linha: 54 Método: assertAll(() -> assertThat(plugins.getPlugins(), is(empty())))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberOptionsAnnotationParserTest.java linha: 75 Método: assertThat(pluginName + " not found among the plugins", found, is(equalTo(true)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberOptionsAnnotationParserTest.java linha: 88 Método: assertThat(runtimeOptions.getFeaturePaths(), contains(uri("classpath:/io/cucumber/core/options")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberOptionsAnnotationParserTest.java linha: 89 Método: assertThat(runtimeOptions.getGlue(), contains(uri("classpath:/io/cucumber/core/options")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberOptionsAnnotationParserTest.java linha: 90 Método: assertThat(plugins.getPlugins(), is(empty()))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberOptionsAnnotationParserTest.java linha: 87 Método: assertAll(() -> assertThat(runtimeOptions.getFeaturePaths(), contains(uri("classpath:/io/cucumber/core/options"))), () -> assertThat(runtimeOptions.getGlue(), contains(uri("classpath:/io/cucumber/core/options"))), () -> assertThat(plugins.getPlugins(), is(empty())))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberOptionsAnnotationParserTest.java linha: 98 Método: assertTrue(runtimeOptions.getTagExpressions().isEmpty())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberOptionsAnnotationParserTest.java linha: 99 Método: assertTrue(runtimeOptions.getNameFilters().isEmpty())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberOptionsAnnotationParserTest.java linha: 100 Método: assertTrue(runtimeOptions.getLineFilters().isEmpty())
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberOptionsAnnotationParserTest.java linha: 97 Método: assertAll(() -> assertTrue(runtimeOptions.getTagExpressions().isEmpty()), () -> assertTrue(runtimeOptions.getNameFilters().isEmpty()), () -> assertTrue(runtimeOptions.getLineFilters().isEmpty()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberOptionsAnnotationParserTest.java linha: 108 Método: assertThat(filters.size(), is(equalTo(2)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberOptionsAnnotationParserTest.java linha: 112 Método: assertThat(getRegexpPattern(iterator.next()), is(equalTo("name1")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberOptionsAnnotationParserTest.java linha: 113 Método: assertThat(getRegexpPattern(iterator.next()), is(equalTo("name2")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberOptionsAnnotationParserTest.java linha: 111 Método: assertAll(() -> assertThat(getRegexpPattern(iterator.next()), is(equalTo("name1"))), () -> assertThat(getRegexpPattern(iterator.next()), is(equalTo("name2"))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberOptionsAnnotationParserTest.java linha: 128 Método: assertThat(tagExpressions, contains("( @cucumber or @gherkin )"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberOptionsAnnotationParserTest.java linha: 133 Método: assertThrows(RuntimeException.class, () -> parser().parse(ClassWithInvalidTagExpression.class).build())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberOptionsAnnotationParserTest.java linha: 137 Método: assertThat(actual.getMessage(), is("Invalid tag expression at 'io.cucumber.core.options.CucumberOptionsAnnotationParserTest$ClassWithInvalidTagExpression'"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberOptionsAnnotationParserTest.java linha: 139 Método: assertThat(actual.getCause(), isA(TagExpressionException.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberOptionsAnnotationParserTest.java linha: 136 Método: assertAll(() -> assertThat(actual.getMessage(), is("Invalid tag expression at 'io.cucumber.core.options.CucumberOptionsAnnotationParserTest$ClassWithInvalidTagExpression'")), () -> assertThat(actual.getCause(), isA(TagExpressionException.class)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberOptionsAnnotationParserTest.java linha: 144 Método: assertThrows(RuntimeException.class, () -> parser().parse(ClassWithInheredInvalidTagExpression.class).build())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberOptionsAnnotationParserTest.java linha: 148 Método: assertThat(actual.getMessage(), is("Invalid tag expression at 'io.cucumber.core.options.CucumberOptionsAnnotationParserTest$ClassWithInvalidTagExpression'"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberOptionsAnnotationParserTest.java linha: 150 Método: assertThat(actual.getCause(), isA(TagExpressionException.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberOptionsAnnotationParserTest.java linha: 147 Método: assertAll(() -> assertThat(actual.getMessage(), is("Invalid tag expression at 'io.cucumber.core.options.CucumberOptionsAnnotationParserTest$ClassWithInvalidTagExpression'")), () -> assertThat(actual.getCause(), isA(TagExpressionException.class)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberOptionsAnnotationParserTest.java linha: 156 Método: assertThat(runtimeOptions.getObjectFactoryClass(), is(equalTo(TestObjectFactory.class)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberOptionsAnnotationParserTest.java linha: 165 Método: assertThat(runtimeOptions.plugins(), hasSize(1))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberOptionsAnnotationParserTest.java linha: 166 Método: assertThat(runtimeOptions.plugins().get(0).pluginClass(), equalTo(PublishFormatter.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberOptionsAnnotationParserTest.java linha: 175 Método: assertThat(runtimeOptions.plugins(), hasSize(1))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberOptionsAnnotationParserTest.java linha: 176 Método: assertThat(runtimeOptions.plugins().get(0).pluginClass(), equalTo(NoPublishFormatter.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberOptionsAnnotationParserTest.java linha: 182 Método: assertThat(runtimeOptions.getSnippetType(), is(equalTo(SnippetType.CAMELCASE)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberOptionsAnnotationParserTest.java linha: 189 Método: assertThat(runtimeOptions.getSnippetType(), is(equalTo(SnippetType.CAMELCASE)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberOptionsAnnotationParserTest.java linha: 199 Método: assertAll(() -> assertPluginExists(pluginList, HtmlFormatter.class.getName()), () -> assertPluginExists(pluginList, PrettyFormatter.class.getName()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberOptionsAnnotationParserTest.java linha: 208 Método: assertTrue(runtimeOptions.isMonochrome())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberOptionsAnnotationParserTest.java linha: 215 Método: assertThat(runtimeOptions.getGlue(), contains(uri("classpath:/app/features/user/registration"), uri("classpath:/app/features/hooks")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberOptionsAnnotationParserTest.java linha: 223 Método: assertThat(runtimeOptions.getGlue(), contains(uri("classpath:/app/features/hooks"), uri("classpath:/io/cucumber/core/options")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberOptionsAnnotationParserTest.java linha: 234 Método: assertThat(runtimeOptions.getGlue(), contains(uri("classpath:/app/features/user/hooks"), uri("classpath:/app/features/hooks"), uri("classpath:/io/cucumber/core/options")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberOptionsAnnotationParserTest.java linha: 243 Método: assertThat(runtimeOptions.getGlue(), contains(uri("classpath:/app/features/user/hooks"), uri("classpath:/app/features/user/registration"), uri("classpath:/app/features/hooks")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberOptionsAnnotationParserTest.java linha: 250 Método: assertThrows(CucumberException.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/CucumberOptionsAnnotationParserTest.java linha: 251 Método: assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("glue and extraGlue cannot be specified at the same time")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/RuntimeOptionsTest.java linha: 20 Método: assertThat(runtimeOptions.plugins(), is(singletonList(aPlugin)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/BooleanStringTest.java linha: 15 Método: assertThat(BooleanString.parseBoolean(null), is(false))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/BooleanStringTest.java linha: 21 Método: assertThat(BooleanString.parseBoolean(value), is(false))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/BooleanStringTest.java linha: 27 Método: assertThat(BooleanString.parseBoolean(value), is(true))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/options/BooleanStringTest.java linha: 33 Método: assertThrows(IllegalArgumentException.class, () -> BooleanString.parseBoolean(value))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/snippets/IdentifierGeneratorTest.java linha: 20 Método: assertThrows(IllegalArgumentException.class, testMethod)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/snippets/IdentifierGeneratorTest.java linha: 21 Método: assertThat(expectedThrown.getMessage(), is(equalTo("Cannot create function name from empty sentence")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/snippets/IdentifierGeneratorTest.java linha: 58 Método: assertThat(snakeCase.generate(sentence), is(equalTo(expectedSnakeCase)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/snippets/IdentifierGeneratorTest.java linha: 59 Método: assertThat(camelCase.generate(sentence), is(equalTo(expectedCamelCase)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/snippets/IdentifierGeneratorTest.java linha: 57 Método: assertAll(() -> assertThat(snakeCase.generate(sentence), is(equalTo(expectedSnakeCase))), () -> assertThat(camelCase.generate(sentence), is(equalTo(expectedCamelCase))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/snippets/ArgumentPatternTest.java linha: 18 Método: assertThat(argumentPattern.replaceMatchesWithGroups("1"), is(equalTo("(\\d)")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/snippets/ArgumentPatternTest.java linha: 23 Método: assertThat(argumentPattern.replaceMatchesWithGroups("13"), is(equalTo("(\\d)(\\d)")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/snippets/ArgumentPatternTest.java linha: 28 Método: assertThat(argumentPattern.replaceMatchesWithSpace("4"), is(equalTo(" ")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/resource/ResourceScannerTest.java linha: 30 Método: assertThat(resources, containsInAnyOrder(URI.create("classpath:resource.txt"), URI.create("classpath:other-resource.txt"), URI.create("classpath:spaces%20in%20name%20resource.txt")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/resource/ResourceScannerTest.java linha: 40 Método: assertThat(resources, containsInAnyOrder(URI.create("classpath:jar-resource.txt"), URI.create("classpath:com/example/package-jar-resource.txt")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/resource/ResourceScannerTest.java linha: 49 Método: assertThat(resources, containsInAnyOrder(URI.create("classpath:io/cucumber/core/resource/test/resource.txt"), URI.create("classpath:io/cucumber/core/resource/test/other-resource.txt"), URI.create("classpath:io/cucumber/core/resource/test/spaces%20in%20name%20resource.txt")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/resource/ResourceScannerTest.java linha: 59 Método: assertThat(resources, containsInAnyOrder(URI.create("classpath:io/cucumber/core/resource/test/resource.txt"), URI.create("classpath:io/cucumber/core/resource/test/other-resource.txt"), URI.create("classpath:io/cucumber/core/resource/test/spaces%20in%20name%20resource.txt")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/resource/ResourceScannerTest.java linha: 69 Método: assertThat(resources, containsInAnyOrder(URI.create("classpath:io/cucumber/core/resource/test/resource.txt"), URI.create("classpath:io/cucumber/core/resource/test/other-resource.txt"), URI.create("classpath:io/cucumber/core/resource/test/spaces%20in%20name%20resource.txt")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/resource/ResourceScannerTest.java linha: 79 Método: assertThat(resources, contains(URI.create("classpath:io/cucumber/core/resource/test/resource.txt")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/resource/ResourceScannerTest.java linha: 86 Método: assertThat(resources, contains(URI.create("classpath:io/cucumber/core/resource/test/spaces%20in%20name%20resource.txt")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/resource/ResourceScannerTest.java linha: 94 Método: assertThat(resources, containsInAnyOrder(URI.create("classpath:io/cucumber/core/resource/test/resource.txt"), URI.create("classpath:io/cucumber/core/resource/test/other-resource.txt"), URI.create("classpath:io/cucumber/core/resource/test/spaces%20in%20name%20resource.txt")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/resource/ResourceScannerTest.java linha: 104 Método: assertThat(resources, contains(file.toURI()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/resource/ResourceScannerTest.java linha: 114 Método: assertThat(resources, contains(file.toURI()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/resource/ResourceScannerTest.java linha: 121 Método: assertThat(resources, containsInAnyOrder(new File("src/test/resources/io/cucumber/core/resource/test/resource.txt").toURI(), new File("src/test/resources/io/cucumber/core/resource/test/other-resource.txt").toURI(), new File("src/test/resources/io/cucumber/core/resource/test/spaces in name resource.txt").toURI()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/resource/ResourceScannerTest.java linha: 130 Método: assertThrows(IllegalArgumentException.class, () -> resourceScanner.scanForResourcesPath(file.toPath()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/resource/ResourceScannerTest.java linha: 140 Método: assertThat(resources, containsInAnyOrder(new File("src/test/resource-symlink/test/resource.txt").toURI(), new File("src/test/resource-symlink/test/other-resource.txt").toURI(), new File("src/test/resource-symlink/test/spaces in name resource.txt").toURI()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/resource/ResourceScannerTest.java linha: 150 Método: assertThat(resources, contains(file.toURI()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/resource/ResourceScannerTest.java linha: 159 Método: assertThat(resources, contains(resourceUri))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/resource/ResourceScannerTest.java linha: 168 Método: assertThrows(CucumberException.class, () -> resourceScanner.scanForResourcesUri(resourceUri))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/resource/ResourceScannerTest.java linha: 171 Método: assertThat(exception.getMessage(), containsString("Cucumber currently doesn't support classpath scanning in nested jars."))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/resource/ResourceScannerTest.java linha: 183 Método: assertThat(resources, containsInAnyOrder(URI.create("jar:file://" + jarFileUri.getSchemeSpecificPart() + "!/BOOT-INF/classes/com/example/resource.txt")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/resource/ResourceScannerTest.java linha: 192 Método: assertThat(resources, containsInAnyOrder(new File("src/test/resources/io/cucumber/core/resource/test/resource.txt").toURI(), new File("src/test/resources/io/cucumber/core/resource/test/other-resource.txt").toURI(), new File("src/test/resources/io/cucumber/core/resource/test/spaces in name resource.txt").toURI()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/resource/ResourceScannerTest.java linha: 202 Método: assertThat(resources, contains(uri))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/resource/ResourceScannerTest.java linha: 209 Método: assertThat(resources, containsInAnyOrder(URI.create("classpath:io/cucumber/core/resource/test/resource.txt"), URI.create("classpath:io/cucumber/core/resource/test/other-resource.txt"), URI.create("classpath:io/cucumber/core/resource/test/spaces%20in%20name%20resource.txt")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/resource/ClasspathScannerTest.java linha: 38 Método: assertThat(classes, contains(ExampleClass.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/resource/ClasspathScannerTest.java linha: 45 Método: assertThat(classes, empty())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/resource/ClasspathScannerTest.java linha: 52 Método: assertThat(classes, containsInAnyOrder(ExampleClass.class, ExampleInterface.class, OtherClass.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/resource/ClasspathScannerTest.java linha: 62 Método: assertThat(classes, empty())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/resource/ClasspathScannerTest.java linha: 77 Método: assertThat(scanner.scanForClassesInPackage("com.cucumber.bundle"), empty())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/resource/ClasspathScannerTest.java linha: 78 Método: assertThat(logRecordListener.getLogRecords().get(0).getMessage(), containsString("Failed to find resources for 'bundle-resource:com/cucumber/bundle'"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/resource/JarUriFileSystemServiceTest.java linha: 20 Método: assertTrue(JarUriFileSystemService.supports(URI.create("jar:file:/example.jar!com/example/app")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/resource/JarUriFileSystemServiceTest.java linha: 21 Método: assertTrue(JarUriFileSystemService.supports(URI.create("file:/example.jar")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/resource/JarUriFileSystemServiceTest.java linha: 38 Método: assertThat(fileSystem1, is(fileSystem2))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/resource/JarUriFileSystemServiceTest.java linha: 41 Método: assertTrue(fileSystem1.isOpen())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/resource/JarUriFileSystemServiceTest.java linha: 42 Método: assertTrue(fileSystem2.isOpen())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/resource/JarUriFileSystemServiceTest.java linha: 45 Método: assertFalse(fileSystem1.isOpen())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/resource/JarUriFileSystemServiceTest.java linha: 46 Método: assertFalse(fileSystem2.isOpen())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/resource/ClasspathSupportTest.java linha: 17 Método: assertEquals("com.example", packageName)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/resource/ClasspathSupportTest.java linha: 23 Método: assertEquals("com.example", packageName)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/resource/ClasspathSupportTest.java linha: 32 Método: assertEquals("com.example.app", packageName)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/resource/ClasspathSupportTest.java linha: 41 Método: assertEquals("com.example.app", packageName)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/resource/ClasspathSupportTest.java linha: 50 Método: assertEquals("com.example.app", packageName)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/resource/ClasspathSupportTest.java linha: 59 Método: assertEquals("com.example.app.App", fqn)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/resource/ClasspathSupportTest.java linha: 68 Método: assertEquals("com.example.app.App", fqn)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/resource/ClasspathSupportTest.java linha: 77 Método: assertEquals("com.example.app.App", fqn)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/resource/ClasspathSupportTest.java linha: 86 Método: assertEquals(URI.create("classpath:com/example/app/app.feature"), fqn)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/resource/ClasspathSupportTest.java linha: 95 Método: assertEquals(URI.create("classpath:com/example/app/app.feature"), fqn)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/resource/ClasspathSupportTest.java linha: 104 Método: assertEquals(URI.create("classpath:com/example/app/app.feature"), fqn)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/FeatureBuilderTest.java linha: 38 Método: assertThat(features.size(), equalTo(1))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/FeatureBuilderTest.java linha: 69 Método: assertThat(features.size(), equalTo(2))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/FeatureBuilderTest.java linha: 70 Método: assertThat(features.get(0).getUri(), equalTo(featurePath1))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/FeatureBuilderTest.java linha: 71 Método: assertThat(features.get(1).getUri(), equalTo(featurePath2))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/FeatureBuilderTest.java linha: 68 Método: assertAll(() -> assertThat(features.size(), equalTo(2)), () -> assertThat(features.get(0).getUri(), equalTo(featurePath1)), () -> assertThat(features.get(1).getUri(), equalTo(featurePath2)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/FeatureBuilderTest.java linha: 91 Método: assertThat(features.get(0).getUri(), equalTo(featurePath3))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/FeatureBuilderTest.java linha: 92 Método: assertThat(features.get(1).getUri(), equalTo(featurePath2))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/FeatureBuilderTest.java linha: 93 Método: assertThat(features.get(2).getUri(), equalTo(featurePath1))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/FeatureBuilderTest.java linha: 90 Método: assertAll(() -> assertThat(features.get(0).getUri(), equalTo(featurePath3)), () -> assertThat(features.get(1).getUri(), equalTo(featurePath2)), () -> assertThat(features.get(2).getUri(), equalTo(featurePath1)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/SingletonRunnerSupplierTest.java linha: 35 Método: assertThat(runnerSupplier.get(), is(notNullValue()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/SingletonRunnerSupplierTest.java linha: 40 Método: assertThat(runnerSupplier.get(), is(equalTo(runnerSupplier.get())))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/CucumberExecutionContextTest.java linha: 47 Método: assertThrows(IllegalStateException.class, () -> context.runTestCase(runner -> {
    throw failure;
}))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/CucumberExecutionContextTest.java linha: 50 Método: assertThat(thrown, is(failure))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/CucumberExecutionContextTest.java linha: 51 Método: assertThat(context.getThrowable(), is(failure))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/CucumberExecutionContextTest.java linha: 56 Método: assertThrows(IllegalStateException.class, () -> context.runTestCase(runner -> {
    try (TestCaseResultObserver r = new TestCaseResultObserver(bus)) {
        bus.send(new TestCaseFinished(bus.getInstant(), mock(TestCase.class), new Result(Status.FAILED, Duration.ZERO, failure)));
        r.assertTestCasePassed(Exception::new, Function.identity(), (suggestions) -> new Exception(), Function.identity());
    }
}))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/CucumberExecutionContextTest.java linha: 67 Método: assertThat(thrown, is(failure))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/CucumberExecutionContextTest.java linha: 68 Método: assertThat(context.getThrowable(), nullValue())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/CucumberExecutionContextTest.java linha: 80 Método: assertThrows(IllegalStateException.class, () -> context.runTestCase(runner -> {
    throw failure;
}))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/CucumberExecutionContextTest.java linha: 85 Método: assertThat(testRunStarted.get(0), notNullValue())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/CucumberExecutionContextTest.java linha: 87 Método: assertThat(result.getStatus(), is(Status.FAILED))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/CucumberExecutionContextTest.java linha: 88 Método: assertThat(result.getError(), is(failure))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/BackendServiceLoaderTest.java linha: 28 Método: assertThat(backendSupplier.get().iterator().next(), is(notNullValue()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/BackendServiceLoaderTest.java linha: 36 Método: assertThrows(CucumberException.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/BackendServiceLoaderTest.java linha: 37 Método: assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("No backends were found. Please make sure you have a backend module on your CLASSPATH.")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/ThreadLocalRunnerSupplierTest.java linha: 44 Método: assertThat(runnerSupplier.get(), is(notNullValue()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/ThreadLocalRunnerSupplierTest.java linha: 61 Método: assertThat(runners[0], is(not(equalTo(runners[1]))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/ThreadLocalRunnerSupplierTest.java linha: 62 Método: assertThat(runners[1], is(not(equalTo(runners[0]))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/ThreadLocalRunnerSupplierTest.java linha: 60 Método: assertAll(() -> assertThat(runners[0], is(not(equalTo(runners[1])))), () -> assertThat(runners[1], is(not(equalTo(runners[0])))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/ThreadLocalRunnerSupplierTest.java linha: 67 Método: assertThat(runnerSupplier.get(), is(equalTo(runnerSupplier.get())))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/ThreadLocalRunnerSupplierTest.java linha: 76 Método: assertThat(eventBus, is(not(equalTo(runnerBus))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/ThreadLocalRunnerSupplierTest.java linha: 77 Método: assertThat(runnerBus, is(not(equalTo(eventBus))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/ThreadLocalRunnerSupplierTest.java linha: 75 Método: assertAll(() -> assertThat(eventBus, is(not(equalTo(runnerBus)))), () -> assertThat(runnerBus, is(not(equalTo(eventBus)))))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/ThreadLocalRunnerSupplierTest.java linha: 85 Método: fail("Should not receive event")
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/DryRunTest.java linha: 89 Método: assertThat(out.toString(), is("" + "skip\n" + "    SKIPPED\n" + "    SKIPPED\n" + "    SKIPPED\n" + "    SKIPPED\n" + "    SKIPPED\n" + "    SKIPPED\n" + "    SKIPPED\n" + "pending\n" + "    PENDING\n" + "    SKIPPED\n" + "    SKIPPED\n" + "    SKIPPED\n" + "    SKIPPED\n" + "    SKIPPED\n" + "    SKIPPED\n" + "undefined\n" + "    UNDEFINED\n" + "    SKIPPED\n" + "    SKIPPED\n" + "    SKIPPED\n" + "    SKIPPED\n" + "    SKIPPED\n" + "    SKIPPED\n" + "ambiguous\n" + "    AMBIGUOUS\n" + "    SKIPPED\n" + "    SKIPPED\n" + "    SKIPPED\n" + "    SKIPPED\n" + "    SKIPPED\n" + "    SKIPPED\n" + "failed\n" + "    FAILED\n" + "    SKIPPED\n" + "    SKIPPED\n" + "    SKIPPED\n" + "    SKIPPED\n" + "    SKIPPED\n" + "    SKIPPED\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/DryRunTest.java linha: 149 Método: assertThat(out.toString(), is("" + "skipped\n" + "    PASSED\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/DryRunTest.java linha: 170 Método: assertThat(out.toString(), is("" + "pending\n" + "    PASSED\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/DryRunTest.java linha: 186 Método: assertThat(out.toString(), is("" + "undefined\n" + "    UNDEFINED\n" + "    SKIPPED\n" + "    SKIPPED\n" + "    SKIPPED\n" + "    SKIPPED\n" + "    SKIPPED\n" + "    SKIPPED\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/DryRunTest.java linha: 208 Método: assertThat(out.toString(), is("" + "ambiguous\n" + "    AMBIGUOUS\n" + "    SKIPPED\n" + "    SKIPPED\n" + "    SKIPPED\n" + "    SKIPPED\n" + "    SKIPPED\n" + "    SKIPPED\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/DryRunTest.java linha: 235 Método: assertThat(out.toString(), is("" + "failed\n" + "    PASSED\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/FeaturePathFeatureSupplierTest.java linha: 34 Método: assertThat(logRecordListener.getLogRecords().get(1).getMessage(), equalTo("No features found at classpath:io/cucumber/core/options"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/FeaturePathFeatureSupplierTest.java linha: 44 Método: assertThat(logRecordListener.getLogRecords().get(1).getMessage(), containsString("Got no path to feature directory or feature file"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/FeaturePathFeatureSupplierTest.java linha: 52 Método: assertThrows(IllegalArgumentException.class, supplier::get)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/FeaturePathFeatureSupplierTest.java linha: 55 Método: assertThat(exception.getMessage(), startsWith("path must exist: "))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/FeaturePathFeatureSupplierTest.java linha: 63 Método: assertThrows(IllegalArgumentException.class, supplier::get)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/FeaturePathFeatureSupplierTest.java linha: 67 Método: assertThat(exception.getMessage(), is("Feature not found: classpath:io/cucumber/core/runtime/empty.feature"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/FeaturePathFeatureSupplierTest.java linha: 74 Método: assertThrows(IllegalArgumentException.class, supplier::get)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/FeaturePathFeatureSupplierTest.java linha: 78 Método: assertThat(exception.getMessage(), is("Feature not found: classpath:no-such.feature"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/ObjectFactoryServiceLoaderTest.java linha: 31 Método: assertThat(loader.loadObjectFactory(), instanceOf(DefaultObjectFactory.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/ObjectFactoryServiceLoaderTest.java linha: 40 Método: assertThat(loader.loadObjectFactory(), instanceOf(DefaultObjectFactory.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/ObjectFactoryServiceLoaderTest.java linha: 52 Método: assertThrows(CucumberException.class, loader::loadObjectFactory)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/ObjectFactoryServiceLoaderTest.java linha: 53 Método: assertThat(exception.getMessage(), is("" + "Could not find any object factory.\n" + "\n" + "Cucumber uses SPI to discover object factory implementations.\n" + "This typically happens when using shaded jars. Make sure\n" + "to merge all SPI definitions in META-INF/services correctly"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/ObjectFactoryServiceLoaderTest.java linha: 71 Método: assertThrows(CucumberException.class, loader::loadObjectFactory)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/ObjectFactoryServiceLoaderTest.java linha: 72 Método: assertThat(exception.getMessage(), is("" + "Could not find object factory io.cucumber.core.runtime.ObjectFactoryServiceLoaderTest$NoSuchObjectFactory.\n" + "\n" + "Cucumber uses SPI to discover object factory implementations.\n" + "Has the class been registered with SPI and is it available on\n" + "the classpath?"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/ExitStatusTest.java linha: 32 Método: assertThat(exitStatus.exitStatus(), is(equalTo((byte) 0x0)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/ExitStatusTest.java linha: 50 Método: assertThat(exitStatus.exitStatus(), is(equalTo((byte) 0x0)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/ExitStatusTest.java linha: 67 Método: assertThat(exitStatus.exitStatus(), is(equalTo((byte) 0x0)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/ExitStatusTest.java linha: 76 Método: assertThat(exitStatus.exitStatus(), is(equalTo((byte) 0x1)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/ExitStatusTest.java linha: 84 Método: assertThat(exitStatus.exitStatus(), is(equalTo((byte) 0x0)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/ExitStatusTest.java linha: 93 Método: assertThat(exitStatus.exitStatus(), is(equalTo((byte) 0x1)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/ExitStatusTest.java linha: 101 Método: assertThat(exitStatus.exitStatus(), is(equalTo((byte) 0x1)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/ExitStatusTest.java linha: 109 Método: assertThat(exitStatus.exitStatus(), is(equalTo((byte) 0x0)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/ExitStatusTest.java linha: 117 Método: assertThat(exitStatus.exitStatus(), is(equalTo((byte) 0x0)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/ExitStatusTest.java linha: 128 Método: assertThat(exitStatus.exitStatus(), is(equalTo((byte) 0x0)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/ExitStatusTest.java linha: 136 Método: assertThat(exitStatus.exitStatus(), is(equalTo((byte) 0x1)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/ExitStatusTest.java linha: 145 Método: assertThat(exitStatus.exitStatus(), is(equalTo((byte) 0x1)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/ExitStatusTest.java linha: 154 Método: assertThat(exitStatus.exitStatus(), is(equalTo((byte) 0x1)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/ExitStatusTest.java linha: 162 Método: assertThat(exitStatus.exitStatus(), is(equalTo((byte) 0x1)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/ExitStatusTest.java linha: 171 Método: assertThat(exitStatus.exitStatus(), is(equalTo((byte) 0x1)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/ExitStatusTest.java linha: 180 Método: assertThat(exitStatus.exitStatus(), is(equalTo((byte) 0x0)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/ExitStatusTest.java linha: 188 Método: assertThat(exitStatus.exitStatus(), is(equalTo((byte) 0x0)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/ExitStatusTest.java linha: 196 Método: assertThat(exitStatus.exitStatus(), is(equalTo((byte) 0x1)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/ExitStatusTest.java linha: 204 Método: assertThat(exitStatus.exitStatus(), is(equalTo((byte) 0x0)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/ExitStatusTest.java linha: 211 Método: assertThat(exitStatus.exitStatus(), is(equalTo((byte) 0x1)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/RuntimeTest.java linha: 77 Método: assertThat(runtime.exitStatus(), is(equalTo((byte) 0x0)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/RuntimeTest.java linha: 97 Método: assertThat(runtime.exitStatus(), is(equalTo((byte) 0x1)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/RuntimeTest.java linha: 105 Método: assertThat(runtime.exitStatus(), is(equalTo((byte) 0x1)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/RuntimeTest.java linha: 113 Método: assertThat(runtime.exitStatus(), is(equalTo((byte) 0x0)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/RuntimeTest.java linha: 121 Método: assertThat(runtime.exitStatus(), is(equalTo((byte) 0x1)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/RuntimeTest.java linha: 129 Método: assertThat(runtime.exitStatus(), is(equalTo((byte) 0x1)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/RuntimeTest.java linha: 140 Método: assertThrows(FeatureParserException.class, runtime::run)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/RuntimeTest.java linha: 150 Método: assertThat(runtime.exitStatus(), is(equalTo((byte) 0x0)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/RuntimeTest.java linha: 181 Método: assertThat(capturedScenario.getValue().getName(), is(equalTo("scenario name")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/RuntimeTest.java linha: 207 Método: assertThat(formatterSpy.toString(), is(equalTo("" + "TestRun started\n" + "  TestCase started\n" + "    TestStep started\n" + "    TestStep finished\n" + "    TestStep started\n" + "    TestStep finished\n" + "    TestStep started\n" + "    TestStep finished\n" + "  TestCase finished\n" + "  TestCase started\n" + "    TestStep started\n" + "    TestStep finished\n" + "    TestStep started\n" + "    TestStep finished\n" + "  TestCase finished\n" + "TestRun finished\n")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/RuntimeTest.java linha: 256 Método: assertThat(formatterSpy.toString(), is(equalTo("" + "TestRun started\n" + "  TestCase started\n" + "    TestStep started\n" + "    TestStep finished\n" + "    TestStep started\n" + "    TestStep finished\n" + "    TestStep started\n" + "    TestStep finished\n" + "  TestCase finished\n" + "  TestCase started\n" + "    TestStep started\n" + "    TestStep finished\n" + "    TestStep started\n" + "    TestStep finished\n" + "    TestStep started\n" + "    TestStep finished\n" + "  TestCase finished\n" + "  TestCase started\n" + "    TestStep started\n" + "    TestStep finished\n" + "    TestStep started\n" + "    TestStep finished\n" + "    TestStep started\n" + "    TestStep finished\n" + "  TestCase finished\n" + "TestRun finished\n")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/RuntimeTest.java linha: 317 Método: assertThat(formatterOutput, is(equalTo("" + "TestRun started\n" + "  TestCase started\n" + "    TestStep started\n" + "    TestStep finished\n" + "  TestCase finished\n" + "  TestCase started\n" + "    TestStep started\n" + "    TestStep finished\n" + "  TestCase finished\n" + "  TestCase started\n" + "    TestStep started\n" + "    TestStep finished\n" + "  TestCase finished\n" + "  TestCase started\n" + "    TestStep started\n" + "    TestStep finished\n" + "  TestCase finished\n" + "TestRun finished\n")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/RuntimeTest.java linha: 364 Método: assertThrows(CompositeCucumberException.class, testMethod)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/RuntimeTest.java linha: 365 Método: assertThat(actualThrown.getMessage(), is(equalTo("There were 3 exceptions. The details are in the stacktrace below.")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/RuntimeTest.java linha: 367 Método: assertThat(actualThrown.getSuppressed(), is(arrayWithSize(3)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/RuntimeTest.java linha: 383 Método: assertThrows(RuntimeException.class, testMethod)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/RuntimeTest.java linha: 384 Método: assertThat(actualThrown, equalTo(expectedException))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/RuntimeTest.java linha: 400 Método: assertThrows(RuntimeException.class, testMethod)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/RuntimeTest.java linha: 401 Método: assertThat(actualThrown, equalTo(expectedException))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/RuntimeTest.java linha: 442 Método: assertThat(interruptHit.getCount(), is(equalTo(0L)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/RuntimeTest.java linha: 492 Método: assertThat(stepDefinedEvents.get(0).getPattern(), is(mockedStepDefinition.getPattern()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/RuntimeTest.java linha: 493 Método: assertThat(stepDefinedEvents.get(1).getPattern(), is(mockedScenarioScopedStepDefinition.getPattern()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/RuntimeTest.java linha: 495 Método: assertThat(stepDefinedEvents.get(2).getPattern(), is(mockedStepDefinition.getPattern()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/RuntimeTest.java linha: 496 Método: assertThat(stepDefinedEvents.get(3).getPattern(), is(mockedScenarioScopedStepDefinition.getPattern()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/RuntimeTest.java linha: 497 Método: assertThat(stepDefinedEvents.size(), is(4))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/RuntimeTest.java linha: 510 Método: assertThat(meta.getProtocolVersion(), matchesPattern("\\d+\\.\\d+\\.\\d+(-RC\\d+)?(-SNAPSHOT)?"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/RuntimeTest.java linha: 511 Método: assertThat(meta.getImplementation().getName(), is("cucumber-jvm"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/RuntimeTest.java linha: 512 Método: assertThat(meta.getImplementation().getVersion().get(), matchesPattern("\\d+\\.\\d+\\.\\d+(-RC\\d+)?(-SNAPSHOT)?"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/RuntimeTest.java linha: 514 Método: assertThat(meta.getOs().getName(), matchesPattern(".+"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runtime/RuntimeTest.java linha: 515 Método: assertThat(meta.getCpu().getName(), matchesPattern(".+"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/filter/NamePredicateTest.java linha: 21 Método: assertTrue(predicate.test(pickle))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/filter/NamePredicateTest.java linha: 37 Método: assertFalse(predicate.test(pickle))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/filter/NamePredicateTest.java linha: 45 Método: assertTrue(predicate.test(pickle))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/filter/NamePredicateTest.java linha: 53 Método: assertTrue(predicate.test(pickle))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/filter/TagPredicateTest.java linha: 21 Método: assertTrue(predicate.test(pickle))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/filter/TagPredicateTest.java linha: 28 Método: assertTrue(predicate.test(pickle))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/filter/TagPredicateTest.java linha: 35 Método: assertFalse(predicate.test(pickle))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/filter/TagPredicateTest.java linha: 42 Método: assertTrue(predicate.test(pickle))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/filter/TagPredicateTest.java linha: 49 Método: assertTrue(predicate.test(pickle))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/filter/TagPredicateTest.java linha: 56 Método: assertFalse(predicate.test(pickle))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/filter/TagPredicateTest.java linha: 63 Método: assertTrue(predicate.test(pickle))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/filter/TagPredicateTest.java linha: 70 Método: assertFalse(predicate.test(pickle))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/filter/TagPredicateTest.java linha: 77 Método: assertTrue(predicate.test(pickle))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/filter/TagPredicateTest.java linha: 84 Método: assertTrue(predicate.test(pickle))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/filter/TagPredicateTest.java linha: 91 Método: assertFalse(predicate.test(pickle))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/filter/TagPredicateTest.java linha: 98 Método: assertTrue(predicate.test(pickle))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/filter/TagPredicateTest.java linha: 105 Método: assertFalse(predicate.test(pickle))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/filter/LinePredicateTest.java linha: 40 Método: assertTrue(predicate.test(pickle))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/filter/LinePredicateTest.java linha: 48 Método: assertFalse(predicate.test(pickle))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/filter/LinePredicateTest.java linha: 56 Método: assertTrue(predicate.test(pickle))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/filter/LinePredicateTest.java linha: 64 Método: assertTrue(predicate.test(pickle))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/filter/LinePredicateTest.java linha: 72 Método: assertTrue(predicate.test(pickle))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/filter/LinePredicateTest.java linha: 80 Método: assertFalse(predicate.test(pickle))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/ResultTest.java linha: 39 Método: assertThat(results, equalTo(asList(passed, skipped, pending, undefined, ambiguous, failed)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/ResultTest.java linha: 45 Método: assertTrue(passedResult.getStatus().isOk())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/ResultTest.java linha: 51 Método: assertTrue(skippedResult.getStatus().isOk())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/ResultTest.java linha: 57 Método: assertFalse(failedResult.getStatus().isOk())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/ResultTest.java linha: 66 Método: assertTrue(result.getStatus().is(result.getStatus()))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/ResultTest.java linha: 69 Método: assertThat("No checks performed", checkCount > 0, is(equalTo(true)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/ResultTest.java linha: 79 Método: assertFalse(result.getStatus().is(status))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/ResultTest.java linha: 84 Método: assertThat("No checks performed", checkCount > 0, is(equalTo(true)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CamelCaseConverterTest.java linha: 28 Método: assertThat(camelCaseConverter.toCamelCase(singletonMap(header, "value")), equalTo(singletonMap("testString", "value")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CamelCaseConverterTest.java linha: 42 Método: assertThat(camelCaseConverter.toCamelCase(singletonMap(header, "value")), equalTo(singletonMap("threeWordsString", "value")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CamelCaseConverterTest.java linha: 53 Método: assertThrows(CucumberException.class, () -> camelCaseConverter.toCamelCase(table))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CamelCaseConverterTest.java linha: 56 Método: assertThat(exception.getMessage(), is("" + "Failed to convert header 'Title Case Header' to property name. " + "'TitleCaseHeader' also converted to 'titleCaseHeader'"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/ThrowableCollectorTest.java linha: 17 Método: assertNull(collector.getThrowable())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/ThrowableCollectorTest.java linha: 26 Método: assertEquals(exception, collector.getThrowable())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/ThrowableCollectorTest.java linha: 39 Método: assertEquals(firstException, collector.getThrowable())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/ThrowableCollectorTest.java linha: 40 Método: assertEquals(secondException, collector.getThrowable().getSuppressed()[0])
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/ThrowableCollectorTest.java linha: 53 Método: assertEquals(secondException, collector.getThrowable())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/ThrowableCollectorTest.java linha: 54 Método: assertEquals(firstException, collector.getThrowable().getSuppressed()[0])
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/ThrowableCollectorTest.java linha: 67 Método: assertEquals(firstException, collector.getThrowable())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/ThrowableCollectorTest.java linha: 68 Método: assertEquals(secondException, collector.getThrowable().getSuppressed()[0])
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/ThrowableCollectorTest.java linha: 73 Método: assertThrows(OutOfMemoryError.class, () -> collector.execute(() -> {
    throw new OutOfMemoryError();
}))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/AmbiguousStepDefinitionsExceptionTest.java linha: 44 Método: assertThat(expectedThrown.getMessage(), is(equalTo("" + "\"I have 4 cukes in my belly\" matches more than one step definition:\n" + "  \"PickleStepDefinitionMatchOne_Pattern\" in PickleStepDefinitionMatchOne_Location\n" + "  \"PickleStepDefinitionMatchTwo_Pattern\" in PickleStepDefinitionMatchTwo_Location")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/AmbiguousStepDefinitionsExceptionTest.java linha: 49 Método: assertThat(expectedThrown.getCause(), is(nullValue()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/AmbiguousStepDefinitionsExceptionTest.java linha: 50 Método: assertThat(expectedThrown.getMatches(), is(equalTo(matches)))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/AmbiguousStepDefinitionsExceptionTest.java linha: 43 Método: assertAll(() -> assertThat(expectedThrown.getMessage(), is(equalTo("" + "\"I have 4 cukes in my belly\" matches more than one step definition:\n" + "  \"PickleStepDefinitionMatchOne_Pattern\" in PickleStepDefinitionMatchOne_Location\n" + "  \"PickleStepDefinitionMatchTwo_Pattern\" in PickleStepDefinitionMatchTwo_Location"))), () -> assertThat(expectedThrown.getCause(), is(nullValue())), () -> assertThat(expectedThrown.getMatches(), is(equalTo(matches))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/HookTestStepTest.java linha: 78 Método: assertThat(nextExecutionMode, is(ExecutionMode.RUN))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/HookTestStepTest.java linha: 79 Método: assertThat(state.getStatus(), is(equalTo(PASSED)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/HookTestStepTest.java linha: 85 Método: assertThat(nextExecutionMode, is(ExecutionMode.SKIP))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/HookTestStepTest.java linha: 86 Método: assertThat(state.getStatus(), is(equalTo(SKIPPED)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/HookTestStepTest.java linha: 92 Método: assertThat(nextExecutionMode, is(ExecutionMode.DRY_RUN))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/HookTestStepTest.java linha: 93 Método: assertThat(state.getStatus(), is(equalTo(PASSED)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/UndefinedStepDefinitionMatchTest.java linha: 27 Método: assertThrows(UndefinedStepDefinitionException.class, () -> match.runStep(mock(TestCaseState.class)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/UndefinedStepDefinitionMatchTest.java linha: 29 Método: assertThat(expectedThrown.getMessage(), equalTo("No step definitions found"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/UndefinedStepDefinitionMatchTest.java linha: 34 Método: assertThrows(UndefinedStepDefinitionException.class, () -> match.dryRunStep(mock(TestCaseState.class)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/UndefinedStepDefinitionMatchTest.java linha: 36 Método: assertThat(expectedThrown.getMessage(), equalTo("No step definitions found"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CoreStepDefinitionTest.java linha: 55 Método: assertThat(arguments.get(0).getValue(), is(equalTo(DocString.create("content"))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CoreStepDefinitionTest.java linha: 69 Método: assertThat(arguments.get(0).getValue(), is(equalTo(DataTable.create(singletonList(singletonList("content"))))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CoreStepDefinitionTest.java linha: 83 Método: assertEquals(DataTable.create(singletonList(singletonList(null))), arguments.get(0).getValue())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CoreStepDefinitionTest.java linha: 99 Método: assertThat(stepDefs, hasEntry(1000.0, 999.0))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CoreStepDefinitionTest.java linha: 100 Método: assertThat(stepDefs, hasEntry(0.5, -0.5))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CoreStepDefinitionTest.java linha: 101 Método: assertThat(stepDefs, hasEntry(100.5, 99.5))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CoreStepDefinitionTest.java linha: 98 Método: assertAll(() -> assertThat(stepDefs, hasEntry(1000.0, 999.0)), () -> assertThat(stepDefs, hasEntry(0.5, -0.5)), () -> assertThat(stepDefs, hasEntry(100.5, 99.5)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CoreStepDefinitionTest.java linha: 133 Método: assertThat(stepDefs, hasEntry(100.5, asList(0.5, 1000.0)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CoreStepDefinitionTest.java linha: 147 Método: assertThat(stepDefs.toString(), is(equalTo("[[100.5, 99.5], [0.5, -0.5], [1000.0, 999.0]]")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CoreStepDefinitionTest.java linha: 160 Método: assertThat(stepDefs.toString(), is(equalTo("[[100.5, 99.5], [0.5, -0.5], [1000.0, 999.0]]")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CoreStepDefinitionTest.java linha: 175 Método: assertThat(stepDefs.cell(0, 0), is(equalTo("Birth Date")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CoreStepDefinitionTest.java linha: 176 Método: assertThat(stepDefs.cell(1, 0), is(equalTo("1957-05-10")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CoreStepDefinitionTest.java linha: 174 Método: assertAll(() -> assertThat(stepDefs.cell(0, 0), is(equalTo("Birth Date"))), () -> assertThat(stepDefs.cell(1, 0), is(equalTo("1957-05-10"))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CoreStepDefinitionTest.java linha: 191 Método: assertThat(stepDefs.cell(0, 0), is(equalTo("Birth Date")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CoreStepDefinitionTest.java linha: 192 Método: assertThat(stepDefs.cell(0, 1), is(equalTo("1957-05-10")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CoreStepDefinitionTest.java linha: 190 Método: assertAll(() -> assertThat(stepDefs.cell(0, 0), is(equalTo("Birth Date"))), () -> assertThat(stepDefs.cell(0, 1), is(equalTo("1957-05-10"))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/HookTest.java linha: 85 Método: assertThrows(RuntimeException.class, () -> new Runner(bus, Collections.singleton(backend), objectFactory, runtimeOptions))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/HookTest.java linha: 89 Método: assertThat(e.getMessage(), is("Invalid tag expression at 'hook-location'"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/StubStepDefinition.java linha: 38 Método: assertEquals(parameterInfos.size(), args.length)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/AmbiguousStepDefinitionMatchTest.java linha: 32 Método: assertThrows(AmbiguousStepDefinitionsException.class, testMethod)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/AmbiguousStepDefinitionMatchTest.java linha: 34 Método: assertThat(actualThrown.getMessage(), is(equalTo("\"I have 4 cukes in my belly\" matches more than one step definition:\n")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/AmbiguousStepDefinitionMatchTest.java linha: 41 Método: assertThrows(AmbiguousStepDefinitionsException.class, testMethod)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/AmbiguousStepDefinitionMatchTest.java linha: 43 Método: assertThat(actualThrown.getMessage(), is(equalTo("\"I have 4 cukes in my belly\" matches more than one step definition:\n")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 69 Método: assertThrows(DuplicateStepDefinitionException.class, () -> glue.prepareGlue(stepTypeRegistry))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 72 Método: assertThat(exception.getMessage(), equalTo("Duplicate step definitions in foo.bf:10 and bar.bf:90"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 80 Método: assertThrows(DuplicateDefaultParameterTransformers.class, () -> glue.prepareGlue(stepTypeRegistry))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 83 Método: assertThat(exception.getMessage(), equalTo("" + "There may not be more then one default parameter transformer. Found:\n" + " - mocked default parameter transformer\n" + " - mocked default parameter transformer\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 94 Método: assertThrows(DuplicateDefaultDataTableEntryTransformers.class, () -> glue.prepareGlue(stepTypeRegistry))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 97 Método: assertThat(exception.getMessage(), equalTo("" + "There may not be more then one default data table entry. Found:\n" + " - mocked default data table entry transformer\n" + " - mocked default data table entry transformer\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 108 Método: assertThrows(DuplicateDefaultDataTableCellTransformers.class, () -> glue.prepareGlue(stepTypeRegistry))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 111 Método: assertThat(exception.getMessage(), equalTo("" + "There may not be more then one default table cell transformers. Found:\n" + " - mocked default data table cell transformer\n" + " - mocked default data table cell transformer\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 139 Método: assertThat(glue.getStepDefinitions().size(), is(equalTo(1)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 140 Método: assertThat(glue.getBeforeHooks().size(), is(equalTo(1)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 141 Método: assertThat(glue.getAfterHooks().size(), is(equalTo(1)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 142 Método: assertThat(glue.getBeforeStepHooks().size(), is(equalTo(1)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 143 Método: assertThat(glue.getAfterStepHooks().size(), is(equalTo(1)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 144 Método: assertThat(glue.getDataTableTypeDefinitions().size(), is(equalTo(1)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 145 Método: assertThat(glue.getParameterTypeDefinitions().size(), is(equalTo(1)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 146 Método: assertThat(glue.getDefaultParameterTransformers().size(), is(equalTo(1)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 147 Método: assertThat(glue.getDefaultDataTableCellTransformers().size(), is(equalTo(1)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 148 Método: assertThat(glue.getDefaultDataTableEntryTransformers().size(), is(equalTo(1)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 149 Método: assertThat(glue.getDocStringTypeDefinitions().size(), is(equalTo(1)))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 138 Método: assertAll(() -> assertThat(glue.getStepDefinitions().size(), is(equalTo(1))), () -> assertThat(glue.getBeforeHooks().size(), is(equalTo(1))), () -> assertThat(glue.getAfterHooks().size(), is(equalTo(1))), () -> assertThat(glue.getBeforeStepHooks().size(), is(equalTo(1))), () -> assertThat(glue.getAfterStepHooks().size(), is(equalTo(1))), () -> assertThat(glue.getDataTableTypeDefinitions().size(), is(equalTo(1))), () -> assertThat(glue.getParameterTypeDefinitions().size(), is(equalTo(1))), () -> assertThat(glue.getDefaultParameterTransformers().size(), is(equalTo(1))), () -> assertThat(glue.getDefaultDataTableCellTransformers().size(), is(equalTo(1))), () -> assertThat(glue.getDefaultDataTableEntryTransformers().size(), is(equalTo(1))), () -> assertThat(glue.getDocStringTypeDefinitions().size(), is(equalTo(1))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 154 Método: assertThat(glue.getStepDefinitions().size(), is(equalTo(0)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 155 Método: assertThat(glue.getBeforeHooks().size(), is(equalTo(0)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 156 Método: assertThat(glue.getAfterHooks().size(), is(equalTo(0)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 157 Método: assertThat(glue.getBeforeStepHooks().size(), is(equalTo(0)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 158 Método: assertThat(glue.getAfterStepHooks().size(), is(equalTo(0)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 159 Método: assertThat(glue.getDataTableTypeDefinitions().size(), is(equalTo(0)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 160 Método: assertThat(glue.getParameterTypeDefinitions().size(), is(equalTo(0)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 161 Método: assertThat(glue.getDefaultParameterTransformers().size(), is(equalTo(0)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 162 Método: assertThat(glue.getDefaultDataTableCellTransformers().size(), is(equalTo(0)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 163 Método: assertThat(glue.getDefaultDataTableEntryTransformers().size(), is(equalTo(0)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 164 Método: assertThat(glue.getDocStringTypeDefinitions().size(), is(equalTo(0)))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 153 Método: assertAll(() -> assertThat(glue.getStepDefinitions().size(), is(equalTo(0))), () -> assertThat(glue.getBeforeHooks().size(), is(equalTo(0))), () -> assertThat(glue.getAfterHooks().size(), is(equalTo(0))), () -> assertThat(glue.getBeforeStepHooks().size(), is(equalTo(0))), () -> assertThat(glue.getAfterStepHooks().size(), is(equalTo(0))), () -> assertThat(glue.getDataTableTypeDefinitions().size(), is(equalTo(0))), () -> assertThat(glue.getParameterTypeDefinitions().size(), is(equalTo(0))), () -> assertThat(glue.getDefaultParameterTransformers().size(), is(equalTo(0))), () -> assertThat(glue.getDefaultDataTableCellTransformers().size(), is(equalTo(0))), () -> assertThat(glue.getDefaultDataTableEntryTransformers().size(), is(equalTo(0))), () -> assertThat(glue.getDocStringTypeDefinitions().size(), is(equalTo(0))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 174 Método: assertThat(glue.stepDefinitionMatch(uri, pickleStep), is(nullValue()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 200 Método: assertThat(((CoreStepDefinition) pickleStepDefinitionMatch.getStepDefinition()).getStepDefinition(), is(equalTo(stepDefinition1)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 204 Método: assertThat(glue.getStepPatternByStepText().get(stepText), is(equalTo(stepDefinition1.getPattern())))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 206 Método: assertThat(coreStepDefinition.getStepDefinition(), is(equalTo(stepDefinition1)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 210 Método: assertThat(((CoreStepDefinition) pickleStepDefinitionMatch2.getStepDefinition()).getStepDefinition(), is(equalTo(stepDefinition1)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 227 Método: assertThat(((CoreStepDefinition) match1.getStepDefinition()).getStepDefinition(), is(equalTo(stepDefinition1)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 230 Método: assertThat(glue.getStepPatternByStepText().get(stepText), is(equalTo(stepDefinition1.getPattern())))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 232 Método: assertThat(coreStepDefinition.getStepDefinition(), is(equalTo(stepDefinition1)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 235 Método: assertThat(((DataTable) match1.getArguments().get(0).getValue()).cell(0, 0), is(equalTo("cell 1")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 242 Método: assertThat(((DataTable) match2.getArguments().get(0).getValue()).cell(0, 0), is(equalTo("cell 2")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 269 Método: assertThat(((CoreStepDefinition) match1.getStepDefinition()).getStepDefinition(), is(equalTo(stepDefinition1)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 271 Método: assertThat(glue.getStepPatternByStepText().get(stepText), is(equalTo(stepDefinition1.getPattern())))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 273 Método: assertThat(coreStepDefinition.getStepDefinition(), is(equalTo(stepDefinition1)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 276 Método: assertThat(match1.getArguments().get(0).getValue(), is(equalTo("doc string 1")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 282 Método: assertThat(match2.getArguments().get(0).getValue(), is(equalTo("doc string 2")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 308 Método: assertThat(((CoreStepDefinition) pickleStepDefinitionMatch.getStepDefinition()).getStepDefinition(), is(equalTo(stepDefinition1)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 318 Método: assertThat(((CoreStepDefinition) pickleStepDefinitionMatch2.getStepDefinition()).getStepDefinition(), is(equalTo(stepDefinition2)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 351 Método: assertThat(stepDefinition.isDisposed(), is(true))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 352 Método: assertThat(hookDefinition1.isDisposed(), is(true))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 353 Método: assertThat(hookDefinition2.isDisposed(), is(true))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 354 Método: assertThat(hookDefinition3.isDisposed(), is(true))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 355 Método: assertThat(hookDefinition4.isDisposed(), is(true))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 356 Método: assertThat(docStringType.isDisposed(), is(true))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 357 Método: assertThat(defaultDataTableEntryTransformer.isDisposed(), is(true))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 358 Método: assertThat(defaultDataTableCellTransformer.isDisposed(), is(true))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 359 Método: assertThat(defaultParameterTransformer.isDisposed(), is(true))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 360 Método: assertThat(parameterType.isDisposed(), is(true))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 361 Método: assertThat(dataTableType.isDisposed(), is(true))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 375 Método: assertThat(((CoreStepDefinition) pickleStepDefinitionMatch.getStepDefinition()).getStepDefinition(), is(equalTo(stepDefinition1)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 383 Método: assertThat(pickleStepDefinitionMatch2, nullValue())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 409 Método: assertThat(e.getMatches().size(), is(equalTo(2)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 412 Método: assertTrue(ambiguousCalled)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 429 Método: assertThat(hooks, contains(hookDefinition1, hookDefinition2, hookDefinition3))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 446 Método: assertThat(hooks, contains(hookDefinition3, hookDefinition2, hookDefinition1))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 463 Método: assertThat(hooks, contains(hookDefinition2, hookDefinition1, hookDefinition3))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/CachingGlueTest.java linha: 482 Método: assertThat(events.size(), is(4))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/PickleStepTestStepTest.java linha: 130 Método: assertThat(nextExecutionMode, is(ExecutionMode.RUN))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/PickleStepTestStepTest.java linha: 131 Método: assertThat(state.getStatus(), is(equalTo(PASSED)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/PickleStepTestStepTest.java linha: 137 Método: assertThat(nextExecutionMode, is(ExecutionMode.SKIP))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/PickleStepTestStepTest.java linha: 138 Método: assertThat(state.getStatus(), is(equalTo(SKIPPED)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/PickleStepTestStepTest.java linha: 145 Método: assertThat(nextExecutionMode, is(ExecutionMode.SKIP))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/PickleStepTestStepTest.java linha: 146 Método: assertThat(state.getStatus(), is(equalTo(SKIPPED)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/PickleStepTestStepTest.java linha: 163 Método: assertThat(nextExecutionMode, is(ExecutionMode.SKIP))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/PickleStepTestStepTest.java linha: 164 Método: assertThat(state.getStatus(), is(equalTo(FAILED)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/PickleStepTestStepTest.java linha: 169 Método: assertThat(((TestStepFinished) allValues.get(2)).getResult(), is(equalTo(failure)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/PickleStepTestStepTest.java linha: 178 Método: assertThat(nextExecutionMode, is(ExecutionMode.SKIP))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/PickleStepTestStepTest.java linha: 179 Método: assertThat(state.getStatus(), is(equalTo(FAILED)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/PickleStepTestStepTest.java linha: 184 Método: assertThat(((TestStepFinished) allValues.get(6)).getResult(), is(equalTo(failure)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/PickleStepTestStepTest.java linha: 193 Método: assertThat(nextExecutionMode, is(ExecutionMode.SKIP))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/PickleStepTestStepTest.java linha: 194 Método: assertThat(state.getStatus(), is(equalTo(FAILED)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/PickleStepTestStepTest.java linha: 199 Método: assertThat(((TestStepFinished) allValues.get(10)).getResult(), is(equalTo(failure)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/PickleStepTestStepTest.java linha: 222 Método: assertThat(state.getError(), is(expectedError))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/PickleStepTestStepTest.java linha: 235 Método: assertThat(state.getError(), is(expectedError))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/PickleStepTestStepTest.java linha: 243 Método: assertThat(nextExecutionMode, is(ExecutionMode.SKIP))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/PickleStepTestStepTest.java linha: 245 Método: assertThat(state.getStatus(), is(equalTo(SKIPPED)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/PickleStepTestStepTest.java linha: 253 Método: assertThat(nextExecutionMode, is(ExecutionMode.SKIP))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/PickleStepTestStepTest.java linha: 255 Método: assertThat(state.getStatus(), is(equalTo(FAILED)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/PickleStepTestStepTest.java linha: 263 Método: assertThat(nextExecutionMode, is(ExecutionMode.SKIP))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/PickleStepTestStepTest.java linha: 265 Método: assertThat(state.getStatus(), is(equalTo(PENDING)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/PickleStepTestStepTest.java linha: 291 Método: assertThat(started.getInstant(), is(equalTo(ofEpochMilli(234L))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/PickleStepTestStepTest.java linha: 292 Método: assertThat(finished.getInstant(), is(equalTo(ofEpochMilli(1234L))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/PickleStepTestStepTest.java linha: 293 Método: assertThat(finished.getResult().getDuration(), is(equalTo(ofMillis(1000L))))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/PickleStepTestStepTest.java linha: 290 Método: assertAll(() -> assertThat(started.getInstant(), is(equalTo(ofEpochMilli(234L)))), () -> assertThat(finished.getInstant(), is(equalTo(ofEpochMilli(1234L)))), () -> assertThat(finished.getResult().getDuration(), is(equalTo(ofMillis(1000L)))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/TestCaseStateTest.java linha: 36 Método: assertThat(state.getUri(), is(new File("path/file.feature").toURI()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/TestCaseStateTest.java linha: 59 Método: assertThat(state.getLine(), is(2))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/TestCaseStateTest.java linha: 73 Método: assertThat(state.getLine(), is(6))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/TestCaseStateTest.java linha: 85 Método: assertThat(state.getUri() + ":" + state.getLine(), is(new File("path/file.feature:2").toURI().toString()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/TestCaseStateTest.java linha: 99 Método: assertThat(state.getUri() + ":" + state.getLine(), is(new File("path/file.feature:6").toURI().toString()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/TestCaseStateTest.java linha: 120 Método: assertThat(embedEvent.getData(), is("Hello World".getBytes(UTF_8)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/TestCaseStateTest.java linha: 121 Método: assertThat(embedEvent.getMediaType(), is("text/plain"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/TestCaseStateTest.java linha: 122 Método: assertThat(embedEvent.getName(), is("hello.txt"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/TestCaseStateTest.java linha: 125 Método: assertThat(envelope.getAttachment().get().getBody(), is(Base64.getEncoder().encodeToString("Hello World".getBytes(UTF_8))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/TestCaseStateTest.java linha: 127 Método: assertThat(envelope.getAttachment().get().getContentEncoding(), is(AttachmentContentEncoding.BASE64))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/TestCaseStateTest.java linha: 128 Método: assertThat(envelope.getAttachment().get().getMediaType(), is("text/plain"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/TestCaseStateTest.java linha: 129 Método: assertThat(envelope.getAttachment().get().getFileName().get(), is("hello.txt"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/TestCaseStateTest.java linha: 130 Método: assertThat(envelope.getAttachment().get().getTestStepId().get(), is(activeTestStep.toString()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/TestCaseStateTest.java linha: 131 Método: assertThat(envelope.getAttachment().get().getTestCaseStartedId().get(), is(state.getTestExecutionId().toString()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/TestCaseStateTest.java linha: 153 Método: assertThat(embedEvent.getData(), is("Hello World".getBytes(UTF_8)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/TestCaseStateTest.java linha: 154 Método: assertThat(embedEvent.getMediaType(), is("text/plain"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/TestCaseStateTest.java linha: 155 Método: assertThat(embedEvent.getName(), is("hello.txt"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/TestCaseStateTest.java linha: 158 Método: assertThat(envelope.getAttachment().get().getBody(), is("Hello World"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/TestCaseStateTest.java linha: 159 Método: assertThat(envelope.getAttachment().get().getContentEncoding(), is(AttachmentContentEncoding.IDENTITY))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/TestCaseStateTest.java linha: 160 Método: assertThat(envelope.getAttachment().get().getMediaType(), is("text/plain"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/TestCaseStateTest.java linha: 161 Método: assertThat(envelope.getAttachment().get().getFileName().get(), is("hello.txt"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/TestCaseStateTest.java linha: 162 Método: assertThat(envelope.getAttachment().get().getTestStepId().get(), is(activeTestStep.toString()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/TestCaseStateTest.java linha: 163 Método: assertThat(envelope.getAttachment().get().getTestCaseStartedId().get(), is(state.getTestExecutionId().toString()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/TestCaseStateTest.java linha: 175 Método: assertThrows(IllegalStateException.class, () -> state.attach("Hello World", "text/plain", "hello.txt"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/TestCaseStateTest.java linha: 176 Método: assertThrows(IllegalStateException.class, () -> state.attach("Hello World".getBytes(UTF_8), "text/plain", "hello.txt"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/TestCaseStateTest.java linha: 178 Método: assertThrows(IllegalStateException.class, () -> state.log("Hello World"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/RunnerTest.java linha: 227 Método: assertThrows(RuntimeException.class, runner::runBeforeAllHooks)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/RunnerTest.java linha: 245 Método: assertThat(stepDefinition.getArgs(), is(equalTo(emptyList())))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/RunnerTest.java linha: 261 Método: assertThat(stepDefinition.getArgs(), is(nullValue()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/StepDefinitionMatchTest.java linha: 89 Método: assertThrows(CucumberException.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/StepDefinitionMatchTest.java linha: 90 Método: assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("Step [I have {int} cukes in my belly] is defined with 0 parameters at '{stubbed location with details}'.\n" + "However, the gherkin step has 1 arguments:\n" + " * 4\n" + "Step text: I have 4 cukes in my belly")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/StepDefinitionMatchTest.java linha: 116 Método: assertThrows(CucumberException.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/StepDefinitionMatchTest.java linha: 117 Método: assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("Step [I have {int} cukes in my belly] is defined with 0 parameters at '{stubbed location with details}'.\n" + "However, the gherkin step has 2 arguments:\n" + " * 4\n" + " * Table:\n" + "      | A | B |\n" + "      | C | D |\n" + "\n" + "Step text: I have 4 cukes in my belly")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/StepDefinitionMatchTest.java linha: 148 Método: assertThrows(CucumberException.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/StepDefinitionMatchTest.java linha: 149 Método: assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("Step [I have {int} cukes in my belly] is defined with 3 parameters at '{stubbed location with details}'.\n" + "However, the gherkin step has 2 arguments:\n" + " * 4\n" + " * Table:\n" + "      | A | B |\n" + "      | C | D |\n" + "\n" + "Step text: I have 4 cukes in my belly")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/StepDefinitionMatchTest.java linha: 176 Método: assertThrows(CucumberException.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/StepDefinitionMatchTest.java linha: 177 Método: assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("Step [I have cukes in my belly] is defined with 3 parameters at '{stubbed location with details}'.\n" + "However, the gherkin step has 0 arguments.\n" + "Step text: I have cukes in my belly")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/StepDefinitionMatchTest.java linha: 205 Método: assertThrows(CucumberException.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/StepDefinitionMatchTest.java linha: 206 Método: assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("Could not convert arguments for step [I have a data table] defined at '{stubbed location with details}'.\n" + "It appears you did not register a data table type.")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/StepDefinitionMatchTest.java linha: 233 Método: assertThrows(CucumberException.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/StepDefinitionMatchTest.java linha: 234 Método: assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("Could not convert arguments for step [I have {itemQuantity} in my belly] defined at '{stubbed location with details}'.")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/StepDefinitionMatchTest.java linha: 263 Método: assertThrows(RuntimeException.class, testMethod)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/StepDefinitionMatchTest.java linha: 264 Método: assertThat(actualThrown, sameInstance(userException))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/StepDefinitionMatchTest.java linha: 287 Método: assertThrows(CucumberException.class, testMethod)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/StepDefinitionMatchTest.java linha: 288 Método: assertThat(actualThrown.getMessage(), is(equalTo("Could not convert arguments for step [I have some cukes in my belly] defined at '{stubbed location with details}'.")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/StepDefinitionMatchTest.java linha: 318 Método: assertThrows(RuntimeException.class, testMethod)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/StepDefinitionMatchTest.java linha: 319 Método: assertThat(actualThrown, sameInstance(userException))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/StepDefinitionMatchTest.java linha: 344 Método: assertThrows(CucumberException.class, testMethod)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/StepDefinitionMatchTest.java linha: 345 Método: assertThat(actualThrown.getMessage(), is(equalTo("Could not convert arguments for step [I have some cukes in my belly] defined at '{stubbed location with details}'.")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/StepDefinitionMatchTest.java linha: 373 Método: assertThrows(RuntimeException.class, testMethod)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/StepDefinitionMatchTest.java linha: 374 Método: assertThat(actualThrown, sameInstance(userException))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/StepDefinitionMatchTest.java linha: 399 Método: assertThrows(CucumberException.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/StepDefinitionMatchTest.java linha: 400 Método: assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("Could not convert arguments for step [I have a data table] defined at '{stubbed location with details}'.\n" + "It appears there was a problem with a hook or transformer definition.")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/StepDefinitionMatchTest.java linha: 432 Método: assertThrows(CucumberException.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/StepDefinitionMatchTest.java linha: 433 Método: assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("Could not invoke step [I have a data table] defined at '{stubbed location with details}'.\n" + "It appears there was a problem with the step definition.\n" + "The converted arguments types were (java.lang.String, java.lang.String)")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/StepDefinitionMatchTest.java linha: 461 Método: assertThrows(CucumberException.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/StepDefinitionMatchTest.java linha: 462 Método: assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("Could not invoke step [I have an {word} value] defined at '{stubbed location with details}'.\n" + "It appears there was a problem with the step definition.\n" + "The converted arguments types were (null)")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/TestAbortedExceptionsTest.java linha: 19 Método: assertFalse(isTestAbortedExceptionPredicate.test(new RuntimeException()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/TestAbortedExceptionsTest.java linha: 20 Método: assertTrue(isTestAbortedExceptionPredicate.test(new TestAbortedException()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/TestAbortedExceptionsTest.java linha: 21 Método: assertTrue(isTestAbortedExceptionPredicate.test(new TestAbortedExceptionSubClass()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/DuplicateStepDefinitionExceptionTest.java linha: 26 Método: assertThat(expectedThrown.getMessage(), is(equalTo("Duplicate step definitions in StepDefinitionA_Location and StepDefinitionB_Location")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/DuplicateStepDefinitionExceptionTest.java linha: 28 Método: assertThat(expectedThrown.getCause(), is(nullValue()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/DuplicateStepDefinitionExceptionTest.java linha: 25 Método: assertAll(() -> assertThat(expectedThrown.getMessage(), is(equalTo("Duplicate step definitions in StepDefinitionA_Location and StepDefinitionB_Location"))), () -> assertThat(expectedThrown.getCause(), is(nullValue())))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/TestCaseStateResultTest.java linha: 62 Método: assertThat(s.getStatus(), is(equalTo(PASSED)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/TestCaseStateResultTest.java linha: 68 Método: assertThat(s.getStatus(), is(equalTo(PASSED)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/TestCaseStateResultTest.java linha: 80 Método: assertThat(s.getStatus(), is(equalTo(FAILED)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/TestCaseStateResultTest.java linha: 81 Método: assertTrue(s.isFailed())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/TestCaseStateResultTest.java linha: 79 Método: assertAll(() -> assertThat(s.getStatus(), is(equalTo(FAILED))), () -> assertTrue(s.isFailed()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/TestCaseStateResultTest.java linha: 90 Método: assertThat(s.getStatus(), is(equalTo(SKIPPED)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/TestCaseStateResultTest.java linha: 91 Método: assertFalse(s.isFailed())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/TestCaseStateResultTest.java linha: 89 Método: assertAll(() -> assertThat(s.getStatus(), is(equalTo(SKIPPED))), () -> assertFalse(s.isFailed()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/TestCaseStateResultTest.java linha: 102 Método: assertThat(s.getStatus(), is(equalTo(UNDEFINED)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/TestCaseStateResultTest.java linha: 103 Método: assertFalse(s.isFailed())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/TestCaseStateResultTest.java linha: 101 Método: assertAll(() -> assertThat(s.getStatus(), is(equalTo(UNDEFINED))), () -> assertFalse(s.isFailed()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/TestCaseStateResultTest.java linha: 113 Método: assertThat(s.getStatus(), is(equalTo(UNDEFINED)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/TestCaseStateResultTest.java linha: 114 Método: assertFalse(s.isFailed())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/TestCaseStateResultTest.java linha: 112 Método: assertAll(() -> assertThat(s.getStatus(), is(equalTo(UNDEFINED))), () -> assertFalse(s.isFailed()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/TestCaseStateResultTest.java linha: 139 Método: assertThat(s.getError(), sameInstance(failedError))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/runner/TestCaseStateResultTest.java linha: 150 Método: assertThat(s.getError(), sameInstance(failedError))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/NoPublishFormatterTest.java linha: 38 Método: assertThat(bytes, isBytesEqualTo("" + "┌───────────────────────────────────────────────────────────────────────────────────┐\n" + "│ Share your Cucumber Report with your team at https://reports.cucumber.io          │\n" + "│ Activate publishing with one of the following:                                    │\n" + "│                                                                                   │\n" + "│ src/test/resources/cucumber.properties:          cucumber.publish.enabled=true    │\n" + "│ src/test/resources/junit-platform.properties:    cucumber.publish.enabled=true    │\n" + "│ Environment variable:                            CUCUMBER_PUBLISH_ENABLED=true    │\n" + "│ JUnit:                                           @CucumberOptions(publish = true) │\n" + "│                                                                                   │\n" + "│ More information at https://cucumber.io/docs/cucumber/environment-variables/      │\n" + "│                                                                                   │\n" + "│ Disable this message with one of the following:                                   │\n" + "│                                                                                   │\n" + "│ src/test/resources/cucumber.properties:          cucumber.publish.quiet=true      │\n" + "│ src/test/resources/junit-platform.properties:    cucumber.publish.quiet=true      │\n" + "└───────────────────────────────────────────────────────────────────────────────────┘\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/RerunFormatterTest.java linha: 43 Método: assertThat(out, isBytesEqualTo(""))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/RerunFormatterTest.java linha: 67 Método: assertThat(out, isBytesEqualTo("classpath:path/test.feature:2:4:6\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/RerunFormatterTest.java linha: 90 Método: assertThat(out, isBytesEqualTo("file:path/test.feature:2\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/RerunFormatterTest.java linha: 114 Método: assertThat(out, isBytesEqualTo("file:path/test.feature:4\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/RerunFormatterTest.java linha: 140 Método: assertThat(out, isBytesEqualTo("classpath:path/test.feature:8\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/RerunFormatterTest.java linha: 166 Método: assertThat(out, isBytesEqualTo("classpath:path/test.feature:2\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/RerunFormatterTest.java linha: 192 Método: assertThat(out, isBytesEqualTo("classpath:path/test.feature:2\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/RerunFormatterTest.java linha: 218 Método: assertThat(out, isBytesEqualTo("classpath:path/test.feature:2:5\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/RerunFormatterTest.java linha: 246 Método: assertThat(out, isBytesEqualTo("classpath:path/first.feature:2\nclasspath:path/second.feature:2\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/PrettyFormatterTest.java linha: 62 Método: assertThat(out, isBytesEqualTo("" + "\n" + "Scenario: scenario name # path/test.feature:2\n" + "  Given first step      # path/step_definitions.java:3\n" + "  When second step      # path/step_definitions.java:7\n" + "  Then third step       # path/step_definitions.java:11\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/PrettyFormatterTest.java linha: 91 Método: assertThat(out, isBytesEqualTo("" + "\n" + "Scenario: scenario name # path/test.feature:2\n" + "  Given first step      # path/step_definitions.java:3\n" + "  When second step\n" + "  Then third step       # path/step_definitions.java:11\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/PrettyFormatterTest.java linha: 122 Método: assertThat(out, bytesContainsString("" + "\n" + "Scenario: s1       # path/test.feature:4\n" + "  Given first step # path/step_definitions.java:3\n" + "  Then second step # path/step_definitions.java:7\n" + "\n" + "Scenario: s2       # path/test.feature:6\n" + "  Given first step # path/step_definitions.java:3\n" + "  Then third step  # path/step_definitions.java:11\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/PrettyFormatterTest.java linha: 157 Método: assertThat(out, bytesContainsString("" + "\n" + "Scenario Outline: name 1 # path/test.feature:7\n" + "  Given first step       # path/step_definitions.java:3\n" + "  Then second step       # path/step_definitions.java:7\n" + "\n" + "Scenario Outline: name 2 # path/test.feature:8\n" + "  Given first step       # path/step_definitions.java:3\n" + "  Then third step        # path/step_definitions.java:11\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/PrettyFormatterTest.java linha: 187 Método: assertThat(out, isBytesEqualTo("" + "\n" + "Scenario: Test Characters # path/test.feature:2\n" + "  Given first step        # path/step_definitions.java:7\n" + "    | URLEncoded | %71s%22i%22%3A%7B%22D |\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/PrettyFormatterTest.java linha: 222 Método: assertThat(out, isBytesEqualTo("" + "\n" + "@feature_tag @scenario_tag\n" + "Scenario: scenario name # path/test.feature:4\n" + "  Then first step       # path/step_definitions.java:7\n" + "\n" + "@feature_tag @scenario_outline_tag @examples_tag\n" + "Scenario Outline: scenario outline name # path/test.feature:12\n" + "  Then second step                      # path/step_definitions.java:11\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/PrettyFormatterTest.java linha: 254 Método: assertThat(out, isBytesEqualTo("" + "\n" + "Scenario: Test Scenario # path/test.feature:2\n" + "  Given first step      # path/step_definitions.java:7\n" + "    | key1     | key2     |\n" + "    | value1   | value2   |\n" + "    | another1 | another2 |\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/PrettyFormatterTest.java linha: 289 Método: assertThat(out, isBytesEqualTo("" + "\n" + "Scenario: Test Scenario # path/test.feature:2\n" + "  Given first step      # path/step_definitions.java:7\n" + "    | key1     | key2     |\n" + "    | value1   | value2   |\n" + "    | another1 | another2 |\n" + "  Given second step     # path/step_definitions.java:15\n" + "    | key3     | key4     |\n" + "    | value3   | value4   |\n" + "    | another3 | another4 |\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/PrettyFormatterTest.java linha: 320 Método: assertThat(out, bytesContainsString("" + "  Given first step      # path/step_definitions.java:3\n" + "      the stack trace\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/PrettyFormatterTest.java linha: 344 Método: assertThat(out, bytesContainsString("" + "Scenario: scenario name # path/test.feature:2\n" + "      the stack trace\n" + "  Given first step      # path/step_definitions.java:3\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/PrettyFormatterTest.java linha: 369 Método: assertThat(out, bytesContainsString("" + "  Given first step      # path/step_definitions.java:3\n" + "      the stack trace\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/PrettyFormatterTest.java linha: 393 Método: assertThat(out, bytesContainsString("" + "Scenario: scenario name # path/test.feature:2\n" + "\n" + "    printed from hook\n" + "\n" + "  Given first step      # path/step_definitions.java:3\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/PrettyFormatterTest.java linha: 420 Método: assertThat(out, bytesContainsString("" + "  Given first step      # path/step_definitions.java:3\n" + "\n" + "    printed from hook\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/PrettyFormatterTest.java linha: 451 Método: assertThat(out, bytesContainsString("" + "  Given first step      # path/step_definitions.java:3\n" + "\n" + "    printed from afterstep hook\n" + "\n" + "  When second step      # path/step_definitions.java:4\n" + "\n" + "    printed from afterstep hook" + "\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/PrettyFormatterTest.java linha: 478 Método: assertThat(out, bytesContainsString("" + "  " + AnsiEscapes.GREEN + "Given " + AnsiEscapes.RESET + AnsiEscapes.GREEN + "first step" + AnsiEscapes.RESET))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/PrettyFormatterTest.java linha: 499 Método: assertThat(out, bytesContainsString("" + AnsiEscapes.GREY + "# path/step_definitions.java:3" + AnsiEscapes.RESET + "\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/PrettyFormatterTest.java linha: 519 Método: assertThat(out, bytesContainsString("" + "      " + AnsiEscapes.RED + "the stack trace" + AnsiEscapes.RESET + "\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/PrettyFormatterTest.java linha: 537 Método: assertThat(formattedText, equalTo(AnsiEscapes.GREEN + "Given " + AnsiEscapes.RESET + AnsiEscapes.GREEN + "text " + AnsiEscapes.RESET + AnsiEscapes.GREEN + AnsiEscapes.INTENSITY_BOLD + "'arg1'" + AnsiEscapes.RESET + AnsiEscapes.GREEN + " text " + AnsiEscapes.RESET + AnsiEscapes.GREEN + AnsiEscapes.INTENSITY_BOLD + "'arg2'" + AnsiEscapes.RESET))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/PrettyFormatterTest.java linha: 560 Método: assertThat(formattedText, equalTo(AnsiEscapes.GREEN + "Given " + AnsiEscapes.RESET + AnsiEscapes.GREEN + "the order is placed" + AnsiEscapes.RESET + AnsiEscapes.GREEN + AnsiEscapes.INTENSITY_BOLD + " and not yet confirmed" + AnsiEscapes.RESET))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/PrettyFormatterTest.java linha: 578 Método: assertThat(formattedText, equalTo(AnsiEscapes.GREEN + "Given " + AnsiEscapes.RESET + AnsiEscapes.GREEN + "the order is placed" + AnsiEscapes.RESET + AnsiEscapes.GREEN + AnsiEscapes.INTENSITY_BOLD + " and not yet confirmed" + AnsiEscapes.RESET))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/PrettyFormatterTest.java linha: 591 Método: assertThrows(StubException.class, () -> Runtime.builder().withFeatureSupplier(new StubFeatureSupplier(feature)).withAdditionalPlugins(new PrettyFormatter(out)).withBackendSupplier(new StubBackendSupplier(emptyList(), emptyList(), emptyList(), emptyList(), emptyList(), emptyList(), singletonList(new StubStaticHookDefinition(new StubException("Hook failed", "the stack trace"))))).build().run())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/PrettyFormatterTest.java linha: 605 Método: assertThat(out, bytesContainsString("" + "      " + AnsiEscapes.RED + "the stack trace" + AnsiEscapes.RESET + "\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/DefaultSummaryPrinterTest.java linha: 59 Método: assertThat(new String(out.toByteArray(), UTF_8), equalToCompressingWhiteSpace("" + "\n" + "0 Scenarios\n" + "0 Steps\n" + "0m0.000s\n" + "\n" + "\n" + "You can implement missing steps with the snippets below:\n" + "\n" + "snippet\n" + "\n" + "\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/TeamCityPluginTest.java linha: 106 Método: assertThat(out, bytesContainsString(expected))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/TeamCityPluginTest.java linha: 129 Método: assertThat(out, bytesContainsString("" + "##teamcity[message text='Embed event: |[text/plain 9 bytes|]|n' status='NORMAL']\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/TeamCityPluginTest.java linha: 152 Método: assertThat(out, bytesContainsString("" + "##teamcity[message text='Write event:|nA message|n' status='NORMAL']\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/TeamCityPluginTest.java linha: 176 Método: assertThat(out, bytesContainsString("" + "##teamcity[message text='Embed event: message.txt |[text/plain 9 bytes|]|n' status='NORMAL']\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/TeamCityPluginTest.java linha: 197 Método: assertThat(out, bytesContainsString("" + "##teamcity[testFailed timestamp = '1970-01-01T12:00:00.000+0000' duration = '0' message = 'Step failed' details = 'the stack trace' name = 'first step']\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/TeamCityPluginTest.java linha: 218 Método: assertThat(out, bytesContainsString("" + "##teamcity[testFailed timestamp = '1970-01-01T12:00:00.000+0000' duration = '0' message = 'Step undefined' details = 'You can implement this step and 1 other step(s) using the snippet(s) below:|n|ntest snippet 0|ntest snippet 1|n' name = 'first step']"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/TeamCityPluginTest.java linha: 240 Método: assertThat(out, bytesContainsString("" + "##teamcity[testFailed timestamp = '1970-01-01T12:00:00.000+0000' duration = '0' message = 'Step pending' details = 'TODO: implement me' name = 'first step']"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/TeamCityPluginTest.java linha: 263 Método: assertThat(out, bytesContainsString("" + "##teamcity[testStarted timestamp = '1970-01-01T12:00:00.000+0000' locationHint = '{stubbed location with details}' captureStandardOutput = 'true' name = 'Before']\n" + "##teamcity[testFailed timestamp = '1970-01-01T12:00:00.000+0000' duration = '0' message = 'Step failed' details = 'the stack trace' name = 'Before']"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/TeamCityPluginTest.java linha: 288 Método: assertThat(out, bytesContainsString("" + "##teamcity[testStarted timestamp = '1970-01-01T12:00:00.000+0000' locationHint = 'java:test://com.example.HookDefinition/beforeHook' captureStandardOutput = 'true' name = 'Before']\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/TeamCityPluginTest.java linha: 311 Método: assertThat(out, bytesContainsString("" + "##teamcity[testStarted timestamp = '1970-01-01T12:00:00.000+0000' locationHint = 'java:test://com.example.HookDefinition/HookDefinition' captureStandardOutput = 'true' name = 'Before']\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/TeamCityPluginTest.java linha: 324 Método: assertThrows(StubException.class, () -> Runtime.builder().withFeatureSupplier(new StubFeatureSupplier(feature)).withAdditionalPlugins(new TeamCityPlugin(new PrintStream(out))).withEventBus(new TimeServiceEventBus(fixed(EPOCH, of("UTC")), UUID::randomUUID)).withBackendSupplier(new StubBackendSupplier(emptyList(), emptyList(), emptyList(), emptyList(), emptyList(), emptyList(), singletonList(new StubStaticHookDefinition(new StubException("Hook failed", "the stack trace"))))).build().run())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/TeamCityPluginTest.java linha: 339 Método: assertThat(out, bytesContainsString("" + "##teamcity[testStarted timestamp = '1970-01-01T12:00:00.000+0000' name = 'Before All/After All']\n" + "##teamcity[testFailed timestamp = '1970-01-01T12:00:00.000+0000' message = 'Before All/After All failed' details = 'the stack trace' name = 'Before All/After All']\n" + "##teamcity[testFinished timestamp = '1970-01-01T12:00:00.000+0000' name = 'Before All/After All']"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/TeamCityPluginTest.java linha: 366 Método: assertThat(out, bytesContainsString("expected = '1' actual = '2' name = 'first step']"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/TeamCityPluginTest.java linha: 390 Método: assertThat(out, bytesContainsString("expected = 'one value' actual = 'another value' name = 'first step']"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/JUnitFormatterTest.java linha: 33 Método: assertThat(bytes, isBytesEqualTo("" + "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + "<testsuite name=\"Cucumber\" time=\"5\" tests=\"0\" skipped=\"0\" failures=\"0\" errors=\"0\">\n" + "</testsuite>\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/UrlReporterTest.java linha: 31 Método: assertThat(bytes, isBytesEqualTo(message))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/UrlReporterTest.java linha: 41 Método: assertThat(bytes, isBytesEqualTo("" + "┌──────────────────────────────────────────────────────────────────────────┐\n" + "│ View your Cucumber Report at:                                            │\n" + "│ https://reports.cucumber.io/reports/f318d9ec-5a3d-4727-adec-bd7b69e2edd3 │\n" + "│                                                                          │\n" + "│ This report will self-destruct in 24h unless it is claimed or deleted.   │\n" + "└──────────────────────────────────────────────────────────────────────────┘\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/PluginsTest.java linha: 71 Método: assertThat(eventPublisher.getValue().getClass(), is(equalTo(CanonicalOrderEventPublisher.class)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/UrlOutputStreamTest.java linha: 53 Método: assertThat(testContext.awaitCompletion(TIMEOUT_SECONDS, TimeUnit.SECONDS), is(true))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/UrlOutputStreamTest.java linha: 54 Método: assertThat(exception.getMessage(), equalTo("HTTP request failed:\n" + "> PUT http://localhost:" + port + "/s3\n" + "< HTTP/1.1 500 Internal Server Error\n" + "< transfer-encoding: chunked\n" + "Oh noes"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/UrlOutputStreamTest.java linha: 87 Método: assertThat(testContext.awaitCompletion(TIMEOUT_SECONDS, TimeUnit.SECONDS), is(true))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/UrlOutputStreamTest.java linha: 99 Método: assertThat(testContext.awaitCompletion(TIMEOUT_SECONDS, TimeUnit.SECONDS), is(true))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/UrlOutputStreamTest.java linha: 103 Método: assertThat(testServer.receivedBody.toString("utf-8"), is(equalTo(requestBody)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/UrlOutputStreamTest.java linha: 116 Método: assertThat(testContext.awaitCompletion(TIMEOUT_SECONDS, TimeUnit.SECONDS), is(true))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/UrlOutputStreamTest.java linha: 117 Método: assertThat(exception.getMessage(), equalTo("HTTP request failed:\n" + "> POST http://localhost:" + port + "/redirect-no-location\n" + "< HTTP/1.1 307 Temporary Redirect\n" + "< content-length: 0\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/UrlOutputStreamTest.java linha: 220 Método: assertThat(ctx.request().method(), is(equalTo(expectedMethod)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/UrlOutputStreamTest.java linha: 221 Método: assertThat(ctx.request().query(), is(equalTo(expectedQuery)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/UrlOutputStreamTest.java linha: 222 Método: assertThat(ctx.request().getHeader("Content-Type"), is(equalTo(expectedContentType)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/UrlOutputStreamTest.java linha: 224 Método: assertThat(ctx.request().getHeader("Authorization"), is(nullValue()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/UrlOutputStreamTest.java linha: 232 Método: assertThat(receivedBodyString, is(equalTo(expectedBody)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/MessageFormatterTest.java linha: 35 Método: assertThat(ndjson, containsString("" + "{\"testRunStarted\":{\"timestamp\":{\"seconds\":10,\"nanos\":0}}}\n" + "{\"testRunFinished\":{\"success\":true,\"timestamp\":{\"seconds\":15,\"nanos\":0}}}\n"))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/JsonFormatterTest.java linha: 155 Método: assertEquals(expected, actual, true)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/TestNGFormatterTest.java linha: 33 Método: assertThat(actualString, isIdenticalTo(expected).ignoreWhitespace())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/ProgressFormatterTest.java linha: 42 Método: assertThat(out, isBytesEqualTo("\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/ProgressFormatterTest.java linha: 50 Método: assertThat(out, isBytesEqualTo(AnsiEscapes.GREEN + "." + AnsiEscapes.RESET + "\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/ProgressFormatterTest.java linha: 57 Método: assertThat(out, isBytesEqualTo(AnsiEscapes.GREEN + "." + AnsiEscapes.RESET))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/ProgressFormatterTest.java linha: 64 Método: assertThat(out, isBytesEqualTo(AnsiEscapes.YELLOW + "U" + AnsiEscapes.RESET))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/ProgressFormatterTest.java linha: 77 Método: assertThat(out, isBytesEqualTo(AnsiEscapes.RED + "F" + AnsiEscapes.RESET))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/ProgressFormatterTest.java linha: 84 Método: assertThat(out, isBytesEqualTo(AnsiEscapes.RED + "F" + AnsiEscapes.RESET))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/TimelineFormatterTest.java linha: 119 Método: assertThat(Files.exists(reportJsFile), is(equalTo(true)))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/TimelineFormatterTest.java linha: 127 Método: assertTrue(Files.exists(actualFile), resource + ": did not exist in output dir")
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/TimelineFormatterTest.java linha: 130 Método: assertThat(resource + " differs", actual, is(equalTo(expected)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/TimelineFormatterTest.java linha: 173 Método: assertThat(actualOutput.groups, not(empty()))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/TimelineFormatterTest.java linha: 179 Método: assertThat(String.format("id on group %s, was not as expected", idx), actual.getId() > 0, is(equalTo(true)))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/TimelineFormatterTest.java linha: 182 Método: assertThat(String.format("content on group %s, was not as expected", idx), actual.getContent(), is(notNullValue()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/TimelineFormatterTest.java linha: 178 Método: assertAll(() -> assertThat(String.format("id on group %s, was not as expected", idx), actual.getId() > 0, is(equalTo(true))), () -> assertThat(String.format("content on group %s, was not as expected", idx), actual.getContent(), is(notNullValue())))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/TimelineFormatterTest.java linha: 263 Método: assertThat("Number of tests was not as expected", actualOutput.size(), is(equalTo(expectedTests.length)))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/TimelineFormatterTest.java linha: 271 Método: assertThat(String.format("feature on item %s, was not as expected", idx), actual.getFeature(), is(equalTo(expected.getFeature())))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/TimelineFormatterTest.java linha: 274 Método: assertThat(String.format("className on item %s, was not as expected", idx), actual.getClassName(), is(equalTo(expected.getClassName())))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/TimelineFormatterTest.java linha: 277 Método: assertThat(String.format("content on item %s, was not as expected", idx), actual.getContent(), is(equalTo(expected.getContent())))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/TimelineFormatterTest.java linha: 280 Método: assertThat(String.format("tags on item %s, was not as expected", idx), actual.getTags(), is(equalTo(expected.getTags())))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/TimelineFormatterTest.java linha: 292 Método: assertThat(String.format("startTime on item %s, was not as expected", idx), actual.getStart(), is(notNullValue()))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/TimelineFormatterTest.java linha: 294 Método: assertThat(String.format("endTime on item %s, was not as expected", idx), actual.getEnd(), is(notNullValue()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/TimelineFormatterTest.java linha: 291 Método: assertAll(() -> assertThat(String.format("startTime on item %s, was not as expected", idx), actual.getStart(), is(notNullValue())), () -> assertThat(String.format("endTime on item %s, was not as expected", idx), actual.getEnd(), is(notNullValue())))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/TimelineFormatterTest.java linha: 286 Método: assertThat(String.format("startTime on item %s, was not as expected", idx), actual.getStart(), is(equalTo(expected.getStart())))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/TimelineFormatterTest.java linha: 288 Método: assertThat(String.format("endTime on item %s, was not as expected", idx), actual.getEnd(), is(equalTo(expected.getEnd())))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/TimelineFormatterTest.java linha: 285 Método: assertAll(() -> assertThat(String.format("startTime on item %s, was not as expected", idx), actual.getStart(), is(equalTo(expected.getStart()))), () -> assertThat(String.format("endTime on item %s, was not as expected", idx), actual.getEnd(), is(equalTo(expected.getEnd()))))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/TimelineFormatterTest.java linha: 304 Método: assertThat(String.format("threadId on item %s, was not as expected", idx), actual.getGroup(), is(notNullValue()))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/TimelineFormatterTest.java linha: 300 Método: assertThat(String.format("threadId on item %s, was not as expected", idx), actual.getGroup(), is(equalTo(expected.getGroup())))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/TimelineFormatterTest.java linha: 270 Método: assertAll(() -> assertThat(String.format("feature on item %s, was not as expected", idx), actual.getFeature(), is(equalTo(expected.getFeature()))), () -> assertThat(String.format("className on item %s, was not as expected", idx), actual.getClassName(), is(equalTo(expected.getClassName()))), () -> assertThat(String.format("content on item %s, was not as expected", idx), actual.getContent(), is(equalTo(expected.getContent()))), () -> assertThat(String.format("tags on item %s, was not as expected", idx), actual.getTags(), is(equalTo(expected.getTags()))), () -> {
    if (checkActualTimeStamps) {
        assertAll(() -> assertThat(String.format("startTime on item %s, was not as expected", idx), actual.getStart(), is(equalTo(expected.getStart()))), () -> assertThat(String.format("endTime on item %s, was not as expected", idx), actual.getEnd(), is(equalTo(expected.getEnd()))));
    } else {
        assertAll(() -> assertThat(String.format("startTime on item %s, was not as expected", idx), actual.getStart(), is(notNullValue())), () -> assertThat(String.format("endTime on item %s, was not as expected", idx), actual.getEnd(), is(notNullValue())));
    }
}, () -> {
    if (checkActualThreadData) {
        assertThat(String.format("threadId on item %s, was not as expected", idx), actual.getGroup(), is(equalTo(expected.getGroup())));
    } else {
        assertThat(String.format("threadId on item %s, was not as expected", idx), actual.getGroup(), is(notNullValue()));
    }
})
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/TimelineFormatterTest.java linha: 316 Método: assertTrue(Files.exists(reportJsFile))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/TimelineFormatterTest.java linha: 340 Método: assertAll(() -> assertTimelineTestDataIsAsExpected(expectedTests, actualOutput.tests, true, true), () -> assertTimelineGroupDataIsAsExpected(expectedGroups, actualOutput.groups))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/TimelineFormatterTest.java linha: 351 Método: assertThat("Number of groups was not as expected", actualOutput.size(), is(equalTo(expectedGroups.length)))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/TimelineFormatterTest.java linha: 359 Método: assertThat(String.format("id on group %s, was not as expected", idx), actual.getId(), is(equalTo(expected.getId())))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/TimelineFormatterTest.java linha: 362 Método: assertThat(String.format("content on group %s, was not as expected", idx), actual.getContent(), is(equalTo(expected.getContent())))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/TimelineFormatterTest.java linha: 358 Método: assertAll(() -> assertThat(String.format("id on group %s, was not as expected", idx), actual.getId(), is(equalTo(expected.getId()))), () -> assertThat(String.format("content on group %s, was not as expected", idx), actual.getContent(), is(equalTo(expected.getContent()))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/BannerTest.java linha: 31 Método: assertThat(bytes, isBytesEqualTo("" + "\u001B[36m┌─────────────┐\u001B[0m\n" + "\u001B[36m│\u001B[0m Bla         \u001B[36m│\u001B[0m\n" + "\u001B[36m│\u001B[0m Bla \u001B[34mBla\u001B[0m \u001B[31mBla\u001B[0m \u001B[36m│\u001B[0m\n" + "\u001B[36m│\u001B[0m Bla Bla     \u001B[36m│\u001B[0m\n" + "\u001B[36m└─────────────┘\u001B[0m\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/BannerTest.java linha: 53 Método: assertThat(bytes, isBytesEqualTo("" + "┌─────────────┐\n" + "│ Bla         │\n" + "│ Bla Bla Bla │\n" + "│ Bla Bla     │\n" + "└─────────────┘\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/UTF8PrintWriterTest.java linha: 20 Método: assertThat(bytes, isBytesEqualTo(System.lineSeparator() + "Hello " + System.lineSeparator()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/UTF8PrintWriterTest.java linha: 29 Método: assertThat(bytes, isBytesEqualTo("Hello World"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/UTF8PrintWriterTest.java linha: 35 Método: assertThat(bytes, isBytesEqualTo(""))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/UTF8PrintWriterTest.java linha: 37 Método: assertThat(bytes, isBytesEqualTo("Hello"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/UTF8PrintWriterTest.java linha: 43 Método: assertThat(bytes, isBytesEqualTo(""))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/UTF8PrintWriterTest.java linha: 45 Método: assertThat(bytes, isBytesEqualTo("Hello"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/HtmlFormatterTest.java linha: 40 Método: assertThat(bytes, bytesContainsString("" + "window.CUCUMBER_MESSAGES = [" + "{\"testRunStarted\":{\"timestamp\":{\"seconds\":10,\"nanos\":0}}}," + "{\"testRunFinished\":{\"success\":true,\"timestamp\":{\"seconds\":15,\"nanos\":0}}}" + "];\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/HtmlFormatterTest.java linha: 87 Método: assertThat(bytes, bytesContainsString("" + "window.CUCUMBER_MESSAGES = [" + "{\"testRunStarted\":{\"timestamp\":{\"seconds\":10,\"nanos\":0}}}," + "{\"testRunFinished\":{\"success\":true,\"timestamp\":{\"seconds\":15,\"nanos\":0}}}" + "];\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 93 Método: assertThat(comparator.compare(runStarted, runStarted), equalTo(EQUAL_TO))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 94 Método: assertThat(comparator.compare(runStarted, testRead), lessThan(EQUAL_TO))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 95 Método: assertThat(comparator.compare(runStarted, testParsed), lessThan(EQUAL_TO))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 96 Método: assertThat(comparator.compare(runStarted, suggested), lessThan(EQUAL_TO))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 97 Método: assertThat(comparator.compare(runStarted, feature1Case1Started), lessThan(EQUAL_TO))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 98 Método: assertThat(comparator.compare(runStarted, feature1Case2Started), lessThan(EQUAL_TO))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 99 Método: assertThat(comparator.compare(runStarted, feature1Case3Started), lessThan(EQUAL_TO))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 100 Método: assertThat(comparator.compare(runStarted, feature2Case1Started), lessThan(EQUAL_TO))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 101 Método: assertThat(comparator.compare(runStarted, runFinished), lessThan(EQUAL_TO))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 92 Método: assertAll(() -> assertThat(comparator.compare(runStarted, runStarted), equalTo(EQUAL_TO)), () -> assertThat(comparator.compare(runStarted, testRead), lessThan(EQUAL_TO)), () -> assertThat(comparator.compare(runStarted, testParsed), lessThan(EQUAL_TO)), () -> assertThat(comparator.compare(runStarted, suggested), lessThan(EQUAL_TO)), () -> assertThat(comparator.compare(runStarted, feature1Case1Started), lessThan(EQUAL_TO)), () -> assertThat(comparator.compare(runStarted, feature1Case2Started), lessThan(EQUAL_TO)), () -> assertThat(comparator.compare(runStarted, feature1Case3Started), lessThan(EQUAL_TO)), () -> assertThat(comparator.compare(runStarted, feature2Case1Started), lessThan(EQUAL_TO)), () -> assertThat(comparator.compare(runStarted, runFinished), lessThan(EQUAL_TO)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 107 Método: assertThat(comparator.compare(testRead, runStarted), greaterThan(EQUAL_TO))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 108 Método: assertThat(comparator.compare(testRead, testRead), equalTo(EQUAL_TO))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 109 Método: assertThat(comparator.compare(testRead, testParsed), lessThan(EQUAL_TO))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 110 Método: assertThat(comparator.compare(testRead, suggested), lessThan(EQUAL_TO))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 111 Método: assertThat(comparator.compare(testRead, feature1Case1Started), lessThan(EQUAL_TO))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 112 Método: assertThat(comparator.compare(testRead, feature1Case2Started), lessThan(EQUAL_TO))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 113 Método: assertThat(comparator.compare(testRead, feature1Case3Started), lessThan(EQUAL_TO))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 114 Método: assertThat(comparator.compare(testRead, feature2Case1Started), lessThan(EQUAL_TO))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 115 Método: assertThat(comparator.compare(testRead, runFinished), lessThan(EQUAL_TO))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 106 Método: assertAll(() -> assertThat(comparator.compare(testRead, runStarted), greaterThan(EQUAL_TO)), () -> assertThat(comparator.compare(testRead, testRead), equalTo(EQUAL_TO)), () -> assertThat(comparator.compare(testRead, testParsed), lessThan(EQUAL_TO)), () -> assertThat(comparator.compare(testRead, suggested), lessThan(EQUAL_TO)), () -> assertThat(comparator.compare(testRead, feature1Case1Started), lessThan(EQUAL_TO)), () -> assertThat(comparator.compare(testRead, feature1Case2Started), lessThan(EQUAL_TO)), () -> assertThat(comparator.compare(testRead, feature1Case3Started), lessThan(EQUAL_TO)), () -> assertThat(comparator.compare(testRead, feature2Case1Started), lessThan(EQUAL_TO)), () -> assertThat(comparator.compare(testRead, runFinished), lessThan(EQUAL_TO)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 121 Método: assertThat(comparator.compare(testParsed, runStarted), greaterThan(EQUAL_TO))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 122 Método: assertThat(comparator.compare(testParsed, testRead), greaterThan(EQUAL_TO))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 123 Método: assertThat(comparator.compare(testParsed, testParsed), equalTo(EQUAL_TO))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 124 Método: assertThat(comparator.compare(testParsed, suggested), lessThan(EQUAL_TO))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 125 Método: assertThat(comparator.compare(testParsed, feature1Case1Started), lessThan(EQUAL_TO))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 126 Método: assertThat(comparator.compare(testParsed, feature1Case2Started), lessThan(EQUAL_TO))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 127 Método: assertThat(comparator.compare(testParsed, feature1Case3Started), lessThan(EQUAL_TO))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 128 Método: assertThat(comparator.compare(testParsed, feature2Case1Started), lessThan(EQUAL_TO))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 129 Método: assertThat(comparator.compare(testParsed, runFinished), lessThan(EQUAL_TO))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 120 Método: assertAll(() -> assertThat(comparator.compare(testParsed, runStarted), greaterThan(EQUAL_TO)), () -> assertThat(comparator.compare(testParsed, testRead), greaterThan(EQUAL_TO)), () -> assertThat(comparator.compare(testParsed, testParsed), equalTo(EQUAL_TO)), () -> assertThat(comparator.compare(testParsed, suggested), lessThan(EQUAL_TO)), () -> assertThat(comparator.compare(testParsed, feature1Case1Started), lessThan(EQUAL_TO)), () -> assertThat(comparator.compare(testParsed, feature1Case2Started), lessThan(EQUAL_TO)), () -> assertThat(comparator.compare(testParsed, feature1Case3Started), lessThan(EQUAL_TO)), () -> assertThat(comparator.compare(testParsed, feature2Case1Started), lessThan(EQUAL_TO)), () -> assertThat(comparator.compare(testParsed, runFinished), lessThan(EQUAL_TO)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 135 Método: assertThat(comparator.compare(suggested, runStarted), greaterThan(EQUAL_TO))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 136 Método: assertThat(comparator.compare(suggested, testRead), greaterThan(EQUAL_TO))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 137 Método: assertThat(comparator.compare(suggested, testParsed), greaterThan(EQUAL_TO))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 138 Método: assertThat(comparator.compare(suggested, suggested), equalTo(EQUAL_TO))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 139 Método: assertThat(comparator.compare(suggested, suggested2), lessThan(EQUAL_TO))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 140 Método: assertThat(comparator.compare(suggested, feature1Case1Started), lessThan(EQUAL_TO))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 141 Método: assertThat(comparator.compare(suggested, feature1Case2Started), lessThan(EQUAL_TO))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 142 Método: assertThat(comparator.compare(suggested, feature1Case3Started), lessThan(EQUAL_TO))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 143 Método: assertThat(comparator.compare(suggested, feature2Case1Started), lessThan(EQUAL_TO))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 144 Método: assertThat(comparator.compare(suggested, runFinished), lessThan(EQUAL_TO))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 134 Método: assertAll(() -> assertThat(comparator.compare(suggested, runStarted), greaterThan(EQUAL_TO)), () -> assertThat(comparator.compare(suggested, testRead), greaterThan(EQUAL_TO)), () -> assertThat(comparator.compare(suggested, testParsed), greaterThan(EQUAL_TO)), () -> assertThat(comparator.compare(suggested, suggested), equalTo(EQUAL_TO)), () -> assertThat(comparator.compare(suggested, suggested2), lessThan(EQUAL_TO)), () -> assertThat(comparator.compare(suggested, feature1Case1Started), lessThan(EQUAL_TO)), () -> assertThat(comparator.compare(suggested, feature1Case2Started), lessThan(EQUAL_TO)), () -> assertThat(comparator.compare(suggested, feature1Case3Started), lessThan(EQUAL_TO)), () -> assertThat(comparator.compare(suggested, feature2Case1Started), lessThan(EQUAL_TO)), () -> assertThat(comparator.compare(suggested, runFinished), lessThan(EQUAL_TO)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 152 Método: assertThat(comparator.compare(feature1Case1Started, e), greaterThan(EQUAL_TO))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 153 Método: assertThat(comparator.compare(feature1Case2Started, e), greaterThan(EQUAL_TO))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 154 Método: assertThat(comparator.compare(feature1Case3Started, e), greaterThan(EQUAL_TO))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 155 Método: assertThat(comparator.compare(feature2Case1Started, e), greaterThan(EQUAL_TO))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 151 Método: assertAll(() -> assertThat(comparator.compare(feature1Case1Started, e), greaterThan(EQUAL_TO)), () -> assertThat(comparator.compare(feature1Case2Started, e), greaterThan(EQUAL_TO)), () -> assertThat(comparator.compare(feature1Case3Started, e), greaterThan(EQUAL_TO)), () -> assertThat(comparator.compare(feature2Case1Started, e), greaterThan(EQUAL_TO)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 161 Método: assertThat(comparator.compare(feature1Case1Started, e), lessThan(EQUAL_TO))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 162 Método: assertThat(comparator.compare(feature1Case2Started, e), lessThan(EQUAL_TO))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 163 Método: assertThat(comparator.compare(feature1Case3Started, e), lessThan(EQUAL_TO))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 164 Método: assertThat(comparator.compare(feature2Case1Started, e), lessThan(EQUAL_TO))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 165 Método: assertThat(comparator.compare(e, feature1Case1Started), greaterThan(EQUAL_TO))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 166 Método: assertThat(comparator.compare(e, feature1Case2Started), greaterThan(EQUAL_TO))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 167 Método: assertThat(comparator.compare(e, feature1Case3Started), greaterThan(EQUAL_TO))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 168 Método: assertThat(comparator.compare(e, feature2Case1Started), greaterThan(EQUAL_TO))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 160 Método: assertAll(() -> assertThat(comparator.compare(feature1Case1Started, e), lessThan(EQUAL_TO)), () -> assertThat(comparator.compare(feature1Case2Started, e), lessThan(EQUAL_TO)), () -> assertThat(comparator.compare(feature1Case3Started, e), lessThan(EQUAL_TO)), () -> assertThat(comparator.compare(feature2Case1Started, e), lessThan(EQUAL_TO)), () -> assertThat(comparator.compare(e, feature1Case1Started), greaterThan(EQUAL_TO)), () -> assertThat(comparator.compare(e, feature1Case2Started), greaterThan(EQUAL_TO)), () -> assertThat(comparator.compare(e, feature1Case3Started), greaterThan(EQUAL_TO)), () -> assertThat(comparator.compare(e, feature2Case1Started), greaterThan(EQUAL_TO)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 172 Método: assertThat(comparator.compare(feature1Case1Started, feature1Case1Started), equalTo(EQUAL_TO))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 173 Método: assertThat(comparator.compare(feature1Case1Started, feature1Case1Started2), lessThan(EQUAL_TO))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 174 Método: assertThat(comparator.compare(feature1Case1Started, feature1Case2Started), lessThan(EQUAL_TO))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 175 Método: assertThat(comparator.compare(feature1Case1Started, feature1Case2Started), lessThan(EQUAL_TO))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 176 Método: assertThat(comparator.compare(feature1Case2Started, feature1Case3Started), lessThan(EQUAL_TO))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 177 Método: assertThat(comparator.compare(feature1Case3Started, feature2Case1Started), lessThan(EQUAL_TO))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 171 Método: assertAll(() -> assertThat(comparator.compare(feature1Case1Started, feature1Case1Started), equalTo(EQUAL_TO)), () -> assertThat(comparator.compare(feature1Case1Started, feature1Case1Started2), lessThan(EQUAL_TO)), () -> assertThat(comparator.compare(feature1Case1Started, feature1Case2Started), lessThan(EQUAL_TO)), () -> assertThat(comparator.compare(feature1Case1Started, feature1Case2Started), lessThan(EQUAL_TO)), () -> assertThat(comparator.compare(feature1Case2Started, feature1Case3Started), lessThan(EQUAL_TO)), () -> assertThat(comparator.compare(feature1Case3Started, feature2Case1Started), lessThan(EQUAL_TO)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 183 Método: assertThat(comparator.compare(runFinished, runStarted), greaterThan(EQUAL_TO))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 184 Método: assertThat(comparator.compare(runFinished, suggested), greaterThan(EQUAL_TO))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 185 Método: assertThat(comparator.compare(runFinished, testRead), greaterThan(EQUAL_TO))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 186 Método: assertThat(comparator.compare(runFinished, testParsed), greaterThan(EQUAL_TO))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 187 Método: assertThat(comparator.compare(runFinished, feature1Case1Started), greaterThan(EQUAL_TO))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 188 Método: assertThat(comparator.compare(runFinished, feature1Case2Started), greaterThan(EQUAL_TO))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 189 Método: assertThat(comparator.compare(runFinished, feature1Case3Started), greaterThan(EQUAL_TO))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 190 Método: assertThat(comparator.compare(runFinished, feature2Case1Started), greaterThan(EQUAL_TO))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 191 Método: assertThat(comparator.compare(runFinished, runFinished), equalTo(EQUAL_TO))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/CanonicalEventOrderTest.java linha: 182 Método: assertAll(() -> assertThat(comparator.compare(runFinished, runStarted), greaterThan(EQUAL_TO)), () -> assertThat(comparator.compare(runFinished, suggested), greaterThan(EQUAL_TO)), () -> assertThat(comparator.compare(runFinished, testRead), greaterThan(EQUAL_TO)), () -> assertThat(comparator.compare(runFinished, testParsed), greaterThan(EQUAL_TO)), () -> assertThat(comparator.compare(runFinished, feature1Case1Started), greaterThan(EQUAL_TO)), () -> assertThat(comparator.compare(runFinished, feature1Case2Started), greaterThan(EQUAL_TO)), () -> assertThat(comparator.compare(runFinished, feature1Case3Started), greaterThan(EQUAL_TO)), () -> assertThat(comparator.compare(runFinished, feature2Case1Started), greaterThan(EQUAL_TO)), () -> assertThat(comparator.compare(runFinished, runFinished), equalTo(EQUAL_TO)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/PluginFactoryTest.java linha: 71 Método: assertThat(plugin.getClass(), is(equalTo(JUnitFormatter.class)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/PluginFactoryTest.java linha: 78 Método: assertThat(plugin.getClass(), is(equalTo(RerunFormatter.class)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/PluginFactoryTest.java linha: 86 Método: assertThat(Files.exists(file), is(false))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/PluginFactoryTest.java linha: 87 Método: assertDoesNotThrow(() -> {
    Object plugin = fc.create(option);
    releaseResources(plugin);
})
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/PluginFactoryTest.java linha: 91 Método: assertThat(Files.exists(file), is(true))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/PluginFactoryTest.java linha: 85 Método: assertAll(() -> assertThat(Files.exists(file), is(false)), () -> assertDoesNotThrow(() -> {
    Object plugin = fc.create(option);
    releaseResources(plugin);
}), () -> assertThat(Files.exists(file), is(true)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/PluginFactoryTest.java linha: 103 Método: assertThrows(IllegalArgumentException.class, () -> fc.create(jsonOption))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/PluginFactoryTest.java linha: 104 Método: assertThat(exception.getMessage(), is(equalTo("Couldn't create parent directories of '" + jsonReport.toFile().getCanonicalPath() + "'.\n" + "Make sure the the parent directory '" + jsonReport.getParent().toFile().getCanonicalPath() + "' isn't a file.\n" + "\n" + "Note: This usually happens when plugins write to colliding paths.\n" + "For example: 'html:target/cucumber, json:target/cucumber/report.json'\n" + "You can fix this by making the paths do no collide.\n" + "For example: 'html:target/cucumber/report.html, json:target/cucumber/report.json'\n" + "The details are in the stack trace below:")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/PluginFactoryTest.java linha: 125 Método: assertThrows(IllegalArgumentException.class, () -> fc.create(htmlOption))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/PluginFactoryTest.java linha: 126 Método: assertThat(exception.getMessage(), is(equalTo("Couldn't create a file output stream for '" + htmlReport + "'.\n" + "Make sure the the file isn't a directory.\n" + "\n" + "Note: This usually happens when plugins write to colliding paths.\n" + "For example: 'json:target/cucumber/report.json, html:target/cucumber'\n" + "You can fix this by making the paths do no collide.\n" + "For example: 'json:target/cucumber/report.json, html:target/cucumber/report.html'\n" + "The details are in the stack trace below:")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/PluginFactoryTest.java linha: 140 Método: assertThrows(IllegalArgumentException.class, () -> fc.create(option))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/PluginFactoryTest.java linha: 147 Método: assertThrows(CucumberException.class, testMethod)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/PluginFactoryTest.java linha: 148 Método: assertThat(exception.getMessage(), is(equalTo("You must supply an output argument to io.cucumber.core.plugin.PluginFactoryTest$WantsFile. Like so: io.cucumber.core.plugin.PluginFactoryTest$WantsFile:DIR|FILE|URL")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/PluginFactoryTest.java linha: 156 Método: assertThat(plugin.getClass(), is(equalTo(PrettyFormatter.class)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/PluginFactoryTest.java linha: 163 Método: assertThat(plugin.getClass(), is(equalTo(PrettyFormatter.class)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/PluginFactoryTest.java linha: 170 Método: assertThat(plugin.getClass(), is(equalTo(UsageFormatter.class)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/PluginFactoryTest.java linha: 177 Método: assertThat(plugin.getClass(), is(equalTo(UsageFormatter.class)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/PluginFactoryTest.java linha: 201 Método: assertThat(mockSystemOut.toString(), is(not(equalTo(""))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/PluginFactoryTest.java linha: 211 Método: assertThat(plugin.out, is(not(nullValue())))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/PluginFactoryTest.java linha: 213 Método: assertThrows(CucumberException.class, () -> fc.create(option))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/PluginFactoryTest.java linha: 214 Método: assertThat(exception.getMessage(), is(equalTo("Only one plugin can use STDOUT, now both io.cucumber.core.plugin.PluginFactoryTest$WantsOutputStream " + "and io.cucumber.core.plugin.PluginFactoryTest$WantsOutputStream use it. " + "If you use more than one plugin you must specify output path with io.cucumber.core.plugin.PluginFactoryTest$WantsOutputStream:DIR|FILE|URL")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/PluginFactoryTest.java linha: 224 Método: assertThat(plugin.out, is(equalTo(new File("halp.txt"))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/PluginFactoryTest.java linha: 231 Método: assertThat(plugin.arg, is(equalTo("hello")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/PluginFactoryTest.java linha: 238 Método: assertThat(plugin.out, is(notNullValue()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/PluginFactoryTest.java linha: 245 Método: assertThat(plugin.out, is(nullValue()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/PluginFactoryTest.java linha: 255 Método: assertThat(written, is(equalTo("hello")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/PluginFactoryTest.java linha: 262 Método: assertThat(plugin.getClass(), is(equalTo(TimelineFormatter.class)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/PluginFactoryTest.java linha: 269 Método: assertThat(plugin.getClass(), is(equalTo(WantsNothing.class)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/PluginFactoryTest.java linha: 276 Método: assertThrows(CucumberException.class, testMethod)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/PluginFactoryTest.java linha: 277 Método: assertThat(exception.getMessage(), is(equalTo("class io.cucumber.core.plugin.PluginFactoryTest$WantsTooMuch must have at least one empty constructor or a constructor that declares a single parameter of one of: [class java.lang.String, class java.io.File, class java.net.URI, class java.net.URL, class java.io.OutputStream, interface java.lang.Appendable]")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/PluginFactoryTest.java linha: 285 Método: assertThrows(CucumberException.class, testMethod)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/PluginFactoryTest.java linha: 286 Método: assertThat(exception.getMessage(), is(equalTo("class io.cucumber.core.plugin.PluginFactoryTest$WantsFileOrURL must have exactly one constructor that declares a single parameter of one of: [class java.lang.String, class java.io.File, class java.net.URI, class java.net.URL, class java.io.OutputStream, interface java.lang.Appendable]")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/PluginFactoryTest.java linha: 294 Método: assertThrows(CucumberException.class, testMethod)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/PluginFactoryTest.java linha: 295 Método: assertThat(exception.getMessage(), is(equalTo("You must supply an output argument to io.cucumber.core.plugin.PluginFactoryTest$WantsFileOrURL. Like so: io.cucumber.core.plugin.PluginFactoryTest$WantsFileOrURL:DIR|FILE|URL")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/StatsTest.java linha: 37 Método: assertThat(baos.toString(), startsWith(String.format("0 Scenarios%n" + "0 Steps%n")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/StatsTest.java linha: 59 Método: assertThat(baos.toString(), startsWith(String.format("1 Scenarios (1 passed)%n" + "3 Steps (3 passed)%n")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/StatsTest.java linha: 77 Método: assertThat(baos.toString(), containsString(String.format("" + "6 Scenarios (1 failed, 1 ambiguous, 1 skipped, 1 pending, 1 undefined, 1 passed)%n" + "6 Steps (1 failed, 1 ambiguous, 1 skipped, 1 pending, 1 undefined, 1 passed)%n")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/StatsTest.java linha: 107 Método: assertThat(baos.toString(), containsString(String.format("" + "6 Scenarios (" + colorSubCounts + ")%n" + "6 Steps (" + colorSubCounts + ")%n")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/StatsTest.java linha: 123 Método: assertThat(baos.toString(), endsWith(String.format("0m0.000s%n")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/StatsTest.java linha: 136 Método: assertThat(baos.toString(), endsWith(String.format("0m0.004s%n")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/StatsTest.java linha: 149 Método: assertThat(baos.toString(), endsWith(String.format("1m1.001s%n")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/StatsTest.java linha: 162 Método: assertThat(baos.toString(), endsWith(String.format("61m0.000s%n")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/StatsTest.java linha: 175 Método: assertThat(baos.toString(), endsWith(String.format("1m1,001s%n")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/StatsTest.java linha: 193 Método: assertThat(baos.toString(), startsWith(String.format("" + "Failed scenarios:%n" + "path/file.feature:3 # Scenario: scenario_name%n" + "%n" + "Ambiguous scenarios:%n" + "path/file.feature:3 # Scenario: scenario_name%n" + "%n" + "Pending scenarios:%n" + "path/file.feature:3 # Scenario: scenario_name%n" + "%n" + "Undefined scenarios:%n" + "path/file.feature:3 # Scenario: scenario_name%n" + "%n" + "4 Scenarios")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/StatsTest.java linha: 224 Método: assertThat(baos.toString(), startsWith(String.format("" + "Failed scenarios:%n" + "path/file.feature:3 # Scenario: scenario_name%n" + "%n" + "Ambiguous scenarios:%n" + "path/file.feature:3 # Scenario: scenario_name%n" + "%n" + "Pending scenarios:%n" + "path/file.feature:3 # Scenario: scenario_name%n" + "%n" + "Undefined scenarios:%n" + "path/file.feature:3 # Scenario: scenario_name%n" + "%n" + "4 Scenarios")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/UnusedStepsSummaryPrinterTest.java linha: 48 Método: assertThat(out, isBytesEqualTo("1 Unused steps:\n" + "my/tummy.feature:5 # some more cukes\n"))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/JsonParallelRuntimeTest.java linha: 49 Método: assertEquals(serial.toString(), parallel.toString(), false)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/JsonParallelRuntimeTest.java linha: 86 Método: assertEquals(serial.toString(), parallel.toString(), false)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/UsageFormatterTest.java linha: 48 Método: assertThat(usageMap.size(), is(equalTo(1)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/UsageFormatterTest.java linha: 50 Método: assertThat(durationEntries.size(), is(equalTo(1)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/UsageFormatterTest.java linha: 51 Método: assertThat(durationEntries.get(0).getName(), is(equalTo("step")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/UsageFormatterTest.java linha: 52 Método: assertThat(durationEntries.get(0).getDurations().size(), is(equalTo(1)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/UsageFormatterTest.java linha: 53 Método: assertThat(durationEntries.get(0).getDurations().get(0).getDuration(), is(closeTo(12.345, EPSILON)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/UsageFormatterTest.java linha: 78 Método: assertThat(usageMap.size(), is(equalTo(1)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/UsageFormatterTest.java linha: 80 Método: assertThat(durationEntries.size(), is(equalTo(1)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/UsageFormatterTest.java linha: 81 Método: assertThat(durationEntries.get(0).getName(), is(equalTo("step")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/UsageFormatterTest.java linha: 82 Método: assertThat(durationEntries.get(0).getDurations().size(), is(equalTo(1)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/UsageFormatterTest.java linha: 83 Método: assertThat(durationEntries.get(0).getDurations().get(0).getDuration(), is(closeTo(12345.0, EPSILON)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/UsageFormatterTest.java linha: 97 Método: assertThat(usageMap.size(), is(equalTo(1)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/UsageFormatterTest.java linha: 99 Método: assertThat(durationEntries.size(), is(equalTo(1)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/UsageFormatterTest.java linha: 100 Método: assertThat(durationEntries.get(0).getName(), is(equalTo("step")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/UsageFormatterTest.java linha: 101 Método: assertThat(durationEntries.get(0).getDurations().size(), is(equalTo(1)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/UsageFormatterTest.java linha: 102 Método: assertThat(durationEntries.get(0).getDurations().get(0).getDuration(), is(equalTo(0.0)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/UsageFormatterTest.java linha: 117 Método: assertThat(usageMap.size(), is(equalTo(1)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/UsageFormatterTest.java linha: 119 Método: assertThat(durationEntries.size(), is(equalTo(1)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/UsageFormatterTest.java linha: 120 Método: assertThat(durationEntries.get(0).getName(), is(equalTo("step")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/UsageFormatterTest.java linha: 121 Método: assertThat(durationEntries.get(0).getDurations().size(), is(equalTo(1)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/UsageFormatterTest.java linha: 122 Método: assertThat(durationEntries.get(0).getDurations().get(0).getDuration(), is(equalTo(0.0)))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/UsageFormatterTest.java linha: 160 Método: assertEquals(json, out.toString(), true)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/UsageFormatterTest.java linha: 178 Método: assertThat(out.toString(), containsString("0.012345678"))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/UsageFormatterTest.java linha: 200 Método: assertEquals(json, out.toString(), true)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/UsageFormatterTest.java linha: 209 Método: assertThat(result, is(closeTo(2.0, EPSILON)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/UsageFormatterTest.java linha: 217 Método: assertThat(result, is(closeTo(1.33, 0.01)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/UsageFormatterTest.java linha: 225 Método: assertThat(result, is(equalTo(0.0)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/UsageFormatterTest.java linha: 234 Método: assertThat(result, is(closeTo(2.0, EPSILON)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/UsageFormatterTest.java linha: 243 Método: assertThat(result, is(closeTo(4.0, EPSILON)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/UsageFormatterTest.java linha: 251 Método: assertThat(result, is(closeTo(5.5, EPSILON)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/plugin/UsageFormatterTest.java linha: 259 Método: assertThat(result, is(equalTo(0.0)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/order/PickleOrderTest.java linha: 40 Método: assertThat(pickles, contains(firstPickle, secondPickle, thirdPickle))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/order/PickleOrderTest.java linha: 53 Método: assertThat(pickles, contains(thirdPickle, secondPickle, firstPickle))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/order/PickleOrderTest.java linha: 60 Método: assertThat(pickles, contains(secondPickle, firstPickle, thirdPickle))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/exception/UnrecoverableExceptionsTest.java linha: 12 Método: assertThrows(OutOfMemoryError.class, () -> rethrowIfUnrecoverable(new OutOfMemoryError()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/exception/UnrecoverableExceptionsTest.java linha: 17 Método: assertDoesNotThrow(() -> rethrowIfUnrecoverable(new Throwable()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/exception/CucumberExceptionTest.java linha: 18 Método: assertThat(expectedThrown.getMessage(), is(equalTo("java.lang.RuntimeException")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/exception/CucumberExceptionTest.java linha: 19 Método: assertThat(expectedThrown.getCause(), isA(RuntimeException.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/exception/CucumberExceptionTest.java linha: 17 Método: assertAll(() -> assertThat(expectedThrown.getMessage(), is(equalTo("java.lang.RuntimeException"))), () -> assertThat(expectedThrown.getCause(), isA(RuntimeException.class)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/exception/CucumberExceptionTest.java linha: 26 Método: assertThat(expectedThrown.getMessage(), is(nullValue()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/exception/CucumberExceptionTest.java linha: 27 Método: assertThat(expectedThrown.getCause(), is(nullValue()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/exception/CucumberExceptionTest.java linha: 25 Método: assertAll(() -> assertThat(expectedThrown.getMessage(), is(nullValue())), () -> assertThat(expectedThrown.getCause(), is(nullValue())))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/exception/CucumberExceptionTest.java linha: 34 Método: assertThat(expectedThrown.getMessage(), is(equalTo("message")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/exception/CucumberExceptionTest.java linha: 35 Método: assertThat(expectedThrown.getCause(), is(nullValue()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/exception/CucumberExceptionTest.java linha: 33 Método: assertAll(() -> assertThat(expectedThrown.getMessage(), is(equalTo("message"))), () -> assertThat(expectedThrown.getCause(), is(nullValue())))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/exception/CucumberExceptionTest.java linha: 42 Método: assertThat(expectedThrown.getMessage(), is(nullValue()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/exception/CucumberExceptionTest.java linha: 43 Método: assertThat(expectedThrown.getCause(), is(nullValue()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/exception/CucumberExceptionTest.java linha: 41 Método: assertAll(() -> assertThat(expectedThrown.getMessage(), is(nullValue())), () -> assertThat(expectedThrown.getCause(), is(nullValue())))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/exception/CucumberExceptionTest.java linha: 50 Método: assertThat(expectedThrown.getMessage(), is(equalTo("message")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/exception/CucumberExceptionTest.java linha: 51 Método: assertThat(expectedThrown.getCause(), isA(RuntimeException.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/exception/CucumberExceptionTest.java linha: 49 Método: assertAll(() -> assertThat(expectedThrown.getMessage(), is(equalTo("message"))), () -> assertThat(expectedThrown.getCause(), isA(RuntimeException.class)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/exception/CucumberExceptionTest.java linha: 58 Método: assertThat(expectedThrown.getMessage(), is(nullValue()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/exception/CucumberExceptionTest.java linha: 59 Método: assertThat(expectedThrown.getCause(), is(nullValue()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/exception/CucumberExceptionTest.java linha: 57 Método: assertAll(() -> assertThat(expectedThrown.getMessage(), is(nullValue())), () -> assertThat(expectedThrown.getCause(), is(nullValue())))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/exception/CompositeCucumberExceptionTest.java linha: 23 Método: assertThat(expectedThrown.getMessage(), is(equalTo("There were 0 exceptions. The details are in the stacktrace below.")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/exception/CompositeCucumberExceptionTest.java linha: 25 Método: assertThat(expectedThrown.getCause(), is(nullValue()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/exception/CompositeCucumberExceptionTest.java linha: 26 Método: assertThat(expectedThrown.getSuppressed(), is(arrayWithSize(0)))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/exception/CompositeCucumberExceptionTest.java linha: 22 Método: assertAll(() -> assertThat(expectedThrown.getMessage(), is(equalTo("There were 0 exceptions. The details are in the stacktrace below."))), () -> assertThat(expectedThrown.getCause(), is(nullValue())), () -> assertThat(expectedThrown.getSuppressed(), is(arrayWithSize(0))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/exception/CompositeCucumberExceptionTest.java linha: 34 Método: assertThat(expectedThrown.getMessage(), is(equalTo("There were 1 exceptions. The details are in the stacktrace below.")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/exception/CompositeCucumberExceptionTest.java linha: 36 Método: assertThat(expectedThrown.getCause(), is(nullValue()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/exception/CompositeCucumberExceptionTest.java linha: 37 Método: assertThat(expectedThrown.getSuppressed(), is(arrayWithSize(1)))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/exception/CompositeCucumberExceptionTest.java linha: 33 Método: assertAll(() -> assertThat(expectedThrown.getMessage(), is(equalTo("There were 1 exceptions. The details are in the stacktrace below."))), () -> assertThat(expectedThrown.getCause(), is(nullValue())), () -> assertThat(expectedThrown.getSuppressed(), is(arrayWithSize(1))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/exception/CompositeCucumberExceptionTest.java linha: 45 Método: assertThat(expectedThrown.getMessage(), is(equalTo("There were 2 exceptions. The details are in the stacktrace below.")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/exception/CompositeCucumberExceptionTest.java linha: 47 Método: assertThat(expectedThrown.getCause(), is(nullValue()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/exception/CompositeCucumberExceptionTest.java linha: 48 Método: assertThat(expectedThrown.getSuppressed(), is(arrayWithSize(2)))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-core/src/test/java/io/cucumber/core/exception/CompositeCucumberExceptionTest.java linha: 44 Método: assertAll(() -> assertThat(expectedThrown.getMessage(), is(equalTo("There were 2 exceptions. The details are in the stacktrace below."))), () -> assertThat(expectedThrown.getCause(), is(nullValue())), () -> assertThat(expectedThrown.getSuppressed(), is(arrayWithSize(2))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-picocontainer/src/test/java/io/cucumber/picocontainer/StepDefinitions.java linha: 61 Método: assertEquals(belly.getContents(), Collections.nCopies(n, "cukes"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-picocontainer/src/test/java/io/cucumber/picocontainer/StepDefinitions.java linha: 66 Método: assertEquals("glass", container)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-picocontainer/src/test/java/io/cucumber/picocontainer/StepDefinitions.java linha: 71 Método: assertEquals("milk", liquid)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-picocontainer/src/test/java/io/cucumber/picocontainer/StepDefinitions.java linha: 76 Método: assertEquals("happy", mood)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-picocontainer/src/test/java/io/cucumber/picocontainer/PicoFactoryTest.java linha: 34 Método: assertThat(o1, is(notNullValue()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-picocontainer/src/test/java/io/cucumber/picocontainer/PicoFactoryTest.java linha: 35 Método: assertThat(o1, is(not(equalTo(o2))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-picocontainer/src/test/java/io/cucumber/picocontainer/PicoFactoryTest.java linha: 36 Método: assertThat(o2, is(not(equalTo(o1))))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-picocontainer/src/test/java/io/cucumber/picocontainer/PicoFactoryTest.java linha: 33 Método: assertAll(() -> assertThat(o1, is(notNullValue())), () -> assertThat(o1, is(not(equalTo(o2)))), () -> assertThat(o2, is(not(equalTo(o1)))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-picocontainer/src/test/java/io/cucumber/picocontainer/PicoFactoryTest.java linha: 50 Método: assertFalse(steps.getBelly().isDisposed())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-picocontainer/src/test/java/io/cucumber/picocontainer/PicoFactoryTest.java linha: 56 Método: assertTrue(steps.getBelly().isDisposed())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-picocontainer/src/test/java/io/cucumber/picocontainer/PicoFactoryTest.java linha: 65 Método: assertThat(factory.getInstance(NonStaticInnerClass.class), nullValue())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/CucumberEngineOptionsTest.java linha: 29 Método: assertThat(new CucumberEngineOptions(config).plugins().stream().map(Options.Plugin::pluginString).collect(toList()), hasItem("html:path/to/report.html"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/CucumberEngineOptionsTest.java linha: 38 Método: assertThat(htmlAndJson.plugins().stream().map(Options.Plugin::pluginString).collect(toList()), hasItems("html:path/with spaces/to/report.html", "message:path/with spaces/to/report.ndjson"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/CucumberEngineOptionsTest.java linha: 49 Método: assertThat(new CucumberEngineOptions(config).plugins().stream().map(Options.Plugin::pluginString).collect(toList()), hasItem("io.cucumber.core.plugin.PublishFormatter:some/token"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/CucumberEngineOptionsTest.java linha: 59 Método: assertThat(new CucumberEngineOptions(config).plugins().stream().map(Options.Plugin::pluginString).collect(toList()), hasItem("io.cucumber.core.plugin.NoPublishFormatter"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/CucumberEngineOptionsTest.java linha: 70 Método: assertThat(new CucumberEngineOptions(config).plugins().stream().map(Options.Plugin::pluginString).collect(toList()), empty())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/CucumberEngineOptionsTest.java linha: 81 Método: assertThat(new CucumberEngineOptions(config).plugins().stream().map(Options.Plugin::pluginString).collect(toList()), hasItem("io.cucumber.core.plugin.PublishFormatter"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/CucumberEngineOptionsTest.java linha: 92 Método: assertTrue(new CucumberEngineOptions(ansiColors).isMonochrome())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/CucumberEngineOptionsTest.java linha: 97 Método: assertFalse(new CucumberEngineOptions(noAnsiColors).isMonochrome())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/CucumberEngineOptionsTest.java linha: 106 Método: assertThat(new CucumberEngineOptions(config).getGlue(), contains(URI.create("classpath:/com/example/app"), URI.create("classpath:/com/example/glue")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/CucumberEngineOptionsTest.java linha: 117 Método: assertTrue(new CucumberEngineOptions(dryRun).isDryRun())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/CucumberEngineOptionsTest.java linha: 122 Método: assertFalse(new CucumberEngineOptions(noDryRun).isDryRun())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/CucumberEngineOptionsTest.java linha: 131 Método: assertThat(new CucumberEngineOptions(underscore).getSnippetType(), is(SnippetType.UNDERSCORE))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/CucumberEngineOptionsTest.java linha: 136 Método: assertThat(new CucumberEngineOptions(camelcase).getSnippetType(), is(SnippetType.CAMELCASE))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/CucumberEngineOptionsTest.java linha: 144 Método: assertTrue(new CucumberEngineOptions(enabled).isParallelExecutionEnabled())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/CucumberEngineOptionsTest.java linha: 149 Método: assertFalse(new CucumberEngineOptions(disabled).isParallelExecutionEnabled())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/CucumberEngineOptionsTest.java linha: 152 Método: assertFalse(new CucumberEngineOptions(absent).isParallelExecutionEnabled())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/FeatureResolverTest.java linha: 48 Método: assertEquals("A feature with scenario outlines", feature.getDisplayName())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/FeatureResolverTest.java linha: 49 Método: assertEquals(emptySet(), feature.getTags())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/FeatureResolverTest.java linha: 50 Método: assertEquals(of(from(featurePath)), feature.getSource())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/FeatureResolverTest.java linha: 51 Método: assertEquals(CONTAINER, feature.getType())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/FeatureResolverTest.java linha: 52 Método: assertEquals(id.append("feature", featureSegmentValue), feature.getUniqueId())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/FeatureResolverTest.java linha: 68 Método: assertEquals("A scenario", scenario.getDisplayName())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/FeatureResolverTest.java linha: 69 Método: assertEquals(asSet(create("FeatureTag"), create("ScenarioTag"), create("ResourceA"), create("ResourceAReadOnly")), scenario.getTags())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/FeatureResolverTest.java linha: 72 Método: assertEquals(of(from(featurePath, from(5, 3))), scenario.getSource())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/FeatureResolverTest.java linha: 73 Método: assertEquals(TEST, scenario.getType())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/FeatureResolverTest.java linha: 74 Método: assertEquals(id.append("feature", featureSegmentValue).append("scenario", "5"), scenario.getUniqueId())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/FeatureResolverTest.java linha: 79 Método: assertEquals(Optional.of("io.cucumber.junit.platform.engine"), pickleDescriptor.getPackage())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/FeatureResolverTest.java linha: 93 Método: assertEquals(asSet(new ExclusiveResource("resource-a", LockMode.READ_WRITE), new ExclusiveResource("resource-a", LockMode.READ)), pickleDescriptor.getExclusiveResources())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/FeatureResolverTest.java linha: 112 Método: assertEquals("A scenario outline", outline.getDisplayName())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/FeatureResolverTest.java linha: 113 Método: assertEquals(emptySet(), outline.getTags())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/FeatureResolverTest.java linha: 116 Método: assertEquals(of(from(featurePath, from(11, 3))), outline.getSource())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/FeatureResolverTest.java linha: 117 Método: assertEquals(CONTAINER, outline.getType())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/FeatureResolverTest.java linha: 118 Método: assertEquals(id.append("feature", featureSegmentValue).append("scenario", "11"), outline.getUniqueId())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/FeatureResolverTest.java linha: 133 Método: assertEquals("Example #1.1", example.getDisplayName())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/FeatureResolverTest.java linha: 134 Método: assertEquals(asSet(create("FeatureTag"), create("Example1Tag"), create("ScenarioOutlineTag")), example.getTags())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/FeatureResolverTest.java linha: 137 Método: assertEquals(of(from(featurePath, from(19, 7))), example.getSource())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/FeatureResolverTest.java linha: 138 Método: assertEquals(TEST, example.getType())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/FeatureResolverTest.java linha: 140 Método: assertEquals(id.append("feature", featureSegmentValue).append("scenario", "11").append("examples", "17").append("example", "19"), example.getUniqueId())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/FeatureResolverTest.java linha: 148 Método: assertEquals(Optional.of("io.cucumber.junit.platform.engine"), pickleDescriptor.getPackage())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/FeatureResolverTest.java linha: 157 Método: assertEquals("A feature with scenario outlines - A scenario outline - With some text - Example #1.1", example.getDisplayName())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/FeatureResolverTest.java linha: 170 Método: assertTrue(getNodes().size() > 0)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/FeatureResolverTest.java linha: 171 Método: assertTrue(getPickles().size() > 0)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/FeatureResolverTest.java linha: 172 Método: assertEquals(Node.ExecutionMode.CONCURRENT, node.getExecutionMode())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/FeatureResolverTest.java linha: 173 Método: assertEquals(Node.ExecutionMode.CONCURRENT, pickle.getExecutionMode())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/FeatureResolverTest.java linha: 181 Método: assertTrue(getNodes().size() > 0)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/FeatureResolverTest.java linha: 182 Método: assertTrue(getPickles().size() > 0)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/FeatureResolverTest.java linha: 183 Método: assertEquals(Node.ExecutionMode.SAME_THREAD, node.getExecutionMode())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/FeatureResolverTest.java linha: 184 Método: assertEquals(Node.ExecutionMode.SAME_THREAD, pickle.getExecutionMode())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/CucumberTestEngineTest.java linha: 32 Método: assertEquals(ENGINE_ID, engine.getId())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/CucumberTestEngineTest.java linha: 37 Método: assertEquals(Optional.of("DEVELOPMENT"), engine.getVersion())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/CucumberTestEngineTest.java linha: 48 Método: assertNotNull(engine.createExecutionContext(execution))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/UndefinedStepExceptionTest.java linha: 17 Método: assertThat(exception.getMessage(), is("This step is undefined"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/UndefinedStepExceptionTest.java linha: 27 Método: assertThat(exception.getMessage(), is("" + "The step 'some step' is undefined.\n" + "You can implement this step using the snippet(s) below:\n" + "\n" + "some snippet\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/UndefinedStepExceptionTest.java linha: 41 Método: assertThat(exception.getMessage(), is("" + "The step 'some step' is undefined.\n" + "You can implement this step using the snippet(s) below:\n" + "\n" + "some snippet\n" + "some other snippet\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/UndefinedStepExceptionTest.java linha: 57 Método: assertThat(exception.getMessage(), is("" + "The step 'some step' and 1 other step(s) are undefined.\n" + "You can implement these steps using the snippet(s) below:\n" + "\n" + "some snippet\n" + "some other snippet\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/UndefinedStepExceptionTest.java linha: 73 Método: assertThat(exception.getMessage(), is("" + "The step 'some step' and 1 other step(s) are undefined.\n" + "You can implement these steps using the snippet(s) below:\n" + "\n" + "some snippet\n" + "some other snippet\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/UndefinedStepExceptionTest.java linha: 90 Método: assertThat(exception.getMessage(), is("" + "The step 'some step' and 2 other step(s) are undefined.\n" + "You can implement these steps using the snippet(s) below:\n" + "\n" + "some snippet\n" + "some other snippet\n" + "yet another snippet\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/TestCaseResultObserverTest.java linha: 183 Método: assertThrows(Exception.class, observer::assertTestCasePassed)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/TestCaseResultObserverTest.java linha: 184 Método: assertThat(exception.getCause(), is(error))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/TestCaseResultObserverTest.java linha: 194 Método: assertThrows(Exception.class, observer::assertTestCasePassed)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/TestCaseResultObserverTest.java linha: 195 Método: assertThat(exception.getCause(), instanceOf(TestAbortedException.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/TestCaseResultObserverTest.java linha: 205 Método: assertThrows(Exception.class, observer::assertTestCasePassed)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/TestCaseResultObserverTest.java linha: 206 Método: assertThat(exception.getCause(), instanceOf(TestAbortedException.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/TestCaseResultObserverTest.java linha: 227 Método: assertThrows(Exception.class, observer::assertTestCasePassed)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/TestCaseResultObserverTest.java linha: 228 Método: assertThat(exception.getCause(), instanceOf(UndefinedStepException.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/TestCaseResultObserverTest.java linha: 230 Método: assertThat(exception.getCause().getMessage(), is("" + "The step 'mocked' is undefined.\n" + "You can implement this step using the snippet(s) below:\n" + "\n" + "mocked snippet 1\n" + "mocked snippet 2\n" + "mocked snippet 3\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/DiscoverySelectorResolverTest.java linha: 63 Método: assertEquals(0, testDescriptor.getChildren().size())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/DiscoverySelectorResolverTest.java linha: 71 Método: assertEquals(1, testDescriptor.getChildren().size())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/DiscoverySelectorResolverTest.java linha: 79 Método: assertEquals(1, testDescriptor.getChildren().size())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/DiscoverySelectorResolverTest.java linha: 89 Método: assertEquals(1L, testDescriptor.getDescendants().stream().filter(TestDescriptor::isTest).count())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/DiscoverySelectorResolverTest.java linha: 102 Método: assertEquals(2L, testDescriptor.getDescendants().stream().filter(TestDescriptor::isTest).count())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/DiscoverySelectorResolverTest.java linha: 115 Método: assertEquals(2, testDescriptor.getChildren().size())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/DiscoverySelectorResolverTest.java linha: 124 Método: assertEquals(7, testDescriptor.getChildren().size())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/DiscoverySelectorResolverTest.java linha: 139 Método: assertEquals(unsorted, sorted)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/DiscoverySelectorResolverTest.java linha: 152 Método: assertEquals(4, tests.size())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/DiscoverySelectorResolverTest.java linha: 165 Método: assertEquals(2, tests.size())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/DiscoverySelectorResolverTest.java linha: 178 Método: assertEquals(1, tests.size())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/DiscoverySelectorResolverTest.java linha: 190 Método: assertEquals(1, tests.size())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/DiscoverySelectorResolverTest.java linha: 202 Método: assertEquals(2, tests.size())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/DiscoverySelectorResolverTest.java linha: 218 Método: assertEquals(1, tests.size())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/DiscoverySelectorResolverTest.java linha: 226 Método: assertEquals(1, testDescriptor.getChildren().size())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/DiscoverySelectorResolverTest.java linha: 236 Método: assertEquals(1L, testDescriptor.getDescendants().stream().filter(TestDescriptor::isTest).count())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/DiscoverySelectorResolverTest.java linha: 249 Método: assertEquals(2L, testDescriptor.getDescendants().stream().filter(TestDescriptor::isTest).count())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/DiscoverySelectorResolverTest.java linha: 260 Método: assertEquals(6, testDescriptor.getChildren().size())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/DiscoverySelectorResolverTest.java linha: 268 Método: assertEquals(6, testDescriptor.getChildren().size())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/DiscoverySelectorResolverTest.java linha: 276 Método: assertTrue(testDescriptor.getDescendants().isEmpty())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/DiscoverySelectorResolverTest.java linha: 290 Método: assertEquals(1, testDescriptor.getChildren().size())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/DiscoverySelectorResolverTest.java linha: 291 Método: assertThat(testDescriptor, allDescriptorsPrefixedBy(targetDescriptor.getUniqueId()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/DiscoverySelectorResolverTest.java linha: 330 Método: assertEquals(1, testDescriptor.getChildren().size())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/DiscoverySelectorResolverTest.java linha: 331 Método: assertThat(testDescriptor, allDescriptorsPrefixedBy(targetDescriptor.getUniqueId()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/DiscoverySelectorResolverTest.java linha: 342 Método: assertEquals(1, testDescriptor.getChildren().size())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/DiscoverySelectorResolverTest.java linha: 354 Método: assertEquals(1, testDescriptor.getChildren().size())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/DiscoverySelectorResolverTest.java linha: 376 Método: assertEquals(selectors, testDescriptor.getDescendants().stream().filter(PickleDescriptor.class::isInstance).map(TestDescriptor::getUniqueId).collect(toSet()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/DiscoverySelectorResolverTest.java linha: 401 Método: assertEquals(6, testDescriptor.getChildren().size())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/DiscoverySelectorResolverTest.java linha: 409 Método: assertEquals(0, testDescriptor.getChildren().size())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/DiscoverySelectorResolverTest.java linha: 410 Método: assertEquals(1, logRecordListener.getLogRecords().size())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/DiscoverySelectorResolverTest.java linha: 412 Método: assertEquals(Level.WARNING, logRecord.getLevel())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit-platform-engine/src/test/java/io/cucumber/junit/platform/engine/DiscoverySelectorResolverTest.java linha: 413 Método: assertEquals("No features found in package 'io.cucumber.junit.platform.engine.nofeatures'", logRecord.getMessage())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/examples/calculator-java-cli/src/test/java/io/cucumber/examples/calculator/DateStepDefinitions.java linha: 35 Método: assertThat(result, equalTo(expectedResult))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/examples/calculator-java-cli/src/test/java/io/cucumber/examples/calculator/RpnCalculatorStepDefinitions.java linha: 60 Método: assertThat(calc.value(), equalTo(expected))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/examples/calculator-java-cli/src/test/java/io/cucumber/examples/calculator/ShoppingStepDefinitions.java linha: 62 Método: assertThat(-calc.value().intValue(), equalTo(change))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/examples/calculator-java-cli/src/test/java/io/cucumber/examples/calculator/ShoppingStepDefinitions.java linha: 89 Método: assertThat(groceriesPrice, equalTo(totalPrice))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/examples/calculator-java-testng/src/test/java/io/cucumber/examples/calculator/DateStepDefinitions.java linha: 34 Método: assertEquals(expectedResult, result)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/examples/calculator-java-testng/src/test/java/io/cucumber/examples/calculator/RpnCalculatorStepDefinitions.java linha: 61 Método: assertEquals(expected, calc.value())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/examples/calculator-java-testng/src/test/java/io/cucumber/examples/calculator/ShoppingStepDefinitions.java linha: 33 Método: assertEquals(-calc.value().intValue(), change)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/examples/spring-java-junit5/src/test/java/io/cucumber/examples/spring/application/MessageStepDefinitions.java linha: 47 Método: assertThat(results)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/examples/spring-java-junit5/src/test/java/io/cucumber/examples/spring/application/MessageStepDefinitions.java linha: 50 Método: assertThat(results)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/examples/spring-java-junit5/src/test/java/io/cucumber/examples/spring/application/MessageStepDefinitions.java linha: 46 Método: assertAll(() -> {
    assertThat(results).extracting(Message::getContent).isEqualTo(contents);
    assertThat(results).extracting(Message::getAuthor).extracting(User::getId).allMatch(user.getId()::equals);
})
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/examples/calculator-java-junit4/src/test/java/io/cucumber/examples/calculator/DateStepDefinitions.java linha: 34 Método: assertEquals(expectedResult, result)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/examples/calculator-java-junit4/src/test/java/io/cucumber/examples/calculator/RpnCalculatorStepDefinitions.java linha: 59 Método: assertEquals(expected, calc.value())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/examples/calculator-java-junit4/src/test/java/io/cucumber/examples/calculator/ShoppingStepDefinitions.java linha: 60 Método: assertEquals(-calc.value().intValue(), change)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/examples/calculator-java-junit4/src/test/java/io/cucumber/examples/calculator/ShoppingStepDefinitions.java linha: 87 Método: assertEquals(groceriesPrice, totalPrice)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/examples/calculator-java-junit5/src/test/java/io/cucumber/examples/calculator/ShoppingSteps.java linha: 31 Método: assertEquals(-calc.value().intValue(), change)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/examples/calculator-java-junit5/src/test/java/io/cucumber/examples/calculator/DateStepDefinitions.java linha: 28 Método: assertEquals(expectedResult, result)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/examples/calculator-java-junit5/src/test/java/io/cucumber/examples/calculator/RpnCalculatorSteps.java linha: 69 Método: assertEquals(expected, calc.value())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/examples/wicket-java-junit4/wicket-main/src/test/java/io/cucumber/examples/wicket/main/RentCarTest.java linha: 34 Método: assertThat(actual, is(expected))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/examples/wicket-java-junit4/wicket-test/src/test/java/io/cucumber/examples/wicket/test/steps/RentStepDefinitions.java linha: 27 Método: assertThat(actualAvailableCars, is(expectedAvailableCars))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeTest.java linha: 22 Método: assertThat(singleCellType.transform(singletonList(singletonList("12"))), equalTo(singletonList(singletonList(12))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeTest.java linha: 37 Método: assertEquals(1, transform.size())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeTest.java linha: 38 Método: assertEquals(here, transform.get(0).name)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeTest.java linha: 43 Método: assertThat(singleCellType.toCanonical(), is("java.util.List<java.util.List<java.lang.Integer>>"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTest.java linha: 54 Método: assertThrows(DuplicateTypeException.class, () -> registry.defineDataTableType(new DataTableType(Place.class, (TableTransformer<Place>) table -> new Place(table.cell(0, 0)))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTest.java linha: 59 Método: assertThat(exception.getMessage(), is("" + "There already is a data table type registered that can supply class io.cucumber.datatable.Place.\n" + "You are trying to register a TableTransformer for class io.cucumber.datatable.Place.\n" + "The existing data table type registered a TableTransformer for class io.cucumber.datatable.Place.\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTest.java linha: 73 Método: assertNull(lookupTableTypeByType)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTest.java linha: 83 Método: assertNull(lookupTableTypeByType)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTest.java linha: 93 Método: assertNull(lookupTableTypeByType)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTest.java linha: 105 Método: assertSame(cell, lookupTableTypeByType)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTest.java linha: 116 Método: assertSame(ENTRY, lookupTableTypeByType)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTest.java linha: 123 Método: assertEquals(singletonList(singletonList(new BigDecimal("2105.88"))), dataTableType.transform(singletonList(singletonList("2,105.88"))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTest.java linha: 132 Método: assertEquals(singletonList(singletonList(new BigDecimal("2105.88"))), dataTableType.transform(singletonList(singletonList("2.105,88"))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTest.java linha: 142 Método: assertEquals(singletonList(singletonList(null)), dataTableType.transform(singletonList(singletonList(null))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTest.java linha: 152 Método: assertEquals(singletonList(singletonList(null)), dataTableType.transform(singletonList(singletonList(null))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTest.java linha: 162 Método: assertEquals(singletonList(singletonList(null)), dataTableType.transform(singletonList(singletonList(null))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTest.java linha: 172 Método: assertEquals(singletonList(singletonList(null)), dataTableType.transform(singletonList(singletonList(null))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTest.java linha: 182 Método: assertEquals(singletonList(singletonList(null)), dataTableType.transform(singletonList(singletonList(null))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTest.java linha: 192 Método: assertEquals(singletonList(singletonList(null)), dataTableType.transform(singletonList(singletonList(null))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTest.java linha: 202 Método: assertEquals(singletonList(singletonList(null)), dataTableType.transform(singletonList(singletonList(null))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTest.java linha: 212 Método: assertEquals(singletonList(singletonList(null)), dataTableType.transform(singletonList(singletonList(null))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTest.java linha: 222 Método: assertEquals(singletonList(singletonList(null)), dataTableType.transform(singletonList(singletonList(null))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTest.java linha: 233 Método: assertEquals(singletonList(singletonList("")), dataTableType.transform(singletonList(singletonList("[blank]"))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTest.java linha: 244 Método: assertEquals(singletonList(singletonList("")), dataTableType.transform(singletonList(singletonList("[blank]"))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTest.java linha: 253 Método: assertEquals(singletonList(singletonList(Boolean.TRUE)), dataTableType.transform(singletonList(singletonList("true"))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTest.java linha: 256 Método: assertEquals(singletonList(singletonList(Boolean.FALSE)), dataTableType.transform(singletonList(singletonList("false"))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTest.java linha: 267 Método: assertEquals(singletonList(singletonList(Boolean.TRUE)), dataTableType.transform(singletonList(singletonList("yes"))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/TableDifferTest.java linha: 153 Método: assertTrue(new TableDiffer(table(), table()).calculateDiffs().isEmpty())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/TableDifferTest.java linha: 219 Método: assertEquals(emptyTable.cells(), emptyList)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/TableDifferTest.java linha: 264 Método: assertTrue(new TableDiffer(table(), table()).calculateUnorderedDiffs().isEmpty())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/TableDifferTest.java linha: 269 Método: assertTrue(new TableDiffer(table(), otherTableWithDifferentOrder()).calculateUnorderedDiffs().isEmpty())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/TableDifferTest.java linha: 357 Método: assertEquals("tables were different:\n" + expected, e.getMessage())
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/TableDifferTest.java linha: 355 Método: fail("Expected exception")
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/TableDifferTest.java linha: 366 Método: assertEquals("tables were different:\n" + expected, e.getMessage())
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/TableDifferTest.java linha: 364 Método: fail("Expected exception")
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 138 Método: assertEquals(emptyList(), converter.toList(table, Integer.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 139 Método: assertEquals(emptyList(), converter.convert(table, LIST_OF_INT))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 145 Método: assertEquals(emptyList(), converter.toLists(table, Integer.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 146 Método: assertEquals(emptyList(), converter.convert(table, LIST_OF_LIST_OF_INT))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 154 Método: assertEquals(emptyList(), converter.convert(table, LIST_OF_AUTHOR))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 160 Método: assertEquals(emptyMap(), converter.toMap(table, Integer.class, Integer.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 161 Método: assertEquals(emptyMap(), converter.convert(table, MAP_OF_INT_TO_INT))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 167 Método: assertEquals(emptyMap(), converter.toMap(table, Integer.class, Integer.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 168 Método: assertEquals(emptyMap(), converter.convert(table, MAP_OF_INT_TO_INT))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 174 Método: assertEquals(emptyList(), converter.toMaps(table, Integer.class, Integer.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 175 Método: assertEquals(emptyList(), converter.convert(table, LIST_OF_MAP_OF_INT_TO_INT))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 182 Método: assertEquals(emptyList(), converter.toMaps(table, String.class, Integer.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 183 Método: assertEquals(emptyList(), converter.convert(table, LIST_OF_MAP_OF_STRING_TO_INT))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 189 Método: assertSame(table, converter.convert(table, DataTable.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 202 Método: assertEquals(expected, converter.toList(table, String.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 203 Método: assertEquals(expected, converter.convert(table, List.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 217 Método: assertEquals(expected, converter.toList(table, OPTIONAL_BIG_DECIMAL))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 233 Método: assertEquals(expected, converter.toMaps(table, OPTIONAL_STRING, OPTIONAL_BIG_INTEGER))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 246 Método: assertEquals(expected, converter.toList(table, Integer.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 247 Método: assertEquals(expected, converter.convert(table, LIST_OF_INT))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 256 Método: assertThrows(CucumberDataTableException.class, () -> converter.toList(table, Integer.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 259 Método: assertThat(exception.getMessage(), is("" + "Can't convert DataTable to List<java.lang.Integer>.\n" + "Please review these problems:\n" + "\n" + " - There was a table cell transformer for java.lang.Integer but the table was too wide to use it.\n" + "   Please reduce the table width to use this converter.\n" + "\n" + " - There was no table entry or table row transformer registered for java.lang.Integer.\n" + "   Please consider registering a table entry or row transformer.\n" + "\n" + " - There was no default table entry transformer registered to transform java.lang.Integer.\n" + "   Please consider registering a default table entry transformer.\n" + "\n" + "Note: Usually solving one is enough"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 280 Método: assertThrows(CucumberDataTableException.class, () -> converter.toList(table, Integer.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 283 Método: assertThat(exception.getMessage(), is("" + "Can't convert DataTable to List<java.lang.Integer>.\n" + "Please review these problems:\n" + "\n" + " - There was a table cell transformer for java.lang.Integer but the table was too wide to use it.\n" + "   Please reduce the table width to use this converter.\n" + "\n" + " - There was no table entry or table row transformer registered for java.lang.Integer.\n" + "   Please consider registering a table entry or row transformer.\n" + "\n" + "Note: Usually solving one is enough"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 327 Método: assertEquals(expected, converter.convert(table, LIST_OF_MAP))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 344 Método: assertEquals(expected, converter.toList(table, Author.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 345 Método: assertEquals(expected, converter.convert(table, LIST_OF_AUTHOR))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 356 Método: assertEquals(expected, converter.toList(table, Author.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 357 Método: assertEquals(expected, converter.convert(table, LIST_OF_AUTHOR))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 376 Método: assertEquals(expected, converter.toList(table, Author.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 377 Método: assertEquals(expected, converter.convert(table, LIST_OF_AUTHOR))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 395 Método: assertEquals(expected, converter.toList(table, Author.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 396 Método: assertEquals(expected, converter.convert(table, LIST_OF_AUTHOR))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 407 Método: assertThrows(CucumberDataTableException.class, () -> converter.convert(table, LIST_OF_AUTHOR))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 410 Método: assertThat(exception.getMessage(), is("" + "Can't convert DataTable to List<io.cucumber.datatable.DataTableTypeRegistryTableConverterTest$Author>.\n" + "Please review these problems:\n" + "\n" + " - There was a default table cell transformer that could be used but the table was too wide to use it.\n" + "   Please reduce the table width to use this converter.\n" + "\n" + " - There was no table entry or table row transformer registered for io.cucumber.datatable.DataTableTypeRegistryTableConverterTest$Author.\n" + "   Please consider registering a table entry or row transformer.\n" + "\n" + " - There was a default table entry transformer that could be used but the table was too short use it.\n" + "   Please increase the table height to use this converter.\n" + "\n" + "Note: Usually solving one is enough"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 440 Método: assertEquals(expected, converter.toList(table, Integer.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 441 Método: assertEquals(expected, converter.convert(table, LIST_OF_INT))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 451 Método: assertEquals(expected, converter.toList(table, Integer.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 452 Método: assertEquals(expected, converter.convert(table, LIST_OF_INT))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 462 Método: assertEquals(expected, converter.toList(table, OPTIONAL_STRING))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 463 Método: assertEquals(expected, converter.convert(table, LIST_OF_OPTIONAL_STRING))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 474 Método: assertEquals(expected, converter.toList(table, OPTIONAL_STRING))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 475 Método: assertEquals(expected, converter.convert(table, LIST_OF_OPTIONAL_STRING))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 486 Método: assertThrows(CucumberDataTableException.class, () -> converter.convert(table, LIST_OF_AUTHOR))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 489 Método: assertThat(exception.getMessage(), is("" + "Can't convert DataTable to List<io.cucumber.datatable.DataTableTypeRegistryTableConverterTest$Author>.\n" + "Please review these problems:\n" + "\n" + " - There was no table entry or table row transformer registered for io.cucumber.datatable.DataTableTypeRegistryTableConverterTest$Author.\n" + "   Please consider registering a table entry or row transformer.\n" + "\n" + " - There was no default table entry transformer registered to transform io.cucumber.datatable.DataTableTypeRegistryTableConverterTest$Author.\n" + "   Please consider registering a default table entry transformer.\n" + "\n" + "Note: Usually solving one is enough"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 515 Método: assertEquals(expected, converter.convert(table, LIST_OF_LIST))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 516 Método: assertEquals(expected, converter.toLists(table, String.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 529 Método: assertEquals(expected, converter.toLists(table, Integer.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 530 Método: assertEquals(expected, converter.convert(table, LIST_OF_LIST_OF_INT))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 540 Método: assertThrows(CucumberDataTableException.class, () -> converter.convert(table, LIST_OF_LIST_OF_DATE))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 544 Método: assertThat(exception.getMessage(), is("" + "Can't convert DataTable to List<List<java.util.Date>>.\n" + "Please review these problems:\n" + "\n" + " - There was no table cell transformer registered for java.util.Date.\n" + "   Please consider registering a table cell transformer.\n" + "\n" + " - There was no default table cell transformer registered to transform java.util.Date.\n" + "   Please consider registering a default table cell transformer.\n" + "\n" + "Note: Usually solving one is enough"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 570 Método: assertEquals(expected, converter.toMap(table, String.class, String.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 571 Método: assertEquals(expected, converter.convert(table, Map.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 590 Método: assertEquals(expected, converter.toMap(table, String.class, String.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 591 Método: assertEquals(expected, converter.convert(table, Map.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 604 Método: assertEquals(expected, converter.toMap(table, Integer.class, Integer.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 605 Método: assertEquals(expected, converter.convert(table, MAP_OF_INT_TO_INT))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 629 Método: assertEquals(expected, converter.toMap(table, AirPortCode.class, Coordinate.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 630 Método: assertEquals(expected, converter.convert(table, MAP_OF_AIR_PORT_CODE_TO_COORDINATE))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 654 Método: assertEquals(expected, converter.toMap(table, AirPortCode.class, Coordinate.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 655 Método: assertEquals(expected, converter.convert(table, MAP_OF_AIR_PORT_CODE_TO_COORDINATE))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 682 Método: assertEquals(expected, converter.toMap(table, AirPortCode.class, Coordinate.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 683 Método: assertEquals(expected, converter.convert(table, MAP_OF_AIR_PORT_CODE_TO_COORDINATE))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 707 Método: assertEquals(expected, converter.toMap(table, AirPortCode.class, Coordinate.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 708 Método: assertEquals(expected, converter.convert(table, MAP_OF_AIR_PORT_CODE_TO_COORDINATE))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 729 Método: assertEquals(expected, converter.toMap(table, AirPortCode.class, AirPortCode.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 730 Método: assertEquals(expected, converter.convert(table, MAP_OF_AIR_PORT_CODE_TO_AIR_PORT_CODE))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 752 Método: assertEquals(expected, converter.convert(table, MAP_OF_AIR_PORT_CODE_TO_AIR_PORT_CODE))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 772 Método: assertEquals(expected, converter.convert(table, MAP_OF_STRING_TO_LIST_OF_DOUBLE))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 793 Método: assertEquals(expected, converter.convert(table, MAP_OF_STRING_TO_LIST_OF_DATE))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 814 Método: assertEquals(expected, converter.convert(table, MAP_OF_STRING_TO_LIST_OF_DATE))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 837 Método: assertEquals(expected, converter.convert(table, MAP_OF_STRING_TO_LIST_OF_DOUBLE))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 876 Método: assertEquals(expected, converter.convert(table, MAP_OF_STRING_TO_MAP_OF_INTEGER_TO_PIECE))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 917 Método: assertEquals(expected, converter.convert(table, MAP_OF_STRING_TO_MAP_OF_STRING_DOUBLE))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 940 Método: assertEquals(expected, converter.toMap(table, String.class, Coordinate.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 941 Método: assertEquals(expected, converter.convert(table, MAP_OF_STRING_TO_COORDINATE))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 959 Método: assertEquals(expected, converter.toMap(table, Integer.class, String.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 960 Método: assertEquals(expected, converter.convert(table, MAP_OF_INT_TO_STRING))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1001 Método: assertEquals(expected, converter.convert(table, MAP_OF_STRING_TO_MAP))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1012 Método: assertThrows(CucumberDataTableException.class, () -> converter.convert(table, MAP_OF_STRING_TO_LIST_OF_DOUBLE))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1015 Método: assertThat(exception.getMessage(), is(format("" + "Can't convert DataTable to Map<%s, %s>.\n" + "There are more values then keys. " + "The first header cell was left blank. " + "You can add a value there", typeName(String.class), LIST_OF_DOUBLE)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1031 Método: assertThrows(CucumberDataTableException.class, () -> converter.convert(table, MAP_OF_STRING_TO_STRING))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1034 Método: assertThat(exception.getMessage(), is(format("" + "Can't convert DataTable to Map<%s, %s>.\n" + "There is more then one value per key. " + "Did you mean to transform to Map<%s, List<%s>> instead?", typeName(String.class), typeName(String.class), typeName(String.class), typeName(String.class))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1064 Método: assertEquals(expected, converter.toMaps(table, Integer.class, Integer.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1065 Método: assertEquals(expected, converter.convert(table, LIST_OF_MAP_OF_INT_TO_INT))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1082 Método: assertEquals(expected, converter.toMaps(table, Integer.class, Integer.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1083 Método: assertEquals(expected, converter.convert(table, LIST_OF_MAP_OF_INT_TO_INT))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1100 Método: assertEquals(expected, converter.convert(table, ChessBoard.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1113 Método: assertThrows(UndefinedDataTableTypeException.class, () -> converter.convert(table, OPTIONAL_CHESS_BOARD_TYPE))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1116 Método: assertThat(exception.getMessage(), is("" + "Can't convert DataTable to io.cucumber.datatable.DataTableTypeRegistryTableConverterTest$ChessBoard.\n" + "Please review these problems:\n" + "\n" + " - There was no table entry or table row transformer registered for io.cucumber.datatable.DataTableTypeRegistryTableConverterTest$ChessBoard.\n" + "   Please consider registering a table entry or row transformer.\n" + "\n" + " - There was no default table entry transformer registered to transform io.cucumber.datatable.DataTableTypeRegistryTableConverterTest$ChessBoard.\n" + "   Please consider registering a default table entry transformer.\n" + "\n" + "Note: Usually solving one is enough"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1140 Método: assertEquals(Optional.empty(), converter.convert(table, OPTIONAL_CHESS_BOARD_TYPE))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1151 Método: assertThrows(CucumberDataTableException.class, () -> converter.convert(table, Piece.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1154 Método: assertThat(exception.getMessage(), is(format("" + "Can't convert DataTable to %s. " + "The table contained more then one item: [♘, ♝]", typeName(Piece.class))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1167 Método: assertThrows(CucumberDataTableException.class, () -> converter.convert(table, Piece.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1170 Método: assertThat(exception.getMessage(), is("" + "Can't convert DataTable to io.cucumber.datatable.DataTableTypeRegistryTableConverterTest$Piece.\n" + "Please review these problems:\n" + "\n" + " - There was a table cell transformer for io.cucumber.datatable.DataTableTypeRegistryTableConverterTest$Piece but the table was too wide to use it.\n" + "   Please reduce the table width to use this converter.\n" + "\n" + " - There was no table entry or table row transformer registered for io.cucumber.datatable.DataTableTypeRegistryTableConverterTest$Piece.\n" + "   Please consider registering a table entry or row transformer.\n" + "\n" + "Note: Usually solving one is enough"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1188 Método: assertNull(converter.convert(table, Integer.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1194 Método: assertEquals(Integer.valueOf(3), converter.convert(table, Integer.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1202 Método: assertEquals(Piece.BLACK_BISHOP, converter.convert(table, Piece.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1213 Método: assertEquals(Piece.BLACK_BISHOP, converter.convert(table, Piece.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1222 Método: assertEquals(Piece.BLACK_BISHOP, converter.convert(table, Piece.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1236 Método: assertSame(expected, converter.convert(table, DataTable.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1247 Método: assertEquals(table.transpose(), converter.convert(table, DataTable.class, true))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1255 Método: assertThrows(CucumberDataTableException.class, () -> converter.convert(table, Piece.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1258 Método: assertThat(exception.getMessage(), is("" + "Can't convert DataTable to io.cucumber.datatable.DataTableTypeRegistryTableConverterTest$Piece.\n" + "Please review these problems:\n" + "\n" + " - There was no table entry or table row transformer registered for io.cucumber.datatable.DataTableTypeRegistryTableConverterTest$Piece.\n" + "   Please consider registering a table entry or row transformer.\n" + "\n" + " - There was no table cell transformer registered for io.cucumber.datatable.DataTableTypeRegistryTableConverterTest$Piece.\n" + "   Please consider registering a table cell transformer.\n" + "\n" + " - There was no default table cell transformer registered to transform io.cucumber.datatable.DataTableTypeRegistryTableConverterTest$Piece.\n" + "   Please consider registering a default table cell transformer.\n" + "\n" + "Note: Usually solving one is enough"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1281 Método: assertThrows(CucumberDataTableException.class, () -> converter.convert(table, Piece.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1284 Método: assertThat(exception.getMessage(), is("" + "Can't convert DataTable to io.cucumber.datatable.DataTableTypeRegistryTableConverterTest$Piece.\n" + "Please review these problems:\n" + "\n" + " - There was no table entry or table row transformer registered for io.cucumber.datatable.DataTableTypeRegistryTableConverterTest$Piece.\n" + "   Please consider registering a table entry or row transformer.\n" + "\n" + " - There was no table cell transformer registered for io.cucumber.datatable.DataTableTypeRegistryTableConverterTest$Piece.\n" + "   Please consider registering a table cell transformer.\n" + "\n" + " - There was no default table cell transformer registered to transform io.cucumber.datatable.DataTableTypeRegistryTableConverterTest$Piece.\n" + "   Please consider registering a default table cell transformer.\n" + "\n" + "Note: Usually solving one is enough"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1309 Método: assertThrows(CucumberDataTableException.class, () -> converter.toList(table, Piece.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1312 Método: assertThat(exception.getMessage(), is("" + "Can't convert DataTable to List<io.cucumber.datatable.DataTableTypeRegistryTableConverterTest$Piece>.\n" + "Please review these problems:\n" + "\n" + " - There was no table entry or table row transformer registered for io.cucumber.datatable.DataTableTypeRegistryTableConverterTest$Piece.\n" + "   Please consider registering a table entry or row transformer.\n" + "\n" + " - There was no table cell transformer registered for io.cucumber.datatable.DataTableTypeRegistryTableConverterTest$Piece.\n" + "   Please consider registering a table cell transformer.\n" + "\n" + " - There was no default table entry transformer registered to transform io.cucumber.datatable.DataTableTypeRegistryTableConverterTest$Piece.\n" + "   Please consider registering a default table entry transformer.\n" + "\n" + " - There was no default table cell transformer registered to transform io.cucumber.datatable.DataTableTypeRegistryTableConverterTest$Piece.\n" + "   Please consider registering a default table cell transformer.\n" + "\n" + "Note: Usually solving one is enough"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1344 Método: assertThrows(CucumberDataTableException.class, () -> converter.toList(table, Author.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1347 Método: assertThat(exception.getMessage(), is("" + "Can't convert DataTable to List<io.cucumber.datatable.DataTableTypeRegistryTableConverterTest$Author>.\n" + "Please review these problems:\n" + "\n" + " - There was no table entry or table row transformer registered for io.cucumber.datatable.DataTableTypeRegistryTableConverterTest$Author.\n" + "   Please consider registering a table entry or row transformer.\n" + "\n" + " - There was no default table entry transformer registered to transform io.cucumber.datatable.DataTableTypeRegistryTableConverterTest$Author.\n" + "   Please consider registering a default table entry transformer.\n" + "\n" + "Note: Usually solving one is enough"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1371 Método: assertThrows(CucumberDataTableException.class, () -> converter.toLists(table, Author.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1373 Método: assertThat(exception.getMessage(), is("" + "Can't convert DataTable to List<List<io.cucumber.datatable.DataTableTypeRegistryTableConverterTest$Author>>.\n" + "Please review these problems:\n" + "\n" + " - There was no table cell transformer registered for io.cucumber.datatable.DataTableTypeRegistryTableConverterTest$Author.\n" + "   Please consider registering a table cell transformer.\n" + "\n" + " - There was no default table cell transformer registered to transform io.cucumber.datatable.DataTableTypeRegistryTableConverterTest$Author.\n" + "   Please consider registering a default table cell transformer.\n" + "\n" + "Note: Usually solving one is enough"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1402 Método: assertThrows(CucumberDataTableException.class, () -> converter.toMap(table, AirPortCode.class, Coordinate.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1405 Método: assertThat(exception.getMessage(), startsWith(format("" + "Can't convert DataTable to Map<%s, %s>.\n" + "Encountered duplicate key", typeName(AirPortCode.class), typeName(Coordinate.class))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1422 Método: assertThrows(CucumberDataTableException.class, () -> converter.toMap(table, AirPortCode.class, String.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1425 Método: assertThat(exception.getMessage(), is("" + "Can't convert DataTable to Map<io.cucumber.datatable.DataTableTypeRegistryTableConverterTest$AirPortCode, java.lang.String>.\n" + "The first cell was either blank or you have registered a TableEntryTransformer for the key type.\n" + "\n" + "This requires that there is a TableEntryTransformer for the value type but I couldn't find any.\n" + "\n" + "You can either:\n" + "\n" + "  1) Use a DataTableType that uses a TableEntryTransformer for class java.lang.String\n" + "\n" + "  2) Add a key to the first cell and use a DataTableType that uses a TableEntryTransformer for class io.cucumber.datatable.DataTableTypeRegistryTableConverterTest$AirPortCode"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1450 Método: assertThrows(CucumberDataTableException.class, () -> converter.toMap(table, AirPortCode.class, Coordinate.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1453 Método: assertThat(exception.getMessage(), is(format("" + "Can't convert DataTable to Map<%s, %s>.\n" + "There are more values then keys. " + "Did you use a TableEntryTransformer for the key " + "while using a TableRow or TableCellTransformer for the value?", typeName(AirPortCode.class), typeName(Coordinate.class))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1472 Método: assertThrows(CucumberDataTableException.class, () -> converter.toMap(table, AirPortCode.class, Coordinate.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1475 Método: assertThat(exception.getMessage(), startsWith(format("" + "Can't convert DataTable to Map<%s, %s>.\n" + "The first cell was either blank or you have registered a TableEntryTransformer for the key type.", typeName(AirPortCode.class), typeName(Coordinate.class))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1492 Método: assertThrows(CucumberDataTableException.class, () -> converter.toMap(table, String.class, Coordinate.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1495 Método: assertThat(exception.getMessage(), is(format("" + "Can't convert DataTable to Map<%s, %s>.\n" + "There are more keys than values. " + "Did you use a TableEntryTransformer for the value " + "while using a TableRow or TableCellTransformer for the keys?", typeName(String.class), typeName(Coordinate.class))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1511 Método: assertThrows(CucumberDataTableException.class, () -> converter.toMap(table, String.class, String.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1514 Método: assertThat(exception.getMessage(), startsWith(format("" + "Can't convert DataTable to Map<%s, %s>.\n" + "The first cell was either blank or you have registered a TableEntryTransformer for the key type.", typeName(String.class), typeName(String.class))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1528 Método: assertThrows(CucumberDataTableException.class, () -> converter.toMap(table, Author.class, String.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1531 Método: assertThat(exception.getMessage(), is("" + "Can't convert DataTable to Map<io.cucumber.datatable.DataTableTypeRegistryTableConverterTest$Author, java.lang.String>.\n" + "Please review these problems:\n" + "\n" + " - There was no table entry or table row transformer registered for io.cucumber.datatable.DataTableTypeRegistryTableConverterTest$Author.\n" + "   Please consider registering a table entry or row transformer.\n" + "\n" + " - There was no table cell transformer registered for io.cucumber.datatable.DataTableTypeRegistryTableConverterTest$Author.\n" + "   Please consider registering a table cell transformer.\n" + "\n" + " - There was no default table entry transformer registered to transform io.cucumber.datatable.DataTableTypeRegistryTableConverterTest$Author.\n" + "   Please consider registering a default table entry transformer.\n" + "\n" + " - There was no default table cell transformer registered to transform io.cucumber.datatable.DataTableTypeRegistryTableConverterTest$Author.\n" + "   Please consider registering a default table cell transformer.\n" + "\n" + "Note: Usually solving one is enough"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1566 Método: assertThrows(CucumberDataTableException.class, () -> converter.toMap(table, AirPortCode.class, Coordinate.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1569 Método: assertThat(exception.getMessage(), is("" + "Can't convert DataTable to Map<io.cucumber.datatable.DataTableTypeRegistryTableConverterTest$AirPortCode, io.cucumber.datatable.DataTableTypeRegistryTableConverterTest$Coordinate>.\n" + "Please review these problems:\n" + "\n" + " - There was no table cell transformer registered for io.cucumber.datatable.DataTableTypeRegistryTableConverterTest$AirPortCode.\n" + "   Please consider registering a table cell transformer.\n" + "\n" + " - There was no default table cell transformer registered to transform io.cucumber.datatable.DataTableTypeRegistryTableConverterTest$AirPortCode.\n" + "   Please consider registering a default table cell transformer.\n" + "\n" + "Note: Usually solving one is enough"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1591 Método: assertThrows(CucumberDataTableException.class, () -> converter.toMap(table, String.class, Date.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1594 Método: assertThat(exception.getMessage(), is("" + "Can't convert DataTable to Map<java.lang.String, java.util.Date>.\n" + "Please review these problems:\n" + "\n" + " - There was no table entry transformer registered for java.util.Date.\n" + "   Please consider registering a table entry transformer.\n" + "\n" + " - There was no table cell transformer registered for java.util.Date.\n" + "   Please consider registering a table cell transformer.\n" + "\n" + " - There was no default table cell transformer registered to transform java.util.Date.\n" + "   Please consider registering a default table cell transformer.\n" + "\n" + "Note: Usually solving one is enough"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1617 Método: assertThrows(CucumberDataTableException.class, () -> converter.convert(table, MAP_OF_STRING_TO_LIST_OF_DATE))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1620 Método: assertThat(exception.getMessage(), is("" + "Can't convert DataTable to Map<java.lang.String, java.util.List<java.util.Date>>.\n" + "Please review these problems:\n" + "\n" + " - There was no table cell transformer registered for java.util.Date.\n" + "   Please consider registering a table cell transformer.\n" + "\n" + " - There was no default table cell transformer registered to transform java.util.Date.\n" + "   Please consider registering a default table cell transformer.\n" + "\n" + "Note: Usually solving one is enough"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1640 Método: assertThrows(CucumberDataTableException.class, () -> converter.toMaps(table, Integer.class, Integer.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1643 Método: assertThat(exception.getMessage(), is(format("" + "Can't convert DataTable to Map<%s, %s>.\n" + "Encountered duplicate key 1 with values 4 and 5", typeName(Integer.class), typeName(Integer.class))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1655 Método: assertThrows(CucumberDataTableException.class, () -> converter.toMaps(table, Integer.class, Integer.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1658 Método: assertThat(exception.getMessage(), is(format("" + "Can't convert DataTable to Map<%s, %s>.\n" + "Encountered duplicate key null with values 1 and 2", typeName(Integer.class), typeName(Integer.class))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1673 Método: assertThrows(CucumberDataTableException.class, () -> converter.toMaps(table, String.class, Coordinate.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1676 Método: assertThat(exception.getMessage(), is("" + "Can't convert DataTable to List<Map<java.lang.String, io.cucumber.datatable.DataTableTypeRegistryTableConverterTest$Coordinate>>.\n" + "Please review these problems:\n" + "\n" + " - There was no table cell transformer registered for io.cucumber.datatable.DataTableTypeRegistryTableConverterTest$Coordinate.\n" + "   Please consider registering a table cell transformer.\n" + "\n" + "Note: Usually solving one is enough"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1701 Método: assertThrows(CucumberDataTableException.class, () -> converter.toMaps(table, Piece.class, String.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTypeRegistryTableConverterTest.java linha: 1704 Método: assertThat(exception.getMessage(), is("" + "Can't convert DataTable to List<Map<io.cucumber.datatable.DataTableTypeRegistryTableConverterTest$Piece, java.lang.String>>.\n" + "Please review these problems:\n" + "\n" + " - There was no table cell transformer registered for io.cucumber.datatable.DataTableTypeRegistryTableConverterTest$Piece.\n" + "   Please consider registering a table cell transformer.\n" + "\n" + "Note: Usually solving one is enough"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 36 Método: assertTrue(table.isEmpty())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 37 Método: assertTrue(table.cells().isEmpty())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 51 Método: assertSame(tableConverter, lowerCaseTable.getTableConverter())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 58 Método: assertEquals(raw, table.cells())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 65 Método: assertEquals(raw, table.cells())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 72 Método: assertEquals(raw, table.cells())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 79 Método: assertEquals(raw.get(0).get(0), table.cell(0, 0))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 80 Método: assertEquals(raw.get(0).get(1), table.cell(0, 1))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 81 Método: assertEquals(raw.get(1).get(0), table.cell(1, 0))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 82 Método: assertEquals(raw.get(1).get(1), table.cell(1, 1))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 94 Método: assertEquals(asList(asList("ten", "10"), asList("hundred", "100")), table.subTable(0, 0, 2, 2).cells())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 100 Método: assertEquals(asList(asList("100", "2"), asList("1000", "3")), table.subTable(1, 1).cells())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 106 Método: assertEquals(table.cells(), table.subTable(0, 0).cells())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 109 Método: assertEquals("ten", table.subTable(0, 0, 3, 3).cell(0, 0))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 110 Método: assertEquals("1", table.subTable(0, 0).cell(0, 2))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 111 Método: assertEquals("thousand", table.subTable(0, 0, 3, 3).cell(2, 0))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 112 Método: assertEquals("3", table.subTable(0, 0).cell(2, 2))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 118 Método: assertThrows(IndexOutOfBoundsException.class, () -> table.subTable(-1, 0, 1, 1))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 124 Método: assertThrows(IndexOutOfBoundsException.class, () -> table.subTable(0, -1, 1, 1))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 130 Método: assertThrows(IndexOutOfBoundsException.class, () -> table.subTable(0, 0, 4, 1))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 136 Método: assertThrows(IndexOutOfBoundsException.class, () -> table.subTable(0, 0, 1, 4))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 142 Método: assertThrows(IllegalArgumentException.class, () -> table.subTable(2, 0, 1, 1))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 148 Método: assertThrows(IllegalArgumentException.class, () -> table.subTable(0, 2, 1, 1))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 154 Método: assertThrows(IndexOutOfBoundsException.class, () -> table.subTable(0, 0, 1, 1).cell(-1, 0))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 161 Método: assertThrows(IndexOutOfBoundsException.class, () -> table.subTable(0, 0, 1, 1).cell(0, -1))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 168 Método: assertThrows(IndexOutOfBoundsException.class, () -> table.subTable(0, 0, 1, 1).cell(1, 0))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 175 Método: assertThrows(IndexOutOfBoundsException.class, () -> table.subTable(0, 0, 1, 1).cell(0, 1))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 185 Método: assertEquals(emptyDataTable(), subTable)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 186 Método: assertTrue(subTable.isEmpty())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 187 Método: assertEquals(0, subTable.height())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 188 Método: assertEquals(0, subTable.width())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 189 Método: assertEquals(emptyList(), subTable.cells())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 207 Método: assertEquals(raw.get(2), table.row(2))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 219 Método: assertEquals(asList(asList("hundred", "100"), asList("thousand", "1000")), table.rows(1).cells())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 225 Método: assertEquals(DataTable.create(singletonList(asList("hundred", "100"))), table.rows(1, 2))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 240 Método: assertEquals(asList("100", "1000"), table.column(1))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 247 Método: assertThrows(IndexOutOfBoundsException.class, () -> createSimpleTable().column(-1))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 252 Método: assertThrows(IndexOutOfBoundsException.class, () -> createSimpleTable().column(0).get(-1))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 257 Método: assertThrows(IndexOutOfBoundsException.class, () -> createSimpleTable().column(4))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 262 Método: assertThrows(IndexOutOfBoundsException.class, () -> createSimpleTable().column(0).get(4))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 273 Método: assertEquals(asList("thousand", "1000", "3"), table.column(1))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 286 Método: assertEquals(asList(asList("100", "2"), asList("1000", "3")), table.columns(1).cells())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 292 Método: assertEquals(DataTable.create(asList(singletonList("100"), singletonList("1000"))), table.columns(1, 2))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 304 Método: assertEquals(raw, table.asLists())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 311 Método: assertTrue(table.isEmpty())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 312 Método: assertTrue(table.cells().isEmpty())
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 318 Método: assertEquals(2, raw.size(), "Rows size")
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 320 Método: assertEquals(3, list.size(), "Cols size: " + list)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 327 Método: assertEquals(3, raw.size(), "Rows size")
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 329 Método: assertEquals(2, list.size(), "Cols size: " + list)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 339 Método: assertThrows(IllegalArgumentException.class, () -> DataTable.create(raw, tableConverter))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 347 Método: assertThrows(IllegalArgumentException.class, () -> DataTable.create(table, tableConverter))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 355 Método: assertEquals("" + "| one  | four  | seven  |\n" + "| 4444 | 55555 | 666666 |\n", other.toString())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 363 Método: assertThrows(UnsupportedOperationException.class, () -> createSimpleTable().cells().remove(0))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 368 Método: assertThrows(UnsupportedOperationException.class, () -> createSimpleTable().cells().get(0).remove(0))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 376 Método: assertEquals(1L, table.convert(Long.class, false))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 377 Método: assertEquals(1L, table.<Long>convert((Type) Long.class, false))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 386 Método: assertEquals(asList("1", "100", "2", "1000"), table.values())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 395 Método: assertThrows(IndexOutOfBoundsException.class, () -> table.values().get(5))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 404 Método: assertThrows(IndexOutOfBoundsException.class, () -> table.values().get(-1))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 410 Método: assertEquals(asList(1L, 2L), table.asList(Long.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 411 Método: assertEquals(asList(1L, 2L), table.asList((Type) Long.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 417 Método: assertEquals(asList("1", "2"), table.asList())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 423 Método: assertEquals(asList(asList(1L, 100L), asList(2L, 1000L)), table.asLists(Long.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 424 Método: assertEquals(asList(asList(1L, 100L), asList(2L, 1000L)), table.asLists((Type) Long.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 433 Método: assertEquals(raw, table.asLists())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 446 Método: assertEquals(expected, table.asMaps(String.class, Long.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 447 Método: assertEquals(expected, table.asMaps((Type) String.class, (Type) Long.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 459 Método: assertEquals(singletonList(expected), table.asMaps())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 475 Método: assertEquals(singletonList(expected), table.asMaps())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 486 Método: assertThrows(CucumberDataTableException.class, table::asMaps)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 490 Método: assertThat(exception.getMessage(), is(format("" + "Can't convert DataTable to Map<%s, %s>.\n" + "Encountered duplicate key 1 with values 4 and 5", typeName(String.class), typeName(String.class))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 503 Método: assertThrows(CucumberDataTableException.class, table::asMaps)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 506 Método: assertThat(exception.getMessage(), is(format("" + "Can't convert DataTable to Map<%s, %s>.\n" + "Encountered duplicate key null with values 1 and 2", typeName(String.class), typeName(String.class))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 522 Método: assertEquals(singletonList(expected), table.asMaps())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 529 Método: assertEquals(table.entries(), table.asMaps())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 542 Método: assertEquals(expected, table.asMap(String.class, Long.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 543 Método: assertEquals(expected, table.asMap((Type) String.class, (Type) Long.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 556 Método: assertEquals(expected, table.asMap())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 561 Método: assertEquals(createSimpleTable(), createSimpleTable())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 562 Método: assertEquals(createSimpleTable().hashCode(), createSimpleTable().hashCode())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 567 Método: assertEquals(createSimpleTable().transpose(), createSimpleTable().transpose())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 568 Método: assertEquals(createSimpleTable().transpose().hashCode(), createSimpleTable().transpose().hashCode())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 573 Método: assertNotEquals(createSimpleTable(), createSimpleNumberTable())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 574 Método: assertNotEquals(createSimpleTable().hashCode(), createSimpleNumberTable().hashCode())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 579 Método: assertNotEquals(createSimpleTable().transpose(), createSimpleNumberTable().transpose())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 580 Método: assertNotEquals(createSimpleTable().transpose().hashCode(), createSimpleNumberTable().transpose().hashCode())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 591 Método: assertEquals(expected, appendable.toString())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 602 Método: assertEquals(expected, appendable.toString())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableTest.java linha: 608 Método: assertSame(table, table.transpose().transpose())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/NoConverterDefinedTest.java linha: 17 Método: assertThrows(CucumberDataTableException.class, () -> converter.convert(table, DataTable.class, false))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/NoConverterDefinedTest.java linha: 22 Método: assertThrows(CucumberDataTableException.class, () -> converter.toList(table, Integer.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/NoConverterDefinedTest.java linha: 27 Método: assertThrows(CucumberDataTableException.class, () -> converter.toLists(table, Integer.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/NoConverterDefinedTest.java linha: 32 Método: assertThrows(CucumberDataTableException.class, () -> converter.toMap(table, String.class, Integer.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/NoConverterDefinedTest.java linha: 37 Método: assertThrows(CucumberDataTableException.class, () -> converter.toMaps(table, String.class, Integer.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableFormatterTest.java linha: 20 Método: assertEquals("| hello |\n", formatter.format(table))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableFormatterTest.java linha: 28 Método: assertEquals("| hello |\n", stringBuilder.toString())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableFormatterTest.java linha: 36 Método: assertEquals("| hello |\n", appendable.toString())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableFormatterTest.java linha: 45 Método: assertEquals("" + "| 1 | 1 | 1 |\n" + "| 4 | 5 | 6 |\n" + "| 7 | 8 | 9 |\n", formatter.format(table))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableFormatterTest.java linha: 55 Método: assertEquals("|  |\n", formatter.format(table))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableFormatterTest.java linha: 61 Método: assertEquals("| [empty] |\n", formatter.format(table))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableFormatterTest.java linha: 71 Método: assertEquals("" + "| \\| |\n" + "| \\\\ |\n" + "| \\n |\n", formatter.format(table))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableFormatterTest.java linha: 84 Método: assertEquals("    | Hello |\n", formatter.format(table))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableFormatterTest.java linha: 97 Método: assertEquals("" + "+ | 1 | 1 | 1 |\n" + "- | 4 | 5 | 6 |\n" + "  | 7 | 8 | 9 |\n", formatter.format(table))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/DataTableFormatterTest.java linha: 110 Método: assertEquals("| | |\n", formatter.format(table))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/NumberParserTest.java linha: 19 Método: assertEquals(1042.2f, english.parseFloat("1,042.2"), 0)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/NumberParserTest.java linha: 20 Método: assertEquals(1042.2f, german.parseFloat("1.042,2"), 0)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/NumberParserTest.java linha: 27 Método: assertEquals(1042.000000000000002, english.parseDouble("1,042.000000000000002"), 0)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/NumberParserTest.java linha: 28 Método: assertEquals(1042.000000000000002, german.parseDouble("1.042,000000000000002"), 0)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/NumberParserTest.java linha: 33 Método: assertEquals(new BigDecimal("1042.0000000000000000000002"), english.parseBigDecimal("1,042.0000000000000000000002"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/NumberParserTest.java linha: 35 Método: assertEquals(new BigDecimal("1042.0000000000000000000002"), german.parseBigDecimal("1.042,0000000000000000000002"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/TypeFactoryTest.java linha: 42 Método: assertThat(javaType.getTypeName(), is(Object.class.getTypeName()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/TypeFactoryTest.java linha: 48 Método: assertThat(javaType.getTypeName(), is(List.class.getTypeName()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/TypeFactoryTest.java linha: 54 Método: assertThat(javaType.getTypeName(), is(LIST_OF_OBJECT.getTypeName()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/TypeFactoryTest.java linha: 60 Método: assertThat(javaType.getTypeName(), is(LIST_OF_WILD_CARD_NUMBER.getTypeName()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/TypeFactoryTest.java linha: 66 Método: assertThat(javaType.getTypeName(), is(MAP_OF_OBJECT_OBJECT.getTypeName()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/TypeFactoryTest.java linha: 73 Método: assertThat(javaType, equalTo(other))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/TypeFactoryTest.java linha: 80 Método: assertThat(javaType, equalTo(other))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/TypeFactoryTest.java linha: 87 Método: assertThat(javaType, equalTo(other))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/TypeFactoryTest.java linha: 94 Método: assertThat(javaType, equalTo(other))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/TypeFactoryTest.java linha: 101 Método: assertThat(javaType, equalTo(other))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/TypeFactoryTest.java linha: 107 Método: assertThat(javaType.getClass(), equalTo(TypeFactory.MapType.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/TypeFactoryTest.java linha: 108 Método: assertThat(javaType.getOriginal(), is(MAP_OF_OBJECT_OBJECT))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/TypeFactoryTest.java linha: 114 Método: assertThat(javaType.getClass(), equalTo(TypeFactory.ListType.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/TypeFactoryTest.java linha: 115 Método: assertThat(javaType.getOriginal(), is(LIST_OF_LIST_OF_OBJECT))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/TypeFactoryTest.java linha: 119 Método: assertThat(elementType.getClass(), equalTo(TypeFactory.ListType.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/TypeFactoryTest.java linha: 120 Método: assertThat(elementType.getOriginal(), is(LIST_OF_OBJECT))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/TypeFactoryTest.java linha: 126 Método: assertThat(javaType.getClass(), equalTo(TypeFactory.OptionalType.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/TypeFactoryTest.java linha: 127 Método: assertThat(javaType.getOriginal(), is(OPTIONAL_NUMBER))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/TypeFactoryTest.java linha: 133 Método: assertThat(javaType.getClass(), equalTo(TypeFactory.Parameterized.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/TypeFactoryTest.java linha: 134 Método: assertThat(javaType.getOriginal(), is(SUPPLIER_NUMBER))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/TypeFactoryTest.java linha: 140 Método: assertThat(javaType.getClass(), equalTo(TypeFactory.OtherType.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/TypeFactoryTest.java linha: 141 Método: assertThat(javaType.getOriginal(), is(UNKNOWN_TYPE))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/TypeFactoryTest.java linha: 149 Método: assertThrows(InvalidDataTableTypeException.class, () -> TypeFactory.constructType(typeVariable))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/TypeFactoryTest.java linha: 153 Método: assertThat(exception.getMessage(), is("" + "Can't create a data table type for type java.util.List<java.util.List<T>>. " + "Type contained a type variable T. Types must explicit."))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/TypeFactoryTest.java linha: 162 Método: assertThat(javaType, equalTo(other))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/TypeFactoryTest.java linha: 165 Método: assertThat(elementType.getOriginal(), equalTo(Number.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/TypeFactoryTest.java linha: 173 Método: assertThat(elementType.getOriginal(), equalTo(Number.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/TypeFactoryTest.java linha: 180 Método: assertThat(javaType, equalTo(other))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/TypeFactoryTest.java linha: 183 Método: assertThat(elementType.getOriginal(), equalTo(Number.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/datatable/src/test/java/io/cucumber/datatable/TypeFactoryTest.java linha: 191 Método: assertThat(elementType.getOriginal(), equalTo(Number.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/integration/ScenarioScopedSteps.java linha: 40 Método: assertThat(scenarioScopedObject, notNullValue())
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/integration/ScenarioScopedSteps.java linha: 51 Método: assertThat("Expected test scenario to provide three objects.", OBJECTS.size(), equalTo(3))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/integration/ScenarioScopedSteps.java linha: 52 Método: assertThat(OBJECTS, elementsAreAllEqual())
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/integration/ScenarioScopedSteps.java linha: 63 Método: assertThat("Expected test scenario to provide two objects.", OBJECTS.size(), equalTo(2))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/integration/ScenarioScopedSteps.java linha: 64 Método: assertThat(OBJECTS, elementsAreAllUnique())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/integration/SingletonScopedSteps.java linha: 39 Método: assertThat(singletonObject, notNullValue())
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/integration/SingletonScopedSteps.java linha: 50 Método: assertThat("Expected test scenario to provide three objects.", OBJECTS.size(), equalTo(3))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/integration/SingletonScopedSteps.java linha: 51 Método: assertThat(OBJECTS, elementsAreAllEqual())
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/integration/SingletonScopedSteps.java linha: 62 Método: assertThat("Expected test scenario to provide two objects.", OBJECTS.size(), equalTo(2))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/integration/SingletonScopedSteps.java linha: 63 Método: assertThat(OBJECTS, elementsAreAllEqual())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/integration/UnScopedSteps.java linha: 36 Método: assertThat(unScopedObject, notNullValue())
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/integration/UnScopedSteps.java linha: 47 Método: assertThat("Expected test scenario to provide three objects.", OBJECTS.size(), equalTo(3))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/integration/UnScopedSteps.java linha: 48 Método: assertThat(OBJECTS, elementsAreAllUnique())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/GuiceBackendTest.java linha: 58 Método: assertThat(backend.getSnippet(), is(nullValue()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/GuiceBackendTest.java linha: 71 Método: assertThrows(NullPointerException.class, () -> backend.loadGlue(glue, null))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/GuiceBackendTest.java linha: 77 Método: assertThat(backendProviderService.create(factory, factory, classLoader), is(notNullValue()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/InjectorSourceFactoryTest.java linha: 24 Método: assertThat(injectorSourceFactory.create(), is(instanceOf(InjectorSource.class)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/InjectorSourceFactoryTest.java linha: 33 Método: assertThat(aClass, is(CustomInjectorSource.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/InjectorSourceFactoryTest.java linha: 41 Método: assertThrows(InjectorSourceInstantiationFailed.class, () -> InjectorSourceFactory.loadInjectorSourceFromProperties(properties))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/InjectorSourceFactoryTest.java linha: 44 Método: assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("Instantiation of 'some.bogus.Class' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor.")))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/InjectorSourceFactoryTest.java linha: 46 Método: assertThat("Unexpected exception cause class", actualThrown.getCause(), isA(ClassNotFoundException.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/InjectorSourceFactoryTest.java linha: 43 Método: assertAll(() -> assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("Instantiation of 'some.bogus.Class' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor."))), () -> assertThat("Unexpected exception cause class", actualThrown.getCause(), isA(ClassNotFoundException.class)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/InjectorSourceFactoryTest.java linha: 55 Método: assertThrows(InjectorSourceInstantiationFailed.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/InjectorSourceFactoryTest.java linha: 58 Método: assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("Instantiation of 'java.lang.String' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor.")))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/InjectorSourceFactoryTest.java linha: 60 Método: assertThat("Unexpected exception cause class", actualThrown.getCause(), isA(ClassCastException.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/InjectorSourceFactoryTest.java linha: 57 Método: assertAll(() -> assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("Instantiation of 'java.lang.String' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor."))), () -> assertThat("Unexpected exception cause class", actualThrown.getCause(), isA(ClassCastException.class)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/InjectorSourceFactoryTest.java linha: 69 Método: assertThrows(InjectorSourceInstantiationFailed.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/InjectorSourceFactoryTest.java linha: 72 Método: assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("Instantiation of 'io.cucumber.guice.InjectorSourceFactoryTest$PrivateConstructor' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor.")))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/InjectorSourceFactoryTest.java linha: 74 Método: assertThat("Unexpected exception cause class", actualThrown.getCause(), isA(NoSuchMethodException.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/InjectorSourceFactoryTest.java linha: 71 Método: assertAll(() -> assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("Instantiation of 'io.cucumber.guice.InjectorSourceFactoryTest$PrivateConstructor' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor."))), () -> assertThat("Unexpected exception cause class", actualThrown.getCause(), isA(NoSuchMethodException.class)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/InjectorSourceFactoryTest.java linha: 83 Método: assertThrows(InjectorSourceInstantiationFailed.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/InjectorSourceFactoryTest.java linha: 86 Método: assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("Instantiation of 'io.cucumber.guice.InjectorSourceFactoryTest$NoDefaultConstructor' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor.")))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/InjectorSourceFactoryTest.java linha: 88 Método: assertThat("Unexpected exception cause class", actualThrown.getCause(), isA(NoSuchMethodException.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/InjectorSourceFactoryTest.java linha: 85 Método: assertAll(() -> assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("Instantiation of 'io.cucumber.guice.InjectorSourceFactoryTest$NoDefaultConstructor' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor."))), () -> assertThat("Unexpected exception cause class", actualThrown.getCause(), isA(NoSuchMethodException.class)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/matcher/ElementsAreAllUniqueMatcherTest.java linha: 26 Método: assertAll(() -> assertDoesNotMatch(matcher, arg), () -> assertMismatchDescription("was null", matcher, arg))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/matcher/ElementsAreAllUniqueMatcherTest.java linha: 35 Método: assertAll(() -> assertDoesNotMatch(matcher, arg), () -> assertMismatchDescription("collection did not contain more than one element <[foo]>", matcher, arg))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/matcher/ElementsAreAllUniqueMatcherTest.java linha: 44 Método: assertAll(() -> assertDoesNotMatch(matcher, arg), () -> assertMismatchDescription("collection contained null element <[foo, null]>", matcher, arg))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/matcher/ElementsAreAllUniqueMatcherTest.java linha: 58 Método: assertAll(() -> assertDoesNotMatch(matcher, arg), () -> assertMismatchDescription("collection contained elements that are not unique <[foo, foo]>", matcher, arg))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/matcher/ElementsAreAllUniqueMatcherTest.java linha: 73 Método: assertAll(() -> assertDoesNotMatch(matcher, arg), () -> assertMismatchDescription("collection contained elements that are not unique <[foo, bar, foo]>", matcher, arg))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/matcher/ElementsAreAllUniqueMatcherTest.java linha: 83 Método: assertAll(() -> assertDoesNotMatch(matcher, arg), () -> assertMismatchDescription("collection contained elements that are not unique <[foo, foo, foo]>", matcher, arg))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/matcher/ElementsAreAllEqualMatcherTest.java linha: 26 Método: assertAll(() -> assertDoesNotMatch(matcher, arg), () -> assertMismatchDescription("was null", matcher, arg))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/matcher/ElementsAreAllEqualMatcherTest.java linha: 35 Método: assertAll(() -> assertDoesNotMatch(matcher, arg), () -> assertMismatchDescription("collection did not contain more than one element <[foo]>", matcher, arg))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/matcher/ElementsAreAllEqualMatcherTest.java linha: 44 Método: assertAll(() -> assertDoesNotMatch(matcher, arg), () -> assertMismatchDescription("collection contained null element <[null, null]>", matcher, arg))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/matcher/ElementsAreAllEqualMatcherTest.java linha: 58 Método: assertAll(() -> assertDoesNotMatch(matcher, arg), () -> assertMismatchDescription("collection contained elements that are not equal <[foo, bar]>", matcher, arg))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/matcher/ElementsAreAllEqualMatcherTest.java linha: 73 Método: assertAll(() -> assertDoesNotMatch(matcher, arg), () -> assertMismatchDescription("collection contained elements that are not equal <[foo, foo, bar]>", matcher, arg))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/matcher/ElementsAreAllEqualMatcherTest.java linha: 83 Método: assertAll(() -> assertDoesNotMatch(matcher, arg), () -> assertMismatchDescription("collection contained elements that are not equal <[foo, bar, baz]>", matcher, arg))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/matcher/AbstractMatcherTest.java linha: 15 Método: assertTrue(matcher.matches(arg), "Expected match, but mismatched because: '" + mismatchDescription(matcher, arg) + "'")
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/matcher/AbstractMatcherTest.java linha: 26 Método: assertFalse(c.matches(arg), "Unexpected match")
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/matcher/AbstractMatcherTest.java linha: 32 Método: Assertions.assertEquals(expected, description.toString().trim(), "Expected description")
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/matcher/AbstractMatcherTest.java linha: 36 Método: assertFalse(matcher.matches(arg), "Precondition: Matcher should not match item.")
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/matcher/AbstractMatcherTest.java linha: 37 Método: Assertions.assertEquals(expected, mismatchDescription(matcher, arg), "Expected mismatch description")
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/matcher/AbstractMatcherTest.java linha: 44 Método: fail("Matcher was not null safe")
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/matcher/AbstractMatcherTest.java linha: 52 Método: fail("Matcher was not unknown type safe")
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/matcher/ElementsAreAllEqualMatcher.java linha: 39 Método: fail("collection contained elements that are not equal", item, mismatchDescription)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/matcher/ElementsAreAllMatcher.java linha: 19 Método: fail("collection did not contain more than one element", item, mismatchDescription)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/matcher/ElementsAreAllMatcher.java linha: 31 Método: fail("collection contained null element", item, mismatchDescription)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/matcher/ElementsAreAllUniqueMatcher.java linha: 38 Método: fail("collection contained elements that are not unique", item, mismatchDescription)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/collection/CollectionUtilTest.java linha: 28 Método: assertThrows(NullPointerException.class, testMethod)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/collection/CollectionUtilTest.java linha: 29 Método: assertThat(expectedThrown.getMessage(), is(equalTo("List must not be null.")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/collection/CollectionUtilTest.java linha: 35 Método: assertThrows(IllegalArgumentException.class, testMethod)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/collection/CollectionUtilTest.java linha: 36 Método: assertThat(expectedThrown.getMessage(), is(equalTo("List must contain at least one element.")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/collection/CollectionUtilTest.java linha: 48 Método: assertThat(list.size(), equalTo(1))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/collection/CollectionUtilTest.java linha: 49 Método: assertThat(list.get(0), equalTo(element))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/collection/CollectionUtilTest.java linha: 47 Método: assertAll(() -> assertThat(list.size(), equalTo(1)), () -> assertThat(list.get(0), equalTo(element)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/GuiceFactoryTest.java linha: 68 Método: assertThat(factory, notNullValue())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/GuiceFactoryTest.java linha: 74 Método: assertThat(factory, notNullValue())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/GuiceFactoryTest.java linha: 82 Método: assertThrows(ConfigurationException.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/GuiceFactoryTest.java linha: 83 Método: assertThat("Unexpected exception message", actualThrown.getMessage(), startsWith("Guice configuration errors:\n" + "\n" + "1) [Guice/MissingImplementation]: No implementation for ScenarioScope was bound."))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/GuiceFactoryTest.java linha: 93 Método: assertThat(instancesFromSameScenario, ElementsAreAllUniqueMatcher.elementsAreAllUnique())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/GuiceFactoryTest.java linha: 116 Método: assertThat(instancesFromDifferentScenarios, ElementsAreAllUniqueMatcher.elementsAreAllUnique())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/GuiceFactoryTest.java linha: 143 Método: assertThat(instancesFromSameScenario, ElementsAreAllEqualMatcher.elementsAreAllEqual())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/GuiceFactoryTest.java linha: 151 Método: assertThat(instancesFromDifferentScenarios, ElementsAreAllUniqueMatcher.elementsAreAllUnique())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/GuiceFactoryTest.java linha: 158 Método: assertThat(instancesFromSameScenario, ElementsAreAllEqualMatcher.elementsAreAllEqual())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/GuiceFactoryTest.java linha: 166 Método: assertThat(instancesFromDifferentScenarios, ElementsAreAllEqualMatcher.elementsAreAllEqual())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/GuiceFactoryTest.java linha: 173 Método: assertThat(instancesFromSameScenario, ElementsAreAllEqualMatcher.elementsAreAllEqual())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/GuiceFactoryTest.java linha: 181 Método: assertThat(instancesFromDifferentScenarios, ElementsAreAllUniqueMatcher.elementsAreAllUnique())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/GuiceFactoryTest.java linha: 188 Método: assertThat(instancesFromSameScenario, ElementsAreAllEqualMatcher.elementsAreAllEqual())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/GuiceFactoryTest.java linha: 196 Método: assertThat(instancesFromDifferentScenarios, ElementsAreAllEqualMatcher.elementsAreAllEqual())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/GuiceFactoryTest.java linha: 209 Método: assertThat(instancesFromDifferentScenarios, ElementsAreAllUniqueMatcher.elementsAreAllUnique())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/GuiceFactoryTest.java linha: 221 Método: assertTrue(factory.addClass(YourInjectorSource.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/GuiceFactoryTest.java linha: 227 Método: assertTrue(factory.addClass(YourInjectorSource.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/GuiceFactoryTest.java linha: 228 Método: assertTrue(factory.addClass(YourInjectorSource.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/GuiceFactoryTest.java linha: 234 Método: assertTrue(factory.addClass(YourInjectorSource.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/GuiceFactoryTest.java linha: 237 Método: assertThrows(CucumberBackendException.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-guice/src/test/java/io/cucumber/guice/GuiceFactoryTest.java linha: 247 Método: assertThat("Unexpected exception message", actualThrown.getMessage(), is(exceptionMessage))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-jakarta-openejb/src/test/java/io/cucumber/jakarta/openejb/OpenEJBObjectFactoryTest.java linha: 29 Método: assertThat(o1, is(notNullValue()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-jakarta-openejb/src/test/java/io/cucumber/jakarta/openejb/OpenEJBObjectFactoryTest.java linha: 30 Método: assertThat(o1, is(not(equalTo(o2))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-jakarta-openejb/src/test/java/io/cucumber/jakarta/openejb/OpenEJBObjectFactoryTest.java linha: 31 Método: assertThat(o2, is(not(equalTo(o1))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-jakarta-openejb/src/test/java/io/cucumber/jakarta/openejb/BellyStepDefinitions.java linha: 21 Método: assertEquals(n, belly.getCukes())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/compatibility/src/test/java/io/cucumber/compatibility/minimal/Minimal.java linha: 11 Método: assertEquals(42, cukeCount)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/compatibility/src/test/java/io/cucumber/compatibility/CompatibilityTest.java linha: 81 Método: assertThat(actualEnvelopes, hasEntry(is(messageType), containsInRelativeOrder(aComparableMessage(expectedMessages))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/compatibility/src/test/java/io/cucumber/compatibility/parametertypes/ParameterTypes.java linha: 12 Método: assertEquals("LHR", flight.from)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/compatibility/src/test/java/io/cucumber/compatibility/parametertypes/ParameterTypes.java linha: 13 Método: assertEquals("CDG", flight.to)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/compatibility/src/test/java/io/cucumber/compatibility/parametertypes/ParameterTypes.java linha: 14 Método: assertEquals(45, delay)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/compatibility/src/test/java/io/cucumber/compatibility/examplestables/ExamplesTable.java linha: 25 Método: assertEquals(expectedCount, this.count)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/compatibility/src/test/java/io/cucumber/compatibility/datatables/DataTables.java linha: 20 Método: assertEquals(expected, toTranspose.transpose())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/PickleRunnerWithNoStepDescriptionsTest.java linha: 44 Método: assertThat(runner.getDescription().getDisplayName(), is(equalTo("scenario name(feature name)")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/PickleRunnerWithNoStepDescriptionsTest.java linha: 65 Método: assertThat(runner.getDescription().getDisplayName(), is(equalTo("scenario_name(feature_name)")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/PickleRunnerWithNoStepDescriptionsTest.java linha: 87 Método: assertThat(runner.getDescription().getDisplayName(), is(equalTo("____________(___________)")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/InvokeMethodsAroundEventsTest.java linha: 47 Método: assertThat(events, contains("BeforeClass", "TestRunStarted", "BeforeAll", "TestSourceRead", "TestCaseStarted", "Before", "Step", "Step", "Step", "After", "TestCaseFinished", "TestCaseStarted", "Before", "Step", "Step", "Step", "After", "TestCaseFinished", "TestSourceRead", "TestCaseStarted", "Before", "Step", "Step", "Step", "After", "TestCaseFinished", "AfterAll", "TestRunFinished", "AfterClass"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/JUnitCucumberOptionsProviderTest.java linha: 24 Método: assertNull(options.objectFactory())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/JUnitCucumberOptionsProviderTest.java linha: 31 Método: assertNotNull(options.objectFactory())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/JUnitCucumberOptionsProviderTest.java linha: 32 Método: assertEquals(TestObjectFactory.class, options.objectFactory())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/UndefinedStepExceptionTest.java linha: 17 Método: assertThat(exception.getMessage(), is("This step is undefined"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/UndefinedStepExceptionTest.java linha: 27 Método: assertThat(exception.getMessage(), is("" + "The step 'some step' is undefined.\n" + "You can implement this step using the snippet(s) below:\n" + "\n" + "some snippet\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/UndefinedStepExceptionTest.java linha: 41 Método: assertThat(exception.getMessage(), is("" + "The step 'some step' is undefined.\n" + "You can implement this step using the snippet(s) below:\n" + "\n" + "some snippet\n" + "some other snippet\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/UndefinedStepExceptionTest.java linha: 57 Método: assertThat(exception.getMessage(), is("" + "The step 'some step' and 1 other step(s) are undefined.\n" + "You can implement these steps using the snippet(s) below:\n" + "\n" + "some snippet\n" + "some other snippet\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/UndefinedStepExceptionTest.java linha: 73 Método: assertThat(exception.getMessage(), is("" + "The step 'some step' and 1 other step(s) are undefined.\n" + "You can implement these steps using the snippet(s) below:\n" + "\n" + "some snippet\n" + "some other snippet\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/UndefinedStepExceptionTest.java linha: 90 Método: assertThat(exception.getMessage(), is("" + "The step 'some step' and 2 other step(s) are undefined.\n" + "You can implement these steps using the snippet(s) below:\n" + "\n" + "some snippet\n" + "some other snippet\n" + "yet another snippet\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/CucumberTest.java linha: 56 Método: assertThat(cucumber.getChildren().size(), is(equalTo(7)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/CucumberTest.java linha: 57 Método: assertThat(cucumber.getChildren().get(1).getDescription().getDisplayName(), is(equalTo("Feature A")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/CucumberTest.java linha: 63 Método: assertThat(cucumber.getChildren().size(), is(equalTo(7)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/CucumberTest.java linha: 64 Método: assertThat(cucumber.getChildren().get(1).getDescription().getDisplayName(), is(equalTo("Feature A")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/CucumberTest.java linha: 70 Método: assertThrows(FeatureParserException.class, testMethod)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/CucumberTest.java linha: 71 Método: assertThat(actualThrown.getMessage(), equalTo("" + "Failed to parse resource at: classpath:io/cucumber/error/lexer_error.feature\n" + "(1:1): expected: #EOF, #Language, #TagLine, #FeatureLine, #Comment, #Empty, got 'Feature  FA'\n" + "(3:3): expected: #EOF, #Language, #TagLine, #FeatureLine, #Comment, #Empty, got 'Scenario SA'\n" + "(4:5): expected: #EOF, #Language, #TagLine, #FeatureLine, #Comment, #Empty, got 'Given GA'\n" + "(5:5): expected: #EOF, #Language, #TagLine, #FeatureLine, #Comment, #Empty, got 'When GA'\n" + "(6:5): expected: #EOF, #Language, #TagLine, #FeatureLine, #Comment, #Empty, got 'Then TA'"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/CucumberTest.java linha: 84 Método: assertThrows(FeatureParserException.class, () -> new Cucumber(FormatterWithLexerErrorFeature.class))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/CucumberTest.java linha: 86 Método: assertFalse(new File("target/lexor_error_feature.ndjson").exists(), "File is created despite Lexor Error")
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/CucumberTest.java linha: 95 Método: assertThat(children, is(equalTo(emptyList())))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/CucumberTest.java linha: 166 Método: assertThat(description.getDisplayName(), is("io.cucumber.junit.CucumberTest$ValidEmpty"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/CucumberTest.java linha: 168 Método: assertThat(feature.getDisplayName(), is("Feature A"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/CucumberTest.java linha: 170 Método: assertThat(pickle.getDisplayName(), is("A good start(Feature A)"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/CucumberTest.java linha: 182 Método: assertThrows(CucumberException.class, testMethod)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/CucumberTest.java linha: 183 Método: assertThat(expectedThrown.getMessage(), is(equalTo("\n\nClasses annotated with @RunWith(Cucumber.class) must not define any\nStep Definition or Hook methods. Their sole purpose is to serve as\nan entry point for JUnit. Step Definitions and Hooks should be defined\nin their own classes. This allows them to be reused across features.\nOffending class: class io.cucumber.junit.CucumberTest$Invalid\n")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/AssertionsTest.java linha: 21 Método: assertThrows(CucumberException.class, testMethod)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/AssertionsTest.java linha: 22 Método: assertThat(expectedThrown.getMessage(), is(equalTo("\n\n" + "Classes annotated with @RunWith(Cucumber.class) must not define any\n" + "Step Definition or Hook methods. Their sole purpose is to serve as\n" + "an entry point for JUnit. Step Definitions and Hooks should be defined\n" + "in their own classes. This allows them to be reused across features.\n" + "Offending class: class io.cucumber.junit.AssertionsTest$WithCucumberMethod\n")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/PickleRunnerWithStepDescriptionsTest.java linha: 57 Método: assertEquals(stepOccurrence1.getText(), stepOccurrence2.getText())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/PickleRunnerWithStepDescriptionsTest.java linha: 65 Método: assertNotEquals(stepDescription1, stepDescription2)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/PickleRunnerWithStepDescriptionsTest.java linha: 93 Método: assertNotEquals(stepDescription1, stepDescription2)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/PickleRunnerWithStepDescriptionsTest.java linha: 118 Método: assertEquals("first", stepDescription.getClassName())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/PickleRunnerWithStepDescriptionsTest.java linha: 119 Método: assertEquals("step", stepDescription.getMethodName())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/PickleRunnerWithStepDescriptionsTest.java linha: 120 Método: assertEquals("step(first)", stepDescription.getDisplayName())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/PickleRunnerWithStepDescriptionsTest.java linha: 137 Método: assertEquals("scenario name", runner.getDescription().getDisplayName())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/PickleRunnerWithStepDescriptionsTest.java linha: 153 Método: assertEquals("it works", runner.getDescription().getChildren().get(0).getMethodName())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/PickleRunnerWithStepDescriptionsTest.java linha: 169 Método: assertEquals("scenario_name", runner.getDescription().getDisplayName())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/PickleRunnerWithStepDescriptionsTest.java linha: 170 Método: assertEquals("scenario_name", runner.getDescription().getChildren().get(0).getClassName())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/PickleRunnerWithStepDescriptionsTest.java linha: 171 Método: assertEquals("it_works", runner.getDescription().getChildren().get(0).getMethodName())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/JUnitReporterWithStepNotificationsTest.java linha: 158 Método: assertThat(stepFailure.getDescription(), is(equalTo(pickleRunner.describeChild(step))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/JUnitReporterWithStepNotificationsTest.java linha: 159 Método: assertThat(stepFailure.getException(), instanceOf(SkippedThrowable.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/JUnitReporterWithStepNotificationsTest.java linha: 160 Método: assertThat(stepFailure.getException().getMessage(), is(equalTo("This step is skipped")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/JUnitReporterWithStepNotificationsTest.java linha: 166 Método: assertThat(pickleFailure.getDescription(), is(equalTo(pickleRunner.getDescription())))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/JUnitReporterWithStepNotificationsTest.java linha: 167 Método: assertThat(pickleFailure.getException(), instanceOf(SkippedThrowable.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/JUnitReporterWithStepNotificationsTest.java linha: 168 Método: assertThat(pickleFailure.getException().getMessage(), is(equalTo("This scenario is skipped")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/JUnitReporterWithStepNotificationsTest.java linha: 186 Método: assertThat(stepFailure.getDescription(), is(equalTo(pickleRunner.describeChild(step))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/JUnitReporterWithStepNotificationsTest.java linha: 187 Método: assertThat(stepFailure.getException(), is(equalTo(exception)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/JUnitReporterWithStepNotificationsTest.java linha: 195 Método: assertThat(pickleFailure.getDescription(), is(equalTo(pickleRunner.getDescription())))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/JUnitReporterWithStepNotificationsTest.java linha: 196 Método: assertThat(pickleFailure.getException(), is(equalTo(exception)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/JUnitReporterWithStepNotificationsTest.java linha: 213 Método: assertThat(stepFailure.getDescription(), is(equalTo(pickleRunner.describeChild(step))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/JUnitReporterWithStepNotificationsTest.java linha: 214 Método: assertThat(stepFailure.getException(), is(equalTo(exception)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/JUnitReporterWithStepNotificationsTest.java linha: 222 Método: assertThat(pickleFailure.getDescription(), is(equalTo(pickleRunner.getDescription())))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/JUnitReporterWithStepNotificationsTest.java linha: 223 Método: assertThat(pickleFailure.getException(), is(equalTo(exception)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/JUnitReporterWithStepNotificationsTest.java linha: 243 Método: assertThat(stepFailure.getDescription(), is(equalTo(pickleRunner.describeChild(step))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/JUnitReporterWithStepNotificationsTest.java linha: 244 Método: assertThat(stepFailure.getException(), is(equalTo(exception)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/JUnitReporterWithStepNotificationsTest.java linha: 252 Método: assertThat(pickleFailure.getDescription(), is(equalTo(pickleRunner.getDescription())))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/JUnitReporterWithStepNotificationsTest.java linha: 253 Método: assertThat(pickleFailure.getException().getMessage(), is("" + "The step 'step name' is undefined.\n" + "You can implement this step using the snippet(s) below:\n" + "\n" + "some snippet\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/JUnitReporterWithStepNotificationsTest.java linha: 274 Método: assertThat(stepFailure.getDescription(), is(equalTo(pickleRunner.describeChild(step))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/JUnitReporterWithStepNotificationsTest.java linha: 275 Método: assertThat(stepFailure.getException(), is(equalTo(exception)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/JUnitReporterWithStepNotificationsTest.java linha: 283 Método: assertThat(pickleFailure.getDescription(), is(equalTo(pickleRunner.getDescription())))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/JUnitReporterWithStepNotificationsTest.java linha: 284 Método: assertThat(pickleFailure.getException(), is(equalTo(exception)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/JUnitReporterWithStepNotificationsTest.java linha: 312 Método: assertThat(pickleFailure.getDescription(), is(equalTo(pickleRunner.getDescription())))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/JUnitReporterWithStepNotificationsTest.java linha: 313 Método: assertThat(pickleFailure.getException(), is(equalTo(exception)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/JUnitReporterWithStepNotificationsTest.java linha: 334 Método: assertThat(stepFailure.get(0).getDescription(), is(equalTo(pickleRunner.describeChild(step))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/JUnitReporterWithStepNotificationsTest.java linha: 335 Método: assertThat(stepFailure.get(0).getException(), is(equalTo(failures.get(0))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/JUnitReporterWithStepNotificationsTest.java linha: 337 Método: assertThat(stepFailure.get(1).getDescription(), is(equalTo(pickleRunner.describeChild(step))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/JUnitReporterWithStepNotificationsTest.java linha: 338 Método: assertThat(stepFailure.get(1).getException(), is(equalTo(failures.get(1))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/JUnitReporterWithStepNotificationsTest.java linha: 349 Método: assertThat(pickleFailure.get(4).getDescription(), is(equalTo(pickleRunner.getDescription())))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/JUnitReporterWithStepNotificationsTest.java linha: 350 Método: assertThat(pickleFailure.get(4).getException(), is(equalTo(failures.get(0))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/JUnitReporterWithStepNotificationsTest.java linha: 352 Método: assertThat(pickleFailure.get(5).getDescription(), is(equalTo(pickleRunner.getDescription())))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/JUnitReporterWithStepNotificationsTest.java linha: 353 Método: assertThat(pickleFailure.get(5).getException(), is(equalTo(failures.get(1))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/FeatureRunnerTest.java linha: 45 Método: assertTrue(descriptions.contains(description))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/FeatureRunnerTest.java linha: 54 Método: assertTrue(descriptions.add(description))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/FeatureRunnerTest.java linha: 84 Método: assertTrue(scenarioA.getChildren().isEmpty())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/FeatureRunnerTest.java linha: 86 Método: assertTrue(scenarioB.getChildren().isEmpty())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/FeatureRunnerTest.java linha: 88 Método: assertTrue(scenarioC0.getChildren().isEmpty())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/FeatureRunnerTest.java linha: 90 Método: assertTrue(scenarioC1.getChildren().isEmpty())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/FeatureRunnerTest.java linha: 92 Método: assertTrue(scenarioC2.getChildren().isEmpty())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/FeatureRunnerTest.java linha: 245 Método: assertThat(scenarioA.getChildren().size(), is(equalTo(2)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/FeatureRunnerTest.java linha: 247 Método: assertThat(scenarioB.getChildren().size(), is(equalTo(2)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/FeatureRunnerTest.java linha: 249 Método: assertThat(scenarioC0.getChildren().size(), is(equalTo(2)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/FeatureRunnerTest.java linha: 251 Método: assertThat(scenarioC1.getChildren().size(), is(equalTo(2)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/FeatureRunnerTest.java linha: 253 Método: assertThat(scenarioC2.getChildren().size(), is(equalTo(2)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/FeatureRunnerTest.java linha: 383 Método: assertThat(failureArgumentCaptor.getValue().getException(), is(equalTo(illegalStateException)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/FeatureRunnerTest.java linha: 384 Método: assertThat(failureArgumentCaptor.getValue().getDescription(), is(equalTo(description)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/FeatureRunnerTest.java linha: 414 Método: assertThat(featureRunner.getChildren().size(), is(1))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-junit/src/test/java/io/cucumber/junit/FeatureRunnerTest.java linha: 415 Método: assertThat(featureRunner.getChildren().get(0).getDescription().getDisplayName(), is("scenario_2 name(feature name)"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-deltaspike/src/test/java/io/cucumber/deltaspike/DeltaSpikeObjectFactoryTest.java linha: 27 Método: assertNotNull(o1)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-deltaspike/src/test/java/io/cucumber/deltaspike/DeltaSpikeObjectFactoryTest.java linha: 28 Método: assertNotSame(o1, o2)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-deltaspike/src/test/java/io/cucumber/deltaspike/BellyStepDefinitions.java linha: 32 Método: assertEquals(n, belly.getCukes())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-deltaspike/src/test/java/io/cucumber/deltaspike/BellyStepDefinitions.java linha: 33 Método: assertTrue(inTheBelly)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java8/src/test/java/io/cucumber/java8/AnonInnerClassStepDefinitions.java linha: 15 Método: assertEquals(42, cukes.intValue())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java8/src/test/java/io/cucumber/java8/AnonInnerClassStepDefinitions.java linha: 16 Método: assertEquals("belly", what)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java8/src/test/java/io/cucumber/java8/Java8AnonInnerClassStepDefinitionTest.java linha: 16 Método: assertThat(java8StepDefinition.parameterInfos().size(), is(equalTo(1)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java8/src/test/java/io/cucumber/java8/Java8AnonInnerClassStepDefinitionTest.java linha: 31 Método: assertThat(java8StepDefinition.parameterInfos().size(), is(equalTo(2)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java8/src/test/java/io/cucumber/java8/LambdaGlueTest.java linha: 129 Método: assertThat(hook.getTagExpression(), is(tagExpression))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java8/src/test/java/io/cucumber/java8/LambdaGlueTest.java linha: 130 Método: assertThat(hook.getOrder(), is(beforeOrder))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java8/src/test/java/io/cucumber/java8/LambdaGlueTest.java linha: 132 Método: assertTrue(invoked.get())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java8/src/test/java/io/cucumber/java8/Java8SnippetTest.java linha: 33 Método: assertThat(getSnippet(feature), is(equalTo(expected)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java8/src/test/java/io/cucumber/java8/Java8SnippetTest.java linha: 63 Método: assertThat(getSnippet(feature), is(equalTo(expected)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java8/src/test/java/io/cucumber/java8/Java8LambdaStepDefinitionMarksCorrectStackElementTest.java linha: 30 Método: assertThrows(CucumberInvocationTargetException.class, () -> stepDefinition.execute(new Object[0]))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java8/src/test/java/io/cucumber/java8/Java8LambdaStepDefinitionMarksCorrectStackElementTest.java linha: 32 Método: assertThat(exception.getInvocationTargetExceptionCause(), new CustomTypeSafeMatcher<Throwable>("exception with matching stack trace") {

    @Override
    protected boolean matchesSafely(Throwable item) {
        return Arrays.stream(item.getStackTrace()).filter(stepDefinition::isDefinedAt).findFirst().filter(stackTraceElement -> SomeLambdaStepDefs.class.getName().equals(stackTraceElement.getClassName())).isPresent();
    }
})
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java8/src/test/java/io/cucumber/java8/Java8LambdaStepDefinitionTest.java linha: 22 Método: assertThat(stepDefinition.parameterInfos().size(), is(equalTo(1)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java8/src/test/java/io/cucumber/java8/Java8LambdaStepDefinitionTest.java linha: 30 Método: assertThat(stepDefinition.parameterInfos().size(), is(equalTo(2)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java8/src/test/java/io/cucumber/java8/Java8LambdaStepDefinitionTest.java linha: 39 Método: assertThat(stepDefinition.parameterInfos().get(0).getType(), isA((Object.class)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java8/src/test/java/io/cucumber/java8/Java8LambdaStepDefinitionTest.java linha: 49 Método: assertThrows(CucumberBackendException.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java8/src/test/java/io/cucumber/java8/Java8LambdaStepDefinitionTest.java linha: 50 Método: assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("Can't use java.util.List in lambda step definition \"some step\". " + "Declare a DataTable or DocString argument instead and convert " + "manually with 'asList/asLists/asMap/asMaps' and 'convert' respectively")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java8/src/test/java/io/cucumber/java8/Java8LambdaStepDefinitionTest.java linha: 63 Método: assertThrows(CucumberBackendException.class, testMethod)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java8/src/test/java/io/cucumber/java8/Java8LambdaStepDefinitionTest.java linha: 64 Método: assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("Can't use java.util.List in lambda step definition \"some step\". " + "Declare a DataTable or DocString argument instead and convert " + "manually with 'asList/asLists/asMap/asMaps' and 'convert' respectively")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java8/src/test/java/io/cucumber/java8/LambdaStepDefinitions.java linha: 120 Método: assertEquals(42, cuckes.intValue())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java8/src/test/java/io/cucumber/java8/LambdaStepDefinitions.java linha: 124 Método: assertEquals(42, cuckes)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java8/src/test/java/io/cucumber/java8/LambdaStepDefinitions.java linha: 128 Método: assertEquals(42, cuckes.intValue())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java8/src/test/java/io/cucumber/java8/LambdaStepDefinitions.java linha: 148 Método: assertEquals("42", number)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java8/src/test/java/io/cucumber/java8/LambdaStepDefinitions.java linha: 152 Método: assertEquals("42", this.number)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java8/src/test/java/io/cucumber/java8/LambdaStepDefinitions.java linha: 153 Método: assertEquals("314", number)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-testng/src/test/java/io/cucumber/testng/TestNGCucumberOptionsProviderTest.java linha: 24 Método: assertNull(options.objectFactory())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-testng/src/test/java/io/cucumber/testng/TestNGCucumberOptionsProviderTest.java linha: 31 Método: assertNotNull(options.objectFactory())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-testng/src/test/java/io/cucumber/testng/TestNGCucumberOptionsProviderTest.java linha: 32 Método: assertEquals(TestObjectFactory.class, options.objectFactory())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-testng/src/test/java/io/cucumber/testng/UndefinedStepExceptionTest.java linha: 17 Método: assertThat(exception.getMessage(), is("This step is undefined"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-testng/src/test/java/io/cucumber/testng/UndefinedStepExceptionTest.java linha: 27 Método: assertThat(exception.getMessage(), is("" + "The step 'some step' is undefined.\n" + "You can implement this step using the snippet(s) below:\n" + "\n" + "some snippet\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-testng/src/test/java/io/cucumber/testng/UndefinedStepExceptionTest.java linha: 41 Método: assertThat(exception.getMessage(), is("" + "The step 'some step' is undefined.\n" + "You can implement this step using the snippet(s) below:\n" + "\n" + "some snippet\n" + "some other snippet\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-testng/src/test/java/io/cucumber/testng/UndefinedStepExceptionTest.java linha: 57 Método: assertThat(exception.getMessage(), is("" + "The step 'some step' and 1 other step(s) are undefined.\n" + "You can implement these steps using the snippet(s) below:\n" + "\n" + "some snippet\n" + "some other snippet\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-testng/src/test/java/io/cucumber/testng/UndefinedStepExceptionTest.java linha: 73 Método: assertThat(exception.getMessage(), is("" + "The step 'some step' and 1 other step(s) are undefined.\n" + "You can implement these steps using the snippet(s) below:\n" + "\n" + "some snippet\n" + "some other snippet\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-testng/src/test/java/io/cucumber/testng/UndefinedStepExceptionTest.java linha: 90 Método: assertThat(exception.getMessage(), is("" + "The step 'some step' and 2 other step(s) are undefined.\n" + "You can implement these steps using the snippet(s) below:\n" + "\n" + "some snippet\n" + "some other snippet\n" + "yet another snippet\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-testng/src/test/java/io/cucumber/testng/TestCaseResultObserverTest.java linha: 82 Método: assertEquals(exception.getCause(), error)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-testng/src/test/java/io/cucumber/testng/TestCaseResultObserverTest.java linha: 96 Método: assertEquals(exception.getCause(), error)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-testng/src/test/java/io/cucumber/testng/TestCaseResultObserverTest.java linha: 113 Método: assertThat(exception.getCause(), instanceOf(SkipException.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-testng/src/test/java/io/cucumber/testng/TestCaseResultObserverTest.java linha: 115 Método: assertThat(skipException.isSkip(), is(false))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-testng/src/test/java/io/cucumber/testng/TestCaseResultObserverTest.java linha: 116 Método: assertThat(skipException.getMessage(), is("" + "The step 'some step' is undefined.\n" + "You can implement this step using the snippet(s) below:\n" + "\n" + "stub snippet\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-testng/src/test/java/io/cucumber/testng/TestCaseResultObserverTest.java linha: 137 Método: assertThat(exception.getCause(), instanceOf(SkipException.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-testng/src/test/java/io/cucumber/testng/TestCaseResultObserverTest.java linha: 139 Método: assertThat(skipException.isSkip(), is(false))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-testng/src/test/java/io/cucumber/testng/TestCaseResultObserverTest.java linha: 140 Método: assertThat(skipException.getMessage(), is("" + "The step 'some step' is undefined.\n" + "You can implement this step using the snippet(s) below:\n" + "\n" + "stub snippet\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-testng/src/test/java/io/cucumber/testng/TestCaseResultObserverTest.java linha: 170 Método: assertThat(exception.getCause(), is(error))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-testng/src/test/java/io/cucumber/testng/TestCaseResultObserverTest.java linha: 186 Método: assertEquals(exception.getCause(), error)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-testng/src/test/java/io/cucumber/testng/TestCaseResultObserverTest.java linha: 200 Método: assertThat(exception.getCause(), instanceOf(SkipException.class))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-testng/src/test/java/io/cucumber/testng/AbstractTestNGCucumberTestsTest.java linha: 38 Método: assertTrue(listener.getInvokedTestMethods().stream().filter(IInvokedMethod::isConfigurationMethod).map(IInvokedMethod::getTestMethod).map(ITestNGMethod::getMethodName).anyMatch("setUpClass"::equals), "setUpClass() must be invoked")
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-testng/src/test/java/io/cucumber/testng/AbstractTestNGCucumberTestsTest.java linha: 48 Método: assertTrue(listener.getInvokedTestMethods().stream().filter(IInvokedMethod::isConfigurationMethod).map(IInvokedMethod::getTestMethod).map(ITestNGMethod::getMethodName).anyMatch("tearDownClass"::equals), "tearDownClass() must be invoked")
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-testng/src/test/java/io/cucumber/testng/AbstractTestNGCucumberTestsTest.java linha: 64 Método: assertEquals(frequency(invokedTestMethodNames, "runScenario"), 3, "runScenario() must be invoked three times")
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-testng/src/test/java/io/cucumber/testng/AbstractTestNGCucumberTestsTest.java linha: 79 Método: assertEquals(scenarioNames, asList("\"SC1\"", "\"SC2\"", "\"SC3\""))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-testng/src/test/java/io/cucumber/testng/AbstractTestNGCucumberTestsTest.java linha: 93 Método: assertEquals(frequency(featureNames, "\"A feature containing 3 scenarios\""), 3)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-testng/src/test/java/io/cucumber/testng/TestNGCucumberRunnerTest.java linha: 48 Método: assertEquals(scenarios.length, 1)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-testng/src/test/java/io/cucumber/testng/TestNGCucumberRunnerTest.java linha: 52 Método: assertThrows(UndefinedStepException.class, () -> testNGCucumberRunner.runScenario(wrapper.getPickle()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-testng/src/test/java/io/cucumber/testng/TestNGCucumberRunnerTest.java linha: 63 Método: assertEquals(e.getMessage(), "Failed to parse resource at: classpath:io/cucumber/error/parse-error.feature\n" + "(1:1): expected: #EOF, #Language, #TagLine, #FeatureLine, #Comment, #Empty, got 'Invalid syntax'")
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-testng/src/test/java/io/cucumber/testng/TestNGCucumberRunnerTest.java linha: 61 Método: Assert.fail("CucumberException not thrown")
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-testng/src/test/java/io/cucumber/testng/TestNGCucumberRunnerTest.java linha: 77 Método: assertEquals(1, events.stream().map(Object::getClass).filter(TestRunStarted.class::isAssignableFrom).count())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-testng/src/test/java/io/cucumber/testng/TestNGCucumberRunnerTest.java linha: 80 Método: assertEquals(1, events.stream().map(Object::getClass).filter(TestRunFinished.class::isAssignableFrom).count())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-testng/src/test/java/io/cucumber/testng/TestNGCucumberRunnerTest.java linha: 96 Método: assertEquals(1, events.stream().map(Object::getClass).filter(TestRunStarted.class::isAssignableFrom).count())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-testng/src/test/java/io/cucumber/testng/TestNGCucumberRunnerTest.java linha: 99 Método: assertEquals(1, events.stream().map(Object::getClass).filter(TestRunFinished.class::isAssignableFrom).count())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-openejb/src/test/java/io/cucumber/openejb/OpenEJBObjectFactoryTest.java linha: 29 Método: assertThat(o1, is(notNullValue()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-openejb/src/test/java/io/cucumber/openejb/OpenEJBObjectFactoryTest.java linha: 30 Método: assertThat(o1, is(not(equalTo(o2))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-openejb/src/test/java/io/cucumber/openejb/OpenEJBObjectFactoryTest.java linha: 31 Método: assertThat(o2, is(not(equalTo(o1))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-openejb/src/test/java/io/cucumber/openejb/BellyStepDefinitions.java linha: 22 Método: assertEquals(n, belly.getCukes())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/metaconfig/dirties/DirtiesContextBellyMetaStepDefinitions.java linha: 24 Método: assertEquals(n, belly.getCukes())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/metaconfig/dirties/DirtiesContextBellyMetaStepDefinitions.java linha: 29 Método: assertEquals(0, belly.getCukes())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/metaconfig/dirties/DirtiesContextBellyMetaStepDefinitions.java linha: 35 Método: assertEquals(0, bellyBean.getCukes())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/metaconfig/dirties/DirtiesContextBellyMetaStepDefinitions.java linha: 41 Método: assertEquals(n, bellyBean.getCukes())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/metaconfig/general/BellyMetaStepDefinitions.java linha: 27 Método: assertNotNull(belly)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/metaconfig/general/BellyMetaStepDefinitions.java linha: 32 Método: assertNotNull(bellyBean)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/threading/ThreadingStepDefinitions.java linha: 45 Método: assertNotSame(entries.getValue(), this)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/threading/ThreadingStepDefinitions.java linha: 43 Método: assertSame(entries.getValue(), this)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/threading/ThreadingStepDefinitions.java linha: 48 Método: assertEquals(concurrency, map.size())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/threading/RunParallelCucumberTest.java linha: 38 Método: assertThat(result.get(), is((byte) 0x0))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/Issue1970.java linha: 32 Método: assertNotEquals(response, response2)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 66 Método: assertThat(o1, is(notNullValue()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 67 Método: assertThat(o2, is(notNullValue()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 68 Método: assertThat(o1, is(not(equalTo(o2))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 69 Método: assertThat(o2, is(not(equalTo(o1))))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 65 Método: assertAll(() -> assertThat(o1, is(notNullValue())), () -> assertThat(o2, is(notNullValue())), () -> assertThat(o1, is(not(equalTo(o2)))), () -> assertThat(o2, is(not(equalTo(o1)))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 78 Método: assertTrue(CucumberTestContext.getInstance().getId().isEmpty())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 84 Método: assertTrue(CucumberTestContext.getInstance().getId().isEmpty())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 88 Método: assertTrue(CucumberTestContext.getInstance().getId().isEmpty())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 90 Método: assertEquals(testContextId1.get() + 1, testContextId2.get())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 110 Método: assertThat(o1, is(notNullValue()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 111 Método: assertThat(o2, is(notNullValue()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 112 Método: assertThat(o1, is(equalTo(o1)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 113 Método: assertThat(o2, is(equalTo(o2)))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 109 Método: assertAll(() -> assertThat(o1, is(notNullValue())), () -> assertThat(o2, is(notNullValue())), () -> assertThat(o1, is(equalTo(o1))), () -> assertThat(o2, is(equalTo(o2))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 133 Método: assertThat(o1, is(notNullValue()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 134 Método: assertThat(o2, is(notNullValue()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 135 Método: assertThat(o1, is(equalTo(o1)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 136 Método: assertThat(o2, is(equalTo(o2)))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 132 Método: assertAll(() -> assertThat(o1, is(notNullValue())), () -> assertThat(o2, is(notNullValue())), () -> assertThat(o1, is(equalTo(o1))), () -> assertThat(o2, is(equalTo(o2))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 152 Método: assertThat(o1.getThirdStepDef(), is(notNullValue()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 153 Método: assertThat(o2, is(notNullValue()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 154 Método: assertThat(o1.getThirdStepDef(), is(equalTo(o2)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 155 Método: assertThat(o2, is(equalTo(o1.getThirdStepDef())))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 151 Método: assertAll(() -> assertThat(o1.getThirdStepDef(), is(notNullValue())), () -> assertThat(o2, is(notNullValue())), () -> assertThat(o1.getThirdStepDef(), is(equalTo(o2))), () -> assertThat(o2, is(equalTo(o1.getThirdStepDef()))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 171 Método: assertThat(o1.getThirdStepDef(), is(notNullValue()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 172 Método: assertThat(o3.getThirdStepDef(), is(notNullValue()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 173 Método: assertThat(o1.getThirdStepDef(), is(equalTo(o3.getThirdStepDef())))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 174 Método: assertThat(o3.getThirdStepDef(), is(equalTo(o1.getThirdStepDef())))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 170 Método: assertAll(() -> assertThat(o1.getThirdStepDef(), is(notNullValue())), () -> assertThat(o3.getThirdStepDef(), is(notNullValue())), () -> assertThat(o1.getThirdStepDef(), is(equalTo(o3.getThirdStepDef()))), () -> assertThat(o3.getThirdStepDef(), is(equalTo(o1.getThirdStepDef()))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 185 Método: assertThat(stepdef, is(notNullValue()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 186 Método: assertTrue(stepdef.isAutowired())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 197 Método: assertThat(stepdef, is(notNullValue()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 198 Método: assertTrue(stepdef.isAutowired())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 218 Método: assertThat(o1, is(notNullValue()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 219 Método: assertThat(o2, is(notNullValue()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 220 Método: assertThat(o1, is(not(equalTo(o2))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 221 Método: assertThat(o2, is(not(equalTo(o1))))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 217 Método: assertAll(() -> assertThat(o1, is(notNullValue())), () -> assertThat(o2, is(notNullValue())), () -> assertThat(o1, is(not(equalTo(o2)))), () -> assertThat(o2, is(not(equalTo(o1)))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 241 Método: assertThat(o1, is(notNullValue()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 242 Método: assertThat(o2, is(notNullValue()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 243 Método: assertThat(o1, is(not(equalTo(o2))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 244 Método: assertThat(o2, is(not(equalTo(o1))))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 240 Método: assertAll(() -> assertThat(o1, is(notNullValue())), () -> assertThat(o2, is(notNullValue())), () -> assertThat(o1, is(not(equalTo(o2)))), () -> assertThat(o2, is(not(equalTo(o1)))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 255 Método: assertThat(stepdef.getProperty(), is(equalTo("property value")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 264 Método: assertThrows(CucumberBackendException.class, testMethod)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 265 Método: assertThat(actualThrown.getMessage(), startsWith("Glue class class io.cucumber.spring.contextconfig.BellyStepDefinitions and class io.cucumber.spring.SpringFactoryTest$WithSpringAnnotations are both (meta-)annotated with @CucumberContextConfiguration.\n" + "Please ensure only one class configures the spring context"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 276 Método: assertThrows(CucumberBackendException.class, testMethod)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 277 Método: assertThat(actualThrown.getMessage(), is(equalTo("Glue class io.cucumber.spring.componentannotation.WithComponentAnnotation was (meta-)annotated with @Component; marking it as a candidate for auto-detection by Spring. Glue classes are detected and registered by Cucumber. Auto-detection of glue classes by spring may lead to duplicate bean definitions. Please remove the @Component (meta-)annotation")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 286 Método: assertThrows(CucumberBackendException.class, testMethod)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 287 Método: assertThat(actualThrown.getMessage(), is(equalTo("Glue class io.cucumber.spring.componentannotation.WithControllerAnnotation was (meta-)annotated with @Component; marking it as a candidate for auto-detection by Spring. Glue classes are detected and registered by Cucumber. Auto-detection of glue classes by spring may lead to duplicate bean definitions. Please remove the @Component (meta-)annotation")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 309 Método: assertThat(glueInstance1, is(not(glueInstance2)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 310 Método: assertThat(glueInstance2, is(not(glueInstance1)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 311 Método: assertThat(bellyInstance1, is(bellyInstance2))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 312 Método: assertThat(bellyInstance2, is(bellyInstance1))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 308 Método: assertAll(() -> assertThat(glueInstance1, is(not(glueInstance2))), () -> assertThat(glueInstance2, is(not(glueInstance1))), () -> assertThat(bellyInstance1, is(bellyInstance2)), () -> assertThat(bellyInstance2, is(bellyInstance1)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 325 Método: assertDoesNotThrow(belly::getInstanceId)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 326 Método: assertThrows(BeanCreationException.class, glue::getInstanceId)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 334 Método: assertThrows(IllegalStateException.class, factory::start)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 335 Método: assertThat(exception.getMessage(), containsString("DelegatingSmartContextLoader was unable to detect defaults"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 337 Método: assertDoesNotThrow(factory::stop)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 345 Método: assertThrows(IllegalStateException.class, factory::start)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 346 Método: assertThat(exception.getMessage(), containsString("Failed to load ApplicationContext"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 347 Método: assertDoesNotThrow(factory::stop)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 355 Método: assertThrows(CucumberBackendException.class, factory::start)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 356 Método: assertDoesNotThrow(factory::stop)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 364 Método: assertDoesNotThrow(factory::start)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/SpringFactoryTest.java linha: 372 Método: assertDoesNotThrow(factory::start)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/dirtiescontextconfig/DirtiesContextBellyStepDefinitions.java linha: 27 Método: assertEquals(n, belly.getCukes())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/dirtiescontextconfig/DirtiesContextBellyStepDefinitions.java linha: 32 Método: assertEquals(0, belly.getCukes())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/dirtiescontextconfig/DirtiesContextBellyStepDefinitions.java linha: 38 Método: assertEquals(0, bellyBean.getCukes())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/dirtiescontextconfig/DirtiesContextBellyStepDefinitions.java linha: 44 Método: assertEquals(n, bellyBean.getCukes())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/TestTestContextAdaptorTest.java linha: 73 Método: assertThrows(CucumberBackendException.class, adaptor::start)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/TestTestContextAdaptorTest.java linha: 89 Método: assertThrows(CucumberBackendException.class, adaptor::start)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/TestTestContextAdaptorTest.java linha: 105 Método: assertThrows(CucumberBackendException.class, adaptor::start)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/TestTestContextAdaptorTest.java linha: 124 Método: assertThrows(CucumberBackendException.class, adaptor::start)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/TestTestContextAdaptorTest.java linha: 150 Método: assertThrows(CucumberBackendException.class, adaptor::stop)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/TestTestContextAdaptorTest.java linha: 171 Método: assertThrows(CucumberBackendException.class, adaptor::stop)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/TestTestContextAdaptorTest.java linha: 192 Método: assertThrows(CucumberBackendException.class, adaptor::stop)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/TestTestContextAdaptorTest.java linha: 205 Método: assertDoesNotThrow(adaptor::start)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/TestTestContextAdaptorTest.java linha: 206 Método: assertNotNull(manager.getTestContext().getTestInstance())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/TestTestContextAdaptorTest.java linha: 207 Método: assertSame(manager.getTestContext().getTestInstance(), adaptor.getInstance(testClass))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/TestTestContextAdaptorTest.java linha: 208 Método: assertEquals(1, adaptor.getInstance(testClass).autowiredCount())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/TestTestContextAdaptorTest.java linha: 209 Método: assertEquals(1, adaptor.getInstance(testClass).postProcessedCount())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/TestTestContextAdaptorTest.java linha: 210 Método: assertNotNull(adaptor.getInstance(testClass).getBelly())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/TestTestContextAdaptorTest.java linha: 211 Método: assertNotNull(adaptor.getInstance(testClass).getDummyComponent())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/TestTestContextAdaptorTest.java linha: 212 Método: assertDoesNotThrow(adaptor::stop)
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/TestTestContextAdaptorTest.java linha: 204 Método: assertAll(() -> assertDoesNotThrow(adaptor::start), () -> assertNotNull(manager.getTestContext().getTestInstance()), () -> assertSame(manager.getTestContext().getTestInstance(), adaptor.getInstance(testClass)), () -> assertEquals(1, adaptor.getInstance(testClass).autowiredCount()), () -> assertEquals(1, adaptor.getInstance(testClass).postProcessedCount()), () -> assertNotNull(adaptor.getInstance(testClass).getBelly()), () -> assertNotNull(adaptor.getInstance(testClass).getDummyComponent()), () -> assertDoesNotThrow(adaptor::stop))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/contextcaching/SharedContextTest.java linha: 22 Método: assertThat(contextCounter.getContextCount(), is(1))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/contextcaching/ContextCachingSteps.java linha: 26 Método: assertThat(contextCounter.getContextCount(), is(1))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/annotationconfig/AnnotationContextConfigurationDefinitions.java linha: 16 Método: assertNotNull(context)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/contextconfig/BellyStepDefinitions.java linha: 28 Método: assertNotNull(belly)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/contextconfig/BellyStepDefinitions.java linha: 33 Método: assertNotNull(bellyBean)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/commonglue/ThirdStepDef.java linha: 13 Método: assertEquals(arg1, cucumbers)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-spring/src/test/java/io/cucumber/spring/commonglue/AnotherStepDef.java linha: 15 Método: assertEquals(arg1, oneStepDef.cucumbers)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-jakarta-cdi/src/test/java/io/cucumber/jakarta/cdi/example/BellyStepDefinitions.java linha: 28 Método: assertEquals(n, belly.getCukes())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-jakarta-cdi/src/test/java/io/cucumber/jakarta/cdi/CdiJakartaFactoryTest.java linha: 32 Método: assertDoesNotThrow(factory::stop)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-jakarta-cdi/src/test/java/io/cucumber/jakarta/cdi/CdiJakartaFactoryTest.java linha: 34 Método: assertDoesNotThrow(factory::start)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-jakarta-cdi/src/test/java/io/cucumber/jakarta/cdi/CdiJakartaFactoryTest.java linha: 36 Método: assertDoesNotThrow(factory::stop)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-jakarta-cdi/src/test/java/io/cucumber/jakarta/cdi/CdiJakartaFactoryTest.java linha: 53 Método: assertThat(a1, is(equalTo(a2)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-jakarta-cdi/src/test/java/io/cucumber/jakarta/cdi/CdiJakartaFactoryTest.java linha: 64 Método: assertThat(a1, is(notNullValue()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-jakarta-cdi/src/test/java/io/cucumber/jakarta/cdi/CdiJakartaFactoryTest.java linha: 65 Método: assertThat(a1, is(not(equalTo(b1))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-jakarta-cdi/src/test/java/io/cucumber/jakarta/cdi/CdiJakartaFactoryTest.java linha: 66 Método: assertThat(b1, is(not(equalTo(a1))))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-jakarta-cdi/src/test/java/io/cucumber/jakarta/cdi/CdiJakartaFactoryTest.java linha: 63 Método: assertAll(() -> assertThat(a1, is(notNullValue())), () -> assertThat(a1, is(not(equalTo(b1)))), () -> assertThat(b1, is(not(equalTo(a1)))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-jakarta-cdi/src/test/java/io/cucumber/jakarta/cdi/CdiJakartaFactoryTest.java linha: 83 Método: assertThat(bean.getClass(), not(is(ApplicationScopedBean.class)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-jakarta-cdi/src/test/java/io/cucumber/jakarta/cdi/CdiJakartaFactoryTest.java linha: 84 Método: assertThat(bean.getClass().getSuperclass(), is(ApplicationScopedBean.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-jakarta-cdi/src/test/java/io/cucumber/jakarta/cdi/CdiJakartaFactoryTest.java linha: 81 Método: assertAll(() -> assertThat(bean.getClass(), not(is(ApplicationScopedBean.class))), () -> assertThat(bean.getClass().getSuperclass(), is(ApplicationScopedBean.class)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-jakarta-cdi/src/test/java/io/cucumber/jakarta/cdi/CdiJakartaFactoryTest.java linha: 98 Método: assertThat(bean.getClass(), is(UnmanagedBean.class))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-jakarta-cdi/src/test/java/io/cucumber/jakarta/cdi/CdiJakartaFactoryTest.java linha: 121 Método: assertThat(stepDefinitions.injected, is(notNullValue()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-gherkin-messages/src/test/java/io/cucumber/core/gherkin/messages/FeatureParserTest.java linha: 40 Método: assertTrue(feature.isPresent())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-gherkin-messages/src/test/java/io/cucumber/core/gherkin/messages/FeatureParserTest.java linha: 41 Método: assertEquals(0, feature.get().getPickles().size())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-gherkin-messages/src/test/java/io/cucumber/core/gherkin/messages/FeatureParserTest.java linha: 49 Método: assertTrue(feature.isPresent())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-gherkin-messages/src/test/java/io/cucumber/core/gherkin/messages/FeatureParserTest.java linha: 50 Método: assertEquals(0, feature.get().getPickles().size())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-gherkin-messages/src/test/java/io/cucumber/core/gherkin/messages/FeatureParserTest.java linha: 59 Método: assertFalse(feature.isPresent())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-gherkin-messages/src/test/java/io/cucumber/core/gherkin/messages/FeatureParserTest.java linha: 69 Método: assertEquals(Optional.empty(), feature.getName())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-gherkin-messages/src/test/java/io/cucumber/core/gherkin/messages/FeatureParserTest.java linha: 71 Método: assertEquals(Optional.empty(), rule.getName())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-gherkin-messages/src/test/java/io/cucumber/core/gherkin/messages/FeatureParserTest.java linha: 72 Método: assertEquals(Optional.of("Rule"), rule.getKeyword())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-gherkin-messages/src/test/java/io/cucumber/core/gherkin/messages/FeatureParserTest.java linha: 75 Método: assertEquals(Optional.empty(), scenario.getName())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-gherkin-messages/src/test/java/io/cucumber/core/gherkin/messages/FeatureParserTest.java linha: 76 Método: assertEquals(Optional.of("Scenario"), scenario.getKeyword())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-gherkin-messages/src/test/java/io/cucumber/core/gherkin/messages/FeatureParserTest.java linha: 78 Método: assertEquals(Optional.empty(), scenarioOutline.getName())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-gherkin-messages/src/test/java/io/cucumber/core/gherkin/messages/FeatureParserTest.java linha: 79 Método: assertEquals(Optional.of("Scenario Outline"), scenarioOutline.getKeyword())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-gherkin-messages/src/test/java/io/cucumber/core/gherkin/messages/FeatureParserTest.java linha: 81 Método: assertEquals(Optional.empty(), examples.getName())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-gherkin-messages/src/test/java/io/cucumber/core/gherkin/messages/FeatureParserTest.java linha: 82 Método: assertEquals(Optional.of("Examples"), examples.getKeyword())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-gherkin-messages/src/test/java/io/cucumber/core/gherkin/messages/FeatureParserTest.java linha: 86 Método: assertEquals(Optional.of("Example #1.1"), example.getName())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-gherkin-messages/src/test/java/io/cucumber/core/gherkin/messages/FeatureParserTest.java linha: 87 Método: assertEquals(Optional.empty(), example.getKeyword())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-gherkin-messages/src/test/java/io/cucumber/core/gherkin/messages/FeatureParserTest.java linha: 99 Método: assertEquals(5, argument.getLine())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-gherkin-messages/src/test/java/io/cucumber/core/gherkin/messages/FeatureParserTest.java linha: 113 Método: assertNull(((DocStringArgument) steps.get(0).getArgument()).getContentType())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-gherkin-messages/src/test/java/io/cucumber/core/gherkin/messages/FeatureParserTest.java linha: 114 Método: assertEquals("text/plain", ((DocStringArgument) steps.get(1).getArgument()).getContentType())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-gherkin-messages/src/test/java/io/cucumber/core/gherkin/messages/FeatureParserTest.java linha: 112 Método: assertAll(() -> {
    assertNull(((DocStringArgument) steps.get(0).getArgument()).getContentType());
    assertEquals("text/plain", ((DocStringArgument) steps.get(1).getArgument()).getContentType());
})
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-gherkin-messages/src/test/java/io/cucumber/core/gherkin/messages/FeatureParserTest.java linha: 126 Método: assertEquals(3, steps.size())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-gherkin-messages/src/test/java/io/cucumber/core/gherkin/messages/FeatureParserTest.java linha: 134 Método: assertThrows(FeatureParserException.class, () -> parser.parse(uri, source, UUID::randomUUID))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-gherkin-messages/src/test/java/io/cucumber/core/gherkin/messages/FeatureParserTest.java linha: 136 Método: assertEquals("" + "Failed to parse resource at: classpath:com/example.feature\n" + "(1:1): expected: #EOF, #Language, #TagLine, #FeatureLine, #Comment, #Empty, got 'Feature  FA'\n" + "(3:3): expected: #EOF, #Language, #TagLine, #FeatureLine, #Comment, #Empty, got 'Scenario SA'\n" + "(4:5): expected: #EOF, #Language, #TagLine, #FeatureLine, #Comment, #Empty, got 'Given GA'\n" + "(5:5): expected: #EOF, #Language, #TagLine, #FeatureLine, #Comment, #Empty, got 'When GA'\n" + "(6:5): expected: #EOF, #Language, #TagLine, #FeatureLine, #Comment, #Empty, got 'Then TA'", exception.getMessage())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-gherkin/src/test/java/io/cucumber/core/gherkin/FeatureParserTest.java linha: 44 Método: assertEquals(path, receivedPath.get())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-gherkin/src/test/java/io/cucumber/core/gherkin/FeatureParserTest.java linha: 45 Método: assertEquals(source, recievedSource.get())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-gherkin/src/test/java/io/cucumber/core/gherkin/FeatureParserTest.java linha: 46 Método: assertEquals(idGenerator, recievedIdGenerator.get())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/GlueAdaptorTest.java linha: 152 Método: assertThat(stepDefinitions, containsInAnyOrder(aStep, repeated))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/GlueAdaptorTest.java linha: 153 Método: assertThat(defaultDataTableCellTransformer, notNullValue())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/GlueAdaptorTest.java linha: 154 Método: assertThat(defaultDataTableEntryTransformer, notNullValue())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/GlueAdaptorTest.java linha: 155 Método: assertThat(defaultParameterTransformer, notNullValue())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/GlueAdaptorTest.java linha: 156 Método: assertThat(dataTableTypeDefinition, notNullValue())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/GlueAdaptorTest.java linha: 157 Método: assertThat(parameterTypeDefinition.parameterType().getRegexps(), is(singletonList("pattern")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/GlueAdaptorTest.java linha: 158 Método: assertThat(parameterTypeDefinition.parameterType().getName(), is("name"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/GlueAdaptorTest.java linha: 159 Método: assertThat(parameterTypeDefinition.parameterType().preferForRegexpMatch(), is(true))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/GlueAdaptorTest.java linha: 160 Método: assertThat(parameterTypeDefinition.parameterType().useForSnippets(), is(true))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/GlueAdaptorTest.java linha: 161 Método: assertThat(parameterTypeDefinition.parameterType().useRegexpMatchAsStrongTypeHint(), is(false))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/GlueAdaptorTest.java linha: 162 Método: assertThat(afterStepHook, notNullValue())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/GlueAdaptorTest.java linha: 163 Método: assertThat(beforeStepHook, notNullValue())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/GlueAdaptorTest.java linha: 164 Método: assertThat(afterHook, notNullValue())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/GlueAdaptorTest.java linha: 165 Método: assertThat(beforeHook, notNullValue())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/GlueAdaptorTest.java linha: 166 Método: assertThat(beforeAllHook, notNullValue())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/GlueAdaptorTest.java linha: 167 Método: assertThat(afterAllHook, notNullValue())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/GlueAdaptorTest.java linha: 168 Método: assertThat(docStringTypeDefinition, notNullValue())
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/GlueAdaptorTest.java linha: 151 Método: assertAll(() -> assertThat(stepDefinitions, containsInAnyOrder(aStep, repeated)), () -> assertThat(defaultDataTableCellTransformer, notNullValue()), () -> assertThat(defaultDataTableEntryTransformer, notNullValue()), () -> assertThat(defaultParameterTransformer, notNullValue()), () -> assertThat(dataTableTypeDefinition, notNullValue()), () -> assertThat(parameterTypeDefinition.parameterType().getRegexps(), is(singletonList("pattern"))), () -> assertThat(parameterTypeDefinition.parameterType().getName(), is("name")), () -> assertThat(parameterTypeDefinition.parameterType().preferForRegexpMatch(), is(true)), () -> assertThat(parameterTypeDefinition.parameterType().useForSnippets(), is(true)), () -> assertThat(parameterTypeDefinition.parameterType().useRegexpMatchAsStrongTypeHint(), is(false)), () -> assertThat(afterStepHook, notNullValue()), () -> assertThat(beforeStepHook, notNullValue()), () -> assertThat(afterHook, notNullValue()), () -> assertThat(beforeHook, notNullValue()), () -> assertThat(beforeAllHook, notNullValue()), () -> assertThat(afterAllHook, notNullValue()), () -> assertThat(docStringTypeDefinition, notNullValue()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/MethodScannerTest.java linha: 35 Método: assertThat(scanResult, contains(new SimpleEntry<>(method, method.getAnnotations()[0])))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/MethodScannerTest.java linha: 41 Método: assertThat(scanResult, empty())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/MethodScannerTest.java linha: 47 Método: assertThat(scanResult, empty())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/MethodScannerTest.java linha: 52 Método: assertThrows(InvalidMethodException.class, () -> MethodScanner.scan(ExtendedSteps.class, backend))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/MethodScannerTest.java linha: 54 Método: assertThat(exception.getMessage(), is("You're not allowed to extend classes that define Step Definitions or hooks. " + "class io.cucumber.java.MethodScannerTest$ExtendedSteps extends class io.cucumber.java.MethodScannerTest$BaseSteps"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/annotation/DataTableSteps.java linha: 36 Método: assertTrue(authors.contains(expectedAuthor))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/annotation/DataTableSteps.java linha: 41 Método: assertTrue(authors.contains(expectedAuthor))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/annotation/DataTableSteps.java linha: 46 Método: assertEquals(expectedAuthor, author)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/annotation/DataTableSteps.java linha: 51 Método: assertEquals(expectedAuthor, author)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/annotation/DataTableSteps.java linha: 56 Método: assertTrue(persons.contains(expectedPerson))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/annotation/DataTableSteps.java linha: 57 Método: assertTrue(persons.contains(mononymousPerson))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/annotation/ParameterTypeSteps.java linha: 21 Método: assertEquals(expected, date)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/annotation/FrenchSteps.java linha: 14 Método: assertThat(arg0, is(new BigDecimal("5.5")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/annotation/FrenchSteps.java linha: 19 Método: assertThat(arg0, is(5))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/annotation/ScenarioSteps.java linha: 32 Método: assertEquals(this.scenarioName, scenarioName)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/annotation/SubstitutionSteps.java linha: 42 Método: assertEquals(expected, body)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaHookDefinitionTest.java linha: 44 Método: assertTrue(invoked)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaHookDefinitionTest.java linha: 57 Método: assertTrue(invoked)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaHookDefinitionTest.java linha: 68 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaHookDefinition(method, "", 0, lookup))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaHookDefinitionTest.java linha: 71 Método: assertThat(exception.getMessage(), startsWith("" + "A method annotated with Before, After, BeforeStep or AfterStep must have one of these signatures:\n" + " * public void before_or_after(io.cucumber.java.Scenario scenario)\n" + " * public void before_or_after()\n" + "at io.cucumber.java.JavaHookDefinitionTest.invalid_parameter(java.lang.String"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaHookDefinitionTest.java linha: 85 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaHookDefinition(method, "", 0, lookup))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaHookDefinitionTest.java linha: 97 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaHookDefinition(method, "", 0, lookup))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaHookDefinitionTest.java linha: 109 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaHookDefinition(method, "", 0, lookup))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaHookDefinitionTest.java linha: 112 Método: assertThat(exception.getMessage(), startsWith("" + "A method annotated with Before, After, BeforeStep or AfterStep must have one of these signatures:\n" + " * public void before_or_after(io.cucumber.java.Scenario scenario)\n" + " * public void before_or_after()\n" + "at io.cucumber.java.JavaHookDefinitionTest.string_return_type()\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaBackendTest.java linha: 69 Método: assertThrows(InvalidMethodException.class, testMethod)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaBackendTest.java linha: 70 Método: assertThat(expectedThrown.getMessage(), is(equalTo("You're not allowed to extend classes that define Step Definitions or hooks. class io.cucumber.java.incorrectlysubclassedsteps.SubclassesSteps extends class io.cucumber.java.steps.Steps")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaBackendTest.java linha: 83 Método: assertThat(patterns, equalTo(asList("test", "test again")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/AbstractGlueDefinitionTest.java linha: 29 Método: assertThat(definition.getLocation(), startsWith("io.cucumber.java.AbstractGlueDefinitionTest.method()"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaStaticHookDefinitionTest.java linha: 38 Método: assertTrue(invoked)
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaStaticHookDefinitionTest.java linha: 49 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaStaticHookDefinition(method, 0, lookup))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaStaticHookDefinitionTest.java linha: 52 Método: assertThat(exception.getMessage(), startsWith("" + "A method annotated with BeforeAll or AfterAll must have one of these signatures:\n" + " * public static void before_or_after_all()\n" + "at io.cucumber.java.JavaStaticHookDefinitionTest.single_argument(io.cucumber.java.Scenario)\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaStaticHookDefinitionTest.java linha: 66 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaStaticHookDefinition(method, 0, lookup))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaStaticHookDefinitionTest.java linha: 69 Método: assertThat(exception.getMessage(), startsWith("" + "A method annotated with BeforeAll or AfterAll must have one of these signatures:\n" + " * public static void before_or_after_all()\n" + "at io.cucumber.java.JavaStaticHookDefinitionTest.string_return_type()\n"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaStepDefinitionTest.java linha: 34 Método: assertThat(argument, is("one_string_argument"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaStepDefinitionTest.java linha: 45 Método: assertThrows(CucumberInvocationTargetException.class, () -> definition.execute(new Object[0]))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaStepDefinitionTest.java linha: 52 Método: assertThat(stackTraceElement.getMethodName(), is("method_throws"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaStepDefinitionTest.java linha: 53 Método: assertThat(stackTraceElement.getClassName(), is(JavaStepDefinitionTest.class.getName()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaStepDefinitionTest.java linha: 51 Método: assertAll(() -> assertThat(stackTraceElement.getMethodName(), is("method_throws")), () -> assertThat(stackTraceElement.getClassName(), is(JavaStepDefinitionTest.class.getName())))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDefaultDataTableCellTransformerDefinitionTest.java linha: 33 Método: assertThat(transformed, is("transform_string_to_type=something"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDefaultDataTableCellTransformerDefinitionTest.java linha: 43 Método: assertThat(transformed, is("transform_string_to_type="))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDefaultDataTableCellTransformerDefinitionTest.java linha: 53 Método: assertThat(transformed, is("transform_string_to_type=null"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDefaultDataTableCellTransformerDefinitionTest.java linha: 67 Método: assertThat(transformed, is("transform_object_to_type"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDefaultDataTableCellTransformerDefinitionTest.java linha: 78 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaDefaultDataTableCellTransformerDefinition(method, lookup, new String[0]))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDefaultDataTableCellTransformerDefinitionTest.java linha: 80 Método: assertThat(exception.getMessage(), startsWith("" + "A @DefaultDataTableCellTransformer annotated method must have one of these signatures:\n" + " * public Object defaultDataTableCell(String fromValue, Type toValueType)\n" + " * public Object defaultDataTableCell(Object fromValue, Type toValueType)\n" + "at io.cucumber.java.JavaDefaultDataTableCellTransformerDefinitionTest.transforms_string_to_void(java.lang.String,java.lang.reflect.Type)"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDefaultDataTableCellTransformerDefinitionTest.java linha: 93 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaDefaultDataTableCellTransformerDefinition(oneArg, lookup, new String[0]))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDefaultDataTableCellTransformerDefinitionTest.java linha: 97 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaDefaultDataTableCellTransformerDefinition(threeArg, lookup, new String[0]))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDefaultDataTableCellTransformerDefinitionTest.java linha: 113 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaDefaultDataTableCellTransformerDefinition(threeArg, lookup, new String[0]))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDefaultDataTableCellTransformerDefinitionTest.java linha: 125 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaDefaultDataTableCellTransformerDefinition(threeArg, lookup, new String[0]))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDefaultDataTableEntryTransformerDefinitionTest.java linha: 42 Método: assertThat(definition.tableEntryByTypeTransformer().transform(fromValue, String.class, cellTransformer), is("key=value"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDefaultDataTableEntryTransformerDefinitionTest.java linha: 55 Método: assertThat(definition.tableEntryByTypeTransformer().transform(fromValue, String.class, cellTransformer), is("key="))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDefaultDataTableEntryTransformerDefinitionTest.java linha: 68 Método: assertThat(definition.tableEntryByTypeTransformer().transform(fromValue, String.class, cellTransformer), is("key=null"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDefaultDataTableEntryTransformerDefinitionTest.java linha: 83 Método: assertThrows(IllegalArgumentException.class, () -> definition.tableEntryByTypeTransformer().transform(fromValue, String.class, cellTransformer))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDefaultDataTableEntryTransformerDefinitionTest.java linha: 87 Método: assertThat(exception.getMessage(), is("After replacing [empty] and [blank] with empty strings the datatable entry contains duplicate keys: {[empty]=a, [blank]=b}"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDefaultDataTableEntryTransformerDefinitionTest.java linha: 108 Método: assertThat(definition.tableEntryByTypeTransformer().transform(fromValue, String.class, cellTransformer), is("key=value"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDefaultDataTableEntryTransformerDefinitionTest.java linha: 122 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaDefaultDataTableEntryTransformerDefinition(toFew, lookup))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDefaultDataTableEntryTransformerDefinitionTest.java linha: 126 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaDefaultDataTableEntryTransformerDefinition(toMany, lookup))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDefaultDataTableEntryTransformerDefinitionTest.java linha: 142 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaDefaultDataTableEntryTransformerDefinition(method, lookup))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDefaultDataTableEntryTransformerDefinitionTest.java linha: 153 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaDefaultDataTableEntryTransformerDefinition(method, lookup))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDefaultDataTableEntryTransformerDefinitionTest.java linha: 157 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaDefaultDataTableEntryTransformerDefinition(method2, lookup))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDefaultDataTableEntryTransformerDefinitionTest.java linha: 161 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaDefaultDataTableEntryTransformerDefinition(method3, lookup))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDefaultDataTableEntryTransformerDefinitionTest.java linha: 181 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaDefaultDataTableEntryTransformerDefinition(method, lookup))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDefaultDataTableEntryTransformerDefinitionTest.java linha: 193 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaDefaultDataTableEntryTransformerDefinition(method, lookup))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDocStringTypeDefinitionTest.java linha: 42 Método: assertThat(converter.convert(docString, Object.class), is("some_desired_string"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDocStringTypeDefinitionTest.java linha: 50 Método: assertThat(converter.convert(DocString.create("some doc string"), Object.class), is("some_desired_string"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDocStringTypeDefinitionTest.java linha: 61 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaDocStringTypeDefinition("", noArgs, lookup))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDocStringTypeDefinitionTest.java linha: 64 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaDocStringTypeDefinition("", twoArgs, lookup))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDocStringTypeDefinitionTest.java linha: 78 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaDocStringTypeDefinition("", method, lookup))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDocStringTypeDefinitionTest.java linha: 81 Método: assertThat(exception.getMessage(), startsWith("" + "A @DocStringType annotated method must have one of these signatures:\n" + " * public JsonNode json(String content)\n" + "at io.cucumber.java.JavaDocStringTypeDefinitionTest.converts_object_to_string(java.lang.Object)"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDocStringTypeDefinitionTest.java linha: 98 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaDocStringTypeDefinition("", voidMethod, lookup))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDocStringTypeDefinitionTest.java linha: 100 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaDocStringTypeDefinition("", voidObjectMethod, lookup))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDocStringTypeDefinitionTest.java linha: 97 Método: assertAll(() -> assertThrows(InvalidMethodSignatureException.class, () -> new JavaDocStringTypeDefinition("", voidMethod, lookup)), () -> assertThrows(InvalidMethodSignatureException.class, () -> new JavaDocStringTypeDefinition("", voidObjectMethod, lookup)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDocStringTypeDefinitionTest.java linha: 126 Método: assertThat(converter.convert(docString, simpleType), hasEntry("some_simple_type", Collections.emptyMap()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDocStringTypeDefinitionTest.java linha: 129 Método: assertThat(converter.convert(docString, complexType), hasEntry("some_complex_type", Collections.emptyMap()))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaSnippetTest.java linha: 33 Método: assertThat(snippetFor("I have 4 cukes in my \"big\" belly"), is(equalTo(expected)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaSnippetTest.java linha: 69 Método: assertThat(snippetFor("I have 4.2 cukes in my large belly", customParameterType), is(equalTo(expected)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaSnippetTest.java linha: 88 Método: assertThat(snippetFor("I have 4.2 cukes in my tiny belly", customParameterType), is(equalTo(expected)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaSnippetTest.java linha: 107 Método: assertThat(snippetFor("4.2 medium", customParameterType), is(equalTo(expected)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaSnippetTest.java linha: 136 Método: assertThat(snippetFor("I have large and small bellies", customParameterType), is(equalTo(expected)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaSnippetTest.java linha: 147 Método: assertThat(snippetFor("before 5 after"), is(equalTo(expected)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaSnippetTest.java linha: 158 Método: assertThat(snippetFor("I have 4 cukes in: my \"big\" red-belly!"), is(equalTo(expected)))
Assert com mensagem: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaSnippetTest.java linha: 169 Método: assertThat(expected, snippetFor("the DI system receives a message saying \"{ dataIngestion: { feeds: [ feed: { merchantId: 666, feedId: 1, feedFileLocation: feed.csv } ] }\""), is(equalTo(expected)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaSnippetTest.java linha: 182 Método: assertThat(snippetFor("is there an error?:"), is(equalTo(expected)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaSnippetTest.java linha: 193 Método: assertThat(snippetFor("([a-z]*)?.+"), is(equalTo(expected)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaSnippetTest.java linha: 204 Método: assertThat(snippetFor("I have 5 cukes (maybe more)"), is(equalTo(expected)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaSnippetTest.java linha: 215 Método: assertThat(snippetFor("I have 5 cukes [maybe more]"), is(equalTo(expected)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaSnippetTest.java linha: 226 Método: assertThat(snippetForDocString("I have:", "hello"), is(equalTo(expected)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaSnippetTest.java linha: 271 Método: assertThat(snippetForDocString("I have a \"Documentation String\":", "hello", customParameterType), is(equalTo(expected)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaSnippetTest.java linha: 292 Método: assertThat(snippetFor("Then it responds UTF-8"), is(equalTo(expected)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaSnippetTest.java linha: 309 Método: assertThat(snippetForDataTable("I have:"), is(equalTo(expected)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaSnippetTest.java linha: 365 Método: assertThat(snippetForDataTable("I have in table \"M6\":", customParameterType), is(equalTo(expected)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaSnippetTest.java linha: 386 Método: assertThat(snippetFor("Then it responds <param>"), is(equalTo(expected)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaSnippetTest.java linha: 397 Método: assertThat(snippetForWhenAnd("I have 4 cukes in my \"big\" belly"), is(equalTo(expected)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaSnippetTest.java linha: 422 Método: assertThat(snippetForWildCard("I have 4 cukes in my \"big\" belly"), is(equalTo(expected)))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaParameterTypeDefinitionTest.java linha: 43 Método: assertThat(test.get(0).getValue(), equalTo("convert_one_capture_group_to_string"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaParameterTypeDefinitionTest.java linha: 60 Método: assertThat(test.get(0).getValue(), equalTo("convert_two_capture_group_to_string"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaParameterTypeDefinitionTest.java linha: 77 Método: assertThat(test.get(0).getValue(), equalTo("convert_varargs_capture_group_to_string"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaParameterTypeDefinitionTest.java linha: 94 Método: assertThrows(CucumberExpressionException.class, () -> test.get(0).getValue())
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaParameterTypeDefinitionTest.java linha: 100 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaParameterTypeDefinition("", "(.*)", method, false, false, false, lookup))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaParameterTypeDefinitionTest.java linha: 117 Método: assertThat(args.get(0).getValue(), is(Optional.of("convert_capture_group_to_optional_string")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaParameterTypeDefinitionTest.java linha: 127 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaParameterTypeDefinition("", "(.*)", method, false, false, false, lookup))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaParameterTypeDefinitionTest.java linha: 138 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaParameterTypeDefinition("", "(.*)", method, false, false, false, lookup))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaParameterTypeDefinitionTest.java linha: 150 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaParameterTypeDefinition("", "(.*)", method, false, false, false, lookup))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaStepDefinitionTransposeTest.java linha: 19 Método: assertFalse(isTransposed(m))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaStepDefinitionTransposeTest.java linha: 33 Método: assertTrue(isTransposed(m))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/MethodFormatTest.java linha: 34 Método: assertThat(MethodFormat.FULL.format(methodWithoutArgs), startsWith("io.cucumber.java.MethodFormatTest.methodWithoutArgs()"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/MethodFormatTest.java linha: 40 Método: assertThat(MethodFormat.FULL.format(methodWithArgsAndException), startsWith("io.cucumber.java.MethodFormatTest.methodWithArgsAndException(java.lang.String,java.util.Map)"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDefaultParameterTransformerDefinitionTest.java linha: 33 Método: assertThat(transformed, is("transform_string_to_type"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDefaultParameterTransformerDefinitionTest.java linha: 47 Método: assertThat(transformed, is("transform_object_to_type"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDefaultParameterTransformerDefinitionTest.java linha: 58 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaDefaultParameterTransformerDefinition(method, lookup))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDefaultParameterTransformerDefinitionTest.java linha: 60 Método: assertThat(exception.getMessage(), startsWith("" + "A @DefaultParameterTransformer annotated method must have one of these signatures:\n" + " * public Object defaultDataTableEntry(String fromValue, Type toValueType)\n" + " * public Object defaultDataTableEntry(Object fromValue, Type toValueType)\n" + "at io.cucumber.java.JavaDefaultParameterTransformerDefinitionTest.transforms_string_to_void(java.lang.String,java.lang.reflect.Type)"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDefaultParameterTransformerDefinitionTest.java linha: 73 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaDefaultParameterTransformerDefinition(oneArg, lookup))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDefaultParameterTransformerDefinitionTest.java linha: 77 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaDefaultParameterTransformerDefinition(threeArg, lookup))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDefaultParameterTransformerDefinitionTest.java linha: 93 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaDefaultParameterTransformerDefinition(threeArg, lookup))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDefaultParameterTransformerDefinitionTest.java linha: 105 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaDefaultParameterTransformerDefinition(threeArg, lookup))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/defaultstransformer/DataTableSteps.java linha: 31 Método: assertTrue(authors.contains(expectedAuthor))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/defaultstransformer/DataTableSteps.java linha: 36 Método: assertTrue(authors.contains(expectedAuthor))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/defaultstransformer/DataTableSteps.java linha: 41 Método: assertThat(currency, is(Currency.getInstance("EUR")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/defaultstransformer/DataTableSteps.java linha: 46 Método: assertThat(currency, is(Currency.getInstance("EUR")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDataTableTypeDefinitionTest.java linha: 52 Método: assertThat(definition.dataTableType().transform(dataTable.cells()), is("convert_data_table_to_string=[[a, b], [c, d]]"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDataTableTypeDefinitionTest.java linha: 62 Método: assertThat(definition.dataTableType().transform(emptyTable.cells()), is("convert_data_table_to_string=[[a, ], [, d]]"))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDataTableTypeDefinitionTest.java linha: 74 Método: assertThat(definition.dataTableType().transform(dataTable.cells()), is(asList("convert_table_row_to_string=[a, b]", "convert_table_row_to_string=[c, d]")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDataTableTypeDefinitionTest.java linha: 83 Método: assertThat(definition.dataTableType().transform(emptyTable.cells()), is(asList("convert_table_row_to_string=[a, ]", "convert_table_row_to_string=[, d]")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDataTableTypeDefinitionTest.java linha: 95 Método: assertThat(definition.dataTableType().transform(dataTable.cells()), is(singletonList("converts_table_entry_to_string={a=c, b=d}")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDataTableTypeDefinitionTest.java linha: 104 Método: assertThat(definition.dataTableType().transform(emptyTable.cells()), is(singletonList("converts_table_entry_to_string={a=, =d}")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDataTableTypeDefinitionTest.java linha: 116 Método: assertThat(definition.dataTableType().transform(dataTable.cells()), is(asList(asList("converts_table_cell_to_string=a", "converts_table_cell_to_string=b"), asList("converts_table_cell_to_string=c", "converts_table_cell_to_string=d"))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDataTableTypeDefinitionTest.java linha: 125 Método: assertThat(definition.dataTableType().transform(emptyTable.cells()), is(asList(asList("converts_table_cell_to_string=a", "converts_table_cell_to_string=[empty]"), asList("converts_table_cell_to_string=[empty]", "converts_table_cell_to_string=d"))))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDataTableTypeDefinitionTest.java linha: 139 Método: assertThat(definition.dataTableType().transform(dataTable.cells()), is(Optional.of("converts_datatable_to_optional_string")))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDataTableTypeDefinitionTest.java linha: 151 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaDataTableTypeDefinition(method, lookup, new String[0]))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDataTableTypeDefinitionTest.java linha: 161 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaDataTableTypeDefinition(noArgs, lookup, new String[0]))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDataTableTypeDefinitionTest.java linha: 165 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaDataTableTypeDefinition(twoArgs, lookup, new String[0]))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDataTableTypeDefinitionTest.java linha: 180 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaDataTableTypeDefinition(method, lookup, new String[0]))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDataTableTypeDefinitionTest.java linha: 191 Método: assertThrows(InvalidMethodSignatureException.class, () -> new JavaDataTableTypeDefinition(method, lookup, new String[0]))
Assert sem descrição: /home/vitor-otto/opensource/cucumber-jvm-7.11.1/cucumber-java/src/test/java/io/cucumber/java/JavaDataTableTypeDefinitionTest.java linha: 205 Método: assertThat(definition.dataTableType().transform(dataTable.cells()), is("static_convert_data_table_to_string=[[a, b], [c, d]]"))
Total asserts: 2165
Asserts sem descrição: 1993
Asserts com descrição: 130
Assertion Roulette: 1253
