
Projeto: /home/vitor-otto/opensource/Recaf-2.21.13

Antes do refactor: 
chamada antiga: assertEquals("test/Person", graph.getCommon("test/Jedi", "test/Sith"))
nova chamada: assertEquals("test/Person", graph.getCommon("test/Jedi", "test/Sith"), "Era esperado valores iguais, mas  'test/Person' é diferente de " + result0 + " <graph.getCommon('test/Jedi', 'test/Sith')>")
chamada antiga: assertEquals("test/Person", graph.getCommon("test/Jedi", "test/Person"))
nova chamada: assertEquals("test/Person", graph.getCommon("test/Jedi", "test/Person"), "Era esperado valores iguais, mas  'test/Person' é diferente de " + result1 + " <graph.getCommon('test/Jedi', 'test/Person')>")
chamada antiga: assertEquals("test/Person", graph.getCommon("test/Person", "test/Person"))
nova chamada: assertEquals("test/Person", graph.getCommon("test/Person", "test/Person"), "Era esperado valores iguais, mas  'test/Person' é diferente de " + result2 + " <graph.getCommon('test/Person', 'test/Person')>")
chamada antiga: assertEquals(expected.size(), hierarchy.stream().filter(v -> expected.contains(v.getData().getClassName())).count())
nova chamada: assertEquals(expected.size(), hierarchy.stream().filter(v -> expected.contains(v.getData().getClassName())).count(), "Era esperado valores iguais, mas " + result3 + " <expected.size()> é diferente de " + result4 + " <hierarchy.stream().filter(v -> expected.contains(v.getData().getClassName())).count()>")
chamada antiga: assertFalse(hierarchy.stream().anyMatch(v -> v.getData().getClassName().equals("test/Speech")))
nova chamada: assertFalse(hierarchy.stream().anyMatch(v -> v.getData().getClassName().equals("test/Speech")), "Era esperado falso, mas " + result5 + " <hierarchy.stream().anyMatch(v -> v.getData().getClassName().equals('test/Speech'))> é verdadeiro ")
chamada antiga: assertFalse(hierarchy.stream().anyMatch(v -> v.getData().getClassName().equals("test/Ability")))
nova chamada: assertFalse(hierarchy.stream().anyMatch(v -> v.getData().getClassName().equals("test/Ability")), "Era esperado falso, mas " + result6 + " <hierarchy.stream().anyMatch(v -> v.getData().getClassName().equals('test/Ability'))> é verdadeiro ")
chamada antiga: assertFalse(graph.isLibrary("test/Yoda", "say", "()V"))
nova chamada: assertFalse(graph.isLibrary("test/Yoda", "say", "()V"), "Era esperado falso, mas " + result7 + " <graph.isLibrary('test/Yoda', 'say', '()V')> é verdadeiro ")
chamada antiga: assertTrue(graph.isLibrary("test/Yoda", "toString", "()Ljava/lang/String;"))
nova chamada: assertTrue(graph.isLibrary("test/Yoda", "toString", "()Ljava/lang/String;"), "Era esperado verdadeiro, mas " + result8 + " <graph.isLibrary('test/Yoda', 'toString', '()Ljava/lang/String;')> é falso")
chamada antiga: assertTrue(graph.areLinked("test/Yoda", "say", "()V", "test/Greetings", "say", "()V"))
nova chamada: assertTrue(graph.areLinked("test/Yoda", "say", "()V", "test/Greetings", "say", "()V"), "Era esperado verdadeiro, mas " + result9 + " <graph.areLinked('test/Yoda', 'say', '()V', 'test/Greetings', 'say', '()V')> é falso")
chamada antiga: assertFalse(graph.areLinked("test/Yoda", "say", "()V", "test/Speech", "say", "()V"))
nova chamada: assertFalse(graph.areLinked("test/Yoda", "say", "()V", "test/Speech", "say", "()V"), "Era esperado falso, mas " + result10 + " <graph.areLinked('test/Yoda', 'say', '()V', 'test/Speech', 'say', '()V')> é verdadeiro ")
chamada antiga: assertEquals(1, results.size())
nova chamada: assertEquals(1, results.size(), "Era esperado valores iguais, mas  1 é diferente de " + result11 + " <results.size()>")
chamada antiga: assertEquals(Collections.emptySet(), result.getDifference())
nova chamada: assertEquals(Collections.emptySet(), result.getDifference(), "Era esperado valores iguais, mas " + result12 + " <Collections.emptySet()> é diferente de " + result13 + " <result.getDifference()>")
chamada antiga: assertEquals(1, results.size())
nova chamada: assertEquals(1, results.size(), "Era esperado valores iguais, mas  1 é diferente de " + result14 + " <results.size()>")
chamada antiga: assertEquals(20, mappings.size())
nova chamada: assertEquals(20, mappings.size(), "Era esperado valores iguais, mas  20 é diferente de " + result15 + " <mappings.size()>")
chamada antiga: assertEquals(1, results.size())
nova chamada: assertEquals(1, results.size(), "Era esperado valores iguais, mas  1 é diferente de " + result16 + " <results.size()>")
chamada antiga: assertEquals(1, difference.size())
nova chamada: assertEquals(1, difference.size(), "Era esperado valores iguais, mas  1 é diferente de " + result17 + " <difference.size()>")
chamada antiga: assertEquals("Start", vertex.getValue().getOwner())
nova chamada: assertEquals("Start", vertex.getValue().getOwner(), "Era esperado valores iguais, mas  'Start' é diferente de " + result18 + " <vertex.getValue().getOwner()>")
chamada antiga: assertEquals("main", vertex.getValue().getName())
nova chamada: assertEquals("main", vertex.getValue().getName(), "Era esperado valores iguais, mas  'main' é diferente de " + result19 + " <vertex.getValue().getName()>")
chamada antiga: assertEquals("([Ljava/lang/String;)V", vertex.getValue().getDesc())
nova chamada: assertEquals("([Ljava/lang/String;)V", vertex.getValue().getDesc(), "Era esperado valores iguais, mas  '([Ljava/lang/String;)V' é diferente de " + result20 + " <vertex.getValue().getDesc()>")
chamada antiga: assertEquals(Collections.emptySet(), result.getDifference())
nova chamada: assertEquals(Collections.emptySet(), result.getDifference(), "Era esperado valores iguais, mas " + result21 + " <Collections.emptySet()> é diferente de " + result22 + " <result.getDifference()>")
chamada antiga: assertEquals(1, results.size())
nova chamada: assertEquals(1, results.size(), "Era esperado valores iguais, mas  1 é diferente de " + result23 + " <results.size()>")
chamada antiga: assertEquals(0, mappings.size())
nova chamada: assertEquals(0, mappings.size(), "Era esperado valores iguais, mas  0 é diferente de " + result24 + " <mappings.size()>")
chamada antiga: assertEquals(0, mappings.size())
nova chamada: assertEquals(0, mappings.size(), "Era esperado valores iguais, mas  0 é diferente de " + result25 + " <mappings.size()>")
chamada antiga: assertEquals(1, fields.size())
nova chamada: assertEquals(1, fields.size(), "Era esperado valores iguais, mas  1 é diferente de " + result26 + " <fields.size()>")
chamada antiga: assertEquals("i", field.getName())
nova chamada: assertEquals("i", field.getName(), "Era esperado valores iguais, mas  'i' é diferente de " + result27 + " <field.getName()>")
chamada antiga: assertEquals("int", field.getType())
nova chamada: assertEquals("int", field.getType(), "Era esperado valores iguais, mas  'int' é diferente de " + result28 + " <field.getType()>")
chamada antiga: assertEquals("", field.getDescription())
nova chamada: assertEquals("", field.getDescription(), "Era esperado valores iguais, mas  '' é diferente de " + result29 + " <field.getDescription()>")
chamada antiga: assertEquals("protected", field.getModifiers().get(0))
nova chamada: assertEquals("protected", field.getModifiers().get(0), "Era esperado valores iguais, mas  'protected' é diferente de " + result30 + " <field.getModifiers().get(0)>")
chamada antiga: assertEquals("final", field.getModifiers().get(1))
nova chamada: assertEquals("final", field.getModifiers().get(1), "Era esperado valores iguais, mas  'final' é diferente de " + result31 + " <field.getModifiers().get(1)>")
chamada antiga: assertEquals(2, methods.size())
nova chamada: assertEquals(2, methods.size(), "Era esperado valores iguais, mas  2 é diferente de " + result32 + " <methods.size()>")
chamada antiga: assertEquals("evaluate", method.getName())
nova chamada: assertEquals("evaluate", method.getName(), "Era esperado valores iguais, mas  'evaluate' é diferente de " + result33 + " <method.getName()>")
chamada antiga: assertEquals("double", method.getReturnType())
nova chamada: assertEquals("double", method.getReturnType(), "Era esperado valores iguais, mas  'double' é diferente de " + result34 + " <method.getReturnType()>")
chamada antiga: assertEquals("Evaluates an expression as a level deeper than the current one in the expression tree,", method.getDescription())
nova chamada: assertEquals("Evaluates an expression as a level deeper than the current one in the expression tree,", method.getDescription(), "Era esperado valores iguais, mas  'Evaluates an expression as a level deeper than the current one in the expression tree,' é diferente de " + result35 + " <method.getDescription()>")
chamada antiga: assertEquals("protected", method.getModifiers().get(0))
nova chamada: assertEquals("protected", method.getModifiers().get(0), "Era esperado valores iguais, mas  'protected' é diferente de " + result36 + " <method.getModifiers().get(0)>")
chamada antiga: assertEquals("final", method.getModifiers().get(1))
nova chamada: assertEquals("final", method.getModifiers().get(1), "Era esperado valores iguais, mas  'final' é diferente de " + result37 + " <method.getModifiers().get(1)>")
chamada antiga: assertEquals("Evaluated result.", method.getReturnDescription())
nova chamada: assertEquals("Evaluated result.", method.getReturnDescription(), "Era esperado valores iguais, mas  'Evaluated result.' é diferente de " + result38 + " <method.getReturnDescription()>")
chamada antiga: assertEquals(1, method.getParameters().size())
nova chamada: assertEquals(1, method.getParameters().size(), "Era esperado valores iguais, mas  1 é diferente de " + result39 + " <method.getParameters().size()>")
chamada antiga: assertEquals("expression", parameter.getName())
nova chamada: assertEquals("expression", parameter.getName(), "Era esperado valores iguais, mas  'expression' é diferente de " + result40 + " <parameter.getName()>")
chamada antiga: assertEquals("Some math expression.", parameter.getDescription())
nova chamada: assertEquals("Some math expression.", parameter.getDescription(), "Era esperado valores iguais, mas  'Some math expression.' é diferente de " + result41 + " <parameter.getDescription()>")
chamada antiga: assertEquals("accept", method.getName())
nova chamada: assertEquals("accept", method.getName(), "Era esperado valores iguais, mas  'accept' é diferente de " + result42 + " <method.getName()>")
chamada antiga: assertEquals("double", method.getReturnType())
nova chamada: assertEquals("double", method.getReturnType(), "Era esperado valores iguais, mas  'double' é diferente de " + result43 + " <method.getReturnType()>")
chamada antiga: assertEquals("", method.getDescription())
nova chamada: assertEquals("", method.getDescription(), "Era esperado valores iguais, mas  '' é diferente de " + result44 + " <method.getDescription()>")
chamada antiga: assertEquals("public", method.getModifiers().get(0))
nova chamada: assertEquals("public", method.getModifiers().get(0), "Era esperado valores iguais, mas  'public' é diferente de " + result45 + " <method.getModifiers().get(0)>")
chamada antiga: assertEquals("abstract", method.getModifiers().get(1))
nova chamada: assertEquals("abstract", method.getModifiers().get(1), "Era esperado valores iguais, mas  'abstract' é diferente de " + result46 + " <method.getModifiers().get(1)>")
chamada antiga: assertEquals("Evaluated result.", method.getReturnDescription())
nova chamada: assertEquals("Evaluated result.", method.getReturnDescription(), "Era esperado valores iguais, mas  'Evaluated result.' é diferente de " + result47 + " <method.getReturnDescription()>")
chamada antiga: assertEquals(1, method.getParameters().size())
nova chamada: assertEquals(1, method.getParameters().size(), "Era esperado valores iguais, mas  1 é diferente de " + result48 + " <method.getParameters().size()>")
chamada antiga: assertEquals("expression", parameter.getName())
nova chamada: assertEquals("expression", parameter.getName(), "Era esperado valores iguais, mas  'expression' é diferente de " + result49 + " <parameter.getName()>")
chamada antiga: assertEquals("Some math expression.", parameter.getDescription())
nova chamada: assertEquals("Some math expression.", parameter.getDescription(), "Era esperado valores iguais, mas  'Some math expression.' é diferente de " + result50 + " <parameter.getDescription()>")
chamada antiga: assertEquals(2, inheritance.size())
nova chamada: assertEquals(2, inheritance.size(), "Era esperado valores iguais, mas  2 é diferente de " + result51 + " <inheritance.size()>")
chamada antiga: assertEquals("calc/Calculator", inheritance.get(0))
nova chamada: assertEquals("calc/Calculator", inheritance.get(0), "Era esperado valores iguais, mas  'calc/Calculator' é diferente de " + result52 + " <inheritance.get(0)>")
chamada antiga: assertEquals("java/lang/Object", inheritance.get(1))
nova chamada: assertEquals("java/lang/Object", inheritance.get(1), "Era esperado valores iguais, mas  'java/lang/Object' é diferente de " + result53 + " <inheritance.get(1)>")
chamada antiga: assertEquals(keys.length, subclasses.size())
nova chamada: assertEquals(keys.length, subclasses.size(), "Era esperado valores iguais, mas  keys.length é diferente de " + result54 + " <subclasses.size()>")
chamada antiga: assertEquals(0, subclasses.size())
nova chamada: assertEquals(0, subclasses.size(), "Era esperado valores iguais, mas  0 é diferente de " + result55 + " <subclasses.size()>")
chamada antiga: assertEquals(small, frames[frames.length - 2].getLocal(0).getValue())
nova chamada: assertEquals(small, frames[frames.length - 2].getLocal(0).getValue(), "Era esperado valores iguais, mas  small é diferente de " + result56 + " <frames[frames.length - 2].getLocal(0).getValue()>")
chamada antiga: assertEquals(str, frames[3].getStack(0).getValue())
nova chamada: assertEquals(str, frames[3].getStack(0).getValue(), "Era esperado valores iguais, mas  str é diferente de " + result57 + " <frames[3].getStack(0).getValue()>")
chamada antiga: assertEquals(str.length(), frames[4].getStack(0).getValue())
nova chamada: assertEquals(str.length(), frames[4].getStack(0).getValue(), "Era esperado valores iguais, mas " + result58 + " <str.length()> é diferente de " + result59 + " <frames[4].getStack(0).getValue()>")
chamada antiga: assertEquals(part1 + part2, frames[frames.length - 2].getStack(0).getValue())
nova chamada: assertEquals(part1 + part2, frames[frames.length - 2].getStack(0).getValue(), "Era esperado valores iguais, mas  part1 + part2 é diferente de " + result60 + " <frames[frames.length - 2].getStack(0).getValue()>")
chamada antiga: assertEquals(part1 + part2, retFrameLocal.getValue())
nova chamada: assertEquals(part1 + part2, retFrameLocal.getValue(), "Era esperado valores iguais, mas  part1 + part2 é diferente de " + result61 + " <retFrameLocal.getValue()>")
chamada antiga: assertFalse(retFrameLocal.isNull())
nova chamada: assertFalse(retFrameLocal.isNull(), "Era esperado falso, mas " + result62 + " <retFrameLocal.isNull()> é verdadeiro ")
chamada antiga: assertFalse(retFrameLocal.isValueUnresolved())
nova chamada: assertFalse(retFrameLocal.isValueUnresolved(), "Era esperado falso, mas " + result63 + " <retFrameLocal.isValueUnresolved()> é verdadeiro ")
chamada antiga: assertNotEquals(initial, retFrameLocal.getValue())
nova chamada: assertNotEquals(initial, retFrameLocal.getValue(), "Era esperado valores diferentes, mas  initial é igual a " + result64 + " <retFrameLocal.getValue()>")
chamada antiga: assertNotEquals(one, retFrameLocal.getValue())
nova chamada: assertNotEquals(one, retFrameLocal.getValue(), "Era esperado valores diferentes, mas  one é igual a " + result65 + " <retFrameLocal.getValue()>")
chamada antiga: assertNotEquals(two, retFrameLocal.getValue())
nova chamada: assertNotEquals(two, retFrameLocal.getValue(), "Era esperado valores diferentes, mas  two é igual a " + result66 + " <retFrameLocal.getValue()>")
chamada antiga: assertFalse(retFrameLocal.isNull())
nova chamada: assertFalse(retFrameLocal.isNull(), "Era esperado falso, mas " + result67 + " <retFrameLocal.isNull()> é verdadeiro ")
chamada antiga: assertFalse(retFrameLocal.isValueUnresolved())
nova chamada: assertFalse(retFrameLocal.isValueUnresolved(), "Era esperado falso, mas " + result68 + " <retFrameLocal.isValueUnresolved()> é verdadeiro ")
chamada antiga: assertNotEquals(initial, retFrameLocal.getValue())
nova chamada: assertNotEquals(initial, retFrameLocal.getValue(), "Era esperado valores diferentes, mas  initial é igual a " + result69 + " <retFrameLocal.getValue()>")
chamada antiga: assertNotEquals(one, retFrameLocal.getValue())
nova chamada: assertNotEquals(one, retFrameLocal.getValue(), "Era esperado valores diferentes, mas  one é igual a " + result70 + " <retFrameLocal.getValue()>")
chamada antiga: assertEquals(two, retFrameLocal.getValue())
nova chamada: assertEquals(two, retFrameLocal.getValue(), "Era esperado valores iguais, mas  two é diferente de " + result71 + " <retFrameLocal.getValue()>")
chamada antiga: assertThrows(IOException.class, () -> new ClassResource(path))
nova chamada: assertThrows(IOException.class, () -> new ClassResource(path), "Era esperado que a exceção  IOException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(IOException.class, () -> new MavenResource("does", "not", "exist"))
nova chamada: assertThrows(IOException.class, () -> new MavenResource("does", "not", "exist"), "Era esperado que a exceção  IOException.class fosse lançada, mas não foi")
chamada antiga: assertFalse(undirectedGraph.containsVertex(-1))
nova chamada: assertFalse(undirectedGraph.containsVertex(-1), "Era esperado falso, mas " + result72 + " <undirectedGraph.containsVertex(-1)> é verdadeiro ")
chamada antiga: assertNotNull(result)
nova chamada: assertNotNull(result, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(Arrays.binarySearch(paths, path) >= 0)
nova chamada: assertTrue(Arrays.binarySearch(paths, path) >= 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertFalse(children.contains("6"))
nova chamada: assertFalse(children.contains("6"), "Era esperado falso, mas " + result73 + " <children.contains('6')> é verdadeiro ")
chamada antiga: assertTrue(directedGraph.getVertex(1).isRoot())
nova chamada: assertTrue(directedGraph.getVertex(1).isRoot(), "Era esperado verdadeiro, mas " + result74 + " <directedGraph.getVertex(1).isRoot()> é falso")
chamada antiga: assertTrue(directedGraph.getVertex(6).isRoot())
nova chamada: assertTrue(directedGraph.getVertex(6).isRoot(), "Era esperado verdadeiro, mas " + result75 + " <directedGraph.getVertex(6).isRoot()> é falso")
chamada antiga: assertTrue(roots.contains(v1))
nova chamada: assertTrue(roots.contains(v1), "Era esperado verdadeiro, mas " + result76 + " <roots.contains(v1)> é falso")
chamada antiga: assertTrue(roots.contains(v6))
nova chamada: assertTrue(roots.contains(v6), "Era esperado verdadeiro, mas " + result77 + " <roots.contains(v6)> é falso")
chamada antiga: assertEquals(2, roots.size())
nova chamada: assertEquals(2, roots.size(), "Era esperado valores iguais, mas  2 é diferente de " + result78 + " <roots.size()>")
chamada antiga: assertTrue(roots.contains(v1))
nova chamada: assertTrue(roots.contains(v1), "Era esperado verdadeiro, mas " + result79 + " <roots.contains(v1)> é falso")
chamada antiga: assertEquals(1, roots.size())
nova chamada: assertEquals(1, roots.size(), "Era esperado valores iguais, mas  1 é diferente de " + result80 + " <roots.size()>")
chamada antiga: assertTrue(roots.contains(v1))
nova chamada: assertTrue(roots.contains(v1), "Era esperado verdadeiro, mas " + result81 + " <roots.contains(v1)> é falso")
chamada antiga: assertEquals(1, roots.size())
nova chamada: assertEquals(1, roots.size(), "Era esperado valores iguais, mas  1 é diferente de " + result82 + " <roots.size()>")
chamada antiga: assertFalse(directedGraph.getVertex(6).isLeaf())
nova chamada: assertFalse(directedGraph.getVertex(6).isLeaf(), "Era esperado falso, mas " + result83 + " <directedGraph.getVertex(6).isLeaf()> é verdadeiro ")
chamada antiga: assertTrue(directedGraph.getVertex(4).isLeaf())
nova chamada: assertTrue(directedGraph.getVertex(4).isLeaf(), "Era esperado verdadeiro, mas " + result84 + " <directedGraph.getVertex(4).isLeaf()> é falso")
chamada antiga: assertTrue(directedGraph.getVertex(5).isLeaf())
nova chamada: assertTrue(directedGraph.getVertex(5).isLeaf(), "Era esperado verdadeiro, mas " + result85 + " <directedGraph.getVertex(5).isLeaf()> é falso")
chamada antiga: assertTrue(leaves.contains(v4))
nova chamada: assertTrue(leaves.contains(v4), "Era esperado verdadeiro, mas " + result86 + " <leaves.contains(v4)> é falso")
chamada antiga: assertTrue(leaves.contains(v5))
nova chamada: assertTrue(leaves.contains(v5), "Era esperado verdadeiro, mas " + result87 + " <leaves.contains(v5)> é falso")
chamada antiga: assertEquals(2, leaves.size())
nova chamada: assertEquals(2, leaves.size(), "Era esperado valores iguais, mas  2 é diferente de " + result88 + " <leaves.size()>")
chamada antiga: assertTrue(leaves.contains(v5))
nova chamada: assertTrue(leaves.contains(v5), "Era esperado verdadeiro, mas " + result89 + " <leaves.contains(v5)> é falso")
chamada antiga: assertEquals(1, leaves.size())
nova chamada: assertEquals(1, leaves.size(), "Era esperado valores iguais, mas  1 é diferente de " + result90 + " <leaves.size()>")
chamada antiga: assertTrue(leaves.contains(v5))
nova chamada: assertTrue(leaves.contains(v5), "Era esperado verdadeiro, mas " + result91 + " <leaves.contains(v5)> é falso")
chamada antiga: assertEquals(1, leaves.size())
nova chamada: assertEquals(1, leaves.size(), "Era esperado valores iguais, mas  1 é diferente de " + result92 + " <leaves.size()>")
chamada antiga: assertEquals(2, resultMapping.size())
nova chamada: assertEquals(2, resultMapping.size(), "Era esperado valores iguais, mas  2 é diferente de " + result93 + " <resultMapping.size()>")
chamada antiga: assertEquals("calc/Calculator.MAX_DEPTH_LEVEL", resultMapping.get("calc/Calculator.MAX_DEPTH"))
nova chamada: assertEquals("calc/Calculator.MAX_DEPTH_LEVEL", resultMapping.get("calc/Calculator.MAX_DEPTH"), "Era esperado valores iguais, mas  'calc/Calculator.MAX_DEPTH_LEVEL' é diferente de " + result94 + " <resultMapping.get('calc/Calculator.MAX_DEPTH')>")
chamada antiga: assertEquals("calc/Calculator.doEvaluate(ILjava/lang/String;)D", resultMapping.get("calc/Calculator.evaluate(ILjava/lang/String;)D"))
nova chamada: assertEquals("calc/Calculator.doEvaluate(ILjava/lang/String;)D", resultMapping.get("calc/Calculator.evaluate(ILjava/lang/String;)D"), "Era esperado valores iguais, mas  'calc/Calculator.doEvaluate(ILjava/lang/String;)D' é diferente de " + result95 + " <resultMapping.get('calc/Calculator.evaluate(ILjava/lang/String;)D')>")
chamada antiga: assertEquals(3, aggregateMapping.size())
nova chamada: assertEquals(3, aggregateMapping.size(), "Era esperado valores iguais, mas  3 é diferente de " + result96 + " <aggregateMapping.size()>")
chamada antiga: assertEquals("renamed/MyCalc", aggregateMapping.get("calc/Calculator"))
nova chamada: assertEquals("renamed/MyCalc", aggregateMapping.get("calc/Calculator"), "Era esperado valores iguais, mas  'renamed/MyCalc' é diferente de " + result97 + " <aggregateMapping.get('calc/Calculator')>")
chamada antiga: assertEquals("MAX_DEPTH_LEVEL", aggregateMapping.get("calc/Calculator.MAX_DEPTH"))
nova chamada: assertEquals("MAX_DEPTH_LEVEL", aggregateMapping.get("calc/Calculator.MAX_DEPTH"), "Era esperado valores iguais, mas  'MAX_DEPTH_LEVEL' é diferente de " + result98 + " <aggregateMapping.get('calc/Calculator.MAX_DEPTH')>")
chamada antiga: assertEquals("doEvaluate", aggregateMapping.get("calc/Calculator.evaluate(ILjava/lang/String;)D"))
nova chamada: assertEquals("doEvaluate", aggregateMapping.get("calc/Calculator.evaluate(ILjava/lang/String;)D"), "Era esperado valores iguais, mas  'doEvaluate' é diferente de " + result99 + " <aggregateMapping.get('calc/Calculator.evaluate(ILjava/lang/String;)D')>")
chamada antiga: assertEquals(3, aggregateMapping.size())
nova chamada: assertEquals(3, aggregateMapping.size(), "Era esperado valores iguais, mas  3 é diferente de " + result100 + " <aggregateMapping.size()>")
chamada antiga: assertEquals("renamed/MyCalc", aggregateMapping.get("calc/Calculator"))
nova chamada: assertEquals("renamed/MyCalc", aggregateMapping.get("calc/Calculator"), "Era esperado valores iguais, mas  'renamed/MyCalc' é diferente de " + result101 + " <aggregateMapping.get('calc/Calculator')>")
chamada antiga: assertEquals("MAX_DEPTH_LEVEL", aggregateMapping.get("calc/Calculator.MAX_DEPTH"))
nova chamada: assertEquals("MAX_DEPTH_LEVEL", aggregateMapping.get("calc/Calculator.MAX_DEPTH"), "Era esperado valores iguais, mas  'MAX_DEPTH_LEVEL' é diferente de " + result102 + " <aggregateMapping.get('calc/Calculator.MAX_DEPTH')>")
chamada antiga: assertEquals("doEvaluate", aggregateMapping.get("calc/Calculator.evaluate(ILjava/lang/String;)D"))
nova chamada: assertEquals("doEvaluate", aggregateMapping.get("calc/Calculator.evaluate(ILjava/lang/String;)D"), "Era esperado valores iguais, mas  'doEvaluate' é diferente de " + result103 + " <aggregateMapping.get('calc/Calculator.evaluate(ILjava/lang/String;)D')>")
chamada antiga: assertEquals(3, aggregateMapping.size())
nova chamada: assertEquals(3, aggregateMapping.size(), "Era esperado valores iguais, mas  3 é diferente de " + result104 + " <aggregateMapping.size()>")
chamada antiga: assertEquals("renamed2/MyCalc2", aggregateMapping.get("calc/Calculator"))
nova chamada: assertEquals("renamed2/MyCalc2", aggregateMapping.get("calc/Calculator"), "Era esperado valores iguais, mas  'renamed2/MyCalc2' é diferente de " + result105 + " <aggregateMapping.get('calc/Calculator')>")
chamada antiga: assertEquals("MAX_DEPTH_LEVEL", aggregateMapping.get("calc/Calculator.MAX_DEPTH"))
nova chamada: assertEquals("MAX_DEPTH_LEVEL", aggregateMapping.get("calc/Calculator.MAX_DEPTH"), "Era esperado valores iguais, mas  'MAX_DEPTH_LEVEL' é diferente de " + result106 + " <aggregateMapping.get('calc/Calculator.MAX_DEPTH')>")
chamada antiga: assertEquals("doEvaluate", aggregateMapping.get("calc/Calculator.evaluate(ILjava/lang/String;)D"))
nova chamada: assertEquals("doEvaluate", aggregateMapping.get("calc/Calculator.evaluate(ILjava/lang/String;)D"), "Era esperado valores iguais, mas  'doEvaluate' é diferente de " + result107 + " <aggregateMapping.get('calc/Calculator.evaluate(ILjava/lang/String;)D')>")
chamada antiga: assertTrue(node instanceof ClassOrInterfaceType)
nova chamada: assertTrue(node instanceof ClassOrInterfaceType, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("Scanner", ((ClassOrInterfaceType) node).asString())
nova chamada: assertEquals("Scanner", ((ClassOrInterfaceType) node).asString(), "Era esperado valores iguais, mas  'Scanner' é diferente de " + result108 + " <((ClassOrInterfaceType) node).asString()>")
chamada antiga: assertTrue(node instanceof VariableDeclarator)
nova chamada: assertTrue(node instanceof VariableDeclarator, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("scanner", ((VariableDeclarator) node).getNameAsString())
nova chamada: assertEquals("scanner", ((VariableDeclarator) node).getNameAsString(), "Era esperado valores iguais, mas  'scanner' é diferente de " + result109 + " <((VariableDeclarator) node).getNameAsString()>")
chamada antiga: assertTrue(node instanceof ClassOrInterfaceType)
nova chamada: assertTrue(node instanceof ClassOrInterfaceType, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("Scanner", ((ClassOrInterfaceType) node).asString())
nova chamada: assertEquals("Scanner", ((ClassOrInterfaceType) node).asString(), "Era esperado valores iguais, mas  'Scanner' é diferente de " + result110 + " <((ClassOrInterfaceType) node).asString()>")
chamada antiga: assertTrue(node instanceof FieldAccessExpr)
nova chamada: assertTrue(node instanceof FieldAccessExpr, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(((FieldAccessExpr) node).getScope() instanceof NameExpr)
nova chamada: assertTrue(((FieldAccessExpr) node).getScope() instanceof NameExpr, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("System", ((NameExpr) ((FieldAccessExpr) node).getScope()).getNameAsString())
nova chamada: assertEquals("System", ((NameExpr) ((FieldAccessExpr) node).getScope()).getNameAsString(), "Era esperado valores iguais, mas  'System' é diferente de " + result111 + " <((NameExpr) ((FieldAccessExpr) node).getScope()).getNameAsString()>")
chamada antiga: assertEquals("in", ((FieldAccessExpr) node).getNameAsString())
nova chamada: assertEquals("in", ((FieldAccessExpr) node).getNameAsString(), "Era esperado valores iguais, mas  'in' é diferente de " + result112 + " <((FieldAccessExpr) node).getNameAsString()>")
chamada antiga: assertTrue(node instanceof ClassOrInterfaceType)
nova chamada: assertTrue(node instanceof ClassOrInterfaceType, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("java/lang/String", toInternal(dec))
nova chamada: assertEquals("java/lang/String", toInternal(dec), "Era esperado valores iguais, mas  'java/lang/String' é diferente de " + result113 + " <toInternal(dec)>")
chamada antiga: assertTrue(node instanceof ClassOrInterfaceType)
nova chamada: assertTrue(node instanceof ClassOrInterfaceType, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("calc/Exponent", toInternal(dec))
nova chamada: assertEquals("calc/Exponent", toInternal(dec), "Era esperado valores iguais, mas  'calc/Exponent' é diferente de " + result114 + " <toInternal(dec)>")
chamada antiga: assertTrue(node instanceof PrimitiveType)
nova chamada: assertTrue(node instanceof PrimitiveType, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("java/lang/Integer", toInternal(decPrim))
nova chamada: assertEquals("java/lang/Integer", toInternal(decPrim), "Era esperado valores iguais, mas  'java/lang/Integer' é diferente de " + result115 + " <toInternal(decPrim)>")
chamada antiga: assertTrue(node instanceof FieldAccessExpr)
nova chamada: assertTrue(node instanceof FieldAccessExpr, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("java/lang/System", getOwner(dec))
nova chamada: assertEquals("java/lang/System", getOwner(dec), "Era esperado valores iguais, mas  'java/lang/System' é diferente de " + result116 + " <getOwner(dec)>")
chamada antiga: assertEquals("in", dec.getName())
nova chamada: assertEquals("in", dec.getName(), "Era esperado valores iguais, mas  'in' é diferente de " + result117 + " <dec.getName()>")
chamada antiga: assertEquals("Ljava/io/InputStream;", getDescriptor(dec))
nova chamada: assertEquals("Ljava/io/InputStream;", getDescriptor(dec), "Era esperado valores iguais, mas  'Ljava/io/InputStream;' é diferente de " + result118 + " <getDescriptor(dec)>")
chamada antiga: assertTrue(node instanceof MethodCallExpr)
nova chamada: assertTrue(node instanceof MethodCallExpr, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("calc/Parenthesis", getOwner(dec))
nova chamada: assertEquals("calc/Parenthesis", getOwner(dec), "Era esperado valores iguais, mas  'calc/Parenthesis' é diferente de " + result119 + " <getOwner(dec)>")
chamada antiga: assertEquals("accept", dec.getName())
nova chamada: assertEquals("accept", dec.getName(), "Era esperado valores iguais, mas  'accept' é diferente de " + result120 + " <dec.getName()>")
chamada antiga: assertEquals("(Ljava/lang/String;)D", getDescriptor(dec))
nova chamada: assertEquals("(Ljava/lang/String;)D", getDescriptor(dec), "Era esperado valores iguais, mas  '(Ljava/lang/String;)D' é diferente de " + result121 + " <getDescriptor(dec)>")
chamada antiga: assertTrue(node instanceof MethodCallExpr)
nova chamada: assertTrue(node instanceof MethodCallExpr, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("java/io/PrintStream", getOwner(dec))
nova chamada: assertEquals("java/io/PrintStream", getOwner(dec), "Era esperado valores iguais, mas  'java/io/PrintStream' é diferente de " + result122 + " <getOwner(dec)>")
chamada antiga: assertEquals("println", dec.getName())
nova chamada: assertEquals("println", dec.getName(), "Era esperado valores iguais, mas  'println' é diferente de " + result123 + " <dec.getName()>")
chamada antiga: assertEquals("(Ljava/lang/String;)V", getDescriptor(dec))
nova chamada: assertEquals("(Ljava/lang/String;)V", getDescriptor(dec), "Era esperado valores iguais, mas  '(Ljava/lang/String;)V' é diferente de " + result124 + " <getDescriptor(dec)>")
chamada antiga: assertEquals(0, imports.size())
nova chamada: assertEquals(0, imports.size(), "Era esperado valores iguais, mas  0 é diferente de " + result125 + " <imports.size()>")
chamada antiga: assertEquals(8, imports.size() - SourceCode.LANG_PACKAGE_NAMES.length)
nova chamada: assertEquals(8, imports.size() - SourceCode.LANG_PACKAGE_NAMES.length, "Era esperado valores iguais, mas  8 é diferente de " + " imports.size() - SourceCode.LANG_PACKAGE_NAMES.length")
chamada antiga: assertEquals(2, imports.size())
nova chamada: assertEquals(2, imports.size(), "Era esperado valores iguais, mas  2 é diferente de " + result126 + " <imports.size()>")
chamada antiga: assertTrue(imports.contains("java/util/regex/Matcher"))
nova chamada: assertTrue(imports.contains("java/util/regex/Matcher"), "Era esperado verdadeiro, mas " + result127 + " <imports.contains('java/util/regex/Matcher')> é falso")
chamada antiga: assertTrue(imports.contains("java/util/regex/Pattern"))
nova chamada: assertTrue(imports.contains("java/util/regex/Pattern"), "Era esperado verdadeiro, mas " + result128 + " <imports.contains('java/util/regex/Pattern')> é falso")
chamada antiga: assertEquals(9, imports.size())
nova chamada: assertEquals(9, imports.size(), "Era esperado valores iguais, mas  9 é diferente de " + result129 + " <imports.size()>")
chamada antiga: assertTrue(imports.contains("java/util/Scanner"))
nova chamada: assertTrue(imports.contains("java/util/Scanner"), "Era esperado verdadeiro, mas " + result130 + " <imports.contains('java/util/Scanner')> é falso")
chamada antiga: assertEquals(expected, actual)
nova chamada: assertEquals(expected, actual, "Era esperado valores iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertThrows(IOException.class, () -> resource.setClassSources(Paths.get("Does/Not/Exist")))
nova chamada: assertThrows(IOException.class, () -> resource.setClassSources(Paths.get("Does/Not/Exist")), "Era esperado que a exceção  IOException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(IOException.class, () -> resource.setClassSources(source))
nova chamada: assertThrows(IOException.class, () -> resource.setClassSources(source), "Era esperado que a exceção  IOException.class fosse lançada, mas não foi")
chamada antiga: assertNotEquals(emptySet(), expectedSrcNames)
nova chamada: assertNotEquals(emptySet(), expectedSrcNames, "Era esperado valores diferentes, mas " + result131 + " <emptySet()> é igual a " + " expectedSrcNames")
chamada antiga: assertNotEquals(emptySet(), foundSrcNames)
nova chamada: assertNotEquals(emptySet(), foundSrcNames, "Era esperado valores diferentes, mas " + result132 + " <emptySet()> é igual a " + " foundSrcNames")
chamada antiga: assertEquals(emptySet(), difference)
nova chamada: assertEquals(emptySet(), difference, "Era esperado valores iguais, mas " + result133 + " <emptySet()> é diferente de " + " difference")
chamada antiga: assertEquals(1, resource.getClassHistory(key).size())
nova chamada: assertEquals(1, resource.getClassHistory(key).size(), "Era esperado valores iguais, mas  1 é diferente de " + result134 + " <resource.getClassHistory(key).size()>")
chamada antiga: assertEquals(1, resource.getFileHistory(key).size())
nova chamada: assertEquals(1, resource.getFileHistory(key).size(), "Era esperado valores iguais, mas  1 é diferente de " + result135 + " <resource.getFileHistory(key).size()>")
chamada antiga: assertEquals(1, resource.getClassHistory(key).size())
nova chamada: assertEquals(1, resource.getClassHistory(key).size(), "Era esperado valores iguais, mas  1 é diferente de " + result136 + " <resource.getClassHistory(key).size()>")
chamada antiga: assertEquals(1, resource.getClassHistory(key).size())
nova chamada: assertEquals(1, resource.getClassHistory(key).size(), "Era esperado valores iguais, mas  1 é diferente de " + result137 + " <resource.getClassHistory(key).size()>")
chamada antiga: assertEquals(2, resource.getClassHistory(key).size())
nova chamada: assertEquals(2, resource.getClassHistory(key).size(), "Era esperado valores iguais, mas  2 é diferente de " + result138 + " <resource.getClassHistory(key).size()>")
chamada antiga: assertEquals(3, resource.getClassHistory(key).size())
nova chamada: assertEquals(3, resource.getClassHistory(key).size(), "Era esperado valores iguais, mas  3 é diferente de " + result139 + " <resource.getClassHistory(key).size()>")
chamada antiga: assertEquals(2, resource.getFileHistory(key).size())
nova chamada: assertEquals(2, resource.getFileHistory(key).size(), "Era esperado valores iguais, mas  2 é diferente de " + result140 + " <resource.getFileHistory(key).size()>")
chamada antiga: assertEquals(3, resource.getFileHistory(key).size())
nova chamada: assertEquals(3, resource.getFileHistory(key).size(), "Era esperado valores iguais, mas  3 é diferente de " + result141 + " <resource.getFileHistory(key).size()>")
chamada antiga: assertArrayEquals(DUMMY, resource.getClassHistory(key).pop())
nova chamada: assertArrayEquals(DUMMY, resource.getClassHistory(key).pop(), "Era esperado arrays iguais, mas  DUMMY é diferente de " + result142 + " <resource.getClassHistory(key).pop()>")
chamada antiga: assertArrayEquals(initial, resource.getClassHistory(key).pop())
nova chamada: assertArrayEquals(initial, resource.getClassHistory(key).pop(), "Era esperado arrays iguais, mas  initial é diferente de " + result143 + " <resource.getClassHistory(key).pop()>")
chamada antiga: assertArrayEquals(DUMMY, resource.getFileHistory(key).pop())
nova chamada: assertArrayEquals(DUMMY, resource.getFileHistory(key).pop(), "Era esperado arrays iguais, mas  DUMMY é diferente de " + result144 + " <resource.getFileHistory(key).pop()>")
chamada antiga: assertArrayEquals(initial, resource.getFileHistory(key).pop())
nova chamada: assertArrayEquals(initial, resource.getFileHistory(key).pop(), "Era esperado arrays iguais, mas  initial é diferente de " + result145 + " <resource.getFileHistory(key).pop()>")
chamada antiga: assertTrue(c.compile())
nova chamada: assertTrue(c.compile(), "Era esperado verdadeiro, mas " + result146 + " <c.compile()> é falso")
chamada antiga: assertNotNull(outer)
nova chamada: assertNotNull(outer, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(inner)
nova chamada: assertNotNull(inner, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(cDebug.compile())
nova chamada: assertTrue(cDebug.compile(), "Era esperado verdadeiro, mas " + result147 + " <cDebug.compile()> é falso")
chamada antiga: assertTrue(cNone.compile())
nova chamada: assertTrue(cNone.compile(), "Era esperado verdadeiro, mas " + result148 + " <cNone.compile()> é falso")
chamada antiga: assertNotNull(debug)
nova chamada: assertNotNull(debug, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(nodebug)
nova chamada: assertNotNull(nodebug, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(debug.length > nodebug.length)
nova chamada: assertTrue(debug.length > nodebug.length, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("calc.jar", controller.getWorkspace().getPrimary().getShortName().toString())
nova chamada: assertEquals("calc.jar", controller.getWorkspace().getPrimary().getShortName().toString(), "Era esperado valores iguais, mas  'calc.jar' é diferente de " + result149 + " <controller.getWorkspace().getPrimary().getShortName().toString()>")
chamada antiga: assertEquals("Manifest.jar", controller.getWorkspace().getPrimary().getShortName().toString())
nova chamada: assertEquals("Manifest.jar", controller.getWorkspace().getPrimary().getShortName().toString(), "Era esperado valores iguais, mas  'Manifest.jar' é diferente de " + result150 + " <controller.getWorkspace().getPrimary().getShortName().toString()>")
chamada antiga: assertNotEquals(manifestBytes, null)
nova chamada: assertNotEquals(manifestBytes, null, "Era esperado valores diferentes, mas  manifestBytes é igual a " + " null")
chamada antiga: assertEquals(attr.size(), 2)
nova chamada: assertEquals(attr.size(), 2, "Era esperado valores iguais, mas " + result151 + " <attr.size()> é diferente de " + " 2")
chamada antiga: assertEquals(mainClass, "Code/Code/Code")
nova chamada: assertEquals(mainClass, "Code/Code/Code", "Era esperado valores iguais, mas  mainClass é diferente de " + " 'Code/Code/Code'")
chamada antiga: assertEquals(mainClass, "some/pkg/Main")
nova chamada: assertEquals(mainClass, "some/pkg/Main", "Era esperado valores iguais, mas  mainClass é diferente de " + " 'some/pkg/Main'")
chamada antiga: assertTrue(putted.contains(valueToPut))
nova chamada: assertTrue(putted.contains(valueToPut), "Era esperado verdadeiro, mas " + result152 + " <putted.contains(valueToPut)> é falso")
chamada antiga: assertTrue(resource.getDirtyClasses().contains(valueToPut))
nova chamada: assertTrue(resource.getDirtyClasses().contains(valueToPut), "Era esperado verdadeiro, mas " + result153 + " <resource.getDirtyClasses().contains(valueToPut)> é falso")
chamada antiga: assertTrue(putted.contains(valueToPut))
nova chamada: assertTrue(putted.contains(valueToPut), "Era esperado verdadeiro, mas " + result154 + " <putted.contains(valueToPut)> é falso")
chamada antiga: assertTrue(resource.getDirtyFiles().contains(valueToPut))
nova chamada: assertTrue(resource.getDirtyFiles().contains(valueToPut), "Era esperado verdadeiro, mas " + result155 + " <resource.getDirtyFiles().contains(valueToPut)> é falso")
chamada antiga: assertTrue(putted.contains(valueToPut1))
nova chamada: assertTrue(putted.contains(valueToPut1), "Era esperado verdadeiro, mas " + result156 + " <putted.contains(valueToPut1)> é falso")
chamada antiga: assertTrue(putted.contains(valueToPut2))
nova chamada: assertTrue(putted.contains(valueToPut2), "Era esperado verdadeiro, mas " + result157 + " <putted.contains(valueToPut2)> é falso")
chamada antiga: assertTrue(resource.getDirtyClasses().contains(valueToPut1))
nova chamada: assertTrue(resource.getDirtyClasses().contains(valueToPut1), "Era esperado verdadeiro, mas " + result158 + " <resource.getDirtyClasses().contains(valueToPut1)> é falso")
chamada antiga: assertTrue(resource.getDirtyClasses().contains(valueToPut2))
nova chamada: assertTrue(resource.getDirtyClasses().contains(valueToPut2), "Era esperado verdadeiro, mas " + result159 + " <resource.getDirtyClasses().contains(valueToPut2)> é falso")
chamada antiga: assertTrue(putted.contains(valueToPut1))
nova chamada: assertTrue(putted.contains(valueToPut1), "Era esperado verdadeiro, mas " + result160 + " <putted.contains(valueToPut1)> é falso")
chamada antiga: assertTrue(putted.contains(valueToPut2))
nova chamada: assertTrue(putted.contains(valueToPut2), "Era esperado verdadeiro, mas " + result161 + " <putted.contains(valueToPut2)> é falso")
chamada antiga: assertTrue(resource.getDirtyFiles().contains(valueToPut1))
nova chamada: assertTrue(resource.getDirtyFiles().contains(valueToPut1), "Era esperado verdadeiro, mas " + result162 + " <resource.getDirtyFiles().contains(valueToPut1)> é falso")
chamada antiga: assertTrue(resource.getDirtyFiles().contains(valueToPut2))
nova chamada: assertTrue(resource.getDirtyFiles().contains(valueToPut2), "Era esperado verdadeiro, mas " + result163 + " <resource.getDirtyFiles().contains(valueToPut2)> é falso")
chamada antiga: assertTrue(removed.contains(valueToRemove))
nova chamada: assertTrue(removed.contains(valueToRemove), "Era esperado verdadeiro, mas " + result164 + " <removed.contains(valueToRemove)> é falso")
chamada antiga: assertTrue(removed.contains(valueToRemove))
nova chamada: assertTrue(removed.contains(valueToRemove), "Era esperado verdadeiro, mas " + result165 + " <removed.contains(valueToRemove)> é falso")
chamada antiga: assertEquals(1, one.getEdges().size())
nova chamada: assertEquals(1, one.getEdges().size(), "Era esperado valores iguais, mas  1 é diferente de " + result166 + " <one.getEdges().size()>")
chamada antiga: assertEquals("java/io/PrintStream", other.getOwner())
nova chamada: assertEquals("java/io/PrintStream", other.getOwner(), "Era esperado valores iguais, mas  'java/io/PrintStream' é diferente de " + result167 + " <other.getOwner()>")
chamada antiga: assertEquals("println", other.getName())
nova chamada: assertEquals("println", other.getName(), "Era esperado valores iguais, mas  'println' é diferente de " + result168 + " <other.getName()>")
chamada antiga: assertEquals("(Ljava/lang/String;)V", other.getDesc())
nova chamada: assertEquals("(Ljava/lang/String;)V", other.getDesc(), "Era esperado valores iguais, mas  '(Ljava/lang/String;)V' é diferente de " + result169 + " <other.getDesc()>")
chamada antiga: assertEquals(count, calledCount)
nova chamada: assertEquals(count, calledCount, "Era esperado valores iguais, mas  count é diferente de " + " calledCount")
chamada antiga: assertNotNull(result)
nova chamada: assertNotNull(result, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(3, path.size())
nova chamada: assertEquals(3, path.size(), "Era esperado valores iguais, mas  3 é diferente de " + result170 + " <path.size()>")
chamada antiga: assertEquals(one, path.get(0))
nova chamada: assertEquals(one, path.get(0), "Era esperado valores iguais, mas  one é diferente de " + result171 + " <path.get(0)>")
chamada antiga: assertEquals(two, path.get(1))
nova chamada: assertEquals(two, path.get(1), "Era esperado valores iguais, mas  two é diferente de " + result172 + " <path.get(1)>")
chamada antiga: assertEquals(three, path.get(2))
nova chamada: assertEquals(three, path.get(2), "Era esperado valores iguais, mas  three é diferente de " + result173 + " <path.get(2)>")
chamada antiga: assertEquals(two, oneEdge)
nova chamada: assertEquals(two, oneEdge, "Era esperado valores iguais, mas  two é diferente de " + " oneEdge")
chamada antiga: assertEquals(three, twoEdge)
nova chamada: assertEquals(three, twoEdge, "Era esperado valores iguais, mas  three é diferente de " + " twoEdge")
chamada antiga: assertEquals(one, threeEdge)
nova chamada: assertEquals(one, threeEdge, "Era esperado valores iguais, mas  one é diferente de " + " threeEdge")
chamada antiga: assertEquals(parentThing, calledParent)
nova chamada: assertEquals(parentThing, calledParent, "Era esperado valores iguais, mas  parentThing é diferente de " + " calledParent")
chamada antiga: assertEquals(interfaceThing, calledInterface)
nova chamada: assertEquals(interfaceThing, calledInterface, "Era esperado valores iguais, mas  interfaceThing é diferente de " + " calledInterface")
chamada antiga: assertEquals(1, edges.size())
nova chamada: assertEquals(1, edges.size(), "Era esperado valores iguais, mas  1 é diferente de " + result174 + " <edges.size()>")
chamada antiga: assertEquals(1, results.size())
nova chamada: assertEquals(1, results.size(), "Era esperado valores iguais, mas  1 é diferente de " + result175 + " <results.size()>")
chamada antiga: assertEquals("EVAL: ", res.getText())
nova chamada: assertEquals("EVAL: ", res.getText(), "Era esperado valores iguais, mas  'EVAL: ' é diferente de " + result176 + " <res.getText()>")
chamada antiga: assertEquals(2, results.size())
nova chamada: assertEquals(2, results.size(), "Era esperado valores iguais, mas  2 é diferente de " + result177 + " <results.size()>")
chamada antiga: assertEquals(2, results.size())
nova chamada: assertEquals(2, results.size(), "Era esperado valores iguais, mas  2 é diferente de " + result178 + " <results.size()>")
chamada antiga: assertEquals(30, resVal.getValue())
nova chamada: assertEquals(30, resVal.getValue(), "Era esperado valores iguais, mas  30 é diferente de " + result179 + " <resVal.getValue()>")
chamada antiga: assertEquals("EVAL: ", resStr.getText())
nova chamada: assertEquals("EVAL: ", resStr.getText(), "Era esperado valores iguais, mas  'EVAL: ' é diferente de " + result180 + " <resStr.getText()>")
chamada antiga: assertEquals(4, results.size())
nova chamada: assertEquals(4, results.size(), "Era esperado valores iguais, mas  4 é diferente de " + result181 + " <results.size()>")
chamada antiga: assertEquals(4, results.size())
nova chamada: assertEquals(4, results.size(), "Era esperado valores iguais, mas  4 é diferente de " + result182 + " <results.size()>")
chamada antiga: assertTrue(results.contains("calc/Expression.i I"))
nova chamada: assertTrue(results.contains("calc/Expression.i I"), "Era esperado verdadeiro, mas " + result183 + " <results.contains('calc/Expression.i I')> é falso")
chamada antiga: assertTrue(results.contains("calc/Expression.<init>(I)V"))
nova chamada: assertTrue(results.contains("calc/Expression.<init>(I)V"), "Era esperado verdadeiro, mas " + result184 + " <results.contains('calc/Expression.<init>(I)V')> é falso")
chamada antiga: assertTrue(results.contains("calc/Expression.accept(Ljava/lang/String;)D"))
nova chamada: assertTrue(results.contains("calc/Expression.accept(Ljava/lang/String;)D"), "Era esperado verdadeiro, mas " + result185 + " <results.contains('calc/Expression.accept(Ljava/lang/String;)D')> é falso")
chamada antiga: assertTrue(results.contains("calc/Expression.evaluate(Ljava/lang/String;)D"))
nova chamada: assertTrue(results.contains("calc/Expression.evaluate(Ljava/lang/String;)D"), "Era esperado verdadeiro, mas " + result186 + " <results.contains('calc/Expression.evaluate(Ljava/lang/String;)D')> é falso")
chamada antiga: assertEquals(3, results.size())
nova chamada: assertEquals(3, results.size(), "Era esperado valores iguais, mas  3 é diferente de " + result187 + " <results.size()>")
chamada antiga: assertTrue(results.contains("calc/Parenthesis.LEVEL_UNSET I"))
nova chamada: assertTrue(results.contains("calc/Parenthesis.LEVEL_UNSET I"), "Era esperado verdadeiro, mas " + result188 + " <results.contains('calc/Parenthesis.LEVEL_UNSET I')> é falso")
chamada antiga: assertTrue(results.contains("calc/Calculator.MAX_DEPTH I"))
nova chamada: assertTrue(results.contains("calc/Calculator.MAX_DEPTH I"), "Era esperado verdadeiro, mas " + result189 + " <results.contains('calc/Calculator.MAX_DEPTH I')> é falso")
chamada antiga: assertTrue(results.contains("calc/Expression.i I"))
nova chamada: assertTrue(results.contains("calc/Expression.i I"), "Era esperado verdadeiro, mas " + result190 + " <results.contains('calc/Expression.i I')> é falso")
chamada antiga: assertEquals(3, results.size())
nova chamada: assertEquals(3, results.size(), "Era esperado valores iguais, mas  3 é diferente de " + result191 + " <results.size()>")
chamada antiga: assertEquals(2, exp)
nova chamada: assertEquals(2, exp, "Era esperado valores iguais, mas  2 é diferente de " + " exp")
chamada antiga: assertEquals(1, calc)
nova chamada: assertEquals(1, calc, "Era esperado valores iguais, mas  1 é diferente de " + " calc")
chamada antiga: assertEquals(2, results.size())
nova chamada: assertEquals(2, results.size(), "Era esperado valores iguais, mas  2 é diferente de " + result192 + " <results.size()>")
chamada antiga: assertEquals(0, results.size())
nova chamada: assertEquals(0, results.size(), "Era esperado valores iguais, mas  0 é diferente de " + result193 + " <results.size()>")
chamada antiga: assertEquals(1, results.size())
nova chamada: assertEquals(1, results.size(), "Era esperado valores iguais, mas  1 é diferente de " + result194 + " <results.size()>")
chamada antiga: assertEquals("Start", ((ClassResult) results.get(0)).getName())
nova chamada: assertEquals("Start", ((ClassResult) results.get(0)).getName(), "Era esperado valores iguais, mas  'Start' é diferente de " + result195 + " <((ClassResult) results.get(0)).getName()>")
chamada antiga: assertEquals(1, results.size())
nova chamada: assertEquals(1, results.size(), "Era esperado valores iguais, mas  1 é diferente de " + result196 + " <results.size()>")
chamada antiga: assertEquals("Start", ((ClassResult) results.get(0)).getName())
nova chamada: assertEquals("Start", ((ClassResult) results.get(0)).getName(), "Era esperado valores iguais, mas  'Start' é diferente de " + result197 + " <((ClassResult) results.get(0)).getName()>")
chamada antiga: assertEquals(1, results.size())
nova chamada: assertEquals(1, results.size(), "Era esperado valores iguais, mas  1 é diferente de " + result198 + " <results.size()>")
chamada antiga: assertEquals("calc/Parenthesis", ((ClassResult) results.get(0)).getName())
nova chamada: assertEquals("calc/Parenthesis", ((ClassResult) results.get(0)).getName(), "Era esperado valores iguais, mas  'calc/Parenthesis' é diferente de " + result199 + " <((ClassResult) results.get(0)).getName()>")
chamada antiga: assertEquals(1, results.size())
nova chamada: assertEquals(1, results.size(), "Era esperado valores iguais, mas  1 é diferente de " + result200 + " <results.size()>")
chamada antiga: assertEquals("Start", ((ClassResult) results.get(0)).getName())
nova chamada: assertEquals("Start", ((ClassResult) results.get(0)).getName(), "Era esperado valores iguais, mas  'Start' é diferente de " + result201 + " <((ClassResult) results.get(0)).getName()>")
chamada antiga: assertEquals(5, results.size())
nova chamada: assertEquals(5, results.size(), "Era esperado valores iguais, mas  5 é diferente de " + result202 + " <results.size()>")
chamada antiga: assertTrue(results.contains("calc/Parenthesis"))
nova chamada: assertTrue(results.contains("calc/Parenthesis"), "Era esperado verdadeiro, mas " + result203 + " <results.contains('calc/Parenthesis')> é falso")
chamada antiga: assertTrue(results.contains("calc/Exponent"))
nova chamada: assertTrue(results.contains("calc/Exponent"), "Era esperado verdadeiro, mas " + result204 + " <results.contains('calc/Exponent')> é falso")
chamada antiga: assertTrue(results.contains("calc/MultAndDiv"))
nova chamada: assertTrue(results.contains("calc/MultAndDiv"), "Era esperado verdadeiro, mas " + result205 + " <results.contains('calc/MultAndDiv')> é falso")
chamada antiga: assertTrue(results.contains("calc/AddAndSub"))
nova chamada: assertTrue(results.contains("calc/AddAndSub"), "Era esperado verdadeiro, mas " + result206 + " <results.contains('calc/AddAndSub')> é falso")
chamada antiga: assertTrue(results.contains("calc/Constant"))
nova chamada: assertTrue(results.contains("calc/Constant"), "Era esperado verdadeiro, mas " + result207 + " <results.contains('calc/Constant')> é falso")
chamada antiga: assertTrue(context instanceof Context.MemberContext)
nova chamada: assertTrue(context instanceof Context.MemberContext, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(owner, member.getParent().getName())
nova chamada: assertEquals(owner, member.getParent().getName(), "Era esperado valores iguais, mas  owner é diferente de " + result208 + " <member.getParent().getName()>")
chamada antiga: assertEquals(name, member.getName())
nova chamada: assertEquals(name, member.getName(), "Era esperado valores iguais, mas  name é diferente de " + result209 + " <member.getName()>")
chamada antiga: assertEquals(desc, member.getDesc())
nova chamada: assertEquals(desc, member.getDesc(), "Era esperado valores iguais, mas  desc é diferente de " + result210 + " <member.getDesc()>")
chamada antiga: assertEquals(msg, ast.getComment())
nova chamada: assertEquals(msg, ast.getComment(), "Era esperado valores iguais, mas  msg é diferente de " + result211 + " <ast.getComment()>")
chamada antiga: assertEquals(line, ast.print())
nova chamada: assertEquals(line, ast.print(), "Era esperado valores iguais, mas  line é diferente de " + result212 + " <ast.print()>")
chamada antiga: assertEquals(sig, ast.getSignature())
nova chamada: assertEquals(sig, ast.getSignature(), "Era esperado valores iguais, mas  sig é diferente de " + result213 + " <ast.getSignature()>")
chamada antiga: assertEquals(pre + sig, ast.print())
nova chamada: assertEquals(pre + sig, ast.print(), "Era esperado valores iguais, mas  pre + sig é diferente de " + result214 + " <ast.print()>")
chamada antiga: assertEquals("LDC \"Hello World\"", ldc.print())
nova chamada: assertEquals("LDC \"Hello World\"", ldc.print(), "Era esperado valores iguais, mas  'LDC \'Hello World\'' é diferente de " + result215 + " <ldc.print()>")
chamada antiga: assertEquals("LDC \"Hello World\"", ldc.print())
nova chamada: assertEquals("LDC \"Hello World\"", ldc.print(), "Era esperado valores iguais, mas  'LDC \'Hello World\'' é diferente de " + result216 + " <ldc.print()>")
chamada antiga: assertEquals(msg, ast.getComment())
nova chamada: assertEquals(msg, ast.getComment(), "Era esperado valores iguais, mas  msg é diferente de " + result217 + " <ast.getComment()>")
chamada antiga: assertEquals(line, ast.print())
nova chamada: assertEquals(line, ast.print(), "Era esperado valores iguais, mas  line é diferente de " + result218 + " <ast.print()>")
chamada antiga: assertEquals(name, ast.getName().getName())
nova chamada: assertEquals(name, ast.getName().getName(), "Era esperado valores iguais, mas  name é diferente de " + result219 + " <ast.getName().getName()>")
chamada antiga: assertEquals(line, ast.print())
nova chamada: assertEquals(line, ast.print(), "Era esperado valores iguais, mas  line é diferente de " + result220 + " <ast.print()>")
chamada antiga: assertEquals(type, ast.getType().getType())
nova chamada: assertEquals(type, ast.getType().getType(), "Era esperado valores iguais, mas  type é diferente de " + result221 + " <ast.getType().getType()>")
chamada antiga: assertEquals(line, ast.print())
nova chamada: assertEquals(line, ast.print(), "Era esperado valores iguais, mas  line é diferente de " + result222 + " <ast.print()>")
chamada antiga: assertEquals("main", def.getName().getName())
nova chamada: assertEquals("main", def.getName().getName(), "Era esperado valores iguais, mas  'main' é diferente de " + result223 + " <def.getName().getName()>")
chamada antiga: assertEquals(2, def.getModifiers().size())
nova chamada: assertEquals(2, def.getModifiers().size(), "Era esperado valores iguais, mas  2 é diferente de " + result224 + " <def.getModifiers().size()>")
chamada antiga: assertEquals("public", def.getModifiers().get(0).getName())
nova chamada: assertEquals("public", def.getModifiers().get(0).getName(), "Era esperado valores iguais, mas  'public' é diferente de " + result225 + " <def.getModifiers().get(0).getName()>")
chamada antiga: assertEquals("static", def.getModifiers().get(1).getName())
nova chamada: assertEquals("static", def.getModifiers().get(1).getName(), "Era esperado valores iguais, mas  'static' é diferente de " + result226 + " <def.getModifiers().get(1).getName()>")
chamada antiga: assertEquals(1, def.getArguments().size())
nova chamada: assertEquals(1, def.getArguments().size(), "Era esperado valores iguais, mas  1 é diferente de " + result227 + " <def.getArguments().size()>")
chamada antiga: assertEquals("[Ljava/lang/String;", def.getArguments().get(0).getDesc().getDesc())
nova chamada: assertEquals("[Ljava/lang/String;", def.getArguments().get(0).getDesc().getDesc(), "Era esperado valores iguais, mas  '[Ljava/lang/String;' é diferente de " + result228 + " <def.getArguments().get(0).getDesc().getDesc()>")
chamada antiga: assertEquals("args", def.getArguments().get(0).getVariableName().getName())
nova chamada: assertEquals("args", def.getArguments().get(0).getVariableName().getName(), "Era esperado valores iguais, mas  'args' é diferente de " + result229 + " <def.getArguments().get(0).getVariableName().getName()>")
chamada antiga: assertEquals("V", def.getReturnType().getDesc())
nova chamada: assertEquals("V", def.getReturnType().getDesc(), "Era esperado valores iguais, mas  'V' é diferente de " + result230 + " <def.getReturnType().getDesc()>")
chamada antiga: assertEquals("myList", def.getName().getName())
nova chamada: assertEquals("myList", def.getName().getName(), "Era esperado valores iguais, mas  'myList' é diferente de " + result231 + " <def.getName().getName()>")
chamada antiga: assertEquals(2, def.getModifiers().size())
nova chamada: assertEquals(2, def.getModifiers().size(), "Era esperado valores iguais, mas  2 é diferente de " + result232 + " <def.getModifiers().size()>")
chamada antiga: assertEquals("public", def.getModifiers().get(0).getName())
nova chamada: assertEquals("public", def.getModifiers().get(0).getName(), "Era esperado valores iguais, mas  'public' é diferente de " + result233 + " <def.getModifiers().get(0).getName()>")
chamada antiga: assertEquals("static", def.getModifiers().get(1).getName())
nova chamada: assertEquals("static", def.getModifiers().get(1).getName(), "Era esperado valores iguais, mas  'static' é diferente de " + result234 + " <def.getModifiers().get(1).getName()>")
chamada antiga: assertEquals("Ljava/util/List;", def.getType().getDesc())
nova chamada: assertEquals("Ljava/util/List;", def.getType().getDesc(), "Era esperado valores iguais, mas  'Ljava/util/List;' é diferente de " + result235 + " <def.getType().getDesc()>")
chamada antiga: assertEquals("func", def.getName().getName())
nova chamada: assertEquals("func", def.getName().getName(), "Era esperado valores iguais, mas  'func' é diferente de " + result236 + " <def.getName().getName()>")
chamada antiga: assertEquals(0, def.getModifiers().size())
nova chamada: assertEquals(0, def.getModifiers().size(), "Era esperado valores iguais, mas  0 é diferente de " + result237 + " <def.getModifiers().size()>")
chamada antiga: assertEquals("myList", def.getName().getName())
nova chamada: assertEquals("myList", def.getName().getName(), "Era esperado valores iguais, mas  'myList' é diferente de " + result238 + " <def.getName().getName()>")
chamada antiga: assertEquals("Ljava/util/List;", def.getType().getDesc())
nova chamada: assertEquals("Ljava/util/List;", def.getType().getDesc(), "Era esperado valores iguais, mas  'Ljava/util/List;' é diferente de " + result239 + " <def.getType().getDesc()>")
chamada antiga: assertEquals(0, def.getModifiers().size())
nova chamada: assertEquals(0, def.getModifiers().size(), "Era esperado valores iguais, mas  0 é diferente de " + result240 + " <def.getModifiers().size()>")
chamada antiga: assertEquals("myLong", def.getName().getName())
nova chamada: assertEquals("myLong", def.getName().getName(), "Era esperado valores iguais, mas  'myLong' é diferente de " + result241 + " <def.getName().getName()>")
chamada antiga: assertEquals("J", def.getType().getDesc())
nova chamada: assertEquals("J", def.getType().getDesc(), "Era esperado valores iguais, mas  'J' é diferente de " + result242 + " <def.getType().getDesc()>")
chamada antiga: assertEquals(0, def.getModifiers().size())
nova chamada: assertEquals(0, def.getModifiers().size(), "Era esperado valores iguais, mas  0 é diferente de " + result243 + " <def.getModifiers().size()>")
chamada antiga: assertEquals("func", def.getName().getName())
nova chamada: assertEquals("func", def.getName().getName(), "Era esperado valores iguais, mas  'func' é diferente de " + result244 + " <def.getName().getName()>")
chamada antiga: assertEquals(0, def.getArguments().size())
nova chamada: assertEquals(0, def.getArguments().size(), "Era esperado valores iguais, mas  0 é diferente de " + result245 + " <def.getArguments().size()>")
chamada antiga: assertEquals("func", def.getName().getName())
nova chamada: assertEquals("func", def.getName().getName(), "Era esperado valores iguais, mas  'func' é diferente de " + result246 + " <def.getName().getName()>")
chamada antiga: assertEquals(2, def.getArguments().size())
nova chamada: assertEquals(2, def.getArguments().size(), "Era esperado valores iguais, mas  2 é diferente de " + result247 + " <def.getArguments().size()>")
chamada antiga: assertEquals("I", def.getArguments().get(0).getDesc().getDesc())
nova chamada: assertEquals("I", def.getArguments().get(0).getDesc().getDesc(), "Era esperado valores iguais, mas  'I' é diferente de " + result248 + " <def.getArguments().get(0).getDesc().getDesc()>")
chamada antiga: assertEquals("int1", def.getArguments().get(0).getVariableName().getName())
nova chamada: assertEquals("int1", def.getArguments().get(0).getVariableName().getName(), "Era esperado valores iguais, mas  'int1' é diferente de " + result249 + " <def.getArguments().get(0).getVariableName().getName()>")
chamada antiga: assertEquals("I", def.getArguments().get(1).getDesc().getDesc())
nova chamada: assertEquals("I", def.getArguments().get(1).getDesc().getDesc(), "Era esperado valores iguais, mas  'I' é diferente de " + result250 + " <def.getArguments().get(1).getDesc().getDesc()>")
chamada antiga: assertEquals("int2", def.getArguments().get(1).getVariableName().getName())
nova chamada: assertEquals("int2", def.getArguments().get(1).getVariableName().getName(), "Era esperado valores iguais, mas  'int2' é diferente de " + result251 + " <def.getArguments().get(1).getVariableName().getName()>")
chamada antiga: assertEquals("start", def.getLblStart().getName())
nova chamada: assertEquals("start", def.getLblStart().getName(), "Era esperado valores iguais, mas  'start' é diferente de " + result252 + " <def.getLblStart().getName()>")
chamada antiga: assertEquals("end", def.getLblEnd().getName())
nova chamada: assertEquals("end", def.getLblEnd().getName(), "Era esperado valores iguais, mas  'end' é diferente de " + result253 + " <def.getLblEnd().getName()>")
chamada antiga: assertEquals("handler", def.getLblHandler().getName())
nova chamada: assertEquals("handler", def.getLblHandler().getName(), "Era esperado valores iguais, mas  'handler' é diferente de " + result254 + " <def.getLblHandler().getName()>")
chamada antiga: assertEquals("java/lang/Exception", def.getType().getType())
nova chamada: assertEquals("java/lang/Exception", def.getType().getType(), "Era esperado valores iguais, mas  'java/lang/Exception' é diferente de " + result255 + " <def.getType().getType()>")
chamada antiga: assertEquals(root.getChildren().get(0), root.getChildren().get(1).getPrev())
nova chamada: assertEquals(root.getChildren().get(0), root.getChildren().get(1).getPrev(), "Era esperado valores iguais, mas " + result256 + " <root.getChildren().get(0)> é diferente de " + result257 + " <root.getChildren().get(1).getPrev()>")
chamada antiga: assertEquals(root.getChildren().get(1), root.getChildren().get(2).getPrev())
nova chamada: assertEquals(root.getChildren().get(1), root.getChildren().get(2).getPrev(), "Era esperado valores iguais, mas " + result258 + " <root.getChildren().get(1)> é diferente de " + result259 + " <root.getChildren().get(2).getPrev()>")
chamada antiga: assertEquals(root.getChildren().get(1), root.getChildren().get(0).getNext())
nova chamada: assertEquals(root.getChildren().get(1), root.getChildren().get(0).getNext(), "Era esperado valores iguais, mas " + result260 + " <root.getChildren().get(1)> é diferente de " + result261 + " <root.getChildren().get(0).getNext()>")
chamada antiga: assertEquals(root.getChildren().get(2), root.getChildren().get(1).getNext())
nova chamada: assertEquals(root.getChildren().get(2), root.getChildren().get(1).getNext(), "Era esperado valores iguais, mas " + result262 + " <root.getChildren().get(2)> é diferente de " + result263 + " <root.getChildren().get(1).getNext()>")
chamada antiga: assertEquals(line, root.print())
nova chamada: assertEquals(line, root.print(), "Era esperado valores iguais, mas  line é diferente de " + result264 + " <root.print()>")
chamada antiga: assertEquals("ACONST_NULL", root.getChildren().get(0).print())
nova chamada: assertEquals("ACONST_NULL", root.getChildren().get(0).print(), "Era esperado valores iguais, mas  'ACONST_NULL' é diferente de " + result265 + " <root.getChildren().get(0).print()>")
chamada antiga: assertEquals("ARETURN", root.getChildren().get(1).print())
nova chamada: assertEquals("ARETURN", root.getChildren().get(1).print(), "Era esperado valores iguais, mas  'ARETURN' é diferente de " + result266 + " <root.getChildren().get(1).print()>")
chamada antiga: assertEquals(text, iiAst.print())
nova chamada: assertEquals(text, iiAst.print(), "Era esperado valores iguais, mas  text é diferente de " + result267 + " <iiAst.print()>")
chamada antiga: assertEquals("BIPUSH", iiAst.getOpcode().print())
nova chamada: assertEquals("BIPUSH", iiAst.getOpcode().print(), "Era esperado valores iguais, mas  'BIPUSH' é diferente de " + result268 + " <iiAst.getOpcode().print()>")
chamada antiga: assertEquals(5, iiAst.getValue().getIntValue())
nova chamada: assertEquals(5, iiAst.getValue().getIntValue(), "Era esperado valores iguais, mas  5 é diferente de " + result269 + " <iiAst.getValue().getIntValue()>")
chamada antiga: assertEquals(text, iiAst.print())
nova chamada: assertEquals(text, iiAst.print(), "Era esperado valores iguais, mas  text é diferente de " + result270 + " <iiAst.print()>")
chamada antiga: assertEquals("ILOAD", iiAst.getOpcode().print())
nova chamada: assertEquals("ILOAD", iiAst.getOpcode().print(), "Era esperado valores iguais, mas  'ILOAD' é diferente de " + result271 + " <iiAst.getOpcode().print()>")
chamada antiga: assertEquals("i", iiAst.getVariableName().getName())
nova chamada: assertEquals("i", iiAst.getVariableName().getName(), "Era esperado valores iguais, mas  'i' é diferente de " + result272 + " <iiAst.getVariableName().getName()>")
chamada antiga: assertEquals(text, tiAST.print())
nova chamada: assertEquals(text, tiAST.print(), "Era esperado valores iguais, mas  text é diferente de " + result273 + " <tiAST.print()>")
chamada antiga: assertEquals("NEW", tiAST.getOpcode().print())
nova chamada: assertEquals("NEW", tiAST.getOpcode().print(), "Era esperado valores iguais, mas  'NEW' é diferente de " + result274 + " <tiAST.getOpcode().print()>")
chamada antiga: assertEquals("java/lang/String", tiAST.getType().getType())
nova chamada: assertEquals("java/lang/String", tiAST.getType().getType(), "Era esperado valores iguais, mas  'java/lang/String' é diferente de " + result275 + " <tiAST.getType().getType()>")
chamada antiga: assertEquals(text, tiAST.print())
nova chamada: assertEquals(text, tiAST.print(), "Era esperado valores iguais, mas  text é diferente de " + result276 + " <tiAST.print()>")
chamada antiga: assertEquals("IINC", tiAST.getOpcode().print())
nova chamada: assertEquals("IINC", tiAST.getOpcode().print(), "Era esperado valores iguais, mas  'IINC' é diferente de " + result277 + " <tiAST.getOpcode().print()>")
chamada antiga: assertEquals("i", tiAST.getVariableName().getName())
nova chamada: assertEquals("i", tiAST.getVariableName().getName(), "Era esperado valores iguais, mas  'i' é diferente de " + result278 + " <tiAST.getVariableName().getName()>")
chamada antiga: assertEquals(2, tiAST.getIncrement().getIntValue())
nova chamada: assertEquals(2, tiAST.getIncrement().getIntValue(), "Era esperado valores iguais, mas  2 é diferente de " + result279 + " <tiAST.getIncrement().getIntValue()>")
chamada antiga: assertEquals(text, lineAST.print())
nova chamada: assertEquals(text, lineAST.print(), "Era esperado valores iguais, mas  text é diferente de " + result280 + " <lineAST.print()>")
chamada antiga: assertEquals("LINE", lineAST.getOpcode().print())
nova chamada: assertEquals("LINE", lineAST.getOpcode().print(), "Era esperado valores iguais, mas  'LINE' é diferente de " + result281 + " <lineAST.getOpcode().print()>")
chamada antiga: assertEquals("lbl", lineAST.getLabel().getName())
nova chamada: assertEquals("lbl", lineAST.getLabel().getName(), "Era esperado valores iguais, mas  'lbl' é diferente de " + result282 + " <lineAST.getLabel().getName()>")
chamada antiga: assertEquals(2, lineAST.getLineNumber().getIntValue())
nova chamada: assertEquals(2, lineAST.getLineNumber().getIntValue(), "Era esperado valores iguais, mas  2 é diferente de " + result283 + " <lineAST.getLineNumber().getIntValue()>")
chamada antiga: assertEquals(text, arrayAST.print())
nova chamada: assertEquals(text, arrayAST.print(), "Era esperado valores iguais, mas  text é diferente de " + result284 + " <arrayAST.print()>")
chamada antiga: assertEquals(TypeUtil.typeToNewArrayArg(Type.INT_TYPE), arrayAST.getValue().getIntValue())
nova chamada: assertEquals(TypeUtil.typeToNewArrayArg(Type.INT_TYPE), arrayAST.getValue().getIntValue(), "Era esperado valores iguais, mas " + result285 + " <TypeUtil.typeToNewArrayArg(Type.INT_TYPE)> é diferente de " + result286 + " <arrayAST.getValue().getIntValue()>")
chamada antiga: assertEquals(text, arrayAST.print())
nova chamada: assertEquals(text, arrayAST.print(), "Era esperado valores iguais, mas  text é diferente de " + result287 + " <arrayAST.print()>")
chamada antiga: assertEquals("MULTIANEWARRAY", arrayAST.getOpcode().print())
nova chamada: assertEquals("MULTIANEWARRAY", arrayAST.getOpcode().print(), "Era esperado valores iguais, mas  'MULTIANEWARRAY' é diferente de " + result288 + " <arrayAST.getOpcode().print()>")
chamada antiga: assertEquals("[[Ljava/lang/String;", arrayAST.getDesc().getDesc())
nova chamada: assertEquals("[[Ljava/lang/String;", arrayAST.getDesc().getDesc(), "Era esperado valores iguais, mas  '[[Ljava/lang/String;' é diferente de " + result289 + " <arrayAST.getDesc().getDesc()>")
chamada antiga: assertEquals(2, arrayAST.getDimensions().getIntValue())
nova chamada: assertEquals(2, arrayAST.getDimensions().getIntValue(), "Era esperado valores iguais, mas  2 é diferente de " + result290 + " <arrayAST.getDimensions().getIntValue()>")
chamada antiga: assertEquals(text, fieldAST.print())
nova chamada: assertEquals(text, fieldAST.print(), "Era esperado valores iguais, mas  text é diferente de " + result291 + " <fieldAST.print()>")
chamada antiga: assertEquals("GETSTATIC", fieldAST.getOpcode().print())
nova chamada: assertEquals("GETSTATIC", fieldAST.getOpcode().print(), "Era esperado valores iguais, mas  'GETSTATIC' é diferente de " + result292 + " <fieldAST.getOpcode().print()>")
chamada antiga: assertEquals("java/lang/System", fieldAST.getOwner().getType())
nova chamada: assertEquals("java/lang/System", fieldAST.getOwner().getType(), "Era esperado valores iguais, mas  'java/lang/System' é diferente de " + result293 + " <fieldAST.getOwner().getType()>")
chamada antiga: assertEquals("out", fieldAST.getName().getName())
nova chamada: assertEquals("out", fieldAST.getName().getName(), "Era esperado valores iguais, mas  'out' é diferente de " + result294 + " <fieldAST.getName().getName()>")
chamada antiga: assertEquals("Ljava/io/PrintStream;", fieldAST.getDesc().getDesc())
nova chamada: assertEquals("Ljava/io/PrintStream;", fieldAST.getDesc().getDesc(), "Era esperado valores iguais, mas  'Ljava/io/PrintStream;' é diferente de " + result295 + " <fieldAST.getDesc().getDesc()>")
chamada antiga: assertEquals(text, methodAST.print())
nova chamada: assertEquals(text, methodAST.print(), "Era esperado valores iguais, mas  text é diferente de " + result296 + " <methodAST.print()>")
chamada antiga: assertEquals("INVOKEVIRTUAL", methodAST.getOpcode().print())
nova chamada: assertEquals("INVOKEVIRTUAL", methodAST.getOpcode().print(), "Era esperado valores iguais, mas  'INVOKEVIRTUAL' é diferente de " + result297 + " <methodAST.getOpcode().print()>")
chamada antiga: assertEquals("java/io/PrintStream", methodAST.getOwner().getType())
nova chamada: assertEquals("java/io/PrintStream", methodAST.getOwner().getType(), "Era esperado valores iguais, mas  'java/io/PrintStream' é diferente de " + result298 + " <methodAST.getOwner().getType()>")
chamada antiga: assertEquals("println", methodAST.getName().getName())
nova chamada: assertEquals("println", methodAST.getName().getName(), "Era esperado valores iguais, mas  'println' é diferente de " + result299 + " <methodAST.getName().getName()>")
chamada antiga: assertEquals("(Ljava/lang/String;)V", methodAST.getDesc().getDesc())
nova chamada: assertEquals("(Ljava/lang/String;)V", methodAST.getDesc().getDesc(), "Era esperado valores iguais, mas  '(Ljava/lang/String;)V' é diferente de " + result300 + " <methodAST.getDesc().getDesc()>")
chamada antiga: assertEquals(text, methodAST.print())
nova chamada: assertEquals(text, methodAST.print(), "Era esperado valores iguais, mas  text é diferente de " + result301 + " <methodAST.print()>")
chamada antiga: assertEquals("INVOKEVIRTUAL", methodAST.getOpcode().print())
nova chamada: assertEquals("INVOKEVIRTUAL", methodAST.getOpcode().print(), "Era esperado valores iguais, mas  'INVOKEVIRTUAL' é diferente de " + result302 + " <methodAST.getOpcode().print()>")
chamada antiga: assertEquals("java/lang/String", methodAST.getOwner().getType())
nova chamada: assertEquals("java/lang/String", methodAST.getOwner().getType(), "Era esperado valores iguais, mas  'java/lang/String' é diferente de " + result303 + " <methodAST.getOwner().getType()>")
chamada antiga: assertEquals("getBytes", methodAST.getName().getName())
nova chamada: assertEquals("getBytes", methodAST.getName().getName(), "Era esperado valores iguais, mas  'getBytes' é diferente de " + result304 + " <methodAST.getName().getName()>")
chamada antiga: assertEquals("()[B", methodAST.getDesc().getDesc())
nova chamada: assertEquals("()[B", methodAST.getDesc().getDesc(), "Era esperado valores iguais, mas  '()[B' é diferente de " + result305 + " <methodAST.getDesc().getDesc()>")
chamada antiga: assertEquals(text, ldc.print())
nova chamada: assertEquals(text, ldc.print(), "Era esperado valores iguais, mas  text é diferente de " + result306 + " <ldc.print()>")
chamada antiga: assertEquals("LDC", ldc.getOpcode().print())
nova chamada: assertEquals("LDC", ldc.getOpcode().print(), "Era esperado valores iguais, mas  'LDC' é diferente de " + result307 + " <ldc.getOpcode().print()>")
chamada antiga: assertEquals(1, ((NumberAST) ldc.getContent()).getIntValue())
nova chamada: assertEquals(1, ((NumberAST) ldc.getContent()).getIntValue(), "Era esperado valores iguais, mas  1 é diferente de " + result308 + " <((NumberAST) ldc.getContent()).getIntValue()>")
chamada antiga: assertEquals(text, ldc.print())
nova chamada: assertEquals(text, ldc.print(), "Era esperado valores iguais, mas  text é diferente de " + result309 + " <ldc.print()>")
chamada antiga: assertEquals(-10, ((NumberAST) ldc.getContent()).getIntValue())
nova chamada: assertEquals(-10, ((NumberAST) ldc.getContent()).getIntValue(), "Era esperado valores iguais, mas  -10 é diferente de " + result310 + " <((NumberAST) ldc.getContent()).getIntValue()>")
chamada antiga: assertEquals(text, ldc.print())
nova chamada: assertEquals(text, ldc.print(), "Era esperado valores iguais, mas  text é diferente de " + result311 + " <ldc.print()>")
chamada antiga: assertEquals(10000000000L, ((NumberAST) ldc.getContent()).getLongValue())
nova chamada: assertEquals(10000000000L, ((NumberAST) ldc.getContent()).getLongValue(), "Era esperado valores iguais, mas  10000000000L é diferente de " + result312 + " <((NumberAST) ldc.getContent()).getLongValue()>")
chamada antiga: assertEquals(text, ldc.print())
nova chamada: assertEquals(text, ldc.print(), "Era esperado valores iguais, mas  text é diferente de " + result313 + " <ldc.print()>")
chamada antiga: assertEquals(-10000000000L, ((NumberAST) ldc.getContent()).getLongValue())
nova chamada: assertEquals(-10000000000L, ((NumberAST) ldc.getContent()).getLongValue(), "Era esperado valores iguais, mas  -10000000000L é diferente de " + result314 + " <((NumberAST) ldc.getContent()).getLongValue()>")
chamada antiga: assertEquals(text, ldc.print())
nova chamada: assertEquals(text, ldc.print(), "Era esperado valores iguais, mas  text é diferente de " + result315 + " <ldc.print()>")
chamada antiga: assertEquals(2.5, ((NumberAST) ldc.getContent()).getDoubleValue())
nova chamada: assertEquals(2.5, ((NumberAST) ldc.getContent()).getDoubleValue(), "Era esperado valores iguais, mas  2.5 é diferente de " + result316 + " <((NumberAST) ldc.getContent()).getDoubleValue()>")
chamada antiga: assertEquals(text, ldc.print())
nova chamada: assertEquals(text, ldc.print(), "Era esperado valores iguais, mas  text é diferente de " + result317 + " <ldc.print()>")
chamada antiga: assertEquals(-2.5, ((NumberAST) ldc.getContent()).getDoubleValue())
nova chamada: assertEquals(-2.5, ((NumberAST) ldc.getContent()).getDoubleValue(), "Era esperado valores iguais, mas  -2.5 é diferente de " + result318 + " <((NumberAST) ldc.getContent()).getDoubleValue()>")
chamada antiga: assertEquals(text, ldc.print())
nova chamada: assertEquals(text, ldc.print(), "Era esperado valores iguais, mas  text é diferente de " + result319 + " <ldc.print()>")
chamada antiga: assertEquals(2.6F, ((NumberAST) ldc.getContent()).getFloatValue())
nova chamada: assertEquals(2.6F, ((NumberAST) ldc.getContent()).getFloatValue(), "Era esperado valores iguais, mas  2.6F é diferente de " + result320 + " <((NumberAST) ldc.getContent()).getFloatValue()>")
chamada antiga: assertEquals(text, ldc.print())
nova chamada: assertEquals(text, ldc.print(), "Era esperado valores iguais, mas  text é diferente de " + result321 + " <ldc.print()>")
chamada antiga: assertEquals(-2.6F, ((NumberAST) ldc.getContent()).getFloatValue())
nova chamada: assertEquals(-2.6F, ((NumberAST) ldc.getContent()).getFloatValue(), "Era esperado valores iguais, mas  -2.6F é diferente de " + result322 + " <((NumberAST) ldc.getContent()).getFloatValue()>")
chamada antiga: assertEquals(text, ldc.print())
nova chamada: assertEquals(text, ldc.print(), "Era esperado valores iguais, mas  text é diferente de " + result323 + " <ldc.print()>")
chamada antiga: assertEquals("text", ((StringAST) ldc.getContent()).getValue())
nova chamada: assertEquals("text", ((StringAST) ldc.getContent()).getValue(), "Era esperado valores iguais, mas  'text' é diferente de " + result324 + " <((StringAST) ldc.getContent()).getValue()>")
chamada antiga: assertEquals(text, ldc.print())
nova chamada: assertEquals(text, ldc.print(), "Era esperado valores iguais, mas  text é diferente de " + result325 + " <ldc.print()>")
chamada antiga: assertEquals("", ((StringAST) ldc.getContent()).getValue())
nova chamada: assertEquals("", ((StringAST) ldc.getContent()).getValue(), "Era esperado valores iguais, mas  '' é diferente de " + result326 + " <((StringAST) ldc.getContent()).getValue()>")
chamada antiga: assertEquals(text, ldc.print())
nova chamada: assertEquals(text, ldc.print(), "Era esperado valores iguais, mas  text é diferente de " + result327 + " <ldc.print()>")
chamada antiga: assertEquals("\\n", ((StringAST) ldc.getContent()).getValue())
nova chamada: assertEquals("\\n", ((StringAST) ldc.getContent()).getValue(), "Era esperado valores iguais, mas  '\\n' é diferente de " + result328 + " <((StringAST) ldc.getContent()).getValue()>")
chamada antiga: assertEquals("\n", ((StringAST) ldc.getContent()).getUnescapedValue())
nova chamada: assertEquals("\n", ((StringAST) ldc.getContent()).getUnescapedValue(), "Era esperado valores iguais, mas  '\n' é diferente de " + result329 + " <((StringAST) ldc.getContent()).getUnescapedValue()>")
chamada antiga: assertEquals(text, ldc.print())
nova chamada: assertEquals(text, ldc.print(), "Era esperado valores iguais, mas  text é diferente de " + result330 + " <ldc.print()>")
chamada antiga: assertEquals("\\t", ((StringAST) ldc.getContent()).getValue())
nova chamada: assertEquals("\\t", ((StringAST) ldc.getContent()).getValue(), "Era esperado valores iguais, mas  '\\t' é diferente de " + result331 + " <((StringAST) ldc.getContent()).getValue()>")
chamada antiga: assertEquals("\t", ((StringAST) ldc.getContent()).getUnescapedValue())
nova chamada: assertEquals("\t", ((StringAST) ldc.getContent()).getUnescapedValue(), "Era esperado valores iguais, mas  '\t' é diferente de " + result332 + " <((StringAST) ldc.getContent()).getUnescapedValue()>")
chamada antiga: assertEquals(text, ldc.print())
nova chamada: assertEquals(text, ldc.print(), "Era esperado valores iguais, mas  text é diferente de " + result333 + " <ldc.print()>")
chamada antiga: assertEquals("\t", ((StringAST) ldc.getContent()).getValue())
nova chamada: assertEquals("\t", ((StringAST) ldc.getContent()).getValue(), "Era esperado valores iguais, mas  '\t' é diferente de " + result334 + " <((StringAST) ldc.getContent()).getValue()>")
chamada antiga: assertEquals("\t", ((StringAST) ldc.getContent()).getUnescapedValue())
nova chamada: assertEquals("\t", ((StringAST) ldc.getContent()).getUnescapedValue(), "Era esperado valores iguais, mas  '\t' é diferente de " + result335 + " <((StringAST) ldc.getContent()).getUnescapedValue()>")
chamada antiga: assertEquals(text, ldc.print())
nova chamada: assertEquals(text, ldc.print(), "Era esperado valores iguais, mas  text é diferente de " + result336 + " <ldc.print()>")
chamada antiga: assertEquals("\\u0000", ((StringAST) ldc.getContent()).getUnescapedValue())
nova chamada: assertEquals("\\u0000", ((StringAST) ldc.getContent()).getUnescapedValue(), "Era esperado valores iguais, mas  '\\u0000' é diferente de " + result337 + " <((StringAST) ldc.getContent()).getUnescapedValue()>")
chamada antiga: assertEquals("\\u4E0B\\u96E8\\u4E86", ((StringAST) ldc.getContent()).getValue())
nova chamada: assertEquals("\\u4E0B\\u96E8\\u4E86", ((StringAST) ldc.getContent()).getValue(), "Era esperado valores iguais, mas  '\\u4E0B\\u96E8\\u4E86' é diferente de " + result338 + " <((StringAST) ldc.getContent()).getValue()>")
chamada antiga: assertEquals("下雨了", ((StringAST) ldc.getContent()).getUnescapedValue())
nova chamada: assertEquals("下雨了", ((StringAST) ldc.getContent()).getUnescapedValue(), "Era esperado valores iguais, mas  '下雨了' é diferente de " + result339 + " <((StringAST) ldc.getContent()).getUnescapedValue()>")
chamada antiga: assertEquals(text, ldc.print())
nova chamada: assertEquals(text, ldc.print(), "Era esperado valores iguais, mas  text é diferente de " + result340 + " <ldc.print()>")
chamada antiga: assertEquals("下雨了", ((StringAST) ldc.getContent()).getValue())
nova chamada: assertEquals("下雨了", ((StringAST) ldc.getContent()).getValue(), "Era esperado valores iguais, mas  '下雨了' é diferente de " + result341 + " <((StringAST) ldc.getContent()).getValue()>")
chamada antiga: assertEquals("下雨了", ((StringAST) ldc.getContent()).getUnescapedValue())
nova chamada: assertEquals("下雨了", ((StringAST) ldc.getContent()).getUnescapedValue(), "Era esperado valores iguais, mas  '下雨了' é diferente de " + result342 + " <((StringAST) ldc.getContent()).getUnescapedValue()>")
chamada antiga: assertEquals(text, ldc.print())
nova chamada: assertEquals(text, ldc.print(), "Era esperado valores iguais, mas  text é diferente de " + result343 + " <ldc.print()>")
chamada antiga: assertEquals("\\u048", ((StringAST) ldc.getContent()).getValue())
nova chamada: assertEquals("\\u048", ((StringAST) ldc.getContent()).getValue(), "Era esperado valores iguais, mas  '\\u048' é diferente de " + result344 + " <((StringAST) ldc.getContent()).getValue()>")
chamada antiga: assertEquals("\\u048", ((StringAST) ldc.getContent()).getUnescapedValue())
nova chamada: assertEquals("\\u048", ((StringAST) ldc.getContent()).getUnescapedValue(), "Era esperado valores iguais, mas  '\\u048' é diferente de " + result345 + " <((StringAST) ldc.getContent()).getUnescapedValue()>")
chamada antiga: assertEquals(text, ldc.print())
nova chamada: assertEquals(text, ldc.print(), "Era esperado valores iguais, mas  text é diferente de " + result346 + " <ldc.print()>")
chamada antiga: assertEquals("C:\\\\example\\\\recaf.jar", ((StringAST) ldc.getContent()).getValue())
nova chamada: assertEquals("C:\\\\example\\\\recaf.jar", ((StringAST) ldc.getContent()).getValue(), "Era esperado valores iguais, mas  'C:\\\\example\\\\recaf.jar' é diferente de " + result347 + " <((StringAST) ldc.getContent()).getValue()>")
chamada antiga: assertEquals("C:\\example\\recaf.jar", ((StringAST) ldc.getContent()).getUnescapedValue())
nova chamada: assertEquals("C:\\example\\recaf.jar", ((StringAST) ldc.getContent()).getUnescapedValue(), "Era esperado valores iguais, mas  'C:\\example\\recaf.jar' é diferente de " + result348 + " <((StringAST) ldc.getContent()).getUnescapedValue()>")
chamada antiga: assertEquals(text, ldc.print())
nova chamada: assertEquals(text, ldc.print(), "Era esperado valores iguais, mas  text é diferente de " + result349 + " <ldc.print()>")
chamada antiga: assertEquals(text, ldc.print())
nova chamada: assertEquals(text, ldc.print(), "Era esperado valores iguais, mas  text é diferente de " + result350 + " <ldc.print()>")
chamada antiga: assertEquals("Ljava/lang/String;", ((DescAST) ldc.getContent()).getDesc())
nova chamada: assertEquals("Ljava/lang/String;", ((DescAST) ldc.getContent()).getDesc(), "Era esperado valores iguais, mas  'Ljava/lang/String;' é diferente de " + result351 + " <((DescAST) ldc.getContent()).getDesc()>")
chamada antiga: assertEquals(text, tbl.print())
nova chamada: assertEquals(text, tbl.print(), "Era esperado valores iguais, mas  text é diferente de " + result352 + " <tbl.print()>")
chamada antiga: assertEquals("TABLESWITCH", tbl.getOpcode().print())
nova chamada: assertEquals("TABLESWITCH", tbl.getOpcode().print(), "Era esperado valores iguais, mas  'TABLESWITCH' é diferente de " + result353 + " <tbl.getOpcode().print()>")
chamada antiga: assertEquals("D", tbl.getDfltLabel().print())
nova chamada: assertEquals("D", tbl.getDfltLabel().print(), "Era esperado valores iguais, mas  'D' é diferente de " + result354 + " <tbl.getDfltLabel().print()>")
chamada antiga: assertEquals(0, tbl.getRangeMin().getIntValue())
nova chamada: assertEquals(0, tbl.getRangeMin().getIntValue(), "Era esperado valores iguais, mas  0 é diferente de " + result355 + " <tbl.getRangeMin().getIntValue()>")
chamada antiga: assertEquals(2, tbl.getRangeMax().getIntValue())
nova chamada: assertEquals(2, tbl.getRangeMax().getIntValue(), "Era esperado valores iguais, mas  2 é diferente de " + result356 + " <tbl.getRangeMax().getIntValue()>")
chamada antiga: assertEquals(3, tbl.getLabels().size())
nova chamada: assertEquals(3, tbl.getLabels().size(), "Era esperado valores iguais, mas  3 é diferente de " + result357 + " <tbl.getLabels().size()>")
chamada antiga: assertEquals(text, tbl.print())
nova chamada: assertEquals(text, tbl.print(), "Era esperado valores iguais, mas  text é diferente de " + result358 + " <tbl.print()>")
chamada antiga: assertEquals("LOOKUPSWITCH", tbl.getOpcode().print())
nova chamada: assertEquals("LOOKUPSWITCH", tbl.getOpcode().print(), "Era esperado valores iguais, mas  'LOOKUPSWITCH' é diferente de " + result359 + " <tbl.getOpcode().print()>")
chamada antiga: assertEquals("D", tbl.getDfltLabel().print())
nova chamada: assertEquals("D", tbl.getDfltLabel().print(), "Era esperado valores iguais, mas  'D' é diferente de " + result360 + " <tbl.getDfltLabel().print()>")
chamada antiga: assertEquals(3, tbl.getMapping().size())
nova chamada: assertEquals(3, tbl.getMapping().size(), "Era esperado valores iguais, mas  3 é diferente de " + result361 + " <tbl.getMapping().size()>")
chamada antiga: assertEquals(text, tbl.print())
nova chamada: assertEquals(text, tbl.print(), "Era esperado valores iguais, mas  text é diferente de " + result362 + " <tbl.print()>")
chamada antiga: assertEquals("LOOKUPSWITCH", tbl.getOpcode().print())
nova chamada: assertEquals("LOOKUPSWITCH", tbl.getOpcode().print(), "Era esperado valores iguais, mas  'LOOKUPSWITCH' é diferente de " + result363 + " <tbl.getOpcode().print()>")
chamada antiga: assertEquals("D", tbl.getDfltLabel().print())
nova chamada: assertEquals("D", tbl.getDfltLabel().print(), "Era esperado valores iguais, mas  'D' é diferente de " + result364 + " <tbl.getDfltLabel().print()>")
chamada antiga: assertEquals(0, tbl.getMapping().size())
nova chamada: assertEquals(0, tbl.getMapping().size(), "Era esperado valores iguais, mas  0 é diferente de " + result365 + " <tbl.getMapping().size()>")
chamada antiga: assertEquals(text, indy.print())
nova chamada: assertEquals(text, indy.print(), "Era esperado valores iguais, mas  text é diferente de " + result366 + " <indy.print()>")
chamada antiga: assertEquals("INVOKEDYNAMIC", indy.getOpcode().print())
nova chamada: assertEquals("INVOKEDYNAMIC", indy.getOpcode().print(), "Era esperado valores iguais, mas  'INVOKEDYNAMIC' é diferente de " + result367 + " <indy.getOpcode().print()>")
chamada antiga: assertEquals("handle", indy.getName().getName())
nova chamada: assertEquals("handle", indy.getName().getName(), "Era esperado valores iguais, mas  'handle' é diferente de " + result368 + " <indy.getName().getName()>")
chamada antiga: assertEquals("(Lgame/SnakeController;)Ljavafx/event/EventHandler;", indy.getDesc().getDesc())
nova chamada: assertEquals("(Lgame/SnakeController;)Ljavafx/event/EventHandler;", indy.getDesc().getDesc(), "Era esperado valores iguais, mas  '(Lgame/SnakeController;)Ljavafx/event/EventHandler;' é diferente de " + result369 + " <indy.getDesc().getDesc()>")
chamada antiga: assertEquals(text, indy.print())
nova chamada: assertEquals(text, indy.print(), "Era esperado valores iguais, mas  text é diferente de " + result370 + " <indy.print()>")
chamada antiga: assertEquals(text, indy.print())
nova chamada: assertEquals(text, indy.print(), "Era esperado valores iguais, mas  text é diferente de " + result371 + " <indy.print()>")
chamada antiga: assertEquals("H_INVOKESTATIC", handle.getTag().getName())
nova chamada: assertEquals("H_INVOKESTATIC", handle.getTag().getName(), "Era esperado valores iguais, mas  'H_INVOKESTATIC' é diferente de " + result372 + " <handle.getTag().getName()>")
chamada antiga: assertEquals("TextBlockLiteralExpr", handle.getOwner().getType())
nova chamada: assertEquals("TextBlockLiteralExpr", handle.getOwner().getType(), "Era esperado valores iguais, mas  'TextBlockLiteralExpr' é diferente de " + result373 + " <handle.getOwner().getType()>")
chamada antiga: assertEquals("stripIndent", handle.getName().getName())
nova chamada: assertEquals("stripIndent", handle.getName().getName(), "Era esperado valores iguais, mas  'stripIndent' é diferente de " + result374 + " <handle.getName().getName()>")
chamada antiga: assertEquals("([LString;I)LPair;", handle.getDesc().getDesc())
nova chamada: assertEquals("([LString;I)LPair;", handle.getDesc().getDesc(), "Era esperado valores iguais, mas  '([LString;I)LPair;' é diferente de " + result375 + " <handle.getDesc().getDesc()>")
chamada antiga: assertEquals(text, indy.print())
nova chamada: assertEquals(text, indy.print(), "Era esperado valores iguais, mas  text é diferente de " + result376 + " <indy.print()>")
chamada antiga: assertEquals(text, indy.print())
nova chamada: assertEquals(text, indy.print(), "Era esperado valores iguais, mas  text é diferente de " + result377 + " <indy.print()>")
chamada antiga: assertTrue(suggestions.contains("java/lang/String"))
nova chamada: assertTrue(suggestions.contains("java/lang/String"), "Era esperado verdadeiro, mas " + result378 + " <suggestions.contains('java/lang/String')> é falso")
chamada antiga: assertTrue(suggestions.contains("[Ljava/lang/String;"))
nova chamada: assertTrue(suggestions.contains("[Ljava/lang/String;"), "Era esperado verdadeiro, mas " + result379 + " <suggestions.contains('[Ljava/lang/String;')> é falso")
chamada antiga: assertTrue(suggestions.contains("java/lang/System"))
nova chamada: assertTrue(suggestions.contains("java/lang/System"), "Era esperado verdadeiro, mas " + result380 + " <suggestions.contains('java/lang/System')> é falso")
chamada antiga: assertTrue(suggestions.contains("out Ljava/io/PrintStream;"))
nova chamada: assertTrue(suggestions.contains("out Ljava/io/PrintStream;"), "Era esperado verdadeiro, mas " + result381 + " <suggestions.contains('out Ljava/io/PrintStream;')> é falso")
chamada antiga: assertTrue(suggestions.contains("java/lang/System"))
nova chamada: assertTrue(suggestions.contains("java/lang/System"), "Era esperado verdadeiro, mas " + result382 + " <suggestions.contains('java/lang/System')> é falso")
chamada antiga: assertTrue(suggestions.contains("println(Ljava/lang/String;)V"))
nova chamada: assertTrue(suggestions.contains("println(Ljava/lang/String;)V"), "Era esperado verdadeiro, mas " + result383 + " <suggestions.contains('println(Ljava/lang/String;)V')> é falso")
chamada antiga: assertTrue(suggestions.contains("example"))
nova chamada: assertTrue(suggestions.contains("example"), "Era esperado verdadeiro, mas " + result384 + " <suggestions.contains('example')> é falso")
chamada antiga: assertEquals(1, suggestions.size())
nova chamada: assertEquals(1, suggestions.size(), "Era esperado valores iguais, mas  1 é diferente de " + result385 + " <suggestions.size()>")
chamada antiga: assertTrue(suggestions.contains("args"))
nova chamada: assertTrue(suggestions.contains("args"), "Era esperado verdadeiro, mas " + result386 + " <suggestions.contains('args')> é falso")
chamada antiga: assertEquals(1, suggestions.size())
nova chamada: assertEquals(1, suggestions.size(), "Era esperado valores iguais, mas  1 é diferente de " + result387 + " <suggestions.size()>")
chamada antiga: assertTrue(suggestions.contains("example"))
nova chamada: assertTrue(suggestions.contains("example"), "Era esperado verdadeiro, mas " + result388 + " <suggestions.contains('example')> é falso")
chamada antiga: assertEquals(1, suggestions.size())
nova chamada: assertEquals(1, suggestions.size(), "Era esperado valores iguais, mas  1 é diferente de " + result389 + " <suggestions.size()>")
chamada antiga: assertTrue(suggestions.contains("example"))
nova chamada: assertTrue(suggestions.contains("example"), "Era esperado verdadeiro, mas " + result390 + " <suggestions.contains('example')> é falso")
chamada antiga: assertEquals(1, suggestions.size())
nova chamada: assertEquals(1, suggestions.size(), "Era esperado valores iguais, mas  1 é diferente de " + result391 + " <suggestions.size()>")
chamada antiga: assertTrue(suggestions.contains("example"))
nova chamada: assertTrue(suggestions.contains("example"), "Era esperado verdadeiro, mas " + result392 + " <suggestions.contains('example')> é falso")
chamada antiga: assertEquals(1, suggestions.size())
nova chamada: assertEquals(1, suggestions.size(), "Era esperado valores iguais, mas  1 é diferente de " + result393 + " <suggestions.size()>")
chamada antiga: assertTrue(suggestions.contains("example"))
nova chamada: assertTrue(suggestions.contains("example"), "Era esperado verdadeiro, mas " + result394 + " <suggestions.contains('example')> é falso")
chamada antiga: assertEquals(1, suggestions.size())
nova chamada: assertEquals(1, suggestions.size(), "Era esperado valores iguais, mas  1 é diferente de " + result395 + " <suggestions.size()>")
chamada antiga: assertTrue(suggestions.contains("example"))
nova chamada: assertTrue(suggestions.contains("example"), "Era esperado verdadeiro, mas " + result396 + " <suggestions.contains('example')> é falso")
chamada antiga: assertEquals(1, suggestions.size())
nova chamada: assertEquals(1, suggestions.size(), "Era esperado valores iguais, mas  1 é diferente de " + result397 + " <suggestions.size()>")
chamada antiga: assertTrue(suggestions.contains("java/lang/Exception"))
nova chamada: assertTrue(suggestions.contains("java/lang/Exception"), "Era esperado verdadeiro, mas " + result398 + " <suggestions.contains('java/lang/Exception')> é falso")
chamada antiga: assertTrue(suggestions.contains("example"))
nova chamada: assertTrue(suggestions.contains("example"), "Era esperado verdadeiro, mas " + result399 + " <suggestions.contains('example')> é falso")
chamada antiga: assertEquals(1, suggestions.size())
nova chamada: assertEquals(1, suggestions.size(), "Era esperado valores iguais, mas  1 é diferente de " + result400 + " <suggestions.size()>")
chamada antiga: assertTrue(suggestions.contains("H_GETSTATIC"))
nova chamada: assertTrue(suggestions.contains("H_GETSTATIC"), "Era esperado verdadeiro, mas " + result401 + " <suggestions.contains('H_GETSTATIC')> é falso")
chamada antiga: assertTrue(suggestions.contains("H_GETFIELD"))
nova chamada: assertTrue(suggestions.contains("H_GETFIELD"), "Era esperado verdadeiro, mas " + result402 + " <suggestions.contains('H_GETFIELD')> é falso")
chamada antiga: assertEquals(2, suggestions.size())
nova chamada: assertEquals(2, suggestions.size(), "Era esperado valores iguais, mas  2 é diferente de " + result403 + " <suggestions.size()>")
chamada antiga: assertTrue(suggestions.contains("out Ljava/io/PrintStream;"))
nova chamada: assertTrue(suggestions.contains("out Ljava/io/PrintStream;"), "Era esperado verdadeiro, mas " + result404 + " <suggestions.contains('out Ljava/io/PrintStream;')> é falso")
chamada antiga: assertEquals(1, suggestions.size())
nova chamada: assertEquals(1, suggestions.size(), "Era esperado valores iguais, mas  1 é diferente de " + result405 + " <suggestions.size()>")
chamada antiga: assertTrue(suggestions.contains("println(Ljava/lang/String;)V"))
nova chamada: assertTrue(suggestions.contains("println(Ljava/lang/String;)V"), "Era esperado verdadeiro, mas " + result406 + " <suggestions.contains('println(Ljava/lang/String;)V')> é falso")
chamada antiga: assertFalse(suggestions.contains("example"))
nova chamada: assertFalse(suggestions.contains("example"), "Era esperado falso, mas " + result407 + " <suggestions.contains('example')> é verdadeiro ")
chamada antiga: assertTrue(suggestions.isEmpty())
nova chamada: assertTrue(suggestions.isEmpty(), "Era esperado verdadeiro, mas " + result408 + " <suggestions.isEmpty()> é falso")
chamada antiga: assertFalse(problems.isEmpty())
nova chamada: assertFalse(problems.isEmpty(), "Era esperado falso, mas " + result409 + " <problems.isEmpty()> é verdadeiro ")
Total asserts: 589
Asserts sem descrição: 515
Asserts com descrição: 73
Assertion Roulette: 471

Após do refactor: 
Total asserts: 589
Asserts sem descrição: 77
Asserts com descrição: 511
Assertion Roulette: 69
