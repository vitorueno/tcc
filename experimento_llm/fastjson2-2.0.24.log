assertEquals("sun.misc.Unsafe", c.getCanonicalName())
assertEquals(1, user.id)
assertEquals("kraity", user.name)
assertEquals(1, user.id)
assertEquals("kraity", user.name)
assertEquals(123, bean.value)
assertSame(jsonFactory, objectMapper.getFactory())
assertEquals(3, products.size())
assertEquals(1, products.get(0).id)
assertEquals(2, products.get(1).id)
assertEquals(3, products.get(2).id)
assertTrue(SerializationFeature.values().length > 0)
assertNull(new InvalidDefinitionException(null).getType())
assertEquals("{\"time\":\"121314\"}", str)
assertEquals(bean.time, bean1.time)
assertEquals("{\"time\":\"121314\"}", str)
assertEquals(bean.time, bean1.time)
assertEquals("{\"time\":\"121314\"}", str)
assertEquals(bean.time, bean1.time)
assertEquals("{\"time\":\"121314\"}", str)
assertEquals(bean.time, bean1.time)
assertEquals("{\"time\":\"121314\"}", str)
assertEquals(bean.time, bean1.time)
assertEquals(instantCsv, writer.writeValueAsString(bean))
assertEquals(bean.data, bean1.data)
assertEquals(instantCsv, str)
assertEquals(bean.data, bean1.data)
assertEquals("value\n", writer.writeValueAsString(new TypeWithOptional(Optional.of("value"))))
assertEquals("\n", writer.writeValueAsString(new TypeWithOptional(Optional.empty())))
assertTrue((reader.readValue("value\n", TypeWithOptional.class).data).get().contains("value"))
assertTrue((reader.readValue("null\n", TypeWithOptional.class).data).get().contains("null"))
assertEquals(instantCsv, str)
assertEquals(bean.data, bean1.data)
assertEquals("value\n", writer.writeValueAsString(new TypeWithOptional(Optional.of("value"))))
assertEquals("\n", writer.writeValueAsString(new TypeWithOptional(Optional.empty())))
assertTrue((reader.readValue("value\n", TypeWithOptional.class).data).get().contains("value"))
assertTrue((reader.readValue("null\n", TypeWithOptional.class).data).get().contains("null"))
assertTrue((reader.readValue("\n", TypeWithOptional.class).data).get().isEmpty())
assertNotNull(entry)
assertEquals(123, entry.getJobResult().id)
assertEquals(123, bean.id)
assertEquals(123, bean1.id)
assertEquals(123, bean2.id)
assertEquals(123, bean3.id)
assertEquals(MapperFeature.USE_ANNOTATIONS.getMask(), MapperFeature.USE_ANNOTATIONS.getLongMask())
assertTrue(MapperFeature.USE_ANNOTATIONS.enabledIn(MapperFeature.USE_ANNOTATIONS.getMask()))
assertTrue(MapperFeature.USE_ANNOTATIONS.enabledIn(MapperFeature.USE_ANNOTATIONS.getLongMask()))
assertEquals("{\"color\":\"yellow\",\"type\":\"renault\"}", json)
assertEquals(car.color, car1.color)
assertEquals(car.type, car1.type)
assertEquals("Black", map.get("color"))
assertEquals(bean.id, node.get("id").asInt())
assertEquals(bean.name, node.get("name").asText())
assertEquals(123, mapper.readTree(new ByteArrayInputStream(str.getBytes())).get("id").asInt())
assertEquals(123, mapper.readTree(new StringReader(str)).get("id").asInt())
assertEquals(123, mapper.readTree(str).get("id").asInt())
assertEquals(123, ((JsonNode) mapper.readTree(mapper.factory.createParser(str))).get("id").asInt())
assertNull(arrayNode.get(0))
assertEquals(JsonNodeType.ARRAY, arrayNode.getNodeType())
assertEquals("{\"id\":101}", str)
assertEquals("{\"id\":101,\"name\":null}", str)
assertEquals("{\"bean_id\":1001}", str)
assertEquals(bean.id, bean1.id)
assertEquals(str, new String(bytes, StandardCharsets.UTF_8))
assertEquals(bean.id, bean2.id)
assertEquals(bean.id, bean3.id)
assertEquals("{\"bean_id\":1001}", str)
assertEquals(expected, carJson)
assertEquals(expected, new String(byteOut.toByteArray(), StandardCharsets.UTF_8))
assertEquals(expected, strWriter.toString())
assertEquals(car.type, car1.type)
assertNotNull(car)
assertEquals("Black", car.getColor())
assertNotNull(car)
assertEquals("red", car.color)
assertNotNull(javaType)
assertEquals(1, values.size())
assertEquals(123, values.get(0).id)
assertEquals("XX", values.get(0).name)
assertEquals(1, values.size())
assertEquals(123, values.get(0).id)
assertEquals("XX", values.get(0).name)
assertEquals(1, map.size())
assertEquals(123, bean.id)
assertEquals("XXX", bean.name)
assertTrue(node.isBigInteger())
assertEquals(JsonParser.NumberType.BIG_INTEGER, node.numberType())
assertEquals(JsonNodeType.NUMBER, node.getNodeType())
assertEquals(bigInt.intValue(), node.asInt())
assertEquals(bigInt.intValue(), node.asInt(2))
assertEquals(bigInt.intValue(), node.intValue())
assertEquals(bigInt.longValue(), node.longValue())
assertEquals(bigInt.doubleValue(), node.asDouble())
assertFalse((reader.readValue("\n", TypeWithOptional.class).data).isPresent())
assertFalse(arrayNode.elements().hasNext())
assertFalse(arrayNode.iterator().hasNext())
assertFalse(node.isBigDecimal())
assertFalse(node.isBigInteger())
assertFalse(node.isBigDecimal())
assertFalse(node.isFloat())
assertFalse(node.isDouble())
assertEquals(JsonParser.NumberType.INT, node.numberType())
assertEquals(JsonNodeType.NUMBER, node.getNodeType())
assertEquals(val.intValue(), node.asInt())
assertEquals(val.intValue(), node.asInt(2))
assertEquals(val.intValue(), node.intValue())
assertEquals(val.longValue(), node.longValue())
assertEquals(val.floatValue(), node.floatValue())
assertEquals(val.doubleValue(), node.doubleValue())
assertEquals(val.doubleValue(), node.asDouble())
assertEquals(BigInteger.ONE, node.bigIntegerValue())
assertEquals("null", new POJONode(null).asText())
assertEquals("{}", object.getJSONObject().toString())
assertEquals("{}", object.asText())
assertEquals(0, object.size())
assertTrue(flag.booleanValue())
assertEquals("true", flag.asText())
assertEquals("true", flag.toString())
assertEquals(1, object.size())
assertEquals(value, node.getValue())
assertEquals(Short.toString(value), node.asText())
assertEquals(Short.toString(value), node.toString())
assertEquals(value, node.getValue())
assertEquals(Integer.toString(value), node.asText())
assertEquals(Integer.toString(value), node.toString())
assertEquals(value, node.getValue())
assertEquals(Long.toString(value), node.asText())
assertEquals(Long.toString(value), node.toString())
assertEquals(value, node.getValue())
assertEquals(Float.toString(value), node.asText())
assertEquals(Float.toString(value), node.toString())
assertEquals(value, node.getValue())
assertEquals(Double.toString(value), node.asText())
assertEquals(Double.toString(value), node.toString())
assertEquals(value, node.getValue())
assertEquals(value.toPlainString(), node.asText())
assertEquals(value.toString(), node.toString())
assertEquals(value, node.getValue())
assertEquals(value.toString(), node.asText())
assertEquals(value.toString(), node.toString())
assertEquals(value, node.getValue())
assertEquals(value, node.asText())
assertEquals(JSON.toJSONString(value), node.toString())
assertTrue(node.isDouble())
assertEquals(JsonParser.NumberType.DOUBLE, node.numberType())
assertEquals(JsonNodeType.NUMBER, node.getNodeType())
assertEquals(val.intValue(), node.asInt())
assertEquals(val.intValue(), node.asInt(2))
assertEquals(val.intValue(), node.intValue())
assertEquals(val.longValue(), node.longValue())
assertEquals(val.doubleValue(), node.asDouble())
assertEquals(123, node.asInt())
assertEquals("123", node.asText())
assertEquals(123, node.getValue())
assertEquals(JsonNodeType.NUMBER, node.getNodeType())
assertNull(node.binaryValue())
assertNull(node.textValue())
assertSame(bytes, node.binaryValue())
assertEquals(0, node.asInt())
assertTrue(node.isFloat())
assertEquals(JsonParser.NumberType.FLOAT, node.numberType())
assertEquals(JsonNodeType.NUMBER, node.getNodeType())
assertEquals(val.intValue(), node.asInt())
assertEquals(val.intValue(), node.asInt(2))
assertEquals(val.intValue(), node.intValue())
assertEquals(val.longValue(), node.longValue())
assertEquals(val.doubleValue(), node.asDouble())
assertEquals(0, array.size())
assertEquals("[]", array.asText())
assertEquals("[1]", array.toString())
assertEquals("[1]", array.toString())
assertEquals("[1]", array.toString())
assertEquals("[1]", array.toString())
assertEquals("[1]", array.toString())
assertEquals("[1]", array.toString())
assertEquals("[true]", array.toString())
assertEquals("[true]", array.toString())
assertEquals("[12.34]", array.toString())
assertEquals("[12.34]", array.toString())
assertEquals("[\"abc\"]", array.toString())
assertEquals(JsonParser.NumberType.LONG, node.numberType())
assertEquals(JsonNodeType.NUMBER, node.getNodeType())
assertEquals(val.intValue(), node.asInt())
assertEquals(val.intValue(), node.asInt(2))
assertEquals(val.intValue(), node.intValue())
assertEquals(val.longValue(), node.longValue())
assertEquals(val.floatValue(), node.floatValue())
assertEquals(val.doubleValue(), node.doubleValue())
assertEquals(val.doubleValue(), node.asDouble())
assertEquals(BigInteger.ONE, node.bigIntegerValue())
assertTrue(node.isBigDecimal())
assertEquals(JsonParser.NumberType.BIG_DECIMAL, node.numberType())
assertEquals(JsonNodeType.NUMBER, node.getNodeType())
assertEquals(dec.intValue(), node.asInt())
assertEquals(dec.intValue(), node.asInt(2))
assertEquals(dec.intValue(), node.intValue())
assertEquals(dec.longValue(), node.longValue())
assertEquals(dec.doubleValue(), node.asDouble())
assertNull(mapper.getNodeFactory().nullNode().asText())
assertEquals("abc", strValue.value)
assertEquals("{\"id\":\"1001\"}", JSON.toJSONString(bean))
assertEquals("{\"id\":\"1001\"}", JSON.toJSONString(bean))
assertEquals("{\n" + "\t\"@type\":\"circle\",\n" + "\t\"name\":\"CustomCircle\",\n" + "\t\"radius\":1.0\n" + "}", str)
assertEquals(shape.getClass(), shape1.getClass())
assertEquals(cycle.name, cycle1.name)
assertEquals(cycle.radius, cycle1.radius)
assertEquals("{\"rollNo\":1,\"name\":\"Mark\"}", JSON.toJSONString(student))
assertEquals("{\"name\":\"My bean\",\"attr1\":\"val1\"}", JSON.toJSONString(bean))
assertEquals("\"Hangzhou\"", str)
assertEquals("\"Type A\"", JSON.toJSONString(TypeEnumWithValue.TYPE1))
assertEquals("{\"id\":123}", json)
assertEquals(123, bean1.id)
assertEquals("XXX", bean1.name)
assertEquals("{\"id\":123,\"name\":\"XXX\"}", json)
assertEquals(bean.id, bean1.id)
assertNull(bean1.name)
assertEquals("{\"id\":123,\"name\":\"XXX\"}", json)
assertEquals(bean.id, bean1.id)
assertEquals(bean.name, bean1.name)
assertEquals("{\"id\":123,\"name\":\"XXX\"}", json)
assertEquals(bean.id, bean1.id)
assertEquals(bean.name, bean1.name)
assertEquals("{\"jid\":\"abc\"}", str)
assertEquals("My bean", bean.name)
assertEquals("{\"bookCategory\":\"Tech\"}", json)
assertEquals(bean.category, bean1.category)
assertEquals("{\"bookCategory\":\"Tech\"}", json)
assertEquals(bean.category, bean1.category)
assertEquals("{\"bookCategory\":\"Tech\"}", json)
assertEquals(bean.category, bean1.category)
assertEquals("{\"bean_id\":1001}", str)
assertEquals("{\"id\":101}", str)
assertEquals("My bean", bean2.name)
assertEquals("val1", bean2.properties.get("attr1"))
assertEquals("{}", JSON.toJSONString(new A("101")))
assertEquals("{}", JSON.toJSONString(new A1("101")))
assertEquals("{}", JSON.toJSONString(new A2("101")))
assertEquals("{}", JSON.toJSONString(new A3("101")))
assertNull(JSON.parseObject(str, A.class).id)
assertNull(JSON.parseObject(str, A1.class).id)
assertNull(JSON.parseObject(str, A2.class).id)
assertEquals("\"ok\"", JSON.toJSONString(Type.OK))
assertEquals("{\"values\":{\"123\":123}}", str)
assertEquals(123, key.value)
assertEquals("f", jsonp.getFunction())
assertEquals(123, jsonp.getValue())
assertEquals("f(123)", str)
assertEquals("\"ok\"", JSON.toJSONString(Type.OK))
assertEquals(123, mapper.readValue(factory.createParser(new StringReader(str)), Bean.class).id)
assertEquals(123, mapper.readValue(factory.createParser(new ByteArrayInputStream(strBytes)), Bean.class).id)
assertEquals(123, mapper.readValue(tempFile, Bean.class).id)
assertEquals(str, writer.toString())
assertEquals(str, new String(out.toByteArray()))
assertEquals("{\"id\":\"zhuan2quan\",\"name\":\"程序新视界\",\"interest\":[\"Java\",\"Spring Boot\",\"JVM\"]}", json)
assertEquals(0, interest.size())
assertTrue(interest.isEmpty())
assertEquals(0, interest.doubleValue())
assertEquals(0, interest.floatValue())
assertEquals(0, interest.intValue())
assertEquals(0, interest.longValue())
assertTrue(interestNode.isArray())
assertNotNull(pointer)
assertNotNull(feature.mappedFeature())
assertTrue(JsonEncoding.UTF16_BE.isBigEndian())
assertTrue(JsonEncoding.UTF16_BE.bits() != 0)
assertFalse(node.isBigInteger())
assertFalse(node.isBigDecimal())
assertFalse(node.isFloat())
assertFalse(node.isTextual())
assertFalse(node.has(1))
assertFalse(node.has("1"))
assertFalse(node.isBigInteger())
assertFalse(node.isBigDecimal())
assertFalse(node.isDouble())
assertFalse(node.isBigInteger())
assertFalse(node.isBigDecimal())
assertFalse(node.isFloat())
assertFalse(node.isDouble())
assertFalse(interest.isValueNode())
assertFalse(nameNode.isArray())
assertEquals(version0, version1)
assertEquals(version0, version0)
assertEquals(version0.hashCode(), version1.hashCode())
assertEquals(version0.toString(), version1.toString())
assertEquals(0, version0.compareTo(version1))
assertEquals(version0, version1)
assertEquals(version0.hashCode(), version1.hashCode())
assertEquals(version0.toString(), version1.toString())
assertEquals(0, version0.compareTo(version1))
assertEquals(3, v.getMajorVersion())
assertEquals(2, v.getMinorVersion())
assertEquals(1, v.getPatchLevel())
assertEquals("b", v.getGroupId())
assertEquals("c", v.getArtifactId())
assertEquals("b/c/3.2.1-a", v.toFullString())
assertFalse(v.isUnknownVersion())
assertFalse(v.isUknownVersion())
assertEquals("{\n" + "\t\"id\":1001,\n" + "\t\"name\":\"Jobs\"\n" + "}", json)
assertEquals("{\"id\":1001,\"name\":\"Jobs\"}", mapper.writeValueAsString(staff))
assertTrue(JsonParser.Feature.collectDefaults() > 0)
assertEquals("{\"brand\":\"Mercedes\",\"doors\":5}", new String(bytes, StandardCharsets.UTF_8))
assertEquals("{\"value\":null}", out.toString())
assertEquals("{\"f0\":1,\"f1\":1,\"f2\":1.0,\"f3\":1.0,\"f4\":1}", out.toString())
assertEquals("{\"value\":[]}", out.toString())
assertEquals("{\"value\":[]}", out.toString())
assertEquals("{\"value\":null}", out.toString())
assertEquals("{\"value\":true}", out.toString())
assertEquals("{\"value\":{}}", out.toString())
assertEquals("{\"value\":1}", out.toString())
assertEquals("red", car.color)
assertEquals("{\"color\":\"red\"}", gson.toJson(car))
assertEquals("red", car.color)
assertEquals(1, cars.size())
assertEquals("blue", cars.get(0).color)
assertEquals(123, bean.id)
assertEquals(123, bean.id)
assertNotNull(str1)
assertTrue(object instanceof Map)
assertTrue(JSON.parse(str, JSONReader.Feature.SupportAutoType) instanceof Map)
assertEquals(Throwable.class, e1.getClass())
assertEquals(Throwable.class, e2.getClass())
assertEquals("\"01234567890012345678900123456789001234567890\"", jsonWriter.toString())
assertEquals("\"01234567890012345678900123456789001234567890中国\"", jsonWriter.toString())
assertEquals("\"01234567890012345678900123456789001234567890中国\"", jsonWriter.toString())
assertEquals("a[\"a0\\\"\",\"a1\"]", fastjsonResult)
assertNotNull(view.getFastJsonConfig())
assertTrue(view.isExtractValueFromSingleKeyModel())
assertNotNull(view.getFastJsonConfig())
assertTrue(view.isExtractValueFromSingleKeyModel())
assertEquals(contentLength, contentAsString.getBytes(view.getFastJsonConfig().getCharset().name()).length)
assertNotNull(view.getFastJsonConfig())
assertTrue(view.isExtractValueFromSingleKeyModel())
assertTrue(contentAsString.startsWith("{\"abc\":\"cde中文\"}"))
assertTrue(user.getId().equals(1))
assertTrue(user.getName().equals("土豆"))
assertTrue(user.getAge().equals(25))
assertEquals(baseResult2.getCode(), "1000")
assertEquals(baseResult2.getMsg(), "success")
assertEquals(baseResult2.getData().size(), 3)
assertEquals(baseResult2.getData().get(0), "测试1")
assertNotNull(converter.getFastJsonConfig())
assertEquals(1, vo.getId())
assertEquals("{\"id\":1}", new String((byte[]) message1.getPayload()))
assertEquals("{\"id\":1}", new String((byte[]) message2.getPayload()))
assertEquals("{\"id\":1}", message3.getPayload())
assertEquals("{\"id\":1}", message4.getPayload())
assertTrue(listDes instanceof JSONArray)
assertTrue(listDes.get(0) instanceof User)
assertTrue(listDes.size() == 2)
assertTrue(listDes instanceof List)
assertTrue(listDes.get(0) instanceof BaseResult)
assertNotNull(bean.gpsAddress)
assertEquals(114.027285886961D, bean.gpsAddress.getX())
assertEquals(22.6741582981732D, bean.gpsAddress.getY())
assertEquals("{\"gpsAddress\":{\"type\":\"Point\",\"coordinates\":[114.027285886961,22.6741582981732]}}", JSON.toJSONString(bean))
assertEquals(100, point.getX())
assertEquals(0, point.getY())
assertEquals("[100.0,0.0]", JSON.toJSONString(point))
assertEquals(100, point.getX())
assertEquals(0, point.getY())
assertEquals("{\"type\":\"Polygon\",\"coordinates\":[[[100.0,0.0],[100.0,0.0],[100.0,0.0],[100.0,0.0],[100.0,0.0]]]}", JSON.toJSONString(polygon))
assertEquals(2, lineString.getCoordinates().size())
assertEquals(100, lineString.getCoordinates().get(0).getX())
assertEquals(0, lineString.getCoordinates().get(0).getY())
assertEquals(101, lineString.getCoordinates().get(1).getX())
assertEquals(1, lineString.getCoordinates().get(1).getY())
assertEquals("{\"type\":\"LineString\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]}", JSON.toJSONString(lineString))
assertEquals(2, multiPoint.getCoordinates().size())
assertEquals(100, multiPoint.getCoordinates().get(0).getX())
assertEquals(0, multiPoint.getCoordinates().get(0).getY())
assertEquals(101, multiPoint.getCoordinates().get(1).getX())
assertEquals(1, multiPoint.getCoordinates().get(1).getY())
assertEquals("{\"type\":\"MultiPoint\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]}", JSON.toJSONString(multiPoint))
assertEquals(context.getClass(), deserialized.getClass())
assertTrue(user.getId().equals(1))
assertTrue(user.getName().equals("土豆"))
assertTrue(user.getAge().equals(25))
assertNotNull(fastJsonRedisSerializer.getFastJsonConfig())
assertEquals(userDes.getName(), "土豆")
assertTrue(user.getId().equals(1))
assertTrue(user.getName().equals("土豆"))
assertTrue(user.getAge().equals(25))
assertNotNull(fastJsonRedisSerializer.getFastJsonConfig())
assertEquals(userDes.getName(), "土豆")
assertNotNull(messageConverter.getFastJsonConfig())
assertTrue(messageConverter.canRead(VO.class, VO.class, MediaType.APPLICATION_JSON))
assertTrue(messageConverter.canWrite(VO.class, VO.class, MediaType.APPLICATION_JSON))
assertEquals(1, messageConverter.getSupportedMediaTypes().size())
assertEquals(vo.getId(), 123)
assertTrue(user.getId().equals(1))
assertTrue(user.getName().equals("土豆"))
assertTrue(user.getAge().equals(25))
assertEquals(baseResult2.getCode(), "1000")
assertEquals(baseResult2.getData().size(), 3)
assertEquals(baseResult3.getCode(), "1000")
assertEquals(baseResult3.getData().size(), 6)
assertNotNull(converter.getFastJsonConfig())
assertEquals(1, vo.getId())
assertEquals("{\"id\":1}", JSONB.parseObject((byte[]) message1.getPayload()).toString())
assertEquals("{\"id\":1}", JSONB.parseObject((byte[]) message2.getPayload()).toString())
assertEquals(org.springframework.security.core.authority.SimpleGrantedAuthority.class, object.getClass())
assertEquals(org.springframework.util.LinkedCaseInsensitiveMap.class, object.getClass())
assertEquals(org.springframework.util.LinkedCaseInsensitiveMap.class, bean.value.getClass())
assertEquals(113.92966694974888D, dispatchPositionInfoMO.gpsAddress.getX())
assertEquals(22.543470524848683D, dispatchPositionInfoMO.gpsAddress.getY())
assertEquals("{}", JSON.toJSONString(configs))
assertNotNull(parsed)
assertEquals(org.springframework.security.core.authority.SimpleGrantedAuthority.class, parsed.get(0).getClass())
assertEquals(jsonStr, JSON.toJSONString(new Json(jsonStr)))
assertEquals(jsonStr, new String(bytes, StandardCharsets.UTF_8))
assertEquals("\"USD\"", str)
assertEquals(usd, usd2)
assertEquals("{\"currency\":\"USD\",\"number\":200}", str)
assertEquals(amount, amount2)
assertEquals(oneEuro, money)
assertEquals(date, date2)
assertEquals(date, date2)
assertEquals(date, date2)
assertEquals(date, date2)
assertEquals(date, date2)
assertEquals(date, date2)
assertEquals("{\"User Id\":123}", str)
assertEquals(bean.userId, bean1.userId)
assertEquals("{\"_Some Field Name\":123}", str)
assertEquals(bean._someFieldName, bean1._someFieldName)
assertEquals("{\"a String Field\":123}", str)
assertEquals(bean.aStringField, bean1.aStringField)
assertEquals("{\"a URL\":123}", str)
assertEquals(bean.aURL, bean1.aURL)
assertEquals("{\"user-id\":123}", str)
assertEquals(bean.userId, bean1.userId)
assertEquals("{\"_some-field-name\":123}", str)
assertEquals(bean._someFieldName, bean1._someFieldName)
assertEquals("{\"a-string-field\":123}", str)
assertEquals(bean.aStringField, bean1.aStringField)
assertEquals("{\"a-u-r-l\":123}", str)
assertEquals(bean.aURL, bean1.aURL)
assertEquals("{\"user-id\":123}", str)
assertEquals(bean.userId, bean1.userId)
assertEquals("{\"_some-field-name\":123}", str)
assertEquals(bean._someFieldName, bean1._someFieldName)
assertEquals("{\"a-string-field\":123}", str)
assertEquals(bean.aStringField, bean1.aStringField)
assertEquals("{\"a-u-r-l\":123}", str)
assertEquals(bean.aURL, bean1.aURL)
assertEquals("{\"USER_ID\":123}", str)
assertEquals(bean.userId, bean1.userId)
assertEquals("{\"_SOME_FIELD_NAME\":123}", str)
assertEquals(bean._someFieldName, bean1._someFieldName)
assertEquals("{\"A_STRING_FIELD\":123}", str)
assertEquals(bean.aStringField, bean1.aStringField)
assertEquals("{\"A_U_R_L\":123}", str)
assertEquals(bean.aURL, bean1.aURL)
assertEquals("{\"UserId\":123}", str)
assertEquals(bean.userId, bean1.userId)
assertEquals("{\"_SomeFieldName\":123}", str)
assertEquals(bean._someFieldName, bean1._someFieldName)
assertEquals("{\"_SomeFieldName\":123}", str)
assertEquals(bean._someFieldName, bean1._someFieldName)
assertEquals("{\"UserId\":123}", str)
assertEquals(bean.userId, bean1.userId)
assertEquals("{\"user_id\":123}", str)
assertEquals(bean.userId, bean1.userId)
assertEquals("{\"_some_field_name\":123}", str)
assertEquals(bean._someFieldName, bean1._someFieldName)
assertEquals("{\"a_string_field\":123}", str)
assertEquals(bean.aStringField, bean1.aStringField)
assertEquals("{\"a_u_r_l\":123}", str)
assertEquals(bean.aURL, bean1.aURL)
assertEquals("{\"user.id\":123}", str)
assertEquals(bean.userId, bean1.userId)
assertEquals("{\"_some.field.name\":123}", str)
assertEquals(bean._someFieldName, bean1._someFieldName)
assertEquals("{\"a.string.field\":123}", str)
assertEquals(bean.aStringField, bean1.aStringField)
assertEquals("{\"a.u.r.l\":123}", str)
assertEquals(bean.aURL, bean1.aURL)
assertTrue(path.isRef())
assertTrue(path.contains(bean))
assertEquals(101, bean.id)
assertEquals(200, bean.id)
assertEquals(200, path.eval(bean))
assertEquals(202, path.eval(bean))
assertEquals(1001, bean.item.id)
assertEquals(1002, bean.item.id)
assertEquals(1003, bean.item.id)
assertNull(path.eval(bean))
assertEquals(101, path.eval(bean))
assertEquals("2022-09-24 17:14:03.321", JSONObject.of("date", new Date(1664010843321L)).getString("date"))
assertEquals("2022-09-24 17:14:03.32", JSONObject.of("date", new Date(1664010843320L)).getString("date"))
assertEquals("2022-09-24 17:14:03.3", JSONObject.of("date", new Date(1664010843300L)).getString("date"))
assertEquals("2022-09-24 17:14:03", JSONObject.of("date", new Date(1664010843000L)).getString("date"))
assertEquals(101, JSONObject.of("itemId", 101).toJavaObject(Item.class).itemId)
assertEquals(101, JSONObject.of("items", JSONArray.of(JSONObject.of("itemId", 101))).toJavaObject(Bean.class).items.get(0).itemId)
assertEquals(101, JSONObject.of("items", JSONArray.of(JSONObject.of("itemId", 101))).toJavaObject(Bean1.class).items.get(0).itemId)
assertEquals(101, items.get(0).itemId)
assertEquals(101, JSONObject.of("items", JSONObject.of("first", JSONObject.of("itemId", 101))).toJavaObject(Bean3.class).items.get("first").itemId)
assertNull(module.getAnnotationProcessor())
assertNull(module.getProvider())
assertNull(module.getObjectReader(null, null))
assertNull(module.getAnnotationProcessor())
assertNull(module.getObjectWriter(null, null))
assertTrue(jsonPath.isRef())
assertTrue(jsonPath.contains(object))
assertArrayEquals(expected, result)
assertEquals("[1001,\"DataWorks\",\"2017-07-14 00:00:00\"]", jsonPath.extractScalar(JSONReader.of(object.toString())))
assertArrayEquals(expected, result)
assertArrayEquals(expected, result)
assertArrayEquals(expected, result)
assertArrayEquals(expected, result)
assertArrayEquals(expected, result)
assertArrayEquals(expected, result)
assertTrue(jsonPath.isRef())
assertTrue(jsonPath.contains(object))
assertTrue(jsonPath.isRef())
assertEquals(Integer.class, jsonPath.getType())
assertTrue(jsonPath.contains(object))
assertEquals("123", jsonPath.extractScalar(JSONReader.of(object.toString())))
assertEquals(id2, object.get("id"))
assertEquals(id3, object.get("id"))
assertEquals(101, object.get("id"))
assertEquals(102L, object.get("id"))
assertEquals(103, object.get("id"))
assertEquals(0, object.size())
assertSame(JSONPath.RootPath.INSTANCE, JSONPath.of("$", (Type) null))
assertSame(JSONPath.RootPath.INSTANCE, JSONPath.of("$", Object.class))
assertSame(jsonPath, JSONPathTyped.of(jsonPath, Integer.class))
assertEquals(Long.class, jsonPath1.getType())
assertEquals("\"2018-07-05 12:13:14\"", jsonWriter.toString())
assertEquals("\"2018-07-05T12:13:14Z\"", jsonWriter.toString())
assertEquals("\"2018-07-05\"", jsonWriter.toString())
assertEquals("\"12:13:14\"", jsonWriter.toString())
assertEquals("A", jsonWriter.toString())
assertEquals("A", jsonWriter.toString())
assertEquals(",A", jsonWriter.toString())
assertEquals(",A", jsonWriter.toString())
assertEquals(",A", new String(out.toByteArray()))
assertEquals("[1,2]", jsonWriter.toString())
assertEquals("[1,2]", new String(out.toByteArray()))
assertEquals("A", jsonWriter.toString())
assertEquals("\"HangZhou\"", str)
assertEquals(address.getAddress(), address1.getAddress())
assertEquals("{\"apple\":1,\"banana\":2}", str)
assertEquals(base.a, base2.a)
assertEquals(base.b, base2.b)
assertEquals("{\"apple\":1,\"banana\":2}", str)
assertEquals(base.a, base2.a)
assertEquals(base.b, base2.b)
assertEquals("{\"apple\":1,\"banana\":2}", str)
assertEquals(base.a, base2.a)
assertEquals(base.b, base2.b)
assertEquals("{\"apple\":1,\"banana\":2}", str)
assertEquals(base.a, base2.a)
assertEquals(base.b, base2.b)
assertEquals("{\"productName\":\"DataWorks\"}", JSON.toJSONString(product))
assertEquals("DataWorks", productParsed.name)
assertEquals(base.a, base2.a)
assertEquals(base.b, base2.b)
assertEquals("null", jsonWriter.toString())
assertEquals("\"\"", jsonWriter.toString())
assertEquals("\"abcdefghijk1234567890abcdefghijk1234567890\"", jsonWriter.toString())
assertEquals("\"abcdefghijk1234567890\\\\\\\"abcdefghijk1234567890\"", jsonWriter.toString())
assertEquals("[1.0,2.0]", jsonWriter.toString())
assertEquals(COUNT, string.length())
assertEquals(COUNT, string.length())
assertEquals(COUNT, string.length())
assertEquals(COUNT, string.length())
assertEquals(COUNT, string.length())
assertEquals(COUNT, string.length())
assertEquals(COUNT, string.length())
assertEquals(COUNT, string.length())
assertEquals(COUNT, string.length())
assertEquals(COUNT, string.length())
assertEquals(COUNT, string.length())
assertEquals("[\"9007199254740992\",\"-9007199254740992\"]", jsonWriter.toString())
assertEquals("[-9223372036854775808,-9223372036854775808,9007199254740992,-9007199254740992]", jsonWriter.toString())
assertEquals("{\"$ref\":\"$\"}", writer.toString())
assertEquals("{\"$ref\":\"$\"}{\"$ref\":\"中\"}", writer.toString())
assertEquals("{\"$ref\":\"$\"}{\"$ref\":\"中\"}{\"$ref\":\"1234567890\"}", writer.toString())
assertEquals("\"中\"", writer.toString())
assertEquals("\"中\"\"中\"", writer.toString())
assertEquals("\"中\"\"中\"\"1234567890\"", writer.toString())
assertEquals("{", writer.toString())
assertEquals("[", writer.toString())
assertEquals(":", writer.toString())
assertEquals(",", writer.toString())
assertEquals(":", writer.toString())
assertEquals("}", writer.toString())
assertEquals("]", writer.toString())
assertEquals("null", writer.toString())
assertEquals("0.0", vo.getProperties().get("prop1"))
assertEquals(str, JSON.toJSONString(vo))
assertEquals(104, object.get("id"))
assertNull(JSONB.parseObject(JSONB.toBytes(null)))
assertEquals(0, JSONB.parseObject(JSONB.toBytes(new JSONObject().fluentPut("id", null))).size())
assertEquals(0, JSONB.parseObject(JSONB.toBytes(new JSONObject().fluentPut("id", null), JSONWriter.Feature.BeanToArray)).size())
assertEquals(1, JSONB.parseObject(JSONB.toBytes(new JSONObject().fluentPut("id", null), JSONWriter.Feature.WriteNulls)).size())
assertEquals(1, JSONB.parseObject(JSONB.toBytes(new JSONObject().fluentPut("id", null), JSONWriter.Feature.WriteNulls, JSONWriter.Feature.BeanToArray)).size())
assertEquals(20, JSONB.parseObject(JSONB.toBytes(object, JSONWriter.Feature.WriteNulls, JSONWriter.Feature.BeanToArray)).size())
assertSame(parsed, parsed.get("root"))
assertSame(parsed, parsed.getJSONArray("root").get(0))
assertSame(parsed, parsed.getJSONObject("child").get("root"))
assertSame(parsed.getJSONObject("child1"), parsed.getJSONObject("child2"))
assertEquals(1, JSON.parseObject(str).get(key))
assertEquals(1, JSON.parseObject(utf8Bytes).get(key))
assertEquals(1, JSON.parseObject(str).get(key))
assertEquals(1, JSON.parseObject(utf8Bytes).get(key))
assertEquals(object.size(), object2.size())
assertTrue(object2.containsKey("id"))
assertEquals(list.size(), list2.size())
assertEquals(list.get(0).getClass(), list2.get(0).getClass())
assertEquals(Map.class, JSONFactory.getDefaultObjectReaderProvider().getObjectReader(Map.class).getObjectClass())
assertEquals(Map.class, JSONFactory.getDefaultObjectReaderProvider().getObjectReader(new TypeReference<Map<String, String>>() {
}.getType()).getObjectClass())
assertNull(JSONFactory.getDefaultObjectReaderProvider().getObjectReader(Map.class).getBuildFunction())
assertEquals("{\"values\":null}", JSON.toJSONString(new VO(), JSONWriter.Feature.WriteNulls))
assertEquals("{\"values\":null}", new String(JSON.toJSONBytes(new VO(), JSONWriter.Feature.WriteNulls)))
assertEquals("{}", JSON.toJSONString(new VO2()))
assertEquals("{\"values\":null}", new String(JSON.toJSONBytes(new VO2(), JSONWriter.Feature.WriteNulls)))
assertEquals("null", JSON.toJSONString(decimal))
assertEquals("null", new String(JSON.toJSONBytes(decimal)))
assertEquals("\"90071992547409910\"", JSON.toJSONString(decimal, JSONWriter.Feature.BrowserCompatible))
assertEquals("\"90071992547409910\"", new String(JSON.toJSONBytes(decimal, JSONWriter.Feature.BrowserCompatible)))
assertEquals(2021, vo.getDate().getYear())
assertEquals(2, vo.getDate().getMonthValue())
assertEquals(3, vo.getDate().getDayOfMonth())
assertEquals(2021, vo.getDate().getYear())
assertEquals(12, vo.getDate().getMonthValue())
assertEquals(1, vo.getDate().getDayOfMonth())
assertEquals(2021, vo.getDate().getYear())
assertEquals(12, vo.getDate().getMonthValue())
assertEquals(11, vo.getDate().getDayOfMonth())
assertEquals(2021, vo.getDate().getYear())
assertEquals(12, vo.getDate().getMonthValue())
assertEquals(11, vo.getDate().getDayOfMonth())
assertEquals(2021, vo.getDate().getYear())
assertEquals(12, vo.getDate().getMonthValue())
assertEquals(1, vo.getDate().getDayOfMonth())
assertEquals(2021, vo.getDate().getYear())
assertEquals(12, vo.getDate().getMonthValue())
assertEquals(1, vo.getDate().getDayOfMonth())
assertEquals(2021, vo.getDate().getYear())
assertEquals(1, vo.getDate().getMonthValue())
assertEquals(21, vo.getDate().getDayOfMonth())
assertEquals(2021, vo.getDate().getYear())
assertEquals(1, vo.getDate().getMonthValue())
assertEquals(21, vo.getDate().getDayOfMonth())
assertEquals(2021, vo.getDate().getYear())
assertEquals(12, vo.getDate().getMonthValue())
assertEquals(11, vo.getDate().getDayOfMonth())
assertEquals(2021, vo.getDate().getYear())
assertEquals(12, vo.getDate().getMonthValue())
assertEquals(11, vo.getDate().getDayOfMonth())
assertEquals(2021, vo.getDate().getYear())
assertEquals(12, vo.getDate().getMonthValue())
assertEquals(11, vo.getDate().getDayOfMonth())
assertEquals(2021, vo.getDate().getYear())
assertEquals(12, vo.getDate().getMonthValue())
assertEquals(11, vo.getDate().getDayOfMonth())
assertEquals(2021, vo.getDate().getYear())
assertEquals(12, vo.getDate().getMonthValue())
assertEquals(11, vo.getDate().getDayOfMonth())
assertEquals(2021, vo.getDate().getYear())
assertEquals(12, vo.getDate().getMonthValue())
assertEquals(11, vo.getDate().getDayOfMonth())
assertEquals(2021, vo.getDate().getYear())
assertEquals(12, vo.getDate().getMonthValue())
assertEquals(11, vo.getDate().getDayOfMonth())
assertEquals(2021, vo.getDate().getYear())
assertEquals(12, vo.getDate().getMonthValue())
assertEquals(11, vo.getDate().getDayOfMonth())
assertEquals(2021, vo.getDate().getYear())
assertEquals(12, vo.getDate().getMonthValue())
assertEquals(11, vo.getDate().getDayOfMonth())
assertEquals(2021, vo.getDate().getYear())
assertEquals(12, vo.getDate().getMonthValue())
assertEquals(11, vo.getDate().getDayOfMonth())
assertEquals(2021, vo.getDate().getYear())
assertEquals(2, vo.getDate().getMonthValue())
assertEquals(1, vo.getDate().getDayOfMonth())
assertEquals(2021, vo.getDate().getYear())
assertEquals(2, vo.getDate().getMonthValue())
assertEquals(1, vo.getDate().getDayOfMonth())
assertEquals(2021, vo.getDate().getYear())
assertEquals(12, vo.getDate().getMonthValue())
assertEquals(13, vo.getDate().getDayOfMonth())
assertEquals(12, vo.getDate().getHour())
assertEquals(13, vo.getDate().getMinute())
assertEquals(0, vo.getDate().getSecond())
assertEquals(2021, vo.getDate().getYear())
assertEquals(12, vo.getDate().getMonthValue())
assertEquals(13, vo.getDate().getDayOfMonth())
assertEquals(12, vo.getDate().getHour())
assertEquals(13, vo.getDate().getMinute())
assertEquals(0, vo.getDate().getSecond())
assertEquals(2021, vo.getDate().getYear())
assertEquals(1, vo.getDate().getMonthValue())
assertEquals(2, vo.getDate().getDayOfMonth())
assertEquals(12, vo.getDate().getHour())
assertEquals(13, vo.getDate().getMinute())
assertEquals(14, vo.getDate().getSecond())
assertEquals(2021, vo.getDate().getYear())
assertEquals(1, vo.getDate().getMonthValue())
assertEquals(2, vo.getDate().getDayOfMonth())
assertEquals(12, vo.getDate().getHour())
assertEquals(13, vo.getDate().getMinute())
assertEquals(14, vo.getDate().getSecond())
assertEquals(2021, vo.getDate().getYear())
assertEquals(12, vo.getDate().getMonthValue())
assertEquals(13, vo.getDate().getDayOfMonth())
assertEquals(12, vo.getDate().getHour())
assertEquals(13, vo.getDate().getMinute())
assertEquals(0, vo.getDate().getSecond())
assertEquals(2021, vo.getDate().getYear())
assertEquals(12, vo.getDate().getMonthValue())
assertEquals(13, vo.getDate().getDayOfMonth())
assertEquals(12, vo.getDate().getHour())
assertEquals(13, vo.getDate().getMinute())
assertEquals(0, vo.getDate().getSecond())
assertEquals(2021, vo.getDate().getYear())
assertEquals(1, vo.getDate().getMonthValue())
assertEquals(11, vo.getDate().getDayOfMonth())
assertEquals(12, vo.getDate().getHour())
assertEquals(13, vo.getDate().getMinute())
assertEquals(14, vo.getDate().getSecond())
assertEquals(2021, vo.getDate().getYear())
assertEquals(1, vo.getDate().getMonthValue())
assertEquals(11, vo.getDate().getDayOfMonth())
assertEquals(12, vo.getDate().getHour())
assertEquals(13, vo.getDate().getMinute())
assertEquals(14, vo.getDate().getSecond())
assertEquals(2021, vo.getDate().getYear())
assertEquals(12, vo.getDate().getMonthValue())
assertEquals(3, vo.getDate().getDayOfMonth())
assertEquals(12, vo.getDate().getHour())
assertEquals(13, vo.getDate().getMinute())
assertEquals(14, vo.getDate().getSecond())
assertEquals(2021, vo.getDate().getYear())
assertEquals(12, vo.getDate().getMonthValue())
assertEquals(3, vo.getDate().getDayOfMonth())
assertEquals(12, vo.getDate().getHour())
assertEquals(13, vo.getDate().getMinute())
assertEquals(14, vo.getDate().getSecond())
assertEquals(2021, vo.getDate().getYear())
assertEquals(12, vo.getDate().getMonthValue())
assertEquals(11, vo.getDate().getDayOfMonth())
assertEquals(2021, vo.getDate().getYear())
assertEquals(12, vo.getDate().getMonthValue())
assertEquals(11, vo.getDate().getDayOfMonth())
assertEquals(2021, vo.getDate().getYear())
assertEquals(12, vo.getDate().getMonthValue())
assertEquals(11, vo.getDate().getDayOfMonth())
assertEquals(2021, vo.getDate().getYear())
assertEquals(12, vo.getDate().getMonthValue())
assertEquals(11, vo.getDate().getDayOfMonth())
assertNull(values)
assertNull(values)
assertEquals(2, bytes.length)
assertEquals(101, bytes[0])
assertEquals(102, bytes[1])
assertEquals(2, array.length)
assertEquals(101, array[0])
assertEquals(102, array[1])
assertEquals(expected, JSON.parseObject(str).get("val"))
assertEquals(expected, JSON.parseObject(bytes).get("val"))
assertEquals(expected, JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.US_ASCII).get("val"))
assertEquals(expected, JSON.parseObject(utf16, 0, utf16.length, StandardCharsets.UTF_16).get("val"))
assertEquals(expected, TestUtils.createJSONReaderStr(str).read(JSONObject.class).get("val"))
assertEquals(expected, JSON.parseObject(bytes, Bean.class).val)
assertEquals(expected, JSON.parseObject(str, Bean.class).val)
assertEquals(expected, TestUtils.createJSONReaderStr(str).read(Bean.class).val)
assertEquals(expected, JSON.parseObject(str).get("val"))
assertEquals(expected, JSON.parseObject(bytes).get("val"))
assertEquals(expected, JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.US_ASCII).get("val"))
assertEquals(expected, JSON.parseObject(utf16, 0, utf16.length, StandardCharsets.UTF_16).get("val"))
assertEquals(expected, TestUtils.createJSONReaderStr(str).read(JSONObject.class).get("val"))
assertEquals(expected, JSON.parseObject(bytes, Bean1.class).val)
assertEquals(expected, JSON.parseObject(str, Bean1.class).val)
assertEquals(expected, TestUtils.createJSONReaderStr(str).read(Bean1.class).val)
assertEquals(expectedDec, JSON.parseObject(bytes, Bean.class).val)
assertEquals(expectedDec, JSON.parseObject(str, Bean.class).val)
assertEquals(expectedDec, TestUtils.createJSONReaderStr(str).read(Bean.class).val)
assertEquals(expectedDoubleValue, JSON.parseObject(bytes, Bean2.class).val)
assertEquals(expectedDoubleValue, JSON.parseObject(str, Bean2.class).val)
assertEquals(expectedDoubleValue, TestUtils.createJSONReaderStr(str).read(Bean2.class).val)
assertEquals(str, JSONB.parse(jsonbBytes))
assertEquals(str, JSONB.parseObject(jsonbBytes, String.class))
assertEquals(str, JSONB.parse(jsonbBytes))
assertEquals(str, JSONB.parseObject(jsonbBytes, String.class))
assertEquals(str, JSONB.parse(jsonbBytes))
assertEquals(str, JSONB.parseObject(jsonbBytes, String.class))
assertEquals(str, JSONB.parse(jsonbBytes))
assertEquals(str, JSONB.parseObject(jsonbBytes, String.class))
assertEquals(str, JSONB.parse(jsonbBytes))
assertEquals(str, JSONB.parseObject(jsonbBytes, String.class))
assertEquals(bean.id, bean2.id)
assertEquals(bean.name, bean2.name)
assertEquals(bean.type, bean2.type)
assertEquals(values.length, id2.length)
assertEquals(values.length, id2.length)
assertEquals(0D, v1.v0000)
assertEquals(values.length, id2.length)
assertEquals(0D, v1.v0000)
assertEquals(values.length, id2.length)
assertEquals(values.length, id2.length)
assertEquals(0D, v1.v0000)
assertEquals(values.length, id2.length)
assertNull(bytes)
assertNull(values)
assertEquals(5, array.length)
assertEquals(Boolean.TRUE, array[0])
assertEquals(Boolean.FALSE, array[1])
assertNull(array[2])
assertEquals(Boolean.TRUE, array[3])
assertEquals(Boolean.FALSE, array[4])
assertEquals(Boolean.TRUE, array[0])
assertEquals(Boolean.FALSE, array[1])
assertNull(array[2])
assertEquals(Boolean.TRUE, array[3])
assertEquals(Boolean.FALSE, array[4])
assertEquals("{\n" + "\t\"values\":[\n" + "\t\ttrue,\n" + "\t\tfalse\n" + "\t]\n" + "}", JSONB.toJSONString(bytes))
assertArrayEquals(bean.values, parsed.values)
assertEquals("{\n" + "\t\"@type\":\"com.alibaba.fastjson2.primitves.BooleanArrayTest$Bean\",\n" + "\t\"values\":[\n" + "\t\ttrue,\n" + "\t\tfalse\n" + "\t]\n" + "}", JSONB.toJSONString(bytes))
assertArrayEquals(bean.values, parsed.values)
assertEquals("{\n" + "\t\"values\":[\n" + "\t\ttrue,\n" + "\t\tfalse\n" + "\t]\n" + "}", JSONB.toJSONString(bytes))
assertArrayEquals(bean.values, parsed.values)
assertEquals("{\n" + "\t\"@type\":\"com.alibaba.fastjson2.primitves.BooleanArrayTest$Bean1\",\n" + "\t\"values\":[\n" + "\t\ttrue,\n" + "\t\tfalse\n" + "\t]\n" + "}", JSONB.toJSONString(bytes))
assertArrayEquals(bean.values, parsed.values)
assertEquals("{\"value\":true}", str)
assertEquals(a.value, a1.value)
assertEquals("{\"value\":true}", str)
assertEquals(b.value, b1.value)
assertEquals(date, date2)
assertEquals(date, date2)
assertEquals(date, map2.get("date"))
assertEquals(date, date2)
assertEquals(date, map2.get("date"))
assertEquals(date, date2)
assertEquals(str, str_utf16be)
assertEquals(String.class, JSONFactory.getDefaultObjectReaderProvider().getObjectReader(String.class).getObjectClass())
assertEquals(values.length, id2.length)
assertEquals(values.length, id2.length)
assertEquals(values.length, id2.length)
assertEquals(values.length, id2.length)
assertEquals("{\"size\":101}", str)
assertEquals(bean.size, bean1.size)
assertEquals(values.length, id2.length)
assertEquals(values.length, id2.length)
assertEquals(values.length, id2.length)
assertEquals(0, JSONB.parseObject(jsonbBytes, Long.class).longValue())
assertEquals(-8388608L, JSONB.parseObject(jsonbBytes, Long.class).longValue())
assertEquals(values.length, id2.length)
assertEquals(Long.valueOf(1001), v1.getV0000())
assertEquals(Long.valueOf(1), v1.getV0000())
assertEquals(Long.valueOf(0), v1.getV0000())
assertNull(v1.getV0000())
assertEquals(Long.valueOf(1001), v1.getV0000())
assertEquals(values.length, id2.length)
assertEquals(values.length, id2.length)
assertEquals(values.length, id2.length)
assertEquals("[0,0,0,0,0,0]", str)
assertEquals(Arrays.toString(array), Arrays.toString((Object[]) JSONReader.of(str).read(array.getClass())))
assertEquals("[0,0,0,0,0,0]", str)
assertEquals(Arrays.toString(array), Arrays.toString((Object[]) JSONReader.of(str).read(array.getClass())))
assertEquals("[0,1,2,3,4]", str)
assertTrue(Arrays.equals(array, JSONReader.of(str).read(array.getClass())))
assertEquals("[0,1,2,3,4]", str)
assertTrue(Arrays.equals(array, JSONReader.of(str).read(array.getClass())))
assertEquals("[0,1,2,3,4]", str)
assertTrue(Arrays.equals(array, JSONReader.of(str).read(array.getClass())))
assertEquals("[0,1,2,3,4]", str)
assertTrue(Arrays.equals(array, JSONReader.of(str).read(array.getClass())))
assertEquals("[0,1,2,3,4]", str)
assertTrue(Arrays.equals(array, JSONReader.of(str).read(array.getClass())))
assertEquals("[0,1,2,3,4]", str)
assertTrue(Arrays.equals(array, JSONReader.of(str).read(array.getClass())))
assertEquals("[[0,1,2,3,4],[5,6],[7,8]]", str)
assertEquals(array.length, array2.length)
assertEquals("[0,1,2,3,4]", str)
assertTrue(Arrays.equals(array, JSONReader.of(str).read(array.getClass())))
assertEquals("[0,1,2,3,4]", str)
assertTrue(Arrays.equals(array, JSONReader.of(str).read(array.getClass())))
assertEquals("[0,1,2,3,4]", str)
assertTrue(Arrays.equals(array, JSONReader.of(str).read(array.getClass())))
assertEquals("[0,1,2,3,4]", str)
assertTrue(Arrays.equals(array, JSONReader.of(str).read(array.getClass())))
assertEquals("[0.0,1.0,2.0,3.0,4.0]", str)
assertTrue(Arrays.equals(array, JSONReader.of(str).read(array.getClass())))
assertEquals("[0.0,1.0,2.0,3.0,4.0]", str)
assertTrue(Arrays.equals(array, JSONReader.of(str).read(array.getClass())))
assertEquals("[0.0,1.0,2.0,3.0,4.0]", str)
assertTrue(Arrays.equals(array, JSONReader.of(str).read(array.getClass())))
assertEquals("[0.0,1.0,2.0,3.0,4.0]", str)
assertTrue(Arrays.equals(array, JSONReader.of(str).read(array.getClass())))
assertEquals(123.0D, vo.value.getAsDouble())
assertEquals(str, str2)
assertEquals(123D, vo.value.getAsDouble())
assertEquals(vo.value, vo2.value)
assertEquals(false, vo.value.isPresent())
assertEquals(str, str2)
assertEquals(false, vo.value.isPresent())
assertNull(values)
assertNull(values)
assertEquals(2, bytes.length)
assertEquals(101D, bytes[0])
assertEquals(102D, bytes[1])
assertEquals(2, array.length)
assertEquals(101D, array[0])
assertEquals(102D, array[1])
assertEquals("{}", JSON.toJSONString(new VO()))
assertEquals("{}", new String(JSON.toJSONBytes(new VO())))
assertEquals("{\"values\":null}", JSON.toJSONString(new VO(), JSONWriter.Feature.WriteNulls))
assertEquals("{\"values\":null}", new String(JSON.toJSONBytes(new VO(), JSONWriter.Feature.WriteNulls)))
assertEquals("{\"values\":null}", JSON.toJSONString(new VO2(), JSONWriter.Feature.WriteNulls))
assertEquals("{\"values\":null}", new String(JSON.toJSONBytes(new VO2(), JSONWriter.Feature.WriteNulls)))
assertEquals("{\"values\":null}", JSON.toJSONString(new VO(), JSONWriter.Feature.WriteNulls))
assertEquals("{\"values\":null}", new String(JSON.toJSONBytes(new VO(), JSONWriter.Feature.WriteNulls)))
assertEquals("{}", JSON.toJSONString(new VO2()))
assertEquals("{\"values\":null}", new String(JSON.toJSONBytes(new VO2(), JSONWriter.Feature.WriteNulls)))
assertEquals(Boolean.FALSE, v1.getV0000())
assertEquals(Boolean.TRUE, v1.getV0000())
assertEquals(Boolean.FALSE, v1.getV0000())
assertEquals(Boolean.FALSE, v1.getV0000())
assertEquals(Boolean.TRUE, v1.getV0000())
assertEquals(Boolean.TRUE, v1.getV0000())
assertEquals(Boolean.FALSE, v1.getV0000())
assertEquals(Boolean.FALSE, v1.getV0000())
assertEquals(Boolean.TRUE, v1.getV0000())
assertEquals(Boolean.TRUE, v1.getV0000())
assertEquals(Boolean.FALSE, v1.getV0000())
assertEquals(Boolean.FALSE, v1.getV0000())
assertEquals(Boolean.FALSE, v1.getV0000())
assertEquals(Boolean.FALSE, v1.getV0000())
assertEquals(Boolean.FALSE, v1.getV0000())
assertEquals(Boolean.TRUE, v1.getV0000())
assertEquals(Boolean.FALSE, v1.getV0000())
assertEquals(Boolean.TRUE, v1.getV0000())
assertEquals(Boolean.FALSE, v1.getV0000())
assertEquals(Boolean.TRUE, v1.getV0000())
assertEquals(Boolean.TRUE, v1.getV0000())
assertEquals(Boolean.FALSE, v1.getV0000())
assertEquals(Boolean.TRUE, v1.getV0000())
assertEquals(Boolean.FALSE, v1.getV0000())
assertNull(bytes)
assertNull(values)
assertEquals(2, chars.length)
assertEquals(101, chars[0])
assertEquals(102, chars[1])
assertEquals(2, chars.length)
assertEquals(101, chars[0])
assertEquals(102, chars[1])
assertEquals(1, chars.length)
assertEquals('A', chars[0])
assertEquals(1, chars.length)
assertEquals('A', chars[0])
assertEquals("{\"values\":null}", JSON.toJSONString(new VO(), JSONWriter.Feature.WriteNulls))
assertEquals("{\"values\":null}", new String(JSON.toJSONBytes(new VO(), JSONWriter.Feature.WriteNulls)))
assertEquals("{}", JSON.toJSONString(new VO2()))
assertEquals("{\"values\":null}", new String(JSON.toJSONBytes(new VO2(), JSONWriter.Feature.WriteNulls)))
assertEquals("{\"id\":101}", str)
assertEquals("id", entry.getKey())
assertEquals(101, entry.getValue())
assertEquals(102, entry.getValue())
assertEquals("id", entry.getKey())
assertEquals(101, ((Number) entry.getValue()).intValue())
assertEquals(102, entry.getValue())
assertEquals(values.length, id2.length)
assertEquals(BigDecimal.ZERO, decimal)
assertEquals(BigDecimal.valueOf(-8388608), decimal)
assertEquals(BigDecimal.ONE, vo.getId())
assertEquals(BigDecimal.ZERO, vo.getId())
assertEquals(new BigDecimal("638860.1"), vo.getId())
assertEquals("{\"v0000\":[],\"v0001\":[]}", str)
assertEquals(123, vo.value.getAsLong())
assertEquals(str, str2)
assertEquals(123, vo.value.getAsLong())
assertEquals(false, vo.value.isPresent())
assertEquals(str, str2)
assertEquals(false, vo.value.isPresent())
assertEquals("{\"size\":101}", str)
assertEquals(bean.size, bean1.size)
assertEquals(vo.value, o.value)
assertEquals(vo.value, o.value)
assertEquals(vo.value, o.value)
assertEquals(vo.value, o.value)
assertEquals(values.length, id2.length)
assertEquals(values.length, id2.length)
assertEquals(values.length, id2.length)
assertEquals(values.length, id2.length)
assertEquals(values.length, id2.length)
assertEquals(values.length, id2.length)
assertEquals("{\"values\":null}", JSON.toJSONString(new VO(), JSONWriter.Feature.WriteNulls))
assertEquals("{\"values\":null}", new String(JSON.toJSONBytes(new VO(), JSONWriter.Feature.WriteNulls)))
assertEquals("{\"values\":null}", JSON.toJSONString(JSONB.parseObject(JSONB.toBytes(new VO(), JSONWriter.Feature.WriteNulls)), JSONWriter.Feature.WriteNulls))
assertEquals("{}", JSON.toJSONString(new VO2()))
assertEquals("{\"values\":null}", new String(JSON.toJSONBytes(new VO2(), JSONWriter.Feature.WriteNulls)))
assertEquals("{\"values\":[]}", new String(JSON.toJSONBytes(new VO2(), JSONWriter.Feature.WriteNulls, JSONWriter.Feature.NullAsDefaultValue)))
assertEquals("{\"values\":null}", JSON.toJSONString(JSONB.parseObject(JSONB.toBytes(new VO2(), JSONWriter.Feature.WriteNulls)), JSONWriter.Feature.WriteNulls))
assertEquals("{\"values\":[]}", JSON.toJSONString(JSONB.parseObject(JSONB.toBytes(new VO2(), JSONWriter.Feature.WriteNulls, JSONWriter.Feature.NullAsDefaultValue)), JSONWriter.Feature.WriteNulls))
assertEquals("{\"values\":[1,2,3]}", JSON.toJSONString(vo))
assertEquals("{\"values\":[1,2,3]}", JSON.toJSONString(JSONB.parseObject(JSONB.toBytes(vo))))
assertEquals("{\"values\":[1,2,3,123,1234,12345,123456,1234567,12345678,123456789,1234567890,12345678901,123456789012]}", JSON.toJSONString(vo))
assertEquals("{\"values\":[1,2,3,123,1234,12345,123456,1234567,12345678,123456789,1234567890,12345678901,123456789012]}", JSON.toJSONString(JSONB.parseObject(JSONB.toBytes(vo))))
assertEquals(vo.value, o.value)
assertEquals(vo.value, o.value)
assertEquals(vo.value, o.value)
assertEquals(vo.value, o.value)
assertEquals(values.length, id2.length)
assertEquals(0, JSONB.parseObject(jsonbBytes, Short.class).shortValue())
assertEquals((short) -8388608, JSONB.parseObject(jsonbBytes, Short.class).shortValue())
assertEquals("{\"values\":null}", JSON.toJSONString(new VO(), JSONWriter.Feature.WriteNulls))
assertEquals("{\"values\":null}", new String(JSON.toJSONBytes(new VO(), JSONWriter.Feature.WriteNulls)))
assertEquals("{\"values\":null}", JSON.toJSONString(JSONB.parseObject(JSONB.toBytes(new VO(), JSONWriter.Feature.WriteNulls)), JSONWriter.Feature.WriteNulls))
assertEquals("{}", JSON.toJSONString(new VO2()))
assertEquals("{\"values\":null}", new String(JSON.toJSONBytes(new VO2(), JSONWriter.Feature.WriteNulls)))
assertEquals("{\"values\":[]}", new String(JSON.toJSONBytes(new VO2(), JSONWriter.Feature.WriteNulls, JSONWriter.Feature.NullAsDefaultValue)))
assertEquals("{\"values\":null}", JSON.toJSONString(JSONB.parseObject(JSONB.toBytes(new VO2(), JSONWriter.Feature.WriteNulls)), JSONWriter.Feature.WriteNulls))
assertEquals("{\"values\":[]}", JSON.toJSONString(JSONB.parseObject(JSONB.toBytes(new VO2(), JSONWriter.Feature.WriteNulls, JSONWriter.Feature.NullAsDefaultValue)), JSONWriter.Feature.WriteNulls))
assertEquals("{\"values\":[1,2,3]}", JSON.toJSONString(vo))
assertEquals("{\"values\":[1,2,3]}", JSON.toJSONString(JSONB.parseObject(JSONB.toBytes(vo))))
assertEquals("{\"values\":[1,2,3,123,1234,12345,123456,1234567,12345678,123456789,1234567890]}", JSON.toJSONString(vo))
assertEquals("{\"values\":[1,2,3,123,1234,12345,123456,1234567,12345678,123456789,1234567890]}", JSON.toJSONString(JSONB.parseObject(JSONB.toBytes(vo))))
assertEquals(vo.getDate(), v1.getDate())
assertEquals(now, localDate)
assertEquals(now, localDate)
assertEquals(vo.getDate(), v1.getDate())
assertEquals(vo.getDate(), v1.getDate())
assertEquals(2021, vo.getDate().getYear())
assertEquals(2, vo.getDate().getMonthValue())
assertEquals(3, vo.getDate().getDayOfMonth())
assertEquals(2021, vo.getDate().getYear())
assertEquals(12, vo.getDate().getMonthValue())
assertEquals(1, vo.getDate().getDayOfMonth())
assertEquals(2021, vo.getDate().getYear())
assertEquals(12, vo.getDate().getMonthValue())
assertEquals(11, vo.getDate().getDayOfMonth())
assertEquals(2021, vo.getDate().getYear())
assertEquals(12, vo.getDate().getMonthValue())
assertEquals(11, vo.getDate().getDayOfMonth())
assertEquals(2021, vo.getDate().getYear())
assertEquals(12, vo.getDate().getMonthValue())
assertEquals(11, vo.getDate().getDayOfMonth())
assertEquals(2021, vo.getDate().getYear())
assertEquals(12, vo.getDate().getMonthValue())
assertEquals(11, vo.getDate().getDayOfMonth())
assertEquals(2021, vo.getDate().getYear())
assertEquals(12, vo.getDate().getMonthValue())
assertEquals(11, vo.getDate().getDayOfMonth())
assertEquals(2021, vo.getDate().getYear())
assertEquals(2, vo.getDate().getMonthValue())
assertEquals(1, vo.getDate().getDayOfMonth())
assertEquals(2021, vo.getDate().getYear())
assertEquals(2, vo.getDate().getMonthValue())
assertEquals(1, vo.getDate().getDayOfMonth())
assertEquals(2021, vo.getDate().getYear())
assertEquals(2, vo.getDate().getMonthValue())
assertEquals(1, vo.getDate().getDayOfMonth())
assertEquals(2021, vo.getDate().getYear())
assertEquals(2, vo.getDate().getMonthValue())
assertEquals(1, vo.getDate().getDayOfMonth())
assertEquals("{\"values\":null}", JSON.toJSONString(new VO(), JSONWriter.Feature.WriteNulls))
assertEquals("{\"values\":null}", new String(JSON.toJSONBytes(new VO(), JSONWriter.Feature.WriteNulls)))
assertEquals("{\"values\":null}", JSON.toJSONString(JSONB.parseObject(JSONB.toBytes(new VO(), JSONWriter.Feature.WriteNulls)), JSONWriter.Feature.WriteNulls))
assertEquals("{}", JSON.toJSONString(new VO2()))
assertEquals("{\"values\":null}", new String(JSON.toJSONBytes(new VO2(), JSONWriter.Feature.WriteNulls)))
assertEquals("{\"values\":null}", JSON.toJSONString(JSONB.parseObject(JSONB.toBytes(new VO2(), JSONWriter.Feature.WriteNulls)), JSONWriter.Feature.WriteNulls))
assertEquals("{\"values\":[1,2,3]}", JSON.toJSONString(vo))
assertEquals("{\"values\":[1,2,3]}", JSON.toJSONString(JSONB.parseObject(JSONB.toBytes(vo))))
assertEquals("{\"values\":[1,2,3]}", JSON.toJSONString(vo))
assertEquals("{\"values\":[1,2,3]}", JSON.toJSONString(JSONB.parseObject(JSONB.toBytes(vo))))
assertEquals("1", array.get(0))
assertEquals("[\"1\",\"2\",\"3\"]", jsonWriter.toString())
assertNotNull(vo.getV0000())
assertEquals(1, vo.getV0000().size())
assertEquals("1001", vo.getV0000().get(0))
assertNull(values)
assertNull(values)
assertEquals(3, array.length())
assertEquals(101, array.get(0))
assertEquals(0, array.get(1))
assertEquals(102, array.get(2))
assertEquals(3, array.length())
assertEquals(101, array.get(0))
assertEquals(0, array.get(1))
assertEquals(102, array.get(2))
assertEquals(str, str2)
assertNull(values)
assertNull(values)
assertEquals(2, bytes.length)
assertEquals(101, bytes[0])
assertEquals(102, bytes[1])
assertEquals(5, array.length)
assertEquals(0, array[0])
assertEquals(1, array[1])
assertEquals(null, array[2])
assertEquals(102, array[3])
assertEquals(1001, array[4])
assertEquals("12345678901234567890123456789012345678901234567890123456789012345678901234567890", JSON.toJSONString(vo2.getValue()))
assertEquals("12345678901234567890123456789012345678901234567890123456789012345678901234567890", JSON.toJSONString(vo2.getValue()))
assertEquals(Integer.valueOf(100), vo.getValue())
assertEquals(new BigDecimal("1.1"), vo.getValue())
assertEquals(new BigDecimal("200.1"), vo.getValue())
assertEquals(new BigDecimal("65536.1"), vo.getValue())
assertEquals(new BigDecimal("6388607.1"), vo.getValue())
assertEquals(new BigDecimal("2147483648.1"), vo.getValue())
assertEquals(new BigDecimal("9223372036854775807.1"), vo.getValue())
assertNull(bytes)
assertNull(values)
assertEquals(2, bytes.length)
assertEquals(101, bytes[0])
assertEquals(102, bytes[1])
assertEquals(2, chars.length)
assertEquals(101, chars[0])
assertEquals(102, chars[1])
assertEquals(values.length, id2.length)
assertEquals(BigInteger.ZERO, integer)
assertEquals(BigInteger.valueOf(-8388608), integer)
assertEquals("0", JSON.toJSONString(BigInteger.ZERO))
assertEquals(BigInteger.ZERO, JSONB.parse(jsonbBytes))
assertEquals(BigInteger.ONE, vo.getId())
assertEquals(BigInteger.ZERO, vo.getId())
assertEquals("{\"locale\":\"zh_CN\"}", str)
assertEquals(vo.locale, v2.locale)
assertEquals(vo.locale, v2.locale)
assertEquals("{\"units\":[\"SECONDS\",\"DAYS\"]}", json)
assertEquals(bean.units.size(), bean1.units.size())
assertEquals(bean.units.size(), bean1.units.size())
assertEquals("-128", o.value.toString())
assertNull(values)
assertNull(values)
assertEquals(2, bytes.length)
assertEquals(101, bytes[0])
assertEquals(102, bytes[1])
assertEquals(2, array.length)
assertEquals(101, array[0])
assertEquals(102, array[1])
assertEquals(11, JSONB.parseObject(JSONB.toBytes("20171213"), Calendar.class).get(Calendar.MONTH))
assertEquals(1, JSONB.parseObject(JSONB.toBytes("2017-2-3"), Calendar.class).get(Calendar.MONTH))
assertEquals(11, JSONB.parseObject(JSONB.toBytes("2017-12-13"), Calendar.class).get(Calendar.MONTH))
assertEquals(11, JSONB.parseObject(JSONB.toBytes("2017-12-3"), Calendar.class).get(Calendar.MONTH))
assertEquals(6, JSONB.parseObject(JSONB.toBytes("2017-7-13"), Calendar.class).get(Calendar.MONTH))
assertEquals(11, JSONB.parseObject(JSONB.toBytes("2017/12/13"), Calendar.class).get(Calendar.MONTH))
assertEquals(11, JSONB.parseObject(JSONB.toBytes("13.12.2017"), Calendar.class).get(Calendar.MONTH))
assertEquals(11, JSONB.parseObject(JSONB.toBytes("13-12-2017"), Calendar.class).get(Calendar.MONTH))
assertEquals(2017, JSONB.parseObject(JSONB.toBytes("2017-12-13 00:00:00"), Calendar.class).get(Calendar.YEAR))
assertEquals(2017, JSONB.parseObject(JSONB.toBytes("2017/12/13 00:00:00"), Calendar.class).get(Calendar.YEAR))
assertEquals(6, JSON.parseObject("\"2017년7월3일\"", Calendar.class).get(Calendar.MONTH))
assertEquals(6, JSON.parseObject("\"2017년7월13일\"", Calendar.class).get(Calendar.MONTH))
assertEquals(6, JSON.parseObject("\"2017-7-13\"", Calendar.class).get(Calendar.MONTH))
assertEquals(11, JSON.parseObject("\"2017-12-7\"", Calendar.class).get(Calendar.MONTH))
assertEquals(11, JSON.parseObject("\"2017-12-17\"", Calendar.class).get(Calendar.MONTH))
assertEquals(11, JSON.parseObject("\"2017年12月17日\"", Calendar.class).get(Calendar.MONTH))
assertEquals(2017, JSON.parseObject("\"20171213\"".getBytes(StandardCharsets.UTF_8), Calendar.class).get(Calendar.YEAR))
assertEquals(2017, JSON.parseObject("\"2017-2-3\"".getBytes(StandardCharsets.UTF_8), Calendar.class).get(Calendar.YEAR))
assertEquals(11, JSON.parseObject("\"2017-12-3\"".getBytes(StandardCharsets.UTF_8), Calendar.class).get(Calendar.MONTH))
assertEquals(2, JSON.parseObject("\"2017-3-13\"".getBytes(StandardCharsets.UTF_8), Calendar.class).get(Calendar.MONTH))
assertEquals(2017, JSON.parseObject("\"2017年1月13日\"".getBytes(StandardCharsets.UTF_8), Calendar.class).get(Calendar.YEAR))
assertEquals(11, JSON.parseObject("\"2017年12月13日\"".getBytes(StandardCharsets.UTF_8), Calendar.class).get(Calendar.MONTH))
assertEquals(2017, JSON.parseObject("\"2017年11月9日\"".getBytes(StandardCharsets.UTF_8), Calendar.class).get(Calendar.YEAR))
assertEquals(dates.length, date2.length)
assertEquals(dates.length, id2.length)
assertEquals(dates.length, id2.length)
assertEquals(dates.length, id2.length)
assertEquals(dates.length, id2.length)
assertEquals("-128", o.value.toString())
assertEquals("{\"size\":101}", str)
assertEquals(bean.size, bean1.size)
assertEquals("{\"size\":101}", str)
assertEquals(bean.size, bean1.size)
assertEquals(123, bean.items.get(0).id)
assertEquals(123, bean.items.get(0))
assertEquals(dates.length, date2.length)
assertEquals(dates.length, id2.length)
assertEquals(dates.length, id2.length)
assertEquals(dates.length, id2.length)
assertEquals(dates.length, id2.length)
assertNull(values)
assertNull(values)
assertEquals(2, bytes.length)
assertEquals(101F, bytes[0])
assertEquals(102F, bytes[1])
assertEquals(2, array.length)
assertEquals(101F, array[0])
assertEquals(102F, array[1])
assertEquals("{\"values\":null}", JSON.toJSONString(new VO(), JSONWriter.Feature.WriteNulls))
assertEquals("{\"values\":null}", new String(JSON.toJSONBytes(new VO(), JSONWriter.Feature.WriteNulls)))
assertEquals("{}", JSON.toJSONString(new VO2()))
assertEquals("{\"values\":null}", new String(JSON.toJSONBytes(new VO2(), JSONWriter.Feature.WriteNulls)))
assertNull(bytes)
assertNull(values)
assertEquals(5, array.length)
assertEquals(true, array[0])
assertEquals(false, array[1])
assertEquals(false, array[2])
assertEquals(true, array[3])
assertEquals(false, array[4])
assertEquals(true, array[0])
assertEquals(false, array[1])
assertEquals(false, array[2])
assertEquals(true, array[3])
assertEquals(false, array[4])
assertEquals("{}", JSON.toJSONString(new VO()))
assertEquals("{}", new String(JSON.toJSONBytes(new VO())))
assertEquals("{\"values\":null}", JSON.toJSONString(new VO(), JSONWriter.Feature.WriteNulls))
assertEquals("{\"values\":null}", new String(JSON.toJSONBytes(new VO(), JSONWriter.Feature.WriteNulls)))
assertEquals("{\"values\":null}", JSON.toJSONString(new VO2(), JSONWriter.Feature.WriteNulls))
assertEquals("{\"values\":null}", new String(JSON.toJSONBytes(new VO2(), JSONWriter.Feature.WriteNulls)))
assertEquals("{\n" + "\t\"values\":[\n" + "\t\ttrue,\n" + "\t\tfalse\n" + "\t]\n" + "}", JSONB.toJSONString(bytes))
assertArrayEquals(bean.values, parsed.values)
assertEquals("{\n" + "\t\"@type\":\"com.alibaba.fastjson2.primitves.BooleanValueArrayTest$Bean\",\n" + "\t\"values\":[\n" + "\t\ttrue,\n" + "\t\tfalse\n" + "\t]\n" + "}", JSONB.toJSONString(bytes))
assertArrayEquals(bean.values, parsed.values)
assertEquals("{\n" + "\t\"values\":[\n" + "\t\ttrue,\n" + "\t\tfalse\n" + "\t]\n" + "}", JSONB.toJSONString(bytes))
assertArrayEquals(bean.values, parsed.values)
assertEquals("{\n" + "\t\"@type\":\"com.alibaba.fastjson2.primitves.BooleanValueArrayTest$Bean1\",\n" + "\t\"values\":[\n" + "\t\ttrue,\n" + "\t\tfalse\n" + "\t]\n" + "}", JSONB.toJSONString(bytes))
assertArrayEquals(bean.values, parsed.values)
assertEquals(values.length, id2.length)
assertEquals(values.length, id2.length)
assertEquals(0, JSONB.parseObject(jsonbBytes, Float.class).floatValue())
assertEquals(-8388608F, JSONB.parseObject(jsonbBytes, Float.class).floatValue())
assertEquals(0, JSONB.parseObject(jsonbBytes, Double.class).doubleValue())
assertEquals(-8388608F, JSONB.parseObject(jsonbBytes, Double.class).doubleValue())
assertEquals(0D, v1.getV0000())
assertEquals(values.length, id2.length)
assertEquals(0D, v1.getV0000())
assertEquals(values.length, id2.length)
assertEquals(values.length, id2.length)
assertEquals(0D, v1.getV0000())
assertEquals(values.length, id2.length)
assertEquals(123, vo.value.getAsInt())
assertEquals(str, str2)
assertEquals(123, vo.value.getAsInt())
assertEquals(false, vo.value.isPresent())
assertEquals(str, str2)
assertEquals(false, vo.value.isPresent())
assertEquals("\"HOURS\"", JSON.toJSONString(TimeUnit.HOURS))
assertEquals("{\"unit\":\"" + bean.unit.name() + "\"}", JSON.toJSONString(bean, JSONWriter.Feature.WriteEnumsUsingName))
assertEquals("{\"unit\":" + bean.unit.ordinal() + "}", JSON.toJSONString(bean))
assertEquals(TimeUnit.DAYS, JSON.parseObject("{\"unit\":6}", Bean.class).unit)
assertEquals(TimeUnit.DAYS, JSON.parseObject("{\"unit\":6}").to(Bean.class).unit)
assertEquals(TimeUnit.DAYS, JSON.parseObject("{\"unit\":\"DAYS\"}", Bean.class).unit)
assertEquals(TimeUnit.DAYS, JSON.parseObject("{\"unit\":\"DAYS\"}").to(Bean.class).unit)
assertEquals(TimeUnit.DAYS, JSONArray.of("DAYS").getObject(0, TimeUnit.class))
assertEquals(TimeUnit.DAYS, JSONArray.of(6).getObject(0, TimeUnit.class))
assertNull(values)
assertNull(values)
assertEquals(3, array.length())
assertEquals(101, array.get(0))
assertEquals(0, array.get(1))
assertEquals(102, array.get(2))
assertEquals(3, array.length())
assertEquals(101, array.get(0))
assertEquals(0, array.get(1))
assertEquals(102, array.get(2))
assertNull(values)
assertNull(values)
assertEquals(2, bytes.length)
assertEquals(101, bytes[0])
assertEquals(102, bytes[1])
assertEquals(2, array.length)
assertEquals(101, array[0])
assertEquals(102, array[1])
assertEquals(123L, vo.getValue().longValue())
assertEquals("123", vo.value.get())
assertEquals("{\"value\":\"123\"}", str2)
assertEquals("123", vo.value.get())
assertEquals("{\"value\":\"123\"}", str2)
assertEquals(false, vo.value.isPresent())
assertEquals(str, str2)
assertEquals(false, vo.value.isPresent())
assertEquals(values.length, id2.length)
assertEquals(values.length, id2.length)
assertEquals(values.length, id2.length)
assertEquals(values.length, id2.length)
assertEquals(values.length, id2.length)
assertEquals(values.length, id2.length)
assertEquals(Integer.valueOf(1001), v1.getV0000())
assertEquals(Integer.valueOf(1), v1.getV0000())
assertEquals(Integer.valueOf(0), v1.getV0000())
assertNull(v1.getV0000())
assertEquals(Integer.valueOf(1001), v1.getV0000())
assertEquals("{\"value\":\"CNY\"}", str)
assertEquals(vo.value, v2.value)
assertEquals(vo.value, v2.value)
assertEquals(vo.value, o.value)
assertEquals(vo.value, o.value)
assertEquals(vo.value, o.value)
assertEquals(vo.value, o.value)
assertEquals("{\"v0000\":\"Asia/Shanghai\"}", str)
assertEquals(vo.getV0000(), v2.getV0000())
assertEquals(vo.getV0000(), v2.getV0000())
assertEquals("\"abc\"", str)
assertTrue(Arrays.equals(array, JSONReader.of(str).read(array.getClass())))
assertEquals("[\"a\",\"b\",\"c\"]", str)
assertNotNull(instant)
assertNotNull(instant)
assertEquals(values.length, id2.length)
assertEquals(values.length, id2.length)
assertEquals(0F, v1.getV0000())
assertEquals(values.length, id2.length)
assertEquals(0F, v1.getV0000())
assertEquals(values.length, id2.length)
assertEquals(values.length, id2.length)
assertEquals(0F, v1.getV0000())
assertEquals(values.length, id2.length)
assertEquals("{\"value\":\"Asia/Shanghai\"}", str)
assertEquals(vo.value, v2.value)
assertEquals(vo.value, v2.value)
assertEquals("true", str)
assertEquals(value, JSONReader.of(str).readBoolValue())
assertEquals(Boolean.TRUE, JSONB.parseObject(jsonbBytes, Boolean.class))
assertNull(JSONB.parseObject(jsonbBytes, Boolean.class))
assertNull(JSON.parseObject("null", Boolean.class))
assertEquals("1", str)
assertEquals(value, JSONReader.of(str).readBoolValue())
assertEquals("false", str)
assertEquals(value, JSONReader.of(str).readBoolValue())
assertEquals("0", str)
assertEquals(value, JSONReader.of(str).readBoolValue())
assertEquals("[true,false]", str)
assertTrue(Arrays.equals(array, JSONReader.of(str).read(array.getClass())))
assertEquals("[[true,false,true],[false,true],[true,false]]", str)
assertEquals(array.length, array2.length)
assertEquals("[true,false]", str)
assertTrue(Arrays.equals(array, JSONReader.of(str).read(array.getClass())))
assertEquals("[1,0]", str)
assertTrue(Arrays.equals(array, JSONReader.of(str).read(array.getClass())))
assertEquals("[1,0]", str)
assertTrue(Arrays.equals(array, JSONReader.of(str).read(array.getClass())))
assertEquals("{\"Id\":101,\"Name\":\"DataWorks\"}", JSON.toJSONString(bean))
assertEquals("{\"Id\":101,\"Name\":\"DataWorks\"}", JSON.toJSONString(bean))
assertEquals("{\"ID\":101,\"NAME\":\"DataWorks\"}", JSON.toJSONString(bean))
assertEquals("{\"ID\":101,\"NAME\":\"DataWorks\"}", JSON.toJSONString(bean))
assertEquals("abc", bean.value)
assertEquals("abc", bean.value)
assertEquals("abc", bean.value)
assertEquals("abc", bean.value)
assertEquals("{}", text)
assertEquals("{}", jsonWriter.toString())
assertEquals("\"Hangzhou\"", str)
assertEquals("[1001,\"DataWorks\"]", str)
assertEquals(vo.id, vo2.id)
assertEquals(vo.name, vo2.name)
assertEquals("{\"bean-id\":101,\"bean-name\":\"DataWorks\"}", JSON.toJSONString(bean))
assertEquals("{\"bean-id\":101,\"bean-name\":\"DataWorks\"}", JSON.toJSONString(bean))
assertEquals("{\"bean_id\":101,\"bean_name\":\"DataWorks\"}", JSON.toJSONString(bean))
assertEquals("{\"bean_id\":101,\"bean_name\":\"DataWorks\"}", JSON.toJSONString(bean))
assertEquals("{\"value\":[1001,\"DataWorks\"]}", str)
assertEquals(vo.id, vo2.id)
assertEquals(vo.name, vo2.name)
assertNotNull(jsonTypeFromClass)
assertTrue(jsonTypeFromAnnotation.isPresent())
assertNotNull(jsonTypeFromClass)
assertTrue(jsonTypeFromAnnotation.isPresent())
assertEquals(bean.f0, bean1.f0)
assertEquals(bean.f1, bean1.f1)
assertEquals(bean.f2, bean1.f2)
assertEquals(bean.f3, bean1.f3)
assertEquals(bean.f0, bean1.f0)
assertEquals(bean.f1, bean1.f1)
assertEquals(bean.f2, bean1.f2)
assertEquals(bean.f3, bean1.f3)
assertTrue(jsonCreator.isPresent())
assertTrue(jsonCreator.isPresent())
assertNotNull(jsonType)
assertNotNull(jsonType)
assertEquals("{\"id\":123}", json)
assertNotNull(bean.localTime)
assertEquals(11, bean.localTime.getHour())
assertEquals(36, bean.localTime.getMinute())
assertEquals(11, bean.localTime.getSecond())
assertNotNull(bean.localTime)
assertEquals(11, bean.localTime.getHour())
assertEquals(36, bean.localTime.getMinute())
assertEquals(11, bean.localTime.getSecond())
assertNotNull(bean.localTime)
assertEquals(11, bean.localTime.getHour())
assertEquals(36, bean.localTime.getMinute())
assertEquals(11, bean.localTime.getSecond())
assertTrue(jsonField.isPresent())
assertEquals("{\"id\":101}", JSON.toJSONString(bean))
assertEquals("{\"id\":101}", JSON.toJSONString(bean))
assertEquals("{\"id\":\"100\"}", JSON.toJSONString(bean))
assertEquals("{\"type\":102}", str)
assertEquals(bean.type, bean1.type)
assertEquals("101", str)
assertEquals(bean.code, bean1.code)
assertEquals("{\"bean_id\":1001}", str)
assertEquals(12304, vo.getId())
assertEquals("ljw", vo.getName())
assertEquals(12304, vo.getId())
assertEquals("ljw", vo.getName())
assertEquals(123, bean.id)
assertEquals("{\"name\":\"DataWorks\",\"id\":101}", JSON.toJSONString(bean))
assertEquals("{\"name\":\"DataWorks\",\"id\":101}", JSON.toJSONString(bean))
assertEquals(8, vo.id8)
assertEquals(16, vo.id16)
assertEquals(32, vo.id32)
assertEquals(64, vo.id64)
assertEquals(8, vo.id8.byteValue())
assertEquals(16, vo.id16.shortValue())
assertEquals(32, vo.id32.intValue())
assertEquals(64, vo.id64.longValue())
assertEquals(true, vo.flag)
assertEquals(32F, vo.floatValue)
assertEquals(64D, vo.doubleValue)
assertEquals(true, vo.flag.booleanValue())
assertEquals(32F, vo.floatValue)
assertEquals(64D, vo.doubleValue)
assertNull(vo.id)
assertEquals(BigDecimal.valueOf(32), vo.decimalValue)
assertEquals(BigInteger.valueOf(64), vo.bigIntValue)
assertEquals("xx", vo.strValue)
assertEquals(101, vo.id)
assertEquals(101, vo2.id)
assertEquals(101, vo.id)
assertEquals(101, vo2.id)
assertEquals(101, vo.id)
assertEquals(101, vo2.id)
assertEquals(Boolean.TRUE, JSON.parseObject("{}", Bean0.class).value)
assertEquals(Boolean.TRUE, JSONB.parseObject(JSONB.toBytes(new HashMap<>()), Bean0.class).value)
assertEquals(Byte.valueOf((byte) 1), JSON.parseObject("{}", Bean1.class).value)
assertEquals(Short.valueOf((short) 2), JSON.parseObject("{}", Bean2.class).value)
assertEquals(1, bean.value0)
assertEquals(2, bean.value1)
assertEquals(1, bean.value0)
assertEquals(2, bean.value1)
assertEquals(1, bean.value0)
assertEquals(2, bean.value1)
assertEquals(3.1f, bean.value2)
assertEquals(1, bean.value0)
assertEquals(2, bean.value1)
assertEquals(3.1f, bean.value2)
assertEquals(1, bean.value0)
assertEquals(2, bean.value1)
assertEquals(3.1f, bean.value2)
assertEquals(4.2D, bean.value3)
assertEquals(1, bean.value0)
assertEquals(2, bean.value1)
assertEquals(3.1f, bean.value2)
assertEquals(4.2D, bean.value3)
assertEquals(1, bean.value0)
assertEquals(2, bean.value1)
assertEquals(3.1f, bean.value2)
assertEquals(4.2D, bean.value3)
assertEquals(6.3D, bean.value4)
assertEquals(1, bean.value0)
assertEquals(2, bean.value1)
assertEquals(3.1f, bean.value2)
assertEquals(4.2D, bean.value3)
assertEquals(6.3D, bean.value4)
assertEquals(1, bean.value0)
assertEquals(2, bean.value1)
assertEquals(3.1f, bean.value2)
assertEquals(4.2D, bean.value3)
assertEquals(6.3D, bean.value4)
assertEquals("xx", bean.value5)
assertEquals(1, bean.value0)
assertEquals(2, bean.value1)
assertEquals(3.1f, bean.value2)
assertEquals(4.2D, bean.value3)
assertEquals(6.3D, bean.value4)
assertEquals("xx", bean.value5)
assertEquals(1, bean.value0)
assertEquals(2, bean.value1)
assertEquals(3.1f, bean.value2)
assertEquals(4.2D, bean.value3)
assertEquals(6.3D, bean.value4)
assertEquals("xx", bean.value5)
assertEquals(new BigDecimal(123.5), bean.value6)
assertEquals(1, bean.value0)
assertEquals(2, bean.value1)
assertEquals(3.1f, bean.value2)
assertEquals(4.2D, bean.value3)
assertEquals(6.3D, bean.value4)
assertEquals("xx", bean.value5)
assertEquals(new BigDecimal(123.5), bean.value6)
assertNotNull(bean.list)
assertTrue(bean.list.isEmpty())
assertEquals("{\"ID\":123}", JSON.toJSONString(bean))
assertEquals("{\"id\":101}", JSON.toJSONString(bean))
assertEquals("{\"id\":101}", JSON.toJSONString(bean))
assertEquals("{\"id\":\"123元\"}", str)
assertEquals(bean.id, bean1.id)
assertEquals("{\"id\":\"123元\"}", str)
assertEquals(bean.id, bean1.id)
assertEquals("{\"id\":\"123元\"}", str)
assertEquals(bean.id, bean1.id)
assertEquals("{\"id\":\"123元\"}", str)
assertEquals(bean.id, bean1.id)
assertEquals("{\"id\":\"123元\"}", str)
assertEquals(bean.id, bean1.id)
assertEquals("{\"id\":\"123.0元\"}", str)
assertEquals(bean.id, bean1.id)
assertEquals("{\"id\":\"123.0元\"}", str)
assertEquals(bean.id, bean1.id)
assertEquals("{\"id\":101,\"name\":\"DataWorks\"}", JSON.toJSONString(bean))
assertEquals("{\"id\":101,\"name\":\"DataWorks\"}", JSON.toJSONString(bean))
assertEquals("{\"id\":1001,\"value\":{}}", json)
assertEquals("{\"id\":1001,\"value\":{}}", json)
assertEquals("{\"id\":1001,\"value\":{}}", json)
assertEquals("{\"id\":1001,\"value\":{}}", json)
assertEquals("{}", json)
assertEquals("{}", json)
assertEquals(123, integer.get())
assertEquals(123, integer.get())
assertEquals("\"123\"", ref.get())
assertEquals("\"123\"", ref.get())
assertEquals(true, ref.get())
assertEquals(false, ref.get())
assertEquals(null, ref.get())
assertEquals(new JSONArray(), ref.get())
assertEquals(new JSONObject(), ref.get())
assertEquals(101, vo.getV0000())
assertEquals(101, map.get("v0000"))
assertEquals("$", resolveTask.toString())
assertSame(filter, jsonReader.getContext().getContextAutoTypeBeforeHandler())
assertEquals(values.length, id2.length)
assertEquals(values.length, id2.length)
assertEquals(values.length, id2.length)
assertEquals(values.length, id2.length)
assertEquals(values.length, id2.length)
assertEquals(values.length, id2.length)
assertEquals(values.length, id2.length)
assertEquals(Double.valueOf(1), vo.getV0000())
assertEquals(Double.parseDouble(str), d0)
assertEquals(expected, JSON.parseObject(str, Double.class))
assertEquals(expected, (Double) JSON.parse(str))
assertEquals(expected, JSON.parseObject(str, BigDecimal.class).doubleValue())
assertEquals(expected, JSON.parseObject(bytes, Double.class))
assertEquals(expected, (Double) JSON.parse(bytes))
assertEquals(expected, JSON.parseObject(bytes, BigDecimal.class).doubleValue())
assertEquals(expected, JSONReader.of(chars).readDoubleValue())
assertEquals(expected, (Double) JSONReader.of(chars).readNumber())
assertEquals(expected, JSONReader.of(chars).readBigDecimal().doubleValue())
assertArrayEquals(new Object[] { "John", 27 }, values)
assertArrayEquals(new Object[] { "New York", "NY" }, values)
assertEquals(map.size(), map1.size())
assertTrue(map1.containsKey(null))
assertEquals(map.get(null), map1.get(null))
assertEquals(map.size(), map2.size())
assertEquals(objects.length, parsed.length)
assertEquals(2, bytes.length)
assertEquals(BC_OBJECT, bytes[0])
assertEquals(BC_OBJECT_END, bytes[1])
assertEquals(0, parsed.size())
assertEquals(6, bytes.length)
assertEquals(BC_OBJECT, bytes[0])
assertEquals(BC_OBJECT_END, bytes[bytes.length - 1])
assertEquals(1, parsed.size())
assertEquals(value, parsed.get(key))
assertEquals(21, bytes.length)
assertEquals(BC_OBJECT, bytes[0])
assertEquals(BC_OBJECT_END, bytes[bytes.length - 1])
assertEquals(bytes.length, 2 + k1Bytes.length + v1Bytes.length + k2Bytes.length + v2Bytes.length)
assertEquals(2, parsed.size())
assertEquals(v1, parsed.get(k1))
assertEquals(v2, parsed.get(k2))
assertEquals(2, bytes.length)
assertEquals(BC_BINARY, bytes[0])
assertEquals(BC_INT32_NUM_0, bytes[1])
assertEquals(0, parsed.length)
assertEquals(17, bytes.length)
assertEquals(BC_OBJECT, bytes[0])
assertEquals(BC_OBJECT_END, bytes[bytes.length - 1])
assertEquals(bytes.length, 4 + k1Bytes.length + v1Bytes.length + k2Bytes.length + v2Bytes.length)
assertEquals(BC_SYMBOL, bytes[1])
assertEquals(BC_SYMBOL, bytes[2 + k1Bytes.length + v1Bytes.length])
assertEquals(2, parsed.size())
assertEquals(v1, parsed.get(k1))
assertEquals(v2, parsed.get(k2))
assertEquals(17, bytes.length)
assertEquals(BC_OBJECT, bytes[0])
assertEquals(BC_OBJECT_END, bytes[bytes.length - 1])
assertEquals(bytes.length, 4 + k1Bytes.length + v1Bytes.length + k2Bytes.length + v2Bytes.length)
assertEquals(BC_SYMBOL, bytes[1])
assertEquals(BC_SYMBOL, bytes[2 + k1Bytes.length + v1Bytes.length])
assertEquals(2, parsed.size())
assertEquals(v1, parsed.get(k1))
assertEquals(v2, parsed.get(k2))
assertEquals(1, bytes.length)
assertEquals(BC_DOUBLE_NUM_0, bytes[0])
assertEquals(zero, parsed.doubleValue())
assertEquals(1, bytes.length)
assertEquals(BC_DOUBLE_NUM_1, bytes[0])
assertEquals(one, parsed.doubleValue())
assertEquals(1, bytes.length)
assertEquals(BC_STR_ASCII_FIX_0, bytes[0])
assertEquals(1, bytes.length)
assertEquals(BC_ARRAY_FIX_0, bytes[0])
assertEquals(18, bytes.length)
assertEquals(BC_OBJECT, bytes[0])
assertEquals(BC_OBJECT, bytes[1 + k1Bytes.length])
assertEquals(BC_REFERENCE, bytes[2 + k1Bytes.length + k2Bytes.length])
assertEquals(BC_OBJECT_END, bytes[3 + k1Bytes.length + k2Bytes.length + refBytes.length])
assertEquals(BC_OBJECT_END, bytes[4 + k1Bytes.length + k2Bytes.length + refBytes.length])
assertSame(parsed, ((Map) parsed.get("value")).get("root"))
assertEquals(21, bytes.length)
assertEquals(BC_OBJECT, bytes[0])
assertEquals(BC_OBJECT, bytes[1 + k1Bytes.length])
assertEquals(BC_REFERENCE, bytes[2 + k1Bytes.length + k2Bytes.length])
assertEquals(BC_OBJECT_END, bytes[3 + k1Bytes.length + k2Bytes.length + refBytes.length])
assertEquals(BC_OBJECT_END, bytes[4 + k1Bytes.length + k2Bytes.length + refBytes.length])
assertSame(parsed.get("value"), ((Map) parsed.get("value")).get("parent"))
assertEquals(34, bytes.length)
assertEquals(BC_OBJECT, bytes[0])
assertEquals(BC_OBJECT, bytes[1 + k1Bytes.length])
assertEquals(BC_OBJECT_END, bytes[2 + k1Bytes.length])
assertEquals(BC_OBJECT, bytes[3 + k1Bytes.length + k2Bytes.length])
assertEquals(BC_OBJECT_END, bytes[5 + k1Bytes.length + k2Bytes.length + k3Bytes.length + refBytes.length])
assertEquals(BC_OBJECT_END, bytes[6 + k1Bytes.length + k2Bytes.length + k3Bytes.length + refBytes.length])
assertSame(parsed.get("value0"), ((Map) parsed.get("value1")).get("ref"))
assertEquals(1, bytes.length)
assertEquals(BC_NULL, bytes[0])
assertEquals(11, bytes.length)
assertEquals(BC_TIMESTAMP, bytes[0])
assertEquals(bytes.length, 1 + secondBytes.length + nanoBytes.length)
assertEquals(instant, parsed)
assertEquals(5, bytes.length)
assertEquals(BC_TIMESTAMP_SECONDS, bytes[0])
assertEquals(millis, parsed.getTime())
assertEquals(5, bytes.length)
assertEquals(BC_TIMESTAMP_MINUTES, bytes[0])
assertEquals(millis, parsed.getTime())
assertEquals(9, bytes.length)
assertEquals(BC_TIMESTAMP_MILLIS, bytes[0])
assertEquals(millis, parsed.getTime())
assertEquals(15, bytes.length)
assertEquals(BC_TIMESTAMP_WITH_TIMEZONE, bytes[0])
assertEquals(ldt.getYear(), year)
assertEquals(ldt.getMonthValue(), month)
assertEquals(ldt.getDayOfMonth(), dayOfMonth)
assertEquals(ldt.getHour(), hour)
assertEquals(ldt.getMinute(), minute)
assertEquals(ldt.getSecond(), second)
assertEquals(bytes.length, 8 + nanoBytes.length + zoneIdBytes.length)
assertEquals(zdt, parsed)
assertEquals(5, bytes.length)
assertEquals(BC_LOCAL_DATE, bytes[0])
assertEquals(localDate.getYear(), year)
assertEquals(localDate.getMonthValue(), month)
assertEquals(localDate.getDayOfMonth(), dayOfMonth)
assertEquals(localDate, parsed)
assertEquals(13, bytes.length)
assertEquals(BC_LOCAL_DATETIME, bytes[0])
assertEquals(ldt.getYear(), year)
assertEquals(ldt.getMonthValue(), month)
assertEquals(ldt.getDayOfMonth(), dayOfMonth)
assertEquals(ldt.getHour(), hour)
assertEquals(ldt.getMinute(), minute)
assertEquals(ldt.getSecond(), second)
assertEquals(bytes.length, 8 + nanoBytes.length)
assertEquals(ldt, parsed)
assertEquals(9, bytes.length)
assertEquals(BC_LOCAL_DATETIME, bytes[0])
assertEquals(ldt.getYear(), year)
assertEquals(ldt.getMonthValue(), month)
assertEquals(ldt.getDayOfMonth(), dayOfMonth)
assertEquals(ldt.getHour(), hour)
assertEquals(ldt.getMinute(), minute)
assertEquals(ldt.getSecond(), second)
assertEquals(bytes.length, 8 + nanoBytes.length)
assertEquals(ldt, parsed)
assertEquals(9, bytes.length)
assertEquals(BC_LOCAL_TIME, bytes[0])
assertEquals(localTime.getHour(), hour)
assertEquals(localTime.getMinute(), minute)
assertEquals(localTime.getSecond(), second)
assertEquals(bytes.length, 4 + nanoBytes.length)
assertEquals(localTime, parsed)
assertEquals(5, bytes.length)
assertEquals(BC_LOCAL_TIME, bytes[0])
assertEquals(localTime.getHour(), hour)
assertEquals(localTime.getMinute(), minute)
assertEquals(localTime.getSecond(), second)
assertEquals(bytes.length, 4 + nanoBytes.length)
assertEquals(localTime, parsed)
assertEquals(1, bytes.length)
assertEquals(BC_TRUE, bytes[0])
assertTrue(parsed.booleanValue())
assertEquals(1, bytes.length)
assertEquals(BC_FALSE, bytes[0])
assertEquals(bitSet1, bitSet2)
assertEquals(bitSet1, bitSet2)
assertEquals("{\n" + "\t\"@type\":\"com.alibaba.fastjson2_vo.Int1\"\n" + "}", JSONB.toJSONString(jsonbBytes))
assertEquals("{}", JSONB.toJSONString(jsonbBytes))
assertEquals("INT32 0", typeName((byte) 0))
assertEquals("INT32 1", typeName((byte) 1))
assertEquals("INT32 2", typeName((byte) 2))
assertEquals("INT32 3", typeName((byte) 3))
assertEquals("INT32 4", typeName((byte) 4))
assertEquals("INT32 5", typeName((byte) 5))
assertEquals("INT32 6", typeName((byte) 6))
assertEquals("INT32 7", typeName((byte) 7))
assertEquals("INT32 8", typeName((byte) 8))
assertEquals("INT32 9", typeName((byte) 9))
assertEquals("INT32 10", typeName((byte) 10))
assertEquals("STR_ASCII " + BC_STR_ASCII, typeName(BC_STR_ASCII))
assertEquals("STR_UTF8 " + BC_STR_UTF8, typeName(BC_STR_UTF8))
assertEquals("STR_UTF16 " + BC_STR_UTF16, typeName(BC_STR_UTF16))
assertEquals("STR_UTF16LE " + BC_STR_UTF16LE, typeName(BC_STR_UTF16LE))
assertEquals("STR_UTF16BE " + BC_STR_UTF16BE, typeName(BC_STR_UTF16BE))
assertEquals("BINARY " + BC_BINARY, typeName(BC_BINARY))
assertEquals("NULL " + BC_NULL, typeName(BC_NULL))
assertEquals("TRUE " + BC_TRUE, typeName(BC_TRUE))
assertEquals("FALSE " + BC_FALSE, typeName(BC_FALSE))
assertEquals("INT32 " + BC_INT32_BYTE_MIN, typeName(BC_INT32_BYTE_MIN))
assertEquals("INT32 " + BC_INT32_BYTE_MAX, typeName(BC_INT32_BYTE_MAX))
assertEquals("INT32 " + BC_INT32_SHORT_MIN, typeName(BC_INT32_SHORT_MIN))
assertEquals("INT32 " + BC_INT32_SHORT_MAX, typeName(BC_INT32_SHORT_MAX))
assertEquals("INT32 " + BC_INT32, typeName(BC_INT32))
assertEquals("INT64 " + BC_INT64, typeName(BC_INT64))
assertEquals("INT64 " + BC_INT64_NUM_MIN, typeName(BC_INT64_NUM_MIN))
assertEquals("INT64 " + BC_INT64_NUM_MAX, typeName(BC_INT64_NUM_MAX))
assertEquals("INT64 " + BC_INT64_BYTE_MIN, typeName(BC_INT64_BYTE_MIN))
assertEquals("INT64 " + BC_INT64_BYTE_MAX, typeName(BC_INT64_BYTE_MAX))
assertEquals("INT64 " + BC_INT64_SHORT_MIN, typeName(BC_INT64_SHORT_MIN))
assertEquals("INT64 " + BC_INT64_SHORT_MAX, typeName(BC_INT64_SHORT_MAX))
assertEquals("INT64 " + BC_INT64_INT, typeName(BC_INT64_INT))
assertEquals("BIGINT " + BC_BIGINT, typeName(BC_BIGINT))
assertEquals("BIGINT " + BC_BIGINT_LONG, typeName(BC_BIGINT_LONG))
assertEquals("INT8 " + BC_INT8, typeName(BC_INT8))
assertEquals("INT16 " + BC_INT16, typeName(BC_INT16))
assertEquals("FLOAT " + BC_FLOAT, typeName(BC_FLOAT))
assertEquals("FLOAT " + BC_FLOAT_INT, typeName(BC_FLOAT_INT))
assertEquals("DOUBLE " + BC_DOUBLE, typeName(BC_DOUBLE))
assertEquals("DOUBLE " + BC_DOUBLE_LONG, typeName(BC_DOUBLE_LONG))
assertEquals("DOUBLE " + BC_DOUBLE_NUM_0, typeName(BC_DOUBLE_NUM_0))
assertEquals("DOUBLE " + BC_DOUBLE_NUM_1, typeName(BC_DOUBLE_NUM_1))
assertEquals("DECIMAL " + BC_DECIMAL, typeName(BC_DECIMAL))
assertEquals("DECIMAL " + BC_DECIMAL_LONG, typeName(BC_DECIMAL_LONG))
assertEquals("LOCAL_TIME " + BC_LOCAL_TIME, typeName(BC_LOCAL_TIME))
assertEquals("LOCAL_DATETIME " + BC_LOCAL_DATETIME, typeName(BC_LOCAL_DATETIME))
assertEquals("TIMESTAMP " + BC_TIMESTAMP, typeName(BC_TIMESTAMP))
assertEquals("TIMESTAMP_MINUTES " + BC_TIMESTAMP_MINUTES, typeName(BC_TIMESTAMP_MINUTES))
assertEquals("TIMESTAMP_SECONDS " + BC_TIMESTAMP_SECONDS, typeName(BC_TIMESTAMP_SECONDS))
assertEquals("TIMESTAMP_MILLIS " + BC_TIMESTAMP_MILLIS, typeName(BC_TIMESTAMP_MILLIS))
assertEquals("TIMESTAMP_WITH_TIMEZONE " + BC_TIMESTAMP_WITH_TIMEZONE, typeName(BC_TIMESTAMP_WITH_TIMEZONE))
assertEquals("LOCAL_DATE " + BC_LOCAL_DATE, typeName(BC_LOCAL_DATE))
assertEquals("TYPED_ANY " + BC_TYPED_ANY, typeName(BC_TYPED_ANY))
assertEquals("ARRAY " + BC_ARRAY, typeName(BC_ARRAY))
assertEquals("ARRAY " + BC_ARRAY_FIX_MIN, typeName(BC_ARRAY_FIX_MIN))
assertEquals("REFERENCE " + BC_REFERENCE, typeName(BC_REFERENCE))
assertEquals("OBJECT " + BC_OBJECT, typeName(BC_OBJECT))
assertEquals("OBJECT_END " + BC_OBJECT_END, typeName(BC_OBJECT_END))
assertEquals("SYMBOL " + BC_SYMBOL, typeName(BC_SYMBOL))
assertEquals("-128", typeName((byte) -128))
assertNotNull(a)
assertEquals(value, JSONB.parse(bytes, JSONReader.Feature.SupportAutoType))
assertEquals(value, JSONB.parseObject(bytes, Object.class, JSONReader.Feature.SupportAutoType))
assertEquals(bean.value, ((Bean) JSONB.parse(bytes, JSONReader.Feature.SupportAutoType)).value)
assertEquals(bean.value, ((Bean) JSONB.parseObject(bytes, Object.class, JSONReader.Feature.SupportAutoType)).value)
assertEquals(bean.value, ((Bean2) JSONB.parse(bytes, JSONReader.Feature.SupportAutoType)).value)
assertEquals(bean.value, ((Bean2) JSONB.parseObject(bytes, Object.class, JSONReader.Feature.SupportAutoType)).value)
assertEquals(bean.value, JSONB.parseObject(bytes, Bean3.class, JSONReader.Feature.SupportAutoType).value)
assertEquals(bean.value, JSONB.parseObject(bytes, Bean4.class, JSONReader.Feature.SupportAutoType).value)
assertTrue(target.getAtomicBoolean() == null || !target.getAtomicBoolean().get())
assertNotNull(target2.getAtomicBoolean())
assertNull(jsonWriter.symbolTable)
assertEquals(size, bytes.length)
assertEquals(bean.id, bean1.id)
assertEquals(bean.id, bean1.id)
assertEquals("{\"id\":100}", JSON.toJSONString(userActivity))
assertEquals(0, JSONArray.from(new Integer[] { 0, 1, 2, 3, 4, 5 }).get(0))
assertEquals(0, JSONArray.from(nums).get(0))
assertEquals("abc", jsonPath.eval("ABC"))
assertEquals("1", jsonPath.eval(1))
assertNull(jsonPath.eval(null))
assertEquals("ABC", jsonPath.eval("ABC"))
assertEquals("1", jsonPath.eval(1))
assertNull(jsonPath.eval(null))
assertEquals("ABC", jsonPath.eval(" ABC "))
assertEquals("1", jsonPath.eval(1))
assertNull(jsonPath.eval(null))
assertNull(JSONPath.of("$.value", BigDecimal.class).extract("{}"))
assertNull(JSONPath.of("$.value", Integer.class).extract("{}"))
assertNull(JSONPath.of("$.value", Long.class).extract("{}"))
assertNull(JSONPath.of("$.value", String.class).extract("{}"))
assertNull(JSONPath.of("$.value", Float.class).extract("{}"))
assertNull(JSONPath.of("$.value", Double.class).extract("{}"))
assertNull(JSONPath.of("$.value", Boolean.class).extract("{}"))
assertNull(JSONPath.of("$.value", Short.class).extract("{}"))
assertNull(JSONPath.of("$.value", Byte.class).extract("{}"))
assertNull(JSONPath.of("$.value", UUID.class).extract("{}"))
assertEquals(4, path.eval(JSONArray.of(1, 2, 3, 4)))
assertEquals(4, path.eval(new Integer[] { 1, 2, 3, 4 }))
assertNull(path.eval(null))
assertEquals(4, path.extract("[1,2,3,4]"))
assertEquals(4, path.eval(Collections.singleton(4)))
assertEquals(1, path.extract("[1,2,3,4]"))
assertNull(path.extract("null"))
assertEquals(2, path.extract("[1,2,3,4]"))
assertNull(path.eval(null))
assertEquals(0, value.size())
assertEquals(1001, value.getId())
assertEquals(123, JSONObject.of("bean", JSONObject.of("id", 123)).getObject("bean", Bean::new).id)
assertEquals(123, JSONArray.of(JSONObject.of("id", 123)).getObject(0, Bean::new).id)
assertEquals(12.34D, object.to(Bean1.class).value)
assertEquals(12.34D, object.getObject("value", Double.class))
assertEquals(12.34D, TypeUtils.cast(new BigDecimal("12.34"), Double.class))
assertEquals("a", to.websiteList[0])
assertEquals("b", to.websiteList[1])
assertEquals("{\"websiteList\":[\"a\",\"b\"]}", object.to(String.class))
assertEquals("{\"websiteList\":[\"a\",\"b\"]}", object.to((Type) String.class))
assertEquals("[]", JSONArray.of().to(String.class))
assertEquals("[]", JSONArray.of().to((Type) String.class))
assertEquals("{}", JSONObject.toJSONString(JSONObject.of()))
assertEquals(0, JSONObject.of().size())
assertEquals(1, JSONObject.of("k0", 0).size())
assertEquals(2, JSONObject.of("k0", 0, "k1", 1).size())
assertEquals(3, JSONObject.of("k0", 0, "k1", 1, "k2", 2).size())
assertEquals(4, JSONObject.of("k0", 0, "k1", 1, "k2", 2, "k3", 3).size())
assertEquals(5, JSONObject.of("k0", 0, "k1", 1, "k2", 2, "k3", 3, "k4", 4).size())
assertEquals(5, jsonObject.size())
assertTrue(jsonObject.getBooleanValue("v0", false))
assertTrue(jsonObject.getBooleanValue("v1", false))
assertTrue(jsonObject.getBooleanValue("v1", true))
assertTrue(jsonObject.getBooleanValue("v2", false))
assertTrue(jsonObject.getBooleanValue("v2", true))
assertTrue(jsonObject.getBooleanValue("v4", false))
assertTrue(jsonObject.getBooleanValue("v4", true))
assertTrue(jsonObject.getBooleanValue("v100", true))
assertEquals(1, jsonObject.getIntValue("v0", 2))
assertEquals(999, jsonObject.getIntValue("v1", 999))
assertEquals(1, jsonObject.getIntValue("v2", 999))
assertEquals(999, jsonObject.getIntValue("v100", 999))
assertEquals(object, object2)
assertEquals(object, object3)
assertEquals(object, object2)
assertEquals(object, object3)
assertEquals(expected, path.extract(JSONReader.of(str2)).toString())
assertEquals(expected, path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString())
assertEquals(expected, path.eval(JSON.parseObject(str2)).toString())
assertEquals(expected, path.extract(JSONReader.of(str2)).toString())
assertEquals(expected, path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString())
assertEquals(expected, path.eval(JSON.parseObject(str2)).toString())
assertEquals(expected, path.extract(JSONReader.of(str2)).toString())
assertEquals(expected, path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString())
assertEquals(expected, path.eval(JSON.parseObject(str2)).toString())
assertEquals(expected, path.extract(JSONReader.of(str2)).toString())
assertEquals(expected, path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString())
assertEquals(expected, path.eval(JSON.parseObject(str2)).toString())
assertEquals(expected, path.extract(JSONReader.of(str2)).toString())
assertEquals(expected, path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString())
assertEquals(expected, path.eval(JSON.parseObject(str2)).toString())
assertEquals(expected, path.extract(JSONReader.of(str2)).toString())
assertEquals(expected, path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString())
assertEquals(expected, path.eval(JSON.parseObject(str2)).toString())
assertEquals(expected, path.extract(JSONReader.of(str2)).toString())
assertEquals(expected, path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString())
assertEquals(expected, path.eval(JSON.parseObject(str2)).toString())
assertEquals(expected, path.extract(JSONReader.of(str2)).toString())
assertEquals(expected, path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString())
assertEquals(expected, path.eval(JSON.parseObject(str2)).toString())
assertEquals(expected, path.extract(JSONReader.of(str2)).toString())
assertEquals(expected, path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString())
assertEquals(expected, path.eval(JSON.parseObject(str2)).toString())
assertEquals(expected, path.extract(JSONReader.of(str2)).toString())
assertEquals(expected, path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString())
assertEquals(expected, path.eval(JSON.parseObject(str2)).toString())
assertEquals(expected, path.extract(JSONReader.of(str2)).toString())
assertEquals(expected, path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString())
assertEquals(expected, path.eval(JSON.parseObject(str2)).toString())
assertEquals(expected, path.extract(JSONReader.of(str2)).toString())
assertEquals(expected, path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString())
assertEquals(expected, path.eval(JSON.parseObject(str2)).toString())
assertEquals(expected, path.extract(JSONReader.of(str2)).toString())
assertEquals(expected, path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString())
assertEquals(expected, path.eval(JSON.parseObject(str2)).toString())
assertEquals(expected, path.extract(JSONReader.of(str2)).toString())
assertEquals(expected, path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString())
assertEquals(expected, path.eval(JSON.parseObject(str2)).toString())
assertEquals(expected, path.extract(JSONReader.of(str2)).toString())
assertEquals(expected, path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString())
assertEquals(expected, path.eval(JSON.parseObject(str2)).toString())
assertEquals(expected, path.extract(JSONReader.of(str2)).toString())
assertEquals(expected, path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString())
assertEquals(expected, path.eval(JSON.parseObject(str2)).toString())
assertEquals(expected, path.extract(JSONReader.of(str2)).toString())
assertEquals(expected, path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString())
assertEquals(expected, path.eval(JSON.parseObject(str2)).toString())
assertEquals(expected, path.extract(JSONReader.of(str2)).toString())
assertEquals(expected, path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString())
assertEquals(expected, path.eval(JSON.parseObject(str2)).toString())
assertEquals(expected, path.extract(JSONReader.of(str2)).toString())
assertEquals(expected, path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString())
assertEquals(expected, path.eval(JSON.parseObject(str2)).toString())
assertEquals(object, object2)
assertEquals(object, object3)
assertEquals("[\"iPhone\"]", JSONPath.of("$.phoneNumbers[:1].type").extract(JSONReader.of(str3)).toString())
assertEquals("[\"iPhone\"]", JSONPath.of("$.phoneNumbers[:1].type").extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str3.getBytes(StandardCharsets.UTF_8)))).toString())
assertEquals("[\"iPhone\"]", path.extract(JSONReader.of(str3)).toString())
assertEquals("[\"iPhone\"]", path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str3.getBytes(StandardCharsets.UTF_8)))).toString())
assertEquals("[\"iPhone\"]", path.eval(JSON.parseObject(str3)).toString())
assertEquals("[\"iPhone\",\"home\"]", path.extract(JSONReader.of(str3)).toString())
assertEquals("[\"iPhone\",\"home\"]", path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str3.getBytes(StandardCharsets.UTF_8)))).toString())
assertEquals("[\"iPhone\",\"home\"]", path.eval(JSON.parseObject(str3)).toString())
assertEquals("[\"iPhone\",\"home\"]", path.extract(JSONReader.of(str3)).toString())
assertEquals("[\"iPhone\",\"home\"]", path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str3.getBytes(StandardCharsets.UTF_8)))).toString())
assertEquals("[\"iPhone\",\"home\"]", path.eval(JSON.parseObject(str3)).toString())
assertEquals("[\"iPhone\",\"home\"]", JSONPath.of("$.phoneNumbers[*].type").extract(JSONReader.of(str3)).toString())
assertEquals("[\"iPhone\",\"home\"]", JSONPath.of("$.phoneNumbers[*].type").extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str3.getBytes(StandardCharsets.UTF_8)))).toString())
assertEquals("[\"iPhone\",\"0123-4567-8888\"]", path.extract(JSONReader.of(str3)).toString())
assertEquals("[\"iPhone\",\"0123-4567-8888\"]", path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str3.getBytes(StandardCharsets.UTF_8)))).toString())
assertEquals("[\"iPhone\",\"0123-4567-8888\"]", path.eval(JSON.parseObject(str3)).toString())
assertEquals("[\"home\"]", path.extract(JSONReader.of(str3)).toString())
assertEquals("[\"home\"]", path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str3.getBytes(StandardCharsets.UTF_8)))).toString())
assertEquals("[\"home\"]", path.eval(JSON.parseObject(str3)).toString())
assertEquals(expected, path.extract(JSONReader.of(str3)).toString())
assertEquals(expected, path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str3.getBytes(StandardCharsets.UTF_8)))).toString())
assertEquals(expected, path.eval(JSON.parseObject(str3)).toString())
assertEquals(expected, JSON.toJSONString(path.extract(JSONReader.of(str3))))
assertEquals(expected, JSON.toJSONString(path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str3.getBytes(StandardCharsets.UTF_8))))))
assertEquals(expected, JSON.toJSONString(path.eval(JSON.parseObject(str3))))
assertEquals(expected, path.extract(JSONReader.of(str3)).toString())
assertEquals(expected, path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str3.getBytes(StandardCharsets.UTF_8)))).toString())
assertEquals(expected, path.eval(JSON.parseObject(str3)).toString())
assertEquals("$[0].id", path.toString())
assertEquals(Long.valueOf(123), path.extractInt64(JSONReader.of("[{\"id\":123}]")))
assertEquals(123, path.extractInt64Value(JSONReader.of("[{\"id\":123}]")))
assertEquals(Integer.valueOf(123), path.extractInt32(JSONReader.of("[{\"id\":123}]")))
assertEquals(123, path.extractInt32Value(JSONReader.of("[{\"id\":123}]")))
assertEquals("123", path.extractScalar(JSONReader.of("[{\"id\":123}]")))
assertEquals(0, path.extractInt32Value(JSONReader.of(json)))
assertEquals(0, path.extractInt64Value(JSONReader.of(json)))
assertNull(path.extractInt32(JSONReader.of(json)))
assertNull(path.extractInt64(JSONReader.of(json)))
assertNull(path.extract(JSONReader.of(json)))
assertEquals(1, path.extractInt32Value(JSONReader.of(json)))
assertEquals(1, path.extractInt64Value(JSONReader.of(json)))
assertEquals(Integer.valueOf(1), path.extractInt32(JSONReader.of(json)))
assertEquals(Long.valueOf(1), path.extractInt64(JSONReader.of(json)))
assertEquals(0, path.extractInt32Value(JSONReader.of(json)))
assertEquals(0, path.extractInt64Value(JSONReader.of(json)))
assertEquals(Integer.valueOf(0), path.extractInt32(JSONReader.of(json)))
assertEquals(Long.valueOf(0), path.extractInt64(JSONReader.of(json)))
assertEquals(1, path.extractInt32Value(JSONReader.of(json)))
assertEquals(1, path.extractInt64Value(JSONReader.of(json)))
assertEquals(Integer.valueOf(1), path.extractInt32(JSONReader.of(json)))
assertEquals(Long.valueOf(1), path.extractInt64(JSONReader.of(json)))
assertEquals(1, path.extractInt32Value(JSONReader.of(json)))
assertEquals(1, path.extractInt64Value(JSONReader.of(json)))
assertEquals(Integer.valueOf(1), path.extractInt32(JSONReader.of(json)))
assertEquals(Long.valueOf(1), path.extractInt64(JSONReader.of(json)))
assertEquals(1, path.extractInt32Value(JSONReader.of(utf8)))
assertEquals(1, path.extractInt64Value(JSONReader.of(utf8)))
assertEquals(Integer.valueOf(1), path.extractInt32(JSONReader.of(utf8)))
assertEquals(Long.valueOf(1), path.extractInt64(JSONReader.of(utf8)))
assertEquals(object, parsed)
assertEquals(object, parsed)
assertEquals("$.id", path.toString())
assertEquals(Long.valueOf(123), path.extractInt64(JSONReader.of("{\"id\":123}")))
assertEquals(123, path.extractInt64Value(JSONReader.of("{\"id\":123}")))
assertEquals(Integer.valueOf(123), path.extractInt32(JSONReader.of("{\"id\":123}")))
assertEquals(123, path.extractInt32Value(JSONReader.of("{\"id\":123}")))
assertEquals("123", path.extractScalar(JSONReader.of("{\"id\":123}")))
assertEquals(0, path.extractInt32Value(JSONReader.of(json)))
assertEquals(0, path.extractInt64Value(JSONReader.of(json)))
assertNull(path.extractInt32(JSONReader.of(json)))
assertNull(path.extractInt64(JSONReader.of(json)))
assertNull(path.extract(JSONReader.of(json)))
assertEquals("null", path.extractScalar(JSONReader.of(json)))
assertEquals(1, path.extractInt32Value(JSONReader.of(json)))
assertEquals(1, path.extractInt64Value(JSONReader.of(json)))
assertEquals(Integer.valueOf(1), path.extractInt32(JSONReader.of(json)))
assertEquals(Long.valueOf(1), path.extractInt64(JSONReader.of(json)))
assertEquals(Boolean.TRUE, path.extract(JSONReader.of(json)))
assertEquals("true", path.extractScalar(JSONReader.of(json)))
assertEquals(0, path.extractInt32Value(JSONReader.of(json)))
assertEquals(0, path.extractInt64Value(JSONReader.of(json)))
assertEquals(Integer.valueOf(0), path.extractInt32(JSONReader.of(json)))
assertEquals(Long.valueOf(0), path.extractInt64(JSONReader.of(json)))
assertEquals(Boolean.FALSE, path.extract(JSONReader.of(json)))
assertEquals("false", path.extractScalar(JSONReader.of(json)))
assertEquals("\"abc\"", path.extractScalar(JSONReader.of(json)))
assertEquals("{}", path.extractScalar(JSONReader.of(json)))
assertEquals("[]", path.extractScalar(JSONReader.of(json)))
assertEquals(2, eval.size())
assertEquals(Boolean.TRUE, JSONPath.of("$[4]").extract(JSONReader.of(json)))
assertEquals(Boolean.FALSE, JSONPath.of("$[3]").extract(JSONReader.of(json)))
assertEquals(null, JSONPath.of("$[2]").extract(JSONReader.of(json)))
assertEquals("0", JSONPath.of("$[0]").extract(JSONReader.of(json)))
assertEquals(Integer.valueOf(1), JSONPath.of("$[1]").extract(JSONReader.of(json)))
assertEquals("[]", JSON.toJSONString(JSONPath.of("$[5]").extract(JSONReader.of(json))))
assertEquals("{}", JSON.toJSONString(JSONPath.of("$[6]").extract(JSONReader.of(json))))
assertEquals("[0,\"1\",true,false,null]", JSON.toJSONString(JSONPath.of("$.*").extract(JSONReader.of(json))))
assertEquals("[0]", JSON.toJSONString(JSONPath.of("$..v0").extract(JSONReader.of(json))))
assertEquals("[\"1\"]", JSON.toJSONString(JSONPath.of("$..v1").extract(JSONReader.of(json))))
assertEquals("[true]", JSON.toJSONString(JSONPath.of("$..v2").extract(JSONReader.of(json))))
assertEquals("[false]", JSON.toJSONString(JSONPath.of("$..v3").extract(JSONReader.of(json))))
assertEquals("[null]", JSON.toJSONString(JSONPath.of("$..v4").extract(JSONReader.of(json))))
assertEquals(true, paths.get("$.f0"))
assertEquals(Boolean.TRUE, JSONPath.paths(Boolean.TRUE).get("$"))
assertEquals(BigDecimal.ONE, JSONPath.paths(BigDecimal.ONE).get("$"))
assertEquals(16, paths.size())
assertEquals("{\"v0\":0,\"v1\":0.0,\"v10\":[],\"v2\":0.0,\"v3\":\"A\",\"v4\":0,\"v5\":0,\"v6\":false,\"v7\":[101],\"v8\":[],\"v9\":{}}", str)
assertEquals("{\"id\":101}", json)
assertEquals(a.id, a1.id)
assertEquals("{\"id\":101}", json)
assertEquals(a.id, a1.id)
assertEquals("{\"id\":101}", JSONB.parseObject(jsonbBytes).toString())
assertEquals(a.id, a1.id)
assertEquals("{\"id\":101}", str)
assertEquals(a.id, a1.id)
assertEquals("{\"id\":101}", str)
assertEquals(bean.id, bean1.id)
assertEquals(bean.id, bean1.id)
assertEquals(bean.id, bean1.id)
assertEquals(bean.id, bean1.id)
assertEquals(bean.id, bean1.id)
assertEquals(101, JSONObject.of("id", 101).toJavaObject(Bean2.class, JSONReader.Feature.FieldBased).id)
assertEquals(101, JSONObject.of("root", JSONObject.of("id", 101)).getObject("root", Bean2.class, JSONReader.Feature.FieldBased).id)
assertEquals(101, ((Bean2) JSONObject.of("root", JSONObject.of("id", 101)).getObject("root", (Type) Bean2.class, JSONReader.Feature.FieldBased)).id)
assertEquals(101, ((Bean2) JSONArray.of(JSONObject.of("id", 101)).getObject(0, Bean2.class, JSONReader.Feature.FieldBased)).id)
assertEquals(101, ((Bean2) JSONArray.of(JSONObject.of("id", 101)).getObject(0, (Type) Bean2.class, JSONReader.Feature.FieldBased)).id)
assertEquals(101, ((Bean2) JSONObject.of("id", 101).toJavaObject((Type) Bean2.class, JSONReader.Feature.FieldBased)).id)
assertEquals(101, JSONArray.of(JSONObject.of("id", 101)).toJavaList(Bean2.class, JSONReader.Feature.FieldBased).get(0).id)
assertEquals("{\"UserId\":102,\"userId\":101}", str)
assertNotNull(bean1)
assertEquals(bean.userId, bean1.userId)
assertEquals(bean.UserId, bean1.UserId)
assertEquals("[102,101]", str)
assertNotNull(bean1)
assertEquals(bean.userId, bean1.userId)
assertEquals(bean.UserId, bean1.UserId)
assertNotNull(bean1)
assertEquals(bean.userId, bean1.userId)
assertEquals(bean.UserId, bean1.UserId)
assertNotNull(bean1)
assertEquals(bean.userId, bean1.userId)
assertEquals(bean.UserId, bean1.UserId)
assertNotNull(bean1)
assertEquals(bean.userId, bean1.userId)
assertEquals(bean.UserId, bean1.UserId)
assertEquals("[100]", jsonWriter.toString())
assertEquals("[100]", jsonWriter.toString())
assertEquals("[100]", jsonWriter.toString())
assertEquals("{\n" + "\t\"v0000\":100\n" + "}", jw.toString())
assertEquals("{\n" + "\t\"v0000\":100\n" + "}", jw.toString())
assertEquals("{\n" + "\t\"v0000\":100.0\n" + "}", jw.toString())
assertEquals("{\n" + "\t\"v0000\":100.0\n" + "}", jw.toString())
assertEquals("{\n" + "\t\"id\":100\n" + "}", jw.toString())
assertEquals("{\n" + "\t\"id\":100\n" + "}", jw.toString())
assertEquals("{\n" + "\t\"id\":\"" + v.getId().toString() + "\"\n" + "}", jw.toString())
assertEquals("{\n" + "\t\"v0000\":100\n" + "}", jw.toString())
assertEquals("{\n" + "\t\"v0000\":1234567890\n" + "}", jw.toString())
assertEquals("{\n" + "\t\"v0000\":1234567890\n" + "}", jw.toString())
assertEquals("{\n" + "\t\"v0000\":1000\n" + "}", jw.toString())
assertEquals("{\n" + "\t\n" + "}", jw.toString())
assertEquals("{\n" + "\t\"id\":1001,\n" + "\t\"name\":\"DataWorks\",\n" + "\t\"array\":[\n" + "\t\t\n" + "\t],\n" + "\t\"object\":{\n" + "\t\t\n" + "\t}\n" + "}", jw.toString())
assertEquals("[\n\t\n]", jw.toString())
assertEquals("[\n" + "\t1001\n" + "]", jw.toString())
assertEquals("[\n" + "\t1001,\n" + "\t1002\n" + "]", jw.toString())
assertEquals("{\"id\":101,\"name\":\"DataWorks\"}", JSON.toJSONString(bean))
assertEquals("{}", JSON.toJSONString(bean))
assertEquals("{}", JSON.toJSONString(bean))
assertNull(provider.register(Bean.class, writer))
assertSame(writer, provider.register(Bean.class, writer))
assertSame(writer, provider.register(Bean.class, writer1))
assertSame(writer1, provider.register(Bean.class, writer1))
assertTrue(provider.unregister(Bean.class, writer1))
assertNull(provider.register(Bean.class, writer))
assertTrue(provider.unregister(Bean.class, writer))
assertNull(provider.registerIfAbsent(Bean.class, writer))
assertSame(writer, provider.registerIfAbsent(Bean.class, writer))
assertSame(writer, provider.registerIfAbsent(Bean.class, writer1))
assertSame(writer, provider.registerIfAbsent(Bean.class, writer1))
assertNull(JSON.register(Bean.class, writer))
assertSame(writer, JSON.register(Bean.class, writer))
assertSame(writer, JSON.register(Bean.class, writer1))
assertSame(writer1, JSON.registerIfAbsent(Bean.class, writer1))
assertSame(writer1, JSON.registerIfAbsent(Bean.class, writer))
assertSame(writer1, JSON.registerIfAbsent(Bean.class, writer))
assertTrue(provider.register(modoule))
assertTrue(provider.register(modoule1))
assertTrue(provider.unregister(modoule))
assertTrue(provider.unregister(modoule1))
assertEquals(bean.id, bean1.id)
assertEquals(bean.id, bean1.id)
assertEquals(bean.id0, bean1.id0)
assertEquals(bean.id1, bean1.id1)
assertEquals(bean.id0, bean1.id0)
assertEquals(bean.id1, bean1.id1)
assertEquals(bean.id0, bean1.id0)
assertEquals(bean.id1, bean1.id1)
assertEquals(bean.id2, bean1.id2)
assertEquals(bean.id0, bean1.id0)
assertEquals(bean.id1, bean1.id1)
assertEquals(bean.id2, bean1.id2)
assertEquals(bean.id0, bean1.id0)
assertEquals(bean.id1, bean1.id1)
assertEquals(bean.id2, bean1.id2)
assertEquals(bean.id3, bean1.id3)
assertEquals(bean.id0, bean1.id0)
assertEquals(bean.id1, bean1.id1)
assertEquals(bean.id2, bean1.id2)
assertEquals(bean.id3, bean1.id3)
assertEquals(bean.id0, bean1.id0)
assertEquals(bean.id1, bean1.id1)
assertEquals(bean.id2, bean1.id2)
assertEquals(bean.id3, bean1.id3)
assertEquals(bean.id4, bean1.id4)
assertEquals(bean.id0, bean1.id0)
assertEquals(bean.id1, bean1.id1)
assertEquals(bean.id2, bean1.id2)
assertEquals(bean.id3, bean1.id3)
assertEquals(bean.id4, bean1.id4)
assertEquals(bean.id0, bean1.id0)
assertEquals(bean.id1, bean1.id1)
assertEquals(bean.id2, bean1.id2)
assertEquals(bean.id3, bean1.id3)
assertEquals(bean.id4, bean1.id4)
assertEquals(bean.id5, bean1.id5)
assertEquals(bean.id0, bean1.id0)
assertEquals(bean.id1, bean1.id1)
assertEquals(bean.id2, bean1.id2)
assertEquals(bean.id3, bean1.id3)
assertEquals(bean.id4, bean1.id4)
assertEquals(bean.id5, bean1.id5)
assertEquals(bean.id0, bean1.id0)
assertEquals(bean.id1, bean1.id1)
assertEquals(bean.id2, bean1.id2)
assertEquals(bean.id3, bean1.id3)
assertEquals(bean.id4, bean1.id4)
assertEquals(bean.id5, bean1.id5)
assertEquals(bean.id6, bean1.id6)
assertEquals(bean.id0, bean1.id0)
assertEquals(bean.id1, bean1.id1)
assertEquals(bean.id2, bean1.id2)
assertEquals(bean.id3, bean1.id3)
assertEquals(bean.id4, bean1.id4)
assertEquals(bean.id5, bean1.id5)
assertEquals(bean.id6, bean1.id6)
assertEquals(object, object1)
assertEquals(sample, sample1)
assertEquals((short) 0, new ToShort((short) 0).apply(null))
assertNull(new ToString().apply(null))
assertNull(new ToNumber(null).apply(null))
assertNull(new ToLong(null).apply(null))
assertNull(new ToInteger(null).apply(null))
assertNull(new ToFloat(null).apply(null))
assertNull(new ToDouble(null).apply(null))
assertNull(new ToByte(null).apply(null))
assertNull(new ToBigInteger().apply(null))
assertNull(new ToBigDecimal().apply(null))
assertNotNull(error)
assertTrue(error.getMessage().contains("offset 33"))
assertTrue(error.getMessage().contains("character {"))
assertTrue(error.getMessage().contains("line 3"))
assertTrue(error.getMessage().contains("column 19"))
assertNotNull(error)
assertTrue(error.getMessage().contains("offset 33"))
assertTrue(error.getMessage().contains("character {"))
assertTrue(error.getMessage().contains("line 3"))
assertTrue(error.getMessage().contains("column 19"))
assertNotNull(error)
assertTrue(error.getMessage().contains("offset 33"))
assertTrue(error.getMessage().contains("character {"))
assertTrue(error.getMessage().contains("line 3"))
assertTrue(error.getMessage().contains("column 19"))
assertEquals(JSONSchema.Type.Const, schema.getType())
assertTrue(schema.isValid((Object) null))
assertTrue(schema.validate((Object) null).isSuccess())
assertTrue(schema.validate((Object) Long.valueOf(123)).isSuccess())
assertTrue(schema.validate((Object) Float.valueOf(123)).isSuccess())
assertFalse(jsonPath.isPrevious())
assertFalse(jsonPath.contains(JSONObject.of()))
assertFalse(jsonPath.contains(object))
assertFalse(jsonPath.isRef())
assertFalse(parsed.booleanValue())
assertFalse(jsonObject.getBooleanValue("v3", false))
assertFalse(jsonObject.getBooleanValue("v3", true))
assertFalse(jsonObject.getBooleanValue("v100", false))
assertFalse(provider.unregister(Bean.class, writer))
assertFalse(provider.unregister(Bean.class, writer1))
assertFalse(provider.register(modoule))
assertFalse(provider.unregister(modoule1))
assertFalse(provider.register(modoule1))
assertFalse(provider.unregister(modoule))
assertFalse(provider.unregister(modoule1))
assertFalse(schema.validate((Object) Float.valueOf(123.123F)).isSuccess())
assertFalse(schema.validate((Object) "abc").isSuccess())
assertFalse(DateValidator.INSTANCE.isValid(null))
assertFalse(DateValidator.INSTANCE.isValid(""))
assertFalse(DateValidator.INSTANCE.isValid("2022-02-30"))
assertTrue(DateValidator.INSTANCE.isValid("2022-02-18"))
assertFalse(DateValidator.INSTANCE.isValid("2022-04-31"))
assertTrue(DateValidator.INSTANCE.isValid("2022-04-30"))
assertFalse(DateValidator.INSTANCE.isValid("2022"))
assertFalse(DateValidator.INSTANCE.isValid("https://github.com/alibaba/fastjson2/issues"))
assertTrue(schema.equals(schema))
assertFalse(schema.equals(null))
assertFalse(schema.equals(new Object()))
assertFalse(schema.validate(Long.valueOf(9)).isSuccess())
assertTrue(schema.validate(Long.valueOf(10)).isSuccess())
assertTrue(schema.validate((Long) null).isSuccess())
assertFalse(schema.validate(Integer.valueOf(9)).isSuccess())
assertTrue(schema.validate(Integer.valueOf(10)).isSuccess())
assertTrue(schema.validate((Integer) null).isSuccess())
assertFalse(schema.validate(Float.valueOf(9)).isSuccess())
assertTrue(schema.validate(Float.valueOf(10)).isSuccess())
assertTrue(schema.validate((Float) null).isSuccess())
assertFalse(schema.validate(Double.valueOf(9)).isSuccess())
assertTrue(schema.validate(Double.valueOf(10)).isSuccess())
assertTrue(schema.validate((Double) null).isSuccess())
assertFalse(IPAddressValidator.IPV4.isValid(null))
assertFalse(IPAddressValidator.IPV4.isValid(""))
assertTrue(IPAddressValidator.IPV4.isValid("192.168.1.1"))
assertFalse(IPAddressValidator.IPV4.isValid("::1"))
assertFalse(IPAddressValidator.IPV6.isValid("192.168.1.1"))
assertTrue(IPAddressValidator.IPV6.isValid("::1"))
assertFalse(IPAddressValidator.IPV6.isValid("1002:003B:456C:678D:890E:0012:234F:56G7"))
assertTrue(IPAddressValidator.IPV6.isValid("2408:84e4:404:f993:4ff1:48f5:2c71:a41"))
assertEquals(JSONSchema.Type.OneOf, schema.getType())
assertEquals(JSONSchema.Type.Enum, schema.getType())
assertTrue(schema.validate(BigDecimal.valueOf(12)).isSuccess())
assertTrue(schema.validate(2147483649L).isSuccess())
assertTrue(schema.validate(BigDecimal.valueOf(2147483649L)).isSuccess())
assertTrue(schema.validate(BigInteger.valueOf(2147483649L)).isSuccess())
assertTrue(schema.validate(12).isSuccess())
assertTrue(schema.validate(12L).isSuccess())
assertTrue(schema.validate(BigDecimal.valueOf(12)).isSuccess())
assertTrue(schema.validate(BigInteger.valueOf(12)).isSuccess())
assertTrue(schema.validate(new BigInteger("214748364921474836492147483649")).isSuccess())
assertTrue(schema.validate(new BigDecimal("214748364921474836492147483649")).isSuccess())
assertTrue(schema.validate(new BigDecimal("12.34")).isSuccess())
assertFalse(validator.isValid(null))
assertFalse(validator.isValid(""))
assertFalse(validator.isValid("A000-00-00 00:00:00"))
assertTrue(validator.isValid("2000-04-30 00:00:00"))
assertTrue(validator.isValid("2000-05-31 00:00:00"))
assertFalse(validator.isValid("2000-04-31 00:00:00"))
assertFalse(validator.isValid("2000-05-41 00:00:00"))
assertFalse(validator.isValid("2000-05-01 25:00:00"))
assertFalse(validator.isValid("2000-05-01 00:61:00"))
assertFalse(validator.isValid("2000-05-01 00:00:62"))
assertFalse(validator.isValid("2000-05-01 00:00:620"))
assertFalse(validator.isValid("2000-05-01 00:00:62.0"))
assertFalse(validator.isValid(null))
assertFalse(validator.isValid("a."))
assertFalse(validator.isValid("@b.c"))
assertFalse(validator.isValid("1@b.c"))
assertFalse(validator.isValid("a01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789@b.c"))
assertFalse(validator.isValid("a@192.168.0.1"))
assertTrue(validator.isValid("a@[192.168.0.1]"))
assertFalse(validator.isValid("a@[192.a.0.1]"))
assertFalse(validator.isValid("a@[192..0.1]"))
assertFalse(validator.isValid("a@[256.0.0.1]"))
assertFalse(validator.isValid("a@[192.01.0.1]"))
assertTrue(validator.isValid("a@[fe80::1]"))
assertFalse(validator.isValid("a@[fe80::1234567]"))
assertTrue(validator.isValid("a@[fe80::f490:7eff:fe22:7f8b]"))
assertTrue(validator.isValid("a@[fe80::f490:7eff:fe22:7f8b:7f8b]"))
assertTrue(validator.isValid("a@[fe80::f490:7eff:fe22:7f8b:7f8b:7f8b]"))
assertFalse(validator.isValid("a@[fe80::f490:7eff:fe22:7f8b:7f8b:7f8b:7f8b]"))
assertFalse(validator.isValid("a@[fe80::f490:7eff:fe22:7f8b:7f8b:7f8k]"))
assertEquals(JSONSchema.Type.AnyOf, schema.getType())
assertEquals(JSONSchema.Type.Const, schema.getType())
assertTrue(schema.isValid((Object) null))
assertTrue(schema.validate((Object) null).isSuccess())
assertFalse(validator.isValid(null))
assertFalse(validator.isValid(""))
assertTrue(validator.isValid("P2D"))
assertFalse(validator.isValid("1 days"))
Assertions.assertEquals(123, JSON.parseObject("{\"value\":123}", Bean.class).value)
assertEquals(123, JSON.parseObject("{\"value\":123}", Bean1.class).value)
assertEquals(123, JSON.parseObject("{\"value\":123}", Bean2.class).value)
assertEquals(123, JSON.parseObject("{\"value\":123}", Bean3.class).value)
assertEquals(123, JSON.parseObject("{\"value\":123}", Bean4.class).value.intValue())
assertEquals(123, JSON.parseObject("{\"value\":123}", Bean5.class).value.intValue())
assertEquals(123, JSON.parseObject("{\"value\":123}", Bean6.class).value.intValue())
assertEquals(123, JSON.parseObject("{\"value\":123}", Bean7.class).value.intValue())
assertEquals(123, JSON.parseObject("{\"value\":123}", Bean8.class).value.intValue())
assertEquals(123, JSON.parseObject("{\"value\":123}", Bean9.class).value.intValue())
assertEquals(123F, JSON.parseObject("{\"value\":123}", Bean10.class).value)
assertEquals(123F, JSON.parseObject("{\"value\":123}", Bean11.class).value)
assertEquals(123F, JSON.parseObject("{\"value\":123}", Bean12.class).value)
assertEquals(123D, JSON.parseObject("{\"value\":123}", Bean13.class).value)
assertEquals(123, JSON.parseObject("{\"value\":123}", Bean14.class).value.intValue())
assertEquals(123, JSON.parseObject("{\"value\":123}", Bean15.class).value.intValue())
assertEquals(schema.hashCode(), schema1.hashCode())
assertEquals(schema, schema1)
assertEquals("Product", schema.getTitle())
assertEquals("A product from Acme's catalog", schema.getDescription())
assertEquals(JSONSchema.Type.Object, schema.getType())
assertEquals(3, schema.getProperties().size())
assertEquals("The unique identifier for a product", propertyId.getDescription())
assertEquals(JSONSchema.Type.Integer, propertyId.getType())
assertEquals("Name of the product", propertyName.getDescription())
assertEquals(JSONSchema.Type.String, propertyName.getType())
assertNull(propertyPrice.getDescription())
assertEquals(JSONSchema.Type.Number, propertyPrice.getType())
assertEquals(3, required.size())
assertTrue(required.contains("id"))
assertTrue(required.contains("name"))
assertTrue(required.contains("price"))
assertTrue(schema.isValid(JSONObject.of("id", 1, "name", "", "price", 1)))
assertTrue(jsonSchema.isValid("aa"))
assertTrue(jsonSchema.isValid("aa"))
assertTrue(jsonSchema.isValid("abc@alibaba-inc.com"))
assertTrue(jsonSchema.isValid("xxx@hotmail.com"))
assertTrue(jsonSchema.isValid("2018-07-12"))
assertTrue(jsonSchema.isValid("1970-11-13"))
assertTrue(jsonSchema.isValid("2018-07-12 12:13:14"))
assertTrue(jsonSchema.isValid("1970-11-13 12:13:14"))
assertTrue(jsonSchema.isValid("12:13:14"))
assertTrue(jsonSchema.isValid("12:13:14"))
assertTrue(jsonSchema.isValid("a7f41390-39a9-4ca6-a13b-88cf07a41108"))
assertTrue(jsonSchema.isValid("A7F41390-39A9-4CA6-A13B-88CF07A41108"))
assertTrue(jsonSchema.isValid("a7f4139039a94ca6a13b88cf07a41108"))
assertTrue(jsonSchema.isValid("A7F4139039A94CA6A13B88CF07A41108"))
assertTrue(jsonSchema.isValid("http://github.com/alibaba/fastjson"))
assertTrue(jsonSchema.isValid("555-1212"))
assertTrue(jsonSchema.isValid("(888)555-1212"))
assertTrue(jsonSchema.isValid(1))
assertTrue(jsonSchema.isValid(Byte.MIN_VALUE))
assertTrue(jsonSchema.isValid(Short.MIN_VALUE))
assertTrue(jsonSchema.isValid(Integer.MIN_VALUE))
assertTrue(jsonSchema.isValid(Long.MIN_VALUE))
assertTrue(jsonSchema.isValid(BigInteger.ONE))
assertTrue(jsonSchema.isValid(10))
assertTrue(jsonSchema.isValid(11))
assertTrue(jsonSchema.isValid(11))
assertTrue(jsonSchema.isValid(11))
assertTrue(jsonSchema.isValid(9))
assertTrue(jsonSchema.isValid(10))
assertTrue(jsonSchema.isValid(9))
assertTrue(jsonSchema.isValid(9))
assertTrue(jsonSchema.isValid(0))
assertTrue(jsonSchema.validate(10).isSuccess())
assertTrue(jsonSchema.validate(99).isSuccess())
assertTrue(jsonSchema.validate(0).isSuccess())
assertTrue(jsonSchema.validate(10).isSuccess())
assertTrue(jsonSchema.isValid("a"))
assertTrue(jsonSchema.isValid((Object) null))
assertTrue(jsonSchema.isValid(1))
assertTrue(jsonSchema.isValid(1.1F))
assertTrue(jsonSchema.isValid(1.1D))
assertTrue(jsonSchema.isValid(Byte.MIN_VALUE))
assertTrue(jsonSchema.isValid(Short.MIN_VALUE))
assertTrue(jsonSchema.isValid(Integer.MIN_VALUE))
assertTrue(jsonSchema.isValid(Long.MIN_VALUE))
assertTrue(jsonSchema.isValid(BigInteger.ONE))
assertTrue(jsonSchema.isValid(10))
assertTrue(jsonSchema.isValid(11))
assertTrue(jsonSchema.isValid(11))
assertTrue(jsonSchema.isValid(11))
assertTrue(jsonSchema.isValid(9))
assertTrue(jsonSchema.isValid(10))
assertTrue(jsonSchema.isValid(9))
assertTrue(jsonSchema.isValid(9))
assertTrue(jsonSchema.isValid(0))
assertTrue(jsonSchema.isValid(10))
assertTrue(jsonSchema.isValid(99))
assertTrue(jsonSchema.isValid(0))
assertTrue(jsonSchema.isValid(10))
assertEquals(jsonSchema.hashCode(), jsonSchema1.hashCode())
assertEquals(jsonSchema, jsonSchema1)
assertEquals(jsonSchema.getType(), jsonSchema1.getType())
assertTrue(jsonSchema.isValid(true))
assertTrue(jsonSchema.isValid(false))
assertEquals(jsonSchema.hashCode(), jsonSchema1.hashCode())
assertEquals(jsonSchema, jsonSchema1)
assertEquals(jsonSchema.getType(), jsonSchema1.getType())
assertTrue(jsonSchema.isValid((Long) null))
assertEquals(jsonSchema.hashCode(), jsonSchema1.hashCode())
assertEquals(jsonSchema, jsonSchema1)
assertEquals(jsonSchema.getType(), jsonSchema1.getType())
assertTrue(jsonSchema.isValid((Integer) null))
assertTrue(jsonSchema.isValid(new Object[0]))
assertTrue(jsonSchema.isValid(1))
assertTrue(jsonSchema.isValid(new Object[0]))
assertTrue(jsonSchema.isValid(new Object[] { 0, 1, 2 }))
assertTrue(jsonSchema.isValid(new Object[] { 0, 1, 2, 3 }))
assertTrue(jsonSchema.isValid(JSON.parse("[1, 2, 3, 4, 5]")))
assertTrue(jsonSchema.isValid(JSON.parse("[3, \"different\", { \"types\" : \"of values\" }]")))
assertTrue(JSON.parseArray("[1, 2, 3, 4, 5]").isValid(jsonSchema))
assertTrue(jsonSchema.isValid(JSON.parse("[1, 2, 3, 4, 5]")))
assertTrue(jsonSchema.isValid(JSON.parse("[]")))
assertTrue(jsonSchema.isValid(JSON.parse("[1600, \"Pennsylvania\", \"Avenue\", \"NW\"]")))
assertTrue(jsonSchema.isValid(JSON.parse("[10, \"Downing\", \"Street\"]")))
assertTrue(jsonSchema.isValid(JSON.parse("[1600, \"Pennsylvania\", \"Avenue\", \"NW\", \"Washington\"]")))
assertTrue(jsonSchema.isValid(new Object[] { 10, "Downing", "Street" }))
assertTrue(jsonSchema.isValid(JSON.parse("[1600, \"Pennsylvania\", \"Avenue\", \"NW\"]")))
assertTrue(jsonSchema.isValid(JSON.parse("[10, \"Downing\", \"Street\"]")))
assertTrue(jsonSchema.isValid(new Object[] { 10, "Downing", "Street" }))
assertTrue(jsonSchema.isValid(JSON.parse("[\"life\", \"universe\", \"everything\", 42]")))
assertTrue(jsonSchema.isValid(JSON.parse("[1, 2, 3, 4, 5]")))
assertTrue(jsonSchema.isValid(new Object[] { 10, "Downing", "Street" }))
assertTrue(jsonSchema.isValid(new Object[] { "Downing", "Street", 10 }))
assertTrue(jsonSchema.isValid(JSON.parse("[\"apple\", \"orange\", 2, 4]")))
assertTrue(jsonSchema.isValid(JSON.parse("[\"apple\", \"orange\", 2, 4, 8]")))
assertTrue(jsonSchema.isValid(new Object[] { "apple", "orange", 2, 4 }))
assertTrue(jsonSchema.isValid(new Object[] { "apple", "orange", 2, 4, 8 }))
assertTrue(jsonSchema.isValid(JSON.parse("[1, 2, 3, 4, 5]")))
assertTrue(jsonSchema.isValid(JSON.parse("[]")))
assertTrue(jsonSchema.isValid(new Object[] { 1, 2, 3, 4, 5 }))
assertTrue(jsonSchema.isValid(new Object[] {}))
assertTrue(jsonSchema.isValid(new int[] {}))
assertTrue(jsonSchema.isValid(new int[] { 1, 2, 3, 4, 5 }))
assertTrue(jsonSchema.isValid(JSONObject.of()))
assertTrue(jsonSchema.isValid(new Bean()))
assertTrue(jsonSchema.validate(JSONObject.of("id", 101)).isSuccess())
assertTrue(jsonSchema.validate(JSONObject.of("id", 101).toJavaObject(Bean1.class)).isSuccess())
assertTrue(JSON.parseObject("{ \"number\": 1600, \"street_name\": \"Pennsylvania\", \"street_type\": \"Avenue\" }").isValid(jsonSchema))
assertTrue(JSON.parseObject("{ \"number\": 1600, \"street_name\": \"Pennsylvania\" }").isValid(jsonSchema))
assertTrue(JSON.parseObject("{}").isValid(jsonSchema))
assertTrue(JSON.parseObject("{ \"number\": 1600, \"street_name\": \"Pennsylvania\", \"street_type\": \"Avenue\", \"direction\": \"NW\" }").isValid(jsonSchema))
assertTrue(JSON.parseObject("{}").isValid(jsonSchema))
assertTrue(JSON.parseObject("{ \"S_25\": \"This is a string\" }").isValid(jsonSchema))
assertTrue(JSON.parseObject("{ \"I_0\": 42 }").isValid(jsonSchema))
assertTrue(JSON.parseObject("{ \"keyword\": \"value\" }").isValid(jsonSchema))
assertTrue(JSON.parseObject("{ \"number\": 1600, \"street_name\": \"Pennsylvania\", \"street_type\": \"Avenue\" }").isValid(jsonSchema))
assertTrue(JSON.parseObject("{ \"number\": 1600, \"street_name\": \"Pennsylvania\", \"street_type\": \"Avenue\" }\n").isValid(jsonSchema))
assertTrue(JSON.parseObject("{ \"number\": 1600, \"street_name\": \"Pennsylvania\", \"street_type\": \"Avenue\", \"direction\": \"NW\" }").isValid(jsonSchema))
assertTrue(JSON.parseObject("{\n" + "  \"name\": \"William Shakespeare\",\n" + "  \"email\": \"bill@stratford-upon-avon.co.uk\"\n" + "}").isValid(jsonSchema))
assertTrue(JSON.parseObject("{\n" + "  \"name\": \"William Shakespeare\",\n" + "  \"email\": \"bill@stratford-upon-avon.co.uk\",\n" + "  \"address\": \"Henley Street, Stratford-upon-Avon, Warwickshire, England\",\n" + "  \"authorship\": \"in question\"\n" + "}").isValid(jsonSchema))
assertTrue(JSON.parseObject("{\n" + "  \"_a_proper_token_001\": \"value\"\n" + "}").isValid(jsonSchema))
assertTrue(JSON.parseObject("{ \"a\": 0, \"b\": 1 }").isValid(jsonSchema))
assertTrue(JSON.parseObject("{ \"a\": 0, \"b\": 1, \"c\": 2 }").isValid(jsonSchema))
assertTrue(JSON.parseObject("{ \"country\": \"United States of America\" }").isValid(jsonSchema))
assertTrue(jsonSchema.isValid(2))
assertTrue(jsonSchema.isValid(2F))
assertTrue(jsonSchema.isValid(2D))
assertTrue(jsonSchema.isValid(new BigDecimal("2.0")))
assertTrue(jsonSchema.isValid(new BigInteger("2")))
assertTrue(jsonSchema.isValid(JSON.parse("{\n" + "  \"name\": \"John Doe\",\n" + "  \"credit_card\": 5555555555555555,\n" + "  \"billing_address\": \"555 Debtor's Lane\"\n" + "}")))
assertTrue(jsonSchema.isValid(JSON.parse("{\n" + "  \"name\": \"John Doe\"\n" + "}")))
assertTrue(jsonSchema.isValid(JSON.parse("{\n" + "  \"name\": \"John Doe\",\n" + "  \"billing_address\": \"555 Debtor's Lane\"\n" + "}")))
assertTrue(jsonSchema.isValid(JSON.parseObject("{\n" + "  \"name\": \"John Doe\",\n" + "  \"credit_card\": 5555555555555555,\n" + "  \"billing_address\": \"555 Debtor's Lane\"\n" + "}", Bean2.class)))
assertTrue(jsonSchema.isValid(JSON.parseObject("{\n" + "  \"name\": \"John Doe\"\n" + "}", Bean2.class)))
assertTrue(jsonSchema.isValid(JSON.parseObject("{\n" + "  \"name\": \"John Doe\",\n" + "  \"billing_address\": \"555 Debtor's Lane\"\n" + "}", Bean2.class)))
assertTrue(jsonSchema.isValid(JSON.parse("{\n" + "  \"name\": \"John Doe\",\n" + "  \"credit_card\": 5555555555555555,\n" + "  \"billing_address\": \"555 Debtor's Lane\"\n" + "}")))
assertTrue(jsonSchema.isValid(JSON.parse("{\n" + "  \"name\": \"John Doe\",\n" + "  \"billing_address\": \"555 Debtor's Lane\"\n" + "}")))
assertTrue(jsonSchema.isValid(JSON.parseObject("{\n" + "  \"name\": \"John Doe\",\n" + "  \"credit_card\": 5555555555555555,\n" + "  \"billing_address\": \"555 Debtor's Lane\"\n" + "}", Bean2.class)))
assertTrue(jsonSchema.isValid(JSON.parseObject("{\n" + "  \"name\": \"John Doe\",\n" + "  \"billing_address\": \"555 Debtor's Lane\"\n" + "}", Bean2.class)))
assertTrue(jsonSchema.isValid(JSON.parse("{\n" + "  \"street_address\": \"1600 Pennsylvania Avenue NW\",\n" + "  \"country\": \"United States of America\",\n" + "  \"postal_code\": \"20500\"\n" + "}")))
assertTrue(jsonSchema.isValid(JSON.parse("{\n" + "  \"street_address\": \"1600 Pennsylvania Avenue NW\",\n" + "  \"postal_code\": \"20500\"\n" + "}")))
assertTrue(jsonSchema.isValid(JSON.parse("{\n" + "  \"street_address\": \"24 Sussex Drive\",\n" + "  \"country\": \"Canada\",\n" + "  \"postal_code\": \"K1M 1M4\"\n" + "}")))
assertTrue(jsonSchema.isValid(JSON.parseObject("{\n" + "  \"street_address\": \"1600 Pennsylvania Avenue NW\",\n" + "  \"country\": \"United States of America\",\n" + "  \"postal_code\": \"20500\"\n" + "}", Bean3.class)))
assertTrue(jsonSchema.isValid(JSON.parseObject("{\n" + "  \"street_address\": \"1600 Pennsylvania Avenue NW\",\n" + "  \"postal_code\": \"20500\"\n" + "}", Bean3.class)))
assertTrue(jsonSchema.isValid(JSON.parseObject("{\n" + "  \"street_address\": \"24 Sussex Drive\",\n" + "  \"country\": \"Canada\",\n" + "  \"postal_code\": \"K1M 1M4\"\n" + "}", Bean3.class)))
assertTrue(jsonSchema.isValid(JSON.parse("{\n" + "  \"street_address\": \"1600 Pennsylvania Avenue NW\",\n" + "  \"country\": \"United States of America\",\n" + "  \"postal_code\": \"20500\"\n" + "}")))
assertTrue(jsonSchema.isValid(JSON.parse("{\n" + "  \"street_address\": \"1600 Pennsylvania Avenue NW\",\n" + "  \"postal_code\": \"20500\"\n" + "}")))
assertTrue(jsonSchema.isValid(JSON.parse("{\n" + "  \"street_address\": \"24 Sussex Drive\",\n" + "  \"country\": \"Canada\",\n" + "  \"postal_code\": \"K1M 1M4\"\n" + "}")))
assertTrue(jsonSchema.isValid(JSON.parse("{\n" + "  \"street_address\": \"Adriaan Goekooplaan\",\n" + "  \"country\": \"Netherlands\",\n" + "  \"postal_code\": \"2517 JX\"\n" + "}")))
assertTrue(jsonSchema.isValid(JSON.parse("\"short\"")))
assertTrue(jsonSchema.isValid(JSON.parse("\"foo\"")))
assertTrue(jsonSchema.isValid(JSON.parse("\"short\"")))
assertTrue(jsonSchema.isValid(JSON.parse("12")))
assertTrue(jsonSchema.isValid(JSON.parse("10")))
assertTrue(jsonSchema.isValid(JSON.parse("9")))
assertTrue(jsonSchema.isValid(JSON.parse("42")))
assertTrue(jsonSchema.isValid(JSON.parse("{ \"key\": \"value\" }")))
assertTrue(jsonSchema.isValid(JSON.parse("{\n" + "  \"restaurantType\": \"sit-down\",\n" + "  \"total\": 16.99,\n" + "  \"tip\": 3.4\n" + "}")))
assertTrue(jsonSchema.isValid(JSON.parse("{\n" + "  \"restaurantType\": \"fast-food\",\n" + "  \"total\": 6.99\n" + "}")))
assertTrue(jsonSchema.isValid(JSON.parse("{ \"total\": 5.25 }")))
assertTrue(jsonSchema.isValid(JSON.parseObject("{\n" + "  \"restaurantType\": \"sit-down\",\n" + "  \"total\": 16.99,\n" + "  \"tip\": 3.4\n" + "}", Bean4.class)))
assertTrue(jsonSchema.isValid(JSON.parseObject("{\n" + "  \"restaurantType\": \"fast-food\",\n" + "  \"total\": 6.99\n" + "}", Bean4.class)))
assertTrue(jsonSchema.isValid(JSON.parseObject("{ \"total\": 5.25 }", Bean4.class)))
assertTrue(jsonSchema.isValid(JSON.parse("[ 1, 2, 3, 4, 5 ]")))
assertTrue(jsonSchema.isValid(JSON.parse("[ 1, 2, 3, 4, 5 ]")))
assertTrue(jsonSchema.isValid(JSON.parse("[\n" + "                    [ {\"foo\": null}, {\"foo\": null} ],\n" + "                    [ {\"foo\": null}, {\"foo\": null} ],\n" + "                    [ {\"foo\": null}, {\"foo\": null} ]\n" + "                ]")))
assertTrue(jsonSchema.isValid(JSON.parse("[\"x\",2,3]")))
Assertions.assertEquals(123, JSON.parseObject("{\"value\":123}", Bean.class).value)
assertEquals(123, JSON.parseObject("{\"value\":123}", Bean1.class).value)
assertEquals(123, JSON.parseObject("{\"value\":123}", Bean2.class).value)
assertEquals(123, JSON.parseObject("{\"value\":123}", Bean3.class).value)
assertEquals(123, JSON.parseObject("{\"value\":123}", Bean4.class).value.intValue())
assertEquals(123, JSON.parseObject("{\"value\":123}", Bean5.class).value.intValue())
assertEquals(123, JSON.parseObject("{\"value\":123}", Bean6.class).value.intValue())
assertEquals(123, JSON.parseObject("{\"value\":123}", Bean7.class).value.intValue())
assertEquals(123, JSON.parseObject("{\"value\":123}", Bean8.class).value.intValue())
assertEquals(123, JSON.parseObject("{\"value\":123}", Bean9.class).value.intValue())
assertEquals(123F, JSON.parseObject("{\"value\":123}", Bean10.class).value)
assertEquals(123F, JSON.parseObject("{\"value\":123}", Bean11.class).value)
assertEquals(123F, JSON.parseObject("{\"value\":123}", Bean12.class).value)
assertEquals(123D, JSON.parseObject("{\"value\":123}", Bean13.class).value)
assertEquals(123, JSON.parseObject("{\"value\":123}", Bean14.class).value.intValue())
assertEquals(123, JSON.parseObject("{\"value\":123}", Bean15.class).value.intValue())
assertTrue(result.getMessage().contains("age"))
assertTrue(result.getMessage().contains("age"))
assertEquals(list_map_st_obj, JSON.toJSONString(temp))
assertTrue(JSON.isValid(json))
assertTrue(JSON.isValid(utf8))
assertTrue(JSON.isValid(utf8, 0, utf8.length, StandardCharsets.UTF_8))
assertTrue(JSON.isValid(utf8, 0, utf8.length, StandardCharsets.US_ASCII))
assertEquals(jsonStr, result)
assertEquals(jsonStr, result)
assertNotNull(m)
assertEquals(expectStr, JSON.toJSONString(m))
assertEquals(str, JSON.toJSONString(m))
assertEquals("com.alibaba.fastjson", new String(m.data))
assertEquals(expectStr, JSON.toJSONString(m))
assertEquals("com.alibaba.fastjson", new String(m.data))
assertEquals("{\"id\":123,\"info\":\"fofo\",\"name\":\"wenshao\"}", text)
assertEquals(expectStr, JSON.toJSONString(m))
assertEquals(str, JSON.toJSONString(m))
assertEquals("com.alibaba.fastjson", new String(m.data))
assertEquals(expectStr, JSON.toJSONString(m))
assertEquals("com.alibaba.fastjson", new String(m.data))
assertEquals("{\"id\":123,\"info\":\"fofo\",\"name\":\"wenshao\"}", text)
assertEquals(v1.getValue(), v.getValue())
assertEquals("{\"value\":null}", text)
assertEquals(v1.getValue(), v.getValue())
assertEquals("{\"value\":null}", text)
assertEquals(v1.getValue(), v.getValue())
assertEquals("{\"value\":0}", text)
assertEquals(Byte.valueOf((byte) 0), v1.getValue())
assertEquals("{\"admin\":[\"admin.create\",\"admin.update\",\"admin.delete\"],\"user\":[\"user.create\",\"user.delete\"]}", json)
assertEquals(multimap.size(), multimap1.size())
assertEquals(json, JSON.toJSONString(multimap1))
assertEquals("", obj.get("value"))
assertNull(obj.getObject("value", Model.class))
assertNull(obj.getObject("value", getType()))
assertEquals("{\"value\":null}", text)
assertEquals(v1.getValue(), v.getValue())
assertEquals("{\"value\":[]}", text)
assertEquals("[true]", JSON.toJSONString(new boolean[] { true }))
assertEquals("{\"value\":null}", text)
assertEquals(v1.getValue(), v.getValue())
assertEquals("{\"value\":[]}", text)
assertEquals(123, tb.getAb())
assertTrue(model.flag)
assertEquals("{\"userId\":\"456\"}", json)
assertEquals(123, tb.getAb())
assertNotNull(error)
assertEquals("\"2017-03-17\"", json)
assertEquals("\"2017-03-07\"", json)
assertEquals(123, model.id)
assertEquals(123, model.id)
assertEquals(1, list.size())
assertEquals(Model.class, list.get(0).getClass())
assertEquals(1, list.size())
assertEquals(Model.class, list.get(0).getClass())
assertEquals("{\"value\":null}", text)
assertEquals(v1.getValue(), v.getValue())
assertEquals("{\"value\":0}", text)
assertEquals("{\"value\":\"QUJDREVH\"}", json)
assertArrayEquals(model.value, model1.value)
assertNotNull(child)
assertEquals("\"黑色\"", JSON.toJSONString(vo.type))
assertEquals("{\"type\":\"黑色\"}", str)
assertEquals(vo.type, vo2.type)
assertEquals("1003", JSON.toJSONString(vo.type))
assertEquals("{\"type\":1003}", str)
assertEquals(vo.type, vo2.type)
assertEquals("1003", JSON.toJSONString(vo.type))
assertEquals("{\"type\":1003}", str)
assertEquals(vo.type, vo2.type)
assertEquals(JSON.toJSONString(vo), "{\"date\":\"2020-05-30\"}")
assertEquals("{\"date\":\"2020-05-30\"}", str)
assertEquals("1003", JSON.toJSONString(vo.type))
assertEquals("{\"type\":1003}", str)
assertEquals(vo.type, vo2.type)
assertEquals("1003", JSON.toJSONString(vo.type))
assertEquals("{\"type\":1003}", str)
assertEquals(vo.type, vo2.type)
assertEquals("{\"v0\":\"1001\",\"v1\":\"101\"}", str)
assertEquals("1001", object.get("v0"))
assertEquals("101", object.get("v1"))
assertEquals("{\"v0\":\"19007199254740991\"}", str)
assertEquals(JSON.toJSONString(vo), "{\"date\":\"2020-05-30\"}")
assertEquals("{\"date\":\"2020-05-30\"}", str)
assertEquals("\"AQ==\"", JSON.toJSONString(new byte[] { 1 }, "base64"))
assertEquals("{\"value\":null}", text)
assertEquals(v1.getValue(), v.getValue())
assertEquals("{\"value\":[]}", text)
assertEquals("123", bean.getValue())
assertEquals(false, bean.isBig())
assertEquals(123, bean.getIntValue())
assertEquals(true, bean.isBig())
assertEquals(567, bean.getID())
assertNotNull(error)
assertNotNull(error)
assertNotNull(error)
assertNotNull(error)
assertNotNull(error)
assertNotNull(error)
assertNotNull(error)
assertNotNull(error)
assertNotNull(error)
assertEquals(1548166745000L, o.createTime.getTime())
assertEquals("{\"createTime\":1548166745}", json)
assertEquals(1548166745000L, o.createTime.getTimeInMillis())
assertEquals("{\"createTime\":1548166745}", json)
assertEquals(1531579788000L, o.createTime.getTimeInMillis())
assertEquals("{\"createTime\":\"20180714224948\"}", json)
assertEquals(ZonedDateTime.class, o.createTime.getClass())
assertEquals(1548166745L, seconds)
assertEquals("{\"createTime\":1548166745}", json)
assertSame(Type.Big, JSON.parseObject("\"big\"", Type.class))
assertSame(Type.Big, JSON.parseObject("\"Big\"", Type.class))
assertSame(Type.Big, JSON.parseObject("\"BIG\"", Type.class))
assertSame(Type.Small, JSON.parseObject("\"Small\"", Type.class))
assertSame(Type.Small, JSON.parseObject("\"small\"", Type.class))
assertSame(Type.Small, JSON.parseObject("\"SMALL\"", Type.class))
assertSame(Type.Medium, JSON.parseObject("\"medium\"", Type.class))
assertSame(Type.Medium, JSON.parseObject("\"MEDIUM\"", Type.class))
assertSame(Type.Medium, JSON.parseObject("\"Medium\"", Type.class))
assertSame(Type.Medium, JSON.parseObject("\"MediuM\"", Type.class))
assertNull(JSON.parseObject("\"\"", Type.class))
assertSame(Type.Big, JSON.parseObject("{\"type\":\"bIG\"}", Model.class).type)
assertSame(Type.Big, JSON.parseObject("{\"type\":\"big\"}", Model.class).type)
assertSame(Type.Big, JSON.parseObject("{\"type\":\"Big\"}", Model.class).type)
assertSame(Type.Big, JSON.parseObject("{\"type\":\"BIG\"}", Model.class).type)
assertSame(Type.Small, JSON.parseObject("{\"type\":\"Small\"}", Model.class).type)
assertSame(Type.Small, JSON.parseObject("{\"type\":\"SmAll\"}", Model.class).type)
assertSame(Type.Small, JSON.parseObject("{\"type\":\"small\"}", Model.class).type)
assertSame(Type.Small, JSON.parseObject("{\"type\":\"SMALL\"}", Model.class).type)
assertSame(Type.Medium, JSON.parseObject("{\"type\":\"Medium\"}", Model.class).type)
assertSame(Type.Medium, JSON.parseObject("{\"type\":\"MediuM\"}", Model.class).type)
assertSame(Type.Medium, JSON.parseObject("{\"type\":\"medium\"}", Model.class).type)
assertSame(Type.Medium, JSON.parseObject("{\"type\":\"MEDIUM\"}", Model.class).type)
assertNull(JSON.parseObject("{\"type\":\"\"}", Model.class).type)
assertNull(model.type)
assertNotNull(error)
assertNotNull(error)
assertEquals("{\"null\":123}", str)
assertEquals(1950, m.date.get(Calendar.YEAR))
assertEquals(1950, m.date.getYear())
assertEquals(1950, m.date.getYear())
assertEquals(1950, m.date.getYear())
assertEquals(1950, m.date.getYear())
assertEquals(1950, m.date.getYear())
assertEquals(1950, m.date.getYear())
assertEquals(TestUtils.encodeToBase64String(entity.getValue(), false), json.getString("value"))
assertEquals("中华人民共和国", new String(entity2.getValue(), "UTF-8"))
assertNotNull(error)
assertTrue(error.getMessage().indexOf("parseLong error") != -1)
assertNotNull(error)
assertTrue(error.getMessage().indexOf("parseLong error") != -1)
assertNotNull(error)
assertTrue(error.getMessage().indexOf("parseLong error") != -1)
assertEquals("{\"value\":null}", text)
assertEquals(v1.getValue(), v.getValue())
assertEquals("{\"value\":0}", text)
assertEquals("", obj.get("value"))
assertNull(obj.getObject("value", Model.class))
assertNull(obj.getObject("value", new TypeReference<Model>() {
}))
assertEquals("null", obj.get("value"))
assertNull(obj.getObject("value", Model.class))
assertNull(obj.getObject("value", new TypeReference<Model>() {
}))
assertEquals(new JSONObject(), obj.getObject("value", JSONObject.class))
assertFalse(schema.isValid(JSONObject.of("id", 1, "name", "")))
assertFalse(schema.isValid(JSONObject.of("id", "1", "name", "", "price", 0)))
assertFalse(schema.isValid(JSONObject.of("id", 1, "name", 1, "price", 0)))
assertFalse(schema.isValid(JSONObject.of("id", 1, "name", "", "price", "x")))
assertFalse(jsonSchema.validate((Object) null).isSuccess())
assertFalse(jsonSchema.validate("a123").isSuccess())
assertFalse(jsonSchema.validate((Object) null).isSuccess())
assertFalse(jsonSchema.isValid("a"))
assertFalse(jsonSchema.isValid("(888)555-1212 ext. 532"))
assertFalse(jsonSchema.isValid("(800)FLOWERS"))
assertFalse(jsonSchema.isValid("1970-13-13"))
assertFalse(jsonSchema.isValid("1970-02-31"))
assertFalse(jsonSchema.isValid("(888)555-1212 ext. 532"))
assertFalse(jsonSchema.isValid("(800)FLOWERS"))
assertFalse(jsonSchema.isValid("1970-13-13 12:13:14"))
assertFalse(jsonSchema.isValid("1970-02-31 12:13:14"))
assertFalse(jsonSchema.isValid("(888)555-1212 ext. 532"))
assertFalse(jsonSchema.isValid("(800)FLOWERS"))
assertFalse(jsonSchema.isValid("25:13:14"))
assertFalse(jsonSchema.isValid("1970-02-01 12:13:14"))
assertFalse(jsonSchema.isValid("(888)555-1212 ext. 532"))
assertFalse(jsonSchema.isValid("(800)FLOWERS"))
assertFalse(jsonSchema.isValid(1F))
assertFalse(jsonSchema.isValid(Float.valueOf(1)))
assertFalse(jsonSchema.isValid(Double.valueOf(1)))
assertFalse(jsonSchema.isValid("*7F4139039A94CA6A13B88CF07A41108"))
assertFalse(jsonSchema.isValid("1970-02-01 12:13:14"))
assertFalse(jsonSchema.isValid("(888)555-1212 ext. 532 (888)555-1212 ext. 532"))
assertFalse(jsonSchema.isValid("(888)555-1212 ext. 532"))
assertFalse(jsonSchema.isValid("(800)FLOWERS"))
assertFalse(jsonSchema.isValid("1970-02-01 12:13:14"))
assertFalse(jsonSchema.isValid("(888)555-1212 ext. 532 (888)555-1212 ext. 532"))
assertFalse(jsonSchema.isValid("(888)555-1212 ext. 532"))
assertFalse(jsonSchema.isValid("(888)555-1212 ext. 532"))
assertFalse(jsonSchema.isValid("(800)FLOWERS"))
assertFalse(jsonSchema.isValid("a"))
assertFalse(jsonSchema.isValid(1.1F))
assertFalse(jsonSchema.isValid(new BigDecimal("1.1")))
assertFalse(jsonSchema.isValid((Object) null))
assertFalse(jsonSchema.isValid(1))
assertFalse(jsonSchema.isValid(10))
assertFalse(jsonSchema.isValid(9))
assertFalse(jsonSchema.isValid(10))
assertFalse(jsonSchema.isValid(9))
assertFalse(jsonSchema.isValid(11))
assertFalse(jsonSchema.isValid(10))
assertFalse(jsonSchema.isValid(11))
assertFalse(jsonSchema.isValid(10))
assertFalse(jsonSchema.isValid(11))
assertFalse(jsonSchema.isValid(-1))
assertFalse(jsonSchema.isValid(100))
assertFalse(jsonSchema.isValid(101))
assertFalse(jsonSchema.validate(-1).isSuccess())
assertFalse(jsonSchema.validate(99).isSuccess())
assertFalse(jsonSchema.validate(101).isSuccess())
assertFalse(jsonSchema.validate(23).isSuccess())
assertFalse(jsonSchema.isValid(1))
assertFalse(jsonSchema.isValid(1))
assertFalse(jsonSchema.isValid(9))
assertFalse(jsonSchema.isValid(10))
assertFalse(jsonSchema.isValid(1))
assertFalse(jsonSchema.isValid(9))
assertFalse(jsonSchema.isValid(10))
assertFalse(jsonSchema.isValid(11))
assertFalse(jsonSchema.isValid(10))
assertFalse(jsonSchema.isValid(11))
assertFalse(jsonSchema.isValid(11D))
assertFalse(jsonSchema.isValid(Double.valueOf(11)))
assertFalse(jsonSchema.isValid(11F))
assertFalse(jsonSchema.isValid(Float.valueOf(11)))
assertFalse(jsonSchema.isValid(10))
assertFalse(jsonSchema.isValid(11))
assertFalse(jsonSchema.isValid(-1))
assertFalse(jsonSchema.isValid(100))
assertFalse(jsonSchema.isValid(101))
assertFalse(jsonSchema.isValid(-1))
assertFalse(jsonSchema.isValid(99))
assertFalse(jsonSchema.isValid(101))
assertFalse(jsonSchema.isValid(23))
assertFalse(jsonSchema.isValid((Integer) null))
assertFalse(jsonSchema.isValid(1))
assertFalse(jsonSchema.isValid(1))
assertFalse(jsonSchema.isValid(true))
assertFalse(jsonSchema.isValid(new Object[] { 0, 1, 2, 3 }))
assertFalse(jsonSchema.isValid(new Object[] {}))
assertFalse(jsonSchema.isValid(new Object[] { 0 }))
assertFalse(jsonSchema.isValid(JSON.parse("{\"Not\": \"an array\"}")))
assertFalse(jsonSchema.isValid(JSON.parse("[1, 2, \"3\", 4, 5]")))
assertFalse(jsonSchema.isValid(JSON.parse("[24, \"Sussex\", \"Drive\"]")))
assertFalse(jsonSchema.isValid(JSON.parse("[\"Palais de l'Élysée\"]")))
assertFalse(jsonSchema.isValid(new String[] { "Palais de l'Élysée" }))
assertFalse(jsonSchema.isValid(JSON.parse("[1600, \"Pennsylvania\", \"Avenue\", \"NW\", \"Washington\"]")))
assertFalse(jsonSchema.isValid(new Object[] { 1600, "Pennsylvania", "Avenue", "NW", "Washington" }))
assertFalse(jsonSchema.isValid(JSON.parse("[\"life\", \"universe\", \"everything\", \"forty-two\"]")))
assertFalse(jsonSchema.isValid(new Object[] { "life", "universe", "everything", "forty-two" }))
assertFalse(jsonSchema.isValid(JSON.parse("[\"apple\", \"orange\", 2]")))
assertFalse(jsonSchema.isValid(JSON.parse("[\"apple\", \"orange\", 2, 4, 8, 16]")))
assertFalse(jsonSchema.isValid(new Object[] { "apple", "orange", 2 }))
assertFalse(jsonSchema.isValid(new Object[] { "apple", "orange", 2, 4, 8, 16 }))
assertFalse(jsonSchema.isValid(JSON.parse("[1, 2, 3, 3, 4]")))
assertFalse(jsonSchema.isValid(new Object[] { 1, 2, 3, 3, 4 }))
assertFalse(jsonSchema.isValid(new int[] { 1, 2, 3, 3, 4 }))
assertFalse(jsonSchema.isValid(new Object[] {}))
assertFalse(jsonSchema.isValid(1))
assertFalse(jsonSchema.isValid(1L))
assertFalse(jsonSchema.isValid('A'))
assertFalse(jsonSchema.isValid(1F))
assertFalse(jsonSchema.isValid(1D))
assertFalse(jsonSchema.isValid(Byte.MIN_VALUE))
assertFalse(jsonSchema.isValid(Short.MIN_VALUE))
assertFalse(jsonSchema.isValid(BigDecimal.ZERO))
assertFalse(jsonSchema.isValid(BigInteger.ZERO))
assertFalse(jsonSchema.isValid(true))
assertFalse(jsonSchema.isValid(JSONSchema.Type.Object))
assertFalse(jsonSchema.validate(JSONObject.of()).isSuccess())
assertFalse(jsonSchema.validate(JSONObject.of().toJavaObject(Bean1.class)).isSuccess())
assertFalse(jsonSchema.validate(new Bean()).isSuccess())
assertFalse(jsonSchema.validate(JSON.parseObject("{ \"number\": \"1600\", \"street_name\": \"Pennsylvania\", \"street_type\": \"Avenue\" }")).isSuccess())
assertFalse(JSON.parseObject("{ \"S_0\": 42 }").isValid(jsonSchema))
assertFalse(JSON.parseObject("{ \"I_42\": \"This is a string\" }").isValid(jsonSchema))
assertFalse(JSON.parseObject("{ \"number\": 1600, \"street_name\": \"Pennsylvania\", \"street_type\": \"Avenue\", \"direction\": \"NW\" }").isValid(jsonSchema))
assertFalse(JSON.parseObject("{ \"number\": 1600, \"street_name\": \"Pennsylvania\", \"street_type\": \"Avenue\", \"office_number\": 201 }").isValid(jsonSchema))
assertFalse(JSON.parseObject("{\n" + "  \"name\": \"William Shakespeare\",\n" + "  \"address\": \"Henley Street, Stratford-upon-Avon, Warwickshire, England\",\n" + "}").isValid(jsonSchema))
assertFalse(JSON.parseObject("{\n" + "  \"name\": \"William Shakespeare\",\n" + "  \"address\": \"Henley Street, Stratford-upon-Avon, Warwickshire, England\",\n" + "  \"email\": null\n" + "}\n").isValid(jsonSchema))
assertFalse(JSON.parseObject("{\n" + "  \"001 invalid\": \"value\"\n" + "}").isValid(jsonSchema))
assertFalse(JSON.parseObject("{}").isValid(jsonSchema))
assertFalse(JSON.parseObject("{ \"a\": 0 }").isValid(jsonSchema))
assertFalse(JSON.parseObject("{ \"a\": 0, \"b\": 1, \"c\": 2, \"d\": 3 }").isValid(jsonSchema))
assertFalse(JSON.parseObject("{ \"country\": \"Canada\" }").isValid(jsonSchema))
assertFalse(jsonSchema.isValid(3))
assertFalse(jsonSchema.isValid(3.0F))
assertFalse(jsonSchema.isValid(3.0D))
assertFalse(jsonSchema.isValid(new BigDecimal("3.0")))
assertFalse(jsonSchema.isValid(new BigInteger("3")))
assertFalse(jsonSchema.isValid(JSON.parse("{\n" + "  \"name\": \"John Doe\",\n" + "  \"credit_card\": 5555555555555555\n" + "}")))
assertFalse(jsonSchema.isValid(JSON.parseObject("{\n" + "  \"name\": \"John Doe\",\n" + "  \"credit_card\": 5555555555555555\n" + "}", Bean2.class)))
assertFalse(jsonSchema.isValid(JSON.parse("{\n" + "  \"name\": \"John Doe\",\n" + "  \"credit_card\": 5555555555555555\n" + "}")))
assertFalse(jsonSchema.isValid(JSON.parse("{\n" + "  \"name\": \"John Doe\",\n" + "  \"billing_address\": \"555 Debtor's Lane\"\n" + "}")))
assertFalse(jsonSchema.isValid(JSON.parse("{\n" + "  \"name\": \"John Doe\",\n" + "  \"credit_card\": 5555555555555555\n" + "}")))
assertFalse(jsonSchema.isValid(JSON.parseObject("{\n" + "  \"name\": \"John Doe\",\n" + "  \"credit_card\": 5555555555555555\n" + "}", Bean2.class)))
assertFalse(jsonSchema.isValid(JSON.parse("{\n" + "  \"street_address\": \"24 Sussex Drive\",\n" + "  \"country\": \"Canada\",\n" + "  \"postal_code\": \"10000\"\n" + "}")))
assertFalse(jsonSchema.isValid(JSON.parse("{\n" + "  \"street_address\": \"1600 Pennsylvania Avenue NW\",\n" + "  \"postal_code\": \"K1M 1M4\"\n" + "}")))
assertFalse(jsonSchema.isValid(JSON.parseObject("{\n" + "  \"street_address\": \"24 Sussex Drive\",\n" + "  \"country\": \"Canada\",\n" + "  \"postal_code\": \"10000\"\n" + "}", Bean3.class)))
assertFalse(jsonSchema.isValid(JSON.parseObject("{\n" + "  \"street_address\": \"1600 Pennsylvania Avenue NW\",\n" + "  \"postal_code\": \"K1M 1M4\"\n" + "}", Bean3.class)))
assertFalse(jsonSchema.isValid(JSON.parse("{\n" + "  \"street_address\": \"24 Sussex Drive\",\n" + "  \"country\": \"Canada\",\n" + "  \"postal_code\": \"10000\"\n" + "}")))
assertFalse(jsonSchema.isValid(JSON.parse("{\n" + "  \"street_address\": \"1600 Pennsylvania Avenue NW\",\n" + "  \"postal_code\": \"K1M 1M4\"\n" + "}")))
assertFalse(jsonSchema.isValid(JSON.parse("\"too long\"")))
assertFalse(jsonSchema.isValid(JSON.parse("2")))
assertFalse(jsonSchema.isValid(JSON.parse("\"foo\"")))
assertFalse(jsonSchema.isValid(JSON.parse("\"too long\"")))
assertFalse(jsonSchema.isValid(JSON.parse("-5")))
assertFalse(jsonSchema.isValid(JSON.parse("2")))
assertFalse(jsonSchema.isValid(JSON.parse("15")))
assertFalse(jsonSchema.isValid(JSON.parse("\"I am a string\"")))
assertFalse(jsonSchema.isValid(JSON.parse("{\n" + "  \"restaurantType\": \"sit-down\",\n" + "  \"total\": 16.99\n" + "}")))
assertFalse(jsonSchema.isValid(JSON.parseObject("{\n" + "  \"restaurantType\": \"sit-down\",\n" + "  \"total\": 16.99\n" + "}", Bean4.class)))
assertFalse(jsonSchema.isValid(JSON.parse("[ 1, \"hello\" ]")))
assertFalse(jsonSchema.isValid(JSON.parse("[ 1, null ]")))
assertFalse(jsonSchema.isValid(JSON.parse("[ 1, \"foo\", true ]")))
assertFalse(jsonSchema.isValid(JSON.parse("1.1")))
assertFalse(jsonSchema.isValid(JSON.parse("{\"percent\": \"aoeu\"}")))
assertEquals("[{\"名称\":\"脆皮青豆\",\"配料\":[\"豌豆\",\"棕榈油\",\"白砂糖\",\"食用盐\",\"玉米淀粉\"]}]", JSONPath.extract(chineseKeyString, "$[?(@.名称 = '脆皮青豆')]").toString())
assertEquals("[{\"name\":\"脆皮青豆\",\"配料\":[\"豌豆\",\"棕榈油\",\"白砂糖\",\"食用盐\",\"玉米淀粉\"]}]", JSONPath.extract(normalKeyString, "$[?(@.name = '脆皮青豆')]").toString())
assertFalse(((List) JSONPath.extract(chineseKeyString, "$[?(@.名称 = '脆皮青豆')]")).isEmpty())
assertFalse(((List) JSONPath.extract(normalKeyString, "$[?(@.name = '脆皮青豆')]")).isEmpty())
assertEquals("{\"dependencies\":[{\"values\":[]}]}", jsonObject.toString())
assertEquals("{\"values\":[]}", jsonObject.toString())
assertEquals("{\"time\":" + m.time.atZone(zoneId).toInstant().toEpochMilli() + "}", str)
assertEquals(m.time.atZone(zoneId).toInstant().toEpochMilli(), m1.time.atZone(zoneId).toInstant().toEpochMilli())
assertEquals("{\"ztime\":" + m.ztime.toInstant().toEpochMilli() + "}", str)
assertEquals(m.ztime.toInstant().toEpochMilli(), m1.ztime.toInstant().toEpochMilli())
assertEquals("{\"time1\":" + m.time1.atZone(zoneId).toEpochSecond() + "}", str)
assertEquals(m.time1.atZone(zoneId).toEpochSecond(), m1.time1.atZone(zoneId).toEpochSecond())
assertEquals("{\"ztime1\":" + m.ztime1.toEpochSecond() + "}", str)
assertEquals(m.ztime1.toEpochSecond(), m1.ztime1.toEpochSecond())
assertEquals("{\"date\":" + m.date.getTime() + "}", str)
assertEquals(m.date.getTime(), m1.date.getTime())
assertEquals("{\"date1\":" + (m.date1.getTime() / 1000) + "}", str)
assertEquals(m.date1.getTime() / 1000, m1.date1.getTime() / 1000)
assertEquals("{\"date1\":" + (m.date1.getTime() / 1000) + "}", str)
assertEquals(m.date1.getTime() / 1000, m1.date1.getTime() / 1000)
assertEquals(LocalDateTime.of(2019, 7, 14, 12, 13, 14), m.time2)
assertEquals("{\"time\":" + m.time.atZone(zoneId).toInstant().toEpochMilli() + "}", str)
assertEquals(m.time.atZone(zoneId).toInstant().toEpochMilli(), m1.time.atZone(zoneId).toInstant().toEpochMilli())
assertEquals("{\"ztime\":" + m.ztime.toInstant().toEpochMilli() + "}", str)
assertEquals(m.ztime.toInstant().toEpochMilli(), m1.ztime.toInstant().toEpochMilli())
assertEquals("{\"time1\":" + m.time1.atZone(zoneId).toEpochSecond() + "}", str)
assertEquals(m.time1.atZone(zoneId).toEpochSecond(), m1.time1.atZone(zoneId).toEpochSecond())
assertEquals("{\"ztime1\":" + m.ztime1.toEpochSecond() + "}", str)
assertEquals(m.ztime1.toEpochSecond(), m1.ztime1.toEpochSecond())
assertEquals("{\"date\":" + m.date.getTime() + "}", str)
assertEquals(m.date.getTime(), m1.date.getTime())
assertEquals("{\"date1\":" + (m.date1.getTime() / 1000) + "}", str)
assertEquals(m.date1.getTime() / 1000, m1.date1.getTime() / 1000)
assertEquals("{\"date1\":" + (m.date1.getTime() / 1000) + "}", str)
assertEquals(m.date1.getTime() / 1000, m1.date1.getTime() / 1000)
assertEquals(LocalDateTime.of(2019, 7, 14, 12, 13, 14), m.time2)
assertEquals(Long.toString(millis), JSON.toJSONString(new Date(millis), "millis"))
assertEquals(Long.toString(millis / 1000), JSON.toJSONString(new Date(millis), "unixtime"))
assertEquals(GeometryCollection.class, geometry.getClass())
assertEquals("{\"type\":\"GeometryCollection\",\"geometries\":[{\"type\":\"Point\",\"coordinates\":[100.0,0.0]},{\"type\":\"LineString\",\"coordinates\":[[101.0,0.0],[102.0,1.0]]}]}", JSON.toJSONString(geometry))
assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)))
assertEquals(Point.class, geometry.getClass())
assertEquals("{\"type\":\"Point\",\"coordinates\":[100.0,0.0]}", JSON.toJSONString(geometry))
assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)))
assertEquals(Polygon.class, geometry.getClass())
assertEquals("{\"type\":\"Polygon\",\"coordinates\":[[[100.0,0.0],[101.0,0.0],[101.0,1.0],[100.0,1.0],[100.0,0.0]],[[100.8,0.8],[100.8,0.2],[100.2,0.2],[100.2,0.8],[100.8,0.8]]]}", JSON.toJSONString(geometry))
assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)))
assertEquals(MultiPolygon.class, geometry.getClass())
assertEquals("{\"type\":\"MultiPolygon\",\"coordinates\":[[[[102.0,2.0],[103.0,2.0],[103.0,3.0],[102.0,3.0],[102.0,2.0]]],[[[100.0,0.0],[101.0,0.0],[101.0,1.0],[100.0,1.0],[100.0,0.0]],[[100.2,0.2],[100.2,0.8],[100.8,0.8],[100.8,0.2],[100.2,0.2]]]]}", JSON.toJSONString(geometry))
assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)))
assertEquals(FeatureCollection.class, geometry.getClass())
assertEquals("{\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"properties\":{\"prop0\":\"value0\"},\"geometry\":{\"type\":\"Point\",\"coordinates\":[102.0,0.5]}},{\"type\":\"Feature\",\"properties\":{\"prop1\":\"0.0\",\"prop0\":\"value0\"},\"geometry\":{\"type\":\"LineString\",\"coordinates\":[[102.0,0.0],[103.0,1.0],[104.0,0.0],[105.0,1.0]]}},{\"type\":\"Feature\",\"properties\":{\"prop1\":\"{\\\"this\\\":\\\"that\\\"}\",\"prop0\":\"value0\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[100.0,0.0],[101.0,0.0],[101.0,1.0],[100.0,1.0],[100.0,0.0]]]}}]}", JSON.toJSONString(geometry))
assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)))
assertEquals(MultiLineString.class, geometry.getClass())
assertEquals("{\"type\":\"MultiLineString\",\"coordinates\":[[[100.0,0.0],[101.0,1.0]],[[102.0,2.0],[103.0,3.0]]]}", JSON.toJSONString(geometry))
assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)))
assertEquals(LineString.class, geometry.getClass())
assertEquals("{\"type\":\"LineString\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]}", JSON.toJSONString(geometry))
assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)))
assertEquals(Feature.class, geometry.getClass())
assertEquals("{\"type\":\"Feature\",\"bbox\":[-10.0,-10.0,10.0,10.0],\"properties\":{},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-10.0,-10.0],[10.0,-10.0],[10.0,10.0],[-10.0,-10.0]]]}}", JSON.toJSONString(geometry))
assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)))
assertEquals(Feature.class, geometry.getClass())
assertEquals("{\"type\":\"Feature\",\"id\":\"f2\",\"properties\":{},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-10.0,-10.0],[10.0,-10.0],[10.0,10.0],[-10.0,-10.0]]]}}", JSON.toJSONString(geometry))
assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)))
assertEquals(MultiPoint.class, geometry.getClass())
assertEquals("{\"type\":\"MultiPoint\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]}", JSON.toJSONString(geometry))
assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)))
assertEquals(json, json1)
assertEquals("{\"canRefuse\":true,\"code\":3,\"first\":false,\"last\":false,\"name\":\"FINAL_TRAIL\",\"nameCn\":\"公益委员会/理事会/理事长审核\"}", json)
assertNotNull(error)
assertEquals("{\"v\":3.4028234663852886E38}", sFloatOverflow)
assertEquals(3.4028235E38F, floatVal.v)
assertEquals(floatVal.v, Float.parseFloat("3.4028234663852886E38"))
assertEquals("{\"v\":6.805646932770577E38}", sFloatOverflow)
assertEquals(Float.parseFloat("6.805646932770577E38"), floatVal.v)
assertEquals("{\"_id\":1001,\"id\":1002}", json)
assertEquals(json, JSON.toJSONString(model1))
assertEquals("{\"time1\":" + t1 + ",\"time2\":\"2017-09-22 15:08:56\"}", json)
assertEquals("{\"time1\":" + JSON.toJSONString(time1) + ",\"time2\":\"2017-09-22 15:08:56\"}", json)
assertEquals("{\"time1\":\"" + stime1 + "\",\"time2\":\"" + stime2 + "\"}", json)
assertNotNull(error)
assertNotNull(error)
Assertions.assertEquals(1, resource.ret)
Assertions.assertEquals("ok", resource.message)
Assertions.assertEquals(2, data.size())
Assertions.assertEquals("11c53f541dee4f5bbc4f75f99002278c", app1.appId)
assertEquals(0, model.hasSth)
assertEquals(3, model.id)
assertEquals("{\"id\":\"001\",\"name\":\"顾客\"}", JSON.toJSONString(p))
assertEquals(json, json1)
assertEquals("{\"MD5\":\"xxx\"}", json)
assertEquals(1, s0.id)
assertEquals(22, s0.age)
assertEquals("hello", s0.name)
assertEquals(1, s1.id)
assertEquals(22, s1.age)
assertEquals("hhh", s1.name)
assertNull(model.flag)
assertSame(BuFlag.IS_NEED_CHECK_IDENTITY, model.flag)
assertEquals(str, JSON.toJSONString(resp1))
assertEquals(str2, JSON.toJSONString(resp2))
assertFalse(ok.v)
assertFalse(bad.v)
assertEquals("\"2018-08-31 15:26:37\"", json)
assertArrayEquals(model.value, model1.value)
assertEquals("string", m2.getString())
assertEquals(false, m2.isaBoolean())
assertEquals(true, m2.getaBoolean2().booleanValue())
assertEquals(0, m2.getAnInt())
assertEquals(888, m2.getInteger().intValue())
assertEquals(0, m2.getaShort())
assertEquals(88, m2.getaShort2().shortValue())
assertEquals('\u0000', m2.getaChar())
assertEquals('J', m2.getCharacter().charValue())
assertEquals(0, m2.getaByte())
assertEquals(8, m2.getaByte2().byteValue())
assertEquals(0, m2.getaLong())
assertEquals(8888, m2.getaLong2().longValue())
assertEquals("0.0", "" + m2.getaFloat())
assertEquals("8.8", "" + m2.getaFloat2())
assertEquals("0.0", "" + m2.getaDouble())
assertEquals("88.88", "" + m2.getaDouble2())
assertEquals("test", m2.getString())
assertEquals(true, m2.isaBoolean())
assertEquals(false, m2.getaBoolean2().booleanValue())
assertEquals(888, m2.getAnInt())
assertEquals(999, m2.getInteger().intValue())
assertEquals(88, m2.getaShort())
assertEquals(99, m2.getaShort2().shortValue())
assertEquals('J', m2.getaChar())
assertEquals('C', m2.getCharacter().charValue())
assertEquals(8, m2.getaByte())
assertEquals(9, m2.getaByte2().byteValue())
assertEquals(8888, m2.getaLong())
assertEquals(9999, m2.getaLong2().longValue())
assertEquals("8.8", "" + m2.getaFloat())
assertEquals("9.9", "" + m2.getaFloat2())
assertEquals("88.88", "" + m2.getaDouble())
assertEquals("99.99", "" + m2.getaDouble2())
assertEquals("[123,\"wenshao\"]", text)
assertEquals(vo.getId(), vo2.getId())
assertEquals(vo.getName(), vo2.getName())
assertEquals("[true,\"wenshao\"]", text)
assertEquals("[123.0,\"wenshao\"]", text)
assertTrue(vo.id == vo2.id)
assertEquals(vo.name, vo2.name)
assertNotNull(error)
assertNotNull(error)
assertNotNull(error)
assertEquals("[123.0,\"wenshao\"]", text)
assertTrue(vo.id == vo2.id)
assertEquals(vo.name, vo2.name)
assertNotNull(error)
assertNotNull(error)
assertNotNull(error)
assertEquals("[123,\"wenshao\"]", text)
assertEquals("[\"x\",\"wenshao\"]", text)
assertEquals("[123.0,\"wenshao\"]", text)
assertTrue(vo.id == vo2.id)
assertEquals(vo.name, vo2.name)
assertNotNull(error)
assertNotNull(error)
assertNotNull(error)
assertEquals("[123,\"wenshao\"]", text)
assertNotNull(exception)
assertEquals(NullPointerException.class, exception.getCause().getClass())
assertEquals("name", c1.name)
assertEquals(1, c1.id)
assertEquals("user", c2.name)
assertEquals(2, c2.id)
assertEquals("user", c2.name)
assertEquals(2, c2.id)
assertEquals("name", c1.name)
assertEquals(1, c1.id)
assertEquals("user", c2.name)
assertEquals(2, c2.id)
assertEquals("2", o.data.get(1))
assertEquals("2", o.data.get(1))
assertEquals("2", object.data.get(1))
assertEquals(1, a.a)
assertEquals(1, count.intValue())
assertEquals(1, b.a)
assertEquals(2, count.intValue())
assertEquals(1, a.a)
assertEquals(1, count.intValue())
assertEquals(1, b.a)
assertEquals(2, count.intValue())
assertEquals("{\"type\":\"TypeA\"}", text)
assertEquals("{}", text)
assertEquals("{\"REQ_NO\":\"123\"}", JSON.toJSONString(model))
assertEquals("\"2017-06-29T10:36:30+08:00\"", JSON.toJSONString(date, "iso8601"))
assertEquals("\"2017-08-15T20:00:00+08:00\"", JSON.toJSONString(date, "iso8601"))
assertEquals(1, list.size())
assertEquals(Model.class, list.get(0).getClass())
assertEquals("{\"_parentId\":\"001\"}", test)
assertEquals("{\"_parentId\":\"001\"}", testB)
assertEquals("{\"type\":\"TypeA\"}", text)
assertEquals(123, ((JSONObject) t).getIntValue("id"))
assertEquals(123, t1.id)
assertEquals(123, t2.id)
assertEquals("{}", test)
assertEquals("{\"ab\":{}}", testC)
assertEquals("{\"ab\":{}}", testD)
assertTrue(jsonString.contains("Mike"))
assertEquals("[\"a\",\"b\",\"\",\"d\",\"\"]", json)
assertNotNull(floorV2)
assertNotNull(floorV2.templateId)
assertEquals("x123", floorV2.templateId)
assertEquals("floorV2", floorV2.type)
assertEquals("{\"type\":\"floorV2\",\"templateId\":\"x123\"}", json2)
assertNotNull(floorV2)
assertEquals("x123", floorV2.templateId)
assertNotNull(model.getDate())
assertNotNull(model.date)
assertNotNull(model.date)
assertNotNull(floorV2)
assertNotNull(floorV2.templateId)
assertEquals("x123", floorV2.templateId)
assertEquals("floorV2", floorV2.type)
assertEquals("{\"type\":\"floorV2\",\"templateId\":\"x123\"}", json2)
assertEquals(e.getCode(), e1.getCode())
assertEquals(e.getMessage(), e1.getMessage())
assertEquals('c', tb1.getC())
assertEquals('c', tb2.getC().charValue())
assertEquals('c', tb12.getC())
assertEquals('c', tb22.getC().charValue())
assertEquals("{\"id\":1,\"nt\":\"name\"}", jsonString)
assertTrue(parsed instanceof JSONObject)
assertEquals(JSONObject.class, ((JSONObject) parsed).get("data").getClass())
assertNotNull(result.data)
assertTrue(result.data instanceof Data)
assertNotNull(result2.data)
assertTrue(result2.data instanceof List)
assertEquals(0, result2.data.size())
fail("should be failed due to error json")
assertEquals("{\"REQ_NO\":\"123\"}", JSON.toJSONString(model))
assertNull(test.idType)
assertNull(test.userType)
assertEquals("123", bean.getValue())
assertEquals(false, bean.isBig())
assertEquals(123, bean.getIntValue())
assertEquals(true, bean.isBig())
assertEquals(567, bean.getID())
assertNotNull(error)
assertNotNull(error)
assertNotNull(error)
assertNotNull(error)
assertNotNull(error)
assertNotNull(error)
assertNotNull(error)
assertNotNull(error)
assertNotNull(error)
assertNotNull(config.creator)
assertNull(config.agent)
assertNotNull(config.creator)
assertNull(config.agent)
assertFalse(JSONValidator.from(body).validate())
assertNotNull(config.creator)
assertNull(config.agent)
assertNotNull(config.creator)
assertNull(config.agent)
assertNotNull(config.creator)
assertNull(config.agent)
assertNotNull(config.creator)
assertNull(config.agent)
assertEquals("{\"path\":\"E:/my-code/test/test-fastjson.txt\"}", json)
assertEquals(fileSystemResource.getPath(), fsr1.getPath())
assertEquals(0, fileSystemResource.getFile().length())
fail("should be failed due to error json", "A execução falhou por uma causa deliberada")
assertEquals("{\"agent\":null,\"creator\":{\"account\":\"account\",\"name\":\"name\",\"workid\":\"\"},\"owner\":{\"account\":\"account\",\"name\":\"name\",\"workid\":\"\"}}", s)
assertNotNull(config.creator)
assertNull(config.agent)
assertEquals("{\"path\":\"E:/my-code/test/test-fastjson.txt\"}", json)
assertEquals(fileSystemResource.getPath(), fsr1.getPath())
assertEquals(0, fileSystemResource.getFile().length())
assertEquals("{\"value\":" + v.getValue().getTime() + "}", text)
assertEquals("{\"value\":" + v.getValue().getTime() + "}", text)
assertEquals("{\"value\":null}", text)
assertEquals(v1.getValue(), v.getValue())
assertEquals("{\"value\":null}", text)
assertEquals(null, v1.getValue())
assertEquals("{}", JSON.toJSONString(model))
assertEquals("{\"value\":\"\"}", JSON.toJSONString(model, JSONWriter.Feature.NullAsDefaultValue))
assertEquals("{}", JSON.toJSONString(model))
assertEquals("{\"value\":0}", JSON.toJSONString(model, JSONWriter.Feature.NullAsDefaultValue))
assertEquals("{}", JSON.toJSONString(model))
assertEquals("{\"value\":0}", JSON.toJSONString(model, JSONWriter.Feature.NullAsDefaultValue))
assertEquals("{}", JSON.toJSONString(model))
assertEquals("{\"value\":false}", JSON.toJSONString(model, JSONWriter.Feature.NullAsDefaultValue))
assertEquals("{}", JSON.toJSONString(model))
assertEquals("{\"value\":[]}", JSON.toJSONString(model, JSONWriter.Feature.NullAsDefaultValue))
Assertions.assertEquals(expectedStr, actualStr)
Assertions.assertEquals(expectedBean.getId(), actualBean.getString("id"))
Assertions.assertEquals(expectedBean.getNetValueDate(), actualBean.getInteger("net_value_date"))
assertEquals("{\"userName\":\"test\",\"user_id\":1001}", text)
assertEquals(1001, model2.userId)
assertEquals("test", model2.userName)
assertEquals("{\"userName\":\"test\",\"user_id\":\"1001\"}", text)
assertEquals(1001, model2.userId)
assertEquals("test", model2.userName)
assertEquals("{\"endTime\":\"2017-11-14\",\"startTime\":\"2017-11-04\"}", text)
assertEquals("{\"endTime\":\"2017-11-14\",\"startTime\":\"2017-11-04\"}", text)
assertEquals("aa", aa1.getName())
assertEquals("Aa", c2.getE().getClass().getSimpleName())
assertEquals("aa", ((Aa) c2.getE()).getName())
assertEquals("{}", JSON.toJSONString(model))
assertEquals("{\"value\":\"\"}", JSON.toJSONString(model, JSONWriter.Feature.NullAsDefaultValue))
assertEquals("{}", JSON.toJSONString(model))
assertEquals("{\"value\":\"\"}", JSON.toJSONString(model, JSONWriter.Feature.WriteNullStringAsEmpty))
assertEquals("{}", JSON.toJSONString(model))
assertEquals("{\"value\":0}", JSON.toJSONString(model, JSONWriter.Feature.WriteNullNumberAsZero))
assertEquals("{}", JSON.toJSONString(model))
assertEquals("{\"value\":0}", JSON.toJSONString(model, JSONWriter.Feature.WriteNullNumberAsZero))
assertEquals("{}", JSON.toJSONString(model))
assertEquals("{\"value\":false}", JSON.toJSONString(model, JSONWriter.Feature.WriteNullBooleanAsFalse))
assertEquals("{}", JSON.toJSONString(model))
assertEquals("{\"value\":[]}", JSON.toJSONString(model, JSONWriter.Feature.WriteNullListAsEmpty))
assertEquals("{\"old_value\":\"xx\"}", json)
assertEquals("{\"old_value\":\"xx\"}", json)
assertEquals("{\"old_value\":\"xx\"}", json)
assertEquals("{\"old_value\":\"xx\"}", json)
assertEquals("{\"@type\":\"java.util.HashMap\",\"null\":{\"@type\":\"com.alibaba.fastjson2.v1issues.issue_1500.Issue1503$Bean\"}}", json)
assertNotNull(newsDetail)
assertEquals(138042533, person.Id)
assertEquals("example", person.name)
assertEquals(172.0D, person.height)
assertSame(Size.Big, JSON.parseObject("\"Big\"", Size.class))
assertSame(Size.Big, JSON.parseObject("\"big\"", Size.class))
assertNull(JSON.parseObject("\"Large\"", Size.class))
assertSame(Size.LL, JSON.parseObject("\"L3\"", Size.class))
assertSame(Size.Small, JSON.parseObject("\"Little\"", Size.class))
assertSame(Size.Small, model.size)
assertEquals("[1001,null]", json)
assertEquals("[1001,null]", json)
assertNotNull(model.val)
assertNotNull(model.val)
assertNotNull(model.val)
assertNotNull(model.val)
assertNotNull(model.val)
assertNotNull(model.val)
assertNotNull(model.val)
assertEquals("{\"address\":\"localhost\",\"port\":3306}", str)
assertEquals(address1.getAddress(), address.getAddress())
assertEquals(address1.getPort(), address.getPort())
assertEquals(TestUtils.encodeToBase64String(entity.getValue(), false), json.getString("value"))
assertEquals("中华人民共和国", new String(entity2.getValue(), "UTF-8"))
assertNotNull(m1)
assertNotNull(m2)
assertEquals(-0.012671709D, m1.v1)
assertEquals(0.22676692048907365D, m1.v2)
assertEquals(0.13231707D, m1.v3)
assertEquals(0.80090785D, m1.v4)
assertEquals(0.6192943D, m1.v5)
assertEquals(-0.012671709D, m2.v1)
assertEquals(0.22676692048907365D, m2.v2)
assertEquals(0.13231707D, m2.v3)
assertEquals(0.80090785D, m2.v4)
assertEquals(0.6192943D, m2.v5)
assertNotNull(m1)
assertNotNull(m2)
assertEquals(-0.012671709D, m1.v1)
assertEquals(0.22676692048907365D, m1.v2)
assertEquals(0.13231707D, m1.v3)
assertEquals(0.80090785D, m1.v4)
assertEquals(0.6192943D, m1.v5)
assertEquals(-0.012671709D, m2.v1)
assertEquals(0.22676692048907365D, m2.v2)
assertEquals(0.13231707D, m2.v3)
assertEquals(0.80090785D, m2.v4)
assertEquals(0.6192943D, m2.v5)
assertNotNull(model)
assertEquals(0, model.v1)
assertEquals(0, model.v2)
assertNotNull(model)
assertEquals(0, model.v1)
assertEquals(0, model.v2)
assertNotNull(model)
assertEquals(0, model.v1)
assertEquals(0, model.v2)
assertNotNull(model)
assertNull(model.v1)
assertNull(model.v2)
assertNotNull(model)
assertNull(model.v1)
assertNull(model.v2)
assertNotNull(model)
assertNull(model.v1)
assertNull(model.v2)
assertNotNull(model)
assertNull(model.v1)
assertNull(model.v2)
assertNotNull(model)
assertNull(model.v1)
assertNull(model.v2)
assertEquals("{\"id1\":\"-9223370018640066466\",\"id2\":\"9223370018640066466\",\"id3\":100}", JSON.toJSONString(map, JSONWriter.Feature.BrowserCompatible))
assertNotNull(m1)
assertNotNull(m2)
assertEquals(-1883391953414482124L, m1.v1.longValue())
assertEquals(-3019416596934963650L, m1.v2.longValue())
assertEquals(6497525620823745793L, m1.v3.longValue())
assertEquals(2136224289077142499L, m1.v4.longValue())
assertEquals(-2090575024006307745L, m1.v5.longValue())
assertEquals(-1883391953414482124L, m2.v1.longValue())
assertEquals(-3019416596934963650L, m2.v2.longValue())
assertEquals(6497525620823745793L, m2.v3.longValue())
assertEquals(2136224289077142499L, m2.v4.longValue())
assertEquals(-2090575024006307745L, m2.v5.longValue())
assertEquals(values_2.length, values.length)
assertNotNull(m1)
assertNotNull(m2)
assertEquals(-1883391953414482124L, m1.v1)
assertEquals(-3019416596934963650L, m1.v2)
assertEquals(6497525620823745793L, m1.v3)
assertEquals(2136224289077142499L, m1.v4)
assertEquals(-2090575024006307745L, m1.v5)
assertEquals(-1883391953414482124L, m2.v1)
assertEquals(-3019416596934963650L, m2.v2)
assertEquals(6497525620823745793L, m2.v3)
assertEquals(2136224289077142499L, m2.v4)
assertEquals(-2090575024006307745L, m2.v5)
assertEquals("{\"value\":\"9007199254741992\"}", JSON.toJSONString(new Model(9007199254741992L)))
assertEquals("{\"value\":\"-9007199254741992\"}", JSON.toJSONString(new Model(-9007199254741992L)))
assertEquals("{\"value\":9007199254740990}", JSON.toJSONString(new Model(9007199254740990L)))
assertEquals("{\"value\":-9007199254740990}", JSON.toJSONString(new Model(-9007199254740990L)))
assertEquals("{\"value\":100}", JSON.toJSONString(new Model(100)))
assertEquals("{\"value\":-100}", JSON.toJSONString(new Model(-100)))
assertNotNull(m1)
assertNotNull(m2)
assertEquals(-0.012671709f, m1.v1)
assertEquals(0.6042485f, m1.v2)
assertEquals(0.13231707f, m1.v3)
assertEquals(0.80090785f, m1.v4)
assertEquals(0.6192943f, m1.v5)
assertEquals(-0.012671709f, m2.v1)
assertEquals(0.6042485f, m2.v2)
assertEquals(0.13231707f, m2.v3)
assertEquals(0.80090785f, m2.v4)
assertEquals(0.6192943f, m2.v5)
assertNotNull(m1)
assertNotNull(m2)
assertEquals(-0.012671709f, m1.v1)
assertEquals(0.6042485f, m1.v2)
assertEquals(0.13231707f, m1.v3)
assertEquals(0.80090785f, m1.v4)
assertEquals(0.6192943f, m1.v5)
assertEquals(-0.012671709f, m2.v1)
assertEquals(0.6042485f, m2.v2)
assertEquals(0.13231707f, m2.v3)
assertEquals(0.80090785f, m2.v4)
assertEquals(0.6192943f, m2.v5)
assertNotNull(model)
assertNull(model.v1)
assertNull(model.v2)
assertNotNull(model)
assertNull(model.v1)
assertNull(model.v2)
assertNotNull(model)
assertNull(model.v1)
assertNull(model.v2)
assertNotNull(model)
assertNull(model.v1)
assertNull(model.v2)
assertNotNull(model)
assertNull(model.v1)
assertNull(model.v2)
assertNotNull(m1)
assertNotNull(m2)
assertEquals(-0.012671709D, m1.v1)
assertEquals(0.22676692048907365D, m1.v2)
assertEquals(0.13231707D, m1.v3)
assertEquals(0.80090785D, m1.v4)
assertEquals(0.6192943D, m1.v5)
assertEquals(-0.012671709D, m2.v1)
assertEquals(0.22676692048907365D, m2.v2)
assertEquals(0.13231707D, m2.v3)
assertEquals(0.80090785D, m2.v4)
assertEquals(0.6192943D, m2.v5)
assertNotNull(m1)
assertNotNull(m2)
assertEquals(-0.012671709D, m1.v1)
assertEquals(0.22676692048907365D, m1.v2)
assertEquals(0.13231707D, m1.v3)
assertEquals(0.80090785D, m1.v4)
assertEquals(0.6192943D, m1.v5)
assertEquals(-0.012671709D, m2.v1)
assertEquals(0.22676692048907365D, m2.v2)
assertEquals(0.13231707D, m2.v3)
assertEquals(0.80090785D, m2.v4)
assertEquals(0.6192943D, m2.v5)
assertEquals("{\"value\":\"9007199254741992\"}", JSON.toJSONString(new Model(9007199254741992L)))
assertEquals("{\"value\":\"-9007199254741992\"}", JSON.toJSONString(new Model(-9007199254741992L)))
assertEquals("{\"value\":9007199254740990}", JSON.toJSONString(new Model(9007199254740990L)))
assertEquals("{\"value\":-9007199254740990}", JSON.toJSONString(new Model(-9007199254740990L)))
assertEquals("{\"value\":100}", JSON.toJSONString(new Model(100)))
assertEquals("{\"value\":-100}", JSON.toJSONString(new Model(-100)))
assertEquals("{\"id1\":\"9223370018640066466\",\"id2\":\"9223370018640066466\"}", JSON.toJSONString(map, JSONWriter.Feature.BrowserCompatible))
assertNotNull(model)
assertNull(model.v1)
assertNull(model.v2)
assertNotNull(model)
assertNull(model.v1)
assertNull(model.v2)
assertNotNull(model)
assertNull(model.v1)
assertNull(model.v2)
assertNotNull(model)
assertNull(model.v1)
assertNull(model.v2)
assertNotNull(model)
assertNull(model.v1)
assertNull(model.v2)
assertEquals(values_2.length, values.length)
assertEquals(val, m.value)
assertEquals(val, m.value)
assertEquals(val, m.value)
assertEquals("{\"value\":0.21474836515489015}", str)
assertEquals(Double.parseDouble(str), JSONReader.of(str).readDoubleValue())
assertEquals(Double.parseDouble(str), JSONReader.of(str).readDoubleValue())
assertEquals(values_2.length, values.length)
assertNotNull(model)
assertNull(model.v1)
assertNull(model.v2)
assertNotNull(model)
assertNull(model.v1)
assertNull(model.v2)
assertNotNull(model)
assertNull(model.v1)
assertNull(model.v2)
assertNotNull(model)
assertNull(model.v1)
assertNull(model.v2)
assertNotNull(model)
assertNull(model.v1)
assertNull(model.v2)
assertNotNull(m1)
assertNotNull(m2)
assertEquals(-0.012671709f, m1.v1)
assertEquals(0.6042485f, m1.v2)
assertEquals(0.13231707f, m1.v3)
assertEquals(0.80090785f, m1.v4)
assertEquals(0.6192943f, m1.v5)
assertEquals(-0.012671709f, m2.v1)
assertEquals(0.6042485f, m2.v2)
assertEquals(0.13231707f, m2.v3)
assertEquals(0.80090785f, m2.v4)
assertEquals(0.6192943f, m2.v5)
assertNotNull(m1)
assertNotNull(m2)
assertEquals(-0.012671709f, m1.v1)
assertEquals(0.6042485f, m1.v2)
assertEquals(0.13231707f, m1.v3)
assertEquals(0.80090785f, m1.v4)
assertEquals(0.6192943f, m1.v5)
assertEquals(-0.012671709f, m2.v1)
assertEquals(0.6042485f, m2.v2)
assertEquals(0.13231707f, m2.v3)
assertEquals(0.80090785f, m2.v4)
assertEquals(0.6192943f, m2.v5)
assertNotNull(model)
assertEquals(0, model.v1)
assertEquals(0, model.v2)
assertNotNull(model)
assertEquals(0, model.v1)
assertEquals(0, model.v2)
assertNotNull(model)
assertEquals(0, model.v1)
assertEquals(0, model.v2)
assertNotNull(model)
assertEquals(0D, model.v1)
assertEquals(0D, model.v2)
assertNotNull(model)
assertEquals(0D, model.v1)
assertEquals(0D, model.v2)
assertNotNull(model)
assertEquals(0D, model.v1)
assertEquals(0D, model.v2)
assertNotNull(model)
assertEquals(0F, model.v1)
assertEquals(0F, model.v2)
assertNotNull(model)
assertEquals(0F, model.v1)
assertEquals(0F, model.v2)
assertNotNull(model)
assertEquals(0F, model.v1)
assertEquals(0F, model.v2)
assertEquals("{\"num\":0.00000001}", json)
assertNotNull(testJsons)
assertEquals(2, testJsons.size())
assertEquals("1", testJsons.get(0).test1)
assertEquals("aaa", JSONPath.eval(object, "$.EXTINFO.bct_loan_account_status\\[15\\]"))
assertEquals("aaa", result.toString())
assertEquals(1548166745000L, o.createTime.getTime())
assertEquals("{\"createTime\":1548166745}", json)
assertEquals(1548166745000L, order1.createTime.getTime())
assertEquals(1548166745000L, order2.createTime.getTime())
assertEquals("{\"ddd\":\"sdfsd\",\"id\":\"ss\",\"name\":\"hh\"}", JSON.toJSONString(news))
assertNotNull(growthList)
assertFalse(JSONPath.contains(rootObject, sizePath))
assertFalse(JSONPath.contains(rootObject, lengthPath))
assertFalse(JSONPath.contains(rootObject, "item"))
assertEquals(Double.POSITIVE_INFINITY, JSON.parseObject(str).get("num"))
assertEquals(Double.POSITIVE_INFINITY, JSON.parseObject(chars).get("num"))
assertEquals(Double.POSITIVE_INFINITY, JSON.parseObject(bytes).get("num"))
assertEquals(Double.POSITIVE_INFINITY, JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.UTF_8).get("num"))
assertEquals(Double.POSITIVE_INFINITY, JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.ISO_8859_1).get("num"))
assertEquals(Double.POSITIVE_INFINITY, JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.US_ASCII).get("num"))
assertEquals(Double.POSITIVE_INFINITY, new JSONReaderStr(str).readObject().get("num"))
assertEquals("{\"testDate\":\"2022-10-01 00:00:00\"}", JSON.toJSONString(demoDto))
assertEquals("{\"ID\":1,\"NAME\":\"joker\",\"PWD\":\"123@321\",\"TIME\":\"20221112\",\"TIME2\":\"20221112\"}", beanToJsonStr)
assertEquals("[{\"id\":\"a\",\"name\":\"an\"},{\"id\":\"b\",\"name\":\"bn\"}]", JSONPath.eval(JSON.parseObject(jsonString, JSONReader.Feature.AllowUnQuotedFieldNames), "$..view").toString())
assertEquals("[{\"id\":\"a\",\"name\":\"an\"},{\"id\":\"b\",\"name\":\"bn\"}]", JSONPath.eval(JSON.parseObject(errorJsonString, JSONReader.Feature.AllowUnQuotedFieldNames), "$..view").toString())
assertEquals("[\"RE1220045\",\"203\",1,\"RE1220045\"]", JSON.toJSONString(list, JSONWriter.Feature.ReferenceDetection))
assertEquals(dto.createTime, dto2.createTime)
assertEquals(dto.createTime, dto2.createTime)
assertEquals(dto.createTime, dto2.createTime)
assertEquals(dto.createTime, dto2.createTime)
assertEquals(dto.createTime, dto2.createTime)
assertEquals(dto.createTime, dto2.createTime)
assertEquals(dto.createTime, dto2.createTime)
assertEquals(dto.createTime, dto2.createTime)
assertEquals(0, m.values.size())
assertEquals(0, m.values.size())
assertNotNull(user)
assertEquals(1, list.size())
assertEquals(1001, item.modelId)
assertEquals(1001, item.modelId)
assertEquals(0, m.values.size())
assertEquals(0, m.values.size())
assertEquals(0, m.values.size())
assertEquals(2L, book.bookId.longValue())
assertEquals("浪漫奇侠", book.bookName)
assertEquals("雨天不打伞", book.authorName)
assertEquals(4536, book.wordCount.intValue())
assertEquals("{\"color\":\"\",\"productCity\":\"\",\"size\":0}", json)
assertEquals("{\"values\":[\"2017-12-20\"]}", json)
assertEquals("{\"color\":\"\",\"productCity\":\"\",\"size\":0}", json)
assertEquals(1324138987429L, time.getTime())
assertEquals("{\"a\":1001}", new String(bytes))
assertEquals("{\"a\":1001}", new String(bytes))
assertEquals("{\"a\":1001}", new String(bytes))
assertEquals(0, m.values.size())
assertEquals(0, m.values.size())
assertEquals(0, map.size())
assertEquals(0, m.values.size())
assertEquals(0, m.values.size())
assertEquals(0, m.values.size())
assertTrue(JSONPath.of("$." + escapeString(s)).contains(o))
assertEquals("\"2018-01-10T08:30:00+08:00\"", jsonWriter.toString())
assertEquals(2L, book.bookId.longValue())
assertEquals("浪漫奇侠", book.bookName)
assertEquals("雨天不打伞", book.authorName)
assertEquals(4536, book.wordCount.intValue())
assertEquals(0, m.values.size())
assertEquals(0, m.values.size())
assertEquals(0, m.values.size())
assertEquals("{\"value\":x'414243444547'}", json)
assertArrayEquals(model.value, model1.value)
assertNull(o.getMessage())
assertEquals(0, array.getByteValue(0))
assertEquals(0, array.getShortValue(0))
assertTrue(0F == array.getFloatValue(0))
assertTrue(0D == array.getDoubleValue(0))
assertEquals(new BigInteger("1"), array.getBigInteger(1))
assertEquals("1", array.getString(1))
assertEquals(new java.util.Date(time), array.getDate(2))
assertEquals(0, array2.getByteValue(0))
assertEquals(0, array2.getShortValue(0))
assertTrue(0F == array2.getFloatValue(0))
assertTrue(0D == array2.getDoubleValue(0))
assertEquals(new BigInteger("1"), array2.getBigInteger(1))
assertEquals("1", array2.getString(1))
assertEquals(new java.util.Date(time), array2.getDate(2))
assertEquals(array2.size(), array2.size())
assertNotNull(error)
assertNotNull(error)
assertSame(EnumClass.A, JSON.parseObject("1", EnumClass.class))
assertSame(EnumClass.B, JSON.parseObject("2", EnumClass.class))
assertSame(EnumClass.A, JSON.parseObject("{\"code\":1}", Model.class).code)
assertSame(EnumClass.B, JSON.parseObject("{\"code\":2}", Model.class).code)
assertEquals("{\"@type\":\"com.alibaba.fastjson2.v1issues.issue_2000.Issue2012$Model\",\"bytes\":[]}", str)
assertEquals(0, foo.bytes.length)
assertSame(AccessLevel.DEVELOPER, model.accessLevel)
assertEquals("{\"groupAccess\":{\"accessLevel\":50,\"notificationLevel\":3}}", json2)
assertEquals("{\"a\":[\"1\",\"b\"],\"b\":[\"1\"]}", json)
assertNull(JSON.parseObject("{\"code\":0}", Model.class).code)
assertNotNull(error)
assertNull(JSON.parseObject("0", EnumClass.class))
assertNotNull(error)
assertSame(EnumClass.A, JSON.parseObject("1", EnumClass.class))
assertSame(EnumClass.A, JSON.parseObject("{\"code\":1}", Model.class).code)
assertEquals("{\"latitude\":37,\"longitude\":127,\"id\":123}", text)
assertEquals("{\"latitude\":37,\"longitude\":127,\"id\":123}", text)
assertEquals("{\"map\":{\"a\":[\"1\",\"2\",\"3\"],\"b\":[\"1\"]},\"name\":\"zhangsan\"}", JSON.toJSONString(vo))
assertEquals("{\"map\":{\"a\":[\"1\",\"2\",\"3\"],\"b\":[\"1\"]},\"name\":\"zhangsan\"}", JSON.toJSONString(vo))
assertEquals("{\"my_name\":\"test name\",\"nested_bean\":{\"my_id\":\"test id\"}}", text)
assertEquals(2, array.size())
assertNull(array.get(0))
assertEquals("1001", array.get(1))
assertEquals(0, array.size())
assertEquals(1, array.size())
assertEquals("1001", array.get(0))
assertEquals(0, array.size())
assertEquals(0, array.size())
assertEquals(0, array.size())
assertEquals(2, array.size())
assertNull(array.get(0))
assertEquals("1001", array.get(1))
assertEquals(0, array.size())
assertEquals(3, array.size())
assertEquals(1, array.size())
assertEquals("1002", array.get(0))
assertTrue(error.getMessage().startsWith("invalid escape character"))
assertTrue(error.getMessage().startsWith("invalid escape character"))
assertTrue(error.getMessage().startsWith("invalid escape character"))
assertTrue(error.getMessage().startsWith("invalid escape character"))
assertTrue(error.getMessage().startsWith("invalid escape character"))
assertTrue(error.getMessage().startsWith("invalid escape character"))
assertTrue(error.getMessage().startsWith("invalid escape character"))
assertTrue(error.getMessage().startsWith("invalid escape character"))
assertTrue(error.getMessage().startsWith("invalid escape character"))
assertEquals("您的预约已经超时", list.get("body"))
assertEquals("[{\"name\":\"mark-ace\"}]", JSON.toJSONString(params, new Filter[] { contextValueFilter }))
assertEquals("[{\"name\":\"ace\"}]", JSON.toJSONString(params, new Filter[] { valueFilter }))
assertEquals(0D, object.getDoubleValue("val"))
assertEquals(0F, object.getFloatValue("val"))
assertEquals(0, object.getIntValue("val"))
assertEquals(0L, object.getLongValue("val"))
assertEquals((short) 0, object.getShortValue("val"))
assertEquals((byte) 0, object.getByteValue("val"))
assertEquals(false, object.getBooleanValue("val"))
assertEquals("string", object.name)
assertEquals(1, object.code)
assertEquals("pinyin", object.pinyin)
assertEquals(null, object.name)
assertEquals(0, object.code)
assertEquals(MyEnum.Test1, test.getMyEnum())
assertEquals(1, test.value)
assertNotNull(model.value)
assertEquals("string", object.name)
assertEquals(1, object.code)
assertEquals("pinyin", object.pinyin)
assertNull(object.name)
assertEquals(0, object.code)
assertEquals(jsonStr, JSON.toJSONString(obj))
assertNotNull(obj.value1)
assertEquals(jsonStr, JSON.toJSONString(obj))
assertEquals("{\"goodsList\":[{\"properties\":[{}]}]}", json)
assertNotNull(n)
assertNotNull(n.getGoodsList())
assertNotNull(n.getGoodsList().get(0))
assertNotNull(n.getGoodsList().get(0).getProperties())
assertEquals("{\"value\":\"a\"}", JSON.toJSONString(model))
assertEquals("a", model2.value)
assertEquals("{\"value\":\"a\"}", JSON.toJSONString(model))
assertEquals("a", model2.value)
assertTrue(json.indexOf("\\") < 0)
assertNotNull(model.val)
assertNotNull(model.val)
assertNotNull(model.val)
assertNotNull(model.val)
assertNotNull(model.val)
assertNotNull(model.val)
assertNotNull(model.val)
assertEquals(MyEnum.Test1, test.getMyEnum())
assertEquals(1, test.value)
assertEquals(JSON.toJSONString(enumMap), "{\"C\":\"D\",\"E\":\"A\"}")
assertEquals("21496a63f5", image.id)
assertEquals("http://hl-img.peco.uodoo.com/hubble-test/app/sm/e9b884c1dcd671f128bac020e070e273.jpg;,,JPG;3,208x", image.url)
assertEquals("", image.title)
assertEquals("JPG", image.type)
assertEquals(400, image.optimalWidth)
assertEquals(267, image.optimalHeight)
assertEquals("http://hl-img.peco.uodoo.com/hubble-test/app/sm/e9b884c1dcd671f128bac020e070e273.jpg", image.original_save_url)
assertEquals("62717D190987A7AE", image.phash)
assertEquals("{\"value\":\"a\"}", JSON.toJSONString(model))
assertEquals("a", model2.value)
assertEquals("{\"value\":\"a\"}", JSON.toJSONString(model))
assertEquals("a", model2.value)
assertEquals("{\"id\":1,\"value\":\"a\"}", JSON.toJSONString(model))
assertEquals("a", model2.value)
assertEquals(1.0d, total)
assertEquals("{\"id\":0}", JSON.toJSONString(object))
assertEquals("{\"id\":0}", JSON.toJSONString(mockObj))
assertEquals("{\n" + "\t\"head\":{\n" + "\t\t\"requestTime\":\"1654070371884\",\n" + "\t\t\"merchantcode\":\"111\",\n" + "\t\t\"ticket\":\"111\",\n" + "\t\t\"version\":\"1.0.0\"\n" + "\t},\n" + "\t\"body\":{\n" + "\t\t\"phone\":\"111\",\n" + "\t\t\"type\":\"1\",\n" + "\t\t\"ticket\":\"\"\n" + "\t},\n" + "\t\"sign\":\"111\"\n" + "}", JSON.parseObject(json).toString(JSONWriter.Feature.PrettyFormat))
assertEquals("{\"date\":\"2022-06-01\",\"time\":\"13:13:13\"}", str)
assertNull(readResult)
assertNull(readResult)
assertNull(readResult)
assertNull(readResult)
assertEquals(30, model.getAge())
assertNotNull(floorV2)
assertEquals("x123", floorV2.templateId)
assertSame(1, result.size())
assertSame(order.books.get(1), result.get(0))
assertEquals(2, result.size())
assertSame(order.books.get(1), result.get(0))
assertSame(order.books.get(2), result.get(1))
assertEquals(2, result.size())
assertSame(order.books.get(0), result.get(0))
assertSame(order.books.get(1), result.get(1))
assertEquals("{\"value\":\"9007199254741992\"}", str)
assertEquals("{\"value\":\"9007199254741992\"}", str)
assertEquals("{\"value\":\"9007199254741992\"}", str)
assertEquals(-14189155200000L, date.getTime())
assertEquals(-14189155200000L, m.time.getTime())
assertEquals("{\"value\":\"9007199254741992\"}", JSON.toJSONString(new Model(9007199254741992L)))
assertEquals("{\"value\":\"9007199254741990\"}", JSON.toJSONString(new Model(9007199254741990L)))
assertEquals("{\"value\":100}", JSON.toJSONString(new Model(100L)))
assertEquals("{\"value\":\"-9007199254741990\"}", JSON.toJSONString(new Model(-9007199254741990L)))
assertEquals("{\"value\":-9007199254740990}", JSON.toJSONString(new Model(-9007199254740990L)))
assertEquals("{\"value\":\"9007199254741992\"}", JSON.toJSONString(new Model(9007199254741992L), JSONWriter.Feature.BrowserCompatible))
assertEquals("{\"value\":\"-9007199254741992\"}", JSON.toJSONString(new Model(-9007199254741992L), JSONWriter.Feature.BrowserCompatible))
assertEquals("{\"value\":9007199254740990}", JSON.toJSONString(new Model(9007199254740990L), JSONWriter.Feature.BrowserCompatible))
assertEquals("{\"value\":-9007199254740990}", JSON.toJSONString(new Model(-9007199254740990L), JSONWriter.Feature.BrowserCompatible))
assertEquals("{\"value\":100}", JSON.toJSONString(new Model(100), JSONWriter.Feature.BrowserCompatible))
assertEquals("{\"value\":-100}", JSON.toJSONString(new Model(-100), JSONWriter.Feature.BrowserCompatible))
assertEquals(FieldEnum.A, bean.enumField)
assertEquals(0.9390308260917664F, user.age)
assertEquals(8.200000000000001F, user.age)
assertEquals(8.200000000000001F, user.age)
assertEquals("{\"value\":\"9007199254741992\"}", JSON.toJSONString(new Model(9007199254741992L)))
assertEquals("{\"value\":\"-9007199254741992\"}", JSON.toJSONString(new Model(-9007199254741992L)))
assertEquals("{\"value\":9007199254740990}", JSON.toJSONString(new Model(9007199254740990L)))
assertEquals("{\"value\":-9007199254740990}", JSON.toJSONString(new Model(-9007199254740990L)))
assertEquals("{\"value\":100}", JSON.toJSONString(new Model(100)))
assertEquals("{\"value\":-100}", JSON.toJSONString(new Model(-100)))
assertEquals("张三", user.getName())
assertNotNull(user.getBirthday())
assertEquals("张三", user.getName())
assertNotNull(user.getBirthday())
assertEquals("{\"value\":\"9007199254741992\"}", JSON.toJSONString(new Model(9007199254741992L)))
assertEquals("{\"value\":\"-9007199254741992\"}", JSON.toJSONString(new Model(-9007199254741992L)))
assertEquals("{\"value\":9007199254740990}", JSON.toJSONString(new Model(9007199254740990L)))
assertEquals("{\"value\":-9007199254740990}", JSON.toJSONString(new Model(-9007199254740990L)))
assertEquals("{\"value\":100}", JSON.toJSONString(new Model(100)))
assertEquals("{\"value\":-100}", JSON.toJSONString(new Model(-100)))
assertEquals(d, 0.0D)
assertEquals(7, result.getModelList().size())
assertEquals(InteractiveOrderMaterielModel.class, result.getModelList().get(0).getClass())
assertEquals("{\"data\":{}}", json)
assertEquals("{}", json)
assertEquals(0, JSON.parseObject("{\"id\":false}", VO.class).id)
assertEquals(1, JSON.parseObject("{\"id\":true}", VO.class).id)
assertEquals(0, JSON.parseObject("{\"id64\":false}", VO.class).id64)
assertEquals(1, JSON.parseObject("{\"id64\":true}", VO.class).id64)
assertEquals(0, JSON.parseObject("{\"id16\":false}", VO.class).id16)
assertEquals(1, JSON.parseObject("{\"id16\":true}", VO.class).id16)
assertEquals(0, JSON.parseObject("{\"id8\":false}", VO.class).id8)
assertEquals(1, JSON.parseObject("{\"id8\":true}", VO.class).id8)
assertEquals(0F, JSON.parseObject("{\"floatValue\":false}", VO.class).floatValue)
assertEquals(1F, JSON.parseObject("{\"floatValue\":true}", VO.class).floatValue)
assertEquals(0D, JSON.parseObject("{\"doubleValue\":false}", VO.class).doubleValue)
assertEquals(1D, JSON.parseObject("{\"doubleValue\":true}", VO.class).doubleValue)
assertEquals(s, JSON.parseObject(s).toJSONString())
assertEquals(s1, JSON.parseObject(s1).toJSONString())
assertEquals(s2, JSON.parseObject(s2).toJSONString())
assertEquals(BigDecimal.valueOf(10.0), map.get("id"))
assertEquals(validateCode.getExpireTime(), backModel.getExpireTime())
assertNull(backModel.getExpireTime())
assertTrue(mapKey instanceof Integer)
assertNotNull(model.getAGe())
assertNotNull(model.getName())
assertTrue(object.containsKey(1))
assertTrue(object.containsKey("1"))
assertTrue(object.containsKey('A'))
assertTrue(object.containsKey("A"))
assertTrue(object.containsKey(true))
assertTrue(object.containsKey("true"))
assertTrue(object.containsKey(uuid))
assertTrue(object.containsKey(uuid.toString()))
assertEquals(123, JSON.parseObject("{\"user_id\":123}", VO.class).userId)
assertEquals(123, JSON.parseObject("{\"userId\":123}", VO.class).userId)
assertEquals(123, JSON.parseObject("{\"user-id\":123}", VO.class).userId)
assertEquals("Mon Jan 19 12:05:54 GMT+01:00 1970", model.getDate().toString())
assertTrue(jsonString.contains("因为相信，所以看见。"))
assertEquals("因为相信，所以看见。", modelBack.getMap().get("nanqi"))
assertEquals("1", object.get(1))
assertEquals("true", object.get(true))
assertEquals("A", object.get('A'))
assertEquals(validateCode.getExpireTime(), backModel.getExpireTime())
assertNull(backModel.getExpireTime())
assertEquals("{\"c\":\"0\",\"s\":\"str\"}", testJson)
assertEquals("[A{s='str', c=0}]", list.toString())
assertEquals("{\"$ref\":\"1\"}", innerObject.toString())
assertEquals("{1:2}", JSON.toJSONString(map))
assertEquals("{\"1\":2}", JSON.toJSONString(map, JSONWriter.Feature.WriteNonStringKeyAsString))
assertEquals("{1.23:2}", JSON.toJSONString(map))
assertEquals("{\"1.23\":2}", JSON.toJSONString(map, JSONWriter.Feature.WriteNonStringKeyAsString))
assertEquals("{1.23:2}", JSON.toJSONString(map))
assertEquals("{\"1.23\":2}", JSON.toJSONString(map, JSONWriter.Feature.WriteNonStringKeyAsString))
assertEquals("[\"tag1\",\"tag2\"]", r.toString())
assertEquals("{\"f0\":0,\"f1\":0,\"f2\":0}", json)
assertEquals("{\"id\":1001,\"name\":\"gaotie\"}", text_normal)
assertEquals("[1001,\"gaotie\"]", text_beanToArray)
assertEquals("\"\uD83C\uDDEB\uD83C\uDDF7\"", str)
assertNull(info.ids)
assertEquals("{\"id\":101}", json)
assertEquals("{\"a\":{\"x\":\"y2\"},\"b\":{\"x\":\"y2\"}}", result)
assertEquals("{\"list\":[{\"@type\":\"com.alibaba.fastjson2.v1issues.issue_1100.Issue1151$C\",\"id\":1001},{\"@type\":\"com.alibaba.fastjson2.v1issues.issue_1100.Issue1151$C\",\"id\":1002}]}", json)
assertSame(a2.list.get(0).getClass(), C.class)
assertEquals("{\n" + "\t\"host\":\"127.0.0.1\",\n" + "\t\"port\":3306,\n" + "\t\"user\":{\n" + "\t\t\"name\":\"jack\",\n" + "\t\t\"age\":20\n" + "\t},\n" + "\t\"admin\":{\n" + "\t\t\"name\":\"jack\",\n" + "\t\t\"age\":20\n" + "\t}\n" + "}", json)
assertEquals(result, jsonObject2)
assertNotNull(eval)
assertEquals("abc", JSONPath.eval(object, "$.123"))
assertEquals("abc", JSONPath.eval(object, "$.345_xiu"))
assertEquals("abc", JSONPath.eval(object, "$.345\\.xiu"))
assertEquals("{\"Dimension\":0,\"PassCode\":\"010\",\"BlockPos\":{\"x\":526,\"y\":65,\"z\":554}}", text)
assertEquals("{\"a\":{\"x\":\"y2\"},\"b\":{\"x\":\"y2\"}}", JSON.toJSONString(jsonObject))
assertNull(model.values)
assertNull(model.values)
assertEquals("{\"models\":[{\"x\":\"y2\"},{\"x\":\"y2\"}]}", JSON.toJSONString(root))
assertEquals("{\"__v\":3}", json)
assertEquals("{\"id\":101}", json)
assertEquals("[{\"x\":\"y2\"},{\"x\":\"y2\"}]", JSON.toJSONString(jsonObject))
assertArrayEquals(model.value, model1.value)
assertEquals("{\"a.b.c\":{\"y\":{\"2_wdk\":[{\"a\":100}]}},\"x\":{\"a\":100}}", s)
assertEquals("{\"a.b.c\":{\"y\":{\"2_wdk\":[{\"a\":100}]}},\"x\":{\"a\":100}}", JSON.toJSONString(revert))
assertEquals(com.alibaba.fastjson2.JSON.toJSONString(result), new com.google.gson.Gson().toJson(result))
assertEquals(nanos, 350000000)
assertEquals("{\"timestamp\":\"2019-09-19 08:49:52.350000000\"}", JSON.toJSONString(pojo))
assertEquals(nanos, 350000000)
assertEquals("{\"timestamp\":\"2019-09-19 08:49:52.350000000\"}", JSON.toJSONString(pojo))
assertEquals(10, jsonObject.getIntValue("qty"))
assertEquals(10, jsonObject.getIntValue("qty1"))
assertEquals(10, jsonObject.getIntValue("qty2"))
assertEquals(10, jsonObject.getInteger("qty"))
assertEquals(10, jsonObject.getInteger("qty1"))
assertEquals(10, jsonObject.getInteger("qty2"))
assertEquals(10, jsonObject.getLongValue("qty"))
assertEquals(10, jsonObject.getLongValue("qty1"))
assertEquals(10, jsonObject.getLongValue("qty2"))
assertEquals(10, jsonObject.getLong("qty"))
assertEquals(10, jsonObject.getLong("qty1"))
assertEquals(10, jsonObject.getLong("qty2"))
assertEquals(40, max)
assertEquals(30, min)
assertEquals(2, count)
assertEquals("v", entry.getValue().getValue())
assertEquals(nestedSet, deserializedNestedSet)
assertEquals(12304, vo.getId())
assertEquals("ljw", vo.getName())
assertEquals(12304, vo.getId())
assertEquals("ljw", vo.getName())
assertEquals(12304, vo.getId())
assertEquals("ljw", vo.getName())
assertNotNull(error)
assertEquals(12304, vo.getId())
assertEquals("ljw", vo.getName())
assertEquals(12304, vo.getId())
assertEquals("ljw", vo.getName())
assertNotNull(error)
assertEquals(12304, vo.getId())
assertEquals("ljw", vo.getName())
assertEquals(12304, vo.getId())
assertEquals("ljw", vo.getName())
assertEquals(12304, vo.getId())
assertEquals("ljw", vo.getName())
assertTrue(animal instanceof Cat)
assertEquals(1, cat.val)
assertEquals("[{\"name\":\"level3\",\"field\":\"leve3Field\",\"body\":{\"name\":\"level4\",\"field\":\"leve4Field\"}}]", JSON.toJSONString(result))
assertNull(JSON.toJavaObject(JSON.parseObject("{\"result\":\"\"}"), TestVO.class).result)
assertNull(JSON.toJavaObject(JSON.parseObject("{\"result\":\"null\"}"), TestVO.class).result)
assertEquals("1", JSON.toJSONString(new BigDecimal("1")))
assertEquals("1", JSON.toJSONString(new BigDecimal("1"), JSONWriter.Feature.WriteClassName))
assertTrue(JSON.isValid("{}"))
assertNotNull(bean.date)
assertNotNull(bean.date)
assertNotNull(bean.date)
assertFalse(JSON.isValid(chars))
assertFalse(JSON.isValid(bytes))
assertFalse(JSON.isValid(bytes, 0, bytes.length, StandardCharsets.US_ASCII))
assertFalse(JSON.isValid(bytes, 0, bytes.length, StandardCharsets.ISO_8859_1))
assertFalse(JSON.isValid(str))
assertEquals("{\"id1\":101,\"id2\":102,\"id3\":103}", JSON.toJSON(bean).toString())
assertEquals("{\"id1\":101,\"id2\":102,\"id3\":103}", JSON.toJSON(bean).toString())
assertEquals("[true]", JSON.toJSONString(new boolean[] { true }))
assertEquals("{\"value\":null}", text)
assertEquals(v1.getValue(), v.getValue())
assertEquals("{\"value\":[]}", text)
assertEquals("User{aBc='abc', ID='123456', date=Sun Apr 24 00:00:00 CST 2022}", user.toString())
assertEquals("User{aBc='abc', ID='null', date=null}", user1.toString())
assertTrue(JSON.isValidArray(json_string))
assertEquals("Array", JSONValidator.from(json_string).getType().toString())
assertTrue(JSON.isValidArray("[[]]"))
assertEquals("Array", JSONValidator.from("[[]]").getType().toString())
assertFalse(JSON.isValidArray("["))
assertFalse(JSON.isValidArray("[[]"))
assertFalse(JSON.isValid(str))
assertEquals("{\"class\":[{\"student2\":{\"sex\":\"male\",\"name\":\"jerry\"},\"student1\":{\"sex\":\"male\",\"name\":\"jerry\"}}]}", fastJSON)
assertEquals("test", issues.getName())
assertEquals(20, issues.getAge().intValue())
assertEquals("{\"age\":20}", JSON.toJSONString(issues))
assertEquals("test", issues.getName())
assertEquals(20, issues.getAge().intValue())
assertEquals("{\"age\":20}", JSON.toJSONString(issues))
assertNotNull(a1)
assertNotNull(paramRequest)
assertEquals(1, STRING_CODER.applyAsInt("中国"))
assertEquals("{\"f0\":{\"declaringClass\":\"com.alibaba.fastjson2.FieldTest$Service\",\"name\":\"field0\"},\"f1\":{\"declaringClass\":\"com.alibaba.fastjson2.FieldTest$Service\",\"name\":\"field1\"},\"target\":{\"field1\":0}}", string)
assertNotNull(invoker1)
assertEquals(invoker.f0, invoker1.f0)
assertEquals(invoker.f1, invoker1.f1)
assertEquals("[[\"com.alibaba.fastjson2.FieldTest$Service\",\"field0\"],[\"com.alibaba.fastjson2.FieldTest$Service\",\"field1\"],[null,0]]", string)
assertNotNull(invoker1)
assertEquals(invoker.f0, invoker1.f0)
assertEquals(invoker.f1, invoker1.f1)
assertNotNull(invoker1)
assertEquals(invoker.f0, invoker1.f0)
assertEquals(invoker.f1, invoker1.f1)
assertNotNull(invoker1)
assertEquals(invoker.f0, invoker1.f0)
assertEquals(invoker.f1, invoker1.f1)
assertEquals("101", str)
assertTrue(context.isEnabled(JSONReader.Feature.UseNativeObject))
assertSame(defaultTimeZone, context.getTimeZone())
assertSame(china, context.getLocale())
assertSame(zoneId, context.getZoneId())
assertEquals(0, context.getFeatures())
assertNull(context.getDateFormatter())
assertNull(context.getObjectSupplier())
assertNull(context.getArraySupplier())
assertArrayEquals(bean.value, bean1.value)
assertArrayEquals(bean.value, bean2.value)
assertNotNull(temperature)
assertEquals(new BigDecimal("24.4801"), temperature.value)
assertNotNull(bean)
assertEquals("{\"id\":123,\"latitude\":37,\"longitude\":127}", text)
assertNotNull(vo2.properties)
assertEquals(37, vo2.properties.get("latitude"))
assertEquals(127, vo2.properties.get("longitude"))
assertEquals("{\"id\":123,\"latitude\":37,\"longitude\":127}", text)
assertNotNull(vo2.properties)
assertEquals(37, vo2.properties.get("latitude"))
assertEquals(127, vo2.properties.get("longitude"))
assertEquals(new BigDecimal("0"), tradPlusAdVO1.items.get(0).Revenue)
assertEquals(BigDecimal.valueOf(Double.parseDouble("0.000000006E3")), rate)
assertNotNull(bean.item)
assertEquals(123, bean.item.id)
assertNotNull(bean.item)
assertEquals(123, bean.item.id)
assertEquals("[1]", JSONArray.copyOf(list).toJSONString())
assertEquals("{\"age\":20,\"oAuthName\":\"xxx\"}", str)
assertEquals("{\"age\":20,\"oAuthName\":\"xxx\"}", str)
assertNotNull(bean)
assertEquals("requestId", bean.requestId)
assertEquals("{\"1\":\"1\",\"2\":\"2\"}", JSON.toJSONString(map, JSONWriter.Feature.MapSortField))
assertEquals(str, JSON.parse(json))
assertEquals(str, JSON.parse(jsonBytes))
assertEquals(str, JSON.parse(json))
assertEquals(str, JSON.parse(jsonBytes))
assertEquals("{\"value\":\"161127097456177153\"}", JSON.toJSONString(JSONObject.of("value", 161127097456177153L), JSONWriter.Feature.BrowserCompatible))
assertEquals("{\"value\":\"161127097456177153\"}", JSON.toJSONString(bean, JSONWriter.Feature.BrowserCompatible))
assertEquals("{\"value\":\"161127097456177153\"}", JSON.toJSONString(bean, JSONWriter.Feature.BrowserCompatible))
assertEquals("{\"pageIndex\":\"0\",\"pageSize\":\"10\",\"q\":\"\"}", params)
assertEquals("{\"xid\":null}", str)
assertSame(UserStatus.NORMAL, JSON.parseObject("{\"state\":0}").toJavaObject(User.class).state)
assertSame(UserStatus.LOCKED, JSON.parseObject("{\"state\":1}").toJavaObject(User.class).state)
assertNull(JSON.parseObject("{\"state\":-1}").toJavaObject(User.class).state)
assertEquals("{\"code\":0,\"data\":1}", JSON.toJSONString(data))
assertNotNull(JSON.parseObject(s, 27, 22))
assertNotNull(JSON.parseObject(s.toCharArray(), 27, 22))
assertNotNull(JSON.parseObject(s.getBytes(StandardCharsets.UTF_8), 27, 22))
assertNotNull(JSON.parseObject(s, 0, 22))
assertNotNull(JSON.parseObject(s.toCharArray(), 0, 22))
assertNotNull(JSON.parseObject(s.getBytes(StandardCharsets.UTF_8), 0, 22))
assertEquals("2022-08-12T21:43:01.538", bean.createTime.toString())
assertEquals("2022-08-12T21:43:01.538", bean1.createTime.toString())
assertEquals("2022-08-12T21:43:01.538", bean2.createTime.toString())
assertNotNull(jsonObject.toJavaObject(TestObj.class).whiteListIds)
assertNotNull(jsonObject.to(TestObj.class))
assertNotNull(JSON.parseObject(json, TestObj.class).whiteListIds)
assertEquals("[1,2,3]", jsonObject.get("b").toString())
assertNotNull(fieldRef.get())
assertEquals(map, map1)
assertNotNull(bizDTO.getCalltime())
assertEquals(2022, calltime.getYear())
assertEquals(12, calltime.getMonthValue())
assertEquals(2, calltime.getDayOfMonth())
assertEquals(11, calltime.getHour())
assertEquals(33, calltime.getMinute())
assertEquals(0, tagView.history)
assertEquals("AM", tagView.tag)
assertEquals("{\"name\":\"张三\",\"roleType\":1}", str)
assertEquals("{\"test1\":\"/usr/bin\"}", JSONObject.toJSONString(ext))
assertArrayEquals(Base64.getDecoder().decode(base64Str), bean.value)
assertNotNull(JSON.parseObject(str, BizDTO.class).getCreateTime())
assertNotNull(JSON.parseObject(str.toCharArray(), BizDTO.class).getCreateTime())
assertNotNull(JSON.parseObject(str.getBytes(), BizDTO.class).getCreateTime())
assertNotNull(JSON.parseObject(str).toJavaObject(BizDTO.class).getCreateTime())
assertEquals("{\"a\":\"b12\"}", JSON.toJSONString(map, new ValueFilter[] { new TestValueFilter1(), new TestValueFilter2() }, JSONWriter.Feature.WriteMapNullValue))
assertEquals("{\"a\":\"b21\"}", JSON.toJSONString(map, new ValueFilter[] { new TestValueFilter2(), new TestValueFilter1() }, JSONWriter.Feature.WriteMapNullValue))
assertNotNull(bean1)
assertNotNull(bean1.tagInfos)
assertEquals(bean.tagInfos.getClass(), bean1.tagInfos.getClass())
assertEquals("{\"RUN\":124,\"SSRC\":[null,15,null,null,null,null,null,null,null,null,null,null,null]}", JSON.toJSONString(to))
assertEquals("{\"a\":{}}", object.toJSONString(JSONWriter.Feature.WriteNulls))
assertEquals("{\"a\":[{}]}", object1.toJSONString(JSONWriter.Feature.WriteNulls))
assertEquals("xxx", bean.a.b)
assertNull(bean.a.b)
assertEquals("{\"a\":{}}", JSON.toJSONString(bean))
assertEquals("{\"a\":[{}]}", JSON.toJSONString(bean1))
assertEquals("{\"a\":{\"b\":null}}", object.toJSONString(JSONWriter.Feature.WriteNulls))
assertEquals("{\"a\":[{\"b\":null}]}", object1.toJSONString(JSONWriter.Feature.WriteNulls))
assertEquals("xxx", bean.a.b)
assertNull(bean.a.b)
assertEquals("{\"a\":{\"b\":null}}", JSON.toJSONString(bean, JSONWriter.Feature.WriteNulls))
assertEquals("{\"a\":[{\"b\":null}]}", JSON.toJSONString(bean1, JSONWriter.Feature.WriteNulls))
assertNull(JSONPath.eval("", path))
assertNull(JSONPath.eval("{}", path))
assertNull(JSONPath.eval("{\"data\":{}}", path))
assertNull(JSONPath.eval("{\"data\":{\"plan\":{}}}", path))
assertEquals("[]", JSON.toJSONString(JSONPath.extract("", path, JSONPath.Feature.AlwaysReturnList)))
assertEquals("[]", JSON.toJSONString(JSONPath.extract("{}", path, JSONPath.Feature.AlwaysReturnList)))
assertEquals("[]", JSON.toJSONString(JSONPath.extract("{\"data\":{}}", path, JSONPath.Feature.AlwaysReturnList)))
assertEquals("[]", JSON.toJSONString(JSONPath.eval("{\"data\":{\"plan\":{\"targets\":[]}}}", path)))
assertEquals(user.name, temp.name)
assertEquals("[{\"a\":1}]", arr.toString())
assertEquals("[{\"a\":1}]", ((JSONArray) JSONPath.extract(raw, "$[0][*]")).toJSONString())
assertEquals("[{\"a\":1}]", JSONPath.eval(array, "$[*][*]").toString())
assertEquals("[{\"a\":1}]", JSONPath.eval(array, "$[0][*]").toString())
assertEquals("[{\"a\":3}]", ((JSONArray) JSONPath.extract(raw, "$[1][*]")).toJSONString())
assertEquals("{\"a\":1}", ((JSONObject) JSONPath.extract(raw, "$[0][0]")).toJSONString())
assertEquals("[1,2,3]", ((JSONArray) JSONPath.extract(raw, "$[*][*].a")).toJSONString())
assertEquals("[\"1\",\"2\"]", JSONPath.extract(str, "$[*].id").toString())
assertEquals("[\"2\"]", JSONPath.extract(str, "$[?(@.name=='b')].id").toString())
assertNotNull(bean.predictDeliveryTime)
assertNotNull(is)
assertEquals(3, list.size())
assertEquals("{\"one\":true,\"three\":[\"red\",\"yellow\",[\"blue\",\"azure\",\"cobalt\",\"teal\"],\"orange\"],\"two\":19.5,\"four\":\"poop\"}", list.get(0).toString())
assertEquals("{\"one\":false,\"three\":[\"red\",\"yellow\",[\"citrus\",\"blue\",\"cobalt\"],\"black\"],\"two\":129.5,\"four\":\"stars\"}", list.get(1).toString())
assertEquals("{\"one\":false,\"three\":[\"pink\",[\"citrus\",\"blue\"],\"gold\"],\"two\":222,\"four\":\"fiat\"}", list.get(2).toString())
assertNotNull(is)
assertEquals(3, list.size())
assertEquals("{\"one\":true,\"three\":[\"red\",\"yellow\",[\"blue\",\"azure\",\"cobalt\",\"teal\"],\"orange\"],\"two\":19.5,\"four\":\"poop\"}", list.get(0).toString())
assertEquals("{\"one\":false,\"three\":[\"red\",\"yellow\",[\"citrus\",\"blue\",\"cobalt\"],\"black\"],\"two\":129.5,\"four\":\"stars\"}", list.get(1).toString())
assertEquals("{\"one\":false,\"three\":[\"pink\",[\"citrus\",\"blue\"],\"gold\"],\"two\":222,\"four\":\"fiat\"}", list.get(2).toString())
assertNotNull(is)
assertEquals(3, list.size())
assertEquals("{\"one\":true,\"three\":[\"red\",\"yellow\",[\"blue\",\"azure\",\"cobalt\",\"teal\"],\"orange\"],\"two\":19.5,\"four\":\"poop\"}", list.get(0).toString())
assertEquals("{\"one\":false,\"three\":[\"red\",\"yellow\",[\"citrus\",\"blue\",\"cobalt\"],\"black\"],\"two\":129.5,\"four\":\"stars\"}", list.get(1).toString())
assertEquals("{\"one\":false,\"three\":[\"pink\",[\"citrus\",\"blue\"],\"gold\"],\"two\":222,\"four\":\"fiat\"}", list.get(2).toString())
assertNotNull(is)
assertEquals(3, list.size())
assertEquals("{\"one\":true,\"three\":[\"red\",\"yellow\",[\"blue\",\"azure\",\"cobalt\",\"teal\"],\"orange\"],\"two\":19.5,\"four\":\"poop\"}", list.get(0).toString())
assertEquals("{\"one\":false,\"three\":[\"red\",\"yellow\",[\"citrus\",\"blue\",\"cobalt\"],\"black\"],\"two\":129.5,\"four\":\"stars\"}", list.get(1).toString())
assertEquals("{\"one\":false,\"three\":[\"pink\",[\"citrus\",\"blue\"],\"gold\"],\"two\":222,\"four\":\"fiat\"}", list.get(2).toString())
assertEquals("[{\"name\":\"a.b\"},{\"name\":\"c\"}]", values[0])
assertArrayEquals(new String[] { "{\"name\":\"a.b\"}", "{\"name\":\"c\"}" }, (String[]) values[1])
assertEquals("[{\"name\":\"a.b\"},{\"name\":\"c\"}]", values[0])
assertEquals("[{\"name\":\"a.b\"},{\"name\":\"c\"}]", values[1])
assertEquals("{\n" + "\t\"@type\":\"com.alibaba.fastjson2.hsf.VeryComplexDO\",\n" + "\t\"fshort\":4,\n" + "\t\"pBaseDO\":{},\n" + "\t\"pbyte\":5,\n" + "\t\"pdouble\":6.6,\n" + "\t\"pfloat\":7.7,\n" + "\t\"pint\":8,\n" + "\t\"plong\":9\n" + "}", JSONB.toJSONString(bytes))
assertNotNull(protocol.getData())
assertSame(protocol.getData(), protocol.getEndpoint())
assertEquals(bean.THIS_IS_VALUE_1, result.THIS_IS_VALUE_1)
assertEquals(bean.THIS_IS_VALUE_2, result.THIS_IS_VALUE_2)
assertEquals(id, jsonPath.eval(object))
assertEquals(id, jsonPath.extract(JSONReader.of(json)))
assertEquals(id, jsonPath.extract(JSONReader.ofJSONB(jsonbBytes)))
assertEquals(id, jsonPath.extract(json))
assertEquals(id, jsonPath.extract(jsonBytes))
assertEquals(id, jsonPath.eval(object))
assertEquals(id, jsonPath.extract(JSONReader.of(json)))
assertEquals(id, jsonPath.extract(JSONReader.ofJSONB(jsonbBytes)))
assertEquals(id, jsonPath.extract(json))
assertEquals(id, jsonPath.extract(jsonBytes))
assertEquals(id, jsonPath.eval(object))
assertEquals(id, jsonPath.extract(JSONReader.of(json)))
assertEquals(id, jsonPath.extract(JSONReader.ofJSONB(jsonbBytes)))
assertEquals(id, jsonPath.extract(json))
assertEquals(id, jsonPath.extract(jsonBytes))
assertEquals(id, jsonPath.eval(object))
assertEquals(id, jsonPath.extract(JSONReader.of(json)))
assertEquals(id, jsonPath.extract(JSONReader.ofJSONB(jsonbBytes)))
assertEquals(id, jsonPath.extract(json))
assertEquals(id, jsonPath.extract(jsonBytes))
assertEquals(id, jsonPath.eval(object))
assertEquals(id, jsonPath.extract(JSONReader.of(json)))
assertEquals(id, jsonPath.extract(JSONReader.ofJSONB(jsonbBytes)))
assertEquals(id, jsonPath.extract(json))
assertEquals(id, jsonPath.extract(jsonBytes))
assertEquals(id, jsonPath.extract(jsonBytes, 0, jsonBytes.length, StandardCharsets.US_ASCII))
assertEquals("20121213", bean1.date)
assertEquals(bean.date, bean_x1.date)
assertNotNull(bean2.date)
assertEquals(bean.date.atStartOfDay(DateUtils.DEFAULT_ZONE_ID).toInstant().toEpochMilli(), bean2.date.getTime())
assertEquals(bean1.date, bean1_x1.date)
assertEquals(str, str1)
assertEquals(str, str1)
assertEquals(BigInteger.valueOf(123), response.value)
assertEquals(BigInteger.valueOf(123), response.value)
assertEquals(1, beanList.size())
assertEquals(123, bean.id)
assertEquals("XXX", bean.name)
assertEquals(1, list.size())
assertEquals(123, bean.id)
assertEquals("XXX", bean.name)
assertEquals(1, map.size())
assertEquals(123, bean.id)
assertEquals("XXX", bean.name)
assertEquals(1, array.length)
assertEquals(123, bean.id)
assertEquals("XXX", bean.name)
assertEquals(1, list.size())
assertEquals(123, bean.id)
assertEquals("XXX", bean.name)
assertEquals(Fnv.hashCode64("id"), jsonReader.readFieldNameHashCodeUnquote())
assertEquals(values[0], JSONPath.of("$[0]").eval(values))
assertEquals("[1,2]", JSONPath.of("$[0,1]").eval(values).toString())
assertEquals("[1,2]", JSONPath.of("$[:1]").eval(values).toString())
assertEquals(3, JSONPath.of("$.length()").eval(values))
assertEquals(1, JSONPath.of("$.length()").eval(values))
assertTrue(JSONPath.of("$.a.b").isRef())
assertTrue(JSONPath.of("$.v0000").contains(vo))
assertEquals("[{\"val\":101}]", JSONPath.of("$[?(@.val=101)]").eval(array).toString())
assertEquals("[{\"val\":101}]", JSONPath.of("$[?(@.val<=101)]").eval(array).toString())
assertEquals("[{\"val\":101}]", JSONPath.of("$[?(@.val<102)]").eval(array).toString())
assertEquals("[{\"val\":102}]", JSONPath.of("$[?(@.val>=102)]").eval(array).toString())
assertEquals("[{\"val\":102}]", JSONPath.of("$[?(@.val>101)]").eval(array).toString())
assertEquals("[{\"val\":102}]", JSONPath.of("$[?(@.val!=101)]").eval(array).toString())
assertEquals(values[0], JSONPath.of("$[0]").extract(JSONReader.ofJSONB(jsonbBytes)))
assertEquals("[1,2]", JSONPath.of("$[0,1]").extract(JSONReader.ofJSONB(jsonbBytes)).toString())
assertEquals("[1]", JSONPath.of("$[:1]").extract(JSONReader.ofJSONB(jsonbBytes)).toString())
assertEquals(values[0], JSONPath.of("$[0]").extract(JSONReader.of(jsonString)))
assertEquals("[1,2]", JSONPath.of("$[0,1]").extract(JSONReader.of(jsonString)).toString())
assertEquals("[1]", JSONPath.of("$[:1]").extract(JSONReader.of(jsonString)).toString())
assertEquals("[1,2,true,\"a\",false,[],{},null]", JSONPath.of("$[0:]").extract(JSONReader.of(jsonString)).toString())
assertEquals("[1,2,true,\"a\",false,[],{},null]", JSONPath.of("$[0,1,2,3,4,5,6,7]").extract(JSONReader.of(jsonString)).toString())
assertEquals("[4,5]", JSONPath.of("$[?(@>3)]").extract(JSONReader.of(jsonString)).toString())
assertEquals("[{\"val\":\"abc\"}]", JSONPath.of("$[?(@.val='abc')]").eval(array).toString())
assertEquals("[{\"val\":\"abd\"}]", JSONPath.of("$[?(@.val>'abc')]").eval(array).toString())
assertEquals("[{\"val\":\"abc\"},{\"val\":\"abd\"}]", JSONPath.of("$[?(@.val>='abc')]").eval(array).toString())
assertEquals("[{\"val\":\"abc\"}]", JSONPath.of("$[?(@.val<'abd')]").eval(array).toString())
assertEquals("[{\"val\":\"abc\"}]", JSONPath.of("$[?(@.val<='abc')]").eval(array).toString())
assertEquals("[{\"val\":\"abc\"}]", JSONPath.of("$[?(@.val!='abd')]").eval(array).toString())
assertEquals("[{\"val\":\"abc\"}]", JSONPath.of("$[?(@.val<>'abd')]").eval(array).toString())
assertEquals("[]", JSONPath.of("$[?(@.val =~ /.*REES/i)]").eval(array).toString())
assertEquals("[{\"val\":\"abc\"}]", JSONPath.of("$[?(@.val =~ /ABC/i)]").eval(array).toString())
assertEquals("[]", JSONPath.of("$[?(@.val rlike '.*REES')]").eval(array).toString())
assertEquals("[{\"val\":\"abc\"}]", JSONPath.of("$[?(@.val rlike 'abc')]").eval(array).toString())
assertEquals("[{\"val\":101}]", JSONPath.of("$[?(@.val in (101))]").eval(array).toString())
assertEquals("[{\"val\":102}]", JSONPath.of("$[?(@.val not in (101))]").eval(array).toString())
assertEquals("[{\"val\":101.0}]", JSONPath.of("$[?(@.val in (101))]").eval(array).toString())
assertEquals("[{\"val\":102.0}]", JSONPath.of("$[?(@.val not in (101))]").eval(array).toString())
assertEquals("[{\"val\":101}]", JSONPath.of("$[?(@.val in (101))]").eval(array).toString())
assertEquals("[{\"val\":102}]", JSONPath.of("$[?(@.val not in (101))]").eval(array).toString())
assertEquals("[{\"val\":101}]", JSONPath.of("$[?(@.val in (101))]").eval(array).toString())
assertEquals("[{\"val\":102}]", JSONPath.of("$[?(@.val not in (101))]").eval(array).toString())
assertTrue(JSONPath.of("$.id").contains(JSONObject.of("id", 123)))
assertTrue(JSONPath.of("$[0]").contains(JSONArray.of("id")))
assertTrue(JSONPath.of("$[0].v0000").contains(Arrays.asList(Arrays.asList(null, vo))))
assertTrue(JSONPath.of("$[0].v0000").contains(Arrays.asList(new Object[] { vo })))
assertTrue(JSONPath.of("$[0].v0000").contains(new JSONArray().fluentAdd(new Object[] { vo })))
assertTrue(JSONPath.of("$[0].v0000").contains(new JSONArray().fluentAdd(new Object[] { null, JSONObject.of("v0000", 1001) })))
assertTrue(JSONPath.of("$[0][0]").contains(new JSONArray().fluentAdd(new int[] { 123 })))
assertEquals("[[0]]", root.toString())
assertEquals("123", JSONPath.of("$.id").extractScalar(JSONReader.of("{\"id\":123}")))
assertEquals("123", JSONPath.of("$[0]").extractScalar(JSONReader.of("[123]")))
assertEquals("$[0]", JSONPath.of("$[0]").toString())
assertEquals(1, JSONPath.of("$.size()").eval(JSONObject.of("id", 123)))
assertEquals(1, JSONPath.of("$[0].size()").eval(JSONArray.of(JSONObject.of("id", 123))))
assertEquals(1, JSONPath.of("$.child.size()").eval(JSONObject.of("child", JSONObject.of("id", 123))))
assertEquals(101, root.get("id"))
assertEquals(101, root.get(0))
assertEquals(102, root.get(0))
assertEquals(103L, root.get(0))
assertEquals(101, root[0])
assertEquals(102, root[0])
assertEquals(103L, root[0])
assertEquals(101, root[0])
assertEquals(102, root[0])
assertEquals(102, root[0])
assertEquals(102, root[0])
assertEquals(101L, root[0])
assertEquals(102L, root[0])
assertEquals(102L, root[0])
assertEquals(102L, root[0])
assertEquals(101L, root[0])
assertEquals(102L, root[0])
assertEquals(102L, root[0])
assertEquals(102L, root[0])
assertEquals(101, root[0])
assertEquals(102, root[0])
assertEquals(102, root[0])
assertEquals(102, root[0])
assertEquals(101L, root.getJSONObject(0).get("id"))
assertEquals(102, root.getJSONObject(0).get("id"))
assertEquals(101, vo.v0000)
assertEquals(101, vo.v0000)
assertEquals(null, root.getJSONObject("child").get("id"))
assertNotNull(error)
assertNotNull(error)
assertEquals(3, paths.size())
assertEquals(4, paths.size())
assertEquals(1, paths.size())
assertEquals("$..book[?(@.isbn)][0]", path.toString())
assertEquals(3, segments.size())
assertEquals("..book", segments.get(0).toString())
assertEquals("?isbn", segments.get(1).toString())
assertEquals("$.book.author.id", path.toString())
assertEquals(3, segments.size())
assertEquals("book", segments.get(0).toString())
assertEquals("author", segments.get(1).toString())
assertEquals(0, JSON.parseObject(json, ByteValue1.class).getV0000())
assertEquals(0, JSON.parseObject(jsonBytes, ByteValue1.class).getV0000())
assertNull(JSON.parseObject(json, Byte1.class).getV0000())
assertNull(JSON.parseObject(json, Byte1.class, ErrorOnNullForPrimitives).getV0000())
assertEquals(0, JSONB.parseObject(jsonbBytes, ByteValue1.class).getV0000())
assertNull(JSONB.parseObject(jsonbBytes, Byte1.class).getV0000())
assertNull(JSONB.parseObject(jsonbBytes, Byte1.class, ErrorOnNullForPrimitives).getV0000())
assertEquals(0, JSON.parseObject(json, ShortValue1.class).getV0000())
assertEquals(0, JSON.parseObject(jsonBytes, ShortValue1.class).getV0000())
assertNull(JSON.parseObject(json, Short1.class).getV0000())
assertNull(JSON.parseObject(json, Short1.class, ErrorOnNullForPrimitives).getV0000())
assertEquals(0, JSONB.parseObject(jsonbBytes, ShortValue1.class).getV0000())
assertNull(JSONB.parseObject(jsonbBytes, Short1.class).getV0000())
assertNull(JSONB.parseObject(jsonbBytes, Short1.class, ErrorOnNullForPrimitives).getV0000())
assertEquals(0, JSON.parseObject(json, Int1.class).getV0000())
assertEquals(0, JSON.parseObject(jsonBytes, Int1.class).getV0000())
assertNull(JSON.parseObject(json, Integer1.class).getV0000())
assertNull(JSON.parseObject(json, Integer1.class, ErrorOnNullForPrimitives).getV0000())
assertEquals(0, JSONB.parseObject(jsonbBytes, Int1.class).getV0000())
assertNull(JSONB.parseObject(jsonbBytes, Integer1.class).getV0000())
assertNull(JSONB.parseObject(jsonbBytes, Integer1.class, ErrorOnNullForPrimitives).getV0000())
assertEquals(0, JSON.parseObject(json, LongValue1.class).getV0000())
assertEquals(0, JSON.parseObject(jsonBytes, LongValue1.class).getV0000())
assertNull(JSON.parseObject(json, Long1.class).getV0000())
assertNull(JSON.parseObject(json, Long1.class, ErrorOnNullForPrimitives).getV0000())
assertEquals(0, JSONB.parseObject(jsonbBytes, LongValue1.class).getV0000())
assertNull(JSONB.parseObject(jsonbBytes, Long1.class).getV0000())
assertNull(JSONB.parseObject(jsonbBytes, Long1.class, ErrorOnNullForPrimitives).getV0000())
assertNull(JSON.parseObject(json, Boolean1.class).getV0000())
assertNull(JSON.parseObject(json, Boolean1.class, ErrorOnNullForPrimitives).getV0000())
assertNull(JSONB.parseObject(jsonbBytes, Boolean1.class).getV0000())
assertNull(JSONB.parseObject(jsonbBytes, Boolean1.class, ErrorOnNullForPrimitives).getV0000())
assertEquals(0F, JSON.parseObject(json, FloatValue1.class).getV0000())
assertNull(JSON.parseObject(json, Float1.class).getV0000())
assertNull(JSON.parseObject(json, Float1.class, ErrorOnNullForPrimitives).getV0000())
assertEquals(0F, JSONB.parseObject(jsonbBytes, FloatValue1.class).getV0000())
assertEquals(0F, JSON.parseObject(json, DoubleValue1.class).getV0000())
assertNull(JSON.parseObject(json, Double1.class).getV0000())
assertNull(JSON.parseObject(json, Double1.class, ErrorOnNullForPrimitives).getV0000())
assertEquals(0D, JSONB.parseObject(jsonbBytes, DoubleValue1.class).getV0000())
assertNull(JSONB.parseObject(jsonbBytes, Double1.class).getV0000())
assertNull(JSONB.parseObject(jsonbBytes, Double1.class, ErrorOnNullForPrimitives).getV0000())
assertEquals(localDate, jsonReader.readLocalDate11())
assertEquals("{\"id\":1001}", object.toString())
assertEquals("{\"id\":1001}", object.toString())
assertEquals(object, object.clone())
assertNotNull(object.getJSONArray("obj"))
assertEquals("[]", object.getJSONArray("obj").toString())
assertNotNull(object.getJSONObject("obj"))
assertEquals("{}", object.getJSONObject("obj").toString())
assertNotNull(obj)
assertEquals("{}", JSON.toJSONString(obj))
assertNotNull(list)
assertEquals(Integer1.class, list.get(0).getClass())
assertEquals("[{}]", JSON.toJSONString(list))
assertNotNull(map)
assertEquals(Integer1.class, map.get("val").getClass())
assertEquals("{\"val\":{}}", JSON.toJSONString(map))
assertEquals(123L, object.getLongValue("val"))
assertEquals(123L, object.getLong("val").longValue())
assertEquals(123, object.getIntValue("val"))
assertEquals(123, object.getInteger("val").intValue())
assertEquals("123", object.getString("val"))
assertEquals(123L, object.getLongValue("val"))
assertEquals(123L, object.getLong("val").longValue())
assertEquals(123, object.getIntValue("val"))
assertEquals(123, object.getInteger("val").intValue())
assertEquals("123", object.getString("val"))
assertEquals(123L, object.getLongValue("val"))
assertEquals(123L, object.getLong("val").longValue())
assertEquals(123, object.getIntValue("val"))
assertEquals(123, object.getInteger("val").intValue())
assertEquals("123", object.getString("val"))
assertEquals(123L, object.getLongValue("val"))
assertEquals(123L, object.getLong("val").longValue())
assertEquals(123, object.getIntValue("val"))
assertEquals(123, object.getInteger("val").intValue())
assertEquals("123", object.getString("val"))
assertEquals(123L, object.getLongValue("val"))
assertEquals(123L, object.getLong("val").longValue())
assertEquals(123, object.getIntValue("val"))
assertEquals(123, object.getInteger("val").intValue())
assertEquals("123", object.getString("val"))
assertEquals(object, clone)
assertEquals(0L, object.getLongValue("val"))
assertEquals(null, object.getLong("val"))
assertEquals(0, object.getIntValue("val"))
assertEquals(null, object.getInteger("val"))
assertEquals(null, object.getString("val"))
assertEquals(null, object.getJSONArray("val"))
assertEquals(null, object.getJSONObject("val"))
assertEquals(null, object.getBigInteger("val"))
assertEquals(null, object.getBigDecimal("val"))
assertEquals(null, object.getDouble("val"))
assertEquals(0D, object.getDoubleValue("val"))
assertEquals(null, object.getFloat("val"))
assertEquals(0F, object.getFloatValue("val"))
assertEquals(false, object.getBooleanValue("val"))
assertEquals(null, object.getBoolean("val"))
assertEquals((short) 0, object.getShortValue("val"))
assertEquals(null, object.getShort("val"))
assertEquals((byte) 0, object.getByteValue("val"))
assertEquals(null, object.getByte("val"))
assertEquals(0L, object.getLongValue("val"))
assertEquals(null, object.getLong("val"))
assertEquals(0, object.getIntValue("val"))
assertEquals(null, object.getInteger("val"))
assertEquals(null, object.getJSONArray("val"))
assertEquals(null, object.getJSONObject("val"))
assertEquals(null, object.getBigInteger("val"))
assertEquals(null, object.getBigDecimal("val"))
assertEquals(null, object.getFloat("val"))
assertEquals(null, object.getDouble("val"))
assertEquals(null, object.getBoolean("val"))
assertEquals(null, object.getByte("val"))
assertEquals(null, object.getShort("val"))
assertEquals(0, object.getByteValue("val"))
assertEquals(0, object.getShortValue("val"))
assertEquals(0L, object.getLongValue("val"))
assertEquals(null, object.getLong("val"))
assertEquals(0, object.getIntValue("val"))
assertEquals(null, object.getInteger("val"))
assertEquals(null, object.getJSONArray("val"))
assertEquals(null, object.getJSONObject("val"))
assertEquals(null, object.getBigInteger("val"))
assertEquals(null, object.getBigDecimal("val"))
assertEquals(null, object.getBoolean("val"))
assertEquals(null, object.getFloat("val"))
assertEquals(null, object.getDouble("val"))
assertEquals(null, object.getByte("val"))
assertEquals(null, object.getShort("val"))
assertEquals(0, object.getByteValue("val"))
assertEquals(0, object.getShortValue("val"))
assertEquals(BigInteger.valueOf(12), new JSONObject().fluentPut("val", 12).getBigInteger("val"))
assertEquals(BigInteger.valueOf(12), new JSONObject().fluentPut("val", (byte) 12).getBigInteger("val"))
assertEquals(BigInteger.valueOf(12), new JSONObject().fluentPut("val", (short) 12).getBigInteger("val"))
assertEquals(BigInteger.valueOf(12), new JSONObject().fluentPut("val", 12L).getBigInteger("val"))
assertEquals(BigInteger.valueOf(12), new JSONObject().fluentPut("val", 12F).getBigInteger("val"))
assertEquals(BigInteger.valueOf(12), new JSONObject().fluentPut("val", 12D).getBigInteger("val"))
assertEquals(BigInteger.valueOf(12), new JSONObject().fluentPut("val", new BigDecimal("12")).getBigInteger("val"))
assertEquals(BigInteger.valueOf(12), new JSONObject().fluentPut("val", new BigInteger("12")).getBigInteger("val"))
assertEquals(BigInteger.valueOf(12), new JSONObject().fluentPut("val", "12").getBigInteger("val"))
assertEquals(BigDecimal.valueOf(12), new JSONObject().fluentPut("val", 12).getBigDecimal("val"))
assertEquals(BigDecimal.valueOf(12), new JSONObject().fluentPut("val", (byte) 12).getBigDecimal("val"))
assertEquals(BigDecimal.valueOf(12), new JSONObject().fluentPut("val", (short) 12).getBigDecimal("val"))
assertEquals(BigDecimal.valueOf(12), new JSONObject().fluentPut("val", 12L).getBigDecimal("val"))
assertEquals(BigDecimal.valueOf(12F), new JSONObject().fluentPut("val", 12F).getBigDecimal("val"))
assertEquals(BigDecimal.valueOf(12D), new JSONObject().fluentPut("val", 12D).getBigDecimal("val"))
assertEquals(BigDecimal.valueOf(12), new JSONObject().fluentPut("val", new BigDecimal("12")).getBigDecimal("val"))
assertEquals(BigDecimal.valueOf(12), new JSONObject().fluentPut("val", new BigInteger("12")).getBigDecimal("val"))
assertEquals(BigDecimal.valueOf(12), new JSONObject().fluentPut("val", "12").getBigDecimal("val"))
assertEquals(BigDecimal.ONE, new JSONObject().fluentPut("val", true).getBigDecimal("val"))
assertEquals(BigDecimal.ZERO, new JSONObject().fluentPut("val", false).getBigDecimal("val"))
assertEquals(Float.valueOf(12), new JSONObject().fluentPut("val", 12).getFloatValue("val"))
assertEquals(Float.valueOf(12), new JSONObject().fluentPut("val", (byte) 12).getFloatValue("val"))
assertEquals(Float.valueOf(12), new JSONObject().fluentPut("val", (short) 12).getFloatValue("val"))
assertEquals(Float.valueOf(12), new JSONObject().fluentPut("val", 12L).getFloatValue("val"))
assertEquals(Float.valueOf(12F), new JSONObject().fluentPut("val", 12F).getFloatValue("val"))
assertEquals(Float.valueOf(12), new JSONObject().fluentPut("val", 12D).getFloatValue("val"))
assertEquals(Float.valueOf(12), new JSONObject().fluentPut("val", new BigDecimal("12")).getFloatValue("val"))
assertEquals(Float.valueOf(12), new JSONObject().fluentPut("val", new BigInteger("12")).getFloatValue("val"))
assertEquals(Float.valueOf(12), new JSONObject().fluentPut("val", "12").getFloatValue("val"))
assertEquals(Float.valueOf(12), new JSONObject().fluentPut("val", 12).getFloat("val"))
assertEquals(Float.valueOf(12), new JSONObject().fluentPut("val", (byte) 12).getFloat("val"))
assertEquals(Float.valueOf(12), new JSONObject().fluentPut("val", (short) 12).getFloat("val"))
assertEquals(Float.valueOf(12), new JSONObject().fluentPut("val", 12L).getFloat("val"))
assertEquals(Float.valueOf(12F), new JSONObject().fluentPut("val", 12F).getFloat("val"))
assertEquals(Float.valueOf(12), new JSONObject().fluentPut("val", 12D).getFloat("val"))
assertEquals(Float.valueOf(12), new JSONObject().fluentPut("val", new BigDecimal("12")).getFloat("val"))
assertEquals(Float.valueOf(12), new JSONObject().fluentPut("val", new BigInteger("12")).getFloat("val"))
assertEquals(Float.valueOf(12), new JSONObject().fluentPut("val", "12").getFloat("val"))
assertEquals(Double.valueOf(12), new JSONObject().fluentPut("val", 12).getDoubleValue("val"))
assertEquals(Double.valueOf(12), new JSONObject().fluentPut("val", (byte) 12).getDoubleValue("val"))
assertEquals(Double.valueOf(12), new JSONObject().fluentPut("val", (short) 12).getDoubleValue("val"))
assertEquals(Double.valueOf(12), new JSONObject().fluentPut("val", 12L).getDoubleValue("val"))
assertEquals(Double.valueOf(12F), new JSONObject().fluentPut("val", 12F).getDoubleValue("val"))
assertEquals(Double.valueOf(12), new JSONObject().fluentPut("val", 12D).getDoubleValue("val"))
assertEquals(Double.valueOf(12), new JSONObject().fluentPut("val", new BigDecimal("12")).getDoubleValue("val"))
assertEquals(Double.valueOf(12), new JSONObject().fluentPut("val", new BigInteger("12")).getDoubleValue("val"))
assertEquals(Double.valueOf(12), new JSONObject().fluentPut("val", "12").getDoubleValue("val"))
assertEquals(Double.valueOf(12), new JSONObject().fluentPut("val", 12).getDouble("val"))
assertEquals(Double.valueOf(12), new JSONObject().fluentPut("val", (byte) 12).getDouble("val"))
assertEquals(Double.valueOf(12), new JSONObject().fluentPut("val", (short) 12).getDouble("val"))
assertEquals(Double.valueOf(12), new JSONObject().fluentPut("val", 12L).getDouble("val"))
assertEquals(Double.valueOf(12F), new JSONObject().fluentPut("val", 12F).getDouble("val"))
assertEquals(Double.valueOf(12), new JSONObject().fluentPut("val", 12D).getDouble("val"))
assertEquals(Double.valueOf(12), new JSONObject().fluentPut("val", new BigDecimal("12")).getDouble("val"))
assertEquals(Double.valueOf(12), new JSONObject().fluentPut("val", new BigInteger("12")).getDouble("val"))
assertEquals(Double.valueOf(12), new JSONObject().fluentPut("val", "12").getDouble("val"))
assertEquals(Boolean.TRUE, new JSONObject().fluentPut("val", 1).getBoolean("val"))
assertEquals(Boolean.TRUE, new JSONObject().fluentPut("val", "true").getBoolean("val"))
assertEquals(Boolean.FALSE, new JSONObject().fluentPut("val", Boolean.FALSE).getBoolean("val"))
assertEquals(Boolean.FALSE, new JSONObject().fluentPut("val", "FALSE").getBoolean("val"))
assertEquals(true, new JSONObject().fluentPut("val", 1).getBooleanValue("val"))
assertEquals(true, new JSONObject().fluentPut("val", "true").getBooleanValue("val"))
assertEquals(false, new JSONObject().fluentPut("val", "FALSE").getBooleanValue("val"))
assertEquals(false, new JSONObject().fluentPut("val", Boolean.FALSE).getBooleanValue("val"))
assertEquals((short) 12, new JSONObject().fluentPut("val", 12).getShortValue("val"))
assertEquals((short) 12, new JSONObject().fluentPut("val", (byte) 12).getShortValue("val"))
assertEquals((short) 12, new JSONObject().fluentPut("val", (short) 12).getShortValue("val"))
assertEquals((short) 12, new JSONObject().fluentPut("val", 12L).getShortValue("val"))
assertEquals((short) 12, new JSONObject().fluentPut("val", 12F).getShortValue("val"))
assertEquals((short) 12, new JSONObject().fluentPut("val", 12D).getShortValue("val"))
assertEquals((short) 12, new JSONObject().fluentPut("val", new BigDecimal("12")).getShortValue("val"))
assertEquals((short) 12, new JSONObject().fluentPut("val", new BigInteger("12")).getShortValue("val"))
assertEquals((short) 12, new JSONObject().fluentPut("val", "12").getShortValue("val"))
assertEquals(Short.valueOf((short) 12), new JSONObject().fluentPut("val", 12).getShort("val"))
assertEquals(Short.valueOf((short) 12), new JSONObject().fluentPut("val", (byte) 12).getShort("val"))
assertEquals(Short.valueOf((short) 12), new JSONObject().fluentPut("val", (short) 12).getShort("val"))
assertEquals(Short.valueOf((short) 12), new JSONObject().fluentPut("val", 12L).getShort("val"))
assertEquals(Short.valueOf((short) 12), new JSONObject().fluentPut("val", 12F).getShort("val"))
assertEquals(Short.valueOf((short) 12), new JSONObject().fluentPut("val", 12D).getShort("val"))
assertEquals(Short.valueOf((short) 12), new JSONObject().fluentPut("val", new BigDecimal("12")).getShort("val"))
assertEquals(Short.valueOf((short) 12), new JSONObject().fluentPut("val", new BigInteger("12")).getShort("val"))
assertEquals(Short.valueOf((short) 12), new JSONObject().fluentPut("val", Short.valueOf((short) 12)).getShort("val"))
assertEquals(Short.valueOf((short) 12), new JSONObject().fluentPut("val", Byte.valueOf((byte) 12)).getShort("val"))
assertEquals(Short.valueOf((short) 12), new JSONObject().fluentPut("val", "12").getShort("val"))
assertEquals((byte) 12, new JSONObject().fluentPut("val", 12).getByteValue("val"))
assertEquals((byte) 12, new JSONObject().fluentPut("val", (byte) 12).getByteValue("val"))
assertEquals((byte) 12, new JSONObject().fluentPut("val", (short) 12).getByteValue("val"))
assertEquals((byte) 12, new JSONObject().fluentPut("val", 12L).getByteValue("val"))
assertEquals((byte) 12, new JSONObject().fluentPut("val", 12F).getByteValue("val"))
assertEquals((byte) 12, new JSONObject().fluentPut("val", 12D).getByteValue("val"))
assertEquals((byte) 12, new JSONObject().fluentPut("val", new BigDecimal("12")).getByteValue("val"))
assertEquals((byte) 12, new JSONObject().fluentPut("val", new BigInteger("12")).getByteValue("val"))
assertEquals((byte) 12, new JSONObject().fluentPut("val", "12").getByteValue("val"))
assertEquals(Byte.valueOf((byte) 12), new JSONObject().fluentPut("val", 12).getByte("val"))
assertEquals(Byte.valueOf((byte) 12), new JSONObject().fluentPut("val", (byte) 12).getByte("val"))
assertEquals(Byte.valueOf((byte) 12), new JSONObject().fluentPut("val", (short) 12).getByte("val"))
assertEquals(Byte.valueOf((byte) 12), new JSONObject().fluentPut("val", 12L).getByte("val"))
assertEquals(Byte.valueOf((byte) 12), new JSONObject().fluentPut("val", 12F).getByte("val"))
assertEquals(Byte.valueOf((byte) 12), new JSONObject().fluentPut("val", 12D).getByte("val"))
assertEquals(Byte.valueOf((byte) 12), new JSONObject().fluentPut("val", new BigDecimal("12")).getByte("val"))
assertEquals(Byte.valueOf((byte) 12), new JSONObject().fluentPut("val", new BigInteger("12")).getByte("val"))
assertEquals(Byte.valueOf((byte) 12), new JSONObject().fluentPut("val", Short.valueOf((short) 12)).getByte("val"))
assertEquals(Byte.valueOf((byte) 12), new JSONObject().fluentPut("val", Byte.valueOf((byte) 12)).getByte("val"))
assertEquals(Byte.valueOf((byte) 12), new JSONObject().fluentPut("val", "12").getByte("val"))
assertNull(JSONObject.of("id", null).getDate("id"))
assertNull(JSONObject.of("id", "").getDate("id"))
assertEquals(0, JSONObject.of("id", 0).getDate("id").getTime())
assertEquals(0L, JSONObject.of("id", 0L).getDate("id").getTime())
assertSame(date, JSONObject.of("id", date).getDate("id"))
assertEquals(date, JSONObject.of("id", millis).getDate("id"))
assertEquals(date, JSONObject.of("id", zdt).getDate("id"))
assertEquals(date, JSONObject.of("id", zdt.toString()).getDate("id"))
assertEquals(date, JSONObject.of("id", '"' + zdt.toString() + '"').getDate("id"))
assertEquals(ldt.atStartOfDay(ZoneId.systemDefault()).toInstant().toEpochMilli(), date1.getTime())
assertNull(JSONObject.of("id", null).getInstant("id"))
assertNull(JSONObject.of("id", "").getInstant("id"))
assertNull(JSONObject.of("id", "null").getInstant("id"))
assertNull(JSONObject.of("id", 0).getInstant("id"))
assertNull(JSONObject.of("id", 0L).getInstant("id"))
assertSame(instant, JSONObject.of("id", instant).getInstant("id"))
assertEquals(instant, JSONObject.of("id", millis).getInstant("id"))
assertEquals(instant, JSONObject.of("id", new Date(millis)).getInstant("id"))
assertEquals(instant, JSONObject.of("id", zdt).getInstant("id"))
assertEquals(instant, JSONObject.of("id", zdt.toString()).getInstant("id"))
assertEquals(instant, JSONObject.of("id", '"' + zdt.toString() + '"').getInstant("id"))
assertEquals(123, jsonObject.getIntValue("id"))
assertEquals(123L, jsonObject.getLongValue("id"))
assertEquals("123", jsonObject.getString("id"))
assertEquals(Integer.valueOf(123), jsonObject.getInteger("id"))
assertEquals(Long.valueOf(123), jsonObject.getLong("id"))
assertNull(jsonObject.getObject("a", String.class))
assertEquals("value1", jsonObject.get(123))
assertEquals("value2", jsonObject.get(456.789))
assertEquals("value3", jsonObject.get(null))
assertEquals("value4", jsonObject.getOrDefault(false, "value4"))
assertEquals(false, ((Map) proxy).isEmpty())
assertEquals(true, ((Map) proxy).isEmpty())
assertEquals(true, ((Map) proxy).isEmpty())
assertEquals(true, ((Map) proxy).isEmpty())
assertEquals(false, ((Map) proxy).isEmpty())
assertEquals("kraity", proxy.getName())
assertNotNull(object1)
assertEquals(bean.id, object1.get("id"))
assertNotNull(object2)
assertEquals(bean.id, object2.get("id"))
assertEquals(0, array.size())
assertEquals(0, map.size())
assertNull(object.getJSONObject("k0"))
assertSame(j1, object.getJSONObject("k1"))
assertNotSame(j2, object.getJSONObject("k2"))
assertNull(JSONObject.of("id", "").getObject("id", UUID.class))
assertNull(JSONObject.of("id", "null").getObject("id", UUID.class))
assertEquals(Integer.valueOf(101), JSONObject.of("id", 101).getObject("id", Number.class))
assertEquals(2, JSONObject.of("id", 101, "name", "DataWorks").size())
assertNull(JSONObject.of().getObject("id", (Type) User.class))
assertEquals(Integer.valueOf(123), JSONObject.of("id", 123).getObject("id", (Type) Object.class))
assertEquals("123", JSONObject.of("id", 123).getObject("id", (Type) String.class))
assertEquals(Integer.valueOf(123), JSONObject.of("id", "123").getObject("id", (Type) Integer.class))
assertEquals(Integer.valueOf(123), JSONObject.of("id", 123).getObject("id", (Type) Number.class))
assertEquals(new ArrayList(), JSONObject.of("id", new ArrayList()).getObject("id", List.class))
assertEquals("{}", object.toString())
assertEquals("{\"id\":null}", object.toString(JSONWriter.Feature.WriteNulls))
assertEquals("[{}]", array.toString())
assertEquals("[{\"id\":null}]", array.toString(JSONWriter.Feature.WriteNulls))
assertEquals(object, object2)
assertEquals(array, array2)
assertTrue(proxy.equals(object))
assertEquals(101, object.get("id"))
assertEquals(101, proxy.getId())
assertNull(proxy.getName())
assertTrue(proxy.isSmall())
assertEquals("Y", proxy.y())
assertNull(proxy.y1())
assertEquals(object.toString(), proxy.toString())
assertEquals(object.hashCode(), proxy.hashCode())
assertEquals("ok", proxy.getMask())
assertEquals("okk", proxy.getMask())
assertTrue(error)
assertEquals(0, JSONObject.parseObject("{}").size())
assertEquals(0, ((JSONObject) JSONObject.parse("{}")).size())
assertEquals(101, JSONObject.parseObject("{\"id\":101}", Bean.class).id)
assertEquals(101, JSONObject.parseObject("{\"ID\":101}", Bean.class, JSONReader.Feature.SupportSmartMatch).id)
assertEquals(0, JSONArray.parseArray("[]").size())
assertEquals(0, JSONArray.parse("[]").size())
assertEquals("{\"values\":[1]}", object.toString())
assertEquals("{\"values\":{\"id\":123}}", object.toString())
assertEquals(101, object.getByPath("id"))
assertEquals(1001, object.getByPath("item.itemId"))
assertNull(object.getBytes("bytes"))
assertTrue(jsonObject.isEmpty())
assertTrue(jsonObject.values().isEmpty())
assertNull(jsonObject.remove("id"))
assertNull(jsonObject.getBytes("id"))
assertEquals(0, jsonObject.getBytes("bytes").length)
assertEquals("abc中华人民共和国", new String(jsonObject.getBytes("bytes")))
assertEquals(0, JSONObject.of().getSize("value"))
assertEquals(1, JSONObject.of("value", JSONObject.of("a", 1)).getSize("value"))
assertEquals(2, JSONObject.of("value", JSONArray.of("a", "b")).getSize("value"))
assertEquals(str, JSON.toJSONString(student))
assertEquals("{\"birthday\":\"2022-05-03T15:26:05+08:00\"}", JSON.toJSONString(student))
assertEquals(student.birthday, student1.birthday)
assertEquals("{\"birthday\":\"2022-05-03T00:00:00+08:00\"}", JSON.toJSONString(student))
assertEquals(str, JSON.toJSONString(student, JSONWriter.Feature.WriteNulls))
assertEquals(str, JSON.toJSONString(student, "yyyy-MM-dd HH:mm:ss"))
assertEquals("{\"birthday\":\"2022-05-03 15:26:00\"}", JSON.toJSONString(student))
assertEquals("{\"birthday\":\"2022-05-03 15:26:00\"}", JSON.toJSONString(student))
assertEquals("{\"birthday\":\"2022-05-03 15:26:00\"}", JSON.toJSONString(student1))
assertEquals("{\"birthday\":\"2022-05-03 15:26:00\"}", JSON.toJSONString(student))
assertEquals(student.birthday, student1.birthday)
assertSame(student.birthday, jsonPath.eval(student))
assertEquals("{\"birthday\":\"2022-05-03 15:26:00\"}", JSON.toJSONString(student))
assertEquals(student.birthday, student1.birthday)
assertSame(student.birthday, jsonPath.eval(student))
assertSame(student.birthday, jsonPath.eval(student))
assertAll(() -> JSON.parseObject(date, Today.class))
assertAll(() -> JSON.parseObject(date, TodayCN.class))
assertEquals("{\"value\":\"20220608 00:00:00\"}", str)
assertEquals(1654617600000L, millis(bean1.value))
assertEquals("{\"value\":\"2022-06-08 00:00:00\"}", str)
assertEquals(bean.value.getYear(), bean1.value.getYear())
assertEquals(bean.value.getMonthValue(), bean1.value.getMonthValue())
assertEquals(bean.value.getDayOfMonth(), bean1.value.getDayOfMonth())
assertEquals("{\"value\":\"2022-06-08T00:00:00\"}", str)
assertEquals(bean.value.getYear(), bean1.value.getYear())
assertEquals(bean.value.getMonthValue(), bean1.value.getMonthValue())
assertEquals(bean.value.getDayOfMonth(), bean1.value.getDayOfMonth())
assertEquals("{\"value\":\"2022-06-08T00:00:00\"}", str)
assertEquals(bean.value.getYear(), bean1.value.getYear())
assertEquals(bean.value.getMonthValue(), bean1.value.getMonthValue())
assertEquals(bean.value.getDayOfMonth(), bean1.value.getDayOfMonth())
assertEquals("{\"value\":1654617600000}", str)
assertEquals(bean.value.getYear(), bean1.value.getYear())
assertEquals(bean.value.getMonthValue(), bean1.value.getMonthValue())
assertEquals(bean.value.getDayOfMonth(), bean1.value.getDayOfMonth())
assertEquals(1654617600000L, millis(bean1.value))
assertEquals(1612800000L, millis(bean1.value))
assertEquals("{\"value\":\"2022-06-08\"}", str)
assertEquals(bean.value.getYear(), bean1.value.getYear())
assertEquals(bean.value.getMonthValue(), bean1.value.getMonthValue())
assertEquals(bean.value.getDayOfMonth(), bean1.value.getDayOfMonth())
assertEquals("{\"value\":\"20220608\"}", str)
assertEquals(bean.value.getYear(), bean1.value.getYear())
assertEquals(bean.value.getMonthValue(), bean1.value.getMonthValue())
assertEquals(bean.value.getDayOfMonth(), bean1.value.getDayOfMonth())
assertEquals("{\"value\":\"2022-06-08\"}", str)
assertEquals(bean.value.getYear(), bean1.value.getYear())
assertEquals(bean.value.getMonthValue(), bean1.value.getMonthValue())
assertEquals(bean.value.getDayOfMonth(), bean1.value.getDayOfMonth())
assertEquals("{\"value\":1654617600000}", str)
assertEquals(bean.value.getYear(), bean1.value.getYear())
assertEquals(bean.value.getMonthValue(), bean1.value.getMonthValue())
assertEquals(bean.value.getDayOfMonth(), bean1.value.getDayOfMonth())
assertEquals("{\"value\":1654617600}", str)
assertEquals(bean.value.getYear(), bean1.value.getYear())
assertEquals(bean.value.getMonthValue(), bean1.value.getMonthValue())
assertEquals(bean.value.getDayOfMonth(), bean1.value.getDayOfMonth())
assertEquals("{\"value\":\"20220608 00:00:00\"}", str)
assertEquals(bean.value.getYear(), bean1.value.getYear())
assertEquals(bean.value.getMonthValue(), bean1.value.getMonthValue())
assertEquals(bean.value.getDayOfMonth(), bean1.value.getDayOfMonth())
assertEquals("{\"value\":\"20220608\"}", str)
assertEquals(bean.value.getYear(), bean1.value.getYear())
assertEquals(bean.value.getMonthValue(), bean1.value.getMonthValue())
assertEquals(bean.value.getDayOfMonth(), bean1.value.getDayOfMonth())
assertEquals("{\"value\":1654617600000}", str)
assertEquals(1654617600000L, millis(bean1.value))
assertEquals(1654617600000L, millis(bean2.value))
assertEquals("{\"value\":1654617600}", str)
assertEquals(1612800000L, millis(bean1.value))
assertEquals(1654617600000L, millis(bean2.value))
assertEquals("{\"value\":\"2022-06-08\"}", str)
assertEquals(1654617600000L, millis(bean1.value))
assertEquals("{\"value\":\"00:00:00\"}", str)
assertEquals(str, JSON.toJSONString(student))
assertEquals(str, JSON.toJSONString(student, "yyyy-MM-dd"))
assertEquals(str, JSON.toJSONString(student))
assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> JSON.parseObject(date, Today.class))
assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> JSON.parseObject(date, TodayCN.class))
assertAll(() -> JSON.parseObject(date, Today.class))
assertAll(() -> JSON.parseObject(date, TodayCN.class))
assertEquals("{\"value\":\"20220608 19:01:46\"}", str)
assertEquals(1654686106000L, millis(bean1.value))
assertEquals("{\"value\":\"2022-06-08 19:01:46\"}", str)
assertEquals(1654686106000L, millis(bean1.value))
assertEquals(1654686106000L, millis(bean2.value))
assertEquals("{\"value\":\"2022-06-08T19:01:46\"}", str)
assertEquals(1654686106000L, millis(bean1.value))
assertEquals("{\"value\":\"2022-06-08T19:01:46\"}", str)
assertEquals(1654686106000L, millis(bean1.value))
assertEquals("{\"value\":1654686106602}", str)
assertEquals(1654686106602L, millis(bean1.value))
assertNotNull(bean2.value)
assertEquals(1654686106602L, millis(bean2.value))
assertEquals(1654686106602L, millis(bean1.value))
assertEquals(1654686106000L, millis(bean1.value))
assertEquals(1654686106000L, millis(bean1.value))
assertEquals("{\"value\":\"2022-06-08T19:01:46.602+08:00\"}", str)
assertEquals(1654686106602L, millis(bean1.value))
assertEquals("{\"value\":\"20220608\"}", str)
assertEquals(1654617600000L, millis(bean1.value))
assertEquals("{\"value\":\"2022-06-08\"}", str)
assertEquals(1654617600000L, millis(bean1.value))
assertEquals("{\"value\":1654686106602}", str)
assertEquals(1654686106602L, millis(bean1.value))
assertEquals("{\"value\":1654686106}", str)
assertEquals(1654686106000L, millis(bean1.value))
assertEquals("{\"value\":\"20220608 19:01:46\"}", str)
assertEquals(1654686106000L, millis(bean1.value))
assertNotNull(bean2.value)
assertEquals(1654686106000L, millis(bean2.value))
assertNotNull(bean3.value)
assertEquals(1654686106000L, millis(bean3.value))
assertEquals("{\"value\":\"20220608\"}", str)
assertEquals(zdt.getYear(), zdt1.getYear())
assertEquals(zdt.getMonthValue(), zdt1.getMonthValue())
assertEquals(zdt.getDayOfMonth(), zdt1.getDayOfMonth())
assertEquals("{\"value\":1654686106602}", str)
assertEquals(1654686106602L, millis(bean1.value))
assertEquals(1654686106602L, millis(bean2.value))
assertEquals("{\"value\":1654686106}", str)
assertEquals(1654686106000L, millis(bean1.value))
assertEquals(1654686106000L, millis(bean2.value))
assertEquals("{\"value\":\"2022-06-08T19:01:46.602+08:00\"}", str)
assertEquals(1654686106602L, millis(bean1.value))
assertEquals("{\"value\":\"19:01:46\"}", str)
assertEquals(zdt.getHour(), zdt1.getHour())
assertEquals(zdt.getMinute(), zdt1.getMinute())
assertEquals(zdt.getSecond(), zdt1.getSecond())
assertEquals(str, JSON.toJSONString(student))
assertEquals(student.birthday, student1.birthday)
assertEquals(student.birthday, student2.birthday)
assertEquals(student.birthday.getYear(), student1.birthday.getYear())
assertEquals(student.birthday.toInstant().toEpochMilli(), student1.birthday.toInstant().toEpochMilli())
assertEquals(str, JSON.toJSONString(student, JSONWriter.Feature.WriteNulls))
assertEquals(str, JSON.toJSONString(student, "yyyy-MM-dd HH:mm:ss"))
assertEquals(student.birthday.toInstant().getEpochSecond(), student1.birthday.toInstant().getEpochSecond())
assertEquals(student.birthday, student2.birthday)
assertEquals(student.birthday.toInstant().getEpochSecond(), student1.birthday.toInstant().getEpochSecond())
assertEquals(student.birthday, student2.birthday)
assertNotNull(bean.date)
assertEquals(json, JSON.toJSONString(bean))
assertEquals(bean.date, bean2.date)
assertEquals(bean.date, bean3.date)
assertNotNull(bean.date)
assertEquals(json, JSON.toJSONString(bean))
assertEquals(bean.date, bean2.date)
assertEquals(bean.date, bean3.date)
assertEquals("\"yyyy-MM-dd\"", json)
assertEquals(format, format1)
assertEquals("new Date(1324138987429)", str)
assertEquals(date.getTime(), date1.getTime())
assertEquals("{\"date\":\"2011-12-18 00:23:07.429\"}", str)
assertEquals(date.getTime(), date1.getTime())
assertEquals("{\"date\":new Date(1324138987429)}", str)
assertEquals(date.getTime(), date1.getTime())
assertEquals("{\"date\":new Date(1324138987429)}", str)
assertEquals(date.getTime(), date1.getTime())
assertEquals("{\"date\":new Date(1324138987429)}", str)
assertEquals(date.getTime(), date1.getTime())
assertEquals(date.getTime(), date2.getTime())
assertEquals(date.getTime(), date2.getTime())
assertEquals(str, JSON.toJSONString(student))
assertEquals("{\"birthday\":\"2022-05-03 15:26:05\"}", JSON.toJSONString(student))
assertEquals("{\"birthday\":\"2022-05-03 15:26:05\"}", JSON.toJSONString(student2))
assertEquals(str, JSON.toJSONString(student, JSONWriter.Feature.WriteNulls))
assertEquals(str, JSON.toJSONString(student, "yyyy-MM-dd HH:mm:ss"))
assertEquals("{\"time\":\"1970-01-01 12:13:14\"}", str)
assertEquals("{\"time\":\"1970-01-01 12:13:14.000\"}", str)
assertEquals("{\"time\":\"1970-01-01 12:13:14\"}", str)
assertEquals("{\"time\":\"12:13\"}", str)
assertEquals(bean.time.getHour(), bean1.time.getHour())
assertEquals(bean.time.getMinute(), bean1.time.getMinute())
assertEquals(bean.time.getSecond(), bean1.time.getSecond())
assertEquals("{\"time\":\"12:13\"}", str)
assertEquals(bean.time.getHour(), bean1.time.getHour())
assertEquals(bean.time.getMinute(), bean1.time.getMinute())
assertEquals(bean.time.getSecond(), bean1.time.getSecond())
assertEquals(str, JSON.toJSONString(student))
assertEquals(student.birthday.getTime(), student1.birthday.getTime())
assertEquals(str, JSON.toJSONString(student, JSONWriter.Feature.WriteNulls))
assertEquals("{\"birthday\":\"15:26:05\"}", JSON.toJSONString(student, "yyyy-MM-dd HH:mm:ss"))
assertEquals(student.birthday.getTime(), student1.birthday.getTime())
assertEquals(student.birthday.getTime(), student1.birthday.getTime())
assertEquals("{\"date\":\"2017-09-11 00:00:00\"}", str)
assertEquals("{\"date\":\"2017-09-11 00:00:00.000\"}", str)
assertEquals("{\"date\":\"2017-09-11 00:00:00\"}", str)
assertEquals("{\"value\":" + JSON.toJSONString(format.format(v.getValue())) + "}", text)
assertEquals("{\"value\":null}", text)
assertEquals(v1.getValue(), v.getValue())
assertEquals("{\"value\":null}", text)
assertEquals(null, v1.getValue())
assertEquals(str, JSON.toJSONString(student))
assertEquals("{\"birthday\":\"2022-05-03T15:26:05+08:00\"}", JSON.toJSONString(student))
assertEquals(str, JSON.toJSONString(student, JSONWriter.Feature.WriteNulls))
assertEquals(str, JSON.toJSONString(student, "yyyy-MM-dd HH:mm:ss"))
assertEquals("{\"value\":1654686106601}", text)
assertEquals(v1.getValue(), v.getValue())
assertEquals("{\"value\":null}", text)
assertEquals(v1.getValue(), v.getValue())
assertEquals("{\"value\":null}", text)
assertEquals(v1.getValue(), v.getValue())
assertEquals("{\"value\":null}", text)
assertEquals(null, v1.getValue())
assertEquals(1654686106602L, date.getTime())
assertEquals("{\"value\":\"20220608 19:01:46\"}", str)
assertEquals(1654686106000L, millis(bean1.value))
assertEquals("{\"value\":\"2022-06-08 19:01:46\"}", str)
assertEquals(1654686106000L, millis(bean1.value))
assertEquals("{\"value\":\"2022-06-08T19:01:46\"}", str)
assertEquals(1654686106000L, millis(bean1.value))
assertEquals("{\"value\":\"2022-06-08T19:01:46\"}", str)
assertEquals(1654686106000L, millis(bean1.value))
assertEquals("{\"value\":1654686106602}", str)
assertEquals(1654686106602L, millis(bean1.value))
assertEquals(1654686106602L, millis(bean1.value))
assertEquals(1654686106000L, millis(bean1.value))
assertEquals("{\"value\":\"2022-06-08T19:01:46.602+08:00\"}", str)
assertEquals(1654686106602L, millis(bean1.value))
assertEquals("{\"value\":\"20220608\"}", str)
assertEquals(1654617600000L, millis(bean1.value))
assertEquals("{\"value\":\"2022-06-08\"}", str)
assertEquals(1654617600000L, millis(bean1.value))
assertEquals("{\"value\":1654686106602}", str)
assertEquals(1654686106602L, millis(bean1.value))
assertEquals("{\"value\":1654686106}", str)
assertEquals(1654686106, millis(bean1.value))
assertEquals("{\"value\":\"20220608 19:01:46\"}", str)
assertEquals(1654686106000L, millis(bean1.value))
assertEquals("{\"value\":\"20220608\"}", str)
assertEquals(bean.value.getYear(), bean1.value.getYear())
assertEquals(bean.value.getMonthValue(), bean1.value.getMonthValue())
assertEquals(bean.value.getDayOfMonth(), bean1.value.getDayOfMonth())
assertEquals("{\"value\":1654686106602}", str)
assertEquals(1654686106602L, millis(bean1.value))
assertEquals(1654686106602L, millis(bean2.value))
assertEquals("{\"value\":1654686106}", str)
assertEquals(1654686106000L, millis(bean1.value))
assertEquals(1654686106000L, millis(bean2.value))
assertEquals("{\"value\":\"2022-06-08T19:01:46.602+08:00\"}", str)
assertEquals(1654686106602L, millis(bean1.value))
assertEquals("{\"value\":\"19:01:46\"}", str)
assertEquals(bean.value.getHour(), bean1.value.getHour())
assertEquals(bean.value.getMinute(), bean1.value.getMinute())
assertEquals(bean.value.getSecond(), bean1.value.getSecond())
assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> JSON.parseObject(date, Today.class))
assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> JSON.parseObject(date, TodayCN.class))
assertAll(() -> JSON.parseObject(date, Today.class))
assertAll(() -> JSON.parseObject(date, TodayCN.class))
assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> JSON.parseObject(date, Today.class))
assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> JSON.parseObject(date, TodayCN.class))
assertAll(() -> JSON.parseObject(date, Today.class))
assertAll(() -> JSON.parseObject(date, TodayCN.class))
assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> JSON.parseObject(date, Today.class))
assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> JSON.parseObject(date, TodayCN.class))
assertAll(() -> JSON.parseObject(date, Today.class))
assertAll(() -> {
    try (JSONReader reader = JSONReader.of(date)) {
        reader.getContext().setLocale(Locale.CHINESE);
        reader.read(Today.class);
    }
})
assertAll(() -> JSON.parseObject(date, TodayCN.class))
assertEquals("{\"value\":\"20220608 19:01:46\"}", str)
assertEquals(1654686106000L, millis(bean1.value))
assertEquals("{\"value\":\"2022-06-08 19:01:46\"}", str)
assertEquals(1654686106000L, millis(bean1.value))
assertEquals("{\"value\":\"2022-06-08T19:01:46\"}", str)
assertEquals(1654686106000L, millis(bean1.value))
assertEquals("{\"value\":\"2022-06-08T19:01:46\"}", str)
assertEquals(1654686106000L, millis(bean1.value))
assertEquals("{\"value\":1654686106602}", str)
assertEquals(1654686106602L, millis(bean1.value))
assertEquals(1654686106602L, millis(bean1.value))
assertEquals(1654686106000L, millis(bean1.value))
assertEquals("{\"value\":\"2022-06-08T19:01:46.602+08:00\"}", str)
assertEquals(1654686106602L, millis(bean1.value))
assertEquals("{\"value\":\"20220608\"}", str)
assertEquals(1654617600000L, millis(bean1.value))
assertEquals("{\"value\":\"2022-06-08\"}", str)
assertEquals(1654617600000L, millis(bean1.value))
assertEquals("{\"value\":1654686106602}", str)
assertEquals(1654686106602L, millis(bean1.value))
assertEquals("{\"value\":1654686106}", str)
assertEquals(1654686106, millis(bean1.value))
assertEquals("{\"value\":\"20220608 19:01:46\"}", str)
assertEquals(1654686106000L, millis(bean1.value))
assertEquals("{\"value\":\"20220608\"}", str)
assertEquals(bean.value.getYear(), bean1.value.getYear())
assertEquals(bean.value.getMonthValue(), bean1.value.getMonthValue())
assertEquals(bean.value.getDayOfMonth(), bean1.value.getDayOfMonth())
assertEquals("{\"value\":1654686106602}", str)
assertEquals(1654686106602L, millis(bean1.value))
assertEquals(1654686106602L, millis(bean2.value))
assertEquals("{\"value\":1654686106}", str)
assertEquals(1654686106000L, millis(bean1.value))
assertEquals(1654686106000L, millis(bean2.value))
assertEquals("{\"value\":\"2022-06-08T19:01:46.602+08:00\"}", str)
assertEquals(1654686106602L, millis(bean1.value))
assertEquals("{\"value\":\"19:01:46\"}", str)
assertEquals(bean.value.getHour(), bean1.value.getHour())
assertEquals(bean.value.getMinute(), bean1.value.getMinute())
assertEquals(bean.value.getSecond(), bean1.value.getSecond())
assertEquals(str, JSON.toJSONString(student))
assertEquals(student.birthday.getTime(), student1.birthday.getTime())
assertEquals(str, JSON.toJSONString(student, JSONWriter.Feature.WriteNulls))
assertEquals(str, JSON.toJSONString(student, "yyyy-MM-dd"))
assertEquals(student.birthday.getTime(), student1.birthday.getTime())
assertEquals(student.birthday.getTime(), student1.birthday.getTime())
assertEquals(student.birthday.getTime(), student1.birthday.getTime())
assertEquals(str, JSON.toJSONString(student))
assertEquals(student.birthday.getYear(), student1.birthday.getYear())
assertEquals(student.birthday.getMonthValue(), student1.birthday.getMonthValue())
assertEquals(student.birthday.getDayOfMonth(), student1.birthday.getDayOfMonth())
assertEquals(student.birthday.getHour(), student1.birthday.getHour())
assertEquals(student.birthday.getMinute(), student1.birthday.getMinute())
assertEquals(student.birthday.getSecond(), student1.birthday.getSecond())
assertEquals(student.birthday.getNano(), student1.birthday.getNano())
assertEquals(student.birthday.toInstant().toEpochMilli(), student1.birthday.toInstant().toEpochMilli())
assertEquals(str, JSON.toJSONString(student, JSONWriter.Feature.WriteNulls))
assertEquals(str, JSON.toJSONString(student, "yyyy-MM-dd HH:mm:ss"))
assertEquals(s, '"' + zonedDateTime2.toString() + '"')
assertEquals("{\"value\":\"20220608 19:01:46\"}", str)
assertEquals(1654686106000L, bean1.value.getTime())
assertEquals("{\"value\":\"2022-06-08 19:01:46\"}", str)
assertEquals(1654686106000L, bean1.value.getTime())
assertEquals("{\"value\":\"2022-06-08T19:01:46\"}", str)
assertEquals(1654686106000L, bean1.value.getTime())
assertEquals("{\"value\":\"2022-06-08T19:01:46\"}", str)
assertEquals(1654686106000L, bean1.value.getTime())
assertEquals("{\"value\":1654686106602}", str)
assertEquals(1654686106602L, bean1.value.getTime())
assertEquals(1654686106602L, bean1.value.getTime())
assertEquals(1654686106000L, bean1.value.getTime())
assertEquals("{\"value\":\"2022-06-08T19:01:46.602+08:00\"}", str)
assertEquals(1654686106602L, bean1.value.getTime())
assertEquals("{\"value\":\"20220608\"}", str)
assertEquals(1654617600000L, bean1.value.getTime())
assertEquals("{\"value\":\"2022-06-08\"}", str)
assertEquals(1654617600000L, bean1.value.getTime())
assertEquals("{\"value\":1654686106602}", str)
assertEquals(1654686106602L, bean1.value.getTime())
assertEquals("{\"value\":1654686106}", str)
assertEquals(1654686106, bean1.value.getTime())
assertEquals("{\"value\":\"20220608 19:01:46\"}", str)
assertEquals(1654686106000L, bean1.value.getTime())
assertEquals("{\"value\":\"20220608 19:01:46\"}", str)
assertEquals(1654686106000L, bean1.value.getTime().getTime())
assertEquals("{\"value\":\"2022-06-08 19:01:46\"}", str)
assertEquals(1654686106000L, bean1.value.getTime().getTime())
assertEquals("{\"value\":\"2022-06-08T19:01:46\"}", str)
assertEquals(1654686106000L, bean1.value.getTime().getTime())
assertEquals("{\"value\":\"2022-06-08T19:01:46\"}", str)
assertEquals(1654686106000L, bean1.value.getTime().getTime())
assertEquals("{\"value\":1654686106602}", str)
assertEquals(1654686106602L, bean1.value.getTime().getTime())
assertEquals(1654686106602L, bean1.value.getTime().getTime())
assertEquals(1654686106000L, bean1.value.getTime().getTime())
assertEquals("{\"value\":\"2022-06-08T19:01:46.602+08:00\"}", str)
assertEquals(1654686106602L, bean1.value.getTime().getTime())
assertEquals("{\"value\":\"20220608\"}", str)
assertEquals(1654617600000L, bean1.value.getTime().getTime())
assertEquals("{\"value\":\"2022-06-08\"}", str)
assertEquals(1654617600000L, bean1.value.getTime().getTime())
assertEquals("{\"value\":1654686106602}", str)
assertEquals(1654686106602L, bean1.value.getTime().getTime())
assertEquals("{\"value\":1654686106}", str)
assertEquals(1654686106, bean1.value.getTime().getTime())
assertEquals("{\"value\":\"20220608 19:01:46\"}", str)
assertEquals(1654686106000L, bean1.value.getTime().getTime())
assertEquals("{\"date\":\"2017-12-13\",\"dateTime\":\"2017-01-02 12:13:14\"}", JSON.toJSONString(bean))
assertEquals("{\"date\":\"2017-12-13\",\"dateTime\":\"2017-01-02 12:13:14\"}", JSON.toJSONString(bean))
assertEquals("\"2017-12-13 00:00:00\"", JSON.toJSONString(date))
assertEquals("\"2017-12-13\"", JSON.toJSONString(date))
assertNull(JSON.parseObject("{\"date\":\"\"}", Bean.class).date)
assertEquals(2, value.length)
assertEquals(1, ((int[]) value[0])[0])
assertEquals(2, ((int[]) value[1])[0])
assertEquals(2, value.length)
assertEquals(1, ((short[]) value[0])[0])
assertEquals(2, ((short[]) value[1])[0])
assertEquals(2, value.length)
assertEquals(1, ((byte[]) value[0])[0])
assertEquals(2, ((byte[]) value[1])[0])
assertEquals(2, value.length)
assertEquals(1, ((long[]) value[0])[0])
assertEquals(2, ((long[]) value[1])[0])
assertEquals(2, value.length)
assertEquals(1, ((float[]) value[0])[0])
assertEquals(2, ((float[]) value[1])[0])
assertEquals(2, value.length)
assertEquals(1, ((double[]) value[0])[0])
assertEquals(2, ((double[]) value[1])[0])
assertEquals(2, value.length)
assertEquals('1', ((char[]) value[0])[0])
assertEquals('2', ((char[]) value[1])[0])
assertEquals(2, value.length)
assertEquals(1, ((int[]) ((Object[]) value[0])[0])[0])
assertEquals(2, ((int[]) ((Object[]) value[1])[0])[0])
assertEquals(2, value.length)
assertEquals(false, ((boolean[]) value[0])[0])
assertEquals(true, ((boolean[]) value[1])[0])
assertEquals(3, list.size())
assertEquals(101L, list.get(0))
assertEquals(102L, list.get(1))
assertEquals(103L, list.get(2))
assertEquals(123, response.value.id)
assertEquals(1, items.size())
assertEquals(123, items.get(0).id)
assertEquals("\"2013-05-06 12:13:14\"", JSONB.toJSONString(jsonWriter.getBytes()))
assertEquals("\"A\"", JSONB.toJSONString(jsonWriter.getBytes()))
assertEquals("[\n" + "\t1,\n" + "\t2,\n" + "\t3\n" + "]", JSONB.toJSONString(jsonWriter.getBytes()))
assertEquals(5, JSONWriterJSONB.sizeOfInt(Integer.MAX_VALUE))
assertEquals("[262144,18000000]", JSON.toJSONString(result))
assertEquals("[null,null]", JSON.toJSONString((Object[]) path.extract("{}")))
assertEquals("[null,null]", JSON.toJSONString(result))
assertEquals("[null,null]", JSON.toJSONString(result))
assertEquals("{\n" + "\t\"images#0\":[\n" + "\t\t{\n" + "\t\t\t\"height#1\":768,\n" + "\t\t\t\"size#2\":1,\n" + "\t\t\t\"title#3\":\"Javaone Keynote\",\n" + "\t\t\t\"uri#4\":\"http://javaone.com/keynote_large.jpg\",\n" + "\t\t\t\"width#5\":1024\n" + "\t\t},\n" + "\t\t{\n" + "\t\t\t\"#1\":240,\n" + "\t\t\t\"#2\":0,\n" + "\t\t\t\"#3\":\"Javaone Keynote\",\n" + "\t\t\t\"#4\":\"http://javaone.com/keynote_small.jpg\",\n" + "\t\t\t\"#5\":320\n" + "\t\t}\n" + "\t],\n" + "\t\"media#6\":{\n" + "\t\t\"bitrate#7\":262144,\n" + "\t\t\"duration#8\":18000000,\n" + "\t\t\"format#9\":\"video/mpg4\",\n" + "\t\t\"#1\":480,\n" + "\t\t\"persons#10\":[\n" + "\t\t\t\"Bill Gates\",\n" + "\t\t\t\"Steve Jobs\"\n" + "\t\t],\n" + "\t\t\"player#11\":0,\n" + "\t\t\"#2\":58982400,\n" + "\t\t\"#3\":\"Javaone Keynote\",\n" + "\t\t\"#4\":\"http://javaone.com/keynote.mpg\",\n" + "\t\t\"#5\":640\n" + "\t}\n" + "}", new JSONBDump(jsonbBytes, true).toString())
assertEquals(350, jsonbBytes.length)
assertEquals(o.getMedia().getFormat(), o1.getMedia().getFormat())
assertEquals(397, jsonbBytes.length)
assertEquals(o.getMedia().getFormat(), o1.getMedia().getFormat())
assertEquals(223, jsonbBytes.length)
assertEquals(o.getMedia().getFormat(), o1.getMedia().getFormat())
assertEquals(276, jsonbBytes.length)
assertEquals("[262144,18000000]", JSON.toJSONString(result))
assertEquals("[null,null]", JSON.toJSONString(result))
assertEquals("[null,null]", JSON.toJSONString(result))
assertEquals("[null,null]", JSON.toJSONString(result))
assertEquals("[null,null]", JSON.toJSONString(result))
assertEquals("[null,null]", JSON.toJSONString(result))
assertEquals("[null,null]", JSON.toJSONString(result))
assertEquals(jsonbDump, new JSONBDump(jsonbBytes, true).toString())
assertEquals(JSON.toJSONString(object), JSON.toJSONString(object2))
assertEquals(5, refs.size())
assertEquals(JSON.toJSONString(object, JSONWriter.Feature.PrettyFormat), JSON.toJSONString(object1, JSONWriter.Feature.PrettyFormat))
assertEquals(5, refs.size())
assertEquals(JSON.toJSONString(object, JSONWriter.Feature.PrettyFormat), JSON.toJSONString(object1, JSONWriter.Feature.PrettyFormat))
assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> JSON.parseObject(date, Today.class))
assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> {
    try (JSONReader reader = JSONReader.of(date)) {
        reader.getContext().setLocale(Locale.CHINESE);
        reader.read(Today.class);
    }
})
assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> JSON.parseObject(date, TodayCN.class))
assertNotNull(values)
assertEquals(2, values.length)
assertEquals(101L, values[0])
assertEquals("DataWorks", values[1])
assertNotNull(values)
assertEquals(2, values.length)
assertEquals(101L, values[1])
assertEquals("DataWorks", values[0])
assertNull(jsonPath.extract("null"))
assertNotNull(values)
assertEquals(2, values.length)
assertEquals(101L, values[1])
assertEquals("DataWorks", values[0])
assertNotNull(values)
assertEquals(2, values.length)
assertEquals(101L, values[1])
assertEquals("DataWorks", values[0])
assertNotNull(values)
assertEquals(2, values.length)
assertEquals(101L, values[0])
assertEquals("DataWorks", values[1])
assertNull(jsonPath.extract("null"))
assertNull(jsonPath.extract("{\"values\":null}"))
assertNull(jsonPath.extract("{\"id\":123,\"values\":null}"))
assertNull(jsonPath.extract(JSONReader.ofJSONB(JSONB.toBytes(null))))
assertNull(jsonPath.extract(JSONReader.ofJSONB(JSONObject.of("values", null).toJSONBBytes(JSONWriter.Feature.WriteNulls))))
assertNotNull(values)
assertEquals(2, values.length)
assertEquals(101L, values[0])
assertEquals("DataWorks", values[1])
assertNull(jsonPath.extract("[null]"))
assertNotNull(values)
assertEquals(2, values.length)
assertEquals(101L, values[0])
assertEquals("DataWorks", values[1])
assertNull(jsonPath.extract("[1,null]"))
assertNotNull(values)
assertEquals(2, values.length)
assertEquals(101L, values[0])
assertEquals("DataWorks", values[1])
assertNotNull(error)
assertTrue(error.getMessage().contains("p2.x"))
assertNotNull(error)
assertTrue(error.getMessage().contains("p2.x"))
assertArrayEquals(new Object[2], array)
assertEquals("{\"ID\":123,\"NAME\":\"DataWorks\"}", str)
assertEquals(vo.id, vo1.id)
assertEquals(vo.name, vo1.name)
assertTrue(jsonObject instanceof Map)
assertEquals(Throwable.class, throwable.getClass())
assertNotNull(error)
assertNotNull(error2)
assertEquals(Throwable.class, throwable2.getClass())
assertTrue(jsonObject instanceof Map)
assertNotNull(error)
assertTrue(jsonObject instanceof Map)
assertNotNull(error)
assertTrue(jsonObject instanceof Map)
assertNotNull(error)
assertEquals(0, image.optimalHeight)
assertEquals(400, image.optimalHeight)
assertNotNull(error)
assertEquals("101", p31.value)
assertEquals(0, map.size())
assertEquals(0, map.size())
assertEquals(0, map.size())
assertEquals(0, map.size())
assertEquals(0, map.size())
assertEquals(0, map.size())
assertEquals(0, map.size())
assertEquals(0, map.size())
assertEquals(0, map.size())
assertEquals(0, map.size())
assertEquals(0, map.size())
assertEquals(0, map.size())
assertTrue(set.isEmpty())
assertTrue(set.isEmpty())
assertTrue(set.isEmpty())
assertTrue(set.isEmpty())
assertTrue(set.isEmpty())
assertTrue(set.isEmpty())
assertTrue(set.isEmpty())
assertTrue(set.isEmpty())
assertSame(Collections.emptySet(), set)
assertTrue(set.isEmpty())
assertSame(Collections.emptySet(), set)
assertTrue(list.isEmpty())
assertSame(Collections.emptyList(), list)
assertTrue(list.isEmpty())
assertSame(Collections.emptyList(), list)
assertEquals(1, singleton.size())
assertEquals(101, singleton.stream().findFirst().get())
assertEquals(1, singleton.size())
assertEquals(101, singleton.stream().findFirst().get().intValue())
assertEquals(2, a1.data.size())
assertEquals("1001", a1.data.get("id"))
assertEquals("DataWorks", a1.data.get("name"))
assertEquals(2, a1.data.size())
assertEquals("1001", a1.data.get("id"))
assertEquals("DataWorks", a1.data.get("name"))
assertSame(b, b.values.get(0))
assertSame(a1, a1.values.get(0))
assertSame(a2, a2.values.get(0))
assertSame(a3, a3.values.get(0))
assertSame(a4, a4.values.get(0))
assertSame(a5, a5.values.get(0))
assertSame(a6, a6.values.get(0))
assertEquals("\"" + A.class.getName() + "\"", JSON.toJSONString(A.class))
assertNotNull(error)
assertSame(A.class, JSONB.parseObject(jsonbBytes, Class.class, JSONReader.Feature.SupportClassForName))
assertEquals(paramType, paramType1)
assertEquals(paramType, paramType1)
assertEquals("{\"名称\":\"盒马\"}", str)
assertEquals(vo.名称, vo1.名称)
assertNotNull(object)
assertEquals(list2.size(), list.size())
assertEquals(JSON.toJSONString(a), JSON.toJSONString(a1))
assertEquals(JSON.toJSONString(a), JSON.toJSONString(a1))
assertEquals(2, a1.items.size())
assertEquals(2, a1.items.size())
assertEquals(JSON.toJSONString(a), JSON.toJSONString(a1))
assertTrue(a.items.get(0) instanceof Item10)
assertEquals(JSON.toJSONString(a), JSON.toJSONString(a1))
assertSame(b, b.ref)
assertSame(a1, a1.ref)
assertSame(b, b.values[0])
assertSame(a1, a1.values[0])
assertSame(b.c1, b.c2)
assertSame(a1.c1, a1.c2)
assertEquals(bean.values.size(), bean2.values.size())
assertNotNull(bean2.values.get(0).event)
assertNotNull(bean2.values.get(1).event)
assertSame(bean2.values.get(0).event, bean2.values.get(1).event)
assertEquals(bean.values.getClass(), bean2.values.getClass())
assertEquals(bean.values.size(), bean2.values.size())
assertNotNull(bean2.values.get(0).event)
assertNotNull(bean2.values.get(1).event)
assertSame(bean2.values.get(0), bean2.values.get(1))
assertEquals(JSON.toJSONString(a), JSON.toJSONString(a1))
assertEquals(JSON.toJSONString(c), JSON.toJSONString(c1))
assertTrue(c1.list1.get(0) instanceof Item)
assertEquals(JSON.toJSONString(c), JSON.toJSONString(c1))
assertTrue(c1.list1.get(0) instanceof Item)
assertTrue(c1.list2.get(0) instanceof Item)
assertEquals(JSON.toJSONString(b), JSON.toJSONString(b1))
assertEquals(JSON.toJSONString(b), JSON.toJSONString(b1))
assertTrue(b1.list2.get(0) instanceof Item)
assertEquals(JSON.toJSONString(d), JSON.toJSONString(d1))
assertNotNull(a1)
assertSame(a1.a, a1.b)
assertNotNull(a1)
assertSame(a1.a, a1.b)
assertEquals(JSON.toJSONString(a), JSON.toJSONString(a1))
assertEquals(JSON.toJSONString(a), JSON.toJSONString(a1))
assertNotNull(error)
assertTrue(b.get("values") != null)
assertEquals(123, tb.getAb())
assertNotNull(bean2)
assertNotNull(bean2.values)
assertEquals(3, a.unit)
assertEquals(3, JSON.parseObject(str, B.class).id)
assertEquals(3, JSONB.parseObject(bytes, B.class).id)
assertEquals(3, a.id)
assertEquals("{\"catId\":101}", str)
assertEquals("{\"type\":\"Cat\",\"catId\":101}", str2)
Assertions.assertSame(bean.values.getClass(), bean2.values.getClass())
Assertions.assertSame(bean2.values1.entrySet().iterator().next().getValue(), bean2.values.entrySet().iterator().next().getValue())
assertSame(b, b.c1.root)
assertSame(a1, a1.c1.root)
assertSame(b.c, b.values[0])
assertSame(a1.c, a1.values[0])
assertEquals(0, JSON.parseObject("{\"value\":123}".getBytes(StandardCharsets.UTF_8), A.class).id)
assertEquals(0, JSON.parseObject("{\"value\":123,\"name\":\"DataWorks\"}".getBytes(StandardCharsets.UTF_8), A.class).id)
assertEquals(0, JSON.parseObject("{\"value\":123,\"name\":\"DataWorks\"}".getBytes(StandardCharsets.UTF_8), A1.class).id)
assertEquals("DataWorks", JSONPath.of("$.name").extract(JSONReader.of("{\"id\":123,\"name\":\"DataWorks\"}".getBytes(StandardCharsets.UTF_8))))
assertEquals("DataWorks", JSONPath.of("$[1]").extract(JSONReader.of("[123,\"DataWorks\"]".getBytes(StandardCharsets.UTF_8))))
assertEquals("\"int\"", JSON.toJSONString(int.class))
assertEquals("\"java.lang.Integer\"", JSON.toJSONString(Integer.class))
assertEquals(3, list2.size())
assertEquals(list, list2)
assertEquals(orgs.size(), list2.size())
assertEquals(org, list2.get(0))
assertEquals("{}", JSON.toJSONString(a))
assertEquals("{}", JSON.toJSONString(b))
assertEquals("{}", JSON.toJSONString(c))
assertEquals(0, cat.id)
assertEquals(1001, cat.catId)
assertEquals("{\"id\":1001}", str)
assertSame(obj, obj.get("ref"))
assertSame(b, b.ref)
assertSame(a1, a1.ref)
assertSame(obj, obj.getJSONArray("b").get(0))
assertSame(array, array.getJSONArray(0).getJSONArray(0))
assertSame(b.c, b.values.get(0))
assertSame(a1.c, a1.values.get(0))
assertSame(b.c, b.values.get(0))
assertSame(a1.c, a1.values.get(0))
assertEquals("{}", JSON.toJSONString(new HashMap<>()))
assertEquals("{}", JSON.toJSONString(Collections.emptyMap()))
assertEquals("{\"id\":101}", JSON.toJSONString(Collections.singletonMap("id", 101)))
assertEquals("{}", JSON.toJSONString(Collections.unmodifiableMap(new HashMap<>())))
assertEquals("{\"catId\":101}", str)
assertEquals("{\"type\":\"Cat\",\"catId\":101}", str2)
assertEquals("[1001,\"name\"]", array.toString())
assertNotNull(array.getJSONArray(0))
assertEquals("[]", array.getJSONArray(0).toString())
assertNotNull(array.getJSONObject(0))
assertEquals("{}", array.get(0).toString())
assertNotNull(obj)
assertEquals("{\"v0000\":101}", JSON.toJSONString(obj))
assertEquals(Long.valueOf(101), long1.getV0000())
assertNotNull(list)
assertEquals(Integer1.class, list.get(0).getClass())
assertEquals("[{}]", JSON.toJSONString(list))
assertNotNull(map)
assertEquals(Integer1.class, map.get("val").getClass())
assertEquals("{\"val\":{}}", JSON.toJSONString(map))
assertEquals(123L, array.getLongValue(0))
assertEquals(123L, array.getLong(0).longValue())
assertEquals(123, array.getIntValue(0))
assertEquals(123, array.getInteger(0).intValue())
assertEquals("123", array.getString(0))
assertEquals(123L, array.getLongValue(0))
assertEquals(123L, array.getLong(0).longValue())
assertEquals(123, array.getIntValue(0))
assertEquals(123, array.getInteger(0).intValue())
assertEquals("123", array.getString(0))
assertEquals(123L, array.getLongValue(0))
assertEquals(123L, array.getLong(0).longValue())
assertEquals(123, array.getIntValue(0))
assertEquals(123, array.getInteger(0).intValue())
assertEquals("123", array.getString(0))
assertEquals(123L, array.getLongValue(0))
assertEquals(123L, array.getLong(0).longValue())
assertEquals(123, array.getIntValue(0))
assertEquals(123, array.getInteger(0).intValue())
assertEquals("123", array.getString(0))
assertEquals(123L, array.getLongValue(0))
assertEquals(123L, array.getLong(0).longValue())
assertEquals(123, array.getIntValue(0))
assertEquals(123, array.getInteger(0).intValue())
assertEquals("123", array.getString(0))
assertEquals(0L, array.getLongValue(0))
assertEquals(null, array.getLong(0))
assertEquals(0, array.getIntValue(0))
assertEquals(null, array.getInteger(0))
assertEquals(null, array.getString(0))
assertEquals(null, array.getJSONArray(0))
assertEquals(null, array.getJSONObject(0))
assertEquals(123, jsonArray.getIntValue(0))
assertEquals(123L, jsonArray.getLongValue(0))
assertEquals("123", jsonArray.getString(0))
assertEquals(Integer.valueOf(123), jsonArray.getInteger(0))
assertEquals(Long.valueOf(123), jsonArray.getLong(0))
assertEquals(0L, array.getLongValue(0))
assertEquals(null, array.getLong(0))
assertEquals(0, array.getIntValue(0))
assertEquals(null, array.getInteger(0))
assertEquals(null, array.getString(0))
assertEquals(null, array.getJSONArray(0))
assertEquals(null, array.getJSONObject(0))
assertEquals(null, array.getBigInteger(0))
assertEquals(null, array.getBigDecimal(0))
assertEquals(null, array.getDouble(0))
assertEquals(0D, array.getDoubleValue(0))
assertEquals(null, array.getFloat(0))
assertEquals(0F, array.getFloatValue(0))
assertEquals(false, array.getBooleanValue(0))
assertEquals(null, array.getBoolean(0))
assertEquals((short) 0, array.getShortValue(0))
assertEquals(null, array.getShort(0))
assertEquals((byte) 0, array.getByteValue(0))
assertEquals(null, array.getByte(0))
assertEquals(0L, object.getLongValue(0))
assertEquals(null, object.getLong(0))
assertEquals(0, object.getIntValue(0))
assertEquals(null, object.getInteger(0))
assertEquals(null, object.getJSONArray(0))
assertEquals(null, object.getJSONObject(0))
assertEquals(null, object.getBigInteger(0))
assertEquals(null, object.getBigDecimal(0))
assertEquals(null, object.getFloat(0))
assertEquals(null, object.getDouble(0))
assertEquals(null, object.getBoolean(0))
assertEquals(null, object.getByte(0))
assertEquals(null, object.getShort(0))
assertEquals(0, object.getByteValue(0))
assertEquals(0, object.getShortValue(0))
assertEquals(0L, object.getLongValue(0))
assertEquals(null, object.getLong(0))
assertEquals(0, object.getIntValue(0))
assertEquals(null, object.getInteger(0))
assertEquals(null, object.getJSONArray(0))
assertEquals(null, object.getJSONObject(0))
assertEquals(null, object.getBigInteger(0))
assertEquals(null, object.getBigDecimal(0))
assertEquals(null, object.getBoolean(0))
assertEquals(null, object.getFloat(0))
assertEquals(null, object.getDouble(0))
assertEquals(null, object.getByte(0))
assertEquals(null, object.getShort(0))
assertEquals(0, object.getByteValue(0))
assertEquals(0, object.getShortValue(0))
assertEquals(BigInteger.valueOf(12), new JSONArray().fluentAdd(12).getBigInteger(0))
assertEquals(BigInteger.valueOf(12), new JSONArray().fluentAdd((byte) 12).getBigInteger(0))
assertEquals(BigInteger.valueOf(12), new JSONArray().fluentAdd((short) 12).getBigInteger(0))
assertEquals(BigInteger.valueOf(12), new JSONArray().fluentAdd(12L).getBigInteger(0))
assertEquals(BigInteger.valueOf(12), new JSONArray().fluentAdd(12F).getBigInteger(0))
assertEquals(BigInteger.valueOf(12), new JSONArray().fluentAdd(12D).getBigInteger(0))
assertEquals(BigInteger.valueOf(12), new JSONArray().fluentAdd(new BigDecimal("12")).getBigInteger(0))
assertEquals(BigInteger.valueOf(12), new JSONArray().fluentAdd(new BigInteger("12")).getBigInteger(0))
assertEquals(BigInteger.valueOf(12), new JSONArray().fluentAdd("12").getBigInteger(0))
assertEquals(BigDecimal.valueOf(12), new JSONArray().fluentAdd(12).getBigDecimal(0))
assertEquals(BigDecimal.valueOf(12), new JSONArray().fluentAdd((byte) 12).getBigDecimal(0))
assertEquals(BigDecimal.valueOf(12), new JSONArray().fluentAdd((short) 12).getBigDecimal(0))
assertEquals(BigDecimal.valueOf(12), new JSONArray().fluentAdd(12L).getBigDecimal(0))
assertEquals(BigDecimal.valueOf(12F), new JSONArray().fluentAdd(12F).getBigDecimal(0))
assertEquals(BigDecimal.valueOf(12D), new JSONArray().fluentAdd(12D).getBigDecimal(0))
assertEquals(BigDecimal.valueOf(12), new JSONArray().fluentAdd(new BigDecimal("12")).getBigDecimal(0))
assertEquals(BigDecimal.valueOf(12), new JSONArray().fluentAdd(new BigInteger("12")).getBigDecimal(0))
assertEquals(BigDecimal.valueOf(12), new JSONArray().fluentAdd("12").getBigDecimal(0))
assertEquals(BigDecimal.ONE, JSONArray.of(true).getBigDecimal(0))
assertEquals(BigDecimal.ZERO, JSONArray.of(false).getBigDecimal(0))
assertEquals(Float.valueOf(12), new JSONArray().fluentAdd(12).getFloatValue(0))
assertEquals(Float.valueOf(12), new JSONArray().fluentAdd((byte) 12).getFloatValue(0))
assertEquals(Float.valueOf(12), new JSONArray().fluentAdd((short) 12).getFloatValue(0))
assertEquals(Float.valueOf(12), new JSONArray().fluentAdd(12L).getFloatValue(0))
assertEquals(Float.valueOf(12F), new JSONArray().fluentAdd(12F).getFloatValue(0))
assertEquals(Float.valueOf(12), new JSONArray().fluentAdd(12D).getFloatValue(0))
assertEquals(Float.valueOf(12), new JSONArray().fluentAdd(new BigDecimal("12")).getFloatValue(0))
assertEquals(Float.valueOf(12), new JSONArray().fluentAdd(new BigInteger("12")).getFloatValue(0))
assertEquals(Float.valueOf(12), new JSONArray().fluentAdd("12").getFloatValue(0))
assertEquals(Float.valueOf(12), new JSONArray().fluentAdd(12).getFloat(0))
assertEquals(Float.valueOf(12), new JSONArray().fluentAdd((byte) 12).getFloat(0))
assertEquals(Float.valueOf(12), new JSONArray().fluentAdd((short) 12).getFloat(0))
assertEquals(Float.valueOf(12), new JSONArray().fluentAdd(12L).getFloat(0))
assertEquals(Float.valueOf(12F), new JSONArray().fluentAdd(12F).getFloat(0))
assertEquals(Float.valueOf(12), new JSONArray().fluentAdd(12D).getFloat(0))
assertEquals(Float.valueOf(12), new JSONArray().fluentAdd(new BigDecimal("12")).getFloat(0))
assertEquals(Float.valueOf(12), new JSONArray().fluentAdd(new BigInteger("12")).getFloat(0))
assertEquals(Float.valueOf(12), new JSONArray().fluentAdd("12").getFloat(0))
assertEquals(Double.valueOf(12), new JSONArray().fluentAdd(12).getDoubleValue(0))
assertEquals(Double.valueOf(12), new JSONArray().fluentAdd((byte) 12).getDoubleValue(0))
assertEquals(Double.valueOf(12), new JSONArray().fluentAdd((short) 12).getDoubleValue(0))
assertEquals(Double.valueOf(12), new JSONArray().fluentAdd(12L).getDoubleValue(0))
assertEquals(Double.valueOf(12F), new JSONArray().fluentAdd(12F).getDoubleValue(0))
assertEquals(Double.valueOf(12), new JSONArray().fluentAdd(12D).getDoubleValue(0))
assertEquals(Double.valueOf(12), new JSONArray().fluentAdd(new BigDecimal("12")).getDoubleValue(0))
assertEquals(Double.valueOf(12), new JSONArray().fluentAdd(new BigInteger("12")).getDoubleValue(0))
assertEquals(Double.valueOf(12), new JSONArray().fluentAdd("12").getDoubleValue(0))
assertEquals(Double.valueOf(12), new JSONArray().fluentAdd(12).getDouble(0))
assertEquals(Double.valueOf(12), new JSONArray().fluentAdd((byte) 12).getDouble(0))
assertEquals(Double.valueOf(12), new JSONArray().fluentAdd((short) 12).getDouble(0))
assertEquals(Double.valueOf(12), new JSONArray().fluentAdd(12L).getDouble(0))
assertEquals(Double.valueOf(12F), new JSONArray().fluentAdd(12F).getDouble(0))
assertEquals(Double.valueOf(12), new JSONArray().fluentAdd(12D).getDouble(0))
assertEquals(Double.valueOf(12), new JSONArray().fluentAdd(new BigDecimal("12")).getDouble(0))
assertEquals(Double.valueOf(12), new JSONArray().fluentAdd(new BigInteger("12")).getDouble(0))
assertEquals(Double.valueOf(12), new JSONArray().fluentAdd("12").getDouble(0))
assertEquals(Boolean.TRUE, new JSONArray().fluentAdd(1).getBoolean(0))
assertEquals(Boolean.TRUE, new JSONArray().fluentAdd("true").getBoolean(0))
assertEquals(Boolean.FALSE, new JSONArray().fluentAdd(Boolean.FALSE).getBoolean(0))
assertEquals(Boolean.FALSE, new JSONArray().fluentAdd("FALSE").getBoolean(0))
assertEquals(true, new JSONArray().fluentAdd(1).getBooleanValue(0))
assertEquals(true, new JSONArray().fluentAdd("true").getBooleanValue(0))
assertEquals(false, new JSONArray().fluentAdd("FALSE").getBooleanValue(0))
assertEquals(false, new JSONArray().fluentAdd(Boolean.FALSE).getBooleanValue(0))
assertEquals((short) 12, new JSONArray().fluentAdd(12).getShortValue(0))
assertEquals((short) 12, new JSONArray().fluentAdd((byte) 12).getShortValue(0))
assertEquals((short) 12, new JSONArray().fluentAdd((short) 12).getShortValue(0))
assertEquals((short) 12, new JSONArray().fluentAdd(12L).getShortValue(0))
assertEquals((short) 12, new JSONArray().fluentAdd(12F).getShortValue(0))
assertEquals((short) 12, new JSONArray().fluentAdd(12D).getShortValue(0))
assertEquals((short) 12, new JSONArray().fluentAdd(new BigDecimal("12")).getShortValue(0))
assertEquals((short) 12, new JSONArray().fluentAdd(new BigInteger("12")).getShortValue(0))
assertEquals((short) 12, new JSONArray().fluentAdd("12").getShortValue(0))
assertEquals(Short.valueOf((short) 12), new JSONArray().fluentAdd(12).getShort(0))
assertEquals(Short.valueOf((short) 12), new JSONArray().fluentAdd((byte) 12).getShort(0))
assertEquals(Short.valueOf((short) 12), new JSONArray().fluentAdd((short) 12).getShort(0))
assertEquals(Short.valueOf((short) 12), new JSONArray().fluentAdd(12L).getShort(0))
assertEquals(Short.valueOf((short) 12), new JSONArray().fluentAdd(12F).getShort(0))
assertEquals(Short.valueOf((short) 12), new JSONArray().fluentAdd(12D).getShort(0))
assertEquals(Short.valueOf((short) 12), new JSONArray().fluentAdd(new BigDecimal("12")).getShort(0))
assertEquals(Short.valueOf((short) 12), new JSONArray().fluentAdd(new BigInteger("12")).getShort(0))
assertEquals(Short.valueOf((short) 12), new JSONArray().fluentAdd(Short.valueOf((short) 12)).getShort(0))
assertEquals(Short.valueOf((short) 12), new JSONArray().fluentAdd(Byte.valueOf((byte) 12)).getShort(0))
assertEquals(Short.valueOf((short) 12), new JSONArray().fluentAdd("12").getShort(0))
assertEquals((byte) 12, new JSONArray().fluentAdd(12).getByteValue(0))
assertEquals((byte) 12, new JSONArray().fluentAdd((byte) 12).getByteValue(0))
assertEquals((byte) 12, new JSONArray().fluentAdd((short) 12).getByteValue(0))
assertEquals((byte) 12, new JSONArray().fluentAdd(12L).getByteValue(0))
assertEquals((byte) 12, new JSONArray().fluentAdd(12F).getByteValue(0))
assertEquals((byte) 12, new JSONArray().fluentAdd(12D).getByteValue(0))
assertEquals((byte) 12, new JSONArray().fluentAdd(new BigDecimal("12")).getByteValue(0))
assertEquals((byte) 12, new JSONArray().fluentAdd(new BigInteger("12")).getByteValue(0))
assertEquals((byte) 12, new JSONArray().fluentAdd("12").getByteValue(0))
assertEquals(Byte.valueOf((byte) 12), new JSONArray().fluentAdd(12).getByte(0))
assertEquals(Byte.valueOf((byte) 12), new JSONArray().fluentAdd((byte) 12).getByte(0))
assertEquals(Byte.valueOf((byte) 12), new JSONArray().fluentAdd((short) 12).getByte(0))
assertEquals(Byte.valueOf((byte) 12), new JSONArray().fluentAdd(12L).getByte(0))
assertEquals(Byte.valueOf((byte) 12), new JSONArray().fluentAdd(12F).getByte(0))
assertEquals(Byte.valueOf((byte) 12), new JSONArray().fluentAdd(12D).getByte(0))
assertEquals(Byte.valueOf((byte) 12), new JSONArray().fluentAdd(new BigDecimal("12")).getByte(0))
assertEquals(Byte.valueOf((byte) 12), new JSONArray().fluentAdd(new BigInteger("12")).getByte(0))
assertEquals(Byte.valueOf((byte) 12), new JSONArray().fluentAdd(Short.valueOf((short) 12)).getByte(0))
assertEquals(Byte.valueOf((byte) 12), new JSONArray().fluentAdd(Byte.valueOf((byte) 12)).getByte(0))
assertEquals(Byte.valueOf((byte) 12), new JSONArray().fluentAdd("12").getByte(0))
assertNull(JSONArray.of((Object) null).getDate(0))
assertNull(JSONArray.of("").getDate(0))
assertNull(JSONArray.of("null").getDate(0))
assertNull(JSONArray.of(0).getDate(0))
assertNull(JSONArray.of(0L).getDate(0))
assertSame(date, JSONArray.of(date).getDate(0))
assertEquals(date, JSONArray.of(millis).getDate(0))
assertEquals(date, JSONArray.of(Instant.ofEpochMilli(millis)).getDate(0))
assertEquals(ldt.atStartOfDay(ZoneId.systemDefault()).toInstant().toEpochMilli(), date1.getTime())
assertNull(JSONArray.of((Object) null).getInstant(0))
assertNull(JSONArray.of("").getInstant(0))
assertNull(JSONArray.of("null").getInstant(0))
assertNull(JSONArray.of(0).getInstant(0))
assertNull(JSONArray.of(0L).getInstant(0))
assertSame(instant, JSONArray.of(instant).getInstant(0))
assertEquals(instant, JSONArray.of(millis).getInstant(0))
assertEquals(instant, JSONArray.of(new Date(millis)).getInstant(0))
assertEquals(2, array.size())
assertEquals("1", array.get(0))
assertNull(array.get(1))
assertNull(array.getObject(1, String.class))
assertEquals(0D, array.getDoubleValue(1))
assertEquals(0F, array.getFloatValue(1))
assertEquals(false, array.getBooleanValue(1))
assertEquals(array0.get(0), "1")
assertEquals(array1.get(0), "1")
assertEquals(array1.get(1), "2")
assertEquals(array1.get(2), 3)
assertEquals(array2.get(0), 1)
assertEquals(array2.get(1), 2)
assertEquals(array2.get(2), 3)
assertEquals(array2.get(3), 4)
assertEquals(array2.get(4), "5")
assertNotNull(JSONArray.of(new ArrayList<>()).getJSONArray(0))
assertNotNull(JSONArray.of(new HashMap<>()).getJSONObject(0))
assertNull(array.getJSONArray(1))
assertSame(a1, array.getJSONArray(2))
assertNotSame(a2, array.getJSONArray(3))
assertSame(a1, t1.get(0))
assertSame(a2, t1.get(1))
assertSame(array, t1.get(2))
assertEquals(123L, t2.get(0))
assertEquals(456L, t2.get(1))
assertEquals(JSONSchema.Type.Integer, JSONArray.of("integer").getObject(0, JSONSchema.Type.class))
assertEquals(JSONSchema.Type.Integer, JSONArray.of("Integer").getObject(0, JSONSchema.Type.class))
assertNull(JSONArray.of("").getObject(0, UUID.class))
assertNull(JSONArray.of("null").getObject(0, UUID.class))
assertEquals(Integer.valueOf(101), JSONArray.of(101).getObject(0, Number.class))
assertNull(JSONArray.of().fluentAdd(null).getObject(0, (Type) Object.class))
assertEquals(Integer.valueOf(123), JSONArray.of(123).getObject(0, (Type) Object.class))
assertEquals("123", JSONArray.of(123).getObject(0, (Type) String.class))
assertEquals(Integer.valueOf(123), JSONArray.of("123").getObject(0, (Type) Integer.class))
assertEquals(Integer.valueOf(123), JSONArray.of(123).getObject(0, (Type) Number.class))
assertEquals(new ArrayList(), JSONArray.of(new ArrayList()).getObject(0, List.class))
assertEquals("[-1]", array.toString())
assertEquals("[1,2]", array.toString())
assertEquals("[1,2,null,null,3]", array.toString())
assertEquals("[1,2,null,null,-1]", array.toString())
assertEquals("[1,2,null,-2,-1]", array.toString())
assertEquals("[-6,1,2,null,-2,-1]", array.toString())
assertEquals("[-6,1,2,null,-2,-1]", array.toString())
assertEquals("[-6,1,2,null,-2,-1]", array.toString())
assertEquals("2022-09-24 17:14:03.321", JSONArray.of(new Date(1664010843321L)).getString(0))
assertEquals("2022-09-24 17:14:03.32", JSONArray.of(new Date(1664010843320L)).getString(0))
assertEquals("2022-09-24 17:14:03.3", JSONArray.of(new Date(1664010843300L)).getString(0))
assertEquals("2022-09-24 17:14:03", JSONArray.of(new Date(1664010843000L)).getString(0))
assertEquals("[[1]]", root.toString())
assertEquals("[{\"id\":123}]", root.toString())
assertEquals(3, strings.size())
assertEquals("1", strings.get(0))
assertEquals("2", strings.get(1))
assertEquals("3", strings.get(2))
assertEquals("{\"id\":101}", jsonWriter.toString())
assertEquals("{\"id\":101}", jsonWriter.toString())
assertEquals("{\"id\":101}", jsonWriter.toString())
assertEquals("\"101\"", jsonWriter.toString())
assertEquals("101", jsonWriter.toString())
assertEquals("101", jsonWriter.toString())
assertEquals("{\"names\":[\"1\",\"2\"]}", jsonWriter.toString())
assertEquals("{\"names\":[\"1\",\"2\"]}", jsonWriter.toString())
assertEquals("{\"names\":[\"1\",\"2\"]}", jsonWriter.toString())
assertEquals("{\"names\":[1,2]}", jsonWriter.toString())
assertEquals("{\"value\":12.0}", jsonWriter.toString())
assertEquals("{\"value\":12.0}", jsonWriter.toString())
assertEquals("{\"value\":true}", jsonWriter.toString())
assertEquals("{\"value\":true}", jsonWriter.toString())
assertEquals("{\"value\":\"12\"}", JSON.toJSONString(new Bean("12")))
assertEquals("{\"value\":1}", JSON.toJSONString(new Bean(BigDecimal.ONE)))
assertEquals("{\"value\":[1]}", JSON.toJSONString(new Bean(new BigDecimal[] { BigDecimal.ONE })))
assertEquals("{\"value\":1.00}", JSON.toJSONString(new Bean1(BigDecimal.ONE)))
assertEquals("{\"value\":[1.00]}", JSON.toJSONString(new Bean1(new BigDecimal[] { BigDecimal.ONE })))
assertEquals("{\"value\":[1.00]}", JSON.toJSONString(new Bean2(new BigDecimal[] { BigDecimal.ONE })))
assertNull(filter.apply("Integer", Integer.class, 0))
assertEquals(Bean.class, filter.apply(Bean.class.getName(), Bean.class, 0))
assertEquals(Bean.class, filter.apply(Bean.class.getName(), Bean.class, 0))
assertEquals(int.class, filter.apply("int", null, 0))
assertEquals(String.class, filter.apply("java.lang.String", null, 0))
assertEquals("{\"user-id\":10}", JSON.toJSONString(bean, filter))
assertEquals(Bean.class, context.getBeanClass())
assertEquals(int.class, context.getFieldClass())
assertEquals(int.class, context.getFieldType())
assertEquals(Bean.class.getField("id"), context.getField())
assertEquals("userId", context.getAnnotation(JSONField.class).name())
assertEquals(null, context.getFormat())
assertEquals(null, context.getLabel())
assertEquals(0, context.getFeatures())
assertEquals("{\"id_1_2\":1001}", str)
assertEquals("{\"gender\":\"男\",\"id\":100}", str)
assertEquals("{\"gender\":\"男\",\"xid\":100}", JSON.toJSONString(bean))
assertEquals("{\"\":123}", JSON.toJSONString(Collections.singletonMap("", 123), new PascalNameFilter()))
assertEquals("{\"Id\":123}", JSON.toJSONString(a, new PascalNameFilter()))
assertEquals("{\"id\":123}", JSON.toJSONString(new JSONObject().fluentPut("id", 123).fluentPut("name", "DataWorks"), new SimplePropertyPreFilter("id")))
assertEquals("{\"id\":123,\"name\":\"DataWorks\"}", JSON.toJSONString(new JSONObject().fluentPut("id", 123).fluentPut("name", "DataWorks"), new SimplePropertyPreFilter(JSONObject.class)))
assertNull(filter.getClazz())
assertEquals(0, filter.getMaxLevel())
assertEquals(1, filter.getMaxLevel())
assertEquals("{\"value\":{}}", JSON.toJSONString(new JSONObject().fluentPut("value", new JSONObject().fluentPut("id", 123).fluentPut("name", "DataWorks")), filter))
assertEquals("{\"id\":123}", JSON.toJSONString(new JSONObject().fluentPut("id", 123).fluentPut("name", "DataWorks"), filter))
assertEquals("{\"name\":\"DataWorks\"}", JSON.toJSONString(new JSONObject().fluentPut("id", 123).fluentPut("name", "DataWorks"), filter))
assertNotNull(filter.getClazz())
assertEquals("{}", JSON.toJSONString(new JSONObject().fluentPut("value", new JSONObject().fluentPut("id", 123).fluentPut("name", "DataWorks")), filter))
assertEquals("{\"id\":123}", JSON.toJSONString(JSONObject.of(), filter))
assertEquals("{\"value\":\"xx\",\"id\":123}", JSON.toJSONString(JSONObject.of("value", "xx"), filter))
assertEquals("{\"id\":123,\"oid\":101}", JSON.toJSONString(a, filter))
assertEquals("{\"id\":123}", JSON.toJSONString(JSONObject.of(), filter))
assertEquals("{\"id\":123,\"value\":\"xx\"}", JSON.toJSONString(JSONObject.of("value", "xx"), filter))
assertEquals("{\"oid\":101,\"id\":123}", JSON.toJSONString(a, filter))
assertFalse(context.isEnabled(JSONReader.Feature.UseNativeObject))
assertFalse(jsonReader.nextIfSet())
assertFalse(JSONPath.of("$.length()").isRef())
assertFalse(JSONPath.of("$..b").isRef())
assertFalse(JSONPath.of("$.v0001").contains(vo))
assertFalse(JSONPath.of("$.xx").contains(JSONObject.of("id", 123)))
assertFalse(JSONPath.of("$[1]").contains(JSONArray.of("id")))
assertFalse(JSONPath.of("$[0].v0000").contains(new Object[] { Arrays.asList(new Integer1()) }))
assertFalse(JSONPath.of("$[0].v0000").contains(Arrays.asList(Arrays.asList(new Integer1()))))
assertFalse(JSONPath.of("$[0].v0000").contains(new JSONArray().fluentAdd(new Object[] { new Integer1() })))
assertFalse(JSON.parseObject(json, BooleanValue1.class).isV0000())
assertFalse(JSON.parseObject(jsonBytes, BooleanValue1.class).isV0000())
assertFalse(JSONB.parseObject(jsonbBytes, BooleanValue1.class).isV0000())
assertFalse(proxy.isName())
assertFalse(jsonObject.containsKey("id"))
assertFalse(jsonObject.containsValue("id"))
assertFalse(singleton.isEmpty())
assertFalse(singleton.isEmpty())
assertFalse(c1.list2.get(0) instanceof Item)
assertFalse(b1.list2.get(0) instanceof Item)
assertFalse(d1.list2.get(0) instanceof Item)
assertEquals("{\"userId\":11}", JSON.toJSONString(bean, filter))
assertEquals(Bean.class, context.getBeanClass())
assertEquals(int.class, context.getFieldClass())
assertEquals(int.class, context.getFieldType())
assertEquals(Bean.class.getField("id"), context.getField())
assertEquals(null, context.getMethod())
assertEquals("userId", context.getAnnotation(JSONField.class).name())
assertEquals(null, context.getFormat())
assertEquals(null, context.getLabel())
assertEquals(0, context.getFeatures())
assertEquals("userId", context.getName())
assertFalse(context.isJsonDirect())
assertEquals("{\"userId\":11}", JSON.toJSONString(bean, filter))
assertEquals(Bean1.class, context.getBeanClass())
assertEquals(int.class, context.getFieldClass())
assertEquals(int.class, context.getFieldType())
assertEquals(Bean1.class.getMethod("getId"), context.getMethod())
assertEquals(null, context.getField())
assertEquals("userId", context.getAnnotation(JSONField.class).name())
assertEquals(null, context.getFormat())
assertEquals(null, context.getLabel())
assertEquals(FieldInfo.FIELD_MASK, context.getFeatures())
assertEquals("userId", context.getName())
assertFalse(context.isJsonDirect())
assertEquals("{\"id\":111}", str)
assertEquals("{\"gender\":\"男\",\"id\":100}", str)
assertEquals("{\"gender\":\"男\",\"id\":100}", str)
assertEquals("{\"v0\":100,\"v1\":101}", string)
assertEquals("{\"v2\":102,\"v3\":103}", string)
assertEquals("{\"gender\":\"男\",\"id\":100}", str)
assertEquals("{\"gender\":\"男\",\"id\":100}", str)
assertEquals("123", jsonWriter.toString())
assertEquals("USD", amount.getCurrency().getCurrencyCode())
assertEquals(amount, amount1)
assertEquals(2000, numberValue.intValue())
assertEquals(1000, numberValue1.intValue())
assertEquals("null", JSON.toJSONString(jsonNull))
assertEquals(jsonStr, JSON.toJSONString(json))
assertEquals(jsonStr, JSON.toJSONString(json, JSONWriter.Feature.FieldBased))
assertNotNull(bean2)
assertEquals(101, triple.getLeft())
assertEquals(102, triple.getMiddle())
assertEquals(103, triple.getRight())
assertNotNull(bean2)
assertEquals(101, triple.getLeft())
assertEquals(102, triple.getMiddle())
assertEquals(103, triple.getRight())
assertEquals(101, triple.getLeft())
assertEquals(102, triple.getMiddle())
assertEquals(103, triple.getRight())
assertEquals(101, triple.getLeft())
assertEquals(102, triple.getMiddle())
assertEquals(103, triple.getRight())
assertEquals("12:13:14", a.value.toString())
assertEquals("12:13:14", a1.value.toString())
assertEquals("{\"value\":\"12:13:14\"}", JSON.toJSONString(a))
assertEquals("{\"value\":null}", JSON.toJSONString(new A(), JSONWriter.Feature.WriteNulls))
assertEquals(a.value, a2.value)
assertEquals(b.value, b1.value)
assertEquals(b.value, b2.value)
assertEquals(b.value, b1.value)
assertEquals(now, ts1.toLocalDateTime())
assertEquals(now.getNano(), ts1.toLocalDateTime().getNano())
assertEquals(now, ts2.toLocalDateTime())
assertEquals(now.getNano(), ts2.toLocalDateTime().getNano())
assertEquals(b.value, b1.value)
assertEquals(ts, ts1)
assertEquals(ts.getNanos(), ts1.toLocalDateTime().getNano())
assertEquals(ts, ts2)
assertEquals(ts.getNanos(), ts2.toLocalDateTime().getNano())
assertEquals(2012, c.value.toLocalDateTime().getYear())
assertEquals(12, c.value.toLocalDateTime().getMonthValue())
assertEquals(d.value.toString(), d2.value.toString())
assertEquals(2012, e.value.toLocalDate().getYear())
assertEquals(12, e.value.toLocalDate().getMonthValue())
assertEquals("{}", JSON.toJSONString(object))
assertEquals("{}", JSON.toJSONString(JSONB.parse(JSONB.toBytes(object))))
assertEquals("[]", JSON.toJSONString(array))
assertEquals("[]", JSON.toJSONString(JSONB.parse(JSONB.toBytes(array))))
assertEquals(2, a.values.size())
assertEquals(Integer.valueOf(1), a.values.get("a"))
assertEquals(Integer.valueOf(2), a.values.get("b"))
assertEquals(2, b.values.size())
assertEquals("1", b.values.get("a"))
assertEquals("2", b.values.get("b"))
assertEquals(2, a.values.size())
assertEquals(2, b.values.size())
assertEquals("1", b.values.get(0))
assertEquals("2", b.values.get(1))
assertEquals(2, a.values.size())
assertEquals(2, b.values.size())
assertEquals("1", b.values.iterator().next())
assertEquals("{\"CId\":\"2\"}", JSON.toJSONString(vo))
assertEquals("{\"cId\":\"2\"}", JSON.toJSONString(vo))
assertEquals("abc", JSON.parseObject("{\"uId\":\"abc\"}", C.class).uId)
assertEquals("abc", JSON.parseObject("{\"UId\":\"abc\"}", C.class).uId)
assertNotNull(object)
assertEquals(1, object.size())
assertEquals("mask", object.get("name"))
assertEquals("{\"code\":{\"code\":\"00\",\"msgId\":\"SUCCESS\"}}", JSON.toJSONString(genericResult))
assertEquals("{\"abc\":\"A\",\"int32\":10,\"int64\":100}", s)
assertEquals("abc", result)
assertEquals("{\"items\":[{\"data\":{\"0\":\"设置成功\"}}]}", JSON.toJSONString(data))
assertEquals("{\"items\":[{\"data\":[\"设置成功\"]}]}", JSON.toJSONString(data))
assertEquals("{\"obj\":{\"5\":\"设置成功\"}}", JSONObject.toJSONString(data))
assertEquals("{\"obj\":[null,null,null,null,null,\"设置成功\"]}", JSONObject.toJSONString(data))
assertEquals("{\"obj\":{\"2\":{\"5\":\"设置成功\"}}}", JSONObject.toJSONString(data))
assertEquals("{\"obj\":[null,null,[null,null,null,null,null,\"设置成功\"]]}", JSONObject.toJSONString(data))
assertEquals("[{\"children\":[{\"children\":[]},{\"children\":[]}]}]", JSONArray.toJSONString(elements, JSONWriter.Feature.ReferenceDetection))
assertNotNull(str)
assertEquals(2, object1.size())
assertEquals("[1,2,3]", JSONPath.extract(str, "$.age").toString())
assertEquals("[\"John\"]", JSONPath.extract(str, "$.firstName", JSONPath.Feature.AlwaysReturnList).toString())
assertEquals("[\"iPhone\",\"home\"]", JSONPath.of("$.phoneNumbers.type", JSONPath.Feature.AlwaysReturnList).eval(object).toString())
assertEquals("[\"iPhone\",\"home\"]", JSONPath.extract(str, "$.phoneNumbers.type", JSONPath.Feature.AlwaysReturnList).toString())
assertEquals(expected, JSONPath.of(path, JSONPath.Feature.AlwaysReturnList).eval(object).toString())
assertEquals(expected, JSONPath.extract(str, path, JSONPath.Feature.AlwaysReturnList).toString())
assertEquals("{\"value\":\"QUJDREVH\"}", json)
assertArrayEquals(model.value, model1.value)
assertEquals("{\"value\":\"QUJDREVH\"}", json)
assertArrayEquals(bean.value, bean1.value)
assertEquals("{\"value\":\"QUJDREVH\"}", json)
assertArrayEquals(bean.value, bean1.value)
assertEquals("{\"value\":\"QUJDREVH\"}", json)
assertArrayEquals(bean.value, bean1.value)
assertEquals("{\"value\":\"QUJDREVH\"}", json)
assertArrayEquals(bean.value, bean1.value)
assertEquals(101, bean.type)
assertEquals(101, JSON.parseObject("{\"type\":101}", Bean1.class).type)
assertEquals(101, JSON.parseObject("{\"type\":101}", Bean2.class).type)
assertEquals(101, JSON.parseObject("{\"type\":101}", Bean3.class).type)
assertEquals("{\"list\":[{\"prop1\":\"test prop 1\",\"prop2\":\"test prop 2\"}]}", s1)
assertEquals("{\"list\":[{\"prop1\":\"test prop 1\",\"prop2\":\"test prop 2\"}]}", s2)
assertEquals("b", a.get("a"))
assertEquals("b", b.get("a"))
assertEquals("{\"id\":\"1038\"}", res1)
assertEquals("{\"id\":\"1039\"}", res2)
assertEquals("{\"code\":\"111\",\"order\":111}", JSON.toJSONString(sysTestData))
assertEquals("{\"PName\":\"test\"}", json)
assertEquals(bean.pName, bean1.pName)
assertEquals("{\"pName\":\"test\"}", json)
assertEquals(bean.pName, bean1.pName)
assertEquals(1, object.size())
assertEquals(1, object.get("abc"))
assertEquals(1, object.size())
assertEquals(1, object.get("abc"))
assertEquals(1, object.size())
assertEquals(1, object.get("abc"))
assertEquals(1, object.size())
assertEquals(1, object.get("abc"))
assertEquals(1, object.size())
assertEquals(1, object.get(0))
assertEquals(3, object.size())
assertEquals(1, object.get(0))
assertEquals(2, object.get(1))
assertEquals(3, object.get(2))
assertEquals(1, object.size())
assertEquals(1, object.stream().findFirst().get())
assertEquals(3, object.size())
assertEquals("a", object.stream().findFirst().get())
assertNull(bean.getItems())
assertNull(bean.items)
assertNull(bean.getItems())
assertNull(bean.items)
assertTrue(bean.values.isEmpty())
assertTrue(bean.values.isEmpty())
assertNotNull(bean1)
assertNotNull(bean2)
assertEquals("[eeee, ffff, eeee]", Arrays.toString(details))
assertEquals(new BigDecimal("6000"), bean.salaryStart)
assertEquals(new BigDecimal("9000"), bean.salaryEnd)
assertEquals(new BigDecimal("6000"), bean1.salaryStart)
assertEquals(new BigDecimal("9000"), bean1.salaryEnd)
assertEquals("{\"aaa\":\"bbb\"}", JSON.toJSONString(Pair.of("aaa", "bbb")))
assertEquals("{\"left\":\"aaa\",\"right\":\"bbb\"}", JSON.toJSONString(Pair.of("aaa", "bbb"), JSONWriter.Feature.WritePairAsJavaBean))
assertEquals("aaa", pair.getLeft())
assertEquals("bbb", pair.getRight())
assertEquals("aaa", pair.getLeft())
assertEquals("bbb", pair.getRight())
assertEquals(123, pair.getRight())
assertEquals(123, pair.getRight())
assertEquals(123, pair.getRight())
assertEquals(123, pair.getRight())
assertEquals(123, pair.getRight())
assertEquals(123, pair.getRight())
assertNotNull(resp)
assertEquals("GRASS_SQUARE_FLOWER", resp.roomType)
assertEquals("{\"age\":20,\"name\":\"张三\",\"userType\":1}", JSON.toJSONString(user))
assertFalse(jsonSchema.isValid(JSON.parse("123456")))
assertFalse(jsonSchema.isValid(JSON.parse("[]")))
assertFalse(jsonSchema.isValid(JSON.parse("{ \"key\": \"value\" }")))
assertFalse(jsonSchema.isValid(JSON.parse("\"I am a string\"")))
assertFalse(jsonSchema.isValid(JSON.parse("123456")))
assertFalse(jsonSchema.isValid(JSON.parse("[]")))
assertFalse(jsonSchema.isValid(JSON.parse("{ \"key\": \"value\" }")))
assertFalse(jsonSchema.isValid(JSON.parse("\"I am a string\"")))
assertEquals("{\"0\":\"0\"}", s)
assertEquals("[\"0\"]", s)
assertNotNull(bean)
assertNotNull(bean.image)
assertEquals(70961, bean.image.getFileSize())
assertEquals("CtYBMzA2OTAyMDEwMjA0NjIzMDYwMDIwMTAwMDIwNGI3ZmU0MDZlMDIwMzBmNTliMTAyMDQ1YzliNTQ3NzAyMDQ1YzM3M2NiYzA0MjQ2NjM0MzgzNTM0NjEzNTY1MmQzNDYxMzQzODJkMzQzMTYxNjEyZDM5NjEzOTM2MmQ2MTM2NjQ2NDY0NjUzMDY2NjE2NjM1MzcwMjAxMDAwMjAzMDExNTQwMDQxMDUwZGU4ZTVhZThmZmU0ZjFkZjdhOTM4NDFmNzE5OTNhMDIwMTAyMDIwMTAwMDQwMBI4TkRkZk1UWTRPRGcxTVRBek1ETXlORFF6TWw4eE9UUTVOamN6TkRZMlh6RTFORGN4TWpNNU1ERT0aIGEwNGQwYWUyM2JlYzQ3NzQ5MjZhNWZjMjk0ZTEyNTkz", bean.image.getSdkFileId())
assertEquals("50de8e5ae8ffe4f1df7a93841f71993a", bean.image.getMd5sum())
assertNotNull(dto)
assertEquals(1, dto.checkedSkuList.get(0).cartType)
assertEquals(1, list.size())
assertEquals(1, list.get(0))
assertEquals(1, list.size())
assertEquals(1L, list.get(0))
assertEquals("{\"method0\":{\"declaringClass\":\"com.alibaba.fastjson2.issues.Issue597$Service\",\"name\":\"f0\",\"parameterTypes\":[]},\"method1\":{\"declaringClass\":\"com.alibaba.fastjson2.issues.Issue597$Service\",\"name\":\"f1\",\"parameterTypes\":[\"java.lang.String\"]},\"target\":{}}", string)
assertNotNull(invoker1)
assertEquals(invoker.method0, invoker1.method0)
assertEquals(invoker.method1, invoker1.method1)
assertEquals("[[\"com.alibaba.fastjson2.issues.Issue597$Service\",\"f0\",[]],[\"com.alibaba.fastjson2.issues.Issue597$Service\",\"f1\",[\"java.lang.String\"]],[]]", string)
assertNotNull(invoker1)
assertEquals(invoker.method0, invoker1.method0)
assertEquals(invoker.method1, invoker1.method1)
assertNotNull(invoker1)
assertEquals(invoker.method0, invoker1.method0)
assertEquals(invoker.method1, invoker1.method1)
assertNotNull(invoker1)
assertEquals(invoker.method0, invoker1.method0)
assertEquals(invoker.method1, invoker1.method1)
assertEquals("\"Object\"", JSON.toJSONString(JSONSchema.Type.Object, JSONWriter.Feature.WriteEnumsUsingName))
assertArrayEquals(wrapper.parameterTypes, parse.parameterTypes)
assertArrayEquals(wrapper.parameterTypes, parse.parameterTypes)
assertTrue(object.containsKey(1))
assertEquals(101, object.get(1))
assertEquals("test", object.get("a"))
assertEquals("\"Accepted\"", str)
assertEquals("{\"type\":\"Pending\"}", str)
assertEquals(2, queryCondition.pNum)
assertEquals(2, queryCondition2.pNum)
assertNull(JSON.parseObject("\"\"", byte[].class))
assertNull(JSON.parseObject("\"\"", short[].class))
assertNull(JSON.parseObject("\"\"", int[].class))
assertNull(JSON.parseObject("\"\"", long[].class))
assertNull(JSON.parseObject("\"\"", float[].class))
assertNull(JSON.parseObject("\"\"", double[].class))
assertNull(JSON.parseObject("\"\"", boolean[].class))
assertNull(JSON.parseObject("\"\"", Byte[].class))
assertNull(JSON.parseObject("\"\"", Short[].class))
assertNull(JSON.parseObject("\"\"", Integer[].class))
assertNull(JSON.parseObject("\"\"", Long[].class))
assertNull(JSON.parseObject("\"\"", Float[].class))
assertNull(JSON.parseObject("\"\"", Double[].class))
assertNull(JSON.parseObject("\"\"", Boolean[].class))
assertNull(JSON.parseObject("\"\"", Object[].class))
assertNull(a.type)
assertNull(a1.type)
assertNull(a2.type)
assertNull(a3.type)
assertEquals("{\"UserId\":101}", str)
assertEquals(101, object.get("UserId"))
assertEquals("{\"user_name\":\"john\",\"user_age\":20,\"city_name\":\"beijing\"}", JSON.toJSONString(jsonObject, NameFilter.of(PropertyNamingStrategy.LowerCaseWithUnderScores)))
assertEquals("{\n" + "\t\"user_name\":\"john\",\n" + "\t\"user_age\":20,\n" + "\t\"city_name\":\"beijing\"\n" + "}", JSON.toJSONString(jsonObject, NameFilter.of(PropertyNamingStrategy.LowerCaseWithUnderScores), JSONWriter.Feature.PrettyFormat))
assertEquals(20.7F, t.xSpeed)
assertEquals("bug", t.aName)
assertEquals("{\"value\":1001}", JSON.toJSONString(bean))
assertNull(bean.testProperty)
assertNull(bean.testProperty)
assertNotNull(testJson.getJSONObject("result"))
assertNull(testJson.getJSONObject("result2"))
assertEquals("{}", JSONObject.of("a", null).toString(JSONWriter.Feature.NullAsDefaultValue))
assertEquals("HK GOLD香港黄金", dto.goodsName)
assertEquals("100.00", dto.goodsPrice.toString())
assertEquals(map, map2)
assertEquals("[0.0,0.0,0.1,null,null,null]", JSON.toJSONString(a))
assertEquals("null", JSON.toJSONString(Float.NaN))
assertEquals("null", JSON.toJSONString(Float.POSITIVE_INFINITY))
assertEquals("null", JSON.toJSONString(Float.NEGATIVE_INFINITY))
assertEquals(10, JSONPath.of("$.x\\-limit").eval(object))
assertEquals(10, JSONPath.of("$['x-limit']").eval(object))
assertEquals("{\"0\":\"0\"}", JSON.toJSONString(map))
assertEquals("{\"0\":\"0\"}", new String(JSON.toJSONBytes(map)))
assertEquals("{\"value\":\"0\",\"value1\":\"0.11\"}", JSON.toJSONString(t))
assertEquals("{\"value\":\"0\",\"value1\":\"0.11\"}", new String(JSON.toJSONBytes(t)))
assertEquals("{\"0\":\"0.11\"}", JSON.toJSONString(map))
assertEquals("{\"0\":\"0.11\"}", new String(JSON.toJSONBytes(map)))
assertEquals("[{\"transaction\":{\"message\":{\"accountKeys\":[\"1a\",\"2b\",\"3c\"]}}}]", JSONPath.eval(object, "$.transactions[?(@.transaction.message.accountKeys.contains('1a'))]").toString())
assertEquals("[{\"transaction\":{\"message\":{\"accountKeys\":[\"4d\",\"5e\",6]}}}]", JSONPath.eval(object, "$.transactions[?(@.transaction.message.accountKeys.contains(6))]").toString())
assertEquals("[{\"transaction\":{\"message\":{\"accountKeys\":[7.1,8.2,9.0]}}}]", JSONPath.eval(object, "$.transactions[?(@.transaction.message.accountKeys.contains(9))]").toString())
assertEquals("[{\"transaction\":{\"message\":{\"accountKeys\":[10]}}}]", JSONPath.eval(object, "$.transactions[?(@.transaction.message.accountKeys.contains(10))]").toString())
assertEquals("[{\"transaction\":{\"message\":{\"accountKeys\":[11]}}}]", JSONPath.eval(object, "$.transactions[?(@.transaction.message.accountKeys.contains(11))]").toString())
assertEquals("[{\"transaction\":{\"message\":{\"accountKeys\":[12.0]}}}]", JSONPath.eval(object, "$.transactions[?(@.transaction.message.accountKeys.contains(12))]").toString())
assertNull(JSON.parseObject("\"\"", LocalDateTime.class))
assertNull(JSON.parseObject("\"null\"", LocalDateTime.class))
assertNull(JSON.parseObject("null", LocalDateTime.class))
assertNull(JSONObject.of("datetime", "").getObject("datetime", LocalDateTime.class))
assertNull(JSON.parseObject("\"\"", LocalDate.class))
assertNull(JSON.parseObject("\"null\"", LocalDate.class))
assertNull(JSON.parseObject("null", LocalDate.class))
assertNull(JSONObject.of("datetime", "").getObject("datetime", LocalDate.class))
assertNull(JSON.parseObject("\"\"", LocalTime.class))
assertNull(JSON.parseObject("\"null\"", LocalTime.class))
assertNull(JSON.parseObject("null", LocalTime.class))
assertNull(JSONObject.of("datetime", "").getObject("datetime", LocalTime.class))
assertNull(JSON.parseObject("\"\"", ZonedDateTime.class))
assertNull(JSON.parseObject("\"null\"", Instant.class))
assertNull(JSON.parseObject("null", ZonedDateTime.class))
assertNull(JSONObject.of("datetime", "").getObject("datetime", ZonedDateTime.class))
assertNull(JSON.parseObject("\"\"", Instant.class))
assertNull(JSON.parseObject("\"null\"", Instant.class))
assertNull(JSON.parseObject("null", Instant.class))
assertNull(JSONObject.of("datetime", "").getObject("datetime", Instant.class))
assertNull(JSON.parseObject("\"\"", Date.class))
assertNull(JSON.parseObject("\"null\"", Date.class))
assertNull(JSON.parseObject("null", Date.class))
assertNull(JSONObject.of("datetime", "").getObject("datetime", Date.class))
assertNull(JSON.parseObject("\"\"", Calendar.class))
assertNull(JSON.parseObject("\"null\"", Calendar.class))
assertNull(JSON.parseObject("null", Calendar.class))
assertNull(JSONObject.of("datetime", "").getObject("datetime", Calendar.class))
assertNull(JSON.parseObject("\"\"", java.sql.Date.class))
assertNull(JSON.parseObject("\"null\"", java.sql.Date.class))
assertNull(JSON.parseObject("null", java.sql.Date.class))
assertNull(JSONObject.of("datetime", "").getObject("datetime", java.sql.Date.class))
assertNull(JSON.parseObject("\"\"", java.sql.Timestamp.class))
assertNull(JSON.parseObject("\"null\"", java.sql.Timestamp.class))
assertNull(JSON.parseObject("null", java.sql.Timestamp.class))
assertNull(JSONObject.of("datetime", "").getObject("datetime", java.sql.Timestamp.class))
assertNull(JSON.parseObject("\"\"", java.sql.Time.class))
assertNull(JSON.parseObject("\"null\"", java.sql.Time.class))
assertNull(JSON.parseObject("null", java.sql.Time.class))
assertNull(JSONObject.of("datetime", "").getObject("datetime", java.sql.Time.class))
assertNull(JSON.parseObject("{\"date\":\"\"}", Bean1.class).date)
assertNull(JSON.parseObject("{\"date\":\"null\"}", Bean1.class).date)
assertNull(JSON.parseObject("{\"date\":null}", Bean1.class).date)
assertNull(JSON.parseObject("{\"date\":\"\"}", Bean2.class).date)
assertNull(JSON.parseObject("{\"date\":\"null\"}", Bean2.class).date)
assertNull(JSON.parseObject("{\"date\":null}", Bean2.class).date)
assertNull(JSON.parseObject("{\"date\":\"\"}", Bean3.class).date)
assertNull(JSON.parseObject("{\"date\":\"null\"}", Bean3.class).date)
assertNull(JSON.parseObject("{\"date\":null}", Bean3.class).date)
assertNull(JSON.parseObject("{\"date\":\"\"}", Bean4.class).date)
assertNull(JSON.parseObject("{\"date\":\"null\"}", Bean4.class).date)
assertNull(JSON.parseObject("{\"date\":null}", Bean4.class).date)
assertEquals(JSON_STR, json)
assertEquals(STR, JSON.parse(json))
assertEquals("{\"id\":0}", str)
assertTrue(schema.isValid(JSONObject.of("longitude", 120.1552, "latitude", 30.2741)))
assertTrue(schema.isValid(new Point(120.1552, 30.2741)))
assertEquals("1", bean.roleList.get(0))
assertEquals("1", bean1.roleList.get(0))
assertEquals(null, bean1.roleList.get(1))
assertEquals("1", bean2.roleList.get(0))
assertEquals(null, bean2.roleList.get(1))
assertEquals("1", bean3.roleList.get(0))
assertEquals("2", bean3.roleList.get(1))
assertEquals(0, loginUser.menuSet.size())
assertEquals(0, loginUser.authorities.size())
assertNotNull(JSON.parseObject("{\"date\":\"2022-09-07T12:38:31\"}", Bean.class).date)
assertNotNull(JSON.parseObject("{\"date\":\"2022-09-07T12:38:31\"}".getBytes(StandardCharsets.UTF_8), Bean.class).date)
assertNotNull(JSON.parseObject("{\"date\":\"2022/09/07T12:38:31\"}", Bean.class).date)
assertNotNull(JSON.parseObject("{\"date\":\"2022/09/07T12:38:31\"}".getBytes(StandardCharsets.UTF_8), Bean.class).date)
assertNotNull(JSON.parseObject("{\"date\":\"2022-09-07T12:38:31.000+08:00\"}", Bean.class, JSONReader.Feature.SupportSmartMatch).date)
assertNotNull(JSON.parseObject("{\"date\":\"2022-09-07T12:38:31.000+08:00\"}".getBytes(StandardCharsets.UTF_8), Bean.class, JSONReader.Feature.SupportSmartMatch).date)
assertNotNull(JSON.parseObject("{\"date\":\"2022-09-07T12:38:31.000+08:00\"}", Bean2.class, JSONReader.Feature.SupportSmartMatch).date)
assertNotNull(JSON.parseObject("{\"date\":\"2022-09-07T12:38:31.000+08:00\"}".getBytes(StandardCharsets.UTF_8), Bean2.class, JSONReader.Feature.SupportSmartMatch).date)
assertEquals("uu", user.userName)
assertEquals("1", server.id)
assertEquals("127.0.0.1", server.externalIp)
assertEquals(0D, server.totalMem)
assertEquals(0D, server.freeMem)
assertEquals("1", server1.id)
assertEquals("127.0.0.1", server1.externalIp)
assertEquals(15D, server1.totalMem)
assertEquals(3D, server1.freeMem)
assertEquals(0, server1.runningAnalytics.size())
assertEquals(1, result.size())
assertEquals(1, result.size())
assertEquals(1, result.size())
assertEquals(1, result.size())
assertEquals("{\"updateTime\":\"2022-09-16 03:24:41.438\"}", JSON.toJSONString(taskRecord))
assertEquals("\"2022-09-16 03:24:41.438\"", JSON.toJSONString(taskRecord.getUpdateTime()))
assertEquals("\"2022-09-16 03:24:41.438\"", JSON.toJSONString(taskRecord.getUpdateTime(), JSONWriter.Feature.OptimizedForAscii))
assertEquals("{}", JSON.toJSONString(jsonNode))
assertEquals(2, strlistCache.size())
assertEquals("11", strlistCache.get(0))
assertEquals("22", strlistCache.get(1))
assertEquals(responseBody, JSON.toJSONString(alipayAuthenticationMO))
assertEquals("{\"success\":true}", string)
assertEquals(bean.isSuccess, bean1.isSuccess)
assertEquals("{\"success\":true}", string)
assertEquals(bean.isSuccess, bean1.isSuccess)
assertEquals(bean.isSuccess, bean1.isSuccess)
assertEquals(str, "{\"id\":123}")
assertEquals("{\"date\":\"2017-06-28 00:00:00\"}", JSON.toJSONString(bean))
assertEquals("{\"date\":\"2017-06-28 00:00:00\"}", JSON.toJSONString(bean, "yyyy-MM-dd"))
assertEquals("{\"date\":\"2017-06-28\"}", JSON.toJSONString(bean))
assertEquals("{\"date\":\"2017-06-28\"}", JSON.toJSONString(bean, "yyyy-MM-dd"))
assertEquals("{\"date\":\"2017-06-28\"}", JSON.toJSONString(bean))
assertEquals("{\"date\":\"2017-06-28\"}", JSON.toJSONString(bean, "yyyy-MM-dd HH:mm:ss"))
assertEquals("[1]", JSON.toJSONString(JSONPath.of("$.v1[*].v2[*].v3.v4").extract(JSONReader.of("{\"v1\":[{\"v2\":[{\"v3\":{\"v4\":1}}]}]}"))))
assertEquals("[1]", JSON.toJSONString(JSONPath.of("$.v1[*].v2[*].v3.v4").eval(JSON.parseObject("{\"v1\":[{\"v2\":[{\"v3\":{\"v4\":1}}]}]}"))))
assertEquals("{\"msg\":\"\"}", JSON.toJSONString(bean, JSONWriter.Feature.NullAsDefaultValue))
assertEquals(123456789, startPack.qq)
assertEquals("xxx", startPack.name)
assertNull(startPack.reg)
assertNull(startPack.groups)
assertNull(startPack.qqList)
assertNull(bean.values)
assertNull(bean.values)
assertNull(bean.values)
assertNull(bean.values)
assertNotNull(tdCreditVO)
assertNotNull(tdCreditVO.data)
assertEquals("479", tdCreditVO.data.fScore)
assertEquals("{\"status\":\"12345678\"}", JSON.toJSONString(t))
assertTrue(writerCount > 0)
assertEquals(12345678, v.getStatus())
assertTrue(readerCount > 0)
assertEquals("{\"status\":[\"12345678\"]}", JSON.toJSONString(t))
assertTrue(writerCount > 0)
assertEquals(12345678, v.getStatus()[0])
assertEquals(position.getClass(), position1.getClass())
assertEquals("{\"type\":\"大\"}", json)
assertEquals("{\"AGE_B1\":12,\"NAME_V1\":\"z\"}", res)
assertEquals("{\"Age_B1\":12,\"Name_V1\":\"z\"}", res)
assertEquals("{\"Age-B1\":12,\"Name-V1\":\"z\"}", res)
assertEquals("{\"Age.B1\":12,\"Name.V1\":\"z\"}", res)
assertEquals("{\"Age B1\":12,\"Name V1\":\"z\"}", res)
assertEquals("{\"Age_b1\":12,\"Name_v1\":\"z\"}", res)
assertEquals("ABCEE2306d883e85bb733a50f045925f", rsp.getAccessToken())
assertEquals(3, map.size())
assertEquals(2, map3.size())
assertFalse(schema.isValid(JSONObject.of("longitude", 220.1552, "latitude", 30.2741)))
assertFalse(schema.isValid(new Point(120.1552, 130.2741)))
assertFalse(vr.isSuccess())
assertNotNull(vr.getMessage())
assertNotNull(result2)
assertEquals("[\"21025318\",\"21025345\"]", result2.toJSONString())
assertEquals("[\"21025318\",\"21025345\"]", result3.toString())
assertEquals("{\"type\":\"Big\"}", JSON.toJSONString(bean))
assertEquals("{\n" + "\t\"type\":\"Big\"\n" + "}", JSONB.toJSONString(JSONB.toBytes(bean)))
assertEquals("{\"type\":\"Big\"}", JSON.toJSONString(bean))
assertEquals("{\n" + "\t\"type\":\"Big\"\n" + "}", JSONB.toJSONString(JSONB.toBytes(bean)))
assertEquals(localTest1.getLocalDate(), localTest2.getLocalDate())
assertEquals(1, json.toJavaObject(Map.class).size())
assertEquals(1, JSON.toJavaObject(json, Map.class).size())
assertEquals(1, JSON.toJavaObject(str, Map.class).size())
assertEquals("[{\"item\":{\"name\":\"testtt\"},\"name\":\"test\"},{\"item\":{\"$ref\":\"$[0].item\"},\"name\":\"test\"},{\"item\":{\"$ref\":\"$[0].item\"},\"name\":\"test\"},{\"item\":{\"$ref\":\"$[0].item\"},\"name\":\"test\"}]", result)
assertSame(list2.get(0).item, list2.get(1).item)
assertSame(list3.get(0).item, list3.get(1).item)
assertSame(list3.get(0).item, list3.get(1).item)
assertSame(list3.get(0).item, list3.get(1).item)
assertSame(list4.get(0).item, list4.get(1).item)
assertEquals("[\n" + "\t{\n" + "\t\t\"item\":{\n" + "\t\t\t\"name\":\"testtt\"\n" + "\t\t},\n" + "\t\t\"name\":\"test\"\n" + "\t},\n" + "\t{\n" + "\t\t\"item\":{\"$ref\":\"$[0].item\"},\n" + "\t\t\"name\":\"test\"\n" + "\t},\n" + "\t{\n" + "\t\t\"item\":{\"$ref\":\"#-1\"},\n" + "\t\t\"name\":\"test\"\n" + "\t},\n" + "\t{\n" + "\t\t\"item\":{\"$ref\":\"#-1\"},\n" + "\t\t\"name\":\"test\"\n" + "\t}\n" + "]", result)
assertSame(list2.get(0).item, list2.get(1).item)
assertEquals("13fee3000dddc", thirdCommonResult.getTaskId())
assertTrue(JSON.isValid(jsonArrayStr))
assertTrue(JSON.isValid(jsonObjectStr))
assertTrue(JSON.isValidArray(jsonArrayStr))
assertTrue(JSON.isValid(value))
assertEquals(text, JSON.toJSONString(user))
assertEquals(DD.class, user.c.getClass())
assertEquals(DD.class, user.d.getClass())
assertNotNull(dto)
assertNotNull(dto1)
assertSame(objectWriter, objectWriter1)
assertNotSame(objectWriter, objectWriter2)
assertSame(objectReader, objectReader1)
assertNotSame(objectReader, objectReader2)
assertSame(objectWriter, objectWriter1)
assertNotSame(objectWriter, objectWriter2)
assertSame(objectWriter, objectWriter1)
assertNotSame(objectWriter, objectWriter2)
assertSame(objectWriter, objectWriter1)
assertNotSame(objectWriter, objectWriter2)
assertSame(objectWriter, objectWriter1)
assertSame(objectWriter, objectWriter2)
assertSame(objectWriter, objectWriter1)
assertNotSame(objectWriter, objectWriter2)
assertSame(objectWriter, objectWriter1)
assertSame(objectWriter, objectWriter1)
assertSame(objectReader, objectReader1)
assertNotSame(objectReader, objectReader2)
assertSame(objectReader, objectReader1)
assertNotSame(objectReader, objectReader2)
assertSame(objectReader, objectReader1)
assertNotSame(objectReader, objectReader2)
assertSame(objectReader, objectReader1)
assertNotSame(objectReader, objectReader2)
assertSame(objectReader, objectReader1)
assertNotSame(objectReader, objectReader2)
assertSame(objectReader, objectReader1)
assertNotSame(objectReader, objectReader2)
assertEquals("{\"currency\":\"CNY\"}", str)
assertEquals(1654134285000L, bean.getDate1().getTime())
assertEquals(1654134286000L, bean.getDate1().getTime())
assertEquals(1654134286001L, bean.getDate1().getTime())
assertEquals(1654134285000L, bean.getDate1().getTime())
assertEquals(1654134286000L, bean.getDate1().getTime())
assertEquals(1654134285000L, bean.date1.getTime())
assertEquals(1654134286000L, bean.date1.getTime())
assertEquals(1654134286001L, bean.date1.getTime())
assertEquals("{\"dv\":{\"dv\":{\"dv\":{\"$ref\":\"$\"},\"name\":\"1\"},\"name\":\"2\"},\"name\":\"0\"}", json1)
assertEquals(0L, date.getTime())
assertEquals(0, object.to(Bean.class).date.getTime())
assertSame(statusCode, statusCode1)
assertTrue(o instanceof String[])
assertArrayEquals(split, (String[]) o)
assertArrayEquals(split, (String[]) o)
assertArrayEquals(split, (String[][]) o)
assertArrayEquals(split, (String[][]) o1)
assertArrayEquals(split, (String[][]) o)
assertArrayEquals(split, (String[][]) o1)
assertArrayEquals(split, (String[][]) o)
assertArrayEquals(split, (String[][]) o1)
assertEquals(new BigDecimal("1.111"), bean.data)
assertEquals(1, InstantReader.INSTANCE.count.get())
assertEquals(new BigDecimal("1.111"), bean.data)
assertEquals(1, InstantReader.INSTANCE.count.get())
assertEquals(new BigDecimal("1.111"), bean.data)
assertEquals(1, InstantReader.INSTANCE.count.get())
Assertions.assertFalse(JSON.isValidArray(jsonObjectStr))
Assertions.assertFalse(JSON.isValidArray(value))
assertFalse(JSON.parseObject("{\"value\":\"\"}", Bean.class).value)
assertFalse(JSON.parseObject("{\"value\":\"null\"}", Bean.class).value)
assertFalse(JSON.parseObject("{\"value\":\"\"}").to(Bean.class).value)
assertFalse(JSON.parseObject("{\"value\":\"null\"}").to(Bean.class).value)
assertNull(JSON.parseObject("{\"value\":\"\"}", Bean1.class).value)
assertNull(JSON.parseObject("{\"value\":\"null\"}", Bean1.class).value)
assertNull(JSON.parseObject("{\"value\":\"\"}").to(Bean1.class).value)
assertNull(JSON.parseObject("{\"value\":\"null\"}").to(Bean1.class).value)
assertEquals("{\n" + "\t\"@type\":\"com.alibaba.fastjson2.issues.Issue752$Bean\",\n" + "\t\"param\":[\n" + "\t\t\"int\",\n" + "\t\t\"int\"\n" + "\t]\n" + "}", JSONB.toJSONString(bytes))
assertArrayEquals(bean.param, bean1.param)
assertEquals(1662950912, JSON.parseObject(str).get("visit_time"))
assertEquals(1662950912, JSON.parseObject(chars).get("visit_time"))
assertEquals(1662950912, JSON.parseObject(bytes).get("visit_time"))
assertEquals(1662950912, JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.UTF_8).get("visit_time"))
assertEquals(1662950912, JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.US_ASCII).get("visit_time"))
assertEquals(1662950912, JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.ISO_8859_1).get("visit_time"))
assertNotNull(bean)
assertEquals(4, bean.getData().size())
assertEquals("测试公司", test.getDeptName())
assertEquals("测试公司", test.getDeptName())
assertEquals("zhangsan", bean.name)
assertEquals(1, bean.books.size())
assertEquals("西游记", bean.books.get(0))
assertEquals("zhangsan", bean.name)
assertEquals(1, bean.books.size())
assertEquals("西游记", bean.books.get(0))
assertEquals("zhangsan", bean.name)
assertEquals(1, bean.books.size())
assertEquals("西游记", bean.books.get(0))
assertEquals("zhangsan", bean.name)
assertEquals(1, bean.books.size())
assertEquals("西游记", bean.books.get(0))
assertEquals("zhangsan", bean.name)
assertEquals(1, bean.books.size())
assertEquals("西游记", bean.books.get(0))
assertEquals("{\"date\":\"2022-06-15\"}", JSON.toJSONString(bean))
assertEquals("{\"date\":\"2022-06-15\"}", JSON.toJSONString(bean, "yyyy-MM-dd HH:mm:ss"))
assertEquals("{\"date\":\"2022-06-15\"}", JSON.toJSONString(bean, "millis"))
assertEquals("{\"date\":\"2022-06-15\"}", JSON.toJSONString(bean, "iso8601"))
assertEquals("{\"guId\":\"abc\"}", str)
assertEquals("abc", dto2.getGuId())
Assert.assertEquals(json1A, json1B)
Assert.assertEquals("{\"c\":\"c value\"}", json2)
Assert.assertEquals("{\"a\":null,\"b\":null,\"c\":\"c value\"}", json3)
Assert.assertEquals("{\"a\":null,\"b\":\"b value\",\"c\":null}", json4)
assertEquals("{\"tShirtType\":[\"Sweater Vest\"]}", JSON.toJSONString(clothing))
assertEquals("{\"remark\":\"支付订单\",\"value\":1}", text)
assertEquals("{\"remark\":\"支付订单\",\"value\":1}", text)
assertEquals("{\"userid\":101}", str)
assertEquals(101, object.get("userid"))
assertEquals(1453528763137919643L, jsonPath.extract(parser))
assertNull(JSONPath.eval(object, "$[?(@.c =~ /a+/)]"))
assertEquals("ddd", JSONPath.eval(object, "$..c.min()"))
assertEquals("[]", JSONPath.eval(object, "$..b[?(@.c == 12)]").toString())
assertEquals("[1,\"Hello world\",1,2,3,4,5,2,3,\"ddd\"]", JSONPath.eval(object, "$..*").toString())
assertNotNull(bean)
assertEquals(2, bean.items.size())
assertNull(bean.items.get(0))
assertNull(bean.items.get(1))
assertNotNull(bean)
assertEquals(2, bean.items.size())
assertNull(bean.items.get(0))
assertNull(bean.items.get(1))
assertNotNull(bean)
assertEquals(2, bean.items.size())
assertNull(bean.items.get(0))
assertNull(bean.items.get(1))
assertNotNull(bean)
assertEquals(2, bean.items.size())
assertNull(bean.items.get(0))
assertNull(bean.items.get(1))
assertNotNull(bean)
assertEquals(2, bean.items.size())
assertNull(bean.items.get(0))
assertNull(bean.items.get(1))
assertNotNull(bean)
assertEquals(2, bean.items.size())
assertNull(bean.items.get(0))
assertNull(bean.items.get(1))
assertNotNull(bean)
assertEquals(2, bean.items.size())
assertNull(bean.items.get(0))
assertNull(bean.items.get(1))
assertEquals(bean.id, bean1.id)
assertEquals(bean.values.size(), bean1.values.size())
assertEquals(1, bean.values.size())
assertEquals(101, bean.values.get(0))
assertNotNull(result)
assertEquals("[\"30.40.202.23\",\"美国 俄亥俄州哥伦布市国防部网络信息中心\"]", result.toString())
assertNotNull(result)
assertEquals("[\"30.40.202.23\",\"美国 俄亥俄州哥伦布市国防部网络信息中心\"]", result.toString())
assertNull(admin.password)
assertNotNull(parse)
assertNotNull(parse)
assertEquals("{\"a\":180,\"b\":1}", JSON.toJSONString(u, JSONWriter.Feature.FieldBased))
assertEquals("{\"success\":true}", JSON.toJSONString(response, JSONWriter.Feature.WriteNullListAsEmpty))
assertEquals("{\"success\":true}", JSON.toJSONString(response))
assertEquals("{\"success\":true}", JSON.toJSONString(response, JSONWriter.Feature.BrowserCompatible))
assertEquals(2022, zdt.getYear())
assertEquals(12, zdt.getMonthValue())
assertEquals(7, zdt.getDayOfMonth())
assertEquals(10, zdt.getHour())
assertEquals(55, zdt.getMinute())
assertEquals(19, zdt.getSecond())
assertEquals(json, JSON.toJSONString(bean, new JSONWriter.Context(fmt)))
assertEquals(bean.date.getTime(), bean1.date.getTime())
assertEquals(bean.date.getTime(), bean2.date.getTime())
assertEquals(json, JSON.toJSONString(bean, new JSONWriter.Context(fmt)))
assertEquals(bean.date.getTime(), bean1.date.getTime())
assertEquals(bean.date.getTime(), bean2.date.getTime())
assertEquals(json, JSON.toJSONString(bean, new JSONWriter.Context(fmt)))
assertEquals(bean.date.getTime(), bean1.date.getTime())
assertEquals(bean.date.getTime(), bean2.date.getTime())
assertEquals(bean.date.getTime(), bean3.date.getTime())
assertEquals(1, JSON.parseObject(str).get("type_number"))
assertEquals(1, JSON.parseObject(bytes).get("type_number"))
assertEquals(1, JSON.parseObject(bytes, 0, bytes.length).get("type_number"))
assertEquals(1, JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.US_ASCII).get("type_number"))
assertEquals(1, JSON.parseObject(utf16Bytes, 0, utf16Bytes.length, StandardCharsets.UTF_16).get("type_number"))
assertEquals(1, jsonReaderStr.read(JSONObject.class).get("type_number"))
assertEquals("{\"b\":false,\"a\":false}", JSON.toJSONString(bean))
assertEquals("{\"height\":185.5,\"name\":\"MASON\",\"age\":20,\"adult\":true,\"weight\":145.5}", peopleStr)
assertNotNull(bean.data)
assertEquals("123465", test)
assertEquals(1, list1.size())
assertEquals(list.get(0), list1.get(0))
assertNotNull(bean.data)
assertEquals("123465", test)
assertEquals(list.size(), list2.size())
assertEquals(list.get(0), list2.get(0))
assertEquals(list.get(1), list2.get(1))
assertEquals(list.size(), list2.size())
assertEquals(list.get(0), list2.get(0))
assertEquals(list.get(1), list2.get(1))
assertEquals(list.size(), list2.size())
assertEquals(list.get(0), list2.get(0))
assertEquals(list.get(1), list2.get(1))
assertEquals(str, Character.toString(a))
assertEquals(a, b)
assertEquals(rt1, rt2)
assertTrue(JSONPath.contains(jsonObject, "$.a1"))
assertFalse(JSONPath.contains(jsonObject, "$.a2"))
assertTrue(JSONPath.contains(jsonObject, "$.a1"))
assertFalse(JSONPath.contains(jsonObject, "$.a2"))
assertTrue(JSONPath.contains(jsonObject, "$.a1.a2"))
assertTrue(JSONPath.contains(jsonObject, "$.a1"))
assertTrue(JSONPath.contains(jsonObject, "$.a1.a2"))
assertTrue(JSONPath.contains(jsonObject, "$.a1.a2.a3"))
assertNull(enterpriseCloudServiceVO.cloudStyle)
assertNull(enterpriseCloudServiceVO.cloudStyle)
assertEquals("{\n" + "\t\"passengerId\":\"220802200005217748\",\n" + "\t\"firstName\":\"Hong\",\n" + "\t\"lastName\":\"Test\",\n" + "\t\"age\":99,\n" + "\t\"telephone\":\"13104362222\"\n" + "}", pretty)
assertEquals("{\n" + "\t\"age\":99,\n" + "\t\"firstName\":\"Hong\",\n" + "\t\"lastName\":\"Test\",\n" + "\t\"passengerId\":\"220802200005217748\",\n" + "\t\"telephone\":\"13104362222\"\n" + "}", pretty)
assertEquals("{\n" + "\t\"age\":99,\n" + "\t\"firstName\":\"Hong\",\n" + "\t\"lastName\":\"Test\",\n" + "\t\"passengerId\":\"220802200005217748\",\n" + "\t\"telephone\":\"13104362222\"\n" + "}", new String(prettyBytes))
assertEquals("lisi", p.name)
assertEquals(12, p.extra.get("age"))
assertEquals(13, p.extra.get("age"))
assertEquals("lisi", p.name)
assertEquals(12, p.extra.get("age"))
assertEquals(13, p.extra.get("age"))
assertEquals("200", responseMO.Status)
assertEquals("{\"1\":2,\"3\":4}", object.toString())
assertEquals("{\"1\":2,\"2\":null,\"3\":4}", object.toString(JSONWriter.Feature.WriteMapNullValue))
assertEquals("\"2022-06-29 13:12:30.452\"", str)
assertEquals("\"2022-06-29 13:12:30.452\"", str)
assertEquals("\"2022-06-29 13:12:30.452\"", str)
assertEquals("{}", json)
assertEquals(1, jsonObject.size())
assertEquals(101, jsonObject.get("item_id"))
assertEquals(1, jsonObject.size())
assertEquals(101, jsonObject.get("item_id"))
assertEquals(1, jsonObject.size())
assertEquals(101, jsonObject.get("itemId"))
assertEquals(101, jsonObject.getJSONArray("items").getJSONObject(0).get("itemId"))
assertEquals(101, jsonObject.getJSONArray("items").getJSONObject(0).get("itemId"))
assertEquals(102, jsonObject.getJSONArray("items").getJSONObject(0).get("item_id"))
assertEquals(102, jsonObject.getJSONObject("root").getJSONArray("items").getJSONArray(0).getJSONObject(0).get("item_id"))
assertEquals(102, jsonObject.getJSONObject("root").getJSONArray("items").getJSONArray(0).getJSONObject(0).get("itemId"))
assertEquals("{\"age\":101,\"name\":\"DataWorks\",\"score\":102.0,\"tags\":[\"abc\"]}", str)
assertEquals(bean.age, bean1.age)
assertEquals(bean.name, bean1.name)
assertEquals(bean.score, bean1.score)
assertArrayEquals(bean.tags, bean1.tags)
assertEquals("{\"ID\":101}", str)
assertEquals(1, object.id)
assertEquals("Name", object.name)
assertEquals("User name", object.userName)
assertEquals("{\"id\":1,\"name\":\"Name\",\"user_name\":\"User name\"}", result)
assertNull(bean.date)
assertNull(JSON.parseObject("{\"date\":\"\"}").to(Bean.class).date)
assertNull(bean.date)
assertNull(JSON.parseObject("{\"date\":\"\"}").to(Bean1.class).date)
assertEquals("[{\"value\":0.28,\"hb\":-0.04}]", JSON.toJSONString(fastjsonRes))
assertTrue(bean.value)
assertEquals(2, list.size())
assertEquals("1", list.get(0))
assertEquals("2", list.get(1))
assertEquals(2, array.length)
assertEquals("1", array[0])
assertEquals("2", array[1])
assertEquals(2, array.length)
assertEquals("1", array[0])
assertEquals("2", array[1])
assertEquals(2, list.size())
assertEquals("1", list.get(0))
assertEquals("2", list.get(1))
assertEquals(2, list.size())
assertEquals("1", list.get(0))
assertEquals("2", list.get(1))
assertEquals("{\"id\":10}", JSON.toJSONString(bean))
assertEquals("{\"id\":10}", JSON.toJSONString(bean))
assertEquals("20221020144047985V4EMPSB512", entity.id)
assertEquals("3", entity.type)
assertEquals("{\"validDate\":\"2022-05-27\"}", str)
assertEquals(vo.validDate, vo2.validDate)
assertEquals(vo.validDate, vo3.validDate)
assertEquals("{}", JSON.toJSONString(JSONObject.of(), JSONFactory.createWriteContext()))
assertEquals("{}", JSON.toJSONString(JSONObject.of(), (JSONWriter.Context) null))
assertEquals("{}", JSONB.toJSONString(JSONB.toBytes(JSONObject.of(), JSONFactory.createWriteContext())))
assertEquals("{}", JSONB.toJSONString(JSONB.toBytes(JSONObject.of(), (JSONWriter.Context) null)))
assertEquals("19", row)
assertEquals("C", col)
assertNotNull(result)
assertEquals("[\"19\",\"C\"]", result.toString())
assertFalse(JSON.isEnabled(JSONReader.Feature.SupportSmartMatch))
assertTrue(JSONFactory.createReadContext().isEnabled(JSONReader.Feature.SupportSmartMatch))
assertTrue(JSON.isEnabled(JSONReader.Feature.SupportSmartMatch))
assertFalse(JSONFactory.createReadContext().isEnabled(JSONReader.Feature.SupportSmartMatch))
assertFalse(JSON.isEnabled(JSONReader.Feature.SupportSmartMatch))
assertTrue(JSON.isEnabled(JSONReader.Feature.SupportSmartMatch))
assertFalse(JSON.isEnabled(JSONReader.Feature.SupportSmartMatch))
assertFalse(JSON.isEnabled(JSONWriter.Feature.MapSortField))
assertTrue(JSONFactory.createWriteContext().isEnabled(JSONWriter.Feature.MapSortField))
assertTrue(JSON.isEnabled(JSONWriter.Feature.MapSortField))
assertFalse(JSONFactory.createWriteContext().isEnabled(JSONWriter.Feature.MapSortField))
assertFalse(JSON.isEnabled(JSONWriter.Feature.MapSortField))
assertTrue(JSON.isEnabled(JSONWriter.Feature.MapSortField))
assertFalse(JSON.isEnabled(JSONWriter.Feature.MapSortField))
assertEquals("{\"a\":\"\",\"c\":\"1\"}", JSON.toJSONString(b, valueFilter, JSONWriter.Feature.WriteNulls))
assertEquals("{\"values\":\"\"}", JSON.toJSONString(bean, valueFilter, JSONWriter.Feature.WriteNulls))
assertEquals(sourceContent, targetV2Json.toString())
assertEquals(sourceContent, com.alibaba.fastjson2.JSON.toJSONString(targetV2))
assertEquals(JSON.toJSONString(source.child), JSON.toJSONString(targetV2Json.getObject("child", TestItem.class)))
assertEquals(1672502399000L, DateUtils.parseMillis19("2022-12-31 23:59:59", ZoneId.of("Asia/Shanghai")))
assertEquals("2.99", Double.toString(val.doubleValue()))
assertEquals("{\"test_prr\":2.9900000000000002131628207280300557613372802734375}", json.toJSONString())
assertEquals("{\"test_prr\":2.9900000000000002131628207280300557613372802734375}", JSON.toJSONString(json))
assertEquals(array.size(), array1.size())
assertTrue(bean1.isSuccess)
assertEquals("{\"success\":false}", str1)
assertEquals("{\"success\":true}", str2)
assertEquals("{\"int32\":10,\"int64\":100}", json)
assertEquals(t.int32, tt.int32)
assertEquals(t.int64, tt.int64)
assertEquals("{\"int32\":10,\"int64\":100}", json)
assertEquals(t.int32, tt.int32)
assertEquals(t.int64, tt.int64)
assertEquals("{\"int32\":10,\"int64\":100}", json)
assertEquals(t.int32, tt.int32)
assertEquals(t.int64, tt.int64)
assertNull(JSON.parseObject(emtpy, User.class))
assertNull(JSON.parseObject(emptyBytes, User.class))
assertNull(JSON.parseObject(emptyBytes, 0, emptyBytes.length, StandardCharsets.US_ASCII, User.class))
assertNull(user.exception)
assertNull(user.exception)
assertNull(user.exception)
assertNull(user.exception)
assertEquals(9, bean.resourceIds.size())
assertEquals("[1,100,1000,1001,1002,1003,1004,1005,1006]", JSON.toJSONString(bean.resourceIds))
assertEquals("{\"b\":{\"a\":{\"$ref\":\"$\"}}}", str)
assertSame(a1, a1.b.a)
assertEquals("{\"current\":\"2022-06-09 09:19:13.000000017\",\"history\":\"2022-06-09 09\",\"tomorrow\":\"2022-06-09 09:18\",\"yesterday\":\"1990-12-11\"}", str)
assertEquals("{\"current\":\"2022-06-09 09:19:13.000000017\",\"history\":\"2022-06-09 09\",\"tomorrow\":\"2022-06-09 09:18\",\"yesterday\":\"1990-12-11\"}", str1)
assertEquals("{\"current\":\"2022-06-09 09:19:13.000000017\",\"history\":\"2022-06-09 09\",\"tomorrow\":\"2022-06-09 09:18\",\"yesterday\":\"1990-12-11\"}", str)
assertEquals("{\"current\":\"2022-06-09 09:19:13.000000017\",\"history\":\"2022-06-09 09\",\"tomorrow\":\"2022-06-09 09:18\",\"yesterday\":\"1990-12-11\"}", str1)
assertEquals("{\"value\":true}", JSON.toJSONString(bean))
assertEquals(HashMap.class, JSON.parse("{}", JSONFactory.createReadContext(() -> new HashMap())).getClass())
assertEquals(LinkedHashMap.class, JSON.parse("{}", JSONFactory.createReadContext(() -> new LinkedHashMap())).getClass())
assertEquals(TreeMap.class, JSON.parse("{}", JSONFactory.createReadContext(() -> new TreeMap())).getClass())
assertEquals(ConcurrentHashMap.class, JSON.parse("{}", JSONFactory.createReadContext(() -> new ConcurrentHashMap())).getClass())
assertEquals(ArrayList.class, JSON.parse("[]", JSONFactory.createReadContext(null, () -> new ArrayList())).getClass())
assertEquals(LinkedList.class, JSON.parse("[]", JSONFactory.createReadContext(null, () -> new LinkedList())).getClass())
assertEquals(ArrayDeque.class, JSON.parse("[]", JSONFactory.createReadContext(null, () -> new ArrayDeque())).getClass())
assertEquals("{\"name\":\"DataWorks\",\"id\":101}", str)
assertEquals("{\"BName\":\"DataWorks\",\"id\":101}", str)
assertEquals(b.id, b1.id)
assertEquals(b.name, b1.name)
assertFalse(bean.isSuccess)
assertFalse("{}".equals(json))
assertNotNull(result)
assertNotNull(result)
assertNull(JSON.parseObject("{\"time\":\"\"}").to(Bean.class).time)
assertNull(JSON.parseObject("{\"time\":\"null\"}").to(Bean.class).time)
assertNull(JSON.parseObject("{\"time\":null}").to(Bean.class).time)
assertNotNull(testDTO2.subDTO.fouDTO)
assertNotNull(testDTO2.subDTO2.fouDTO)
assertNotNull(testDTO2.subDTO.fouDTO)
assertNotNull(testDTO2.subDTO2.fouDTO)
assertNotNull(teacherList)
assertEquals(1, teacherList.size())
assertEquals("朱忠恕", teacherJson.userName)
assertEquals("{\"t1\":3234567890}", json2.toString())
assertEquals("{\"t1\":-3234567890}", json2.toString())
assertEquals("{\"t1\":10223372036854775808}", json2.toString())
assertEquals("{\"t1\":-10223372036854775808}", json2.toString())
assertEquals(3234567890L, vo.getV0000())
assertEquals(-2.0089457919266330204e-15, JSON.parseObject("{\"V\": -2.0089457919266330204e-15}").get("V"))
assertEquals(bean.ids, bean1.ids)
assertEquals("1", testModel.OneDemo)
assertEquals("2", testModel.TDemo)
assertEquals("3", testModel.ThDemo)
assertEquals("{\"status\":2}", JSON.toJSONString(t))
assertNull(o)
assertNull(bean1.value)
assertNotNull(bean2.value)
assertNull(bean3.value)
assertEquals("{\"pickUpTime\":\"2014-03-18\"}", JSON.toJSONString(bean, "millis"))
assertEquals(true, obj.getBoolean("IsSuccess"))
assertEquals("1fd1717837744bd2ba967167a6f6f417", obj.getString("Data"))
assertEquals("获取身份令牌成功", obj.getString("Message"))
assertEquals(true, result.isIsSuccess())
assertEquals("1fd1717837744bd2ba967167a6f6f417", result.getData())
assertEquals("获取身份令牌成功", result.getMessage())
assertEquals(1.1111111E7, jsonObject.get("avaLimit"))
assertEquals(new BigDecimal("1.1111111E7"), jsonObject.getBigDecimal("avaLimit"))
assertEquals(new BigDecimal("1.1111111E7"), bean.avaLimit)
assertEquals("{\"a\":[{\"b\":1}]}", jsonObject.toString())
assertNotNull(simpleDto2.getESkuSnList())
assertNotNull(simpleDto21.getESkuSnList())
assertNotNull(simpleDto22.getESkuSnList())
assertEquals("com.af.v4.system.api.model.LoginUser", parse.get("@type"))
assertFalse(first.isEmpty())
assertEquals("{\"@type\":\"java.util.HashMap\",1L:\"张三\",2L:\"张四\"}", str)
assertEquals(1L, map2.keySet().iterator().next())
assertEquals("张三", map2.get(1L))
assertEquals("张四", map2.get(2L))
assertEquals("{\"@type\":\"java.util.HashMap\",1L:\"张三\",2L:\"张四\"}", str)
assertEquals("张三", map2.get(1L))
assertEquals("张四", map2.get(2L))
assertEquals("张三", object.get(1L))
assertEquals("张四", object.get(2L))
assertEquals(2, object.size())
assertEquals("张三", map.get(1L))
assertEquals("张四", map.get(2L))
assertEquals(2, map.size())
assertEquals("张三", map1.get(1L))
assertEquals("张四", map1.get(2L))
assertEquals(2, map1.size())
assertEquals("张三", map2.get(1L))
assertEquals("张四", map2.get(2L))
assertEquals(2, map2.size())
assertEquals("张三", map.get(1L))
assertEquals("张四", map.get(2L))
assertEquals(2, map.size())
assertEquals("张三", map1.get(1L))
assertEquals("张四", map1.get(2L))
assertEquals(2, map1.size())
assertEquals("张三", map2.get(1))
assertEquals("张四", map2.get(2))
assertEquals(2, map2.size())
assertEquals(2020, object.getJSONObject("name").get("one"))
assertEquals(2020, object.getJSONObject("name").get("one"))
assertEquals(2020, object.getJSONObject("name").get("one"))
assertEquals(2020, object.getJSONObject("name").get("one"))
assertEquals(1, list.size())
assertEquals("1", list.get(0))
assertEquals(2, values.length)
assertEquals("1", values[0])
assertEquals("2", values[1])
assertEquals(2, array.length)
assertEquals(1, array[0])
assertEquals(2, array[1])
assertEquals(4, floatArray.length)
assertEquals(1, floatArray[0])
assertEquals(2, floatArray[1])
assertEquals(3, floatArray[2])
assertEquals(4, floatArray[3])
assertEquals(4, doubles.length)
assertEquals(1, doubles[0])
assertEquals(2, doubles[1])
assertEquals(3, doubles[2])
assertEquals(4, doubles[3])
assertEquals(4, floats.length)
assertEquals(1, floats[0])
assertEquals(2, floats[1])
assertEquals(3, floats[2])
assertEquals(4, floats[3])
assertEquals(Data.class, o.getClass())
assertEquals("1111111", userInfoBody.getCard_number())
assertEquals("1111111", userInfoBody1.getCard_number())
assertEquals("1111111", userInfoBody2.getCard_number())
assertEquals(String.class, bean.type)
assertFalse(JSON.isValid(json))
assertNull(JSON.parseObject("{\"date\":\"\"}", Bean.class).date)
assertNull(JSON.parseObject("{\"date\":\"\"}").to(Bean.class).date)
assertNull(JSON.parseObject("{\"date\":\"\"}", Bean1.class).date)
assertNull(JSON.parseObject("{\"date\":\"\"}").to(Bean1.class).date)
assertNull(JSON.parseObject("{\"date\":\"\"}", Bean2.class).date)
assertNull(JSON.parseObject("{\"date\":\"\"}").to(Bean2.class).date)
assertNull(JSON.parseObject("{\"date\":\"\"}", Bean3.class).date)
assertNull(JSON.parseObject("{\"date\":\"\"}").to(Bean3.class).date)
assertNull(JSON.parseObject("{\"date\":\"\"}", Bean4.class).date)
assertNull(JSON.parseObject("{\"date\":\"\"}").to(Bean4.class).date)
assertNull(JSON.parseObject("{\"date\":\"\"}", Bean5.class).date)
assertNull(JSON.parseObject("{\"date\":\"\"}").to(Bean5.class).date)
assertNull(JSON.parseObject("{\"date\":\"\"}", Bean6.class).date)
assertNull(JSON.parseObject("{\"date\":\"\"}").to(Bean6.class).date)
assertNull(JSON.parseObject("{\"date\":\"\"}", Bean7.class).date)
assertNull(JSON.parseObject("{\"date\":\"\"}").to(Bean7.class).date)
assertNull(JSON.parseObject("{\"date\":\"\"}", Bean8.class).date)
assertNull(JSON.parseObject("{\"date\":\"\"}").to(Bean8.class).date)
assertNull(JSON.parseObject("{\"date\":\"\"}", Bean9.class).date)
assertNull(JSON.parseObject("{\"date\":\"\"}").to(Bean9.class).date)
assertNull(JSON.parseObject("{\"date\":\"\"}", Bean10.class).date)
assertNull(JSON.parseObject("{\"date\":\"\"}").to(Bean10.class).date)
assertNull(JSON.parseObject("{\"date\":\"\"}", Bean11.class).date)
assertNull(JSON.parseObject("{\"date\":\"\"}").to(Bean11.class).date)
assertEquals("{\"t1\":{\"a\":\"a\"},\"t2\":{\"b\":\"b\"}}", JSON.toJSONString(data))
assertEquals(1, strings.size())
assertEquals("abc", strings.get(0))
assertEquals(array.get(0), list.get(0))
assertEquals("{\"date\":1655097829796}", str)
assertEquals(bean.date.getTime(), bean1.date.getTime())
assertEquals(bean.date.getTime(), bean2.date.getTime())
assertEquals("{\"date\":1655097829796}", str)
assertEquals(bean.date.getTime(), bean1.date.getTime())
assertEquals(bean.date.getTime(), bean2.date.getTime())
assertEquals("{\"date\":1655097829}", str)
assertEquals(1655097829000L, bean1.date.getTime())
assertEquals(1655097829000L, bean2.date.getTime())
assertEquals("{\"localDate\":\"2022-07-01\",\"localDateTime\":\"2022-07-01 08:47:45\",\"localTime\":\"08:47:45\"}", JSON.toJSONString(model))
assertEquals("{\"localDate\":\"2022/07/01\",\"localDateTime\":\"2022-07-01 08:47:45\",\"localTime\":\"08:47:45\"}", JSON.toJSONString(model))
assertEquals("{\"localDate\":\"2022-07-01\",\"localDateTime\":\"2022-07-01 08:47:45.514\",\"localTime\":\"08:47:45.515\"}", JSON.toJSONString(model))
assertEquals(1654053162000L, date.getTime())
assertEquals(1654053162000L, date.getTime())
assertEquals(1654053162000L, date.getTime())
assertEquals(1654053162000L, date.getTime())
assertEquals(165405316000L, date.getTime())
assertEquals(16540531000L, date.getTime())
assertEquals(1654053000L, date.getTime())
assertEquals("[{\"key\":\"value1\"}]", JSON.toJSONString(tmpObj))
assertEquals("[{\"key\":\"value1\"}]", JSON.toJSONString(tmpObj))
assertNotNull(aa)
assertNotNull(aa.time)
assertNotNull(aa.nest.time)
assertNotNull(awardRule)
Assertions.assertEquals("{\"1\":\"\\\\\"}", string)
Assertions.assertEquals("{\"1\":\"\\\"\"}", string)
assertEquals(1, set.size())
assertTrue(set.contains("1541357098843803649"))
assertEquals(1, set.size())
assertTrue(set.contains("1541357098843803649"))
assertEquals(1, set.size())
assertTrue(set.contains("1541357098843803649"))
assertEquals(1, set.size())
assertTrue(set.contains("1541357098843803649"))
assertEquals(1655714717589L, jsonObject.getDate("time").getTime())
assertNotNull(result.get(0).getList().get(0))
assertNotNull(result.get(0).getList().get(0).getArriveStaName())
assertEquals(1, data.size())
assertEquals("{\"aaa\":{\"ccc\":\"c111\",\"ddd\":\"d11111\"},\"bbb\":\"b11111\"}", jsonObject.toString())
assertEquals(101, object.get("id"))
assertEquals(102, object.get("id"))
assertEquals("[102,103]", object.get("id").toString())
assertEquals(2, strings.length)
assertEquals("x", strings[0])
assertEquals("y", strings[1])
assertEquals("{\"adult\":\"true\",\"age\":\"20\",\"weight\":\"145.5\",\"weight2\":\"145.5\"}", peopleStr)
assertEquals(student.address, student2.address)
assertEquals(student.sge, student2.sge)
assertEquals(student.address, student2.address)
assertEquals(expected, JSON.toJSONString(map))
assertEquals(expected, new String(JSON.toJSONBytes(map)))
assertEquals("{\n" + "\t\"value\":\"zhinan\",\n" + "\t\"label\":\"指南\",\n" + "\t\"children\":[\n" + "\t\t{\n" + "\t\t\t\"value\":\"shejiyuanze\",\n" + "\t\t\t\"label\":\"设计原则\"\n" + "\t\t}\n" + "\t]\n" + "}", jsonObject.toString(JSONWriter.Feature.NotWriteEmptyArray, JSONWriter.Feature.PrettyFormat))
assertEquals("{\"values\":[]}", object.toString())
assertEquals("{}", object.toString(JSONWriter.Feature.NotWriteEmptyArray))
assertEquals("{\"values\":[]}", JSON.toJSONString(bean))
assertEquals("{}", JSON.toJSONString(bean, JSONWriter.Feature.NotWriteEmptyArray))
assertEquals("{\"values\":[]}", JSON.toJSONString(bean))
assertEquals("{}", JSON.toJSONString(bean, JSONWriter.Feature.NotWriteEmptyArray))
assertEquals("{\"values\":[]}", JSON.toJSONString(bean))
assertEquals("{}", JSON.toJSONString(bean, JSONWriter.Feature.NotWriteEmptyArray))
assertEquals("{\"values\":[]}", JSON.toJSONString(bean))
assertEquals("{}", JSON.toJSONString(bean, JSONWriter.Feature.NotWriteEmptyArray))
assertEquals("{}", JSON.toJSONString(new Bean5()))
assertEquals("{\"file\":\"/User/xxx/JsonTest.java\"}", json)
assertEquals("/User/xxx/JsonTest.java", file.toString())
assertEquals("\"yyyy-MM-dd\"", str)
assertEquals(format.toPattern(), format2.toPattern())
assertEquals("\"abc\"", JSON.toJSONString(new StringBuffer("abc")))
assertEquals("\"abc\"", JSON.toJSONString(new StringBuilder("abc")))
assertEquals("{\"date\":\"1663595616049\"}", s)
assertEquals("{\"date\":1663595616049}", s)
assertEquals("{\"date\":\"1663595616049\"}", s)
assertEquals("{\"date\":1663595616049}", s)
assertEquals("{\"date\":\"1663595616049\"}", s)
assertEquals("{\"date\":\"1663595616049\"}", s)
assertSame(ReturnWay.EXPRESS, parsed)
assertEquals(JSONObject.of("time", "0000-00-00").getDate("time"), JSONObject.of("time", "0000-00-00 00:00:00").getDate("time"))
assertEquals("00", object.get("code"))
assertNull(JSON.parseObject(""))
assertNull(JSON.parseObject(utf8Bytes))
assertNull(JSON.parse(null))
assertNull(JSON.parse(""))
assertNull(JSON.parse((String) null, JSONReader.Feature.SupportSmartMatch))
assertNull(JSON.parse("", JSONReader.Feature.SupportSmartMatch))
assertNull(JSON.parse(null, (JSONReader.Context) null))
assertNull(JSON.parse("", (JSONReader.Context) null))
assertNull(JSON.parse((byte[]) null))
assertNull(JSON.parse(new byte[0]))
assertNull(JSON.parseObject((String) null))
assertNull(JSON.parseObject((byte[]) null))
assertNull(JSON.parseObject((InputStream) null))
assertNull(JSON.parseObject((Reader) null))
assertNull(JSON.parseObject((String) null, JSONReader.Feature.SupportSmartMatch))
assertNull(JSON.parseObject((byte[]) null, JSONReader.Feature.SupportSmartMatch))
assertNull(JSON.parseObject((InputStream) null, JSONReader.Feature.SupportSmartMatch))
assertNull(JSON.parseObject((Reader) null, JSONReader.Feature.SupportSmartMatch))
assertNull(JSON.parseObject(null, (JSONReader.Context) null))
assertNull(JSON.parseObject("", (JSONReader.Context) null))
assertNull(JSON.parseObject("", Object.class))
assertNull(JSON.parseObject(utf8Bytes, Object.class))
assertNull(JSON.parseObject("", Object.class, JSONReader.Feature.SupportSmartMatch))
assertNull(JSON.parseObject("", (Type) Object.class, JSONReader.Feature.SupportSmartMatch))
assertNull(JSON.parseObject(utf8Bytes, Object.class, JSONReader.Feature.SupportSmartMatch))
assertNull(JSON.parseObject(utf8Bytes, (Type) Object.class, JSONReader.Feature.SupportSmartMatch))
assertNull(JSON.parseObject((String) null, (Type) Object.class, (Filter) null, JSONReader.Feature.SupportSmartMatch))
assertNull(JSON.parseObject("", (Type) Object.class, (Filter) null, JSONReader.Feature.SupportSmartMatch))
assertNull(JSON.parseObject((byte[]) null, (Type) Object.class, (Filter) null, JSONReader.Feature.SupportSmartMatch))
assertNull(JSON.parseObject(utf8Bytes, (Type) Object.class, (Filter) null, JSONReader.Feature.SupportSmartMatch))
assertNull(JSON.parseObject((String) null, Object.class))
assertNull(JSON.parseObject((byte[]) null, Object.class))
assertNull(JSON.parseObject((InputStream) null, Object.class))
assertNull(JSON.parseObject((Reader) null, Object.class))
assertNull(JSON.parseObject((URL) null, Object.class))
assertNull(JSON.parseObject((URL) null, (Type) Object.class))
assertNull(JSON.parseObject((URL) null, (Function) null))
assertNull(JSON.parseObject("", Object.class))
assertNull(JSON.parseObject(new byte[0], Object.class))
assertNull(JSON.parseObject(new ByteArrayInputStream(new byte[0]), Object.class))
assertNull(JSON.parseObject(new StringReader(""), Object.class))
assertNull(JSON.parseObject((String) null, Object.class, (JSONReader.Context) null))
assertNull(JSON.parseObject("", Object.class, (JSONReader.Context) null))
assertNull(JSON.parseObject(new ByteArrayInputStream(utf8Bytes)))
assertNull(JSON.parseObject(new StringReader("")))
assertTrue(JSON.parseObject(new StringReader("{}")).isEmpty())
assertNull(JSON.parseObject(new ByteArrayInputStream(utf8Bytes), Object.class))
assertNull(JSON.parseObject(new StringReader(""), Object.class))
assertTrue(((JSONObject) JSON.parseObject(new StringReader("{}"), JSONObject.class)).isEmpty())
assertEquals("{\"parems\":{},\"success\":true,\"wxId\":\"abc\"}", str)
assertEquals(bo.wxId, bo1.wxId)
assertEquals(bo.isSuccess, bo1.isSuccess)
assertEquals(bo.parems, bo1.parems)
assertNull(bo1.parems)
assertNull(bo1.params)
assertNull(bo1.params)
assertEquals("{\"C\":101}", json)
assertEquals(entity.C, entity1.C)
assertEquals(entity.C, entity2.C)
assertEquals("{\"C\":101}", json)
assertEquals(entity.C, entity1.C)
assertEquals(entity.C, entity2.C)
assertEquals("{\"ID\":101}", json)
assertEquals(entity.ID, entity1.ID)
assertEquals(entity.ID, entity2.ID)
assertEquals("{\"ID\":101}", json)
assertEquals(entity.ID, entity1.ID)
assertEquals(entity.ID, entity2.ID)
assertTrue(bean.getAa() instanceof Long)
assertTrue(object.getAa() instanceof Long)
assertTrue(object1.getAa() instanceof Long)
assertTrue(bean.getAa() instanceof Short)
assertTrue(object.getAa() instanceof Short)
assertTrue(object1.getAa() instanceof Short)
assertTrue(bean.getAa() instanceof Byte)
assertTrue(object.getAa() instanceof Byte)
assertTrue(object1.getAa() instanceof Byte)
assertTrue(bean.getAa() instanceof Float)
assertTrue(object.getAa() instanceof Float)
assertTrue(object1.getAa() instanceof Float)
assertTrue(bean.getAa() instanceof Double)
assertTrue(object.getAa() instanceof Double)
assertTrue(object1.getAa() instanceof Double)
assertEquals("{\"obj\":{\"5\":\"设置成功\"}}", JSONObject.toJSONString(data))
assertEquals("{\"obj\":{\"5\":\"设置成功\"}}", JSONObject.toJSONString(data))
assertEquals("xxx", bean.wxId)
assertEquals(true, bean.isSuccess)
assertEquals(null, bean.params)
assertEquals("jhahah", result.getMiddleEntity().getEntity().getName())
assertEquals("jhahah", result.getMiddleEntity().getEntity().getName())
assertEquals(xx.base.getClass(), x.base.getClass())
assertNull(JSON.parseObject((String) null))
assertNotNull(jsonObject)
assertNotNull(error)
assertTrue(error.getMessage().contains("item"))
assertNotNull(error)
assertTrue(error.getMessage().contains("item"))
assertNotNull(error)
assertTrue(error.getMessage().contains("item"))
assertEquals("1514499072599498753", bean2.storeRemark.get(0).storeId)
assertEquals("{\"timestamp\":\"2017-03-15 12:13:14\"}", JSON.toJSONString(bean, "millis"))
assertEquals("{\"message\":\"成功\",\"status\":\"200\",\"timestamp\":\"2017-03-15 12:13:14\"}", JSON.toJSONString(appResp))
assertEquals(0, JSON.parseObject(str, LongValue1.class).getV0000())
assertEquals("{}", JSON.toJSONString(user, JSONWriter.Feature.IgnoreNonFieldGetter))
assertEquals(1, list.size())
assertEquals(date.getTime(), ((Date) result.get("date")).getTime())
assertEquals("{\"user\":{\"score\":[100.0,80.05]}}", root.toString())
assertEquals("{\"s0\":[100.0,80.05]}", root.toString())
assertEquals("{\"s0\":{\"s1\":{\"s2\":[100.0,80.05]}}}", root.toString())
assertEquals("\"09:10:00\"", JSON.toJSONString(time))
assertEquals("4200000", JSON.toJSONString(time, "millis"))
assertEquals("4200", JSON.toJSONString(time, "unixtime"))
assertEquals(time, JSON.parseObject("4200000", LocalTime.class))
assertEquals("{\"time\":\"09:00\"}", JSON.toJSONString(bean))
assertEquals("\"09:00\"", JSON.toJSONString(bean.time, "HH:mm"))
assertEquals("{\"time\":33000000}", JSON.toJSONString(bean))
assertEquals(bean.time, bean1.time)
assertEquals("{\"time\":33000}", JSON.toJSONString(bean))
assertEquals(bean.time, bean1.time)
assertEquals(LocalTime.of(9, 10), bean.time)
assertEquals(LocalTime.of(9, 10), bean.time)
assertEquals(LocalTime.of(9, 10), bean.time)
assertEquals("{\"test\":\"Pixel 民\\u0011\\n XL\"}", JSON.toJSONString(object))
assertEquals("{\"test\":\"Pixel 民\\u0011\\n XL\"}", jsonStr)
assertFalse(JSON.isValid(errorJson))
assertFalse(JSON.isValidArray(errorJson))
assertTrue(JSON.isValid(errorJson))
assertFalse(valid)
assertTrue(valid)
assertFalse(JSON.isValid(errorJson))
assertFalse(JSON.isValidArray(errorJson))
assertTrue(JSON.isValid(errorJson))
assertFalse(JSON.isValid(errorJson, 0, errorJson.length, StandardCharsets.US_ASCII))
assertFalse(JSON.isValidArray(errorJson))
assertTrue(JSON.isValid(errorJson, 0, errorJson.length, StandardCharsets.US_ASCII))
assertEquals("{\"c\":\"c\",\"a\":{\"b\":\"123\"}}", jsonObject.toJSONString())
assertEquals("{1:111,2:222}", json)
assertEquals(111L, map1.get(1))
assertEquals(222L, map1.get(2))
assertEquals("111", map2.get(1))
assertEquals("222", map2.get(2))
assertEquals((short) 111, map3.get(1L))
assertEquals((short) 222, map3.get(2L))
assertEquals(458647883248488448L, jsonObject.getLongValue("log_id"))
assertNotNull(bean)
assertEquals(object1, object)
assertTrue(jsonReader.nextIfObjectStart())
assertEquals(Fnv.hashCode64(key), jsonReader.readFieldNameHashCode())
assertEquals(key, jsonReader.getFieldName())
assertEquals(object1, object)
assertTrue(jsonReader.nextIfObjectStart())
assertEquals(Fnv.hashCode64("@type"), jsonReader.readFieldNameHashCode())
assertEquals("@type", jsonReader.getFieldName())
assertEquals(Fnv.hashCode64(key), jsonReader.readValueHashCode())
assertEquals(key, jsonReader.getString())
assertTrue(jsonReader.nextIfObjectEnd())
assertEquals(object, JSONB.parseObject(bytes))
assertEquals(object, JSONB.parseObject(bytes))
assertEquals(object, JSONB.parseObject(bytes))
assertEquals(object, JSONB.parseObject(bytes))
assertEquals(object, JSONB.parseObject(bytes))
assertEquals(object, JSONB.parseObject(bytes))
assertNull(JSONB.parseObject(null, A.class, null, new Filter[0]))
assertNull(JSONB.parseObject(new byte[0], A.class, null, new Filter[0]))
assertEquals(1, symbolTable.size())
assertEquals(bean.getV0000(), bean1.getV0000())
assertEquals(bean.getV0000(), bean1.getV0000())
assertEquals(2, symbolTable.size())
assertEquals(hash("id", "name"), symbolTable.hashCode64())
assertTrue(JSONReader.ofJSONB(JSONB.toBytes("")).nextIfNullOrEmptyString())
assertEquals(text, JSON.toJSONString(user))
assertEquals(user.id, user1.id)
assertEquals(user.name, user1.name)
assertEquals(text, JSON.toJSONString(users))
assertEquals(1, user.id)
assertEquals("kraity", user.name)
assertEquals(1, users.size())
assertEquals(1, users.get(0).id)
assertEquals("kraity", users.get(0).name)
assertTrue(jsonWriter.isEnabled(JSONWriter.Feature.WriteNulls))
assertTrue(jsonWriter.getContext().isEnabled(JSONWriter.Feature.WriteNulls))
assertTrue(JSONWriter.ofUTF8().isUTF8())
assertTrue(JSONWriter.ofUTF16().isUTF16())
assertEquals(COUNT, str.length())
assertEquals(COUNT, str.length())
assertEquals(COUNT, str.length())
assertEquals(COUNT, str.length())
assertEquals(COUNT, str.length())
assertEquals(COUNT, str.length())
assertEquals(COUNT, str.length())
assertEquals(COUNT, str.length())
assertEquals(COUNT, str.length())
assertEquals(COUNT, str.length())
assertEquals(COUNT, str.length())
assertEquals(COUNT, str.length())
assertEquals(COUNT, str.length())
assertEquals(COUNT, str.length())
assertEquals("[0.0,1.0]", jsonWriter.toString())
assertEquals("[0.0,1.0]", jsonWriter.toString())
assertEquals("{\"values\":[{\"$ref\":\"values\"}]}", jsonWriter.toString())
assertEquals("{\"values\":[{\"$ref\":\"values\"}]}", jsonWriter.toString())
assertNull(jsonWriter.getSymbolTable())
assertEquals("1", jsonWriter.toString())
assertEquals("1", new String(out.toByteArray()))
assertEquals("101", jsonWriter.toString())
assertEquals("101", new String(out.toByteArray()))
assertEquals("null", jsonWriter.toString())
assertEquals("null", writer.toString())
assertEquals("null", jsonWriter.toString())
assertEquals("null", writer.toString())
assertEquals("\"id\"", jsonWriter.toString())
assertEquals("\"id\"", writer.toString())
assertNull(context.getPropertyPreFilter())
assertNull(context.getNameFilter())
assertNull(context.getValueFilter())
assertNull(context.getPropertyFilter())
assertNull(context.getContextValueFilter())
assertNull(context.getContextNameFilter())
assertNull(context.getAfterFilter())
assertNull(context.getBeforeFilter())
assertNull(context.getLabelFilter())
assertArrayEquals(new byte[] { '"', 'a', '"' }, jsonWriter.getBytes())
assertTrue(jsonWriter.isWriteMapTypeInfo(map, Map.class, WriteClassName.mask))
assertTrue(jsonWriter.isWriteMapTypeInfo(map, Map.class, WriteClassName.mask))
assertEquals("null", jsonWriter.toString())
assertEquals("null", jsonWriter.toString())
assertEquals("[1,2,3]", jsonWriter.toString())
assertEquals(1, JSONB.parse(bytes))
assertEquals("$.A", new JSONWriter.Path(ROOT, "A").toString())
assertEquals("$.ABCDEABCDEABCDEABCDEABCDEABCDEABCDEABCDE", new JSONWriter.Path(ROOT, "ABCDEABCDEABCDEABCDEABCDEABCDEABCDEABCDE").toString())
assertEquals("$.中", new JSONWriter.Path(ROOT, "中").toString())
assertEquals("$.中中中中中中中中中中中中中中中中中中中中中中中中中", new JSONWriter.Path(ROOT, "中中中中中中中中中中中中中中中中中中中中中中中中中").toString())
assertEquals("$.\uD83D\uDE0B", new JSONWriter.Path(ROOT, "\uD83D\uDE0B").toString())
assertEquals("$.\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B", new JSONWriter.Path(ROOT, "\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B").toString())
assertEquals("$.Ɛ", new JSONWriter.Path(ROOT, "Ɛ").toString())
assertEquals("$.ƐƐƐƐƐƐƐƐƐƐƐƐƐƐƐƐƐƐƐƐ", new JSONWriter.Path(ROOT, "ƐƐƐƐƐƐƐƐƐƐƐƐƐƐƐƐƐƐƐƐ").toString())
assertEquals("$.?", new JSONWriter.Path(ROOT, "\uDC00").toString())
assertEquals(result, array.toString())
assertEquals(prettyResult, array.toString(PrettyFormat))
assertEquals(prettyResult, JSONB.toJSONString(array.toJSONBBytes()))
assertEquals(result, object.toString())
assertEquals(prettyResult, object.toString(PrettyFormat))
assertEquals(result, object.toString())
assertEquals(prettyResult, object.toString(PrettyFormat))
assertEquals("{\n" + "\t\"@type\":\"com.alibaba.fastjson2.JSONWriterTest$A#0\",\n" + "\t\"@value\":{\n" + "\t\t\"id\":1001,\n" + "\t\t\"value\":{\n" + "\t\t\t\"@type\":\"#0\",\n" + "\t\t\t\"@value\":{\n" + "\t\t\t\t\"id\":1002\n" + "\t\t\t}\n" + "\t\t}\n" + "\t}\n" + "}", new JSONBDump(jsonbBytes, true).toString())
assertEquals(a.id, o.id)
assertEquals(((A) a.value).id, ((A) o.value).id)
assertEquals("{\n" + "\t\"id#0\":1001,\n" + "\t\"value#1\":{\n" + "\t\t\"#0\":1002\n" + "\t}\n" + "}", new JSONBDump(jsonbBytes, true).toString())
assertEquals(a.id, o.id)
assertEquals(a1.id, ((JSONObject) o.value).getIntValue("id"))
assertEquals("{\n" + "\t\"id#0\":1001,\n" + "\t\"value#1\":{\n" + "\t\t\"#0\":1002\n" + "\t}\n" + "}", new JSONBDump(jsonbBytes, true).toString())
assertEquals(a.id, root.getIntValue("id"))
assertEquals(a1.id, root.getJSONObject("value").getIntValue("id"))
assertEquals("{\n" + "\t\"a1234567890id#0\":1001,\n" + "\t\"value#1\":{\n" + "\t\t\"#0\":1002\n" + "\t}\n" + "}", new JSONBDump(jsonbBytes, true).toString())
assertEquals(a.a1234567890id, root.getIntValue("a1234567890id"))
assertEquals(a1.a1234567890id, root.getJSONObject("value").getIntValue("a1234567890id"))
assertEquals("{\n" + "\t\"a1234567890id#0\":1001,\n" + "\t\"value#1\":{\n" + "\t\t\"#0\":1002\n" + "\t}\n" + "}", new JSONBDump(jsonbBytes, true).toString())
assertEquals(a.a1234567890id, root.getIntValue("a1234567890id"))
assertEquals(a1.a1234567890id, root.getJSONObject("value").getIntValue("a1234567890id"))
assertEquals("{\n" + "\t\"a1234567890id#0\":1001,\n" + "\t\"value#1\":{\n" + "\t\t\"#0\":1002\n" + "\t}\n" + "}", new JSONBDump(jsonbBytes, true).toString())
assertEquals(a.a1234567890id, o.a1234567890id)
assertEquals(a1.a1234567890id, o.value.a1234567890id)
assertEquals("{\n" + "\t\"a1234567890id#0\":1001,\n" + "\t\"value#1\":{\n" + "\t\t\"#0\":1002\n" + "\t}\n" + "}", new JSONBDump(jsonbBytes, true).toString())
assertEquals(a.a1234567890id, o.a1234567890id)
assertEquals(a1.a1234567890id, o.value.a1234567890id)
assertEquals("{\"a\":{},\"b\":{}}", JSON.toJSONString(bean))
assertEquals("{\"a\":{}}", JSON.toJSONString(bean, JSONWriter.Feature.IgnoreNoneSerializable))
assertNotNull(bean.a)
assertNotNull(bean.b)
assertNotNull(bean2.a)
assertNull(bean2.b)
assertEquals("{\n" + "\t\"a\":{},\n" + "\t\"b\":{}\n" + "}", JSONB.toJSONString(JSONB.toBytes(bean)))
assertEquals("{\n" + "\t\"a\":{}\n" + "}", JSONB.toJSONString(JSONB.toBytes(bean, JSONWriter.Feature.IgnoreNoneSerializable)))
assertEquals("{\n" + "\t\"a\":{}\n" + "}", JSONB.toJSONString(JSONB.toBytes(bean, JSONWriter.Feature.IgnoreNoneSerializable), JSONB.symbolTable("id")))
assertEquals("{\n" + "\t\"a\":{},\n" + "\t\"b\":{}\n" + "}", JSONB.toJSONString(JSONB.toBytes(bean, JSONWriter.Feature.FieldBased)))
assertEquals("{\n" + "\t\"a\":{}\n" + "}", JSONB.toJSONString(JSONB.toBytes(bean, JSONWriter.Feature.IgnoreNoneSerializable, JSONWriter.Feature.FieldBased)))
assertEquals("{\n" + "\t\"a\":{}\n" + "}", JSONB.toJSONString(JSONB.toBytes(bean, JSONWriter.Feature.IgnoreNoneSerializable, JSONWriter.Feature.FieldBased), JSONB.symbolTable("id")))
assertEquals("{\n" + "\t\"a\":{},\n" + "\t\"b\":{}\n" + "}", JSONB.toJSONString(JSONB.toBytes(bean, JSONWriter.Feature.FieldBased)))
assertEquals("null", JSONB.toJSONString(JSONB.toBytes(bean, JSONWriter.Feature.IgnoreNoneSerializable, JSONWriter.Feature.FieldBased)))
assertEquals("{\"value\":{}}", JSON.toJSONString(object))
assertEquals("{\"value\":null}", JSON.toJSONString(object, JSONWriter.Feature.IgnoreNoneSerializable))
assertEquals("{\n" + "\t\"value\":{}\n" + "}", JSONB.toJSONString(object.toJSONBBytes()))
assertEquals("{\n" + "\t\"value\":null\n" + "}", JSONB.toJSONString(object.toJSONBBytes(JSONWriter.Feature.IgnoreNoneSerializable)))
assertNotNull(JSONObject.of("date", "0000-00-00").getObject("date", Date.class))
assertNotNull(JSONObject.of("date", "0000-00-00").getObject("date", Timestamp.class))
assertNotNull(JSONObject.of("date", "0000-00-00").getObject("date", Time.class))
assertNotNull(JSONObject.of("date", "0000-00-00 00:00:00").getObject("date", Date.class))
assertNotNull(JSONObject.of("date", "0000-00-00 00:00:00").getObject("date", Timestamp.class))
assertNotNull(JSONObject.of("date", "0000-00-00 00:00:00").getObject("date", Time.class))
assertNotNull(JSONObject.of("date", "0000-00-00 00:00:00").toJavaObject(new TypeReference<Bean<Date>>() {
}.getType()))
assertNotNull(JSONObject.of("date", "0000-00-00 00:00:00").toJavaObject(new TypeReference<Bean<Timestamp>>() {
}.getType()))
assertNotNull(JSONObject.of("date", "0000-00-00 00:00:00").toJavaObject(new TypeReference<Bean<Time>>() {
}.getType()))
assertEquals(123, bean.getId())
assertEquals("{\"value\":12.34}", JSON.toJSONString(bean))
assertEquals("[12.34]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray))
assertEquals("{\"value\":12.34}", JSON.toJSONString(bean))
assertEquals("[12.34]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray))
assertEquals("{\"value\":12.34}", JSON.toJSONString(bean))
assertEquals("[12.34]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray))
assertEquals("{\"value\":12.34}", JSON.toJSONString(bean))
assertEquals("[12.34]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray))
assertEquals("{\"value\":12.34}", JSON.toJSONString(bean))
assertEquals("[12.34]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray))
assertEquals("{\"value\":12.34}", JSON.toJSONString(bean))
assertEquals("[12.34]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray))
assertEquals("{\"value\":12.34}", JSON.toJSONString(bean))
assertEquals("[12.34]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray))
assertEquals("{\"value\":12.34}", JSON.toJSONString(bean))
assertEquals("[12.34]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray))
assertEquals("{\"value\":12.34}", JSON.toJSONString(bean))
assertEquals("[12.34]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray))
assertEquals("{\"value\":12.34}", JSON.toJSONString(bean))
assertEquals("[12.34]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray))
assertEquals("{\"value\":12.34}", JSON.toJSONString(bean))
assertEquals("[12.34]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray))
assertEquals("{\"value\":12.34}", JSON.toJSONString(bean))
assertEquals("[12.34]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray))
assertEquals("{\"value\":12.34}", JSON.toJSONString(bean))
assertEquals("[12.34]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray))
assertEquals("{\"value\":12.34}", JSON.toJSONString(bean))
assertEquals("[12.34]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray))
assertEquals("{\"value\":12.34}", JSON.toJSONString(bean))
assertEquals("[12.34]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray))
assertEquals("{\"value\":12.34}", JSON.toJSONString(bean))
assertEquals("[12.34]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray))
assertEquals("{\"value\":12.34}", JSON.toJSONString(bean))
assertEquals("[12.34]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray))
assertEquals("{\"value\":12.34}", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased))
assertEquals("[12.34]", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased, JSONWriter.Feature.BeanToArray))
assertEquals("{\"value\":12.34}", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased))
assertEquals("[12.34]", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased, JSONWriter.Feature.BeanToArray))
assertEquals("{\"value\":12.34}", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased))
assertEquals("[12.34]", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased, JSONWriter.Feature.BeanToArray))
assertEquals("{\"value\":12.34}", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased))
assertEquals("[12.34]", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased, JSONWriter.Feature.BeanToArray))
assertEquals("{\"value\":12.34}", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased))
assertEquals("[12.34]", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased, JSONWriter.Feature.BeanToArray))
assertEquals("{\"value\":[12.34]}", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased))
assertEquals("[[12.34]]", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased, JSONWriter.Feature.BeanToArray))
assertEquals("{\"value\":[12.34]}", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased))
assertEquals("[[12.34]]", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased, JSONWriter.Feature.BeanToArray))
assertEquals("{\"value\":[12.34]}", JSON.toJSONString(bean))
assertEquals("[[12.34]]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray))
assertEquals("{\"value\":[12.34]}", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased))
assertEquals("[[12.34]]", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased, JSONWriter.Feature.BeanToArray))
assertEquals("{\"value\":[12.34]}", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased))
assertEquals("[[12.34]]", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased, JSONWriter.Feature.BeanToArray))
assertEquals("{\"value\":[12.34]}", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased))
assertEquals("[[12.34]]", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased, JSONWriter.Feature.BeanToArray))
assertEquals("{\"value\":[12.34]}", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased))
assertEquals("[[12.34]]", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased, JSONWriter.Feature.BeanToArray))
assertEquals("{\"value\":[12.34]}", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased))
assertEquals("[[12.34]]", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased, JSONWriter.Feature.BeanToArray))
assertEquals("{\"value\":[12.34]}", JSON.toJSONString(bean))
assertEquals("[[12.34]]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray))
assertEquals("{\"value\":[12.34]}", JSON.toJSONString(bean))
assertEquals("[[12.34]]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray))
assertEquals("{\"value\":[12.34]}", JSON.toJSONString(bean))
assertEquals("[[12.34]]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray))
assertEquals("{\"value\":[12.34]}", JSON.toJSONString(bean))
assertEquals("[[12.34]]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray))
assertEquals("{\"value\":[12.34]}", JSON.toJSONString(bean))
assertEquals("[[12.34]]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray))
assertEquals("{\"value\":[12.34]}", JSON.toJSONString(bean))
assertEquals("[[12.34]]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray))
assertEquals("{\"value\":[12.34]}", JSON.toJSONString(bean))
assertEquals("[[12.34]]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray))
assertEquals("{\"value\":[12.34]}", JSON.toJSONString(bean))
assertEquals("[[12.34]]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray))
assertEquals("{\"value\":123}", text)
assertEquals(v1.getValue().intValue(), v.getValue().intValue())
assertEquals("{\"value\":123}", text)
assertEquals(v1.value.intValue(), v.value.intValue())
assertEquals("{\"value\":{\"id\":123}}", text)
assertEquals(v1.getValue().get().id, v.getValue().get().id)
assertEquals("{\"value\":{\"id\":123}}", text)
assertEquals(v1.value.get().id, v.value.get().id)
assertEquals("{\"value\":null}", text)
assertEquals(v1.getValue(), v.getValue())
assertEquals("{\"value\":[]}", text)
assertEquals("{\"value\":[1,2]}", text)
assertEquals("{\"value\":123}", text)
assertEquals(v1.getValue().intValue(), v.getValue().intValue())
assertEquals("{\"value\":123}", text)
assertEquals(v1.value.intValue(), v.value.intValue())
assertEquals("{\"value\":{\"id\":123}}", text)
assertEquals(v1.getValue().get().id, v.getValue().get().id)
assertEquals(v1.getValue().get().id, v.getValue().get().id)
assertEquals("{\"value\":{\"id\":123}}", text)
assertEquals(v1.value.get().id, v.value.get().id)
assertEquals(v1.value.get().id, v.value.get().id)
assertEquals("{\"value\":true}", text)
assertEquals(v1.getValue().get(), v.getValue().get())
assertEquals("{\"value\":true}", text)
assertEquals(v1.value.get(), v.value.get())
assertEquals("{\"value\":null}", text)
assertEquals(v1.getValue(), v.getValue())
assertEquals("{\"value\":[]}", text)
assertEquals("{\"value\":[1,2]}", text)
assertEquals(a.getClass(), a1.getClass())
assertEquals(json, JSON.toJSONString(http))
assertSame(Http.class, checker.getClass())
assertSame(None.class, checker.getClass())
assertSame(TestChecker.class, checker.getClass())
assertSame(XChecker.class, checker.getClass())
assertEquals("{\"id\":123}", JSON.toJSONString(bean))
assertEquals("{}", JSON.toJSONString(bean, JSONWriter.Feature.IgnoreNonFieldGetter))
assertEquals("{\"f0\":10,\"f1\":11,\"f2\":12}", JSON.toJSONString(bean))
assertEquals("{\"f0\":10,\"f1\":11,\"f2\":12}", JSON.toJSONString(bean, JSONWriter.Feature.IgnoreNonFieldGetter))
assertEquals(1, object.size())
assertEquals(JSONArray.class, object.get("item").getClass())
assertEquals(2, object.getJSONArray("item").size())
assertEquals("[1,2]", object.getJSONArray("item").toString())
assertEquals(1, object.size())
assertEquals(JSONArray.class, object.get("item").getClass())
assertEquals(2, object.getJSONArray("item").size())
assertEquals("[1,2]", object.getJSONArray("item").toString())
assertEquals(1, object.size())
assertEquals(JSONArray.class, object.get("item").getClass())
assertEquals(2, ((Collection) object.get("item")).size())
assertEquals("[\"1\",\"2\"]", object.get("item").toString())
assertEquals(1, object.size())
assertEquals(JSONArray.class, object.get("item").getClass())
assertEquals(2, ((Collection) object.get("item")).size())
assertEquals("[1,2]", object.get("item").toString())
assertEquals(1, object.size())
assertEquals(JSONArray.class, object.get("item").getClass())
assertEquals(2, ((Collection) object.get("item")).size())
assertEquals("[1,2]", object.get("item").toString())
assertEquals(1, object.size())
assertEquals(JSONArray.class, object.get("item").getClass())
assertEquals(2, ((Collection) object.get("item")).size())
assertEquals("[1,2]", object.get("item").toString())
assertEquals(1, object.size())
assertEquals(JSONArray.class, object.get("item").getClass())
assertEquals(2, ((Collection) object.get("item")).size())
assertEquals("[1,2]", object.get("item").toString())
assertEquals(HashMap.class, JSON.parse("{}", JSONReader.Feature.UseNativeObject).getClass())
assertEquals(HashMap.class, JSON.parseObject("{}", Object.class, JSONReader.Feature.UseNativeObject).getClass())
assertEquals(HashMap.class, JSON.parse("{}", JSONFactory.createReadContext(HashMap::new)).getClass())
assertEquals(HashMap.class, JSON.parseObject("{}", Object.class, JSONFactory.createReadContext(HashMap::new)).getClass())
assertEquals(HashMap.class, JSON.parseObject("{}".getBytes(StandardCharsets.UTF_8), Object.class, JSONFactory.createReadContext(HashMap::new)).getClass())
assertEquals("{\"name\":\"My bean\",\"attr1\":\"val1\"}", str)
assertEquals("{\"name\":\"My bean\",\"attr1\":\"val1\"}", str)
assertEquals(bean.name, bean2.name)
assertEquals(bean.properties, bean2.properties)
assertEquals(bean.properties, JSON.parseObject(str, ExtendableBean1.class, JSONReader.Feature.SupportSmartMatch).properties)
assertEquals("{\"name\":\"My bean\",\"attr1\":\"val1\"}", str)
assertEquals(bean.name, bean2.name)
assertEquals(bean.properties, bean2.properties)
assertEquals("{\"name\":\"My bean\",\"attr1\":\"val1\"}", str)
assertEquals(bean.name, bean2.name)
assertEquals(bean.properties, bean2.properties)
assertEquals(bean.properties, JSON.parseObject(str, ExtendableBean2.class, JSONReader.Feature.SupportSmartMatch).properties)
assertEquals("My bean", bean2.name)
assertEquals("val1", bean2.properties.get("attr1"))
assertEquals(bean2.properties, JSON.parseObject(str, ExtendableBean3.class, JSONReader.Feature.SupportSmartMatch).properties)
assertEquals("My bean", bean2.name)
assertEquals("val1", bean2.properties.get("attr1"))
assertEquals(bean2.properties, JSON.parseObject(str, ExtendableBean3.class, JSONReader.Feature.SupportSmartMatch).properties)
assertEquals("val1", bean.properties.get("attr1"))
assertEquals("val1", JSON.parseObject(str, ExtendableBeanF1.class, JSONReader.Feature.SupportSmartMatch).properties.get("attr1"))
assertEquals("val1", bean.properties.get("attr1"))
assertEquals("val1", JSON.parseObject(str, ExtendableBeanF2.class, JSONReader.Feature.SupportSmartMatch).properties.get("attr1"))
assertEquals("val1", bean.properties.get("attr1"))
assertEquals("val1", JSON.parseObject(str, ExtendableBeanF3.class, JSONReader.Feature.SupportSmartMatch).properties.get("attr1"))
assertEquals("val1", bean.properties.get("attr1"))
assertEquals("val1", JSON.parseObject(str, ExtendableBeanF4.class, JSONReader.Feature.SupportSmartMatch).properties.get("attr1"))
assertEquals("val1", bean.properties.get("attr1"))
assertEquals("val1", JSON.parseObject(str, ExtendableBeanF5.class, JSONReader.Feature.SupportSmartMatch).properties.get("attr1"))
assertEquals("val1", bean.properties.get("attr1"))
assertEquals("val1", JSON.parseObject(str, ExtendableBeanF6.class, JSONReader.Feature.SupportSmartMatch).properties.get("attr1"))
assertEquals("val1", bean.properties.get("attr1"))
assertEquals("val1", JSON.parseObject(str, ExtendableBeanF7.class, JSONReader.Feature.SupportSmartMatch).properties.get("attr1"))
assertEquals("val1", bean.properties.get("attr1"))
assertEquals("val1", JSON.parseObject(str, ExtendableBeanF7P.class, JSONReader.Feature.SupportSmartMatch).properties.get("attr1"))
assertEquals("a b", JSON.parseObject(json, JSONReader.Feature.TrimString).getString("value"))
assertEquals("a b", JSON.parseObject(utf8Bytes, JSONReader.Feature.TrimString).getString("value"))
assertEquals("a b", JSON.parseObject(utf8Bytes, 0, utf8Bytes.length, StandardCharsets.US_ASCII, JSONReader.Feature.TrimString).getString("value"))
assertEquals("a b", JSONB.parseObject(jsonbBytes, JSONReader.Feature.TrimString).getString("value"))
assertEquals("1B", JSON.toJSONString((byte) 1, JSONWriter.Feature.WriteClassName))
assertEquals("1S", JSON.toJSONString((short) 1, JSONWriter.Feature.WriteClassName))
assertEquals("1L", JSON.toJSONString((long) 1, JSONWriter.Feature.WriteClassName))
assertEquals("2147483648", JSON.toJSONString(2147483648L, JSONWriter.Feature.WriteClassName))
assertEquals("{\"value\":1}", str)
assertEquals("{\"value\":1}", str)
assertEquals("{\"value\":1}", str)
assertEquals("{\"value\":1.0}", str)
assertEquals("{\"value\":1.0}", str)
assertEquals("{\"value\":1B}", JSON.toJSONString(new BeanObject((byte) 1), JSONWriter.Feature.WriteClassName, JSONWriter.Feature.NotWriteRootClassName))
assertEquals("{\"value\":1S}", JSON.toJSONString(new BeanObject((short) 1), JSONWriter.Feature.WriteClassName, JSONWriter.Feature.NotWriteRootClassName))
assertEquals("{\"value\":1}", JSON.toJSONString(new BeanObject(1), JSONWriter.Feature.WriteClassName, JSONWriter.Feature.NotWriteRootClassName))
assertEquals("{\"value\":1}", JSON.toJSONString(new BeanObject(1), JSONWriter.Feature.WriteClassName, JSONWriter.Feature.NotWriteRootClassName))
assertEquals("{\"value\":2147483647L}", JSON.toJSONString(new BeanObject(2147483647L), JSONWriter.Feature.WriteClassName, JSONWriter.Feature.NotWriteRootClassName))
assertEquals("{\"value\":2147483648}", JSON.toJSONString(new BeanObject(2147483648L), JSONWriter.Feature.WriteClassName, JSONWriter.Feature.NotWriteRootClassName))
assertEquals("{\"value\":-2147483649}", JSON.toJSONString(new BeanObject(-2147483649L), JSONWriter.Feature.WriteClassName, JSONWriter.Feature.NotWriteRootClassName))
assertEquals("{\"value\":-2147483648L}", JSON.toJSONString(new BeanObject(-2147483648L), JSONWriter.Feature.WriteClassName, JSONWriter.Feature.NotWriteRootClassName))
assertEquals("{\"value\":1.0F}", JSON.toJSONString(new BeanObject(1F), JSONWriter.Feature.WriteClassName, JSONWriter.Feature.NotWriteRootClassName))
assertEquals("{\"value\":1.0D}", JSON.toJSONString(new BeanObject(1D), JSONWriter.Feature.WriteClassName, JSONWriter.Feature.NotWriteRootClassName))
assertEquals("'a\\'bc'", JSON.toJSONString("a'bc", JSONWriter.Feature.UseSingleQuotes))
assertEquals("'a\\'bc'", new String(JSON.toJSONBytes("a'bc", JSONWriter.Feature.UseSingleQuotes)))
assertEquals("{'val':'a\\'bc'}", JSON.toJSONString(new JSONObject().fluentPut("val", "a'bc"), JSONWriter.Feature.UseSingleQuotes))
assertEquals("{'val':'a\\'bc'}", new String(JSON.toJSONBytes(new JSONObject().fluentPut("val", "a'bc"), JSONWriter.Feature.UseSingleQuotes)))
assertEquals("{'val':'a\\'bc'}", JSON.toJSONString(bean, JSONWriter.Feature.UseSingleQuotes))
assertEquals("{'val':'a\\'bc'}", new String(JSON.toJSONBytes(bean, JSONWriter.Feature.UseSingleQuotes)))
assertEquals("{\"v2\":2,\"v1\":1}", JSON.toJSONString(JSONObject.of("v2", 2, "v1", 1)))
assertEquals("{\"v1\":1,\"v2\":2}", JSON.toJSONString(JSONObject.of("v2", 2, "v1", 1), JSONWriter.Feature.MapSortField))
assertEquals("{\"v2\":2,\"v1\":1}", JSON.toJSONString(map))
assertEquals("{\"v2\":2,\"v1\":1}", JSON.toJSONString(map, JSONWriter.Feature.MapSortField))
assertEquals("{\"v1\":1,\"v2\":2}", JSON.toJSONString(map2))
assertEquals("{\"v1\":1,\"v2\":2}", JSON.toJSONString(map2, JSONWriter.Feature.MapSortField))
assertNotNull(val)
assertEquals(Float.class, val.getClass())
assertNotNull(val)
assertEquals(Float.class, val.getClass())
assertNotNull(val)
assertEquals(Double.class, val.getClass())
assertNotNull(val)
assertEquals(Double.class, val.getClass())
assertEquals("{\"@type\":\"com.alibaba.fastjson2.features.WriteClassNameWithFilterTest$Bean\",\"id\":101}", str)
assertEquals("\"\\u003c\\u003e\"", jsonWriter.toString())
assertEquals("\"\\u0028\\u0029\"", jsonWriter.toString())
assertEquals("\"A\\u0029\"", jsonWriter.toString())
assertEquals("\"\\u0029A\"", jsonWriter.toString())
assertEquals("\"\\u003c\\u003e\\u0028\\u0029\"", jsonWriter.toString())
assertEquals("\"abcd\\u003c\\u003e\\u0028\\u0029\"", jsonWriter.toString())
assertEquals("\"\\u003c\\u003e\"", jsonWriter.toString())
assertEquals("\"\\u0028\\u0029\"", jsonWriter.toString())
assertEquals("\"A\\u0029\"", jsonWriter.toString())
assertEquals("\"\\u0029A\"", jsonWriter.toString())
assertEquals("\"\\u003c\\u003e\\u0028\\u0029\"", jsonWriter.toString())
assertEquals("\"abcd\\u003c\\u003e\\u0028\\u0029\"", jsonWriter.toString())
assertEquals("{\"items\":[{},null,{\"$ref\":\"$.items[0]\"}]}", JSON.toJSONString(bean, JSONWriter.Feature.ReferenceDetection))
assertEquals("{\"items\":[{},null,{\"$ref\":\"$.items[0]\"}]}", jsonWriter.toString())
assertArrayEquals(bean.stackTrace, bean1.stackTrace)
assertArrayEquals(bean.stackTrace, bean2.stackTrace)
assertArrayEquals(bean.stackTrace, bean1.stackTrace)
assertArrayEquals(bean.stackTrace, bean2.stackTrace)
assertEquals(bean.stackTrace, bean1.stackTrace)
assertEquals(bean.stackTrace, bean2.stackTrace)
assertEquals(bean.stackTrace, bean1.stackTrace)
assertEquals(bean.stackTrace, bean2.stackTrace)
assertEquals(101, JSON.parseObject(str, Bean.class, JSONReader.Feature.SupportSmartMatch).userId)
assertEquals(101, JSON.parseObject(bytes, Bean.class, JSONReader.Feature.SupportSmartMatch).userId)
assertEquals(101, JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.UTF_8, Bean.class, JSONReader.Feature.SupportSmartMatch).userId)
assertEquals(101, JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.US_ASCII, Bean.class, JSONReader.Feature.SupportSmartMatch).userId)
assertEquals(101, TestUtils.createJSONReaderStr(str, JSONReader.Feature.SupportSmartMatch).read(Bean.class).userId)
assertEquals(101, JSON.parseObject(str, Bean.class, JSONReader.Feature.SupportSmartMatch).userId)
assertEquals(101, JSON.parseObject(bytes, Bean.class, JSONReader.Feature.SupportSmartMatch).userId)
assertEquals(101, JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.UTF_8, Bean.class, JSONReader.Feature.SupportSmartMatch).userId)
assertEquals(101, JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.US_ASCII, Bean.class, JSONReader.Feature.SupportSmartMatch).userId)
assertEquals(101, TestUtils.createJSONReaderStr(str, JSONReader.Feature.SupportSmartMatch).read(Bean.class).userId)
assertEquals(101, JSON.parseObject(str, Bean.class, JSONReader.Feature.SupportSmartMatch).userId)
assertEquals(101, JSON.parseObject(bytes, Bean.class, JSONReader.Feature.SupportSmartMatch).userId)
assertEquals(101, JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.UTF_8, Bean.class, JSONReader.Feature.SupportSmartMatch).userId)
assertEquals(101, JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.US_ASCII, Bean.class, JSONReader.Feature.SupportSmartMatch).userId)
assertEquals(101, TestUtils.createJSONReaderStr(str, JSONReader.Feature.SupportSmartMatch).read(Bean.class).userId)
assertEquals(101, JSON.parseObject(str, Bean.class, JSONReader.Feature.SupportSmartMatch).userId)
assertEquals(101, JSON.parseObject(bytes, Bean.class, JSONReader.Feature.SupportSmartMatch).userId)
assertEquals(101, JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.UTF_8, Bean.class, JSONReader.Feature.SupportSmartMatch).userId)
assertEquals(101, JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.US_ASCII, Bean.class, JSONReader.Feature.SupportSmartMatch).userId)
assertEquals(101, TestUtils.createJSONReaderStr(str, JSONReader.Feature.SupportSmartMatch).read(Bean.class).userId)
assertEquals(123, bean.userId)
assertEquals(123, bean.userId)
assertEquals(201, bean.item.itemId)
assertEquals(101, JSONObject.from(new Item(101)).get("itemId"))
assertEquals(bean.getItems().get(0).itemId, JSONObject.from(bean).to(Bean.class).items.get(0).itemId)
assertEquals(bean.items.get("101").itemId, JSONObject.from(bean).to(Bean1.class).items.get("101").itemId)
assertEquals("null", jsonWriter.toString())
assertEquals("\"a\"", jsonWriter.toString())
assertEquals("\"\\\"\\\"\"", jsonWriter.toString())
assertEquals("\"abc\"", jsonWriter.toString())
assertEquals("\"abcdefghijklmn01234567890\"", jsonWriter.toString())
assertEquals("\"中国\"", jsonWriter.toString())
assertEquals("\"^á\"", jsonWriter.toString())
assertEquals(origin.length(), str.length())
assertEquals(origin, str)
assertEquals("{\"^á\":0}", jsonWriter.toString())
assertEquals("\"\\r\\n\\t\\f\\b\\\"\"", jsonWriter.toString())
assertEquals(chars.length + 2, jsonWriter.toString().length())
assertEquals("null", jsonWriter.toString())
assertEquals("\"a\"", jsonWriter.toString())
assertEquals("\"\\\"\\\"\"", jsonWriter.toString())
assertEquals("\"abc\"", jsonWriter.toString())
assertEquals("\"abcdefghijklmn01234567890\"", jsonWriter.toString())
assertEquals("\"中国\"", jsonWriter.toString())
assertEquals("\"^á\"", jsonWriter.toString())
assertEquals(origin.length(), str.length())
assertEquals(origin, str)
assertEquals("\"\\r\\n\\t\\f\\b\\\"\"", jsonWriter.toString())
assertEquals(chars.length + 2, jsonWriter.toString().length())
assertEquals("A", jsonWriter.toString())
assertEquals("{\"abc\":", jsonWriter.toString())
assertEquals("\"2018-06-23\"", jsonWriter.toString())
assertEquals(COUNT, string.length())
assertEquals(COUNT, string.length())
assertEquals(COUNT, string.length())
assertEquals(COUNT, string.length())
assertEquals(COUNT, string.length())
assertEquals(COUNT, string.length())
assertEquals(COUNT, string.length())
assertEquals(COUNT, string.length())
assertEquals(COUNT, string.length())
assertEquals(COUNT, string.length())
assertEquals(COUNT, string.length())
assertEquals("[\"9007199254740992\",\"-9007199254740992\"]", jsonWriter.toString())
assertEquals("[-9223372036854775808,-9223372036854775808,9007199254740992,-9007199254740992]", jsonWriter.toString())
assertEquals("{\"$ref\":\"$\"}", writer.toString())
assertEquals("{\"$ref\":\"$\"}{\"$ref\":\"中\"}", writer.toString())
assertEquals("{", writer.toString())
assertEquals("[", writer.toString())
assertEquals(":", writer.toString())
assertEquals(",", writer.toString())
assertEquals(":", writer.toString())
assertEquals("}", writer.toString())
assertEquals("]", writer.toString())
assertEquals("null", writer.toString())
assertEquals("[\"1.0\",\"2.0\",[\"3.0\",\"4.0\"],[\"5.0\",\"6.0\"]]", writer.toString())
assertTrue(ob instanceof List<?>)
assertTrue(ob instanceof Map<?, ?>)
assertEquals(data[4], 6)
assertEquals(data[4], 12)
assertEquals(data[4], 6)
assertEquals(data[4], 12)
assertEquals(data.get(4), 6)
assertEquals(data.get(4), 12)
assertEquals(data[0], 2)
assertEquals(data[0], 7)
assertEquals(data[0], 2)
assertEquals(data[0], 7)
assertEquals(data.get(0), 2)
assertEquals(data.get(0), 7)
assertEquals(data[1], 3)
assertEquals(data[1], 8)
assertEquals(data[1], 3)
assertEquals(data[1], 8)
assertEquals(data.get(1), 3)
assertEquals(data.get(1), 8)
assertEquals(data[3], 5)
assertEquals(data[3], 10)
assertEquals(data[3], 5)
assertEquals(data[3], 10)
assertEquals(data.get(3), 5)
assertEquals(data.get(3), 10)
assertArrayEquals(data, compare)
assertArrayEquals(data, compare)
assertTrue(data.equals(compare))
assertEquals(value.getV0000(), copy.getV0000())
assertEquals(value.getV0001(), copy.getV0001())
assertEquals(bean.v0, copy.v0)
assertEquals(bean.v1, copy.v1)
assertEquals(bean.v0, copy2.v0)
assertEquals(bean.v1, copy2.v1)
assertEquals(bean.v0, copy3.v0)
assertEquals(bean.v1, copy3.v1)
assertEquals(bean.v0, bean1.v0)
assertEquals(bean.v1, bean1.v1)
assertEquals(bean.v0, bean2.v0)
assertEquals(bean.v1, bean2.v1)
assertEquals(bean.tCode, copy.tCode)
assertEquals(bean.num, copy.num)
assertEquals(bean.stringSet, copy.stringSet)
assertEquals(bean.bigDecimal, copy.bigDecimal)
assertEquals(bean.id, bean1.id)
assertEquals(bean.name, bean1.name)
assertEquals(bean.id, bean2.id)
assertEquals(bean.name, bean2.name)
assertEquals(0, bean1.id)
assertEquals(bean.name, bean1.name)
assertEquals(0, bean2.id)
assertEquals(bean.name, bean2.name)
assertEquals(bean.id, bean3.id)
assertEquals(bean.name, bean3.name)
assertEquals(bean.id, bean4.id)
assertEquals(bean.name, bean4.name)
assertEquals(102, object.getIntValue("id"))
assertEquals(102, object.getIntValue("id"))
assertEquals(102, object.getIntValue("id"))
assertEquals(102, object.getIntValue("id"))
assertEquals(1, object.size())
assertEquals(102, object.getJSONObject("item").getIntValue("id"))
assertEquals(102, object.getJSONObject("item").getIntValue("id"))
assertEquals(1, object.getJSONObject("item").size())
assertEquals(102, object.getJSONObject("item").getIntValue("id"))
assertEquals(102, object.getJSONObject("item").getIntValue("id"))
assertEquals(1, object.getJSONObject("item").size())
assertEquals(102, object.getJSONArray("items").get(0))
assertEquals(102, object.getJSONArray("items").get(0))
assertEquals(1, object.getJSONArray("items").size())
assertEquals(102, object.getJSONArray("items").get(0))
assertEquals(102, object.getJSONArray("items").get(0))
assertEquals(1, object.getJSONArray("items").size())
assertEquals(102, array.getJSONArray(0).get(0))
assertNull(array.getJSONArray(1))
assertEquals(102, object.getJSONArray("items").get(0))
assertNull(object.getJSONArray("items1"))
assertEquals(102, object.getJSONArray("items").get(0))
assertEquals(1, object.getJSONArray("items").size())
assertEquals(102, array.getJSONArray(0).get(0))
assertNull(array.getJSONArray(1))
assertEquals(102, bean.id)
assertEquals(102, bean.id)
assertEquals("{\n" + "\t\"@type\":\"circle\",\n" + "\t\"name\":\"CustomCircle\",\n" + "\t\"radius\":1.0\n" + "}", str)
assertEquals(shape.getClass(), shape1.getClass())
assertEquals(cycle.name, cycle1.name)
assertEquals(cycle.radius, cycle1.radius)
assertEquals("{\"rollNo\":1,\"name\":\"Mark\"}", JSON.toJSONString(student))
assertEquals("{\"time\":\"121314\"}", str)
assertEquals(bean.time, bean1.time)
assertEquals("{\"time\":\"121314\"}", str)
assertEquals(bean.time, bean1.time)
assertEquals("{\"time\":\"121314\"}", str)
assertEquals(bean.time, bean1.time)
assertEquals("{\"time\":\"121314\"}", str)
assertEquals(bean.time, bean1.time)
assertEquals("{\"time\":\"121314\"}", str)
assertEquals(bean.time, bean1.time)
assertEquals("{\"name\":\"My bean\",\"attr1\":\"val1\"}", JSON.toJSONString(bean))
assertEquals("\"Hangzhou\"", str)
assertEquals("\"Type A\"", JSON.toJSONString(TypeEnumWithValue.TYPE1))
assertEquals("{\"id\":123}", json)
assertEquals(123, bean1.id)
assertEquals("XXX", bean1.name)
assertEquals("{\"id\":123,\"name\":\"XXX\"}", json)
assertEquals(bean.id, bean1.id)
assertNull(bean1.name)
assertEquals("{\"id\":123,\"name\":\"XXX\"}", json)
assertEquals(bean.id, bean1.id)
assertEquals(bean.name, bean1.name)
assertEquals("{\"id\":123,\"name\":\"XXX\"}", json)
assertEquals(bean.id, bean1.id)
assertEquals(bean.name, bean1.name)
assertEquals("{\"id\":101}", str)
assertEquals("{\"id\":101,\"name\":null}", str)
assertEquals("{\"id\":101}", str)
assertEquals("{\"jid\":\"abc\"}", str)
assertEquals("{\"id\":\"001\",\"name\":\"DataWorks\"}", str)
assertEquals(bean.id, bean1.id)
assertEquals(bean.name, bean1.name)
assertEquals("My bean", bean.name)
assertEquals("{\"bookCategory\":\"Tech\"}", json)
assertEquals(bean.category, bean1.category)
assertEquals("{\"bookCategory\":\"Tech\"}", json)
assertEquals(bean.category, bean1.category)
assertEquals("{\"bookCategory\":\"Tech\"}", json)
assertEquals(bean.category, bean1.category)
assertEquals("{\"bean_id\":1001}", str)
assertEquals("{\"id\":101}", str)
assertEquals("My bean", bean2.name)
assertEquals("val1", bean2.properties.get("attr1"))
assertEquals("{}", JSON.toJSONString(new A("101")))
assertEquals("{}", JSON.toJSONString(new A1("101")))
assertEquals("{}", JSON.toJSONString(new A2("101")))
assertEquals("{}", JSON.toJSONString(new A3("101")))
assertNull(JSON.parseObject(str, A.class).id)
assertNull(JSON.parseObject(str, A1.class).id)
assertNull(JSON.parseObject(str, A2.class).id)
assertEquals("\"ok\"", JSON.toJSONString(Type.OK))
assertNotNull(bean2)
assertNotNull(bean2.values)
assertEquals(bean.values.getClass(), bean2.values.getClass())
assertEquals(bean.values.size(), bean2.values.size())
assertEquals(bean2.item, bean2.values.keySet().iterator().next())
assertEquals(bean2.item, bean2.values2.keySet().iterator().next())
assertEquals("{\n" + "\t\"@type\":\"com.alibaba.fastjson2.autoType.AutoTypeTest21$Bean1#0\",\n" + "\t\"@value\":{\n" + "\t\t\"item#1\":{\n" + "\t\t\t\"id#2\":101\n" + "\t\t},\n" + "\t\t\"values#3\":{\n" + "\t\t\t\"@type\":\"M#4\",\n" + "\t\t\t\"@value\":{\n" + "\t\t\t\t{\n" + "\t\t\t\t\t\"@type\":\"com.alibaba.fastjson2.autoType.AutoTypeTest21$Item#5\",\n" + "\t\t\t\t\t\"@value\":{\n" + "\t\t\t\t\t\t\"#2\":101\n" + "\t\t\t\t\t}\n" + "\t\t\t\t}:\"101\"\n" + "\t\t\t}\n" + "\t\t},\n" + "\t\t\"values2#6\":{\n" + "\t\t\t\"@type\":\"#4\",\n" + "\t\t\t\"@value\":{\n" + "\t\t\t\t{\"$ref\":\"$.item\"}:null\n" + "\t\t\t}\n" + "\t\t}\n" + "\t}\n" + "}", new JSONBDump(bytes, true).toString())
assertNotNull(bean2)
assertNotNull(bean2.values)
assertEquals(bean.values.getClass(), bean2.values.getClass())
assertEquals(bean.values.size(), bean2.values.size())
assertEquals(bean2.item, bean2.values.keySet().iterator().next())
assertEquals(bean2.item, bean2.values2.keySet().iterator().next())
assertNotNull(bean2)
assertNotNull(bean2.values)
assertEquals(bean.values.getClass(), bean2.values.getClass())
assertEquals(bean.values.size(), bean2.values.size())
assertEquals(bean2.item, bean2.values.keySet().iterator().next())
assertEquals(bean2.item, ((Map.Entry) bean2.values2.entrySet().iterator().next()).getKey())
assertSame(object2.get("val"), object2.get("val1"))
assertSame(object2.get("val"), object2.get("val1"))
assertEquals(java.util.Currency.class, object2.get("val").getClass())
assertEquals(object, object2)
assertEquals(array.length, array2.length)
assertEquals(array[0], array2[0])
assertEquals(bean.unit, bean2.unit)
assertEquals(bean.getClass(), bean2.getClass())
assertEquals(bean.values.getClass(), bean2.values.getClass())
assertEquals(bean.values.size(), bean2.values.size())
assertEquals(bean.values.get("abc"), bean2.values.get("abc"))
assertEquals("{\"value\":{\"@type\":\"com.alibaba.fastjson2.autoType.AutoTypeTest7$C\",\"id\":1001}}", json)
assertSame(a2.value.getClass(), C.class)
assertEquals("{\"value\":{\"@type\":\"com.alibaba.fastjson2.autoType.AutoTypeTest7$C\",\"id\":1001}}", json)
assertSame(a2.value.getClass(), C.class)
assertEquals("{\"value\":{\"@type\":\"com.alibaba.fastjson2.autoType.AutoTypeTest7$C\",\"id\":1001}}", json)
assertNotNull(list2)
assertEquals(list.getClass(), list2.getClass())
assertEquals(list.get(0).getClass(), list2.get(0).getClass())
assertEquals(list2.getClass(), list2.getClass())
assertEquals(list2.get(0).getClass(), list2.get(0).getClass())
assertEquals(list.get(0).getClass(), list2.get(0).getClass())
assertEquals(list.get(0).getClass(), list2.get(0).getClass())
assertEquals(array[0].getClass(), array2[0].getClass())
assertEquals(array[1].getClass(), array2[1].getClass())
assertEquals(object.getInnerMap().getClass(), object2.getInnerMap().getClass())
assertEquals(bean.value, bean2.value)
assertEquals(bean.params.getClass(), bean2.params.getClass())
assertEquals(object.getInnerMap().getClass(), object2.getInnerMap().getClass())
assertEquals(bean.params.getClass(), bean2.params.getClass())
assertEquals(bean.params.get(0).getClass(), bean2.params.get(0).getClass())
assertEquals(bean.params.getClass(), bean2.params.getClass())
assertEquals(bean.params.get(0).getClass(), bean2.params.get(0).getClass())
assertEquals("{\"list\":[{\"@type\":\"com.alibaba.fastjson2.autoType.AutoTypeTest2$C\",\"id\":1001},{\"@type\":\"com.alibaba.fastjson2.autoType.AutoTypeTest2$C\",\"id\":1002}]}", json)
assertSame(a2.list.get(0).getClass(), C.class)
assertNotNull(bean2)
assertNotNull(bean2.items)
assertSame(bean.items.getClass(), bean2.items.getClass())
assertSame(bean.items.size(), bean2.items.size())
assertEquals("a", value2.stream().findFirst().get())
assertEquals(1, value2.size())
assertEquals(101, value2.stream().findFirst().get())
assertEquals("a", value2.stream().findFirst().get())
assertEquals(1, value2.size())
assertEquals(101, value2.stream().findFirst().get())
assertEquals("a", value2.stream().findFirst().get())
assertEquals(1, value2.size())
assertEquals(101, value2.stream().findFirst().get())
assertEquals("a", value2.stream().findFirst().get())
assertEquals(1, value2.size())
assertEquals(101, value2.stream().findFirst().get())
assertEquals("a", value2.stream().findFirst().get())
assertEquals(1, value2.size())
assertEquals(101, value2.stream().findFirst().get())
assertNotNull(bean2)
assertNotNull(bean2.items)
assertSame(bean.items.getClass(), bean2.items.getClass())
assertEquals(bean.items.size(), bean2.items.size())
assertEquals(bean.items.get(0), bean2.items.get(0))
assertNotNull(bean2)
assertNotNull(bean2.items)
assertSame(bean.items.getClass(), bean2.items.getClass())
assertEquals(bean.items.size(), bean2.items.size())
assertEquals(bean.items.get(0), bean2.items.get(0))
assertEquals("{\n" + "\t\"@type\":\"com.alibaba.fastjson2.autoType.AutoTypeTest30$Bean2\",\n" + "\t\"value\":\"1001\"\n" + "}", JSONB.toJSONString(bytes))
assertNotNull(bean2)
assertNotNull(bean2.value)
assertSame(bean.value.getClass(), bean2.value.getClass())
assertNotNull(array2)
assertNotNull(array2[0])
assertEquals(array[0], array2[0])
assertNotNull(array2)
assertNotNull(array2[0])
assertEquals(array[0], array2[0])
assertNotNull(array2)
assertNotNull(array2[0])
assertEquals(array[0], array2[0])
assertNotNull(array2)
assertNotNull(array2[0])
assertEquals(array[0], array2[0])
assertNotNull(array2)
assertNotNull(array2[0])
assertEquals(array[0], array2[0])
assertNotNull(array2)
assertNotNull(array2[0])
assertEquals(array[0], array2[0])
assertNotNull(bean2)
assertNotNull(bean2.values)
assertEquals(bean.values[0], bean2.values[0])
assertNotNull(bean2)
assertNotNull(bean2.values)
assertEquals(bean.values[0], bean2.values[0])
assertNotNull(bean2)
assertNotNull(bean2.value)
assertSame(bean.value.getClass(), bean2.value.getClass())
assertSame(bean.value, bean2.value)
assertNotNull(bean2)
assertNotNull(bean2.value)
assertSame(bean.value.getClass(), bean2.value.getClass())
assertSame(bean.value, bean2.value)
assertNotNull(bean2)
assertNotNull(bean2.value)
assertSame(bean.value.getClass(), bean2.value.getClass())
assertSame(bean.value, bean2.value)
assertNotNull(dataSource)
assertEquals(bean.items.size(), bean2.items.size())
assertNotNull(bean2)
assertNotNull(bean2.items)
assertSame(bean.items.getClass(), bean2.items.getClass())
assertNotNull(bean2)
assertNotNull(bean2.items)
assertSame(bean.items.getClass(), bean2.items.getClass())
assertNotNull(bean2)
assertNotNull(bean2.items)
assertSame(bean.items.getClass(), bean2.items.getClass())
assertNotNull(bean2)
assertNotNull(bean2.items)
assertSame(bean.items.getClass(), bean2.items.getClass())
assertNotNull(bean2)
assertNotNull(bean2.items)
assertSame(bean.items.getClass(), bean2.items.getClass())
assertNotNull(bean2)
assertNotNull(bean2.items)
assertSame(bean.items.getClass(), bean2.items.getClass())
assertNotNull(bean2)
assertNotNull(bean2.items)
assertSame(bean.items.getClass(), bean2.items.getClass())
assertNotNull(bean2)
assertNotNull(bean2.items)
assertEquals(bean.items.getClass(), bean2.items.getClass())
assertSame(bean.items.size(), bean2.items.size())
assertNotNull(bean2)
assertNotNull(bean2.items)
assertSame(bean.items.getClass(), bean2.items.getClass())
assertSame(bean.items.size(), bean2.items.size())
assertEquals("{\"list\":[{\"@type\":\"com.alibaba.fastjson2.autoType.AutoTypeTest1$C\",\"id\":1001},{\"@type\":\"com.alibaba.fastjson2.autoType.AutoTypeTest1$C\",\"id\":1002}]}", json)
assertSame(a2.list.get(0).getClass(), C.class)
assertNotNull(bean2)
assertNotNull(bean2.values)
assertEquals(bean.values.getClass(), bean2.values.getClass())
assertEquals(bean.values.size(), bean2.values.size())
assertEquals(bean.values.get(0).getClass(), bean2.values.get(0).getClass())
assertEquals(bean.values.get(1).getClass(), bean2.values.get(1).getClass())
assertEquals(bean.values.get(2).getClass(), bean2.values.get(2).getClass())
assertEquals(bean.values.get(3).getClass(), bean2.values.get(3).getClass())
assertNotNull(bean2)
assertNotNull(bean2.values)
assertEquals(bean.values.getClass(), bean2.values.getClass())
assertEquals(bean.values.size(), bean2.values.size())
assertEquals(array[0].getClass(), array2[0].getClass())
assertEquals(array[1].getClass(), array2[1].getClass())
assertEquals(array[2].getClass(), array2[2].getClass())
assertEquals(array[3].getClass(), array2[3].getClass())
assertNotNull(bean2)
assertNotNull(bean2.values)
assertEquals(bean.values.getClass(), bean2.values.getClass())
assertEquals(bean.values.size(), bean2.values.size())
assertEquals(array[0].getClass(), array2[0].getClass())
assertEquals(array[1].getClass(), array2[1].getClass())
assertEquals(array[2].getClass(), array2[2].getClass())
assertEquals(array[3].getClass(), array2[3].getClass())
assertNotNull(bean2)
assertNotNull(bean2.values)
assertEquals(bean.values.getClass(), bean2.values.getClass())
assertEquals(bean.values.size(), bean2.values.size())
assertEquals(array[0].getClass(), array2[0].getClass())
assertEquals(array[1].getClass(), array2[1].getClass())
assertEquals(array[2].getClass(), array2[2].getClass())
assertEquals(array[3].getClass(), array2[3].getClass())
assertEquals(bean.items.getClass(), bean2.items.getClass())
assertEquals(bean.items.size(), bean2.items.size())
assertEquals(bean.items.stream().findFirst().get(), bean2.items.stream().findFirst().get())
assertEquals(bean.items.getClass(), bean2.items.getClass())
assertEquals(bean.items.size(), bean2.items.size())
assertEquals(bean.items.stream().findFirst().get(), bean2.items.stream().findFirst().get())
assertEquals(bean.items.getClass(), bean2.items.getClass())
assertEquals(bean.items.size(), bean2.items.size())
assertEquals(bean.items.stream().findFirst().get(), bean2.items.stream().findFirst().get())
assertEquals(bean.items.getClass(), bean2.items.getClass())
assertEquals(bean.items.size(), bean2.items.size())
assertEquals(bean.items.stream().findFirst().get(), bean2.items.stream().findFirst().get())
assertEquals(bean.items.getClass(), bean2.items.getClass())
assertEquals(bean.items.size(), bean2.items.size())
assertEquals(bean.items.stream().findFirst().get(), bean2.items.stream().findFirst().get())
assertNotNull(bean)
assertTrue(o instanceof JSONObject)
assertEquals(e.getStackTrace().length, e1.getStackTrace().length)
assertEquals(set, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter(HashSet.class)))
assertEquals(set, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("Set")))
assertEquals(set, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("HashSet")))
assertArrayEquals(array, (Object[]) JSONB.parseObject(jsonbBytes, Object.class, JSONReader.autoTypeFilter(String.class, Object[].class), features))
assertArrayEquals(array, (Object[]) JSONB.parseObject(jsonbBytes, Object.class, JSONReader.autoTypeFilter(String.class, Object.class), features))
assertArrayEquals(array, (Object[]) JSONB.parseObject(jsonbBytes, Object.class, JSONReader.autoTypeFilter(String.class.getName(), Object[].class.getName()), features))
assertArrayEquals(array, (Object[]) JSONB.parseObject(jsonbBytes, Object.class, JSONReader.autoTypeFilter(String.class.getName(), Object.class.getName()), features))
assertArrayEquals(array, (Object[]) JSONB.parseObject(jsonbBytes, Object.class, new ContextAutoTypeBeforeHandler(true), features))
assertNotNull(error2.getStackTrace())
assertEquals(error.getStackTrace().length, error2.getStackTrace().length)
assertEquals(error.getClass(), error2.getClass())
assertNotNull(error2.getStackTrace())
assertEquals(value.getClass(), value2.getClass())
assertEquals(value.size(), value2.size())
assertEquals(value.get(0), value2.get(0))
assertEquals(value.get(1), value2.get(1))
assertEquals(value.get(2), value2.get(2))
Assertions.assertEquals("[101,102,101]", str)
assertEquals(value.getClass(), value2.getClass())
assertEquals(value.size(), value2.size())
assertNotNull(bean2)
assertNotNull(bean2.values)
assertEquals(bean.values.getClass(), bean2.values.getClass())
assertEquals(bean.values.size(), bean2.values.size())
assertEquals(bean.values.get(0), bean2.values.get(0))
assertEquals(bean.values.get(1), bean2.values.get(1))
assertNotNull(bean2)
assertNotNull(bean2.values)
assertEquals(bean.values.getClass(), bean2.values.getClass())
assertEquals(bean.values.size(), bean2.values.size())
assertEquals(bean.values.get(0).getClass(), bean2.values.get(0).getClass())
assertEquals(bean.items.getClass(), bean2.items.getClass())
assertEquals(bean.items.size(), bean2.items.size())
assertEquals(bean.items.stream().findFirst().get(), bean2.items.stream().findFirst().get())
assertEquals(bean.items.getClass(), bean2.items.getClass())
assertEquals(bean.items.size(), bean2.items.size())
assertEquals(map.get("a").getClass(), map2.get("a").getClass())
assertNotNull(bean2)
assertNotNull(bean2.values)
assertEquals(bean.values.getClass(), bean2.values.getClass())
assertEquals(bean.values.size(), bean2.values.size())
assertEquals(bean.values.get(0).getClass(), bean2.values.get(0).getClass())
assertEquals(bean.values.get(1).getClass(), bean2.values.get(1).getClass())
assertNotNull(bean2)
assertNotNull(bean2.values)
assertEquals(bean.values.getClass(), bean2.values.getClass())
assertEquals(bean.values.size(), bean2.values.size())
assertEquals(array[0].getClass(), array2[0].getClass())
assertEquals(array[1].getClass(), array2[1].getClass())
assertEquals(array[2].getClass(), array2[2].getClass())
assertNotNull(bean2)
assertNotNull(bean2.values)
assertEquals(bean.values.getClass(), bean2.values.getClass())
assertEquals(bean.values.size(), bean2.values.size())
assertEquals(bean.values.get(0).getClass(), bean2.values.get(0).getClass())
assertEquals(bean.values.get(1).getClass(), bean2.values.get(1).getClass())
assertNotNull(bean2)
assertNotNull(bean2.values)
assertEquals(bean.values.getClass(), bean2.values.getClass())
assertEquals(bean.values.size(), bean2.values.size())
assertEquals(bean.values.get(0).getClass(), bean2.values.get(0).getClass())
assertNotNull(bean2)
assertNotNull(bean2.values)
assertEquals(bean.values.getClass(), bean2.values.getClass())
assertEquals(bean.values.size(), bean2.values.size())
assertEquals(bean.values.get(0).getClass(), bean2.values.get(0).getClass())
assertEquals(bean.values.get(1).getClass(), bean2.values.get(1).getClass())
assertEquals(bean.values.get(2).getClass(), bean2.values.get(2).getClass())
assertEquals("{\n" + "\t\"@type\":\"com.alibaba.fastjson2.autoType.AutoTypeTest41_dupRef$Bean#0\",\n" + "\t\"@value\":{\n" + "\t\t\"item0#1\":{\n" + "\t\t\t\"id#2\":1001\n" + "\t\t},\n" + "\t\t\"item1#3\":{\"$ref\":\"$.item0\"},\n" + "\t\t\"item2#4\":{\"$ref\":\"#-1\"},\n" + "\t\t\"item3#5\":{\"$ref\":\"#-1\"}\n" + "\t}\n" + "}", new JSONBDump(bytes, true).toString())
assertEquals("{\n" + "\t\"@type\":\"com.alibaba.fastjson2.autoType.AutoTypeTest41_dupRef$Bean\",\n" + "\t\"item0\":{\n" + "\t\t\"id\":1001\n" + "\t},\n" + "\t\"item1\":{\"$ref\":\"$.item0\"},\n" + "\t\"item2\":{\"$ref\":\"#-1\"},\n" + "\t\"item3\":{\"$ref\":\"#-1\"}\n" + "}", new JSONBDump(bytes, false).toString())
assertEquals(bean.item0.getClass(), bean2.item0.getClass())
assertSame(bean2.item0, bean2.item1)
assertSame(bean2.item0, bean2.item2)
assertSame(bean2.item0, bean2.item3)
assertNotNull(list2)
assertEquals(bean.items.getClass(), bean2.items.getClass())
assertEquals(bean.items.size(), bean2.items.size())
assertNotNull(list2)
assertNotNull(list2)
assertNotNull(bean2)
assertNotNull(bean2.value)
assertNotNull(bean2)
assertNotNull(bean2.items)
assertSame(bean.items.getClass(), bean2.items.getClass())
assertSame(bean.items.size(), bean2.items.size())
assertSame(bean.items.get("a").getClass(), bean2.items.get("a").getClass())
assertSame(bean.items.get("a").id, bean2.items.get("a").id)
assertNotNull(a1)
assertNotNull(b1)
assertNotNull(array2)
assertEquals(A.class, array2[0].getClass())
assertEquals(B.class, array2[1].getClass())
assertEquals(A1[].class, bean2.values.getClass())
assertEquals(A.class, list2.get(0).getClass())
assertEquals(A.class, list2.get(0).getClass())
assertEquals(A.class, list2.get(0).getClass())
assertEquals(A.class, list2.get(0).getClass())
assertEquals(bean.items.getClass(), bean2.items.getClass())
assertEquals(bean.items.size(), bean2.items.size())
assertEquals(bean.items.stream().findFirst().get(), bean2.items.stream().findFirst().get())
assertEquals(bean.items.getClass(), bean2.items.getClass())
assertEquals(bean.items.size(), bean2.items.size())
assertEquals(bean.items.stream().findFirst().get(), bean2.items.stream().findFirst().get())
assertEquals(bean.items.getClass(), bean2.items.getClass())
assertEquals(bean.items.size(), bean2.items.size())
assertEquals(bean.items.stream().findFirst().get(), bean2.items.stream().findFirst().get())
assertEquals(bean.items.getClass(), bean2.items.getClass())
assertEquals(bean.items.size(), bean2.items.size())
assertEquals(bean.items.stream().findFirst().get(), bean2.items.stream().findFirst().get())
assertEquals(bean.items.getClass(), bean2.items.getClass())
assertEquals(bean.items.size(), bean2.items.size())
assertEquals(bean.items.stream().findFirst().get(), bean2.items.stream().findFirst().get())
assertEquals("{\"value\":{\"@type\":\"com.alibaba.fastjson2.autoType.AutoTypeTest6$C\",\"id\":1001}}", json)
assertSame(a2.value.getClass(), B.class)
assertEquals("{\"value\":{\"@type\":\"com.alibaba.fastjson2.autoType.AutoTypeTest5$C\",\"id\":1001}}", json)
assertEquals(A.class, a1.getClass())
assertNotNull(bean2)
assertNull(bean2.values)
assertNotNull(array2)
assertEquals(array.length, array2.length)
assertNotNull(array2)
assertEquals(array.length, array2.length)
assertNotNull(array2)
assertEquals(array.length, array2.length)
assertNotNull(array2)
assertEquals(array.length, array2.length)
assertNotNull(array2)
assertEquals(array.length, array2.length)
assertNotNull(array2)
assertEquals(array.length, array2.length)
assertNotNull(array2)
assertEquals(array.length, array2.length)
assertNotNull(array2)
assertEquals(array.length, array2.length)
assertNotNull(bean2)
assertNotNull(bean2.value)
assertSame(bean.value.getClass(), bean2.value.getClass())
assertSame(bean.value, bean2.value)
assertNotNull(bean2)
assertNotNull(bean2.value)
assertSame(bean.value.getClass(), bean2.value.getClass())
assertSame(bean.value, bean2.value)
assertNotNull(bean2)
assertNotNull(bean2.value)
assertSame(bean.value.getClass(), bean2.value.getClass())
assertSame(bean.value, bean2.value)
assertEquals(bean.getClass(), bean2.getClass())
assertEquals(bean.map.getClass(), bean2.map.getClass())
assertEquals(bean.map.get("123").getClass(), bean2.map.get("123").getClass())
assertEquals(bean.getClass(), bean2.getClass())
assertEquals(bean.map.getClass(), bean2.map.getClass())
assertEquals(bean.map.get("123").getClass(), bean2.map.get("123").getClass())
assertEquals(101, value2.stream().findFirst().get())
assertEquals(101, value2.stream().findFirst().get())
assertEquals(101, map2.get("a"))
assertNotNull(bean2)
assertNotNull(bean2.items)
assertNotNull(bean2.items1)
assertSame(bean2.items, bean2.items1)
assertNotNull(bean2)
assertNotNull(bean2.items)
assertNotNull(bean2.items1)
assertSame(bean2.items, bean2.items1)
assertEquals(bean.getClass(), bean2.getClass())
assertEquals(bean.values.getClass(), bean2.values.getClass())
assertEquals(bean.values.size(), bean2.values.size())
assertEquals(bean.values.stream().findFirst().get(), bean2.values.stream().findFirst().get())
assertEquals(bean.getClass(), bean2.getClass())
assertEquals(bean.values.getClass(), bean2.values.getClass())
assertEquals(bean.values.size(), bean2.values.size())
assertEquals(bean.values.stream().findFirst().get(), bean2.values.stream().findFirst().get())
assertEquals(bean.getClass(), bean2.getClass())
assertEquals(bean.values.getClass(), bean2.values.getClass())
assertEquals(bean.values.size(), bean2.values.size())
assertTrue(differ.diff())
assertNotNull(bean2)
assertEquals(bean2.map.size(), bean2.map.size())
assertEquals(bean2.map.keySet().iterator().next(), bean2.map.keySet().iterator().next())
assertNotNull(bean2)
assertEquals(bean2.map.size(), bean2.map.size())
assertEquals(bean2.map.keySet().iterator().next(), bean2.map.keySet().iterator().next())
assertEquals("key", pair.getLeft())
assertEquals(101, pair.getRight())
assertEquals("key", pair.getLeft())
assertEquals(101, pair.getRight())
assertEquals(101, proxy.getId())
assertEquals(101, object.get("id"))
assertEquals(102, proxy.getId())
assertEquals(1, ((Map) proxy).size())
assertEquals(false, ((Map) proxy).isEmpty())
assertEquals("{\n" + "\t\"@type\":\"com.alibaba.fastjson2.autoType.AutoTypeTest43_dynamic$Model\",\n" + "\t\"id\":102\n" + "}", JSONB.toJSONString(bytes))
assertEquals(102, value2.getId())
assertEquals(144, bytes.length)
assertEquals(bean.getClass(), bean2.getClass())
assertEquals(bean.items.getClass(), bean2.items.getClass())
assertEquals(bean.items.size(), bean2.items.size())
assertEquals(bean.items.values().stream().findFirst().get().getClass(), bean2.items.values().stream().findFirst().get().getClass())
assertEquals(map.getClass(), map2.getClass())
assertEquals(map.values().stream().findFirst().get().getClass(), map2.values().stream().findFirst().get().getClass())
assertEquals("{\"value\":{\"@type\":\"com.alibaba.fastjson2.autoType.AutoTypeTest3$C\",\"id\":1001}}", json)
assertSame(a2.value.getClass(), C.class)
assertEquals("{\"value\":{\"@type\":\"com.alibaba.fastjson2.autoType.AutoTypeTest4$C\",\"id\":1001}}", json)
assertSame(a2.value.getClass(), C.class)
assertEquals(123, bean.id)
assertNotNull(bean2)
assertNotNull(bean2.items)
assertSame(bean.items.getClass(), bean2.items.getClass())
assertNotNull(bean2)
assertNotNull(bean2.items)
assertSame(bean.items.getClass(), bean2.items.getClass())
assertNotNull(bean2)
assertNotNull(bean2.items)
assertSame(bean.items.getClass(), bean2.items.getClass())
assertNotNull(bean2)
assertNotNull(bean2.items)
assertSame(bean.items.getClass(), bean2.items.getClass())
assertSame(bean.items.size(), bean2.items.size())
assertNotNull(bean2)
assertNotNull(bean2.items)
assertSame(bean.items.getClass(), bean2.items.getClass())
assertSame(bean.items.size(), bean2.items.size())
assertNotNull(bean2)
assertNotNull(bean2.items)
assertSame(bean.items.getClass(), bean2.items.getClass())
assertSame(bean.items.size(), bean2.items.size())
assertNotNull(bean2)
assertNotNull(bean2.items)
assertSame(bean.items.size(), bean2.items.size())
assertSame(bean.items.stream().findFirst().get(), bean2.items.stream().findFirst().get())
assertNotNull(bean2)
assertNotNull(bean2.items)
assertSame(bean.items.getClass(), bean2.items.getClass())
assertSame(bean.items.size(), bean2.items.size())
assertSame(bean.items.stream().findFirst().get(), bean2.items.stream().findFirst().get())
assertNotNull(object2)
assertEquals(object.get(1L), object2.get(1L))
assertNotNull(object2)
assertEquals(object.get(String.class), object2.get(String.class))
assertNotNull(object2)
assertEquals(object.getClass(), object2.getClass())
assertEquals(object.get(String.class), object2.get(String.class))
assertEquals(bean.values.getClass(), bean2.values.getClass())
assertEquals(bean.values.getClass(), bean2.values.getClass())
assertEquals(bean.values.getClass(), bean2.values.getClass())
assertEquals(bean.values.get("set").getClass(), bean2.values.get("set").getClass())
assertEquals(bean.values.getClass(), bean2.values.getClass())
assertEquals(bean.values.get(0).getClass(), bean2.values.get(0).getClass())
assertEquals(bean.values.getClass(), bean2.values.getClass())
assertEquals(bean.values.get(0).getClass(), bean2.values.get(0).getClass())
assertEquals(bean.values.getClass(), bean2.values.getClass())
assertEquals(bean.values.get("data").getClass(), bean2.values.get("data").getClass())
assertEquals(((ArrayList) bean.values.get("data")).get(0).getClass(), ((ArrayList) bean2.values.get("data")).get(0).getClass())
assertEquals("{\"@type\":\"com.alibaba.fastjson2.autoType.SetTest$Bean\",\"content\":Set[]}", str)
assertNotNull(bean1.content)
assertEquals(0, bean1.content.size())
assertNotNull(bean1.content)
assertEquals(0, bean1.content.size())
assertNotNull(object.get("content"))
assertEquals(0, object.getJSONArray("content").size())
assertNotNull(map.get("content"))
assertEquals(0, set.size())
assertNotNull(map.get("content"))
assertEquals(0, set.size())
assertNotNull(list2)
assertEquals(bean.items.getClass(), bean2.items.getClass())
assertEquals(bean.items.size(), bean2.items.size())
assertNotNull(list2)
assertEquals(123, model.v0000)
assertTrue(parse instanceof java.util.Map)
assertEquals(123, model2.v0000)
assertEquals(123, model.v0000)
assertEquals(123, model.get("v0000"))
assertEquals(123, model.get("v0000"))
assertEquals("java.util.TreeMap", model.get("@type"))
assertEquals(123, model.get("v0000"))
assertEquals("java.util.TreeMap", model.get("@type"))
assertEquals(123, model.get("v0000"))
assertEquals(9, jsonbBytes.length)
assertEquals("java.util.TreeMap", model.get("@type"))
assertEquals(16, model.get("v0000"))
assertEquals(9, jsonbBytes.length)
assertEquals(1, model.size())
assertEquals(16, model.get("v0000"))
assertEquals(32, model.size())
assertEquals(text, "{\"@type\":\"com.alibaba.fastjson2_vo.IntField1\",\"v0000\":123}")
assertEquals(m.v0000, model.v0000)
assertEquals(text, "{\"v0000\":123}")
assertNotNull(bean2)
assertNotNull(bean2.item)
assertNotNull(bean2.item1)
assertSame(bean2.item, bean2.item1)
assertEquals("{\n" + "\t\"@type\":\"com.alibaba.fastjson2.autoType.AutoTypeTest46_Pair$Bean#0\",\n" + "\t\"@value\":{\n" + "\t\t\"pair1#1\":{\n" + "\t\t\t\"@type\":\"org.apache.commons.lang3.tuple.ImmutablePair#2\",\n" + "\t\t\t\"@value\":{\n" + "\t\t\t\t\"left#3\":\"101\",\n" + "\t\t\t\t\"right#4\":true\n" + "\t\t\t}\n" + "\t\t},\n" + "\t\t\"pair2#5\":{\n" + "\t\t\t\"@type\":\"#2\",\n" + "\t\t\t\"@value\":{\n" + "\t\t\t\t\"#3\":\"102\",\n" + "\t\t\t\t\"#4\":true\n" + "\t\t\t}\n" + "\t\t}\n" + "\t}\n" + "}", new JSONBDump(bytes, true).toString())
assertNotNull(bean2.pair1)
assertNotNull(bean2.pair1.getLeft())
assertNotNull(bean2.pair1.getRight())
assertNotNull(bean2.pair2)
assertNotNull(bean2.pair2.getLeft())
assertNotNull(bean2.pair2.getRight())
assertEquals("com.alibaba.fastjson2.JSONObject", object.getClass().getName())
assertEquals("com.alibaba.fastjson2.JSONObject", object.getClass().getName())
assertEquals(map, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("LM"), JSONReader.Feature.ErrorOnNotSupportAutoType))
assertEquals(map, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("LinkedHashMap"), JSONReader.Feature.ErrorOnNotSupportAutoType))
assertEquals(map, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("java.util.LinkedHashMap"), JSONReader.Feature.ErrorOnNotSupportAutoType))
assertEquals(map, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("M"), JSONReader.Feature.ErrorOnNotSupportAutoType))
assertEquals(map, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("HashMap"), JSONReader.Feature.ErrorOnNotSupportAutoType))
assertEquals(map, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("java.util.HashMap"), JSONReader.Feature.ErrorOnNotSupportAutoType))
assertEquals(values, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("A"), JSONReader.Feature.ErrorOnNotSupportAutoType))
assertEquals(values, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("ArrayList"), JSONReader.Feature.ErrorOnNotSupportAutoType))
assertEquals(values, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("java.util.ArrayList"), JSONReader.Feature.ErrorOnNotSupportAutoType))
assertEquals(values, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("LA"), JSONReader.Feature.ErrorOnNotSupportAutoType))
assertEquals(values, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("LinkedList"), JSONReader.Feature.ErrorOnNotSupportAutoType))
assertEquals(values, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("java.util.LinkedList"), JSONReader.Feature.ErrorOnNotSupportAutoType))
assertEquals(values, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("HashSet"), JSONReader.Feature.ErrorOnNotSupportAutoType))
assertEquals(values, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("java.util.HashSet"), JSONReader.Feature.ErrorOnNotSupportAutoType))
assertEquals(values, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("TreeSet"), JSONReader.Feature.ErrorOnNotSupportAutoType))
assertEquals(values, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("java.util.TreeSet"), JSONReader.Feature.ErrorOnNotSupportAutoType))
assertEquals(values, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("LinkedHashSet"), JSONReader.Feature.ErrorOnNotSupportAutoType))
assertEquals(values, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("java.util.LinkedHashSet"), JSONReader.Feature.ErrorOnNotSupportAutoType))
assertEquals(values, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("ConcurrentHashMap"), JSONReader.Feature.ErrorOnNotSupportAutoType))
assertEquals(values, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("java.util.concurrent.ConcurrentHashMap"), JSONReader.Feature.ErrorOnNotSupportAutoType))
assertEquals(values, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("JSONObject"), JSONReader.Feature.ErrorOnNotSupportAutoType))
assertEquals(values, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("com.alibaba.fastjson2.JSONObject"), JSONReader.Feature.ErrorOnNotSupportAutoType))
assertEquals(values, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("JO1"), JSONReader.Feature.ErrorOnNotSupportAutoType))
assertEquals(values, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("com.alibaba.fastjson.JSONObject"), JSONReader.Feature.ErrorOnNotSupportAutoType))
assertEquals(values.getClass(), JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("ConcurrentLinkedQueue"), JSONReader.Feature.ErrorOnNotSupportAutoType).getClass())
assertEquals(values.getClass(), JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter(ConcurrentLinkedQueue.class), JSONReader.Feature.ErrorOnNotSupportAutoType).getClass())
assertEquals(values.getClass(), JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("java.util.concurrent.ConcurrentLinkedQueue"), JSONReader.Feature.ErrorOnNotSupportAutoType).getClass())
assertEquals(values.getClass(), JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("ConcurrentLinkedDeque"), JSONReader.Feature.ErrorOnNotSupportAutoType).getClass())
assertEquals(values.getClass(), JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter(ConcurrentLinkedDeque.class), JSONReader.Feature.ErrorOnNotSupportAutoType).getClass())
assertEquals(values.getClass(), JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("java.util.concurrent.ConcurrentLinkedDeque"), JSONReader.Feature.ErrorOnNotSupportAutoType).getClass())
assertArrayEquals(values, (UUID[]) JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("UUID"), JSONReader.Feature.ErrorOnNotSupportAutoType))
assertArrayEquals(values, (UUID[]) JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter(UUID.class), JSONReader.Feature.ErrorOnNotSupportAutoType))
assertArrayEquals(values, (UUID[]) JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("java.util.UUID"), JSONReader.Feature.ErrorOnNotSupportAutoType))
assertArrayEquals(values, (Date[]) JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("Date"), JSONReader.Feature.ErrorOnNotSupportAutoType))
assertArrayEquals(values, (Date[]) JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter(Date.class), JSONReader.Feature.ErrorOnNotSupportAutoType))
assertArrayEquals(values, (Date[]) JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("Date"), JSONReader.Feature.ErrorOnNotSupportAutoType))
assertArrayEquals(values, (Calendar[]) JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("Calendar"), JSONReader.Feature.ErrorOnNotSupportAutoType))
assertArrayEquals(values, (Calendar[]) JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter(Calendar.class), JSONReader.Feature.ErrorOnNotSupportAutoType))
assertArrayEquals(values, (Calendar[]) JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("java.util.Calendar"), JSONReader.Feature.ErrorOnNotSupportAutoType))
assertArrayEquals(values, (SimpleDateFormat[]) JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("SimpleDateFormat"), JSONReader.Feature.ErrorOnNotSupportAutoType))
assertArrayEquals(values, (SimpleDateFormat[]) JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter(SimpleDateFormat.class), JSONReader.Feature.ErrorOnNotSupportAutoType))
assertArrayEquals(values, (SimpleDateFormat[]) JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("java.text.SimpleDateFormat"), JSONReader.Feature.ErrorOnNotSupportAutoType))
assertArrayEquals(values, (LocalDate[]) JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter(LocalDate.class), JSONReader.Feature.ErrorOnNotSupportAutoType))
assertArrayEquals(values, (LocalDate[]) JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("java.time.LocalDate"), JSONReader.Feature.ErrorOnNotSupportAutoType))
assertArrayEquals(values, (String[]) JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("String"), JSONReader.Feature.ErrorOnNotSupportAutoType))
assertArrayEquals(values, (String[]) JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter(String.class), JSONReader.Feature.ErrorOnNotSupportAutoType))
assertArrayEquals(values, (String[]) JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("java.lang.String"), JSONReader.Feature.ErrorOnNotSupportAutoType))
assertNotNull(bean2)
assertNotNull(bean2.values)
assertEquals(bean.values.getClass(), bean2.values.getClass())
assertEquals(bean.values.size(), bean2.values.size())
assertEquals(bean.values.get(0).getClass(), bean2.values.get(0).getClass())
assertEquals(bean.values.get(1).getClass(), bean2.values.get(1).getClass())
assertNotNull(bean2)
assertNotNull(bean2.values)
assertEquals(bean.values.getClass(), bean2.values.getClass())
assertEquals(bean.values.length, bean2.values.length)
assertEquals(bean.values[0].getClass(), bean2.values[0].getClass())
assertEquals(bean.values[1].getClass(), bean2.values[1].getClass())
assertNotNull(bean2)
assertNotNull(bean2.values)
assertEquals(bean.values.getClass(), bean2.values.getClass())
assertEquals(bean.values.length, bean2.values.length)
assertEquals(bean.values[0].getClass(), bean2.values[0].getClass())
assertEquals(bean.values[1].getClass(), bean2.values[1].getClass())
assertNotNull(bean2)
assertNotNull(bean2.values)
assertEquals(bean.values.getClass(), bean2.values.getClass())
assertEquals(bean.values.size(), bean2.values.size())
assertEquals(bean.values.get("0").getClass(), bean2.values.get("0").getClass())
assertEquals(bean.values.get("1").getClass(), bean2.values.get("1").getClass())
assertNotNull(bean2)
assertNotNull(bean2.values)
assertEquals(bean.values.getClass(), bean2.values.getClass())
assertEquals(bean.values.size(), bean2.values.size())
assertEquals(bean.values.get("0").getClass(), bean2.values.get("0").getClass())
assertEquals(bean.values.get("1").getClass(), bean2.values.get("1").getClass())
assertNotNull(bean2)
assertNotNull(bean2.values)
assertEquals(bean.values.getClass(), bean2.values.getClass())
assertEquals(bean.values.size(), bean2.values.size())
assertEquals(bean.values.get(0).getClass(), bean2.values.get(0).getClass())
assertEquals(bean.values.get(1).getClass(), bean2.values.get(1).getClass())
assertNotNull(bean2)
assertNotNull(bean2.values)
assertEquals(bean.values.getClass(), bean2.values.getClass())
assertEquals(bean.values.size(), bean2.values.size())
assertEquals(bean.values.get(0).getClass(), bean2.values.get(0).getClass())
assertEquals(bean.values.get(1).getClass(), bean2.values.get(1).getClass())
assertEquals(bean.getClass(), bean2.getClass())
assertEquals(bean.first.getClass(), bean2.first.getClass())
assertEquals(bean.second.getClass(), bean2.second.getClass())
assertEquals(bean.third.getClass(), bean2.third.getClass())
assertEquals(((Item) bean.first).id, ((Item) bean2.first).id)
assertEquals(((Item) bean.second).id, ((Item) bean2.second).id)
assertEquals(((Item) bean.third).id, ((Item) bean2.third).id)
assertEquals(((Item) bean.first).name, ((Item) bean2.first).name)
assertEquals(((Item) bean.second).name, ((Item) bean2.second).name)
assertEquals(((Item) bean.third).name, ((Item) bean2.third).name)
assertEquals(id, jsonPath.eval(object))
assertEquals(id, jsonPath.extract(JSONReader.of(json)))
assertEquals(id, jsonPath.extract(JSONReader.ofJSONB(jsonbBytes)))
assertEquals(id, jsonPath.extract(json))
assertEquals(id, jsonPath.extract(jsonBytes))
assertEquals(id, jsonPath.eval(object))
assertEquals(id, jsonPath.extract(JSONReader.of(json)))
assertEquals(id, jsonPath.extract(JSONReader.ofJSONB(jsonbBytes)))
assertEquals(id, jsonPath.extract(json))
assertEquals(id, jsonPath.extract(jsonBytes))
assertEquals(id, jsonPath.eval(object))
assertEquals(id, jsonPath.extract(JSONReader.of(json)))
assertEquals(id, jsonPath.extract(JSONReader.ofJSONB(jsonbBytes)))
assertEquals(id, jsonPath.extract(json))
assertEquals(id, jsonPath.extract(jsonBytes))
assertEquals(id, jsonPath.eval(object))
assertEquals(id, jsonPath.extract(JSONReader.of(json)))
assertEquals(id, jsonPath.extract(JSONReader.ofJSONB(jsonbBytes)))
assertEquals(id, jsonPath.extract(json))
assertEquals(id, jsonPath.extract(jsonBytes))
assertEquals(id, jsonPath.eval(object))
assertEquals(id, jsonPath.extract(JSONReader.of(json)))
assertEquals(id, jsonPath.extract(JSONReader.ofJSONB(jsonbBytes)))
assertEquals(id, jsonPath.extract(json))
assertEquals(id, jsonPath.extract(jsonBytes))
assertEquals(1, object.size())
assertEquals("2", object.get("item").toString())
assertEquals(1, object.size())
assertEquals("2", object.get("item").toString())
assertEquals("1", extractScalar)
assertEquals("[123]", segmentIndex.toString())
assertSame(jsonPath, JSONPath.compile("$"))
assertEquals("1", jsonPath.extractScalar(JSONReader.of("1")))
assertSame(jsonPath, JSONPath.of("#-1", JSONPath.Feature.AlwaysReturnList))
assertEquals("234", array.get(0))
assertEquals("345", array.get(0))
assertEquals("[1.0,2.0,3.0,4]", jsonPath.eval(array).toString())
assertEquals("[2.0,3.0,4.0,5]", jsonPath.eval(array).toString())
assertNull(jsonPath.eval(null))
assertEquals(-1, jsonPath.eval(1))
assertEquals(-1L, jsonPath.eval(1L))
assertEquals((short) -1, jsonPath.eval((short) 1))
assertEquals((byte) -1, jsonPath.eval((byte) 1))
assertEquals(-1F, jsonPath.eval(1F))
assertEquals(-1D, jsonPath.eval(1D))
assertEquals(BigDecimal.ONE.negate(), jsonPath.eval(BigDecimal.ONE))
assertEquals(BigInteger.ONE.negate(), jsonPath.eval(BigInteger.ONE))
assertEquals("[null,-1,-1,-1,-1,-1.0,-1.0,-1,-1]", jsonPath.eval(array).toString())
assertEquals(BigInteger.valueOf(Long.MIN_VALUE).negate(), jsonPath.eval(Long.MIN_VALUE))
assertEquals(-(long) Integer.MIN_VALUE, jsonPath.eval(Integer.MIN_VALUE))
assertEquals(-(int) Short.MIN_VALUE, jsonPath.eval(Short.MIN_VALUE))
assertEquals(-(short) Byte.MIN_VALUE, jsonPath.eval(Byte.MIN_VALUE))
assertNull(jsonPath.eval(null))
assertEquals(1, jsonPath.eval(-1))
assertEquals(1L, jsonPath.eval(-1L))
assertEquals((short) 1, jsonPath.eval((short) -1))
assertEquals((byte) 1, jsonPath.eval((byte) -1))
assertEquals(1F, jsonPath.eval(-1F))
assertEquals(1D, jsonPath.eval(-1D))
assertEquals(BigDecimal.ONE, jsonPath.eval(BigDecimal.ONE.negate()))
assertEquals(BigInteger.ONE, jsonPath.eval(BigInteger.ONE.negate()))
assertEquals("[null,1,1,1,1,1.0,1.0,1,1]", jsonPath.eval(array).toString())
assertEquals(101, JSONObject.of("id", 101).eval(JSONPath.of("strict $.id")))
assertEquals(101, JSONObject.of("id", 101).eval(JSONPath.of("lax $.id")))
assertEquals("[123,\"wenshao\"]", JSONPath.extract("{\"id\":123,\"name\":\"wenshao\"}", "$.*").toString())
assertEquals("{\"phones\":[{\"type\":\"cell\",\"number\":\"abc-defg\"},{\"number\":\"pqr-wxyz\"},{\"type\":\"home\",\"number\":\"hij-klmn\"}]}", JSONPath.extract(str, "$").toString())
assertEquals("[{\"type\":\"cell\",\"number\":\"abc-defg\"},{\"number\":\"pqr-wxyz\"},{\"type\":\"home\",\"number\":\"hij-klmn\"}]", JSONPath.extract(str, "$.phones").toString())
assertEquals("[\"cell\",\"home\"]", JSONPath.extract(str, "$.phones.type").toString())
assertEquals("{\"who\":\"Fred\",\"where\":\"General Products\",\"friends\":[{\"name\":\"Lili\",\"rank\":5},{\"name\":\"Hank\",\"rank\":7}]}", JSONPath.extract(str, "$").toString())
assertEquals("[{\"name\":\"Lili\",\"rank\":5},{\"name\":\"Hank\",\"rank\":7}]", JSONPath.extract(str, "$.friends").toString())
assertEquals("[{\"name\":\"Lili\",\"rank\":5},{\"name\":\"Hank\",\"rank\":7}]", JSONPath.extract(str, "$.friends[*]").toString())
assertEquals("[5,7]", JSONPath.extract(str, "$.friends[*].rank").toString())
assertEquals("{\"phones\":[{\"type\":\"cell\",\"number\":\"abc-defg\"},{\"number\":\"pqr-wxyz\"},{\"type\":\"home\",\"number\":\"hij-klmn\"}]}", JSONPath.extract(str, "$").toString())
assertEquals("[{\"type\":\"cell\",\"number\":\"abc-defg\"},{\"number\":\"pqr-wxyz\"},{\"type\":\"home\",\"number\":\"hij-klmn\"}]", JSONPath.extract(str, "$.phones").toString())
assertEquals("[{\"type\":\"cell\",\"number\":\"abc-defg\"},{\"number\":\"pqr-wxyz\"},{\"type\":\"home\",\"number\":\"hij-klmn\"}]", JSONPath.extract(str, "$.phones[*]").toString())
assertEquals("[\"cell\",\"home\"]", JSONPath.extract(str, "$.phones[*].type").toString())
assertEquals("{\"phones\":[{\"type\":\"cell\",\"number\":\"abc-defg\"},{\"number\":\"pqr-wxyz\"},{\"type\":\"home\",\"number\":\"hij-klmn\"}]}", JSONPath.extract(str, "$").toString())
assertEquals("[{\"type\":\"cell\",\"number\":\"abc-defg\"},{\"number\":\"pqr-wxyz\"},{\"type\":\"home\",\"number\":\"hij-klmn\"}]", JSONPath.extract(str, "$.phones").toString())
assertEquals("[{\"type\":\"cell\",\"number\":\"abc-defg\"},{\"type\":\"home\",\"number\":\"hij-klmn\"}]", JSONPath.extract(str, "$.phones[*]? (exists(@.type))").toString())
assertEquals("[\"cell\",\"home\"]", JSONPath.extract(str, "$.phones[*]? (exists(@.type)).type").toString())
assertEquals("[\"cell\",\"abc-defg\",\"pqr-wxyz\",\"home\",\"hij-klmn\"]", JSONPath.eval(JSON.parseObject(str), "$.phones.*").toString())
assertEquals("[\"cell\",\"abc-defg\",\"pqr-wxyz\",\"home\",\"hij-klmn\"]", JSONPath.extract(str, "$.phones.*").toString())
assertEquals("[{\"type\":\"cell\",\"number\":\"abc-defg\"},{\"number\":\"pqr-wxyz\"},{\"type\":\"home\",\"number\":\"hij-klmn\"}]", JSONPath.extract(str, "$.phones[*]").toString())
assertEquals("[\"cell\",\"abc-defg\",\"pqr-wxyz\",\"home\",\"hij-klmn\"]", JSONPath.extract(str, "$.phones[*].*").toString())
assertEquals("{\"SF\":[10,11,12,13,15,16,17],\"FC\":[20,22,24],\"SJ\":[30,33]}", JSONPath.extract(str, "$.sensors").toString())
assertEquals("[[10,11,12,13,15,16,17],[20,22,24],[30,33]]", JSONPath.extract(str, "$.sensors.*").toString())
assertEquals("[10,17,12,20,24,24,30,33]", JSONPath.extract(str, "$.sensors.*[0,last,2]").toString())
assertEquals("[10,12,17,20,24,24,30,33]", JSONPath.extract(str, "$.sensors.*[0,2,last]").toString())
assertEquals("{\"readings\":[15.2,-22.3,45.9]}", JSONPath.extract(str, "$").toString())
assertEquals("[15.2,-22.3,45.9]", JSONPath.extract(str, "$.readings").toString())
assertEquals("[15,-23,45]", JSONPath.extract(str, "$.readings.floor()").toString())
assertEquals("[-15,23,-45]", JSONPath.extract(str, "-$.readings.floor()").toString())
assertEquals("{\"readings\":[15.2,-22.3,45.9]}", JSONPath.extract(str, "$").toString())
assertEquals("[15.2,-22.3,45.9]", JSONPath.extract(str, "$.readings").toString())
assertEquals("[-15.2,22.3,-45.9]", JSONPath.extract(str, "-$.readings").toString())
assertEquals("{\"pay\":100,\"hours\":\"ten\"}", JSONPath.extract(str, "$").toString())
assertEquals("{\"pay\":100,\"hours\":\"ten\"}", JSONPath.extract(str, "@").toString())
assertEquals("100", JSONPath.extract(str, "@.pay").toString())
assertEquals("\"ten\"", JSON.toJSONString(JSONPath.extract(str, "@.hours")))
assertEquals("{\"name\":{\"first\":\"Manny\",\"last\":\"Moe\"},\"points\":123}", JSONPath.extract(str, "$").toString())
assertEquals("{\"name\":{\"first\":\"Manny\",\"last\":\"Moe\"},\"points\":123}", JSONPath.extract(str, "@").toString())
assertEquals("{\"first\":\"Manny\",\"last\":\"Moe\"}", JSONPath.extract(str, "@.name").toString())
assertEquals("true", JSONPath.extract(str, "exists (@.name)").toString())
assertEquals("{\"name\":{\"first\":\"Manny\",\"last\":\"Moe\"},\"points\":123}", JSONPath.extract(str, "$?(exists (@.name)) ").toString())
assertEquals("{\"first\":\"Manny\",\"last\":\"Moe\"}", JSONPath.extract(str, "$?(exists (@.name)).name ").toString())
assertFalse(JSONReader.ofJSONB(JSONB.toBytes("1")).nextIfNullOrEmptyString())
assertFalse(jsonWriter.isEnabled(JSONWriter.Feature.WriteNulls.mask))
assertFalse(JSONWriter.ofUTF8().isUTF16())
assertFalse(JSONWriter.ofUTF16().isUTF8())
assertFalse(jsonWriter.isWriteMapTypeInfo(null, null, 0))
assertFalse(jsonWriter.isWriteMapTypeInfo(map, Map.class, 0))
assertFalse(jsonWriter.isWriteMapTypeInfo(map, Map.class, WriteClassName.mask | NotWriteRootClassName.mask))
assertFalse(jsonWriter.isWriteMapTypeInfo(map1, Map.class, WriteClassName.mask | NotWriteHashMapArrayListClassName.mask))
assertFalse(jsonWriter.isWriteMapTypeInfo(map1, Map.class, WriteClassName.mask | NotWriteRootClassName.mask | NotWriteHashMapArrayListClassName.mask))
assertFalse(ROOT.equals(null))
assertFalse(ROOT.equals(new Object()))
assertFalse(str.contains("$ref"))
assertFalse(str.contains("$ref"))
assertFalse(jsonPath.remove(null))
assertTrue(JSONPath.of("$.queryScene.scene.queryDataSet.dataSet").contains(root))
assertFalse(JSONPath.of("$.queryScene.scene.queryDataSet.dataSet.abcd").contains(root))
assertTrue(JSONPath.of("$.queryScene.scene.queryDataSet.dataSet.name").contains(root))
Assertions.assertEquals("haha", o)
assertEquals(1, m2.values.size())
assertEquals(1, m2.subInvokes.size())
assertEquals(123, obj)
assertEquals(1, result)
assertEquals(1, path.eval(rootObject))
assertEquals(1, result)
assertEquals("Windows NT 6.1", result)
assertEquals("Windows NT 6.1", path.eval(rootObject))
assertEquals("Windows NT 6.1", result)
assertEquals("summer-sale", result)
assertEquals("summer-sale", path.eval(rootObject))
assertEquals("summer-sale", result)
assertEquals("sports", result)
assertEquals("sports", path.eval(rootObject))
assertEquals("sports", result)
assertEquals(Arrays.asList("Mozilla/5.0", "Windows NT 6.1", "1024x4069"), result)
assertEquals(new JSONArray("Mozilla/5.0", "Windows NT 6.1", "1024x4069"), path.eval(rootObject))
assertEquals(Arrays.asList("Mozilla/5.0", "Windows NT 6.1", "1024x4069"), result)
assertEquals(Arrays.asList("Mozilla/5.0", "Windows NT 6.1", "1024x4069"), result)
assertEquals(new JSONArray("Mozilla/5.0", "Windows NT 6.1", "1024x4069"), path.eval(rootObject))
assertEquals(Arrays.asList("Mozilla/5.0", "Windows NT 6.1", "1024x4069"), result)
assertTrue(JSONPath.contains(o, "$.10\\.0\\.0\\.1"))
assertEquals("{\"region\":\"xxx\"}", JSONPath.eval(o, "$.10\\.0\\.0\\.1").toString())
assertTrue(JSONPath.contains(o, "$.10\\.0\\.0\\.1.region"))
assertEquals("xxx", JSONPath.eval(o, "$.10\\.0\\.0\\.1.region"))
assertEquals(3, ids.size())
assertEquals(1001, ids.get(0))
assertEquals(1002, ids.get(1))
assertEquals(1003, ids.get(2))
assertEquals("[1.1,2.1]", JSONPath.extract("[[1.1,1.2],[2.1,1.2]]", "$[*][0]").toString())
assertEquals("[1,2,3,4,5]", JSONPath.extract("[1,2,3,4,5]", "$[*][0]").toString())
assertEquals("[[],2,3,4,5]", JSONPath.extract("[[[]],2,3,4,5]", "$[*][0]").toString())
assertEquals("[[],[2],3,4,5]", JSONPath.extract("[[[]],[[2]],3,4,5]", "$[*][0]").toString())
assertEquals("[[],[2],3,4,5]", JSONPath.extract("[[[]],[[2]],[3],4,5]", "$[*][0]").toString())
assertEquals("[1,2,3]", JSONPath.extract("[[1,2],[2,3],[3,4]]", "$[*][0]").toString())
assertEquals("{\"0\":1}", JSONPath.extract("{\"key\":{\"0\":1}}", "$[*][0]").toString())
assertEquals("1", JSONPath.extract("{\"key\":{\"0\":1}}", "$.key[0]").toString())
assertEquals(5, segments.size())
assertEquals("[100,\"AFRICA\"]", JSONPath.extract("{\"customer\" : 100, \"region\" : \"AFRICA\"}", "$.*").toString())
assertEquals("[\"ASIA\"]", JSONPath.extract("{\"region\" : \"ASIA\"}", "$.*").toString())
assertEquals("[300,\"AFRICA\",null]", JSONPath.extract("{\"customer\" : 300, \"region\" : \"AFRICA\", \"comment\" : null}", "$.*").toString())
assertEquals("2", JSONPath.extract("[0, 1, 2]", "$[last]").toString())
assertEquals("[1]", JSONPath.extract("[0, 1, 2]", "$[?(@>0 && @<2)]").toString())
assertEquals("[\"abc\",\"abb\"]", JSONPath.extract("['abc','aaa','abb']", "$[?(@ starts with 'ab')]").toString())
assertEquals("[\"abc\"]", JSONPath.extract("['abc','aaa','abb']", "$[?(@ ends with 'bc')]").toString())
assertEquals(2D, JSONPath.extract("2", "$.double()"))
assertEquals("2", JSONPath.extract("2.1", "$.floor()").toString())
assertEquals("-1", JSONPath.extract("-1.5", "$.ceiling()").toString())
assertEquals(3, JSONPath.eval(JSONArray.of(1, "a", null), "$.size()"))
assertEquals(2, JSONPath.eval(JSONObject.of("key1", 1.0, "key2", true), "$.size()"))
assertEquals(1, JSONPath.eval(-2e3, "$.size()"))
assertEquals(1, result)
assertEquals("Windows NT 6.1", result)
assertEquals("summer-sale", result)
assertEquals("sports", result)
assertEquals(Arrays.asList("Mozilla/5.0", "Windows NT 6.1", "1024x4069"), result)
assertEquals(Arrays.asList("Mozilla/5.0", "Windows NT 6.1", "1024x4069"), result)
assertEquals("1", JSON.toJSONString(min))
assertEquals("23", JSON.toJSONString(min))
assertEquals("[{\"c\":\"aaaa\"}]", JSON.toJSONString(min))
assertEquals("{\"csiLive\":[{\"id\":\"123\"}]}", JSON.toJSONString(csiObject))
assertEquals("{\"live\":{\"id\":123}}", JSON.toJSONString(csiObject))
assertEquals("{\"item\":{\"live\":{\"id\":123}}}", JSON.toJSONString(csiObject))
assertEquals(1, result.size())
assertSame(list.get(0), result.get(0))
assertEquals(2, result.size())
assertSame(list.get(0), result.get(0))
assertSame(list.get(1), result.get(1))
assertEquals(1, result.size())
assertSame(list.get(2), result.get(0))
assertEquals("[{\"id\":101,\"name\":\"DataWorks\"},{\"id\":102,\"name\":\"MaxCompute\"}]", JSONPath.of("$[?(@.id between 101 and 102)]").eval(array).toString())
assertEquals("[{\"id\":101,\"name\":\"DataWorks\"},{\"id\":102,\"name\":\"MaxCompute\"}]", JSONPath.of("$[?(@.id between 101 and 102)]").eval(array).toString())
assertEquals("[{\"id\":101,\"name\":\"DataWorks\"},{\"id\":102,\"name\":\"MaxCompute\"}]", JSONPath.of("$[?(@.id >= 101 and @.id <= 102)]").eval(array).toString())
assertEquals("{\"id\":101,\"name\":\"DataWorks\"}", JSONPath.of("$[?(@.id >= 101 and @.id <= 102)]").eval(object).toString())
assertEquals("{\"id\":101,\"name\":\"DataWorks\"}", JSONPath.of("$[?(@.id <= 101 or @.id >= 102)]").eval(object).toString())
assertEquals(10, vo.v0)
assertEquals(11, vo.v1)
assertEquals(12, vo.v2.byteValue())
assertEquals(13, vo.v3.shortValue())
assertEquals(10, vo.v0)
assertEquals(11, vo.v1)
assertEquals(12, vo.v2.byteValue())
assertEquals(13, vo.v3.shortValue())
assertEquals(10, vo.v0)
assertEquals(11, vo.v1)
assertEquals(12, vo.v2.byteValue())
assertEquals(13, vo.v3.shortValue())
assertEquals(10, vo.v0)
assertEquals(11, vo.v1)
assertEquals(12, vo.v2.byteValue())
assertEquals(13, vo.v3.shortValue())
assertEquals(10, vo.v0)
assertEquals(11, vo.v1)
assertEquals(12, vo.v2.byteValue())
assertEquals(13, vo.v3.shortValue())
assertEquals(10, vo.v0)
assertEquals(11, vo.v1)
assertEquals(12, vo.v2.byteValue())
assertEquals(13, vo.v3.shortValue())
assertEquals("[262144,18000000]", JSON.toJSONString(jsonPath.extract(JSONReader.of(str))))
assertEquals("[1,2,3,4,5]", JSONPath.extract(str, "$[*][0]").toString())
assertEquals("\"1\"", result.toString())
assertEquals("\"2020-01-06 17:00:00\"", result.toString())
assertEquals("{\"models\":[{\"x\":\"y2\"},{\"x\":\"y2\"}]}", JSON.toJSONString(root))
assertEquals(1323L, JSONPath.of("$.inputs.values()[*][0].sum()").eval(JSON.parseObject(str)))
assertEquals(19483761L, JSONPath.of("$.inputs.values()[*][1].sum()").eval(JSON.parseObject(str)))
assertEquals(19483761L, JSONPath.of("$.inputs.values()[*][1].sum()").extract(JSONReader.of(str)))
assertEquals("[\"sls_log_archive.mytable/project_id=101/category=log_game/import_time=1655031945_0\"]", JSONPath.of("$.inputs.keys()").eval(JSON.parseObject(str)).toString())
assertSame(object, JSONPath.of("$").eval(object))
assertEquals("[{\"key\":\"sls_log_archive.mytable/project_id=101/category=log_game/import_time=1655031945_0\",\"value\":[1323,19483761]}]", JSONPath.of("$.inputs.entrySet()").eval(JSON.parseObject(str)).toString())
assertEquals(Arrays.asList("Nigel Rees", "Evelyn Waugh", "Herman Melville", "J. R. R. Tolkien"), result)
assertEquals(Arrays.asList("Nigel Rees", "Evelyn Waugh", "Herman Melville", "J. R. R. Tolkien"), path.eval(rootObject))
assertEquals(Arrays.asList("Nigel Rees", "Evelyn Waugh", "Herman Melville", "J. R. R. Tolkien"), result)
assertEquals(Arrays.asList("Nigel Rees", "Evelyn Waugh", "Herman Melville", "J. R. R. Tolkien"), path.eval(rootObject))
assertEquals(2, ((Collection) result).size())
assertEquals(2, ((Collection) path.eval(rootObject)).size())
assertEquals("[8.95,12.99,8.99,22.99,19.95]", result.toString())
assertEquals(5, ((Collection) result).size())
assertEquals(5, ((Collection) path.eval(rootObject)).size())
assertEquals(expected, result.toString())
assertEquals(expected, path.eval(rootObject).toString())
assertEquals(expected, result.toString())
assertEquals(expected, path.eval(rootObject).toString())
assertEquals(expected, result.toString())
assertEquals(expected, path.eval(rootObject).toString())
assertEquals(expected, result.toString())
assertEquals(expected, path.eval(rootObject).toString())
assertEquals(expected, result.toString())
assertEquals(expected, path.eval(rootObject).toString())
assertEquals(expected, result.toString())
assertEquals(expected, path.eval(rootObject).toString())
assertEquals(expected, result.toString())
assertEquals(expected, path.eval(rootObject).toString())
assertEquals(expected, result.toString())
assertEquals(expected, path.eval(rootObject).toString())
assertEquals(expected, result.toString())
assertEquals(expected, path.eval(rootObject).toString())
assertEquals(expected, result.toString())
assertEquals(expected, path.eval(rootObject).toString())
assertEquals(expected, result.toString())
assertEquals(expected, path.eval(rootObject).toString())
assertEquals(expected, result.toString())
assertEquals(expected, path.eval(rootObject).toString())
assertEquals(4, result)
assertEquals(4, path.eval(rootObject))
assertEquals(10, vo.v0)
assertEquals(11, vo.v1)
assertEquals(12, vo.v2.byteValue())
assertEquals(13, vo.v3.shortValue())
assertEquals(10, vo.v0)
assertEquals(11, vo.v1)
assertEquals(12, vo.v2.byteValue())
assertEquals(13, vo.v3.shortValue())
assertEquals(10, vo.v0)
assertEquals(11, vo.v1)
assertEquals(12, vo.v2.byteValue())
assertEquals(13, vo.v3.shortValue())
assertNotNull(obj)
assertNotNull(obj)
assertNotNull(obj)
assertSame(obj, JSONPath.of("$").eval(obj))
assertNull(JSONPath.of("$").extract((String) null))
assertNull(JSONPath.of("$").extract((byte[]) null))
assertNull(JSONPath.of("$").extract((JSONReader) null))
assertSame(map.get("val"), JSONPath.of("$.val").eval(map))
assertSame(entity.getValue(), JSONPath.of("$.value").eval(entity))
assertEquals(Arrays.asList("Nigel Rees", "Evelyn Waugh", "Herman Melville", "J. R. R. Tolkien"), result)
assertEquals(Arrays.asList("Nigel Rees", "Evelyn Waugh", "Herman Melville", "J. R. R. Tolkien"), result)
assertEquals(3, ids.size())
assertEquals(1001, ids.get(0))
assertEquals(1002, ids.get(1))
assertEquals(1003, ids.get(2))
assertEquals(101, bean.item.id)
assertEquals(101, path.eval(bean))
assertEquals(102, bean.item.id)
assertEquals(102, path.eval(bean))
assertEquals(2.0D, path.eval(bean))
assertEquals(1, JSONPath.of("$.min()").eval(array))
assertEquals(4, JSONPath.of("$.max()").eval(array))
assertEquals("\"1\"", JSON.toJSONString(JSONPath.of("$.min()").eval(array)))
assertEquals("4", JSON.toJSONString(JSONPath.of("$.max()").eval(array)))
assertEquals("2.0", JSON.toJSONString(JSONPath.of("$.min()").eval(array)))
assertEquals("\"21474836480\"", JSON.toJSONString(JSONPath.of("$.max()").eval(array)))
assertEquals("3.0", JSON.toJSONString(JSONPath.of("$.min()").eval(array)))
assertEquals("\"214748364802147483648021474836480\"", JSON.toJSONString(JSONPath.of("$.max()").eval(array)))
assertEquals("3", JSON.toJSONString(JSONPath.of("$.min()").eval(array)))
assertEquals("\"214748364802147483648021474836480\"", JSON.toJSONString(JSONPath.of("$.max()").eval(array)))
assertEquals("3", JSON.toJSONString(JSONPath.of("$.min()").eval(new Object[] { BigDecimal.valueOf(4), 3 })))
assertEquals("4", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { BigDecimal.valueOf(4), 3 })))
assertEquals("3", JSON.toJSONString(JSONPath.of("$.min()").eval(new Object[] { BigDecimal.valueOf(4), 3L })))
assertEquals("4", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { BigDecimal.valueOf(4), 3L })))
assertEquals("3.0", JSON.toJSONString(JSONPath.of("$.min()").eval(new Object[] { BigDecimal.valueOf(4), 3F })))
assertEquals("4", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { BigDecimal.valueOf(4), 3F })))
assertEquals("3.0", JSON.toJSONString(JSONPath.of("$.min()").eval(new Object[] { BigDecimal.valueOf(4), 3D })))
assertEquals("4", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { BigDecimal.valueOf(4), 3D })))
assertEquals("3", JSON.toJSONString(JSONPath.of("$.min()").eval(new Object[] { BigDecimal.valueOf(4), BigInteger.valueOf(3) })))
assertEquals("4", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { BigDecimal.valueOf(4), BigInteger.valueOf(3) })))
assertEquals("3", JSON.toJSONString(JSONPath.of("$.min()").eval(new Object[] { 4L, 3 })))
assertEquals("4", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { 4L, 3 })))
assertEquals("3", JSON.toJSONString(JSONPath.of("$.min()").eval(new Object[] { 4L, BigDecimal.valueOf(3) })))
assertEquals("4", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { 4L, BigInteger.valueOf(3) })))
assertEquals("4", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { 4L, 3F })))
assertEquals("4", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { 4L, 3D })))
assertEquals("4", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { 4L, "3" })))
assertEquals("3", JSON.toJSONString(JSONPath.of("$.min()").eval(new Object[] { 4, 3L })))
assertEquals("4", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { 4, 3 })))
assertEquals("3", JSON.toJSONString(JSONPath.of("$.min()").eval(new Object[] { 4, BigDecimal.valueOf(3) })))
assertEquals("4", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { 4, BigInteger.valueOf(3) })))
assertEquals("4", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { 4, 3F })))
assertEquals("4", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { 4, 3D })))
assertEquals("4", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { 4, "3" })))
assertEquals("3", JSON.toJSONString(JSONPath.of("$.min()").eval(new Object[] { 4F, 3L })))
assertEquals("4.0", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { 4F, 3 })))
assertEquals("3", JSON.toJSONString(JSONPath.of("$.min()").eval(new Object[] { 4F, BigDecimal.valueOf(3) })))
assertEquals("4.0", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { 4F, BigInteger.valueOf(3) })))
assertEquals("4.0", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { 4F, 3F })))
assertEquals("4.0", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { 4F, 3D })))
assertEquals("4.0", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { 4F, "3" })))
assertEquals("3", JSON.toJSONString(JSONPath.of("$.min()").eval(new Object[] { 4D, 3L })))
assertEquals("4.0", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { 4D, 3 })))
assertEquals("3", JSON.toJSONString(JSONPath.of("$.min()").eval(new Object[] { 4D, BigDecimal.valueOf(3) })))
assertEquals("4.0", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { 4D, BigInteger.valueOf(3) })))
assertEquals("4.0", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { 4D, 3F })))
assertEquals("4.0", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { 4D, "3" })))
assertEquals(2, JSONPath.extract(str, "$.size()"))
assertEquals("array", JSONPath.extract(str, "$.type()"))
assertEquals("object", JSONPath.of("$[0].type()").extract(JSONReader.of(str)))
assertEquals("number", JSONPath.extract(str, "$[0].id.type()"))
assertEquals("string", JSONPath.extract(str, "$[0].name.type()"))
assertEquals("boolean", JSONPath.extract(str, "$[0].valid.type()"))
assertEquals("null", JSONPath.extract(str, "$[0].xx.type()"))
assertEquals("string", JSONPath.eval(root, "$.id.type()"))
assertEquals("string", JSONPath.eval(root, "$.unit.type()"))
assertNull(JSONPath.of("$[?( @.salary > 100000 )]").extract(JSONReader.of(str)))
assertEquals(JSON.parseObject(str), JSONPath.extract(str, "$[?( @.salary > 1000 )]"))
assertEquals("[[10,20],[100]]", JSON.toJSONString(object))
assertEquals("[[10,20]]", JSON.toJSONString(object))
assertEquals("[[10,20]]", JSON.toJSONString(object))
assertEquals("[[10,20]]", JSON.toJSONString(object))
assertEquals("[[10,20]]", JSON.toJSONString(object))
assertEquals("[[10,20]]", JSON.toJSONString(object))
assertEquals("[[10,20],{\"id\":1001}]", JSON.toJSONString(object))
assertEquals("[[10,20]]", JSON.toJSONString(object))
assertEquals("[[10,20],{\"id\":1001}]", JSON.toJSONString(object))
assertEquals("[15,-23,45]", JSON.toJSONString(object))
assertEquals("[15,-23,45]", JSON.toJSONString(object))
assertEquals(BigDecimal.valueOf(15), JSONPath.extract(str, "$.readings[0].floor()"))
assertEquals(13, JSONPath.extract(str, "$.readings[1].floor()"))
assertEquals(1D, JSONPath.eval(array, "$[0].floor()"))
assertEquals(2D, JSONPath.eval(array, "$[1].floor()"))
assertEquals((byte) 3, JSONPath.eval(array, "$[2].floor()"))
assertEquals((short) 4, JSONPath.eval(array, "$[3].floor()"))
assertEquals(5, JSONPath.eval(array, "$[4].floor()"))
assertEquals(6L, JSONPath.eval(array, "$[5].floor()"))
assertEquals(BigInteger.valueOf(7), JSONPath.eval(array, "$[6].floor()"))
assertEquals((Integer) vo.get("a.b"), (Integer) JSONPath.eval(vo, "a\\.b"))
assertEquals(10, vo.v0)
assertEquals(11, vo.v1)
assertEquals(12, vo.v2.byteValue())
assertEquals(13, vo.v3.shortValue())
assertEquals(10, vo.v0)
assertEquals(11, vo.v1)
assertEquals(12, vo.v2.byteValue())
assertEquals(13, vo.v3.shortValue())
assertEquals(10, vo.v0)
assertEquals(11, vo.v1)
assertEquals(12, vo.v2.byteValue())
assertEquals(13, vo.v3.shortValue())
assertEquals(1001, vo.getV0000())
assertTrue(JSONPath.of("$.v0000").remove(vo))
assertEquals(0, vo.getV0000())
assertEquals(3, paths.size())
assertNotNull(m.f1)
assertNull(m.f1)
assertEquals(3, paths.size())
assertEquals("$.f0", path.toString())
assertEquals(1001, path.eval(map))
assertEquals(2, map.size())
assertEquals(1, map.size())
assertEquals("[{\"id\":101,\"amount\":1}]", JSONPath.of("$.user[?(@.amount <= 1)]").eval(root).toString())
assertEquals("[{\"id\":101,\"amount\":1}]", JSONPath.of("$.user[?(@.amount < 2)]").eval(root).toString())
assertEquals("[{\"id\":102,\"amount\":2.0},{\"id\":103,\"amount\":3.0}]", JSONPath.of("$.user[?(@.amount >= 2)]").eval(root).toString())
assertEquals("[{\"id\":103,\"amount\":3.0}]", JSONPath.of("$.user[?(@.amount > 2)]").eval(root).toString())
assertEquals("0", JSONPath.of("$.length()").eval(Collections.emptySet()).toString())
assertEquals("0", JSONPath.of("$.length()").eval(new Object[0]).toString())
assertEquals(path.extract(JSONReader.of(content)), "1")
assertEquals("{\"company\":{\"name\":\"jobs\"}}", JSON.toJSONString(root))
assertEquals("{\"company\":{\"name\":\"jobs\"}}", JSON.toJSONString(root))
assertEquals(Size.Small.name(), JSONPath.eval(model, "$.size.name"))
assertEquals(Size.Small.ordinal(), JSONPath.eval(model, "$.size.ordinal"))
assertEquals(101, bean.id)
assertEquals(101, path.eval(bean))
assertEquals(102, bean.id)
assertEquals(102, path.eval(bean))
assertEquals(103, bean.id)
assertEquals(101, bean.item.id)
assertEquals(101, path.eval(bean))
assertEquals(102, bean.item.id)
assertEquals(102, path.eval(bean))
assertEquals(103, bean.item.id)
assertEquals(101, bean.id)
assertEquals(101L, path.eval(bean))
assertEquals(102, bean.id)
assertEquals(102L, path.eval(bean))
assertEquals(101, bean.id)
assertEquals(101F, path.eval(bean))
assertEquals(102, bean.id)
assertEquals(102F, path.eval(bean))
assertEquals(101, bean.id)
assertEquals(101D, path.eval(bean))
assertEquals(102, bean.id)
assertEquals(102D, path.eval(bean))
assertEquals(101, bean.id)
assertEquals((short) 101, path.eval(bean))
assertEquals(102, bean.id)
assertEquals((short) 102, path.eval(bean))
assertEquals(101, bean.id)
assertEquals((byte) 101, path.eval(bean))
assertEquals(102, bean.id)
assertEquals((byte) 102, path.eval(bean))
assertEquals(true, bean.id)
assertEquals(true, path.eval(bean))
assertEquals('8', bean.id)
assertEquals('8', path.eval(bean))
assertNotNull(value)
assertEquals(10F, vo.v0)
assertEquals(11D, vo.v1)
assertEquals(12F, vo.v2.floatValue())
assertEquals(13D, vo.v3.doubleValue())
assertEquals(10F, vo.v0)
assertEquals(11D, vo.v1)
assertEquals(12F, vo.v2.floatValue())
assertEquals(13D, vo.v3.doubleValue())
assertEquals(10F, vo.v0)
assertEquals(11D, vo.v1)
assertEquals(12F, vo.v2.floatValue())
assertEquals(13D, vo.v3.doubleValue())
assertEquals(10F, vo.v0)
assertEquals(11D, vo.v1)
assertEquals(12F, vo.v2.floatValue())
assertEquals(13D, vo.v3.doubleValue())
assertEquals(10F, vo.v0)
assertEquals(11D, vo.v1)
assertEquals(12F, vo.v2.floatValue())
assertEquals(13D, vo.v3.doubleValue())
assertEquals(10F, vo.v0)
assertEquals(11D, vo.v1)
assertEquals(12F, vo.v2.floatValue())
assertEquals(13D, vo.v3.doubleValue())
assertEquals("[0,9,2,3]", array.toJSONString())
assertEquals("[0,9,2,3]", JSONPath.set("[0,1,2,3]", "$[?(@ == 1)]", 9))
assertEquals("{\"store\":{\"book\":[\"a\",\"x1\"]}}", object.toJSONString())
assertEquals("{\"store\":{\"book\":[\"a\",\"x1\"]}}", JSONPath.set("{'store':{'book':['x0','x1']}}", "$.store.book[0]", "a"))
assertEquals("{\"store\":{\"book\":[\"a\",\"a\",\"x2\",\"x3\"]}}", object.toJSONString())
assertEquals("{\"store\":{\"book\":[\"a\",\"a\",\"x2\",\"x3\"]}}", JSONPath.set("{'store':{'book':['x0','x1','x2','x3']}}", "$.store.book[0:2]", "a"))
assertEquals("[0,2,3]", array.toJSONString())
assertEquals("[0,2,3]", JSONPath.remove("[0,1,2,3]", "$[?(@ == 1)]"))
assertEquals("{\"store\":{\"book\":[\"x1\"]}}", object.toJSONString())
assertEquals("{\"store\":{\"book\":[\"x1\"]}}", JSONPath.remove("{'store':{'book':['x0','x1']}}", "$.store.book[0]"))
assertEquals("{\"store\":{\"book\":[\"x2\",\"x3\"]}}", object.toJSONString())
assertEquals("{\"store\":{\"book\":[\"x2\",\"x3\"]}}", JSONPath.remove("{'store':{'book':['x0','x1','x2','x3']}}", "$.store.book[0:2]"))
assertEquals("{\"store\":{}}", JSONPath.remove("{'store':{'book':['x0','x1','x2','x3']}}", "$.store.*"))
assertEquals("{\"store\":{\"book\":[]}}", JSONPath.remove("{'store':{'book':['x0','x1','x2','x3']}}", "$.store.book[*]"))
assertEquals("{\"store\":{\"book\":[]}}", JSONPath.remove("{'store':{'book':['x0','x1','x2','x3']}}", "$.store.book[*]"))
assertEquals("number", JSONPath.extract("1", "$.type()"))
assertEquals("number", JSONPath.extract("1.0", "$.type()"))
assertEquals("string", JSONPath.extract("'1'", "$.type()"))
assertEquals("string", JSONPath.extract("\"abc\"", "$.type()"))
assertEquals("boolean", JSONPath.extract("true", "$.type()"))
assertEquals("boolean", JSONPath.extract("false", "$.type()"))
assertEquals("object", JSONPath.extract("{}", "$.type()"))
assertEquals("array", JSONPath.extract("[]", "$.type()"))
assertEquals("null", JSONPath.extract("null", "$.type()"))
assertEquals(0, JSONPath.extract("[]", "$.size()"))
assertEquals(1, JSONPath.extract("[0]", "$.size()"))
assertEquals(0, JSONPath.extract("{}", "$.size()"))
assertEquals(1, JSONPath.extract("{\"id\":123}", "$.size()"))
assertEquals(1, JSONPath.extract("1", "$.abs()"))
assertEquals(1, JSONPath.extract("-1", "$.abs()"))
assertEquals(1L, JSONPath.extract("1L", "$.abs()"))
assertEquals(1L, JSONPath.extract("-1L", "$.abs()"))
assertEquals(new BigDecimal("1.0"), JSONPath.extract("1.0", "$.abs()"))
assertEquals(new BigDecimal("1.0"), JSONPath.extract("-1.0", "$.abs()"))
assertEquals(1.0F, JSONPath.extract("1.0F", "$.abs()"))
assertEquals(1.0F, JSONPath.extract("-1.0F", "$.abs()"))
assertEquals(1.0D, JSONPath.extract("1.0D", "$.abs()"))
assertEquals(1.0D, JSONPath.extract("-1.0D", "$.abs()"))
assertEquals(BigInteger.ONE, JSONPath.eval(BigInteger.valueOf(1), "$.abs()"))
assertEquals(BigInteger.ONE, JSONPath.eval(BigInteger.valueOf(-1), "$.abs()"))
assertEquals(1, JSONPath.extract("{'id':1}", "$.id.abs()"))
assertEquals(1, JSONPath.extract("{'id':1}", "$.id.abs()"))
assertEquals(1D, JSONPath.extract("1", "$.double()"))
assertEquals(JSONArray.of(1D), JSONPath.extract("[1]", "$.double()"))
assertEquals(JSONArray.of(1D, 2D, 3D, 4D, 5D, null), JSONPath.extract("[1.0, 2, 3F, 4D, \"5\", \"\"]", "$.double()"))
assertEquals(1D, JSONPath.extract("{'id':1}", "$.id.double()"))
assertEquals(1D, JSONPath.extract("{'id':1}", "$.id.double()"))
assertEquals(1, JSONPath.extract("1", "$.floor()"))
assertEquals(new BigDecimal("1"), JSONPath.extract("1.1", "$.floor()"))
assertEquals(1D, JSONPath.extract("1.1F", "$.floor()"))
assertEquals(1D, JSONPath.extract("1.1D", "$.floor()"))
assertEquals("1", result.toString())
assertEquals("2020-01-06 17:00:00", result.toString())
assertEquals("450", result.toString())
assertEquals("{\"color\":\"red\",\"price\":19.95,\"gears\":[23,50],\"extra\":{\"x\":0},\"escape\":\"Esc\\b\\f\\n\\r\\t*\",\"nullValue\":null}", JSON.toJSONString(JSONPath.extract(STR, "$.store.bicycle[?(@.color == 'red' )]"), JSONWriter.Feature.WriteNulls))
assertEquals("{\"color\":\"red\",\"price\":19.95,\"gears\":[23,50],\"extra\":{\"x\":0},\"escape\":\"Esc\\b\\f\\n\\r\\t*\",\"nullValue\":null}", JSON.toJSONString(JSONPath.extract(STR, "$.store.bicycle[?(@.gears == [23, 50])]"), JSONWriter.Feature.WriteNulls))
assertNull(JSONPath.extract(STR, "$.store.bicycle[?(@.gears == [23, 77])]"))
assertEquals("{\"color\":\"red\",\"price\":19.95,\"gears\":[23,50],\"extra\":{\"x\":0},\"escape\":\"Esc\\b\\f\\n\\r\\t*\",\"nullValue\":null}", JSON.toJSONString(JSONPath.extract(STR, "$.store.bicycle[?(@.extra == {\"x\":0})]"), JSONWriter.Feature.WriteNulls))
assertEquals("{\"color\":\"red\",\"price\":19.95,\"gears\":[23,50],\"extra\":{\"x\":0},\"escape\":\"Esc\\b\\f\\n\\r\\t*\",\"nullValue\":null}", JSON.toJSONString(JSONPath.extract(STR, "$.store.bicycle[?(@.escape == 'Esc\\b\\f\\n\\r\\t\\u002A')]"), JSONWriter.Feature.WriteNulls))
assertEquals(1, result.size())
assertSame(list.get(0), result.get(0))
assertEquals(2, result.size())
assertSame(list.get(0), result.get(0))
assertSame(list.get(1), result.get(1))
assertEquals(1, result.size())
assertSame(list.get(2), result.get(0))
assertEquals("{\"brokerAddrs\":{0:\"0.0.0.0\"}}", str)
assertEquals("0.0.0.0", brokerData1.getBrokerAddrs().get(0L))
assertEquals(cmd.code, cmd1.code)
assertTrue(JSONValidator.from("{}").validate())
assertTrue(JSONValidator.fromUtf8("{}".getBytes(StandardCharsets.UTF_8)).validate())
assertTrue(JSONValidator.from("[]").validate())
assertTrue(JSONValidator.fromUtf8("[]".getBytes(StandardCharsets.UTF_8)).validate())
assertTrue(JSONValidator.from("1").validate())
assertTrue(JSONValidator.from("\"123\"").validate())
assertEquals(JSONValidator.Type.Value, JSONValidator.from("\"123\"").getType())
assertTrue(validator.validate())
assertTrue(validator.validate())
assertTrue(JSONValidator.from(new JSONReaderStr(JSONFactory.createReadContext(), "{}")).validate())
assertTrue(JSONValidator.from(new JSONReaderStr(JSONFactory.createReadContext(), "[]")).validate())
assertTrue(JSONValidator.from(new JSONReaderStr(JSONFactory.createReadContext(), "1")).validate())
assertTrue(JSONValidator.from(new JSONReaderStr(JSONFactory.createReadContext(), "\"123\"")).validate())
assertEquals(JSONValidator.Type.Value, JSONValidator.from(new JSONReaderStr(JSONFactory.createReadContext(), "\"123\"")).getType())
assertTrue(validator.validate())
assertTrue(validator.validate())
assertTrue(JSON.isValidArray("[]"))
assertEquals(1, array.get(0))
assertEquals(2L, array.get(1))
assertEquals("3", array.get(2))
assertNull(JSON.parseArray(str))
assertNull(JSON.parseArray(str, JSONReader.Feature.SupportAutoType))
assertNull(JSON.parseArray(str.toCharArray()))
assertNull(JSON.parseArray(strBytes))
assertNull(JSON.parseArray(strBytes, 0, strBytes.length, StandardCharsets.UTF_8))
assertEquals(2, jsonArray.size())
assertNotSame(jsonArray.get(0), jsonArray.get(1))
assertEquals(2, jsonArray1.size())
assertNotSame(jsonArray1.get(0), jsonArray1.get(1))
assertEquals(101, intField1.v0000)
assertNotNull(date1.getDate())
assertEquals(101, vo.v0000)
assertEquals(101, intField1.v0000)
assertNotNull(date1.getDate())
assertEquals(101, intField1.v0000)
assertNotNull(date1.getDate())
assertEquals(101, vo.v0000)
assertEquals(101, vo.v0000)
assertEquals(101, vo.v0000)
assertEquals(101, vo.v0000)
assertNull(JSON.parseObject((ByteBuffer) null, IntField1.class))
assertEquals(101, vo.v0000)
assertEquals("null", new String(JSON.toJSONBytes(null, new Filter[0])))
assertEquals("null", new String(out.toByteArray()))
assertEquals("\"test\"", new String(JSON.toJSONBytes("test", new Filter[0], JSONWriter.Feature.WriteNulls)))
assertEquals("\"test\"", new String(JSON.toJSONBytes("test", Arrays.asList(new SimplePropertyPreFilter()).toArray(new Filter[0]), JSONWriter.Feature.WriteNulls)))
assertTrue(object.isEmpty())
assertEquals(1, object.size())
assertEquals(123, object.get("id"))
assertTrue(object.isEmpty())
assertEquals(1, object.size())
assertEquals(123, object.get("id"))
assertTrue(list.isEmpty())
assertEquals(1, list.size())
assertEquals(123, list.get(0))
assertTrue(list.isEmpty())
assertEquals(1, list.size())
assertEquals(123, list.get(0))
assertEquals(1, list.size())
assertEquals("123", list.get(0))
assertEquals("\"2017-03-17\"", json1)
assertEquals("\"2017-03-17 00:00:01\"", json2)
assertNotNull(date1)
assertNotNull(date2)
assertNull(JSON.parse("null"))
assertNull(JSON.parse(""))
assertNull(JSON.parse(null, 0, 0))
assertNull(JSON.parse("", 0, 0))
assertNull(JSON.parse("abc", 0, 0))
assertNull(JSON.parseObject("null"))
assertNull(JSON.parseObject(""))
assertNull(JSON.parseObject("null", JSONReader.Feature.SupportSmartMatch))
assertNull(JSON.parseObject("", JSONReader.Feature.SupportSmartMatch))
assertNull(JSON.parseObject("null", JSONFactory.createReadContext()))
assertNull(JSON.parseObject("null", JSONFactory.createReadContext(JSONReader.Feature.SupportSmartMatch)))
assertNull(JSON.parseObject("", JSONFactory.createReadContext()))
assertEquals("{}", JSON.parseObject("{}", JSONFactory.createReadContext()).toString())
assertNull(JSON.parseObject((String) null, 0, 0))
assertNull(JSON.parseObject("", 0, 0))
assertNull(JSON.parseObject("abc", 0, 0))
assertNull(JSON.parseObject("null", 0, 4))
assertNull(JSON.parseObject((byte[]) null))
assertNull(JSON.parseObject(new byte[0]))
assertNull(JSON.parseObject("null".getBytes(StandardCharsets.UTF_8)))
assertNull(JSON.parseObject((byte[]) null, 0, 0))
assertNull(JSON.parseObject(new byte[0], 0, 0))
assertNull(JSON.parseObject("abc".getBytes(StandardCharsets.UTF_8), 0, 0))
assertNull(JSON.parseObject("null".getBytes(StandardCharsets.UTF_8), 0, 4))
assertNull(JSON.parseObject((byte[]) null, 0, 0, StandardCharsets.US_ASCII))
assertNull(JSON.parseObject(new byte[0], 0, 0, StandardCharsets.US_ASCII))
assertNull(JSON.parseObject("abc".getBytes(StandardCharsets.UTF_8), 0, 0, StandardCharsets.US_ASCII))
assertNull(JSON.parseObject("null".getBytes(StandardCharsets.UTF_8), 0, 4, StandardCharsets.US_ASCII))
assertNull(JSON.parseObject((String) null, Object.class, (Filter) null))
assertNull(JSON.parseObject("", Object.class, (Filter) null))
assertNull(JSON.parseObject("null", Object.class, (Filter) null))
assertNull(JSON.parseObject((String) null, Object.class))
assertNull(JSON.parseObject("", Object.class))
assertNull(JSON.parseObject("null", Object.class))
assertNull(JSON.parseObject((String) null, (Type) Object.class))
assertNull(JSON.parseObject("", (Type) Object.class))
assertNull(JSON.parseObject("null", (Type) Object.class))
assertNull(JSON.parseObject((String) null, 0, 0, Object.class))
assertNull(JSON.parseObject("", 0, 0, Object.class))
assertNull(JSON.parseObject("null", 0, 0, Object.class))
assertNull(JSON.parseObject((String) null, Object.class, "", new Filter[0]))
assertNull(JSON.parseObject("", Object.class, "", new Filter[0]))
assertNull(JSON.parseObject("null", Object.class, "", new Filter[0]))
assertNull(JSON.parseObject((byte[]) null, Object.class, "", new Filter[0]))
assertNull(JSON.parseObject("".getBytes(StandardCharsets.UTF_8), Object.class, "", new Filter[0]))
assertNull(JSON.parseObject("null".getBytes(StandardCharsets.UTF_8), Object.class, "", new Filter[0]))
assertNull(JSON.parseObject((String) null, new TypeReference<List<Map>>() {
}, (Filter) null))
assertNull(JSON.parseObject("", new TypeReference<List<Map>>() {
}, (Filter) null))
assertNull(JSON.parseObject("null", new TypeReference<List<Map>>() {
}, (Filter) null))
assertNull(JSON.parseArray((byte[]) null, (Type) Object.class))
assertNull(JSON.parseArray(new byte[0], (Type) Object.class))
assertNull(JSON.parseArray("null".getBytes(StandardCharsets.UTF_8), (Type) Object.class))
assertNull(JSON.parseArray("null", new Type[0]))
assertNull(JSON.parseObject((byte[]) null, Object.class, (Filter) null))
assertNull(JSON.parseObject(new byte[0], Object.class, (Filter) null))
assertNull(JSON.parseObject("null".getBytes(StandardCharsets.UTF_8), Object.class, (Filter) null))
assertEquals("null", JSON.toJSONString(null, JSONWriter.Feature.WriteNulls))
assertEquals("null", new String(JSON.toJSONBytes(null, JSONWriter.Feature.WriteNulls)))
assertEquals("[1]", new String(out.toByteArray()))
assertEquals("null", new String(out.toByteArray()))
assertEquals("[1]", new String(out.toByteArray()))
assertEquals("[1]", new String(out.toByteArray()))
assertEquals("[1]", new String(out.toByteArray()))
assertEquals("[1][1]", new String(out.toByteArray()))
assertTrue((Boolean) JSON.parse("true"))
assertEquals(str, JSON.parse("\"" + str + "\""))
assertEquals(0, JSON.parse("0"))
assertNull(ObjectReaderImplList.INSTANCE.getFieldReader(0))
assertEquals(Fnv.hashCode64("@type"), ObjectReaderImplList.INSTANCE.getTypeKeyHash())
assertEquals(123, ((List) JSON.parseObject("\"123\"", new TypeReference<List<Integer>>() {
}.getType())).get(0))
assertEquals(123, ((List) JSON.parseObject("\"123\"", new TypeReference<LinkedList<Integer>>() {
}.getType())).get(0))
assertEquals(123, ((List) JSON.parseObject("\"123\"", new TypeReference<ArrayList<Integer>>() {
}.getType())).get(0))
assertEquals(123, ((List) JSON.parseObject("\"123\"", new TypeReference<AbstractList<Integer>>() {
}.getType())).get(0))
assertNotNull(instance)
assertEquals("123", ((List) JSON.parseObject("[\"123\"]", new TypeReference<List<String>>() {
}.getType())).get(0))
assertEquals("123", ((List) JSON.parseObject("[\"123\"]", new TypeReference<LinkedList<String>>() {
}.getType())).get(0))
assertEquals("123", ((List) JSON.parseObject("[\"123\"]", new TypeReference<ArrayList<String>>() {
}.getType())).get(0))
assertEquals("123", ((List) JSON.parseObject("[\"123\"]", new TypeReference<AbstractList<String>>() {
}.getType())).get(0))
assertNull(new ObjectReaderImplListStr(MyList.class, MyList.class).getFieldReader(0))
assertNotNull(error)
assertNotNull(users)
assertEquals(1, users.size())
assertNotNull(user)
assertEquals(1, user.id)
assertEquals("kraity", user.name)
assertNull(JSON.parse(null))
assertNull(JSON.parse((byte[]) null, JSONReader.Feature.SupportAutoType))
assertNull(JSON.parse((String) null, JSONReader.Feature.SupportAutoType))
assertNull(JSON.parseObject((String) null))
assertNull(JSON.parseObject((String) null, JSONReader.Feature.SupportAutoType))
assertNull(JSON.parseObject((byte[]) null))
assertNull(JSON.parseObject((byte[]) null, JSONReader.Feature.SupportAutoType))
assertNull(JSON.parseObject(new byte[0]))
assertNull(JSON.parseObject(new byte[0], JSONReader.Feature.SupportAutoType))
assertNull(JSON.parseObject((byte[]) null, User.class))
assertNull(JSON.parseObject((byte[]) null, User.class, JSONReader.Feature.SupportAutoType))
assertNull(JSON.parseObject((byte[]) null, (Type) User.class))
assertNull(JSON.parseObject((byte[]) null, (Type) User.class, JSONReader.Feature.SupportAutoType))
assertNull(JSON.parseObject((byte[]) null, (Type) User.class, ""))
assertNull(JSON.parseObject((byte[]) null, (Type) User.class, "", JSONReader.Feature.SupportAutoType))
assertNull(JSON.parseObject(new byte[0], (Type) User.class, ""))
assertNull(JSON.parseObject(new byte[0], (Type) User.class, "", JSONReader.Feature.SupportAutoType))
assertNull(JSON.parseObject(new byte[0], 0, 0, StandardCharsets.UTF_8, (Type) User.class))
assertNull(JSON.parseObject(new char[0], 0, 0, User.class))
assertNull(JSON.parseObject(new char[0], 0, 0))
assertNull(JSON.parseObject(new char[0]))
assertNull(JSON.parseArray(new char[0]))
assertNull(JSON.parseArray(new char[0], User.class))
assertNull(JSON.parseObject((char[]) null, 0, 0, User.class))
assertNull(JSON.parseObject((char[]) null, 0, 0))
assertNull(JSON.parseObject((char[]) null))
assertNull(JSON.parseObject("null".toCharArray()))
assertNull(JSON.parseObject("null".toCharArray(), User.class))
assertNull(JSON.parseObject((char[]) null, User.class))
assertNull(JSON.parseObject(new char[0], User.class))
assertNull(JSON.parseArray((char[]) null))
assertNull(JSON.parseArray((char[]) null, User.class))
assertNull(JSON.parseArray(new char[0], User.class))
assertNull(JSON.parseObject("null".toCharArray(), 0, "null".length()))
assertNull(JSON.parseObject((byte[]) null, 0, 0, User.class))
assertNull(JSON.parseObject((byte[]) null, 0, 0))
assertNull(JSON.parseObject((byte[]) null))
assertNull(JSON.parseArray((byte[]) null))
assertNull(JSON.parseArray((byte[]) null, User.class))
assertNull(JSON.parseArray((URL) null))
assertNull(JSON.parseObject((byte[]) null, User.class, JSONFactory.createReadContext()))
assertNull(JSON.parseObject(new byte[0], User.class, JSONFactory.createReadContext()))
assertNull(JSON.parseObject(new byte[0], 0, 0, StandardCharsets.UTF_8, User.class, JSONReader.Feature.IgnoreNoneSerializable))
assertNull(JSON.parseObject((byte[]) null, 0, 0, StandardCharsets.UTF_8, User.class, JSONReader.Feature.IgnoreNoneSerializable))
assertNull(JSON.parseObject(new ByteArrayInputStream("null".getBytes()), StandardCharsets.UTF_8))
assertNull(JSON.parseObject("null".getBytes(), JSONReader.Feature.IgnoreNoneSerializable))
assertNull(JSON.parseArray(new ByteArrayInputStream("null".getBytes()), JSONReader.Feature.IgnoreNoneSerializable))
assertNull(JSON.parseArray("", (Type) User.class, JSONReader.Feature.IgnoreNoneSerializable))
assertNull(JSON.parseArray((String) null, (Type) User.class, JSONReader.Feature.IgnoreNoneSerializable))
assertNull(JSON.parseArray((byte[]) null, 0, 0, StandardCharsets.UTF_8, User.class, JSONReader.Feature.IgnoreNoneSerializable))
assertNull(JSON.parseObject(null, 0, 0, StandardCharsets.UTF_8))
assertNull(JSON.parseArray(null, 0, 0, StandardCharsets.UTF_8))
assertNull(JSON.parseObject(null, 0, 0, StandardCharsets.UTF_8, User.class))
assertNull(JSON.parseObject(new byte[0], 0, 0, StandardCharsets.UTF_8))
assertNull(JSON.parseArray(new byte[0], 0, 0, StandardCharsets.UTF_8))
assertNull(JSON.parseObject(new byte[0], 0, 0, StandardCharsets.UTF_8, User.class))
assertNull(JSON.parseObject((String) null, User.class))
assertNull(JSON.parseObject((String) null, User.class, JSONReader.Feature.SupportAutoType))
assertNull(JSON.parseObject((String) null, (Type) User.class))
assertNull(JSON.parseObject((String) null, (Type) User.class, JSONReader.Feature.SupportAutoType))
assertNull(JSON.parseObject((String) null, User.class, ""))
assertNull(JSON.parseObject((String) null, User.class, "", JSONReader.Feature.SupportAutoType))
assertNull(JSON.parseObject((String) null, (Type) User.class, ""))
assertNull(JSON.parseObject((String) null, (Type) User.class, "", JSONReader.Feature.SupportAutoType))
assertNull(JSON.parseObject((String) null, new TypeReference<List<User>>() {
}))
assertNull(JSON.parseObject((String) null, new TypeReference<List<User>>() {
}, JSONReader.Feature.SupportAutoType))
assertNull(JSON.parseArray((String) null))
assertNull(JSON.parseArray((String) null, JSONReader.Feature.SupportAutoType))
assertNull(JSON.parseArray(""))
assertNull(JSON.parseArray("", JSONReader.Feature.SupportAutoType))
assertNull(JSON.parseArray((String) null))
assertNull(JSON.parseArray((String) null, JSONReader.Feature.SupportAutoType))
assertNull(JSON.parseArray("", User.class))
assertNull(JSON.parseArray("", User.class, JSONReader.Feature.SupportAutoType))
assertNull(JSON.parseArray("", new Type[] { User.class }, JSONReader.Feature.SupportAutoType))
assertEquals("null", JSON.toJSONString(null, (Filter) null))
assertEquals("null", JSON.toJSONString(null, (Filter[]) null))
assertEquals("null", JSON.toJSONString(null, ""))
assertEquals("null", JSON.toJSONString(null, "", (Filter[]) null))
assertEquals("null", new String(JSON.toJSONBytes(null, (Filter) null)))
assertEquals("null", new String(JSON.toJSONBytes(null, (Filter[]) null)))
assertEquals("null", new String(JSON.toJSONBytes(null, (Filter[]) null, JSONWriter.Feature.WriteNulls)))
assertEquals("null", new String(JSON.toJSONBytes(null, "", (Filter[]) null)))
assertNull(JSON.toJSON(null))
assertNull(JSON.toJavaObject(null, null))
assertNull(JSON.parseObject((URL) null))
assertSame(object, JSON.toJSON(object))
assertSame(array, JSON.toJSON(array))
assertEquals(1, JSON.toJSON(1))
assertTrue(JSON.isValidArray("[]".getBytes(StandardCharsets.UTF_8)))
assertNull(JSON.parseObject((InputStream) null, utf8))
assertEquals(0, object.size())
assertNotNull(map)
assertTrue(map.isEmpty())
assertNotNull(map)
assertTrue(map.isEmpty())
assertNotNull(map)
assertTrue(map.isEmpty())
assertEquals("{\"dates\":[\"022022\"]}", str)
assertEquals(1, bean1.dates.size())
assertEquals(2022, instance.get(Calendar.YEAR))
assertEquals(1, instance.get(Calendar.MONTH))
assertEquals("{\"dates\":null}", str)
assertEquals("{\"dates\":null}", str)
assertEquals("{\"date\":\"1970-01-01 00:00:00\"}", jw.toString())
assertEquals("[null]", JSON.toJSONString(dates))
assertEquals(date.getDate(), bean2.getDate())
assertEquals("\"1970-01-01 00:00:00\"", jw.toString())
assertEquals("\"1970-01-01T00:00:00Z\"", jw.toString())
assertEquals("\"1970-01-01T00:00Z\"", jw.toString())
assertEquals("\"1970-01-01 00:00:00\"", jw.toString())
assertEquals("\"1970-01-01\"", jw.toString())
assertEquals("\"12:13:14\"", jw.toString())
assertEquals("\"12:13:14\"", jw.toString())
assertEquals("\"" + zoneId + "\"", jw.toString())
assertEquals("\"" + timeZone.getID() + "\"", jw.toString())
assertNull(JSON.copyTo(null, HashMap.class))
assertNull(JSON.copyTo(null, HashMap.class, JSONWriter.Feature.FieldBased))
assertNull(JSON.copyTo(null, HashMap.class, JSONWriter.Feature.BeanToArray))
assertNull(JSON.copyTo(null, HashMap.class, JSONWriter.Feature.BeanToArray, JSONWriter.Feature.FieldBased, JSONWriter.Feature.ReferenceDetection))
assertEquals(map.get("id"), object.get("id"))
assertEquals(map1.get("id"), object.get("id"))
assertNotNull(objectReader.getFieldReader("userId1"))
assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId1")))
assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid1")))
assertNotNull(objectReader.getFieldReader("userId2"))
assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId2")))
assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid2")))
assertNotNull(objectReader.getFieldReader("userId3"))
assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId3")))
assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid3")))
assertNull(objectReader.getFieldReader("id"))
assertNull(objectReader.getFieldReader(0))
assertNull(objectReader.getFieldReaderLCase(0))
assertEquals(0, JSONB.parseObject(JSONArray.of().toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0)
assertEquals(101, JSONB.parseObject(JSONArray.of(101).toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0)
assertEquals(101, JSONB.parseObject(JSONArray.of(101, 102).toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0)
assertEquals("[[0,0,0],[101,0,0],[201,202,0],[301,302,303],[401,402,403],[501,502,503],[601,602,603]]", JSON.toJSONString(JSONB.parseObject(JSONArray.of(JSONArray.of(), JSONArray.of(101), JSONArray.of(201, 202), JSONArray.of(301, 302, 303), JSONArray.of(401, 402, 403), JSONArray.of(501, 502, 503, 504), JSONArray.of(601, 602, 603, 604)).toJSONBBytes(), Bean1[].class, JSONReader.Feature.SupportArrayToBean), JSONWriter.Feature.BeanToArray))
assertEquals(0, JSONB.parseObject(JSONArray.of().toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0)
assertEquals(101, JSONB.parseObject(JSONArray.of(101).toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0)
assertEquals(101, JSONB.parseObject(JSONArray.of(101, 102).toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0)
assertEquals("[[0,0,0],[101,0,0],[201,202,0],[301,302,303],[401,402,403],[501,502,503],[601,602,603]]", JSON.toJSONString(JSONB.parseObject(JSONArray.of(JSONArray.of(), JSONArray.of(101), JSONArray.of(201, 202), JSONArray.of(301, 302, 303), JSONArray.of(401, 402, 403), JSONArray.of(501, 502, 503, 504), JSONArray.of(601, 602, 603, 604)).toJSONBBytes(), Bean2[].class, JSONReader.Feature.SupportArrayToBean), JSONWriter.Feature.BeanToArray))
assertEquals(123L, bean.value)
assertNotNull(fieldReader.method)
assertEquals(101L, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
assertEquals(201L, objectReader.readObject(JSONReader.of("{\"value\":201}"), 0).value)
assertEquals(123L, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value)
assertEquals(123, bean.value)
assertEquals(123, objectReader.readObject(JSONReader.of("{\"value\":123}")).value)
assertEquals(123, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value)
assertEquals((short) 123, bean.value)
assertNotNull(fieldReader.method)
assertEquals((short) 101, bean.value)
assertEquals((short) 101, bean.value)
assertEquals((short) 102, bean.value)
assertEquals((short) 101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
assertEquals((short) 201, objectReader.readObject(JSONReader.of("{\"value\":201}"), 0).value)
assertEquals((short) 123, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value)
assertNotNull(fieldReader.method)
assertNull(bean.value)
assertNull(bean.value)
assertEquals(1499055194000L, bean.value.getTime())
assertNull(bean.value)
assertNotNull(fieldReader.getObjectReader(JSONReader.of("")))
assertEquals(1499055194000L, bean.value.getTime())
assertEquals(1499055194000L, bean.value.getTime())
assertEquals(1499055194000L, objectReader.readObject(JSONReader.of("{\"value\":\"2017-07-03 12:13:14\"}"), 0).value.getTime())
assertEquals(1499055194000L, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":\"2017-07-03 12:13:14\"}")).value.getTime())
assertEquals(1499055194000L, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":1499055194000}")).value.getTime())
assertNull(objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":null}")).value)
assertEquals(1499055194000L, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":1499055194}")).value.getTime())
assertEquals(1499055194000L, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":1499055194000}")).value.getTime())
assertEquals(1499055194000L, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":\"20170703121314000+0800\"}")).value.getTime())
assertEquals(1499055194000L, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":\"2017-07-03T12:13:14\"}")).value.getTime())
assertEquals(123F, bean.value)
assertNotNull(fieldReader.method)
assertEquals(101F, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
assertEquals(201F, objectReader.readObject(JSONReader.of("{\"value\":201}"), 0).value)
assertEquals(201F, objectReader.readObject(JSONReader.of("{\"value\":201}"), 0).value)
assertEquals(12.34F, ((Float) fieldValue).floatValue())
assertEquals(123L, bean.data)
assertEquals(1, LongReader.INSTANCE.count.get())
assertEquals(123L, bean.data)
assertEquals(1, LongReader.INSTANCE.count.get())
assertEquals(123L, bean.data)
assertEquals(1, LongReader.INSTANCE.count.get())
assertEquals(123L, bean.data)
assertEquals(1, LongReader.INSTANCE.count.get())
assertEquals(BigInteger.valueOf(123), bean.data)
assertEquals(1, BigIntegerReader.INSTANCE.count.get())
assertEquals(123, JSON.parseObject(str, Bean.class).value.get(0))
assertEquals(123, JSON.parseObject(str).to(Bean.class).value.get(0))
assertEquals("getValue", fieldReader.toString())
assertTrue(fieldReader.isReadOnly())
assertEquals(101, bean1.id)
assertEquals(123, bean1.value.get(0))
assertEquals(101, bean1.id)
assertEquals(0, bean1.value.get(0))
assertEquals(new BigDecimal("123"), bean.value)
assertNotNull(fieldReader.method)
assertEquals(new BigDecimal("101"), objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
assertEquals(new BigDecimal("201"), objectReader.readObject(JSONReader.of("{\"value\":201}"), 0).value)
assertEquals(123, JSON.parseObject(str, Bean.class).value.get())
assertEquals(123, JSON.parseObject(str).to(Bean.class).value.get())
assertEquals("getValue", fieldReader.toString())
assertTrue(fieldReader.isReadOnly())
assertEquals(101, bean1.id)
assertEquals(123, bean1.value.get())
assertEquals(101, bean1.id)
assertEquals(0, bean1.value.get())
assertNotNull(exception)
assertEquals("xx", exception.getMessage())
assertEquals(123, bean.value)
assertNotNull(fieldReader.method)
assertEquals(101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
assertEquals(201, objectReader.readObject(JSONReader.of("{\"value\":201}"), 0).value)
assertEquals(123, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value)
assertEquals(123D, bean.value)
assertNotNull(fieldReader.method)
assertEquals(101D, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
assertEquals(201D, objectReader.readObject(JSONReader.of("{\"value\":201}"), 0).value)
assertEquals(201D, objectReader.readObject(JSONReader.of("{\"value\":201}"), 0).value)
assertNotNull(fieldReader.method)
assertEquals(Long.class, fieldReader.getItemType())
assertEquals(123L, bean.values.get(0))
assertEquals(101L, objectReader.readObject(JSONReader.of("{\"values\":[101]}"), 0).values.get(0))
assertNotNull(fieldReader.method)
assertEquals(Long.class, fieldReader.getItemType())
assertEquals(123L, bean.values.get(0))
assertEquals(102L, objectReader.readObject(JSONReader.of("{\"id\":123,\"values\":[101,102]}"), 0).values.get(1))
assertEquals(101L, bean1.values.get(0))
assertEquals(102L, bean1.values.get(1))
assertNotNull(bean.date)
assertEquals(epochMilli, bean.date.getTime())
assertNull(bean.date)
assertEquals(epochMilli, bean.date.getTime())
assertNull(bean.date)
assertEquals(epochMilli, bean.date.getTime())
assertNull(bean.date)
assertEquals(epochMilli, bean.date.getTime())
assertSame(ObjectReaderImplDate.INSTANCE, fieldReader.getObjectReader(JSONFactory.createReadContext()))
assertEquals(bean.date, fieldReader.apply(instant))
assertEquals(bean.date, fieldReader.apply(epochMilli))
assertEquals(bean.date, fieldReader.apply(zdt))
assertEquals(bean.date, fieldReader.apply(zdt.toLocalDateTime()))
assertEquals(bean.date, fieldReader.apply(new Date(epochMilli)))
assertNotNull(bean.date)
assertEquals(epochMilli, bean.date.getTime())
assertNull(bean.date)
assertEquals(epochMilli, bean.date.getTime())
assertNull(bean.date)
assertEquals(epochMilli, bean.date.getTime())
assertNull(bean.date)
assertEquals(epochMilli, bean.date.getTime())
assertNull(bean.date)
assertEquals(epochMilli, bean.date.getTime())
assertSame(ObjectReaderImplDate.INSTANCE, fieldReader.getObjectReader(JSONFactory.createReadContext()))
assertEquals(bean.date, fieldReader.apply(instant))
assertEquals(bean.date, fieldReader.apply(epochMilli))
assertEquals(bean.date, fieldReader.apply(zdt))
assertEquals(bean.date, fieldReader.apply(zdt.toLocalDateTime()))
assertEquals(bean.date, fieldReader.apply(new Date(epochMilli)))
assertNotNull(bean.date)
assertEquals(epochMilli, bean.toMillis(zoneId))
assertNull(bean.date)
assertEquals(epochMilli, bean.toMillis(zoneId))
assertNull(bean.date)
assertEquals(epochMilli, bean.toMillis(zoneId))
assertNull(bean.date)
assertEquals(epochMilli, bean.toMillis(zoneId))
assertSame(ObjectReaderImplLocalDateTime.INSTANCE, fieldReader.getObjectReader(JSONFactory.createReadContext()))
assertEquals(bean.date, fieldReader.apply(instant))
assertEquals(bean.date, fieldReader.apply(epochMilli))
assertEquals(bean.date, fieldReader.apply(zdt))
assertEquals(bean.date, fieldReader.apply(zdt.toLocalDateTime()))
assertEquals(bean.date, fieldReader.apply(new Date(epochMilli)))
assertNotNull(bean.date)
assertEquals(epochMilli, bean.toMillis(zoneId))
assertNull(bean.date)
assertEquals(epochMilli, bean.toMillis(zoneId))
assertNull(bean.date)
assertEquals(epochMilli, bean.toMillis(zoneId))
assertNull(bean.date)
assertEquals(epochMilli, bean.toMillis(zoneId))
assertNull(bean.date)
assertEquals(epochMilli, bean.toMillis(zoneId))
assertSame(ObjectReaderImplLocalDateTime.INSTANCE, fieldReader.getObjectReader(JSONFactory.createReadContext()))
assertEquals(bean.date, fieldReader.apply(instant))
assertEquals(bean.date, fieldReader.apply(epochMilli))
assertEquals(bean.date, fieldReader.apply(zdt))
assertEquals(bean.date, fieldReader.apply(zdt.toLocalDateTime()))
assertEquals(bean.date, fieldReader.apply(new Date(epochMilli)))
assertNotNull(bean.date)
assertEquals(epochMilli, bean.date.toEpochMilli())
assertNull(bean.date)
assertEquals(epochMilli, bean.date.toEpochMilli())
assertNull(bean.date)
assertEquals(epochMilli, bean.date.toEpochMilli())
assertNull(bean.date)
assertEquals(epochMilli, bean.date.toEpochMilli())
assertSame(ObjectReaderImplInstant.INSTANCE, fieldReader.getObjectReader(JSONFactory.createReadContext()))
assertEquals(bean.date, fieldReader.apply(instant))
assertEquals(bean.date, fieldReader.apply(epochMilli))
assertEquals(bean.date, fieldReader.apply(zdt))
assertEquals(bean.date, fieldReader.apply(zdt.toLocalDateTime()))
assertEquals(bean.date, fieldReader.apply(new Date(epochMilli)))
assertNotNull(bean.date)
assertEquals(epochMilli, bean.date.toEpochMilli())
assertNull(bean.date)
assertEquals(epochMilli, bean.date.toEpochMilli())
assertNull(bean.date)
assertEquals(epochMilli, bean.date.toEpochMilli())
assertNull(bean.date)
assertEquals(epochMilli, bean.date.toEpochMilli())
assertNull(bean.date)
assertEquals(epochMilli, bean.date.toEpochMilli())
assertSame(ObjectReaderImplInstant.INSTANCE, fieldReader.getObjectReader(JSONFactory.createReadContext()))
assertEquals(bean.date, fieldReader.apply(instant))
assertEquals(bean.date, fieldReader.apply(epochMilli))
assertEquals(bean.date, fieldReader.apply(zdt))
assertEquals(bean.date, fieldReader.apply(zdt.toLocalDateTime()))
assertEquals(bean.date, fieldReader.apply(new Date(epochMilli)))
assertNotNull(bean.date)
assertEquals(epochMilli, bean.date.toInstant().toEpochMilli())
assertNull(bean.date)
assertEquals(epochMilli, bean.date.toInstant().toEpochMilli())
assertNull(bean.date)
assertEquals(epochMilli, bean.date.toInstant().toEpochMilli())
assertNull(bean.date)
assertEquals(epochMilli, bean.date.toInstant().toEpochMilli())
assertNull(bean.date)
assertEquals(epochMilli, bean.date.toInstant().toEpochMilli())
assertSame(ObjectReaderImplZonedDateTime.INSTANCE, fieldReader.getObjectReader(JSONFactory.createReadContext()))
assertEquals(bean.date, fieldReader.apply(instant))
assertEquals(bean.date, fieldReader.apply(epochMilli))
assertEquals(bean.date, fieldReader.apply(zdt))
assertEquals(bean.date, fieldReader.apply(zdt.toLocalDateTime()))
assertEquals(bean.date, fieldReader.apply(new Date(epochMilli)))
assertNotNull(bean.date)
assertEquals(epochMilli, bean.date.toInstant().toEpochMilli())
assertNull(bean.date)
assertEquals(epochMilli, bean.date.toInstant().toEpochMilli())
assertNull(bean.date)
assertEquals(epochMilli, bean.date.toInstant().toEpochMilli())
assertNull(bean.date)
assertEquals(epochMilli, bean.date.toInstant().toEpochMilli())
assertNull(bean.date)
assertEquals(epochMilli, bean.date.toInstant().toEpochMilli())
assertSame(ObjectReaderImplZonedDateTime.INSTANCE, fieldReader.getObjectReader(JSONFactory.createReadContext()))
assertEquals(bean.date, fieldReader.apply(instant))
assertEquals(bean.date, fieldReader.apply(epochMilli))
assertEquals(bean.date, fieldReader.apply(zdt))
assertEquals(bean.date, fieldReader.apply(zdt.toLocalDateTime()))
assertEquals(bean.date, fieldReader.apply(new Date(epochMilli)))
assertEquals(123F, bean.value)
assertEquals(123F, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value)
assertNotNull(objectReader.getFieldReader("userId1"))
assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId1")))
assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid1")))
assertNotNull(objectReader.getFieldReader("userId2"))
assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId2")))
assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid2")))
assertNull(objectReader.getFieldReader("id"))
assertNull(objectReader.getFieldReader(0))
assertNull(objectReader.getFieldReaderLCase(0))
assertEquals(101, bean.userId1)
assertEquals(102, bean.userId2)
assertEquals(0, JSONB.parseObject(JSONArray.of().toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0)
assertEquals(101, JSONB.parseObject(JSONArray.of(101).toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0)
assertEquals(101, JSONB.parseObject(JSONArray.of(101, 102).toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0)
assertEquals("[[0,0],[101,0],[102,103],[104,105],[107,108]]", JSON.toJSONString(JSONB.parseObject(JSONArray.of(JSONArray.of(), JSONArray.of(101), JSONArray.of(102, 103), JSONArray.of(104, 105, 106), JSONArray.of(107, 108, 109)).toJSONBBytes(), Bean1[].class, JSONReader.Feature.SupportArrayToBean), JSONWriter.Feature.BeanToArray))
assertEquals(0, JSONB.parseObject(JSONArray.of().toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0)
assertEquals(101, JSONB.parseObject(JSONArray.of(101).toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0)
assertEquals(101, JSONB.parseObject(JSONArray.of(101, 102).toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0)
assertEquals("[[0,0],[101,0],[102,103],[104,105],[107,108]]", JSON.toJSONString(JSONB.parseObject(JSONArray.of(JSONArray.of(), JSONArray.of(101), JSONArray.of(102, 103), JSONArray.of(104, 105, 106), JSONArray.of(107, 108, 109)).toJSONBBytes(), Bean2[].class, JSONReader.Feature.SupportArrayToBean), JSONWriter.Feature.BeanToArray))
assertEquals(123, bean.value)
assertEquals(123, objectReader.readObject(JSONReader.of("{\"value\":123}")).value)
assertEquals(123, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value)
assertEquals(new BigDecimal("123"), bean.value)
assertEquals(0xff000000, color.getRGB())
assertEquals(123L, fieldReader.readFieldValue(JSONReader.of("123")))
assertTrue(bean2.value)
assertEquals('A', bean.value)
assertEquals(12.34F, bean.value)
assertEquals("12.34", bean.value)
assertEquals("12.34", bean.value)
assertEquals("12.34", bean.value)
assertEquals(2, bean.values.size())
assertEquals("12", bean.values.get(0))
assertEquals("34", bean.values.get(1))
assertEquals(2, bean.values.size())
assertEquals("12", bean.values.get(0))
assertEquals("34", bean.values.get(1))
assertEquals(2, bean.values.size())
assertEquals("12", bean.values.get(0))
assertEquals("34", bean.values.get(1))
assertEquals("123", bean.value)
assertNotNull(fieldReader.method)
assertNull(bean.value)
assertEquals("abc", bean.value)
assertEquals("101", objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
assertEquals("AB", objectReader.readObject(JSONReader.of("{\"value\":\"AB\"}"), 0).value)
assertEquals("123", objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value)
assertEquals("abc", objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":\" abc \"}")).value)
assertEquals(123, bean.value)
assertEquals(123, objectReader.readObject(JSONReader.of("{\"value\":123}")).value)
assertEquals(123, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value)
assertEquals(123L, bean.value)
assertNotNull(fieldReader.method)
assertEquals(101L, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
assertEquals(201L, objectReader.readObject(JSONReader.of("{\"value\":201}"), 0).value)
assertEquals(201L, objectReader.readObject(JSONReader.of("{\"value\":201}"), 0).value)
assertEquals(123L, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value)
assertEquals(123, bean.value)
assertNotNull(fieldReader.method)
assertEquals(101, bean.value)
assertEquals(102, bean.value)
assertEquals(101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
assertEquals((byte) 101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
assertEquals((byte) 123, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value)
assertEquals(true, JSON.parseObject(str, Bean.class).value.get())
assertEquals(true, JSON.parseObject(str).to(Bean.class).value.get())
assertEquals("getValue", fieldReader.toString())
assertTrue(fieldReader.isReadOnly())
assertEquals(101, bean1.id)
assertEquals(true, bean1.value.get())
assertEquals(101, bean1.id)
assertEquals(false, bean1.value.get())
assertEquals(123, JSON.parseObject(str, Bean.class).value.get())
assertEquals(123, JSON.parseObject(str).to(Bean.class).value.get())
assertEquals("getValue", fieldReader.toString())
assertTrue(fieldReader.isReadOnly())
assertEquals(101, bean1.id)
assertEquals(123, bean1.value.get())
assertEquals(101, bean1.id)
assertEquals(0, bean1.value.get())
assertEquals(123F, bean.value)
assertEquals(123F, objectReader.readObject(JSONReader.of("{\"value\":123}")).value)
assertEquals(123F, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value)
assertEquals(123D, bean.value)
assertEquals(123D, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value)
assertNotNull(objectReader.getFieldReader("userId1"))
assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId1")))
assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid1")))
assertNotNull(objectReader.getFieldReader("userId2"))
assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId2")))
assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid2")))
assertNotNull(objectReader.getFieldReader("userId3"))
assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId3")))
assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid3")))
assertNotNull(objectReader.getFieldReader("userId4"))
assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId4")))
assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid4")))
assertNotNull(objectReader.getFieldReader("userId5"))
assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId5")))
assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid5")))
assertNotNull(objectReader.getFieldReader("userId6"))
assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId6")))
assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid6")))
assertNotNull(objectReader.getFieldReader("userId7"))
assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId7")))
assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid7")))
assertNull(objectReader.getFieldReader("id"))
assertNull(objectReader.getFieldReader(0))
assertNull(objectReader.getFieldReaderLCase(0))
assertEquals(0, JSONB.parseObject(JSONArray.of().toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0)
assertEquals(101, JSONB.parseObject(JSONArray.of(101).toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0)
assertEquals(101, JSONB.parseObject(JSONArray.of(101, 102).toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0)
assertEquals("[" + "[0,0,0,0,0,0,0],[101,0,0,0,0,0,0],[201,202,0,0,0,0,0],[301,302,303,0,0,0,0]," + "[401,402,403,0,0,0,0],[501,502,503,504,0,0,0],[601,602,603,604,0,0,0],[701,702,703,704,705,0,0]," + "[801,802,803,804,805,0,0],[901,902,903,904,905,906,0],[1001,1002,1003,1004,1005,1006,0]," + "[1101,1102,1103,1104,1105,1106,1107],[1201,1202,1203,1204,1205,1206,1207]," + "[1301,1302,1303,1304,1305,1306,1307],[1401,1402,1403,1404,1405,1406,1407]" + "]", JSON.toJSONString(JSONB.parseObject(JSONArray.of(JSONArray.of(), JSONArray.of(101), JSONArray.of(201, 202), JSONArray.of(301, 302, 303), JSONArray.of(401, 402, 403), JSONArray.of(501, 502, 503, 504), JSONArray.of(601, 602, 603, 604), JSONArray.of(701, 702, 703, 704, 705), JSONArray.of(801, 802, 803, 804, 805), JSONArray.of(901, 902, 903, 904, 905, 906), JSONArray.of(1001, 1002, 1003, 1004, 1005, 1006), JSONArray.of(1101, 1102, 1103, 1104, 1105, 1106, 1107), JSONArray.of(1201, 1202, 1203, 1204, 1205, 1206, 1207), JSONArray.of(1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308), JSONArray.of(1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408)).toJSONBBytes(), Bean1[].class, JSONReader.Feature.SupportArrayToBean), JSONWriter.Feature.BeanToArray))
assertEquals(0, JSONB.parseObject(JSONArray.of().toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0)
assertEquals(101, JSONB.parseObject(JSONArray.of(101).toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0)
assertEquals(101, JSONB.parseObject(JSONArray.of(101, 102).toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0)
assertEquals("[" + "[0,0,0,0,0,0,0],[101,0,0,0,0,0,0],[201,202,0,0,0,0,0],[301,302,303,0,0,0,0]," + "[401,402,403,0,0,0,0],[501,502,503,504,0,0,0],[601,602,603,604,0,0,0],[701,702,703,704,705,0,0]," + "[801,802,803,804,805,0,0],[901,902,903,904,905,906,0],[1001,1002,1003,1004,1005,1006,0]," + "[1101,1102,1103,1104,1105,1106,1107],[1201,1202,1203,1204,1205,1206,1207]," + "[1301,1302,1303,1304,1305,1306,1307],[1401,1402,1403,1404,1405,1406,1407]" + "]", JSON.toJSONString(JSONB.parseObject(JSONArray.of(JSONArray.of(), JSONArray.of(101), JSONArray.of(201, 202), JSONArray.of(301, 302, 303), JSONArray.of(401, 402, 403), JSONArray.of(501, 502, 503, 504), JSONArray.of(601, 602, 603, 604), JSONArray.of(701, 702, 703, 704, 705), JSONArray.of(801, 802, 803, 804, 805), JSONArray.of(901, 902, 903, 904, 905, 906), JSONArray.of(1001, 1002, 1003, 1004, 1005, 1006), JSONArray.of(1101, 1102, 1103, 1104, 1105, 1106, 1107), JSONArray.of(1201, 1202, 1203, 1204, 1205, 1206, 1207), JSONArray.of(1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308), JSONArray.of(1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408)).toJSONBBytes(), Bean2[].class, JSONReader.Feature.SupportArrayToBean), JSONWriter.Feature.BeanToArray))
assertEquals((short) 123, bean.value)
assertNotNull(fieldReader.method)
assertEquals((short) 101, bean.value)
assertEquals((short) 102, bean.value)
assertEquals((short) 101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
assertEquals((short) 101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
assertEquals((short) 123, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value)
assertEquals(123, bean.value)
assertNotNull(fieldReader.method)
assertEquals(101, bean.value)
assertEquals(102, bean.value)
assertEquals(101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
assertEquals(bean.value, bean1.value)
assertEquals(101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
assertEquals(bean.value, bean1.value)
assertEquals((short) 123, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value)
assertEquals(true, bean.value)
assertNotNull(fieldReader.method)
assertEquals(false, bean.value)
assertEquals(true, bean.value)
assertEquals(false, bean.value)
assertEquals(true, objectReader.readObject(JSONReader.of("{\"value\":true}"), 0).value)
assertEquals(true, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":true}")).value)
assertEquals(123F, bean.value)
assertNotNull(fieldReader.method)
assertEquals(101F, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
assertEquals(201F, objectReader.readObject(JSONReader.of("{\"value\":201}"), 0).value)
assertEquals(201F, objectReader.readObject(JSONReader.of("{\"value\":201}"), 0).value)
assertEquals(12.34F, ((Float) fieldValue).floatValue())
assertEquals(123, bean.value)
assertNotNull(fieldReader.method)
assertEquals(101, bean.value)
assertEquals(102, bean.value)
assertEquals(101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
assertEquals(101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
assertEquals((short) 123, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value)
assertNotNull(objectReader.getFieldReader("userId"))
assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId")))
assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid")))
assertNull(objectReader.getFieldReader("id"))
assertNull(objectReader.getFieldReader(0))
assertNull(objectReader.getFieldReaderLCase(0))
assertEquals(101, bean.userId)
assertEquals(101, bean.userId)
assertEquals(101, bean.userId)
assertEquals(0, JSONB.parseObject(JSONArray.of().toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId)
assertEquals(101, JSONB.parseObject(JSONArray.of(101).toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId)
assertEquals(101, JSONB.parseObject(JSONArray.of(101, 102).toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId)
assertEquals(0, JSONB.parseObject(JSONArray.of().toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId)
assertEquals(101, JSONB.parseObject(JSONArray.of(101).toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId)
assertEquals("[[0],[101],[102],[104]]", JSON.toJSONString(JSONB.parseObject(JSONArray.of(JSONArray.of(), JSONArray.of(101), JSONArray.of(102, 103), JSONArray.of(104, 105, 106)).toJSONBBytes(), Bean2[].class, JSONReader.Feature.SupportArrayToBean), JSONWriter.Feature.BeanToArray))
assertEquals(123, bean.value)
assertNotNull(fieldReader.method)
assertEquals(101, bean.value)
assertEquals(102, bean.value)
assertEquals(101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
assertEquals(101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
assertEquals((short) 123, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value)
assertEquals((byte) 123, bean.value)
assertNotNull(fieldReader.method)
assertEquals((byte) 101, bean.value)
assertEquals((byte) 102, bean.value)
assertEquals((byte) 101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
assertEquals((byte) 101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
assertEquals((byte) 123, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value)
assertEquals(123, bean.value)
assertNotNull(fieldReader.method)
assertEquals(101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
assertEquals(201, objectReader.readObject(JSONReader.of("{\"value\":201}"), 0).value)
assertEquals(123, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value)
assertEquals((byte) 123, bean.value)
assertEquals((byte) 65, bean.value)
assertEquals((byte) 66, bean.value)
assertEquals((byte) 123, objectReader.readObject(JSONReader.of("{\"value\":123}")).value)
assertEquals((byte) 123, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value)
assertEquals(true, JSON.parseObject(str, Bean.class).value.get())
assertEquals(true, JSON.parseObject(str).to(Bean.class).value.get())
assertEquals("value", fieldReader.toString())
assertTrue(fieldReader.isReadOnly())
assertEquals(101, bean1.id)
assertEquals(true, bean1.value.get())
assertEquals(101, bean1.id)
assertEquals(false, bean1.value.get())
assertNotNull(objectReader.getFieldReader("userId1"))
assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId1")))
assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid1")))
assertNotNull(objectReader.getFieldReader("userId2"))
assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId2")))
assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid2")))
assertNotNull(objectReader.getFieldReader("userId3"))
assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId3")))
assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid3")))
assertNotNull(objectReader.getFieldReader("userId4"))
assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId4")))
assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid4")))
assertNotNull(objectReader.getFieldReader("userId5"))
assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId5")))
assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid5")))
assertNull(objectReader.getFieldReader("id"))
assertNull(objectReader.getFieldReader(0))
assertNull(objectReader.getFieldReaderLCase(0))
assertEquals(0, JSONB.parseObject(JSONArray.of().toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0)
assertEquals(101, JSONB.parseObject(JSONArray.of(101).toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0)
assertEquals(101, JSONB.parseObject(JSONArray.of(101, 102).toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0)
assertEquals("[[0,0,0,0,0],[101,0,0,0,0],[201,202,0,0,0],[301,302,303,0,0],[401,402,403,0,0]," + "[501,502,503,504,0],[601,602,603,604,0],[701,702,703,704,705],[801,802,803,804,805],[901,902,903,904,905]," + "[1001,1002,1003,1004,1005]]", JSON.toJSONString(JSONB.parseObject(JSONArray.of(JSONArray.of(), JSONArray.of(101), JSONArray.of(201, 202), JSONArray.of(301, 302, 303), JSONArray.of(401, 402, 403), JSONArray.of(501, 502, 503, 504), JSONArray.of(601, 602, 603, 604), JSONArray.of(701, 702, 703, 704, 705), JSONArray.of(801, 802, 803, 804, 805), JSONArray.of(901, 902, 903, 904, 905, 906), JSONArray.of(1001, 1002, 1003, 1004, 1005, 1006)).toJSONBBytes(), Bean1[].class, JSONReader.Feature.SupportArrayToBean), JSONWriter.Feature.BeanToArray))
assertEquals(0, JSONB.parseObject(JSONArray.of().toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0)
assertEquals(101, JSONB.parseObject(JSONArray.of(101).toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0)
assertEquals(101, JSONB.parseObject(JSONArray.of(101, 102).toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0)
assertEquals("[[0,0,0,0,0],[101,0,0,0,0],[201,202,0,0,0],[301,302,303,0,0],[401,402,403,0,0]," + "[501,502,503,504,0],[601,602,603,604,0],[701,702,703,704,705],[801,802,803,804,805],[901,902,903,904,905]," + "[1001,1002,1003,1004,1005]]", JSON.toJSONString(JSONB.parseObject(JSONArray.of(JSONArray.of(), JSONArray.of(101), JSONArray.of(201, 202), JSONArray.of(301, 302, 303), JSONArray.of(401, 402, 403), JSONArray.of(501, 502, 503, 504), JSONArray.of(601, 602, 603, 604), JSONArray.of(701, 702, 703, 704, 705), JSONArray.of(801, 802, 803, 804, 805), JSONArray.of(901, 902, 903, 904, 905, 906), JSONArray.of(1001, 1002, 1003, 1004, 1005, 1006)).toJSONBBytes(), Bean2[].class, JSONReader.Feature.SupportArrayToBean), JSONWriter.Feature.BeanToArray))
assertEquals(123, JSON.parseObject(str, Bean.class).value.get(0))
assertEquals(123, JSON.parseObject(str).to(Bean.class).value.get(0))
assertEquals("getValue", fieldReader.toString())
assertTrue(fieldReader.isReadOnly())
assertEquals(101, bean1.id)
assertEquals(123, bean1.value.get(0))
assertEquals(101, bean1.id)
assertEquals(0, bean1.value.get(0))
assertEquals(new BigInteger("123"), bean.value)
assertEquals(new BigDecimal("123"), bean.value)
assertNotNull(objectReader.getFieldReader("userId1"))
assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId1")))
assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid1")))
assertNotNull(objectReader.getFieldReader("userId2"))
assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId2")))
assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid2")))
assertNotNull(objectReader.getFieldReader("userId3"))
assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId3")))
assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid3")))
assertNotNull(objectReader.getFieldReader("userId4"))
assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId4")))
assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid4")))
assertNotNull(objectReader.getFieldReader("userId5"))
assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId5")))
assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid5")))
assertNotNull(objectReader.getFieldReader("userId6"))
assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId6")))
assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid6")))
assertNull(objectReader.getFieldReader("id"))
assertNull(objectReader.getFieldReader(0))
assertNull(objectReader.getFieldReaderLCase(0))
assertEquals(0, JSONB.parseObject(JSONArray.of().toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0)
assertEquals(101, JSONB.parseObject(JSONArray.of(101).toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0)
assertEquals(101, JSONB.parseObject(JSONArray.of(101, 102).toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0)
assertEquals("[" + "[0,0,0,0,0,0],[101,0,0,0,0,0],[201,202,0,0,0,0],[301,302,303,0,0,0],[401,402,403,0,0,0]," + "[501,502,503,504,0,0],[601,602,603,604,0,0],[701,702,703,704,705,0]," + "[801,802,803,804,805,0],[901,902,903,904,905,906]," + "[1001,1002,1003,1004,1005,1006],[1101,1102,1103,1104,1105,1106],[1201,1202,1203,1204,1205,1206]" + "]", JSON.toJSONString(JSONB.parseObject(JSONArray.of(JSONArray.of(), JSONArray.of(101), JSONArray.of(201, 202), JSONArray.of(301, 302, 303), JSONArray.of(401, 402, 403), JSONArray.of(501, 502, 503, 504), JSONArray.of(601, 602, 603, 604), JSONArray.of(701, 702, 703, 704, 705), JSONArray.of(801, 802, 803, 804, 805), JSONArray.of(901, 902, 903, 904, 905, 906), JSONArray.of(1001, 1002, 1003, 1004, 1005, 1006), JSONArray.of(1101, 1102, 1103, 1104, 1105, 1106, 1107), JSONArray.of(1201, 1202, 1203, 1204, 1205, 1206, 1207)).toJSONBBytes(), Bean1[].class, JSONReader.Feature.SupportArrayToBean), JSONWriter.Feature.BeanToArray))
assertEquals(0, JSONB.parseObject(JSONArray.of().toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0)
assertEquals(0, JSONB.parseObject(JSONArray.of().toJSONBBytes(), Bean2.class, new JSONReader.Context(JSONFactory.getDefaultObjectReaderProvider(), JSONReader.Feature.SupportArrayToBean)).userId0)
assertEquals(101, JSONB.parseObject(JSONArray.of(101).toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0)
assertEquals(101, JSONB.parseObject(JSONArray.of(101).toJSONBBytes(), Bean2.class, new JSONReader.Context(JSONReader.Feature.SupportArrayToBean)).userId0)
assertEquals(101, JSONB.parseObject(JSONArray.of(101).toJSONBBytes(), Bean2.class, new JSONReader.Context(JSONReader.Feature.SupportArrayToBean, JSONReader.Feature.FieldBased)).userId0)
assertEquals(101, JSONB.parseObject(JSONArray.of(101, 102).toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0)
assertEquals("[" + "[0,0,0,0,0,0],[101,0,0,0,0,0],[201,202,0,0,0,0],[301,302,303,0,0,0],[401,402,403,0,0,0]," + "[501,502,503,504,0,0],[601,602,603,604,0,0],[701,702,703,704,705,0]," + "[801,802,803,804,805,0],[901,902,903,904,905,906]," + "[1001,1002,1003,1004,1005,1006],[1101,1102,1103,1104,1105,1106],[1201,1202,1203,1204,1205,1206]" + "]", JSON.toJSONString(JSONB.parseObject(JSONArray.of(JSONArray.of(), JSONArray.of(101), JSONArray.of(201, 202), JSONArray.of(301, 302, 303), JSONArray.of(401, 402, 403), JSONArray.of(501, 502, 503, 504), JSONArray.of(601, 602, 603, 604), JSONArray.of(701, 702, 703, 704, 705), JSONArray.of(801, 802, 803, 804, 805), JSONArray.of(901, 902, 903, 904, 905, 906), JSONArray.of(1001, 1002, 1003, 1004, 1005, 1006), JSONArray.of(1101, 1102, 1103, 1104, 1105, 1106, 1107), JSONArray.of(1201, 1202, 1203, 1204, 1205, 1206, 1207)).toJSONBBytes(), Bean2[].class, JSONReader.Feature.SupportArrayToBean), JSONWriter.Feature.BeanToArray))
assertEquals(123, bean.code)
assertEquals(123, bean.code)
assertEquals('A', bean.value)
assertNotNull(fieldReader.method)
assertEquals('B', bean.value)
assertEquals('A', objectReader.readObject(JSONReader.of("{\"value\":\"A\"}"), 0).value)
assertEquals('A', bean.value)
assertNotNull(fieldReader.method)
assertEquals('B', bean.value)
assertEquals('A', objectReader.readObject(JSONReader.of("{\"value\":\"A\"}"), 0).value)
assertEquals('A', objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":\"A\"}")).value)
assertEquals('A', objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":\"A\"}")).value)
assertEquals(123F, bean.value)
assertNotNull(fieldReader.method)
assertEquals(101F, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
assertEquals(201F, objectReader.readObject(JSONReader.of("{\"value\":201}"), 0).value)
assertEquals(201F, objectReader.readObject(JSONReader.of("{\"value\":201}"), 0).value)
assertEquals(12.34D, ((Double) fieldValue).doubleValue())
assertNotNull(fieldReader.method)
assertEquals(Long.class, fieldReader.getItemType())
assertEquals(123L, bean.values.get(0))
assertEquals(101L, objectReader.readObject(JSONReader.of("{\"values\":[101]}"), 0).values.get(0))
assertNotNull(fieldReader.method)
assertEquals(Long.class, fieldReader.getItemType())
assertEquals(123L, bean.values.get(0))
assertEquals(101L, objectReader.readObject(JSONReader.of("{\"values\":[101]}"), 0).values.get(0))
assertNotNull(fieldReader.method)
assertEquals(Long.class, fieldReader.getItemType())
assertEquals(123L, bean.values.get(0))
assertEquals(102L, objectReader.readObject(JSONReader.of("{\"id\":123,\"values\":[101,102]}"), 0).values.get(1))
assertEquals(101L, bean1.values.get(0))
assertEquals(102L, bean1.values.get(1))
assertEquals(123, bean.value)
assertEquals(123, objectReader.readObject(JSONReader.of("{\"value\":123}")).value)
assertEquals(123, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value)
assertNull(fieldReader.getItemClass())
assertEquals(0, fieldReader.getItemClassHash())
assertNotNull(fieldObjectReader)
assertSame(fieldObjectReader, fieldReader.getObjectReader(context))
assertNotNull(fieldObjectReader)
assertSame(fieldObjectReader, fieldReader.getObjectReader(jsonReader))
assertNull(fieldReader.checkObjectAutoType(jsonReader))
assertNotNull(fieldReader)
assertEquals(new BigDecimal("12.34"), fieldReader.readFieldValue(JSONReader.of("12.34")))
assertEquals(new BigInteger("1234"), fieldReader.readFieldValue(JSONReader.of("1234")))
assertEquals(12.34D, fieldReader.readFieldValue(JSONReader.of("12.34")))
assertEquals((byte) 12, fieldReader.readFieldValue(JSONReader.of("12")))
assertEquals(12, bean.value)
assertNotNull(fieldReader.createList(context))
assertNotNull(bean.values)
assertEquals(123, bean.value)
assertNotNull(fieldReader.method)
assertEquals(101, bean.value)
assertEquals(102, bean.value)
assertEquals(101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
assertEquals(101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
assertEquals(123, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value)
assertEquals(123, bean.code)
assertEquals(123, bean.code)
assertNotNull(fieldReader.field)
assertNull(bean.value)
assertNull(bean.value)
assertEquals(1499055194000L, bean.value.getTime())
assertNull(bean.value)
assertNotNull(fieldReader.getObjectReader(JSONReader.of("")))
assertEquals(1499055194000L, bean.value.getTime())
assertEquals(1499055194000L, bean.value.getTime())
assertEquals(1499055194000L, objectReader.readObject(JSONReader.of("{\"value\":\"2017-07-03 12:13:14\"}"), 0).value.getTime())
assertEquals(1499055194000L, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":\"2017-07-03 12:13:14\"}")).value.getTime())
assertEquals(1499055194000L, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":1499055194000}")).value.getTime())
assertNull(objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":null}")).value)
assertEquals(1499055194000L, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":1499055194}")).value.getTime())
assertEquals(1499055194000L, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":1499055194000}")).value.getTime())
assertEquals(1499055194000L, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":\"20170703121314000+0800\"}")).value.getTime())
assertEquals(1499055194000L, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":\"2017-07-03T12:13:14\"}")).value.getTime())
assertNotNull(fieldReader.method)
assertNull(bean.value)
assertNull(bean.value)
assertEquals(1499055194000L, bean.value.getTime())
assertNull(bean.value)
assertNotNull(fieldReader.getObjectReader(JSONReader.of("")))
assertEquals(1499055194000L, bean.value.getTime())
assertEquals(1499055194000L, bean.value.getTime())
assertEquals(1499055194000L, objectReader.readObject(JSONReader.of("{\"value\":\"2017-07-03 12:13:14\"}"), 0).value.getTime())
assertEquals(1499055194000L, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":\"2017-07-03 12:13:14\"}")).value.getTime())
assertEquals(1499055194000L, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":1499055194000}")).value.getTime())
assertNull(objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":null}")).value)
assertEquals(1499055194000L, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":1499055194}")).value.getTime())
assertEquals(1499055194000L, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":1499055194000}")).value.getTime())
assertEquals(1499055194000L, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":\"20170703121314000+0800\"}")).value.getTime())
assertEquals(1499055194000L, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":\"2017-07-03T12:13:14\"}")).value.getTime())
assertEquals(true, bean.value)
assertNotNull(fieldReader.method)
assertEquals(false, bean.value)
assertEquals(true, bean.value)
assertEquals(false, bean.value)
assertEquals(true, objectReader.readObject(JSONReader.of("{\"value\":true}"), 0).value)
assertEquals(true, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":true}")).value)
assertEquals(123D, bean.value)
assertEquals(123D, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value)
assertEquals(123, bean.value)
assertNotNull(fieldReader.method)
assertEquals(101, bean.value)
assertEquals(101, bean.value)
assertEquals(102, bean.value)
assertEquals(101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
assertEquals(201, objectReader.readObject(JSONReader.of("{\"value\":201}"), 0).value)
assertEquals((short) 123, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value)
assertEquals(1, bean.f0)
assertEquals(2, bean.f1)
assertEquals(3, bean.f2)
assertEquals(4, bean.f3)
assertEquals(5, bean.f4)
assertEquals(6, bean.f5)
assertEquals(true, bean.f6)
assertEquals('A', bean.f7)
assertEquals(1, bean.f0)
assertEquals(2, bean.f1)
assertEquals(3, bean.f2)
assertEquals(4, bean.f3)
assertEquals(5, bean.f4)
assertEquals(6, bean.f5)
assertEquals(true, bean.f6)
assertEquals('A', bean.f7)
assertEquals(123, bean.value)
assertEquals(123, objectReader.readObject(JSONReader.of("{\"value\":123}")).value)
assertEquals(123, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value)
assertEquals('A', bean.value)
assertNotNull(fieldReader.field)
assertEquals('B', bean.value)
assertEquals('A', objectReader.readObject(JSONReader.of("{\"value\":\"A\"}"), 0).value)
assertEquals('A', objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":\"A\"}")).value)
assertEquals(new BigInteger("123"), bean.value)
assertNotNull(fieldReader.method)
assertEquals(new BigInteger("101"), objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
assertEquals(new BigInteger("201"), objectReader.readObject(JSONReader.of("{\"value\":201}"), 0).value)
assertEquals((short) 123, bean.value)
assertEquals((short) 123, objectReader.readObject(JSONReader.of("{\"value\":123}")).value)
assertEquals((short) 123, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value)
assertEquals(123, bean.code)
assertEquals(123, bean.code)
assertEquals(123, bean.value)
assertNotNull(fieldReader.method)
assertEquals(101, bean.value)
assertEquals(102, bean.value)
assertEquals(101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
assertEquals((short) 101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
assertEquals((short) 123, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value)
assertEquals("123", bean.value)
assertNotNull(fieldReader.method)
assertNull(bean.value)
assertEquals("101", objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
assertEquals("abc", objectReader.readObject(JSONReader.of("{\"value\":\" abc \"}"), 0).value)
assertEquals("AB", objectReader.readObject(JSONReader.of("{\"value\":\"AB\"}"), 0).value)
assertEquals("123", objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value)
assertEquals("abc", objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":\" abc \"}")).value)
assertEquals(true, bean.value)
assertNotNull(fieldReader.field)
assertEquals(false, bean.value)
assertEquals(true, bean.value)
assertEquals(true, objectReader.readObject(JSONReader.of("{\"value\":true}"), 0).value)
assertEquals(true, objectReader.readObject(JSONReader.of("{\"value\":true}"), 0).value)
assertEquals(true, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":\"true\"}")).value)
assertNotNull(objectReader.getFieldReader("userId1"))
assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId1")))
assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid1")))
assertNotNull(objectReader.getFieldReader("userId2"))
assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId2")))
assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid2")))
assertNotNull(objectReader.getFieldReader("userId3"))
assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId3")))
assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid3")))
assertNotNull(objectReader.getFieldReader("userId4"))
assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId4")))
assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid4")))
assertNull(objectReader.getFieldReader("id"))
assertNull(objectReader.getFieldReader(0))
assertNull(objectReader.getFieldReaderLCase(0))
assertEquals(0, JSONB.parseObject(JSONArray.of().toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0)
assertEquals(101, JSONB.parseObject(JSONArray.of(101).toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0)
assertEquals(101, JSONB.parseObject(JSONArray.of(101, 102).toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0)
assertEquals("[[0,0,0,0],[101,0,0,0],[201,202,0,0],[301,302,303,0],[401,402,403,0],[501,502,503,504],[601,602,603,604],[701,702,703,704],[801,802,803,804]]", JSON.toJSONString(JSONB.parseObject(JSONArray.of(JSONArray.of(), JSONArray.of(101), JSONArray.of(201, 202), JSONArray.of(301, 302, 303), JSONArray.of(401, 402, 403), JSONArray.of(501, 502, 503, 504), JSONArray.of(601, 602, 603, 604), JSONArray.of(701, 702, 703, 704, 705), JSONArray.of(801, 802, 803, 804, 805)).toJSONBBytes(), Bean1[].class, JSONReader.Feature.SupportArrayToBean), JSONWriter.Feature.BeanToArray))
assertEquals(0, JSONB.parseObject(JSONArray.of().toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0)
assertEquals(101, JSONB.parseObject(JSONArray.of(101).toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0)
assertEquals(101, JSONB.parseObject(JSONArray.of(101, 102).toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0)
assertEquals("[[0,0,0,0],[101,0,0,0],[201,202,0,0],[301,302,303,0],[401,402,403,0],[501,502,503,504],[601,602,603,604],[701,702,703,704],[801,802,803,804]]", JSON.toJSONString(JSONB.parseObject(JSONArray.of(JSONArray.of(), JSONArray.of(101), JSONArray.of(201, 202), JSONArray.of(301, 302, 303), JSONArray.of(401, 402, 403), JSONArray.of(501, 502, 503, 504), JSONArray.of(601, 602, 603, 604), JSONArray.of(701, 702, 703, 704, 705), JSONArray.of(801, 802, 803, 804, 805)).toJSONBBytes(), Bean2[].class, JSONReader.Feature.SupportArrayToBean), JSONWriter.Feature.BeanToArray))
assertEquals((byte) 123, bean.value)
assertNotNull(fieldReader.method)
assertEquals((byte) 101, bean.value)
assertEquals((byte) 102, bean.value)
assertEquals((byte) 103, bean.value)
assertEquals((byte) 101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
assertEquals((byte) 101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
assertEquals((byte) 85, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":85}")).value)
assertEquals(new BigInteger("123"), bean.value)
assertEquals(123, bean.value)
assertNotNull(fieldReader.method)
assertEquals(101, bean.value)
assertEquals(102, bean.value)
assertEquals(101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
assertEquals((byte) 101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
assertEquals((byte) 123, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value)
assertEquals(10, objects.length)
assertEquals(1, objects[0])
assertEquals("abc", objects[1])
assertEquals(new JSONObject(), objects[2])
assertEquals(new JSONArray(), objects[3])
assertNull(objects[4])
assertEquals(new BigDecimal("0.3"), objects[5])
assertEquals(-1, objects[6])
assertEquals(Boolean.TRUE, objects[7])
assertEquals(Boolean.FALSE, objects[8])
assertEquals(2147483649L, objects[9])
assertArrayEquals(objects, values)
assertNull(bean.value)
assertNull(bean1.value)
assertNull(bean2.value)
assertNull(bean3.value)
assertEquals(ints.length, objects.length)
assertEquals(true, bean.value)
assertNotNull(fieldReader.field)
assertEquals(false, bean.value)
assertEquals(true, bean.value)
assertEquals(true, objectReader.readObject(JSONReader.of("{\"value\":true}"), 0).value)
assertEquals(true, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":\"true\"}")).value)
assertEquals("123", bean.value)
assertNotNull(fieldReader.field)
assertNull(bean.value)
assertEquals("abc", bean.value)
assertEquals("101", objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
assertEquals("abc", objectReader.readObject(JSONReader.of("{\"value\":\" abc \"}"), 0).value)
assertEquals("AB", objectReader.readObject(JSONReader.of("{\"value\":\"AB\"}"), 0).value)
assertEquals("123", objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value)
assertEquals("abc", objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":\" abc \"}")).value)
assertNull(impl.getFieldReader(0L))
assertEquals(123, cat.id)
assertEquals(123, bean.value)
assertEquals(123, objectReader.readObject(JSONReader.of("{\"value\":123}")).value)
assertEquals(123, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value)
assertEquals(101, path.extract(JSONReader.ofJSONB(jsonbBytes)))
assertEquals(101, path.eval(array))
assertEquals(101, path.eval(array2))
assertNotNull(bean.item)
assertEquals(123, bean.item.getId())
assertNotNull(bean2.item)
assertEquals(123, bean2.item.getId())
assertNotNull(bean3.item)
assertEquals(234, bean3.item.getId())
assertEquals(123, item.getId())
assertEquals(john.getEmail(), jsonObject.getString("email"))
assertEquals(john.getId(), jsonObject.getIntValue("id"))
assertEquals(john.getName(), jsonObject.getString("name"))
assertEquals(john.getEmail(), jsonObject.getString("email"))
assertEquals(john.getId(), jsonObject.getIntValue("id"))
assertEquals(john.getName(), jsonObject.getString("name"))
assertEquals(john.getEmail(), jsonObject.getString("email"))
assertEquals(john.getId(), jsonObject.getIntValue("id"))
assertEquals(john.getName(), jsonObject.getString("name"))
assertFalse(JSONPath.of("$.v0001").remove(vo))
assertFalse(JSON.isValid("{noQuotationMarksError}"))
assertFalse(JSON.isValid(utf8))
assertFalse(JSON.isValid(utf8, 0, utf8.length, StandardCharsets.UTF_8))
assertFalse(JSON.isValid(utf8, 0, utf8.length, StandardCharsets.US_ASCII))
assertFalse(JSON.isValidArray("{}"))
assertFalse(JSON.isValid((char[]) null))
assertFalse(JSON.isValid(new char[0]))
assertFalse(JSON.isValid("{}1".toCharArray()))
assertFalse((Boolean) JSON.parse("false"))
assertFalse(JSON.isValid((String) null))
assertFalse(JSON.isValid(""))
assertFalse(JSON.isValid((byte[]) null))
assertFalse(JSON.isValid(new byte[0]))
assertFalse(JSON.isValid(new byte[0], 0, 0, StandardCharsets.US_ASCII))
assertFalse(JSON.isValidArray((String) null))
assertFalse(JSON.isValidArray(""))
assertFalse(JSON.isValidArray((byte[]) null))
assertFalse(JSON.isValidArray(new byte[0]))
assertFalse(JSON.isValidArray("{}".getBytes(StandardCharsets.UTF_8)))
assertFalse(JSON.isEnabled(JSONReader.Feature.SupportAutoType))
assertTrue(JSON.isValid("123"))
assertFalse(JSON.isValid("1}"))
assertTrue(JSON.isValid("\"aaa\""))
assertFalse(JSON.isValid("\"aaa\"}"))
assertTrue(JSON.isValid("{}"))
assertFalse(JSON.isValid("{}]"))
assertFalse(JSON.isValid((byte[]) null))
assertFalse(JSON.isValid(new byte[0]))
assertFalse(JSON.isValid((byte[]) null, 0, 0, StandardCharsets.UTF_8))
assertFalse(JSON.isValid(new byte[0], 0, 0, StandardCharsets.UTF_8))
assertTrue(JSON.isValid("123".getBytes(StandardCharsets.UTF_8)))
assertFalse(JSON.isValid("1}.getBytes(StandardCharsets.UTF_8)"))
assertTrue(JSON.isValid("\"aaa\"".getBytes(StandardCharsets.UTF_8)))
assertFalse(JSON.isValid("\"aaa\"}".getBytes(StandardCharsets.UTF_8)))
assertTrue(JSON.isValid("{}".getBytes(StandardCharsets.UTF_8)))
assertFalse(JSON.isValid("{}]".getBytes(StandardCharsets.UTF_8)))
assertFalse(JSON.isValidArray("123"))
assertFalse(JSON.isValidArray("1}"))
assertFalse(JSON.isValidArray("\"aaa\""))
assertFalse(JSON.isValidArray("\"aaa\"}"))
assertFalse(JSON.isValidArray("{}"))
assertFalse(JSON.isValidArray("{}]"))
assertTrue(JSON.isValidArray("[]"))
assertFalse(JSON.isValidArray("[]]"))
assertFalse(JSON.isValidArray((byte[]) null))
assertFalse(JSON.isValidArray(new byte[0]))
assertFalse(JSON.isValidArray("123".getBytes(StandardCharsets.UTF_8)))
assertFalse(JSON.isValidArray("1}".getBytes(StandardCharsets.UTF_8)))
assertFalse(JSON.isValidArray("\"aaa\"".getBytes(StandardCharsets.UTF_8)))
assertFalse(JSON.isValidArray("\"aaa\"}".getBytes(StandardCharsets.UTF_8)))
assertFalse(JSON.isValidArray("{}".getBytes(StandardCharsets.UTF_8)))
assertFalse(JSON.isValidArray("{}]".getBytes(StandardCharsets.UTF_8)))
assertTrue(JSON.isValidArray("[]".getBytes(StandardCharsets.UTF_8)))
assertFalse(JSON.isValidArray("[]]".getBytes(StandardCharsets.UTF_8)))
assertFalse(JSON.isValidObject((String) null))
assertFalse(JSON.isValidObject(""))
assertFalse(JSON.isValidObject("123"))
assertFalse(JSON.isValidObject("1}"))
assertFalse(JSON.isValidObject("\"aaa\""))
assertFalse(JSON.isValidObject("\"aaa\"}"))
assertTrue(JSON.isValidObject("{}"))
assertFalse(JSON.isValidObject("{}]"))
assertFalse(JSON.isValidObject("{]"))
assertFalse(JSON.isValidObject("{"))
assertFalse(JSON.isValidObject("[]"))
assertFalse(JSON.isValidObject("[]]"))
assertFalse(JSON.isValidObject((byte[]) null))
assertFalse(JSON.isValidObject(new byte[0]))
assertFalse(JSON.isValidObject("123".getBytes(StandardCharsets.UTF_8)))
assertFalse(JSON.isValidObject("1}".getBytes(StandardCharsets.UTF_8)))
assertFalse(JSON.isValidObject("\"aaa\"".getBytes(StandardCharsets.UTF_8)))
assertFalse(JSON.isValidObject("\"aaa\"}".getBytes(StandardCharsets.UTF_8)))
assertTrue(JSON.isValidObject("{}".getBytes(StandardCharsets.UTF_8)))
assertFalse(JSON.isValidObject("{}]".getBytes(StandardCharsets.UTF_8)))
assertFalse(JSON.isValidObject("{]".getBytes(StandardCharsets.UTF_8)))
assertFalse(JSON.isValidObject("{".getBytes(StandardCharsets.UTF_8)))
assertFalse(JSON.isValidObject("[]".getBytes(StandardCharsets.UTF_8)))
assertFalse(JSON.isValidObject("[]]".getBytes(StandardCharsets.UTF_8)))
assertEquals(model.name, model2.name)
assertEquals(model.name, model2.name)
assertEquals(model.name, model2.name)
assertEquals("{\"name\":\"\\u003c\\u003e\"}", str)
assertTrue(reader.nextIfObjectStart())
assertEquals(Fnv.hashCode64("id"), reader.readFieldNameHashCodeUnquote())
assertEquals(123, reader.readInt32().intValue())
assertEquals(Fnv.hashCode64("DataWorks"), reader.readValueHashCode())
assertTrue(reader.nextIfObjectStart())
assertEquals(Fnv.hashCode64("id"), reader.readFieldNameHashCode())
assertEquals(uuid, reader.readUUID())
assertEquals(Fnv.hashCode64("count"), reader.readFieldNameHashCode())
assertEquals(1238, reader.readInt64().intValue())
assertNotNull(instant)
assertTrue(JSONValidator.from(reader).validate())
assertEquals("{1001=1, 1000=0}", map.toString())
assertEquals(2, map.size())
assertEquals(0, map.get(1000L))
assertEquals(1, map.get(1001L))
assertEquals(-1, map.get(1000000L))
assertEquals(102, map.putIfAbsent(101, 102))
assertEquals(102, map.putIfAbsent(101, 103))
assertNotNull(new SimpleGrantedAuthorityMixin(""))
assertEquals(pojo.parentClass.getClass(), pojo1.parentClass.getClass())
assertNotNull(exception1)
assertNotNull(stackTrace)
assertEquals(map, o)
assertNotNull(jsonbBytes)
assertNull(obj.getMessage())
assertEquals(message, obj.getMessage())
assertEquals(message2, obj.getMessage())
assertEquals(message1, obj.getCause().getMessage())
assertEquals(message, obj.getMessage())
assertEquals(message, obj.getMessage())
assertEquals(ex.code, obj.code)
assertEquals(ex.getMessage(), ex1.getMessage())
assertEquals(ex.code, ex1.code)
assertEquals(ex.getMessage(), ex1.getMessage())
assertEquals(ex.getErrorIndex(), ex1.getErrorIndex())
assertEquals(ex.getMessage(), ex1.getMessage())
assertEquals(ex.getCause().getMessage(), ex1.getCause().getMessage())
assertEquals(ex.getCause().getMessage(), ex1.getCause().getMessage())
assertEquals(ex.getMessage(), ex1.getMessage())
assertEquals(ex.getMessage(), ex1.getMessage())
assertEquals(ex.getCause(), ex1.getCause())
assertEquals(ex.getMessage(), ex1.getMessage())
assertEquals(ex.getCause(), ex1.getCause())
assertEquals("com.qiyi.dubboapi.StreamService", str)
assertEquals(map, JSONB.parseObject(jsonbBytes, Object.class, filter, JSONReader.Feature.UseDefaultConstructorAsPossible, JSONReader.Feature.SupportClassForName, JSONReader.Feature.ErrorOnNoneSerializable, JSONReader.Feature.UseNativeObject, JSONReader.Feature.FieldBased))
assertEquals(map, JSONB.parseObject(jsonbBytes, Object.class, filter, JSONReader.Feature.UseDefaultConstructorAsPossible, JSONReader.Feature.SupportClassForName, JSONReader.Feature.ErrorOnNoneSerializable, JSONReader.Feature.UseNativeObject, JSONReader.Feature.FieldBased))
assertEquals(bean.type, bean1.type)
assertEquals(String.class, JSON.parseObject("\"java.lang.String\"", Class.class, filter))
assertEquals(String.class, JSON.parseObject("\"java.lang.String\"", Class.class, filter))
assertEquals(bean.type, bean1.type)
assertEquals(bean.type, bean2.type)
assertEquals("{\"Id\":101,\"Name\":\"DataWorks\"}", str)
assertEquals(bean.id, bean1.id)
assertEquals(bean.name, bean1.name)
assertEquals("{\"Id\":101,\"Name\":\"DataWorks\"}", str)
assertEquals(bean.id, bean1.id)
assertEquals(bean.name, bean1.name)
assertEquals("{\"Id\":101,\"Name\":\"DataWorks\"}", str)
assertEquals(bean.id, bean1.id)
assertEquals(bean.name, bean1.name)
assertNull(provider.unregisterObjectReader(Bean.class))
assertNull(provider.register(Bean.class, reader))
assertSame(reader, provider.register(Bean.class, reader1))
assertTrue(provider.unregisterObjectReader(Bean.class, reader1))
assertNull(provider.register(Bean.class, reader1))
assertSame(reader1, provider.unregisterObjectReader(Bean.class))
assertNull(provider.unregisterObjectReader(Bean.class))
assertNull(JSON.register(Bean.class, reader))
assertSame(reader, JSON.register(Bean.class, reader))
assertSame(reader, JSON.register(Bean.class, reader1))
assertSame(reader1, JSON.registerIfAbsent(Bean.class, reader1))
assertSame(reader1, JSON.registerIfAbsent(Bean.class, reader1))
assertSame(reader1, JSON.registerIfAbsent(Bean.class, reader))
assertTrue(provider.register(modoule))
assertTrue(provider.register(modoule1))
assertTrue(provider.unregister(modoule))
assertTrue(provider.unregister(modoule1))
assertNull(provider.getAutoTypeBeforeHandler())
assertNull(provider.getAutoTypeHandler())
assertNotNull(provider.getAutoTypeHandler())
assertEquals(1, provider.getAutoTypeList().size())
assertNotNull(provider.getAutoTypeList().get("java.lang.Integer"))
assertEquals(1, list.size())
assertEquals(Integer.class, list.get(0))
assertNull(provider.checkAutoType(null, null, 0))
assertNull(provider.checkAutoType("", null, 0))
assertNull(provider.checkAutoType("[java.lang.Integer", Object.class, 0))
assertNull(provider.checkAutoType("[java.lang.Integer", Object.class, 0))
assertNull(provider.checkAutoType("java.lang.Short", Number.class, 0))
assertEquals(Short.class, provider.checkAutoType("java.lang.Short", Number.class, 0))
assertEquals(Short.class, provider.checkAutoType("java.lang.Short", Number.class, JSONReader.Feature.SupportAutoType.mask))
assertNull(provider.checkAutoType("[java.lang.Integer", Object.class, 0))
assertNull(provider.checkAutoType("[java.lang.Long", Object.class, 0))
assertNull(provider.checkAutoType("[java.lang.Long", Object.class, 0))
assertNull(provider.checkAutoType("java.lang.Long", Number.class, 0))
assertEquals(Long.class, provider.checkAutoType("java.lang.Long", Number.class, JSONReader.Feature.SupportAutoType.mask))
assertEquals(B.class, provider.checkAutoType("com.alibaba.fastjson2.read.ObjectReaderProviderTest$B", A.class, JSONReader.Feature.SupportAutoType.mask))
assertEquals(singleSetClass, JSONFactory.getDefaultObjectReaderProvider().getObjectReader(singleSetClass).getObjectClass())
assertEquals(101, bean.item.id)
assertEquals("DataWorks", bean.item.name)
assertEquals(101, bean.item.id)
assertEquals("DataWorks", bean.item.name)
assertEquals(101, bean.item.id)
assertEquals("DataWorks", bean.item.name)
assertEquals(101, bean.item.id)
assertEquals("DataWorks", bean.item.name)
assertEquals(101, bean.item.id)
assertEquals("DataWorks", bean.item.name)
assertEquals(101, bean.item.id)
assertEquals("DataWorks", bean.item.name)
assertEquals(101, bean.item.id)
assertEquals("DataWorks", bean.item.name)
assertEquals(101, bean.item.id)
assertEquals("DataWorks", bean.item.name)
assertEquals(101, bean.item.id)
assertEquals("DataWorks", bean.item.name)
assertEquals(101, bean.item.id)
assertEquals("DataWorks", bean.item.name)
assertEquals('{', lexer.current())
assertEquals(Fnv.hashCode64("ID"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("id"), lexer.getNameHashCodeLCase())
assertEquals("ID", lexer.getFieldName())
assertEquals(123, lexer.readInt32Value())
assertEquals(Fnv.hashCode64("Name"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("name"), lexer.getNameHashCodeLCase())
assertEquals("Name", lexer.getFieldName())
assertEquals("jobs", lexer.readString())
assertEquals('}', lexer.current())
assertEquals(0x1A, lexer.current())
assertEquals('{', lexer.current())
assertEquals(Fnv.hashCode64("Object Id"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("object id"), lexer.getNameHashCodeLCase())
assertEquals("Object Id", lexer.getFieldName())
assertEquals(-123, lexer.readInt32Value())
assertEquals(Fnv.hashCode64("Full \" Name"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("full \" name"), lexer.getNameHashCodeLCase())
assertEquals("Full \" Name", lexer.getFieldName())
assertEquals("Steve \" Jobs", lexer.readString())
assertEquals('}', lexer.current())
assertEquals(0x1A, lexer.current())
assertEquals('{', lexer.current())
assertEquals(Fnv.hashCode64("ab®cd"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("ab®cd"), lexer.getNameHashCodeLCase())
assertEquals("ab®cd", lexer.getFieldName())
assertEquals(123, lexer.readInt32Value())
assertEquals(Fnv.hashCode64("¼½¾"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("¼½¾"), lexer.getNameHashCodeLCase())
assertEquals("¼½¾", lexer.getFieldName())
assertEquals("123µ45", lexer.readString())
assertEquals('}', lexer.current())
assertEquals(0x1A, lexer.current())
assertEquals('{', lexer.current())
assertEquals(Fnv.hashCode64("id"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("id"), lexer.getNameHashCodeLCase())
assertEquals("id", lexer.getFieldName())
assertEquals(123456789, lexer.readNumber())
assertEquals(Fnv.hashCode64("v0"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v0"), lexer.getNameHashCodeLCase())
assertEquals("v0", lexer.getFieldName())
assertEquals(123, lexer.readNumber())
assertEquals(Fnv.hashCode64("v1"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v1"), lexer.getNameHashCodeLCase())
assertEquals("v1", lexer.getFieldName())
assertEquals(123456789012345678L, lexer.readNumber())
assertEquals(Fnv.hashCode64("v2"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v2"), lexer.getNameHashCodeLCase())
assertEquals("v2", lexer.getFieldName())
assertEquals(new BigInteger("123456789012345678901234567890"), lexer.readNumber())
assertEquals(Fnv.hashCode64("v3"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v3"), lexer.getNameHashCodeLCase())
assertEquals("v3", lexer.getFieldName())
assertEquals(new BigDecimal("123.45"), lexer.readNumber())
assertEquals(Fnv.hashCode64("v4"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v4"), lexer.getNameHashCodeLCase())
assertEquals("v4", lexer.getFieldName())
assertEquals(123e4, lexer.readNumber())
assertEquals(Fnv.hashCode64("v5"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v5"), lexer.getNameHashCodeLCase())
assertEquals("v5", lexer.getFieldName())
assertEquals(Fnv.hashCode64("v6"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v6"), lexer.getNameHashCodeLCase())
assertEquals("v6", lexer.getFieldName())
assertNull(lexer.readNumber())
assertEquals(Fnv.hashCode64("v7"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v7"), lexer.getNameHashCodeLCase())
assertEquals("v7", lexer.getFieldName())
assertNull(lexer.readNumber())
assertEquals(Fnv.hashCode64("v8"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v8"), lexer.getNameHashCodeLCase())
assertEquals("v8", lexer.getFieldName())
assertEquals(1, lexer.readNumber())
assertEquals(Fnv.hashCode64("v9"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v9"), lexer.getNameHashCodeLCase())
assertEquals("v9", lexer.getFieldName())
assertEquals(0, lexer.readNumber())
assertEquals(Fnv.hashCode64("v10"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v10"), lexer.getNameHashCodeLCase())
assertEquals("v10", lexer.getFieldName())
assertEquals(123, lexer.readNumber())
assertEquals(Fnv.hashCode64("v11"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v11"), lexer.getNameHashCodeLCase())
assertEquals("v11", lexer.getFieldName())
assertNull(lexer.readNumber())
assertEquals(Fnv.hashCode64("v12"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v12"), lexer.getNameHashCodeLCase())
assertEquals("v12", lexer.getFieldName())
assertEquals(1234, lexer.readNumber())
assertEquals(Fnv.hashCode64("v13"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v13"), lexer.getNameHashCodeLCase())
assertEquals("v13", lexer.getFieldName())
assertEquals(new BigDecimal("12.34"), lexer.readNumber())
assertEquals(Fnv.hashCode64("v14"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v14"), lexer.getNameHashCodeLCase())
assertEquals("v14", lexer.getFieldName())
assertNull(lexer.readNumber())
assertEquals('}', lexer.current())
assertEquals(0x1A, lexer.current())
assertEquals('{', lexer.current())
assertEquals(Fnv.hashCode64("序号"), lexer.readFieldNameHashCode())
assertEquals("序号", lexer.getFieldName())
assertEquals(123, lexer.readInt32Value())
assertEquals(Fnv.hashCode64("名称"), lexer.readFieldNameHashCode())
assertEquals("名称", lexer.getFieldName())
assertEquals("计算平台", lexer.readString())
assertEquals('}', lexer.current())
assertEquals(0x1A, lexer.current())
assertEquals(8, map.size())
assertEquals('{', lexer.current())
assertEquals(Fnv.hashCode64("id"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("id"), lexer.getNameHashCodeLCase())
assertEquals("id", lexer.getFieldName())
assertEquals(123456789, lexer.readInt32Value())
assertEquals(Fnv.hashCode64("v0"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v0"), lexer.getNameHashCodeLCase())
assertEquals("v0", lexer.getFieldName())
assertEquals(-123, lexer.readInt32Value())
assertEquals(Fnv.hashCode64("v1"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v1"), lexer.getNameHashCodeLCase())
assertEquals("v1", lexer.getFieldName())
assertEquals(Fnv.hashCode64("v2"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v2"), lexer.getNameHashCodeLCase())
assertEquals("v2", lexer.getFieldName())
assertEquals(Fnv.hashCode64("v3"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v3"), lexer.getNameHashCodeLCase())
assertEquals("v3", lexer.getFieldName())
assertEquals(123, lexer.readInt32Value())
assertEquals(Fnv.hashCode64("v4"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v4"), lexer.getNameHashCodeLCase())
assertEquals("v4", lexer.getFieldName())
assertEquals((int) (123e4), lexer.readInt32Value())
assertEquals(Fnv.hashCode64("v5"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v5"), lexer.getNameHashCodeLCase())
assertEquals("v5", lexer.getFieldName())
assertEquals(Fnv.hashCode64("v6"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v6"), lexer.getNameHashCodeLCase())
assertEquals("v6", lexer.getFieldName())
assertEquals(0, lexer.readInt32Value())
assertEquals(Fnv.hashCode64("v7"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v7"), lexer.getNameHashCodeLCase())
assertEquals("v7", lexer.getFieldName())
assertEquals(0, lexer.readInt32Value())
assertEquals(Fnv.hashCode64("v8"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v8"), lexer.getNameHashCodeLCase())
assertEquals("v8", lexer.getFieldName())
assertEquals(1, lexer.readInt32Value())
assertEquals(Fnv.hashCode64("v9"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v9"), lexer.getNameHashCodeLCase())
assertEquals("v9", lexer.getFieldName())
assertEquals(0, lexer.readInt32Value())
assertEquals(Fnv.hashCode64("v10"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v10"), lexer.getNameHashCodeLCase())
assertEquals("v10", lexer.getFieldName())
assertEquals(123, lexer.readInt32Value())
assertEquals(Fnv.hashCode64("v11"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v11"), lexer.getNameHashCodeLCase())
assertEquals("v11", lexer.getFieldName())
assertEquals(0, lexer.readInt32Value())
assertEquals(Fnv.hashCode64("v12"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v12"), lexer.getNameHashCodeLCase())
assertEquals("v12", lexer.getFieldName())
assertEquals(1234, lexer.readInt32Value())
assertEquals(Fnv.hashCode64("v13"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v13"), lexer.getNameHashCodeLCase())
assertEquals("v13", lexer.getFieldName())
assertEquals(12, lexer.readInt32Value())
assertEquals(Fnv.hashCode64("v14"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v14"), lexer.getNameHashCodeLCase())
assertEquals("v14", lexer.getFieldName())
assertEquals(Fnv.hashCode64("v15"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v15"), lexer.getNameHashCodeLCase())
assertEquals("v15", lexer.getFieldName())
assertEquals(123, lexer.readInt32Value())
assertEquals('}', lexer.current())
assertEquals(0x1A, lexer.current())
assertEquals('{', lexer.current())
assertEquals(Fnv.hashCode64LCase("id"), lexer.readFieldNameHashCode())
assertEquals(123, lexer.readInt32Value())
assertEquals(Fnv.hashCode64LCase("name"), lexer.readFieldNameHashCode())
assertEquals("jobs", lexer.readString())
assertEquals('}', lexer.current())
assertEquals(0x1A, lexer.current())
assertEquals('{', lexer.current())
assertEquals(Fnv.hashCode64("id"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("id"), lexer.getNameHashCodeLCase())
assertEquals("id", lexer.getFieldName())
assertEquals("123456789", lexer.readString())
assertEquals(Fnv.hashCode64("v0"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v0"), lexer.getNameHashCodeLCase())
assertEquals("v0", lexer.getFieldName())
assertEquals("-123", lexer.readString())
assertEquals(Fnv.hashCode64("v1"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v1"), lexer.getNameHashCodeLCase())
assertEquals("v1", lexer.getFieldName())
assertEquals("123456789012345678", lexer.readString())
assertEquals(Fnv.hashCode64("v2"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v2"), lexer.getNameHashCodeLCase())
assertEquals("v2", lexer.getFieldName())
assertEquals("-123456789012345678901234567890", lexer.readString())
assertEquals(Fnv.hashCode64("v3"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v3"), lexer.getNameHashCodeLCase())
assertEquals("v3", lexer.getFieldName())
assertEquals("123.45", lexer.readString())
assertEquals(Fnv.hashCode64("v4"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v4"), lexer.getNameHashCodeLCase())
assertEquals("v4", lexer.getFieldName())
assertEquals("1230000.0", lexer.readString())
assertEquals(Fnv.hashCode64("v5"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v5"), lexer.getNameHashCodeLCase())
assertEquals("v5", lexer.getFieldName())
assertEquals("abcdefg", lexer.readString())
assertEquals(Fnv.hashCode64("v6"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v6"), lexer.getNameHashCodeLCase())
assertEquals("v6", lexer.getFieldName())
assertNull(lexer.readString())
assertEquals(Fnv.hashCode64("v7"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v7"), lexer.getNameHashCodeLCase())
assertEquals("v7", lexer.getFieldName())
assertEquals("null", lexer.readString())
assertEquals(Fnv.hashCode64("v8"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v8"), lexer.getNameHashCodeLCase())
assertEquals("v8", lexer.getFieldName())
assertEquals("true", lexer.readString())
assertEquals(Fnv.hashCode64("v9"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v9"), lexer.getNameHashCodeLCase())
assertEquals("v9", lexer.getFieldName())
assertEquals("false", lexer.readString())
assertEquals(Fnv.hashCode64("v10"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v10"), lexer.getNameHashCodeLCase())
assertEquals("v10", lexer.getFieldName())
assertEquals("{\"val\":123}", lexer.readString())
assertEquals(Fnv.hashCode64("v11"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v11"), lexer.getNameHashCodeLCase())
assertEquals("v11", lexer.getFieldName())
assertEquals("{}", lexer.readString())
assertEquals(Fnv.hashCode64("v12"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v12"), lexer.getNameHashCodeLCase())
assertEquals("v12", lexer.getFieldName())
assertEquals("[1234]", lexer.readString())
assertEquals(Fnv.hashCode64("v13"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v13"), lexer.getNameHashCodeLCase())
assertEquals("v13", lexer.getFieldName())
assertEquals("[12.34]", lexer.readString())
assertEquals(Fnv.hashCode64("v14"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v14"), lexer.getNameHashCodeLCase())
assertEquals("v14", lexer.getFieldName())
assertEquals("[null]", lexer.readString())
assertEquals(Fnv.hashCode64("v15"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v15"), lexer.getNameHashCodeLCase())
assertEquals("v15", lexer.getFieldName())
assertEquals("[\"123\"]", lexer.readString())
assertEquals('}', lexer.current())
assertEquals(0x1A, lexer.current())
assertEquals(6, array.size())
assertEquals(1, array.get(0))
assertEquals(2L, array.get(1))
assertEquals(3F, array.get(2))
assertEquals(4D, array.get(3))
assertEquals((byte) 5, array.get(4))
assertEquals((short) 6, array.get(5))
assertEquals(6, array2.size())
assertEquals(1, array2.get(0))
assertEquals(2L, array2.get(1))
assertEquals(3F, array2.get(2))
assertEquals(4D, array2.get(3))
assertEquals((byte) 5, array2.get(4))
assertEquals((short) 6, array2.get(5))
assertEquals(6, array3.size())
assertEquals(1, array3.get(0))
assertEquals(2L, array3.get(1))
assertEquals(3F, array3.get(2))
assertEquals(4D, array3.get(3))
assertEquals((byte) 5, array3.get(4))
assertEquals((short) 6, array3.get(5))
assertEquals(123, id)
assertEquals(123456789012345678L, id)
assertEquals("12345678901234567890", id.toString())
assertEquals(-123456789012345678L, id)
assertEquals("-12345678901234567890", id.toString())
assertEquals(1, signum)
assertEquals(mag2, -1420514932)
assertEquals(mag3, -350287150)
assertEquals(-1, signum)
assertEquals(mag0, 155824374)
assertEquals(mag1, -268291309)
assertEquals(mag2, -1001811888)
assertEquals(mag3, -566693042)
assertEquals(-1, signum)
assertEquals(mag2, -1420514932)
assertEquals(mag3, -350287150)
assertEquals(-1, signum)
assertEquals(mag2, -1420514932)
assertEquals(mag3, -350287150)
assertEquals(-1, signum)
assertEquals(mag2, -1420514932)
assertEquals(mag3, -350287150)
assertEquals(-1, signum)
assertEquals(mag2, -1420514932)
assertEquals(mag3, -350287150)
assertEquals(str, num.toString())
assertEquals(str, num.toString())
assertEquals(str, num.toString())
assertEquals(str, num.toString())
assertEquals(str, num.toString())
assertEquals("{\"type\":2,\"id\":\"cxcc\",\"uid\":\"uid\",\"data\":[{\"serviceTicket\":\"aa\",\"url\":\"111\"},{\"serviceTicket\":\"bbb\",\"url\":\"222\"}]}", jo.toJSONString())
assertEquals('{', lexer.current())
assertEquals(Fnv.hashCode64("id"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("id"), lexer.getNameHashCodeLCase())
assertEquals("id", lexer.getFieldName())
assertEquals(BigInteger.valueOf(123456789), lexer.readBigInteger())
assertEquals(Fnv.hashCode64("v0"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v0"), lexer.getNameHashCodeLCase())
assertEquals("v0", lexer.getFieldName())
assertEquals(BigInteger.valueOf(123), lexer.readBigInteger())
assertEquals(Fnv.hashCode64("v1"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v1"), lexer.getNameHashCodeLCase())
assertEquals("v1", lexer.getFieldName())
assertEquals(BigInteger.valueOf(123456789012345678L), lexer.readBigInteger())
assertEquals(Fnv.hashCode64("v2"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v2"), lexer.getNameHashCodeLCase())
assertEquals("v2", lexer.getFieldName())
assertEquals(new BigInteger("123456789012345678901234567890"), lexer.readBigInteger())
assertEquals(Fnv.hashCode64("v3"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v3"), lexer.getNameHashCodeLCase())
assertEquals("v3", lexer.getFieldName())
assertEquals(BigInteger.valueOf(123), lexer.readBigInteger())
assertEquals(Fnv.hashCode64("v4"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v4"), lexer.getNameHashCodeLCase())
assertEquals("v4", lexer.getFieldName())
assertEquals(BigInteger.valueOf((long) 123e4), lexer.readBigInteger())
assertEquals(Fnv.hashCode64("v5"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v5"), lexer.getNameHashCodeLCase())
assertEquals("v5", lexer.getFieldName())
assertNotNull(error)
assertEquals(Fnv.hashCode64("v6"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v6"), lexer.getNameHashCodeLCase())
assertEquals("v6", lexer.getFieldName())
assertNull(lexer.readBigInteger())
assertEquals(Fnv.hashCode64("v7"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v7"), lexer.getNameHashCodeLCase())
assertEquals("v7", lexer.getFieldName())
assertNull(lexer.readBigInteger())
assertEquals(Fnv.hashCode64("v8"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v8"), lexer.getNameHashCodeLCase())
assertEquals("v8", lexer.getFieldName())
assertEquals(BigInteger.ONE, lexer.readBigInteger())
assertEquals(Fnv.hashCode64("v9"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v9"), lexer.getNameHashCodeLCase())
assertEquals("v9", lexer.getFieldName())
assertEquals(BigInteger.ZERO, lexer.readBigInteger())
assertEquals(Fnv.hashCode64("v10"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v10"), lexer.getNameHashCodeLCase())
assertEquals("v10", lexer.getFieldName())
assertEquals(BigInteger.valueOf(123), lexer.readBigInteger())
assertEquals(Fnv.hashCode64("v11"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v11"), lexer.getNameHashCodeLCase())
assertEquals("v11", lexer.getFieldName())
assertNull(lexer.readBigInteger())
assertEquals(Fnv.hashCode64("v12"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v12"), lexer.getNameHashCodeLCase())
assertEquals("v12", lexer.getFieldName())
assertEquals(BigInteger.valueOf(1234), lexer.readBigInteger())
assertEquals(Fnv.hashCode64("v13"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v13"), lexer.getNameHashCodeLCase())
assertEquals("v13", lexer.getFieldName())
assertEquals(BigInteger.valueOf(12), lexer.readBigInteger())
assertEquals(Fnv.hashCode64("v14"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v14"), lexer.getNameHashCodeLCase())
assertEquals("v14", lexer.getFieldName())
assertNull(lexer.readBigInteger())
assertEquals('}', lexer.current())
assertEquals(0x1A, lexer.current())
assertEquals('{', lexer.current())
assertEquals(Fnv.hashCode64("id"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("id"), lexer.getNameHashCodeLCase())
assertEquals("id", lexer.getFieldName())
assertEquals(123456789, lexer.readInt64Value())
assertEquals(Fnv.hashCode64("v0"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v0"), lexer.getNameHashCodeLCase())
assertEquals("v0", lexer.getFieldName())
assertEquals(123, lexer.readInt64Value())
assertEquals(Fnv.hashCode64("v1"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v1"), lexer.getNameHashCodeLCase())
assertEquals("v1", lexer.getFieldName())
assertEquals(123456789012345678L, lexer.readInt64Value())
assertEquals(Fnv.hashCode64("v2"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v2"), lexer.getNameHashCodeLCase())
assertEquals("v2", lexer.getFieldName())
assertEquals(Fnv.hashCode64("v3"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v3"), lexer.getNameHashCodeLCase())
assertEquals("v3", lexer.getFieldName())
assertEquals(123, lexer.readInt64Value())
assertEquals(Fnv.hashCode64("v4"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v4"), lexer.getNameHashCodeLCase())
assertEquals("v4", lexer.getFieldName())
assertEquals((long) (123e4), lexer.readInt64Value())
assertEquals(Fnv.hashCode64("v5"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v5"), lexer.getNameHashCodeLCase())
assertEquals("v5", lexer.getFieldName())
assertEquals(Fnv.hashCode64("v6"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v6"), lexer.getNameHashCodeLCase())
assertEquals("v6", lexer.getFieldName())
assertEquals(0, lexer.readInt64Value())
assertEquals(Fnv.hashCode64("v7"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v7"), lexer.getNameHashCodeLCase())
assertEquals("v7", lexer.getFieldName())
assertEquals(0, lexer.readInt64Value())
assertEquals(Fnv.hashCode64("v8"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v8"), lexer.getNameHashCodeLCase())
assertEquals("v8", lexer.getFieldName())
assertEquals(1, lexer.readInt64Value())
assertEquals(Fnv.hashCode64("v9"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v9"), lexer.getNameHashCodeLCase())
assertEquals("v9", lexer.getFieldName())
assertEquals(0, lexer.readInt64Value())
assertEquals(Fnv.hashCode64("v10"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v10"), lexer.getNameHashCodeLCase())
assertEquals("v10", lexer.getFieldName())
assertEquals(123, lexer.readInt64Value())
assertEquals(Fnv.hashCode64("v11"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v11"), lexer.getNameHashCodeLCase())
assertEquals("v11", lexer.getFieldName())
assertEquals(Fnv.hashCode64("v12"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v12"), lexer.getNameHashCodeLCase())
assertEquals("v12", lexer.getFieldName())
assertEquals(1234, lexer.readInt64Value())
assertEquals(Fnv.hashCode64("v13"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v13"), lexer.getNameHashCodeLCase())
assertEquals("v13", lexer.getFieldName())
assertEquals(12, lexer.readInt64Value())
assertEquals(Fnv.hashCode64("v14"), lexer.readFieldNameHashCode())
assertEquals(Fnv.hashCode64LCase("v14"), lexer.getNameHashCodeLCase())
assertEquals("v14", lexer.getFieldName())
assertEquals('}', lexer.current())
assertEquals(0x1A, lexer.current())
assertEquals(123, bean.id)
assertEquals("DataWorks", bean.name)
assertEquals(123, bean.id)
assertEquals("DataWorks", bean.name)
assertEquals(123, bean.id)
assertEquals("DataWorks", bean.name)
assertEquals(123, bean.id)
assertEquals("DataWorks", bean.name)
assertEquals(123, bean.id)
assertEquals("DataWorks", bean.name)
assertEquals(123, bean.id)
assertEquals("DataWorks", bean.name)
assertEquals(123, bean.value)
assertEquals(123, bean.value)
assertEquals("123", bean.value)
assertEquals("123", bean.value)
assertEquals(123, bean.value)
assertEquals(123, bean.value)
assertNotNull(images)
assertEquals(2, images.size())
assertEquals(5, image_0.size())
assertEquals(Integer.valueOf(768), image_0.get("height"))
assertEquals("LARGE", image_0.get("size"))
assertEquals("Javaone Keynote", image_0.get("title"))
assertEquals("http://javaone.com/keynote_large.jpg", image_0.get("uri"))
assertEquals(Integer.valueOf(1024), image_0.get("width"))
assertEquals(5, image_0.size())
assertEquals(Integer.valueOf(240), image_1.get("height"))
assertEquals("SMALL", image_1.get("size"))
assertEquals("Javaone Keynote", image_1.get("title"))
assertEquals("http://javaone.com/keynote_small.jpg", image_1.get("uri"))
assertEquals(Integer.valueOf(320), image_1.get("width"))
assertEquals(10, media.size())
assertEquals(Integer.valueOf(262144), media.get("bitrate"))
assertEquals(Integer.valueOf(18000000), media.get("duration"))
assertEquals("video/mpg4", media.get("format"))
assertEquals(Integer.valueOf(480), media.get("height"))
assertEquals(2, persons.size())
assertEquals("Bill Gates", persons.get(0))
assertEquals("Steve Jobs", persons.get(1))
assertEquals("JAVA", media.get("player"))
assertEquals(Integer.valueOf(58982400), media.get("size"))
assertEquals("Javaone Keynote", media.get("title"))
assertEquals("http://javaone.com/keynote.mpg", media.get("uri"))
assertEquals(Integer.valueOf(640), media.get("width"))
assertTrue(JSON.parseObject("{\"value\":1}", Bean.class, NonZeroNumberCastToBooleanAsTrue).value)
assertTrue(JSON.parseObject("{\"value\":3}", Bean.class, NonZeroNumberCastToBooleanAsTrue).value)
assertTrue(JSON.parseObject("{\"value\":true}", Bean.class, NonZeroNumberCastToBooleanAsTrue).value)
assertTrue(JSON.parseObject("{\"value\":1}").toJavaObject(Bean.class, NonZeroNumberCastToBooleanAsTrue).value)
assertTrue(JSON.parseObject("{\"value\":3}").toJavaObject(Bean.class, NonZeroNumberCastToBooleanAsTrue).value)
assertTrue(JSON.parseObject("{\"value\":true}").toJavaObject(Bean.class, NonZeroNumberCastToBooleanAsTrue).value)
assertEquals(Boolean.TRUE, values[1])
assertEquals(Boolean.TRUE, ((Object[]) path.extract("{\"id\":123,\"value\":\"true\"}"))[1])
assertEquals(Boolean.TRUE, ((Object[]) path.extract("{\"id\":123,\"value\":\"TRUE\"}"))[1])
assertEquals(Boolean.TRUE, ((Object[]) path.extract("{\"id\":123,\"value\":\"1\"}"))[1])
assertEquals(Boolean.FALSE, ((Object[]) path.extract("{\"id\":123,\"value\":\"false\"}"))[1])
assertEquals(Boolean.FALSE, ((Object[]) path.extract("{\"id\":123,\"value\":\"FALSE\"}"))[1])
assertEquals(Boolean.FALSE, ((Object[]) path.extract("{\"id\":123,\"value\":\"0\"}"))[1])
assertEquals(11, segments.size())
assertEquals("101", JSONPath.of("$.DAYS").eval(map))
assertEquals("101", JSONPath.of("$.values.DAYS").eval(root))
assertEquals("101", JSONPath.of("$.2748734281").eval(map))
assertEquals("101", JSONPath.of("$.values.2748734281").eval(root))
assertEquals("101", JSONPath.of("$.1773193982").eval(map))
assertEquals("101", JSONPath.of("$.values.1773193982").eval(root))
assertSame(JSONFactory.defaultObjectReaderProvider, JSONFactory.getDefaultObjectReaderProvider())
assertSame(JSONFactory.defaultJSONPathCompiler, JSONFactory.getDefaultJSONPathCompiler())
assertTrue(JSONFactory.isUseJacksonAnnotation())
assertSame(provider, context.getProvider())
assertEquals("{\"value\":\"\"}", json)
assertEquals(0, new JSONPathSegmentIndex(0).index)
assertEquals(1, new JSONPathSegmentIndex(1).index)
assertEquals(2, new JSONPathSegmentIndex(2).index)
assertEquals(-1, new JSONPathSegmentIndex(-1).index)
assertEquals(5, new JSONPathSegmentIndex(5).index)
assertEquals(JSONPathSegmentIndex.ZERO, JSONPathSegmentIndex.of(0))
assertEquals(JSONPathSegmentIndex.ONE, JSONPathSegmentIndex.of(1))
assertEquals(JSONPathSegmentIndex.TWO, JSONPathSegmentIndex.of(2))
assertEquals(JSONPathSegmentIndex.LAST, JSONPathSegmentIndex.of(-1))
assertEquals(5, JSONPathSegmentIndex.of(5).index)
assertEquals(JSONPathSegmentIndex.ZERO.toString(), "[0]")
assertEquals(JSONPathSegmentIndex.ONE.toString(), "[1]")
assertEquals(JSONPathSegmentIndex.TWO.toString(), "[2]")
assertEquals(JSONPathSegmentIndex.LAST.toString(), "[-1]")
assertEquals(new JSONPathSegmentIndex(6).toString(), "[6]")
assertEquals(new JSONPathSegmentIndex(-6).toString(), "[-6]")
assertTrue(context.eval)
assertEquals(context.value != null ? Integer.parseInt("" + context.value) : null, value)
assertTrue(context.eval)
assertNotEquals(context.value, value)
assertTrue(object.isEmpty())
assertEquals(1, object.size())
assertEquals(123, ((Number) object.get("id")).intValue())
assertTrue(list.isEmpty())
assertEquals(1, list.size())
assertEquals(123, list.get(0).intValue())
assertNull(JSONB.parseObject(jsonbBytes, Object.class))
assertNull(JSONB.parseObject(jsonbBytes, Object.class))
assertNull(JSONB.parseObject(jsonbBytes, Object.class))
assertTrue((Boolean) JSONB.parseObject(jsonbBytes, Object.class))
assertEquals(str, JSONB.parseObject(jsonbBytes, Object.class))
assertEquals(str, JSONB.parseObject(jsonbBytes, Object.class))
assertArrayEquals(jsonbBytes2, jsonbBytes)
assertEquals(str, JSONB.parseObject(jsonbBytes, String.class))
assertEquals(str, JSONB.parseObject(jsonbBytes, Object.class))
assertEquals(str, JSONB.parseObject(jsonbBytes, Object.class))
assertEquals(str, JSONB.parseObject(jsonbBytes, Object.class))
assertEquals(0, ((Number) JSONB.parseObject(jsonbBytes, Object.class)).intValue())
assertEquals(123, ((Number) map.get("id")).intValue())
assertEquals("id", symbolTable.getNameByHashCode(Fnv.hashCode64("id")))
assertNull(symbolTable.getNameByHashCode(-1))
assertEquals(-1, symbolTable.getOrdinalByHashCode(-1))
assertArrayEquals(new byte[] { JSONB.Constants.BC_NULL }, JSONB.toBytes((String) null))
assertArrayEquals(new byte[] { JSONB.Constants.BC_NULL }, JSONB.toBytes((String) null, (Charset) null))
assertArrayEquals(new byte[] { JSONB.Constants.BC_NULL }, JSONB.toBytes((BigInteger) null))
assertArrayEquals(new byte[] { JSONB.Constants.BC_NULL }, JSONB.toBytes((BigDecimal) null))
assertEquals(map.size(), map1.size())
assertEquals(map, map1)
assertEquals("[1]", JSON.toJSONString(JSONB.parse(out.toByteArray())))
assertArrayEquals(array, array2)
assertArrayEquals(array, array2)
assertArrayEquals(array, array2)
assertArrayEquals(array, array2)
assertArrayEquals(array, array2)
assertEquals(123, ((Bean1) array[0]).id)
assertEquals(234, ((Bean2) array[1]).id)
assertEquals(123, ((Bean1) array[0]).id)
assertEquals(234, ((Bean2) array[1]).id)
assertEquals(123, ((Bean1) array[0]).id)
assertEquals(234, ((Bean2) array[1]).id)
assertEquals(123, ((Bean1) array[0]).id)
assertEquals(234, ((Bean2) array[1]).id)
assertEquals(123, ((Bean1) array.get(0)).id)
assertEquals(234, ((Bean2) array.get(1)).id)
assertEquals(123, ((Bean1) array.get(0)).id)
assertEquals(234, ((Bean2) array.get(1)).id)
assertEquals(123, ((Bean1) array.get(0)).id)
assertEquals(234, ((Bean2) array.get(1)).id)
assertEquals(123, ((Bean1) array.get(0)).id)
assertEquals(234, ((Bean2) array.get(1)).id)
assertArrayEquals(new Object[] { "John", 27 }, values)
assertArrayEquals(new Object[] { "John", 27 }, values)
assertArrayEquals(Base64.getDecoder().decode("ZGluZ3hpYW9ibw=="), extractVals)
assertNull(JSON.parseObject("{\"date\":\"\"}", Bean.class).date)
assertEquals(2, list.size())
assertEquals(101, list.get(0))
assertEquals(102, list.get(1))
assertEquals(2, list.size())
assertEquals(101, list.get(0))
assertEquals(102, list.get(1))
assertEquals(2, list.size())
assertEquals(101, list.get(0))
assertEquals(102, list.get(1))
assertEquals(order.getOrderNo(), o.iterator().next().getOrderNo())
assertEquals(order.getActualCharge(), o.iterator().next().getActualCharge())
assertEquals(123, integer.get())
assertEquals("123", ref.get())
assertEquals("123", ref.get())
assertEquals(true, ref.get())
assertEquals(false, ref.get())
assertEquals(null, ref.get())
assertEquals(new JSONArray(), ref.get())
assertEquals(new JSONObject(), ref.get())
assertEquals("123", ref.get())
assertEquals("123", ref.get())
assertEquals(")123\uD83D\uDE09®中国", ref.get())
assertNotNull(bean.item)
assertEquals(102, bean.item.itemId)
assertEquals(101, bean.item.getParentId())
assertNotNull(bean.item)
assertEquals(102, bean.item.itemId)
assertEquals(101, bean.item.getParentId())
assertNotNull(bean.item)
assertEquals(102, bean.item.itemId)
assertEquals(101, bean.item.getParentId())
assertNotNull(bean.item)
assertEquals(102, bean.item.itemId)
assertEquals(101, bean.item.getParentId())
assertEquals(1, fieldWriters.size())
assertEquals(C0.class, fieldWriters.get(0).method.getDeclaringClass())
assertEquals(1, fieldReaders.length)
assertEquals(C0.class, fieldReaders[0].method.getDeclaringClass())
assertEquals(1, fieldWriters.size())
assertEquals(C1.class, fieldWriters.get(0).method.getDeclaringClass())
assertEquals(1, fieldReaders.length)
assertEquals(C1.class, fieldReaders[0].method.getDeclaringClass())
assertEquals(1, fieldWriters.size())
assertEquals(C2.class, fieldWriters.get(0).field.getDeclaringClass())
assertEquals(1, fieldWriters.size())
assertEquals(C2.class, fieldWriters.get(0).field.getDeclaringClass())
assertEquals(1, fieldReaders.length)
assertEquals(C2.class, fieldReaders[0].field.getDeclaringClass())
assertEquals("1.0", RyuFloat.toString(1F))
assertEquals("3.4028235E38", RyuFloat.toString(Float.MAX_VALUE))
assertEquals("1.4E-45", RyuFloat.toString(Float.MIN_VALUE))
assertEquals("1.0", RyuDouble.toString(1D))
assertEquals("1.7976931348623157E308", RyuDouble.toString(Double.MAX_VALUE))
assertEquals("4.9E-324", RyuDouble.toString(Double.MIN_VALUE))
assertNull(TypeUtils.toByte(null))
assertNull(TypeUtils.toByte(""))
assertNull(TypeUtils.toByte("null"))
assertEquals(0, TypeUtils.toByteValue(null))
assertEquals(0, TypeUtils.toByteValue(""))
assertEquals(0, TypeUtils.toByteValue("null"))
assertEquals(Byte.valueOf((byte) 0), TypeUtils.toByte("0"))
assertEquals(0, TypeUtils.toByteValue("0"))
assertEquals(0, TypeUtils.toByteValue((short) 0))
assertEquals(0, TypeUtils.toByteValue((byte) 0))
assertEquals(Byte.valueOf((byte) 0), TypeUtils.toByte((short) 0))
assertEquals(Byte.valueOf((byte) 0), TypeUtils.toByte((byte) 0))
assertNull(TypeUtils.toDouble(null))
assertNull(TypeUtils.toDouble(""))
assertNull(TypeUtils.toDouble("null"))
assertEquals(0D, TypeUtils.toDoubleValue(null))
assertEquals(0D, TypeUtils.toDoubleValue(""))
assertEquals(0D, TypeUtils.toDoubleValue("null"))
assertEquals(0D, TypeUtils.toDoubleValue(0D))
assertEquals(0D, TypeUtils.toDouble(0D))
assertEquals(0D, TypeUtils.toDouble("0"))
assertEquals(0D, TypeUtils.toDoubleValue("0"))
assertEquals(0D, TypeUtils.toDoubleValue((short) 0))
assertEquals(0D, TypeUtils.toDoubleValue((byte) 0))
assertEquals(0D, TypeUtils.toDouble((short) 0))
assertEquals(0D, TypeUtils.toDouble((byte) 0))
assertNull(TypeUtils.toFloat(null))
assertNull(TypeUtils.toFloat(""))
assertNull(TypeUtils.toFloat("null"))
assertEquals(0F, TypeUtils.toFloatValue(null))
assertEquals(0F, TypeUtils.toFloatValue(""))
assertEquals(0F, TypeUtils.toFloatValue("null"))
assertEquals(0F, TypeUtils.toFloatValue(0F))
assertEquals(0F, TypeUtils.toFloat(0F))
assertEquals(0F, TypeUtils.toFloat("0"))
assertEquals(0F, TypeUtils.toFloatValue("0"))
assertEquals(0F, TypeUtils.toFloatValue((short) 0))
assertEquals(0F, TypeUtils.toFloatValue((byte) 0))
assertEquals(0F, TypeUtils.toFloatValue((byte) 0))
assertEquals(0F, TypeUtils.toFloatValue((float) 0))
assertEquals(0F, TypeUtils.toFloat((short) 0))
assertEquals(0F, TypeUtils.toFloat((byte) 0))
assertEquals(0F, TypeUtils.toFloat((float) 0))
assertNull(TypeUtils.toShort(null))
assertNull(TypeUtils.toShort(""))
assertNull(TypeUtils.toShort("null"))
assertEquals(0, TypeUtils.toShortValue(null))
assertEquals(0, TypeUtils.toShortValue(""))
assertEquals(0, TypeUtils.toShortValue("null"))
assertEquals(Short.valueOf((short) 0), TypeUtils.toShort("0"))
assertEquals(0, TypeUtils.toShortValue("0"))
assertEquals(0, TypeUtils.toShortValue((short) 0))
assertEquals(Short.valueOf((short) 0), TypeUtils.toShort((short) 0))
assertNull(TypeUtils.toInteger(null))
assertNull(TypeUtils.toInteger(""))
assertNull(TypeUtils.toInteger("null"))
assertEquals(0, TypeUtils.toIntValue(null))
assertEquals(0, TypeUtils.toIntValue(""))
assertEquals(0, TypeUtils.toIntValue("null"))
assertEquals(0, TypeUtils.toIntValue("0"))
assertEquals(Integer.valueOf(0), TypeUtils.toInteger("0"))
assertEquals(0, TypeUtils.toIntValue("0"))
assertEquals(0, TypeUtils.toIntValue(0))
assertEquals(Integer.valueOf(0), TypeUtils.toInteger(0))
assertEquals(0, TypeUtils.toIntValue((short) 0))
assertEquals(0, TypeUtils.toIntValue((byte) 0))
assertEquals(0, TypeUtils.toIntValue((byte) 0))
assertEquals(0, TypeUtils.toIntValue((float) 0))
assertEquals(Integer.valueOf(0), TypeUtils.toInteger((short) 0))
assertEquals(Integer.valueOf(0), TypeUtils.toInteger((byte) 0))
assertEquals(Integer.valueOf(0), TypeUtils.toInteger((float) 0))
assertEquals(Integer.valueOf(1), TypeUtils.toInteger(1))
assertNull(TypeUtils.toLong(null))
assertNull(TypeUtils.toLong(""))
assertNull(TypeUtils.toLong("null"))
assertEquals(0, TypeUtils.toLongValue(null))
assertEquals(0, TypeUtils.toLongValue(""))
assertEquals(0, TypeUtils.toLongValue("null"))
assertEquals(Long.valueOf(0), TypeUtils.toLong("0"))
assertEquals(0, TypeUtils.toLongValue("0"))
assertEquals(0, TypeUtils.toLongValue(0L))
assertEquals(Long.valueOf(0), TypeUtils.toLong(0L))
assertEquals(0, TypeUtils.toLongValue((short) 0))
assertEquals(0, TypeUtils.toLongValue((byte) 0))
assertEquals(0, TypeUtils.toLongValue((byte) 0))
assertEquals(0, TypeUtils.toLongValue((float) 0))
assertEquals(Long.valueOf(0), TypeUtils.toLong((short) 0))
assertEquals(Long.valueOf(0), TypeUtils.toLong((byte) 0))
assertEquals(Long.valueOf(0), TypeUtils.toLong((float) 0))
assertEquals(Long.valueOf(1), TypeUtils.toLong(1))
assertNull(TypeUtils.toBigInteger(null))
assertNull(TypeUtils.toBigInteger(""))
assertNull(TypeUtils.toBigInteger("null"))
assertEquals(BigInteger.valueOf(1), TypeUtils.toBigInteger(1))
assertEquals(BigInteger.valueOf(1), TypeUtils.toBigInteger("1"))
assertNull(TypeUtils.toBigDecimal(null))
assertNull(TypeUtils.toBigDecimal(""))
assertNull(TypeUtils.toBigDecimal("null"))
assertEquals(BigDecimal.valueOf(1), TypeUtils.toBigDecimal(1))
assertEquals(BigDecimal.valueOf(1), TypeUtils.toBigDecimal("1"))
assertEquals(byte.class, TypeUtils.loadClass("B"))
assertEquals(short.class, TypeUtils.loadClass("S"))
assertEquals(int.class, TypeUtils.loadClass("I"))
assertEquals(long.class, TypeUtils.loadClass("J"))
assertEquals(float.class, TypeUtils.loadClass("F"))
assertEquals(double.class, TypeUtils.loadClass("D"))
assertEquals(boolean.class, TypeUtils.loadClass("Z"))
assertEquals(char.class, TypeUtils.loadClass("C"))
assertSame(o, TypeUtils.cast(o, Object.class))
assertNull(TypeUtils.cast(null, Object.class))
assertSame(date, TypeUtils.cast(date, Date.class))
assertEquals(date, TypeUtils.cast(date.toInstant(), Date.class))
assertEquals(instant, TypeUtils.cast(date, Instant.class))
assertSame(instant, TypeUtils.cast(instant, Instant.class))
assertEquals(Instant.ofEpochSecond(instant.getEpochSecond()), TypeUtils.cast(JSONObject.of("epochSecond", instant.getEpochSecond()), Instant.class))
assertEquals(instant, TypeUtils.cast(JSONObject.of("epochMilli", instant.toEpochMilli()), Instant.class))
assertNotNull(error)
assertEquals(false, TypeUtils.getDefaultValue(boolean.class))
assertEquals((byte) 0, TypeUtils.getDefaultValue(byte.class))
assertEquals((short) 0, TypeUtils.getDefaultValue(short.class))
assertEquals(0, TypeUtils.getDefaultValue(int.class))
assertEquals(0L, TypeUtils.getDefaultValue(long.class))
assertEquals(0F, TypeUtils.getDefaultValue(float.class))
assertEquals(0D, TypeUtils.getDefaultValue(double.class))
assertEquals((char) 0, TypeUtils.getDefaultValue(char.class))
assertEquals(Optional.empty(), TypeUtils.getDefaultValue(Optional.class))
assertEquals(OptionalInt.empty(), TypeUtils.getDefaultValue(OptionalInt.class))
assertEquals(OptionalLong.empty(), TypeUtils.getDefaultValue(OptionalLong.class))
assertEquals(OptionalDouble.empty(), TypeUtils.getDefaultValue(OptionalDouble.class))
assertEquals(Integer.valueOf(1), TypeUtils.cast("1", (Type) Integer.class))
assertNull(TypeUtils.cast(null, (Type) Integer.class))
assertEquals(Integer.valueOf(123), ((Bean<Integer>) TypeUtils.cast(map, new TypeReference<Bean<Integer>>() {
}.getType())).id)
assertEquals(Integer.valueOf(123), ((List<Bean<Integer>>) TypeUtils.cast(list, new TypeReference<List<Bean<Integer>>>() {
}.getType())).get(0).id)
assertNull(TypeUtils.toStringArray(null))
assertArrayEquals(strings, TypeUtils.toStringArray(strings))
assertArrayEquals(strings, TypeUtils.toStringArray(Arrays.asList(strings)))
assertArrayEquals(strings, TypeUtils.toStringArray(new Object[] { 1, 2, 3 }))
assertNull(TypeUtils.cast(null, new Type[0]))
assertArrayEquals(new Object[] { 1, 2L, BigDecimal.valueOf(3) }, TypeUtils.cast(new String[] { "1", "2", "3" }, new Type[] { Integer.class, Long.class, BigDecimal.class }))
assertSame(Collections.EMPTY_MAP.getClass(), TypeUtils.loadClass("java.util.Collections$EmptyMap"))
assertSame(Collections.EMPTY_SET.getClass(), TypeUtils.loadClass("java.util.Collections$EmptySet"))
assertSame(Collections.unmodifiableList(new ArrayList<>()).getClass(), TypeUtils.loadClass("java.util.Collections$UnmodifiableRandomAccessList"))
assertSame(java.util.Optional.class, TypeUtils.loadClass("java.util.Optional"))
assertSame(java.util.OptionalInt.class, TypeUtils.loadClass("java.util.OptionalInt"))
assertSame(java.util.OptionalLong.class, TypeUtils.loadClass("java.util.OptionalLong"))
assertSame(List.class, TypeUtils.loadClass("java.util.List"))
assertSame(List.class, TypeUtils.loadClass("List"))
assertSame(Set.class, TypeUtils.loadClass("java.util.Set"))
assertSame(String[].class, TypeUtils.loadClass("[String"))
assertSame(String[].class, TypeUtils.loadClass("String[]"))
assertSame(byte[].class, TypeUtils.loadClass("byte[]"))
assertSame(short[].class, TypeUtils.loadClass("short[]"))
assertSame(short[].class, TypeUtils.loadClass("[S"))
assertSame(int[].class, TypeUtils.loadClass("[I"))
assertSame(int[].class, TypeUtils.loadClass("int[]"))
assertSame(long[].class, TypeUtils.loadClass("[J"))
assertSame(long[].class, TypeUtils.loadClass("long[]"))
assertSame(float[].class, TypeUtils.loadClass("[F"))
assertSame(float[].class, TypeUtils.loadClass("float[]"))
assertSame(double[].class, TypeUtils.loadClass("[D"))
assertSame(double[].class, TypeUtils.loadClass("double[]"))
assertSame(boolean[].class, TypeUtils.loadClass("[Z"))
assertSame(boolean[].class, TypeUtils.loadClass("boolean[]"))
assertSame(object.getInnerMap(), innerMap)
assertArrayEquals(new String[] { "message" }, lookupParameterNames(IOException.class.getConstructor(String.class)))
assertArrayEquals(new String[] { "cause" }, lookupParameterNames(IOException.class.getConstructor(Throwable.class)))
assertArrayEquals(new String[] { "message", "cause" }, lookupParameterNames(IOException.class.getConstructor(String.class, Throwable.class)))
assertArrayEquals(new String[] { "message", "parsedString", "errorIndex" }, lookupParameterNames(DateTimeParseException.class.getConstructor(String.class, CharSequence.class, int.class)))
assertArrayEquals(new String[] { "message", "parsedString", "errorIndex", "cause" }, lookupParameterNames(DateTimeParseException.class.getConstructor(String.class, CharSequence.class, int.class, Throwable.class)))
assertEquals(JdbcSupport.ClobWriter.class, provider.getObjectWriter(oracle.sql.CLOB.class).getClass())
assertEquals(JdbcSupport.ClobWriter.class, provider.getObjectWriter(oracle.sql.NCLOB.class).getClass())
assertEquals(JdbcSupport.ClobWriter.class, provider.getObjectWriter(oracle.jdbc.driver.OracleClob.class).getClass())
assertEquals(JdbcSupport.ClobWriter.class, provider.getObjectWriter(oracle.jdbc.driver.OracleNClob.class).getClass())
assertNull(DateUtils.parseDate(null))
assertNull(DateUtils.parseDate(null, DEFAULT_ZONE_ID))
assertNull(DateUtils.parseDate(null, "yyyy-MM-dd HH:mm:ss"))
assertNull(DateUtils.parseDate(null, "yyyy-MM-dd HH:mm:ss", DEFAULT_ZONE_ID))
assertNull(DateUtils.parseDate(""))
assertNull(DateUtils.parseDate("", DEFAULT_ZONE_ID))
assertNull(DateUtils.parseDate("", "yyyy-MM-dd HH:mm:ss"))
assertNull(DateUtils.parseDate("", "yyyy-MM-dd HH:mm:ss", DEFAULT_ZONE_ID))
assertNull(DateUtils.parseDate("null"))
assertNull(DateUtils.parseDate("null", DEFAULT_ZONE_ID))
assertNull(DateUtils.parseDate("null", "yyyy-MM-dd HH:mm:ss"))
assertNull(DateUtils.parseDate("null", "yyyy-MM-dd HH:mm:ss", DEFAULT_ZONE_ID))
assertEquals(0, DateUtils.parseMillis("null"))
assertEquals(0, DateUtils.parseMillis("null", DEFAULT_ZONE_ID))
assertEquals(0, DateUtils.parseMillis("", DEFAULT_ZONE_ID))
assertEquals(0, DateUtils.parseMillis(null, DEFAULT_ZONE_ID))
assertEquals(millis, DateUtils.parseDate(str).getTime())
assertEquals(millis, DateUtils.parseDate(str, DEFAULT_ZONE_ID).getTime())
assertEquals(millis, DateUtils.parseDate(str, null, DEFAULT_ZONE_ID).getTime())
assertEquals(millis, DateUtils.parseDate(str, "", DEFAULT_ZONE_ID).getTime())
assertEquals(millis, DateUtils.parseDate(str, pattern).getTime())
assertEquals(millis, DateUtils.parseDate(str, pattern, DEFAULT_ZONE_ID).getTime())
assertEquals(millis, DateUtils.parseDate(str, pattern, null).getTime())
assertEquals(millis, DateUtils.parseMillis19(str, DEFAULT_ZONE_ID, DateUtils.DateTimeFormatPattern.DATE_TIME_FORMAT_19_DASH))
assertEquals(millis, DateUtils.parseMillis(str, DEFAULT_ZONE_ID))
assertEquals(millis, DateUtils.parseDateYMDHMS19(str).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, DEFAULT_ZONE_ID).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, null, DEFAULT_ZONE_ID).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, "", DEFAULT_ZONE_ID).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, pattern).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, pattern, DEFAULT_ZONE_ID).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, pattern, null).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDateYMDHMS19(str).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, DEFAULT_ZONE_ID).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, pattern).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, pattern, DEFAULT_ZONE_ID).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, DEFAULT_ZONE_ID).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, pattern).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, pattern, DEFAULT_ZONE_ID).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, pattern, null).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, DEFAULT_ZONE_ID).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, pattern).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, pattern, DEFAULT_ZONE_ID).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, DEFAULT_ZONE_ID).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, pattern).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, pattern, DEFAULT_ZONE_ID).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, pattern, null).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
assertEquals(millis, DateUtils.parseDate(str).getTime())
assertEquals(ldt.atZone(UTC).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
assertEquals(ldt.atZone(UTC).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, DEFAULT_ZONE_ID).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, pattern).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, pattern, DEFAULT_ZONE_ID).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, DEFAULT_ZONE_ID).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, pattern).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, pattern, DEFAULT_ZONE_ID).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
assertEquals(ldt.atZone(zoneId).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
assertEquals(ldt, DateUtils.parseLocalDateTime20(str, 0))
assertEquals(ldt.atZone(zoneId).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
assertEquals(ldt.atZone(zoneId).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
assertEquals(ldt.atZone(SHANGHAI_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
assertEquals(localDate, DateUtils.parseLocalDate(str))
assertEquals(localDate, DateUtils.parseLocalDate(str))
assertNull(DateUtils.parseLocalDate(null))
assertNull(DateUtils.parseLocalDate(null, 0, 0))
assertNull(DateUtils.parseLocalDate(""))
assertNull(DateUtils.parseLocalDate("null"))
assertNull(DateUtils.parseLocalDate("00000000"))
assertNull(DateUtils.parseLocalDate("00000000"))
assertNull(DateUtils.parseLocalDate("0000-0-00"))
assertEquals(localDate, DateUtils.parseLocalDate(str))
assertNull(DateUtils.parseLocalDate("0000-00-00"))
assertNull(DateUtils.parseLocalDate("0000年00月00日"))
assertEquals(ldt, DateUtils.parseLocalDateTime(str))
assertEquals(ldt, DateUtils.parseLocalDateTime(str))
assertEquals(ldt, DateUtils.parseLocalDateTime(str))
assertEquals(ldt, DateUtils.parseLocalDateTime(str))
assertNull(DateUtils.parseLocalDateTime(null))
assertNull(DateUtils.parseLocalDateTime(null, 0, 0))
assertNull(DateUtils.parseLocalDateTime(""))
assertNull(DateUtils.parseLocalDateTime("null"))
assertNull(DateUtils.parseLocalDateTime("000000000000"))
assertNull(DateUtils.parseLocalDateTime("00000000"))
assertNull(DateUtils.parseLocalDateTime("0000-00-0"))
assertNull(DateUtils.parseLocalDateTime("0000-00-00"))
assertNull(DateUtils.parseLocalDateTimeX(null, 0, 0))
assertNull(DateUtils.parseLocalDateTimeX("", 0, 0))
assertNull(DateUtils.parseZonedDateTime(null))
assertNull(DateUtils.parseZonedDateTime(""))
assertEquals(LocalDateTime.of(2021, 7, 8, 4, 5, 6), DateUtils.parseLocalDateTime("2021-07-08T4:5:6", 0, 16))
assertEquals(LocalDateTime.of(2021, 7, 8, 4, 5, 6), DateUtils.parseLocalDateTime("2021-07-08 4:5:6", 0, 16))
assertEquals(UTC.getId(), zdt.getZone().getId())
assertEquals(ldt, zdt.toLocalDateTime())
assertEquals(UTC.getId(), zdt.getZone().getId())
assertEquals(ldt, zdt.toLocalDateTime())
assertEquals(UTC.getId(), zdt.getZone().getId())
assertEquals(ldt, zdt.toLocalDateTime())
assertEquals(UTC.getId(), zdt.getZone().getId())
assertEquals(ldt, zdt.toLocalDateTime())
assertEquals(UTC.getId(), zdt.getZone().getId())
assertEquals(ldt, zdt.toLocalDateTime())
assertEquals(UTC.getId(), zdt.getZone().getId())
assertEquals(ldt, zdt.toLocalDateTime())
assertEquals(UTC.getId(), zdt.getZone().getId())
assertEquals(ldt, actual)
assertEquals(UTC.getId(), zdt.getZone().getId())
assertEquals(ldt, zdt.toLocalDateTime())
assertEquals(UTC.getId(), zdt.getZone().getId())
assertEquals(ldt, zdt.toLocalDateTime())
assertEquals(UTC.getId(), zdt.getZone().getId())
assertEquals(ldt, zdt.toLocalDateTime())
assertEquals(DEFAULT_ZONE_ID.getId(), zdt.getZone().getId())
assertEquals(ldt, zdt.toLocalDateTime())
assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseMillis19(str, null))
assertEquals(ldt1.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseMillis19("0000-00-00 00:00:00", null))
assertEquals("2022-09-24 17:14:03.321", DateUtils.toString(date))
assertEquals("2022-09-24 17:14:03.321", DateUtils.toString(date.getTime(), false, SHANGHAI_ZONE_ID))
assertEquals("2022-09-24 17:14:03.321+08:00", DateUtils.toString(date.getTime(), true, SHANGHAI_ZONE_ID))
assertEquals("2022-09-24 09:14:03.321", DateUtils.toString(date.getTime(), false, UTC))
assertEquals("2022-09-24 09:14:03.321Z", DateUtils.toString(date.getTime(), true, UTC))
assertEquals("2022-09-24 16:14:03.321+07:00", DateUtils.toString(date.getTime(), true, ZoneId.of("GMT+7")))
assertEquals("2022-09-24 02:14:03.321-07:00", DateUtils.toString(date.getTime(), true, ZoneId.of("GMT-7")))
assertEquals("2022-09-24 17:29:03.321+08:15", DateUtils.toString(date.getTime(), true, ZoneId.of("GMT+08:15")))
assertEquals("2022-09-24 00:59:03.321-08:15", DateUtils.toString(date.getTime(), true, ZoneId.of("GMT-08:15")))
assertEquals("2022-09-24 17:14:03.001", DateUtils.toString(new Date(1664010843001L)))
assertEquals(0, DateUtils.month('J', 'u', 'a'))
assertEquals(0, DateUtils.month('J', 'a', 'a'))
assertEquals(0, DateUtils.month('F', 'a', 'a'))
assertEquals(0, DateUtils.month('F', 'e', 'a'))
assertEquals(0, DateUtils.month('A', 'e', 'a'))
assertEquals(0, DateUtils.month('A', 'p', 'a'))
assertEquals(0, DateUtils.month('M', 'p', 'a'))
assertEquals(0, DateUtils.month('M', 'a', 'a'))
assertEquals(0, DateUtils.month('J', 'a', 'a'))
assertEquals(0, DateUtils.month('J', 'u', 'a'))
assertEquals(0, DateUtils.month('A', 'a', 'a'))
assertEquals(0, DateUtils.month('A', 'u', 'a'))
assertEquals(0, DateUtils.month('S', 'u', 'a'))
assertEquals(0, DateUtils.month('S', 'e', 'a'))
assertEquals(0, DateUtils.month('O', 'e', 'a'))
assertEquals(0, DateUtils.month('O', 'c', 'a'))
assertEquals(0, DateUtils.month('N', 'c', 'a'))
assertEquals(0, DateUtils.month('N', 'o', 'a'))
assertEquals(0, DateUtils.month('D', 'o', 'a'))
assertEquals(0, DateUtils.month('D', 'e', 'a'))
assertEquals(0, DateUtils.month('K', 'e', 'a'))
assertEquals(2022, zdt.getYear())
assertEquals(12, zdt.getMonthValue())
assertEquals(7, zdt.getDayOfMonth())
assertEquals(10, zdt.getHour())
assertEquals(55, zdt.getMinute())
assertEquals(19, zdt.getSecond())
assertEquals(Fnv.hashCode64LCase("A"), Fnv.hashCode64LCase("a"))
assertEquals(Fnv.hashCode64LCase("_A"), Fnv.hashCode64LCase("a_"))
assertEquals(Fnv.hashCode64LCase("-A"), Fnv.hashCode64LCase("a-"))
assertEquals(123, bean.getId())
assertEquals(123, bean.getId())
assertEquals(123, bean.getId())
assertEquals(123, bean.getId())
assertEquals(123, bean.getId())
assertEquals(123, bean.getId())
assertEquals(true, bean.getId())
assertEquals('a', bean.getId())
assertEquals("123", bean.getId())
assertEquals("123", bean.getId())
assertSame(value, value1)
assertNotNull(stringCreatorJDK8)
assertNotNull(stringCreatorJDK11)
assertNotNull(func)
assertNotNull(func)
assertEquals(23, zdt.getDayOfMonth())
assertEquals(6, zdt.getMonthValue())
assertEquals(2012, zdt.getYear())
assertEquals(12, zdt.getHour())
assertEquals(13, zdt.getMinute())
assertEquals(14, zdt.getSecond())
assertEquals(str, beanTo.date)
assertEquals(bean.date, bean1.date)
assertEquals(bean.date, bean2.date)
assertEquals(bean.date, bean3.date)
assertSame(ZoneId.of("Asia/Shanghai").getRules(), ZoneId.of("Asia/Shanghai").getRules())
assertEquals(epochMilli, DateUtils.millis(ldt))
assertEquals(epochMilli, DateUtils.millis(ldt, DEFAULT_ZONE_ID))
assertNull(DateUtils.format((Date) null))
assertNull(DateUtils.formatYMDHMS19((Date) null))
assertNull(DateUtils.format((Date) null, "yyyy-MM-dd HH:mm:ss"))
assertEquals("2012-06-23 12:13:14", DateUtils.format(date))
assertEquals("2012-06-23 12:13:14", DateUtils.format(date, null))
assertEquals("2012-06-23 12:13:14", DateUtils.formatYMDHMS19(date))
assertEquals("2012-06-23 12:13:14", DateUtils.format(epochMilli))
assertEquals("2012-06-23 12:13:14", DateUtils.format(date, "yyyy-MM-dd HH:mm:ss"))
assertEquals("2012-06-23T12:13:14", DateUtils.format(date, "yyyy-MM-ddTHH:mm:ss"))
assertEquals("2012-06-23T12:13:14", DateUtils.format(date, "yyyy-MM-dd'T'HH:mm:ss"))
assertEquals("23.06.2012 12:13:14", DateUtils.format(date, "dd.MM.yyyy HH:mm:ss"))
assertEquals("2012-06-23", DateUtils.format(date, "yyyy-MM-dd"))
assertEquals("2012/06/23", DateUtils.format(date, "yyyy/MM/dd"))
assertEquals("23.06.2012", DateUtils.format(date, "dd.MM.yyyy"))
assertEquals("2012-6-23", DateUtils.format(date, "yyyy-M-dd"))
assertEquals("2012-Jun-23", DateUtils.format(date, "yyyy-MMM-dd"))
assertEquals("2012-06-23", DateUtils.format(date, "yyyy-MM-dd"))
assertEquals("2012-06-23", DateUtils.formatYMD10(date))
assertEquals("20120623", DateUtils.formatYMD8(date))
assertEquals("2012-06-23", DateUtils.format(2012, 6, 23))
assertEquals("2012-06-23 12:13:14", DateUtils.format(2012, 6, 23, 12, 13, 14))
assertNull(DateUtils.formatYMDHMS19((Date) null))
assertNull(DateUtils.format((ZonedDateTime) null, "yyyy-MM-dd HH:mm:ss"))
assertEquals("2012-06-23 12:13:14", DateUtils.formatYMDHMS19(zdt))
assertEquals("2012-06-23 12:13:14", DateUtils.format(zdt, "yyyy-MM-dd HH:mm:ss"))
assertEquals("2012-06-23T12:13:14", DateUtils.format(zdt, "yyyy-MM-ddTHH:mm:ss"))
assertEquals("2012-06-23T12:13:14", DateUtils.format(zdt, "yyyy-MM-dd'T'HH:mm:ss"))
assertEquals("2012-06-23", DateUtils.format(zdt, "yyyy-MM-dd"))
assertEquals("2012/06/23", DateUtils.format(zdt, "yyyy/MM/dd"))
assertEquals("23.06.2012", DateUtils.format(zdt, "dd.MM.yyyy"))
assertEquals("2012-6-23", DateUtils.format(zdt, "yyyy-M-dd"))
assertEquals("2012-Jun-23", DateUtils.format(zdt, "yyyy-MMM-dd"))
assertNull(DateUtils.formatYMDHMS19((Date) null))
assertNull(DateUtils.format((LocalDateTime) null, "yyyy-MM-dd HH:mm:ss"))
assertEquals("2012-06-23 12:13:14", DateUtils.formatYMDHMS19(ldt))
assertEquals("2012-06-23 12:13:14", DateUtils.format(ldt, "yyyy-MM-dd HH:mm:ss"))
assertEquals("2012-06-23T12:13:14", DateUtils.format(ldt, "yyyy-MM-ddTHH:mm:ss"))
assertEquals("2012-06-23T12:13:14", DateUtils.format(ldt, "yyyy-MM-dd'T'HH:mm:ss"))
assertEquals("2012-06-23", DateUtils.format(ldt, "yyyy-MM-dd"))
assertEquals("2012/06/23", DateUtils.format(ldt, "yyyy/MM/dd"))
assertEquals("23.06.2012", DateUtils.format(ldt, "dd.MM.yyyy"))
assertEquals("2012-6-23", DateUtils.format(ldt, "yyyy-M-dd"))
assertEquals("2012-Jun-23", DateUtils.format(ldt, "yyyy-MMM-dd"))
assertNull(DateUtils.formatYMDHMS19((LocalDate) null))
assertNull(DateUtils.format((LocalDate) null, "yyyy-MM-dd HH:mm:ss"))
assertEquals("2012-06-23 00:00:00", DateUtils.formatYMDHMS19(localDate))
assertEquals("2012-06-23 00:00:00", DateUtils.format(localDate, "yyyy-MM-dd HH:mm:ss"))
assertEquals("2012-06-23T00:00:00", DateUtils.format(localDate, "yyyy-MM-ddTHH:mm:ss"))
assertEquals("2012-06-23T00:00:00", DateUtils.format(localDate, "yyyy-MM-dd'T'HH:mm:ss"))
assertEquals("2012-06-23", DateUtils.format(localDate, "yyyy-MM-dd"))
assertEquals("2012/06/23", DateUtils.format(localDate, "yyyy/MM/dd"))
assertEquals("23.06.2012", DateUtils.format(localDate, "dd.MM.yyyy"))
assertEquals("2012-6-23", DateUtils.format(localDate, "yyyy-M-dd"))
assertEquals("2012-Jun-23", DateUtils.format(localDate, "yyyy-MMM-dd"))
assertEquals(ldt.atZone(ZoneOffset.UTC).toInstant().toEpochMilli(), utcMillis)
assertNull(DateUtils.formatYMD8((Date) null))
assertNull(DateUtils.formatYMD8((LocalDate) null))
assertNull(DateUtils.formatYMD8((Date) null))
assertNull(DateUtils.formatYMD10((Date) null))
assertNull(DateUtils.formatYMD10((LocalDate) null))
assertNull(DateUtils.formatYMD10((Date) null))
assertEquals("NaN", RyuDouble.toString(Double.NaN))
assertEquals("Infinity", RyuDouble.toString(Double.POSITIVE_INFINITY))
assertEquals("-Infinity", RyuDouble.toString(Double.NEGATIVE_INFINITY))
assertEquals("-0.0", RyuDouble.toString(-0.0))
assertEquals("NaN", toString(Double.NaN))
assertEquals("Infinity", toString(Double.POSITIVE_INFINITY))
assertEquals("-Infinity", toString(Double.NEGATIVE_INFINITY))
assertEquals("-0.0", toString(-0.0))
assertNull(ApacheLang3Support.TripleMixIn.of(null, null, null))
assertTrue(Differ.diff(1, 1))
assertTrue(Differ.diff("a", "a"))
assertTrue(Differ.diff(new Object[] { "a", 1 }, new Object[] { "a", 1 }))
assertTrue(Differ.diff(Collections.singletonMap("a", "101"), Collections.singletonMap("a", "101")))
assertTrue(Differ.diff(Collections.singleton("a"), Collections.singleton("a")))
assertTrue(Differ.diff(Collections.singletonList("a"), Collections.singletonList("a")))
assertEquals("left", differ.getLeftName())
assertEquals("right", differ.getRightName())
assertTrue(differ.isReferenceDetect())
assertTrue(differ.isSkipTransient())
assertNull(differ.getOut())
assertNull(differ.getComparator())
assertTrue(Differ.diff(new Bean(1), new Bean(1)))
assertTrue(Differ.diff(new Bean2("a"), new Bean2("a")))
assertTrue(Differ.diff(new Bean2(null), new Bean2(null)))
assertEquals(Long.toString(Long.MAX_VALUE), toString(Long.MAX_VALUE))
assertEquals(Long.toString(Long.MAX_VALUE), toString1(Long.MAX_VALUE))
assertEquals(str, str2)
assertEquals(-1, result)
assertEquals(0F, provider.getTypeConvert(String.class, float.class).apply(""))
assertEquals(0D, provider.getTypeConvert(String.class, double.class).apply(""))
assertEquals(Byte.valueOf((byte) 0), provider.getTypeConvert(String.class, byte.class).apply(""))
assertEquals(Short.valueOf((short) 0), provider.getTypeConvert(String.class, short.class).apply(""))
assertEquals(0, provider.getTypeConvert(String.class, int.class).apply(""))
assertEquals(0L, provider.getTypeConvert(String.class, long.class).apply(""))
assertEquals(Boolean.FALSE, provider.getTypeConvert(String.class, boolean.class).apply(""))
assertNull(provider.getTypeConvert(String.class, Integer.class).apply(""))
assertNull(provider.getTypeConvert(String.class, Long.class).apply(""))
assertEquals(0F, provider.getTypeConvert(String.class, float.class).apply("null"))
assertEquals(0D, provider.getTypeConvert(String.class, double.class).apply("null"))
assertEquals(Byte.valueOf((byte) 0), provider.getTypeConvert(String.class, byte.class).apply("null"))
assertEquals(Short.valueOf((short) 0), provider.getTypeConvert(String.class, short.class).apply("null"))
assertEquals(0, provider.getTypeConvert(String.class, int.class).apply("null"))
assertEquals(0L, provider.getTypeConvert(String.class, long.class).apply("null"))
assertEquals(Boolean.FALSE, provider.getTypeConvert(String.class, boolean.class).apply("null"))
assertNull(provider.getTypeConvert(String.class, Integer.class).apply("null"))
assertNull(provider.getTypeConvert(String.class, Long.class).apply("null"))
assertEquals(0F, provider.getTypeConvert(String.class, float.class).apply(null))
assertEquals(0D, provider.getTypeConvert(String.class, double.class).apply(null))
assertEquals(Byte.valueOf((byte) 0), provider.getTypeConvert(String.class, byte.class).apply(null))
assertEquals(Short.valueOf((short) 0), provider.getTypeConvert(String.class, short.class).apply(null))
assertEquals(0, provider.getTypeConvert(String.class, int.class).apply(null))
assertEquals(0L, provider.getTypeConvert(String.class, long.class).apply(null))
assertEquals(Boolean.FALSE, provider.getTypeConvert(String.class, boolean.class).apply(null))
assertNull(provider.getTypeConvert(String.class, Integer.class).apply(null))
assertNull(provider.getTypeConvert(String.class, Long.class).apply(null))
assertEquals(1, provider.getTypeConvert(String.class, Integer.class).apply("1"))
assertEquals(1L, provider.getTypeConvert(String.class, Long.class).apply("1"))
assertNull(TypeUtils.parseInt(new byte[0], 0, 0))
assertNull(TypeUtils.parseBigDecimal(new byte[0], 0, 0))
assertNull(TypeUtils.parseLong(new byte[0], 0, 0))
assertNull(TypeUtils.parseBoolean(new byte[0], 0, 0))
assertSame(class0, class1)
assertEquals(XxHash64.hash(1), XxHash64.hash(1F))
assertEquals(XxHash64.hash(1), XxHash64.hash(1D))
assertEquals(XxHash64.hash(1), XxHash64.hash(BigInteger.ONE))
assertEquals(XxHash64.hash("92233720368547758079223372036854775807"), XxHash64.hash(new BigInteger("92233720368547758079223372036854775807")))
assertEquals(XxHash64.hash(1), XxHash64.hash(BigDecimal.ONE))
assertEquals(XxHash64.hash("2.1"), XxHash64.hash(new BigDecimal("2.1")))
assertEquals(XxHash64.hash(new BigDecimal("2.100")), XxHash64.hash(new BigDecimal("2.1000")))
assertTrue(JdbcSupport.isClob(MyClob.class))
assertTrue(JdbcSupport.isClob(MyClob.class))
assertTrue(JdbcSupport.isClob(java.sql.Clob.class))
assertTrue(JdbcSupport.isClob(java.sql.Clob.class))
assertEquals("\"abc\"", JSON.toJSONString(clob))
assertEquals("\"abc\"", JSON.toJSONString(clob, JSONWriter.Feature.PrettyFormat))
assertSame(Map.class, paramType.getRawType())
assertEquals("NaN", RyuFloat.toString(Float.NaN))
assertEquals("Infinity", RyuFloat.toString(Float.POSITIVE_INFINITY))
assertEquals("-Infinity", RyuFloat.toString(Float.NEGATIVE_INFINITY))
assertEquals("-0.0", RyuFloat.toString(-0.0F))
assertEquals("NaN", toString(Float.NaN))
assertEquals("Infinity", toString(Float.POSITIVE_INFINITY))
assertEquals("-Infinity", toString(Float.NEGATIVE_INFINITY))
assertEquals("-0.0", toString(-0.0F))
assertEquals("userName", BeanUtils.fieldName("UserName", PropertyNamingStrategy.CamelCase.name()))
assertEquals("userName", BeanUtils.fieldName("userName", PropertyNamingStrategy.CamelCase.name()))
assertEquals("userName", BeanUtils.fieldName("UserName", PropertyNamingStrategy.NeverUseThisValueExceptDefaultValue.name()))
assertEquals("UserName", BeanUtils.fieldName("UserName", PropertyNamingStrategy.PascalCase.name()))
assertEquals("UserName", BeanUtils.fieldName("userName", PropertyNamingStrategy.PascalCase.name()))
assertEquals("user-name", BeanUtils.fieldName("userName", PropertyNamingStrategy.LowerCaseWithDashes.name()))
assertEquals("user-name", BeanUtils.fieldName("UserName", PropertyNamingStrategy.LowerCaseWithDashes.name()))
assertEquals("User-Name", BeanUtils.fieldName("userName", PropertyNamingStrategy.UpperCamelCaseWithDashes.name()))
assertEquals("User-Name", BeanUtils.fieldName("UserName", PropertyNamingStrategy.UpperCamelCaseWithDashes.name()))
assertEquals("user-name", BeanUtils.fieldName("UserName", PropertyNamingStrategy.LowerCaseWithDashes.name()))
assertEquals("user-name", BeanUtils.fieldName("userName", PropertyNamingStrategy.LowerCaseWithDashes.name()))
assertEquals("USER-NAME", BeanUtils.fieldName("UserName", PropertyNamingStrategy.UpperCaseWithDashes.name()))
assertEquals("USER-NAME", BeanUtils.fieldName("userName", PropertyNamingStrategy.UpperCaseWithDashes.name()))
assertEquals("A-U-R-L", BeanUtils.fieldName("aURL", PropertyNamingStrategy.UpperCaseWithDashes.name()))
assertEquals("_SOME-FIELD-NAME", BeanUtils.fieldName("_someFieldName", PropertyNamingStrategy.UpperCaseWithDashes.name()))
assertEquals("some.field.name", BeanUtils.fieldName("someFieldName", PropertyNamingStrategy.LowerCaseWithDots.name()))
assertEquals("user.name", BeanUtils.fieldName("userName", PropertyNamingStrategy.LowerCaseWithDots.name()))
assertEquals("a.u.r.l", BeanUtils.fieldName("aURL", PropertyNamingStrategy.LowerCaseWithDots.name()))
assertEquals("_some.field.name", BeanUtils.fieldName("_someFieldName", PropertyNamingStrategy.LowerCaseWithDots.name()))
assertEquals("SOME.FIELD.NAME", BeanUtils.fieldName("someFieldName", PropertyNamingStrategy.UpperCaseWithDots.name()))
assertEquals("USER.NAME", BeanUtils.fieldName("userName", PropertyNamingStrategy.UpperCaseWithDots.name()))
assertEquals("A.U.R.L", BeanUtils.fieldName("aURL", PropertyNamingStrategy.UpperCaseWithDots.name()))
assertEquals("_SOME.FIELD.NAME", BeanUtils.fieldName("_someFieldName", PropertyNamingStrategy.UpperCaseWithDots.name()))
assertEquals("id", BeanUtils.setterName("id", "PascalCase"))
assertEquals("Id", BeanUtils.setterName("setId", "PascalCase"))
assertEquals("USERID", BeanUtils.setterName("setUserId", "UpperCase"))
assertEquals("USER_ID", BeanUtils.setterName("setUserId", "UpperCaseWithUnderScores"))
assertEquals("USER_ID", BeanUtils.getterName("getUserId", "UpperCaseWithUnderScores"))
assertEquals("better", BeanUtils.getterName("isBetter", "KebabCase"))
assertEquals("user-id", BeanUtils.getterName("getUserId", "KebabCase"))
assertEquals("id", BeanUtils.getterName("id", "KebabCase"))
assertEquals("Id", BeanUtils.getterName("id", "PascalCase"))
assertEquals("user_id", BeanUtils.getterName("getUserId", "SnakeCase"))
assertEquals("User Id", BeanUtils.getterName("getUserId", "UpperCamelCaseWithSpaces"))
assertEquals("USER-ID", BeanUtils.getterName("getUserId", "UpperCaseWithDashes"))
assertEquals("USER.ID", BeanUtils.getterName("getUserId", "UpperCaseWithDots"))
assertEquals(Number.class, BeanUtils.subtypeOf(Number.class).getUpperBounds()[0])
assertEquals(Number.class, BeanUtils.subtypeOf(BeanUtils.subtypeOf(Number.class)).getUpperBounds()[0])
assertEquals(Number.class, BeanUtils.supertypeOf(Number.class).getLowerBounds()[0])
assertEquals(Number.class, BeanUtils.supertypeOf(BeanUtils.supertypeOf(Number.class)).getLowerBounds()[0])
assertTrue(object1O.isEmpty())
assertTrue(BeanUtils.equals(actualTypeArgument0, actualTypeArgument1))
assertEquals(wildcardType0, wildcardType1)
assertEquals("? super java.lang.Object", wildcardType0.toString())
assertEquals("?", new BeanUtils.WildcardTypeImpl(new Type[] { Object.class }, new Type[] {}).toString())
assertEquals("java.lang.Object", parameterizedType.toString())
assertEquals("java.util.List<E>", BeanUtils.getGenericSupertype(ArrayList.class, ArrayList.class, List.class).toString())
assertEquals(Object.class, BeanUtils.getRawType(wildcardType))
assertEquals(1, list.size())
assertEquals(4, list.size())
assertEquals(0, list.size())
assertFalse(reader.nextIfMatch(','))
assertFalse(provider.unregisterObjectReader(Bean.class, reader))
assertFalse(provider.register(modoule))
assertFalse(provider.unregister(modoule1))
assertFalse(provider.register(modoule1))
assertFalse(provider.unregister(modoule))
assertFalse(provider.unregister(modoule1))
assertFalse(JSON.parseObject("{\"value\":0}", Bean.class, NonZeroNumberCastToBooleanAsTrue).value)
assertFalse(JSON.parseObject("{\"value\":false}", Bean.class, NonZeroNumberCastToBooleanAsTrue).value)
assertFalse(JSON.parseObject("{\"value\":0}").toJavaObject(Bean.class, NonZeroNumberCastToBooleanAsTrue).value)
assertFalse(JSON.parseObject("{\"value\":false}").toJavaObject(Bean.class, NonZeroNumberCastToBooleanAsTrue).value)
assertFalse(JSONFactory.isUseJacksonAnnotation())
assertFalse((Boolean) JSONB.parseObject(jsonbBytes, Object.class))
assertFalse(o.isEmpty())
assertFalse(Differ.diff("abc", "aac"))
assertFalse(Differ.diff(Collections.singletonMap("a", "101"), Collections.singletonMap("b", "101")))
assertFalse(differ.diff())
assertFalse(Differ.diff(Collections.singletonMap("a", 101), Collections.emptyMap()))
assertFalse(Differ.diff(JSONObject.of("a", 101), JSONObject.of()))
assertFalse(Differ.diff(JSONObject.of("a", 101).keySet(), JSONObject.of().keySet()))
assertFalse(Differ.diff(new Bean(1), new Bean(2)))
assertFalse(Differ.diff(new Bean2("a"), new Bean2("b")))
assertFalse(Differ.diff(new Bean2("ab"), new Bean2("b")))
assertFalse(Differ.diff(new Bean2("ab"), new Bean2("ac")))
assertFalse(Differ.diff(new Bean2("abc"), new Bean2(null)))
assertFalse(Differ.diff(new Bean2(null), new Bean2("abc")))
assertFalse(JdbcSupport.isClob(Object.class))
assertFalse(JdbcSupport.isClob(Object.class))
assertFalse(BeanUtils.equals(actualTypeArgument0, Object.class))
assertFalse(BeanUtils.equals(f.getGenericReturnType(), Object.class))
assertFalse(BeanUtils.equals(new BeanUtils.GenericArrayTypeImpl(Object.class), Object.class))
assertFalse(BeanUtils.equals(f2.getGenericReturnType(), f3.getGenericReturnType()))
assertFalse(BeanUtils.equals(f2.getGenericReturnType(), Object.class))
assertFalse(BeanUtils.equals(f2.getGenericReturnType(), f4.getGenericReturnType()))
assertEquals(123, JSON.parseObject("123", OptionalInt.class).getAsInt())
assertEquals(123, JSON.parseObject("123.0", OptionalInt.class).getAsInt())
assertEquals(123, JSON.parseObject("'123'", OptionalInt.class).getAsInt())
assertEquals(123, JSON.parseObject("\"123\"", OptionalInt.class).getAsInt())
assertFalse(JSON.parseObject("\"\"", OptionalInt.class).isPresent())
assertFalse(JSON.parseObject("''", OptionalInt.class).isPresent())
assertFalse(JSON.parseObject("null", OptionalInt.class).isPresent())
assertEquals(123, JSON.parseObject("123", OptionalLong.class).getAsLong())
assertEquals(123, JSON.parseObject("123.0", OptionalLong.class).getAsLong())
assertEquals(123, JSON.parseObject("'123'", OptionalLong.class).getAsLong())
assertEquals(123, JSON.parseObject("\"123\"", OptionalLong.class).getAsLong())
assertFalse(JSON.parseObject("\"\"", OptionalLong.class).isPresent())
assertFalse(JSON.parseObject("''", OptionalLong.class).isPresent())
assertFalse(JSON.parseObject("null", OptionalLong.class).isPresent())
assertEquals(123, JSON.parseObject("123", OptionalDouble.class).getAsDouble())
assertEquals(123, JSON.parseObject("123.0", OptionalDouble.class).getAsDouble())
assertEquals(123, JSON.parseObject("'123'", OptionalDouble.class).getAsDouble())
assertEquals(123, JSON.parseObject("\"123\"", OptionalDouble.class).getAsDouble())
assertFalse(JSON.parseObject("\"\"", OptionalDouble.class).isPresent())
assertFalse(JSON.parseObject("''", OptionalDouble.class).isPresent())
assertFalse(JSON.parseObject("null", OptionalDouble.class).isPresent())
assertEquals(Integer.valueOf(123), new TypeReference<Optional<Integer>>() {
}.parseObject("\"123\"").get())
assertEquals(Integer.valueOf(123), new TypeReference<Optional<Integer>>() {
}.parseObject("'123'").get())
assertEquals(Integer.valueOf(123), new TypeReference<Optional<Integer>>() {
}.parseObject("123").get())
assertEquals(Integer.valueOf(123), new TypeReference<Optional<Integer>>() {
}.parseObject("123.0").get())
assertFalse(new TypeReference<Optional<Integer>>() {
}.parseObject("null").isPresent())
assertFalse(new TypeReference<Optional<Integer>>() {
}.parseObject("\"\"").isPresent())
assertFalse(new TypeReference<Optional<Integer>>() {
}.parseObject("''").isPresent())
assertEquals(Integer.valueOf(123), new TypeReference<Optional<Integer>>() {
}.parseObject("\"123\"".getBytes(StandardCharsets.UTF_8)).get())
assertEquals(Integer.valueOf(123), new TypeReference<Optional<Integer>>() {
}.parseObject("'123'".getBytes(StandardCharsets.UTF_8)).get())
assertEquals(Integer.valueOf(123), new TypeReference<Optional<Integer>>() {
}.parseObject("123".getBytes(StandardCharsets.UTF_8)).get())
assertEquals(Integer.valueOf(123), new TypeReference<Optional<Integer>>() {
}.parseObject("123.0".getBytes(StandardCharsets.UTF_8)).get())
assertFalse(new TypeReference<Optional<Integer>>() {
}.parseObject("null".getBytes(StandardCharsets.UTF_8)).isPresent())
assertFalse(new TypeReference<Optional<Integer>>() {
}.parseObject("\"\"".getBytes(StandardCharsets.UTF_8)).isPresent())
assertFalse(new TypeReference<Optional<Integer>>() {
}.parseObject("''".getBytes(StandardCharsets.UTF_8)).isPresent())
assertEquals(Long.valueOf(123), new TypeReference<Optional<Long>>() {
}.parseObject("\"123\"").get())
assertEquals(Long.valueOf(123), new TypeReference<Optional<Long>>() {
}.parseObject("'123'").get())
assertEquals(Long.valueOf(123), new TypeReference<Optional<Long>>() {
}.parseObject("123").get())
assertEquals(Long.valueOf(123), new TypeReference<Optional<Long>>() {
}.parseObject("123.0").get())
assertFalse(new TypeReference<Optional<Long>>() {
}.parseObject("null").isPresent())
assertFalse(new TypeReference<Optional<Long>>() {
}.parseObject("\"\"").isPresent())
assertFalse(new TypeReference<Optional<Long>>() {
}.parseObject("''").isPresent())
assertEquals(Long.valueOf(123), new TypeReference<Optional<Long>>() {
}.parseObject("\"123\"".getBytes(StandardCharsets.UTF_8)).get())
assertEquals(Long.valueOf(123), new TypeReference<Optional<Long>>() {
}.parseObject("'123'".getBytes(StandardCharsets.UTF_8)).get())
assertEquals(Long.valueOf(123), new TypeReference<Optional<Long>>() {
}.parseObject("123".getBytes(StandardCharsets.UTF_8)).get())
assertEquals(Long.valueOf(123), new TypeReference<Optional<Long>>() {
}.parseObject("123.0".getBytes(StandardCharsets.UTF_8)).get())
assertFalse(new TypeReference<Optional<Long>>() {
}.parseObject("null".getBytes(StandardCharsets.UTF_8)).isPresent())
assertFalse(new TypeReference<Optional<Long>>() {
}.parseObject("\"\"".getBytes(StandardCharsets.UTF_8)).isPresent())
assertFalse(new TypeReference<Optional<Long>>() {
}.parseObject("''".getBytes(StandardCharsets.UTF_8)).isPresent())
assertEquals(Float.valueOf(123), new TypeReference<Optional<Float>>() {
}.parseObject("\"123\"").get())
assertEquals(Float.valueOf(123), new TypeReference<Optional<Float>>() {
}.parseObject("'123'").get())
assertEquals(Float.valueOf(123), new TypeReference<Optional<Float>>() {
}.parseObject("123").get())
assertEquals(Float.valueOf(123), new TypeReference<Optional<Float>>() {
}.parseObject("123.0").get())
assertFalse(new TypeReference<Optional<Float>>() {
}.parseObject("null").isPresent())
assertFalse(new TypeReference<Optional<Float>>() {
}.parseObject("\"\"").isPresent())
assertFalse(new TypeReference<Optional<Float>>() {
}.parseObject("''").isPresent())
assertEquals(Float.valueOf(123), new TypeReference<Optional<Float>>() {
}.parseObject("\"123\"".getBytes(StandardCharsets.UTF_8)).get())
assertEquals(Float.valueOf(123), new TypeReference<Optional<Float>>() {
}.parseObject("'123'".getBytes(StandardCharsets.UTF_8)).get())
assertEquals(Float.valueOf(123), new TypeReference<Optional<Float>>() {
}.parseObject("123".getBytes(StandardCharsets.UTF_8)).get())
assertEquals(Float.valueOf(123), new TypeReference<Optional<Float>>() {
}.parseObject("123.0".getBytes(StandardCharsets.UTF_8)).get())
assertFalse(new TypeReference<Optional<Float>>() {
}.parseObject("null".getBytes(StandardCharsets.UTF_8)).isPresent())
assertFalse(new TypeReference<Optional<Float>>() {
}.parseObject("\"\"".getBytes(StandardCharsets.UTF_8)).isPresent())
assertFalse(new TypeReference<Optional<Float>>() {
}.parseObject("''".getBytes(StandardCharsets.UTF_8)).isPresent())
assertEquals(Double.valueOf(123), new TypeReference<Optional<Double>>() {
}.parseObject("\"123\"").get())
assertEquals(Double.valueOf(123), new TypeReference<Optional<Double>>() {
}.parseObject("'123'").get())
assertEquals(Double.valueOf(123), new TypeReference<Optional<Double>>() {
}.parseObject("123").get())
assertEquals(Double.valueOf(123), new TypeReference<Optional<Double>>() {
}.parseObject("123.0").get())
assertFalse(new TypeReference<Optional<Double>>() {
}.parseObject("null").isPresent())
assertFalse(new TypeReference<Optional<Double>>() {
}.parseObject("\"\"").isPresent())
assertFalse(new TypeReference<Optional<Double>>() {
}.parseObject("''").isPresent())
assertEquals(Double.valueOf(123), new TypeReference<Optional<Double>>() {
}.parseObject("\"123\"".getBytes(StandardCharsets.UTF_8)).get())
assertEquals(Double.valueOf(123), new TypeReference<Optional<Double>>() {
}.parseObject("'123'".getBytes(StandardCharsets.UTF_8)).get())
assertEquals(Double.valueOf(123), new TypeReference<Optional<Double>>() {
}.parseObject("123".getBytes(StandardCharsets.UTF_8)).get())
assertEquals(Double.valueOf(123), new TypeReference<Optional<Double>>() {
}.parseObject("123.0".getBytes(StandardCharsets.UTF_8)).get())
assertFalse(new TypeReference<Optional<Double>>() {
}.parseObject("null".getBytes(StandardCharsets.UTF_8)).isPresent())
assertFalse(new TypeReference<Optional<Double>>() {
}.parseObject("\"\"".getBytes(StandardCharsets.UTF_8)).isPresent())
assertFalse(new TypeReference<Optional<Double>>() {
}.parseObject("''".getBytes(StandardCharsets.UTF_8)).isPresent())
assertEquals(BigDecimal.valueOf(123), new TypeReference<Optional<BigDecimal>>() {
}.parseObject("\"123\"").get())
assertEquals(BigDecimal.valueOf(123), new TypeReference<Optional<BigDecimal>>() {
}.parseObject("'123'").get())
assertEquals(BigDecimal.valueOf(123), new TypeReference<Optional<BigDecimal>>() {
}.parseObject("123").get())
assertEquals(new BigDecimal("123.0"), new TypeReference<Optional<BigDecimal>>() {
}.parseObject("123.0").get())
assertFalse(new TypeReference<Optional<BigDecimal>>() {
}.parseObject("null").isPresent())
assertFalse(new TypeReference<Optional<BigDecimal>>() {
}.parseObject("\"\"").isPresent())
assertFalse(new TypeReference<Optional<BigDecimal>>() {
}.parseObject("''").isPresent())
assertEquals(BigDecimal.valueOf(123), new TypeReference<Optional<BigDecimal>>() {
}.parseObject("\"123\"".getBytes(StandardCharsets.UTF_8)).get())
assertEquals(BigDecimal.valueOf(123), new TypeReference<Optional<BigDecimal>>() {
}.parseObject("'123'".getBytes(StandardCharsets.UTF_8)).get())
assertEquals(BigDecimal.valueOf(123), new TypeReference<Optional<BigDecimal>>() {
}.parseObject("123".getBytes(StandardCharsets.UTF_8)).get())
assertEquals(new BigDecimal("123.0"), new TypeReference<Optional<BigDecimal>>() {
}.parseObject("123.0".getBytes(StandardCharsets.UTF_8)).get())
assertFalse(new TypeReference<Optional<BigDecimal>>() {
}.parseObject("null".getBytes(StandardCharsets.UTF_8)).isPresent())
assertFalse(new TypeReference<Optional<BigDecimal>>() {
}.parseObject("\"\"".getBytes(StandardCharsets.UTF_8)).isPresent())
assertFalse(new TypeReference<Optional<BigDecimal>>() {
}.parseObject("''".getBytes(StandardCharsets.UTF_8)).isPresent())
assertEquals(Integer.valueOf(123), JSON.parseObject("{\"value\":\"123\"}}".getBytes(StandardCharsets.UTF_8), Bean_Integer.class, JSONReader.Feature.IgnoreCheckClose).value.get())
assertEquals(Integer.valueOf(123), JSON.parseObject("{\"value\":'123'}}".getBytes(StandardCharsets.UTF_8), Bean_Integer.class, JSONReader.Feature.IgnoreCheckClose).value.get())
assertEquals(Integer.valueOf(123), JSON.parseObject("{\"value\":123}}".getBytes(StandardCharsets.UTF_8), Bean_Integer.class, JSONReader.Feature.IgnoreCheckClose).value.get())
assertEquals(Integer.valueOf(123), JSON.parseObject("{\"value\":123.}}".getBytes(StandardCharsets.UTF_8), Bean_Integer.class, JSONReader.Feature.IgnoreCheckClose).value.get())
assertEquals(Integer.valueOf(123), JSON.parseObject("{\"value\":123.0}}".getBytes(StandardCharsets.UTF_8), Bean_Integer.class, JSONReader.Feature.IgnoreCheckClose).value.get())
assertFalse(JSON.parseObject("{\"value\":\"\"}}".getBytes(StandardCharsets.UTF_8), Bean_Integer.class, JSONReader.Feature.IgnoreCheckClose).value.isPresent())
assertFalse(JSON.parseObject("{\"value\":''}}".getBytes(StandardCharsets.UTF_8), Bean_Integer.class, JSONReader.Feature.IgnoreCheckClose).value.isPresent())
assertFalse(JSON.parseObject("{\"value\":null}}".getBytes(StandardCharsets.UTF_8), Bean_Integer.class, JSONReader.Feature.IgnoreCheckClose).value.isPresent())
assertEquals(Integer.valueOf(123), JSON.parseObject("{\"value\":\"123\"}", Bean_Integer.class).value.get())
assertEquals(Integer.valueOf(123), JSON.parseObject("{\"value\":'123'}", Bean_Integer.class).value.get())
assertEquals(Integer.valueOf(123), JSON.parseObject("{\"value\":123}", Bean_Integer.class).value.get())
assertEquals(Integer.valueOf(123), JSON.parseObject("{\"value\":123.}", Bean_Integer.class).value.get())
assertEquals(Integer.valueOf(123), JSON.parseObject("{\"value\":123.0}", Bean_Integer.class).value.get())
assertFalse(JSON.parseObject("{\"value\":\"\"}", Bean_Integer.class).value.isPresent())
assertFalse(JSON.parseObject("{\"value\":''}", Bean_Integer.class).value.isPresent())
assertFalse(JSON.parseObject("{\"value\":null}", Bean_Integer.class).value.isPresent())
assertEquals(Long.valueOf(123), JSON.parseObject("{\"value\":\"123\"}".getBytes(StandardCharsets.UTF_8), Bean_Long.class).value.get())
assertEquals(Long.valueOf(123), JSON.parseObject("{\"value\":'123'}".getBytes(StandardCharsets.UTF_8), Bean_Long.class).value.get())
assertEquals(Long.valueOf(123), JSON.parseObject("{\"value\":123}".getBytes(StandardCharsets.UTF_8), Bean_Long.class).value.get())
assertEquals(Long.valueOf(123), JSON.parseObject("{\"value\":123.}".getBytes(StandardCharsets.UTF_8), Bean_Long.class).value.get())
assertEquals(Long.valueOf(123), JSON.parseObject("{\"value\":123.0}".getBytes(StandardCharsets.UTF_8), Bean_Long.class).value.get())
assertFalse(JSON.parseObject("{\"value\":\"\"}".getBytes(StandardCharsets.UTF_8), Bean_Long.class).value.isPresent())
assertFalse(JSON.parseObject("{\"value\":''}".getBytes(StandardCharsets.UTF_8), Bean_Long.class).value.isPresent())
assertFalse(JSON.parseObject("{\"value\":null}".getBytes(StandardCharsets.UTF_8), Bean_Long.class).value.isPresent())
assertEquals(Long.valueOf(123), JSON.parseObject("{\"value\":\"123\"}", Bean_Long.class).value.get())
assertEquals(Long.valueOf(123), JSON.parseObject("{\"value\":'123'}", Bean_Long.class).value.get())
assertEquals(Long.valueOf(123), JSON.parseObject("{\"value\":123}", Bean_Long.class).value.get())
assertEquals(Long.valueOf(123), JSON.parseObject("{\"value\":123.}", Bean_Long.class).value.get())
assertEquals(Long.valueOf(123), JSON.parseObject("{\"value\":123.0}", Bean_Long.class).value.get())
assertFalse(JSON.parseObject("{\"value\":\"\"}", Bean_Long.class).value.isPresent())
assertFalse(JSON.parseObject("{\"value\":''}", Bean_Long.class).value.isPresent())
assertFalse(JSON.parseObject("{\"value\":null}", Bean_Long.class).value.isPresent())
assertEquals(Optional.class, JSONFactory.getDefaultObjectReaderProvider().getObjectReader(Optional.class).getObjectClass())
assertEquals(2, extract.size())
assertEquals("{\"key\":\"value\"}", JSON.toJSONString(o))
assertEquals("{\"name\":\"hello 世界\",\"properties\":\"{\\\"color\\\":\\\"红色\\\",\\\"size\\\":66}\"}", json)
assertNotNull(deserializedModel)
assertEquals("hello 世界", deserializedModel.getName())
assertNotNull(deserializedModel.getProperties())
assertEquals("红色", deserializedModel.getProperties().getColor())
assertEquals(66, deserializedModel.getProperties().getSize())
assertNotNull(error)
assertEquals("parseInt error", error.getMessage())
assertNotNull(error)
assertEquals("parseInt error, field : value", error.getMessage())
assertNotNull(error)
assertEquals("parseInt error : 9295260120", error.getMessage())
assertEquals(out, JSON.toJSONString(model))
assertEquals(out, JSON.toJSONString(model))
assertEquals(out, JSON.toJSONString(model))
assertEquals(out, JSON.toJSONString(model))
assertEquals(Date.class, jsonObject.get("UpdateTime").getClass())
assertEquals(" 1001 ", v.id)
assertEquals(" 1001 ", v.id)
assertEquals("1001", v.id)
assertEquals("1001", v.id)
assertNotNull(personCollection)
assertEquals(2, personCollection.size())
assertEquals("tom", personCollection.get("123456").getName())
assertEquals("jack", personCollection.get("123457").getName())
assertNotNull(json2)
assertNotNull(personCollection)
assertEquals(2, personCollection.size())
assertEquals(2, personCollection.get("张三").size())
assertEquals("123", personCollection.get("张三").get(0).getIdNo())
assertEquals("张三", personCollection.get("张三").get(0).getName())
assertEquals("124", personCollection.get("张三").get(1).getIdNo())
assertEquals("张三", personCollection.get("张三").get(1).getName())
assertEquals(2, personCollection.get("李四").size())
assertEquals("223", personCollection.get("李四").get(0).getIdNo())
assertEquals("李四", personCollection.get("李四").get(0).getName())
assertEquals("224", personCollection.get("李四").get(1).getIdNo())
assertEquals("李四", personCollection.get("李四").get(1).getName())
assertNotNull(json2)
assertNotNull(personCollection)
assertEquals(2, personCollection.size())
assertEquals(2, personCollection.get("张三").length)
assertEquals("123", personCollection.get("张三")[0].getIdNo())
assertEquals("张三", personCollection.get("张三")[0].getName())
assertEquals("124", personCollection.get("张三")[1].getIdNo())
assertEquals("张三", personCollection.get("张三")[1].getName())
assertEquals(2, personCollection.get("李四").length)
assertEquals("223", personCollection.get("李四")[0].getIdNo())
assertEquals("李四", personCollection.get("李四")[0].getName())
assertEquals("224", personCollection.get("李四")[1].getIdNo())
assertEquals("李四", personCollection.get("李四")[1].getName())
assertNotNull(json2)
assertNotNull(personCollection)
assertEquals(2, personCollection.size())
assertEquals(2, personCollection.get("张三").length)
assertEquals("123", personCollection.get("张三")[0].get("idNo"))
assertEquals("张三", personCollection.get("张三")[0].get("name"))
assertEquals("124", personCollection.get("张三")[1].get("idNo"))
assertEquals("张三", personCollection.get("张三")[1].get("name"))
assertEquals(2, personCollection.get("李四").length)
assertEquals("223", personCollection.get("李四")[0].get("idNo"))
assertEquals("李四", personCollection.get("李四")[0].get("name"))
assertEquals("224", personCollection.get("李四")[1].get("idNo"))
assertEquals("李四", personCollection.get("李四")[1].get("name"))
assertNotNull(json2)
assertNotNull(personCollection)
assertEquals(2, personCollection.size())
assertEquals(2, personCollection.get("张三").length)
assertEquals(2, personCollection.get("张三")[0].get("idNo").length)
assertEquals("123", personCollection.get("张三")[0].get("idNo")[0])
assertEquals("123x", personCollection.get("张三")[0].get("idNo")[1])
assertEquals(2, personCollection.get("张三")[0].get("name").length)
assertEquals("张三", personCollection.get("张三")[0].get("name")[0])
assertEquals("张三一", personCollection.get("张三")[0].get("name")[1])
assertEquals(2, personCollection.get("张三")[1].get("idNo").length)
assertEquals("124", personCollection.get("张三")[1].get("idNo")[0])
assertEquals("124x", personCollection.get("张三")[1].get("idNo")[1])
assertEquals(2, personCollection.get("张三")[1].get("name").length)
assertEquals("张三", personCollection.get("张三")[1].get("name")[0])
assertEquals("张三一", personCollection.get("张三")[1].get("name")[1])
assertEquals(2, personCollection.get("李四").length)
assertEquals(2, personCollection.get("李四")[0].get("idNo").length)
assertEquals("223", personCollection.get("李四")[0].get("idNo")[0])
assertEquals("223y", personCollection.get("李四")[0].get("idNo")[1])
assertEquals(2, personCollection.get("李四")[0].get("name").length)
assertEquals("李四", personCollection.get("李四")[0].get("name")[0])
assertEquals("李小四", personCollection.get("李四")[0].get("name")[1])
assertEquals(2, personCollection.get("李四")[1].get("idNo").length)
assertEquals("224", personCollection.get("李四")[1].get("idNo")[0])
assertEquals("224y", personCollection.get("李四")[1].get("idNo")[1])
assertEquals(2, personCollection.get("李四")[1].get("name").length)
assertEquals("李四", personCollection.get("李四")[1].get("name")[0])
assertEquals("李小四", personCollection.get("李四")[1].get("name")[1])
assertNotNull(json2)
assertEquals(3, m.id)
assertEquals(42356, JSONPath.eval(root, jsonpath))
assertEquals("{\"dependencies\":[{\"values\":[]}]}", jsonObject.toString())
assertEquals("{\"dependencies\":[]}", jsonObject.toString())
assertEquals("{\"values\":[]}", jsonObject.toString())
assertTrue(JSONPath.remove(jsonObject, "$.values[?(@.name=='Demo')]"))
assertEquals("{}", jsonObject.toString())
assertEquals("{\"id\":1001,\"name\":\"wenshao\"}", JSON.toJSONString(b))
assertNotNull(floorV2)
assertEquals("x123", floorV2.templateId)
assertEquals("{\"id\":123,\"self\":{\"$ref\":\"@\"}}", text)
assertEquals(Long.toString(gregorianCalendar.getTimeInMillis()), text)
assertEquals(calendar.toGregorianCalendar().getTimeInMillis(), calendar1.toGregorianCalendar().getTimeInMillis())
assertEquals(calendar.toGregorianCalendar().getTimeInMillis(), model.calendar.toGregorianCalendar().getTimeInMillis())
assertEquals(jsonStr, JSON.toJSONString(testEntity))
assertEquals("{\"array\":\"AAAAZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\",\"limit\":4,\"position\":0}", result)
assertEquals(buff.capacity(), buf1.capacity())
assertEquals(buff.limit(), buf1.limit())
assertEquals(buff.position(), buf1.position())
assertEquals(expected, JSON.toJSONString(new Pojo(), asmConfig, serializerFeatures))
assertEquals(expected, JSON.toJSONString(new Pojo2(), asmConfig, serializerFeatures))
assertEquals(expected, JSON.toJSONString(new Pojo(), noasmConfig, serializerFeatures))
assertEquals(expected, JSON.toJSONString(new Pojo2(), noasmConfig, serializerFeatures))
assertEquals("{\"BarCount\":0,\"Flag\":false,\"List\":[],\"Name\":\"\"}", json)
assertEquals("[0,false,[],\"\"]", json)
assertEquals(json, JSON.toJSONString(result))
assertEquals(json, JSON.toJSONString(result))
assertEquals(json, JSON.toJSONString(result))
assertEquals(json, JSON.toJSONString(result))
assertEquals("[1,[\"aaa\",\"bbb\",\"ccc\"]]", JSON.toJSONString(result))
assertEquals("[1,\"YWJj\"]", JSON.toJSONString(result))
assertEquals(date2.getDate(), date.getDate())
assertEquals(date2.getDay(), date.getDay())
assertEquals(date2.getHours(), date.getHours())
assertEquals(date2.getMinutes(), date.getMinutes())
assertEquals(date2.getMonth(), date.getMonth())
assertEquals(date2.getSeconds(), date.getSeconds())
assertEquals(date2.getTime(), date.getTime())
assertEquals(date2.getTimezoneOffset(), date.getTimezoneOffset())
assertEquals(date2.getYear(), date.getYear())
assertEquals(date.getDate(), date.getDate())
assertEquals(date.getDay(), date.getDay())
assertEquals(date.getHours(), date.getHours())
assertEquals(date.getMinutes(), date.getMinutes())
assertEquals(date.getMonth(), date.getMonth())
assertEquals(date.getSeconds(), date.getSeconds())
assertEquals(date.getTime(), date.getTime())
assertEquals(date.getTimezoneOffset(), date.getTimezoneOffset())
assertEquals(date.getYear(), date.getYear())
assertEquals("{\"age\":23,'name':'Ariston'}", json)
assertEquals("{\"age\":23,'name':'Ariston'}", json)
assertTrue(json.indexOf("$ref") >= 0)
assertNotNull(error)
assertNull(model.value)
assertNull(model.value)
assertTrue("{\"id\":1111,\"name\":\"name11\"}".equals(text) || "{\"name\":\"name11\",\"id\":1111}".equals(text))
assertTrue("{\"id\":1111,\"name\":\"name11\"}".equals(text) || "{\"name\":\"name11\",\"id\":1111}".equals(text))
assertEquals(JSONArray.class, obj.getClass())
assertEquals(array, obj)
assertEquals("[{\"key1\":[\"item\"]}]", text)
assertTrue(result.get(0) instanceof Map)
assertTrue(result.get(0).get("key1").get(0) instanceof String)
assertEquals("{\"id1\":101,\"id2\":102,\"id3\":103}", JSON.toJSON(bean).toString())
assertEquals("{\"id1\":101,\"id2\":102,\"id3\":103}", JSON.toJSON(bean).toString())
assertEquals("{\"any\":[\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><WeightMajor measurementSystem=\\\"English\\\" unit=\\\"lbs\\\">0</WeightMajor>\"]}", JSON.toJSONString(con))
assertEquals("{\"time\":\"星期四 三月 22 16:58:37 CST 2018\"}", JSON.toJSONString(m))
assertEquals("{\"time\":\"星期四 三月 22 16:58:37 CST 2018\"}", JSON.toJSONString(m))
assertEquals(df.parse(strVal), date)
assertEquals(dt.toJSON(), dt1.toJSON())
assertEquals(dt.toJSON(), dt2.toJSON())
assertEquals(user1.getValue(), user.getValue())
assertEquals("79104776-6CA7-4E41-948F-4D2ECD06502A", user.getValue().toString().toUpperCase())
assertEquals(user1.getValue(), user.getValue())
assertEquals("", obj.get("value"))
assertNull(obj.getDate("value"))
assertEquals(obj1.toString(), obj2.toString())
assertTrue(JSONValidator.from(json).validate())
assertTrue(JSON.isValid(json))
Assertions.assertEquals(jsonStr, result)
Assertions.assertEquals(jsonStr, result)
assertEquals("{\"value\":null}", text)
assertEquals(v1.getValue(), v.getValue())
assertEquals("{\"value\":\"\"}", text)
assertNotNull(vo.getValue())
assertEquals("", vo.getValue().toString())
assertNull(vo.getValue())
assertNotNull(vo.getValue())
assertEquals("true", vo.getValue().toString())
assertNotNull(vo.getValue())
assertEquals("123", vo.getValue().toString())
assertEquals("{\"name\":\"a\\\\bc\"}", text)
assertEquals(model.name, model2.name)
assertEquals("{\"name\":\"a\\\\bc\\\"\"}", text)
assertEquals(model.name, model2.name)
assertEquals("{\"User.Id\":123}", string)
assertEquals("{\"val\":1.0}", JSON.toJSONString(m, SerializerFeature.WriteNullNumberAsZero))
assertEquals("{\"val\":1.0}", JSON.toJSONString(m, SerializerFeature.WriteNullNumberAsZero))
assertEquals("{\"id\":123,\"info\":\"fofo\",\"name\":\"wenshao\"}", text)
assertEquals("\"2018-10-10T00:00:00+08:00\"", JSON.toJSONString(LocalDateTime.of(2018, 10, 10, 0, 0), SerializerFeature.UseISO8601DateFormat))
assertEquals("\"2018-10-10T00:00:40.788+08:00\"", json)
assertEquals(expectStr, JSON.toJSONString(m))
assertEquals(str, JSON.toJSONString(m))
assertEquals("com.alibaba.fastjson", new String(m.data))
assertEquals(expectStr, JSON.toJSONString(m))
assertEquals("com.alibaba.fastjson", new String(m.data))
assertEquals(123, vo.getId())
assertEquals("int", JSONToken.name(JSONToken.LITERAL_INT))
assertEquals("float", JSONToken.name(JSONToken.LITERAL_FLOAT))
assertEquals("string", JSONToken.name(JSONToken.LITERAL_STRING))
assertEquals("iso8601", JSONToken.name(JSONToken.LITERAL_ISO8601_DATE))
assertEquals("true", JSONToken.name(JSONToken.TRUE))
assertEquals("false", JSONToken.name(JSONToken.FALSE))
assertEquals("null", JSONToken.name(JSONToken.NULL))
assertEquals("new", JSONToken.name(JSONToken.NEW))
assertEquals("(", JSONToken.name(JSONToken.LPAREN))
assertEquals(")", JSONToken.name(JSONToken.RPAREN))
assertEquals("{", JSONToken.name(JSONToken.LBRACE))
assertEquals("}", JSONToken.name(JSONToken.RBRACE))
assertEquals("[", JSONToken.name(JSONToken.LBRACKET))
assertEquals("]", JSONToken.name(JSONToken.RBRACKET))
assertEquals(",", JSONToken.name(JSONToken.COMMA))
assertEquals(":", JSONToken.name(JSONToken.COLON))
assertEquals("ident", JSONToken.name(JSONToken.IDENTIFIER))
assertEquals("fieldName", JSONToken.name(JSONToken.FIELD_NAME))
assertEquals("EOF", JSONToken.name(JSONToken.EOF))
assertEquals("Unknown", JSONToken.name(Integer.MAX_VALUE))
assertEquals("Set", JSONToken.name(JSONToken.SET))
assertEquals("TreeSet", JSONToken.name(JSONToken.TREE_SET))
assertEquals("undefined", JSONToken.name(JSONToken.UNDEFINED))
assertEquals("error", JSONToken.name(JSONToken.ERROR))
assertEquals(";", JSONToken.name(JSONToken.SEMI))
assertEquals(".", JSONToken.name(JSONToken.DOT))
assertEquals("hex", JSONToken.name(JSONToken.HEX))
assertNotNull(array)
assertEquals(0, CollectionCodec.instance.getFeatures())
assertEquals("[]", serializer.out.toString())
assertEquals("null", writer.toString())
assertEquals("\"abc\"", writer.toString())
assertEquals("abc", writer.toString())
assertEquals("a", writer.toString())
assertEquals(",\"id\"", writer.toString())
assertEquals(",\"id\"", new String(writer.toBytes(StandardCharsets.UTF_8)))
assertEquals(",\"id\"", new String(writer.toBytes("UTF8")))
assertEquals(",\"id\"", out.toString())
assertTrue(writer.getBeforeFilters().isEmpty())
assertTrue(writer.isEnabled(SerializerFeature.BeanToArray))
assertTrue(writer.isEnabled(SerializerFeature.WriteEnumUsingToString))
assertTrue(writer.isEnabled(SerializerFeature.WriteMapNullValue))
assertTrue(writer.isEnabled(SerializerFeature.WriteEnumUsingName))
assertTrue(writer.isEnabled(SerializerFeature.WriteNullListAsEmpty))
assertTrue(writer.isEnabled(SerializerFeature.WriteNullStringAsEmpty))
assertTrue(writer.isEnabled(SerializerFeature.WriteNullNumberAsZero))
assertTrue(writer.isEnabled(SerializerFeature.WriteNullBooleanAsFalse))
assertTrue(writer.isEnabled(SerializerFeature.WriteClassName))
assertTrue(writer.isEnabled(SerializerFeature.NotWriteRootClassName))
assertTrue(writer.isEnabled(SerializerFeature.WriteNonStringKeyAsString))
assertTrue(writer.isEnabled(SerializerFeature.NotWriteDefaultValue))
assertTrue(writer.isEnabled(SerializerFeature.BrowserCompatible))
assertTrue(writer.isEnabled(SerializerFeature.IgnoreNonFieldGetter))
assertTrue(writer.isEnabled(SerializerFeature.WriteNonStringValueAsString))
assertTrue(writer.isEnabled(SerializerFeature.IgnoreErrorGetter))
assertTrue(writer.isEnabled(SerializerFeature.WriteBigDecimalAsPlain))
Assert.assertEquals("{}", text)
Assert.assertEquals("{}", JSON.toJSONString(new A(), filter))
Assert.assertEquals("{\"id\":0}", text)
Assert.assertEquals("{\"name\":\"chennp2008\"}", text)
Assert.assertEquals("{\"name\":\"chennp2008\"}", text)
Assert.assertEquals("{\"id\":3}", text)
assertEquals("\"local\"", JSON.toJSONString(address))
Assert.assertEquals("{}", text)
Assert.assertEquals("{\"id\":0.0}", text)
Assert.assertEquals("{\"name\":\"chennp2008\"}", text)
Assert.assertEquals("{\"name\":\"chennp2008\"}", text)
Assert.assertEquals("{\"id\":3}", text)
assertEquals("{\"id\":\"AAA\"}", text)
assertEquals("{\"id\":\"AAA\"}", JSON.toJSONString(new A(), filter))
assertEquals("{\"id\":0,\"name\":\"AAA\"}", text)
assertEquals("{\"name\":\"AAA\"}", text)
assertEquals("{}", text)
assertEquals("{\"id\":111}", str)
assertEquals("[]", serializer.out.toString())
assertEquals("[]", serializer.out.toString())
Assert.assertEquals("{1001:0}", text)
Assert.assertEquals("{\"ID\":false}", text)
Assert.assertEquals("{\"ID\":true}", text)
Assert.assertEquals("{}", text)
Assert.assertEquals("{\"id\":false}", text)
Assert.assertEquals("{\"name\":\"chennp2008\"}", text)
Assert.assertEquals("{\"name\":\"chennp2008\"}", text)
Assert.assertEquals("{\"id\":3}", text)
assertEquals(0, SerializerFeature.of(new SerializerFeature[0]))
assertEquals(0, SerializerFeature.of(null))
assertEquals(SerializerFeature.WriteClassName.mask, SerializerFeature.of(new SerializerFeature[] { SerializerFeature.WriteClassName }))
assertTrue(SerializerFeature.isEnabled(features, SerializerFeature.WriteClassName))
assertTrue(SerializerFeature.isEnabled(features, 0, SerializerFeature.WriteClassName))
assertEquals(123, serializer.getFieldValue(bean, "id"))
assertNotNull(serializer.getObjectWriter(Bean.class))
assertEquals("{\"id\":123}", out.toString())
assertEquals("\"101\"", str)
assertEquals(101, bean1.id)
assertEquals("{\"v0\":100,\"v1\":101}", string)
assertEquals("{\"v2\":102,\"v3\":103}", string)
assertEquals("iso8601", context.getDateFormat())
assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.WriteNulls))
assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.WriteNullListAsEmpty))
assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.WriteNullStringAsEmpty))
assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.WriteNullNumberAsZero))
assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.WriteNullBooleanAsFalse))
assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.BrowserCompatible))
assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName))
assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringValueAsString))
assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.WriteEnumUsingToString))
assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName))
assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.IgnoreErrorGetter))
assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.BeanToArray))
assertEquals(JSON.DEFFAULT_DATE_FORMAT, context.getDateFormat())
assertEquals("true", writer.toString())
assertEquals("1086", writer.toString())
assertEquals("2155", writer.toString())
assertSame(SerializeConfig.global, writer.getMapping())
assertNotNull(writer.getWriter())
assertEquals("null", writer.toString())
assertEquals(0, writer.getBeforeFilters().size())
assertEquals(v1.getValue(), v.getValue())
assertEquals("{\"value\":null}", text)
assertEquals(v1.getValue(), v.getValue())
assertEquals("{\"value\":null}", text)
assertEquals(v1.getValue(), v.getValue())
assertEquals("{\"value\":0}", text)
assertEquals(Byte.valueOf((byte) 0), v1.getValue())
assertEquals("[[{\"name\":\"intell\",\"speed\":3.3},{\"height\":9,\"name\":\"samsung\",\"width\":16},\"2\",\"3\"],{\"cpu\":{\"$ref\":\"$[0][0]\"},\"screen\":{\"$ref\":\"$[0][1]\"}}]", s)
assertEquals("{\"score\":0.000099369485}", object.toJSONString())
assertNotNull(jsonObj)
assertNotNull(jsonObj.getJSONArray(0))
assertEquals("{\"a\":[\"1\",\"b\"],\"b\":[\"1\"]}", json)
assertEquals("\"12:13:14\"", str)
assertNull(error)
assertNull(error)
assertNull(error)
assertNull(error)
assertEquals("[\"1\",\"2\"]", JSONPath.extract(str, "$.*.id").toString())
assertEquals("[\"2\"]", JSONPath.extract(str, "$.*[?(@.name=='b')].id").toString())
assertEquals("-65001600000", json)
assertEquals(ts.getTime(), ts2.getTime())
assertEquals("{\"time\":-65001600000}", json)
assertEquals(m.time.getTime(), m2.time.getTime())
assertEquals("{\"admin\":[\"admin.create\",\"admin.update\",\"admin.delete\"],\"user\":[\"user.create\",\"user.delete\"]}", json)
assertEquals(multimap.size(), multimap1.size())
assertEquals(json, JSON.toJSONString(multimap1))
assertEquals("{\"value\":\"\"}", text)
assertEquals("123", JSON.parseObject("123", String.class))
assertEquals("true", JSON.parseObject("true", String.class))
assertEquals(null, JSON.parseObject("null", String.class))
assertTrue(equals(new StringBuffer("123"), JSON.parseObject("123", StringBuffer.class)))
assertTrue(equals(new StringBuffer("true"), JSON.parseObject("true", StringBuffer.class)))
assertEquals(null, JSON.parseObject("null", StringBuffer.class))
assertTrue(equals(new StringBuilder("123"), JSON.parseObject("123", StringBuilder.class)))
assertTrue(equals(new StringBuilder("true"), JSON.parseObject("true", StringBuilder.class)))
assertEquals(null, JSON.parseObject("null", StringBuilder.class))
assertEquals(entity.getId(), entity2.getId())
assertEquals(entity.getName(), entity2.getName())
assertEquals(123, model.value)
assertEquals(user1.getValue(), user.getValue())
assertEquals(user1.getValue(), user.getValue())
Assert.assertEquals("{\"apple\":1,\"banana\":2}", JSON.toJSONString(base))
assertEquals("", obj.get("value"))
assertNull(obj.getObject("value", Model.class))
assertNull(obj.getObject("value", getType()))
assertEquals("{\"value\":null}", text)
assertEquals(v1.getValue(), v.getValue())
assertEquals("{\"value\":[]}", text)
assertEquals("[true]", JSON.toJSONString(new boolean[] { true }))
assertEquals("{\"value\":null}", text)
assertEquals(v1.getValue(), v.getValue())
assertEquals("{\"value\":[]}", text)
assertEquals("cd", JSONPath.eval(obj, "$.a.b"))
assertEquals(10, JSONPath.eval(obj, "$.a.length()"))
assertEquals("{\"id\":3,\"name\":\"Jobs\"}", text)
assertEquals(123, tb.getAb())
Assert.assertTrue(MixIn1.class == JSON.getMixInAnnotations(BaseClass.class))
Assert.assertTrue(null == JSON.getMixInAnnotations(BaseClass.class))
assertTrue(model.flag)
assertEquals("{\"userId\":\"456\"}", json)
assertEquals(123, tb.getAb())
assertNotNull(error)
assertEquals("\"2017-03-17\"", json)
assertEquals("\"2017-03-07\"", json)
assertEquals(123, model.id)
assertEquals("{\"value\":null}", text)
assertEquals(v1.getValue(), v.getValue())
assertEquals("{\"value\":0}", text)
assertEquals("{\"value\":\"QUJDREVH\"}", json)
assertArrayEquals(model.value, model1.value)
assertFalse(SerializerFeature.isEnabled(features, SerializerFeature.WriteClassName))
assertFalse(JSON.isValid(null))
assertFalse(JSON.isValid(""))
assertFalse(JSON.isValid("null,null"))
assertFalse(JSON.isValid("123,"))
assertFalse(JSON.isValid("123,123"))
assertFalse(JSON.isValid("12.34,true"))
assertFalse(JSON.isValid("12.34,123"))
assertFalse(JSON.isValid("true,123"))
assertFalse(JSON.isValid("false,123"))
assertFalse(JSON.isValid("\"abc\",123"))
assertFalse(JSON.isValid("{"))
assertFalse(JSON.isValid("{\"id\":123,}}"))
assertFalse(JSON.isValid("{\"id\":\"123}"))
assertFalse(JSON.isValid("{\"id\":{]}"))
assertFalse(JSON.isValid("{\"id\":{"))
assertFalse(JSON.isValidObject("{"))
assertFalse(JSON.isValidObject("{\"id\":123,}}"))
assertFalse(JSON.isValidObject("{\"id\":\"123}"))
assertFalse(JSON.isValidObject("{\"id\":{]}"))
assertFalse(JSON.isValidObject("{\"id\":{"))
assertFalse(JSON.isValid("["))
assertFalse(JSON.isValid("[[,[]]"))
assertFalse(JSON.isValid("[{\"id\":123]"))
assertFalse(JSON.isValid("[{\"id\":\"123\"}"))
assertFalse(JSON.isValid("[{\"id\":true]"))
assertFalse(JSON.isValid("[{\"id\":{}]"))
assertFalse(JSON.isValidArray("["))
assertFalse(JSON.isValidArray("[[,[]]"))
assertFalse(JSON.isValidArray("[{\"id\":123]"))
assertFalse(JSON.isValidArray("[{\"id\":\"123\"}"))
assertFalse(JSON.isValidArray("[{\"id\":true]"))
assertFalse(JSON.isValidArray("[{\"id\":{}]"))
assertEquals(user1.getValue().pattern(), user.getValue().pattern())
assertEquals(user1.getValue(), user.getValue())
assertEquals(a.getProperty("id"), aa.getProperty("id"))
assertEquals(b.getProperty("id"), bb.getProperty("id"))
assertEquals(b.getProperty("name"), bb.getProperty("name"))
assertEquals("{\n" + "\t\"id\":0,\n" + "\t\"name\":\"jobs\"\n" + "}", JSON.toJSONString(b, true))
assertNotNull(child)
assertTrue(string.contains("is_test"))
assertEquals("1003", JSON.toJSONString(vo.type))
assertEquals("{\"type\":1003}", str)
assertEquals(vo.type, vo2.type)
assertEquals(Integer.valueOf(4), parseOrder.getAmount())
assertEquals("3", parseOrder.getAddMoney())
assertEquals("1003", JSON.toJSONString(vo.type))
assertEquals("{\"type\":1003}", str)
assertEquals(vo.type, vo2.type)
Assertions.assertNotNull(modelBack.getCounterMap())
Assertions.assertNotNull(modelBack.getModelScores())
assertNotNull(demo.date)
assertTrue(v.validate())
assertEquals(JSONValidator.Type.Value, v.getType())
assertEquals("{\"v0\":\"1001\",\"v1\":\"101\"}", str)
assertEquals("1001", object.get("v0"))
assertEquals("101", object.get("v1"))
assertEquals("{\"v0\":\"19007199254740991\"}", str)
assertEquals(JSONValidator.Type.Array, v.getType())
assertEquals(JSONValidator.Type.Array, JSONValidator.from("[]").getType())
assertEquals(JSON.toJSONString(vo), "{\"date\":\"2020-05-30\"}")
assertEquals("{\"date\":\"2020-05-30\"}", str)
Assertions.assertEquals(JSONValidator.Type.Value, jv.getType())
assertEquals("\"AQ==\"", JSON.toJSONString(new byte[] { 1 }))
assertEquals("{\"value\":null}", text)
assertEquals(v1.getValue(), v.getValue())
assertEquals("{\"value\":[]}", text)
assertEquals(user1.getValue()[0], user.getValue()[0])
assertEquals(user1.getValue()[1], user.getValue()[1])
assertEquals(user1.getValue(), user.getValue())
assertEquals(0, user1.getValue().length)
Assertions.assertTrue(jv.validate())
Assertions.assertTrue(jv.validate())
Assertions.assertTrue(jv.validate())
assertEquals("{\"value\":null}", text)
assertEquals(v1.getValue(), v.getValue())
assertEquals("{\"value\":\"\"}", text)
assertNotNull(vo.getValue())
assertEquals("", vo.getValue().toString())
assertNull(vo.getValue())
assertNotNull(vo.getValue())
assertEquals("true", vo.getValue().toString())
assertNotNull(vo.getValue())
assertEquals("123", vo.getValue().toString())
assertEquals(user1.getValue(), user.getValue())
assertEquals(0, value.size())
assertEquals(1001, value.getId())
assertEquals("123", bean.getValue())
assertEquals(false, bean.isBig())
assertEquals(123, bean.getIntValue())
assertEquals(true, bean.isBig())
assertEquals(567, bean.getID())
assertNotNull(error)
assertNotNull(error)
assertNotNull(error)
assertNotNull(error)
assertNotNull(error)
assertNotNull(error)
assertNotNull(error)
assertNotNull(error)
assertNotNull(error)
assertSame(Currency.getInstance("CNY"), currency)
assertSame(Currency.getInstance("CNY"), currency)
assertEquals("{}", str)
assertNotNull(model)
assertNotNull(model.value)
assertEquals(1546072129000L, model.value.getTime())
assertNotNull(model)
assertNotNull(model.value)
assertEquals(1546072129000L, model.value.getTime())
assertNotNull(m2.queue)
assertEquals("{\"java.version\":\"1.6\"}", json)
assertNotNull(m2)
assertEquals(m.javaVersion, m2.javaVersion)
assertEquals(1548166745000L, o.createTime.getTime())
assertEquals("{\"createTime\":1548166745}", json)
assertEquals(1548166745000L, o.createTime.getTimeInMillis())
assertEquals("{\"createTime\":1548166745}", json)
assertEquals(1531579788000L, o.createTime.getTimeInMillis())
assertEquals("{\"createTime\":\"20180714224948\"}", json)
assertEquals(ZonedDateTime.class, o.createTime.getClass())
assertEquals(1548166745L, seconds)
assertEquals("{\"createTime\":1548166745}", json)
assertNotNull(error)
assertSame(Type.Big, JSON.parseObject("\"big\"", Type.class))
assertSame(Type.Big, JSON.parseObject("\"Big\"", Type.class))
assertSame(Type.Big, JSON.parseObject("\"BIG\"", Type.class))
assertSame(Type.Small, JSON.parseObject("\"Small\"", Type.class))
assertSame(Type.Small, JSON.parseObject("\"small\"", Type.class))
assertSame(Type.Small, JSON.parseObject("\"SMALL\"", Type.class))
assertSame(Type.Medium, JSON.parseObject("\"medium\"", Type.class))
assertSame(Type.Medium, JSON.parseObject("\"MEDIUM\"", Type.class))
assertSame(Type.Medium, JSON.parseObject("\"Medium\"", Type.class))
assertSame(Type.Medium, JSON.parseObject("\"MediuM\"", Type.class))
assertNull(JSON.parseObject("\"\"", Type.class))
assertSame(Type.Big, JSON.parseObject("{\"type\":\"bIG\"}", Model.class).type)
assertSame(Type.Big, JSON.parseObject("{\"type\":\"big\"}", Model.class).type)
assertSame(Type.Big, JSON.parseObject("{\"type\":\"Big\"}", Model.class).type)
assertSame(Type.Big, JSON.parseObject("{\"type\":\"BIG\"}", Model.class).type)
assertSame(Type.Small, JSON.parseObject("{\"type\":\"Small\"}", Model.class).type)
assertSame(Type.Small, JSON.parseObject("{\"type\":\"SmAll\"}", Model.class).type)
assertSame(Type.Small, JSON.parseObject("{\"type\":\"small\"}", Model.class).type)
assertSame(Type.Small, JSON.parseObject("{\"type\":\"SMALL\"}", Model.class).type)
assertSame(Type.Medium, JSON.parseObject("{\"type\":\"Medium\"}", Model.class).type)
assertSame(Type.Medium, JSON.parseObject("{\"type\":\"MediuM\"}", Model.class).type)
assertSame(Type.Medium, JSON.parseObject("{\"type\":\"medium\"}", Model.class).type)
assertSame(Type.Medium, JSON.parseObject("{\"type\":\"MEDIUM\"}", Model.class).type)
assertNull(JSON.parseObject("{\"type\":\"\"}", Model.class).type)
assertNull(model.type)
assertNotNull(error)
assertNotNull(error)
assertEquals("{\"null\":123}", str)
assertEquals(1950, m.date.get(Calendar.YEAR))
assertEquals(1950, m.date.getYear())
assertEquals(1950, m.date.getYear())
assertEquals(1950, m.date.getYear())
assertEquals(1950, m.date.getYear())
assertEquals(1950, m.date.getYear())
assertEquals(1950, m.date.getYear())
assertEquals("  asdfsadf  asdf  asdf  ", jon.user.username)
assertEquals("  asdfsadf  asdf  asdf  ", jon1.user.username)
assertTrue("{\"a\":{},\"b\":{}}".equals(json) || "{\"a\":{},\"b\":{\"$ref\":\"$.a\"}}".equals(json))
assertEquals("[\"38ba5660-ef6e-4b66-9673-b0236832f179\"]", device_udid)
assertEquals("[{\"3\":3,\"2\":2,\"7\":7}]", JSON.toJSONString(result, SerializerFeature.WriteMapNullValue))
assertEquals("[{\"3\":3,\"2\":2,\"7\":7}]", JSON.toJSONString(result, SerializerFeature.WriteMapNullValue))
assertEquals(TestUtils.encodeToBase64String(entity.getValue(), false), json.getString("value"))
assertEquals("中华人民共和国", new String(entity2.getValue(), "UTF-8"))
assertEquals("{\"v\":\" \"}", json)
assertEquals(map.get("v"), jsonObject.get("v"))
assertEquals("{\"f1\":1001,\"f3\":1003}", JSON.toJSONString(a))
assertEquals("{\"f1\":1001,\"f3\":1003,\"f5\":1005}", JSON.toJSONString(b))
assertEquals("{\"f1\":1001,\"f3\":1003,\"f5\":1005,\"f6\":1006}", JSON.toJSONString(c))
assertEquals("{\"f1\":1001,\"f3\":1003,\"f5\":1005,\"f6\":1006,\"f7\":1007}", JSON.toJSONString(d))
assertEquals(TimeUnit.DAYS, JSON.parseObject(text, TimeUnit.class))
assertEquals(com.alibaba.fastjson.JSONObject.class, a.getClass())
assertEquals(java.util.ArrayList.class, a.get("list").getClass())
assertEquals(java.util.HashMap.class, a.get("map").getClass())
assertEquals("{\"remark\":\"支付订单\",\"value\":1}", text)
assertEquals("{\"orderType\":{\"remark\":\"结算单\",\"value\":2}}", text)
assertEquals("{\"orderType\":{\"remark\":\"结算单\",\"value\":2},\"orderType1\":{\"remark\":\"结算单\",\"value\":2}}", text)
assertEquals("{\"orderType\":{\"remark\":\"结算单\",\"value\":2},\"orderType1\":{\"remark\":\"结算单\",\"value\":2}}", text)
assertEquals("3.4", parser.getInput())
assertEquals(false, parser.isEnabled(Feature.UseBigDecimal))
assertEquals(3.4D, result)
assertEquals("{\"double\":3.4}", parser.getInput())
assertEquals(3.4D, ((Map) result).get("double"))
assertNotNull(error)
assertNotNull(error)
assertNotNull(error)
assertNotNull(error)
assertNotNull(error)
assertNotNull(error)
assertNotNull(error)
assertEquals("{\"value\":null}", text)
assertEquals(v1.getValue(), v.getValue())
assertEquals("{\"value\":[]}", text)
assertTrue(JSONPath.remove(object, "$.id"))
assertTrue(object.isEmpty())
assertTrue(JSONPath.set(object, "$.id", 234))
assertEquals(234, object.get("id"))
assertEquals("$.id", path.getPath())
assertEquals(123, path.eval(object))
assertEquals(234, object.getIntValue("id"))
assertEquals("{\"id\":0,\"name\":\"jobs\"}", text)
assertEquals(text, JSON.toJSONString(obj1))
assertEquals("{\"value\":null}", text)
assertEquals(v1.getValue(), v.getValue())
assertEquals("{\"value\":0}", text)
assertEquals("{\"ID\":123,\"name\":\"jobs\"}", str)
assertEquals("{\"value\":null}", text)
assertEquals(v1.getValue(), v.getValue())
assertEquals("{\"remark\":\"支付订单\",\"value\":1}", text)
assertEquals("{\"orderType\":{\"remark\":\"结算单\",\"value\":2}}", text)
assertEquals(Bean.class, context.getBeanClass())
assertEquals(int.class, context.getFieldClass())
assertEquals(int.class, context.getFieldType())
assertEquals(Bean.class.getField("id"), context.getField())
assertEquals("userId", context.getAnnotation(JSONField.class).name())
assertEquals(null, context.getFormat())
assertEquals(null, context.getLabel())
assertEquals(0, context.getFeatures())
assertEquals("1997-03-17 15:53:01.012345678", ts.toString())
assertEquals('"' + ts.toString() + '"', '"' + ts2.toString() + '"')
assertEquals('"' + ts.toString() + '"', '"' + ts2.toString() + '"')
assertEquals('"' + ts.toString() + '"', '"' + ts2.toString() + '"')
assertEquals('"' + ts.toString() + '"', '"' + ts2.toString() + '"')
assertEquals('"' + ts.toString() + '"', '"' + ts2.toString() + '"')
assertEquals('"' + ts.toString() + '"', '"' + ts2.toString() + '"')
assertEquals("[{\"category\":{\"name\":\"category\"},\"name\":\"item1\",\"afterFilterCategory\":{\"name\":\"afterFilterCategory\"}},{\"category\":{\"$ref\":\"$[0].category\"},\"name\":\"item2\",\"afterFilterCategory\":{\"name\":\"afterFilterCategory\"}}]", str)
assertEquals("", obj.get("value"))
assertNull(obj.getObject("value", Model.class))
assertNull(obj.getObject("value", new TypeReference<Model>() {
}))
assertEquals("null", obj.get("value"))
assertNull(obj.getObject("value", Model.class))
assertNull(obj.getObject("value", new TypeReference<Model>() {
}))
assertEquals(new JSONObject(), obj.getObject("value", JSONObject.class))
assertEquals("[{\"method\":\"queryPrepayGoodsV2\"}]", obj.toString())
assertEquals("[13,14]", obj.toString())
Assertions.assertFalse(jv.validate())
assertFalse(object.isEmpty())
assertEquals("[{\"名称\":\"脆皮青豆\",\"配料\":[\"豌豆\",\"棕榈油\",\"白砂糖\",\"食用盐\",\"玉米淀粉\"]}]", JSONPath.extract(chineseKeyString, "$[?(@.名称 = '脆皮青豆')]").toString())
assertEquals("[{\"name\":\"脆皮青豆\",\"配料\":[\"豌豆\",\"棕榈油\",\"白砂糖\",\"食用盐\",\"玉米淀粉\"]}]", JSONPath.extract(normalKeyString, "$[?(@.name = '脆皮青豆')]").toString())
assertFalse(((List) JSONPath.extract(chineseKeyString, "$[?(@.名称 = '脆皮青豆')]")).isEmpty())
assertFalse(((List) JSONPath.extract(normalKeyString, "$[?(@.name = '脆皮青豆')]")).isEmpty())
assertEquals("2019-09-18T20:35:00+12:45", sdf.format(c.p1.getTime()))
assertEquals("2019-09-18T20:35:00+12:45", sdf.format(c.p1.getTime()))
assertEquals("2019-09-18T20:35:00+05:45", sdf.format(c.p1.getTime()))
assertEquals("2019-09-18T20:35:00+05:45", sdf.format(c.p1.getTime()))
assertEquals("2019-09-18T20:35:00+08:45", sdf.format(c.p1.getTime()))
assertTrue(a instanceof JSONObject)
assertTrue(b instanceof JSONObject)
assertTrue(c instanceof JSONArray)
assertEquals("{\"value\":[]}", str)
assertEquals("{\"time\":" + m.time.atZone(JSON.defaultTimeZone.toZoneId()).toInstant().toEpochMilli() + "}", str)
assertEquals(m.time.atZone(JSON.defaultTimeZone.toZoneId()).toInstant().toEpochMilli(), m1.time.atZone(JSON.defaultTimeZone.toZoneId()).toInstant().toEpochMilli())
assertEquals("{\"ztime\":" + m.ztime.toInstant().toEpochMilli() + "}", str)
assertEquals(m.ztime.toInstant().toEpochMilli(), m1.ztime.toInstant().toEpochMilli())
assertEquals("{\"time1\":" + m.time1.atZone(JSON.defaultTimeZone.toZoneId()).toEpochSecond() + "}", str)
assertEquals(m.time1.atZone(JSON.defaultTimeZone.toZoneId()).toEpochSecond(), m1.time1.atZone(JSON.defaultTimeZone.toZoneId()).toEpochSecond())
assertEquals("{\"ztime1\":" + m.ztime1.toEpochSecond() + "}", str)
assertEquals(m.ztime1.toEpochSecond(), m1.ztime1.toEpochSecond())
assertEquals("{\"date\":" + m.date.getTime() + "}", str)
assertEquals(m.date.getTime(), m1.date.getTime())
assertEquals("{\"date1\":" + (m.date1.getTime() / 1000) + "}", str)
assertEquals(m.date1.getTime() / 1000, m1.date1.getTime() / 1000)
assertEquals("{\"date1\":" + (m.date1.getTime() / 1000) + "}", str)
assertEquals(m.date1.getTime() / 1000, m1.date1.getTime() / 1000)
assertEquals(LocalDateTime.of(2019, 7, 14, 12, 13, 14), m.time2)
assertEquals(Long.toString(millis), JSON.toJSONStringWithDateFormat(new Date(millis), "millis"))
assertEquals(Long.toString(millis / 1000), JSON.toJSONStringWithDateFormat(new Date(millis), "unixtime"))
assertTrue(123.45F == ((Float) obj.get("value")).floatValue())
assertEquals(new BigInteger("123"), obj.getBigInteger("value"))
assertTrue(123.45D == ((Double) obj.get("value")).doubleValue())
assertEquals(new BigInteger("123"), obj.getBigInteger("value"))
assertEquals("", obj.get("value"))
assertNull(obj.getBigInteger("value"))
assertEquals(GeometryCollection.class, geometry.getClass())
assertEquals("{\"type\":\"GeometryCollection\",\"geometries\":[{\"type\":\"Point\",\"coordinates\":[100.0,0.0]},{\"type\":\"LineString\",\"coordinates\":[[101.0,0.0],[102.0,1.0]]}]}", JSON.toJSONString(geometry))
assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)))
assertEquals(Point.class, geometry.getClass())
assertEquals("{\"type\":\"Point\",\"coordinates\":[100.0,0.0]}", JSON.toJSONString(geometry))
assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)))
assertEquals(Polygon.class, geometry.getClass())
assertEquals("{\"type\":\"Polygon\",\"coordinates\":[[[100.0,0.0],[101.0,0.0],[101.0,1.0],[100.0,1.0],[100.0,0.0]],[[100.8,0.8],[100.8,0.2],[100.2,0.2],[100.2,0.8],[100.8,0.8]]]}", JSON.toJSONString(geometry))
assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)))
assertEquals(MultiPolygon.class, geometry.getClass())
assertEquals("{\"type\":\"MultiPolygon\",\"coordinates\":[[[[102.0,2.0],[103.0,2.0],[103.0,3.0],[102.0,3.0],[102.0,2.0]]],[[[100.0,0.0],[101.0,0.0],[101.0,1.0],[100.0,1.0],[100.0,0.0]],[[100.2,0.2],[100.2,0.8],[100.8,0.8],[100.8,0.2],[100.2,0.2]]]]}", JSON.toJSONString(geometry))
assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)))
assertEquals(FeatureCollection.class, geometry.getClass())
assertEquals("{\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"properties\":{\"prop0\":\"value0\"},\"geometry\":{\"type\":\"Point\",\"coordinates\":[102.0,0.5]}},{\"type\":\"Feature\",\"properties\":{\"prop1\":\"0.0\",\"prop0\":\"value0\"},\"geometry\":{\"type\":\"LineString\",\"coordinates\":[[102.0,0.0],[103.0,1.0],[104.0,0.0],[105.0,1.0]]}},{\"type\":\"Feature\",\"properties\":{\"prop1\":\"{\\\"this\\\":\\\"that\\\"}\",\"prop0\":\"value0\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[100.0,0.0],[101.0,0.0],[101.0,1.0],[100.0,1.0],[100.0,0.0]]]}}]}", JSON.toJSONString(geometry))
assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)))
assertEquals(MultiLineString.class, geometry.getClass())
assertEquals("{\"type\":\"MultiLineString\",\"coordinates\":[[[100.0,0.0],[101.0,1.0]],[[102.0,2.0],[103.0,3.0]]]}", JSON.toJSONString(geometry))
assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)))
assertEquals(LineString.class, geometry.getClass())
assertEquals("{\"type\":\"LineString\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]}", JSON.toJSONString(geometry))
assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)))
assertEquals(Feature.class, geometry.getClass())
assertEquals("{\"type\":\"Feature\",\"bbox\":[-10.0,-10.0,10.0,10.0],\"properties\":{},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-10.0,-10.0],[10.0,-10.0],[10.0,10.0],[-10.0,-10.0]]]}}", JSON.toJSONString(geometry))
assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)))
assertEquals(Feature.class, geometry.getClass())
assertEquals("{\"type\":\"Feature\",\"id\":\"f2\",\"properties\":{},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-10.0,-10.0],[10.0,-10.0],[10.0,10.0],[-10.0,-10.0]]]}}", JSON.toJSONString(geometry))
assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)))
assertEquals(MultiPoint.class, geometry.getClass())
assertEquals("{\"type\":\"MultiPoint\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]}", JSON.toJSONString(geometry))
assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)))
assertEquals("{1:10,2:4,3:5,4:5,37306:98,36796:9}", json)
assertEquals("{\"1\":10,\"2\":4,\"3\":5,\"4\":5,\"37306\":98,\"36796\":9}", JSON.toJSONString(map, SerializerFeature.WriteNonStringKeyAsString))
assertEquals(map1.get(Integer.valueOf(1)), Integer.valueOf(10))
assertEquals(map1.get(Integer.valueOf(2)), Integer.valueOf(4))
assertEquals(map1.get(Integer.valueOf(3)), Integer.valueOf(5))
assertEquals(map1.get(Integer.valueOf(4)), Integer.valueOf(5))
assertEquals(map1.get(Integer.valueOf(37306)), Integer.valueOf(98))
assertEquals(map1.get(Integer.valueOf(36796)), Integer.valueOf(9))
assertEquals(map2.get(Integer.valueOf(1)), Integer.valueOf(10))
assertEquals(map2.get(Integer.valueOf(2)), Integer.valueOf(4))
assertEquals(map2.get(Integer.valueOf(3)), Integer.valueOf(5))
assertEquals(map2.get(Integer.valueOf(4)), Integer.valueOf(5))
assertEquals(map2.get(Integer.valueOf(37306)), Integer.valueOf(98))
assertEquals(map2.get(Integer.valueOf(36796)), Integer.valueOf(9))
assertEquals(json, json1)
assertEquals("{\"canRefuse\":true,\"code\":3,\"first\":false,\"last\":false,\"name\":\"FINAL_TRAIL\",\"nameCn\":\"公益委员会/理事会/理事长审核\"}", json)
assertNotNull(error)
assertEquals("{\"v\":3.4028234663852886E38}", sFloatOverflow)
assertEquals(3.4028235E38F, floatVal.v)
assertEquals(floatVal.v, Float.parseFloat("3.4028234663852886E38"))
assertEquals("{\"v\":6.805646932770577E38}", sFloatOverflow)
assertEquals(Float.parseFloat("6.805646932770577E38"), floatVal.v)
assertEquals("{\"_id\":1001,\"id\":1002}", json)
assertEquals(json, JSON.toJSONString(model1))
assertNotNull(error)
assertNotNull(error)
assertNotNull(error)
assertNotNull(error)
Assertions.assertEquals("{\"time1\":" + t1 + ",\"time2\":\"2017-09-22 15:08:56\"}", json)
Assertions.assertEquals("{\"time1\":" + JSON.toJSONString(time1, SerializerFeature.WriteDateUseDateFormat) + ",\"time2\":\"2017-09-22 15:08:56\"}", json)
Assertions.assertEquals("{\"time1\":\"" + stime1 + "\",\"time2\":\"" + stime2 + "\"}", json)
Assertions.assertEquals(1, resource.ret)
Assertions.assertEquals("ok", resource.message)
Assertions.assertEquals(2, data.size())
Assertions.assertEquals("11c53f541dee4f5bbc4f75f99002278c", app1.appId)
assertEquals(0, model.hasSth)
assertEquals(3, model.id)
assertEquals("{\"id\":\"001\",\"name\":\"顾客\"}", JSON.toJSONString(p))
assertEquals("{\"mD5\":\"xxx\"}", json)
assertEquals(1, s0.id)
assertEquals(22, s0.age)
assertEquals("hello", s0.name)
assertEquals(1, s1.id)
assertEquals(22, s1.age)
assertEquals("hhh", s1.name)
assertNull(model.flag)
assertSame(BuFlag.IS_NEED_CHECK_IDENTITY, model.flag)
assertEquals(str, JSON.toJSONString(resp1))
assertEquals(str2, JSON.toJSONString(resp2))
assertFalse(ok.v)
assertFalse(bad.v)
assertFalse(bad.v)
assertFalse(bad.v)
assertEquals("\"2018-08-31 15:26:37\"", json)
assertEquals("{\"value\":null}", text)
assertEquals(v1.getValue(), v.getValue())
assertEquals(user1.getValue(), user.getValue())
assertEquals(user1.getValue(), user.getValue())
assertEquals(33, user.getValue().getPort())
assertEquals("{\"oAuth\":\"abc\"}", JSON.toJSONString(bean))
assertEquals("[{\"id\":0},{\"id\":1},{\"id\":2},{\"$ref\":\"$[0]\"},{\"$ref\":\"$[1]\"},{\"$ref\":\"$[2]\"}]", text)
assertEquals(6, groups.size())
assertSame(groups.get(0), groups.get(3))
assertSame(groups.get(1), groups.get(4))
assertSame(groups.get(2), groups.get(5))
assertEquals(0, groups.get(0).getId())
assertEquals(1, groups.get(1).getId())
assertEquals(2, groups.get(2).getId())
assertEquals(0, groups.get(3).getId())
assertEquals(1, groups.get(4).getId())
assertEquals(2, groups.get(5).getId())
assertEquals("A156", writer.toString())
assertEquals("A156345", writer.toString())
assertEquals("-1", writer.toString())
assertEquals("-1,", writer.toString())
assertEquals("-1", writer.toString())
assertEquals("-1,", writer.toString())
assertEquals("-1,", writer.toString())
assertEquals("null", writer.toString())
assertArrayEquals(model.value, model1.value)
assertEquals("string", m2.getString())
assertEquals(false, m2.isaBoolean())
assertEquals(true, m2.getaBoolean2().booleanValue())
assertEquals(0, m2.getAnInt())
assertEquals(888, m2.getInteger().intValue())
assertEquals(0, m2.getaShort())
assertEquals(88, m2.getaShort2().shortValue())
assertEquals('\u0000', m2.getaChar())
assertEquals('J', m2.getCharacter().charValue())
assertEquals(0, m2.getaByte())
assertEquals(8, m2.getaByte2().byteValue())
assertEquals(0, m2.getaLong())
assertEquals(8888, m2.getaLong2().longValue())
assertEquals("0.0", "" + m2.getaFloat())
assertEquals("8.8", "" + m2.getaFloat2())
assertEquals("0.0", "" + m2.getaDouble())
assertEquals("88.88", "" + m2.getaDouble2())
assertEquals("test", m2.getString())
assertEquals(true, m2.isaBoolean())
assertEquals(false, m2.getaBoolean2().booleanValue())
assertEquals(888, m2.getAnInt())
assertEquals(999, m2.getInteger().intValue())
assertEquals(88, m2.getaShort())
assertEquals(99, m2.getaShort2().shortValue())
assertEquals('J', m2.getaChar())
assertEquals('C', m2.getCharacter().charValue())
assertEquals(8, m2.getaByte())
assertEquals(9, m2.getaByte2().byteValue())
assertEquals(8888, m2.getaLong())
assertEquals(9999, m2.getaLong2().longValue())
assertEquals("8.8", "" + m2.getaFloat())
assertEquals("9.9", "" + m2.getaFloat2())
assertEquals("88.88", "" + m2.getaDouble())
assertEquals("99.99", "" + m2.getaDouble2())
assertEquals("[123,\"wenshao\"]", text)
assertEquals(vo.getId(), vo2.getId())
assertEquals(vo.getName(), vo2.getName())
assertEquals("[true,\"wenshao\"]", text)
assertEquals("[123.0,\"wenshao\"]", text)
assertEquals(vo.id, vo2.id)
assertEquals(vo.name, vo2.name)
assertNotNull(error)
assertNotNull(error)
assertNotNull(error)
assertEquals("[123,\"wenshao\"]", text)
assertEquals("[\"x\",\"wenshao\"]", text)
assertEquals("[123,\"wenshao\"]", text)
assertEquals(JSONObject.class, obj.getClass())
assertEquals(jsonObject, obj)
assertEquals(JSONObject.class, obj.getClass())
assertEquals(jsonObject, obj)
assertEquals(JSONObject.class, obj.getClass())
assertEquals(jsonObject, obj)
assertEquals(JSONObject.class, obj.getClass())
assertEquals(jsonObject.toJSONString(), JSON.toJSONString(obj))
assertEquals(JSONObject.class, obj.getClass())
assertEquals(JSONObject.class, obj.getClass())
assertEquals(jsonObject.toJSONString(), JSON.toJSONString(obj))
assertNotNull(exception)
assertEquals(NullPointerException.class, exception.getCause().getClass())
assertNotNull(exception)
assertEquals(NullPointerException.class, exception.getCause().getClass())
assertNotNull(exception)
assertEquals(NullPointerException.class, exception.getCause().getClass())
assertEquals("name", c1.name)
assertEquals(1, c1.id)
assertEquals("user", c2.name)
assertEquals(2, c2.id)
assertEquals("user", c2.name)
assertEquals(2, c2.id)
assertEquals("name", c1.name)
assertEquals(1, c1.id)
assertEquals("user", c2.name)
assertEquals(2, c2.id)
assertEquals("2", o.data.get(1))
assertEquals("2", o.data.get(1))
assertEquals("2", object.data.get(1))
assertEquals(1, a.a)
assertEquals(1, count.intValue())
assertEquals(1, b.a)
assertEquals(2, count.intValue())
assertEquals("{\"type\":\"TypeA\"}", text)
assertEquals("{}", text)
assertEquals("0.01", message.get("pay_fee").get(0))
assertEquals("0.01", pushHttpMessage.getMessage().get("pay_fee").get(0))
assertEquals("\"2017-06-29T10:36:30+08:00\"", JSON.toJSONString(date, SerializerFeature.UseISO8601DateFormat))
assertEquals("\"2017-08-15T20:00:00+08:00\"", JSON.toJSONString(date, SerializerFeature.UseISO8601DateFormat))
assertEquals("{\"_parentId\":\"001\"}", test)
assertEquals("{\"_parentId\":\"001\"}", testB)
assertEquals("{\"type\":\"TypeA\"}", text)
assertEquals(123, ((JSONObject) t).getIntValue("id"))
assertEquals(123, t1.id)
assertEquals(123, t2.id)
assertSame(type1, type2)
assertEquals("{}", test)
assertEquals("{\"ab\":{}}", testC)
assertEquals("{\"ab\":{}}", testD)
assertTrue(jsonString.contains("Mike"))
assertEquals("[\"a\",\"b\",\"\",\"d\",\"\"]", json)
assertNotNull(floorV2)
assertNotNull(floorV2.templateId)
assertEquals("x123", floorV2.templateId)
assertEquals("floorV2", floorV2.type)
assertEquals("{\"type\":\"floorV2\",\"templateId\":\"x123\"}", json2)
assertNotNull(model.date)
assertEquals("{\"test\":[\"11111\"]}", str)
assertNotNull(floorV2)
assertNotNull(floorV2.templateId)
assertEquals("x123", floorV2.templateId)
assertEquals("floorV2", floorV2.type)
assertEquals("{\"type\":\"floorV2\",\"templateId\":\"x123\"}", json2)
assertEquals(myException.getCode(), myException1.getCode())
assertEquals(myException.getMessage(), myException1.getMessage())
assertEquals('c', tb1.getC())
assertEquals('c', tb2.getC().charValue())
assertEquals('c', tb12.getC())
assertEquals('c', tb22.getC().charValue())
assertEquals("{\"id\":1,\"nt\":\"name\"}", jsonString)
assertTrue(parsed instanceof JSONObject)
assertEquals(JSONObject.class, ((JSONObject) parsed).get("data").getClass())
assertNotNull(result.data)
assertTrue(result.data instanceof Data)
assertNotNull(result2.data)
assertTrue(result2.data instanceof List)
assertEquals(0, result2.data.size())
fail("should be failed due to error json")
assertNull(test.idType)
assertNull(test.userType)
assertEquals("5", JSON.toJSONString(5L))
assertEquals("5.5", JSON.toJSONString(new BigDecimal("5.5")))
assertEquals("5", JSON.toJSONString(new BigDecimal("5")))
assertEquals("0.1", JSON.toJSONString(new BigDecimal("0.1")))
assertEquals("0.1", JSON.toJSONString(new BigDecimal("0.1")))
assertEquals("3.14159265358979323846264338327950288419716939937510", JSON.toJSONString(new BigDecimal("3.14159265358979323846264338327950288419716939937510")))
assertEquals(0, JSON.parse("+0"))
assertEquals("0", JSON.toJSONString(0))
assertEquals("1", JSON.toJSONString(1))
assertEquals("123456789", JSON.toJSONString(123456789))
assertEquals("-123456789", JSON.toJSONString(-123456789))
assertEquals("2147483647", JSON.toJSONString(Integer.MAX_VALUE))
assertEquals(text, JSON.toJSONString(JSON.parse(text)))
assertEquals("0.0", JSON.toJSONString(0.0))
assertEquals("-0.0", JSON.toJSONString(-0.0F))
assertEquals("1.0", JSON.toJSONString(1.0))
assertEquals("0.1", JSON.toJSONString(0.1))
assertEquals("3.141592653589793", JSON.toJSONString(Math.PI))
assertEquals("5.187848314319592E49", JSON.toJSONString(doubeValue))
assertTrue(json.equals("1.9275814160560206E-50") || json.equals("1.9275814160560204E-50"))
assertEquals(entity.getId(), entity2.getId())
assertEquals(entity.getName(), entity2.getName())
assertEquals(clazz.getName(), object.getClass().getName())
assertEquals(JSONObject.class, object2.getClass())
assertNotNull(parse.get(1))
assertFalse(JSONValidator.from(body).validate())
Assertions.assertEquals("Array", type.name())
assertEquals("{\"__password\":\"test\"}", str)
assertEquals("CMDB_UPDATE_SERVER", step.getComponentKey())
assertEquals("{\"path\":\"E:/my-code/test/test-fastjson.txt\"}", json)
assertEquals(fileSystemResource.getPath(), fsr1.getPath())
fail("should be failed due to error json", "A execução falhou por uma causa deliberada")
Assertions.assertTrue(validator.validate())
assertEquals("{\"agent\":null,\"creator\":{\"account\":\"account\",\"name\":\"name\",\"workid\":null},\"owner\":{\"account\":\"account\",\"name\":\"name\",\"workid\":\"\"}}", s)
assertNotNull(config.creator)
assertNull(config.agent)
assertEquals(json.getLong("A").longValue(), 55L)
assertEquals(json.getLong("B").longValue(), 55L)
assertEquals(json.getLong("C"), null)
assertEquals(json.getBooleanValue("K"), true)
assertEquals(json.getBoolean("K"), Boolean.TRUE)
assertEquals(json.getLong("A").longValue(), 55L)
assertEquals(json.getLong("B").longValue(), 55L)
assertEquals(json.getLong("C"), null)
assertEquals(json.getDate("A").getTime(), currentTimeMillis)
assertEquals(json.getDate("B").getTime(), currentTimeMillis)
assertEquals(json.getLong("C"), null)
assertEquals(json.getBoolean("A").booleanValue(), true)
assertEquals(json.getLong("C"), null)
assertEquals(json.getInteger("A").intValue(), 55)
assertEquals(json.getInteger("B").intValue(), 55)
assertEquals(json.getInteger("C"), null)
assertEquals("C", json.keySet().toArray()[0])
assertEquals("B", json.keySet().toArray()[1])
assertEquals("A", json.keySet().toArray()[2])
assertEquals(0, json.getIntValue("D"))
assertEquals(0L, json.getLongValue("D"))
assertEquals(false, json.getBooleanValue("D"))
assertEquals(true, json.isEmpty())
assertEquals(false, json.isEmpty())
assertEquals(true, json.containsKey("C"))
assertEquals(false, json.containsKey("D"))
assertEquals(true, json.containsValue(52))
assertEquals(false, json.containsValue(33))
assertEquals(null, json.remove("D"))
assertEquals(51L, json.remove("C"))
assertEquals(2, json.keySet().size())
assertEquals(2, json.values().size())
assertEquals(new BigDecimal("53"), json.getBigDecimal("A"))
assertEquals(3, json.values().size())
assertEquals(0, json.values().size())
assertEquals(99L, json.getLongValue("E"))
assertEquals(99, json.getIntValue("E"))
assertEquals("99", json.getString("E"))
assertEquals(null, json.getString("F"))
assertEquals(null, json.getDate("F"))
assertEquals(null, json.getBoolean("F"))
assertEquals(123, array.getIntValue("0"))
assertEquals(123, array.getLongValue("0"))
assertEquals(new BigDecimal("123"), array.getBigDecimal("0"))
assertEquals(222, array.getIntValue("1"))
assertEquals(3, array.getByte("2").byteValue())
assertEquals(3, array.getByteValue("2"))
assertEquals(3, array.getShort("2").shortValue())
assertEquals(3, array.getShortValue("2"))
assertEquals(new Integer(222), array.getInteger("1"))
assertEquals(new Long(222), array.getLong("1"))
assertEquals(new BigDecimal("222"), array.getBigDecimal("1"))
assertEquals(true, array.getBooleanValue("4"))
assertTrue(2.0F == array.getFloat("5").floatValue())
assertTrue(2.0F == array.getFloatValue("5"))
assertTrue(2.0D == array.getDouble("5").doubleValue())
assertTrue(2.0D == array.getDoubleValue("5"))
assertTrue(json.getJSONObject("obj") == null)
assertNull(object.getBytes("bytes"))
assertEquals(0, json.getJSONObject("obj").size())
assertEquals(0, json.getJSONObject("obj").size())
assertEquals("default", json.getOrDefault("testNonKet", "default"))
assertEquals("default", json.getOrDefault("testKey2", "default"))
assertEquals(0L, object.getLongValue("val"))
assertEquals(null, object.getLong("val"))
assertEquals(0, object.getIntValue("val"))
assertEquals(null, object.getInteger("val"))
assertEquals(null, object.getString("val"))
assertEquals(null, object.getJSONArray("val"))
assertEquals(null, object.getJSONObject("val"))
assertEquals(null, object.getBigInteger("val"))
assertEquals(null, object.getBigDecimal("val"))
assertEquals(null, object.getDouble("val"))
assertEquals(0D, object.getDoubleValue("val"))
assertEquals(null, object.getFloat("val"))
assertEquals(0F, object.getFloatValue("val"))
assertEquals(false, object.getBooleanValue("val"))
assertEquals(null, object.getBoolean("val"))
assertEquals((short) 0, object.getShortValue("val"))
assertEquals(null, object.getShort("val"))
assertEquals((byte) 0, object.getByteValue("val"))
assertEquals(null, object.getByte("val"))
assertEquals(0L, object.getLongValue("val"))
assertEquals(null, object.getLong("val"))
assertEquals(0, object.getIntValue("val"))
assertEquals(null, object.getInteger("val"))
assertEquals(null, object.getJSONArray("val"))
assertEquals(null, object.getJSONObject("val"))
assertEquals(null, object.getBigInteger("val"))
assertEquals(null, object.getBigDecimal("val"))
assertEquals(null, object.getFloat("val"))
assertEquals(null, object.getDouble("val"))
assertEquals(null, object.getBoolean("val"))
assertEquals(null, object.getByte("val"))
assertEquals(null, object.getShort("val"))
assertEquals(0, object.getByteValue("val"))
assertEquals(0, object.getShortValue("val"))
assertEquals(0L, object.getLongValue("val"))
assertEquals(null, object.getLong("val"))
assertEquals(0, object.getIntValue("val"))
assertEquals(null, object.getInteger("val"))
assertEquals(null, object.getJSONArray("val"))
assertEquals(null, object.getJSONObject("val"))
assertEquals(null, object.getBigInteger("val"))
assertEquals(null, object.getBigDecimal("val"))
assertEquals(null, object.getBoolean("val"))
assertEquals(null, object.getFloat("val"))
assertEquals(null, object.getDouble("val"))
assertEquals(null, object.getByte("val"))
assertEquals(null, object.getShort("val"))
assertEquals(0, object.getByteValue("val"))
assertEquals(0, object.getShortValue("val"))
assertNotNull(object1)
assertNotNull(object1)
assertEquals(bean.id, object1.get("id"))
assertNotNull(object2)
assertEquals(bean.id, object2.get("id"))
assertEquals(Boolean.TRUE, new JSONObject().fluentPut("val", 1).getBoolean("val"))
assertEquals(Boolean.TRUE, new JSONObject().fluentPut("val", "true").getBoolean("val"))
assertEquals(Boolean.FALSE, new JSONObject().fluentPut("val", Boolean.FALSE).getBoolean("val"))
assertEquals(Boolean.FALSE, new JSONObject().fluentPut("val", "FALSE").getBoolean("val"))
assertEquals(BigInteger.valueOf(12), new JSONObject().fluentPut("val", 12).getBigInteger("val"))
assertEquals(BigInteger.valueOf(12), new JSONObject().fluentPut("val", (byte) 12).getBigInteger("val"))
assertEquals(BigInteger.valueOf(12), new JSONObject().fluentPut("val", (short) 12).getBigInteger("val"))
assertEquals(BigInteger.valueOf(12), new JSONObject().fluentPut("val", 12L).getBigInteger("val"))
assertEquals(BigInteger.valueOf(12), new JSONObject().fluentPut("val", 12F).getBigInteger("val"))
assertEquals(BigInteger.valueOf(12), new JSONObject().fluentPut("val", 12D).getBigInteger("val"))
assertEquals(BigInteger.valueOf(12), new JSONObject().fluentPut("val", new BigDecimal("12")).getBigInteger("val"))
assertEquals(BigInteger.valueOf(12), new JSONObject().fluentPut("val", new BigInteger("12")).getBigInteger("val"))
assertEquals(BigInteger.valueOf(12), new JSONObject().fluentPut("val", "12").getBigInteger("val"))
assertEquals(0, object.size())
assertEquals(Integer.valueOf(123), object.getObject("id", new TypeReference<Integer>() {
}))
assertEquals(Integer.valueOf(123), object.getObject("id", (TypeReference) null))
assertEquals(123, beanInterface.getId())
assertEquals(object.hashCode(), beanInterface.hashCode())
assertEquals(object.toString(), beanInterface.toString())
assertNotNull(bean)
assertTrue(jsonObject.isEmpty())
assertTrue(jsonObject.values().isEmpty())
assertNull(jsonObject.remove("id"))
assertNull(jsonObject.getBytes("id"))
assertEquals(0, jsonObject.getBytes("bytes").length)
assertEquals("abc中华人民共和国", new String(jsonObject.getBytes("bytes")))
Assertions.assertEquals(color, color2)
Assertions.assertEquals(color, color3)
Assertions.assertEquals(color, color4)
Assertions.assertEquals(color, color2)
Assertions.assertEquals(color, color2)
assertNotNull(result)
assertEquals("123", result.id)
assertEquals("你好世界", result.name)
assertEquals(60, result.score)
Assertions.assertEquals(1461081600000L, model.date.getTime())
Assertions.assertEquals(1461081600321L, model.date.getTime())
Assertions.assertEquals("{\"value\":\"" + format.format(object.getValue()) + "\"}", text)
Assertions.assertEquals("{\"value\":" + v.getValue().getTime() + "}", text)
Assertions.assertEquals("{\"value\":" + v.getValue().getTime() + "}", text)
Assertions.assertEquals("{\"value\":" + v.getValue().getTime() + "}", text)
Assertions.assertEquals("{\"value\":null}", text)
Assertions.assertEquals(v1.getValue(), v.getValue())
Assertions.assertEquals("{\"value\":null}", text)
Assertions.assertEquals(null, v1.getValue())
Assertions.assertEquals("{\"value\":\"" + format.format(object.getValue()) + "\"}", text)
assertEquals("{\"date\":\"2018-07-18T10:44:16.055-05:00\"}", iso)
assertEquals("java.util.Date", object.get("@type"))
assertEquals(true, object.get("value"))
assertEquals("java.util.Date", object.get("@type"))
assertEquals(true, object.get(1))
assertEquals("{\"date\":\"2018-05-21T14:39:44.907+08:00\"}", str)
Assertions.assertEquals("{\"date\":1471939192128}", text)
Assertions.assertEquals("{\"date\":1471939192128}", text)
assertEquals("{\"publishTime\":\"" + t2 + "\",\"serverTime\":\"" + t1 + "\",\"startDate\":\"" + t3 + "\"}", text)
assertEquals(t2, df4.format(model2.publishTime))
assertEquals(t1, df5.format(model2.serverTime))
assertEquals(t3, df6.format(model2.getStartDate()))
Assertions.assertEquals(1461081600321L, ((Date) model.getObject("date", Date.class)).getTime())
assertEquals("{\"value\":" + JSON.toJSONString(format.format(v.getValue())) + "}", text)
assertEquals("{\"value\":" + JSON.toJSONString(format.format(v.getValue())) + "}", text)
assertEquals("{\"value\":" + JSON.toJSONString(format.format(v.getValue())) + "}", text)
assertEquals("{\"value\":null}", text)
assertEquals(v1.getValue(), v.getValue())
assertEquals("{\"value\":null}", text)
assertEquals(null, v1.getValue())
assertEquals("{\"value\":" + JSON.toJSONString(format.format(v.getValue())) + "}", text)
assertEquals("{\"value\":" + JSON.toJSONString(format.format(v.getValue())) + "}", text)
assertEquals("{\"value\":" + JSON.toJSONString(format.format(v.getValue())) + "}", text)
assertEquals("{\"value\":null}", text)
assertEquals(v1.getValue(), v.getValue())
assertEquals("{\"value\":null}", text)
assertEquals(null, v1.getValue())
Assertions.assertEquals(1461081600000L, model.date.getTime())
Assertions.assertEquals(date.getTime(), model.value.getTime())
Assertions.assertEquals(TimeZone.getTimeZone("Asia/Shanghai"), reader.getTimeZone())
Assertions.assertEquals(Locale.CHINA, reader.getLocal())
assertEquals("{\"value\":1654686106601}", text)
assertEquals(v1.getValue(), v.getValue())
assertEquals("{\"value\":null}", text)
assertEquals(v1.getValue(), v.getValue())
assertEquals("{\"value\":null}", text)
assertEquals(v1.getValue(), v.getValue())
assertEquals("{\"value\":null}", text)
assertEquals(null, v1.getValue())
assertNull(vo.getCalendar())
assertEquals(vo.getCalendar().getTimeInMillis(), vo2.getCalendar().getTimeInMillis())
assertEquals(vo.getCalendar().getTimeInMillis(), vo2.getCalendar().getTimeInMillis())
assertEquals(vo.getCalendar().getTimeInMillis(), vo2.getCalendar().getTimeInMillis())
assertEquals(Calendar.class, JSONFactory.getDefaultObjectReaderProvider().getObjectReader(Calendar.class).getObjectClass())
assertEquals("1324138987429", JSON.toJSONString(date))
assertEquals("new Date(1324138987429)", JSON.toJSONString(date, SerializerFeature.WriteClassName))
assertEquals("\"2011-12-18 00:23:07\"", JSON.toJSONString(date, SerializerFeature.WriteDateUseDateFormat))
assertEquals("\"2011-12-18 00:23:07.429\"", JSON.toJSONStringWithDateFormat(date, "yyyy-MM-dd HH:mm:ss.SSS"))
assertEquals(1539308902000L, date.getTime())
Assertions.assertEquals(1324138987429L, ((Date) JSON.parse("new Date(1324138987429)")).getTime())
Assertions.assertEquals(1324138987429L, ((Date) JSON.parse("new \n\t\r\f\bDate(1324138987429)")).getTime())
Assertions.assertEquals("{\"value\":" + JSON.toJSONString(format.format(v.getValue())) + "}", text)
Assertions.assertEquals("{\"value\":" + JSON.toJSONString(format.format(v.getValue())) + "}", text)
Assertions.assertEquals("{\"value\":" + JSON.toJSONString(format.format(v.getValue())) + "}", text)
Assertions.assertEquals("{\"value\":null}", text)
Assertions.assertEquals(v1.getValue(), v.getValue())
Assertions.assertEquals("{\"value\":null}", text)
Assertions.assertEquals(v1.getValue(), v.getValue())
Assertions.assertEquals("{\"value\":null}", text)
Assertions.assertEquals(null, v1.getValue())
Assertions.assertEquals("{\"value\":\"" + format.format(object.getValue()) + "\"}", text)
assertEquals(2016, calendar.get(Calendar.YEAR))
assertEquals(4, calendar.get(Calendar.MONTH))
assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH))
assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY))
assertEquals(0, calendar.get(Calendar.MINUTE))
assertEquals(0, calendar.get(Calendar.SECOND))
assertEquals(0, calendar.get(Calendar.MILLISECOND))
assertEquals(2017, calendar.get(Calendar.YEAR))
assertEquals(2, calendar.get(Calendar.MONTH))
assertEquals(1, calendar.get(Calendar.DAY_OF_MONTH))
assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY))
assertEquals(0, calendar.get(Calendar.MINUTE))
assertEquals(0, calendar.get(Calendar.SECOND))
assertEquals(0, calendar.get(Calendar.MILLISECOND))
assertEquals(2016, calendar.get(Calendar.YEAR))
assertEquals(4, calendar.get(Calendar.MONTH))
assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH))
assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY))
assertEquals(0, calendar.get(Calendar.MINUTE))
assertEquals(0, calendar.get(Calendar.SECOND))
assertEquals(0, calendar.get(Calendar.MILLISECOND))
assertEquals(2017, calendar.get(Calendar.YEAR))
assertEquals(2, calendar.get(Calendar.MONTH))
assertEquals(1, calendar.get(Calendar.DAY_OF_MONTH))
assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY))
assertEquals(0, calendar.get(Calendar.MINUTE))
assertEquals(0, calendar.get(Calendar.SECOND))
assertEquals(0, calendar.get(Calendar.MILLISECOND))
Assertions.assertEquals(1461081600321L, ((Date) model.getObject("date", Date.class)).getTime())
assertEquals("{\"value\":\"" + format.format(object.getValue()) + "\"}", text)
assertEquals("{\"value\":\"" + format.format(object.getValue()) + "\"}", text)
Assertions.assertEquals(1461081600000L, model.date.getTime())
Assertions.assertEquals(2016, calendar.get(Calendar.YEAR))
Assertions.assertEquals(4, calendar.get(Calendar.MONTH))
Assertions.assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH))
Assertions.assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY))
Assertions.assertEquals(0, calendar.get(Calendar.MINUTE))
Assertions.assertEquals(0, calendar.get(Calendar.SECOND))
Assertions.assertEquals(0, calendar.get(Calendar.MILLISECOND))
Assertions.assertEquals(2016, calendar.get(Calendar.YEAR))
Assertions.assertEquals(4, calendar.get(Calendar.MONTH))
Assertions.assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH))
Assertions.assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY))
Assertions.assertEquals(0, calendar.get(Calendar.MINUTE))
Assertions.assertEquals(0, calendar.get(Calendar.SECOND))
Assertions.assertEquals(0, calendar.get(Calendar.MILLISECOND))
Assertions.assertEquals(2016, calendar.get(Calendar.YEAR))
Assertions.assertEquals(4, calendar.get(Calendar.MONTH))
Assertions.assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH))
Assertions.assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY))
Assertions.assertEquals(0, calendar.get(Calendar.MINUTE))
Assertions.assertEquals(0, calendar.get(Calendar.SECOND))
Assertions.assertEquals(0, calendar.get(Calendar.MILLISECOND))
Assertions.assertEquals(2016, calendar.get(Calendar.YEAR))
Assertions.assertEquals(4, calendar.get(Calendar.MONTH))
Assertions.assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH))
Assertions.assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY))
Assertions.assertEquals(0, calendar.get(Calendar.MINUTE))
Assertions.assertEquals(0, calendar.get(Calendar.SECOND))
Assertions.assertEquals(0, calendar.get(Calendar.MILLISECOND))
Assertions.assertEquals(2016, calendar.get(Calendar.YEAR))
Assertions.assertEquals(4, calendar.get(Calendar.MONTH))
Assertions.assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH))
Assertions.assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY))
Assertions.assertEquals(0, calendar.get(Calendar.MINUTE))
Assertions.assertEquals(0, calendar.get(Calendar.SECOND))
Assertions.assertEquals(0, calendar.get(Calendar.MILLISECOND))
Assertions.assertEquals(2016, calendar.get(Calendar.YEAR))
Assertions.assertEquals(4, calendar.get(Calendar.MONTH))
Assertions.assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH))
Assertions.assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY))
Assertions.assertEquals(0, calendar.get(Calendar.MINUTE))
Assertions.assertEquals(0, calendar.get(Calendar.SECOND))
Assertions.assertEquals(0, calendar.get(Calendar.MILLISECOND))
Assertions.assertEquals(2016, calendar.get(Calendar.YEAR))
Assertions.assertEquals(4, calendar.get(Calendar.MONTH))
Assertions.assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH))
Assertions.assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY))
Assertions.assertEquals(0, calendar.get(Calendar.MINUTE))
Assertions.assertEquals(0, calendar.get(Calendar.SECOND))
Assertions.assertEquals(0, calendar.get(Calendar.MILLISECOND))
Assertions.assertEquals(2016, calendar.get(Calendar.YEAR))
Assertions.assertEquals(4, calendar.get(Calendar.MONTH))
Assertions.assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH))
Assertions.assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY))
Assertions.assertEquals(0, calendar.get(Calendar.MINUTE))
Assertions.assertEquals(0, calendar.get(Calendar.SECOND))
Assertions.assertEquals(0, calendar.get(Calendar.MILLISECOND))
Assertions.assertEquals(2016, calendar.get(Calendar.YEAR))
Assertions.assertEquals(4, calendar.get(Calendar.MONTH))
Assertions.assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH))
Assertions.assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY))
Assertions.assertEquals(0, calendar.get(Calendar.MINUTE))
Assertions.assertEquals(0, calendar.get(Calendar.SECOND))
Assertions.assertEquals(0, calendar.get(Calendar.MILLISECOND))
Assertions.assertEquals(2016, calendar.get(Calendar.YEAR))
Assertions.assertEquals(4, calendar.get(Calendar.MONTH))
Assertions.assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH))
Assertions.assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY))
Assertions.assertEquals(0, calendar.get(Calendar.MINUTE))
Assertions.assertEquals(0, calendar.get(Calendar.SECOND))
Assertions.assertEquals(0, calendar.get(Calendar.MILLISECOND))
Assertions.assertEquals(2016, calendar.get(Calendar.YEAR))
Assertions.assertEquals(4, calendar.get(Calendar.MONTH))
Assertions.assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH))
Assertions.assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY))
Assertions.assertEquals(0, calendar.get(Calendar.MINUTE))
Assertions.assertEquals(0, calendar.get(Calendar.SECOND))
Assertions.assertEquals(0, calendar.get(Calendar.MILLISECOND))
Assertions.assertEquals(2016, calendar.get(Calendar.YEAR))
Assertions.assertEquals(4, calendar.get(Calendar.MONTH))
Assertions.assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH))
Assertions.assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY))
Assertions.assertEquals(0, calendar.get(Calendar.MINUTE))
Assertions.assertEquals(0, calendar.get(Calendar.SECOND))
Assertions.assertEquals(0, calendar.get(Calendar.MILLISECOND))
assertEquals("{}", JSON.toJSONString(model))
assertEquals("{\"value\":\"\"}", JSON.toJSONString(model, SerializerFeature.WriteNullStringAsEmpty))
assertEquals("{}", JSON.toJSONString(model))
assertEquals("{\"value\":0}", JSON.toJSONString(model, SerializerFeature.WriteNullNumberAsZero))
assertEquals("{}", JSON.toJSONString(model))
assertEquals("{\"value\":0}", JSON.toJSONString(model, SerializerFeature.WriteNullNumberAsZero))
assertEquals("{}", JSON.toJSONString(model))
assertEquals("{\"value\":false}", JSON.toJSONString(model, SerializerFeature.WriteNullBooleanAsFalse))
assertEquals("{}", JSON.toJSONString(model))
assertEquals("{\"value\":[]}", JSON.toJSONString(model, SerializerFeature.WriteNullListAsEmpty))
Assertions.assertEquals(expectedStr, actualStr)
Assertions.assertEquals(expectedBean.getId(), actualBean.getString("id"))
Assertions.assertEquals(expectedBean.getNetValueDate(), actualBean.getInteger("net_value_date"))
assertEquals("{\"userName\":\"test\",\"user_id\":1001}", text)
assertEquals(1001, model2.userId)
assertEquals("test", model2.userName)
assertEquals("{\"userName\":\"test\",\"user_id\":\"1001\"}", text)
assertEquals(1001, model2.userId)
assertEquals("test", model2.userName)
assertEquals("{\"endTime\":\"2017-11-14\",\"startTime\":\"2017-11-04\"}", text)
assertEquals("aa", aa1.getName())
assertEquals("java.lang.Exception", c2.getE().getClass().getName())
assertEquals("{}", JSON.toJSONString(model))
assertEquals("{\"value\":\"\"}", JSON.toJSONString(model, SerializerFeature.WriteNullStringAsEmpty))
assertEquals("{}", JSON.toJSONString(model))
assertEquals("{\"value\":\"\"}", JSON.toJSONString(model, SerializerFeature.WriteNullStringAsEmpty))
assertEquals("{}", JSON.toJSONString(model))
assertEquals("{\"value\":0}", JSON.toJSONString(model, SerializerFeature.WriteNullNumberAsZero))
assertEquals("{}", JSON.toJSONString(model))
assertEquals("{\"value\":0}", JSON.toJSONString(model, SerializerFeature.WriteNullNumberAsZero))
assertEquals("{}", JSON.toJSONString(model))
assertEquals("{\"value\":false}", JSON.toJSONString(model, SerializerFeature.WriteNullBooleanAsFalse))
assertEquals("{}", JSON.toJSONString(model))
assertEquals("{\"value\":[]}", JSON.toJSONString(model, SerializerFeature.WriteNullListAsEmpty))
assertEquals(3, paths.size())
assertEquals("1001", pathValues.get("$.id"))
assertEquals("1001", pathValues.get("$.name"))
assertSame(person, pathValues.get("$"))
Assertions.assertNotNull(error)
Assertions.assertNotNull(error)
Assertions.assertNotNull(error)
Assertions.assertNotNull(error)
Assertions.assertNotNull(model.value)
assertNotNull(newsDetail)
assertEquals(138042533, person.Id)
assertEquals("example", person.name)
assertEquals(172.0D, person.height)
assertSame(Size.Big, JSON.parseObject("\"Big\"", Size.class))
assertSame(Size.Big, JSON.parseObject("\"big\"", Size.class))
assertNull(JSON.parseObject("\"Large\"", Size.class))
assertSame(Size.LL, JSON.parseObject("\"L3\"", Size.class))
assertSame(Size.Small, JSON.parseObject("\"Little\"", Size.class))
assertSame(Size.Small, model.size)
assertEquals("[1001,null]", json)
assertEquals("[1001,null]", json)
assertEquals("null", JSONArray.toJSONString(null))
assertEquals("[null]", JSONArray.toJSONString(Collections.singletonList(null)))
assertEquals(true, array.isEmpty())
assertEquals(false, array.isEmpty())
assertEquals(true, array.contains(1))
assertEquals(1, array.toArray()[0])
assertEquals(true, array.containsAll(Collections.singletonList(1)))
assertEquals(true, array.remove(Integer.valueOf(1)))
assertEquals(true, array.isEmpty())
assertEquals(1, array.size())
assertEquals(0, array.size())
assertEquals(3, array.size())
assertEquals(true, array.retainAll(Arrays.asList(1, 2)))
assertEquals(2, array.size())
assertEquals(true, array.retainAll(Arrays.asList(2, 4)))
assertEquals(1, array.size())
assertEquals(4, array.toArray()[0])
assertEquals(4, array.toArray()[0])
assertEquals(0, array.size())
assertEquals(2, array.indexOf(3))
assertEquals(6, array.lastIndexOf(3))
assertEquals(123, array.getByte(0).byteValue())
assertEquals(123, array.getByteValue(0))
assertEquals(123, array.getShort(0).shortValue())
assertEquals(123, array.getShortValue(0))
assertTrue(123F == array.getFloat(0).floatValue())
assertTrue(123F == array.getFloatValue(0))
assertTrue(123D == array.getDouble(0).doubleValue())
assertTrue(123D == array.getDoubleValue(0))
assertEquals(123, array.getIntValue(0))
assertEquals(123, array.getLongValue(0))
assertEquals(new BigDecimal("123"), array.getBigDecimal(0))
assertEquals(222, array.getIntValue(1))
assertEquals(new Integer(222), array.getInteger(1))
assertEquals(new Long(222), array.getLong(1))
assertEquals(new BigDecimal("222"), array.getBigDecimal(1))
assertEquals(true, array.getBooleanValue(4))
assertEquals(Boolean.TRUE, array.getBoolean(4))
assertEquals(0, array.getIntValue(5))
assertEquals(0, array.getLongValue(5))
assertEquals(null, array.getInteger(5))
assertEquals(null, array.getLong(5))
assertEquals(null, array.getBigDecimal(5))
assertEquals(null, array.getBoolean(5))
assertEquals(false, array.getBooleanValue(5))
assertTrue(array.getJSONObject(0) == null)
assertEquals(0, array.getJSONObject(0).size())
assertEquals(0, array.getJSONObject(0).size())
assertEquals(0, array.getJSONArray(0).size())
assertEquals(0, array.getJSONArray(0).size())
assertEquals(1, list.size())
assertEquals(3, list.get(0))
assertEquals(1, array.size())
assertEquals(123, array.getObject(0, User.class).getId())
assertEquals(0L, array.getLongValue(0))
assertEquals(null, array.getLong(0))
assertEquals(0, array.getIntValue(0))
assertEquals(null, array.getInteger(0))
assertEquals(null, array.getString(0))
assertEquals(null, array.getJSONArray(0))
assertEquals(null, array.getJSONObject(0))
assertEquals(0L, array.getLongValue(0))
assertEquals(null, array.getLong(0))
assertEquals(0, array.getIntValue(0))
assertEquals(null, array.getInteger(0))
assertEquals(null, array.getString(0))
assertEquals(null, array.getJSONArray(0))
assertEquals(null, array.getJSONObject(0))
assertEquals(null, array.getBigInteger(0))
assertEquals(null, array.getBigDecimal(0))
assertEquals(null, array.getDouble(0))
assertEquals(0D, array.getDoubleValue(0))
assertEquals(null, array.getFloat(0))
assertEquals(0F, array.getFloatValue(0))
assertEquals(false, array.getBooleanValue(0))
assertEquals(null, array.getBoolean(0))
assertEquals((short) 0, array.getShortValue(0))
assertEquals(null, array.getShort(0))
assertEquals((byte) 0, array.getByteValue(0))
assertEquals(null, array.getByte(0))
assertEquals(0L, object.getLongValue(0))
assertEquals(null, object.getLong(0))
assertEquals(0, object.getIntValue(0))
assertEquals(null, object.getInteger(0))
assertEquals(null, object.getJSONArray(0))
assertEquals(null, object.getJSONObject(0))
assertEquals(null, object.getBigInteger(0))
assertEquals(null, object.getBigDecimal(0))
assertEquals(null, object.getFloat(0))
assertEquals(null, object.getDouble(0))
assertEquals(null, object.getBoolean(0))
assertEquals(null, object.getByte(0))
assertEquals(null, object.getShort(0))
assertEquals(0, object.getByteValue(0))
assertEquals(0, object.getShortValue(0))
assertEquals(0L, object.getLongValue(0))
assertEquals(null, object.getLong(0))
assertEquals(0, object.getIntValue(0))
assertEquals(null, object.getInteger(0))
assertEquals(null, object.getJSONArray(0))
assertEquals(null, object.getJSONObject(0))
assertEquals(null, object.getBigInteger(0))
assertEquals(null, object.getBigDecimal(0))
assertEquals(null, object.getBoolean(0))
assertEquals(null, object.getFloat(0))
assertEquals(null, object.getDouble(0))
assertEquals(null, object.getByte(0))
assertEquals(null, object.getShort(0))
assertEquals(0, object.getByteValue(0))
assertEquals(0, object.getShortValue(0))
assertEquals(BigInteger.valueOf(12), new JSONArray().fluentAdd(12).getBigInteger(0))
assertEquals(BigInteger.valueOf(12), new JSONArray().fluentAdd((byte) 12).getBigInteger(0))
assertEquals(BigInteger.valueOf(12), new JSONArray().fluentAdd((short) 12).getBigInteger(0))
assertEquals(BigInteger.valueOf(12), new JSONArray().fluentAdd(12L).getBigInteger(0))
assertEquals(BigInteger.valueOf(12), new JSONArray().fluentAdd(12F).getBigInteger(0))
assertEquals(BigInteger.valueOf(12), new JSONArray().fluentAdd(12D).getBigInteger(0))
assertEquals(BigInteger.valueOf(12), new JSONArray().fluentAdd(new BigDecimal("12")).getBigInteger(0))
assertEquals(BigInteger.valueOf(12), new JSONArray().fluentAdd(new BigInteger("12")).getBigInteger(0))
assertEquals(BigInteger.valueOf(12), new JSONArray().fluentAdd("12").getBigInteger(0))
assertEquals(BigDecimal.valueOf(12), new JSONArray().fluentAdd(12).getBigDecimal(0))
assertEquals(BigDecimal.valueOf(12), new JSONArray().fluentAdd((byte) 12).getBigDecimal(0))
assertEquals(BigDecimal.valueOf(12), new JSONArray().fluentAdd((short) 12).getBigDecimal(0))
assertEquals(BigDecimal.valueOf(12), new JSONArray().fluentAdd(12L).getBigDecimal(0))
assertEquals(BigDecimal.valueOf(12F), new JSONArray().fluentAdd(12F).getBigDecimal(0))
assertEquals(BigDecimal.valueOf(12D), new JSONArray().fluentAdd(12D).getBigDecimal(0))
assertEquals(BigDecimal.valueOf(12), new JSONArray().fluentAdd(new BigDecimal("12")).getBigDecimal(0))
assertEquals(BigDecimal.valueOf(12), new JSONArray().fluentAdd(new BigInteger("12")).getBigDecimal(0))
assertEquals(BigDecimal.valueOf(12), new JSONArray().fluentAdd("12").getBigDecimal(0))
assertEquals(Float.valueOf(12), new JSONArray().fluentAdd(12).getFloatValue(0))
assertEquals(Float.valueOf(12), new JSONArray().fluentAdd((byte) 12).getFloatValue(0))
assertEquals(Float.valueOf(12), new JSONArray().fluentAdd((short) 12).getFloatValue(0))
assertEquals(Float.valueOf(12), new JSONArray().fluentAdd(12L).getFloatValue(0))
assertEquals(Float.valueOf(12F), new JSONArray().fluentAdd(12F).getFloatValue(0))
assertEquals(Float.valueOf(12), new JSONArray().fluentAdd(12D).getFloatValue(0))
assertEquals(Float.valueOf(12), new JSONArray().fluentAdd(new BigDecimal("12")).getFloatValue(0))
assertEquals(Float.valueOf(12), new JSONArray().fluentAdd(new BigInteger("12")).getFloatValue(0))
assertEquals(Float.valueOf(12), new JSONArray().fluentAdd("12").getFloatValue(0))
assertEquals(Float.valueOf(12), new JSONArray().fluentAdd(12).getFloat(0))
assertEquals(Float.valueOf(12), new JSONArray().fluentAdd((byte) 12).getFloat(0))
assertEquals(Float.valueOf(12), new JSONArray().fluentAdd((short) 12).getFloat(0))
assertEquals(Float.valueOf(12), new JSONArray().fluentAdd(12L).getFloat(0))
assertEquals(Float.valueOf(12F), new JSONArray().fluentAdd(12F).getFloat(0))
assertEquals(Float.valueOf(12), new JSONArray().fluentAdd(12D).getFloat(0))
assertEquals(Float.valueOf(12), new JSONArray().fluentAdd(new BigDecimal("12")).getFloat(0))
assertEquals(Float.valueOf(12), new JSONArray().fluentAdd(new BigInteger("12")).getFloat(0))
assertEquals(Float.valueOf(12), new JSONArray().fluentAdd("12").getFloat(0))
assertEquals(Double.valueOf(12), new JSONArray().fluentAdd(12).getDoubleValue(0))
assertEquals(Double.valueOf(12), new JSONArray().fluentAdd((byte) 12).getDoubleValue(0))
assertEquals(Double.valueOf(12), new JSONArray().fluentAdd((short) 12).getDoubleValue(0))
assertEquals(Double.valueOf(12), new JSONArray().fluentAdd(12L).getDoubleValue(0))
assertEquals(Double.valueOf(12F), new JSONArray().fluentAdd(12F).getDoubleValue(0))
assertEquals(Double.valueOf(12), new JSONArray().fluentAdd(12D).getDoubleValue(0))
assertEquals(Double.valueOf(12), new JSONArray().fluentAdd(new BigDecimal("12")).getDoubleValue(0))
assertEquals(Double.valueOf(12), new JSONArray().fluentAdd(new BigInteger("12")).getDoubleValue(0))
assertEquals(Double.valueOf(12), new JSONArray().fluentAdd("12").getDoubleValue(0))
assertEquals(Double.valueOf(12), new JSONArray().fluentAdd(12).getDouble(0))
assertEquals(Double.valueOf(12), new JSONArray().fluentAdd((byte) 12).getDouble(0))
assertEquals(Double.valueOf(12), new JSONArray().fluentAdd((short) 12).getDouble(0))
assertEquals(Double.valueOf(12), new JSONArray().fluentAdd(12L).getDouble(0))
assertEquals(Double.valueOf(12F), new JSONArray().fluentAdd(12F).getDouble(0))
assertEquals(Double.valueOf(12), new JSONArray().fluentAdd(12D).getDouble(0))
assertEquals(Double.valueOf(12), new JSONArray().fluentAdd(new BigDecimal("12")).getDouble(0))
assertEquals(Double.valueOf(12), new JSONArray().fluentAdd(new BigInteger("12")).getDouble(0))
assertEquals(Double.valueOf(12), new JSONArray().fluentAdd("12").getDouble(0))
assertEquals(Boolean.TRUE, new JSONArray().fluentAdd(1).getBoolean(0))
assertEquals(Boolean.TRUE, new JSONArray().fluentAdd("true").getBoolean(0))
assertEquals(Boolean.FALSE, new JSONArray().fluentAdd(Boolean.FALSE).getBoolean(0))
assertEquals(Boolean.FALSE, new JSONArray().fluentAdd("FALSE").getBoolean(0))
assertEquals(true, new JSONArray().fluentAdd(1).getBooleanValue(0))
assertEquals(true, new JSONArray().fluentAdd("true").getBooleanValue(0))
assertEquals(false, new JSONArray().fluentAdd("FALSE").getBooleanValue(0))
assertEquals(false, new JSONArray().fluentAdd(Boolean.FALSE).getBooleanValue(0))
assertEquals((short) 12, new JSONArray().fluentAdd(12).getShortValue(0))
assertEquals((short) 12, new JSONArray().fluentAdd((byte) 12).getShortValue(0))
assertEquals((short) 12, new JSONArray().fluentAdd((short) 12).getShortValue(0))
assertEquals((short) 12, new JSONArray().fluentAdd(12L).getShortValue(0))
assertEquals((short) 12, new JSONArray().fluentAdd(12F).getShortValue(0))
assertEquals((short) 12, new JSONArray().fluentAdd(12D).getShortValue(0))
assertEquals((short) 12, new JSONArray().fluentAdd(new BigDecimal("12")).getShortValue(0))
assertEquals((short) 12, new JSONArray().fluentAdd(new BigInteger("12")).getShortValue(0))
assertEquals((short) 12, new JSONArray().fluentAdd("12").getShortValue(0))
assertEquals(Short.valueOf((short) 12), new JSONArray().fluentAdd(12).getShort(0))
assertEquals(Short.valueOf((short) 12), new JSONArray().fluentAdd((byte) 12).getShort(0))
assertEquals(Short.valueOf((short) 12), new JSONArray().fluentAdd((short) 12).getShort(0))
assertEquals(Short.valueOf((short) 12), new JSONArray().fluentAdd(12L).getShort(0))
assertEquals(Short.valueOf((short) 12), new JSONArray().fluentAdd(12F).getShort(0))
assertEquals(Short.valueOf((short) 12), new JSONArray().fluentAdd(12D).getShort(0))
assertEquals(Short.valueOf((short) 12), new JSONArray().fluentAdd(new BigDecimal("12")).getShort(0))
assertEquals(Short.valueOf((short) 12), new JSONArray().fluentAdd(new BigInteger("12")).getShort(0))
assertEquals(Short.valueOf((short) 12), new JSONArray().fluentAdd(Short.valueOf((short) 12)).getShort(0))
assertEquals(Short.valueOf((short) 12), new JSONArray().fluentAdd(Byte.valueOf((byte) 12)).getShort(0))
assertEquals(Short.valueOf((short) 12), new JSONArray().fluentAdd("12").getShort(0))
assertEquals((byte) 12, new JSONArray().fluentAdd(12).getByteValue(0))
assertEquals((byte) 12, new JSONArray().fluentAdd((byte) 12).getByteValue(0))
assertEquals((byte) 12, new JSONArray().fluentAdd((short) 12).getByteValue(0))
assertEquals((byte) 12, new JSONArray().fluentAdd(12L).getByteValue(0))
assertEquals((byte) 12, new JSONArray().fluentAdd(12F).getByteValue(0))
assertEquals((byte) 12, new JSONArray().fluentAdd(12D).getByteValue(0))
assertEquals((byte) 12, new JSONArray().fluentAdd(new BigDecimal("12")).getByteValue(0))
assertEquals((byte) 12, new JSONArray().fluentAdd(new BigInteger("12")).getByteValue(0))
assertEquals((byte) 12, new JSONArray().fluentAdd("12").getByteValue(0))
assertEquals(Byte.valueOf((byte) 12), new JSONArray().fluentAdd(12).getByte(0))
assertEquals(Byte.valueOf((byte) 12), new JSONArray().fluentAdd((byte) 12).getByte(0))
assertEquals(Byte.valueOf((byte) 12), new JSONArray().fluentAdd((short) 12).getByte(0))
assertEquals(Byte.valueOf((byte) 12), new JSONArray().fluentAdd(12L).getByte(0))
assertEquals(Byte.valueOf((byte) 12), new JSONArray().fluentAdd(12F).getByte(0))
assertEquals(Byte.valueOf((byte) 12), new JSONArray().fluentAdd(12D).getByte(0))
assertEquals(Byte.valueOf((byte) 12), new JSONArray().fluentAdd(new BigDecimal("12")).getByte(0))
assertEquals(Byte.valueOf((byte) 12), new JSONArray().fluentAdd(new BigInteger("12")).getByte(0))
assertEquals(Byte.valueOf((byte) 12), new JSONArray().fluentAdd(Short.valueOf((short) 12)).getByte(0))
assertEquals(Byte.valueOf((byte) 12), new JSONArray().fluentAdd(Byte.valueOf((byte) 12)).getByte(0))
assertEquals(Byte.valueOf((byte) 12), new JSONArray().fluentAdd("12").getByte(0))
assertEquals(array.size(), arrayList.size())
assertNull(array.getComponentType())
assertEquals(Integer.class, array.getComponentType())
assertNull(array.getRelatedArray())
assertSame(javaArray, array.getRelatedArray())
assertEquals("{\"age\":33,\"id\":1001,\"name\":\"xx\"}", JSON.toJSONString(vo))
assertEquals("{\"id\":1001,\"name\":\"xx\",\"age\":33}", JSON.toJSONString(vo))
assertEquals("{\"id\":1001,\"name\":\"xx\",\"age\":33}", JSON.toJSONString(vo))
assertEquals(TestUtils.encodeToBase64String(entity.getValue(), false), json.getString("value"))
assertEquals("中华人民共和国", new String(entity2.getValue(), "UTF-8"))
assertEquals(user1.getId(), user.getId())
assertEquals(user1.getName(), user.getName())
assertEquals(user1.getValue(), user.getValue())
assertEquals(user1.getValue(), user.getValue())
assertNotNull(m1)
assertNotNull(m2)
assertEquals(-0.012671709D, m1.v1)
assertEquals(0.22676692048907365D, m1.v2)
assertEquals(0.13231707D, m1.v3)
assertEquals(0.80090785D, m1.v4)
assertEquals(0.6192943D, m1.v5)
assertEquals(-0.012671709D, m2.v1)
assertEquals(0.22676692048907365D, m2.v2)
assertEquals(0.13231707D, m2.v3)
assertEquals(0.80090785D, m2.v4)
assertEquals(0.6192943D, m2.v5)
assertNotNull(m1)
assertNotNull(m2)
assertEquals(-0.012671709D, m1.v1)
assertEquals(0.22676692048907365D, m1.v2)
assertEquals(0.13231707D, m1.v3)
assertEquals(0.80090785D, m1.v4)
assertEquals(0.6192943D, m1.v5)
assertEquals(-0.012671709D, m2.v1)
assertEquals(0.22676692048907365D, m2.v2)
assertEquals(0.13231707D, m2.v3)
assertEquals(0.80090785D, m2.v4)
assertEquals(0.6192943D, m2.v5)
assertNotNull(model)
assertEquals(0, model.v1)
assertEquals(0, model.v2)
assertNotNull(model)
assertEquals(0, model.v1)
assertEquals(0, model.v2)
assertNotNull(model)
assertEquals(0, model.v1)
assertEquals(0, model.v2)
assertNotNull(model)
assertNull(model.v1)
assertNull(model.v2)
assertNotNull(model)
assertNull(model.v1)
assertNull(model.v2)
assertNotNull(model)
assertNull(model.v1)
assertNull(model.v2)
assertNotNull(model)
assertNull(model.v1)
assertNull(model.v2)
assertNotNull(model)
assertNull(model.v1)
assertNull(model.v2)
assertNotNull(model)
assertNull(model.v1)
assertNull(model.v2)
assertEquals("{\"id1\":\"-9223370018640066466\",\"id2\":\"9223370018640066466\",\"id3\":100}", JSON.toJSONString(map, SerializerFeature.BrowserCompatible))
assertNotNull(m1)
assertNotNull(m2)
assertEquals(-1883391953414482124L, m1.v1.longValue())
assertEquals(-3019416596934963650L, m1.v2.longValue())
assertEquals(6497525620823745793L, m1.v3.longValue())
assertEquals(2136224289077142499L, m1.v4.longValue())
assertEquals(-2090575024006307745L, m1.v5.longValue())
assertEquals(-1883391953414482124L, m2.v1.longValue())
assertEquals(-3019416596934963650L, m2.v2.longValue())
assertEquals(6497525620823745793L, m2.v3.longValue())
assertEquals(2136224289077142499L, m2.v4.longValue())
assertEquals(-2090575024006307745L, m2.v5.longValue())
assertNotNull(m1)
assertNotNull(m2)
assertEquals(-1883391953414482124L, m1.v1.longValue())
assertEquals(-3019416596934963650L, m1.v2.longValue())
assertEquals(6497525620823745793L, m1.v3.longValue())
assertEquals(2136224289077142499L, m1.v4.longValue())
assertEquals(-2090575024006307745L, m1.v5.longValue())
assertEquals(-1883391953414482124L, m2.v1.longValue())
assertEquals(-3019416596934963650L, m2.v2.longValue())
assertEquals(6497525620823745793L, m2.v3.longValue())
assertEquals(2136224289077142499L, m2.v4.longValue())
assertEquals(-2090575024006307745L, m2.v5.longValue())
assertNotNull(m1)
assertNotNull(m2)
assertEquals(-1883391953414482124L, m1.v1.longValue())
assertEquals(-3019416596934963650L, m1.v2.longValue())
assertEquals(6497525620823745793L, m1.v3.longValue())
assertEquals(2136224289077142499L, m1.v4.longValue())
assertEquals(-2090575024006307745L, m1.v5.longValue())
assertEquals(-1883391953414482124L, m2.v1.longValue())
assertEquals(-3019416596934963650L, m2.v2.longValue())
assertEquals(6497525620823745793L, m2.v3.longValue())
assertEquals(2136224289077142499L, m2.v4.longValue())
assertEquals(-2090575024006307745L, m2.v5.longValue())
Assertions.assertEquals(values_2.length, values.length)
assertNotNull(m1)
assertNotNull(m2)
assertEquals(-1883391953414482124L, m1.v1)
assertEquals(-3019416596934963650L, m1.v2)
assertEquals(6497525620823745793L, m1.v3)
assertEquals(2136224289077142499L, m1.v4)
assertEquals(-2090575024006307745L, m1.v5)
assertEquals(-1883391953414482124L, m2.v1)
assertEquals(-3019416596934963650L, m2.v2)
assertEquals(6497525620823745793L, m2.v3)
assertEquals(2136224289077142499L, m2.v4)
assertEquals(-2090575024006307745L, m2.v5)
assertNotNull(m1)
assertNotNull(m2)
assertEquals(-1883391953414482124L, m1.v1)
assertEquals(-3019416596934963650L, m1.v2)
assertEquals(6497525620823745793L, m1.v3)
assertEquals(2136224289077142499L, m1.v4)
assertEquals(-2090575024006307745L, m1.v5)
assertEquals(-1883391953414482124L, m2.v1)
assertEquals(-3019416596934963650L, m2.v2)
assertEquals(6497525620823745793L, m2.v3)
assertEquals(2136224289077142499L, m2.v4)
assertEquals(-2090575024006307745L, m2.v5)
assertNotNull(m1)
assertNotNull(m2)
assertEquals(-1883391953414482124L, m1.v1)
assertEquals(-3019416596934963650L, m1.v2)
assertEquals(6497525620823745793L, m1.v3)
assertEquals(2136224289077142499L, m1.v4)
assertEquals(-2090575024006307745L, m1.v5)
assertEquals(-1883391953414482124L, m2.v1)
assertEquals(-3019416596934963650L, m2.v2)
assertEquals(6497525620823745793L, m2.v3)
assertEquals(2136224289077142499L, m2.v4)
assertEquals(-2090575024006307745L, m2.v5)
assertEquals("{\"value\":\"9007199254741992\"}", JSON.toJSONString(new Model(9007199254741992L)))
assertEquals("{\"value\":\"-9007199254741992\"}", JSON.toJSONString(new Model(-9007199254741992L)))
assertEquals("{\"value\":9007199254740990}", JSON.toJSONString(new Model(9007199254740990L)))
assertEquals("{\"value\":-9007199254740990}", JSON.toJSONString(new Model(-9007199254740990L)))
assertEquals("{\"value\":100}", JSON.toJSONString(new Model(100)))
assertEquals("{\"value\":-100}", JSON.toJSONString(new Model(-100)))
assertNotNull(m1)
assertNotNull(m2)
assertEquals(-0.012671709f, m1.v1)
assertEquals(0.6042485f, m1.v2)
assertEquals(0.13231707f, m1.v3)
assertEquals(0.80090785f, m1.v4)
assertEquals(0.6192943f, m1.v5)
assertEquals(-0.012671709f, m2.v1)
assertEquals(0.6042485f, m2.v2)
assertEquals(0.13231707f, m2.v3)
assertEquals(0.80090785f, m2.v4)
assertEquals(0.6192943f, m2.v5)
assertNotNull(m1)
assertNotNull(m2)
assertEquals(-0.012671709f, m1.v1)
assertEquals(0.6042485f, m1.v2)
assertEquals(0.13231707f, m1.v3)
assertEquals(0.80090785f, m1.v4)
assertEquals(0.6192943f, m1.v5)
assertEquals(-0.012671709f, m2.v1)
assertEquals(0.6042485f, m2.v2)
assertEquals(0.13231707f, m2.v3)
assertEquals(0.80090785f, m2.v4)
assertEquals(0.6192943f, m2.v5)
assertNotNull(model)
assertNull(model.v1)
assertNull(model.v2)
assertNotNull(model)
assertNull(model.v1)
assertNull(model.v2)
assertNotNull(model)
assertNull(model.v1)
assertNull(model.v2)
assertNotNull(model)
assertNull(model.v1)
assertNull(model.v2)
assertNotNull(model)
assertNull(model.v1)
assertNull(model.v2)
assertNotNull(model)
assertNull(model.v1)
assertNull(model.v2)
assertNotNull(model)
assertNull(model.v1)
assertNull(model.v2)
assertNotNull(m1)
assertNotNull(m2)
assertEquals(-0.012671709D, m1.v1)
assertEquals(0.22676692048907365D, m1.v2)
assertEquals(0.13231707D, m1.v3)
assertEquals(0.80090785D, m1.v4)
assertEquals(0.6192943D, m1.v5)
assertEquals(-0.012671709D, m2.v1)
assertEquals(0.22676692048907365D, m2.v2)
assertEquals(0.13231707D, m2.v3)
assertEquals(0.80090785D, m2.v4)
assertEquals(0.6192943D, m2.v5)
assertNotNull(m1)
assertNotNull(m2)
assertEquals(-0.012671709D, m1.v1)
assertEquals(0.22676692048907365D, m1.v2)
assertEquals(0.13231707D, m1.v3)
assertEquals(0.80090785D, m1.v4)
assertEquals(0.6192943D, m1.v5)
assertEquals(-0.012671709D, m2.v1)
assertEquals(0.22676692048907365D, m2.v2)
assertEquals(0.13231707D, m2.v3)
assertEquals(0.80090785D, m2.v4)
assertEquals(0.6192943D, m2.v5)
assertEquals("{\"value\":\"9007199254741992\"}", JSON.toJSONString(new Model(9007199254741992L)))
assertEquals("{\"value\":\"-9007199254741992\"}", JSON.toJSONString(new Model(-9007199254741992L)))
assertEquals("{\"value\":9007199254740990}", JSON.toJSONString(new Model(9007199254740990L)))
assertEquals("{\"value\":-9007199254740990}", JSON.toJSONString(new Model(-9007199254740990L)))
assertEquals("{\"value\":100}", JSON.toJSONString(new Model(100)))
assertEquals("{\"value\":-100}", JSON.toJSONString(new Model(-100)))
assertEquals("{\"id1\":\"9223370018640066466\",\"id2\":\"9223370018640066466\"}", JSON.toJSONString(map, SerializerFeature.BrowserCompatible))
assertNotNull(model)
assertNull(model.v1)
assertNull(model.v2)
assertNotNull(model)
assertNull(model.v1)
assertNull(model.v2)
assertNotNull(model)
assertNull(model.v1)
assertNull(model.v2)
assertNotNull(model)
assertNull(model.v1)
assertNull(model.v2)
assertNotNull(model)
assertNull(model.v1)
assertNull(model.v2)
assertNotNull(model)
assertNull(model.v1)
assertNull(model.v2)
assertEquals(values_2.length, values.length)
assertEquals(val, m.value)
assertNotNull(model)
assertNull(model.v1)
assertNull(model.v2)
assertNotNull(model)
assertNull(model.v1)
assertNull(model.v2)
assertNotNull(model)
assertNull(model.v1)
assertNull(model.v2)
assertNotNull(model)
assertNull(model.v1)
assertNull(model.v2)
assertNotNull(model)
assertNull(model.v1)
assertNull(model.v2)
assertNotNull(model)
assertNull(model.v1)
assertNull(model.v2)
assertNotNull(model)
assertNull(model.v1)
assertNull(model.v2)
Assertions.assertEquals(values_2.length, values.length)
assertNotNull(m1)
assertNotNull(m2)
assertEquals(-0.012671709f, m1.v1)
assertEquals(0.6042485f, m1.v2)
assertEquals(0.13231707f, m1.v3)
assertEquals(0.80090785f, m1.v4)
assertEquals(0.6192943f, m1.v5)
assertEquals(-0.012671709f, m2.v1)
assertEquals(0.6042485f, m2.v2)
assertEquals(0.13231707f, m2.v3)
assertEquals(0.80090785f, m2.v4)
assertEquals(0.6192943f, m2.v5)
assertNotNull(m1)
assertNotNull(m2)
assertEquals(-0.012671709f, m1.v1)
assertEquals(0.6042485f, m1.v2)
assertEquals(0.13231707f, m1.v3)
assertEquals(0.80090785f, m1.v4)
assertEquals(0.6192943f, m1.v5)
assertEquals(-0.012671709f, m2.v1)
assertEquals(0.6042485f, m2.v2)
assertEquals(0.13231707f, m2.v3)
assertEquals(0.80090785f, m2.v4)
assertEquals(0.6192943f, m2.v5)
assertNotNull(model)
assertEquals(0, model.v1)
assertEquals(0, model.v2)
assertNotNull(model)
assertEquals(0, model.v1)
assertEquals(0, model.v2)
assertNotNull(model)
assertEquals(0, model.v1)
assertEquals(0, model.v2)
assertNotNull(model)
assertEquals(0D, model.v1)
assertEquals(0D, model.v2)
assertNotNull(model)
assertEquals(0D, model.v1)
assertEquals(0D, model.v2)
assertNotNull(model)
assertEquals(0D, model.v1)
assertEquals(0D, model.v2)
assertNotNull(model)
assertEquals(0F, model.v1)
assertEquals(0F, model.v2)
assertNotNull(model)
assertEquals(0F, model.v1)
assertEquals(0F, model.v2)
assertNotNull(model)
assertEquals(0F, model.v1)
assertEquals(0F, model.v2)
assertEquals("a[\"a0\\\"\",\"a1\"]", fastjsonResult)
assertEquals(jacksonResult, fastjsonResult)
assertEquals(context.getClass(), deserialized.getClass())
Assertions.assertNotNull(fastJsonRedisSerializer.getFastJsonConfig())
Assertions.assertEquals(userDes.getName(), "土豆")
Assertions.assertNotNull(converter.getFastJsonConfig())
Assertions.assertEquals(1, vo.getId())
Assertions.assertEquals("{\"id\":1}", new String((byte[]) message1.getPayload()))
Assertions.assertEquals("{\"id\":1}", new String((byte[]) message2.getPayload()))
Assertions.assertEquals("{\"id\":1}", message3.getPayload())
Assertions.assertEquals("{\"id\":1}", message4.getPayload())
Assertions.assertNotNull(view.getFastJsonConfig())
Assertions.assertEquals(true, view.isExtractValueFromSingleKeyModel())
Assertions.assertNotNull(view.getFastJsonConfig())
Assertions.assertEquals(true, view.isExtractValueFromSingleKeyModel())
Assertions.assertEquals(contentLength, contentAsString.getBytes(view.getFastJsonConfig().getCharset().name()).length)
Assertions.assertNotNull(view.getFastJsonConfig())
Assertions.assertEquals(true, view.isExtractValueFromSingleKeyModel())
Assertions.assertEquals(baseResult2.getCode(), "1000")
Assertions.assertEquals(baseResult2.getData().size(), 3)
Assertions.assertEquals(baseResult3.getCode(), "1000")
Assertions.assertEquals(baseResult3.getData().size(), 6)
Assertions.assertEquals(1, converter.getSupportedMediaTypes().size())
Assertions.assertEquals(123, vo.getId())
Assertions.assertEquals("{\"id\":123}", new String(bytes, "UTF-8"))
Assertions.assertNotNull(converter.getFastJsonConfig())
Assertions.assertEquals(123, vo.getId())
Assertions.assertEquals("{\"id\":123}", new String(bytes, "UTF-8"))
assertNotNull(values)
assertEquals(2, values.length)
assertEquals("abc", values[0])
assertEquals("xxx", ((Model) values[1]).value)
assertNotNull(values)
assertEquals(2, values.length)
assertEquals("abc", values[0])
assertEquals("xxx", ((Model) values[1]).value)
assertNotNull(values)
assertEquals(2, values.length)
assertEquals(null, values[0])
assertEquals(null, values[1])
assertNotNull(values)
assertEquals(2, values.length)
assertEquals("abc", values[0])
assertEquals("xxx", ((Model) list.get(0)).value)
assertNotNull(values)
assertEquals(1, values.length)
assertEquals("123", ((User) list.get(0)).name)
assertEquals("123", ((User) list.get(1)).name)
assertNotNull(values)
assertEquals(1, values.length)
assertEquals("123", ((User) list.get(0)).name)
assertEquals("123", ((User) list.get(1)).name)
assertNotNull(values)
assertEquals(1, values.length)
assertEquals("123", ((User) list[0]).name)
assertEquals("123", ((User) list[1]).name)
assertNotEquals(requestBody.contentLength(), 0)
assertEquals(JSON.toJSONString(mode2), json)
Assertions.assertTrue(Objects.equal(user.getId(), 1))
Assertions.assertTrue(Objects.equal(user.getName(), "土豆"))
Assertions.assertTrue(Objects.equal(user.getAge(), 25))
Assertions.assertTrue(contentAsString.startsWith("{\"abc\":\"cde中文\"}"))
Assertions.assertTrue(Objects.equal(user.getId(), 1))
Assertions.assertTrue(Objects.equal(user.getName(), "土豆"))
Assertions.assertTrue(Objects.equal(user.getAge(), 25))
assertNotNull(provider.getFastJsonConfig())
assertTrue(provider.hasMatchingMediaType(MediaType.APPLICATION_JSON_TYPE))
assertTrue(provider.hasMatchingMediaType(null))
assertEquals(-1, provider.getSize(null, null, null, null, null))
assertNull(provider.readFrom(null, null, null, null, null, null))
assertNotNull(provider.getFeatures())
assertNotNull(provider.getFilters())
assertNotNull(provider.getDateFormat())
assertNotNull(provider.getCharset())
assertFalse(jsonObject.containsKey("id"))
assertFalse(jsonObject.containsValue("id"))
assertFalse(provider.hasMatchingMediaType(MediaType.MULTIPART_FORM_DATA_TYPE))
assertFalse(provider.hasMatchingMediaType(MediaType.APPLICATION_OCTET_STREAM_TYPE))
assertFalse(provider.hasMatchingMediaType(MediaType.TEXT_PLAIN_TYPE))
assertFalse(provider.isReadable(null, null, null, null))
assertFalse(JSON.isValid(null))
assertFalse(JSON.isValid(""))
assertTrue(JSON.isValid("null"))
assertTrue(JSON.isValid("123"))
assertTrue(JSON.isValid("12.34"))
assertTrue(JSON.isValid("true"))
assertTrue(JSON.isValid("false"))
assertTrue(JSON.isValid("\"abc\""))
assertTrue(JSON.isValid("{}"))
assertTrue(JSON.isValid("{\"id\":123}"))
assertTrue(JSON.isValid("{\"id\":\"123\"}"))
assertTrue(JSON.isValid("{\"id\":true}"))
assertTrue(JSON.isValid("{\"id\":{}}"))
assertTrue(JSON.isValidObject("{}"))
assertTrue(JSON.isValidObject("{\"id\":123}"))
assertTrue(JSON.isValidObject("{\"id\":\"123\"}"))
assertTrue(JSON.isValidObject("{\"id\":true}"))
assertTrue(JSON.isValidObject("{\"id\":{}}"))
assertTrue(JSON.isValid("[]"))
assertTrue(JSON.isValid("[[],[]]"))
assertTrue(JSON.isValid("[{\"id\":123}]"))
assertTrue(JSON.isValid("[{\"id\":\"123\"}]"))
assertTrue(JSON.isValid("[{\"id\":true}]"))
assertTrue(JSON.isValid("[{\"id\":{}}]"))
assertTrue(JSON.isValidArray("[]"))
assertTrue(JSON.isValidArray("[[],[]]"))
assertTrue(JSON.isValidArray("[{\"id\":123}]"))
assertTrue(JSON.isValidArray("[{\"id\":\"123\"}]"))
assertTrue(JSON.isValidArray("[{\"id\":true}]"))
assertTrue(JSON.isValidArray("[{\"id\":{}}]"))
assertEquals(type0, type1)
assertEquals(type0.hashCode(), type1.hashCode())
assertEquals(vo.value, vo1.value)
assertEquals("{\"value\":null}", text)
assertEquals(v1.getValue(), v.getValue())
assertEquals("{\"value\":\"\"}", text)
assertEquals("iso8601", context.getDateFormat())
assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.WriteNulls))
assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.WriteNullListAsEmpty))
assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.WriteNullStringAsEmpty))
assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.WriteNullNumberAsZero))
assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.WriteNullBooleanAsFalse))
assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.BrowserCompatible))
assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName))
assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringValueAsString))
assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.WriteEnumUsingToString))
assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName))
assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.IgnoreErrorGetter))
assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.BeanToArray))
assertEquals(JSON.DEFFAULT_DATE_FORMAT, context.getDateFormat())
assertEquals(0, array.size())
assertEquals(array, array.clone())
assertNotNull(date)
assertNotNull(ts)
assertEquals("{\"num\":0.00000001}", json)
assertNotNull(testJsons)
assertEquals(2, testJsons.size())
assertEquals("1", testJsons.get(0).test1)
assertEquals(testReply.getItems().get(0).getId(), 1)
assertEquals("aaa", JSONPath.eval(object, "$.EXTINFO.bct_loan_account_status\\[15\\]"))
assertEquals("aaa", result.toString())
assertEquals("[\"\",null]", s)
assertEquals("{\"value\":\"9007199254741992\"}", JSON.toJSONString(vo, SerializerFeature.BrowserCompatible))
assertEquals("23", p.getRfid())
assertEquals("1", p.getBhlx())
assertEquals(null, p.getJdxj())
assertEquals("23", p1.getRfid())
assertEquals("1", p1.getBhlx())
assertEquals(null, p1.getJdxj())
assertEquals("23", p1.getRfid())
assertEquals("1", p1.getBhlx())
assertEquals(null, p1.getJdxj())
assertEquals("1234", object.get("@type"))
assertEquals("{\"f2\":102,\"f1\":101,\"f3\":103}", str)
assertEquals(a.f1, a1.f1)
assertEquals(a.f2, a1.f2)
assertEquals(a.f3, a1.f3)
assertEquals("23", p.getRfid())
assertEquals("1", p.getBhlx())
assertEquals(null, p.getJdxj())
assertEquals(1548166745000L, o.createTime.getTime())
assertEquals("{\"createTime\":1548166745}", json)
assertEquals(1548166745000L, order1.createTime.getTime())
assertEquals(1548166745000L, order2.createTime.getTime())
assertEquals(2, resources.data.get(0).resourceId.intValue())
assertEquals("own佛恩", resources.data.get(0).resourceName)
assertEquals(123, JSONPath.extract(object.toJSONString(), "['help_score_avg.cbm']"))
assertEquals("{\"ddd\":\"sdfsd\",\"id\":\"ss\",\"name\":\"hh\"}", JSON.toJSONString(news))
assertEquals(2, object.size())
assertEquals(4, object.size())
assertEquals(2, object.size())
assertEquals(0, object.size())
assertEquals(1, counter.get())
assertEquals("{\"id\":0}", JSON.toJSONString(object))
assertEquals("{\"id\":0}", JSON.toJSONString(mockObj))
assertEquals("[{\"id\":\"a\",\"name\":\"an\"},{\"id\":\"b\",\"name\":\"bn\"}]", JSONPath.eval(JSON.parseObject(jsonString, Feature.AllowUnQuotedFieldNames, Feature.OrderedField), "$..view").toString())
assertEquals("[{\"id\":\"a\",\"name\":\"an\"},{\"id\":\"b\",\"name\":\"bn\"}]", JSONPath.eval(JSON.parseObject(errorJsonString, Feature.AllowUnQuotedFieldNames, Feature.OrderedField), "$..view").toString())
assertEquals(1, dto1.someValue)
assertEquals(0, dto1.someValue)
assertEquals("[]", array.toJSONString())
assertNotNull(order)
assertTrue(JSONArray.isValidArray(jsonStr))
assertTrue(JSON.isValidArray(jsonStr))
assertTrue(JSONObject.isValidArray(jsonStr))
assertFalse(JSONObject.isValidObject(jsonStr))
assertEquals("{\"blockQueue\":[1,2,3]}", jsonInt)
assertEquals(3, complexInt1.getBlockQueue().size())
assertEquals("{\"blockQueue\":[\"BlockQueue 1\",\"BlockQueue 2\",\"BlockQueue 3\"]}", json)
assertEquals(3, complex1.getBlockQueue().size())
assertEquals("{\"k1\":[\"k11\",\"k12\",\"k13\"],\"k2\":[\"k21\"]}", json)
assertTrue(obj != null)
assertSame(3, map.get("k1").size())
assertEquals(Bean.class.getName(), o.getClass().getName())
assertEquals(TBean.class.getName(), o1.getClass().getName())
assertEquals(0, m.values.size())
assertEquals(0, m.values.size())
assertEquals(1, list.size())
assertEquals(1001, item.modelId)
assertEquals(1001, item.modelId)
assertEquals("{\"verification_ids\":[\"a\",\"b\"],\"with_fields\":true}", JSON.toJSONString(params))
assertEquals(2L, book.bookId.longValue())
assertEquals("浪漫奇侠", book.bookName)
assertEquals("雨天不打伞", book.authorName)
assertEquals(4536, book.wordCount.intValue())
assertEquals("{\"color\":\"\",\"productCity\":\"\",\"size\":0}", json)
assertEquals(1, collection.size())
assertEquals(101, model.id)
assertEquals("{\"values\":[\"2017-12-20\"]}", json)
assertEquals("{\"color\":\"\",\"productCity\":\"\",\"size\":0}", json)
assertEquals(1324138987429L, time.getTime())
assertEquals(12300, model.value)
assertEquals("{\"value\":\"12300元\"}", JSON.toJSONString(model))
assertEquals("{\"a\":1001}", new String(bytes))
assertEquals("{\"a\":1001}", new String(bytes))
assertEquals("{\"a\":1001}", new String(bytes))
assertEquals(0, m.values.size())
assertEquals(0, m.values.size())
assertEquals(0, map.size())
assertEquals(0, m.values.size())
assertEquals(0, m.values.size())
assertEquals(0, m.values.size())
assertTrue(JSONPath.contains(o, "$." + escapeString(s)))
assertEquals("\"2018-01-10T08:30:00+08:00\"", JSON.toJSONString(user.create, SerializerFeature.UseISO8601DateFormat))
assertEquals("abc", obj.getString("123"))
assertEquals("abc", obj.getString("false"))
assertEquals(0, m.values.size())
assertEquals(0, m.values.size())
assertEquals(0, m.values.size())
assertEquals("{\"amount\":10.03,\"currency\":\"CNY\"}", json)
assertEquals(money.amount, moneyBack.amount)
assertEquals(money.currency, moneyBack.currency)
assertEquals(money.amount, moneyCast.amount)
assertEquals(money.currency, moneyCast.currency)
assertEquals('}', lexer.getCurrent())
assertEquals('}', lexer.getCurrent())
assertTrue(lexer.isOrderedField())
assertEquals(JSONToken.LBRACE, lexer.token())
assertEquals(JSONToken.LITERAL_STRING, lexer.token())
assertEquals(':', lexer.getCurrent())
assertEquals("id", lexer.stringVal())
assertEquals(JSONToken.COLON, lexer.token())
assertEquals(JSONToken.LITERAL_INT, lexer.token())
assertEquals(123, lexer.intValue())
assertEquals(123L, lexer.longValue())
assertEquals('}', lexer.getCurrent())
assertEquals(JSONToken.RBRACE, lexer.token())
assertEquals(JSONToken.EOF, lexer.token())
assertEquals(JSONToken.LBRACE, lexer.token())
assertEquals(JSONToken.LITERAL_STRING, lexer.token())
assertEquals(':', lexer.getCurrent())
assertEquals("id", lexer.stringVal())
assertEquals(JSONToken.COLON, lexer.token())
assertEquals(JSONToken.LITERAL_FLOAT, lexer.token())
assertEquals(new BigDecimal("123.34"), lexer.decimalValue())
assertEquals('}', lexer.getCurrent())
assertEquals(JSONToken.RBRACE, lexer.token())
assertEquals(JSONToken.EOF, lexer.token())
assertEquals(':', lexer.getCurrent())
assertEquals("id", lexer.stringVal())
assertEquals('}', lexer.getCurrent())
assertTrue(lexer.isEOF())
assertEquals(':', lexer.getCurrent())
assertEquals("id", lexer.stringVal())
assertEquals('}', lexer.getCurrent())
assertTrue(lexer.isEOF())
assertEquals(':', lexer.getCurrent())
assertEquals("id", lexer.stringVal())
assertEquals('}', lexer.getCurrent())
assertTrue(lexer.isEOF())
assertEquals(':', lexer.getCurrent())
assertEquals("id", lexer.stringVal())
assertEquals("abc", lexer.stringVal())
assertEquals('}', lexer.getCurrent())
assertTrue(lexer.isEOF())
assertEquals(JSONToken.LBRACKET, lexer.token)
assertEquals(JSONToken.RBRACKET, lexer.token)
assertTrue(lexer.isEOF())
assertTrue(lexer.isEnabled(Feature.OrderedField))
assertTrue(lexer.isEnabled(Feature.AllowUnQuotedFieldNames))
assertTrue(lexer.isEnabled(Feature.AllowSingleQuotes))
assertTrue(lexer.isEnabled(Feature.UseBigDecimal))
assertTrue(lexer.isEnabled(Feature.SupportArrayToBean))
assertTrue(lexer.isEnabled(Feature.NonStringKeyAsString))
assertTrue(lexer.isEnabled(Feature.ErrorOnEnumNotMatch))
assertTrue(lexer.isEnabled(Feature.SupportClassForName))
assertTrue(lexer.isEnabled(Feature.ErrorOnNotSupportAutoType))
assertTrue(lexer.isEnabled(Feature.UseNativeJavaObject))
assertTrue(lexer.isEnabled(Feature.DisableFieldSmartMatch))
assertTrue(lexer.isEnabled(Feature.SupportAutoType))
assertEquals(123, bean.id)
assertEquals(123, bean.id)
assertEquals(Long.valueOf(123), map.get("id"))
assertEquals(Long.valueOf(123), map.get("id"))
assertEquals(123, map.get("id"))
assertEquals(0, deserializer.getFastMatchToken())
assertNull(deserializer.deserialze(null, null, null))
assertNotNull(parser.getLexer())
assertNotNull(parser.getConfig())
assertEquals(1L, array.get(0))
assertEquals(2L, array.get(1))
assertEquals(123, map.get("id"))
assertEquals(123L, map.get("id"))
assertEquals(123, object.getIntValue("id"))
assertNull(object)
assertNull(parser.parse("abc"))
assertEquals(1, list.size())
assertEquals(123L, list.get(0))
assertEquals(101L, array[0])
assertEquals(BigInteger.valueOf(102), array[1])
assertEquals(1, list.size())
assertEquals(123, list.get(0))
assertEquals(1, list.size())
assertEquals(123L, list.get(0))
assertEquals(ObjectReaderProvider.SAFE_MODE, config.isSafeMode())
assertTrue(config.isAsmEnable())
assertNotNull(deserializer)
assertNotNull(deserializer)
assertNotNull(deserializer)
assertEquals(123, bean.id)
assertNotSame(config0.provider, config1.provider)
assertSame(JSONFactory.getDefaultObjectReaderProvider(), ParserConfig.getGlobalInstance().provider)
assertEquals(123, map.get("id"))
assertEquals(123, map.get("id"))
assertEquals(123, vo.getId())
assertEquals(123, vo.getId())
assertNotNull(first)
assertNotNull(second)
assertEquals(new Integer(3), reader.readInteger())
assertNull(reader.readString())
assertEquals("company", reader.readString())
assertTrue(reader.readObject() instanceof JSONObject)
assertEquals("count", reader.readString())
assertEquals(5, reader.readObject())
assertEquals("pagecount", reader.readString())
assertEquals(0, reader.readObject())
assertEquals("pageindex", reader.readString())
assertEquals(0, reader.readObject())
assertEquals("resultList", reader.readString())
assertTrue(reader.readObject() instanceof JSONArray)
assertEquals("totalCount", reader.readString())
assertEquals(0, reader.readObject())
assertEquals(COUNT, count)
assertEquals(Integer.valueOf(1001), reader.readInteger())
assertEquals(Long.valueOf(1001), reader.readLong())
assertNotNull(object)
assertTrue(reader.hasNext())
assertEquals(0, Feature.of(new Feature[0]))
assertEquals(0, Feature.of(null))
assertEquals(Feature.SupportAutoType.getMask(), Feature.of(new Feature[] { Feature.SupportAutoType }))
assertTrue(Feature.isEnabled(features, Feature.SupportAutoType))
assertEquals(model.value.length(), model2.value.length())
assertEquals(obj.size(), map.size())
assertEquals(obj.size(), map.size())
assertEquals(obj.get("a"), map.get("a"))
assertEquals(array.size(), 1)
assertEquals(array2.size(), 1)
assertEquals(obj.getByteValue("d"), 0)
assertEquals(obj.getShortValue("d"), 0)
assertTrue(obj.getFloatValue("d") == 0F)
assertTrue(obj.getDoubleValue("d") == 0D)
assertEquals(obj.getBigInteger("d"), null)
assertEquals(obj.getSqlDate("d"), null)
assertEquals(obj.getTimestamp("d"), null)
assertEquals(obj.size(), obj2.size())
assertEquals("{\"value\":x'414243444547'}", json)
assertArrayEquals(model.value, model1.value)
assertArrayEquals(model.value, model2.value)
assertEquals("'a\\'bc'", JSON.toJSONString("a'bc", SerializerFeature.UseSingleQuotes))
assertEquals("'a\\'bc'", new String(JSON.toJSONBytes("a'bc", SerializerFeature.UseSingleQuotes)))
assertEquals("{'val':'a\\'bc'}", JSON.toJSONString(new JSONObject().fluentPut("val", "a'bc"), SerializerFeature.UseSingleQuotes))
assertEquals("{'val':'a\\'bc'}", new String(JSON.toJSONBytes(new JSONObject().fluentPut("val", "a'bc"), SerializerFeature.UseSingleQuotes)))
assertEquals("{'val':'a\\'bc'}", JSON.toJSONString(bean, SerializerFeature.UseSingleQuotes))
assertEquals("{'val':'a\\'bc'}", new String(JSON.toJSONBytes(bean, SerializerFeature.UseSingleQuotes)))
assertEquals("{\"value\":123}", text)
assertEquals(v1.getValue().intValue(), v.getValue().intValue())
assertEquals("{\"value\":null}", text)
assertEquals(v1.getValue(), v.getValue())
assertEquals("{\"value\":[]}", text)
assertEquals("{\"value\":[1,2]}", text)
assertEquals("{\"value\":123}", text)
assertEquals(v1.getValue().intValue(), v.getValue().intValue())
assertEquals("{\"value\":true}", text)
assertEquals(v1.getValue().get(), v.getValue().get())
Assertions.assertEquals("{\"value\":null}", text)
Assertions.assertEquals(v1.getValue(), v.getValue())
Assertions.assertEquals("{\"value\":[]}", text)
Assertions.assertEquals("{\"value\":[1,2]}", text)
assertEquals("{\"id\":123}", JSON.toJSONString(bean))
assertEquals("{}", JSON.toJSONString(bean, SerializerFeature.IgnoreNonFieldGetter))
assertEquals("{\"f0\":10,\"f1\":11,\"f2\":12}", JSON.toJSONString(bean))
assertEquals("{\"f0\":10,\"f1\":11,\"f2\":12}", JSON.toJSONString(bean, SerializerFeature.IgnoreNonFieldGetter))
assertEquals(123, obj.getObject("id", Object.class))
assertEquals(0, array.getByteValue(0))
assertEquals(0, array.getShortValue(0))
assertTrue(0F == array.getFloatValue(0))
assertTrue(0D == array.getDoubleValue(0))
assertEquals(new BigInteger("1"), array.getBigInteger(1))
assertEquals("1", array.getString(1))
assertEquals(new java.util.Date(time), array.getDate(2))
assertEquals(0, array2.getByteValue(0))
assertEquals(0, array2.getShortValue(0))
assertTrue(0F == array2.getFloatValue(0))
assertTrue(0D == array2.getDoubleValue(0))
assertEquals(new BigInteger("1"), array2.getBigInteger(1))
assertEquals("1", array2.getString(1))
assertEquals(new java.util.Date(time), array2.getDate(2))
assertEquals(array2.size(), array2.size())
assertEquals("{\"@type\":\"com.alibaba.fastjson.issue_2000.Issue2012$Model\",\"bytes\":\"\"}", str)
assertEquals(0, foo.bytes.length)
assertSame(AccessLevel.DEVELOPER, model.accessLevel)
assertEquals("{\"groupAccess\":{\"accessLevel\":50,\"notificationLevel\":3}}", JSON.toJSONString(permissions))
assertEquals(date, m.date)
assertEquals(date, m.date)
assertEquals("{\"name\":null}", object.toString(SerializerFeature.WriteMapNullValue))
assertNull(JSON.parseObject("{\"code\":0}", Model.class).code)
assertNotNull(error)
assertNull(JSON.parseObject("0", EnumClass.class))
assertNotNull(error)
assertSame(EnumClass.A, JSON.parseObject("1", EnumClass.class))
assertSame(EnumClass.B, JSON.parseObject("2", EnumClass.class))
assertSame(EnumClass.C, JSON.parseObject("3", EnumClass.class))
assertSame(EnumClass.A, JSON.parseObject("{\"code\":1}", Model.class).code)
assertSame(EnumClass.B, JSON.parseObject("{\"code\":2}", Model.class).code)
assertSame(EnumClass.C, JSON.parseObject("{\"code\":3}", Model.class).code)
assertEquals("{\"latitude\":37,\"id\":123,\"longitude\":127}", text)
assertEquals("{\"latitude\":37,\"id\":123,\"longitude\":127}", text)
assertEquals("TestJsonObj2{$a_b=\"a1_b2\",_c_d=\"c3_d4\",aaaa=\"CC\",__flag=true,$flag=true}", stu.toString())
assertEquals("TestJsonObj2{$a_b=\"aa3_bb4\",_c_d=\"cc1_dd2\",aaaa=\"BB\",__flag=true,$flag=true}", stu.toString())
assertEquals("{\"$a_b\":\"aa_bb\",\"$flag\":true,\"__flag\":true,\"_c_d\":\"cc_dd\",\"aaaa\":\"AA\"}", text)
assertEquals("{\"map\":{\"a\":[\"1\",\"2\",\"3\"],\"b\":[\"1\"]},\"name\":\"zhangsan\"}", JSON.toJSONString(vo, SerializerFeature.MapSortField))
assertEquals("{\"map\":{\"a\":[\"1\",\"2\",\"3\"],\"b\":[\"1\"]},\"name\":\"zhangsan\"}", JSON.toJSONString(vo, SerializerFeature.MapSortField))
assertEquals("{\"my_name\":\"test name\",\"nested_bean\":{\"my_id\":\"test id\"}}", text)
assertEquals("{\"value\":null}", text)
assertEquals("{\"value\":\"\"}", text)
assertEquals(2, array.size())
assertNull(array.get(0))
assertEquals("1001", array.get(1))
assertEquals(0, array.size())
assertEquals(1, array.size())
assertEquals("1001", array.get(0))
assertEquals(0, array.size())
assertEquals(0, array.size())
assertEquals(0, array.size())
assertEquals(2, array.size())
assertNull(array.get(0))
assertEquals("1001", array.get(1))
assertEquals(0, array.size())
assertEquals(3, array.size())
assertEquals(1, array.size())
assertEquals("1002", array.get(0))
assertEquals(str, sdf.format(d))
assertTrue(error.getMessage().startsWith("invalid escape character"))
assertTrue(error.getMessage().startsWith("invalid escape character"))
assertTrue(error.getMessage().startsWith("invalid escape character"))
assertTrue(error.getMessage().startsWith("invalid escape character"))
assertEquals("hello", smgpSubmitMessage2.getMsgContent())
assertEquals("9423372036854775807", bi1.toString())
assertEquals("9423372036854775807", bi2.toString())
assertEquals("9423372036854775807", tobj1.getBi().toString())
assertEquals("9423372036854775807", tobj2.getBi().toString())
assertEquals("[{\"name\":\"mark-ace\"}]", JSON.toJSONString(params, new SerializeFilter[] { contextValueFilter }))
assertEquals("[{\"name\":\"ace\"}]", JSON.toJSONString(params, new SerializeFilter[] { valueFilter }))
assertEquals(0D, object.getDoubleValue("val"))
assertEquals(0F, object.getFloatValue("val"))
assertEquals(0, object.getIntValue("val"))
assertEquals(0L, object.getLongValue("val"))
assertEquals((short) 0, object.getShortValue("val"))
assertEquals((byte) 0, object.getByteValue("val"))
assertEquals(false, object.getBooleanValue("val"))
assertNotNull(error)
assertEquals(0F, model.value)
assertEquals(0F, model.value)
assertNotNull(error)
assertTrue(error.getMessage().indexOf("parseLong error") != -1)
assertNotNull(error)
assertTrue(error.getMessage().indexOf("parseLong error") != -1)
assertNotNull(error)
assertTrue(error.getMessage().indexOf("parseLong error") != -1)
assertEquals(MyEnum.Test1, test.getMyEnum())
assertEquals(1, test.value)
assertEquals("string", object.name)
assertEquals(1, object.code)
assertEquals("pinyin", object.pinyin)
assertEquals(null, object.name)
assertEquals(0, object.code)
assertTrue(reponse.indexOf("Python源码剖析") > 0)
assertTrue(reponse.indexOf("电子工业出版社") > 0)
assertEquals(jsonStr, JSON.toJSONString(obj))
assertNotNull(obj.value1)
assertEquals(jsonStr, JSON.toJSONString(obj))
assertNotNull(error)
assertTrue(error.getMessage().indexOf("parseInt error, ") != -1)
assertNotNull(error)
assertEquals(0, model.value)
assertEquals("{\"goodsList\":[{\"properties\":[{}]}]}", json)
assertNotNull(n)
assertNotNull(n.getGoodsList())
assertNotNull(n.getGoodsList().get(0))
assertNotNull(n.getGoodsList().get(0).getProperties())
assertEquals("{\"value\":\"a\"}", JSON.toJSONString(model))
assertEquals("a", model2.value)
assertNotNull(model.val)
assertNotNull(model.val)
assertNotNull(model.val)
assertNotNull(model.val)
assertNotNull(model.val)
assertNotNull(model.val)
assertNotNull(model.val)
assertNotNull(error)
assertNotNull(error)
assertNotNull(error)
Assertions.assertEquals(JSON.toJSONString(enumMap, SerializerFeature.WriteNonStringKeyAsString), "{\"C\":\"D\",\"E\":\"A\"}")
assertEquals("21496a63f5", image.id)
assertEquals("http://hl-img.peco.uodoo.com/hubble-test/app/sm/e9b884c1dcd671f128bac020e070e273.jpg;,,JPG;3,208x", image.url)
assertEquals("", image.title)
assertEquals("JPG", image.type)
assertEquals(400, image.optimalWidth)
assertEquals(267, image.optimalHeight)
assertEquals("http://hl-img.peco.uodoo.com/hubble-test/app/sm/e9b884c1dcd671f128bac020e070e273.jpg", image.original_save_url)
assertEquals("62717D190987A7AE", image.phash)
assertEquals("{\"value\":\"a\"}", JSON.toJSONString(model))
assertEquals("a", model2.value)
assertEquals("{\"value\":\"a\"}", JSON.toJSONString(model))
assertEquals("a", model2.value)
assertEquals("{\"id\":1,\"value\":\"a\"}", JSON.toJSONString(model))
assertEquals("a", model2.value)
Assertions.assertTrue(json.indexOf("\\") < 0)
assertTrue(reponse.indexOf("Python源码剖析") > 0)
assertTrue(reponse.indexOf("电子工业出版社") > 0)
assertEquals(1.0d, total)
assertNotNull(error)
assertNotNull(error)
assertNotNull(error)
assertEquals(0D, model.value)
assertEquals(0D, model.value)
assertNotNull(error)
assertTrue(error.getMessage().indexOf("parseInt error") != -1)
assertNotNull(error)
assertEquals(0, model.value)
assertEquals("1324138987429", JSON.toJSONString(date))
assertEquals("{\"@type\":\"java.sql.Date\",\"val\":1324138987429}", JSON.toJSONString(date, SerializerFeature.WriteClassName))
assertEquals(1324138987429L, ((java.util.Date) JSON.parse("{\"@type\":\"java.util.Date\",\"val\":1324138987429}", Feature.SupportAutoType)).getTime())
assertEquals("\"2011-12-18 00:23:07\"", JSON.toJSONString(date, SerializerFeature.WriteDateUseDateFormat))
assertEquals("\"2011-12-18 00:23:07.429\"", JSON.toJSONStringWithDateFormat(date, "yyyy-MM-dd HH:mm:ss.SSS"))
assertEquals("'2011-12-18 00:23:07.429'", JSON.toJSONStringWithDateFormat(date, "yyyy-MM-dd HH:mm:ss.SSS", SerializerFeature.UseSingleQuotes))
assertEquals(file.name, convertFile.name)
assertArrayEquals(file.data, convertFile.data)
assertEquals(user1.getValue(), user.getValue())
assertEquals(user1.getValue(), user.getValue())
assertEquals(new JSONArray().hashCode(), new JSONArray().hashCode())
assertEquals(JSON.parseArray("[]"), JSON.parseArray("[]"))
assertEquals("{\"value\":null}", text)
assertEquals(v1.getValue(), v.getValue())
assertEquals("{\"value\":[]}", JSON.toJSONString(v, mapping, SerializerFeature.WriteMapNullValue, SerializerFeature.WriteNullListAsEmpty))
assertEquals("{\"value\":[]}", JSON.toJSONStringZ(v, mapping, SerializerFeature.WriteMapNullValue, SerializerFeature.WriteNullListAsEmpty))
assertEquals("{'value':[]}", JSON.toJSONStringZ(v, mapping, SerializerFeature.UseSingleQuotes, SerializerFeature.WriteMapNullValue, SerializerFeature.WriteNullListAsEmpty))
assertEquals("{'value':[]}", JSON.toJSONStringZ(v, mapping, SerializerFeature.UseSingleQuotes, SerializerFeature.QuoteFieldNames, SerializerFeature.WriteMapNullValue, SerializerFeature.WriteNullListAsEmpty))
assertEquals("{\n" + "\t\"head\":{\n" + "\t\t\"requestTime\":\"1654070371884\",\n" + "\t\t\"merchantcode\":\"111\",\n" + "\t\t\"ticket\":\"111\",\n" + "\t\t\"version\":\"1.0.0\"\n" + "\t},\n" + "\t\"body\":{\n" + "\t\t\"phone\":\"111\",\n" + "\t\t\"type\":\"1\",\n" + "\t\t\"ticket\":\"\"\n" + "\t},\n" + "\t\"sign\":\"111\"\n" + "}", JSON.toJSONString(jsonObject, true))
assertEquals(30, model.getAge())
assertNotNull(bigClass)
assertEquals("{\"brokerAddrs\":{0:\"0.0.0.0\"}}", str)
assertEquals("0.0.0.0", brokerData1.getBrokerAddrs().get(0L))
assertEquals(new Timestamp(millis), JSON.parseObject("" + millis, Timestamp.class))
assertEquals(new Timestamp(millis), JSON.parseObject("\"" + millis + "\"", Timestamp.class))
assertEquals(new Timestamp(millis), JSON.parseObject(text, Timestamp.class))
assertEquals("\"2022-11-12 00:00:00\"", JSON.toJSONStringWithDateFormat(JSON.parseObject(text, java.sql.Date.class), JSON.DEFFAULT_DATE_FORMAT))
assertEquals("\"2022-11-12 09:32:23\"", JSON.toJSONStringWithDateFormat(JSON.parseObject(text, java.util.Date.class), JSON.DEFFAULT_DATE_FORMAT))
assertEquals(new Long(3), json.getLong("id"))
assertEquals("周访", json.getString("name"))
assertEquals(new Long(3), json.getLong("id"))
assertEquals("周访", json.getString("name"))
assertEquals(new Long(3), json.getLong("id"))
assertEquals("周访", json.getString("name"))
assertEquals(new Long(3), json.getLong("id"))
assertEquals("周访", json.getString("name"))
assertNotNull(error)
assertTrue(isValidate)
assertTrue(JSONValidator.fromUtf8("{\"id\":123}".getBytes(StandardCharsets.UTF_8)).validate())
assertEquals("{\"value\":null}", text)
assertEquals(v1.getValue(), v.getValue())
assertSame(1, result.size())
assertSame(order.books.get(1), result.get(0))
assertEquals(2, result.size())
assertSame(order.books.get(1), result.get(0))
assertSame(order.books.get(2), result.get(1))
assertEquals(2, result.size())
assertSame(order.books.get(0), result.get(0))
assertSame(order.books.get(1), result.get(1))
assertEquals("{\"value\":\"9007199254741992\"}", str)
assertEquals("{\"beginTime\":\"+152841225111920\"}", new String(JSON.toJSONBytes(rsp3)))
assertEquals(-14189155200000L, date.getTime())
assertEquals(-14189155200000L, m.time.getTime())
assertEquals("{\"value\":\"9007199254741992\"}", JSON.toJSONString(new Model(9007199254741992L)))
assertEquals("{\"value\":\"9007199254741990\"}", JSON.toJSONString(new Model(9007199254741990L)))
assertEquals("{\"value\":100}", JSON.toJSONString(new Model(100L)))
assertEquals("{\"value\":\"-9007199254741990\"}", JSON.toJSONString(new Model(-9007199254741990L)))
assertEquals("{\"value\":-9007199254740990}", JSON.toJSONString(new Model(-9007199254740990L)))
assertEquals("{\"value\":\"9007199254741992\"}", JSON.toJSONString(new Model(9007199254741992L), BrowserCompatible))
assertEquals("{\"value\":\"-9007199254741992\"}", JSON.toJSONString(new Model(-9007199254741992L), BrowserCompatible))
assertEquals("{\"value\":9007199254740990}", JSON.toJSONString(new Model(9007199254740990L), BrowserCompatible))
assertEquals("{\"value\":-9007199254740990}", JSON.toJSONString(new Model(-9007199254740990L), BrowserCompatible))
assertEquals("{\"value\":100}", JSON.toJSONString(new Model(100), BrowserCompatible))
assertEquals("{\"value\":-100}", JSON.toJSONString(new Model(-100), BrowserCompatible))
assertEquals(FieldEnum.A, bean.enumField)
assertEquals(0.9390308260917664F, user.age)
assertEquals(8.200000000000001F, user.age)
assertEquals(8.200000000000001F, user.age)
assertEquals("{\"value\":\"9007199254741992\"}", JSON.toJSONString(new Model(9007199254741992L)))
assertEquals("{\"value\":\"-9007199254741992\"}", JSON.toJSONString(new Model(-9007199254741992L)))
assertEquals("{\"value\":9007199254740990}", JSON.toJSONString(new Model(9007199254740990L)))
assertEquals("{\"value\":-9007199254740990}", JSON.toJSONString(new Model(-9007199254740990L)))
assertEquals("{\"value\":100}", JSON.toJSONString(new Model(100)))
assertEquals("{\"value\":-100}", JSON.toJSONString(new Model(-100)))
assertNotNull(timestamp)
assertEquals("张三", user.getName())
assertNotNull(user.getBirthday())
assertEquals("张三", user.getName())
assertNotNull(user.getBirthday())
assertEquals("{\"value\":\"9007199254741992\"}", JSON.toJSONString(new Model(9007199254741992L)))
assertEquals("{\"value\":\"-9007199254741992\"}", JSON.toJSONString(new Model(-9007199254741992L)))
assertEquals("{\"value\":9007199254740990}", JSON.toJSONString(new Model(9007199254740990L)))
assertEquals("{\"value\":-9007199254740990}", JSON.toJSONString(new Model(-9007199254740990L)))
assertEquals("{\"value\":100}", JSON.toJSONString(new Model(100)))
assertEquals("{\"value\":-100}", JSON.toJSONString(new Model(-100)))
assertEquals(d, 0.0D)
assertEquals(7, result.getModelList().size())
assertEquals(InteractiveOrderMaterielModel.class, result.getModelList().get(0).getClass())
assertTrue(data.isSuccess())
assertTrue(data.getContent().getList().size() == 2)
assertTrue(data.getContent().getList().get(0).getId().equals(10000001L))
assertEquals(CouponResult.class, data.getContent().getList().get(0).getClass())
assertTrue(data.isSuccess())
assertTrue(data.getContent().getList().size() == 2)
assertEquals("{\"data\":{}}", json)
assertEquals("{}", json)
assertEquals("{\"value\":1001.0}", text)
assertEquals(user1.getValue(), user.getValue())
assertEquals("{'id':0,'name':'xx'}", text)
assertEquals("[{},{'items':[{'id':0,'name':'xx'}]}]", text)
assertEquals(JSON.toJSONString(jsonObject), JSON.toJSONString(cloneObject))
assertEquals(HashMap.class, JSON.parseObject(bytes).getInnerMap().getClass())
assertEquals(LinkedHashMap.class, JSON.parseObject(bytes, Feature.OrderedField).getInnerMap().getClass())
assertEquals(HashMap.class, JSON.parseObject(str).getInnerMap().getClass())
assertEquals(LinkedHashMap.class, JSON.parseObject(str, Feature.OrderedField).getInnerMap().getClass())
assertNull(JSON.parseObject((InputStream) null, Object.class))
assertNull(JSON.parseObject((InputStream) null, (Type) Object.class))
assertEquals(123, bean.id)
assertEquals("wenshao", bean.name)
assertEquals(123, bean.id)
assertEquals("wenshao", bean.name)
assertEquals("{\"id\":123}", JSON.toJSONString(bean, null, null, new SerializeFilter[0]))
assertEquals("123", JSON.toJSONString(bean))
assertEquals("[1,2,3]", jsonArray.toJSONString())
assertNotNull(jsonArray)
assertEquals(3, jsonArray.size())
assertEquals("[1,2,3]", jsonArray.toJSONString())
assertEquals("[1,2,3]", jsonArray.toJSONString())
assertEquals("[1,2,3]", jsonArray.toJSONString())
assertEquals("[1,2,3]", jsonArray.toJSONString())
assertNull(JSON.parse(null, ParserConfig.global, Feature.ErrorOnNotSupportAutoType))
assertNull(JSON.parse("", ParserConfig.global, Feature.ErrorOnNotSupportAutoType))
assertEquals("[1,2,3]", jsonArray.toJSONString())
assertNull(JSON.parse(null, ParserConfig.global))
assertNull(JSON.parse("", ParserConfig.global))
assertEquals("[1,2,3]", jsonArray.toJSONString())
assertEquals("[1,2,3]", jsonArray2.toJSONString())
assertEquals("null", new String(JSON.toJSONBytes(null, SerializeConfig.global, new SerializeFilter[0], JSON.DEFAULT_GENERATE_FEATURE, SerializerFeature.BrowserSecure)))
assertEquals("[]", new String(JSON.toJSONBytes(Collections.emptyList(), SerializeConfig.global, new SerializeFilter[0], JSON.DEFAULT_GENERATE_FEATURE, SerializerFeature.BrowserSecure)))
assertEquals("null", new String(JSON.toJSONBytes(null, SerializeConfig.global, new SerializeFilter[0], null, JSON.DEFAULT_GENERATE_FEATURE, SerializerFeature.BrowserSecure)))
assertEquals("[]", new String(JSON.toJSONBytes(Collections.emptyList(), SerializeConfig.global, new SerializeFilter[0], null, JSON.DEFAULT_GENERATE_FEATURE, SerializerFeature.BrowserSecure)))
assertEquals("null", new String(JSON.toJSONBytes(null, SerializeConfig.global, (SerializeFilter) null, SerializerFeature.BrowserSecure)))
assertEquals("[]", new String(JSON.toJSONBytes(Collections.emptyList(), SerializeConfig.global, (SerializeFilter) null, SerializerFeature.BrowserSecure)))
assertEquals("null", new String(JSON.toJSONBytes(null, SerializeConfig.global, SerializerFeature.BrowserSecure)))
assertEquals("[]", new String(JSON.toJSONBytes(Collections.emptyList(), SerializeConfig.global, SerializerFeature.BrowserSecure)))
assertEquals("null", new String(JSON.toJSONBytes(null, JSON.DEFAULT_GENERATE_FEATURE, SerializerFeature.BrowserSecure)))
assertEquals("[]", new String(JSON.toJSONBytes(Collections.emptyList(), JSON.DEFAULT_GENERATE_FEATURE, SerializerFeature.BrowserSecure)))
assertEquals("[]", new String(JSON.toJSONBytes(StandardCharsets.UTF_8, Collections.emptyList(), SerializeConfig.global, new SerializeFilter[0], (String) null, JSON.DEFAULT_GENERATE_FEATURE, SerializerFeature.BrowserSecure)))
assertEquals("[]", new String(JSON.toJSONBytes(StandardCharsets.UTF_8, Collections.emptyList(), SerializeConfig.global, new SerializeFilter[0], "", JSON.DEFAULT_GENERATE_FEATURE, SerializerFeature.BrowserSecure)))
assertEquals("[]", new String(JSON.toJSONBytes(StandardCharsets.UTF_8, Collections.emptyList(), SerializeConfig.global, new SerializeFilter[0], JSON.DEFFAULT_DATE_FORMAT, JSON.DEFAULT_GENERATE_FEATURE, SerializerFeature.BrowserSecure)))
assertEquals("[]", os.toString(StandardCharsets.UTF_8))
assertEquals("[]", os.toString())
assertEquals("[]", os.toString())
assertEquals("[]", os.toString(StandardCharsets.UTF_8))
assertEquals(new HashMap<>(), JSON.parseObject(bytes, StandardCharsets.UTF_8, HashMap.class, ParserConfig.global, (ParseProcess) null, JSON.DEFAULT_PARSER_FEATURE, Feature.ErrorOnNotSupportAutoType))
assertEquals(new HashMap<>(), JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.UTF_8, HashMap.class, ParserConfig.global, (ParseProcess) null, JSON.DEFAULT_PARSER_FEATURE, Feature.ErrorOnNotSupportAutoType))
assertNull(JSON.parseObject((byte[]) null, StandardCharsets.UTF_8, HashMap.class, ParserConfig.global, (ParseProcess) null, JSON.DEFAULT_PARSER_FEATURE, Feature.ErrorOnNotSupportAutoType))
assertNull(JSON.parseObject(new byte[0], StandardCharsets.UTF_8, HashMap.class, ParserConfig.global, (ParseProcess) null, JSON.DEFAULT_PARSER_FEATURE, Feature.ErrorOnNotSupportAutoType))
assertNull(JSON.parseObject((byte[]) null, 0, 0, StandardCharsets.UTF_8, HashMap.class, ParserConfig.global, (ParseProcess) null, JSON.DEFAULT_PARSER_FEATURE, Feature.ErrorOnNotSupportAutoType))
assertNull(JSON.parseObject(new byte[0], 0, 0, StandardCharsets.UTF_8, HashMap.class, ParserConfig.global, (ParseProcess) null, JSON.DEFAULT_PARSER_FEATURE, Feature.ErrorOnNotSupportAutoType))
assertEquals(new HashMap<>(), JSON.parseObject(chars, chars.length, HashMap.class, Feature.ErrorOnNotSupportAutoType))
assertNull(JSON.parseObject((char[]) null, 0, HashMap.class, Feature.ErrorOnNotSupportAutoType))
assertNull(JSON.parseObject(new char[0], 0, HashMap.class, Feature.ErrorOnNotSupportAutoType))
assertEquals(new HashMap<>(), JSON.parseObject(str, HashMap.class, ParserConfig.global, null, JSON.DEFAULT_PARSER_FEATURE, Feature.ErrorOnNotSupportAutoType))
assertNull(JSON.parseObject((String) null, HashMap.class, ParserConfig.global, null, JSON.DEFAULT_PARSER_FEATURE, Feature.ErrorOnNotSupportAutoType))
assertNull(JSON.parseObject("", HashMap.class, ParserConfig.global, null, JSON.DEFAULT_PARSER_FEATURE, Feature.ErrorOnNotSupportAutoType))
assertEquals(new HashMap<>(), JSON.parseObject(str, HashMap.class, (ParseProcess) null, Feature.ErrorOnNotSupportAutoType))
assertNull(JSON.parseObject((String) null, HashMap.class, (ParseProcess) null, Feature.ErrorOnNotSupportAutoType))
assertNull(JSON.parseObject("", HashMap.class, (ParseProcess) null, Feature.ErrorOnNotSupportAutoType))
assertNull(JSON.parseObject(null, HashMap.class))
assertNull(JSON.parseObject("", HashMap.class))
assertNull(JSON.parseObject((String) null, HashMap.class, Feature.ErrorOnNotSupportAutoType))
assertNull(JSON.parseObject("", HashMap.class, Feature.ErrorOnNotSupportAutoType))
assertNull(JSON.parseObject((String) null, (Type) HashMap.class, Feature.ErrorOnNotSupportAutoType))
assertNull(JSON.parseObject("", (Type) HashMap.class, Feature.ErrorOnNotSupportAutoType))
assertNull(JSON.parseObject((String) null, (Type) HashMap.class, ParserConfig.global, Feature.ErrorOnNotSupportAutoType))
assertNull(JSON.parseObject("", (Type) HashMap.class, ParserConfig.global, Feature.ErrorOnNotSupportAutoType))
assertNull(JSON.parseObject((InputStream) null, StandardCharsets.UTF_8, HashMap.class, (ParserConfig) null, (ParseProcess) null, JSON.DEFAULT_PARSER_FEATURE, Feature.ErrorOnNotSupportAutoType))
assertNull(JSON.parseObject((InputStream) null, StandardCharsets.UTF_8, HashMap.class, ParserConfig.global, Feature.AllowArbitraryCommas))
assertEquals(new HashMap<>(), JSON.parseObject(str, new TypeReference<HashMap<String, Integer>>() {
}.getType(), 0, Feature.ErrorOnNotSupportAutoType))
assertEquals("123", JSON.toJSON("123", SerializeConfig.global))
assertEquals("[]", buf.toString())
assertNotNull(JSON.getMixInAnnotations(Bean4.class))
assertEquals("\"{\\\"id\\\":101}\"", JSON.toJSONString(bean, config))
assertTrue(text.equals(str1) || text.equals(str2) || text.equals(str3) || text.equals(str4))
assertSame(Currency.getInstance("CNY"), currency)
assertEquals(new JSONObject().hashCode(), new JSONObject().hashCode())
assertEquals(JSON.parseObject("{a:1}"), JSON.parseObject("{'a':1}"))
assertEquals(user.getValue().get(0), actual)
assertEquals(user1.getId(), user.getId())
assertEquals(user1.getName(), user.getName())
assertEquals(BigDecimal.valueOf(10.0), map.get("id"))
assertEquals(validateCode.getExpireTime(), backModel.getExpireTime())
assertNull(backModel.getExpireTime())
assertTrue(mapKey instanceof Integer)
assertEquals("{\"oldDate\":1667920430928}", JSON.toJSONString(model))
assertEquals("{\"oldDate\":\"2022-11-08T23:13:50.928000000\"}", string)
assertEquals("{\"oldDate\":1668848430000}", JSON.toJSONString(model2))
assertEquals("{\"oldDate\":1668848430000}", JSON.toJSONString(model3))
assertTrue(object.containsKey(1))
assertTrue(object.containsKey("1"))
assertTrue(object.containsKey('A'))
assertTrue(object.containsKey("A"))
assertTrue(object.containsKey(true))
assertTrue(object.containsKey("true"))
assertTrue(object.containsKey(uuid))
assertTrue(object.containsKey(uuid.toString()))
assertEquals("{}", modelString)
assertEquals("{\"offset\":1,\"timestamp\":1}", model2String)
assertEquals("{\"off\":1,\"timeStamp\":true,\"timestamp\":1}", model3String)
assertTrue(JSONValidator.from("false").validate())
assertEquals(JSONValidator.Type.Value, JSONValidator.from("false").getType())
assertTrue(JSONValidator.from("999").validate())
assertEquals(JSONValidator.Type.Value, JSONValidator.from("999").getType())
assertEquals("1", object.get(1))
assertEquals("true", object.get(true))
assertEquals("A", object.get('A'))
assertEquals("[1]", JSON.toJSONString(new short[] { 1 }))
assertEquals("{\"value\":null}", text)
assertEquals(v1.getValue(), v.getValue())
assertEquals("{\"value\":[]}", text)
assertNull(info.ids)
assertEquals("{\"zzz\":true}", json)
assertEquals("{\"a\":{\"x\":\"y2\"},\"b\":{\"x\":\"y2\"}}", result)
assertEquals("{\"list\":[{\"@type\":\"com.alibaba.fastjson.issue_1100.Issue1151$C\",\"id\":1001},{\"@type\":\"com.alibaba.fastjson.issue_1100.Issue1151$C\",\"id\":1002}]}", json)
assertSame(a2.list.get(0).getClass(), C.class)
assertEquals(json, json1)
assertEquals(result.toString(), jsonObject2.toString())
assertEquals(result.toJSONString(), jsonObject2.toString())
assertEquals("{\"REQ_NO\":\"123\"}", JSON.toJSONString(model))
assertNotNull(eval)
assertEquals("abc", JSONPath.eval(object, "$.123"))
assertEquals("abc", JSONPath.eval(object, "$.345_xiu"))
assertEquals("abc", JSONPath.eval(object, "$.345\\.xiu"))
assertEquals("zhangshan", object.get("name"))
assertEquals("//helo", object.get("test"))
assertEquals("{\"Dimension\":0,\"PassCode\":\"010\",\"BlockPos\":{\"x\":526,\"y\":65,\"z\":554}}", text)
assertEquals("{\"key\":\"\\\"the\\\"content\"}", JSON.toJSONString(data))
assertEquals("{\"a\":{\"x\":\"y2\"},\"b\":{\"x\":\"y2\"}}", JSON.toJSONString(jsonObject))
assertNotNull(tb.getShijian())
assertNotNull(tb.getShijian())
assertNull(model.values)
assertNull(model.values)
assertEquals("{\"models\":[{\"x\":\"y2\"},{\"x\":\"y2\"}]}", JSON.toJSONString(root))
assertEquals(1, list.size())
assertEquals(Model.class, list.get(0).getClass())
assertEquals(1, list.size())
assertEquals(Model.class, list.get(0).getClass())
assertEquals("{\"__v\":3}", json)
assertEquals("[{\"x\":\"y2\"},{\"x\":\"y2\"}]", JSON.toJSONString(jsonObject))
assertNotNull(array)
assertEquals("{\"remark\":\"支付订单\",\"value\":1}", text)
assertEquals("{\"orderType\":{\"remark\":\"结算单\",\"value\":2}}", text)
assertEquals("{\"orderType\":{\"remark\":\"结算单\",\"value\":2},\"orderType1\":{\"remark\":\"结算单\",\"value\":2}}", text)
assertArrayEquals(model.value, model1.value)
assertTrue(List.class.isInstance(ret.getA()))
assertEquals(TestB.class.getName(), ret.getA().get(0).getClass().getName())
assertEquals("{\"superType\":{\"value\":{\"id\":101}},\"value\":{\"id\":2001,\"name\":\"BBBB\"}}", json)
assertEquals(json, json2)
assertEquals("{\"code\":{\"code\":\"00\",\"msgId\":\"SUCCESS\"}}", JSON.toJSONString(genericResult))
assertEquals("[{\"children\":[{\"children\":[]},{\"children\":[]}]}]", JSONArray.toJSONString(elements))
assertEquals(123, bean.id)
assertEquals(123, bean.id)
assertEquals("[eeee, ffff, eeee]", Arrays.toString(details))
assertNotNull(demo)
assertNotNull(demo.getMap())
assertEquals(100L, demo.getMap().get(100L))
assertEquals("{\n" + "\t\"id\":123\n" + "}", JSON.toJSONString(JSONObject.parseObject("{\"id\":123}"), true))
assertEquals("{\"currency\":\"CNY\"}", str)
assertEquals(true, obj.getBoolean("IsSuccess"))
assertEquals("1fd1717837744bd2ba967167a6f6f417", obj.getString("Data"))
assertEquals("获取身份令牌成功", obj.getString("Message"))
assertEquals(true, result.isIsSuccess())
assertEquals("1fd1717837744bd2ba967167a6f6f417", result.getData())
assertEquals("获取身份令牌成功", result.getMessage())
assertEquals(1, list.size())
assertEquals("1", list.get(0))
assertEquals(2, values.length)
assertEquals("1", values[0])
assertEquals("2", values[1])
assertEquals(2, array.length)
assertEquals(1, array[0])
assertEquals(2, array[1])
assertEquals(array.get(0), list.get(0))
assertEquals("{\"message\":\"成功\",\"status\":\"200\",\"timestamp\":\"2017-03-15 12:13:14\"}", com.alibaba.fastjson.JSON.toJSONString(appResp))
assertEquals("{\"message\":\"成功\",\"status\":\"200\",\"timestamp\":\"2017-03-15 12:13:14\"}", com.alibaba.fastjson2.JSON.toJSONString(appResp))
assertEquals("{\"appResp\":{\"message\":\"成功\",\"status\":\"200\",\"timestamp\":\"2017-03-15 12:13:14\"}}", jsonObject.toJSONString())
assertEquals(v1.getValue(), v.getValue())
assertEquals(v1.getValue(), v.getValue())
assertEquals(v1.getValue(), v.getValue())
assertEquals(v.getValue(), v1.getValue())
assertEquals(result.getInfoProfile().getPhones().get(0).getArea(), person.getInfoProfile().getPhones().get(0).getArea())
assertEquals(result.getInfoProfile().getPhones().get(0).getCountry(), person.getInfoProfile().getPhones().get(0).getCountry())
assertEquals(result.getInfoProfile().getPhones().get(0).getExtensionNumber(), person.getInfoProfile().getPhones().get(0).getExtensionNumber())
assertEquals(result.getInfoProfile().getPhones().get(0).getNumber(), person.getInfoProfile().getPhones().get(0).getNumber())
assertEquals("{\"value\":null}", text)
assertEquals(v1.getValue(), v.getValue())
assertEquals("{\"value\":[]}", text)
assertEquals(nanos, 350000000)
assertEquals("{\"timestamp\":\"2019-09-19 08:49:52.350000000\"}", JSON.toJSONString(pojo))
assertEquals(10, jsonObject.getIntValue("qty"))
assertEquals(10, jsonObject.getIntValue("qty1"))
assertEquals(10, jsonObject.getIntValue("qty2"))
assertEquals(10, jsonObject.getInteger("qty"))
assertEquals(10, jsonObject.getInteger("qty1"))
assertEquals(10, jsonObject.getInteger("qty2"))
assertEquals(10, jsonObject.getLongValue("qty"))
assertEquals(10, jsonObject.getLongValue("qty1"))
assertEquals(10, jsonObject.getLongValue("qty2"))
assertEquals(10, jsonObject.getLong("qty"))
assertEquals(10, jsonObject.getLong("qty1"))
assertEquals(10, jsonObject.getLong("qty2"))
assertEquals(10, jsonObject.getFloatValue("qty"))
assertEquals(10, jsonObject.getFloatValue("qty1"))
assertEquals(10, jsonObject.getFloatValue("qty2"))
assertEquals(1, a.a1)
assertEquals(2, a.A2)
assertEquals(3, a.a3)
assertEquals(dto.createTime, dto2.createTime)
assertEquals(dto.createTime, dto2.createTime)
assertEquals(dto.createTime, dto2.createTime)
assertEquals(dto.createTime, dto2.createTime)
assertEquals(dto.createTime, dto2.createTime)
assertEquals(dto.createTime, dto2.createTime)
assertEquals(dto.createTime, dto2.createTime)
assertEquals(dto.createTime, dto2.createTime)
assertEquals(0, JSON.parseObject("{\"id\":false}", VO.class).id)
assertEquals(1, JSON.parseObject("{\"id\":true}", VO.class).id)
assertEquals(0, JSON.parseObject("{\"id64\":false}", VO.class).id64)
assertEquals(1, JSON.parseObject("{\"id64\":true}", VO.class).id64)
assertEquals(0, JSON.parseObject("{\"id16\":false}", VO.class).id16)
assertEquals(1, JSON.parseObject("{\"id16\":true}", VO.class).id16)
assertEquals(0, JSON.parseObject("{\"id8\":false}", VO.class).id8)
assertEquals(1, JSON.parseObject("{\"id8\":true}", VO.class).id8)
assertEquals(0F, JSON.parseObject("{\"floatValue\":false}", VO.class).floatValue)
assertEquals(1F, JSON.parseObject("{\"floatValue\":true}", VO.class).floatValue)
assertEquals(0D, JSON.parseObject("{\"doubleValue\":false}", VO.class).doubleValue)
assertEquals(1D, JSON.parseObject("{\"doubleValue\":true}", VO.class).doubleValue)
assertEquals(s, JSON.parseObject(s).toJSONString())
assertEquals(s1, JSON.parseObject(s1).toJSONString())
assertEquals(s2, JSON.parseObject(s2).toJSONString())
assertEquals(0, bean.q.size())
assertEquals(bean.type, bean1.type)
assertEquals(40, max)
assertEquals(30, min)
assertEquals(2, count)
assertEquals("v", entry.getValue().getValue())
assertEquals(nestedSet, deserializedNestedSet)
assertEquals("aa", vo.value.get("@type"))
assertEquals("aa", object.get("@type"))
assertEquals("\"中国\"", str)
assertEquals("[{\"afterFilterCategory\":{\"name\":\"afterFilterCategory\"},\"afterFilterTwo\":\"two\",\"category\":{\"name\":\"category\"},\"name\":\"item1\"},{\"afterFilterCategory\":{\"name\":\"afterFilterCategory\"},\"afterFilterTwo\":\"two\",\"category\":{\"$ref\":\"$[0].category\"},\"name\":\"item2\"}]", JSON.toJSONString(items, refAfterFilterTest))
assertEquals(123, JSON.parseObject("{\"user_Id\":123}", VO.class).userId)
assertEquals(123, JSON.parseObject("{\"userId\":123}", VO.class).userId)
assertEquals(123, JSON.parseObject("{\"user-id\":123}", VO.class).userId)
assertEquals("{\"date\":\"2019-11-01 21:45:12\"}", str2)
assertEquals("Mon Jan 19 12:05:54 GMT+01:00 1970", model.getDate().toString())
assertTrue(jsonString.contains("因为相信，所以看见。"))
assertEquals("因为相信，所以看见。", modelBack.getMap().get("nanqi"))
assertFalse(lexer.isBlankInput())
assertFalse(config.isAutoTypeSupport())
assertFalse(Feature.isEnabled(features, Feature.SupportAutoType))
assertFalse(TypeUtils.isProxy(Object.class))
assertFalse(JSONValidator.from("{\"name\":\"999}").validate())
assertFalse(cValid)
assertTrue(jsonValid)
assertEquals(user1.getValue(), user.getValue())
assertEquals(user1.getValue(), user.getValue())
assertTrue(list.get(0) instanceof TreeMap)
assertTrue(list.get(1) instanceof HashMap)
assertTrue(list.get(0) instanceof Integer)
assertTrue(list.get(1) instanceof Integer)
assertTrue(list.get(2) instanceof String)
assertTrue(list.get(0) instanceof Integer)
assertTrue(list.get(1) == null)
assertTrue(list.get(2) instanceof String)
assertNull(JSON.toJavaObject(JSON.parseObject("{\"result\":\"\"}"), TestVO.class).result)
assertNull(JSON.toJavaObject(JSON.parseObject("{\"result\":\"null\"}"), TestVO.class).result)
Assertions.assertEquals(12304, vo.getId())
Assertions.assertEquals("ljw", vo.getName())
Assertions.assertEquals(12304, vo.getId())
Assertions.assertEquals("ljw", vo.getName())
assertEquals("1", JSON.toJSONString(new BigDecimal("1")))
assertEquals("1", JSON.toJSONString(new BigDecimal("1"), SerializerFeature.WriteClassName))
assertEquals(JSONValidator.Type.Object, validator.getType())
assertTrue(validator.validate())
Assertions.assertNotNull(error)
assertNotNull(bean.date)
assertNotNull(bean.date)
assertNotNull(bean.date)
assertFalse(jsv.validate())
assertEquals("{\"value\":1001}", text)
assertEquals(user1.getValue(), user.getValue())
assertEquals(user1.getValue(), user.getValue())
assertEquals(user1.getValue(), user.getValue())
assertEquals(user1.getValue(), user.getValue())
assertEquals(123, JSONPath.read("{\"id\":123}", "$.id"))
assertEquals(jsonStr, JSON.toJSONString(json))
assertEquals(Issue369.class, clazz)
Assertions.assertEquals("{\"msg\":\"\"}", JSON.toJSONString(bean, SerializerFeature.WriteNullStringAsEmpty))
assertEquals("{\"AGE_B1\":12,\"NAME_V1\":\"z\"}", res)
assertEquals("{\"Age_B1\":12,\"Name_V1\":\"z\"}", res)
assertEquals("{\"Age-B1\":12,\"Name-V1\":\"z\"}", res)
assertEquals("{\"Age.B1\":12,\"Name.V1\":\"z\"}", res)
assertEquals("{\"Age B1\":12,\"Name V1\":\"z\"}", res)
assertEquals("{\"Age_b1\":12,\"Name_v1\":\"z\"}", res)
assertEquals(4, configModels.size())
assertEquals("\"2022-06-29 13:12:30.452\"", str)
assertNull(bean.date)
assertNull(JSON.parseObject("{\"date\":\"\"}").toJavaObject(Bean.class).date)
assertEquals("{\"resultCode\":\"200013\",\"message\":\"查询成功\",\"data\":{\"clientName\":\"张三\",\"clientId\":\"3002674743\",\"phoneNumber\":\"13412345678\",\"gender\":2,\"age\":59}}", jsonObject.toJSONString())
assertEquals("{\"date\":1655097829796}", str)
assertEquals(bean.date.getTime(), bean1.date.getTime())
assertEquals(bean.date.getTime(), bean2.date.getTime())
assertEquals("{\"date\":1655097829796}", str)
assertEquals(bean.date.getTime(), bean1.date.getTime())
assertEquals(bean.date.getTime(), bean2.date.getTime())
assertEquals("{\"date\":1655097829}", str)
assertEquals(1655097829000L, bean1.date.getTime())
assertEquals(1655097829000L, bean2.date.getTime())
assertEquals("{\"parems\":{},\"success\":true,\"wxId\":\"abc\"}", str)
assertEquals(bo.wxId, bo1.wxId)
assertEquals(bo.isSuccess, bo1.isSuccess)
assertEquals(bo.parems, bo1.parems)
assertEquals(JSONObject.class, JSON.parse(str).getClass())
assertNotNull(bean)
assertNull(exception.getMessage())
assertEquals("[true]", JSON.toJSONString(new boolean[] { true }))
assertEquals("{\"value\":null}", text)
assertEquals(v1.getValue(), v.getValue())
assertEquals("{\"value\":[]}", text)
assertEquals("{\"value\":null}", text)
assertEquals(v1.getValue(), v.getValue())
assertEquals("{\"value\":[]}", text)
assertEquals(90.82195113f, JSON.parseObject("{\"value\":90.82195113}", Model.class).value)
assertEquals(new String(bytes), new String(bytes2))
assertEquals(bytes.length, bytes2.length)
assertEquals("test", issues.getName())
assertEquals(20, issues.getAge().intValue())
assertEquals("{\"age\":20}", JSON.toJSONString(issues))
assertEquals("\"2018-08-03T10:58:39.604+08:00\"", json)
assertEquals("{\"a\":{\"b\":{\"c\":\"2018-04\",\"d\":[123]}}}", jsonObject.toString())
assertEquals("floorname2", a.name)
assertEquals("x123", a.templateId)
assertEquals("floorname2", a.name)
assertEquals("x123", a.templateId)
assertNotNull(paramRequest)
assertEquals(1, v0.orderStatus)
assertEquals(0, v0.oldStatus)
assertEquals(0, v0.oldOrderStatus)
assertEquals(0, v0.orderStatus)
assertEquals(1, v0.oldStatus)
assertEquals(0, v0.oldOrderStatus)
assertEquals(0, v0.orderStatus)
assertEquals(0, v0.oldStatus)
assertEquals(1, v0.oldOrderStatus)
assertEquals(vo.value, vo1.value)
assertEquals("{\"userId\":123}", str)
assertEquals(4, fieldInfoList.size())
assertEquals(1, fieldInfoList.size())
assertEquals(JSONObject.class, JSON.parse(text, config).getClass())
assertNull(TypeUtils.cast("null", HashMap.class, ParserConfig.global))
assertNull(TypeUtils.cast("null", (Type) HashMap.class, ParserConfig.global))
assertNull(TypeUtils.cast("NULL", (Type) HashMap.class, ParserConfig.global))
assertNull(TypeUtils.cast("", (Type) HashMap.class, ParserConfig.global))
assertNull(TypeUtils.cast(null, (Type) HashMap.class, ParserConfig.global))
assertNull(TypeUtils.castToChar(null))
assertNull(TypeUtils.castToShort(null))
assertNull(TypeUtils.castToByte(null))
assertNull(TypeUtils.castToFloat(null))
assertNull(TypeUtils.castToDate(null))
assertNull(TypeUtils.getGenericParamType(null))
assertEquals('A', TypeUtils.castToChar('A'))
assertEquals('A', TypeUtils.castToChar("A"))
assertNull(TypeUtils.castToShort(null))
assertEquals((short) 1, TypeUtils.castToShort(1))
assertNull(TypeUtils.castToInt(null))
assertNull(TypeUtils.castToBoolean(null))
assertNull(TypeUtils.castToLong(null))
assertNull(TypeUtils.castToDouble(null))
assertNull(TypeUtils.castToBigDecimal(null))
assertNull(TypeUtils.castToTimestamp(null))
assertNull(TypeUtils.castToSqlDate(null))
assertNull(TypeUtils.castToJavaBean(null, null))
assertNull(TypeUtils.castToString(null))
assertEquals("123", TypeUtils.castToString("123"))
assertEquals(-1792535898324117685L, TypeUtils.fnv1a_64_lower("abc"))
assertEquals(-1792535898324117685L, TypeUtils.fnv1a_64_lower("ABC"))
assertEquals(-1792535898324117685L, TypeUtils.fnv1a_64("abc"))
assertEquals(0, TypeUtils.byteValue(null))
assertEquals(0, TypeUtils.shortValue(null))
assertEquals(0, TypeUtils.intValue(null))
assertEquals(0, TypeUtils.longValue(null))
assertEquals(0, TypeUtils.longExtractValue(null))
assertEquals(decimal.byteValue(), TypeUtils.byteValue(decimal))
assertEquals(decimal.shortValue(), TypeUtils.shortValue(decimal))
assertEquals(decimal.intValue(), TypeUtils.intValue(decimal))
assertEquals(decimal.longValue(), TypeUtils.longValue(decimal))
assertEquals(decimal.longValue(), TypeUtils.longExtractValue(decimal))
assertNull(TypeUtils.getClass(null))
assertEquals(Bean.class, TypeUtils.getClass(Bean.class))
assertNull(TypeUtils.getAnnotation(Bean.class.getMethod("getId"), JSONField.class))
assertNull(TypeUtils.getAnnotation(Bean.class.getField("id"), JSONField.class))
assertNull(TypeUtils.getAnnotation(Bean.class, JSONField.class))
assertEquals(1, fieldInfoList.size())
assertEquals("id", fieldInfoList.get(0).name)
assertEquals(2, fieldInfoList.size())
assertEquals("ID", fieldInfoList.get(0).name)
assertEquals("values", fieldInfoList.get(1).name)
assertEquals(0, TypeUtils.getKoltinConstructorParameters(Bean1.class).length)
assertEquals(0, TypeUtils.getParameterAnnotations(Bean1.class.getConstructor()).length)
assertNotNull(TypeUtils.checkPrimitiveArray(new BeanUtils.GenericArrayTypeImpl(Integer.class)))
assertEquals(int[][].class, TypeUtils.checkPrimitiveArray(new BeanUtils.GenericArrayTypeImpl(int[].class)))
assertEquals(byte[].class, TypeUtils.checkPrimitiveArray(new BeanUtils.GenericArrayTypeImpl(byte.class)))
assertEquals(short[].class, TypeUtils.checkPrimitiveArray(new BeanUtils.GenericArrayTypeImpl(short.class)))
assertEquals(int[].class, TypeUtils.checkPrimitiveArray(new BeanUtils.GenericArrayTypeImpl(int.class)))
assertEquals(long[].class, TypeUtils.checkPrimitiveArray(new BeanUtils.GenericArrayTypeImpl(long.class)))
assertEquals(float[].class, TypeUtils.checkPrimitiveArray(new BeanUtils.GenericArrayTypeImpl(float.class)))
assertEquals(double[].class, TypeUtils.checkPrimitiveArray(new BeanUtils.GenericArrayTypeImpl(double.class)))
assertEquals(char[].class, TypeUtils.checkPrimitiveArray(new BeanUtils.GenericArrayTypeImpl(char.class)))
assertEquals(boolean[].class, TypeUtils.checkPrimitiveArray(new BeanUtils.GenericArrayTypeImpl(boolean.class)))
assertNotNull(element)
assertNotNull(element)
assertEquals(2, IOUtils.stringSize(12))
assertEquals(2, IOUtils.stringSize(12L))
assertEquals("12", new String(chars))
assertEquals("12", new String(chars))
assertEquals("12", new String(chars))
assertEquals("[1]", JSON.toJSONString(new int[] { 1 }))
assertEquals("{\"value\":null}", text)
assertEquals(v1.getValue(), v.getValue())
assertEquals("{\"value\":[]}", text)
assertEquals("{\"value\":true}", text)
assertEquals(vo.getValue(), vo1.getValue())
assertEquals("{\"id\":1001,\"value\":1002}", text)
assertEquals(b.getId(), b1.getId())
assertEquals(b.getValue(), b1.getValue())
assertEquals(fastJsonConfig.isJSONB(), true)
assertEquals(fastJsonConfig.isWriteContentLength(), false)
assertEquals(fastJsonConfig.getCharset().name(), "UTF-8")
assertEquals(fastJsonConfig.getDateFormat(), "yyyyMMdd")
assertEquals(fastJsonConfig.getReaderFeatures()[0], JSONReader.Feature.FieldBased)
assertEquals(fastJsonConfig.getWriterFeatures()[0], JSONWriter.Feature.FieldBased)
assertEquals(fastJsonConfig.getReaderFilters().length > 0, true)
assertEquals(fastJsonConfig.getWriterFilters().length > 0, true)
assertEquals(fastJsonConfig.getSymbolTable().size() > 0, true)
assertEquals("999", consumer.slice.toStringAscii())
assertEquals("999\"a", consumer.slice.toStringAscii())
assertEquals("阿里巴巴", consumer.slice.toString(StandardCharsets.UTF_8))
assertEquals("阿里巴巴", consumer.slice.toString(StandardCharsets.UTF_8))
assertEquals("999", consumer.slice.toStringAscii())
assertEquals("999", consumer.slice.toStringAscii())
assertEquals("123456789012345678901234567890", consumer.slice.toStringAscii())
assertEquals("123456789012345678901234567890", consumer.slice.toStringAscii())
assertEquals(null, consumer.slice)
assertEquals("true", consumer.slice.toStringAscii())
assertEquals("false", consumer.slice.toStringAscii())
assertEquals("{}", consumer.slice.toStringAscii())
assertEquals("{\"id\":1}", consumer.slice.toStringAscii())
assertEquals("[]", consumer.slice.toStringAscii())
assertEquals("[1]", consumer.slice.toStringAscii())
Assert.assertTrue(v1.getValue().get(0) instanceof A)
Assert.assertTrue(v2.getValue().get(0) instanceof B)
assertNull(udf.evaluate(null, "$"))
assertNull(udf.evaluate("", "$"))
assertNull(udf.evaluate("null", "$"))
assertEquals("123", udf.evaluate("123", "$"))
assertNull(udf.eval(new Text("null")))
assertNotNull(udf.eval(new Text("123")))
assertEquals("123", udf.eval(new Text("123")).toString())
assertNull(udf.eval(new Text("null")))
assertNotNull(udf.eval(new Text("123")))
assertEquals("123", udf.eval(new Text("123")).toString())
assertEquals(GeometryCollection.class, geometry.getClass())
assertEquals("{\"type\":\"GeometryCollection\",\"geometries\":[{\"type\":\"Point\",\"coordinates\":[100.0,0.0]},{\"type\":\"LineString\",\"coordinates\":[[101.0,0.0],[102.0,1.0]]}]}", JSON.toJSONString(geometry))
assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)))
assertEquals(Point.class, geometry.getClass())
assertEquals("{\"type\":\"Point\",\"coordinates\":[100.0,0.0]}", JSON.toJSONString(geometry))
assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)))
assertEquals(Polygon.class, geometry.getClass())
assertEquals("{\"type\":\"Polygon\",\"coordinates\":[[[100.0,0.0],[101.0,0.0],[101.0,1.0],[100.0,1.0],[100.0,0.0]],[[100.8,0.8],[100.8,0.2],[100.2,0.2],[100.2,0.8],[100.8,0.8]]]}", JSON.toJSONString(geometry))
assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)))
assertEquals(MultiPolygon.class, geometry.getClass())
assertEquals("{\"type\":\"MultiPolygon\",\"coordinates\":[[[[102.0,2.0],[103.0,2.0],[103.0,3.0],[102.0,3.0],[102.0,2.0]]],[[[100.0,0.0],[101.0,0.0],[101.0,1.0],[100.0,1.0],[100.0,0.0]],[[100.2,0.2],[100.2,0.8],[100.8,0.8],[100.8,0.2],[100.2,0.2]]]]}", JSON.toJSONString(geometry))
assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)))
assertEquals(FeatureCollection.class, geometry.getClass())
assertEquals("{\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"properties\":{\"prop0\":\"value0\"},\"geometry\":{\"type\":\"Point\",\"coordinates\":[102.0,0.5]}},{\"type\":\"Feature\",\"properties\":{\"prop1\":\"0.0\",\"prop0\":\"value0\"},\"geometry\":{\"type\":\"LineString\",\"coordinates\":[[102.0,0.0],[103.0,1.0],[104.0,0.0],[105.0,1.0]]}},{\"type\":\"Feature\",\"properties\":{\"prop1\":\"{\\\"this\\\":\\\"that\\\"}\",\"prop0\":\"value0\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[100.0,0.0],[101.0,0.0],[101.0,1.0],[100.0,1.0],[100.0,0.0]]]}}]}", JSON.toJSONString(geometry))
assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)))
assertEquals(MultiLineString.class, geometry.getClass())
assertEquals("{\"type\":\"MultiLineString\",\"coordinates\":[[[100.0,0.0],[101.0,1.0]],[[102.0,2.0],[103.0,3.0]]]}", JSON.toJSONString(geometry))
assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)))
assertEquals(LineString.class, geometry.getClass())
assertEquals("{\"type\":\"LineString\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]}", JSON.toJSONString(geometry))
assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)))
assertEquals(Feature.class, geometry.getClass())
assertEquals("{\"type\":\"Feature\",\"bbox\":[-10.0,-10.0,10.0,10.0],\"properties\":{},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-10.0,-10.0],[10.0,-10.0],[10.0,10.0],[-10.0,-10.0]]]}}", JSON.toJSONString(geometry))
assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)))
assertEquals(Feature.class, geometry.getClass())
assertEquals("{\"type\":\"Feature\",\"id\":\"f2\",\"properties\":{},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-10.0,-10.0],[10.0,-10.0],[10.0,10.0],[-10.0,-10.0]]]}}", JSON.toJSONString(geometry))
assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)))
assertEquals(MultiPoint.class, geometry.getClass())
assertEquals("{\"type\":\"MultiPoint\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]}", JSON.toJSONString(geometry))
assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)))
assertEquals(point, point2)
assertEquals(color, color2)
assertEquals("1", result.toString())
assertEquals("\"2020-01-06 17:00:00\"", result.toString())
assertEquals("\"\\\"\"", result.toString())
assertEquals("1", result.toString())
assertEquals("null", udf.eval(new Text("{\"id\":null}".getBytes(StandardCharsets.UTF_8))).toString())
assertEquals("true", udf.eval(new Text("{\"id\":true}".getBytes(StandardCharsets.UTF_8))).toString())
assertEquals("false", udf.eval(new Text("{\"id\":false}".getBytes(StandardCharsets.UTF_8))).toString())
assertEquals("123", udf.eval(new Text("{\"id\":123}".getBytes(StandardCharsets.UTF_8))).toString())
assertEquals("1234567890", udf.eval(new Text("{\"id\":1234567890}".getBytes(StandardCharsets.UTF_8))).toString())
assertEquals("12.34", udf.eval(new Text("{\"id\":12.34}".getBytes(StandardCharsets.UTF_8))).toString())
assertEquals("12", udf.eval(new Text("{\"id\": 12D}".getBytes(StandardCharsets.UTF_8))).toString())
assertEquals("abc", udf.eval(new Text("{\"id\":\"abc\"}".getBytes(StandardCharsets.UTF_8))).toString())
assertEquals("ab\\c", udf.eval(new Text("{\"id\":\"ab\\\\c\"}".getBytes(StandardCharsets.UTF_8))).toString())
assertEquals("{}", udf.eval(new Text("{\"id\":{}}".getBytes(StandardCharsets.UTF_8))).toString())
assertEquals("[]", udf.eval(new Text("{\"id\":[]}".getBytes(StandardCharsets.UTF_8))).toString())
assertEquals("2020-01-06 17:00:00", result.toString())
assertEquals("450", result.toString())
assertEquals("101", udf.text.toString())
assertEquals("123", udf.text.toString())
assertEquals(Byte.toString(Byte.MIN_VALUE), udf.text.toString())
assertEquals("123", udf.text.toString())
assertEquals("123", udf.text.toString())
assertEquals("123", udf.text.toString())
assertEquals("abc", udf.text.toString())
assertEquals("1", result.toStringUtf8())
assertArrayEquals(row, row1)
assertEquals(53, rowCount)
assertEquals(3, columns.size())
assertEquals(3, line0.length)
assertEquals("Alabama", line0[0])
assertEquals("Ala.", line0[1])
assertEquals("AL", line0[2])
assertEquals(3, line1.length)
assertEquals("Alaska", line1[0])
assertEquals("Alaska", line1[1])
assertEquals("AK", line1[2])
assertEquals(rowCount, rows)
assertEquals(2, line.length)
assertEquals(101, line[0])
assertEquals("DataWorks", line[1])
assertNull(parser.readLineValues())
assertEquals(101, bean.id)
assertEquals("DataWorks", bean.name)
assertEquals(2, line.length)
assertEquals("DataWorks", line[0])
assertEquals(101, line[1])
assertEquals(101, bean.id)
assertEquals("DataWorks", bean.name)
assertEquals(101, bean.id)
assertEquals("DataWorks", bean.name)
assertEquals("1001,DataWorks\n", csv)
assertEquals(bean.id, bean1.id)
assertEquals(bean.name, bean1.name)
assertEquals("1001,DataWorks\n" + "1002,MaxCompute\n", csv)
assertEquals(53, CSVParser.rowCount(file))
assertEquals(496774, CSVParser.rowCount(zipIn))
assertEquals(496774, rowCount)
assertEquals(496774, rowCount)
assertEquals(496774, rowCount)
assertEquals(496774, rowCount)
assertEquals(496774, rowCount)
assertEquals(496774, rowCount)
assertEquals(496774, rowCount)
assertEquals(496774, rowCount)
assertEquals("1001,DataWorks\n", csv)
assertEquals(bean.id, bean1.id)
assertEquals(bean.name, bean1.name)
assertEquals("1001,DataWorks\n", csv)
assertEquals(bean.id, bean1.id)
assertEquals(bean.name, bean1.name)
assertEquals("1001,DataWorks\n", csv)
assertEquals(bean.id, bean1.id)
assertEquals(bean.name, bean1.name)
assertEquals("1001,DataWorks\n" + "1002,MaxCompute\n", csv)
assertEquals(5, columns.size())
assertEquals(5, columns.size())
assertEquals(5, columns.size())
assertEquals(5, columns.size())
assertEquals("{}", JSON.toJSONString(vo))
assertNotEquals(requestBody.contentLength(), 0)
assertEquals(JSON.toJSONString(mode2), json)
