assertEquals("{\n" + "    \"serialNumber\": 1234,\n" + "    \"modelYear\": 2013,\n" + "    \"available\": \"T\",\n" + "    \"code\": \"A\",\n" + "    \"someNumbers\": [0, 1, 2, 3, 4],\n" + "    \"vehicleCode\": \"ab\\\"def\",\n" + "    \"extras\": { \"sunRoof\": false, \"sportsPack\": true, \"cruiseControl\": true },\n" + "    \"engine\": \n" + "    {\n" + "        \"capacity\": 2000,\n" + "        \"numCylinders\": 4,\n" + "        \"maxRpm\": 9000,\n" + "        \"manufacturerCode\": \"123\",\n" + "        \"fuel\": \"Petrol\"\n" + "    },\n" + "    \"uuid\": [7, 3],\n" + "    \"cupHolderCount\": 5,\n" + "    \"fuelFigures\": [\n" + "    {\n" + "        \"speed\": 30,\n" + "        \"mpg\": 35.9\n" + "    },\n" + "    {\n" + "        \"speed\": 55,\n" + "        \"mpg\": 49.0\n" + "    },\n" + "    {\n" + "        \"speed\": 75,\n" + "        \"mpg\": 40.0\n" + "    }],\n" + "    \"performanceFigures\": [\n" + "    {\n" + "        \"octaneRating\": 95,\n" + "        \"acceleration\": [\n" + "        {\n" + "            \"mph\": 30,\n" + "            \"seconds\": 4.0\n" + "        },\n" + "        {\n" + "            \"mph\": 60,\n" + "            \"seconds\": 7.5\n" + "        },\n" + "        {\n" + "            \"mph\": 100,\n" + "            \"seconds\": 12.2\n" + "        }]\n" + "    },\n" + "    {\n" + "        \"octaneRating\": 99,\n" + "        \"acceleration\": [\n" + "        {\n" + "            \"mph\": 30,\n" + "            \"seconds\": 3.8\n" + "        },\n" + "        {\n" + "            \"mph\": 60,\n" + "            \"seconds\": 7.1\n" + "        },\n" + "        {\n" + "            \"mph\": 100,\n" + "            \"seconds\": 11.8\n" + "        }]\n" + "    }],\n" + "    \"manufacturer\": \"Honda\",\n" + "    \"model\": \"Civic VTi\",\n" + "    \"activationCode\": \"315\\\\8\"\n" + "}", result)
assertEquals("{\n" + "    \"login\": \"example\",\n" + "    \"encryptedPassword\": \"0b004061\"\n" + "}", result)
assertEquals("For input string: \"" + value + "\"", exception.getMessage())
assertEquals("had 4 errors", exception.getMessage())
assertNotNull(fields)
assertEquals(filteringVersion, transformedSchema.version())
assertNull(description)
assertNull(map.get("testType").semanticType())
assertNull(((EncodedDataType) map.get("testTypeDefaultCharMinValue")).minValue())
assertNull(((EncodedDataType) map.get("testTypeDefaultCharMaxValue")).maxValue())
assertNull(((EncodedDataType) map.get("testTypeDefaultCharNullValue")).nullValue())
fail("Expected IllegalStateException")
assertNotNull(fields)
assertNotNull(fields.get(1).dimensionType())
assertNotNull(groupFields)
assertNotNull(testResource)
assertNotNull(messageSchema.getType("Symbol"))
fail("Expected IllegalStateException", "A execução falhou por uma causa deliberada")
fail("expected IllegalStateException")
fail("expected IllegalStateException")
fail("expected IllegalStateException")
fail("expected IllegalStateException")
fail("expected IllegalStateException")
fail("expected IllegalStateException")
fail("expected IllegalStateException")
fail("expected IllegalStateException")
assertTrue(varDataField.isVariableLength())
assertNull(fields.get(1).type())
assertNull(fields.get(1).type())
assertNull(fields.get(1).type())
fail("expected IllegalStateException", "A execução falhou por uma causa deliberada")
fail("expected IllegalStateException", "A execução falhou por uma causa deliberada")
fail("expected IllegalStateException", "A execução falhou por uma causa deliberada")
fail("expected IllegalStateException", "A execução falhou por uma causa deliberada")
fail("expected IllegalStateException", "A execução falhou por uma causa deliberada")
fail("expected IllegalStateException", "A execução falhou por uma causa deliberada")
fail("expected IllegalStateException", "A execução falhou por uma causa deliberada")
fail("expected IllegalStateException", "A execução falhou por uma causa deliberada")
assertSame(SchemaTransformer.IDENTITY_TRANSFORMER, schemaTransformerFactory.delegate())
assertSame(SchemaTransformer.IDENTITY_TRANSFORMER, schemaTransformerFactory.delegate())
assertInstanceOf(SinceVersionSchemaTransformer.class, delegate)
assertEquals(5, transformer.sinceVersion())
assertInstanceOf(IdKeyedSchemaTransformer.class, delegate)
assertEquals(20, schemaTransformer1.sinceVersion())
assertEquals(32, schemaTransformer4.sinceVersion())
assertEquals(5, schemaTransformerDefault.sinceVersion())
assertEquals('a', (char) aByte)
assertEquals("97", Byte.toString(aByte))
assertEquals("65_u8", generateRustLiteral(CHAR, "65"))
assertEquals("64.1_f64", generateRustLiteral(DOUBLE, "64.1"))
assertEquals("f64::NAN", generateRustLiteral(DOUBLE, "NaN"))
assertEquals("64.1_f32", generateRustLiteral(FLOAT, "64.1"))
assertEquals("f32::NAN", generateRustLiteral(FLOAT, "NaN"))
assertEquals("65_i8", generateRustLiteral(INT8, "65"))
assertEquals("65_i16", generateRustLiteral(INT16, "65"))
assertEquals("65_i32", generateRustLiteral(INT32, "65"))
assertEquals("65_i64", generateRustLiteral(INT64, "65"))
assertEquals("0x41_u8", generateRustLiteral(UINT8, "65"))
assertEquals("0x41_u16", generateRustLiteral(UINT16, "65"))
assertEquals("0x41_u32", generateRustLiteral(UINT32, "65"))
assertEquals("0x41_u64", generateRustLiteral(UINT64, "65"))
assertEquals("0xff_u8", generateRustLiteral(UINT8, UINT8.nullValue().toString()))
assertEquals("0xffff_u16", generateRustLiteral(UINT16, UINT16.nullValue().toString()))
assertEquals("0xffffffff_u32", generateRustLiteral(UINT32, UINT32.nullValue().toString()))
assertEquals("0xffffffffffffffff_u64", generateRustLiteral(UINT64, UINT64.nullValue().toString()))
assertEquals("ABee", cleanUpperAcronyms("ABee"))
assertEquals("mdEntryTypeBook", cleanUpperAcronyms("MDEntryTypeBook"))
assertEquals("MD_EntryTypeBook", cleanUpperAcronyms("MD_EntryTypeBook"))
assertEquals("price9Book", cleanUpperAcronyms("PRICE9Book"))
assertEquals("", formatFunctionName(""))
assertEquals("a", formatFunctionName("a"))
assertEquals("a", formatFunctionName("A"))
assertEquals("car", formatFunctionName("Car"))
assertEquals("car", formatFunctionName("car"))
assertEquals("decode_car", formatFunctionName("DecodeCar"))
assertEquals("decode_car", formatFunctionName("decodeCar"))
assertEquals("decode_car", formatFunctionName("decode_car"))
assertEquals("decode_car", formatFunctionName("Decode_car"))
assertEquals("decode_car", formatFunctionName("decode_Car"))
assertEquals("decode_car", formatFunctionName("Decode_Car"))
assertEquals("decode_car", formatFunctionName("DECODE_Car"))
assertEquals("decode_car", formatFunctionName("DECODE_car"))
assertEquals("decode_car", formatFunctionName("DECODECar"))
assertEquals("decode_car", formatFunctionName("DECODE_CAR"))
assertEquals("decode_ca_r", formatFunctionName("DECODE_caR"))
assertEquals("pricenull_9", formatFunctionName("PRICENULL9"))
assertEquals("price_9_book", formatFunctionName("PRICE9Book"))
assertEquals("issue_435", formatFunctionName("issue435"))
assertEquals("upper_case", formatFunctionName("UPPERCase"))
assertEquals("no_md_entries", formatFunctionName("NoMDEntries"))
assertEquals("md_entry_type_book", formatFunctionName("MD_EntryTYPEBook"))
assertEquals("cl_ord_id", formatFunctionName("ClOrdID"))
assertEquals("ab_c", formatFunctionName("aBc"))
assertEquals("ab_cd", formatFunctionName("aBcD"))
assertEquals("ab_cd", formatFunctionName("aB_cD"))
assertEquals("ab_cd", formatFunctionName("AbCd"))
assertTrue(containsCodeWithSinceVersion(sources, versionIncluded))
assertTrue(doesNotContainsCodeWithSinceVersion(sources, versionExcluded))
assertEquals("[Car]" + "(sbeTemplateId=1|sbeSchemaId=1|sbeSchemaVersion=2|sbeBlockLength=62):" + "serialNumber=1234|modelYear=2013|available=T|code=A|" + "someNumbers=[0,1,2,3,4]|" + "vehicleCode=ab\"def|" + "extras={sportsPack,cruiseControl}|" + "engine=(capacity=2000|numCylinders=4|manufacturerCode=123|)|" + "uuid=[7,3]|" + "cupHolderCount=5|" + "fuelFigures=[" + "(speed=30|mpg=35.9)," + "(speed=55|mpg=49.0)," + "(speed=75|mpg=40.0)]|" + "performanceFigures=[" + "(octaneRating=95|acceleration=[(mph=30|seconds=4.0),(mph=60|seconds=7.5),(mph=100|seconds=12.2)])," + "(octaneRating=99|acceleration=[(mph=30|seconds=3.8),(mph=60|seconds=7.1),(mph=100|seconds=11.8)])]|" + "manufacturer='Honda'|model='Civic VTi'|activationCode='315\\8'", result)
assertEquals("[Car]" + "(sbeTemplateId=1|sbeSchemaId=1|sbeSchemaVersion=2|sbeBlockLength=62):" + "serialNumber=0|modelYear=0|available=F|code=NULL_VAL|someNumbers=[0,0,0,0,0]|vehicleCode=|extras={}|" + "engine=(capacity=0|numCylinders=0|manufacturerCode=|)|" + "uuid=[0,0]|cupHolderCount=0|" + "fuelFigures=[]|performanceFigures=[]|manufacturer=''|model=''|activationCode=''", result)
assertNotNull(aClass)
assertEquals(ir.id(), decodedIr.id())
assertEquals(ir.version(), decodedIr.version())
assertEquals(ir.byteOrder(), decodedIr.byteOrder())
assertEquals(ir.applicableNamespace(), decodedIr.applicableNamespace())
assertEquals(ir.packageName(), decodedIr.packageName())
assertEquals(ir.types().size(), decodedIr.types().size())
assertEquals(ir.messages().size(), decodedIr.messages().size())
assertEquals(passOne, passTwo)
assertNotEquals(passOne, partialPassOne)
assertEquals(partialPassOne, partialPassTwo)
assertEquals(passOne, passThree)
assertNotNull(clazz)
assertNotNull(clazz)
assertNotNull(clazz)
assertNotNull(clazz)
assertNotNull(clazz)
assertNotNull(clazz)
assertNotNull(groupFlyweight)
assertEquals(expectedSerialNumber, serialNumber)
assertEquals(expectedManufacturer, manufacturer)
assertEquals(expectedEngineCapacity, getCapacity(engineDecoder))
assertTrue(getCruiseControl(extrasDecoder))
assertNotNull(minValue)
assertEquals(0, minValue.invoke(null))
assertNotNull(maxValue)
assertEquals(65534, maxValue.invoke(null))
assertNotNull(encoderClazz)
assertTrue(encoderClazz.isAnnotationPresent(Deprecated.class))
assertNotNull(decoderClazz)
assertTrue(decoderClazz.isAnnotationPresent(Deprecated.class))
assertNotNull(encoderClazz)
assertNotNull(decoderClazz)
assertNotNull(sources.get("test.message.schema.common.CarEncoder"))
assertNotNull(sources.get("test.message.schema.common.CarDecoder"))
assertNotNull(sources.get("outside.schema.BooleanType"))
assertNotNull(sources.get("outside.schema.DaysEncoder"))
assertNotNull(sources.get("outside.schema.DaysDecoder"))
assertNotNull(sources.get(ir.applicableNamespace() + ".MessageHeaderEncoder"))
assertNotNull(encoderClazz)
assertNotNull(decoderClazz)
assertNotNull(sources.get(ir.applicableNamespace() + ".CarEncoder"))
assertNotNull(sources.get(ir.applicableNamespace() + ".CarDecoder"))
assertNotNull(sources.get(ir.applicableNamespace() + ".BooleanType"))
assertNotNull(sources.get(ir.applicableNamespace() + ".DaysEncoder"))
assertNotNull(sources.get(ir.applicableNamespace() + ".DaysDecoder"))
assertNotNull(sources.get(ir.applicableNamespace() + ".MessageHeaderEncoder"))
assertNotNull(clazz)
assertNotNull(readerClass)
assertNotNull(clazz)
assertEquals(initialLimit, rewindLimit)
assertEquals(readLimit, skipLimit)
assertEquals(encodedLength, decodedLengthNoRead)
assertEquals(encodedLength, decodedLengthFullSkip)
assertEquals(encodedLength, decodedLengthAfterRewind)
assertEquals(encodedLength, decodedLengthPartialRead)
assertEquals(ir.id(), decodedIr.id())
assertEquals(ir.version(), decodedIr.version())
assertEquals(ir.byteOrder(), decodedIr.byteOrder())
assertEquals(ir.applicableNamespace(), decodedIr.applicableNamespace())
assertEquals(ir.packageName(), decodedIr.packageName())
assertEquals(ir.types().size(), decodedIr.types().size())
assertEquals(ir.messages().size(), decodedIr.messages().size())
assertTrue(exists)
assertTrue(exists)
assertEquals(TestTargetLanguage.ir, ir)
assertEquals(TestTargetLanguage.outputDir, outputDir)
fail("expected IllegalStateException")
assertNotNull(ir.getType("compositeOne"))
assertNotNull(ir.getType("compositeTwo"))
assertNotNull(ir.getType("compositeThree"))
