assertEquals("java.lang.Object", type.describe())
assertTimeoutPreemptively(Duration.ofMillis(1000L), () -> {
    String code = String.join(System.lineSeparator(), "public class AbstractExercise extends java.lang.Object {", "}");
    ParseResult<CompilationUnit> parseResult = javaParser.parse(ParseStart.COMPILATION_UNIT, Providers.provider(code));
    assertTrue(parseResult.isSuccessful());
    assertTrue(parseResult.getResult().isPresent());
    List<ClassOrInterfaceType> referenceTypes = parseResult.getResult().get().findAll(ClassOrInterfaceType.class);
    assertTrue(referenceTypes.size() > 0);
    final List<ResolvedMethodDeclaration> methods = referenceTypes.get(0).resolve().asReferenceType().getAllMethodsVisibleToInheritors();
    assertEquals(1, methods.size());
})
assertTrue(fae.calculateResolvedType().describe().equals("java.lang.String"))
assertTrue(value.getName().equals("AFIELD"))
assertEquals("a", fd.get().getVariable(0).getInitializer().get().asStringLiteralExpr().getValue())
assertEquals("X.A.bar", mce.resolve().getQualifiedName())
assertEquals("java.lang.Runnable", resolved.getParam(0).getType().describe())
assertTrue(!resolved.isGeneric())
assertEquals("MyAnnotation", declaration.getNameAsString())
assertEquals("MyAnnotationWithElements", declaration.getNameAsString())
assertEquals("VoidVisitor", declaration.getNameAsString())
assertEquals(true, declaration.isInterface())
assertEquals("AccessSpecifier", declaration.getNameAsString())
assertEquals("AccessSpecifier", enumDeclaration.getNameAsString())
assertEquals("PUBLIC", declaration.getNameAsString())
assertEquals("CompilationUnit", classDeclaration.getNameAsString())
assertEquals("CompilationUnit", classDeclaration.getNameAsString())
assertEquals("getComments", resolvedDeclaration.getName())
assertEquals(0, resolvedDeclaration.getNumberOfParams())
assertEquals("CompilationUnit", classDeclaration.getNameAsString())
assertEquals("bar(Optional.of(new Derived()))", mces.get(0).toString())
assertEquals("Base.bar(java.util.Optional<Base>)", mces.get(0).resolve().getQualifiedSignature())
assertNotNull(foo)
assertEquals(true, pr.isSuccessful())
assertEquals("com.github.javaparser.symbolsolver.testingclasses.UtilityClass.method(com.github.javaparser.symbolsolver.testingclasses.SomeClass.InnerEnum)", rmd.getQualifiedSignature())
assertEquals("CONSTANT", rvd.getName())
assertEquals("com.github.javaparser.symbolsolver.testingclasses.SomeClass.InnerEnum", rvd.getType().describe())
assertEquals("A.method", mce.resolve().getQualifiedName())
assertEquals("Test.setRunnable(java.lang.String, java.lang.Runnable)", mce.get(0).resolve().getQualifiedSignature())
assertEquals("Test.getContext(Test)", mce.get(1).resolve().getQualifiedSignature())
assertEquals("Test.getContext(Test)", sig)
assertEquals("java.lang.String", exprs.get(0).calculateResolvedType().describe())
assertEquals("java.lang.String", exprs.get(1).calculateResolvedType().describe())
assertEquals("java.lang.String", exprs.get(2).calculateResolvedType().describe())
assertEquals("float", exprs.get(3).calculateResolvedType().describe())
assertEquals("double", exprs.get(4).calculateResolvedType().describe())
assertEquals("int", exprs.get(5).calculateResolvedType().describe())
assertEquals("long", exprs.get(6).calculateResolvedType().describe())
assertEquals("long", exprs.get(7).calculateResolvedType().describe())
assertEquals("int", exprs.get(8).calculateResolvedType().describe())
assertEquals("long", exprs.get(9).calculateResolvedType().describe())
assertEquals("long", exprs.get(10).calculateResolvedType().describe())
assertEquals("int", exprs.get(11).calculateResolvedType().describe())
assertEquals("int", exprs.get(12).calculateResolvedType().describe())
assertEquals("int", exprs.get(13).calculateResolvedType().describe())
assertEquals("InnerClass(int)", rcd.getSignature())
assertEquals("InnerClass(int)", rcd.getSignature())
assertEquals("InnerClass(int)", rcd.getSignature())
assertEquals("void", (mce.calculateResolvedType().describe()))
assertEquals("java.util.concurrent.TimeUnit", (mce.getArgument(0).calculateResolvedType().describe()))
assertTrue(method.isSolved())
Assertions.assertNotNull(javaParserFacade.solve(expression))
Assertions.assertNotNull(javaParserFacade.convertToUsage(expression.getType()))
assertTrue(parseResult.isSuccessful())
assertEquals("D", javaParserFacade.solve(methodCallExprs.get(0)).getCorrespondingDeclaration().getReturnType().describe())
assertEquals("D", javaParserFacade.solve(methodCallExprs.get(2)).getCorrespondingDeclaration().getReturnType().describe())
assertEquals("void", javaParserFacade.solve(methodCallExprs.get(1)).getCorrespondingDeclaration().getReturnType().describe())
assertEquals("D", javaParserFacade.solve(methodCallExprs.get(4)).getCorrespondingDeclaration().getReturnType().describe())
assertEquals("java.lang.Object", a.getQualifiedName())
assertEquals(resultsQualifiedName.get(expr.toString()), qName)
assertEquals(resultsResolvedType.get(expr.toString()), resolvedType)
assertTrue(parseResult.isSuccessful())
assertTrue(parseResult.getResult().isPresent())
assertTrue("int".contentEquals(resolve.getType().describe()))
assertEquals("Test1.Test2", oce.get(0).calculateResolvedType().describe())
assertEquals("Test1.Test3", oce.get(1).calculateResolvedType().describe())
assertTrue(methodType.isPresent())
assertEquals("java.util.ArrayList", resolvedType)
assertEquals("foo(new Object[5])", mce.toString())
assertEquals("TestClass2.foo(java.lang.Object)", mce.resolve().getQualifiedSignature())
assertEquals("void", mce.calculateResolvedType().describe())
assertTrue(fae.isPresent())
assertEquals("foo.bar.BinaryExpr.Operator", fae.get().resolve().getType().describe())
assertEquals("OR", fae.get().resolve().getName())
assertTrue(fae.isPresent())
assertEquals("foo.bar.BinaryExpr.Operator", fae.get().resolve().getType().describe())
assertEquals("AND", fae.get().resolve().getName())
assertTrue(fae.isPresent())
assertEquals("foo.bar.BinaryExpr.Operator", fae.get().resolve().getType().describe())
assertEquals("OR", fae.get().resolve().getName())
assertTrue(fae.isPresent())
assertEquals("foo.bar.BinaryExpr.Operator", fae.get().resolve().getType().describe())
assertEquals("AND", fae.get().resolve().getName())
assertTrue(parseResult.isSuccessful())
assertEquals(syntacticClassification, NameLogic.syntacticClassificationAccordingToContext(nameNode))
assertEquals(nameCategory, NameLogic.classifyReference(nameNode, typeSolver))
assertEquals(nameCategory, NameLogic.syntacticClassificationAccordingToContext(nameNode))
assertEquals(nameRole, NameLogic.classifyRole(nameNode))
assertTrue(NameLogic.isSimpleName(nameNode))
assertTrue(NameLogic.isQualifiedName(nameNode))
assertEquals(false, NameLogic.isAName(cu))
assertEquals(false, NameLogic.isAName(cu.getPackageDeclaration().get()))
assertEquals(true, NameLogic.isAName(packageName))
assertEquals(true, NameLogic.isAName(packageName.getQualifier().get()))
assertEquals(true, NameLogic.isAName(packageName.getQualifier().get().getQualifier().get()))
assertEquals(false, NameLogic.isAName(classA))
assertEquals(true, NameLogic.isAName(classA.getName()))
assertEquals(false, NameLogic.isAName(methodFoo))
assertEquals(true, NameLogic.isAName(methodFoo.getName()))
assertEquals(false, NameLogic.isAName(methodFoo.getParameter(0)))
assertEquals(true, NameLogic.isAName(methodFoo.getParameter(0).getName()))
assertEquals(false, NameLogic.isAName(methodFoo.getParameter(0).getType()))
assertEquals(false, NameLogic.isAName(methodFoo.getType()))
assertEquals(false, NameLogic.isAName(returnStmt))
assertEquals(true, NameLogic.isAName(returnStmt.getExpression().get()))
assertEquals(true, NameLogic.isAName(fieldAccessExpr.getScope()))
assertEquals(true, NameLogic.isAName(fieldAccessExpr.getScope().asFieldAccessExpr().getScope()))
assertEquals(true, NameLogic.isAName(fieldAccessExpr.getScope().asFieldAccessExpr().getScope().asFieldAccessExpr().getScope()))
assertEquals(true, NameLogic.isAName(fieldAccessExpr.getScope().asFieldAccessExpr().getScope().asFieldAccessExpr().getScope().asFieldAccessExpr().getScope()))
assertEquals(DECLARATION, NameLogic.classifyRole(packageName))
assertEquals(DECLARATION, NameLogic.classifyRole(packageName.getQualifier().get()))
assertEquals(DECLARATION, NameLogic.classifyRole(packageName.getQualifier().get().getQualifier().get()))
assertEquals(DECLARATION, NameLogic.classifyRole(classA.getName()))
assertEquals(DECLARATION, NameLogic.classifyRole(methodFoo.getName()))
assertEquals(DECLARATION, NameLogic.classifyRole(methodFoo.getParameter(0).getName()))
assertEquals(REFERENCE, NameLogic.classifyRole(returnStmt.getExpression().get()))
assertEquals(REFERENCE, NameLogic.classifyRole(fieldAccessExpr.getScope()))
assertEquals(REFERENCE, NameLogic.classifyRole(fieldAccessExpr.getScope().asFieldAccessExpr().getScope()))
assertEquals(REFERENCE, NameLogic.classifyRole(fieldAccessExpr.getScope().asFieldAccessExpr().getScope().asFieldAccessExpr().getScope()))
assertEquals(REFERENCE, NameLogic.classifyRole(fieldAccessExpr.getScope().asFieldAccessExpr().getScope().asFieldAccessExpr().getScope().asFieldAccessExpr().getScope()))
assertEquals("com.mydeveloperplanet.jpmshello", NameLogic.nameAsString(md.getName()))
assertEquals("Foo", NameLogic.nameAsString(cu.getType(0).getName()))
assertEquals(1, parseResult.getProblems().size())
assertEquals("Use of patterns with instanceof is not supported.", parseResult.getProblem(0).getMessage())
assertEquals(1, methodCalls.size())
assertEquals(1, methodCalls.size())
assertEquals(1, methodCalls.size())
assertEquals("java.lang.String.contains(java.lang.CharSequence)", resolve.getQualifiedSignature())
assertEquals("boolean", resolve.getReturnType().describe())
assertEquals("contains", resolve.getName())
assertEquals(1, resolve.getNumberOfParams())
assertEquals("contains(java.lang.CharSequence)", resolve.getSignature())
assertTrue(inScopeMethodCall.hasScope())
assertEquals("java.lang.String", resolvedType.describe())
assertEquals(1, methodCalls.size())
assertEquals(1, methodCalls.size())
assertEquals("s.contains(\"in scope\")", inScopeMethodCall.toString())
assertEquals("java.lang.String.contains(java.lang.CharSequence)", resolve.getQualifiedSignature())
assertEquals("boolean", resolve.getReturnType().describe())
assertEquals("contains", resolve.getName())
assertEquals(1, resolve.getNumberOfParams())
assertEquals("contains(java.lang.CharSequence)", resolve.getSignature())
assertTrue(inScopeMethodCall.hasScope())
assertEquals("java.lang.String", resolvedType.describe())
assertEquals(1, methodCalls.size())
assertEquals(1, binaryExprs.size())
assertEquals(1, nameExprs.size())
assertEquals(1, methodCalls.size())
assertEquals(1, binaryExprs.size())
assertEquals(1, methodCallExprs.size())
assertEquals(1, methodCalls.size())
assertEquals(2, methodCalls.size())
assertEquals(2, methodCalls.size())
assertEquals(2, methodCalls.size())
assertEquals("java.lang.String.contains(java.lang.CharSequence)", resolve.getQualifiedSignature())
assertEquals("boolean", resolve.getReturnType().describe())
assertEquals("contains", resolve.getName())
assertEquals(1, resolve.getNumberOfParams())
assertEquals("contains(java.lang.CharSequence)", resolve.getSignature())
assertTrue(inScopeMethodCall.hasScope())
assertEquals("java.lang.String", resolvedType.describe())
assertEquals(1, methodCalls.size())
assertEquals("java.lang.String.contains(java.lang.CharSequence)", resolve.getQualifiedSignature())
assertEquals("boolean", resolve.getReturnType().describe())
assertEquals("contains", resolve.getName())
assertEquals(1, resolve.getNumberOfParams())
assertEquals("contains(java.lang.CharSequence)", resolve.getSignature())
assertEquals(1, methodCalls.size())
assertEquals("java.util.List.contains(java.lang.Object)", resolve.getQualifiedSignature())
assertEquals("boolean", resolve.getReturnType().describe())
assertEquals("contains", resolve.getName())
assertEquals(1, resolve.getNumberOfParams())
assertEquals("contains(java.lang.Object)", resolve.getSignature())
assertEquals(1, methodCalls.size())
assertEquals("java.util.List.contains(java.lang.Object)", resolve.getQualifiedSignature())
assertEquals("boolean", resolve.getReturnType().describe())
assertEquals("contains", resolve.getName())
assertEquals(1, resolve.getNumberOfParams())
assertEquals("contains(java.lang.Object)", resolve.getSignature())
assertEquals(1, methodCalls.size())
assertEquals(1, methodCalls.size())
assertEquals(2, nameExprs.size())
assertTrue(resolved.isSolved())
assertTrue(resolved.isSolved())
assertTrue(reference.isSolved())
assertTrue(reference.isSolved())
assertEquals("JavaParserTypeSolver.java", wrappedNode.findCompilationUnit().get().getStorage().get().getFileName())
assertTrue(folder.mkdirs())
assertTrue(testJava.createNewFile())
assertTrue(x.isSolved())
assertNotNull(x.getCorrespondingDeclaration())
assertTrue(x.getCorrespondingDeclaration().isClass())
assertTrue(x.isSolved())
assertNotNull(x.getCorrespondingDeclaration())
assertTrue(x.getCorrespondingDeclaration().isClass())
assertTrue(x.isSolved())
assertNotNull(x.getCorrespondingDeclaration())
assertTrue(x.getCorrespondingDeclaration().isEnum())
assertTrue(x.isSolved())
assertNotNull(x.getCorrespondingDeclaration())
assertTrue(x.getCorrespondingDeclaration().isInterface())
assertTrue(x.isSolved())
assertNotNull(x.getCorrespondingDeclaration())
assertTrue(x.getCorrespondingDeclaration().isInterface())
assertTrue(memoryTypeSolver.tryToSolveType(expectedExistingClass.getCanonicalName()).isSolved())
assertEquals(solver1, solver2)
assertNotEquals(solver1, solver2)
assertEquals(solver1, solver2)
assertEquals(solver1.hashCode(), solver2.hashCode())
assertNotEquals(solver1.hashCode(), solver2.hashCode())
assertEquals(solver1.hashCode(), solver2.hashCode())
assertTrue(solvedType.isSolved())
assertEquals(expectedCanonicalName, resolvedDeclaration.getQualifiedName())
assertEquals(true, ts.hasType(String.class.getCanonicalName()))
assertEquals(true, ts.hasType(Object.class.getCanonicalName()))
assertEquals(false, ts.hasType("foo.zum.unexisting"))
assertNull(solver.getParent())
assertNotNull(returnedSolver)
assertEquals(parentSolver, returnedSolver)
assertEquals(typeSolverToRegister, createdTypeSolver)
assertEquals(true, aarTypeSolver.tryToSolveType("android.support.v4.app.ActivityCompat").isSolved())
assertEquals(true, aarTypeSolver.tryToSolveType("android.support.v4.app.ActivityManagerCompat").isSolved())
assertEquals(true, aarTypeSolver.tryToSolveType("android.support.v4.app.NotificationCompat").isSolved())
assertEquals(true, aarTypeSolver.tryToSolveType("android.support.v4.app.NotificationCompat.Action").isSolved())
assertEquals(true, aarTypeSolver.tryToSolveType("android.support.v4.app.NotificationCompat.Action.Builder").isSolved())
assertEquals(false, aarTypeSolver.tryToSolveType("com.github.javaparser.ASTParser.Foo").isSolved())
assertEquals(false, aarTypeSolver.tryToSolveType("com.github.javaparser.Foo").isSolved())
assertEquals(false, aarTypeSolver.tryToSolveType("Foo").isSolved())
assertEquals(true, jarTypeSolver.tryToSolveType("com.github.javaparser.SourcesHelper").isSolved())
assertEquals(true, jarTypeSolver.tryToSolveType("com.github.javaparser.Token").isSolved())
assertEquals(true, jarTypeSolver.tryToSolveType("com.github.javaparser.ASTParser.JJCalls").isSolved())
assertEquals(false, jarTypeSolver.tryToSolveType("com.github.javaparser.ASTParser.Foo").isSolved())
assertEquals(false, jarTypeSolver.tryToSolveType("com.github.javaparser.Foo").isSolved())
assertEquals(false, jarTypeSolver.tryToSolveType("Foo").isSolved())
assertEquals(true, jarTypeSolver1.tryToSolveType("foo.bar.A").isSolved())
assertEquals(true, jarTypeSolver2.tryToSolveType("foo.zum.B").isSolved())
assertEquals(1, ancestors.size())
assertEquals("com.github.javaparser.ast.Node", nodeType.getQualifiedName())
assertEquals(Sets.newHashSet(typeA), jarTypeSolver1.getKnownClasses())
assertTrue(jarTypeSolver1.tryToSolveType(typeA).isSolved())
assertEquals(Sets.newHashSet(typeB), jarTypeSolver2.getKnownClasses())
assertTrue(jarTypeSolver2.tryToSolveType(typeB).isSolved())
assertEquals("foo.bar.MyAnnotation", resolved.getQualifiedName())
assertEquals("foo.bar", resolved.getPackageName())
assertEquals("MyAnnotation", resolved.getName())
assertEquals("foo.bar.MyAnnotationWithSingleValue", resolved.getQualifiedName())
assertEquals("foo.bar", resolved.getPackageName())
assertEquals("MyAnnotationWithSingleValue", resolved.getName())
assertEquals(IntegerLiteralExpr.class, memberValue.getClass())
assertEquals("foo.bar.MyAnnotationWithElements", resolved.getQualifiedName())
assertEquals("foo.bar", resolved.getPackageName())
assertEquals("MyAnnotationWithElements", resolved.getName())
assertEquals("java.lang.Override", resolved.getQualifiedName())
assertEquals("java.lang", resolved.getPackageName())
assertEquals("Override", resolved.getName())
assertEquals("BooleanLiteralExpr", expr.getClass().getSimpleName())
assertEquals(true, ((BooleanLiteralExpr) expr).getValue())
assertEquals("boolean", rt.describe())
assertEquals("java.lang.SuppressWarnings", resolved.getQualifiedName())
assertEquals("java.lang", resolved.getPackageName())
assertEquals("SuppressWarnings", resolved.getName())
assertEquals("org.junit.Before", resolved.getQualifiedName())
assertEquals("org.junit", resolved.getPackageName())
assertEquals("Before", resolved.getName())
assertEquals("org.junit.Ignore", resolved.getQualifiedName())
assertEquals("org.junit", resolved.getPackageName())
assertEquals("Ignore", resolved.getName())
assertEquals("org.junit.Test", resolved.getQualifiedName())
assertEquals("org.junit", resolved.getPackageName())
assertEquals("Test", resolved.getName())
assertEquals("org.junit.Ignore", resolved.getQualifiedName())
assertEquals(StringLiteralExpr.class, memberValue.getClass())
assertEquals("java.lang.String", rt.describe())
assertEquals("foo.bar.MyAnnotation", resolved.getQualifiedName())
assertTrue(resolved.hasDirectlyAnnotation("java.lang.annotation.Target"))
assertTrue(resolved.hasDirectlyAnnotation("java.lang.annotation.Retention"))
assertEquals("java.lang.Override", resolved.getQualifiedName())
assertTrue(resolved.hasDirectlyAnnotation("java.lang.annotation.Target"))
assertTrue(resolved.hasDirectlyAnnotation("java.lang.annotation.Retention"))
assertEquals("org.junit.Test", resolved.getQualifiedName())
assertTrue(resolved.hasDirectlyAnnotation("java.lang.annotation.Target"))
assertTrue(resolved.hasDirectlyAnnotation("java.lang.annotation.Retention"))
assertEquals("foo.bar.MyAnnotation", resolvedAnnotationOnClass.getQualifiedName())
assertEquals("org.junit.Ignore", resolvedAnnotationOnMethod.getQualifiedName())
assertEquals(ancestors.size(), 1)
assertEquals(ancestors.get(0).getQualifiedName(), "java.lang.annotation.Annotation")
assertEquals(ad.getMember(0).asAnnotationMemberDeclaration().resolve().getType().asPrimitive().describe(), "int")
assertEquals(am.getType().asReferenceType().getQualifiedName(), "foo.bar.MyAnnotationWithInnerClass.MyInnerClass")
assertEquals(expectedLines.length, outputLines.length)
assertFalse(x.isSolved())
assertFalse(memoryTypeSolver.tryToSolveType(expectedNonExistingClass.getCanonicalName()).isSolved())
assertFalse(typeSolver.tryToSolveType("java.lang.Object").isSolved())
assertFalse(jarTypeSolver1.tryToSolveType(typeB).isSolved())
assertFalse(jarTypeSolver2.tryToSolveType(typeA).isSolved())
assertFalse(resolved.hasDirectlyAnnotation("java.lang.annotation.Documented"))
assertFalse(resolved.hasDirectlyAnnotation("java.lang.annotation.Documented"))
assertFalse(resolved.hasDirectlyAnnotation("java.lang.annotation.Documented"))
assertFalse(type.isTypeVariable())
assertEquals("java.lang.String", type.describe())
fail("Excepted NotFoundException wrapped in a RuntimeException, but got no exception.")
assertTrue(solvedSymbol.isSolved())
assertEquals(symbolName, solvedSymbol.getCorrespondingDeclaration().asField().getName())
assertEquals(exception1, exception2)
assertEquals(exception1, exception3)
assertEquals(exception1, exception4)
assertEquals("java.lang.String", ref.describe())
assertEquals("size", methodUsage.getName())
assertEquals("foo", methodUsage.getName())
assertEquals("noneOf", methodUsage.getName())
assertEquals("java.lang.Object.toString()", call1.getQualifiedSignature())
assertEquals(true, reference.isSolved())
assertEquals(true, type.isReferenceType())
assertEquals(true, type.asReferenceType().getTypeDeclaration().get() instanceof JavaParserAnonymousClassDeclaration)
assertTrue(reference.isSolved())
assertEquals("java.io.File.delete()", reference.getCorrespondingDeclaration().getQualifiedSignature())
assertEquals(mainClass, resolvedTypeDeclaration.getParentNode().get())
assertTrue(reference.isSolved())
assertEquals("X.Y.bar()", reference.getCorrespondingDeclaration().getQualifiedSignature())
assertTrue(reference.isSolved())
assertEquals("X.Y.bar()", reference.getCorrespondingDeclaration().getQualifiedSignature())
assertTrue(reference.isSolved())
assertEquals("X.A.bar()", reference.getCorrespondingDeclaration().getQualifiedSignature())
assertEquals("ClassExtendingUnknownClass.bar(java.lang.String)", resolvedMethodDeclaration.getQualifiedSignature())
assertEquals("OverloadedMethods.complexOverloading1(java.lang.String, java.lang.String)", resolvedMethodDeclaration.getQualifiedSignature())
assertEquals("OverloadedMethods.complexOverloading2(java.lang.String...)", resolvedMethodDeclaration.getQualifiedSignature())
assertEquals("OverloadedMethods.complexOverloading3(long)", resolvedMethodDeclaration.getQualifiedSignature())
assertEquals("OverloadedMethods.complexOverloading4(long, int)", resolvedMethodDeclaration.getQualifiedSignature())
fail("Excepted NotFoundException wrapped in a RuntimeException, but got no exception.", "A execução falhou por uma causa deliberada")
fail("We shouldn't be able to resolve the type (it is not defined).")
assertEquals(2, calls.size())
assertEquals("com.github.javaparser.ast.visitor.GenericVisitor<R, A>", methodUsage1.getParamType(0).describe())
assertEquals("com.github.javaparser.ast.visitor.VoidVisitor<A>", methodUsage2.getParamType(0).describe())
assertEquals("null", rt1.describe())
assertEquals("java.lang.String", rt2.describe())
assertEquals("A", rt3.describe())
assertEquals("java.lang.String", rt1.describe())
assertEquals("java.lang.String", rt2.describe())
assertEquals("java.lang.Boolean", rt1.describe())
assertEquals("boolean", rt2.describe())
assertEquals("int", rt1.describe())
assertEquals("int", rt2.describe())
assertEquals("short", rt3.describe())
assertEquals("short", rt4.describe())
assertEquals("short", rt5.describe())
assertEquals("short", rt5b.describe())
assertEquals("byte", rt6.describe())
assertEquals("short", rt7.describe())
assertEquals("char", rt8.describe())
assertEquals("byte", rt9.describe())
assertEquals("short", rt10.describe())
assertEquals("char", rt11.describe())
assertEquals("char", rt12.describe())
assertEquals("long", rt13.describe())
assertEquals("double", rt14.describe())
assertEquals("java.lang.String", rt1.describe())
assertEquals("java.util.List<T>", rt2.describe())
assertEquals("java.lang.Class<? extends java.io.Serializable>", rt5.describe())
assertEquals("java.io.Serializable", rt6.describe())
assertEquals("java.util.List<java.lang.String>", rt3.describe())
assertEquals("java.util.List<java.lang.String>", rt4.describe())
assertFalse(solvedSymbol.isSolved())
assertTrue(expr.isPolyExpression())
assertFalse(expr.isStandaloneExpression())
assertTrue(expr.isPolyExpression())
assertFalse(expr.isStandaloneExpression())
assertTrue(expr.isStandaloneExpression())
assertFalse(expr.isPolyExpression())
assertFalse(expr.isPolyExpression())
assertTrue(expr.isStandaloneExpression())
assertFalse(expr.isPolyExpression())
assertTrue(expr.isStandaloneExpression())
assertFalse(expr.isPolyExpression())
assertTrue(expr.isStandaloneExpression())
assertFalse(expr.isPolyExpression())
assertTrue(expr.isStandaloneExpression())
assertFalse(expr.isPolyExpression())
assertTrue(expr.isStandaloneExpression())
assertFalse(expr.isPolyExpression())
assertTrue(expr.isStandaloneExpression())
assertFalse(expr.isPolyExpression())
assertTrue(expr.isStandaloneExpression())
assertTrue(expr.elidesTypeArguments())
assertTrue(expr.elidesTypeArguments())
assertTrue(expr.elidesTypeArguments())
assertTrue(expr.elidesTypeArguments())
assertFalse(expr.elidesTypeArguments())
assertTrue(expr.appearsInAssignmentContext())
assertFalse(expr.appearsInAssignmentContext())
assertFalse(expr.appearsInInvocationContext())
assertTrue(expr.appearsInInvocationContext())
assertEquals("V", TypeUtils.getPrimitiveTypeDescriptor(void.class))
assertEquals("V", TypeUtils.getPrimitiveTypeDescriptor(Void.class))
assertEquals("Z", TypeUtils.getPrimitiveTypeDescriptor(boolean.class))
assertEquals("Z", TypeUtils.getPrimitiveTypeDescriptor(Boolean.class))
assertEquals("C", TypeUtils.getPrimitiveTypeDescriptor(char.class))
assertEquals("C", TypeUtils.getPrimitiveTypeDescriptor(Character.class))
assertEquals("B", TypeUtils.getPrimitiveTypeDescriptor(byte.class))
assertEquals("B", TypeUtils.getPrimitiveTypeDescriptor(Byte.class))
assertEquals("S", TypeUtils.getPrimitiveTypeDescriptor(short.class))
assertEquals("S", TypeUtils.getPrimitiveTypeDescriptor(Short.class))
assertEquals("I", TypeUtils.getPrimitiveTypeDescriptor(int.class))
assertEquals("I", TypeUtils.getPrimitiveTypeDescriptor(Integer.class))
assertEquals("J", TypeUtils.getPrimitiveTypeDescriptor(long.class))
assertEquals("J", TypeUtils.getPrimitiveTypeDescriptor(Long.class))
assertEquals("F", TypeUtils.getPrimitiveTypeDescriptor(float.class))
assertEquals("F", TypeUtils.getPrimitiveTypeDescriptor(Float.class))
assertEquals("D", TypeUtils.getPrimitiveTypeDescriptor(double.class))
assertEquals("D", TypeUtils.getPrimitiveTypeDescriptor(Double.class))
assertEquals("X.method", actual)
assertEquals("X.X1.method", actual)
assertEquals("X.Y1.X2.method", actual)
assertEquals("X.Z1.Y2.X3.method", actual)
fail("We shouldn't be able to resolve the type (it is not defined).", "A execução falhou por uma causa deliberada")
assertEquals(Object.class.getCanonicalName(), superclass.getQualifiedName())
assertEquals("java.lang.Throwable.getMessage()", methodUsage.getQualifiedSignature())
assertTrue(symbolReference.isSolved())
assertTrue(symbolReference.getCorrespondingDeclaration().isParameter())
assertEquals("e", symbolReference.getCorrespondingDeclaration().asParameter().getName())
assertEquals("java.lang.UnsupportedOperationException", symbolReference.getCorrespondingDeclaration().asParameter().getType().asReferenceType().getQualifiedName())
assertEquals("Foo.Base.X", jssType.asReferenceType().getQualifiedName())
assertTrue(type.isReferenceType())
assertEquals("java.util.Scanner", type.asReferenceType().getQualifiedName())
assertTrue(jssType instanceof ResolvedUnionType)
assertNotNull(resolvedType)
assertTrue(resolvedType.isReferenceType())
assertEquals(clazz.getCanonicalName(), resolvedType.asReferenceType().getQualifiedName())
assertEquals("java.lang.String", resolvedType.describe())
assertEquals("java.lang.String", resolvedType.describe())
assertEquals("java.util.List<int[]>", resolvedType.describe())
assertEquals("java.lang.String", resolvedType.describe())
assertEquals("java.lang.Object", resolvedType.describe())
assertEquals("(IDLjava/lang/Thread;)V", constructor.get(0).toDescriptor())
assertEquals("(IDLjava/lang/Thread;)Ljava/lang/Object;", methods.get(0).toDescriptor())
assertEquals("(IDLjava/lang/Thread;)V", methods.get(1).toDescriptor())
assertEquals("(IDLjava/lang/Thread;)[I", methods.get(2).toDescriptor())
assertEquals("(IDLjava/lang/Thread;)[[J", methods.get(3).toDescriptor())
assertEquals("()V", methods.get(4).toDescriptor())
assertEquals("(IDLjava/lang/Thread;)Ljava/lang/Object;", methods.get(0).resolve().toDescriptor())
assertEquals("(IDLjava/lang/Thread;)V", methods.get(1).resolve().toDescriptor())
assertEquals("(IDLjava/lang/Thread;)[I", methods.get(2).resolve().toDescriptor())
assertEquals("(IDLjava/lang/Thread;)[[J", methods.get(3).resolve().toDescriptor())
assertEquals("()V", methods.get(4).resolve().toDescriptor())
assertEquals("(Ljava/lang/String;)V", methodCalls.get(0).resolve().toDescriptor())
assertEquals("(Ljava/lang/String;)LA/TestEnum;", methodCalls.get(1).resolve().toDescriptor())
assertEquals("()[LA/TestEnum;", methodCalls.get(2).resolve().toDescriptor())
assertEquals("(Ljava/util/List;)V", methodWithRawParameter.toDescriptor())
assertEquals("()V", methodWithExceptions.toDescriptor())
assertEquals(true, type.isReferenceType())
assertEquals(List.class.getCanonicalName(), type.asReferenceType().getQualifiedName())
assertEquals("java.util.List<java.lang.Long>", type.describe())
assertEquals("variadicMethod", callee.getName())
assertEquals("variadicWithGenericArg", callee.getName())
assertEquals("void", call1.returnType().describe())
assertEquals("int", call2.returnType().describe())
assertEquals("void", call3.returnType().describe())
assertEquals("void", call4.returnType().describe())
assertEquals("java.lang.reflect.Constructor", call1.returnType().asReferenceType().getQualifiedName())
assertEquals("java.lang.reflect.Constructor", call2.returnType().asReferenceType().getQualifiedName())
assertEquals("java.lang.reflect.Constructor", call3.returnType().asReferenceType().getQualifiedName())
assertEquals("java.lang.reflect.Constructor", call4.returnType().asReferenceType().getQualifiedName())
assertEquals("java.lang.String", ref.describe())
assertTrue(ref.isSolved())
assertTrue(ref.getCorrespondingDeclaration().isField())
assertTrue(ref.isSolved())
assertEquals("label", ref.getCorrespondingDeclaration().getName())
assertEquals("java.lang.String", ref.describe())
assertEquals("java.lang.String", ref.describe())
assertEquals(variableDeclarator, ((JavaParserFieldDeclaration) resolvedValueDeclaration).getVariableDeclarator())
assertEquals(variableDeclarator, ((JavaParserFieldDeclaration) resolvedValueDeclaration).getVariableDeclarator())
assertEquals(variableDeclarator, ((JavaParserFieldDeclaration) resolvedValueDeclaration).getVariableDeclarator())
assertEquals(variableDeclarator, ((JavaParserFieldDeclaration) resolvedValueDeclaration).getVariableDeclarator())
assertEquals("int", ref.describe())
assertTrue(type.isReferenceType())
assertEquals("java.lang.String", type.asReferenceType().getQualifiedName())
assertEquals("length", resolvedValueDeclaration.getName())
assertEquals(ResolvedPrimitiveType.INT, resolvedValueDeclaration.getType())
assertEquals("java.util.List<T>", type.describe())
assertEquals(1, type.asReferenceType().typeParametersValues().size())
assertEquals(true, type.asReferenceType().typeParametersValues().get(0).isTypeVariable())
assertEquals("T", type.asReferenceType().typeParametersValues().get(0).asTypeParameter().getName())
assertEquals("com.github.javaparser.utils.PositionUtils.sortByBeginPosition(java.util.List<T>).T", type.asReferenceType().typeParametersValues().get(0).asTypeParameter().getQualifiedName())
assertEquals(1, type.asReferenceType().typeParametersValues().get(0).asTypeParameter().getBounds().size())
assertEquals(true, bound.isExtends())
assertEquals("com.github.javaparser.ast.Node", bound.getType().describe())
assertTrue(methodUsage.isPresent())
assertFalse(methodUsage.isPresent())
assertTrue(methodUsage.isPresent())
assertTrue(methodUsage.isPresent())
assertFalse(methodUsage.isPresent())
assertTrue(methodUsage.isPresent())
assertTrue(methodUsage.isPresent())
assertFalse(methodUsage.isPresent())
assertTrue(methodUsage.isPresent())
assertFalse(methodUsage.isPresent())
assertTrue(methodUsage.isPresent())
assertTrue(methodUsage.isPresent())
assertTrue(methodUsage.isPresent())
assertEquals("main.Child.method", actual)
assertEquals("main.Parent.method", actual)
assertEquals("main.Child.method", actual)
assertEquals("main.Clazz.MyEnum", actual)
assertEquals("main.Main.NestedEnum.foo", actual)
assertEquals("main.Main.NestedEnum.bar", actual)
assertEquals("main.Main.NestedEnum.baz", actual)
fail("Excepted NotFoundException wrapped in a RuntimeException, but got no exception.")
fail("Excepted NotFoundException wrapped in a RuntimeException, but got no exception.")
assertTrue(solvedSymbol.isSolved())
assertEquals(symbolName, solvedSymbol.getCorrespondingDeclaration().asField().getName())
assertTrue(ref.isSolved())
assertEquals("java.util.Scanner", ref.getCorrespondingDeclaration().getType().asReferenceType().getQualifiedName())
assertEquals("int", ref.describe())
assertEquals("int", ref.describe())
assertEquals("java.lang.String", ref.describe())
assertEquals("java.lang.String", ref.describe())
assertFalse(solvedSymbol.isSolved())
assertFalse(res.isSolved())
assertTrue(res.isSolved())
assertTrue(res.getCorrespondingDeclaration().isField())
assertTrue(res.isSolved())
assertTrue(res.getCorrespondingDeclaration().isField())
assertFalse(res.isSolved())
assertTrue(typeSolverNewCode.solveType("com.github.javaparser.FooClass").isClass())
assertEquals("java.lang.Object.hashCode()", resolvedMethodDeclaration.getQualifiedSignature())
assertEquals("java.lang.Object.hashCode()", resolvedMethodDeclaration.getQualifiedSignature())
assertEquals("java.lang.String.hashCode()", resolvedMethodDeclaration.getQualifiedSignature())
assertEquals("java.lang.Object.hashCode()", resolvedMethodDeclaration.getQualifiedSignature())
assertEquals("java.io.PrintStream.println(java.lang.String)", resolvedMethodDeclaration.getQualifiedSignature())
assertEquals("MethodReferences.print(java.lang.String)", resolvedMethodDeclaration.getQualifiedSignature())
assertEquals("SuperClass.print(java.lang.Integer)", resolvedMethodDeclaration.getQualifiedSignature())
assertEquals("java.util.List.add(E)", resolvedMethodDeclaration.getQualifiedSignature())
assertEquals("SuperClass.print(java.lang.Boolean)", resolvedMethodDeclaration.getQualifiedSignature())
assertEquals("SuperClass.isEqualAsStrings(java.lang.Integer, java.lang.String)", resolvedMethodDeclaration.getQualifiedSignature())
assertEquals("SuperClass.getOneNumberAsString(java.lang.Integer, java.lang.Integer, java.lang.Integer)", resolvedMethodDeclaration.getQualifiedSignature())
assertEquals("MethodReferences.print(java.lang.String)", resolvedMethodDeclaration.getQualifiedSignature())
assertEquals("SuperClass.returnSameValue(java.lang.String)", resolvedMethodDeclaration.getQualifiedSignature())
assertEquals("SuperClass.isEqual(java.lang.Integer, java.lang.Integer)", resolvedMethodDeclaration.getQualifiedSignature())
assertEquals("SuperClass.print(java.lang.Integer)", resolvedMethodDeclaration.getQualifiedSignature())
assertEquals("SuperClass.returnSameValue(java.lang.Integer)", resolvedMethodDeclaration.getQualifiedSignature())
assertEquals("SuperClass.add(java.lang.Integer, java.lang.Integer)", resolvedMethodDeclaration.getQualifiedSignature())
assertEquals("SuperClass.isEqualAsStrings(java.lang.Integer, java.lang.String)", resolvedMethodDeclaration.getQualifiedSignature())
assertEquals("java.lang.String.valueOf(java.lang.Object)", resolvedMethodDeclaration.getQualifiedSignature())
assertEquals("java.util.stream.Stream.map(java.util.function.Function<? super T, ? extends R>)", callMethodDeclaration.getQualifiedSignature())
assertEquals("Supplier<SuperClass>", resolvedMethodDeclaration.getQualifiedSignature())
assertEquals("SuperClass", resolvedType.describe())
assertEquals("SuperClass", resolvedType.describe())
assertTrue(methodUsage.declaringType().getQualifiedName().equals("java.lang.String"))
assertTrue(methodUsage.declaringType().getQualifiedName().equals("java.lang.String"))
assertEquals("java.util.function.Function<? super java.lang.String, ? extends java.lang.String>", type.describe())
assertEquals("java.util.stream.Stream<java.lang.String>", type.describe())
assertEquals("java.util.stream.Stream<java.lang.String>", type1.describe())
assertEquals("java.util.stream.Stream<java.util.stream.IntStream>", type2.describe())
assertEquals("java.util.Optional<java.lang.Integer>", type1.describe())
assertEquals("void", type1.describe())
assertEquals("double", type1.describe())
assertEquals("java.util.stream.Collector<T, ? extends java.lang.Object, java.util.List<T>>", type.describe())
assertEquals("java.util.List<java.lang.String>", type.describe())
assertEquals("java.lang.String", type.describe())
assertEquals("java.lang.String", type.describe())
assertEquals("java.util.function.Consumer<? super java.lang.String>", type.describe())
assertEquals("B", resolvedType.asReferenceType().getQualifiedName())
assertEquals(true, symbolReference.isPresent())
assertEquals("s", symbolReference.get().getName())
assertEquals(1, type.asReferenceType().typeParametersValues().size())
assertEquals("java.lang.String", type.asReferenceType().typeParametersValues().get(0).describe())
assertEquals(true, symbolReference.isPresent())
assertEquals("g", symbolReference.get().getName())
assertEquals(1, type.asReferenceType().typeParametersValues().size())
assertEquals("me.tomassetti.symbolsolver.javaparser.Generics", type.asReferenceType().typeParametersValues().get(0).describe())
assertEquals(true, symbolReference.isPresent())
assertEquals("i", symbolReference.get().getName())
assertEquals(1, type.asReferenceType().typeParametersValues().size())
assertEquals("java.lang.Integer", type.asReferenceType().typeParametersValues().get(0).describe())
assertEquals(true, symbolReference.isPresent())
assertEquals("a", symbolReference.get().getName())
assertEquals(true, type.isTypeVariable())
assertEquals("A", type.describe())
assertEquals(true, symbolReference.isPresent())
assertEquals("as", symbolReference.get().getName())
assertEquals(false, type.isTypeVariable())
assertEquals("java.util.List<A>", type.describe())
assertEquals(1, type.asReferenceType().typeParametersValues().size())
assertEquals(true, typeParam.isTypeVariable())
assertEquals("A", typeParam.describe())
assertEquals(false, type.isTypeVariable())
assertEquals("java.lang.String", type.describe())
assertEquals(false, type.isTypeVariable())
assertEquals("java.util.List<A>", type.describe())
assertEquals(1, type.asReferenceType().typeParametersValues().size())
assertEquals(true, type.asReferenceType().typeParametersValues().get(0).isTypeVariable())
assertEquals("A", type.asReferenceType().typeParametersValues().get(0).describe())
assertEquals(false, type.isTypeVariable())
assertEquals("java.util.List<java.lang.String>", type.describe())
assertEquals(1, type.asReferenceType().typeParametersValues().size())
assertEquals(false, type.asReferenceType().typeParametersValues().get(0).isTypeVariable())
assertEquals("java.lang.String", type.asReferenceType().typeParametersValues().get(0).describe())
assertEquals("callee", methodUsage.getName())
assertEquals("get", methodUsage.getName())
assertEquals("java.lang.String", methodUsage.returnType().describe())
assertEquals("toString", methodUsage.getName())
assertEquals("java.lang.Object", methodUsage.declaringType().getQualifiedName())
assertEquals("bar", methodUsage.getName())
assertEquals("GenericsWildcard.Foo", methodUsage.declaringType().getQualifiedName())
assertEquals("foo", methodUsage.getName())
assertEquals("GenericMethodBoxing", methodUsage.declaringType().getName())
assertEquals("java.lang.Long", methodUsage.returnType().describe())
assertEquals(false, type.isTypeVariable())
assertEquals("Comment", type.describe())
assertEquals(false, type.isTypeVariable())
assertEquals("AnnotationExpr", type.describe())
assertEquals(2, allAncestors.size())
assertEquals(false, type.isTypeVariable())
assertEquals("void", type.describe())
assertEquals(false, type.isTypeVariable())
assertEquals("java.lang.Class<N>", type.describe())
assertEquals(true, type.isTypeVariable())
assertEquals("N", type.describe())
assertEquals(false, type.isTypeVariable())
assertEquals("TypeParamOnReturnType", type.describe())
assertEquals(true, type.isTypeVariable())
assertEquals("T", type.describe())
assertEquals(false, type.isTypeVariable())
assertEquals("java.lang.Boolean", type.describe())
assertEquals(false, type.isTypeVariable())
assertEquals("boolean", type.describe())
assertEquals(false, type.isTypeVariable())
assertEquals("boolean", type.describe())
assertEquals("foo", methodUsage.getName())
assertEquals(false, type.isTypeVariable())
assertEquals("boolean", type.describe())
assertTrue(ref.isSolved())
assertEquals("java.lang.String", ref.getCorrespondingDeclaration().getType().asReferenceType().getQualifiedName())
assertTrue(ref.isSolved())
assertEquals("java.lang.String", ref.getCorrespondingDeclaration().getType().asReferenceType().getQualifiedName())
assertTrue(ref.isSolved())
assertEquals("java.lang.String", ref.getCorrespondingDeclaration().getType().asReferenceType().getQualifiedName())
assertTrue(ref.isSolved())
assertEquals("java.util.List<Comment>", ref.getCorrespondingDeclaration().getType().describe())
assertEquals("add", methodUsage.getName())
assertTrue(ref.isSolved())
assertEquals("java.util.List<Comment>", ref.getCorrespondingDeclaration().getType().describe())
assertEquals("add", methodUsage.getName())
assertEquals("File", resolvedConstructorDeclaration.getName())
assertEquals("File(java.lang.String)", resolvedConstructorDeclaration.getSignature())
assertEquals("java.io.File.File(java.lang.String)", resolvedConstructorDeclaration.getQualifiedSignature())
assertEquals("delete", resolvedMethodDeclaration.getName())
assertEquals("delete()", resolvedMethodDeclaration.getSignature())
assertEquals("java.io.File.delete()", resolvedMethodDeclaration.getQualifiedSignature())
assertEquals(true, rawClassType.isRawType())
assertEquals(false, MethodResolutionLogic.isApplicable(mu, "isThrows", ImmutableList.of(classOfStringType), typeSolver))
assertEquals(true, MethodResolutionLogic.isApplicable(mu, "isThrows", ImmutableList.of(rawClassType), typeSolver))
assertEquals(true, MethodResolutionLogic.isApplicable(mu, "isThrows", ImmutableList.of(classOfRuntimeType), typeSolver))
assertEquals(expectedConstructor, actualConstructor)
assertEquals(expectedConstructor, actualConstructor)
assertEquals(expectedConstructor, actualConstructor)
assertEquals(expectedConstructor, actualConstructor)
assertTrue(ref.isSolved())
assertEquals(0, ref.getCorrespondingDeclaration().getNumberOfParams())
assertTrue(ref.isSolved())
assertEquals(0, ref.getCorrespondingDeclaration().getNumberOfParams())
assertTrue(ref.isSolved())
assertEquals(1, ref.getCorrespondingDeclaration().getNumberOfParams())
assertEquals("java.lang.String", ref.getCorrespondingDeclaration().getParam(0).getType().describe())
assertEquals(2, oceList.size())
assertTrue(ref.isSolved())
assertEquals("TypeA", ref.getCorrespondingDeclaration().declaringType().getQualifiedName())
assertTrue(ref.isSolved())
assertTrue(ref.getCorrespondingDeclaration().declaringType().getQualifiedName().startsWith("B.Anonymous-"))
assertEquals("ConstructorCallsEnum", resolvedConstructor.declaringType().getName())
assertEquals(1, resolvedConstructor.getNumberOfParams())
assertEquals("i", resolvedConstructor.getParam(0).getName())
assertEquals(ResolvedPrimitiveType.INT, resolvedConstructor.getParam(0).getType())
assertEquals(1, cd.getNumberOfParams())
assertEquals(ResolvedPrimitiveType.INT, cd.getParam(0).getType())
assertEquals("java.lang.AbstractStringBuilder", cd.declaringType().getQualifiedName())
assertEquals(1, cd.getNumberOfParams())
assertEquals("S", cd.getParam(0).describeType())
assertEquals("javaparser.GenericClass", cd.declaringType().getQualifiedName())
assertTrue(javaParserFacade.solve(bar).isSolved())
assertEquals(2, typeDeclaration.getTypeParameters().size())
assertTrue(typeDeclaration.getTypeParameters().get(0) instanceof JavaParserTypeParameter)
assertEquals("A", typeDeclaration.getTypeParameters().get(0).getName())
assertEquals(false, typeDeclaration.getTypeParameters().get(0).declaredOnMethod())
assertEquals(true, typeDeclaration.getTypeParameters().get(0).declaredOnType())
assertTrue(typeDeclaration.getTypeParameters().get(1) instanceof JavaParserTypeParameter)
assertEquals("B", typeDeclaration.getTypeParameters().get(1).getName())
assertEquals(false, typeDeclaration.getTypeParameters().get(1).declaredOnMethod())
assertEquals(true, typeDeclaration.getTypeParameters().get(1).declaredOnType())
assertTrue(ref.isPresent())
assertEquals("? super java.lang.String", ref.get().getType().describe())
assertTrue(ref.isPresent())
assertEquals("java.lang.String", ref.get().getType().describe())
assertTrue(ref.isPresent())
assertEquals("java.lang.String", ref.get().getType().describe())
assertTrue(ref.isPresent())
assertEquals("java.lang.String", ref.get().getType().describe())
assertTrue(ref.isPresent())
assertEquals("MethodCalls", ref.get().declaringType().getQualifiedName())
assertTrue(ref.isPresent())
assertEquals("MethodCalls", ref.get().declaringType().getQualifiedName())
assertEquals(Collections.singletonList("java.lang.Integer"), ref.get().typeParametersMap().getTypes().stream().map(ty -> ty.asReferenceType().describe()).collect(Collectors.toList()))
assertTrue(ref.isPresent())
assertEquals("MethodCalls", ref.get().declaringType().getQualifiedName())
assertEquals(Collections.singletonList("java.lang.String"), ref.get().typeParametersMap().getTypes().stream().map(ty -> ty.asReferenceType().describe()).collect(Collectors.toList()))
assertEquals(2, expressions.size())
assertTrue(ResolvedVoidType.class.isAssignableFrom(r.getClass()))
assertEquals(1, expressions.size())
assertTrue(ReferenceTypeImpl.class.isAssignableFrom(r.getClass()))
assertEquals("java.lang.String", resolvedType.describe())
assertEquals("java.util.List<java.lang.String>", resolvedType.describe())
assertFalse(context.getParent().isPresent())
assertEquals(false, a.isPresent())
assertEquals(false, b.isPresent())
assertEquals(false, c.isPresent())
assertEquals(false, d.isPresent())
assertEquals(true, ref.isSolved())
assertEquals("java.io.PrintStream", ref.getCorrespondingDeclaration().getType().asReferenceType().getQualifiedName())
assertEquals(true, ref.isSolved())
assertEquals("java.io.PrintStream", ref.getCorrespondingDeclaration().getType().asReferenceType().getQualifiedName())
assertEquals(true, ref.isSolved())
assertEquals("java.io.PrintStream", ref.getCorrespondingDeclaration().getType().asReferenceType().getQualifiedName())
assertEquals(true, ref.isPresent())
assertEquals("java.io.PrintStream", ref.get().getType().describe())
assertEquals(true, ref.isPresent())
assertEquals("java.io.PrintStream", ref.get().getType().describe())
assertEquals(true, ref.isPresent())
assertEquals("java.io.PrintStream", ref.get().getType().describe())
assertEquals(true, ref.isSolved())
assertEquals("com.foo.OtherClassInSamePackage", ref.getCorrespondingDeclaration().getQualifiedName())
assertEquals(true, ref.isSolved())
assertEquals("org.junit.Assert", ref.getCorrespondingDeclaration().getQualifiedName())
assertEquals(true, ref.isSolved())
assertEquals("org.junit.Assume", ref.getCorrespondingDeclaration().getQualifiedName())
assertEquals(true, ref.isSolved())
assertEquals("assertFalse", ref.getCorrespondingDeclaration().getName())
assertEquals(1, ref.getCorrespondingDeclaration().getNumberOfParams())
assertEquals("boolean", ref.getCorrespondingDeclaration().getParam(0).getType().describe())
assertEquals(true, ref.getCorrespondingDeclaration().getParam(0).getType().isPrimitive())
assertEquals(true, ref.isSolved())
assertEquals("assertEquals", ref.getCorrespondingDeclaration().getName())
assertEquals(2, ref.getCorrespondingDeclaration().getNumberOfParams())
assertEquals("java.lang.Object", ref.getCorrespondingDeclaration().getParam(0).getType().asReferenceType().getQualifiedName())
assertEquals("java.lang.Object", ref.getCorrespondingDeclaration().getParam(1).getType().asReferenceType().getQualifiedName())
fail("Excepted NotFoundException wrapped in a RuntimeException, but got no exception.", "A execução falhou por uma causa deliberada")
fail("Excepted NotFoundException wrapped in a RuntimeException, but got no exception.", "A execução falhou por uma causa deliberada")
assertTrue(context.getParent().isPresent())
assertEquals(new CompilationUnitContext(cu, typeSolver), context.getParent().get())
assertEquals(true, a.isPresent())
assertEquals("A", a.get().describe())
assertEquals(true, a.get().isTypeVariable())
assertEquals(true, b.isPresent())
assertEquals("B", b.get().describe())
assertEquals(true, b.get().isTypeVariable())
assertEquals(true, c.isPresent())
assertEquals("C", c.get().describe())
assertEquals(true, c.get().isTypeVariable())
assertEquals(false, d.isPresent())
assertEquals(true, ref.isSolved())
assertEquals("int", ref.getCorrespondingDeclaration().getType().describe())
assertEquals(true, ref.isSolved())
assertEquals("long", ref.getCorrespondingDeclaration().getType().describe())
assertEquals(true, ref.isSolved())
assertEquals("boolean", ref.getCorrespondingDeclaration().getType().describe())
assertEquals(true, ref.isSolved())
assertEquals("int", ref.getCorrespondingDeclaration().getType().describe())
assertEquals(true, ref.isSolved())
assertEquals("char", ref.getCorrespondingDeclaration().getType().describe())
assertEquals(false, ref.isSolved())
assertEquals(true, ref.isPresent())
assertEquals("int", ref.get().getType().describe())
assertEquals(true, ref.isPresent())
assertEquals("long", ref.get().getType().describe())
assertEquals(true, ref.isPresent())
assertEquals("boolean", ref.get().getType().describe())
assertEquals(true, ref.isPresent())
assertEquals("int", ref.get().getType().describe())
assertEquals(true, ref.isPresent())
assertEquals("char", ref.get().getType().describe())
assertEquals(false, ref.isPresent())
assertEquals(true, ref.isSolved())
assertEquals(false, ref.isSolved())
assertEquals(true, ref.isSolved())
assertEquals(true, ref.isSolved())
assertEquals(true, ref.isSolved())
assertEquals(true, ref.isSolved())
assertEquals(false, ref.isSolved())
assertEquals(true, ref.isSolved())
assertEquals(true, ref.isSolved())
assertEquals(true, ref.isSolved())
assertEquals(true, ref.isSolved())
assertEquals(true, ref.isSolved())
assertEquals("A", ref.getCorrespondingDeclaration().declaringType().getName())
assertEquals(0, ref.getCorrespondingDeclaration().getNumberOfParams())
assertEquals(true, ref.isSolved())
assertEquals("A", ref.getCorrespondingDeclaration().declaringType().getName())
assertEquals(0, ref.getCorrespondingDeclaration().getNumberOfParams())
assertEquals(true, ref.isSolved())
assertEquals("Super", ref.getCorrespondingDeclaration().declaringType().getName())
assertEquals(0, ref.getCorrespondingDeclaration().getNumberOfParams())
assertEquals(true, ref.isSolved())
assertEquals("A", ref.getCorrespondingDeclaration().declaringType().getName())
assertEquals(1, ref.getCorrespondingDeclaration().getNumberOfParams())
assertEquals(true, ref.isSolved())
assertEquals("A", ref.getCorrespondingDeclaration().declaringType().getName())
assertEquals(1, ref.getCorrespondingDeclaration().getNumberOfParams())
assertEquals(true, ref.isPresent())
assertEquals("A", ref.get().declaringType().getName())
assertEquals(0, ref.get().getNoParams())
assertEquals(true, ref.isPresent())
assertEquals("A", ref.get().declaringType().getName())
assertEquals(0, ref.get().getNoParams())
assertEquals(true, ref.isPresent())
assertEquals("Super", ref.get().declaringType().getName())
assertEquals(0, ref.get().getNoParams())
assertEquals(true, ref.isPresent())
assertEquals("A", ref.get().declaringType().getName())
assertEquals(1, ref.get().getNoParams())
assertEquals(true, ref.isPresent())
assertEquals("A", ref.get().declaringType().getName())
assertEquals(1, ref.get().getNoParams())
assertTrue(ref.isSolved())
assertEquals("int", ref.getCorrespondingDeclaration().getType().describe())
assertTrue(ref.isSolved())
assertEquals("long", ref.getCorrespondingDeclaration().getType().describe())
assertTrue(ref.isSolved())
assertEquals("MyEnum", ref.getCorrespondingDeclaration().getType().describe())
assertTrue(ref.isPresent())
assertEquals("int", ref.get().getType().describe())
assertTrue(ref.isPresent())
assertEquals("long", ref.get().getType().describe())
assertTrue(ref.isPresent())
assertEquals("MyEnum", ref.get().getType().describe())
assertEquals(true, ref.isSolved())
assertEquals(methodUsage.getName(), "getSelf")
assertEquals("int", rt.describe())
assertEquals("java.lang.String", rt2.describe())
assertEquals(ResolvedPrimitiveType.INT, resolvedType)
assertEquals(new ReferenceTypeImpl(new ReflectionClassDeclaration(String.class, typeSolver)), resolvedType)
assertEquals(Optional.of(new ProperLowerBound(inferenceVariable, integerType)), bound.isProperLowerBound())
assertEquals(Optional.of(new ProperLowerBound(inferenceVariable, doubleType)), bound.isProperLowerBound())
assertEquals(Optional.of(new ProperUpperBound(inferenceVariable, objectType)), bound.isProperUpperBound())
assertEquals(false, isProperType(listOfBeta))
assertEquals(Optional.of(new ProperUpperBound(alpha, iterableOfWildcard)), bound1.isProperUpperBound())
assertEquals(Optional.of(new ProperUpperBound(beta, objectType)), bound2.isProperUpperBound())
assertEquals(true, bound3.isADependency())
assertEquals(Optional.of(new Instantiation(inferenceVariable, stringType)), bound1.isAnInstantiation())
assertEquals(Optional.of(new Instantiation(inferenceVariable, stringType)), bound2.isAnInstantiation())
assertEquals(ConstraintFormula.ReductionResult.empty().withConstraint(new TypeCompatibleWithType(typeSolver, stringType, inferenceVariable)), res1)
assertEquals(ConstraintFormula.ReductionResult.empty().withConstraint(new TypeSubtypeOfType(typeSolver, stringType, inferenceVariable)), res1.getConstraint(0).reduce(BoundSet.empty()))
assertEquals(lub, exception)
assertEquals(expected, lub)
assertEquals(expected, lub)
assertEquals(expected, lub)
assertEquals(expected, lub)
assertEquals(expected, lub)
assertEquals(expected, lub)
assertEquals(expected, lub)
assertEquals(expected, lub)
assertEquals(expected, lub)
assertEquals(expected, lub)
assertEquals(expected.erasure(), erased)
assertTrue(!lub.asReferenceType().typeParametersValues().isEmpty())
assertEquals(expected, lub)
assertEquals(expected, lub)
assertEquals(expected.describe(), lub.describe())
assertEquals(expected.describe(), lub.describe())
assertEquals(expected.describe(), lub.describe())
assertEquals(expected, lub)
assertEquals("Parent<Other<? extends A>>", lub.describe())
assertEquals(clazz.getFieldByName("field_i1").get().resolve().getType().describe(), "I1")
assertEquals(clazz.getFieldByName("field_i2").get().resolve().getType().describe(), "I2.I2_1")
assertEquals(clazz.getFieldByName("field_i3").get().resolve().getType().describe(), "I3.I3_1.I3_1_1")
assertEquals(clazz.getFieldByName("field_c1").get().resolve().getType().describe(), "C1")
assertEquals(clazz.getFieldByName("field_c2").get().resolve().getType().describe(), "C2.C2_1")
assertEquals(clazz.getFieldByName("field_c3").get().resolve().getType().describe(), "C3.C3_1.C3_1_1")
assertEquals("main.A", actual)
assertNotEquals("another.A", actual)
assertTrue(rt.isEnumConstant())
assertTrue(rt.isJavaLangObject())
assertFalse(rt.isUnboxable())
assertTrue(rt.asReferenceType().isUnboxable())
assertFalse(rt.isUnboxableTo(ResolvedPrimitiveType.INT))
assertTrue(rt.isUnboxableTo(ResolvedPrimitiveType.INT))
assertFalse(rt.toUnboxedType().isPresent())
assertTrue(rt.toUnboxedType().isPresent())
assertTrue(fae.isPresent())
assertEquals("foo.bar.AnInterface.ListChangeType", fae.get().resolve().getType().describe())
assertEquals("ADDITION", fae.get().resolve().getName())
assertTrue(fae.isPresent())
assertEquals("foo.bar.AnInterface.ListChangeType", fae.get().resolve().getType().describe())
assertEquals("ADDITION", fae.get().resolve().getName())
assertTrue(fae.isPresent())
assertEquals("foo.bar.AnInterface.ListChangeType", fae.get().resolve().getType().describe())
assertEquals("ADDITION", fae.get().resolve().getName())
assertTrue(fae.isPresent())
assertEquals("foo.bar.AnInterface.ListChangeType", fae.get().resolve().getType().describe())
assertEquals("ADDITION", fae.get().resolve().getName())
fail("Excepted NotFoundException wrapped in a RuntimeException, but got no exception.")
assertTrue(solvedSymbol.isSolved())
assertEquals(symbolName, solvedSymbol.getCorrespondingDeclaration().asField().getName())
assertEquals(1, bExprs.size())
assertEquals(DOUBLE, JavaParserFacade.get(ts).getType(bExprs.get(0)))
assertEquals(1, bExprs.size())
assertEquals(DOUBLE, JavaParserFacade.get(ts).getType(bExprs.get(0)))
assertEquals(1, bExprs.size())
assertEquals(DOUBLE, JavaParserFacade.get(ts).getType(bExprs.get(0)))
assertEquals(1, bExprs.size())
assertEquals(DOUBLE, JavaParserFacade.get(ts).getType(bExprs.get(0)))
assertEquals(1, bExprs.size())
assertEquals(DOUBLE, JavaParserFacade.get(ts).getType(bExprs.get(0)))
assertEquals(1, bExprs.size())
assertEquals(DOUBLE, JavaParserFacade.get(ts).getType(bExprs.get(0)))
assertEquals(1, bExprs.size())
assertEquals(FLOAT, JavaParserFacade.get(ts).getType(bExprs.get(0)))
assertEquals(1, bExprs.size())
assertEquals(FLOAT, JavaParserFacade.get(ts).getType(bExprs.get(0)))
assertEquals(1, bExprs.size())
assertEquals(FLOAT, JavaParserFacade.get(ts).getType(bExprs.get(0)))
assertEquals(1, bExprs.size())
assertEquals(FLOAT, JavaParserFacade.get(ts).getType(bExprs.get(0)))
assertEquals(1, bExprs.size())
assertEquals(FLOAT, JavaParserFacade.get(ts).getType(bExprs.get(0)))
assertEquals(1, bExprs.size())
assertEquals(FLOAT, JavaParserFacade.get(ts).getType(bExprs.get(0)))
assertEquals(1, bExprs.size())
assertEquals(DOUBLE, JavaParserFacade.get(ts).getType(bExprs.get(0)))
assertEquals(1, bExprs.size())
assertEquals(DOUBLE, JavaParserFacade.get(ts).getType(bExprs.get(0)))
assertEquals(1, bExprs.size())
assertEquals(INT, JavaParserFacade.get(ts).getType(bExprs.get(0)))
assertEquals(1, bExprs.size())
assertEquals(INT, JavaParserFacade.get(ts).getType(bExprs.get(0)))
assertEquals(1, bExprs.size())
assertEquals(stringType, JavaParserFacade.get(ts).getType(bExprs.get(0)))
assertEquals(1, bExprs.size())
assertEquals(stringType, JavaParserFacade.get(ts).getType(bExprs.get(0)))
assertEquals(1, bExprs.size())
assertEquals(stringType, JavaParserFacade.get(ts).getType(bExprs.get(0)))
assertEquals(1, bExprs.size())
assertEquals(stringType, JavaParserFacade.get(ts).getType(bExprs.get(0)))
assertEquals(1, bExprs.size())
assertEquals(stringType, JavaParserFacade.get(ts).getType(bExprs.get(0)))
assertEquals(1, bExprs.size())
assertEquals(stringType, JavaParserFacade.get(ts).getType(bExprs.get(0)))
fail("Excepted NotFoundException wrapped in a RuntimeException, but got no exception.", "A execução falhou por uma causa deliberada")
assertTrue(symbolReference.isSolved())
assertEquals("i", symbolReference.getCorrespondingDeclaration().getName())
assertTrue(symbolReference.getCorrespondingDeclaration().isField())
assertTrue(symbolReference.isSolved())
assertEquals("i", symbolReference.getCorrespondingDeclaration().getName())
assertTrue(symbolReference.getCorrespondingDeclaration().isField())
assertTrue(symbolReference.isSolved())
assertEquals("foo", symbolReference.getCorrespondingDeclaration().getName())
assertTrue(symbolReference.getCorrespondingDeclaration().isParameter())
assertTrue(ref.isSolved())
assertEquals("CompilationUnit", ref.getCorrespondingDeclaration().getName())
assertEquals("com.github.javaparser.ast.CompilationUnit", ref.getCorrespondingDeclaration().getQualifiedName())
assertTrue(ref.isSolved())
assertEquals("CompilationUnit", ref.getCorrespondingDeclaration().getName())
assertEquals("com.github.javaparser.ast.CompilationUnit", ref.getCorrespondingDeclaration().getQualifiedName())
assertTrue(ref.isSolved())
assertEquals("CompilationUnit", ref.getCorrespondingDeclaration().getName())
assertEquals("my.packagez.CompilationUnit", ref.getCorrespondingDeclaration().getQualifiedName())
assertTrue(ref.isSolved())
assertEquals("String", ref.getCorrespondingDeclaration().getName())
assertEquals("java.lang.String", ref.getCorrespondingDeclaration().getQualifiedName())
assertEquals("getTypes", ref.getName())
assertEquals("com.github.javaparser.ast.CompilationUnit", ref.declaringType().getQualifiedName())
assertEquals("stream", ref.getName())
assertEquals("java.util.Collection", ref.declaringType().getQualifiedName())
assertEquals("trim", ref.getName())
assertEquals("java.lang.String", ref.declaringType().getQualifiedName())
assertEquals("java.util.stream.Stream<java.lang.String>", streamType.describe())
assertEquals("java.util.stream.Stream<java.lang.String>", ref.describe())
assertEquals(1, ref.asReferenceType().typeParametersValues().size())
assertEquals("java.lang.String", ref.asReferenceType().typeParametersValues().get(0).describe())
assertEquals("? super java.lang.String", ref.describe())
assertEquals("isEmpty", ref.getName())
assertEquals("java.lang.String", ref.declaringType().getQualifiedName())
assertEquals("getTypes", methodUsage.getName())
assertEquals("java.util.List<com.github.javaparser.ast.body.TypeDeclaration>", methodUsage.returnType().describe())
assertEquals(1, methodUsage.returnType().asReferenceType().typeParametersValues().size())
assertEquals("com.github.javaparser.ast.body.TypeDeclaration", methodUsage.returnType().asReferenceType().typeParametersValues().get(0).describe())
assertEquals("genericMethodWithDoubleTypedReturnType", methodUsage.getName())
assertEquals("java.util.Map<T, V>", methodUsage.returnType().describe())
assertEquals("genericMethodWithNestedReturnType", methodUsage.getName())
assertEquals("java.util.List<java.util.List<T>>", methodUsage.returnType().describe())
assertEquals("get", methodUsage.getName())
assertEquals("java.util.List<java.util.List<java.lang.String>>", methodUsage.returnType().describe())
assertEquals("copy", methodUsage.getName())
assertEquals("javaparser.GenericClass<java.util.List<java.lang.String>>", methodUsage.returnType().describe())
assertEquals("complexGenerics", methodUsage.getName())
assertEquals("T", methodUsage.returnType().describe())
assertEquals("asList", methodUsage.getName())
assertEquals("java.util.List<javaparser.GenericClass.Bar.NestedBar>", methodUsage.getParamType(0).describe())
assertEquals("java.util.List<com.github.javaparser.ast.body.TypeDeclaration>", filterUsage.returnType().describe())
assertEquals(1, filterUsage.returnType().asReferenceType().typeParametersValues().size())
assertEquals("com.github.javaparser.ast.body.TypeDeclaration", filterUsage.returnType().asReferenceType().typeParametersValues().get(0).describe())
assertEquals("java.util.stream.Stream<com.github.javaparser.ast.body.TypeDeclaration>", filterUsage.returnType().describe())
assertEquals("java.util.stream.Stream<com.github.javaparser.ast.body.TypeDeclaration>", filterUsage.returnType().describe())
assertEquals("java.util.function.Predicate<? super com.github.javaparser.ast.body.TypeDeclaration>", typeOfLambdaExpr.describe())
assertEquals("? super com.github.javaparser.ast.body.TypeDeclaration", typeOfT.describe())
assertEquals("getName", methodUsage.getName())
assertEquals("com.github.javaparser.ast.body.TypeDeclaration", methodUsage.declaringType().getQualifiedName())
assertEquals("overloaded", ref.getName())
assertEquals(1, ref.getNoParams())
assertEquals("java.lang.String", ref.getParamTypes().get(0).describe())
assertEquals("overloaded", ref.getName())
assertEquals(1, ref.getNoParams())
assertEquals("java.lang.String", ref.getParamTypes().get(0).describe())
assertEquals("foo", ref.getName())
assertEquals(1, ref.getNoParams())
assertEquals("java.lang.String[]", ref.getParamType(0).describe())
assertEquals("double", type.describe())
assertEquals("overloaded", ref.getName())
assertEquals(1, ref.getNoParams())
assertEquals("java.lang.Object", ref.getParamTypes().get(0).describe())
assertTrue(parseResult.isSuccessful())
assertEquals(1, context1.localVariablesExposedToChild(blockStmt.getStatement(1)).size())
assertTrue(context.localVariableDeclarationInScope(name).isPresent())
assertEquals(2, context1.localVariablesExposedToChild(blockStmt.getStatement(2)).size())
assertEquals(3, context1.localVariablesExposedToChild(blockStmt.getStatement(4)).size())
assertTrue(context.localVariableDeclarationInScope(name).isPresent())
assertEquals("final String s", instanceOfExpr.getPattern().get().toString())
assertTrue(left_s.isSolved())
assertTrue(right_s.isSolved())
assertTrue(right_s2.isSolved())
assertEquals(2, enclosedExprs.size())
assertEquals(2, nameExprs.size())
assertEquals("s", nameExpr.getNameAsString())
assertTrue(correspondingDeclaration.isPattern())
assertEquals(2, enclosedExprs.size())
assertEquals(2, nameExprs.size())
assertEquals("s", nameExpr.getNameAsString())
assertEquals(2, enclosedExprs.size())
assertEquals(2, nameExprs.size())
assertEquals("s", nameExpr.getNameAsString())
assertEquals(1, methodCallExprs.size())
assertTrue(s.isSolved())
assertTrue(s.getCorrespondingDeclaration().isPattern())
assertEquals(1, methodCallExprs.size())
assertTrue(s.isSolved())
assertTrue(s.getCorrespondingDeclaration().isPattern())
assertEquals(1, methodCallExprs.size())
assertEquals(1, methodCallExprs.size())
assertEquals(2, methodCallExprs.size())
assertTrue(s_list.isSolved())
assertTrue(s_string.isSolved())
assertTrue(s_string.getCorrespondingDeclaration().isPattern())
assertEquals(4, methodCallExprs.size())
assertTrue(s_list.isSolved())
assertTrue(s_string.isSolved())
assertTrue(s_string.getCorrespondingDeclaration().isPattern())
assertTrue(s_string2.isSolved())
assertTrue(s_string2.getCorrespondingDeclaration().isPattern())
assertTrue(s_string3.isSolved())
assertTrue(s_string3.getCorrespondingDeclaration().isPattern())
assertEquals(4, methodCallExprs.size())
assertTrue(s_list.isSolved())
assertTrue(s_string.isSolved())
assertTrue(s_string2.isSolved())
assertTrue(s_string2.getCorrespondingDeclaration().isPattern())
assertTrue(s_string3.isSolved())
assertTrue(s_string3.getCorrespondingDeclaration().isPattern())
assertEquals("java.lang.Float", types.get("i1").describe())
assertEquals("java.lang.String", types.get("i2").describe())
assertEquals(expectedLines.length, outputLines.length)
assertEquals(ResolvedPrimitiveType.BOOLEAN, ResolvedPrimitiveType.byName("boolean"))
assertEquals(ResolvedPrimitiveType.CHAR, ResolvedPrimitiveType.byName("char"))
assertEquals(ResolvedPrimitiveType.BYTE, ResolvedPrimitiveType.byName("byte"))
assertEquals(ResolvedPrimitiveType.SHORT, ResolvedPrimitiveType.byName("short"))
assertEquals(ResolvedPrimitiveType.INT, ResolvedPrimitiveType.byName("int"))
assertEquals(ResolvedPrimitiveType.LONG, ResolvedPrimitiveType.byName("long"))
assertEquals(ResolvedPrimitiveType.FLOAT, ResolvedPrimitiveType.byName("float"))
assertEquals(ResolvedPrimitiveType.DOUBLE, ResolvedPrimitiveType.byName("double"))
assertTrue(ResolvedPrimitiveType.DOUBLE.bnp(ResolvedPrimitiveType.DOUBLE).equals(ResolvedPrimitiveType.DOUBLE))
assertTrue(ResolvedPrimitiveType.FLOAT.bnp(ResolvedPrimitiveType.FLOAT).equals(ResolvedPrimitiveType.FLOAT))
assertTrue(ResolvedPrimitiveType.LONG.bnp(ResolvedPrimitiveType.LONG).equals(ResolvedPrimitiveType.LONG))
assertTrue(ResolvedPrimitiveType.INT.bnp(ResolvedPrimitiveType.INT).equals(ResolvedPrimitiveType.INT))
assertTrue(ResolvedPrimitiveType.BYTE.bnp(ResolvedPrimitiveType.BYTE).equals(ResolvedPrimitiveType.INT))
assertTrue(ResolvedPrimitiveType.SHORT.bnp(ResolvedPrimitiveType.SHORT).equals(ResolvedPrimitiveType.INT))
assertTrue(ResolvedPrimitiveType.CHAR.bnp(ResolvedPrimitiveType.CHAR).equals(ResolvedPrimitiveType.INT))
assertTrue(ResolvedPrimitiveType.unp(rByte).equals(ResolvedPrimitiveType.INT))
assertTrue(ResolvedPrimitiveType.unp(rShort).equals(ResolvedPrimitiveType.INT))
assertTrue(ResolvedPrimitiveType.unp(rChar).equals(ResolvedPrimitiveType.INT))
assertTrue(ResolvedPrimitiveType.unp(rInteger).equals(ResolvedPrimitiveType.INT))
assertTrue(ResolvedPrimitiveType.unp(rLong).equals(ResolvedPrimitiveType.LONG))
assertTrue(ResolvedPrimitiveType.unp(rFloat).equals(ResolvedPrimitiveType.FLOAT))
assertTrue(ResolvedPrimitiveType.unp(rDouble).equals(ResolvedPrimitiveType.DOUBLE))
assertTrue(ResolvedPrimitiveType.unp(ResolvedPrimitiveType.BYTE).equals(ResolvedPrimitiveType.INT))
assertTrue(ResolvedPrimitiveType.unp(ResolvedPrimitiveType.SHORT).equals(ResolvedPrimitiveType.INT))
assertTrue(ResolvedPrimitiveType.unp(ResolvedPrimitiveType.CHAR).equals(ResolvedPrimitiveType.INT))
assertTrue(ResolvedPrimitiveType.unp(ResolvedPrimitiveType.BOOLEAN).equals(ResolvedPrimitiveType.BOOLEAN))
assertTrue(ResolvedPrimitiveType.unp(rString).equals(rString))
assertTrue(ResolvedPrimitiveType.isBoxType(rByte))
assertTrue(ResolvedPrimitiveType.isBoxType(rShort))
assertTrue(ResolvedPrimitiveType.isBoxType(rChar))
assertTrue(ResolvedPrimitiveType.isBoxType(rInteger))
assertTrue(ResolvedPrimitiveType.isBoxType(rLong))
assertTrue(ResolvedPrimitiveType.isBoxType(rFloat))
assertTrue(ResolvedPrimitiveType.isBoxType(rDouble))
assertFalse(solvedSymbol.isSolved())
assertFalse(left_s2.isSolved())
assertFalse(s.isSolved())
assertFalse(s.isSolved())
assertFalse(s_list.getCorrespondingDeclaration().isPattern())
assertFalse(s_list.getCorrespondingDeclaration().isPattern())
assertFalse(s_list.getCorrespondingDeclaration().isPattern())
assertFalse(s_string.getCorrespondingDeclaration().isPattern())
assertFalse(ResolvedPrimitiveType.isBoxType(rString))
assertTrue(array(ResolvedPrimitiveType.DOUBLE).isAssignableBy(array(ResolvedPrimitiveType.DOUBLE)))
assertTrue(array(ResolvedPrimitiveType.FLOAT).isAssignableBy(array(ResolvedPrimitiveType.FLOAT)))
assertTrue(array(ResolvedPrimitiveType.LONG).isAssignableBy(array(ResolvedPrimitiveType.LONG)))
assertTrue(array(ResolvedPrimitiveType.INT).isAssignableBy(array(ResolvedPrimitiveType.INT)))
assertTrue(array(ResolvedPrimitiveType.BYTE).isAssignableBy(array(ResolvedPrimitiveType.BYTE)))
assertTrue(array(ResolvedPrimitiveType.SHORT).isAssignableBy(array(ResolvedPrimitiveType.SHORT)))
assertTrue(array(ResolvedPrimitiveType.CHAR).isAssignableBy(array(ResolvedPrimitiveType.CHAR)))
assertFalse(isAssignableBy(array(ResolvedPrimitiveType.DOUBLE), arrays(ResolvedPrimitiveType.FLOAT, ResolvedPrimitiveType.LONG, ResolvedPrimitiveType.INT, ResolvedPrimitiveType.BYTE, ResolvedPrimitiveType.SHORT, ResolvedPrimitiveType.CHAR)))
assertFalse(isAssignableBy(array(ResolvedPrimitiveType.FLOAT), arrays(ResolvedPrimitiveType.DOUBLE, ResolvedPrimitiveType.LONG, ResolvedPrimitiveType.INT, ResolvedPrimitiveType.BYTE, ResolvedPrimitiveType.SHORT, ResolvedPrimitiveType.CHAR)))
assertFalse(isAssignableBy(array(ResolvedPrimitiveType.LONG), arrays(ResolvedPrimitiveType.DOUBLE, ResolvedPrimitiveType.FLOAT, ResolvedPrimitiveType.INT, ResolvedPrimitiveType.BYTE, ResolvedPrimitiveType.SHORT, ResolvedPrimitiveType.CHAR)))
assertFalse(isAssignableBy(array(ResolvedPrimitiveType.INT), arrays(ResolvedPrimitiveType.DOUBLE, ResolvedPrimitiveType.FLOAT, ResolvedPrimitiveType.LONG, ResolvedPrimitiveType.BYTE, ResolvedPrimitiveType.SHORT, ResolvedPrimitiveType.CHAR)))
assertFalse(isAssignableBy(array(ResolvedPrimitiveType.BYTE), arrays(ResolvedPrimitiveType.DOUBLE, ResolvedPrimitiveType.FLOAT, ResolvedPrimitiveType.LONG, ResolvedPrimitiveType.INT, ResolvedPrimitiveType.SHORT, ResolvedPrimitiveType.CHAR)))
assertFalse(isAssignableBy(array(ResolvedPrimitiveType.SHORT), arrays(ResolvedPrimitiveType.DOUBLE, ResolvedPrimitiveType.FLOAT, ResolvedPrimitiveType.LONG, ResolvedPrimitiveType.INT, ResolvedPrimitiveType.BYTE, ResolvedPrimitiveType.CHAR)))
assertFalse(isAssignableBy(array(ResolvedPrimitiveType.CHAR), arrays(ResolvedPrimitiveType.DOUBLE, ResolvedPrimitiveType.FLOAT, ResolvedPrimitiveType.LONG, ResolvedPrimitiveType.INT, ResolvedPrimitiveType.BYTE, ResolvedPrimitiveType.SHORT)))
assertFalse(array(ResolvedPrimitiveType.DOUBLE).isAssignableBy(array(rDouble)))
assertFalse(array(ResolvedPrimitiveType.FLOAT).isAssignableBy(array(rFloat)))
assertFalse(array(ResolvedPrimitiveType.LONG).isAssignableBy(array(rLong)))
assertFalse(array(ResolvedPrimitiveType.INT).isAssignableBy(array(rInteger)))
assertFalse(array(ResolvedPrimitiveType.BYTE).isAssignableBy(array(rByte)))
assertFalse(array(ResolvedPrimitiveType.SHORT).isAssignableBy(array(rShort)))
assertFalse(array(ResolvedPrimitiveType.CHAR).isAssignableBy(array(rChar)))
assertTrue(array(ResolvedPrimitiveType.DOUBLE).isAssignableBy(NullType.INSTANCE))
assertTrue(array(ResolvedPrimitiveType.FLOAT).isAssignableBy(NullType.INSTANCE))
assertTrue(array(ResolvedPrimitiveType.LONG).isAssignableBy(NullType.INSTANCE))
assertTrue(array(ResolvedPrimitiveType.INT).isAssignableBy(NullType.INSTANCE))
assertTrue(array(ResolvedPrimitiveType.BYTE).isAssignableBy(NullType.INSTANCE))
assertTrue(array(ResolvedPrimitiveType.SHORT).isAssignableBy(NullType.INSTANCE))
assertTrue(array(ResolvedPrimitiveType.CHAR).isAssignableBy(NullType.INSTANCE))
assertTrue(rObject.isAssignableBy(array(ResolvedPrimitiveType.DOUBLE)))
assertTrue(rObject.isAssignableBy(array(ResolvedPrimitiveType.FLOAT)))
assertTrue(rObject.isAssignableBy(array(ResolvedPrimitiveType.LONG)))
assertTrue(rObject.isAssignableBy(array(ResolvedPrimitiveType.INT)))
assertTrue(rObject.isAssignableBy(array(ResolvedPrimitiveType.BYTE)))
assertTrue(rObject.isAssignableBy(array(ResolvedPrimitiveType.SHORT)))
assertTrue(rObject.isAssignableBy(array(ResolvedPrimitiveType.CHAR)))
assertTrue(rObject.isAssignableBy(array(rString)))
assertTrue(rCloneable.isAssignableBy(array(ResolvedPrimitiveType.DOUBLE)))
assertTrue(rCloneable.isAssignableBy(array(ResolvedPrimitiveType.FLOAT)))
assertTrue(rCloneable.isAssignableBy(array(ResolvedPrimitiveType.LONG)))
assertTrue(rCloneable.isAssignableBy(array(ResolvedPrimitiveType.INT)))
assertTrue(rCloneable.isAssignableBy(array(ResolvedPrimitiveType.BYTE)))
assertTrue(rCloneable.isAssignableBy(array(ResolvedPrimitiveType.SHORT)))
assertTrue(rCloneable.isAssignableBy(array(ResolvedPrimitiveType.CHAR)))
assertTrue(rCloneable.isAssignableBy(array(rString)))
assertTrue(rSerializable.isAssignableBy(array(ResolvedPrimitiveType.DOUBLE)))
assertTrue(rSerializable.isAssignableBy(array(ResolvedPrimitiveType.FLOAT)))
assertTrue(rSerializable.isAssignableBy(array(ResolvedPrimitiveType.LONG)))
assertTrue(rSerializable.isAssignableBy(array(ResolvedPrimitiveType.INT)))
assertTrue(rSerializable.isAssignableBy(array(ResolvedPrimitiveType.BYTE)))
assertTrue(rSerializable.isAssignableBy(array(ResolvedPrimitiveType.SHORT)))
assertTrue(rSerializable.isAssignableBy(array(ResolvedPrimitiveType.CHAR)))
assertTrue(rSerializable.isAssignableBy(array(rString)))
assertTrue(array(rCharSequence).isAssignableBy(array(rString)))
assertFalse(array(rString).isAssignableBy(array(rCharSequence)))
assertFalse(array(ResolvedPrimitiveType.LONG).isAssignableBy(rLong))
assertTrue(ref.isSolved())
assertEquals("SwitchOnEnum.MyEnum", ref.getCorrespondingDeclaration().getType().asReferenceType().getQualifiedName())
assertEquals("MyClass.Primitive", ref.describe())
assertEquals("valueOf", rd.getName())
assertEquals("ClassTest.SecurityPolicyScopedTemplatesKeys", rd.getReturnType().describe())
assertEquals(1, rd.getNumberOfParams())
assertEquals("java.lang.String", rd.getParam(0).describeType())
assertEquals(expectedLines.length, outputLines.length)
assertEquals("int", usageDescribe(n, "a"))
assertEquals("java.lang.Integer", usageDescribe(n, "b"))
assertEquals("java.lang.Class<java.lang.Integer>", usageDescribe(n, "c"))
assertEquals("java.lang.Class<? super java.lang.Integer>", usageDescribe(n, "d"))
assertEquals("java.lang.Class<? extends java.lang.Integer>", usageDescribe(n, "e"))
assertEquals("java.lang.Class<? extends java.lang.Class<? super java.lang.Class<? extends java.lang.Integer>>>", usageDescribe(n, "f"))
assertEquals("java.lang.Class<? super java.lang.Class<? extends java.lang.Class<? super java.lang.Integer>>>", usageDescribe(n, "g"))
assertTrue(methodUsage.getQualifiedSignature().startsWith("AnonymousClassDeclarations"))
assertTrue(methodUsage.getQualifiedSignature().contains("Anonymous-"))
assertTrue(methodUsage.getQualifiedSignature().endsWith("callAnnonClassInnerMethod()"))
assertTrue(result.getResult().isPresent())
assertTrue(annotation.isPresent())
assertEquals(1, fields.size())
assertEquals("a", fields.get(0).getName())
assertTrue(result.getResult().isPresent())
assertTrue(annotation.isPresent())
assertEquals(2, fields.size())
assertEquals("a", fields.get(0).getName())
assertEquals("b", fields.get(1).getName())
assertTrue(result.getResult().isPresent())
assertTrue(nameExpr.isPresent())
assertDoesNotThrow(nameExpr.get()::resolve)
assertTrue(result.getResult().isPresent())
assertTrue(annotation.isPresent())
assertEquals(4, annotation.get().resolve().internalTypes().size())
assertTrue(result.getResult().isPresent())
assertTrue(annotation.isPresent())
assertTrue(result.getResult().isPresent())
assertTrue(annotation.isPresent())
assertTrue(annotation.get().resolve().isInheritable())
assertTrue("int x = 0;".equals(decl))
assertTrue(compilationUnit.isClass())
assertTrue(compilationUnit.isType())
assertEquals(compilationUnit, compilationUnit.asType())
assertEquals(compilationUnit, compilationUnit.asClass())
assertEquals("com.github.javaparser.ast", compilationUnit.getPackageName())
assertEquals("CompilationUnit", compilationUnit.getClassName())
assertEquals("com.github.javaparser.ast.CompilationUnit", compilationUnit.getQualifiedName())
assertEquals("com.github.javaparser.ast.Node", compilationUnit.getSuperClass().get().getQualifiedName())
assertEquals("com.github.javaparser.ast.body.BodyDeclaration", compilationUnit.getSuperClass().get().getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", compilationUnit.getSuperClass().get().typeParametersMap().getValueBySignature("com.github.javaparser.ast.body.BodyDeclaration.T").get().asReferenceType().getQualifiedName())
assertEquals(ImmutableSet.of("com.github.javaparser.ast.Node", "java.lang.Object"), cu.getAllSuperClasses().stream().map(i -> i.getQualifiedName()).collect(Collectors.toSet()))
assertEquals(3, constructorDeclaration.getAllSuperClasses().size())
assertTrue(constructorDeclaration.getAllSuperClasses().stream().anyMatch(s -> s.getQualifiedName().equals("com.github.javaparser.ast.body.BodyDeclaration")))
assertTrue(constructorDeclaration.getAllSuperClasses().stream().anyMatch(s -> s.getQualifiedName().equals("com.github.javaparser.ast.Node")))
assertTrue(constructorDeclaration.getAllSuperClasses().stream().anyMatch(s -> s.getQualifiedName().equals("java.lang.Object")))
assertEquals("com.github.javaparser.ast.body.BodyDeclaration", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.body.BodyDeclaration.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.Node", ancestor.getQualifiedName())
assertEquals("java.lang.Object", ancestor.getQualifiedName())
assertEquals(ImmutableSet.of(), compilationUnit.getInterfaces().stream().map(i -> i.getQualifiedName()).collect(Collectors.toSet()))
assertEquals(ImmutableSet.of("com.github.javaparser.ast.DocumentableNode"), coid.getInterfaces().stream().map(i -> i.getQualifiedName()).collect(Collectors.toSet()))
assertEquals(7, constructorDeclaration.getInterfaces().size())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithJavaDoc", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithJavaDoc.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithDeclaration", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithName", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithName.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithModifiers", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithModifiers.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithParameters", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithParameters.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithThrowable", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithThrowable.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithBlockStmt", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithBlockStmt.T").get().asReferenceType().getQualifiedName())
assertEquals(ImmutableSet.of("java.lang.Cloneable"), compilationUnit.getAllInterfaces().stream().map(i -> i.getQualifiedName()).collect(Collectors.toSet()))
assertEquals(ImmutableSet.of("java.lang.Cloneable", "com.github.javaparser.ast.NamedNode", "com.github.javaparser.ast.body.AnnotableNode", "com.github.javaparser.ast.DocumentableNode"), coid.getAllInterfaces().stream().map(i -> i.getQualifiedName()).collect(Collectors.toSet()))
assertEquals(9, constructorDeclaration.getAllInterfaces().size())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithJavaDoc", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithJavaDoc.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithDeclaration", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithName", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithName.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithModifiers", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithModifiers.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithParameters", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithParameters.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithThrowable", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithThrowable.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithBlockStmt", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithBlockStmt.T").get().asReferenceType().getQualifiedName())
assertEquals("java.lang.Cloneable", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithAnnotations", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithAnnotations.T").get().asReferenceType().getQualifiedName())
assertEquals(8, ancestors.size())
assertEquals("com.github.javaparser.ast.body.BodyDeclaration", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.body.BodyDeclaration.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithJavaDoc", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithJavaDoc.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithDeclaration", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithName", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithName.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithModifiers", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithModifiers.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithParameters", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithParameters.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithThrowable", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithThrowable.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithBlockStmt", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithBlockStmt.T").get().asReferenceType().getQualifiedName())
assertEquals(ImmutableSet.of("java.lang.Cloneable", "com.github.javaparser.ast.Node", "java.lang.Object"), cu.getAllAncestors().stream().map(i -> i.getQualifiedName()).collect(Collectors.toSet()))
assertEquals("java.lang.Number", ancestors.get(0).getQualifiedName())
assertEquals("java.lang.Object", ancestors.get(1).getQualifiedName())
assertEquals("java.io.Serializable", ancestors.get(2).getQualifiedName())
assertEquals("java.lang.Comparable", ancestors.get(3).getQualifiedName())
assertEquals(12, ancestors.size())
assertEquals("com.github.javaparser.ast.body.BodyDeclaration", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.body.BodyDeclaration.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.Node", ancestor.getQualifiedName())
assertEquals("java.lang.Object", ancestor.getQualifiedName())
assertEquals("java.lang.Cloneable", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithAnnotations", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithAnnotations.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithJavaDoc", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithJavaDoc.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithDeclaration", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithName", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithName.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithModifiers", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithModifiers.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithParameters", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithParameters.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithThrowable", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithThrowable.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithBlockStmt", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithBlockStmt.T").get().asReferenceType().getQualifiedName())
assertEquals("modifiers", fieldDeclaration.getName())
assertEquals("java.util.EnumSet", fieldDeclaration.getType().asReferenceType().getQualifiedName())
assertEquals(AccessSpecifier.PRIVATE, fieldDeclaration.accessSpecifier())
assertEquals("annotations", fieldDeclaration.getName())
assertEquals("java.util.List", fieldDeclaration.getType().asReferenceType().getQualifiedName())
assertEquals(AccessSpecifier.PRIVATE, fieldDeclaration.accessSpecifier())
assertEquals(16, allFields.size())
assertEquals("modifiers", fieldDeclaration.getName())
assertEquals("typeParameters", fieldDeclaration.getName())
assertEquals("name", fieldDeclaration.getName())
assertEquals("parameters", fieldDeclaration.getName())
assertEquals("throws_", fieldDeclaration.getName())
assertEquals("body", fieldDeclaration.getName())
assertEquals("annotations", fieldDeclaration.getName())
assertEquals("NODE_BY_BEGIN_POSITION", fieldDeclaration.getName())
assertEquals("range", fieldDeclaration.getName())
assertEquals("parentNode", fieldDeclaration.getName())
assertEquals("childrenNodes", fieldDeclaration.getName())
assertEquals("orphanComments", fieldDeclaration.getName())
assertEquals("userData", fieldDeclaration.getName())
assertEquals("comment", fieldDeclaration.getName())
assertEquals("ABSOLUTE_BEGIN_LINE", fieldDeclaration.getName())
assertEquals("ABSOLUTE_END_LINE", fieldDeclaration.getName())
assertEquals(3, classDeclaration.getAllFields().size())
assertEquals("s", classDeclaration.getAllFields().get(0).getName())
assertEquals(string, classDeclaration.getAllFields().get(0).getType())
assertEquals(string, rtClassDeclaration.getFieldType("s").get())
assertEquals("t", classDeclaration.getAllFields().get(1).getName())
assertEquals("java.util.List<java.lang.Boolean>", classDeclaration.getAllFields().get(1).getType().describe())
assertEquals(listOfBoolean, rtClassDeclaration.getFieldType("t").get())
assertEquals("i", classDeclaration.getAllFields().get(2).getName())
assertEquals(ResolvedPrimitiveType.INT, classDeclaration.getAllFields().get(2).getType())
assertEquals(ResolvedPrimitiveType.INT, rtClassDeclaration.getFieldType("i").get())
assertEquals(3, allFields.size())
assertEquals("NODE_BY_BEGIN_POSITION", fieldDeclaration.getName())
assertEquals("ABSOLUTE_BEGIN_LINE", fieldDeclaration.getName())
assertEquals("ABSOLUTE_END_LINE", fieldDeclaration.getName())
assertEquals(13, allFields.size())
assertEquals("modifiers", fieldDeclaration.getName())
assertEquals("typeParameters", fieldDeclaration.getName())
assertEquals("name", fieldDeclaration.getName())
assertEquals("parameters", fieldDeclaration.getName())
assertEquals("throws_", fieldDeclaration.getName())
assertEquals("body", fieldDeclaration.getName())
assertEquals("annotations", fieldDeclaration.getName())
assertEquals("range", fieldDeclaration.getName())
assertEquals("parentNode", fieldDeclaration.getName())
assertEquals("childrenNodes", fieldDeclaration.getName())
assertEquals("orphanComments", fieldDeclaration.getName())
assertEquals("userData", fieldDeclaration.getName())
assertEquals("comment", fieldDeclaration.getName())
assertEquals(6, allFields.size())
assertEquals("modifiers", fieldDeclaration.getName())
assertEquals("typeParameters", fieldDeclaration.getName())
assertEquals("name", fieldDeclaration.getName())
assertEquals("parameters", fieldDeclaration.getName())
assertEquals("throws_", fieldDeclaration.getName())
assertEquals("body", fieldDeclaration.getName())
assertEquals(20, allMethods.size())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", sortedMethods.get(0).getQualifiedSignature())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", sortedMethods.get(1).getQualifiedSignature())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration.getBody()", sortedMethods.get(2).getQualifiedSignature())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration.getDeclarationAsString()", sortedMethods.get(3).getQualifiedSignature())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration.getDeclarationAsString(boolean, boolean)", sortedMethods.get(4).getQualifiedSignature())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration.getDeclarationAsString(boolean, boolean, boolean)", sortedMethods.get(5).getQualifiedSignature())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration.getJavaDoc()", sortedMethods.get(6).getQualifiedSignature())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration.getModifiers()", sortedMethods.get(7).getQualifiedSignature())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration.getName()", sortedMethods.get(8).getQualifiedSignature())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration.getNameExpr()", sortedMethods.get(9).getQualifiedSignature())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration.getParameters()", sortedMethods.get(10).getQualifiedSignature())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration.getThrows()", sortedMethods.get(11).getQualifiedSignature())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration.getTypeParameters()", sortedMethods.get(12).getQualifiedSignature())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration.setBody(com.github.javaparser.ast.stmt.BlockStmt)", sortedMethods.get(13).getQualifiedSignature())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration.setModifiers(java.util.EnumSet<com.github.javaparser.ast.Modifier>)", sortedMethods.get(14).getQualifiedSignature())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration.setName(java.lang.String)", sortedMethods.get(15).getQualifiedSignature())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration.setNameExpr(com.github.javaparser.ast.expr.NameExpr)", sortedMethods.get(16).getQualifiedSignature())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration.setParameters(java.util.List<com.github.javaparser.ast.body.Parameter>)", sortedMethods.get(17).getQualifiedSignature())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration.setThrows(java.util.List<com.github.javaparser.ast.type.ReferenceType>)", sortedMethods.get(18).getQualifiedSignature())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration.setTypeParameters(java.util.List<com.github.javaparser.ast.type.TypeParameter>)", sortedMethods.get(19).getQualifiedSignature())
assertEquals(expected.size(), signatures.size())
assertEquals(4, constructors.size())
assertEquals("ConstructorDeclaration()", constructors.get(0).getSignature())
assertEquals("ConstructorDeclaration(java.util.EnumSet<com.github.javaparser.ast.Modifier>, java.lang.String)", constructors.get(1).getSignature())
assertEquals("ConstructorDeclaration(java.util.EnumSet<com.github.javaparser.ast.Modifier>, java.util.List<com.github.javaparser.ast.expr.AnnotationExpr>, java.util.List<com.github.javaparser.ast.type.TypeParameter>, java.lang.String, java.util.List<com.github.javaparser.ast.body.Parameter>, java.util.List<com.github.javaparser.ast.type.ReferenceType>, com.github.javaparser.ast.stmt.BlockStmt)", constructors.get(2).getSignature())
assertEquals("ConstructorDeclaration(com.github.javaparser.Range, java.util.EnumSet<com.github.javaparser.ast.Modifier>, java.util.List<com.github.javaparser.ast.expr.AnnotationExpr>, java.util.List<com.github.javaparser.ast.type.TypeParameter>, java.lang.String, java.util.List<com.github.javaparser.ast.body.Parameter>, java.util.List<com.github.javaparser.ast.type.ReferenceType>, com.github.javaparser.ast.stmt.BlockStmt)", constructors.get(3).getSignature())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithModifiers.isStatic()", res.getCorrespondingDeclaration().getQualifiedSignature())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithThrowable.isThrows(java.lang.Class<? extends java.lang.Throwable>)", res.getCorrespondingDeclaration().getQualifiedSignature())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithThrowable.isThrows(java.lang.String)", res.getCorrespondingDeclaration().getQualifiedSignature())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithThrowable.isThrows(java.lang.Class<? extends java.lang.Throwable>)", res.getCorrespondingDeclaration().getQualifiedSignature())
assertTrue(ca.hasDirectlyAnnotation("foo.bar.MyAnnotation"))
assertTrue(cb.hasDirectlyAnnotation("foo.bar.MyAnnotation2"))
assertTrue(ca.hasAnnotation("foo.bar.MyAnnotation"))
assertTrue(cb.hasAnnotation("foo.bar.MyAnnotation"))
assertTrue(cb.hasAnnotation("foo.bar.MyAnnotation2"))
assertTrue(ancestors.size() == 1)
assertEquals("FooBase", ancestors.get(0).getQualifiedName())
assertEquals(false, modifier.isClass())
assertEquals(false, modifier.isInterface())
assertEquals(true, modifier.isEnum())
assertEquals(false, modifier.isTypeParameter())
assertEquals(true, modifier.isType())
assertEquals(modifier, modifier.asType())
assertEquals(modifier, modifier.asEnum())
assertEquals("com.github.javaparser.ast", modifier.getPackageName())
assertEquals("Modifier", modifier.getClassName())
assertEquals("com.github.javaparser.ast.Modifier", modifier.getQualifiedName())
assertEquals(2, ancestors.size())
assertEquals("java.lang.Enum", ancestors.get(0).getQualifiedName())
assertEquals("java.lang.Cloneable", ancestors.get(1).getQualifiedName())
assertEquals("com.github.javaparser.ast.body.BodyDeclaration", compilationUnit.getSuperClass().get().getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", compilationUnit.getSuperClass().get().typeParametersMap().getValueBySignature("com.github.javaparser.ast.body.BodyDeclaration.T").get().asReferenceType().getQualifiedName())
assertEquals(ImmutableSet.of("com.github.javaparser.ast.Node", "java.lang.Object"), cu.getAllSuperClasses().stream().map(i -> i.getQualifiedName()).collect(Collectors.toSet()))
assertEquals(3, constructorDeclaration.getAllSuperClasses().size())
assertEquals("com.github.javaparser.ast.body.BodyDeclaration", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.body.BodyDeclaration.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.Node", ancestor.getQualifiedName())
assertEquals("java.lang.Object", ancestor.getQualifiedName())
assertEquals(7, constructorDeclaration.getInterfaces().size())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithJavaDoc", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithJavaDoc.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithDeclaration", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithName", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithName.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithModifiers", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithModifiers.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithParameters", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithParameters.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithThrowable", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithThrowable.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithBlockStmt", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithBlockStmt.T").get().asReferenceType().getQualifiedName())
assertEquals(9, constructorDeclaration.getAllInterfaces().size())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithJavaDoc", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithJavaDoc.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithDeclaration", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithName", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithName.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithModifiers", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithModifiers.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithParameters", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithParameters.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithThrowable", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithThrowable.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithBlockStmt", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithBlockStmt.T").get().asReferenceType().getQualifiedName())
assertEquals("java.lang.Cloneable", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithAnnotations", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithAnnotations.T").get().asReferenceType().getQualifiedName())
assertEquals(8, constructorDeclaration.getAncestors().size())
assertEquals("com.github.javaparser.ast.body.BodyDeclaration", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.body.BodyDeclaration.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithJavaDoc", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithJavaDoc.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithDeclaration", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithName", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithName.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithModifiers", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithModifiers.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithParameters", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithParameters.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithThrowable", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithThrowable.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithBlockStmt", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithBlockStmt.T").get().asReferenceType().getQualifiedName())
assertEquals(ImmutableSet.of("java.lang.Cloneable", "com.github.javaparser.ast.Node", "java.lang.Object"), cu.getAllAncestors().stream().map(i -> i.getQualifiedName()).collect(Collectors.toSet()))
assertEquals(12, ancestors.size())
assertEquals("com.github.javaparser.ast.body.BodyDeclaration", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.body.BodyDeclaration.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.Node", ancestor.getQualifiedName())
assertEquals("java.lang.Object", ancestor.getQualifiedName())
assertEquals("java.lang.Cloneable", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithAnnotations", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithAnnotations.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithJavaDoc", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithJavaDoc.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithDeclaration", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithName", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithName.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithModifiers", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithModifiers.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithParameters", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithParameters.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithThrowable", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithThrowable.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithBlockStmt", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithBlockStmt.T").get().asReferenceType().getQualifiedName())
assertEquals("modifiers", fieldDeclaration.getName())
assertEquals("java.util.EnumSet", fieldDeclaration.getType().asReferenceType().getQualifiedName())
assertEquals(AccessSpecifier.PRIVATE, fieldDeclaration.accessSpecifier())
assertEquals("annotations", fieldDeclaration.getName())
assertEquals("java.util.List", fieldDeclaration.getType().asReferenceType().getQualifiedName())
assertEquals(AccessSpecifier.PRIVATE, fieldDeclaration.accessSpecifier())
assertEquals(16, allFields.size())
assertEquals("modifiers", fieldDeclaration.getName())
assertEquals("typeParameters", fieldDeclaration.getName())
assertEquals("name", fieldDeclaration.getName())
assertEquals("parameters", fieldDeclaration.getName())
assertEquals("throws_", fieldDeclaration.getName())
assertEquals("body", fieldDeclaration.getName())
assertEquals("annotations", fieldDeclaration.getName())
assertEquals("NODE_BY_BEGIN_POSITION", fieldDeclaration.getName())
assertEquals("range", fieldDeclaration.getName())
assertEquals("parentNode", fieldDeclaration.getName())
assertEquals("childrenNodes", fieldDeclaration.getName())
assertEquals("orphanComments", fieldDeclaration.getName())
assertEquals("userData", fieldDeclaration.getName())
assertEquals("comment", fieldDeclaration.getName())
assertEquals("ABSOLUTE_BEGIN_LINE", fieldDeclaration.getName())
assertEquals("ABSOLUTE_END_LINE", fieldDeclaration.getName())
assertEquals(3, allFields.size())
assertEquals("NODE_BY_BEGIN_POSITION", fieldDeclaration.getName())
assertEquals("ABSOLUTE_BEGIN_LINE", fieldDeclaration.getName())
assertEquals("ABSOLUTE_END_LINE", fieldDeclaration.getName())
assertEquals(13, allFields.size())
assertEquals("modifiers", fieldDeclaration.getName())
assertEquals("typeParameters", fieldDeclaration.getName())
assertEquals("name", fieldDeclaration.getName())
assertEquals("parameters", fieldDeclaration.getName())
assertEquals("throws_", fieldDeclaration.getName())
assertEquals("body", fieldDeclaration.getName())
assertEquals("annotations", fieldDeclaration.getName())
assertEquals("range", fieldDeclaration.getName())
assertEquals("parentNode", fieldDeclaration.getName())
assertEquals("childrenNodes", fieldDeclaration.getName())
assertEquals("orphanComments", fieldDeclaration.getName())
assertEquals("userData", fieldDeclaration.getName())
assertEquals("comment", fieldDeclaration.getName())
assertEquals(6, allFields.size())
assertEquals("modifiers", fieldDeclaration.getName())
assertEquals("typeParameters", fieldDeclaration.getName())
assertEquals("name", fieldDeclaration.getName())
assertEquals("parameters", fieldDeclaration.getName())
assertEquals("throws_", fieldDeclaration.getName())
assertEquals("body", fieldDeclaration.getName())
assertEquals(20, allMethods.size())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", sortedMethods.get(0).getQualifiedSignature())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", sortedMethods.get(1).getQualifiedSignature())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration.getBody()", sortedMethods.get(2).getQualifiedSignature())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration.getDeclarationAsString()", sortedMethods.get(3).getQualifiedSignature())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration.getDeclarationAsString(boolean, boolean)", sortedMethods.get(4).getQualifiedSignature())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration.getDeclarationAsString(boolean, boolean, boolean)", sortedMethods.get(5).getQualifiedSignature())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration.getJavaDoc()", sortedMethods.get(6).getQualifiedSignature())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration.getModifiers()", sortedMethods.get(7).getQualifiedSignature())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration.getName()", sortedMethods.get(8).getQualifiedSignature())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration.getNameExpr()", sortedMethods.get(9).getQualifiedSignature())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration.getParameters()", sortedMethods.get(10).getQualifiedSignature())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration.getThrows()", sortedMethods.get(11).getQualifiedSignature())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration.getTypeParameters()", sortedMethods.get(12).getQualifiedSignature())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration.setBody(com.github.javaparser.ast.stmt.BlockStmt)", sortedMethods.get(13).getQualifiedSignature())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration.setModifiers(java.util.EnumSet<com.github.javaparser.ast.Modifier>)", sortedMethods.get(14).getQualifiedSignature())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration.setName(java.lang.String)", sortedMethods.get(15).getQualifiedSignature())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration.setNameExpr(com.github.javaparser.ast.expr.NameExpr)", sortedMethods.get(16).getQualifiedSignature())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration.setParameters(java.util.List<com.github.javaparser.ast.body.Parameter>)", sortedMethods.get(17).getQualifiedSignature())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration.setThrows(java.util.List<com.github.javaparser.ast.type.ReferenceType>)", sortedMethods.get(18).getQualifiedSignature())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration.setTypeParameters(java.util.List<com.github.javaparser.ast.type.TypeParameter>)", sortedMethods.get(19).getQualifiedSignature())
assertEquals(4, constructors.size())
assertEquals("ConstructorDeclaration()", constructors.get(0).getSignature())
assertEquals("ConstructorDeclaration(java.util.EnumSet<com.github.javaparser.ast.Modifier>, java.lang.String)", constructors.get(1).getSignature())
assertEquals("ConstructorDeclaration(java.util.EnumSet<com.github.javaparser.ast.Modifier>, java.util.List<com.github.javaparser.ast.expr.AnnotationExpr>, java.util.List<com.github.javaparser.ast.type.TypeParameter>, java.lang.String, java.util.List<com.github.javaparser.ast.body.Parameter>, java.util.List<com.github.javaparser.ast.type.ReferenceType>, com.github.javaparser.ast.stmt.BlockStmt)", constructors.get(2).getSignature())
assertEquals("ConstructorDeclaration(com.github.javaparser.Range, java.util.EnumSet<com.github.javaparser.ast.Modifier>, java.util.List<com.github.javaparser.ast.expr.AnnotationExpr>, java.util.List<com.github.javaparser.ast.type.TypeParameter>, java.lang.String, java.util.List<com.github.javaparser.ast.body.Parameter>, java.util.List<com.github.javaparser.ast.type.ReferenceType>, com.github.javaparser.ast.stmt.BlockStmt)", constructors.get(3).getSignature())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithModifiers.isStatic()", res.getCorrespondingDeclaration().getQualifiedSignature())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithThrowable.isThrows(java.lang.Class<? extends java.lang.Throwable>)", res.getCorrespondingDeclaration().getQualifiedSignature())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithThrowable.isThrows(java.lang.String)", res.getCorrespondingDeclaration().getQualifiedSignature())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithThrowable.isThrows(java.lang.Class<? extends java.lang.Throwable>)", res.getCorrespondingDeclaration().getQualifiedSignature())
assertEquals(false, res.isSolved())
assertEquals(false, res.isSolved())
assertEquals(0, internalTypes1.size())
assertEquals(1, internalTypes2.size())
assertEquals("EnumWithInnerType.EnumInner", internalTypes2.iterator().next().getQualifiedName())
assertEquals(false, dec.hasDirectlyAnnotation("javax.persistence.Embeddable"))
assertEquals(false, dec.hasDirectlyAnnotation("javax.persistence.Embeddable"))
assertEquals(true, dec.hasDirectlyAnnotation("MyAnno"))
assertTrue(field.isField())
assertDoesNotThrow(field::asField)
assertTrue(parameterDeclaration.isParameter())
assertDoesNotThrow(parameterDeclaration::asParameter)
assertTrue(localVar.isVariable())
assertTrue(patternVar.isPattern())
assertDoesNotThrow(patternVar::asPattern)
assertNotNull(createValue().getWrappedNode())
assertEquals(expectedTypes, parserTypeParameter.getAncestors().stream().map(ResolvedReferenceType::getQualifiedName).sorted().collect(Collectors.toList()))
assertEquals(false, nodeWithAnnotations.isClass())
assertEquals(true, nodeWithAnnotations.isInterface())
assertEquals(false, nodeWithAnnotations.isEnum())
assertEquals(false, nodeWithAnnotations.isTypeParameter())
assertEquals(true, nodeWithAnnotations.isType())
assertEquals(nodeWithAnnotations, nodeWithAnnotations.asType())
assertEquals(nodeWithAnnotations, nodeWithAnnotations.asInterface())
assertEquals("com.github.javaparser.ast.nodeTypes", nodeWithAnnotations.getPackageName())
assertEquals("NodeWithAnnotations", nodeWithAnnotations.getClassName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithAnnotations", nodeWithAnnotations.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.BodyDeclaration", compilationUnit.getSuperClass().get().getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", compilationUnit.getSuperClass().get().typeParametersMap().getValueBySignature("com.github.javaparser.ast.body.BodyDeclaration.T").get().asReferenceType().getQualifiedName())
assertEquals(ImmutableSet.of("com.github.javaparser.ast.Node", "java.lang.Object"), cu.getAllSuperClasses().stream().map(i -> i.getQualifiedName()).collect(Collectors.toSet()))
assertEquals(1, ancestors.size())
assertEquals("Base", ancestors.get(0).getQualifiedName())
assertEquals(2, types.size())
assertEquals("java.lang.Integer", types.get(0).asReferenceType().getQualifiedName())
assertEquals("Extends", types.get(1).asReferenceType().getQualifiedName())
assertEquals(3, constructorDeclaration.getAllSuperClasses().size())
assertEquals("com.github.javaparser.ast.body.BodyDeclaration", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.body.BodyDeclaration.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.Node", ancestor.getQualifiedName())
assertEquals("java.lang.Object", ancestor.getQualifiedName())
assertEquals(7, constructorDeclaration.getInterfaces().size())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithJavaDoc", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithJavaDoc.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithDeclaration", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithName", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithName.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithModifiers", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithModifiers.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithParameters", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithParameters.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithThrowable", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithThrowable.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithBlockStmt", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithBlockStmt.T").get().asReferenceType().getQualifiedName())
assertEquals(9, constructorDeclaration.getAllInterfaces().size())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithJavaDoc", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithJavaDoc.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithDeclaration", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithName", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithName.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithModifiers", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithModifiers.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithParameters", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithParameters.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithThrowable", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithThrowable.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithBlockStmt", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithBlockStmt.T").get().asReferenceType().getQualifiedName())
assertEquals("java.lang.Cloneable", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithAnnotations", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithAnnotations.T").get().asReferenceType().getQualifiedName())
assertEquals(8, constructorDeclaration.getAncestors().size())
assertEquals("com.github.javaparser.ast.body.BodyDeclaration", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.body.BodyDeclaration.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithJavaDoc", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithJavaDoc.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithDeclaration", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithName", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithName.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithModifiers", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithModifiers.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithParameters", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithParameters.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithThrowable", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithThrowable.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithBlockStmt", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithBlockStmt.T").get().asReferenceType().getQualifiedName())
assertEquals(ImmutableSet.of("java.lang.Cloneable", "com.github.javaparser.ast.Node", "java.lang.Object"), cu.getAllAncestors().stream().map(i -> i.getQualifiedName()).collect(Collectors.toSet()))
assertEquals(12, ancestors.size())
assertEquals("com.github.javaparser.ast.body.BodyDeclaration", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.body.BodyDeclaration.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.Node", ancestor.getQualifiedName())
assertEquals("java.lang.Object", ancestor.getQualifiedName())
assertEquals("java.lang.Cloneable", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithAnnotations", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithAnnotations.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithJavaDoc", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithJavaDoc.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithDeclaration", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithName", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithName.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithModifiers", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithModifiers.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithParameters", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithParameters.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithThrowable", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithThrowable.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithBlockStmt", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithBlockStmt.T").get().asReferenceType().getQualifiedName())
assertEquals("modifiers", ResolvedFieldDeclaration.getName())
assertEquals("java.util.EnumSet", ResolvedFieldDeclaration.getType().asReferenceType().getQualifiedName())
assertEquals(AccessSpecifier.PRIVATE, ResolvedFieldDeclaration.accessSpecifier())
assertEquals(false, ResolvedFieldDeclaration.isStatic())
assertEquals("annotations", ResolvedFieldDeclaration.getName())
assertEquals("java.util.List", ResolvedFieldDeclaration.getType().asReferenceType().getQualifiedName())
assertEquals(AccessSpecifier.PRIVATE, ResolvedFieldDeclaration.accessSpecifier())
assertEquals(16, allFields.size())
assertEquals("modifiers", ResolvedFieldDeclaration.getName())
assertEquals("typeParameters", ResolvedFieldDeclaration.getName())
assertEquals("name", ResolvedFieldDeclaration.getName())
assertEquals("parameters", ResolvedFieldDeclaration.getName())
assertEquals("throws_", ResolvedFieldDeclaration.getName())
assertEquals("body", ResolvedFieldDeclaration.getName())
assertEquals("annotations", ResolvedFieldDeclaration.getName())
assertEquals("NODE_BY_BEGIN_POSITION", ResolvedFieldDeclaration.getName())
assertEquals("range", ResolvedFieldDeclaration.getName())
assertEquals("parentNode", ResolvedFieldDeclaration.getName())
assertEquals("childrenNodes", ResolvedFieldDeclaration.getName())
assertEquals("orphanComments", ResolvedFieldDeclaration.getName())
assertEquals("userData", ResolvedFieldDeclaration.getName())
assertEquals("comment", ResolvedFieldDeclaration.getName())
assertEquals("ABSOLUTE_BEGIN_LINE", ResolvedFieldDeclaration.getName())
assertEquals("ABSOLUTE_END_LINE", ResolvedFieldDeclaration.getName())
assertEquals(3, allFields.size())
assertEquals("NODE_BY_BEGIN_POSITION", ResolvedFieldDeclaration.getName())
assertEquals("ABSOLUTE_BEGIN_LINE", ResolvedFieldDeclaration.getName())
assertEquals("ABSOLUTE_END_LINE", ResolvedFieldDeclaration.getName())
assertEquals(13, allFields.size())
assertEquals("modifiers", ResolvedFieldDeclaration.getName())
assertEquals("typeParameters", ResolvedFieldDeclaration.getName())
assertEquals("name", ResolvedFieldDeclaration.getName())
assertEquals("parameters", ResolvedFieldDeclaration.getName())
assertEquals("throws_", ResolvedFieldDeclaration.getName())
assertEquals("body", ResolvedFieldDeclaration.getName())
assertEquals("annotations", ResolvedFieldDeclaration.getName())
assertEquals("range", ResolvedFieldDeclaration.getName())
assertEquals("parentNode", ResolvedFieldDeclaration.getName())
assertEquals("childrenNodes", ResolvedFieldDeclaration.getName())
assertEquals("orphanComments", ResolvedFieldDeclaration.getName())
assertEquals("userData", ResolvedFieldDeclaration.getName())
assertEquals("comment", ResolvedFieldDeclaration.getName())
assertEquals(6, allFields.size())
assertEquals("modifiers", ResolvedFieldDeclaration.getName())
assertEquals("typeParameters", ResolvedFieldDeclaration.getName())
assertEquals("name", ResolvedFieldDeclaration.getName())
assertEquals("parameters", ResolvedFieldDeclaration.getName())
assertEquals("throws_", ResolvedFieldDeclaration.getName())
assertEquals("body", ResolvedFieldDeclaration.getName())
assertEquals(20, allMethods.size())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", sortedMethods.get(0).getQualifiedSignature())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", sortedMethods.get(1).getQualifiedSignature())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration.getBody()", sortedMethods.get(2).getQualifiedSignature())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration.getDeclarationAsString()", sortedMethods.get(3).getQualifiedSignature())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration.getDeclarationAsString(boolean, boolean)", sortedMethods.get(4).getQualifiedSignature())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration.getDeclarationAsString(boolean, boolean, boolean)", sortedMethods.get(5).getQualifiedSignature())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration.getJavaDoc()", sortedMethods.get(6).getQualifiedSignature())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration.getModifiers()", sortedMethods.get(7).getQualifiedSignature())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration.getName()", sortedMethods.get(8).getQualifiedSignature())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration.getNameExpr()", sortedMethods.get(9).getQualifiedSignature())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration.getParameters()", sortedMethods.get(10).getQualifiedSignature())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration.getThrows()", sortedMethods.get(11).getQualifiedSignature())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration.getTypeParameters()", sortedMethods.get(12).getQualifiedSignature())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration.setBody(com.github.javaparser.ast.stmt.BlockStmt)", sortedMethods.get(13).getQualifiedSignature())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration.setModifiers(java.util.EnumSet<com.github.javaparser.ast.Modifier>)", sortedMethods.get(14).getQualifiedSignature())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration.setName(java.lang.String)", sortedMethods.get(15).getQualifiedSignature())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration.setNameExpr(com.github.javaparser.ast.expr.NameExpr)", sortedMethods.get(16).getQualifiedSignature())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration.setParameters(java.util.List<com.github.javaparser.ast.body.Parameter>)", sortedMethods.get(17).getQualifiedSignature())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration.setThrows(java.util.List<com.github.javaparser.ast.type.ReferenceType>)", sortedMethods.get(18).getQualifiedSignature())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration.setTypeParameters(java.util.List<com.github.javaparser.ast.type.TypeParameter>)", sortedMethods.get(19).getQualifiedSignature())
assertEquals(4, constructors.size())
assertEquals("ConstructorDeclaration()", constructors.get(0).getSignature())
assertEquals("ConstructorDeclaration(java.util.EnumSet<com.github.javaparser.ast.Modifier>, java.lang.String)", constructors.get(1).getSignature())
assertEquals("ConstructorDeclaration(java.util.EnumSet<com.github.javaparser.ast.Modifier>, java.util.List<com.github.javaparser.ast.expr.AnnotationExpr>, java.util.List<com.github.javaparser.ast.type.TypeParameter>, java.lang.String, java.util.List<com.github.javaparser.ast.body.Parameter>, java.util.List<com.github.javaparser.ast.type.ReferenceType>, com.github.javaparser.ast.stmt.BlockStmt)", constructors.get(2).getSignature())
assertEquals("ConstructorDeclaration(com.github.javaparser.Range, java.util.EnumSet<com.github.javaparser.ast.Modifier>, java.util.List<com.github.javaparser.ast.expr.AnnotationExpr>, java.util.List<com.github.javaparser.ast.type.TypeParameter>, java.lang.String, java.util.List<com.github.javaparser.ast.body.Parameter>, java.util.List<com.github.javaparser.ast.type.ReferenceType>, com.github.javaparser.ast.stmt.BlockStmt)", constructors.get(3).getSignature())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithModifiers.isStatic()", res.getCorrespondingDeclaration().getQualifiedSignature())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithThrowable.isThrows(java.lang.Class<? extends java.lang.Throwable>)", res.getCorrespondingDeclaration().getQualifiedSignature())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithThrowable.isThrows(java.lang.String)", res.getCorrespondingDeclaration().getQualifiedSignature())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithThrowable.isThrows(java.lang.Class<? extends java.lang.Throwable>)", res.getCorrespondingDeclaration().getQualifiedSignature())
assertEquals(false, res.isSolved())
assertEquals(false, res.isSolved())
assertTrue(rfd.isVolatile())
assertEquals(int.class.getCanonicalName(), resolvedType.describe())
assertEquals(String.class.getCanonicalName(), resolvedType.describe())
assertEquals(String.class.getCanonicalName(), resolvedType.describe())
assertEquals(TestEnum.class.getCanonicalName(), resolvedType.describe())
assertEquals(Override.class.getCanonicalName(), resolvedType.describe())
assertEquals(true, javaParserFacade.solve(firstFieldMethodCall).isSolved())
assertEquals(true, javaParserFacade.solve(secondFieldMethodCall).isSolved())
assertEquals(true, javaParserFacade.solve(thirdFieldMethodCall).isSolved())
assertEquals(true, javaParserFacade.solve(methodCall).isSolved())
assertEquals(true, javaParserFacade.solve(innerMethodCall).isSolved())
assertEquals(true, javaParserFacade.solve(innerInnerMethodCall).isSolved())
assertEquals(true, javaParserFacade.solve(methodCallWithNestedStaticFieldParam).isSolved())
assertEquals(true, javaParserFacade.solve(staticMethodCall).isSolved())
assertEquals(true, javaParserFacade.solve(methodCall).isSolved())
assertEquals(true, javaParserFacade.solve(innerMethodCall).isSolved())
assertEquals(true, javaParserFacade.solve(innerInnerMethodCall).isSolved())
assertEquals(true, javaParserFacade.solve(firstFieldMethodCall).isSolved())
assertEquals(true, javaParserFacade.solve(secondFieldMethodCall).isSolved())
assertEquals(true, javaParserFacade.solve(thirdFieldMethodCall).isSolved())
assertFalse(annotation.get().resolve().isInheritable())
assertFalse(compilationUnit.isInterface())
assertFalse(compilationUnit.isEnum())
assertFalse(compilationUnit.isTypeParameter())
assertFalse(fieldDeclaration.isStatic())
assertFalse(res.isSolved())
assertFalse(res.isSolved())
assertFalse(res.isSolved())
assertFalse(ca.hasDirectlyAnnotation("foo.bar.MyAnnotation2"))
assertFalse(ca.hasDirectlyAnnotation("MyAnnotation"))
assertFalse(ca.hasDirectlyAnnotation("foo.bar.MyUnexistingAnnotation"))
assertFalse(cb.hasDirectlyAnnotation("foo.bar.MyAnnotation"))
assertFalse(cb.hasDirectlyAnnotation("MyAnnotation"))
assertFalse(cb.hasDirectlyAnnotation("foo.bar.MyUnexistingAnnotation"))
assertFalse(ca.hasAnnotation("foo.bar.MyAnnotation2"))
assertFalse(ca.hasAnnotation("MyAnnotation"))
assertFalse(ca.hasAnnotation("foo.bar.MyUnexistingAnnotation"))
assertFalse(cb.hasAnnotation("MyAnnotation"))
assertFalse(cb.hasAnnotation("foo.bar.MyUnexistingAnnotation"))
assertFalse(fieldDeclaration.isStatic())
assertFalse(rfd.isVolatile())
assertTrue(alphaContext.solveType("Foo").isSolved())
assertTrue(alphaContext.solveType("Foo", Collections.emptyList()).isSolved())
assertFalse(alphaContext.solveType("Foo", Collections.singletonList(ResolvedPrimitiveType.INT)).isSolved())
assertTrue(betaContext.solveType("Foo").isSolved())
assertFalse(betaContext.solveType("Foo", Collections.emptyList()).isSolved())
assertTrue(betaContext.solveType("Foo", Collections.singletonList(ResolvedPrimitiveType.INT)).isSolved())
assertEquals(String.class.getCanonicalName(), type.asReferenceType().getQualifiedName())
assertEquals(normalizeEolInTextBlock(expected, LineSeparator.ARBITRARY), normalizeEolInTextBlock(actual, LineSeparator.ARBITRARY))
assertEquals("java.io.PrintStream.println(java.lang.String)", resolvedMethodDeclaration.getQualifiedSignature())
assertEquals("java.util.function.Consumer<? super T>", type.describe())
assertTrue(parseResult.isSuccessful())
assertEquals("java.util.stream.Stream<java.lang.String>", javaParserFacade.getType(methodCallExpr).describe())
assertEquals("java.util.function.Predicate<? super java.lang.String>", javaParserFacade.getType(lambdas.get(0)).describe())
assertEquals("java.util.function.Function<? super java.lang.String, ? extends java.lang.Integer>", javaParserFacade.getType(lambdas.get(1)).describe())
assertEquals("java.util.function.Predicate<? super java.lang.Integer>", javaParserFacade.getType(lambdas.get(2)).describe())
assertNotNull(fieldAccess)
assertEquals(ResolvedPrimitiveType.INT, ref.getCorrespondingDeclaration().getType().asPrimitive())
Assertions.assertTrue(isSolved)
assertEquals("java.util.Comparator<java.lang.String>", oce.calculateResolvedType().describe())
assertTrue(oce.resolve().getQualifiedName().startsWith("A.Anonymous"))
assertEquals(false, FunctionalInterfaceLogic.getFunctionalMethod(string).isPresent())
assertEquals(true, FunctionalInterfaceLogic.getFunctionalMethod(function).isPresent())
assertEquals("apply", FunctionalInterfaceLogic.getFunctionalMethod(function).get().getName())
assertEquals(true, FunctionalInterfaceLogic.getFunctionalMethod(consumer).isPresent())
assertEquals("accept", FunctionalInterfaceLogic.getFunctionalMethod(consumer).get().getName())
assertEquals(false, FunctionalInterfaceLogic.getFunctionalMethod(function).isPresent())
assertEquals(object, result)
assertEquals(new InferenceVariableType(0, typeSolver), result)
assertEquals(listOf(new InferenceVariableType(0, typeSolver)), result)
assertEquals(isFunctionalInterface(abstractTypeDeclaration), abstractTypeDeclaration.isFunctionalInterface())
assertEquals(0, cu.getComments().size())
assertFalse(cu.getComment().isPresent())
assertEquals(0, cu.getComments().size())
assertFalse(cu.getComment().isPresent())
assertEquals(2, comments.size())
assertEquals(2, comments.size())
assertEquals(6, comments.size())
assertEquals(1, comments.size())
assertEquals(1, comments.size())
assertEquals(3, comments.size())
assertEquals(3, comments.size())
assertEquals(2, classes.size())
assertTrue(innerInterface.isInterface())
assertTrue(resolvedType.isPresent())
assertEquals(innerInterface, resolvedType.get().getTypeDeclaration().orElse(null))
assertEquals("ObjectContext.set(java.lang.String, java.lang.Object, boolean)", mces.get(0).resolve().getQualifiedSignature())
assertEquals(true, javaParserFacade.solve(firstParameter).isSolved())
assertEquals(true, javaParserFacade.solve(firstParameter).getCorrespondingDeclaration().isField())
assertEquals("hw", javaParserFacade.solve(firstParameter).getCorrespondingDeclaration().getName())
assertEquals(true, javaParserFacade.solve(firstParameter).isSolved())
assertEquals(true, javaParserFacade.solve(firstParameter).isSolved())
assertEquals(2, all.size())
Assertions.assertEquals("recovered", fieldAccessExpr.getNameAsString())
assertTrue(resolved.getType().isPrimitive())
assertEquals("java.lang.Integer", resolved.getType().asPrimitive().getBoxTypeQName())
Assertions.assertEquals("perPriority", fieldAccessExpr.getNameAsString())
assertTrue(resolved.getType().isArray())
assertEquals(2, all.size())
Assertions.assertEquals("recovered", fieldAccessExpr.getNameAsString())
assertTrue(resolved.getType().isPrimitive())
assertEquals("java.lang.Integer", resolved.getType().asPrimitive().getBoxTypeQName())
Assertions.assertEquals("perPriority", fieldAccessExpr.getNameAsString())
assertTrue(resolved.getType().isArray())
assertTrue(resolved.isTypeVariable())
assertTrue(unresolved.get() < 10)
assertEquals("foo", resolvedMethodDeclaration.getName())
assertEquals("A[]", resolvedMethodDeclaration.getReturnType().describe())
assertEquals("java.lang.String[]", resolvedMethodDeclaration.getParam(0).getType().describe())
assertEquals("int[]", resolvedMethodDeclaration.getParam(1).getType().describe())
assertEquals("hashCode", resolvedMethodRef.getName())
assertEquals("int", resolvedMethodRef.getReturnType().describe())
assertEquals(0, resolvedMethodRef.getNumberOfParams())
assertEquals("A[]", resolvedType.describe())
assertEquals(true, symbolReference.isSolved())
assertEquals(true, symbolReference.getCorrespondingDeclaration().isField())
assertEquals("a", symbolReference.getCorrespondingDeclaration().getName())
assertEquals("U9.U9(java.util.Optional<java.lang.String>, java.util.Optional<U9>, int)", oces.get(0).resolve().getQualifiedSignature())
assertEquals("U9.U9(java.util.Optional<java.lang.String>, java.util.Optional<U9>, int)", oces.get(1).resolve().getQualifiedSignature())
assertEquals("U9.U9(java.util.Optional<java.lang.String>, java.util.Optional<java.lang.String>, java.lang.String)", oces.get(2).resolve().getQualifiedSignature())
assertEquals("U9.U9(java.util.Optional<U9>, java.util.Optional<U9>, boolean)", oces.get(3).resolve().getQualifiedSignature())
assertEquals(oce.resolve().getSignature(), "InnerClass(int)")
assertTrue(optionalFieldDeclaration.isPresent())
assertEquals(Spliterator.OfInt.class.getCanonicalName(), resolvedField.asReferenceType().getQualifiedName())
assertEquals(false, javaParserFacade.solve(methodCallExpr).isSolved())
assertEquals("AParserTest.doSomething(java.lang.String, java.util.function.Supplier<?>...)", rmd.getQualifiedSignature())
assertEquals("A.A(java.lang.Boolean)", oces.get(0).resolve().getQualifiedSignature())
assertNotNull(resolvedCall)
assertEquals("MyEnum.method()", resolvedCall.getQualifiedSignature())
assertEquals("foo.A", ancestors.get(0).describe())
assertEquals(2, lambdas.size())
assertEquals("java.util.function.Consumer<java.lang.String>", lambdas.get(0).calculateResolvedType().describe())
assertEquals("java.util.function.Consumer<java.lang.String>", lambdas.get(1).calculateResolvedType().describe())
assertEquals(2, exprs.size())
assertEquals("? super java.lang.String", exprs.get(0).calculateResolvedType().describe())
assertEquals("? super java.lang.String", exprs.get(1).calculateResolvedType().describe())
assertEquals("int", mce.calculateResolvedType().describe())
assertEquals("java.lang.String.length", mce.resolve().getQualifiedName())
assertEquals("java.lang.String", mce.getScope().get().calculateResolvedType().describe())
assertEquals("java.lang.SuppressWarnings", nae.resolve().getQualifiedName())
assertEquals("hashCode()", hashCode.getSignature())
assertEquals("equals(java.lang.Object)", equals.getSignature())
assertEquals("containsAll(java.util.Collection<? extends java.lang.Object>)", containsAll.getSignature())
assertEquals("subList(int, int)", subList.getSignature())
assertEquals(true, put.getReturnType().isTypeVariable())
assertEquals(true, put.getReturnType().asTypeParameter().declaredOnType())
assertEquals("java.util.Map.V", put.getReturnType().asTypeParameter().getQualifiedName())
assertEquals(true, put.getParam(0).getType().isTypeVariable())
assertEquals(true, put.getParam(0).getType().asTypeParameter().declaredOnType())
assertEquals("java.util.Map.K", put.getParam(0).getType().asTypeParameter().getQualifiedName())
assertEquals(true, put.getParam(1).getType().isTypeVariable())
assertEquals(true, put.getParam(1).getType().asTypeParameter().declaredOnType())
assertEquals("java.util.Map.V", put.getParam(1).getType().asTypeParameter().getQualifiedName())
assertEquals(2, foundCount)
assertEquals(2, ancestors.size())
assertEquals(new ReferenceTypeImpl(new ReflectionInterfaceDeclaration(Collection.class, typeResolver), ImmutableList.of(typeVariable)), ancestors.get("java.util.Collection"))
assertEquals(new ReferenceTypeImpl(new ReflectionInterfaceDeclaration(Iterable.class, typeResolver), ImmutableList.of(typeVariable)), ancestors.get("java.lang.Iterable"))
assertEquals(2, ancestors.size())
assertEquals(new ReferenceTypeImpl(new ReflectionInterfaceDeclaration(Collection.class, typeResolver), ImmutableList.of(typeVariable)), ancestors.get(0))
assertEquals(new ReferenceTypeImpl(new ReflectionInterfaceDeclaration(Iterable.class, typeResolver), ImmutableList.of(typeVariable)), ancestors.get(1))
assertEquals(6, ancestors.size())
assertEquals(new ReferenceTypeImpl(new ReflectionClassDeclaration(Buffer.class, typeResolver)), ancestors.get(0))
assertEquals(new ReferenceTypeImpl(new ReflectionInterfaceDeclaration(Appendable.class, typeResolver)), ancestors.get(2))
assertEquals(new ReferenceTypeImpl(new ReflectionInterfaceDeclaration(CharSequence.class, typeResolver)), ancestors.get(3))
assertEquals(new ReferenceTypeImpl(new ReflectionInterfaceDeclaration(Readable.class, typeResolver)), ancestors.get(4))
assertEquals(new ReferenceTypeImpl(new ReflectionClassDeclaration(Object.class, typeResolver)), ancestors.get(5))
assertEquals(true, foo.isClass())
assertEquals(true, bar.isClass())
assertEquals(Object.class.getCanonicalName(), foo.getSuperClass().orElseThrow(() -> new RuntimeException("super class unexpectedly empty")).getQualifiedName())
assertEquals(Collections.emptyList(), foo.getSuperClass().orElseThrow(() -> new RuntimeException("super class unexpectedly empty")).typeParametersValues())
assertEquals("Bar", foo.getSuperClass().orElseThrow(() -> new RuntimeException("super class unexpectedly empty")).getTypeDeclaration().get().getName())
assertEquals(Collections.emptyList(), foo.getSuperClass().orElseThrow(() -> new RuntimeException("super class unexpectedly empty")).typeParametersValues())
assertEquals("Foo", bar.getSuperClass().orElseThrow(() -> new RuntimeException("super class unexpectedly empty")).getTypeDeclaration().get().getName())
assertEquals(1, bar.getSuperClass().orElseThrow(() -> new RuntimeException("super class unexpectedly empty")).typeParametersValues().size())
assertEquals(String.class.getCanonicalName(), bar.getSuperClass().orElseThrow(() -> new RuntimeException("super class unexpectedly empty")).typeParametersValues().get(0).asReferenceType().getQualifiedName())
assertEquals("Foo", bar.getSuperClass().orElseThrow(() -> new RuntimeException("super class unexpectedly empty")).getTypeDeclaration().get().getName())
assertEquals(1, bar.getSuperClass().orElseThrow(() -> new RuntimeException("super class unexpectedly empty")).typeParametersValues().size())
assertEquals(true, bar.getSuperClass().orElseThrow(() -> new RuntimeException("super class unexpectedly empty")).typeParametersValues().get(0).isTypeVariable())
assertEquals("E", bar.getSuperClass().orElseThrow(() -> new RuntimeException("super class unexpectedly empty")).typeParametersValues().get(0).asTypeParameter().getName())
assertEquals(true, bar.getSuperClass().orElseThrow(() -> new RuntimeException("super class unexpectedly empty")).typeParametersValues().get(0).asTypeParameter().declaredOnType())
assertEquals(false, bar.getSuperClass().orElseThrow(() -> new RuntimeException("super class unexpectedly empty")).typeParametersValues().get(0).asTypeParameter().declaredOnMethod())
assertTrue(bar.getSuperClass().orElseThrow(() -> new RuntimeException("super class unexpectedly empty")).typeParametersValues().get(0).asTypeParameter().getQualifiedName().endsWith("Bar.E"))
assertEquals(true, foo.isClass())
assertEquals(true, bar.isClass())
assertEquals(true, fooField.getType().isTypeVariable())
assertEquals("E", fooField.getType().asTypeParameter().getName())
assertEquals(true, barField.getType().isReferenceType())
assertEquals(String.class.getCanonicalName(), barField.getType().asReferenceType().getQualifiedName())
assertEquals(3, foundCount)
assertEquals(1, locale.getConstructors().size())
assertEquals(ImmutableSet.of(Serializable.class.getCanonicalName(), Cloneable.class.getCanonicalName(), List.class.getCanonicalName(), RandomAccess.class.getCanonicalName()), arraylist.getInterfaces().stream().map(i -> i.getQualifiedName()).collect(Collectors.toSet()))
assertEquals(ImmutableSet.of(Serializable.class.getCanonicalName(), Cloneable.class.getCanonicalName(), List.class.getCanonicalName(), RandomAccess.class.getCanonicalName(), Collection.class.getCanonicalName(), Iterable.class.getCanonicalName()), arraylist.getAllInterfaces().stream().map(i -> i.getQualifiedName()).collect(Collectors.toSet()))
assertEquals(ImmutableSet.of(Object.class.getCanonicalName(), AbstractCollection.class.getCanonicalName(), AbstractList.class.getCanonicalName()), arraylist.getAllSuperClasses().stream().map(i -> i.getQualifiedName()).collect(Collectors.toSet()))
assertEquals(ImmutableSet.of(Object.class.getCanonicalName()), string.getAllSuperClasses().stream().map(i -> i.getQualifiedName()).collect(Collectors.toSet()))
assertEquals("java.util", arraylist.getPackageName())
assertEquals("java.lang", string.getPackageName())
assertEquals("ArrayList", arraylist.getClassName())
assertEquals("String", string.getClassName())
assertEquals("java.util.ArrayList", arraylist.getQualifiedName())
assertEquals("java.lang.String", string.getQualifiedName())
assertEquals(expected, actual)
assertEquals(expected, actual)
assertEquals(9, ancestors.size())
assertEquals(new ReferenceTypeImpl(new ReflectionInterfaceDeclaration(RandomAccess.class, typeResolver)), ancestors.get("java.util.RandomAccess"))
assertEquals(new ReferenceTypeImpl(new ReflectionClassDeclaration(AbstractCollection.class, typeResolver), ImmutableList.of(typeVariable)), ancestors.get("java.util.AbstractCollection"))
assertEquals(new ReferenceTypeImpl(new ReflectionInterfaceDeclaration(List.class, typeResolver), ImmutableList.of(typeVariable)), ancestors.get("java.util.List"))
assertEquals(new ReferenceTypeImpl(new ReflectionInterfaceDeclaration(Cloneable.class, typeResolver)), ancestors.get("java.lang.Cloneable"))
assertEquals(new ReferenceTypeImpl(new ReflectionInterfaceDeclaration(Collection.class, typeResolver), ImmutableList.of(typeVariable)), ancestors.get("java.util.Collection"))
assertEquals(new ReferenceTypeImpl(new ReflectionClassDeclaration(AbstractList.class, typeResolver), ImmutableList.of(typeVariable)), ancestors.get("java.util.AbstractList"))
assertEquals(new ReferenceTypeImpl(new ReflectionClassDeclaration(Object.class, typeResolver)), ancestors.get("java.lang.Object"))
assertEquals(new ReferenceTypeImpl(new ReflectionInterfaceDeclaration(Iterable.class, typeResolver), ImmutableList.of(typeVariable)), ancestors.get("java.lang.Iterable"))
assertEquals(new ReferenceTypeImpl(new ReflectionInterfaceDeclaration(Serializable.class, typeResolver)), ancestors.get("java.io.Serializable"))
assertEquals("com.github.javaparser.ast.Node", compilationUnit.getSuperClass().orElseThrow(() -> new RuntimeException("super class unexpectedly empty")).getQualifiedName())
assertEquals("com.github.javaparser.ast.body.CallableDeclaration", compilationUnit.getSuperClass().orElseThrow(() -> new RuntimeException("super class unexpectedly empty")).getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", compilationUnit.getSuperClass().orElseThrow(() -> new RuntimeException("super class unexpectedly empty")).typeParametersMap().getValueBySignature("com.github.javaparser.ast.body.CallableDeclaration.T").get().asReferenceType().getQualifiedName())
assertEquals(ImmutableSet.of("com.github.javaparser.ast.Node", "java.lang.Object"), cu.getAllSuperClasses().stream().map(i -> i.getQualifiedName()).collect(Collectors.toSet()))
assertEquals(4, constructorDeclaration.getAllSuperClasses().size())
assertEquals(true, constructorDeclaration.getAllSuperClasses().stream().anyMatch(s -> s.getQualifiedName().equals("com.github.javaparser.ast.body.CallableDeclaration")))
assertEquals(true, constructorDeclaration.getAllSuperClasses().stream().anyMatch(s -> s.getQualifiedName().equals("com.github.javaparser.ast.body.BodyDeclaration")))
assertEquals(true, constructorDeclaration.getAllSuperClasses().stream().anyMatch(s -> s.getQualifiedName().equals("com.github.javaparser.ast.Node")))
assertEquals(true, constructorDeclaration.getAllSuperClasses().stream().anyMatch(s -> s.getQualifiedName().equals("java.lang.Object")))
assertEquals("com.github.javaparser.ast.body.CallableDeclaration", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.body.CallableDeclaration.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.body.BodyDeclaration", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.body.BodyDeclaration.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.Node", ancestor.getQualifiedName())
assertEquals("java.lang.Object", ancestor.getQualifiedName())
assertEquals(ImmutableSet.of(), compilationUnit.getInterfaces().stream().map(i -> i.getQualifiedName()).collect(Collectors.toSet()))
assertEquals(ImmutableSet.of("com.github.javaparser.ast.nodeTypes.NodeWithExtends", "com.github.javaparser.ast.nodeTypes.modifiers.NodeWithFinalModifier", "com.github.javaparser.ast.nodeTypes.NodeWithImplements", "com.github.javaparser.ast.nodeTypes.modifiers.NodeWithAbstractModifier", "com.github.javaparser.ast.nodeTypes.NodeWithTypeParameters", "com.github.javaparser.resolution.Resolvable"), coid.getInterfaces().stream().map(i -> i.getQualifiedName()).collect(Collectors.toSet()))
assertEquals(8, constructorDeclaration.getInterfaces().size())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithBlockStmt", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithBlockStmt.N").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.modifiers.NodeWithAccessModifiers", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.modifiers.NodeWithAccessModifiers.N").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithJavadoc", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithJavadoc.N").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithSimpleName", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithSimpleName.N").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithParameters", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithParameters.N").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithThrownExceptions", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithThrownExceptions.N").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithTypeParameters", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithTypeParameters.N").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.resolution.Resolvable", interfaze.getQualifiedName())
assertEquals(ImmutableSet.of("java.lang.Cloneable", "com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.observer.Observable", "com.github.javaparser.HasParentNode", "com.github.javaparser.ast.nodeTypes.NodeWithRange", "com.github.javaparser.ast.nodeTypes.NodeWithTokenRange").stream().sorted().collect(Collectors.toList()), compilationUnit.getAllInterfaces().stream().map(i -> i.getQualifiedName()).sorted().collect(Collectors.toList()))
assertEquals(ImmutableSet.of("com.github.javaparser.ast.nodeTypes.NodeWithExtends", "com.github.javaparser.ast.nodeTypes.NodeWithAnnotations", "java.lang.Cloneable", "com.github.javaparser.HasParentNode", "com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.nodeTypes.NodeWithImplements", "com.github.javaparser.ast.nodeTypes.NodeWithSimpleName", "com.github.javaparser.ast.nodeTypes.NodeWithModifiers", "com.github.javaparser.ast.nodeTypes.NodeWithJavadoc", "com.github.javaparser.ast.nodeTypes.NodeWithTypeParameters", "com.github.javaparser.ast.nodeTypes.NodeWithMembers", "com.github.javaparser.ast.observer.Observable", "com.github.javaparser.ast.nodeTypes.modifiers.NodeWithFinalModifier", "com.github.javaparser.ast.nodeTypes.modifiers.NodeWithProtectedModifier", "com.github.javaparser.ast.nodeTypes.modifiers.NodeWithPrivateModifier", "com.github.javaparser.ast.nodeTypes.modifiers.NodeWithStaticModifier", "com.github.javaparser.ast.nodeTypes.modifiers.NodeWithAbstractModifier", "com.github.javaparser.ast.nodeTypes.modifiers.NodeWithPublicModifier", "com.github.javaparser.ast.nodeTypes.modifiers.NodeWithAccessModifiers", "com.github.javaparser.ast.nodeTypes.modifiers.NodeWithStrictfpModifier", "com.github.javaparser.ast.nodeTypes.NodeWithRange", "com.github.javaparser.ast.nodeTypes.NodeWithTokenRange", "com.github.javaparser.resolution.Resolvable"), coid.getAllInterfaces().stream().map(i -> i.getQualifiedName()).collect(Collectors.toSet()))
assertEquals(34, interfaces.size())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithBlockStmt", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithBlockStmt.N").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.modifiers.NodeWithAccessModifiers", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.modifiers.NodeWithAccessModifiers.N").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.modifiers.NodeWithPublicModifier", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.modifiers.NodeWithPublicModifier.N").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithModifiers", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithModifiers.N").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.modifiers.NodeWithPrivateModifier", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.modifiers.NodeWithPrivateModifier.N").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.modifiers.NodeWithProtectedModifier", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.modifiers.NodeWithProtectedModifier.N").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithJavadoc", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithJavadoc.N").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithSimpleName", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithSimpleName.N").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithParameters", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithParameters.N").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithThrownExceptions", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithThrownExceptions.N").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithTypeParameters", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithTypeParameters.N").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.resolution.Resolvable", interfaze.getQualifiedName())
assertEquals("java.lang.Cloneable", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.HasParentNode", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.Node", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.HasParentNode.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.observer.Observable", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.visitor.Visitable", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithRange", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.Node", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithRange.N").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithTokenRange", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.Node", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithTokenRange.N").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithAnnotations", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithAnnotations.N").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.modifiers.NodeWithAccessModifiers", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.modifiers.NodeWithAccessModifiers.N").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.modifiers.NodeWithPublicModifier", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.modifiers.NodeWithPublicModifier.N").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithModifiers", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithModifiers.N").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.modifiers.NodeWithPrivateModifier", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.modifiers.NodeWithPrivateModifier.N").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.modifiers.NodeWithProtectedModifier", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.modifiers.NodeWithProtectedModifier.N").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithDeclaration", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithSimpleName", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithSimpleName.N").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithParameters", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithParameters.N").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithThrownExceptions", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithThrownExceptions.N").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithTypeParameters", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithTypeParameters.N").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithJavadoc", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithJavadoc.N").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.modifiers.NodeWithAbstractModifier", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.modifiers.NodeWithAbstractModifier.N").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.modifiers.NodeWithStaticModifier", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.modifiers.NodeWithStaticModifier.N").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.modifiers.NodeWithFinalModifier", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.modifiers.NodeWithFinalModifier.N").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.modifiers.NodeWithStrictfpModifier", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.modifiers.NodeWithStrictfpModifier.N").get().asReferenceType().getQualifiedName())
assertEquals(9, constructorDeclaration.getAncestors().size())
assertEquals("com.github.javaparser.ast.body.CallableDeclaration", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.body.CallableDeclaration.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithBlockStmt", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithBlockStmt.N").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithJavadoc", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithJavadoc.N").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithParameters", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithParameters.N").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithSimpleName", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithSimpleName.N").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithThrownExceptions", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithThrownExceptions.N").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithTypeParameters", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithTypeParameters.N").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.modifiers.NodeWithAccessModifiers", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.modifiers.NodeWithAccessModifiers.N").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.resolution.Resolvable", ancestor.getQualifiedName())
assertEquals(ImmutableSet.of("java.lang.Cloneable", "com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.observer.Observable", "com.github.javaparser.ast.Node", "com.github.javaparser.ast.nodeTypes.NodeWithTokenRange", "java.lang.Object", "com.github.javaparser.HasParentNode", "com.github.javaparser.ast.nodeTypes.NodeWithRange"), cu.getAllAncestors().stream().map(i -> i.getQualifiedName()).collect(Collectors.toSet()))
assertEquals("com.github.javaparser.HasParentNode", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.Node", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.HasParentNode.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.Node", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.BodyDeclaration", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.body.BodyDeclaration.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.body.CallableDeclaration", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.body.CallableDeclaration.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithAnnotations", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithAnnotations.N").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithBlockStmt", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithBlockStmt.N").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithDeclaration", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithJavadoc", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithJavadoc.N").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithJavadoc", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithJavadoc.N").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithModifiers", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithModifiers.N").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithParameters", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithParameters.N").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithParameters", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithParameters.N").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithRange", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.Node", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithRange.N").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithSimpleName", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithSimpleName.N").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithSimpleName", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithSimpleName.N").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithThrownExceptions", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithThrownExceptions.N").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithThrownExceptions", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithThrownExceptions.N").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithTokenRange", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.Node", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithTokenRange.N").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithTypeParameters", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithTypeParameters.N").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithTypeParameters", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithTypeParameters.N").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.modifiers.NodeWithAbstractModifier", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.modifiers.NodeWithAbstractModifier.N").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.modifiers.NodeWithAccessModifiers", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.modifiers.NodeWithAccessModifiers.N").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.modifiers.NodeWithAccessModifiers", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.modifiers.NodeWithAccessModifiers.N").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.modifiers.NodeWithFinalModifier", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.modifiers.NodeWithFinalModifier.N").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.modifiers.NodeWithPrivateModifier", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.modifiers.NodeWithPrivateModifier.N").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.modifiers.NodeWithProtectedModifier", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.modifiers.NodeWithProtectedModifier.N").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.modifiers.NodeWithPublicModifier", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.modifiers.NodeWithPublicModifier.N").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.modifiers.NodeWithStaticModifier", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.modifiers.NodeWithStaticModifier.N").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.modifiers.NodeWithStrictfpModifier", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.modifiers.NodeWithStrictfpModifier.N").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.observer.Observable", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.visitor.Visitable", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.resolution.Resolvable", ancestor.getQualifiedName())
assertEquals("java.lang.Cloneable", ancestor.getQualifiedName())
assertEquals("java.lang.Object", ancestor.getQualifiedName())
assertTrue(ancestors.isEmpty())
assertEquals(Collections.singleton("InnerAnnotation"), annotation.internalTypes().stream().map(ResolvedDeclaration::getName).collect(Collectors.toSet()))
assertEquals("value", symbolReference.getCorrespondingDeclaration().getName())
assertEquals(Collections.singleton("FIELD_DECLARATION"), annotation.getAllFields().stream().map(ResolvedDeclaration::getName).collect(Collectors.toSet()))
assertEquals("WithField", annotation.getClassName())
assertTrue(annotation.isInheritable())
assertEquals(false, modifier.isClass())
assertEquals(false, modifier.isInterface())
assertEquals(true, modifier.isEnum())
assertEquals(false, modifier.isTypeParameter())
assertEquals(true, modifier.isType())
assertEquals(modifier, modifier.asType())
assertEquals(modifier, modifier.asEnum())
assertEquals("com.github.javaparser.symbolsolver.reflectionmodel", modifier.getPackageName())
assertEquals("MyModifier", modifier.getClassName())
assertEquals("com.github.javaparser.symbolsolver.reflectionmodel.MyModifier", modifier.getQualifiedName())
assertEquals(Collections.emptySet(), modifier.internalTypes())
assertEquals("arg0", equals.getParam(0).getName())
assertEquals("arg0", containsAll.getParam(0).getName())
assertEquals("arg0", subList.getParam(0).getName())
assertEquals("arg1", subList.getParam(1).getName())
assertEquals("arg0", myMethod.getParam(0).getName())
assertEquals("arg1", myMethod.getParam(1).getName())
assertFalse(annotation.isClass())
assertFalse(annotation.isClass())
assertFalse(annotation.isInheritable())
assertTrue(rcd.getField("value").isVolatile())
assertFalse(rcd.getField("serialVersionUID").isVolatile())
assertTrue(v.isVariable())
assertTimeoutPreemptively(Duration.ofMillis(1000L), () -> {
    String code = String.join(System.lineSeparator(), "package graph;", "public class Vertex {", "    public static void main(String[] args) {", "        System.out.println();", "    }", "}");
    ParseResult<CompilationUnit> parseResult = javaParser.parse(ParseStart.COMPILATION_UNIT, Providers.provider(code));
    assertTrue(parseResult.isSuccessful());
    assertTrue(parseResult.getResult().isPresent());
    List<MethodCallExpr> methodCallExprs = parseResult.getResult().get().findAll(MethodCallExpr.class);
    assertEquals(1, methodCallExprs.size());
    try {
        methodCallExprs.get(0).calculateResolvedType();
        fail("An UnsolvedSymbolException should be thrown");
    } catch (UnsolvedSymbolException ignored) {
    }
})
assertTrue(parseResult.isSuccessful())
assertTrue(parseResult.getResult().isPresent())
assertEquals("java.lang.String[]", resolvedType.describe())
assertEquals("java.lang.String[]", resolve.getType().describe())
assertNotNull(firstCache)
assertNotNull(secondCache)
assertNotEquals(firstCache, secondCache)
assertEquals(0, cache.size())
assertEquals(0, cache.size())
assertEquals(0, cache.size())
assertEquals(0, cache.size())
assertEquals(0, cache.size())
assertEquals(0, cache.size())
assertEquals(0, cache.size())
assertTrue(cache.isEmpty())
assertTrue(memoryCache.isEmpty())
assertTrue(memoryCache.contains("key"))
assertEquals(3, memoryCache.size())
assertTrue(memoryCache.contains(key1))
assertTrue(memoryCache.contains(key2))
assertTrue(memoryCache.contains(key3))
assertEquals(2, memoryCache.size())
assertTrue(memoryCache.contains(key1))
assertTrue(memoryCache.contains(key3))
assertEquals(1, memoryCache.size())
assertTrue(memoryCache.contains(key1))
assertEquals(0, memoryCache.size())
assertTrue(memoryCache.isEmpty())
assertTrue(memoryCache.isEmpty())
assertTrue(memoryCache.isEmpty())
assertTrue(adapter.isEmpty())
assertTrue(adapter.contains("key"))
assertEquals(3, adapter.size())
assertTrue(adapter.contains(key1))
assertTrue(adapter.contains(key2))
assertTrue(adapter.contains(key3))
assertEquals(2, adapter.size())
assertTrue(adapter.contains(key1))
assertTrue(adapter.contains(key3))
assertEquals(1, adapter.size())
assertTrue(adapter.contains(key1))
assertEquals(0, adapter.size())
assertTrue(adapter.isEmpty())
assertEquals(0, guavaCache.size())
assertEquals(guavaCache.size(), adapter.size())
assertEquals(1, guavaCache.size())
assertEquals(guavaCache.size(), adapter.size())
assertEquals(0, guavaCache.size())
assertEquals(guavaCache.size(), adapter.size())
assertTrue(adapter.isEmpty())
assertTrue(adapter.isEmpty())
assertTrue(fieldType.isReferenceType())
assertTrue(fieldType.asReferenceType().getTypeDeclaration().get().isEnum())
assertEquals("foo.bar.Foo", fieldType.asReferenceType().getQualifiedName())
assertEquals("toArray(new String[0]) resolved to A.toArray", String.format("%s resolved to %s", mces.get(0), mces.get(0).resolve().getQualifiedName()))
assertEquals("b.toArray(new String[0]) resolved to B.toArray", String.format("%s resolved to %s", mces.get(1), mces.get(1).resolve().getQualifiedName()))
assertEquals("java.util.function.Consumer<java.lang.Integer>", type.describe())
assertEquals("java.util.function.Consumer<java.lang.Integer>", type.describe())
assertEquals("foo.OtherClass.InnerClass", oce.calculateResolvedType().asReferenceType().getQualifiedName())
assertEquals("foo.OtherClass.InnerClass.InnerClass", oce.resolve().getQualifiedName())
assertEquals("java.util.Iterator<java.lang.Object>", resolvedType.describe())
assertEquals("java.util.stream.Stream<JavaTest.Solved>", javaParserFacade.getType((nodesByType.get(0)).getExpression().get()).describe())
assertEquals("char", javaParserFacade.getType(methods.get(0)).describe())
assertEquals("new Inner1().new Inner2()", exprs.get(0).toString())
assertEquals("MyClass.Inner1.Inner2", exprs.get(0).getType().resolve().describe())
assertEquals("new Inner1()", exprs.get(1).toString())
assertEquals("MyClass.Inner1", exprs.get(1).getType().resolve().describe())
assertEquals("com.foo.base.Widget", superClass.getQualifiedName())
assertEquals("Test.InnerClass.InnerClass(int, int)", exprs.get(0).resolve().getQualifiedSignature())
assertEquals("Test.InnerClass.InnerClass(int, int...)", exprs.get(1).resolve().getQualifiedSignature())
assertTrue(symbolSolver.classToResolvedType(String.class).equals(getExpressionType(typeResolver, new StringLiteralExpr(""))))
assertEquals(symbolSolver.classToResolvedType(int.class), getExpressionType(typeResolver, new IntegerLiteralExpr(2)))
assertTrue(symbolSolver.classToResolvedType(int.class).equals(getExpressionType(typeResolver, new MethodCallExpr(new StringLiteralExpr("hello"), "length"))))
assertEquals("java.lang.String[]", type.describe())
assertEquals("java.lang.String[]", javaParserFacade.getType(argRef).describe())
assertEquals("void", mce.get(0).calculateResolvedType().describe())
assertEquals("java.lang.String.length()", expr.resolve().getQualifiedSignature())
assertEquals(3, typeDeclaration.getAllFields().size())
assertEquals(ImmutableSet.of("a", "b", "c"), typeDeclaration.getAllFields().stream().map(ResolvedDeclaration::getName).collect(Collectors.toSet()))
assertEquals(3, typeDeclaration.getAllFields().size())
assertEquals(ImmutableSet.of("a", "b", "c"), typeDeclaration.getAllFields().stream().map(ResolvedDeclaration::getName).collect(Collectors.toSet()))
assertEquals("java.util.List<java.lang.String>", typeDeclaration.getField("b").getType().describe())
assertEquals("long", solvedCall.getParamType(0).describe())
assertEquals("double", resolvedValueDeclaration.getType().describe())
assertDoesNotThrow(() -> {
    doTest(root, file);
})
assertDoesNotThrow(() -> oce.resolve())
assertEquals("issue241.TypeWithMemberType.MemberInterface", typeName)
assertEquals("Simple.IndentType", fd.resolve().getType().describe())
assertEquals("Main.copyOf(U[], int, java.lang.Class<? extends T[]>)", mces.get(0).resolve().getQualifiedSignature())
assertTrue(optionalMethod.isPresent())
assertTrue(paramType.isReferenceType())
assertTrue(type instanceof ResolvedArrayType)
assertNotNull(symbol)
assertNotNull(symbol.getDeclaration())
assertTrue(symbol.getDeclaration().isPresent())
assertNotNull(symbol)
assertNotNull(symbol.getDeclaration())
assertNotNull(adaptedSymbol)
assertNotNull(adaptedSymbol.getDeclaration())
assertTrue(adaptedSymbol.getDeclaration().isPresent())
assertNotNull(adaptedSymbol)
assertNotNull(adaptedSymbol.getDeclaration())
assertNotNull(adaptedSymbol)
assertNotNull(adaptedSymbol.getDeclaration())
assertTrue(adaptedSymbol.getDeclaration().isPresent())
assertNotNull(symbol)
assertTrue(symbol.isSolved())
assertEquals(resolvedDeclaration, symbol.getCorrespondingDeclaration())
assertNotNull(symbol)
assertEquals(false, ResolvedVoidType.INSTANCE.isArray())
assertEquals(false, ResolvedVoidType.INSTANCE.isPrimitive())
assertEquals(false, ResolvedVoidType.INSTANCE.isNull())
assertEquals(false, ResolvedVoidType.INSTANCE.isReference())
assertEquals(false, ResolvedVoidType.INSTANCE.isReferenceType())
assertEquals(true, ResolvedVoidType.INSTANCE.isVoid())
assertEquals(false, ResolvedVoidType.INSTANCE.isTypeVariable())
assertEquals("void", ResolvedVoidType.INSTANCE.describe())
assertEquals(false, tpString.isAssignableBy(tpA))
assertEquals(false, NullType.INSTANCE.isArray())
assertEquals(false, NullType.INSTANCE.isPrimitive())
assertEquals(true, NullType.INSTANCE.isNull())
assertEquals(true, NullType.INSTANCE.isReference())
assertEquals(false, NullType.INSTANCE.isReferenceType())
assertEquals(false, NullType.INSTANCE.isVoid())
assertEquals(false, NullType.INSTANCE.isTypeVariable())
assertEquals("null", NullType.INSTANCE.describe())
assertEquals(1, ref1.typeParametersValues().size())
assertEquals(true, ref1.typeParametersValues().get(0).isTypeVariable())
assertEquals("E", ref1.typeParametersValues().get(0).asTypeParameter().getName())
assertEquals(false, object.isArray())
assertEquals(false, string.isArray())
assertEquals(false, listOfA.isArray())
assertEquals(false, listOfStrings.isArray())
assertEquals(false, object.isPrimitive())
assertEquals(false, string.isPrimitive())
assertEquals(false, listOfA.isPrimitive())
assertEquals(false, listOfStrings.isPrimitive())
assertEquals(false, object.isNull())
assertEquals(false, string.isNull())
assertEquals(false, listOfA.isNull())
assertEquals(false, listOfStrings.isNull())
assertEquals(true, object.isReference())
assertEquals(true, string.isReference())
assertEquals(true, listOfA.isReference())
assertEquals(true, listOfStrings.isReference())
assertEquals(true, object.isReferenceType())
assertEquals(true, string.isReferenceType())
assertEquals(true, listOfA.isReferenceType())
assertEquals(true, listOfStrings.isReferenceType())
assertEquals(false, object.isVoid())
assertEquals(false, string.isVoid())
assertEquals(false, listOfA.isVoid())
assertEquals(false, listOfStrings.isVoid())
assertEquals(false, object.isTypeVariable())
assertEquals(false, string.isTypeVariable())
assertEquals(false, listOfA.isTypeVariable())
assertEquals(false, listOfStrings.isTypeVariable())
assertTrue(object == object.asReferenceType())
assertTrue(string == string.asReferenceType())
assertTrue(listOfA == listOfA.asReferenceType())
assertTrue(listOfStrings == listOfStrings.asReferenceType())
assertEquals("java.lang.Object", object.describe())
assertEquals("java.lang.String", string.describe())
assertEquals("java.util.List<A>", listOfA.describe())
assertEquals("java.util.List<java.lang.String>", listOfStrings.describe())
assertTrue(object == object.replaceTypeVariables(tpA, object))
assertTrue(string == string.replaceTypeVariables(tpA, object))
assertEquals(listOfStrings, listOfStrings.replaceTypeVariables(tpA, object))
assertEquals(listOfStrings, listOfA.replaceTypeVariables(tpA, string))
assertEquals(true, object.isAssignableBy(string))
assertEquals(false, string.isAssignableBy(object))
assertEquals(false, listOfStrings.isAssignableBy(listOfA))
assertEquals(false, listOfA.isAssignableBy(listOfStrings))
assertEquals(false, object.isAssignableBy(ResolvedVoidType.INSTANCE))
assertEquals(false, string.isAssignableBy(ResolvedVoidType.INSTANCE))
assertEquals(false, listOfStrings.isAssignableBy(ResolvedVoidType.INSTANCE))
assertEquals(false, listOfA.isAssignableBy(ResolvedVoidType.INSTANCE))
assertEquals(true, object.isAssignableBy(NullType.INSTANCE))
assertEquals(true, string.isAssignableBy(NullType.INSTANCE))
assertEquals(true, listOfStrings.isAssignableBy(NullType.INSTANCE))
assertEquals(true, listOfA.isAssignableBy(NullType.INSTANCE))
assertEquals(true, numberType.isAssignableBy(ResolvedPrimitiveType.INT))
assertEquals(true, numberType.isAssignableBy(ResolvedPrimitiveType.DOUBLE))
assertEquals(true, numberType.isAssignableBy(ResolvedPrimitiveType.SHORT))
assertEquals(true, numberType.isAssignableBy(ResolvedPrimitiveType.LONG))
assertEquals(true, numberType.isAssignableBy(ResolvedPrimitiveType.FLOAT))
assertEquals(false, numberType.isAssignableBy(ResolvedPrimitiveType.BOOLEAN))
assertEquals(true, intType.isAssignableBy(ResolvedPrimitiveType.INT))
assertEquals(true, doubleType.isAssignableBy(ResolvedPrimitiveType.DOUBLE))
assertEquals(true, byteType.isAssignableBy(ResolvedPrimitiveType.BYTE))
assertEquals(true, shortType.isAssignableBy(ResolvedPrimitiveType.SHORT))
assertEquals(true, charType.isAssignableBy(ResolvedPrimitiveType.CHAR))
assertEquals(true, longType.isAssignableBy(ResolvedPrimitiveType.LONG))
assertEquals(true, booleanType.isAssignableBy(ResolvedPrimitiveType.BOOLEAN))
assertEquals(true, floatType.isAssignableBy(ResolvedPrimitiveType.FLOAT))
assertEquals(true, intType.isCorrespondingBoxingType(ResolvedPrimitiveType.INT.describe()))
assertEquals(true, doubleType.isCorrespondingBoxingType(ResolvedPrimitiveType.DOUBLE.describe()))
assertEquals(true, byteType.isCorrespondingBoxingType(ResolvedPrimitiveType.BYTE.describe()))
assertEquals(true, shortType.isCorrespondingBoxingType(ResolvedPrimitiveType.SHORT.describe()))
assertEquals(true, charType.isCorrespondingBoxingType(ResolvedPrimitiveType.CHAR.describe()))
assertEquals(true, longType.isCorrespondingBoxingType(ResolvedPrimitiveType.LONG.describe()))
assertEquals(true, booleanType.isCorrespondingBoxingType(ResolvedPrimitiveType.BOOLEAN.describe()))
assertEquals(true, floatType.isCorrespondingBoxingType(ResolvedPrimitiveType.FLOAT.describe()))
assertEquals(false, numberType.isCorrespondingBoxingType(ResolvedPrimitiveType.INT.describe()))
assertEquals(false, listOfStrings.isAssignableBy(listOfWildcardExtendsString))
assertEquals(false, listOfStrings.isAssignableBy(listOfWildcardExtendsString))
assertEquals(true, listOfWildcardExtendsString.isAssignableBy(listOfStrings))
assertEquals(false, listOfWildcardExtendsString.isAssignableBy(listOfWildcardSuperString))
assertEquals(true, listOfWildcardSuperString.isAssignableBy(listOfStrings))
assertEquals(false, listOfWildcardSuperString.isAssignableBy(listOfWildcardExtendsString))
assertEquals(true, collectionOfString.isAssignableBy(collectionOfString))
assertEquals(true, collectionOfString.isAssignableBy(listOfStrings))
assertEquals(true, collectionOfString.isAssignableBy(linkedListOfString))
assertEquals(false, listOfStrings.isAssignableBy(collectionOfString))
assertEquals(true, listOfStrings.isAssignableBy(listOfStrings))
assertEquals(true, listOfStrings.isAssignableBy(linkedListOfString))
assertEquals(false, linkedListOfString.isAssignableBy(collectionOfString))
assertEquals(false, linkedListOfString.isAssignableBy(listOfStrings))
assertEquals(true, linkedListOfString.isAssignableBy(linkedListOfString))
assertEquals(true, ioException.isAssignableBy(unionWithIOExceptionAsCommonAncestor))
assertEquals(false, ioException.isAssignableBy(unionWithThrowableAsCommonAncestor))
assertEquals(true, new ReferenceTypeImpl(new ReflectionClassDeclaration(MoreBazzing.class, typeSolver), ImmutableList.of(foo, bar)).isAssignableBy(new ReferenceTypeImpl(new ReflectionClassDeclaration(MoreBazzing.class, typeSolver), ImmutableList.of(foo, bar))))
assertEquals(true, new ReferenceTypeImpl(new ReflectionClassDeclaration(MoreBazzing.class, typeSolver), ImmutableList.of(ResolvedWildcard.extendsBound(foo), bar)).isAssignableBy(new ReferenceTypeImpl(new ReflectionClassDeclaration(MoreBazzing.class, typeSolver), ImmutableList.of(foo, bar))))
assertEquals(true, new ReferenceTypeImpl(new ReflectionClassDeclaration(MoreBazzing.class, typeSolver), ImmutableList.of(foo, ResolvedWildcard.extendsBound(bar))).isAssignableBy(new ReferenceTypeImpl(new ReflectionClassDeclaration(MoreBazzing.class, typeSolver), ImmutableList.of(foo, bar))))
assertEquals(true, new ReferenceTypeImpl(new ReflectionClassDeclaration(MoreBazzing.class, typeSolver), ImmutableList.of(ResolvedWildcard.extendsBound(foo), ResolvedWildcard.extendsBound(foo))).isAssignableBy(new ReferenceTypeImpl(new ReflectionClassDeclaration(MoreBazzing.class, typeSolver), ImmutableList.of(foo, bar))))
assertEquals(true, left.isAssignableBy(right))
assertEquals(true, left.isAssignableBy(right))
assertEquals(true, new ReferenceTypeImpl(new ReflectionClassDeclaration(Bazzer.class, typeSolver), ImmutableList.of(string, string, string)).isAssignableBy(new ReferenceTypeImpl(new ReflectionClassDeclaration(MoreBazzing.class, typeSolver), ImmutableList.of(string, string))))
assertEquals(true, new ReferenceTypeImpl(new ReflectionClassDeclaration(Bazzer.class, typeSolver), ImmutableList.of(bar, string, foo)).isAssignableBy(new ReferenceTypeImpl(new ReflectionClassDeclaration(MoreBazzing.class, typeSolver), ImmutableList.of(foo, bar))))
assertEquals(true, new ReferenceTypeImpl(new ReflectionClassDeclaration(Bazzer.class, typeSolver), ImmutableList.of(foo, string, bar)).isAssignableBy(new ReferenceTypeImpl(new ReflectionClassDeclaration(MoreBazzing.class, typeSolver), ImmutableList.of(bar, foo))))
assertEquals(false, new ReferenceTypeImpl(new ReflectionClassDeclaration(Bazzer.class, typeSolver), ImmutableList.of(bar, string, foo)).isAssignableBy(new ReferenceTypeImpl(new ReflectionClassDeclaration(MoreBazzing.class, typeSolver), ImmutableList.of(bar, foo))))
assertEquals(false, new ReferenceTypeImpl(new ReflectionClassDeclaration(Bazzer.class, typeSolver), ImmutableList.of(bar, string, foo)).isAssignableBy(new ReferenceTypeImpl(new ReflectionClassDeclaration(MoreBazzing.class, typeSolver), ImmutableList.of(bar, foo))))
assertEquals(false, new ReferenceTypeImpl(new ReflectionClassDeclaration(Bazzer.class, typeSolver), ImmutableList.of(foo, object, bar)).isAssignableBy(new ReferenceTypeImpl(new ReflectionClassDeclaration(MoreBazzing.class, typeSolver), ImmutableList.of(bar, foo))))
assertEquals(false, charSequence.isAssignableBy(object))
assertEquals(true, object.isAssignableBy(charSequence))
assertEquals(true, ref.getFieldType("elements").isPresent())
assertEquals(true, ref.getFieldType("elements").get().isReferenceType())
assertEquals(List.class.getCanonicalName(), ref.getFieldType("elements").get().asReferenceType().getQualifiedName())
assertEquals(1, ref.getFieldType("elements").get().asReferenceType().typeParametersValues().size())
assertEquals(true, ref.getFieldType("elements").get().asReferenceType().typeParametersValues().get(0).isTypeVariable())
assertEquals("A", ref.getFieldType("elements").get().asReferenceType().typeParametersValues().get(0).asTypeParameter().getName())
assertEquals(true, ref.getFieldType("elements").isPresent())
assertEquals(true, ref.getFieldType("elements").get().isReferenceType())
assertEquals(List.class.getCanonicalName(), ref.getFieldType("elements").get().asReferenceType().getQualifiedName())
assertEquals(1, ref.getFieldType("elements").get().asReferenceType().typeParametersValues().size())
assertEquals(true, ref.getFieldType("elements").get().asReferenceType().typeParametersValues().get(0).isReferenceType())
assertEquals(String.class.getCanonicalName(), ref.getFieldType("elements").get().asReferenceType().typeParametersValues().get(0).asReferenceType().getQualifiedName())
assertEquals(false, ref.getFieldType("bar").isPresent())
assertEquals(false, ref.getFieldType("bar").isPresent())
assertEquals(Optional.of(string), arrayListOfString.typeParamValue(arraylist.getTypeParameters().get(0)))
assertEquals(Optional.of(string), arrayListOfString.typeParamValue(abstractList.getTypeParameters().get(0)))
assertEquals(Optional.of(string), arrayListOfString.typeParamValue(abstractCollection.getTypeParameters().get(0)))
assertEquals(Optional.of(string), arrayListOfString.typeParamValue(list.getTypeParameters().get(0)))
assertEquals(Optional.of(string), arrayListOfString.typeParamValue(collection.getTypeParameters().get(0)))
assertEquals(Optional.of(string), arrayListOfString.typeParamValue(iterable.getTypeParameters().get(0)))
assertEquals(9, ancestors.size())
assertEquals(new ReferenceTypeImpl(new ReflectionInterfaceDeclaration(RandomAccess.class, typeResolver)), ancestors.get("java.util.RandomAccess"))
assertEquals(new ReferenceTypeImpl(new ReflectionClassDeclaration(AbstractCollection.class, typeResolver), ImmutableList.of(tv)), ancestors.get("java.util.AbstractCollection"))
assertEquals(new ReferenceTypeImpl(new ReflectionInterfaceDeclaration(List.class, typeResolver), ImmutableList.of(tv)), ancestors.get("java.util.List"))
assertEquals(new ReferenceTypeImpl(new ReflectionInterfaceDeclaration(Cloneable.class, typeResolver)), ancestors.get("java.lang.Cloneable"))
assertEquals(new ReferenceTypeImpl(new ReflectionInterfaceDeclaration(Collection.class, typeResolver), ImmutableList.of(tv)), ancestors.get("java.util.Collection"))
assertEquals(new ReferenceTypeImpl(new ReflectionClassDeclaration(AbstractList.class, typeResolver), ImmutableList.of(tv)), ancestors.get("java.util.AbstractList"))
assertEquals(new ReferenceTypeImpl(new ReflectionClassDeclaration(Object.class, typeResolver)), ancestors.get("java.lang.Object"))
assertEquals(new ReferenceTypeImpl(new ReflectionInterfaceDeclaration(Iterable.class, typeResolver), ImmutableList.of(tv)), ancestors.get("java.lang.Iterable"))
assertEquals(new ReferenceTypeImpl(new ReflectionInterfaceDeclaration(Serializable.class, typeResolver)), ancestors.get("java.io.Serializable"))
assertEquals(2, ancestors.size())
assertEquals(new ReferenceTypeImpl(new ReflectionInterfaceDeclaration(Collection.class, typeResolver), ImmutableList.of(string)), ancestors.get("java.util.Collection"))
assertEquals(new ReferenceTypeImpl(new ReflectionInterfaceDeclaration(Iterable.class, typeResolver), ImmutableList.of(string)), ancestors.get("java.lang.Iterable"))
assertEquals(3, ancestors.size())
assertEquals(new ReferenceTypeImpl(new ReflectionInterfaceDeclaration(Collection.class, typeResolver), ImmutableList.of(string)), ancestors.get("java.util.Collection"))
assertEquals(new ReferenceTypeImpl(new ReflectionClassDeclaration(Object.class, typeResolver)), ancestors.get("java.lang.Object"))
assertEquals(new ReferenceTypeImpl(new ReflectionInterfaceDeclaration(Iterable.class, typeResolver), ImmutableList.of(string)), ancestors.get("java.lang.Iterable"))
assertEquals(5, ancestors.size())
assertEquals(new ReferenceTypeImpl(new ReflectionClassDeclaration(AbstractCollection.class, typeResolver), ImmutableList.of(string)), ancestors.get("java.util.AbstractCollection"))
assertEquals(new ReferenceTypeImpl(new ReflectionInterfaceDeclaration(List.class, typeResolver), ImmutableList.of(string)), ancestors.get("java.util.List"))
assertEquals(new ReferenceTypeImpl(new ReflectionInterfaceDeclaration(Collection.class, typeResolver), ImmutableList.of(string)), ancestors.get("java.util.Collection"))
assertEquals(new ReferenceTypeImpl(new ReflectionClassDeclaration(Object.class, typeResolver)), ancestors.get("java.lang.Object"))
assertEquals(new ReferenceTypeImpl(new ReflectionInterfaceDeclaration(Iterable.class, typeResolver), ImmutableList.of(string)), ancestors.get("java.lang.Iterable"))
assertEquals(9, ancestors.size())
assertEquals(new ReferenceTypeImpl(new ReflectionInterfaceDeclaration(RandomAccess.class, typeResolver)), ancestors.get("java.util.RandomAccess"))
assertEquals(new ReferenceTypeImpl(new ReflectionClassDeclaration(AbstractCollection.class, typeResolver), ImmutableList.of(string)), ancestors.get("java.util.AbstractCollection"))
assertEquals(new ReferenceTypeImpl(new ReflectionInterfaceDeclaration(List.class, typeResolver), ImmutableList.of(string)), ancestors.get("java.util.List"))
assertEquals(new ReferenceTypeImpl(new ReflectionInterfaceDeclaration(Cloneable.class, typeResolver)), ancestors.get("java.lang.Cloneable"))
assertEquals(new ReferenceTypeImpl(new ReflectionInterfaceDeclaration(Collection.class, typeResolver), ImmutableList.of(string)), ancestors.get("java.util.Collection"))
assertEquals(new ReferenceTypeImpl(new ReflectionClassDeclaration(AbstractList.class, typeResolver), ImmutableList.of(string)), ancestors.get("java.util.AbstractList"))
assertEquals(new ReferenceTypeImpl(new ReflectionClassDeclaration(Object.class, typeResolver)), ancestors.get("java.lang.Object"))
assertEquals(new ReferenceTypeImpl(new ReflectionInterfaceDeclaration(Iterable.class, typeResolver), ImmutableList.of(string)), ancestors.get("java.lang.Iterable"))
assertEquals(new ReferenceTypeImpl(new ReflectionInterfaceDeclaration(Serializable.class, typeResolver)), ancestors.get("java.io.Serializable"))
assertEquals(1, stream.typeParametersValues().size())
assertEquals(new ResolvedTypeVariable(new ReflectionInterfaceDeclaration(Stream.class, typeResolver).getTypeParameters().get(0)), stream.typeParametersValues().get(0))
assertEquals("java.util.stream.Stream<java.lang.String>", streamReplaced.describe())
assertEquals("java.util.stream.Stream<java.lang.String>", streamReplaced.describe())
assertEquals(0, object.getDirectAncestors().size())
assertEquals(0, iterableOfString.getDirectAncestors().size())
assertEquals(1, collectionOfString.getDirectAncestors().size())
assertEquals("java.lang.Iterable", ancestor1.getQualifiedName())
assertEquals(1, ancestor1.getTypeParametersMap().size())
assertEquals("T", ancestor1.getTypeParametersMap().get(0).a.getName())
assertEquals("java.lang.String", ancestor1.getTypeParametersMap().get(0).b.describe())
assertEquals(new HashSet<>(), ancestors)
assertEquals(3, rtA.getDeclaredFields().size())
assertTrue(rtA.getDeclaredFields().stream().anyMatch(f -> f.getName().equals("i")))
assertTrue(rtA.getDeclaredFields().stream().anyMatch(f -> f.getName().equals("c")))
assertTrue(rtA.getDeclaredFields().stream().anyMatch(f -> f.getName().equals("l")))
assertEquals(2, rtB.getDeclaredFields().size())
assertTrue(rtB.getDeclaredFields().stream().anyMatch(f -> f.getName().equals("f")))
assertTrue(rtB.getDeclaredFields().stream().anyMatch(f -> f.getName().equals("b")))
assertEquals(2, rtA.getAllFieldsVisibleToInheritors().size())
assertTrue(rtA.getAllFieldsVisibleToInheritors().stream().anyMatch(f -> f.getName().equals("c")))
assertTrue(rtA.getAllFieldsVisibleToInheritors().stream().anyMatch(f -> f.getName().equals("l")))
assertEquals(3, rtB.getAllFieldsVisibleToInheritors().size())
assertTrue(rtB.getAllFieldsVisibleToInheritors().stream().anyMatch(f -> f.getName().equals("c")))
assertTrue(rtB.getAllFieldsVisibleToInheritors().stream().anyMatch(f -> f.getName().equals("l")))
assertTrue(rtB.getAllFieldsVisibleToInheritors().stream().anyMatch(f -> f.getName().equals("b")))
assertEquals(expected, types.get(0).erasure())
assertTrue(rt.asReferenceType().isRawType())
assertTrue(erasedType.asReferenceType().typeParametersValues().isEmpty())
assertEquals(expected, erasedType.describe())
assertEquals(expected, genericList.erasure().describe())
assertEquals(expected, genericList.erasure().describe())
assertEquals(expected, rt.erasure().describe())
assertEquals(expectedA, typeA.erasure().describe())
assertEquals(expectedC, typeC.erasure().describe())
assertEquals(expectedErasedCType, typeC.erasure())
assertEquals(true, arrayOfBooleans.isArray())
assertEquals(true, arrayOfStrings.isArray())
assertEquals(false, arrayOfBooleans.isPrimitive())
assertEquals(false, arrayOfStrings.isPrimitive())
assertEquals(false, arrayOfBooleans.isNull())
assertEquals(false, arrayOfStrings.isNull())
assertEquals(true, arrayOfBooleans.isReference())
assertEquals(true, arrayOfStrings.isReference())
assertEquals(false, arrayOfBooleans.isReferenceType())
assertEquals(false, arrayOfStrings.isReferenceType())
assertEquals(false, arrayOfBooleans.isVoid())
assertEquals(false, arrayOfStrings.isVoid())
assertEquals(false, arrayOfBooleans.isTypeVariable())
assertEquals(false, arrayOfStrings.isTypeVariable())
assertSame(arrayOfBooleans, arrayOfBooleans.asArrayType())
assertSame(arrayOfStrings, arrayOfStrings.asArrayType())
assertSame(arrayOfListOfA, arrayOfListOfA.asArrayType())
assertEquals("boolean[]", arrayOfBooleans.describe())
assertEquals("java.lang.String[]", arrayOfStrings.describe())
assertSame(arrayOfBooleans, arrayOfBooleans.replaceTypeVariables(tpA, OBJECT))
assertSame(arrayOfStrings, arrayOfStrings.replaceTypeVariables(tpA, OBJECT))
assertEquals(arrayOfListOfStrings, arrayOfListOfStrings.replaceTypeVariables(tpA, OBJECT))
assertTrue(arrayOfListOfA.replaceTypeVariables(tpA, OBJECT).isArray())
assertEquals(ImmutableList.of(OBJECT), arrayOfListOfA.replaceTypeVariables(tpA, OBJECT).asArrayType().getComponentType().asReferenceType().typeParametersValues())
assertEquals(new ReflectionInterfaceDeclaration(List.class, typeSolver), arrayOfListOfA.replaceTypeVariables(tpA, OBJECT).asArrayType().getComponentType().asReferenceType().getTypeDeclaration().get())
assertEquals(new ReferenceTypeImpl(new ReflectionInterfaceDeclaration(List.class, typeSolver), ImmutableList.of(OBJECT)), arrayOfListOfA.replaceTypeVariables(tpA, OBJECT).asArrayType().getComponentType())
assertEquals(arrayOfListOfObjects, arrayOfListOfA.replaceTypeVariables(tpA, OBJECT))
assertEquals(arrayOfListOfStrings, arrayOfListOfA.replaceTypeVariables(tpA, STRING))
assertNotSame(arrayOfListOfA, arrayOfListOfA.replaceTypeVariables(tpA, OBJECT))
assertEquals(false, arrayOfBooleans.isAssignableBy(OBJECT))
assertEquals(false, arrayOfBooleans.isAssignableBy(STRING))
assertEquals(false, arrayOfBooleans.isAssignableBy(ResolvedPrimitiveType.BOOLEAN))
assertEquals(false, arrayOfBooleans.isAssignableBy(ResolvedVoidType.INSTANCE))
assertEquals(true, arrayOfBooleans.isAssignableBy(arrayOfBooleans))
assertEquals(false, arrayOfBooleans.isAssignableBy(arrayOfStrings))
assertEquals(false, arrayOfBooleans.isAssignableBy(arrayOfListOfA))
assertEquals(false, arrayOfBooleans.isAssignableBy(arrayOfListOfStrings))
assertEquals(false, arrayOfStrings.isAssignableBy(arrayOfBooleans))
assertEquals(true, arrayOfStrings.isAssignableBy(arrayOfStrings))
assertEquals(false, arrayOfStrings.isAssignableBy(arrayOfListOfA))
assertEquals(false, arrayOfStrings.isAssignableBy(arrayOfListOfStrings))
assertEquals(false, arrayOfListOfA.isAssignableBy(arrayOfBooleans))
assertEquals(false, arrayOfListOfA.isAssignableBy(arrayOfStrings))
assertEquals(true, arrayOfListOfA.isAssignableBy(arrayOfListOfA))
assertEquals(false, arrayOfListOfA.isAssignableBy(arrayOfListOfStrings))
assertEquals(false, arrayOfListOfStrings.isAssignableBy(arrayOfBooleans))
assertEquals(false, arrayOfListOfStrings.isAssignableBy(arrayOfStrings))
assertEquals(false, arrayOfListOfStrings.isAssignableBy(arrayOfListOfA))
assertEquals(true, arrayOfListOfStrings.isAssignableBy(arrayOfListOfStrings))
assertEquals(true, foo.isAssignableBy(foo))
assertEquals(true, foo.isAssignableBy(baz))
assertEquals(false, foo.isAssignableBy(bar))
assertEquals(true, lazyFoo.isAssignableBy(lazyFoo))
assertEquals(true, lazyFoo.isAssignableBy(lazyBaz))
assertEquals(false, lazyFoo.isAssignableBy(lazyBar))
assertEquals(true, foo.isAssignableBy(lazyFoo))
assertEquals(true, foo.isAssignableBy(lazyBaz))
assertEquals(false, foo.isAssignableBy(lazyBar))
assertEquals("boolean", ResolvedPrimitiveType.BOOLEAN.describe())
assertEquals("char", ResolvedPrimitiveType.CHAR.describe())
assertEquals("byte", ResolvedPrimitiveType.BYTE.describe())
assertEquals("short", ResolvedPrimitiveType.SHORT.describe())
assertEquals("int", ResolvedPrimitiveType.INT.describe())
assertEquals("long", ResolvedPrimitiveType.LONG.describe())
assertEquals("float", ResolvedPrimitiveType.FLOAT.describe())
assertEquals("double", ResolvedPrimitiveType.DOUBLE.describe())
assertEquals(true, ResolvedPrimitiveType.BOOLEAN.isAssignableBy(ResolvedPrimitiveType.BOOLEAN))
assertEquals(false, ResolvedPrimitiveType.BOOLEAN.isAssignableBy(ResolvedPrimitiveType.CHAR))
assertEquals(false, ResolvedPrimitiveType.BOOLEAN.isAssignableBy(ResolvedPrimitiveType.BYTE))
assertEquals(false, ResolvedPrimitiveType.BOOLEAN.isAssignableBy(ResolvedPrimitiveType.SHORT))
assertEquals(false, ResolvedPrimitiveType.BOOLEAN.isAssignableBy(ResolvedPrimitiveType.INT))
assertEquals(false, ResolvedPrimitiveType.BOOLEAN.isAssignableBy(ResolvedPrimitiveType.LONG))
assertEquals(false, ResolvedPrimitiveType.BOOLEAN.isAssignableBy(ResolvedPrimitiveType.FLOAT))
assertEquals(false, ResolvedPrimitiveType.BOOLEAN.isAssignableBy(ResolvedPrimitiveType.DOUBLE))
assertEquals(false, ResolvedPrimitiveType.CHAR.isAssignableBy(ResolvedPrimitiveType.BOOLEAN))
assertEquals(true, ResolvedPrimitiveType.CHAR.isAssignableBy(ResolvedPrimitiveType.CHAR))
assertEquals(false, ResolvedPrimitiveType.CHAR.isAssignableBy(ResolvedPrimitiveType.BYTE))
assertEquals(false, ResolvedPrimitiveType.CHAR.isAssignableBy(ResolvedPrimitiveType.SHORT))
assertEquals(false, ResolvedPrimitiveType.CHAR.isAssignableBy(ResolvedPrimitiveType.INT))
assertEquals(false, ResolvedPrimitiveType.CHAR.isAssignableBy(ResolvedPrimitiveType.LONG))
assertEquals(false, ResolvedPrimitiveType.CHAR.isAssignableBy(ResolvedPrimitiveType.FLOAT))
assertEquals(false, ResolvedPrimitiveType.CHAR.isAssignableBy(ResolvedPrimitiveType.DOUBLE))
assertEquals(false, ResolvedPrimitiveType.BYTE.isAssignableBy(ResolvedPrimitiveType.BOOLEAN))
assertEquals(false, ResolvedPrimitiveType.BYTE.isAssignableBy(ResolvedPrimitiveType.CHAR))
assertEquals(true, ResolvedPrimitiveType.BYTE.isAssignableBy(ResolvedPrimitiveType.BYTE))
assertEquals(false, ResolvedPrimitiveType.BYTE.isAssignableBy(ResolvedPrimitiveType.SHORT))
assertEquals(false, ResolvedPrimitiveType.BYTE.isAssignableBy(ResolvedPrimitiveType.INT))
assertEquals(false, ResolvedPrimitiveType.BYTE.isAssignableBy(ResolvedPrimitiveType.LONG))
assertEquals(false, ResolvedPrimitiveType.BYTE.isAssignableBy(ResolvedPrimitiveType.FLOAT))
assertEquals(false, ResolvedPrimitiveType.BYTE.isAssignableBy(ResolvedPrimitiveType.DOUBLE))
assertEquals(false, ResolvedPrimitiveType.SHORT.isAssignableBy(ResolvedPrimitiveType.BOOLEAN))
assertEquals(false, ResolvedPrimitiveType.SHORT.isAssignableBy(ResolvedPrimitiveType.CHAR))
assertEquals(true, ResolvedPrimitiveType.SHORT.isAssignableBy(ResolvedPrimitiveType.BYTE))
assertEquals(true, ResolvedPrimitiveType.SHORT.isAssignableBy(ResolvedPrimitiveType.SHORT))
assertEquals(false, ResolvedPrimitiveType.SHORT.isAssignableBy(ResolvedPrimitiveType.INT))
assertEquals(false, ResolvedPrimitiveType.SHORT.isAssignableBy(ResolvedPrimitiveType.LONG))
assertEquals(false, ResolvedPrimitiveType.SHORT.isAssignableBy(ResolvedPrimitiveType.FLOAT))
assertEquals(false, ResolvedPrimitiveType.SHORT.isAssignableBy(ResolvedPrimitiveType.DOUBLE))
assertEquals(false, ResolvedPrimitiveType.INT.isAssignableBy(ResolvedPrimitiveType.BOOLEAN))
assertEquals(true, ResolvedPrimitiveType.INT.isAssignableBy(ResolvedPrimitiveType.CHAR))
assertEquals(true, ResolvedPrimitiveType.INT.isAssignableBy(ResolvedPrimitiveType.BYTE))
assertEquals(true, ResolvedPrimitiveType.INT.isAssignableBy(ResolvedPrimitiveType.SHORT))
assertEquals(true, ResolvedPrimitiveType.INT.isAssignableBy(ResolvedPrimitiveType.INT))
assertEquals(false, ResolvedPrimitiveType.INT.isAssignableBy(ResolvedPrimitiveType.LONG))
assertEquals(false, ResolvedPrimitiveType.INT.isAssignableBy(ResolvedPrimitiveType.FLOAT))
assertEquals(false, ResolvedPrimitiveType.INT.isAssignableBy(ResolvedPrimitiveType.DOUBLE))
assertEquals(false, ResolvedPrimitiveType.LONG.isAssignableBy(ResolvedPrimitiveType.BOOLEAN))
assertEquals(true, ResolvedPrimitiveType.LONG.isAssignableBy(ResolvedPrimitiveType.CHAR))
assertEquals(true, ResolvedPrimitiveType.LONG.isAssignableBy(ResolvedPrimitiveType.BYTE))
assertEquals(true, ResolvedPrimitiveType.LONG.isAssignableBy(ResolvedPrimitiveType.SHORT))
assertEquals(true, ResolvedPrimitiveType.LONG.isAssignableBy(ResolvedPrimitiveType.INT))
assertEquals(true, ResolvedPrimitiveType.LONG.isAssignableBy(ResolvedPrimitiveType.LONG))
assertEquals(false, ResolvedPrimitiveType.LONG.isAssignableBy(ResolvedPrimitiveType.FLOAT))
assertEquals(false, ResolvedPrimitiveType.LONG.isAssignableBy(ResolvedPrimitiveType.DOUBLE))
assertEquals(false, ResolvedPrimitiveType.FLOAT.isAssignableBy(ResolvedPrimitiveType.BOOLEAN))
assertEquals(true, ResolvedPrimitiveType.FLOAT.isAssignableBy(ResolvedPrimitiveType.CHAR))
assertEquals(true, ResolvedPrimitiveType.FLOAT.isAssignableBy(ResolvedPrimitiveType.BYTE))
assertEquals(true, ResolvedPrimitiveType.FLOAT.isAssignableBy(ResolvedPrimitiveType.SHORT))
assertEquals(true, ResolvedPrimitiveType.FLOAT.isAssignableBy(ResolvedPrimitiveType.INT))
assertEquals(true, ResolvedPrimitiveType.FLOAT.isAssignableBy(ResolvedPrimitiveType.LONG))
assertEquals(true, ResolvedPrimitiveType.FLOAT.isAssignableBy(ResolvedPrimitiveType.FLOAT))
assertEquals(false, ResolvedPrimitiveType.FLOAT.isAssignableBy(ResolvedPrimitiveType.DOUBLE))
assertEquals(false, ResolvedPrimitiveType.DOUBLE.isAssignableBy(ResolvedPrimitiveType.BOOLEAN))
assertEquals(true, ResolvedPrimitiveType.DOUBLE.isAssignableBy(ResolvedPrimitiveType.CHAR))
assertEquals(true, ResolvedPrimitiveType.DOUBLE.isAssignableBy(ResolvedPrimitiveType.BYTE))
assertEquals(true, ResolvedPrimitiveType.DOUBLE.isAssignableBy(ResolvedPrimitiveType.SHORT))
assertEquals(true, ResolvedPrimitiveType.DOUBLE.isAssignableBy(ResolvedPrimitiveType.INT))
assertEquals(true, ResolvedPrimitiveType.DOUBLE.isAssignableBy(ResolvedPrimitiveType.LONG))
assertEquals(true, ResolvedPrimitiveType.DOUBLE.isAssignableBy(ResolvedPrimitiveType.FLOAT))
assertEquals(true, ResolvedPrimitiveType.DOUBLE.isAssignableBy(ResolvedPrimitiveType.DOUBLE))
assertEquals(true, ResolvedPrimitiveType.BOOLEAN.isAssignableBy(booleanBox))
assertEquals(false, ResolvedPrimitiveType.BOOLEAN.isAssignableBy(characterBox))
assertEquals(false, ResolvedPrimitiveType.BOOLEAN.isAssignableBy(byteBox))
assertEquals(false, ResolvedPrimitiveType.BOOLEAN.isAssignableBy(shortBox))
assertEquals(false, ResolvedPrimitiveType.BOOLEAN.isAssignableBy(integerBox))
assertEquals(false, ResolvedPrimitiveType.BOOLEAN.isAssignableBy(longBox))
assertEquals(false, ResolvedPrimitiveType.BOOLEAN.isAssignableBy(floatBox))
assertEquals(false, ResolvedPrimitiveType.BOOLEAN.isAssignableBy(doubleBox))
assertEquals(false, ResolvedPrimitiveType.CHAR.isAssignableBy(booleanBox))
assertEquals(true, ResolvedPrimitiveType.CHAR.isAssignableBy(characterBox))
assertEquals(false, ResolvedPrimitiveType.CHAR.isAssignableBy(byteBox))
assertEquals(false, ResolvedPrimitiveType.CHAR.isAssignableBy(shortBox))
assertEquals(false, ResolvedPrimitiveType.CHAR.isAssignableBy(integerBox))
assertEquals(false, ResolvedPrimitiveType.CHAR.isAssignableBy(longBox))
assertEquals(false, ResolvedPrimitiveType.CHAR.isAssignableBy(floatBox))
assertEquals(false, ResolvedPrimitiveType.CHAR.isAssignableBy(doubleBox))
assertEquals(false, ResolvedPrimitiveType.BYTE.isAssignableBy(booleanBox))
assertEquals(false, ResolvedPrimitiveType.BYTE.isAssignableBy(characterBox))
assertEquals(true, ResolvedPrimitiveType.BYTE.isAssignableBy(byteBox))
assertEquals(false, ResolvedPrimitiveType.BYTE.isAssignableBy(shortBox))
assertEquals(false, ResolvedPrimitiveType.BYTE.isAssignableBy(integerBox))
assertEquals(false, ResolvedPrimitiveType.BYTE.isAssignableBy(longBox))
assertEquals(false, ResolvedPrimitiveType.BYTE.isAssignableBy(floatBox))
assertEquals(false, ResolvedPrimitiveType.BYTE.isAssignableBy(doubleBox))
assertEquals(false, ResolvedPrimitiveType.SHORT.isAssignableBy(booleanBox))
assertEquals(false, ResolvedPrimitiveType.SHORT.isAssignableBy(characterBox))
assertEquals(true, ResolvedPrimitiveType.SHORT.isAssignableBy(byteBox))
assertEquals(true, ResolvedPrimitiveType.SHORT.isAssignableBy(shortBox))
assertEquals(false, ResolvedPrimitiveType.SHORT.isAssignableBy(integerBox))
assertEquals(false, ResolvedPrimitiveType.SHORT.isAssignableBy(longBox))
assertEquals(false, ResolvedPrimitiveType.SHORT.isAssignableBy(floatBox))
assertEquals(false, ResolvedPrimitiveType.SHORT.isAssignableBy(doubleBox))
assertEquals(false, ResolvedPrimitiveType.INT.isAssignableBy(booleanBox))
assertEquals(true, ResolvedPrimitiveType.INT.isAssignableBy(characterBox))
assertEquals(true, ResolvedPrimitiveType.INT.isAssignableBy(byteBox))
assertEquals(true, ResolvedPrimitiveType.INT.isAssignableBy(shortBox))
assertEquals(true, ResolvedPrimitiveType.INT.isAssignableBy(integerBox))
assertEquals(false, ResolvedPrimitiveType.INT.isAssignableBy(longBox))
assertEquals(false, ResolvedPrimitiveType.INT.isAssignableBy(floatBox))
assertEquals(false, ResolvedPrimitiveType.INT.isAssignableBy(doubleBox))
assertEquals(false, ResolvedPrimitiveType.LONG.isAssignableBy(booleanBox))
assertEquals(true, ResolvedPrimitiveType.LONG.isAssignableBy(characterBox))
assertEquals(true, ResolvedPrimitiveType.LONG.isAssignableBy(byteBox))
assertEquals(true, ResolvedPrimitiveType.LONG.isAssignableBy(shortBox))
assertEquals(true, ResolvedPrimitiveType.LONG.isAssignableBy(integerBox))
assertEquals(true, ResolvedPrimitiveType.LONG.isAssignableBy(longBox))
assertEquals(false, ResolvedPrimitiveType.LONG.isAssignableBy(floatBox))
assertEquals(false, ResolvedPrimitiveType.LONG.isAssignableBy(doubleBox))
assertEquals(false, ResolvedPrimitiveType.FLOAT.isAssignableBy(booleanBox))
assertEquals(true, ResolvedPrimitiveType.FLOAT.isAssignableBy(characterBox))
assertEquals(true, ResolvedPrimitiveType.FLOAT.isAssignableBy(byteBox))
assertEquals(true, ResolvedPrimitiveType.FLOAT.isAssignableBy(shortBox))
assertEquals(true, ResolvedPrimitiveType.FLOAT.isAssignableBy(integerBox))
assertEquals(true, ResolvedPrimitiveType.FLOAT.isAssignableBy(longBox))
assertEquals(true, ResolvedPrimitiveType.FLOAT.isAssignableBy(floatBox))
assertEquals(false, ResolvedPrimitiveType.FLOAT.isAssignableBy(doubleBox))
assertEquals(false, ResolvedPrimitiveType.DOUBLE.isAssignableBy(booleanBox))
assertEquals(true, ResolvedPrimitiveType.DOUBLE.isAssignableBy(characterBox))
assertEquals(true, ResolvedPrimitiveType.DOUBLE.isAssignableBy(byteBox))
assertEquals(true, ResolvedPrimitiveType.DOUBLE.isAssignableBy(shortBox))
assertEquals(true, ResolvedPrimitiveType.DOUBLE.isAssignableBy(integerBox))
assertEquals(true, ResolvedPrimitiveType.DOUBLE.isAssignableBy(longBox))
assertEquals(true, ResolvedPrimitiveType.DOUBLE.isAssignableBy(floatBox))
assertEquals(true, ResolvedPrimitiveType.DOUBLE.isAssignableBy(doubleBox))
assertTrue(ResolvedPrimitiveType.CHAR.isNumeric())
assertTrue(ResolvedPrimitiveType.BYTE.isNumeric())
assertTrue(ResolvedPrimitiveType.SHORT.isNumeric())
assertTrue(ResolvedPrimitiveType.INT.isNumeric())
assertTrue(ResolvedPrimitiveType.LONG.isNumeric())
assertTrue(ResolvedPrimitiveType.FLOAT.isNumeric())
assertTrue(ResolvedPrimitiveType.DOUBLE.isNumeric())
assertEquals(false, unbounded.isArray())
assertEquals(false, superFoo.isArray())
assertEquals(false, superBar.isArray())
assertEquals(false, extendsFoo.isArray())
assertEquals(false, extendsBar.isArray())
assertEquals(false, unbounded.isPrimitive())
assertEquals(false, superFoo.isPrimitive())
assertEquals(false, superBar.isPrimitive())
assertEquals(false, extendsFoo.isPrimitive())
assertEquals(false, extendsBar.isPrimitive())
assertEquals(false, unbounded.isNull())
assertEquals(false, superFoo.isNull())
assertEquals(false, superBar.isNull())
assertEquals(false, extendsFoo.isNull())
assertEquals(false, extendsBar.isNull())
assertEquals(true, unbounded.isReference())
assertEquals(true, superFoo.isReference())
assertEquals(true, superBar.isReference())
assertEquals(true, extendsFoo.isReference())
assertEquals(true, extendsBar.isReference())
assertEquals(false, unbounded.isReferenceType())
assertEquals(false, superFoo.isReferenceType())
assertEquals(false, superBar.isReferenceType())
assertEquals(false, extendsFoo.isReferenceType())
assertEquals(false, extendsBar.isReferenceType())
assertEquals(false, unbounded.isVoid())
assertEquals(false, superFoo.isVoid())
assertEquals(false, superBar.isVoid())
assertEquals(false, extendsFoo.isVoid())
assertEquals(false, extendsBar.isVoid())
assertEquals(false, unbounded.isTypeVariable())
assertEquals(false, superFoo.isTypeVariable())
assertEquals(false, superBar.isTypeVariable())
assertEquals(false, extendsFoo.isTypeVariable())
assertEquals(false, extendsBar.isTypeVariable())
assertEquals(true, unbounded.isWildcard())
assertEquals(true, superFoo.isWildcard())
assertEquals(true, superBar.isWildcard())
assertEquals(true, extendsFoo.isWildcard())
assertEquals(true, extendsBar.isWildcard())
assertTrue(unbounded == unbounded.asWildcard())
assertTrue(superFoo == superFoo.asWildcard())
assertTrue(superBar == superBar.asWildcard())
assertTrue(extendsFoo == extendsFoo.asWildcard())
assertTrue(extendsBar == extendsBar.asWildcard())
assertEquals("?", unbounded.describe())
assertEquals("? super com.github.javaparser.symbolsolver.model.typesystem.WildcardUsageTest.Foo", superFoo.describe())
assertEquals("? super com.github.javaparser.symbolsolver.model.typesystem.WildcardUsageTest.Bar", superBar.describe())
assertEquals("? extends com.github.javaparser.symbolsolver.model.typesystem.WildcardUsageTest.Foo", extendsFoo.describe())
assertEquals("? extends com.github.javaparser.symbolsolver.model.typesystem.WildcardUsageTest.Bar", extendsBar.describe())
assertTrue(unbounded == unbounded.replaceTypeVariables(tpA, string))
assertTrue(superFoo == superFoo.replaceTypeVariables(tpA, string))
assertTrue(extendsFoo == extendsFoo.replaceTypeVariables(tpA, string))
assertEquals(superString, superA.replaceTypeVariables(tpA, string))
assertEquals(extendsString, extendsA.replaceTypeVariables(tpA, string))
assertTrue(superA == superA.replaceTypeVariables(tpB, string))
assertTrue(extendsA == extendsA.replaceTypeVariables(tpB, string))
assertEquals(false, unbounded.isAssignableBy(object))
assertEquals(true, object.isAssignableBy(unbounded))
assertEquals(false, string.isAssignableBy(unbounded))
assertEquals(true, superFoo.isAssignableBy(foo))
assertEquals(false, foo.isAssignableBy(superFoo))
assertEquals(false, extendsFoo.isAssignableBy(foo))
assertEquals(true, foo.isAssignableBy(extendsFoo))
assertFalse(cache.get("key").isPresent())
assertFalse(cache.contains("key"))
assertFalse(memoryCache.contains("key"))
assertFalse(memoryCache.isEmpty())
assertFalse(memoryCache.contains(key2))
assertFalse(memoryCache.contains(key3))
assertFalse(memoryCache.contains(key2))
assertFalse(memoryCache.isEmpty())
assertFalse(memoryCache.isEmpty())
assertFalse(adapter.contains("key"))
assertFalse(adapter.isEmpty())
assertFalse(adapter.contains(key2))
assertFalse(adapter.contains(key3))
assertFalse(adapter.contains(key2))
assertFalse(adapter.isEmpty())
assertFalse(adapter.isEmpty())
assertFalse(symbol.getDeclaration().isPresent())
assertFalse(adaptedSymbol.getDeclaration().isPresent())
assertFalse(symbol.isSolved())
assertFalse(ResolvedVoidType.INSTANCE.isAssignableBy(NullType.INSTANCE))
assertFalse(ResolvedVoidType.INSTANCE.isAssignableBy(OBJECT))
assertFalse(ResolvedVoidType.INSTANCE.isAssignableBy(STRING))
assertFalse(ResolvedVoidType.INSTANCE.isAssignableBy(ResolvedPrimitiveType.BOOLEAN))
assertFalse(ResolvedVoidType.INSTANCE.isAssignableBy(ResolvedVoidType.INSTANCE))
assertFalse(ResolvedPrimitiveType.BOOLEAN.isNumeric())
assertTrue(jcd.getField("value").isVolatile())
assertFalse(jcd.getField("serialVersionUID").isVolatile())
assertEquals(expectedAncestors, resultAncestors.stream().map(ResolvedReferenceType::getQualifiedName).collect(Collectors.toList()))
assertTrue(compilationUnit.isClass())
assertTrue(compilationUnit.isType())
assertEquals(compilationUnit, compilationUnit.asType())
assertEquals(compilationUnit, compilationUnit.asClass())
assertEquals("com.github.javaparser.ast", compilationUnit.getPackageName())
assertEquals("CompilationUnit", compilationUnit.getClassName())
assertEquals("com.github.javaparser.ast.CompilationUnit", compilationUnit.getQualifiedName())
assertTrue(compilationUnit.hasDirectlyAnnotation("com.github.javaparser.test.TestAnnotation"))
assertTrue(compilationUnit.hasAnnotation("com.github.javaparser.test.TestAnnotation"))
assertEquals(6, declarationList.size())
assertTrue(fields.containsKey("genericParamObjectField"))
assertTrue(fields.containsKey("genericPrimitiveArrayField"))
assertTrue(fields.containsKey("genericObjectArrayField"))
assertTrue(fields.containsKey("genericField"))
assertTrue(fields.containsKey("primitiveField"))
assertTrue(fields.containsKey("objectField"))
assertEquals(12, methodsSet.size())
assertTrue(methods.containsKey("pos"))
assertEquals(2, methods.get("pos").getNoParams())
assertTrue(methods.containsKey("withColumn"))
assertEquals(1, methods.get("withColumn").getNoParams())
assertTrue(methods.containsKey("withLine"))
assertEquals(1, methods.get("withLine").getNoParams())
assertTrue(methods.containsKey("valid"))
assertEquals(0, methods.get("valid").getNoParams())
assertTrue(methods.containsKey("invalid"))
assertEquals(0, methods.get("invalid").getNoParams())
assertTrue(methods.containsKey("orIfInvalid"))
assertEquals(1, methods.get("orIfInvalid").getNoParams())
assertTrue(methods.containsKey("isAfter"))
assertEquals(1, methods.get("isAfter").getNoParams())
assertTrue(methods.containsKey("isBefore"))
assertEquals(1, methods.get("isBefore").getNoParams())
assertTrue(methods.containsKey("compareTo"))
assertEquals(1, methods.get("compareTo").getNoParams())
assertTrue(methods.containsKey("equals"))
assertEquals(1, methods.get("equals").getNoParams())
assertTrue(methods.containsKey("hashCode"))
assertEquals(0, methods.get("hashCode").getNoParams())
assertTrue(methods.containsKey("toString"))
assertEquals(0, methods.get("toString").getNoParams())
assertEquals("com.github.javaparser.ast.Node", compilationUnit.getSuperClass().orElseThrow(() -> new RuntimeException("super class unexpectedly empty")).getQualifiedName())
assertEquals("com.github.javaparser.ast.Node", compilationUnit.getSuperClass().orElseThrow(() -> new RuntimeException("super class unexpectedly empty")).getQualifiedName())
assertEquals("com.github.javaparser.ast.body.BodyDeclaration", compilationUnit.getSuperClass().orElseThrow(() -> new RuntimeException("super class unexpectedly empty")).getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", compilationUnit.getSuperClass().orElseThrow(() -> new RuntimeException("super class unexpectedly empty")).typeParametersMap().getValueBySignature("com.github.javaparser.ast.body.BodyDeclaration.T").get().asReferenceType().getQualifiedName())
assertEquals(ImmutableSet.of("com.github.javaparser.ast.Node", "java.lang.Object"), cu.getAllSuperClasses().stream().map(ResolvedReferenceType::getQualifiedName).collect(Collectors.toSet()))
assertEquals(ImmutableSet.of("com.github.javaparser.ast.Node", "java.lang.Object"), cu.getAllAncestors().stream().map(ResolvedReferenceType::getQualifiedName).collect(Collectors.toSet()))
assertEquals(ImmutableSet.of(), compilationUnit.getInterfaces().stream().map(ResolvedReferenceType::getQualifiedName).collect(Collectors.toSet()))
assertEquals(ImmutableSet.of("com.github.javaparser.ast.DocumentableNode"), coid.getInterfaces().stream().map(ResolvedReferenceType::getQualifiedName).collect(Collectors.toSet()))
assertEquals(ImmutableSet.of(), compilationUnit.getAllInterfaces().stream().map(ResolvedReferenceType::getQualifiedName).collect(Collectors.toSet()))
assertEquals(ImmutableSet.of("com.github.javaparser.ast.NamedNode", "com.github.javaparser.ast.body.AnnotableNode", "com.github.javaparser.ast.DocumentableNode"), coid.getAllInterfaces().stream().map(ResolvedReferenceType::getQualifiedName).collect(Collectors.toSet()))
assertEquals(ImmutableSet.of("com.github.javaparser.ast.Node", "java.lang.Object"), cu.getAllSuperClasses().stream().map(ResolvedReferenceType::getQualifiedName).collect(Collectors.toSet()))
assertEquals(3, constructorDeclaration.getAllSuperClasses().size())
assertTrue(constructorDeclaration.getAllSuperClasses().stream().anyMatch(s -> s.getQualifiedName().equals("com.github.javaparser.ast.body.BodyDeclaration")))
assertTrue(constructorDeclaration.getAllSuperClasses().stream().anyMatch(s -> s.getQualifiedName().equals("com.github.javaparser.ast.Node")))
assertTrue(constructorDeclaration.getAllSuperClasses().stream().anyMatch(s -> s.getQualifiedName().equals("java.lang.Object")))
assertEquals("com.github.javaparser.ast.body.BodyDeclaration", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.body.BodyDeclaration.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.Node", ancestor.getQualifiedName())
assertEquals("java.lang.Object", ancestor.getQualifiedName())
assertEquals(ImmutableSet.of(), compilationUnit.getInterfaces().stream().map(ResolvedReferenceType::getQualifiedName).collect(Collectors.toSet()))
assertEquals(ImmutableSet.of("com.github.javaparser.ast.nodeTypes.NodeWithExtends", "com.github.javaparser.ast.nodeTypes.NodeWithImplements"), coid.getInterfaces().stream().map(ResolvedReferenceType::getQualifiedName).collect(Collectors.toSet()))
assertEquals(7, constructorDeclaration.getInterfaces().size())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithJavaDoc", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithJavaDoc.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithDeclaration", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithName", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithName.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithModifiers", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithModifiers.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithParameters", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithParameters.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithThrowable", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithThrowable.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithBlockStmt", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithBlockStmt.T").get().asReferenceType().getQualifiedName())
assertEquals(ImmutableSet.of("java.lang.Cloneable"), compilationUnit.getAllInterfaces().stream().map(ResolvedReferenceType::getQualifiedName).collect(Collectors.toSet()))
assertEquals(ImmutableSet.of("com.github.javaparser.ast.nodeTypes.NodeWithExtends", "com.github.javaparser.ast.nodeTypes.NodeWithAnnotations", "java.lang.Cloneable", "com.github.javaparser.ast.nodeTypes.NodeWithImplements", "com.github.javaparser.ast.nodeTypes.NodeWithName", "com.github.javaparser.ast.nodeTypes.NodeWithModifiers", "com.github.javaparser.ast.nodeTypes.NodeWithJavaDoc", "com.github.javaparser.ast.nodeTypes.NodeWithMembers"), coid.getAllInterfaces().stream().map(ResolvedReferenceType::getQualifiedName).collect(Collectors.toSet()))
assertEquals(9, constructorDeclaration.getAllInterfaces().size())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithJavaDoc", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithJavaDoc.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithDeclaration", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithName", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithName.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithModifiers", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithModifiers.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithParameters", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithParameters.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithThrowable", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithThrowable.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithBlockStmt", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithBlockStmt.T").get().asReferenceType().getQualifiedName())
assertEquals("java.lang.Cloneable", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithAnnotations", interfaze.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", interfaze.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithAnnotations.T").get().asReferenceType().getQualifiedName())
assertEquals(8, constructorDeclaration.getAncestors().size())
assertEquals("com.github.javaparser.ast.body.BodyDeclaration", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.body.BodyDeclaration.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithJavaDoc", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithJavaDoc.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithDeclaration", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithName", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithName.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithModifiers", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithModifiers.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithParameters", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithParameters.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithThrowable", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithThrowable.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithBlockStmt", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithBlockStmt.T").get().asReferenceType().getQualifiedName())
assertEquals(ImmutableSet.of("java.lang.Cloneable", "com.github.javaparser.ast.Node", "java.lang.Object"), cu.getAllAncestors().stream().map(ResolvedReferenceType::getQualifiedName).collect(Collectors.toSet()))
assertEquals(12, ancestors.size())
assertEquals("com.github.javaparser.ast.body.BodyDeclaration", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.body.BodyDeclaration.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.Node", ancestor.getQualifiedName())
assertEquals("java.lang.Object", ancestor.getQualifiedName())
assertEquals("java.lang.Cloneable", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithAnnotations", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithAnnotations.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithJavaDoc", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithJavaDoc.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithDeclaration", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithName", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithName.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithModifiers", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithModifiers.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithParameters", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithParameters.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithThrowable", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithThrowable.T").get().asReferenceType().getQualifiedName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithBlockStmt", ancestor.getQualifiedName())
assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", ancestor.typeParametersMap().getValueBySignature("com.github.javaparser.ast.nodeTypes.NodeWithBlockStmt.T").get().asReferenceType().getQualifiedName())
assertTrue(cu.isAssignableBy(NullType.INSTANCE))
assertTrue(cu.isAssignableBy(cu))
assertTrue(cu.isAssignableBy(node))
assertTrue(classDeclaration.isAssignableBy(nodeWithImplements))
assertEquals(false, nodeWithAnnotations.isClass())
assertEquals(true, nodeWithAnnotations.isInterface())
assertEquals(false, nodeWithAnnotations.isEnum())
assertEquals(false, nodeWithAnnotations.isTypeParameter())
assertEquals(true, nodeWithAnnotations.isType())
assertEquals(nodeWithAnnotations, nodeWithAnnotations.asType())
assertEquals(nodeWithAnnotations, nodeWithAnnotations.asInterface())
assertEquals("com.github.javaparser.ast.nodeTypes", nodeWithAnnotations.getPackageName())
assertEquals("NodeWithAnnotations", nodeWithAnnotations.getClassName())
assertEquals("com.github.javaparser.ast.nodeTypes.NodeWithAnnotations", nodeWithAnnotations.getQualifiedName())
assertTrue(compilationUnit.hasDirectlyAnnotation("com.github.javaparser.test.TestAnnotation"))
assertTrue(compilationUnit.hasAnnotation("com.github.javaparser.test.TestAnnotation"))
assertTrue(nodeWithImplements.isAssignableBy(NullType.INSTANCE))
assertTrue(nodeWithImplements.isAssignableBy(nodeWithImplements))
assertEquals(2, ancestors.size())
assertEquals("com.github.javaparser.test.GenericInterface<S>", ancestors.get(0).describe())
assertEquals("java.lang.Object", ancestors.get(1).describe())
assertEquals(1, typePamatersMap.size())
assertEquals("com.github.javaparser.test.GenericInterface.T", genericTypeParameterDeclaration.getQualifiedName())
assertEquals("com.github.javaparser.test.GenericChildInterface.S", genericResolvedType.asTypeParameter().getQualifiedName())
assertEquals(false, modifier.isClass())
assertEquals(false, modifier.isInterface())
assertEquals(true, modifier.isEnum())
assertEquals(false, modifier.isTypeParameter())
assertEquals(true, modifier.isType())
assertEquals(modifier, modifier.asType())
assertEquals(modifier, modifier.asEnum())
assertEquals("com.github.javaparser.ast", modifier.getPackageName())
assertEquals("Modifier", modifier.getClassName())
assertEquals("com.github.javaparser.ast.Modifier", modifier.getQualifiedName())
assertTrue(compilationUnit.hasDirectlyAnnotation("com.github.javaparser.test.TestAnnotation"))
assertTrue(compilationUnit.hasAnnotation("com.github.javaparser.test.TestAnnotation"))
assertEquals(2, ancestors.size())
assertEquals(Object.class.getCanonicalName(), ancestors.get(0).getQualifiedName())
assertEquals(Annotation.class.getCanonicalName(), ancestors.get(1).getQualifiedName())
assertEquals(1, innerTypes.size())
assertEquals("com.example.Foo.Bar", innerTypes.get(0).getQualifiedName())
assertTrue(fooAnnotationDeclaration.isInheritable())
assertTrue(compilationUnit.isClass())
assertTrue(compilationUnit.isClass())
assertEquals("begin", constructor.getParam(0).getName())
assertTrue(constructor.getParam(0).hasName())
assertEquals("end", constructor.getParam(1).getName())
assertTrue(constructor.getParam(1).hasName())
assertTrue(paramDecl.isParameter())
assertTrue(createValue().isClass())
assertNotNull(createValue().getSuperClass())
assertNotNull(createValue().getInterfaces())
assertNotNull(createValue().getAllSuperClasses())
assertNotNull(createValue().getAllInterfaces())
assertNotNull(createValue().getAnnotationMembers())
assertNotNull(createValue().accessSpecifier())
assertFalse(compilationUnit.isInterface())
assertFalse(compilationUnit.isEnum())
assertFalse(compilationUnit.isTypeParameter())
assertFalse(objectDeclaration.getSuperClass().isPresent())
assertFalse(cu.isAssignableBy(new LambdaArgumentTypePlaceholder(0)))
assertFalse(nodeWithImplements.isAssignableBy(new LambdaArgumentTypePlaceholder(0)))
assertFalse(nodeWithImplements.isAssignableBy(consumer))
assertFalse(fooAnnotationDeclaration.isInheritable())
assertFalse(paramDecl.isField())
assertFalse(paramDecl.isType())
assertFalse(paramDecl.isEnumConstant())
assertFalse(paramDecl.isMethod())
assertFalse(paramDecl.isVariable())
assertTrue(createValue().isParameter())
assertTrue(createValue().hasName())
assertNotNull(createValue().getQualifiedName())
assertNotNull(createValue().getId())
assertNotNull(createValue().containerType())
assertTrue(createValue().isTypeParameter())
assertTrue(createStaticValue().isStatic())
assertNotNull(createValue().declaringType())
assertTrue(resolvedDeclaration instanceof AssociableToAST)
assertTrue(createValue().isReferenceType())
assertNotNull(createValue().getAllFields())
assertNotNull(createValue().getDeclaredMethods())
assertNotNull(createValue().getConstructors())
assertTrue(createValue().isEnumConstant())
assertNotNull(createValue().getName())
assertNotNull(createValue().getTypeParameters())
assertTrue(createValue().isPattern())
assertTrue(createValue().hasName())
assertTrue(createValue().isEnum())
assertTrue(compilationUnit.getResult().isPresent())
assertEquals(String.class.getCanonicalName(), resolved.getQualifiedName())
assertTrue(compilationUnit.getResult().isPresent())
assertEquals("Ljava/lang/String;", classOrInterfaceType.toDescriptor())
assertEquals(cu.hashCode(), deserialized.hashCode())
assertEquals(type.hashCode(), deserialized.hashCode())
assertEquals(type.hashCode(), deserialized.hashCode())
assertEquals(type.hashCode(), deserialized.hashCode())
assertEquals(expr.hashCode(), deserialized.hashCode())
assertEquals(type.hashCode(), deserialized.hashCode())
assertTrue(classXDeclaration.getComment().isPresent())
assertEquals("com.github.javaparser.ast.comments.BlockComment", comment.getClass().getName())
assertEquals(" block comment ", comment.getContent())
assertTrue(methodDeclaration.getComment().isPresent())
assertEquals("com.github.javaparser.ast.comments.LineComment", methodDeclaration.getComment().get().getClass().getName())
assertEquals(" line comment", methodDeclaration.getComment().get().getContent())
assertTrue(methodDeclaration.getJavadoc().isPresent())
assertEquals("param", paramBlockTag.getTagName())
assertEquals("blub", paramBlockTag.getContent().toText())
assertEquals("return", returnBlockTag.getTagName())
assertEquals("true", returnBlockTag.getContent().toText())
assertTrue(deserialized.hasRange())
assertEquals(1, range.begin.line)
assertEquals(1, range.begin.line)
assertEquals(26, range.end.column)
assertTrue(deserialized.getTokenRange().isPresent())
assertEquals("public", tokenRange.getBegin().getText())
assertEquals("", tokenRange.getEnd().getText())
assertTrue(deserialized.containsData(Node.SYMBOL_RESOLVER_KEY))
assertEquals(stubResolver, deserialized.getData(Node.SYMBOL_RESOLVER_KEY))
assertEquals(normalizeEolInTextBlock(expected, LineSeparator.ARBITRARY), normalizeEolInTextBlock(actual, LineSeparator.ARBITRARY))
assertEquals("{\"!\":\"com.github.javaparser.ast.CompilationUnit\",\"range\":{\"beginLine\":1,\"beginColumn\":1,\"endLine\":1,\"endColumn\":23},\"tokenRange\":{\"beginToken\":{\"kind\":19,\"text\":\"class\"},\"endToken\":{\"kind\":0,\"text\":\"\"}},\"imports\":[],\"types\":[{\"!\":\"com.github.javaparser.ast.body.ClassOrInterfaceDeclaration\",\"range\":{\"beginLine\":1,\"beginColumn\":1,\"endLine\":1,\"endColumn\":23},\"tokenRange\":{\"beginToken\":{\"kind\":19,\"text\":\"class\"},\"endToken\":{\"kind\":100,\"text\":\"}\"}},\"extendedTypes\":[],\"implementedTypes\":[],\"isInterface\":\"false\",\"typeParameters\":[],\"members\":[{\"!\":\"com.github.javaparser.ast.body.FieldDeclaration\",\"range\":{\"beginLine\":1,\"beginColumn\":9,\"endLine\":1,\"endColumn\":22},\"tokenRange\":{\"beginToken\":{\"kind\":94,\"text\":\"java\"},\"endToken\":{\"kind\":103,\"text\":\";\"}},\"modifiers\":[],\"variables\":[{\"!\":\"com.github.javaparser.ast.body.VariableDeclarator\",\"range\":{\"beginLine\":1,\"beginColumn\":21,\"endLine\":1,\"endColumn\":21},\"tokenRange\":{\"beginToken\":{\"kind\":94,\"text\":\"y\"},\"endToken\":{\"kind\":94,\"text\":\"y\"}},\"name\":{\"!\":\"com.github.javaparser.ast.expr.SimpleName\",\"range\":{\"beginLine\":1,\"beginColumn\":21,\"endLine\":1,\"endColumn\":21},\"tokenRange\":{\"beginToken\":{\"kind\":94,\"text\":\"y\"},\"endToken\":{\"kind\":94,\"text\":\"y\"}},\"identifier\":\"y\"},\"type\":{\"!\":\"com.github.javaparser.ast.type.ClassOrInterfaceType\",\"range\":{\"beginLine\":1,\"beginColumn\":9,\"endLine\":1,\"endColumn\":19},\"tokenRange\":{\"beginToken\":{\"kind\":94,\"text\":\"java\"},\"endToken\":{\"kind\":94,\"text\":\"Y\"}},\"name\":{\"!\":\"com.github.javaparser.ast.expr.SimpleName\",\"range\":{\"beginLine\":1,\"beginColumn\":19,\"endLine\":1,\"endColumn\":19},\"tokenRange\":{\"beginToken\":{\"kind\":94,\"text\":\"Y\"},\"endToken\":{\"kind\":94,\"text\":\"Y\"}},\"identifier\":\"Y\"},\"scope\":{\"!\":\"com.github.javaparser.ast.type.ClassOrInterfaceType\",\"range\":{\"beginLine\":1,\"beginColumn\":9,\"endLine\":1,\"endColumn\":17},\"tokenRange\":{\"beginToken\":{\"kind\":94,\"text\":\"java\"},\"endToken\":{\"kind\":94,\"text\":\"util\"}},\"name\":{\"!\":\"com.github.javaparser.ast.expr.SimpleName\",\"range\":{\"beginLine\":1,\"beginColumn\":14,\"endLine\":1,\"endColumn\":17},\"tokenRange\":{\"beginToken\":{\"kind\":94,\"text\":\"util\"},\"endToken\":{\"kind\":94,\"text\":\"util\"}},\"identifier\":\"util\"},\"scope\":{\"!\":\"com.github.javaparser.ast.type.ClassOrInterfaceType\",\"range\":{\"beginLine\":1,\"beginColumn\":9,\"endLine\":1,\"endColumn\":12},\"tokenRange\":{\"beginToken\":{\"kind\":94,\"text\":\"java\"},\"endToken\":{\"kind\":94,\"text\":\"java\"}},\"name\":{\"!\":\"com.github.javaparser.ast.expr.SimpleName\",\"range\":{\"beginLine\":1,\"beginColumn\":9,\"endLine\":1,\"endColumn\":12},\"tokenRange\":{\"beginToken\":{\"kind\":94,\"text\":\"java\"},\"endToken\":{\"kind\":94,\"text\":\"java\"}},\"identifier\":\"java\"},\"annotations\":[]},\"annotations\":[]},\"annotations\":[]}}],\"annotations\":[]}],\"modifiers\":[],\"name\":{\"!\":\"com.github.javaparser.ast.expr.SimpleName\",\"range\":{\"beginLine\":1,\"beginColumn\":7,\"endLine\":1,\"endColumn\":7},\"tokenRange\":{\"beginToken\":{\"kind\":94,\"text\":\"X\"},\"endToken\":{\"kind\":94,\"text\":\"X\"}},\"identifier\":\"X\"},\"annotations\":[]}]}", serialized)
assertEquals("13" + '\u12aA' + "98", new String(read("13\\u12aA98")))
assertEquals("13\\\\u12aA98", new String(read("13\\\\u12aA98")))
assertEquals("13" + '\u12aA' + "98", new String(read("13\\uuuuuu12aA98")))
assertEquals("foobar\\", new String(read("foobar\\")))
assertEquals("foobar\\u", new String(read("foobar\\u")))
assertEquals("foobar\\uuuuuu", new String(read("foobar\\uuuuuu")))
assertEquals("foobar\\uA", new String(read("foobar\\uA")))
assertEquals("foobar\\uAB", new String(read("foobar\\uAB")))
assertEquals("foobar\\uABC", new String(read("foobar\\uABC")))
assertEquals("foobar\uABCD", new String(read("foobar\\uABCD")))
assertEquals("", new String(read("")))
assertEquals("13\\ux", new String(read("13\\ux")))
assertEquals("13\\u1x", new String(read("13\\u1x")))
assertEquals("13\\u1Ax", new String(read("13\\u1Ax")))
assertEquals("13\\u1ABx", new String(read("13\\u1ABx")))
assertEquals("13\\uuuuuu1ABx", new String(read("13\\uuuuuu1ABx")))
assertEquals("12345678\\uuxxxxxxxxxxxxxxxxxxxxxxx", new String(read("12345678\\uuxxxxxxxxxxxxxxxxxxxxxxx")))
assertEquals("12345678\\uuxx", new String(read("12345678\\uuxx")))
assertNotNull(input)
assertNotNull(encoding)
assertNotNull(position)
assertNotNull(position)
assertNotNull(o)
assertEquals(IDENTIFIER, moduleToken.getKind())
assertEquals("transitive", requiresTransitive.getNameAsString())
assertEquals(IDENTIFIER, requiresTransitive.getName().getTokenRange().get().getBegin().getKind())
assertEquals("M.N", module.getNameAsString())
assertEquals("M.N", module.getNameAsString())
assertTrue(module.isOpen())
assertEquals("@Foo(1)" + SYSTEM_EOL + "@Foo(2)" + SYSTEM_EOL + "@Bar" + SYSTEM_EOL + "module M.N {" + SYSTEM_EOL + "    requires A.B;" + SYSTEM_EOL + "    requires transitive C.D;" + SYSTEM_EOL + "    requires static E.F;" + SYSTEM_EOL + "    requires static transitive G.H;" + SYSTEM_EOL + "    exports P.Q;" + SYSTEM_EOL + "    exports R.S to T1.U1, T2.U2;" + SYSTEM_EOL + "    opens P.Q;" + SYSTEM_EOL + "    opens R.S to T1.U1, T2.U2;" + SYSTEM_EOL + "    uses V.W;" + SYSTEM_EOL + "    provides X.Y with Z1.Z2, Z3.Z4;" + SYSTEM_EOL + "}" + SYSTEM_EOL, cu.toString())
assertEquals("@Foo(1)" + SYSTEM_EOL + "@Foo(2)" + SYSTEM_EOL + "@Bar" + SYSTEM_EOL + "open module M.N {" + SYSTEM_EOL + "    requires A.B;" + SYSTEM_EOL + "    requires transitive C.D;" + SYSTEM_EOL + "    requires static E.F;" + SYSTEM_EOL + "    requires transitive static G.H;" + SYSTEM_EOL + "    exports P.Q;" + SYSTEM_EOL + "    exports R.S to T1.U1, T2.U2;" + SYSTEM_EOL + "    opens P.Q;" + SYSTEM_EOL + "    opens R.S to T1.U1, T2.U2;" + SYSTEM_EOL + "    uses V.W;" + SYSTEM_EOL + "    provides X.Y with Z1.Z2, Z3.Z4;" + SYSTEM_EOL + "}" + SYSTEM_EOL, ConcreteSyntaxModel.genericPrettyPrint(cu))
assertTrue(moduleRequiresStmt.isTransitive())
assertTrue(moduleRequiresStmt.isStatic())
assertEquals(1, cc.getLineComments().size())
assertEquals(1, cc.getJavadocComments().size())
assertEquals("testMetaModel", test.getMetaModelFieldName())
assertEquals("int", bert.getTypeName())
assertEquals("int", bert.getTypeNameGenerified())
assertEquals("int", bert.getTypeNameForGetter())
assertEquals("int", bert.getTypeNameForSetter())
assertEquals("BodyDeclaration", bert.getTypeName())
assertEquals("BodyDeclaration<?>", bert.getTypeNameGenerified())
assertEquals("Optional<NodeList<BodyDeclaration<?>>>", bert.getTypeNameForGetter())
assertEquals("NodeList<BodyDeclaration<?>>", bert.getTypeNameForSetter())
assertEquals("Modifier", bert.getTypeName())
assertEquals("Modifier", bert.getTypeNameGenerified())
assertEquals("NodeList<Modifier>", bert.getTypeNameForGetter())
assertEquals("NodeList<Modifier>", bert.getTypeNameForSetter())
assertEquals("bertPropertyMetaModel", bert.getMetaModelFieldName())
assertEquals("", javadoc.toText())
assertEquals("first line" + SYSTEM_EOL + "second line" + SYSTEM_EOL, javadoc.toText())
assertEquals("first line" + SYSTEM_EOL + "second line" + SYSTEM_EOL + SYSTEM_EOL + "@foo something useful" + SYSTEM_EOL, javadoc.toText())
assertEquals(new JavadocComment("" + SYSTEM_EOL + "\t\t "), javadoc.toComment("\t\t"))
assertEquals(new JavadocComment("" + SYSTEM_EOL + "\t\t * first line" + SYSTEM_EOL + "\t\t * second line" + SYSTEM_EOL + "\t\t "), javadoc.toComment("\t\t"))
assertEquals(new JavadocComment("" + SYSTEM_EOL + "\t\t * first line" + SYSTEM_EOL + "\t\t * second line" + SYSTEM_EOL + "\t\t * " + SYSTEM_EOL + "\t\t * @foo something useful" + SYSTEM_EOL + "\t\t "), javadoc.toComment("\t\t"))
assertEquals("first line" + SYSTEM_EOL + "second line", javadoc.getDescription().toText())
assertEquals(2, javadoc.getBlockTags().size())
assertEquals("link", inlineTags.get(0).getName())
assertEquals(" TOFilename", inlineTags.get(0).getContent())
assertEquals(LINK, inlineTags.get(0).getType())
assertEquals("link", inlineTags.get(1).getName())
assertEquals(" TOVersion", inlineTags.get(1).getContent())
assertEquals(LINK, inlineTags.get(1).getType())
assertEquals("systemProperty", inlineTags.get(2).getName())
assertEquals(" JAVA_HOME", inlineTags.get(2).getContent())
assertEquals(SYSTEM_PROPERTY, inlineTags.get(2).getType())
assertTrue(javadocText.contains("{@link TOVersion}"))
assertEquals(2, javadoc.getBlockTags().size())
assertEquals(0, javadoc.getBlockTags().size())
assertEquals(1, javadoc.getBlockTags().size())
assertEquals(blockTag, javadoc.getBlockTags().get(0))
assertEquals(blockTag, javadoc.getBlockTags().remove(0))
assertEquals(0, javadoc.getBlockTags().size())
assertEquals(0, description.getElements().size())
assertTrue(description.addElement(inlineTag))
assertEquals(1, description.getElements().size())
assertEquals(inlineTag, description.getElements().get(0))
assertEquals(inlineTag, description.getElements().remove(0))
assertEquals(0, description.getElements().size())
assertEquals(3, elements.size())
assertEquals(new JavadocSnippet("hallo "), elements.get(0))
assertEquals(new JavadocInlineTag("link", LINK, " Foo"), elements.get(1))
assertEquals(new JavadocSnippet(" welt"), elements.get(2))
assertEquals(tag, "{@foo something}")
assertEquals(inputText, outputText)
assertTrue(mapping.isEmpty())
assertEquals(4, provider.getInputCounter().getLine())
assertEquals(4, provider.getOutputCounter().getLine())
assertSame(PositionMapping.PositionUpdate.NONE, mapping.lookup(new Position(10000, 1)))
assertEquals(text(output), decoded)
assertEquals(input.size(), provider.getInputCounter().getLine())
assertEquals(output.size(), provider.getOutputCounter().getLine())
assertTrue(le.getComment().isPresent())
assertTrue(le.getOrphanComments().isEmpty())
assertEquals(0, le.getAllContainedComments().size())
assertTrue(st.getComment().isPresent())
assertTrue(st.getOrphanComments().isEmpty())
assertEquals(0, st.getAllContainedComments().size())
assertTrue(st.getComment().isPresent())
assertTrue(st.getOrphanComments().isEmpty())
assertEquals(0, st.getAllContainedComments().size())
assertTrue(st.getComment().isPresent())
assertTrue(st.getOrphanComments().isEmpty())
assertEquals(0, st.getAllContainedComments().size())
assertEquals(p1, p1.orIfInvalid(p2))
assertEquals(p1, invalid.orIfInvalid(p1))
assertEquals(invalid2, invalid2.orIfInvalid(invalid))
assertEquals("Can't position at line -10", thrown1.getMessage())
assertEquals("Can't position at column -10", thrown2.getMessage())
assertEquals(1, addMethod.getThrownExceptions().size())
assertTrue(addMethod.isThrown(IllegalStateException.class))
assertEquals(2, addMethod.getThrownExceptions().size())
assertEquals("Test", addMethod.getThrownException(1).toString())
assertEquals("import com.github.javaparser.builders.NodeWithAnnotationsBuildersTest.hey;", cu.getImport(0).toString().trim())
assertEquals(1, testClass.getAnnotations().size())
assertEquals(annotation, testClass.getAnnotation(0))
assertEquals(NormalAnnotationExpr.class, testClass.getAnnotation(0).getClass())
assertEquals(1, testClass.getAnnotations().size())
assertEquals(1, testClass.getAnnotations().size())
assertEquals("value", testClass.getAnnotation(0).asSingleMemberAnnotationExpr().getMemberValue().toString())
assertEquals(1, testClass.getAnnotations().size())
assertEquals("value", testClass.getAnnotation(0).asSingleMemberAnnotationExpr().getMemberValue().toString())
assertTrue(testClass.isAnnotationPresent(hey.class))
assertEquals(annotation, testClass.getAnnotationByName("hey").get())
assertEquals(annotation, testClass.getAnnotationByClass(hey.class).get())
assertEquals(1, cu.getImports().size())
assertEquals("import " + Function.class.getName() + ";" + SYSTEM_EOL, cu.getImport(0).toString())
assertEquals(1, testEnum.getImplementedTypes().size())
assertEquals(Function.class.getSimpleName(), testEnum.getImplementedTypes(0).getNameAsString())
assertEquals(1, testEnum.getEntries().size())
assertEquals("MY_ENUM_CONSTANT", testEnum.getEntry(0).getNameAsString())
assertEquals(1, cu.getImports().size())
assertEquals("import " + List.class.getName() + ";" + SYSTEM_EOL, cu.getImport(0).toString())
assertEquals(1, testClass.getExtendedTypes().size())
assertEquals(List.class.getSimpleName(), testClass.getExtendedTypes(0).getNameAsString())
assertEquals(1, cu.getImports().size())
assertEquals("import " + Function.class.getName() + ";" + SYSTEM_EOL, cu.getImport(0).toString())
assertEquals(1, testClass.getImplementedTypes().size())
assertEquals(Function.class.getSimpleName(), testClass.getImplementedTypes(0).getNameAsString())
assertEquals(2, cu.getImports().size())
assertEquals(3, cu.getImports().size())
assertEquals("import " + Map.class.getCanonicalName() + ";" + SYSTEM_EOL, cu.getImport(0).toString())
assertEquals("import " + List.class.getCanonicalName() + ";" + SYSTEM_EOL, cu.getImport(1).toString())
assertEquals("import static " + com.github.javaparser.StaticJavaParser.class.getCanonicalName() + ".parseImport;" + SYSTEM_EOL, cu.getImport(2).toString())
assertEquals(2, cu.getImports().size())
assertEquals("import " + $tartsWith$.class.getCanonicalName() + ";" + SYSTEM_EOL, cu.getImport(0).toString())
assertEquals("import my.$tartsWith$;" + SYSTEM_EOL, cu.getImport(1).toString())
assertEquals(2, cu.getImports().size())
assertEquals("import " + F$F.class.getCanonicalName() + ";" + SYSTEM_EOL, cu.getImport(0).toString())
assertEquals("import my.F$F;" + SYSTEM_EOL, cu.getImport(1).toString())
assertEquals(0, cu.getImports().size())
assertEquals(0, cu.getImports().size())
assertEquals(1, cu.getImports().size())
assertEquals("import one.two.three.DoNotIgnoreImportWithinSubPackage;" + SYSTEM_EOL, cu.getImport(0).toString())
assertEquals(0, cu.getImports().size())
assertEquals(2, cu.getImports().size())
assertEquals("import my.*;" + SYSTEM_EOL, cu.getImport(0).toString())
assertEquals("import my.other.Import;" + SYSTEM_EOL, cu.getImport(1).toString())
assertEquals(2, cu.getImports().size())
assertEquals("import my.*;" + SYSTEM_EOL, cu.getImport(0).toString())
assertEquals("import my.other.*;" + SYSTEM_EOL, cu.getImport(1).toString())
assertEquals(0, cu.getImports().size())
assertEquals(1, cu.getImports().size())
assertEquals("import java.lang.annotation.ElementType;" + SYSTEM_EOL, cu.getImport(0).toString())
assertEquals(1, cu.getImports().size())
assertEquals(1, cu.getImports().size())
assertEquals(1, cu.getImports().size())
assertEquals(1, cu.getImports().size())
assertEquals(2, cu.getImports().size())
assertEquals("com.github.javaparser.ast.CompilationUnit", cu.getImport(0).getNameAsString())
assertEquals("java.util.List", cu.getImport(1).getNameAsString())
assertEquals("import " + testInnerClass.class.getCanonicalName().replace("$", ".") + ";" + SYSTEM_EOL, cu.getImport(0).toString())
assertEquals(1, cu.getTypes().size())
assertEquals("testClass", cu.getType(0).getNameAsString())
assertEquals(ClassOrInterfaceDeclaration.class, cu.getType(0).getClass())
assertTrue(myClassDeclaration.isPrivate())
assertEquals(1, cu.getTypes().size())
assertEquals("testInterface", cu.getType(0).getNameAsString())
assertTrue(myInterfaceDeclaration.isPublic())
assertEquals(ClassOrInterfaceDeclaration.class, cu.getType(0).getClass())
assertTrue(myInterfaceDeclaration.isInterface())
assertEquals(1, cu.getTypes().size())
assertEquals("test", cu.getType(0).getNameAsString())
assertTrue(myEnumDeclaration.isPublic())
assertEquals(EnumDeclaration.class, cu.getType(0).getClass())
assertEquals(1, cu.getTypes().size())
assertEquals("test", cu.getType(0).getNameAsString())
assertTrue(myAnnotationDeclaration.isPublic())
assertEquals(AnnotationDeclaration.class, cu.getType(0).getClass())
assertEquals(1, cu.getTypes().size())
assertEquals("test", cu.getType(0).getNameAsString())
assertTrue(myRecordDeclaration.isPublic())
assertTrue(myRecordDeclaration.isFinal())
assertEquals(RecordDeclaration.class, cu.getType(0).getClass())
assertEquals(cu.addClass("test"), cu.getClassByName("test").get())
assertEquals(cu.addInterface("test"), cu.getInterfaceByName("test").get())
assertEquals(cu.addEnum("test"), cu.getEnumByName("test").get())
assertEquals(cu.addAnnotationDeclaration("test"), cu.getAnnotationDeclarationByName("test").get())
assertEquals(cu.addType(new RecordDeclaration(Modifier.createModifierList(), "test")).getType(0), cu.getRecordByName("test").get())
assertEquals(1, cu.getImports().size())
assertEquals("import " + List.class.getName() + ";" + SYSTEM_EOL, cu.getImport(0).toString())
assertEquals(2, addMethod.getParameters().size())
assertEquals("yay", addMethod.getParameter(0).getNameAsString())
assertEquals("List", addMethod.getParameter(1).getType().toString())
assertEquals(myNewParam, addMethod.getParameter(1))
assertEquals(addAndGetParameter, addMethod.getParameterByName("yay").get())
assertEquals(addAndGetParameter, addMethod.getParameterByType("int").get())
assertEquals(addAndGetParameter, addMethod.getParameterByType(int.class).get())
assertEquals(2, testClass.getMembers().size())
assertEquals(MethodDeclaration.class, testClass.getMember(1).getClass())
assertEquals(1, methodsWithName.size())
assertEquals("getMyField", getter.getNameAsString())
assertEquals("int", getter.getType().toString())
assertEquals(ReturnStmt.class, getter.getBody().get().getStatement(0).getClass())
assertEquals(2, testClass.getMembers().size())
assertEquals(MethodDeclaration.class, testClass.getMember(1).getClass())
assertEquals(1, methodsWithName.size())
assertEquals("setMyField", setter.getNameAsString())
assertEquals("int", setter.getParameter(0).getType().toString())
assertEquals(ExpressionStmt.class, setter.getBody().get().getStatement(0).getClass())
assertEquals("this.myField = myField;", setter.getBody().get().getStatement(0).toString())
assertEquals(2, testEnum.getMembers().size())
assertEquals(MethodDeclaration.class, testEnum.getMember(1).getClass())
assertEquals(1, methodsWithName.size())
assertEquals("getMyField", getter.getNameAsString())
assertEquals("int", getter.getType().toString())
assertEquals(ReturnStmt.class, getter.getBody().get().getStatement(0).getClass())
assertEquals(2, testEnum.getMembers().size())
assertEquals(MethodDeclaration.class, testEnum.getMember(1).getClass())
assertEquals(1, methodsWithName.size())
assertEquals("setMyField", setter.getNameAsString())
assertEquals("int", setter.getParameter(0).getType().toString())
assertEquals(ExpressionStmt.class, setter.getBody().get().getStatement(0).getClass())
assertEquals("this.myField = myField;", setter.getBody().get().getStatement(0).toString())
assertEquals(1, classDeclaration.getMembers().size())
assertEquals(addField, classDeclaration.getMember(0))
assertEquals("fieldName", addField.getVariable(0).getNameAsString())
assertEquals(1, classDeclaration.getMembers().size())
assertEquals(addMethod, classDeclaration.getMember(0))
assertEquals("foo", addMethod.getNameAsString())
assertEquals(1, classDeclaration.getMembers().size())
assertEquals(addCtor, classDeclaration.getMember(0))
assertEquals(classDeclaration.getName(), addCtor.getName())
assertEquals(1, classDeclaration.getMembers().size())
assertEquals(InitializerDeclaration.class, classDeclaration.getMember(0).getClass())
assertEquals(2, classDeclaration.getMembers().size())
assertEquals(InitializerDeclaration.class, classDeclaration.getMember(0).getClass())
assertEquals(2, methodsByName.size())
assertTrue(methodsByName.contains(addMethod))
assertTrue(methodsByName.contains(addMethod2))
assertEquals(2, methods.size())
assertTrue(methods.contains(addMethod))
assertTrue(methods.contains(addMethod2))
assertEquals(1, methodsWithNoParams.size())
assertTrue(methodsWithNoParams.contains(mFoo))
assertEquals(2, methodsWithIntParam.size())
assertTrue(methodsWithIntParam.contains(mFooInt))
assertTrue(methodsWithIntParam.contains(mFoo2Int))
assertEquals(0, methodsWithListParam.size())
assertEquals(1, methodsWithIntAndListParams.size())
assertTrue(methodsWithIntAndListParams.contains(mFooIntList))
assertEquals(1, methodsWithListAndIntParams.size())
assertTrue(methodsWithListAndIntParams.contains(mFooListInt))
assertEquals(1, methodsWithListAndIntParams.size())
assertTrue(methodsWithIntAndIntParams.contains(mFoo2IntInt))
assertEquals(2, constructors.size())
assertTrue(constructors.contains(addConstructor))
assertTrue(constructors.contains(addConstructor2))
assertTrue(constructorWithNoParams.isPresent())
assertSame(c, constructorWithNoParams.get())
assertTrue(constructorWithIntParam.isPresent())
assertSame(cInt, constructorWithIntParam.get())
assertTrue(constructorWithIntAndListParams.isPresent())
assertSame(cIntList, constructorWithIntAndListParams.get())
assertTrue(constructorWithListAndIntParams.isPresent())
assertSame(cListInt, constructorWithListAndIntParams.get())
assertTrue(constructorWithIntAndIntParams.isPresent())
assertSame(cIntInt, constructorWithIntAndIntParams.get())
assertEquals(addField, fieldByName)
assertTrue(fields.contains(firstField))
assertTrue(fields.contains(secondField))
assertNotNull(classOrInterfaceDeclaration.getFields())
assertEquals(1, classOrInterfaceDeclaration.getFields().size())
assertEquals(PRIVATE, fieldDeclaration.getModifiers().iterator().next().getKeyword())
assertEquals("java.lang.String", fieldDeclaration.getVariables().get(0).getType().toString())
assertEquals("name", fieldDeclaration.getVariables().get(0).getName().toString())
assertNotNull(classOrInterfaceDeclaration.getFields())
assertEquals(1, classOrInterfaceDeclaration.getFields().size())
assertEquals(PUBLIC, fieldDeclaration.getModifiers().iterator().next().getKeyword())
assertEquals("java.lang.String", fieldDeclaration.getVariables().get(0).getType().toString())
assertEquals("name", fieldDeclaration.getVariables().get(0).getName().toString())
assertNotNull(classOrInterfaceDeclaration.getFields())
assertEquals(1, classOrInterfaceDeclaration.getFields().size())
assertEquals(PROTECTED, fieldDeclaration.getModifiers().iterator().next().getKeyword())
assertEquals("java.lang.String", fieldDeclaration.getVariables().get(0).getType().toString())
assertEquals("name", fieldDeclaration.getVariables().get(0).getName().toString())
assertNotNull(classOrInterfaceDeclaration.getFields())
assertEquals(1, classOrInterfaceDeclaration.getFields().size())
assertEquals(PUBLIC, fieldDeclaration.getModifiers().iterator().next().getKeyword())
assertEquals("java.lang.String", fieldDeclaration.getVariables().get(0).getType().toString())
assertEquals("name", fieldDeclaration.getVariables().get(0).getName().toString())
assertEquals("John", fieldDeclaration.getVariables().get(0).getInitializer().get().toString())
assertNotNull(classOrInterfaceDeclaration.getFields())
assertEquals(1, classOrInterfaceDeclaration.getFields().size())
assertEquals(PUBLIC, fieldDeclaration.getModifiers().iterator().next().getKeyword())
assertEquals("List", fieldDeclaration.getVariables().get(0).getType().toString())
assertEquals("skills", fieldDeclaration.getVariables().get(0).getName().toString())
assertEquals("new ArrayList()", fieldDeclaration.getVariables().get(0).getInitializer().get().toString())
assertEquals(image, token.getText())
assertEquals(range, token.getRange().get())
assertEquals(kind, token.getKind())
assertEquals(category, token.getCategory())
assertTrue(token.getNextToken().isPresent() || token.getPreviousToken().isPresent())
assertEquals("=", new JavaToken(ASSIGN).getText())
assertEquals(" ", new JavaToken(EOF).getText())
assertEquals("*/", new JavaToken(JAVADOC_COMMENT).getText())
assertEquals(JavaToken.Kind.ASSERT, kind)
assertEquals(GeneratedJavaParserConstants.ASSERT, kind.getKind())
assertNotEquals(tokenToBeDeleted, nextTokenAfterDelete)
assertEquals("/*2*/", nextTokenAfterDelete.getText())
assertEquals("1", previous.getText())
assertEquals("/*2*/", iterator.next().getText())
assertTrue(memberDeclaration.hasRange())
assertEquals(new Range(new Position(1, 17), new Position(1, 29)), memberDeclaration.getRange().get())
assertTrue(memberDeclaration.hasRange())
assertEquals(new Range(new Position(1, 22), new Position(1, 34)), memberDeclaration.getRange().get())
assertEquals("Lexical error at line 1, column 34.  Encountered: \"\\\"\" (34), after : \"\\\"\\\\uABC\"", cu.getProblem(0).getMessage())
assertTrue(memberDeclaration.hasRange())
assertEquals(new Range(new Position(1, 17), new Position(1, 31)), memberDeclaration.getRange().get())
assertTrue(range.isPresent())
assertEquals(new Range(new Position(1, 8), new Position(1, 12)), range.get())
assertTrue(range.isPresent())
assertEquals(new Range(new Position(1, 13), new Position(1, 17)), range.get())
assertTrue(range.isPresent())
assertEquals(new Range(new Position(1, 8), new Position(1, 9)), range.get())
assertTrue(range.isPresent())
assertEquals(new Range(new Position(1, 10), new Position(1, 11)), range.get())
assertEquals(range(1, 9, 1, 17), problem.getLocation().get().toRange().get())
assertEquals("Parse error. Found <EOF>, expected one of  \";\" \"<\" \"@\" \"abstract\" \"boolean\" \"byte\" \"char\" \"class\" \"default\" \"double\" \"enum\" \"exports\" \"final\" \"float\" \"int\" \"interface\" \"long\" \"module\" \"native\" \"open\" \"opens\" \"private\" \"protected\" \"provides\" \"public\" \"record\" \"requires\" \"short\" \"static\" \"strictfp\" \"synchronized\" \"to\" \"transient\" \"transitive\" \"uses\" \"void\" \"volatile\" \"with\" \"yield\" \"{\" \"}\" <IDENTIFIER>", problem.getMessage())
assertInstanceOf(ParseException.class, problem.getCause().get())
assertTrue(type instanceof IntersectionType)
assertEquals(2, intersectionType.getElements().size())
assertTrue(intersectionType.getElements().get(0) instanceof ClassOrInterfaceType)
assertEquals("Runnable", intersectionType.getElements().get(0).asClassOrInterfaceType().getNameAsString())
assertTrue(intersectionType.getElements().get(1) instanceof ClassOrInterfaceType)
assertEquals("Serializable", intersectionType.getElements().get(1).asClassOrInterfaceType().getNameAsString())
assertEquals(range(3, 13, 3, 54), type.getRange().get())
assertEquals(range(3, 12, 3, 101), castExpr.getRange().get())
assertEquals(range(3, 12, 3, 101), castExpr.getRange().get())
assertEquals(range(3, 56, 3, 101), lambdaExpr.getRange().get())
assertEquals(GeneratedJavaParserConstants.LPAREN, lambdaExpr.getTokenRange().get().getBegin().getKind())
assertEquals(GeneratedJavaParserConstants.RPAREN, lambdaExpr.getTokenRange().get().getEnd().getKind())
assertEquals(range(3, 68, 3, 101), lambdaBody.getRange().get())
assertEquals("{}", blockStmt.getTokenRange().get().toString())
assertEquals(1, forStmt.getInitialization().size())
assertTrue(forStmt.getInitialization().get(0).isVariableDeclarationExpr())
assertEquals(2, forStmt.getInitialization().get(0).asVariableDeclarationExpr().getVariables().size())
assertEquals("a", forStmt.getInitialization().get(0).asVariableDeclarationExpr().getVariables().get(0).getNameAsString())
assertEquals("b", forStmt.getInitialization().get(0).asVariableDeclarationExpr().getVariables().get(1).getNameAsString())
assertTrue(forStmt.getInitialization().get(0).asVariableDeclarationExpr().getVariables().get(1).getInitializer().isPresent())
assertEquals(1, forStmt.getInitialization().size())
assertTrue(forStmt.getInitialization().get(0).isVariableDeclarationExpr())
assertEquals(2, forStmt.getInitialization().get(0).asVariableDeclarationExpr().getVariables().size())
assertEquals("i", forStmt.getInitialization().get(0).asVariableDeclarationExpr().getVariables().get(0).getNameAsString())
assertEquals("j", forStmt.getInitialization().get(0).asVariableDeclarationExpr().getVariables().get(1).getNameAsString())
assertTrue(forStmt.getInitialization().get(0).asVariableDeclarationExpr().getVariables().get(1).getInitializer().isPresent())
assertEquals(expected, actual)
assertEquals(lineSeparator, detectedLineSeparator)
assertEquals(lineSeparator, lineSeparator_cu)
assertEquals(lineSeparator, lineSeparator_fd)
Assertions.assertEquals(new Javadoc(JavadocDescription.parseText("A simple line of text")), JavadocParser.parse("A simple line of text"))
Assertions.assertEquals(new Javadoc(JavadocDescription.parseText("")), JavadocParser.parse(SYSTEM_EOL))
assertEquals(new Javadoc(JavadocDescription.parseText("The line number of the first character of this Token.")), JavadocParser.parse(" The line number of the first character of this Token. "))
assertEquals(new Javadoc(JavadocDescription.parseText("The string image of the token.")), JavadocParser.parse(SYSTEM_EOL + "   * The string image of the token." + SYSTEM_EOL + "   "))
assertEquals(new Javadoc(JavadocDescription.parseText("The version identifier for this Serializable class." + SYSTEM_EOL + "Increment only if the <i>serialized</i> form of the" + SYSTEM_EOL + "class changes.")), JavadocParser.parse(text))
assertEquals(new Javadoc(JavadocDescription.parseText("Returns a new Token object, by default." + SYSTEM_EOL + "However, if you want, you can create and return subclass objects based on the value of ofKind." + SYSTEM_EOL + SYSTEM_EOL + "   case MyParserConstants.ID : return new IDToken(ofKind, image);" + SYSTEM_EOL + SYSTEM_EOL + "to the following switch statement. Then you can cast matchedToken")), JavadocParser.parse(text))
assertEquals(new Javadoc(JavadocDescription.parseText("")).addBlockTag(new JavadocBlockTag(JavadocBlockTag.Type.DEPRECATED, "")).addBlockTag(new JavadocBlockTag(JavadocBlockTag.Type.SEE, "#getEndColumn")), JavadocParser.parse(text))
assertEquals(underTest, JavadocParser.parse(expectedText))
assertEquals(1, underTest.getBlockTags().size())
assertEquals("unofficial", underTest.getBlockTags().get(0).getTagName())
assertEquals(new Javadoc(JavadocDescription.parseText("Add a field to this and automatically add the import of the type if needed")).addBlockTag(JavadocBlockTag.createParamBlockTag("typeClass", "the type of the field")).addBlockTag(JavadocBlockTag.createParamBlockTag("name", "the name of the field")).addBlockTag(JavadocBlockTag.createParamBlockTag("modifiers", "the modifiers like {@link Modifier#PUBLIC}")).addBlockTag(new JavadocBlockTag(JavadocBlockTag.Type.RETURN, "the {@link FieldDeclaration} created")), res)
assertEquals(new Javadoc(JavadocDescription.parseText("Add a field to this and automatically add the import of the type if needed")).addBlockTag(JavadocBlockTag.createParamBlockTag("typeClass", "the type of the field" + SYSTEM_EOL + "    continued in a second line")).addBlockTag(JavadocBlockTag.createParamBlockTag("name", "the name of the field")).addBlockTag(JavadocBlockTag.createParamBlockTag("modifiers", "the modifiers like {@link Modifier#PUBLIC}")).addBlockTag(new JavadocBlockTag(JavadocBlockTag.Type.RETURN, "the {@link FieldDeclaration} created")), res)
assertEquals(-1, JavadocParser.startsWithAsterisk(""))
assertEquals(-1, JavadocParser.startsWithAsterisk(" ciao"))
assertEquals(0, JavadocParser.startsWithAsterisk("* ciao"))
assertEquals(3, JavadocParser.startsWithAsterisk("   * ciao"))
assertSame(javaParser, actualAdapter.getParser())
assertSame(javaParser.getParserConfiguration(), adapter.getParserConfiguration())
assertTrue(classA.isPresent())
assertEquals("A", classA.get().getNameAsString())
assertTrue(classA.isPresent())
assertEquals("A", classA.get().getNameAsString())
assertTrue(classA.isPresent())
assertEquals("A", classA.get().getNameAsString())
assertEquals(1, block.getStatements().size())
assertTrue(statement.isBreakStmt())
assertEquals("Optional", importDecl.getName().getIdentifier())
assertTrue(expression.isMethodCallExpr())
assertEquals("Test", annotation.getNameAsString())
assertTrue(annotationBody.isAnnotationDeclaration())
assertTrue(interfaceBody.isClassOrInterfaceDeclaration())
assertTrue(customType.isClassOrInterfaceType())
assertTrue(customType.isPrimitiveType())
assertTrue(variable.isFinal())
assertTrue(statement.getArguments().isEmpty())
assertEquals("JavaParser", name.getIdentifier())
assertEquals("JavaParser", name.getIdentifier())
assertEquals("foo", parameter.getNameAsString())
assertEquals("com.github.javaparser", packageDeclaration.getNameAsString())
assertEquals("A", typeDeclaration.getNameAsString())
assertEquals("X", moduleDeclaration.getNameAsString())
assertTrue(moduleDirective.isModuleOpensDirective())
assertEquals("T", typeParameter.getNameAsString())
assertEquals("test", methodDeclaration.getNameAsString())
assertFalse(createValue().isStatic())
assertFalse(module.isOpen())
assertFalse(myClassDeclaration.isInterface())
assertFalse(constructorWithListParam.isPresent())
assertFalse(iterator.hasNext())
assertFalse(cu.getResult().isPresent())
assertFalse(result.getResult().get().getTokenRange().isPresent())
assertFalse(forStmt.getInitialization().get(0).asVariableDeclarationExpr().getVariables().get(0).getInitializer().isPresent())
assertFalse(forStmt.getInitialization().get(0).asVariableDeclarationExpr().getVariables().get(0).getInitializer().isPresent())
assertEquals("\\r", LineSeparator.CR.asEscapedString())
assertEquals("\\n", LineSeparator.LF.asEscapedString())
assertEquals("\\r\\n", LineSeparator.CRLF.asEscapedString())
assertEquals(LineSeparator.CR, LineSeparator.lookup("\r").get())
assertEquals(LineSeparator.LF, LineSeparator.lookup("\n").get())
assertEquals(LineSeparator.CRLF, LineSeparator.lookup("\r\n").get())
assertFalse(LineSeparator.lookup("").isPresent())
assertFalse(LineSeparator.lookup(" ").isPresent())
assertFalse(LineSeparator.lookup("\\r").isPresent())
assertFalse(LineSeparator.lookup("\\n").isPresent())
assertFalse(LineSeparator.lookup(" \\r").isPresent())
assertFalse(LineSeparator.lookup(" \\n").isPresent())
assertFalse(LineSeparator.lookup("\\r ").isPresent())
assertFalse(LineSeparator.lookup("\\n ").isPresent())
assertFalse(LineSeparator.lookup("test 123 123").isPresent())
assertFalse(LineSeparator.lookup("\r \n").isPresent())
assertFalse(LineSeparator.lookup("\\r \\n").isPresent())
assertEquals(LineSeparator.CR, LineSeparator.lookupEscaped("\\r").get())
assertEquals(LineSeparator.LF, LineSeparator.lookupEscaped("\\n").get())
assertEquals(LineSeparator.CRLF, LineSeparator.lookupEscaped("\\r\\n").get())
assertFalse(LineSeparator.lookupEscaped("").isPresent())
assertFalse(LineSeparator.lookupEscaped(" ").isPresent())
assertFalse(LineSeparator.lookupEscaped("\r").isPresent())
assertFalse(LineSeparator.lookupEscaped("\n").isPresent())
assertFalse(LineSeparator.lookupEscaped(" \r").isPresent())
assertFalse(LineSeparator.lookupEscaped(" \n").isPresent())
assertFalse(LineSeparator.lookupEscaped("\r ").isPresent())
assertFalse(LineSeparator.lookupEscaped("\n ").isPresent())
assertFalse(LineSeparator.lookupEscaped("test 123 123").isPresent())
assertFalse(LineSeparator.lookupEscaped("\r \n").isPresent())
assertFalse(LineSeparator.lookupEscaped("\\r \\n").isPresent())
assertEquals(LineSeparator.CR, LineSeparator.detect("\r"))
assertEquals(LineSeparator.LF, LineSeparator.detect("\n"))
assertEquals(LineSeparator.CRLF, LineSeparator.detect("\r\n"))
assertEquals(LineSeparator.NONE, LineSeparator.detect(""))
assertEquals(LineSeparator.NONE, LineSeparator.detect("test 123 123"))
assertEquals(LineSeparator.MIXED, LineSeparator.detect("\r \n"))
assertEquals("\r", LineSeparator.CR.asRawString())
assertEquals("\n", LineSeparator.LF.asRawString())
assertEquals("\r\n", LineSeparator.CRLF.asRawString())
assertEquals("\n", LineSeparator.ARBITRARY.asRawString())
assertEquals(8, LineSeparator.values().length)
assertEquals(LineSeparator.CR, LineSeparator.valueOf("CR"))
assertEquals(LineSeparator.LF, LineSeparator.valueOf("LF"))
assertEquals(LineSeparator.CRLF, LineSeparator.valueOf("CRLF"))
assertEquals(LineSeparator.NONE, LineSeparator.valueOf("NONE"))
assertEquals(LineSeparator.MIXED, LineSeparator.valueOf("MIXED"))
assertEquals(LineSeparator.SYSTEM, LineSeparator.valueOf("SYSTEM"))
assertEquals(LineSeparator.UNKNOWN, LineSeparator.valueOf("UNKNOWN"))
assertEquals(LineSeparator.ARBITRARY, LineSeparator.valueOf("ARBITRARY"))
assertEquals(1, map.size())
assertEquals(2, map.size())
assertEquals(1, (int) map.get(x1))
assertTrue(map.containsKey(x1))
assertEquals(2, visitorMap.size())
assertTrue(map.containsKey(x1))
assertEquals(7, units.size())
assertTrue(units.stream().allMatch(unit -> !unit.getTypes().isEmpty() || unit.getModule().isPresent()))
assertTrue(parseResults.stream().noneMatch(cu -> cu.getResult().get().getStorage().get().getPath().toString().contains("source.root")))
assertEquals(3, sourceRoots.size())
fail(s)
assertEquals(normalizeEolInTextBlock(expected, LineSeparator.ARBITRARY), normalizeEolInTextBlock(actual, LineSeparator.ARBITRARY))
assertEquals(expectedLineSeparator, actualLineSeparator)
assertEquals("TabcTabcd", testAdapter.output)
assertEquals("IabcIabc", testAdapter.output)
assertEquals("EabcMnullEabcMnullEabcM!!!EabcdM!!!EnullM!!!", testAdapter.output)
assertTrue(list.contains(x1))
assertTrue(vList.size() == 2 && vList.containsAll(list))
assertEquals(x1, itr.next())
assertEquals(1, list.size())
assertEquals(x2, itr.next())
assertEquals(0, list.size())
assertEquals(x1, itr.next())
assertEquals(3, list.size())
assertEquals(x2, itr.next())
assertEquals(2, list.size())
assertTrue(list.remove(x1))
assertEquals(0, vList.size())
assertEquals(2, vList.size())
assertEquals(4, list.size())
assertEquals(2, subLst.size())
assertEquals(3, subLst.size())
assertEquals(5, list.size())
assertEquals("setValue", setterName("value"))
assertEquals("setBlue", setterName("isBlue"))
assertEquals("getValue", getterName(Object.class, "value"))
assertEquals("isBlue", getterName(boolean.class, "isBlue"))
assertEquals("isBlue", getterName(boolean.class, "blue"))
assertEquals("getBlue", getterName(Boolean.class, "blue"))
assertEquals("getIsBlue", getterName(Boolean.class, "isBlue"))
assertEquals("value", getterToPropertyName("getValue"))
assertEquals("blue", getterToPropertyName("isBlue"))
assertEquals("value", getterToPropertyName("hasValue"))
assertEquals("Unexpected getterName 'value'", thrown.getMessage())
fail(s, "A execução falhou por uma causa deliberada")
assertEquals("<abc, def>", pair.toString())
assertEquals("<null, null>", pair.toString())
assertEquals(3, results.size())
assertTrue(units.stream().noneMatch(unit -> unit.getTypes().isEmpty()))
assertEquals(3, results.size())
assertTrue(units.stream().noneMatch(unit -> unit.getTypes().isEmpty()))
assertTrue(isNullOrEmpty(null))
assertTrue(isNullOrEmpty(new ArrayList<>()))
assertEquals("foo", assertNotNull("foo"))
assertEquals("foo", assertNonEmpty("foo"))
assertEquals((Number) 2, assertNonNegative(2))
assertEquals((Number) 2, assertPositive(2))
assertEquals("f\\no\\ro", escapeEndOfLines("f\no\ro"))
assertEquals("", readerToString(reader))
assertEquals("foo", toCamelCase("foo"))
assertEquals("foo", toCamelCase("Foo"))
assertEquals("foo", toCamelCase("FOO"))
assertEquals("foo", toCamelCase("fOo"))
assertEquals("abc", screamingToCamelCase("ABC"))
assertEquals("abcDef", screamingToCamelCase("ABC_DEF"))
assertEquals("abc", screamingToCamelCase("ABC_"))
assertEquals("", camelCaseToScreaming(""))
assertEquals("ABC", camelCaseToScreaming("abc"))
assertEquals("HELLO_HELLO", camelCaseToScreaming("HelloHello"))
assertEquals("APE_TAIL", camelCaseToScreaming("apeTail"))
assertEquals("foo", nextWord("foo"))
assertEquals("foo", nextWord("foo bar"))
assertEquals("foo", nextWord("foo bar Baz"))
assertEquals("foo", indent(new StringBuilder("foo"), 0).toString())
assertEquals("foo\t", indent(new StringBuilder("foo"), 1).toString())
assertEquals("foo\t\t", indent(new StringBuilder("foo"), 2).toString())
assertEquals("foo\t\t\t", indent(new StringBuilder("foo"), 3).toString())
assertEquals("F", capitalize("f"))
assertEquals("Fo", capitalize("fo"))
assertEquals("f", decapitalize("F"))
assertEquals("fo", decapitalize("Fo"))
assertTrue(valueIsNullOrEmpty(null))
assertTrue(valueIsNullOrEmpty(Optional.empty()))
assertTrue(valueIsNullOrEmpty(new ArrayList<>()))
assertTrue(valueIsNullOrEmptyStringOrOptional(null))
assertTrue(valueIsNullOrEmptyStringOrOptional(Optional.empty()))
assertEquals(-1, indexOfElementByObjectIdentity(new ArrayList<>(), "bar"))
assertEquals(1, indexOfElementByObjectIdentity(new ArrayList<>(Arrays.asList("foo", "bar")), "bar"))
assertEquals(new HashSet<>(Arrays.asList("bar", "foo", "baz")), set("foo", "bar", "baz"))
assertEquals("Q Q Q", result)
assertEquals("foo", removeFileExtension("foo"))
assertEquals("foo", removeFileExtension("foo.txt"))
assertEquals("abc", trimTrailingSpaces("abc"))
assertEquals("  abc", trimTrailingSpaces("  abc"))
assertEquals("abc", trimTrailingSpaces("abc  "))
assertEquals("  abc", trimTrailingSpaces("  abc  "))
assertEquals("abc", trimTrailingSpaces("abc\t\0"))
assertEquals("", trimTrailingSpaces("    "))
assertEquals("", trimTrailingSpaces(""))
assertEquals(1, set.size())
assertEquals(2, set.size())
assertTrue(set.contains(x1))
assertTrue(set.size() == 2 && set.containsAll(list))
assertEquals(x1, itr.next())
assertEquals(1, set.size())
assertEquals(x2, itr.next())
assertEquals(0, set.size())
assertTrue(set.remove(x1))
assertEquals(0, set.size())
assertEquals(2, set.size())
assertTrue(contains)
assertTrue(contains)
assertTrue(o.getCommentedNode().isPresent())
assertEquals(6, actual.size())
assertEquals(0, actual.get(0).size())
assertEquals(0, actual.get(1).size())
assertEquals(0, actual.get(2).size())
assertEquals(0, actual.get(3).size())
assertEquals(0, actual.get(4).size())
assertEquals(0, actual.get(5).size())
assertEquals(6, actual.size())
assertEquals(1, actual.get(0).size())
assertEquals("org.junit.jupiter.api.Assertions.assertEquals", actual.get(0).get(0).getNameAsString())
assertEquals(1, actual.get(1).size())
assertEquals("java.util.List", actual.get(1).get(0).getNameAsString())
assertEquals(1, actual.get(2).size())
assertEquals("javax.swing", actual.get(2).get(0).getNameAsString())
assertEquals(1, actual.get(3).size())
assertEquals("org.junit.jupiter.api.Assertions", actual.get(3).get(0).getNameAsString())
assertEquals(1, actual.get(4).size())
assertEquals("com.example.Test", actual.get(4).get(0).getNameAsString())
assertEquals(1, actual.get(5).size())
assertEquals("pt.example.OtherTest", actual.get(5).get(0).getNameAsString())
assertEquals(6, actual.size())
assertEquals(0, actual.get(0).size())
assertEquals(0, actual.get(1).size())
assertEquals(0, actual.get(2).size())
assertEquals(0, actual.get(3).size())
assertEquals(2, actual.get(4).size())
assertEquals("com.example.A", actual.get(4).get(0).getNameAsString())
assertEquals("com.example.B", actual.get(4).get(1).getNameAsString())
assertEquals(0, actual.get(5).size())
assertEquals(3, actual.size())
assertEquals(0, actual.get(0).size())
assertEquals(0, actual.get(1).size())
assertEquals(0, actual.get(2).size())
assertEquals(3, actual.size())
assertEquals(1, actual.get(0).size())
assertEquals("com.example.Test", actual.get(0).get(0).getNameAsString())
assertEquals(1, actual.get(1).size())
assertEquals("java.util.List", actual.get(1).get(0).getNameAsString())
assertEquals(1, actual.get(2).size())
assertEquals("org.junit.jupiter.api.Assertions.assertEquals", actual.get(2).get(0).getNameAsString())
assertEquals(3, actual.size())
assertEquals(2, actual.get(0).size())
assertEquals("com.example.A", actual.get(0).get(0).getNameAsString())
assertEquals("com.example.B", actual.get(0).get(1).getNameAsString())
assertEquals(0, actual.get(1).size())
assertEquals(0, actual.get(2).size())
assertEquals(1, actual.size())
assertEquals(0, actual.get(0).size())
assertEquals(1, actual.size())
assertEquals(3, actualImports.size())
assertEquals("org.junit.jupiter.api.Assertions.assertEquals", actualImports.get(0).getNameAsString())
assertEquals("java.util.List", actualImports.get(1).getNameAsString())
assertEquals("com.example.Test", actualImports.get(2).getNameAsString())
assertEquals(1, actual.size())
assertEquals(2, actualImports.size())
assertEquals("com.example.A", actualImports.get(0).getNameAsString())
assertEquals("com.example.B", actualImports.get(1).getNameAsString())
assertTrue(getOption(config, ConfigOption.PRINT_COMMENTS).isPresent())
assertTrue(getOption(config, ConfigOption.PRINT_JAVADOC).isPresent())
assertTrue(getOption(config, ConfigOption.SPACE_AROUND_OPERATORS).isPresent())
assertTrue(getOption(config, ConfigOption.INDENT_CASE_IN_SWITCH).isPresent())
assertTrue(getOption(config, ConfigOption.MAX_ENUM_CONSTANTS_TO_ALIGN_HORIZONTALLY).isPresent())
assertTrue(getOption(config, ConfigOption.END_OF_LINE_CHARACTER).isPresent())
assertEquals(getOption(config, ConfigOption.MAX_ENUM_CONSTANTS_TO_ALIGN_HORIZONTALLY).get().asValue(), Integer.valueOf(5))
assertEquals(getOption(config, ConfigOption.MAX_ENUM_CONSTANTS_TO_ALIGN_HORIZONTALLY).get().asValue(), Integer.valueOf(5))
assertTrue(getOption(config, ConfigOption.MAX_ENUM_CONSTANTS_TO_ALIGN_HORIZONTALLY).get().asValue() == Integer.valueOf(5))
assertEquals(getOption(config, ConfigOption.END_OF_LINE_CHARACTER).get().asString(), Utils.SYSTEM_EOL)
assertEquals(getOption(config, ConfigOption.MAX_ENUM_CONSTANTS_TO_ALIGN_HORIZONTALLY).get().asValue(), Integer.valueOf(2))
assertTrue(getOption(config, ConfigOption.PRINT_COMMENTS).isPresent())
assertTrue(getOption(config, ConfigOption.END_OF_LINE_CHARACTER).isPresent())
assertEquals("int[]", vde1.getMaximumCommonType().get().toString())
assertEquals("int[][][]", vde2.getMaximumCommonType().get().toString())
assertEquals("int[][]", vde3.getMaximumCommonType().get().toString())
assertEquals("int", vde1.getMaximumCommonType().get().toString())
assertEquals("int[][] @Foo []", vde2.getMaximumCommonType().get().toString())
assertEquals("Foo.class", print(expr))
assertEquals("a=1+1;", print(statement1, conf1))
assertEquals("a = 1 + 1;", print(statement1))
assertEquals("a = 1 - 1;", print(statement2))
assertEquals("a = 1 * 1;", print(statement3))
assertEquals("a = 1 % 1;", print(statement4))
assertEquals("a = 1 / 1;", print(statement5))
assertEquals("if (1 > 2 && 1 < 3 || 1 < 3) {" + SYSTEM_EOL + "}", print(statement6))
assertEquals("a=1+1;", print(statement1, conf1))
assertEquals("a=1+1;", print(statement2, conf2))
assertEquals("a = 1 + 1;", print(statement3, conf3))
assertEquals("a = 1 + 1;", print(statement4, conf4))
assertEquals("if (1>2&&1<3||1<3) {" + SYSTEM_EOL + "}", print(statement6, conf))
assertEquals("1+1", print(expression, spaces))
assertEquals("Foo[].class", print(expr))
assertEquals("Foo<String>.class", print(expr))
assertEquals("class A {" + SYSTEM_EOL + "}" + SYSTEM_EOL, print(node))
assertEquals("class A {" + SYSTEM_EOL + SYSTEM_EOL + "    int a;" + SYSTEM_EOL + "}" + SYSTEM_EOL, print(node))
assertEquals("int x(@O X A.B.this, int y) {" + SYSTEM_EOL + "}", print(node))
assertEquals("Runnable r = (Runnable & Serializable) (() -> {" + SYSTEM_EOL + "});", print(methodDeclaration.getBody().get().getStatements().get(0)))
assertEquals("Runnable & Serializable", print(type))
assertEquals("return (Comparator<Map.Entry<K, V>> & Serializable) (c1, c2) -> c1.getKey().compareTo(c2.getKey());", print(methodDeclaration.getBody().get().getStatements().get(0)))
assertEquals(String.format("public class A {%s    // stuff%s}%s", SYSTEM_EOL, SYSTEM_EOL, SYSTEM_EOL), content)
assertEquals("<root type='BinaryExpr' operator='PLUS'><left type='IntegerLiteralExpr' value='1'></left><right type='IntegerLiteralExpr' value='1'></right></root>", output)
assertEquals("<root operator='PLUS'><left value='1'></left><right value='1'></right></root>", output)
assertEquals("<root type='MethodCallExpr'><name type='SimpleName' identifier='a'></name><arguments><argument type='IntegerLiteralExpr' value='1'></argument><argument type='IntegerLiteralExpr' value='2'></argument></arguments></root>", output)
assertEquals("int a, b[];", prettyPrintField(code))
assertEquals("int[][] a, b;", prettyPrintField(code))
assertEquals("int[] a[][], b;", prettyPrintField(code))
assertEquals("int[] a, b;", prettyPrintField(code))
assertEquals("int[] a, b;", prettyPrintField(code))
assertEquals("int a, b[]", prettyPrintVar(code))
assertEquals("int[][] a, b", prettyPrintVar(code))
assertEquals("int[] a[][], b", prettyPrintVar(code))
assertEquals("int[] a, b", prettyPrintVar(code))
assertEquals("int[] a, b", prettyPrintVar(code))
assertEquals("A", prettyPrintConfigurable(code))
assertEquals(expected, getDefaultPrinter(configuration).print(parse(code)))
assertEquals(expected, getDefaultPrinter(configuration).print(parse(code)))
assertEquals(expected, printed)
assertEquals(expected, getDefaultPrinter(configuration).print(parse(code)))
assertEquals("int a, b;", fieldDeclaration.toString())
assertEquals("??? a, b;", fieldDeclaration.toString())
assertEquals("double a, b;", fieldDeclaration.toString())
assertEquals(2, td.getAllContainedComments().size())
assertEquals(2, td.getAllContainedComments().size())
assertTrue(cu.toString().contains("        // TODO"))
assertTrue(cu.toString().contains("        /* TODO */"))
assertTrue(indentation.getSize() == 4)
assertEquals("    ", indentation.getIndent())
assertTrue(indentation.getSize() == 2)
assertEquals("  ", indentation.getIndent())
assertTrue(indentation.getSize() == 2)
assertEquals("\t\t", indentation.getIndent())
assertTrue(indentation.getSize() == 2)
assertEquals("  ", indentation.getIndent())
assertTrue(indentation.getType() == IndentType.TABS)
assertEquals("\t\t", indentation.getIndent())
assertEquals("int a, b[];", prettyPrintField(code))
assertEquals("int[][] a, b;", prettyPrintField(code))
assertEquals("int[] a[][], b;", prettyPrintField(code))
assertEquals("int[] a, b;", prettyPrintField(code))
assertEquals("int[] a, b;", prettyPrintField(code))
assertEquals("int a, b[]", prettyPrintVar(code))
assertEquals("int[][] a, b", prettyPrintVar(code))
assertEquals("int[] a[][], b", prettyPrintVar(code))
assertEquals("int[] a, b", prettyPrintVar(code))
assertEquals("int[] a, b", prettyPrintVar(code))
assertEquals("test", prettyPrintConfigurable(code))
assertEquals(expected, new DefaultPrettyPrinter(config).print(parse(code)))
assertEquals(expected, new DefaultPrettyPrinter(config).print(parse(code)))
assertEquals(expected, new DefaultPrettyPrinter(config).print(parse(code)))
assertEquals(expected, printed)
assertEquals("int a, b;", fieldDeclaration.toString())
assertEquals("??? a, b;", fieldDeclaration.toString())
assertEquals("double a, b;", fieldDeclaration.toString())
assertEquals(2, td.getAllContainedComments().size())
assertEquals(2, td.getAllContainedComments().size())
assertTrue(cu.toString().contains("        // TODO"))
assertTrue(cu.toString().contains("        /* TODO */"))
assertTrue(indentation.getSize() == 4)
assertEquals("    ", indentation.getIndent())
assertTrue(indentation.getSize() == 2)
assertEquals("  ", indentation.getIndent())
assertTrue(indentation.getSize() == 2)
assertEquals("\t\t", indentation.getIndent())
assertTrue(indentation.getSize() == 2)
assertEquals("  ", indentation.getIndent())
assertTrue(indentation.getType() == IndentType.TABS)
assertEquals("\t\t", indentation.getIndent())
assertEquals(expectedOutput, output)
assertEquals(expectedOutput, output)
assertTrue(md.getDefaultValue().get().remove())
assertTrue(it.getJavadocComment().get().remove())
assertTrue(removed)
assertTrue(md.get().getParameters().stream().allMatch(p -> p.getParentNode().isPresent()))
assertTrue(md.get().getParameters().stream().allMatch(p -> p.getParentNode().isPresent()))
assertTrue(md.get().getParameters().stream().allMatch(p -> p.getParentNode().isPresent()))
assertTrue(isReplaced)
assertTrue(md.get().getParameters().stream().allMatch(p -> p.getParentNode().isPresent()))
assertFalse(map.containsKey(x1))
assertFalse(isNullOrEmpty(new ArrayList<>(Arrays.asList("foo", "bar"))))
assertFalse(valueIsNullOrEmpty(Optional.ofNullable("foo")))
assertFalse(valueIsNullOrEmpty(new ArrayList<>(Arrays.asList("foo", "bar"))))
assertFalse(valueIsNullOrEmptyStringOrOptional("foo"))
assertFalse(valueIsNullOrEmptyStringOrOptional(Optional.ofNullable("foo")))
assertFalse(contains)
assertFalse(contains)
assertFalse(contains)
assertFalse(getOption(config, ConfigOption.PRINT_COMMENTS).isPresent())
assertFalse(getOption(config, ConfigOption.END_OF_LINE_CHARACTER).isPresent())
assertFalse(printer.getConfiguration().get(new DefaultConfigurationOption(ConfigOption.PRINT_COMMENTS)).isPresent())
assertFalse(detectedLineSeparator.equals(LineSeparator.MIXED))
assertEquals(eol.asEscapedString(), detectedLineSeparator.asEscapedString())
assertEquals(normaliseNewlines(expected), normaliseNewlines(actual))
assertTrue(LexicalPreservingPrinter.getOrCreateNodeText(expression).getElements().stream().anyMatch(elem -> elem.expand().equals(Keyword.PRIVATE.asString())))
assertTrue(LexicalPreservingPrinter.print(expression).equals("private int[] i"))
assertTrue(LexicalPreservingPrinter.getOrCreateNodeText(expression).getElements().stream().anyMatch(elem -> elem.expand().equals(Keyword.PRIVATE.asString())))
assertTrue(LexicalPreservingPrinter.print(expression).equals("private int [] i"))
assertTrue(LexicalPreservingPrinter.getOrCreateNodeText(expression).getElements().stream().anyMatch(elem -> elem.expand().equals(Keyword.PRIVATE.asString())))
assertTrue(LexicalPreservingPrinter.print(expression).equals("private int [ ] i"))
assertTrue(LexicalPreservingPrinter.getOrCreateNodeText(expression).getElements().stream().anyMatch(elem -> elem.expand().equals(Keyword.PRIVATE.asString())))
assertTrue(LexicalPreservingPrinter.print(expression).equals("private int   [   ]   i"))
assertTrue(exprs.size() == 2)
assertEquals("System.out.println(\"I'm a clone10\");", exprs.get(0).toString())
assertEquals(2, csmOriginal.elements.size())
assertEquals(new CsmChild(cu.getType(0)), csmOriginal.elements.get(0))
assertEquals(new CsmToken(eolTokenKind()), csmOriginal.elements.get(1))
assertEquals(3, csmChanged.elements.size())
assertEquals(new CsmChild(packageDeclaration), csmChanged.elements.get(0))
assertEquals(new CsmChild(cu.getType(0)), csmChanged.elements.get(1))
assertEquals(new CsmToken(eolTokenKind()), csmChanged.elements.get(2))
assertEquals(new CsmToken(GeneratedJavaParserConstants.AT), csm.elements.get(i++))
assertEquals(new CsmToken(GeneratedJavaParserConstants.INTERFACE), csm.elements.get(i++))
assertEquals(new CsmToken(spaceTokenKind()), csm.elements.get(i++))
assertEquals(new CsmChild(annotationDeclaration.getName()), csm.elements.get(i++))
assertEquals(new CsmToken(spaceTokenKind()), csm.elements.get(i++))
assertEquals(new CsmToken(GeneratedJavaParserConstants.LBRACE), csm.elements.get(i++))
assertEquals(new CsmToken(eolTokenKind()), csm.elements.get(i++))
assertEquals(new CsmChild(annotationDeclaration.getMember(0)), csm.elements.get(i++))
assertEquals(new CsmToken(eolTokenKind()), csm.elements.get(i++))
assertEquals(new CsmChild(annotationDeclaration.getMember(1)), csm.elements.get(i++))
assertEquals(new CsmToken(eolTokenKind()), csm.elements.get(i++))
assertEquals(new CsmChild(annotationDeclaration.getMember(2)), csm.elements.get(i++))
assertEquals(new CsmToken(eolTokenKind()), csm.elements.get(i++))
assertEquals(new CsmChild(annotationDeclaration.getMember(3)), csm.elements.get(i++))
assertEquals(new CsmToken(eolTokenKind()), csm.elements.get(i++))
assertEquals(new CsmChild(annotationDeclaration.getMember(4)), csm.elements.get(i++))
assertEquals(new CsmToken(eolTokenKind()), csm.elements.get(i++))
assertEquals(new CsmChild(annotationDeclaration.getMember(5)), csm.elements.get(i++))
assertEquals(new CsmToken(eolTokenKind()), csm.elements.get(i++))
assertEquals(new CsmToken(GeneratedJavaParserConstants.RBRACE), csm.elements.get(i++))
assertEquals(i, csm.elements.size())
assertEquals(new CsmChild(Modifier.publicModifier()), csm.elements.get(i++))
assertEquals(new CsmToken(spaceTokenKind()), csm.elements.get(i++))
assertEquals(new CsmToken(GeneratedJavaParserConstants.AT), csm.elements.get(i++))
assertEquals(new CsmToken(GeneratedJavaParserConstants.INTERFACE), csm.elements.get(i++))
assertEquals(new CsmToken(spaceTokenKind()), csm.elements.get(i++))
assertEquals(new CsmChild(annotationDeclaration.getName()), csm.elements.get(i++))
assertEquals(new CsmToken(spaceTokenKind()), csm.elements.get(i++))
assertEquals(new CsmToken(GeneratedJavaParserConstants.LBRACE), csm.elements.get(i++))
assertEquals(new CsmToken(eolTokenKind()), csm.elements.get(i++))
assertEquals(new CsmChild(annotationDeclaration.getMember(0)), csm.elements.get(i++))
assertEquals(new CsmToken(eolTokenKind()), csm.elements.get(i++))
assertEquals(new CsmChild(annotationDeclaration.getMember(1)), csm.elements.get(i++))
assertEquals(new CsmToken(eolTokenKind()), csm.elements.get(i++))
assertEquals(new CsmChild(annotationDeclaration.getMember(2)), csm.elements.get(i++))
assertEquals(new CsmToken(eolTokenKind()), csm.elements.get(i++))
assertEquals(new CsmChild(annotationDeclaration.getMember(3)), csm.elements.get(i++))
assertEquals(new CsmToken(eolTokenKind()), csm.elements.get(i++))
assertEquals(new CsmChild(annotationDeclaration.getMember(4)), csm.elements.get(i++))
assertEquals(new CsmToken(eolTokenKind()), csm.elements.get(i++))
assertEquals(new CsmChild(annotationDeclaration.getMember(5)), csm.elements.get(i++))
assertEquals(new CsmToken(eolTokenKind()), csm.elements.get(i++))
assertEquals(new CsmToken(GeneratedJavaParserConstants.RBRACE), csm.elements.get(i++))
assertEquals(i, csm.elements.size())
assertEquals(new CsmToken(GeneratedJavaParserConstants.AT), csm.elements.get(i++))
assertEquals(new CsmToken(GeneratedJavaParserConstants.INTERFACE), csm.elements.get(i++))
assertEquals(new CsmToken(spaceTokenKind()), csm.elements.get(i++))
assertEquals(new CsmChild(newName), csm.elements.get(i++))
assertEquals(new CsmToken(spaceTokenKind()), csm.elements.get(i++))
assertEquals(new CsmToken(GeneratedJavaParserConstants.LBRACE), csm.elements.get(i++))
assertEquals(new CsmToken(eolTokenKind()), csm.elements.get(i++))
assertEquals(new CsmChild(annotationDeclaration.getMember(0)), csm.elements.get(i++))
assertEquals(new CsmToken(eolTokenKind()), csm.elements.get(i++))
assertEquals(new CsmChild(annotationDeclaration.getMember(1)), csm.elements.get(i++))
assertEquals(new CsmToken(eolTokenKind()), csm.elements.get(i++))
assertEquals(new CsmChild(annotationDeclaration.getMember(2)), csm.elements.get(i++))
assertEquals(new CsmToken(eolTokenKind()), csm.elements.get(i++))
assertEquals(new CsmChild(annotationDeclaration.getMember(3)), csm.elements.get(i++))
assertEquals(new CsmToken(eolTokenKind()), csm.elements.get(i++))
assertEquals(new CsmChild(annotationDeclaration.getMember(4)), csm.elements.get(i++))
assertEquals(new CsmToken(eolTokenKind()), csm.elements.get(i++))
assertEquals(new CsmChild(annotationDeclaration.getMember(5)), csm.elements.get(i++))
assertEquals(new CsmToken(eolTokenKind()), csm.elements.get(i++))
assertEquals(new CsmToken(GeneratedJavaParserConstants.RBRACE), csm.elements.get(i++))
assertEquals(i, csm.elements.size())
assertEquals(new CsmChild(Modifier.publicModifier()), csm.elements.get(i++))
assertEquals(new CsmToken(spaceTokenKind()), csm.elements.get(i++))
assertEquals(new CsmToken(GeneratedJavaParserConstants.AT), csm.elements.get(i++))
assertEquals(new CsmToken(GeneratedJavaParserConstants.INTERFACE), csm.elements.get(i++))
assertEquals(new CsmToken(spaceTokenKind()), csm.elements.get(i++))
assertEquals(new CsmChild(annotationDeclaration.getName()), csm.elements.get(i++))
assertEquals(new CsmToken(spaceTokenKind()), csm.elements.get(i++))
assertEquals(new CsmToken(GeneratedJavaParserConstants.LBRACE), csm.elements.get(i++))
assertEquals(new CsmToken(eolTokenKind()), csm.elements.get(i++))
assertEquals(new CsmChild(annotationDeclaration.getMember(0)), csm.elements.get(i++))
assertEquals(new CsmToken(eolTokenKind()), csm.elements.get(i++))
assertEquals(new CsmChild(annotationDeclaration.getMember(1)), csm.elements.get(i++))
assertEquals(new CsmToken(eolTokenKind()), csm.elements.get(i++))
assertEquals(new CsmChild(annotationDeclaration.getMember(2)), csm.elements.get(i++))
assertEquals(new CsmToken(eolTokenKind()), csm.elements.get(i++))
assertEquals(new CsmChild(annotationDeclaration.getMember(3)), csm.elements.get(i++))
assertEquals(new CsmToken(eolTokenKind()), csm.elements.get(i++))
assertEquals(new CsmChild(annotationDeclaration.getMember(4)), csm.elements.get(i++))
assertEquals(new CsmToken(eolTokenKind()), csm.elements.get(i++))
assertEquals(new CsmChild(annotationDeclaration.getMember(5)), csm.elements.get(i++))
assertEquals(new CsmToken(eolTokenKind()), csm.elements.get(i++))
assertEquals(new CsmToken(GeneratedJavaParserConstants.RBRACE), csm.elements.get(i++))
assertEquals(i, csm.elements.size())
assertEquals(new CsmChild(Modifier.publicModifier()), csm.elements.get(i++))
assertEquals(new CsmToken(spaceTokenKind()), csm.elements.get(i++))
assertEquals(new CsmToken(GeneratedJavaParserConstants.AT), csm.elements.get(i++))
assertEquals(new CsmToken(GeneratedJavaParserConstants.INTERFACE), csm.elements.get(i++))
assertEquals(new CsmToken(spaceTokenKind()), csm.elements.get(i++))
assertEquals(new CsmChild(annotationDeclaration.getName()), csm.elements.get(i++))
assertEquals(new CsmToken(spaceTokenKind()), csm.elements.get(i++))
assertEquals(new CsmToken(GeneratedJavaParserConstants.LBRACE), csm.elements.get(i++))
assertEquals(new CsmToken(eolTokenKind()), csm.elements.get(i++))
assertEquals(new CsmChild(annotationDeclaration.getMember(0)), csm.elements.get(i++))
assertEquals(new CsmToken(eolTokenKind()), csm.elements.get(i++))
assertEquals(new CsmChild(annotationDeclaration.getMember(1)), csm.elements.get(i++))
assertEquals(new CsmToken(eolTokenKind()), csm.elements.get(i++))
assertEquals(new CsmChild(annotationDeclaration.getMember(2)), csm.elements.get(i++))
assertEquals(new CsmToken(eolTokenKind()), csm.elements.get(i++))
assertEquals(new CsmChild(annotationDeclaration.getMember(3)), csm.elements.get(i++))
assertEquals(new CsmToken(eolTokenKind()), csm.elements.get(i++))
assertEquals(new CsmChild(annotationDeclaration.getMember(4)), csm.elements.get(i++))
assertEquals(new CsmToken(eolTokenKind()), csm.elements.get(i++))
assertEquals(new CsmChild(annotationDeclaration.getMember(5)), csm.elements.get(i++))
assertEquals(new CsmToken(eolTokenKind()), csm.elements.get(i++))
assertEquals(new CsmToken(GeneratedJavaParserConstants.RBRACE), csm.elements.get(i++))
assertEquals(i, csm.elements.size())
assertEquals(new CsmChild(ecd.getName()), csm.elements.get(i++))
assertEquals(i, csm.elements.size())
assertEquals(CsmElement.token(GeneratedJavaParserConstants.LBRACE), calculatedSyntaxModel.elements.get(index++))
assertEquals(CsmElement.newline(), calculatedSyntaxModel.elements.get(index++))
assertEquals(CsmElement.indent(), calculatedSyntaxModel.elements.get(index++))
assertTrue(isChild(calculatedSyntaxModel.elements.get(index++), ExpressionStmt.class))
assertEquals(CsmElement.newline(), calculatedSyntaxModel.elements.get(index++))
assertEquals(CsmElement.unindent(), calculatedSyntaxModel.elements.get(index++))
assertEquals(CsmElement.token(GeneratedJavaParserConstants.RBRACE), calculatedSyntaxModel.elements.get(index++))
assertEquals(index, calculatedSyntaxModel.elements.size())
assertEquals(DifferenceElement.kept(CsmElement.token(GeneratedJavaParserConstants.LBRACE)), differenceElements.get(index++))
assertEquals(DifferenceElement.kept(CsmElement.newline()), differenceElements.get(index++))
assertEquals(DifferenceElement.added(CsmElement.indent()), differenceElements.get(index++))
assertTrue(isAddedChild(differenceElements.get(index++), ExpressionStmt.class))
assertTrue(CsmToken.class.isAssignableFrom(cmsElement.getClass()) && ((CsmToken) cmsElement).isNewLine())
assertEquals(DifferenceElement.added(CsmElement.unindent()), differenceElements.get(index++))
assertEquals(DifferenceElement.kept(CsmElement.token(GeneratedJavaParserConstants.RBRACE)), differenceElements.get(index++))
assertEquals(index, differenceElements.size())
assertEquals(1, getTextForNode(cu).numberOfElements())
assertTrue(getTextForNode(cu).getTextElement(0) instanceof ChildTextElement)
assertEquals(cu.getClassByName("A").get(), ((ChildTextElement) getTextForNode(cu).getTextElement(0)).getChild())
assertEquals(7, getTextForNode(classA).numberOfElements())
assertEquals("class", getTextForNode(classA).getTextElement(0).expand())
assertEquals(" ", getTextForNode(classA).getTextElement(1).expand())
assertEquals("A", getTextForNode(classA).getTextElement(2).expand())
assertEquals(" ", getTextForNode(classA).getTextElement(3).expand())
assertEquals("{", getTextForNode(classA).getTextElement(4).expand())
assertEquals("}", getTextForNode(classA).getTextElement(5).expand())
assertEquals("", getTextForNode(classA).getTextElement(6).expand())
assertTrue(getTextForNode(classA).getTextElement(6) instanceof TokenTextElement)
assertEquals(GeneratedJavaParserConstants.EOF, ((TokenTextElement) getTextForNode(classA).getTextElement(6)).getTokenKind())
assertEquals(Arrays.asList("int", " ", "i", ";"), nodeText.getElements().stream().map(TextElement::expand).collect(Collectors.toList()))
assertEquals(Arrays.asList("i"), nodeText.getElements().stream().map(TextElement::expand).collect(Collectors.toList()))
assertEquals(Arrays.asList("void", " ", "foo", "(", "int p1", ",", " ", "float p2", ")", " ", "{ }"), nodeText.getElements().stream().map(TextElement::expand).collect(Collectors.toList()))
assertEquals(Arrays.asList("int", " ", "p1"), nodeText.getElements().stream().map(TextElement::expand).collect(Collectors.toList()))
assertEquals(Arrays.asList("int"), nodeText.getElements().stream().map(TextElement::expand).collect(Collectors.toList()))
assertEquals(Arrays.asList("import", " ", "a.b.c.D", ";", ""), nodeText.getElements().stream().map(TextElement::expand).collect(Collectors.toList()))
assertEquals(Arrays.asList("ParseResult", "<", "T", ">", " ", "result", ";"), nodeText.getElements().stream().map(TextElement::expand).collect(Collectors.toList()))
assertEquals(Arrays.asList("public", " ", "@", "interface", " ", "ClassPreamble", " ", "{", " ", "String author();", " ", "}", ""), nodeText.getElements().stream().map(TextElement::expand).collect(Collectors.toList()))
assertEquals(Arrays.asList("String", " ", "author", "(", ")", ";"), nodeText.getElements().stream().map(TextElement::expand).collect(Collectors.toList()))
assertEquals(Arrays.asList("String[]", " ", "author", "(", ")", ";"), nodeText.getElements().stream().map(TextElement::expand).collect(Collectors.toList()))
assertEquals(Arrays.asList("String", "[", "]"), nodeText.getElements().stream().map(TextElement::expand).collect(Collectors.toList()))
assertEquals(Arrays.asList("String[]", " ", "reviewers", "(", ")", ";"), nodeText.getElements().stream().map(TextElement::expand).collect(Collectors.toList()))
assertEquals(Arrays.asList("[", "]"), nodeText.getElements().stream().map(TextElement::expand).filter(e -> !e.isEmpty()).collect(Collectors.toList()))
assertEquals(Arrays.asList("[", "123", "]"), nodeText.getElements().stream().map(TextElement::expand).filter(e -> !e.isEmpty()).collect(Collectors.toList()))
assertEquals(Arrays.asList(" ", " ", " "), indentation.stream().map(TextElement::expand).collect(Collectors.toList()))
assertEquals(Arrays.asList(" ", " ", " "), indentation.stream().map(TextElement::expand).collect(Collectors.toList()))
assertEquals(code, LexicalPreservingPrinter.print(cu))
assertEquals("class A {" + SYSTEM_EOL + "    int myField;" + SYSTEM_EOL + "}", LexicalPreservingPrinter.print(classA))
assertEquals(code, LexicalPreservingPrinter.print(cu.getClassByName("A").get()))
assertEquals(code, LexicalPreservingPrinter.print(cu))
assertEquals(code, LexicalPreservingPrinter.print(cu.getClassByName("A").get()))
assertEquals("void foo(int p  ) { return  'z'  \t; }", LexicalPreservingPrinter.print(cu.getClassByName("A").get().getMethodsByName("foo").get(0)))
assertEquals("class /*a comment*/ A {\t\t" + SYSTEM_EOL + SYSTEM_EOL + "         void foo(int p  ) { return  'z'  \t; }}", LexicalPreservingPrinter.print(c))
assertEquals("class /*a comment*/ A {\t\t" + SYSTEM_EOL + " int f;" + SYSTEM_EOL + SYSTEM_EOL + SYSTEM_EOL + " int g;}", LexicalPreservingPrinter.print(c))
assertEquals("void foo(float p1) {}", LexicalPreservingPrinter.print(m))
assertEquals("void foo(char p1, float p2) {}", LexicalPreservingPrinter.print(m))
assertEquals("void foo() {}", LexicalPreservingPrinter.print(m))
assertEquals("void foo(int p2) {}", LexicalPreservingPrinter.print(m))
assertEquals("void foo(char p1) {}", LexicalPreservingPrinter.print(m))
assertEquals("void foo(char p1, int p2) {" + SYSTEM_EOL + "    10 + 2;" + SYSTEM_EOL + "}", LexicalPreservingPrinter.print(m))
assertEquals("class A {" + eol + "\t" + "foo(int a, int b) {" + eol + "\t\t" + "return a * b;" + eol + "\t" + "}" + eol + "}", LexicalPreservingPrinter.print(cu))
assertEquals("import a.b.c.D;", LexicalPreservingPrinter.print(imp))
assertEquals("import com.github.javaparser.ast.CompilationUnit;", LexicalPreservingPrinter.print(imp))
assertEquals("import static com.github.javaparser.ParseStart.*;", LexicalPreservingPrinter.print(imp))
assertEquals("class A { private final Stack<Iterator<Triple>> its = new Stack<Iterator<Triple>>(); }", LexicalPreservingPrinter.print(cu))
assertEquals("class A {{try { doit(); } catch (Exception e) {}}}", LexicalPreservingPrinter.print(cu))
assertEquals("class A {{try { doit(); } catch (Exception | AssertionError e) {}}}", LexicalPreservingPrinter.print(cu))
assertEquals("Exception", LexicalPreservingPrinter.print(catchType))
assertEquals("Exception | AssertionError", LexicalPreservingPrinter.print(unionType))
assertEquals("Exception | AssertionError e", LexicalPreservingPrinter.print(parameter))
assertEquals("class A {Function<String,String> f = a -> a;}", LexicalPreservingPrinter.print(cu))
assertEquals("class xyz { }", LexicalPreservingPrinter.print(cu))
assertEquals("class module { }", LexicalPreservingPrinter.print(cu))
assertEquals(code, LexicalPreservingPrinter.print(cu))
assertEquals(code, LexicalPreservingPrinter.print(cu))
assertEquals("public class TestPage extends Page {" + SYSTEM_EOL + SYSTEM_EOL + "   @Override" + SYSTEM_EOL + "   protected void test() {}" + SYSTEM_EOL + SYSTEM_EOL + "   @Override" + SYSTEM_EOL + "   protected void initializePage() {}" + SYSTEM_EOL + "}", LexicalPreservingPrinter.print(cu))
assertEquals(readExample("ASimpleClassWithMoreFormatting"), LexicalPreservingPrinter.print(cu))
assertEquals(readExample("ASimpleClassWithMoreFormatting_step1"), LexicalPreservingPrinter.print(cu))
assertEquals("public void setAField() {" + SYSTEM_EOL + "    }", LexicalPreservingPrinter.print(setter))
assertEquals(4, LexicalPreservingPrinter.findIndentation(setter).size())
assertEquals(4, LexicalPreservingPrinter.findIndentation(setter.getBody().get()).size())
assertEquals(4, LexicalPreservingPrinter.findIndentation(setter).size())
assertEquals(4, LexicalPreservingPrinter.findIndentation(setter.getBody().get()).size())
assertEquals(8, LexicalPreservingPrinter.findIndentation(setter.getBody().get().getStatement(0)).size())
assertEquals(readExample("ASimpleClassWithMoreFormatting_step4"), LexicalPreservingPrinter.print(cu))
assertTrue(nodeText.getElements().get(index++).isChildOfClass(Modifier.class))
assertTrue(nodeText.getElements().get(index++).isToken(GeneratedJavaParserConstants.SPACE))
assertTrue(nodeText.getElements().get(index++).isChildOfClass(VoidType.class))
assertTrue(nodeText.getElements().get(index++).isToken(GeneratedJavaParserConstants.SPACE))
assertTrue(nodeText.getElements().get(index++).isChildOfClass(SimpleName.class))
assertTrue(nodeText.getElements().get(index++).isToken(GeneratedJavaParserConstants.LPAREN))
assertTrue(nodeText.getElements().get(index++).isChildOfClass(Parameter.class))
assertTrue(nodeText.getElements().get(index++).isToken(GeneratedJavaParserConstants.RPAREN))
assertTrue(nodeText.getElements().get(index++).isToken(GeneratedJavaParserConstants.SPACE))
assertTrue(nodeText.getElements().get(index++).isChildOfClass(BlockStmt.class))
assertEquals(index, nodeText.getElements().size())
assertTrue(nodeText.getElements().get(index++).isToken(GeneratedJavaParserConstants.LBRACE))
assertTrue(nodeText.getElements().get(index++).isNewline())
assertTrue(nodeText.getElements().get(index++).isToken(GeneratedJavaParserConstants.SPACE))
assertTrue(nodeText.getElements().get(index++).isToken(GeneratedJavaParserConstants.SPACE))
assertTrue(nodeText.getElements().get(index++).isToken(GeneratedJavaParserConstants.SPACE))
assertTrue(nodeText.getElements().get(index++).isToken(GeneratedJavaParserConstants.SPACE))
assertTrue(nodeText.getElements().get(index++).isToken(GeneratedJavaParserConstants.SPACE))
assertTrue(nodeText.getElements().get(index++).isToken(GeneratedJavaParserConstants.SPACE))
assertTrue(nodeText.getElements().get(index++).isToken(GeneratedJavaParserConstants.SPACE))
assertTrue(nodeText.getElements().get(index++).isToken(GeneratedJavaParserConstants.SPACE))
assertTrue(nodeText.getElements().get(index++).isChildOfClass(ExpressionStmt.class))
assertTrue(nodeText.getElements().get(index++).isNewline())
assertTrue(nodeText.getElements().get(index++).isToken(GeneratedJavaParserConstants.SPACE))
assertTrue(nodeText.getElements().get(index++).isToken(GeneratedJavaParserConstants.SPACE))
assertTrue(nodeText.getElements().get(index++).isToken(GeneratedJavaParserConstants.SPACE))
assertTrue(nodeText.getElements().get(index++).isToken(GeneratedJavaParserConstants.SPACE))
assertTrue(nodeText.getElements().get(index++).isToken(GeneratedJavaParserConstants.RBRACE))
assertEquals(index, nodeText.getElements().size())
assertTrue(nodeText.getElements().get(index++).isChildOfClass(AssignExpr.class))
assertTrue(nodeText.getElements().get(index++).isToken(GeneratedJavaParserConstants.SEMICOLON))
assertEquals(index, nodeText.getElements().size())
assertTrue(nodeText.getElements().get(index++).isChildOfClass(Modifier.class))
assertTrue(nodeText.getElements().get(index++).isToken(GeneratedJavaParserConstants.SPACE))
assertTrue(nodeText.getElements().get(index++).isChildOfClass(VoidType.class))
assertTrue(nodeText.getElements().get(index++).isToken(GeneratedJavaParserConstants.SPACE))
assertTrue(nodeText.getElements().get(index++).isChildOfClass(SimpleName.class))
assertTrue(nodeText.getElements().get(index++).isToken(GeneratedJavaParserConstants.LPAREN))
assertTrue(nodeText.getElements().get(index++).isChildOfClass(Parameter.class))
assertTrue(nodeText.getElements().get(index++).isToken(GeneratedJavaParserConstants.RPAREN))
assertTrue(nodeText.getElements().get(index++).isToken(GeneratedJavaParserConstants.SPACE))
assertTrue(nodeText.getElements().get(index++).isChildOfClass(BlockStmt.class))
assertEquals(index, nodeText.getElements().size())
assertTrue(nodeText.getElements().get(index++).isToken(GeneratedJavaParserConstants.LBRACE))
assertTrue(nodeText.getElements().get(index++).isNewline())
assertTrue(nodeText.getElements().get(index++).isToken(GeneratedJavaParserConstants.SPACE))
assertTrue(nodeText.getElements().get(index++).isToken(GeneratedJavaParserConstants.SPACE))
assertTrue(nodeText.getElements().get(index++).isToken(GeneratedJavaParserConstants.SPACE))
assertTrue(nodeText.getElements().get(index++).isToken(GeneratedJavaParserConstants.SPACE))
assertTrue(nodeText.getElements().get(index++).isToken(GeneratedJavaParserConstants.SPACE))
assertTrue(nodeText.getElements().get(index++).isToken(GeneratedJavaParserConstants.SPACE))
assertTrue(nodeText.getElements().get(index++).isToken(GeneratedJavaParserConstants.SPACE))
assertTrue(nodeText.getElements().get(index++).isToken(GeneratedJavaParserConstants.SPACE))
assertTrue(nodeText.getElements().get(index++).isChildOfClass(ExpressionStmt.class))
assertTrue(nodeText.getElements().get(index++).isNewline())
assertTrue(nodeText.getElements().get(index++).isToken(GeneratedJavaParserConstants.SPACE))
assertTrue(nodeText.getElements().get(index++).isToken(GeneratedJavaParserConstants.SPACE))
assertTrue(nodeText.getElements().get(index++).isToken(GeneratedJavaParserConstants.SPACE))
assertTrue(nodeText.getElements().get(index++).isToken(GeneratedJavaParserConstants.SPACE))
assertTrue(nodeText.getElements().get(index++).isToken(GeneratedJavaParserConstants.RBRACE))
assertEquals(index, nodeText.getElements().size())
assertTrue(nodeText.getElements().get(index++).isChildOfClass(AssignExpr.class))
assertTrue(nodeText.getElements().get(index++).isToken(GeneratedJavaParserConstants.SEMICOLON))
assertEquals(index, nodeText.getElements().size())
assertEquals("public class TestPage extends Page {" + SYSTEM_EOL + SYSTEM_EOL + "   protected void test() {}" + SYSTEM_EOL + SYSTEM_EOL + "   @Override" + SYSTEM_EOL + "   protected void initializePage() {}" + SYSTEM_EOL + "}", LexicalPreservingPrinter.print(cu))
assertEquals("public class TestPage extends Page {" + SYSTEM_EOL + SYSTEM_EOL + "   @Override" + SYSTEM_EOL + "   protected void test() {}" + SYSTEM_EOL + SYSTEM_EOL + "   @Override" + SYSTEM_EOL + "   protected void initializePage() {}" + SYSTEM_EOL + "}", LexicalPreservingPrinter.print(cu))
assertEquals("public class TestPage extends Page {" + SYSTEM_EOL + SYSTEM_EOL + "   @Override" + SYSTEM_EOL + "   protected void test() {}" + SYSTEM_EOL + SYSTEM_EOL + "   @Override" + SYSTEM_EOL + "   protected void initializePage() {}" + SYSTEM_EOL + "}", LexicalPreservingPrinter.print(cu))
assertEquals("public class TestPage extends Page {" + SYSTEM_EOL + SYSTEM_EOL + "   @Override" + SYSTEM_EOL + "   protected void test() {}" + SYSTEM_EOL + SYSTEM_EOL + "   @Override" + SYSTEM_EOL + "   protected void initializePage() {}" + SYSTEM_EOL + "}", LexicalPreservingPrinter.print(cu))
assertEquals("public class TestPage extends Page {" + SYSTEM_EOL + SYSTEM_EOL + "   @Override" + SYSTEM_EOL + "   protected void test() {}" + SYSTEM_EOL + SYSTEM_EOL + "   @Override" + SYSTEM_EOL + "   protected void initializePage() {}" + SYSTEM_EOL + "}", LexicalPreservingPrinter.print(cu))
assertEquals("@Deprecated" + SYSTEM_EOL + "public final class A {}", LexicalPreservingPrinter.print(cu))
assertEquals("@Deprecated" + SYSTEM_EOL + "public abstract class A {}", LexicalPreservingPrinter.print(cu))
assertEquals("public class Foo {" + "\n" + "void mymethod() {" + "\n" + "}" + "\n" + "}", LexicalPreservingPrinter.print(cu))
assertTrue(expression.isStringLiteralExpr())
assertEquals(expected, actual)
assertEquals(expected, LexicalPreservingPrinter.print(statement))
assertEquals(expected, statement.toString())
assertEquals(1, cu.findAll(ClassOrInterfaceDeclaration.class).size())
assertEquals(expected, actual)
assertTrue(expression.isIntegerLiteralExpr())
assertEquals(expected, actual)
assertEquals(expected, actual)
assertEquals(expected, actual)
assertEquals(expected, actual)
assertEquals(expected, actual)
assertEquals(expected, actual)
assertEquals(expected, actual)
assertTrue(LexicalPreservingPrinter.isAvailableOn(md))
assertTrue(result.contains("@Nullable String"))
assertEquals(0, differenceElements.size())
assertEquals(4, differenceElements.size())
assertEquals(added(new CsmToken(GeneratedJavaParserConstants.LPAREN)), differenceElements.get(0))
assertEquals(added(new CsmChild(n1)), differenceElements.get(1))
assertEquals(added(new CsmToken(GeneratedJavaParserConstants.RPAREN)), differenceElements.get(2))
assertEquals(added(new CsmChild(n2)), differenceElements.get(3))
assertEquals(4, differenceElements.size())
assertEquals(removed(new CsmToken(GeneratedJavaParserConstants.LPAREN)), differenceElements.get(0))
assertEquals(removed(new CsmChild(n1)), differenceElements.get(1))
assertEquals(removed(new CsmToken(GeneratedJavaParserConstants.RPAREN)), differenceElements.get(2))
assertEquals(removed(new CsmChild(n2)), differenceElements.get(3))
assertEquals(3, differenceElements.size())
assertEquals(added(new CsmChild(packageDeclaration)), differenceElements.get(0))
assertEquals(kept(new CsmChild(cu.getType(0))), differenceElements.get(1))
assertEquals(kept(new CsmToken(eolTokenKind())), differenceElements.get(2))
assertEquals(added(new CsmChild(Modifier.publicModifier())), differenceElements.get(i++))
assertEquals(added(new CsmToken(spaceTokenKind())), differenceElements.get(i++))
assertEquals(kept(new CsmToken(GeneratedJavaParserConstants.AT)), differenceElements.get(i++))
assertEquals(kept(new CsmToken(GeneratedJavaParserConstants.INTERFACE)), differenceElements.get(i++))
assertEquals(kept(new CsmToken(spaceTokenKind())), differenceElements.get(i++))
assertEquals(kept(new CsmChild(annotationDeclaration.getName())), differenceElements.get(i++))
assertEquals(kept(new CsmToken(spaceTokenKind())), differenceElements.get(i++))
assertEquals(kept(new CsmToken(GeneratedJavaParserConstants.LBRACE)), differenceElements.get(i++))
assertEquals(kept(new CsmToken(eolTokenKind())), differenceElements.get(i++))
assertEquals(kept(new CsmChild(annotationDeclaration.getMember(0))), differenceElements.get(i++))
assertEquals(kept(new CsmToken(eolTokenKind())), differenceElements.get(i++))
assertEquals(kept(new CsmChild(annotationDeclaration.getMember(1))), differenceElements.get(i++))
assertEquals(kept(new CsmToken(eolTokenKind())), differenceElements.get(i++))
assertEquals(kept(new CsmChild(annotationDeclaration.getMember(2))), differenceElements.get(i++))
assertEquals(kept(new CsmToken(eolTokenKind())), differenceElements.get(i++))
assertEquals(kept(new CsmChild(annotationDeclaration.getMember(3))), differenceElements.get(i++))
assertEquals(kept(new CsmToken(eolTokenKind())), differenceElements.get(i++))
assertEquals(kept(new CsmChild(annotationDeclaration.getMember(4))), differenceElements.get(i++))
assertEquals(kept(new CsmToken(eolTokenKind())), differenceElements.get(i++))
assertEquals(kept(new CsmChild(annotationDeclaration.getMember(5))), differenceElements.get(i++))
assertEquals(kept(new CsmToken(eolTokenKind())), differenceElements.get(i++))
assertEquals(kept(new CsmToken(GeneratedJavaParserConstants.RBRACE)), differenceElements.get(i++))
assertEquals(i, differenceElements.size())
assertEquals(kept(new CsmToken(GeneratedJavaParserConstants.AT)), differenceElements.get(i++))
assertEquals(kept(new CsmToken(GeneratedJavaParserConstants.INTERFACE)), differenceElements.get(i++))
assertEquals(kept(new CsmToken(spaceTokenKind())), differenceElements.get(i++))
assertEquals(removed(new CsmChild(annotationDeclaration.getName())), differenceElements.get(i++))
assertEquals(added(new CsmChild(newName)), differenceElements.get(i++))
assertEquals(kept(new CsmToken(spaceTokenKind())), differenceElements.get(i++))
assertEquals(kept(new CsmToken(GeneratedJavaParserConstants.LBRACE)), differenceElements.get(i++))
assertEquals(kept(new CsmToken(eolTokenKind())), differenceElements.get(i++))
assertEquals(kept(new CsmChild(annotationDeclaration.getMember(0))), differenceElements.get(i++))
assertEquals(kept(new CsmToken(eolTokenKind())), differenceElements.get(i++))
assertEquals(kept(new CsmChild(annotationDeclaration.getMember(1))), differenceElements.get(i++))
assertEquals(kept(new CsmToken(eolTokenKind())), differenceElements.get(i++))
assertEquals(kept(new CsmChild(annotationDeclaration.getMember(2))), differenceElements.get(i++))
assertEquals(kept(new CsmToken(eolTokenKind())), differenceElements.get(i++))
assertEquals(kept(new CsmChild(annotationDeclaration.getMember(3))), differenceElements.get(i++))
assertEquals(kept(new CsmToken(eolTokenKind())), differenceElements.get(i++))
assertEquals(kept(new CsmChild(annotationDeclaration.getMember(4))), differenceElements.get(i++))
assertEquals(kept(new CsmToken(eolTokenKind())), differenceElements.get(i++))
assertEquals(kept(new CsmChild(annotationDeclaration.getMember(5))), differenceElements.get(i++))
assertEquals(kept(new CsmToken(eolTokenKind())), differenceElements.get(i++))
assertEquals(kept(new CsmToken(GeneratedJavaParserConstants.RBRACE)), differenceElements.get(i++))
assertEquals(i, differenceElements.size())
assertEquals(kept(new CsmChild(Modifier.publicModifier())), differenceElements.get(i++))
assertEquals(kept(new CsmToken(spaceTokenKind())), differenceElements.get(i++))
assertEquals(kept(new CsmToken(GeneratedJavaParserConstants.AT)), differenceElements.get(i++))
assertEquals(kept(new CsmToken(GeneratedJavaParserConstants.INTERFACE)), differenceElements.get(i++))
assertEquals(kept(new CsmToken(spaceTokenKind())), differenceElements.get(i++))
assertEquals(kept(new CsmChild(annotationDeclaration.getName())), differenceElements.get(i++))
assertEquals(kept(new CsmToken(spaceTokenKind())), differenceElements.get(i++))
assertEquals(kept(new CsmToken(GeneratedJavaParserConstants.LBRACE)), differenceElements.get(i++))
assertEquals(kept(new CsmToken(eolTokenKind())), differenceElements.get(i++))
assertEquals(kept(new CsmChild(annotationDeclaration.getMember(0))), differenceElements.get(i++))
assertEquals(kept(new CsmToken(eolTokenKind())), differenceElements.get(i++))
assertEquals(kept(new CsmChild(annotationDeclaration.getMember(1))), differenceElements.get(i++))
assertEquals(kept(new CsmToken(eolTokenKind())), differenceElements.get(i++))
assertEquals(kept(new CsmChild(annotationDeclaration.getMember(2))), differenceElements.get(i++))
assertEquals(kept(new CsmToken(eolTokenKind())), differenceElements.get(i++))
assertEquals(kept(new CsmChild(annotationDeclaration.getMember(3))), differenceElements.get(i++))
assertEquals(kept(new CsmToken(eolTokenKind())), differenceElements.get(i++))
assertEquals(kept(new CsmChild(annotationDeclaration.getMember(4))), differenceElements.get(i++))
assertEquals(kept(new CsmToken(eolTokenKind())), differenceElements.get(i++))
assertEquals(kept(new CsmChild(annotationDeclaration.getMember(5))), differenceElements.get(i++))
assertEquals(kept(new CsmToken(eolTokenKind())), differenceElements.get(i++))
assertEquals(kept(new CsmToken(GeneratedJavaParserConstants.RBRACE)), differenceElements.get(i++))
assertEquals(i, differenceElements.size())
assertEquals(kept(new CsmChild(Modifier.publicModifier())), differenceElements.get(i++))
assertEquals(kept(new CsmToken(spaceTokenKind())), differenceElements.get(i++))
assertEquals(kept(new CsmToken(GeneratedJavaParserConstants.AT)), differenceElements.get(i++))
assertEquals(kept(new CsmToken(GeneratedJavaParserConstants.INTERFACE)), differenceElements.get(i++))
assertEquals(kept(new CsmToken(spaceTokenKind())), differenceElements.get(i++))
assertEquals(kept(new CsmChild(annotationDeclaration.getName())), differenceElements.get(i++))
assertEquals(kept(new CsmToken(spaceTokenKind())), differenceElements.get(i++))
assertEquals(kept(new CsmToken(GeneratedJavaParserConstants.LBRACE)), differenceElements.get(i++))
assertEquals(kept(new CsmToken(eolTokenKind())), differenceElements.get(i++))
assertEquals(kept(new CsmChild(annotationDeclaration.getMember(0))), differenceElements.get(i++))
assertEquals(kept(new CsmToken(eolTokenKind())), differenceElements.get(i++))
assertEquals(kept(new CsmChild(annotationDeclaration.getMember(1))), differenceElements.get(i++))
assertEquals(kept(new CsmToken(eolTokenKind())), differenceElements.get(i++))
assertEquals(kept(new CsmChild(annotationDeclaration.getMember(2))), differenceElements.get(i++))
assertEquals(kept(new CsmToken(eolTokenKind())), differenceElements.get(i++))
assertEquals(kept(new CsmChild(annotationDeclaration.getMember(3))), differenceElements.get(i++))
assertEquals(kept(new CsmToken(eolTokenKind())), differenceElements.get(i++))
assertEquals(kept(new CsmChild(annotationDeclaration.getMember(4))), differenceElements.get(i++))
assertEquals(kept(new CsmToken(eolTokenKind())), differenceElements.get(i++))
assertEquals(kept(new CsmChild(annotationDeclaration.getMember(5))), differenceElements.get(i++))
assertEquals(kept(new CsmToken(eolTokenKind())), differenceElements.get(i++))
assertEquals(kept(new CsmToken(GeneratedJavaParserConstants.RBRACE)), differenceElements.get(i++))
assertEquals(i, differenceElements.size())
assertEquals(removed(new CsmChild(Modifier.publicModifier())), differenceElements.get(i++))
assertEquals(removed(new CsmToken(spaceTokenKind())), differenceElements.get(i++))
assertEquals(kept(new CsmToken(GeneratedJavaParserConstants.AT)), differenceElements.get(i++))
assertEquals(kept(new CsmToken(GeneratedJavaParserConstants.INTERFACE)), differenceElements.get(i++))
assertEquals(kept(new CsmToken(spaceTokenKind())), differenceElements.get(i++))
assertEquals(kept(new CsmChild(annotationDeclaration.getName())), differenceElements.get(i++))
assertEquals(kept(new CsmToken(spaceTokenKind())), differenceElements.get(i++))
assertEquals(kept(new CsmToken(GeneratedJavaParserConstants.LBRACE)), differenceElements.get(i++))
assertEquals(kept(new CsmToken(eolTokenKind())), differenceElements.get(i++))
assertEquals(kept(new CsmChild(annotationDeclaration.getMember(0))), differenceElements.get(i++))
assertEquals(kept(new CsmToken(eolTokenKind())), differenceElements.get(i++))
assertEquals(kept(new CsmChild(annotationDeclaration.getMember(1))), differenceElements.get(i++))
assertEquals(kept(new CsmToken(eolTokenKind())), differenceElements.get(i++))
assertEquals(kept(new CsmChild(annotationDeclaration.getMember(2))), differenceElements.get(i++))
assertEquals(kept(new CsmToken(eolTokenKind())), differenceElements.get(i++))
assertEquals(kept(new CsmChild(annotationDeclaration.getMember(3))), differenceElements.get(i++))
assertEquals(kept(new CsmToken(eolTokenKind())), differenceElements.get(i++))
assertEquals(kept(new CsmChild(annotationDeclaration.getMember(4))), differenceElements.get(i++))
assertEquals(kept(new CsmToken(eolTokenKind())), differenceElements.get(i++))
assertEquals(kept(new CsmChild(annotationDeclaration.getMember(5))), differenceElements.get(i++))
assertEquals(kept(new CsmToken(eolTokenKind())), differenceElements.get(i++))
assertEquals(kept(new CsmToken(GeneratedJavaParserConstants.RBRACE)), differenceElements.get(i++))
assertEquals(i, differenceElements.size())
assertEquals(kept(new CsmChild(md.getType())), differenceElements.get(i++))
assertEquals(kept(new CsmToken(spaceTokenKind())), differenceElements.get(i++))
assertEquals(kept(new CsmChild(md.getName())), differenceElements.get(i++))
assertEquals(kept(new CsmToken(GeneratedJavaParserConstants.LPAREN)), differenceElements.get(i++))
assertEquals(kept(new CsmToken(GeneratedJavaParserConstants.RPAREN)), differenceElements.get(i++))
assertEquals(removed(new CsmToken(spaceTokenKind())), differenceElements.get(i++))
assertEquals(removed(new CsmToken(GeneratedJavaParserConstants._DEFAULT)), differenceElements.get(i++))
assertEquals(removed(new CsmToken(spaceTokenKind())), differenceElements.get(i++))
assertEquals(removed(new CsmChild(md.getDefaultValue().get())), differenceElements.get(i++))
assertEquals(kept(new CsmToken(GeneratedJavaParserConstants.SEMICOLON)), differenceElements.get(i++))
assertEquals(i, differenceElements.size())
assertEquals(kept(new CsmChild(md.getType())), differenceElements.get(i++))
assertEquals(kept(new CsmToken(spaceTokenKind())), differenceElements.get(i++))
assertEquals(kept(new CsmChild(md.getName())), differenceElements.get(i++))
assertEquals(kept(new CsmToken(GeneratedJavaParserConstants.LPAREN)), differenceElements.get(i++))
assertEquals(kept(new CsmToken(GeneratedJavaParserConstants.RPAREN)), differenceElements.get(i++))
assertEquals(added(new CsmToken(spaceTokenKind())), differenceElements.get(i++))
assertEquals(added(new CsmToken(GeneratedJavaParserConstants._DEFAULT)), differenceElements.get(i++))
assertEquals(added(new CsmToken(spaceTokenKind())), differenceElements.get(i++))
assertEquals(added(new CsmChild(defaultValue)), differenceElements.get(i++))
assertEquals(kept(new CsmToken(GeneratedJavaParserConstants.SEMICOLON)), differenceElements.get(i++))
assertEquals(i, differenceElements.size())
assertEquals(added(new CsmChild(Modifier.publicModifier())), differenceElements.get(i++))
assertEquals(added(new CsmToken(spaceTokenKind())), differenceElements.get(i++))
assertEquals(kept(new CsmChild(cd.getName())), differenceElements.get(i++))
assertEquals(kept(new CsmToken(GeneratedJavaParserConstants.LPAREN)), differenceElements.get(i++))
assertEquals(kept(new CsmToken(GeneratedJavaParserConstants.RPAREN)), differenceElements.get(i++))
assertEquals(kept(new CsmToken(spaceTokenKind())), differenceElements.get(i++))
assertEquals(kept(new CsmChild(cd.getBody())), differenceElements.get(i++))
assertEquals(i, differenceElements.size())
assertEquals(DifferenceElement.removed(new CsmChild(ecd.getName())), differenceElements.get(i++))
assertEquals(DifferenceElement.added(new CsmChild(newName)), differenceElements.get(i++))
assertEquals(i, differenceElements.size())
assertEquals(DifferenceElement.kept(new CsmToken(GeneratedJavaParserConstants.LBRACE)), differenceElements.get(i++))
assertEquals(DifferenceElement.kept(new CsmToken(eolTokenKind())), differenceElements.get(i++))
assertEquals(DifferenceElement.added(new CsmIndent()), differenceElements.get(i++))
assertEquals(DifferenceElement.added(new CsmChild(s)), differenceElements.get(i++))
assertEquals(DifferenceElement.added(new CsmToken(eolTokenKind())), differenceElements.get(i++))
assertEquals(DifferenceElement.added(new CsmUnindent()), differenceElements.get(i++))
assertEquals(DifferenceElement.kept(new CsmToken(GeneratedJavaParserConstants.RBRACE)), differenceElements.get(i++))
assertEquals(i, differenceElements.size())
assertEquals(DifferenceElement.kept(new CsmChild(Modifier.publicModifier())), differenceElements.get(i++))
assertEquals(DifferenceElement.kept(new CsmToken(spaceTokenKind())), differenceElements.get(i++))
assertEquals(DifferenceElement.kept(new CsmChild(md.getType())), differenceElements.get(i++))
assertEquals(DifferenceElement.kept(new CsmToken(spaceTokenKind())), differenceElements.get(i++))
assertEquals(DifferenceElement.kept(new CsmChild(md.getName())), differenceElements.get(i++))
assertEquals(DifferenceElement.kept(new CsmToken(GeneratedJavaParserConstants.LPAREN)), differenceElements.get(i++))
assertEquals(DifferenceElement.removed(new CsmChild(md.getParameter(0))), differenceElements.get(i++))
assertEquals(DifferenceElement.kept(new CsmToken(GeneratedJavaParserConstants.RPAREN)), differenceElements.get(i++))
assertEquals(DifferenceElement.kept(new CsmToken(spaceTokenKind())), differenceElements.get(i++))
assertEquals(DifferenceElement.kept(new CsmChild(md.getBody().get())), differenceElements.get(i++))
assertEquals(i, differenceElements.size())
assertEquals(DifferenceElement.kept(new CsmChild(Modifier.publicModifier())), differenceElements.get(i++))
assertEquals(DifferenceElement.kept(new CsmToken(spaceTokenKind())), differenceElements.get(i++))
assertEquals(DifferenceElement.kept(new CsmChild(md.getType())), differenceElements.get(i++))
assertEquals(DifferenceElement.kept(new CsmToken(spaceTokenKind())), differenceElements.get(i++))
assertEquals(DifferenceElement.kept(new CsmChild(md.getName())), differenceElements.get(i++))
assertEquals(DifferenceElement.kept(new CsmToken(GeneratedJavaParserConstants.LPAREN)), differenceElements.get(i++))
assertEquals(DifferenceElement.added(new CsmChild(newParameter)), differenceElements.get(i++))
assertEquals(DifferenceElement.kept(new CsmToken(GeneratedJavaParserConstants.RPAREN)), differenceElements.get(i++))
assertEquals(DifferenceElement.kept(new CsmToken(spaceTokenKind())), differenceElements.get(i++))
assertEquals(DifferenceElement.kept(new CsmChild(md.getBody().get())), differenceElements.get(i++))
assertEquals(i, differenceElements.size())
assertNotNull(o)
assertEquals(expected, LexicalPreservingPrinter.print(cu))
assertEquals(LexicalPreservingPrinter.print(cu), LexicalPreservingPrinter.print(cu.clone()))
assertTrue(LexicalPreservingPrinter.getOrCreateNodeText(expression).getElements().stream().anyMatch(elem -> elem.expand().equals(Keyword.PRIVATE.asString())))
assertTrue(LexicalPreservingPrinter.getOrCreateNodeText(expression).getElements().stream().anyMatch(elem -> elem.expand().equals(Keyword.PRIVATE.asString())))
assertTrue(LexicalPreservingPrinter.getOrCreateNodeText(expression).getElements().stream().anyMatch(elem -> elem.expand().equals(Keyword.PRIVATE.asString())))
assertTrue(LexicalPreservingPrinter.getOrCreateNodeText(expression).getElements().stream().anyMatch(elem -> elem.expand().equals(Keyword.PRIVATE.asString())))
assertTrue(LexicalPreservingPrinter.getOrCreateNodeText(expression).getElements().stream().anyMatch(elem -> elem.expand().equals(Keyword.PRIVATE.asString())))
assertTrue(decl.get().getEntries().size() == 2)
assertEquals(expected, LexicalPreservingPrinter.print(cu))
assertTrue(clazzOptional.isPresent())
assertEquals(expected, LexicalPreservingPrinter.print(cu))
assertEquals("i > 0", ifStmt.getCondition().toString())
assertEquals("Foo.class", print(expr))
assertEquals("Foo[].class", print(expr))
assertEquals("Foo<String>.class", print(expr))
assertEquals("class A {" + SYSTEM_EOL + "}" + SYSTEM_EOL, print(node))
assertEquals("class A {" + SYSTEM_EOL + SYSTEM_EOL + "    int a;" + SYSTEM_EOL + "}" + SYSTEM_EOL, print(node))
assertEquals("int x(int y, int z) {" + SYSTEM_EOL + "}", print(node))
assertEquals("int x(X A.B.this, int y, int z) {" + SYSTEM_EOL + "}", print(node))
assertEquals("interface A {" + SYSTEM_EOL + "}" + SYSTEM_EOL, print(node))
assertEquals("public interface A {" + SYSTEM_EOL + "}" + SYSTEM_EOL, print(node))
assertEquals("X(){\n// hello\n}", cu.getClassByName("X").get().getDefaultConstructor().get().getTokenRange().get().toString())
assertEquals("1,1-5/6,1-1/7,1-1/8,1-1/9,1-1/10,1-1/1,2-1/2,2-1/3,2-1/4,2-1/5,2-1/6,2-1/1,3-8/9,3-1/1,4-1/2,4-1/1,5-1/1,5-1/", makeRangesString(cu))
assertEquals("1,1-5/6,1-4/10,1-2/1,2-1/2,2-1/3,2-1/4,2-1/5,2-1/1,3-1/2,3-1/3,3-1/4,3-1/5,3-1/6,3-1/1,4-8/9,4-1/1,5-1/2,5-1/1,6-1/2,6-1/", makeRangesString(cu))
assertEquals(0, parseResult.getProblems().size())
assertEquals(0, parseResult.getProblems().size())
assertEquals(0, parseResult.getProblems().size())
assertEquals("switch (value)\n" + "      {\n" + "       case 1 -> numericString = \"one\";\n" + "       default -> numericString = \"N/A\";\n" + "      }", modifiedSourceCode)
assertEquals(expectedStartLine, range.begin.line)
assertEquals(expectedEndLine, range.end.line)
assertEquals(tokenCount, switchEntries)
assertEquals(10, range_orderedPositions.begin.line)
assertEquals(11, range_orderedPositions.begin.column)
assertEquals(20, range_orderedPositions.end.line)
assertEquals(21, range_orderedPositions.end.column)
assertEquals(10, range_reversedPositions.begin.line)
assertEquals(11, range_reversedPositions.begin.column)
assertEquals(20, range_reversedPositions.end.line)
assertEquals(21, range_reversedPositions.end.column)
assertTrue(rangePair_equalBeginEnd[0].contains(rangePair_equalBeginEnd[1]))
assertTrue(r1.contains(r2))
assertTrue(r1.strictlyContains(r2))
assertTrue(r1.overlapsWith(r2))
assertTrue(r2.overlapsWith(r1))
assertEquals(5, r1.getLineCount())
assertEquals(32, r2.getLineCount())
assertTrue(r.contains(r.begin))
assertTrue(r.contains(r.end))
assertTrue(r1.overlapsWith(r2))
assertTrue(r2.overlapsWith(r1))
assertTrue(r1.overlapsWith(r2))
assertTrue(r2.overlapsWith(r1))
assertTrue(r1.overlapsWith(r2))
assertTrue(r2.overlapsWith(r1))
assertTrue(r1.overlapsWith(r2))
assertTrue(r2.overlapsWith(r1))
assertTrue(r1.overlapsWith(r2))
assertTrue(r2.overlapsWith(r1))
assertTrue(r1.isBefore(r2))
assertTrue(r2.isAfter(r1))
assertEquals(23, chars.size())
assertFalse(LexicalPreservingPrinter.isAvailableOn(cu))
assertFalse(rangePair_equalBeginEnd[0].strictlyContains(rangePair_equalBeginEnd[1]))
assertFalse(r1.contains(r2))
assertFalse(r2.contains(r1))
assertFalse(r1.strictlyContains(r2))
assertFalse(r2.strictlyContains(r1))
assertFalse(r1.contains(r2))
assertFalse(r2.contains(r1))
assertFalse(r1.strictlyContains(r2))
assertFalse(r2.strictlyContains(r1))
assertFalse(r2.contains(r1))
assertFalse(r2.strictlyContains(r1))
assertFalse(r1.contains(r2))
assertFalse(r2.contains(r1))
assertFalse(r1.strictlyContains(r2))
assertFalse(r2.strictlyContains(r1))
assertFalse(r1.contains(r2))
assertFalse(r2.contains(r1))
assertFalse(r1.overlapsWith(r2))
assertFalse(r2.overlapsWith(r1))
assertFalse(r.strictlyContains(r.begin))
assertFalse(r.strictlyContains(r.end))
assertFalse(r1.overlapsWith(r2))
assertFalse(r2.overlapsWith(r1))
assertFalse(r1.overlapsWith(r2))
assertFalse(r2.overlapsWith(r1))
assertFalse(r2.isBefore(r1))
assertFalse(r3.isBefore(r1))
assertFalse(r1.isAfter(r2))
assertFalse(r1.isAfter(r3))
assertFalse(result.getResult().get().getTokenRange().isPresent())
assertTrue(result.getResult().get().findAll(Node.class).stream().noneMatch(node -> node.getTokenRange().isPresent()))
assertTrue(result.isSuccessful())
assertEquals(str, unit.toString())
assertEquals(str.replace("\n", ""), unit.toString().replace("\n", ""))
assertEquals(1, compilationUnit.getTypes().size())
assertTrue(remove)
assertEquals(0, compilationUnit.getTypes().size())
assertEquals(1, testClass.getMembers().size())
assertTrue(remove)
assertEquals(0, testClass.getMembers().size())
assertEquals(1, methodBody.getStatements().size())
assertTrue(remove)
assertEquals(0, methodBody.getStatements().size())
assertTrue(children.size() == 2)
assertTrue(children.size() == 1)
assertTrue(children.stream().allMatch(n -> n.getParentNode() != null))
assertEquals(UNPARSABLE, cu.getParsed())
assertEquals(UNPARSABLE, xxx.getParsed())
assertEquals(1, xxx.getChildNodes().size())
assertTrue(xxx.getChildNodes().get(0) instanceof UnparsableStmt)
assertEquals(UNPARSABLE, xxx.getStatement().getParsed())
assertEquals(1, compilationUnit.getTypes().get(0).getMembers().size())
assertEquals(1, compilationUnit.getTypes().get(0).getMembers().size())
assertEquals(1, allVarTypes.size())
assertEquals(0, allVarTypes.size())
assertDoesNotThrow(() -> StaticJavaParser.parse(str))
assertNotNull(provider)
assertTrue(parse.isSuccessful())
assertNotNull(provider)
assertNotNull(provider)
assertTrue(parse.isSuccessful())
assertEquals(TokenRange.INVALID, problem.getLocation().get())
assertEquals("Parse error", problem.getMessage())
assertEquals("(line ?,col ?) Parse error", problem.getVerboseMessage())
assertEquals("Parse error", problem.getVerboseMessage())
assertEquals(Arrays.asList(), changes)
assertEquals(Arrays.asList(), changes)
assertTrue(fieldDeclaration.isRegistered(observer))
assertEquals(Arrays.asList("VariableDeclarator.name changed from foo to Bar"), changes)
assertFalse(compilationUnit.getTypes().isEmpty())
assertFalse(compilationUnit.getTypes().get(0).getMembers().isEmpty())
assertFalse(compilationUnit.getTypes().isEmpty())
assertFalse(compilationUnit.getTypes().isEmpty())
assertFalse(parse.isSuccessful())
assertFalse(expression.traverseScope().isPresent())
assertEquals(0, mce.getArgumentPosition(arg0))
assertEquals(0, mce.getArgumentPosition(innerExpr0, EXCLUDE_ENCLOSED_EXPR))
assertEquals(1, mce.getArgumentPosition(arg1))
assertEquals(1, mce.getArgumentPosition(innerExpr1, EXCLUDE_ENCLOSED_EXPR))
assertEquals(PrimitiveType.intType(), declaration.getCommonType())
assertEquals(PrimitiveType.intType(), declaration.getElementType())
assertEquals(PrimitiveType.intType(), declaration.getElementType())
assertEquals("Dog a, b", declaration.toString())
assertTrue(forStmt.hasEmptyBody())
assertTrue(forStmt.hasEmptyBody())
assertFalse(forStmt.hasEmptyBody())
assertFalse(forStmt.hasEmptyBody())
assertEquals(createModifierList(PUBLIC), decl.getModifiers())
assertEquals(1, changes.size())
assertEquals("property MODIFIERS is changed to [public ]", changes.get(0))
assertEquals(0, node.getModifiers().size())
assertEquals(createModifierList(PUBLIC), node.getModifiers())
assertEquals(createModifierList(SYNCHRONIZED), node.getModifiers())
assertFalse(decl.removeJavaDocComment())
assertFalse(decl.removeJavaDocComment())
assertTrue(decl.getComment().isPresent())
assertTrue(decl.removeJavaDocComment())
assertFalse(decl.getComment().isPresent())
assertFalse(method.getJavadocComment().isPresent())
assertFalse(method.getJavadoc().isPresent())
assertTrue(methodCallExpr.hasScope())
assertFalse(objectCreationExpr.hasScope())
assertFalse(methodCallExpr.hasScope())
assertInstanceOf(Exception.class, problem.getCause().get())
assertInstanceOf(MethodCallExpr.class, expression)
assertInstanceOf(FieldAccessExpr.class, expression)
assertInstanceOf(MethodCallExpr.class, expression)
assertTrue(replaced)
assertEquals(3, list.size())
assertEquals("a", list.get(0).asString())
assertEquals("z", list.get(1).asString())
assertEquals("c", list.get(2).asString())
assertEquals(3, list.size())
assertEquals("[abc, bcd, cde]", list.toString())
assertEquals(4, list.size())
assertEquals("[xxx, abc, bcd, cde]", list.toString())
assertEquals(4, list.size())
assertEquals("[abc, bcd, cde, xxx]", list.toString())
assertEquals(4, list.size())
assertEquals("[abc, xxx, bcd, cde]", list.toString())
assertEquals(4, list.size())
assertEquals("[abc, bcd, xxx, cde]", list.toString())
assertEquals(4, list.size())
assertEquals("[xxx, abc, bcd, cde]", list.toString())
assertEquals(4, list.size())
assertEquals("[abc, bcd, cde, xxx]", list.toString())
assertEquals("Optional.empty", first.toString())
assertTrue(first.isPresent())
assertEquals("Optional[abc]", first.toString())
assertEquals("Optional.empty", last.toString())
assertTrue(last.isPresent())
assertEquals("Optional[cde]", last.toString())
assertEquals(0, propertyChanges.size())
assertEquals(0, parentChanges.size())
assertEquals(0, listChanges.size())
assertEquals(0, listReplacements.size())
assertEquals(0, propertyChanges.size())
assertEquals(0, parentChanges.size())
assertEquals(1, listChanges.size())
assertEquals(0, listReplacements.size())
assertEquals("Name ADDITION to/from NodeList at position 0", listChanges.get(0))
assertEquals(0, propertyChanges.size())
assertEquals(0, parentChanges.size())
assertEquals(1, listChanges.size())
assertEquals(0, listReplacements.size())
assertEquals(0, propertyChanges.size())
assertEquals(0, parentChanges.size())
assertEquals(2, listChanges.size())
assertEquals(0, listReplacements.size())
assertEquals("Name ADDITION to/from NodeList at position 0", listChanges.get(0))
assertEquals("Name REMOVAL to/from NodeList at position 0", listChanges.get(1))
assertEquals(0, propertyChanges.size())
assertEquals(0, parentChanges.size())
assertEquals(1, listChanges.size())
assertEquals(0, listReplacements.size())
assertEquals(0, propertyChanges.size())
assertEquals(0, parentChanges.size())
assertEquals(1, listChanges.size())
assertEquals(1, listReplacements.size())
assertEquals("Name ADDITION to/from NodeList at position 0", listChanges.get(0))
assertEquals("Name replaced within NodeList at position 0", listReplacements.get(0))
assertEquals(expected, LexicalPreservingPrinter.print(cu))
assertTrue(iterator.hasPrevious())
assertNotNull(next)
assertTrue(iterator.hasNext())
assertTrue(iterator.hasNext())
assertTrue(iterator.hasNext())
assertTrue(iterator.hasNext())
assertTrue(iterator.hasNext())
assertTrue(iterator.hasNext())
assertEquals(expected, actual)
assertEquals(expected, actual)
assertTrue(name.getParentNode().isPresent())
assertSame(decl, name.getParentNode().get())
assertEquals(fqn, node.findAll(TypeDeclaration.class).stream().map(td -> (TypeDeclaration<?>) td).map(td -> td.getFullyQualifiedName().orElse("?")).collect(joining(",")))
assertTrue(recordDeclaration.isRecordDeclaration())
assertTrue(recordDeclaration.getImplementedTypes().isEmpty())
assertTrue(recordDeclaration.getTypeParameters().isEmpty())
assertTrue(recordDeclaration.getFullyQualifiedName().isPresent())
assertEquals("Point", recordDeclaration.getFullyQualifiedName().get())
assertTrue(recordDeclaration.isRecordDeclaration())
assertEquals(2, parameters.size())
assertEquals("x", parameter0.getNameAsString())
assertEquals("int", parameter0.getTypeAsString())
assertEquals("y", parameter1.getNameAsString())
assertEquals("int", parameter1.getTypeAsString())
assertEquals(0, recordDeclaration.getMembers().size())
assertEquals(1, recordDeclarations.size())
assertEquals(2, parameters.size())
assertEquals("c1", parameter0.getNameAsString())
assertEquals("T1", parameter0.getTypeAsString())
assertEquals("cn", parameter1.getNameAsString())
assertEquals("Tn", parameter1.getTypeAsString())
assertTrue(parameter1.isVarArgs())
assertEquals(1, recordDeclarations.size())
assertEquals(2, parameters.size())
assertEquals("rank", parameter0.getNameAsString())
assertEquals("Rank", parameter0.getTypeAsString())
assertEquals(1, parameter0.getAnnotations().size())
assertEquals("suit", parameter1.getNameAsString())
assertEquals("Suit", parameter1.getTypeAsString())
assertEquals(1, parameter1.getAnnotations().size())
assertEquals(0, recordDeclaration.getMembers().size())
assertEquals(0, recordDeclaration.getMembers().size())
assertEquals("T", recordDeclaration.getTypeParameters().get(0).getNameAsString())
assertTrue(parameters.get(0).isFinal())
assertTrue(parameters.get(1).isFinal())
assertEquals(1, recordDeclarations.size())
assertTrue(member.isClassOrInterfaceDeclaration())
assertEquals(3, recordDeclarations.size())
assertEquals(1, objectCreationExprs.size())
assertEquals("Point", objectCreationExpr.getTypeAsString())
assertEquals(1, recordDeclarations.size())
assertEquals(2, recordDeclarations.size())
assertEquals("TT tt = new <String> @TypeAnno @TA2 TT(\"S\");", statement.toString())
assertEquals("Source.Inner.this", method.getReceiverParameter().get().getNameAsString())
assertEquals("this", method.getReceiverParameter().get().getNameAsString())
assertEquals(method1.getSignature(), method2.getSignature())
assertEquals(method1.getSignature(), method2.getSignature())
assertEquals(method1.getSignature(), method2.getSignature())
assertNotEquals(method1.getSignature(), method2.getSignature())
assertNotEquals(method1.getSignature(), method2.getSignature())
assertNotEquals(method1.getSignature(), method2.getSignature())
assertEquals("x(int, String)", method1.getSignature().toString())
assertTrue(method1.isVariableArityMethod())
assertTrue(method2.isVariableArityMethod())
assertTrue(method1.isFixedArityMethod())
assertTrue(method2.isFixedArityMethod())
assertFalse(first.isPresent())
assertFalse(last.isPresent())
assertFalse(iterator.hasNext())
assertFalse(iterator.hasPrevious())
assertFalse(iterator.hasNext())
assertFalse(iterator.hasNext())
assertFalse(iterator.hasNext())
assertFalse(iterator.hasPrevious())
assertFalse(iterator.hasNext())
assertFalse(iterator.hasPrevious())
assertFalse(iterator.hasNext())
assertFalse(iterator.hasNext())
assertFalse(decl.getDefaultValue().isPresent())
assertFalse(defaultValue.getParentNode().isPresent())
assertFalse(parameter0.isVarArgs())
assertFalse(recordDeclaration.hasModifier(Modifier.Keyword.FINAL))
assertFalse(recordDeclaration.hasModifier(Modifier.Keyword.FINAL))
assertFalse(recordDeclaration.getTypeParameters().isEmpty())
assertFalse(recordDeclaration.hasModifier(Modifier.Keyword.STATIC))
assertFalse(recordDeclaration.hasModifier(Modifier.Keyword.STATIC))
assertFalse(method.getReceiverParameter().isPresent())
assertFalse(y.isInnerClass())
assertTrue(y.isNestedType())
assertFalse(y.isLocalClassDeclaration())
assertFalse(y.isInnerClass())
assertTrue(y.isNestedType())
assertFalse(y.isLocalClassDeclaration())
assertTrue(y.isInnerClass())
assertTrue(y.isNestedType())
assertFalse(y.isLocalClassDeclaration())
assertFalse(y.isInnerClass())
assertFalse(y.isNestedType())
assertFalse(y.isLocalClassDeclaration())
assertFalse(x.isInnerClass())
assertFalse(x.isNestedType())
assertTrue(x.isLocalClassDeclaration())
assertEquals(var1, var1.getType().getParentNode().get())
assertEquals(var2, var2.getType().getParentNode().get())
assertTrue(modifiers.contains(Modifier.publicModifier()))
assertTrue(modifiers.contains(Modifier.staticModifier()))
assertTrue(modifiers.contains(Modifier.finalModifier()))
assertEquals(3, modifiers.size())
assertEquals(0, modifiers.size())
assertTrue(modifiers.contains(Modifier.privateModifier()))
assertTrue(modifiers.contains(Modifier.synchronizedModifier()))
assertEquals(2, modifiers.size())
assertEquals(String.format("public Cons() {%1$s" + "    super();%1$s" + "}", SYSTEM_EOL), cons.toString())
assertEquals(1, decl.getOrphanComments().size())
assertSame(decl, c.getParentNode().get())
assertTrue(decl.removeOrphanComment(c))
assertEquals(0, decl.getOrphanComments().size())
assertEquals(1, aField.getOrphanComments().size())
assertTrue(c.getParentNode().isPresent())
assertTrue(decl.hasJavaDocComment())
assertTrue(decl.hasJavaDocComment())
assertTrue(comment.findCompilationUnit().isPresent())
assertTrue(comment.findCompilationUnit().isPresent())
assertEquals(String.format("class X {%1$s}%1$s", SYSTEM_EOL), cu.toString())
assertEquals("obj instanceof final @A @DA String s", expr.toString())
assertEquals("obj", expr.getExpression().toString())
assertEquals("String", expr.getType().asString())
assertTrue(expr.getPattern().isPresent())
assertEquals("String", patternExpr.getType().asString())
assertEquals("s", patternExpr.getName().asString())
assertTrue(expr.getName().isPresent())
assertEquals("s", expr.getName().get().asString())
assertEquals("obj instanceof String s", expr.toString())
assertEquals("obj", expr.getExpression().toString())
assertEquals(String.class.getSimpleName(), expr.getType().asString())
assertEquals("obj", expr.getExpression().toString())
assertEquals("String", expr.getType().asString())
assertTrue(expr.getPattern().isPresent())
assertEquals("String", patternExpr.getType().asString())
assertEquals("s", patternExpr.getName().asString())
assertTrue(patternExpr.isFinal())
assertTrue(expr.getName().isPresent())
assertEquals("s", expr.getName().get().asString())
assertEquals("obj instanceof final String s", expr.toString())
Assertions.assertEquals(x, e.asDouble())
Assertions.assertEquals(x, e.asDouble())
Assertions.assertEquals(a, e.asDouble())
Assertions.assertEquals(a, e.asDouble())
Assertions.assertEquals(x, e.asDouble())
assertEquals("a", c.getValue())
assertEquals("\\t", c.getValue())
assertEquals("Ω", c.getValue())
assertEquals("\\177", c.getValue())
assertEquals("\\u03a9", c.getValue())
assertEquals("\\'", c.getValue())
assertEquals(BinaryExpr.Operator.PLUS, AssignExpr.Operator.PLUS.toBinaryOperator().get())
assertEquals("new @Test N()", e.toString())
assertEquals(2, methodCallExpr.getChildNodes().size())
assertEquals(empty(), lambdaExpr.getParentNode())
assertEquals("A", className.asString())
assertEquals("a.B", className.asString())
assertNotNull(new MethodReferenceExpr().getScope())
assertEquals("new empty[] {}", expr.toString())
assertEquals("new byte[] {}", expr.toString())
assertEquals("new int[] { 1, 2, 3 }", expr.toString())
assertEquals("empty", new SimpleName().getIdentifier())
assertEquals("xxx\\u2122xxx", name.asString())
assertEquals("c", name.getIdentifier())
assertEquals("a.b.c", name.asString())
assertEquals("import java.util.List;" + SYSTEM_EOL, importDeclaration.toString())
assertEquals("import java.util.List;", ConcreteSyntaxModel.genericPrettyPrint(importDeclaration))
assertEquals("package p1.p2;" + SYSTEM_EOL + SYSTEM_EOL, cu.toString())
assertEquals("package p1.p2;" + SYSTEM_EOL + SYSTEM_EOL, ConcreteSyntaxModel.genericPrettyPrint(cu))
assertTrue(name.getQualifier().get().isInternal())
assertTrue(name.getQualifier().get().getQualifier().get().isInternal())
assertTrue(name.isTopLevel())
assertEquals(3, entry2labels.size())
assertEquals("MONDAY", entry2labels.get(0).toString())
assertEquals("FRIDAY", entry2labels.get(1).toString())
assertEquals("SUNDAY", entry2labels.get(2).toString())
assertEquals(THROWS_STATEMENT, switchExpr.getEntry(0).getType())
assertEquals(EXPRESSION, switchExpr.getEntry(0).getType())
assertEquals(BLOCK, switchExpr.getEntry(2).getType())
assertEquals(BlockStmt.class, switchExpr.getEntry(2).getStatements().get(0).getClass())
assertEquals("xxx\\u03a9xxx", omega.getValue())
assertTrue(expr.isThisExpr())
assertEquals("c", fieldAccess.getName().asString())
assertEquals("A", className.asString())
assertEquals("c", fieldAccess.getName().asString())
assertEquals("a.B", className.asString())
assertEquals("c", fieldAccess.getName().asString())
assertEquals(startToken, tokenRange.getBegin().asString())
assertEquals(endToken, tokenRange.getEnd().asString())
assertEquals("Optional[y]", lambdaExpr.getExpressionBody().toString())
assertEquals("Optional.empty", lambdaExpr.getExpressionBody().toString())
assertEquals("a -> 5", expr.toString())
assertEquals("(a, b) -> 5", expr.toString())
assertEquals(AssignExpr.Operator.PLUS, BinaryExpr.Operator.PLUS.toAssignOperator().get())
assertEquals(expected, actual)
assertEquals(expected, actual)
assertEquals(expected, actual)
assertEquals(expected, actual)
assertEquals(expected, actual)
assertEquals(expected, actual)
assertEquals("              <html>\n" + "                  <body>\n" + "                      <p>Hello, world</p>\n" + "                  </body>\n" + "              </html>\n" + "              ", textBlock.getValue())
assertEquals(asList("<html>", "    <body>", "        <p>Hello, world</p>", "    </body>", "</html>", ""), textBlock.stripIndentOfLines().collect(toList()))
assertEquals("<html>\n" + "    <body>\n" + "        <p>Hello, world</p>\n" + "    </body>\n" + "</html>\n", textBlock.stripIndent())
assertEquals("<html>\n" + "    <body>\n" + "        <p>Hello, world</p>\n" + "    </body>\n" + "</html>\n", textBlock.translateEscapes())
assertEquals("              <html>\n" + "                  <body>\n" + "                      <p>Hello, world</p>\n" + "                  </body>\n" + "              </html>\n", textBlock.translateEscapes())
assertEquals("      <html>\n" + "          <body>\n" + "              <p>Hello, world</p>\n" + "          </body>\n" + "      </html>\n", textBlock.translateEscapes())
assertEquals("<html>\n" + "    <body>\n" + "        <p>Hello, world</p>\n" + "    </body>\n" + "</html>\n", textBlock.translateEscapes())
assertEquals("String text = \"\"\"\n" + "    A text block inside a text block\n" + "\"\"\";\n", textBlock.translateEscapes())
assertEquals("The quick brown fox  \n" + "jumps over the lazy dog\n", textBlock.translateEscapes())
assertEquals("Lorem ipsum dolor sit amet, consectetur adipiscing " + "elit, sed do eiusmod tempor incididunt ut labore " + "et dolore magna aliqua.", textBlock.translateEscapes())
assertEquals("red   \n" + "green \n" + "blue  \n", textBlock.translateEscapes())
assertEquals("\nHello\n" + "World", textBlock.translateEscapes())
assertEquals(1, compilationUnit.getAllContainedComments().size())
assertEquals(sourceRoot, sourceRoot1)
assertEquals(sourceRoot, sourceRoot1)
assertEquals("PrimaryType", cu.getPrimaryTypeName().get())
assertEquals("PrimaryType", cu.getPrimaryType().get().getNameAsString())
assertFalse(c.getParentNode().isPresent())
assertFalse(aClass.removeOrphanComment(c))
assertFalse(decl.hasJavaDocComment())
assertFalse(decl.hasJavaDocComment())
assertFalse(decl.hasJavaDocComment())
assertFalse(patternExpr.isFinal())
assertFalse(expr.getPattern().isPresent())
assertFalse(expr.getName().isPresent())
assertFalse(name.isInternal())
assertFalse(name.getQualifier().get().isTopLevel())
assertFalse(name.getQualifier().get().getQualifier().get().isTopLevel())
assertFalse(cu.getPrimaryTypeName().isPresent())
assertFalse(cu.getPrimaryType().isPresent())
assertEquals(cu, x.findCompilationUnit().get())
assertEquals("int x;", x.findAncestor(FieldDeclaration.class).get().toString())
assertEquals(FieldDeclaration.class.getName(), vd.findAncestor(new Class[] { CompilationUnit.class, ClassOrInterfaceDeclaration.class, FieldDeclaration.class }).get().getClass().getName())
assertEquals(ClassOrInterfaceDeclaration.class.getName(), vd.findAncestor(new Class[] { CompilationUnit.class, ClassOrInterfaceDeclaration.class }).get().getClass().getName())
assertFalse(x.findCompilationUnit().isPresent())
assertEquals("1 + 111", b.toString())
assertEquals("11", b.toString())
assertEquals("[2, 3]", ints.toString())
assertEquals("[1, 2, 3]", ints.toString())
assertEquals("[1 + 2 + 3, 1 + 2, 1, 2, 3]", ints.toString())
assertEquals("Optional[2]", ints.toString())
assertEquals("Optional[1]", ints.toString())
assertEquals("[2, 3]", ints.toString())
assertEquals("int", typeAsString("int x"))
assertEquals("List<Long>", typeAsString("List<Long> x"))
assertEquals("String", typeAsString("@A String x"))
assertEquals("List<? extends Object>", typeAsString("List<? extends Object> x"))
assertTrue(result.isSuccessful())
assertEquals("List<long>", decl.getVariable(0).getType().asString())
assertTrue(type.isArrayType())
assertNotNull(s[0])
assertEquals("TypeUtilsTest<String>.Tester", type.toString())
assertEquals("@C" + SYSTEM_EOL + "int[][] a;", variableDeclarationStatement.toString())
assertEquals("Blob[][] a;", fieldDeclaration.toString())
assertEquals("Blob[][] a() {" + SYSTEM_EOL + "}", method.toString())
assertEquals(ArrayType.Origin.NAME, outerType.asArrayType().getOrigin())
assertEquals(ArrayType.Origin.TYPE, outerType.asArrayType().getComponentType().asArrayType().getOrigin())
assertEquals(ArrayType.Origin.NAME, outerType.asArrayType().getOrigin())
assertEquals(ArrayType.Origin.TYPE, outerType.asArrayType().getComponentType().asArrayType().getOrigin())
assertEquals("void a(Blob[][] a) {" + SYSTEM_EOL + "}", method.toString())
assertEquals("int[][]@X ... a", p.toString())
assertEquals("int[][]@X... a", ConcreteSyntaxModel.genericPrettyPrint(p))
assertEquals(1, fd1.getVariable(0).getType().getArrayLevel())
assertEquals(2, fd2.getVariable(0).getType().getArrayLevel())
assertEquals(8, type.getRange().get().end.column)
assertNotEquals("A", classOrInterfaceType.getName().toString())
assertEquals("A", classOrInterfaceType.getName().toString())
assertEquals("A.B", classB.getNameWithScope())
assertTrue(classB.getTypeArguments().isPresent())
assertEquals(1, classB.getTypeArguments().get().size())
assertEquals(classA, classB.getTypeArguments().get().get(0))
assertEquals("A.B", classB.getNameWithScope())
assertEquals("A.B<A>", classB.asString())
assertEquals(1, classA.getAnnotations().size())
assertEquals(annotationExpr, classA.getAnnotation(0))
assertTrue(newClass.isPresent())
assertSame(classA, newClass.get())
assertTrue(classA.isClassOrInterfaceType())
assertEquals(classA, classA.asClassOrInterfaceType())
assertEquals(classA, classA.clone())
assertEquals(JavaParserMetaModel.classOrInterfaceTypeMetaModel, classA.getMetaModel())
assertEquals(classA, classOrInterfaceType)
assertNotNull(provider)
assertTrue(parse.isSuccessful())
assertNotNull(provider)
assertTrue(parse.isSuccessful())
assertNotNull(provider)
assertTrue(parse.isSuccessful())
assertTrue(superNode.isAncestorOf(subNode))
assertTrue(subNode.isDescendantOf(superNode))
assertNotNull(providerA)
assertTrue(parseA.isSuccessful())
assertNotNull(providerB)
assertTrue(parseB.isSuccessful())
assertEquals("ABC!", clone.getData(ABC))
assertEquals("DEF!", clone.getData(DEF))
assertEquals(Arrays.asList("'int a;' ADDITION in list at 1", "'int b;' ADDITION in list at 2", "'int c;' ADDITION in list at 3"), changes)
assertEquals(Arrays.asList("'int a;' ADDITION in list at 0", "'int b;' ADDITION in list at 1", "'int c;' ADDITION in list at 2"), changes)
assertEquals(Arrays.asList("'int a;' REMOVAL in list at 0", "'int b;' REMOVAL in list at 0", "'int c;' REMOVAL in list at 0"), changes)
assertEquals(Arrays.asList("'int b;' REMOVAL in list at 1", "'int d;' ADDITION in list at 1"), changes)
assertEquals(cd.getMembers().size(), 4)
assertEquals(cd.getMembers().size(), 0)
assertEquals(cd.getMembers().size(), 4)
assertEquals(cd.getMembers().size(), 0)
assertEquals(1, decl.getOrphanComments().size())
assertTrue(c.remove())
assertEquals(0, decl.getOrphanComments().size())
assertTrue(decl.getComment().isPresent())
assertTrue(c.remove())
assertEquals(" xxx\\u2122xxx", comment.getContent())
assertTrue(block.toString().contains("TODO"))
assertEquals("a.b.c.X", i.getNameAsString())
assertEquals("a.b.c.D", i.getName().toString())
assertEquals("D", i.getName().getIdentifier())
assertEquals("a.b.c.X", i.getName().getQualifier().get().asString())
assertEquals("def", i.getName().getIdentifier())
assertEquals("a.b.c.X", i.getNameAsString())
assertEquals(String.format("package z;%1$s" + "%1$s" + "class Y {%1$s" + "}%1$s", SYSTEM_EOL), cu.toString())
assertEquals(String.format("package x;%1$s" + "%1$s" + "class B {%1$s" + "%1$s" + "    int y;%1$s" + "}%1$s", SYSTEM_EOL), cu.toString())
assertFalse(node.isAncestorOf(node))
assertFalse(node.isDescendantOf(node))
assertFalse(subNode.isAncestorOf(superNode))
assertFalse(superNode.isDescendantOf(subNode))
assertFalse(superNodeA.isAncestorOf(superNodeB))
assertFalse(superNodeA.isDescendantOf(subNodeB))
assertFalse(superNodeB.isAncestorOf(superNodeA))
assertFalse(superNodeB.isDescendantOf(subNodeA))
assertFalse(decl.getComment().isPresent())
assertFalse(c.remove())
assertFalse(cu.getClassByName("A").get().getName().remove())
assertTrue(cu.getClassByName("A").get().getMethodsByName("foo").get(0).getBody().get().remove())
assertTrue(res.getProblems().isEmpty())
assertEquals(p1.hashCode(), p2.hashCode())
assertNotEquals(p1.hashCode(), p2.hashCode())
assertEquals("List<@C ? extends Object>", type.toString())
assertEquals("<(2 + 3) + (4 + 5)> <(2 + 3)> <(4 + 5)> <2 + 3> <4 + 5> <2> <3> <4> <5> ", result.toString())
assertEquals("<(2 + 3) + (4 + 5)> <(2 + 3)> <2 + 3> <2> <3> <(4 + 5)> <4 + 5> <4> <5> ", result.toString())
assertEquals("<2> <3> <2 + 3> <(2 + 3)> <4> <5> <4 + 5> <(4 + 5)> <(2 + 3) + (4 + 5)> ", result.toString())
assertEquals("x = 1", visitor.next().toString())
assertEquals("int x = 1;", visitor.next().toString())
assertFalse(visitor.hasNext())
assertEquals("<(2 + 3)> <(4 + 5)> ", result.toString())
assertEquals(p1.hashCode(), p2.hashCode())
assertEquals(p1.hashCode(), p2.hashCode())
assertEquals(3, p1.getAllComments().size())
assertEquals(2, p2.getAllComments().size())
assertNotEquals(p1.hashCode(), p2.hashCode())
assertEquals(0, NoCommentHashCodeVisitor.hashCode(node))
assertEquals(0, NoCommentHashCodeVisitor.hashCode(node))
assertEquals(0, NoCommentHashCodeVisitor.hashCode(node))
assertNull(node)
assertSame(argument, argumentCaptor.getValue())
assertTrue(NoCommentEqualsVisitor.equals(p1, p2))
assertTrue(NoCommentEqualsVisitor.equals(p1, p2))
assertFalse(NoCommentEqualsVisitor.equals(p1, p2))
assertEquals("extra c", list.get(0).getValue())
assertEquals("extra b", list.get(1).getValue())
assertEquals("extra a", list.get(2).getValue())
assertEquals("extra t", list.get(3).getValue())
assertEquals("x", list.get(4).getValue())
assertEquals("c", list.get(5).getValue())
assertEquals(6, list.size())
assertEquals("2", result.toString())
assertEquals("1", result.toString())
assertNull(result)
assertEquals("void x() {" + SYSTEM_EOL + "}", result.toString())
assertSame(argument, argumentCaptor.getValue())
assertSame(argument, argumentCaptor.getValue())
Assertions.assertEquals(oce.size(), foundObjs.get())
Assertions.assertEquals(2, oce.size())
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(node.hashCode(), ObjectIdentityHashCodeVisitor.hashCode(node))
assertEquals(STATEMENT_GROUP, switchStmt.getEntry(0).getType())
assertEquals(STATEMENT_GROUP, switchStmt.getEntry(1).getType())
assertEquals(STATEMENT_GROUP, switchStmt.getEntry(2).getType())
assertEquals(new NodeList<>(), switchStmt.getEntry(2).getLabels())
assertEquals(EXPRESSION, switchStmt.getEntry(0).getType())
assertEquals(BinaryExpr.class, statement.getExpression().getClass())
assertEquals(EnclosedExpr.class, statement.getExpression().getClass())
assertEquals(EnclosedExpr.class, statement.getExpression().getClass())
assertEquals(MethodCallExpr.class, statement.getExpression().getClass())
assertEquals(MethodCallExpr.class, statement.getExpression().getClass())
assertEquals(MethodCallExpr.class, statement.getExpression().getClass())
assertEquals(MethodCallExpr.class, statement.getExpression().getClass())
assertEquals(MethodCallExpr.class, statement.getExpression().getClass())
assertEquals(MethodCallExpr.class, statement.getExpression().getClass())
assertEquals(MethodCallExpr.class, statement.getExpression().getClass())
assertEquals(MethodCallExpr.class, statement.getExpression().getClass())
assertEquals(EnclosedExpr.class, statement.getExpression().getClass())
assertEquals(ConditionalExpr.class, statement.getExpression().getClass())
assertEquals(NameExpr.class, statement.getExpression().getClass())
assertEquals(MethodCallExpr.class, statement.getExpression().getClass())
assertEquals(MethodCallExpr.class, statement.getExpression().getClass())
assertFalse(ifStmt.hasElseBlock())
assertTrue(ifStmt.hasElseBranch())
assertFalse(ifStmt.hasCascadingIfStmt())
assertTrue(ifStmt.hasElseBlock())
assertTrue(ifStmt.hasElseBranch())
assertFalse(ifStmt.hasCascadingIfStmt())
assertFalse(ifStmt.hasElseBlock())
assertTrue(ifStmt.hasElseBranch())
assertTrue(ifStmt.hasCascadingIfStmt())
assertEquals(PrimitiveType.intType(), statement.getVariableDeclarator().getType())
assertEquals("i", statement.getVariableDeclarator().getName().getIdentifier())
assertTrue(statement.hasFinalVariable())
assertEquals(new ClassOrInterfaceType(null, "Object"), statement.getVariableDeclarator().getType())
assertEquals("o", statement.getVariableDeclarator().getName().getIdentifier())
assertEquals("hond", statement.getLabel().get().asString())
assertEquals("break;", statement.toString())
assertTrue(statement.getLabel().isPresent())
assertTrue(statement.getLabel().isPresent())
assertEquals(label, statement.getLabel().get())
assertTrue(statement.getLabel().isPresent())
assertTrue(new BreakStmt().isBreakStmt())
assertSame(breakStatement, breakStatement.asBreakStmt())
assertTrue(optBreak.isPresent())
assertSame(breakStatement, optBreak.get())
assertNotSame(breakStatement, clonedStatement)
assertEquals(breakStatement, clonedStatement)
assertTrue(breakStatement.getLabel().isPresent())
assertTrue(breakStatement.remove(label))
assertTrue(breakStatement.getLabel().isPresent())
assertSame(originalLabel, breakStatement.getLabel().get())
assertTrue(breakStatement.getLabel().isPresent())
assertSame(replacementLabel, breakStatement.getLabel().get())
assertNotEquals(compilationUnit, null)
assertNotEquals(compilationUnit, value)
assertEquals(src.trim(), resultNode.toString().trim())
assertInstanceOf(VariableDeclarationExpr.class, tryStmt.getResources().get(0))
assertInstanceOf(VariableDeclarationExpr.class, tryStmt.getResources().get(0))
assertInstanceOf(VariableDeclarationExpr.class, tryStmt.getResources().get(0))
assertInstanceOf(NameExpr.class, tryStmt.getResources().get(0))
assertInstanceOf(NameExpr.class, tryStmt.getResources().get(0))
assertInstanceOf(NameExpr.class, tryStmt.getResources().get(1))
assertInstanceOf(FieldAccessExpr.class, tryStmt.getResources().get(0))
assertInstanceOf(FieldAccessExpr.class, tryStmt.getResources().get(0))
assertInstanceOf(FieldAccessExpr.class, tryStmt.getResources().get(0))
assertInstanceOf(VariableDeclarationExpr.class, tryStmt.getResources().get(0))
assertInstanceOf(VariableDeclarationExpr.class, tryStmt.getResources().get(0))
assertEquals(true, blockStmt.getStatements().isEmpty())
assertEquals(1, statementUnderTest.findAll(MethodReferenceExpr.class).size())
assertEquals(1, statementUnderTest.findAll(MethodReferenceExpr.class).size())
assertEquals(line, node.getBegin().get().line)
assertEquals(column, node.getBegin().get().column)
assertEquals(line, node.getEnd().get().line)
assertEquals(column, node.getEnd().get().column)
assertEquals(expected, node.getNameAsString())
assertEquals(expected, node.getName().toString())
assertEquals(expectedValue, expr.getType().isUsingDiamondOperator())
assertNotNull(assignExpr.getTarget())
assertEquals(NameExpr.class, assignExpr.getTarget().getClass())
assertEquals(assignExpr.getTarget().asNameExpr().getNameAsString(), "mString")
assertEquals(false, compilationUnit.getComment().isPresent())
assertEquals(false, classUnderTest.getComment().isPresent())
assertEquals(false, fieldUnderTest.getComment().isPresent())
assertFalse(statement.hasFinalVariable())
assertFalse(statement.getLabel().isPresent())
assertFalse(statement.getLabel().isPresent())
assertFalse(statement.getLabel().isPresent())
assertFalse(breakStatement.getLabel().isPresent())
assertTrue(position.equals(secondPosition))
assertFalse(position.equals(secondPosition))
assertFalse(secondPosition.isAfter(position))
assertFalse(secondPosition.isBefore(position))
assertTrue(range.equals(secondRange))
assertTrue(range.contains(secondRange))
assertEquals(RETURN_VALUE, castValue(RETURN_VALUE, returnType, valueType.asString()))
assertEquals(String.format("(%s) %s", returnType, RETURN_VALUE), castValue(RETURN_VALUE, returnType, valueType.asString()))
assertEquals(expectedSourcesCus.size(), editedSourceCus.size())
