assertTrue(impossibleAlternative.isImpossible())
assertTrue(((Trip.PtLeg) impossibleAlternative.getLegs().get(0)).stops.get(0).departureCancelled)
assertEquals(2, response.getAll().size())
assertTrue(impossibleAlternative.isImpossible())
assertEquals(3, response.getAll().size())
assertTrue(impossibleAlternative.isImpossible())
assertTrue(((Trip.PtLeg) impossibleAlternative.getLegs().get(0)).stops.get(1).arrivalCancelled)
assertEquals(2, response.getAll().size())
assertTrue(impossibleAlternative.isImpossible())
assertTrue(((Trip.PtLeg) impossibleAlternative.getLegs().get(0)).stops.get(2).departureCancelled)
assertEquals(1, response.getAll().size())
assertEquals("EXTRA0", ptLeg.trip_id)
assertEquals(1, response.getAll().size())
assertEquals(1, responseWithRealtimeUpdate.getAll().size())
assertEquals(1, response.getAll().size())
assertEquals(1, response.getAll().size())
assertTrue(route.getAll().get(route.getAll().size() - 1).isImpossible())
assertEquals(2, response.getAll().size())
assertTrue(impossibleAlternative.isImpossible())
assertEquals(2, response.getAll().size())
assertTrue(impossibleAlternative.isImpossible())
assertEquals(1, response.getAll().size())
assertFalse(((Trip.PtLeg) possibleAlternative.getLegs().get(0)).stops.get(0).departureCancelled)
assertFalse(route.hasErrors())
assertFalse(route.hasErrors())
assertFalse(route.getAll().isEmpty())
assertFalse(route.hasErrors())
assertEquals(1, route.getAll().size())
assertEquals("JUSTICE_COURT,MUSEUM", firstLeg.stops.stream().map(s -> s.stop_id).collect(Collectors.joining(",")))
assertEquals("EMSI,DADAN", secondLeg.stops.stream().map(s -> s.stop_id).collect(Collectors.joining(",")))
assertEquals(LocalDateTime.parse("2007-01-01T10:00:00").atZone(zoneId).toInstant(), transferLeg.getDepartureTime().toInstant())
assertEquals(LocalDateTime.parse("2007-01-01T10:08:06.670").atZone(zoneId).toInstant(), transferLeg.getArrivalTime().toInstant())
assertEquals(readWktLineString("LINESTRING (-116.76164 36.906093, -116.761812 36.905928, -116.76217 36.905659)"), transitSolution.getLegs().get(1).geometry)
assertEquals(4500000L, transitSolution.getTime())
assertEquals(4500000.0, transitSolution.getRouteWeight())
assertFalse(route.hasErrors())
assertEquals(1, route.getAll().size())
assertFalse(route.hasErrors())
assertEquals(1, route.getAll().size())
assertEquals(2, transitSolution.getLegs().size())
assertEquals("COURT2MUSEUM", ptLeg1.route_id)
assertEquals("MUSEUM1", ptLeg1.trip_id)
assertEquals("JUSTICE_COURT", ptLeg1.stops.get(0).stop_id)
assertEquals("MUSEUM", ptLeg1.stops.get(1).stop_id)
assertEquals("MUSEUM2AIRPORT", ptLeg2.route_id)
assertEquals("MUSEUMAIRPORT1", ptLeg2.trip_id)
assertEquals("NEXT_TO_MUSEUM", ptLeg2.stops.get(0).stop_id)
assertEquals("AIRPORT", ptLeg2.stops.get(1).stop_id)
assertEquals("NEXT_TO_MUSEUM,AIRPORT", ((Trip.PtLeg) ptLegs.get(0)).stops.stream().map(s -> s.stop_id).collect(Collectors.joining(",")))
assertEquals("BEATTY_AIRPORT,BULLFROG", ((Trip.PtLeg) ptLegs.get(1)).stops.stream().map(s -> s.stop_id).collect(Collectors.joining(",")))
assertEquals("14:10", LocalDateTime.ofInstant(arrivalTime, zoneId).toLocalTime().toString())
assertEquals(15_000_000, Duration.between(ghRequest.getEarliestDepartureTime(), arrivalTime).toMillis())
assertEquals(1.5E7, transitSolution.getRouteWeight())
assertFalse(route.hasErrors())
assertEquals(1, route.getAll().size())
assertEquals(4500000L, transitSolution.getTime())
assertEquals(4500000.0, transitSolution.getRouteWeight())
assertEquals("JUSTICE_COURT,MUSEUM", ((Trip.PtLeg) transitSolution.getLegs().get(0)).stops.stream().map(s -> s.stop_id).collect(Collectors.joining(",")))
assertEquals("10:00", LocalDateTime.ofInstant(walkDepartureTime, zoneId).toLocalTime().toString())
assertEquals(readWktLineString("LINESTRING (-116.76164 36.906093, -116.761812 36.905928, -116.76217 36.905659)"), transitSolution.getLegs().get(1).geometry)
assertEquals("10:08:06.670", LocalDateTime.ofInstant(walkArrivalTime, zoneId).toLocalTime().toString())
assertEquals("EMSI,DADAN", ((Trip.PtLeg) transitSolution.getLegs().get(2)).stops.stream().map(s -> s.stop_id).collect(Collectors.joining(",")))
assertEquals(1, walkRoute.getLegs().size())
assertEquals(486670, walkRoute.getTime())
assertEquals(readWktLineString("LINESTRING (-116.76164 36.906093, -116.761812 36.905928, -116.76217 36.905659)"), walkRoute.getLegs().get(0).geometry)
assertFalse(route.hasErrors())
assertTrue(amount.getAmount().doubleValue() > onlyFare.fare_attribute.price)
assertTrue(cheapestFareWhereEveryLegGoesThroughAllZones >= cheapestFare)
assertEquals(2, transfersToStop.size())
assertEquals("MUSEUM", transfer.from_stop_id)
assertEquals("NEXT_TO_MUSEUM", transfer.to_stop_id)
Assertions.assertNull(transfer.from_route_id)
Assertions.assertNull(transfer.to_route_id)
Assertions.assertEquals(600, transfer.min_transfer_time)
assertEquals("NEXT_TO_MUSEUM", withinStationTransfer.from_stop_id)
assertEquals("NEXT_TO_MUSEUM", withinStationTransfer.to_stop_id)
assertNull(withinStationTransfer.from_route_id)
assertNull(withinStationTransfer.to_route_id)
assertEquals(5, transfersToStop.size())
assertEquals("AB", transfersToStop.get(0).from_route_id)
assertEquals("FUNNY_BLOCK_AB", transfersToStop.get(1).from_route_id)
assertEquals("STBA", transfersToStop.get(2).from_route_id)
assertEquals("AAMV", transfersToStop.get(3).from_route_id)
assertEquals("ABBFC", transfersToStop.get(4).from_route_id)
assertFalse(route.hasErrors())
assertEquals(1, route.getAll().size())
assertEquals(1, route.getAll().size())
assertEquals(1, route.getAll().size())
assertEquals(1, response.getAll().size())
assertEquals(1, route.getAll().size())
assertEquals(1, route.getAll().size())
assertEquals(expectedDepartureTimes, actualDepartureTimes)
assertEquals(expectedDepartureTimes, actualDepartureTimes)
assertEquals(expectedDepartureTimes, actualDepartureTimes)
assertTrue(route.getAll().isEmpty())
assertTrue(route.getAll().isEmpty())
assertEquals("AB", ((Trip.PtLeg) mondayTrip.getLegs().get(1)).route_id)
assertNotEquals("AB", ((Trip.PtLeg) mondayTrip.getLegs().get(0)).route_id)
assertNotEquals("AB", ((Trip.PtLeg) mondayTrip.getLegs().get(1)).route_id)
assertEquals("AB", ((Trip.PtLeg) mondayTrip.getLegs().get(1)).route_id)
assertEquals(22800000.0, mondayTrip.getRouteWeight())
assertEquals("AB", ((Trip.PtLeg) mondayTrip.getLegs().get(0)).route_id)
assertEquals(22900000.0, mondayTrip.getRouteWeight())
assertEquals("AB", ((Trip.PtLeg) mondayTrip.getLegs().get(0)).route_id)
assertEquals(18600000.0, mondayTrip.getRouteWeight())
assertEquals("AB", ((Trip.PtLeg) mondayTrip.getLegs().get(0)).route_id)
assertEquals(18700000.0, mondayTrip.getRouteWeight())
assertNotEquals("AB", ((Trip.PtLeg) mondayTrip.getLegs().get(0)).route_id)
assertNotEquals("AB", ((Trip.PtLeg) mondayTrip.getLegs().get(1)).route_id)
assertEquals("AB", ((Trip.PtLeg) mondayTrip.getLegs().get(1)).route_id)
assertEquals(22900000.0, mondayTrip.getRouteWeight())
assertEquals("FUNNY_BLOCK_AB1", (((Trip.PtLeg) mondayTrip.getLegs().get(0)).trip_id))
assertEquals("FUNNY_BLOCK_BFC1", (((Trip.PtLeg) mondayTrip.getLegs().get(1)).trip_id))
assertEquals("FUNNY_BLOCK_FCAMV1", (((Trip.PtLeg) mondayTrip.getLegs().get(2)).trip_id))
assertTrue((((Trip.PtLeg) mondayTrip.getLegs().get(1)).isInSameVehicleAsPrevious))
assertTrue((((Trip.PtLeg) mondayTrip.getLegs().get(2)).isInSameVehicleAsPrevious))
assertEquals("FUNNY_BLOCK_AB1", (((Trip.PtLeg) sundayTrip.getLegs().get(0)).trip_id))
assertEquals("FUNNY_BLOCK_FCAMV1", (((Trip.PtLeg) sundayTrip.getLegs().get(1)).trip_id))
assertTrue((((Trip.PtLeg) sundayTrip.getLegs().get(1)).isInSameVehicleAsPrevious))
assertNull(config.getConfigForDistance(190, "turn", " then"))
assertNull(config.getConfigForDistance(190, "turn", " then"))
assertNull(configMetric.getConfigForDistance(1999, "turn", " then"))
assertNull(configMetric.getConfigForDistance(1999, "abbiegen", " dann"))
assertNull(configImperial.getConfigForDistance(1999, "turn", " then"))
assertEquals(expectedSpokenDistance, values.spokenDistance)
assertEquals(expectedInstruction, values.turnDescription)
assertEquals(translationMap.getWithFallBack(Locale.US).tr("navigate.in_km", 12), "In 12 kilometers")
assertEquals(translationMap.getWithFallBack(Locale.GERMAN).tr("navigate.in_km", 12), "In 12 Kilometern")
assertEquals(translationMap.getWithFallBack(new Locale("de", "DE")).tr("navigate.in_km", 12), "In 12 Kilometern")
assertEquals(translationMap.getWithFallBack(new Locale("de", "CH")).tr("navigate.in_km_singular"), "In 1 Kilometer")
assertEquals("en", route.get("voiceLocale").asText())
assertEquals("depart", maneuver.get("type").asText())
assertEquals("straight", maneuver.get("modifier").asText())
assertEquals("la Callisa", step.get("name").asText())
assertTrue(instructionDistance < routeDistance)
assertEquals(1, voiceInstructions.size())
assertTrue(voiceInstruction.get("distanceAlongGeometry").asDouble() <= instructionDistance)
assertEquals("turn sharp left onto la Callisa, then keep left", voiceInstruction.get("announcement").asText())
assertEquals(1, bannerInstructions.size())
assertEquals("la Callisa", bannerInstruction.get("text").asText())
assertEquals("turn", bannerInstruction.get("type").asText())
assertEquals("sharp left", bannerInstruction.get("modifier").asText())
assertEquals("la Callisa", bannerInstructionComponent.get("text").asText())
assertEquals(1, voiceInstructions.size())
assertTrue(voiceInstruction.get("distanceAlongGeometry").asDouble() < instructionDistance)
assertEquals(1, bannerInstructions.size())
assertEquals("Arrive at destination", bannerInstruction.get("text").asText())
assertEquals(2, waypointsJson.size())
assertEquals(2, voiceInstructions.size())
assertEquals("In 200 meters At roundabout, take exit 2 onto CS-340, then At roundabout, take exit 2 onto CG-3", voiceInstruction.get("announcement").asText())
assertEquals(4, voiceInstructions.size())
assertEquals("In 2 kilometers keep right", voiceInstruction.get("announcement").asText())
assertEquals("keep right", voiceInstruction.get("announcement").asText())
assertEquals(2, voiceInstructions.size())
assertEquals("In 600 feet At roundabout, take exit 2 onto CS-340, then At roundabout, take exit 2 onto CG-3", voiceInstruction.get("announcement").asText())
assertEquals(4, voiceInstructions.size())
assertEquals("In 2 miles keep right", voiceInstruction.get("announcement").asText())
assertEquals("keep right", voiceInstruction.get("announcement").asText())
assertEquals(2, rsp.getAll().size())
assertEquals(2, routes.size())
assertEquals("GraphHopper Route 0", routes.get(0).get("legs").get(0).get("summary").asText())
assertEquals("Avinguda Sant Antoni, CG-3", routes.get(1).get("legs").get(0).get("summary").asText())
assertEquals("In 2 kilometers keep right", voiceInstruction.get("announcement").asText())
assertEquals("In 2 Kilometern rechts halten", voiceInstruction.get("announcement").asText())
assertEquals("roundabout", primary.get("type").asText())
assertEquals("At roundabout, take exit 2 onto CG-3", primary.get("text").asText())
assertEquals("right", primary.get("modifier").asText())
assertEquals(4, waypointsJson.size())
assertEquals(3, legs.size())
assertEquals("InvalidInput", json.get("code").asText())
assertTrue(json.get("message").asText().startsWith("Point 0 is out of bounds: 42.554851,111.536198"))
assertEquals(0, bearings.size())
assertEquals(Collections.EMPTY_LIST, bearings)
assertEquals(1, bearings.size())
assertEquals(4, bearings.size())
Assertions.assertEquals(graphHopperConfig.getInt("index.max_region_search", 0), 100)
Assertions.assertEquals(graphHopperConfig.getInt("index.pups", 0), 0)
assertEquals("your_car", profileResolver.resolveProfile(new PMap().putObject("vehicle", "car")).getName())
assertEquals("my_bike", profileResolver.resolveProfile(new PMap().putObject("vehicle", "bike")).getName())
assertEquals("short_bike", profileResolver.resolveProfile(new PMap().putObject("weighting", "shortest")).getName())
assertEquals("fast_bike", profileResolver.resolveProfile(new PMap().putObject("weighting", "fastest")).getName())
assertEquals("short_bike", profileResolver.resolveProfile(new PMap().putObject("weighting", "shortest")).getName())
assertEquals("fast_bike", profileResolver.resolveProfile(new PMap().putObject("vehicle", "bike").putObject("weighting", "fastest")).getName())
assertEquals("short_bike", profileResolver.resolveProfile(new PMap().putObject("vehicle", "bike").putObject("weighting", "shortest")).getName())
assertEquals("profile", profileResolver.resolveProfile(new PMap()).getName())
assertEquals("profile", profileResolver.resolveProfile(new PMap().putObject(Parameters.Routing.EDGE_BASED, false)).getName())
assertEquals(profile1, profileResolver.resolveProfile(hints).getName())
assertEquals(profile1, profileResolver.resolveProfile(hints.putObject(Parameters.CH.DISABLE, true)).getName())
assertEquals(profile1, profileResolver.resolveProfile(hints.putObject(Parameters.Landmark.DISABLE, true)).getName())
assertEquals(4, wayList.size())
assertEquals(5, points.size())
assertEquals(1604121, p.getTime())
assertEquals(Instruction.CONTINUE_ON_STREET, wayList.get(0).getSign())
assertEquals(Instruction.TURN_LEFT, wayList.get(1).getSign())
assertEquals(Instruction.TURN_RIGHT, wayList.get(2).getSign())
assertEquals(5, result.size())
assertEquals(0, result.get(0).getTime().longValue())
assertNull(result.get(1).getTime())
assertEquals(15000, result.get(2).getTime().longValue())
assertEquals(19000, result.get(3).getTime().longValue())
assertEquals(22000, result.get(4).getTime().longValue())
assertEquals("_", GpxConversions.simpleXMLEscape("<"))
assertEquals("_blup_", GpxConversions.simpleXMLEscape("<blup>"))
assertEquals("a&amp;b", GpxConversions.simpleXMLEscape("a&b"))
assertEquals("W", GpxConversions.calcDirection(currI, nextI))
assertEquals("NE", GpxConversions.calcDirection(i2, null))
assertEquals("N", GpxConversions.calcDirection(i3, null))
assertEquals("S", GpxConversions.calcDirection(i4, null))
assertTrue(Double.isNaN(GpxConversions.calcAzimuth(i5, null)))
assertEquals("", GpxConversions.calcDirection(i5, null))
assertTrue(rsp.hasErrors())
assertEquals(2, rsp.getErrors().size())
assertTrue(rsp.hasProblems())
assertEquals(Long.MAX_VALUE, rsp.getTime(0, 1))
assertEquals(2 * 1000, rsp.getTime(0, 0))
assertEquals("[[0, 1], [1, 0]]", rsp.getDisconnectedPoints().toString())
assertTrue(rsp.hasProblems())
assertEquals(Long.MAX_VALUE, rsp.getTime(1, 0))
assertEquals(Long.MAX_VALUE, rsp.getTime(1, 1))
assertEquals(Long.MAX_VALUE, rsp.getTime(1, 2))
assertEquals(Long.MAX_VALUE, rsp.getTime(0, 1))
assertEquals(Long.MAX_VALUE, rsp.getTime(2, 1))
assertEquals(8 * 1000, rsp.getTime(0, 0))
assertEquals(9 * 1000, rsp.getTime(0, 2))
assertEquals(10 * 1000, rsp.getTime(2, 0))
assertEquals(11 * 1000, rsp.getTime(2, 2))
assertEquals("[[0, 1], [1, 0], [1, 1], [1, 2], [2, 1]]", rsp.getDisconnectedPoints().toString())
assertEquals(Collections.singletonList(1), rsp.getInvalidFromPoints())
assertEquals(Collections.singletonList(1), rsp.getInvalidToPoints())
assertTrue(rsp.hasErrors())
assertEquals(886, rsp.getTime(0, 1) / 1000)
assertEquals("{\"points\":[[12.0,11.0]],\"out_arrays\":[\"weights\"],\"fail_fast\":true,\"profile\":\"car\"}", json.toString())
assertEquals("{\"points\":[[12.0,11.0]],\"out_arrays\":[\"weights\"],\"fail_fast\":true,\"profile\":\"bike\"}", json.toString())
assertEquals("{\"points\":[[12.0,11.0]],\"out_arrays\":[\"weights\"],\"fail_fast\":true,\"profile\":\"car\",\"some_property\":\"value\"}", json.toString())
assertEquals(5, gh.getClientForRequest(req).connectTimeoutMillis())
assertEquals("https://localhost:8000/route?profile=&type=json&instructions=true&points_encoded=true" + "&calc_points=true&algorithm=&locale=en_US&elevation=false&optimize=false", hopper.createGetRequest(new GHRequest()).url().toString())
assertEquals("https://localhost:8000/route?profile=my_car&type=json&instructions=true&points_encoded=true" + "&calc_points=true&algorithm=&locale=en_US&elevation=false&optimize=false", hopper.createGetRequest(new GHRequest().setProfile("my_car")).url().toString())
assertEquals("http://localhost:8080/route?profile=car&point=42.509225,1.534728&point=42.512602,1.551558&type=json&instructions=true&points_encoded=true" + "&calc_points=true&algorithm=&locale=en_US&elevation=false&optimize=false&heading=10.0&heading=-90.0", hopper.createGetRequest(req).url().toString())
assertEquals("Custom models cannot be used for GET requests. Use setPostRequest(true)", e.getMessage())
assertEquals(expected, objectMapper.valueToTree(customModelJson))
assertEquals(200, response.getStatus())
assertEquals(200, response.getStatus())
assertEquals("[1.548191,42.510033,1.548191,42.510033]", path.get("bbox").toString())
assertEquals(200, response.getStatus())
assertEquals(200, response.getStatus())
assertEquals(200, response.getStatus())
assertEquals(400, response.getStatus())
assertEquals(200, response.getStatus())
assertEquals(200, response.getStatus())
assertEquals(400, response.getStatus())
assertEquals(400, response.getStatus())
assertEquals(200, response.getStatus())
assertEquals(400, response.getStatus())
assertTrue(json.has("message"))
assertEquals("Elevation not supported!", json.get("message").asText())
assertEquals(24, instructions.size())
assertEquals("Continue onto la Callisa", instructions.get(0).getTurnDescription(null))
assertEquals("At roundabout, take exit 2", instructions.get(4).getTurnDescription(null))
assertEquals(true, instructions.get(4).getExtraInfoJSON().get("exited"))
assertEquals(false, instructions.get(22).getExtraInfoJSON().get("exited"))
assertEquals(4, rsp.getBest().getPathDetails().get(RoadClass.KEY).size())
assertEquals(RoadClass.PRIMARY.toString(), rsp.getBest().getPathDetails().get(RoadClass.KEY).get(3).getValue())
assertEquals(10, roadEnvList.size())
assertEquals(RoadEnvironment.ROAD.toString(), roadEnvList.get(0).getValue())
assertEquals(RoadEnvironment.TUNNEL.toString(), roadEnvList.get(6).getValue())
assertTrue(pathDetails.containsKey("average_speed"))
assertTrue(pathDetails.containsKey("edge_id"))
assertTrue(pathDetails.containsKey("time"))
assertEquals(11, averageSpeedList.size())
assertEquals(30.0, averageSpeedList.get(0).getValue())
assertEquals(14, averageSpeedList.get(0).getLength())
assertEquals(60.0, averageSpeedList.get(1).getValue())
assertEquals(5, averageSpeedList.get(1).getLength())
assertEquals(77, edgeIdDetails.size())
assertEquals(882L, edgeIdDetails.get(0).getValue())
assertEquals(2, edgeIdDetails.get(0).getLength())
assertEquals(883L, edgeIdDetails.get(1).getValue())
assertEquals(8, edgeIdDetails.get(1).getLength())
assertEquals(expectedTime, actualTime)
assertEquals(200, response.getStatus())
assertTrue(path.has("details"))
assertTrue(details.has("average_speed"))
assertEquals(19, averageSpeed.get(1).get(1).asInt())
assertTrue(details.has("edge_id"))
assertEquals(882, firstLink)
assertEquals(1425, lastLink)
assertEquals("Continue onto Carrer Antoni Fiter i Rossell", rsp.getBest().getInstructions().get(3).getName())
assertEquals("Carrer Antoni Fiter i Rossell", rsp.getBest().getInstructions().get(3).getName())
assertEquals(200, response.getStatus())
assertEquals(200, response.getStatus())
assertEquals(400, response.getStatus())
assertEquals(400, response.getStatus())
assertEquals(200, response.getStatus())
assertTrue(str.contains("<trkpt lat=\"42.554839\" lon=\"1.536374\"><time>"))
assertEquals(200, response.getStatus())
assertTrue(str.contains("<trkpt lat=\"42.554839\" lon=\"1.536374\"><time>"))
assertEquals(200, response.getStatus())
assertTrue(str.contains("<wpt lat=\"42.510033\" lon=\"1.548191\"> <name>arrive at destination</name></wpt>"))
assertTrue(str.contains("<trkpt lat=\"42.554839\" lon=\"1.536374\"><time>"))
assertEquals(400, response.getStatus())
assertTrue(res.contains("<gpx"))
assertTrue(res.contains("<rtept lat="))
assertTrue(res.contains("<trk><name>GraphHopper Track</name><trkseg>"))
assertTrue(res.endsWith("</gpx>"))
assertTrue(res.contains("1970-01-04"))
assertTrue(res.contains("<gpx"))
assertTrue(res.contains("<rtept lat="))
assertTrue(res.endsWith("</gpx>"))
assertEquals(400, response.getStatus())
assertEquals(400, response.getStatus())
assertEquals("You have to pass at least one point", json.get("message").asText())
assertEquals(400, response.getStatus())
assertEquals("query param point is invalid: Cannot parse point 'pups'", json.get("message").asText())
assertEquals(400, response.getStatus())
assertEquals("The number of 'heading' parameters must be zero, one or equal to the number of points (1)", json.get("message").asText())
assertEquals(200, response.getStatus())
assertEquals(4, path.get("bbox").size())
assertEquals(200, response.getStatus())
assertEquals(200, response.getStatus())
assertEquals("[longitude, latitude, time, distance]", headers.toString())
assertTrue(lines.length > 500)
assertNotEquals(-1, prevTimeIndex)
assertEquals(41, Integer.parseInt(row[prevTimeIndex]) / 1000)
assertTrue(lines.length > 500)
assertEquals("prev_node_id,edge_id,node_id,time,distance", lines[0])
assertEquals("-1,-1,1948,0,0", lines[1])
assertEquals("1948,2277,1324,3817,74", lines[2])
assertEquals("1948,2276,263,13496,262", lines[3])
assertEquals("", row[0])
assertEquals("service", row[1])
assertEquals("Carretera d'Engolasters", row[0])
assertEquals("secondary", row[1])
assertTrue(Double.isInfinite(Double.parseDouble(row[2])))
assertEquals(400, rsp.getStatus())
assertEquals(400, rsp.getStatus())
assertFalse(route.hasErrors())
assertFalse(route.hasErrors())
assertFalse(route.hasErrors())
assertFalse(route.hasErrors())
assertFalse(route.getAll().isEmpty())
assertFalse(route.hasErrors())
assertFalse(route.getAll().isEmpty())
assertFalse(route.hasErrors())
assertFalse(route.getAll().isEmpty())
assertFalse(route.getAll().isEmpty())
assertFalse(route.getAll().isEmpty())
assertFalse(route.hasErrors())
assertFalse(route.getAll().isEmpty())
assertFalse(gpxStr.contains("NaN"))
assertFalse(rsp.hasErrors())
assertFalse(rsp.hasErrors())
assertFalse(rsp.hasErrors())
assertFalse(rsp.hasErrors())
assertFalse(infoJson.has("errors"))
assertFalse(infoJson.has("errors"))
assertFalse(response.readEntity(JsonNode.class).get("info").has("errors"))
assertFalse(infoJson.has("errors"))
assertFalse(infoJson.has("errors"))
assertFalse((Boolean) rsp.getBest().getPathDetails().get(RoadClassLink.KEY).get(0).getValue())
assertFalse(pathDetails.isEmpty())
assertFalse(infoJson.has("errors"))
assertFalse(rsp.hasErrors())
assertFalse(str.contains("<wpt lat=\"42.51003\" lon=\"1.548188\"> <name>Finish!</name></wpt>"))
assertFalse(str.contains("<gh:distance>115.1</gh:distance>"))
assertFalse(str.contains("<wpt lat=\"42.51003\" lon=\"1.548188\"> <name>Finish!</name></wpt>"))
assertFalse(str.contains("<gh:distance>115.1</gh:distance>"))
assertFalse(res.contains("<trk><name>GraphHopper Track</name><trkseg>"))
assertFalse(infoJson.has("errors"))
assertFalse(infoJson.has("errors"))
assertFalse(infoJson.has("errors"))
assertFalse(infoJson.has("errors"))
assertTrue(isoline.covers(geometryFactory.createPoint(makePrecise(new Coordinate(-116.76821, 36.914893)))))
assertTrue(isoline.covers(geometryFactory.createPoint(makePrecise(new Coordinate(-116.761472, 36.914944)))))
assertTrue(isoline.covers(geometryFactory.createPoint(makePrecise(new Coordinate(-116.768242, 36.909489)))))
assertTrue(isoline.covers(geometryFactory.createPoint(makePrecise(new Coordinate(-116.76218, 36.905697)))))
assertFalse(isoline.covers(geometryFactory.createPoint(makePrecise(new Coordinate(-116.751677, 36.915682)))))
assertTrue(isoline.covers(geometryFactory.createPoint(makePrecise(new Coordinate(-116.76821, 36.914893)))))
assertTrue(isoline.covers(geometryFactory.createPoint(makePrecise(new Coordinate(-116.761472, 36.914944)))))
assertTrue(isoline.covers(geometryFactory.createPoint(makePrecise(new Coordinate(-116.768242, 36.909489)))))
assertTrue(isoline.covers(geometryFactory.createPoint(makePrecise(new Coordinate(-116.76218, 36.905697)))))
assertFalse(isoline.covers(geometryFactory.createPoint(makePrecise(new Coordinate(-116.751677, 36.915682)))))
assertEquals(400, response.getStatus())
assertEquals(200, response.getStatus())
assertEquals(200, response.getStatus())
assertEquals(200, response.getStatus())
assertEquals(200, response.getStatus())
assertEquals(400, response.getStatus())
assertTrue(message.isValueNode())
assertTrue(message.asText().startsWith("No tracks found"))
assertTrue(json.has("message"))
assertFalse(infoJson.has("errors"))
assertFalse(infoJson.has("errors"))
assertFalse(infoJson.has("errors"))
assertEquals(code, response.getStatus())
assertEquals(2, featureCollection.getFeatures().size())
assertTrue(polygon0.contains(geometryFactory.createPoint(new Coordinate(1.587224, 42.5386))))
assertTrue(polygon1.contains(geometryFactory.createPoint(new Coordinate(1.589756, 42.558012))))
assertEquals(2, featureCollection.getFeatures().size())
assertTrue(polygon0.contains(geometryFactory.createPoint(new Coordinate(1.587224, 42.5386))))
assertTrue(polygon1.contains(geometryFactory.createPoint(new Coordinate(1.589756, 42.558012))))
assertEquals(2, featureCollection.getFeatures().size())
assertTrue(polygon0.contains(geometryFactory.createPoint(new Coordinate(1.57937, 42.531706))))
assertTrue(polygon1.contains(geometryFactory.createPoint(new Coordinate(1.591644, 42.543216))))
assertEquals(distanceLimitPolygon.getNumPoints(), weightLimitPolygon.getNumPoints())
assertTrue(weightLimitPolygon.equalsTopo(distanceLimitPolygon))
assertEquals(2, featureCollection.getFeatures().size())
assertTrue(polygon0.contains(geometryFactory.createPoint(new Coordinate(1.587224, 42.5386))))
assertTrue(polygon1.contains(geometryFactory.createPoint(new Coordinate(1.589756, 42.558012))))
assertEquals(0, bucketNumber)
assertEquals(400, response.getStatus())
assertEquals(200, rsp.getStatus())
assertEquals(400, rsp.getStatus())
assertEquals(400, rsp.getStatus())
assertEquals(1, featureCollection.getFeatures().size())
assertTrue(polygon0.contains(geometryFactory.createPoint(new Coordinate(1.527057, 42.507145))))
assertAll(Arrays.stream(geometry.getCoordinates()).map(coord -> () -> assertTrue(Double.isNaN(coord.z))))
assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", Arrays.stream(geometry.getCoordinates()).map(coord -> () -> assertTrue(Double.isNaN(coord.z))))
assertEquals(400, response.getStatus())
assertEquals("query param type must be one of [json, geojson]", message)
assertEquals(200, response.getStatus())
assertEquals(400, response.getStatus())
assertEquals("query param time_limit is not a number.", message)
assertEquals(2, featureCollection.getFeatures().size())
assertTrue(polygon0.contains(geometryFactory.createPoint(new Coordinate(1.587224, 42.5386))))
assertTrue(polygon1.contains(geometryFactory.createPoint(new Coordinate(1.58864, 42.554582))))
assertTrue(json.has("polygons"))
assertTrue(json.has("info"))
assertTrue(json.has("polygons"))
assertTrue(json.has("info"))
assertTrue(json.has("type"))
assertEquals(json.path("type").asText(), "FeatureCollection")
assertTrue(json.has("features"))
assertTrue(firstFeature.isObject())
assertTrue(firstFeature.path("properties").has("bucket"))
assertTrue(firstFeature.path("properties").has("copyrights"))
assertEquals(firstFeature.path("type").asText(), "Feature")
assertEquals(firstFeature.path("geometry").path("type").asText(), "Polygon")
assertEquals(firstFeature.path("properties").path("bucket").asInt(), 0)
assertEquals(firstFeature.path("geometry").path("type").asText(), "Polygon")
assertEquals(lastFeature.path("properties").path("bucket").asInt(), 2)
assertEquals(lastFeature.path("geometry").path("type").asText(), "Polygon")
assertTrue(lastPolygon.contains(geometryFactory.createPoint(new Coordinate(1.580229, 42.533161))))
assertTrue(beforeLastPolygon.contains(geometryFactory.createPoint(new Coordinate(1.564136, 42.524938))))
assertEquals("The requested profile 'foot_profile' cannot be used with `custom_model`, because it has weighting=fastest", jsonNode.get("message").asText())
assertEquals("Since you are using the 'profile' parameter, do not use the 'vehicle' parameter. You used 'vehicle=truck'", jsonNode.get("message").asText())
assertEquals("Since you are using the 'profile' parameter, do not use the 'weighting' parameter. You used 'weighting=custom'", jsonNode.get("message").asText())
assertNotNull(jsonNode.get("message"))
assertFalse(polygon0.contains(geometryFactory.createPoint(new Coordinate(1.589756, 42.558012))))
assertFalse(polygon1.contains(geometryFactory.createPoint(new Coordinate(1.635246, 42.53841))))
assertFalse(polygon0.contains(geometryFactory.createPoint(new Coordinate(1.589756, 42.558012))))
assertFalse(polygon1.contains(geometryFactory.createPoint(new Coordinate(1.635246, 42.53841))))
assertFalse(polygon0.contains(geometryFactory.createPoint(new Coordinate(1.587224, 42.5386))))
assertFalse(polygon1.contains(geometryFactory.createPoint(new Coordinate(1.589756, 42.558012))))
assertFalse(polygon0.contains(geometryFactory.createPoint(new Coordinate(1.589756, 42.558012))))
assertFalse(polygon1.contains(geometryFactory.createPoint(new Coordinate(1.635246, 42.53841))))
assertFalse(polygon0.contains(geometryFactory.createPoint(new Coordinate(1.525404, 42.507081))))
assertFalse(polygon0.contains(geometryFactory.createPoint(new Coordinate(1.589756, 42.558012))))
assertFalse(polygon1.contains(geometryFactory.createPoint(new Coordinate(1.589756, 42.558012))))
assertFalse(polygon1.contains(geometryFactory.createPoint(new Coordinate(1.635246, 42.53841))))
assertFalse(json.has("polygons"))
assertFalse(json.has("info"))
assertFalse(lastPolygon.contains(geometryFactory.createPoint(new Coordinate(1.584606, 42.535121))))
assertFalse(beforeLastPolygon.contains(geometryFactory.createPoint(new Coordinate(1.571474, 42.529176))))
assertFalse(json.get("info").has("errors"))
assertEquals(200, response.getStatus())
assertEquals(200, response.getStatus())
assertEquals(1, jsonNode.at("/paths/0/legs").size())
assertEquals(200, response.getStatus())
assertEquals(1, jsonNode.at("/paths/0/legs").size())
assertEquals(200, response.getStatus())
assertEquals(1, jsonNode.at("/paths/0/legs").size())
assertEquals(200, response.getStatus())
assertEquals(400, response.getStatus())
assertEquals(400, response.getStatus())
assertEquals("query param point size must be between 2 and 2", json.get("message").asText())
assertEquals(400, response.getStatus())
assertEquals(400, response.getStatus())
assertTrue(json.get("message").asText().startsWith("query param pt.earliest_departure_time must"))
assertEquals(400, response.getStatus())
assertEquals("query param pt.earliest_departure_time must be in a ISO-8601 format.", json.get("message").asText())
assertEquals(200, response.getStatus())
assertTrue(info.supported_vehicles.contains("pt"))
assertTrue(info.profiles.stream().anyMatch(p -> p.name.equals("pt")))
assertEquals(200, response.getStatus())
assertEquals(1, layerValues.size())
assertTrue(layerValues.containsKey("roads"))
assertEquals(42, multiLineString.getCoordinates().length)
assertEquals("Camì de les Pardines", map.get("name"))
assertEquals(200, response.getStatus())
assertEquals(21, layer.getGeometries().size())
assertEquals("road", attributes(geometry).get("road_environment"))
assertEquals(50.0, attributes(geometry).get("max_speed"))
assertEquals("primary", attributes(geometry).get("road_class"))
assertFalse(ghResponse.hasErrors())
assertEquals(200, response.getStatus())
assertFalse(infoJson.has("errors"))
assertEquals(200, response.getStatus())
assertEquals(200, response.getStatus())
assertEquals("[0, 1]", res.getPointsOrder().toString())
assertEquals(2, paths.size())
assertEquals(35, path.getPoints().size())
assertEquals(30, path.getPoints().size())
assertEquals(0, res.getPoints().size())
assertEquals(Arrays.asList("Continue onto Carrer de l'Aigüeta", "Turn right onto Carrer Pere d'Urg", "Turn right onto Carrer Bonaventura Armengol", "Keep right onto Avinguda Consell d'Europa", "At roundabout, take exit 4"), given)
assertEquals(Arrays.asList("Carrer de l'Aigüeta", "Carrer Pere d'Urg", "Carrer Bonaventura Armengol", "Avinguda Consell d'Europa", ""), given)
assertTrue(res.getErrors().get(0) instanceof PointNotFoundException)
assertTrue(res.getErrors().get(0) instanceof PointOutOfBoundsException)
assertEquals("Arrive at destination", finishInstructionName)
assertEquals("", finishInstructionName)
assertEquals(1, alt.getPathDetails().size())
assertTrue((Double) details.get(0).getValue() > 20)
assertTrue((Double) details.get(0).getValue() < 70)
assertEquals(200, response.getStatus())
assertEquals(400, response.getStatus())
assertTrue(json.get("message").toString().contains("Different subnetworks"))
assertEquals(200, response.getStatus())
assertEquals(Arrays.asList("Platnerstraße"), fetchStreets(mr.getEdgeMatches()))
assertEquals(Arrays.asList("Windmühlenstraße", "Bayrischer Platz"), fetchStreets(mr.getEdgeMatches()))
assertEquals(142, mr.getEdgeMatches().size())
assertEquals(Arrays.asList("Marbachstraße", "Weinligstraße", "Fechnerstraße"), fetchStreets(mr.getEdgeMatches()))
assertEquals(7, observations.size())
assertEquals(5, filteredObservations.size())
assertEquals(expectedLinearDistance, linearDistance(filteredObservations))
assertEquals(Arrays.asList("Gustav-Adolf-Straße", "Leibnizstraße", "Hinrichsenstraße", "Tschaikowskistraße"), fetchStreets(mr.getEdgeMatches()))
assertEquals(Arrays.asList("Jahnallee", "Funkenburgstraße", "Gustav-Adolf-Straße", "Tschaikowskistraße", "Jahnallee", "Lessingstraße"), fetchStreets(mr.getEdgeMatches()))
assertEquals(Arrays.asList("Gustav-Adolf-Straße", "Funkenburgstraße"), fetchStreets(mr.getEdgeMatches()))
assertEquals(Arrays.asList("Gustav-Adolf-Straße", "Funkenburgstraße"), fetchStreets(mr.getEdgeMatches()))
assertEquals(264, gpxEntries.size())
assertEquals(new Observation(new GHPoint(51.377719, 12.338217)), gpxEntries.get(0))
assertEquals(new Observation(new GHPoint(51.371482, 12.363795)), gpxEntries.get(50))
assertEquals(2, gpxEntries.size())
assertEquals(3, gpxEntries.size())
assertTrue(gpx.trk.isEmpty())
assertTrue(GpxConversions.getEntries(gpx.trk.get(0)).isEmpty())
assertTrue(GpxConversions.getEntries(gpx.trk.get(0)).isEmpty())
assertEquals(Arrays.asList("Милана Видака", "Бранка Радичевића", "Здравка Челара"), fetchStreets(mr.getEdgeMatches()))
assertEquals(741, responsePath.getInstructions().get(0).getSign())
assertEquals("Continue onto A 81", responsePath.getInstructions().get(0).getName())
assertEquals(Statement.Keyword.IF, statement.getKeyword())
assertEquals("true", statement.getCondition())
assertEquals(Statement.Op.LIMIT, statement.getOperation())
assertEquals("100", statement.getValue())
assertEquals(Statement.Keyword.ELSE, statement.getKeyword())
assertNull(statement.getCondition())
assertEquals(Statement.Op.LIMIT, statement.getOperation())
assertEquals("abc", statement.getValue())
assertEquals(objectMapper.writeValueAsString(jsonFeatureCollection), expected)
assertEquals(3, data.getFeatures().size())
assertEquals("1", f1.getId())
assertEquals("value0", f1.getProperty("prop0"))
assertEquals("2", f2.getId())
assertEquals(4, f2.getGeometry().getNumPoints())
assertEquals("a", ((Map) f3.getProperty("prop1")).get("test"))
assertNotNull(ghResponse)
assertEquals(Helper.createPointList(38.5, -120.2), list)
assertEquals(Helper.createPointList(38.5, -120.2, 40.7, -120.95, 43.252, -126.453), list)
assertEquals("_p~iF~ps|U", ResponsePathSerializer.encodePolyline(poly1, poly1.is3D(), 1e5))
assertEquals("_p~iF~ps|U_ulLnnqC_mqNvxq`@", ResponsePathSerializer.encodePolyline(poly, poly.is3D(), 1e5))
assertEquals(list, ResponsePathDeserializer.decodePolyline(str, list.size(), false))
assertEquals(list, ResponsePathDeserializer.decodePolyline(str, list.size(), false))
assertEquals(Helper.createPointList3D(38.5, -120.2, 10), list)
assertEquals(Helper.createPointList3D(38.5, -120.2, 10, 40.7, -120.95, 1234, 43.252, -126.453, 1234), list)
assertEquals("_p~iF~ps|Uo}@", ResponsePathSerializer.encodePolyline(poly1, poly1.is3D(), 1e5))
assertEquals("_p~iF~ps|Uo}@_ulLnnqC_anF_mqNvxq`@?", ResponsePathSerializer.encodePolyline(poly, poly.is3D(), 1e5))
assertEquals("ohdfzAgt}bVoEL", ResponsePathSerializer.encodePolyline(Helper.createPointList(47.827608, 12.123476, 47.827712, 12.123469), false, 1e6))
assertEquals(objectMapper.readTree(getClass().getClassLoader().getResourceAsStream("fixtures/roundabout1.json")).toString(), objectMapper.valueToTree(il).toString())
assertEquals(objectMapper.readTree(getClass().getClassLoader().getResourceAsStream("fixtures/roundabout2.json")).toString(), objectMapper.valueToTree(il).toString())
assertEquals(1, Helper.countBitValue(1))
assertEquals(2, Helper.countBitValue(2))
assertEquals(2, Helper.countBitValue(3))
assertEquals(3, Helper.countBitValue(4))
assertEquals(3, Helper.countBitValue(7))
assertEquals(4, Helper.countBitValue(8))
assertEquals(5, Helper.countBitValue(20))
assertEquals(Locale.GERMAN, Helper.getLocale("de"))
assertEquals(Locale.GERMANY, Helper.getLocale("de_DE"))
assertEquals(Locale.GERMANY, Helper.getLocale("de-DE"))
assertEquals(Locale.ENGLISH, Helper.getLocale("en"))
assertEquals(Locale.US, Helper.getLocale("en_US"))
assertEquals(Locale.US, Helper.getLocale("en_US.UTF-8"))
assertEquals(4294967295L, l)
assertEquals(-1, Helper.toSignedInt(l))
assertEquals(intVal, Helper.toSignedInt(maxInt))
assertEquals(intVal, Helper.toSignedInt(maxInt))
assertEquals(intVal, Helper.toSignedInt(maxInt))
assertEquals(0xFFFFffffL, (1L << 32) - 1)
assertTrue(0xFFFFffffL > 0L)
assertEquals("test_case", Helper.camelCaseToUnderScore("testCase"))
assertEquals("test_case_t_b_d", Helper.camelCaseToUnderScore("testCaseTBD"))
assertEquals("_test_case", Helper.camelCaseToUnderScore("TestCase"))
assertEquals("_test_case", Helper.camelCaseToUnderScore("_test_case"))
assertEquals("testCase", Helper.underScoreToCamelCase("test_case"))
assertEquals("testCaseTBD", Helper.underScoreToCamelCase("test_case_t_b_d"))
assertEquals("TestCase_", Helper.underScoreToCamelCase("_test_case_"))
assertEquals(257, new String(s.getBytes(UTF_CS), 0, 255, UTF_CS).getBytes(UTF_CS).length)
assertEquals(1, new String(bytes, 0, 1, UTF_CS).getBytes(UTF_CS).length)
assertEquals(3, new String(bytes, 0, 1, UTF_CS).getBytes(UTF_CS).length)
assertFalse(details.isEmpty())
assertFalse(json.has("error"))
assertFalse(json.has("error"))
assertFalse(json.has("error"))
assertFalse(mr.getEdgeMatches().isEmpty())
assertEquals("no paths", new GHResponse().toString())
assertFalse(new GHResponse().hasErrors())
assertFalse(rsp.hasErrors())
assertEquals("bar", subject.getString("foo", ""))
assertEquals("valueA", subject.getString("foo", ""))
assertEquals("valueB", subject.getString("bar", ""))
assertEquals("valueA", subject.getString("foo", ""))
assertEquals("", subject.getString("Foo", ""))
assertEquals(1234L, subject.getLong("foo", 0))
assertTrue(subject.has("foo"))
assertTrue(subject.has("bar"))
assertEquals(2, pMap.toMap().size())
assertEquals(3, pMap.getInt("x", -1))
assertEquals(2, pMap.getInt("y", -1))
assertTrue(new PMap("").toMap().isEmpty())
assertTrue(new PMap("name").toMap().isEmpty())
assertEquals(2, CustomModel.merge(bike, car).getPriority().size())
assertEquals(1, bike.getPriority().size())
assertEquals(1, car.getPriority().size())
assertEquals(2, merged.getPriority().size())
assertEquals(1, car.getPriority().size())
assertEquals("0.5", iter.next().getValue())
assertEquals("0.8", iter.next().getValue())
assertEquals("0.5", iter.next().getValue())
assertEquals("0.8", iter.next().getValue())
assertFalse(subject.has("baz"))
assertFalse(instance.isValid())
assertFalse(instance.isValid())
assertTrue(instance.isValid())
assertEquals(point1, point2)
assertNotEquals(point1, point2)
assertNotEquals(point1, point2)
assertEquals(point1, point2)
assertTrue(new FinishInstruction("test", 123, 321, 2).getPoints().is3D())
assertFalse(new FinishInstruction("test", 123, 321, Double.NaN).getPoints().is3D())
assertTrue(new FinishInstruction("test", pointAccess, 0).getPoints().is3D())
assertFalse(new FinishInstruction("test", pointAccess, 0).getPoints().is3D())
assertEquals(1, instance.getHints().getInt("something", 2))
assertTrue(instance.getHeadings().isEmpty())
assertEquals(nodes(0, 2, 1, 4), p.calcNodes())
assertEquals(nodes(3, 2, 1, 4, 5), p.calcNodes())
assertEquals(nodes(0, 1, 5, 2, 3), p1.calcNodes())
assertEquals(nodes(0, 4, 6, 7, 5, 3), p2.calcNodes())
assertEquals(nodes(0, 4, 5, 7), p1.calcNodes())
assertTrue(f.calcPath(graph, 2, 1).isFound())
assertEquals(nodes(1, 2), p.calcNodes())
assertEquals(p1.calcNodes(), p2.calcNodes())
assertTrue(p.isFound())
assertEquals(nodes(0, 7, 6, 5, 4), p.calcNodes())
assertEquals(12, p.calcNodes().size())
assertEquals(nodes(34, 35, 36), p.calcNodes())
assertEquals(3, p.calcNodes().size())
assertEquals(nodes(45, 44, 54, 64, 74, 73, 72), p.calcNodes())
assertEquals(nodes(0, 1, 2, 3), p.calcNodes())
assertEquals(nodes(4, 1, 0), p.calcNodes())
assertEquals(Helper.createPointList(0, 2, 1, 1.5, 1.5, 1, 1, 0.6), p.calcPoints())
assertEquals(nodes(2, 0, 1), p.calcNodes())
assertEquals(Helper.createPointList(0, 0, 1, 0.6, 1.5, 1, 1, 1.5), p.calcPoints())
assertEquals(nodes(8, 9), p.calcNodes())
assertEquals(nodes(8, 1, 2, 9), p.calcNodes())
assertEquals(nodes(5, 1, 2, 3, 6), p.calcNodes())
assertEquals(nodes(5, 6), p.calcNodes())
assertEquals(nodes(8, 1, 5, 3, 9), p.calcNodes())
assertEquals(85124371, p.getTime())
assertEquals(nodes(0, 4, 6, 10), p.calcNodes())
assertEquals(nodes(12, 0, 1, 2, 11, 7, 10, 13), p.calcNodes())
assertEquals(37009625, p.getTime())
assertEquals(nodes(0, 4, 6, 7), carPath1.calcNodes())
assertEquals(nodes(0, 4, 5, 7), footPath1.calcNodes())
assertEquals(nodes(0, 1, 5, 6, 7), carPath2.calcNodes())
assertEquals(nodes(0, 4, 5, 7), footPath2.calcNodes())
assertTrue(p.isFound())
assertEquals(IntArrayList.from(1, 2), p.calcNodes())
assertEquals(IntArrayList.from(1, 2, 3), p.calcNodes())
assertEquals(2, pathInfos.size())
assertEquals(bestPath.calcNodes(), bestAlt.calcNodes())
assertEquals(IntArrayList.from(5, 6, 3, 4), bestAlt.calcNodes())
assertEquals(IntArrayList.from(5, 6, 7, 8, 4), secondAlt.calcNodes())
assertEquals(3, pathInfos.size())
assertEquals(IntArrayList.from(5, 6, 3, 4), pathInfos.get(0).getPath().calcNodes())
assertEquals(IntArrayList.from(5, 6, 7, 8, 4), pathInfos.get(1).getPath().calcNodes())
assertEquals(IntArrayList.from(5, 1, 9, 2, 3, 4), pathInfos.get(2).getPath().calcNodes())
assertEquals(3, altDijkstra.getVisitedNodes())
assertFalse(f.calcPath(graph, 0, 1).isFound())
assertFalse(f.calcPath(graph, 0, 5).isFound())
assertFalse(f.calcPath(graph, 1, 2).isFound())
assertFalse(p.isFound())
assertFalse(path.isFound())
assertEquals(0, p.calcNodes().size())
assertEquals(504000L, tmp.getTime())
assertEquals("continue", tmp.getTurnDescription(tr))
assertEquals(6, tmp.getLength())
assertEquals(0L, tmp.getTime())
assertEquals("arrive at destination", tmp.getTurnDescription(tr))
assertEquals(0, tmp.getLength())
assertEquals(path.calcPoints().size() - 1, acc)
assertEquals(360000L, tmp.getTime())
assertEquals("continue", tmp.getTurnDescription(tr))
assertEquals(3, tmp.getLength())
assertEquals(144000L, tmp.getTime())
assertEquals("turn sharp right onto 2", tmp.getTurnDescription(tr))
assertEquals(3, tmp.getLength())
assertEquals(path.calcPoints().size() - 1, acc)
assertEquals(144000L, tmp.getTime())
assertEquals("continue onto 2", tmp.getTurnDescription(tr))
assertEquals(3, tmp.getLength())
assertEquals(360000L, tmp.getTime())
assertEquals("turn sharp left", tmp.getTurnDescription(tr))
assertEquals(3, tmp.getLength())
assertEquals(path.calcPoints().size() - 1, acc)
assertEquals(5, il.size())
assertEquals(Instruction.CONTINUE_ON_STREET, il.get(0).getSign())
assertEquals(Instruction.TURN_RIGHT, il.get(1).getSign())
assertEquals(Instruction.TURN_LEFT, il.get(2).getSign())
assertEquals(Instruction.TURN_SHARP_LEFT, il.get(3).getSign())
assertEquals(Instruction.FINISH, il.get(4).getSign())
assertTrue(p.isFound())
assertEquals("[1, 2, 3, 4, 5, 8]", p.calcNodes().toString())
assertEquals(Arrays.asList("continue onto MainStreet 1 2", "At roundabout, take exit 3 onto 5-8", "arrive at destination"), tmpList)
assertEquals(Arrays.asList("continue onto MainStreet 1 2", "At roundabout, take exit 2 onto MainStreet 4 7", "arrive at destination"), tmpList)
assertTrue(p.isFound())
assertEquals(Arrays.asList("At roundabout, take exit 3 onto 5-8", "arrive at destination"), tmpList)
assertTrue(p.isFound())
assertEquals(Arrays.asList("continue onto 3-6", "At roundabout, take exit 3 onto 5-8", "arrive at destination"), tmpList)
assertTrue(p.isFound())
assertTrue(details.size() == 1)
assertEquals(4, averageSpeedDetails.size())
assertEquals(45.0, averageSpeedDetails.get(0).getValue())
assertEquals(90.0, averageSpeedDetails.get(1).getValue())
assertEquals(10.0, averageSpeedDetails.get(2).getValue())
assertEquals(45.0, averageSpeedDetails.get(3).getValue())
assertEquals(0, averageSpeedDetails.get(0).getFirst())
assertEquals(1, averageSpeedDetails.get(1).getFirst())
assertEquals(2, averageSpeedDetails.get(2).getFirst())
assertEquals(3, averageSpeedDetails.get(3).getFirst())
assertEquals(4, averageSpeedDetails.get(3).getLast())
assertTrue(p.isFound())
assertTrue(details.size() == 1)
assertEquals(4, averageSpeedDetails.size())
assertTrue(p.isFound())
assertTrue(details.size() == 1)
assertEquals(5, averageSpeedDetails.size())
assertNull(averageSpeedDetails.get(0).getValue())
assertTrue(p.isFound())
assertTrue(details.size() == 1)
assertTrue(details.size() == 1)
assertEquals(4, streetNameDetails.size())
assertEquals("1-2", streetNameDetails.get(0).getValue())
assertEquals("2-3", streetNameDetails.get(1).getValue())
assertEquals("3-4", streetNameDetails.get(2).getValue())
assertEquals("4-5", streetNameDetails.get(3).getValue())
assertEquals(0, streetNameDetails.get(0).getFirst())
assertEquals(1, streetNameDetails.get(1).getFirst())
assertEquals(2, streetNameDetails.get(2).getFirst())
assertEquals(3, streetNameDetails.get(3).getFirst())
assertEquals(4, streetNameDetails.get(3).getLast())
assertTrue(p.isFound())
assertTrue(details.size() == 1)
assertEquals(4, edgeIdDetails.size())
assertEquals(0, edgeIdDetails.get(0).getValue())
assertEquals(2, edgeIdDetails.get(1).getValue())
assertEquals(3, edgeIdDetails.get(2).getValue())
assertEquals(1, edgeIdDetails.get(3).getValue())
assertEquals(0, edgeIdDetails.get(0).getFirst())
assertEquals(1, edgeIdDetails.get(1).getFirst())
assertEquals(2, edgeIdDetails.get(2).getFirst())
assertEquals(3, edgeIdDetails.get(3).getFirst())
assertEquals(4, edgeIdDetails.get(3).getLast())
assertTrue(p.isFound())
assertEquals(4, edgeKeyDetails.size())
assertEquals(0, edgeKeyDetails.get(0).getValue())
assertEquals(4, edgeKeyDetails.get(1).getValue())
assertEquals(6, edgeKeyDetails.get(2).getValue())
assertEquals(2, edgeKeyDetails.get(3).getValue())
assertTrue(p.isFound())
assertEquals(4, edgeKeyDetails.size())
assertEquals(3, edgeKeyDetails.get(0).getValue())
assertEquals(7, edgeKeyDetails.get(1).getValue())
assertEquals(5, edgeKeyDetails.get(2).getValue())
assertEquals(1, edgeKeyDetails.get(3).getValue())
assertTrue(p.isFound())
assertTrue(details.size() == 1)
assertEquals(4, timeDetails.size())
assertEquals(400L, timeDetails.get(0).getValue())
assertEquals(200L, timeDetails.get(1).getValue())
assertEquals(3600L, timeDetails.get(2).getValue())
assertEquals(400L, timeDetails.get(3).getValue())
assertEquals(0, timeDetails.get(0).getFirst())
assertEquals(1, timeDetails.get(1).getFirst())
assertEquals(2, timeDetails.get(2).getFirst())
assertEquals(3, timeDetails.get(3).getFirst())
assertEquals(4, timeDetails.get(3).getLast())
assertTrue(p.isFound())
assertTrue(details.size() == 1)
assertEquals(5D, distanceDetails.get(0).getValue())
assertEquals(5D, distanceDetails.get(1).getValue())
assertEquals(10D, distanceDetails.get(2).getValue())
assertEquals(5D, distanceDetails.get(3).getValue())
assertTrue(p.isFound())
assertEquals(Arrays.asList("continue onto MainStreet 1 2", "At roundabout, take exit 2 onto 5-8", "arrive at destination"), tmpList)
assertTrue(p.isFound())
assertEquals(Arrays.asList("At roundabout, take exit 1 onto MainStreet 1 11", "arrive at destination"), tmpList)
assertTrue(p.isFound())
assertEquals(Arrays.asList("continue onto MainStreet 1 2", "At roundabout, take exit 1 onto 5-8", "arrive at destination"), tmpList)
assertTrue(p.isFound())
assertEquals(2, wayList.size())
assertTrue(p.isFound())
assertEquals(2, wayList.size())
assertTrue(p.isFound())
assertEquals(3, wayList.size())
assertEquals(-7, wayList.get(1).getSign())
assertTrue(p.isFound())
assertEquals(2, wayList.size())
assertTrue(p.isFound())
assertEquals(2, wayList.size())
assertTrue(p.isFound())
assertEquals(3, wayList.size())
assertEquals(0, wayList.get(1).getSign())
assertTrue(p.isFound())
assertEquals(3, wayList.size())
assertEquals(2, wayList.get(1).getSign())
assertTrue(p.isFound())
assertEquals(3, wayList.size())
assertTrue(p.isFound())
assertEquals(3, wayList.size())
assertTrue(p.isFound())
assertEquals(3, wayList.size())
assertEquals(-7, wayList.get(1).getSign())
assertTrue(p.isFound())
assertEquals(3, wayList.size())
assertEquals(-1, wayList.get(1).getSign())
assertTrue(p.isFound())
assertEquals(3, wayList.size())
assertEquals(Instruction.U_TURN_LEFT, wayList.get(1).getSign())
assertTrue(p.isFound())
assertEquals(3, wayList.size())
assertEquals(Instruction.U_TURN_RIGHT, wayList.get(1).getSign())
assertTrue(p.isFound())
assertEquals(3, wayList.size())
assertEquals(2, wayList.get(1).getSign())
assertTrue(p.isFound())
assertEquals(3, wayList.size())
assertEquals(7, wayList.get(1).getSign())
assertTrue(p.isFound())
assertEquals(3, wayList.size())
assertEquals(Instruction.TURN_SLIGHT_RIGHT, wayList.get(1).getSign())
assertTrue(p.isFound())
assertEquals(2, wayList.size())
assertEquals(11_000, path.getDistance())
assertEquals(IntArrayList.from(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), path.calcNodes())
assertEquals(10_900, optimalPath.getDistance())
assertEquals(IntArrayList.from(0, 1, 10, 2, 3, 4, 5, 6, 7, 8, 9), optimalPath.calcNodes())
assertTrue(path.isFound())
assertEquals(IntArrayList.from(5, 6, 7, 8, 4, 10), path.calcNodes())
assertEquals(IntArrayList.from(5, 1, 9, 2, 3), path.calcNodes())
assertEquals(2, pathInfos.size())
assertEquals(IntArrayList.from(5, 6, 7, 8, 4, 10), pathInfos.get(0).path.calcNodes())
assertEquals(IntArrayList.from(5, 1, 9, 2, 3, 4, 10), pathInfos.get(1).path.calcNodes())
assertEquals(2, pathInfos.size())
assertEquals(IntArrayList.from(10, 4, 3, 6, 5), pathInfos.get(0).path.calcNodes())
assertEquals(IntArrayList.from(10, 12, 11, 4, 3, 6, 5), pathInfos.get(1).path.calcNodes())
assertEquals(2, graph.getEdges())
assertEquals(3, queryCHGraph.getNodes())
assertEquals(2, queryCHGraph.getEdges())
assertTrue(queryCHGraph.isEdgeBased())
assertTrue(queryCHGraph.hasTurnCosts())
assertEquals(2, graph.getEdges())
assertEquals(3, queryCHGraph.getNodes())
assertEquals(3, queryCHGraph.getEdges())
assertEquals(2, graph.getEdges())
assertEquals(4, queryCHGraph.getNodes())
assertEquals(2 + 4, queryCHGraph.getEdges())
assertEquals(2, graph.getEdges())
assertEquals(4, queryCHGraph.getNodes())
assertEquals(3 + 4, queryCHGraph.getEdges())
assertSame(graph.getBaseGraph(), routingCHGraph.getBaseGraph())
assertSame(queryGraph, queryCHGraph.getBaseGraph())
assertSame(weighting, queryCHGraph.getWeighting())
assertEquals(5, queryCHGraph.getLevel(0))
assertEquals(7, queryCHGraph.getLevel(1))
assertEquals(Integer.MAX_VALUE, queryCHGraph.getLevel(2))
assertEquals(Double.POSITIVE_INFINITY, iter.getWeight(true))
assertEquals(Double.POSITIVE_INFINITY, iter.getWeight(false))
assertEquals(Double.POSITIVE_INFINITY, routingCHGraph.getEdgeIteratorState(0, 1).getWeight(true))
assertEquals(Double.POSITIVE_INFINITY, routingCHGraph.getEdgeIteratorState(0, 0).getWeight(false))
assertEquals(Double.POSITIVE_INFINITY, iter.getWeight(true))
assertEquals(Double.POSITIVE_INFINITY, iter.getWeight(false))
assertEquals(Double.POSITIVE_INFINITY, iter.getWeight(false))
assertEquals(Double.POSITIVE_INFINITY, iter.getWeight(true))
assertEquals(Double.POSITIVE_INFINITY, queryCHGraph.getEdgeIteratorState(1, 2).getWeight(true))
assertEquals(Double.POSITIVE_INFINITY, queryCHGraph.getEdgeIteratorState(1, 0).getWeight(false))
assertEquals(5, routingCHGraph.getTurnWeight(0, 1, 1))
assertEquals(5, queryCHGraph.getTurnWeight(0, 1, 1))
assertEquals(5, queryCHGraph.getTurnWeight(expectedEdge31, 1, expectedEdge14))
assertEquals(3, pathInfos.size())
assertEquals(4, pathInfos.size())
assertFalse(p.isFound())
assertFalse(fails)
assertFalse(outIter.next())
assertTrue(AbstractWeighting.isValidName("blup"))
assertTrue(AbstractWeighting.isValidName("blup_a"))
assertTrue(AbstractWeighting.isValidName("blup|a"))
assertFalse(AbstractWeighting.isValidName("Blup"))
assertFalse(AbstractWeighting.isValidName("Blup!"))
assertEquals(375 * 60 * 1000, w.calcEdgeMillis(edge, false))
assertEquals(600 * 60 * 1000, w.calcEdgeMillis(edge, true))
assertEquals(1000.0 / 72 * 3.6, createWeighting(new CustomModel().addToSpeed(If("true", LIMIT, "72")).setDistanceInfluence(0)).getMinWeight(1000))
assertEquals(1000.0 / 155 * 3.6, createWeighting(new CustomModel().addToSpeed(If("true", LIMIT, "180")).setDistanceInfluence(0)).getMinWeight(1000))
assertEquals(1000.0 / 150 * 3.6, createWeighting(new CustomModel().addToSpeed(If("road_class == SERVICE", MULTIPLY, "1.5")).addToSpeed(If("true", LIMIT, "150")).setDistanceInfluence(0)).getMinWeight(1000))
assertTrue(Double.isInfinite(weighting.calcEdgeWeight(motorway, false)))
assertEquals(1, CustomModel.merge(new CustomModel(), queryModel).getPriority().size())
assertEquals(100, findMinMax(new HashSet<>(), new MinMax(0, 120), statements, lookup).max)
assertEquals(100, findMinMax(new HashSet<>(), new MinMax(0, 120), statements, lookup).max)
assertEquals(100, findMinMax(new HashSet<>(), new MinMax(0, 120), statements, lookup).max)
assertEquals(35, findMinMax(new HashSet<>(), new MinMax(0, 30), statements, lookup).max)
assertEquals(140, findMinMax(new HashSet<>(), new MinMax(0, 140), statements, lookup).max)
assertEquals(2, findMinMax(new HashSet<>(), new MinMax(0, 1), statements, lookup).max)
assertEquals(0.5, findMinMax(new HashSet<>(), new MinMax(0, 1), statements, lookup).max)
assertEquals(-0.5, minMax.min)
assertEquals(0.5, minMax.max)
assertEquals(120, findMinMax(new HashSet<>(), new MinMax(0, 150), statements, lookup).max)
assertEquals(80, findMinMax(new HashSet<>(), new MinMax(0, 100), statements, lookup).max)
assertEquals(60, findMinMax(new HashSet<>(), new MinMax(0, 60), statements, lookup).max)
assertEquals(40, findMinMax(new HashSet<>(), new MinMax(0, 150), statements, lookup).max)
assertEquals(40, findMinMax(new HashSet<>(), new MinMax(0, 40), statements, lookup).max)
assertTrue(result.guessedVariables.isEmpty())
assertEquals("[priority]", result.guessedVariables.toString())
assertTrue(result.ok)
assertEquals("[toll]", result.guessedVariables.toString())
assertEquals("road_class == RoadClass.PRIMARY", parse("road_class == PRIMARY", validVariable, lookup).converted.toString())
assertEquals("toll == Toll.NO", parse("toll == NO", validVariable, lookup).converted.toString())
assertEquals("toll == Toll.NO || road_class == RoadClass.NO", parse("toll == NO || road_class == NO", validVariable, lookup).converted.toString())
assertEquals(CustomWeightingHelper.class.getSimpleName() + ".in(this.in_custom_1, edge)", parse("in_custom_1", validVariable, lookup).converted.toString())
assertNull(parse("toll == Toll.NO", validVariable, lookup).converted)
assertTrue(result.ok)
assertEquals("[country]", result.guessedVariables.toString())
assertEquals("country == 1", result.converted.toString())
assertTrue(result.ok)
assertEquals("[country]", result.guessedVariables.toString())
assertEquals("country == -1", result.converted.toString())
assertTrue(result.ok)
assertEquals("[edge]", result.guessedVariables.toString())
assertTrue(result.ok)
assertTrue(result.guessedVariables.isEmpty())
assertTrue(result.guessedVariables.isEmpty())
assertTrue(result.ok)
assertEquals("[edge]", result.guessedVariables.toString())
assertTrue(result.ok)
assertEquals("[road_class]", result.guessedVariables.toString())
assertEquals("[toll]", result.guessedVariables.toString())
assertTrue(parse("road_class.ordinal()*2 == PRIMARY.ordinal()*2", validVariable, lookup).ok)
assertTrue(parse("Math.sqrt(road_class.ordinal()) > 1", validVariable, lookup).ok)
assertTrue(result.ok)
assertEquals("[toll, road_class]", result.guessedVariables.toString())
assertTrue(result.ok)
assertEquals("[average_slope]", result.guessedVariables.toString())
assertTrue(result.ok)
assertEquals("[average_slope]", result.guessedVariables.toString())
assertAll(() -> CustomModelParser.createWeightingParameters(customModel, encodingManager, avgSpeedEnc, maxSpeed, null))
assertEquals(1, blockedEdges)
assertEquals(2, totalEdges)
assertEquals(3, stagePoints.size())
assertEquals(0, stagePoints.get(0).getClosestNode())
assertEquals(6, stagePoints.get(1).getClosestNode())
assertEquals(0, stagePoints.get(2).getClosestNode())
assertEquals(2, paths.size())
assertEquals(IntArrayList.from(0, 7, 6, 5), paths.get(0).calcNodes())
assertEquals(IntArrayList.from(5, 4, 3, 2, 1, 0), paths.get(1).calcNodes())
assertEquals(4, snap4.getClosestNode())
assertEquals(5, snap5.getClosestNode())
assertEquals(6, snap6.getClosestNode())
assertEquals(2, paths.size())
assertEquals(IntArrayList.from(5, 6, 3), paths.get(0).calcNodes())
assertEquals(IntArrayList.from(3, 2, 9, 1, 5), paths.get(1).calcNodes())
assertEquals(2, paths.size())
assertEquals(IntArrayList.from(6, 3), paths.get(0).calcNodes())
assertEquals(IntArrayList.from(3, 4, 8, 7, 6), paths.get(1).calcNodes())
assertEquals(0, result.getInEdgeRight())
assertEquals(0, result.getOutEdgeRight())
assertEquals(0, result.getInEdgeLeft())
assertEquals(0, result.getOutEdgeRight())
assertEquals(unrestricted(), resolver.resolveDirections(snap.getClosestNode(), snap.getQueryPoint()))
assertEquals(IntArrayList.from(0, 7, 8), p.calcNodes())
assertEquals(IntArrayList.from(0, 1, 2, 3, 4, 10), p.calcNodes())
assertEquals(-1, algo.findEndNode(0, 4))
assertEquals(-1, algo.findEndNode(0, 4))
assertEquals(1, algo.findEndNode(0, 1))
assertEquals(1, algo.findEndNode(0, 1))
assertEquals(IntArrayList.from(0, 4), p.calcNodes())
assertEquals(IntArrayList.from(0, 4, 5, 7), p.calcNodes())
assertEquals(IntArrayList.from(0, 1, 2), p.calcNodes())
assertTrue(p.isFound())
assertTrue(p.isFound())
assertEquals(IntArrayList.from(0, 4), p.calcNodes())
assertEquals(IntArrayList.from(0, 4, 5, 7), p.calcNodes())
assertEquals(IntArrayList.from(0, 1, 2), p.calcNodes())
assertEquals(IntArrayList.from(7, 6, 0), resolver.getEdgesWithDifferentHeading(8, 90))
assertEquals(IntArrayList.from(7, 6, 0), resolver.setTolerance(100).getEdgesWithDifferentHeading(8, 90))
assertEquals(IntArrayList.from(7, 6, 5, 4, 2, 1, 0), resolver.setTolerance(10).getEdgesWithDifferentHeading(8, 90))
assertEquals(IntArrayList.from(7, 6, 5, 1, 0), resolver.setTolerance(60).getEdgesWithDifferentHeading(8, 90))
assertEquals(IntArrayList.from(1), resolver.setTolerance(170).getEdgesWithDifferentHeading(8, 180))
assertEquals(IntArrayList.from(2, 1, 0), resolver.setTolerance(130).getEdgesWithDifferentHeading(8, 180))
assertEquals(IntArrayList.from(5, 4, 3), resolver.setTolerance(90).getEdgesWithDifferentHeading(8, 315))
assertEquals(IntArrayList.from(6, 5, 4, 3, 2), resolver.setTolerance(50).getEdgesWithDifferentHeading(8, 315))
assertEquals(IntArrayList.from(1), resolver.getEdgesWithDifferentHeading(0, 90))
assertEquals(IntArrayList.from(0), resolver.getEdgesWithDifferentHeading(0, 270))
assertEquals("0->2", queryGraph.getEdgeIteratorState(1, Integer.MIN_VALUE).toString())
assertEquals(IntArrayList.from(1), resolver.getEdgesWithDifferentHeading(2, 90))
assertEquals("2->1", queryGraph.getEdgeIteratorState(2, Integer.MIN_VALUE).toString())
assertEquals(IntArrayList.from(2), resolver.getEdgesWithDifferentHeading(2, 270))
assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> CustomModelParser.createWeightingParameters(customModel, encodingManager, avgSpeedEnc, maxSpeed, null))
assertEquals(1, GHUtility.count(graph.createEdgeExplorer().setBaseNode(1)))
assertEquals(0, GHUtility.count(chGraph.createInEdgeExplorer().setBaseNode(1)))
assertEquals(1, GHUtility.count(graph.createEdgeExplorer().setBaseNode(1)))
assertEquals(0, GHUtility.count(chGraph.createOutEdgeExplorer().setBaseNode(1)))
assertEquals(0, GHUtility.count(graph.createEdgeExplorer().setBaseNode(2)))
assertEquals(1, GHUtility.count(chGraph.createOutEdgeExplorer().setBaseNode(2)))
assertEquals(10, chGraph.getNodes())
assertEquals(2, graph.getEdges())
assertEquals(3, chGraph.getEdges())
assertEquals(1, GHUtility.count(chGraph.createOutEdgeExplorer().setBaseNode(2)))
assertEquals(0, GHUtility.count(chOutExplorer.setBaseNode(2)))
assertEquals(0, GHUtility.count(chInExplorer.setBaseNode(2)))
assertEquals(2, GHUtility.count(chOutExplorer.setBaseNode(1)))
assertEquals(3, GHUtility.count(chInExplorer.setBaseNode(1)))
assertEquals(GHUtility.asSet(2, 4), GHUtility.getNeighbors(chOutExplorer.setBaseNode(1)))
assertEquals(GHUtility.asSet(4), GHUtility.getNeighbors(baseCarOutExplorer.setBaseNode(1)))
assertEquals(0, GHUtility.count(chOutExplorer.setBaseNode(3)))
assertEquals(0, GHUtility.count(chInExplorer.setBaseNode(3)))
assertEquals(0, GHUtility.count(chOutExplorer.setBaseNode(0)))
assertEquals(1, GHUtility.count(chInExplorer.setBaseNode(0)))
assertEquals(0, sc1.getBaseNode())
assertEquals(1, sc1.getAdjNode())
assertTrue(sc1.isShortcut())
assertEquals(1, lg.getEdgeIteratorState(sc1, 1).getAdjNode())
assertEquals(0, lg.getEdgeIteratorState(sc1, 1).getBaseNode())
assertEquals(3, lg.getEdgeIteratorState(sc2, 3).getAdjNode())
assertEquals(2, lg.getEdgeIteratorState(sc2, 3).getBaseNode())
assertEquals(GHUtility.asSet(3, 4), GHUtility.getNeighbors(exp.setBaseNode(1)))
assertEquals(edge1.getEdge(), chStore.getSkippedEdge1(chStore.toShortcutPointer(0)))
assertEquals(edge2.getEdge(), chStore.getSkippedEdge2(chStore.toShortcutPointer(0)))
assertEquals(edge1.getEdge(), chStore.getSkippedEdge1(chStore.toShortcutPointer(0)))
assertEquals(edge2.getEdge(), chStore.getSkippedEdge2(chStore.toShortcutPointer(0)))
assertEquals(0, chStore.getOrigEdgeKeyFirst(chStore.toShortcutPointer(0)))
assertEquals(2, chStore.getOrigEdgeKeyLast(chStore.toShortcutPointer(0)))
assertNotNull(sc02)
assertEquals(0, sc02.getBaseNode())
assertEquals(2, sc02.getAdjNode())
assertEquals(2, sc02.getEdge())
assertEquals(0, sc02.getSkippedEdge1())
assertEquals(1, sc02.getSkippedEdge2())
assertEquals(0, sc02.getOrigEdgeKeyFirst())
assertEquals(2, sc02.getOrigEdgeKeyLast())
assertNotNull(sc20)
assertEquals(2, sc20.getBaseNode())
assertEquals(0, sc20.getAdjNode())
assertEquals(2, sc20.getEdge())
assertEquals(0, sc20.getSkippedEdge1())
assertEquals(1, sc20.getSkippedEdge2())
assertEquals(0, sc20.getOrigEdgeKeyFirst())
assertEquals(2, sc20.getOrigEdgeKeyLast())
assertEquals(new GHPoint(0, 0), res.getSnappedPoint())
assertEquals(new GHPoint(1, 0), res.getSnappedPoint())
assertEquals(new GHPoint(1, 2.5), res.getSnappedPoint())
assertEquals(3, queryGraph2.getNodes())
assertEquals(new GHPoint(1.5, 1.5), res.getSnappedPoint())
assertEquals(3, res.getClosestNode())
assertEquals(3, getPoints(queryGraph3, 0, 3).size())
assertEquals(2, getPoints(queryGraph3, 3, 1).size())
assertEquals(new GHPoint(1.5, 1.5), res.getSnappedPoint())
assertEquals(3, res.getClosestNode())
assertEquals(3, getPoints(queryGraph4, 0, 3).size())
assertEquals(2, getPoints(queryGraph4, 3, 1).size())
assertEquals(new GHPoint(1.300019, 1.899962), res.getSnappedPoint())
assertEquals(3, res.getClosestNode())
assertEquals(4, getPoints(queryGraph5, 0, 3).size())
assertEquals(2, getPoints(queryGraph5, 3, 1).size())
assertEquals(new GHPoint(0.5, 0), res.getSnappedPoint())
assertEquals(3, res.getClosestNode())
assertEquals(2, getPoints(queryGraph6, 0, 3).size())
assertEquals(2, getPoints(queryGraph6, 3, 2).size())
assertEquals(2, realNodeModifications.size())
assertEquals("[3->4]", realNodeModifications.get(3).getAdditionalEdges().toString())
assertEquals("[2]", realNodeModifications.get(3).getRemovedEdges().toString())
assertEquals("[1->4]", realNodeModifications.get(1).getAdditionalEdges().toString())
assertEquals("[2]", realNodeModifications.get(1).getRemovedEdges().toString())
assertEquals(4, state.fetchWayGeometry(FetchMode.ALL).size())
assertEquals(2, state.fetchWayGeometry(FetchMode.ALL).size())
assertEquals("[1->4, 1 1-0]", ((VirtualEdgeIterator) queryGraph.createEdgeExplorer().setBaseNode(1)).getEdges().toString())
assertEquals("[3->4]", ((VirtualEdgeIterator) queryGraph.createEdgeExplorer().setBaseNode(3)).getEdges().toString())
assertEquals(new GHPoint(1.5, 1.5), res1.getSnappedPoint())
assertEquals(3, res1.getClosestNode())
assertEquals(3, getPoints(queryGraph, 0, 3).size())
assertEquals(2, pl.size())
assertEquals(new GHPoint(1.5, 1.5), pl.get(0))
assertEquals(new GHPoint(1, 2.5), pl.get(1))
assertNotNull(queryGraph.getEdgeIteratorState(edge.getEdge(), 3))
assertNotNull(queryGraph.getEdgeIteratorState(edge.getEdge(), 1))
assertNotNull(queryGraph.getEdgeIteratorState(edge.getEdge(), 3))
assertNotNull(queryGraph.getEdgeIteratorState(edge.getEdge(), 0))
assertEquals(4, res2.getClosestNode())
assertEquals(new GHPoint(1.300019, 1.899962), res2.getSnappedPoint())
assertEquals(3, res1.getClosestNode())
assertEquals(new GHPoint(1.5, 1.5), res1.getSnappedPoint())
assertEquals(3, getPoints(queryGraph, 3, 0).size())
assertEquals(2, getPoints(queryGraph, 3, 4).size())
assertEquals(2, getPoints(queryGraph, 4, 1).size())
assertNull(GHUtility.getEdge(queryGraph, 4, 0))
assertNull(GHUtility.getEdge(queryGraph, 3, 1))
assertEquals(2, res1.getClosestNode())
assertEquals(new GHPoint(0, 0.1), res1.getSnappedPoint())
assertEquals(3, res2.getClosestNode())
assertEquals(new GHPoint(0, 0.9), res2.getSnappedPoint())
assertEquals(2, getPoints(queryGraph, 0, 2).size())
assertEquals(2, getPoints(queryGraph, 2, 3).size())
assertEquals(2, getPoints(queryGraph, 3, 1).size())
assertNull(GHUtility.getEdge(queryGraph, 3, 0))
assertNull(GHUtility.getEdge(queryGraph, 2, 1))
assertTrue(vi.next())
assertEquals(GHUtility.asSet(0, 5, 3), GHUtility.getNeighbors(ee.setBaseNode(1)))
assertTrue(snap.getClosestNode() > 1)
assertEquals(2, GHUtility.count(ee.setBaseNode(snap.getClosestNode())))
assertEquals(new GHPoint(0.5, 0), res1.getSnappedPoint())
assertEquals(new GHPoint(1.300019, 1.899962), res2.getSnappedPoint())
assertNotNull(GHUtility.getEdge(queryGraph, 0, 4))
assertNotNull(GHUtility.getEdge(queryGraph, 0, 3))
assertEquals(new GHPoint(0.5, 0), res1.getSnappedPoint())
assertEquals(new GHPoint(0.5, 0), res2.getSnappedPoint())
assertEquals(3, res1.getClosestNode())
assertEquals(3, res2.getClosestNode())
assertEquals(queryGraph.getNodes(), g.getNodes() + 1)
assertEquals(GHUtility.asSet(1, 3), GHUtility.getNeighbors(iter))
assertEquals(e1.getEdge(), e2.getEdge())
assertEquals(startNode, it.getBaseNode())
assertEquals(endNode, it.getAdjNode())
assertEquals(endNode, it.getBaseNode())
assertEquals(startNode, it.getAdjNode())
assertEquals(expect, isAvoidEdge(queryGraph.getEdgeIteratorState(1, 2)))
assertEquals(expect, isAvoidEdge(queryGraph.getEdgeIteratorState(1, 0)))
assertEquals(expect, isAvoidEdge(queryGraph.getEdgeIteratorState(1, 2)))
assertEquals(expect, isAvoidEdge(queryGraph.getEdgeIteratorState(1, 0)))
assertEquals(expect, isAvoidEdge(queryGraph.getEdgeIteratorState(2, 1)))
assertEquals(expect, isAvoidEdge(queryGraph.getEdgeIteratorState(2, 2)))
assertEquals(expect, isAvoidEdge(queryGraph.getEdgeIteratorState(2, 1)))
assertEquals(expect, isAvoidEdge(queryGraph.getEdgeIteratorState(2, 2)))
assertEquals(expect, isAvoidEdge(queryGraph.getEdgeIteratorState(1, 0)))
assertEquals(expect, isAvoidEdge(queryGraph.getEdgeIteratorState(1, 2)))
assertTrue(GHUtility.getEdge(queryGraph, 2, 0).get(UNFAVORED_EDGE))
assertTrue(GHUtility.getEdge(queryGraph, 2, 0).getReverse(UNFAVORED_EDGE))
assertTrue(GHUtility.getEdge(queryGraph, 0, 2).get(UNFAVORED_EDGE))
assertTrue(GHUtility.getEdge(queryGraph, 0, 2).getReverse(UNFAVORED_EDGE))
assertEquals(expect, isAvoidEdge(incomingEdge))
assertEquals(expect, isAvoidEdge(incomingEdgeReverse))
assertEquals(new LinkedHashSet<>(Arrays.asList(incomingEdge, incomingEdgeReverse)), queryGraph.getUnfavoredVirtualEdges())
assertEquals(expect, isAvoidEdge(incomingEdge))
assertEquals(expect, isAvoidEdge(incomingEdgeReverse))
assertEquals(new LinkedHashSet<>(), queryGraph.getUnfavoredVirtualEdges())
assertTrue(iter.next())
assertEquals(new GHPoint(1.5, 1.5), res.getSnappedPoint())
assertEquals(3, res.getClosestNode())
assertTrue(iter.next())
assertEquals(2, iter.getEdge())
assertEquals(0, iter.getAdjNode())
assertEquals(3, ((VirtualEdgeIteratorState) queryGraph.getEdgeIteratorState(iter.getEdge(), 0)).getOriginalEdgeKey())
assertTrue(iter.next())
assertEquals(3, iter.getEdge())
assertEquals(1, iter.getAdjNode())
assertEquals(2, ((VirtualEdgeIteratorState) queryGraph.getEdgeIteratorState(iter.getEdge(), 1)).getOriginalEdgeKey())
assertTrue(snap.isValid())
assertTrue(iter.next())
assertEquals(0, iter.getAdjNode())
assertEquals(1, iter.fetchWayGeometry(FetchMode.PILLAR_ONLY).size())
assertEquals(2, iter.fetchWayGeometry(FetchMode.BASE_AND_PILLAR).size())
assertEquals(2, iter.fetchWayGeometry(FetchMode.PILLAR_AND_ADJ).size())
assertEquals(3, iter.fetchWayGeometry(FetchMode.ALL).size())
assertEquals(Helper.createPointList(0.15, 0.15, 0.1, 0.1, 0.0, 0.0), iter.fetchWayGeometry(FetchMode.ALL))
assertTrue(iter.next())
assertEquals(1, iter.getAdjNode())
assertEquals(1, iter.fetchWayGeometry(FetchMode.PILLAR_ONLY).size())
assertEquals(2, iter.fetchWayGeometry(FetchMode.BASE_AND_PILLAR).size())
assertEquals(2, iter.fetchWayGeometry(FetchMode.PILLAR_AND_ADJ).size())
assertEquals(3, iter.fetchWayGeometry(FetchMode.ALL).size())
assertEquals(Helper.createPointList(0.15, 0.15, 0.2, 0.2, 0.3, 0.3), iter.fetchWayGeometry(FetchMode.ALL))
assertTrue(snap.isValid())
assertTrue(iter.next())
assertEquals(0, iter.getAdjNode())
assertEquals(1, iter.fetchWayGeometry(FetchMode.PILLAR_ONLY).size())
assertEquals(2, iter.fetchWayGeometry(FetchMode.BASE_AND_PILLAR).size())
assertEquals(2, iter.fetchWayGeometry(FetchMode.PILLAR_AND_ADJ).size())
assertEquals(3, iter.fetchWayGeometry(FetchMode.ALL).size())
assertEquals(Helper.createPointList(0.2, 0.2, 0.1, 0.1, 0.0, 0.0), iter.fetchWayGeometry(FetchMode.ALL))
assertTrue(iter.next())
assertEquals(1, iter.getAdjNode())
assertEquals(0, iter.fetchWayGeometry(FetchMode.PILLAR_ONLY).size())
assertEquals(1, iter.fetchWayGeometry(FetchMode.BASE_AND_PILLAR).size())
assertEquals(1, iter.fetchWayGeometry(FetchMode.PILLAR_AND_ADJ).size())
assertEquals(2, iter.fetchWayGeometry(FetchMode.ALL).size())
assertEquals(Helper.createPointList(0.2, 0.2, 0.5, 0.1), iter.fetchWayGeometry(FetchMode.ALL))
assertEquals(3, queryGraph.getNodes())
assertEquals(5, queryGraph.getEdges())
assertEquals(4, queryGraph.getVirtualEdges().size())
assertEquals(1, edge_0x.getEdge())
assertEquals(1, edge_x0.getEdge())
assertEquals(2, edge_x1.getEdge())
assertEquals(2, edge_1x.getEdge())
assertEquals(2, edge_0x.getEdgeKey())
assertEquals(3, edge_x0.getEdgeKey())
assertEquals(4, edge_x1.getEdgeKey())
assertEquals(5, edge_1x.getEdgeKey())
assertSame(queryGraph.getVirtualEdges().get(0), edge_0x)
assertSame(queryGraph.getVirtualEdges().get(1), edge_x0)
assertSame(queryGraph.getVirtualEdges().get(2), edge_x1)
assertSame(queryGraph.getVirtualEdges().get(3), edge_1x)
assertEquals(3, queryGraph.getNodes())
assertEquals(5, queryGraph.getEdges())
assertEquals(4, queryGraph.getVirtualEdges().size())
assertEquals(1, edge_0x.getEdge())
assertEquals(1, edge_x0.getEdge())
assertEquals(2, edge_x1.getEdge())
assertEquals(2, edge_1x.getEdge())
assertEquals(2, edge_0x.getEdgeKey())
assertEquals(3, edge_x0.getEdgeKey())
assertEquals(4, edge_x1.getEdgeKey())
assertEquals(5, edge_1x.getEdgeKey())
assertSame(queryGraph.getVirtualEdges().get(0), edge_0x)
assertSame(queryGraph.getVirtualEdges().get(1), edge_x0)
assertSame(queryGraph.getVirtualEdges().get(2), edge_x1)
assertSame(queryGraph.getVirtualEdges().get(3), edge_1x)
assertEquals(base, edge.getBaseNode())
assertEquals(adj, edge.getAdjNode())
assertEquals(IntArrayList.from(0, 1, 5, 2, 3), p1.calcNodes())
assertEquals(IntArrayList.from(0, 4, 6, 7), p1.calcNodes())
assertEquals(IntArrayList.from(0, 4, 6, 7), p2.calcNodes())
assertEquals(IntArrayList.from(0, 4, 5, 7), p4.calcNodes())
assertEquals(7, algo.getVisitedNodes())
assertEquals(11, algoNoSod.getVisitedNodes())
assertTrue(instance.isEnabled())
assertTrue(handler.isEnabled())
assertEquals(Integer.MAX_VALUE, res)
assertEquals(Integer.MAX_VALUE, res)
assertEquals(65536 - 2, lms.getFromWeight(0, 0))
assertEquals(65534, lms.getFromWeight(0, 0))
assertEquals(65534, lms.getFromWeight(0, 0))
assertTrue(lms.isInfinity(0))
assertEquals(3, storage.getSubnetworksWithLandmarks())
assertEquals("[2, 0]", Arrays.toString(storage.getLandmarks(1)))
assertEquals("[5, 4]", Arrays.toString(storage.getLandmarks(2)))
assertEquals(2, storage.getSubnetworksWithLandmarks())
assertEquals("[4, 0]", Arrays.toString(storage.getLandmarks(1)))
assertEquals(3, storage.getSubnetworksWithLandmarks())
assertEquals("[1, 0]", Arrays.toString(storage.getLandmarks(1)))
assertEquals("[5, 4]", Arrays.toString(storage.getLandmarks(2)))
assertEquals(2, storage.getSubnetworksWithLandmarks())
assertEquals("[2, 1]", Arrays.toString(storage.getLandmarks(1)))
assertEquals(3, storage.getSubnetworksWithLandmarks())
assertEquals("[1, 0]", Arrays.toString(storage.getLandmarks(1)))
assertEquals("[3, 2]", Arrays.toString(storage.getLandmarks(2)))
assertEquals(3, storage.getSubnetworksWithLandmarks())
assertEquals(refPath.calcNodes(), path.calcNodes())
assertEquals(refPath.calcNodes(), path.calcNodes())
assertEquals("[0, 14, 70, 182, 224]", Arrays.toString(intList))
assertEquals(2, store.getSubnetworksWithLandmarks())
assertEquals(0, store.getFromWeight(0, 224))
assertEquals(4671, Math.round(store.getFromWeight(0, 47) * factor))
assertEquals(3640, Math.round(store.getFromWeight(0, 52) * factor))
assertEquals(5525, Math.round(weight1_224 * factor))
assertEquals(921, Math.round(weight1_47 * factor))
assertEquals(weight1_224, store.getToWeight(1, 224))
assertEquals(weight1_47, store.getToWeight(1, 47))
assertEquals(Arrays.asList(224, 70), list)
assertEquals(expectedPath.calcNodes(), path.calcNodes())
assertEquals(expectedAlgo.getVisitedNodes() - 72, oneDirAlgoWithLandmarks.getVisitedNodes())
assertEquals(expectedPath.calcNodes(), path.calcNodes())
assertEquals(expectedAlgo.getVisitedNodes() - 99, biDirAlgoWithLandmarks.getVisitedNodes())
assertEquals(expectedPath.calcNodes(), path.calcNodes())
assertEquals(expectedAlgo.getVisitedNodes() - 72, qGraphOneDirAlgo.getVisitedNodes())
assertTrue(plm.getLandmarkStorage().isInitialized())
assertEquals(Arrays.toString(new int[] { 2, 0 }), Arrays.toString(plm.getLandmarkStorage().getLandmarks(1)))
assertEquals(4800, Math.round(plm.getLandmarkStorage().getFromWeight(0, 1) * expectedFactor))
assertTrue(plm.loadExisting())
assertEquals(Arrays.toString(new int[] { 2, 0 }), Arrays.toString(plm.getLandmarkStorage().getLandmarks(1)))
assertEquals(4800, Math.round(plm.getLandmarkStorage().getFromWeight(0, 1) * expectedFactor))
assertEquals(6, snap.getClosestNode())
assertEquals(new HashSet<>(Arrays.asList(0, 2)), GHUtility.getNeighbors(graph.createEdgeExplorer().setBaseNode(1)))
assertEquals(new HashSet<>(Arrays.asList(6, 2)), GHUtility.getNeighbors(queryGraph.createEdgeExplorer().setBaseNode(1)))
assertEquals(nodes(6, 1, 2, 3, 4, 5, 0), path.calcNodes())
assertEquals(0, path.getTime())
assertEquals(nodes(), path.calcNodes())
assertEquals(4, components.size())
assertEquals(IntArrayList.from(13, 5, 3, 7, 0), components.get(0))
assertEquals(IntArrayList.from(2, 4, 12, 11, 8, 1), components.get(1))
assertEquals(IntArrayList.from(10, 14, 6), components.get(2))
assertEquals(IntArrayList.from(15, 9), components.get(3))
assertEquals(16, scc.getNodes())
assertEquals(0, scc.getSingleNodeComponents().cardinality())
assertEquals(components.get(1), scc.getBiggestComponent())
assertEquals(3, scc.getTotalComponents())
assertEquals(2, components.size())
assertEquals(IntArrayList.from(2, 1, 0), components.get(1))
assertEquals(IntArrayList.from(7, 6, 5, 4), components.get(0))
assertEquals(1, scc.getSingleNodeComponents().cardinality())
assertTrue(scc.getSingleNodeComponents().get(3))
assertEquals(8, scc.getNodes())
assertEquals(components.get(0), scc.getBiggestComponent())
assertTrue(scc.getSingleNodeComponents().isEmpty())
assertEquals(3, scc.getTotalComponents())
assertEquals(2, scc.getComponents().size())
assertEquals(8, scc.getNodes())
assertEquals(2, scc.getTotalComponents())
assertTrue(scc.getSingleNodeComponents().isEmpty())
assertEquals(17, scc.getNodes())
assertEquals(scc.getComponents().get(1), scc.getBiggestComponent())
assertEquals(2, scc.getComponents().size())
assertEquals(IntArrayList.from(14, 16, 15, 13, 12, 5), scc.getComponents().get(0))
assertEquals(IntArrayList.from(8, 7, 6, 3, 4, 9, 10, 11, 2, 1, 0), scc.getComponents().get(1))
assertEquals(88, storage.getSubnetwork(1))
assertEquals(0, storage.getSubnetwork(0))
assertEquals(2, result.getEdgeKeys())
assertEquals(1, result.getTotalComponents())
assertEquals(1, result.getComponents().size())
assertTrue(result.getSingleEdgeComponents().isEmpty())
assertEquals(result.getComponents().get(0), result.getBiggestComponent())
assertEquals(IntArrayList.from(1, 0), result.getComponents().get(0))
assertEquals(4, result.getEdgeKeys())
assertEquals(1, result.getTotalComponents())
assertEquals(1, result.getComponents().size())
assertTrue(result.getSingleEdgeComponents().isEmpty())
assertEquals(result.getComponents().get(0), result.getBiggestComponent())
assertEquals(IntArrayList.from(1, 3, 2, 0), result.getComponents().get(0))
assertEquals(4, result.getEdgeKeys())
assertEquals(4, result.getTotalComponents())
assertEquals(0, result.getComponents().size())
assertEquals(4, result.getSingleEdgeComponents().cardinality())
assertEquals(IntArrayList.from(), result.getBiggestComponent())
assertEquals(6, result.getEdgeKeys())
assertEquals(5, result.getTotalComponents())
assertEquals(1, result.getComponents().size())
assertEquals(4, result.getSingleEdgeComponents().cardinality())
assertEquals(result.getComponents().get(0), result.getBiggestComponent())
assertEquals(16, result.getEdgeKeys())
assertEquals(7, result.getTotalComponents())
assertEquals(3, result.getComponents().size())
assertEquals(4, result.getSingleEdgeComponents().cardinality())
assertEquals(result.getComponents().get(1), result.getBiggestComponent())
assertEquals(16, result.getEdgeKeys())
assertEquals(1, result.getTotalComponents())
assertEquals(1, result.getComponents().size())
assertTrue(result.getSingleEdgeComponents().isEmpty())
assertEquals(result.getComponents().get(0), result.getBiggestComponent())
assertEquals(IntArrayList.from(1, 3, 7, 11, 10, 6, 9, 13, 12, 15, 14, 8, 2, 5, 4, 0), result.getComponents().get(0))
assertEquals(10, result.getEdgeKeys())
assertEquals(6, result.getTotalComponents())
assertEquals(2, result.getComponents().size())
assertEquals(result.getComponents().get(0), result.getBiggestComponent())
assertEquals(IntArrayList.from(7, 9, 8, 6), result.getComponents().get(0))
assertEquals(IntArrayList.from(1, 0), result.getComponents().get(1))
assertEquals(4, result.getSingleEdgeComponents().cardinality())
assertEquals(18, result.getEdgeKeys())
assertEquals(6, result.getTotalComponents())
assertEquals(2, result.getComponents().size())
assertEquals(result.getComponents().get(1), result.getBiggestComponent())
assertEquals(IntArrayList.from(1, 5, 4, 0), result.getComponents().get(0))
assertEquals(IntArrayList.from(7, 8, 13, 14, 17, 16, 15, 12, 10, 6), result.getComponents().get(1))
assertEquals(4, result.getSingleEdgeComponents().cardinality())
assertEquals(7, result.getTotalComponents())
assertEquals(1, result.getComponents().size())
assertEquals(IntArrayList.from(6, 4, 2, 0), result.getBiggestComponent())
assertEquals(6, result.getSingleEdgeComponents().cardinality())
assertEquals(10, result.getTotalComponents())
assertEquals(0, result.getComponents().size())
assertEquals(IntArrayList.from(), result.getBiggestComponent())
assertEquals(10, result.getSingleEdgeComponents().cardinality())
assertEquals(8, components.getEdgeKeys())
assertEquals(1, components.getComponents().size())
assertEquals(16, components.getEdgeKeys())
assertEquals(3, components.getComponents().size())
assertEquals(6, components.getEdgeKeys())
assertEquals(1, components.getComponents().size())
assertEquals(expected.getEdgeKeys(), given.getEdgeKeys())
assertEquals(3, instance.doWork())
assertEquals(IntArrayList.from(7, 8, 9), getSubnetworkEdges(g, subnetworkEnc))
assertEquals(0, instance.doWork())
assertEquals(IntArrayList.from(), getSubnetworkEdges(g, subnetworkEnc))
assertEquals(3, instance.doWork())
assertEquals(IntArrayList.from(7, 8, 9), getSubnetworkEdges(g, carSubnetworkEnc))
assertEquals(IntArrayList.from(), getSubnetworkEdges(g, bikeSubnetworkEnc))
assertEquals(6, instance.doWork())
assertEquals(IntArrayList.from(7, 8, 9), getSubnetworkEdges(g, carSubnetworkEnc))
assertEquals(IntArrayList.from(7, 8, 9), getSubnetworkEdges(g, bikeSubnetworkEnc))
assertEquals(3, instance.doWork())
assertEquals(IntArrayList.from(7, 8, 9), getSubnetworkEdges(g, subnetworkEnc))
assertEquals(0, instance.doWork())
assertEquals(IntArrayList.from(), getSubnetworkEdges(g, subnetworkEnc))
assertEquals(3, instance.doWork())
assertEquals(IntArrayList.from(7, 8, 9), getSubnetworkEdges(g, subnetworkEnc))
assertEquals(11, g.getNodes())
assertEquals(3, subnetworkEdges)
assertEquals(IntArrayList.from(4, 5, 6), getSubnetworkEdges(g, subnetworkEnc))
assertEquals(11, g.getNodes())
assertEquals(5, subnetworkEdges)
assertEquals(IntArrayList.from(4, 5, 6, 7, 8), getSubnetworkEdges(g, subnetworkEnc))
assertEquals(2, subnetworkEdges)
assertEquals(IntArrayList.from(0, 1), getSubnetworkEdges(g, subnetworkEnc))
assertEquals(expectedResult, resolver.resolveDirections(node, new GHPoint(lat, lon)))
assertTrue(comparePaths(refPath, path, source, target, false, -1).isEmpty())
assertTrue(Double.isInfinite(testEnc.getMaxOrMaxStorableDecimal()))
assertTrue(Double.isInfinite(testEnc.getMaxStorableDecimal()))
assertTrue(Double.isInfinite(testEnc.getNextStorableValue(7)))
assertEquals(6, testEnc.getNextStorableValue(6))
assertEquals(5, testEnc.getMaxOrMaxStorableDecimal())
assertTrue(Double.isInfinite(testEnc.getMaxStorableDecimal()))
assertTrue(Double.isInfinite(testEnc.getMaxOrMaxStorableDecimal()))
assertTrue(Double.isInfinite(testEnc.getMaxStorableDecimal()))
assertEquals(3, enc.getDecimal(false, intsRef))
assertEquals(6, enc.getDecimal(false, intsRef))
assertEquals(0, enc.getNextStorableValue(0))
assertEquals(3, enc.getNextStorableValue(0.1))
assertEquals(3, enc.getNextStorableValue(1.5))
assertEquals(3, enc.getNextStorableValue(2.9))
assertEquals(3, enc.getNextStorableValue(3))
assertEquals(6, enc.getNextStorableValue(3.1))
assertEquals(6, enc.getNextStorableValue(4.5))
assertEquals(6, enc.getNextStorableValue(5.9))
assertEquals(45, enc.getNextStorableValue(44.3))
assertEquals(45, enc.getNextStorableValue(45))
assertTrue(assertThrows(IllegalStateException.class, () -> new DecimalEncodedValueImpl("test", 5, 0, 5, true, false, false).getSmallestNonZeroValue()).getMessage().contains("getting the smallest non-zero value is not possible"))
assertEquals(expected, enc.getSmallestNonZeroValue())
assertEquals(expected, enc.getDecimal(false, intsRef))
assertEquals(0, enc.getDecimal(false, intsRef))
assertEquals(12, enc.getNextStorableValue(11.2))
assertEquals(42, enc.getNextStorableValue(41.3))
assertEquals(42, enc.getNextStorableValue(42))
assertEquals(Double.POSITIVE_INFINITY, enc.getNextStorableValue(42.1))
assertEquals(Double.POSITIVE_INFINITY, enc.getNextStorableValue(45))
assertEquals(Double.POSITIVE_INFINITY, enc.getNextStorableValue(45.1))
assertEquals(42, enc.getDecimal(false, intsRef))
assertEquals(Double.POSITIVE_INFINITY, enc.getDecimal(false, intsRef))
assertEquals(15 * 3, enc.getMaxOrMaxStorableDecimal())
assertEquals(3, enc.getDecimal(false, ints))
assertEquals(3, enc.getMaxOrMaxStorableDecimal())
assertEquals(6, enc.getDecimal(false, ints))
assertEquals(6, enc.getMaxOrMaxStorableDecimal())
assertEquals(0, enc.getDecimal(false, ints))
assertEquals(6, enc.getMaxOrMaxStorableDecimal())
assertEquals(10, prop.getInt(false, ref))
assertEquals(20, prop.getInt(true, ref))
assertEquals(10, prop.getInt(false, ref))
assertEquals(20, prop.getInt(true, ref))
assertEquals(10, prop.getInt(false, ref))
assertEquals(20, prop.getInt(true, ref))
assertEquals(-5, prop.getInt(false, ref))
assertEquals(-5, prop.getInt(false, ref))
assertEquals(Integer.MAX_VALUE, prop.getInt(false, ref))
assertEquals(5, prop.getInt(false, ref))
assertEquals(-5, prop.getInt(true, ref))
assertEquals(-2, prop.getInt(false, ref))
assertEquals(2, prop.getInt(true, ref))
assertEquals(-3, prop.getInt(false, ref))
assertEquals(3, prop.getInt(true, ref))
assertEquals(5, prop.init(init))
assertEquals(5, prop.bits)
assertEquals(0, init.dataIndex)
assertEquals(0, init.shift)
assertEquals(RoadClass.OTHER, prop.getEnum(false, ref))
assertEquals(RoadClass.SECONDARY, prop.getEnum(false, ref))
assertEquals(3, 32 - Integer.numberOfLeadingZeros(7 - 1))
assertEquals(3, 32 - Integer.numberOfLeadingZeros(8 - 1))
assertEquals(4, 32 - Integer.numberOfLeadingZeros(9 - 1))
assertEquals(4, 32 - Integer.numberOfLeadingZeros(16 - 1))
assertEquals(5, 32 - Integer.numberOfLeadingZeros(17 - 1))
assertEquals(YES, RoadAccess.find("unknown"))
assertEquals(NO, RoadAccess.find("no"))
assertFalse(Double.isNaN(weighting.calcEdgeWeight(motorway, false)))
assertFalse(parse("edge; getClass()", allNamesInvalid).ok)
assertFalse(result.ok)
assertFalse(result.ok)
assertFalse(result.ok)
assertFalse(result.ok)
assertFalse(parse("edge; getClass()", allNamesInvalid, lookup).ok)
assertFalse(result.ok)
assertFalse(parse("road_class == PRIMARY", s -> false, lookup).ok)
assertFalse(result.ok)
assertFalse(g.getEdgeIteratorState(edge1.getEdge(), Integer.MIN_VALUE).isShortcut())
assertFalse(g.getEdgeIteratorState(edge2.getEdge(), Integer.MIN_VALUE).isShortcut())
assertFalse(it.next())
assertFalse(it.next())
assertFalse(GHUtility.getEdge(queryGraph, 2, 1).get(UNFAVORED_EDGE))
assertFalse(GHUtility.getEdge(queryGraph, 2, 1).getReverse(UNFAVORED_EDGE))
assertFalse(GHUtility.getEdge(queryGraph, 1, 2).get(UNFAVORED_EDGE))
assertFalse(GHUtility.getEdge(queryGraph, 1, 2).getReverse(UNFAVORED_EDGE))
assertFalse(iter.next())
assertFalse(iter.next())
assertFalse(instance.isEnabled())
assertFalse(handler.isEnabled())
assertFalse(lms.isInfinity(0))
assertFalse(bool.getBool(false, ref))
assertTrue(bool.getBool(false, ref))
assertFalse(bool.getBool(false, ref))
assertTrue(bool.getBool(true, ref))
assertEquals("road_class", deserializedRoadClass.getName())
assertTrue(Arrays.toString(deserializedRoadClass.getValues()).contains("motorway"))
assertEquals("lanes", deserializedLanes.getName())
assertEquals("max_width", deserializedMaxWidth.getName())
assertEquals("get_off_bike", deserializedGetOffBike.getName())
assertEquals("names", deserializedNames.getName())
assertTrue(deserializedNames.getValues().contains("jim"))
assertEquals("{\"className\":\"com.graphhopper.routing.ev.IntEncodedValueImpl\",\"name\":\"lanes\",\"bits\":3," + "\"min_storable_value\":0,\"max_storable_value\":7,\"max_value\":-2147483648,\"negate_reverse_direction\":false,\"store_two_directions\":false," + "\"fwd_data_index\":0,\"bwd_data_index\":0,\"fwd_shift\":0,\"bwd_shift\":-1,\"fwd_mask\":7,\"bwd_mask\":0}", serialized.get(0))
assertEquals("{\"className\":\"com.graphhopper.routing.ev.DecimalEncodedValueImpl\",\"name\":\"max_width\",\"bits\":7," + "\"min_storable_value\":0,\"max_storable_value\":127,\"max_value\":-2147483648,\"negate_reverse_direction\":false,\"store_two_directions\":false," + "\"fwd_data_index\":0,\"bwd_data_index\":0,\"fwd_shift\":3,\"bwd_shift\":-1,\"fwd_mask\":1016,\"bwd_mask\":0," + "\"factor\":0.1,\"use_maximum_as_infinity\":true}", serialized.get(1))
assertEquals("{\"className\":\"com.graphhopper.routing.ev.SimpleBooleanEncodedValue\",\"name\":\"get_off_bike\",\"bits\":1," + "\"min_storable_value\":0,\"max_storable_value\":1,\"max_value\":-2147483648,\"negate_reverse_direction\":false,\"store_two_directions\":false,\"fwd_data_index\":0," + "\"bwd_data_index\":0,\"fwd_shift\":10,\"bwd_shift\":-1,\"fwd_mask\":1024,\"bwd_mask\":0}", serialized.get(2))
assertEquals("lanes", ev0.getName())
assertEquals("max_width", ev1.getName())
assertEquals("get_off_bike", ev2.getName())
assertEquals("{\"data_index\":0,\"shift\":3,\"next_shift\":10,\"bit_mask\":1016}", s)
assertEquals(0, deserialized.dataIndex)
assertEquals(3, deserialized.shift)
assertEquals(10, deserialized.nextShift)
assertEquals(1016, deserialized.bitMask)
assertEquals(2, prop.init(init))
assertEquals(2, prop.bits)
assertEquals(0, init.dataIndex)
assertEquals(0, init.shift)
assertEquals(6, prop.init(init))
assertEquals(6, prop.bits)
assertEquals(0, init.dataIndex)
assertEquals(0, init.shift)
assertEquals(1, prop.init(init))
assertEquals(1, prop.bits)
assertEquals(0, init.dataIndex)
assertEquals(0, init.shift)
assertEquals(0, prop.getValues().size())
assertNotEquals(small, big)
assertEquals(null, prop.getString(false, ref))
assertEquals(0, prop.getValues().size())
assertEquals("aut", prop.getString(false, ref))
assertEquals(1, prop.getValues().size())
assertEquals("deu", prop.getString(false, ref))
assertEquals(2, prop.getValues().size())
assertEquals("che", prop.getString(false, ref))
assertEquals(3, prop.getValues().size())
assertEquals("deu", prop.getString(false, ref))
assertEquals(3, prop.getValues().size())
assertEquals(null, prop.getString(false, ref))
assertEquals("aut", prop.getString(false, ref))
assertEquals("deu", prop.getString(false, ref))
assertEquals("che", prop.getString(false, ref))
assertEquals(0, numFails)
assertEquals(GHUtility.asSet(9, 111, 182), GHUtility.getNeighbors(g.createEdgeExplorer().setBaseNode(10)))
assertEquals(GHUtility.asSet(19, 21), GHUtility.getNeighbors(g.createEdgeExplorer().setBaseNode(20)))
assertEquals(GHUtility.asSet(478, 84, 83), GHUtility.getNeighbors(g.createEdgeExplorer().setBaseNode(480)))
assertEquals(GHUtility.asSet(2, 909, 571), GHUtility.getNeighbors(g.createEdgeExplorer().setBaseNode(10)))
assertEquals(GHUtility.asSet(444, 956, 740), GHUtility.getNeighbors(g.createEdgeExplorer().setBaseNode(441)))
assertEquals(GHUtility.asSet(911, 404, 122, 914), GHUtility.getNeighbors(g.createEdgeExplorer().setBaseNode(912)))
assertEquals(loops * queries.size() * requestFactories.size(), routeCount.get())
assertEquals(expected, getCurrentShortcuts())
assertEquals(expected, getCurrentShortcuts().size())
assertEquals(3, pg.getDegree(0))
assertEquals(2, pg.getDegree(4))
assertEquals("3-4 16.0,", res.toString())
assertEquals(536_870_911, largeEdgeID)
assertTrue(iter.next())
assertEquals(largeEdgeID, GHUtility.getEdgeFromEdgeKey(iter.getOrigEdgeKeyFirst()))
assertFalse(iter.next())
assertFalse(instance.isEnabled())
assertTrue(instance.isEnabled())
assertEquals(dijkstraPath.calcNodes(), chPath.calcNodes())
assertEquals(dijkstraPath.calcNodes(), chPath.calcNodes())
assertEquals(expected, given)
assertEquals(18, algo.findUpperBound(2, 100, Integer.MAX_VALUE))
assertEquals(20, algo.findUpperBound(2, 100, Integer.MAX_VALUE))
assertEquals(2, algo.getSettledNodes())
assertEquals(10, algo.findUpperBound(5, 100, Integer.MAX_VALUE))
assertEquals(1, algo.getSettledNodes())
assertEquals(10, algo.findUpperBound(5, 100, Integer.MAX_VALUE))
assertEquals(10, algo.findUpperBound(5, 100, Integer.MAX_VALUE))
assertEquals(10, algo.findUpperBound(5, 100, Integer.MAX_VALUE))
assertEquals(1, algo.getSettledNodes())
assertEquals(5, algo.findUpperBound(5, 8, Integer.MAX_VALUE))
assertEquals(10, algo.findUpperBound(5, 1, Integer.MAX_VALUE))
assertEquals(2, algo.getSettledNodes())
assertEquals(5, algo.findUpperBound(5, 5, Integer.MAX_VALUE))
assertEquals(5, algo.getSettledNodes())
assertEquals(10, algo.findUpperBound(5, 5, 2))
assertEquals(2, algo.getSettledNodes())
assertEquals(Double.POSITIVE_INFINITY, algo.findUpperBound(5, 5, 0))
assertEquals(0, algo.getSettledNodes())
assertEquals(10, algo.findUpperBound(5, 5, 2))
assertEquals(2, algo.getSettledNodes())
assertEquals(10, algo.findUpperBound(5, 5, 2))
assertEquals(10, algo.findUpperBound(5, 5, 2))
assertEquals(10, algo.findUpperBound(5, 5, 2))
assertEquals(2, algo.getSettledNodes())
assertTrue(Double.isInfinite(weight))
assertTrue(Double.isInfinite(weight))
assertEquals(IntArrayList.from(0, 1, 2, 3, 4, 5, 6), pathFwd.calcNodes())
assertEquals(IntArrayList.from(6, 5, 4, 3, 2, 1, 0), pathBwd.calcNodes())
assertEquals(IntArrayList.from(0, 3, 4, 3, 1), path.calcNodes())
assertEquals(5, chGraph.getBaseGraph().getEdges())
assertEquals(3, snap.getClosestNode())
assertEquals(0, snap.getClosestEdge().getEdge())
assertEquals(IntArrayList.from(0, 3, 1, 2), path.calcNodes())
assertEquals(3, snap.getClosestNode())
assertEquals(0, snap.getClosestEdge().getEdge())
assertEquals(IntArrayList.from(1, 3, 0), path.calcNodes())
assertEquals(3, snap.getClosestEdge().getEdge())
assertTrue(path.isFound())
assertEquals(IntArrayList.from(4, 3, 2, 1, 0, 1, 5, 6), path.calcNodes())
assertEquals(3, snap2.getClosestEdge().getEdge())
assertEquals(IntArrayList.from(4, 3, 2, 1, 7, 0, 7, 1, 5, 6), dijkstraPath.calcNodes())
assertEquals(IntArrayList.from(0, 2, 3, 4, 5), path.calcNodes())
assertEquals(2, chGraph.getShortcuts())
assertEquals(3, chEdge.getBaseNode())
assertEquals(4, chEdge.getAdjNode())
assertEquals(2, chEdge.getSkippedEdge1())
assertEquals(0, chEdge.getSkippedEdge2())
assertEquals(5, chEdge.getOrigEdgeKeyFirst())
assertEquals(0, chEdge.getOrigEdgeKeyLast())
assertSame(weighting, prepare.getCHConfig().getWeighting())
assertEquals(2, res.getShortcuts())
assertEquals(7, res.getShortcuts())
assertEquals(6, g.getEdges())
assertEquals(2, result.getShortcuts())
assertEquals(6 + 2, routingCHGraph.getEdges())
assertEquals(IntArrayList.from(4, 3, 5, 2), p.calcNodes())
assertEquals(19, oldCount)
assertEquals(oldCount, g.getEdges())
assertEquals(oldCount, GHUtility.count(g.getAllEdges()))
assertEquals(numShortcuts, result.getShortcuts())
assertEquals(oldCount, g.getEdges())
assertEquals(oldCount + numShortcuts, routingCHGraph.getEdges())
assertEquals(IntArrayList.from(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10), p.calcNodes())
assertEquals(oldCount, g.getEdges())
assertEquals(oldCount, routingCHGraph.getBaseGraph().getEdges())
assertEquals(oldCount + 23, routingCHGraph.getEdges())
assertEquals(IntArrayList.from(4, 5, 6, 7), p.calcNodes())
assertEquals(IntArrayList.from(7, 2, 1), getAdjs(outExplorer.setBaseNode(6)))
assertEquals(IntArrayList.from(8, 0, 3), getAdjs(inExplorer.setBaseNode(6)))
assertEquals(IntArrayList.from(6, 0), getAdjs(outExplorer.setBaseNode(4)))
assertEquals(IntArrayList.from(6, 1), getAdjs(inExplorer.setBaseNode(5)))
assertEquals(IntArrayList.from(8, 2), getAdjs(inExplorer.setBaseNode(7)))
assertEquals(IntArrayList.from(3), getAdjs(outExplorer.setBaseNode(8)))
assertEquals(IntArrayList.from(), getAdjs(inExplorer.setBaseNode(8)))
assertEquals(0, result.getShortcuts())
assertEquals(2, result.getShortcuts())
assertEquals((BitUtil.LITTLE.toBitString(edgeId)), BitUtil.LITTLE.toLastBitString(fromNode, 32) + BitUtil.LITTLE.toLastBitString(endNode, 32))
assertTrue(car1CHStore.getShortcuts() > 0 && resCar2.getCHStorage().getShortcuts() > 0)
assertNotEquals(car1CHStore.getShortcuts(), resCar2.getCHStorage().getShortcuts())
assertArrayEquals(new int[] { 4, 5, 8, 3, 2 }, calcNodes(graph, response.getAll().get(0)))
assertArrayEquals(new int[] { 4, 5, 8, 1, 2, 3 }, calcNodes(graph, response.getAll().get(0)))
assertArrayEquals(new int[] { 4, 5, 8, 1, 2, 3 }, calcNodes(graph, response.getAll().get(0)))
assertArrayEquals(new int[] { 4, 5, 6, 7, 7, 8, 3, 2 }, calcNodes(graph, response.getAll().get(0)))
assertEquals(1, response.getAll().size())
assertArrayEquals(new int[] { 5, 4, 3, 3, 8, 1, 2, 3 }, calcNodes(graph, response.getAll().get(0)))
assertArrayEquals(new int[] { 5, 4, 3, 8, 7, 7, 6, 5, 4, 3, 2 }, calcNodes(graph, response.getBest()))
assertArrayEquals(new int[] { 8, 3, 2 }, calcNodes(graph, response.getAll().get(0)))
assertArrayEquals(new int[] { 8, 3, 2 }, calcNodes(graph, response.getAll().get(0)))
assertArrayEquals(new int[] { 1, 5, 4, 3, 2 }, calcNodes(graph, response.getAll().get(0)))
assertArrayEquals(new int[] { 8, 3, 2 }, calcNodes(graph, response.getAll().get(0)))
assertArrayEquals(new int[] { 8, 3, 2 }, calcNodes(graph, response.getAll().get(0)))
assertArrayEquals(new int[] { 0, 1, 2, 3, 4 }, calcNodes(graph, response.getAll().get(0)))
assertTrue(parser.getAccess(way).canSkip())
assertTrue(parser.getAccess(way).isWay())
assertTrue(parser.getAccess(way).canSkip())
assertEquals(RoadAccess.DESTINATION, rule.getAccess(createReaderWay("track"), TransportationMode.CAR, RoadAccess.YES))
assertEquals(RoadAccess.YES, rule.getAccess(createReaderWay("primary"), TransportationMode.CAR, RoadAccess.YES))
assertEquals(RoadAccess.FORESTRY, rule.getAccess(createReaderWay("track"), TransportationMode.CAR, RoadAccess.YES))
assertEquals(RoadAccess.YES, rule.getAccess(createReaderWay("primary"), TransportationMode.CAR, RoadAccess.YES))
assertEquals(RoadAccess.DESTINATION, rule.getAccess(createReaderWay("living_street"), TransportationMode.CAR, RoadAccess.YES))
assertTrue(parser.getAccess(way).canSkip())
assertTrue(parser.getAccess(way).isWay())
assertTrue(parser.getAccess(way).canSkip())
assertTrue(parser.getAccess(way).isWay())
assertTrue(parser.getAccess(way).canSkip())
assertTrue(parser.getAccess(way).isWay())
assertTrue(parser.getAccess(way).canSkip())
assertTrue(parser.getAccess(way).isFerry())
assertTrue(parser.getAccess(way).canSkip())
assertTrue(parser.getAccess(way).canSkip())
assertTrue(parser.getAccess(way).canSkip())
assertTrue(parser.getAccess(way).canSkip())
assertTrue(parser.getAccess(way).canSkip())
assertTrue(parser.getAccess(way).canSkip())
assertTrue(parser.getAccess(way).canSkip())
assertTrue(parser.getAccess(way).canSkip())
assertTrue(parser.getAccess(way).isWay())
assertTrue(parser.getAccess(way).canSkip())
assertTrue(parser.getAccess(way).isWay())
assertTrue(motorcycleAccessEnc.getBool(true, edgeFlags))
assertTrue(parser.getAccess(way).isWay())
assertTrue(parser.getAccess(way).canSkip())
assertTrue(parser.getAccess(way).isWay())
assertTrue(parser.getAccess(way).isWay())
assertTrue(parser.getAccess(way).canSkip())
assertTrue(parser.getAccess(way).isWay())
assertTrue(parser.getAccess(way).canSkip())
assertTrue(parser.getAccess(way).isWay())
assertTrue(parser.getAccess(way).isWay())
assertTrue(parser.getAccess(way).isWay())
assertTrue(parser.getAccess(way).isWay())
assertTrue(parser.getAccess(way).isWay())
assertTrue(parser.getAccess(way).isWay())
assertTrue(parser.getAccess(way).isWay())
assertTrue(parser.getAccess(way).isWay())
assertTrue(parser.getAccess(way).isWay())
assertTrue(parser.getAccess(way).canSkip())
assertTrue(parser.getAccess(way).canSkip())
assertTrue(parser.getAccess(way).canSkip())
assertTrue(parser.getAccess(way).isWay())
assertTrue(parser.getAccess(way).canSkip())
assertTrue(parser.getAccess(way).isWay())
assertTrue(parser.getAccess(way).canSkip())
assertTrue(parser.getAccess(way).isWay())
assertTrue(parser.getAccess(way).isWay())
assertTrue(parser.getAccess(way).isWay())
assertTrue(parser.getAccess(way).isWay())
assertTrue(parser.getAccess(way).canSkip())
assertTrue(parser.getAccess(way).canSkip())
assertTrue(parser.getAccess(way).isWay())
assertTrue(parser.getAccess(way).canSkip())
assertTrue(parser.getAccess(way).isWay())
assertEquals(RouteNetwork.REGIONAL, enc.getEnum(false, edgeFlags))
assertTrue(parser.getAccess(way).isWay())
assertTrue(parser.getAccess(way).isWay())
assertTrue(parser.getAccess(way).isWay())
assertTrue(parser.getAccess(way).canSkip())
assertNotEquals(true, flags.isEmpty())
assertNotEquals(true, flags.isEmpty())
assertTrue(flags.isEmpty())
assertTrue(parser.getAccess(way).isWay())
assertTrue(parser.getAccess(way).canSkip())
assertTrue(parser.isBarrier(node))
assertTrue(parser.isBarrier(node))
assertTrue(parser.isBarrier(node))
assertTrue(parser.isBarrier(node))
assertTrue(parser.isBarrier(node))
assertTrue(parser.isBarrier(node))
assertTrue(parser.getAccess(way).isFerry())
assertTrue(parser.getAccess(way).canSkip())
assertTrue(parser.getAccess(way).isFerry())
assertTrue(parser.getAccess(way).isFerry())
assertTrue(parser.getAccess(way).isFerry())
assertTrue(parser.getAccess(way).isFerry())
assertTrue(parser.getAccess(way).canSkip())
assertTrue(parser.getAccess(way).canSkip())
assertTrue(parser.getAccess(way).canSkip())
assertTrue(bike.restrictedValues.contains("private"))
assertTrue(bike.isBlockFords())
assertTrue(bike.intendedValues.contains("private"))
assertFalse(findPathUsingDijkstra(2, 1).isFound())
assertFalse(response.hasErrors())
assertFalse(response.hasErrors())
assertFalse(response.hasErrors())
assertFalse(response.hasErrors())
assertFalse(response.hasErrors())
assertFalse(response.hasErrors())
assertFalse(response.hasErrors())
assertFalse(response.hasErrors())
assertFalse(response.hasErrors())
assertFalse(response.hasErrors())
assertFalse(motorcycleAccessEnc.getBool(false, edgeFlags))
assertFalse(parser.isBarrier(node))
assertFalse(parser.isBarrier(node))
assertFalse(parser.isBarrier(node))
assertFalse(parser.isBarrier(node))
assertFalse(parser.getAccess(way).isFerry())
assertFalse(parser.getAccess(way).isFerry())
assertFalse(bike.isBlockFords())
assertFalse(bike.intendedValues.contains("private"))
assertFalse(bike.restrictedValues.contains("private"))
assertTrue(filter.accept(GHUtility.createMockedEdgeIteratorState(1, intsRef)))
assertFalse(filter.accept(GHUtility.createMockedEdgeIteratorState(1, intsRef)))
assertTrue(filter.accept(GHUtility.createMockedEdgeIteratorState(1, intsRef)))
assertTrue(filter.accept(GHUtility.createMockedEdgeIteratorState(1, intsRef)))
assertFalse(filter.accept(GHUtility.createMockedEdgeIteratorState(1, intsRef)))
assertEquals(oldFlags, edge.getFlags())
assertTrue(parser.getAccessEnc().getBool(true, edgeFlags))
assertNotEquals(WayAccess.CAN_SKIP, parser.getAccess(way))
assertTrue(isGraphValid(graph, parser.getAccessEnc()))
assertTrue(edge.get(wheelchairAccessEnc))
assertTrue(edge.getReverse(wheelchairAccessEnc))
assertTrue(edge.get(carAccessEnc))
assertEquals(GHUtility.asSet(1, 2), GHUtility.getNeighbors(out.setBaseNode(0)))
assertEquals(GHUtility.asSet(0, 3), GHUtility.getNeighbors(out.setBaseNode(1)))
assertEquals(GHUtility.asSet(0), GHUtility.getNeighbors(out.setBaseNode(2)))
assertTrue(wheelchairParser.getAccess(way).isWay())
assertTrue(wheelchairParser.getAccess(way).isWay())
assertTrue(wheelchairParser.getAccess(way).canSkip())
assertTrue(wheelchairParser.getAccess(way).canSkip())
assertTrue(wheelchairParser.getAccess(way).isWay())
assertTrue(wheelchairParser.getAccess(way).isWay())
assertTrue(wheelchairParser.getAccess(way).isWay())
assertTrue(wheelchairParser.getAccess(way).canSkip())
assertTrue(wheelchairParser.getAccess(way).canSkip())
assertTrue(wheelchairParser.getAccess(way).canSkip())
assertTrue(wheelchairParser.getAccess(way).isWay())
assertTrue(wheelchairParser.getAccess(way).canSkip())
assertTrue(wheelchairParser.getAccess(way).isWay())
assertTrue(wheelchairParser.getAccess(way).isWay())
assertTrue(wheelchairParser.getAccess(way).canSkip())
assertTrue(wheelchairParser.getAccess(way).canSkip())
assertTrue(wheelchairParser.getAccess(way).isWay())
assertTrue(wheelchairParser.getAccess(way).canSkip())
assertTrue(wheelchairParser.getAccess(way).canSkip())
assertTrue(wheelchairParser.getAccess(way).isWay())
assertTrue(wheelchairParser.getAccess(way).canSkip())
assertTrue(wheelchairParser.getAccess(way).isFerry())
assertTrue(wheelchairParser.getAccess(way).canSkip())
assertTrue(wheelchairParser.getAccess(way).isFerry())
assertTrue(wheelchairParser.getAccess(way).isFerry())
assertTrue(wheelchairParser.getAccess(way).isFerry())
assertTrue(wheelchairParser.getAccess(way).isFerry())
assertTrue(wheelchairParser.getAccess(way).canSkip())
assertTrue(wheelchairParser.getAccess(way).canSkip())
assertTrue(wheelchairParser.getAccess(way).canSkip())
assertTrue(wheelchairParser.getAccess(way).isWay())
assertTrue(wheelchairParser.getAccess(way).canSkip())
assertTrue(wheelchairParser.getAccess(way).isWay())
assertTrue(wheelchairParser.getAccess(way).canSkip())
assertTrue(wheelchairParser.getAccess(way).canSkip())
assertTrue(wheelchairParser.getAccess(way).isWay())
assertTrue(wheelchairParser.getAccess(way).isWay())
assertTrue(wheelchairParser.getAccess(way).isWay())
assertTrue(wheelchairParser.getAccess(way).canSkip())
assertTrue(wheelchairParser.getAccess(way).isWay())
assertTrue(wheelchairParser.getAccess(way).canSkip())
assertTrue(wheelchairParser.getAccess(way).isWay())
assertTrue(wheelchairParser.getAccess(way).canSkip())
assertTrue(wheelchairParser.getAccess(way).isWay())
assertTrue(wheelchairParser.getAccess(way).canSkip())
assertTrue(wheelchairParser.getAccess(way).canSkip())
assertTrue(wheelchairParser.getAccess(way).isWay())
assertTrue(wheelchairParser.getAccess(way).isWay())
assertTrue(wheelchairParser.getAccess(way).isWay())
assertTrue(wheelchairParser.getAccess(way).canSkip())
assertTrue(wheelchairParser.getAccess(way).isWay())
assertTrue(wheelchairParser.getAccess(way).canSkip())
assertTrue(wheelchairParser.getAccess(way).isWay())
assertTrue(wheelchairParser.getAccess(way).canSkip())
assertTrue(wheelchairParser.getAccess(way).isWay())
assertTrue(flags.isEmpty())
assertEquals(PriorityCode.UNCHANGED.getValue(), wheelchairParser.handlePriority(way, null))
assertEquals(PriorityCode.AVOID.getValue(), wheelchairParser.handlePriority(way, null))
assertEquals(PriorityCode.AVOID.getValue(), wheelchairParser.handlePriority(way, null))
assertEquals(PriorityCode.SLIGHT_AVOID.getValue(), wheelchairParser.handlePriority(way, null))
assertEquals(PriorityCode.SLIGHT_AVOID.getValue(), wheelchairParser.handlePriority(way, null))
assertEquals(PriorityCode.PREFER.getValue(), wheelchairParser.handlePriority(way, null))
assertEquals(PriorityCode.UNCHANGED.getValue(), wheelchairParser.handlePriority(way, null))
assertEquals(PriorityCode.UNCHANGED.getValue(), wheelchairParser.handlePriority(way, null))
assertEquals(PriorityCode.SLIGHT_AVOID.getValue(), wheelchairParser.handlePriority(way, null))
assertEquals(PriorityCode.AVOID.getValue(), wheelchairParser.handlePriority(way, null))
assertEquals(PriorityCode.AVOID.getValue(), wheelchairParser.handlePriority(way, null))
assertEquals(PriorityCode.PREFER.getValue(), wheelchairParser.handlePriority(way, null))
assertEquals(PriorityCode.PREFER.getValue(), wheelchairParser.handlePriority(way, null))
assertEquals(PriorityCode.VERY_NICE.getValue(), wheelchairParser.handlePriority(way, null))
assertEquals(PriorityCode.PREFER.getValue(), wheelchairParser.handlePriority(way, null))
assertEquals(PriorityCode.AVOID.getValue(), wheelchairParser.handlePriority(way, null))
assertTrue(wheelchairParser.isBarrier(node))
assertTrue(wheelchairParser.isBarrier(node))
assertTrue(wheelchairParser.isBarrier(node))
assertTrue(wheelchairParser.isBarrier(node))
assertTrue(wheelchairParser.isBarrier(node))
assertTrue(wheelchairParser.isBarrier(node))
assertTrue(wheelchairParser.isBarrier(node))
assertTrue(wheelchairParser.isBarrier(node))
assertTrue(wheelchairParser.getAccess(way).isWay())
assertTrue(wheelchairParser.getAccess(way).canSkip())
assertTrue(wheelchairParser.getAccess(way).canSkip())
assertTrue(wheelchairParser.getAccess(way).canSkip())
assertTrue(wheelchairParser.getAccess(way).isWay())
assertTrue(wheelchairParser.getAccess(way).isWay())
assertTrue(wheelchairParser.getAccess(way).canSkip())
assertTrue(wheelchairParser.getAccess(way).isWay())
assertTrue(wheelchairParser.getAccess(way).canSkip())
assertTrue(wheelchairParser.getAccess(way).isWay())
assertTrue(wheelchairParser.getAccess(way).canSkip())
assertTrue(wheelchairParser.getAccess(way).isWay())
assertTrue(wheelchairParser.getAccess(way).canSkip())
assertTrue(edge01.get(wheelchairAccessEnc))
assertTrue(edge01.getReverse(wheelchairAccessEnc))
assertTrue(edge23.get(wheelchairAccessEnc))
assertTrue(edge23.getReverse(wheelchairAccessEnc))
assertEquals("Germany", countryIndex.query(52.5243700, 13.4105300).get(0).getProperties().get("name:en"))
assertEquals("France", countryIndex.query(48.864716, 2.349014).get(0).getProperties().get("name:en"))
assertEquals("Austria", countryIndex.query(48.204484, 16.107888).get(0).getProperties().get("name:en"))
assertEquals(new HashSet<>(Arrays.asList(ids)), resultIds)
assertEquals(ids.length, result.size())
assertEquals(Smoothness.MISSING, smoothnessEnc.getEnum(false, intsRef))
assertEquals(Smoothness.BAD, smoothnessEnc.getEnum(false, intsRef))
assertTrue(Smoothness.BAD.ordinal() < Smoothness.VERY_BAD.ordinal())
assertEquals(Surface.MISSING, surfaceEnc.getEnum(false, intsRef))
assertEquals(Surface.COBBLESTONE, surfaceEnc.getEnum(false, intsRef))
assertTrue(Surface.COBBLESTONE.ordinal() > Surface.ASPHALT.ordinal())
assertEquals(Surface.DIRT, surfaceEnc.getEnum(false, intsRef))
assertTrue(Double.isInfinite(tcs.get(turnCostEnc, 4, 3, 6)))
assertTrue(Double.isInfinite(tcs.get(turnCostEnc, 4, 3, 2)))
assertTrue(Double.isInfinite(tcs.get(turnCostEnc, 4, 3, 3)))
Assertions.assertEquals(4, lanesEnc.getInt(false, intsRef))
Assertions.assertEquals(1, lanesEnc.getInt(false, intsRef))
assertEquals(RoadClass.PRIMARY, rcEnc.getEnum(false, edgeFlags))
assertEquals(RoadClass.OTHER, rcEnc.getEnum(false, edgeFlags))
assertEquals(RoadClass.MOTORWAY, rcEnc.getEnum(false, edgeFlags))
assertEquals(RoadClass.CYCLEWAY, rcEnc.getEnum(false, edgeFlags))
assertEquals(RoadClass.OTHER, rcEnc.getEnum(false, edgeFlags))
assertEquals(RoadClass.OTHER, rcEnc.getEnum(false, edgeFlags))
assertEquals(RoadAccess.DESTINATION, roadAccessEnc.getEnum(false, edgeFlags))
assertEquals(RoadAccess.YES, roadAccessEnc.getEnum(false, edgeFlags))
assertEquals(RoadAccess.AGRICULTURAL, roadAccessEnc.getEnum(false, edgeFlags))
assertEquals(RoadAccess.AGRICULTURAL, roadAccessEnc.getEnum(false, edgeFlags))
assertEquals(HazmatWater.NO, hazWaterEnc.getEnum(false, intsRef))
assertEquals(HazmatWater.YES, hazWaterEnc.getEnum(false, intsRef))
assertEquals(HazmatWater.PERMISSIVE, hazWaterEnc.getEnum(false, intsRef))
assertEquals(HazmatWater.YES, hazWaterEnc.getEnum(false, intsRef))
assertTrue(Double.isNaN(OSMValueExtractor.stringToTons("weight limit 1.5t")))
assertTrue(Double.isNaN(OSMValueExtractor.stringToTons("")))
assertTrue(Double.isNaN(OSMValueExtractor.stringToMeter("height limit 1.5m")))
assertTrue(Double.isNaN(OSMValueExtractor.stringToMeter("")))
assertTrue(Double.isNaN(OSMValueExtractor.stringToMeter("default")))
assertTrue(Double.isNaN(OSMValueExtractor.stringToKmh(null)))
assertTrue(Double.isNaN(OSMValueExtractor.stringToKmh("0")))
assertTrue(Double.isNaN(OSMValueExtractor.stringToKmh("-20")))
assertEquals(TrackType.GRADE1, ttEnc.getEnum(false, intsRef))
assertEquals(TrackType.GRADE2, ttEnc.getEnum(false, intsRef))
assertEquals(TrackType.GRADE3, ttEnc.getEnum(false, intsRef))
assertEquals(TrackType.GRADE4, ttEnc.getEnum(false, intsRef))
assertEquals(TrackType.GRADE5, ttEnc.getEnum(false, intsRef))
assertEquals(TrackType.MISSING, ttEnc.getEnum(false, intsRef))
assertEquals(TrackType.MISSING, ttEnc.getEnum(false, intsRef))
assertEquals(HazmatTunnel.A, hazTunnelEnc.getEnum(false, intsRef))
assertEquals(HazmatTunnel.B, hazTunnelEnc.getEnum(false, intsRef))
assertEquals(HazmatTunnel.C, hazTunnelEnc.getEnum(false, intsRef))
assertEquals(HazmatTunnel.D, hazTunnelEnc.getEnum(false, intsRef))
assertEquals(HazmatTunnel.E, hazTunnelEnc.getEnum(false, intsRef))
assertEquals(HazmatTunnel.A, hazTunnelEnc.getEnum(false, intsRef))
assertEquals(HazmatTunnel.B, hazTunnelEnc.getEnum(false, intsRef))
assertEquals(HazmatTunnel.C, hazTunnelEnc.getEnum(false, intsRef))
assertEquals(HazmatTunnel.D, hazTunnelEnc.getEnum(false, intsRef))
assertEquals(HazmatTunnel.E, hazTunnelEnc.getEnum(false, intsRef))
assertEquals(HazmatTunnel.A, hazTunnelEnc.getEnum(false, intsRef))
assertEquals(HazmatTunnel.B, hazTunnelEnc.getEnum(false, intsRef))
assertEquals(HazmatTunnel.C, hazTunnelEnc.getEnum(false, intsRef))
assertEquals(HazmatTunnel.D, hazTunnelEnc.getEnum(false, intsRef))
assertEquals(HazmatTunnel.E, hazTunnelEnc.getEnum(false, intsRef))
assertEquals(HazmatTunnel.E, hazTunnelEnc.getEnum(false, intsRef))
assertEquals(HazmatTunnel.C, hazTunnelEnc.getEnum(false, intsRef))
assertEquals(HazmatTunnel.E, hazTunnelEnc.getEnum(false, intsRef))
assertEquals(HazmatTunnel.A, hazTunnelEnc.getEnum(false, intsRef))
assertEquals(HazmatTunnel.A, hazTunnelEnc.getEnum(false, intsRef))
assertEquals(Hazmat.NO, hazEnc.getEnum(false, intsRef))
assertEquals(Hazmat.YES, hazEnc.getEnum(false, intsRef))
assertEquals(Hazmat.YES, hazEnc.getEnum(false, intsRef))
assertEquals(Hazmat.YES, hazEnc.getEnum(false, intsRef))
assertEquals(Hazmat.YES, hazEnc.getEnum(false, intsRef))
assertEquals(Toll.MISSING, tollEnc.getEnum(false, intsRef))
assertEquals(Toll.HGV, tollEnc.getEnum(false, intsRef))
assertEquals(Toll.HGV, tollEnc.getEnum(false, intsRef))
assertEquals(Toll.HGV, tollEnc.getEnum(false, intsRef))
assertEquals(Toll.ALL, tollEnc.getEnum(false, intsRef))
assertEquals(Toll.ALL, tollEnc.getEnum(false, intsRef))
assertEquals(RoadEnvironment.FERRY, roadEnvironment)
assertFalse(parser.getAccessEnc().getBool(false, edgeFlags))
assertFalse(edge.getReverse(carAccessEnc))
assertFalse(flags.isEmpty())
assertFalse(wheelchairParser.isBarrier(node))
assertFalse(wheelchairParser.isBarrier(node))
assertFalse(wheelchairParser.isBarrier(node))
assertFalse(wheelchairParser.isBarrier(node))
assertFalse(wheelchairParser.isBarrier(node))
assertFalse(wheelchairParser.isBarrier(node))
assertFalse(wheelchairParser.isBarrier(node))
assertFalse(wheelchairParser.isBarrier(node))
assertFalse(edge45.get(wheelchairAccessEnc))
assertFalse(edge45.getReverse(wheelchairAccessEnc))
assertTrue(isGetOffBike(way))
assertTrue(isGetOffBike(way))
assertTrue(isGetOffBike(way))
assertFalse(isGetOffBike(way))
assertFalse(isGetOffBike(way))
assertTrue(isGetOffBike(way))
assertFalse(isGetOffBike(way))
assertFalse(isGetOffBike(way))
assertFalse(isGetOffBike(way))
assertFalse(isGetOffBike(way))
assertTrue(isGetOffBike(way))
assertTrue(isGetOffBike(way))
assertFalse(isGetOffBike(way))
assertFalse(isGetOffBike(way))
assertTrue(isGetOffBike(way))
assertTrue(isGetOffBike(way))
assertFalse(isGetOffBike(way))
assertFalse(isGetOffBike(way))
assertFalse(isGetOffBike(way))
assertFalse(isGetOffBike(way))
assertFalse(isGetOffBike(way))
assertTrue(isGetOffBike(way))
assertTrue(parser.getAccess(way).canSkip())
assertTrue(parser.getAccess(way).isWay())
assertTrue(parser.getAccess(way).isWay())
assertTrue(parser.getAverageSpeedEnc().getDecimal(false, flags) > 200)
assertEquals("[hgv, motor_vehicle, vehicle, access]", hgvParser.getRestrictions().toString())
assertTrue(hikeParser.getAccess(way).canSkip())
assertEquals(PriorityCode.UNCHANGED.getValue(), hikeParser.handlePriority(way, null))
assertEquals(PriorityCode.AVOID.getValue(), hikeParser.handlePriority(way, null))
assertEquals(PriorityCode.SLIGHT_AVOID.getValue(), hikeParser.handlePriority(way, null))
assertEquals(PriorityCode.SLIGHT_AVOID.getValue(), hikeParser.handlePriority(way, null))
assertEquals(PriorityCode.PREFER.getValue(), hikeParser.handlePriority(way, null))
assertEquals(PriorityCode.AVOID.getValue(), hikeParser.handlePriority(way, null))
assertEquals(PriorityCode.UNCHANGED.getValue(), hikeParser.handlePriority(way, null))
assertEquals(PriorityCode.SLIGHT_AVOID.getValue(), hikeParser.handlePriority(way, null))
assertEquals(PriorityCode.BAD.getValue(), hikeParser.handlePriority(way, null))
assertEquals(PriorityCode.BAD.getValue(), hikeParser.handlePriority(way, null))
assertEquals(PriorityCode.PREFER.getValue(), hikeParser.handlePriority(way, null))
assertTrue(edgeFilter.accept(edge))
assertTrue(edgeFilter.accept(edge))
assertTrue(edgeFilter.accept(edge))
assertTrue(edgeFilter.accept(edge))
assertTrue(edgeFilter.accept(edge))
assertTrue(edgeFilter.accept(edge))
assertTrue(edgeFilter.accept(edge))
assertTrue(createNameSimilarityEdgeFilter("Wentworth Street").accept(edge1))
assertTrue(createNameSimilarityEdgeFilter("Wentworth Street, Caringbah South").accept(createTestEdgeIterator("Wentworth Street")))
assertTrue(createNameSimilarityEdgeFilter("Zum Toffental, Altdorf bei Nürnnberg").accept(createTestEdgeIterator("Zum Toffental")))
assertTrue(edgeFilter.accept(createTestEdgeIterator("Rue Notre-Dame Ouest")))
assertTrue(edgeFilter.accept(createTestEdgeIterator("Rue Saint-Antoine O")))
assertTrue(edgeFilter.accept(createTestEdgeIterator("Rue de Bleury")))
assertTrue(createNameSimilarityEdgeFilter("Main Rd").accept(createTestEdgeIterator("Main Road")))
assertTrue(createNameSimilarityEdgeFilter("Main Road").accept(createTestEdgeIterator("Main Rd")))
assertTrue(createNameSimilarityEdgeFilter("Main Rd").accept(createTestEdgeIterator("Main Road, New York")))
assertTrue(createNameSimilarityEdgeFilter("Cape Point Rd").accept(createTestEdgeIterator("Cape Point")))
assertTrue(createNameSimilarityEdgeFilter("Cape Point Rd").accept(createTestEdgeIterator("Cape Point Road")))
assertTrue(createNameSimilarityEdgeFilter("Av. Juan Ramón Ramírez").accept(createTestEdgeIterator("Avenida Juan Ramón Ramírez")))
assertTrue(createNameSimilarityEdgeFilter("Augustine St").accept(edge))
assertTrue(createNameSimilarityEdgeFilter("Augustine Street").accept(edge))
assertTrue(createNameSimilarityEdgeFilter("Augustine St").accept(edge))
assertTrue(createNameSimilarityEdgeFilter("Augustine Street").accept(edge))
assertTrue(createNameSimilarityEdgeFilter("Ben-Gurion").accept(edge))
assertTrue(createNameSimilarityEdgeFilter("Ben Gurion").accept(edge))
assertTrue(createNameSimilarityEdgeFilter("Ben Gurion Strasse").accept(edge))
assertEquals("northderby", createNameSimilarityEdgeFilter("North Derby Lane").getNormalizedPointHint())
assertEquals("28north", createNameSimilarityEdgeFilter("I-28 N").getNormalizedPointHint())
assertEquals("28north", createNameSimilarityEdgeFilter(" I-28    N  ").getNormalizedPointHint())
assertEquals("south23rd", createNameSimilarityEdgeFilter("S 23rd St").getNormalizedPointHint())
assertEquals("66", createNameSimilarityEdgeFilter("Route 66").getNormalizedPointHint())
assertEquals("fayettecounty1", createNameSimilarityEdgeFilter("Fayette County Rd 1").getNormalizedPointHint())
assertEquals("112", createNameSimilarityEdgeFilter("A B C 1 12").getNormalizedPointHint())
assertTrue(createNameSimilarityEdgeFilter("North Derby Lane").accept(createTestEdgeIterator("N Derby Ln")))
assertTrue(createNameSimilarityEdgeFilter("N Derby Ln").accept(createTestEdgeIterator("North Derby Lane")))
assertTrue(createNameSimilarityEdgeFilter("George Street").accept(createTestEdgeIterator("George St")))
assertTrue(edgeFilter.accept(edge))
assertTrue(edgeFilter.accept(edge))
assertTrue(edgeFilter.accept(edge))
assertTrue(edgeFilter.accept(edge))
assertTrue(edgeFilter.accept(edge))
assertTrue(filter.accept(doubtfire))
assertTrue(filter.accept(doubtfire))
assertTrue(parser.getAccess(way).canSkip())
assertTrue(parser.getAccess(way).isWay())
assertTrue(parser.getAccess(way).canSkip())
assertTrue(parser.getAccess(way).isWay())
assertTrue(parser.getAccess(way).canSkip())
assertTrue(parser.getAccess(way).isWay())
assertTrue(parser.getAccess(way).canSkip())
assertTrue(parser.getAccess(way).canSkip())
assertTrue(parser.getAccess(way).canSkip())
assertTrue(parser.getAccess(way).isWay())
assertTrue(parser.getAccess(way).canSkip())
assertTrue(parser.getAccess(way).canSkip())
assertTrue(parser.getAccess(way).canSkip())
assertTrue(parser.getAccess(way).canSkip())
assertTrue(parser.getAccess(way).canSkip())
assertTrue(parser.getAccess(way).canSkip())
assertTrue(parser.getAccess(way).isWay())
assertTrue(parser.getAccess(way).isWay())
assertTrue(parser.getAccess(way).canSkip())
assertTrue(parser.getAccess(way).canSkip())
assertTrue(parser.getAccess(way).canSkip())
assertTrue(parser.getAccess(way).isWay())
assertTrue(parser.getAccess(way).canSkip())
assertTrue(parser.getAccess(way).canSkip())
assertTrue(parser.isBlockFords())
assertTrue(parser.getAccess(way).canSkip())
assertTrue(parser.isBarrier(node))
assertTrue(tmpParser.getAccess(way).isWay())
assertTrue(accessEnc.getBool(false, flags))
assertTrue(accessEnc.getBool(true, flags))
assertTrue(accessEnc.getBool(false, flags))
assertTrue(accessEnc.getBool(false, flags))
assertTrue(accessEnc.getBool(true, flags))
assertTrue(accessEnc.getBool(true, flags))
assertTrue(accessEnc.getBool(false, flags))
assertTrue(accessEnc.getBool(false, flags))
assertTrue(accessEnc.getBool(true, flags))
assertTrue(accessEnc.getBool(false, edgeFlags))
assertTrue(accessEnc.getBool(true, edgeFlags))
assertTrue(accessEnc.getBool(false, edgeFlags))
assertTrue(accessEnc.getBool(true, edgeFlags))
assertTrue(accessEnc.getBool(true, edgeFlags))
assertTrue(roundaboutEnc.getBool(false, edgeFlags))
assertTrue(accessEnc.getBool(false, edgeFlags))
assertTrue(accessEnc.getBool(true, edgeFlags))
assertTrue(accessEnc.getBool(false, edgeFlags))
assertTrue(accessEnc.getBool(true, edgeFlags))
assertTrue(accessEnc.getBool(false, edgeFlags))
assertTrue(accessEnc.getBool(true, edgeFlags))
assertTrue(parser.getAccess(way).isWay())
assertTrue(parser.getAccess(way).canSkip())
assertTrue(parser.getAccess(way).isWay())
assertTrue(parser.getAccess(way).isWay())
assertTrue(parser.getAccess(way).canSkip())
assertTrue(parser.getAccess(way).isWay())
assertTrue(parser.getAccess(way).isFerry())
assertEquals(60, parser.getAverageSpeedEnc().getDecimal(false, edgeFlags))
assertTrue(parser.getAccess(way).isFerry())
assertEquals(5, parser.getAverageSpeedEnc().getDecimal(false, edgeFlags))
assertTrue(parser.getAccess(way).isFerry())
assertEquals(5, parser.getAverageSpeedEnc().getDecimal(false, edgeFlags))
assertTrue(parser.getAccess(way).isFerry())
assertTrue(parser.getAccess(way).canSkip())
assertTrue(parser.getAccess(way).canSkip())
assertTrue(parser.getAccess(way).isFerry())
assertTrue(parser.getAccess(way).canSkip())
assertTrue(parser.getAccess(way).isFerry())
assertTrue(parser.isBarrier(node))
assertTrue(parser.isBarrier(node))
assertEquals(WayAccess.CAN_SKIP, parser.getAccess(way))
assertNotEquals(WayAccess.CAN_SKIP, bikeParser.getAccess(way))
assertTrue(bikeAccessEnc.getBool(true, edgeFlags))
assertTrue(bikeAccessEnc.getBool(false, edgeFlags))
assertTrue(parser.getAccess(way).isWay())
assertTrue(parser.getAccess(way).isWay())
assertTrue(parser.getAccess(way).isWay())
assertTrue(parser.getAccess(way).canSkip())
assertTrue(parser.getAccess(way).isWay())
assertTrue(parser.getAccess(way).isWay())
assertTrue(parser.getAccess(way).canSkip())
assertTrue(parser.getAccess(way).isWay())
assertTrue(parser.getAccessEnc().getBool(false, flags))
assertTrue(parser.getAccessEnc().getBool(true, flags))
assertTrue(parser.getAccessEnc().getBool(false, flags))
assertTrue(parser.getAccessEnc().getBool(false, flags))
assertTrue(parser.getAccessEnc().getBool(false, flags))
assertTrue(parser.getAccessEnc().getBool(true, flags))
assertTrue(parser.getAccessEnc().getBool(true, flags))
assertTrue(parser.getAccessEnc().getBool(true, flags))
assertTrue(parser.getAccessEnc().getBool(false, flags))
assertTrue(parser.getAccessEnc().getBool(false, flags))
assertTrue(parser.getAccessEnc().getBool(true, flags))
assertTrue(parser.getAccessEnc().getBool(false, flags))
assertTrue(parser.getAccessEnc().getBool(false, flags))
assertTrue(parser.getAccessEnc().getBool(true, flags))
assertTrue(parser.getAccessEnc().getBool(false, flags))
assertTrue(parser.getAccessEnc().getBool(true, flags))
assertTrue(parser.getAccessEnc().getBool(false, flags))
assertTrue(parser.getAccessEnc().getBool(true, flags))
assertTrue(parser.getAccessEnc().getBool(false, flags))
assertTrue(parser.getAccessEnc().getBool(true, flags))
assertTrue(parser.getAccessEnc().getBool(false, flags))
assertTrue(parser.getAccessEnc().getBool(true, flags))
assertTrue(parser.getAccessEnc().getBool(false, flags))
assertTrue(parser.getAccessEnc().getBool(true, flags))
assertTrue(parser.getAccessEnc().getBool(false, flags))
assertTrue(parser.getAccessEnc().getBool(true, flags))
assertTrue(parser.getAccess(way).isWay())
assertTrue(parser.getAccess(way).canSkip())
assertTrue(parser.getAccess(way).isWay())
assertTrue(parser.getAccess(way).canSkip())
assertEquals(RouteNetwork.INTERNATIONAL, encodingManager.getEnumEncodedValue(BikeNetwork.KEY, RouteNetwork.class).getEnum(false, flags))
assertEquals(RouteNetwork.MISSING, encodingManager.getEnumEncodedValue(BikeNetwork.KEY, RouteNetwork.class).getEnum(false, flags))
assertEquals(RouteNetwork.MISSING, encodingManager.getEnumEncodedValue(BikeNetwork.KEY, RouteNetwork.class).getEnum(false, flags))
assertTrue(parser.isBarrier(node))
assertEquals(expected, calc.getSpeed(way))
assertTrue(FootTagParser.MEAN_SPEED > footAvgSpeedEnc.getDecimal(false, flags))
assertTrue(edge.get(footAccessEnc))
assertTrue(edge.getReverse(footAccessEnc))
assertTrue(edge.get(carAccessEnc))
assertEquals(GHUtility.asSet(1, 2), GHUtility.getNeighbors(out.setBaseNode(0)))
assertEquals(GHUtility.asSet(0, 3), GHUtility.getNeighbors(out.setBaseNode(1)))
assertEquals(GHUtility.asSet(0), GHUtility.getNeighbors(out.setBaseNode(2)))
assertTrue(footParser.getAccess(way).isWay())
assertTrue(footParser.getAccess(way).isWay())
assertTrue(footParser.getAccess(way).canSkip())
assertTrue(footParser.getAccess(way).canSkip())
assertTrue(footParser.getAccess(way).isWay())
assertTrue(footParser.getAccess(way).isWay())
assertTrue(footParser.getAccess(way).isWay())
assertTrue(footParser.getAccess(way).canSkip())
assertTrue(footParser.getAccess(way).isWay())
assertTrue(footParser.getAccess(way).isWay())
assertTrue(footParser.getAccess(way).canSkip())
assertTrue(footParser.getAccess(way).isWay())
assertTrue(footParser.getAccess(way).canSkip())
assertTrue(footParser.getAccess(way).isWay())
assertTrue(footParser.getAccess(way).isWay())
assertTrue(footParser.getAccess(way).canSkip())
assertTrue(footParser.getAccess(way).canSkip())
assertTrue(footParser.getAccess(way).isWay())
assertTrue(footParser.getAccess(way).canSkip())
assertTrue(footParser.getAccess(way).canSkip())
assertTrue(footParser.getAccess(way).isWay())
assertTrue(footParser.getAccess(way).isFerry())
assertTrue(footParser.getAccess(way).canSkip())
assertTrue(footParser.getAccess(way).isFerry())
assertTrue(footParser.getAccess(way).isFerry())
assertTrue(footParser.getAccess(way).isFerry())
assertTrue(footParser.getAccess(way).isFerry())
assertTrue(footParser.getAccess(way).canSkip())
assertTrue(footParser.getAccess(way).canSkip())
assertTrue(footParser.getAccess(way).canSkip())
assertTrue(footParser.getAccess(way).isWay())
assertTrue(flags.isEmpty())
assertEquals(15, footParser.getAverageSpeedEnc().getDecimal(false, edgeFlags))
assertEquals(0, flags.ints[0])
assertEquals(PriorityCode.UNCHANGED.getValue(), footParser.handlePriority(way, null))
assertEquals(PriorityCode.AVOID.getValue(), footParser.handlePriority(way, null))
assertEquals(PriorityCode.SLIGHT_AVOID.getValue(), footParser.handlePriority(way, null))
assertEquals(PriorityCode.SLIGHT_AVOID.getValue(), footParser.handlePriority(way, null))
assertEquals(PriorityCode.PREFER.getValue(), footParser.handlePriority(way, null))
assertEquals(PriorityCode.UNCHANGED.getValue(), footParser.handlePriority(way, null))
assertEquals(PriorityCode.UNCHANGED.getValue(), footParser.handlePriority(way, null))
assertEquals(PriorityCode.SLIGHT_AVOID.getValue(), footParser.handlePriority(way, null))
assertEquals(PriorityCode.AVOID.getValue(), footParser.handlePriority(way, null))
assertEquals(PriorityCode.AVOID.getValue(), footParser.handlePriority(way, null))
assertEquals(PriorityCode.PREFER.getValue(), footParser.handlePriority(way, null))
assertTrue(footParser.isBarrier(node))
assertTrue(footParser.isBarrier(node))
assertTrue(footParser.isBarrier(node))
assertTrue(footParser.isBarrier(node))
assertTrue(footParser.isBarrier(node))
assertTrue(blockFordsParser.isBarrier(node))
assertTrue(footParser.isBarrier(node))
assertTrue(footParser.isBarrier(node))
assertTrue(footParser.isBarrier(node))
assertEquals(16, edge.get(speedEnc))
assertEquals(16, speedEnc.getNextStorableValue(15))
assertEquals(1, tour.getNumberOfGeneratedPoints())
assertTrue(0 <= tour.getHeadingForIteration(0))
assertTrue(360 >= tour.getHeadingForIteration(0))
assertTrue(29 <= tour.getDistanceForIteration(0))
assertTrue(37 >= tour.getDistanceForIteration(0))
assertTrue(new CarTagParser(manager, new PMap("block_fords=true")).isBlockFords())
assertTrue(new BikeTagParser(manager, new PMap("block_fords=true")).isBlockFords())
assertTrue(new FootTagParser(manager, new PMap("block_fords=true")).isBlockFords())
assertEquals(Arrays.asList("bike", "hike"), em.getVehicles())
assertEquals(RouteNetwork.LOCAL, bikeNetworkEnc.getEnum(false, edgeFlags))
assertTrue(bike1PriorityEnc.getDecimal(false, edgeFlags) > bike2PriorityEnc.getDecimal(false, edgeFlags))
assertTrue(bikePriorityEnc.getDecimal(false, edgeFlags) > mtbPriorityEnc.getDecimal(false, edgeFlags))
assertTrue(roundaboutEnc.getBool(false, edgeFlags))
assertTrue(roundaboutEnc.getBool(false, edgeFlags))
assertTrue(parser.getAccess(way).isWay())
assertTrue(parser.getAccess(way).isWay())
assertTrue(parser.getAccess(way).isWay())
assertTrue(parser.getAccess(way).canSkip())
assertTrue(parser.isBarrier(node))
assertEquals(IntArrayList.from(5, 2, 3, 4, 7, 6, 3, 1), p.calcNodes())
assertEquals(IntArrayList.from(5, 6, 7), p.calcNodes())
assertEquals(IntArrayList.from(7, 6, 3, 2, 5), p.calcNodes())
assertEquals(IntArrayList.from(0, 4, 1, 1, 4, 3), p.calcNodes())
assertEquals(IntArrayList.from(7, 6, 3, 6, 5), p.calcNodes())
assertEquals(IntArrayList.from(7, 6, 3, 2, 5), p.calcNodes())
assertEquals(IntArrayList.from(7, 6, 3, 2, 5), p.calcNodes())
assertEquals(IntArrayList.from(5, 2, 3, 1), p.calcNodes())
assertEquals(IntArrayList.from(5, 6, 3, 1), p.calcNodes())
assertEquals(IntArrayList.from(5, 6, 7, 4, 3, 1), p.calcNodes())
assertEquals(IntArrayList.from(3, 2, 2, 4), p.calcNodes())
assertEquals(IntArrayList.from(0, 1, 4, 4, 5), p.calcNodes())
assertEquals(4, size())
assertEquals(IntArrayList.from(12, 5, 4, 8), elements)
assertEquals(0, StringUtils.getLevenshteinDistance("", ""))
assertEquals(1, StringUtils.getLevenshteinDistance("", "a"))
assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", ""))
assertEquals(1, StringUtils.getLevenshteinDistance("frog", "fog"))
assertEquals(3, StringUtils.getLevenshteinDistance("fly", "ant"))
assertEquals(7, StringUtils.getLevenshteinDistance("elephant", "hippo"))
assertEquals(7, StringUtils.getLevenshteinDistance("hippo", "elephant"))
assertEquals(8, StringUtils.getLevenshteinDistance("hippo", "zzzzzzzz"))
assertEquals(8, StringUtils.getLevenshteinDistance("zzzzzzzz", "hippo"))
assertEquals(1, StringUtils.getLevenshteinDistance("hello", "hallo"))
assertEquals(3, result.size())
assertArrayEquals(new int[] { 1, 7 }, isochroneEdges.stream().mapToInt(l -> l.node).sorted().toArray())
assertEquals(4, result.size())
assertEquals(9, result.size())
assertEquals(countDirectedEdges(graph) + 1, result.size())
assertEquals(countDirectedEdges(graph) + 1 - 1, result.size())
assertEquals(countDirectedEdges(graph) + 1, result.size())
assertEquals(countDirectedEdges(graph) + 1, result.size())
assertEquals(6, result.size())
assertEquals(5, quadEdgeSubdivision.getVertices(false).size())
assertEquals("MULTIPOLYGON (((1 0, 0.5 -0.5, 1 -2, 1.5 -0.5, 1 0)))", geometry.toString())
assertEquals("MULTIPOLYGON (((0.5 -0.5, 1 -2, 1.5 -0.5, 1 0, 0.5 -0.5)))", geometry.toString())
assertEquals("MULTIPOLYGON (((0.5 -0.5, 1 -2, 1.5 -0.5, 1 0, 0.5 -0.5)))", geometry.toString())
assertEquals(ee2, ee1.oNext())
assertEquals(ee3, ee2.oNext())
assertEquals(ee1, ee3.oNext())
assertEquals(ee2, ee1.oNext())
assertEquals(ee3, ee2.oNext())
assertEquals(ee4, ee3.oNext())
assertEquals(ee1, ee4.oNext())
assertEquals(e2, e1.lNext())
assertEquals(e3, e2.lNext())
assertEquals(e1, e3.lNext())
assertEquals("01100110101000111100000110010100", BitUtil.LITTLE.toLastBitString(val, 32))
assertEquals(11, spatialKeyAlgo.encodeLatLon(0.125, -0.2))
assertEquals(9, spatialKeyAlgo.encodeLatLon(0.124, -0.2))
assertEquals(11, spatialKeyAlgo.encodeLatLon(0.2, -0.35))
assertEquals(10, spatialKeyAlgo.encodeLatLon(0.2, -0.351))
assertEquals(0b0000, spatialKeyAlgo.encode(0, 0))
assertEquals(0b0001, spatialKeyAlgo.encode(1, 0))
assertEquals(0b0100, spatialKeyAlgo.encode(2, 0))
assertEquals(0b0101, spatialKeyAlgo.encode(3, 0))
assertEquals(0b0010, spatialKeyAlgo.encode(0, 1))
assertEquals(0b1000, spatialKeyAlgo.encode(0, 2))
assertEquals(0b1010, spatialKeyAlgo.encode(0, 3))
assertEquals(0b1100, spatialKeyAlgo.encode(2, 2))
assertEquals(spatialKeyAlgo.encode(2, 0), spatialKeyAlgo.right(spatialKeyAlgo.right(spatialKeyAlgo.encode(0, 0))))
assertEquals(0b11111111111111111111L, spatialKeyAlgo.encode(1023, 1023))
assertNull(index.get(aPointer, "", false))
assertEquals("same name", index.get(aPointer, "a", false))
assertEquals("same name", index.get(aPointer, "b", false))
assertNull(index.get(aPointer, "c", false))
assertEquals("a name", index.get(aPointer, "a", false))
assertNull(index.get(aPointer, "", false))
assertEquals("a name", index.get(aPointer, "a", false))
assertEquals("b name", index.get(aPointer, "b", false))
assertNull(index.get(aPointer, "", false))
assertEquals(list, deserializedList)
assertEquals("FORWARD", index.get(aPointer, "keyA", false))
assertNull(index.get(aPointer, "keyA", true))
assertNull(index.get(aPointer, "keyB", false))
assertEquals("BACKWARD", index.get(aPointer, "keyB", true))
assertEquals("BOTH", index.get(aPointer, "keyC", false))
assertEquals("BOTH", index.get(aPointer, "keyC", true))
assertEquals(1, index.add(createList("", "")))
assertNull(index.get(0, "", false))
assertEquals(5, index.add(createList("else", "else")))
assertEquals("b name 9999", index.get(aPointer, "b", false))
assertEquals("c name 9999", index.get(aPointer, "c", false))
assertEquals("a name 567", index.get(tmpPointer, "a", false))
assertEquals("b name 567", index.get(tmpPointer, "b", false))
assertEquals("c name 567", index.get(tmpPointer, "c", false))
assertEquals(254, str.getBytes(Helper.UTF_CS).length)
assertEquals(127, ((String) index.get(result, "", false)).length())
assertArrayEquals(copy, bytes)
assertTrue(e.getMessage().contains("bytes.length cannot be > 255"))
assertEquals(1 + 36, after4Inserts)
assertEquals(4f, index.get(floatres, "floatres", false))
assertEquals(4L, index.get(longres, "longres", false))
assertEquals(4d, index.get(doubleres, "doubleres", false))
assertEquals(4, index.get(intres, "intres", false))
assertEquals(1 + 1 + 32, afterMapInsert)
assertEquals(4, resMap.get(0).value)
assertEquals(4L, resMap.get(1).value)
assertEquals(4d, resMap.get(2).value)
assertEquals(4f, resMap.get(3).value)
assertTrue(index.loadExisting())
assertEquals("test", index.get(pointer, "", false))
assertEquals(2, index.getKeys().size())
assertEquals("[, c, a, b]", index.getKeys().toString())
assertTrue(index.loadExisting())
assertEquals("[, c, a, b]", index.getKeys().toString())
assertEquals("test value", index.get(pointerA, "c", false))
assertNull(index.get(pointerA, "b", false))
assertNull(index.get(pointerB, "", false))
assertEquals("value", index.get(pointerB, "a", false))
assertEquals("another value", index.get(pointerB, "b", false))
assertEquals("[a=value (true|true), b=another value (true|true)]", index.getAll(pointerB).toString())
assertEquals("test value", index.get(pointerA, "", false))
assertNull(index.get(pointerA, "a", false))
assertEquals("value", index.get(pointerB, "a", false))
assertNull(index.get(pointerB, "", false))
assertEquals(pointerA, pointerB)
assertEquals(pointerA, pointerB)
assertEquals(250, s.getBytes(UTF_CS).length)
assertTrue(storedPointer < 0)
assertEquals(pointer + 100, Helper.toUnsignedLong(storedPointer))
assertEquals(1, instance.peekKey())
assertEquals(2, instance.peekKey())
assertEquals(2, instance.pollKey())
assertEquals(2, instance.getSize())
assertEquals(0, instance.peekKey())
assertEquals(0, instance.pollKey())
assertEquals(0, instance.pollKey())
assertEquals(2, instance.getSize())
assertEquals(34302, instance.pollKey())
assertEquals(2, instance.getSize())
assertEquals(1, instance.getSize())
assertTrue(copyBS.contains(30))
assertTrue(copyBS.contains(70))
assertTrue(copyBS.contains(100))
assertTrue(copyBS.contains(0))
assertEquals("{1, 12}", bs.toString())
assertEquals(7, bs.next(0))
assertEquals(7, bs.next(7))
assertEquals(90, bs.next(8))
assertEquals(-1, bs.next(91))
assertTrue(bs.contains(7))
assertTrue(bs.contains(8))
assertTrue(bs.contains(1))
assertTrue(bs.contains(12))
assertEquals(0, bs.getCardinality())
assertTrue(bs.contains(1))
assertTrue(bs.contains(12))
assertTrue(ex.getMessage().contains("Illegal key -1"))
assertEquals(21, instance.get(key))
assertEquals(-1, instance.get(404))
assertEquals(1, instance.height())
assertEquals(2, instance.height())
assertEquals(2, instance.height())
assertEquals(3, instance.height())
assertEquals(3, instance.height())
assertEquals(10, instance.getSize())
assertEquals(0, instance.getMemoryUsage())
assertEquals(3, instance.getSize())
assertEquals(1, instance.height())
assertEquals(5, instance.get(2))
assertEquals(6, instance.get(3))
assertEquals(12, instance.getSize())
assertEquals(3, instance.height())
assertEquals(12, instance.get(6))
assertEquals(instance.getNoNumberValue(), result)
assertEquals(10, result)
assertEquals(10, result)
assertEquals(9, result)
assertEquals(0, size())
assertTrue(isEmpty())
assertEquals(3, size())
assertTrue(isEmpty())
assertEquals(2, size())
assertTrue(isEmpty())
assertEquals(2, size())
assertEquals(1, peekId())
assertEquals(2.1f, peekVal())
assertEquals(1, poll())
assertEquals(4, poll())
assertTrue(isEmpty())
assertEquals(1, peekId())
assertEquals(3, size())
assertEquals(2, size())
assertTrue(isEmpty())
assertEquals(IntArrayList.from(5, 7, 3, 9, 8), polled)
assertEquals(3, peekId())
assertEquals(5, peekId())
assertEquals(9, peekId())
assertEquals(IntArrayList.from(9, 5, 3), polled)
assertTrue(pushCount > 0)
assertEquals(2, poll())
assertTrue(contains(1))
assertEquals(1, poll())
assertEquals(2, size())
assertTrue(instance.isEmpty())
assertEquals(10, instance.peekValue())
assertEquals(1, instance.getSize())
assertEquals(2, instance.peekValue())
assertEquals(1, instance.pollKey())
assertEquals(0, instance.pollKey())
assertEquals(0, instance.getSize())
assertTrue(instance.isEmpty())
assertEquals(1, instance.getSize())
assertEquals(10, instance.peekValue())
assertEquals(0, instance.peekKey())
assertEquals(2, instance.peekValue())
assertEquals(1, instance.getSize())
assertEquals(2, instance.peekValue())
assertEquals(2, instance.getSize())
assertEquals(0, instance.peekValue())
assertEquals(3, instance.getSize())
assertTrue(instance.isEmpty())
assertEquals(10, instance.peekValue())
assertEquals(2, instance.getSize())
assertEquals(11, instance.peekValue())
assertEquals(2, instance.getSize())
assertEquals("[1, 12]", bs.toString())
assertEquals(50, instance.getMinLatForTile(52.5))
assertEquals(10, instance.getMinLatForTile(29.9))
assertEquals(-70, instance.getMinLatForTile(-59.9))
assertEquals(-60, instance.getMinLonForTile(-59.9))
assertEquals(0, instance.getMinLonForTile(0.9))
assertTrue(instance.getDownloadURL(42.940339, 11.953125).contains("E000/30N000E_20101117_gmted_mea075.tif"))
assertTrue(instance.getDownloadURL(38.548165, -77.167969).contains("W090/30N090W_20101117_gmted_mea075.tif"))
assertTrue(instance.getDownloadURL(74.116047, -169.277344).contains("W180/70N180W_20101117_gmted_mea075.tif"))
assertTrue(instance.getDownloadURL(-61.015725, -156.621094).contains("W180/70S180W_20101117_gmted_mea075.tif"))
assertTrue(instance.getDownloadURL(74.590108, 166.640625).contains("E150/70N150E_20101117_gmted_mea075.tif"))
assertTrue(instance.getDownloadURL(-61.015725, 162.949219).contains("E150/70S150E_20101117_gmted_mea075.tif"))
assertEquals("30n000e_20101117_gmted_mea075", instance.getFileName(42.940339, 11.953125))
assertEquals("30n090w_20101117_gmted_mea075", instance.getFileName(38.548165, -77.167969))
assertEquals("70n180w_20101117_gmted_mea075", instance.getFileName(74.116047, -169.277344))
assertEquals("70s180w_20101117_gmted_mea075", instance.getFileName(-61.015725, -156.621094))
assertEquals("70n150e_20101117_gmted_mea075", instance.getFileName(74.590108, 166.640625))
assertEquals("70s150e_20101117_gmted_mea075", instance.getFileName(-61.015725, 162.949219))
assertTrue(file.exists())
assertEquals(1048676, file.length())
assertEquals("50n000e_20101117_gmted_mea075", instance.getFileName(69.999999, 19.493))
assertEquals("70n000e_20101117_gmted_mea075", instance.getFileName(70, 19.493))
assertEquals("50n000e_20101117_gmted_mea075", instance.getFileName(69.999999, 19.236))
assertEquals("70n000e_20101117_gmted_mea075", instance.getFileName(70, 19.236))
assertEquals("50n000e_20101117_gmted_mea075", instance.getFileName(53, 29.999999))
assertEquals("50n030e_20101117_gmted_mea075", instance.getFileName(53, 30.000001))
assertEquals("(0.0,0.0,0.0), (1.4,0.0,0.0)", round(out).toString())
assertEquals("(0.0,0.0,0.0), (0.4,0.0,10.0), (0.8,0.0,0.0)", round(out).toString())
assertEquals("(0.0,0.0,0.0), (0.4,0.0,10.0), (0.8,0.0,0.0)", round(out).toString())
assertEquals("(0.0,0.0,0.0), (0.25,0.0,10.0), (0.5,0.0,10.0), (0.75,0.0,0.0)", round(out).toString())
assertEquals("(0.0,-178.5,0.0), (0.0,-179.5,10.0), (0.0,179.5,10.0), (0.0,178.5,0.0)", round(out).toString())
assertEquals("(88.5,-90.0,0.0), (89.5,-90.0,10.0), (89.5,90.0,10.0), (88.5,90.0,0.0)", round(out).toString())
assertEquals(GHIntHashSet.from(1, 2, 3, 6, 8), outerNodeIds)
assertEquals(GHIntHashSet.from(7), innerNodeIds)
assertEquals(6, edge17PointList.size())
assertEquals(52, instance.getMinLatForTile(52.5))
assertEquals(29, instance.getMinLatForTile(29.9))
assertEquals(-60, instance.getMinLatForTile(-59.9))
assertEquals(-60, instance.getMinLonForTile(-59.9))
assertEquals(0, instance.getMinLonForTile(0.9))
assertEquals("North/North_30_60/N42E011.hgt", instance.getDownloadURL(42.940339, 11.953125))
assertEquals("North/North_30_60/N38W078.hgt", instance.getDownloadURL(38.548165, -77.167969))
assertEquals("North/North_0_29/N14W005.hgt", instance.getDownloadURL(14.116047, -4.277344))
assertEquals("South/S52W058.hgt", instance.getDownloadURL(-51.015725, -57.621094))
assertEquals("North/North_0_29/N24E120.hgt", instance.getDownloadURL(24.590108, 120.640625))
assertEquals("South/S42W063.hgt", instance.getDownloadURL(-41.015725, -62.949219))
assertEquals("n42e011", instance.getFileName(42.940339, 11.953125))
assertEquals("n38w078", instance.getFileName(38.548165, -77.167969))
assertEquals("n14w005", instance.getFileName(14.116047, -4.277344))
assertEquals("s52w058", instance.getFileName(-51.015725, -57.621094))
assertEquals("n24e120", instance.getFileName(24.590108, 120.640625))
assertEquals("s42w063", instance.getFileName(-41.015725, -62.949219))
assertEquals("n42e011", instance.getFileName(42.999999, 11.48))
assertEquals("n43e011", instance.getFileName(43.000001, 11.48))
assertEquals("n42e011", instance.getFileName(42.1, 11.999999))
assertEquals("n42e012", instance.getFileName(42.1, 12.000001))
assertEquals(50, instance.down(52.5))
assertEquals(0, instance.down(0.1))
assertEquals(0, instance.down(0.01))
assertEquals(-5, instance.down(-0.01))
assertEquals(-5, instance.down(-2))
assertEquals(-10, instance.down(-5.1))
assertEquals(50, instance.down(50))
assertEquals(45, instance.down(49))
assertEquals("srtm_36_02", instance.getFileName(52, -0.1))
assertEquals("srtm_35_02", instance.getFileName(50, -10))
assertEquals("srtm_36_23", instance.getFileName(-52, -0.1))
assertEquals("srtm_35_22", instance.getFileName(-50, -10))
assertEquals("srtm_39_03", instance.getFileName(49.9, 11.5))
assertEquals("srtm_34_08", instance.getFileName(20, -11))
assertEquals("srtm_34_08", instance.getFileName(20, -14))
assertEquals("srtm_34_08", instance.getFileName(20, -15))
assertEquals("srtm_37_02", instance.getFileName(52.1943832, 0.1363176))
assertTrue(file.exists())
assertEquals(1048676, file.length())
assertEquals("srtm_39_04", instance.getFileName(44.999999, 11.5))
assertEquals("srtm_39_03", instance.getFileName(45.000001, 11.5))
assertEquals("srtm_38_04", instance.getFileName(44.94, 9.999999))
assertEquals("srtm_39_04", instance.getFileName(44.94, 10.000001))
assertEquals("Eurasia/N49E011", instance.getFileName(49, 11))
assertEquals("Eurasia/N52W002", instance.getFileName(52.268157, -1.230469))
assertEquals("Africa/S06E034", instance.getFileName(-5.965754, 34.804687))
assertEquals("Australia/S29E131", instance.getFileName(-28.304381, 131.484375))
assertEquals("South_America/S09W045", instance.getFileName(-9, -45))
assertEquals("South_America/S10W046", instance.getFileName(-9.1, -45.1))
assertEquals("South_America/S10W045", instance.getFileName(-9.6, -45))
assertEquals("South_America/S28W071", instance.getFileName(-28, -71))
assertEquals("South_America/S29W072", instance.getFileName(-28.88316, -71.070557))
assertEquals("Eurasia/N42E011", instance.getFileName(42.999999, 11.48))
assertEquals("Eurasia/N43E011", instance.getFileName(43.000001, 11.48))
assertEquals("Eurasia/N42E011", instance.getFileName(42.1, 11.999999))
assertEquals("Eurasia/N42E012", instance.getFileName(42.1, 12.000001))
assertEquals("North_America/N55W061", instance.getFileName(55.055, -60.541))
assertEquals(3, pl1.size())
assertEquals(5, pl2.size())
assertEquals(3, pl1.size())
assertEquals(3, pl1.size())
assertEquals(5, pl2.size())
assertEquals(3, pl2.size())
assertEquals(GHIntHashSet.from(), outerNodeIds)
assertEquals(GHIntHashSet.from(0, 1, 2), innerNodeIds)
assertEquals(GHIntHashSet.from(2), outerNodeIds)
assertEquals(GHIntHashSet.from(0, 1), innerNodeIds)
assertEquals(GHIntHashSet.from(1, 3), outerNodeIds)
assertEquals(GHIntHashSet.from(2), innerNodeIds)
assertEquals(GHIntHashSet.from(1, 3, 6), outerNodeIds)
assertEquals(GHIntHashSet.from(2, 5), innerNodeIds)
assertEquals(GHIntHashSet.from(1, 3, 6, 8), outerNodeIds)
assertEquals(GHIntHashSet.from(2, 7), innerNodeIds)
assertEquals("N42/N42E011.hgt.gz", instance.getDownloadURL(42.940339, 11.953125))
assertEquals("N38/N38W078.hgt.gz", instance.getDownloadURL(38.548165, -77.167969))
assertEquals("N14/N14W005.hgt.gz", instance.getDownloadURL(14.116047, -4.277344))
assertEquals("S52/S52W058.hgt.gz", instance.getDownloadURL(-51.015725, -57.621094))
assertEquals("N24/N24E120.hgt.gz", instance.getDownloadURL(24.590108, 120.640625))
assertEquals("S42/S42W063.hgt.gz", instance.getDownloadURL(-41.015725, -62.949219))
assertEquals("n42e011", instance.getFileName(42.940339, 11.953125))
assertEquals("n38w078", instance.getFileName(38.548165, -77.167969))
assertEquals("n14w005", instance.getFileName(14.116047, -4.277344))
assertEquals("s52w058", instance.getFileName(-51.015725, -57.621094))
assertEquals("n24e120", instance.getFileName(24.590108, 120.640625))
assertEquals("s42w063", instance.getFileName(-41.015725, -62.949219))
assertEquals(3, rsp.getBest().getPoints().size())
assertTrue(hopper.load())
assertEquals(3, rsp.getBest().getPoints().size())
assertTrue(gh.getCHGraphs().isEmpty())
assertEquals(3, rsp.getBest().getPoints().size())
assertTrue(gh.load())
assertEquals(3, rsp.getBest().getPoints().size())
assertTrue(gh.getCHGraphs().isEmpty())
assertEquals(57, indexNodeList.size())
assertEquals(3, rsp.getBest().getPoints().size())
assertEquals(3, rsp.getBest().getPoints().size())
assertEquals(3, rsp.getBest().getPoints().size())
assertEquals(Helper.createPointList(51.249215, 9.431716, 52.0, 9.0, 51.2, 9.4), rsp.getBest().getPoints())
assertEquals(3, rsp.getBest().getPoints().size())
assertEquals(3, rsp.getPoints().size())
assertEquals(new GHPoint(51.24921503475044, 9.431716451757769), rsp.getPoints().get(0))
assertEquals(new GHPoint(52.0, 9.0), rsp.getPoints().get(1))
assertEquals(new GHPoint(51.199999850988384, 9.39999970197677), rsp.getPoints().get(2))
assertEquals(5, instance.getBaseGraph().getNodes())
assertEquals(8, instance.getBaseGraph().getEdges())
assertEquals(2, rsp.getPoints().size())
assertEquals(2, rsp.getPoints().size())
assertEquals(2, rsp.getPoints().size())
assertEquals(3, rsp.getPoints().size())
assertEquals(5, instance.getBaseGraph().getNodes())
assertEquals(5, instance.getBaseGraph().getNodes())
assertEquals("foot_access,foot_average_speed,foot_priority,car_access,car_average_speed,foot_subnetwork,car_subnetwork,roundabout,road_class,road_class_link,road_environment,max_speed,road_access,foot_network", instance.getEncodingManager().getEncodedValues().stream().map(EncodedValue::getName).collect(Collectors.joining(",")))
assertEquals(5, instance.getBaseGraph().getNodes())
assertEquals(5, instance.getBaseGraph().getNodes())
assertEquals("foot_access,foot_average_speed,foot_priority,car_access,car_average_speed,foot_subnetwork,car_subnetwork,roundabout,road_class,road_class_link,road_environment,max_speed,road_access,foot_network", instance.getEncodingManager().getEncodedValues().stream().map(EncodedValue::getName).collect(Collectors.joining(",")))
assertEquals("GraphHopperLocation is not specified. Call setGraphHopperLocation or init before", ex.getMessage())
assertEquals("GraphHopperLocation is not specified. Call setGraphHopperLocation or init before", ex.getMessage())
assertEquals("Couldn't load from existing folder: " + ghLoc + " but also cannot use file for DataReader as it wasn't specified!", ex.getMessage())
assertEquals("Couldn't load from existing folder: " + ghLoc + " but also cannot use file for DataReader as it wasn't specified!", ex.getMessage())
assertEquals(2, instance.getBaseGraph().getNodes())
assertEquals(2, instance.getBaseGraph().getAllEdges().length())
assertEquals(Helper.createPointList(11.1, 50, 10, 51, 11.194015, 51.995013), rsp.getPoints())
assertEquals(4, rsp.getPoints().size())
assertEquals(5, rsp.getInstructions().size())
assertEquals(Instruction.REACHED_VIA, rsp.getInstructions().get(1).getSign())
assertEquals(2, hopper.getCHGraphs().size())
assertTrue(hopper.load())
assertEquals("LM preparation of car already exists in storage and doesn't match configuration", ex.getMessage())
assertEquals("CH preparation of car already exists in storage and doesn't match configuration", ex.getMessage())
assertTrue(dateRangeParser.checkCondition("2019 Oct 8-2019 Dec 12").isCheckPassed())
assertEquals("yearless:true, dayOnly:false, reverse:false, from:1970-03-01T00:00:00Z, to:1970-10-31T23:59:59Z", instance.toString())
assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 10)))
assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 12)))
assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 14)))
assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 10)))
assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 12)))
assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 14)))
assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.JULY, 10)))
assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 12)))
assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.MARCH, 1)))
assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.SEPTEMBER, 30)))
assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 14)))
assertTrue(dateRange.isInRange(getCalendar(2015, Calendar.MARCH, 10)))
assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.JANUARY, 9)))
assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 9)))
assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 15)))
assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.SEPTEMBER, 15)))
assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.SEPTEMBER, 1)))
assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.DECEMBER, 24)))
assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.JANUARY, 24)))
assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.MARCH, 31)))
assertTrue(dateRange.isInRange(getCalendar(2016, Calendar.AUGUST, 10)))
assertTrue(dateRange.isInRange(getCalendar(2016, Calendar.JANUARY, 1)))
assertTrue(dateRange.isInRange(getCalendar(2016, Calendar.JANUARY, 20)))
assertTrue(dateRange.isInRange(getCalendar(2016, Calendar.JANUARY, 31)))
assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.SEPTEMBER, 1)))
assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.SEPTEMBER, 1)))
assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.SEPTEMBER, 30)))
assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.SEPTEMBER, 1)))
assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.SEPTEMBER, 30)))
assertTrue(dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 26)))
assertTrue(dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 27)))
assertTrue(dateRange.dayOnly)
assertTrue(dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 21)))
assertTrue(dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 25)))
assertTrue(dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 28)))
assertTrue(dateRange.dayOnly)
assertTrue(dateRange.reverse)
assertTrue(dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 26)))
assertTrue(dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 27)))
assertEquals(expected.get(Calendar.YEAR), actual.get(Calendar.YEAR))
assertEquals(expected.get(Calendar.MONTH), actual.get(Calendar.MONTH))
assertEquals(expected.get(Calendar.DAY_OF_MONTH), actual.get(Calendar.DAY_OF_MONTH))
assertTrue(createParser(getCalendar(2015, Calendar.SEPTEMBER, 30)).checkCondition(str))
assertTrue(createParser(getCalendar(2015, Calendar.DECEMBER, 2)).checkCondition("no @ (01.11. - 31.03.)"))
assertTrue(createParser(getCalendar(2015, Calendar.DECEMBER, 2)).checkCondition("no @ (01.11 - 31.03)"))
assertTrue(ConditionalParser.createNumberParser("weight", 11).checkCondition("weight > 10").isCheckPassed())
assertTrue(instance.checkCondition("no @weight>10"))
assertTrue(instance.checkCondition("no @ weight < 10"))
assertTrue(instance.checkCondition("no @ weight <= 10"))
assertTrue(instance.checkCondition("no @ weight<=10"))
assertTrue(instance.checkCondition("no @ height > 2"))
assertTrue(instance.checkCondition("no @ height > 2t"))
assertFalse(edgeFilter.accept(edge))
assertFalse(edgeFilter.accept(edge))
assertFalse(edgeFilter.accept(edge))
assertFalse(edgeFilter.accept(edge))
assertFalse(edgeFilter.accept(edge))
assertFalse(edgeFilter.accept(edge))
assertFalse(createNameSimilarityEdgeFilter("Wentworth Street").accept(edge2))
assertFalse(edgeFilter.accept(createTestEdgeIterator("Rue Dupré")))
assertFalse(edgeFilter.accept(createTestEdgeIterator("Rue Saint-Jacques")))
assertFalse(edgeFilter.accept(createTestEdgeIterator("Rue Balmoral")))
assertFalse(createNameSimilarityEdgeFilter("Potsdamer Str.").accept(edge))
assertFalse(createNameSimilarityEdgeFilter("North Derby Lane").accept(createTestEdgeIterator("I-29 N")))
assertFalse(createNameSimilarityEdgeFilter("I-29 N").accept(createTestEdgeIterator("North Derby Lane")))
assertFalse(edgeFilter.accept(edge))
assertFalse(filter.accept(golden))
assertFalse(filter.accept(denison))
assertFalse(filter.accept(golden))
assertFalse(filter.accept(denison))
assertFalse(tmpParser.isBarrier(node))
assertFalse(accessEnc.getBool(true, flags))
assertFalse(accessEnc.getBool(false, flags))
assertFalse(accessEnc.getBool(true, flags))
assertFalse(accessEnc.getBool(true, edgeFlags))
assertFalse(accessEnc.getBool(false, edgeFlags))
assertFalse(accessEnc.getBool(true, edgeFlags))
assertFalse(accessEnc.getBool(false, edgeFlags))
assertFalse(accessEnc.getBool(true, edgeFlags))
assertFalse(roundaboutEnc.getBool(false, edgeFlags))
assertFalse(roundaboutEnc.getBool(false, edgeFlags))
assertFalse(parser.isBarrier(node))
assertFalse(parser.isBarrier(node))
assertFalse(parser.isBarrier(node))
assertFalse(parser.isBarrier(node))
assertFalse(parser.isBarrier(node))
assertFalse(parser.isBarrier(node))
assertFalse(accessEnc.getBool(true, edgeFlags))
assertFalse(accessEnc.getBool(false, edgeFlags))
assertFalse(parser.getAccessEnc().getBool(true, flags))
assertFalse(parser.getAccessEnc().getBool(true, flags))
assertFalse(parser.getAccessEnc().getBool(false, flags))
assertFalse(parser.getAccessEnc().getBool(false, flags))
assertFalse(parser.getAccessEnc().getBool(true, flags))
assertFalse(parser.getAccessEnc().getBool(true, flags))
assertFalse(parser.isBarrier(node))
assertFalse(parser.isBarrier(node))
assertFalse(edge.getReverse(carAccessEnc))
assertFalse(flags.isEmpty())
assertFalse(flags.isEmpty())
assertFalse(flags.isEmpty())
assertFalse(footParser.isBarrier(node))
assertFalse(footParser.isBarrier(node))
assertFalse(footParser.isBarrier(node))
assertFalse(footParser.isBarrier(node))
assertFalse(footParser.isBarrier(node))
assertFalse(footParser.isBarrier(node))
assertFalse(blockFordsParser.isBarrier(node))
assertFalse(footParser.isBarrier(node))
assertFalse(footParser.isBarrier(node))
assertFalse(footParser.isBarrier(node))
assertFalse(footParser.isBarrier(node))
assertFalse(footParser.isBarrier(node))
assertFalse(new CarTagParser(manager, new PMap()).isBlockFords())
assertFalse(new BikeTagParser(manager, new PMap()).isBlockFords())
assertFalse(new FootTagParser(manager, new PMap()).isBlockFords())
assertFalse(new CarTagParser(manager, new PMap("block_fords=false")).isBlockFords())
assertFalse(new BikeTagParser(manager, new PMap("block_fords=false")).isBlockFords())
assertFalse(new FootTagParser(manager, new PMap("block_fords=false")).isBlockFords())
assertFalse(parser.isBarrier(node))
assertFalse(parser.isBarrier(node))
assertFalse(copyBS.contains(20))
assertFalse(copyBS.contains(40))
assertFalse(copyBS.contains(0))
assertFalse(copyBS.contains(91))
assertFalse(copyBS.contains(90))
assertFalse(copyBS.contains(1))
assertFalse(bs.contains(6))
assertFalse(bs.contains(2))
assertFalse(bs.contains(1))
assertFalse(bs.contains(2))
assertFalse(bs.contains(12))
assertFalse(bs.contains(2))
assertFalse(isEmpty())
assertFalse(contains(3))
assertFalse(contains(1))
assertFalse(contains(0))
assertFalse(contains(1))
assertFalse(contains(2))
assertFalse(rsp.hasErrors())
assertFalse(rsp.hasErrors())
assertFalse(rsp.hasErrors())
assertFalse(rsp.hasErrors())
assertFalse(rsp.hasErrors())
assertFalse(rsp.hasErrors())
assertFalse(rsp.hasErrors())
assertFalse(rsp.hasErrors())
assertFalse(rsp.hasErrors())
assertFalse(grsp.hasErrors())
assertFalse(grsp.hasErrors())
assertFalse(grsp.hasErrors())
assertFalse(instance.load())
assertFalse(new File(ghLoc).exists())
assertFalse(grsp.hasErrors())
assertFalse(dateRangeParser.checkCondition("2014 Oct 8-2014 Dec 12").isCheckPassed())
assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 9)))
assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 15)))
assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 9)))
assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 15)))
assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.JUNE, 9)))
assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.SEPTEMBER, 14)))
assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.FEBRUARY, 25)))
assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.NOVEMBER, 1)))
assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 13)))
assertFalse(dateRange.isInRange(getCalendar(2015, Calendar.MARCH, 11)))
assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 10)))
assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 12)))
assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 14)))
assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 31)))
assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.APRIL, 1)))
assertFalse(dateRange.isInRange(getCalendar(2016, Calendar.AUGUST, 9)))
assertFalse(dateRange.isInRange(getCalendar(2016, Calendar.FEBRUARY, 1)))
assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 31)))
assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.SEPTEMBER, 30)))
assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.OCTOBER, 1)))
assertFalse(dateRange.isInRange(getCalendar(2015, Calendar.SEPTEMBER, 1)))
assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 31)))
assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.OCTOBER, 1)))
assertFalse(dateRange.isInRange(getCalendar(2015, Calendar.SEPTEMBER, 1)))
assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 31)))
assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.OCTOBER, 1)))
assertFalse(dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 25)))
assertFalse(dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 27)))
assertFalse(dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 26)))
assertFalse(dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 28)))
assertFalse(dateRange.reverse)
assertFalse(dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 20)))
assertFalse(dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 26)))
assertFalse(dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 25)))
assertFalse(dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 28)))
assertFalse(createParser(getCalendar(2015, Calendar.AUGUST, 31)).checkCondition(str))
assertFalse(createParser(getCalendar(2015, Calendar.JANUARY, 12)).checkCondition("yes @ (2015 Sep 1-2015 Sep 30)"))
assertFalse(ConditionalParser.createNumberParser("weight", 10).checkCondition("weight > 10").isCheckPassed())
assertFalse(ConditionalParser.createNumberParser("weight", 9).checkCondition("weight > 10").isCheckPassed())
assertFalse(ConditionalParser.createNumberParser("xy", 9).checkCondition("weight > 10").isValid())
assertFalse(instance.checkCondition("no @weight>10"))
assertFalse(instance.checkCondition("no @weight>10"))
assertFalse(instance.checkCondition("no @ weight < 10"))
assertFalse(instance.checkCondition("no @ weight < 10"))
assertFalse(instance.checkCondition("no @ weight <= 10"))
assertFalse(instance.checkCondition("no @ weight <= 10"))
assertFalse(instance.checkCondition("no @ weight<=10"))
assertFalse(instance.checkCondition("no @ weight<=10"))
assertFalse(instance.checkCondition("no @ height > 2"))
assertFalse(instance.checkCondition("no @ height > 2"))
assertFalse(instance.checkCondition("no @ height > 2t"))
assertFalse(instance.checkCondition("no @ height > 2t"))
assertFalse(acceptor.isPermittedWayConditionallyRestricted(way))
assertFalse(acceptor.isPermittedWayConditionallyRestricted(way))
assertTrue(acceptor.isPermittedWayConditionallyRestricted(way))
assertTrue(acceptor.isRestrictedWayConditionallyPermitted(way))
assertTrue(acceptor.isPermittedWayConditionallyRestricted(way))
assertTrue(acceptor.isPermittedWayConditionallyRestricted(way))
assertTrue(acceptor.isRestrictedWayConditionallyPermitted(way))
assertTrue(osmTurnRelation.isVehicleTypeConcernedByTurnRestriction(vehicleTypes))
assertTrue(osmTurnRelation.isVehicleTypeConcernedByTurnRestriction(vehicleTypes))
assertFalse(osmTurnRelation.isVehicleTypeConcernedByTurnRestriction(vehicleTypes))
assertFalse(osmTurnRelation.isVehicleTypeConcernedByTurnRestriction(vehicleTypes))
assertFalse(osmTurnRelation.isVehicleTypeConcernedByTurnRestriction(vehicleTypes))
assertTrue(osmTurnRelation.isVehicleTypeConcernedByTurnRestriction(vehicleTypes))
assertEquals(10 * 60, OSMReaderUtility.parseDuration("00:10"))
assertEquals(35 * 60, OSMReaderUtility.parseDuration("35"))
assertEquals(70 * 60, OSMReaderUtility.parseDuration("01:10"))
assertEquals(70 * 60 + 2, OSMReaderUtility.parseDuration("01:10:02"))
assertEquals(0, OSMReaderUtility.parseDuration(null))
assertEquals(60 * 20 * 60, OSMReaderUtility.parseDuration("20:00"))
assertEquals(20 * 60, OSMReaderUtility.parseDuration("0:20:00"))
assertEquals((60 * 2 + 20) * 60 + 2, OSMReaderUtility.parseDuration("02:20:02"))
assertEquals(31 + 31, OSMReaderUtility.parseDuration("P2M") / (24 * 60 * 60))
assertEquals(2 * 60, OSMReaderUtility.parseDuration("PT2M"))
assertEquals((5 * 60 + 12) * 60 + 36, OSMReaderUtility.parseDuration("PT5H12M36S"))
assertEquals("Cannot parse duration tag value: " + value, e.getMessage())
assertNotNull(properties.get("datareader.import.date"))
assertNotEquals("", properties.get("datareader.import.date"))
assertEquals("2013-01-02T01:10:14Z", properties.get("datareader.data.date"))
assertEquals(4, graph.getNodes())
assertEquals(GHUtility.asSet(n20), GHUtility.getNeighbors(carOutExplorer.setBaseNode(n10)))
assertEquals(3, GHUtility.count(carOutExplorer.setBaseNode(n20)))
assertEquals(GHUtility.asSet(n20), GHUtility.getNeighbors(carOutExplorer.setBaseNode(n30)))
assertTrue(iter.next())
assertEquals("street 123, B 122", iter.getName())
assertEquals(n50, iter.getAdjNode())
assertTrue(iter.get(carAccessEnc))
assertTrue(iter.getReverse(carAccessEnc))
assertTrue(iter.next())
assertEquals("route 666", iter.getName())
assertEquals(n30, iter.getAdjNode())
assertTrue(iter.next())
assertEquals("route 666", iter.getName())
assertEquals(n10, iter.getAdjNode())
assertTrue(iter.get(carAccessEnc))
assertTrue(iter.getReverse(carAccessEnc))
assertTrue(iter.next())
assertEquals("route 666", iter.getName())
assertEquals(n20, iter.getAdjNode())
assertEquals("2014-01-02T01:10:14Z", properties.get("datareader.data.date"))
assertEquals(1, GHUtility.count(carOutExplorer.setBaseNode(n10)))
assertEquals(2, GHUtility.count(carOutExplorer.setBaseNode(n20)))
assertEquals(0, GHUtility.count(carOutExplorer.setBaseNode(n30)))
assertTrue(iter.next())
assertTrue(iter.next())
assertEquals(n30, iter.getAdjNode())
assertTrue(iter.next())
assertEquals(n23, iter.getAdjNode())
assertTrue(iter.get(carAccessEnc))
assertTrue(iter.next())
assertEquals(n22, iter.getAdjNode())
assertTrue(iter.getReverse(carAccessEnc))
assertTrue(iter.next())
assertTrue(iter.getReverse(carAccessEnc))
assertTrue(iter.next())
assertEquals(n30, iter.getAdjNode())
assertTrue(iter.get(carAccessEnc))
assertTrue(iter.next())
assertEquals(n10, iter.getAdjNode())
assertTrue(iter.getReverse(carAccessEnc))
assertEquals(GHUtility.asSet(n40), GHUtility.getNeighbors(carAllExplorer.setBaseNode(n50)))
assertEquals(2, graph.getNodes())
assertEquals(1, graph.getEdges())
assertEquals(GHUtility.asSet(n30), GHUtility.getNeighbors(carOutExplorer.setBaseNode(n10)))
assertEquals(2, graph.getNodes())
assertEquals(1, graph.getEdges())
assertEquals(0, iter.getBaseNode())
assertEquals(1, iter.getAdjNode())
assertEquals(3, graph.getNodes())
assertEquals(3, graph.getEdges())
assertEquals(GHUtility.asSet(n20, n40), GHUtility.getNeighbors(carAllExplorer.setBaseNode(n10)))
assertEquals(GHUtility.asSet(), GHUtility.getNeighbors(carOutExplorer.setBaseNode(n30)))
assertEquals(GHUtility.asSet(n10, n30, n40), GHUtility.getNeighbors(carAllExplorer.setBaseNode(n20)))
assertEquals(GHUtility.asSet(n30, n40), GHUtility.getNeighbors(carOutExplorer.setBaseNode(n20)))
assertEquals(GHUtility.asSet(n20, n50), GHUtility.getNeighbors(footOutExplorer.setBaseNode(n10)))
assertEquals(GHUtility.asSet(n20, n50), GHUtility.getNeighbors(footOutExplorer.setBaseNode(n30)))
assertEquals(GHUtility.asSet(n10, n30), GHUtility.getNeighbors(footOutExplorer.setBaseNode(n20)))
assertTrue(exception.getCause().getMessage().contains("Invalid OSM NODE Id: -10;"))
assertEquals(7, graph.getNodes())
assertEquals(7, graph.getEdges())
assertNotEquals(n20, new20)
assertEquals(n20, findID(hopper.getLocationIndex(), 52, 9.4))
assertEquals(GHUtility.asSet(n20, n30), GHUtility.getNeighbors(carOutExplorer.setBaseNode(n10)))
assertEquals(GHUtility.asSet(new20, n10, n50), GHUtility.getNeighbors(carOutExplorer.setBaseNode(n30)))
assertTrue(iter.next())
assertEquals(n10, iter.getAdjNode())
assertTrue(iter.next())
assertEquals(n30, iter.getAdjNode())
assertEquals(7 + 6, graph.getEdges())
assertEquals(5, loops)
assertEquals(5, graph.getEdges())
assertEquals(2, blocked)
assertEquals(3, notBlocked)
assertEquals(4, graph.getNodes())
assertEquals(4, iter.length())
assertEquals(4, GHUtility.count(graph.createEdgeExplorer().setBaseNode(nodeB)))
assertEquals(7, graph.getNodes())
assertEquals(7, graph.getEdges())
assertEquals(GHUtility.asSet(n50), GHUtility.getNeighbors(carOutExplorer.setBaseNode(n60)))
assertTrue(iter.next())
assertEquals(n50, iter.getAdjNode())
assertTrue(GHUtility.getNeighbors(carOutExplorer.setBaseNode(n30)).contains(n50))
assertEquals(GHUtility.asSet(n30, n80, n60), GHUtility.getNeighbors(carOutExplorer.setBaseNode(n50)))
assertEquals(before, flags)
assertNotEquals(before, flags)
assertEquals(15, graph.getNodes())
assertNotNull(tcStorage)
assertTrue(tcStorage.get(carTCEnc, edge2_3, n3, edge3_8) > 0)
assertTrue(tcStorage.get(carTCEnc, edge4_3, n3, edge3_8) > 0)
assertTrue(tcStorage.get(carTCEnc, edge2_3, n3, edge3_8) > 0)
assertTrue(tcStorage.get(carTCEnc, edge2_3, n3, edge3_4) == 0)
assertTrue(tcStorage.get(carTCEnc, edge2_3, n3, edge3_2) == 0)
assertTrue(tcStorage.get(carTCEnc, edge2_3, n3, edge3_4) == 0)
assertTrue(tcStorage.get(carTCEnc, edge4_3, n3, edge3_2) == 0)
assertTrue(tcStorage.get(carTCEnc, edge8_3, n3, edge3_2) == 0)
assertTrue(tcStorage.get(carTCEnc, edge1_6, n1, edge1_6) > 0)
assertTrue(tcStorage.get(carTCEnc, edge1_6, n6, edge1_6) == 0)
assertTrue(tcStorage.get(carTCEnc, edge4_5, n5, edge5_6) == 0)
assertTrue(tcStorage.get(carTCEnc, edge4_5, n5, edge5_1) > 0)
assertTrue(tcStorage.get(bikeTCEnc, edge4_5, n5, edge5_6) == 0)
assertTrue(tcStorage.get(carTCEnc, edge11_14, n11, edge10_11) == 0)
assertTrue(tcStorage.get(bikeTCEnc, edge11_14, n11, edge10_11) == 0)
assertTrue(tcStorage.get(carTCEnc, edge10_11, n11, edge11_14) == 0)
assertTrue(tcStorage.get(bikeTCEnc, edge10_11, n11, edge11_14) > 0)
assertEquals(2, osmRel.size())
assertEquals(1, osmRel.get(0).getOsmIdFrom())
assertEquals(4, osmRel.get(0).getOsmIdTo())
assertEquals(OSMTurnRelation.Type.NOT, osmRel.get(0).getRestriction())
assertEquals(2, osmRel.get(1).getOsmIdFrom())
assertEquals(4, osmRel.get(1).getOsmIdTo())
assertEquals(OSMTurnRelation.Type.NOT, osmRel.get(1).getRestriction())
assertEquals(5, graph.getNodes())
assertEquals(Helper.createPointList3D(49.5001, 11.501, 426, 49.5002, 11.5015, 441, 49.5011, 11.502, 410.0), edge.fetchWayGeometry(FetchMode.ALL))
assertEquals(Helper.createPointList3D(49.501, 11.5001, 383.0, 49.5001, 11.501, 426.0), edge.fetchWayGeometry(FetchMode.ALL))
assertTrue(Double.isInfinite(tcStorage.get(carTCEnc, edge1, 0, edge2)))
assertTrue(Double.isInfinite(tcStorage.get(truckTCEnc, edge1, 0, edge2)))
assertTrue(Double.isInfinite(tcStorage.get(bikeTCEnc, edge1, 0, edge2)))
assertTrue(Double.isInfinite(tcStorage.get(truckTCEnc, edge1, 0, edge2)))
assertEquals(8, graph.getNodes())
assertNotNull(tcStorage)
assertTrue(tcStorage.get(carTCEnc, edge2_3, n3, edge3_8) > 0)
assertTrue(tcStorage.get(carTCEnc, edge4_3, n3, edge3_8) > 0)
assertTrue(tcStorage.get(carTCEnc, edge1_6, n1, edge1_6) > 0)
assertTrue(tcStorage.get(carTCEnc, edge4_5, n5, edge5_1) > 0)
assertEquals(5, graph.getNodes())
assertNotNull(tcStorage)
assertTrue(tcStorage.get(carTCEnc, edge1_2, n2, edge2_3) > 0)
assertTrue(Double.isInfinite(tcStorage.get(carTCEnc, edge3_4, n4, edge4_5)))
assertTrue(Double.isInfinite(tcStorage.get(carTCEnc, edge5_1, n1, edge1_2)))
assertTrue(iter.next())
assertEquals("straße 123, B 122", iter.getName())
assertTrue(iter.next())
assertTrue(iter.next())
assertEquals("διαδρομή 666", iter.getName())
assertEquals("2014-01-02T00:10:14Z", properties.get("datareader.data.date"))
assertTrue(snap.isValid())
assertTrue(snap.isValid())
assertEquals(3, list.size())
assertEquals(RoadClass.MOTORWAY.toString(), list.get(0).getValue())
assertEquals("berlin", edgeBerlin.getName())
assertEquals("paris", edgeParis.getName())
assertEquals(RoadAccess.DESTINATION, edgeBerlin.get(roadAccessEnc))
assertEquals(RoadAccess.YES, edgeParis.get(roadAccessEnc))
assertEquals(1, graph.getEdges())
assertEquals(Country.BGR, iter.get(countryEnc))
assertEquals("B8, B12", OSMReader.fixWayName("B8;B12"))
assertEquals("B8, B12", OSMReader.fixWayName("B8; B12"))
assertTrue(instance.hasTag("surface", "now", "something"))
assertTrue(instance.hasTag("test", "xy"))
assertTrue(exception.getMessage().contains("Invalid OSM WAY Id: -1;"))
assertEquals("my_car", profile.getName())
assertEquals("car", profile.getVehicle())
assertEquals("fastest", profile.getWeighting())
assertTrue(profile.isTurnCosts())
assertEquals(2, profile.getHints().toMap().size())
assertEquals("bar", profile.getHints().getString("foo", ""))
assertEquals("buzz", profile.getHints().getString("baz", ""))
assertEquals(expectedVisitedNodes, rsp.getHints().getLong("visited_nodes.sum", 0))
assertEquals(91, res.getPoints().size())
assertEquals(706, rsp.getHints().getLong("visited_nodes.sum", 0))
assertEquals(85, res.getPoints().size())
assertEquals(16, il.size())
assertEquals("continue onto Avenue des Guelfes", il.get(0).getTurnDescription(tr))
assertEquals("turn slight left onto Avenue des Papalins", il.get(1).getTurnDescription(tr))
assertEquals("turn sharp right onto Quai Jean-Charles Rey", il.get(4).getTurnDescription(tr))
assertEquals("turn left", il.get(5).getTurnDescription(tr))
assertEquals("turn right onto Avenue Albert II", il.get(6).getTurnDescription(tr))
assertEquals(7, il.get(0).getTime() / 1000)
assertEquals(69, il.get(1).getTime() / 1000)
assertEquals(128, il.get(2).getTime() / 1000)
assertEquals(9, il.get(3).getTime() / 1000)
assertEquals(7, il.get(4).getTime() / 1000)
assertEquals(30, il.get(5).getTime() / 1000)
assertEquals(85, res.getPoints().size())
assertEquals(10, routeRsp.getBest().getInstructions().size())
assertEquals(43, routeRsp.getBest().getPoints().size())
assertEquals(10, routeRsp.getBest().getInstructions().size())
assertEquals(39, routeRsp.getBest().getPoints().size())
assertEquals(41, routeRsp.getBest().getPoints().size())
assertEquals(4, il.size())
assertEquals("make a U-turn onto Avenue Princesse Grace", il.get(1).getTurnDescription(tr))
assertEquals("make a U-turn onto Avenue Princesse Grace", il.get(2).getTurnDescription(tr))
assertNotEquals(sum, 0)
assertEquals(115, bestPath.getPoints().size())
assertEquals(2, rsp.getAll().size())
assertEquals(1310, rsp.getAll().get(0).getTime() / 1000)
assertEquals(1431, rsp.getAll().get(1).getTime() / 1000)
assertEquals(3, rsp.getAll().size())
assertEquals(1310, rsp.getAll().get(0).getTime() / 1000)
assertEquals(1431, rsp.getAll().get(1).getTime() / 1000)
assertEquals(1492, rsp.getAll().get(2).getTime() / 1000)
assertEquals(3, rsp.getAll().size())
assertEquals(2865, rsp.getAll().get(0).getTime() / 1000)
assertEquals(3318, rsp.getAll().get(1).getTime() / 1000)
assertEquals(3093, rsp.getAll().get(2).getTime() / 1000)
assertEquals(3, rsp.getAll().size())
assertEquals(870, rsp.getAll().get(0).getTime() / 1000)
assertEquals(913, rsp.getAll().get(1).getTime() / 1000)
assertEquals(958, rsp.getAll().get(2).getTime() / 1000)
assertEquals("keep right and take B 96 toward Bautzen-West, Hoyerswerda", rsp.getBest().getInstructions().get(1).getTurnDescription(tr))
assertEquals("turn left onto Hoyerswerdaer Straße and drive toward Hoyerswerda, Kleinwelka", rsp.getBest().getInstructions().get(2).getTurnDescription(tr))
assertEquals("turn left and take A 4 toward Dresden", rsp.getBest().getInstructions().get(1).getTurnDescription(tr))
assertEquals(170, res.getPoints().size())
assertEquals(30, il.size())
assertEquals("continue onto Avenue des Guelfes", il.get(0).getTurnDescription(tr))
assertEquals("turn slight left onto Avenue des Papalins", il.get(1).getTurnDescription(tr))
assertEquals("turn sharp right onto Quai Jean-Charles Rey", il.get(4).getTurnDescription(tr))
assertEquals("turn left", il.get(5).getTurnDescription(tr))
assertEquals("turn right onto Avenue Albert II", il.get(6).getTurnDescription(tr))
assertEquals("waypoint 1", il.get(15).getTurnDescription(tr))
assertEquals(Instruction.U_TURN_UNKNOWN, il.get(16).getSign())
assertEquals("continue onto Avenue Albert II", il.get(23).getTurnDescription(tr))
assertEquals("turn left", il.get(24).getTurnDescription(tr))
assertEquals("turn right onto Quai Jean-Charles Rey", il.get(25).getTurnDescription(tr))
assertEquals("turn sharp left onto Avenue des Papalins", il.get(26).getTurnDescription(tr))
assertEquals("turn slight right onto Avenue des Guelfes", il.get(28).getTurnDescription(tr))
assertEquals("arrive at destination", il.get(29).getTurnDescription(tr))
assertEquals(7, il.get(0).getTime() / 1000)
assertEquals(69, il.get(1).getTime() / 1000)
assertEquals(128, il.get(2).getTime() / 1000)
assertEquals(9, il.get(3).getTime() / 1000)
assertEquals(7, il.get(4).getTime() / 1000)
assertEquals(30, il.get(5).getTime() / 1000)
assertEquals(1, res.getPoints().size())
assertEquals(1, res.getInstructions().size())
assertEquals("arrive at destination", res.getInstructions().get(0).getTurnDescription(tr))
assertEquals(Instruction.FINISH, res.getInstructions().get(0).getSign())
assertEquals(1, res.getPoints().size())
assertEquals(2, res.getInstructions().size())
assertEquals(Instruction.REACHED_VIA, res.getInstructions().get(0).getSign())
assertEquals(Instruction.FINISH, res.getInstructions().get(1).getSign())
assertEquals(1, details.size())
assertEquals(10, detailList.size())
assertEquals(5.0, detailList.get(0).getValue())
assertEquals(0, detailList.get(0).getFirst())
assertEquals(3.0, detailList.get(1).getValue())
assertEquals(res.getPoints().size() - 1, detailList.get(9).getLast())
assertEquals(36, res.getPoints().size())
assertTrue(rsp.hasErrors())
assertTrue(rsp.hasErrors())
assertTrue(rsp.hasErrors())
assertTrue(throwable instanceof MaximumNodesExceededException)
assertEquals(5, nodesDetail)
assertTrue(rsp.hasErrors())
assertTrue(rsp.hasErrors())
assertEquals(1, exception.getDetails().get("from"))
assertEquals(2, exception.getDetails().get("to"))
assertEquals(23, res.getPoints().size())
assertEquals(55, res.getPoints().size())
assertTrue(res.getPoints().is3D())
assertEquals(12, il.size())
assertTrue(il.get(0).getPoints().is3D())
assertEquals("(43.730684662577524,7.421283725164733,62.0), (43.7306797,7.4213823,66.0), " + "(43.731098,7.4215463,45.0), (43.7312991,7.42159,45.0), (43.7313271,7.4214147,45.0), " + "(43.7312506,7.4213664,45.0), (43.7312822,7.4211156,52.0), (43.7313624,7.4211455,52.0), " + "(43.7313714,7.4211233,52.0), (43.7314858,7.4211734,52.0), (43.7315753,7.4208688,52.0), " + "(43.7316061,7.4208249,52.0), (43.7316404,7.4208503,52.0), (43.7316741,7.4210502,52.0), " + "(43.7316276,7.4214636,45.0), (43.7316391,7.4215065,45.0), (43.7316664,7.4214904,45.0), " + "(43.7317185,7.4211861,52.0), (43.7319676,7.4206159,19.0), (43.732038,7.4203936,20.0), " + "(43.7322266,7.4196414,26.0), (43.7323236,7.4192656,26.0), (43.7323374,7.4190461,26.0), " + "(43.7323875,7.4189195,26.0), (43.731974,7.4181688,29.0), (43.7316421,7.4173042,23.0), " + "(43.7315686,7.4170356,31.0), (43.7314269,7.4166815,31.0), (43.7312401,7.4163184,49.0), " + "(43.7308286,7.4157613,29.399999618530273), (43.730662,7.4155599,22.0), " + "(43.7303643,7.4151193,51.0), (43.729579,7.4137274,40.0), (43.7295167,7.4137244,40.0), " + "(43.7294669,7.4137725,40.0), (43.7285987,7.4149068,23.0), (43.7285167,7.4149272,22.0), " + "(43.7283974,7.4148646,22.0), (43.7285619,7.4151365,23.0), (43.7285774,7.4152444,23.0), " + "(43.7285763,7.4159759,21.0), (43.7285238,7.4161982,20.0), (43.7284592,7.4163655,18.0), " + "(43.7281669,7.4168192,18.0), (43.7281442,7.4169449,18.0), (43.7281684,7.4172435,14.0), " + "(43.7282784,7.4179606,14.0), (43.7282757,7.418175,11.0), (43.7282319,7.4183683,11.0), " + "(43.7281482,7.4185473,11.0), (43.7280654,7.4186535,11.0), (43.7279259,7.418748,11.0), " + "(43.727779,7.4187731,11.0), (43.7276825,7.4190072,11.0), " + "(43.72767974015672,7.419198523220426,11.0)", str)
assertEquals(55, res.getPoints().size())
assertEquals(new GHPoint3D(43.73068455771767, 7.421283689825812, 62.0), res.getPoints().get(0))
assertEquals(new GHPoint3D(43.727679637988224, 7.419198521975086, 11.0), res.getPoints().get(res.getPoints().size() - 1))
assertEquals(Snap.Position.TOWER, hopper.getLocationIndex().findClosest(from.lat, from.lon, EdgeFilter.ALL_EDGES).getSnappedPosition())
assertEquals(Snap.Position.TOWER, hopper.getLocationIndex().findClosest(to.lat, to.lon, EdgeFilter.ALL_EDGES).getSnappedPosition())
assertEquals(6, pointList.size())
assertTrue(pointList.is3D())
assertEquals(60, arsp.getPoints().size())
assertTrue(arsp.getPoints().is3D())
assertEquals(12, il.size())
assertTrue(il.get(0).getPoints().is3D())
assertEquals(60, arsp.getPoints().size())
assertEquals(new GHPoint3D(43.73068455771767, 7.421283689825812, 55.82900047302246), arsp.getPoints().get(0))
assertEquals(new GHPoint3D(43.727679637988224, 7.419198521975086, 12.274499893188477), arsp.getPoints().get(arsp.getPoints().size() - 1))
assertEquals(55, res.getPoints().size())
assertTrue(res.getPoints().is3D())
assertEquals(103, res.getPoints().size())
assertEquals(19, il.size())
assertEquals("continue onto Obere Landstraße", il.get(0).getTurnDescription(tr))
assertEquals("turn left onto Kirchengasse", il.get(1).getTurnDescription(tr))
assertEquals("turn right onto Pfarrplatz", il.get(2).getTurnDescription(tr))
assertEquals("turn right onto Margarethenstraße", il.get(3).getTurnDescription(tr))
assertEquals("keep left onto Hoher Markt", il.get(4).getTurnDescription(tr))
assertEquals("turn right onto Wegscheid", il.get(6).getTurnDescription(tr))
assertEquals("continue onto Wegscheid", il.get(7).getTurnDescription(tr))
assertEquals("turn right onto Ringstraße", il.get(8).getTurnDescription(tr))
assertEquals("keep left onto Eyblparkstraße", il.get(9).getTurnDescription(tr))
assertEquals("keep left onto Austraße", il.get(10).getTurnDescription(tr))
assertEquals("keep left onto Rechte Kremszeile", il.get(11).getTurnDescription(tr))
assertEquals("turn right onto Treppelweg", il.get(15).getTurnDescription(tr))
assertEquals("continue onto Obere Landstraße", il.get(0).getTurnDescription(tr))
assertEquals(2, hopper.getCHGraphs().size())
assertEquals(2, ((RoundaboutInstruction) res.getInstructions().get(1)).getExitNumber())
assertEquals(2, ((RoundaboutInstruction) res.getInstructions().get(1)).getExitNumber())
assertEquals(1, ((RoundaboutInstruction) res.getInstructions().get(1)).getExitNumber())
assertEquals(2, ((RoundaboutInstruction) res.getInstructions().get(1)).getExitNumber())
assertEquals(2, hopper.getCHGraphs().size())
assertTrue(instr instanceof RoundaboutInstruction)
assertEquals(5, ((RoundaboutInstruction) instr).getExitNumber())
assertNotEquals(sum, 0)
assertEquals(85, bestPath.getPoints().size())
assertEquals(1, rsp.getAll().size())
assertEquals(66, res.getPoints().size())
assertEquals(91, bestPath.getPoints().size())
assertEquals(91, bestPath.getPoints().size())
assertEquals(91, bestPath.getPoints().size())
assertEquals(expectedVisitedNodes, visitedNodes)
assertEquals(IllegalArgumentException.class, response.getErrors().get(0).getClass())
assertEquals(IllegalArgumentException.class, response.getErrors().get(0).getClass())
assertEquals(123.0, w.calcTurnWeight(5, 6, 5))
assertEquals(46.0, w.calcTurnWeight(5, 6, 5))
assertTrue(res.getHints().getInt("visited_nodes.sum", 0) < 150)
assertTrue(res.getHints().getInt("visited_nodes.sum", 0) > 170)
assertEquals(path.getTime(), pathCH.getTime())
assertEquals(149504, pathCH.getTime())
assertEquals(149504, pathLM.getTime())
assertEquals(149504, path.getTime())
assertNotEquals(rsp1.getHints().getInt("visited_nodes.sum", -1), rsp2.getHints().getInt("visited_nodes.sum", -1))
assertEquals(1, rsp.getErrors().size())
assertEquals(hopper.getBaseGraph().getEdges(), count)
assertEquals(expectedStreets, streets)
assertTrue(rsp.hasErrors())
assertEquals(41, path.getPoints().size())
assertEquals(40, totalLength)
assertEquals(expectedRef, instruction.getExtraInfoJSON().get("ref"))
assertEquals(expectedInterval, ((ShallowImmutablePointList) instruction.getPoints()).getIntervalString())
assertEquals(expectedLength, instruction.getLength())
assertEquals(expectedPoints, instruction.getPoints().size())
assertEquals(expected, detail.toString())
assertEquals("[com.graphhopper.util.exceptions.ConnectionNotFoundException: Connection between locations not found]", res.getErrors().toString())
assertEquals(1, counter.get())
assertEquals(1, counter.get())
assertTrue(snap.isValid())
assertTrue(snap.getQueryDistance() < 3_000)
assertEquals(time, instructionTime)
assertEquals(time, pathDetailTime)
assertTrue(hopper.load())
assertEquals(nodes, hopper.getBaseGraph().getNodes())
assertTrue(hopper.load())
assertEquals(nodes, hopper.getBaseGraph().getNodes())
assertTrue(counter > 0)
assertEquals(list.toString(), "[1, 2, 3, 4, 5, 6]")
assertTrue(counter > 0)
assertEquals(list.toString(), "[1, 2, 3, 4]")
assertEquals("continue onto blp street", enMap.tr("continue_onto", "blp street"))
assertEquals("Zu Fuß", trMap.tr("web.FOOT"))
assertEquals("Пешком", ruMap.tr("web.FOOT"))
assertEquals("Đi bộ", zhMap.tr("web.FOOT"))
assertEquals("Zu Fuß", trMap.tr("web.FOOT"))
assertEquals("Zu Fuß", trMap.tr("web.FOOT"))
assertEquals("Zu Fuß", trMap.tr("web.FOOT"))
assertEquals("רגל", trMap.tr("web.FOOT"))
assertEquals("רגל", trMap.tr("web.FOOT"))
assertTrue(Arrays.asList("id", "in").contains(lang))
assertEquals(lang, SINGLETON.get("in").getLanguage())
assertEquals(lang, SINGLETON.get("in_ID").getLanguage())
assertEquals("vi", SINGLETON.get("vi").getLanguage())
assertEquals("vi", SINGLETON.get("vi_VN").getLanguage())
assertTrue(ptMap.tr("roundabout_exit_onto", "1", "somestreet").contains("somestreet"))
assertTrue(new File("./target/tmp/test/file2 bäh").exists())
assertTrue(new File("./target/tmp/test/folder1").isDirectory())
assertTrue(new File("./target/tmp/test/folder1/folder 3").isDirectory())
assertTrue(deque.isEmpty())
assertEquals(0, deque.getSize())
assertEquals(1, deque.getSize())
assertEquals(0, deque.getSize())
assertEquals(1, deque.getSize())
assertEquals(60, deque.getSize())
assertEquals(0, deque.pop())
assertEquals(59, deque.getSize())
assertEquals(1, deque.pop())
assertEquals(58, deque.getSize())
assertEquals(59, deque.getSize())
assertEquals(60, deque.getSize())
assertEquals(10, deque.getSize())
assertEquals(39, deque.getCapacity())
assertEquals(11, deque.getSize())
assertEquals(52, deque.pop())
assertEquals(10, deque.getSize())
assertFalse(iter.next())
assertFalse(iter.getReverse(carAccessEnc))
assertFalse(iter.get(carAccessEnc))
assertFalse(iter.get(carAccessEnc))
assertFalse(iter.getReverse(carAccessEnc))
assertFalse(iter.get(carAccessEnc))
assertFalse(iter.next())
assertFalse(iter.next())
assertFalse(iter.next())
assertFalse(iter.next())
assertFalse(flags.isEmpty())
assertFalse(instance.hasTag("surface", "now", "not"))
assertFalse(instance.hasTag("test", "xy"))
assertFalse(rsp.hasErrors())
assertFalse(rsp.hasErrors())
assertFalse(rsp.hasErrors())
assertFalse(rsp.hasErrors())
assertFalse(rsp.hasErrors())
assertFalse(rsp.hasErrors())
assertFalse(path.hasErrors())
assertFalse(pathCH.hasErrors())
assertFalse(response.hasErrors())
assertFalse(response.hasErrors())
assertEquals(32, pointList.size())
assertEquals(20, pointList.size())
assertEquals(32, pointList.size())
assertEquals(20, pointList.size())
assertEquals(20, pointList.size())
assertEquals(removed1, removed2)
assertEquals(13, pointList.size())
assertEquals(11, pointList.size())
assertEquals("(50.203764443183644,9.961074440801317), (50.20318963087774,9.960999562464645), (50.202952888673984,9.96094144793469), (50.20267889356641,9.96223002587773), (50.201853928011374,9.961859918278305), " + "(50.20138565901039,9.961668810881722), (50.20128507617008,9.96216874485095), (50.20088553877664,9.961953795595925), (50.200686794534775,9.961899033827313), (50.20014066696481,9.961716680863127), (50.199798499043254,9.961588158344957)", pointList.toString())
assertEquals(8, pl.size())
assertEquals(expected, given)
assertEquals("(0.0,0.0,0.0), (0.03,0.0,30.0), (0.04,0.0,50.0)", pointList.toString())
assertEquals("(0.0,0.0,0.0), (0.04,0.0,50.0)", pointList.toString())
assertEquals("(0.0,0.0,0.0), (0.03,0.0,30.0), (0.04,0.0,50.0)", pointList.toString())
assertEquals("(0.0,0.0,0.0), (0.0,1.0,14.0), (1.0,1.0,20.0)", pointList.toString())
assertEquals("(0.0,0.0,0.0), (0.03,0.0,30.0), (0.0,0.0,0.0)", pointList.toString())
assertEquals("(0.0,0.0), (0.03,0.0), (0.0,0.0)", pointList.toString())
assertEquals("0010101010101010101010101010101010101010101010101010101010101010", bitUtil.toBitString(Long.MAX_VALUE / 3))
assertEquals("0111111111111111111111111111111111111111111111111111111111111111", bitUtil.toBitString(Long.MAX_VALUE))
assertEquals("00101010101010101010101010101010", bitUtil.toBitString(bitUtil.fromInt(Integer.MAX_VALUE / 3)))
assertEquals("10000000000000000000000000000000", bitUtil.toBitString(1L << 63, 32))
assertEquals("00000000000000000000000000000001", bitUtil.toBitString((1L << 32), 32))
assertEquals(str + "0000000", bitUtil.toBitString(bitUtil.fromBitString(str)))
assertEquals(str, bitUtil.toBitString(bitUtil.fromBitString(str)))
assertEquals(str + "0", bitUtil.toBitString(bitUtil.fromBitString(str)))
assertEquals("0010101010101010101010101010101010101010101010101010101010101010", bitUtil.toBitString(Long.MAX_VALUE / 3))
assertEquals("0111111111111111111111111111111111111111111111111111111111111111", bitUtil.toBitString(Long.MAX_VALUE))
assertEquals("00101010101010101010101010101010", bitUtil.toBitString(bitUtil.fromInt(Integer.MAX_VALUE / 3)))
assertEquals("10000000000000000000000000000000", bitUtil.toBitString((1L << 63), 32))
assertEquals("00000000000000000000000000000001", bitUtil.toBitString(1L << 32, 32))
assertEquals(str + "0000000", bitUtil.toBitString(bitUtil.fromBitString(str)))
assertEquals(str, bitUtil.toBitString(bitUtil.fromBitString(str)))
assertEquals(str + "0", bitUtil.toBitString(bitUtil.fromBitString(str)))
assertEquals(Integer.MAX_VALUE, bitUtil.toInt(bytes))
assertEquals(Integer.MAX_VALUE / 3, bitUtil.toInt(bytes))
assertEquals(Short.MAX_VALUE, bitUtil.toShort(bytes))
assertEquals(Short.MAX_VALUE / 3, bitUtil.toShort(bytes))
assertEquals(-123, bitUtil.toShort(bytes))
assertEquals(0xFF | 0xFF, bitUtil.toShort(bytes))
assertEquals(Long.MAX_VALUE, bitUtil.toLong(bytes))
assertEquals(Long.MAX_VALUE / 7, bitUtil.toLong(bytes))
assertEquals("1", bitUtil.toLastBitString(1L, 1))
assertEquals("01", bitUtil.toLastBitString(1L, 2))
assertEquals("001", bitUtil.toLastBitString(1L, 3))
assertEquals("010", bitUtil.toLastBitString(2L, 3))
assertEquals("011", bitUtil.toLastBitString(3L, 3))
assertEquals(Arrays.asList("continue onto 0-1", "turn right onto 1-4", "turn left onto 7-8", "arrive at destination"), tmpList)
assertEquals(Arrays.asList("dem Straßenverlauf von 0-1 folgen", "rechts abbiegen auf 1-4", "links abbiegen auf 7-8", "Ziel erreicht"), tmpList)
assertEquals(10, points.size())
assertEquals(IntArrayList.from(6, 7, 8, 5, 2), p.calcNodes())
assertEquals(Arrays.asList("continue onto 6-7", "turn left onto 5-8", "arrive at destination"), tmpList)
assertEquals(1, wayList.size())
assertEquals("arrive at destination", wayList.get(0).getTurnDescription(usTR))
assertEquals(Arrays.asList("continue onto 2-4", "turn slight right onto 3-4", "arrive at destination"), tmpList)
assertEquals(Arrays.asList("continue onto 3-4", "keep right onto 4-5", "arrive at destination"), tmpList)
assertEquals(Arrays.asList("continue onto street", "turn right onto street", "arrive at destination"), tmpList)
assertEquals(Arrays.asList("continue", "arrive at destination"), tmpList)
assertEquals(Arrays.asList("continue", "arrive at destination"), tmpList)
assertEquals(Arrays.asList("continue", "turn left", "arrive at destination"), tmpList)
assertEquals(3, wayList.size())
assertEquals(20, wayList.get(1).getDistance())
assertEquals(Arrays.asList("continue", "turn right", "arrive at destination"), tmpList)
assertEquals(3, wayList.size())
assertEquals(20, wayList.get(1).getDistance())
assertTrue(p.isFound())
assertEquals(Arrays.asList("continue onto myroad", "keep right onto myroad", "arrive at destination"), tmpList)
assertEquals(3, wayList.size())
assertEquals(20, wayList.get(1).getDistance())
assertEquals(Arrays.asList("continue onto myroad", "keep left onto myroad", "arrive at destination"), tmpList)
assertEquals(3, wayList.size())
assertEquals(20, wayList.get(1).getDistance())
assertEquals(Arrays.asList("continue", "keep right", "arrive at destination"), tmpList)
assertEquals(0, il.size())
assertEquals("2-3", Instructions.find(wayList, 15.05, 10, 1000).getName())
assertEquals("2-3", Instructions.find(wayList, 15.05, 10.001, 1000).getName())
assertEquals("3-4", Instructions.find(wayList, 15.099, 9.9, 1000).getName())
assertNull(Instructions.find(wayList, 50.8, 50.25, 1000))
assertEquals(Helper.createPointList(), PointList.EMPTY)
assertEquals(list1, list2)
assertEquals(clonedList, instance.clone(true))
assertEquals(7, instance.size())
assertEquals(10, instance.getCapacity())
assertEquals(7, instance.size())
assertEquals(10, instance.getCapacity())
assertEquals(12, instance.size())
assertEquals(24, instance.getCapacity())
assertEquals(10, list.size())
assertEquals(9, list.size())
assertEquals(0, list.size())
assertEquals(10, list.size())
assertEquals(20, list.getCapacity())
assertEquals(1, copy.size())
assertEquals(1, copy.getCapacity())
assertEquals(500, pl2.size())
assertTrue(pl1.isImmutable())
assertEquals(100, pl3.size())
assertTrue(pl1.equals(pl4))
assertTrue(pl2.equals(pl5))
assertEquals("(0.0,0.0,0.0), (1.0,1.0,1.0), (2.0,2.0,2.0)", pl.toString())
assertEquals("(1.0,1.0,1.0), (2.0,2.0,2.0)", pl.shallowCopy(1, 3, false).toString())
assertEquals(shallowPl, clonedPl)
assertNotEquals(shallowPl, clonedPl)
assertEquals(shallowPl, copiedPl)
assertNotEquals(shallowPl, copiedPl)
assertEquals(3, pl.toLineString(true).getNumPoints())
assertEquals(2, pl.shallowCopy(1, 3, false).toLineString(true).getNumPoints())
assertEquals(0, PointList.EMPTY.toLineString(false).getNumPoints())
assertEquals(2, oneLength.toLineString(false).getNumPoints())
assertTrue(counter > 0)
assertEquals(g.getNodes(), counter)
assertEquals("[0, 5, 3, 2, 1, 10, 8, 7, 6, 9, 4]", list.toString())
assertTrue(counter > 0)
assertEquals("[1, 5, 2, 6, 3, 4]", list.toString())
assertTrue(new Circle(10, 10, 120000).intersects(new BBox(9, 11, 8, 9)))
assertFalse(new Circle(10, 10, 110000).intersects(new BBox(9, 11, 8, 9)))
assertFalse(circle.intersects(pointList))
assertTrue(circle.intersects(pointList))
assertTrue(circle.intersects(pointList))
assertFalse(circle.intersects(pointList))
assertTrue(circle.intersects(pointList))
assertTrue(circle.intersects(pointList))
assertTrue(c.contains(new BBox(9, 11, 10, 10.1)))
assertFalse(c.contains(new BBox(9, 11, 8, 9)))
assertFalse(c.contains(new BBox(9, 12, 10, 10.1)))
assertTrue(c.contains(new Circle(9.9, 10.2, 90000)))
assertFalse(c.contains(new Circle(10, 10.4, 90000)))
assertTrue(new BBox(1, 2, 0, 1).contains(new BBox(1, 2, 0, 1)))
assertTrue(new BBox(1, 2, 0, 1).contains(new BBox(1.5, 2, 0.5, 1)))
assertTrue(new BBox(12, 15, 12, 15).intersects(new BBox(13, 14, 11, 16)))
assertTrue(new BBox(2, 6, 6, 11).intersects(new BBox(3, 5, 5, 12)))
assertTrue(new BBox(6, 11, 6, 11).intersects(new BBox(7, 10, 5, 12)))
assertTrue(bbox.intersects(pointList))
assertTrue(bbox.intersects(pointList))
assertTrue(bbox.intersects(pointList))
assertTrue(bbox.intersects(pointList))
assertEquals(expected, b1.calculateIntersection(b2))
assertNull(b1.calculateIntersection(b2))
assertEquals(b1, b1.calculateIntersection(b2))
assertEquals(new BBox(2, 4, 1, 3), BBox.parseTwoPoints("1,2,3,4"))
assertEquals(new BBox(2, 4, 1, 3), BBox.parseTwoPoints("3,2,1,4"))
assertEquals(new BBox(2, 4, 1, 3), BBox.parseBBoxString("2,4,1,3"))
assertFalse(new BBox(1, 2, 0, 0.5).contains(new BBox(1.5, 2, 0.5, 1)))
assertFalse(bbox.intersects(pointList))
assertFalse(bbox.intersects(pointList))
assertTrue(square.contains(10, 10))
assertTrue(square.contains(16, 10))
assertFalse(square.contains(10, -20))
assertTrue(square.contains(10, 0.1))
assertFalse(square.contains(10, 20))
assertTrue(square.contains(10, 16))
assertFalse(square.contains(20, 20))
assertFalse(squareHole.contains(10, 10))
assertTrue(squareHole.contains(16, 10))
assertFalse(squareHole.contains(10, -20))
assertFalse(squareHole.contains(10, 0))
assertFalse(squareHole.contains(10, 20))
assertTrue(squareHole.contains(10, 16))
assertFalse(squareHole.contains(20, 20))
assertTrue(square.contains(1.5, 1.5))
assertFalse(square.contains(0.5, 1.5))
assertTrue(squareHole.contains(1.1, 1.1))
assertFalse(squareHole.contains(1.5, 1.5))
assertFalse(squareHole.contains(0.5, 1.5))
assertEquals("S", AC.azimuth2compassPoint(199))
assertTrue(isClockwise(a, b, c))
assertTrue(isClockwise(b, c, a))
assertTrue(isClockwise(c, a, b))
assertTrue(dc.validEdgeDistance(49.94241, 11.544356, 49.937964, 11.541824, 49.942272, 11.555643))
assertTrue(dc.validEdgeDistance(49.936624, 11.547636, 49.937964, 11.541824, 49.942272, 11.555643))
assertTrue(dc.validEdgeDistance(49.940712, 11.556069, 49.937964, 11.541824, 49.942272, 11.555643))
assertEquals(new GHPoint(42.567048, 1.6019), dist.calcCrossingPointToEdge(queryLat, queryLon, lat16, lon16, lat17, lon17))
assertEquals(new GHPoint(55.81863, 37.594626), distCalc.calcCrossingPointToEdge(queryLat, queryLon, tmpLat, tmpLon, wayLat, wayLon))
assertEquals(numberOfPoints, responsePath.getPoints().size())
assertTrue(numberOfPoints > responsePath.getPoints().size())
assertEquals(5, points.size())
assertEquals(origPoints, points)
assertEquals(expected.intervals, partition.intervals)
assertEquals(12, points.size())
assertEquals(origPoints, points)
assertEquals(expected1.intervals, partition1.intervals)
assertEquals(expected2.intervals, partition2.intervals)
assertEquals(expected3.intervals, partition3.intervals)
assertEquals(10, list.size())
assertEquals(3, list.get(5))
assertEquals(3, list.get(9))
assertEquals(10, list.buffer.length)
assertEquals(15, list.buffer.length)
assertEquals(15, list.elementsCount)
assertEquals(14 / 2.0 * (14 + 1), Arrays.stream(list.buffer).sum())
assertEquals(from(3, 4, 5, 6), ArrayUtil.range(3, 7))
assertEquals(from(-3, -2), ArrayUtil.range(-3, -1))
assertEquals(from(), ArrayUtil.range(5, 5))
assertEquals(from(3, 4, 5, 6, 7), ArrayUtil.rangeClosed(3, 7))
assertEquals(from(-3, -2, -1), ArrayUtil.rangeClosed(-3, -1))
assertEquals(from(5), ArrayUtil.rangeClosed(5, 5))
assertEquals(15, list.buffer.length)
assertEquals(15, list.elementsCount)
assertEquals(14 / 2.0 * (14 + 1), Arrays.stream(list.buffer).sum())
assertTrue(ArrayUtil.isPermutation(list))
assertTrue(ArrayUtil.isPermutation(IntArrayList.from()))
assertTrue(ArrayUtil.isPermutation(IntArrayList.from(0)))
assertTrue(ArrayUtil.isPermutation(IntArrayList.from(0, 1)))
assertTrue(ArrayUtil.isPermutation(IntArrayList.from(6, 2, 4, 0, 1, 3, 5)))
assertEquals(from(), ArrayUtil.reverse(from()))
assertEquals(from(1), ArrayUtil.reverse(from(1)))
assertEquals(from(9, 5), ArrayUtil.reverse(from(5, 9)))
assertEquals(from(7, 1, 3), ArrayUtil.reverse(from(3, 1, 7)))
assertEquals(from(4, 3, 2, 1), ArrayUtil.reverse(from(1, 2, 3, 4)))
assertEquals(from(5, 4, 3, 2, 1), ArrayUtil.reverse(from(1, 2, 3, 4, 5)))
assertEquals(from(4, 1, 3, 2), ArrayUtil.shuffle(from(1, 2, 3, 4), new Random(0)))
assertEquals(from(4, 3, 2, 1, 5), ArrayUtil.shuffle(from(1, 2, 3, 4, 5), new Random(1)))
assertEquals(9, ArrayUtil.removeConsecutiveDuplicates(arr, arr.length))
assertEquals(IntArrayList.from(3, 4, 2, 1, -3, 9, 3, 6, 7, 6, 6, 7, 7), IntArrayList.from(arr))
assertEquals(2, ArrayUtil.removeConsecutiveDuplicates(brr, 3))
assertEquals(IntArrayList.from(4, 3, 3, 5, 3), IntArrayList.from(brr))
assertEquals(from(), ArrayUtil.withoutConsecutiveDuplicates(from()))
assertEquals(from(1), ArrayUtil.withoutConsecutiveDuplicates(from(1)))
assertEquals(from(1), ArrayUtil.withoutConsecutiveDuplicates(from(1, 1)))
assertEquals(from(1), ArrayUtil.withoutConsecutiveDuplicates(from(1, 1, 1)))
assertEquals(from(1, 2), ArrayUtil.withoutConsecutiveDuplicates(from(1, 1, 2)))
assertEquals(from(1, 2, 1), ArrayUtil.withoutConsecutiveDuplicates(from(1, 2, 1)))
assertEquals(from(5, 6, 5, 8, 9, 11, 2, -1, 3), ArrayUtil.withoutConsecutiveDuplicates(from(5, 5, 5, 6, 6, 5, 5, 8, 9, 11, 11, 2, 2, -1, 3, 3)))
assertEquals(IntArrayList.from(4, 4, 4), arr)
assertEquals(IntArrayList.from(5, 6, 2), brr)
assertEquals(from(), from(ArrayUtil.calcSortOrder(from(), from())))
assertEquals(from(0), from(ArrayUtil.calcSortOrder(from(3), from(4))))
assertEquals(from(0, 2, 3, 1), from(ArrayUtil.calcSortOrder(from(3, 6, 3, 4), from(0, -1, 2, -6))))
assertEquals(from(2, 3, 1, 0), from(ArrayUtil.calcSortOrder(from(3, 3, 0, 0), from(0, -1, 1, 2))))
assertEquals(from(), from(ArrayUtil.calcSortOrder(new int[] { 3, 3, 0, 0 }, new int[] { 0, -1, 1, 2 }, 0)))
assertEquals(from(0), from(ArrayUtil.calcSortOrder(new int[] { 3, 3, 0, 0 }, new int[] { 0, -1, 1, 2 }, 1)))
assertEquals(from(1, 0), from(ArrayUtil.calcSortOrder(new int[] { 3, 3, 0, 0 }, new int[] { 0, -1, 1, 2 }, 2)))
assertEquals(from(2, 1, 0), from(ArrayUtil.calcSortOrder(new int[] { 3, 3, 0, 0 }, new int[] { 0, -1, 1, 2 }, 3)))
assertEquals(from(2, 3, 1, 0), from(ArrayUtil.calcSortOrder(new int[] { 3, 3, 0, 0 }, new int[] { 0, -1, 1, 2 }, 4)))
assertEquals(from(0, 6, 3, 1, 4), from(ArrayUtil.applyOrder(new int[] { 3, 4, 6, 0, 1 }, new int[] { 3, 2, 0, 4, 1 })))
assertEquals(from(-1, -1, -1, 3), from(ArrayUtil.invert(new int[] { 3, 3, 3, 3 })))
assertEquals(from(3, 2, 0, 1), from(ArrayUtil.invert(new int[] { 2, 3, 1, 0 })))
assertEquals(from(2, 3, 1, 0), from(ArrayUtil.invert(new int[] { 3, 2, 0, 1 })))
assertArrayEquals(new int[] {}, ArrayUtil.merge(new int[] {}, new int[] {}))
assertArrayEquals(new int[] { 4, 5 }, ArrayUtil.merge(new int[] {}, new int[] { 4, 5 }))
assertArrayEquals(new int[] { 4, 5 }, ArrayUtil.merge(new int[] { 4, 5 }, new int[] {}))
assertArrayEquals(new int[] { 3, 6, 9 }, ArrayUtil.merge(new int[] { 6, 6, 6, 9 }, new int[] { 3, 9 }))
assertEquals(from(2, 3, 6, 7, 8, 9, 10, 11, 12, 15, 20, 21, 26), from(ArrayUtil.merge(a, b)))
assertEquals(false, validEdgeDistance)
assertEquals(false, validEdgeDistance)
assertEquals(g.getNodes(), newG.getNodes())
assertEquals(g.getEdges(), newG.getEdges())
assertEquals(0, newG.getEdgeIteratorState(0, Integer.MIN_VALUE).getAdjNode())
assertEquals(1, newG.getEdgeIteratorState(0, Integer.MIN_VALUE).getBaseNode())
assertEquals(1, newG.getEdgeIteratorState(1, Integer.MIN_VALUE).getAdjNode())
assertEquals(3, newG.getEdgeIteratorState(1, Integer.MIN_VALUE).getBaseNode())
assertEquals(2, newG.getEdgeIteratorState(2, Integer.MIN_VALUE).getAdjNode())
assertEquals(1, newG.getEdgeIteratorState(2, Integer.MIN_VALUE).getBaseNode())
assertEquals(2, GHUtility.createEdgeKey(1, false, false))
assertEquals(2, GHUtility.createEdgeKey(1, true, false))
assertEquals(2, GHUtility.createEdgeKey(1, true, true))
assertEquals(3, GHUtility.createEdgeKey(1, false, true))
assertEquals(3, map1.get(0))
assertEquals(0, map1.get(1))
assertEquals(1, map1.get(2))
assertTrue(map1.containsKey(0))
assertTrue(na.is3D())
assertEquals(12, graph.getNodes())
assertEquals("named street1", graph.getEdgeIteratorState(iter1.getEdge(), iter1.getAdjNode()).getName())
assertEquals("named street2", graph.getEdgeIteratorState(iter2.getEdge(), iter2.getAdjNode()).getName())
assertEquals(list, iter3.getKeyValues())
assertEquals(list, iter3.detach(true).getKeyValues())
assertEquals("FORWARD", iter3.getValue("keyA"))
assertNull(iter3.getValue("keyB"))
assertEquals("BOTH", iter3.getValue("keyC"))
assertNull(iter3.detach(true).getValue("keyA"))
assertEquals("BACKWARD", iter3.detach(true).getValue("keyB"))
assertEquals("BOTH", iter3.detach(true).getValue("keyC"))
assertEquals(2, graph.getNodes())
assertTrue(graph.isFrozen())
assertTrue(na.is3D())
assertTrue(g.getBounds().isValid())
assertEquals(new BBox(10, 20, 10, 12, 0, 1), g.getBounds())
assertEquals(2, GHUtility.count(explorer.setBaseNode(0)))
assertEquals(GHUtility.asSet(2, 1), GHUtility.getNeighbors(explorer.setBaseNode(0)))
assertTrue(iter.next())
assertEquals(Helper.createPointList3D(3.5, 4.5, 0, 5, 6, 0), iter.fetchWayGeometry(PILLAR_ONLY))
assertTrue(iter.next())
assertEquals(Helper.createPointList3D(1.5, 1, 0, 2, 3, 0), iter.fetchWayGeometry(PILLAR_ONLY))
assertEquals(Helper.createPointList3D(10, 10, 0, 1.5, 1, 0, 2, 3, 0), iter.fetchWayGeometry(BASE_AND_PILLAR))
assertEquals(Helper.createPointList3D(1.5, 1, 0, 2, 3, 0, 11, 20, 1), iter.fetchWayGeometry(PILLAR_AND_ADJ))
assertEquals(Helper.createPointList3D(10, 10, 0, 11, 20, 1), iter.fetchWayGeometry(TOWER_ONLY))
assertEquals(Helper.createPointList3D(11, 20, 1, 10, 10, 0), iter.detach(true).fetchWayGeometry(TOWER_ONLY))
assertEquals(2, GHUtility.count(explorer.setBaseNode(1)))
assertEquals(GHUtility.asSet(2, 0), GHUtility.getNeighbors(explorer.setBaseNode(1)))
assertEquals(1, GHUtility.count(explorer.setBaseNode(2)))
assertEquals(GHUtility.asSet(0), GHUtility.getNeighbors(explorer.setBaseNode(2)))
assertEquals(Helper.createPointList3D(), eib.fetchWayGeometry(PILLAR_ONLY))
assertEquals(Helper.createPointList3D(11, 20, 1), eib.fetchWayGeometry(BASE_AND_PILLAR))
assertEquals(Helper.createPointList3D(12, 12, 0.4), eib.fetchWayGeometry(PILLAR_AND_ADJ))
assertEquals(GHUtility.asSet(0), GHUtility.getNeighbors(explorer.setBaseNode(2)))
assertEquals(store.getNodes(), store.getBaseGraph().getNodes())
assertEquals(store.getEdges(), store.getBaseGraph().getEdges())
assertTrue(edge1.getReverse(carAccessEnc))
assertTrue(edge0.get(carAccessEnc))
assertTrue(edge.getReverse(REVERSE_STATE))
assertTrue(edge.get(REVERSE_STATE))
assertTrue(iter.next())
assertTrue(iter.next())
assertEquals(44, iter.getFlags().ints[0])
assertEquals(13, edge1.getFlags().ints[0])
assertEquals(base, edge.getBaseNode())
assertEquals(adj, edge.getAdjNode())
assertEquals(reverse, edge.get(REVERSE_STATE))
assertEquals(edgeId, edge.getEdge())
assertEquals(key, edge.getEdgeKey())
assertEquals(10, edge.getFlags().ints[0])
assertEquals(9, edge.getFlags().ints[0])
assertEquals(RoadClass.BRIDLEWAY, edge.get(rcEnc))
assertEquals(RoadClass.CORRIDOR, edge.get(rcEnc))
assertFalse(isClockwise(c, b, a))
assertFalse(isClockwise(a, c, b))
assertFalse(isClockwise(b, a, c))
assertFalse(dc.validEdgeDistance(49.935119, 11.541649, 49.937964, 11.541824, 49.942272, 11.555643))
assertFalse(dc.validEdgeDistance(49.939317, 11.539675, 49.937964, 11.541824, 49.942272, 11.555643))
assertFalse(dc.validEdgeDistance(49.944482, 11.555446, 49.937964, 11.541824, 49.942272, 11.555643))
assertFalse(dc.validEdgeDistance(49.94085, 11.557356, 49.937964, 11.541824, 49.942272, 11.555643))
assertFalse(ArrayUtil.isPermutation(IntArrayList.from(1, 2)))
assertFalse(ArrayUtil.isPermutation(IntArrayList.from(-1)))
assertFalse(ArrayUtil.isPermutation(IntArrayList.from(1)))
assertFalse(ArrayUtil.isPermutation(IntArrayList.from(3, 4, 0, 1)))
assertFalse(ArrayUtil.isPermutation(IntArrayList.from(0, 1, 3, 3, 4, 4, 6)))
assertFalse(map1.containsKey(0))
assertFalse(edge1.get(carAccessEnc))
assertFalse(edge0.getReverse(carAccessEnc))
assertFalse(edge.get(REVERSE_STATE))
assertFalse(edge.get(REVERSE_STATE))
assertFalse(edge.getReverse(REVERSE_STATE))
assertEquals("[0]", blockArea.toString(0))
assertFalse(blockArea.hasCachedEdgeIds(0))
assertEquals("[1, 2, 6, 7, 11, 12]", blockArea.toString(0))
assertFalse(blockArea.hasCachedEdgeIds(0))
assertEquals("[2, 7]", blockArea.toString(0))
assertEquals(assertSetContent, blockedEdges.toString())
assertTrue(na.is3D())
assertEquals(12, graph.getNodes())
assertEquals("named street1", graph.getEdgeIteratorState(iter1.getEdge(), iter1.getAdjNode()).getName())
assertEquals("named street2", graph.getEdgeIteratorState(iter2.getEdge(), iter2.getAdjNode()).getName())
assertEquals(128, turnCostStorage.getCapacity())
assertEquals(104, turnCostStorage.getCapacity() / 16)
assertEquals(112, turnCostStorage.getCapacity() / 16)
assertEquals(TurnCostStorage.NO_TURN_ENTRY, na.getTurnCostIndex(4001))
assertEquals(12, na.getTurnCostIndex(4000))
assertEquals(0, store.getLevel(store.toNodePointer(10)))
assertEquals(100, store.getLevel(store.toNodePointer(10)))
assertEquals(300, store.getLevel(store.toNodePointer(29)))
assertEquals(Integer.MAX_VALUE / 1000d + 1000, g.getWeight(0))
assertTrue(Double.isInfinite(g.getWeight(0)))
assertTrue(Double.isInfinite(g.getWeight(0)))
assertTrue(Double.isInfinite(g.getWeight(0)))
assertTrue(access.getInt(0) < 0)
assertEquals(Integer.MAX_VALUE, access.getInt(0) >>> 1)
assertTrue(writeLock1.tryLock())
assertTrue(lock2.tryLock())
assertTrue(lock2.isLocked())
assertEquals(OverlappingFileLockException.class, writeLock4.getObtainFailedReason().getClass())
assertTrue(lock2.isLocked())
assertEquals(DAType.MMAP, dir.getDefaultType("nodes", true))
assertEquals(10, dir.getPreload("nodes"))
assertEquals(DAType.RAM_STORE, dir.getDefaultType("nodes", false))
assertEquals(DAType.MMAP, dir.getDefaultType("nodes_ch_car", false))
assertEquals(123, da.getInt(7 * 4))
assertEquals(Integer.MAX_VALUE / 3, da.getInt(10 * 4))
assertEquals(0, da.getInt(2 * 4))
assertEquals(0, da.getInt(3 * 4))
assertEquals(123, da.getInt(7 * 4))
assertEquals(Integer.MAX_VALUE / 3, da.getInt(10 * 4))
assertTrue(da.loadExisting())
assertEquals(123, da.getInt(7 * 4))
assertTrue(da.loadExisting())
assertEquals(321, da.getInt(2 * 4))
assertEquals(123, da.getHeader(7 * 4))
assertEquals(Integer.MAX_VALUE / 3, da.getHeader(10 * 4))
assertTrue(da.loadExisting())
assertEquals(123, da.getHeader(7 * 4))
assertEquals(200, da.getInt(31 * 4))
assertEquals(200, da.getInt(31 * 4))
assertEquals(220, da.getInt(32 * 4))
assertEquals(1, da.getSegments())
assertTrue(olds > 3)
assertTrue(da.loadExisting())
assertEquals(olds, da.getSegments())
assertEquals(321, da.getInt(400))
assertEquals(128, da.getSegmentSize())
assertEquals(128, da.getSegmentSize())
assertEquals(128, da.getSegmentSize())
assertEquals(Integer.MAX_VALUE / 3, BitUtil.LITTLE.toInt(bytes))
assertEquals(Integer.MAX_VALUE / 3, BitUtil.LITTLE.toInt(bytes))
assertEquals(256, bufferIndex)
assertEquals(11111, index)
assertEquals(120, da.getByte(8))
assertEquals(Short.MAX_VALUE / 5, da.getShort(6))
assertEquals(Short.MAX_VALUE / 7, da.getShort(8))
assertEquals(Short.MAX_VALUE / 9, da.getShort(10))
assertEquals(Short.MAX_VALUE / 10, da.getShort(14))
assertEquals(unsignedShort, (int) da.getShort(12) & 0x0000FFFF)
assertTrue(da.loadExisting())
assertEquals(123, da.getInt(7 * 4))
assertTrue(da.loadExisting())
assertEquals(123, da.getInt(7 * 4))
assertEquals(2, getCountAll(defaultSize + 1))
assertEquals(0, graph.edge(0, 1).getFlags().ints[0])
assertEquals(1, getCountOut(1))
assertEquals(2, getCountOut(1))
assertEquals(1, getCountOut(2))
assertEquals(1, getCountOut(1))
assertEquals(2, getCountOut(2))
assertEquals(1, getCountOut(3))
assertEquals(1, getCountIn(1))
assertEquals(2, getCountIn(2))
assertEquals(0, getCountIn(3))
assertEquals(3, getCountOut(1))
assertEquals(0, getCountOut(2))
assertEquals(1, getCountOut(3))
assertEquals(2, i.getAdjNode())
assertTrue(i.next())
assertEquals(12, i.getAdjNode())
assertTrue(i.next())
assertEquals(11, i.getAdjNode())
assertTrue(i.next())
assertEquals(2, i.getAdjNode())
assertEquals(4, getCountAll(1))
assertEquals(1, getCountIn(1))
assertEquals(2, getCountIn(2))
assertEquals(0, getCountIn(3))
assertEquals(3, getCountOut(1))
assertEquals(0, getCountOut(2))
assertEquals(1, getCountOut(3))
assertEquals(2, i.getAdjNode())
assertTrue(i.next())
assertEquals(12, i.getAdjNode())
assertTrue(i.next())
assertEquals(11, i.getAdjNode())
assertTrue(i.next())
assertEquals(2, i.getAdjNode())
assertTrue(i.next())
assertEquals(2, i.getAdjNode())
assertTrue(i.next())
assertEquals(3, i.getAdjNode())
assertEquals(2, i.getAdjNode())
assertEquals(edge.getName(), newEdge.getName())
assertEquals(edge.getFlags(), newEdge.getFlags())
assertEquals(edge.fetchWayGeometry(FetchMode.PILLAR_ONLY), newEdge.fetchWayGeometry(FetchMode.PILLAR_ONLY))
assertEquals(2, graph.getNodes())
assertEquals(2, graph.getNodes())
assertEquals(3, graph.getNodes())
assertEquals(0, graph.getNodes())
assertEquals(GHUtility.asSet(0), GHUtility.getNeighbors(carOutExplorer.setBaseNode((1))))
assertEquals(GHUtility.asSet(5, 4, 3, 2, 1), GHUtility.getNeighbors(carOutExplorer.setBaseNode(0)))
assertEquals(1, getCountAll(1))
assertEquals(1, getCountIn(1))
assertEquals(1, getCountOut(1))
assertEquals(2, getCountAll(2))
assertEquals(1, getCountIn(2))
assertEquals(2, getCountOut(2))
assertEquals(4, getCountAll(3))
assertEquals(3, getCountIn(3))
assertEquals(2, getCountOut(3))
assertEquals(1, getCountAll(4))
assertEquals(1, getCountIn(4))
assertEquals(0, getCountOut(4))
assertEquals(1, getCountAll(5))
assertEquals(1, getCountIn(5))
assertEquals(1, getCountOut(5))
assertEquals(1, getCountAll(nn))
assertEquals(2, getCountAll(1))
assertEquals(3, getCountAll(1))
assertEquals(4, getCountAll(1))
assertEquals(5, getCountAll(1))
assertEquals(6, getCountAll(1))
assertEquals(7, getCountAll(1))
assertEquals(8, getCountAll(1))
assertEquals(8, getCountOut(1))
assertEquals(1, getCountIn(1))
assertEquals(1, getCountIn(2))
assertEquals(0, getCountAll(1))
assertEquals(1, getCountAll(1))
assertTrue(iter.next())
assertTrue(iter.get(carAccessEnc))
assertTrue(iter.getReverse(carAccessEnc))
assertTrue(iter.next())
assertTrue(iter.get(carAccessEnc))
assertEquals(2, iter.getBaseNode())
assertEquals(0, iter.getAdjNode())
assertEquals(0, iter.getBaseNode())
assertEquals(2, iter.getAdjNode())
assertNotNull(iter)
assertEquals(0, iter.getBaseNode())
assertEquals(2, iter.getAdjNode())
assertNull(iter)
assertEquals(3, getCountOut(2))
assertTrue(iter.next())
assertEquals(2, oneIter.getBaseNode())
assertTrue(oneIter.get(carAccessEnc))
assertEquals(3, oneIter.getBaseNode())
assertTrue(oneIter.getReverse(carAccessEnc))
assertEquals(4, getCountOut(2))
assertEquals(1, getCountAll(0))
assertEquals(2, getCountAll(0))
assertEquals(4, iter.getBaseNode())
assertEquals(10, iter.getAdjNode())
assertEquals(14, iter.getBaseNode())
assertEquals(10, iter.getAdjNode())
assertTrue(iter.next())
assertEquals(14, iter.getAdjNode())
assertTrue(iter.next())
assertEquals(4, iter.getAdjNode())
assertTrue(iter.next())
assertEquals(4, iter.getAdjNode())
assertTrue(iter.next())
assertEquals(4, iter.getAdjNode())
assertEquals(GHUtility.asSet(3, 1), GHUtility.getNeighbors(footOutExplorer.setBaseNode(0)))
assertEquals(GHUtility.asSet(3, 2), GHUtility.getNeighbors(carOutExplorer.setBaseNode(0)))
assertTrue(iter.next())
assertEquals(0, iter.getBaseNode())
assertEquals(1, iter.getAdjNode())
assertTrue(iter.next())
assertEquals(1, edgeId2 - edgeId)
assertEquals(3, iter.getBaseNode())
assertEquals(1, iter.getAdjNode())
assertTrue(iter.next())
assertEquals(3, iter.getBaseNode())
assertEquals(2, iter.getAdjNode())
assertEquals(graph.getEdgeIteratorState(iter1.getEdge(), iter1.getAdjNode()).getName(), "named street1")
assertEquals(graph.getEdgeIteratorState(iter2.getEdge(), iter2.getAdjNode()).getName(), "named street2")
assertEquals(Integer.MAX_VALUE / 3, edge.getFlags().ints[0])
assertTrue(edgeIter.get(access0Enc))
assertTrue(edgeIter.getReverse(access0Enc))
assertTrue(edgeIter.getReverse(access1Enc))
assertTrue(edgeIter.get(access0Enc))
assertTrue(na.is3D())
assertEquals(Helper.createPointList3D(10, 27, 72, 11, 20, 1), GHUtility.getEdge(graph, 0, 1).fetchWayGeometry(FetchMode.PILLAR_ONLY))
assertEquals(Helper.createPointList3D(10, 20, -10, 10, 27, 72, 11, 20, 1, 11, 2, 100), GHUtility.getEdge(graph, 0, 1).fetchWayGeometry(FetchMode.ALL))
assertEquals(Helper.createPointList3D(11, 2, 100, 11, 20, 1, 10, 27, 72, 10, 20, -10), GHUtility.getEdge(graph, 1, 0).fetchWayGeometry(FetchMode.ALL))
assertTrue(na.is3D())
assertEquals(4, baseGraph.getMaxGeoRef())
assertEquals(4 + (1 + 12), baseGraph.getMaxGeoRef())
assertEquals(4 + (1 + 12), baseGraph.getMaxGeoRef())
assertEquals(4 + (1 + 12), baseGraph.getMaxGeoRef())
assertEquals(4 + (1 + 12), baseGraph.getMaxGeoRef())
assertEquals(4 + (1 + 12) + (1 + 6), baseGraph.getMaxGeoRef())
assertEquals(4 + (1 + 12) + (1 + 6) + (1 + 6), baseGraph.getMaxGeoRef())
assertEquals(2, iter.getAdjNode())
assertEquals(2, edgeState02.getAdjNode())
assertTrue(edgeState02.get(carAccessEnc))
assertEquals(0, edgeState20.getAdjNode())
assertEquals(2, edgeState20.getBaseNode())
assertEquals(GHUtility.getEdge(graph, 0, 2).getFlags(), edgeState02.getFlags())
assertEquals(GHUtility.getEdge(graph, 2, 0).getFlags(), edgeState20.getFlags())
assertEquals(1, iter.getAdjNode())
assertEquals(2, edgeState02.getAdjNode())
assertEquals(2, edgeState20.getBaseNode())
assertEquals(0, iter.fetchWayGeometry(FetchMode.PILLAR_ONLY).size())
assertEquals(3, edgeState33.getBaseNode())
assertEquals(3, edgeState33.getAdjNode())
assertEquals(edgeState02.getFlags(), edgeState33.detach(false).getFlags())
assertEquals(edgeState20.getFlags(), edgeState33.detach(true).getFlags())
assertTrue(instance.loadExisting())
assertEquals("123", instance.get("test.min"))
assertEquals("321", instance.get("test.max"))
assertEquals("test", map.get("blup"))
assertEquals("xy", map.get("blup2"))
assertFalse(lock2.tryLock())
assertFalse(writeLock4.tryLock())
assertFalse(da.loadExisting())
assertFalse(da.loadExisting())
assertFalse(da.loadExisting())
assertFalse(da.loadExisting())
assertFalse(i.next())
assertFalse(i.next())
assertFalse(i.next())
assertFalse(i.next())
assertFalse(i.next())
assertFalse(i.next())
assertFalse(i.next())
assertFalse(iter.getReverse(carAccessEnc))
assertFalse(oneIter.getReverse(carAccessEnc))
assertFalse(oneIter.get(carAccessEnc))
assertFalse(iter.next())
assertFalse(iter.next())
assertFalse(iter.next())
assertFalse(iter.next())
assertFalse(edgeIter.get(access1Enc))
assertFalse(edgeIter.getReverse(access0Enc))
assertFalse(edgeState20.get(carAccessEnc))
assertFalse(instance.loadExisting())
assertFalse(instance.loadExisting())
assertTrue(lock.tryLock())
assertTrue(lock.isLocked())
assertFalse(lock.tryLock())
assertTrue(lock.isLocked())
assertFalse(lock2.tryLock())
assertTrue(lock2.isLocked())
assertFalse(lock.isLocked())
assertTrue(lock.tryLock())
assertTrue(lock.isLocked())
assertFalse(lock.isLocked())
assertEquals(expected, actual)
assertTrue(res.isValid())
assertEquals(new GHPoint(-0.4, 0.9), res.getSnappedPoint())
assertTrue(res.isValid())
assertEquals(new GHPoint(-0.6, 1.6), res.getSnappedPoint())
assertTrue(res.isValid())
assertEquals(new GHPoint(-0.441624, 0.317259), res.getSnappedPoint())
assertEquals(edges.size(), graph.getEdges())
assertEquals(edges.size(), graph.getEdges())
assertEquals(1, findClosestEdge(index, 51.2, 9.4))
assertEquals(3, findClosestEdge(index, 0, 0))
assertEquals(3, findClosestEdge(index, 0, 0.1))
assertEquals(3, findClosestEdge(index, 0.1, 0.1))
assertEquals(1, findClosestNode(index, -0.5, -0.5))
assertEquals(0, findClosestEdge(index, 51.25, 9.43))
assertEquals(1, index.findClosest(-.6, -.6, EdgeFilter.ALL_EDGES).getClosestNode())
assertEquals(2, index.findClosest(-.6, -.6, iter -> iter.getBaseNode() == 2 || iter.getAdjNode() == 2).getClosestNode())
assertTrue((rmin2 - check2) < 0.0001)
assertTrue(snap.isValid())
assertEquals(33, snap.getClosestNode())
assertTrue(snap.isValid())
assertEquals(2, snap.getClosestNode())
assertTrue(graph.getNodes() > 0)
assertEquals(3, findClosestEdge(idx, 5, 2))
assertEquals(3, findClosestEdge(idx, 1.5, 2))
assertEquals(1, findClosestEdge(idx, -1, -1))
assertEquals(4, findClosestEdge(idx, 4, 0))
assertEquals(3, findClosestEdge(idx, 5, 2))
assertEquals(3, findClosestEdge(idx, 1.5, 2))
assertEquals(1, findClosestEdge(idx, -1, -1))
assertEquals(6, findClosestNode(idx, 4.5, -0.5))
assertEquals(3, findClosestEdge(idx, 4, 1))
assertEquals(4, findClosestEdge(idx, 4, 0))
assertEquals(6, findClosestNode(idx, 4, -2))
assertEquals(5, findClosestEdge(idx, 3, 3))
assertEquals(3, findClosestEdge(idx, 1.637, 2.23))
assertEquals(10, findClosestEdge(idx, 3.649, 1.375))
assertEquals(9, findClosestNode(idx, 3.3, 2.2))
assertEquals(6, findClosestNode(idx, 3.0, 1.5))
assertEquals(15, findClosestEdge(idx, 3.8, 0))
assertEquals(15, findClosestEdge(idx, 3.8466, 0.021))
assertEquals(10, findClosestEdge(idx, 3.649, 1.375))
assertEquals(15, findClosestEdge(idx, 3.8465748, 0.021762699))
assertEquals(4, findClosestEdge(idx, 2.485, 1.373))
assertEquals(0, findClosestEdge(idx, 0.64628404, 0.53006625))
assertEquals(0, findClosestEdge(idx, 1, -1))
assertEquals(2, idx.findClosest(1, -1, AccessFilter.allEdges(footAccessEnc)).getClosestNode())
assertTrue(distFromTower < 0.1)
assertEquals(Snap.Position.TOWER, snap.getSnappedPosition())
assertEquals(2, store.getPosition())
assertEquals(7, store.getPosition())
assertEquals(1L, store.readVLong())
assertEquals(7L, store.readVLong())
assertEquals(777666555L, store.readVLong())
assertEquals(1, store.getPosition())
assertEquals(2, store.getPosition())
assertEquals(7, store.getPosition())
assertEquals(1L, store.readVLong())
assertEquals(7L, store.readVLong())
assertEquals(777666555L, store.readVLong())
assertEquals(expectedTurnRelations, allTurnRelations)
assertEquals(expectedTurnRelations, allTurnRelations)
assertFalse(iterator.next())
