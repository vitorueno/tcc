Assertions.assertEquals(10, object.getInt("int", 0))
Assertions.assertEquals(100, object.getLong("long", 0))
Assertions.assertEquals(true, object.getBoolean("boolean", false))
Assertions.assertEquals("test", object.getString("string", null))
Assertions.assertEquals(object.toMap(), symmetric.toMap())
Assertions.assertEquals("ABCDEF", markdown.compute("**A_B||C~~D__E`F`__~~||_**"))
Assertions.assertEquals("", markdown.compute(""))
Assertions.assertEquals("Hello World ~~~~", markdown.compute("Hello World ~~~~"))
Assertions.assertEquals("Hello World ~", markdown.compute("Hello World ~~~~~"))
Assertions.assertEquals("Hello", markdown.compute("**Hello**"))
Assertions.assertEquals("**Hello", markdown.compute("**Hello"))
Assertions.assertEquals("\\**Hello**", markdown.compute("\\**Hello**"))
Assertions.assertEquals("Hello", markdown.compute("*Hello*"))
Assertions.assertEquals("Hello", markdown.compute("_Hello_"))
Assertions.assertEquals("*Hello", markdown.compute("*Hello"))
Assertions.assertEquals("_Hello", markdown.compute("_Hello"))
Assertions.assertEquals("\\*Hello*", markdown.compute("\\*Hello*"))
Assertions.assertEquals("\\_Hello_", markdown.compute("\\_Hello_"))
Assertions.assertEquals("Hello", markdown.compute("***Hello***"))
Assertions.assertEquals("***Hello", markdown.compute("***Hello"))
Assertions.assertEquals("\\***Hello***", markdown.compute("\\***Hello***"))
Assertions.assertEquals("Hello", markdown.compute("__Hello__"))
Assertions.assertEquals("__Hello", markdown.compute("__Hello"))
Assertions.assertEquals("\\__Hello__", markdown.compute("\\__Hello__"))
Assertions.assertEquals("Hello", markdown.compute("~~Hello~~"))
Assertions.assertEquals("~~Hello", markdown.compute("~~Hello"))
Assertions.assertEquals("\\~~Hello~~", markdown.compute("\\~~Hello~~"))
Assertions.assertEquals("Hello", markdown.compute("||Hello||"))
Assertions.assertEquals("||Hello", markdown.compute("||Hello"))
Assertions.assertEquals("\\||Hello||", markdown.compute("\\||Hello||"))
Assertions.assertEquals("Hello", markdown.compute("`Hello`"))
Assertions.assertEquals("`Hello", markdown.compute("`Hello"))
Assertions.assertEquals("\\`Hello`", markdown.compute("\\`Hello`"))
Assertions.assertEquals("Hello **World**", markdown.compute("`Hello **World**`"))
Assertions.assertEquals("`Hello World", markdown.compute("`Hello **World**"))
Assertions.assertEquals("\\`Hello World`", markdown.compute("\\`Hello **World**`"))
Assertions.assertEquals("Hello", markdown.compute("``Hello``"))
Assertions.assertEquals("``Hello", markdown.compute("``Hello"))
Assertions.assertEquals("\\``Hello``", markdown.compute("\\``Hello``"))
Assertions.assertEquals("Hello **World**", markdown.compute("``Hello **World**``"))
Assertions.assertEquals("``Hello World", markdown.compute("``Hello **World**"))
Assertions.assertEquals("\\``Hello World``", markdown.compute("\\``Hello **World**``"))
Assertions.assertEquals("Hello `to` World", markdown.compute("``Hello `to` World``"))
Assertions.assertEquals("``Hello to World", markdown.compute("``Hello `to` World"))
Assertions.assertEquals("\\``Hello to World``", markdown.compute("\\``Hello `to` World``"))
Assertions.assertEquals("Hello", markdown.compute("```Hello```"))
Assertions.assertEquals("```Hello", markdown.compute("```Hello"))
Assertions.assertEquals("\\```Hello```", markdown.compute("\\```Hello```"))
Assertions.assertEquals("Hello **World**", markdown.compute("```Hello **World**```"))
Assertions.assertEquals("```Hello World", markdown.compute("```Hello **World**"))
Assertions.assertEquals("\\```Hello World```", markdown.compute("\\```Hello **World**```"))
Assertions.assertEquals("Hello `to` World", markdown.compute("```Hello `to` World```"))
Assertions.assertEquals("```Hello to World", markdown.compute("```Hello `to` World"))
Assertions.assertEquals("\\```Hello to World```", markdown.compute("\\```Hello `to` World```"))
Assertions.assertEquals("Test", markdown.compute("```java\nTest```"))
Assertions.assertEquals("Hello > World", markdown.compute("> Hello > World"))
Assertions.assertEquals("Hello\nWorld", markdown.compute("> Hello\n> World"))
Assertions.assertEquals("Hello\nWorld", markdown.compute(">>> Hello\nWorld"))
Assertions.assertEquals("Hello\nWorld", markdown.compute(">>>\nHello\nWorld"))
Assertions.assertEquals("Hello > World", markdown.compute(">>>\nHello > World"))
Assertions.assertEquals("**A_B||C~~D__E`F`__~~||_**", markdown.compute("**A_B||C~~D__E`F`__~~||_**"))
Assertions.assertEquals("**Hello**", markdown.compute("**Hello**"))
Assertions.assertEquals("**Hello", markdown.compute("**Hello"))
Assertions.assertEquals("*Hello*", markdown.compute("*Hello*"))
Assertions.assertEquals("_Hello_", markdown.compute("_Hello_"))
Assertions.assertEquals("*Hello", markdown.compute("*Hello"))
Assertions.assertEquals("_Hello", markdown.compute("_Hello"))
Assertions.assertEquals("***Hello***", markdown.compute("***Hello***"))
Assertions.assertEquals("***Hello", markdown.compute("***Hello"))
Assertions.assertEquals("\\***Hello***", markdown.compute("\\***Hello***"))
Assertions.assertEquals("__Hello__", markdown.compute("__Hello__"))
Assertions.assertEquals("__Hello", markdown.compute("__Hello"))
Assertions.assertEquals("~~Hello~~", markdown.compute("~~Hello~~"))
Assertions.assertEquals("~~Hello", markdown.compute("~~Hello"))
Assertions.assertEquals("||Hello||", markdown.compute("||Hello||"))
Assertions.assertEquals("||Hello", markdown.compute("||Hello"))
Assertions.assertEquals("`Hello`", markdown.compute("`Hello`"))
Assertions.assertEquals("`Hello", markdown.compute("`Hello"))
Assertions.assertEquals("`Hello **World**`", markdown.compute("`Hello **World**`"))
Assertions.assertEquals("`Hello **World**", markdown.compute("`Hello **World**"))
Assertions.assertEquals("``Hello``", markdown.compute("``Hello``"))
Assertions.assertEquals("``Hello", markdown.compute("``Hello"))
Assertions.assertEquals("``Hello **World**``", markdown.compute("``Hello **World**``"))
Assertions.assertEquals("``Hello **World**", markdown.compute("``Hello **World**"))
Assertions.assertEquals("``Hello `to` World``", markdown.compute("``Hello `to` World``"))
Assertions.assertEquals("``Hello `to` World", markdown.compute("``Hello `to` World"))
Assertions.assertEquals("```Hello```", markdown.compute("```Hello```"))
Assertions.assertEquals("```Hello", markdown.compute("```Hello"))
Assertions.assertEquals("```Hello **World**```", markdown.compute("```Hello **World**```"))
Assertions.assertEquals("```Hello **World**", markdown.compute("```Hello **World**"))
Assertions.assertEquals("```Hello `to` World```", markdown.compute("```Hello `to` World```"))
Assertions.assertEquals("```Hello `to` World", markdown.compute("```Hello `to` World"))
Assertions.assertEquals("```java\nTest```", markdown.compute("```java\nTest```"))
Assertions.assertEquals("> Hello > World", markdown.compute("> Hello > World"))
Assertions.assertEquals("> Hello\n> World", markdown.compute("> Hello\n> World"))
Assertions.assertEquals(">>> Hello\nWorld", markdown.compute(">>> Hello\nWorld"))
Assertions.assertEquals(">>>\nHello\nWorld", markdown.compute(">>>\nHello\nWorld"))
Assertions.assertEquals(">>>\nHello > World", markdown.compute(">>>\nHello > World"))
Assertions.assertEquals("\\*\\*A\\_B\\||C\\~~D\\_\\_E\\`F\\`\\_\\_\\~~\\||\\_\\*\\*", markdown.compute("**A_B||C~~D__E`F`__~~||_**"))
Assertions.assertEquals("\\*\\*Hello\\*\\*", markdown.compute("**Hello**"))
Assertions.assertEquals("**Hello", markdown.compute("**Hello"))
Assertions.assertEquals("\\**Hello**", markdown.compute("\\**Hello**"))
Assertions.assertEquals("\\*Hello\\*", markdown.compute("*Hello*"))
Assertions.assertEquals("\\_Hello\\_", markdown.compute("_Hello_"))
Assertions.assertEquals("*Hello", markdown.compute("*Hello"))
Assertions.assertEquals("_Hello", markdown.compute("_Hello"))
Assertions.assertEquals("\\*Hello*", markdown.compute("\\*Hello*"))
Assertions.assertEquals("\\_Hello_", markdown.compute("\\_Hello_"))
Assertions.assertEquals("\\*\\*\\*Hello\\*\\*\\*", markdown.compute("***Hello***"))
Assertions.assertEquals("***Hello", markdown.compute("***Hello"))
Assertions.assertEquals("\\***Hello***", markdown.compute("\\***Hello***"))
Assertions.assertEquals("\\_\\_Hello\\_\\_", markdown.compute("__Hello__"))
Assertions.assertEquals("__Hello", markdown.compute("__Hello"))
Assertions.assertEquals("\\__Hello__", markdown.compute("\\__Hello__"))
Assertions.assertEquals("\\~~Hello\\~~", markdown.compute("~~Hello~~"))
Assertions.assertEquals("~~Hello", markdown.compute("~~Hello"))
Assertions.assertEquals("\\~~Hello~~", markdown.compute("\\~~Hello~~"))
Assertions.assertEquals("\\||Hello\\||", markdown.compute("||Hello||"))
Assertions.assertEquals("||Hello", markdown.compute("||Hello"))
Assertions.assertEquals("\\||Hello||", markdown.compute("\\||Hello||"))
Assertions.assertEquals("\\`Hello\\`", markdown.compute("`Hello`"))
Assertions.assertEquals("`Hello", markdown.compute("`Hello"))
Assertions.assertEquals("\\`Hello`", markdown.compute("\\`Hello`"))
Assertions.assertEquals("\\`Hello **World**\\`", markdown.compute("`Hello **World**`"))
Assertions.assertEquals("`Hello \\*\\*World\\*\\*", markdown.compute("`Hello **World**"))
Assertions.assertEquals("\\`Hello \\*\\*World\\*\\*`", markdown.compute("\\`Hello **World**`"))
Assertions.assertEquals("\\``Hello\\``", markdown.compute("``Hello``"))
Assertions.assertEquals("``Hello", markdown.compute("``Hello"))
Assertions.assertEquals("\\``Hello``", markdown.compute("\\``Hello``"))
Assertions.assertEquals("\\``Hello **World**\\``", markdown.compute("``Hello **World**``"))
Assertions.assertEquals("``Hello \\*\\*World\\*\\*", markdown.compute("``Hello **World**"))
Assertions.assertEquals("\\``Hello \\*\\*World\\*\\*``", markdown.compute("\\``Hello **World**``"))
Assertions.assertEquals("\\``Hello `to` World\\``", markdown.compute("``Hello `to` World``"))
Assertions.assertEquals("``Hello \\`to\\` World", markdown.compute("``Hello `to` World"))
Assertions.assertEquals("\\``Hello \\`to\\` World", markdown.compute("\\``Hello `to` World"))
Assertions.assertEquals("\\```Hello\\```", markdown.compute("```Hello```"))
Assertions.assertEquals("```Hello", markdown.compute("```Hello"))
Assertions.assertEquals("\\```Hello", markdown.compute("\\```Hello"))
Assertions.assertEquals("\\```Hello **World**\\```", markdown.compute("```Hello **World**```"))
Assertions.assertEquals("```Hello \\*\\*World\\*\\*", markdown.compute("```Hello **World**"))
Assertions.assertEquals("\\```Hello \\*\\*World\\*\\*", markdown.compute("\\```Hello **World**"))
Assertions.assertEquals("\\```Hello `to` World\\```", markdown.compute("```Hello `to` World```"))
Assertions.assertEquals("```Hello \\`to\\` World", markdown.compute("```Hello `to` World"))
Assertions.assertEquals("\\```Hello \\`to\\` World", markdown.compute("\\```Hello `to` World"))
Assertions.assertEquals("\\```java\nTest\\```", markdown.compute("```java\nTest```"))
Assertions.assertEquals("\\> Hello > World", markdown.compute("> Hello > World"))
Assertions.assertEquals("\\> Hello\n\\> World", markdown.compute("> Hello\n> World"))
Assertions.assertEquals("\\>>> Hello\nWorld", markdown.compute(">>> Hello\nWorld"))
Assertions.assertEquals("\\>>>\nHello\nWorld", markdown.compute(">>>\nHello\nWorld"))
Assertions.assertEquals("\\>>>\nHello > World", markdown.compute(">>>\nHello > World"))
Assertions.assertEquals("\\> \\_Hello \n\\> World\\_", markdown.compute("> _Hello \n> World_"))
Assertions.assertEquals("Hello\\*World", MarkdownSanitizer.escape("Hello*World", true))
Assertions.assertEquals("Hello\\*\\*World", MarkdownSanitizer.escape("Hello**World", true))
Assertions.assertEquals("Hello\\*\\*\\*World", MarkdownSanitizer.escape("Hello***World", true))
Assertions.assertEquals("Hello\\*World", MarkdownSanitizer.escape("Hello\\*World", true))
Assertions.assertEquals("Hello\\*\\*World", MarkdownSanitizer.escape("Hello\\*\\*World", true))
Assertions.assertEquals("Hello\\*\\*\\*World", MarkdownSanitizer.escape("Hello\\*\\*\\*World", true))
Assertions.assertEquals("Hello\\_World", MarkdownSanitizer.escape("Hello_World", true))
Assertions.assertEquals("Hello\\_\\_World", MarkdownSanitizer.escape("Hello__World", true))
Assertions.assertEquals("Hello\\_\\_\\_World", MarkdownSanitizer.escape("Hello___World", true))
Assertions.assertEquals("Hello\\_World", MarkdownSanitizer.escape("Hello\\_World", true))
Assertions.assertEquals("Hello\\_\\_World", MarkdownSanitizer.escape("Hello\\_\\_World", true))
Assertions.assertEquals("Hello\\_\\_\\_World", MarkdownSanitizer.escape("Hello\\_\\_\\_World", true))
Assertions.assertEquals("Hello\\`World", MarkdownSanitizer.escape("Hello`World", true))
Assertions.assertEquals("Hello\\`\\`World", MarkdownSanitizer.escape("Hello``World", true))
Assertions.assertEquals("Hello\\`\\`\\`World", MarkdownSanitizer.escape("Hello```World", true))
Assertions.assertEquals("Hello\\`World", MarkdownSanitizer.escape("Hello\\`World", true))
Assertions.assertEquals("Hello\\`\\`World", MarkdownSanitizer.escape("Hello\\`\\`World", true))
Assertions.assertEquals("Hello\\`\\`\\`World", MarkdownSanitizer.escape("Hello\\`\\`\\`World", true))
Assertions.assertEquals("Hello\\|\\|World", MarkdownSanitizer.escape("Hello||World", true))
Assertions.assertEquals("Hello|World", MarkdownSanitizer.escape("Hello|World", true))
Assertions.assertEquals("Hello\\|\\|World", MarkdownSanitizer.escape("Hello\\|\\|World", true))
Assertions.assertEquals("Hello\\|World", MarkdownSanitizer.escape("Hello\\|World", true))
Assertions.assertEquals("Hello\\~\\~World", MarkdownSanitizer.escape("Hello~~World", true))
Assertions.assertEquals("Hello\\~\\~World", MarkdownSanitizer.escape("Hello\\~\\~World", true))
Assertions.assertEquals("\\> Hello World", MarkdownSanitizer.escape("> Hello World", true))
Assertions.assertEquals(">Hello World", MarkdownSanitizer.escape(">Hello World", true))
Assertions.assertEquals("\\>\\>\\> Hello World", MarkdownSanitizer.escape(">>> Hello World", true))
Assertions.assertEquals(">>>Hello World", MarkdownSanitizer.escape(">>>Hello World", true))
Assertions.assertEquals("\\>\\>\\> Hello > World\n\\> Hello >>> World\n<@12345> > Hello\n \\> Hello world", MarkdownSanitizer.escape(">>> Hello > World\n> Hello >>> World\n<@12345> > Hello\n > Hello world", true))
Assertions.assertEquals("\\> Hello World", MarkdownSanitizer.escape("\\> Hello World", true))
Assertions.assertEquals("\\>\\>\\> Hello World", MarkdownSanitizer.escape("\\>\\>\\> Hello World", true))
Assertions.assertEquals("Hello > World", MarkdownSanitizer.escape("Hello > World"))
Assertions.assertEquals(3, Helpers.countMatches("Hello World", 'l'))
Assertions.assertEquals(1, Helpers.countMatches("Hello World", ' '))
Assertions.assertEquals(0, Helpers.countMatches("Hello World", '_'))
Assertions.assertEquals(0, Helpers.countMatches("", '!'))
Assertions.assertEquals(0, Helpers.countMatches(null, '?'))
Assertions.assertEquals("Hello", Helpers.truncate("Hello World", 5))
Assertions.assertEquals("Hello", Helpers.truncate("Hello", 5))
Assertions.assertEquals("Hello", Helpers.truncate("Hello", 10))
Assertions.assertEquals("", Helpers.truncate("", 10))
Assertions.assertEquals("", Helpers.truncate("Test", 0))
Assertions.assertEquals("Hello    ", Helpers.rightPad("Hello", 9))
Assertions.assertEquals("Hello World", Helpers.rightPad("Hello World", 9))
Assertions.assertEquals("Hello", Helpers.rightPad("Hello", 5))
Assertions.assertEquals("    Hello", Helpers.leftPad("Hello", 9))
Assertions.assertEquals("Hello World", Helpers.leftPad("Hello World", 9))
Assertions.assertEquals("Hello", Helpers.leftPad("Hello", 5))
Assertions.assertEquals("ban", data.getString("name"))
Assertions.assertEquals("Ban a user from this server", data.getString("description"))
Assertions.assertEquals(Permission.BAN_MEMBERS.getRawValue(), data.getUnsignedLong("default_member_permissions"))
Assertions.assertEquals("user", option.getString("name"))
Assertions.assertEquals("The user to ban", option.getString("description"))
Assertions.assertEquals("reason", option.getString("name"))
Assertions.assertEquals("The ban reason", option.getString("description"))
Assertions.assertEquals("days", option.getString("name"))
Assertions.assertEquals("The duration of the ban", option.getString("description"))
Assertions.assertEquals(0, data.getUnsignedLong("default_member_permissions"))
Assertions.assertEquals("mod", data.getString("name"))
Assertions.assertEquals("Moderation commands", data.getString("description"))
Assertions.assertEquals("ban", subdata.getString("name"))
Assertions.assertEquals("Ban a user from this server", subdata.getString("description"))
Assertions.assertEquals("user", option.getString("name"))
Assertions.assertEquals("The user to ban", option.getString("description"))
Assertions.assertEquals("reason", option.getString("name"))
Assertions.assertEquals("The ban reason", option.getString("description"))
Assertions.assertEquals("days", option.getString("name"))
Assertions.assertEquals("The duration of the ban", option.getString("description"))
Assertions.assertEquals("mod", data.getString("name"))
Assertions.assertEquals("Moderation commands", data.getString("description"))
Assertions.assertEquals("ban", group.getString("name"))
Assertions.assertEquals("Ban or unban a user from this server", group.getString("description"))
Assertions.assertEquals("add", subdata.getString("name"))
Assertions.assertEquals("Ban a user from this server", subdata.getString("description"))
Assertions.assertEquals("user", option.getString("name"))
Assertions.assertEquals("The user to ban", option.getString("description"))
Assertions.assertEquals("reason", option.getString("name"))
Assertions.assertEquals("The ban reason", option.getString("description"))
Assertions.assertEquals("days", option.getString("name"))
Assertions.assertEquals("The duration of the ban", option.getString("description"))
Assertions.assertEquals(25, option.getChoices().size())
Assertions.assertEquals(choices, option.getChoices())
Assertions.assertEquals("**Hello World**", bold("Hello World"))
Assertions.assertEquals("**Hello \\*\\*Test\\*\\* World**", bold("Hello **Test** World"))
Assertions.assertEquals("**Hello *Test* World**", bold("Hello *Test* World"))
Assertions.assertEquals("_Hello World_", italics("Hello World"))
Assertions.assertEquals("_Hello \\_Test\\_ World_", italics("Hello _Test_ World"))
Assertions.assertEquals("_Hello __Test__ World_", italics("Hello __Test__ World"))
Assertions.assertEquals("__Hello World__", underline("Hello World"))
Assertions.assertEquals("__Hello \\_\\_Test\\_\\_ World__", underline("Hello __Test__ World"))
Assertions.assertEquals("__Hello _Test_ World__", underline("Hello _Test_ World"))
Assertions.assertEquals("`Hello World`", monospace("Hello World"))
Assertions.assertEquals("`Hello \\`Test\\` World`", monospace("Hello `Test` World"))
Assertions.assertEquals("`Hello ``Test`` World`", monospace("Hello ``Test`` World"))
Assertions.assertEquals("```java\nHello World```", codeblock("java", "Hello World"))
Assertions.assertEquals("```java\nHello \\```java\nTest\\``` World```", codeblock("java", "Hello ```java\nTest``` World"))
Assertions.assertEquals("```java\nHello `Test` World```", codeblock("java", "Hello `Test` World"))
Assertions.assertEquals("```Hello World```", codeblock("Hello World"))
Assertions.assertEquals("```Hello \\```java\nTest\\``` World```", codeblock("Hello ```java\nTest``` World"))
Assertions.assertEquals("```Hello `Test` World```", codeblock("Hello `Test` World"))
Assertions.assertEquals("||Hello World||", spoiler("Hello World"))
Assertions.assertEquals("||Hello \\||Test\\|| World||", spoiler("Hello ||Test|| World"))
Assertions.assertEquals("||Hello |Test| World||", spoiler("Hello |Test| World"))
Assertions.assertEquals("~~Hello World~~", strike("Hello World"))
Assertions.assertEquals("~~Hello \\~~Test\\~~ World~~", strike("Hello ~~Test~~ World"))
Assertions.assertEquals("~~Hello ~Test~ World~~", strike("Hello ~Test~ World"))
Assertions.assertEquals("> Hello World", quote("Hello World"))
Assertions.assertEquals("> Hello \n> \\> Test World", quote("Hello \n> Test World"))
Assertions.assertEquals("> Hello > Test World", quote("Hello > Test World"))
Assertions.assertEquals(">>> Hello World", quoteBlock("Hello World"))
Assertions.assertEquals(">>> Hello \n>>> Test World", quoteBlock("Hello \n>>> Test World"))
Assertions.assertEquals("[Hello](World)", maskedLink("Hello", "World"))
Assertions.assertEquals("[Hello](World%29)", maskedLink("Hello", "World)"))
Assertions.assertEquals("[Hello\\]](World%29)", maskedLink("Hello]", "World)"))
assertEquals("AnEntity", new EntityString(new AnEntity()).toString())
assertEquals("AnEntity:AName", new EntityString(new AnEntity()).setName("AName").toString())
assertEquals("NotAnEntity", new EntityString("NotAnEntity").toString())
assertEquals("NotAnEntity:AName", new EntityString("NotAnEntity").setName("AName").toString())
assertEquals("AnEntity[AType]", new EntityString(new AnEntity()).setType("AType").toString())
assertEquals("AnEntity[AType]:AName", new EntityString(new AnEntity()).setType("AType").setName("AName").toString())
assertEquals("AnEntity[NEWS]:AName", new EntityString(new AnEntity()).setType(ChannelType.NEWS).setName("AName").toString())
assertEquals("AnEntity(Metadata1)", new EntityString(new AnEntity()).addMetadata(null, "Metadata1").toString())
assertEquals("AnEntity(MetaKey=Metadata1)", new EntityString(new AnEntity()).addMetadata("MetaKey", "Metadata1").toString())
assertEquals("AnEntity(MetaKey=42)", new EntityString(new AnEntity()).addMetadata("MetaKey", 42).toString())
assertEquals("AnEntity(MetaKey1=Metadata1, MetaKey2=Metadata2)", new EntityString(new AnEntity()).addMetadata("MetaKey1", "Metadata1").addMetadata("MetaKey2", "Metadata2").toString())
assertEquals("AnEntity:AName(Metadata1)", new EntityString(new AnEntity()).setName("AName").addMetadata(null, "Metadata1").toString())
assertEquals("AnEntity:AName(MetaKey=Metadata1)", new EntityString(new AnEntity()).setName("AName").addMetadata("MetaKey", "Metadata1").toString())
assertEquals("AnEntity:AName(MetaKey=42)", new EntityString(new AnEntity()).setName("AName").addMetadata("MetaKey", 42).toString())
assertEquals("AnEntity:AName(MetaKey1=Metadata1, MetaKey2=Metadata2)", new EntityString(new AnEntity()).setName("AName").addMetadata("MetaKey1", "Metadata1").addMetadata("MetaKey2", "Metadata2").toString())
assertEquals("AnEntity[Type]:AName(Metadata1)", new EntityString(new AnEntity()).setName("AName").setType("Type").addMetadata(null, "Metadata1").toString())
assertEquals("AnEntity[Type]:AName(MetaKey=Metadata1)", new EntityString(new AnEntity()).setName("AName").setType("Type").addMetadata("MetaKey", "Metadata1").toString())
assertEquals("AnEntity[Type]:AName(MetaKey=42)", new EntityString(new AnEntity()).setName("AName").setType("Type").addMetadata("MetaKey", 42).toString())
assertEquals("AnEntity[Type]:AName(MetaKey1=Metadata1, MetaKey2=Metadata2)", new EntityString(new AnEntity()).setName("AName").setType("Type").addMetadata("MetaKey1", "Metadata1").addMetadata("MetaKey2", "Metadata2").toString())
assertEquals("ASnowflake(id=42)", new EntityString(new ASnowflake()).toString())
assertEquals("ASnowflake:AName(id=42)", new EntityString(new ASnowflake()).setName("AName").toString())
assertEquals("ASnowflake[AType](id=42)", new EntityString(new ASnowflake()).setType("AType").toString())
assertEquals("ASnowflake[AType]:AName(id=42)", new EntityString(new ASnowflake()).setType("AType").setName("AName").toString())
assertEquals("ASnowflake[NEWS]:AName(id=42)", new EntityString(new ASnowflake()).setType(ChannelType.NEWS).setName("AName").toString())
assertEquals("ASnowflake(id=42, Metadata1)", new EntityString(new ASnowflake()).addMetadata(null, "Metadata1").toString())
assertEquals("ASnowflake(id=42, MetaKey=Metadata1)", new EntityString(new ASnowflake()).addMetadata("MetaKey", "Metadata1").toString())
assertEquals("ASnowflake(id=42, MetaKey=42)", new EntityString(new ASnowflake()).addMetadata("MetaKey", 42).toString())
assertEquals("ASnowflake(id=42, MetaKey1=Metadata1, MetaKey2=Metadata2)", new EntityString(new ASnowflake()).addMetadata("MetaKey1", "Metadata1").addMetadata("MetaKey2", "Metadata2").toString())
assertEquals("ASnowflake:AName(id=42, Metadata1)", new EntityString(new ASnowflake()).setName("AName").addMetadata(null, "Metadata1").toString())
assertEquals("ASnowflake:AName(id=42, MetaKey=Metadata1)", new EntityString(new ASnowflake()).setName("AName").addMetadata("MetaKey", "Metadata1").toString())
assertEquals("ASnowflake:AName(id=42, MetaKey=42)", new EntityString(new ASnowflake()).setName("AName").addMetadata("MetaKey", 42).toString())
assertEquals("ASnowflake:AName(id=42, MetaKey1=Metadata1, MetaKey2=Metadata2)", new EntityString(new ASnowflake()).setName("AName").addMetadata("MetaKey1", "Metadata1").addMetadata("MetaKey2", "Metadata2").toString())
assertEquals("ASnowflake[Type]:AName(id=42, Metadata1)", new EntityString(new ASnowflake()).setName("AName").setType("Type").addMetadata(null, "Metadata1").toString())
assertEquals("ASnowflake[Type]:AName(id=42, MetaKey=Metadata1)", new EntityString(new ASnowflake()).setName("AName").setType("Type").addMetadata("MetaKey", "Metadata1").toString())
assertEquals("ASnowflake[Type]:AName(id=42, MetaKey=42)", new EntityString(new ASnowflake()).setName("AName").setType("Type").addMetadata("MetaKey", 42).toString())
assertEquals("ASnowflake[Type]:AName(id=42, MetaKey1=Metadata1, MetaKey2=Metadata2)", new EntityString(new ASnowflake()).setName("AName").setType("Type").addMetadata("MetaKey1", "Metadata1").addMetadata("MetaKey2", "Metadata2").toString())
