assertEquals("Hey Ma", body)
assertNull(Unirest.post(path).asString().getBody())
assertEquals("bar", Unirest.post(path).body("foo").asString().getBody())
assertEquals(null, Unirest.get(path).asString().getBody())
assertEquals(400, res.getStatus())
assertEquals("wtf", res.getStatusText())
assertEquals("boo", res.getBody())
assertEquals("Hi", Unirest.get(otherPath).asString().getBody())
assertEquals("Hey Buddy", Unirest.get(path).asString().getBody())
assertEquals("Yeaaaah Buddy", Unirest.get(path).asString().getBody())
assertEquals("Call Result", response.getBody())
assertSame(response, interceptor.response)
assertEquals("two", result)
assertEquals("Boo!", err.say)
assertEquals("cool", result)
assertTrue(wasCalled)
assertEquals("http://localhost/get/cheese/passed?fruit=apples", sum.getUrl())
assertEquals("http://localhost/get/{params}/passed", sum.getRawPath())
assertEquals(HttpMethod.GET, sum.getHttpMethod())
assertEquals(BAD_REQUEST, response.getStatus())
assertEquals("oh noes", response.getStatusText())
assertEquals(BAD_REQUEST, response.getStatus())
assertEquals("", response.getStatusText())
assertEquals("Hello World", Unirest.get(path).asString().getBody())
assertEquals("Hello World", new String(body))
assertEquals("apple", Unirest.get(path).asJson().getBody().getObject().getString("fruit"))
assertEquals("apple", Unirest.get(path).asJson().getBody().getObject().getString("fruit"))
assertEquals("apple", pojo.fruit)
assertEquals("derp", pojo)
assertEquals("derp", pojo)
assertEquals("foo", rez.getBody())
assertEquals("grover", rez.getHeaders().getFirst("monster"))
assertEquals(null, rez.getBody())
assertEquals("grover", rez.getHeaders().getFirst("monster"))
assertEquals(400, httpResponse.getStatus())
assertEquals("Bad Request", httpResponse.getBody())
assertEquals(400, httpResponse.getStatus())
assertEquals("howdy", httpResponse.getBody().getObject().getString("message"))
assertEquals(400, httpResponse.getStatus())
assertEquals("Pears", httpResponse.getBody().fruit)
assertSame(client, Unirest.primaryInstance().config().getClient())
assertSame(client, Unirest.primaryInstance().config().getAsyncClient())
assertFalse(Unirest.primaryInstance().config().getClient() instanceof MockClient)
assertFalse(Unirest.primaryInstance().config().getAsyncClient() instanceof MockClient)
assertSame(client, i.config().getClient())
assertSame(client, i.config().getAsyncClient())
assertFalse(i.config().getClient() instanceof MockClient)
assertFalse(i.config().getAsyncClient() instanceof MockClient)
assertEquals(200, response.getStatus())
assertEquals("Hi Mom", response.getBody())
assertEquals("application/xml", response.getHeaders().getFirst("Accept"))
assertEquals(400, response.getStatus())
assertEquals("Hi Mom", response.getParsingError().get().getOriginalBody())
assertEquals("Transformed!", response.mapError(TransformedError.class).message)
assertEquals("foo", test.text)
assertEquals(42, test.nmbr.intValue())
assertEquals("bar", test.another.text)
assertEquals(666, test.another.nmbr.intValue())
assertEquals(null, test.another.another)
assertEquals("foo", test.text)
assertEquals(42, test.nmbr.intValue())
assertEquals("bar", test.another.text)
assertEquals(666, test.another.nmbr.intValue())
assertEquals(null, test.another.another)
assertEquals("{\"text\":null,\"nmbr\":null,\"another\":null}", om.writeValue(testMe))
assertEquals(200, response)
assertEquals(200, response)
assertEquals(200, response)
assertEquals(200, response)
assertEquals(200, response)
Assertions.assertEquals(200, Unirest.get(url).asEmpty().getStatus())
assertEquals(s, message)
assertEquals("{\"message\":\"boom!\"}", e)
assertNull(error)
assertNull(error.merp)
Assertions.assertEquals("{\"message\":\"boom!\"}", request.getParsingError().get().getOriginalBody())
assertTrue(errorCalled)
assertEquals("boom!", e.getMessage())
assertEquals("java.io.IOException: " + "Something horrible happened", ex.getMessage())
assertEquals(200, response.getStatusLine().getStatusCode())
assertTrue(Unirest.isRunning())
assertTrue(Unirest.isRunning())
assertTrue(Unirest.isRunning())
assertSame(Unirest.primaryInstance(), Unirest.primaryInstance())
assertNotSame(Unirest.primaryInstance(), Unirest.spawnInstance())
assertNotSame(Unirest.spawnInstance(), Unirest.spawnInstance())
assertTrue(ManagementFactory.getThreadMXBean().getThreadCount() <= startingCount + 10)
assertEquals(0, reference.config().getDefaultHeaders().size())
assertNotSame(first, second)
assertNotEquals(c, Unirest.config().getAsyncClient())
assertEquals(i, Unirest.config().getInterceptor().get(0))
assertEquals(4000, Unirest.config().getConnectionTimeout())
assertEquals(200, result.getStatus())
assertEquals("Howdy Ho!", result.getBody())
assertTrue(requestConfigUsed)
assertTrue(interceptorCalled)
Assertions.assertEquals(1, request.getHeaders().size())
Assertions.assertEquals("Marco", request.getHeaders().get("name").get(0))
Assertions.assertEquals("Marco", request.getHeaders().get("NAme").get(0))
Assertions.assertEquals("Marco", request.getHeaders().get("Name").get(0))
Assertions.assertEquals(1, request.getHeaders().size())
Assertions.assertEquals("Marco", request.getHeaders().get("name").get(0))
Assertions.assertEquals("John", request.getHeaders().get("name").get(1))
Assertions.assertEquals("Marco", request.getHeaders().get("NAme").get(0))
Assertions.assertEquals("John", request.getHeaders().get("NAme").get(1))
Assertions.assertEquals("Marco", request.getHeaders().get("Name").get(0))
Assertions.assertEquals("John", request.getHeaders().get("Name").get(1))
assertEquals("user2" + ":" + "pass2", new String(Base64.getDecoder().decode(credentials)))
Assertions.assertEquals(301, response.getStatus())
Assertions.assertEquals(301, response.getStatus())
Assertions.assertEquals("ABC123", response.getCookies().getNamed("JSESSIONID").getValue())
Assertions.assertEquals("ruby", response.getCookies().getNamed("color").getValue())
Assertions.assertEquals("फनकी", response.getCookies().getNamed("nepali").getUrlDecodedValue())
Assertions.assertEquals("1=2;3=4", response.getCookies().getNamed("odd").getUrlDecodedValue())
Assertions.assertEquals("blue", back.getValue())
Assertions.assertEquals("localhost", back.getDomain())
Assertions.assertEquals("/get", back.getPath())
Assertions.assertTrue(back.isHttpOnly())
Assertions.assertEquals(42, back.getMaxAge())
assertNotNull(r1.getCookies().getNamed("color"))
assertNotNull(r1.getCookies().getNamed("color"))
Assertions.assertEquals("bar", cookie.getValue())
assertNotNull(r1.getCookies().getNamed("color"))
assertNotNull(r1.getCookies().getNamed("color"))
Assertions.assertEquals("bar", r1.getCookies().getNamed("foo").getValue())
assertNotNull(response.getCookies().getNamed("cookie_name"))
assertTrue(stat.timesCalled > 1)
assertTrue(stat.timesCalled > 1)
Assertions.assertEquals("text/plain;charset=utf-8", h.getFirst("Content-Type"))
Assertions.assertEquals("JSESSIONID=ABC123; Path=/", h.getFirst("Set-Cookie"))
Assertions.assertEquals("Thu, 01 Jan 1970 00:00:00 GMT", h.getFirst("Expires"))
Assertions.assertEquals(Lists.newArrayList("oranges", "grapes"), h.get("zed"))
Assertions.assertEquals("apples", h.getFirst("alpha"))
Assertions.assertEquals(200, response.getStatus())
Assertions.assertEquals("text/plain;charset=utf-8", response.getHeaders().getFirst("Content-Type"))
Assertions.assertEquals(true, body.getBoolean("gzipped"))
Assertions.assertEquals("gzip", body.getJSONObject("headers").getString("Accept-Encoding"))
assertEquals(2, body.getAllFilesByInput("file").size())
assertEquals(expected, body)
assertEquals("blue", c.getValue())
assertEquals("localhost", c.getDomain())
assertEquals("/get", c.getPath())
assertEquals(ZonedDateTime.of(2020, 1, 5, 15, 0, 20, 0, ZoneId.of("GMT")), c.getExpiration())
assertTrue(c.isHttpOnly())
assertEquals(42, c.getMaxAge())
assertNull(c.getSameSite())
assertEquals(ZonedDateTime.of(2020, 1, 5, 15, 0, 20, 0, ZoneId.of("GMT")), c.getExpiration())
assertEquals(v, c.toString())
assertEquals(Cookie.SameSite.Strict, c.getSameSite())
assertTrue(c.isSecure())
assertEquals("color=blue;Secure", c.toString())
assertEquals(jetty.getValue(), unirest.getValue())
assertEquals("color=blue", c.toString())
assertEquals("", c.getValue())
assertTrue(c.isHttpOnly())
assertEquals(".admin.virginia.edu", c.getDomain())
assertEquals(" woh ", c.getValue())
assertEquals("", c.getValue())
assertEquals("===", c.getValue())
assertEquals("\"", c.getValue())
assertEquals("\"foo", c.getValue())
assertEquals(content, getFileByInput(input).body)
assertEquals(username + ":" + password, new String(Base64.getDecoder().decode(credentials)))
assertEquals(s, queryString)
Assertions.assertEquals(get, method)
assertEquals(value, routeParams.get(name))
assertEquals(s, url)
Assertions.assertTrue(jsonPatches.getOperations().contains(new JsonPatchItem(op, path, value)))
assertEquals(i, status)
assertEquals(b, isProxied)
assertEquals(size, headers.get(foo).size())
assertEquals(o, body)
assertEquals("multipart/form-data", parts.get(0))
assertTrue(parts.get(1).startsWith("boundary="))
assertEquals("charset=UTF-8", parts.get(2))
assertEquals(value, c)
assertEquals(content, body)
assertEquals(type, this.fileType)
assertEquals(s, fileName)
assertEquals(expected, this.size)
assertTrue(this.size > 0)
assertTrue(wasCalled)
assertTrue(wasCalled)
Assertions.assertEquals(10, result.size())
Assertions.assertEquals(10, result.size())
Assertions.assertEquals(1, result.size())
assertNull(res.getBody())
Assertions.assertEquals(200, res.getStatus())
Assertions.assertEquals("json;charset=utf-8", res.getHeaders().getFirst("Content-Type"))
assertNull(res.getBody())
Assertions.assertEquals(200, res.getStatus())
Assertions.assertEquals("json;charset=utf-8", res.getHeaders().getFirst("Content-Type"))
Assertions.assertEquals(HttpStatus.OK, i.getStatus())
Assertions.assertEquals("{}", i.getBody().toString())
Assertions.assertEquals("{\"f\":1,\"a\":[2,3,4]}", i.getBody().toString())
Assertions.assertEquals("{\n" + "  \"f\": 1,\n" + "  \"a\": [\n" + "    2,\n" + "    3,\n" + "    4\n" + "  ]\n" + "}", i.getBody().toPrettyString())
Assertions.assertEquals(HttpStatus.BAD_REQUEST, response.getStatus())
assertNull(response.getBody())
Assertions.assertTrue(response.getParsingError().isPresent())
Assertions.assertEquals("You did something bad", ex.getOriginalBody())
Assertions.assertEquals("kong.unirest.json.JSONException: Invalid JSON", response.getParsingError().get().getMessage())
Assertions.assertEquals("{\"test\":\"it's a && b || c + 1!?\"}", test.toString())
Assertions.assertEquals("bar", body.getObject().getJSONObject("params").getJSONArray("foo").get(0))
Assertions.assertEquals("Can't find route parameter name \"method222\"", ex.getMessage())
Assertions.assertEquals("java.lang.IllegalArgumentException: Illegal character in path at index 22: http://localhost:4567/{method}?name=Mark", ex.getMessage())
assertEquals("http://localhost:4567/get/cheese/passed?fruit=apples", sum.getUrl())
assertEquals("http://localhost:4567/get/{params}/passed", sum.getRawPath())
assertEquals(HttpMethod.GET, sum.getHttpMethod())
assertEquals("http://localhost:4567/get/cheese/passed?fruit=apples", sum.getUrl())
assertEquals("http://localhost:4567/get/{params}/passed", sum.getRawPath())
assertEquals(HttpMethod.GET, sum.getHttpMethod())
assertEquals(MockServer.GET, interceptor.reqSum.getUrl())
Assertions.assertEquals("java.io.IOException: " + "Something horrible happened", ex.getMessage())
Assertions.assertEquals(542, response.getStatus())
Assertions.assertEquals("Something horrible happened", response.getStatusText())
Assertions.assertEquals(542, response.getStatus())
Assertions.assertEquals("Something horrible happened", response.getStatusText())
assertEquals(newHashSet("file=spidey.jpg", "fruit=apples"), values)
assertNotNull(captured)
assertNotNull(captured)
Assertions.assertEquals(400, captured.getStatus())
assertNotNull(captured)
Assertions.assertEquals(200, captured.getStatus())
Assertions.assertTrue(captured.getParsingError().isPresent())
Assertions.assertEquals("not what you expect", captured.getParsingError().get().getOriginalBody())
Assertions.assertEquals(400, error.httpResponse.getStatus())
Assertions.assertEquals(400, error.httpResponse.getStatus())
Assertions.assertTrue(response.isSuccess())
Assertions.assertEquals(200, s.getStatus())
assertEquals("GET http://somewhere/beans?fruit=apple\n" + "Accept=image/raw\n" + "===================================", log)
assertEquals("POST http://somewhere/beans?fruit=apple\n" + "Accept=image/raw\n" + "===================================\n" + "this is the body", log)
assertEquals("POST http://somewhere/beans?fruit=apple\n" + "Accept=image/raw\n" + "===================================\n" + "{\"muppet\":\"Gonzo\"}", log)
assertEquals("POST http://somewhere/beans?fruit=apple\n" + "Accept=image/raw\n" + "===================================\n" + "{\"bar\":\"zip\"}", log)
assertEquals("POST http://somewhere/beans?fruit=apple\n" + "Accept=image/raw\n" + "===================================\n" + "album=77&band=Talking+Heads", log)
assertEquals("POST http://localhost:4567/raw\n" + "Accept=image/raw\n" + "===================================\n" + "--5798a3ff-ed92-4e9e-a9fe-bd7853cea758\n" + "Content-Disposition: form-data; name:\"album\"\n" + "77\n" + "\n" + "--0ad6dbf7-c5b6-453e-a28c-4a3a8fab7017\n" + "Content-Disposition: form-data; name:\"band\"\n" + "Talking Heads\n" + "\n" + "--453a52b3-2811-4bf6-8950-6395efe72ef7\n" + "Content-Disposition: form-data; name=\"file\"; filename=\"null\"\n" + "Content-Type: application/octet-stream\n" + "<BINARY DATA>\n", body)
assertEquals(expected, threads.stream().filter(t -> "Unirest Apache Client Shutdown Hook".equals(t.getName())).count())
assertEquals(expected, threads.stream().filter(t -> "Unirest Apache Async Client Shutdown Hook".equals(t.getName())).count())
Assertions.assertEquals("No Object Mapper Configured. Please config one with Unirest.config().setObjectMapper", ex.getMessage())
assertEquals("{\"body\": \"sample\"}", value)
assertEquals("{\"body\": \"sample\"}", value)
assertEquals("{\"body\":\"sample\"}", value)
assertEquals("{\"body\":\"sample\"}", value)
assertEquals("[\"body\",\"sample\"]", value)
Assertions.assertEquals(429, Unirest.get(MockServer.GET).asEmpty().getStatus())
Assertions.assertEquals(429, Unirest.get(MockServer.GET).asString().getStatus())
Assertions.assertEquals(429, Unirest.get(MockServer.GET).asBytes().getStatus())
assertEquals(429, Unirest.get(MockServer.GET).asObject(RequestCapture.class).getStatus())
assertEquals(o, cap)
assertEquals("Hi Mom", cap)
Assertions.assertEquals("Hi Mom", cap.getObject().getString("message"))
assertEquals("Hi Mom", new String(cap))
assertTrue(cap.exists())
Assertions.assertEquals(429, resp.getStatus())
Assertions.assertEquals(429, Unirest.get(MockServer.GET).asEmpty().getStatus())
Assertions.assertEquals(200, response.getStatus())
assertEquals(1, stat.timesCalled)
assertEquals(asList(19L), stat.progress)
assertEquals(19L, stat.total)
assertEquals(i, timesCalled)
assertEquals("bar", r.get("foo"))
assertEquals("bar", r.get("foo"))
Assertions.assertEquals(200, r.getStatus())
Assertions.assertTrue(r.getParsingError().isPresent())
Assertions.assertEquals(ohNoes, r.getParsingError().get().getCause())
Assertions.assertEquals("call me ishmael", r.getParsingError().get().getOriginalBody())
Assertions.assertEquals(200, r.getStatus())
Assertions.assertTrue(r.getParsingError().isPresent())
Assertions.assertEquals(ohNoes, r.getParsingError().get().getCause())
Assertions.assertEquals("call me ishmael", r.getParsingError().get().getOriginalBody())
assertTrue(JankyProxy.wasUsed())
assertTrue(JankyProxy.wasUsed())
assertTrue(JankyProxy.wasUsed())
assertTrue(JankyProxy.wasUsed())
assertTrue(JankyProxy.wasUsed())
assertTrue(JankyProxy.wasUsed())
assertTrue(higherConcurrencyTime < smallerConcurrencyTime)
assertEquals(3, someTees.size())
assertEquals("foo", someTees.get(0).bar)
assertEquals("bar", someTees.get(1).bar)
assertEquals("baz", someTees.get(2).bar)
assertEquals("Hi Mom", body)
Assertions.assertEquals(200, i.getStatus())
Assertions.assertEquals("", i.getBody())
Assertions.assertEquals(200, i.getStatus())
Assertions.assertEquals(200, i.getStatus())
Assertions.assertEquals("ěščřžýáíé", Unirest.get(MockServer.GET).asString().getBody())
Assertions.assertEquals(200, response.getStatus())
Assertions.assertEquals("šžýáíé", response.getBody())
Assertions.assertEquals(200, response.getStatus())
Assertions.assertEquals("šžýáíé", response.getBody())
assertEquals(message, fail)
Assertions.assertEquals(200, response.getStatus())
assertEquals("howdy", r)
assertEquals("howdy", r.bar)
assertEquals(200, status)
assertEquals(null, error)
assertEquals(200, status)
assertTrue(test.toFile().exists())
assertEquals(null, error)
assertEquals(200, status)
assertTrue(test.toFile().exists())
assertEquals(200, status)
assertEquals(123456, body)
Assertions.assertEquals(123456, response.getBody().intValue())
Assertions.assertEquals(200, response.getStatus())
Assertions.assertEquals("cheddar", response.getHeaders().getFirst("cheese"))
assertEquals(2, MockServer.timesCalled)
assertEquals(1, MockServer.timesCalled)
assertEquals(r1, r2)
assertEquals(1, MockServer.timesCalled)
assertEquals(r1, r2)
assertSame(Unirest.get(MockServer.GET).asString(), Unirest.get(MockServer.GET).asString())
assertNotSame(Unirest.get(MockServer.GET).asString(), Unirest.get(MockServer.GET).asObject(RequestCapture.class))
assertEquals(2, MockServer.timesCalled)
assertNull(Unirest.get(MockServer.GET).asEmpty().getBody())
assertNull(Unirest.get(MockServer.GET).asEmpty().getBody())
assertNotNull(Unirest.get(MockServer.GET).asObject(RequestCapture.class).getBody())
assertNotNull(Unirest.get(MockServer.GET).asObject(RequestCapture.class).getBody())
assertNotNull(Unirest.get(MockServer.GET).asString().getBody())
assertNotNull(Unirest.get(MockServer.GET).asString().getBody())
assertNotNull(Unirest.get(MockServer.GET).asJson().getBody())
assertNotNull(Unirest.get(MockServer.GET).asJson().getBody())
assertNotNull(Unirest.get(MockServer.GET).asBytes().getBody())
assertNotNull(Unirest.get(MockServer.GET).asBytes().getBody())
assertEquals(5, MockServer.timesCalled)
assertEquals(10, MockServer.timesCalled)
assertEquals(11, MockServer.timesCalled)
assertEquals(1, MockServer.timesCalled)
assertEquals(2, MockServer.timesCalled)
Assertions.assertNotEquals(response1.getBody().getObject().getString("requestId"), response2.getBody().getObject().getString("requestId"))
assertEquals(2, MockServer.timesCalled)
Assertions.assertEquals(response1.getBody().getObject().getString("requestId"), response2.getBody().getObject().getString("requestId"))
assertEquals(1, MockServer.timesCalled)
assertFalse(Unirest.isRunning())
assertFalse(Unirest.isRunning())
Assertions.assertFalse(back.isSecure())
assertFalse(c.isSecure())
Assertions.assertFalse(response.isSuccess())
Assertions.assertFalse(response.isSuccess())
Assertions.assertFalse(result.getParsingError().isPresent())
Assertions.assertEquals("", result.getBody())
Assertions.assertEquals(0, resp.getHeaders().get("Content-Encoding").size())
Assertions.assertEquals(0, resp.getHeaders().get("Content-Encoding").size())
assertEquals(2, metric.routes.get(GET).size())
assertEquals(1, metric.routes.get("http://localhost:4567/get/foo/passed?fruit=orange").size())
assertEquals(1, metric.routes.get("http://localhost:4567/get/{params}/passed").size())
assertEquals(2, metric.routes.get("GET").size())
assertEquals(1, metric.routes.get("DELETE").size())
assertEquals(1L, metric.countResponses(200))
assertEquals(2L, metric.countResponses(301))
assertEquals(1L, metric.countResponses(400))
assertEquals(1L, metric.countResponses(200))
assertEquals(1L, metric.countResponses(200))
assertEquals("Something horrible happened", metric.routes.get(GET).get(0).e.getMessage())
assertEquals("Connection refused", metric.routes.get("http://localhost:0000").get(0).e.getMessage())
assertEquals(1, metric.routes.get("http://localhost:0000").size())
assertTrue(exTime > 0L)
assertEquals("localhost:4567", map.get("host()"))
assertEquals("/sparkle/joy/yippy", map.get("uri()"))
assertEquals("http://localhost:4567/sparkle/joy/yippy", map.get("url()"))
assertEquals("", map.get("contextPath()"))
assertEquals("/sparkle/joy/yippy", map.get("pathInfo()"))
assertEquals("food=hamberders&colour=red", map.get("queryString()"))
assertSame(Unirest.get(MockServer.GET).asString(), Unirest.get(MockServer.GET).asString())
assertNotSame(Unirest.get(MockServer.GET).asString(), Unirest.get(MockServer.GET).asObject(RequestCapture.class))
assertEquals(2, MockServer.timesCalled)
assertSame(Unirest.get(MockServer.GET).asString(), Unirest.get(MockServer.GET).asString())
assertEquals(3, MockServer.timesCalled)
assertSame(Unirest.get(MockServer.GET).asString(), Unirest.get(MockServer.POST).asString())
assertEquals(1, MockServer.timesCalled)
assertTrue(Unirest.config().getObjectMapper() instanceof JsonObjectMapper)
assertEquals("bar", f.bar)
Assertions.assertEquals(200, i.getStatus())
Assertions.assertEquals(null, i.getBody())
assertTrue(mapper.readWasCalled)
assertTrue(mapper.writeWasCalled)
assertNull(request.getBody())
Assertions.assertTrue(request.getParsingError().isPresent())
Assertions.assertEquals("kong.unirest.UnirestException: com.fasterxml.jackson.core.JsonParseException: Unrecognized token 'You': was expecting (JSON String, Number, Array, Object or token 'null', 'true' or 'false')\n" + " at [Source: (String)\"You did something bad\"; line: 1, column: 4]", request.getParsingError().get().getMessage())
Assertions.assertEquals("You did something bad", request.getParsingError().get().getOriginalBody())
assertNull(request.getBody())
Assertions.assertTrue(request.getParsingError().isPresent())
Assertions.assertEquals("kong.unirest.UnirestException: com.fasterxml.jackson.core.JsonParseException: Unrecognized token 'You': was expecting (JSON String, Number, Array, Object or token 'null', 'true' or 'false')\n" + " at [Source: (String)\"You did something bad\"; line: 1, column: 4]", request.getParsingError().get().getMessage())
Assertions.assertEquals("You did something bad", request.getParsingError().get().getOriginalBody())
assertNull(request.getBody())
Assertions.assertTrue(request.getParsingError().isPresent())
Assertions.assertEquals("kong.unirest.UnirestException: com.fasterxml.jackson.core.JsonParseException: Unrecognized token 'You': was expecting (JSON String, Number, Array, Object or token 'null', 'true' or 'false')\n" + " at [Source: (String)\"You did something bad\"; line: 1, column: 4]", request.getParsingError().get().getMessage())
Assertions.assertEquals("You did something bad", request.getParsingError().get().getOriginalBody())
assertEquals(Arrays.asList(1, 2, 3), error.foo)
assertEquals(test.toFile().getPath(), result.getPath())
assertEquals(test.toFile().getPath(), result.getPath())
assertTrue(com.google.common.io.Files.equal(f1, f2))
Assertions.assertTrue(f2.getParsingError().isPresent())
assertTrue(f2.getParsingError().get().getCause().getCause() instanceof FileAlreadyExistsException)
assertEquals(f1, f2)
assertEquals(f1, f2)
Assertions.assertEquals(mock, Unirest.get("http://localhost/getme").asEmpty())
assertTrue(ManagementFactory.getThreadMXBean().getThreadCount() < startingCount + 10)
assertEquals("Tron", part.getValue())
assertNull(b.getField("Movie"))
assertEquals("band=Talking+Heads", part.toString())
assertEquals("Talking Heads", part.getValue())
assertEquals("application/x-www-form-urlencoded; charset=UTF-8", part.getContentType())
assertEquals(String.class, part.getPartType())
assertEquals("[binary data length=0]", bytes.toString())
assertEquals("zombo.com", host.getHostName())
assertNull(host.getAddress())
assertEquals(-1, host.getPort())
assertEquals("http", host.getSchemeName())
assertEquals("zombo.com", host.getHostName())
assertNull(host.getAddress())
assertEquals(8080, host.getPort())
assertEquals("http", host.getSchemeName())
assertEquals("zombo.com", host.getHostName())
assertEquals("homestarrunner.com", host.getHostName())
assertEquals(InetAddress.getByName("127.0.0.1"), host.getAddress())
assertNull(host)
assertTrue(fooCast.isPresent())
assertEquals(foo, fooCast.get())
assertTrue(Util.tryCast(new Bar(), Foo.class).isPresent())
assertEquals(88, manager.getMaxTotal())
assertEquals(42, manager.getDefaultMaxPerRoute())
assertEquals(apache.toString(), unirest.toString())
assertEquals(apache.toString(), org.apache.http.entity.ContentType.parse(unirest.toString()).toString())
assertEquals(p, o)
assertEquals(q, w)
assertNotEquals(q, e)
assertEquals(q, w)
assertNotEquals(q, e)
assertEquals("http://somwhere/fruit", new Path("/fruit", "http://somwhere").toString())
assertEquals("http://somwhere/fruit", new Path("http://somwhere/fruit", "http://elsewhere/rocks").toString())
assertSame(cache.wrap(client).request(new HttpRequestNoBody(config, GET, "/"), null, Object.class), cache.wrap(client).request(new HttpRequestNoBody(config, GET, "/"), null, Object.class))
assertEquals(1, client.invokes)
assertSame(cache.wrapAsync(client).request(new HttpRequestNoBody(config, GET, "/"), null, null, Empty.class), cache.wrapAsync(client).request(new HttpRequestNoBody(config, GET, "/"), null, null, Empty.class))
assertEquals(1, client.invokes)
assertNotSame(cache.wrap(client).request(new HttpRequestNoBody(config, GET, "/"), null, Object.class), cache.wrapAsync(client).request(new HttpRequestNoBody(config, GET, "/"), null, null, Object.class))
assertEquals(2, client.invokes)
assertNotSame(cache.wrap(client).request(new HttpRequestNoBody(config, GET, "/"), r -> new StringResponse(new TestRawResponse(config), ""), String.class), cache.wrap(client).request(new HttpRequestNoBody(config, GET, "/"), r -> new BasicResponse(new TestRawResponse(config), ""), Empty.class))
assertEquals(2, client.invokes)
assertFalse(part.isFile())
assertFalse(bytes.isFile())
assertFalse(Util.tryCast("foo", Foo.class).isPresent())
assertFalse(Util.tryCast(null, Foo.class).isPresent())
assertFalse(body.isFile())
assertEquals("Hi Mom", body.toString())
assertEquals("Hi Mom", body.getValue())
assertEquals(String.class, body.getPartType())
assertEquals(Config.DEFAULT_CONNECT_TIMEOUT, config.getConnectionTimeout())
assertEquals(Config.DEFAULT_SOCKET_TIMEOUT, config.getSocketTimeout())
assertEquals(Config.DEFAULT_MAX_CONNECTIONS, config.getMaxConnections())
assertEquals(Config.DEFAULT_MAX_PER_ROUTE, config.getMaxPerRoutes())
assertEquals("Http Clients are already built in order to build a new config execute Unirest.config().reset() " + "before changing settings. \n" + "This should be done rarely.", ex.getMessage())
assertSame(c, config.getAsyncClient().getClient())
assertSame(c, config.getAsyncClient().getClient())
assertSame(config.getAsyncClient(), config.getAsyncClient())
assertNotSame(c, config.getAsyncClient())
assertEquals(-1, config.getTTL())
assertEquals(42, config.connectionTTL(42, TimeUnit.MILLISECONDS).getTTL())
assertEquals(2520000, config.connectionTTL(42, TimeUnit.MINUTES).getTTL())
assertEquals(43, config.connectionTTL(Duration.ofMillis(43)).getTTL())
assertEquals(2580000, config.connectionTTL(Duration.ofMinutes(43)).getTTL())
assertEquals("java.io.IOException 1\n" + "java.lang.RuntimeException 2\n" + "java.io.IOException 4\n" + "java.lang.RuntimeException 5", ex.getMessage())
assertEquals("Attempted to get a new async client but it was not started. Please ensure it is", ex.getMessage())
assertSame(c, config.getAsyncClient().getClient())
assertSame(cli, config.getClient())
assertTrue(config.shouldAddShutdownHook())
assertTrue(config.isRequestCompressionOn())
assertTrue(config.isAutomaticRetries())
assertSame(cli, config.getAsyncClient())
assertEquals("You may only configure a SSLContext OR a Keystore, but not both", ex.getMessage())
assertEquals("You may only configure a SSLContext OR a Keystore, but not both", ex1.getMessage())
assertEquals("You may only configure a SSLContext OR a Keystore, but not both", ex.getMessage())
assertTrue(config.isRunning())
assertTrue(config.isRunning())
assertEquals(host, config.getProxy().getHost())
assertEquals(port, config.getProxy().getPort())
assertEquals(username, config.getProxy().getUsername())
assertEquals(password, config.getProxy().getPassword())
assertTrue(part.isFile())
assertEquals("uploadfile=foo.xml", part.toString())
assertTrue(part.isFile())
assertEquals("uploadFile=foo.xml", part.toString())
assertEquals("pointer cannot be null", ex.getMessage())
assertEquals("a JSON pointer should start with '/' or '#/'", ex.getMessage())
assertEquals("Path Segment Missing: shwoop", ex.getMessage())
assertEquals("index 5 is out of bounds - the array has 2 elements", ex.getMessage())
assertEquals("bar is not an array index", ex.getMessage())
assertEquals("pointer cannot be null", ex.getMessage())
assertEquals("/foo/g~0h/baz", new JSONPointer("/foo/g~h/baz").toString())
assertEquals("/foo/g~0h/baz", JSONPointer.compile("/foo/g~h/baz").toString())
assertEquals("#/foo/g%7Eh/baz", new JSONPointer("/foo/g~h/baz").toURIFragment())
assertNull(obj.query("/derpa"))
assertEquals("bar", obj.query("/foo/0").toString())
assertEquals(0, obj.query("/"))
assertEquals(1, obj.query("/a~1b"))
assertEquals(2, obj.query("/c%d"))
assertEquals(3, obj.query("/e^f"))
assertEquals(4, obj.query("/g|h"))
assertEquals(5, obj.query("/i\\j"))
assertEquals(6, obj.query("/k\"l"))
assertEquals(7, obj.query("/ "))
assertEquals(8, obj.query("/m~0n"))
assertEquals(true, obj.query("/cucu/0/banana/pants"))
assertEquals(new JSONPointer("/foo/4/n~0t/bar/1").toString(), pointer.toString())
assertEquals(true, o.optBoolean("aBoolean"))
assertEquals("Wakk Wakka", o.optString("aSillyString"))
assertEquals(42, o.optNumber("aNumber"))
assertNotNull(o.optJSONObject("aSub"))
assertTrue(o.isEmpty())
assertTrue(o.isNull("foo"))
assertTrue(o.isNull("foo"))
assertEquals("Invalid JSON", ex.getMessage())
assertTrue(obj.has("foo"))
assertEquals(1, obj.length())
assertEquals(42, obj.getJSONObject("foo").getInt("baz"))
assertEquals("{\"key1\":\"value\",\"key2\":null}", obj.toString())
assertEquals("{\"status\":\"OK\",\"message\":\"hive_1597818501335\"}", jsonObject.toString())
assertEquals("{\n" + "  \"key1\": \"value\",\n" + "  \"key2\": null\n" + "}", obj.toString(3))
assertEquals(Long.MAX_VALUE, obj.getLong("key"))
assertEquals(Long.MAX_VALUE, obj.optLong("key"))
assertEquals(66L, obj.optLong("boo", 66))
assertEquals(0L, obj.optLong("boo"))
assertTrue(obj.getBoolean("key"))
assertTrue(obj.optBoolean("key"))
assertTrue(obj.optBoolean("boo", true))
assertEquals(33, obj.getInt("key"))
assertEquals(33, obj.optInt("key"))
assertEquals(66, obj.optInt("boo", 66))
assertEquals(0, obj.optInt("boo"))
assertEquals(tt, obj.getNumber("key"))
assertEquals(tt, obj.optNumber("key"))
assertEquals(66, obj.optNumber("boo", 66))
assertEquals(0, obj.optNumber("boo"))
assertEquals(BigInteger.valueOf(33), obj.getBigInteger("key"))
assertEquals(BigInteger.valueOf(33), obj.optBigInteger("key", BigInteger.TEN))
assertEquals(BigInteger.TEN, obj.optBigInteger("boo", BigInteger.TEN))
assertEquals(value, obj.getBigDecimal("key"))
assertEquals(value, obj.optBigDecimal("key", BigDecimal.TEN))
assertEquals(BigDecimal.TEN, obj.optBigDecimal("boo", BigDecimal.TEN))
assertEquals("cheese", obj.getString("key"))
assertEquals("45", obj.getString("not"))
assertEquals("cheese", obj.optString("key"))
assertEquals("logs", obj.optString("boo", "logs"))
assertEquals("", obj.optString("boo"))
assertNull(obj.optJSONObject("boo"))
assertTrue(subObj.similar(obj.get("key")))
assertNull(obj.optJSONArray("boo"))
assertTrue(subObj.similar(obj.get("key")))
assertEquals(fruit.orange, obj.getEnum(fruit.class, "key"))
assertEquals(fruit.orange, obj.optEnum(fruit.class, "key"))
assertEquals(fruit.apple, obj.optEnum(fruit.class, "boo", fruit.apple))
assertNull(obj.optEnum(fruit.class, "boo"))
assertEquals("{\"foo\":42}", obj.toString())
assertEquals("{\n" + "  \"foo\": 42,\n" + "  \"bar\": true\n" + "}", obj.toString(3))
assertEquals(7, obj.getJSONArray("foos").get(1))
assertEquals(7, obj.optJSONArray("foos").get(1))
assertNull(obj.optJSONArray("bars"))
assertEquals(str, sw.toString())
assertEquals("{\n" + "  \"foo\": 42,\n" + "  \"bar\": true\n" + "}", sw.toString())
assertEquals(42, obj.remove("foo"))
assertNull(obj.remove("nothing"))
assertEquals("{\"bar\":true}", obj.toString())
assertEquals(0, obj.length())
assertEquals(42, obj.get("bar"))
assertSame(obj, obj.put("bar", 33))
assertEquals(33, obj.get("bar"))
assertEquals("key == null", ex.getMessage())
assertSame(obj, obj.accumulate("bar", 42))
assertEquals(0, obj.length())
assertSame(obj, obj.accumulate("bar", 33))
assertEquals(2, obj.getJSONArray("bar").length())
assertEquals(42, obj.getJSONArray("bar").get(0))
assertEquals(33, obj.getJSONArray("bar").get(1))
assertEquals("Null key.", ex.getMessage())
assertSame(obj, obj.append("bar", 42))
assertEquals(2, obj.getJSONArray("bar").length())
assertEquals(42, obj.getJSONArray("bar").get(0))
assertEquals(33, obj.getJSONArray("bar").get(1))
assertEquals("Null key.", ex.getMessage())
assertSame(obj, obj.put("bar", "not"))
assertEquals("JSONObject[\"bar\"] is not a JSONArray.", ex.getMessage())
assertSame(obj, obj.increment("cool-beans"))
assertEquals(1, obj.get("cool-beans"))
assertEquals(4, obj.get("cool-beans"))
assertSame(obj, obj.put("cool-beans", 1.5))
assertEquals(2.5, obj.get("cool-beans"))
assertSame(obj, obj.putOnce("foo", "bar"))
assertEquals("bar", obj.getString("foo"))
assertSame(obj, obj.putOpt("foo", "bar"))
assertEquals("bar", obj.get("foo"))
assertEquals("qux", obj.get("foo"))
assertEquals(exp, obj.keySet())
assertEquals(exp, newHashSet(obj.keys()))
assertTrue(obj1.similar(obj2))
assertEquals(42, obj.query("/a/b"))
assertEquals(55, map.get("baz"))
assertEquals(21474836475L, map.get("qux"))
assertEquals(42, sub.get("bar"))
assertEquals(newHashSet("foo", "bar", "baz"), newHashSet(names.toList()))
assertNull(o.toJSONArray(new JSONArray()))
assertEquals(new JSONArray(asList("bar", 42)), o.toJSONArray(new JSONArray(asList("foo", "baz"))))
assertEquals(new JSONArray(asList(null, null)), new JSONObject().toJSONArray(new JSONArray(asList("foo", "baz"))))
assertEquals("{\"foo\":[1,2,3]}", o.toString())
assertEquals("{\"foo\":{\"baz\":42}}", o.toString())
assertSame(JSONObject.NULL, JSONObject.stringToValue("null"))
assertEquals(true, JSONObject.stringToValue("true"))
assertEquals(false, JSONObject.stringToValue("false"))
assertEquals(42, JSONObject.stringToValue("42"))
assertEquals(45.25, JSONObject.stringToValue("45.25"))
assertEquals(-45.25, JSONObject.stringToValue("-45.25"))
assertEquals("\"\\\"foo\\\"hoo\"", JSONObject.quote("\"foo\"hoo"))
assertEquals("\"\\\"foo\\\"hoo\"", quote.toString())
assertEquals(42, JSONObject.wrap(42))
assertEquals(42.5, JSONObject.wrap(42.5))
assertSame(JSONObject.NULL, JSONObject.wrap(null))
assertEquals(true, JSONObject.wrap(true))
assertTrue(new JSONArray(asList(1, 2, 3)).similar(JSONObject.wrap(asList(1, 2, 3))))
assertTrue(new JSONArray(asList(1, 2, 3)).similar(JSONObject.wrap(new int[] { 1, 2, 3 })))
assertTrue(new JSONObject(of("f", 1)).similar(JSONObject.wrap(of("f", 1))))
assertTrue(new JSONObject().similar(JSONObject.wrap(new Foo("hi"))))
assertEquals("42", JSONObject.doubleToString(42))
assertEquals("42.5643", JSONObject.doubleToString(42.5643))
assertEquals("42", JSONObject.numberToString(42))
assertEquals("42.5643", JSONObject.numberToString(42.5643f))
assertEquals("null", JSONObject.valueToString(null))
assertEquals("42", JSONObject.valueToString(42))
assertEquals("42.5643", JSONObject.valueToString(42.5643f))
assertEquals("\"Hello World\"", JSONObject.valueToString("Hello World"))
assertEquals(ImmaJson.HI_MOM, JSONObject.valueToString(new ImmaJson()))
assertEquals("{\"bar\":\"me\"}", JSONObject.valueToString(new Foo("me")))
assertEquals("{}", JSONObject.valueToString(new JSONObject()))
assertEquals("[]", JSONObject.valueToString(new JSONArray()))
assertArrayEquals(null, JSONObject.getNames(new JSONObject()))
assertArrayEquals(new String[] { "a", "b" }, JSONObject.getNames(new JSONObject(of("a", 1, "b", 2))))
assertEquals(message, ex.getMessage())
assertEquals(o, value)
assertTrue(type.isInstance(o))
assertNull(array.toJSONObject(new JSONArray(Collections.singletonList("foo"))))
assertNull(array.toJSONObject(null))
assertNull(array.toJSONObject(new JSONArray()))
assertEquals("[1,null]", obj.toString())
assertEquals("JSONArray[0] not a string.", ex.getMessage())
assertEquals(1, zipped.get("one"))
assertEquals("foo", zipped.get("two"))
assertEquals(false, zipped.get("three"))
assertEquals("Foo{bar=fooooo}", array.get(0).toString())
assertEquals("abc", array.get(1))
assertEquals("{\"foo\":\"bar\"}", array.get(2).toString())
assertEquals(2, array.length())
assertEquals("bar", array.getJSONObject(0).getString("foo"))
assertEquals(42, array.getJSONObject(1).getInt("baz"))
assertEquals(nul, array.get(0))
assertEquals(num, array.get(1))
assertEquals(str, array.get(2))
assertEquals(bool, array.get(3))
assertEquals(arr, array.get(4))
assertEquals(obj, array.get(5))
assertSame(obj, obj.put((Number) 33))
assertEquals(33, obj.getNumber(0))
assertEquals(33, obj.optNumber(0))
assertEquals(66.6d, obj.optNumber(1, 66.6d))
assertNull(obj.optNumber(5))
assertSame(obj, obj.put(33.5d))
assertSame(obj, obj.put(33.5f))
assertSame(obj, obj.put(33L))
assertEquals(33L, obj.getLong(0))
assertEquals(33L, obj.optLong(0))
assertEquals(66L, obj.optLong(5, 66))
assertEquals(0L, obj.optLong(5))
assertSame(obj, obj.put(true))
assertTrue(obj.getBoolean(0))
assertTrue(obj.optBoolean(0))
assertTrue(obj.optBoolean(5, true))
assertSame(obj, obj.put(33))
assertEquals(33, obj.getInt(0))
assertEquals(33, obj.optInt(0))
assertEquals(66, obj.optInt(5, 66))
assertEquals(0, obj.optInt(5))
assertSame(obj, obj.put(BigInteger.valueOf(33)))
assertEquals(BigInteger.valueOf(33), obj.getBigInteger(0))
assertEquals(BigInteger.valueOf(33), obj.optBigInteger(0, BigInteger.TEN))
assertEquals(BigInteger.TEN, obj.optBigInteger(5, BigInteger.TEN))
assertSame(obj, obj.put(value))
assertEquals(value, obj.getBigDecimal(0))
assertEquals(value, obj.optBigDecimal(0, BigDecimal.TEN))
assertEquals(BigDecimal.TEN, obj.optBigDecimal(5, BigDecimal.TEN))
assertSame(obj, obj.put("cheese"))
assertEquals("cheese", obj.getString(0))
assertEquals("45", obj.getString(1))
assertEquals("cheese", obj.optString(0))
assertEquals("logs", obj.optString(5, "logs"))
assertEquals("", obj.optString(5))
assertSame(obj, obj.put(subObj))
assertNull(obj.optJSONObject(5))
assertSame(obj, obj.put(subObj))
assertNull(obj.optJSONArray(5))
assertSame(obj, obj.put(fruit.orange))
assertEquals(fruit.orange, obj.getEnum(fruit.class, 0))
assertEquals(fruit.orange, obj.optEnum(fruit.class, 0))
assertEquals(fruit.apple, obj.optEnum(fruit.class, 1, fruit.apple))
assertNull(obj.optEnum(fruit.class, 5))
assertEquals("33.5, 42, \"foo\", true, \"apple\"", array.join(", "))
assertEquals("[33.5,42,\"foo\",true,\"apple\"]", array.toString())
assertEquals("[\n" + "  33.5,\n" + "  42,\n" + "  \"foo\",\n" + "  true,\n" + "  \"apple\"\n" + "]", array.toString(3))
assertTrue(array.get(0) instanceof Double)
assertTrue(array.get(1) instanceof Integer)
assertTrue(array.get(2) instanceof String)
assertTrue(array.get(3) instanceof JSONObject)
assertTrue(array.get(4) instanceof JSONArray)
assertEquals(2, array.getJSONArray(0).get(1))
assertNull(array.optJSONArray(2))
assertEquals(str, sw.toString())
assertEquals("[\n" + "  1,\n" + "  2,\n" + "  3\n" + "]", sw.toString())
assertTrue(remove instanceof JSONObject)
assertEquals(o, remove)
assertEquals(1, array.length())
assertNull(array.remove(55))
assertNull(array.remove(55))
assertEquals(1, array.get(0))
assertEquals(Long.MAX_VALUE, array.get(1))
assertEquals(3.5d, array.get(2))
assertEquals("howdy", array.get(4))
assertEquals("pear", array.get(5))
assertTrue(new JSONObject(of("foo", 22)).similar(array.get(6)))
assertTrue(new JSONArray(asList(1, 2, 3)).similar(array.get(7)))
assertEquals("[1,9223372036854775807,3.5,6.4,\"howdy\",\"pear\",{\"foo\":22},[1,2,3]]", array.toString())
assertEquals(1, array.get(0))
assertEquals(Long.MAX_VALUE, array.get(1))
assertEquals(3.5d, array.get(2))
assertEquals("howdy", array.get(4))
assertEquals("pear", array.get(5))
assertTrue(new JSONObject(of("foo", 22)).similar(array.get(6)))
assertTrue(new JSONArray(asList(1, 2, 3)).similar(array.get(7)))
assertEquals("[1,9223372036854775807,3.5,6.4,\"howdy\",\"pear\",{\"foo\":22},[1,2,3]]", array.toString())
assertEquals(42, obj.query("/0/a/b"))
assertEquals(1, array.length())
assertEquals(ints, array.getJSONArray(0).toList())
assertEquals(4, array.length())
assertEquals(ints, array.toList())
assertEquals(4, array.length())
assertEquals(ints, array.toList())
assertEquals("JSONArray initial value should be a string or collection or array.", ex.getMessage())
assertTrue(array.isNull(1))
assertTrue(array.isNull(2))
assertTrue(array.isNull(33))
assertEquals("[\"Hello World\"]", array.toString())
assertTrue(a1.equals(a1))
assertTrue(a1.equals(a2))
assertEquals(message, ex.getMessage())
assertEquals(HttpMethod.valueOf("GET"), HttpMethod.valueOf("GET"))
assertEquals(HttpMethod.GET, HttpMethod.GET)
assertNotEquals(HttpMethod.valueOf("GET"), HttpMethod.valueOf("PUT"))
assertNotEquals(HttpMethod.GET, HttpMethod.PUT)
assertEquals(HttpMethod.valueOf("GET"), HttpMethod.valueOf("get"))
assertEquals(HttpMethod.GET.all(), HttpMethod.all())
assertEquals("UTF-8", getCharSet(null))
assertEquals("UTF-8", getCharSet(""))
assertEquals("UTF-8", getCharSet("         "))
assertEquals("UTF-8", getCharSet("Content-Type: text/html;"))
assertEquals("UTF-8", getCharSet("Content-Type: text/html; charset="))
assertEquals("LATIN-1", getCharSet("Content-Type: text/html; charset=latin-1"))
assertEquals("KINGON-1", getCharSet(null))
assertEquals("SINDARIN-42", getCharSet(null))
assertEquals("Accepts", h.getName())
assertEquals("application/json", h.getValue())
assertEquals(0, h.size())
assertEquals("a: 1" + ls + "c: 3" + ls + "d: null", toString)
assertEquals(h, j)
assertNotEquals(h, j)
assertEquals("application/json", h.getFirst("Accepts"))
assertEquals("application/xml", h.getFirst("Content-Type"))
assertNotEquals(entry("foo", "qux"), entry("foo", "bar"))
assertNotEquals(entry("qux", "bar"), entry("foo", "bar"))
assertEquals(entry("foo", "bar"), entry("foo", "bar"))
assertEquals(entry("foo", () -> "bar"), entry("foo", "bar"))
assertEquals(entry("foo", () -> "bar"), entry("foo", () -> "bar"))
assertNull(entry("foo", (Supplier<String>) null).getValue())
assertEquals(ZonedDateTime.of(2020, 1, 5, 15, 0, 20, 0, ZoneId.of("GMT")), Util.tryParseToDate("Sun, 05-Jan-2020 15:00:20 GMT"))
assertEquals(ZonedDateTime.of(2020, 3, 6, 16, 5, 35, 0, ZoneId.of("GMT")), Util.tryParseToDate("Fri, 06 Mar 2020 16:05:35 GMT"))
assertEquals(ZonedDateTime.of(2020, 1, 5, 15, 0, 20, 0, ZoneId.of("GMT")), Util.tryParseToDate("Sun, 05-Jan-2020 15:00:20 GMT"))
assertEquals(ZonedDateTime.of(2020, 3, 6, 16, 5, 35, 0, ZoneId.of("GMT")), Util.tryParseToDate("Fri, 06 Mar 2020 16:05:35 GMT"))
assertEquals(Arrays.asList("foo", "bar", "baz"), bodies)
assertEquals(Arrays.asList("foo", "baz"), bodies)
assertEquals(Arrays.asList("foo", "baz"), processed)
assertNull(processed.get(0))
assertEquals("hello", result)
assertEquals(5, recorder.bytesWritten)
assertEquals(5, recorder.totalBytes)
assertEquals(5, recorder.bytesWritten)
assertEquals(5, recorder.totalBytes)
assertEquals(5, recorder.bytesWritten)
assertEquals(5, recorder.totalBytes)
assertEquals(5, recorder.bytesWritten)
assertEquals(5, recorder.totalBytes)
assertTrue(r instanceof MockResponse)
assertSame(e, u.getCause())
assertEquals(1, compound.size())
assertTrue(compound.getInterceptors().get(0) instanceof DefaultInterceptor)
assertEquals(0, compound.size())
assertEquals(2, compound.size())
assertSame(t1, compound.getInterceptors().get(0))
assertSame(t2, compound.getInterceptors().get(1))
assertEquals(1, compound.size())
assertEquals(s, new BaseRequest(new Config(), HttpMethod.GET, s) {
}.url.toString())
assertEquals("{}", actual)
assertEquals("{\"date\":\"1985-07-03T18:00:00.042Z\"}", actual)
assertEquals("{\"date\":\"1985-07-03T00:00:00Z\"}", actual)
assertNull(back.getDate())
assertEquals(489263400042L, back.getDate().getTime())
assertEquals(489196800000L, back.getDate().getTime())
assertEquals(489263400000L, back.getDate().getTime())
assertEquals("Could Not Parse as java.util.Date: Leeeeeeeroy Jenkins!", ex.getMessage())
assertEquals(489263400000L, back.getDate().getTime())
assertEquals(new Date(42), back.getDate())
assertEquals("{\"calendar\":\"1985-07-03T18:00:00.042Z\"}", actual)
assertEquals("{\"calendar\":\"1985-07-03T00:00:00Z\"}", actual)
assertEquals(489263400042L, back.getCalendar().getTimeInMillis())
assertEquals(489263400000L, back.getCalendar().getTimeInMillis())
assertEquals(489263400000L, back.getCalendar().getTimeInMillis())
assertEquals(489196800000L, back.getCalendar().getTimeInMillis())
assertEquals("Could Not Parse as java.util.Calendar: Leeeeeeeroy Jenkins!", ex.getMessage())
assertEquals("{\"zonedDateTime\":\"1985-07-03T18:00:00.042Z\"}", actual)
assertEquals(ZonedDateTime.parse("1985-07-03T18:30:00.042Z"), back.getZonedDateTime())
assertEquals(ZonedDateTime.parse("1985-07-03T18:30:00.042+02:00"), back.getZonedDateTime())
assertEquals("{\"localDateTime\":\"1985-07-03T18:00:00.042\"}", actual)
assertEquals(LocalDateTime.parse("1985-07-03T18:00:00.042"), back.getLocalDateTime())
assertEquals(LocalDateTime.parse("1985-07-03T00:00"), back.getLocalDateTime())
assertEquals("{\"localDate\":\"1985-07-03\"}", actual)
assertEquals(LocalDate.parse("1985-07-03"), back.getLocalDate())
assertEquals(LocalDate.parse("1985-07-03"), back.getLocalDate())
assertEquals("{\"test\":\"it's a && b || c + 1!?\"}", res)
assertEquals(1000, parseToMillies("1"))
assertEquals(10000, parseToMillies("10"))
assertEquals(1500, parseToMillies("1.5"))
assertEquals(50, parseToMillies(".05"))
assertEquals(1000, parseToMillies("Wed, 21 Oct 2015 07:28:01 GMT"))
assertEquals("bar", node.getObject().getString("foo"))
assertEquals("bar", node.getArray().getJSONObject(0).getString("foo"))
assertEquals(json, node.toString())
assertTrue(node.isArray())
assertEquals("bar", node.getArray().getJSONObject(0).getString("foo"))
assertNull(node.getObject())
assertEquals(json, node.toString())
assertEquals("{}", new JsonNode("").toString())
assertEquals("{}", new JsonNode(null).toString())
assertEquals(new JsonPatchItem(add, "/foo", "bar"), new JsonPatchItem(add, "/foo", "bar"))
assertEquals(new JsonPatchItem(remove, "/foo"), new JsonPatchItem(remove, "/foo"))
assertNotEquals(new JsonPatchItem(add, "/foo", "bar"), new JsonPatchItem(add, "/foo", "baz"))
assertNotEquals(new JsonPatchItem(add, "/foo", "bar"), new JsonPatchItem(replace, "/foo", "bar"))
assertNotEquals(new JsonPatchItem(remove, "/foo"), new JsonPatchItem(remove, "/foo", "baz"))
assertEquals(1, s.size())
assertEquals(i, i)
assertNotEquals(null, i)
assertNotEquals(new Object(), i)
assertEquals(add, i.getOp())
assertEquals("/foo", i.getPath())
assertEquals("bar", i.getValue())
assertEquals(42, request.getSocketTimeout())
assertEquals(111, request.getSocketTimeout())
assertEquals(42, request.getConnectTimeout())
assertEquals(111, request.getConnectTimeout())
assertEquals(111, copy.getSocketTimeout())
assertEquals(222, copy.getConnectTimeout())
assertEquals(cp, request.getProxy())
assertEquals("bar", request.getProxy().getHost())
assertEquals(7979, request.getProxy().getPort().intValue())
assertEquals(new TestRequest(GET, "/path"), new TestRequest(GET, "/path"))
assertNotEquals(new TestRequest(GET, "/path"), new TestRequest(HttpMethod.HEAD, "/path"))
assertNotEquals(new TestRequest(GET, "/path"), new TestRequest(GET, "/derp"))
assertEquals(new TestRequest(of("Accept", "json")), new TestRequest(of("Accept", "json")))
assertNotEquals(new TestRequest(of("Accept", "json")), new TestRequest(of("Accept", "xml")))
assertNotEquals(new TestRequest(of("Accept", "json")), new TestRequest(of("Accept", "json", "x-header", "cheese")))
assertTrue(ChronoUnit.MILLIS.between(request.getCreationTime(), Instant.now()) < 10)
assertEquals(r1.getCreationTime(), r2.getCreationTime())
assertEquals(50L, ChronoUnit.MINUTES.between(r1.getCreationTime(), r3.getCreationTime()))
assertTrue(part.isFile())
assertEquals("uploadFile=foo.xml", part.toString())
assertEquals("foo", test.text)
assertEquals(42, test.nmbr)
assertEquals("bar", test.another.text)
assertEquals(666, test.another.nmbr)
assertEquals(null, test.another.another)
assertEquals("foo", test.text)
assertEquals(42, test.nmbr)
assertEquals("bar", test.another.text)
assertEquals(666, test.another.nmbr)
assertEquals(null, test.another.another)
