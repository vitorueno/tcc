assertTrue(result.length > input.length)
Assertions.assertEquals(2, countPages(target))
Assertions.assertEquals(5, countPages(target))
Assertions.assertEquals(expected, color)
Assertions.assertEquals(expected, WebColors.getRGBColor("#f09"))
Assertions.assertEquals(expected, WebColors.getRGBColor("#F09"))
Assertions.assertEquals(expected, WebColors.getRGBColor("#ff0099"))
Assertions.assertEquals(expected, WebColors.getRGBColor("#FF0099"))
Assertions.assertEquals(expected, WebColors.getRGBColor("#f09a"))
Assertions.assertEquals(expected, WebColors.getRGBColor("#F09A"))
Assertions.assertEquals(expected, WebColors.getRGBColor("#ff0099aa"))
Assertions.assertEquals(expected, WebColors.getRGBColor("#FF0099aa"))
Assertions.assertEquals(expected, WebColors.getRGBColor("rgb(255,0,153)"))
Assertions.assertEquals(expected, WebColors.getRGBColor("rgb(255, 0, 153)"))
Assertions.assertEquals(expected, WebColors.getRGBColor("rgb(100%,0%,60%)"))
Assertions.assertEquals(expected, WebColors.getRGBColor("rgb(100%, 0%, 60%)"))
Assertions.assertEquals(expected, WebColors.getRGBColor("rgb(255 0 153)"))
Assertions.assertEquals(expected, WebColors.getRGBColor("rgb(255, 0, 153, 1)"))
Assertions.assertEquals(expected, WebColors.getRGBColor("rgb(255, 0, 153, 100%)"))
Assertions.assertEquals(expected, WebColors.getRGBColor("rgb(255 0 153 / 1)"))
Assertions.assertEquals(expected, WebColors.getRGBColor("rgb(255 0 153 / 100%)"))
Assertions.assertEquals(expected2, WebColors.getRGBColor("rgb(255, 0, 153, 0.6)"))
Assertions.assertEquals(expected2, WebColors.getRGBColor("rgb(255, 0, 153, 60%)"))
Assertions.assertEquals(expected2, WebColors.getRGBColor("rgb(255 0 153 / 0.6)"))
Assertions.assertEquals(expected2, WebColors.getRGBColor("rgb(255 0 153 / 60%)"))
Assertions.assertEquals(expected, WebColors.getRGBColor("rgba(255, 0, 153, 1)"))
Assertions.assertEquals(expected, WebColors.getRGBColor("rgba(255, 0, 153, 100%)"))
Assertions.assertEquals(expected, WebColors.getRGBColor("rgba(255 0 153 / 1)"))
Assertions.assertEquals(expected, WebColors.getRGBColor("rgba(255 0 153 / 100%)"))
Assertions.assertEquals(expected2, WebColors.getRGBColor("rgba(255, 0, 153, 0.6)"))
Assertions.assertEquals(expected2, WebColors.getRGBColor("rgba(255, 0, 153, 60%)"))
Assertions.assertEquals(expected2, WebColors.getRGBColor("rgba(255 0 153 / 0.6)"))
Assertions.assertEquals(expected2, WebColors.getRGBColor("rgba(255 0 153 / 60%)"))
Assertions.assertEquals(expected, WebColors.getRGBColor("rgb(255, 0, 153.0)"))
Assertions.assertEquals(expected, WebColors.getRGBColor("rgb(255, 0, 153.6, 1)"))
Assertions.assertEquals(expected, WebColors.getRGBColor("rgb(2.55e2, .1e0, 1.53e2, +.1e3%)"))
Assertions.assertEquals(expected, WebColors.getRGBColor("hsl(270,60%,70%)"))
Assertions.assertEquals(expected, WebColors.getRGBColor("hsl(270, 60%, 70%)"))
Assertions.assertEquals(expected, WebColors.getRGBColor("hsl(270 60% 70%)"))
Assertions.assertEquals(expected, WebColors.getRGBColor("hsl(270deg, 60%, 70%)"))
Assertions.assertEquals(expected, WebColors.getRGBColor("hsl(4.71239rad, 60%, 70%)"))
Assertions.assertEquals(expected, WebColors.getRGBColor("hsl(.75turn, 60%, 70%)"))
Assertions.assertEquals(expected, WebColors.getRGBColor("hsl(270, 60%, 70%, .15)"))
Assertions.assertEquals(expected, WebColors.getRGBColor("hsl(270, 60%, 70%, 15%)"))
Assertions.assertEquals(expected, WebColors.getRGBColor("hsl(270 60% 70% / .15)"))
Assertions.assertEquals(expected, WebColors.getRGBColor("hsl(270 60% 70% / 15%)"))
Assertions.assertEquals(expected, WebColors.getRGBColor("hsla(270, 60%, 70%, .15)"))
Assertions.assertEquals(expected, WebColors.getRGBColor("hsla(270, 60%, 70%, 15%)"))
Assertions.assertEquals(expected, WebColors.getRGBColor("hsla(270 60% 70% / .15)"))
Assertions.assertEquals(expected, WebColors.getRGBColor("hsla(270 60% 70% / 15%)"))
assertEquals(3, actualHeaderFooter.getChunks().size())
assertEquals("before", actualHeaderFooter.getChunks().get(0).toString())
assertEquals("0", actualHeaderFooter.getChunks().get(1).toString())
assertEquals("after", actualHeaderFooter.getChunks().get(2).toString())
assertEquals(2, actualHeaderFooter.getChunks().size())
assertEquals("before", actualHeaderFooter.getChunks().get(0).toString())
assertEquals("0", actualHeaderFooter.getChunks().get(1).toString())
assertEquals(1, actualHeaderFooter.getChunks().size())
assertEquals("before", actualHeaderFooter.getChunks().get(0).toString())
assertEquals(6, actualHeaderFooter.getChunks().size())
assertNotEquals("\n", actualHeaderFooter.getChunks().get(5).toString())
assertEquals("1 1.1 1.2 ", actualHeaderFooter.getChunks().get(0).toString())
assertEquals("1.4 ", actualHeaderFooter.getChunks().get(5).toString())

softly.assertAll()
Assertions.assertEquals(52.0, footer.getTop())
Assertions.assertEquals(92.0, footerTop)
Assertions.assertEquals(60.0, imageBottom)
Assertions.assertEquals(36.0, imageIndentLeft)
Assertions.assertEquals(76.0, footerTop)
Assertions.assertEquals(44.0, imageBottom)
Assertions.assertEquals(527.0, imageIndentRight)
Assertions.assertEquals(76.0, footerTop)
Assertions.assertEquals(44.0, imageBottom)
Assertions.assertEquals(281.5, imageIndentLeft)
Assertions.assertEquals(76.0, footerTop)
Assertions.assertEquals(44.0, imageBottom)
Assertions.assertEquals(281.5, imageIndentLeft)
assertEquals("lvi", getString(56))
assertEquals("mmcmxcix", getString(2999))
assertEquals("mmm", getString(3000))
assertAll(() -> assertThat(getString(input), is(expected)), () -> assertThat(getString(input, false), is(expected.toUpperCase())))
assertNotNull(image.getUrl())
assertNotNull(image.getUrl())
Assertions.assertEquals(1, names.size())
assertNotEquals(font.createSubsetPrefix(), font.createSubsetPrefix())
assertNotEquals(font.createSubsetPrefix(), font.createSubsetPrefix())
assertEquals(subsetPrefixOne, subsetPrefixTwo)
Assertions.assertTrue(comparePdf())
assertTimeout(ofSeconds(10), () -> {
    Document document = new Document(PageSize.A4);
    PdfWriter writer = PdfWriter.getInstance(document, Files.newOutputStream(Paths.get("test.pdf")));
    Table table = new Table(2);
    Cell cell1 = new Cell("any text");
    cell1.setVerticalAlignment(VerticalAlignment.BOTTOM);
    table.addCell(cell1);
    StringBuilder largeStr = new StringBuilder();
    for (int i = 0; i < 45; i++) {
        largeStr.append(String.format("this is to test-> row %d\n", i));
    }
    Cell cell2 = new Cell(new Phrase(largeStr.toString()));
    table.addCell(cell2);
    document.open();
    document.add(table);
    document.close();
})
assertTimeout(ofSeconds(10), () -> {
    Document document = new Document(PageSize.A4);
    PdfWriter writer = PdfWriter.getInstance(document, Files.newOutputStream(Paths.get("test.pdf")));
    Table table = new Table(2);
    Cell cell1 = new Cell("any text\nany text\nany text");
    cell1.setVerticalAlignment(VerticalAlignment.CENTER);
    table.addCell(cell1);
    StringBuilder largeStr = new StringBuilder();
    for (int i = 0; i < 86; i++) {
        largeStr.append(String.format("this is to test-> row %d\n", i));
    }
    Cell cell2 = new Cell(new Phrase(largeStr.toString()));
    table.addCell(cell2);
    document.open();
    document.add(table);
    document.close();
})
Assertions.assertEquals(result.length, 0)
Assertions.assertEquals(expected, actual)
Assertions.assertEquals(Document.getVersion(), r.getInfo().get("Producer"))
Assertions.assertEquals(AUTHOR_NAME, r.getInfo().get("Author"))
Assertions.assertEquals(TITLE, r.getInfo().get("Title"))
Assertions.assertEquals(Document.getVersion(), r.getInfo().get("Producer"))
Assertions.assertEquals("Author1", r.getInfo().get("Author"))
Assertions.assertEquals("Title2", r.getInfo().get("Title"))
Assertions.assertEquals("Subject3", r.getInfo().get("Subject"))
Assertions.assertEquals(pdfTextExtractor.getTextFromPage(1), "data\ttable")
Assertions.assertEquals(pdfTextExtractor.getTextFromPage(1), "ΧαίρετεGreek -")
assertEquals(1, tree.size())
assertEquals(pdfBoolean, tree.get(keyName))
Assertions.assertNotNull(result)
Assertions.assertTrue(sData.contains("(LibreOffice 6.0; modified using OpenPDF"))
assertNotNull(result)
assertTrue(result.contains("2. This is chapter 2"))
assertTrue(result.contains("watermark-concatenate"))
assertArrayEquals(expectedOutput, str.toCharArray())
assertArrayEquals(expectedOutput, str.toCharArray())
assertArrayEquals(expectedOutput, str.toCharArray())
Assertions.assertEquals("✧❒❅❅❋", pdfTextExtractor.getTextFromPage(1))
Assertions.assertEquals("ετε", pdfTextExtractor.getTextFromPage(1))
assertEquals(font.getStyle(), style)
assertTrue(FileUtils.contentEquals(original, current))
assertNotNull(list)
assertEquals(3, list.size())
assertNotNull(list)
assertEquals(3, list.size())
assertEquals("ABC", list.get(0).get("Title"))
assertEquals("", list.get(1).get("Title"))
assertEquals("", list.get(2).get("Title"))
Assertions.assertEquals(text, "Hier fetter Text")
