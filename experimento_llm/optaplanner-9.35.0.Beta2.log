Assertions.assertEquals("0", result.get("score"))
Assertions.assertNotNull(result.get("entity.0.fullValue"))
Assertions.assertNotNull(result.get("entity.1.fullValue"))
assertNotNull(solverConfig)
assertEquals(DomainAccessType.GIZMO, solverConfig.getDomainAccessType())
assertEquals(TestdataQuarkusSolution.class, solverConfig.getSolutionClass())
assertEquals(Collections.singletonList(TestdataQuarkusEntity.class), solverConfig.getEntityClassList())
assertEquals(TestdataQuarkusConstraintProvider.class, solverConfig.getScoreDirectorFactoryConfig().getConstraintProviderClass())
assertEquals(3L, solverConfig.getTerminationConfig().getSecondsSpentLimit().longValue())
assertNotNull(solverFactory)
assertNotNull(solverFactory.buildSolver())
assertNotNull(solverConfig)
assertEquals(TestdataQuarkusSolution.class, solverConfig.getSolutionClass())
assertEquals(DomainAccessType.GIZMO, solverConfig.getDomainAccessType())
assertEquals(Collections.singletonList(TestdataQuarkusEntity.class), solverConfig.getEntityClassList())
assertEquals(TestdataQuarkusConstraintProvider.class, solverConfig.getScoreDirectorFactoryConfig().getConstraintProviderClass())
assertEquals(2L, solverConfig.getTerminationConfig().getSecondsSpentLimit().longValue())
assertNotNull(solverFactory)
assertNotNull(solverFactory.buildSolver())
assertEquals(EnvironmentMode.FULL_ASSERT, solverConfig.getEnvironmentMode())
assertTrue(solverConfig.getDaemon())
assertEquals("2", solverConfig.getMoveThreadCount())
assertEquals(DomainAccessType.REFLECTION, solverConfig.getDomainAccessType())
assertEquals(null, solverConfig.getScoreDirectorFactoryConfig().getConstraintStreamImplType())
assertNotNull(solverFactory)
assertEquals(Duration.ofHours(4), solverConfig.getTerminationConfig().getSpentLimit())
assertEquals(Duration.ofHours(5), solverConfig.getTerminationConfig().getUnimprovedSpentLimit())
assertEquals(SimpleScore.of(0).toString(), solverConfig.getTerminationConfig().getBestScoreLimit())
assertNotNull(solverConfig)
assertEquals(TestdataQuarkusSolution.class, solverConfig.getSolutionClass())
assertEquals(DomainAccessType.GIZMO, solverConfig.getDomainAccessType())
assertEquals(Collections.singletonList(TestdataQuarkusEntity.class), solverConfig.getEntityClassList())
assertEquals(TestdataQuarkusConstraintProvider.class, solverConfig.getScoreDirectorFactoryConfig().getConstraintProviderClass())
assertNull(solverConfig.getTerminationConfig().getSecondsSpentLimit())
assertNotNull(solverFactory)
assertNotNull(solverFactory.buildSolver())
assertNotNull(solution)
Assertions.assertEquals("secondsSpentLimit=2", resp)
Assertions.assertEquals("secondsSpentLimit=9", resp)
assertNotNull(solution)
assertEquals(entityList.size(), solution.getEntityList().size())
fail("Build should fail")
assertNotNull(solverFactory)
assertNotNull(scoreManager)
assertSame(((DefaultSolverFactory<?>) solverFactory).getScoreDirectorFactory(), ((DefaultSolutionManager<?, ?>) solutionManager).getScoreDirectorFactory())
assertNotNull(solverManager)
assertSame(solverFactory, ((DefaultSolverManager<TestDataKitchenSinkSolution, Long>) solverManager).getSolverFactory())
assertNotNull(solution)
assertEquals(1, solution.getPlanningEntityProperty().testGetIntVariable())
assertEquals("A", solution.getPlanningEntityProperty().testGetStringVariable())
assertNotNull(solverFactory)
assertSame(((DefaultSolverFactory<TestdataQuarkusSolution>) solverFactory).getScoreDirectorFactory(), ((DefaultSolutionManager<TestdataQuarkusSolution, SimpleScore>) solutionManager).getScoreDirectorFactory())
assertNotNull(solverManager)
assertSame(solverFactory, ((DefaultSolverManager<TestdataQuarkusSolution, Long>) solverManager).getSolverFactory())
assertNotNull(solutionManager)
assertNotNull(solution)
assertTrue(solution.getScore().score() >= 0)
Assertions.assertEquals(solution.score.score(), 0)
assertEquals("7", solverConfigProperties.get("termination.bestScoreLimit"))
assertEquals("3", solverConfigProperties.get("moveThreadCount"))
assertEquals("10", solverManagerProperties.get("parallelSolverCount"))
assertEquals(TestdataQuarkusConstraintProvider.class, solverConfig.getScoreDirectorFactoryConfig().getConstraintProviderClass())
assertNotNull(solverFactory.buildSolver())
assertEquals(Collections.singletonList(CONSTRAINTS_DRL), solverConfig.getScoreDirectorFactoryConfig().getScoreDrlList())
assertNotNull(solverFactory.buildSolver())
assertEquals(Collections.singletonList("constraints.drl"), solverConfig.getScoreDirectorFactoryConfig().getScoreDrlList())
assertNotNull(solverFactory.buildSolver())
assertNotNull(solverFactory)
assertSame(((DefaultSolverFactory<TestdataQuarkusSolution>) solverFactory).getScoreDirectorFactory(), ((DefaultSolutionManager<TestdataQuarkusSolution, SimpleScore>) solutionManager).getScoreDirectorFactory())
assertNotNull(solverManager)
assertSame(solverFactory, ((DefaultSolverManager<TestdataQuarkusSolution, Long>) solverManager).getSolverFactory())
assertNotNull(scoreManager)
assertNotNull(solution)
assertTrue(solution.getScore().score() >= 0)
assertEquals("Extra Data", solution.getExtraData())
assertEquals(ConstraintStreamImplType.BAVET, solverConfig.getScoreDirectorFactoryConfig().getConstraintStreamImplType())
assertNotNull(solverFactory)
fail("Build should fail", "A execução falhou por uma causa deliberada")
Assertions.assertEquals(ConstraintStreamImplType.DROOLS, ((DefaultConstraintVerifier<?, ?, ?>) constraintVerifier).getConstraintStreamImplType())
Assertions.assertEquals(!ConfigUtils.isNativeImage(), ((DefaultConstraintVerifier<?, ?, ?>) constraintVerifier).isDroolsAlphaNetworkCompilationEnabled())
Assertions.assertEquals(ConstraintStreamImplType.BAVET, ((DefaultConstraintVerifier<?, ?, ?>) constraintVerifier).getConstraintStreamImplType())
Assertions.assertNotNull(benchmarkResultDirectory)
Assertions.assertTrue(Files.isDirectory(benchmarkResultDirectoryPath))
Assertions.assertTrue(Files.isRegularFile(benchmarkResultPath))
Assertions.assertTrue(xmlPath.getBoolean("plannerBenchmarkResult.solverBenchmarkResult.singleBenchmarkResult.subSingleBenchmarkResult.succeeded"))
Assertions.assertEquals(TestdataQuarkusSolution.class, solverConfig.getSolutionClass())
Assertions.assertEquals(2, solverConfig.getEntityClassList().size())
Assertions.assertTrue(solverConfig.getEntityClassList().contains(TestdataQuarkusEntity.class))
Assertions.assertTrue(solverConfig.getEntityClassList().contains(TestdataQuarkusOtherEntity.class))
Assertions.assertEquals(5, plannerBenchmarkConfig.getInheritedSolverBenchmarkConfig().getSolverConfig().getTerminationConfig().getMillisecondsSpentLimit())
Assertions.assertEquals(List.of(TestdataQuarkusEntity.class), plannerBenchmarkConfig.getInheritedSolverBenchmarkConfig().getSolverConfig().getEntityClassList())
Assertions.assertEquals(TestdataQuarkusSolution.class, childBenchmarkConfig.getSolverConfig().getSolutionClass())
Assertions.assertNull(childBenchmarkConfig.getSolverConfig().getEntityClassList())
Assertions.assertEquals(TestdataQuarkusConstraintProvider.class, childBenchmarkConfig.getSolverConfig().getScoreDirectorFactoryConfig().getConstraintProviderClass())
Assertions.assertEquals(TestdataQuarkusConstraintProvider.class, childBenchmarkConfig.getSolverConfig().getSolutionClass())
Assertions.assertNull(childBenchmarkConfig.getSolverConfig().getEntityClassList())
Assertions.assertEquals(TestdataQuarkusConstraintProvider.class, childBenchmarkConfig.getSolverConfig().getScoreDirectorFactoryConfig().getConstraintProviderClass())
Assertions.assertEquals(2, plannerBenchmarkConfig.getSolverBenchmarkConfigList().get(0).getSolverConfig().getPhaseConfigList().size())
Assertions.assertEquals(3, plannerBenchmarkConfig.getSolverBenchmarkConfigList().get(1).getSolverConfig().getPhaseConfigList().size())
Assertions.assertEquals("The following " + SolverBenchmarkConfig.class.getSimpleName() + " do not " + "have termination configured: [First Fit and Local Search without Termination]. " + "At least one of the properties " + "quarkus.optaplanner.benchmark.solver.termination.spent-limit, " + "quarkus.optaplanner.benchmark.solver.termination.best-score-limit, " + "quarkus.optaplanner.benchmark.solver.termination.unimproved-spent-limit " + "is required if termination is not configured in a solver benchmark and the " + "inherited solver benchmark config.", exception.getMessage())
Assertions.assertEquals("At least one of the properties quarkus.optaplanner.benchmark.solver.termination.spent-limit, quarkus.optaplanner.benchmark.solver.termination.best-score-limit, quarkus.optaplanner.benchmark.solver.termination.unimproved-spent-limit is required if termination is not configured in the inherited solver benchmark config and solverBenchmarkBluePrint is used.", exception.getMessage())
