assertEquals("<table>" + LINE_END + " <thead>" + LINE_END + "  <tr>" + LINE_END + "   <th>v</th>" + LINE_END + "   <th>v2</th>" + LINE_END + "  </tr>" + LINE_END + " </thead>" + LINE_END + " <tbody>" + LINE_END + "  <tr>" + LINE_END + "   <td>1</td>" + LINE_END + "   <td>1</td>" + LINE_END + "  </tr>" + LINE_END + "  <tr>" + LINE_END + "   <td>2</td>" + LINE_END + "   <td>2</td>" + LINE_END + "  </tr>" + LINE_END + "  <tr>" + LINE_END + "   <td></td>" + LINE_END + "   <td></td>" + LINE_END + "  </tr>" + LINE_END + " </tbody>" + LINE_END + "</table>", output)
assertEquals("<table>" + LINE_END + " <thead>" + LINE_END + "  <tr>" + LINE_END + "   <th>v</th>" + LINE_END + "   <th>v2</th>" + LINE_END + "  </tr>" + LINE_END + " </thead>" + LINE_END + " <tbody>" + LINE_END + "  <tr class=\"even\">" + LINE_END + "   <td>1</td>" + LINE_END + "   <td>1</td>" + LINE_END + "  </tr>" + LINE_END + "  <tr class=\"odd\">" + LINE_END + "   <td>2</td>" + LINE_END + "   <td>2</td>" + LINE_END + "  </tr>" + LINE_END + "  <tr class=\"even\">" + LINE_END + "   <td></td>" + LINE_END + "   <td></td>" + LINE_END + "  </tr>" + LINE_END + " </tbody>" + LINE_END + "</table>", output)
assertEquals("<table>" + LINE_END + " <thead>" + LINE_END + "  <tr>" + LINE_END + "   <th>data</th>" + LINE_END + "  </tr>" + LINE_END + " </thead>" + LINE_END + " <tbody>" + LINE_END + "  <tr>" + LINE_END + "   <td><p>foo</p></td>" + LINE_END + "  </tr>" + LINE_END + " </tbody>" + LINE_END + "</table>", output)
assertEquals("<table>" + LINE_END + " <thead>" + LINE_END + "  <tr>" + LINE_END + "   <th>data</th>" + LINE_END + "  </tr>" + LINE_END + " </thead>" + LINE_END + " <tbody>" + LINE_END + "  <tr>" + LINE_END + "   <td>&lt;p&gt;foo&lt;/p&gt;</td>" + LINE_END + "  </tr>" + LINE_END + " </tbody>" + LINE_END + "</table>", output)
assertEquals(json, writer.toString())
assertEquals(json, writer.toString())
assertEquals(json, output)
assertEquals(2, table.columnCount())
assertEquals(3, table.rowCount())
assertEquals("Date", table.column(0).name())
assertEquals("Value", table.column(1).name())
assertEquals(ColumnType.LONG, table.typeArray()[0])
assertEquals(1453438800000L, table.column("Date").get(0))
assertEquals(2, table.columnCount())
assertEquals(3, table.rowCount())
assertEquals(ColumnType.LONG, table.typeArray()[0])
assertEquals(2, table.columnCount())
assertEquals(3, table.rowCount())
assertEquals("a", table.column(0).name())
assertEquals("b.c", table.column(1).name())
assertEquals(ColumnType.LONG, table.typeArray()[0])
assertEquals(ColumnType.INTEGER, actual.typeArray()[0])
assertEquals(expected.column("A").asList(), actual.column("A").asList())
assertEquals(expected.column("B").asList(), actual.column("B").asList())
assertEquals(expected.column("C").asList(), actual.column("C").asList())
assertArrayEquals(columnTypes, new ColumnType[] { INSTANT, DOUBLE })
assertArrayEquals(columnTypes, new ColumnType[] { STRING, STRING })
assertNotNull(trace.asJavascript(1))
assertEquals("x title", layout.getTitle())
assertNotNull(Scatter3DPlot.create("3D plot", data, "x", "y", "z"))
assertTrue(html.indexOf("\"" + "https://cdn.plot.ly/plotly-latest.min.js" + "\"") > 0)
assertTrue(html.indexOf("\"" + location + "\"") > 0)
assertNotNull(trace.asJavascript(1))
assertNotNull(figure)
assertNotNull(trace)
assertEquals(xAxis, traceBuilder.xAxis)
assertEquals(yAxis, traceBuilder.yAxis)
assertEquals(javaScript, Up.upBuilder(1, 2, 3).build().asJavascript())
assertEquals(javaScript, Eye.eyeBuilder(1, 2, 3).build().asJavascript())
assertEquals(javaScript, Center.centerBuilder(1, 2, 3).build().asJavascript())
assertEquals("    <script>" + LINE_END + "        var target_target = document.getElementById('target');" + LINE_END + "        " + LINE_END + "var trace0 =" + LINE_END + "{" + LINE_END + "x: [\"1.0\",\"2.0\",\"3.0\",\"4.0\",\"5.0\"]," + LINE_END + "y: [\"1.0\",\"4.0\",\"9.0\",\"16.0\",\"25.0\"]," + LINE_END + "mode: 'markers'," + LINE_END + "xaxis: 'x'," + LINE_END + "yaxis: 'y'," + LINE_END + "type: 'scatter'," + LINE_END + "name: ''," + LINE_END + "};" + LINE_END + "" + LINE_END + "        var data = [ trace0];" + LINE_END + "Plotly.newPlot(target_target, data);            </script>" + LINE_END, figure.asJavascript(divName))
assertEquals("    <script>" + LINE_END + "        var target_target = document.getElementById('target');" + LINE_END + "        var layout = {" + LINE_END + "    title: 'A test title'," + LINE_END + "    height: 450," + LINE_END + "    width: 700," + LINE_END + "    showlegend: true," + LINE_END + "    margin: {" + LINE_END + "  \"autoexpand\" : true," + LINE_END + "  \"b\" : 80," + LINE_END + "  \"l\" : 200," + LINE_END + "  \"pad\" : 0," + LINE_END + "  \"r\" : 80," + LINE_END + "  \"t\" : 200" + LINE_END + "}," + LINE_END + "    xaxis: {" + LINE_END + "    title: 'x Axis 1'," + LINE_END + "        titlefont: {" + LINE_END + "  \"color\" : \"red\"," + LINE_END + "  \"family\" : \"arial\"," + LINE_END + "  \"size\" : 8" + LINE_END + "}," + LINE_END + "    }," + LINE_END + "" + LINE_END + "" + LINE_END + "};" + LINE_END + "" + LINE_END + "var trace0 =" + LINE_END + "{" + LINE_END + "x: [\"1.0\",\"2.0\",\"3.0\",\"4.0\",\"5.0\"]," + LINE_END + "y: [\"1.0\",\"4.0\",\"9.0\",\"16.0\",\"25.0\"]," + LINE_END + "mode: 'markers'," + LINE_END + "xaxis: 'x'," + LINE_END + "yaxis: 'y'," + LINE_END + "type: 'scatter'," + LINE_END + "name: ''," + LINE_END + "};" + LINE_END + "" + LINE_END + "        var data = [ trace0];" + LINE_END + "Plotly.newPlot(target_target, data, layout);            </script>" + LINE_END, figure.asJavascript(divName))
assertEquals(layout, figure.getLayout())
assertTrue(String.valueOf(figure.getContext().get("figure")).contains(title))
assertTrue(increasing.asJavascript().contains("line"))
assertTrue(increasing.asJavascript().contains("color"))
assertTrue(increasing.asJavascript().contains("width"))
assertTrue(increasing.asJavascript().contains("fillcolor"))
assertTrue(line.asJavascript().contains("color"))
assertTrue(line.asJavascript().contains("width"))
assertNotNull(trace.asJavascript(1))
assertNotNull(figure)
assertNotNull(figure)
assertNotNull(trace)
assertEquals("[\"Hello\\\\\"]", s2)
assertNotNull(figure)
assertTrue(html.indexOf(customTemplateString) < 0)
assertTrue(path.lastIndexOf('/') >= 0)
assertTrue(html.indexOf(customTemplateString) >= 0)
assertTrue(x.asJavascript().contains("color"))
assertTrue(x.asJavascript().contains("symbol"))
assertTrue(x.asJavascript().contains("size"))
assertTrue(asJavascript.contains("rows"))
assertTrue(asJavascript.contains("columns"))
assertTrue(asJavascript.contains("rows"))
assertTrue(asJavascript.contains("xAxis"))
assertTrue(asJavascript.contains("rows"))
assertTrue(asJavascript.contains("columns"))
assertTrue(asJavascript.contains("roworder"))
assertTrue(asJavascript.contains("pattern"))
assertEquals(metadata1, copy)
assertEquals(table1.name(), metadata.getTableName())
assertEquals(table1.rowCount(), metadata.getRowCount())
assertEquals(table1.columnNames(), metadata.columnNames())
assertEquals(SNAPPY, metadata.getCompressionType())
assertEquals(metadata1, copy)
assertEquals(table1.name(), metadata1.getTableName())
assertEquals(table1.rowCount(), metadata1.getRowCount())
assertEquals(2, metadata1.getVersion())
assertEquals(table1.columnCount(), metadata1.columnCount())
assertEquals(table1.shape(), metadata1.shape())
assertEquals(table1.columnNames(), metadata1.columnNames())
assertEquals(table1.structure().toString(), metadata1.structure().toString())
assertEquals(table.columnCount(), t.columnCount())
assertEquals(table.rowCount(), t.rowCount())
assertEquals(table.columnCount(), t.columnCount())
assertEquals(table.rowCount(), t.rowCount())
assertEquals(table.name(), t.name())
assertEquals(table.rowCount(), t.rowCount())
assertEquals(table.columnCount(), t.columnCount())
assertNotNull(table)
assertNotNull(table)
assertTrue(table.columnCount() > 0)
assertTrue(table.isEmpty())
assertNotNull(table)
assertEquals(intsOnly.rowCount(), table.rowCount())
assertNotNull(table)
assertEquals(intsAndStrings.rowCount(), table.rowCount())
assertTrue(table.column(1).size() > 0)
assertEquals(TEXT, table.column(1).type())
assertEquals(intsAndText.rowCount(), table.rowCount())
assertEquals(100, table.column(0).size())
assertEquals(INSTANT, table.column(1).type())
assertEquals(instants.rowCount(), table.rowCount())
assertEquals(instants.instantColumn(1).get(20), table.instantColumn(1).get(20))
assertEquals(table.column(1).size(), bush.rowCount())
assertTrue(table.column(1).size() > 0)
assertEquals(tornado.columnCount(), table.columnCount())
assertEquals(tornado.rowCount(), table.rowCount())
assertTrue(baseball.column(1).size() > 0)
assertEquals(baseball.columnCount(), table.columnCount())
assertEquals(baseball.rowCount(), table.rowCount())
assertEquals("baseball.csv: 1232 rows X 15 cols", new SawReader(path).shape())
assertEquals(1232, new SawReader(path).rowCount())
assertEquals(15, new SawReader(path).columnCount())
assertEquals(baseball.columnNames(), new SawReader(path).columnNames())
assertEquals(baseball.structure().printAll(), new SawReader(path).structure().printAll())
assertEquals(3, bb2.columnCount())
assertTrue(bb2.columnNames().contains("OBP"))
assertTrue(bb2.columnNames().contains("SLG"))
assertTrue(bb2.columnNames().contains("BA"))
assertEquals(baseball.rowCount(), bb2.rowCount())
assertEquals(3, bb2.columnCount())
assertTrue(bb2.columnNames().contains("OBP"))
assertTrue(bb2.columnNames().contains("SLG"))
assertTrue(bb2.columnNames().contains("BA"))
assertEquals(baseball.rowCount(), bb2.rowCount())
assertEquals(robereries.columnCount(), table.columnCount())
assertEquals(robereries.rowCount(), table.rowCount())
assertEquals(sacramento.columnCount(), table.columnCount())
assertEquals(sacramento.rowCount(), table.rowCount())
assertEquals(wines.columnCount(), table.columnCount())
assertEquals(wines.rowCount(), table.rowCount())
assertEquals(wines.stringColumn("name").getDictionary(), table.stringColumn("name").getDictionary())
assertEquals(wines.stringColumn("name").getDictionary(), table1.stringColumn("name").getDictionary())
assertEquals(wines.columnCount(), table.columnCount())
assertEquals(wines.rowCount(), table.rowCount())
assertEquals(wines.stringColumn("index2").getDictionary(), table.stringColumn("index2").getDictionary())
assertEquals(wines.stringColumn("index1").getDictionary(), table1.stringColumn("index1").getDictionary())
assertEquals(wines.stringColumn("index2").getDictionary(), table1.stringColumn("index2").getDictionary())
assertEquals(10001, options.getThreadPoolSize())
assertEquals(nameList, options.getSelectedColumns())
assertEquals(nameList, options.getSelectedColumns())
assertEquals(4, joined.columnCount())
assertEquals(1, joined.rowCount())
assertEquals(4, joined.columnCount())
assertEquals(1, joined.rowCount())
assertEquals(4, joined.columnCount())
assertEquals(2, joined.rowCount())
assertEquals(3, joined.columnCount())
assertEquals(3, joined.rowCount())
assertEquals(3, joined.column("ID").size())
assertEquals(3, joined.columnCount())
assertEquals(3, joined.rowCount())
assertEquals(5, joined.columnCount())
assertEquals(4, joined.rowCount())
assertEquals(5, joined.columnCount())
assertEquals(4, joined.rowCount())
assertEquals(5, joined.columnCount())
assertEquals(4, joined.rowCount())
assertEquals(4, joined.column("ID").size())
assertEquals(3, joined.columnCount())
assertEquals(4, joined.rowCount())
assertEquals(4, joined.column("ID").size())
assertEquals(3, joined.columnCount())
assertEquals(4, joined.rowCount())
assertEquals(4, joined.column("ID").size())
assertEquals(3, joined.columnCount())
assertEquals(4, joined.rowCount())
assertEquals(4, joined.column("ID").size())
assertEquals(3, joined.columnCount())
assertEquals(4, joined.rowCount())
assertEquals(4, joined.column("ID").size())
assertTrue(joined.columnNames().containsAll(Arrays.asList("ID", "Name", "Dog Name", "Cat Name")))
assertEquals(4, joined.rowCount())
assertEquals(4, joined.column("ID").size())
assertEquals(0, joined.column("ID").countMissing())
assertEquals(4, joined.column("Name").size())
assertEquals(3, joined.column("Name").countMissing())
assertEquals(4, joined.column("Dog Name").size())
assertEquals(3, joined.column("Dog Name").countMissing())
assertEquals(4, joined.column("Cat Name").size())
assertEquals(0, joined.column("Cat Name").countMissing())
assertTrue(joined.columnNames().containsAll(Arrays.asList("ID", "Name", "Dog Name")))
assertEquals(4, joined.rowCount())
assertEquals(4, joined.column("ID").size())
assertEquals(0, joined.column("ID").countMissing())
assertEquals(4, joined.column("Dog Name").size())
assertEquals(0, joined.column("Dog Name").countMissing())
assertEquals(4, joined.column("Name").size())
assertEquals(1, joined.column("Name").countMissing())
assertEquals(3, joined.columnCount())
assertEquals(4, joined.rowCount())
assertEquals(4, joined.column("ID").size())
assertEquals(3, joined.columnCount())
assertEquals(4, joined.rowCount())
assertEquals(4, joined.column("ID").size())
assertTrue(joined.columnNames().containsAll(Arrays.asList("ID", "Dog Name", "Name", "Cat Name")))
assertEquals(4, joined.column("ID").size())
assertEquals(4, joined.column("Dog Name").size())
assertEquals(0, joined.column("Dog Name").countMissing())
assertEquals(4, joined.column("Name").size())
assertEquals(1, joined.column("Name").countMissing())
assertEquals(4, joined.column("Cat Name").size())
assertEquals(3, joined.column("Cat Name").countMissing())
assertEquals(4, joined.rowCount())
assertEquals(3, joined.columnCount())
assertEquals(5, joined.rowCount())
assertEquals(5, joined.rowCount())
assertEquals(1, joined.columnCount())
assertEquals(5, joined.rowCount())
assertEquals(2, joined.columnCount())
assertEquals(5, joined.rowCount())
assertEquals(2, joined.columnCount())
assertEquals(5, joined.columnCount())
assertEquals(32, joined.rowCount())
assertEquals(3, joined.columnCount())
assertEquals(6, joined.rowCount())
assertEquals(6, joined.column("Date").size())
assertEquals(3, joined.columnCount())
assertEquals(4, joined.rowCount())
assertEquals(3, joined.columnCount())
assertEquals(6, joined.rowCount())
assertEquals(6, joined.column("Animal").size())
assertEquals(3, joined.columnCount())
assertEquals(4, joined.rowCount())
assertEquals(3, joined.columnCount())
assertEquals(4, joined.rowCount())
assertEquals(3, joined.columnCount())
assertEquals(6, joined.rowCount())
assertEquals(6, joined.column("Animal").size())
assertEquals(3, joined.columnCount())
assertEquals(8, joined.rowCount())
assertEquals(8, joined.column("Animal").size())
assertEquals(0, joined.column("Animal").countMissing())
assertEquals(8, joined.column("Name").size())
assertEquals(2, joined.column("Name").countMissing())
assertEquals(8, joined.column("Feed").size())
assertEquals(2, joined.column("Feed").countMissing())
assertEquals(3, joined.columnCount())
assertEquals(8, joined.rowCount())
assertEquals(8, joined.column("Animal").size())
assertEquals(0, joined.column("Animal").countMissing())
assertEquals(8, joined.column("Name").size())
assertEquals(2, joined.column("Name").countMissing())
assertEquals(8, joined.column("Feed").size())
assertEquals(2, joined.column("Feed").countMissing())
assertEquals(2, joined.columnCount())
assertEquals(8, joined.rowCount())
assertEquals(3, joined.columnCount())
assertEquals(8, joined.rowCount())
assertEquals(8, joined.column("Animal").size())
assertEquals(0, joined.column("Animal").countMissing())
assertEquals(8, joined.column("Name").size())
assertEquals(2, joined.column("Name").countMissing())
assertEquals(8, joined.column("Feed").size())
assertEquals(2, joined.column("Feed").countMissing())
assertEquals(7, joined.columnCount())
assertTrue(joined.columnNames().containsAll(Arrays.asList("ID", "Name", "Price", "T2.ID", "T2.Price", "T3.ID", "T3.Price")))
assertEquals(6, joined.rowCount())
assertEquals(0, joined.column("ID").countMissing())
assertEquals(0, joined.column("Name").countMissing())
assertEquals(0, joined.column("Price").countMissing())
assertEquals(6, joined.column("T2.ID").size())
assertEquals(2, joined.column("T2.ID").countMissing())
assertEquals(6, joined.column("T2.Price").size())
assertEquals(2, joined.column("T2.Price").countMissing())
assertEquals(6, joined.column("T3.ID").size())
assertEquals(3, joined.column("T3.ID").countMissing())
assertEquals(6, joined.column("T3.Price").size())
assertEquals(3, joined.column("T3.Price").countMissing())
assertEquals(7, joined.columnCount())
assertTrue(joined.columnNames().containsAll(Arrays.asList("ID", "Name", "Price", "T2.ID", "T2.Price", "T3.ID", "T3.Price")))
assertEquals(6, joined.rowCount())
assertEquals(3, joined.column("ID").countMissing())
assertEquals(0, joined.column("Name").countMissing())
assertEquals(3, joined.column("Price").countMissing())
assertEquals(6, joined.column("T2.ID").size())
assertEquals(2, joined.column("T2.ID").countMissing())
assertEquals(6, joined.column("T2.Price").size())
assertEquals(2, joined.column("T2.Price").countMissing())
assertEquals(6, joined.column("T3.ID").size())
assertEquals(0, joined.column("T3.ID").countMissing())
assertEquals(6, joined.column("T3.Price").size())
assertEquals(0, joined.column("T3.Price").countMissing())
assertEquals(7, joined.columnCount())
assertTrue(joined.columnNames().containsAll(Arrays.asList("ID", "Name", "Price", "T2.ID", "T2.Price", "T3.ID", "T3.Price")))
assertEquals(6, joined.rowCount())
assertEquals(2, joined.column("ID").countMissing())
assertEquals(0, joined.column("Name").countMissing())
assertEquals(2, joined.column("Price").countMissing())
assertEquals(6, joined.column("T2.ID").size())
assertEquals(3, joined.column("T2.ID").countMissing())
assertEquals(6, joined.column("T2.Price").size())
assertEquals(3, joined.column("T2.Price").countMissing())
assertEquals(6, joined.column("T3.ID").size())
assertEquals(0, joined.column("T3.ID").countMissing())
assertEquals(6, joined.column("T3.Price").size())
assertEquals(0, joined.column("T3.Price").countMissing())
assertEquals(16, joined.columnCount())
assertEquals(14, joined.rowCount())
assertEquals(originalColumns, newColumns)
assertEquals(16, joined.columnCount())
assertEquals(14, joined.rowCount())
assertEquals(24, joined.columnCount())
assertEquals(14, joined.rowCount())
assertEquals(30, joined.columnCount())
assertEquals(14, joined.rowCount())
assertEquals(30, joined.columnCount())
assertEquals(28, joined.rowCount())
assertEquals(20, joined.columnCount())
assertEquals(1, joined.rowCount())
assertEquals(20, joined.columnCount())
assertEquals(2, joined.rowCount())
assertEquals(15, joined.columnCount())
assertEquals(3, joined.rowCount())
assertEquals(14, joined.columnCount())
assertEquals(2, joined.rowCount())
assertEquals(15, joined.columnCount())
assertEquals(10, joined.rowCount())
assertEquals(10, joined.column("State").size())
assertEquals(10, joined.column("Age").size())
assertEquals(7, joined.columnCount())
assertTrue(joined.columnNames().containsAll(Arrays.asList("ID", "Name", "Price", "T2.ID", "T2.Price", "T3.ID", "T3.Price")))
assertEquals(6, joined.rowCount())
assertEquals(6, joined.column("Price").size())
assertEquals(6, joined.column("T2.ID").size())
assertEquals(2, joined.column("T2.ID").countMissing())
assertEquals(6, joined.column("T3.ID").size())
assertEquals(3, joined.column("T3.ID").countMissing())
assertEquals(6, joined.columnCount())
assertEquals(2, joined.rowCount())
assertEquals(2, joined.column("Bedrooms").size())
assertEquals(5, joined.columnCount())
assertEquals(1, joined.rowCount())
assertEquals(6, joined.columnCount())
assertEquals(7, joined.rowCount())
assertEquals(7, joined.column("Style").size())
assertEquals(3, joined.column("Style").countMissing())
assertEquals(7, joined.column("Bedrooms").size())
assertEquals(0, joined.column("Bedrooms").countMissing())
assertEquals(7, joined.column("BuildDate").size())
assertEquals(3, joined.column("BuildDate").countMissing())
assertEquals(7, joined.column("Owner").size())
assertEquals(0, joined.column("Owner").countMissing())
assertEquals(7, joined.column("Type").size())
assertEquals(2, joined.column("Type").countMissing())
assertEquals(7, joined.column("SoldDate").size())
assertEquals(2, joined.column("SoldDate").countMissing())
assertEquals(6, joined.columnCount())
assertEquals(11, joined.rowCount())
assertEquals(11, joined.column("Bedrooms").size())
assertEquals(0, joined.column("Bedrooms").countMissing())
assertEquals(11, joined.column("Bedrooms").size())
assertEquals(0, joined.column("Bedrooms").countMissing())
assertEquals(11, joined.column("BuildDate").size())
assertEquals(3, joined.column("BuildDate").countMissing())
assertEquals(11, joined.column("Owner").size())
assertEquals(0, joined.column("Owner").countMissing())
assertEquals(11, joined.column("Type").size())
assertEquals(3, joined.column("Type").countMissing())
assertEquals(11, joined.column("SoldDate").size())
assertEquals(3, joined.column("SoldDate").countMissing())
assertEquals(6, joined.columnCount())
assertEquals(11, joined.rowCount())
assertEquals(11, joined.column("Design").size())
assertEquals(6, joined.column("Design").countMissing())
assertEquals(11, joined.column("Bedrooms").size())
assertEquals(0, joined.column("Bedrooms").countMissing())
assertEquals(11, joined.column("SoldDate").size())
assertEquals(0, joined.column("SoldDate").countMissing())
assertEquals(11, joined.column("Owner").size())
assertEquals(6, joined.column("Owner").countMissing())
assertEquals(11, joined.column("Type").size())
assertEquals(3, joined.column("Type").countMissing())
assertEquals(11, joined.column("T2.Owner").size())
assertEquals(3, joined.column("T2.Owner").countMissing())
assertEquals(6, joined.columnCount())
assertEquals(4, joined.rowCount())
assertEquals(5, joined.columnCount())
assertEquals(4, joined.rowCount())
assertEquals(6, joined.columnCount())
assertEquals(5, joined.rowCount())
assertEquals(5, joined.columnCount())
assertEquals(5, joined.rowCount())
assertEquals(15, joined.columnCount())
assertEquals(10, joined.rowCount())
assertEquals(15, joined.columnCount())
assertEquals(5, joined.rowCount())
assertEquals(15, joined.columnCount())
assertEquals(10, joined.rowCount())
assertEquals(15, joined.columnCount())
assertEquals(10, joined.rowCount())
assertEquals(9, joined.columnCount())
assertEquals(18, joined.rowCount())
assertEquals(9, joined.columnCount())
assertEquals(18, joined.rowCount())
assertEquals(7, joined.columnCount())
assertEquals(8, joined.rowCount())
assertEquals(14, joined.columnCount())
assertEquals(18, joined.rowCount())
assertEquals(11, joined.columnCount())
assertEquals(2, joined.rowCount())
assertEquals(7, joined.columnCount())
assertEquals(1, joined.rowCount())
assertEquals(7, joined.columnCount())
assertEquals(2, joined.rowCount())
assertEquals(7, joined.columnCount())
assertEquals(2, joined.rowCount())
assertEquals(7, joined.columnCount())
assertEquals(8, joined.rowCount())
assertEquals(7, joined.columnCount())
assertEquals(6, joined.rowCount())
assertEquals(8, joined.columnCount())
assertEquals(3, joined.rowCount())
assertEquals(8, joined.columnCount())
assertEquals(9, joined.rowCount())
assertEquals(10, joined.columnCount())
assertEquals(9, joined.rowCount())
assertEquals(10, joined.columnCount())
assertEquals(6, joined.rowCount())
assertEquals(10, joined.columnCount())
assertEquals(12, joined.rowCount())
assertEquals(10, joined.columnCount())
assertEquals(1, joined.rowCount())
assertEquals(8, joined.columnCount())
assertEquals(6, joined.rowCount())
assertEquals(8, joined.columnCount())
assertEquals(5, joined.rowCount())
assertEquals(8, joined.columnCount())
assertEquals(3, joined.rowCount())
assertEquals(7, joined.columnCount())
assertEquals(2, joined.rowCount())
assertEquals(8, joined.columnCount())
assertEquals(5, joined.rowCount())
assertEquals(10, joined.columnCount())
assertEquals(2, joined.rowCount())
assertEquals(9, joined.columnCount())
assertEquals(1, joined.rowCount())
assertEquals(9, joined.columnCount())
assertEquals(6, joined.rowCount())
assertEquals(6, joined.column("TeamName").size())
assertEquals(2, joined.column("TeamName").countMissing())
assertEquals(6, joined.column("PlayDateTime").size())
assertEquals(0, joined.column("PlayDateTime").countMissing())
assertEquals(6, joined.column("Location").size())
assertEquals(2, joined.column("Location").countMissing())
assertEquals(6, joined.column("HomeGame").size())
assertEquals(2, joined.column("HomeGame").countMissing())
assertEquals(6, joined.column("SeasonRevenue").size())
assertEquals(0, joined.column("SeasonRevenue").countMissing())
assertEquals(6, joined.column("Mascot").size())
assertEquals(2, joined.column("Mascot").countMissing())
assertEquals(6, joined.column("Place").size())
assertEquals(2, joined.column("Place").countMissing())
assertEquals(10, joined.columnCount())
assertEquals(5, joined.rowCount())
assertEquals(5, joined.column("TeamName").size())
assertEquals(1, joined.column("TeamName").countMissing())
assertEquals(5, joined.column("PlayDateTime").size())
assertEquals(1, joined.column("PlayDateTime").countMissing())
assertEquals(5, joined.column("Location").size())
assertEquals(1, joined.column("Location").countMissing())
assertEquals(5, joined.column("HomeGame").size())
assertEquals(1, joined.column("HomeGame").countMissing())
assertEquals(5, joined.column("SeasonRevenue").size())
assertEquals(1, joined.column("SeasonRevenue").countMissing())
assertEquals(5, joined.column("AllTimeRevenue").size())
assertEquals(0, joined.column("AllTimeRevenue").countMissing())
assertEquals(5, joined.column("Mascot").size())
assertEquals(1, joined.column("Mascot").countMissing())
assertEquals(5, joined.column("T2.PlayDateTime").size())
assertEquals(1, joined.column("T2.PlayDateTime").countMissing())
assertEquals(5, joined.column("Place").size())
assertEquals(1, joined.column("Place").countMissing())
assertEquals(5, joined.column("T2.SeasonRevenue").size())
assertEquals(1, joined.column("T2.SeasonRevenue").countMissing())
assertEquals(10, joined.columnCount())
assertEquals(8, joined.rowCount())
assertEquals(0, joined.rowCount())
assertEquals(0, joined.rowCount())
assertTimeout(Duration.ofSeconds(1), () -> customers.joinOn("customerId").inner(orders))
assertTimeout(Duration.ofSeconds(1), () -> orders.joinOn("customerId").leftOuter(customers))
assertTimeout(Duration.ofSeconds(1), () -> customers.joinOn("customerId").fullOuter(orders))
assertTrue(selection.contains(42))
assertTrue(selection.contains(53))
assertTrue(selection.contains(111))
assertFalse(selection.contains(43))
assertFalse(selection.contains(0))
assertFalse(selection.contains(122))
assertFalse(selection.contains(42))
assertFalse(selection.contains(43))
assertFalse(selection.contains(52))
assertTrue(selection.contains(53))
assertTrue(selection.contains(111))
assertTrue(selection.contains(0))
assertTrue(selection.contains(122))
assertTrue(selection.contains(42))
assertTrue(selection.contains(43))
assertTrue(selection.contains(52))
assertFalse(selection.contains(53))
assertFalse(selection.contains(111))
assertFalse(selection.contains(0))
assertFalse(selection.contains(122))
assertArrayEquals(expected, selection.toArray())
assertTrue(selection.contains(42))
assertFalse(selection.contains(43))
assertTrue(selection.add(43).contains(43))
assertTrue(selection.contains(42))
assertFalse(selection.contains(43))
assertTrue(selection.addRange(70, 80).contains(73))
assertTrue(selection.addRange(70, 80).contains(70))
assertTrue(selection.addRange(70, 80).contains(79))
assertFalse(selection.addRange(70, 80).contains(80))
assertEquals(3, selection.size())
assertEquals(1, selection3.size())
assertEquals(53, selection3.get(0))
assertEquals(6, selection3.size())
assertEquals(11, selection3.get(0))
assertEquals(42, selection3.get(1))
assertTrue(selection3.contains(53))
assertEquals(2, selection3.size())
assertEquals(111, selection3.get(1))
assertEquals(42, selection3.get(0))
assertFalse(selection3.contains(53))
assertTrue(selection.isEmpty())
assertFalse(selection1.isEmpty())
assertFalse(selection1.isEmpty())
assertTrue(selection1.isEmpty())
assertEquals(42, selection.get(0))
assertEquals(53, selection.get(1))
assertTrue(selection.contains(53))
assertFalse(selection.contains(53))
assertTrue(selection.contains(111))
assertTrue(selection.contains(53))
assertTrue(selection.contains(42))
assertTrue(selection.contains(111))
assertFalse(selection.contains(53))
assertFalse(selection.contains(42))
assertFalse(selection.contains(111))
assertTrue(selection.contains(0))
assertTrue(selection.contains(110))
assertTrue(selection.contains(112))
assertTrue(thrown.getMessage().contains("Function: SUM Is not compatible with column type: STRING"))
assertArrayEquals(expected, actual)
assertArrayEquals(expected, actual)
assertArrayEquals(expected, actual)
assertArrayEquals(expected, actual)
assertArrayEquals(expected, actual)
assertArrayEquals(expected, actual)
assertArrayEquals(expected, actual)
assertArrayEquals(expected, actual)
assertArrayEquals(expected, actual)
assertArrayEquals(expected, actual)
assertArrayEquals(expected, actual)
assertArrayEquals(expected, actual)
assertArrayEquals(expected, actual)
assertArrayEquals(expected, actual)
assertArrayEquals(expected, actual)
assertArrayEquals(expected, actual)
assertArrayEquals(expected, actual)
assertArrayEquals(expected, actual)
assertArrayEquals(expected, actual)
assertArrayEquals(expected, actual)
assertArrayEquals(expected, actual)
assertArrayEquals(expected, actual)
assertArrayEquals(expected, actual)
assertArrayEquals(expected, actual)
assertArrayEquals(expected, actual)
assertArrayEquals(expected, actual)
assertArrayEquals(expected, actual)
assertArrayEquals(expected, actual)
assertArrayEquals(expected, actual)
assertArrayEquals(expected, actual)
assertArrayEquals(expected, actual)
assertArrayEquals(expected, actual)
assertArrayEquals(expected, actual)
assertArrayEquals(expected, actual)
assertArrayEquals(expected, actual)
assertArrayEquals(expected, actual)
assertArrayEquals(expected, actual)
assertArrayEquals(expected, actual)
assertArrayEquals(expected, actual)
assertArrayEquals(expected, actual)
assertArrayEquals(expected, actual)
assertArrayEquals(expected, actual)
assertArrayEquals(expected, actual)
assertArrayEquals(expected, actual)
assertArrayEquals(expected, actual)
assertArrayEquals(expected, actual)
assertArrayEquals(expected, actual)
assertArrayEquals(expected, actual)
assertArrayEquals(expected, actual)
assertArrayEquals(expected, actual)
assertArrayEquals(expected, actual)
assertArrayEquals(expected, actual)
assertArrayEquals(expected, actual)
assertArrayEquals(expected, actual)
assertArrayEquals(expected, actual)
assertArrayEquals(expected, actual)
assertArrayEquals(expected, actual)
assertArrayEquals(expected, actual)
assertEquals(ImmutableList.of(1, 2, 2, 3, 4, 5, 6), result.intColumn("count").asList())
assertArrayEquals(intSourceColumnAsDoubleArray("row_number"), result.intColumn("rowNumber").asDoubleArray())
assertArrayEquals(intSourceColumnAsDoubleArray("rank"), result.intColumn("rank").asDoubleArray())
assertArrayEquals(intSourceColumnAsDoubleArray("dense_rank"), result.intColumn("denseRank").asDoubleArray())
assertArrayEquals(new double[] { 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0 }, result.intColumn("rowNumber").asDoubleArray())
assertArrayEquals(new double[] { 1.0, 2.0, 2.0, 4.0, 4.0, 4.0, 7.0 }, result.intColumn("rank").asDoubleArray())
assertArrayEquals(new double[] { 1.0, 2.0, 2.0, 3.0, 3.0, 3.0, 4.0 }, result.intColumn("denseRank").asDoubleArray())
assertEquals(ImmutableList.of("rowNumber", "rank", "denseRank"), result.columnNames())
assertEquals(WindowBoundTypes.UNBOUNDED_PRECEDING, frame.getLeftBoundType())
assertEquals(WindowBoundTypes.UNBOUNDED_FOLLOWING, frame.getRightBoundType())
assertEquals(expectedString, frame.toSqlString())
assertEquals(WindowBoundTypes.PRECEDING, frame.getLeftBoundType())
assertEquals(-5, frame.getInitialLeftBound())
assertEquals(WindowBoundTypes.PRECEDING, frame.getRightBoundType())
assertEquals(-2, frame.getInitialRightBound())
assertEquals(expectedString, frame.toSqlString())
assertEquals(WindowBoundTypes.CURRENT_ROW, frame.getLeftBoundType())
assertEquals(0, frame.getInitialLeftBound())
assertEquals(WindowBoundTypes.UNBOUNDED_FOLLOWING, frame.getRightBoundType())
assertEquals(0, frame.getInitialRightBound())
assertEquals(expectedString, frame.toSqlString())
assertEquals(WindowBoundTypes.FOLLOWING, frame.getLeftBoundType())
assertEquals(2, frame.getInitialLeftBound())
assertEquals(WindowBoundTypes.FOLLOWING, frame.getRightBoundType())
assertEquals(5, frame.getInitialRightBound())
assertEquals(expectedString, frame.toSqlString())
assertTrue(thrown.getMessage().contains("FOLLOWING cannot come before PRECEDING"))
assertTrue(thrown.getMessage().contains("FOLLOWING cannot come before CURRENT_ROW"))
assertTrue(thrown.getMessage().contains("must be greater than the number preceding at the end of the window "))
assertTrue(thrown.getMessage().contains("must be less than the number following at the end of the window"))
assertEquals(WindowGrowthType.FIXED, growthType)
assertEquals(WindowGrowthType.FIXED_LEFT, growthType)
assertEquals(WindowGrowthType.FIXED_RIGHT, growthType)
assertEquals(WindowGrowthType.SLIDING, growthType)
assertEquals(WindowGrowthType.SLIDING, growthType)
assertEquals(expected, query.toSqlLikeString())
assertEquals(expectd, query.toSqlLikeString())
assertEquals(expectd, query.toSqlLikeString())
assertEquals(ImmutableList.of("col1", "rowNumber", "rank", "denseRank"), table.columnNames())
assertEquals(ImmutableList.of("col1", "sum", "max"), table.columnNames())
assertTrue(thrown.getMessage().contains("Cannot add column with duplicate name"))
assertEquals(30, function.getValue())
assertEquals(120, function.getValue())
assertEquals(11, function.getValue())
assertEquals(10, function.getValue())
assertEquals("MAX(col1) OVER w AS col1Count", argumentList.toSqlString("w"))
assertEquals(0, argumentList.getNumberingFunctions().size())
assertEquals(ImmutableList.of("col1Max", "col1Count"), argumentList.getNewColumnNames())
assertEquals(ImmutableMap.of("col1Max", new FunctionCall<>("col1", "col1Max", AggregateFunctions.MAX), "col1Count", new FunctionCall<>("col1", "col1Count", AggregateFunctions.COUNT)), argumentList.getAggregateFunctions())
assertEquals(0, argumentList.getAggregateFunctions().size())
assertEquals(ImmutableList.of("col1Rank", "col1DenseRank"), argumentList.getNewColumnNames())
assertEquals(ImmutableMap.of("col1Rank", new FunctionCall<>("", "col1Rank", NumberingFunctions.RANK), "col1DenseRank", new FunctionCall<>("", "col1DenseRank", NumberingFunctions.DENSE_RANK)), argumentList.getNumberingFunctions())
assertEquals(ImmutableList.of("col1Rank", "col1Max"), argumentList.getNewColumnNames())
assertEquals(ImmutableMap.of("col1Max", new FunctionCall<>("col1", "col1Max", AggregateFunctions.MAX)), argumentList.getAggregateFunctions())
assertEquals(ImmutableMap.of("col1Rank", new FunctionCall<>("", "col1Rank", NumberingFunctions.RANK)), argumentList.getNumberingFunctions())
assertEquals(expected, argumentList.toSqlString("w"))
assertTrue(thrown.getMessage().contains("duplicate column"))
assertTrue(thrown.getMessage().contains("Cannot build when a column is staged"))
assertTrue(thrown.getMessage().contains("Cannot stage a column while another is staged"))
assertEquals(expected, windowSpecification.toSqlString())
assertTrue(thrown.getMessage().contains("duplicate columns"))
assertArrayEquals(new double[] { missing, missing, 0.181, 0.186, 0.186, 0.186, 0.181 }, col.asDoubleArray())
assertArrayEquals(new double[] { 0.181, 0.181, 0.181, 0.186, 0.181, 0.181, missing }, col.asDoubleArray())
assertTrue(b.get(0))
assertEquals(table.rowCount(), t.rowCount())
assertNotEquals("fox", t.stringColumn("who").get(10))
assertTrue(t.intColumn("approval").get(10) < 55)
assertEquals(4, t.dateColumn("date").get(10).getMonthValue())
assertEquals(4, t.dateColumn("date").get(10).getMonthValue())
assertTrue(t.where(booleanColumn("A").isTrue()).intColumn(0).contains(1))
assertTrue(t.where(booleanColumn("A").isTrue()).intColumn(0).contains(3))
assertTrue(t.where(booleanColumn("A").isTrue()).intColumn(0).contains(5))
assertTrue(t.where(booleanColumn("A").isTrue()).intColumn(0).contains(7))
assertTrue(t.where(not(booleanColumn("A").isTrue())).intColumn(0).contains(2))
assertTrue(t.where(not(booleanColumn("A").isTrue())).intColumn(0).contains(4))
assertTrue(t.where(not(booleanColumn("A").isTrue())).intColumn(0).contains(6))
assertTrue(t.where(not(booleanColumn("A").isTrue())).intColumn(0).contains(8))
assertTrue(t.where(any(booleanColumn("A").isTrue())).intColumn(0).contains(1))
assertTrue(t.where(any(booleanColumn("A").isTrue())).intColumn(0).contains(3))
assertTrue(t.where(any(booleanColumn("A").isTrue())).intColumn(0).contains(5))
assertTrue(t.where(any(booleanColumn("A").isTrue())).intColumn(0).contains(7))
assertTrue(t.where(either(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(1))
assertTrue(t.where(either(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(3))
assertTrue(t.where(neither(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(6))
assertTrue(t.where(neither(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(8))
assertTrue(t.where(notAny(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(6))
assertTrue(t.where(notAny(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(8))
assertTrue(t.where(notBoth(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(2))
assertTrue(t.where(notBoth(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(6))
assertTrue(t.where(notBoth(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(8))
assertTrue(t.where(both(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(1))
assertTrue(t.where(all(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(1))
assertTrue(t.where(notAll(booleanColumn("A").isTrue())).intColumn(0).contains(2))
assertTrue(t.where(notAll(booleanColumn("A").isTrue())).intColumn(0).contains(4))
assertTrue(t.where(notAll(booleanColumn("A").isTrue())).intColumn(0).contains(6))
assertTrue(t.where(notAll(booleanColumn("A").isTrue())).intColumn(0).contains(8))
assertEquals(0, t1.rowCount())
assertEquals(93, t2.rowCount())
assertFalse(t.dateColumn("date").monthValue().contains(4))
assertFalse(t.where(either(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(6))
assertFalse(t.where(either(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(8))
assertFalse(t.where(neither(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(1))
assertFalse(t.where(neither(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(2))
assertFalse(t.where(notAny(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(1))
assertFalse(t.where(notAny(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(2))
assertFalse(t.where(notBoth(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(1))
assertFalse(t.where(both(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(2))
assertFalse(t.where(both(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(5))
assertFalse(t.where(both(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(8))
assertFalse(t.where(all(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(2))
assertFalse(t.where(all(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(5))
assertFalse(t.where(all(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(8))
assertTrue(result.getString(0, "who").startsWith("f"))
assertEquals("fox", result.getString(0, "who"))
assertFalse(result.getString(0, "who").startsWith("f"))
assertTrue(result.getString(0, "who").startsWith("f"))
assertEquals(DateColumnType.missingValueIndicator(), column.getIntInternal(0))
assertEquals(4, column1.size())
assertEquals(5, column1.size())
assertTrue(column1.isMissing(column1.size() - 1))
assertFalse(column1.isMissing(column1.size() - 1))
assertEquals("Column: Game date" + System.lineSeparator() + "Oct~23~2013" + System.lineSeparator() + "Dec~23~1924" + System.lineSeparator() + "May~12~2015" + System.lineSeparator() + "Jan~12~2015" + System.lineSeparator(), column1.print())
assertEquals("Column: Game date" + System.lineSeparator() + "Oct~23~2013" + System.lineSeparator() + "Dec~23~1924" + System.lineSeparator() + "May~12~2015" + System.lineSeparator() + "Jan~12~2015" + System.lineSeparator(), column1.print())
assertEquals("2013-10", c2.get(0))
assertEquals("1924-12", c2.get(1))
assertEquals("2015-05", c2.get(2))
assertEquals("2015-01", c2.get(3))
assertEquals(4, summary.rowCount())
assertEquals(2, summary.columnCount())
assertEquals("Measure", summary.column(0).name())
assertEquals("Value", summary.column(1).name())
assertEquals(DateColumnType.DEFAULT_PARSER.parse("2013-10-23"), actual)
assertEquals(sorted.dateColumn("Date").asList().stream().sorted().collect(Collectors.toList()), sorted.dateColumn("Date").asList())
assertEquals(3, column1.countUnique())
assertEquals(4, column1.size())
assertEquals(5, column1.size())
assertEquals(3, column1.size())
assertTrue(column1.isMissing(column1.size() - 1))
assertFalse(column1.isMissing(column1.size() - 1))
assertEquals(1, column2.size())
assertEquals(2017, column2.get(0).getYear())
assertEquals(8, column2.get(0).getMonthValue())
assertEquals(28, column2.get(0).getDayOfMonth())
assertEquals(20, column2.get(0).getHour())
assertEquals(1, millisArr.length)
assertEquals(millis, millisArr[0])
assertEquals(1, result.rowCount())
assertNull(col.get(0))
assertEquals(3, column1.countUnique())
assertEquals("2000-01-01T00:00:00", column1.getString(0))
assertEquals("NaT", column1.getString(1))
assertEquals("Game date strings", sc.name())
assertEquals(2, sc.size())
assertEquals("1923-10-20T10:15:30.000", sc.get(0))
assertEquals(StringColumnType.missingValueIndicator(), sc.get(1))
assertEquals(bush.columnNames(), row.columnNames())
assertEquals(bush.columnCount(), row.columnCount())
assertEquals(3, count)
assertArrayEquals(expected, actual)
assertEquals("Column col2 is not present in table myTable", thrown.getMessage())
assertEquals("Column col1 is of type LOCAL_DATE and cannot be cast to LOCAL_TIME." + " Use the method for LOCAL_DATE.", thrown.getMessage())
assertEquals(53.0, table.row(0).getNumber("approval"))
assertFalse(bush.row(0).isMissing("approval"))
assertTrue(bush.row(0).isMissing("approval"))
assertEquals("data 4-period Percent Change", result.name())
assertArrayEquals(expected, result.asDoubleArray())
assertEquals(expected, roundOff)
assertEquals(expected, roundOff)
assertEquals(expected, actual)
assertEquals(expected, actual)
assertTrue(doubleParser.canParse("1.3"))
assertTrue(doubleParser.canParse("1.3%"))
assertEquals(1.3, doubleParser.parseDouble("1.3"))
assertEquals(0.012, doubleParser.parseDouble("1.2%"))
assertEquals(0, group.getInt(0))
assertEquals(0, group.getInt(1))
assertEquals(1, group.getInt(2))
assertEquals(2, group.getInt(3))
assertEquals(0, group2.getInt(0))
assertEquals(0, group2.getInt(1))
assertEquals(1, group2.getInt(2))
assertEquals(2, group2.getInt(3))
assertEquals(0, group3.getInt(0))
assertEquals(0, group3.getInt(1))
assertEquals(0, group3.getInt(2))
assertEquals(0, group3.getInt(3))
assertEquals(1, group3.getInt(4))
assertEquals(DayOfWeek.FRIDAY.name(), column1.dayOfWeek().get(0))
assertEquals(asLocalDate(day1).until(asLocalDate(day2), ChronoUnit.DAYS), days.getInt(0))
assertEquals(asLocalDate(day1).until(asLocalDate(day2), ChronoUnit.WEEKS), weeks.getInt(0))
assertEquals(asLocalDate(day1).until(asLocalDate(day2), ChronoUnit.MONTHS), months.getInt(0))
assertEquals(asLocalDate(day1).until(asLocalDate(day2), ChronoUnit.YEARS), years.getInt(0))
assertEquals(pack(2011, 12, 21), column1.plusDays(2).getPackedDate(0))
assertEquals(pack(2012, 1, 3), column1.plusDays(2).getPackedDate(1))
assertEquals(pack(2011, 12, 30), column1.minusDays(2).getPackedDate(1))
assertEquals(pack(2012, 1, 8), column1.plusWeeks(1).getPackedDate(1))
assertEquals(pack(2012, 1, 3), column1.minusWeeks(1).getPackedDate(2))
assertEquals(pack(2012, 2, 19), column1.plusMonths(2).getPackedDate(0))
assertEquals(pack(2012, 3, 1), column1.plusMonths(2).getPackedDate(1))
assertEquals(pack(2011, 11, 1), column1.minusMonths(2).getPackedDate(1))
assertEquals(pack(2013, 12, 19), column1.plusYears(2).getPackedDate(0))
assertEquals(pack(2015, 1, 1), column1.plusYears(3).getPackedDate(1))
assertEquals(pack(2011, 1, 1), column1.minusYears(1).getPackedDate(1))
assertFalse(doubleParser.canParse("%"))
assertFalse(doubleParser.canParse(","))
assertTrue(column.any())
assertFalse(column.all())
assertTrue(filtered.all())
assertEquals(column.size(), doubleColumn.size())
assertFalse(column.all())
assertEquals(2, filtered.size())
assertFalse(column.all())
assertEquals(2, column.countMissing())
assertFalse(column.none())
assertTrue(filtered.none())
assertFalse(column.none())
assertTrue(column.none())
assertEquals(2 * column.size(), column1.size())
assertEquals("No", column.getString(0))
assertEquals("Yes", column.getString(5))
assertEquals("IDK", column.getString(column.size() - 1))
assertEquals(7, column.size())
assertEquals(7, column.size())
assertEquals(7, column.countTrue() + column.countFalse())
assertEquals(2, column.countTrue())
assertEquals(8, column.size())
assertTrue(lastEntry())
assertFalse(lastEntry())
assertTrue(lastEntry())
assertFalse(lastEntry())
assertTrue(lastEntry())
assertFalse(lastEntry())
assertTrue(lastEntry())
assertFalse(lastEntry())
assertNull(column.get(column.size() - 1))
assertTrue(column.isMissing(column.size() - 1))
assertFalse(column.isMissing(column.size() - 1))
assertEquals("Boolean".toUpperCase(), column.type().name())
assertEquals("Boolean column: " + column.name(), column.toString())
assertEquals("Column: Test" + LINE_END + "false" + LINE_END + "false" + LINE_END + "false" + LINE_END + "false" + LINE_END + "true" + LINE_END + "true" + LINE_END + "false" + LINE_END, column.print())
assertEquals(2, summary.columnCount())
assertEquals(2, summary.rowCount())
assertEquals("false", summary.getUnformatted(0, 0))
assertEquals("5.0", summary.getUnformatted(0, 1))
assertEquals("true", summary.getUnformatted(1, 0))
assertEquals("2.0", summary.getUnformatted(1, 1))
assertEquals(3, result)
assertEquals(2, summary.columnCount())
assertEquals(2, summary.rowCount())
assertEquals("false", summary.getUnformatted(0, 0))
assertEquals("2.0", summary.getUnformatted(0, 1))
assertEquals("true", summary.getUnformatted(1, 0))
assertEquals("5.0", summary.getUnformatted(1, 1))
assertEquals(5, column.isFalse().size())
assertEquals(2, column.isTrue().size())
assertEquals(7, column.isNotMissing().size())
assertEquals(0, column.isMissing().size())
assertEquals(2, result.rowCount())
assertEquals(1, result.rowCount())
assertEquals("52", result.getString(0, "Test"))
assertTrue(count < 575_000)
assertTrue(count > 425_000)
assertEquals("$48,392.29", numberColumn.getString(0))
assertEquals("48,392", numberColumn.getString(0))
assertEquals("test strings", sc.name())
assertEquals("48392.2932", sc.get(0))
assertEquals("test strings", sc.name())
assertEquals("48392.2932", sc.get(0))
assertEquals(StringColumnType.missingValueIndicator(), sc.get(1))
assertEquals("test strings", sc.name())
assertEquals("48392", sc.get(0))
assertEquals(StringColumnType.missingValueIndicator(), sc.get(1))
assertEquals("48392", numberColumn.getString(0))
assertEquals("48,392.293", numberColumn.getString(0))
assertEquals("29.3%", numberColumn.getString(0))
assertEquals("12423", numberColumn.getString(numberColumn.size() - 1))
assertTrue(count < 575_000)
assertTrue(count > 425_000)
assertTrue(StatUtils.min(doublesA) >= StatUtils.max(doublesB))
assertFalse(doubles.isEmpty())
assertTrue(doubles.isEmpty())
assertEquals(0, doubles.countMissing())
assertEquals(10, doubles.countMissing())
assertEquals(uniques.length + 1, doubles.countUnique())
assertEquals(notUniques.length - 1, doubles.countUnique())
assertEquals(3, doubles.countUnique())
assertEquals(3, doubles.unique().size())
assertEquals(3, floats.countUnique())
assertEquals(3, floats.unique().size())
assertEquals(3, ints.countUnique())
assertEquals(3, ints.unique().size())
assertEquals(3, longs.countUnique())
assertEquals(3, longs.unique().size())
assertEquals(3, shorts.countUnique())
assertEquals(3, shorts.unique().size())
assertEquals(uniques.length, doubles.unique().size())
assertEquals(notUniques.length - 1, doubles.unique().size())
assertEquals(0, doubles.isMissing().size())
assertEquals(10, doubles.isNotMissing().size())
assertEquals(10, doubles.isMissing().size())
assertEquals(0, doubles.isNotMissing().size())
assertTrue(empty.isEmpty())
assertEquals(doubles.name(), empty.name())
assertEquals(0, doubles.size())
assertEquals(100, doubles.size())
assertEquals(0, doubles.size())
assertEquals(ColumnType.DOUBLE, doubles.type())
assertTrue(computeAndValidateDifference(originalValues, expectedValues))
assertTrue(computeAndValidateDifference(originalValues, expectedValues))
assertTrue(validateEquality(expected, difference))
assertTrue(validateEquality(expected, difference))
assertEquals(2, DoubleColumn.create("t1", new double[] { 0, 1, 2 }).count(isPositiveOrZeroD, 2))
assertEquals(0, DoubleColumn.create("t1", new double[] { 0, 1, 2 }).count(isNegativeD, 2))
assertEquals(3, DoubleColumn.create("t1", new double[] { 0, 1, 2 }).count(isPositiveOrZeroD))
assertEquals(0, DoubleColumn.create("t1", new double[] { 0, 1, 2 }).count(isNegativeD))
assertTrue(DoubleColumn.create("t1", new double[] { 0, 1, 2 }).allMatch(isPositiveOrZeroD))
assertFalse(DoubleColumn.create("t1", new double[] { -1, 0, 1 }).allMatch(isPositiveOrZeroD))
assertFalse(DoubleColumn.create("t1", new double[] { 1, 0, -1 }).allMatch(isPositiveOrZeroD))
assertTrue(DoubleColumn.create("t1", new double[] { 0, 1, 2 }).anyMatch(isPositiveOrZeroD))
assertTrue(DoubleColumn.create("t1", new double[] { -1, 0, -1 }).anyMatch(isPositiveOrZeroD))
assertFalse(DoubleColumn.create("t1", new double[] { 0, 1, 2 }).anyMatch(isNegativeD))
assertTrue(DoubleColumn.create("t1", new double[] { 0, 1, 2 }).noneMatch(isNegativeD))
assertFalse(DoubleColumn.create("t1", new double[] { -1, 0, 1 }).noneMatch(isNegativeD))
assertFalse(DoubleColumn.create("t1", new double[] { 1, 0, -1 }).noneMatch(isNegativeD))
assertEquals(expected.length, column.size())
assertEquals("$48,392.29", numberColumn.getString(0))
assertEquals(Double.valueOf(1.0), DoubleColumn.create("t1", new double[] { -1, 0, 1 }).max(Double::compare).get())
assertFalse(DoubleColumn.create("t1").max((d1, d2) -> (int) (d1 - d2)).isPresent())
assertEquals(Double.valueOf(-1.0), DoubleColumn.create("t1", new double[] { -1, 0, 1 }).min(Double::compare).get())
assertFalse(DoubleColumn.create("t1").min((d1, d2) -> (int) (d1 - d2)).isPresent())
assertEquals(Double.valueOf(0.0), DoubleColumn.create("t1", new double[] { -1, 0, 1 }).reduce(sumD).get())
assertFalse(DoubleColumn.create("t1", new double[] {}).reduce(sumD).isPresent())
assertEquals(2, instanceColumn.isAfter(baselineInst).get(0))
assertEquals(0, instanceColumn.isBefore(baselineInst).get(0))
assertEquals(1, instanceColumn.isBefore(afterInst).get(1))
assertEquals(2, instanceColumn.isEqualTo(afterInst).get(0))
assertEquals(3, instanceColumn.isMissing().get(0))
assertEquals(0, instanceColumn.isNotMissing().get(0))
assertEquals(1, instanceColumn.isNotMissing().get(1))
assertEquals(2, instanceColumn.isNotMissing().get(2))
assertEquals(3, column1.countUnique())
assertTrue(column1.isMissing(0))
assertArrayEquals(new double[] { 2.0 }, col.asDoubleArray())
assertArrayEquals(new double[] { 2.0, 6.0 }, col.asDoubleArray())
assertArrayEquals(new double[] { 1.0, 2.0, 3.0, 4.0, 5.0 }, arr)
assertArrayEquals(new double[] { 1.0, 2.0, 3.0, 4.0 }, col.asDoubleArray())
assertArrayEquals(new double[] { 1.0, 2.0, 3.0, 4.0 }, col.asDoubleArray())
assertArrayEquals(new double[] { 1.0, 2.0, 3.0, 4.0, 5.0 }, uniq.asDoubleArray())
assertTrue(col.isMissing(col.size() - 1))
assertEquals(3, c.asSet().size())
assertTrue(c.asSet().contains(4.0))
assertEquals(LocalTime.of(5, 15, 30), column1.min())
assertEquals(LocalTime.of(10, 15, 30), column1.max())
assertTrue(column1.contains(LocalTime.of(5, 15, 30)))
assertTrue(column1.contains(LocalTime.of(10, 15, 30)))
assertTrue(bottom.contains(LocalTime.of(0, 4, 2)))
assertTrue(bottom.contains(LocalTime.of(3, 6, 2)))
assertTrue(bottom.contains(LocalTime.of(4, 4, 2)))
assertEquals(3, bottom.size())
assertTrue(top.contains(LocalTime.of(18, 4, 2)))
assertTrue(top.contains(LocalTime.of(14, 4, 2)))
assertTrue(top.contains(LocalTime.of(15, 4, 2)))
assertEquals(3, top.size())
assertNull(sortedA.get(0))
assertEquals(LocalTime.of(0, 4, 2), sortedA.get(1))
assertEquals(LocalTime.of(3, 6, 2), sortedA.get(2))
assertEquals(top, sortedD)
assertEquals(10, column1.size())
assertTrue(column1.contains(LocalTime.of(14, 4, 2)))
assertEquals(4, column1.size())
assertTrue(column1.isMissing(column1.size() - 1))
assertEquals(LocalTime.NOON, column1.get(0))
assertEquals(LocalTime.NOON, column1.get(1))
assertNotEquals(LocalTime.NOON, column1.get(2))
assertNotEquals(LocalTime.NOON, column1.get(3))
assertEquals(3, column1.size())
assertEquals(column1.name(), column2.name())
assertEquals(11, column1.size())
assertEquals(0, column1.size())
assertEquals("11", t.getString(0, "Value"))
assertEquals("1", t.getString(1, "Value"))
assertEquals("00:04:02", t.getString(2, "Value"))
assertEquals("18:04:02", t.getString(3, "Value"))
assertEquals(4, column1.byteSize())
assertEquals(column1.getPackedTime(0), ByteBuffer.wrap(column1.asBytes(0)).getInt())
assertEquals(3, column1.countMissing())
assertEquals(3, s.size())
assertEquals(10, s2.size())
assertEquals(11, column1.countUnique())
assertEquals(3, column1.countUnique())
assertEquals(3, column1.unique().size())
assertEquals(column1.get(0).getHour(), column2.get(0).getHour())
assertEquals(0, column2.get(0).getMinute())
assertEquals(0, column2.get(0).getSecond())
assertEquals(0, column2.get(0).getNano())
assertEquals(TimeColumnType.missingValueIndicator(), column2.getIntInternal(2))
assertNull(second.get(2))
assertNull(minute.get(2))
assertNull(col.get(0))
assertEquals(column1, returned)
assertEquals(1, returned.size())
assertTrue(returned.isMissing(0))
assertEquals(column1, returned)
assertEquals(1, returned.size())
assertEquals(LocalTime.of(9, 10, 42), returned.get(0))
assertEquals(column1, returned)
assertEquals(1, returned.size())
assertEquals(LocalTime.of(9, 10, 42), returned.get(0))
assertEquals(expected, (int) numberColumn.min())
assertEquals(expected, (int) numberColumn.max())
assertEquals(1, result.size())
assertTrue(shortColumn.where(result).contains((short) 4))
assertEquals(5, result.size())
assertTrue(shortColumn.where(result).contains((short) 5))
assertTrue(shortColumn.isMissing(shortColumn.size() - 1))
assertEquals(1, result.size())
assertTrue(longColumn.where(result).contains(4L))
assertEquals(5, result.size())
assertTrue(longColumn.where(result).contains(5L))
assertTrue(longColumn.isMissing(longColumn.size() - 1))
assertEquals(4, column.countByCategory().nCol("Count").sum())
assertEquals(49, result.rowCount())
assertEquals(3, result.columnCount())
assertEquals(4.580805569368441, result.where(result.stringColumn("state").isEqualTo("AL")).doubleColumn(1).get(0))
assertNotNull(column1)
assertEquals(1, b2.columnCount())
assertEquals("date", b2.column(0).name())
assertEquals(3, types.size())
assertTrue(types.contains(ColumnType.STRING))
assertTrue(types.contains(ColumnType.LOCAL_DATE))
assertTrue(types.contains(ColumnType.INTEGER))
assertTrue(bush.containsColumn("who"))
assertTrue(bush.containsColumn("date"))
assertEquals(names.get(0), "date")
assertEquals(names.get(1), "approval")
assertEquals(names.get(2), "who")
assertEquals(reorderedNames.get(0), "who")
assertEquals(reorderedNames.get(1), "approval")
assertEquals(reorderedNames.get(2), "date")
assertTrue(t.containsColumn(sc))
assertTrue(t.containsColumn(sc2))
assertTrue(t.containsColumn(sc))
assertTrue(t.containsColumn(sc2))
assertTrue(t.containsColumn(sc1))
assertTrue(t.containsColumn(sc3))
assertTrue(t2.containsColumn(sc.name()))
assertTrue(t2.containsColumn(sc2.name()))
assertTrue(t.containsColumn(sc))
assertTrue(t.containsColumn(sc2))
assertTrue(t.containsColumn(sc1))
assertTrue(t.containsColumn(sc3))
assertTrue(t2.containsColumn(sc.name()))
assertTrue(t2.containsColumn(sc2.name()))
assertTrue(t.containsColumn(sc))
assertTrue(t.containsColumn(sc2))
assertTrue(t.containsColumn(sc1))
assertTrue(t.containsColumn(sc3))
assertTrue(t2.containsColumn(sc.name()))
assertTrue(t2.containsColumn(sc2.name()))
assertEquals("Test" + LINE_END + LINE_END, t.print())
assertEquals(" Test " + LINE_END + " SC  |" + LINE_END + "------", t.print())
assertEquals(3, bush.countBy("who", "date").columnCount())
assertDoesNotThrow(() -> {
    table.doubleColumn("f1").append(23);
    table.addColumns(StringColumn.create("test"));
})
assertEquals(3 * rowCount, t1.rowCount())
assertEquals(rowCount, t1.rowCount())
assertEquals(2 * rowCount, t1.rowCount())
assertEquals(rowCount, t1.rowCount())
assertEquals(3, t2.rowCount())
assertNotNull(doubles)
assertEquals(1, doubles.size())
assertEquals(0, Table.create("t").columnCount())
assertEquals(1, table.columnCount())
assertEquals(3, t1.rowCount())
assertEquals(LocalDate.of(2004, 2, 5), t1.dateColumn(0).get(2))
assertEquals(2, t1.columnCount())
assertEquals(4, t1.columnCount())
assertEquals("date year", t1.column(3).name())
assertEquals(bush.rowCount(), results[0].rowCount() + results[1].rowCount())
assertEquals(bush.rowCount(), results[0].rowCount() + results[1].rowCount())
assertTrue(count.get() > 0)
assertTrue(bushMinimized.stream().anyMatch(doable))
assertEquals("             bush.csv              " + LINE_END + "    date     |  approval  |  who  |" + LINE_END + "-----------------------------------" + LINE_END + " 2004-02-04  |        53  |  fox  |", row.toString())
assertEquals(sum1, rowConsumer.getSum())
assertEquals("                                              " + LINE_END + "  subject    |  time  |  variable  |  value  |" + LINE_END + "----------------------------------------------" + LINE_END + " John Smith  |     1  |       age  |     33  |" + LINE_END + " John Smith  |     1  |    weight  |     90  |" + LINE_END + " John Smith  |     1  |    height  |   1.87  |" + LINE_END + " Mary Smith  |     1  |       age  |         |" + LINE_END + " Mary Smith  |     1  |    weight  |         |" + LINE_END + " Mary Smith  |     1  |    height  |   1.54  |", melted.toString())
assertEquals("                                              " + LINE_END + "  subject    |  time  |  variable  |  value  |" + LINE_END + "----------------------------------------------" + LINE_END + " John Smith  |     1  |       age  |     33  |" + LINE_END + " John Smith  |     1  |    weight  |     90  |" + LINE_END + " John Smith  |     1  |    height  |   1.87  |" + LINE_END + " Mary Smith  |     1  |    height  |   1.54  |", melted.toString())
assertEquals("subject,time,weight,age,height" + LINE_END + "John Smith,1,90.0,33.0,1.87" + LINE_END + "Mary Smith,1,,,1.54" + LINE_END, writeString)
assertEquals("subject,time,weight,age,height" + LINE_END + "John Smith,1,90.0,33.0,1.87" + LINE_END + "Mary Smith,1,,,1.54" + LINE_END, writeString)
assertTrue(sums.contains((int) approval.getDouble(0) + (int) approval.getDouble(1)))
assertTrue(sums.contains((int) approval.getDouble(1) + (int) approval.getDouble(2)))
assertTrue(sums.contains((int) approval.getDouble(2) + (int) approval.getDouble(3)))
assertEquals(0, table.rowCount())
assertEquals(1, table.rowCount())
assertEquals(2, table.rowCount())
assertTrue(table.isEmpty())
assertEquals(5, table.intColumn("approval").get(table.rowCount() - 1))
assertEquals(64, t2.rowCount())
assertSame(t.column("c2"), second)
assertSame(t.column("c1"), first)
assertSame(t.column("c2"), replacement)
assertEquals(t.columnIndex(replacement), colIndex)
assertEquals(expected, actual)
assertEquals(floatColumn.size(), rowsCount)
assertEquals(5, matrix.length)
assertEquals(bush.categoricalColumn("who").countUnique(), result.rowCount())
assertEquals(bush.categoricalColumn("who").countUnique(), result.rowCount())
assertEquals(bush.rowCount() - 20, result.rowCount())
assertEquals(bush.rowCount() - 20, result.rowCount())
assertEquals(20, result.rowCount())
assertEquals(20, result.rowCount())
assertDoesNotThrow(() -> t.where(t.intColumn("4").isIn(1, 2)))
assertFalse(column1.isMissing(1))
assertFalse(col.isMissing(col.size() - 1))
assertFalse(column1.contains(LocalTime.of(9, 15, 30)))
assertFalse(column1.isMissing(column1.size() - 1))
assertFalse(shortColumn.isMissing(shortColumn.size() - 1))
assertFalse(longColumn.isMissing(longColumn.size() - 1))
assertFalse(t.containsColumn(sc1))
assertFalse(t.containsColumn(sc3))
assertFalse(t2.containsColumn(sc1.name()))
assertFalse(t2.containsColumn(sc3.name()))
assertFalse(t2.containsColumn(sc1.name()))
assertFalse(t2.containsColumn(sc3.name()))
assertFalse(t2.containsColumn(sc1.name()))
assertFalse(t2.containsColumn(sc3.name()))
assertFalse(table.isEmpty())
assertFalse(table.isEmpty())
assertArrayEquals(sc.asList().toArray(), sc.asObjectArray())
assertEquals(0, sc.countMissing())
assertEquals(0, sc.countMissing())
assertEquals(1, sc.countMissing())
assertTrue(sc.isMissing(sc.size() - 1))
assertFalse(sc.isMissing(sc.size() - 1))
assertEquals("", table1.stringColumn("id").get(4))
assertEquals("", table2.stringColumn("id").get(3))
assertNotEquals(set1.size(), set2.size())
assertEquals(3, column.size())
assertTrue(column.contains("no Value"))
assertFalse(column.contains("Value 4"))
assertEquals("", c1.get(0))
assertEquals("Value 1", c1.get(1))
assertEquals("Value 2", c1.get(2))
assertEquals("Value 2", c1.get(0))
assertEquals("Value 3", c1.get(1))
assertEquals("", c1.get(3))
assertEquals("Value 2", c1.get(0))
assertEquals("Value 3", c1.get(1))
assertEquals("", c1.get(3))
assertEquals(1, result.size())
assertEquals(-1, column.firstIndexOf("test"))
assertEquals(ColumnType.STRING, column.type())
assertEquals("Value 2", column.getString(1))
assertEquals(4, column.size())
assertEquals(4, dummies.size())
assertEquals("String column: testing", column.toString())
assertEquals("Wyoming", stringColumn.top(5).get(0))
assertEquals("Alabama", stringColumn.bottom(5).get(0))
assertEquals("Alabama", selection.get(0))
assertEquals("Alaska", selection.get(1))
assertEquals("Arizona", selection.get(2))
assertEquals("Arkansas", selection.get(3))
assertEquals("Tennessee", selection.get(0))
assertEquals("Texas", selection.get(1))
assertEquals("[[Alabama]]", stringColumn.getString(0))
assertEquals(1, selection.size())
assertEquals("Arkansas", selection.getString(0))
assertEquals(result.size(), stringColumn.size() - 1)
assertFalse(result.contains("Alabama"))
assertEquals(51, stringColumn.size())
assertFalse(other.contains("Value 3"))
assertTrue(other.contains("Value 1"))
assertFalse(other.contains("Value 2"))
assertTrue(other.contains("Some other thing"))
assertTrue(other.contains("VALUE 3"))
assertTrue(other.contains("Value 4"))
assertEquals(4, other.size())
assertEquals(3, result.size())
assertEquals(2, result.size())
assertTrue(result.contains("Alabama"))
assertEquals(2, result2.size())
assertTrue(stringColumn.contains("Alabama"))
assertEquals(51, selection2.size())
assertEquals(result2.size(), stringColumn.size())
assertEquals("Alabama", selection.get(0))
assertEquals("Texas", selection.get(1))
assertEquals(2, selection.size())
assertEquals("Alaska", selection.get(0))
assertEquals("Arizona", selection.get(1))
assertEquals("Arkansas", selection.get(2))
assertEquals(49, selection.size())
assertEquals(51, states.size())
assertEquals("Name: John White", formatted.get(0))
assertEquals("ing", suffix.get(0))
assertEquals("cube", suffix.get(1))
assertEquals("e", suffix.get(3))
assertEquals("r", result.get(0))
assertEquals("ice", result.get(1))
assertEquals("back", result.get(2))
assertEquals(" running", result.get(0))
assertEquals(" icecube", result.get(1))
assertEquals("    back", result.get(2))
assertEquals("runningX", result.get(0))
assertEquals("icecubeX", result.get(1))
assertEquals("backXXXX", result.get(2))
assertEquals(4, result.get(0))
assertEquals(72, result.get(1))
assertEquals(132, result.get(2))
assertEquals(0.4, result.get(0))
assertEquals(0.72, result.get(1))
assertEquals(1.132, result.get(2))
assertEquals(0.4f, result.get(0))
assertEquals(0.72f, result.get(1))
assertEquals(1.132f, result.get(2))
assertEquals("ning", result.get(0))
assertEquals("cube", result.get(1))
assertEquals("k", result.get(2))
assertEquals("runningrunningrunning", result.get(0))
assertEquals("Running", result.get(0))
assertEquals("Ice cube", result.get(1))
assertEquals("Stuff4us", result.get(2))
assertEquals("runningrunning", result.get(0))
assertEquals("un", result.get(0))
assertEquals("ce", result.get(1))
assertEquals("ac", result.get(2))
assertEquals("walkning", result.get(0))
assertEquals("walk run run", result.get(1))
assertEquals("walkning", result.get(0))
assertEquals("walk walk walk", result.get(1))
assertEquals("ruXXXXiXXXX", result.get(0))
assertEquals("ruXX ruXX ruXX", result.get(1))
assertEquals("running--walking--swimming", result.get(0))
assertEquals("run--walk--swim", result.get(1))
assertEquals("running", result.get(0))
assertEquals("run run run", result.get(1))
assertEquals("RUNNING", result.get(0))
assertEquals("RUN RUN RUN", result.get(1))
assertEquals("running", result.get(0))
assertEquals("run run run", result.get(1))
assertEquals("running", result.get(0))
assertEquals("Stop Br...", result.get(1))
assertEquals("Backwar...", result.get(2))
assertEquals("Breaking Down Stop", result.get(0))
assertEquals("Backwards Writing", result.get(1))
assertEquals("Breaking,Down,Stop", result.get(0))
assertEquals("Writing Backwards", result.get(1))
assertEquals("Stop Breaking Down", result.get(0))
assertEquals("walk run", result.get(1))
assertEquals("Breaking Down Stop", result.get(0))
assertEquals("run walk", result.get(1))
assertEquals("foo bam", result.get(0))
assertEquals("bar bam", result.get(1))
assertEquals(3, col.countUnique())
assertEquals(3, col.unique().size())
assertEquals(3, col.asStringColumn().unique().size())
assertEquals(4, t2.rowCount())
assertEquals(2, t2.rowCount())
assertEquals(3, col1.countUnique())
assertEquals(3, col1.unique().size())
assertEquals(2, summary.columnCount())
assertEquals(4, summary.rowCount())
assertEquals("Count", summary.getUnformatted(0, 0))
assertEquals("4", summary.getUnformatted(0, 1))
assertEquals("Unique", summary.getUnformatted(1, 0))
assertEquals("4", summary.getUnformatted(1, 1))
assertEquals("Top", summary.getUnformatted(2, 0))
assertEquals("Value 4", summary.getUnformatted(2, 1))
assertEquals("Top Freq.", summary.getUnformatted(3, 0))
assertEquals("1", summary.getUnformatted(3, 1))
assertEquals(1, col1.size())
assertEquals(2, col1.size())
assertEquals(3, col1.size())
assertEquals(3, column.size())
assertTrue(column.contains("no Value"))
assertFalse(column.contains("Value 4"))
assertEquals("", c1.get(0))
assertEquals("Value 1", c1.get(1))
assertEquals("Value 2", c1.get(2))
assertEquals("Value 2", c1.get(0))
assertEquals("Value 3", c1.get(1))
assertEquals("", c1.get(3))
assertEquals(3, joined.columnCount())
assertEquals(0, sc.countMissing())
assertEquals(0, sc.countMissing())
assertTrue(sc.isMissing(sc.size() - 1))
assertFalse(sc.isMissing(sc.size() - 1))
assertEquals("Value 2", c1.get(0))
assertEquals("Value 3", c1.get(1))
assertEquals("", c1.get(3))
assertEquals(1, result.size())
assertEquals(-1, column.firstIndexOf("test"))
assertEquals(ColumnType.TEXT, column.type())
assertEquals("Value 2", column.getString(1))
assertEquals(4, column.size())
assertEquals("Text column: testing", column.toString())
assertEquals("Wyoming", stringColumn.top(5).get(0))
assertEquals("Alabama", stringColumn.bottom(5).get(0))
assertEquals("Alabama", selection.get(0))
assertEquals("Alaska", selection.get(1))
assertEquals("Arizona", selection.get(2))
assertEquals("Arkansas", selection.get(3))
assertEquals("Tennessee", selection.get(0))
assertEquals("Texas", selection.get(1))
assertEquals("[[Alabama]]", stringColumn.getString(0))
assertEquals(1, selection.size())
assertEquals("Arkansas", selection.getString(0))
assertEquals(result.size(), stringColumn.size() - 1)
assertFalse(result.contains("Alabama"))
assertEquals(51, stringColumn.size())
assertFalse(other.contains("Value 3"))
assertTrue(other.contains("Value 1"))
assertFalse(other.contains("Value 2"))
assertTrue(other.contains("Some other thing"))
assertTrue(other.contains("VALUE 3"))
assertTrue(other.contains("Value 4"))
assertEquals(4, other.size())
assertEquals(3, result.size())
assertEquals(2, result.size())
assertTrue(result.contains("Alabama"))
assertEquals(2, result2.size())
assertTrue(stringColumn.contains("Alabama"))
assertEquals(51, selection2.size())
assertEquals(result2.size(), stringColumn.size())
assertEquals("Alabama", selection.get(0))
assertEquals("Texas", selection.get(1))
assertEquals(2, selection.size())
assertEquals("Alaska", selection.get(0))
assertEquals("Arizona", selection.get(1))
assertEquals("Arkansas", selection.get(2))
assertEquals(49, selection.size())
assertEquals(51, states.size())
assertEquals("Name: John White", formatted.get(0))
assertEquals("ing", suffix.get(0))
assertEquals("cube", suffix.get(1))
assertEquals("e", suffix.get(3))
assertEquals("r", result.get(0))
assertEquals("ice", result.get(1))
assertEquals("back", result.get(2))
assertEquals(" running", result.get(0))
assertEquals(" icecube", result.get(1))
assertEquals("    back", result.get(2))
assertEquals("runningX", result.get(0))
assertEquals("icecubeX", result.get(1))
assertEquals("backXXXX", result.get(2))
assertEquals("ning", result.get(0))
assertEquals("cube", result.get(1))
assertEquals("k", result.get(2))
assertEquals("un", result.get(0))
assertEquals("ce", result.get(1))
assertEquals("ac", result.get(2))
assertEquals("walkning", result.get(0))
assertEquals("walk run run", result.get(1))
assertEquals("walkning", result.get(0))
assertEquals("walk walk walk", result.get(1))
assertEquals("ruXXXXiXXXX", result.get(0))
assertEquals("ruXX ruXX ruXX", result.get(1))
assertEquals("running--walking--swimming", result.get(0))
assertEquals("run--walk--swim", result.get(1))
assertEquals("running", result.get(0))
assertEquals("run run run", result.get(1))
assertEquals("RUNNING", result.get(0))
assertEquals("RUN RUN RUN", result.get(1))
assertEquals("running", result.get(0))
assertEquals("run run run", result.get(1))
assertEquals("running", result.get(0))
assertEquals("Stop Br...", result.get(1))
assertEquals("Backwar...", result.get(2))
assertEquals("Breaking Down Stop", result.get(0))
assertEquals("Backwards Writing", result.get(1))
assertEquals("Breaking,Down,Stop", result.get(0))
assertEquals("Writing Backwards", result.get(1))
assertEquals("Stop Breaking Down", result.get(0))
assertEquals("walk run", result.get(1))
assertEquals("Breaking Down Stop", result.get(0))
assertEquals("run walk", result.get(1))
assertEquals("foo bam", result.get(0))
assertEquals("bar bam", result.get(1))
assertEquals(3, col1.countUnique())
assertEquals(3, col1.unique().size())
assertEquals(1, col1.size())
assertEquals(2, col1.size())
assertEquals(3, col1.size())
assertEquals(1, result.size())
assertTrue(intColumn.where(result).contains(4))
assertEquals(5, result.size())
assertTrue(intColumn.where(result).contains(5))
assertTrue(intColumn.isMissing(intColumn.size() - 1))
assertFalse(intColumn.isMissing(intColumn.size() - 1))
assertEquals(floatValue, floatColumn.get(0))
assertEquals(floatObject, floatColumn.get(0))
assertEquals(2.5f, floatColumn.get(0))
assertTrue(floatColumn.isMissing(1))
assertEquals(4.0f, floatColumn.get(2))
assertEquals(1, result.size())
assertTrue(floatColumn.where(result).contains(4f))
assertEquals(5, result.size())
assertTrue(floatColumn.where(result).contains(5f))
assertTrue(floatColumn.isMissing(floatColumn.size() - 1))
assertFalse(floatColumn.isMissing(floatColumn.size() - 1))
assertEquals(3, floatColumn.asSet().size())
assertTrue(floatColumn.asSet().contains(4f))
assertNotNull(winsModel.toString())
assertEquals(2, dataframe.nrows())
assertTrue(Arrays.deepEquals(expected, results))
assertTrue(Arrays.deepEquals(expected, results))
assertTrue(Arrays.deepEquals(expected, results))
assertTrue(Arrays.deepEquals(expected, results))
assertTrue(Arrays.deepEquals(expected, results))
assertTrue(Arrays.deepEquals(expected, results))
assertArrayEquals(sma5, result.asObjectArray())
assertEquals("                            Data                             " + LINE_END + " Summary   |         value1         |        value2         |" + LINE_END + "-------------------------------------------------------------" + LINE_END + "    Count  |                     3  |                    3  |" + LINE_END + "      sum  |                   3.3  |                  6.3  |" + LINE_END + "     Mean  |                   1.1  |                  2.1  |" + LINE_END + "      Min  |                     1  |                    2  |" + LINE_END + "      Max  |                   1.2  |                  2.2  |" + LINE_END + "    Range  |   0.19999999999999996  |  0.20000000000000018  |" + LINE_END + " Variance  |  0.009999999999999995  |  0.01000000000000004  |" + LINE_END + " Std. Dev  |   0.09999999999999998  |   0.1000000000000002  |", result.print())
assertEquals("                                   Data                                    " + LINE_END + "  Summary   |  label   |         value1         |  truthy  |    dates     |" + LINE_END + "---------------------------------------------------------------------------" + LINE_END + "     Count  |       3  |                     3  |          |           3  |" + LINE_END + "    Unique  |       2  |                        |          |              |" + LINE_END + "       Top  |  yellow  |                        |          |              |" + LINE_END + " Top Freq.  |       2  |                        |          |              |" + LINE_END + "       sum  |          |                   3.3  |          |              |" + LINE_END + "      Mean  |          |                   1.1  |          |              |" + LINE_END + "       Min  |          |                     1  |          |              |" + LINE_END + "       Max  |          |                   1.2  |          |              |" + LINE_END + "     Range  |          |   0.19999999999999996  |          |              |" + LINE_END + "  Variance  |          |  0.009999999999999995  |          |              |" + LINE_END + "  Std. Dev  |          |   0.09999999999999998  |          |              |" + LINE_END + "     false  |          |                        |       1  |              |" + LINE_END + "      true  |          |                        |       2  |              |" + LINE_END + "   Missing  |          |                        |          |           0  |" + LINE_END + "  Earliest  |          |                        |          |  2001-01-01  |" + LINE_END + "    Latest  |          |                        |          |  2002-01-01  |", result.print())
assertEquals(source.column(1).name(), slice.column(1).name())
assertTrue(source.rowCount() > slice.column(1).size())
assertEquals(source.column("date").name(), slice.column("date").name())
assertTrue(source.rowCount() > slice.column("date").size())
assertEquals(slice.column(1).size(), slice.column("date").size())
assertEquals(4, slice.column("date").size())
assertEquals(source.columnCount(), slice.columnCount())
assertEquals(source.rowCount(), slice.rowCount())
assertEquals(100, slice1.rowCount())
assertEquals(source.columns().get(0).size(), slice.columns().get(0).size())
assertEquals(source.columnIndex("who"), slice.columnIndex("who"))
assertEquals(source.columnIndex(who), slice.columnIndex(who))
assertNotNull(slice.get(0, 1))
assertEquals(source.get(10, 1), slice.get(0, 1))
assertEquals(source.name(), slice.name())
assertTrue(slice.isEmpty())
assertFalse(source.isEmpty())
assertEquals(source.columnNames(), slice.columnNames())
assertTrue(thrown.getMessage().contains("Class TableSlice does not support the addColumns operation"))
assertTrue(thrown.getMessage().contains("Class TableSlice does not support the removeColumns operation"))
assertEquals(first.get(0, 1), slice.get(0, 1))
assertEquals(first.get(0, 1), source.get(2, 1))
assertEquals("foo", slice.name())
assertNotEquals("foo", source.name())
assertEquals(source.print(), slice.print())
assertEquals(10, t.rowCount())
assertEquals(source.get(1, 1), t.get(0, 1))
assertEquals(2, count)
assertArrayEquals(expected, actual)
assertArrayEquals(expected, actual)
assertArrayEquals(expected, actual)
assertArrayEquals(expected, actual)
assertEquals(tableSlice.column("approval").asList(), source.column("approval").asList())
assertEquals(2, tableSlice.rowCount())
assertEquals(source.rowCount(), tableSlice.rowCount())
assertArrayEquals(expected, actual)
assertArrayEquals(expected, actual)
assertArrayEquals(expected, actual)
assertArrayEquals(expected, actual)
assertEquals(6, group.size())
assertEquals(table.rowCount(), count)
assertEquals(146, group.size())
assertEquals(table.rowCount(), count)
assertTrue(viewNames.contains("zogby~~~45"))
assertEquals(table.rowCount(), count)
assertTrue(group.contains("fox"))
assertEquals(6, tables.size())
assertEquals(aggregated.rowCount(), group.size())
assertEquals(aggregated2.rowCount(), aggregated1.rowCount())
assertEquals(aggregated.rowCount(), group.size())
assertEquals(2, aggregated.columnCount())
assertEquals(3, aggregated.columnCount())
assertEquals(singleFalse.get(0), actual.get(0))
assertEquals(singleTrue.get(0), actual.get(0))
assertEquals(singleTrue.get(0), actual.get(0))
assertEquals(singleFalse.get(0), actual.get(0))
assertEquals(expected.length, num)
assertEquals(expected.length, num)
assertTrue(localDateColumn.isSunday().contains(0))
assertTrue(localDateColumn.isMonday().contains(1))
assertTrue(localDateColumn.isTuesday().contains(2))
assertTrue(localDateColumn.isWednesday().contains(3))
assertTrue(localDateColumn.isThursday().contains(4))
assertTrue(localDateColumn.isFriday().contains(7))
assertTrue(localDateColumn.isSaturday().contains(8))
assertFalse(selection.contains(0))
assertFalse(selection.contains(1))
assertTrue(selection.contains(2))
assertTrue(selection.contains(5))
assertFalse(selection.contains(6))
assertFalse(selection.contains(0))
assertTrue(selection.contains(1))
assertFalse(selection.contains(2))
assertTrue(selection.contains(0))
assertTrue(selection.contains(1))
assertTrue(selection.contains(2))
assertFalse(selection.contains(0))
assertFalse(selection.contains(1))
assertFalse(selection.contains(2))
assertTrue(dateColumn.isInJanuary().contains(0))
assertTrue(dateColumn.isInFebruary().contains(1))
assertTrue(dateColumn.isInMarch().contains(2))
assertTrue(dateColumn.isInApril().contains(3))
assertTrue(dateColumn.isInMay().contains(4))
assertTrue(dateColumn.isInJune().contains(5))
assertTrue(dateColumn.isInJuly().contains(6))
assertTrue(dateColumn.isInAugust().contains(7))
assertTrue(dateColumn.isInSeptember().contains(8))
assertTrue(dateColumn.isInOctober().contains(9))
assertTrue(dateColumn.isInNovember().contains(10))
assertTrue(dateColumn.isInDecember().contains(11))
assertTrue(dateColumn.isInQ1().contains(2))
assertTrue(dateColumn.isInQ2().contains(4))
assertTrue(dateColumn.isInQ3().contains(8))
assertTrue(dateColumn.isInQ4().contains(11))
assertTrue(t.where(t.dateColumn("test").isInJanuary()).intColumn("index").contains(0))
assertTrue(t.where(t.dateColumn("test").isInFebruary()).intColumn("index").contains(1))
assertTrue(t.where(t.dateColumn("test").isInMarch()).intColumn("index").contains(2))
assertTrue(t.where(t.dateColumn("test").isInApril()).intColumn("index").contains(3))
assertTrue(t.where(t.dateColumn("test").isInMay()).intColumn("index").contains(4))
assertTrue(t.where(t.dateColumn("test").isInJune()).intColumn("index").contains(5))
assertTrue(t.where(t.dateColumn("test").isInJuly()).intColumn("index").contains(6))
assertTrue(t.where(t.dateColumn("test").isInAugust()).intColumn("index").contains(7))
assertTrue(t.where(t.dateColumn("test").isInSeptember()).intColumn("index").contains(8))
assertTrue(t.where(t.dateColumn("test").isInOctober()).intColumn("index").contains(9))
assertTrue(t.where(t.dateColumn("test").isInNovember()).intColumn("index").contains(10))
assertTrue(t.where(t.dateColumn("test").isInDecember()).intColumn("index").contains(11))
assertTrue(t.where(t.dateColumn("test").isInQ1()).intColumn("index").contains(2))
assertTrue(t.where(t.dateColumn("test").isInQ2()).intColumn("index").contains(4))
assertTrue(t.where(t.dateColumn("test").isInQ3()).intColumn("index").contains(8))
assertTrue(t.where(t.dateColumn("test").isInQ4()).intColumn("index").contains(11))
assertTrue(dateColumn.isBefore(packed).contains(0))
assertTrue(dateColumn.isBefore(date).contains(0))
assertTrue(dateColumn.isOnOrBefore(date).contains(0))
assertTrue(dateColumn.isEqualTo(packed).contains(1))
assertTrue(dateColumn.isEqualTo(date).contains(1))
assertTrue(dateColumn.isOnOrBefore(date).contains(1))
assertTrue(dateColumn.isOnOrAfter(date).contains(1))
assertFalse(dateColumn.isOnOrBefore(date).contains(2))
assertTrue(dateColumn.isAfter(packed).contains(2))
assertTrue(dateColumn.isAfter(date).contains(2))
assertTrue(dateColumn.isOnOrAfter(date).contains(2))
assertTrue(dateColumn.isBetweenExcluding(beforeDate, afterDate).contains(1))
assertTrue(dateColumn.isBetweenIncluding(beforeDate, afterDate).contains(2))
assertTrue(dateColumn.isBetweenIncluding(beforeDate, afterDate).contains(0))
assertFalse(dateColumn.isBetweenExcluding(beforeDate, afterDate).contains(2))
assertFalse(dateColumn.isBetweenExcluding(beforeDate, afterDate).contains(0))
assertTrue(t.where(dateColumn.isBefore(packed)).intColumn("index").contains(0))
assertTrue(t.where(dateColumn.isEqualTo(packed)).intColumn("index").contains(1))
assertTrue(t.where(dateColumn.isAfter(packed)).intColumn("index").contains(2))
assertTrue(t.where(t.dateColumn("test").isBetweenExcluding(beforeDate, afterDate)).intColumn("index").contains(1))
assertTrue(t.where(t.dateColumn("test").isBetweenIncluding(beforeDate, afterDate)).intColumn("index").contains(2))
assertTrue(t.where(t.dateColumn("test").isBetweenIncluding(beforeDate, afterDate)).intColumn("index").contains(0))
assertFalse(t.where(t.dateColumn("test").isBetweenExcluding(beforeDate, afterDate)).intColumn("index").contains(2))
assertFalse(t.where(t.dateColumn("test").isBetweenExcluding(beforeDate, afterDate)).intColumn("index").contains(0))
assertTrue(column.isMissing().contains(1))
assertTrue(column.isNotMissing().contains(0))
assertTrue(column.isNotMissing().contains(0))
assertTrue(column.isMissing().contains(1))
assertTrue(dateColumn.isOnOrAfter(same).contains(0))
assertTrue(t.dateColumn("test").isOnOrAfter(same).contains(0))
assertTrue(t.dateColumn("test").isOnOrAfter(t.dateColumn("same")).contains(0))
assertTrue(dateColumn.isOnOrBefore(same).contains(0))
assertTrue(t.dateColumn("test").isOnOrBefore(same).contains(0))
assertTrue(t.dateColumn("test").isOnOrBefore(t.dateColumn("same")).contains(0))
assertTrue(dateColumn.isEqualTo(same).contains(0))
assertTrue(t.dateColumn("test").isEqualTo(same).contains(0))
assertTrue(t.dateColumn("test").isEqualTo(t.dateColumn("same")).contains(0))
assertTrue(dateColumn.isBefore(after).contains(0))
assertFalse(dateColumn.isOnOrAfter(after).contains(0))
assertTrue(t.dateColumn("test").isBefore(after).contains(0))
assertTrue(t.dateColumn("test").isBefore(t.dateColumn("after")).contains(0))
assertTrue(dateColumn.isAfter(before).contains(0))
assertFalse(dateColumn.isOnOrBefore(before).contains(0))
assertTrue(t.dateColumn("test").isAfter(before).contains(0))
assertTrue(t.dateColumn("test").isAfter(t.dateColumn("before")).contains(0))
assertFalse(dateColumn.isNotEqualTo(same).contains(0))
assertTrue(dateColumn.isNotEqualTo(dateTime).contains(0))
assertFalse(dateColumn.isNotEqualTo(dateTime).contains(1))
assertFalse(t.dateColumn("test").isNotEqualTo(same).contains(0))
assertFalse(t.dateColumn("test").isNotEqualTo(t.dateColumn("same")).contains(0))
assertTrue(dateColumn.isOnOrBefore(same).contains(0))
assertTrue(dateColumn.isOnOrBefore(after).contains(0))
assertFalse(dateColumn.isOnOrBefore(before).contains(0))
assertTrue(dateColumn.isNotEqualTo(before).contains(0))
assertTrue(dateColumn.isOnOrAfter(same).contains(1))
assertTrue(dateColumn.isOnOrAfter(before).contains(2))
assertFalse(dateColumn.isOnOrAfter(after).contains(2))
assertTrue(dateColumn.isNotEqualTo(after).contains(0))
assertTrue(t.dateColumn("test").isNotEqualTo(t.dateColumn("before")).contains(0))
assertTrue(t.dateColumn("test").isNotEqualTo(before).contains(0))
assertFalse(t.dateColumn("test").isNotEqualTo(t.dateColumn("same")).contains(0))
assertFalse(t.dateColumn("test").isNotEqualTo(same).contains(0))
assertEquals(9, getDayOfMonth(pack(day)))
assertEquals(4, getDayOfMonth(day2))
assertEquals(2011, getYear(day2))
assertEquals(7, getMonthValue(day2))
assertEquals(2011, getYear(day2))
assertEquals(9, getDayOfMonth(day2))
assertEquals(3, getMonthValue(day2))
assertEquals(2020, getYear(day2))
assertEquals(9, getDayOfMonth(day2))
assertEquals(3, getMonthValue(day2))
assertEquals(2021, getYear(day2))
assertEquals(9, getDayOfMonth(day2))
assertEquals(3, getMonthValue(day2))
assertEquals(2001, getYear(day2))
assertEquals(9, getDayOfMonth(day2))
assertEquals(2, getMonthValue(day2))
assertEquals(2012, getYear(day2))
assertEquals(9, getDayOfMonth(day2))
assertEquals(11, getMonthValue(day2))
assertEquals(2010, getYear(day2))
assertEquals(9, getDayOfMonth(day2))
assertEquals(1, getMonthValue(day2))
assertEquals(2012, getYear(day2))
assertEquals(10, getDayOfMonth(day2))
assertEquals(asLocalDate(day2), day.plusWeeks(2))
assertEquals(asLocalDate(day2), day.minusWeeks(5))
assertEquals(7, daysUntil(day2, packed))
assertEquals(12, getMonthValue(day2))
assertEquals(2010, getYear(day2))
assertEquals(30, getDayOfMonth(day2))
assertEquals(366, lengthOfYear(packed))
assertEquals(365, lengthOfYear(packed))
assertEquals(31, lengthOfMonth(packed))
assertEquals(30, lengthOfMonth(packed))
assertEquals(DayOfWeek.THURSDAY, getDayOfWeek(packed))
assertTrue(isThursday(packed))
assertEquals(DayOfWeek.FRIDAY, getDayOfWeek(packed))
assertTrue(isFriday(packed))
assertEquals(DayOfWeek.SATURDAY, getDayOfWeek(packed))
assertTrue(isSaturday(packed))
assertEquals(DayOfWeek.SUNDAY, getDayOfWeek(packed))
assertTrue(isSunday(packed))
assertEquals(DayOfWeek.MONDAY, getDayOfWeek(packed))
assertTrue(isMonday(packed))
assertEquals(DayOfWeek.TUESDAY, getDayOfWeek(packed))
assertTrue(isTuesday(packed))
assertEquals(DayOfWeek.WEDNESDAY, getDayOfWeek(packed))
assertTrue(isWednesday(packed))
assertTrue(isInQ1(packed))
assertTrue(isInQ2(packed))
assertTrue(isInQ3(packed))
assertTrue(isInQ4(packed))
assertEquals(today.getYear(), getYear(pack(today)))
assertTrue(isEqualTo(date, date2))
assertTrue(isAfter(date, date2))
assertFalse(isEqualTo(date, date2))
assertFalse(isBefore(date, date2))
assertTrue(isBefore(date, date2))
assertFalse(isAfter(date, date2))
assertFalse(isEqualTo(date, date2))
assertEquals(date.getDayOfWeek(), getDayOfWeek(dateTime))
assertNotNull(dateTimes)
assertTrue(dateTimes.get(0).toLocalTime().equals(LocalTime.NOON))
assertNotNull(dateTimes)
assertTrue(dateTimes.get(0).toLocalTime().equals(LocalTime.NOON))
assertEquals(scenario.col1col2Appended, scenario.col1.append(scenario.col2).asList())
assertEquals(dc1.get(0).plusDays(100), dc2.get(0))
assertEquals(instant, parser.parse(instant.toString()))
assertEquals(instant, parser.parse(col.getUnformattedString(0)))
assertFalse(parser.canParse("foobar"))
assertTrue(parser.canParse(Instant.now().toString()))
assertEquals("TUESDAY", dayOfWeek.get(0))
assertEquals("07:30", hourMinute.get(0))
assertEquals("2018-04", yearMonth.get(0))
assertEquals("2018-" + Strings.padStart(String.valueOf(dateTime.getDayOfYear()), 3, '0'), yearDay.get(0))
assertEquals("2018-" + Strings.padStart(String.valueOf(dateTime.get(woy)), 2, '0'), yearWeek.get(0))
assertEquals("2018-2", yearQuarter.get(0))
assertEquals("APRIL", month.get(0))
assertEquals(dateTime.toLocalDate(), date.get(0))
assertEquals(dateTime.toLocalTime(), time.get(0))
assertEquals(startCol.get(0), lag.get(1))
assertEquals(DateTimeColumnType.missingValueIndicator(), lag.getLongInternal(0))
assertEquals(startCol.get(1), lead.get(0))
assertEquals(DateTimeColumnType.missingValueIndicator(), lead.getLongInternal(2))
assertTrue(localDateTimeColumn.isSunday().contains(0))
assertTrue(localDateTimeColumn.isMonday().contains(1))
assertTrue(localDateTimeColumn.isTuesday().contains(2))
assertTrue(localDateTimeColumn.isWednesday().contains(3))
assertTrue(localDateTimeColumn.isThursday().contains(4))
assertTrue(localDateTimeColumn.isFriday().contains(7))
assertTrue(localDateTimeColumn.isSaturday().contains(8))
assertFalse(selection.contains(0))
assertFalse(selection.contains(1))
assertTrue(selection.contains(2))
assertTrue(selection.contains(5))
assertFalse(selection.contains(6))
assertFalse(selection.contains(0))
assertTrue(selection.contains(1))
assertFalse(selection.contains(2))
assertTrue(selection.contains(0))
assertTrue(selection.contains(1))
assertTrue(selection.contains(2))
assertFalse(selection.contains(0))
assertFalse(selection.contains(1))
assertFalse(selection.contains(2))
assertTrue(column.isMissing().contains(1))
assertTrue(column.isNotMissing().contains(0))
assertTrue(column.isNotMissing().contains(0))
assertTrue(column.isMissing().contains(1))
assertTrue(column.isMidnight().contains(0))
assertFalse(column.isMidnight().contains(1))
assertTrue(column.isBeforeNoon().contains(0))
assertTrue(column.isBeforeNoon().contains(1))
assertTrue(column.isNoon().contains(2))
assertFalse(column.isAfterNoon().contains(1))
assertTrue(column.isAfterNoon().contains(3))
assertTrue(dateTimeColumn.isInJanuary().contains(0))
assertTrue(dateTimeColumn.isInFebruary().contains(1))
assertTrue(dateTimeColumn.isInMarch().contains(2))
assertTrue(dateTimeColumn.isInApril().contains(3))
assertTrue(dateTimeColumn.isInMay().contains(4))
assertTrue(dateTimeColumn.isInJune().contains(5))
assertTrue(dateTimeColumn.isInJuly().contains(6))
assertTrue(dateTimeColumn.isInAugust().contains(7))
assertTrue(dateTimeColumn.isInSeptember().contains(8))
assertTrue(dateTimeColumn.isInOctober().contains(9))
assertTrue(dateTimeColumn.isInNovember().contains(10))
assertTrue(dateTimeColumn.isInDecember().contains(11))
assertTrue(dateTimeColumn.isInQ1().contains(2))
assertTrue(dateTimeColumn.isInQ2().contains(4))
assertTrue(dateTimeColumn.isInQ3().contains(8))
assertTrue(dateTimeColumn.isInQ4().contains(11))
assertTrue(dateTimeColumn.isOnOrBefore(date).contains(0))
assertTrue(dateTimeColumn.isOnOrBefore(date).contains(1))
assertTrue(dateTimeColumn.isOnOrAfter(date).contains(1))
assertTrue(dateTimeColumn.isOnOrAfter(date).contains(2))
assertTrue(dateTimeColumn.isBefore(dateTime).contains(0))
assertTrue(dateTimeColumn.isBefore(date).contains(0))
assertTrue(t.where(t.dateTimeColumn("test").isBefore(dateTime)).intColumn("index").contains(0))
assertTrue(t.where(t.dateTimeColumn("test").isBefore(date)).intColumn("index").contains(0))
assertTrue(dateTimeColumn.isEqualTo(dateTime).contains(1))
assertTrue(t.where(t.dateTimeColumn("test").isEqualTo(dateTime)).intColumn("index").contains(1))
assertTrue(dateTimeColumn.isAfter(dateTime).contains(2))
assertTrue(dateTimeColumn.isAfter(date).contains(2))
assertTrue(t.where(t.dateTimeColumn("test").isAfter(dateTime)).intColumn("index").contains(2))
assertTrue(t.where(t.dateTimeColumn("test").isAfter(date)).intColumn("index").contains(2))
assertTrue(dateTimeColumn.isNotEqualTo(dateTime).contains(2))
assertTrue(t.where(t.dateTimeColumn("test").isNotEqualTo(dateTime)).intColumn("index").contains(2))
assertTrue(dateTimeColumn.isBetweenExcluding(beforeDate, afterDate).contains(1))
assertTrue(t.where(t.dateTimeColumn("test").isBetweenExcluding(beforeDate, afterDate)).intColumn("index").contains(1))
assertTrue(dateTimeColumn.isBetweenExcluding(beforeDate, afterDate).contains(1))
assertTrue(t.where(t.dateTimeColumn("test").isBetweenExcluding(beforeDate, afterDate)).intColumn("index").contains(1))
assertTrue(dateTimeColumn.isBetweenIncluding(beforeDate, afterDate).contains(2))
assertTrue(t.where(t.dateTimeColumn("test").isBetweenIncluding(beforeDate, afterDate)).intColumn("index").contains(2))
assertTrue(dateTimeColumn.isBetweenIncluding(beforeDate, afterDate).contains(0))
assertTrue(t.where(t.dateTimeColumn("test").isBetweenIncluding(beforeDate, afterDate)).intColumn("index").contains(0))
assertFalse(dateTimeColumn.isBetweenExcluding(beforeDate, afterDate).contains(2))
assertFalse(t.where(t.dateTimeColumn("test").isBetweenExcluding(beforeDate, afterDate)).intColumn("index").contains(2))
assertFalse(dateTimeColumn.isBetweenExcluding(beforeDate, afterDate).contains(0))
assertFalse(t.where(t.dateTimeColumn("test").isBetweenExcluding(beforeDate, afterDate)).intColumn("index").contains(0))
assertTrue(dateTimeColumn.isEqualTo(same).contains(0))
assertTrue(t.dateTimeColumn("test").isEqualTo(same).contains(0))
assertTrue(t.dateTimeColumn("test").isEqualTo(t.dateTimeColumn("same")).contains(0))
assertTrue(dateTimeColumn.isBefore(after).contains(0))
assertTrue(t.dateTimeColumn("test").isBefore(after).contains(0))
assertTrue(t.dateTimeColumn("test").isBefore(t.dateTimeColumn("after")).contains(0))
assertTrue(dateTimeColumn.isAfter(before).contains(0))
assertTrue(t.dateTimeColumn("test").isAfter(before).contains(0))
assertTrue(t.dateTimeColumn("test").isAfter(t.dateTimeColumn("before")).contains(0))
assertFalse(dateTimeColumn.isNotEqualTo(same).contains(0))
assertFalse(t.dateTimeColumn("test").isNotEqualTo(same).contains(0))
assertFalse(t.dateTimeColumn("test").isNotEqualTo(t.dateTimeColumn("same")).contains(0))
assertTrue(dateTimeColumn.isOnOrBefore(same).contains(0))
assertTrue(dateTimeColumn.isOnOrBefore(after).contains(0))
assertFalse(dateTimeColumn.isOnOrBefore(before).contains(0))
assertTrue(dateTimeColumn.isNotEqualTo(before).contains(0))
assertTrue(dateTimeColumn.isOnOrAfter(same).contains(1))
assertTrue(dateTimeColumn.isOnOrAfter(before).contains(2))
assertFalse(dateTimeColumn.isOnOrAfter(after).contains(2))
assertTrue(dateTimeColumn.isNotEqualTo(after).contains(0))
assertTrue(t.dateTimeColumn("test").isOnOrAfter(t.dateTimeColumn("same")).contains(0))
assertTrue(t.dateTimeColumn("test").isOnOrAfter(same).contains(0))
assertFalse(t.dateTimeColumn("test").isOnOrAfter(t.dateTimeColumn("after")).contains(0))
assertFalse(t.dateTimeColumn("test").isOnOrAfter(after).contains(0))
assertTrue(t.dateTimeColumn("test").isOnOrBefore(t.dateTimeColumn("same")).contains(0))
assertTrue(t.dateTimeColumn("test").isOnOrBefore(same).contains(0))
assertTrue(t.dateTimeColumn("test").isOnOrBefore(t.dateTimeColumn("after")).contains(0))
assertTrue(t.dateTimeColumn("test").isOnOrBefore(after).contains(0))
assertFalse(t.dateTimeColumn("test").isOnOrBefore(t.dateTimeColumn("before")).contains(0))
assertFalse(t.dateTimeColumn("test").isOnOrBefore(before).contains(0))
assertTrue(t.dateTimeColumn("test").isNotEqualTo(t.dateTimeColumn("before")).contains(0))
assertTrue(t.dateTimeColumn("test").isNotEqualTo(before).contains(0))
assertFalse(t.dateTimeColumn("test").isNotEqualTo(t.dateTimeColumn("same")).contains(0))
assertFalse(t.dateTimeColumn("test").isNotEqualTo(same).contains(0))
assertEquals(today.getDayOfMonth(), getDayOfMonth(pack(today)))
assertEquals(today.getYear(), getYear(pack(today)))
assertEquals(dateTime.getDayOfYear(), upacked.getDayOfYear())
assertEquals(dateTime.getHour(), upacked.getHour())
assertEquals(dateTime.getMinute(), upacked.getMinute())
assertEquals(dateTime.getSecond(), upacked.getSecond())
assertEquals(12, getMonthValue(dateTime))
assertNotNull(d1)
assertNotNull(t1)
assertEquals(date.toString(), d1.toString())
assertEquals(now.getHour(), getHour(pack(now)))
assertEquals(now.getMinute(), getMinute(pack(now)))
assertEquals(now.getSecond(), getSecond(pack(now)))
assertEquals(now.get(ChronoField.MINUTE_OF_DAY), getMinuteOfDay(pack(now)))
assertEquals(now.get(ChronoField.MILLI_OF_DAY), getMillisecondOfDay(pack(now)))
assertEquals(now.get(ChronoField.DAY_OF_WEEK), getDayOfWeek(pack(now)).getValue())
assertEquals(expected.length, num)
assertTrue(selection.contains(0))
assertTrue(selection.contains(0))
assertFalse(selection.contains(0))
assertFalse(selection.contains(0))
assertFalse(selection.contains(0))
assertFalse(selection.contains(0))
assertTrue(selection.contains(0))
assertTrue(selection.contains(0))
assertFalse(selection.contains(0))
assertFalse(selection.contains(0))
assertTrue(selection.contains(0))
assertTrue(selection.contains(0))
assertTrue(selection.contains(0))
assertFalse(selection.contains(1))
assertFalse(selection.contains(2))
assertTrue(selection.contains(3))
assertTrue(selection.contains(0))
assertFalse(selection.contains(1))
assertFalse(selection.contains(2))
assertTrue(selection.contains(3))
assertFalse(selection.contains(0))
assertTrue(selection.contains(1))
assertTrue(selection.contains(2))
assertFalse(selection.contains(0))
assertTrue(selection.contains(1))
assertTrue(selection.contains(2))
assertFalse(selection.contains(0))
assertFalse(selection.contains(1))
assertFalse(selection.contains(2))
assertTrue(selection.contains(3))
assertFalse(selection.contains(0))
assertTrue(selection.contains(1))
assertFalse(selection.contains(2))
assertFalse(selection.contains(3))
assertFalse(selection.contains(0))
assertFalse(selection.contains(1))
assertFalse(selection.contains(2))
assertTrue(selection.contains(3))
assertFalse(selection.contains(0))
assertTrue(selection.contains(1))
assertFalse(selection.contains(2))
assertFalse(selection.contains(3))
assertEquals(1, result.rowCount())
assertEquals(1, result.size())
assertEquals(1, result.get(0))
assertEquals(result.rowCount(), 1)
assertEquals(result.getUnformatted(0, 0), toShortTimeString(pack(LocalTime.of(7, 4, 2))))
assertEquals(1, result.rowCount())
assertNotEquals(result.get(0, 0), toShortTimeString(pack(LocalTime.of(7, 4, 2))))
assertEquals(1, result.size())
assertEquals(0, result.get(0))
assertEquals(1, result.size())
assertEquals(1, result.get(0))
assertEquals(1, result.rowCount())
assertEquals(LocalTime.of(5, 15, 30), column1.get(0))
assertEquals(1, result.size())
assertEquals(0, result.get(0))
assertEquals(2, result.rowCount())
assertEquals(1, result.rowCount())
assertEquals(result.getUnformatted(0, 0), toShortTimeString(pack(LocalTime.of(7, 4, 2))))
assertEquals(1, result.size())
assertEquals(result.get(0), 0)
assertEquals(2, selection.size())
assertEquals(expected.length, num)
assertEquals(now.getHour(), getHour(pack(now)))
assertEquals(now.getMinute(), getMinute(pack(now)))
assertEquals(now.getSecond(), getSecond(pack(now)))
assertEquals(time.getLong(ChronoField.NANO_OF_DAY), toNanoOfDay(pTime))
assertEquals(now.get(ChronoField.MILLI_OF_DAY), getMillisecondOfDay(pack(now)))
assertEquals(getMillisecondOfDay(packedTime), getMillisecondOfDay(packedTime2))
assertEquals(localTime.getHour(), getHour(packedTime2))
assertEquals(localTime.getMinute(), getMinute(packedTime2))
assertEquals(localTime.getSecond(), getSecond(packedTime2))
assertEquals(getMillisecondOfDay(packedTime), getMillisecondOfDay(packedTime2))
assertEquals(localTime.getHour(), getHour(packedTime2))
assertEquals(localTime.getMinute(), getMinute(packedTime2))
assertEquals(localTime.getSecond(), getSecond(packedTime2))
assertEquals(getMillisecondOfDay(packedTime), getMillisecondOfDay(packedTime2))
assertEquals(localTime.until(localTime2, SECONDS), secondsUntil(packedTime2, packedTime))
assertEquals(localTime.until(localTime2, MINUTES), minutesUntil(packedTime2, packedTime))
assertEquals(localTime.until(localTime2, HOURS), hoursUntil(packedTime2, packedTime))
assertNotNull(t1)
assertEquals(time.getHour(), t1.getHour())
assertEquals(time.getMinute(), t1.getMinute())
assertEquals(time.getSecond(), t1.getSecond())
assertEquals(time.get(ChronoField.MILLI_OF_SECOND), t1.get(ChronoField.MILLI_OF_SECOND))
assertEquals(localTime2.getHour(), getHour(packedTime2))
assertEquals(localTime2.getMinute(), getMinute(packedTime2))
assertEquals(localTime2.getSecond(), getSecond(packedTime2))
assertEquals(localTime2.getNano(), getNano(packedTime2))
assertEquals(LocalDate.parse("2004-02-04"), first.get(0))
assertEquals(LocalDate.parse("2004-01-21"), first.get(1))
assertEquals(LocalDate.parse("2004-01-07"), first.get(2))
assertEquals("fox", first3.get(0))
assertEquals("fox", first3.get(1))
assertEquals("fox", first3.get(2))
assertEquals(LocalDate.parse("2001-03-27"), last.get(0))
assertEquals(LocalDate.parse("2001-02-27"), last.get(1))
assertEquals(LocalDate.parse("2001-02-09"), last.get(2))
assertEquals("zogby", last3.get(0))
assertEquals("zogby", last3.get(1))
assertEquals("zogby", last3.get(2))
assertEquals("approval", c.name())
assertEquals(ColumnType.DOUBLE, c.type())
assertTrue(c.contains("fox"))
assertFalse(c.contains("foxes"))
assertEquals(3, table.columnCount())
assertEquals(2, table.columnCount())
assertEquals(whos.size(), whoColumn.size())
assertTrue(dc3.contains(1.0))
assertTrue(dc3.contains(-4.0))
assertTrue(dc3.contains(-1.0))
assertTrue(dc1.contains(-34.2))
assertTrue(ic1.contains(-34))
assertTrue(sc1.contains("missing"))
assertTrue(dtc1.contains(LocalDate.of(2001, 1, 1)))
assertTrue(dc3.contains(2.0))
assertTrue(dc3.contains(0.0))
assertTrue(dc3.contains(3.0))
assertEquals(2, DoubleColumn.create("t1", new double[] { 0, 1, 2 }).count(isPositiveOrZero, 2))
assertEquals(0, DoubleColumn.create("t1", new double[] { 0, 1, 2 }).count(isNegative, 2))
assertEquals(3, DoubleColumn.create("t1", new double[] { 0, 1, 2 }).count(isPositiveOrZero))
assertEquals(0, DoubleColumn.create("t1", new double[] { 0, 1, 2 }).count(isNegative))
assertTrue(DoubleColumn.create("t1", new double[] { 0, 1, 2 }).allMatch(isPositiveOrZero))
assertFalse(DoubleColumn.create("t1", new double[] { -1, 0, 1 }).allMatch(isPositiveOrZero))
assertFalse(DoubleColumn.create("t1", new double[] { 1, 0, -1 }).allMatch(isPositiveOrZero))
assertTrue(DoubleColumn.create("t1", new double[] { 0, 1, 2 }).anyMatch(isPositiveOrZero))
assertTrue(DoubleColumn.create("t1", new double[] { -1, 0, -1 }).anyMatch(isPositiveOrZero))
assertFalse(DoubleColumn.create("t1", new double[] { 0, 1, 2 }).anyMatch(isNegative))
assertTrue(DoubleColumn.create("t1", new double[] { 0, 1, 2 }).noneMatch(isNegative))
assertFalse(DoubleColumn.create("t1", new double[] { -1, 0, 1 }).noneMatch(isNegative))
assertFalse(DoubleColumn.create("t1", new double[] { 1, 0, -1 }).noneMatch(isNegative))
assertEquals(ts.length, column.size())
assertEquals(Double.valueOf(1.0), DoubleColumn.create("t1", new double[] { -1, 0, 1 }).max(Double::compare).get())
assertFalse(DoubleColumn.create("t1").max((d1, d2) -> (int) (d1 - d2)).isPresent())
assertEquals(Double.valueOf(-1.0), DoubleColumn.create("t1", new double[] { -1, 0, 1 }).min(Double::compare).get())
assertFalse(DoubleColumn.create("t1").min((d1, d2) -> (int) (d1 - d2)).isPresent())
assertEquals(Double.valueOf(1.0), DoubleColumn.create("t1", new double[] { -1, 0, 1 }).reduce(1.0, sum))
assertEquals(Double.valueOf(0.0), DoubleColumn.create("t1", new double[] { -1, 0, 1 }).reduce(sum).get())
assertFalse(DoubleColumn.create("t1", new double[] {}).reduce(sum).isPresent())
assertEquals(-1, testDoubleCol.indexOf(2))
assertEquals(-1, testDoubleCol.indexOf(0))
assertEquals(0, testDoubleCol.indexOf(0.0))
assertEquals(1, testDoubleCol.indexOf(1.0))
assertEquals(expected.length, num)
assertEquals("            tst            " + LINE_END + " index  |  index lag(-2)  |" + LINE_END + "---------------------------" + LINE_END + "     0  |              2  |" + LINE_END + "     1  |              3  |" + LINE_END + "     2  |                 |" + LINE_END + "     3  |                 |", t.print())
assertEquals("            tst            " + LINE_END + " index  |  index lead(1)  |" + LINE_END + "---------------------------" + LINE_END + "     0  |              1  |" + LINE_END + "     1  |              2  |" + LINE_END + "     2  |              3  |" + LINE_END + "     3  |                 |", t.print())
assertFalse(newDoubles.isEmpty())
assertFalse(newDoubles.isEmpty())
assertFalse(newDoubles.isEmpty())
assertFalse(newDoubles.isEmpty())
assertFalse(newDoubles.isEmpty())
assertEquals(Long.toString(value), ncf.format(value))
assertEquals("data 5-period Mean", result.name())
assertEquals(1, selection.get(0))
assertEquals(2, selection.get(1))
assertEquals(2, selection.size())
assertEquals(0, selection.get(0))
assertEquals(3, selection.get(1))
assertEquals(4, selection.get(2))
assertEquals(3, selection.size())
assertEquals(1, selection.get(0))
assertEquals(1, selection.size())
assertEquals(0, selection.get(0))
assertEquals(1, selection.size())
assertArrayEquals(values, int1.asIntArray())
assertArrayEquals(values, c1.asFloatArray())
assertArrayEquals(values, c1.asDoubleArray())
assertEquals(2, selection.get(0))
assertEquals(1, selection.size())
assertEquals(0, selection.get(0))
assertEquals(1, selection.get(1))
assertEquals(2, selection.size())
assertEquals(0, selection.get(0))
assertEquals(1, selection.get(1))
assertEquals(2, selection.size())
assertEquals(0, selection1.get(0))
assertEquals(1, selection1.get(1))
assertEquals(2, selection1.size())
assertEquals(1, selection.get(0))
assertEquals(2, selection.get(1))
assertEquals(2, selection.size())
assertEquals(0, selection1.get(0))
assertEquals(2, selection1.get(1))
assertEquals(2, selection1.size())
assertEquals(1, selection.get(0))
assertEquals(3, selection.get(1))
assertEquals(2, selection.size())
assertEquals(0, selection.get(0))
assertEquals(3, selection.get(1))
assertEquals(2, selection.size())
assertEquals(1, selection1.get(0))
assertEquals(1, selection1.size())
assertEquals(0, selection.get(0))
assertEquals(4, selection.get(1))
assertEquals(2, selection.size())
assertEquals(1, selection.get(0))
assertEquals(2, selection.get(1))
assertEquals(3, selection.get(2))
assertEquals(3, selection.size())
assertEquals(1, selection1.get(0))
assertEquals(2, selection1.get(1))
assertEquals(3, selection1.get(2))
assertEquals(3, selection1.size())
assertEquals(2, selection.get(0))
assertEquals(1, selection.size())
assertEquals(0, selection.get(0))
assertEquals(1, selection.get(1))
assertEquals(4, selection.size())
assertEquals(0, selection.get(0))
assertEquals(2, selection.get(1))
assertEquals(2, selection.size())
assertEquals(10, result.rowCount())
assertArrayEquals(new double[] { missing, 1.0, 2.0, 3.0, 4.0, 5.0, missing }, col.asDoubleArray())
assertTrue(sc1.equalsIgnoreCase("APPLE").contains(0))
assertTrue(sc1.equalsIgnoreCase(sc2).contains(0))
assertTrue(sc1.startsWith("dog").contains(9))
assertTrue(sc1.startsWith("dog").contains(10))
assertTrue(sc1.endsWith("dog").contains(9))
assertFalse(sc1.endsWith("dog").contains(10))
assertTrue(sc1.containsString("eph").contains(4))
assertFalse(sc1.containsString("eph").contains(10))
assertTrue(sc1.matchesRegex("^apple").contains(0))
assertFalse(sc1.matchesRegex("^apple").contains(7))
assertFalse(sc1.matchesRegex("^apple").contains(10))
assertFalse(sc1.matchesRegex("^apple").contains(14))
assertTrue(sc1.isAlpha().contains(4))
assertFalse(sc1.isAlpha().contains(11))
assertFalse(sc1.isAlpha().contains(13))
assertFalse(sc1.isNumeric().contains(4))
assertTrue(sc1.isNumeric().contains(11))
assertFalse(sc1.isNumeric().contains(13))
assertTrue(sc1.isAlphaNumeric().contains(4))
assertTrue(sc1.isAlphaNumeric().contains(11))
assertFalse(sc1.isAlphaNumeric().contains(13))
assertFalse(sc1.isAlphaNumeric().contains(15))
assertTrue(sc1.isAlphaNumeric().contains(16))
assertFalse(sc1.isUpperCase().contains(4))
assertFalse(sc1.isUpperCase().contains(13))
assertTrue(sc1.isUpperCase().contains(17))
assertTrue(sc1.isLowerCase().contains(4))
assertFalse(sc1.isLowerCase().contains(17))
assertTrue(sc1.lengthEquals(5).contains(0))
assertFalse(sc1.lengthEquals(5).contains(8))
assertTrue(sc1.isShorterThan(5).contains(6))
assertFalse(sc1.isShorterThan(5).contains(0))
assertTrue(sc1.isLongerThan(5).contains(1))
assertFalse(sc1.isLongerThan(5).contains(0))
assertTrue(sc1.isIn("diamond", "dog", "canary").contains(3))
assertFalse(sc1.isIn("diamond", "dog", "canary").contains(8))
assertTrue(sc1.isIn("diamond", "dog", "canary").contains(9))
assertTrue(sc1.isIn(candidates).contains(3))
assertFalse(sc1.isIn(candidates).contains(8))
assertTrue(sc1.isIn(candidates).contains(9))
assertFalse(sc1.isNotIn("diamond", "dog", "canary").contains(3))
assertTrue(sc1.isNotIn("diamond", "dog", "canary").contains(8))
assertFalse(sc1.isNotIn("diamond", "dog", "canary").contains(9))
assertFalse(sc1.isNotIn(candidates).contains(3))
assertTrue(sc1.isNotIn(candidates).contains(8))
assertFalse(sc1.isNotIn(candidates).contains(9))
assertFalse(sc1.isMissing().contains(3))
assertTrue(sc1.isMissing().contains(18))
assertFalse(sc1.isEmptyString().contains(3))
assertTrue(sc1.isEmptyString().contains(18))
assertTrue(sc1.isNotMissing().contains(3))
assertFalse(sc1.isNotMissing().contains(18))
assertTrue(sc1.isEqualTo("10").contains(12))
assertFalse(sc1.isEqualTo("10").contains(13))
assertTrue(sc1.isEqualTo(sc2).contains(9))
assertFalse(sc1.isEqualTo(sc2).contains(0))
assertFalse(sc1.isNotEqualTo("10").contains(12))
assertTrue(sc1.isNotEqualTo("10").contains(13))
assertFalse(sc1.isNotEqualTo(sc2).contains(9))
assertTrue(sc1.isNotEqualTo(sc2).contains(0))
assertEquals(2, result.rowCount())
assertEquals("a", result.stringColumn("s").get(0))
assertEquals("d", result.stringColumn("s").get(1))
assertEquals(10, result.rowCount())
assertEquals(2, result.rowCount())
assertEquals(20, result.rowCount())
assertEquals(32, result.rowCount())
assertEquals(table.rowCount() - 2, result.rowCount())
assertEquals(table.rowCount() - 10, result.rowCount())
assertEquals(2, result.columnCount())
assertTrue(result.columnNames().contains("who"))
assertTrue(result.columnNames().contains("approval"))
assertTrue(counts.numberColumn("[labels]").isMissing(counts.rowCount() - 1))
assertEquals(6, xtab.columnCount())
assertEquals(3, result.columnCount())
assertEquals("who", result.column(0).name())
assertEquals(6, result.rowCount())
assertEquals("65.671875", result.getUnformatted(0, 1))
assertEquals("10.648876067826901", result.getUnformatted(0, 2))
assertEquals(3, result.columnCount())
assertEquals(13, result.rowCount())
assertEquals(i1, minI.get(0, 0))
assertEquals(i3, maxI.get(0, 0))
assertEquals(i2, ic1.min())
assertEquals(i2, ic2.min())
assertEquals(i3, ic1.max())
assertEquals(i3, ic2.max())
assertEquals(7, result.rowCount())
assertEquals(13, result.rowCount())
assertEquals(13, result.rowCount())
assertEquals(13, result.rowCount())
assertTrue(anyTrue.summarize(bc))
assertFalse(noneTrue.summarize(bc))
assertFalse(allTrue.summarize(bc))
assertEquals(0.25, proportionTrue.summarize(bc))
assertEquals(0.75, proportionFalse.summarize(bc))
assertEquals(2, summarized.rowCount())
assertEquals(1, summarized.where(summarized.stringColumn("group_key").isEqualTo("a")).rowCount())
assertEquals(1, summarized.where(summarized.stringColumn("group_key").isEqualTo("b")).rowCount())
assertEquals(ColumnType.DOUBLE, summarized.where(summarized.stringColumn(0).isEqualTo("a")).column(1).type())
assertEquals(ColumnType.DOUBLE, summarized.where(summarized.stringColumn(0).isEqualTo("a")).column(2).type())
assertEquals(ColumnType.DOUBLE, summarized.where(summarized.stringColumn(0).isEqualTo("b")).column(1).type())
assertEquals(ColumnType.DOUBLE, summarized.where(summarized.stringColumn(0).isEqualTo("b")).column(2).type())
assertEquals(0.25, summarized.where(summarized.stringColumn(0).isEqualTo("a")).doubleColumn(1).get(0))
assertEquals(0.75, summarized.where(summarized.stringColumn(0).isEqualTo("a")).doubleColumn(2).get(0))
assertEquals(0.75, summarized.where(summarized.stringColumn(0).isEqualTo("b")).doubleColumn(1).get(0))
assertEquals(0.25, summarized.where(summarized.stringColumn(0).isEqualTo("b")).doubleColumn(2).get(0))
assertEquals(2, result.columnCount())
assertEquals(2, result.columnCount())
assertEquals(32, result.rowCount())
assertEquals(32, result.rowCount())
assertEquals(21, result.rowCount())
assertEquals(4, result.columnCount())
assertEquals(3, result.columnCount())
assertEquals("53.6", result.getUnformatted(0, 1))
assertEquals("2.5099800796022267", result.getUnformatted(0, 2))
assertTrue(avg > 2002 && avg < 2003)
assertEquals(4, result.columnCount())
assertEquals("who", result.column(0).name())
assertEquals(323, result.rowCount())
assertEquals("46.0", result.where(and(str("who").isEqualTo("fox"), date("date").isEqualTo(LocalDate.of(2001, 1, 24)))).getUnformatted(0, 2))
assertEquals(6, result.columnCount())
assertEquals("who", result.column(0).name())
assertEquals("date year & month", result.column(1).name())
assertTrue(pivot.columnNames().contains("who"))
assertTrue(pivot.columnNames().contains("2001"))
assertTrue(pivot.columnNames().contains("2002"))
assertTrue(pivot.columnNames().contains("2003"))
assertTrue(pivot.columnNames().contains("2004"))
assertEquals(6, pivot.rowCount())
assertEquals(TextColumnType.instance(), types[0])
assertEquals(DateColumnType.instance(), types[1])
assertEquals(StringColumnType.instance(), types[2])
assertNotNull(result)
assertNotNull(result)
assertTrue(out.contains("          "))
assertTrue(out.contains("2004-02-04"))
assertTrue(out.contains("53"))
assertTrue(out.contains("fox"))
assertTrue(out.contains("0.000003"))
assertTrue(out.contains("0.000003"))
assertTrue(out.contains("3.0E-6"))
assertTrue(out.contains("123.000003"))
assertTrue(out.contains("33.3333333333333"))
assertTrue(out.contains("9007199254740992"))
assertTrue(out.contains("900719925474099.1"))
assertTrue(out.contains("90071992547409.11"))
assertTrue(out.contains("33.33333206176758"))
assertTrue(out.contains("900719902720"))
assertTrue(out.contains("9007199232"))
assertTrue(out.contains("90071992"))
assertTrue(out.contains("90071.109375"))
assertEquals(ColumnType.DOUBLE, SqlResultSetReader.getColumnType(Types.NUMERIC, 0, 0))
assertEquals("v,v2" + LINE_END + "1.0,1.0" + LINE_END + "2.0,2.0" + LINE_END + "," + LINE_END + "", output)
assertEquals("v,v2" + LINE_END + "1.0,1.0" + LINE_END + "2.0,2.0" + LINE_END + "," + LINE_END + "", output)
assertEquals("v,v2" + LINE_END + "1.0,1.0" + LINE_END + "2.0,2.0" + LINE_END + "," + LINE_END + "", output)
assertEquals("v,v2" + LINE_END + "1.0,1.0" + LINE_END + "2.0,2.0" + LINE_END + "," + LINE_END + "", output)
assertArrayEquals(expected, table.columnNames().toArray())
assertArrayEquals(expected, table.columnNames().toArray())
assertEquals(4, table.columnCount())
assertArrayEquals(expected, table.columnNames().toArray())
assertEquals(4, table.columnCount())
assertArrayEquals(expected, table.columnNames().toArray())
assertArrayEquals(car_types, columnTypes)
assertEquals(2, t.shortColumn(0).countMissing())
assertEquals(2, t.stringColumn(1).countMissing())
assertEquals(1, t.stringColumn(2).countMissing())
assertEquals(3, t.stringColumn(3).countMissing())
assertArrayEquals(expected, table.columnNames().toArray())
assertArrayEquals(expected, table.columnNames().toArray())
assertArrayEquals(expectedTypes, columnTypes)
assertTrue(Arrays.stream(columnTypes).allMatch(columnType -> columnType.equals(STRING)))
assertEquals("v1________v2________" + LINE_END + "1.0_______1.0_______" + LINE_END + "2.0_______2.0_______" + LINE_END + "____________________" + LINE_END + "", output)
assertEquals("v1________v2________" + LINE_END + "1.0_______1.0_______" + LINE_END + "2.0_______2.0_______" + LINE_END + "____________________" + LINE_END + "", output)
assertEquals("v1________v2________" + LINE_END + "1.0_______1.0_______" + LINE_END + "2.0_______2.0_______" + LINE_END + "____________________" + LINE_END + "", output)
assertTrue(options.header())
assertEquals("\r\n", format.getLineSeparatorString())
assertEquals('~', format.getPadding())
assertEquals('~', options.escapeChar())
assertTrue(options.header())
assertEquals('"', options.quoteChar())
assertEquals('.', options.separator())
assertTrue(options.ignoreLeadingWhitespaces())
assertTrue(options.ignoreTrailingWhitespaces())
assertTrue(options.quoteAllFields())
assertTrue(settings.getQuoteAllFields())
assertEquals('~', settings.getFormat().getQuoteEscape())
assertEquals("\r\n", settings.getFormat().getLineSeparatorString())
assertEquals('"', settings.getFormat().getQuote())
assertEquals('.', settings.getFormat().getDelimiter())
assertEquals(options.ignoreLeadingWhitespaces(), settings.getIgnoreLeadingWhitespaces())
assertEquals(options.ignoreTrailingWhitespaces(), settings.getIgnoreTrailingWhitespaces())
assertEquals(1, t.get(0, 0))
assertEquals(1, t.get(0, 0))
assertEquals("colA,colB\na,1\nb,2\n", writer.toString().replaceAll("\\r\\n", "\n"))
assertEquals("\"colA\",\"colB\"\n\"a\",\"1\"\n\"b\",\"2\"\n", writer.toString().replaceAll("\\r\\n", "\n"))
assertEquals("date,approval,who\n" + "\"Jan 21, 2004\",53,fox\n", writer.toString().replaceAll("\\r\\n", "\n"))
assertEquals("percents\n" + "32.30%\n" + "11.92%\n" + "100.00%\n", writer.toString().replaceAll("\\r\\n", "\n"))
assertEquals("percents\n" + "NA\n" + "32.30%\n" + "11.92%\n" + "100.00%\n", writer.toString().replaceAll("\\r\\n", "\n"))
assertEquals("dates\n" + "2021-03-Nov\n" + "WHAT?\n" + "2021-11-Mar\n", writer.toString().replaceAll("\\r\\n", "\n"))
assertEquals("ints\n" + "\"102,123\"\n" + "2\n" + "\"-1,232,132\"\n", writer.toString().replaceAll("\\r\\n", "\n"))
assertEquals("ints\n" + "102123\n" + "2\n" + "NA\n" + "-1232132\n", writer.toString().replaceAll("\\r\\n", "\n"))
assertEquals("floats\n" + "32.30\n" + "0.12\n" + "\n" + "\"1,001.00\"\n", writer.toString().replaceAll("\\r\\n", "\n"))
assertEquals("floats\n" + "32.30\n" + "0.12\n" + "NA\n" + "\"1,001.00\"\n", writer.toString().replaceAll("\\r\\n", "\n"))
assertEquals("dates\n" + "\"Jan 1, 2011 - 04:30\"\n", writer.toString().replaceAll("\\r\\n", "\n"))
assertEquals("bools\n" + "Yes\n" + "No\n" + "IDK\n", writer.toString().replaceAll("\\r\\n", "\n"))
assertEquals("strings\n" + "[hey]\n" + "[you]\n" + "N/A\n", writer.toString().replaceAll("\\r\\n", "\n"))
assertEquals("strings\n" + "[hey]\n" + "[you]\n" + "N/A\n", writer.toString().replaceAll("\\r\\n", "\n"))
assertEquals("ints\n" + "102\n" + "\"12,132\"\n" + "\"-1,234\"\n", writer.toString().replaceAll("\\r\\n", "\n"))
assertEquals("dates\n" + "\"Dec 3, 2007 - 10:15\"\n" + "WHAT?\n", writer.toString().replaceAll("\\r\\n", "\n"))
assertEquals("doubles\n" + "32.32342489123\n" + "0.1192342224\n" + "\n" + "1001\n", writer.toString().replaceAll("\\r\\n", "\n"))
assertEquals("dt\n" + "\"Jan 1, 2011 - 04:30\"\n", writer.toString().replaceAll("\\r\\n", "\n"))
assertEquals("date,popularity,pollster\n" + "2004-01-21,53,fox\n", writer.toString().replaceAll("\\r\\n", "\n"))
assertEquals(2, result.rowCount())
assertEquals("[stop_id, stop_name, stop_desc, stop_lat, stop_lon]", table.columnNames().toString())
assertEquals(table.column("WorldRegion").type(), TEXT)
assertEquals(table2.column("WorldRegion").type(), STRING)
assertEquals(4, table.columnCount())
assertEquals("[stop_id, stop_name, stop_lat, stop_lon]", table.columnNames().toString())
assertEquals("Col1", noDupes.columnNames().get(0))
assertEquals("Col2", noDupes.columnNames().get(1))
assertEquals("Col1", dupes.columnNames().get(0))
assertEquals("Col1-2", dupes.columnNames().get(1))
assertEquals(4, table.columnCount())
assertEquals("[C0, C1, C3, C4]", table.columnNames().toString())
assertEquals(323, table.rowCount())
assertEquals("[date, approval, who]", table.columnNames().toString())
assertEquals(323, table.rowCount())
assertEquals("[date, approval, who]", table.columnNames().toString())
assertArrayEquals(bus_types, columnTypes)
assertEquals(INTEGER, columnTypes[3])
assertEquals(INTEGER, columnTypes[7])
assertEquals(DOUBLE, columnTypes[3])
assertEquals(DOUBLE, columnTypes[7])
assertEquals(1530486314124L, column.get(0).toInstant(ZoneOffset.UTC).toEpochMilli())
assertEquals(Collections.singletonList(LOCAL_DATE), actual)
assertEquals(Collections.singletonList(LOCAL_DATE_TIME), actual)
assertEquals(Collections.singletonList(LOCAL_DATE_TIME), actual)
assertEquals(Collections.singletonList(LOCAL_DATE_TIME), actual)
assertEquals(Collections.singletonList(LOCAL_TIME), actual)
assertEquals(Collections.singletonList(LOCAL_DATE), actual)
assertEquals(Collections.singletonList(LOCAL_DATE), actual)
assertEquals(Collections.singletonList(LOCAL_DATE_TIME), actual)
assertEquals(1, t.stringColumn(0).countMissing())
assertEquals(1, t.numberColumn(1).countMissing())
assertEquals(1, t.numberColumn(2).countMissing())
assertEquals(1, t.stringColumn(0).countMissing())
assertEquals(1, t.stringColumn(1).countMissing())
assertEquals(1, t.stringColumn(2).countMissing())
assertEquals(1, t.stringColumn(0).countMissing())
assertEquals(1, t.numberColumn(1).countMissing())
assertEquals(1, t.numberColumn(2).countMissing())
assertEquals(1, t.columnCount())
assertEquals(6, t.rowCount())
assertEquals(2, t.columnCount())
assertEquals(2, t.rowCount())
assertFalse(date.isEmpty())
assertFalse(date.isEmpty())
assertEquals(output, new CsvReader().printColumnTypes(CsvReadOptions.builder("../data/bush.csv").header(true).separator(',').locale(Locale.getDefault()).sample(true).build()))
assertEquals(LOCAL_DATE, columnTypes[0])
assertEquals(INTEGER, columnTypes[1])
assertEquals(STRING, columnTypes[2])
assertNotNull(table)
assertEquals(3, table.columnCount())
assertNotNull(table)
assertEquals(3, table.columnCount())
assertNotNull(table)
assertEquals(3, table.columnCount())
assertNotNull(table)
assertEquals(3, table.columnCount())
assertEquals(5, table.rowCount())
assertEquals(2, table.rowCount())
assertEquals(2, table.rowCount())
assertNotNull(test.summary())
assertNotNull(test.summary())
assertEquals("empty_file.csv: 0 rows X 0 cols", table1.shape())
assertEquals("empty_file.csv: 0 rows X 0 cols", table1.shape())
assertEquals("10001_columns.csv: 1 rows X 10001 cols", table1.shape())
assertEquals("with_comments.csv: 3 rows X 3 cols", table1.shape())
assertEquals(985, table.rowCount())
assertEquals(expectedSampleSize, table.rowCount())
assertEquals("[recipe, mix, temp, y]", table.columnNames().toString())
assertEquals(1, t.columnCount())
assertEquals(expectedSampleSize, t.rowCount())
assertEquals(INTEGER, t.column(0).type())
assertEquals(true, values.containsAll(intValues))
assertEquals(table.get(0, 0), out.get(0, 0))
assertEquals(DoubleColumnType.instance(), table.typeArray()[1])
assertEquals(DoubleColumnType.instance(), table.typeArray()[2])
assertEquals("0.0132", column.getString(0))
assertEquals("0.32768", column.getString(1))
assertEquals("1", column.getString(2))
assertEquals("1.32%", column.getString(0))
assertEquals("32.77%", column.getString(1))
assertEquals("100.00%", column.getString(2))
assertEquals(2, table.rowCount())
assertArrayEquals(expectedTypes, columnTypes)
assertTrue(Arrays.stream(columnTypes).allMatch(columnType -> columnType.equals(STRING)))
assertArrayEquals(bus_types, columnTypes)
assertArrayEquals(bus_types, columnTypes)
assertArrayEquals(new ColumnType[] { SHORT, STRING }, columnTypes)
assertEquals("ISO-8859-1", Source.getCharSet(Paths.get("../data", "urb_cpop1_1_Data.csv").toFile()).name())
assertEquals(expected.columnNames(), actual.columnNames())
assertEquals(expected.stringColumn(0).asList(), actual.stringColumn(0).asList())
assertEquals(expected.columnNames(), actual.columnNames())
assertEquals(expected.stringColumn(0).asList(), actual.stringColumn(0).asList())
assertEquals(expected.columnNames(), actual.columnNames())
assertEquals(expected.stringColumn(0).asList(), actual.stringColumn(0).asList())
assertTrue(thrown.getMessage().contains("No reader registered for mime-type application/octet-stream"))
assertNotNull(t)
assertEquals("Column prefix: < is unknown.", thrown.getMessage())
assertEquals("Column col2 does not exist in table t", thrown.getMessage())
assertEquals("Unrecognized Column: '>col2'", thrown.getMessage())
assertEquals(fromCol, fromIdx)
assertEquals(fromCol, fromIdx)
assertEquals(fromCol, fromIdx)
assertEquals(fromCol, fromIdx)
assertEquals(fromCol, fromIdx)
assertEquals(fromCol, fromIdx)
assertEquals(fromCol, fromIdx)
assertEquals(fromCol, fromIdx)
assertEquals(fromCol, fromIdx)
assertEquals(fromCol, fromIdx)
assertEquals(fromCol, fromIdx)
assertEquals(fromCol, fromIdx)
assertEquals(fromCol, fromIdx1)
assertEquals(fromCol, fromIdx)
assertEquals(fromCol, fromIdx)
assertEquals(fromCol, fromIdx)
assertEquals(fromCol, fromIdx)
assertEquals(fromCol, fromIdx)
assertEquals(fromCol, fromIdx)
assertEquals(fromCol, fromIdx1)
assertEquals(fromCol, fromIdx)
assertFalse(fromIdx.isEmpty())
assertEquals(fromCol, fromIdx)
assertEquals(fromCol, fromIdx1)
assertEquals("246", StringUtils.removeZeroDecimal("246.0"))
assertEquals("146", StringUtils.removeZeroDecimal("146.00"))
assertEquals("357", StringUtils.removeZeroDecimal("357.000"))
assertEquals("347", StringUtils.removeZeroDecimal("347.0000"))
assertEquals("468", StringUtils.removeZeroDecimal("468"))
assertEquals("24", StringUtils.removeZeroDecimal("24"))
assertEquals("468.02", StringUtils.removeZeroDecimal("468.02"))
assertEquals("246.004", StringUtils.removeZeroDecimal("246.004"))
assertEquals("246.4000", StringUtils.removeZeroDecimal("246.4000"))
assertEquals("", StringUtils.removeZeroDecimal(""))
assertNull(StringUtils.removeZeroDecimal(null))
assertTrue(Arrays.equals(array, DoubleArrays.toN(3)))
assertEquals(table.column("mixed").asList(), Lists.newArrayList("123.00", "abc", ""))
assertEquals(table.column("mixed2").asList(), Lists.newArrayList("abc", "123", ""))
assertEquals(table.column("intcol2").asList(), Lists.newArrayList(null, 1234, 1234))
assertArrayEquals(columnTypes, new ColumnType[] { STRING, DOUBLE, LONG, LONG, DOUBLE, BOOLEAN, LOCAL_DATE_TIME, FLOAT, STRING, STRING, INTEGER })
assertEquals(table.column("mixed").asList(), Lists.newArrayList("123.00", "abc", ""))
assertEquals(table.column("mixed2").asList(), Lists.newArrayList("abc", "123", ""))
assertEquals(table.column("intcol2").asList(), Lists.newArrayList(null, 1234, 1234))
assertTrue(Arrays.stream(columnTypes).allMatch(columnType -> columnType.equals(STRING)))
assertEquals(table.column("stringcol").asList(), Lists.newArrayList("Hallvard", "Marit", "Quentin"))
assertEquals(table.column("intcol").asList(), Lists.newArrayList("12345678", "12345679", "12345679"))
assertEquals(table.column("longcol").asList(), Lists.newArrayList("1.23457E+10", "1.23457E+10", "1.23457E+10"))
assertEquals(table.column("doublecol").asList(), Lists.newArrayList("12.34", "13.35", "13.35"))
assertEquals(table.column("booleancol").asList(), Lists.newArrayList("TRUE", "FALSE", "FALSE"))
assertEquals(table.column("datecol").asList(), Lists.newArrayList("22/02/2019 20:54:09", "23/03/2020 21:55:10", "23/03/2020 21:55:10"))
assertEquals(table.column("formulacol").asList(), Lists.newArrayList("135.34", "137.35", "138.35"))
assertEquals(table.column("empty").asList(), Lists.newArrayList("", "", ""))
assertEquals(table.column("mixed").asList(), Lists.newArrayList("123.00", "abc", ""))
assertEquals(table.column("mixed2").asList(), Lists.newArrayList("abc", "123", ""))
assertEquals(table.column("intcol2").asList(), Lists.newArrayList("", "1234", "1234"))
