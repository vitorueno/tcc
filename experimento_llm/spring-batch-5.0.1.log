assertEquals(trade.getIsin(), rs.getString(1))
assertEquals(trade.getQuantity(), rs.getLong(2))
assertEquals(trade.getPrice(), rs.getBigDecimal(3))
assertEquals(trade.getCustomer(), rs.getString(4))
assertEquals(activeRow, trades.size())
assertEquals(customers.size(), activeRow)
assertEquals(customer.getName(), rs.getString(1))
assertEquals(BatchStatus.COMPLETED, execution.getStatus())
assertEquals(after - before, execution.getStepExecutions().iterator().next().getReadCount())
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertEquals("yes", jobExecution.getExecutionContext().getString("done"))
assertEquals("foo", value)
assertEquals("foo2", strValue)
assertEquals(3, integerValue.intValue())
assertEquals(before + 5, after)
assertEquals(trade.getIsin(), rs.getString(1))
assertEquals(trade.getQuantity(), rs.getLong(2))
assertEquals(trade.getPrice(), rs.getBigDecimal(3))
assertEquals(trade.getCustomer(), rs.getString(4))
assertEquals(EXPECTED_OUTPUT_FILE, output)
assertEquals(itemGenerator.getLimit() + 2, itemProcessor.getCounter())
assertEquals(itemGenerator.getLimit() + 2, itemProcessor.getCounter())
assertEquals(customer.getName(), rs.getString(1))
assertEquals("4", step1Execution.get("READ_COUNT").toString())
assertEquals("1", step1Execution.get("FILTER_COUNT").toString())
assertEquals("3", step1Execution.get("WRITE_COUNT").toString())
assertEquals(ExitStatus.COMPLETED.getExitCode(), jobExecution.getExitStatus().getExitCode())
assertEquals(4, jobExecution.getStepExecutions().size())
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertEquals(inputs.size(), outputs.size())
assertTrue(itemCount > 0)
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertEquals(expected, count)
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertEquals(first, jobExecution.getStepExecutions().iterator().next().getWriteCount())
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertEquals(second, jobExecution.getStepExecutions().iterator().next().getWriteCount())
assertTrue(personService.getReturnedCount() > 0)
assertEquals(personService.getReturnedCount(), personService.getReceivedCount())
assertEquals(rs.getString("PLAYER_ID"), "AKFJDL00")
assertEquals(rs.getString("LAST_NAME"), "Doe")
assertEquals(rs.getString("FIRST_NAME"), "John")
assertEquals(rs.getString("POS"), "QB")
assertEquals(rs.getInt("YEAR_OF_BIRTH"), 1975)
assertEquals(rs.getInt("YEAR_DRAFTED"), 1998)
assertEquals(tempGame, game)
assertEquals(summary, testSummary)
assertEquals(customerFieldSet, fs)
assertEquals(customerAddLine, customerTokenizer.getTokenizedLine())
assertEquals(customerFieldSet, fs)
assertEquals(customerAddLine, customerTokenizer.getTokenizedLine())
assertEquals(customerFieldSet, fs)
assertEquals(customerAddLine, customerTokenizer.getTokenizedLine())
assertEquals(customerUpdate, processor.process(customerUpdate))
assertEquals(customerUpdate, processor.process(customerUpdate))
assertEquals(95, rs.getLong("credit"))
assertEquals("testCustomer", rs.getString("CUSTOMER"))
assertEquals(new BigDecimal(Double.toString(99.69)), rs.getBigDecimal("PRICE"))
assertEquals(5, rs.getLong("QUANTITY"))
assertEquals(oldCredit.add(CustomerCreditIncreaseProcessor.FIXED_AMOUNT), tested.process(customerCredit).getCredit())
assertEquals("testCustomerName", customerDebit.getName())
assertEquals(new BigDecimal("123.0"), customerDebit.getDebit())
assertNull(reader.read())
assertEquals(limit, counter)
assertEquals(counter, reader.getCounter())
assertEquals(trade1, trade1Clone)
assertNotEquals(trade1, trade2)
assertEquals(3, lines.size())
assertNull(provider.read())
Assertions.assertLinesMatch(Files.lines(inputFile), Files.lines(outputFile))
Assertions.assertLinesMatch(Files.lines(inputFile), Files.lines(outputFile))
assertTrue(AggregateItem.getFooter().isFooter())
assertTrue(AggregateItem.getHeader().isHeader())
assertTrue(mapper.mapFieldSet(new DefaultFieldSet(new String[] { "BEGIN" })).isHeader())
assertTrue(mapper.mapFieldSet(new DefaultFieldSet(new String[] { "FOO" })).isHeader())
assertTrue(mapper.mapFieldSet(new DefaultFieldSet(new String[] { "END" })).isFooter())
assertTrue(mapper.mapFieldSet(new DefaultFieldSet(new String[] { "FOO" })).isFooter())
assertEquals("foo", mapper.mapFieldSet(new DefaultFieldSet(new String[] { "FOO" })).getItem())
assertNotNull(result)
assertEquals(o, order)
assertEquals(o.getCustomer(), customer)
assertEquals(o.getBillingAddress(), billing)
assertEquals(o.getShippingAddress(), shipping)
assertEquals(o.getBilling(), billingInfo)
assertEquals(o.getShipping(), shippingInfo)
assertEquals(3, o.getLineItems().size())
assertNull(provider.read())
assertTrue(orderValidator.supports(Order.class))
assertEquals(1, errors.getAllErrors().size())
assertEquals("Incorrect type", errors.getAllErrors().get(0).getCode())
assertEquals(0, errors.getAllErrors().size())
assertEquals(3, errors.getAllErrors().size())
assertEquals("error.order.id", errors.getFieldError("orderId").getCode())
assertEquals("error.order.date.future", errors.getFieldError("orderDate").getCode())
assertEquals("error.order.lines.badcount", errors.getFieldError("totalLines").getCode())
assertEquals(2, errors.getAllErrors().size())
assertEquals("error.order.id", errors.getFieldError("orderId").getCode())
assertEquals("error.order.lines.badcount", errors.getFieldError("totalLines").getCode())
assertEquals(0, errors.getAllErrors().size())
assertEquals(2, errors.getAllErrors().size())
assertEquals("error.customer.registration", errors.getFieldError("customer.registered").getCode())
assertEquals("error.customer.companyname", errors.getFieldError("customer.companyName").getCode())
assertEquals(3, errors.getAllErrors().size())
assertEquals("error.customer.firstname", errors.getFieldError("customer.firstName").getCode())
assertEquals("error.customer.lastname", errors.getFieldError("customer.lastName").getCode())
assertEquals("error.customer.registrationid", errors.getFieldError("customer.registrationId").getCode())
assertEquals(3, errors.getAllErrors().size())
assertEquals("error.customer.firstname", errors.getFieldError("customer.firstName").getCode())
assertEquals("error.customer.lastname", errors.getFieldError("customer.lastName").getCode())
assertEquals("error.customer.registrationid", errors.getFieldError("customer.registrationId").getCode())
assertEquals(0, errors.getAllErrors().size())
assertEquals(0, errors.getAllErrors().size())
assertEquals(0, errors.getAllErrors().size())
assertEquals(4, errors.getAllErrors().size())
assertEquals("error.baddress.addrline1.length", errors.getFieldError("billingAddress.addrLine1").getCode())
assertEquals("error.baddress.city.length", errors.getFieldError("billingAddress.city").getCode())
assertEquals("error.baddress.zipcode.length", errors.getFieldError("billingAddress.zipCode").getCode())
assertEquals("error.baddress.country.length", errors.getFieldError("billingAddress.country").getCode())
assertEquals(8, errors.getAllErrors().size())
assertEquals("error.baddress.addresse.length", errors.getFieldError("billingAddress.addressee").getCode())
assertEquals("error.baddress.addrline1.length", errors.getFieldError("billingAddress.addrLine1").getCode())
assertEquals("error.baddress.addrline2.length", errors.getFieldError("billingAddress.addrLine2").getCode())
assertEquals("error.baddress.city.length", errors.getFieldError("billingAddress.city").getCode())
assertEquals("error.baddress.state.length", errors.getFieldError("billingAddress.state").getCode())
assertEquals("error.baddress.zipcode.length", errors.getFieldErrors("billingAddress.zipCode").get(0).getCode())
assertEquals("error.baddress.zipcode.format", errors.getFieldErrors("billingAddress.zipCode").get(1).getCode())
assertEquals("error.baddress.country.length", errors.getFieldError("billingAddress.country").getCode())
assertEquals(0, errors.getAllErrors().size())
assertEquals(2, errors.getAllErrors().size())
assertEquals("error.billing.type", errors.getFieldError("billing.paymentId").getCode())
assertEquals("error.billing.desc", errors.getFieldError("billing.paymentDesc").getCode())
assertEquals(0, errors.getAllErrors().size())
assertEquals(2, errors.getAllErrors().size())
assertEquals("error.shipping.shipper", errors.getFieldError("shipping.shipperId").getCode())
assertEquals("error.shipping.type", errors.getFieldError("shipping.shippingTypeId").getCode())
assertEquals(1, errors.getAllErrors().size())
assertEquals("error.shipping.shippinginfo.length", errors.getFieldError("shipping.shippingInfo").getCode())
assertEquals(0, errors.getAllErrors().size())
assertEquals(7, errors.getAllErrors().size())
assertEquals("error.lineitems.id", errors.getFieldErrors("lineItems").get(0).getCode())
assertEquals("error.lineitems.price", errors.getFieldErrors("lineItems").get(1).getCode())
assertEquals("error.lineitems.discount", errors.getFieldErrors("lineItems").get(2).getCode())
assertEquals("error.lineitems.shipping", errors.getFieldErrors("lineItems").get(3).getCode())
assertEquals("error.lineitems.handling", errors.getFieldErrors("lineItems").get(4).getCode())
assertEquals("error.lineitems.quantity", errors.getFieldErrors("lineItems").get(5).getCode())
assertEquals("error.lineitems.totalprice", errors.getFieldErrors("lineItems").get(6).getCode())
assertEquals(10, itemWriter.getItems().size())
assertEquals(5, after)
assertFalse(AggregateItem.getFooter().isHeader())
assertFalse(AggregateItem.getHeader().isFooter())
assertFalse(mapper.mapFieldSet(new DefaultFieldSet(new String[] { "BEGIN" })).isFooter())
assertFalse(mapper.mapFieldSet(new DefaultFieldSet(new String[] { "END" })).isHeader())
assertFalse(o.getCustomer().isBusinessCustomer())
assertEquals(params, operator.getParameters(executionId))
assertEquals(params, operator.getParameters(resumedExecutionId))
assertEquals(1, instances.size())
assertEquals(2, executions.size())
assertEquals(resumedExecutionId, executions.get(0).longValue())
assertEquals(executionId, executions.get(1).longValue())
assertTrue(summaries.values().toString().contains(BatchStatus.STOPPED.toString()))
assertEquals(1, names.size())
assertTrue(names.contains(jobName))
assertTrue(exec1 != exec2)
assertNotEquals(operator.getParameters(exec1), operator.getParameters(exec2))
assertTrue(executions.contains(exec1))
assertTrue(executions.contains(exec2))
assertTrue(count > 0)
assertEquals(ExitStatus.COMPLETED.getExitCode(), jobExecution.getExitStatus().getExitCode())
assertEquals(expectedHash, actualHash)
assertTrue(count > 0)
assertEquals(BatchStatus.COMPLETED, execution1.getStatus())
assertEquals(BatchStatus.COMPLETED, execution2.getStatus())
assertTrue(id1 != id2)
assertNotEquals(execution1.getJobId(), execution2.getJobId())
assertEquals(ExitStatus.COMPLETED.getExitCode(), jobExecution.getExitStatus().getExitCode())
assertEquals(1, stepExecution.getReadSkipCount())
assertEquals(0, stepExecution.getProcessSkipCount())
assertEquals(0, stepExecution.getWriteSkipCount())
assertEquals(ExitStatus.COMPLETED.getExitCode(), jobExecution.getExitStatus().getExitCode())
assertEquals(0, stepExecution.getReadSkipCount())
assertEquals(1, stepExecution.getProcessSkipCount())
assertEquals(0, stepExecution.getWriteSkipCount())
assertEquals(ExitStatus.COMPLETED.getExitCode(), jobExecution.getExitStatus().getExitCode())
assertEquals(0, stepExecution.getReadSkipCount())
assertEquals(0, stepExecution.getProcessSkipCount())
assertEquals(1, stepExecution.getWriteSkipCount())
assertEquals(7, JdbcTestUtils.countRowsInTable(jdbcTemplate, "TRADE"))
assertEquals(5, JdbcTestUtils.countRowsInTableWhere(jdbcTemplate, "TRADE", "VERSION=1"))
assertEquals(1, SkipCheckingListener.getProcessSkips())
assertEquals(2, JdbcTestUtils.countRowsInTable(jdbcTemplate, "ERROR_LOG"))
assertEquals("2 records were skipped!", jdbcTemplate.queryForObject("SELECT MESSAGE from ERROR_LOG where JOB_NAME = ? and STEP_NAME = ?", String.class, "skipJob", "step1"))
assertEquals("2 records were skipped!", jdbcTemplate.queryForObject("SELECT MESSAGE from ERROR_LOG where JOB_NAME = ? and STEP_NAME = ?", String.class, "skipJob", "step2"))
assertEquals(new BigDecimal("340.45"), jobExecution.getExecutionContext().get(TradeWriter.TOTAL_AMOUNT_KEY))
assertEquals(Long.valueOf(4L), step1Execution.get("COMMIT_COUNT"))
assertEquals(Long.valueOf(8L), step1Execution.get("READ_COUNT"))
assertEquals(Long.valueOf(7L), step1Execution.get("WRITE_COUNT"))
assertEquals(5, JdbcTestUtils.countRowsInTable(jdbcTemplate, "TRADE"))
assertEquals(5, JdbcTestUtils.countRowsInTableWhere(jdbcTemplate, "TRADE", "VERSION=1"))
assertEquals(0, JdbcTestUtils.countRowsInTable(jdbcTemplate, "ERROR_LOG"))
assertEquals(new BigDecimal("270.75"), jobExecution.getExecutionContext().get(TradeWriter.TOTAL_AMOUNT_KEY))
assertTrue(isConnected())
assertEquals(0, errors.size())
assertTrue(isConnected())
assertEquals(0, errors.size())
assertTrue(isConnected())
assertTrue(launcher.getJobNames().contains("loopJob"))
assertTrue(isConnected())
assertTrue(launcher.getJobNames().contains("loopJob"))
assertEquals(BatchStatus.FAILED, jobExecution.getStatus())
assertTrue(ex.getMessage().toLowerCase().contains("planned"))
assertEquals(before + 2, medium)
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertEquals(before + 5, after)
assertEquals(5, processor.getCounter())
assertEquals(0, writer.getItems().size())
assertEquals(3, writer.getItems().size())
assertEquals(0, writer.getItems().size())
assertEquals(3, writer.getItems().size())
assertEquals(expectedDomainObject(), rowMapper().mapRow(rs, IGNORED_ROW_NUMBER))
assertEquals(expectedDomainObject(), fieldSetMapper().mapFieldSet(fieldSet()))
assertEquals(1, list.size())
assertEquals(1, itemWriter.getOutput().size())
assertEquals(3, itemWriter.getOutput().size())
assertEquals("1", itemReader.read())
assertEquals("2", itemReader.read())
assertEquals("3", itemReader.read())
assertNull(itemReader.read())
assertEquals("1", itemReader.read())
assertEquals("2", itemReader.read())
assertEquals("{outputFile=file:./target/output/foo.csv}", stepExecution.getExecutionContext().toString())
assertEquals("{outputFile=spam/foo.csv}", stepExecution.getExecutionContext().toString())
assertEquals("{spam=foo.csv}", stepExecution.getExecutionContext().toString())
assertEquals("bar.csv", stepExecution.getExecutionContext().getString("outputFile"))
assertEquals(before + 1, after)
assertEquals(2, partition.size())
assertEquals(StagingItemWriter.NEW, before)
assertEquals("FOO", item)
assertEquals(StagingItemWriter.DONE, after)
assertEquals(StagingItemWriter.DONE, before)
assertEquals(StagingItemWriter.NEW, before)
assertEquals("FOO", wrapper.getItem())
assertEquals(StagingItemWriter.NEW, after)
assertEquals(ExitStatus.COMPLETED.getExitCode(), jobExecution.getExitStatus().getExitCode())
assertEquals(1, writtenItems.size())
assertEquals("foo", writtenItems.get(0).getName())
assertEquals(EXPECTED_RESULT, StringUtils.replace(IOUtils.toString(output.getInputStream(), "UTF-8"), System.getProperty("line.separator"), ""))
assertEquals(4, after)
assertEquals((creditsBeforeUpdate.size() - 1), matches.size())
assertFalse(matches.contains(new BigDecimal(2)))
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertEquals(inputs.size(), outputs.size())
assertEquals(BatchStatus.FAILED, je1.getStatus())
Assertions.assertEquals(10, Files.lines(outputResourceFile).count())
assertEquals(BatchStatus.COMPLETED, je2.getStatus())
Assertions.assertEquals(20, Files.lines(outputResourceFile).count())
assertEquals(ExitStatus.COMPLETED.getExitCode(), jobExecution.getExitStatus().getExitCode())
assertEquals("Waited for 2 results.", jobExecution.getExitStatus().getExitDescription())
assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus())
assertEquals(6, receivedMessages.size())
assertEquals(2, this.errorHandler.getFailedMessages().size())
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertEquals(inputs.size(), outputs.size())
assertEquals(BatchStatus.STARTED, jobExecution.getStatus())
assertTrue(jobExecution.isRunning())
assertNotNull(jobExecution.getVersion())
assertEquals(BatchStatus.STOPPED, jobExecution.getStatus())
assertEquals(BatchStatus.STARTED, jobExecution.getStatus())
assertTrue(jobExecution.isRunning())
assertEquals(BatchStatus.STOPPED, jobExecution.getStatus())
assertFalse(new File("target/groovyJob/output/files.zip").exists())
assertTrue(new File("target/groovyJob/output/files.zip").exists())
assertEquals(2, list.size())
assertEquals(0, parameters.getParameters().size())
assertEquals(2, list.size())
assertEquals("FOO", list.get(0))
assertEquals(2, list.size())
assertEquals(1, parameters.getParameters().size())
assertEquals(2, list.size())
assertEquals("FOO", list.get(0))
assertEquals(1, parameters.getParameters().size())
assertEquals(2, list.size())
assertEquals("FOO", list.get(0))
assertEquals(0, parameters.getParameters().size())
assertTrue(true)
assertEquals("foo: 1", result)
assertEquals(1, AnnotatedEndpoint.count)
assertEquals(2, writtenItems.size())
assertTrue(writtenItems.contains("foo"))
assertTrue(writtenItems.contains("bar"))
assertEquals(1, writtenItems.size())
assertTrue(writtenItems.contains("foo"))
assertEquals("This was expected", exception.getMessage())
assertFalse(exception instanceof ExecutionException)
assertEquals(0, writtenItems.size())
assertTrue(itemWriter.isOpened)
assertTrue(itemWriter.isUpdated)
assertTrue(itemWriter.isClosed)
assertFalse(itemWriter.isOpened)
assertFalse(itemWriter.isUpdated)
assertFalse(itemWriter.isClosed)
assertEquals("foofoo", result.get())
assertTrue(context != null && context.getStepExecution() != null)
assertEquals("foofoo", result.get())
assertEquals("The id attribute must be specified", iae.getMessage())
assertEquals("The message-template attribute must be specified", iae.getMessage())
assertEquals("The step attribute must be specified", iae.getMessage())
assertEquals("The reply-channel attribute must be specified", iae.getMessage())
assertEquals("The id attribute must be specified", iae.getMessage())
assertEquals("The input-channel attribute must be specified", iae.getMessage())
assertEquals("The item-writer attribute must be specified", iae.getMessage())
assertEquals("The output-channel attribute must be specified", iae.getMessage())
assertEquals("requestChannel", inputChannel.getComponentName())
assertNotNull(jobLaunchingMessageHandler)
assertFalse(this.consumer.isRunning())
assertTrue(this.consumer.isRunning())
assertEquals("No bean named 'jobLauncher' available", exception.getCause().getMessage())
assertNotNull(jobLaunchingMessageHandler)
assertNotNull(jobLauncher)
assertEquals("foo: 0: 1", result)
assertNull(processor.process("filter"))
assertEquals(3, splitter.count)
assertEquals(3, service.count)
assertNotNull(taskletStep)
assertNotNull(taskletStep)
assertEquals(ReflectionTestUtils.getField(provider, "itemReader"), itemReader)
assertFalse((Boolean) ReflectionTestUtils.getField(tasklet, "buffering"))
assertEquals(ReflectionTestUtils.getField(taskletStep, "jobRepository"), this.jobRepository)
assertEquals(ReflectionTestUtils.getField(taskletStep, "transactionManager"), this.transactionManager)
assertEquals(ReflectionTestUtils.getField(taskletStep, "transactionAttribute"), transactionAttribute)
assertEquals(ReflectionTestUtils.getField(itemWriter, "replyChannel"), this.inputChannel)
assertEquals(ReflectionTestUtils.getField(messagingTemplate, "defaultDestination"), this.outputChannel)
assertEquals(ReflectionTestUtils.getField(processor, "itemProcessor"), itemProcessor)
assertEquals((int) ReflectionTestUtils.getField(taskletStep, "startLimit"), 3)
assertTrue((Boolean) ReflectionTestUtils.getField(taskletStep, "allowStartIfComplete"))
assertEquals(stepOperationsUsed, stepOperations)
assertEquals(((List) ReflectionTestUtils.getField(compositeItemStream, "streams")).size(), 2)
assertNotNull(ReflectionTestUtils.getField(processor, "keyGenerator"))
assertEquals(stepExecution.getSkipCount(), 2)
assertEquals(stepExecution.getRollbackCount(), 3)
assertEquals(111L, request.getJobId())
assertEquals(2, request.getItems().size())
assertNotNull(request.getStepContribution())
assertNotNull(result.getStepContribution())
assertEquals(111L, result.getJobId())
assertEquals(2, result.getItems().size())
assertEquals(0, executionContext.getInt(ChunkMessageChannelItemWriter.EXPECTED))
assertEquals(0, executionContext.getInt(ChunkMessageChannelItemWriter.ACTUAL))
assertEquals(6, TestItemWriter.count)
assertEquals(6, stepExecution.getReadCount())
assertEquals(8, TestItemWriter.count)
assertEquals(6, stepExecution.getReadCount())
assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
assertEquals(ExitStatus.FAILED.getExitCode(), stepExecution.getExitStatus().getExitCode())
assertEquals(1, TestItemWriter.count)
assertEquals(0, stepExecution.getReadCount())
assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
assertEquals(ExitStatus.FAILED.getExitCode(), stepExecution.getExitStatus().getExitCode())
assertTrue(1 <= TestItemWriter.count)
assertTrue(6 >= TestItemWriter.count)
assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
assertEquals(ExitStatus.FAILED.getExitCode(), stepExecution.getExitStatus().getExitCode())
assertEquals(0, TestItemWriter.count)
assertEquals(0, stepExecution.getReadCount())
assertTrue(1 <= TestItemWriter.count)
assertTrue(6 >= TestItemWriter.count)
assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
assertEquals(ExitStatus.FAILED.getExitCode(), stepExecution.getExitStatus().getExitCode())
assertNotNull(integrationFlow)
assertEquals(BatchStatus.FAILED, jobExecution.getStatus())
assertEquals(9, stepExecution.getReadCount())
assertEquals(7, stepExecution.getWriteCount())
assertEquals(BatchStatus.FAILED, jobExecution.getStatus())
assertEquals(9, stepExecution.getReadCount())
assertEquals(7, stepExecution.getWriteCount())
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertEquals(9, stepExecution.getReadCount())
assertEquals(9, stepExecution.getWriteCount())
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertEquals(9, stepExecution.getReadCount())
assertEquals(7, stepExecution.getWriteCount())
assertEquals(2, stepExecution.getWriteSkipCount())
assertEquals(BatchStatus.FAILED, jobExecution.getStatus())
assertEquals(9, stepExecution.getReadCount())
assertEquals(7, stepExecution.getWriteCount())
assertEquals(BatchStatus.FAILED, jobExecution.getStatus())
assertEquals(9, stepExecution.getReadCount())
assertEquals(7, stepExecution.getWriteCount())
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertEquals(9, stepExecution.getReadCount())
assertEquals(9, stepExecution.getWriteCount())
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertEquals(9, stepExecution.getReadCount())
assertEquals(7, stepExecution.getWriteCount())
assertEquals(2, stepExecution.getWriteSkipCount())
assertEquals(Long.valueOf(111L), response.getJobId())
assertNotNull(response.getStepContribution())
assertNotNull(result.getStepContribution())
assertEquals(Long.valueOf(111L), result.getJobId())
assertTrue(interceptor.preReceive(channel))
assertEquals("foo", channel.receive(10L).getPayload())
assertEquals(BatchStatus.FAILED, jobExecution.getStatus())
assertEquals(9, stepExecution.getReadCount())
assertEquals(7, stepExecution.getWriteCount())
assertEquals(BatchStatus.FAILED, jobExecution.getStatus())
assertEquals(9, stepExecution.getReadCount())
assertEquals(7, stepExecution.getWriteCount())
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertEquals(9, stepExecution.getReadCount())
assertEquals(9, stepExecution.getWriteCount())
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertEquals(9, stepExecution.getReadCount())
assertEquals(7, stepExecution.getWriteCount())
assertEquals(2, stepExecution.getWriteSkipCount())
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertEquals(9, stepExecution.getReadCount())
assertEquals(9, stepExecution.getWriteCount())
assertEquals(BatchStatus.FAILED, jobExecution.getStatus())
assertEquals(9, stepExecution.getReadCount())
assertEquals(7, stepExecution.getWriteCount())
assertEquals(stepContribution, response.getStepContribution())
assertEquals(12, response.getJobId().longValue())
assertTrue(response.isSuccessful())
assertEquals(2, count)
assertNotNull(jobLauncher)
assertNotNull(jobLauncher.run(job, new JobParameters()))
assertEquals(1, after - before)
assertEquals(3, jobExecution.getStepExecutions().size())
assertNotNull(step)
assertEquals(getField(step, "startLimit"), startLimit)
assertEquals(getField(step, "jobRepository"), this.jobRepository)
assertEquals(getField(step, "stepExecutionAggregator"), stepExecutionAggregator)
assertTrue((Boolean) getField(step, "allowStartIfComplete"))
assertNotNull(partitionHandler)
assertTrue(partitionHandler instanceof MessageChannelPartitionHandler)
assertEquals(getField(messageChannelPartitionHandler, "gridSize"), gridSize)
assertEquals(getField(messageChannelPartitionHandler, "pollInterval"), pollInterval)
assertEquals(getField(messageChannelPartitionHandler, "timeout"), timeout)
assertNotNull(messagingGateway)
assertEquals(getField(messagingTemplate, "defaultDestination"), outputChannel)
assertNotNull(step)
assertEquals(getField(step, "startLimit"), startLimit)
assertEquals(getField(step, "jobRepository"), this.jobRepository)
assertEquals(getField(step, "stepExecutionAggregator"), stepExecutionAggregator)
assertTrue((Boolean) getField(step, "allowStartIfComplete"))
assertNotNull(partitionHandler)
assertTrue(partitionHandler instanceof MessageChannelPartitionHandler)
assertEquals(getField(messageChannelPartitionHandler, "gridSize"), gridSize)
assertNotNull(replyChannel)
assertTrue(replyChannel instanceof QueueChannel)
assertNotNull(messagingGateway)
assertEquals(getField(messagingTemplate, "defaultDestination"), outputChannel)
Assertions.assertLinesMatch(Files.lines(expectedFile), Files.lines(actualFile))
assertEquals(8, count)
assertEquals(4, count)
assertEquals("Planned failure", exception.getMessage())
assertEquals(4, count)
assertEquals(SERIALIZED_REQUEST, serializedRequest)
assertNotNull(deserializedRequest)
assertEquals("step", deserializedRequest.getStepName())
assertEquals(1L, deserializedRequest.getJobExecutionId().longValue())
assertEquals(1L, deserializedRequest.getStepExecutionId().longValue())
assertNotNull(stepLocator.getStep("foo"))
assertEquals(2, stepLocator.getStepNames().size())
assertNotNull(jobLauncher)
assertNotNull(jobLauncher.run(job, new JobParameters()))
assertEquals(1, after - before)
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertEquals(3, jobExecution.getStepExecutions().size())
assertTrue(executions.isEmpty())
assertNotNull(executions)
assertTrue(executions.isEmpty())
assertNotNull(executions)
assertTrue(executions.isEmpty())
assertNotNull(executions)
assertEquals(3, executions.size())
assertTrue(executions.contains(partition1))
assertTrue(executions.contains(partition2))
assertTrue(executions.contains(partition4))
assertNotNull(jobLauncher)
assertNotNull(jobLauncher.run(job, new JobParameters()))
assertEquals(1, after - before)
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertEquals(3, jobExecution.getStepExecutions().size())
assertEquals(expected, processed)
assertEquals(expected, processed)
assertEquals(2, handled.size())
assertEquals(4, service.getProcessed().size())
assertEquals(expected, service.getProcessed())
assertEquals(6, service.getProcessed().size())
assertEquals(1, recoverer.getRecovered().size())
assertEquals(expected, service.getProcessed())
assertEquals(expected, processed)
assertEquals(2, handled.size())
assertEquals(4, service.getProcessed().size())
assertEquals(expected, service.getProcessed())
assertEquals(7, service.getProcessed().size())
assertEquals(1, recoverer.getRecovered().size())
assertEquals(expected, service.getProcessed())
assertEquals("This is a JobExecutionException.", exception.getCause().getMessage())
assertEquals(ExitStatus.FAILED.getExitCode(), execution.getExitStatus().getExitCode())
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus())
assertEquals(BatchStatus.FAILED, jobExecution.getStatus())
assertEquals(ExitStatus.FAILED, jobExecution.getExitStatus())
assertNotNull(message)
assertNotNull(message)
assertEquals(BatchStatus.COMPLETED, execution.getStatus())
assertEquals(2, count)
assertEquals(2, list.size())
assertTrue(list.contains("foo"))
assertEquals(0, count)
assertFalse(ExampleItemReader.fail)
assertEquals("testString1", context.getString("1"))
assertEquals("testString2", context.getString("2"))
assertEquals("defaultString", context.getString("55", "defaultString"))
assertEquals(3, context.getLong("3"))
assertEquals(5, context.getLong("55", 5))
assertEquals(5, context.getInt("5"))
assertEquals(6, context.getInt("55", 6))
assertTrue(context.isEmpty())
assertFalse(context.isEmpty())
assertFalse(context.isDirty())
assertTrue(context.isDirty())
assertFalse(context.isDirty())
assertTrue(context.isDirty())
assertFalse(context.isDirty())
assertTrue(context.isDirty())
assertTrue(context.isDirty())
assertFalse(context.isDirty())
assertTrue(context.containsKey("1"))
assertTrue(context.containsValue("testString"))
assertFalse(tempContext.equals(context))
assertTrue(tempContext.equals(context))
assertNull(context.get("1"))
assertFalse(context.containsKey("1"))
assertNull(context.get("does not exist"))
assertEquals(context, clone)
assertEquals(7, ((TestSerializable) clone.get("5")).value)
assertEquals(copy, context)
assertTrue(context.isEmpty())
assertEquals(1, foo1.getValue())
assertEquals(2, foo2.getValue())
assertEquals(3, foo3.getValue())
assertEquals(4, foo4.getValue())
assertEquals(5, foo5.getValue())
assertNull(tested.read())
assertNull(tested.read())
assertSame(ITEM, tested.process(ITEM))
assertNull(processFailedValidation(tested))
assertTrue(e.getCause() instanceof BindException)
assertNotNull(processed)
assertEquals("itemKeyMapper requires a Converter type.", exception.getMessage())
assertEquals("KafkaTemplate must not be null.", exception.getMessage())
assertDoesNotThrow(() -> this.writer.afterPropertiesSet())
assertTrue((Boolean) ReflectionTestUtils.getField(writer, "delete"))
assertEquals(timeout, ReflectionTestUtils.getField(writer, "timeout"))
assertEquals(this.itemKeyMapper, ReflectionTestUtils.getField(writer, "itemKeyMapper"))
assertEquals(this.kafkaTemplate, ReflectionTestUtils.getField(writer, "kafkaTemplate"))
assertEquals("bootstrap.servers property must be provided", exception.getMessage())
assertEquals("group.id property must be provided", exception.getMessage())
assertEquals("key.deserializer property must be provided", exception.getMessage())
assertEquals("value.deserializer property must be provided", exception.getMessage())
assertNotNull(reader)
assertFalse((Boolean) ReflectionTestUtils.getField(reader, "saveState"))
assertEquals(pollTimeout, ReflectionTestUtils.getField(reader, "pollTimeout"))
assertEquals(2, topicPartitions.size())
assertEquals(topic, topicPartitions.get(0).topic())
assertEquals(partitions.get(0).intValue(), topicPartitions.get(0).partition())
assertEquals(topic, topicPartitions.get(1).topic())
assertEquals(partitions.get(1).intValue(), topicPartitions.get(1).partition())
assertEquals(2, partitionOffsetsMap.size())
assertEquals(Long.valueOf(10L), partitionOffsetsMap.get(new TopicPartition(topic, partitions.get(0))))
assertEquals(Long.valueOf(15L), partitionOffsetsMap.get(new TopicPartition(topic, partitions.get(1))))
assertEquals("Consumer properties must not be null", exception.getMessage())
assertEquals("bootstrap.servers property must be provided", exception.getMessage())
assertEquals("group.id property must be provided", exception.getMessage())
assertEquals("key.deserializer property must be provided", exception.getMessage())
assertEquals("value.deserializer property must be provided", exception.getMessage())
assertEquals("Topic name must not be null or empty", exception.getMessage())
assertEquals("At least one partition must be provided", exception.getMessage())
assertEquals("pollTimeout must not be null", exception.getMessage())
assertEquals("pollTimeout must not be zero", exception.getMessage())
assertEquals("pollTimeout must not be negative", exception.getMessage())
assertNull(item)
assertNull(item)
assertNull(item)
assertEquals(2, currentOffset.offset())
assertNull(item)
assertNull(item)
assertNull(item)
assertNull(item)
assertEquals("An implementation of MongoOperations is required.", exception.getMessage())
assertEquals("A type to convert the input into is required.", exception.getMessage())
assertEquals("A query is required.", exception.getMessage())
assertEquals("A sort is required.", exception.getMessage())
assertFalse(reader.doPageRead().hasNext())
assertEquals(50, query.getLimit())
assertEquals(0, query.getSkip())
assertEquals("{}", query.getQueryObject().toJson())
assertEquals("{\"name\": -1}", query.getSortObject().toJson())
assertFalse(reader.doPageRead().hasNext())
assertEquals(50, query.getLimit())
assertEquals(100, query.getSkip())
assertEquals("{}", query.getQueryObject().toJson())
assertEquals("{\"name\": -1}", query.getSortObject().toJson())
assertTrue(query.getFieldsObject().isEmpty())
assertFalse(reader.doPageRead().hasNext())
assertEquals(50, query.getLimit())
assertEquals(0, query.getSkip())
assertEquals("{}", query.getQueryObject().toJson())
assertEquals("{\"name\": -1}", query.getSortObject().toJson())
assertEquals(1, query.getFieldsObject().get("name"))
assertEquals(1, query.getFieldsObject().get("age"))
assertEquals(0, query.getFieldsObject().get("_id"))
assertFalse(reader.doPageRead().hasNext())
assertEquals(50, query.getLimit())
assertEquals(0, query.getSkip())
assertEquals("{}", query.getQueryObject().toJson())
assertEquals("{\"name\": -1}", query.getSortObject().toJson())
assertEquals("{ $natural : 1}", query.getHint())
assertFalse(reader.doPageRead().hasNext())
assertEquals(50, query.getLimit())
assertEquals(0, query.getSkip())
assertEquals("{\"name\": \"foo\"}", query.getQueryObject().toJson())
assertEquals("{\"name\": -1}", query.getSortObject().toJson())
assertFalse(reader.doPageRead().hasNext())
assertEquals(50, query.getLimit())
assertEquals(0, query.getSkip())
assertEquals("{\"name\": \"foo\"}", query.getQueryObject().toJson())
assertEquals("{\"name\": -1}", query.getSortObject().toJson())
assertEquals("collection", collectionContainer.getValue())
assertFalse(reader.doPageRead().hasNext())
assertFalse(reader.doPageRead().hasNext())
assertEquals(10, actualQuery.getLimit())
assertEquals(0, actualQuery.getSkip())
assertFalse(reader.doPageRead().hasNext())
assertFalse(reader.doPageRead().hasNext())
assertEquals(10, actualQuery.getLimit())
assertEquals(0, actualQuery.getSkip())
assertFalse(reader.doPageRead().hasNext())
assertFalse(reader.doPageRead().hasNext())
assertEquals(100, actualQuery.getLimit())
assertEquals(0, actualQuery.getSkip())
assertFalse(reader.doPageRead().hasNext())
assertEquals(100, actualQuery.getLimit())
assertFalse(reader.doPageRead().hasNext())
assertEquals(10, actualQuery.getLimit())
assertFalse(reader.doPageRead().hasNext())
assertFalse(reader.doPageRead().hasNext())
assertEquals(10, actualQuery.getLimit())
assertEquals(0, actualQuery.getSkip())
assertEquals("collection", stringContainer.getValue())
assertEquals("A SessionFactory is required", exception.getMessage())
assertEquals(exception.getMessage(), "force rollback")
assertEquals("A SessionFactory is required", exception.getMessage())
assertEquals("The type to be returned is required", exception.getMessage())
assertEquals("A START statement is required", exception.getMessage())
assertEquals("A RETURN statement is required", exception.getMessage())
assertEquals("A ORDER BY statement is required", exception.getMessage())
assertFalse(itemReader.doPageRead().hasNext())
assertEquals("START n=node(*) RETURN * ORDER BY n.age SKIP 0 LIMIT 50", query.getValue())
assertFalse(itemReader.doPageRead().hasNext())
assertEquals("START n=node(*) RETURN * ORDER BY n.age SKIP 0 LIMIT 50", query.getValue())
assertTrue(itemReader.doPageRead().hasNext())
assertTrue(itemReader.doPageRead().hasNext())
assertNull(reader.doRead())
assertEquals(0, pageRequest.getOffset())
assertEquals(0, pageRequest.getPageNumber())
assertEquals(1, pageRequest.getPageSize())
assertEquals("id: ASC", pageRequest.getSort().toString())
assertEquals(result, reader.doRead())
assertEquals(0, pageRequest.getOffset())
assertEquals(0, pageRequest.getPageNumber())
assertEquals(1, pageRequest.getPageSize())
assertEquals("id: ASC", pageRequest.getSort().toString())
assertNotSame(result, reader.doRead())
assertEquals(result, reader.doRead())
assertEquals(1, pageRequest.getOffset())
assertEquals(1, pageRequest.getPageNumber())
assertEquals(1, pageRequest.getPageSize())
assertEquals("id: ASC", pageRequest.getSort().toString())
assertNotSame(result, reader.doRead())
assertEquals(result, reader.doRead())
assertNull(reader.doRead())
assertEquals(2, pageRequest.getOffset())
assertEquals(2, pageRequest.getPageNumber())
assertEquals(1, pageRequest.getPageSize())
assertEquals("id: ASC", pageRequest.getSort().toString())
assertEquals(400, pageRequest.getOffset())
assertEquals(4, pageRequest.getPageNumber())
assertEquals(100, pageRequest.getPageSize())
assertEquals("id: ASC", pageRequest.getSort().toString())
assertEquals(150, pageRequest.getOffset())
assertEquals(3, pageRequest.getPageNumber())
assertEquals(50, pageRequest.getPageSize())
assertTrue(exception.getCause() instanceof NoSuchMethodException)
assertEquals("result", reader.doRead())
assertEquals(0, pageRequest.getOffset())
assertEquals(0, pageRequest.getPageNumber())
assertEquals(1, pageRequest.getPageSize())
assertEquals("id: ASC", pageRequest.getSort().toString())
assertEquals("4", result)
assertEquals("5", reader.read())
assertEquals("6", reader.read())
assertEquals("4", result)
assertEquals("5", reader.read())
assertEquals("6", reader.read())
assertEquals("1", result)
assertEquals("1", reader.read())
assertEquals("2", reader.read())
assertEquals("3", reader.read())
assertEquals("methodName must not be empty.", exception.getMessage())
assertEquals("methodName is required.", exception.getMessage())
assertEquals("methodName is required.", exception.getMessage())
assertEquals("A name is required when saveState is set to true.", exception.getMessage())
assertEquals("sorts map is required.", exception.getMessage())
assertEquals("repository is required.", exception.getMessage())
assertEquals("Page size must be greater than 0", exception.getMessage())
assertEquals("repository is required.", exception.getMessage())
assertEquals("methodName must not be empty.", exception.getMessage())
assertEquals("template is required.", exception.getMessage())
assertEquals("sessionFactory is required.", exception.getMessage())
assertEquals("sessionFactory is required.", exception.getMessage())
assertEquals(message, exception.getMessage())
assertEquals(50, query.getLimit())
assertEquals(0, query.getSkip())
assertEquals("{}", query.getQueryObject().toJson())
assertEquals("{\"name\": -1}", query.getSortObject().toJson())
assertEquals(1, query.getFieldsObject().get("name"))
assertEquals(1, query.getFieldsObject().get("age"))
assertEquals(0, query.getFieldsObject().get("_id"))
assertEquals("{ $natural : 1}", query.getHint())
assertEquals("{\"name\": \"foo\"}", query.getQueryObject().toJson())
assertEquals("{\"name\": -1}", query.getSortObject().toJson())
assertEquals("collection", collectionContainer.getValue())
assertEquals("{\"name\": \"foo\"}", query.getQueryObject().toJson())
assertEquals("{\"name\": -1}", query.getSortObject().toJson())
assertEquals("collection", collectionContainer.getValue())
assertEquals(50, query.getLimit())
assertEquals(10, query.getLimit())
assertTrue(exception instanceof IllegalArgumentException || exception instanceof IllegalStateException)
assertEquals(message, exception.getMessage())
assertEquals(foo.getName(), delegator.invokeDelegateMethod())
assertEquals(NEW_FOO_NAME, foo.getName())
assertNotEquals(NEW_FOO_NAME, foo.getName())
assertEquals(NEW_FOO_NAME, foo.getName())
assertNull(foo.getName())
assertEquals(FOO_NAME, foo.getName())
assertEquals(FOO_VALUE, foo.getValue())
assertEquals("name", foo.getName())
assertEquals(Foo.FAILURE_MESSAGE, expected.getMessage())
assertEquals(Foo.UGLY_FAILURE_MESSAGE, expected.getCause().getMessage())
assertEquals(input.size(), processed.size())
assertFalse(fooService.getProcessedFoos().isEmpty())
assertEquals("foo", processor.process(item))
assertEquals(input.size(), returnedItems.size())
assertEquals("2.0.foo", adapter.getMessage(2, "foo"))
assertEquals(".", adapter.getMessage(2, "foo"))
assertEquals(".", adapter.getMessage())
assertEquals("foo.foo", adapter.getMessage(2, "foo"))
assertEquals("2.0.foo", adapter.getMessage(2, "foo"))
assertEquals("foo.2", invoker.invoke())
assertEquals(target.foo(arg), Set.class)
assertEquals(invoker.invoke(), Set.class)
assertEquals(target.foo(exactArg, inexactArg), Number.class)
assertEquals(invoker.invoke(), Number.class)
assertEquals(input.size(), processed.size())
assertEquals("1", itemProcessor.process(1L))
assertEquals("foo", itemProcessor.process("foo"))
assertEquals("{\"id\":1,\"name\":\"foo\"}", foo)
assertEquals(2, executionContext.getLong("tradesItemWriter.written"))
assertEquals(2, executionContext.getLong("tradesItemWriter.written"))
assertEquals("Bad item", exception.getMessage())
assertEquals("The resource must not be null.", exception.getMessage())
assertEquals("The json object reader must not be null.", exception.getMessage())
assertEquals("Failed to initialize the reader", expectedException.getMessage())
assertTrue(expectedException.getCause() instanceof IllegalStateException)
assertEquals("Failed to initialize the reader", expectedException.getMessage())
assertTrue(expectedException.getCause() instanceof IllegalStateException)
assertNotNull(trade)
assertEquals("123", trade.getIsin())
assertEquals("foo", trade.getCustomer())
assertEquals(new BigDecimal("1.2"), trade.getPrice())
assertEquals(1, trade.getQuantity())
assertNotNull(trade)
assertEquals("456", trade.getIsin())
assertEquals("bar", trade.getCustomer())
assertEquals(new BigDecimal("1.4"), trade.getPrice())
assertEquals(2, trade.getQuantity())
assertNotNull(trade)
assertEquals("789", trade.getIsin())
assertEquals("foobar", trade.getCustomer())
assertEquals(new BigDecimal("1.6"), trade.getPrice())
assertEquals(3, trade.getQuantity())
assertNotNull(trade)
assertEquals("100", trade.getIsin())
assertEquals("barfoo", trade.getCustomer())
assertEquals(new BigDecimal("1.8"), trade.getPrice())
assertEquals(4, trade.getQuantity())
assertNull(trade)
assertNull(trade)
assertEquals("Failed to initialize the reader", expectedException.getMessage())
assertTrue(expectedException.getCause() instanceof IllegalStateException)
assertTrue(getJsonParsingException().isInstance(expectedException.getCause()))
assertTrue((Boolean) ReflectionTestUtils.getField(writer, "saveState"))
assertTrue((Boolean) ReflectionTestUtils.getField(writer, "append"))
assertTrue((Boolean) ReflectionTestUtils.getField(writer, "transactional"))
assertTrue((Boolean) ReflectionTestUtils.getField(writer, "shouldDeleteIfEmpty"))
assertTrue((Boolean) ReflectionTestUtils.getField(writer, "shouldDeleteIfExists"))
assertTrue((Boolean) ReflectionTestUtils.getField(writer, "forceSync"))
assertEquals(encoding, ReflectionTestUtils.getField(writer, "encoding"))
assertEquals(lineSeparator, ReflectionTestUtils.getField(writer, "lineSeparator"))
assertEquals(headerCallback, ReflectionTestUtils.getField(writer, "headerCallback"))
assertEquals(footerCallback, ReflectionTestUtils.getField(writer, "footerCallback"))
assertEquals("A json object reader is required.", exception.getMessage())
assertEquals("A name is required when saveState is set to true.", exception.getMessage())
assertEquals(this.jsonObjectReader, getField(itemReader, "jsonObjectReader"))
assertEquals(this.resource, getField(itemReader, "resource"))
assertEquals(100, getField(itemReader, "maxItemCount"))
assertEquals(50, getField(itemReader, "currentItemCount"))
assertTrue((Boolean) getField(itemReader, "saveState"))
assertTrue((Boolean) getField(itemReader, "strict"))
assertEquals("jsonItemReader", getField(executionContext, "name"))
assertEquals(this.jsonObjectReader, getField(itemReader, "jsonObjectReader"))
assertEquals(100, getField(itemReader, "maxItemCount"))
assertEquals(50, getField(itemReader, "currentItemCount"))
assertTrue((Boolean) getField(itemReader, "saveState"))
assertTrue((Boolean) getField(itemReader, "strict"))
assertEquals("jsonItemReader", getField(executionContext, "name"))
assertEquals("{\"id\":1,\"name\":\"foo\"}", foo)
assertEquals(eventWriterWrapper.getNamespaceContext(), context)
assertEquals(eventWriterWrapper.getPrefix(uri), uri)
assertEquals(2, unopenedElements.size())
assertEquals(0, writer.getUnclosedElements().size())
assertEquals(1, writer.getUnclosedElements().size())
assertEquals(elementB, writer.getUnclosedElements().get(0))
assertEquals(2, writer.getUnclosedElements().size())
assertEquals(elementA, writer.getUnclosedElements().get(0))
assertEquals(elementB, writer.getUnclosedElements().get(1))
assertEquals(2, writer.getUnclosedElements().size())
assertEquals(elementA, writer.getUnclosedElements().get(0))
assertEquals(elementA, writer.getUnclosedElements().get(1))
assertEquals(eventReaderWrapper.getElementText(), text)
assertEquals(eventReaderWrapper.getProperty("name"), text)
assertTrue(eventReaderWrapper.hasNext())
assertEquals(eventReaderWrapper.next(), text)
assertEquals(eventReaderWrapper.nextEvent(), event)
assertEquals(eventReaderWrapper.nextTag(), event)
assertEquals(eventReaderWrapper.peek(), event)
assertFalse(returnedItems.isEmpty())
assertFalse(fooService.getProcessedFooNameValuePairs().isEmpty())
assertTrue(fragmentReader.hasNext())
assertEquals("fragment", EventHelper.startElementName(eventReader.peek()))
assertTrue(fragmentReader.peek().isStartDocument())
assertTrue(fragmentReader.nextEvent().isStartDocument())
assertEquals("fragment", EventHelper.startElementName(fragmentReader.nextEvent()))
assertEquals("fragment", EventHelper.endElementName(fragmentReader.nextEvent()))
assertTrue(fragmentReader.peek().isEndDocument())
assertTrue(fragmentReader.nextEvent().isEndDocument())
assertNull(fragmentReader.peek())
assertFalse(fragmentReader.hasNext())
assertTrue(startFragment.isStartDocument())
assertEquals("misc2", EventHelper.startElementName(misc2))
assertEquals("misc2", EventHelper.startElementName(misc2))
assertNotNull(source.read())
assertNotNull(source.read())
assertNull(source.read())
assertNotNull(source.read())
assertNotNull(source.read())
assertNull(source.read())
assertEquals(1, source.read().getItemCount())
assertEquals(2, source.read().getItemCount())
assertNull(source.read())
assertEquals(1, source.read().getItemCount())
assertEquals(2, source.read().getItemCount())
assertNull(source.read())
assertNotNull(source.read())
assertNotNull(source.read())
assertNull(source.read())
assertNotNull(source.read())
assertNotNull(source.read())
assertNull(source.read())
assertNull(source.read())
assertNotNull(source.read())
assertNotNull(source.read())
assertNotNull(source.read())
assertNull(source.read())
assertNotNull(source.read())
assertNotNull(source.read())
assertNull(source.read())
assertNotNull(source.read())
assertNotNull(source.read())
assertEquals(2, executionContext.getInt(ClassUtils.getShortName(StaxEventItemReader.class) + ".read.count"))
assertNotNull(source.read())
assertNull(source.read())
assertNotNull(source.read())
assertNotNull(source.read())
assertNotNull(source.read())
assertNull(source.read())
assertNotNull(source.read())
assertNotNull(source.read())
assertEquals(2, executionContext.getInt(ClassUtils.getShortName(StaxEventItemReader.class) + ".read.count"))
assertNotNull(source.read())
assertNull(source.read())
assertFalse(source.moveCursorToNextFragment(reader))
assertFalse(source.moveCursorToNextFragment(reader))
assertFalse(source.moveCursorToNextFragment(reader))
assertEquals(1, executionContext.getInt(ClassUtils.getShortName(StaxEventItemReader.class) + ".read.count"))
assertEquals(expectedAfterRestart.size(), afterRestart.size())
assertNotNull(source.read())
assertNotNull(source.read())
assertNull(source.read())
assertEquals(3, executionContext.getInt(ClassUtils.getShortName(StaxEventItemReader.class) + ".read.count"))
assertNull(source.read())
assertEquals(NUMBER_OF_RECORDS, extractRecordCount())
assertEquals(NUMBER_OF_RECORDS, extractRecordCount())
assertNotNull(item)
assertTrue(newSource.isOpenCalled())
assertNull(source.read())
assertNull(source.read())
assertTrue(resource.getFile().isDirectory())
assertNull(source.read())
assertSame(TroublemakerUnmarshaller.MESSAGE, expected.getMessage())
assertSame(TroublemakerUnmarshaller.MESSAGE, expected.getMessage())
assertNull(source.read())
assertEquals(3, results.size())
assertEquals("XYZ0001", trade1.getIsin())
assertEquals(5, trade1.getQuantity())
assertEquals(new BigDecimal("11.39"), trade1.getPrice())
assertEquals("Customer1", trade1.getCustomer())
assertEquals("XYZ0002", trade2.getIsin())
assertEquals(2, trade2.getQuantity())
assertEquals(new BigDecimal("72.99"), trade2.getPrice())
assertEquals("Customer2", trade2.getCustomer())
assertEquals("XYZ0003", trade3.getIsin())
assertEquals(9, trade3.getQuantity())
assertEquals(new BigDecimal("99.99"), trade3.getPrice())
assertEquals("Customer3", trade3.getCustomer())
assertEquals("XYZ0001", trade.getIsin())
assertEquals(5, trade.getQuantity())
assertEquals(new BigDecimal("11.39"), trade.getPrice())
assertEquals("Customer1", trade.getCustomer())
assertEquals(3, results.size())
assertEquals("XYZ0001", trade1.getIsin())
assertEquals(5, trade1.getQuantity())
assertEquals(new BigDecimal("11.39"), trade1.getPrice())
assertEquals("Customer1", trade1.getCustomer())
assertEquals("XYZ0002", trade2.getIsin())
assertEquals(2, trade2.getQuantity())
assertEquals(new BigDecimal("72.99"), trade2.getPrice())
assertEquals("Customer2", trade2.getCustomer())
assertEquals("XYZ0003", trade3.getIsin())
assertEquals(9, trade3.getQuantity())
assertEquals(new BigDecimal("99.99"), trade3.getPrice())
assertEquals("Customer3", trade3.getCustomer())
assertEquals("A name is required when saveState is set to true.", exception.getMessage())
assertEquals("At least one fragment root element is required", exception.getMessage())
assertNotNull(reader)
assertNull(reader.read())
assertEquals(4, item.getFirst())
assertEquals("five", item.getSecond())
assertEquals("six", item.getThird())
assertEquals(2, executionContext.size())
assertEquals("fooReader", getField(executionContextUserSupport, "name"))
assertNull(reader.read())
assertEquals(4, item.getFirst())
assertEquals("five", item.getSecond())
assertEquals("six", item.getThird())
assertEquals(2, executionContext.size())
assertNull(reader.read())
assertEquals(7, item.getFirst())
assertEquals("eight", item.getSecond())
assertEquals("nine", item.getThird())
assertEquals(0, executionContext.size())
assertFalse(file.exists())
assertTrue(writer instanceof TransactionAwareBufferedWriter)
assertTrue((Boolean) ReflectionTestUtils.getField(writer, "forceSync"))
assertEquals(FULL_OUTPUT, getOutputFileContent("UTF-16"))
assertEquals(0, executionContext.size())
assertFalse(output.contains("standalone="))
assertTrue(output.contains("standalone='yes'"))
assertTrue(output.contains("standalone='no'"))
assertFalse(content.contains("standalone="))
assertTrue(content.contains("standalone='yes'"))
assertTrue(content.contains("standalone='no'"))
assertEquals(3, StringUtils.countOccurrencesOf(outputFile, TEST_STRING))
assertEquals("<root>" + TEST_STRING + TEST_STRING + TEST_STRING + "</root>", outputFile.replace(" ", ""))
assertEquals(2, StringUtils.countOccurrencesOf(outputFile, TEST_STRING))
assertTrue(outputFile.contains("<root>" + TEST_STRING + TEST_STRING + "</root>"))
assertEquals(2, StringUtils.countOccurrencesOf(outputFile, TEST_STRING_MULTI_BYTE))
assertTrue(outputFile.contains("<root>" + TEST_STRING_MULTI_BYTE + TEST_STRING_MULTI_BYTE + "</root>"))
assertEquals("<root></root>", outputFile)
assertEquals(1, StringUtils.countOccurrencesOf(outputFile, TEST_STRING))
assertTrue(outputFile.contains("<root>" + TEST_STRING + "</root>"))
assertEquals("<root><StaxEventItemWriter-testString/></root>", outputFile)
assertFalse(executionContext.containsKey(ClassUtils.getShortName(StaxEventItemWriter.class) + ".record.count"))
assertTrue(content.contains("<testroot attribute=\"value\">"))
assertTrue(content.contains("<header/>"))
assertTrue(content.contains("<footer/>"))
assertTrue(content.endsWith("</testroot>"))
assertEquals("Output resource must exist", exception.getMessage())
assertFalse(resource.getFile().exists())
assertDoesNotThrow(() -> recoverer.recover(new Object[] { "foo" }, null))
assertEquals("FOO", content.get())
assertEquals("FOO", content.get())
assertEquals("A mailSender is required", exception.getMessage())
assertEquals("FOO", content.get())
assertFalse(newMethodArgumentsIdentifier.isNew(new Object[] { message }))
assertFalse(newMethodArgumentsIdentifier.isNew(new Object[] { "foo" }))
assertEquals("foo", itemReader.read())
assertEquals("foo", itemReader.read())
assertEquals(date, itemReader.read())
assertTrue(exception.getMessage().contains("wrong type"))
assertEquals(message, itemReader.read())
assertEquals("foo", methodArgumentsKeyGenerator.getKey(new Object[] { message }))
assertEquals("foo", methodArgumentsKeyGenerator.getKey(new Object[] { "foo" }))
assertEquals("foo", itemReader.read())
assertEquals(date, itemReader.read())
assertTrue(exception.getMessage().contains("wrong type"))
assertEquals(message, itemReader.read())
assertEquals("jmsTemplate is required.", exception.getMessage())
assertEquals("jmsTemplate is required.", exception.getMessage())
assertEquals("A delegate item writer is required", expectedException.getMessage())
assertEquals("bar", processor.process("bar"))
assertEquals("foo: foo", processor.process("foo"))
assertEquals("baz", processor.process("baz"))
assertEquals("int: 1", processor.process(Integer.valueOf(1)).toString())
assertEquals("long: 2", processor.process(Long.valueOf(2)).toString())
assertEquals("number: 3", processor.process(Byte.valueOf((byte) 3)).toString())
assertEquals("a", reader.read())
assertEquals("b", reader.read())
assertNull(reader.read())
assertEquals("a", reader.peek())
assertEquals("a", reader.read())
assertEquals("b", reader.read())
assertNull(reader.peek())
assertNull(reader.read())
assertEquals("a", reader.read())
assertEquals("b", reader.read())
assertEquals("a", reader.read())
assertEquals("b", reader.peek())
assertEquals("b", reader.read())
assertEquals("a", reader.read())
assertEquals("b", reader.peek())
assertEquals("b", reader.read())
assertEquals("c", reader.peek())
assertEquals("c", reader.read())
assertEquals(2, reader.getCurrentItemCount())
assertEquals(3, reader.getCurrentItemCount())
assertEquals(0, reader.getCurrentItemCount())
assertEquals(1, reader.getCurrentItemCount())
assertTrue(reader.closeCalled)
assertTrue(reader.openCalled)
assertNull(reader.read())
assertEquals(1, context.size())
assertEquals(1, context.getInt("foo.read.count"))
assertEquals(1, context.getInt("bar.read.count"))
assertEquals(1, context.size())
assertNull(reader.read())
assertEquals(2, context.size())
assertSame(itemAfterSecondTransformation, composite.process(item))
assertEquals("output", composite.process("input"))
assertNull(composite.process(item))
assertEquals("a", reader.read())
assertEquals("b", reader.read())
assertEquals("c", reader.read())
assertNull(reader.read())
assertEquals("a", reader.read())
assertEquals("b", reader.read())
assertEquals("c", reader.read())
assertNull(reader.read())
assertIterableEquals(Chunk.of("foo", "foo"), foos)
assertIterableEquals(Chunk.of("one", "two", "three"), defaults)
assertEquals("A classifier is required.", exception.getMessage())
assertEquals(true, executionContext.get(TestItemReader.HAS_BEEN_OPENED))
assertFalse(testItemReader.isClosed())
assertTrue(testItemReader.isClosed())
assertEquals(SIZE, executionContext.getInt(TestItemReader.UPDATE_COUNT_KEY))
assertEquals("a", reader.read())
assertEquals("b", reader.read())
assertEquals("c", reader.read())
assertNull(reader.read())
assertEquals(1, taken.size())
assertEquals("a", taken.get(0))
assertFalse(taken.contains("a"))
assertEquals(3, taken.size())
assertEquals("a", taken.get(0))
assertEquals("Rollback!", exception.getMessage())
assertEquals(1, taken.size())
assertEquals("a", taken.get(0))
assertTrue(taken.contains("a"))
assertIterableEquals(Chunk.of("foo", "foo"), foos)
assertIterableEquals(Chunk.of("one", "two", "three"), defaults)
assertEquals("A classifier is required.", exception.getMessage())
assertEquals("A delegate item writer is required", expectedException.getMessage())
assertEquals("a", reader.peek())
assertEquals("a", reader.read())
assertEquals("b", reader.read())
assertNull(reader.peek())
assertNull(reader.read())
assertEquals("A delegate is required", exception.getMessage())
assertEquals(true, executionContext.get(SynchronizedItemStreamReaderBuilderTests.TestItemReader.HAS_BEEN_OPENED))
assertFalse(testItemReader.isClosed())
assertTrue(testItemReader.isClosed())
assertEquals(SIZE, executionContext.getInt(SynchronizedItemStreamReaderBuilderTests.TestItemReader.UPDATE_COUNT_KEY))
assertEquals(message, exception.getMessage())
assertEquals("bar", processor.process("bar"))
assertEquals("foo: foo", processor.process("foo"))
assertEquals("baz", processor.process("baz"))
assertEquals("A classifier is required.", exception.getMessage())
assertSame(itemAfterSecondTransformation, composite.process(item))
assertSame(itemAfterSecondTransformation, composite.process(item))
assertEquals(message, exception.getMessage())
assertEquals(1, list.size())
assertEquals(1, list.size())
assertEquals(1, list.size())
assertEquals(1, list.size())
assertEquals(2, list.size())
assertEquals("a", reader.read())
assertEquals("b", reader.read())
assertEquals("c", reader.read())
assertNull(reader.read())
assertEquals("a", reader.read())
assertEquals(0, list.size())
assertEquals("b", reader.read())
assertNull(tested.read())
assertEquals(expectedValue, foo.value)
assertEquals(expectedResource, foo.resource)
assertFalse(policy.isEndOfRecord(LINE))
assertTrue(policy.isEndOfRecord(LINE + SuffixRecordSeparatorPolicy.DEFAULT_SUFFIX))
assertTrue(policy.isEndOfRecord(LINE + ":foo"))
assertTrue(policy.isEndOfRecord(LINE + SuffixRecordSeparatorPolicy.DEFAULT_SUFFIX + "  "))
assertFalse(policy.isEndOfRecord(LINE + SuffixRecordSeparatorPolicy.DEFAULT_SUFFIX + "  "))
assertFalse(policy.isEndOfRecord(""))
assertTrue(policy.isEndOfRecord(null))
assertEquals(line, policy.postProcess(record))
assertNull(policy.postProcess(line))
assertTrue(policy.isEndOfRecord("a string"))
assertFalse(policy.isEndOfRecord("a string\"one"))
assertTrue(policy.isEndOfRecord(""))
assertTrue(policy.isEndOfRecord(null))
assertEquals(line, policy.postProcess(line))
assertEquals(line + "\n", policy.preProcess(line))
assertEquals(line + "\n", policy.preProcess(line))
assertEquals(line, policy.preProcess(line))
assertFalse(policy.isEndOfRecord(line))
assertFalse(policy.isEndOfRecord(line))
assertEquals("foo", policy.preProcess(line))
assertTrue(policy.isEndOfRecord("{\"a\":\"b\"} "))
assertTrue(policy.isEndOfRecord("{\"a\": {\"b\": 2}} "))
assertTrue(policy.isEndOfRecord("a string"))
assertTrue(policy.isEndOfRecord(""))
assertTrue(policy.isEndOfRecord(null))
assertEquals(line, policy.postProcess(line))
assertEquals(line, policy.preProcess(line))
assertEquals(new Name("d", "c", 0), name)
assertEquals(1, matches.length)
assertEquals(1, matches.length)
assertTrue(msg.contains("foo"))
assertTrue(msg.contains("duckSoup"))
assertTrue(msg.contains("duckSoup"))
assertTrue(msg.contains("duckPate"))
assertEquals("name", matches[0])
assertSame(item, tested.mapLine(line, 1))
assertEquals("green", bean.getGreen())
assertEquals("blue", bean.getBlue())
assertNull(bean.getBleu())
assertEquals(fieldSet, mapper.mapFieldSet(fieldSet))
assertEquals("Both name and type cannot be specified together.", exception.getMessage())
assertEquals("Either name or type must be provided.", exception.getMessage())
assertEquals("This is some dummy string", result.getVarString())
assertEquals(true, result.isVarBoolean())
assertEquals('C', result.getVarChar())
assertEquals("Bar", result.getTestObjectB().getValueA())
assertEquals("This is some dummy string", result.getVarString())
assertEquals(true, result.isVarBoolean())
assertEquals('C', result.getVarChar())
assertEquals("This is some dummy string", result.getVarString())
assertEquals(true, result.isVarBoolean())
assertEquals('C', result.getVarChar())
assertEquals("This is some dummy string", result.getVarString())
assertEquals(true, result.isVarBoolean())
assertEquals('C', result.getVarChar())
assertEquals("This is some dummy string", result.getValueA())
assertEquals(1, result.getValueB())
assertEquals("Another dummy", result.getTestObjectB().getValueA())
assertEquals(2, result.getTestObjectB().getTestObjectC().getValue())
assertEquals("This is some dummy string", result.getValueA())
assertEquals(1, result.getValueB())
assertEquals(1, result.getValue())
assertEquals("Another dummy", result.getTestObjectB().getValueA())
assertEquals(2, result.getTestObjectB().getTestObjectC().getValue())
assertEquals("This is some dummy string", result.getVarString())
assertEquals(true, result.isVarBoolean())
assertEquals('C', result.getVarChar())
assertEquals(1, nestedList.getNestedC().get(0).getValue())
assertEquals(2, nestedList.getNestedC().get(1).getValue())
assertEquals(3, nestedList.getNestedC().get(2).getValue())
assertEquals(1, nestedList.getNestedC().get(0).getValue())
assertEquals(2, nestedList.getNestedC().get(1).getValue())
assertEquals(3, nestedList.getNestedC().get(2).getValue())
assertEquals(9, bean.getVarLong())
assertEquals(9, bean.getVarLong())
assertEquals(9, bean.getVarLong())
assertEquals(78, bean.getVarInt())
assertEquals("Both customEditor and conversionService cannot be specified together.", exception.getMessage())
assertEquals(1, exception.getErrorCount())
assertEquals("typeMismatch", exception.getFieldError("varDouble").getCode())
assertTrue(exception.getMessage().contains("'illegalPropertyName'"))
assertEquals("This is some dummy string", result.getVarString())
assertEquals(true, result.isVarBoolean())
assertEquals('C', result.getVarChar())
assertEquals(1, map.get("foo"))
assertEquals(1, map.get("foo"))
assertEquals(2, ((Map<String, Object>) map.get("bar")).get("foo"))
assertSame("line", tested.mapLine("line", 1))
assertNotNull(person)
assertEquals(1, person.id())
assertEquals("foo", person.name())
assertEquals("Fields count must be equal to record components count", exception.getMessage())
assertEquals("Field names must specified", exception.getMessage())
assertEquals("a", reader.readLine())
assertEquals("b", reader.readLine())
assertNull(reader.readLine())
assertEquals("a", reader.readLine())
assertEquals("b", reader.readLine())
assertNull(reader.readLine())
assertEquals("a", reader.readLine())
assertEquals("b", reader.readLine())
assertEquals("b", reader.readLine())
assertEquals("c", reader.readLine())
assertNull(reader.readLine())
assertEquals("a", reader.readLine())
assertNull(reader.readLine())
assertEquals("a|b", reader.readLine())
assertNull(reader.readLine())
assertEquals("a", reader.readLine())
assertEquals("b|", reader.readLine())
assertNull(reader.readLine())
assertEquals("foo", exception.getMessage())
assertEquals("bar", exception.getInput())
assertEquals(100, exception.getLineNumber())
assertEquals("1", tested.read())
assertEquals("2", tested.read())
assertEquals("3", tested.read())
assertEquals("4", tested.read())
assertEquals("5", tested.read())
assertEquals("6", tested.read())
assertEquals("7", tested.read())
assertEquals("8", tested.read())
assertNull(tested.read())
assertEquals("1", tested.read())
assertEquals("2", tested.read())
assertEquals("3", tested.read())
assertEquals("1", tested.read())
assertEquals("1", tested.read())
assertEquals("2", tested.read())
assertEquals("3", tested.read())
assertEquals("2", tested.read())
assertEquals("3", tested.read())
assertEquals("4", tested.read())
assertEquals("2", tested.read())
assertEquals("3", tested.read())
assertEquals("4", tested.read())
assertEquals("5", tested.read())
assertEquals("6", tested.read())
assertEquals("7", tested.read())
assertEquals("6", tested.read())
assertEquals("7", tested.read())
assertEquals("8", tested.read())
assertNull(tested.read())
assertEquals("1", tested.read())
assertEquals("2", tested.read())
assertEquals("3", tested.read())
assertEquals("4", tested.read())
assertEquals("5", tested.read())
assertEquals("6", tested.read())
assertEquals("5", tested.read())
assertEquals("6", tested.read())
assertEquals("7", tested.read())
assertEquals("8", tested.read())
assertNull(tested.read())
assertSame(r3, resources[0])
assertSame(r1, resources[1])
assertSame(r2, resources[2])
assertNull(tested.read())
assertNull(tested.read())
assertNull(tested.read())
assertTrue(resource.getFile().isDirectory())
assertNull(tested.read())
assertEquals("1", tested.read())
assertEquals("2", tested.read())
assertEquals("3", tested.read())
assertEquals("4", tested.read())
assertEquals("1", tested.read())
assertTrue(part1.exists())
assertEquals("123", readFile(part1))
assertTrue(part2.exists())
assertEquals("4", readFile(part2))
assertEquals("45", readFile(part2))
assertTrue(part3.exists())
assertEquals("6789", readFile(part3))
assertEquals(0, executionContext.getInt(tested.getExecutionContextKey("resource.item.count")))
assertEquals(1, executionContext.getInt(tested.getExecutionContextKey("resource.index")))
assertEquals(0, executionContext.getInt(tested.getExecutionContextKey("resource.item.count")))
assertEquals(2, executionContext.getInt(tested.getExecutionContextKey("resource.index")))
assertTrue(part1.exists())
assertTrue(part2.exists())
assertEquals("123f", readFile(part1))
assertEquals("4f", readFile(part2))
assertTrue(part1.exists())
assertTrue(part2.exists())
assertEquals("123f", readFile(part1))
assertEquals("4f", readFile(part2))
assertTrue(part1.exists())
assertEquals("123", readFile(part1))
assertTrue(part2.exists())
assertEquals("4", readFile(part2))
assertEquals("45", readFile(part2))
assertTrue(part3.exists())
assertEquals("6789", readFile(part3))
assertTrue(part1.exists())
assertEquals("123f", readFile(part1))
assertTrue(part2.exists())
assertEquals("4", readFile(part2))
assertEquals("45f", readFile(part2))
assertTrue(part3.exists())
assertEquals("6789f", readFile(part3))
assertTrue(part1.exists())
assertEquals("123f", readFile(part1))
assertTrue(part2.exists())
assertEquals("4", readFile(part2))
assertEquals("45f", readFile(part2))
assertNotNull(reader.read())
assertNull(reader.read())
assertNotNull(reader.read())
assertNull(reader.read())
assertNotNull(reader.read())
assertEquals(1, executionContext.getInt(reader.getExecutionContextKey("COUNT")))
assertEquals("testLine1testLine2", reader.read())
assertEquals("testLine3testLine4", reader.read())
assertEquals("testLine5testLine6", reader.read())
assertEquals("testLine1testLine2", reader.read())
assertEquals(3, exception.getLineNumber())
assertEquals("testLine3", exception.getInput())
assertEquals("testLine1", reader.read())
assertEquals("testLine2", reader.read())
assertEquals("testLine3", reader.read())
assertNull(reader.read())
assertEquals("testLine1testLine2", reader.read())
assertNull(reader.read())
assertEquals("testLine4", reader.read())
assertNull(reader.read())
assertEquals(2, executionContext.getInt(ClassUtils.getShortName(FlatFileItemReader.class) + ".read.count"))
assertEquals("testLine3", reader.read())
assertEquals("testLine4", reader.read())
assertEquals(4, executionContext.getInt(ClassUtils.getShortName(FlatFileItemReader.class) + ".read.count"))
assertEquals(4, executionContext.getInt(ClassUtils.getShortName(FlatFileItemReader.class) + ".read.count"))
assertNull(reader.read())
assertEquals(2, executionContext.getInt(ClassUtils.getShortName(FlatFileItemReader.class) + ".read.count"))
assertNotNull(reader.read())
assertEquals("testLine4", reader.read())
assertNull(reader.read())
assertNull(reader.read())
assertNull(reader.read())
assertTrue(resource.getFile().isDirectory())
assertNull(reader.read())
assertEquals(TEST_STRING, reader.read())
assertNotNull(reader.read())
assertEquals(2, expected.getLineNumber())
assertEquals("testLine2", expected.getInput())
assertEquals("Couldn't map line 2", expected.getCause().getMessage())
assertEquals("testLine1", item1.getValue())
assertEquals(1, item1.getItemCount())
assertEquals("testLine2", item2.getValue())
assertEquals(2, item2.getItemCount())
assertEquals("testLine3", item3.getValue())
assertEquals(3, item3.getItemCount())
assertEquals("testLine1testLine2", item1.getValue())
assertEquals(1, item1.getItemCount())
assertEquals("testLine3testLine4", item2.getValue())
assertEquals(2, item2.getItemCount())
assertEquals("testLine5testLine6", item3.getValue())
assertEquals(3, item3.getItemCount())
assertFalse(policy.isEndOfRecord("{\"a\":\"b\""))
assertFalse(policy.isEndOfRecord("{\"a\": {\"b\": 2}"))
assertFalse(delegate.openCalled)
assertFalse(delegate.closeCalled)
assertFalse(delegate.updateCalled)
assertEquals("test1", readLine())
assertEquals("test2", readLine())
assertEquals("test1", readLine())
assertEquals("test2", readLine())
assertEquals("test1", readLine())
assertEquals("test1", readLine())
assertEquals("test2", readLine())
assertEquals("test1", readLine())
assertEquals("test1", readLine())
assertEquals(TEST_STRING, readLine())
assertEquals(TEST_STRING, readLine())
assertNull(readLine())
assertEquals("test1", readLine())
assertEquals(TEST_STRING, readLine())
assertEquals(TEST_STRING, readLine())
assertNull(readLine())
assertEquals(TEST_STRING, lineFromFile)
assertEquals(TEST_STRING, lineFromFile)
assertEquals("FOO:" + data, lineFromFile)
assertEquals("FOO:" + TEST_STRING, lineFromFile)
assertEquals("1", lineFromFile)
assertEquals("1|2|", lineFromFile)
assertEquals("footer", readLine())
assertEquals(8, executionContext.getLong(ClassUtils.getShortName(FlatFileItemWriter.class) + ".written"))
assertEquals(TEST_STRING, readLine())
assertEquals("footer", readLine())
assertEquals(8, executionContext.getLong(ClassUtils.getShortName(FlatFileItemWriter.class) + ".written"))
assertEquals("footer", readLine(encoding))
assertEquals(8, executionContext.getLong(ClassUtils.getShortName(FlatFileItemWriter.class) + ".written"))
assertNotNull(executionContext)
assertEquals(2, executionContext.entrySet().size())
assertEquals(0, executionContext.getLong(ClassUtils.getShortName(FlatFileItemWriter.class) + ".current.count"))
assertTrue(exception.getCause() instanceof UnsupportedCharsetException)
assertEquals(TEST_STRING, lineFromFile)
assertEquals(TEST_STRING, readLine())
assertEquals("a", readLine())
assertEquals("b", readLine())
assertEquals("a", lineFromFile)
assertEquals("b", lineFromFile)
assertEquals(TEST_STRING, lineFromFile)
assertEquals("a", readLine())
assertEquals("b", readLine())
assertEquals("test1", readLine())
assertEquals("a", readLine())
assertEquals("b", readLine())
assertEquals("test1", readLine())
assertEquals("test2", readLine())
assertTrue(outputFile.exists())
assertFalse(outputFile.exists())
assertTrue(outputFile.exists())
assertFalse(outputFile.exists())
assertEquals("test2", readLine())
assertTrue(outputFile.exists())
assertFalse(outputFile.exists())
assertEquals("a", readLine())
assertEquals("b", readLine())
assertEquals("test2", readLine())
assertTrue(outputFile.exists())
assertTrue(outputFile.exists())
assertEquals("a", lineFromFile)
assertEquals("b", lineFromFile)
assertEquals(TEST_STRING, lineFromFile)
assertNull(lineFromFile)
assertEquals("a", lineFromFile)
assertEquals("b", lineFromFile)
assertEquals(TEST_STRING, lineFromFile)
assertEquals("a", lineFromFile)
assertEquals("b", lineFromFile)
assertEquals(TEST_STRING, lineFromFile)
assertEquals(TEST_STRING, lineFromFile)
assertEquals("aggregation failed on 2", expected.getMessage())
assertNull(readLine())
assertEquals("test1", readLine())
assertEquals(".0", tested.getSuffix(0))
assertEquals(".1", tested.getSuffix(1))
assertEquals(".3463457", tested.getSuffix(3463457))
assertTrue(part1.exists())
assertTrue(part2.exists())
assertEquals(xmlDocStart + "<prefix:4/>" + xmlDocEnd, readFile(part2))
assertEquals(xmlDocStart + "<prefix:1/><prefix:2/><prefix:3/>" + xmlDocEnd, readFile(part1))
assertTrue(part3.exists())
assertEquals(xmlDocStart + "<prefix:4/><prefix:5/>" + xmlDocEnd, readFile(part2))
assertEquals(xmlDocStart + "<prefix:6/><prefix:7/><prefix:8/><prefix:9/>" + xmlDocEnd, readFile(part3))
assertEquals("delegate is required.", exception.getMessage())
assertEquals("resources array is required.", exception.getMessage())
assertTrue(part1.exists())
assertEquals("123", readFile(part1))
assertTrue(part2.exists())
assertEquals("4", readFile(part2))
assertEquals("45", readFile(part2))
assertTrue(part3.exists())
assertEquals("6789", readFile(part3))
assertTrue(part1.exists())
assertEquals("123", readFile(part1))
assertTrue(part2.exists())
assertEquals("4", readFile(part2))
assertEquals(0, this.executionContext.getInt(this.writer.getExecutionContextKey("resource.item.count")))
assertEquals(1, this.executionContext.getInt(this.writer.getExecutionContextKey("resource.index")))
assertEquals(0, this.executionContext.getInt(this.writer.getExecutionContextKey("resource.item.count")))
assertEquals(2, this.executionContext.getInt(this.writer.getExecutionContextKey("resource.index")))
assertTrue(part1.exists())
assertEquals("123", readFile(part1))
assertTrue(part2.exists())
assertEquals("4", readFile(part2))
assertEquals("45", readFile(part2))
assertTrue(part3.exists())
assertEquals("6789", readFile(part3))
assertTrue(part1.exists())
assertEquals("123", readFile(part1))
assertTrue(part2.exists())
assertEquals("4", readFile(part2))
assertEquals("4", readFile(part2))
assertTrue(part3.exists())
assertEquals("56789", readFile(part3))
assertEquals("A name is required when saveState is true.", exception.getMessage())
assertEquals("resource is required.", exception.getMessage())
assertEquals("delegate is required.", exception.getMessage())
assertEquals("a", reader.readLine())
assertEquals(item.toString(), mapper.aggregate(item))
assertEquals("foo", mapper.aggregate("foo"))
assertEquals("bar", aggregator.aggregate(Collections.singleton("foo")))
assertEquals("foo", array[0])
assertEquals("bar", array[1])
assertEquals(3, values.length)
assertEquals(first, values[0])
assertEquals(last, values[1])
assertEquals(born, values[2])
assertTrue(exception.getMessage().startsWith("Invalid property 'birthday'"))
assertArrayEquals(new Object[] { "abc" }, result)
assertArrayEquals(new Object[] { "a", "b", null, "d" }, result)
assertArrayEquals(new Object[] { "a", "b", "", "d" }, result)
assertArrayEquals(new Object[] { "a", "b", null, "d" }, result)
assertArrayEquals(new Object[] { "a", "b", null, "d" }, result)
assertEquals(4, ranges.length)
assertEquals(15, ranges[0].getMin())
assertEquals(31, ranges[0].getMax())
assertEquals(32, ranges[1].getMin())
assertEquals(32, ranges[1].getMax())
assertEquals(1, ranges[2].getMin())
assertEquals(10, ranges[2].getMax())
assertEquals(33, ranges[3].getMin())
assertFalse(ranges[3].hasMaxValue())
assertEquals(2, ranges.length)
assertEquals(15, ranges[0].getMin())
assertEquals(31, ranges[0].getMax())
assertEquals(32, ranges[1].getMin())
assertFalse(ranges[1].hasMaxValue())
assertEquals("20, 6-15, 2, 26-95", pe.getAsText())
assertEquals(2, ranges.length)
assertEquals(1, ranges[0].getMin())
assertEquals(5, ranges[0].getMax())
assertEquals(11, ranges[1].getMin())
assertEquals(15, ranges[1].getMax())
assertEquals(2, ranges.length)
assertEquals(1, ranges[0].getMin())
assertEquals(10, ranges[0].getMax())
assertEquals(5, ranges[1].getMin())
assertEquals(15, ranges[1].getMax())
assertEquals(6, tokens.getFieldCount())
assertEquals(2, tokens.getFieldCount())
assertEquals(3, line.getFieldCount())
assertEquals(3, line.getFieldCount())
assertEquals("a", line.readString("A"))
assertEquals(2, exception.getExpectedCount())
assertEquals(3, exception.getActualCount())
assertEquals("a,b,c", exception.getInput())
assertEquals(3, line.getFieldCount())
assertEquals(2, line.getFieldCount())
assertEquals("a", line.readString(0))
assertEquals("c", line.readString(1))
assertEquals(3, line.getFieldCount())
assertEquals("", line.readString(0))
assertEquals("a", line.readString(1))
assertEquals("b", line.readString(2))
assertEquals(3, line.getFieldCount())
assertEquals("a", line.readString(0))
assertEquals("b", line.readString(1))
assertEquals("", line.readString(2))
assertEquals(3, line.getFieldCount())
assertEquals("a", line.readString(0))
assertEquals("|", line.readString(1))
assertEquals("b", line.readString(2))
assertEquals(2, line.getFieldCount())
assertEquals("a", line.readString(0))
assertEquals("| b", line.readString(1))
assertEquals(2, line.getFieldCount())
assertEquals("a b", line.readString(0))
assertEquals("c", line.readString(1))
assertEquals(2, line.getFieldCount())
assertEquals("a b", line.readString(0))
assertEquals("c", line.readString(1))
assertEquals(3, line.getFieldCount())
assertEquals("c", line.readString(2))
assertEquals(3, line.getFieldCount())
assertEquals("c", line.readString(2))
assertEquals(3, line.getFieldCount())
assertEquals("\"\"b", line.readString(1))
assertEquals("\"c", line.readString(2))
assertEquals(3, line.getFieldCount())
assertEquals("\"b", line.readString(1))
assertEquals("c", line.readString(2))
assertEquals(3, line.getFieldCount())
assertEquals("b ", line.readRawString(1))
assertEquals(3, line.getFieldCount())
assertEquals("c ", line.readRawString(2))
assertEquals(3, line.getFieldCount())
assertEquals("c", line.readString(2))
assertEquals(3, line.getFieldCount())
assertEquals("b", line.readString(1))
assertEquals(4, line.getFieldCount())
assertEquals("c", line.readString(2))
assertEquals("", line.readString(3))
assertEquals(0, line.getFieldCount())
assertEquals(1, line.getFieldCount())
assertEquals(0, line.getFieldCount())
assertEquals(3, line.getFieldCount())
assertEquals("c\nrap", line.readString(2))
assertEquals(3, line.getFieldCount())
assertEquals("c\nrap", line.readString(2))
assertEquals(4, line.getFieldCount())
assertEquals("", line.readString(2))
assertEquals(2, line.getFieldCount())
assertEquals("c", line.readString(1))
assertEquals(2, line.getFieldCount())
assertEquals("", line.readString(1))
assertEquals(2, line.getFieldCount())
assertEquals("c", line.readString("bar"))
assertEquals(4, line.getFieldCount())
assertEquals("value2\nvalue2cont", line.readString(1))
assertEquals(14, fieldSet.getFieldCount())
assertTrue(fieldSet.hasNames())
assertEquals(fieldSet.getFieldCount(), fieldSet.getNames().length)
assertFalse(fieldSet.hasNames())
assertEquals(fieldSet.readString(0), "TestString")
assertEquals(fieldSet.readString("String"), "TestString")
assertEquals('C', fieldSet.readChar(2))
assertEquals('C', fieldSet.readChar("Char"))
assertTrue(fieldSet.readBoolean(1))
assertTrue(fieldSet.readBoolean("Boolean"))
assertEquals(10, fieldSet.readByte(3))
assertEquals(10, fieldSet.readByte("Byte"))
assertEquals(-472, fieldSet.readShort(4))
assertEquals(-472, fieldSet.readShort("Short"))
assertEquals(124.3F, fieldSet.readFloat(7))
assertEquals(124.3F, fieldSet.readFloat("Float"))
assertEquals(424.3, fieldSet.readDouble(8))
assertEquals(424.3, fieldSet.readDouble("Double"))
assertEquals(bd, fieldSet.readBigDecimal(8))
assertEquals(bd, fieldSet.readBigDecimal("Double"))
assertEquals(bd, fieldSet.readBigDecimal(0))
assertEquals(bd, fieldSet.readBigDecimal(8))
assertEquals(bd, fieldSet.readBigDecimal(9))
assertEquals(bd, fieldSet.readBigDecimal(10, bd))
assertEquals(bd, fieldSet.readBigDecimal("Null", bd))
assertTrue(exception.getMessage().contains("something"))
assertTrue(fieldSet.readBoolean(1, "true"))
assertFalse(fieldSet.readBoolean(1, "incorrect trueValue"))
assertTrue(fieldSet.readBoolean("Boolean", "true"))
assertFalse(fieldSet.readBoolean("Boolean", "incorrect trueValue"))
assertFalse(fieldSet.readBoolean(0))
assertEquals(354224, fieldSet.readInt(5))
assertEquals(354224, fieldSet.readInt("Integer"))
assertEquals(354224, fieldSet.readInt(0))
assertEquals(354224, fieldSet.readInt(0))
assertEquals(543, fieldSet.readLong(6))
assertEquals(543, fieldSet.readLong("Long"))
assertEquals(9, fieldSet.readLong(0))
assertEquals(5, fieldSet.readInt(10, 5))
assertEquals(5, fieldSet.readInt("Null", 5))
assertEquals(354224, fieldSet.readInt(5, 5))
assertEquals(354224, fieldSet.readInt("Integer", 5))
assertEquals(fieldSet.readLong(indexOfNull, defaultValue), defaultValue)
assertEquals(fieldSet.readLong(indexNotNull, defaultValue), longValueAtIndex)
assertEquals(fieldSet.readLong(nameNull, defaultValue), defaultValue)
assertEquals(fieldSet.readLong(nameNotNull, defaultValue), longValueAtIndex)
assertTrue(exception.getMessage().contains("TestString"))
assertTrue(message.contains("TestString"))
assertTrue(message.contains("name: [String]"))
assertNotNull(fieldSet.readDate(11))
assertNotNull(fieldSet.readDate("Date"))
assertEquals(date, fieldSet.readDate(13, date))
assertEquals(date, fieldSet.readDate("BlankInput", date))
assertEquals(dateFormat.parse("13/01/1999"), fieldSet.readDate(0))
assertTrue(exception.getMessage().contains("TestString"))
assertTrue(exception.getMessage().contains("name: [String]"))
assertTrue(exception.getMessage().contains("dd-MM-yyyy"))
assertEquals(date, fieldSet.readDate(13, "dd-MM-yyyy", date))
assertEquals(date, fieldSet.readDate("BlankInput", "dd-MM-yyyy", date))
assertTrue(exception.getMessage().contains("yyyy-MM-dd"))
assertTrue(exception.getMessage().contains("yyyy-MM-dd"))
assertTrue(exception.getMessage().contains("name: [String]"))
assertTrue(exception.getMessage().contains("dd-MM-yyyy"))
assertTrue(exception.getMessage().contains("dd-MM-yyyy"))
assertTrue(exception.getMessage().contains("name: [String]"))
assertTrue(exception.getMessage().contains("dd-MM-yyyy"))
assertTrue(exception.getMessage().contains("String"))
assertEquals(fieldSet, fieldSet)
assertEquals(fieldSet, new DefaultFieldSet(tokens))
assertEquals(fs1, fs2)
assertNull(fieldSet.readString(10))
assertFalse(fieldSet.equals(null))
assertFalse(new DefaultFieldSet(null).equals(fieldSet))
assertFalse(fs1.equals(fs2))
assertEquals(fieldSet.hashCode(), new DefaultFieldSet(tokens).hashCode())
assertEquals(0, new DefaultFieldSet(null).hashCode())
assertTrue(fieldSet.toString().contains("Foo=foo"))
assertTrue(fieldSet.toString().contains("foo"))
assertEquals("", fieldSet.toString())
assertEquals("foo", new DefaultFieldSet(new String[] { "foo", "bar" }, new String[] { "Foo", "Bar" }).getProperties().getProperty("Foo"))
assertEquals("bar", new DefaultFieldSet(new String[] { "foo", "bar   " }, new String[] { "Foo", "Bar" }).getProperties().getProperty("Bar"))
assertEquals("bar", fieldSet.getProperties().getProperty("Bar"))
assertNull(fieldSet.getProperties().getProperty("Foo"))
assertEquals(tokens.length, values.length)
assertEquals(value, 9)
assertEquals(value, fs.readRawString(0))
assertEquals(value, fs.readRawString(name))
assertEquals(1, fields.getFieldCount())
assertEquals("bar", fields.readString(1))
assertEquals(1, fields.getFieldCount())
assertEquals("foo bar", fields.readString(0))
assertEquals("MatchsizeSmallsize", result)
assertEquals("Matchsize   Smallsize", result)
assertEquals(23, result.length())
assertEquals("    Matchsize Smallsize", result)
assertEquals("  Matchsize   Smallsize  ", result)
assertEquals("Matchsize....Smallsize..", result)
assertEquals("Matchsize    Smallsize  ", result)
assertEquals("foo   bar", aggregator.aggregate(args))
assertFalse(tokenizer.hasNames())
assertFalse(tokenizer.hasNames())
assertFalse(tokenizer.hasNames())
assertTrue(tokenizer.hasNames())
assertEquals(9, tokens.size())
assertEquals("England", tokens.get(1))
assertEquals("3", tokens.get(6))
assertEquals(2, tokens.size())
assertEquals("Graham", tokens.get(0))
assertEquals("Miller", tokens.get(1))
assertEquals(0, tokens.size())
assertEquals("foo", fieldSet.readString(0))
assertEquals(1, fieldSet.readInt("foo"))
assertEquals(format.parse("1999/12/18"), fieldSet.readDate(0))
assertEquals(19991218, fieldSet.readInt(0))
assertEquals(15, exception.getExpectedLength())
assertEquals(0, exception.getActualLength())
assertEquals("", exception.getInput())
assertEquals(15, exception.getExpectedLength())
assertEquals(5, exception.getActualLength())
assertEquals("12345", exception.getInput())
assertEquals("12345", tokens.readString(0))
assertEquals("", tokens.readString(1))
assertEquals("12345", tokens.readString(0))
assertEquals("", tokens.readString(1))
assertEquals("12345", tokens.readString(0))
assertEquals("", tokens.readString(1))
assertEquals("", exception.getInput())
assertEquals(3, tokens.getFieldCount())
assertEquals("H1", tokens.readString(0))
assertEquals("12345", tokens.readString(1))
assertEquals("12345", tokens.readString(2))
assertEquals(3, tokens.getFieldCount())
assertEquals(line.substring(0, 10).trim(), tokens.readString(0))
assertEquals(line.substring(10, 25).trim(), tokens.readString(1))
assertEquals(line.substring(25).trim(), tokens.readString(2))
assertEquals(30, exception.getExpectedLength())
assertEquals(35, exception.getActualLength())
assertEquals(line, exception.getInput())
assertEquals(line.substring(0, 10).trim(), tokens.readString(0))
assertEquals(line.substring(10, 25).trim(), tokens.readString(1))
assertEquals(line.substring(25).trim(), tokens.readString(2))
assertEquals(line.substring(0, 10).trim(), tokens.readString(0))
assertEquals(line.substring(10, 25).trim(), tokens.readString(1))
assertEquals(line.substring(25, 30).trim(), tokens.readString(2))
assertEquals(3, tokens.getFieldCount())
assertEquals(line.substring(0, 10).trim(), tokens.readString(2))
assertEquals(line.substring(13, 28).trim(), tokens.readString(0))
assertEquals(line.substring(33, 38).trim(), tokens.readString(1))
assertEquals(4, tokens.getFieldCount())
assertEquals(line.substring(0, 5).trim(), tokens.readString(0))
assertEquals(line.substring(5, 15).trim(), tokens.readString(1))
assertEquals(line.substring(15, 25).trim(), tokens.readString(2))
assertEquals(line.substring(25).trim(), tokens.readString(3))
assertEquals(5, tokens.getFieldCount())
assertEquals(line.substring(0, 5).trim(), tokens.readString(0))
assertEquals(line.substring(5, 15).trim(), tokens.readString(1))
assertEquals(line.substring(15, 25).trim(), tokens.readString(2))
assertEquals(line.substring(25, 27).trim(), tokens.readString(3))
assertEquals(2, exception.getExpectedCount())
assertEquals(1, exception.getActualCount())
assertEquals("foo;bar", aggregator.aggregate(new String[] { "foo", "bar" }))
assertEquals("foo,bar", aggregator.aggregate(new String[] { "foo", "bar" }))
assertEquals("foo,,bar", aggregator.aggregate(new String[] { "foo", null, "bar" }))
assertEquals("foo", amqpItemReader.read())
assertEquals("foo", amqpItemReader.read())
assertEquals(message, amqpItemReader.read())
assertTrue(exception.getMessage().contains("wrong type"))
assertEquals("foo", amqpItemReader.read())
assertEquals("foo", amqpItemReader.read())
assertEquals(message, amqpItemReader.read())
assertEquals("amqpTemplate is required.", exception.getMessage())
assertEquals("amqpTemplate is required.", exception.getMessage())
assertEquals(ITEM_COUNT, JdbcTestUtils.countRowsInTable(jdbcTemplate, "T_FOOS"))
assertEquals(ITEM_COUNT, count)
assertEquals(ITEM_COUNT, results.size())
assertEquals(neededAutoCommit, autoCommitCaptor.getValue())
assertEquals(initialAutoCommit, autoCommitCaptor.getValue())
assertEquals(1, foo1.getValue())
assertEquals(2, foo2.getValue())
assertEquals(3, foo3.getValue())
assertEquals(4, foo4.getValue())
assertEquals(5, foo5.getValue())
assertNull(reader.read())
assertEquals(1, foo1.getValue())
assertEquals(2, foo2.getValue())
assertEquals(3, fooAfterRestart.getValue())
assertEquals(1, foo1.getValue())
assertEquals(2, foo2.getValue())
assertEquals(3, foo3.getValue())
assertEquals(4, foo4.getValue())
assertEquals(5, foo5.getValue())
assertNull(reader.read())
assertEquals(1, foo1.getValue())
assertEquals(2, foo2.getValue())
assertEquals(1, foo.getValue())
assertEquals(1, foo.getValue())
assertNotEquals(foo2, foo1)
assertNotEquals(foo2, foo3)
assertEquals(foo2, reader.read())
assertEquals(foo3, reader.read())
assertNotEquals(foo2, foo1)
assertNotEquals(foo2, foo3)
assertEquals(foo1, reader.read())
assertEquals(foo2, reader.read())
assertNotEquals(foo2, foo1)
assertNotEquals(foo2, foo3)
assertEquals(foo2, reader.read())
assertEquals(foo3, reader.read())
assertEquals(4, foo4.getValue())
assertEquals(5, foo5.getValue())
assertEquals(actualFoos, expectedFoos)
assertEquals(actualFoos, expectedFoos)
assertEquals(7, count)
assertEquals(2, foo2.getValue())
assertEquals(3, foo3.getValue())
assertEquals(4, foo4.getValue())
assertEquals(5, foo5.getValue())
assertNull(o)
assertEquals(4, foo4.getValue())
assertEquals(5, foo5.getValue())
assertNull(o)
assertEquals(5, foo5.getValue())
assertNull(o)
assertEquals(2, JdbcTestUtils.countRowsInTable(this.jdbcTemplate, "person"))
assertEquals(2, JdbcTestUtils.countRowsInTable(this.jdbcTemplate, "person"))
assertEquals("ERROR", exception.getMessage())
assertEquals("ERROR", exception.getMessage())
assertFalse(tested.isWrapperFor(Unsupported.class))
assertEquals("Unsupported class " + Unsupported.class.getSimpleName(), expected.getMessage())
assertTrue(tested.isWrapperFor(Supported.class))
assertEquals(ds, tested.unwrap(Supported.class))
assertTrue(tested.isWrapperFor(DataSource.class))
assertEquals(tested, tested.unwrap(DataSource.class))
assertTrue(tested.isWrapperFor(SmartDataSource.class))
assertEquals(tested, tested.unwrap(SmartDataSource.class))
assertEquals("ERROR", exception.getMessage())
assertNotNull(jdbcPagingItemReader)
assertEquals(1000, jdbcTemplate.getMaxRows())
assertEquals(100, jdbcTemplate.getFetchSize())
assertTrue(factory.isSupportedIncrementerType("db2"))
assertTrue(factory.isSupportedIncrementerType("db2zos"))
assertTrue(factory.isSupportedIncrementerType("mysql"))
assertTrue(factory.isSupportedIncrementerType("derby"))
assertTrue(factory.isSupportedIncrementerType("oracle"))
assertTrue(factory.isSupportedIncrementerType("postgres"))
assertTrue(factory.isSupportedIncrementerType("hsql"))
assertTrue(factory.isSupportedIncrementerType("sqlserver"))
assertTrue(factory.isSupportedIncrementerType("sybase"))
assertTrue(factory.isSupportedIncrementerType("sqlite"))
assertTrue(factory.isSupportedIncrementerType("hana"))
assertTrue(factory.isSupportedIncrementerType("mariadb"))
assertFalse(factory.isSupportedIncrementerType("invalidtype"))
assertTrue(factory.getIncrementer("db2", "NAME") instanceof Db2LuwMaxValueIncrementer)
assertTrue(factory.getIncrementer("db2zos", "NAME") instanceof Db2MainframeMaxValueIncrementer)
assertTrue(factory.getIncrementer("mysql", "NAME") instanceof MySQLMaxValueIncrementer)
assertTrue(factory.getIncrementer("mariadb", "NAME") instanceof MariaDBSequenceMaxValueIncrementer)
assertTrue(factory.getIncrementer("oracle", "NAME") instanceof OracleSequenceMaxValueIncrementer)
assertTrue(factory.getIncrementer("derby", "NAME") instanceof DerbyMaxValueIncrementer)
assertTrue(factory.getIncrementer("hsql", "NAME") instanceof HsqlMaxValueIncrementer)
assertTrue(factory.getIncrementer("postgres", "NAME") instanceof PostgresSequenceMaxValueIncrementer)
assertTrue(factory.getIncrementer("sqlserver", "NAME") instanceof SqlServerSequenceMaxValueIncrementer)
assertTrue(factory.getIncrementer("sybase", "NAME") instanceof SybaseMaxValueIncrementer)
assertTrue(factory.getIncrementer("sqlite", "NAME") instanceof SqliteMaxValueIncrementer)
assertTrue(factory.getIncrementer("hana", "NAME") instanceof HanaSequenceMaxValueIncrementer)
assertEquals(sql, s)
assertEquals(sql, s)
assertEquals(sql, s)
assertEquals(sql, s)
assertEquals("SELECT owner.id as ownerid, first_name, last_name, dog_name FROM dog_owner owner INNER JOIN dog ON owner.id = dog.id ORDER BY owner.id ASC LIMIT 5", firstPage)
assertEquals("SELECT owner.id as ownerid, first_name, last_name, dog_name FROM dog_owner owner INNER JOIN dog ON owner.id = dog.id WHERE ((owner.id > ?)) ORDER BY owner.id ASC LIMIT 5", remainingPagesQuery)
assertEquals("SELECT FOO FROM BAR ORDER BY ID ASC LIMIT 100", SqlPagingQueryUtils.generateLimitSqlQuery(qp, false, "LIMIT 100"))
assertEquals("SELECT FOO FROM BAR WHERE ((ID > ?)) ORDER BY ID ASC LIMIT 100", SqlPagingQueryUtils.generateLimitSqlQuery(qp, true, "LIMIT 100"))
assertEquals("SELECT FOO FROM BAR WHERE BAZ IS NOT NULL ORDER BY ID ASC LIMIT 100", SqlPagingQueryUtils.generateLimitSqlQuery(qp, false, "LIMIT 100"))
assertEquals("SELECT FOO FROM BAR WHERE (BAZ IS NOT NULL) AND ((ID > ?)) ORDER BY ID ASC LIMIT 100", SqlPagingQueryUtils.generateLimitSqlQuery(qp, true, "LIMIT 100"))
assertEquals("SELECT TOP 100 FOO FROM BAR ORDER BY ID ASC", SqlPagingQueryUtils.generateTopSqlQuery(qp, false, "TOP 100"))
assertEquals("SELECT TOP 100 FOO FROM BAR WHERE ((ID > ?)) ORDER BY ID ASC", SqlPagingQueryUtils.generateTopSqlQuery(qp, true, "TOP 100"))
assertEquals("SELECT TOP 100 FOO FROM BAR WHERE BAZ IS NOT NULL ORDER BY ID ASC", SqlPagingQueryUtils.generateTopSqlQuery(qp, false, "TOP 100"))
assertEquals("SELECT TOP 100 FOO FROM BAR WHERE (BAZ IS NOT NULL) AND ((ID > ?)) ORDER BY ID ASC", SqlPagingQueryUtils.generateTopSqlQuery(qp, true, "TOP 100"))
assertEquals("SELECT * FROM (SELECT FOO FROM BAR ORDER BY ID ASC) WHERE ROWNUMBER <= 100", SqlPagingQueryUtils.generateRowNumSqlQuery(qp, false, "ROWNUMBER <= 100"))
assertEquals("SELECT * FROM (SELECT FOO FROM BAR ORDER BY ID ASC) WHERE ROWNUMBER <= 100 AND ((ID > ?))", SqlPagingQueryUtils.generateRowNumSqlQuery(qp, true, "ROWNUMBER <= 100"))
assertEquals("SELECT * FROM (SELECT FOO FROM BAR WHERE BAZ IS NOT NULL ORDER BY ID ASC) WHERE ROWNUMBER <= 100", SqlPagingQueryUtils.generateRowNumSqlQuery(qp, false, "ROWNUMBER <= 100"))
assertEquals("SELECT * FROM (SELECT FOO FROM BAR WHERE BAZ IS NOT NULL ORDER BY ID ASC) WHERE ROWNUMBER <= 100 AND ((ID > ?))", SqlPagingQueryUtils.generateRowNumSqlQuery(qp, true, "ROWNUMBER <= 100"))
assertEquals("SELECT TOP 100 FOO FROM BAR ORDER BY ID DESC", SqlPagingQueryUtils.generateTopSqlQuery(qp, false, "TOP 100"))
assertEquals("SELECT TOP 100 FOO FROM BAR WHERE ((ID < ?)) ORDER BY ID DESC", SqlPagingQueryUtils.generateTopSqlQuery(qp, true, "TOP 100"))
assertEquals("SELECT TOP 100 FOO FROM BAR WHERE BAZ IS NOT NULL ORDER BY ID DESC", SqlPagingQueryUtils.generateTopSqlQuery(qp, false, "TOP 100"))
assertEquals("SELECT TOP 100 FOO FROM BAR WHERE (BAZ IS NOT NULL) AND ((ID < ?)) ORDER BY ID DESC", SqlPagingQueryUtils.generateTopSqlQuery(qp, true, "TOP 100"))
assertEquals("SELECT * FROM (SELECT FOO FROM BAR ORDER BY ID DESC) WHERE ROWNUMBER <= 100", SqlPagingQueryUtils.generateRowNumSqlQuery(qp, false, "ROWNUMBER <= 100"))
assertEquals("SELECT * FROM (SELECT FOO FROM BAR ORDER BY ID DESC) WHERE ROWNUMBER <= 100 AND ((ID < ?))", SqlPagingQueryUtils.generateRowNumSqlQuery(qp, true, "ROWNUMBER <= 100"))
assertEquals("SELECT * FROM (SELECT FOO FROM BAR WHERE BAZ IS NOT NULL ORDER BY ID DESC) WHERE ROWNUMBER <= 100", SqlPagingQueryUtils.generateRowNumSqlQuery(qp, false, "ROWNUMBER <= 100"))
assertEquals("SELECT * FROM (SELECT FOO FROM BAR WHERE BAZ IS NOT NULL ORDER BY ID DESC) WHERE ROWNUMBER <= 100 AND ((ID < ?))", SqlPagingQueryUtils.generateRowNumSqlQuery(qp, true, "ROWNUMBER <= 100"))
assertEquals(sql, s)
assertEquals(sql, s)
assertEquals(sql, s)
assertEquals(sql, s)
assertEquals(sql, s)
assertEquals(sql, s)
assertEquals(sql, s)
assertEquals(sql, s)
assertEquals("SELECT owner.id as ownerid, first_name, last_name, dog_name FROM dog_owner owner INNER JOIN dog ON owner.id = dog.id ORDER BY owner.id ASC LIMIT 5", firstPage)
assertEquals("SELECT owner.id as ownerid, first_name, last_name, dog_name FROM dog_owner owner INNER JOIN dog ON owner.id = dog.id WHERE ((owner.id > ?)) ORDER BY owner.id ASC LIMIT 5", remainingPagesQuery)
assertEquals(sql, s)
assertEquals(sql, s)
assertEquals(sql, s)
assertEquals(sql, s)
assertEquals(sql, s)
assertEquals(sql2, s2)
assertEquals(sql, s)
assertEquals(sql, s)
assertEquals(sql, s)
assertEquals(sql, s)
assertEquals(sql, s)
assertEquals(sql, s)
assertEquals(sql, s)
assertEquals(sql, s)
assertEquals(sql, s)
assertEquals(sql, s)
assertEquals(sql, s)
assertEquals(actualFoos, expectedFoos)
assertNotNull(provider)
assertEquals(PagingQueryProvider.class, factory.getObjectType())
assertTrue(factory.isSingleton())
assertNotNull(hibernateQueryProvider.createQuery())
assertNotNull(hibernateQueryProvider.createQuery())
assertEquals(sql, s)
assertEquals(sql, s)
assertEquals(sql, s)
assertEquals(sql, s)
assertEquals(sql, s)
assertEquals(sql, s)
assertEquals(sql, s)
assertEquals(sql, s)
assertEquals(sql, s)
assertEquals(sql, s)
assertEquals(sql, s)
assertEquals(sql, s)
assertEquals(sql, s)
assertEquals(sql, s)
assertEquals(sql, s)
assertEquals(sql, s)
assertEquals(getFirstPageSqlWithMultipleSortKeys(), s)
assertEquals(getRemainingSqlWithMultipleSortKeys(), s)
assertEquals("id, 'yes', false", pagingQueryProvider.getSelectClause())
assertEquals("test.verification_table", pagingQueryProvider.getFromClause())
assertEquals("TRUE", pagingQueryProvider.getWhereClause())
assertEquals("id, 'yes', false", pagingQueryProvider.getSelectClause())
assertEquals("test.verification_table", pagingQueryProvider.getFromClause())
assertEquals("TRUE", pagingQueryProvider.getWhereClause())
assertEquals("id, 'yes', false", pagingQueryProvider.getSelectClause())
assertEquals("test.verification_table", pagingQueryProvider.getFromClause())
assertEquals("TRUE", pagingQueryProvider.getWhereClause())
assertEquals(sql, s)
assertEquals(sql, s)
assertEquals(sql, s)
assertEquals(sql, s)
assertEquals("SELECT owner.id as ownerid, first_name, last_name, dog_name FROM dog_owner owner INNER JOIN dog ON owner.id = dog.id ORDER BY owner.id ASC LIMIT 5", firstPage)
assertEquals("SELECT owner.id as ownerid, first_name, last_name, dog_name FROM dog_owner owner INNER JOIN dog ON owner.id = dog.id WHERE ((owner.id > ?)) ORDER BY owner.id ASC LIMIT 5", remainingPagesQuery)
assertEquals(1, mvi.getNextKey())
assertEquals(2, mvi.getNextKey())
assertEquals(3, mvi.getNextKey())
assertEquals(1, JdbcTestUtils.countRowsInTable(template, "max_value"))
assertEquals(sql, s)
assertEquals(sql, s)
assertEquals(sql, s)
assertEquals(sql, s)
assertEquals(0, JdbcParameterUtils.countParameterPlaceholders(null, null))
assertEquals(0, JdbcParameterUtils.countParameterPlaceholders("", null))
assertEquals(1, JdbcParameterUtils.countParameterPlaceholders("?", null))
assertEquals(1, JdbcParameterUtils.countParameterPlaceholders("The \"big\" ? 'bad wolf'", null))
assertEquals(2, JdbcParameterUtils.countParameterPlaceholders("The big ?? bad wolf", null))
assertEquals(3, JdbcParameterUtils.countParameterPlaceholders("The big ? ? bad ? wolf", null))
assertEquals(1, JdbcParameterUtils.countParameterPlaceholders("The \"big?\" 'ba''ad?' ? wolf", null))
assertEquals(1, JdbcParameterUtils.countParameterPlaceholders(":parameter", null))
assertEquals(1, JdbcParameterUtils.countParameterPlaceholders("The \"big\" :parameter 'bad wolf'", null))
assertEquals(1, JdbcParameterUtils.countParameterPlaceholders("The big :parameter :parameter bad wolf", null))
assertEquals(2, JdbcParameterUtils.countParameterPlaceholders("The big :parameter :newpar :parameter bad wolf", null))
assertEquals(2, JdbcParameterUtils.countParameterPlaceholders("The big :parameter, :newpar, :parameter bad wolf", null))
assertEquals(1, JdbcParameterUtils.countParameterPlaceholders("The \"big:\" 'ba''ad:p' :parameter wolf", null))
assertEquals(1, JdbcParameterUtils.countParameterPlaceholders("&parameter", null))
assertEquals(1, JdbcParameterUtils.countParameterPlaceholders("The \"big\" &parameter 'bad wolf'", null))
assertEquals(1, JdbcParameterUtils.countParameterPlaceholders("The big &parameter &parameter bad wolf", null))
assertEquals(2, JdbcParameterUtils.countParameterPlaceholders("The big &parameter &newparameter &parameter bad wolf", null))
assertEquals(2, JdbcParameterUtils.countParameterPlaceholders("The big &parameter, &newparameter, &parameter bad wolf", null))
assertEquals(1, JdbcParameterUtils.countParameterPlaceholders("The \"big &x  \" 'ba''ad&p' &parameter wolf", null))
assertEquals(2, JdbcParameterUtils.countParameterPlaceholders("The big :parameter, &newparameter, &parameter bad wolf", null))
assertEquals(2, JdbcParameterUtils.countParameterPlaceholders("The big :parameter, &sameparameter, &sameparameter bad wolf", null))
assertEquals(2, JdbcParameterUtils.countParameterPlaceholders("The big :parameter, :sameparameter, :sameparameter bad wolf", null))
assertEquals(0, JdbcParameterUtils.countParameterPlaceholders("xxx & yyy", null))
assertEquals(3, JdbcParameterUtils.countParameterPlaceholders("select :par1, :par2 :par3", l))
assertEquals(3, l.size())
assertEquals(1, foo1[0])
assertEquals(1, foo1)
assertEquals(itemCount, JdbcTestUtils.countRowsInTable(jdbcTemplate, "T_FOOS"))
assertNull(item)
assertNull(item)
assertEquals(2, list.size())
assertTrue(list.contains("SQL"))
assertEquals(2, list.size())
assertTrue(list.contains("SQL"))
assertEquals("bar", exception.getMessage())
assertEquals(2, list.size())
assertEquals(4, list.size())
assertTrue(list.contains("SQL"))
assertTrue(list.contains("foo"))
assertNotNull(ReflectionTestUtils.getField(helper, "statelessSession"))
assertNull(ReflectionTestUtils.getField(helper, "statelessSession"))
assertEquals(ITEM_COUNT, JdbcTestUtils.countRowsInTable(jdbcTemplate, "T_FOOS"))
assertEquals(ITEM_COUNT, count)
assertEquals(ITEM_COUNT, results.size())
assertNotNull(author)
assertNotNull(author)
assertNotNull(author)
assertNotNull(author)
assertNotNull(author)
assertEquals(1, captor.getValue().length)
assertEquals("bar", results.get("foo"))
assertEquals(1, captor.getValue().length)
assertEquals("bar", results.getValue("foo"))
assertEquals("ERROR", exception.getMessage())
assertNull(reader.read())
assertEquals(3, item1.getId())
assertEquals("bar3", item1.getName())
assertEquals(3, item1.getValue())
assertEquals(4, item2.getId())
assertEquals("bar4", item2.getName())
assertEquals(4, item2.getValue())
assertEquals(2, executionContext.size())
assertEquals(5, ReflectionTestUtils.getField(reader, "pageSize"))
assertEquals(false, ReflectionTestUtils.getField(helper, "useStatelessSession"))
assertEquals(3, i)
assertEquals(0, executionContext.size())
assertEquals(5, i)
assertEquals("fetchSize must not be negative", exception.getMessage())
assertEquals("A SessionFactory must be provided", exception.getMessage())
assertEquals("A name is required when saveState is set to true", exception.getMessage())
assertEquals("queryString or queryName must be set", exception.getMessage())
assertEquals("SessionFactory must be provided", exception.getMessage())
assertEquals(1, item1.getId())
assertEquals("bar1", item1.getName())
assertEquals(1, item1.getValue())
assertEquals(3, ReflectionTestUtils.getField(reader, "refCursorPosition"))
assertEquals(preparedStatementSetter, ReflectionTestUtils.getField(reader, "preparedStatementSetter"))
assertEquals(parameters, ReflectionTestUtils.getField(reader, "parameters"))
assertEquals(5, ReflectionTestUtils.getField(reader, "fetchSize"))
assertEquals(6, ReflectionTestUtils.getField(reader, "currentItemCount"))
assertEquals(7, ReflectionTestUtils.getField(reader, "maxItemCount"))
assertEquals(8, ReflectionTestUtils.getField(reader, "queryTimeout"))
assertEquals(9, ReflectionTestUtils.getField(reader, "maxRows"))
assertTrue((Boolean) ReflectionTestUtils.getField(reader, "useSharedExtendedConnection"))
assertTrue((Boolean) ReflectionTestUtils.getField(reader, "function"))
assertTrue((Boolean) ReflectionTestUtils.getField(reader, "driverSupportsAbsolute"))
assertFalse((Boolean) ReflectionTestUtils.getField(reader, "ignoreWarnings"))
assertEquals(0, executionContext.size())
assertEquals("A name is required when saveSate is set to true", exception.getMessage())
assertEquals("The name of the stored procedure must be provided", exception.getMessage())
assertEquals("A datasource is required", exception.getMessage())
assertEquals("A rowmapper is required", exception.getMessage())
assertNull(reader.read())
assertNull(reader.read())
assertEquals(0, executionContext.size())
assertNull(reader.read())
assertNull(reader.read())
assertNull(reader.read())
assertNull(reader.read())
assertNull(reader.read())
assertNull(reader.read())
assertEquals(1, ReflectionTestUtils.getField(reader, "fetchSize"))
assertEquals(2, ReflectionTestUtils.getField(reader, "queryTimeout"))
assertTrue((boolean) ReflectionTestUtils.getField(reader, "ignoreWarnings"))
assertTrue((boolean) ReflectionTestUtils.getField(reader, "driverSupportsAbsolute"))
assertTrue((boolean) ReflectionTestUtils.getField(reader, "connectionAutoCommit"))
assertTrue((boolean) ReflectionTestUtils.getField(reader, "verifyCursorPosition"))
assertEquals("A name is required when saveState is set to true", exception.getMessage())
assertEquals("A query is required", exception.getMessage())
assertEquals("A datasource is required", exception.getMessage())
assertEquals("A rowmapper is required", exception.getMessage())
assertEquals(first, item.getFirst())
assertEquals(second, item.getSecond())
assertEquals(third, item.getThird())
assertNull(reader.read())
assertEquals(3, item1.getId())
assertEquals("bar3", item1.getName())
assertEquals(3, item1.getValue())
assertEquals(4, item2.getId())
assertEquals("bar4", item2.getName())
assertEquals(4, item2.getValue())
assertEquals(2, executionContext.size())
assertEquals(3, i)
assertEquals(0, executionContext.size())
assertEquals(5, i)
assertEquals("An EntityManagerFactory is required", exception.getMessage())
assertEquals("A name is required when saveState is set to true", exception.getMessage())
assertEquals("Query string is required when queryProvider is null", exception.getMessage())
assertNull(reader.read())
assertEquals(3, item1.getId())
assertEquals(10, item1.getFirst())
assertEquals("11", item1.getSecond())
assertEquals("12", item1.getThird())
assertEquals(2, (int) ReflectionTestUtils.getField(reader, "fetchSize"))
assertEquals(2, executionContext.size())
assertNull(reader.read())
assertEquals(3, item1.getId())
assertEquals(10, item1.getFirst())
assertEquals("11", item1.getSecond())
assertEquals("12", item1.getThird())
assertNull(reader.read())
assertEquals(4, item1.getId())
assertEquals(13, item1.getFirst())
assertEquals("14", item1.getSecond())
assertEquals("15", item1.getThird())
assertEquals(3, item2.getId())
assertEquals(10, item2.getFirst())
assertEquals("11", item2.getSecond())
assertEquals("12", item2.getThird())
assertNull(reader.read())
assertEquals(4, item1.getId())
assertEquals(13, item1.getFirst())
assertEquals("14", item1.getSecond())
assertEquals("15", item1.getThird())
assertEquals(3, item2.getId())
assertEquals(10, item2.getFirst())
assertEquals("11", item2.getSecond())
assertEquals("12", item2.getThird())
assertEquals(0, executionContext.size())
assertNull(reader.read())
assertEquals(2, item1.getId())
assertEquals(7, item1.getFirst())
assertEquals("8", item1.getSecond())
assertEquals("9", item1.getThird())
assertNull(reader.read())
assertEquals(3, item1.getId())
assertEquals(10, item1.getFirst())
assertEquals("11", item1.getSecond())
assertEquals("12", item1.getThird())
assertEquals("dataSource is required", exception.getMessage())
assertEquals("pageSize must be greater than zero", exception.getMessage())
assertEquals("dataSource is required", exception.getMessage())
assertEquals("A name is required when saveState is set to true", exception.getMessage())
assertEquals("selectClause is required when not providing a PagingQueryProvider", exception.getMessage())
assertEquals("fromClause is required when not providing a PagingQueryProvider", exception.getMessage())
assertEquals("sortKeys are required when not providing a PagingQueryProvider", exception.getMessage())
assertNull(reader.read())
assertEquals(3, item1.getId())
assertEquals("bar3", item1.getName())
assertEquals(3, item1.getValue())
assertEquals(4, item2.getId())
assertEquals("bar4", item2.getName())
assertEquals(4, item2.getValue())
assertEquals(2, executionContext.size())
assertEquals(5, ReflectionTestUtils.getField(reader, "pageSize"))
assertFalse((Boolean) ReflectionTestUtils.getField(reader, "transacted"))
assertEquals(3, i)
assertEquals(0, executionContext.size())
assertEquals(5, i)
assertEquals("pageSize must be greater than zero", exception.getMessage())
assertEquals("An EntityManagerFactory is required", exception.getMessage())
assertEquals("A name is required when saveState is set to true", exception.getMessage())
assertEquals("Query string is required when queryProvider is null", exception.getMessage())
assertSame(template, usedTemplate)
assertEquals("Either a DataSource or a NamedParameterJdbcTemplate is required", exception.getMessage())
assertEquals("A SQL statement is required", exception.getMessage())
assertEquals("Either an item can be mapped via db column or via bean spec, can't be both", exception.getMessage())
assertEquals(1, (int) template.queryForObject("select count(*) from foo where first = ? and second = ? and third = ?", Integer.class, i, i1, nine))
assertNull(reader.read())
assertEquals(3, item1.getId())
assertEquals("bar3", item1.getName())
assertEquals(3, item1.getValue())
assertEquals(4, item2.getId())
assertEquals("bar4", item2.getName())
assertEquals(4, item2.getValue())
assertEquals(2, executionContext.size())
assertEquals(3, i)
assertEquals(0, executionContext.size())
assertEquals(5, i)
assertEquals(5, i)
assertEquals("fetchSize must not be negative", exception.getMessage())
assertEquals("A SessionFactory must be provided", exception.getMessage())
assertEquals("A name is required when saveState is set to true.", exception.getMessage())
assertEquals("A HibernateQueryProvider, queryName, queryString, " + "or both the nativeQuery and entityClass must be configured", exception.getMessage())
assertEquals("EntityManagerFactory must be provided", exception.getMessage())
assertEquals(9, JdbcTestUtils.countRowsInTable(jdbcTemplate, "T_FOOS"))
assertTrue(total > pageSize)
assertEquals(pageSize, list.size())
assertEquals(total, count)
assertEquals(pageSize, list.size())
assertEquals(total, count)
assertEquals(1, foo1.getValue())
assertEquals(2, foo2.getValue())
assertEquals(3, foo3.getValue())
assertEquals(4, foo4.getValue())
assertEquals(5, foo5.getValue())
assertNull(itemReader.read())
assertEquals(1, foo1.getValue())
assertEquals(2, foo2.getValue())
assertEquals(3, fooAfterRestart.getValue())
assertEquals(1, foo1.getValue())
assertEquals(2, foo2.getValue())
assertEquals(1, foo.getValue())
assertEquals(1, foo.getValue())
assertEquals(1, foo1.getValue())
assertEquals(2, foo2.getValue())
assertEquals(3, fooAfterRestart.getValue())
assertEquals(1, foo1.getValue())
assertEquals(2, foo2.getValue())
assertEquals(3, foo3.getValue())
assertEquals(3, fooAfterRestart.getValue())
assertEquals(1, foo1.getValue())
assertEquals(2, foo2.getValue())
assertEquals(3, fooAfterRestart.getValue())
assertEquals("uniqueName.key", tested.getKey("key"))
assertTrue(file.exists())
assertTrue(file.exists())
assertTrue(size != newSize)
assertEquals(0, newSize)
assertTrue(file.exists())
assertTrue(policy.isComplete(context, dummy))
assertTrue(policy.isComplete(context, dummy))
assertFalse(policy.isComplete(context, dummy))
assertTrue(policy.isComplete(context, null))
assertFalse(policy.isComplete(context, dummy))
assertTrue(policy.isComplete(context, dummy))
assertFalse(policy.isComplete(context, dummy))
assertNotNull(context)
assertFalse(policy.isComplete(context))
assertEquals(0, context.getStartedCount())
assertFalse(policy.isComplete(context))
assertFalse(policy.isComplete(context, null))
assertEquals(1, context.getStartedCount())
assertTrue(policy.isComplete(context))
assertTrue(policy.isComplete(context, null))
assertFalse(policy.isComplete(context))
assertTrue(policy.isComplete(context))
assertFalse(policy.isComplete(context, null))
assertTrue(policy.isComplete(policy.start(null), result))
assertFalse(policy.isComplete(context))
assertTrue(policy.isComplete(context))
assertTrue(policy.isComplete(context))
assertTrue(policy.isComplete(context))
assertTrue(policy.isComplete(context, null))
assertTrue(policy.isComplete(context, RepeatStatus.FINISHED))
assertFalse(policy.isComplete(context))
assertTrue(policy.isComplete(context))
assertFalse(policy.isComplete(context))
assertFalse(policy.isComplete(context))
assertFalse(policy.isComplete(context))
assertTrue(policy.isComplete(context))
assertTrue(context.hasAttribute("FOO"))
assertTrue(parent.hasAttribute("FOO"))
assertEquals(0, counter.getCount())
assertEquals(1, counter.getCount())
assertEquals(3, counter.getCount())
assertFalse(context.hasAttribute("FOO"))
assertTrue(parent.hasAttribute("FOO"))
assertEquals(0, counter.getCount())
assertEquals(1, counter.getCount())
assertEquals(3, counter.getCount())
assertEquals(accessor, another)
assertNotNull(accessor.toString())
assertNotNull(accessor.toString())
assertEquals(2, list.size())
assertTrue(list.contains("foo"))
assertEquals(accessor, another)
assertEquals(accessor, accessor)
assertFalse(accessor.equals(another))
assertEquals(accessor, another)
assertEquals("bar", accessor.getAttribute("foo"))
assertEquals("bar", accessor.setAttributeIfAbsent("foo", "spam"))
assertNull(accessor.setAttributeIfAbsent("foo", "bar"))
assertEquals("bar", accessor.getAttribute("foo"))
assertTrue(accessor.hasAttribute("foo"))
assertEquals("bar", accessor.getAttribute("foo"))
assertNull(accessor.getAttribute("foo"))
assertEquals(1, list.size())
assertEquals("bar", list.get(0))
assertEquals(1, list.size())
assertEquals("fail!", exception.getMessage())
assertEquals(2, list.size())
assertTrue(list.contains("bar"))
assertTrue(list.contains("spam"))
assertEquals(3, target.count)
assertEquals(1, target.count)
assertEquals(1, calls.size())
assertEquals(1, calls.size())
assertEquals(2, target.count)
assertEquals("Duh", exception.getMessage().substring(0, 3))
assertEquals("Duh", error.getMessage().substring(0, 3))
assertTrue(service.isContinuable())
assertEquals(2, target.count)
assertFalse(service.isContinuable())
assertEquals(1, target.count)
assertEquals(2, target.count)
assertEquals(2, list.size())
assertEquals(0, count)
assertEquals(2, count)
assertTrue(list.contains("foo"))
assertTrue(list.contains("bar"))
assertNull(text)
assertEquals(0, count)
assertEquals(2, count)
assertNull(foo)
assertEquals(0, count)
assertEquals(2, list.size())
assertNull(foo)
assertEquals(2, count)
assertTrue(list.size() >= 1)
assertEquals(0, count)
assertTrue(queue.isExpecting())
assertTrue(queue.isEmpty())
assertFalse(queue.isEmpty())
assertTrue(queue.take().getResult().isContinuable())
assertFalse(queue.isExpecting())
assertFalse(queue.isEmpty())
assertTrue(queue.take().getResult().isContinuable())
assertFalse(queue.take().getResult().isContinuable())
assertEquals(context, RepeatSynchronizationManager.getContext())
assertNull(RepeatSynchronizationManager.getContext())
assertFalse(RepeatSynchronizationManager.getContext().isCompleteOnly())
assertTrue(RepeatSynchronizationManager.getContext().isCompleteOnly())
assertNull(RepeatSynchronizationManager.getContext())
assertFalse(child.isCompleteOnly())
assertTrue(child.isCompleteOnly())
assertTrue(context.isCompleteOnly())
assertEquals(context, RepeatSynchronizationManager.getContext())
assertNull(RepeatSynchronizationManager.getContext())
assertEquals("foo!", exception.getMessage())
assertNotNull(context)
assertSame(context, RepeatSynchronizationManager.getContext())
assertNotNull(context)
assertSame(context, RepeatSynchronizationManager.getContext())
assertNotSame(threadName, Thread.currentThread().getName())
assertEquals(NUMBER_OF_ITEMS, processor.count)
assertTrue(threadNames.size() > 1)
assertEquals(NUMBER_OF_ITEMS, processor.count)
assertTrue(threadNames.size() > 1)
assertTrue(frequency <= throttleLimit)
assertNotSame(threadName, Thread.currentThread().getName())
assertEquals(NUMBER_OF_ITEMS, processor.count)
assertTrue(threadNames.size() >= 1)
assertEquals(total, items.size() - frequency)
assertTrue(frequency > 1)
assertTrue(frequency <= throttleLimit + 1)
assertEquals(total, items.size() - frequency)
assertTrue(frequency > 1)
assertTrue(frequency <= throttleLimit + 1)
assertEquals(total, items.size() - frequency)
assertTrue(frequency <= throttleLimit + 1)
assertEquals(total, items.size() - frequency)
assertTrue(frequency <= throttleLimit + 1)
assertEquals(10, items.size() - frequency)
assertEquals(0, frequency)
assertEquals("Planned", exception.getMessage())
assertEquals(0, frequency)
assertEquals("Planned", error.getMessage())
assertTrue(queue.isExpecting())
assertTrue(queue.isEmpty())
assertFalse(queue.isEmpty())
assertEquals("foo", queue.take())
assertFalse(queue.isExpecting())
assertFalse(queue.isExpecting())
assertFalse(queue.isExpecting())
assertEquals("foo", queue.take())
assertTrue(queue.isExpecting())
assertDoesNotThrow(() -> new TaskExecutorRepeatTemplate().setThrottleLimit(-1))
assertEquals(NUMBER_OF_ITEMS, processor.count)
assertEquals(3, count)
assertFalse(result.isContinuable())
assertEquals(NUMBER_OF_ITEMS, processor.count)
assertFalse(result.isContinuable())
assertEquals(NUMBER_OF_ITEMS, processor.count)
assertEquals(NUMBER_OF_ITEMS, processor.count)
assertEquals(2, processor.count)
assertEquals("foo!", exception.getMessage())
assertEquals(1, count)
assertEquals(1, count)
assertEquals(1, list.size())
assertEquals("foo", exception.getMessage())
assertEquals(1, count)
assertEquals(1, list.size())
assertEquals("foo", exception.getMessage())
assertEquals(1, count)
assertEquals(1, list.size())
assertEquals(2, processor.count)
assertTrue(result.isContinuable())
assertEquals(2, processor.count)
assertTrue(result.isContinuable())
assertSame(context, RepeatSynchronizationManager.getContext())
assertNotNull(context)
assertSame(context, RepeatSynchronizationManager.getContext())
assertEquals(2, count)
assertEquals(2, count)
fail("Nested batch should not have been executed")
assertEquals(1, count)
assertSame(context, RepeatSynchronizationManager.getContext())
assertEquals(4, count)
assertEquals(NUMBER_OF_ITEMS, processor.count)
assertFalse(result.isContinuable())
assertEquals("Barf second try count=2", exception.getMessage())
assertEquals("Barf second try count=2", exception.getMessage())
assertEquals(2, processor.count)
assertFalse(result.isContinuable())
assertSame(exception, throwable)
assertSame(exception, throwable)
assertSame(exception, expected.getCause())
assertTrue(listener.called)
assertTrue(exHandler.called)
assertEquals(2, count)
assertFalse(result.isContinuable())
assertEquals(2, list.size())
assertEquals(1, list.size())
assertEquals(1, list.size())
assertEquals(1, list.size())
assertEquals(2, count)
assertEquals("[1, 2, 1, 2]", calls.toString())
assertEquals(0, count)
assertEquals("[1]", calls.toString())
assertEquals(2, count)
assertEquals("[2, 1]", calls.toString())
assertEquals(0, count)
assertEquals("[1, 2]", calls.toString())
assertEquals(1, count)
assertEquals("[1]", calls.toString())
assertEquals(2, count)
assertEquals("[2, 1]", calls.toString())
assertEquals(0, count)
assertEquals("[2, 1]", calls.toString())
assertEquals(0, count)
assertEquals("[2]", calls.toString())
assertEquals("Bogus", exception.getMessage())
assertEquals(0, count)
assertEquals("2", calls.get(0))
assertEquals("2", calls.get(calls.size() - 1))
assertFalse(calls.contains("1"))
assertEquals(fails.size(), calls.size())
assertEquals("Foo", exception.getMessage())
assertEquals("Foo", error.getMessage())
assertEquals("Foo", exception.getMessage())
assertEquals("Foo", error.getMessage())
assertNotNull(counter)
assertEquals(1, counter.get())
assertEquals("Foo", exception.getMessage())
assertDoesNotThrow(() -> handler.handleException(context, new RuntimeException("Foo")))
assertEquals("Foo", exception.getMessage())
assertEquals("Foo", exception.getMessage())
assertEquals("Foo", error.getMessage())
assertNotNull(writer.toString())
assertNotNull(writer.toString())
assertNotNull(writer.toString())
assertSame(expected, throwable)
assertSame(expected, throwable)
assertDoesNotThrow(() -> handler.handleException(new RepeatContextSupport(null), new RuntimeException("foo")))
assertDoesNotThrow(() -> {
    RepeatContextSupport context = new RepeatContextSupport(parent);
    handler.handleException(context, throwable);
    context = new RepeatContextSupport(parent);
    handler.handleException(context, throwable);
})
assertSame(throwable, expected)
assertEquals("above exception limit", expected.getMessage())
assertEquals("foo", expected.getMessage())
assertDoesNotThrow(() -> handler.handleException(null, new RuntimeException()))
assertEquals(2, list.size())
assertEquals("1", list.get(0))
assertEquals("2", list.get(1))
assertEquals("foo", value)
assertEquals("foo", value)
assertEquals("Expected", exception.getCause().getMessage())
assertEquals(0, count)
assertEquals("Rollback!", exception.getMessage())
assertEquals(1, count)
assertEquals("[]", msgs.toString())
assertEquals("foo", result)
assertEquals(1, recovered.size())
assertEquals(0, count)
assertEquals("[]", msgs.toString())
assertNotNull(text)
assertEquals(0, count)
assertNotNull(text)
assertEquals(1, count)
assertEquals("[]", msgs.toString())
assertEquals(1, count)
assertEquals("[]", msgs.toString())
assertEquals(1, count)
assertEquals(0, count)
assertEquals("[foo]", msgs.toString())
assertEquals(1, count)
assertEquals("[]", msgs.toString())
assertEquals("Rollback!", exception.getMessage())
assertEquals(0, count)
assertTrue(msgs.contains("foo"))
assertEquals(0, count)
assertEquals(2, recovered.size())
assertEquals(0, count)
assertEquals("[]", msgs.toString())
assertEquals("[foo, bar]", recovered.toString())
assertEquals(DatabaseType.H2, DatabaseType.fromMetaData(dataSource))
assertEquals(DatabaseType.DERBY, DatabaseType.fromMetaData(dataSource))
assertEquals(0, comparator.compare(new FileSystemResource(FILE_PATH), new FileSystemResource(FILE_PATH)))
assertTrue(temp.exists())
assertEquals(1, comparator.compare(new FileSystemResource(temp), new FileSystemResource(FILE_PATH)))
assertEquals("foo", System.getProperty(SIMPLE_NAME))
assertEquals("foo", System.getProperty(SystemPropertyInitializer.ENVIRONMENT))
assertEquals(expectedProperties, props)
assertEquals(1, StringUtils.countOccurrencesOf(value, "\n"))
assertEquals(storedProps, props)
Assertions.assertTrue(properties.isEmpty())
assertEquals("", string)
assertEquals("C:/test", props.getProperty("test"))
assertEquals(DERBY, fromProductName("Apache Derby"))
assertEquals(DB2, fromProductName("DB2"))
assertEquals(DB2VSE, fromProductName("DB2VSE"))
assertEquals(DB2ZOS, fromProductName("DB2ZOS"))
assertEquals(DB2AS400, fromProductName("DB2AS400"))
assertEquals(HSQL, fromProductName("HSQL Database Engine"))
assertEquals(SQLSERVER, fromProductName("Microsoft SQL Server"))
assertEquals(MYSQL, fromProductName("MySQL"))
assertEquals(ORACLE, fromProductName("Oracle"))
assertEquals(POSTGRES, fromProductName("PostgreSQL"))
assertEquals(SYBASE, fromProductName("Sybase"))
assertEquals(SQLITE, fromProductName("SQLite"))
assertEquals(HANA, fromProductName("HDB"))
assertEquals(DERBY, DatabaseType.fromMetaData(ds))
assertEquals(DB2, DatabaseType.fromMetaData(oldDs))
assertEquals(DB2, DatabaseType.fromMetaData(newDs))
assertEquals(DB2VSE, DatabaseType.fromMetaData(ds))
assertEquals(DB2ZOS, DatabaseType.fromMetaData(oldDs))
assertEquals(DB2ZOS, DatabaseType.fromMetaData(newDs))
assertEquals(DB2AS400, DatabaseType.fromMetaData(toolboxDs))
assertEquals(DB2AS400, DatabaseType.fromMetaData(nativeDs))
assertEquals(DB2AS400, DatabaseType.fromMetaData(prdidDs))
assertEquals(HSQL, DatabaseType.fromMetaData(ds))
assertEquals(SQLSERVER, DatabaseType.fromMetaData(ds))
assertEquals(MYSQL, DatabaseType.fromMetaData(ds))
assertEquals(ORACLE, DatabaseType.fromMetaData(ds))
assertEquals(POSTGRES, DatabaseType.fromMetaData(ds))
assertEquals(SYBASE, DatabaseType.fromMetaData(ds))
assertEquals(HANA, DatabaseType.fromMetaData(ds))
assertEquals(TransactionSynchronization.STATUS_COMMITTED, txStatus)
assertEquals(TransactionSynchronization.STATUS_COMMITTED, txStatus)
assertEquals(TransactionSynchronization.STATUS_COMMITTED, txStatus)
assertEquals(2, count)
assertEquals(TransactionSynchronization.STATUS_COMMITTED, txStatus)
assertEquals(2, count)
assertEquals("Rollback!", exception.getMessage())
assertEquals(TransactionSynchronization.STATUS_ROLLED_BACK, txStatus)
assertEquals("Rollback!", exception.getMessage())
assertEquals(TransactionSynchronization.STATUS_ROLLED_BACK, txStatus)
assertEquals(2, count)
assertEquals("Rollback!", exception.getMessage())
assertEquals(TransactionSynchronization.STATUS_ROLLED_BACK, txStatus)
assertEquals(2, count)
assertEquals(3, map.size())
assertTrue(map.containsKey("bucket"))
assertEquals(3, map.size())
assertFalse(map.isEmpty())
assertEquals(3, map.size())
assertEquals(4, map.keySet().size())
assertEquals(3, map.size())
assertTrue(map.containsKey("spam"))
assertFalse(map.containsKey("spam"))
assertEquals(3, map.size())
assertEquals(0, map.size())
assertEquals(4, map.size())
assertEquals(4, map.size())
assertEquals(4, map.size())
assertEquals(2, map.size())
assertEquals(0, map.size())
assertEquals("Rollback!", exception.getMessage())
assertEquals(3, map.size())
assertEquals("Rollback!", exception.getMessage())
assertEquals(3, map.size())
assertEquals("Rollback!", exception.getMessage())
assertEquals(3, map.size())
assertEquals("foo", s)
assertEquals("foo", s)
assertEquals(0, writer.getBufferSize())
assertEquals("foo", getStringFromByteBuffer(byteBufferCaptor.getAllValues().get(0)))
assertEquals("c", getStringFromByteBuffer(byteBufferCaptor.getAllValues().get(1)))
assertEquals(0, writer.getBufferSize())
assertEquals(0, writer.getBufferSize())
assertEquals(0, writer.getBufferSize())
assertEquals(0, writer.getBufferSize())
assertEquals(0, writer.getBufferSize())
assertEquals("Could not write to output buffer", exception.getMessage())
assertEquals("urg", s)
assertEquals(3, set.size())
assertTrue(set.contains("bucket"))
assertEquals(3, set.size())
assertTrue(set.contains("spam"))
assertFalse(set.contains("spam"))
assertEquals(3, set.size())
assertEquals(0, set.size())
assertEquals(4, set.size())
assertEquals(2, set.size())
assertEquals(0, set.size())
assertEquals("Rollback!", exception.getMessage())
assertEquals(3, set.size())
assertEquals("Rollback!", exception.getMessage())
assertEquals(3, set.size())
assertEquals("Rollback!", exception.getMessage())
assertEquals(3, set.size())
assertEquals(3, list.size())
assertTrue(list.contains("bucket"))
assertEquals(3, list.size())
assertTrue(list.contains("spam"))
assertFalse(list.contains("spam"))
assertEquals(3, list.size())
assertEquals(0, list.size())
assertEquals(4, list.size())
assertEquals(2, list.size())
assertEquals(0, list.size())
assertEquals("Rollback!", exception.getMessage())
assertEquals(3, list.size())
assertEquals("Rollback!", exception.getMessage())
assertEquals(3, list.size())
assertEquals("Rollback!", exception.getMessage())
assertEquals(3, list.size())
assertFalse(result)
assertEquals(innerMax * outerMax, set.size())
assertEquals(1, list.size())
assertEquals(1, list.size())
assertEquals(1, set.size())
assertEquals(1, list.size())
assertEquals(1, map.size())
assertEquals(1, map.size())
assertEquals(1, methods.size())
assertEquals("toString", methods.iterator().next().getName())
assertEquals(0, methods.size())
assertEquals(2, methods.size())
assertTrue(toStringFound && methodOneFound)
assertNotNull(method)
assertNull(method)
assertTrue(testClass.beforeCalled)
assertTrue(testClass.beforeCalled)
assertTrue(testClass.beforeCalled)
assertTrue(testClass.beforeCalled)
assertFalse(testClass.beforeCalled)
assertTrue(testClass.argumentTestCalled)
assertEquals(methodInvoker, methodInvoker2)
assertTrue(PatternMatcher.match("abc", "abc"))
assertFalse(PatternMatcher.match("abc", "ab"))
assertTrue(PatternMatcher.match("a?c", "abc"))
assertFalse(PatternMatcher.match("a?c", "ab"))
assertTrue(PatternMatcher.match("a?*", "abc"))
assertTrue(PatternMatcher.match("a*c", "abdegc"))
assertTrue(PatternMatcher.match("a*d*", "abcdeg"))
assertFalse(PatternMatcher.match("a*de", "abcdeg"))
assertTrue(PatternMatcher.match("a*d*g*", "abcdeg"))
assertTrue(PatternMatcher.match("ab*", "ab"))
assertFalse(PatternMatcher.match("a*c", "abdeg"))
assertEquals(2, new PatternMatcher<>(map).match("apple").intValue())
assertEquals(3, new PatternMatcher<>(map).match("animal").intValue())
assertEquals(4, new PatternMatcher<>(map).match("biggest").intValue())
assertEquals(5, new PatternMatcher<>(defaultMap).match("biggest").intValue())
assertEquals(1, new PatternMatcher<>(defaultMap).match("").intValue())
assertEquals(1, new PatternMatcher<>(defaultMap).match("bat").intValue())
assertEquals(4, result.numbers[3])
assertEquals(123L, result.number)
assertEquals("foo", exception.getMessage())
assertEquals("foo", exception.getMessage().substring(0, 3))
assertEquals("No way!", exception.getMessage())
assertNotNull(container)
assertEquals("[bar, foo]", result.toString())
assertEquals("foo", processed.poll(5, TimeUnit.SECONDS))
assertEquals("foo", recovered.poll(5, TimeUnit.SECONDS))
assertNotNull(context)
assertNull(StepSynchronizationManager.getContext())
assertNull(StepSynchronizationManager.getContext())
assertNull(StepSynchronizationManager.getContext())
assertNotNull(jobLauncherTestUtils)
assertNull(jobLauncherTestUtils.getJob())
assertNotNull(jobLauncherTestUtils.getJob())
assertNotNull(jobLauncherTestUtils)
assertNull(jobLauncherTestUtils.getJob())
assertNotNull(contextCustomizer)
assertNull(contextCustomizer)
assertTrue(context.containsBean("jobLauncherTestUtils"))
assertTrue(context.containsBean("jobRepositoryTestUtils"))
assertTrue(context.containsBean("batchTestContextBeanPostProcessor"))
assertFalse(context.containsBean("jobLauncherTestUtils"))
assertFalse(context.containsBean("jobRepositoryTestUtils"))
assertFalse(context.containsBean("batchTestContextBeanPostProcessor"))
assertEquals(date, result)
assertEquals(date, result)
assertEquals(date, result)
fail("Nested batch should not have been executed", "A execução falhou por uma causa deliberada")
assertEquals(BatchStatus.COMPLETED, stepRunner.launchStep(step).getStatus())
assertEquals(2, jdbcTemplate.queryForObject("SELECT ID from TESTS where NAME = 'SampleTasklet2'", Integer.class).intValue())
assertEquals("foo", this.stepScopedItemReader.read())
assertEquals("bar", this.stepScopedItemReader.read())
assertNull(this.stepScopedItemReader.read())
assertEquals("foo", this.jobScopedItemReader.read())
assertEquals("bar", this.jobScopedItemReader.read())
assertNull(this.jobScopedItemReader.read())
assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus())
assertNotNull(context)
assertNull(JobSynchronizationManager.getContext())
assertNull(JobSynchronizationManager.getContext())
assertNull(JobSynchronizationManager.getContext())
assertEquals(BatchStatus.COMPLETED, jobLauncherTestUtils.launchJob().getStatus())
assertEquals(BatchStatus.COMPLETED, jobLauncherTestUtils.launchStep("step1").getStatus())
assertEquals(BatchStatus.COMPLETED, jobLauncherTestUtils.launchStep("step2").getStatus())
assertEquals(BatchStatus.COMPLETED, jobLauncherTestUtils.launchStep("step3").getStatus())
assertEquals(BatchStatus.COMPLETED, jobLauncherTestUtils.launchStep("step2", jobContext).getStatus())
assertTrue(tasklet2.jobContextEntryFound)
assertEquals(id, jdbcTemplate.queryForObject("SELECT ID from TESTS where NAME = 'SampleTasklet" + id + "'", Integer.class).intValue())
assertDoesNotThrow(() -> executeAssertEquals("input1.txt", "input1.txt"))
assertDoesNotThrow(() -> executeAssertEquals("blank.txt", "blank.txt"))
assertDoesNotThrow(() -> AssertFile.assertLineCount(5, new FileSystemResource(DIRECTORY + "input1.txt")))
assertNotNull(MetaDataInstanceFactory.createJobInstance(jobName, instanceId))
assertNotNull(MetaDataInstanceFactory.createJobInstance())
assertNotNull(MetaDataInstanceFactory.createJobExecution())
assertNotNull(MetaDataInstanceFactory.createJobExecution(instanceId))
assertNotNull(MetaDataInstanceFactory.createJobExecution(jobName, instanceId, executionId))
assertNotNull(MetaDataInstanceFactory.createJobExecution(jobName, instanceId, executionId, jobParametersString))
assertNotNull(MetaDataInstanceFactory.createJobExecution(jobName, instanceId, executionId, jobParameters))
assertNotNull(MetaDataInstanceFactory.createStepExecution())
assertNotNull(MetaDataInstanceFactory.createStepExecution(stepName, stepExecutionId))
assertNotNull(MetaDataInstanceFactory.createStepExecution(stepName, stepExecutionId))
assertNotNull(MetaDataInstanceFactory.createJobExecutionWithStepExecutions(executionId, List.of(stepName)))
assertEquals(3, list.size())
assertEquals(beforeJobs + 3, JdbcTestUtils.countRowsInTable(jdbcTemplate, "BATCH_JOB_EXECUTION"))
assertEquals(beforeSteps + 3, JdbcTestUtils.countRowsInTable(jdbcTemplate, "BATCH_STEP_EXECUTION"))
assertEquals(beforeJobs, JdbcTestUtils.countRowsInTable(jdbcTemplate, "BATCH_JOB_EXECUTION"))
assertEquals(beforeSteps, JdbcTestUtils.countRowsInTable(jdbcTemplate, "BATCH_STEP_EXECUTION"))
assertEquals(beforeJobs + 2, JdbcTestUtils.countRowsInTable(jdbcTemplate, "BATCH_JOB_EXECUTION"))
assertEquals(beforeJobs, JdbcTestUtils.countRowsInTable(jdbcTemplate, "BATCH_JOB_EXECUTION"))
assertEquals(3, list.size())
assertEquals(beforeJobs + 3, JdbcTestUtils.countRowsInTable(jdbcTemplate, "BATCH_JOB_EXECUTION"))
assertEquals(beforeSteps + 6, JdbcTestUtils.countRowsInTable(jdbcTemplate, "BATCH_STEP_EXECUTION"))
assertEquals(beforeJobs, JdbcTestUtils.countRowsInTable(jdbcTemplate, "BATCH_JOB_EXECUTION"))
assertEquals(beforeSteps, JdbcTestUtils.countRowsInTable(jdbcTemplate, "BATCH_STEP_EXECUTION"))
assertEquals(beforeJobs + 5, JdbcTestUtils.countRowsInTable(jdbcTemplate, "BATCH_JOB_EXECUTION"))
assertEquals(beforeJobs + 3, JdbcTestUtils.countRowsInTable(jdbcTemplate, "BATCH_JOB_EXECUTION"))
assertEquals(beforeJobs, JdbcTestUtils.countRowsInTable(jdbcTemplate, "BATCH_JOB_EXECUTION"))
assertEquals(1, list.size())
assertEquals("bar", list.get(0).getJobParameters().getString("foo"))
assertEquals(beforeJobs, JdbcTestUtils.countRowsInTable(jdbcTemplate, "BATCH_JOB_EXECUTION"))
assertEquals(1, JdbcTestUtils.countRowsInTable(jdbcTemplate, "BATCH_JOB_EXECUTION"))
assertEquals(2, JdbcTestUtils.countRowsInTable(jdbcTemplate, "BATCH_STEP_EXECUTION"))
assertEquals(0, JdbcTestUtils.countRowsInTable(jdbcTemplate, "BATCH_STEP_EXECUTION"))
assertEquals(0, JdbcTestUtils.countRowsInTable(jdbcTemplate, "BATCH_JOB_EXECUTION"))
Assert.assertEquals("foo", this.stepScopedItemReader.read())
Assert.assertEquals("bar", this.stepScopedItemReader.read())
Assert.assertEquals("foo", this.jobScopedItemReader.read())
Assert.assertEquals("bar", this.jobScopedItemReader.read())
Assert.assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus())
assertEquals(ExitStatus.COMPLETED, execution.getExitStatus())
assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus())
assertNotNull(reader)
assertEquals("foo", reader.read())
assertNotNull(reader)
assertEquals("foo", reader.read())
assertEquals(status, execution.getStatus())
assertEquals(stepExecutionCount, execution.getStepExecutions().size())
assertEquals(1, jobExplorer.getJobInstanceCount(jobName))
assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus())
assertEquals("JOB", value.call())
assertEquals("JOB", value.call())
assertEquals("JOB", value.call())
assertEquals("JOB", value.call())
assertEquals("JOB", value.call())
assertEquals("JOB", value.call())
assertEquals("JOB", value.call())
assertTrue(expectedException instanceof ScopeNotActiveException)
assertTrue(message.contains("job scope"))
assertTrue(expectedException instanceof ScopeNotActiveException)
assertTrue(message.contains("job scope"))
assertEquals("JOB", value.call())
assertTrue(expectedException instanceof ScopeNotActiveException)
assertTrue(message.contains("job scope"))
assertEquals("STEP", value.call())
assertEquals("STEP", value.call())
assertEquals("STEP", value.call())
assertEquals("STEP", value.call())
assertEquals("STEP", value.call())
assertEquals("STEP", value.call())
assertEquals("STEP", value.call())
assertEquals("STEP", value.call())
assertEquals("STEP", value.call())
assertTrue(expectedException instanceof ScopeNotActiveException)
assertTrue(message.contains("step scope"))
assertTrue(expectedException instanceof ScopeNotActiveException)
assertTrue(message.contains("step scope"))
assertEquals("STEP", value.call())
assertTrue(expectedException instanceof ScopeNotActiveException)
assertTrue(message.contains("step scope"))
assertEquals(status, execution.getStatus())
assertEquals(stepExecutionCount, execution.getStepExecutions().size())
assertTrue(beforeCalled)
assertTrue(afterCalled)
assertNotNull(job1)
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertEquals("[step1:partition0, step1:partition1]", savedStepNames.toString())
assertEquals(3, stepNames.size())
assertEquals("[s1, step1:partition0, step1:partition1]", stepNames.toString())
assertEquals("bar", jobExecution.getExecutionContext().get("foo"))
assertNotNull(job2)
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertEquals("[s2:partition0, s2:partition1, s2:partition2, s3]", savedStepNames.toString())
assertEquals(5, stepNames.size())
assertEquals("[s2, s2:partition0, s2:partition1, s2:partition2, s3]", stepNames.toString())
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertEquals("[j3s1:partition0, j3s1:partition1, j3s1:partition2, j3s1:partition3, j3s1:partition4, j3s1:partition5]", savedStepNames.toString())
assertEquals(7, stepNames.size())
assertEquals("[j3s1, j3s1:partition0, j3s1:partition1, j3s1:partition2, j3s1:partition3, j3s1:partition4, j3s1:partition5]", stepNames.toString())
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertEquals("[]", savedStepNames.toString())
assertEquals(7, stepNames.size())
assertEquals("[j4s1, j4s1:partition0, j4s1:partition1, j4s1:partition2, j4s1:partition3, j4s1:partition4, j4s1:partition5]", stepNames.toString())
assertNotNull(job5)
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertEquals(1, stepNames.size())
assertEquals("[j5s1]", stepNames.toString())
assertEquals(3, stepNamesList.size())
assertEquals("[s1, unknown, s2]", stepNamesList.toString())
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus())
assertEquals(BatchStatus.COMPLETED, stepExecution1.getStatus())
assertEquals(ExitStatus.COMPLETED, stepExecution1.getExitStatus())
assertEquals(BatchStatus.UNKNOWN, stepExecution2.getStatus())
assertEquals(ExitStatus.UNKNOWN, stepExecution2.getExitStatus())
assertEquals(1, stepNamesList.size())
assertEquals(BatchStatus.STOPPED, jobExecution.getStatus())
assertEquals(ExitStatus.STOPPED.getExitCode(), jobExecution.getExitStatus().getExitCode())
assertEquals(BatchStatus.COMPLETED, stepExecution1.getStatus())
assertEquals("FOO", stepExecution1.getExitStatus().getExitCode())
assertEquals(1, stepNamesList.size())
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus())
assertEquals(BatchStatus.COMPLETED, stepExecution2.getStatus())
assertEquals(ExitStatus.COMPLETED, stepExecution2.getExitStatus())
assertEquals(1, list.size())
assertTrue(list.get(0) instanceof DummyStepExecutionListener)
assertEquals(1, list.size())
assertTrue(list.get(0) instanceof DummyChunkListener)
assertEquals(2, list.size())
assertTrue(list.get(0) instanceof DummyStepExecutionListener)
assertTrue(list.get(1) instanceof DummyChunkListener)
assertEquals(2, list.size())
assertTrue(list.get(0) instanceof DummyStepExecutionListener)
assertTrue(list.get(1) instanceof ItemListenerSupport)
assertTrue(step instanceof TaskletStep)
assertEquals(2, stepNamesList.size())
assertTrue(stepNamesList.contains("s1"))
assertTrue(stepNamesList.contains("fail"))
assertEquals(BatchStatus.FAILED, jobExecution.getStatus())
assertEquals("EARLY TERMINATION", jobExecution.getExitStatus().getExitCode())
assertEquals(BatchStatus.COMPLETED, stepExecution1.getStatus())
assertEquals(ExitStatus.COMPLETED, stepExecution1.getExitStatus())
assertEquals(BatchStatus.FAILED, stepExecution2.getStatus())
assertEquals(ExitStatus.FAILED.getExitCode(), stepExecution2.getExitStatus().getExitCode())
assertEquals(1, stepNamesList.size())
assertTrue(stepNamesList.contains("fail"))
assertEquals(BatchStatus.FAILED, jobExecution.getStatus())
Assert.assertNull(this.stepScopedItemReader.read())
Assert.assertNull(this.jobScopedItemReader.read())
parent.fail(pattern)
assertNotNull(job1)
assertEquals("bar", tasklet.getName())
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertNotNull(job2)
assertEquals("foo", tasklet.getName())
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertNotNull(job3)
assertEquals(FlowJob.class, job3.getClass())
assertEquals("foobar", tasklet.getName())
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertNotNull(job4)
assertEquals(FlowJob.class, job4.getClass())
assertEquals(DummyNamespaceHandler.LABEL, tasklet.getName())
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertEquals(stepNames, stepNamesList.toString())
assertEquals(BatchStatus.STOPPED, jobExecution.getStatus())
assertEquals(ExitStatus.STOPPED.getExitCode(), jobExecution.getExitStatus().getExitCode())
assertEquals(BatchStatus.FAILED, stepExecution1.getStatus())
assertEquals(ExitStatus.FAILED.getExitCode(), stepExecution1.getExitStatus().getExitCode())
assertEquals(BatchStatus.STOPPED, jobExecution.getStatus())
assertEquals(ExitStatus.STOPPED.getExitCode(), jobExecution.getExitStatus().getExitCode())
assertEquals(BatchStatus.STOPPED, stepExecution.getStatus())
assertEquals(ExitStatus.STOPPED.getExitCode(), stepExecution.getExitStatus().getExitCode())
assertEquals(1, stepNamesList.size())
assertEquals(stepNames, stepNamesList.toString())
assertEquals(BatchStatus.STOPPED, jobExecution.getStatus())
assertEquals(ExitStatus.STOPPED.getExitCode(), jobExecution.getExitStatus().getExitCode())
assertEquals(BatchStatus.COMPLETED, stepExecution1.getStatus())
assertEquals(ExitStatus.COMPLETED.getExitCode(), stepExecution1.getExitStatus().getExitCode())
assertNotNull(job)
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertEquals(2, jobExecution.getStepExecutions().size())
assertEquals(1, stepNamesList.size())
assertEquals("[s1]", stepNamesList.toString())
assertEquals(BatchStatus.STOPPED, jobExecution.getStatus())
assertEquals(ExitStatus.STOPPED.getExitCode(), jobExecution.getExitStatus().getExitCode())
assertEquals(BatchStatus.COMPLETED, stepExecution1.getStatus())
assertEquals(ExitStatus.COMPLETED.getExitCode(), stepExecution1.getExitStatus().getExitCode())
assertEquals(1, stepNamesList.size())
assertEquals("[s2]", stepNamesList.toString())
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus())
assertEquals(BatchStatus.COMPLETED, stepExecution2.getStatus())
assertEquals(ExitStatus.COMPLETED, stepExecution2.getExitStatus())
assertNotNull(job1)
assertNotNull(validator)
assertNotNull(job2)
assertNotNull(validator)
assertNotNull(job3)
assertNotNull(validator)
assertTrue(job1 instanceof AbstractJob)
assertTrue(validator instanceof DefaultJobParametersValidator)
assertEquals(2, keys.size())
assertEquals(3, list.size())
assertTrue(a)
assertTrue(b)
assertTrue(c)
assertEquals(2, list.size())
assertTrue(a)
assertTrue(b)
assertEquals(2, list.size())
assertTrue(a)
assertTrue(b)
assertTrue(step instanceof TaskletStep)
assertEquals(1, stepNamesList.size())
assertTrue(stepNamesList.contains("s1"))
assertEquals(BatchStatus.STOPPED, jobExecution.getStatus())
assertEquals(ExitStatus.STOPPED.getExitCode(), jobExecution.getExitStatus().getExitCode())
assertEquals(BatchStatus.COMPLETED, stepExecution1.getStatus())
assertEquals(ExitStatus.COMPLETED, stepExecution1.getExitStatus())
assertEquals(1, stepNamesList.size())
assertTrue(stepNamesList.contains("s2"))
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus())
assertEquals(BatchStatus.COMPLETED, stepExecution2.getStatus())
assertEquals(ExitStatus.COMPLETED, stepExecution2.getExitStatus())
assertEquals(BatchStatus.ABANDONED, stepExecution.getStatus())
assertEquals(ExitStatus.FAILED.getExitCode(), stepExecution.getExitStatus().getExitCode())
assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
assertEquals(ExitStatus.COMPLETED.getExitCode(), stepExecution.getExitStatus().getExitCode())
assertEquals(stepNames, stepNamesList.toString())
assertNotNull(job)
assertTrue(job instanceof FlowJob)
assertTrue(t1.isExecuted())
assertTrue(t2.isExecuted())
assertTrue(t3.isExecuted())
assertTrue(t4.isExecuted())
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertEquals(4, jobExecution.getStepExecutions().size())
assertTrue(listener.isExecuted())
assertTrue(tasklet instanceof TestTasklet)
assertEquals(taskletName, testTasklet.getName())
assertFalse(testTasklet.isExecuted())
assertTrue(exception.getMessage().contains("The element [s2] is unreachable"))
assertTrue(exception.getMessage().contains("The element [s4] is unreachable"))
assertEquals(2, stepNamesList.size())
assertTrue(stepNamesList.contains("s1"))
assertTrue(stepNamesList.contains("fail"))
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertEquals("EARLY TERMINATION", jobExecution.getExitStatus().getExitCode())
assertEquals(BatchStatus.COMPLETED, stepExecution1.getStatus())
assertEquals(ExitStatus.COMPLETED, stepExecution1.getExitStatus())
assertEquals(BatchStatus.FAILED, stepExecution2.getStatus())
assertEquals(ExitStatus.FAILED.getExitCode(), stepExecution2.getExitStatus().getExitCode())
assertEquals(2, stepNamesList.size())
assertEquals("[s1, unknown]", stepNamesList.toString())
assertEquals(BatchStatus.UNKNOWN, jobExecution.getStatus())
assertEquals(ExitStatus.UNKNOWN, jobExecution.getExitStatus())
assertEquals(BatchStatus.COMPLETED, stepExecution1.getStatus())
assertEquals(ExitStatus.COMPLETED, stepExecution1.getExitStatus())
assertEquals(BatchStatus.UNKNOWN, stepExecution2.getStatus())
assertEquals(ExitStatus.UNKNOWN, stepExecution2.getExitStatus())
assertTrue(beforeCalled)
assertTrue(afterCalled)
fail(pattern, "A execução falhou por uma causa deliberada")
assertEquals(2, stepNamesList.size())
assertTrue(stepNamesList.contains("s1"))
assertTrue(stepNamesList.contains("fail"))
assertEquals(BatchStatus.FAILED, jobExecution.getStatus())
assertEquals("FAILED", jobExecution.getExitStatus().getExitCode())
assertEquals(BatchStatus.COMPLETED, stepExecution1.getStatus())
assertEquals(ExitStatus.COMPLETED, stepExecution1.getExitStatus())
assertEquals(BatchStatus.FAILED, stepExecution2.getStatus())
assertEquals(ExitStatus.FAILED.getExitCode(), stepExecution2.getExitStatus().getExitCode())
assertEquals(1, stepNamesList.size())
assertTrue(stepNamesList.contains("fail"))
assertEquals(BatchStatus.FAILED, jobExecution.getStatus())
assertEquals("FAILED", jobExecution.getExitStatus().getExitCode())
assertEquals(BatchStatus.FAILED, stepExecution3.getStatus())
assertEquals(ExitStatus.FAILED.getExitCode(), stepExecution3.getExitStatus().getExitCode())
assertEquals(2, applicationContext.getBeanNamesForType(Job.class).length)
assertEquals(2, jobRegistry.getJobNames().size())
assertEquals(2, retryable.size())
assertTrue(retryable.containsKey(NullPointerException.class))
assertTrue(retryable.containsKey(ArithmeticException.class))
assertEquals(2, policy.getMaxAttempts())
assertTrue(policy.shouldSkip(new NullPointerException(), 0))
assertTrue(policy.shouldSkip(new ArithmeticException(), 0))
assertFalse(policy.shouldSkip(new NullPointerException(), 0))
assertTrue(policy.shouldSkip(new ArithmeticException(), 0))
assertTrue(chunkProcessor instanceof SimpleChunkProcessor<?, ?>)
assertEquals(3, retryable.size())
assertEquals(2, retryable.size())
assertEquals(3, retryable.size())
assertEquals(5, skippable.size())
assertEquals(3, skippable.size())
assertFalse(skippable.containsKey(ArithmeticException.class))
assertFalse(skippable.containsKey(DeadlockLoserDataAccessException.class))
assertEquals(2, streams.size())
assertTrue(c)
assertEquals(2, retryListeners.size())
assertTrue(g)
assertTrue(h)
assertEquals(1, streams.size())
assertTrue(c)
assertEquals(1, retryListeners.size())
assertTrue(h)
assertTrue(beans.containsKey(stepName))
assertTrue(step instanceof TaskletStep)
assertTrue(classified.containsKey(cls))
assertEquals(include, classified.get(cls))
assertTrue(beans.containsKey(stepName))
assertTrue(step instanceof TaskletStep)
assertTrue(beans.containsKey(stepName))
assertTrue(step instanceof TaskletStep)
assertNotNull(jobRepository)
assertNotNull(job)
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertEquals(1, jobExecution.getStepExecutions().size())
assertTrue(reader.isExecuted())
assertTrue(reader.isOpened())
assertTrue(processor.isExecuted())
assertTrue(writer.isExecuted())
assertTrue(listener.isExecuted())
assertNotNull(job)
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertNotNull(job)
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertEquals(1, jobExecution.getStepExecutions().size())
assertTrue(step instanceof TaskletStep)
assertTrue(tasklet instanceof DummyTasklet)
assertTrue(step instanceof TaskletStep)
assertTrue(stepOperations instanceof TaskExecutorRepeatTemplate)
assertTrue(step instanceof TaskletStep)
assertTrue(tasklet instanceof DummyTasklet)
assertTrue(step instanceof TaskletStep)
assertTrue(tasklet instanceof DummyTasklet)
assertTrue(step instanceof TaskletStep)
assertTrue(tasklet instanceof ChunkOrientedTasklet<?>)
assertTrue(step instanceof TaskletStep)
assertEquals(Integer.valueOf(10), throttleLimit)
assertTrue(tasklet instanceof ChunkOrientedTasklet<?>)
assertFalse((Boolean) ReflectionTestUtils.getField(tasklet, "buffering"))
assertTrue(completionPolicy instanceof DummyCompletionPolicy)
assertTrue(step instanceof PartitionStep)
assertTrue(handler instanceof TaskExecutorPartitionHandler)
assertTrue(step instanceof PartitionStep)
assertTrue(handler instanceof Advised)
assertTrue(step instanceof FlowStep)
assertTrue(handler instanceof SimpleFlow)
assertNotNull(job1)
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertNotNull(jobRepository)
assertNotNull(job1)
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertEquals(5, stepNames.size())
assertEquals("[s1, job1.flow, s2, s3, s4]", stepNames.toString())
assertNotNull(job2)
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertEquals(5, stepNames.size())
assertEquals("[job2.s1, job2.flow, s2, s3, job2.s4]", stepNames.toString())
assertNotNull(job3)
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertEquals(6, stepNames.size())
assertEquals("[job3.flow, s2, s3, job3.flow, s2, s3]", stepNames.toString())
assertNotNull(job4)
assertEquals(BatchStatus.FAILED, jobExecution.getStatus())
assertEquals(3, stepNames.size())
assertEquals("[job4.flow, s2, s3]", stepNames.toString())
assertEquals(BatchStatus.FAILED, jobExecution.getStatus())
assertEquals(1, stepNames.size())
assertEquals("[job4.flow]", stepNames.toString())
assertNotNull(job)
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertEquals(2, jobExecution.getStepExecutions().size())
assertEquals("[s1, s3]", names.toString())
assertNotNull(job1)
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertEquals(3, stepNames.size())
assertEquals("[s1, job1.flow, s4]", stepNames.toString())
assertNotNull(job2)
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertEquals(3, stepNames.size())
assertEquals("[job2.s1, job2.flow, job2.s4]", stepNames.toString())
assertNotNull(job1)
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertNotNull(job2)
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertEquals(2, list.size())
assertTrue(step instanceof TaskletStep)
assertNotNull(job)
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertEquals(1, jobExecution.getStepExecutions().size())
assertTrue(reader.isExecuted())
assertTrue(reader.isOpened())
assertTrue(processor.isExecuted())
assertTrue(writer.isExecuted())
assertTrue(listener.isExecuted())
assertTrue(retryListener.isExecuted())
assertEquals(2, job1Listeners.size())
assertTrue(a)
assertTrue(b)
assertEquals(1, job2Listeners.size())
assertTrue(c)
assertEquals(2, jobListeners.size())
assertTrue(a)
assertTrue(b)
assertTrue(getJobRepository(defaultRepoJob) instanceof SimpleJobRepository)
assertTrue(getJobRepository(specifiedRepoJob) instanceof DummyJobRepository)
assertTrue(getJobRepository(inheritSpecifiedRepoJob) instanceof DummyJobRepository)
assertTrue(getJobRepository(overrideInheritedRepoJob) instanceof SimpleJobRepository)
assertEquals(0, getListeners(listenerClearingJob).size())
assertTrue(job instanceof AbstractJob)
assertTrue(jobRepository instanceof JobRepository)
assertTrue(job instanceof AbstractJob)
assertNotNull(jobRepository)
assertEquals(2, stepNamesList.size())
assertEquals("[s1, s2]", stepNamesList.toString())
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus())
assertEquals(BatchStatus.COMPLETED, stepExecution1.getStatus())
assertEquals(ExitStatus.COMPLETED, stepExecution1.getExitStatus())
assertEquals(BatchStatus.COMPLETED, stepExecution2.getStatus())
assertEquals(ExitStatus.COMPLETED, stepExecution2.getExitStatus())
assertNotNull(job1)
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertEquals(4, stepNames.size())
assertEquals("[s1, s2, s3, s4]", stepNames.toString())
assertNotNull(job2)
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertEquals(3, jobExecution.getStepExecutions().size())
assertEquals(3, stepNames.size())
assertEquals("[s2, s3, job2.s1]", stepNames.toString())
assertNotNull(job3)
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertEquals(2, stepNames.size())
assertEquals("[s2, s3]", stepNames.toString())
assertNotNull(job4)
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertEquals(4, stepNames.size())
assertEquals("[s2, s3, s2, s3]", stepNames.toString())
assertEquals(1, stepNamesList.size())
assertEquals(BatchStatus.STOPPED, jobExecution.getStatus())
assertEquals(ExitStatus.STOPPED.getExitCode(), jobExecution.getExitStatus().getExitCode())
assertEquals(BatchStatus.ABANDONED, stepExecution1.getStatus())
assertEquals(ExitStatus.FAILED.getExitCode(), stepExecution1.getExitStatus().getExitCode())
assertEquals(1, stepNamesList.size())
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus())
assertEquals(BatchStatus.COMPLETED, stepExecution2.getStatus())
assertEquals(ExitStatus.COMPLETED, stepExecution2.getExitStatus())
assertNotNull(job1)
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertEquals("[s1:partition0]", savedStepNames.toString())
assertEquals(2, stepNames.size())
assertEquals("[s1, s1:partition0]", stepNames.toString())
assertNotNull(job)
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertEquals(1, jobExecution.getStepExecutions().size())
assertEquals(1, stepNamesList.size())
assertTrue(stepNamesList.contains("s1"))
assertEquals(BatchStatus.FAILED, jobExecution.getStatus())
assertEquals(ExitStatus.FAILED, jobExecution.getExitStatus())
assertEquals(BatchStatus.COMPLETED, stepExecution1.getStatus())
assertEquals(ExitStatus.COMPLETED, stepExecution1.getExitStatus())
assertTrue(abstractStep.isAllowStartIfComplete())
assertEquals(2, count)
assertEquals(1, stepNamesList.size())
assertTrue(stepNamesList.contains("fail"))
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus())
assertEquals(BatchStatus.FAILED, stepExecution1.getStatus())
assertEquals(ExitStatus.FAILED.getExitCode(), stepExecution1.getExitStatus().getExitCode())
assertNotNull(job)
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertEquals(4, jobExecution.getStepExecutions().size())
assertEquals("[s1, s2, s3, s4]", names.toString())
assertNotNull(job)
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertTrue(stepNamesList.contains("s3"))
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertEquals(ExitStatus.FAILED, jobExecution.getExitStatus())
assertEquals(BatchStatus.COMPLETED, stepExecution1.getStatus())
assertEquals(ExitStatus.COMPLETED, stepExecution1.getExitStatus())
assertEquals(BatchStatus.FAILED, stepExecution2.getStatus())
assertEquals(ExitStatus.FAILED.getExitCode(), stepExecution2.getExitStatus().getExitCode())
assertEquals(BatchStatus.COMPLETED, stepExecution3.getStatus())
assertEquals(ExitStatus.COMPLETED, stepExecution3.getExitStatus())
assertTrue(reader instanceof TestReader)
assertTrue(processor instanceof TestProcessor)
assertTrue(writer instanceof TestWriter)
assertTrue(reader instanceof ItemReaderAdapter<?>)
assertTrue(readerObject instanceof DummyItemHandlerAdapter)
assertEquals("dummyRead", readerMethod)
assertTrue(processor instanceof ItemProcessorAdapter<?, ?>)
assertTrue(processorObject instanceof DummyItemHandlerAdapter)
assertEquals("dummyProcess", processorMethod)
assertTrue(writer instanceof ItemWriterAdapter<?>)
assertTrue(writerObject instanceof DummyItemHandlerAdapter)
assertEquals("dummyWrite", writerMethod)
assertEquals(4, readers.size())
assertEquals(2, stepNamesList.size())
assertEquals(BatchStatus.FAILED, jobExecution.getStatus())
assertEquals(ExitStatus.FAILED, jobExecution.getExitStatus())
assertEquals(BatchStatus.COMPLETED, stepExecution1.getStatus())
assertEquals(ExitStatus.COMPLETED, stepExecution1.getExitStatus())
assertEquals(BatchStatus.FAILED, stepExecution2.getStatus())
assertEquals(ExitStatus.FAILED.getExitCode(), stepExecution2.getExitStatus().getExitCode())
assertNotNull(job1)
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertEquals("[s2, s2, s2, s2, s3, s3, s3, s3]", savedStepNames.toString())
assertEquals(14, stepNames.size())
assertEquals("[s1, s1, s1:partition0, s1:partition0, s1:partition1, s1:partition1, s2, s2, s2, s2, s3, s3, s3, s3]", stepNames.toString())
assertEquals(2, stepNamesList.size())
assertTrue(stepNamesList.contains("s1"))
assertTrue(stepNamesList.contains("fail"))
assertEquals(BatchStatus.FAILED, jobExecution.getStatus())
assertEquals(ExitStatus.FAILED.getExitCode(), jobExecution.getExitStatus().getExitCode())
assertEquals(BatchStatus.COMPLETED, stepExecution1.getStatus())
assertEquals(ExitStatus.COMPLETED, stepExecution1.getExitStatus())
assertEquals(BatchStatus.FAILED, stepExecution2.getStatus())
assertEquals(ExitStatus.FAILED.getExitCode(), stepExecution2.getExitStatus().getExitCode())
assertNotNull(job)
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertEquals(1, jobExecution.getStepExecutions().size())
assertTrue(reader.isExecuted())
assertTrue(reader.isOpened())
assertTrue(writer.isExecuted())
assertTrue(listener.isExecuted())
assertNotNull(job)
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertEquals(1, jobExecution.getStepExecutions().size())
assertEquals(Integer.valueOf(10), throttleLimit)
assertTrue(completionPolicy instanceof SimpleCompletionPolicy)
assertEquals(25, ReflectionTestUtils.getField(completionPolicy, "chunkSize"))
assertTrue(completionPolicy instanceof DummyCompletionPolicy)
assertTrue(getListener("s1", ctx) instanceof DummyStepExecutionListener)
assertTrue(getListener("s2", ctx) instanceof DummyStepExecutionListener)
assertTrue(getListener("s3", ctx) instanceof DummyStepExecutionListener)
assertTrue(getListener("s4", ctx) instanceof DummyStepExecutionListener)
assertEquals(TransactionDefinition.PROPAGATION_REQUIRED, txa.getPropagationBehavior())
assertEquals(TransactionDefinition.ISOLATION_DEFAULT, txa.getIsolationLevel())
assertEquals(10, txa.getTimeout())
assertTrue(ctx.containsBean(stepName))
assertTrue(step instanceof TaskletStep)
assertEquals(1, list.size())
assertTrue(ctx.containsBean(stepName))
assertTrue(step instanceof TaskletStep)
assertTrue(getTasklet("s9", ctx) instanceof DummyTasklet)
assertTrue(getTasklet("s10", ctx) instanceof DummyTasklet)
assertTrue(ctx.containsBean(stepName))
assertTrue(step instanceof TaskletStep)
assertTrue(tasklet instanceof Tasklet)
assertTrue(getJobRepository("defaultRepoStep", ctx) instanceof SimpleJobRepository)
assertTrue(getJobRepository("defaultRepoStepWithParent", ctx) instanceof SimpleJobRepository)
assertTrue(getJobRepository("overrideRepoStep", ctx) instanceof SimpleJobRepository)
assertTrue(getJobRepository("defaultRepoStandaloneStep", ctx) instanceof SimpleJobRepository)
assertTrue(getTransactionManager("defaultTxMgrStep", ctx) instanceof JdbcTransactionManager)
assertTrue(jobRepository instanceof DummyJobRepository)
assertEquals(jobRepoName, ((DummyJobRepository) jobRepository).getName())
assertTrue(txMgr instanceof DummyPlatformTransactionManager)
assertEquals(txMgrName, ((DummyPlatformTransactionManager) txMgr).getName())
assertTrue(jobRepository instanceof JobRepository)
assertTrue(jobRepository instanceof PlatformTransactionManager)
assertTrue(ctx.containsBean(beanName))
assertTrue(bean instanceof AbstractStep || bean instanceof AbstractJob)
assertTrue(ctx.containsBean("s11"))
assertTrue(bean instanceof DummyStep)
assertTrue(ctx.containsBean("&s12"))
assertTrue(factoryBean instanceof StepParserStepFactoryBean<?, ?>)
assertTrue(ctx.containsBean("dummyStep"))
assertTrue(dummyStep instanceof DummyStep)
assertTrue(ctx.containsBean("s12"))
assertTrue(bean instanceof TaskletStep)
assertTrue(ctx.containsBean("&s13"))
assertTrue(factoryBean instanceof StepParserStepFactoryBean<?, ?>)
assertTrue(ctx.containsBean("s13"))
assertTrue(bean instanceof TaskletStep)
assertTrue(ctx.containsBean("&dummyStepWithTaskletOnParent"))
assertTrue(dummyStepFb instanceof StepParserStepFactoryBean<?, ?>)
assertTrue(ctx.containsBean("dummyStepWithTaskletOnParent"))
assertTrue(dummyStep instanceof TaskletStep)
assertTrue(ctx.containsBean("&standaloneStepWithTasklet"))
assertTrue(standaloneStepFb instanceof StepParserStepFactoryBean<?, ?>)
assertTrue(ctx.containsBean("standaloneStepWithTasklet"))
assertTrue(standaloneStep instanceof TaskletStep)
assertTrue(ctx.containsBean("&s14"))
assertTrue(factoryBean instanceof StepParserStepFactoryBean<?, ?>)
assertTrue(ctx.containsBean("s12"))
assertTrue(bean instanceof TaskletStep)
assertTrue(ctx.containsBean("&standaloneStepWithTaskletAndDummyParent"))
assertTrue(standaloneWithTaskletFb instanceof StepParserStepFactoryBean<?, ?>)
assertTrue(ctx.containsBean("standaloneStepWithTaskletAndDummyParent"))
assertTrue(standaloneWithTasklet instanceof TaskletStep)
assertTrue(ctx.containsBean("dummyStep"))
assertTrue(dummyStep instanceof DummyStep)
assertEquals(1, getExceptionMap(fb, "skippableExceptionClasses").size())
assertEquals(1, getExceptionMap(fb, "retryableExceptionClasses").size())
assertEquals(0, ((ItemStream[]) ReflectionTestUtils.getField(fb, "streams")).length)
assertEquals(0, ((RetryListener[]) ReflectionTestUtils.getField(fb, "retryListeners")).length)
assertEquals(0, ((Set<StepExecutionListener>) ReflectionTestUtils.getField(fb, "stepExecutionListeners")).size())
assertEquals(0, getExceptionList(fb, "noRollbackExceptionClasses").size())
assertEquals(expected.size(), actual.size())
assertTrue(expected.containsAll(actual))
assertEquals(expected.size(), actual.size())
assertEquals(1, ((Map<?, ?>) ReflectionTestUtils.getField(jobLoader, "contexts")).size())
assertEquals(1, ((Map<?, ?>) ReflectionTestUtils.getField(jobLoader, "contextToJobNames")).size())
assertEquals(0, ((Map<?, ?>) ReflectionTestUtils.getField(jobLoader, "contexts")).size())
assertEquals(0, ((Map<?, ?>) ReflectionTestUtils.getField(jobLoader, "contextToJobNames")).size())
assertEquals(1, jobRegistry.getJobNames().size())
assertEquals(1, jobRegistry.getJobNames().size())
assertEquals(1, jobRegistry.getJobNames().size())
assertEquals(2, jobRegistry.getJobNames().size())
assertEquals(2, jobRegistry.getJobNames().size())
assertEquals(2, jobRegistry.getJobNames().size())
assertDoesNotThrow(() -> loader.load(factory))
assertEquals(1, jobRegistry.getJobNames().size())
assertEquals(1, jobRegistry.getJobNames().size())
assertEquals(1, jobRegistry.getJobNames().size())
assertEquals(1, jobRegistry.getJobNames().size())
assertEquals("foo", result.getName())
assertEquals("jobs.foo", result.getName())
assertEquals("JobSupport: [name=jobs.foo]", result.toString())
assertNotNull(registry.getJob("foo"))
assertTrue(exception.getMessage().contains("foo"))
assertTrue(exception.getMessage().contains("foo"))
assertTrue(exception.getMessage().contains("foo"))
assertEquals(2, configurations.size())
assertTrue(configurations.contains(jobFactory.getJobName()))
Assertions.assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus())
Assertions.assertEquals(1, jobRepositories.size())
assertTrue(registrar instanceof Ordered)
assertEquals(Ordered.LOWEST_PRECEDENCE, registrar.getOrder())
assertEquals(1, registrar.getOrder())
assertTrue(registrar.isAutoStartup())
assertEquals(Integer.MIN_VALUE + 1000, registrar.getPhase())
assertEquals(2, names.size())
assertTrue(names.contains("test-job"))
assertTrue(names.contains("test-job2"))
assertEquals("test-job", job.getName())
assertEquals("test-job2", job.getName())
assertEquals(2, registry.getJobNames().size())
assertEquals(2, registry.getJobNames().size())
assertEquals(2, registry.getJobNames().size())
assertEquals(0, registry.getJobNames().size())
assertTrue(registrar.isRunning())
assertEquals(2, registry.getJobNames().size())
assertFalse(registrar.isRunning())
assertTrue(registrar.isRunning())
assertEquals(2, registry.getJobNames().size())
assertFalse(registrar.isRunning())
assertEquals(0, registry.getJobNames().size())
assertEquals("foo", factory.getJobName())
assertEquals(2, names.size())
assertTrue(names.contains("test-job"))
assertEquals("test-job", job.getName())
assertEquals(1, jobRegistry.getJobNames().size())
assertEquals(job.getName(), jobRegistry.getJobNames().iterator().next())
Assertions.assertNotNull(jobLauncher)
Assertions.assertNotNull(jobRepository)
Assertions.assertNotNull(jobExplorer)
Assertions.assertNotNull(jobRegistry)
Assertions.assertNotNull(jobOperator)
assertTrue(exception.getMessage().contains("JobRegistry"))
assertEquals("foo", processor.postProcessBeforeInitialization("foo", "bar"))
assertEquals("foo", processor.postProcessAfterInitialization("foo", "bar"))
assertNotNull(processor.postProcessAfterInitialization(job, "bar"))
assertEquals("[foo]", registry.getJobNames().toString())
assertNotNull(processor.postProcessAfterInitialization(job, "bar"))
assertEquals("[jobs.foo]", registry.getJobNames().toString())
assertTrue(exception.getCause() instanceof DuplicateJobException)
assertNotNull(processor.postProcessAfterInitialization(job, "bar"))
assertEquals("[]", registry.getJobNames().toString())
assertEquals(count, configurations.size())
assertNotNull(registry.getJob("test-job"))
assertEquals(context.getBean("test-job-with-name"), registry.getJob("foo"))
assertEquals(context.getBean("test-job-with-bean-name"), registry.getJob("bar"))
assertEquals(context.getBean("test-job-with-parent-and-name"), registry.getJob("spam"))
assertEquals(context.getBean("test-job-with-parent-and-bean-name"), registry.getJob("bucket"))
assertEquals(context.getBean("test-job-with-concrete-parent"), registry.getJob("maps"))
assertEquals(context.getBean("test-job-with-concrete-parent-and-name"), registry.getJob("oof"))
assertEquals(context.getBean("test-job-with-concrete-parent-and-bean-name"), registry.getJob("rab"))
assertNotNull(factory.createJob())
assertEquals("bar", factory.getJobName())
assertEquals(1, registry.getJobNames().size())
assertEquals(0, registry.getJobNames().size())
assertNotNull(context)
assertEquals("test-job", factory.createApplicationContext().getBeanNamesForType(Job.class)[0])
assertEquals("test-job", context.getBeanNamesForType(Job.class)[0])
assertEquals("bar", context.getBean("test-job", Job.class).getName())
assertEquals("test-job", context.getBeanNamesForType(Job.class)[0])
assertEquals("spam", context.getBean("test-job", Job.class).getName())
assertEquals("test-job", context.getBeanNamesForType(Job.class)[0])
assertEquals("spam", context.getBean("test-job", Job.class).getName())
assertEquals("test-job", context.getBeanNamesForType(Job.class)[0])
assertEquals("${foo}", context.getBean("test-job", Job.class).getName())
assertEquals("test-job", context.getBeanNamesForType(Job.class)[0])
assertEquals("bar", context.getBean("test-job", Job.class).getName())
assertEquals(other, factory)
assertEquals(other.hashCode(), factory.hashCode())
assertEquals(other, factory)
assertEquals(other.hashCode(), factory.hashCode())
assertEquals("concrete-job", context.getBeanNamesForType(Job.class)[0])
assertEquals("bar", context.getBean("concrete-job", Job.class).getName())
assertNotNull(context.getBean("concrete-job", JobSupport.class).getStep("step31"))
assertNotNull(context.getBean("concrete-job", JobSupport.class).getStep("step32"))
assertTrue(autowiredFound)
assertEquals(context.getBean("bean1"), "bean1")
assertEquals(context.getBean("bean2"), "bean2")
assertEquals(context.getBean("bean3"), "bean3")
assertEquals(context.getBean("bean4"), "bean4")
assertEquals(context.getBean("bean1"), "bean1")
assertEquals(context.getBean("bean2"), "bean2")
assertEquals(context.getBean("bean3"), "bean3")
assertEquals(context.getBean("bean4"), "bean4")
assertEquals(1, bean.counter1)
assertEquals(1, bean.counter2)
assertNull(new StepExecution("step", null).getId())
assertNull(new StepExecution("stepName", new JobExecution(new JobInstance(null, "foo"), null)).getId())
assertNull(execution.getEndTime())
assertEquals(now, execution.getEndTime())
assertNotNull(execution.getCreateTime())
assertEquals(now, execution.getCreateTime())
assertEquals(BatchStatus.STARTING, execution.getStatus())
assertEquals(BatchStatus.COMPLETED, execution.getStatus())
assertEquals(23, execution.getJobExecutionId().longValue())
assertEquals(ExitStatus.EXECUTING, execution.getExitStatus())
assertEquals(ExitStatus.COMPLETED, execution.getExitStatus())
assertEquals(123, execution.getCommitCount())
assertEquals(123, execution.getFilterCount())
assertNotNull(execution.getJobExecution())
assertEquals(1, execution.getReadSkipCount())
assertEquals(1, execution.getWriteSkipCount())
assertEquals(1, execution.getReadCount())
assertEquals(7, execution.getWriteCount())
assertEquals(1, execution.getFilterCount())
assertFalse(execution.isTerminateOnly())
assertTrue(execution.isTerminateOnly())
assertNotNull(execution.getExecutionContext())
assertEquals("bar", execution.getExecutionContext().getString("foo"))
assertNotEquals(stepExecution1, stepExecution2)
assertEquals(stepExecution1, stepExecution2)
assertNotEquals(null, stepExecution)
assertNotEquals(stepExecution, blankExecution)
assertNotEquals(stepExecution, blankExecution)
assertEquals(execution, execution)
assertNotEquals(execution, stepExecution)
assertEquals("name", execution.getStepName())
assertEquals(stepExecution.getJobExecutionId(), execution.getJobExecutionId())
assertEquals(execution, stepExecution)
assertTrue(set.contains(execution))
assertTrue(set.contains(execution))
assertEquals(execution, clone)
assertEquals(status, clone.getExitStatus())
assertNotNull(clone.getFailureExceptions())
assertEquals(0, execution.getFailureExceptions().size())
assertEquals(1, execution.getFailureExceptions().size())
assertEquals(exception, execution.getFailureExceptions().get(0))
assertEquals(BatchStatus.FAILED, execution.getStatus())
assertEquals(expectedDuration, duration)
assertNull(duration)
assertNull(duration)
assertEquals("2h31m12s42ms", formattedDuration)
assertEquals("31m12s42ms", formattedDuration)
assertEquals("12s42ms", formattedDuration)
assertEquals("42ms", formattedDuration)
assertTrue(formattedDuration.isEmpty())
assertTrue(formattedDuration.isEmpty())
assertTrue(formattedDuration.isEmpty())
assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus())
assertTrue(meters.size() >= EXPECTED_SPRING_BATCH_METRICS)
assertNotNull(proxied)
assertEquals("foo", parent.getName())
assertNotNull(proxied)
assertEquals("foo", parent.getName())
assertNull(StepSynchronizationManager.getContext())
assertNotNull(StepSynchronizationManager.getContext())
assertNull(StepSynchronizationManager.getContext())
assertEquals(0, list.size())
assertEquals(context.attributeNames().length, task.get().attributeNames().length)
assertNull(StepSynchronizationManager.getContext())
assertNull(StepSynchronizationManager.getContext())
assertEquals(1, list.size())
assertNull(StepSynchronizationManager.getContext())
assertNull(StepSynchronizationManager.getContext())
assertNotNull(StepSynchronizationManager.getContext())
assertNull(StepSynchronizationManager.getContext())
assertNotNull(stepContext)
assertEquals("bar", context.getStepContext().getJobParameters().get("foo"))
assertFalse(context.isComplete())
assertTrue(context.isComplete())
assertEquals(BatchStatus.COMPLETED, execution.getStatus())
assertEquals(2, execution.getStepExecutions().iterator().next().getReadCount())
assertEquals(2, execution.getStepExecutions().iterator().next().getWriteCount())
assertEquals(BatchStatus.FAILED, execution.getStatus())
assertNotNull(context.getJobExecution())
assertEquals(context, context)
assertFalse(context.equals(null))
assertEquals(new JobContext(jobExecution), context)
assertEquals(1, list.size())
assertEquals("bar", list.get(0))
assertEquals(1, list.size())
assertEquals("fail!", exception.getMessage())
assertEquals(2, list.size())
assertTrue(list.contains("bar"))
assertTrue(list.contains("spam"))
assertEquals("job", context.getJobName())
assertEquals("bar", context.getJobExecutionContext().get("foo"))
assertEquals("bar", context.getSystemProperties().getProperty("foo"))
assertEquals("bar", context.getJobParameters().get("foo"))
assertEquals("jobExecution#1", context.getId())
assertNull(JobSynchronizationManager.getContext())
assertNotNull(JobSynchronizationManager.getContext())
assertNull(JobSynchronizationManager.getContext())
assertEquals(0, list.size())
assertEquals(context.attributeNames().length, task.get().attributeNames().length)
assertNull(JobSynchronizationManager.getContext())
assertNull(JobSynchronizationManager.getContext())
assertEquals(1, list.size())
assertNull(JobSynchronizationManager.getContext())
assertNull(JobSynchronizationManager.getContext())
assertNotNull(JobSynchronizationManager.getContext())
assertNull(JobSynchronizationManager.getContext())
assertEquals(Long.valueOf(123), chunkContext.getStepContext().getStepExecution().getId())
assertEquals(RepeatStatus.FINISHED, callback.doInIteration(null))
assertEquals(ExitStatus.EXECUTING, stepExecution.getExitStatus())
assertEquals(RepeatStatus.FINISHED, callback.doInIteration(null))
assertTrue(addedAttribute)
assertTrue(removedAttribute)
assertFalse(removedAttribute)
assertNotNull(context.getStepExecution())
assertEquals(context, context)
assertFalse(context.equals(null))
assertEquals(new StepContext(stepExecution), context)
assertEquals(1, list.size())
assertEquals("bar", list.get(0))
assertEquals(1, list.size())
assertEquals("fail!", exception.getMessage())
assertEquals(2, list.size())
assertTrue(list.contains("bar"))
assertTrue(list.contains("spam"))
assertEquals("step", context.getStepName())
assertEquals("job", context.getJobName())
assertEquals(2L, (long) context.getJobInstanceId())
assertEquals("bar", context.getStepExecutionContext().get("foo"))
assertEquals("bar", context.getSystemProperties().getProperty("foo"))
assertEquals("bar", context.getJobExecutionContext().get("foo"))
assertEquals("bar", context.getJobParameters().get("foo"))
assertEquals("execution#1", context.getId())
assertEquals(beanCount, beanFactory.getBeanDefinitionCount())
assertEquals("bar", simple.getName())
assertEquals("foo", simple.getName())
assertEquals(foo, value)
assertTrue(context.hasAttribute("foo"))
assertEquals("bar", value)
assertTrue(context.hasAttribute("foo"))
assertNotNull(id)
assertEquals(0, list.size())
assertEquals(1, list.size())
assertEquals(0, list.size())
assertEquals(2, list.size())
assertFalse(context.hasAttribute("foo"))
assertEquals(Integer.MAX_VALUE, scope.getOrder())
assertEquals(11, scope.getOrder())
assertEquals(1, scopes.length)
assertEquals("foo", scopes[0])
assertNotNull(proxied)
assertEquals(1, StringUtils.countOccurrencesOf(TestDisposableCollaborator.message, "destroyed"))
assertNotNull(nested)
assertEquals(1, StringUtils.countOccurrencesOf(TestDisposableCollaborator.message, "destroyed"))
assertNotNull(nested)
assertEquals(4, TestAdvice.names.size())
assertEquals("bar", TestAdvice.names.get(0))
assertEquals(1, StringUtils.countOccurrencesOf(TestDisposableCollaborator.message, "destroyed"))
assertNotNull(ref)
assertEquals(4, TestAdvice.names.size())
assertEquals("spam", TestAdvice.names.get(0))
assertEquals(2, StringUtils.countOccurrencesOf(TestDisposableCollaborator.message, "destroyed"))
assertEquals(1, StringUtils.countOccurrencesOf(TestDisposableCollaborator.message, "bar:destroyed"))
assertEquals(1, StringUtils.countOccurrencesOf(TestDisposableCollaborator.message, "spam:destroyed"))
assertNotNull(nested)
assertEquals(1, TestAdvice.names.size())
assertEquals(name, TestAdvice.names.get(0))
assertEquals(beanCount, beanFactory.getBeanDefinitionCount())
assertEquals("foo", value.getName())
assertEquals("bar", nested.getParent().getName())
assertEquals(beanCount, beanFactory.getBeanDefinitionCount())
assertEquals("bar", simple.getName())
assertEquals("bar", simple.getName())
assertEquals("bar-bar", compound.getName())
assertEquals("bar-bar", compound.getName())
assertEquals("spam-bar", compound.getName())
assertEquals("bar", ref.getParent().getName())
assertEquals("bar", value.getParent().getName())
assertEquals("[bar]", list.getList().toString())
assertEquals("bar", nested.getParent().getName())
assertEquals("bar", scopedRef.getParent().getName())
assertEquals("spam", scopedRef.getParent().getName())
assertEquals(foo, value)
assertTrue(context.hasAttribute("foo"))
assertEquals("bar", value)
assertTrue(context.hasAttribute("foo"))
assertEquals("spam", value)
assertTrue(context.hasAttribute("foo"))
assertEquals("bar", scope.get("foo", null))
assertSame(other, context)
assertNotNull(id)
assertEquals(0, list.size())
assertEquals(1, list.size())
assertEquals(0, list.size())
assertEquals(2, list.size())
assertFalse(context.hasAttribute("foo"))
assertEquals(Integer.MAX_VALUE, scope.getOrder())
assertEquals(11, scope.getOrder())
assertEquals(1, scopes.length)
assertEquals("foo", scopes[0])
assertEquals(beanCount, beanFactory.getBeanDefinitionCount())
assertTrue(AopUtils.isCglibProxy(simple))
assertEquals("bar", simple.getName())
assertTrue(AopUtils.isCglibProxy(simpleProxyTargetClassTrue))
assertEquals("bar", simpleProxyTargetClassTrue.getName())
assertTrue(AopUtils.isJdkDynamicProxy(simpleProxyTargetClassFalse))
assertEquals("bar", simpleProxyTargetClassFalse.getName())
assertTrue(TestStep.getContext().attributeNames().length > 0)
assertNotNull(collaborator)
assertEquals("foo", collaborator)
assertNotNull(parent)
assertEquals("bar", parent)
assertEquals("bar", parent)
assertEquals("bar", parent)
assertEquals(beanCount, beanFactory.getBeanDefinitionCount())
assertEquals("bar", simple.getName())
assertEquals("bar", simple.getName())
assertEquals(beanCount, beanFactory.getBeanDefinitionCount())
assertEquals("bar", simple.getName())
assertEquals("bar", simple.getName())
assertEquals(beanCount, beanFactory.getBeanDefinitionCount())
assertEquals("bar", simple.getName())
assertEquals("bar", simple.getName())
assertEquals("bar-bar", compound.getName())
assertEquals("bar-bar", compound.getName())
assertEquals("spam-bar", compound.getName())
assertEquals("bar", ref.getParent().getName())
assertEquals("bar", value.getParent().getName())
assertEquals("[bar]", list.getList().toString())
assertEquals("bar", nested.getParent().getName())
assertEquals("bar", scopedRef.getParent().getName())
assertEquals("spam", scopedRef.getParent().getName())
assertNotNull(proxied)
assertEquals(1, StringUtils.countOccurrencesOf(TestDisposableCollaborator.message, "destroyed"))
assertNotNull(nested)
assertEquals(1, StringUtils.countOccurrencesOf(TestDisposableCollaborator.message, "destroyed"))
assertNotNull(nested)
assertEquals(4, TestAdvice.names.size())
assertEquals("bar", TestAdvice.names.get(0))
assertEquals(1, StringUtils.countOccurrencesOf(TestDisposableCollaborator.message, "destroyed"))
assertNotNull(ref)
assertEquals(4, TestAdvice.names.size())
assertEquals("spam", TestAdvice.names.get(0))
assertEquals(2, StringUtils.countOccurrencesOf(TestDisposableCollaborator.message, "destroyed"))
assertEquals(1, StringUtils.countOccurrencesOf(TestDisposableCollaborator.message, "bar:destroyed"))
assertEquals(1, StringUtils.countOccurrencesOf(TestDisposableCollaborator.message, "spam:destroyed"))
assertNotNull(nested)
assertEquals(1, TestAdvice.names.size())
assertEquals(name, TestAdvice.names.get(0))
assertEquals(beanCount, beanFactory.getBeanDefinitionCount())
assertEquals("bar", simple.getName())
assertEquals("foo", simple.getName())
assertNotNull(TestStep.getContext())
assertNull(StepSynchronizationManager.getContext())
assertTrue(TestStep.getContext().attributeNames().length > 0)
assertNotNull(collaborator)
assertEquals("bar", collaborator)
assertTrue(TestStep.getContext().attributeNames().length > 0)
assertNotNull(collaborator)
assertEquals("foo", collaborator)
assertNotNull(parent)
assertEquals("bar", parent)
assertTrue(TestStep.getContext().attributeNames().length > 0)
assertNotNull(collaborator)
assertEquals("bar", collaborator)
assertTrue(TestStep.getContext().attributeNames().length > 0)
assertNotNull(collaborator)
assertEquals("bar", collaborator)
assertTrue(TestStep.getContext().attributeNames().length > 0)
assertNotNull(collaborator)
assertEquals("bar", collaborator)
assertNotNull(TestJob.getContext())
assertNull(JobSynchronizationManager.getContext())
assertTrue(TestJob.getContext().attributeNames().length > 0)
assertNotNull(collaborator)
assertEquals("bar", collaborator)
assertTrue(TestJob.getContext().attributeNames().length > 0)
assertNotNull(collaborator)
assertEquals("foo", collaborator)
assertNotNull(parent)
assertEquals("bar", parent)
assertTrue(TestJob.getContext().attributeNames().length > 0)
assertNotNull(collaborator)
assertEquals("bar", collaborator)
assertTrue(TestJob.getContext().attributeNames().length > 0)
assertNotNull(collaborator)
assertEquals("bar", collaborator)
assertTrue(TestJob.getContext().attributeNames().length > 0)
assertNotNull(collaborator)
assertEquals("bar", collaborator)
assertEquals(finalParams.getString("foo"), "baz")
assertEquals(finalParams.getString("bar"), "baz")
assertEquals(finalParams.getString("baz"), "quix")
assertEquals(date, parameters.getDate("SCHEDULE_DATE"))
assertEquals(1L, parameters.getLong("LONG").longValue())
assertEquals("string value", parameters.getString("STRING"))
assertFalse(parameters.getParameters().get("SCHEDULE_DATE").isIdentifying())
assertFalse(parameters.getParameters().get("LONG").isIdentifying())
assertFalse(parameters.getParameters().get("STRING").isIdentifying())
assertFalse(parameters.getParameters().get("DOUBLE").isIdentifying())
assertEquals(date, parameters.getDate("SCHEDULE_DATE"))
assertEquals(1L, parameters.getLong("LONG").longValue())
assertEquals("string value", parameters.getString("STRING"))
assertEquals("STRING", parameters.next())
assertEquals("SCHEDULE_DATE", parameters.next())
assertEquals("LONG", parameters.next())
assertEquals("STRING", parameters.next())
assertEquals("foo", parameters.next())
assertEquals("bar", parameters.next())
assertEquals("spam", parameters.next())
assertEquals(1, parameters.size())
assertEquals("bar", parameters.get("foo").getValue())
assertEquals("No job parameters incrementer found for job=simpleJob", expectedException.getMessage())
assertEquals(1, parameters.getLong("run.id"))
assertEquals(date, parameters.getDate("SCHEDULE_DATE"))
assertEquals(1L, parameters.getLong("LONG").longValue())
assertEquals("string value", parameters.getString("STRING"))
assertEquals(paramCount, parameters.getParameters().size())
assertEquals("test", jobParameter.getValue())
assertEquals(String.class, jobParameter.getType())
assertTrue(jobParameter.isIdentifying())
assertEquals(1L, jobParameter.getValue())
assertEquals(Long.class, jobParameter.getType())
assertTrue(jobParameter.isIdentifying())
assertEquals(1.1, jobParameter.getValue())
assertEquals(Double.class, jobParameter.getType())
assertTrue(jobParameter.isIdentifying())
assertEquals(new Date(0L), jobParameter.getValue())
assertEquals(Date.class, jobParameter.getType())
assertTrue(jobParameter.isIdentifying())
assertEquals(jobParameter, testParameter)
assertEquals(testParameter.hashCode(), jobParameter.hashCode())
assertEquals(jobExecution, lastJobExecution)
assertNull(jobExplorer.getJobExecution(123L))
assertEquals(jobInstance, stepExecution.getJobExecution().getJobInstance())
assertNull(jobExplorer.getStepExecution(jobExecution.getId(), 123L))
assertNull(jobExplorer.getStepExecution(jobExecution.getId(), 123L))
assertEquals(this.jobInstance, jobInstance)
assertEquals(jobInstance, lastJobInstance)
assertEquals(4, jobExplorer.getJobInstanceCount("myJob"))
assertEquals(BatchStatus.COMPLETED, jobExplorerStepExecution.getStatus())
assertEquals(1, lastJobExecution.getStepExecutions().size())
assertNotNull(stepExecution.getExecutionContext())
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertEquals(BatchStatus.COMPLETED, execution.getStatus())
assertEquals(BatchStatus.COMPLETED, execution.getStatus())
assertEquals(BatchStatus.COMPLETED, execution.getStatus())
assertEquals(BatchStatus.COMPLETED, execution.getStatus())
assertEquals(BatchStatus.FAILED, execution.getStatus())
assertEquals(BatchStatus.FAILED, execution.getStatus())
assertEquals(stepExecution, result)
assertEquals(TOTAL_ITEMS, stepExecution.getReadCount())
assertEquals(10, stepExecution.getFilterCount())
assertEquals(19, stepExecution.getWriteCount())
assertEquals(1, stepExecution.getWriteSkipCount())
assertEquals(TOTAL_ITEMS, stepExecution.getReadCount())
assertEquals(10, stepExecution.getFilterCount())
assertEquals(19, stepExecution.getWriteCount())
assertEquals(1, stepExecution.getWriteSkipCount())
assertEquals(TOTAL_ITEMS, stepExecution.getReadCount())
assertEquals(20, stepExecution.getFilterCount())
assertEquals(19, stepExecution.getWriteCount())
assertEquals(1, stepExecution.getWriteSkipCount())
assertEquals(TOTAL_ITEMS, stepExecution.getReadCount())
assertEquals(20, stepExecution.getFilterCount())
assertEquals(19, stepExecution.getWriteCount())
assertEquals(1, stepExecution.getWriteSkipCount())
assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
assertEquals(ExitStatus.COMPLETED, stepExecution.getExitStatus())
assertEquals(7, stepExecution.getReadCount())
assertEquals(6, stepExecution.getWriteCount())
assertEquals(1, stepExecution.getProcessSkipCount())
assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
assertEquals(ExitStatus.COMPLETED, stepExecution.getExitStatus())
assertEquals(3, stepExecution.getReadCount())
assertEquals(1, stepExecution.getWriteCount())
assertEquals(1, stepExecution.getWriteSkipCount())
assertEquals(1, stepExecution.getProcessSkipCount())
assertEquals(3, stepExecution.getRollbackCount())
assertEquals(2, stepExecution.getCommitCount())
assertEquals(3, JdbcTestUtils.countRowsInTable(jdbcTemplate, "ERROR_LOG"))
assertEquals(0, JdbcTestUtils.countRowsInTable(jdbcTemplate, "ERROR_LOG"))
assertEquals(3, JdbcTestUtils.countRowsInTable(jdbcTemplate, "ERROR_LOG"))
assertEquals(0, JdbcTestUtils.countRowsInTable(jdbcTemplate, "ERROR_LOG"))
assertNotNull(jobExecution)
assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus())
assertNotNull(jobExecution)
assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus())
assertNotNull(jobExecution)
assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus())
assertNotNull(jobExecution)
assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus())
assertNotNull(jobExecution)
assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus())
assertEquals(1, jobInstances.size())
assertEquals(2, jobExecutions.size())
assertNotNull(jobExecution)
assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus())
assertEquals(before + 1, after)
assertNotNull(execution.getId())
assertEquals(before + 1, after)
assertNotNull(execution.getId())
assertEquals(execution, last)
assertEquals(execution.getExecutionContext(), last.getExecutionContext())
assertEquals(0, before)
assertNotNull(execution)
assertNotNull(execution.getId())
assertEquals(before + 1, after)
assertEquals(1, before)
assertNotNull(execution.getId())
assertEquals(before, after)
assertNotNull(jobExecution)
assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus())
assertNotNull(jobExecution)
assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus())
assertNotNull(jobExecution)
assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus())
assertNotNull(jobExecution)
assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus())
assertNotNull(jobExecution)
assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus())
assertNotNull(jobExecution)
assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus())
assertNotNull(jobExecution)
assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus())
assertNotNull(configuration.getName())
assertEquals("bean", configuration.getName())
assertNotNull(configuration.getName())
assertEquals("foo", configuration.getName())
assertEquals("foo", configuration.getName())
assertNotNull(configuration.getName())
assertEquals("bar", configuration.getName())
assertEquals("bar", configuration.getName())
assertEquals("foo", configuration.getName())
assertEquals(BatchStatus.FAILED, execution.getStatus())
assertEquals(BatchStatus.UNKNOWN, execution.getStatus())
assertEquals(1, execution.getStepExecutions().size())
assertNull(job.getName())
assertEquals("job", job.getName())
assertEquals(null, job.getName())
assertEquals("foo", job.getName())
assertTrue(job.isRestartable())
assertFalse(job.isRestartable())
assertTrue(exception.getMessage().contains("JobRepository"))
assertEquals(BatchStatus.FAILED, execution.getStatus())
assertEquals("FOO", execution.getFailureExceptions().get(0).getMessage())
assertEquals(StubStep.value, execution.getExecutionContext().get(StubStep.key))
assertEquals(StubStep.value, restarted.getExecutionContext().get(StubStep.key))
assertEquals(BatchStatus.FAILED, execution.getStatus())
assertEquals(BatchStatus.UNKNOWN, execution.getStatus())
assertEquals(ExitStatus.COMPLETED, stepExecution.getExitStatus())
assertEquals(ExitStatus.COMPLETED, stepExecution.getExitStatus())
assertEquals(3, jobExecution.getStepExecutions().size())
assertEquals(ExitStatus.COMPLETED, stepExecution.getExitStatus())
assertEquals(ExitStatus.FAILED, stepExecution.getExitStatus())
assertEquals(ExitStatus.FAILED, stepExecution.getExitStatus())
assertEquals(3, jobExecution.getStepExecutions().size())
assertEquals(ExitStatus.COMPLETED, stepExecution.getExitStatus())
assertEquals(ExitStatus.COMPLETED, stepExecution.getExitStatus())
assertEquals("bar", stepExecution.getExecutionContext().get("foo"))
assertEquals("foo", execution.getName())
assertEquals("BAR", execution.getStatus().getName())
assertEquals("foo", exception.getMessage())
assertEquals("foo", exception.getMessage())
assertEquals("bar", exception.getCause().getMessage())
assertTrue(transition.isEnd())
assertNull(transition.getNext())
assertTrue(transition.matches("CONTINUABLE"))
assertTrue(transition.matches("CONTINUABLE"))
assertTrue(transition.matches("CONTINUABLE"))
assertTrue(transition.matches("CONTINUABLE"))
assertTrue(transition.matches("CONTINUABLE"))
assertTrue(transition.matches("CONTINUABLE"))
assertEquals(0, comparator.compare(transition, transition))
assertEquals(1, comparator.compare(transition, other))
assertEquals(-1, comparator.compare(other, transition))
assertEquals(1, comparator.compare(transition, other))
assertEquals(-1, comparator.compare(other, transition))
assertEquals(1, comparator.compare(transition, other))
assertEquals(-1, comparator.compare(other, transition))
assertEquals(1, comparator.compare(transition, other))
assertEquals(-1, comparator.compare(other, transition))
assertEquals(1, comparator.compare(transition, other))
assertEquals(-1, comparator.compare(other, transition))
assertEquals(FlowExecutionStatus.COMPLETED, execution.getStatus())
assertEquals("step", execution.getName())
assertEquals(FlowExecutionStatus.COMPLETED, execution.getStatus())
assertEquals("step1", execution.getName())
assertEquals(FlowExecutionStatus.COMPLETED, execution.getStatus())
assertEquals("step1", execution.getName())
assertEquals(1, list.size())
assertEquals(FlowExecutionStatus.COMPLETED, execution.getStatus())
assertEquals("step1", execution.getName())
assertEquals(FlowExecutionStatus.COMPLETED, execution.getStatus())
assertEquals("step", execution.getName())
assertEquals(FlowExecutionStatus.COMPLETED, execution.getStatus())
assertEquals("step2", execution.getName())
assertEquals(FlowExecutionStatus.COMPLETED, execution.getStatus())
assertEquals("step2", execution.getName())
assertEquals(FlowExecutionStatus.COMPLETED, execution.getStatus())
assertEquals("step2", execution.getName())
assertEquals(FlowExecutionStatus.COMPLETED, execution.getStatus())
assertEquals("step3", execution.getName())
assertNotNull(state)
assertEquals("step1", state.getName())
assertNull(state)
assertEquals(FlowExecutionStatus.COMPLETED, result)
assertEquals(FlowExecutionStatus.COMPLETED, result)
assertEquals(FlowExecutionStatus.FAILED, aggregator.aggregate(Arrays.asList(first, second)))
assertEquals(FlowExecutionStatus.UNKNOWN, aggregator.aggregate(Collections.<FlowExecution>emptySet()))
assertEquals(status, jobExecution.getStatus())
assertEquals(FlowExecutionStatus.UNKNOWN, status)
assertEquals(2, job.getStepNames().size())
assertEquals(ExitStatus.COMPLETED, stepExecution.getExitStatus())
assertEquals(2, jobExecution.getStepExecutions().size())
assertEquals(ExitStatus.COMPLETED, stepExecution.getExitStatus())
assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
assertEquals(2, jobExecution.getStepExecutions().size())
assertEquals(ExitStatus.FAILED, jobExecution.getExitStatus())
assertEquals(2, jobExecution.getStepExecutions().size())
assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus())
assertEquals(1, jobExecution.getStepExecutions().size())
assertEquals(2, jobExecution.getStepExecutions().size())
assertEquals(BatchStatus.STOPPED, jobExecution.getStatus())
assertEquals(BatchStatus.STOPPED, jobExecution.getStatus())
assertEquals(1, jobExecution.getAllFailureExceptions().size())
assertEquals(JobInterruptedException.class, jobExecution.getFailureExceptions().get(0).getClass())
assertEquals(BatchStatus.UNKNOWN, jobExecution.getStatus())
assertEquals(1, jobExecution.getAllFailureExceptions().size())
assertEquals(JobInterruptedException.class, jobExecution.getFailureExceptions().get(0).getClass())
assertEquals(BatchStatus.STOPPED, jobExecution.getStatus())
assertEquals(1, jobExecution.getAllFailureExceptions().size())
assertEquals(JobInterruptedException.class, jobExecution.getFailureExceptions().get(0).getClass())
assertEquals(1, jobExecution.getStepExecutions().size())
assertEquals(BatchStatus.STOPPED, jobExecution.getStatus())
assertEquals(1, jobExecution.getAllFailureExceptions().size())
assertEquals(JobInterruptedException.class, jobExecution.getFailureExceptions().get(0).getClass())
assertEquals(BatchStatus.STOPPED, jobExecution.getStatus())
assertEquals(1, jobExecution.getAllFailureExceptions().size())
assertEquals(JobInterruptedException.class, jobExecution.getFailureExceptions().get(0).getClass())
assertEquals(1, jobExecution.getStepExecutions().size())
assertEquals(BatchStatus.STOPPED, jobExecution.getStatus())
assertEquals(BatchStatus.FAILED, jobExecution.getStatus())
assertEquals(1, jobExecution.getStepExecutions().size())
assertEquals(BatchStatus.STOPPED, jobExecution.getStatus())
assertEquals(1, jobExecution.getStepExecutions().size())
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertEquals(1, jobExecution.getStepExecutions().size())
assertEquals(ExitStatus.COMPLETED, stepExecution.getExitStatus())
assertEquals(2, jobExecution.getStepExecutions().size())
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertNotNull(stepExecution)
assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
assertEquals(2, jobExecution.getStepExecutions().size())
assertNotNull(stepExecution)
assertNotNull(step)
assertEquals("step2", step.getName())
assertNotNull(step)
assertEquals("step", step.getName())
assertEquals("[step]", job.getStepNames().toString())
assertNull(step)
assertNull(step)
assertEquals("[step1, step2]", names.toString())
assertEquals("[step1, step2]", names.toString())
fail("No stepExecution found with name: [" + stepName + "]")
assertEquals(jobInstance.getId(), other.getJobId())
assertEquals(status, other.getStatus())
assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
assertEquals(BatchStatus.COMPLETED, execution.getStatus())
assertEquals(2, execution.getStepExecutions().size())
assertEquals(BatchStatus.COMPLETED, execution.getStatus())
assertEquals(2, execution.getStepExecutions().size())
assertEquals(BatchStatus.COMPLETED, execution.getStatus())
assertEquals(2, execution.getStepExecutions().size())
assertEquals(BatchStatus.COMPLETED, execution.getStatus())
assertEquals(2, execution.getStepExecutions().size())
assertEquals(BatchStatus.COMPLETED, execution.getStatus())
assertEquals(2, execution.getStepExecutions().size())
assertEquals(BatchStatus.COMPLETED, execution.getStatus())
assertEquals(2, execution.getStepExecutions().size())
assertEquals(BatchStatus.COMPLETED, execution.getStatus())
assertEquals(2, execution.getStepExecutions().size())
assertEquals(BatchStatus.COMPLETED, execution.getStatus())
assertEquals(2, execution.getStepExecutions().size())
assertEquals(BatchStatus.COMPLETED, execution.getStatus())
assertEquals(2, execution.getStepExecutions().size())
assertEquals(BatchStatus.COMPLETED, execution.getStatus())
assertEquals(2, execution.getStepExecutions().size())
assertEquals(BatchStatus.COMPLETED, execution.getStatus())
assertEquals("FOO", execution.getExitStatus().getExitCode())
assertEquals(1, execution.getStepExecutions().size())
assertEquals(BatchStatus.STOPPED, execution.getStatus())
assertEquals("STOPPED", execution.getExitStatus().getExitCode())
assertEquals(1, execution.getStepExecutions().size())
assertEquals(BatchStatus.STOPPED, execution.getStatus())
assertEquals(1, execution.getStepExecutions().size())
assertEquals(BatchStatus.COMPLETED, execution.getStatus())
assertEquals(1, execution.getStepExecutions().size())
assertEquals("step2", execution.getStepExecutions().iterator().next().getStepName())
assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus())
assertEquals(stepExecutionA.getStepName(), "stepA")
assertEquals(stepExecutionC.getStepName(), "stepC")
assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus())
assertEquals(1, AnnotationBasedJobExecutionListener.beforeJobCount)
assertEquals(1, AnnotationBasedJobExecutionListener.afterJobCount)
assertEquals(1, InterfaceBasedJobExecutionListener.beforeJobCount)
assertEquals(1, InterfaceBasedJobExecutionListener.afterJobCount)
assertEquals(1, jobExecution.getStepExecutions().size())
assertEquals(2, job.getStepNames().size())
assertEquals(1, jobExecution.getStepExecutions().size())
assertEquals(customStatus, jobExecution.getExitStatus())
assertEquals(2, list.size())
assertNotNull(jobExecution.getEndTime())
assertNotNull(jobExecution.getStartTime())
assertEquals(1, step1.passedInJobContext.size())
assertFalse(step2.passedInJobContext.isEmpty())
assertEquals(4, list.size())
assertEquals(2, list.size())
assertEquals(jobInstance, jobExecution.getJobInstance())
assertEquals(2, jobExecution.getStepExecutions().size())
assertEquals(step1.getName(), stepExecution1.getStepName())
assertEquals(step2.getName(), stepExecution2.getStepName())
assertEquals(1, jobExecution.getAllFailureExceptions().size())
assertEquals(exception, jobExecution.getStepExecutions().iterator().next().getFailureExceptions().get(0))
assertEquals(0, list.size())
assertEquals(1, jobExecution.getAllFailureExceptions().size())
assertEquals(exception, jobExecution.getStepExecutions().iterator().next().getFailureExceptions().get(0))
assertEquals(0, list.size())
assertEquals(1, jobExecution.getAllFailureExceptions().size())
assertEquals(exception, jobExecution.getAllFailureExceptions().get(0))
assertEquals(0, list.size())
assertEquals(BatchStatus.FAILED, jobExecution.getStatus())
assertEquals(1, jobExecution.getAllFailureExceptions().size())
assertEquals(exception, jobExecution.getAllFailureExceptions().get(0))
assertEquals(1, list.size())
assertEquals(1, jobExecution.getAllFailureExceptions().size())
assertEquals(exception, jobExecution.getAllFailureExceptions().get(0))
assertEquals(0, list.size())
assertEquals(1, jobExecution.getFailureExceptions().size())
assertEquals(0, jobExecution.getFailureExceptions().size())
assertEquals(1, jobExecution.getStepExecutions().size())
assertEquals(stepExecution2.getStepName(), jobExecution.getStepExecutions().iterator().next().getStepName())
assertEquals(0, jobExecution.getFailureExceptions().size())
assertEquals(3, jobExecution.getStepExecutions().size())
assertEquals(stepExecution1.getStepName(), jobExecution.getStepExecutions().iterator().next().getStepName())
assertSame(exception, e)
assertSame(exception, e)
assertTrue(step1.passedInStepContext.isEmpty())
assertFalse(step2.passedInStepContext.isEmpty())
assertEquals(BatchStatus.STOPPED, jobExecution.getStatus())
assertEquals(1, jobExecution.getAllFailureExceptions().size())
assertSame(exception, e)
assertEquals(1, step1.passedInJobContext.size())
assertFalse(step2.passedInJobContext.isEmpty())
assertFalse(jobExecution.getExecutionContext().isEmpty())
assertEquals(1, jobExecution.getAllFailureExceptions().size())
assertSame(exception, e)
assertFalse(step1.passedInJobContext.isEmpty())
assertFalse(step2.passedInJobContext.isEmpty())
assertNotNull(step)
assertEquals("step2", step.getName())
assertNull(step)
assertEquals(jobInstance, this.jobRepository.getLastJobExecution(job.getName(), jobParameters).getJobInstance())
assertEquals(jobInstance.getId(), jobExecution.getJobId())
assertEquals(status, jobExecution.getStatus())
assertNull(new JobExecution(new JobInstance(null, "foo"), null).getId())
assertNull(execution.getEndTime())
assertEquals(now, execution.getEndTime())
assertTrue(execution.isRunning())
assertTrue(execution.isRunning())
assertTrue(execution.isRunning())
assertFalse(execution.isRunning())
assertFalse(execution.isRunning())
assertEquals(now, execution.getStartTime())
assertEquals(BatchStatus.STARTING, execution.getStatus())
assertEquals(BatchStatus.COMPLETED, execution.getStatus())
assertEquals(BatchStatus.STARTING, execution.getStatus())
assertEquals(BatchStatus.COMPLETED, execution.getStatus())
assertEquals(BatchStatus.FAILED, execution.getStatus())
assertEquals(11, execution.getJobId().longValue())
assertEquals(23, execution.getJobId().longValue())
assertEquals(null, execution.getJobId())
assertNotNull(execution.getJobInstance())
assertEquals(ExitStatus.UNKNOWN, execution.getExitStatus())
assertEquals("23", execution.getExitStatus().getExitCode())
assertEquals("foo", execution.getJobInstance().getJobName())
assertEquals(0, execution.getStepExecutions().size())
assertEquals(1, execution.getStepExecutions().size())
assertEquals(0, execution.getStepExecutions().size())
assertEquals(1, execution.getStepExecutions().size())
assertEquals(2, execution.getStepExecutions().size())
assertEquals(0, execution.getStepExecutions().size())
assertEquals(1, execution.getStepExecutions().size())
assertEquals(0, execution.getStepExecutions().size())
assertEquals(1, execution.getStepExecutions().size())
assertEquals(2, execution.getStepExecutions().size())
assertEquals(execution, clone)
assertNotNull(clone.createStepExecution("foo"))
assertNotNull(clone.getFailureExceptions())
assertEquals(0, execution.getFailureExceptions().size())
assertEquals(1, execution.getFailureExceptions().size())
assertEquals(exception, execution.getFailureExceptions().get(0))
assertEquals(2, allExceptions.size())
assertEquals(1, execution.getFailureExceptions().size())
assertTrue(allExceptions.contains(exception))
assertTrue(allExceptions.contains(stepException1))
assertEquals(2, foo.getId())
assertEquals(3, foo.getId())
assertNull(itemReader.read())
assertFalse(policy.isComplete(context))
assertEquals(0, contribution.getFilterCount())
assertEquals(1, contribution.getFilterCount())
assertNotEquals(null, contribution)
assertEquals(new StepExecution("foo", null).createStepContribution(), contribution)
assertEquals(new StepExecution("foo", null).createStepContribution().hashCode(), contribution.hashCode())
Assertions.assertInstanceOf(DummyJobRepository.class, jobRepository)
fail("No stepExecution found with name: [" + stepName + "]", "A execução falhou por uma causa deliberada")
assertEquals(8, count)
assertEquals(4, count)
assertEquals("Planned failure", exception.getMessage())
assertEquals(4, count)
assertEquals(3, stepExecution.getJobExecution().getStepExecutions().size())
assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
assertEquals(3, stepExecution.getJobExecution().getStepExecutions().size())
assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
assertEquals(3, stepExecution.getJobExecution().getStepExecutions().size())
assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
assertEquals(3, stepExecution.getJobExecution().getStepExecutions().size())
assertEquals(BatchStatus.STOPPED, stepExecution.getStatus())
assertEquals(true, stepExecution.getExecutionContext().get("aggregated"))
assertEquals(2, execs.size())
assertEquals(2, execs.size())
assertEquals(1, execs.size())
assertEquals(1, splitter.split(stepExecution, 2).size())
assertEquals(2, split.size())
assertEquals(2, provider.split(stepExecution, 3).size())
assertEquals(1, split.size())
assertEquals("step:foo", split.iterator().next().getStepName())
assertEquals("step:foo", split.iterator().next().getStepName())
assertEquals("step", provider.getStepName())
assertEquals(2, split.size())
assertEquals(2, split.size())
assertEquals(0, provider.split(nextExecution, 2).size())
assertEquals(2, split.size())
assertEquals(2, provider.split(stepExecution, 2).size())
assertEquals(2, split.size())
assertEquals(2, split.size())
assertNotNull(result)
assertEquals(BatchStatus.STARTING, result.getStatus())
assertNotNull(result)
assertEquals(BatchStatus.STARTING, result.getStatus())
assertNotNull(result)
assertEquals(BatchStatus.FAILED, result.getStatus())
assertNotNull(result)
assertEquals(BatchStatus.FAILED, result.getStatus())
assertNotNull(result)
assertEquals(ExitStatus.FAILED.and(ExitStatus.EXECUTING), result.getExitStatus())
assertEquals(12, result.getCommitCount())
assertEquals(14, result.getFilterCount())
assertEquals(16, result.getProcessSkipCount())
assertEquals(18, result.getReadCount())
assertEquals(20, result.getReadSkipCount())
assertEquals(22, result.getRollbackCount())
assertEquals(24, result.getWriteCount())
assertEquals(26, result.getWriteSkipCount())
assertEquals(1, partition.size())
assertTrue(partition.containsKey("partition0"))
assertTrue(new UrlResource(url).exists())
assertTrue(partition.get("partition0").containsKey("foo"))
assertEquals(2, count)
assertEquals("[foo0, foo1]", stepExecutions.toString())
assertEquals(1, count)
assertEquals(1, count)
assertEquals(ExitStatus.FAILED.getExitCode(), stepExecution.getExitStatus().getExitCode())
assertNotNull(partitions)
assertEquals(3, partitions.size())
assertNotNull(partitions.get("partition0"))
assertNotNull(partitions.get("partition1"))
assertNotNull(partitions.get("partition2"))
assertNotNull(jobLauncher)
assertNotNull(jobLauncher.run(job, new JobParameters()))
assertEquals(1, afterManager - beforeManager)
assertEquals(2, afterPartition - beforePartition)
assertNotNull(jobLauncher)
assertEquals(BatchStatus.FAILED, execution.getStatus())
assertEquals(4, ExampleItemWriter.getItems().size())
assertNotNull(jobLauncher.run(job, jobParameters))
assertEquals(4, ExampleItemWriter.getItems().size())
assertEquals(2, afterManager - beforeManager)
assertEquals(3, afterPartition - beforePartition)
assertEquals("foo", exception.getMessage())
assertEquals(1, list.size())
assertEquals(1, list.size())
assertEquals("foo", exception.getMessage())
assertEquals("foo", error.getMessage())
assertEquals("foo", exception.getMessage())
assertEquals(0, JobRegistryBackgroundJobRunner.getErrors().size())
assertEquals(0, JobRegistryBackgroundJobRunner.getErrors().size())
assertEquals(0, JobRegistryBackgroundJobRunner.getErrors().size())
assertEquals(999, value.longValue())
assertEquals(999, value.longValue())
assertEquals(999, value.longValue())
assertEquals(jobExecution.toString(), value)
assertEquals(2, value.size())
assertEquals(111L, value.iterator().next().longValue())
assertEquals("a=b", value)
assertEquals(123L, value.get(0).longValue())
assertEquals(jobInstance, actualJobInstance)
assertEquals(2, names.size())
assertEquals(111L, value.iterator().next().longValue())
assertEquals(BatchStatus.STOPPING, jobExecution.getStatus())
assertEquals(BatchStatus.STOPPING, jobExecution.getStatus())
assertEquals(BatchStatus.STOPPING, jobExecution.getStatus())
assertEquals(BatchStatus.STOPPING, jobExecution.getStatus())
assertEquals(BatchStatus.ABANDONED, jobExecution.getStatus())
assertNotNull(jobExecution.getEndTime())
assertEquals(0, StubSystemExiter.getStatus())
assertEquals(0, StubSystemExiter.getStatus())
assertEquals(1, StubSystemExiter.status)
assertEquals(1, StubSystemExiter.status)
assertEquals(1, StubSystemExiter.status)
assertEquals(0, StubSystemExiter.status)
assertEquals(new JobParameters(), StubJobLauncher.jobParameters)
assertEquals(0, StubSystemExiter.status)
assertEquals(0, StubJobLauncher.jobParameters.getParameters().size())
assertEquals(0, StubSystemExiter.status)
assertEquals(2, StubJobLauncher.jobParameters.getParameters().size())
assertEquals(0, StubSystemExiter.status)
assertEquals(2, StubJobLauncher.jobParameters.getParameters().size())
assertEquals(0, StubSystemExiter.status)
assertEquals(2, StubJobLauncher.jobParameters.getParameters().size())
assertEquals(1, StubSystemExiter.status)
assertEquals(1, StubSystemExiter.status)
assertEquals(1, StubSystemExiter.status)
assertEquals(1, StubSystemExiter.status)
assertEquals(1, StubSystemExiter.status)
assertEquals(0, StubSystemExiter.status)
assertEquals(1, StubSystemExiter.status)
assertEquals(1, StubSystemExiter.status)
assertEquals(0, StubSystemExiter.status)
assertEquals(jobParameters, StubJobLauncher.jobParameters)
assertEquals(0, StubSystemExiter.status)
assertEquals(jobParameters, StubJobLauncher.jobParameters)
assertEquals(1, StubSystemExiter.status)
assertEquals(null, StubJobLauncher.jobParameters)
assertEquals(1, StubSystemExiter.status)
assertEquals(0, StubSystemExiter.status)
assertEquals(jobParameters, StubJobLauncher.jobParameters)
assertEquals(0, StubSystemExiter.status)
assertEquals(jobParameters, StubJobLauncher.jobParameters)
assertEquals(1, StubSystemExiter.getStatus())
assertTrue(StubJobLauncher.destroyed)
assertEquals(1, StubSystemExiter.status)
assertEquals("key must not be null or empty", exception.getMessage())
assertEquals("dataFieldMaxValueIncrementer must not be null", exception.getMessage())
assertEquals(Long.valueOf(10L), runId)
assertEquals(Long.valueOf(10L), runId)
assertEquals("bar", foo)
assertEquals(Long.valueOf(10L), runId)
assertEquals(1, next.getLong("run.id").intValue())
assertEquals(2, incrementer.getNext(next).getLong("run.id").intValue())
assertEquals(1, next.getLong("run.id").intValue())
assertEquals("bar", next.getString("foo"))
assertEquals(1, next.getLong("foo").intValue())
assertEquals(Long.valueOf(6), next.getLong("run.id"))
assertEquals(ecm.intValue(ExitStatus.COMPLETED.getExitCode()), ExitCodeMapper.JVM_EXITCODE_COMPLETED)
assertEquals(ecm.intValue(ExitStatus.FAILED.getExitCode()), ExitCodeMapper.JVM_EXITCODE_GENERIC_ERROR)
assertEquals(ecm.intValue(ExitCodeMapper.JOB_NOT_PROVIDED), ExitCodeMapper.JVM_EXITCODE_JOB_ERROR)
assertEquals(ecm.intValue(ExitCodeMapper.NO_SUCH_JOB), ExitCodeMapper.JVM_EXITCODE_JOB_ERROR)
assertEquals(ecm2.intValue(ExitStatus.COMPLETED.getExitCode()), -1)
assertEquals(ecm2.intValue(ExitStatus.FAILED.getExitCode()), -2)
assertEquals(ecm2.intValue(ExitCodeMapper.JOB_NOT_PROVIDED), -3)
assertEquals(ecm2.intValue(ExitCodeMapper.NO_SUCH_JOB), -3)
assertEquals(ecm.intValue("MY_CUSTOM_CODE"), 3)
assertEquals(ecm.intValue("UNDEFINED_CUSTOM_CODE"), ExitCodeMapper.JVM_EXITCODE_GENERIC_ERROR)
assertEquals(before + 1, after)
assertEquals("foo", exception.getMessage())
assertDoesNotThrow(() -> policy.checkInterrupted(context))
assertTrue(exception.getMessage().contains("interrupt"))
assertEquals(testStep2, stepLocatorStepFactoryBean.getObject())
assertTrue((new StepLocatorStepFactoryBean()).getObjectType().isAssignableFrom(Step.class))
assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
assertEquals("[]", writer.getCommitted().toString())
assertTrue(Step.class.isAssignableFrom(factory.getObjectType()))
assertTrue(factory.getObject() instanceof Step)
assertEquals((RETRY_LIMIT + 1) * ITEM_LIST.size(), processed.size())
assertEquals(ExitStatus.COMPLETED.getExitCode(), stepExecution.getExitStatus().getExitCode())
assertEquals((RETRY_LIMIT + 1) * ITEM_LIST.size(), processed.size())
assertEquals(3, processed.size())
assertEquals(0, stepExecution.getSkipCount())
assertEquals(2, provided.size())
assertEquals(1, processed.size())
assertEquals(0, recovered.size())
assertEquals(1, stepExecution.getReadCount())
assertEquals(0, stepExecution.getReadSkipCount())
assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
assertEquals(4, stepExecution.getWriteCount())
assertEquals(6, stepExecution.getReadCount())
assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
assertEquals(2, stepExecution.getWriteCount())
assertEquals(2, stepExecution.getReadCount())
assertEquals(2, stepExecution.getSkipCount())
assertEquals(7, count)
assertEquals(4, stepExecution.getReadCount())
assertTrue(TransactionSynchronizationManager.isActualTransactionActive())
assertEquals(2, recovered.size())
assertEquals(2, stepExecution.getSkipCount())
assertEquals(2, stepExecution.getWriteSkipCount())
assertEquals(expectedOutput, written)
assertEquals("[a, b, c, d, e, f, null]", provided.toString())
assertEquals("[a, b, b, b, b, b, b, c, d, d, d, d, d, d, e, f]", processed.toString())
assertEquals("[b, d]", recovered.toString())
assertEquals(2, recovered.size())
assertEquals(2, stepExecution.getSkipCount())
assertEquals(2, stepExecution.getWriteSkipCount())
assertEquals(expectedOutput, written)
assertEquals(7, provided.size())
assertEquals(36, processed.size())
assertEquals(2, recovered.size())
assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
assertEquals(expectedOutput, written)
assertEquals(0, stepExecution.getSkipCount())
assertEquals(1, provided.size())
assertEquals("[b, b, b, b, b]", processed.toString())
assertEquals(0, recovered.size())
assertEquals(1, stepExecution.getReadCount())
assertEquals(expectedOutput, written)
assertEquals(0, stepExecution.getSkipCount())
assertEquals("[b]", provided.toString())
assertEquals("[b]", processed.toString())
assertEquals(0, recovered.size())
assertEquals(1, stepExecution.getReadCount())
assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
assertEquals(expectedOutput, written)
assertEquals(0, stepExecution.getSkipCount())
assertEquals(1, provided.size())
assertEquals("[b, b, b, b, b]", processed.toString())
assertEquals(0, recovered.size())
assertEquals(1, stepExecution.getReadCount())
assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
assertEquals(0, stepExecution.getSkipCount())
assertEquals(3, provided.size())
assertEquals(3, processed.size())
assertEquals(0, recovered.size())
assertFalse(ExampleItemReader.fail)
assertEquals(FAILED, stepExecution.getStatus())
assertEquals(FAILED.toString(), stepExecution.getExitStatus().getExitCode())
assertTrue(stepExecution.getCommitCount() == 0)
assertEquals(FAILED, stepExecution.getStatus())
assertEquals(FAILED.toString(), stepExecution.getExitStatus().getExitCode())
assertTrue(stepExecution.getCommitCount() > 0)
assertTrue(attr.rollbackOn(new RuntimeException("")))
assertFalse(attr.rollbackOn(new Exception("")))
assertFalse(attr.rollbackOn(new RuntimeException("")))
assertFalse(attr.rollbackOn(new Exception("")))
assertTrue(attr.rollbackOn(new Exception("")))
assertFalse(attr.rollbackOn(new RuntimeException("")))
assertFalse(attr.rollbackOn(new SkippableException("")))
assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
assertEquals(2, stepExecution.getSkipCount())
assertEquals(0, stepExecution.getRollbackCount())
assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
assertEquals(0, stepExecution.getSkipCount())
assertEquals(0, stepExecution.getRollbackCount())
assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
assertEquals(2, stepExecution.getSkipCount())
assertEquals(2, stepExecution.getRollbackCount())
assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
assertEquals(2, stepExecution.getSkipCount())
assertEquals(2, stepExecution.getRollbackCount())
assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
assertEquals("[1, 3, 4, 5]", writer.getCommitted().toString())
assertEquals("[1, 2, 3, 4, 5]", processor.getCommitted().toString())
assertEquals("[1, 2, 3, 4, 5]", processed.toString())
assertEquals(0, stepExecution.getSkipCount())
assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
assertEquals(1, stepExecution.getSkipCount())
assertEquals(0, stepExecution.getReadSkipCount())
assertEquals(5, stepExecution.getReadCount())
assertEquals(1, stepExecution.getProcessSkipCount())
assertEquals(0, stepExecution.getRollbackCount())
assertTrue(reader.getRead().contains("4"))
assertFalse(writer.getCommitted().contains("4"))
assertEquals(expectedOutput, writer.getCommitted())
assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
assertEquals(2, stepExecution.getSkipCount())
assertEquals(4, stepExecution.getRollbackCount())
assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
assertEquals(0, stepExecution.getSkipCount())
assertEquals(1, stepExecution.getRollbackCount())
assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
assertEquals(2, stepExecution.getSkipCount())
assertEquals(4, stepExecution.getRollbackCount())
assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
assertEquals(2, stepExecution.getSkipCount())
assertEquals(2, stepExecution.getRollbackCount())
assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
assertEquals(2, stepExecution.getSkipCount())
assertEquals(2, stepExecution.getRollbackCount())
assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
assertEquals("[1, 2, 3, 4, 1, 2, 3, 5]", processor.getProcessed().toString())
assertEquals("[1, 2, 3, 5]", processor.getCommitted().toString())
assertEquals("[1, 2, 3, 5]", writer.getWritten().toString())
assertEquals("[1, 2, 3, 5]", writer.getCommitted().toString())
assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
assertEquals("[1, 3, 5]", processor.getCommitted().toString())
assertEquals("[1, 3, 5]", writer.getWritten().toString())
assertEquals("[1, 3, 5]", writer.getCommitted().toString())
assertEquals("[1, 2, 1, 3, 4, 1, 3, 5]", processor.getProcessed().toString())
assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
assertEquals("[1, 3, 5]", writer.getWritten().toString())
assertEquals("[1, 3, 5]", writer.getCommitted().toString())
assertEquals("[1, 2, 3, 4, 5]", processor.getProcessed().toString())
assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
assertEquals("[1, 2, 3, 4, 5]", processor.getProcessed().toString())
assertEquals("[1, 2, 3, 4, 5]", processor.getCommitted().toString())
assertEquals("[1, 2, 3, 5]", writer.getWritten().toString())
assertEquals("[1, 2, 3, 5]", writer.getCommitted().toString())
assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
assertEquals("[1, 2, 3, 5]", processor.getCommitted().toString())
assertEquals("[1, 2, 3, 5]", writer.getCommitted().toString())
assertEquals("[1, 2, 3, 4, 1, 2, 3, 4, 5]", writer.getWritten().toString())
assertEquals("[1, 2, 3, 4, 5, 1, 2, 3, 4, 5]", processor.getProcessed().toString())
assertEquals(1, stepExecution.getWriteSkipCount())
assertEquals(5, stepExecution.getReadCount())
assertEquals(4, stepExecution.getWriteCount())
assertEquals(0, stepExecution.getFilterCount())
assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
assertEquals("[1, 2, 3, 5]", writer.getCommitted().toString())
assertEquals("[1, 2, 3, 4, 1, 2, 3, 4, 5]", writer.getWritten().toString())
assertEquals("[1, 2, 3, 4, 5]", processor.getProcessed().toString())
assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
assertEquals("[]", writer.getCommitted().toString())
assertEquals("[1, 2, 3, 4]", writer.getWritten().toString())
assertEquals("[1, 2, 3, 4, 5, 1, 2, 3, 4, 5]", processor.getProcessed().toString())
assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
assertEquals("[]", writer.getCommitted().toString())
assertEquals("[]", processor.getCommitted().toString())
assertEquals(5, stepExecution.getSkipCount())
assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
assertEquals("[1, 3, 5]", writer.getCommitted().toString())
assertEquals("[1, 2, 1, 2, 3, 4, 5]", writer.getWritten().toString())
assertEquals("[1, 3, 5]", processor.getCommitted().toString())
assertEquals("[1, 2, 3, 4, 5, 1, 2, 3, 4, 5]", processor.getProcessed().toString())
assertEquals(2, stepExecution.getWriteSkipCount())
assertEquals(5, stepExecution.getReadCount())
assertEquals(3, stepExecution.getWriteCount())
assertEquals(0, stepExecution.getFilterCount())
assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
assertEquals("[1, 3, 5]", writer.getCommitted().toString())
assertEquals("[1, 2, 1, 2, 3, 4, 5]", writer.getWritten().toString())
assertEquals("[1, 2, 3, 4, 5]", processor.getProcessed().toString())
assertNotNull(chunk)
assertEquals(2, chunk.getItems().size())
assertNotNull(chunk)
assertEquals(0, chunk.getItems().size())
assertEquals(1, chunk.getErrors().size())
assertEquals("ItemReader must be provided", expectedException.getMessage())
assertEquals("ItemWriter must be provided", expectedException.getMessage())
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertEquals(3, written.size())
assertTrue(written.contains("foo"))
assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
assertEquals(2, written.size())
assertTrue(written.contains("foo"))
assertEquals("Error!", jobExecution.getAllFailureExceptions().get(0).getMessage())
assertEquals(BatchStatus.FAILED, jobExecution.getStatus())
assertEquals(0, written.size())
assertEquals("bar", reader.read())
assertEquals(1, listened.size())
assertEquals("Foo", jobExecution.getAllFailureExceptions().get(0).getMessage())
assertEquals(BatchStatus.FAILED, jobExecution.getStatus())
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertEquals(BatchStatus.FAILED, jobExecution.getStatus())
assertNull(reader.read())
assertEquals(6, written.size())
assertEquals(expectedListenerCallCount - 1, chunkListener.afterCount)
assertEquals(expectedListenerCallCount, chunkListener.beforeCount)
assertEquals(1, chunkListener.failedCount)
assertEquals("1234123415", writeListener.trail)
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertEquals("[write, write, write]", listenerCalls.toString())
assertTrue(Step.class.isAssignableFrom(factory.getObjectType()))
assertTrue(factory.getObject() instanceof Step)
assertEquals(1, list.size())
assertEquals(FAILED, stepExecution.getStatus())
assertEquals(FAILED.toString(), stepExecution.getExitStatus().getExitCode())
assertEquals(STOPPED, stepExecution.getStatus())
assertEquals(STOPPED.toString(), stepExecution.getExitStatus().getExitCode())
assertEquals(STOPPED, stepExecution.getStatus())
assertEquals("FUNNY", stepExecution.getExitStatus().getExitCode())
assertEquals(FAILED, stepExecution.getStatus())
assertTrue(stepExecution.getFailureExceptions().contains(exception))
assertEquals(2, jobRepository.getUpdateCount())
assertEquals(FAILED, stepExecution.getStatus())
assertTrue(stepExecution.getFailureExceptions().contains(exception))
assertEquals(2, jobRepository.getUpdateCount())
assertEquals(COMPLETED, stepExecution.getStatus())
assertFalse(stepExecution.getFailureExceptions().contains(exception))
assertEquals(3, jobRepository.getUpdateCount())
assertEquals(FAILED, stepExecution.getStatus())
assertTrue(stepExecution.getFailureExceptions().contains(taskletException))
assertFalse(stepExecution.getFailureExceptions().contains(exception))
assertEquals(2, jobRepository.getUpdateCount())
assertEquals(FAILED, stepExecution.getStatus())
assertTrue(stepExecution.getFailureExceptions().contains(taskletException))
assertTrue(stepExecution.getFailureExceptions().contains(exception))
assertEquals(2, jobRepository.getUpdateCount())
assertEquals(UNKNOWN, stepExecution.getStatus())
assertEquals("foo", e.getMessage())
assertEquals(0, stepExecution.getCommitCount())
assertEquals(1, stepExecution.getRollbackCount())
assertEquals(3, stepExecution.getExecutionContext().size())
assertTrue(stepExecution.getExecutionContext().containsKey(Step.STEP_TYPE_KEY))
assertTrue(stepExecution.getExecutionContext().containsKey(TaskletStep.TASKLET_TYPE_KEY))
assertEquals(FAILED, stepExecution.getStatus())
assertEquals("bar", e.getMessage())
assertEquals(0, stepExecution.getCommitCount())
assertEquals(1, stepExecution.getRollbackCount())
assertEquals(3, stepExecution.getExecutionContext().size())
assertTrue(stepExecution.getExecutionContext().containsKey(Step.STEP_TYPE_KEY))
assertTrue(stepExecution.getExecutionContext().containsKey(TaskletStep.TASKLET_TYPE_KEY))
assertEquals(UNKNOWN, stepExecution.getStatus())
assertEquals("Expected exception in step execution context persistence", e.getMessage())
assertEquals(FAILED, stepExecution.getStatus())
assertEquals("JobRepository failure forcing rollback", e.getMessage())
assertEquals(UNKNOWN, stepExecution.getStatus())
assertEquals("Expected exception in rollback", e.getMessage())
assertEquals(UNKNOWN, stepExecution.getStatus())
assertEquals("Expected exception in step execution persistence", e.getMessage())
assertEquals(FAILED, stepExecution.getStatus())
assertEquals("JobRepository failure forcing rollback", e.getMessage())
assertEquals(UNKNOWN, stepExecution.getStatus())
assertEquals("Expected exception in rollback", e.getMessage())
assertEquals(UNKNOWN, stepExecution.getStatus())
assertEquals("Expected exception in step execution context persistence", e.getMessage())
assertEquals(UNKNOWN, stepExecution.getStatus())
assertTrue(stepExecution.getFailureExceptions().contains(exception))
assertTrue(stepExecution.getFailureExceptions().contains(taskletException))
assertNotNull(chunk)
assertEquals(2, chunk.getItems().size())
assertNotNull(chunk)
assertEquals(0, chunk.getItems().size())
assertEquals(10, chunk.getErrors().size())
assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
assertEquals(2, stepExecution.getSkipCount())
assertEquals(0, stepExecution.getReadSkipCount())
assertEquals(2, stepExecution.getWriteSkipCount())
assertEquals(1, stepExecution.getRollbackCount())
assertFalse(writer.written.contains("4"))
assertEquals(expectedOutput, writer.written)
assertEquals(7, stepExecution.getReadCount())
assertEquals("ItemReader must be provided", expectedException.getMessage())
assertEquals("ItemWriter must be provided", expectedException.getMessage())
assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
assertEquals(ExitStatus.FAILED.getExitCode(), stepExecution.getExitStatus().getExitCode())
assertTrue(stepExecution.getExitStatus().getExitDescription().contains("Non-skippable exception during read"))
assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
assertEquals(1, reader.getRead().size())
assertEquals(ExitStatus.FAILED.getExitCode(), stepExecution.getExitStatus().getExitCode())
assertTrue(stepExecution.getExitStatus().getExitDescription().contains("Intended Failure"))
assertEquals(1, stepExecution.getSkipCount())
assertEquals(1, stepExecution.getReadSkipCount())
assertEquals(4, stepExecution.getReadCount())
assertEquals(0, stepExecution.getWriteSkipCount())
assertEquals(0, stepExecution.getRollbackCount())
assertTrue(reader.getRead().contains("4"))
assertFalse(reader.getRead().contains("2"))
assertEquals(expectedOutput, writer.getWritten())
assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
assertEquals(0, stepExecution.getReadSkipCount())
assertEquals(1, stepExecution.getReadCount())
assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
assertEquals(0, stepExecution.getWriteSkipCount())
assertEquals(2, stepExecution.getReadCount())
assertEquals(1, stepExecution.getSkipCount())
assertEquals(1, stepExecution.getReadSkipCount())
assertEquals(4, stepExecution.getReadCount())
assertEquals(0, stepExecution.getWriteSkipCount())
assertEquals(0, stepExecution.getRollbackCount())
assertTrue(reader.getRead().contains("4"))
assertFalse(reader.getRead().contains("2"))
assertEquals(expectedOutput, writer.getWritten())
assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
assertEquals(1, stepExecution.getSkipCount())
assertEquals(0, stepExecution.getReadSkipCount())
assertEquals(5, stepExecution.getReadCount())
assertEquals(1, stepExecution.getProcessSkipCount())
assertEquals(1, stepExecution.getRollbackCount())
assertTrue(reader.getRead().contains("4"))
assertFalse(writer.getWritten().contains("4"))
assertEquals(expectedOutput, writer.getWritten())
assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
assertEquals(0, stepExecution.getSkipCount())
assertEquals(0, stepExecution.getReadSkipCount())
assertEquals(5, stepExecution.getReadCount())
assertEquals(1, stepExecution.getFilterCount())
assertEquals(0, stepExecution.getRollbackCount())
assertTrue(listenerStub.isFilterEncountered())
assertTrue(reader.getRead().contains("4"))
assertFalse(writer.getWritten().contains("4"))
assertEquals(expectedOutput, writer.getWritten())
assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
assertEquals(1, stepExecution.getSkipCount())
assertEquals(0, stepExecution.getReadSkipCount())
assertEquals(5, stepExecution.getReadCount())
assertEquals(1, stepExecution.getWriteSkipCount())
assertEquals(2, stepExecution.getRollbackCount())
assertTrue(reader.getRead().contains("4"))
assertFalse(writer.getCommitted().contains("4"))
assertEquals(expectedOutput, writer.getCommitted())
assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
assertEquals(1, stepExecution.getSkipCount())
assertTrue(reader.getRead().contains("4"))
assertFalse(writer.getCommitted().contains("4"))
assertEquals(expectedOutput, writer.getCommitted())
assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
assertEquals(3, stepExecution.getSkipCount())
assertEquals(2, stepExecution.getReadSkipCount())
assertEquals(1, stepExecution.getWriteSkipCount())
assertEquals(2, stepExecution.getReadCount())
assertFalse(reader.getRead().contains("2"))
assertTrue(reader.getRead().contains("4"))
assertEquals(expectedOutput, writer.getCommitted())
assertEquals(2, listenerCalls.size())
assertEquals(2, stepExecution.getReadSkipCount())
assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
assertEquals("oops", stepExecution.getFailureExceptions().get(0).getCause().getMessage())
assertEquals(2, stepExecution.getReadSkipCount())
assertEquals(0, stepExecution.getWriteSkipCount())
assertEquals(2, stepExecution.getSkipCount())
assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
assertEquals("oops", stepExecution.getFailureExceptions().get(0).getCause().getMessage())
assertEquals(1, stepExecution.getSkipCount())
assertEquals(0, stepExecution.getReadSkipCount())
assertEquals(1, stepExecution.getWriteSkipCount())
assertEquals(4, stepExecution.getSkipCount())
assertEquals(3, stepExecution.getReadSkipCount())
assertEquals(1, stepExecution.getWriteSkipCount())
assertEquals(expectedOutput, writer.getCommitted())
assertEquals(2, stepExecution.getRollbackCount())
assertEquals(4, stepExecution.getSkipCount())
assertEquals(2, stepExecution.getReadSkipCount())
assertEquals(2, stepExecution.getWriteSkipCount())
assertEquals(expectedOutput, writer.getCommitted())
assertEquals(1, stepExecution.getSkipCount())
assertEquals("[a, c]", reader.getRead().toString())
assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
assertFalse(reader.getRead().contains("6"))
assertTrue(reader.getRead().contains("4"))
assertEquals(expectedOutput, writer.getCommitted())
assertEquals(1, stepExecution.getSkipCount())
assertEquals(2, stepExecution.getRollbackCount())
assertEquals("[1, 2, 3, 4, 3, 4]", processor.getProcessed().toString())
assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
assertTrue(opened)
assertTrue(closed)
assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
assertTrue(opened)
assertTrue(closed)
assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
assertTrue(opened)
assertTrue(closed)
assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
assertEquals(expected.getId(), actual.getId())
assertEquals(expected.getStartTime(), actual.getStartTime())
assertEquals(expected.getEndTime(), actual.getEndTime())
assertEquals(expected.getSkipCount(), actual.getSkipCount())
assertEquals(expected.getCommitCount(), actual.getCommitCount())
assertEquals(expected.getReadCount(), actual.getReadCount())
assertEquals(expected.getWriteCount(), actual.getWriteCount())
assertEquals(expected.getFilterCount(), actual.getFilterCount())
assertEquals(expected.getWriteSkipCount(), actual.getWriteSkipCount())
assertEquals(expected.getReadSkipCount(), actual.getReadSkipCount())
assertEquals(expected.getProcessSkipCount(), actual.getProcessSkipCount())
assertEquals(expected.getRollbackCount(), actual.getRollbackCount())
assertEquals(expected.getExitStatus(), actual.getExitStatus())
assertEquals(expected.getLastUpdated(), actual.getLastUpdated())
assertEquals(expected.getExitStatus(), actual.getExitStatus())
assertEquals(expected.getJobExecutionId(), actual.getJobExecutionId())
assertFalse(getSkippableSubsetSkipPolicy().shouldSkip(new RuntimeException(), 0))
assertTrue(getSkippableSubsetSkipPolicy().shouldSkip(new WriteFailedException(""), 0))
assertFalse(getSkippableSubsetSkipPolicy().shouldSkip(new WriterNotOpenException(""), 0))
assertFalse(getFatalSubsetSkipPolicy().shouldSkip(new RuntimeException(), 0))
assertTrue(getFatalSubsetSkipPolicy().shouldSkip(new WriterNotOpenException(""), 0))
assertFalse(getFatalSubsetSkipPolicy().shouldSkip(new WriteFailedException(""), 0))
assertEquals(ex, exception)
assertEquals(0, context.attributeNames().length)
assertEquals(2, context.getParent().attributeNames().length)
assertEquals(0, context.attributeNames().length)
assertEquals(0, context.getParent().attributeNames().length)
assertEquals(ex, exception)
assertEquals(0, context.attributeNames().length)
assertEquals(1, context.getParent().attributeNames().length)
assertEquals("foo", wrapper.getItem())
assertNull(wrapper.getException())
assertEquals("foo", wrapper.getItem())
assertEquals(exception, wrapper.getException())
assertEquals(2, list.size())
assertEquals(1, list.size())
assertEquals(1, contribution.getFilterCount())
assertEquals("Skippable", exception.getMessage())
assertEquals(1, list.size())
assertEquals(1, contribution.getSkipCount())
assertEquals(1, contribution.getFilterCount())
assertEquals(1, list.size())
assertEquals("[2]", list.toString())
assertEquals(1, contribution.getWriteSkipCount())
assertEquals(1, contribution.getFilterCount())
assertEquals(1, list.size())
assertEquals("[2]", list.toString())
assertEquals(1, contribution.getWriteSkipCount())
assertEquals(3, contribution.getFilterCount())
assertEquals("Expected Error!", error.getMessage())
assertEquals("Expected Exception!", exception.getMessage())
assertEquals("Expected Exception!", exception.getMessage())
assertEquals(1, contribution.getSkipCount())
assertEquals(1, contribution.getWriteCount())
assertEquals(0, contribution.getFilterCount())
assertEquals("Expected Exception!", exception.getMessage())
assertEquals("Expected Exception!", exception.getMessage())
assertEquals(1, contribution.getSkipCount())
assertEquals(0, contribution.getWriteCount())
assertEquals(0, contribution.getFilterCount())
assertEquals(1, list.size())
assertEquals(2, chunk.getItems().size())
assertEquals(1, chunk.getItems().size())
assertEquals(0, chunk.getItems().size())
assertEquals("[foo, bar]", list.toString())
assertEquals("[foo, bar]", after.toString())
assertEquals("[foo, bar]", list.toString())
assertEquals("[foo, bar]", after.toString())
assertEquals("[foo, fail, fail]", writeError.toString())
assertEquals("[foo, bar, foo, bar]", writeError.toString())
assertEquals("Expected Exception!", exception.getMessage())
assertEquals("Expected Exception!", exception.getMessage())
assertEquals("Expected Exception!", exception.getMessage())
assertEquals(1, contribution.getSkipCount())
assertEquals(2, contribution.getWriteCount())
assertEquals(0, contribution.getFilterCount())
assertEquals("Expected Exception!", exception.getMessage())
assertEquals("Expected Exception!", exception.getMessage())
assertEquals("Expected Exception!", exception.getMessage())
assertEquals("Expected Exception!", exception.getMessage())
assertEquals(2, contribution.getSkipCount())
assertEquals(2, contribution.getWriteCount())
assertEquals(0, contribution.getFilterCount())
assertEquals("Expected Exception!", exception.getMessage())
assertEquals("Expected Exception!", exception.getMessage())
assertEquals("Expected Exception!", exception.getMessage())
assertFalse(exception instanceof RetryException)
assertEquals("Expected Non-Skippable Exception!", exception.getMessage())
assertEquals(1, contribution.getSkipCount())
assertEquals(1, contribution.getWriteCount())
assertEquals(0, contribution.getFilterCount())
assertEquals("Expected Skippable Exception!", exception.getMessage())
assertEquals("Expected Skippable Exception!", exception.getMessage())
assertEquals(5, list.size())
assertEquals("[1, 2, 3, 4, 5]", list.toString())
assertEquals(2, contribution.getFilterCount())
assertEquals(2, contribution.getProcessSkipCount())
assertEquals(9, processedItems.size())
assertEquals("[1, 2, skip, skip, 3, fail, fail, 4, 5]", processedItems.toString())
assertEquals(5, list.size())
assertEquals("[1, 2, 3, 4, 5]", list.toString())
assertEquals(2, contribution.getFilterCount())
assertEquals(2, contribution.getProcessSkipCount())
assertEquals(9, processedItems.size())
assertEquals("[1, 2, skip, skip, 3, fail, fail, 4, 5]", processedItems.toString())
assertEquals("Planned failure!", exception.getMessage())
assertEquals("2", result)
assertEquals(count, context.getRetryCount())
assertEquals("Recoverable", exception.getMessage())
assertEquals("[a, b]", Arrays.toString(result))
assertEquals("Recoverable", exception.getMessage())
assertEquals("Recoverable", exception.getMessage())
assertEquals("[d, c]", Arrays.toString(result))
assertEquals("[e, f]", Arrays.toString(result))
assertEquals("Recoverable", exception.getMessage())
assertEquals("[r:b, r:c]", Arrays.toString(result))
assertFalse(chunk.getItems().contains("fail"))
assertEquals(items, chunk.getItems())
assertEquals(before - chunk.getItems().size(), chunk.getSkips().size())
assertEquals(1, contribution.getReadCount())
assertEquals(1, contribution.getWriteCount())
assertEquals(0, context.attributeNames().length)
fail("Not expecting to get this far")
assertEquals("Foo!", exception.getMessage())
assertEquals(0, contribution.getReadCount())
assertEquals(expected, contribution.getExitStatus())
assertEquals(0, monitor.getOffset())
assertEquals(1, monitor.getOffset())
assertEquals(0, monitor.getOffset())
assertEquals(0, monitor.getOffset())
assertTrue(closed)
assertEquals(0, monitor.getOffset())
assertEquals(2, count)
assertEquals(0, monitor.getOffset())
assertEquals(0, monitor.getOffset())
assertEquals(0, executionContext.size())
assertEquals(0, executionContext.size())
assertEquals(1, executionContext.size())
assertEquals(0, executionContext.size())
assertEquals(Arrays.asList("foo", "bar"), list)
assertEquals(1, contribution.getFilterCount())
assertEquals(2, contribution.getWriteCount())
assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
assertEquals("[1, 2, 3]", writer.getWritten().toString())
assertEquals("[]", writer.getCommitted().toString())
assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
assertEquals("[1, 2, 3]", writer.getWritten().toString())
assertEquals("[]", writer.getCommitted().toString())
assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
assertEquals("[1, 2, 3, 1, 2, 3, 4]", writer.getWritten().toString())
assertEquals("[1, 2, 4]", writer.getCommitted().toString())
assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
assertEquals("[1, 2, 3]", writer.getWritten().toString())
assertEquals("[]", writer.getCommitted().toString())
assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
assertEquals("[1, 2, 3]", writer.getWritten().toString())
assertEquals("[]", writer.getCommitted().toString())
assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
assertEquals("[1, 2, 3]", writer.getWritten().toString())
assertEquals("[]", writer.getCommitted().toString())
assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
assertEquals("[1, 2, 3, 1, 2, 3, 4]", writer.getWritten().toString())
assertEquals("[1, 2, 4]", writer.getCommitted().toString())
assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
assertEquals("[1, 2, 3]", writer.getWritten().toString())
assertEquals("[]", writer.getCommitted().toString())
assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
assertEquals("[1, 2, 3]", writer.getWritten().toString())
assertEquals("[]", writer.getCommitted().toString())
assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
assertEquals("[1, 2, 3, 1, 2, 3]", writer.getWritten().toString())
assertEquals("[]", writer.getCommitted().toString())
assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
assertEquals("[1, 2, 3, 1, 2, 3, 1, 2, 3, 4]", writer.getWritten().toString())
assertEquals("[1, 2, 4]", writer.getCommitted().toString())
assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
assertEquals("[1, 2, 3, 1, 2, 3]", writer.getWritten().toString())
assertEquals("[]", writer.getCommitted().toString())
assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
assertEquals("[1, 2, 3, 1, 2, 3]", writer.getWritten().toString())
assertEquals("[]", writer.getCommitted().toString())
assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
assertEquals("[1, 2, 3, 1, 2, 3, 1, 2, 3, 4]", writer.getWritten().toString())
assertEquals("[1, 2, 4]", writer.getCommitted().toString())
assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
assertEquals("[1, 2, 3, 1, 2, 3]", writer.getWritten().toString())
assertEquals("[]", writer.getCommitted().toString())
assertEquals(0, stepExecution.getWriteSkipCount())
assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
assertEquals("[1, 2, 3]", writer.getWritten().toString())
assertEquals("[]", writer.getCommitted().toString())
assertEquals(0, stepExecution.getWriteSkipCount())
assertNotNull(stepExecution)
assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
assertEquals("[1, 2, 3, 1, 2, 3, 4]", writer.getWritten().toString())
assertEquals("[1, 2, 3, 4]", writer.getCommitted().toString())
assertEquals(0, stepExecution.getWriteSkipCount())
assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
assertEquals("[1, 2, 3]", writer.getWritten().toString())
assertEquals("[]", writer.getCommitted().toString())
assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
assertEquals("[1, 2, 3, 1, 2, 3, 4]", writer.getWritten().toString())
assertEquals("[1, 2, 4]", writer.getCommitted().toString())
assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
assertEquals("[1, 2, 3, 1, 2, 3, 4]", writer.getWritten().toString())
assertEquals("[1, 2, 3, 4]", writer.getCommitted().toString())
assertEquals(1, stepExecution.getWriteSkipCount())
assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
assertEquals("[1, 2, 3]", writer.getWritten().toString())
assertEquals("[]", writer.getCommitted().toString())
assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
assertEquals("[1, 2, 3, 1, 2, 3, 4]", writer.getWritten().toString())
assertEquals("[1, 2, 3, 4]", writer.getCommitted().toString())
assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
assertEquals("[]", tasklet.getCommitted().toString())
assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
assertEquals("[1, 1, 1, 1]", tasklet.getCommitted().toString())
assertEquals(1, processed.size())
assertEquals(1, stepExecution.getReadCount())
assertEquals(1, stepExecution.getCommitCount())
assertEquals(4, processed.size())
assertEquals(4, stepExecution.getReadCount())
assertEquals(4, stepExecution.getWriteCount())
assertEquals(3, stepExecution.getCommitCount())
assertEquals(3, processed.size())
assertEquals(3, stepExecution.getReadCount())
assertEquals(3, stepExecution.getWriteCount())
assertEquals(2, stepExecution.getCommitCount())
assertEquals(0, processed.size())
assertEquals(0, stepExecution.getReadCount())
assertEquals(1, stepExecution.getCommitCount())
assertEquals(3, processed.size())
assertEquals(3, stepExecution.getReadCount())
assertTrue(3 <= jobRepository.updateCount)
assertEquals(BatchStatus.UNKNOWN, stepExecution.getStatus())
assertEquals(1, processed.size())
assertFalse(tasklet.isRestoreFromCalled())
assertTrue(tasklet.isGetExecutionAttributesCalled())
assertEquals(3, list.size())
assertEquals("foo", e.getCause().getMessage())
assertEquals(BatchStatus.UNKNOWN, stepExecution.getStatus())
assertDoesNotThrow(() -> step.execute(stepExecution))
assertFalse(tasklet.isRestoreFromCalled())
assertEquals(false, stepExecution.getExecutionContext().containsKey("foo"))
assertEquals("bar", stepExecution.getExecutionContext().getString("foo"))
assertEquals(false, stepExecution.getExecutionContext().containsKey("foo"))
assertEquals("bar", stepExecution.getExecutionContext().getString("foo"))
assertEquals(2, list.size())
assertEquals(1, list.size())
assertEquals(1, list.size())
assertEquals(1, list.size())
assertEquals(customStatus.getExitCode(), returnedStatus.getExitCode())
assertEquals(customStatus.getExitDescription(), returnedStatus.getExitDescription())
assertEquals("FOO", stepExecution.getFailureExceptions().get(0).getMessage())
assertEquals(1, list.size())
assertEquals(false, stepExecution.getExecutionContext().containsKey("foo"))
assertEquals("bar", stepExecution.getExecutionContext().getString("foo"))
assertEquals(BatchStatus.STOPPED, stepExecution.getStatus())
assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
assertEquals("Foo", stepExecution.getFailureExceptions().get(0).getMessage())
assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
assertEquals("Foo", stepExecution.getFailureExceptions().get(0).getMessage())
assertEquals(BatchStatus.UNKNOWN, stepExecution.getStatus())
assertEquals("Bar", stepExecution.getFailureExceptions().get(0).getMessage())
assertEquals(BatchStatus.UNKNOWN, stepExecution.getStatus())
assertEquals("Bar", ex.getMessage())
assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
assertEquals("", msg)
assertEquals("Bar", ex.getMessage())
assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
assertEquals("", msg)
assertEquals("Bar", ex.getMessage())
assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
assertEquals("CRASH!", expected.getMessage())
assertFalse(stepExecution.getExecutionContext().isEmpty())
assertEquals("bucket", stepExecution.getExecutionContext().getString("spam"))
assertEquals(3, processed.size())
assertEquals(3, stepExecution.getReadCount())
assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
assertEquals(ExitStatus.COMPLETED, mapper.getExitStatus(0))
assertEquals(ExitStatus.FAILED, mapper.getExitStatus(1))
assertEquals(ExitStatus.FAILED, mapper.getExitStatus(-1))
assertFalse(processingThread.isAlive())
assertEquals(BatchStatus.STOPPED, stepExecution.getStatus())
assertFalse(processingThread.isAlive())
assertEquals(BatchStatus.STOPPED, stepExecution.getStatus())
assertEquals("Planned!", stepExecution.getFailureExceptions().get(0).getMessage())
assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
assertEquals(lastStepExecution, stepExecution)
assertNotSame(lastStepExecution, stepExecution)
assertEquals(BatchStatus.FAILED, lastStepExecution.getStatus())
assertEquals("Simulate commit failure", stepExecution.getFailureExceptions().get(0).getMessage())
assertEquals(RepeatStatus.FINISHED, adapter.execute(null, null))
assertSame(mappings.get(ConfigurableSystemProcessExitCodeMapper.ELSE_KEY), mapper.getExitStatus(5))
assertEquals(RepeatStatus.FINISHED, exitStatus)
assertEquals(RepeatStatus.FINISHED, exitStatus)
assertTrue(exception.getMessage().contains("did not finish within the timeout"))
assertTrue(message.contains("Job interrupted while executing system command"))
assertTrue(message.contains(command[0]))
assertEquals(ExitStatus.STOPPED.getExitCode(), contribution.getExitStatus().getExitCode())
assertEquals(RepeatStatus.FINISHED, exitStatus)
assertEquals(ExitStatus.COMPLETED, stepContribution.getExitStatus())
assertEquals(RepeatStatus.FINISHED, exitStatus)
assertEquals(ExitStatus.FAILED, stepContribution.getExitStatus())
assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
assertEquals(lastStepExecution, stepExecution)
assertNotSame(lastStepExecution, stepExecution)
assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
assertTrue(stepExecution.getReadCount() >= 25)
assertTrue(processed.size() >= 25)
assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
assertEquals(2, stepExecution.getReadCount())
assertEquals(2, processed.size())
assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
assertEquals(2, stepExecution.getReadCount())
assertEquals(2, processed.size())
assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
assertEquals(4, stepExecution.getReadCount())
assertEquals(4, processed.size())
assertEquals(ExitStatus.NOOP, contribution.getExitStatus())
assertEquals(ExitStatus.COMPLETED, contribution.getExitStatus())
assertEquals(ExitStatus.COMPLETED, contribution.getExitStatus())
assertEquals(RepeatStatus.FINISHED, repeatStatus)
assertEquals(tasklet.getStepContribution(), stepContribution)
assertEquals(tasklet.getChunkContext(), chunkContext)
assertEquals(RepeatStatus.FINISHED, repeatStatus)
assertEquals(tasklet.getStepContribution(), stepContribution)
assertEquals(tasklet.getChunkContext(), chunkContext)
assertEquals(RepeatStatus.FINISHED, repeatStatus)
assertEquals(tasklet.getStepContribution(), stepContribution)
assertEquals(tasklet.getChunkContext(), chunkContext)
assertEquals(RepeatStatus.FINISHED, repeatStatus)
assertEquals(tasklet.getChunkContext(), chunkContext)
assertEquals(RepeatStatus.FINISHED, repeatStatus)
assertEquals(tasklet.getStepContribution(), stepContribution)
assertEquals(RepeatStatus.FINISHED, repeatStatus)
assertEquals(RepeatStatus.FINISHED, repeatStatus)
assertEquals(RepeatStatus.FINISHED, repeatStatus)
assertEquals(RepeatStatus.FINISHED, repeatStatus)
assertEquals(tasklet.getStepContribution(), stepContribution)
assertEquals(RepeatStatus.FINISHED, repeatStatus)
assertEquals(tasklet.getChunkContext(), chunkContext)
assertEquals(new ExitStatus("DONE"), stepContribution.getExitStatus())
assertEquals(RepeatStatus.FINISHED, repeatStatus)
assertEquals(ExitStatus.COMPLETED, stepContribution.getExitStatus())
assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
assertEquals("FOO", stepExecution.getFailureExceptions().get(0).getMessage())
assertEquals(1, execution.getJobParameters().getParameters().size())
assertEquals("FOO", stepExecution.getFailureExceptions().get(0).getMessage())
assertEquals("FOO", stepExecution.getFailureExceptions().get(0).getMessage())
assertEquals(1, execution.getJobParameters().getParameters().size())
assertEquals(BatchStatus.STOPPED, stepExecution.getStatus())
assertEquals("CUSTOM", stepExecution.getExitStatus().getExitCode())
assertTrue(jobParameters.getParameters().containsKey("foo"))
assertEquals("bar", jobParameters.getString("foo"))
assertFalse(jobParameters.getParameters().containsKey("bar"))
assertEquals("bar", jobParameters.getString("foo"))
assertEquals("bucket", jobParameters.getString("spam"))
assertFalse(jobParameters.getParameters().containsKey("bar"))
assertEquals("bar", jobParameters.getString("foo"))
assertEquals(11L, jobParameters.getLong("foo"))
assertEquals(11.1, jobParameters.getDouble("foo"))
assertEquals(LocalDate.of(2012, 12, 12), jobParameters.getParameter("foo").getValue())
fail("Not expecting to get this far", "A execução falhou por uma causa deliberada")
assertTrue(jobParameters.isEmpty())
assertNotNull(jobParameters.getParameter("foo"))
assertNotNull(jobParameters.getParameter("foo"))
assertEquals(11L, jobParameters.getParameter("foo").getValue())
assertEquals(11.1, jobParameters.getParameter("foo").getValue())
assertNotNull(jobParameters.getParameter("parentParam").getValue())
assertNotNull(jobParameters.getParameter("foo").getValue())
assertNull(jobParameters.getParameter("parentParam"))
assertNotNull(jobParameters.getParameter("foo").getValue())
assertEquals(BatchStatus.STOPPED, run1.getStatus())
assertEquals(2, run1.getStepExecutions().size())
assertEquals(BatchStatus.COMPLETED, run2.getStatus())
assertEquals(6, run2.getStepExecutions().size())
assertSame(execution, context)
assertSame(execution, stepExecution)
assertSame(execution, stepExecution)
assertNull(step.getName())
assertEquals("foo", step.getName())
assertNull(step.getName())
assertEquals("foo", step.getName())
assertEquals("foo", step.getName())
assertEquals("listener1#beforeStep", events.get(i++))
assertEquals("listener2#beforeStep", events.get(i++))
assertEquals("open", events.get(i++))
assertEquals("doExecute", events.get(i++))
assertEquals("listener2#afterStep(COMPLETED)", events.get(i++))
assertEquals("listener1#afterStep(COMPLETED)", events.get(i++))
assertEquals("close", events.get(i++))
assertEquals(7, events.size())
assertEquals(ExitStatus.COMPLETED, execution.getExitStatus())
assertEquals(BatchStatus.FAILED, execution.getStatus())
assertEquals("crash!", expected.getMessage())
assertEquals("listener1#beforeStep", events.get(i++))
assertEquals("listener2#beforeStep", events.get(i++))
assertEquals("open", events.get(i++))
assertEquals("doExecute", events.get(i++))
assertEquals("listener2#afterStep(FAILED)", events.get(i++))
assertEquals("listener1#afterStep(FAILED)", events.get(i++))
assertEquals("close", events.get(i++))
assertEquals(7, events.size())
assertEquals(ExitStatus.FAILED.getExitCode(), execution.getExitStatus().getExitCode())
assertEquals(BatchStatus.STOPPED, execution.getStatus())
assertEquals("JobExecution interrupted.", expected.getMessage())
assertEquals("listener1#beforeStep", events.get(i++))
assertEquals("listener2#beforeStep", events.get(i++))
assertEquals("open", events.get(i++))
assertEquals("doExecute", events.get(i++))
assertEquals("listener2#afterStep(STOPPED)", events.get(i++))
assertEquals("listener1#afterStep(STOPPED)", events.get(i++))
assertEquals("close", events.get(i++))
assertEquals(7, events.size())
assertEquals("STOPPED", execution.getExitStatus().getExitCode())
assertEquals(BatchStatus.STOPPED, execution.getStatus())
assertEquals("JobExecution interrupted.", expected.getMessage())
assertEquals("FUNNY", execution.getExitStatus().getExitCode())
assertEquals(BatchStatus.UNKNOWN, execution.getStatus())
assertEquals("Bad context!", expected.getMessage())
assertEquals("open", events.get(i++))
assertEquals("doExecute", events.get(i++))
assertEquals("close", events.get(i++))
assertEquals(3, events.size())
assertEquals(ExitStatus.UNKNOWN, execution.getExitStatus())
assertEquals("foo", exception.getMessage())
assertEquals(ExitStatus.FAILED.getExitCode(), exitStatus.getExitCode())
assertNull(exitStatus)
assertEquals(BatchStatus.STOPPED, jobExecution1.getStatus())
assertEquals(BatchStatus.STOPPED, jobExecution2.getStatus())
assertEquals(BatchStatus.COMPLETED, execution.getStatus())
assertFalse(failurePolicy.shouldSkip(new FileNotFoundException(), 2))
assertTrue(failurePolicy.shouldSkip(new FlatFileParseException("", ""), 0))
assertFalse(getSkippableSubsetSkipPolicy().shouldSkip(new RuntimeException(), 0))
assertTrue(getSkippableSubsetSkipPolicy().shouldSkip(new WriteFailedException(""), 0))
assertFalse(getSkippableSubsetSkipPolicy().shouldSkip(new WriterNotOpenException(""), 0))
assertFalse(getFatalSubsetSkipPolicy().shouldSkip(new RuntimeException(), 0))
assertTrue(getFatalSubsetSkipPolicy().shouldSkip(new WriterNotOpenException(""), 0))
assertFalse(getFatalSubsetSkipPolicy().shouldSkip(new WriteFailedException(""), 0))
assertEquals(BatchStatus.COMPLETED, execution.getStatus())
assertEquals(BatchStatus.COMPLETED, execution.getStatus())
assertEquals(1, InterfaceBasedStepExecutionListener.beforeStepCount)
assertEquals(1, InterfaceBasedStepExecutionListener.afterStepCount)
assertEquals(1, AnnotationBasedStepExecutionListener.beforeStepCount)
assertEquals(1, AnnotationBasedStepExecutionListener.afterStepCount)
assertEquals(1, AnnotationBasedStepExecutionListener.beforeChunkCount)
assertEquals(1, AnnotationBasedStepExecutionListener.afterChunkCount)
assertEquals(BatchStatus.COMPLETED, execution.getStatus())
assertEquals(1, AnnotationBasedChunkListener.beforeChunkCount)
assertEquals(1, AnnotationBasedChunkListener.afterChunkCount)
assertEquals(BatchStatus.COMPLETED, execution.getStatus())
assertEquals(1, AnnotationBasedChunkListener.beforeChunkCount)
assertEquals(1, AnnotationBasedChunkListener.afterChunkCount)
assertEquals(BatchStatus.COMPLETED, execution.getStatus())
assertEquals(1, AnnotationBasedChunkListener.beforeChunkCount)
assertEquals(1, AnnotationBasedChunkListener.afterChunkCount)
assertEquals(BatchStatus.COMPLETED, execution.getStatus())
assertEquals(0, AnnotationBasedChunkListener.beforeChunkCount)
assertEquals(0, AnnotationBasedChunkListener.afterChunkCount)
assertEquals(BatchStatus.COMPLETED, execution.getStatus())
assertEquals(1, AnnotationBasedStepExecutionListener.beforeStepCount)
assertEquals(1, AnnotationBasedStepExecutionListener.afterStepCount)
assertEquals(4, AnnotationBasedStepExecutionListener.beforeReadCount)
assertEquals(3, AnnotationBasedStepExecutionListener.afterReadCount)
assertEquals(3, AnnotationBasedStepExecutionListener.beforeProcessCount)
assertEquals(3, AnnotationBasedStepExecutionListener.afterProcessCount)
assertEquals(1, AnnotationBasedStepExecutionListener.beforeWriteCount)
assertEquals(1, AnnotationBasedStepExecutionListener.afterWriteCount)
assertEquals(2, AnnotationBasedStepExecutionListener.beforeChunkCount)
assertEquals(2, AnnotationBasedStepExecutionListener.afterChunkCount)
assertEquals(BatchStatus.COMPLETED, execution.getStatus())
assertEquals("1", writtenItems.get(0))
assertEquals("2", writtenItems.get(1))
assertEquals("3", writtenItems.get(2))
assertEquals(1, AnnotationBasedStepExecutionListener.beforeStepCount)
assertEquals(1, AnnotationBasedStepExecutionListener.afterStepCount)
assertEquals(1, InterfaceBasedStepExecutionListener.beforeStepCount)
assertEquals(1, InterfaceBasedStepExecutionListener.afterStepCount)
assertEquals(BatchStatus.COMPLETED, execution.getStatus())
assertEquals(4, InterfaceBasedItemReadListenerListener.beforeReadCount)
assertEquals(3, InterfaceBasedItemReadListenerListener.afterReadCount)
assertEquals(BatchStatus.COMPLETED, execution.getStatus())
assertEquals(1, callChecker.beforeStepCalled)
assertEquals(6, callChecker.beforeChunkCalled)
assertEquals(2, callChecker.beforeWriteCalled)
assertEquals(1, callChecker.skipInWriteCalled)
assertEquals(BatchStatus.FAILED, execution.getStatus())
assertEquals(1, callChecker.beforeStepCalled)
assertEquals(1, callChecker.beforeChunkCalled)
assertEquals(1, callChecker.beforeWriteCalled)
assertEquals(0, callChecker.skipInWriteCalled)
assertEquals(builder, builder.faultTolerant())
assertNotNull(step)
assertEquals(key1, key2)
assertEquals(32, key.length())
assertEquals(key1, key2)
assertFalse(advice.invoked)
assertFalse(advice.invoked)
assertNotNull(jobExecution)
assertTrue(advice.invoked)
assertNotNull(firstExecution.getLastUpdated())
assertEquals(job.getName(), firstExecution.getJobInstance().getJobName())
assertEquals(firstExecution.getJobInstance(), secondExecution.getJobInstance())
assertEquals(job.getName(), secondExecution.getJobInstance().getJobName())
assertEquals(firstExecution.getJobInstance(), secondExecution.getJobInstance())
assertEquals(job.getName(), secondExecution.getJobInstance().getJobName())
assertEquals(1, jobRepository.getStepExecutionCount(firstJobExec.getJobInstance(), step.getName()))
assertEquals(firstStepExec, jobRepository.getLastStepExecution(firstJobExec.getJobInstance(), step.getName()))
assertEquals(2, jobRepository.getStepExecutionCount(secondJobExec.getJobInstance(), step.getName()))
assertEquals(secondStepExec, jobRepository.getLastStepExecution(secondJobExec.getJobInstance(), step.getName()))
assertEquals(stepExec, retrievedStepExec)
assertEquals(ctx, retrievedStepExec.getExecutionContext())
assertEquals(jobExecution, jobRepository.getLastJobExecution(job.getName(), jobParameters))
assertEquals(stepExecution, jobExecution.getStepExecutions().iterator().next())
assertNotNull(jobExecution1)
assertNotNull(jobExecution2)
assertNotNull(jobExecution.getLastUpdated())
assertNotNull(stepExecution.getLastUpdated())
assertTrue(lastUpdated.isAfter(before))
assertNotNull(stepExecution.getLastUpdated())
assertTrue(lastUpdated.isAfter(before))
assertTrue(stepExecution.isTerminateOnly())
assertFalse(jobRepository.isJobInstanceExists("foo", new JobParameters()))
assertTrue(jobRepository.isJobInstanceExists("foo", new JobParameters()))
assertEquals(expectedResult, actualResult)
assertEquals(BatchStatus.STOPPED, jobExecution.getStatus())
assertEquals(this.jobInstance, jobInstance)
assertEquals(0, version)
assertEquals(0, version)
assertNull(jobInstance)
assertNotNull(instance)
assertEquals(jobInstance, instance)
assertNotNull(instance)
assertNull(instance)
assertEquals(executions.size(), 1)
assertEquals(executions.size(), 1)
assertEquals(1, jobs.size())
assertEquals("test", jobs.get(0).get("JOB_NAME"))
assertNotNull(instance)
assertEquals(results.size(), 1)
assertEquals(lhs, rhs)
assertEquals(lhs.getStartTime(), rhs.getStartTime())
assertEquals(lhs.getEndTime(), rhs.getEndTime())
assertEquals(lhs.getStatus(), rhs.getStatus())
assertEquals(lhs.getExitStatus(), rhs.getExitStatus())
assertEquals(lastExecution, jobExecutionDao.getLastJobExecution(jobInstance))
assertNotNull(lastExecution.getJobParameters())
assertEquals("jobKey", lastExecution.getJobParameters().getString("job.key"))
assertNotNull(jobInstance.getVersion())
assertNull(jobExecution.getId())
assertNull(jobExecution.getVersion())
assertNotNull(jobExecution.getId())
assertNotNull(jobExecution.getVersion())
assertEquals(version + 1, jobExecution.getVersion().intValue())
assertEquals(ctx, retrieved)
assertEquals(ctx, retrieved)
assertEquals(ctx, retrieved)
assertEquals(7, retrieved.getLong("longKey"))
assertEquals(ctx, retrieved)
assertEquals(ctx, retrieved)
assertEquals(ctx, retrieved)
assertEquals(7, retrieved.getLong("longKey"))
assertEquals(ec, restoredEc)
assertEquals(new ExecutionContext(), restoredEc)
assertEquals(new ExecutionContext(), restoredEc)
assertEquals(jobInstance, returnedInstance)
assertEquals(value, output.toString())
assertEquals(2, jobInstances.size())
assertTrue(jobInstances.isEmpty())
Assertions.assertNull(dao.getJobInstance(jobInstance.getId()))
assertEquals(1, result)
assertNull(dao.getStepExecution(jobExecution, stepExecution.getId()))
assertDoesNotThrow(() -> j.deserialize(in))
assertNotNull(locale)
assertTrue(List.class.isAssignableFrom(deserializedValue.getClass()))
assertTrue(((List<String>) deserializedValue).containsAll(list))
assertEquals(timestamp, deserializedTimestamp)
assertNotNull(fooInstance.getId())
assertEquals(fooJob, fooInstance.getJobName())
assertEquals(fooInstance, retrievedInstance)
assertEquals(fooJob, retrievedInstance.getJobName())
assertNotNull(fooInstance.getId())
assertEquals(fooJob, fooInstance.getJobName())
assertEquals(fooInstance, retrievedInstance)
assertEquals(fooJob, retrievedInstance.getJobName())
assertNull(retrievedInstance)
assertFalse(jobNames.isEmpty())
assertTrue(jobNames.contains(fooJob))
assertEquals(2, jobInstances.size())
assertEquals(fooJob, jobInstances.get(0).getJobName())
assertEquals(fooJob, jobInstances.get(1).getJobName())
assertEquals(Integer.valueOf(0), jobInstances.get(0).getVersion())
assertEquals(Integer.valueOf(0), jobInstances.get(1).getVersion())
assertEquals(2, jobInstances.size())
assertNotNull(lastJobInstance)
assertEquals(fooJob, lastJobInstance.getJobName())
assertNull(lastJobInstance)
assertEquals(queryCount, jobInstances.size())
assertEquals(0, jobInstances.size())
assertNull(jobInstance.getVersion())
assertNotNull(jobInstance.getVersion())
assertEquals(1, executions.size())
assertEquals(execution, executions.get(0))
assertEquals(0, executions.size())
assertNull(execution.getId())
assertNull(execution.getVersion())
assertNotNull(execution.getId())
assertNotNull(execution.getVersion())
assertEquals(execution, updated)
assertEquals(BatchStatus.COMPLETED, updated.getStatus())
assertEquals(exec2, last)
assertNull(value)
assertEquals(3, values.size())
assertEquals(now.plus(3, ChronoUnit.SECONDS), value.getLastUpdated())
assertEquals(0, values.size())
assertEquals(exec, value)
assertNull(value)
assertEquals((Integer) 0, exec1.getVersion())
assertEquals(exec1.getVersion(), exec2.getVersion())
assertEquals((Integer) 1, exec1.getVersion())
assertTrue(exec1.getId() != null)
assertTrue(exec1.getVersion() != exec2.getVersion())
assertTrue(exec1.getStatus() != exec2.getStatus())
assertEquals(exec1.getVersion(), exec2.getVersion())
assertEquals(exec1.getStatus(), exec2.getStatus())
assertTrue(exec1.getId() != null)
assertTrue(exec1.getVersion() != exec2.getVersion())
assertTrue(exec1.getStatus().isLessThan(exec2.getStatus()))
assertEquals(exec1.getVersion(), exec2.getVersion())
assertEquals(BatchStatus.UNKNOWN, exec2.getStatus())
assertEquals(lhs.getId(), rhs.getId())
assertEquals(lhs.getStartTime(), rhs.getStartTime())
assertEquals(lhs.getStatus(), rhs.getStatus())
assertEquals(lhs.getEndTime(), rhs.getEndTime())
assertEquals(lhs.getCreateTime(), rhs.getCreateTime())
assertEquals(lhs.getLastUpdated(), rhs.getLastUpdated())
assertEquals(lhs.getVersion(), rhs.getVersion())
Assertions.assertEquals(0, JdbcTestUtils.countRowsInTable(jdbcTemplate, "BATCH_JOB_EXECUTION_PARAMS"))
Assertions.assertEquals(dateParameter, parameters.getDate("date"))
Assertions.assertEquals(localDateParameter, parameters.getLocalDate("localDate"))
Assertions.assertEquals(localTimeParameter, parameters.getLocalTime("localTime"))
Assertions.assertEquals(localDateTimeParameter, parameters.getLocalDateTime("localDateTime"))
Assertions.assertEquals(stringParameter, parameters.getString("string"))
Assertions.assertEquals(longParameter, parameters.getLong("long"))
Assertions.assertEquals(doubleParameter, parameters.getDouble("double"))
assertEquals("Foo", e.getMessage())
assertEquals(hour, calendar.get(Calendar.HOUR_OF_DAY))
assertEquals(output, format.format(date))
assertEquals("Serializer must not be null", exception.getMessage())
assertTrue(LONG_STRING.length() > 250)
assertEquals(1, executions.size())
assertEquals(LONG_STRING.substring(0, 250), executions.get(0).get("EXIT_MESSAGE"))
assertEquals(1, list.size())
Assertions.assertNull(dao.getJobExecution(execution.getId()))
Assertions.assertNotNull(parameters)
assertNull(stepExecution.getId())
assertNull(stepExecution.getVersion())
assertNotNull(stepExecution.getId())
assertNotNull(stepExecution.getVersion())
assertNotNull(retrieved.getVersion())
assertNotNull(retrieved.getJobExecution())
assertNotNull(retrieved.getJobExecution().getId())
assertNotNull(retrieved.getJobExecution().getJobId())
assertNotNull(retrieved.getJobExecution().getJobInstance())
assertNotNull(lastStepExecution)
assertEquals(stepExecution2.getId(), lastStepExecution.getId())
assertNotNull(retrieved)
assertEquals(lastStepExecution.getId(), retrieved.getId())
assertNull(dao.getStepExecution(jobExecution, 45677L))
assertNull(dao.getStepExecution(new JobExecution(jobInstance, (long) 777, new JobParameters()), 11L))
assertEquals(versionAfterSave + 1, stepExecution.getVersion().intValue())
assertEquals(stepExecution, retrieved)
assertEquals(stepExecution.getLastUpdated(), retrieved.getLastUpdated())
assertEquals(BatchStatus.ABANDONED, retrieved.getStatus())
assertEquals(Integer.valueOf(0), exec1.getVersion())
assertEquals(exec1.getVersion(), exec2.getVersion())
assertEquals(Integer.valueOf(1), exec1.getVersion())
assertEquals(expected.getId(), actual.getId())
assertEquals(expected.getStartTime(), actual.getStartTime())
assertEquals(expected.getEndTime(), actual.getEndTime())
assertEquals(expected.getSkipCount(), actual.getSkipCount())
assertEquals(expected.getCommitCount(), actual.getCommitCount())
assertEquals(expected.getReadCount(), actual.getReadCount())
assertEquals(expected.getWriteCount(), actual.getWriteCount())
assertEquals(expected.getFilterCount(), actual.getFilterCount())
assertEquals(expected.getWriteSkipCount(), actual.getWriteSkipCount())
assertEquals(expected.getReadSkipCount(), actual.getReadSkipCount())
assertEquals(expected.getProcessSkipCount(), actual.getProcessSkipCount())
assertEquals(expected.getRollbackCount(), actual.getRollbackCount())
assertEquals(expected.getExitStatus(), actual.getExitStatus())
assertEquals(expected.getLastUpdated(), actual.getLastUpdated())
assertEquals(expected.getExitStatus(), actual.getExitStatus())
assertEquals(expected.getJobExecutionId(), actual.getJobExecutionId())
assertEquals(expected.getCreateTime(), actual.getCreateTime())
assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
assertEquals(1, JdbcTestUtils.countRowsInTable(jdbcTemplate, "PREFIX_JOB_INSTANCE"))
assertEquals("foo", exception.getMessage().substring(0, 3))
Assertions.assertEquals("1970-01-01", converted)
Assertions.assertEquals("{\"value\":\"foo\",\"type\":\"java.lang.String\",\"identifying\":\"false\"}", encodedJobParameter)
Assertions.assertEquals("{\"value\":\"foo\",\"type\":\"java.lang.String\",\"identifying\":\"true\"}", encodedJobParameter)
Assertions.assertNotNull(jobParameter)
Assertions.assertEquals("foo", jobParameter.getValue())
Assertions.assertEquals(String.class, jobParameter.getType())
Assertions.assertFalse(jobParameter.isIdentifying())
Assertions.assertNotNull(jobParameter)
Assertions.assertEquals("foo", jobParameter.getValue())
Assertions.assertEquals(String.class, jobParameter.getType())
Assertions.assertTrue(jobParameter.isIdentifying())
Assertions.assertNotNull(jobParameter)
Assertions.assertEquals("foo", jobParameter.getValue())
Assertions.assertEquals(String.class, jobParameter.getType())
Assertions.assertTrue(jobParameter.isIdentifying())
Assertions.assertEquals(LocalTime.NOON, converted)
Assertions.assertEquals("1970-01-01T00:00:00Z", converted)
Assertions.assertEquals(Date.from(Instant.EPOCH), converted)
Assertions.assertEquals(LocalDate.EPOCH, converted)
Assertions.assertEquals("12:00:00", converted)
assertNotNull(props)
assertTrue(props.getParameters().get("job.key").isIdentifying())
assertTrue(props.getParameters().get("schedule.date").isIdentifying())
assertTrue(props.getParameters().get("vendor.id").isIdentifying())
assertNotNull(props)
assertTrue(props.getParameters().get("job.key").isIdentifying())
assertTrue(props.getParameters().get("schedule.date").isIdentifying())
assertTrue(props.getParameters().get("vendor.id").isIdentifying())
assertNotNull(props)
assertFalse(props.getParameters().get("job.key").isIdentifying())
assertFalse(props.getParameters().get("schedule.date").isIdentifying())
assertFalse(props.getParameters().get("vendor.id").isIdentifying())
assertNotNull(props)
assertTrue(props.getParameters().get("job.key").isIdentifying())
assertTrue(props.getParameters().get("schedule.date").isIdentifying())
assertFalse(props.getParameters().get("vendor.id").isIdentifying())
assertNotNull(props)
assertEquals("myKey", props.getString("job.key"))
assertEquals(33243243L, props.getLong("vendor.id").longValue())
assertEquals(expectedDate, props.getParameter("schedule.date").getValue())
assertNotNull(props)
assertNotNull(props)
assertNotNull(props)
assertNotNull(props)
assertEquals("myKey,java.lang.String,true", props.getProperty("job.key"))
assertEquals("33243243,java.lang.Long,true", props.getProperty("vendor.id"))
assertEquals("2008-01-23,java.time.LocalDate,true", props.getProperty("schedule.date"))
assertEquals("1.23,java.lang.Double,true", props.getProperty("double.key"))
assertNotNull(props)
assertEquals("myKey,java.lang.String,true", props.getProperty("job.key"))
assertEquals("33243243,java.lang.Long,true", props.getProperty("vendor.id"))
assertEquals("2008-01-23,java.time.LocalDate,true", props.getProperty("schedule.date"))
assertEquals("1.23,java.lang.Double,true", props.getProperty("double.key"))
assertNotNull(props)
assertEquals("myKey,java.lang.String,true", props.getProperty("job.key"))
assertEquals("33243243,java.lang.Long,false", props.getProperty("vendor.id"))
assertEquals("2008-01-23,java.time.LocalDate,true", props.getProperty("schedule.date"))
assertEquals("1.23,java.lang.Double,true", props.getProperty("double.key"))
assertTrue(props.getParameters().isEmpty())
assertEquals(new JobParameters(), factory.getJobParameters(null))
assertEquals(new Properties(), factory.getProperties(null))
Assertions.assertEquals("1970-01-01T12:00:00", converted)
Assertions.assertEquals(LocalDateTime.of(LocalDate.EPOCH, LocalTime.NOON), converted)
assertEquals("", status.getExitDescription())
assertEquals("10", status.getExitCode())
assertEquals("EXECUTING", status.getExitCode())
assertEquals("COMPLETED", status.getExitCode())
assertEquals(ExitStatus.EXECUTING, new ExitStatus("EXECUTING"))
assertEquals(status, status)
assertEquals(new ExitStatus("test"), new ExitStatus("test"))
assertFalse(ExitStatus.EXECUTING.equals(null))
assertEquals(ExitStatus.EXECUTING.toString().hashCode(), ExitStatus.EXECUTING.hashCode())
assertEquals(ExitStatus.EXECUTING.getExitCode(), ExitStatus.EXECUTING.and(ExitStatus.EXECUTING).getExitCode())
assertEquals(ExitStatus.COMPLETED.getExitCode(), ExitStatus.EXECUTING.and(ExitStatus.COMPLETED).getExitCode())
assertEquals(ExitStatus.COMPLETED.getExitCode(), ExitStatus.COMPLETED.and(ExitStatus.EXECUTING).getExitCode())
assertEquals("CUSTOM", ExitStatus.EXECUTING.and(ExitStatus.EXECUTING.replaceExitCode("CUSTOM")).getExitCode())
assertEquals("COMPLETED_CUSTOM", ExitStatus.COMPLETED.and(ExitStatus.EXECUTING.replaceExitCode("COMPLETED_CUSTOM")).getExitCode())
assertEquals("FAILED", ExitStatus.COMPLETED.and(ExitStatus.FAILED).getExitCode())
assertEquals("FAILED", ExitStatus.FAILED.and(ExitStatus.COMPLETED).getExitCode())
assertEquals("CUSTOM", ExitStatus.COMPLETED.and(ExitStatus.EXECUTING.replaceExitCode("CUSTOM")).getExitCode())
assertTrue(ExitStatus.EXECUTING != status)
assertEquals("FOO", status.getExitCode())
assertTrue(ExitStatus.EXECUTING != status)
assertEquals("BAR", status.getExitCode())
assertTrue(ExitStatus.EXECUTING != status)
assertEquals(ExitStatus.EXECUTING.getExitCode(), status.getExitCode())
assertTrue(ExitStatus.EXECUTING != status)
assertEquals("Foo", status.getExitDescription())
assertTrue(ExitStatus.EXECUTING != status)
assertTrue(ExitStatus.EXECUTING != status)
assertEquals("Foo", status.getExitDescription())
assertEquals("Foo", status.getExitDescription())
assertEquals("FOO", status.getExitCode())
assertEquals("Bar", status.getExitDescription())
assertTrue(ExitStatus.UNKNOWN.isRunning())
assertEquals(status.getExitCode(), clone.getExitCode())
assertEquals("value1", parameters.getString("string.key1"))
assertEquals("value2", parameters.getString("string.key2"))
assertEquals(1L, parameters.getLong("long.key1").longValue())
assertEquals(2L, parameters.getLong("long.key2").longValue())
assertEquals(Double.valueOf(1.1d), parameters.getDouble("double.key1"))
assertEquals(Double.valueOf(2.2d), parameters.getDouble("double.key2"))
assertEquals(date1, parameters.getDate("date.key1"))
assertEquals(date2, parameters.getDate("date.key2"))
assertNull(parameters.getLong("missing.long1"))
assertNull(parameters.getDouble("missing.double1"))
assertTrue(new JobParameters().isEmpty())
assertFalse(parameters.isEmpty())
assertTrue(testParameters.equals(parameters))
assertTrue(parameters.equals(parameters))
assertFalse(parameters.equals(new JobParameters()))
assertFalse(parameters.equals("foo"))
assertFalse(parameters.equals(null))
assertEquals(string1, string2)
assertEquals(code, new JobParameters().hashCode())
assertEquals(code, parameters.hashCode())
assertEquals(params, SerializationUtils.clone(params))
assertNull(new JobParameters().getLong("keythatdoesntexist"))
assertNull(new JobParameters().getString("keythatdoesntexist"))
assertNull(new JobParameters().getDouble("keythatdoesntexist"))
assertNull(new JobParameters().getDate("keythatdoesntexist"))
assertEquals(entity.hashCode(), new Entity(entity.getId()).hashCode())
assertTrue(withoutNull != withNull)
assertNull(entity.getVersion())
assertEquals(Integer.valueOf(0), entity.getVersion())
assertEquals(Integer.valueOf(1), entity.getVersion())
assertTrue(job.toString().contains("id=null"))
assertEquals(entity, entity)
assertEquals(entity, entity)
assertNotSame(entity, new Entity(null))
assertEquals(entity, new Entity(entity.getId()))
assertNotEquals(entity, new Entity())
assertNotEquals(entity, new Object())
assertNotEquals(null, entity)
assertEquals(2, count)
assertEquals(2, count)
assertEquals(1, count)
assertEquals(1, count)
assertEquals(1, count)
assertEquals(1, count)
assertEquals(1, count)
assertEquals(1, count)
assertEquals(1, count)
assertEquals(1, count)
assertEquals(1, count)
assertEquals(1, count)
assertEquals(1, count)
assertEquals(1, count)
assertEquals(1, count)
assertEquals(1, count)
assertEquals(1, count)
assertEquals(1, count)
assertEquals(1, count)
assertEquals(1, count)
assertEquals(1, count)
assertEquals(1, count)
assertEquals(1, count)
assertEquals(1, count)
assertEquals(1, count)
assertEquals(1, count)
assertEquals(1, count)
assertTrue(cause instanceof IllegalStateException)
assertTrue(cause instanceof IllegalStateException)
assertTrue(cause instanceof IllegalStateException)
assertTrue(cause instanceof IllegalStateException)
assertTrue(cause instanceof IllegalStateException)
assertTrue(cause instanceof IllegalStateException)
assertTrue(cause instanceof IllegalStateException)
assertTrue(cause instanceof IllegalStateException)
assertEquals(ExitStatus.STOPPED, stepExecution.getExitStatus())
assertEquals(ExitStatus.FAILED, listener.afterStep(stepExecution))
assertEquals(2, list.size())
assertEquals(ExitStatus.FAILED, listener.afterStep(stepExecution))
assertEquals(1, list.size())
assertEquals(1, list.size())
assertEquals(BatchStatus.COMPLETED, execution.getStatus())
assertEquals(BatchStatus.FAILED, execution.getStatus())
assertEquals(0, stepExecution.getReadCount())
assertEquals(50, stepExecution.getReadSkipCount())
assertEquals(1, failureExceptions.size())
assertEquals("Skip limit of '50' exceeded", failureException.getMessage())
assertEquals("Error in onReadError.", failureException.getCause().getMessage())
assertEquals("onReadError caused this Exception", failureException.getCause().getCause().getMessage())
assertEquals(BatchStatus.COMPLETED, execution.getStatus())
assertEquals("foo", exception.getMessage().substring(0, 3))
assertEquals("1", iterator.next())
assertEquals("2", iterator.next())
assertEquals("1", iterator.next())
assertFalse(iterator.hasNext())
assertEquals("1", iterator.next())
assertEquals("3", iterator.next())
assertEquals("1", iterator.next())
assertEquals(0, ((Ordered) iterator.next()).getOrder())
assertEquals(1, ((Ordered) iterator.next()).getOrder())
assertEquals("1", iterator.next())
assertEquals(1, ((Ordered) iterator.next()).getOrder())
assertEquals(1, ((Ordered) iterator.next()).getOrder())
assertEquals("1", iterator.next())
assertEquals(item, iterator.next())
assertTrue(delegate.beforeJobCalled)
assertTrue(delegate.afterJobCalled)
assertTrue(delegate.beforeJobCalled)
assertTrue(delegate.afterJobCalled)
assertTrue(listener instanceof JobExecutionListener)
assertTrue(delegate.afterJobCalled)
assertTrue(listener instanceof JobExecutionListener)
assertTrue(listener instanceof JobExecutionListener)
assertTrue(listeners.contains(listener))
assertEquals(1, listeners.size())
assertTrue(JobListenerFactoryBean.isListener(new Object() {

    @BeforeJob
    public void foo(JobExecution execution) {
    }
}))
assertTrue(JobListenerFactoryBean.isListener(new JobListenerWithInterface()))
assertEquals(3, ((Ordered) listener).getOrder())
assertEquals(listener1, listener2)
assertTrue(delegate.isExecuted())
assertEquals(Long.valueOf(25L), jobExecution.getId())
assertTrue(delegate.isExecuted())
assertTrue(delegate.isExecuted())
assertEquals(Long.valueOf(25L), jobExecution.getId())
assertTrue(delegate.isExecuted())
assertEquals(2, list.size())
assertEquals(1, list.size())
assertEquals(1, list.size())
assertTrue(testListener.beforeStepCalled)
assertTrue(testListener.beforeChunkCalled)
assertTrue(testListener.afterChunkCalled)
assertTrue(testListener.afterChunkErrorCalled)
assertTrue(testListener.beforeReadCalled)
assertTrue(testListener.afterReadCalled)
assertTrue(testListener.onReadErrorCalled)
assertTrue(testListener.beforeProcessCalled)
assertTrue(testListener.afterProcessCalled)
assertTrue(testListener.onProcessErrorCalled)
assertTrue(testListener.beforeWriteCalled)
assertTrue(testListener.afterWriteCalled)
assertTrue(testListener.onWriteErrorCalled)
assertTrue(testListener.onSkipInReadCalled)
assertTrue(testListener.onSkipInProcessCalled)
assertTrue(testListener.onSkipInWriteCalled)
assertEquals(3, delegate.callcount)
assertEquals(1, delegate.callcount)
assertTrue(listener instanceof StepExecutionListener)
assertEquals(1, delegate.callcount)
assertTrue(listener instanceof StepExecutionListener)
assertEquals(1, delegate.callcount)
assertTrue(listener instanceof StepExecutionListener)
assertFalse(listener instanceof ChunkListener)
assertEquals(1, delegate.callcount)
assertEquals(3, ((Ordered) listener).getOrder())
assertTrue(StepListenerFactoryBean.isListener(new ThreeStepExecutionListener()))
assertTrue(StepListenerFactoryBean.isListener(new Object() {

    @BeforeStep
    public void foo(StepExecution execution) {
    }
}))
assertFalse(StepListenerFactoryBean.isListener(proxy))
assertTrue(StepListenerFactoryBean.isListener(proxy))
assertTrue(StepListenerFactoryBean.isListener(new MultipleAfterStep()))
assertTrue(factoryBean.getObject() instanceof StepListener)
assertTrue(delegate.isExecuted())
assertEquals("foo", chunk.getItems().get(0))
assertEquals("bar", chunk.getItems().get(1))
assertTrue(delegate.isExecuted())
assertTrue(delegate.isExecuted())
assertEquals("foo", chunk.getItems().get(0))
assertEquals("bar", chunk.getItems().get(1))
assertTrue(delegate.isExecuted())
assertEquals("foo", exception.getMessage().substring(0, 3))
assertEquals(value, jobExecution.getExecutionContext().getString(key))
assertFalse(jobExecution.getExecutionContext().containsKey(key2))
assertEquals(value, jobExecution.getExecutionContext().getString(key))
assertFalse(jobExecution.getExecutionContext().containsKey(key2))
assertFalse(jobExecution.getExecutionContext().containsKey(key))
assertFalse(jobExecution.getExecutionContext().containsKey(key2))
assertEquals(value, jobExecution.getExecutionContext().getString(key))
assertFalse(jobExecution.getExecutionContext().containsKey(key2))
assertEquals(value, jobExecution.getExecutionContext().getString(key))
assertFalse(jobExecution.getExecutionContext().containsKey(key2))
assertEquals(value, jobExecution.getExecutionContext().getString(key))
assertEquals("bar", stepExecution.getExecutionContext().get("foo"))
assertFalse(stepExecution.getExecutionContext().containsKey("foo"))
assertEquals(1, testClass.method1Count)
assertEquals(1, testClass.method2Count)
assertEquals(1, testClass.method1Count)
assertEquals(1, testClass.method2Count)
assertEquals(ExitStatus.COMPLETED, interceptor.invoke(new StubMethodInvocation(TestClass.class.getMethod("method3"))))
assertEquals("foo", instance.getJobName())
assertEquals("job", instance.getJobName())
assertEquals("testJob", instance.getJobName())
assertEquals(instance, SerializationUtils.clone(instance))
assertEquals(11, instance.getInstanceId())
assertNotNull(jobExecution)
assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus())
assertTrue(jobExecution.getExecutionContext().containsKey(SpringBatchVersion.BATCH_VERSION_KEY))
assertTrue(jobExecution.getStepExecutions().iterator().next().getExecutionContext().containsKey(SpringBatchVersion.BATCH_VERSION_KEY))
assertEquals("ABANDONED", BatchStatus.ABANDONED.toString())
assertEquals(BatchStatus.FAILED, BatchStatus.max(BatchStatus.FAILED, BatchStatus.COMPLETED))
assertEquals(BatchStatus.FAILED, BatchStatus.max(BatchStatus.COMPLETED, BatchStatus.FAILED))
assertEquals(BatchStatus.FAILED, BatchStatus.max(BatchStatus.FAILED, BatchStatus.FAILED))
assertEquals(BatchStatus.STARTED, BatchStatus.max(BatchStatus.STARTED, BatchStatus.STARTING))
assertEquals(BatchStatus.STARTED, BatchStatus.max(BatchStatus.COMPLETED, BatchStatus.STARTED))
assertEquals(BatchStatus.FAILED, BatchStatus.FAILED.upgradeTo(BatchStatus.COMPLETED))
assertEquals(BatchStatus.FAILED, BatchStatus.COMPLETED.upgradeTo(BatchStatus.FAILED))
assertEquals(BatchStatus.COMPLETED, BatchStatus.STARTING.upgradeTo(BatchStatus.COMPLETED))
assertEquals(BatchStatus.COMPLETED, BatchStatus.COMPLETED.upgradeTo(BatchStatus.STARTING))
assertEquals(BatchStatus.STARTED, BatchStatus.STARTING.upgradeTo(BatchStatus.STARTED))
assertEquals(BatchStatus.STARTED, BatchStatus.STARTED.upgradeTo(BatchStatus.STARTING))
assertFalse(BatchStatus.FAILED.isRunning())
assertFalse(BatchStatus.COMPLETED.isRunning())
assertTrue(BatchStatus.STARTED.isRunning())
assertTrue(BatchStatus.STARTING.isRunning())
assertTrue(BatchStatus.STOPPING.isRunning())
assertTrue(BatchStatus.FAILED.isUnsuccessful())
assertFalse(BatchStatus.COMPLETED.isUnsuccessful())
assertFalse(BatchStatus.STARTED.isUnsuccessful())
assertFalse(BatchStatus.STARTING.isUnsuccessful())
assertEquals(BatchStatus.FAILED, BatchStatus.valueOf(BatchStatus.FAILED.toString()))
assertEquals(BatchStatus.COMPLETED, status)
