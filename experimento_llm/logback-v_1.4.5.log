assertNotNull(consoleAppender)
assertTrue(checker.isErrorFree(0))
assertNull(consoleAppender)
assertTrue(checker.isErrorFree(0))
assertNull(consoleAppender)
assertNotNull(listAppender)
assertTrue(checker.isErrorFree(0))
assertNotNull(listAppender)
assertEquals(1, listAppender.list.size())
assertEquals(1, listAppender.list.size())
assertNotNull(ae)
assertEquals(1, listAppender.strList.size())
assertTrue(listAppender.strList.get(0).startsWith("testMethod"))
assertNotNull(o)
assertEquals(DummyResponse.DUMMY_DEFAULT_HDEADER_MAP, aeBack.getResponseHeaderMap())
assertEquals(DummyResponse.DUMMY_DEFAULT_HDEADER_MAP.get("x"), aeBack.getResponseHeader("x"))
assertEquals(DummyResponse.DUMMY_DEFAULT_HDEADER_MAP.get("headerName1"), aeBack.getResponseHeader("headerName1"))
assertEquals(DummyResponse.DUMMY_DEFAULT_HDEADER_MAP.size(), aeBack.getResponseHeaderNameList().size())
assertEquals(DummyResponse.DUMMY_DEFAULT_CONTENT_COUNT, aeBack.getContentLength())
assertEquals(DummyResponse.DUMMY_DEFAULT_STATUS, aeBack.getStatusCode())
assertEquals(DummyRequest.DUMMY_CONTENT_STRING, aeBack.getRequestContent())
assertEquals(DummyRequest.DUMMY_RESPONSE_CONTENT_STRING, aeBack.getResponseContent())
assertEquals(DummyRequest.DUMMY_DEFAULT_ATTR_MAP.get("testKey"), aeBack.getAttribute("testKey"))
assertEquals("ORIGINAL", event.getAttribute("testKey"))
assertEquals(val, ae.getAttribute(key))
assertEquals(val, ae.getRequestHeader(key))
assertEquals(val, ae.getRequestParameter(key)[0])
assertEquals(val, ae.getAttribute(key))
assertEquals(val, ae.getRequestHeader(key))
assertEquals(val, ae.getRequestParameter(key)[0])
assertEquals(0, statsByDay.getLastCount())
assertEquals(0, statsByDay.getLastCount())
assertEquals(1, statsByDay.getLastCount())
assertEquals(2, statsByDay.getLastCount())
assertEquals(2, statsByDay.getLastCount())
assertEquals(4, statsByDay.getLastCount())
assertEquals("hello world", result)
assertEquals("hello world", result)
assertEquals("127.0.0.1", event.getRemoteHost())
assertEquals("localhost", event.getServerName())
assertTrue(evaluator.evaluate(ae))
assertTrue(evaluator.evaluate(ae))
assertEquals(Long.toString(event.getServerAdapter().getContentLength()), result)
assertEquals(converter.cachingDateFormatter.format(event.getTimeStamp()), result)
assertEquals("21/Oct/2022:21:30:20 +1100", result)
assertEquals(converter.cachingDateFormatter.format(event.getTimeStamp()), result)
assertEquals(Integer.toString(request.getLocalPort()), result)
assertEquals(request.getRemoteHost(), result)
assertEquals(request.getRemoteAddr(), result)
assertEquals(request.getRemoteUser(), result)
assertEquals(request.getAttribute("testKey"), result)
assertEquals(cookie.getValue(), result)
assertEquals(request.getHeader("headerName1"), result)
assertEquals(request.getMethod(), result)
assertEquals(request.getProtocol(), result)
assertEquals(request.getRequestURI(), result)
assertEquals(expected, result)
assertEquals(request.getHeader("headerName1"), result)
assertEquals(request.getServerName(), result)
assertEquals(Integer.toString(event.getServerAdapter().getStatusCode()), result)
assertEquals(3, keySet.size())
assertEquals(witnessSet, keySet)
assertEquals(expectedCount, listAppender.list.size())
assertFalse(evaluator.evaluate(ae))
assertTrue(evaluator.evaluate(ae))
assertTrue(evaluator.evaluate(ae))
assertNotNull(valve.getScheduledExecutorService())
assertEquals(Arrays.asList(new String[] { "a" }), TeeFilter.extractNameList("a"))
assertEquals(Arrays.asList(new String[] { "a", "b" }), TeeFilter.extractNameList("a, b"))
assertEquals(Arrays.asList(new String[] { "a", "b" }), TeeFilter.extractNameList("a; b"))
assertEquals(Arrays.asList(new String[] { "a", "b", "c" }), TeeFilter.extractNameList("a; b, c"))
assertTrue(TeeFilter.computeActivation("somehost", "", ""))
assertTrue(TeeFilter.computeActivation("somehost", null, null))
assertTrue(TeeFilter.computeActivation("a", "a", null))
assertTrue(TeeFilter.computeActivation("a", "a, b", null))
assertFalse(TeeFilter.computeActivation("a", "b", null))
assertFalse(TeeFilter.computeActivation("a", "b, c", null))
assertFalse(TeeFilter.computeActivation("a", null, "a"))
assertFalse(TeeFilter.computeActivation("a", null, "a, b"))
assertTrue(TeeFilter.computeActivation("a", null, "b"))
assertTrue(TeeFilter.computeActivation("a", null, "b, c"))
assertFalse(TeeFilter.computeActivation("a", "a", "a"))
assertTrue(TeeFilter.computeActivation("a", "a", "b"))
assertFalse(TeeFilter.computeActivation("a", "b", "a"))
assertFalse(TeeFilter.computeActivation("a", "b", "b"))
assertArrayEquals(expectedBytes, byteArrayOutputStream.toByteArray())

fail()
Assertions.assertNotNull(condition)
Assertions.assertTrue(condition.evaluate())
Assertions.assertNotNull(condition)
Assertions.assertTrue(checker.isErrorFree(0))
Assertions.assertTrue(checker.isErrorFree(0))
Assertions.assertNull(System.getProperty(sysKey))
Assertions.assertNull(context.getProperty(dynaKey))
Assertions.assertNotNull(context.getProperty(dynaKey))
Assertions.assertNull(context.getProperty(dynaKey))
Assertions.assertNull(context.getProperty(dynaKey))
assertNotNull(fileAppender)
assertNotNull(consoleAppender)
assertTrue(checker.isErrorFree(0))
assertNotNull(fileAppender)
assertNull(consoleAppender)
assertTrue(checker.isErrorFree(0))
assertNotNull(fileAppender)
assertNull(consoleAppender)
assertNotNull(listAppender)
assertTrue(checker.isErrorFree(0))
assertNotNull(consoleAppender)
assertTrue(checker.isErrorFree(0))
assertNull(consoleAppender)
assertTrue(checker.isErrorFree(0))
Assertions.assertEquals(witness, aStack)
assertNotNull(slAppender)
assertEquals(2, slAppender.strList.size())
assertTrue(slAppender.strList.get(0).contains(" DEBUG - toto"))
assertTrue(str1.contains("Caller+0"))
assertTrue(str1.contains(" DEBUG - hello world"))
assertNotNull(listAppender)
assertEquals(1, listAppender.list.size())
assertEquals(Level.WARN, back.getLevel())
assertEquals("hello", back.getMessage())
assertNotNull(listAppender)
assertEquals(1, listAppender.list.size())
assertEquals(Level.WARN, back.getLevel())
assertEquals("hello", back.getMessage())
assertNotNull(listThen)
assertNull(listElse)
assertNull(listThen)
assertNotNull(listElse)
Assertions.assertFalse(condition.evaluate())
fail("A execução falhou por uma causa deliberada")
assertTrue(jee.evaluate(event))
assertTrue(jee.evaluate(event))
assertTrue(jee.evaluate(event))
assertTrue(jee.evaluate(event))
assertTrue(jee.evaluate(event))
assertTrue(jee.evaluate(event))
assertEquals(FilterReply.NEUTRAL, ef.decide(event))
assertTrue(jee.evaluate(event))
assertFalse(jee.isStarted())
assertTrue(jee.isStarted())
assertFalse(jee.isStarted())
assertTrue(jee.evaluate(event))
assertTrue(jee.evaluate(event))
assertTrue(jee.evaluate(event))
assertNotNull(mma)
assertEquals(expectedEmailCount, mma.length)
assertEquals(subject, mm.getSubject())
assertTrue(body.startsWith(HEADER.trim()))
assertTrue(body.endsWith(FOOTER.trim()))
assertTrue(body.startsWith(HEADER.trim()))
assertTrue(body.endsWith(FOOTER.trim()))
assertTrue(body.startsWith(HEADER.trim()))
assertTrue(body.contains("key=val"))
assertTrue(body.endsWith(FOOTER.trim()))
assertEquals("testCustomEvaluator", body)
assertEquals(msg, body)
assertNotNull(mma)
assertEquals(expectedEmailCount, mma.length)
assertNotNull(mma)
assertEquals(expectedEmailCount, mma.length)
assertFalse(body1.contains(msg0))
assertEquals(1, mma.length)
assertEquals(line1, mma[0].getSubject())
assertNotNull(mma)
Assertions.assertEquals(Status.INFO, statusChecker.getHighestLevel(0))
Assertions.assertEquals(Status.WARN, statusChecker.getHighestLevel(0))
Assertions.assertEquals(Status.ERROR, statusChecker.getHighestLevel(0))
Assertions.assertEquals(Status.ERROR, statusChecker.getHighestLevel(0))
Assertions.assertEquals(Status.WARN, statusChecker.getHighestLevel(0))
Assertions.assertEquals(expected, aStack)
Assertions.assertEquals(witness, aStack)
assertEquals("monster", inContextFoo)
assertNull(inContextFoo)
assertNull(inContextFoo)
assertNull(inContextFoo)
assertNotNull(context.getProperty("CANONICAL_HOST_NAME"))
fail("A execução falhou por uma causa deliberada", "A execução falhou por uma causa deliberada")
Assertions.assertTrue(statusChecker.containsException(SAXParseException.class))
Assertions.assertTrue(f.exists())
Assertions.assertTrue(f.delete())
Assertions.assertTrue(statusChecker.containsException(MalformedURLException.class))
Assertions.assertEquals("work", mic.getProperty("v1"))
Assertions.assertEquals("work", mic.getProperty("v1"))
Assertions.assertEquals(2, context.getStatusManager().getCount())
Assertions.assertTrue(checkError())
Assertions.assertEquals(2, context.getStatusManager().getCount())
Assertions.assertTrue(checkError())
Assertions.assertEquals(2, context.getStatusManager().getCount())
Assertions.assertTrue(checkError())
Assertions.assertEquals(2, context.getStatusManager().getCount())
Assertions.assertTrue(checkError())
Assertions.assertEquals("tata", mic.getProperty("v1"))
Assertions.assertEquals("toto", mic.getProperty("v2"))
Assertions.assertEquals("tata", mic.getProperty("v1"))
Assertions.assertEquals("toto", mic.getProperty("v2"))
Assertions.assertEquals("tata", mic.getProperty("r1"))
Assertions.assertEquals("toto", mic.getProperty("r2"))
Assertions.assertEquals("tata", mic.getProperty("r1"))
Assertions.assertEquals("toto", mic.getProperty("r2"))
Assertions.assertEquals(2, context.getStatusManager().getCount())
Assertions.assertTrue(checkFileErrors())
Assertions.assertEquals(witness, result)
Assertions.assertEquals(16, result.size())
Assertions.assertEquals(16, witness.size())
assertEquals("[a][b] already has an associated action supplier", e.getMessage())
assertEquals(1, p.size())
assertEquals("a", p.peekLast())
assertEquals("a", p.get(0))
assertEquals(1, p.size())
assertEquals("a", p.peekLast())
assertEquals("a", p.get(0))
assertEquals(2, p.size())
assertEquals("b", p.peekLast())
assertEquals("a", p.get(0))
assertEquals("b", p.get(1))
assertEquals(3, p.size())
assertEquals("a123", p.get(0))
assertEquals("b1234", p.get(1))
assertEquals("cvvsdf", p.get(2))
assertEquals(3, p.size())
assertEquals("a123", p.get(0))
assertEquals("b1234", p.get(1))
assertEquals("cvvsdf", p.get(2))
assertEquals(1, p.size())
assertEquals("a", p.get(0))
assertEquals(2, p.size())
assertEquals("a", p.get(0))
assertEquals("b", p.get(1))
assertTrue(NoAutoStartUtil.notMarkedWithNoAutoStart(o))
assertFalse(NoAutoStartUtil.notMarkedWithNoAutoStart(o))
assertEquals(Window.class, result)
assertNull(result)
assertEquals(file.getName(), back.getName())
Assertions.assertTrue(statusChecker.getHighestLevel(0) == Status.INFO)
Assertions.assertEquals(11, seList.size())
Assertions.assertEquals("test", seList.get(0).getName())
Assertions.assertEquals("badBegin", seList.get(1).getName())
Assertions.assertEquals("John Doe", startEvent.getAttributeByName("name").getValue())
Assertions.assertEquals("XXX&", ((BodyEvent) seList.get(8)).getText())
Assertions.assertTrue(statusChecker.getHighestLevel(0) == Status.INFO)
Assertions.assertEquals(3, seList.size())
Assertions.assertEquals("xxx & yyy", be.getText())
Assertions.assertTrue(statusChecker.getHighestLevel(0) == Status.INFO)
Assertions.assertEquals(4, seList.size())
Assertions.assertEquals("1", attr.getValue())
Assertions.assertEquals(3, seList.size())
Assertions.assertEquals("[x][x] \"xyz\"%n", be.getText())
Assertions.assertTrue(statusChecker.getHighestLevel(0) == Status.INFO)
Assertions.assertEquals(11, seList.size())
Assertions.assertTrue(statusChecker.getHighestLevel(0) == Status.INFO)
Assertions.assertEquals(3, seList.size())
Assertions.assertEquals("xxx & yyy", be.getText())
Assertions.assertTrue(statusChecker.getHighestLevel(0) == Status.INFO)
Assertions.assertEquals(4, seList.size())
Assertions.assertEquals("1", attr.getValue("increment"))
Assertions.assertEquals(3, seList.size())
Assertions.assertEquals("[x][x] \"xyz\"%n", be.getText())
assertEquals("Hello John Doe.", str)
assertEquals(Status.ERROR, s0.getLevel())
assertTrue(s0.getThrowable().getClass() == exceptionClass)
Assertions.assertNotNull(attr)
Assertions.assertNotNull(attr)
Assertions.assertEquals(oldErrorCount, IncAction.errorCount)
Assertions.assertEquals(oldBeginCount + 1, IncAction.beginCount)
Assertions.assertEquals(oldEndCount + 1, IncAction.endCount)
Assertions.assertTrue(s0.getMessage().startsWith("Could not open ["))
Assertions.assertEquals(2, tsl.list.size())
Assertions.assertTrue(s0.getMessage().startsWith(CoreConstants.XML_PARSING))
Assertions.assertTrue(jarFile.delete())
Assertions.assertTrue(jarFile.delete())
assertEquals(AggregationType.AS_COMPLEX_PROPERTY, setter.computeAggregationType("door"))
assertEquals(AggregationType.AS_BASIC_PROPERTY, setter.computeAggregationType("count"))
assertEquals(AggregationType.AS_BASIC_PROPERTY, setter.computeAggregationType("Count"))
assertEquals(AggregationType.AS_BASIC_PROPERTY, setter.computeAggregationType("name"))
assertEquals(AggregationType.AS_BASIC_PROPERTY, setter.computeAggregationType("Name"))
assertEquals(AggregationType.AS_BASIC_PROPERTY, setter.computeAggregationType("Duration"))
assertEquals(AggregationType.AS_BASIC_PROPERTY, setter.computeAggregationType("fs"))
assertEquals(AggregationType.AS_BASIC_PROPERTY, setter.computeAggregationType("open"))
assertEquals(AggregationType.AS_BASIC_PROPERTY, setter.computeAggregationType("Open"))
assertEquals(AggregationType.AS_COMPLEX_PROPERTY_COLLECTION, setter.computeAggregationType("Window"))
assertEquals(AggregationType.AS_BASIC_PROPERTY_COLLECTION, setter.computeAggregationType("adjective"))
assertEquals(AggregationType.AS_BASIC_PROPERTY, setter.computeAggregationType("filterReply"))
assertEquals(AggregationType.AS_BASIC_PROPERTY, setter.computeAggregationType("houseColor"))
assertEquals("trot", house.getCamelCase())
assertEquals("gh", house.getCamelCase())
assertEquals(door, house.getDoor())
assertEquals(Door.class, compClass)
assertEquals(Window.class, compClass)
assertEquals(2, house.adjectiveList.size())
assertEquals("nice", house.adjectiveList.get(0))
assertEquals("big", house.adjectiveList.get(1))
assertEquals(2, house.windowList.size())
assertEquals(10, house.windowList.get(0).handle)
assertEquals(20, house.windowList.get(1).handle)
assertEquals(pool, house.getSwimmingPool())
assertEquals(1400, house.getDuration().getMilliseconds())
assertEquals(2 * 1024, house.getFs().getSize())
assertEquals(FilterReply.ACCEPT, house.getFilterReply())
assertEquals(HouseColor.BLUE, house.getHouseColor())
assertNotNull(relevantMethod)
assertEquals(SwimmingPoolImpl.class, spClass)
assertEquals(SwimmingPoolImpl.class, classViaImplicitRules)
assertNotNull(relevantMethod)
assertEquals(LargeSwimmingPoolImpl.class, spClass)
assertEquals(LargeSwimmingPoolImpl.class, classViaImplicitRules)
assertEquals(Charset.forName("UTF-8"), house.getCharset())
assertNull(house.getCharset())
assertEquals(AggregationType.AS_BASIC_PROPERTY, orangeSetter.computeAggregationType(Citrus.PRECARP_PROPERTY_NAME))
assertEquals(AggregationType.AS_BASIC_PROPERTY, orangeSetter.computeAggregationType(Citrus.PREFIX_PROPERTY_NAME))
assertNotNull(fList)
assertEquals(1, fList.size())
assertEquals("blue", f0.getName())
assertEquals(2, f0.textList.size())
assertEquals("hello", f0.textList.get(0))
assertEquals("world", f0.textList.get(1))
assertNotNull(fList)
assertEquals(1, fList.size())
assertEquals(2, f0.cakeList.size())
assertEquals("A", cakeA.getType())
assertEquals("B", cakeB.getType())
assertEquals(0, tracker.liveKeysAsOrderedList().size())
assertEquals(0, tracker.getComponentCount())
assertNotNull(tracker.getOrCreate(key, now++))
assertEquals(0, tracker.liveKeysAsOrderedList().size())
assertEquals(0, tracker.getComponentCount())
assertNotNull(tracker.getOrCreate(key, now++))
assertEquals(cb, tracker.getOrCreate(key, now++))
assertEquals(0, tracker.liveKeysAsOrderedList().size())
assertEquals(0, tracker.getComponentCount())
assertEquals(1, cb.length())
assertEquals(0, tracker.liveKeysAsOrderedList().size())
assertEquals(0, tracker.getComponentCount())
assertEquals(0, cb.length())
assertEquals(t_at.liveKeysAsOrderedList(), at.liveKeysAsOrderedList())
assertEquals(t_at.lingererKeysAsOrderedList(), at.lingererKeysAsOrderedList())
Assertions.assertFalse(jarFile.exists())
Assertions.assertFalse(jarFile.exists())
Assertions.assertFalse(component.isStarted())
Assertions.assertTrue(aai.detachAppender("test"))
Assertions.assertTrue(aai.detachAppender("test1"))
Assertions.assertFalse(aai.detachAppender("test1"))
assertEquals(Status.ERROR, bsm.getLevel())
assertNotNull(statusList)
assertEquals(1, statusList.size())
assertEquals("hello", statusList.get(0).getMessage())
assertNotNull(statusList)
assertEquals(MAX_HEADER_COUNT + TAIL_SIZE, statusList.size())
assertEquals(witness, statusList)
assertTrue(bsm.add(sl0))
assertFalse(bsm.add(sl1))
assertEquals(-1, statusUtil.timeOfLastReset())
assertEquals(-1, statusUtil.timeOfLastReset())
assertTrue(resetTime <= statusUtil.timeOfLastReset())
assertEquals(expected, back)
assertEquals(expected, result)
Assertions.assertTrue(containsMatch(level, regex))
Assertions.assertFalse(containsMatch(regex))
Assertions.assertTrue(containsMatch(regex))
Assertions.assertTrue(containsException(scanExceptionClass))
Assertions.assertTrue(containsException(scanExceptionClass, msg))
Assertions.assertTrue(isErrorFree(0))
Assertions.assertTrue(isWarningOrErrorFree(0))
assertTrue(matcher.matches("test"))
assertTrue(matcher.matches("xxxxtest"))
assertTrue(matcher.matches("testxxxx"))
assertTrue(matcher.matches("xxxxtestxxxx"))
assertTrue(matcher.matches("test"))
assertTrue(matcher.matches("xxxxtest"))
assertTrue(matcher.matches("testxxxx"))
assertTrue(matcher.matches("xxxxtestxxxx"))
assertTrue(matcher.matches("TEST"))
assertTrue(matcher.matches("tEst"))
assertTrue(matcher.matches("tESt"))
assertTrue(matcher.matches("TesT"))
assertFalse(matcher.matches("TEST"))
assertFalse(matcher.matches("tEst"))
assertFalse(matcher.matches("tESt"))
assertFalse(matcher.matches("TesT"))
Assertions.assertEquals(12, result)
Assertions.assertEquals(size, cb.length())
Assertions.assertEquals("one", cb.get())
Assertions.assertEquals("two", cb.get())
Assertions.assertEquals(witness, clone.asList())
Assertions.assertEquals(exptectedWrites, actuallyWritten)
assertEquals("", s)
assertFalse(result.contains("%PARSER_ERROR_EX"))
assertEquals("", s)
assertEquals("", s)
assertEquals("", s)
Assertions.assertEquals("x123", s)
Assertions.assertEquals("x(123)y", s)
Assertions.assertEquals("x(123)y", s)
Assertions.assertEquals("hello % world", s)
assertEquals("hello", result)
Assertions.assertEquals(Node.LITERAL, t.getType())
Assertions.assertEquals("hello", t.getValue())
Assertions.assertEquals(witness, t)
Assertions.assertEquals(witness, t)
Assertions.assertEquals(witness, t)
Assertions.assertEquals(witness, t)
assertEquals(witness, tl)
assertEquals(witness, tl)
assertEquals(witness, tl)
assertEquals(witness, tl)
assertEquals(witness, tl)
assertEquals(witness, tl)
assertEquals(witness, tl)
assertEquals(witness, tl)
assertEquals(witness, tl)
assertEquals("a", RegularEscapeUtil.basicEscape("a"))
assertEquals("a\t", RegularEscapeUtil.basicEscape("a\t"))
assertEquals("a\\", RegularEscapeUtil.basicEscape("a\\"))
assertEquals("a\\", RegularEscapeUtil.basicEscape("a\\\\"))
Assertions.assertEquals(0, appenderTracker.getComponentCount())
Assertions.assertEquals(max, appenderTracker.allKeys().size())
Assertions.assertEquals(numComponentsCreated, appenderTracker.allKeys().size())
Assertions.assertEquals(numComponentsCreated - 1, appenderTracker.allKeys().size())
Assertions.assertEquals("valA", context.getProperty("keyA"))
Assertions.assertEquals("valA", context.getObject("keyA"))
Assertions.assertEquals(HELLO, context.getProperty(CoreConstants.CONTEXT_NAME_KEY))
Assertions.assertEquals(HELLO, context.getProperty("CONTEXT_NAME"))
assertEquals(DummyLayout.DUMMY, baos.toString())
Assertions.assertEquals(Status.WARN, statusChecker.getHighestLevel(0))
Assertions.assertEquals(DummyLayout.DUMMY, teeOut.toString())
Assertions.assertEquals("open" + CoreConstants.LINE_SEPARATOR + DummyLayout.DUMMY, teeOut.toString())
Assertions.assertEquals(DummyLayout.DUMMY + "CLOSED", teeOut.toString())
Assertions.assertEquals("a" + CoreConstants.LINE_SEPARATOR, teeOut.toString())
Assertions.assertEquals("b" + CoreConstants.LINE_SEPARATOR, newTee.toString())
Assertions.assertEquals(DummyLayout.DUMMY, new String(teeOut.toByteArray(), utf16BE))
Assertions.assertEquals(DummyLayout.DUMMY, teeOut.toString())
Assertions.assertEquals(DummyLayout.DUMMY, teeErr.toString())
Assertions.assertEquals(input, nodeToStringTransformer.transform())
Assertions.assertEquals(input, nodeToStringTransformer.transform())
Assertions.assertEquals("v0", nodeToStringTransformer.transform())
Assertions.assertEquals("c", result)
Assertions.assertEquals("av0c", nodeToStringTransformer.transform())
Assertions.assertEquals("av0b", nodeToStringTransformer.transform())
Assertions.assertEquals("http://..", nodeToStringTransformer.transform())
Assertions.assertEquals("%d{HH:mm:ss.SSS} host:local %logger{36} - %msg%n", nodeToStringTransformer.transform())
Assertions.assertEquals(input, nodeToStringTransformer.transform())
Assertions.assertEquals("bc", nodeToStringTransformer.transform())
Assertions.assertEquals("axv0c", nodeToStringTransformer.transform())
Assertions.assertEquals("a: {y}", nodeToStringTransformer.transform())
assertEquals(witnessList, tokenList)
assertEquals(witnessList, tokenList)
assertEquals(witnessList, tokenList)
assertEquals(witnessList, tokenList)
assertEquals(witnessList, tokenList)
assertEquals(witnessList, tokenList)
assertEquals(witnessList, tokenList)
assertEquals(witnessList, tokenList)
assertEquals(witnessList, tokenList)
assertEquals(witnessList, tokenList)
assertEquals(witnessList, tokenList)
assertEquals(witnessList, tokenList)
assertEquals(witnessList, tokenList)
Assertions.fail("circular reference should have been caught input=" + input)
assertEquals(witness, node)
assertEquals(witness, node)
assertEquals(witness, node)
assertEquals(witness, node)
assertEquals(witness, node)
assertEquals(witness, node)
assertEquals(witness, node)

fail()
assertEquals(witness, node)
assertEquals(witness, node)
assertEquals(witness, node)
Assertions.assertNotNull(status)
Assertions.assertNotNull(listener.getWaiter())
Assertions.assertNotNull(serverSocket)
Assertions.assertNotNull(client)
assertNotNull(appender.getServerSocketFactory())
Assertions.assertEquals(TEST_EVENT, ois.readObject())
Assertions.assertEquals(1, runner.getStartCount())
Assertions.assertEquals(0, runner.getStartCount())
assertEquals(innocent, back)
assertEquals(SyslogConstants.LOG_KERN, SyslogAppenderBase.facilityStringToint("KERN"))
assertEquals(SyslogConstants.LOG_USER, SyslogAppenderBase.facilityStringToint("USER"))
assertEquals(SyslogConstants.LOG_MAIL, SyslogAppenderBase.facilityStringToint("MAIL"))
assertEquals(SyslogConstants.LOG_DAEMON, SyslogAppenderBase.facilityStringToint("DAEMON"))
assertEquals(SyslogConstants.LOG_AUTH, SyslogAppenderBase.facilityStringToint("AUTH"))
assertEquals(SyslogConstants.LOG_SYSLOG, SyslogAppenderBase.facilityStringToint("SYSLOG"))
assertEquals(SyslogConstants.LOG_LPR, SyslogAppenderBase.facilityStringToint("LPR"))
assertEquals(SyslogConstants.LOG_NEWS, SyslogAppenderBase.facilityStringToint("NEWS"))
assertEquals(SyslogConstants.LOG_UUCP, SyslogAppenderBase.facilityStringToint("UUCP"))
assertEquals(SyslogConstants.LOG_CRON, SyslogAppenderBase.facilityStringToint("CRON"))
assertEquals(SyslogConstants.LOG_AUTHPRIV, SyslogAppenderBase.facilityStringToint("AUTHPRIV"))
assertEquals(SyslogConstants.LOG_FTP, SyslogAppenderBase.facilityStringToint("FTP"))
assertEquals(SyslogConstants.LOG_NTP, SyslogAppenderBase.facilityStringToint("NTP"))
assertEquals(SyslogConstants.LOG_AUDIT, SyslogAppenderBase.facilityStringToint("AUDIT"))
assertEquals(SyslogConstants.LOG_ALERT, SyslogAppenderBase.facilityStringToint("ALERT"))
assertEquals(SyslogConstants.LOG_CLOCK, SyslogAppenderBase.facilityStringToint("CLOCK"))
assertEquals(SyslogConstants.LOG_LOCAL0, SyslogAppenderBase.facilityStringToint("LOCAL0"))
assertEquals(SyslogConstants.LOG_LOCAL1, SyslogAppenderBase.facilityStringToint("LOCAL1"))
assertEquals(SyslogConstants.LOG_LOCAL2, SyslogAppenderBase.facilityStringToint("LOCAL2"))
assertEquals(SyslogConstants.LOG_LOCAL3, SyslogAppenderBase.facilityStringToint("LOCAL3"))
assertEquals(SyslogConstants.LOG_LOCAL4, SyslogAppenderBase.facilityStringToint("LOCAL4"))
assertEquals(SyslogConstants.LOG_LOCAL5, SyslogAppenderBase.facilityStringToint("LOCAL5"))
assertEquals(SyslogConstants.LOG_LOCAL6, SyslogAppenderBase.facilityStringToint("LOCAL6"))
assertEquals(SyslogConstants.LOG_LOCAL7, SyslogAppenderBase.facilityStringToint("LOCAL7"))
assertNotNull(configuration.getParameters())
assertNotNull(factoryBean.createKeyStore())
assertNotNull(factoryBean.createKeyStore())
assertNotNull(factoryBean.createKeyStore())
assertNotNull(factoryBean.createKeyStore())
assertNotNull(factoryBean.createKeyStore())
assertNotNull(factoryBean.createKeyManagerFactory())
assertNotNull(factoryBean.createKeyManagerFactory())
assertNotNull(factoryBean.createKeyManagerFactory())
Assertions.assertTrue(a.isStarted())
Assertions.assertTrue(lingering.isStarted())
Assertions.assertTrue(a == lingering)
Assertions.assertTrue(lifeCycleManager.isReset())
Assertions.assertTrue(file.exists())
Assertions.assertTrue(file.getParentFile().exists())
Assertions.assertTrue(file.exists())
Assertions.assertTrue(appender.isAppend())
Assertions.assertTrue(file.exists())
Assertions.assertTrue(appender0.isStarted())
Assertions.assertTrue(appender.isStarted())
Assertions.assertTrue(ca.getOutputStream() instanceof AnsiPrintStream)
Assertions.assertTrue(ca.getOutputStream() instanceof AnsiPrintStream)
Assertions.assertTrue(executor.isTerminated())
Assertions.assertTrue(runner.isContextInjected())
Assertions.assertTrue(runner.isRunning())
Assertions.assertTrue(appender.isStarted())
Assertions.assertTrue(status instanceof ErrorStatus)
Assertions.assertTrue(status.getMessage().contains(ex.getMessage()))
Assertions.assertTrue(executor.awaitTermination(DELAY, TimeUnit.MILLISECONDS))
Assertions.assertTrue(runner.awaitRunState(true, DELAY))
Assertions.assertTrue(listener.isClosed())
Assertions.assertTrue(runner.awaitRunState(true, DELAY))
Assertions.assertTrue(runner.awaitRunState(true, DELAY))
Assertions.assertTrue(localClient.isConnected())
assertTrue(Arrays.equals(new String[] { "A", "B", "C", "D" }, configurable.getEnabledProtocols()))
assertTrue(Arrays.equals(new String[] { "B" }, configurable.getEnabledProtocols()))
assertTrue(Arrays.equals(new String[] { "A" }, configurable.getEnabledProtocols()))
assertTrue(Arrays.equals(new String[] { "A", "B", "C", "D" }, configurable.getEnabledCipherSuites()))
assertTrue(Arrays.equals(new String[] { "B" }, configurable.getEnabledCipherSuites()))
assertTrue(Arrays.equals(new String[] { "A" }, configurable.getEnabledCipherSuites()))
assertTrue(configurable.isNeedClientAuth())
assertTrue(configurable.isWantClientAuth())
assertTrue(Arrays.equals(protocols, configurable.getEnabledProtocols()))
assertTrue(Arrays.equals(cipherSuites, configurable.getEnabledCipherSuites()))
assertTrue(configurable.isNeedClientAuth())
assertTrue(configurable.isWantClientAuth())
assertNotNull(factoryBean.createTrustManagerFactory())
assertNotNull(factoryBean.createTrustManagerFactory())
assertNotNull(factoryBean.createTrustManagerFactory())
assertNotNull(factoryBean.createContext(context))
assertTrue(context.hasInfoMatching(SSL_CONFIGURATION_MESSAGE_PATTERN))
assertNotNull(factoryBean.createContext(context))
assertTrue(keyManagerFactory.isFactoryCreated())
assertTrue(trustManagerFactory.isFactoryCreated())
assertTrue(keyStore.isKeyStoreCreated())
assertTrue(trustStore.isKeyStoreCreated())
assertTrue(secureRandom.isSecureRandomCreated())
assertTrue(context.hasInfoMatching(SSL_CONFIGURATION_MESSAGE_PATTERN))
assertTrue(context.hasInfoMatching(KEY_MANAGER_FACTORY_MESSAGE_PATTERN))
assertTrue(context.hasInfoMatching(TRUST_MANAGER_FACTORY_MESSAGE_PATTERN))
assertTrue(context.hasInfoMatching(KEY_STORE_MESSAGE_PATTERN))
assertTrue(context.hasInfoMatching(TRUST_STORE_MESSAGE_PATTERN))
assertTrue(context.hasInfoMatching(SECURE_RANDOM_MESSAGE_PATTERN))
Assertions.assertEquals(ois.readObject(), "some event")
assertEquals(1, cyclicBufferAppender.getLength())
assertEquals(0, cyclicBufferAppender.getLength())
assertEquals("Some string", foo)
Assertions.assertFalse(a.isStarted())
Assertions.assertFalse(a.isStarted())
Assertions.assertFalse(a.isStarted())
Assertions.assertFalse(appenderList.get(0).isStarted())
Assertions.assertFalse(appenderList.get(0).isStarted())
Assertions.assertFalse(file.getParentFile().exists())
Assertions.assertFalse(file.exists())
Assertions.assertFalse(appender1.isStarted())
Assertions.assertFalse(appender.isStarted())
Assertions.assertFalse(appender.isStarted())
Assertions.assertFalse(teeOut.isClosed())
Assertions.assertFalse(thread.isAlive())
Assertions.assertFalse(thread.isAlive())
Assertions.assertFalse(runner.isRunning())
Assertions.assertFalse(runner.isRunning())
Assertions.assertFalse(runner.awaitRunState(false, DELAY))
Assertions.assertTrue(connectorTask.isDone())
Assertions.assertTrue(lastException instanceof ConnectException)
Assertions.assertFalse(connectorTask.isDone())
Assertions.assertTrue(connectorTask.isCancelled())
Assertions.assertTrue(lastException instanceof ConnectException)
Assertions.assertFalse(connectorTask.isCancelled())
Assertions.assertFalse(instrumentedAppender.isStarted())
Assertions.assertTrue(executorService.awaitTermination(TIMEOUT, TimeUnit.MILLISECONDS))
assertTrue(rc.isTooSoon())
assertTrue(rc.isTooSoon())
assertFalse(rc.isTooSoon())
assertTrue(rc.isTooSoon())
assertFalse(rc.isTooSoon())
assertTrue(statusChecker.isErrorFree(0))
assertEquals(0, statusChecker.matchCount("Parent of target file ." + target + ". is null"))
assertTrue(statusChecker.isErrorFree(0))
assertEquals(2, result)
assertEquals(expectedCount, fileList.size())
assertEquals(expectedClassCount, set.size())
assertEquals(expectedClassCount, fileList.size())
Assertions.assertTrue(rfa.isAppend())
Assertions.assertTrue(rfa.isStarted())
Assertions.assertEquals(Status.ERROR, checker.getHighestLevel(0))
Assertions.assertTrue(tbrp.isStarted())
Assertions.assertTrue(rfa.isStarted())
Assertions.assertTrue(fwRollingPolicy.isStarted())
Assertions.assertTrue(sbTriggeringPolicy.isStarted())
Assertions.assertTrue(rfa.isStarted())
Assertions.assertEquals(Status.ERROR, checker.getHighestLevel(0))
Assertions.assertTrue(appender0.isStarted())
assertEquals(witnessList, stringList)
Assertions.assertNull(appenderTracker.find(key))
Assertions.assertNull(appenderTracker.find(key))
Assertions.assertNull(appenderTracker.find(key))
Assertions.assertNull(a)
Assertions.assertNull(a)
Assertions.assertNull(appenderTracker.find(key + "-" + 0))
Assertions.assertNull(appenderTracker.find(key + "-" + 0))
Assertions.assertNull(context.getProperty("keyA"))
Assertions.assertNull(context.getObject("keyA"))
Assertions.assertNull(context.getProperty(CoreConstants.CONTEXT_NAME_KEY))
Assertions.assertNotNull(factoryBean.createSecureRandom())
Assertions.assertNotNull(factoryBean.createSecureRandom())
Assertions.assertNotNull(socket)
Assertions.assertNotNull(lastException)
Assertions.assertNotNull(socket)
Assertions.assertNotNull(appender.getSocketFactory())
Assertions.assertNull(rfa.rawFileProperty())
assertEquals("t", pp.convertInt(3))
assertEquals("foo", pp.convertInt(3))
assertEquals("3 foo", pp.convertInt(3))
assertEquals("foo3.xixo", pp.convertInt(3))
assertEquals("foo3.log", pp.convertInt(3))
assertEquals("foo.3.log", pp.convertInt(3))
assertEquals("foo.003.log", pp.convertInt(3))
assertEquals("foo.43.log", pp.convertInt(43))
assertEquals("foo2003.05.20", pp.convert(cal.getTime()))
assertEquals("foo2003.05.20 17:55", pp.convert(cal.getTime()))
assertEquals("2003.05.20 17:55 foo", pp.convert(cal.getTime()))
assertEquals("foo2003-05-20T18:55", fnp.convert(cal.getTime()))
assertEquals("c:/foo/bar.3", pp.convertInt(3))
assertEquals("foo-2003.05.20-79.txt", fnp.convertMultipleArguments(cal.getTime(), 79))
assertEquals("foo-2003.05/2003.05.20.txt", fnp.convert(cal.getTime()))
assertNull(fnp.getPrimaryDateTokenConverter().getZoneId())
assertEquals(tz, fnp.getPrimaryDateTokenConverter().getZoneId())
Assertions.assertFalse(rfa.isStarted())
Assertions.assertFalse(rfa.isStarted())
Assertions.assertFalse(tbrp.isStarted())
Assertions.assertFalse(rfa.isStarted())
Assertions.assertFalse(fwRollingPolicy.isStarted())
Assertions.assertFalse(sbTriggeringPolicy.isStarted())
Assertions.assertFalse(rfa.isStarted())
Assertions.assertFalse(appender1.isStarted())
Assertions.assertTrue(checker.isErrorFree(0))
Assertions.assertTrue(Compare.gzCompare(CoreTestConstants.OUTPUT_DIR_PREFIX + "compress1.txt.gz", CoreTestConstants.TEST_SRC_PREFIX + "witness/compress1.txt.gz"))
Assertions.assertTrue(checker.isErrorFree(0))
Assertions.assertTrue(Compare.gzCompare(CoreTestConstants.OUTPUT_DIR_PREFIX + "compress2.txt.gz", CoreTestConstants.TEST_SRC_PREFIX + "witness/compress2.txt.gz"))
Assertions.assertTrue(checker.isErrorFree(0))
assertTrue(FileStoreUtil.areOnSameFileStore(parent, file))
assertFalse(FileStoreUtil.areOnSameFileStore(c, d))
assertArrayEquals(expected, fileArray)
assertArrayEquals(expected, fileArray)
assertNotNull(map)
assertNotNull(map.get(key))
assertNotNull(map)
assertNull(map.get(key))
assertFalse(rfa1.isStarted())
assertFalse(rfa1.isStarted())
assertTrue(Compare.compare(lastFile, witnessFileName))
Assertions.assertTrue(triggerred)
Assertions.assertTrue(triggerred)
Assertions.assertFalse(tbrp.isStarted())
Assertions.assertTrue(asyncAppenderBase.isStarted())
Assertions.assertFalse(asyncAppenderBase.isStarted())
Assertions.assertTrue(delayingListAppender.interrupted)
Assertions.assertFalse(asyncAppenderBase.isStarted())
Assertions.assertTrue(Thread.currentThread().isInterrupted())
Assertions.assertTrue(Thread.currentThread().isInterrupted())
Assertions.assertTrue(Thread.currentThread().isInterrupted())
Assertions.assertFalse(Thread.currentThread().isInterrupted())
Assertions.assertFalse(asyncAppenderBase.worker.isInterrupted())
Assertions.assertFalse(la.isStarted())
assertFalse(file.getParentFile().exists())
assertTrue(FileUtil.createMissingParentDirectories(file))
assertTrue(file.getParentFile().exists())
assertFalse(file.getParentFile().exists())
assertTrue(FileUtil.createMissingParentDirectories(file))
assertTrue(file.getParentFile().exists())
assertTrue(file.getParentFile().exists())
assertTrue(FileUtil.createMissingParentDirectories(file))
assertTrue(FileUtil.createMissingParentDirectories(file))
Assertions.assertEquals(count, rc.periodBarriersCrossed(start, end))
Assertions.assertEquals(1, rc.periodBarriersCrossed(start, end))
Assertions.assertEquals(1, rc.periodBarriersCrossed(start, end))
Assertions.assertEquals(1, rc.periodBarriersCrossed(start, end))
Assertions.assertEquals(1, rc.periodBarriersCrossed(start, end))
Assertions.assertEquals(SUCCESSFUL_EXIT_CODE, exitCode)
Assertions.assertEquals("foo-2011-12T59.log", elapsedPeriodsFileName)
Assertions.assertEquals("foo-2011-12/59.log", elapsedPeriodsFileName)
Assertions.assertEquals("foo-2011-12-20.log", elapsedPeriodsFileName)
Assertions.assertEquals(AppenderBase.ALLOWED_REPEATS, statusChecker.matchCount("Appender \\[bad\\] failed to append."))
Assertions.assertEquals(0, asyncAppenderBase.getQueueSize())
Assertions.assertEquals(loopLen, asyncAppenderBase.getNumberOfElementsInQueue())
Assertions.assertEquals(0, la.list.size())
Assertions.assertEquals(0, asyncAppenderBase.getNumberOfElementsInQueue())
Assertions.assertEquals(4, EnvUtil.getJDKVersion("1.4.xx"))
Assertions.assertEquals(5, EnvUtil.getJDKVersion("1.5"))
Assertions.assertEquals(5, EnvUtil.getJDKVersion("1.5.xx"))
Assertions.assertEquals(5, EnvUtil.getJDKVersion("1.5AA"))
Assertions.assertEquals(9, EnvUtil.getJDKVersion("9EA"))
Assertions.assertEquals(9, EnvUtil.getJDKVersion("9.0.1"))
Assertions.assertEquals(18, EnvUtil.getJDKVersion("18.3+xx"))
Assertions.assertFalse(EnvUtil.isJDK5())
Assertions.assertFalse(EnvUtil.isJDK6OrHigher())
Assertions.assertFalse(EnvUtil.isJDK7OrHigher())
Assertions.assertTrue(EnvUtil.isJDK5())
Assertions.assertFalse(EnvUtil.isJDK6OrHigher())
Assertions.assertFalse(EnvUtil.isJDK7OrHigher())
Assertions.assertTrue(EnvUtil.isJDK5())
Assertions.assertFalse(EnvUtil.isJDK6OrHigher())
Assertions.assertFalse(EnvUtil.isJDK7OrHigher())
Assertions.assertTrue(EnvUtil.isJDK5())
Assertions.assertTrue(EnvUtil.isJDK6OrHigher())
Assertions.assertFalse(EnvUtil.isJDK7OrHigher())
Assertions.assertTrue(EnvUtil.isJDK5())
Assertions.assertTrue(EnvUtil.isJDK6OrHigher())
Assertions.assertTrue(EnvUtil.isJDK7OrHigher())
Assertions.assertTrue(EnvUtil.isJDK5())
Assertions.assertTrue(EnvUtil.isJDK6OrHigher())
Assertions.assertTrue(EnvUtil.isJDK7OrHigher())
Assertions.assertTrue(EnvUtil.isJDK5())
Assertions.assertTrue(EnvUtil.isJDK6OrHigher())
Assertions.assertTrue(EnvUtil.isJDK7OrHigher())
Assertions.assertTrue(EnvUtil.isJDK5())
Assertions.assertTrue(EnvUtil.isJDK6OrHigher())
Assertions.assertTrue(EnvUtil.isJDK7OrHigher())
Assertions.assertEquals(18, EnvUtil.getJDKVersion("18.3+xx"))
Assertions.assertTrue(EnvUtil.isJDK5())
Assertions.assertTrue(EnvUtil.isJDK6OrHigher())
Assertions.assertTrue(EnvUtil.isJDK7OrHigher())
assertEquals(1, results[0])
assertEquals(2, results[1])
assertEquals(3, results[0])
assertEquals(3, results[1])
assertTrue(gate.isTooSoon(0))
assertFalse(gate.isTooSoon(0))
assertTrue(gate.getMask() > DEFAULT_MASK)
assertFalse(gate.isTooSoon(currentTime))
assertTrue(gate.getMask() < currentMask)
assertEquals(0, gate.getMask())
assertFalse(gate.isTooSoon(currentTime))
fail("circular reference should have been caught input=" + input, "A execução falhou por uma causa deliberada")
fail("A execução falhou por uma causa deliberada")
Assertions.assertEquals("html", ContentTypeUtil.getSubType(contextType))
assertEquals(noSubst, result)
assertEquals("axyz" + OptionHelper._IS_UNDEFINED, result)
assertEquals(expected, result)
assertEquals(expected, result)
assertEquals(resultWithDefault, result)
assertEquals(expected, result)
assertEquals(expected, result)
assertEquals("logs/archive/LOGBACK_trace_archive.log", result)
assertEquals(expectedMessage, e.getMessage())
assertEquals("B1-value and C1-value and B1-value", result)
assertEquals(expectedMessage, e.getMessage())
assertEquals(expectedMessage, e.getMessage())
assertEquals(expectedMessage, e.getMessage())
assertEquals(expectedMessage, e.getMessage())
assertEquals(expectedMessage, e.getMessage())
assertEquals(expectedMessage, e.getMessage())
assertEquals(expectedMessage, e.getMessage())
assertEquals(expectedMessage, e.getMessage())
assertEquals(expectedMessage, e.getMessage())
assertEquals(expectedMessage, e.getMessage())
assertEquals("k1", result)
assertEquals("jackrabbit/log/jackrabbit.log", r)
assertEquals(expectedMessage, e.getMessage())
assertEquals(prefix + suffix, r)
fail("A execução falhou por uma causa deliberada", "A execução falhou por uma causa deliberada")
fail("Should aNot yet implemented")
Assertions.assertEquals(expected - now, 478)
Assertions.assertEquals(expected, computed)
Assertions.assertEquals(expected - now, 1000 * 42 + 478)
Assertions.assertEquals(expected, computed)
Assertions.assertEquals(expected - now, 1000 * (42 + 60 * 54) + 478)
Assertions.assertEquals(expected, computed)
Assertions.assertEquals(expected - now, 1000 * (3600 * 5 + 60 * 54 + 42) + 478)
Assertions.assertEquals(expected, computed)
Assertions.assertEquals(expected - now, 1000 * (3600 * (5 + 24 * (5 + dayOffset)) + 60 * 54 + 42) + 478)
Assertions.assertEquals(expected, computed)
Assertions.assertEquals(expected - now, 1000 * (3600 * (5 + 24 * 10) + 60 * 54 + 42) + 478)
Assertions.assertEquals(expected, computed)
Assertions.assertTrue(ContentTypeUtil.isTextual(contextType))
Assertions.assertTrue(ContentTypeUtil.isTextual(contextType))
assertTrue(values.contains("A"))
assertTrue(values.contains("A"))
assertTrue(values.isEmpty())
assertTrue(values.contains("A"))
assertTrue(values.isEmpty())
assertTrue(values.contains("A"))
assertTrue(result.contains("|-INFO in " + this.getClass().getName()))
assertTrue(result.contains("+ INFO in " + this.getClass().getName()))
assertTrue(result.contains("+ WARN in " + this.getClass().getName()))
assertTrue(result.contains("    |-WARN in " + this.getClass().getName()))
assertTrue(result.contains("|-ERROR in " + this.getClass().getName()))
assertTrue(result.contains("+ INFO in " + this.getClass().getName()))
assertTrue(result.contains("ch.qos.logback.core.util.StatusPrinterTest.testWithException"))
assertArrayEquals(new Integer[] { 1 }, result)
assertArrayEquals(new Integer[] { 1 }, result)
assertArrayEquals(new Integer[] { 1 }, result)
assertEquals("2015-03-26T17:49", result)
Assertions.assertNull(ContentTypeUtil.getSubType(contextType))
Assertions.assertNull(ContentTypeUtil.getSubType(contextType))
Assertions.assertNull(x)
assertNull(imh.extractStem(null))
assertNull(imh.extractStem(""))
assertNull(imh.extractStem("bla."))
assertEquals("Foo", imh.extractStem("bla.Foo"))
assertEquals("Foo", imh.extractStem("com.titi.bla.Foo"))
assertEquals(0, listAppender.list.size())
assertEquals(1, listAppender.list.size())
assertEquals(HELLO, event.getMessage())
assertEquals(0, listAppender.list.size())
assertEquals(0, listAppender.list.size())
assertEquals(1, listAppender.list.size())
assertEquals(HELLO, event.getMessage())
assertEquals(1, listAppender.stringList.size())
assertEquals("TRACE [" + Log4jInvocation.class.getName() + "] basic-test - Hello", listAppender.stringList.get(0))
Assertions.assertSame(component, lifeCycleManager.getLastComponent())
Assertions.assertSame(listener, appender.getLastListener())
Assertions.assertSame(ex, status.getThrowable())
Assertions.assertSame(client, visitor.getLastVisited())
fail("Should aNot yet implemented", "A execução falhou por uma causa deliberada")
assertTrue(mbl.exists("iBundle"))
assertEquals(0, fel.errorList.size())
assertEquals(0, tee.baos.size())
assertEquals(EVENT_COUNT.get(), events.size())
assertNotNull(la)
Assertions.assertFalse(ContentTypeUtil.isTextual(contextType))
assertNotNull(evalMap)
assertNotNull(evaluator)
assertTrue(evaluator.evaluate(event0))
assertFalse(evaluator.evaluate(event1))
assertNotNull(evalMap)
assertTrue(evaluator.evaluate(event))
assertTrue(ee.evaluate(event))
assertNotNull(listAppender)
assertEquals(0, listAppender.list.size())
assertEquals(1, listAppender.list.size())
assertEquals(msg, le.getMessage())
assertNotNull(asyncAppender)
assertNotNull(console)
assertTrue(console.isStarted())
assertNotNull(listAppender)
assertEquals(0, listAppender.list.size())
assertEquals(1, listAppender.list.size())
assertEquals(msg, le.getMessage())
assertEquals(0, listAppender.list.size())
assertEquals(0, listAppender.list.size())
assertFalse(logger.isAdditive())
assertEquals(0, listAppender.list.size())
assertEquals(0, listAppender.list.size())
assertEquals(0, listAppender.list.size())
assertEquals(1, listAppender.list.size())
assertEquals(0, listAppender.list.size())
assertEquals(1, listAppender.list.size())
assertEquals("wombat", loggerContext.getName())
assertTrue(filter instanceof NOPTurboFilter)
assertTrue(filter instanceof DebugUsersTurboFilter)
assertEquals(2, dutf.getUsers().size())
assertNotNull(listAppender)
assertEquals(1, listAppender.list.size())
assertEquals(Level.WARN, back.getLevel())
assertEquals("hello", back.getMessage())
assertEquals(0, listAppender.list.size())
assertEquals(1, listAppender.list.size())
assertEquals("hello user2", le.getMessage())
assertEquals(0, listAppender.list.size())
assertEquals(2, listAppender.list.size())
assertEquals("hello user1", le.getMessage())
assertEquals("hello user2", le.getMessage())
assertNotNull(r)
assertNull(r)
assertEquals(expected, sysPropValue)
assertNotNull(consoleAppender)
assertEquals("UTF-8", encoder.getCharset().displayName())
assertNull(System.getProperty("sys"))
assertNotNull(loggerContext.getProperty(CoreConstants.HOSTNAME_KEY))
assertNull(loggerContext.getProperty("transientKey1"))
assertNull(loggerContext.getProperty("transientKey2"))
assertEquals("node0", loggerContext.getProperty("nodeId"))
assertEquals("tem", System.getProperty("sys"))
assertNotNull(loggerContext.getProperty("path"))
assertEquals("A", loggerContext.getProperty(CoreConstants.HOSTNAME_KEY))
assertFalse(loggerContext.isPackagingDataEnabled())
assertTrue(loggerContext.isPackagingDataEnabled())
assertNotNull(thread)
assertNotNull(thread)
assertNotNull(thread)
assertNotNull(listAppender)
assertEquals(0, listAppender.list.size())
assertEquals(1, listAppender.list.size())
assertEquals(msg, le.getMessage())
assertNotNull(listAppenderA)
assertNotNull(asyncAppender)
assertTrue(asyncAppender.isStarted())
assertNotNull(asyncAppender)
assertTrue(asyncAppender.isStarted())
assertNotNull(listAppender)
assertTrue(listAppender.isStarted())
assertNotNull(listAppender)
assertEquals(1, se1 - se0)
assertNotNull(listAppender)
assertNotNull(slAppender)
assertEquals(4, slAppender.strList.size())
assertTrue(slAppender.strList.get(0).contains(kvp1.key + "=\"" + kvp1.value + "\" " + msg))
assertTrue(slAppender.strList.get(1).contains(kvp2.key + "=\"" + kvp2.value + "\" " + msg))
assertTrue(slAppender.strList.get(2).contains("null=\"" + kvpNullKey.value + "\" " + msg))
assertTrue(slAppender.strList.get(3).contains(kvpNullValue.key + "=\"null\" " + msg))
assertEquals("a\\t", loggerContext.getProperty("fuzz-47093-a"))
assertEquals("a\\\\", loggerContext.getProperty("fuzz-47093-b"))
assertTrue(future.isCancelled())
assertNull(configurationWatchList)
assertNull(roct)
assertEquals(0, loggerContext.getCopyOfScheduledFutures().size())
assertNotNull(oldRoct)
assertNotNull(oldRoct)
assertFalse(scheduledFutures.isEmpty())
assertTrue(fileList.contains(file.getAbsoluteFile()))
assertEquals(expected, effectiveResets)
assertNotNull(rootElement.element("body"))
assertEquals("Level", elementList.get(0).getText())
assertEquals("Thread", elementList.get(1).getText())
assertEquals("Message", elementList.get(2).getText())
assertEquals("test1: msg1", result[0])
assertEquals(DefaultThrowableRenderer.TRACE_PREFIX + "at c1.m1(f1:1)", result[1])
assertEquals(2, rootElement.elements().size())
assertEquals("table", tableElement.getName())
assertEquals(3, tableElement.elements().size())
assertTrue(exceptionElement.getText().contains("java.lang.Exception: test Exception"))
assertTrue(header.startsWith("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">"))
assertNotNull(sla)
assertEquals(1, sla.strList.size())
assertFalse(sla.strList.get(0).contains("PARSER_ERROR"))
assertNotNull(logger)
assertEquals(name, logger.getName())
assertEquals(effectiveLevel, logger.getEffectiveLevel())
assertEquals(FilterReply.DENY, filter.decide(null, null, null, null, null, null))
assertEquals(FilterReply.DENY, filter.decide(null, null, null, null, null, null))
assertEquals(FilterReply.ACCEPT, filter.decide(null, null, null, null, null, null))
assertFalse(filter.isStarted())
assertEquals(FilterReply.NEUTRAL, filter.decide(null, null, null, null, null, null))
assertEquals(FilterReply.NEUTRAL, filter.decide(null, null, null, null, null, null))
assertFalse(filter.isStarted())
assertEquals(FilterReply.NEUTRAL, filter.decide(null, null, null, null, null, null))
assertEquals(FilterReply.NEUTRAL, filter.decide(null, null, null, null, null, null))
assertEquals(witness, cache.keyList())
assertEquals(tlruCache.keyList(), lruCache.keyList())
assertEquals(FilterReply.NEUTRAL, dmf.decide(null, null, null, "x", null, null))
assertEquals(FilterReply.NEUTRAL, dmf.decide(null, null, null, "y", null, null))
assertEquals(FilterReply.DENY, dmf.decide(null, null, null, "x", null, null))
assertEquals(FilterReply.DENY, dmf.decide(null, null, null, "y", null, null))
assertEquals(FilterReply.NEUTRAL, dmf.decide(null, null, null, "a", null, null))
assertEquals(FilterReply.NEUTRAL, dmf.decide(null, null, null, "b", null, null))
assertEquals(FilterReply.NEUTRAL, dmf.decide(null, null, null, "a", null, null))
assertEquals(FilterReply.NEUTRAL, dmf.decide(null, null, null, null, null, null))
assertEquals(FilterReply.NEUTRAL, dmf.decide(null, null, null, null, null, null))
assertFalse(mkt.isStarted())
assertEquals(FilterReply.NEUTRAL, mkt.decide(totoMarker, null, null, null, null, null))
assertEquals(FilterReply.NEUTRAL, mkt.decide(null, null, null, null, null, null))
assertTrue(mkt.isStarted())
assertEquals(FilterReply.DENY, mkt.decide(null, null, null, null, null, null))
assertEquals(FilterReply.ACCEPT, mkt.decide(totoMarker, null, null, null, null, null))
assertTrue(mkt.isStarted())
assertEquals(FilterReply.DENY, mkt.decide(null, null, null, null, null, null))
assertEquals(FilterReply.ACCEPT, mkt.decide(totoMarker, null, null, null, null, null))
assertEquals(FilterReply.ACCEPT, mkt.decide(compositeMarker, null, null, null, null, null))
assertEquals(0, cache.getMessageCountAndThenIncrement("0"))
assertEquals(1, cache.getMessageCountAndThenIncrement("0"))
assertEquals(0, cache.getMessageCountAndThenIncrement("1"))
assertEquals(1, cache.getMessageCountAndThenIncrement("1"))
assertEquals(0, cache.getMessageCountAndThenIncrement("2"))
assertEquals(0, cache.getMessageCountAndThenIncrement("0"))
assertEquals(0, cache.getMessageCountAndThenIncrement("1"))
assertEquals(0, cache.getMessageCountAndThenIncrement("2"))
assertNull(configurationWatchList.getMainURL())
assertFalse(reconfigureOnChangeFilter.isStarted())
assertTrue(fileList.contains(file.getAbsoluteFile()))
assertTrue(getFirstTurboFilter() instanceof ReconfigureOnChangeFilter)
assertTrue(rocf.isStarted())
assertTrue(rocf.isStarted())
assertTrue(val.contains("java.lang.Exception: Bogus exception"))
assertTrue(val.matches(regex))
assertEquals("b", val)
assertTrue(!val.contains("java.lang.Exception: Bogus exception"))
assertEquals("(Some message:Some message) Some message", val)
assertTrue(val.matches(regex))
assertEquals("aValue", val)
assertEquals("aValue", val)
assertEquals(expected, val)
assertNotNull(sla)
assertEquals(1, sla.strList.size())
assertEquals(SampleConverter.SAMPLE_STR + " - " + msg, sla.strList.get(0))
assertEquals("aXXXXb", val)
assertEquals(pattern, substPattern)
assertEquals("A\n\tB", val)
assertNotNull(sla)
assertEquals(1, sla.strList.size())
assertEquals("And the number is XXXX, expiring on 12/2010", sla.strList.get(0))
assertNotNull(sla)
assertEquals(1, sla.strList.size())
assertEquals("A\n\tC", sla.strList.get(0))
assertEquals("logger=" + logger.getName() + " hello", val)
assertEquals(UpdateType.RESET, listener.updateType)
assertEquals(listener.context, context)
assertEquals(UpdateType.STOP, listener.updateType)
assertEquals(listener.context, context)
assertEquals(UpdateType.RESET, listener.updateType)
assertEquals(listener.context, context)
assertEquals(UpdateType.START, listener.updateType)
assertEquals(listener.context, context)
assertEquals(UpdateType.LEVEL_CHANGE, listener.updateType)
assertEquals(listener.logger, logger)
assertEquals(listener.level, level)
assertEquals(1, listenerList.size())
assertEquals(BasicContextListener.UpdateType.START, lcl.updateList.get(1))
assertEquals(1, listenerList.size())
assertEquals(BasicContextListener.UpdateType.START, lcl.updateList.get(1))
assertNotNull(cda)
assertTrue(cda.length > 0)
assertEquals(steArray.length - 1, cda.length)
assertNotNull(cda)
assertEquals(0, cda.length)
assertEquals(expected, result)
assertEquals(0, comparator.compare(a, a))
assertEquals(-1, comparator.compare(a, b))
assertEquals(1, comparator.compare(b, a))
assertEquals(-1, comparator.compare(root, a))
assertEquals(1, comparator.compare(a, root))
assertEquals(0, comparator.compare(root, root))
assertNotNull(remoteEvent.getLoggerName())
assertEquals(Logger.ROOT_LOGGER_NAME, remoteEvent.getLoggerName())
assertNotNull(loggerContextRemoteView)
assertEquals("testContext", loggerContextRemoteView.getName())
assertNotNull(props)
assertEquals("testValue", props.get("testKey"))
assertEquals("testValue", MDCPropertyMap.get("key"))
assertEquals("updatedTestValue", MDCPropertyMap.get("key"))
assertNotNull(aa)
assertEquals(2, aa.length)
assertEquals("LC(0)", aa[0])
assertNull(aa[1])
assertNotNull(event.getMarkerList())
assertNotNull(remoteEvent.getMarkerList())
assertEquals(Arrays.asList(marker), remoteEvent.getMarkerList())
assertNotNull(event.getMarkerList())
assertNotNull(remoteEvent.getMarkerList())
assertEquals(Arrays.asList(marker), remoteEvent.getMarkerList())
assertNotNull(aa)
assertEquals(2, aa.length)
assertEquals(largeString, stringBack)
assertEquals(original.getLevel(), afterSerialization.getLevel())
assertEquals(original.getFormattedMessage(), afterSerialization.getFormattedMessage())
assertEquals(original.getMessage(), afterSerialization.getMessage())
assertEquals(witness, afterSerialization.getThrowableProxy())
assertTrue(loggerFactory.isStarted())
assertNull(event.formattedMessage)
assertEquals("x=12", event.getFormattedMessage())
assertNull(event.formattedMessage)
assertEquals("12-13", event.getFormattedMessage())
assertNull(event.formattedMessage)
assertEquals(message, event.getFormattedMessage())
assertNull(event.formattedMessage)
assertEquals(message, event.getFormattedMessage())
assertTrue(sps.stringList.isEmpty())
assertEquals(1, wlila.list.size())
assertEquals("59", result)
assertEquals(0, listAppender.list.size())
assertEquals(1, listAppender.list.size())
assertEquals(Status.WARN, s0.getLevel())
assertTrue(s0.getMessage().startsWith("Attempted to append to non started"))
assertEquals(1, listAppender.list.size())
assertEquals(0, listAppender.list.size())
assertEquals(3, listAppender.list.size())
assertEquals(Level.INFO, a_b.getEffectiveLevel())
assertEquals(Level.INFO, a_b.getEffectiveLevel())
assertEquals(NOPLoggingEventBuilder.class, leb.getClass())
assertEquals(root.getEffectiveLevel(), loggerTest.getEffectiveLevel())
assertEquals(root.getEffectiveLevel(), loggerTest.getEffectiveLevel())
assertEquals(root.getEffectiveLevel(), loggerTest.getEffectiveLevel())
assertEquals(root.getEffectiveLevel(), child.getEffectiveLevel())
assertEquals("12", event.getFormattedMessage())
assertEquals("12-13", event.getFormattedMessage())
assertEquals("test", event.getFormattedMessage())
assertEquals("test", event.getFormattedMessage())
assertEquals("12", formattedMessage)
Assertions.assertEquals("x", x.getName())
Assertions.assertEquals(clc.getRootLogger(), x.parent)
Assertions.assertEquals("a.b.c", abc.getName())
Assertions.assertEquals(Level.DEBUG, abc.getEffectiveLevel())
Assertions.assertEquals("x.y.z", xyz.getName())
Assertions.assertEquals("x.y", xyz.parent.getName())
Assertions.assertEquals("x", xyz.parent.parent.getName())
Assertions.assertEquals("root", xyz.parent.parent.parent.getName())
Assertions.assertEquals("x.y.z", xyz_.getName())
assertTrue(logger.isDebugEnabled())
assertTrue(logger.isInfoEnabled())
assertTrue(logger.isWarnEnabled())
assertTrue(logger.isErrorEnabled())
assertTrue(logger.isEnabledFor(Level.INFO))
assertFalse(logger.isEnabledFor(Level.INFO))
assertFalse(logger.isDebugEnabled())
assertFalse(logger.isInfoEnabled())
assertFalse(logger.isWarnEnabled())
assertFalse(logger.isErrorEnabled())
assertTrue(logger.isDebugEnabled(blueMarker))
assertFalse(logger.isDebugEnabled(blueMarker))
assertNotNull(context.getTurboFilterList().get(0))
assertEquals(0, context.getTurboFilterList().size())
assertEquals(msg, baos.toString())
assertEquals(msg, new String(baos.toByteArray(), utf8Charset))
assertTrue(!ple.isStarted())
assertTrue(ple.isStarted())
assertTrue(fileAppender.isStarted())
assertTrue(fileAppender.getEncoder() instanceof LayoutWrappingEncoder)
assertTrue(fileAppender.isStarted())
assertEquals(immediateFlush, Boolean.valueOf(fileAppender.isImmediateFlush()))
assertEquals(Level.DEBUG, root.getLevel())
assertEquals(Level.DEBUG, root.getEffectiveLevel())
assertNotNull(x)
assertEquals("x", x.getName())
assertNull(x.getLevel())
assertEquals(Level.DEBUG, x.getEffectiveLevel())
assertEquals(3, lc.getLoggerList().size())
assertEquals(4, lc.getLoggerList().size())
assertEquals(1, lc.getLoggerList().size())
assertEquals(3, instanceCount())
assertEquals(3, instanceCount())
assertEquals(xy, xy2)
assertEquals(x, x2)
assertEquals(3, instanceCount())
assertEquals(1, instanceCount())
assertEquals(4, instanceCount())
assertEquals(102, instanceCount())
assertEquals(Level.DEBUG, root.getEffectiveLevel())
assertTrue(root.isDebugEnabled())
assertEquals(Level.DEBUG, a.getEffectiveLevel())
assertEquals(Level.DEBUG, ab.getEffectiveLevel())
assertEquals(Level.DEBUG, root.getLevel())
assertNull(a.getLevel())
assertNull(ab.getLevel())
assertTrue(nopTF.isStarted())
assertFalse(nopTF.isStarted())
assertEquals("valA", lc.getProperty("keyA"))
assertEquals("valA", lc.getObject("keyA"))
assertNull(lc.getProperty("keyA"))
assertNull(lc.getObject("keyA"))
assertTrue(root.isTraceEnabled())
assertFalse(root.isTraceEnabled())
assertTrue(root.isDebugEnabled())
assertNotNull(lc.getObject(CoreConstants.EVALUATOR_MAP))
assertNotNull(fileCollisions)
assertTrue(fileCollisions.isEmpty())
assertNotNull(filenamePatternCollisionMap)
assertTrue(filenamePatternCollisionMap.isEmpty())
assertEquals(38, wordList.size())
assertEquals("When", wordList.get(0))
assertEquals("'Beagle,'", wordList.get(4))
assertEquals("of", wordList.get(17))
assertEquals(0, selector.getCount())
assertEquals("tata", selector.getLoggerContext().getName())
assertEquals("titi", selector.getLoggerContext().getName())
assertEquals(2, selector.getCount())
assertEquals("toto", context.getName())
assertEquals("tata", context.getName())
assertEquals(2, selector.getCount())
assertEquals("default", context.getName())
assertTrue(evaluator.evaluate(event))
assertFalse(evaluator.evaluate(event))
assertFalse(evaluator.evaluate(event))
assertEquals(julLevel, julLogger.getLevel())
assertEquals(julLevel, julLogger.getLevel())
assertFalse(julLogger.isLoggable(java.util.logging.Level.CONFIG))
assertEquals("Unexpected level [null]", e.getMessage())
assertEquals(parent.getEffectiveLevel(), child.getEffectiveLevel())
assertEquals(Level.DEBUG, child.getEffectiveLevel())
assertEquals(Level.TRACE, Level.toLevel("TRACE"))
assertEquals(Level.DEBUG, Level.toLevel("DEBUG"))
assertEquals(Level.INFO, Level.toLevel("INFO"))
assertEquals(Level.WARN, Level.toLevel("WARN"))
assertEquals(Level.ERROR, Level.toLevel("ERROR"))
assertEquals(Level.INFO, Level.toLevel("INFO "))
assertEquals(name, abbreviator.abbreviate(name))
assertEquals("456", result)
assertEquals("", result)
assertEquals("k=\"v\"", result)
assertTrue(buf.toString().matches(regex))
assertEquals("Some message", buf.toString())
assertEquals(CoreConstants.LINE_SEPARATOR, buf.toString())
assertEquals(witness.toString(), buf.toString())
assertEquals(this.getClass().getName(), buf.toString())
assertEquals("testMethodOfCaller", buf.toString())
assertEquals("ConverterTest.java", buf.toString())
assertEquals(buf0.toString(), buf1.toString())
assertTrue(buf.toString().startsWith(expected))
assertEquals("someValue", result)
assertEquals("aValue", result)
assertEquals("v", result)
assertTrue(converter.isStarted())
assertEquals("123", converter.convert(event))
assertEquals(k + "=" + v, result)
assertTrue(result.contains("XYZ"))
assertEquals(sw.toString(), result)
assertEquals("", result)
assertEquals(name, result)
assertEquals("test [ child ]", result)
assertEquals("testParent [ child1, child2, child3 ]", result)
assertEquals("<191>Aug  7 13:15:00 " + HOSTNAME + " ", converter.convert(le))
assertEquals("<191>Oct 11 22:14:15 " + HOSTNAME + " ", converter.convert(le))
assertEquals("<191>Oct 11 22:14:15 " + HOSTNAME + " ", converter.convert(le))
assertEquals("<191>Oct 11 22:14:15 " + HOSTNAME + " ", converter.convert(le))
assertEquals("<191>Oct 11 22:14:16 " + HOSTNAME + " ", converter.convert(le))
assertEquals("<191>Oct 11 22:14:15 " + host + " ", converter.convert(le))
assertTrue(reader.readLine().contains(t.getMessage()))
assertNotNull(reader.readLine())
assertTrue(reader.readLine().contains(t.getMessage()))
assertNotNull(reader.readLine())
assertEquals(sw.toString(), result)
assertFalse(sa.isStarted())
assertNotNull(appender)
assertEquals(1, listAppender.list.size())
assertEquals("smoke", eventList.get(0).getMessage())
assertNull(getAppenderTracker())
assertNull(getAppenderTracker())
assertNotNull(listAppender)
assertEquals(1, strList.size())
assertEquals("DEBUG hello", strList.get(0))
assertNotNull(fileAppenderA)
assertTrue(fileAppenderA.isStarted())
assertFalse(fileAppenderA.isStarted())
assertTrue(fileAppenderA_2.isStarted())
assertNotNull(listAppender)
assertEquals(1, listAppender.list.size())
assertEquals("smoke", eventList.get(0).getMessage())
assertFalse(listAppender.isStarted())
assertEquals(1, sa.getAppenderTracker().allKeys().size())
assertTrue(sa.getAppenderTracker().allKeys().contains("cycleDefault"))
assertEquals(1, tracker.allKeys().size())
assertTrue(appender.isStarted())
assertFalse(appender.isStarted())
assertEquals(0, tracker.allKeys().size())
assertNotNull(listAppender)
assertEquals(1, listAppender.strList.size())
assertEquals(prefix + msg, strList.get(0))
assertNotNull(listAppender)
assertEquals(1, listAppender.strList.size())
assertEquals(prefix + msg, strList.get(0))
assertNotNull(listAppender)
assertEquals(1, listAppender.strList.size())
assertEquals(prefix + msg, strList.get(0))
assertEquals(max, tracker.allKeys().size())
assertNull(tracker.find("" + (diff + 0)))
assertEquals(1, tracker.getComponentCount())
assertEquals(0, tracker.getComponentCount())
assertTrue(discriminator.isStarted())
assertEquals(value, discriminatorValue)
assertEquals(new HashMap<String, String>(), event.getMDCPropertyMap())
assertEquals(DEFAULT_VAL, discriminatorValue)
assertEquals("a", a.getName())
assertEquals("a", a.getName())
assertNull(threadA.x0)
assertEquals("a", threadA.x1)
assertNull(threadA.x2)
assertNull(threadB.x0)
assertEquals("b", threadB.x1)
assertNull(threadB.x2)
assertNull(MDC.get(key))
assertNull(MDC.get(key))
assertEquals(controlLoggerMap.size() + 1, lc.size())
assertEquals(controlLogger.getName(), logger.getName())
assertEquals(controlLogger.getEffectiveLevel(), logger.getEffectiveLevel())
assertTrue(runner.isContextInjected())
assertTrue(runner.isRunning())
assertSame(listener, receiver.getLastListener())
assertFalse(runner.isRunning())
assertEquals(1, runner.getStartCount())
assertTrue(receiver.isStarted())
assertNotNull(status)
assertTrue(status instanceof ErrorStatus)
assertTrue(status.getMessage().contains(ex.getMessage()))
assertSame(ex, status.getThrowable())
assertEquals(0, runner.getStartCount())
assertNotNull(socketFactory)
assertTrue(ssl.isContextCreated())
assertTrue(parameters.isContextInjected())
assertTrue(executor.isTerminated())
assertNotNull(rcvdEvent)
assertEquals(event.getLoggerName(), rcvdEvent.getLoggerName())
assertEquals(event.getLevel(), rcvdEvent.getLevel())
assertEquals(event.getMessage(), rcvdEvent.getMessage())
assertEquals(event.getLoggerName(), rcvdEvent.getLoggerName())
assertEquals(event.getLevel(), rcvdEvent.getLevel())
assertEquals(event.getMessage(), rcvdEvent.getMessage())
assertNull(appender.getLastEvent())
assertTrue(sa.isStarted())
assertTrue(mockServer.isFinished())
assertEquals(1, mockServer.getMessageList().size())
assertTrue(msg.startsWith(expected))
assertTrue(mockServer.isFinished())
assertEquals(1, mockServer.getMessageList().size())
assertTrue(msg.startsWith(expected))
assertTrue(mockServer.isFinished())
assertEquals(21, mockServer.getMessageList().size())
assertTrue(msg.startsWith(expected))
assertTrue(msg.contains(ex.getClass().getName()))
assertTrue(msg.contains(ex.getMessage()))
assertTrue(msg.startsWith(expected))
assertTrue(mockServer.isFinished())
assertEquals(2, mockServer.getMessageList().size())
assertTrue(largeMsg.startsWith(expected))
assertTrue(msg.startsWith(expected))
assertTrue(mockServer.isFinished())
assertEquals(1, mockServer.getMessageList().size())
assertTrue(msg.startsWith(expected))
assertEquals("sebastien.nospam@qos.ch%nopex", appender.getToAsListOfString().get(0))
assertEquals("logging report", appender.getSubject())
assertTrue(appender.isStarted())
assertEquals(1, cb.length())
assertEquals(0, appender.getContext().getStatusManager().getCount())
assertEquals(1, appender.getContext().getStatusManager().getCount())
assertEquals(1, appender.getContext().getStatusManager().getCount())
assertNotNull(remote.getSocketFactory())
assertTrue(executor.awaitTermination(DELAY, TimeUnit.MILLISECONDS))
assertFalse(receiver.isStarted())
assertTrue(status.getMessage().contains("host"))
assertFalse(receiver.isStarted())
assertTrue(status.getMessage().contains("port"))
assertFalse(receiver.isStarted())
assertTrue(status.getMessage().contains("unknown host"))
assertTrue(receiver.isStarted())
assertFalse(receiver.isStarted())
assertTrue(receiver.awaitConnectorCreated(DELAY / 2))
assertTrue(receiver.awaitConnectorCreated(DELAY))
assertTrue(receiver.awaitConnectorCreated(DELAY))
assertNotNull(rcvdEvent)
assertEquals(event.getLoggerName(), rcvdEvent.getLoggerName())
assertEquals(event.getLevel(), rcvdEvent.getLevel())
assertEquals(event.getMessage(), rcvdEvent.getMessage())
assertTrue(receiver.awaitConnectorCreated(DELAY))
assertNull(appender.awaitAppend(DELAY))
assertTrue(socketAppender.isStarted())
assertFalse(asyncAppender.isStarted())
assertEquals(1, listAppender.list.size())
assertEquals("v", e.getMDCPropertyMap().get(k))
assertFalse(e.hasCallerData())
assertEquals(1, listAppender.list.size())
assertTrue(e.hasCallerData())
assertEquals(thisClassName, ste.getClassName())
assertFalse(rfa.isStarted())
assertFalse(rfa.isStarted())
assertFalse(rfa.isStarted())
assertNotNull(versionStr)
assertTrue(versionStr.startsWith("1.4"))
assertEquals(witnessList, partList)
assertEquals(witnessList, partList)
assertEquals(witnessList, partList)
assertEquals(witnessList, partList)
assertEquals(witnessList, partList)
assertEquals(witnessList, partList)
assertEquals(witnessList, partList)
assertNotNull(appender)
assertNull(MockConfigurator.context)
assertNotNull(MockConfigurator.context)
assertSame(loggerContext, MockConfigurator.context)
assertNull(MockConfigurator.context)
assertNull(MockConfigurator.context)
assertEquals(0, statusListenerList.size())
assertEquals(0, sll.size())
assertNull(loggerContext.getObject(CoreConstants.SAFE_JORAN_CONFIGURATION))
assertNotNull(loggerContext.getObject(CoreConstants.SAFE_JORAN_CONFIGURATION))
assertEquals(SyslogConstants.DEBUG_SEVERITY, LevelToSyslogSeverity.convert(createEventOfLevel(Level.TRACE)))
assertEquals(SyslogConstants.DEBUG_SEVERITY, LevelToSyslogSeverity.convert(createEventOfLevel(Level.DEBUG)))
assertEquals(SyslogConstants.INFO_SEVERITY, LevelToSyslogSeverity.convert(createEventOfLevel(Level.INFO)))
assertEquals(SyslogConstants.WARNING_SEVERITY, LevelToSyslogSeverity.convert(createEventOfLevel(Level.WARN)))
assertEquals(SyslogConstants.ERROR_SEVERITY, LevelToSyslogSeverity.convert(createEventOfLevel(Level.ERROR)))
assertNotNull(la)
assertNotNull(appender)
assertTrue(appender instanceof ConsoleAppender)
Assertions.assertEquals(witness, mdcAdapter.getPropertyMap())
Assertions.assertEquals("v0", map0.get("k0"))
Assertions.assertEquals("v0", map0.get("k0"))
Assertions.assertEquals("v1", map0.get("k1"))
Assertions.assertEquals(parentHMWitness, parentHM)
Assertions.assertEquals(childHMWitness, childThread.childHM)
Assertions.assertEquals(firstKey + A_SUFFIX, mdcAdapter.get(firstKey))
Assertions.assertEquals(firstKey + A_SUFFIX, mdcAdapter.get(firstKey))
Assertions.assertEquals(secondKey + A_SUFFIX, logbackMDCAdapter.get(secondKey))
assertEquals(cm, copy)
assertEquals(cm, copy)
