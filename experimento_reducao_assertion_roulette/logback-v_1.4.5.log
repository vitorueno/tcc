
Projeto: /home/vitor-otto/opensource/logback-v_1.4.5

Antes do refactor: 
chamada antiga: assertNotNull(consoleAppender)
nova chamada: assertNotNull(consoleAppender, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(checker.isErrorFree(0))
nova chamada: assertTrue(checker.isErrorFree(0), "Era esperado verdadeiro, mas " + result0 + " <checker.isErrorFree(0)> é falso")
chamada antiga: assertNull(consoleAppender)
nova chamada: assertNull(consoleAppender, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertTrue(checker.isErrorFree(0))
nova chamada: assertTrue(checker.isErrorFree(0), "Era esperado verdadeiro, mas " + result1 + " <checker.isErrorFree(0)> é falso")
chamada antiga: assertNull(consoleAppender)
nova chamada: assertNull(consoleAppender, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotNull(listAppender)
nova chamada: assertNotNull(listAppender, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(checker.isErrorFree(0))
nova chamada: assertTrue(checker.isErrorFree(0), "Era esperado verdadeiro, mas " + result2 + " <checker.isErrorFree(0)> é falso")
chamada antiga: assertNotNull(listAppender)
nova chamada: assertNotNull(listAppender, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(1, listAppender.list.size())
nova chamada: assertEquals(1, listAppender.list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result3 + " <listAppender.list.size()>")
chamada antiga: assertEquals(1, listAppender.list.size())
nova chamada: assertEquals(1, listAppender.list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result4 + " <listAppender.list.size()>")
chamada antiga: assertNotNull(ae)
nova chamada: assertNotNull(ae, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(1, listAppender.strList.size())
nova chamada: assertEquals(1, listAppender.strList.size(), "Era esperado valores iguais, mas  1 é diferente de " + result5 + " <listAppender.strList.size()>")
chamada antiga: assertTrue(listAppender.strList.get(0).startsWith("testMethod"))
nova chamada: assertTrue(listAppender.strList.get(0).startsWith("testMethod"), "Era esperado verdadeiro, mas " + result6 + " <listAppender.strList.get(0).startsWith('testMethod')> é falso")
chamada antiga: assertNotNull(o)
nova chamada: assertNotNull(o, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(DummyResponse.DUMMY_DEFAULT_HDEADER_MAP, aeBack.getResponseHeaderMap())
nova chamada: assertEquals(DummyResponse.DUMMY_DEFAULT_HDEADER_MAP, aeBack.getResponseHeaderMap(), "Era esperado valores iguais, mas  DummyResponse.DUMMY_DEFAULT_HDEADER_MAP é diferente de " + result7 + " <aeBack.getResponseHeaderMap()>")
chamada antiga: assertEquals(DummyResponse.DUMMY_DEFAULT_HDEADER_MAP.get("x"), aeBack.getResponseHeader("x"))
nova chamada: assertEquals(DummyResponse.DUMMY_DEFAULT_HDEADER_MAP.get("x"), aeBack.getResponseHeader("x"), "Era esperado valores iguais, mas " + result8 + " <DummyResponse.DUMMY_DEFAULT_HDEADER_MAP.get('x')> é diferente de " + result9 + " <aeBack.getResponseHeader('x')>")
chamada antiga: assertEquals(DummyResponse.DUMMY_DEFAULT_HDEADER_MAP.get("headerName1"), aeBack.getResponseHeader("headerName1"))
nova chamada: assertEquals(DummyResponse.DUMMY_DEFAULT_HDEADER_MAP.get("headerName1"), aeBack.getResponseHeader("headerName1"), "Era esperado valores iguais, mas " + result10 + " <DummyResponse.DUMMY_DEFAULT_HDEADER_MAP.get('headerName1')> é diferente de " + result11 + " <aeBack.getResponseHeader('headerName1')>")
chamada antiga: assertEquals(DummyResponse.DUMMY_DEFAULT_HDEADER_MAP.size(), aeBack.getResponseHeaderNameList().size())
nova chamada: assertEquals(DummyResponse.DUMMY_DEFAULT_HDEADER_MAP.size(), aeBack.getResponseHeaderNameList().size(), "Era esperado valores iguais, mas " + result12 + " <DummyResponse.DUMMY_DEFAULT_HDEADER_MAP.size()> é diferente de " + result13 + " <aeBack.getResponseHeaderNameList().size()>")
chamada antiga: assertEquals(DummyResponse.DUMMY_DEFAULT_CONTENT_COUNT, aeBack.getContentLength())
nova chamada: assertEquals(DummyResponse.DUMMY_DEFAULT_CONTENT_COUNT, aeBack.getContentLength(), "Era esperado valores iguais, mas  DummyResponse.DUMMY_DEFAULT_CONTENT_COUNT é diferente de " + result14 + " <aeBack.getContentLength()>")
chamada antiga: assertEquals(DummyResponse.DUMMY_DEFAULT_STATUS, aeBack.getStatusCode())
nova chamada: assertEquals(DummyResponse.DUMMY_DEFAULT_STATUS, aeBack.getStatusCode(), "Era esperado valores iguais, mas  DummyResponse.DUMMY_DEFAULT_STATUS é diferente de " + result15 + " <aeBack.getStatusCode()>")
chamada antiga: assertEquals(DummyRequest.DUMMY_CONTENT_STRING, aeBack.getRequestContent())
nova chamada: assertEquals(DummyRequest.DUMMY_CONTENT_STRING, aeBack.getRequestContent(), "Era esperado valores iguais, mas  DummyRequest.DUMMY_CONTENT_STRING é diferente de " + result16 + " <aeBack.getRequestContent()>")
chamada antiga: assertEquals(DummyRequest.DUMMY_RESPONSE_CONTENT_STRING, aeBack.getResponseContent())
nova chamada: assertEquals(DummyRequest.DUMMY_RESPONSE_CONTENT_STRING, aeBack.getResponseContent(), "Era esperado valores iguais, mas  DummyRequest.DUMMY_RESPONSE_CONTENT_STRING é diferente de " + result17 + " <aeBack.getResponseContent()>")
chamada antiga: assertEquals(DummyRequest.DUMMY_DEFAULT_ATTR_MAP.get("testKey"), aeBack.getAttribute("testKey"))
nova chamada: assertEquals(DummyRequest.DUMMY_DEFAULT_ATTR_MAP.get("testKey"), aeBack.getAttribute("testKey"), "Era esperado valores iguais, mas " + result18 + " <DummyRequest.DUMMY_DEFAULT_ATTR_MAP.get('testKey')> é diferente de " + result19 + " <aeBack.getAttribute('testKey')>")
chamada antiga: assertEquals("ORIGINAL", event.getAttribute("testKey"))
nova chamada: assertEquals("ORIGINAL", event.getAttribute("testKey"), "Era esperado valores iguais, mas  'ORIGINAL' é diferente de " + result20 + " <event.getAttribute('testKey')>")
chamada antiga: assertEquals(val, ae.getAttribute(key))
nova chamada: assertEquals(val, ae.getAttribute(key), "Era esperado valores iguais, mas  val é diferente de " + result21 + " <ae.getAttribute(key)>")
chamada antiga: assertEquals(val, ae.getRequestHeader(key))
nova chamada: assertEquals(val, ae.getRequestHeader(key), "Era esperado valores iguais, mas  val é diferente de " + result22 + " <ae.getRequestHeader(key)>")
chamada antiga: assertEquals(val, ae.getRequestParameter(key)[0])
nova chamada: assertEquals(val, ae.getRequestParameter(key)[0], "Era esperado valores iguais, mas  val é diferente de " + " ae.getRequestParameter(key)[0]")
chamada antiga: assertEquals(val, ae.getAttribute(key))
nova chamada: assertEquals(val, ae.getAttribute(key), "Era esperado valores iguais, mas  val é diferente de " + result23 + " <ae.getAttribute(key)>")
chamada antiga: assertEquals(val, ae.getRequestHeader(key))
nova chamada: assertEquals(val, ae.getRequestHeader(key), "Era esperado valores iguais, mas  val é diferente de " + result24 + " <ae.getRequestHeader(key)>")
chamada antiga: assertEquals(val, ae.getRequestParameter(key)[0])
nova chamada: assertEquals(val, ae.getRequestParameter(key)[0], "Era esperado valores iguais, mas  val é diferente de " + " ae.getRequestParameter(key)[0]")
chamada antiga: assertEquals(0, statsByDay.getLastCount())
nova chamada: assertEquals(0, statsByDay.getLastCount(), "Era esperado valores iguais, mas  0 é diferente de " + result25 + " <statsByDay.getLastCount()>")
chamada antiga: assertEquals(0, statsByDay.getLastCount())
nova chamada: assertEquals(0, statsByDay.getLastCount(), "Era esperado valores iguais, mas  0 é diferente de " + result26 + " <statsByDay.getLastCount()>")
chamada antiga: assertEquals(1, statsByDay.getLastCount())
nova chamada: assertEquals(1, statsByDay.getLastCount(), "Era esperado valores iguais, mas  1 é diferente de " + result27 + " <statsByDay.getLastCount()>")
chamada antiga: assertEquals(2, statsByDay.getLastCount())
nova chamada: assertEquals(2, statsByDay.getLastCount(), "Era esperado valores iguais, mas  2 é diferente de " + result28 + " <statsByDay.getLastCount()>")
chamada antiga: assertEquals(2, statsByDay.getLastCount())
nova chamada: assertEquals(2, statsByDay.getLastCount(), "Era esperado valores iguais, mas  2 é diferente de " + result29 + " <statsByDay.getLastCount()>")
chamada antiga: assertEquals(4, statsByDay.getLastCount())
nova chamada: assertEquals(4, statsByDay.getLastCount(), "Era esperado valores iguais, mas  4 é diferente de " + result30 + " <statsByDay.getLastCount()>")
chamada antiga: assertEquals("hello world", result)
nova chamada: assertEquals("hello world", result, "Era esperado valores iguais, mas  'hello world' é diferente de " + " result")
chamada antiga: assertEquals("hello world", result)
nova chamada: assertEquals("hello world", result, "Era esperado valores iguais, mas  'hello world' é diferente de " + " result")
chamada antiga: assertEquals("127.0.0.1", event.getRemoteHost())
nova chamada: assertEquals("127.0.0.1", event.getRemoteHost(), "Era esperado valores iguais, mas  '127.0.0.1' é diferente de " + result31 + " <event.getRemoteHost()>")
chamada antiga: assertEquals("localhost", event.getServerName())
nova chamada: assertEquals("localhost", event.getServerName(), "Era esperado valores iguais, mas  'localhost' é diferente de " + result32 + " <event.getServerName()>")
chamada antiga: assertTrue(evaluator.evaluate(ae))
nova chamada: assertTrue(evaluator.evaluate(ae), "Era esperado verdadeiro, mas " + result33 + " <evaluator.evaluate(ae)> é falso")
chamada antiga: assertTrue(evaluator.evaluate(ae))
nova chamada: assertTrue(evaluator.evaluate(ae), "Era esperado verdadeiro, mas " + result34 + " <evaluator.evaluate(ae)> é falso")
chamada antiga: assertEquals(Long.toString(event.getServerAdapter().getContentLength()), result)
nova chamada: assertEquals(Long.toString(event.getServerAdapter().getContentLength()), result, "Era esperado valores iguais, mas " + result35 + " <Long.toString(event.getServerAdapter().getContentLength())> é diferente de " + " result")
chamada antiga: assertEquals(converter.cachingDateFormatter.format(event.getTimeStamp()), result)
nova chamada: assertEquals(converter.cachingDateFormatter.format(event.getTimeStamp()), result, "Era esperado valores iguais, mas " + result36 + " <converter.cachingDateFormatter.format(event.getTimeStamp())> é diferente de " + " result")
chamada antiga: assertEquals("21/Oct/2022:21:30:20 +1100", result)
nova chamada: assertEquals("21/Oct/2022:21:30:20 +1100", result, "Era esperado valores iguais, mas  '21/Oct/2022:21:30:20 +1100' é diferente de " + " result")
chamada antiga: assertEquals(converter.cachingDateFormatter.format(event.getTimeStamp()), result)
nova chamada: assertEquals(converter.cachingDateFormatter.format(event.getTimeStamp()), result, "Era esperado valores iguais, mas " + result37 + " <converter.cachingDateFormatter.format(event.getTimeStamp())> é diferente de " + " result")
chamada antiga: assertEquals(Integer.toString(request.getLocalPort()), result)
nova chamada: assertEquals(Integer.toString(request.getLocalPort()), result, "Era esperado valores iguais, mas " + result38 + " <Integer.toString(request.getLocalPort())> é diferente de " + " result")
chamada antiga: assertEquals(request.getRemoteHost(), result)
nova chamada: assertEquals(request.getRemoteHost(), result, "Era esperado valores iguais, mas " + result39 + " <request.getRemoteHost()> é diferente de " + " result")
chamada antiga: assertEquals(request.getRemoteAddr(), result)
nova chamada: assertEquals(request.getRemoteAddr(), result, "Era esperado valores iguais, mas " + result40 + " <request.getRemoteAddr()> é diferente de " + " result")
chamada antiga: assertEquals(request.getRemoteUser(), result)
nova chamada: assertEquals(request.getRemoteUser(), result, "Era esperado valores iguais, mas " + result41 + " <request.getRemoteUser()> é diferente de " + " result")
chamada antiga: assertEquals(request.getAttribute("testKey"), result)
nova chamada: assertEquals(request.getAttribute("testKey"), result, "Era esperado valores iguais, mas " + result42 + " <request.getAttribute('testKey')> é diferente de " + " result")
chamada antiga: assertEquals(cookie.getValue(), result)
nova chamada: assertEquals(cookie.getValue(), result, "Era esperado valores iguais, mas " + result43 + " <cookie.getValue()> é diferente de " + " result")
chamada antiga: assertEquals(request.getHeader("headerName1"), result)
nova chamada: assertEquals(request.getHeader("headerName1"), result, "Era esperado valores iguais, mas " + result44 + " <request.getHeader('headerName1')> é diferente de " + " result")
chamada antiga: assertEquals(request.getMethod(), result)
nova chamada: assertEquals(request.getMethod(), result, "Era esperado valores iguais, mas " + result45 + " <request.getMethod()> é diferente de " + " result")
chamada antiga: assertEquals(request.getProtocol(), result)
nova chamada: assertEquals(request.getProtocol(), result, "Era esperado valores iguais, mas " + result46 + " <request.getProtocol()> é diferente de " + " result")
chamada antiga: assertEquals(request.getRequestURI(), result)
nova chamada: assertEquals(request.getRequestURI(), result, "Era esperado valores iguais, mas " + result47 + " <request.getRequestURI()> é diferente de " + " result")
chamada antiga: assertEquals(expected, result)
nova chamada: assertEquals(expected, result, "Era esperado valores iguais, mas  expected é diferente de " + " result")
chamada antiga: assertEquals(request.getHeader("headerName1"), result)
nova chamada: assertEquals(request.getHeader("headerName1"), result, "Era esperado valores iguais, mas " + result48 + " <request.getHeader('headerName1')> é diferente de " + " result")
chamada antiga: assertEquals(request.getServerName(), result)
nova chamada: assertEquals(request.getServerName(), result, "Era esperado valores iguais, mas " + result49 + " <request.getServerName()> é diferente de " + " result")
chamada antiga: assertEquals(Integer.toString(event.getServerAdapter().getStatusCode()), result)
nova chamada: assertEquals(Integer.toString(event.getServerAdapter().getStatusCode()), result, "Era esperado valores iguais, mas " + result50 + " <Integer.toString(event.getServerAdapter().getStatusCode())> é diferente de " + " result")
chamada antiga: assertEquals(3, keySet.size())
nova chamada: assertEquals(3, keySet.size(), "Era esperado valores iguais, mas  3 é diferente de " + result51 + " <keySet.size()>")
chamada antiga: assertEquals(witnessSet, keySet)
nova chamada: assertEquals(witnessSet, keySet, "Era esperado valores iguais, mas  witnessSet é diferente de " + " keySet")
chamada antiga: assertEquals(expectedCount, listAppender.list.size())
nova chamada: assertEquals(expectedCount, listAppender.list.size(), "Era esperado valores iguais, mas  expectedCount é diferente de " + result52 + " <listAppender.list.size()>")
chamada antiga: assertFalse(evaluator.evaluate(ae))
nova chamada: assertFalse(evaluator.evaluate(ae), "Era esperado falso, mas " + result53 + " <evaluator.evaluate(ae)> é verdadeiro ")
chamada antiga: assertTrue(evaluator.evaluate(ae))
nova chamada: assertTrue(evaluator.evaluate(ae), "Era esperado verdadeiro, mas " + result54 + " <evaluator.evaluate(ae)> é falso")
chamada antiga: assertTrue(evaluator.evaluate(ae))
nova chamada: assertTrue(evaluator.evaluate(ae), "Era esperado verdadeiro, mas " + result55 + " <evaluator.evaluate(ae)> é falso")
chamada antiga: assertNotNull(valve.getScheduledExecutorService())
nova chamada: assertNotNull(valve.getScheduledExecutorService(), "Era esperado não nulo, mas " + result56 + " <valve.getScheduledExecutorService()> é nulo")
chamada antiga: assertEquals(Arrays.asList(new String[] { "a" }), TeeFilter.extractNameList("a"))
nova chamada: assertEquals(Arrays.asList(new String[] { "a" }), TeeFilter.extractNameList("a"), "Era esperado valores iguais, mas " + result57 + " <Arrays.asList(new String[] { 'a' })> é diferente de " + result58 + " <TeeFilter.extractNameList('a')>")
chamada antiga: assertEquals(Arrays.asList(new String[] { "a", "b" }), TeeFilter.extractNameList("a, b"))
nova chamada: assertEquals(Arrays.asList(new String[] { "a", "b" }), TeeFilter.extractNameList("a, b"), "Era esperado valores iguais, mas " + result59 + " <Arrays.asList(new String[] { 'a', 'b' })> é diferente de " + result60 + " <TeeFilter.extractNameList('a, b')>")
chamada antiga: assertEquals(Arrays.asList(new String[] { "a", "b" }), TeeFilter.extractNameList("a; b"))
nova chamada: assertEquals(Arrays.asList(new String[] { "a", "b" }), TeeFilter.extractNameList("a; b"), "Era esperado valores iguais, mas " + result61 + " <Arrays.asList(new String[] { 'a', 'b' })> é diferente de " + result62 + " <TeeFilter.extractNameList('a; b')>")
chamada antiga: assertEquals(Arrays.asList(new String[] { "a", "b", "c" }), TeeFilter.extractNameList("a; b, c"))
nova chamada: assertEquals(Arrays.asList(new String[] { "a", "b", "c" }), TeeFilter.extractNameList("a; b, c"), "Era esperado valores iguais, mas " + result63 + " <Arrays.asList(new String[] { 'a', 'b', 'c' })> é diferente de " + result64 + " <TeeFilter.extractNameList('a; b, c')>")
chamada antiga: assertTrue(TeeFilter.computeActivation("somehost", "", ""))
nova chamada: assertTrue(TeeFilter.computeActivation("somehost", "", ""), "Era esperado verdadeiro, mas " + result65 + " <TeeFilter.computeActivation('somehost', '', '')> é falso")
chamada antiga: assertTrue(TeeFilter.computeActivation("somehost", null, null))
nova chamada: assertTrue(TeeFilter.computeActivation("somehost", null, null), "Era esperado verdadeiro, mas " + result66 + " <TeeFilter.computeActivation('somehost', null, null)> é falso")
chamada antiga: assertTrue(TeeFilter.computeActivation("a", "a", null))
nova chamada: assertTrue(TeeFilter.computeActivation("a", "a", null), "Era esperado verdadeiro, mas " + result67 + " <TeeFilter.computeActivation('a', 'a', null)> é falso")
chamada antiga: assertTrue(TeeFilter.computeActivation("a", "a, b", null))
nova chamada: assertTrue(TeeFilter.computeActivation("a", "a, b", null), "Era esperado verdadeiro, mas " + result68 + " <TeeFilter.computeActivation('a', 'a, b', null)> é falso")
chamada antiga: assertFalse(TeeFilter.computeActivation("a", "b", null))
nova chamada: assertFalse(TeeFilter.computeActivation("a", "b", null), "Era esperado falso, mas " + result69 + " <TeeFilter.computeActivation('a', 'b', null)> é verdadeiro ")
chamada antiga: assertFalse(TeeFilter.computeActivation("a", "b, c", null))
nova chamada: assertFalse(TeeFilter.computeActivation("a", "b, c", null), "Era esperado falso, mas " + result70 + " <TeeFilter.computeActivation('a', 'b, c', null)> é verdadeiro ")
chamada antiga: assertFalse(TeeFilter.computeActivation("a", null, "a"))
nova chamada: assertFalse(TeeFilter.computeActivation("a", null, "a"), "Era esperado falso, mas " + result71 + " <TeeFilter.computeActivation('a', null, 'a')> é verdadeiro ")
chamada antiga: assertFalse(TeeFilter.computeActivation("a", null, "a, b"))
nova chamada: assertFalse(TeeFilter.computeActivation("a", null, "a, b"), "Era esperado falso, mas " + result72 + " <TeeFilter.computeActivation('a', null, 'a, b')> é verdadeiro ")
chamada antiga: assertTrue(TeeFilter.computeActivation("a", null, "b"))
nova chamada: assertTrue(TeeFilter.computeActivation("a", null, "b"), "Era esperado verdadeiro, mas " + result73 + " <TeeFilter.computeActivation('a', null, 'b')> é falso")
chamada antiga: assertTrue(TeeFilter.computeActivation("a", null, "b, c"))
nova chamada: assertTrue(TeeFilter.computeActivation("a", null, "b, c"), "Era esperado verdadeiro, mas " + result74 + " <TeeFilter.computeActivation('a', null, 'b, c')> é falso")
chamada antiga: assertFalse(TeeFilter.computeActivation("a", "a", "a"))
nova chamada: assertFalse(TeeFilter.computeActivation("a", "a", "a"), "Era esperado falso, mas " + result75 + " <TeeFilter.computeActivation('a', 'a', 'a')> é verdadeiro ")
chamada antiga: assertTrue(TeeFilter.computeActivation("a", "a", "b"))
nova chamada: assertTrue(TeeFilter.computeActivation("a", "a", "b"), "Era esperado verdadeiro, mas " + result76 + " <TeeFilter.computeActivation('a', 'a', 'b')> é falso")
chamada antiga: assertFalse(TeeFilter.computeActivation("a", "b", "a"))
nova chamada: assertFalse(TeeFilter.computeActivation("a", "b", "a"), "Era esperado falso, mas " + result77 + " <TeeFilter.computeActivation('a', 'b', 'a')> é verdadeiro ")
chamada antiga: assertFalse(TeeFilter.computeActivation("a", "b", "b"))
nova chamada: assertFalse(TeeFilter.computeActivation("a", "b", "b"), "Era esperado falso, mas " + result78 + " <TeeFilter.computeActivation('a', 'b', 'b')> é verdadeiro ")
chamada antiga: assertArrayEquals(expectedBytes, byteArrayOutputStream.toByteArray())
nova chamada: assertArrayEquals(expectedBytes, byteArrayOutputStream.toByteArray(), "Era esperado arrays iguais, mas  expectedBytes é diferente de " + result79 + " <byteArrayOutputStream.toByteArray()>")

chamada antiga: fail()
nova chamada: fail("A execução falhou por uma causa deliberada")
chamada antiga: Assertions.assertNotNull(condition)
nova chamada: assertNotNull(condition, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: Assertions.assertTrue(condition.evaluate())
nova chamada: assertTrue(condition.evaluate(), "Era esperado verdadeiro, mas " + result80 + " <condition.evaluate()> é falso")
chamada antiga: Assertions.assertNotNull(condition)
nova chamada: assertNotNull(condition, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: Assertions.assertTrue(checker.isErrorFree(0))
nova chamada: assertTrue(checker.isErrorFree(0), "Era esperado verdadeiro, mas " + result81 + " <checker.isErrorFree(0)> é falso")
chamada antiga: Assertions.assertTrue(checker.isErrorFree(0))
nova chamada: assertTrue(checker.isErrorFree(0), "Era esperado verdadeiro, mas " + result82 + " <checker.isErrorFree(0)> é falso")
chamada antiga: Assertions.assertNull(System.getProperty(sysKey))
nova chamada: assertNull(System.getProperty(sysKey), "Era esperado nulo, mas " + result83 + " <System.getProperty(sysKey)> não é nulo")
chamada antiga: Assertions.assertNull(context.getProperty(dynaKey))
nova chamada: assertNull(context.getProperty(dynaKey), "Era esperado nulo, mas " + result84 + " <context.getProperty(dynaKey)> não é nulo")
chamada antiga: Assertions.assertNotNull(context.getProperty(dynaKey))
nova chamada: assertNotNull(context.getProperty(dynaKey), "Era esperado não nulo, mas " + result85 + " <context.getProperty(dynaKey)> é nulo")
chamada antiga: Assertions.assertNull(context.getProperty(dynaKey))
nova chamada: assertNull(context.getProperty(dynaKey), "Era esperado nulo, mas " + result86 + " <context.getProperty(dynaKey)> não é nulo")
chamada antiga: Assertions.assertNull(context.getProperty(dynaKey))
nova chamada: assertNull(context.getProperty(dynaKey), "Era esperado nulo, mas " + result87 + " <context.getProperty(dynaKey)> não é nulo")
chamada antiga: assertNotNull(fileAppender)
nova chamada: assertNotNull(fileAppender, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(consoleAppender)
nova chamada: assertNotNull(consoleAppender, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(checker.isErrorFree(0))
nova chamada: assertTrue(checker.isErrorFree(0), "Era esperado verdadeiro, mas " + result88 + " <checker.isErrorFree(0)> é falso")
chamada antiga: assertNotNull(fileAppender)
nova chamada: assertNotNull(fileAppender, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(consoleAppender)
nova chamada: assertNull(consoleAppender, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertTrue(checker.isErrorFree(0))
nova chamada: assertTrue(checker.isErrorFree(0), "Era esperado verdadeiro, mas " + result89 + " <checker.isErrorFree(0)> é falso")
chamada antiga: assertNotNull(fileAppender)
nova chamada: assertNotNull(fileAppender, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(consoleAppender)
nova chamada: assertNull(consoleAppender, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotNull(listAppender)
nova chamada: assertNotNull(listAppender, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(checker.isErrorFree(0))
nova chamada: assertTrue(checker.isErrorFree(0), "Era esperado verdadeiro, mas " + result90 + " <checker.isErrorFree(0)> é falso")
chamada antiga: assertNotNull(consoleAppender)
nova chamada: assertNotNull(consoleAppender, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(checker.isErrorFree(0))
nova chamada: assertTrue(checker.isErrorFree(0), "Era esperado verdadeiro, mas " + result91 + " <checker.isErrorFree(0)> é falso")
chamada antiga: assertNull(consoleAppender)
nova chamada: assertNull(consoleAppender, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertTrue(checker.isErrorFree(0))
nova chamada: assertTrue(checker.isErrorFree(0), "Era esperado verdadeiro, mas " + result92 + " <checker.isErrorFree(0)> é falso")
chamada antiga: Assertions.assertEquals(witness, aStack)
nova chamada: assertEquals(witness, aStack, "Era esperado valores iguais, mas  witness é diferente de " + " aStack")
chamada antiga: assertNotNull(slAppender)
nova chamada: assertNotNull(slAppender, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(2, slAppender.strList.size())
nova chamada: assertEquals(2, slAppender.strList.size(), "Era esperado valores iguais, mas  2 é diferente de " + result93 + " <slAppender.strList.size()>")
chamada antiga: assertTrue(slAppender.strList.get(0).contains(" DEBUG - toto"))
nova chamada: assertTrue(slAppender.strList.get(0).contains(" DEBUG - toto"), "Era esperado verdadeiro, mas " + result94 + " <slAppender.strList.get(0).contains(' DEBUG - toto')> é falso")
chamada antiga: assertTrue(str1.contains("Caller+0"))
nova chamada: assertTrue(str1.contains("Caller+0"), "Era esperado verdadeiro, mas " + result95 + " <str1.contains('Caller+0')> é falso")
chamada antiga: assertTrue(str1.contains(" DEBUG - hello world"))
nova chamada: assertTrue(str1.contains(" DEBUG - hello world"), "Era esperado verdadeiro, mas " + result96 + " <str1.contains(' DEBUG - hello world')> é falso")
chamada antiga: assertNotNull(listAppender)
nova chamada: assertNotNull(listAppender, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(1, listAppender.list.size())
nova chamada: assertEquals(1, listAppender.list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result97 + " <listAppender.list.size()>")
chamada antiga: assertEquals(Level.WARN, back.getLevel())
nova chamada: assertEquals(Level.WARN, back.getLevel(), "Era esperado valores iguais, mas  Level.WARN é diferente de " + result98 + " <back.getLevel()>")
chamada antiga: assertEquals("hello", back.getMessage())
nova chamada: assertEquals("hello", back.getMessage(), "Era esperado valores iguais, mas  'hello' é diferente de " + result99 + " <back.getMessage()>")
chamada antiga: assertNotNull(listAppender)
nova chamada: assertNotNull(listAppender, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(1, listAppender.list.size())
nova chamada: assertEquals(1, listAppender.list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result100 + " <listAppender.list.size()>")
chamada antiga: assertEquals(Level.WARN, back.getLevel())
nova chamada: assertEquals(Level.WARN, back.getLevel(), "Era esperado valores iguais, mas  Level.WARN é diferente de " + result101 + " <back.getLevel()>")
chamada antiga: assertEquals("hello", back.getMessage())
nova chamada: assertEquals("hello", back.getMessage(), "Era esperado valores iguais, mas  'hello' é diferente de " + result102 + " <back.getMessage()>")
chamada antiga: assertNotNull(listThen)
nova chamada: assertNotNull(listThen, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(listElse)
nova chamada: assertNull(listElse, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(listThen)
nova chamada: assertNull(listThen, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotNull(listElse)
nova chamada: assertNotNull(listElse, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: Assertions.assertFalse(condition.evaluate())
nova chamada: assertFalse(condition.evaluate(), "Era esperado falso, mas " + result103 + " <condition.evaluate()> é verdadeiro ")
chamada antiga: fail("A execução falhou por uma causa deliberada")
nova chamada: fail("A execução falhou por uma causa deliberada", "A execução falhou por uma causa deliberada")
chamada antiga: assertTrue(jee.evaluate(event))
nova chamada: assertTrue(jee.evaluate(event), "Era esperado verdadeiro, mas " + result104 + " <jee.evaluate(event)> é falso")
chamada antiga: assertTrue(jee.evaluate(event))
nova chamada: assertTrue(jee.evaluate(event), "Era esperado verdadeiro, mas " + result105 + " <jee.evaluate(event)> é falso")
chamada antiga: assertTrue(jee.evaluate(event))
nova chamada: assertTrue(jee.evaluate(event), "Era esperado verdadeiro, mas " + result106 + " <jee.evaluate(event)> é falso")
chamada antiga: assertTrue(jee.evaluate(event))
nova chamada: assertTrue(jee.evaluate(event), "Era esperado verdadeiro, mas " + result107 + " <jee.evaluate(event)> é falso")
chamada antiga: assertTrue(jee.evaluate(event))
nova chamada: assertTrue(jee.evaluate(event), "Era esperado verdadeiro, mas " + result108 + " <jee.evaluate(event)> é falso")
chamada antiga: assertTrue(jee.evaluate(event))
nova chamada: assertTrue(jee.evaluate(event), "Era esperado verdadeiro, mas " + result109 + " <jee.evaluate(event)> é falso")
chamada antiga: assertEquals(FilterReply.NEUTRAL, ef.decide(event))
nova chamada: assertEquals(FilterReply.NEUTRAL, ef.decide(event), "Era esperado valores iguais, mas  FilterReply.NEUTRAL é diferente de " + result110 + " <ef.decide(event)>")
chamada antiga: assertTrue(jee.evaluate(event))
nova chamada: assertTrue(jee.evaluate(event), "Era esperado verdadeiro, mas " + result111 + " <jee.evaluate(event)> é falso")
chamada antiga: assertFalse(jee.isStarted())
nova chamada: assertFalse(jee.isStarted(), "Era esperado falso, mas " + result112 + " <jee.isStarted()> é verdadeiro ")
chamada antiga: assertTrue(jee.isStarted())
nova chamada: assertTrue(jee.isStarted(), "Era esperado verdadeiro, mas " + result113 + " <jee.isStarted()> é falso")
chamada antiga: assertFalse(jee.isStarted())
nova chamada: assertFalse(jee.isStarted(), "Era esperado falso, mas " + result114 + " <jee.isStarted()> é verdadeiro ")
chamada antiga: assertTrue(jee.evaluate(event))
nova chamada: assertTrue(jee.evaluate(event), "Era esperado verdadeiro, mas " + result115 + " <jee.evaluate(event)> é falso")
chamada antiga: assertTrue(jee.evaluate(event))
nova chamada: assertTrue(jee.evaluate(event), "Era esperado verdadeiro, mas " + result116 + " <jee.evaluate(event)> é falso")
chamada antiga: assertTrue(jee.evaluate(event))
nova chamada: assertTrue(jee.evaluate(event), "Era esperado verdadeiro, mas " + result117 + " <jee.evaluate(event)> é falso")
chamada antiga: assertNotNull(mma)
nova chamada: assertNotNull(mma, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(expectedEmailCount, mma.length)
nova chamada: assertEquals(expectedEmailCount, mma.length, "Era esperado valores iguais, mas  expectedEmailCount é diferente de " + " mma.length")
chamada antiga: assertEquals(subject, mm.getSubject())
nova chamada: assertEquals(subject, mm.getSubject(), "Era esperado valores iguais, mas  subject é diferente de " + result118 + " <mm.getSubject()>")
chamada antiga: assertTrue(body.startsWith(HEADER.trim()))
nova chamada: assertTrue(body.startsWith(HEADER.trim()), "Era esperado verdadeiro, mas " + result119 + " <body.startsWith(HEADER.trim())> é falso")
chamada antiga: assertTrue(body.endsWith(FOOTER.trim()))
nova chamada: assertTrue(body.endsWith(FOOTER.trim()), "Era esperado verdadeiro, mas " + result120 + " <body.endsWith(FOOTER.trim())> é falso")
chamada antiga: assertTrue(body.startsWith(HEADER.trim()))
nova chamada: assertTrue(body.startsWith(HEADER.trim()), "Era esperado verdadeiro, mas " + result121 + " <body.startsWith(HEADER.trim())> é falso")
chamada antiga: assertTrue(body.endsWith(FOOTER.trim()))
nova chamada: assertTrue(body.endsWith(FOOTER.trim()), "Era esperado verdadeiro, mas " + result122 + " <body.endsWith(FOOTER.trim())> é falso")
chamada antiga: assertTrue(body.startsWith(HEADER.trim()))
nova chamada: assertTrue(body.startsWith(HEADER.trim()), "Era esperado verdadeiro, mas " + result123 + " <body.startsWith(HEADER.trim())> é falso")
chamada antiga: assertTrue(body.contains("key=val"))
nova chamada: assertTrue(body.contains("key=val"), "Era esperado verdadeiro, mas " + result124 + " <body.contains('key=val')> é falso")
chamada antiga: assertTrue(body.endsWith(FOOTER.trim()))
nova chamada: assertTrue(body.endsWith(FOOTER.trim()), "Era esperado verdadeiro, mas " + result125 + " <body.endsWith(FOOTER.trim())> é falso")
chamada antiga: assertEquals("testCustomEvaluator", body)
nova chamada: assertEquals("testCustomEvaluator", body, "Era esperado valores iguais, mas  'testCustomEvaluator' é diferente de " + " body")
chamada antiga: assertEquals(msg, body)
nova chamada: assertEquals(msg, body, "Era esperado valores iguais, mas  msg é diferente de " + " body")
chamada antiga: assertNotNull(mma)
nova chamada: assertNotNull(mma, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(expectedEmailCount, mma.length)
nova chamada: assertEquals(expectedEmailCount, mma.length, "Era esperado valores iguais, mas  expectedEmailCount é diferente de " + " mma.length")
chamada antiga: assertNotNull(mma)
nova chamada: assertNotNull(mma, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(expectedEmailCount, mma.length)
nova chamada: assertEquals(expectedEmailCount, mma.length, "Era esperado valores iguais, mas  expectedEmailCount é diferente de " + " mma.length")
chamada antiga: assertFalse(body1.contains(msg0))
nova chamada: assertFalse(body1.contains(msg0), "Era esperado falso, mas " + result126 + " <body1.contains(msg0)> é verdadeiro ")
chamada antiga: assertEquals(1, mma.length)
nova chamada: assertEquals(1, mma.length, "Era esperado valores iguais, mas  1 é diferente de " + " mma.length")
chamada antiga: assertEquals(line1, mma[0].getSubject())
nova chamada: assertEquals(line1, mma[0].getSubject(), "Era esperado valores iguais, mas  line1 é diferente de " + result127 + " <mma[0].getSubject()>")
chamada antiga: assertNotNull(mma)
nova chamada: assertNotNull(mma, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: Assertions.assertEquals(Status.INFO, statusChecker.getHighestLevel(0))
nova chamada: assertEquals(Status.INFO, statusChecker.getHighestLevel(0), "Era esperado valores iguais, mas  Status.INFO é diferente de " + result128 + " <statusChecker.getHighestLevel(0)>")
chamada antiga: Assertions.assertEquals(Status.WARN, statusChecker.getHighestLevel(0))
nova chamada: assertEquals(Status.WARN, statusChecker.getHighestLevel(0), "Era esperado valores iguais, mas  Status.WARN é diferente de " + result129 + " <statusChecker.getHighestLevel(0)>")
chamada antiga: Assertions.assertEquals(Status.ERROR, statusChecker.getHighestLevel(0))
nova chamada: assertEquals(Status.ERROR, statusChecker.getHighestLevel(0), "Era esperado valores iguais, mas  Status.ERROR é diferente de " + result130 + " <statusChecker.getHighestLevel(0)>")
chamada antiga: Assertions.assertEquals(Status.ERROR, statusChecker.getHighestLevel(0))
nova chamada: assertEquals(Status.ERROR, statusChecker.getHighestLevel(0), "Era esperado valores iguais, mas  Status.ERROR é diferente de " + result131 + " <statusChecker.getHighestLevel(0)>")
chamada antiga: Assertions.assertEquals(Status.WARN, statusChecker.getHighestLevel(0))
nova chamada: assertEquals(Status.WARN, statusChecker.getHighestLevel(0), "Era esperado valores iguais, mas  Status.WARN é diferente de " + result132 + " <statusChecker.getHighestLevel(0)>")
chamada antiga: Assertions.assertEquals(expected, aStack)
nova chamada: assertEquals(expected, aStack, "Era esperado valores iguais, mas  expected é diferente de " + " aStack")
chamada antiga: Assertions.assertEquals(witness, aStack)
nova chamada: assertEquals(witness, aStack, "Era esperado valores iguais, mas  witness é diferente de " + " aStack")
chamada antiga: assertEquals("monster", inContextFoo)
nova chamada: assertEquals("monster", inContextFoo, "Era esperado valores iguais, mas  'monster' é diferente de " + " inContextFoo")
chamada antiga: assertNull(inContextFoo)
nova chamada: assertNull(inContextFoo, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(inContextFoo)
nova chamada: assertNull(inContextFoo, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(inContextFoo)
nova chamada: assertNull(inContextFoo, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotNull(context.getProperty("CANONICAL_HOST_NAME"))
nova chamada: assertNotNull(context.getProperty("CANONICAL_HOST_NAME"), "Era esperado não nulo, mas " + result133 + " <context.getProperty('CANONICAL_HOST_NAME')> é nulo")
chamada antiga: fail("A execução falhou por uma causa deliberada", "A execução falhou por uma causa deliberada")
nova chamada: fail("A execução falhou por uma causa deliberada", "A execução falhou por uma causa deliberada", "A execução falhou por uma causa deliberada")
chamada antiga: Assertions.assertTrue(statusChecker.containsException(SAXParseException.class))
nova chamada: assertTrue(statusChecker.containsException(SAXParseException.class), "Era esperado verdadeiro, mas " + result134 + " <statusChecker.containsException(SAXParseException.class)> é falso")
chamada antiga: Assertions.assertTrue(f.exists())
nova chamada: assertTrue(f.exists(), "Era esperado verdadeiro, mas " + result135 + " <f.exists()> é falso")
chamada antiga: Assertions.assertTrue(f.delete())
nova chamada: assertTrue(f.delete(), "Era esperado verdadeiro, mas " + result136 + " <f.delete()> é falso")
chamada antiga: Assertions.assertTrue(statusChecker.containsException(MalformedURLException.class))
nova chamada: assertTrue(statusChecker.containsException(MalformedURLException.class), "Era esperado verdadeiro, mas " + result137 + " <statusChecker.containsException(MalformedURLException.class)> é falso")
chamada antiga: Assertions.assertEquals("work", mic.getProperty("v1"))
nova chamada: assertEquals("work", mic.getProperty("v1"), "Era esperado valores iguais, mas  'work' é diferente de " + result138 + " <mic.getProperty('v1')>")
chamada antiga: Assertions.assertEquals("work", mic.getProperty("v1"))
nova chamada: assertEquals("work", mic.getProperty("v1"), "Era esperado valores iguais, mas  'work' é diferente de " + result139 + " <mic.getProperty('v1')>")
chamada antiga: Assertions.assertEquals(2, context.getStatusManager().getCount())
nova chamada: assertEquals(2, context.getStatusManager().getCount(), "Era esperado valores iguais, mas  2 é diferente de " + result140 + " <context.getStatusManager().getCount()>")
chamada antiga: Assertions.assertTrue(checkError())
nova chamada: assertTrue(checkError(), "Era esperado verdadeiro, mas " + result141 + " <checkError()> é falso")
chamada antiga: Assertions.assertEquals(2, context.getStatusManager().getCount())
nova chamada: assertEquals(2, context.getStatusManager().getCount(), "Era esperado valores iguais, mas  2 é diferente de " + result142 + " <context.getStatusManager().getCount()>")
chamada antiga: Assertions.assertTrue(checkError())
nova chamada: assertTrue(checkError(), "Era esperado verdadeiro, mas " + result143 + " <checkError()> é falso")
chamada antiga: Assertions.assertEquals(2, context.getStatusManager().getCount())
nova chamada: assertEquals(2, context.getStatusManager().getCount(), "Era esperado valores iguais, mas  2 é diferente de " + result144 + " <context.getStatusManager().getCount()>")
chamada antiga: Assertions.assertTrue(checkError())
nova chamada: assertTrue(checkError(), "Era esperado verdadeiro, mas " + result145 + " <checkError()> é falso")
chamada antiga: Assertions.assertEquals(2, context.getStatusManager().getCount())
nova chamada: assertEquals(2, context.getStatusManager().getCount(), "Era esperado valores iguais, mas  2 é diferente de " + result146 + " <context.getStatusManager().getCount()>")
chamada antiga: Assertions.assertTrue(checkError())
nova chamada: assertTrue(checkError(), "Era esperado verdadeiro, mas " + result147 + " <checkError()> é falso")
chamada antiga: Assertions.assertEquals("tata", mic.getProperty("v1"))
nova chamada: assertEquals("tata", mic.getProperty("v1"), "Era esperado valores iguais, mas  'tata' é diferente de " + result148 + " <mic.getProperty('v1')>")
chamada antiga: Assertions.assertEquals("toto", mic.getProperty("v2"))
nova chamada: assertEquals("toto", mic.getProperty("v2"), "Era esperado valores iguais, mas  'toto' é diferente de " + result149 + " <mic.getProperty('v2')>")
chamada antiga: Assertions.assertEquals("tata", mic.getProperty("v1"))
nova chamada: assertEquals("tata", mic.getProperty("v1"), "Era esperado valores iguais, mas  'tata' é diferente de " + result150 + " <mic.getProperty('v1')>")
chamada antiga: Assertions.assertEquals("toto", mic.getProperty("v2"))
nova chamada: assertEquals("toto", mic.getProperty("v2"), "Era esperado valores iguais, mas  'toto' é diferente de " + result151 + " <mic.getProperty('v2')>")
chamada antiga: Assertions.assertEquals("tata", mic.getProperty("r1"))
nova chamada: assertEquals("tata", mic.getProperty("r1"), "Era esperado valores iguais, mas  'tata' é diferente de " + result152 + " <mic.getProperty('r1')>")
chamada antiga: Assertions.assertEquals("toto", mic.getProperty("r2"))
nova chamada: assertEquals("toto", mic.getProperty("r2"), "Era esperado valores iguais, mas  'toto' é diferente de " + result153 + " <mic.getProperty('r2')>")
chamada antiga: Assertions.assertEquals("tata", mic.getProperty("r1"))
nova chamada: assertEquals("tata", mic.getProperty("r1"), "Era esperado valores iguais, mas  'tata' é diferente de " + result154 + " <mic.getProperty('r1')>")
chamada antiga: Assertions.assertEquals("toto", mic.getProperty("r2"))
nova chamada: assertEquals("toto", mic.getProperty("r2"), "Era esperado valores iguais, mas  'toto' é diferente de " + result155 + " <mic.getProperty('r2')>")
chamada antiga: Assertions.assertEquals(2, context.getStatusManager().getCount())
nova chamada: assertEquals(2, context.getStatusManager().getCount(), "Era esperado valores iguais, mas  2 é diferente de " + result156 + " <context.getStatusManager().getCount()>")
chamada antiga: Assertions.assertTrue(checkFileErrors())
nova chamada: assertTrue(checkFileErrors(), "Era esperado verdadeiro, mas " + result157 + " <checkFileErrors()> é falso")
chamada antiga: Assertions.assertEquals(witness, result)
nova chamada: assertEquals(witness, result, "Era esperado valores iguais, mas  witness é diferente de " + " result")
chamada antiga: Assertions.assertEquals(16, result.size())
nova chamada: assertEquals(16, result.size(), "Era esperado valores iguais, mas  16 é diferente de " + result158 + " <result.size()>")
chamada antiga: Assertions.assertEquals(16, witness.size())
nova chamada: assertEquals(16, witness.size(), "Era esperado valores iguais, mas  16 é diferente de " + result159 + " <witness.size()>")
chamada antiga: assertEquals("[a][b] already has an associated action supplier", e.getMessage())
nova chamada: assertEquals("[a][b] already has an associated action supplier", e.getMessage(), "Era esperado valores iguais, mas  '[a][b] already has an associated action supplier' é diferente de " + result160 + " <e.getMessage()>")
chamada antiga: assertEquals(1, p.size())
nova chamada: assertEquals(1, p.size(), "Era esperado valores iguais, mas  1 é diferente de " + result161 + " <p.size()>")
chamada antiga: assertEquals("a", p.peekLast())
nova chamada: assertEquals("a", p.peekLast(), "Era esperado valores iguais, mas  'a' é diferente de " + result162 + " <p.peekLast()>")
chamada antiga: assertEquals("a", p.get(0))
nova chamada: assertEquals("a", p.get(0), "Era esperado valores iguais, mas  'a' é diferente de " + result163 + " <p.get(0)>")
chamada antiga: assertEquals(1, p.size())
nova chamada: assertEquals(1, p.size(), "Era esperado valores iguais, mas  1 é diferente de " + result164 + " <p.size()>")
chamada antiga: assertEquals("a", p.peekLast())
nova chamada: assertEquals("a", p.peekLast(), "Era esperado valores iguais, mas  'a' é diferente de " + result165 + " <p.peekLast()>")
chamada antiga: assertEquals("a", p.get(0))
nova chamada: assertEquals("a", p.get(0), "Era esperado valores iguais, mas  'a' é diferente de " + result166 + " <p.get(0)>")
chamada antiga: assertEquals(2, p.size())
nova chamada: assertEquals(2, p.size(), "Era esperado valores iguais, mas  2 é diferente de " + result167 + " <p.size()>")
chamada antiga: assertEquals("b", p.peekLast())
nova chamada: assertEquals("b", p.peekLast(), "Era esperado valores iguais, mas  'b' é diferente de " + result168 + " <p.peekLast()>")
chamada antiga: assertEquals("a", p.get(0))
nova chamada: assertEquals("a", p.get(0), "Era esperado valores iguais, mas  'a' é diferente de " + result169 + " <p.get(0)>")
chamada antiga: assertEquals("b", p.get(1))
nova chamada: assertEquals("b", p.get(1), "Era esperado valores iguais, mas  'b' é diferente de " + result170 + " <p.get(1)>")
chamada antiga: assertEquals(3, p.size())
nova chamada: assertEquals(3, p.size(), "Era esperado valores iguais, mas  3 é diferente de " + result171 + " <p.size()>")
chamada antiga: assertEquals("a123", p.get(0))
nova chamada: assertEquals("a123", p.get(0), "Era esperado valores iguais, mas  'a123' é diferente de " + result172 + " <p.get(0)>")
chamada antiga: assertEquals("b1234", p.get(1))
nova chamada: assertEquals("b1234", p.get(1), "Era esperado valores iguais, mas  'b1234' é diferente de " + result173 + " <p.get(1)>")
chamada antiga: assertEquals("cvvsdf", p.get(2))
nova chamada: assertEquals("cvvsdf", p.get(2), "Era esperado valores iguais, mas  'cvvsdf' é diferente de " + result174 + " <p.get(2)>")
chamada antiga: assertEquals(3, p.size())
nova chamada: assertEquals(3, p.size(), "Era esperado valores iguais, mas  3 é diferente de " + result175 + " <p.size()>")
chamada antiga: assertEquals("a123", p.get(0))
nova chamada: assertEquals("a123", p.get(0), "Era esperado valores iguais, mas  'a123' é diferente de " + result176 + " <p.get(0)>")
chamada antiga: assertEquals("b1234", p.get(1))
nova chamada: assertEquals("b1234", p.get(1), "Era esperado valores iguais, mas  'b1234' é diferente de " + result177 + " <p.get(1)>")
chamada antiga: assertEquals("cvvsdf", p.get(2))
nova chamada: assertEquals("cvvsdf", p.get(2), "Era esperado valores iguais, mas  'cvvsdf' é diferente de " + result178 + " <p.get(2)>")
chamada antiga: assertEquals(1, p.size())
nova chamada: assertEquals(1, p.size(), "Era esperado valores iguais, mas  1 é diferente de " + result179 + " <p.size()>")
chamada antiga: assertEquals("a", p.get(0))
nova chamada: assertEquals("a", p.get(0), "Era esperado valores iguais, mas  'a' é diferente de " + result180 + " <p.get(0)>")
chamada antiga: assertEquals(2, p.size())
nova chamada: assertEquals(2, p.size(), "Era esperado valores iguais, mas  2 é diferente de " + result181 + " <p.size()>")
chamada antiga: assertEquals("a", p.get(0))
nova chamada: assertEquals("a", p.get(0), "Era esperado valores iguais, mas  'a' é diferente de " + result182 + " <p.get(0)>")
chamada antiga: assertEquals("b", p.get(1))
nova chamada: assertEquals("b", p.get(1), "Era esperado valores iguais, mas  'b' é diferente de " + result183 + " <p.get(1)>")
chamada antiga: assertTrue(NoAutoStartUtil.notMarkedWithNoAutoStart(o))
nova chamada: assertTrue(NoAutoStartUtil.notMarkedWithNoAutoStart(o), "Era esperado verdadeiro, mas " + result184 + " <NoAutoStartUtil.notMarkedWithNoAutoStart(o)> é falso")
chamada antiga: assertFalse(NoAutoStartUtil.notMarkedWithNoAutoStart(o))
nova chamada: assertFalse(NoAutoStartUtil.notMarkedWithNoAutoStart(o), "Era esperado falso, mas " + result185 + " <NoAutoStartUtil.notMarkedWithNoAutoStart(o)> é verdadeiro ")
chamada antiga: assertEquals(Window.class, result)
nova chamada: assertEquals(Window.class, result, "Era esperado valores iguais, mas  Window.class é diferente de " + " result")
chamada antiga: assertNull(result)
nova chamada: assertNull(result, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(file.getName(), back.getName())
nova chamada: assertEquals(file.getName(), back.getName(), "Era esperado valores iguais, mas " + result186 + " <file.getName()> é diferente de " + result187 + " <back.getName()>")
chamada antiga: Assertions.assertTrue(statusChecker.getHighestLevel(0) == Status.INFO)
nova chamada: assertTrue(statusChecker.getHighestLevel(0) == Status.INFO, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertEquals(11, seList.size())
nova chamada: assertEquals(11, seList.size(), "Era esperado valores iguais, mas  11 é diferente de " + result188 + " <seList.size()>")
chamada antiga: Assertions.assertEquals("test", seList.get(0).getName())
nova chamada: assertEquals("test", seList.get(0).getName(), "Era esperado valores iguais, mas  'test' é diferente de " + result189 + " <seList.get(0).getName()>")
chamada antiga: Assertions.assertEquals("badBegin", seList.get(1).getName())
nova chamada: assertEquals("badBegin", seList.get(1).getName(), "Era esperado valores iguais, mas  'badBegin' é diferente de " + result190 + " <seList.get(1).getName()>")
chamada antiga: Assertions.assertEquals("John Doe", startEvent.getAttributeByName("name").getValue())
nova chamada: assertEquals("John Doe", startEvent.getAttributeByName("name").getValue(), "Era esperado valores iguais, mas  'John Doe' é diferente de " + result191 + " <startEvent.getAttributeByName('name').getValue()>")
chamada antiga: Assertions.assertEquals("XXX&", ((BodyEvent) seList.get(8)).getText())
nova chamada: assertEquals("XXX&", ((BodyEvent) seList.get(8)).getText(), "Era esperado valores iguais, mas  'XXX&' é diferente de " + result192 + " <((BodyEvent) seList.get(8)).getText()>")
chamada antiga: Assertions.assertTrue(statusChecker.getHighestLevel(0) == Status.INFO)
nova chamada: assertTrue(statusChecker.getHighestLevel(0) == Status.INFO, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertEquals(3, seList.size())
nova chamada: assertEquals(3, seList.size(), "Era esperado valores iguais, mas  3 é diferente de " + result193 + " <seList.size()>")
chamada antiga: Assertions.assertEquals("xxx & yyy", be.getText())
nova chamada: assertEquals("xxx & yyy", be.getText(), "Era esperado valores iguais, mas  'xxx & yyy' é diferente de " + result194 + " <be.getText()>")
chamada antiga: Assertions.assertTrue(statusChecker.getHighestLevel(0) == Status.INFO)
nova chamada: assertTrue(statusChecker.getHighestLevel(0) == Status.INFO, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertEquals(4, seList.size())
nova chamada: assertEquals(4, seList.size(), "Era esperado valores iguais, mas  4 é diferente de " + result195 + " <seList.size()>")
chamada antiga: Assertions.assertEquals("1", attr.getValue())
nova chamada: assertEquals("1", attr.getValue(), "Era esperado valores iguais, mas  '1' é diferente de " + result196 + " <attr.getValue()>")
chamada antiga: Assertions.assertEquals(3, seList.size())
nova chamada: assertEquals(3, seList.size(), "Era esperado valores iguais, mas  3 é diferente de " + result197 + " <seList.size()>")
chamada antiga: Assertions.assertEquals("[x][x] \"xyz\"%n", be.getText())
nova chamada: assertEquals("[x][x] \"xyz\"%n", be.getText(), "Era esperado valores iguais, mas  '[x][x] \'xyz\'%n' é diferente de " + result198 + " <be.getText()>")
chamada antiga: Assertions.assertTrue(statusChecker.getHighestLevel(0) == Status.INFO)
nova chamada: assertTrue(statusChecker.getHighestLevel(0) == Status.INFO, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertEquals(11, seList.size())
nova chamada: assertEquals(11, seList.size(), "Era esperado valores iguais, mas  11 é diferente de " + result199 + " <seList.size()>")
chamada antiga: Assertions.assertTrue(statusChecker.getHighestLevel(0) == Status.INFO)
nova chamada: assertTrue(statusChecker.getHighestLevel(0) == Status.INFO, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertEquals(3, seList.size())
nova chamada: assertEquals(3, seList.size(), "Era esperado valores iguais, mas  3 é diferente de " + result200 + " <seList.size()>")
chamada antiga: Assertions.assertEquals("xxx & yyy", be.getText())
nova chamada: assertEquals("xxx & yyy", be.getText(), "Era esperado valores iguais, mas  'xxx & yyy' é diferente de " + result201 + " <be.getText()>")
chamada antiga: Assertions.assertTrue(statusChecker.getHighestLevel(0) == Status.INFO)
nova chamada: assertTrue(statusChecker.getHighestLevel(0) == Status.INFO, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertEquals(4, seList.size())
nova chamada: assertEquals(4, seList.size(), "Era esperado valores iguais, mas  4 é diferente de " + result202 + " <seList.size()>")
chamada antiga: Assertions.assertEquals("1", attr.getValue("increment"))
nova chamada: assertEquals("1", attr.getValue("increment"), "Era esperado valores iguais, mas  '1' é diferente de " + result203 + " <attr.getValue('increment')>")
chamada antiga: Assertions.assertEquals(3, seList.size())
nova chamada: assertEquals(3, seList.size(), "Era esperado valores iguais, mas  3 é diferente de " + result204 + " <seList.size()>")
chamada antiga: Assertions.assertEquals("[x][x] \"xyz\"%n", be.getText())
nova chamada: assertEquals("[x][x] \"xyz\"%n", be.getText(), "Era esperado valores iguais, mas  '[x][x] \'xyz\'%n' é diferente de " + result205 + " <be.getText()>")
chamada antiga: assertEquals("Hello John Doe.", str)
nova chamada: assertEquals("Hello John Doe.", str, "Era esperado valores iguais, mas  'Hello John Doe.' é diferente de " + " str")
chamada antiga: assertEquals(Status.ERROR, s0.getLevel())
nova chamada: assertEquals(Status.ERROR, s0.getLevel(), "Era esperado valores iguais, mas  Status.ERROR é diferente de " + result206 + " <s0.getLevel()>")
chamada antiga: assertTrue(s0.getThrowable().getClass() == exceptionClass)
nova chamada: assertTrue(s0.getThrowable().getClass() == exceptionClass, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertNotNull(attr)
nova chamada: assertNotNull(attr, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: Assertions.assertNotNull(attr)
nova chamada: assertNotNull(attr, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: Assertions.assertEquals(oldErrorCount, IncAction.errorCount)
nova chamada: assertEquals(oldErrorCount, IncAction.errorCount, "Era esperado valores iguais, mas  oldErrorCount é diferente de " + " IncAction.errorCount")
chamada antiga: Assertions.assertEquals(oldBeginCount + 1, IncAction.beginCount)
nova chamada: assertEquals(oldBeginCount + 1, IncAction.beginCount, "Era esperado valores iguais, mas  oldBeginCount + 1 é diferente de " + " IncAction.beginCount")
chamada antiga: Assertions.assertEquals(oldEndCount + 1, IncAction.endCount)
nova chamada: assertEquals(oldEndCount + 1, IncAction.endCount, "Era esperado valores iguais, mas  oldEndCount + 1 é diferente de " + " IncAction.endCount")
chamada antiga: Assertions.assertTrue(s0.getMessage().startsWith("Could not open ["))
nova chamada: assertTrue(s0.getMessage().startsWith("Could not open ["), "Era esperado verdadeiro, mas " + result207 + " <s0.getMessage().startsWith('Could not open [')> é falso")
chamada antiga: Assertions.assertEquals(2, tsl.list.size())
nova chamada: assertEquals(2, tsl.list.size(), "Era esperado valores iguais, mas  2 é diferente de " + result208 + " <tsl.list.size()>")
chamada antiga: Assertions.assertTrue(s0.getMessage().startsWith(CoreConstants.XML_PARSING))
nova chamada: assertTrue(s0.getMessage().startsWith(CoreConstants.XML_PARSING), "Era esperado verdadeiro, mas " + result209 + " <s0.getMessage().startsWith(CoreConstants.XML_PARSING)> é falso")
chamada antiga: Assertions.assertTrue(jarFile.delete())
nova chamada: assertTrue(jarFile.delete(), "Era esperado verdadeiro, mas " + result210 + " <jarFile.delete()> é falso")
chamada antiga: Assertions.assertTrue(jarFile.delete())
nova chamada: assertTrue(jarFile.delete(), "Era esperado verdadeiro, mas " + result211 + " <jarFile.delete()> é falso")
chamada antiga: assertEquals(AggregationType.AS_COMPLEX_PROPERTY, setter.computeAggregationType("door"))
nova chamada: assertEquals(AggregationType.AS_COMPLEX_PROPERTY, setter.computeAggregationType("door"), "Era esperado valores iguais, mas  AggregationType.AS_COMPLEX_PROPERTY é diferente de " + result212 + " <setter.computeAggregationType('door')>")
chamada antiga: assertEquals(AggregationType.AS_BASIC_PROPERTY, setter.computeAggregationType("count"))
nova chamada: assertEquals(AggregationType.AS_BASIC_PROPERTY, setter.computeAggregationType("count"), "Era esperado valores iguais, mas  AggregationType.AS_BASIC_PROPERTY é diferente de " + result213 + " <setter.computeAggregationType('count')>")
chamada antiga: assertEquals(AggregationType.AS_BASIC_PROPERTY, setter.computeAggregationType("Count"))
nova chamada: assertEquals(AggregationType.AS_BASIC_PROPERTY, setter.computeAggregationType("Count"), "Era esperado valores iguais, mas  AggregationType.AS_BASIC_PROPERTY é diferente de " + result214 + " <setter.computeAggregationType('Count')>")
chamada antiga: assertEquals(AggregationType.AS_BASIC_PROPERTY, setter.computeAggregationType("name"))
nova chamada: assertEquals(AggregationType.AS_BASIC_PROPERTY, setter.computeAggregationType("name"), "Era esperado valores iguais, mas  AggregationType.AS_BASIC_PROPERTY é diferente de " + result215 + " <setter.computeAggregationType('name')>")
chamada antiga: assertEquals(AggregationType.AS_BASIC_PROPERTY, setter.computeAggregationType("Name"))
nova chamada: assertEquals(AggregationType.AS_BASIC_PROPERTY, setter.computeAggregationType("Name"), "Era esperado valores iguais, mas  AggregationType.AS_BASIC_PROPERTY é diferente de " + result216 + " <setter.computeAggregationType('Name')>")
chamada antiga: assertEquals(AggregationType.AS_BASIC_PROPERTY, setter.computeAggregationType("Duration"))
nova chamada: assertEquals(AggregationType.AS_BASIC_PROPERTY, setter.computeAggregationType("Duration"), "Era esperado valores iguais, mas  AggregationType.AS_BASIC_PROPERTY é diferente de " + result217 + " <setter.computeAggregationType('Duration')>")
chamada antiga: assertEquals(AggregationType.AS_BASIC_PROPERTY, setter.computeAggregationType("fs"))
nova chamada: assertEquals(AggregationType.AS_BASIC_PROPERTY, setter.computeAggregationType("fs"), "Era esperado valores iguais, mas  AggregationType.AS_BASIC_PROPERTY é diferente de " + result218 + " <setter.computeAggregationType('fs')>")
chamada antiga: assertEquals(AggregationType.AS_BASIC_PROPERTY, setter.computeAggregationType("open"))
nova chamada: assertEquals(AggregationType.AS_BASIC_PROPERTY, setter.computeAggregationType("open"), "Era esperado valores iguais, mas  AggregationType.AS_BASIC_PROPERTY é diferente de " + result219 + " <setter.computeAggregationType('open')>")
chamada antiga: assertEquals(AggregationType.AS_BASIC_PROPERTY, setter.computeAggregationType("Open"))
nova chamada: assertEquals(AggregationType.AS_BASIC_PROPERTY, setter.computeAggregationType("Open"), "Era esperado valores iguais, mas  AggregationType.AS_BASIC_PROPERTY é diferente de " + result220 + " <setter.computeAggregationType('Open')>")
chamada antiga: assertEquals(AggregationType.AS_COMPLEX_PROPERTY_COLLECTION, setter.computeAggregationType("Window"))
nova chamada: assertEquals(AggregationType.AS_COMPLEX_PROPERTY_COLLECTION, setter.computeAggregationType("Window"), "Era esperado valores iguais, mas  AggregationType.AS_COMPLEX_PROPERTY_COLLECTION é diferente de " + result221 + " <setter.computeAggregationType('Window')>")
chamada antiga: assertEquals(AggregationType.AS_BASIC_PROPERTY_COLLECTION, setter.computeAggregationType("adjective"))
nova chamada: assertEquals(AggregationType.AS_BASIC_PROPERTY_COLLECTION, setter.computeAggregationType("adjective"), "Era esperado valores iguais, mas  AggregationType.AS_BASIC_PROPERTY_COLLECTION é diferente de " + result222 + " <setter.computeAggregationType('adjective')>")
chamada antiga: assertEquals(AggregationType.AS_BASIC_PROPERTY, setter.computeAggregationType("filterReply"))
nova chamada: assertEquals(AggregationType.AS_BASIC_PROPERTY, setter.computeAggregationType("filterReply"), "Era esperado valores iguais, mas  AggregationType.AS_BASIC_PROPERTY é diferente de " + result223 + " <setter.computeAggregationType('filterReply')>")
chamada antiga: assertEquals(AggregationType.AS_BASIC_PROPERTY, setter.computeAggregationType("houseColor"))
nova chamada: assertEquals(AggregationType.AS_BASIC_PROPERTY, setter.computeAggregationType("houseColor"), "Era esperado valores iguais, mas  AggregationType.AS_BASIC_PROPERTY é diferente de " + result224 + " <setter.computeAggregationType('houseColor')>")
chamada antiga: assertEquals("trot", house.getCamelCase())
nova chamada: assertEquals("trot", house.getCamelCase(), "Era esperado valores iguais, mas  'trot' é diferente de " + result225 + " <house.getCamelCase()>")
chamada antiga: assertEquals("gh", house.getCamelCase())
nova chamada: assertEquals("gh", house.getCamelCase(), "Era esperado valores iguais, mas  'gh' é diferente de " + result226 + " <house.getCamelCase()>")
chamada antiga: assertEquals(door, house.getDoor())
nova chamada: assertEquals(door, house.getDoor(), "Era esperado valores iguais, mas  door é diferente de " + result227 + " <house.getDoor()>")
chamada antiga: assertEquals(Door.class, compClass)
nova chamada: assertEquals(Door.class, compClass, "Era esperado valores iguais, mas  Door.class é diferente de " + " compClass")
chamada antiga: assertEquals(Window.class, compClass)
nova chamada: assertEquals(Window.class, compClass, "Era esperado valores iguais, mas  Window.class é diferente de " + " compClass")
chamada antiga: assertEquals(2, house.adjectiveList.size())
nova chamada: assertEquals(2, house.adjectiveList.size(), "Era esperado valores iguais, mas  2 é diferente de " + result228 + " <house.adjectiveList.size()>")
chamada antiga: assertEquals("nice", house.adjectiveList.get(0))
nova chamada: assertEquals("nice", house.adjectiveList.get(0), "Era esperado valores iguais, mas  'nice' é diferente de " + result229 + " <house.adjectiveList.get(0)>")
chamada antiga: assertEquals("big", house.adjectiveList.get(1))
nova chamada: assertEquals("big", house.adjectiveList.get(1), "Era esperado valores iguais, mas  'big' é diferente de " + result230 + " <house.adjectiveList.get(1)>")
chamada antiga: assertEquals(2, house.windowList.size())
nova chamada: assertEquals(2, house.windowList.size(), "Era esperado valores iguais, mas  2 é diferente de " + result231 + " <house.windowList.size()>")
chamada antiga: assertEquals(10, house.windowList.get(0).handle)
nova chamada: assertEquals(10, house.windowList.get(0).handle, "Era esperado valores iguais, mas  10 é diferente de " + " house.windowList.get(0).handle")
chamada antiga: assertEquals(20, house.windowList.get(1).handle)
nova chamada: assertEquals(20, house.windowList.get(1).handle, "Era esperado valores iguais, mas  20 é diferente de " + " house.windowList.get(1).handle")
chamada antiga: assertEquals(pool, house.getSwimmingPool())
nova chamada: assertEquals(pool, house.getSwimmingPool(), "Era esperado valores iguais, mas  pool é diferente de " + result232 + " <house.getSwimmingPool()>")
chamada antiga: assertEquals(1400, house.getDuration().getMilliseconds())
nova chamada: assertEquals(1400, house.getDuration().getMilliseconds(), "Era esperado valores iguais, mas  1400 é diferente de " + result233 + " <house.getDuration().getMilliseconds()>")
chamada antiga: assertEquals(2 * 1024, house.getFs().getSize())
nova chamada: assertEquals(2 * 1024, house.getFs().getSize(), "Era esperado valores iguais, mas  2 * 1024 é diferente de " + result234 + " <house.getFs().getSize()>")
chamada antiga: assertEquals(FilterReply.ACCEPT, house.getFilterReply())
nova chamada: assertEquals(FilterReply.ACCEPT, house.getFilterReply(), "Era esperado valores iguais, mas  FilterReply.ACCEPT é diferente de " + result235 + " <house.getFilterReply()>")
chamada antiga: assertEquals(HouseColor.BLUE, house.getHouseColor())
nova chamada: assertEquals(HouseColor.BLUE, house.getHouseColor(), "Era esperado valores iguais, mas  HouseColor.BLUE é diferente de " + result236 + " <house.getHouseColor()>")
chamada antiga: assertNotNull(relevantMethod)
nova chamada: assertNotNull(relevantMethod, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(SwimmingPoolImpl.class, spClass)
nova chamada: assertEquals(SwimmingPoolImpl.class, spClass, "Era esperado valores iguais, mas  SwimmingPoolImpl.class é diferente de " + " spClass")
chamada antiga: assertEquals(SwimmingPoolImpl.class, classViaImplicitRules)
nova chamada: assertEquals(SwimmingPoolImpl.class, classViaImplicitRules, "Era esperado valores iguais, mas  SwimmingPoolImpl.class é diferente de " + " classViaImplicitRules")
chamada antiga: assertNotNull(relevantMethod)
nova chamada: assertNotNull(relevantMethod, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(LargeSwimmingPoolImpl.class, spClass)
nova chamada: assertEquals(LargeSwimmingPoolImpl.class, spClass, "Era esperado valores iguais, mas  LargeSwimmingPoolImpl.class é diferente de " + " spClass")
chamada antiga: assertEquals(LargeSwimmingPoolImpl.class, classViaImplicitRules)
nova chamada: assertEquals(LargeSwimmingPoolImpl.class, classViaImplicitRules, "Era esperado valores iguais, mas  LargeSwimmingPoolImpl.class é diferente de " + " classViaImplicitRules")
chamada antiga: assertEquals(Charset.forName("UTF-8"), house.getCharset())
nova chamada: assertEquals(Charset.forName("UTF-8"), house.getCharset(), "Era esperado valores iguais, mas " + result237 + " <Charset.forName('UTF-8')> é diferente de " + result238 + " <house.getCharset()>")
chamada antiga: assertNull(house.getCharset())
nova chamada: assertNull(house.getCharset(), "Era esperado nulo, mas " + result239 + " <house.getCharset()> não é nulo")
chamada antiga: assertEquals(AggregationType.AS_BASIC_PROPERTY, orangeSetter.computeAggregationType(Citrus.PRECARP_PROPERTY_NAME))
nova chamada: assertEquals(AggregationType.AS_BASIC_PROPERTY, orangeSetter.computeAggregationType(Citrus.PRECARP_PROPERTY_NAME), "Era esperado valores iguais, mas  AggregationType.AS_BASIC_PROPERTY é diferente de " + result240 + " <orangeSetter.computeAggregationType(Citrus.PRECARP_PROPERTY_NAME)>")
chamada antiga: assertEquals(AggregationType.AS_BASIC_PROPERTY, orangeSetter.computeAggregationType(Citrus.PREFIX_PROPERTY_NAME))
nova chamada: assertEquals(AggregationType.AS_BASIC_PROPERTY, orangeSetter.computeAggregationType(Citrus.PREFIX_PROPERTY_NAME), "Era esperado valores iguais, mas  AggregationType.AS_BASIC_PROPERTY é diferente de " + result241 + " <orangeSetter.computeAggregationType(Citrus.PREFIX_PROPERTY_NAME)>")
chamada antiga: assertNotNull(fList)
nova chamada: assertNotNull(fList, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(1, fList.size())
nova chamada: assertEquals(1, fList.size(), "Era esperado valores iguais, mas  1 é diferente de " + result242 + " <fList.size()>")
chamada antiga: assertEquals("blue", f0.getName())
nova chamada: assertEquals("blue", f0.getName(), "Era esperado valores iguais, mas  'blue' é diferente de " + result243 + " <f0.getName()>")
chamada antiga: assertEquals(2, f0.textList.size())
nova chamada: assertEquals(2, f0.textList.size(), "Era esperado valores iguais, mas  2 é diferente de " + result244 + " <f0.textList.size()>")
chamada antiga: assertEquals("hello", f0.textList.get(0))
nova chamada: assertEquals("hello", f0.textList.get(0), "Era esperado valores iguais, mas  'hello' é diferente de " + result245 + " <f0.textList.get(0)>")
chamada antiga: assertEquals("world", f0.textList.get(1))
nova chamada: assertEquals("world", f0.textList.get(1), "Era esperado valores iguais, mas  'world' é diferente de " + result246 + " <f0.textList.get(1)>")
chamada antiga: assertNotNull(fList)
nova chamada: assertNotNull(fList, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(1, fList.size())
nova chamada: assertEquals(1, fList.size(), "Era esperado valores iguais, mas  1 é diferente de " + result247 + " <fList.size()>")
chamada antiga: assertEquals(2, f0.cakeList.size())
nova chamada: assertEquals(2, f0.cakeList.size(), "Era esperado valores iguais, mas  2 é diferente de " + result248 + " <f0.cakeList.size()>")
chamada antiga: assertEquals("A", cakeA.getType())
nova chamada: assertEquals("A", cakeA.getType(), "Era esperado valores iguais, mas  'A' é diferente de " + result249 + " <cakeA.getType()>")
chamada antiga: assertEquals("B", cakeB.getType())
nova chamada: assertEquals("B", cakeB.getType(), "Era esperado valores iguais, mas  'B' é diferente de " + result250 + " <cakeB.getType()>")
chamada antiga: assertEquals(0, tracker.liveKeysAsOrderedList().size())
nova chamada: assertEquals(0, tracker.liveKeysAsOrderedList().size(), "Era esperado valores iguais, mas  0 é diferente de " + result251 + " <tracker.liveKeysAsOrderedList().size()>")
chamada antiga: assertEquals(0, tracker.getComponentCount())
nova chamada: assertEquals(0, tracker.getComponentCount(), "Era esperado valores iguais, mas  0 é diferente de " + result252 + " <tracker.getComponentCount()>")
chamada antiga: assertNotNull(tracker.getOrCreate(key, now++))
nova chamada: assertNotNull(tracker.getOrCreate(key, now++), "Era esperado não nulo, mas " + result253 + " <tracker.getOrCreate(key, now++)> é nulo")
chamada antiga: assertEquals(0, tracker.liveKeysAsOrderedList().size())
nova chamada: assertEquals(0, tracker.liveKeysAsOrderedList().size(), "Era esperado valores iguais, mas  0 é diferente de " + result254 + " <tracker.liveKeysAsOrderedList().size()>")
chamada antiga: assertEquals(0, tracker.getComponentCount())
nova chamada: assertEquals(0, tracker.getComponentCount(), "Era esperado valores iguais, mas  0 é diferente de " + result255 + " <tracker.getComponentCount()>")
chamada antiga: assertNotNull(tracker.getOrCreate(key, now++))
nova chamada: assertNotNull(tracker.getOrCreate(key, now++), "Era esperado não nulo, mas " + result256 + " <tracker.getOrCreate(key, now++)> é nulo")
chamada antiga: assertEquals(cb, tracker.getOrCreate(key, now++))
nova chamada: assertEquals(cb, tracker.getOrCreate(key, now++), "Era esperado valores iguais, mas  cb é diferente de " + result257 + " <tracker.getOrCreate(key, now++)>")
chamada antiga: assertEquals(0, tracker.liveKeysAsOrderedList().size())
nova chamada: assertEquals(0, tracker.liveKeysAsOrderedList().size(), "Era esperado valores iguais, mas  0 é diferente de " + result258 + " <tracker.liveKeysAsOrderedList().size()>")
chamada antiga: assertEquals(0, tracker.getComponentCount())
nova chamada: assertEquals(0, tracker.getComponentCount(), "Era esperado valores iguais, mas  0 é diferente de " + result259 + " <tracker.getComponentCount()>")
chamada antiga: assertEquals(1, cb.length())
nova chamada: assertEquals(1, cb.length(), "Era esperado valores iguais, mas  1 é diferente de " + result260 + " <cb.length()>")
chamada antiga: assertEquals(0, tracker.liveKeysAsOrderedList().size())
nova chamada: assertEquals(0, tracker.liveKeysAsOrderedList().size(), "Era esperado valores iguais, mas  0 é diferente de " + result261 + " <tracker.liveKeysAsOrderedList().size()>")
chamada antiga: assertEquals(0, tracker.getComponentCount())
nova chamada: assertEquals(0, tracker.getComponentCount(), "Era esperado valores iguais, mas  0 é diferente de " + result262 + " <tracker.getComponentCount()>")
chamada antiga: assertEquals(0, cb.length())
nova chamada: assertEquals(0, cb.length(), "Era esperado valores iguais, mas  0 é diferente de " + result263 + " <cb.length()>")
chamada antiga: assertEquals(t_at.liveKeysAsOrderedList(), at.liveKeysAsOrderedList())
nova chamada: assertEquals(t_at.liveKeysAsOrderedList(), at.liveKeysAsOrderedList(), "Era esperado valores iguais, mas " + result264 + " <t_at.liveKeysAsOrderedList()> é diferente de " + result265 + " <at.liveKeysAsOrderedList()>")
chamada antiga: assertEquals(t_at.lingererKeysAsOrderedList(), at.lingererKeysAsOrderedList())
nova chamada: assertEquals(t_at.lingererKeysAsOrderedList(), at.lingererKeysAsOrderedList(), "Era esperado valores iguais, mas " + result266 + " <t_at.lingererKeysAsOrderedList()> é diferente de " + result267 + " <at.lingererKeysAsOrderedList()>")
chamada antiga: Assertions.assertFalse(jarFile.exists())
nova chamada: assertFalse(jarFile.exists(), "Era esperado falso, mas " + result268 + " <jarFile.exists()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(jarFile.exists())
nova chamada: assertFalse(jarFile.exists(), "Era esperado falso, mas " + result269 + " <jarFile.exists()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(component.isStarted())
nova chamada: assertFalse(component.isStarted(), "Era esperado falso, mas " + result270 + " <component.isStarted()> é verdadeiro ")
chamada antiga: Assertions.assertTrue(aai.detachAppender("test"))
nova chamada: assertTrue(aai.detachAppender("test"), "Era esperado verdadeiro, mas " + result271 + " <aai.detachAppender('test')> é falso")
chamada antiga: Assertions.assertTrue(aai.detachAppender("test1"))
nova chamada: assertTrue(aai.detachAppender("test1"), "Era esperado verdadeiro, mas " + result272 + " <aai.detachAppender('test1')> é falso")
chamada antiga: Assertions.assertFalse(aai.detachAppender("test1"))
nova chamada: assertFalse(aai.detachAppender("test1"), "Era esperado falso, mas " + result273 + " <aai.detachAppender('test1')> é verdadeiro ")
chamada antiga: assertEquals(Status.ERROR, bsm.getLevel())
nova chamada: assertEquals(Status.ERROR, bsm.getLevel(), "Era esperado valores iguais, mas  Status.ERROR é diferente de " + result274 + " <bsm.getLevel()>")
chamada antiga: assertNotNull(statusList)
nova chamada: assertNotNull(statusList, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(1, statusList.size())
nova chamada: assertEquals(1, statusList.size(), "Era esperado valores iguais, mas  1 é diferente de " + result275 + " <statusList.size()>")
chamada antiga: assertEquals("hello", statusList.get(0).getMessage())
nova chamada: assertEquals("hello", statusList.get(0).getMessage(), "Era esperado valores iguais, mas  'hello' é diferente de " + result276 + " <statusList.get(0).getMessage()>")
chamada antiga: assertNotNull(statusList)
nova chamada: assertNotNull(statusList, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(MAX_HEADER_COUNT + TAIL_SIZE, statusList.size())
nova chamada: assertEquals(MAX_HEADER_COUNT + TAIL_SIZE, statusList.size(), "Era esperado valores iguais, mas  MAX_HEADER_COUNT + TAIL_SIZE é diferente de " + result277 + " <statusList.size()>")
chamada antiga: assertEquals(witness, statusList)
nova chamada: assertEquals(witness, statusList, "Era esperado valores iguais, mas  witness é diferente de " + " statusList")
chamada antiga: assertTrue(bsm.add(sl0))
nova chamada: assertTrue(bsm.add(sl0), "Era esperado verdadeiro, mas " + result278 + " <bsm.add(sl0)> é falso")
chamada antiga: assertFalse(bsm.add(sl1))
nova chamada: assertFalse(bsm.add(sl1), "Era esperado falso, mas " + result279 + " <bsm.add(sl1)> é verdadeiro ")
chamada antiga: assertEquals(-1, statusUtil.timeOfLastReset())
nova chamada: assertEquals(-1, statusUtil.timeOfLastReset(), "Era esperado valores iguais, mas  -1 é diferente de " + result280 + " <statusUtil.timeOfLastReset()>")
chamada antiga: assertEquals(-1, statusUtil.timeOfLastReset())
nova chamada: assertEquals(-1, statusUtil.timeOfLastReset(), "Era esperado valores iguais, mas  -1 é diferente de " + result281 + " <statusUtil.timeOfLastReset()>")
chamada antiga: assertTrue(resetTime <= statusUtil.timeOfLastReset())
nova chamada: assertTrue(resetTime <= statusUtil.timeOfLastReset(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(expected, back)
nova chamada: assertEquals(expected, back, "Era esperado valores iguais, mas  expected é diferente de " + " back")
chamada antiga: assertEquals(expected, result)
nova chamada: assertEquals(expected, result, "Era esperado valores iguais, mas  expected é diferente de " + " result")
chamada antiga: Assertions.assertTrue(containsMatch(level, regex))
nova chamada: assertTrue(containsMatch(level, regex), "Era esperado verdadeiro, mas " + result282 + " <containsMatch(level, regex)> é falso")
chamada antiga: Assertions.assertFalse(containsMatch(regex))
nova chamada: assertFalse(containsMatch(regex), "Era esperado falso, mas " + result283 + " <containsMatch(regex)> é verdadeiro ")
chamada antiga: Assertions.assertTrue(containsMatch(regex))
nova chamada: assertTrue(containsMatch(regex), "Era esperado verdadeiro, mas " + result284 + " <containsMatch(regex)> é falso")
chamada antiga: Assertions.assertTrue(containsException(scanExceptionClass))
nova chamada: assertTrue(containsException(scanExceptionClass), "Era esperado verdadeiro, mas " + result285 + " <containsException(scanExceptionClass)> é falso")
chamada antiga: Assertions.assertTrue(containsException(scanExceptionClass, msg))
nova chamada: assertTrue(containsException(scanExceptionClass, msg), "Era esperado verdadeiro, mas " + result286 + " <containsException(scanExceptionClass, msg)> é falso")
chamada antiga: Assertions.assertTrue(isErrorFree(0))
nova chamada: assertTrue(isErrorFree(0), "Era esperado verdadeiro, mas " + result287 + " <isErrorFree(0)> é falso")
chamada antiga: Assertions.assertTrue(isWarningOrErrorFree(0))
nova chamada: assertTrue(isWarningOrErrorFree(0), "Era esperado verdadeiro, mas " + result288 + " <isWarningOrErrorFree(0)> é falso")
chamada antiga: assertTrue(matcher.matches("test"))
nova chamada: assertTrue(matcher.matches("test"), "Era esperado verdadeiro, mas " + result289 + " <matcher.matches('test')> é falso")
chamada antiga: assertTrue(matcher.matches("xxxxtest"))
nova chamada: assertTrue(matcher.matches("xxxxtest"), "Era esperado verdadeiro, mas " + result290 + " <matcher.matches('xxxxtest')> é falso")
chamada antiga: assertTrue(matcher.matches("testxxxx"))
nova chamada: assertTrue(matcher.matches("testxxxx"), "Era esperado verdadeiro, mas " + result291 + " <matcher.matches('testxxxx')> é falso")
chamada antiga: assertTrue(matcher.matches("xxxxtestxxxx"))
nova chamada: assertTrue(matcher.matches("xxxxtestxxxx"), "Era esperado verdadeiro, mas " + result292 + " <matcher.matches('xxxxtestxxxx')> é falso")
chamada antiga: assertTrue(matcher.matches("test"))
nova chamada: assertTrue(matcher.matches("test"), "Era esperado verdadeiro, mas " + result293 + " <matcher.matches('test')> é falso")
chamada antiga: assertTrue(matcher.matches("xxxxtest"))
nova chamada: assertTrue(matcher.matches("xxxxtest"), "Era esperado verdadeiro, mas " + result294 + " <matcher.matches('xxxxtest')> é falso")
chamada antiga: assertTrue(matcher.matches("testxxxx"))
nova chamada: assertTrue(matcher.matches("testxxxx"), "Era esperado verdadeiro, mas " + result295 + " <matcher.matches('testxxxx')> é falso")
chamada antiga: assertTrue(matcher.matches("xxxxtestxxxx"))
nova chamada: assertTrue(matcher.matches("xxxxtestxxxx"), "Era esperado verdadeiro, mas " + result296 + " <matcher.matches('xxxxtestxxxx')> é falso")
chamada antiga: assertTrue(matcher.matches("TEST"))
nova chamada: assertTrue(matcher.matches("TEST"), "Era esperado verdadeiro, mas " + result297 + " <matcher.matches('TEST')> é falso")
chamada antiga: assertTrue(matcher.matches("tEst"))
nova chamada: assertTrue(matcher.matches("tEst"), "Era esperado verdadeiro, mas " + result298 + " <matcher.matches('tEst')> é falso")
chamada antiga: assertTrue(matcher.matches("tESt"))
nova chamada: assertTrue(matcher.matches("tESt"), "Era esperado verdadeiro, mas " + result299 + " <matcher.matches('tESt')> é falso")
chamada antiga: assertTrue(matcher.matches("TesT"))
nova chamada: assertTrue(matcher.matches("TesT"), "Era esperado verdadeiro, mas " + result300 + " <matcher.matches('TesT')> é falso")
chamada antiga: assertFalse(matcher.matches("TEST"))
nova chamada: assertFalse(matcher.matches("TEST"), "Era esperado falso, mas " + result301 + " <matcher.matches('TEST')> é verdadeiro ")
chamada antiga: assertFalse(matcher.matches("tEst"))
nova chamada: assertFalse(matcher.matches("tEst"), "Era esperado falso, mas " + result302 + " <matcher.matches('tEst')> é verdadeiro ")
chamada antiga: assertFalse(matcher.matches("tESt"))
nova chamada: assertFalse(matcher.matches("tESt"), "Era esperado falso, mas " + result303 + " <matcher.matches('tESt')> é verdadeiro ")
chamada antiga: assertFalse(matcher.matches("TesT"))
nova chamada: assertFalse(matcher.matches("TesT"), "Era esperado falso, mas " + result304 + " <matcher.matches('TesT')> é verdadeiro ")
chamada antiga: Assertions.assertEquals(12, result)
nova chamada: assertEquals(12, result, "Era esperado valores iguais, mas  12 é diferente de " + " result")
chamada antiga: Assertions.assertEquals(size, cb.length())
nova chamada: assertEquals(size, cb.length(), "Era esperado valores iguais, mas  size é diferente de " + result305 + " <cb.length()>")
chamada antiga: Assertions.assertEquals("one", cb.get())
nova chamada: assertEquals("one", cb.get(), "Era esperado valores iguais, mas  'one' é diferente de " + result306 + " <cb.get()>")
chamada antiga: Assertions.assertEquals("two", cb.get())
nova chamada: assertEquals("two", cb.get(), "Era esperado valores iguais, mas  'two' é diferente de " + result307 + " <cb.get()>")
chamada antiga: Assertions.assertEquals(witness, clone.asList())
nova chamada: assertEquals(witness, clone.asList(), "Era esperado valores iguais, mas  witness é diferente de " + result308 + " <clone.asList()>")
chamada antiga: Assertions.assertEquals(exptectedWrites, actuallyWritten)
nova chamada: assertEquals(exptectedWrites, actuallyWritten, "Era esperado valores iguais, mas  exptectedWrites é diferente de " + " actuallyWritten")
chamada antiga: assertEquals("", s)
nova chamada: assertEquals("", s, "Era esperado valores iguais, mas  '' é diferente de " + " s")
chamada antiga: assertFalse(result.contains("%PARSER_ERROR_EX"))
nova chamada: assertFalse(result.contains("%PARSER_ERROR_EX"), "Era esperado falso, mas " + result309 + " <result.contains('%PARSER_ERROR_EX')> é verdadeiro ")
chamada antiga: assertEquals("", s)
nova chamada: assertEquals("", s, "Era esperado valores iguais, mas  '' é diferente de " + " s")
chamada antiga: assertEquals("", s)
nova chamada: assertEquals("", s, "Era esperado valores iguais, mas  '' é diferente de " + " s")
chamada antiga: assertEquals("", s)
nova chamada: assertEquals("", s, "Era esperado valores iguais, mas  '' é diferente de " + " s")
chamada antiga: Assertions.assertEquals("x123", s)
nova chamada: assertEquals("x123", s, "Era esperado valores iguais, mas  'x123' é diferente de " + " s")
chamada antiga: Assertions.assertEquals("x(123)y", s)
nova chamada: assertEquals("x(123)y", s, "Era esperado valores iguais, mas  'x(123)y' é diferente de " + " s")
chamada antiga: Assertions.assertEquals("x(123)y", s)
nova chamada: assertEquals("x(123)y", s, "Era esperado valores iguais, mas  'x(123)y' é diferente de " + " s")
chamada antiga: Assertions.assertEquals("hello % world", s)
nova chamada: assertEquals("hello % world", s, "Era esperado valores iguais, mas  'hello % world' é diferente de " + " s")
chamada antiga: assertEquals("hello", result)
nova chamada: assertEquals("hello", result, "Era esperado valores iguais, mas  'hello' é diferente de " + " result")
chamada antiga: Assertions.assertEquals(Node.LITERAL, t.getType())
nova chamada: assertEquals(Node.LITERAL, t.getType(), "Era esperado valores iguais, mas  Node.LITERAL é diferente de " + result310 + " <t.getType()>")
chamada antiga: Assertions.assertEquals("hello", t.getValue())
nova chamada: assertEquals("hello", t.getValue(), "Era esperado valores iguais, mas  'hello' é diferente de " + result311 + " <t.getValue()>")
chamada antiga: Assertions.assertEquals(witness, t)
nova chamada: assertEquals(witness, t, "Era esperado valores iguais, mas  witness é diferente de " + " t")
chamada antiga: Assertions.assertEquals(witness, t)
nova chamada: assertEquals(witness, t, "Era esperado valores iguais, mas  witness é diferente de " + " t")
chamada antiga: Assertions.assertEquals(witness, t)
nova chamada: assertEquals(witness, t, "Era esperado valores iguais, mas  witness é diferente de " + " t")
chamada antiga: Assertions.assertEquals(witness, t)
nova chamada: assertEquals(witness, t, "Era esperado valores iguais, mas  witness é diferente de " + " t")
chamada antiga: assertEquals(witness, tl)
nova chamada: assertEquals(witness, tl, "Era esperado valores iguais, mas  witness é diferente de " + " tl")
chamada antiga: assertEquals(witness, tl)
nova chamada: assertEquals(witness, tl, "Era esperado valores iguais, mas  witness é diferente de " + " tl")
chamada antiga: assertEquals(witness, tl)
nova chamada: assertEquals(witness, tl, "Era esperado valores iguais, mas  witness é diferente de " + " tl")
chamada antiga: assertEquals(witness, tl)
nova chamada: assertEquals(witness, tl, "Era esperado valores iguais, mas  witness é diferente de " + " tl")
chamada antiga: assertEquals(witness, tl)
nova chamada: assertEquals(witness, tl, "Era esperado valores iguais, mas  witness é diferente de " + " tl")
chamada antiga: assertEquals(witness, tl)
nova chamada: assertEquals(witness, tl, "Era esperado valores iguais, mas  witness é diferente de " + " tl")
chamada antiga: assertEquals(witness, tl)
nova chamada: assertEquals(witness, tl, "Era esperado valores iguais, mas  witness é diferente de " + " tl")
chamada antiga: assertEquals(witness, tl)
nova chamada: assertEquals(witness, tl, "Era esperado valores iguais, mas  witness é diferente de " + " tl")
chamada antiga: assertEquals(witness, tl)
nova chamada: assertEquals(witness, tl, "Era esperado valores iguais, mas  witness é diferente de " + " tl")
chamada antiga: assertEquals("a", RegularEscapeUtil.basicEscape("a"))
nova chamada: assertEquals("a", RegularEscapeUtil.basicEscape("a"), "Era esperado valores iguais, mas  'a' é diferente de " + result312 + " <RegularEscapeUtil.basicEscape('a')>")
chamada antiga: assertEquals("a\t", RegularEscapeUtil.basicEscape("a\t"))
nova chamada: assertEquals("a\t", RegularEscapeUtil.basicEscape("a\t"), "Era esperado valores iguais, mas  'a\t' é diferente de " + result313 + " <RegularEscapeUtil.basicEscape('a\t')>")
chamada antiga: assertEquals("a\\", RegularEscapeUtil.basicEscape("a\\"))
nova chamada: assertEquals("a\\", RegularEscapeUtil.basicEscape("a\\"), "Era esperado valores iguais, mas  'a\\' é diferente de " + result314 + " <RegularEscapeUtil.basicEscape('a\\')>")
chamada antiga: assertEquals("a\\", RegularEscapeUtil.basicEscape("a\\\\"))
nova chamada: assertEquals("a\\", RegularEscapeUtil.basicEscape("a\\\\"), "Era esperado valores iguais, mas  'a\\' é diferente de " + result315 + " <RegularEscapeUtil.basicEscape('a\\\\')>")
chamada antiga: Assertions.assertEquals(0, appenderTracker.getComponentCount())
nova chamada: assertEquals(0, appenderTracker.getComponentCount(), "Era esperado valores iguais, mas  0 é diferente de " + result316 + " <appenderTracker.getComponentCount()>")
chamada antiga: Assertions.assertEquals(max, appenderTracker.allKeys().size())
nova chamada: assertEquals(max, appenderTracker.allKeys().size(), "Era esperado valores iguais, mas  max é diferente de " + result317 + " <appenderTracker.allKeys().size()>")
chamada antiga: Assertions.assertEquals(numComponentsCreated, appenderTracker.allKeys().size())
nova chamada: assertEquals(numComponentsCreated, appenderTracker.allKeys().size(), "Era esperado valores iguais, mas  numComponentsCreated é diferente de " + result318 + " <appenderTracker.allKeys().size()>")
chamada antiga: Assertions.assertEquals(numComponentsCreated - 1, appenderTracker.allKeys().size())
nova chamada: assertEquals(numComponentsCreated - 1, appenderTracker.allKeys().size(), "Era esperado valores iguais, mas  numComponentsCreated - 1 é diferente de " + result319 + " <appenderTracker.allKeys().size()>")
chamada antiga: Assertions.assertEquals("valA", context.getProperty("keyA"))
nova chamada: assertEquals("valA", context.getProperty("keyA"), "Era esperado valores iguais, mas  'valA' é diferente de " + result320 + " <context.getProperty('keyA')>")
chamada antiga: Assertions.assertEquals("valA", context.getObject("keyA"))
nova chamada: assertEquals("valA", context.getObject("keyA"), "Era esperado valores iguais, mas  'valA' é diferente de " + result321 + " <context.getObject('keyA')>")
chamada antiga: Assertions.assertEquals(HELLO, context.getProperty(CoreConstants.CONTEXT_NAME_KEY))
nova chamada: assertEquals(HELLO, context.getProperty(CoreConstants.CONTEXT_NAME_KEY), "Era esperado valores iguais, mas  HELLO é diferente de " + result322 + " <context.getProperty(CoreConstants.CONTEXT_NAME_KEY)>")
chamada antiga: Assertions.assertEquals(HELLO, context.getProperty("CONTEXT_NAME"))
nova chamada: assertEquals(HELLO, context.getProperty("CONTEXT_NAME"), "Era esperado valores iguais, mas  HELLO é diferente de " + result323 + " <context.getProperty('CONTEXT_NAME')>")
chamada antiga: assertEquals(DummyLayout.DUMMY, baos.toString())
nova chamada: assertEquals(DummyLayout.DUMMY, baos.toString(), "Era esperado valores iguais, mas  DummyLayout.DUMMY é diferente de " + result324 + " <baos.toString()>")
chamada antiga: Assertions.assertEquals(Status.WARN, statusChecker.getHighestLevel(0))
nova chamada: assertEquals(Status.WARN, statusChecker.getHighestLevel(0), "Era esperado valores iguais, mas  Status.WARN é diferente de " + result325 + " <statusChecker.getHighestLevel(0)>")
chamada antiga: Assertions.assertEquals(DummyLayout.DUMMY, teeOut.toString())
nova chamada: assertEquals(DummyLayout.DUMMY, teeOut.toString(), "Era esperado valores iguais, mas  DummyLayout.DUMMY é diferente de " + result326 + " <teeOut.toString()>")
chamada antiga: Assertions.assertEquals("open" + CoreConstants.LINE_SEPARATOR + DummyLayout.DUMMY, teeOut.toString())
nova chamada: assertEquals("open" + CoreConstants.LINE_SEPARATOR + DummyLayout.DUMMY, teeOut.toString(), "Era esperado valores iguais, mas  'open' + CoreConstants.LINE_SEPARATOR + DummyLayout.DUMMY é diferente de " + result327 + " <teeOut.toString()>")
chamada antiga: Assertions.assertEquals(DummyLayout.DUMMY + "CLOSED", teeOut.toString())
nova chamada: assertEquals(DummyLayout.DUMMY + "CLOSED", teeOut.toString(), "Era esperado valores iguais, mas  DummyLayout.DUMMY + 'CLOSED' é diferente de " + result328 + " <teeOut.toString()>")
chamada antiga: Assertions.assertEquals("a" + CoreConstants.LINE_SEPARATOR, teeOut.toString())
nova chamada: assertEquals("a" + CoreConstants.LINE_SEPARATOR, teeOut.toString(), "Era esperado valores iguais, mas  'a' + CoreConstants.LINE_SEPARATOR é diferente de " + result329 + " <teeOut.toString()>")
chamada antiga: Assertions.assertEquals("b" + CoreConstants.LINE_SEPARATOR, newTee.toString())
nova chamada: assertEquals("b" + CoreConstants.LINE_SEPARATOR, newTee.toString(), "Era esperado valores iguais, mas  'b' + CoreConstants.LINE_SEPARATOR é diferente de " + result330 + " <newTee.toString()>")
chamada antiga: Assertions.assertEquals(DummyLayout.DUMMY, new String(teeOut.toByteArray(), utf16BE))
nova chamada: assertEquals(DummyLayout.DUMMY, new String(teeOut.toByteArray(), utf16BE), "Era esperado valores iguais, mas  DummyLayout.DUMMY é diferente de " + " new String(teeOut.toByteArray(), utf16BE)")
chamada antiga: Assertions.assertEquals(DummyLayout.DUMMY, teeOut.toString())
nova chamada: assertEquals(DummyLayout.DUMMY, teeOut.toString(), "Era esperado valores iguais, mas  DummyLayout.DUMMY é diferente de " + result331 + " <teeOut.toString()>")
chamada antiga: Assertions.assertEquals(DummyLayout.DUMMY, teeErr.toString())
nova chamada: assertEquals(DummyLayout.DUMMY, teeErr.toString(), "Era esperado valores iguais, mas  DummyLayout.DUMMY é diferente de " + result332 + " <teeErr.toString()>")
chamada antiga: Assertions.assertEquals(input, nodeToStringTransformer.transform())
nova chamada: assertEquals(input, nodeToStringTransformer.transform(), "Era esperado valores iguais, mas  input é diferente de " + result333 + " <nodeToStringTransformer.transform()>")
chamada antiga: Assertions.assertEquals(input, nodeToStringTransformer.transform())
nova chamada: assertEquals(input, nodeToStringTransformer.transform(), "Era esperado valores iguais, mas  input é diferente de " + result334 + " <nodeToStringTransformer.transform()>")
chamada antiga: Assertions.assertEquals("v0", nodeToStringTransformer.transform())
nova chamada: assertEquals("v0", nodeToStringTransformer.transform(), "Era esperado valores iguais, mas  'v0' é diferente de " + result335 + " <nodeToStringTransformer.transform()>")
chamada antiga: Assertions.assertEquals("c", result)
nova chamada: assertEquals("c", result, "Era esperado valores iguais, mas  'c' é diferente de " + " result")
chamada antiga: Assertions.assertEquals("av0c", nodeToStringTransformer.transform())
nova chamada: assertEquals("av0c", nodeToStringTransformer.transform(), "Era esperado valores iguais, mas  'av0c' é diferente de " + result336 + " <nodeToStringTransformer.transform()>")
chamada antiga: Assertions.assertEquals("av0b", nodeToStringTransformer.transform())
nova chamada: assertEquals("av0b", nodeToStringTransformer.transform(), "Era esperado valores iguais, mas  'av0b' é diferente de " + result337 + " <nodeToStringTransformer.transform()>")
chamada antiga: Assertions.assertEquals("http://..", nodeToStringTransformer.transform())
nova chamada: assertEquals("http://..", nodeToStringTransformer.transform(), "Era esperado valores iguais, mas  'http://..' é diferente de " + result338 + " <nodeToStringTransformer.transform()>")
chamada antiga: Assertions.assertEquals("%d{HH:mm:ss.SSS} host:local %logger{36} - %msg%n", nodeToStringTransformer.transform())
nova chamada: assertEquals("%d{HH:mm:ss.SSS} host:local %logger{36} - %msg%n", nodeToStringTransformer.transform(), "Era esperado valores iguais, mas  '%d{HH:mm:ss.SSS} host:local %logger{36} - %msg%n' é diferente de " + result339 + " <nodeToStringTransformer.transform()>")
chamada antiga: Assertions.assertEquals(input, nodeToStringTransformer.transform())
nova chamada: assertEquals(input, nodeToStringTransformer.transform(), "Era esperado valores iguais, mas  input é diferente de " + result340 + " <nodeToStringTransformer.transform()>")
chamada antiga: Assertions.assertEquals("bc", nodeToStringTransformer.transform())
nova chamada: assertEquals("bc", nodeToStringTransformer.transform(), "Era esperado valores iguais, mas  'bc' é diferente de " + result341 + " <nodeToStringTransformer.transform()>")
chamada antiga: Assertions.assertEquals("axv0c", nodeToStringTransformer.transform())
nova chamada: assertEquals("axv0c", nodeToStringTransformer.transform(), "Era esperado valores iguais, mas  'axv0c' é diferente de " + result342 + " <nodeToStringTransformer.transform()>")
chamada antiga: Assertions.assertEquals("a: {y}", nodeToStringTransformer.transform())
nova chamada: assertEquals("a: {y}", nodeToStringTransformer.transform(), "Era esperado valores iguais, mas  'a: {y}' é diferente de " + result343 + " <nodeToStringTransformer.transform()>")
chamada antiga: assertEquals(witnessList, tokenList)
nova chamada: assertEquals(witnessList, tokenList, "Era esperado valores iguais, mas  witnessList é diferente de " + " tokenList")
chamada antiga: assertEquals(witnessList, tokenList)
nova chamada: assertEquals(witnessList, tokenList, "Era esperado valores iguais, mas  witnessList é diferente de " + " tokenList")
chamada antiga: assertEquals(witnessList, tokenList)
nova chamada: assertEquals(witnessList, tokenList, "Era esperado valores iguais, mas  witnessList é diferente de " + " tokenList")
chamada antiga: assertEquals(witnessList, tokenList)
nova chamada: assertEquals(witnessList, tokenList, "Era esperado valores iguais, mas  witnessList é diferente de " + " tokenList")
chamada antiga: assertEquals(witnessList, tokenList)
nova chamada: assertEquals(witnessList, tokenList, "Era esperado valores iguais, mas  witnessList é diferente de " + " tokenList")
chamada antiga: assertEquals(witnessList, tokenList)
nova chamada: assertEquals(witnessList, tokenList, "Era esperado valores iguais, mas  witnessList é diferente de " + " tokenList")
chamada antiga: assertEquals(witnessList, tokenList)
nova chamada: assertEquals(witnessList, tokenList, "Era esperado valores iguais, mas  witnessList é diferente de " + " tokenList")
chamada antiga: assertEquals(witnessList, tokenList)
nova chamada: assertEquals(witnessList, tokenList, "Era esperado valores iguais, mas  witnessList é diferente de " + " tokenList")
chamada antiga: assertEquals(witnessList, tokenList)
nova chamada: assertEquals(witnessList, tokenList, "Era esperado valores iguais, mas  witnessList é diferente de " + " tokenList")
chamada antiga: assertEquals(witnessList, tokenList)
nova chamada: assertEquals(witnessList, tokenList, "Era esperado valores iguais, mas  witnessList é diferente de " + " tokenList")
chamada antiga: assertEquals(witnessList, tokenList)
nova chamada: assertEquals(witnessList, tokenList, "Era esperado valores iguais, mas  witnessList é diferente de " + " tokenList")
chamada antiga: assertEquals(witnessList, tokenList)
nova chamada: assertEquals(witnessList, tokenList, "Era esperado valores iguais, mas  witnessList é diferente de " + " tokenList")
chamada antiga: assertEquals(witnessList, tokenList)
nova chamada: assertEquals(witnessList, tokenList, "Era esperado valores iguais, mas  witnessList é diferente de " + " tokenList")
chamada antiga: Assertions.fail("circular reference should have been caught input=" + input)
nova chamada: fail("circular reference should have been caught input=" + input, "A execução falhou por uma causa deliberada")
chamada antiga: assertEquals(witness, node)
nova chamada: assertEquals(witness, node, "Era esperado valores iguais, mas  witness é diferente de " + " node")
chamada antiga: assertEquals(witness, node)
nova chamada: assertEquals(witness, node, "Era esperado valores iguais, mas  witness é diferente de " + " node")
chamada antiga: assertEquals(witness, node)
nova chamada: assertEquals(witness, node, "Era esperado valores iguais, mas  witness é diferente de " + " node")
chamada antiga: assertEquals(witness, node)
nova chamada: assertEquals(witness, node, "Era esperado valores iguais, mas  witness é diferente de " + " node")
chamada antiga: assertEquals(witness, node)
nova chamada: assertEquals(witness, node, "Era esperado valores iguais, mas  witness é diferente de " + " node")
chamada antiga: assertEquals(witness, node)
nova chamada: assertEquals(witness, node, "Era esperado valores iguais, mas  witness é diferente de " + " node")
chamada antiga: assertEquals(witness, node)
nova chamada: assertEquals(witness, node, "Era esperado valores iguais, mas  witness é diferente de " + " node")

chamada antiga: fail()
nova chamada: fail("A execução falhou por uma causa deliberada")
chamada antiga: assertEquals(witness, node)
nova chamada: assertEquals(witness, node, "Era esperado valores iguais, mas  witness é diferente de " + " node")
chamada antiga: assertEquals(witness, node)
nova chamada: assertEquals(witness, node, "Era esperado valores iguais, mas  witness é diferente de " + " node")
chamada antiga: assertEquals(witness, node)
nova chamada: assertEquals(witness, node, "Era esperado valores iguais, mas  witness é diferente de " + " node")
chamada antiga: Assertions.assertNotNull(status)
nova chamada: assertNotNull(status, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: Assertions.assertNotNull(listener.getWaiter())
nova chamada: assertNotNull(listener.getWaiter(), "Era esperado não nulo, mas " + result344 + " <listener.getWaiter()> é nulo")
chamada antiga: Assertions.assertNotNull(serverSocket)
nova chamada: assertNotNull(serverSocket, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: Assertions.assertNotNull(client)
nova chamada: assertNotNull(client, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(appender.getServerSocketFactory())
nova chamada: assertNotNull(appender.getServerSocketFactory(), "Era esperado não nulo, mas " + result345 + " <appender.getServerSocketFactory()> é nulo")
chamada antiga: Assertions.assertEquals(TEST_EVENT, ois.readObject())
nova chamada: assertEquals(TEST_EVENT, ois.readObject(), "Era esperado valores iguais, mas  TEST_EVENT é diferente de " + result346 + " <ois.readObject()>")
chamada antiga: Assertions.assertEquals(1, runner.getStartCount())
nova chamada: assertEquals(1, runner.getStartCount(), "Era esperado valores iguais, mas  1 é diferente de " + result347 + " <runner.getStartCount()>")
chamada antiga: Assertions.assertEquals(0, runner.getStartCount())
nova chamada: assertEquals(0, runner.getStartCount(), "Era esperado valores iguais, mas  0 é diferente de " + result348 + " <runner.getStartCount()>")
chamada antiga: assertEquals(innocent, back)
nova chamada: assertEquals(innocent, back, "Era esperado valores iguais, mas  innocent é diferente de " + " back")
chamada antiga: assertEquals(SyslogConstants.LOG_KERN, SyslogAppenderBase.facilityStringToint("KERN"))
nova chamada: assertEquals(SyslogConstants.LOG_KERN, SyslogAppenderBase.facilityStringToint("KERN"), "Era esperado valores iguais, mas  SyslogConstants.LOG_KERN é diferente de " + result349 + " <SyslogAppenderBase.facilityStringToint('KERN')>")
chamada antiga: assertEquals(SyslogConstants.LOG_USER, SyslogAppenderBase.facilityStringToint("USER"))
nova chamada: assertEquals(SyslogConstants.LOG_USER, SyslogAppenderBase.facilityStringToint("USER"), "Era esperado valores iguais, mas  SyslogConstants.LOG_USER é diferente de " + result350 + " <SyslogAppenderBase.facilityStringToint('USER')>")
chamada antiga: assertEquals(SyslogConstants.LOG_MAIL, SyslogAppenderBase.facilityStringToint("MAIL"))
nova chamada: assertEquals(SyslogConstants.LOG_MAIL, SyslogAppenderBase.facilityStringToint("MAIL"), "Era esperado valores iguais, mas  SyslogConstants.LOG_MAIL é diferente de " + result351 + " <SyslogAppenderBase.facilityStringToint('MAIL')>")
chamada antiga: assertEquals(SyslogConstants.LOG_DAEMON, SyslogAppenderBase.facilityStringToint("DAEMON"))
nova chamada: assertEquals(SyslogConstants.LOG_DAEMON, SyslogAppenderBase.facilityStringToint("DAEMON"), "Era esperado valores iguais, mas  SyslogConstants.LOG_DAEMON é diferente de " + result352 + " <SyslogAppenderBase.facilityStringToint('DAEMON')>")
chamada antiga: assertEquals(SyslogConstants.LOG_AUTH, SyslogAppenderBase.facilityStringToint("AUTH"))
nova chamada: assertEquals(SyslogConstants.LOG_AUTH, SyslogAppenderBase.facilityStringToint("AUTH"), "Era esperado valores iguais, mas  SyslogConstants.LOG_AUTH é diferente de " + result353 + " <SyslogAppenderBase.facilityStringToint('AUTH')>")
chamada antiga: assertEquals(SyslogConstants.LOG_SYSLOG, SyslogAppenderBase.facilityStringToint("SYSLOG"))
nova chamada: assertEquals(SyslogConstants.LOG_SYSLOG, SyslogAppenderBase.facilityStringToint("SYSLOG"), "Era esperado valores iguais, mas  SyslogConstants.LOG_SYSLOG é diferente de " + result354 + " <SyslogAppenderBase.facilityStringToint('SYSLOG')>")
chamada antiga: assertEquals(SyslogConstants.LOG_LPR, SyslogAppenderBase.facilityStringToint("LPR"))
nova chamada: assertEquals(SyslogConstants.LOG_LPR, SyslogAppenderBase.facilityStringToint("LPR"), "Era esperado valores iguais, mas  SyslogConstants.LOG_LPR é diferente de " + result355 + " <SyslogAppenderBase.facilityStringToint('LPR')>")
chamada antiga: assertEquals(SyslogConstants.LOG_NEWS, SyslogAppenderBase.facilityStringToint("NEWS"))
nova chamada: assertEquals(SyslogConstants.LOG_NEWS, SyslogAppenderBase.facilityStringToint("NEWS"), "Era esperado valores iguais, mas  SyslogConstants.LOG_NEWS é diferente de " + result356 + " <SyslogAppenderBase.facilityStringToint('NEWS')>")
chamada antiga: assertEquals(SyslogConstants.LOG_UUCP, SyslogAppenderBase.facilityStringToint("UUCP"))
nova chamada: assertEquals(SyslogConstants.LOG_UUCP, SyslogAppenderBase.facilityStringToint("UUCP"), "Era esperado valores iguais, mas  SyslogConstants.LOG_UUCP é diferente de " + result357 + " <SyslogAppenderBase.facilityStringToint('UUCP')>")
chamada antiga: assertEquals(SyslogConstants.LOG_CRON, SyslogAppenderBase.facilityStringToint("CRON"))
nova chamada: assertEquals(SyslogConstants.LOG_CRON, SyslogAppenderBase.facilityStringToint("CRON"), "Era esperado valores iguais, mas  SyslogConstants.LOG_CRON é diferente de " + result358 + " <SyslogAppenderBase.facilityStringToint('CRON')>")
chamada antiga: assertEquals(SyslogConstants.LOG_AUTHPRIV, SyslogAppenderBase.facilityStringToint("AUTHPRIV"))
nova chamada: assertEquals(SyslogConstants.LOG_AUTHPRIV, SyslogAppenderBase.facilityStringToint("AUTHPRIV"), "Era esperado valores iguais, mas  SyslogConstants.LOG_AUTHPRIV é diferente de " + result359 + " <SyslogAppenderBase.facilityStringToint('AUTHPRIV')>")
chamada antiga: assertEquals(SyslogConstants.LOG_FTP, SyslogAppenderBase.facilityStringToint("FTP"))
nova chamada: assertEquals(SyslogConstants.LOG_FTP, SyslogAppenderBase.facilityStringToint("FTP"), "Era esperado valores iguais, mas  SyslogConstants.LOG_FTP é diferente de " + result360 + " <SyslogAppenderBase.facilityStringToint('FTP')>")
chamada antiga: assertEquals(SyslogConstants.LOG_NTP, SyslogAppenderBase.facilityStringToint("NTP"))
nova chamada: assertEquals(SyslogConstants.LOG_NTP, SyslogAppenderBase.facilityStringToint("NTP"), "Era esperado valores iguais, mas  SyslogConstants.LOG_NTP é diferente de " + result361 + " <SyslogAppenderBase.facilityStringToint('NTP')>")
chamada antiga: assertEquals(SyslogConstants.LOG_AUDIT, SyslogAppenderBase.facilityStringToint("AUDIT"))
nova chamada: assertEquals(SyslogConstants.LOG_AUDIT, SyslogAppenderBase.facilityStringToint("AUDIT"), "Era esperado valores iguais, mas  SyslogConstants.LOG_AUDIT é diferente de " + result362 + " <SyslogAppenderBase.facilityStringToint('AUDIT')>")
chamada antiga: assertEquals(SyslogConstants.LOG_ALERT, SyslogAppenderBase.facilityStringToint("ALERT"))
nova chamada: assertEquals(SyslogConstants.LOG_ALERT, SyslogAppenderBase.facilityStringToint("ALERT"), "Era esperado valores iguais, mas  SyslogConstants.LOG_ALERT é diferente de " + result363 + " <SyslogAppenderBase.facilityStringToint('ALERT')>")
chamada antiga: assertEquals(SyslogConstants.LOG_CLOCK, SyslogAppenderBase.facilityStringToint("CLOCK"))
nova chamada: assertEquals(SyslogConstants.LOG_CLOCK, SyslogAppenderBase.facilityStringToint("CLOCK"), "Era esperado valores iguais, mas  SyslogConstants.LOG_CLOCK é diferente de " + result364 + " <SyslogAppenderBase.facilityStringToint('CLOCK')>")
chamada antiga: assertEquals(SyslogConstants.LOG_LOCAL0, SyslogAppenderBase.facilityStringToint("LOCAL0"))
nova chamada: assertEquals(SyslogConstants.LOG_LOCAL0, SyslogAppenderBase.facilityStringToint("LOCAL0"), "Era esperado valores iguais, mas  SyslogConstants.LOG_LOCAL0 é diferente de " + result365 + " <SyslogAppenderBase.facilityStringToint('LOCAL0')>")
chamada antiga: assertEquals(SyslogConstants.LOG_LOCAL1, SyslogAppenderBase.facilityStringToint("LOCAL1"))
nova chamada: assertEquals(SyslogConstants.LOG_LOCAL1, SyslogAppenderBase.facilityStringToint("LOCAL1"), "Era esperado valores iguais, mas  SyslogConstants.LOG_LOCAL1 é diferente de " + result366 + " <SyslogAppenderBase.facilityStringToint('LOCAL1')>")
chamada antiga: assertEquals(SyslogConstants.LOG_LOCAL2, SyslogAppenderBase.facilityStringToint("LOCAL2"))
nova chamada: assertEquals(SyslogConstants.LOG_LOCAL2, SyslogAppenderBase.facilityStringToint("LOCAL2"), "Era esperado valores iguais, mas  SyslogConstants.LOG_LOCAL2 é diferente de " + result367 + " <SyslogAppenderBase.facilityStringToint('LOCAL2')>")
chamada antiga: assertEquals(SyslogConstants.LOG_LOCAL3, SyslogAppenderBase.facilityStringToint("LOCAL3"))
nova chamada: assertEquals(SyslogConstants.LOG_LOCAL3, SyslogAppenderBase.facilityStringToint("LOCAL3"), "Era esperado valores iguais, mas  SyslogConstants.LOG_LOCAL3 é diferente de " + result368 + " <SyslogAppenderBase.facilityStringToint('LOCAL3')>")
chamada antiga: assertEquals(SyslogConstants.LOG_LOCAL4, SyslogAppenderBase.facilityStringToint("LOCAL4"))
nova chamada: assertEquals(SyslogConstants.LOG_LOCAL4, SyslogAppenderBase.facilityStringToint("LOCAL4"), "Era esperado valores iguais, mas  SyslogConstants.LOG_LOCAL4 é diferente de " + result369 + " <SyslogAppenderBase.facilityStringToint('LOCAL4')>")
chamada antiga: assertEquals(SyslogConstants.LOG_LOCAL5, SyslogAppenderBase.facilityStringToint("LOCAL5"))
nova chamada: assertEquals(SyslogConstants.LOG_LOCAL5, SyslogAppenderBase.facilityStringToint("LOCAL5"), "Era esperado valores iguais, mas  SyslogConstants.LOG_LOCAL5 é diferente de " + result370 + " <SyslogAppenderBase.facilityStringToint('LOCAL5')>")
chamada antiga: assertEquals(SyslogConstants.LOG_LOCAL6, SyslogAppenderBase.facilityStringToint("LOCAL6"))
nova chamada: assertEquals(SyslogConstants.LOG_LOCAL6, SyslogAppenderBase.facilityStringToint("LOCAL6"), "Era esperado valores iguais, mas  SyslogConstants.LOG_LOCAL6 é diferente de " + result371 + " <SyslogAppenderBase.facilityStringToint('LOCAL6')>")
chamada antiga: assertEquals(SyslogConstants.LOG_LOCAL7, SyslogAppenderBase.facilityStringToint("LOCAL7"))
nova chamada: assertEquals(SyslogConstants.LOG_LOCAL7, SyslogAppenderBase.facilityStringToint("LOCAL7"), "Era esperado valores iguais, mas  SyslogConstants.LOG_LOCAL7 é diferente de " + result372 + " <SyslogAppenderBase.facilityStringToint('LOCAL7')>")
chamada antiga: assertNotNull(configuration.getParameters())
nova chamada: assertNotNull(configuration.getParameters(), "Era esperado não nulo, mas " + result373 + " <configuration.getParameters()> é nulo")
chamada antiga: assertNotNull(factoryBean.createKeyStore())
nova chamada: assertNotNull(factoryBean.createKeyStore(), "Era esperado não nulo, mas " + result374 + " <factoryBean.createKeyStore()> é nulo")
chamada antiga: assertNotNull(factoryBean.createKeyStore())
nova chamada: assertNotNull(factoryBean.createKeyStore(), "Era esperado não nulo, mas " + result375 + " <factoryBean.createKeyStore()> é nulo")
chamada antiga: assertNotNull(factoryBean.createKeyStore())
nova chamada: assertNotNull(factoryBean.createKeyStore(), "Era esperado não nulo, mas " + result376 + " <factoryBean.createKeyStore()> é nulo")
chamada antiga: assertNotNull(factoryBean.createKeyStore())
nova chamada: assertNotNull(factoryBean.createKeyStore(), "Era esperado não nulo, mas " + result377 + " <factoryBean.createKeyStore()> é nulo")
chamada antiga: assertNotNull(factoryBean.createKeyStore())
nova chamada: assertNotNull(factoryBean.createKeyStore(), "Era esperado não nulo, mas " + result378 + " <factoryBean.createKeyStore()> é nulo")
chamada antiga: assertNotNull(factoryBean.createKeyManagerFactory())
nova chamada: assertNotNull(factoryBean.createKeyManagerFactory(), "Era esperado não nulo, mas " + result379 + " <factoryBean.createKeyManagerFactory()> é nulo")
chamada antiga: assertNotNull(factoryBean.createKeyManagerFactory())
nova chamada: assertNotNull(factoryBean.createKeyManagerFactory(), "Era esperado não nulo, mas " + result380 + " <factoryBean.createKeyManagerFactory()> é nulo")
chamada antiga: assertNotNull(factoryBean.createKeyManagerFactory())
nova chamada: assertNotNull(factoryBean.createKeyManagerFactory(), "Era esperado não nulo, mas " + result381 + " <factoryBean.createKeyManagerFactory()> é nulo")
chamada antiga: Assertions.assertTrue(a.isStarted())
nova chamada: assertTrue(a.isStarted(), "Era esperado verdadeiro, mas " + result382 + " <a.isStarted()> é falso")
chamada antiga: Assertions.assertTrue(lingering.isStarted())
nova chamada: assertTrue(lingering.isStarted(), "Era esperado verdadeiro, mas " + result383 + " <lingering.isStarted()> é falso")
chamada antiga: Assertions.assertTrue(a == lingering)
nova chamada: assertTrue(a == lingering, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(lifeCycleManager.isReset())
nova chamada: assertTrue(lifeCycleManager.isReset(), "Era esperado verdadeiro, mas " + result384 + " <lifeCycleManager.isReset()> é falso")
chamada antiga: Assertions.assertTrue(file.exists())
nova chamada: assertTrue(file.exists(), "Era esperado verdadeiro, mas " + result385 + " <file.exists()> é falso")
chamada antiga: Assertions.assertTrue(file.getParentFile().exists())
nova chamada: assertTrue(file.getParentFile().exists(), "Era esperado verdadeiro, mas " + result386 + " <file.getParentFile().exists()> é falso")
chamada antiga: Assertions.assertTrue(file.exists())
nova chamada: assertTrue(file.exists(), "Era esperado verdadeiro, mas " + result387 + " <file.exists()> é falso")
chamada antiga: Assertions.assertTrue(appender.isAppend())
nova chamada: assertTrue(appender.isAppend(), "Era esperado verdadeiro, mas " + result388 + " <appender.isAppend()> é falso")
chamada antiga: Assertions.assertTrue(file.exists())
nova chamada: assertTrue(file.exists(), "Era esperado verdadeiro, mas " + result389 + " <file.exists()> é falso")
chamada antiga: Assertions.assertTrue(appender0.isStarted())
nova chamada: assertTrue(appender0.isStarted(), "Era esperado verdadeiro, mas " + result390 + " <appender0.isStarted()> é falso")
chamada antiga: Assertions.assertTrue(appender.isStarted())
nova chamada: assertTrue(appender.isStarted(), "Era esperado verdadeiro, mas " + result391 + " <appender.isStarted()> é falso")
chamada antiga: Assertions.assertTrue(ca.getOutputStream() instanceof AnsiPrintStream)
nova chamada: assertTrue(ca.getOutputStream() instanceof AnsiPrintStream, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(ca.getOutputStream() instanceof AnsiPrintStream)
nova chamada: assertTrue(ca.getOutputStream() instanceof AnsiPrintStream, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(executor.isTerminated())
nova chamada: assertTrue(executor.isTerminated(), "Era esperado verdadeiro, mas " + result392 + " <executor.isTerminated()> é falso")
chamada antiga: Assertions.assertTrue(runner.isContextInjected())
nova chamada: assertTrue(runner.isContextInjected(), "Era esperado verdadeiro, mas " + result393 + " <runner.isContextInjected()> é falso")
chamada antiga: Assertions.assertTrue(runner.isRunning())
nova chamada: assertTrue(runner.isRunning(), "Era esperado verdadeiro, mas " + result394 + " <runner.isRunning()> é falso")
chamada antiga: Assertions.assertTrue(appender.isStarted())
nova chamada: assertTrue(appender.isStarted(), "Era esperado verdadeiro, mas " + result395 + " <appender.isStarted()> é falso")
chamada antiga: Assertions.assertTrue(status instanceof ErrorStatus)
nova chamada: assertTrue(status instanceof ErrorStatus, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(status.getMessage().contains(ex.getMessage()))
nova chamada: assertTrue(status.getMessage().contains(ex.getMessage()), "Era esperado verdadeiro, mas " + result396 + " <status.getMessage().contains(ex.getMessage())> é falso")
chamada antiga: Assertions.assertTrue(executor.awaitTermination(DELAY, TimeUnit.MILLISECONDS))
nova chamada: assertTrue(executor.awaitTermination(DELAY, TimeUnit.MILLISECONDS), "Era esperado verdadeiro, mas " + result397 + " <executor.awaitTermination(DELAY, TimeUnit.MILLISECONDS)> é falso")
chamada antiga: Assertions.assertTrue(runner.awaitRunState(true, DELAY))
nova chamada: assertTrue(runner.awaitRunState(true, DELAY), "Era esperado verdadeiro, mas " + result398 + " <runner.awaitRunState(true, DELAY)> é falso")
chamada antiga: Assertions.assertTrue(listener.isClosed())
nova chamada: assertTrue(listener.isClosed(), "Era esperado verdadeiro, mas " + result399 + " <listener.isClosed()> é falso")
chamada antiga: Assertions.assertTrue(runner.awaitRunState(true, DELAY))
nova chamada: assertTrue(runner.awaitRunState(true, DELAY), "Era esperado verdadeiro, mas " + result400 + " <runner.awaitRunState(true, DELAY)> é falso")
chamada antiga: Assertions.assertTrue(runner.awaitRunState(true, DELAY))
nova chamada: assertTrue(runner.awaitRunState(true, DELAY), "Era esperado verdadeiro, mas " + result401 + " <runner.awaitRunState(true, DELAY)> é falso")
chamada antiga: Assertions.assertTrue(localClient.isConnected())
nova chamada: assertTrue(localClient.isConnected(), "Era esperado verdadeiro, mas " + result402 + " <localClient.isConnected()> é falso")
chamada antiga: assertTrue(Arrays.equals(new String[] { "A", "B", "C", "D" }, configurable.getEnabledProtocols()))
nova chamada: assertTrue(Arrays.equals(new String[] { "A", "B", "C", "D" }, configurable.getEnabledProtocols()), "Era esperado verdadeiro, mas " + result403 + " <Arrays.equals(new String[] { 'A', 'B', 'C', 'D' }, configurable.getEnabledProtocols())> é falso")
chamada antiga: assertTrue(Arrays.equals(new String[] { "B" }, configurable.getEnabledProtocols()))
nova chamada: assertTrue(Arrays.equals(new String[] { "B" }, configurable.getEnabledProtocols()), "Era esperado verdadeiro, mas " + result404 + " <Arrays.equals(new String[] { 'B' }, configurable.getEnabledProtocols())> é falso")
chamada antiga: assertTrue(Arrays.equals(new String[] { "A" }, configurable.getEnabledProtocols()))
nova chamada: assertTrue(Arrays.equals(new String[] { "A" }, configurable.getEnabledProtocols()), "Era esperado verdadeiro, mas " + result405 + " <Arrays.equals(new String[] { 'A' }, configurable.getEnabledProtocols())> é falso")
chamada antiga: assertTrue(Arrays.equals(new String[] { "A", "B", "C", "D" }, configurable.getEnabledCipherSuites()))
nova chamada: assertTrue(Arrays.equals(new String[] { "A", "B", "C", "D" }, configurable.getEnabledCipherSuites()), "Era esperado verdadeiro, mas " + result406 + " <Arrays.equals(new String[] { 'A', 'B', 'C', 'D' }, configurable.getEnabledCipherSuites())> é falso")
chamada antiga: assertTrue(Arrays.equals(new String[] { "B" }, configurable.getEnabledCipherSuites()))
nova chamada: assertTrue(Arrays.equals(new String[] { "B" }, configurable.getEnabledCipherSuites()), "Era esperado verdadeiro, mas " + result407 + " <Arrays.equals(new String[] { 'B' }, configurable.getEnabledCipherSuites())> é falso")
chamada antiga: assertTrue(Arrays.equals(new String[] { "A" }, configurable.getEnabledCipherSuites()))
nova chamada: assertTrue(Arrays.equals(new String[] { "A" }, configurable.getEnabledCipherSuites()), "Era esperado verdadeiro, mas " + result408 + " <Arrays.equals(new String[] { 'A' }, configurable.getEnabledCipherSuites())> é falso")
chamada antiga: assertTrue(configurable.isNeedClientAuth())
nova chamada: assertTrue(configurable.isNeedClientAuth(), "Era esperado verdadeiro, mas " + result409 + " <configurable.isNeedClientAuth()> é falso")
chamada antiga: assertTrue(configurable.isWantClientAuth())
nova chamada: assertTrue(configurable.isWantClientAuth(), "Era esperado verdadeiro, mas " + result410 + " <configurable.isWantClientAuth()> é falso")
chamada antiga: assertTrue(Arrays.equals(protocols, configurable.getEnabledProtocols()))
nova chamada: assertTrue(Arrays.equals(protocols, configurable.getEnabledProtocols()), "Era esperado verdadeiro, mas " + result411 + " <Arrays.equals(protocols, configurable.getEnabledProtocols())> é falso")
chamada antiga: assertTrue(Arrays.equals(cipherSuites, configurable.getEnabledCipherSuites()))
nova chamada: assertTrue(Arrays.equals(cipherSuites, configurable.getEnabledCipherSuites()), "Era esperado verdadeiro, mas " + result412 + " <Arrays.equals(cipherSuites, configurable.getEnabledCipherSuites())> é falso")
chamada antiga: assertTrue(configurable.isNeedClientAuth())
nova chamada: assertTrue(configurable.isNeedClientAuth(), "Era esperado verdadeiro, mas " + result413 + " <configurable.isNeedClientAuth()> é falso")
chamada antiga: assertTrue(configurable.isWantClientAuth())
nova chamada: assertTrue(configurable.isWantClientAuth(), "Era esperado verdadeiro, mas " + result414 + " <configurable.isWantClientAuth()> é falso")
chamada antiga: assertNotNull(factoryBean.createTrustManagerFactory())
nova chamada: assertNotNull(factoryBean.createTrustManagerFactory(), "Era esperado não nulo, mas " + result415 + " <factoryBean.createTrustManagerFactory()> é nulo")
chamada antiga: assertNotNull(factoryBean.createTrustManagerFactory())
nova chamada: assertNotNull(factoryBean.createTrustManagerFactory(), "Era esperado não nulo, mas " + result416 + " <factoryBean.createTrustManagerFactory()> é nulo")
chamada antiga: assertNotNull(factoryBean.createTrustManagerFactory())
nova chamada: assertNotNull(factoryBean.createTrustManagerFactory(), "Era esperado não nulo, mas " + result417 + " <factoryBean.createTrustManagerFactory()> é nulo")
chamada antiga: assertNotNull(factoryBean.createContext(context))
nova chamada: assertNotNull(factoryBean.createContext(context), "Era esperado não nulo, mas " + result418 + " <factoryBean.createContext(context)> é nulo")
chamada antiga: assertTrue(context.hasInfoMatching(SSL_CONFIGURATION_MESSAGE_PATTERN))
nova chamada: assertTrue(context.hasInfoMatching(SSL_CONFIGURATION_MESSAGE_PATTERN), "Era esperado verdadeiro, mas " + result419 + " <context.hasInfoMatching(SSL_CONFIGURATION_MESSAGE_PATTERN)> é falso")
chamada antiga: assertNotNull(factoryBean.createContext(context))
nova chamada: assertNotNull(factoryBean.createContext(context), "Era esperado não nulo, mas " + result420 + " <factoryBean.createContext(context)> é nulo")
chamada antiga: assertTrue(keyManagerFactory.isFactoryCreated())
nova chamada: assertTrue(keyManagerFactory.isFactoryCreated(), "Era esperado verdadeiro, mas " + result421 + " <keyManagerFactory.isFactoryCreated()> é falso")
chamada antiga: assertTrue(trustManagerFactory.isFactoryCreated())
nova chamada: assertTrue(trustManagerFactory.isFactoryCreated(), "Era esperado verdadeiro, mas " + result422 + " <trustManagerFactory.isFactoryCreated()> é falso")
chamada antiga: assertTrue(keyStore.isKeyStoreCreated())
nova chamada: assertTrue(keyStore.isKeyStoreCreated(), "Era esperado verdadeiro, mas " + result423 + " <keyStore.isKeyStoreCreated()> é falso")
chamada antiga: assertTrue(trustStore.isKeyStoreCreated())
nova chamada: assertTrue(trustStore.isKeyStoreCreated(), "Era esperado verdadeiro, mas " + result424 + " <trustStore.isKeyStoreCreated()> é falso")
chamada antiga: assertTrue(secureRandom.isSecureRandomCreated())
nova chamada: assertTrue(secureRandom.isSecureRandomCreated(), "Era esperado verdadeiro, mas " + result425 + " <secureRandom.isSecureRandomCreated()> é falso")
chamada antiga: assertTrue(context.hasInfoMatching(SSL_CONFIGURATION_MESSAGE_PATTERN))
nova chamada: assertTrue(context.hasInfoMatching(SSL_CONFIGURATION_MESSAGE_PATTERN), "Era esperado verdadeiro, mas " + result426 + " <context.hasInfoMatching(SSL_CONFIGURATION_MESSAGE_PATTERN)> é falso")
chamada antiga: assertTrue(context.hasInfoMatching(KEY_MANAGER_FACTORY_MESSAGE_PATTERN))
nova chamada: assertTrue(context.hasInfoMatching(KEY_MANAGER_FACTORY_MESSAGE_PATTERN), "Era esperado verdadeiro, mas " + result427 + " <context.hasInfoMatching(KEY_MANAGER_FACTORY_MESSAGE_PATTERN)> é falso")
chamada antiga: assertTrue(context.hasInfoMatching(TRUST_MANAGER_FACTORY_MESSAGE_PATTERN))
nova chamada: assertTrue(context.hasInfoMatching(TRUST_MANAGER_FACTORY_MESSAGE_PATTERN), "Era esperado verdadeiro, mas " + result428 + " <context.hasInfoMatching(TRUST_MANAGER_FACTORY_MESSAGE_PATTERN)> é falso")
chamada antiga: assertTrue(context.hasInfoMatching(KEY_STORE_MESSAGE_PATTERN))
nova chamada: assertTrue(context.hasInfoMatching(KEY_STORE_MESSAGE_PATTERN), "Era esperado verdadeiro, mas " + result429 + " <context.hasInfoMatching(KEY_STORE_MESSAGE_PATTERN)> é falso")
chamada antiga: assertTrue(context.hasInfoMatching(TRUST_STORE_MESSAGE_PATTERN))
nova chamada: assertTrue(context.hasInfoMatching(TRUST_STORE_MESSAGE_PATTERN), "Era esperado verdadeiro, mas " + result430 + " <context.hasInfoMatching(TRUST_STORE_MESSAGE_PATTERN)> é falso")
chamada antiga: assertTrue(context.hasInfoMatching(SECURE_RANDOM_MESSAGE_PATTERN))
nova chamada: assertTrue(context.hasInfoMatching(SECURE_RANDOM_MESSAGE_PATTERN), "Era esperado verdadeiro, mas " + result431 + " <context.hasInfoMatching(SECURE_RANDOM_MESSAGE_PATTERN)> é falso")
chamada antiga: Assertions.assertEquals(ois.readObject(), "some event")
nova chamada: assertEquals(ois.readObject(), "some event", "Era esperado valores iguais, mas " + result432 + " <ois.readObject()> é diferente de " + " 'some event'")
chamada antiga: assertEquals(1, cyclicBufferAppender.getLength())
nova chamada: assertEquals(1, cyclicBufferAppender.getLength(), "Era esperado valores iguais, mas  1 é diferente de " + result433 + " <cyclicBufferAppender.getLength()>")
chamada antiga: assertEquals(0, cyclicBufferAppender.getLength())
nova chamada: assertEquals(0, cyclicBufferAppender.getLength(), "Era esperado valores iguais, mas  0 é diferente de " + result434 + " <cyclicBufferAppender.getLength()>")
chamada antiga: assertEquals("Some string", foo)
nova chamada: assertEquals("Some string", foo, "Era esperado valores iguais, mas  'Some string' é diferente de " + " foo")
chamada antiga: Assertions.assertFalse(a.isStarted())
nova chamada: assertFalse(a.isStarted(), "Era esperado falso, mas " + result435 + " <a.isStarted()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(a.isStarted())
nova chamada: assertFalse(a.isStarted(), "Era esperado falso, mas " + result436 + " <a.isStarted()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(a.isStarted())
nova chamada: assertFalse(a.isStarted(), "Era esperado falso, mas " + result437 + " <a.isStarted()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(appenderList.get(0).isStarted())
nova chamada: assertFalse(appenderList.get(0).isStarted(), "Era esperado falso, mas " + result438 + " <appenderList.get(0).isStarted()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(appenderList.get(0).isStarted())
nova chamada: assertFalse(appenderList.get(0).isStarted(), "Era esperado falso, mas " + result439 + " <appenderList.get(0).isStarted()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(file.getParentFile().exists())
nova chamada: assertFalse(file.getParentFile().exists(), "Era esperado falso, mas " + result440 + " <file.getParentFile().exists()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(file.exists())
nova chamada: assertFalse(file.exists(), "Era esperado falso, mas " + result441 + " <file.exists()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(appender1.isStarted())
nova chamada: assertFalse(appender1.isStarted(), "Era esperado falso, mas " + result442 + " <appender1.isStarted()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(appender.isStarted())
nova chamada: assertFalse(appender.isStarted(), "Era esperado falso, mas " + result443 + " <appender.isStarted()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(appender.isStarted())
nova chamada: assertFalse(appender.isStarted(), "Era esperado falso, mas " + result444 + " <appender.isStarted()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(teeOut.isClosed())
nova chamada: assertFalse(teeOut.isClosed(), "Era esperado falso, mas " + result445 + " <teeOut.isClosed()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(thread.isAlive())
nova chamada: assertFalse(thread.isAlive(), "Era esperado falso, mas " + result446 + " <thread.isAlive()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(thread.isAlive())
nova chamada: assertFalse(thread.isAlive(), "Era esperado falso, mas " + result447 + " <thread.isAlive()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(runner.isRunning())
nova chamada: assertFalse(runner.isRunning(), "Era esperado falso, mas " + result448 + " <runner.isRunning()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(runner.isRunning())
nova chamada: assertFalse(runner.isRunning(), "Era esperado falso, mas " + result449 + " <runner.isRunning()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(runner.awaitRunState(false, DELAY))
nova chamada: assertFalse(runner.awaitRunState(false, DELAY), "Era esperado falso, mas " + result450 + " <runner.awaitRunState(false, DELAY)> é verdadeiro ")
chamada antiga: Assertions.assertTrue(connectorTask.isDone())
nova chamada: assertTrue(connectorTask.isDone(), "Era esperado verdadeiro, mas " + result451 + " <connectorTask.isDone()> é falso")
chamada antiga: Assertions.assertTrue(lastException instanceof ConnectException)
nova chamada: assertTrue(lastException instanceof ConnectException, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertFalse(connectorTask.isDone())
nova chamada: assertFalse(connectorTask.isDone(), "Era esperado falso, mas " + result452 + " <connectorTask.isDone()> é verdadeiro ")
chamada antiga: Assertions.assertTrue(connectorTask.isCancelled())
nova chamada: assertTrue(connectorTask.isCancelled(), "Era esperado verdadeiro, mas " + result453 + " <connectorTask.isCancelled()> é falso")
chamada antiga: Assertions.assertTrue(lastException instanceof ConnectException)
nova chamada: assertTrue(lastException instanceof ConnectException, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertFalse(connectorTask.isCancelled())
nova chamada: assertFalse(connectorTask.isCancelled(), "Era esperado falso, mas " + result454 + " <connectorTask.isCancelled()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(instrumentedAppender.isStarted())
nova chamada: assertFalse(instrumentedAppender.isStarted(), "Era esperado falso, mas " + result455 + " <instrumentedAppender.isStarted()> é verdadeiro ")
chamada antiga: Assertions.assertTrue(executorService.awaitTermination(TIMEOUT, TimeUnit.MILLISECONDS))
nova chamada: assertTrue(executorService.awaitTermination(TIMEOUT, TimeUnit.MILLISECONDS), "Era esperado verdadeiro, mas " + result456 + " <executorService.awaitTermination(TIMEOUT, TimeUnit.MILLISECONDS)> é falso")
chamada antiga: assertTrue(rc.isTooSoon())
nova chamada: assertTrue(rc.isTooSoon(), "Era esperado verdadeiro, mas " + result457 + " <rc.isTooSoon()> é falso")
chamada antiga: assertTrue(rc.isTooSoon())
nova chamada: assertTrue(rc.isTooSoon(), "Era esperado verdadeiro, mas " + result458 + " <rc.isTooSoon()> é falso")
chamada antiga: assertFalse(rc.isTooSoon())
nova chamada: assertFalse(rc.isTooSoon(), "Era esperado falso, mas " + result459 + " <rc.isTooSoon()> é verdadeiro ")
chamada antiga: assertTrue(rc.isTooSoon())
nova chamada: assertTrue(rc.isTooSoon(), "Era esperado verdadeiro, mas " + result460 + " <rc.isTooSoon()> é falso")
chamada antiga: assertFalse(rc.isTooSoon())
nova chamada: assertFalse(rc.isTooSoon(), "Era esperado falso, mas " + result461 + " <rc.isTooSoon()> é verdadeiro ")
chamada antiga: assertTrue(statusChecker.isErrorFree(0))
nova chamada: assertTrue(statusChecker.isErrorFree(0), "Era esperado verdadeiro, mas " + result462 + " <statusChecker.isErrorFree(0)> é falso")
chamada antiga: assertEquals(0, statusChecker.matchCount("Parent of target file ." + target + ". is null"))
nova chamada: assertEquals(0, statusChecker.matchCount("Parent of target file ." + target + ". is null"), "Era esperado valores iguais, mas  0 é diferente de " + result463 + " <statusChecker.matchCount('Parent of target file .' + target + '. is null')>")
chamada antiga: assertTrue(statusChecker.isErrorFree(0))
nova chamada: assertTrue(statusChecker.isErrorFree(0), "Era esperado verdadeiro, mas " + result464 + " <statusChecker.isErrorFree(0)> é falso")
chamada antiga: assertEquals(2, result)
nova chamada: assertEquals(2, result, "Era esperado valores iguais, mas  2 é diferente de " + " result")
chamada antiga: assertEquals(expectedCount, fileList.size())
nova chamada: assertEquals(expectedCount, fileList.size(), "Era esperado valores iguais, mas  expectedCount é diferente de " + result465 + " <fileList.size()>")
chamada antiga: assertEquals(expectedClassCount, set.size())
nova chamada: assertEquals(expectedClassCount, set.size(), "Era esperado valores iguais, mas  expectedClassCount é diferente de " + result466 + " <set.size()>")
chamada antiga: assertEquals(expectedClassCount, fileList.size())
nova chamada: assertEquals(expectedClassCount, fileList.size(), "Era esperado valores iguais, mas  expectedClassCount é diferente de " + result467 + " <fileList.size()>")
chamada antiga: Assertions.assertTrue(rfa.isAppend())
nova chamada: assertTrue(rfa.isAppend(), "Era esperado verdadeiro, mas " + result468 + " <rfa.isAppend()> é falso")
chamada antiga: Assertions.assertTrue(rfa.isStarted())
nova chamada: assertTrue(rfa.isStarted(), "Era esperado verdadeiro, mas " + result469 + " <rfa.isStarted()> é falso")
chamada antiga: Assertions.assertEquals(Status.ERROR, checker.getHighestLevel(0))
nova chamada: assertEquals(Status.ERROR, checker.getHighestLevel(0), "Era esperado valores iguais, mas  Status.ERROR é diferente de " + result470 + " <checker.getHighestLevel(0)>")
chamada antiga: Assertions.assertTrue(tbrp.isStarted())
nova chamada: assertTrue(tbrp.isStarted(), "Era esperado verdadeiro, mas " + result471 + " <tbrp.isStarted()> é falso")
chamada antiga: Assertions.assertTrue(rfa.isStarted())
nova chamada: assertTrue(rfa.isStarted(), "Era esperado verdadeiro, mas " + result472 + " <rfa.isStarted()> é falso")
chamada antiga: Assertions.assertTrue(fwRollingPolicy.isStarted())
nova chamada: assertTrue(fwRollingPolicy.isStarted(), "Era esperado verdadeiro, mas " + result473 + " <fwRollingPolicy.isStarted()> é falso")
chamada antiga: Assertions.assertTrue(sbTriggeringPolicy.isStarted())
nova chamada: assertTrue(sbTriggeringPolicy.isStarted(), "Era esperado verdadeiro, mas " + result474 + " <sbTriggeringPolicy.isStarted()> é falso")
chamada antiga: Assertions.assertTrue(rfa.isStarted())
nova chamada: assertTrue(rfa.isStarted(), "Era esperado verdadeiro, mas " + result475 + " <rfa.isStarted()> é falso")
chamada antiga: Assertions.assertEquals(Status.ERROR, checker.getHighestLevel(0))
nova chamada: assertEquals(Status.ERROR, checker.getHighestLevel(0), "Era esperado valores iguais, mas  Status.ERROR é diferente de " + result476 + " <checker.getHighestLevel(0)>")
chamada antiga: Assertions.assertTrue(appender0.isStarted())
nova chamada: assertTrue(appender0.isStarted(), "Era esperado verdadeiro, mas " + result477 + " <appender0.isStarted()> é falso")
chamada antiga: assertEquals(witnessList, stringList)
nova chamada: assertEquals(witnessList, stringList, "Era esperado valores iguais, mas  witnessList é diferente de " + " stringList")
chamada antiga: Assertions.assertNull(appenderTracker.find(key))
nova chamada: assertNull(appenderTracker.find(key), "Era esperado nulo, mas " + result478 + " <appenderTracker.find(key)> não é nulo")
chamada antiga: Assertions.assertNull(appenderTracker.find(key))
nova chamada: assertNull(appenderTracker.find(key), "Era esperado nulo, mas " + result479 + " <appenderTracker.find(key)> não é nulo")
chamada antiga: Assertions.assertNull(appenderTracker.find(key))
nova chamada: assertNull(appenderTracker.find(key), "Era esperado nulo, mas " + result480 + " <appenderTracker.find(key)> não é nulo")
chamada antiga: Assertions.assertNull(a)
nova chamada: assertNull(a, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: Assertions.assertNull(a)
nova chamada: assertNull(a, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: Assertions.assertNull(appenderTracker.find(key + "-" + 0))
nova chamada: assertNull(appenderTracker.find(key + "-" + 0), "Era esperado nulo, mas " + result481 + " <appenderTracker.find(key + '-' + 0)> não é nulo")
chamada antiga: Assertions.assertNull(appenderTracker.find(key + "-" + 0))
nova chamada: assertNull(appenderTracker.find(key + "-" + 0), "Era esperado nulo, mas " + result482 + " <appenderTracker.find(key + '-' + 0)> não é nulo")
chamada antiga: Assertions.assertNull(context.getProperty("keyA"))
nova chamada: assertNull(context.getProperty("keyA"), "Era esperado nulo, mas " + result483 + " <context.getProperty('keyA')> não é nulo")
chamada antiga: Assertions.assertNull(context.getObject("keyA"))
nova chamada: assertNull(context.getObject("keyA"), "Era esperado nulo, mas " + result484 + " <context.getObject('keyA')> não é nulo")
chamada antiga: Assertions.assertNull(context.getProperty(CoreConstants.CONTEXT_NAME_KEY))
nova chamada: assertNull(context.getProperty(CoreConstants.CONTEXT_NAME_KEY), "Era esperado nulo, mas " + result485 + " <context.getProperty(CoreConstants.CONTEXT_NAME_KEY)> não é nulo")
chamada antiga: Assertions.assertNotNull(factoryBean.createSecureRandom())
nova chamada: assertNotNull(factoryBean.createSecureRandom(), "Era esperado não nulo, mas " + result486 + " <factoryBean.createSecureRandom()> é nulo")
chamada antiga: Assertions.assertNotNull(factoryBean.createSecureRandom())
nova chamada: assertNotNull(factoryBean.createSecureRandom(), "Era esperado não nulo, mas " + result487 + " <factoryBean.createSecureRandom()> é nulo")
chamada antiga: Assertions.assertNotNull(socket)
nova chamada: assertNotNull(socket, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: Assertions.assertNotNull(lastException)
nova chamada: assertNotNull(lastException, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: Assertions.assertNotNull(socket)
nova chamada: assertNotNull(socket, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: Assertions.assertNotNull(appender.getSocketFactory())
nova chamada: assertNotNull(appender.getSocketFactory(), "Era esperado não nulo, mas " + result488 + " <appender.getSocketFactory()> é nulo")
chamada antiga: Assertions.assertNull(rfa.rawFileProperty())
nova chamada: assertNull(rfa.rawFileProperty(), "Era esperado nulo, mas " + result489 + " <rfa.rawFileProperty()> não é nulo")
chamada antiga: assertEquals("t", pp.convertInt(3))
nova chamada: assertEquals("t", pp.convertInt(3), "Era esperado valores iguais, mas  't' é diferente de " + result490 + " <pp.convertInt(3)>")
chamada antiga: assertEquals("foo", pp.convertInt(3))
nova chamada: assertEquals("foo", pp.convertInt(3), "Era esperado valores iguais, mas  'foo' é diferente de " + result491 + " <pp.convertInt(3)>")
chamada antiga: assertEquals("3 foo", pp.convertInt(3))
nova chamada: assertEquals("3 foo", pp.convertInt(3), "Era esperado valores iguais, mas  '3 foo' é diferente de " + result492 + " <pp.convertInt(3)>")
chamada antiga: assertEquals("foo3.xixo", pp.convertInt(3))
nova chamada: assertEquals("foo3.xixo", pp.convertInt(3), "Era esperado valores iguais, mas  'foo3.xixo' é diferente de " + result493 + " <pp.convertInt(3)>")
chamada antiga: assertEquals("foo3.log", pp.convertInt(3))
nova chamada: assertEquals("foo3.log", pp.convertInt(3), "Era esperado valores iguais, mas  'foo3.log' é diferente de " + result494 + " <pp.convertInt(3)>")
chamada antiga: assertEquals("foo.3.log", pp.convertInt(3))
nova chamada: assertEquals("foo.3.log", pp.convertInt(3), "Era esperado valores iguais, mas  'foo.3.log' é diferente de " + result495 + " <pp.convertInt(3)>")
chamada antiga: assertEquals("foo.003.log", pp.convertInt(3))
nova chamada: assertEquals("foo.003.log", pp.convertInt(3), "Era esperado valores iguais, mas  'foo.003.log' é diferente de " + result496 + " <pp.convertInt(3)>")
chamada antiga: assertEquals("foo.43.log", pp.convertInt(43))
nova chamada: assertEquals("foo.43.log", pp.convertInt(43), "Era esperado valores iguais, mas  'foo.43.log' é diferente de " + result497 + " <pp.convertInt(43)>")
chamada antiga: assertEquals("foo2003.05.20", pp.convert(cal.getTime()))
nova chamada: assertEquals("foo2003.05.20", pp.convert(cal.getTime()), "Era esperado valores iguais, mas  'foo2003.05.20' é diferente de " + result498 + " <pp.convert(cal.getTime())>")
chamada antiga: assertEquals("foo2003.05.20 17:55", pp.convert(cal.getTime()))
nova chamada: assertEquals("foo2003.05.20 17:55", pp.convert(cal.getTime()), "Era esperado valores iguais, mas  'foo2003.05.20 17:55' é diferente de " + result499 + " <pp.convert(cal.getTime())>")
chamada antiga: assertEquals("2003.05.20 17:55 foo", pp.convert(cal.getTime()))
nova chamada: assertEquals("2003.05.20 17:55 foo", pp.convert(cal.getTime()), "Era esperado valores iguais, mas  '2003.05.20 17:55 foo' é diferente de " + result500 + " <pp.convert(cal.getTime())>")
chamada antiga: assertEquals("foo2003-05-20T18:55", fnp.convert(cal.getTime()))
nova chamada: assertEquals("foo2003-05-20T18:55", fnp.convert(cal.getTime()), "Era esperado valores iguais, mas  'foo2003-05-20T18:55' é diferente de " + result501 + " <fnp.convert(cal.getTime())>")
chamada antiga: assertEquals("c:/foo/bar.3", pp.convertInt(3))
nova chamada: assertEquals("c:/foo/bar.3", pp.convertInt(3), "Era esperado valores iguais, mas  'c:/foo/bar.3' é diferente de " + result502 + " <pp.convertInt(3)>")
chamada antiga: assertEquals("foo-2003.05.20-79.txt", fnp.convertMultipleArguments(cal.getTime(), 79))
nova chamada: assertEquals("foo-2003.05.20-79.txt", fnp.convertMultipleArguments(cal.getTime(), 79), "Era esperado valores iguais, mas  'foo-2003.05.20-79.txt' é diferente de " + result503 + " <fnp.convertMultipleArguments(cal.getTime(), 79)>")
chamada antiga: assertEquals("foo-2003.05/2003.05.20.txt", fnp.convert(cal.getTime()))
nova chamada: assertEquals("foo-2003.05/2003.05.20.txt", fnp.convert(cal.getTime()), "Era esperado valores iguais, mas  'foo-2003.05/2003.05.20.txt' é diferente de " + result504 + " <fnp.convert(cal.getTime())>")
chamada antiga: assertNull(fnp.getPrimaryDateTokenConverter().getZoneId())
nova chamada: assertNull(fnp.getPrimaryDateTokenConverter().getZoneId(), "Era esperado nulo, mas " + result505 + " <fnp.getPrimaryDateTokenConverter().getZoneId()> não é nulo")
chamada antiga: assertEquals(tz, fnp.getPrimaryDateTokenConverter().getZoneId())
nova chamada: assertEquals(tz, fnp.getPrimaryDateTokenConverter().getZoneId(), "Era esperado valores iguais, mas  tz é diferente de " + result506 + " <fnp.getPrimaryDateTokenConverter().getZoneId()>")
chamada antiga: Assertions.assertFalse(rfa.isStarted())
nova chamada: assertFalse(rfa.isStarted(), "Era esperado falso, mas " + result507 + " <rfa.isStarted()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(rfa.isStarted())
nova chamada: assertFalse(rfa.isStarted(), "Era esperado falso, mas " + result508 + " <rfa.isStarted()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(tbrp.isStarted())
nova chamada: assertFalse(tbrp.isStarted(), "Era esperado falso, mas " + result509 + " <tbrp.isStarted()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(rfa.isStarted())
nova chamada: assertFalse(rfa.isStarted(), "Era esperado falso, mas " + result510 + " <rfa.isStarted()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(fwRollingPolicy.isStarted())
nova chamada: assertFalse(fwRollingPolicy.isStarted(), "Era esperado falso, mas " + result511 + " <fwRollingPolicy.isStarted()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(sbTriggeringPolicy.isStarted())
nova chamada: assertFalse(sbTriggeringPolicy.isStarted(), "Era esperado falso, mas " + result512 + " <sbTriggeringPolicy.isStarted()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(rfa.isStarted())
nova chamada: assertFalse(rfa.isStarted(), "Era esperado falso, mas " + result513 + " <rfa.isStarted()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(appender1.isStarted())
nova chamada: assertFalse(appender1.isStarted(), "Era esperado falso, mas " + result514 + " <appender1.isStarted()> é verdadeiro ")
chamada antiga: Assertions.assertTrue(checker.isErrorFree(0))
nova chamada: assertTrue(checker.isErrorFree(0), "Era esperado verdadeiro, mas " + result515 + " <checker.isErrorFree(0)> é falso")
chamada antiga: Assertions.assertTrue(Compare.gzCompare(CoreTestConstants.OUTPUT_DIR_PREFIX + "compress1.txt.gz", CoreTestConstants.TEST_SRC_PREFIX + "witness/compress1.txt.gz"))
nova chamada: assertTrue(Compare.gzCompare(CoreTestConstants.OUTPUT_DIR_PREFIX + "compress1.txt.gz", CoreTestConstants.TEST_SRC_PREFIX + "witness/compress1.txt.gz"), "Era esperado verdadeiro, mas " + result516 + " <Compare.gzCompare(CoreTestConstants.OUTPUT_DIR_PREFIX + 'compress1.txt.gz', CoreTestConstants.TEST_SRC_PREFIX + 'witness/compress1.txt.gz')> é falso")
chamada antiga: Assertions.assertTrue(checker.isErrorFree(0))
nova chamada: assertTrue(checker.isErrorFree(0), "Era esperado verdadeiro, mas " + result517 + " <checker.isErrorFree(0)> é falso")
chamada antiga: Assertions.assertTrue(Compare.gzCompare(CoreTestConstants.OUTPUT_DIR_PREFIX + "compress2.txt.gz", CoreTestConstants.TEST_SRC_PREFIX + "witness/compress2.txt.gz"))
nova chamada: assertTrue(Compare.gzCompare(CoreTestConstants.OUTPUT_DIR_PREFIX + "compress2.txt.gz", CoreTestConstants.TEST_SRC_PREFIX + "witness/compress2.txt.gz"), "Era esperado verdadeiro, mas " + result518 + " <Compare.gzCompare(CoreTestConstants.OUTPUT_DIR_PREFIX + 'compress2.txt.gz', CoreTestConstants.TEST_SRC_PREFIX + 'witness/compress2.txt.gz')> é falso")
chamada antiga: Assertions.assertTrue(checker.isErrorFree(0))
nova chamada: assertTrue(checker.isErrorFree(0), "Era esperado verdadeiro, mas " + result519 + " <checker.isErrorFree(0)> é falso")
chamada antiga: assertTrue(FileStoreUtil.areOnSameFileStore(parent, file))
nova chamada: assertTrue(FileStoreUtil.areOnSameFileStore(parent, file), "Era esperado verdadeiro, mas " + result520 + " <FileStoreUtil.areOnSameFileStore(parent, file)> é falso")
chamada antiga: assertFalse(FileStoreUtil.areOnSameFileStore(c, d))
nova chamada: assertFalse(FileStoreUtil.areOnSameFileStore(c, d), "Era esperado falso, mas " + result521 + " <FileStoreUtil.areOnSameFileStore(c, d)> é verdadeiro ")
chamada antiga: assertArrayEquals(expected, fileArray)
nova chamada: assertArrayEquals(expected, fileArray, "Era esperado arrays iguais, mas  expected é diferente de " + " fileArray")
chamada antiga: assertArrayEquals(expected, fileArray)
nova chamada: assertArrayEquals(expected, fileArray, "Era esperado arrays iguais, mas  expected é diferente de " + " fileArray")
chamada antiga: assertNotNull(map)
nova chamada: assertNotNull(map, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(map.get(key))
nova chamada: assertNotNull(map.get(key), "Era esperado não nulo, mas " + result522 + " <map.get(key)> é nulo")
chamada antiga: assertNotNull(map)
nova chamada: assertNotNull(map, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(map.get(key))
nova chamada: assertNull(map.get(key), "Era esperado nulo, mas " + result523 + " <map.get(key)> não é nulo")
chamada antiga: assertFalse(rfa1.isStarted())
nova chamada: assertFalse(rfa1.isStarted(), "Era esperado falso, mas " + result524 + " <rfa1.isStarted()> é verdadeiro ")
chamada antiga: assertFalse(rfa1.isStarted())
nova chamada: assertFalse(rfa1.isStarted(), "Era esperado falso, mas " + result525 + " <rfa1.isStarted()> é verdadeiro ")
chamada antiga: assertTrue(Compare.compare(lastFile, witnessFileName))
nova chamada: assertTrue(Compare.compare(lastFile, witnessFileName), "Era esperado verdadeiro, mas " + result526 + " <Compare.compare(lastFile, witnessFileName)> é falso")
chamada antiga: Assertions.assertTrue(triggerred)
nova chamada: assertTrue(triggerred, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(triggerred)
nova chamada: assertTrue(triggerred, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertFalse(tbrp.isStarted())
nova chamada: assertFalse(tbrp.isStarted(), "Era esperado falso, mas " + result527 + " <tbrp.isStarted()> é verdadeiro ")
chamada antiga: Assertions.assertTrue(asyncAppenderBase.isStarted())
nova chamada: assertTrue(asyncAppenderBase.isStarted(), "Era esperado verdadeiro, mas " + result528 + " <asyncAppenderBase.isStarted()> é falso")
chamada antiga: Assertions.assertFalse(asyncAppenderBase.isStarted())
nova chamada: assertFalse(asyncAppenderBase.isStarted(), "Era esperado falso, mas " + result529 + " <asyncAppenderBase.isStarted()> é verdadeiro ")
chamada antiga: Assertions.assertTrue(delayingListAppender.interrupted)
nova chamada: assertTrue(delayingListAppender.interrupted, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertFalse(asyncAppenderBase.isStarted())
nova chamada: assertFalse(asyncAppenderBase.isStarted(), "Era esperado falso, mas " + result530 + " <asyncAppenderBase.isStarted()> é verdadeiro ")
chamada antiga: Assertions.assertTrue(Thread.currentThread().isInterrupted())
nova chamada: assertTrue(Thread.currentThread().isInterrupted(), "Era esperado verdadeiro, mas " + result531 + " <Thread.currentThread().isInterrupted()> é falso")
chamada antiga: Assertions.assertTrue(Thread.currentThread().isInterrupted())
nova chamada: assertTrue(Thread.currentThread().isInterrupted(), "Era esperado verdadeiro, mas " + result532 + " <Thread.currentThread().isInterrupted()> é falso")
chamada antiga: Assertions.assertTrue(Thread.currentThread().isInterrupted())
nova chamada: assertTrue(Thread.currentThread().isInterrupted(), "Era esperado verdadeiro, mas " + result533 + " <Thread.currentThread().isInterrupted()> é falso")
chamada antiga: Assertions.assertFalse(Thread.currentThread().isInterrupted())
nova chamada: assertFalse(Thread.currentThread().isInterrupted(), "Era esperado falso, mas " + result534 + " <Thread.currentThread().isInterrupted()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(asyncAppenderBase.worker.isInterrupted())
nova chamada: assertFalse(asyncAppenderBase.worker.isInterrupted(), "Era esperado falso, mas " + result535 + " <asyncAppenderBase.worker.isInterrupted()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(la.isStarted())
nova chamada: assertFalse(la.isStarted(), "Era esperado falso, mas " + result536 + " <la.isStarted()> é verdadeiro ")
chamada antiga: assertFalse(file.getParentFile().exists())
nova chamada: assertFalse(file.getParentFile().exists(), "Era esperado falso, mas " + result537 + " <file.getParentFile().exists()> é verdadeiro ")
chamada antiga: assertTrue(FileUtil.createMissingParentDirectories(file))
nova chamada: assertTrue(FileUtil.createMissingParentDirectories(file), "Era esperado verdadeiro, mas " + result538 + " <FileUtil.createMissingParentDirectories(file)> é falso")
chamada antiga: assertTrue(file.getParentFile().exists())
nova chamada: assertTrue(file.getParentFile().exists(), "Era esperado verdadeiro, mas " + result539 + " <file.getParentFile().exists()> é falso")
chamada antiga: assertFalse(file.getParentFile().exists())
nova chamada: assertFalse(file.getParentFile().exists(), "Era esperado falso, mas " + result540 + " <file.getParentFile().exists()> é verdadeiro ")
chamada antiga: assertTrue(FileUtil.createMissingParentDirectories(file))
nova chamada: assertTrue(FileUtil.createMissingParentDirectories(file), "Era esperado verdadeiro, mas " + result541 + " <FileUtil.createMissingParentDirectories(file)> é falso")
chamada antiga: assertTrue(file.getParentFile().exists())
nova chamada: assertTrue(file.getParentFile().exists(), "Era esperado verdadeiro, mas " + result542 + " <file.getParentFile().exists()> é falso")
chamada antiga: assertTrue(file.getParentFile().exists())
nova chamada: assertTrue(file.getParentFile().exists(), "Era esperado verdadeiro, mas " + result543 + " <file.getParentFile().exists()> é falso")
chamada antiga: assertTrue(FileUtil.createMissingParentDirectories(file))
nova chamada: assertTrue(FileUtil.createMissingParentDirectories(file), "Era esperado verdadeiro, mas " + result544 + " <FileUtil.createMissingParentDirectories(file)> é falso")
chamada antiga: assertTrue(FileUtil.createMissingParentDirectories(file))
nova chamada: assertTrue(FileUtil.createMissingParentDirectories(file), "Era esperado verdadeiro, mas " + result545 + " <FileUtil.createMissingParentDirectories(file)> é falso")
chamada antiga: Assertions.assertEquals(count, rc.periodBarriersCrossed(start, end))
nova chamada: assertEquals(count, rc.periodBarriersCrossed(start, end), "Era esperado valores iguais, mas  count é diferente de " + result546 + " <rc.periodBarriersCrossed(start, end)>")
chamada antiga: Assertions.assertEquals(1, rc.periodBarriersCrossed(start, end))
nova chamada: assertEquals(1, rc.periodBarriersCrossed(start, end), "Era esperado valores iguais, mas  1 é diferente de " + result547 + " <rc.periodBarriersCrossed(start, end)>")
chamada antiga: Assertions.assertEquals(1, rc.periodBarriersCrossed(start, end))
nova chamada: assertEquals(1, rc.periodBarriersCrossed(start, end), "Era esperado valores iguais, mas  1 é diferente de " + result548 + " <rc.periodBarriersCrossed(start, end)>")
chamada antiga: Assertions.assertEquals(1, rc.periodBarriersCrossed(start, end))
nova chamada: assertEquals(1, rc.periodBarriersCrossed(start, end), "Era esperado valores iguais, mas  1 é diferente de " + result549 + " <rc.periodBarriersCrossed(start, end)>")
chamada antiga: Assertions.assertEquals(1, rc.periodBarriersCrossed(start, end))
nova chamada: assertEquals(1, rc.periodBarriersCrossed(start, end), "Era esperado valores iguais, mas  1 é diferente de " + result550 + " <rc.periodBarriersCrossed(start, end)>")
chamada antiga: Assertions.assertEquals(SUCCESSFUL_EXIT_CODE, exitCode)
nova chamada: assertEquals(SUCCESSFUL_EXIT_CODE, exitCode, "Era esperado valores iguais, mas  SUCCESSFUL_EXIT_CODE é diferente de " + " exitCode")
chamada antiga: Assertions.assertEquals("foo-2011-12T59.log", elapsedPeriodsFileName)
nova chamada: assertEquals("foo-2011-12T59.log", elapsedPeriodsFileName, "Era esperado valores iguais, mas  'foo-2011-12T59.log' é diferente de " + " elapsedPeriodsFileName")
chamada antiga: Assertions.assertEquals("foo-2011-12/59.log", elapsedPeriodsFileName)
nova chamada: assertEquals("foo-2011-12/59.log", elapsedPeriodsFileName, "Era esperado valores iguais, mas  'foo-2011-12/59.log' é diferente de " + " elapsedPeriodsFileName")
chamada antiga: Assertions.assertEquals("foo-2011-12-20.log", elapsedPeriodsFileName)
nova chamada: assertEquals("foo-2011-12-20.log", elapsedPeriodsFileName, "Era esperado valores iguais, mas  'foo-2011-12-20.log' é diferente de " + " elapsedPeriodsFileName")
chamada antiga: Assertions.assertEquals(AppenderBase.ALLOWED_REPEATS, statusChecker.matchCount("Appender \\[bad\\] failed to append."))
nova chamada: assertEquals(AppenderBase.ALLOWED_REPEATS, statusChecker.matchCount("Appender \\[bad\\] failed to append."), "Era esperado valores iguais, mas  AppenderBase.ALLOWED_REPEATS é diferente de " + result551 + " <statusChecker.matchCount('Appender \\[bad\\] failed to append.')>")
chamada antiga: Assertions.assertEquals(0, asyncAppenderBase.getQueueSize())
nova chamada: assertEquals(0, asyncAppenderBase.getQueueSize(), "Era esperado valores iguais, mas  0 é diferente de " + result552 + " <asyncAppenderBase.getQueueSize()>")
chamada antiga: Assertions.assertEquals(loopLen, asyncAppenderBase.getNumberOfElementsInQueue())
nova chamada: assertEquals(loopLen, asyncAppenderBase.getNumberOfElementsInQueue(), "Era esperado valores iguais, mas  loopLen é diferente de " + result553 + " <asyncAppenderBase.getNumberOfElementsInQueue()>")
chamada antiga: Assertions.assertEquals(0, la.list.size())
nova chamada: assertEquals(0, la.list.size(), "Era esperado valores iguais, mas  0 é diferente de " + result554 + " <la.list.size()>")
chamada antiga: Assertions.assertEquals(0, asyncAppenderBase.getNumberOfElementsInQueue())
nova chamada: assertEquals(0, asyncAppenderBase.getNumberOfElementsInQueue(), "Era esperado valores iguais, mas  0 é diferente de " + result555 + " <asyncAppenderBase.getNumberOfElementsInQueue()>")
chamada antiga: Assertions.assertEquals(4, EnvUtil.getJDKVersion("1.4.xx"))
nova chamada: assertEquals(4, EnvUtil.getJDKVersion("1.4.xx"), "Era esperado valores iguais, mas  4 é diferente de " + result556 + " <EnvUtil.getJDKVersion('1.4.xx')>")
chamada antiga: Assertions.assertEquals(5, EnvUtil.getJDKVersion("1.5"))
nova chamada: assertEquals(5, EnvUtil.getJDKVersion("1.5"), "Era esperado valores iguais, mas  5 é diferente de " + result557 + " <EnvUtil.getJDKVersion('1.5')>")
chamada antiga: Assertions.assertEquals(5, EnvUtil.getJDKVersion("1.5.xx"))
nova chamada: assertEquals(5, EnvUtil.getJDKVersion("1.5.xx"), "Era esperado valores iguais, mas  5 é diferente de " + result558 + " <EnvUtil.getJDKVersion('1.5.xx')>")
chamada antiga: Assertions.assertEquals(5, EnvUtil.getJDKVersion("1.5AA"))
nova chamada: assertEquals(5, EnvUtil.getJDKVersion("1.5AA"), "Era esperado valores iguais, mas  5 é diferente de " + result559 + " <EnvUtil.getJDKVersion('1.5AA')>")
chamada antiga: Assertions.assertEquals(9, EnvUtil.getJDKVersion("9EA"))
nova chamada: assertEquals(9, EnvUtil.getJDKVersion("9EA"), "Era esperado valores iguais, mas  9 é diferente de " + result560 + " <EnvUtil.getJDKVersion('9EA')>")
chamada antiga: Assertions.assertEquals(9, EnvUtil.getJDKVersion("9.0.1"))
nova chamada: assertEquals(9, EnvUtil.getJDKVersion("9.0.1"), "Era esperado valores iguais, mas  9 é diferente de " + result561 + " <EnvUtil.getJDKVersion('9.0.1')>")
chamada antiga: Assertions.assertEquals(18, EnvUtil.getJDKVersion("18.3+xx"))
nova chamada: assertEquals(18, EnvUtil.getJDKVersion("18.3+xx"), "Era esperado valores iguais, mas  18 é diferente de " + result562 + " <EnvUtil.getJDKVersion('18.3+xx')>")
chamada antiga: Assertions.assertFalse(EnvUtil.isJDK5())
nova chamada: assertFalse(EnvUtil.isJDK5(), "Era esperado falso, mas " + result563 + " <EnvUtil.isJDK5()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(EnvUtil.isJDK6OrHigher())
nova chamada: assertFalse(EnvUtil.isJDK6OrHigher(), "Era esperado falso, mas " + result564 + " <EnvUtil.isJDK6OrHigher()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(EnvUtil.isJDK7OrHigher())
nova chamada: assertFalse(EnvUtil.isJDK7OrHigher(), "Era esperado falso, mas " + result565 + " <EnvUtil.isJDK7OrHigher()> é verdadeiro ")
chamada antiga: Assertions.assertTrue(EnvUtil.isJDK5())
nova chamada: assertTrue(EnvUtil.isJDK5(), "Era esperado verdadeiro, mas " + result566 + " <EnvUtil.isJDK5()> é falso")
chamada antiga: Assertions.assertFalse(EnvUtil.isJDK6OrHigher())
nova chamada: assertFalse(EnvUtil.isJDK6OrHigher(), "Era esperado falso, mas " + result567 + " <EnvUtil.isJDK6OrHigher()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(EnvUtil.isJDK7OrHigher())
nova chamada: assertFalse(EnvUtil.isJDK7OrHigher(), "Era esperado falso, mas " + result568 + " <EnvUtil.isJDK7OrHigher()> é verdadeiro ")
chamada antiga: Assertions.assertTrue(EnvUtil.isJDK5())
nova chamada: assertTrue(EnvUtil.isJDK5(), "Era esperado verdadeiro, mas " + result569 + " <EnvUtil.isJDK5()> é falso")
chamada antiga: Assertions.assertFalse(EnvUtil.isJDK6OrHigher())
nova chamada: assertFalse(EnvUtil.isJDK6OrHigher(), "Era esperado falso, mas " + result570 + " <EnvUtil.isJDK6OrHigher()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(EnvUtil.isJDK7OrHigher())
nova chamada: assertFalse(EnvUtil.isJDK7OrHigher(), "Era esperado falso, mas " + result571 + " <EnvUtil.isJDK7OrHigher()> é verdadeiro ")
chamada antiga: Assertions.assertTrue(EnvUtil.isJDK5())
nova chamada: assertTrue(EnvUtil.isJDK5(), "Era esperado verdadeiro, mas " + result572 + " <EnvUtil.isJDK5()> é falso")
chamada antiga: Assertions.assertTrue(EnvUtil.isJDK6OrHigher())
nova chamada: assertTrue(EnvUtil.isJDK6OrHigher(), "Era esperado verdadeiro, mas " + result573 + " <EnvUtil.isJDK6OrHigher()> é falso")
chamada antiga: Assertions.assertFalse(EnvUtil.isJDK7OrHigher())
nova chamada: assertFalse(EnvUtil.isJDK7OrHigher(), "Era esperado falso, mas " + result574 + " <EnvUtil.isJDK7OrHigher()> é verdadeiro ")
chamada antiga: Assertions.assertTrue(EnvUtil.isJDK5())
nova chamada: assertTrue(EnvUtil.isJDK5(), "Era esperado verdadeiro, mas " + result575 + " <EnvUtil.isJDK5()> é falso")
chamada antiga: Assertions.assertTrue(EnvUtil.isJDK6OrHigher())
nova chamada: assertTrue(EnvUtil.isJDK6OrHigher(), "Era esperado verdadeiro, mas " + result576 + " <EnvUtil.isJDK6OrHigher()> é falso")
chamada antiga: Assertions.assertTrue(EnvUtil.isJDK7OrHigher())
nova chamada: assertTrue(EnvUtil.isJDK7OrHigher(), "Era esperado verdadeiro, mas " + result577 + " <EnvUtil.isJDK7OrHigher()> é falso")
chamada antiga: Assertions.assertTrue(EnvUtil.isJDK5())
nova chamada: assertTrue(EnvUtil.isJDK5(), "Era esperado verdadeiro, mas " + result578 + " <EnvUtil.isJDK5()> é falso")
chamada antiga: Assertions.assertTrue(EnvUtil.isJDK6OrHigher())
nova chamada: assertTrue(EnvUtil.isJDK6OrHigher(), "Era esperado verdadeiro, mas " + result579 + " <EnvUtil.isJDK6OrHigher()> é falso")
chamada antiga: Assertions.assertTrue(EnvUtil.isJDK7OrHigher())
nova chamada: assertTrue(EnvUtil.isJDK7OrHigher(), "Era esperado verdadeiro, mas " + result580 + " <EnvUtil.isJDK7OrHigher()> é falso")
chamada antiga: Assertions.assertTrue(EnvUtil.isJDK5())
nova chamada: assertTrue(EnvUtil.isJDK5(), "Era esperado verdadeiro, mas " + result581 + " <EnvUtil.isJDK5()> é falso")
chamada antiga: Assertions.assertTrue(EnvUtil.isJDK6OrHigher())
nova chamada: assertTrue(EnvUtil.isJDK6OrHigher(), "Era esperado verdadeiro, mas " + result582 + " <EnvUtil.isJDK6OrHigher()> é falso")
chamada antiga: Assertions.assertTrue(EnvUtil.isJDK7OrHigher())
nova chamada: assertTrue(EnvUtil.isJDK7OrHigher(), "Era esperado verdadeiro, mas " + result583 + " <EnvUtil.isJDK7OrHigher()> é falso")
chamada antiga: Assertions.assertTrue(EnvUtil.isJDK5())
nova chamada: assertTrue(EnvUtil.isJDK5(), "Era esperado verdadeiro, mas " + result584 + " <EnvUtil.isJDK5()> é falso")
chamada antiga: Assertions.assertTrue(EnvUtil.isJDK6OrHigher())
nova chamada: assertTrue(EnvUtil.isJDK6OrHigher(), "Era esperado verdadeiro, mas " + result585 + " <EnvUtil.isJDK6OrHigher()> é falso")
chamada antiga: Assertions.assertTrue(EnvUtil.isJDK7OrHigher())
nova chamada: assertTrue(EnvUtil.isJDK7OrHigher(), "Era esperado verdadeiro, mas " + result586 + " <EnvUtil.isJDK7OrHigher()> é falso")
chamada antiga: Assertions.assertEquals(18, EnvUtil.getJDKVersion("18.3+xx"))
nova chamada: assertEquals(18, EnvUtil.getJDKVersion("18.3+xx"), "Era esperado valores iguais, mas  18 é diferente de " + result587 + " <EnvUtil.getJDKVersion('18.3+xx')>")
chamada antiga: Assertions.assertTrue(EnvUtil.isJDK5())
nova chamada: assertTrue(EnvUtil.isJDK5(), "Era esperado verdadeiro, mas " + result588 + " <EnvUtil.isJDK5()> é falso")
chamada antiga: Assertions.assertTrue(EnvUtil.isJDK6OrHigher())
nova chamada: assertTrue(EnvUtil.isJDK6OrHigher(), "Era esperado verdadeiro, mas " + result589 + " <EnvUtil.isJDK6OrHigher()> é falso")
chamada antiga: Assertions.assertTrue(EnvUtil.isJDK7OrHigher())
nova chamada: assertTrue(EnvUtil.isJDK7OrHigher(), "Era esperado verdadeiro, mas " + result590 + " <EnvUtil.isJDK7OrHigher()> é falso")
chamada antiga: assertEquals(1, results[0])
nova chamada: assertEquals(1, results[0], "Era esperado valores iguais, mas  1 é diferente de " + " results[0]")
chamada antiga: assertEquals(2, results[1])
nova chamada: assertEquals(2, results[1], "Era esperado valores iguais, mas  2 é diferente de " + " results[1]")
chamada antiga: assertEquals(3, results[0])
nova chamada: assertEquals(3, results[0], "Era esperado valores iguais, mas  3 é diferente de " + " results[0]")
chamada antiga: assertEquals(3, results[1])
nova chamada: assertEquals(3, results[1], "Era esperado valores iguais, mas  3 é diferente de " + " results[1]")
chamada antiga: assertTrue(gate.isTooSoon(0))
nova chamada: assertTrue(gate.isTooSoon(0), "Era esperado verdadeiro, mas " + result591 + " <gate.isTooSoon(0)> é falso")
chamada antiga: assertFalse(gate.isTooSoon(0))
nova chamada: assertFalse(gate.isTooSoon(0), "Era esperado falso, mas " + result592 + " <gate.isTooSoon(0)> é verdadeiro ")
chamada antiga: assertTrue(gate.getMask() > DEFAULT_MASK)
nova chamada: assertTrue(gate.getMask() > DEFAULT_MASK, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertFalse(gate.isTooSoon(currentTime))
nova chamada: assertFalse(gate.isTooSoon(currentTime), "Era esperado falso, mas " + result593 + " <gate.isTooSoon(currentTime)> é verdadeiro ")
chamada antiga: assertTrue(gate.getMask() < currentMask)
nova chamada: assertTrue(gate.getMask() < currentMask, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(0, gate.getMask())
nova chamada: assertEquals(0, gate.getMask(), "Era esperado valores iguais, mas  0 é diferente de " + result594 + " <gate.getMask()>")
chamada antiga: assertFalse(gate.isTooSoon(currentTime))
nova chamada: assertFalse(gate.isTooSoon(currentTime), "Era esperado falso, mas " + result595 + " <gate.isTooSoon(currentTime)> é verdadeiro ")
chamada antiga: fail("circular reference should have been caught input=" + input, "A execução falhou por uma causa deliberada")
nova chamada: fail("circular reference should have been caught input=" + input, "A execução falhou por uma causa deliberada", "A execução falhou por uma causa deliberada")
chamada antiga: fail("A execução falhou por uma causa deliberada")
nova chamada: fail("A execução falhou por uma causa deliberada", "A execução falhou por uma causa deliberada")
chamada antiga: Assertions.assertEquals("html", ContentTypeUtil.getSubType(contextType))
nova chamada: assertEquals("html", ContentTypeUtil.getSubType(contextType), "Era esperado valores iguais, mas  'html' é diferente de " + result596 + " <ContentTypeUtil.getSubType(contextType)>")
chamada antiga: assertEquals(noSubst, result)
nova chamada: assertEquals(noSubst, result, "Era esperado valores iguais, mas  noSubst é diferente de " + " result")
chamada antiga: assertEquals("axyz" + OptionHelper._IS_UNDEFINED, result)
nova chamada: assertEquals("axyz" + OptionHelper._IS_UNDEFINED, result, "Era esperado valores iguais, mas  'axyz' + OptionHelper._IS_UNDEFINED é diferente de " + " result")
chamada antiga: assertEquals(expected, result)
nova chamada: assertEquals(expected, result, "Era esperado valores iguais, mas  expected é diferente de " + " result")
chamada antiga: assertEquals(expected, result)
nova chamada: assertEquals(expected, result, "Era esperado valores iguais, mas  expected é diferente de " + " result")
chamada antiga: assertEquals(resultWithDefault, result)
nova chamada: assertEquals(resultWithDefault, result, "Era esperado valores iguais, mas  resultWithDefault é diferente de " + " result")
chamada antiga: assertEquals(expected, result)
nova chamada: assertEquals(expected, result, "Era esperado valores iguais, mas  expected é diferente de " + " result")
chamada antiga: assertEquals(expected, result)
nova chamada: assertEquals(expected, result, "Era esperado valores iguais, mas  expected é diferente de " + " result")
chamada antiga: assertEquals("logs/archive/LOGBACK_trace_archive.log", result)
nova chamada: assertEquals("logs/archive/LOGBACK_trace_archive.log", result, "Era esperado valores iguais, mas  'logs/archive/LOGBACK_trace_archive.log' é diferente de " + " result")
chamada antiga: assertEquals(expectedMessage, e.getMessage())
nova chamada: assertEquals(expectedMessage, e.getMessage(), "Era esperado valores iguais, mas  expectedMessage é diferente de " + result597 + " <e.getMessage()>")
chamada antiga: assertEquals("B1-value and C1-value and B1-value", result)
nova chamada: assertEquals("B1-value and C1-value and B1-value", result, "Era esperado valores iguais, mas  'B1-value and C1-value and B1-value' é diferente de " + " result")
chamada antiga: assertEquals(expectedMessage, e.getMessage())
nova chamada: assertEquals(expectedMessage, e.getMessage(), "Era esperado valores iguais, mas  expectedMessage é diferente de " + result598 + " <e.getMessage()>")
chamada antiga: assertEquals(expectedMessage, e.getMessage())
nova chamada: assertEquals(expectedMessage, e.getMessage(), "Era esperado valores iguais, mas  expectedMessage é diferente de " + result599 + " <e.getMessage()>")
chamada antiga: assertEquals(expectedMessage, e.getMessage())
nova chamada: assertEquals(expectedMessage, e.getMessage(), "Era esperado valores iguais, mas  expectedMessage é diferente de " + result600 + " <e.getMessage()>")
chamada antiga: assertEquals(expectedMessage, e.getMessage())
nova chamada: assertEquals(expectedMessage, e.getMessage(), "Era esperado valores iguais, mas  expectedMessage é diferente de " + result601 + " <e.getMessage()>")
chamada antiga: assertEquals(expectedMessage, e.getMessage())
nova chamada: assertEquals(expectedMessage, e.getMessage(), "Era esperado valores iguais, mas  expectedMessage é diferente de " + result602 + " <e.getMessage()>")
chamada antiga: assertEquals(expectedMessage, e.getMessage())
nova chamada: assertEquals(expectedMessage, e.getMessage(), "Era esperado valores iguais, mas  expectedMessage é diferente de " + result603 + " <e.getMessage()>")
chamada antiga: assertEquals(expectedMessage, e.getMessage())
nova chamada: assertEquals(expectedMessage, e.getMessage(), "Era esperado valores iguais, mas  expectedMessage é diferente de " + result604 + " <e.getMessage()>")
chamada antiga: assertEquals(expectedMessage, e.getMessage())
nova chamada: assertEquals(expectedMessage, e.getMessage(), "Era esperado valores iguais, mas  expectedMessage é diferente de " + result605 + " <e.getMessage()>")
chamada antiga: assertEquals(expectedMessage, e.getMessage())
nova chamada: assertEquals(expectedMessage, e.getMessage(), "Era esperado valores iguais, mas  expectedMessage é diferente de " + result606 + " <e.getMessage()>")
chamada antiga: assertEquals(expectedMessage, e.getMessage())
nova chamada: assertEquals(expectedMessage, e.getMessage(), "Era esperado valores iguais, mas  expectedMessage é diferente de " + result607 + " <e.getMessage()>")
chamada antiga: assertEquals("k1", result)
nova chamada: assertEquals("k1", result, "Era esperado valores iguais, mas  'k1' é diferente de " + " result")
chamada antiga: assertEquals("jackrabbit/log/jackrabbit.log", r)
nova chamada: assertEquals("jackrabbit/log/jackrabbit.log", r, "Era esperado valores iguais, mas  'jackrabbit/log/jackrabbit.log' é diferente de " + " r")
chamada antiga: assertEquals(expectedMessage, e.getMessage())
nova chamada: assertEquals(expectedMessage, e.getMessage(), "Era esperado valores iguais, mas  expectedMessage é diferente de " + result608 + " <e.getMessage()>")
chamada antiga: assertEquals(prefix + suffix, r)
nova chamada: assertEquals(prefix + suffix, r, "Era esperado valores iguais, mas  prefix + suffix é diferente de " + " r")
chamada antiga: fail("A execução falhou por uma causa deliberada", "A execução falhou por uma causa deliberada")
nova chamada: fail("A execução falhou por uma causa deliberada", "A execução falhou por uma causa deliberada", "A execução falhou por uma causa deliberada")
chamada antiga: fail("Should aNot yet implemented")
nova chamada: fail("Should aNot yet implemented", "A execução falhou por uma causa deliberada")
chamada antiga: Assertions.assertEquals(expected - now, 478)
nova chamada: assertEquals(expected - now, 478, "Era esperado valores iguais, mas  expected - now é diferente de " + " 478")
chamada antiga: Assertions.assertEquals(expected, computed)
nova chamada: assertEquals(expected, computed, "Era esperado valores iguais, mas  expected é diferente de " + " computed")
chamada antiga: Assertions.assertEquals(expected - now, 1000 * 42 + 478)
nova chamada: assertEquals(expected - now, 1000 * 42 + 478, "Era esperado valores iguais, mas  expected - now é diferente de " + " 1000 * 42 + 478")
chamada antiga: Assertions.assertEquals(expected, computed)
nova chamada: assertEquals(expected, computed, "Era esperado valores iguais, mas  expected é diferente de " + " computed")
chamada antiga: Assertions.assertEquals(expected - now, 1000 * (42 + 60 * 54) + 478)
nova chamada: assertEquals(expected - now, 1000 * (42 + 60 * 54) + 478, "Era esperado valores iguais, mas  expected - now é diferente de " + " 1000 * (42 + 60 * 54) + 478")
chamada antiga: Assertions.assertEquals(expected, computed)
nova chamada: assertEquals(expected, computed, "Era esperado valores iguais, mas  expected é diferente de " + " computed")
chamada antiga: Assertions.assertEquals(expected - now, 1000 * (3600 * 5 + 60 * 54 + 42) + 478)
nova chamada: assertEquals(expected - now, 1000 * (3600 * 5 + 60 * 54 + 42) + 478, "Era esperado valores iguais, mas  expected - now é diferente de " + " 1000 * (3600 * 5 + 60 * 54 + 42) + 478")
chamada antiga: Assertions.assertEquals(expected, computed)
nova chamada: assertEquals(expected, computed, "Era esperado valores iguais, mas  expected é diferente de " + " computed")
chamada antiga: Assertions.assertEquals(expected - now, 1000 * (3600 * (5 + 24 * (5 + dayOffset)) + 60 * 54 + 42) + 478)
nova chamada: assertEquals(expected - now, 1000 * (3600 * (5 + 24 * (5 + dayOffset)) + 60 * 54 + 42) + 478, "Era esperado valores iguais, mas  expected - now é diferente de " + " 1000 * (3600 * (5 + 24 * (5 + dayOffset)) + 60 * 54 + 42) + 478")
chamada antiga: Assertions.assertEquals(expected, computed)
nova chamada: assertEquals(expected, computed, "Era esperado valores iguais, mas  expected é diferente de " + " computed")
chamada antiga: Assertions.assertEquals(expected - now, 1000 * (3600 * (5 + 24 * 10) + 60 * 54 + 42) + 478)
nova chamada: assertEquals(expected - now, 1000 * (3600 * (5 + 24 * 10) + 60 * 54 + 42) + 478, "Era esperado valores iguais, mas  expected - now é diferente de " + " 1000 * (3600 * (5 + 24 * 10) + 60 * 54 + 42) + 478")
chamada antiga: Assertions.assertEquals(expected, computed)
nova chamada: assertEquals(expected, computed, "Era esperado valores iguais, mas  expected é diferente de " + " computed")
chamada antiga: Assertions.assertTrue(ContentTypeUtil.isTextual(contextType))
nova chamada: assertTrue(ContentTypeUtil.isTextual(contextType), "Era esperado verdadeiro, mas " + result609 + " <ContentTypeUtil.isTextual(contextType)> é falso")
chamada antiga: Assertions.assertTrue(ContentTypeUtil.isTextual(contextType))
nova chamada: assertTrue(ContentTypeUtil.isTextual(contextType), "Era esperado verdadeiro, mas " + result610 + " <ContentTypeUtil.isTextual(contextType)> é falso")
chamada antiga: assertTrue(values.contains("A"))
nova chamada: assertTrue(values.contains("A"), "Era esperado verdadeiro, mas " + result611 + " <values.contains('A')> é falso")
chamada antiga: assertTrue(values.contains("A"))
nova chamada: assertTrue(values.contains("A"), "Era esperado verdadeiro, mas " + result612 + " <values.contains('A')> é falso")
chamada antiga: assertTrue(values.isEmpty())
nova chamada: assertTrue(values.isEmpty(), "Era esperado verdadeiro, mas " + result613 + " <values.isEmpty()> é falso")
chamada antiga: assertTrue(values.contains("A"))
nova chamada: assertTrue(values.contains("A"), "Era esperado verdadeiro, mas " + result614 + " <values.contains('A')> é falso")
chamada antiga: assertTrue(values.isEmpty())
nova chamada: assertTrue(values.isEmpty(), "Era esperado verdadeiro, mas " + result615 + " <values.isEmpty()> é falso")
chamada antiga: assertTrue(values.contains("A"))
nova chamada: assertTrue(values.contains("A"), "Era esperado verdadeiro, mas " + result616 + " <values.contains('A')> é falso")
chamada antiga: assertTrue(result.contains("|-INFO in " + this.getClass().getName()))
nova chamada: assertTrue(result.contains("|-INFO in " + this.getClass().getName()), "Era esperado verdadeiro, mas " + result617 + " <result.contains('|-INFO in ' + this.getClass().getName())> é falso")
chamada antiga: assertTrue(result.contains("+ INFO in " + this.getClass().getName()))
nova chamada: assertTrue(result.contains("+ INFO in " + this.getClass().getName()), "Era esperado verdadeiro, mas " + result618 + " <result.contains('+ INFO in ' + this.getClass().getName())> é falso")
chamada antiga: assertTrue(result.contains("+ WARN in " + this.getClass().getName()))
nova chamada: assertTrue(result.contains("+ WARN in " + this.getClass().getName()), "Era esperado verdadeiro, mas " + result619 + " <result.contains('+ WARN in ' + this.getClass().getName())> é falso")
chamada antiga: assertTrue(result.contains("    |-WARN in " + this.getClass().getName()))
nova chamada: assertTrue(result.contains("    |-WARN in " + this.getClass().getName()), "Era esperado verdadeiro, mas " + result620 + " <result.contains('    |-WARN in ' + this.getClass().getName())> é falso")
chamada antiga: assertTrue(result.contains("|-ERROR in " + this.getClass().getName()))
nova chamada: assertTrue(result.contains("|-ERROR in " + this.getClass().getName()), "Era esperado verdadeiro, mas " + result621 + " <result.contains('|-ERROR in ' + this.getClass().getName())> é falso")
chamada antiga: assertTrue(result.contains("+ INFO in " + this.getClass().getName()))
nova chamada: assertTrue(result.contains("+ INFO in " + this.getClass().getName()), "Era esperado verdadeiro, mas " + result622 + " <result.contains('+ INFO in ' + this.getClass().getName())> é falso")
chamada antiga: assertTrue(result.contains("ch.qos.logback.core.util.StatusPrinterTest.testWithException"))
nova chamada: assertTrue(result.contains("ch.qos.logback.core.util.StatusPrinterTest.testWithException"), "Era esperado verdadeiro, mas " + result623 + " <result.contains('ch.qos.logback.core.util.StatusPrinterTest.testWithException')> é falso")
chamada antiga: assertArrayEquals(new Integer[] { 1 }, result)
nova chamada: assertArrayEquals(new Integer[] { 1 }, result, "Era esperado arrays iguais, mas  new Integer[] { 1 } é diferente de " + " result")
chamada antiga: assertArrayEquals(new Integer[] { 1 }, result)
nova chamada: assertArrayEquals(new Integer[] { 1 }, result, "Era esperado arrays iguais, mas  new Integer[] { 1 } é diferente de " + " result")
chamada antiga: assertArrayEquals(new Integer[] { 1 }, result)
nova chamada: assertArrayEquals(new Integer[] { 1 }, result, "Era esperado arrays iguais, mas  new Integer[] { 1 } é diferente de " + " result")
chamada antiga: assertEquals("2015-03-26T17:49", result)
nova chamada: assertEquals("2015-03-26T17:49", result, "Era esperado valores iguais, mas  '2015-03-26T17:49' é diferente de " + " result")
chamada antiga: Assertions.assertNull(ContentTypeUtil.getSubType(contextType))
nova chamada: assertNull(ContentTypeUtil.getSubType(contextType), "Era esperado nulo, mas " + result624 + " <ContentTypeUtil.getSubType(contextType)> não é nulo")
chamada antiga: Assertions.assertNull(ContentTypeUtil.getSubType(contextType))
nova chamada: assertNull(ContentTypeUtil.getSubType(contextType), "Era esperado nulo, mas " + result625 + " <ContentTypeUtil.getSubType(contextType)> não é nulo")
chamada antiga: Assertions.assertNull(x)
nova chamada: assertNull(x, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(imh.extractStem(null))
nova chamada: assertNull(imh.extractStem(null), "Era esperado nulo, mas " + result626 + " <imh.extractStem(null)> não é nulo")
chamada antiga: assertNull(imh.extractStem(""))
nova chamada: assertNull(imh.extractStem(""), "Era esperado nulo, mas " + result627 + " <imh.extractStem('')> não é nulo")
chamada antiga: assertNull(imh.extractStem("bla."))
nova chamada: assertNull(imh.extractStem("bla."), "Era esperado nulo, mas " + result628 + " <imh.extractStem('bla.')> não é nulo")
chamada antiga: assertEquals("Foo", imh.extractStem("bla.Foo"))
nova chamada: assertEquals("Foo", imh.extractStem("bla.Foo"), "Era esperado valores iguais, mas  'Foo' é diferente de " + result629 + " <imh.extractStem('bla.Foo')>")
chamada antiga: assertEquals("Foo", imh.extractStem("com.titi.bla.Foo"))
nova chamada: assertEquals("Foo", imh.extractStem("com.titi.bla.Foo"), "Era esperado valores iguais, mas  'Foo' é diferente de " + result630 + " <imh.extractStem('com.titi.bla.Foo')>")
chamada antiga: assertEquals(0, listAppender.list.size())
nova chamada: assertEquals(0, listAppender.list.size(), "Era esperado valores iguais, mas  0 é diferente de " + result631 + " <listAppender.list.size()>")
chamada antiga: assertEquals(1, listAppender.list.size())
nova chamada: assertEquals(1, listAppender.list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result632 + " <listAppender.list.size()>")
chamada antiga: assertEquals(HELLO, event.getMessage())
nova chamada: assertEquals(HELLO, event.getMessage(), "Era esperado valores iguais, mas  HELLO é diferente de " + result633 + " <event.getMessage()>")
chamada antiga: assertEquals(0, listAppender.list.size())
nova chamada: assertEquals(0, listAppender.list.size(), "Era esperado valores iguais, mas  0 é diferente de " + result634 + " <listAppender.list.size()>")
chamada antiga: assertEquals(0, listAppender.list.size())
nova chamada: assertEquals(0, listAppender.list.size(), "Era esperado valores iguais, mas  0 é diferente de " + result635 + " <listAppender.list.size()>")
chamada antiga: assertEquals(1, listAppender.list.size())
nova chamada: assertEquals(1, listAppender.list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result636 + " <listAppender.list.size()>")
chamada antiga: assertEquals(HELLO, event.getMessage())
nova chamada: assertEquals(HELLO, event.getMessage(), "Era esperado valores iguais, mas  HELLO é diferente de " + result637 + " <event.getMessage()>")
chamada antiga: assertEquals(1, listAppender.stringList.size())
nova chamada: assertEquals(1, listAppender.stringList.size(), "Era esperado valores iguais, mas  1 é diferente de " + result638 + " <listAppender.stringList.size()>")
chamada antiga: assertEquals("TRACE [" + Log4jInvocation.class.getName() + "] basic-test - Hello", listAppender.stringList.get(0))
nova chamada: assertEquals("TRACE [" + Log4jInvocation.class.getName() + "] basic-test - Hello", listAppender.stringList.get(0), "Era esperado valores iguais, mas  'TRACE [' + Log4jInvocation.class.getName() + '] basic-test - Hello' é diferente de " + result639 + " <listAppender.stringList.get(0)>")
chamada antiga: Assertions.assertSame(component, lifeCycleManager.getLastComponent())
nova chamada: assertSame(component, lifeCycleManager.getLastComponent(), "Era esperado objetos iguais, mas  component é diferente de " + result640 + " <lifeCycleManager.getLastComponent()>")
chamada antiga: Assertions.assertSame(listener, appender.getLastListener())
nova chamada: assertSame(listener, appender.getLastListener(), "Era esperado objetos iguais, mas  listener é diferente de " + result641 + " <appender.getLastListener()>")
chamada antiga: Assertions.assertSame(ex, status.getThrowable())
nova chamada: assertSame(ex, status.getThrowable(), "Era esperado objetos iguais, mas  ex é diferente de " + result642 + " <status.getThrowable()>")
chamada antiga: Assertions.assertSame(client, visitor.getLastVisited())
nova chamada: assertSame(client, visitor.getLastVisited(), "Era esperado objetos iguais, mas  client é diferente de " + result643 + " <visitor.getLastVisited()>")
chamada antiga: fail("Should aNot yet implemented", "A execução falhou por uma causa deliberada")
nova chamada: fail("Should aNot yet implemented", "A execução falhou por uma causa deliberada", "A execução falhou por uma causa deliberada")
chamada antiga: assertTrue(mbl.exists("iBundle"))
nova chamada: assertTrue(mbl.exists("iBundle"), "Era esperado verdadeiro, mas " + result644 + " <mbl.exists('iBundle')> é falso")
chamada antiga: assertEquals(0, fel.errorList.size())
nova chamada: assertEquals(0, fel.errorList.size(), "Era esperado valores iguais, mas  0 é diferente de " + result645 + " <fel.errorList.size()>")
chamada antiga: assertEquals(0, tee.baos.size())
nova chamada: assertEquals(0, tee.baos.size(), "Era esperado valores iguais, mas  0 é diferente de " + result646 + " <tee.baos.size()>")
chamada antiga: assertEquals(EVENT_COUNT.get(), events.size())
nova chamada: assertEquals(EVENT_COUNT.get(), events.size(), "Era esperado valores iguais, mas " + result647 + " <EVENT_COUNT.get()> é diferente de " + result648 + " <events.size()>")
chamada antiga: assertNotNull(la)
nova chamada: assertNotNull(la, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: Assertions.assertFalse(ContentTypeUtil.isTextual(contextType))
nova chamada: assertFalse(ContentTypeUtil.isTextual(contextType), "Era esperado falso, mas " + result649 + " <ContentTypeUtil.isTextual(contextType)> é verdadeiro ")
chamada antiga: assertNotNull(evalMap)
nova chamada: assertNotNull(evalMap, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(evaluator)
nova chamada: assertNotNull(evaluator, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(evaluator.evaluate(event0))
nova chamada: assertTrue(evaluator.evaluate(event0), "Era esperado verdadeiro, mas " + result650 + " <evaluator.evaluate(event0)> é falso")
chamada antiga: assertFalse(evaluator.evaluate(event1))
nova chamada: assertFalse(evaluator.evaluate(event1), "Era esperado falso, mas " + result651 + " <evaluator.evaluate(event1)> é verdadeiro ")
chamada antiga: assertNotNull(evalMap)
nova chamada: assertNotNull(evalMap, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(evaluator.evaluate(event))
nova chamada: assertTrue(evaluator.evaluate(event), "Era esperado verdadeiro, mas " + result652 + " <evaluator.evaluate(event)> é falso")
chamada antiga: assertTrue(ee.evaluate(event))
nova chamada: assertTrue(ee.evaluate(event), "Era esperado verdadeiro, mas " + result653 + " <ee.evaluate(event)> é falso")
chamada antiga: assertNotNull(listAppender)
nova chamada: assertNotNull(listAppender, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(0, listAppender.list.size())
nova chamada: assertEquals(0, listAppender.list.size(), "Era esperado valores iguais, mas  0 é diferente de " + result654 + " <listAppender.list.size()>")
chamada antiga: assertEquals(1, listAppender.list.size())
nova chamada: assertEquals(1, listAppender.list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result655 + " <listAppender.list.size()>")
chamada antiga: assertEquals(msg, le.getMessage())
nova chamada: assertEquals(msg, le.getMessage(), "Era esperado valores iguais, mas  msg é diferente de " + result656 + " <le.getMessage()>")
chamada antiga: assertNotNull(asyncAppender)
nova chamada: assertNotNull(asyncAppender, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(console)
nova chamada: assertNotNull(console, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(console.isStarted())
nova chamada: assertTrue(console.isStarted(), "Era esperado verdadeiro, mas " + result657 + " <console.isStarted()> é falso")
chamada antiga: assertNotNull(listAppender)
nova chamada: assertNotNull(listAppender, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(0, listAppender.list.size())
nova chamada: assertEquals(0, listAppender.list.size(), "Era esperado valores iguais, mas  0 é diferente de " + result658 + " <listAppender.list.size()>")
chamada antiga: assertEquals(1, listAppender.list.size())
nova chamada: assertEquals(1, listAppender.list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result659 + " <listAppender.list.size()>")
chamada antiga: assertEquals(msg, le.getMessage())
nova chamada: assertEquals(msg, le.getMessage(), "Era esperado valores iguais, mas  msg é diferente de " + result660 + " <le.getMessage()>")
chamada antiga: assertEquals(0, listAppender.list.size())
nova chamada: assertEquals(0, listAppender.list.size(), "Era esperado valores iguais, mas  0 é diferente de " + result661 + " <listAppender.list.size()>")
chamada antiga: assertEquals(0, listAppender.list.size())
nova chamada: assertEquals(0, listAppender.list.size(), "Era esperado valores iguais, mas  0 é diferente de " + result662 + " <listAppender.list.size()>")
chamada antiga: assertFalse(logger.isAdditive())
nova chamada: assertFalse(logger.isAdditive(), "Era esperado falso, mas " + result663 + " <logger.isAdditive()> é verdadeiro ")
chamada antiga: assertEquals(0, listAppender.list.size())
nova chamada: assertEquals(0, listAppender.list.size(), "Era esperado valores iguais, mas  0 é diferente de " + result664 + " <listAppender.list.size()>")
chamada antiga: assertEquals(0, listAppender.list.size())
nova chamada: assertEquals(0, listAppender.list.size(), "Era esperado valores iguais, mas  0 é diferente de " + result665 + " <listAppender.list.size()>")
chamada antiga: assertEquals(0, listAppender.list.size())
nova chamada: assertEquals(0, listAppender.list.size(), "Era esperado valores iguais, mas  0 é diferente de " + result666 + " <listAppender.list.size()>")
chamada antiga: assertEquals(1, listAppender.list.size())
nova chamada: assertEquals(1, listAppender.list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result667 + " <listAppender.list.size()>")
chamada antiga: assertEquals(0, listAppender.list.size())
nova chamada: assertEquals(0, listAppender.list.size(), "Era esperado valores iguais, mas  0 é diferente de " + result668 + " <listAppender.list.size()>")
chamada antiga: assertEquals(1, listAppender.list.size())
nova chamada: assertEquals(1, listAppender.list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result669 + " <listAppender.list.size()>")
chamada antiga: assertEquals("wombat", loggerContext.getName())
nova chamada: assertEquals("wombat", loggerContext.getName(), "Era esperado valores iguais, mas  'wombat' é diferente de " + result670 + " <loggerContext.getName()>")
chamada antiga: assertTrue(filter instanceof NOPTurboFilter)
nova chamada: assertTrue(filter instanceof NOPTurboFilter, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(filter instanceof DebugUsersTurboFilter)
nova chamada: assertTrue(filter instanceof DebugUsersTurboFilter, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(2, dutf.getUsers().size())
nova chamada: assertEquals(2, dutf.getUsers().size(), "Era esperado valores iguais, mas  2 é diferente de " + result671 + " <dutf.getUsers().size()>")
chamada antiga: assertNotNull(listAppender)
nova chamada: assertNotNull(listAppender, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(1, listAppender.list.size())
nova chamada: assertEquals(1, listAppender.list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result672 + " <listAppender.list.size()>")
chamada antiga: assertEquals(Level.WARN, back.getLevel())
nova chamada: assertEquals(Level.WARN, back.getLevel(), "Era esperado valores iguais, mas  Level.WARN é diferente de " + result673 + " <back.getLevel()>")
chamada antiga: assertEquals("hello", back.getMessage())
nova chamada: assertEquals("hello", back.getMessage(), "Era esperado valores iguais, mas  'hello' é diferente de " + result674 + " <back.getMessage()>")
chamada antiga: assertEquals(0, listAppender.list.size())
nova chamada: assertEquals(0, listAppender.list.size(), "Era esperado valores iguais, mas  0 é diferente de " + result675 + " <listAppender.list.size()>")
chamada antiga: assertEquals(1, listAppender.list.size())
nova chamada: assertEquals(1, listAppender.list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result676 + " <listAppender.list.size()>")
chamada antiga: assertEquals("hello user2", le.getMessage())
nova chamada: assertEquals("hello user2", le.getMessage(), "Era esperado valores iguais, mas  'hello user2' é diferente de " + result677 + " <le.getMessage()>")
chamada antiga: assertEquals(0, listAppender.list.size())
nova chamada: assertEquals(0, listAppender.list.size(), "Era esperado valores iguais, mas  0 é diferente de " + result678 + " <listAppender.list.size()>")
chamada antiga: assertEquals(2, listAppender.list.size())
nova chamada: assertEquals(2, listAppender.list.size(), "Era esperado valores iguais, mas  2 é diferente de " + result679 + " <listAppender.list.size()>")
chamada antiga: assertEquals("hello user1", le.getMessage())
nova chamada: assertEquals("hello user1", le.getMessage(), "Era esperado valores iguais, mas  'hello user1' é diferente de " + result680 + " <le.getMessage()>")
chamada antiga: assertEquals("hello user2", le.getMessage())
nova chamada: assertEquals("hello user2", le.getMessage(), "Era esperado valores iguais, mas  'hello user2' é diferente de " + result681 + " <le.getMessage()>")
chamada antiga: assertNotNull(r)
nova chamada: assertNotNull(r, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(r)
nova chamada: assertNull(r, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(expected, sysPropValue)
nova chamada: assertEquals(expected, sysPropValue, "Era esperado valores iguais, mas  expected é diferente de " + " sysPropValue")
chamada antiga: assertNotNull(consoleAppender)
nova chamada: assertNotNull(consoleAppender, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("UTF-8", encoder.getCharset().displayName())
nova chamada: assertEquals("UTF-8", encoder.getCharset().displayName(), "Era esperado valores iguais, mas  'UTF-8' é diferente de " + result682 + " <encoder.getCharset().displayName()>")
chamada antiga: assertNull(System.getProperty("sys"))
nova chamada: assertNull(System.getProperty("sys"), "Era esperado nulo, mas " + result683 + " <System.getProperty('sys')> não é nulo")
chamada antiga: assertNotNull(loggerContext.getProperty(CoreConstants.HOSTNAME_KEY))
nova chamada: assertNotNull(loggerContext.getProperty(CoreConstants.HOSTNAME_KEY), "Era esperado não nulo, mas " + result684 + " <loggerContext.getProperty(CoreConstants.HOSTNAME_KEY)> é nulo")
chamada antiga: assertNull(loggerContext.getProperty("transientKey1"))
nova chamada: assertNull(loggerContext.getProperty("transientKey1"), "Era esperado nulo, mas " + result685 + " <loggerContext.getProperty('transientKey1')> não é nulo")
chamada antiga: assertNull(loggerContext.getProperty("transientKey2"))
nova chamada: assertNull(loggerContext.getProperty("transientKey2"), "Era esperado nulo, mas " + result686 + " <loggerContext.getProperty('transientKey2')> não é nulo")
chamada antiga: assertEquals("node0", loggerContext.getProperty("nodeId"))
nova chamada: assertEquals("node0", loggerContext.getProperty("nodeId"), "Era esperado valores iguais, mas  'node0' é diferente de " + result687 + " <loggerContext.getProperty('nodeId')>")
chamada antiga: assertEquals("tem", System.getProperty("sys"))
nova chamada: assertEquals("tem", System.getProperty("sys"), "Era esperado valores iguais, mas  'tem' é diferente de " + result688 + " <System.getProperty('sys')>")
chamada antiga: assertNotNull(loggerContext.getProperty("path"))
nova chamada: assertNotNull(loggerContext.getProperty("path"), "Era esperado não nulo, mas " + result689 + " <loggerContext.getProperty('path')> é nulo")
chamada antiga: assertEquals("A", loggerContext.getProperty(CoreConstants.HOSTNAME_KEY))
nova chamada: assertEquals("A", loggerContext.getProperty(CoreConstants.HOSTNAME_KEY), "Era esperado valores iguais, mas  'A' é diferente de " + result690 + " <loggerContext.getProperty(CoreConstants.HOSTNAME_KEY)>")
chamada antiga: assertFalse(loggerContext.isPackagingDataEnabled())
nova chamada: assertFalse(loggerContext.isPackagingDataEnabled(), "Era esperado falso, mas " + result691 + " <loggerContext.isPackagingDataEnabled()> é verdadeiro ")
chamada antiga: assertTrue(loggerContext.isPackagingDataEnabled())
nova chamada: assertTrue(loggerContext.isPackagingDataEnabled(), "Era esperado verdadeiro, mas " + result692 + " <loggerContext.isPackagingDataEnabled()> é falso")
chamada antiga: assertNotNull(thread)
nova chamada: assertNotNull(thread, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(thread)
nova chamada: assertNotNull(thread, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(thread)
nova chamada: assertNotNull(thread, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(listAppender)
nova chamada: assertNotNull(listAppender, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(0, listAppender.list.size())
nova chamada: assertEquals(0, listAppender.list.size(), "Era esperado valores iguais, mas  0 é diferente de " + result693 + " <listAppender.list.size()>")
chamada antiga: assertEquals(1, listAppender.list.size())
nova chamada: assertEquals(1, listAppender.list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result694 + " <listAppender.list.size()>")
chamada antiga: assertEquals(msg, le.getMessage())
nova chamada: assertEquals(msg, le.getMessage(), "Era esperado valores iguais, mas  msg é diferente de " + result695 + " <le.getMessage()>")
chamada antiga: assertNotNull(listAppenderA)
nova chamada: assertNotNull(listAppenderA, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(asyncAppender)
nova chamada: assertNotNull(asyncAppender, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(asyncAppender.isStarted())
nova chamada: assertTrue(asyncAppender.isStarted(), "Era esperado verdadeiro, mas " + result696 + " <asyncAppender.isStarted()> é falso")
chamada antiga: assertNotNull(asyncAppender)
nova chamada: assertNotNull(asyncAppender, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(asyncAppender.isStarted())
nova chamada: assertTrue(asyncAppender.isStarted(), "Era esperado verdadeiro, mas " + result697 + " <asyncAppender.isStarted()> é falso")
chamada antiga: assertNotNull(listAppender)
nova chamada: assertNotNull(listAppender, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(listAppender.isStarted())
nova chamada: assertTrue(listAppender.isStarted(), "Era esperado verdadeiro, mas " + result698 + " <listAppender.isStarted()> é falso")
chamada antiga: assertNotNull(listAppender)
nova chamada: assertNotNull(listAppender, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(1, se1 - se0)
nova chamada: assertEquals(1, se1 - se0, "Era esperado valores iguais, mas  1 é diferente de " + " se1 - se0")
chamada antiga: assertNotNull(listAppender)
nova chamada: assertNotNull(listAppender, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(slAppender)
nova chamada: assertNotNull(slAppender, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(4, slAppender.strList.size())
nova chamada: assertEquals(4, slAppender.strList.size(), "Era esperado valores iguais, mas  4 é diferente de " + result699 + " <slAppender.strList.size()>")
chamada antiga: assertTrue(slAppender.strList.get(0).contains(kvp1.key + "=\"" + kvp1.value + "\" " + msg))
nova chamada: assertTrue(slAppender.strList.get(0).contains(kvp1.key + "=\"" + kvp1.value + "\" " + msg), "Era esperado verdadeiro, mas " + result700 + " <slAppender.strList.get(0).contains(kvp1.key + '=\'' + kvp1.value + '\' ' + msg)> é falso")
chamada antiga: assertTrue(slAppender.strList.get(1).contains(kvp2.key + "=\"" + kvp2.value + "\" " + msg))
nova chamada: assertTrue(slAppender.strList.get(1).contains(kvp2.key + "=\"" + kvp2.value + "\" " + msg), "Era esperado verdadeiro, mas " + result701 + " <slAppender.strList.get(1).contains(kvp2.key + '=\'' + kvp2.value + '\' ' + msg)> é falso")
chamada antiga: assertTrue(slAppender.strList.get(2).contains("null=\"" + kvpNullKey.value + "\" " + msg))
nova chamada: assertTrue(slAppender.strList.get(2).contains("null=\"" + kvpNullKey.value + "\" " + msg), "Era esperado verdadeiro, mas " + result702 + " <slAppender.strList.get(2).contains('null=\'' + kvpNullKey.value + '\' ' + msg)> é falso")
chamada antiga: assertTrue(slAppender.strList.get(3).contains(kvpNullValue.key + "=\"null\" " + msg))
nova chamada: assertTrue(slAppender.strList.get(3).contains(kvpNullValue.key + "=\"null\" " + msg), "Era esperado verdadeiro, mas " + result703 + " <slAppender.strList.get(3).contains(kvpNullValue.key + '=\'null\' ' + msg)> é falso")
chamada antiga: assertEquals("a\\t", loggerContext.getProperty("fuzz-47093-a"))
nova chamada: assertEquals("a\\t", loggerContext.getProperty("fuzz-47093-a"), "Era esperado valores iguais, mas  'a\\t' é diferente de " + result704 + " <loggerContext.getProperty('fuzz-47093-a')>")
chamada antiga: assertEquals("a\\\\", loggerContext.getProperty("fuzz-47093-b"))
nova chamada: assertEquals("a\\\\", loggerContext.getProperty("fuzz-47093-b"), "Era esperado valores iguais, mas  'a\\\\' é diferente de " + result705 + " <loggerContext.getProperty('fuzz-47093-b')>")
chamada antiga: assertTrue(future.isCancelled())
nova chamada: assertTrue(future.isCancelled(), "Era esperado verdadeiro, mas " + result706 + " <future.isCancelled()> é falso")
chamada antiga: assertNull(configurationWatchList)
nova chamada: assertNull(configurationWatchList, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(roct)
nova chamada: assertNull(roct, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(0, loggerContext.getCopyOfScheduledFutures().size())
nova chamada: assertEquals(0, loggerContext.getCopyOfScheduledFutures().size(), "Era esperado valores iguais, mas  0 é diferente de " + result707 + " <loggerContext.getCopyOfScheduledFutures().size()>")
chamada antiga: assertNotNull(oldRoct)
nova chamada: assertNotNull(oldRoct, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(oldRoct)
nova chamada: assertNotNull(oldRoct, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertFalse(scheduledFutures.isEmpty())
nova chamada: assertFalse(scheduledFutures.isEmpty(), "Era esperado falso, mas " + result708 + " <scheduledFutures.isEmpty()> é verdadeiro ")
chamada antiga: assertTrue(fileList.contains(file.getAbsoluteFile()))
nova chamada: assertTrue(fileList.contains(file.getAbsoluteFile()), "Era esperado verdadeiro, mas " + result709 + " <fileList.contains(file.getAbsoluteFile())> é falso")
chamada antiga: assertEquals(expected, effectiveResets)
nova chamada: assertEquals(expected, effectiveResets, "Era esperado valores iguais, mas  expected é diferente de " + " effectiveResets")
chamada antiga: assertNotNull(rootElement.element("body"))
nova chamada: assertNotNull(rootElement.element("body"), "Era esperado não nulo, mas " + result710 + " <rootElement.element('body')> é nulo")
chamada antiga: assertEquals("Level", elementList.get(0).getText())
nova chamada: assertEquals("Level", elementList.get(0).getText(), "Era esperado valores iguais, mas  'Level' é diferente de " + result711 + " <elementList.get(0).getText()>")
chamada antiga: assertEquals("Thread", elementList.get(1).getText())
nova chamada: assertEquals("Thread", elementList.get(1).getText(), "Era esperado valores iguais, mas  'Thread' é diferente de " + result712 + " <elementList.get(1).getText()>")
chamada antiga: assertEquals("Message", elementList.get(2).getText())
nova chamada: assertEquals("Message", elementList.get(2).getText(), "Era esperado valores iguais, mas  'Message' é diferente de " + result713 + " <elementList.get(2).getText()>")
chamada antiga: assertEquals("test1: msg1", result[0])
nova chamada: assertEquals("test1: msg1", result[0], "Era esperado valores iguais, mas  'test1: msg1' é diferente de " + " result[0]")
chamada antiga: assertEquals(DefaultThrowableRenderer.TRACE_PREFIX + "at c1.m1(f1:1)", result[1])
nova chamada: assertEquals(DefaultThrowableRenderer.TRACE_PREFIX + "at c1.m1(f1:1)", result[1], "Era esperado valores iguais, mas  DefaultThrowableRenderer.TRACE_PREFIX + 'at c1.m1(f1:1)' é diferente de " + " result[1]")
chamada antiga: assertEquals(2, rootElement.elements().size())
nova chamada: assertEquals(2, rootElement.elements().size(), "Era esperado valores iguais, mas  2 é diferente de " + result714 + " <rootElement.elements().size()>")
chamada antiga: assertEquals("table", tableElement.getName())
nova chamada: assertEquals("table", tableElement.getName(), "Era esperado valores iguais, mas  'table' é diferente de " + result715 + " <tableElement.getName()>")
chamada antiga: assertEquals(3, tableElement.elements().size())
nova chamada: assertEquals(3, tableElement.elements().size(), "Era esperado valores iguais, mas  3 é diferente de " + result716 + " <tableElement.elements().size()>")
chamada antiga: assertTrue(exceptionElement.getText().contains("java.lang.Exception: test Exception"))
nova chamada: assertTrue(exceptionElement.getText().contains("java.lang.Exception: test Exception"), "Era esperado verdadeiro, mas " + result717 + " <exceptionElement.getText().contains('java.lang.Exception: test Exception')> é falso")
chamada antiga: assertTrue(header.startsWith("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">"))
nova chamada: assertTrue(header.startsWith("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">"), "Era esperado verdadeiro, mas " + result718 + " <header.startsWith('<!DOCTYPE html PUBLIC \'-//W3C//DTD XHTML 1.0 Strict//EN\' \'http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\'>')> é falso")
chamada antiga: assertNotNull(sla)
nova chamada: assertNotNull(sla, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(1, sla.strList.size())
nova chamada: assertEquals(1, sla.strList.size(), "Era esperado valores iguais, mas  1 é diferente de " + result719 + " <sla.strList.size()>")
chamada antiga: assertFalse(sla.strList.get(0).contains("PARSER_ERROR"))
nova chamada: assertFalse(sla.strList.get(0).contains("PARSER_ERROR"), "Era esperado falso, mas " + result720 + " <sla.strList.get(0).contains('PARSER_ERROR')> é verdadeiro ")
chamada antiga: assertNotNull(logger)
nova chamada: assertNotNull(logger, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(name, logger.getName())
nova chamada: assertEquals(name, logger.getName(), "Era esperado valores iguais, mas  name é diferente de " + result721 + " <logger.getName()>")
chamada antiga: assertEquals(effectiveLevel, logger.getEffectiveLevel())
nova chamada: assertEquals(effectiveLevel, logger.getEffectiveLevel(), "Era esperado valores iguais, mas  effectiveLevel é diferente de " + result722 + " <logger.getEffectiveLevel()>")
chamada antiga: assertEquals(FilterReply.DENY, filter.decide(null, null, null, null, null, null))
nova chamada: assertEquals(FilterReply.DENY, filter.decide(null, null, null, null, null, null), "Era esperado valores iguais, mas  FilterReply.DENY é diferente de " + result723 + " <filter.decide(null, null, null, null, null, null)>")
chamada antiga: assertEquals(FilterReply.DENY, filter.decide(null, null, null, null, null, null))
nova chamada: assertEquals(FilterReply.DENY, filter.decide(null, null, null, null, null, null), "Era esperado valores iguais, mas  FilterReply.DENY é diferente de " + result724 + " <filter.decide(null, null, null, null, null, null)>")
chamada antiga: assertEquals(FilterReply.ACCEPT, filter.decide(null, null, null, null, null, null))
nova chamada: assertEquals(FilterReply.ACCEPT, filter.decide(null, null, null, null, null, null), "Era esperado valores iguais, mas  FilterReply.ACCEPT é diferente de " + result725 + " <filter.decide(null, null, null, null, null, null)>")
chamada antiga: assertFalse(filter.isStarted())
nova chamada: assertFalse(filter.isStarted(), "Era esperado falso, mas " + result726 + " <filter.isStarted()> é verdadeiro ")
chamada antiga: assertEquals(FilterReply.NEUTRAL, filter.decide(null, null, null, null, null, null))
nova chamada: assertEquals(FilterReply.NEUTRAL, filter.decide(null, null, null, null, null, null), "Era esperado valores iguais, mas  FilterReply.NEUTRAL é diferente de " + result727 + " <filter.decide(null, null, null, null, null, null)>")
chamada antiga: assertEquals(FilterReply.NEUTRAL, filter.decide(null, null, null, null, null, null))
nova chamada: assertEquals(FilterReply.NEUTRAL, filter.decide(null, null, null, null, null, null), "Era esperado valores iguais, mas  FilterReply.NEUTRAL é diferente de " + result728 + " <filter.decide(null, null, null, null, null, null)>")
chamada antiga: assertFalse(filter.isStarted())
nova chamada: assertFalse(filter.isStarted(), "Era esperado falso, mas " + result729 + " <filter.isStarted()> é verdadeiro ")
chamada antiga: assertEquals(FilterReply.NEUTRAL, filter.decide(null, null, null, null, null, null))
nova chamada: assertEquals(FilterReply.NEUTRAL, filter.decide(null, null, null, null, null, null), "Era esperado valores iguais, mas  FilterReply.NEUTRAL é diferente de " + result730 + " <filter.decide(null, null, null, null, null, null)>")
chamada antiga: assertEquals(FilterReply.NEUTRAL, filter.decide(null, null, null, null, null, null))
nova chamada: assertEquals(FilterReply.NEUTRAL, filter.decide(null, null, null, null, null, null), "Era esperado valores iguais, mas  FilterReply.NEUTRAL é diferente de " + result731 + " <filter.decide(null, null, null, null, null, null)>")
chamada antiga: assertEquals(witness, cache.keyList())
nova chamada: assertEquals(witness, cache.keyList(), "Era esperado valores iguais, mas  witness é diferente de " + result732 + " <cache.keyList()>")
chamada antiga: assertEquals(tlruCache.keyList(), lruCache.keyList())
nova chamada: assertEquals(tlruCache.keyList(), lruCache.keyList(), "Era esperado valores iguais, mas " + result733 + " <tlruCache.keyList()> é diferente de " + result734 + " <lruCache.keyList()>")
chamada antiga: assertEquals(FilterReply.NEUTRAL, dmf.decide(null, null, null, "x", null, null))
nova chamada: assertEquals(FilterReply.NEUTRAL, dmf.decide(null, null, null, "x", null, null), "Era esperado valores iguais, mas  FilterReply.NEUTRAL é diferente de " + result735 + " <dmf.decide(null, null, null, 'x', null, null)>")
chamada antiga: assertEquals(FilterReply.NEUTRAL, dmf.decide(null, null, null, "y", null, null))
nova chamada: assertEquals(FilterReply.NEUTRAL, dmf.decide(null, null, null, "y", null, null), "Era esperado valores iguais, mas  FilterReply.NEUTRAL é diferente de " + result736 + " <dmf.decide(null, null, null, 'y', null, null)>")
chamada antiga: assertEquals(FilterReply.DENY, dmf.decide(null, null, null, "x", null, null))
nova chamada: assertEquals(FilterReply.DENY, dmf.decide(null, null, null, "x", null, null), "Era esperado valores iguais, mas  FilterReply.DENY é diferente de " + result737 + " <dmf.decide(null, null, null, 'x', null, null)>")
chamada antiga: assertEquals(FilterReply.DENY, dmf.decide(null, null, null, "y", null, null))
nova chamada: assertEquals(FilterReply.DENY, dmf.decide(null, null, null, "y", null, null), "Era esperado valores iguais, mas  FilterReply.DENY é diferente de " + result738 + " <dmf.decide(null, null, null, 'y', null, null)>")
chamada antiga: assertEquals(FilterReply.NEUTRAL, dmf.decide(null, null, null, "a", null, null))
nova chamada: assertEquals(FilterReply.NEUTRAL, dmf.decide(null, null, null, "a", null, null), "Era esperado valores iguais, mas  FilterReply.NEUTRAL é diferente de " + result739 + " <dmf.decide(null, null, null, 'a', null, null)>")
chamada antiga: assertEquals(FilterReply.NEUTRAL, dmf.decide(null, null, null, "b", null, null))
nova chamada: assertEquals(FilterReply.NEUTRAL, dmf.decide(null, null, null, "b", null, null), "Era esperado valores iguais, mas  FilterReply.NEUTRAL é diferente de " + result740 + " <dmf.decide(null, null, null, 'b', null, null)>")
chamada antiga: assertEquals(FilterReply.NEUTRAL, dmf.decide(null, null, null, "a", null, null))
nova chamada: assertEquals(FilterReply.NEUTRAL, dmf.decide(null, null, null, "a", null, null), "Era esperado valores iguais, mas  FilterReply.NEUTRAL é diferente de " + result741 + " <dmf.decide(null, null, null, 'a', null, null)>")
chamada antiga: assertEquals(FilterReply.NEUTRAL, dmf.decide(null, null, null, null, null, null))
nova chamada: assertEquals(FilterReply.NEUTRAL, dmf.decide(null, null, null, null, null, null), "Era esperado valores iguais, mas  FilterReply.NEUTRAL é diferente de " + result742 + " <dmf.decide(null, null, null, null, null, null)>")
chamada antiga: assertEquals(FilterReply.NEUTRAL, dmf.decide(null, null, null, null, null, null))
nova chamada: assertEquals(FilterReply.NEUTRAL, dmf.decide(null, null, null, null, null, null), "Era esperado valores iguais, mas  FilterReply.NEUTRAL é diferente de " + result743 + " <dmf.decide(null, null, null, null, null, null)>")
chamada antiga: assertFalse(mkt.isStarted())
nova chamada: assertFalse(mkt.isStarted(), "Era esperado falso, mas " + result744 + " <mkt.isStarted()> é verdadeiro ")
chamada antiga: assertEquals(FilterReply.NEUTRAL, mkt.decide(totoMarker, null, null, null, null, null))
nova chamada: assertEquals(FilterReply.NEUTRAL, mkt.decide(totoMarker, null, null, null, null, null), "Era esperado valores iguais, mas  FilterReply.NEUTRAL é diferente de " + result745 + " <mkt.decide(totoMarker, null, null, null, null, null)>")
chamada antiga: assertEquals(FilterReply.NEUTRAL, mkt.decide(null, null, null, null, null, null))
nova chamada: assertEquals(FilterReply.NEUTRAL, mkt.decide(null, null, null, null, null, null), "Era esperado valores iguais, mas  FilterReply.NEUTRAL é diferente de " + result746 + " <mkt.decide(null, null, null, null, null, null)>")
chamada antiga: assertTrue(mkt.isStarted())
nova chamada: assertTrue(mkt.isStarted(), "Era esperado verdadeiro, mas " + result747 + " <mkt.isStarted()> é falso")
chamada antiga: assertEquals(FilterReply.DENY, mkt.decide(null, null, null, null, null, null))
nova chamada: assertEquals(FilterReply.DENY, mkt.decide(null, null, null, null, null, null), "Era esperado valores iguais, mas  FilterReply.DENY é diferente de " + result748 + " <mkt.decide(null, null, null, null, null, null)>")
chamada antiga: assertEquals(FilterReply.ACCEPT, mkt.decide(totoMarker, null, null, null, null, null))
nova chamada: assertEquals(FilterReply.ACCEPT, mkt.decide(totoMarker, null, null, null, null, null), "Era esperado valores iguais, mas  FilterReply.ACCEPT é diferente de " + result749 + " <mkt.decide(totoMarker, null, null, null, null, null)>")
chamada antiga: assertTrue(mkt.isStarted())
nova chamada: assertTrue(mkt.isStarted(), "Era esperado verdadeiro, mas " + result750 + " <mkt.isStarted()> é falso")
chamada antiga: assertEquals(FilterReply.DENY, mkt.decide(null, null, null, null, null, null))
nova chamada: assertEquals(FilterReply.DENY, mkt.decide(null, null, null, null, null, null), "Era esperado valores iguais, mas  FilterReply.DENY é diferente de " + result751 + " <mkt.decide(null, null, null, null, null, null)>")
chamada antiga: assertEquals(FilterReply.ACCEPT, mkt.decide(totoMarker, null, null, null, null, null))
nova chamada: assertEquals(FilterReply.ACCEPT, mkt.decide(totoMarker, null, null, null, null, null), "Era esperado valores iguais, mas  FilterReply.ACCEPT é diferente de " + result752 + " <mkt.decide(totoMarker, null, null, null, null, null)>")
chamada antiga: assertEquals(FilterReply.ACCEPT, mkt.decide(compositeMarker, null, null, null, null, null))
nova chamada: assertEquals(FilterReply.ACCEPT, mkt.decide(compositeMarker, null, null, null, null, null), "Era esperado valores iguais, mas  FilterReply.ACCEPT é diferente de " + result753 + " <mkt.decide(compositeMarker, null, null, null, null, null)>")
chamada antiga: assertEquals(0, cache.getMessageCountAndThenIncrement("0"))
nova chamada: assertEquals(0, cache.getMessageCountAndThenIncrement("0"), "Era esperado valores iguais, mas  0 é diferente de " + result754 + " <cache.getMessageCountAndThenIncrement('0')>")
chamada antiga: assertEquals(1, cache.getMessageCountAndThenIncrement("0"))
nova chamada: assertEquals(1, cache.getMessageCountAndThenIncrement("0"), "Era esperado valores iguais, mas  1 é diferente de " + result755 + " <cache.getMessageCountAndThenIncrement('0')>")
chamada antiga: assertEquals(0, cache.getMessageCountAndThenIncrement("1"))
nova chamada: assertEquals(0, cache.getMessageCountAndThenIncrement("1"), "Era esperado valores iguais, mas  0 é diferente de " + result756 + " <cache.getMessageCountAndThenIncrement('1')>")
chamada antiga: assertEquals(1, cache.getMessageCountAndThenIncrement("1"))
nova chamada: assertEquals(1, cache.getMessageCountAndThenIncrement("1"), "Era esperado valores iguais, mas  1 é diferente de " + result757 + " <cache.getMessageCountAndThenIncrement('1')>")
chamada antiga: assertEquals(0, cache.getMessageCountAndThenIncrement("2"))
nova chamada: assertEquals(0, cache.getMessageCountAndThenIncrement("2"), "Era esperado valores iguais, mas  0 é diferente de " + result758 + " <cache.getMessageCountAndThenIncrement('2')>")
chamada antiga: assertEquals(0, cache.getMessageCountAndThenIncrement("0"))
nova chamada: assertEquals(0, cache.getMessageCountAndThenIncrement("0"), "Era esperado valores iguais, mas  0 é diferente de " + result759 + " <cache.getMessageCountAndThenIncrement('0')>")
chamada antiga: assertEquals(0, cache.getMessageCountAndThenIncrement("1"))
nova chamada: assertEquals(0, cache.getMessageCountAndThenIncrement("1"), "Era esperado valores iguais, mas  0 é diferente de " + result760 + " <cache.getMessageCountAndThenIncrement('1')>")
chamada antiga: assertEquals(0, cache.getMessageCountAndThenIncrement("2"))
nova chamada: assertEquals(0, cache.getMessageCountAndThenIncrement("2"), "Era esperado valores iguais, mas  0 é diferente de " + result761 + " <cache.getMessageCountAndThenIncrement('2')>")
chamada antiga: assertNull(configurationWatchList.getMainURL())
nova chamada: assertNull(configurationWatchList.getMainURL(), "Era esperado nulo, mas " + result762 + " <configurationWatchList.getMainURL()> não é nulo")
chamada antiga: assertFalse(reconfigureOnChangeFilter.isStarted())
nova chamada: assertFalse(reconfigureOnChangeFilter.isStarted(), "Era esperado falso, mas " + result763 + " <reconfigureOnChangeFilter.isStarted()> é verdadeiro ")
chamada antiga: assertTrue(fileList.contains(file.getAbsoluteFile()))
nova chamada: assertTrue(fileList.contains(file.getAbsoluteFile()), "Era esperado verdadeiro, mas " + result764 + " <fileList.contains(file.getAbsoluteFile())> é falso")
chamada antiga: assertTrue(getFirstTurboFilter() instanceof ReconfigureOnChangeFilter)
nova chamada: assertTrue(getFirstTurboFilter() instanceof ReconfigureOnChangeFilter, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(rocf.isStarted())
nova chamada: assertTrue(rocf.isStarted(), "Era esperado verdadeiro, mas " + result765 + " <rocf.isStarted()> é falso")
chamada antiga: assertTrue(rocf.isStarted())
nova chamada: assertTrue(rocf.isStarted(), "Era esperado verdadeiro, mas " + result766 + " <rocf.isStarted()> é falso")
chamada antiga: assertTrue(val.contains("java.lang.Exception: Bogus exception"))
nova chamada: assertTrue(val.contains("java.lang.Exception: Bogus exception"), "Era esperado verdadeiro, mas " + result767 + " <val.contains('java.lang.Exception: Bogus exception')> é falso")
chamada antiga: assertTrue(val.matches(regex))
nova chamada: assertTrue(val.matches(regex), "Era esperado verdadeiro, mas " + result768 + " <val.matches(regex)> é falso")
chamada antiga: assertEquals("b", val)
nova chamada: assertEquals("b", val, "Era esperado valores iguais, mas  'b' é diferente de " + " val")
chamada antiga: assertTrue(!val.contains("java.lang.Exception: Bogus exception"))
nova chamada: assertTrue(!val.contains("java.lang.Exception: Bogus exception"), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("(Some message:Some message) Some message", val)
nova chamada: assertEquals("(Some message:Some message) Some message", val, "Era esperado valores iguais, mas  '(Some message:Some message) Some message' é diferente de " + " val")
chamada antiga: assertTrue(val.matches(regex))
nova chamada: assertTrue(val.matches(regex), "Era esperado verdadeiro, mas " + result769 + " <val.matches(regex)> é falso")
chamada antiga: assertEquals("aValue", val)
nova chamada: assertEquals("aValue", val, "Era esperado valores iguais, mas  'aValue' é diferente de " + " val")
chamada antiga: assertEquals("aValue", val)
nova chamada: assertEquals("aValue", val, "Era esperado valores iguais, mas  'aValue' é diferente de " + " val")
chamada antiga: assertEquals(expected, val)
nova chamada: assertEquals(expected, val, "Era esperado valores iguais, mas  expected é diferente de " + " val")
chamada antiga: assertNotNull(sla)
nova chamada: assertNotNull(sla, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(1, sla.strList.size())
nova chamada: assertEquals(1, sla.strList.size(), "Era esperado valores iguais, mas  1 é diferente de " + result770 + " <sla.strList.size()>")
chamada antiga: assertEquals(SampleConverter.SAMPLE_STR + " - " + msg, sla.strList.get(0))
nova chamada: assertEquals(SampleConverter.SAMPLE_STR + " - " + msg, sla.strList.get(0), "Era esperado valores iguais, mas  SampleConverter.SAMPLE_STR + ' - ' + msg é diferente de " + result771 + " <sla.strList.get(0)>")
chamada antiga: assertEquals("aXXXXb", val)
nova chamada: assertEquals("aXXXXb", val, "Era esperado valores iguais, mas  'aXXXXb' é diferente de " + " val")
chamada antiga: assertEquals(pattern, substPattern)
nova chamada: assertEquals(pattern, substPattern, "Era esperado valores iguais, mas  pattern é diferente de " + " substPattern")
chamada antiga: assertEquals("A\n\tB", val)
nova chamada: assertEquals("A\n\tB", val, "Era esperado valores iguais, mas  'A\n\tB' é diferente de " + " val")
chamada antiga: assertNotNull(sla)
nova chamada: assertNotNull(sla, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(1, sla.strList.size())
nova chamada: assertEquals(1, sla.strList.size(), "Era esperado valores iguais, mas  1 é diferente de " + result772 + " <sla.strList.size()>")
chamada antiga: assertEquals("And the number is XXXX, expiring on 12/2010", sla.strList.get(0))
nova chamada: assertEquals("And the number is XXXX, expiring on 12/2010", sla.strList.get(0), "Era esperado valores iguais, mas  'And the number is XXXX, expiring on 12/2010' é diferente de " + result773 + " <sla.strList.get(0)>")
chamada antiga: assertNotNull(sla)
nova chamada: assertNotNull(sla, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(1, sla.strList.size())
nova chamada: assertEquals(1, sla.strList.size(), "Era esperado valores iguais, mas  1 é diferente de " + result774 + " <sla.strList.size()>")
chamada antiga: assertEquals("A\n\tC", sla.strList.get(0))
nova chamada: assertEquals("A\n\tC", sla.strList.get(0), "Era esperado valores iguais, mas  'A\n\tC' é diferente de " + result775 + " <sla.strList.get(0)>")
chamada antiga: assertEquals("logger=" + logger.getName() + " hello", val)
nova chamada: assertEquals("logger=" + logger.getName() + " hello", val, "Era esperado valores iguais, mas  'logger=' + logger.getName() + ' hello' é diferente de " + " val")
chamada antiga: assertEquals(UpdateType.RESET, listener.updateType)
nova chamada: assertEquals(UpdateType.RESET, listener.updateType, "Era esperado valores iguais, mas  UpdateType.RESET é diferente de " + " listener.updateType")
chamada antiga: assertEquals(listener.context, context)
nova chamada: assertEquals(listener.context, context, "Era esperado valores iguais, mas  listener.context é diferente de " + " context")
chamada antiga: assertEquals(UpdateType.STOP, listener.updateType)
nova chamada: assertEquals(UpdateType.STOP, listener.updateType, "Era esperado valores iguais, mas  UpdateType.STOP é diferente de " + " listener.updateType")
chamada antiga: assertEquals(listener.context, context)
nova chamada: assertEquals(listener.context, context, "Era esperado valores iguais, mas  listener.context é diferente de " + " context")
chamada antiga: assertEquals(UpdateType.RESET, listener.updateType)
nova chamada: assertEquals(UpdateType.RESET, listener.updateType, "Era esperado valores iguais, mas  UpdateType.RESET é diferente de " + " listener.updateType")
chamada antiga: assertEquals(listener.context, context)
nova chamada: assertEquals(listener.context, context, "Era esperado valores iguais, mas  listener.context é diferente de " + " context")
chamada antiga: assertEquals(UpdateType.START, listener.updateType)
nova chamada: assertEquals(UpdateType.START, listener.updateType, "Era esperado valores iguais, mas  UpdateType.START é diferente de " + " listener.updateType")
chamada antiga: assertEquals(listener.context, context)
nova chamada: assertEquals(listener.context, context, "Era esperado valores iguais, mas  listener.context é diferente de " + " context")
chamada antiga: assertEquals(UpdateType.LEVEL_CHANGE, listener.updateType)
nova chamada: assertEquals(UpdateType.LEVEL_CHANGE, listener.updateType, "Era esperado valores iguais, mas  UpdateType.LEVEL_CHANGE é diferente de " + " listener.updateType")
chamada antiga: assertEquals(listener.logger, logger)
nova chamada: assertEquals(listener.logger, logger, "Era esperado valores iguais, mas  listener.logger é diferente de " + " logger")
chamada antiga: assertEquals(listener.level, level)
nova chamada: assertEquals(listener.level, level, "Era esperado valores iguais, mas  listener.level é diferente de " + " level")
chamada antiga: assertEquals(1, listenerList.size())
nova chamada: assertEquals(1, listenerList.size(), "Era esperado valores iguais, mas  1 é diferente de " + result776 + " <listenerList.size()>")
chamada antiga: assertEquals(BasicContextListener.UpdateType.START, lcl.updateList.get(1))
nova chamada: assertEquals(BasicContextListener.UpdateType.START, lcl.updateList.get(1), "Era esperado valores iguais, mas  BasicContextListener.UpdateType.START é diferente de " + result777 + " <lcl.updateList.get(1)>")
chamada antiga: assertEquals(1, listenerList.size())
nova chamada: assertEquals(1, listenerList.size(), "Era esperado valores iguais, mas  1 é diferente de " + result778 + " <listenerList.size()>")
chamada antiga: assertEquals(BasicContextListener.UpdateType.START, lcl.updateList.get(1))
nova chamada: assertEquals(BasicContextListener.UpdateType.START, lcl.updateList.get(1), "Era esperado valores iguais, mas  BasicContextListener.UpdateType.START é diferente de " + result779 + " <lcl.updateList.get(1)>")
chamada antiga: assertNotNull(cda)
nova chamada: assertNotNull(cda, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(cda.length > 0)
nova chamada: assertTrue(cda.length > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(steArray.length - 1, cda.length)
nova chamada: assertEquals(steArray.length - 1, cda.length, "Era esperado valores iguais, mas  steArray.length - 1 é diferente de " + " cda.length")
chamada antiga: assertNotNull(cda)
nova chamada: assertNotNull(cda, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(0, cda.length)
nova chamada: assertEquals(0, cda.length, "Era esperado valores iguais, mas  0 é diferente de " + " cda.length")
chamada antiga: assertEquals(expected, result)
nova chamada: assertEquals(expected, result, "Era esperado valores iguais, mas  expected é diferente de " + " result")
chamada antiga: assertEquals(0, comparator.compare(a, a))
nova chamada: assertEquals(0, comparator.compare(a, a), "Era esperado valores iguais, mas  0 é diferente de " + result780 + " <comparator.compare(a, a)>")
chamada antiga: assertEquals(-1, comparator.compare(a, b))
nova chamada: assertEquals(-1, comparator.compare(a, b), "Era esperado valores iguais, mas  -1 é diferente de " + result781 + " <comparator.compare(a, b)>")
chamada antiga: assertEquals(1, comparator.compare(b, a))
nova chamada: assertEquals(1, comparator.compare(b, a), "Era esperado valores iguais, mas  1 é diferente de " + result782 + " <comparator.compare(b, a)>")
chamada antiga: assertEquals(-1, comparator.compare(root, a))
nova chamada: assertEquals(-1, comparator.compare(root, a), "Era esperado valores iguais, mas  -1 é diferente de " + result783 + " <comparator.compare(root, a)>")
chamada antiga: assertEquals(1, comparator.compare(a, root))
nova chamada: assertEquals(1, comparator.compare(a, root), "Era esperado valores iguais, mas  1 é diferente de " + result784 + " <comparator.compare(a, root)>")
chamada antiga: assertEquals(0, comparator.compare(root, root))
nova chamada: assertEquals(0, comparator.compare(root, root), "Era esperado valores iguais, mas  0 é diferente de " + result785 + " <comparator.compare(root, root)>")
chamada antiga: assertNotNull(remoteEvent.getLoggerName())
nova chamada: assertNotNull(remoteEvent.getLoggerName(), "Era esperado não nulo, mas " + result786 + " <remoteEvent.getLoggerName()> é nulo")
chamada antiga: assertEquals(Logger.ROOT_LOGGER_NAME, remoteEvent.getLoggerName())
nova chamada: assertEquals(Logger.ROOT_LOGGER_NAME, remoteEvent.getLoggerName(), "Era esperado valores iguais, mas  Logger.ROOT_LOGGER_NAME é diferente de " + result787 + " <remoteEvent.getLoggerName()>")
chamada antiga: assertNotNull(loggerContextRemoteView)
nova chamada: assertNotNull(loggerContextRemoteView, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("testContext", loggerContextRemoteView.getName())
nova chamada: assertEquals("testContext", loggerContextRemoteView.getName(), "Era esperado valores iguais, mas  'testContext' é diferente de " + result788 + " <loggerContextRemoteView.getName()>")
chamada antiga: assertNotNull(props)
nova chamada: assertNotNull(props, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("testValue", props.get("testKey"))
nova chamada: assertEquals("testValue", props.get("testKey"), "Era esperado valores iguais, mas  'testValue' é diferente de " + result789 + " <props.get('testKey')>")
chamada antiga: assertEquals("testValue", MDCPropertyMap.get("key"))
nova chamada: assertEquals("testValue", MDCPropertyMap.get("key"), "Era esperado valores iguais, mas  'testValue' é diferente de " + result790 + " <MDCPropertyMap.get('key')>")
chamada antiga: assertEquals("updatedTestValue", MDCPropertyMap.get("key"))
nova chamada: assertEquals("updatedTestValue", MDCPropertyMap.get("key"), "Era esperado valores iguais, mas  'updatedTestValue' é diferente de " + result791 + " <MDCPropertyMap.get('key')>")
chamada antiga: assertNotNull(aa)
nova chamada: assertNotNull(aa, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(2, aa.length)
nova chamada: assertEquals(2, aa.length, "Era esperado valores iguais, mas  2 é diferente de " + " aa.length")
chamada antiga: assertEquals("LC(0)", aa[0])
nova chamada: assertEquals("LC(0)", aa[0], "Era esperado valores iguais, mas  'LC(0)' é diferente de " + " aa[0]")
chamada antiga: assertNull(aa[1])
nova chamada: assertNull(aa[1], "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotNull(event.getMarkerList())
nova chamada: assertNotNull(event.getMarkerList(), "Era esperado não nulo, mas " + result792 + " <event.getMarkerList()> é nulo")
chamada antiga: assertNotNull(remoteEvent.getMarkerList())
nova chamada: assertNotNull(remoteEvent.getMarkerList(), "Era esperado não nulo, mas " + result793 + " <remoteEvent.getMarkerList()> é nulo")
chamada antiga: assertEquals(Arrays.asList(marker), remoteEvent.getMarkerList())
nova chamada: assertEquals(Arrays.asList(marker), remoteEvent.getMarkerList(), "Era esperado valores iguais, mas " + result794 + " <Arrays.asList(marker)> é diferente de " + result795 + " <remoteEvent.getMarkerList()>")
chamada antiga: assertNotNull(event.getMarkerList())
nova chamada: assertNotNull(event.getMarkerList(), "Era esperado não nulo, mas " + result796 + " <event.getMarkerList()> é nulo")
chamada antiga: assertNotNull(remoteEvent.getMarkerList())
nova chamada: assertNotNull(remoteEvent.getMarkerList(), "Era esperado não nulo, mas " + result797 + " <remoteEvent.getMarkerList()> é nulo")
chamada antiga: assertEquals(Arrays.asList(marker), remoteEvent.getMarkerList())
nova chamada: assertEquals(Arrays.asList(marker), remoteEvent.getMarkerList(), "Era esperado valores iguais, mas " + result798 + " <Arrays.asList(marker)> é diferente de " + result799 + " <remoteEvent.getMarkerList()>")
chamada antiga: assertNotNull(aa)
nova chamada: assertNotNull(aa, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(2, aa.length)
nova chamada: assertEquals(2, aa.length, "Era esperado valores iguais, mas  2 é diferente de " + " aa.length")
chamada antiga: assertEquals(largeString, stringBack)
nova chamada: assertEquals(largeString, stringBack, "Era esperado valores iguais, mas  largeString é diferente de " + " stringBack")
chamada antiga: assertEquals(original.getLevel(), afterSerialization.getLevel())
nova chamada: assertEquals(original.getLevel(), afterSerialization.getLevel(), "Era esperado valores iguais, mas " + result800 + " <original.getLevel()> é diferente de " + result801 + " <afterSerialization.getLevel()>")
chamada antiga: assertEquals(original.getFormattedMessage(), afterSerialization.getFormattedMessage())
nova chamada: assertEquals(original.getFormattedMessage(), afterSerialization.getFormattedMessage(), "Era esperado valores iguais, mas " + result802 + " <original.getFormattedMessage()> é diferente de " + result803 + " <afterSerialization.getFormattedMessage()>")
chamada antiga: assertEquals(original.getMessage(), afterSerialization.getMessage())
nova chamada: assertEquals(original.getMessage(), afterSerialization.getMessage(), "Era esperado valores iguais, mas " + result804 + " <original.getMessage()> é diferente de " + result805 + " <afterSerialization.getMessage()>")
chamada antiga: assertEquals(witness, afterSerialization.getThrowableProxy())
nova chamada: assertEquals(witness, afterSerialization.getThrowableProxy(), "Era esperado valores iguais, mas  witness é diferente de " + result806 + " <afterSerialization.getThrowableProxy()>")
chamada antiga: assertTrue(loggerFactory.isStarted())
nova chamada: assertTrue(loggerFactory.isStarted(), "Era esperado verdadeiro, mas " + result807 + " <loggerFactory.isStarted()> é falso")
chamada antiga: assertNull(event.formattedMessage)
nova chamada: assertNull(event.formattedMessage, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals("x=12", event.getFormattedMessage())
nova chamada: assertEquals("x=12", event.getFormattedMessage(), "Era esperado valores iguais, mas  'x=12' é diferente de " + result808 + " <event.getFormattedMessage()>")
chamada antiga: assertNull(event.formattedMessage)
nova chamada: assertNull(event.formattedMessage, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals("12-13", event.getFormattedMessage())
nova chamada: assertEquals("12-13", event.getFormattedMessage(), "Era esperado valores iguais, mas  '12-13' é diferente de " + result809 + " <event.getFormattedMessage()>")
chamada antiga: assertNull(event.formattedMessage)
nova chamada: assertNull(event.formattedMessage, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(message, event.getFormattedMessage())
nova chamada: assertEquals(message, event.getFormattedMessage(), "Era esperado valores iguais, mas  message é diferente de " + result810 + " <event.getFormattedMessage()>")
chamada antiga: assertNull(event.formattedMessage)
nova chamada: assertNull(event.formattedMessage, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(message, event.getFormattedMessage())
nova chamada: assertEquals(message, event.getFormattedMessage(), "Era esperado valores iguais, mas  message é diferente de " + result811 + " <event.getFormattedMessage()>")
chamada antiga: assertTrue(sps.stringList.isEmpty())
nova chamada: assertTrue(sps.stringList.isEmpty(), "Era esperado verdadeiro, mas " + result812 + " <sps.stringList.isEmpty()> é falso")
chamada antiga: assertEquals(1, wlila.list.size())
nova chamada: assertEquals(1, wlila.list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result813 + " <wlila.list.size()>")
chamada antiga: assertEquals("59", result)
nova chamada: assertEquals("59", result, "Era esperado valores iguais, mas  '59' é diferente de " + " result")
chamada antiga: assertEquals(0, listAppender.list.size())
nova chamada: assertEquals(0, listAppender.list.size(), "Era esperado valores iguais, mas  0 é diferente de " + result814 + " <listAppender.list.size()>")
chamada antiga: assertEquals(1, listAppender.list.size())
nova chamada: assertEquals(1, listAppender.list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result815 + " <listAppender.list.size()>")
chamada antiga: assertEquals(Status.WARN, s0.getLevel())
nova chamada: assertEquals(Status.WARN, s0.getLevel(), "Era esperado valores iguais, mas  Status.WARN é diferente de " + result816 + " <s0.getLevel()>")
chamada antiga: assertTrue(s0.getMessage().startsWith("Attempted to append to non started"))
nova chamada: assertTrue(s0.getMessage().startsWith("Attempted to append to non started"), "Era esperado verdadeiro, mas " + result817 + " <s0.getMessage().startsWith('Attempted to append to non started')> é falso")
chamada antiga: assertEquals(1, listAppender.list.size())
nova chamada: assertEquals(1, listAppender.list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result818 + " <listAppender.list.size()>")
chamada antiga: assertEquals(0, listAppender.list.size())
nova chamada: assertEquals(0, listAppender.list.size(), "Era esperado valores iguais, mas  0 é diferente de " + result819 + " <listAppender.list.size()>")
chamada antiga: assertEquals(3, listAppender.list.size())
nova chamada: assertEquals(3, listAppender.list.size(), "Era esperado valores iguais, mas  3 é diferente de " + result820 + " <listAppender.list.size()>")
chamada antiga: assertEquals(Level.INFO, a_b.getEffectiveLevel())
nova chamada: assertEquals(Level.INFO, a_b.getEffectiveLevel(), "Era esperado valores iguais, mas  Level.INFO é diferente de " + result821 + " <a_b.getEffectiveLevel()>")
chamada antiga: assertEquals(Level.INFO, a_b.getEffectiveLevel())
nova chamada: assertEquals(Level.INFO, a_b.getEffectiveLevel(), "Era esperado valores iguais, mas  Level.INFO é diferente de " + result822 + " <a_b.getEffectiveLevel()>")
chamada antiga: assertEquals(NOPLoggingEventBuilder.class, leb.getClass())
nova chamada: assertEquals(NOPLoggingEventBuilder.class, leb.getClass(), "Era esperado valores iguais, mas  NOPLoggingEventBuilder.class é diferente de " + result823 + " <leb.getClass()>")
chamada antiga: assertEquals(root.getEffectiveLevel(), loggerTest.getEffectiveLevel())
nova chamada: assertEquals(root.getEffectiveLevel(), loggerTest.getEffectiveLevel(), "Era esperado valores iguais, mas " + result824 + " <root.getEffectiveLevel()> é diferente de " + result825 + " <loggerTest.getEffectiveLevel()>")
chamada antiga: assertEquals(root.getEffectiveLevel(), loggerTest.getEffectiveLevel())
nova chamada: assertEquals(root.getEffectiveLevel(), loggerTest.getEffectiveLevel(), "Era esperado valores iguais, mas " + result826 + " <root.getEffectiveLevel()> é diferente de " + result827 + " <loggerTest.getEffectiveLevel()>")
chamada antiga: assertEquals(root.getEffectiveLevel(), loggerTest.getEffectiveLevel())
nova chamada: assertEquals(root.getEffectiveLevel(), loggerTest.getEffectiveLevel(), "Era esperado valores iguais, mas " + result828 + " <root.getEffectiveLevel()> é diferente de " + result829 + " <loggerTest.getEffectiveLevel()>")
chamada antiga: assertEquals(root.getEffectiveLevel(), child.getEffectiveLevel())
nova chamada: assertEquals(root.getEffectiveLevel(), child.getEffectiveLevel(), "Era esperado valores iguais, mas " + result830 + " <root.getEffectiveLevel()> é diferente de " + result831 + " <child.getEffectiveLevel()>")
chamada antiga: assertEquals("12", event.getFormattedMessage())
nova chamada: assertEquals("12", event.getFormattedMessage(), "Era esperado valores iguais, mas  '12' é diferente de " + result832 + " <event.getFormattedMessage()>")
chamada antiga: assertEquals("12-13", event.getFormattedMessage())
nova chamada: assertEquals("12-13", event.getFormattedMessage(), "Era esperado valores iguais, mas  '12-13' é diferente de " + result833 + " <event.getFormattedMessage()>")
chamada antiga: assertEquals("test", event.getFormattedMessage())
nova chamada: assertEquals("test", event.getFormattedMessage(), "Era esperado valores iguais, mas  'test' é diferente de " + result834 + " <event.getFormattedMessage()>")
chamada antiga: assertEquals("test", event.getFormattedMessage())
nova chamada: assertEquals("test", event.getFormattedMessage(), "Era esperado valores iguais, mas  'test' é diferente de " + result835 + " <event.getFormattedMessage()>")
chamada antiga: assertEquals("12", formattedMessage)
nova chamada: assertEquals("12", formattedMessage, "Era esperado valores iguais, mas  '12' é diferente de " + " formattedMessage")
chamada antiga: Assertions.assertEquals("x", x.getName())
nova chamada: assertEquals("x", x.getName(), "Era esperado valores iguais, mas  'x' é diferente de " + result836 + " <x.getName()>")
chamada antiga: Assertions.assertEquals(clc.getRootLogger(), x.parent)
nova chamada: assertEquals(clc.getRootLogger(), x.parent, "Era esperado valores iguais, mas " + result837 + " <clc.getRootLogger()> é diferente de " + " x.parent")
chamada antiga: Assertions.assertEquals("a.b.c", abc.getName())
nova chamada: assertEquals("a.b.c", abc.getName(), "Era esperado valores iguais, mas  'a.b.c' é diferente de " + result838 + " <abc.getName()>")
chamada antiga: Assertions.assertEquals(Level.DEBUG, abc.getEffectiveLevel())
nova chamada: assertEquals(Level.DEBUG, abc.getEffectiveLevel(), "Era esperado valores iguais, mas  Level.DEBUG é diferente de " + result839 + " <abc.getEffectiveLevel()>")
chamada antiga: Assertions.assertEquals("x.y.z", xyz.getName())
nova chamada: assertEquals("x.y.z", xyz.getName(), "Era esperado valores iguais, mas  'x.y.z' é diferente de " + result840 + " <xyz.getName()>")
chamada antiga: Assertions.assertEquals("x.y", xyz.parent.getName())
nova chamada: assertEquals("x.y", xyz.parent.getName(), "Era esperado valores iguais, mas  'x.y' é diferente de " + result841 + " <xyz.parent.getName()>")
chamada antiga: Assertions.assertEquals("x", xyz.parent.parent.getName())
nova chamada: assertEquals("x", xyz.parent.parent.getName(), "Era esperado valores iguais, mas  'x' é diferente de " + result842 + " <xyz.parent.parent.getName()>")
chamada antiga: Assertions.assertEquals("root", xyz.parent.parent.parent.getName())
nova chamada: assertEquals("root", xyz.parent.parent.parent.getName(), "Era esperado valores iguais, mas  'root' é diferente de " + result843 + " <xyz.parent.parent.parent.getName()>")
chamada antiga: Assertions.assertEquals("x.y.z", xyz_.getName())
nova chamada: assertEquals("x.y.z", xyz_.getName(), "Era esperado valores iguais, mas  'x.y.z' é diferente de " + result844 + " <xyz_.getName()>")
chamada antiga: assertTrue(logger.isDebugEnabled())
nova chamada: assertTrue(logger.isDebugEnabled(), "Era esperado verdadeiro, mas " + result845 + " <logger.isDebugEnabled()> é falso")
chamada antiga: assertTrue(logger.isInfoEnabled())
nova chamada: assertTrue(logger.isInfoEnabled(), "Era esperado verdadeiro, mas " + result846 + " <logger.isInfoEnabled()> é falso")
chamada antiga: assertTrue(logger.isWarnEnabled())
nova chamada: assertTrue(logger.isWarnEnabled(), "Era esperado verdadeiro, mas " + result847 + " <logger.isWarnEnabled()> é falso")
chamada antiga: assertTrue(logger.isErrorEnabled())
nova chamada: assertTrue(logger.isErrorEnabled(), "Era esperado verdadeiro, mas " + result848 + " <logger.isErrorEnabled()> é falso")
chamada antiga: assertTrue(logger.isEnabledFor(Level.INFO))
nova chamada: assertTrue(logger.isEnabledFor(Level.INFO), "Era esperado verdadeiro, mas " + result849 + " <logger.isEnabledFor(Level.INFO)> é falso")
chamada antiga: assertFalse(logger.isEnabledFor(Level.INFO))
nova chamada: assertFalse(logger.isEnabledFor(Level.INFO), "Era esperado falso, mas " + result850 + " <logger.isEnabledFor(Level.INFO)> é verdadeiro ")
chamada antiga: assertFalse(logger.isDebugEnabled())
nova chamada: assertFalse(logger.isDebugEnabled(), "Era esperado falso, mas " + result851 + " <logger.isDebugEnabled()> é verdadeiro ")
chamada antiga: assertFalse(logger.isInfoEnabled())
nova chamada: assertFalse(logger.isInfoEnabled(), "Era esperado falso, mas " + result852 + " <logger.isInfoEnabled()> é verdadeiro ")
chamada antiga: assertFalse(logger.isWarnEnabled())
nova chamada: assertFalse(logger.isWarnEnabled(), "Era esperado falso, mas " + result853 + " <logger.isWarnEnabled()> é verdadeiro ")
chamada antiga: assertFalse(logger.isErrorEnabled())
nova chamada: assertFalse(logger.isErrorEnabled(), "Era esperado falso, mas " + result854 + " <logger.isErrorEnabled()> é verdadeiro ")
chamada antiga: assertTrue(logger.isDebugEnabled(blueMarker))
nova chamada: assertTrue(logger.isDebugEnabled(blueMarker), "Era esperado verdadeiro, mas " + result855 + " <logger.isDebugEnabled(blueMarker)> é falso")
chamada antiga: assertFalse(logger.isDebugEnabled(blueMarker))
nova chamada: assertFalse(logger.isDebugEnabled(blueMarker), "Era esperado falso, mas " + result856 + " <logger.isDebugEnabled(blueMarker)> é verdadeiro ")
chamada antiga: assertNotNull(context.getTurboFilterList().get(0))
nova chamada: assertNotNull(context.getTurboFilterList().get(0), "Era esperado não nulo, mas " + result857 + " <context.getTurboFilterList().get(0)> é nulo")
chamada antiga: assertEquals(0, context.getTurboFilterList().size())
nova chamada: assertEquals(0, context.getTurboFilterList().size(), "Era esperado valores iguais, mas  0 é diferente de " + result858 + " <context.getTurboFilterList().size()>")
chamada antiga: assertEquals(msg, baos.toString())
nova chamada: assertEquals(msg, baos.toString(), "Era esperado valores iguais, mas  msg é diferente de " + result859 + " <baos.toString()>")
chamada antiga: assertEquals(msg, new String(baos.toByteArray(), utf8Charset))
nova chamada: assertEquals(msg, new String(baos.toByteArray(), utf8Charset), "Era esperado valores iguais, mas  msg é diferente de " + " new String(baos.toByteArray(), utf8Charset)")
chamada antiga: assertTrue(!ple.isStarted())
nova chamada: assertTrue(!ple.isStarted(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(ple.isStarted())
nova chamada: assertTrue(ple.isStarted(), "Era esperado verdadeiro, mas " + result860 + " <ple.isStarted()> é falso")
chamada antiga: assertTrue(fileAppender.isStarted())
nova chamada: assertTrue(fileAppender.isStarted(), "Era esperado verdadeiro, mas " + result861 + " <fileAppender.isStarted()> é falso")
chamada antiga: assertTrue(fileAppender.getEncoder() instanceof LayoutWrappingEncoder)
nova chamada: assertTrue(fileAppender.getEncoder() instanceof LayoutWrappingEncoder, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(fileAppender.isStarted())
nova chamada: assertTrue(fileAppender.isStarted(), "Era esperado verdadeiro, mas " + result862 + " <fileAppender.isStarted()> é falso")
chamada antiga: assertEquals(immediateFlush, Boolean.valueOf(fileAppender.isImmediateFlush()))
nova chamada: assertEquals(immediateFlush, Boolean.valueOf(fileAppender.isImmediateFlush()), "Era esperado valores iguais, mas  immediateFlush é diferente de " + result863 + " <Boolean.valueOf(fileAppender.isImmediateFlush())>")
chamada antiga: assertEquals(Level.DEBUG, root.getLevel())
nova chamada: assertEquals(Level.DEBUG, root.getLevel(), "Era esperado valores iguais, mas  Level.DEBUG é diferente de " + result864 + " <root.getLevel()>")
chamada antiga: assertEquals(Level.DEBUG, root.getEffectiveLevel())
nova chamada: assertEquals(Level.DEBUG, root.getEffectiveLevel(), "Era esperado valores iguais, mas  Level.DEBUG é diferente de " + result865 + " <root.getEffectiveLevel()>")
chamada antiga: assertNotNull(x)
nova chamada: assertNotNull(x, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("x", x.getName())
nova chamada: assertEquals("x", x.getName(), "Era esperado valores iguais, mas  'x' é diferente de " + result866 + " <x.getName()>")
chamada antiga: assertNull(x.getLevel())
nova chamada: assertNull(x.getLevel(), "Era esperado nulo, mas " + result867 + " <x.getLevel()> não é nulo")
chamada antiga: assertEquals(Level.DEBUG, x.getEffectiveLevel())
nova chamada: assertEquals(Level.DEBUG, x.getEffectiveLevel(), "Era esperado valores iguais, mas  Level.DEBUG é diferente de " + result868 + " <x.getEffectiveLevel()>")
chamada antiga: assertEquals(3, lc.getLoggerList().size())
nova chamada: assertEquals(3, lc.getLoggerList().size(), "Era esperado valores iguais, mas  3 é diferente de " + result869 + " <lc.getLoggerList().size()>")
chamada antiga: assertEquals(4, lc.getLoggerList().size())
nova chamada: assertEquals(4, lc.getLoggerList().size(), "Era esperado valores iguais, mas  4 é diferente de " + result870 + " <lc.getLoggerList().size()>")
chamada antiga: assertEquals(1, lc.getLoggerList().size())
nova chamada: assertEquals(1, lc.getLoggerList().size(), "Era esperado valores iguais, mas  1 é diferente de " + result871 + " <lc.getLoggerList().size()>")
chamada antiga: assertEquals(3, instanceCount())
nova chamada: assertEquals(3, instanceCount(), "Era esperado valores iguais, mas  3 é diferente de " + result872 + " <instanceCount()>")
chamada antiga: assertEquals(3, instanceCount())
nova chamada: assertEquals(3, instanceCount(), "Era esperado valores iguais, mas  3 é diferente de " + result873 + " <instanceCount()>")
chamada antiga: assertEquals(xy, xy2)
nova chamada: assertEquals(xy, xy2, "Era esperado valores iguais, mas  xy é diferente de " + " xy2")
chamada antiga: assertEquals(x, x2)
nova chamada: assertEquals(x, x2, "Era esperado valores iguais, mas  x é diferente de " + " x2")
chamada antiga: assertEquals(3, instanceCount())
nova chamada: assertEquals(3, instanceCount(), "Era esperado valores iguais, mas  3 é diferente de " + result874 + " <instanceCount()>")
chamada antiga: assertEquals(1, instanceCount())
nova chamada: assertEquals(1, instanceCount(), "Era esperado valores iguais, mas  1 é diferente de " + result875 + " <instanceCount()>")
chamada antiga: assertEquals(4, instanceCount())
nova chamada: assertEquals(4, instanceCount(), "Era esperado valores iguais, mas  4 é diferente de " + result876 + " <instanceCount()>")
chamada antiga: assertEquals(102, instanceCount())
nova chamada: assertEquals(102, instanceCount(), "Era esperado valores iguais, mas  102 é diferente de " + result877 + " <instanceCount()>")
chamada antiga: assertEquals(Level.DEBUG, root.getEffectiveLevel())
nova chamada: assertEquals(Level.DEBUG, root.getEffectiveLevel(), "Era esperado valores iguais, mas  Level.DEBUG é diferente de " + result878 + " <root.getEffectiveLevel()>")
chamada antiga: assertTrue(root.isDebugEnabled())
nova chamada: assertTrue(root.isDebugEnabled(), "Era esperado verdadeiro, mas " + result879 + " <root.isDebugEnabled()> é falso")
chamada antiga: assertEquals(Level.DEBUG, a.getEffectiveLevel())
nova chamada: assertEquals(Level.DEBUG, a.getEffectiveLevel(), "Era esperado valores iguais, mas  Level.DEBUG é diferente de " + result880 + " <a.getEffectiveLevel()>")
chamada antiga: assertEquals(Level.DEBUG, ab.getEffectiveLevel())
nova chamada: assertEquals(Level.DEBUG, ab.getEffectiveLevel(), "Era esperado valores iguais, mas  Level.DEBUG é diferente de " + result881 + " <ab.getEffectiveLevel()>")
chamada antiga: assertEquals(Level.DEBUG, root.getLevel())
nova chamada: assertEquals(Level.DEBUG, root.getLevel(), "Era esperado valores iguais, mas  Level.DEBUG é diferente de " + result882 + " <root.getLevel()>")
chamada antiga: assertNull(a.getLevel())
nova chamada: assertNull(a.getLevel(), "Era esperado nulo, mas " + result883 + " <a.getLevel()> não é nulo")
chamada antiga: assertNull(ab.getLevel())
nova chamada: assertNull(ab.getLevel(), "Era esperado nulo, mas " + result884 + " <ab.getLevel()> não é nulo")
chamada antiga: assertTrue(nopTF.isStarted())
nova chamada: assertTrue(nopTF.isStarted(), "Era esperado verdadeiro, mas " + result885 + " <nopTF.isStarted()> é falso")
chamada antiga: assertFalse(nopTF.isStarted())
nova chamada: assertFalse(nopTF.isStarted(), "Era esperado falso, mas " + result886 + " <nopTF.isStarted()> é verdadeiro ")
chamada antiga: assertEquals("valA", lc.getProperty("keyA"))
nova chamada: assertEquals("valA", lc.getProperty("keyA"), "Era esperado valores iguais, mas  'valA' é diferente de " + result887 + " <lc.getProperty('keyA')>")
chamada antiga: assertEquals("valA", lc.getObject("keyA"))
nova chamada: assertEquals("valA", lc.getObject("keyA"), "Era esperado valores iguais, mas  'valA' é diferente de " + result888 + " <lc.getObject('keyA')>")
chamada antiga: assertNull(lc.getProperty("keyA"))
nova chamada: assertNull(lc.getProperty("keyA"), "Era esperado nulo, mas " + result889 + " <lc.getProperty('keyA')> não é nulo")
chamada antiga: assertNull(lc.getObject("keyA"))
nova chamada: assertNull(lc.getObject("keyA"), "Era esperado nulo, mas " + result890 + " <lc.getObject('keyA')> não é nulo")
chamada antiga: assertTrue(root.isTraceEnabled())
nova chamada: assertTrue(root.isTraceEnabled(), "Era esperado verdadeiro, mas " + result891 + " <root.isTraceEnabled()> é falso")
chamada antiga: assertFalse(root.isTraceEnabled())
nova chamada: assertFalse(root.isTraceEnabled(), "Era esperado falso, mas " + result892 + " <root.isTraceEnabled()> é verdadeiro ")
chamada antiga: assertTrue(root.isDebugEnabled())
nova chamada: assertTrue(root.isDebugEnabled(), "Era esperado verdadeiro, mas " + result893 + " <root.isDebugEnabled()> é falso")
chamada antiga: assertNotNull(lc.getObject(CoreConstants.EVALUATOR_MAP))
nova chamada: assertNotNull(lc.getObject(CoreConstants.EVALUATOR_MAP), "Era esperado não nulo, mas " + result894 + " <lc.getObject(CoreConstants.EVALUATOR_MAP)> é nulo")
chamada antiga: assertNotNull(fileCollisions)
nova chamada: assertNotNull(fileCollisions, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(fileCollisions.isEmpty())
nova chamada: assertTrue(fileCollisions.isEmpty(), "Era esperado verdadeiro, mas " + result895 + " <fileCollisions.isEmpty()> é falso")
chamada antiga: assertNotNull(filenamePatternCollisionMap)
nova chamada: assertNotNull(filenamePatternCollisionMap, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(filenamePatternCollisionMap.isEmpty())
nova chamada: assertTrue(filenamePatternCollisionMap.isEmpty(), "Era esperado verdadeiro, mas " + result896 + " <filenamePatternCollisionMap.isEmpty()> é falso")
chamada antiga: assertEquals(38, wordList.size())
nova chamada: assertEquals(38, wordList.size(), "Era esperado valores iguais, mas  38 é diferente de " + result897 + " <wordList.size()>")
chamada antiga: assertEquals("When", wordList.get(0))
nova chamada: assertEquals("When", wordList.get(0), "Era esperado valores iguais, mas  'When' é diferente de " + result898 + " <wordList.get(0)>")
chamada antiga: assertEquals("'Beagle,'", wordList.get(4))
nova chamada: assertEquals("'Beagle,'", wordList.get(4), "Era esperado valores iguais, mas  ''Beagle,'' é diferente de " + result899 + " <wordList.get(4)>")
chamada antiga: assertEquals("of", wordList.get(17))
nova chamada: assertEquals("of", wordList.get(17), "Era esperado valores iguais, mas  'of' é diferente de " + result900 + " <wordList.get(17)>")
chamada antiga: assertEquals(0, selector.getCount())
nova chamada: assertEquals(0, selector.getCount(), "Era esperado valores iguais, mas  0 é diferente de " + result901 + " <selector.getCount()>")
chamada antiga: assertEquals("tata", selector.getLoggerContext().getName())
nova chamada: assertEquals("tata", selector.getLoggerContext().getName(), "Era esperado valores iguais, mas  'tata' é diferente de " + result902 + " <selector.getLoggerContext().getName()>")
chamada antiga: assertEquals("titi", selector.getLoggerContext().getName())
nova chamada: assertEquals("titi", selector.getLoggerContext().getName(), "Era esperado valores iguais, mas  'titi' é diferente de " + result903 + " <selector.getLoggerContext().getName()>")
chamada antiga: assertEquals(2, selector.getCount())
nova chamada: assertEquals(2, selector.getCount(), "Era esperado valores iguais, mas  2 é diferente de " + result904 + " <selector.getCount()>")
chamada antiga: assertEquals("toto", context.getName())
nova chamada: assertEquals("toto", context.getName(), "Era esperado valores iguais, mas  'toto' é diferente de " + result905 + " <context.getName()>")
chamada antiga: assertEquals("tata", context.getName())
nova chamada: assertEquals("tata", context.getName(), "Era esperado valores iguais, mas  'tata' é diferente de " + result906 + " <context.getName()>")
chamada antiga: assertEquals(2, selector.getCount())
nova chamada: assertEquals(2, selector.getCount(), "Era esperado valores iguais, mas  2 é diferente de " + result907 + " <selector.getCount()>")
chamada antiga: assertEquals("default", context.getName())
nova chamada: assertEquals("default", context.getName(), "Era esperado valores iguais, mas  'default' é diferente de " + result908 + " <context.getName()>")
chamada antiga: assertTrue(evaluator.evaluate(event))
nova chamada: assertTrue(evaluator.evaluate(event), "Era esperado verdadeiro, mas " + result909 + " <evaluator.evaluate(event)> é falso")
chamada antiga: assertFalse(evaluator.evaluate(event))
nova chamada: assertFalse(evaluator.evaluate(event), "Era esperado falso, mas " + result910 + " <evaluator.evaluate(event)> é verdadeiro ")
chamada antiga: assertFalse(evaluator.evaluate(event))
nova chamada: assertFalse(evaluator.evaluate(event), "Era esperado falso, mas " + result911 + " <evaluator.evaluate(event)> é verdadeiro ")
chamada antiga: assertEquals(julLevel, julLogger.getLevel())
nova chamada: assertEquals(julLevel, julLogger.getLevel(), "Era esperado valores iguais, mas  julLevel é diferente de " + result912 + " <julLogger.getLevel()>")
chamada antiga: assertEquals(julLevel, julLogger.getLevel())
nova chamada: assertEquals(julLevel, julLogger.getLevel(), "Era esperado valores iguais, mas  julLevel é diferente de " + result913 + " <julLogger.getLevel()>")
chamada antiga: assertFalse(julLogger.isLoggable(java.util.logging.Level.CONFIG))
nova chamada: assertFalse(julLogger.isLoggable(java.util.logging.Level.CONFIG), "Era esperado falso, mas " + result914 + " <julLogger.isLoggable(java.util.logging.Level.CONFIG)> é verdadeiro ")
chamada antiga: assertEquals("Unexpected level [null]", e.getMessage())
nova chamada: assertEquals("Unexpected level [null]", e.getMessage(), "Era esperado valores iguais, mas  'Unexpected level [null]' é diferente de " + result915 + " <e.getMessage()>")
chamada antiga: assertEquals(parent.getEffectiveLevel(), child.getEffectiveLevel())
nova chamada: assertEquals(parent.getEffectiveLevel(), child.getEffectiveLevel(), "Era esperado valores iguais, mas " + result916 + " <parent.getEffectiveLevel()> é diferente de " + result917 + " <child.getEffectiveLevel()>")
chamada antiga: assertEquals(Level.DEBUG, child.getEffectiveLevel())
nova chamada: assertEquals(Level.DEBUG, child.getEffectiveLevel(), "Era esperado valores iguais, mas  Level.DEBUG é diferente de " + result918 + " <child.getEffectiveLevel()>")
chamada antiga: assertEquals(Level.TRACE, Level.toLevel("TRACE"))
nova chamada: assertEquals(Level.TRACE, Level.toLevel("TRACE"), "Era esperado valores iguais, mas  Level.TRACE é diferente de " + result919 + " <Level.toLevel('TRACE')>")
chamada antiga: assertEquals(Level.DEBUG, Level.toLevel("DEBUG"))
nova chamada: assertEquals(Level.DEBUG, Level.toLevel("DEBUG"), "Era esperado valores iguais, mas  Level.DEBUG é diferente de " + result920 + " <Level.toLevel('DEBUG')>")
chamada antiga: assertEquals(Level.INFO, Level.toLevel("INFO"))
nova chamada: assertEquals(Level.INFO, Level.toLevel("INFO"), "Era esperado valores iguais, mas  Level.INFO é diferente de " + result921 + " <Level.toLevel('INFO')>")
chamada antiga: assertEquals(Level.WARN, Level.toLevel("WARN"))
nova chamada: assertEquals(Level.WARN, Level.toLevel("WARN"), "Era esperado valores iguais, mas  Level.WARN é diferente de " + result922 + " <Level.toLevel('WARN')>")
chamada antiga: assertEquals(Level.ERROR, Level.toLevel("ERROR"))
nova chamada: assertEquals(Level.ERROR, Level.toLevel("ERROR"), "Era esperado valores iguais, mas  Level.ERROR é diferente de " + result923 + " <Level.toLevel('ERROR')>")
chamada antiga: assertEquals(Level.INFO, Level.toLevel("INFO "))
nova chamada: assertEquals(Level.INFO, Level.toLevel("INFO "), "Era esperado valores iguais, mas  Level.INFO é diferente de " + result924 + " <Level.toLevel('INFO ')>")
chamada antiga: assertEquals(name, abbreviator.abbreviate(name))
nova chamada: assertEquals(name, abbreviator.abbreviate(name), "Era esperado valores iguais, mas  name é diferente de " + result925 + " <abbreviator.abbreviate(name)>")
chamada antiga: assertEquals("456", result)
nova chamada: assertEquals("456", result, "Era esperado valores iguais, mas  '456' é diferente de " + " result")
chamada antiga: assertEquals("", result)
nova chamada: assertEquals("", result, "Era esperado valores iguais, mas  '' é diferente de " + " result")
chamada antiga: assertEquals("k=\"v\"", result)
nova chamada: assertEquals("k=\"v\"", result, "Era esperado valores iguais, mas  'k=\'v\'' é diferente de " + " result")
chamada antiga: assertTrue(buf.toString().matches(regex))
nova chamada: assertTrue(buf.toString().matches(regex), "Era esperado verdadeiro, mas " + result926 + " <buf.toString().matches(regex)> é falso")
chamada antiga: assertEquals("Some message", buf.toString())
nova chamada: assertEquals("Some message", buf.toString(), "Era esperado valores iguais, mas  'Some message' é diferente de " + result927 + " <buf.toString()>")
chamada antiga: assertEquals(CoreConstants.LINE_SEPARATOR, buf.toString())
nova chamada: assertEquals(CoreConstants.LINE_SEPARATOR, buf.toString(), "Era esperado valores iguais, mas  CoreConstants.LINE_SEPARATOR é diferente de " + result928 + " <buf.toString()>")
chamada antiga: assertEquals(witness.toString(), buf.toString())
nova chamada: assertEquals(witness.toString(), buf.toString(), "Era esperado valores iguais, mas " + result929 + " <witness.toString()> é diferente de " + result930 + " <buf.toString()>")
chamada antiga: assertEquals(this.getClass().getName(), buf.toString())
nova chamada: assertEquals(this.getClass().getName(), buf.toString(), "Era esperado valores iguais, mas " + result931 + " <this.getClass().getName()> é diferente de " + result932 + " <buf.toString()>")
chamada antiga: assertEquals("testMethodOfCaller", buf.toString())
nova chamada: assertEquals("testMethodOfCaller", buf.toString(), "Era esperado valores iguais, mas  'testMethodOfCaller' é diferente de " + result933 + " <buf.toString()>")
chamada antiga: assertEquals("ConverterTest.java", buf.toString())
nova chamada: assertEquals("ConverterTest.java", buf.toString(), "Era esperado valores iguais, mas  'ConverterTest.java' é diferente de " + result934 + " <buf.toString()>")
chamada antiga: assertEquals(buf0.toString(), buf1.toString())
nova chamada: assertEquals(buf0.toString(), buf1.toString(), "Era esperado valores iguais, mas " + result935 + " <buf0.toString()> é diferente de " + result936 + " <buf1.toString()>")
chamada antiga: assertTrue(buf.toString().startsWith(expected))
nova chamada: assertTrue(buf.toString().startsWith(expected), "Era esperado verdadeiro, mas " + result937 + " <buf.toString().startsWith(expected)> é falso")
chamada antiga: assertEquals("someValue", result)
nova chamada: assertEquals("someValue", result, "Era esperado valores iguais, mas  'someValue' é diferente de " + " result")
chamada antiga: assertEquals("aValue", result)
nova chamada: assertEquals("aValue", result, "Era esperado valores iguais, mas  'aValue' é diferente de " + " result")
chamada antiga: assertEquals("v", result)
nova chamada: assertEquals("v", result, "Era esperado valores iguais, mas  'v' é diferente de " + " result")
chamada antiga: assertTrue(converter.isStarted())
nova chamada: assertTrue(converter.isStarted(), "Era esperado verdadeiro, mas " + result938 + " <converter.isStarted()> é falso")
chamada antiga: assertEquals("123", converter.convert(event))
nova chamada: assertEquals("123", converter.convert(event), "Era esperado valores iguais, mas  '123' é diferente de " + result939 + " <converter.convert(event)>")
chamada antiga: assertEquals(k + "=" + v, result)
nova chamada: assertEquals(k + "=" + v, result, "Era esperado valores iguais, mas  k + '=' + v é diferente de " + " result")
chamada antiga: assertTrue(result.contains("XYZ"))
nova chamada: assertTrue(result.contains("XYZ"), "Era esperado verdadeiro, mas " + result940 + " <result.contains('XYZ')> é falso")
chamada antiga: assertEquals(sw.toString(), result)
nova chamada: assertEquals(sw.toString(), result, "Era esperado valores iguais, mas " + result941 + " <sw.toString()> é diferente de " + " result")
chamada antiga: assertEquals("", result)
nova chamada: assertEquals("", result, "Era esperado valores iguais, mas  '' é diferente de " + " result")
chamada antiga: assertEquals(name, result)
nova chamada: assertEquals(name, result, "Era esperado valores iguais, mas  name é diferente de " + " result")
chamada antiga: assertEquals("test [ child ]", result)
nova chamada: assertEquals("test [ child ]", result, "Era esperado valores iguais, mas  'test [ child ]' é diferente de " + " result")
chamada antiga: assertEquals("testParent [ child1, child2, child3 ]", result)
nova chamada: assertEquals("testParent [ child1, child2, child3 ]", result, "Era esperado valores iguais, mas  'testParent [ child1, child2, child3 ]' é diferente de " + " result")
chamada antiga: assertEquals("<191>Aug  7 13:15:00 " + HOSTNAME + " ", converter.convert(le))
nova chamada: assertEquals("<191>Aug  7 13:15:00 " + HOSTNAME + " ", converter.convert(le), "Era esperado valores iguais, mas  '191Aug  7 13:15:00 ' + HOSTNAME + ' ' é diferente de " + result942 + " <converter.convert(le)>")
chamada antiga: assertEquals("<191>Oct 11 22:14:15 " + HOSTNAME + " ", converter.convert(le))
nova chamada: assertEquals("<191>Oct 11 22:14:15 " + HOSTNAME + " ", converter.convert(le), "Era esperado valores iguais, mas  '191Oct 11 22:14:15 ' + HOSTNAME + ' ' é diferente de " + result943 + " <converter.convert(le)>")
chamada antiga: assertEquals("<191>Oct 11 22:14:15 " + HOSTNAME + " ", converter.convert(le))
nova chamada: assertEquals("<191>Oct 11 22:14:15 " + HOSTNAME + " ", converter.convert(le), "Era esperado valores iguais, mas  '191Oct 11 22:14:15 ' + HOSTNAME + ' ' é diferente de " + result944 + " <converter.convert(le)>")
chamada antiga: assertEquals("<191>Oct 11 22:14:15 " + HOSTNAME + " ", converter.convert(le))
nova chamada: assertEquals("<191>Oct 11 22:14:15 " + HOSTNAME + " ", converter.convert(le), "Era esperado valores iguais, mas  '191Oct 11 22:14:15 ' + HOSTNAME + ' ' é diferente de " + result945 + " <converter.convert(le)>")
chamada antiga: assertEquals("<191>Oct 11 22:14:16 " + HOSTNAME + " ", converter.convert(le))
nova chamada: assertEquals("<191>Oct 11 22:14:16 " + HOSTNAME + " ", converter.convert(le), "Era esperado valores iguais, mas  '191Oct 11 22:14:16 ' + HOSTNAME + ' ' é diferente de " + result946 + " <converter.convert(le)>")
chamada antiga: assertEquals("<191>Oct 11 22:14:15 " + host + " ", converter.convert(le))
nova chamada: assertEquals("<191>Oct 11 22:14:15 " + host + " ", converter.convert(le), "Era esperado valores iguais, mas  '191Oct 11 22:14:15 ' + host + ' ' é diferente de " + result947 + " <converter.convert(le)>")
chamada antiga: assertTrue(reader.readLine().contains(t.getMessage()))
nova chamada: assertTrue(reader.readLine().contains(t.getMessage()), "Era esperado verdadeiro, mas " + result948 + " <reader.readLine().contains(t.getMessage())> é falso")
chamada antiga: assertNotNull(reader.readLine())
nova chamada: assertNotNull(reader.readLine(), "Era esperado não nulo, mas " + result949 + " <reader.readLine()> é nulo")
chamada antiga: assertTrue(reader.readLine().contains(t.getMessage()))
nova chamada: assertTrue(reader.readLine().contains(t.getMessage()), "Era esperado verdadeiro, mas " + result950 + " <reader.readLine().contains(t.getMessage())> é falso")
chamada antiga: assertNotNull(reader.readLine())
nova chamada: assertNotNull(reader.readLine(), "Era esperado não nulo, mas " + result951 + " <reader.readLine()> é nulo")
chamada antiga: assertEquals(sw.toString(), result)
nova chamada: assertEquals(sw.toString(), result, "Era esperado valores iguais, mas " + result952 + " <sw.toString()> é diferente de " + " result")
chamada antiga: assertFalse(sa.isStarted())
nova chamada: assertFalse(sa.isStarted(), "Era esperado falso, mas " + result953 + " <sa.isStarted()> é verdadeiro ")
chamada antiga: assertNotNull(appender)
nova chamada: assertNotNull(appender, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(1, listAppender.list.size())
nova chamada: assertEquals(1, listAppender.list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result954 + " <listAppender.list.size()>")
chamada antiga: assertEquals("smoke", eventList.get(0).getMessage())
nova chamada: assertEquals("smoke", eventList.get(0).getMessage(), "Era esperado valores iguais, mas  'smoke' é diferente de " + result955 + " <eventList.get(0).getMessage()>")
chamada antiga: assertNull(getAppenderTracker())
nova chamada: assertNull(getAppenderTracker(), "Era esperado nulo, mas " + result956 + " <getAppenderTracker()> não é nulo")
chamada antiga: assertNull(getAppenderTracker())
nova chamada: assertNull(getAppenderTracker(), "Era esperado nulo, mas " + result957 + " <getAppenderTracker()> não é nulo")
chamada antiga: assertNotNull(listAppender)
nova chamada: assertNotNull(listAppender, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(1, strList.size())
nova chamada: assertEquals(1, strList.size(), "Era esperado valores iguais, mas  1 é diferente de " + result958 + " <strList.size()>")
chamada antiga: assertEquals("DEBUG hello", strList.get(0))
nova chamada: assertEquals("DEBUG hello", strList.get(0), "Era esperado valores iguais, mas  'DEBUG hello' é diferente de " + result959 + " <strList.get(0)>")
chamada antiga: assertNotNull(fileAppenderA)
nova chamada: assertNotNull(fileAppenderA, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(fileAppenderA.isStarted())
nova chamada: assertTrue(fileAppenderA.isStarted(), "Era esperado verdadeiro, mas " + result960 + " <fileAppenderA.isStarted()> é falso")
chamada antiga: assertFalse(fileAppenderA.isStarted())
nova chamada: assertFalse(fileAppenderA.isStarted(), "Era esperado falso, mas " + result961 + " <fileAppenderA.isStarted()> é verdadeiro ")
chamada antiga: assertTrue(fileAppenderA_2.isStarted())
nova chamada: assertTrue(fileAppenderA_2.isStarted(), "Era esperado verdadeiro, mas " + result962 + " <fileAppenderA_2.isStarted()> é falso")
chamada antiga: assertNotNull(listAppender)
nova chamada: assertNotNull(listAppender, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(1, listAppender.list.size())
nova chamada: assertEquals(1, listAppender.list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result963 + " <listAppender.list.size()>")
chamada antiga: assertEquals("smoke", eventList.get(0).getMessage())
nova chamada: assertEquals("smoke", eventList.get(0).getMessage(), "Era esperado valores iguais, mas  'smoke' é diferente de " + result964 + " <eventList.get(0).getMessage()>")
chamada antiga: assertFalse(listAppender.isStarted())
nova chamada: assertFalse(listAppender.isStarted(), "Era esperado falso, mas " + result965 + " <listAppender.isStarted()> é verdadeiro ")
chamada antiga: assertEquals(1, sa.getAppenderTracker().allKeys().size())
nova chamada: assertEquals(1, sa.getAppenderTracker().allKeys().size(), "Era esperado valores iguais, mas  1 é diferente de " + result966 + " <sa.getAppenderTracker().allKeys().size()>")
chamada antiga: assertTrue(sa.getAppenderTracker().allKeys().contains("cycleDefault"))
nova chamada: assertTrue(sa.getAppenderTracker().allKeys().contains("cycleDefault"), "Era esperado verdadeiro, mas " + result967 + " <sa.getAppenderTracker().allKeys().contains('cycleDefault')> é falso")
chamada antiga: assertEquals(1, tracker.allKeys().size())
nova chamada: assertEquals(1, tracker.allKeys().size(), "Era esperado valores iguais, mas  1 é diferente de " + result968 + " <tracker.allKeys().size()>")
chamada antiga: assertTrue(appender.isStarted())
nova chamada: assertTrue(appender.isStarted(), "Era esperado verdadeiro, mas " + result969 + " <appender.isStarted()> é falso")
chamada antiga: assertFalse(appender.isStarted())
nova chamada: assertFalse(appender.isStarted(), "Era esperado falso, mas " + result970 + " <appender.isStarted()> é verdadeiro ")
chamada antiga: assertEquals(0, tracker.allKeys().size())
nova chamada: assertEquals(0, tracker.allKeys().size(), "Era esperado valores iguais, mas  0 é diferente de " + result971 + " <tracker.allKeys().size()>")
chamada antiga: assertNotNull(listAppender)
nova chamada: assertNotNull(listAppender, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(1, listAppender.strList.size())
nova chamada: assertEquals(1, listAppender.strList.size(), "Era esperado valores iguais, mas  1 é diferente de " + result972 + " <listAppender.strList.size()>")
chamada antiga: assertEquals(prefix + msg, strList.get(0))
nova chamada: assertEquals(prefix + msg, strList.get(0), "Era esperado valores iguais, mas  prefix + msg é diferente de " + result973 + " <strList.get(0)>")
chamada antiga: assertNotNull(listAppender)
nova chamada: assertNotNull(listAppender, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(1, listAppender.strList.size())
nova chamada: assertEquals(1, listAppender.strList.size(), "Era esperado valores iguais, mas  1 é diferente de " + result974 + " <listAppender.strList.size()>")
chamada antiga: assertEquals(prefix + msg, strList.get(0))
nova chamada: assertEquals(prefix + msg, strList.get(0), "Era esperado valores iguais, mas  prefix + msg é diferente de " + result975 + " <strList.get(0)>")
chamada antiga: assertNotNull(listAppender)
nova chamada: assertNotNull(listAppender, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(1, listAppender.strList.size())
nova chamada: assertEquals(1, listAppender.strList.size(), "Era esperado valores iguais, mas  1 é diferente de " + result976 + " <listAppender.strList.size()>")
chamada antiga: assertEquals(prefix + msg, strList.get(0))
nova chamada: assertEquals(prefix + msg, strList.get(0), "Era esperado valores iguais, mas  prefix + msg é diferente de " + result977 + " <strList.get(0)>")
chamada antiga: assertEquals(max, tracker.allKeys().size())
nova chamada: assertEquals(max, tracker.allKeys().size(), "Era esperado valores iguais, mas  max é diferente de " + result978 + " <tracker.allKeys().size()>")
chamada antiga: assertNull(tracker.find("" + (diff + 0)))
nova chamada: assertNull(tracker.find("" + (diff + 0)), "Era esperado nulo, mas " + result979 + " <tracker.find('' + (diff + 0))> não é nulo")
chamada antiga: assertEquals(1, tracker.getComponentCount())
nova chamada: assertEquals(1, tracker.getComponentCount(), "Era esperado valores iguais, mas  1 é diferente de " + result980 + " <tracker.getComponentCount()>")
chamada antiga: assertEquals(0, tracker.getComponentCount())
nova chamada: assertEquals(0, tracker.getComponentCount(), "Era esperado valores iguais, mas  0 é diferente de " + result981 + " <tracker.getComponentCount()>")
chamada antiga: assertTrue(discriminator.isStarted())
nova chamada: assertTrue(discriminator.isStarted(), "Era esperado verdadeiro, mas " + result982 + " <discriminator.isStarted()> é falso")
chamada antiga: assertEquals(value, discriminatorValue)
nova chamada: assertEquals(value, discriminatorValue, "Era esperado valores iguais, mas  value é diferente de " + " discriminatorValue")
chamada antiga: assertEquals(new HashMap<String, String>(), event.getMDCPropertyMap())
nova chamada: assertEquals(new HashMap<String, String>(), event.getMDCPropertyMap(), "Era esperado valores iguais, mas  new HashMapString, String() é diferente de " + result983 + " <event.getMDCPropertyMap()>")
chamada antiga: assertEquals(DEFAULT_VAL, discriminatorValue)
nova chamada: assertEquals(DEFAULT_VAL, discriminatorValue, "Era esperado valores iguais, mas  DEFAULT_VAL é diferente de " + " discriminatorValue")
chamada antiga: assertEquals("a", a.getName())
nova chamada: assertEquals("a", a.getName(), "Era esperado valores iguais, mas  'a' é diferente de " + result984 + " <a.getName()>")
chamada antiga: assertEquals("a", a.getName())
nova chamada: assertEquals("a", a.getName(), "Era esperado valores iguais, mas  'a' é diferente de " + result985 + " <a.getName()>")
chamada antiga: assertNull(threadA.x0)
nova chamada: assertNull(threadA.x0, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals("a", threadA.x1)
nova chamada: assertEquals("a", threadA.x1, "Era esperado valores iguais, mas  'a' é diferente de " + " threadA.x1")
chamada antiga: assertNull(threadA.x2)
nova chamada: assertNull(threadA.x2, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(threadB.x0)
nova chamada: assertNull(threadB.x0, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals("b", threadB.x1)
nova chamada: assertEquals("b", threadB.x1, "Era esperado valores iguais, mas  'b' é diferente de " + " threadB.x1")
chamada antiga: assertNull(threadB.x2)
nova chamada: assertNull(threadB.x2, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(MDC.get(key))
nova chamada: assertNull(MDC.get(key), "Era esperado nulo, mas " + result986 + " <MDC.get(key)> não é nulo")
chamada antiga: assertNull(MDC.get(key))
nova chamada: assertNull(MDC.get(key), "Era esperado nulo, mas " + result987 + " <MDC.get(key)> não é nulo")
chamada antiga: assertEquals(controlLoggerMap.size() + 1, lc.size())
nova chamada: assertEquals(controlLoggerMap.size() + 1, lc.size(), "Era esperado valores iguais, mas  controlLoggerMap.size() + 1 é diferente de " + result988 + " <lc.size()>")
chamada antiga: assertEquals(controlLogger.getName(), logger.getName())
nova chamada: assertEquals(controlLogger.getName(), logger.getName(), "Era esperado valores iguais, mas " + result989 + " <controlLogger.getName()> é diferente de " + result990 + " <logger.getName()>")
chamada antiga: assertEquals(controlLogger.getEffectiveLevel(), logger.getEffectiveLevel())
nova chamada: assertEquals(controlLogger.getEffectiveLevel(), logger.getEffectiveLevel(), "Era esperado valores iguais, mas " + result991 + " <controlLogger.getEffectiveLevel()> é diferente de " + result992 + " <logger.getEffectiveLevel()>")
chamada antiga: assertTrue(runner.isContextInjected())
nova chamada: assertTrue(runner.isContextInjected(), "Era esperado verdadeiro, mas " + result993 + " <runner.isContextInjected()> é falso")
chamada antiga: assertTrue(runner.isRunning())
nova chamada: assertTrue(runner.isRunning(), "Era esperado verdadeiro, mas " + result994 + " <runner.isRunning()> é falso")
chamada antiga: assertSame(listener, receiver.getLastListener())
nova chamada: assertSame(listener, receiver.getLastListener(), "Era esperado objetos iguais, mas  listener é diferente de " + result995 + " <receiver.getLastListener()>")
chamada antiga: assertFalse(runner.isRunning())
nova chamada: assertFalse(runner.isRunning(), "Era esperado falso, mas " + result996 + " <runner.isRunning()> é verdadeiro ")
chamada antiga: assertEquals(1, runner.getStartCount())
nova chamada: assertEquals(1, runner.getStartCount(), "Era esperado valores iguais, mas  1 é diferente de " + result997 + " <runner.getStartCount()>")
chamada antiga: assertTrue(receiver.isStarted())
nova chamada: assertTrue(receiver.isStarted(), "Era esperado verdadeiro, mas " + result998 + " <receiver.isStarted()> é falso")
chamada antiga: assertNotNull(status)
nova chamada: assertNotNull(status, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(status instanceof ErrorStatus)
nova chamada: assertTrue(status instanceof ErrorStatus, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(status.getMessage().contains(ex.getMessage()))
nova chamada: assertTrue(status.getMessage().contains(ex.getMessage()), "Era esperado verdadeiro, mas " + result999 + " <status.getMessage().contains(ex.getMessage())> é falso")
chamada antiga: assertSame(ex, status.getThrowable())
nova chamada: assertSame(ex, status.getThrowable(), "Era esperado objetos iguais, mas  ex é diferente de " + result1000 + " <status.getThrowable()>")
chamada antiga: assertEquals(0, runner.getStartCount())
nova chamada: assertEquals(0, runner.getStartCount(), "Era esperado valores iguais, mas  0 é diferente de " + result1001 + " <runner.getStartCount()>")
chamada antiga: assertNotNull(socketFactory)
nova chamada: assertNotNull(socketFactory, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(ssl.isContextCreated())
nova chamada: assertTrue(ssl.isContextCreated(), "Era esperado verdadeiro, mas " + result1002 + " <ssl.isContextCreated()> é falso")
chamada antiga: assertTrue(parameters.isContextInjected())
nova chamada: assertTrue(parameters.isContextInjected(), "Era esperado verdadeiro, mas " + result1003 + " <parameters.isContextInjected()> é falso")
chamada antiga: assertTrue(executor.isTerminated())
nova chamada: assertTrue(executor.isTerminated(), "Era esperado verdadeiro, mas " + result1004 + " <executor.isTerminated()> é falso")
chamada antiga: assertNotNull(rcvdEvent)
nova chamada: assertNotNull(rcvdEvent, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(event.getLoggerName(), rcvdEvent.getLoggerName())
nova chamada: assertEquals(event.getLoggerName(), rcvdEvent.getLoggerName(), "Era esperado valores iguais, mas " + result1005 + " <event.getLoggerName()> é diferente de " + result1006 + " <rcvdEvent.getLoggerName()>")
chamada antiga: assertEquals(event.getLevel(), rcvdEvent.getLevel())
nova chamada: assertEquals(event.getLevel(), rcvdEvent.getLevel(), "Era esperado valores iguais, mas " + result1007 + " <event.getLevel()> é diferente de " + result1008 + " <rcvdEvent.getLevel()>")
chamada antiga: assertEquals(event.getMessage(), rcvdEvent.getMessage())
nova chamada: assertEquals(event.getMessage(), rcvdEvent.getMessage(), "Era esperado valores iguais, mas " + result1009 + " <event.getMessage()> é diferente de " + result1010 + " <rcvdEvent.getMessage()>")
chamada antiga: assertEquals(event.getLoggerName(), rcvdEvent.getLoggerName())
nova chamada: assertEquals(event.getLoggerName(), rcvdEvent.getLoggerName(), "Era esperado valores iguais, mas " + result1011 + " <event.getLoggerName()> é diferente de " + result1012 + " <rcvdEvent.getLoggerName()>")
chamada antiga: assertEquals(event.getLevel(), rcvdEvent.getLevel())
nova chamada: assertEquals(event.getLevel(), rcvdEvent.getLevel(), "Era esperado valores iguais, mas " + result1013 + " <event.getLevel()> é diferente de " + result1014 + " <rcvdEvent.getLevel()>")
chamada antiga: assertEquals(event.getMessage(), rcvdEvent.getMessage())
nova chamada: assertEquals(event.getMessage(), rcvdEvent.getMessage(), "Era esperado valores iguais, mas " + result1015 + " <event.getMessage()> é diferente de " + result1016 + " <rcvdEvent.getMessage()>")
chamada antiga: assertNull(appender.getLastEvent())
nova chamada: assertNull(appender.getLastEvent(), "Era esperado nulo, mas " + result1017 + " <appender.getLastEvent()> não é nulo")
chamada antiga: assertTrue(sa.isStarted())
nova chamada: assertTrue(sa.isStarted(), "Era esperado verdadeiro, mas " + result1018 + " <sa.isStarted()> é falso")
chamada antiga: assertTrue(mockServer.isFinished())
nova chamada: assertTrue(mockServer.isFinished(), "Era esperado verdadeiro, mas " + result1019 + " <mockServer.isFinished()> é falso")
chamada antiga: assertEquals(1, mockServer.getMessageList().size())
nova chamada: assertEquals(1, mockServer.getMessageList().size(), "Era esperado valores iguais, mas  1 é diferente de " + result1020 + " <mockServer.getMessageList().size()>")
chamada antiga: assertTrue(msg.startsWith(expected))
nova chamada: assertTrue(msg.startsWith(expected), "Era esperado verdadeiro, mas " + result1021 + " <msg.startsWith(expected)> é falso")
chamada antiga: assertTrue(mockServer.isFinished())
nova chamada: assertTrue(mockServer.isFinished(), "Era esperado verdadeiro, mas " + result1022 + " <mockServer.isFinished()> é falso")
chamada antiga: assertEquals(1, mockServer.getMessageList().size())
nova chamada: assertEquals(1, mockServer.getMessageList().size(), "Era esperado valores iguais, mas  1 é diferente de " + result1023 + " <mockServer.getMessageList().size()>")
chamada antiga: assertTrue(msg.startsWith(expected))
nova chamada: assertTrue(msg.startsWith(expected), "Era esperado verdadeiro, mas " + result1024 + " <msg.startsWith(expected)> é falso")
chamada antiga: assertTrue(mockServer.isFinished())
nova chamada: assertTrue(mockServer.isFinished(), "Era esperado verdadeiro, mas " + result1025 + " <mockServer.isFinished()> é falso")
chamada antiga: assertEquals(21, mockServer.getMessageList().size())
nova chamada: assertEquals(21, mockServer.getMessageList().size(), "Era esperado valores iguais, mas  21 é diferente de " + result1026 + " <mockServer.getMessageList().size()>")
chamada antiga: assertTrue(msg.startsWith(expected))
nova chamada: assertTrue(msg.startsWith(expected), "Era esperado verdadeiro, mas " + result1027 + " <msg.startsWith(expected)> é falso")
chamada antiga: assertTrue(msg.contains(ex.getClass().getName()))
nova chamada: assertTrue(msg.contains(ex.getClass().getName()), "Era esperado verdadeiro, mas " + result1028 + " <msg.contains(ex.getClass().getName())> é falso")
chamada antiga: assertTrue(msg.contains(ex.getMessage()))
nova chamada: assertTrue(msg.contains(ex.getMessage()), "Era esperado verdadeiro, mas " + result1029 + " <msg.contains(ex.getMessage())> é falso")
chamada antiga: assertTrue(msg.startsWith(expected))
nova chamada: assertTrue(msg.startsWith(expected), "Era esperado verdadeiro, mas " + result1030 + " <msg.startsWith(expected)> é falso")
chamada antiga: assertTrue(mockServer.isFinished())
nova chamada: assertTrue(mockServer.isFinished(), "Era esperado verdadeiro, mas " + result1031 + " <mockServer.isFinished()> é falso")
chamada antiga: assertEquals(2, mockServer.getMessageList().size())
nova chamada: assertEquals(2, mockServer.getMessageList().size(), "Era esperado valores iguais, mas  2 é diferente de " + result1032 + " <mockServer.getMessageList().size()>")
chamada antiga: assertTrue(largeMsg.startsWith(expected))
nova chamada: assertTrue(largeMsg.startsWith(expected), "Era esperado verdadeiro, mas " + result1033 + " <largeMsg.startsWith(expected)> é falso")
chamada antiga: assertTrue(msg.startsWith(expected))
nova chamada: assertTrue(msg.startsWith(expected), "Era esperado verdadeiro, mas " + result1034 + " <msg.startsWith(expected)> é falso")
chamada antiga: assertTrue(mockServer.isFinished())
nova chamada: assertTrue(mockServer.isFinished(), "Era esperado verdadeiro, mas " + result1035 + " <mockServer.isFinished()> é falso")
chamada antiga: assertEquals(1, mockServer.getMessageList().size())
nova chamada: assertEquals(1, mockServer.getMessageList().size(), "Era esperado valores iguais, mas  1 é diferente de " + result1036 + " <mockServer.getMessageList().size()>")
chamada antiga: assertTrue(msg.startsWith(expected))
nova chamada: assertTrue(msg.startsWith(expected), "Era esperado verdadeiro, mas " + result1037 + " <msg.startsWith(expected)> é falso")
chamada antiga: assertEquals("sebastien.nospam@qos.ch%nopex", appender.getToAsListOfString().get(0))
nova chamada: assertEquals("sebastien.nospam@qos.ch%nopex", appender.getToAsListOfString().get(0), "Era esperado valores iguais, mas  'sebastien.nospam@qos.ch%nopex' é diferente de " + result1038 + " <appender.getToAsListOfString().get(0)>")
chamada antiga: assertEquals("logging report", appender.getSubject())
nova chamada: assertEquals("logging report", appender.getSubject(), "Era esperado valores iguais, mas  'logging report' é diferente de " + result1039 + " <appender.getSubject()>")
chamada antiga: assertTrue(appender.isStarted())
nova chamada: assertTrue(appender.isStarted(), "Era esperado verdadeiro, mas " + result1040 + " <appender.isStarted()> é falso")
chamada antiga: assertEquals(1, cb.length())
nova chamada: assertEquals(1, cb.length(), "Era esperado valores iguais, mas  1 é diferente de " + result1041 + " <cb.length()>")
chamada antiga: assertEquals(0, appender.getContext().getStatusManager().getCount())
nova chamada: assertEquals(0, appender.getContext().getStatusManager().getCount(), "Era esperado valores iguais, mas  0 é diferente de " + result1042 + " <appender.getContext().getStatusManager().getCount()>")
chamada antiga: assertEquals(1, appender.getContext().getStatusManager().getCount())
nova chamada: assertEquals(1, appender.getContext().getStatusManager().getCount(), "Era esperado valores iguais, mas  1 é diferente de " + result1043 + " <appender.getContext().getStatusManager().getCount()>")
chamada antiga: assertEquals(1, appender.getContext().getStatusManager().getCount())
nova chamada: assertEquals(1, appender.getContext().getStatusManager().getCount(), "Era esperado valores iguais, mas  1 é diferente de " + result1044 + " <appender.getContext().getStatusManager().getCount()>")
chamada antiga: assertNotNull(remote.getSocketFactory())
nova chamada: assertNotNull(remote.getSocketFactory(), "Era esperado não nulo, mas " + result1045 + " <remote.getSocketFactory()> é nulo")
chamada antiga: assertTrue(executor.awaitTermination(DELAY, TimeUnit.MILLISECONDS))
nova chamada: assertTrue(executor.awaitTermination(DELAY, TimeUnit.MILLISECONDS), "Era esperado verdadeiro, mas " + result1046 + " <executor.awaitTermination(DELAY, TimeUnit.MILLISECONDS)> é falso")
chamada antiga: assertFalse(receiver.isStarted())
nova chamada: assertFalse(receiver.isStarted(), "Era esperado falso, mas " + result1047 + " <receiver.isStarted()> é verdadeiro ")
chamada antiga: assertTrue(status.getMessage().contains("host"))
nova chamada: assertTrue(status.getMessage().contains("host"), "Era esperado verdadeiro, mas " + result1048 + " <status.getMessage().contains('host')> é falso")
chamada antiga: assertFalse(receiver.isStarted())
nova chamada: assertFalse(receiver.isStarted(), "Era esperado falso, mas " + result1049 + " <receiver.isStarted()> é verdadeiro ")
chamada antiga: assertTrue(status.getMessage().contains("port"))
nova chamada: assertTrue(status.getMessage().contains("port"), "Era esperado verdadeiro, mas " + result1050 + " <status.getMessage().contains('port')> é falso")
chamada antiga: assertFalse(receiver.isStarted())
nova chamada: assertFalse(receiver.isStarted(), "Era esperado falso, mas " + result1051 + " <receiver.isStarted()> é verdadeiro ")
chamada antiga: assertTrue(status.getMessage().contains("unknown host"))
nova chamada: assertTrue(status.getMessage().contains("unknown host"), "Era esperado verdadeiro, mas " + result1052 + " <status.getMessage().contains('unknown host')> é falso")
chamada antiga: assertTrue(receiver.isStarted())
nova chamada: assertTrue(receiver.isStarted(), "Era esperado verdadeiro, mas " + result1053 + " <receiver.isStarted()> é falso")
chamada antiga: assertFalse(receiver.isStarted())
nova chamada: assertFalse(receiver.isStarted(), "Era esperado falso, mas " + result1054 + " <receiver.isStarted()> é verdadeiro ")
chamada antiga: assertTrue(receiver.awaitConnectorCreated(DELAY / 2))
nova chamada: assertTrue(receiver.awaitConnectorCreated(DELAY / 2), "Era esperado verdadeiro, mas " + result1055 + " <receiver.awaitConnectorCreated(DELAY / 2)> é falso")
chamada antiga: assertTrue(receiver.awaitConnectorCreated(DELAY))
nova chamada: assertTrue(receiver.awaitConnectorCreated(DELAY), "Era esperado verdadeiro, mas " + result1056 + " <receiver.awaitConnectorCreated(DELAY)> é falso")
chamada antiga: assertTrue(receiver.awaitConnectorCreated(DELAY))
nova chamada: assertTrue(receiver.awaitConnectorCreated(DELAY), "Era esperado verdadeiro, mas " + result1057 + " <receiver.awaitConnectorCreated(DELAY)> é falso")
chamada antiga: assertNotNull(rcvdEvent)
nova chamada: assertNotNull(rcvdEvent, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(event.getLoggerName(), rcvdEvent.getLoggerName())
nova chamada: assertEquals(event.getLoggerName(), rcvdEvent.getLoggerName(), "Era esperado valores iguais, mas " + result1058 + " <event.getLoggerName()> é diferente de " + result1059 + " <rcvdEvent.getLoggerName()>")
chamada antiga: assertEquals(event.getLevel(), rcvdEvent.getLevel())
nova chamada: assertEquals(event.getLevel(), rcvdEvent.getLevel(), "Era esperado valores iguais, mas " + result1060 + " <event.getLevel()> é diferente de " + result1061 + " <rcvdEvent.getLevel()>")
chamada antiga: assertEquals(event.getMessage(), rcvdEvent.getMessage())
nova chamada: assertEquals(event.getMessage(), rcvdEvent.getMessage(), "Era esperado valores iguais, mas " + result1062 + " <event.getMessage()> é diferente de " + result1063 + " <rcvdEvent.getMessage()>")
chamada antiga: assertTrue(receiver.awaitConnectorCreated(DELAY))
nova chamada: assertTrue(receiver.awaitConnectorCreated(DELAY), "Era esperado verdadeiro, mas " + result1064 + " <receiver.awaitConnectorCreated(DELAY)> é falso")
chamada antiga: assertNull(appender.awaitAppend(DELAY))
nova chamada: assertNull(appender.awaitAppend(DELAY), "Era esperado nulo, mas " + result1065 + " <appender.awaitAppend(DELAY)> não é nulo")
chamada antiga: assertTrue(socketAppender.isStarted())
nova chamada: assertTrue(socketAppender.isStarted(), "Era esperado verdadeiro, mas " + result1066 + " <socketAppender.isStarted()> é falso")
chamada antiga: assertFalse(asyncAppender.isStarted())
nova chamada: assertFalse(asyncAppender.isStarted(), "Era esperado falso, mas " + result1067 + " <asyncAppender.isStarted()> é verdadeiro ")
chamada antiga: assertEquals(1, listAppender.list.size())
nova chamada: assertEquals(1, listAppender.list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result1068 + " <listAppender.list.size()>")
chamada antiga: assertEquals("v", e.getMDCPropertyMap().get(k))
nova chamada: assertEquals("v", e.getMDCPropertyMap().get(k), "Era esperado valores iguais, mas  'v' é diferente de " + result1069 + " <e.getMDCPropertyMap().get(k)>")
chamada antiga: assertFalse(e.hasCallerData())
nova chamada: assertFalse(e.hasCallerData(), "Era esperado falso, mas " + result1070 + " <e.hasCallerData()> é verdadeiro ")
chamada antiga: assertEquals(1, listAppender.list.size())
nova chamada: assertEquals(1, listAppender.list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result1071 + " <listAppender.list.size()>")
chamada antiga: assertTrue(e.hasCallerData())
nova chamada: assertTrue(e.hasCallerData(), "Era esperado verdadeiro, mas " + result1072 + " <e.hasCallerData()> é falso")
chamada antiga: assertEquals(thisClassName, ste.getClassName())
nova chamada: assertEquals(thisClassName, ste.getClassName(), "Era esperado valores iguais, mas  thisClassName é diferente de " + result1073 + " <ste.getClassName()>")
chamada antiga: assertFalse(rfa.isStarted())
nova chamada: assertFalse(rfa.isStarted(), "Era esperado falso, mas " + result1074 + " <rfa.isStarted()> é verdadeiro ")
chamada antiga: assertFalse(rfa.isStarted())
nova chamada: assertFalse(rfa.isStarted(), "Era esperado falso, mas " + result1075 + " <rfa.isStarted()> é verdadeiro ")
chamada antiga: assertFalse(rfa.isStarted())
nova chamada: assertFalse(rfa.isStarted(), "Era esperado falso, mas " + result1076 + " <rfa.isStarted()> é verdadeiro ")
chamada antiga: assertNotNull(versionStr)
nova chamada: assertNotNull(versionStr, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(versionStr.startsWith("1.4"))
nova chamada: assertTrue(versionStr.startsWith("1.4"), "Era esperado verdadeiro, mas " + result1077 + " <versionStr.startsWith('1.4')> é falso")
chamada antiga: assertEquals(witnessList, partList)
nova chamada: assertEquals(witnessList, partList, "Era esperado valores iguais, mas  witnessList é diferente de " + " partList")
chamada antiga: assertEquals(witnessList, partList)
nova chamada: assertEquals(witnessList, partList, "Era esperado valores iguais, mas  witnessList é diferente de " + " partList")
chamada antiga: assertEquals(witnessList, partList)
nova chamada: assertEquals(witnessList, partList, "Era esperado valores iguais, mas  witnessList é diferente de " + " partList")
chamada antiga: assertEquals(witnessList, partList)
nova chamada: assertEquals(witnessList, partList, "Era esperado valores iguais, mas  witnessList é diferente de " + " partList")
chamada antiga: assertEquals(witnessList, partList)
nova chamada: assertEquals(witnessList, partList, "Era esperado valores iguais, mas  witnessList é diferente de " + " partList")
chamada antiga: assertEquals(witnessList, partList)
nova chamada: assertEquals(witnessList, partList, "Era esperado valores iguais, mas  witnessList é diferente de " + " partList")
chamada antiga: assertEquals(witnessList, partList)
nova chamada: assertEquals(witnessList, partList, "Era esperado valores iguais, mas  witnessList é diferente de " + " partList")
chamada antiga: assertNotNull(appender)
nova chamada: assertNotNull(appender, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(MockConfigurator.context)
nova chamada: assertNull(MockConfigurator.context, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotNull(MockConfigurator.context)
nova chamada: assertNotNull(MockConfigurator.context, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertSame(loggerContext, MockConfigurator.context)
nova chamada: assertSame(loggerContext, MockConfigurator.context, "Era esperado objetos iguais, mas  loggerContext é diferente de " + " MockConfigurator.context")
chamada antiga: assertNull(MockConfigurator.context)
nova chamada: assertNull(MockConfigurator.context, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(MockConfigurator.context)
nova chamada: assertNull(MockConfigurator.context, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(0, statusListenerList.size())
nova chamada: assertEquals(0, statusListenerList.size(), "Era esperado valores iguais, mas  0 é diferente de " + result1078 + " <statusListenerList.size()>")
chamada antiga: assertEquals(0, sll.size())
nova chamada: assertEquals(0, sll.size(), "Era esperado valores iguais, mas  0 é diferente de " + result1079 + " <sll.size()>")
chamada antiga: assertNull(loggerContext.getObject(CoreConstants.SAFE_JORAN_CONFIGURATION))
nova chamada: assertNull(loggerContext.getObject(CoreConstants.SAFE_JORAN_CONFIGURATION), "Era esperado nulo, mas " + result1080 + " <loggerContext.getObject(CoreConstants.SAFE_JORAN_CONFIGURATION)> não é nulo")
chamada antiga: assertNotNull(loggerContext.getObject(CoreConstants.SAFE_JORAN_CONFIGURATION))
nova chamada: assertNotNull(loggerContext.getObject(CoreConstants.SAFE_JORAN_CONFIGURATION), "Era esperado não nulo, mas " + result1081 + " <loggerContext.getObject(CoreConstants.SAFE_JORAN_CONFIGURATION)> é nulo")
chamada antiga: assertEquals(SyslogConstants.DEBUG_SEVERITY, LevelToSyslogSeverity.convert(createEventOfLevel(Level.TRACE)))
nova chamada: assertEquals(SyslogConstants.DEBUG_SEVERITY, LevelToSyslogSeverity.convert(createEventOfLevel(Level.TRACE)), "Era esperado valores iguais, mas  SyslogConstants.DEBUG_SEVERITY é diferente de " + result1082 + " <LevelToSyslogSeverity.convert(createEventOfLevel(Level.TRACE))>")
chamada antiga: assertEquals(SyslogConstants.DEBUG_SEVERITY, LevelToSyslogSeverity.convert(createEventOfLevel(Level.DEBUG)))
nova chamada: assertEquals(SyslogConstants.DEBUG_SEVERITY, LevelToSyslogSeverity.convert(createEventOfLevel(Level.DEBUG)), "Era esperado valores iguais, mas  SyslogConstants.DEBUG_SEVERITY é diferente de " + result1083 + " <LevelToSyslogSeverity.convert(createEventOfLevel(Level.DEBUG))>")
chamada antiga: assertEquals(SyslogConstants.INFO_SEVERITY, LevelToSyslogSeverity.convert(createEventOfLevel(Level.INFO)))
nova chamada: assertEquals(SyslogConstants.INFO_SEVERITY, LevelToSyslogSeverity.convert(createEventOfLevel(Level.INFO)), "Era esperado valores iguais, mas  SyslogConstants.INFO_SEVERITY é diferente de " + result1084 + " <LevelToSyslogSeverity.convert(createEventOfLevel(Level.INFO))>")
chamada antiga: assertEquals(SyslogConstants.WARNING_SEVERITY, LevelToSyslogSeverity.convert(createEventOfLevel(Level.WARN)))
nova chamada: assertEquals(SyslogConstants.WARNING_SEVERITY, LevelToSyslogSeverity.convert(createEventOfLevel(Level.WARN)), "Era esperado valores iguais, mas  SyslogConstants.WARNING_SEVERITY é diferente de " + result1085 + " <LevelToSyslogSeverity.convert(createEventOfLevel(Level.WARN))>")
chamada antiga: assertEquals(SyslogConstants.ERROR_SEVERITY, LevelToSyslogSeverity.convert(createEventOfLevel(Level.ERROR)))
nova chamada: assertEquals(SyslogConstants.ERROR_SEVERITY, LevelToSyslogSeverity.convert(createEventOfLevel(Level.ERROR)), "Era esperado valores iguais, mas  SyslogConstants.ERROR_SEVERITY é diferente de " + result1086 + " <LevelToSyslogSeverity.convert(createEventOfLevel(Level.ERROR))>")
chamada antiga: assertNotNull(la)
nova chamada: assertNotNull(la, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(appender)
nova chamada: assertNotNull(appender, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(appender instanceof ConsoleAppender)
nova chamada: assertTrue(appender instanceof ConsoleAppender, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertEquals(witness, mdcAdapter.getPropertyMap())
nova chamada: assertEquals(witness, mdcAdapter.getPropertyMap(), "Era esperado valores iguais, mas  witness é diferente de " + result1087 + " <mdcAdapter.getPropertyMap()>")
chamada antiga: Assertions.assertEquals("v0", map0.get("k0"))
nova chamada: assertEquals("v0", map0.get("k0"), "Era esperado valores iguais, mas  'v0' é diferente de " + result1088 + " <map0.get('k0')>")
chamada antiga: Assertions.assertEquals("v0", map0.get("k0"))
nova chamada: assertEquals("v0", map0.get("k0"), "Era esperado valores iguais, mas  'v0' é diferente de " + result1089 + " <map0.get('k0')>")
chamada antiga: Assertions.assertEquals("v1", map0.get("k1"))
nova chamada: assertEquals("v1", map0.get("k1"), "Era esperado valores iguais, mas  'v1' é diferente de " + result1090 + " <map0.get('k1')>")
chamada antiga: Assertions.assertEquals(parentHMWitness, parentHM)
nova chamada: assertEquals(parentHMWitness, parentHM, "Era esperado valores iguais, mas  parentHMWitness é diferente de " + " parentHM")
chamada antiga: Assertions.assertEquals(childHMWitness, childThread.childHM)
nova chamada: assertEquals(childHMWitness, childThread.childHM, "Era esperado valores iguais, mas  childHMWitness é diferente de " + " childThread.childHM")
chamada antiga: Assertions.assertEquals(firstKey + A_SUFFIX, mdcAdapter.get(firstKey))
nova chamada: assertEquals(firstKey + A_SUFFIX, mdcAdapter.get(firstKey), "Era esperado valores iguais, mas  firstKey + A_SUFFIX é diferente de " + result1091 + " <mdcAdapter.get(firstKey)>")
chamada antiga: Assertions.assertEquals(firstKey + A_SUFFIX, mdcAdapter.get(firstKey))
nova chamada: assertEquals(firstKey + A_SUFFIX, mdcAdapter.get(firstKey), "Era esperado valores iguais, mas  firstKey + A_SUFFIX é diferente de " + result1092 + " <mdcAdapter.get(firstKey)>")
chamada antiga: Assertions.assertEquals(secondKey + A_SUFFIX, logbackMDCAdapter.get(secondKey))
nova chamada: assertEquals(secondKey + A_SUFFIX, logbackMDCAdapter.get(secondKey), "Era esperado valores iguais, mas  secondKey + A_SUFFIX é diferente de " + result1093 + " <logbackMDCAdapter.get(secondKey)>")
chamada antiga: assertEquals(cm, copy)
nova chamada: assertEquals(cm, copy, "Era esperado valores iguais, mas  cm é diferente de " + " copy")
chamada antiga: assertEquals(cm, copy)
nova chamada: assertEquals(cm, copy, "Era esperado valores iguais, mas  cm é diferente de " + " copy")
Total asserts: 1835
Asserts sem descrição: 1725
Asserts com descrição: 110
Assertion Roulette: 1281

Após do refactor: 
Total asserts: 1835
Asserts sem descrição: 669
Asserts com descrição: 1166
Assertion Roulette: 549
