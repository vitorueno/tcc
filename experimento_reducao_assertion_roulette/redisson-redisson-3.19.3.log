
Projeto: /home/vitor-otto/opensource/redisson-redisson-3.19.3

Antes do refactor: 
chamada antiga: Assertions.assertTrue(sync(list.add("1")))
nova chamada: assertTrue(sync(list.add("1")), "Era esperado verdadeiro, mas " + result0 + " <sync(list.add('1'))> é falso")
chamada antiga: Assertions.assertTrue(sync(list.add("2")))
nova chamada: assertTrue(sync(list.add("2")), "Era esperado verdadeiro, mas " + result1 + " <sync(list.add('2'))> é falso")
chamada antiga: Assertions.assertTrue(sync(list.add("3")))
nova chamada: assertTrue(sync(list.add("3")), "Era esperado verdadeiro, mas " + result2 + " <sync(list.add('3'))> é falso")
chamada antiga: Assertions.assertTrue(sync(list.add("4")))
nova chamada: assertTrue(sync(list.add("4")), "Era esperado verdadeiro, mas " + result3 + " <sync(list.add('4'))> é falso")
chamada antiga: Assertions.assertTrue(sync(list.add("5")))
nova chamada: assertTrue(sync(list.add("5")), "Era esperado verdadeiro, mas " + result4 + " <sync(list.add('5'))> é falso")
chamada antiga: Assertions.assertEquals(true, sync(list2.addAll(list.iterator())))
nova chamada: assertEquals(true, sync(list2.addAll(list.iterator())), "Era esperado valores iguais, mas  true é diferente de " + result5 + " <sync(list2.addAll(list.iterator()))>")
chamada antiga: Assertions.assertEquals(5, sync(list2.size()).intValue())
nova chamada: assertEquals(5, sync(list2.size()).intValue(), "Era esperado valores iguais, mas  5 é diferente de " + result6 + " <sync(list2.size()).intValue()>")
chamada antiga: Assertions.assertTrue(sync(set.add("a")))
nova chamada: assertTrue(sync(set.add("a")), "Era esperado verdadeiro, mas " + result7 + " <sync(set.add('a'))> é falso")
chamada antiga: Assertions.assertFalse(sync(set.add("a")))
nova chamada: assertFalse(sync(set.add("a")), "Era esperado falso, mas " + result8 + " <sync(set.add('a'))> é verdadeiro ")
chamada antiga: Assertions.assertTrue(sync(set.add("b")))
nova chamada: assertTrue(sync(set.add("b")), "Era esperado verdadeiro, mas " + result9 + " <sync(set.add('b'))> é falso")
chamada antiga: Assertions.assertTrue(sync(set.add("c")))
nova chamada: assertTrue(sync(set.add("c")), "Era esperado verdadeiro, mas " + result10 + " <sync(set.add('c'))> é falso")
chamada antiga: Assertions.assertTrue(sync(set.add("d")))
nova chamada: assertTrue(sync(set.add("d")), "Era esperado verdadeiro, mas " + result11 + " <sync(set.add('d'))> é falso")
chamada antiga: Assertions.assertTrue(sync(set.add("e")))
nova chamada: assertTrue(sync(set.add("e")), "Era esperado verdadeiro, mas " + result12 + " <sync(set.add('e'))> é falso")
chamada antiga: Assertions.assertTrue(sync(set.add("f")))
nova chamada: assertTrue(sync(set.add("f")), "Era esperado verdadeiro, mas " + result13 + " <sync(set.add('f'))> é falso")
chamada antiga: Assertions.assertTrue(sync(set.add("g")))
nova chamada: assertTrue(sync(set.add("g")), "Era esperado verdadeiro, mas " + result14 + " <sync(set.add('g'))> é falso")
chamada antiga: Assertions.assertEquals(0, sync(set.removeRangeTail("z", false)).intValue())
nova chamada: assertEquals(0, sync(set.removeRangeTail("z", false)).intValue(), "Era esperado valores iguais, mas  0 é diferente de " + result15 + " <sync(set.removeRangeTail('z', false)).intValue()>")
chamada antiga: Assertions.assertEquals(4, sync(set.removeRangeTail("c", false)).intValue())
nova chamada: assertEquals(4, sync(set.removeRangeTail("c", false)).intValue(), "Era esperado valores iguais, mas  4 é diferente de " + result16 + " <sync(set.removeRangeTail('c', false)).intValue()>")
chamada antiga: Assertions.assertEquals(1, sync(set.removeRangeTail("c", true)).intValue())
nova chamada: assertEquals(1, sync(set.removeRangeTail("c", true)).intValue(), "Era esperado valores iguais, mas  1 é diferente de " + result17 + " <sync(set.removeRangeTail('c', true)).intValue()>")
chamada antiga: Assertions.assertEquals(2, sync(set.removeRangeHead("c", false)).intValue())
nova chamada: assertEquals(2, sync(set.removeRangeHead("c", false)).intValue(), "Era esperado valores iguais, mas  2 é diferente de " + result18 + " <sync(set.removeRangeHead('c', false)).intValue()>")
chamada antiga: Assertions.assertEquals(1, (int) sync(set.removeRangeHead("c", true)))
nova chamada: assertEquals(1, (int) sync(set.removeRangeHead("c", true)), "Era esperado valores iguais, mas  1 é diferente de " + " (int) sync(set.removeRangeHead('c', true))")
chamada antiga: Assertions.assertEquals(5, sync(set.removeRange("aaa", true, "g", false)).intValue())
nova chamada: assertEquals(5, sync(set.removeRange("aaa", true, "g", false)).intValue(), "Era esperado valores iguais, mas  5 é diferente de " + result19 + " <sync(set.removeRange('aaa', true, 'g', false)).intValue()>")
chamada antiga: Assertions.assertTrue(sync(set.add("a")))
nova chamada: assertTrue(sync(set.add("a")), "Era esperado verdadeiro, mas " + result20 + " <sync(set.add('a'))> é falso")
chamada antiga: Assertions.assertFalse(sync(set.add("a")))
nova chamada: assertFalse(sync(set.add("a")), "Era esperado falso, mas " + result21 + " <sync(set.add('a'))> é verdadeiro ")
chamada antiga: Assertions.assertTrue(sync(set.add("b")))
nova chamada: assertTrue(sync(set.add("b")), "Era esperado verdadeiro, mas " + result22 + " <sync(set.add('b'))> é falso")
chamada antiga: Assertions.assertTrue(sync(set.add("c")))
nova chamada: assertTrue(sync(set.add("c")), "Era esperado verdadeiro, mas " + result23 + " <sync(set.add('c'))> é falso")
chamada antiga: Assertions.assertTrue(sync(set.add("d")))
nova chamada: assertTrue(sync(set.add("d")), "Era esperado verdadeiro, mas " + result24 + " <sync(set.add('d'))> é falso")
chamada antiga: Assertions.assertTrue(sync(set.add("e")))
nova chamada: assertTrue(sync(set.add("e")), "Era esperado verdadeiro, mas " + result25 + " <sync(set.add('e'))> é falso")
chamada antiga: Assertions.assertTrue(sync(set.add("f")))
nova chamada: assertTrue(sync(set.add("f")), "Era esperado verdadeiro, mas " + result26 + " <sync(set.add('f'))> é falso")
chamada antiga: Assertions.assertTrue(sync(set.add("g")))
nova chamada: assertTrue(sync(set.add("g")), "Era esperado verdadeiro, mas " + result27 + " <sync(set.add('g'))> é falso")
chamada antiga: Assertions.assertEquals(5, (int) sync(set.count("b", true, "f", true)))
nova chamada: assertEquals(5, (int) sync(set.count("b", true, "f", true)), "Era esperado valores iguais, mas  5 é diferente de " + " (int) sync(set.count('b', true, 'f', true))")
chamada antiga: Assertions.assertEquals(3, (int) sync(set.count("b", false, "f", false)))
nova chamada: assertEquals(3, (int) sync(set.count("b", false, "f", false)), "Era esperado valores iguais, mas  3 é diferente de " + " (int) sync(set.count('b', false, 'f', false))")
chamada antiga: Assertions.assertEquals("1", iter.next())
nova chamada: assertEquals("1", iter.next(), "Era esperado valores iguais, mas  '1' é diferente de " + result28 + " <iter.next()>")
chamada antiga: Assertions.assertEquals("4", iter.next())
nova chamada: assertEquals("4", iter.next(), "Era esperado valores iguais, mas  '4' é diferente de " + result29 + " <iter.next()>")
chamada antiga: Assertions.assertFalse(iter.hasNext())
nova chamada: assertFalse(iter.hasNext(), "Era esperado falso, mas " + result30 + " <iter.hasNext()> é verdadeiro ")
chamada antiga: Assertions.assertEquals(4, iteration)
nova chamada: assertEquals(4, iteration, "Era esperado valores iguais, mas  4 é diferente de " + " iteration")
chamada antiga: Assertions.assertEquals(0, list.size())
nova chamada: assertEquals(0, list.size(), "Era esperado valores iguais, mas  0 é diferente de " + result31 + " <list.size()>")
chamada antiga: Assertions.assertTrue(list.isEmpty())
nova chamada: assertTrue(list.isEmpty(), "Era esperado verdadeiro, mas " + result32 + " <list.isEmpty()> é falso")
chamada antiga: Assertions.assertEquals(0, setCopy.size())
nova chamada: assertEquals(0, setCopy.size(), "Era esperado valores iguais, mas  0 é diferente de " + result33 + " <setCopy.size()>")
chamada antiga: Assertions.assertTrue(setRes)
nova chamada: assertTrue(setRes, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(set.add(1))
nova chamada: assertTrue(set.add(1), "Era esperado verdadeiro, mas " + result34 + " <set.add(1)> é falso")
chamada antiga: Assertions.assertTrue(set.add(2))
nova chamada: assertTrue(set.add(2), "Era esperado verdadeiro, mas " + result35 + " <set.add(2)> é falso")
chamada antiga: Assertions.assertTrue(set.add(3))
nova chamada: assertTrue(set.add(3), "Era esperado verdadeiro, mas " + result36 + " <set.add(3)> é falso")
chamada antiga: Assertions.assertTrue(set.add(4))
nova chamada: assertTrue(set.add(4), "Era esperado verdadeiro, mas " + result37 + " <set.add(4)> é falso")
chamada antiga: Assertions.assertTrue(set.add(5))
nova chamada: assertTrue(set.add(5), "Era esperado verdadeiro, mas " + result38 + " <set.add(5)> é falso")
chamada antiga: Assertions.assertFalse(setRes2)
nova chamada: assertFalse(setRes2, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: Assertions.assertTrue(setRes3)
nova chamada: assertTrue(setRes3, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(set.add(2))
nova chamada: assertTrue(set.add(2), "Era esperado verdadeiro, mas " + result39 + " <set.add(2)> é falso")
chamada antiga: Assertions.assertTrue(set.add(3))
nova chamada: assertTrue(set.add(3), "Era esperado verdadeiro, mas " + result40 + " <set.add(3)> é falso")
chamada antiga: Assertions.assertTrue(set.add(1))
nova chamada: assertTrue(set.add(1), "Era esperado verdadeiro, mas " + result41 + " <set.add(1)> é falso")
chamada antiga: Assertions.assertTrue(set.add(4))
nova chamada: assertTrue(set.add(4), "Era esperado verdadeiro, mas " + result42 + " <set.add(4)> é falso")
chamada antiga: Assertions.assertTrue(set.add(10))
nova chamada: assertTrue(set.add(10), "Era esperado verdadeiro, mas " + result43 + " <set.add(10)> é falso")
chamada antiga: Assertions.assertTrue(set.add(-1))
nova chamada: assertTrue(set.add(-1), "Era esperado verdadeiro, mas " + result44 + " <set.add(-1)> é falso")
chamada antiga: Assertions.assertTrue(set.add(0))
nova chamada: assertTrue(set.add(0), "Era esperado verdadeiro, mas " + result45 + " <set.add(0)> é falso")
chamada antiga: Assertions.assertEquals(-1, (int) set.peek())
nova chamada: assertEquals(-1, (int) set.peek(), "Era esperado valores iguais, mas  -1 é diferente de " + " (int) set.peek()")
chamada antiga: Assertions.assertFalse(set.remove(0))
nova chamada: assertFalse(set.remove(0), "Era esperado falso, mas " + result46 + " <set.remove(0)> é verdadeiro ")
chamada antiga: Assertions.assertTrue(set.remove(3))
nova chamada: assertTrue(set.remove(3), "Era esperado verdadeiro, mas " + result47 + " <set.remove(3)> é falso")
chamada antiga: Assertions.assertTrue(set.remove(1))
nova chamada: assertTrue(set.remove(1), "Era esperado verdadeiro, mas " + result48 + " <set.remove(1)> é falso")
chamada antiga: Assertions.assertTrue(set.retainAll(Arrays.asList(1, 2)))
nova chamada: assertTrue(set.retainAll(Arrays.asList(1, 2)), "Era esperado verdadeiro, mas " + result49 + " <set.retainAll(Arrays.asList(1, 2))> é falso")
chamada antiga: Assertions.assertEquals(2, set.size())
nova chamada: assertEquals(2, set.size(), "Era esperado valores iguais, mas  2 é diferente de " + result50 + " <set.size()>")
chamada antiga: Assertions.assertTrue(set.containsAll(Arrays.asList(30, 11)))
nova chamada: assertTrue(set.containsAll(Arrays.asList(30, 11)), "Era esperado verdadeiro, mas " + result51 + " <set.containsAll(Arrays.asList(30, 11))> é falso")
chamada antiga: Assertions.assertFalse(set.containsAll(Arrays.asList(30, 711, 11)))
nova chamada: assertFalse(set.containsAll(Arrays.asList(30, 711, 11)), "Era esperado falso, mas " + result52 + " <set.containsAll(Arrays.asList(30, 711, 11))> é verdadeiro ")
chamada antiga: Assertions.assertTrue(set.contains(new TestObject("2", "3")))
nova chamada: assertTrue(set.contains(new TestObject("2", "3")), "Era esperado verdadeiro, mas " + result53 + " <set.contains(new TestObject('2', '3'))> é falso")
chamada antiga: Assertions.assertTrue(set.contains(new TestObject("1", "2")))
nova chamada: assertTrue(set.contains(new TestObject("1", "2")), "Era esperado verdadeiro, mas " + result54 + " <set.contains(new TestObject('1', '2'))> é falso")
chamada antiga: Assertions.assertFalse(set.contains(new TestObject("1", "9")))
nova chamada: assertFalse(set.contains(new TestObject("1", "9")), "Era esperado falso, mas " + result55 + " <set.contains(new TestObject('1', '9'))> é verdadeiro ")
chamada antiga: Assertions.assertEquals(5, set.size())
nova chamada: assertEquals(5, set.size(), "Era esperado valores iguais, mas  5 é diferente de " + result56 + " <set.size()>")
chamada antiga: Assertions.assertEquals(7, set.size())
nova chamada: assertEquals(7, set.size(), "Era esperado valores iguais, mas  7 é diferente de " + result57 + " <set.size()>")
chamada antiga: Assertions.assertEquals(5, sync(bs.length()).intValue())
nova chamada: assertEquals(5, sync(bs.length()).intValue(), "Era esperado valores iguais, mas  5 é diferente de " + result58 + " <sync(bs.length()).intValue()>")
chamada antiga: Assertions.assertEquals(32, sync(bs.length()).intValue())
nova chamada: assertEquals(32, sync(bs.length()).intValue(), "Era esperado valores iguais, mas  32 é diferente de " + result59 + " <sync(bs.length()).intValue()>")
chamada antiga: Assertions.assertEquals(8, sync(bs.length()).intValue())
nova chamada: assertEquals(8, sync(bs.length()).intValue(), "Era esperado valores iguais, mas  8 é diferente de " + result60 + " <sync(bs.length()).intValue()>")
chamada antiga: Assertions.assertEquals(122, sync(bs.length()).intValue())
nova chamada: assertEquals(122, sync(bs.length()).intValue(), "Era esperado valores iguais, mas  122 é diferente de " + result61 + " <sync(bs.length()).intValue()>")
chamada antiga: Assertions.assertEquals(1, sync(bs.length()).intValue())
nova chamada: assertEquals(1, sync(bs.length()).intValue(), "Era esperado valores iguais, mas  1 é diferente de " + result62 + " <sync(bs.length()).intValue()>")
chamada antiga: Assertions.assertEquals("{3, 4, 5, 6, 7}", bs.toString())
nova chamada: assertEquals("{3, 4, 5, 6, 7}", bs.toString(), "Era esperado valores iguais, mas  '{3, 4, 5, 6, 7}' é diferente de " + result63 + " <bs.toString()>")
chamada antiga: Assertions.assertEquals("{0, 1, 2, 4, 6, 7}", bs.toString())
nova chamada: assertEquals("{0, 1, 2, 4, 6, 7}", bs.toString(), "Era esperado valores iguais, mas  '{0, 1, 2, 4, 6, 7}' é diferente de " + result64 + " <bs.toString()>")
chamada antiga: Assertions.assertEquals("{3, 5}", bs.toString())
nova chamada: assertEquals("{3, 5}", bs.toString(), "Era esperado valores iguais, mas  '{3, 5}' é diferente de " + result65 + " <bs.toString()>")
chamada antiga: Assertions.assertEquals("{1, 10}", bs.toString())
nova chamada: assertEquals("{1, 10}", bs.toString(), "Era esperado valores iguais, mas  '{1, 10}' é diferente de " + result66 + " <bs.toString()>")
chamada antiga: Assertions.assertEquals(0, sync(bitset.cardinality()).intValue())
nova chamada: assertEquals(0, sync(bitset.cardinality()).intValue(), "Era esperado valores iguais, mas  0 é diferente de " + result67 + " <sync(bitset.cardinality()).intValue()>")
chamada antiga: Assertions.assertEquals(0, sync(bitset.size()).intValue())
nova chamada: assertEquals(0, sync(bitset.size()).intValue(), "Era esperado valores iguais, mas  0 é diferente de " + result68 + " <sync(bitset.size()).intValue()>")
chamada antiga: Assertions.assertFalse(sync(bitset.get(0)))
nova chamada: assertFalse(sync(bitset.get(0)), "Era esperado falso, mas " + result69 + " <sync(bitset.get(0))> é verdadeiro ")
chamada antiga: Assertions.assertTrue(sync(bitset.get(31)))
nova chamada: assertTrue(sync(bitset.get(31)), "Era esperado verdadeiro, mas " + result70 + " <sync(bitset.get(31))> é falso")
chamada antiga: Assertions.assertTrue(sync(bitset.get(10)))
nova chamada: assertTrue(sync(bitset.get(10)), "Era esperado verdadeiro, mas " + result71 + " <sync(bitset.get(10))> é falso")
chamada antiga: Assertions.assertEquals(2, sync(bitset.cardinality()).intValue())
nova chamada: assertEquals(2, sync(bitset.cardinality()).intValue(), "Era esperado valores iguais, mas  2 é diferente de " + result72 + " <sync(bitset.cardinality()).intValue()>")
chamada antiga: Assertions.assertEquals(32, sync(bitset.size()).intValue())
nova chamada: assertEquals(32, sync(bitset.size()).intValue(), "Era esperado valores iguais, mas  32 é diferente de " + result73 + " <sync(bitset.size()).intValue()>")
chamada antiga: Assertions.assertEquals(7, sync(bs.cardinality()).intValue())
nova chamada: assertEquals(7, sync(bs.cardinality()).intValue(), "Era esperado valores iguais, mas  7 é diferente de " + result74 + " <sync(bs.cardinality()).intValue()>")
chamada antiga: Assertions.assertEquals(16, sync(bs.size()).intValue())
nova chamada: assertEquals(16, sync(bs.size()).intValue(), "Era esperado valores iguais, mas  16 é diferente de " + result75 + " <sync(bs.size()).intValue()>")
chamada antiga: Assertions.assertEquals(2, sync(bs1.cardinality()).intValue())
nova chamada: assertEquals(2, sync(bs1.cardinality()).intValue(), "Era esperado valores iguais, mas  2 é diferente de " + result76 + " <sync(bs1.cardinality()).intValue()>")
chamada antiga: Assertions.assertEquals(8, sync(bs1.size()).intValue())
nova chamada: assertEquals(8, sync(bs1.size()).intValue(), "Era esperado valores iguais, mas  8 é diferente de " + result77 + " <sync(bs1.size()).intValue()>")
chamada antiga: Assertions.assertFalse(sync(bs1.get(3)))
nova chamada: assertFalse(sync(bs1.get(3)), "Era esperado falso, mas " + result78 + " <sync(bs1.get(3))> é verdadeiro ")
chamada antiga: Assertions.assertTrue(sync(bs1.get(4)))
nova chamada: assertTrue(sync(bs1.get(4)), "Era esperado verdadeiro, mas " + result79 + " <sync(bs1.get(4))> é falso")
chamada antiga: Assertions.assertFalse(sync(bs1.get(5)))
nova chamada: assertFalse(sync(bs1.get(5)), "Era esperado falso, mas " + result80 + " <sync(bs1.get(5))> é verdadeiro ")
chamada antiga: Assertions.assertTrue(sync(bs2.get(10)))
nova chamada: assertTrue(sync(bs2.get(10)), "Era esperado verdadeiro, mas " + result81 + " <sync(bs2.get(10))> é falso")
chamada antiga: Assertions.assertEquals(1, sync(bs1.cardinality()).intValue())
nova chamada: assertEquals(1, sync(bs1.cardinality()).intValue(), "Era esperado valores iguais, mas  1 é diferente de " + result82 + " <sync(bs1.cardinality()).intValue()>")
chamada antiga: Assertions.assertEquals(16, sync(bs1.size()).intValue())
nova chamada: assertEquals(16, sync(bs1.size()).intValue(), "Era esperado valores iguais, mas  16 é diferente de " + result83 + " <sync(bs1.size()).intValue()>")
chamada antiga: Assertions.assertTrue(executor.awaitTermination(10, TimeUnit.SECONDS))
nova chamada: assertTrue(executor.awaitTermination(10, TimeUnit.SECONDS), "Era esperado verdadeiro, mas " + result84 + " <executor.awaitTermination(10, TimeUnit.SECONDS)> é falso")
chamada antiga: Assertions.assertEquals(true, sync(list2.addAll(list.iterator())))
nova chamada: assertEquals(true, sync(list2.addAll(list.iterator())), "Era esperado valores iguais, mas  true é diferente de " + result85 + " <sync(list2.addAll(list.iterator()))>")
chamada antiga: Assertions.assertEquals(5, sync(list2.size()).intValue())
nova chamada: assertEquals(5, sync(list2.size()).intValue(), "Era esperado valores iguais, mas  5 é diferente de " + result86 + " <sync(list2.size()).intValue()>")
chamada antiga: Assertions.assertNull(sync(set.removeRandom()))
nova chamada: assertNull(sync(set.removeRandom()), "Era esperado nulo, mas " + result87 + " <sync(set.removeRandom())> não é nulo")
chamada antiga: Assertions.assertEquals(sb.getLng(), toIterator(set.iterator()).next().getLng())
nova chamada: assertEquals(sb.getLng(), toIterator(set.iterator()).next().getLng(), "Era esperado valores iguais, mas " + result88 + " <sb.getLng()> é diferente de " + result89 + " <toIterator(set.iterator()).next().getLng()>")
chamada antiga: Assertions.assertTrue(sync(set.remove(1)))
nova chamada: assertTrue(sync(set.remove(1)), "Era esperado verdadeiro, mas " + result90 + " <sync(set.remove(1))> é falso")
chamada antiga: Assertions.assertFalse(sync(set.contains(1)))
nova chamada: assertFalse(sync(set.contains(1)), "Era esperado falso, mas " + result91 + " <sync(set.contains(1))> é verdadeiro ")
chamada antiga: Assertions.assertFalse(sync(set.remove(1)))
nova chamada: assertFalse(sync(set.remove(1)), "Era esperado falso, mas " + result92 + " <sync(set.remove(1))> é verdadeiro ")
chamada antiga: Assertions.assertFalse(sync(set.contains(3)))
nova chamada: assertFalse(sync(set.contains(3)), "Era esperado falso, mas " + result93 + " <sync(set.contains(3))> é verdadeiro ")
chamada antiga: Assertions.assertEquals(0, setCopy.size())
nova chamada: assertEquals(0, setCopy.size(), "Era esperado valores iguais, mas  0 é diferente de " + result94 + " <setCopy.size()>")
chamada antiga: Assertions.assertTrue(sync(set.retainAll(Arrays.asList(1, 2))))
nova chamada: assertTrue(sync(set.retainAll(Arrays.asList(1, 2))), "Era esperado verdadeiro, mas " + result95 + " <sync(set.retainAll(Arrays.asList(1, 2)))> é falso")
chamada antiga: Assertions.assertEquals(2, sync(set.size()).intValue())
nova chamada: assertEquals(2, sync(set.size()).intValue(), "Era esperado valores iguais, mas  2 é diferente de " + result96 + " <sync(set.size()).intValue()>")
chamada antiga: Assertions.assertTrue(sync(set.containsAll(Collections.emptyList())))
nova chamada: assertTrue(sync(set.containsAll(Collections.emptyList())), "Era esperado verdadeiro, mas " + result97 + " <sync(set.containsAll(Collections.emptyList()))> é falso")
chamada antiga: Assertions.assertTrue(sync(set.containsAll(Arrays.asList(30, 11))))
nova chamada: assertTrue(sync(set.containsAll(Arrays.asList(30, 11))), "Era esperado verdadeiro, mas " + result98 + " <sync(set.containsAll(Arrays.asList(30, 11)))> é falso")
chamada antiga: Assertions.assertFalse(sync(set.containsAll(Arrays.asList(30, 711, 11))))
nova chamada: assertFalse(sync(set.containsAll(Arrays.asList(30, 711, 11))), "Era esperado falso, mas " + result99 + " <sync(set.containsAll(Arrays.asList(30, 711, 11)))> é verdadeiro ")
chamada antiga: Assertions.assertTrue(sync(set.contains(new TestObject("2", "3"))))
nova chamada: assertTrue(sync(set.contains(new TestObject("2", "3"))), "Era esperado verdadeiro, mas " + result100 + " <sync(set.contains(new TestObject('2', '3')))> é falso")
chamada antiga: Assertions.assertTrue(sync(set.contains(new TestObject("1", "2"))))
nova chamada: assertTrue(sync(set.contains(new TestObject("1", "2"))), "Era esperado verdadeiro, mas " + result101 + " <sync(set.contains(new TestObject('1', '2')))> é falso")
chamada antiga: Assertions.assertFalse(sync(set.contains(new TestObject("1", "9"))))
nova chamada: assertFalse(sync(set.contains(new TestObject("1", "9"))), "Era esperado falso, mas " + result102 + " <sync(set.contains(new TestObject('1', '9')))> é verdadeiro ")
chamada antiga: Assertions.assertEquals(4, sync(set.size()).intValue())
nova chamada: assertEquals(4, sync(set.size()).intValue(), "Era esperado valores iguais, mas  4 é diferente de " + result103 + " <sync(set.size()).intValue()>")
chamada antiga: Assertions.assertEquals(5, sync(set.size()).intValue())
nova chamada: assertEquals(5, sync(set.size()).intValue(), "Era esperado valores iguais, mas  5 é diferente de " + result104 + " <sync(set.size()).intValue()>")
chamada antiga: Assertions.assertTrue(sync(set.retainAll(Collections.<Integer>emptyList())))
nova chamada: assertTrue(sync(set.retainAll(Collections.<Integer>emptyList())), "Era esperado verdadeiro, mas " + result105 + " <sync(set.retainAll(Collections.<Integer>emptyList()))> é falso")
chamada antiga: Assertions.assertEquals(0, sync(set.size()).intValue())
nova chamada: assertEquals(0, sync(set.size()).intValue(), "Era esperado valores iguais, mas  0 é diferente de " + result106 + " <sync(set.size()).intValue()>")
chamada antiga: Assertions.assertFalse(sync(set.retainAll(Arrays.asList(1, 2))))
nova chamada: assertFalse(sync(set.retainAll(Arrays.asList(1, 2))), "Era esperado falso, mas " + result107 + " <sync(set.retainAll(Arrays.asList(1, 2)))> é verdadeiro ")
chamada antiga: Assertions.assertTrue(sync(set.move("otherSet", 1)))
nova chamada: assertTrue(sync(set.move("otherSet", 1)), "Era esperado verdadeiro, mas " + result108 + " <sync(set.move('otherSet', 1))> é falso")
chamada antiga: Assertions.assertEquals(1, sync(set.size()).intValue())
nova chamada: assertEquals(1, sync(set.size()).intValue(), "Era esperado valores iguais, mas  1 é diferente de " + result109 + " <sync(set.size()).intValue()>")
chamada antiga: Assertions.assertEquals(1, sync(otherSet.size()).intValue())
nova chamada: assertEquals(1, sync(otherSet.size()).intValue(), "Era esperado valores iguais, mas  1 é diferente de " + result110 + " <sync(otherSet.size()).intValue()>")
chamada antiga: Assertions.assertFalse(sync(set.move("otherSet", 2)))
nova chamada: assertFalse(sync(set.move("otherSet", 2)), "Era esperado falso, mas " + result111 + " <sync(set.move('otherSet', 2))> é verdadeiro ")
chamada antiga: Assertions.assertEquals(1, sync(set.size()).intValue())
nova chamada: assertEquals(1, sync(set.size()).intValue(), "Era esperado valores iguais, mas  1 é diferente de " + result112 + " <sync(set.size()).intValue()>")
chamada antiga: Assertions.assertEquals(0, sync(otherSet.size()).intValue())
nova chamada: assertEquals(0, sync(otherSet.size()).intValue(), "Era esperado valores iguais, mas  0 é diferente de " + result113 + " <sync(otherSet.size()).intValue()>")
chamada antiga: Assertions.assertEquals(2, count.intValue())
nova chamada: assertEquals(2, count.intValue(), "Era esperado valores iguais, mas  2 é diferente de " + result114 + " <count.intValue()>")
chamada antiga: Assertions.assertTrue(sync(tmp.contains(1)))
nova chamada: assertTrue(sync(tmp.contains(1)), "Era esperado verdadeiro, mas " + result115 + " <sync(tmp.contains(1))> é falso")
chamada antiga: Assertions.assertTrue(sync(tmp.contains(3)))
nova chamada: assertTrue(sync(tmp.contains(3)), "Era esperado verdadeiro, mas " + result116 + " <sync(tmp.contains(3))> é falso")
chamada antiga: Assertions.assertFalse(lock.tryLock())
nova chamada: assertFalse(lock.tryLock(), "Era esperado falso, mas " + result117 + " <lock.tryLock()> é verdadeiro ")
chamada antiga: Assertions.assertEquals(expectedMap, filtered)
nova chamada: assertEquals(expectedMap, filtered, "Era esperado valores iguais, mas  expectedMap é diferente de " + " filtered")
chamada antiga: Assertions.assertTrue(filteredAgain.isEmpty())
nova chamada: assertTrue(filteredAgain.isEmpty(), "Era esperado verdadeiro, mas " + result118 + " <filteredAgain.isEmpty()> é falso")
chamada antiga: Assertions.assertEquals(expectedMap, filtered)
nova chamada: assertEquals(expectedMap, filtered, "Era esperado valores iguais, mas  expectedMap é diferente de " + " filtered")
chamada antiga: Assertions.assertEquals(0, cache.size())
nova chamada: assertEquals(0, cache.size(), "Era esperado valores iguais, mas  0 é diferente de " + result119 + " <cache.size()>")
chamada antiga: Assertions.assertEquals(0, cache.size())
nova chamada: assertEquals(0, cache.size(), "Era esperado valores iguais, mas  0 é diferente de " + result120 + " <cache.size()>")
chamada antiga: Assertions.assertEquals(1, cache.size())
nova chamada: assertEquals(1, cache.size(), "Era esperado valores iguais, mas  1 é diferente de " + result121 + " <cache.size()>")
chamada antiga: Assertions.assertTrue(map.keySet().contains(new SimpleKey("33")))
nova chamada: assertTrue(map.keySet().contains(new SimpleKey("33")), "Era esperado verdadeiro, mas " + result122 + " <map.keySet().contains(new SimpleKey('33'))> é falso")
chamada antiga: Assertions.assertFalse(map.keySet().contains(new SimpleKey("44")))
nova chamada: assertFalse(map.keySet().contains(new SimpleKey("44")), "Era esperado falso, mas " + result123 + " <map.keySet().contains(new SimpleKey('44'))> é verdadeiro ")
chamada antiga: Assertions.assertTrue(map.keySet().contains(new SimpleKey("1")))
nova chamada: assertTrue(map.keySet().contains(new SimpleKey("1")), "Era esperado verdadeiro, mas " + result124 + " <map.keySet().contains(new SimpleKey('1'))> é falso")
chamada antiga: Assertions.assertFalse(map.keySet().contains(new SimpleKey("33")))
nova chamada: assertFalse(map.keySet().contains(new SimpleKey("33")), "Era esperado falso, mas " + result125 + " <map.keySet().contains(new SimpleKey('33'))> é verdadeiro ")
chamada antiga: Assertions.assertFalse(map.keySet().contains(new SimpleKey("44")))
nova chamada: assertFalse(map.keySet().contains(new SimpleKey("44")), "Era esperado falso, mas " + result126 + " <map.keySet().contains(new SimpleKey('44'))> é verdadeiro ")
chamada antiga: Assertions.assertTrue(map.keySet().contains(new SimpleKey("1")))
nova chamada: assertTrue(map.keySet().contains(new SimpleKey("1")), "Era esperado verdadeiro, mas " + result127 + " <map.keySet().contains(new SimpleKey('1'))> é falso")
chamada antiga: Assertions.assertTrue(map.values().contains(new SimpleValue("44")))
nova chamada: assertTrue(map.values().contains(new SimpleValue("44")), "Era esperado verdadeiro, mas " + result128 + " <map.values().contains(new SimpleValue('44'))> é falso")
chamada antiga: Assertions.assertFalse(map.values().contains(new SimpleValue("33")))
nova chamada: assertFalse(map.values().contains(new SimpleValue("33")), "Era esperado falso, mas " + result129 + " <map.values().contains(new SimpleValue('33'))> é verdadeiro ")
chamada antiga: Assertions.assertTrue(map.values().contains(new SimpleValue("2")))
nova chamada: assertTrue(map.values().contains(new SimpleValue("2")), "Era esperado verdadeiro, mas " + result130 + " <map.values().contains(new SimpleValue('2'))> é falso")
chamada antiga: Assertions.assertFalse(map.values().contains(new SimpleValue("44")))
nova chamada: assertFalse(map.values().contains(new SimpleValue("44")), "Era esperado falso, mas " + result131 + " <map.values().contains(new SimpleValue('44'))> é verdadeiro ")
chamada antiga: Assertions.assertFalse(map.values().contains(new SimpleValue("33")))
nova chamada: assertFalse(map.values().contains(new SimpleValue("33")), "Era esperado falso, mas " + result132 + " <map.values().contains(new SimpleValue('33'))> é verdadeiro ")
chamada antiga: Assertions.assertTrue(map.values().contains(new SimpleValue("2")))
nova chamada: assertTrue(map.values().contains(new SimpleValue("2")), "Era esperado verdadeiro, mas " + result133 + " <map.values().contains(new SimpleValue('2'))> é falso")
chamada antiga: Assertions.assertFalse(map.containsValue(new SimpleValue("34")))
nova chamada: assertFalse(map.containsValue(new SimpleValue("34")), "Era esperado falso, mas " + result134 + " <map.containsValue(new SimpleValue('34'))> é verdadeiro ")
chamada antiga: Assertions.assertTrue(map.containsValue(new SimpleValue("44")))
nova chamada: assertTrue(map.containsValue(new SimpleValue("44")), "Era esperado verdadeiro, mas " + result135 + " <map.containsValue(new SimpleValue('44'))> é falso")
chamada antiga: Assertions.assertFalse(map.containsValue(new SimpleValue("34")))
nova chamada: assertFalse(map.containsValue(new SimpleValue("34")), "Era esperado falso, mas " + result136 + " <map.containsValue(new SimpleValue('34'))> é verdadeiro ")
chamada antiga: Assertions.assertFalse(map.containsValue(new SimpleValue("44")))
nova chamada: assertFalse(map.containsValue(new SimpleValue("44")), "Era esperado falso, mas " + result137 + " <map.containsValue(new SimpleValue('44'))> é verdadeiro ")
chamada antiga: Assertions.assertTrue(map.containsKey(new SimpleKey("33")))
nova chamada: assertTrue(map.containsKey(new SimpleKey("33")), "Era esperado verdadeiro, mas " + result138 + " <map.containsKey(new SimpleKey('33'))> é falso")
chamada antiga: Assertions.assertFalse(map.containsKey(new SimpleKey("34")))
nova chamada: assertFalse(map.containsKey(new SimpleKey("34")), "Era esperado falso, mas " + result139 + " <map.containsKey(new SimpleKey('34'))> é verdadeiro ")
chamada antiga: Assertions.assertFalse(map.containsKey(new SimpleKey("33")))
nova chamada: assertFalse(map.containsKey(new SimpleKey("33")), "Era esperado falso, mas " + result140 + " <map.containsKey(new SimpleKey('33'))> é verdadeiro ")
chamada antiga: Assertions.assertTrue(res)
nova chamada: assertTrue(res, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertNull(val1)
nova chamada: assertNull(val1, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: Assertions.assertEquals(0, map.size())
nova chamada: assertEquals(0, map.size(), "Era esperado valores iguais, mas  0 é diferente de " + result141 + " <map.size()>")
chamada antiga: Assertions.assertFalse(res)
nova chamada: assertFalse(res, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: Assertions.assertFalse(res1)
nova chamada: assertFalse(res1, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: Assertions.assertEquals("2", val1.getValue())
nova chamada: assertEquals("2", val1.getValue(), "Era esperado valores iguais, mas  '2' é diferente de " + result142 + " <val1.getValue()>")
chamada antiga: Assertions.assertFalse(res)
nova chamada: assertFalse(res, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: Assertions.assertEquals("2", val1.getValue())
nova chamada: assertEquals("2", val1.getValue(), "Era esperado valores iguais, mas  '2' é diferente de " + result143 + " <val1.getValue()>")
chamada antiga: Assertions.assertTrue(res)
nova chamada: assertTrue(res, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertFalse(res1)
nova chamada: assertFalse(res1, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: Assertions.assertEquals("3", val1.getValue())
nova chamada: assertEquals("3", val1.getValue(), "Era esperado valores iguais, mas  '3' é diferente de " + result144 + " <val1.getValue()>")
chamada antiga: Assertions.assertNull(map.get(new SimpleKey("33")))
nova chamada: assertNull(map.get(new SimpleKey("33")), "Era esperado nulo, mas " + result145 + " <map.get(new SimpleKey('33'))> não é nulo")
chamada antiga: Assertions.assertEquals(3, map.size())
nova chamada: assertEquals(3, map.size(), "Era esperado valores iguais, mas  3 é diferente de " + result146 + " <map.size()>")
chamada antiga: Assertions.assertEquals(0, map.size())
nova chamada: assertEquals(0, map.size(), "Era esperado valores iguais, mas  0 é diferente de " + result147 + " <map.size()>")
chamada antiga: Assertions.assertNull(map.get(new SimpleKey("33")))
nova chamada: assertNull(map.get(new SimpleKey("33")), "Era esperado nulo, mas " + result148 + " <map.get(new SimpleKey('33'))> não é nulo")
chamada antiga: Assertions.assertEquals("44", val1.getValue())
nova chamada: assertEquals("44", val1.getValue(), "Era esperado valores iguais, mas  '44' é diferente de " + result149 + " <val1.getValue()>")
chamada antiga: Assertions.assertEquals(1, map.size())
nova chamada: assertEquals(1, map.size(), "Era esperado valores iguais, mas  1 é diferente de " + result150 + " <map.size()>")
chamada antiga: Assertions.assertEquals("44", val2.getValue())
nova chamada: assertEquals("44", val2.getValue(), "Era esperado valores iguais, mas  '44' é diferente de " + result151 + " <val2.getValue()>")
chamada antiga: Assertions.assertEquals(1, map.size())
nova chamada: assertEquals(1, map.size(), "Era esperado valores iguais, mas  1 é diferente de " + result152 + " <map.size()>")
chamada antiga: Assertions.assertNull(map.get(new SimpleKey("33")))
nova chamada: assertNull(map.get(new SimpleKey("33")), "Era esperado nulo, mas " + result153 + " <map.get(new SimpleKey('33'))> não é nulo")
chamada antiga: Assertions.assertNull(map.get(new SimpleKey("33")))
nova chamada: assertNull(map.get(new SimpleKey("33")), "Era esperado nulo, mas " + result154 + " <map.get(new SimpleKey('33'))> não é nulo")
chamada antiga: Assertions.assertNull(map.get(new SimpleKey("55")))
nova chamada: assertNull(map.get(new SimpleKey("55")), "Era esperado nulo, mas " + result155 + " <map.get(new SimpleKey('55'))> não é nulo")
chamada antiga: Assertions.assertEquals("44", val1.getValue())
nova chamada: assertEquals("44", val1.getValue(), "Era esperado valores iguais, mas  '44' é diferente de " + result156 + " <val1.getValue()>")
chamada antiga: Assertions.assertEquals("66", val2.getValue())
nova chamada: assertEquals("66", val2.getValue(), "Era esperado valores iguais, mas  '66' é diferente de " + result157 + " <val2.getValue()>")
chamada antiga: Assertions.assertEquals(2, map.size())
nova chamada: assertEquals(2, map.size(), "Era esperado valores iguais, mas  2 é diferente de " + result158 + " <map.size()>")
chamada antiga: Assertions.assertEquals("44", val3.getValue())
nova chamada: assertEquals("44", val3.getValue(), "Era esperado valores iguais, mas  '44' é diferente de " + result159 + " <val3.getValue()>")
chamada antiga: Assertions.assertEquals("66", val4.getValue())
nova chamada: assertEquals("66", val4.getValue(), "Era esperado valores iguais, mas  '66' é diferente de " + result160 + " <val4.getValue()>")
chamada antiga: Assertions.assertEquals(2, map.size())
nova chamada: assertEquals(2, map.size(), "Era esperado valores iguais, mas  2 é diferente de " + result161 + " <map.size()>")
chamada antiga: Assertions.assertNull(map.get(new SimpleKey("33")))
nova chamada: assertNull(map.get(new SimpleKey("33")), "Era esperado nulo, mas " + result162 + " <map.get(new SimpleKey('33'))> não é nulo")
chamada antiga: Assertions.assertNull(map.get(new SimpleKey("55")))
nova chamada: assertNull(map.get(new SimpleKey("55")), "Era esperado nulo, mas " + result163 + " <map.get(new SimpleKey('55'))> não é nulo")
chamada antiga: Assertions.assertEquals(value, map.putIfAbsent(key, new SimpleValue("3"), 1, TimeUnit.SECONDS))
nova chamada: assertEquals(value, map.putIfAbsent(key, new SimpleValue("3"), 1, TimeUnit.SECONDS), "Era esperado valores iguais, mas  value é diferente de " + result164 + " <map.putIfAbsent(key, new SimpleValue('3'), 1, TimeUnit.SECONDS)>")
chamada antiga: Assertions.assertEquals(value, map.get(key))
nova chamada: assertEquals(value, map.get(key), "Era esperado valores iguais, mas  value é diferente de " + result165 + " <map.get(key)>")
chamada antiga: Assertions.assertEquals(new SimpleValue("4"), map.get(new SimpleKey("4")))
nova chamada: assertEquals(new SimpleValue("4"), map.get(new SimpleKey("4")), "Era esperado valores iguais, mas  new SimpleValue('4') é diferente de " + result166 + " <map.get(new SimpleKey('4'))>")
chamada antiga: Assertions.assertNull(map.get(new SimpleKey("4")))
nova chamada: assertNull(map.get(new SimpleKey("4")), "Era esperado nulo, mas " + result167 + " <map.get(new SimpleKey('4'))> não é nulo")
chamada antiga: Assertions.assertEquals(new SimpleValue("4"), map.get(new SimpleKey("4")))
nova chamada: assertEquals(new SimpleValue("4"), map.get(new SimpleKey("4")), "Era esperado valores iguais, mas  new SimpleValue('4') é diferente de " + result168 + " <map.get(new SimpleKey('4'))>")
chamada antiga: Assertions.assertNull(map.putIfAbsent(key1, value1, 2, TimeUnit.SECONDS))
nova chamada: assertNull(map.putIfAbsent(key1, value1, 2, TimeUnit.SECONDS), "Era esperado nulo, mas " + result169 + " <map.putIfAbsent(key1, value1, 2, TimeUnit.SECONDS)> não é nulo")
chamada antiga: Assertions.assertEquals(value1, map.get(key1))
nova chamada: assertEquals(value1, map.get(key1), "Era esperado valores iguais, mas  value1 é diferente de " + result170 + " <map.get(key1)>")
chamada antiga: Assertions.assertEquals(3, (int) map.get("123"))
nova chamada: assertEquals(3, (int) map.get("123"), "Era esperado valores iguais, mas  3 é diferente de " + " (int) map.get('123')")
chamada antiga: Assertions.assertFalse(map.containsKey("123"))
nova chamada: assertFalse(map.containsKey("123"), "Era esperado falso, mas " + result171 + " <map.containsKey('123')> é verdadeiro ")
chamada antiga: Assertions.assertEquals(1L, mapCache.get("4"))
nova chamada: assertEquals(1L, mapCache.get("4"), "Era esperado valores iguais, mas  1L é diferente de " + result172 + " <mapCache.get('4')>")
chamada antiga: Assertions.assertEquals(1L, mapCache.get("4"))
nova chamada: assertEquals(1L, mapCache.get("4"), "Era esperado valores iguais, mas  1L é diferente de " + result173 + " <mapCache.get('4')>")
chamada antiga: Assertions.assertEquals(1L, map.get("4"))
nova chamada: assertEquals(1L, map.get("4"), "Era esperado valores iguais, mas  1L é diferente de " + result174 + " <map.get('4')>")
chamada antiga: Assertions.assertEquals(2.23, mapCache1.get("4"))
nova chamada: assertEquals(2.23, mapCache1.get("4"), "Era esperado valores iguais, mas  2.23 é diferente de " + result175 + " <mapCache1.get('4')>")
chamada antiga: Assertions.assertThrows(NoSuchElementException.class, () -> {
    List<Integer> emptyList = new ArrayList<Integer>();
    CompositeIterable<Integer> compositeIterable = new CompositeIterable<Integer>(emptyList);
    compositeIterable.iterator().next();
})
nova chamada: assertThrows(NoSuchElementException.class, () -> {
    List<Integer> emptyList = new ArrayList<Integer>();
    CompositeIterable<Integer> compositeIterable = new CompositeIterable<Integer>(emptyList);
    compositeIterable.iterator().next();
}, "Era esperado que a exceção  NoSuchElementException.class fosse lançada, mas não foi")
chamada antiga: Assertions.assertThrows(IllegalStateException.class, () -> {
    List<Integer> emptyList = new ArrayList<>();
    CompositeIterable<Integer> compositeIterable = new CompositeIterable<Integer>(emptyList);
    compositeIterable.iterator().remove();
})
nova chamada: assertThrows(IllegalStateException.class, () -> {
    List<Integer> emptyList = new ArrayList<>();
    CompositeIterable<Integer> compositeIterable = new CompositeIterable<Integer>(emptyList);
    compositeIterable.iterator().remove();
}, "Era esperado que a exceção  IllegalStateException.class fosse lançada, mas não foi")
chamada antiga: assertEquals("redis://127.0.0.1", config.getAddress())
nova chamada: assertEquals("redis://127.0.0.1", config.getAddress(), "Era esperado valores iguais, mas  'redis://127.0.0.1' é diferente de " + result176 + " <config.getAddress()>")
chamada antiga: assertEquals("redis://1.1.1.1", config.getAddress())
nova chamada: assertEquals("redis://1.1.1.1", config.getAddress(), "Era esperado valores iguais, mas  'redis://1.1.1.1' é diferente de " + result177 + " <config.getAddress()>")
chamada antiga: assertEquals("redis://1.1.1.1", config.getAddress())
nova chamada: assertEquals("redis://1.1.1.1", config.getAddress(), "Era esperado valores iguais, mas  'redis://1.1.1.1' é diferente de " + result178 + " <config.getAddress()>")
chamada antiga: assertEquals("redis://1.1.1.1:6379", config.getAddress())
nova chamada: assertEquals("redis://1.1.1.1:6379", config.getAddress(), "Era esperado valores iguais, mas  'redis://1.1.1.1:6379' é diferente de " + result179 + " <config.getAddress()>")
chamada antiga: assertEquals("redis://1.1.1.1:6379", config.getAddress())
nova chamada: assertEquals("redis://1.1.1.1:6379", config.getAddress(), "Era esperado valores iguais, mas  'redis://1.1.1.1:6379' é diferente de " + result180 + " <config.getAddress()>")
chamada antiga: assertEquals("redis://${REDIS_URI}", config.getAddress())
nova chamada: assertEquals("redis://${REDIS_URI}", config.getAddress(), "Era esperado valores iguais, mas  'redis://${REDIS_URI}' é diferente de " + result181 + " <config.getAddress()>")
chamada antiga: assertEquals("redis://11.0.0.1", config.getAddress())
nova chamada: assertEquals("redis://11.0.0.1", config.getAddress(), "Era esperado valores iguais, mas  'redis://11.0.0.1' é diferente de " + result182 + " <config.getAddress()>")
chamada antiga: assertEquals("redis://11.0.0.1", config.getAddress())
nova chamada: assertEquals("redis://11.0.0.1", config.getAddress(), "Era esperado valores iguais, mas  'redis://11.0.0.1' é diferente de " + result183 + " <config.getAddress()>")
chamada antiga: assertEquals("redis://11.0.0.1:1234", config.getAddress())
nova chamada: assertEquals("redis://11.0.0.1:1234", config.getAddress(), "Era esperado valores iguais, mas  'redis://11.0.0.1:1234' é diferente de " + result184 + " <config.getAddress()>")
chamada antiga: assertEquals("redis://11.0.0.1:1234", config.getAddress())
nova chamada: assertEquals("redis://11.0.0.1:1234", config.getAddress(), "Era esperado valores iguais, mas  'redis://11.0.0.1:1234' é diferente de " + result185 + " <config.getAddress()>")
chamada antiga: assertEquals("redis://10.0.0.1", config.getAddress())
nova chamada: assertEquals("redis://10.0.0.1", config.getAddress(), "Era esperado valores iguais, mas  'redis://10.0.0.1' é diferente de " + result186 + " <config.getAddress()>")
chamada antiga: assertEquals("redis://127.0.0.1:6379", config.getAddress())
nova chamada: assertEquals("redis://127.0.0.1:6379", config.getAddress(), "Era esperado valores iguais, mas  'redis://127.0.0.1:6379' é diferente de " + result187 + " <config.getAddress()>")
chamada antiga: assertEquals("redis://11.0.0.1:1234", config.getAddress())
nova chamada: assertEquals("redis://11.0.0.1:1234", config.getAddress(), "Era esperado valores iguais, mas  'redis://11.0.0.1:1234' é diferente de " + result188 + " <config.getAddress()>")
chamada antiga: assertEquals("redis://127.0.0.1:6379", config.getAddress())
nova chamada: assertEquals("redis://127.0.0.1:6379", config.getAddress(), "Era esperado valores iguais, mas  'redis://127.0.0.1:6379' é diferente de " + result189 + " <config.getAddress()>")
chamada antiga: Assertions.assertTrue(spendTime < 2020)
nova chamada: assertTrue(spendTime < 2020, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(latch.await(1, TimeUnit.SECONDS))
nova chamada: assertTrue(latch.await(1, TimeUnit.SECONDS), "Era esperado verdadeiro, mas " + result190 + " <latch.await(1, TimeUnit.SECONDS)> é falso")
chamada antiga: Assertions.assertTrue(lock.isHeldByCurrentThread())
nova chamada: assertTrue(lock.isHeldByCurrentThread(), "Era esperado verdadeiro, mas " + result191 + " <lock.isHeldByCurrentThread()> é falso")
chamada antiga: Assertions.assertTrue(lock.isLocked())
nova chamada: assertTrue(lock.isLocked(), "Era esperado verdadeiro, mas " + result192 + " <lock.isLocked()> é falso")
chamada antiga: Assertions.assertTrue(lock.isLocked())
nova chamada: assertTrue(lock.isLocked(), "Era esperado verdadeiro, mas " + result193 + " <lock.isLocked()> é falso")
chamada antiga: Assertions.assertTrue(lock.tryLock())
nova chamada: assertTrue(lock.tryLock(), "Era esperado verdadeiro, mas " + result194 + " <lock.tryLock()> é falso")
chamada antiga: Assertions.assertTrue(lock.tryLock())
nova chamada: assertTrue(lock.tryLock(), "Era esperado verdadeiro, mas " + result195 + " <lock.tryLock()> é falso")
chamada antiga: Assertions.assertTrue(1 == iterator.next())
nova chamada: assertTrue(1 == iterator.next(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(2 == iterator.next())
nova chamada: assertTrue(2 == iterator.next(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(3 == iterator.next())
nova chamada: assertTrue(3 == iterator.next(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(4 == iterator.next())
nova chamada: assertTrue(4 == iterator.next(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(5 == iterator.next())
nova chamada: assertTrue(5 == iterator.next(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(0 == iterator.next())
nova chamada: assertTrue(0 == iterator.next(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(7 == iterator.next())
nova chamada: assertTrue(7 == iterator.next(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(8 == iterator.next())
nova chamada: assertTrue(8 == iterator.next(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(0 == iterator.next())
nova chamada: assertTrue(0 == iterator.next(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(10 == iterator.next())
nova chamada: assertTrue(10 == iterator.next(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(10 == iterator.next())
nova chamada: assertTrue(10 == iterator.next(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(0 == iterator.next())
nova chamada: assertTrue(0 == iterator.next(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(8 == iterator.next())
nova chamada: assertTrue(8 == iterator.next(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(7 == iterator.next())
nova chamada: assertTrue(7 == iterator.next(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(0 == iterator.next())
nova chamada: assertTrue(0 == iterator.next(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(5 == iterator.next())
nova chamada: assertTrue(5 == iterator.next(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(4 == iterator.next())
nova chamada: assertTrue(4 == iterator.next(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(3 == iterator.next())
nova chamada: assertTrue(3 == iterator.next(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(2 == iterator.next())
nova chamada: assertTrue(2 == iterator.next(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(1 == iterator.next())
nova chamada: assertTrue(1 == iterator.next(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(55 == sync(list.indexOf(56)))
nova chamada: assertTrue(55 == sync(list.indexOf(56)), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(99 == sync(list.indexOf(100)))
nova chamada: assertTrue(99 == sync(list.indexOf(100)), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(-1 == sync(list.indexOf(200)))
nova chamada: assertTrue(-1 == sync(list.indexOf(200)), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(-1 == sync(list.indexOf(0)))
nova chamada: assertTrue(-1 == sync(list.indexOf(0)), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(1 == val)
nova chamada: assertTrue(1 == val, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(sync(list.removeAll(Arrays.asList(3, 2, 10, 6))))
nova chamada: assertTrue(sync(list.removeAll(Arrays.asList(3, 2, 10, 6))), "Era esperado verdadeiro, mas " + result196 + " <sync(list.removeAll(Arrays.asList(3, 2, 10, 6)))> é falso")
chamada antiga: Assertions.assertTrue(sync(list.removeAll(Arrays.asList(4))))
nova chamada: assertTrue(sync(list.removeAll(Arrays.asList(4))), "Era esperado verdadeiro, mas " + result197 + " <sync(list.removeAll(Arrays.asList(4)))> é falso")
chamada antiga: Assertions.assertTrue(sync(list.removeAll(Arrays.asList(1, 5, 1, 5))))
nova chamada: assertTrue(sync(list.removeAll(Arrays.asList(1, 5, 1, 5))), "Era esperado verdadeiro, mas " + result198 + " <sync(list.removeAll(Arrays.asList(1, 5, 1, 5)))> é falso")
chamada antiga: Assertions.assertTrue(sync(list.retainAll(Arrays.asList(3, 2, 10, 6))))
nova chamada: assertTrue(sync(list.retainAll(Arrays.asList(3, 2, 10, 6))), "Era esperado verdadeiro, mas " + result199 + " <sync(list.retainAll(Arrays.asList(3, 2, 10, 6)))> é falso")
chamada antiga: Assertions.assertTrue(sync(list.retainAll(Collections.<Integer>emptyList())))
nova chamada: assertTrue(sync(list.retainAll(Collections.<Integer>emptyList())), "Era esperado verdadeiro, mas " + result200 + " <sync(list.retainAll(Collections.<Integer>emptyList()))> é falso")
chamada antiga: Assertions.assertTrue(sync(list.containsAll(Arrays.asList(30, 11))))
nova chamada: assertTrue(sync(list.containsAll(Arrays.asList(30, 11))), "Era esperado verdadeiro, mas " + result201 + " <sync(list.containsAll(Arrays.asList(30, 11)))> é falso")
chamada antiga: Assertions.assertTrue(sync(list.containsAll(Arrays.asList(30))))
nova chamada: assertTrue(sync(list.containsAll(Arrays.asList(30))), "Era esperado verdadeiro, mas " + result202 + " <sync(list.containsAll(Arrays.asList(30)))> é falso")
chamada antiga: Assertions.assertTrue(sync(list.containsAll(Collections.emptyList())))
nova chamada: assertTrue(sync(list.containsAll(Collections.emptyList())), "Era esperado verdadeiro, mas " + result203 + " <sync(list.containsAll(Collections.emptyList()))> é falso")
chamada antiga: Assertions.assertTrue(Arrays.asList(1).containsAll(Collections.emptyList()))
nova chamada: assertTrue(Arrays.asList(1).containsAll(Collections.emptyList()), "Era esperado verdadeiro, mas " + result204 + " <Arrays.asList(1).containsAll(Collections.emptyList())> é falso")
chamada antiga: Assertions.assertTrue(sync(list.contains("3")))
nova chamada: assertTrue(sync(list.contains("3")), "Era esperado verdadeiro, mas " + result205 + " <sync(list.contains('3'))> é falso")
chamada antiga: Assertions.assertTrue(sync(list.contains("1")))
nova chamada: assertTrue(sync(list.contains("1")), "Era esperado verdadeiro, mas " + result206 + " <sync(list.contains('1'))> é falso")
chamada antiga: Assertions.assertTrue(set.add("a"))
nova chamada: assertTrue(set.add("a"), "Era esperado verdadeiro, mas " + result207 + " <set.add('a')> é falso")
chamada antiga: Assertions.assertTrue(set.add("b"))
nova chamada: assertTrue(set.add("b"), "Era esperado verdadeiro, mas " + result208 + " <set.add('b')> é falso")
chamada antiga: Assertions.assertTrue(set.add("c"))
nova chamada: assertTrue(set.add("c"), "Era esperado verdadeiro, mas " + result209 + " <set.add('c')> é falso")
chamada antiga: Assertions.assertTrue(set.add("d"))
nova chamada: assertTrue(set.add("d"), "Era esperado verdadeiro, mas " + result210 + " <set.add('d')> é falso")
chamada antiga: Assertions.assertTrue(set.add("e"))
nova chamada: assertTrue(set.add("e"), "Era esperado verdadeiro, mas " + result211 + " <set.add('e')> é falso")
chamada antiga: Assertions.assertTrue(set.add("f"))
nova chamada: assertTrue(set.add("f"), "Era esperado verdadeiro, mas " + result212 + " <set.add('f')> é falso")
chamada antiga: Assertions.assertTrue(set.add("g"))
nova chamada: assertTrue(set.add("g"), "Era esperado verdadeiro, mas " + result213 + " <set.add('g')> é falso")
chamada antiga: Assertions.assertTrue(set.add("a"))
nova chamada: assertTrue(set.add("a"), "Era esperado verdadeiro, mas " + result214 + " <set.add('a')> é falso")
chamada antiga: Assertions.assertTrue(set.add("b"))
nova chamada: assertTrue(set.add("b"), "Era esperado verdadeiro, mas " + result215 + " <set.add('b')> é falso")
chamada antiga: Assertions.assertTrue(set.add("c"))
nova chamada: assertTrue(set.add("c"), "Era esperado verdadeiro, mas " + result216 + " <set.add('c')> é falso")
chamada antiga: Assertions.assertTrue(set.add("d"))
nova chamada: assertTrue(set.add("d"), "Era esperado verdadeiro, mas " + result217 + " <set.add('d')> é falso")
chamada antiga: Assertions.assertTrue(set.add("e"))
nova chamada: assertTrue(set.add("e"), "Era esperado verdadeiro, mas " + result218 + " <set.add('e')> é falso")
chamada antiga: Assertions.assertTrue(set.add("f"))
nova chamada: assertTrue(set.add("f"), "Era esperado verdadeiro, mas " + result219 + " <set.add('f')> é falso")
chamada antiga: Assertions.assertTrue(set.add("g"))
nova chamada: assertTrue(set.add("g"), "Era esperado verdadeiro, mas " + result220 + " <set.add('g')> é falso")
chamada antiga: Assertions.assertTrue(set.add("a"))
nova chamada: assertTrue(set.add("a"), "Era esperado verdadeiro, mas " + result221 + " <set.add('a')> é falso")
chamada antiga: Assertions.assertTrue(set.add("b"))
nova chamada: assertTrue(set.add("b"), "Era esperado verdadeiro, mas " + result222 + " <set.add('b')> é falso")
chamada antiga: Assertions.assertTrue(set.add("c"))
nova chamada: assertTrue(set.add("c"), "Era esperado verdadeiro, mas " + result223 + " <set.add('c')> é falso")
chamada antiga: Assertions.assertTrue(set.add("d"))
nova chamada: assertTrue(set.add("d"), "Era esperado verdadeiro, mas " + result224 + " <set.add('d')> é falso")
chamada antiga: Assertions.assertTrue(set.add("e"))
nova chamada: assertTrue(set.add("e"), "Era esperado verdadeiro, mas " + result225 + " <set.add('e')> é falso")
chamada antiga: Assertions.assertTrue(set.add("f"))
nova chamada: assertTrue(set.add("f"), "Era esperado verdadeiro, mas " + result226 + " <set.add('f')> é falso")
chamada antiga: Assertions.assertTrue(set.add("g"))
nova chamada: assertTrue(set.add("g"), "Era esperado verdadeiro, mas " + result227 + " <set.add('g')> é falso")
chamada antiga: Assertions.assertTrue(executor.awaitTermination(RedissonRuntimeEnvironment.isTravis ? 10 : 3, TimeUnit.MINUTES))
nova chamada: assertTrue(executor.awaitTermination(RedissonRuntimeEnvironment.isTravis ? 10 : 3, TimeUnit.MINUTES), "Era esperado verdadeiro, mas " + result228 + " <executor.awaitTermination(RedissonRuntimeEnvironment.isTravis ? 10 : 3, TimeUnit.MINUTES)> é falso")
chamada antiga: Assertions.assertTrue(executor.awaitTermination(5, TimeUnit.MINUTES))
nova chamada: assertTrue(executor.awaitTermination(5, TimeUnit.MINUTES), "Era esperado verdadeiro, mas " + result229 + " <executor.awaitTermination(5, TimeUnit.MINUTES)> é falso")
chamada antiga: Assertions.assertTrue(executor.awaitTermination(5, TimeUnit.MINUTES))
nova chamada: assertTrue(executor.awaitTermination(5, TimeUnit.MINUTES), "Era esperado verdadeiro, mas " + result230 + " <executor.awaitTermination(5, TimeUnit.MINUTES)> é falso")
chamada antiga: Assertions.assertTrue(executor.awaitTermination(5, TimeUnit.MINUTES))
nova chamada: assertTrue(executor.awaitTermination(5, TimeUnit.MINUTES), "Era esperado verdadeiro, mas " + result231 + " <executor.awaitTermination(5, TimeUnit.MINUTES)> é falso")
chamada antiga: Assertions.assertTrue(pool.awaitTermination(RedissonRuntimeEnvironment.isTravis ? 20 : 3, TimeUnit.MINUTES))
nova chamada: assertTrue(pool.awaitTermination(RedissonRuntimeEnvironment.isTravis ? 20 : 3, TimeUnit.MINUTES), "Era esperado verdadeiro, mas " + result232 + " <pool.awaitTermination(RedissonRuntimeEnvironment.isTravis ? 20 : 3, TimeUnit.MINUTES)> é falso")
chamada antiga: Assertions.assertTrue(unlocked)
nova chamada: assertTrue(unlocked, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(locked)
nova chamada: assertTrue(locked, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(unlocked)
nova chamada: assertTrue(unlocked, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(locked)
nova chamada: assertTrue(locked, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(locked)
nova chamada: assertTrue(locked, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(unlocked)
nova chamada: assertTrue(unlocked, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(spendTime < 2020)
nova chamada: assertTrue(spendTime < 2020, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(latch.await(1, TimeUnit.SECONDS))
nova chamada: assertTrue(latch.await(1, TimeUnit.SECONDS), "Era esperado verdadeiro, mas " + result233 + " <latch.await(1, TimeUnit.SECONDS)> é falso")
chamada antiga: Assertions.assertTrue(lock.isHeldByCurrentThread())
nova chamada: assertTrue(lock.isHeldByCurrentThread(), "Era esperado verdadeiro, mas " + result234 + " <lock.isHeldByCurrentThread()> é falso")
chamada antiga: Assertions.assertTrue(lock.isLocked())
nova chamada: assertTrue(lock.isLocked(), "Era esperado verdadeiro, mas " + result235 + " <lock.isLocked()> é falso")
chamada antiga: Assertions.assertTrue(lock.isLocked())
nova chamada: assertTrue(lock.isLocked(), "Era esperado verdadeiro, mas " + result236 + " <lock.isLocked()> é falso")
chamada antiga: Assertions.assertTrue(lock.tryLock())
nova chamada: assertTrue(lock.tryLock(), "Era esperado verdadeiro, mas " + result237 + " <lock.tryLock()> é falso")
chamada antiga: Assertions.assertTrue(lock.tryLock())
nova chamada: assertTrue(lock.tryLock(), "Era esperado verdadeiro, mas " + result238 + " <lock.tryLock()> é falso")
chamada antiga: Assertions.assertTrue(sync(b1.get()) instanceof RBucketReactive)
nova chamada: assertTrue(sync(b1.get()) instanceof RBucketReactive, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(sync(b4.get()) instanceof RMapCacheReactive)
nova chamada: assertTrue(sync(b4.get()) instanceof RMapCacheReactive, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(sync(s1.add(b1)))
nova chamada: assertTrue(sync(s1.add(b1)), "Era esperado verdadeiro, mas " + result239 + " <sync(s1.add(b1))> é falso")
chamada antiga: Assertions.assertTrue(codec == b1.getCodec())
nova chamada: assertTrue(codec == b1.getCodec(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(codec == b2.getCodec())
nova chamada: assertTrue(codec == b2.getCodec(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(sync(b2.get()) instanceof MyObject)
nova chamada: assertTrue(sync(b2.get()) instanceof MyObject, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(spendTime < 2020)
nova chamada: assertTrue(spendTime < 2020, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(latch.await(1, TimeUnit.SECONDS))
nova chamada: assertTrue(latch.await(1, TimeUnit.SECONDS), "Era esperado verdadeiro, mas " + result240 + " <latch.await(1, TimeUnit.SECONDS)> é falso")
chamada antiga: Assertions.assertTrue(lock.isHeldByCurrentThread())
nova chamada: assertTrue(lock.isHeldByCurrentThread(), "Era esperado verdadeiro, mas " + result241 + " <lock.isHeldByCurrentThread()> é falso")
chamada antiga: Assertions.assertTrue(lock.isLocked())
nova chamada: assertTrue(lock.isLocked(), "Era esperado verdadeiro, mas " + result242 + " <lock.isLocked()> é falso")
chamada antiga: Assertions.assertTrue(lock.isLocked())
nova chamada: assertTrue(lock.isLocked(), "Era esperado verdadeiro, mas " + result243 + " <lock.isLocked()> é falso")
chamada antiga: Assertions.assertTrue(lock.tryLock())
nova chamada: assertTrue(lock.tryLock(), "Era esperado verdadeiro, mas " + result244 + " <lock.tryLock()> é falso")
chamada antiga: Assertions.assertTrue(lock.tryLock())
nova chamada: assertTrue(lock.tryLock(), "Era esperado verdadeiro, mas " + result245 + " <lock.tryLock()> é falso")
chamada antiga: Assertions.assertTrue(b1.get().getClass().equals(RedissonBucket.class))
nova chamada: assertTrue(b1.get().getClass().equals(RedissonBucket.class), "Era esperado verdadeiro, mas " + result246 + " <b1.get().getClass().equals(RedissonBucket.class)> é falso")
chamada antiga: Assertions.assertTrue(b4.get() instanceof RedissonMapCache)
nova chamada: assertTrue(b4.get() instanceof RedissonMapCache, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(redisson.getBucket("b5").get() instanceof RLiveObject)
nova chamada: assertTrue(redisson.getBucket("b5").get() instanceof RLiveObject, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(s1.add(b1))
nova chamada: assertTrue(s1.add(b1), "Era esperado verdadeiro, mas " + result247 + " <s1.add(b1)> é falso")
chamada antiga: Assertions.assertTrue(codec == b1.getCodec())
nova chamada: assertTrue(codec == b1.getCodec(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(codec == b2.getCodec())
nova chamada: assertTrue(codec == b2.getCodec(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(b2.get() instanceof MyObject)
nova chamada: assertTrue(b2.get() instanceof MyObject, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(future.get())
nova chamada: assertTrue(future.get(), "Era esperado verdadeiro, mas " + result248 + " <future.get()> é falso")
chamada antiga: Assertions.assertTrue(set.contains(2))
nova chamada: assertTrue(set.contains(2), "Era esperado verdadeiro, mas " + result249 + " <set.contains(2)> é falso")
chamada antiga: Assertions.assertTrue(set.removeAsync(1).get())
nova chamada: assertTrue(set.removeAsync(1).get(), "Era esperado verdadeiro, mas " + result250 + " <set.removeAsync(1).get()> é falso")
chamada antiga: Assertions.assertTrue(list.isEmpty())
nova chamada: assertTrue(list.isEmpty(), "Era esperado verdadeiro, mas " + result251 + " <list.isEmpty()> é falso")
chamada antiga: Assertions.assertTrue(setRes)
nova chamada: assertTrue(setRes, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(set.add(1))
nova chamada: assertTrue(set.add(1), "Era esperado verdadeiro, mas " + result252 + " <set.add(1)> é falso")
chamada antiga: Assertions.assertTrue(set.add(2))
nova chamada: assertTrue(set.add(2), "Era esperado verdadeiro, mas " + result253 + " <set.add(2)> é falso")
chamada antiga: Assertions.assertTrue(set.add(3))
nova chamada: assertTrue(set.add(3), "Era esperado verdadeiro, mas " + result254 + " <set.add(3)> é falso")
chamada antiga: Assertions.assertTrue(set.add(4))
nova chamada: assertTrue(set.add(4), "Era esperado verdadeiro, mas " + result255 + " <set.add(4)> é falso")
chamada antiga: Assertions.assertTrue(set.add(5))
nova chamada: assertTrue(set.add(5), "Era esperado verdadeiro, mas " + result256 + " <set.add(5)> é falso")
chamada antiga: Assertions.assertTrue(setRes3)
nova chamada: assertTrue(setRes3, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(set.add(2))
nova chamada: assertTrue(set.add(2), "Era esperado verdadeiro, mas " + result257 + " <set.add(2)> é falso")
chamada antiga: Assertions.assertTrue(set.add(3))
nova chamada: assertTrue(set.add(3), "Era esperado verdadeiro, mas " + result258 + " <set.add(3)> é falso")
chamada antiga: Assertions.assertTrue(set.add(1))
nova chamada: assertTrue(set.add(1), "Era esperado verdadeiro, mas " + result259 + " <set.add(1)> é falso")
chamada antiga: Assertions.assertTrue(set.add(4))
nova chamada: assertTrue(set.add(4), "Era esperado verdadeiro, mas " + result260 + " <set.add(4)> é falso")
chamada antiga: Assertions.assertTrue(set.add(10))
nova chamada: assertTrue(set.add(10), "Era esperado verdadeiro, mas " + result261 + " <set.add(10)> é falso")
chamada antiga: Assertions.assertTrue(set.add(-1))
nova chamada: assertTrue(set.add(-1), "Era esperado verdadeiro, mas " + result262 + " <set.add(-1)> é falso")
chamada antiga: Assertions.assertTrue(set.add(0))
nova chamada: assertTrue(set.add(0), "Era esperado verdadeiro, mas " + result263 + " <set.add(0)> é falso")
chamada antiga: Assertions.assertTrue(set.remove(3))
nova chamada: assertTrue(set.remove(3), "Era esperado verdadeiro, mas " + result264 + " <set.remove(3)> é falso")
chamada antiga: Assertions.assertTrue(set.retainAll(Arrays.asList(1, 2)))
nova chamada: assertTrue(set.retainAll(Arrays.asList(1, 2)), "Era esperado verdadeiro, mas " + result265 + " <set.retainAll(Arrays.asList(1, 2))> é falso")
chamada antiga: Assertions.assertTrue(set.containsAll(Arrays.asList(30, 11)))
nova chamada: assertTrue(set.containsAll(Arrays.asList(30, 11)), "Era esperado verdadeiro, mas " + result266 + " <set.containsAll(Arrays.asList(30, 11))> é falso")
chamada antiga: Assertions.assertTrue(set.contains(new TestObject("2", "3")))
nova chamada: assertTrue(set.contains(new TestObject("2", "3")), "Era esperado verdadeiro, mas " + result267 + " <set.contains(new TestObject('2', '3'))> é falso")
chamada antiga: Assertions.assertTrue(set.contains(new TestObject("1", "2")))
nova chamada: assertTrue(set.contains(new TestObject("1", "2")), "Era esperado verdadeiro, mas " + result268 + " <set.contains(new TestObject('1', '2'))> é falso")
chamada antiga: Assertions.assertTrue(set.add(new TestObject("1", "2")))
nova chamada: assertTrue(set.add(new TestObject("1", "2")), "Era esperado verdadeiro, mas " + result269 + " <set.add(new TestObject('1', '2'))> é falso")
chamada antiga: Assertions.assertTrue(set.add(new TestObject("2", "3")))
nova chamada: assertTrue(set.add(new TestObject("2", "3")), "Era esperado verdadeiro, mas " + result270 + " <set.add(new TestObject('2', '3'))> é falso")
chamada antiga: Assertions.assertTrue(set.add(new TestObject("3", "4")))
nova chamada: assertTrue(set.add(new TestObject("3", "4")), "Era esperado verdadeiro, mas " + result271 + " <set.add(new TestObject('3', '4'))> é falso")
chamada antiga: Assertions.assertTrue(set.add(new TestObject("5", "6")))
nova chamada: assertTrue(set.add(new TestObject("5", "6")), "Era esperado verdadeiro, mas " + result272 + " <set.add(new TestObject('5', '6'))> é falso")
chamada antiga: assertTrue(stringIterator2.hasNext())
nova chamada: assertTrue(stringIterator2.hasNext(), "Era esperado verdadeiro, mas " + result273 + " <stringIterator2.hasNext()> é falso")
chamada antiga: Assertions.assertEquals(0, lock.getHoldCount())
nova chamada: assertEquals(0, lock.getHoldCount(), "Era esperado valores iguais, mas  0 é diferente de " + result274 + " <lock.getHoldCount()>")
chamada antiga: Assertions.assertEquals(1, lock.getHoldCount())
nova chamada: assertEquals(1, lock.getHoldCount(), "Era esperado valores iguais, mas  1 é diferente de " + result275 + " <lock.getHoldCount()>")
chamada antiga: Assertions.assertEquals(0, lock.getHoldCount())
nova chamada: assertEquals(0, lock.getHoldCount(), "Era esperado valores iguais, mas  0 é diferente de " + result276 + " <lock.getHoldCount()>")
chamada antiga: Assertions.assertEquals(2, lock.getHoldCount())
nova chamada: assertEquals(2, lock.getHoldCount(), "Era esperado valores iguais, mas  2 é diferente de " + result277 + " <lock.getHoldCount()>")
chamada antiga: Assertions.assertEquals(1, lock.getHoldCount())
nova chamada: assertEquals(1, lock.getHoldCount(), "Era esperado valores iguais, mas  1 é diferente de " + result278 + " <lock.getHoldCount()>")
chamada antiga: Assertions.assertEquals(0, lock.getHoldCount())
nova chamada: assertEquals(0, lock.getHoldCount(), "Era esperado valores iguais, mas  0 é diferente de " + result279 + " <lock.getHoldCount()>")
chamada antiga: Assertions.assertEquals(iterations, lockedCounter.get())
nova chamada: assertEquals(iterations, lockedCounter.get(), "Era esperado valores iguais, mas  iterations é diferente de " + result280 + " <lockedCounter.get()>")
chamada antiga: Assertions.assertEquals(16 * iterations, lockedCounter.get())
nova chamada: assertEquals(16 * iterations, lockedCounter.get(), "Era esperado valores iguais, mas  16 * iterations é diferente de " + result281 + " <lockedCounter.get()>")
chamada antiga: Assertions.assertEquals(iterations, lockedCounter.get())
nova chamada: assertEquals(iterations, lockedCounter.get(), "Era esperado valores iguais, mas  iterations é diferente de " + result282 + " <lockedCounter.get()>")
chamada antiga: Assertions.assertEquals(126145, list.hashCode())
nova chamada: assertEquals(126145, list.hashCode(), "Era esperado valores iguais, mas  126145 é diferente de " + result283 + " <list.hashCode()>")
chamada antiga: Assertions.assertEquals(true, sync(list2.addAll(list.iterator())))
nova chamada: assertEquals(true, sync(list2.addAll(list.iterator())), "Era esperado valores iguais, mas  true é diferente de " + result284 + " <sync(list2.addAll(list.iterator()))>")
chamada antiga: Assertions.assertEquals(5, sync(list2.size()).intValue())
nova chamada: assertEquals(5, sync(list2.size()).intValue(), "Era esperado valores iguais, mas  5 é diferente de " + result285 + " <sync(list2.size()).intValue()>")
chamada antiga: Assertions.assertEquals(-1, sync(list.lastIndexOf(10)).intValue())
nova chamada: assertEquals(-1, sync(list.lastIndexOf(10)).intValue(), "Era esperado valores iguais, mas  -1 é diferente de " + result286 + " <sync(list.lastIndexOf(10)).intValue()>")
chamada antiga: Assertions.assertEquals(2, index)
nova chamada: assertEquals(2, index, "Era esperado valores iguais, mas  2 é diferente de " + " index")
chamada antiga: Assertions.assertEquals(5, index)
nova chamada: assertEquals(5, index, "Era esperado valores iguais, mas  5 é diferente de " + " index")
chamada antiga: Assertions.assertEquals(8, index)
nova chamada: assertEquals(8, index, "Era esperado valores iguais, mas  8 é diferente de " + " index")
chamada antiga: Assertions.assertEquals(0, sync(list.size()).longValue())
nova chamada: assertEquals(0, sync(list.size()).longValue(), "Era esperado valores iguais, mas  0 é diferente de " + result287 + " <sync(list.size()).longValue()>")
chamada antiga: Assertions.assertEquals(2, sync(list.size()).longValue())
nova chamada: assertEquals(2, sync(list.size()).longValue(), "Era esperado valores iguais, mas  2 é diferente de " + result288 + " <sync(list.size()).longValue()>")
chamada antiga: Assertions.assertEquals(3, (int) sync(list.get(0)))
nova chamada: assertEquals(3, (int) sync(list.get(0)), "Era esperado valores iguais, mas  3 é diferente de " + " (int) sync(list.get(0))")
chamada antiga: Assertions.assertEquals(0, sync(list.size()).intValue())
nova chamada: assertEquals(0, sync(list.size()).intValue(), "Era esperado valores iguais, mas  0 é diferente de " + result289 + " <sync(list.size()).intValue()>")
chamada antiga: Assertions.assertEquals(true, sync(list.addAll(2, Arrays.asList(7, 8, 9))))
nova chamada: assertEquals(true, sync(list.addAll(2, Arrays.asList(7, 8, 9))), "Era esperado valores iguais, mas  true é diferente de " + result290 + " <sync(list.addAll(2, Arrays.asList(7, 8, 9)))>")
chamada antiga: Assertions.assertEquals(true, sync(list.addAll(0, Arrays.asList(6, 7))))
nova chamada: assertEquals(true, sync(list.addAll(0, Arrays.asList(6, 7))), "Era esperado valores iguais, mas  true é diferente de " + result291 + " <sync(list.addAll(0, Arrays.asList(6, 7)))>")
chamada antiga: Assertions.assertEquals(true, sync(list.addAll(Arrays.asList(7, 8, 9))))
nova chamada: assertEquals(true, sync(list.addAll(Arrays.asList(7, 8, 9))), "Era esperado valores iguais, mas  true é diferente de " + result292 + " <sync(list.addAll(Arrays.asList(7, 8, 9)))>")
chamada antiga: Assertions.assertEquals(true, sync(list.addAll(Arrays.asList(9, 1, 9))))
nova chamada: assertEquals(true, sync(list.addAll(Arrays.asList(9, 1, 9))), "Era esperado valores iguais, mas  true é diferente de " + result293 + " <sync(list.addAll(Arrays.asList(9, 1, 9)))>")
chamada antiga: Assertions.assertEquals(false, sync(list.addAll(Collections.<Integer>emptyList())))
nova chamada: assertEquals(false, sync(list.addAll(Collections.<Integer>emptyList())), "Era esperado valores iguais, mas  false é diferente de " + result294 + " <sync(list.addAll(Collections.<Integer>emptyList()))>")
chamada antiga: Assertions.assertEquals(0, sync(list.size()).intValue())
nova chamada: assertEquals(0, sync(list.size()).intValue(), "Era esperado valores iguais, mas  0 é diferente de " + result295 + " <sync(list.size()).intValue()>")
chamada antiga: Assertions.assertEquals(sync(list.size()).intValue(), iteration)
nova chamada: assertEquals(sync(list.size()).intValue(), iteration, "Era esperado valores iguais, mas " + result296 + " <sync(list.size()).intValue()> é diferente de " + " iteration")
chamada antiga: Assertions.assertEquals("1", val1)
nova chamada: assertEquals("1", val1, "Era esperado valores iguais, mas  '1' é diferente de " + " val1")
chamada antiga: Assertions.assertEquals("5", val2)
nova chamada: assertEquals("5", val2, "Era esperado valores iguais, mas  '5' é diferente de " + " val2")
chamada antiga: Assertions.assertEquals(5, sync(list.size()).intValue())
nova chamada: assertEquals(5, sync(list.size()).intValue(), "Era esperado valores iguais, mas  5 é diferente de " + result297 + " <sync(list.size()).intValue()>")
chamada antiga: Assertions.assertEquals("c", set.pollLast())
nova chamada: assertEquals("c", set.pollLast(), "Era esperado valores iguais, mas  'c' é diferente de " + result298 + " <set.pollLast()>")
chamada antiga: Assertions.assertEquals("a", set.pollFirst())
nova chamada: assertEquals("a", set.pollFirst(), "Era esperado valores iguais, mas  'a' é diferente de " + result299 + " <set.pollFirst()>")
chamada antiga: Assertions.assertEquals("a", set.first())
nova chamada: assertEquals("a", set.first(), "Era esperado valores iguais, mas  'a' é diferente de " + result300 + " <set.first()>")
chamada antiga: Assertions.assertEquals("d", set.last())
nova chamada: assertEquals("d", set.last(), "Era esperado valores iguais, mas  'd' é diferente de " + result301 + " <set.last()>")
chamada antiga: Assertions.assertEquals(0, (int) set.removeRangeTail("z", false))
nova chamada: assertEquals(0, (int) set.removeRangeTail("z", false), "Era esperado valores iguais, mas  0 é diferente de " + " (int) set.removeRangeTail('z', false)")
chamada antiga: Assertions.assertEquals(4, (int) set.removeRangeTail("c", false))
nova chamada: assertEquals(4, (int) set.removeRangeTail("c", false), "Era esperado valores iguais, mas  4 é diferente de " + " (int) set.removeRangeTail('c', false)")
chamada antiga: Assertions.assertEquals(1, (int) set.removeRangeTail("c", true))
nova chamada: assertEquals(1, (int) set.removeRangeTail("c", true), "Era esperado valores iguais, mas  1 é diferente de " + " (int) set.removeRangeTail('c', true)")
chamada antiga: Assertions.assertEquals(2, (int) set.removeRangeHead("c", false))
nova chamada: assertEquals(2, (int) set.removeRangeHead("c", false), "Era esperado valores iguais, mas  2 é diferente de " + " (int) set.removeRangeHead('c', false)")
chamada antiga: Assertions.assertEquals(1, (int) set.removeRangeHead("c", true))
nova chamada: assertEquals(1, (int) set.removeRangeHead("c", true), "Era esperado valores iguais, mas  1 é diferente de " + " (int) set.removeRangeHead('c', true)")
chamada antiga: Assertions.assertEquals(5, set.removeRange("aaa", true, "g", false))
nova chamada: assertEquals(5, set.removeRange("aaa", true, "g", false), "Era esperado valores iguais, mas  5 é diferente de " + result302 + " <set.removeRange('aaa', true, 'g', false)>")
chamada antiga: Assertions.assertEquals(0, lock.getHoldCount())
nova chamada: assertEquals(0, lock.getHoldCount(), "Era esperado valores iguais, mas  0 é diferente de " + result303 + " <lock.getHoldCount()>")
chamada antiga: Assertions.assertEquals(1, lock.getHoldCount())
nova chamada: assertEquals(1, lock.getHoldCount(), "Era esperado valores iguais, mas  1 é diferente de " + result304 + " <lock.getHoldCount()>")
chamada antiga: Assertions.assertEquals(0, lock.getHoldCount())
nova chamada: assertEquals(0, lock.getHoldCount(), "Era esperado valores iguais, mas  0 é diferente de " + result305 + " <lock.getHoldCount()>")
chamada antiga: Assertions.assertEquals(2, lock.getHoldCount())
nova chamada: assertEquals(2, lock.getHoldCount(), "Era esperado valores iguais, mas  2 é diferente de " + result306 + " <lock.getHoldCount()>")
chamada antiga: Assertions.assertEquals(1, lock.getHoldCount())
nova chamada: assertEquals(1, lock.getHoldCount(), "Era esperado valores iguais, mas  1 é diferente de " + result307 + " <lock.getHoldCount()>")
chamada antiga: Assertions.assertEquals(0, lock.getHoldCount())
nova chamada: assertEquals(0, lock.getHoldCount(), "Era esperado valores iguais, mas  0 é diferente de " + result308 + " <lock.getHoldCount()>")
chamada antiga: Assertions.assertEquals(iterations, lockedCounter.get())
nova chamada: assertEquals(iterations, lockedCounter.get(), "Era esperado valores iguais, mas  iterations é diferente de " + result309 + " <lockedCounter.get()>")
chamada antiga: Assertions.assertEquals(16 * iterations, lockedCounter.get())
nova chamada: assertEquals(16 * iterations, lockedCounter.get(), "Era esperado valores iguais, mas  16 * iterations é diferente de " + result310 + " <lockedCounter.get()>")
chamada antiga: Assertions.assertEquals(iterations, lockedCounter.get())
nova chamada: assertEquals(iterations, lockedCounter.get(), "Era esperado valores iguais, mas  iterations é diferente de " + result311 + " <lockedCounter.get()>")
chamada antiga: Assertions.assertEquals("b3", ((RBucketReactive) sync(((RBucketReactive) sync(b1.get())).get())).getName())
nova chamada: assertEquals("b3", ((RBucketReactive) sync(((RBucketReactive) sync(b1.get())).get())).getName(), "Era esperado valores iguais, mas  'b3' é diferente de " + result312 + " <((RBucketReactive) sync(((RBucketReactive) sync(b1.get())).get())).getName()>")
chamada antiga: Assertions.assertEquals("b2", ((RBucketReactive) sync(((RMapCacheReactive) sync(b4.get())).get(b1))).getName())
nova chamada: assertEquals("b2", ((RBucketReactive) sync(((RMapCacheReactive) sync(b4.get())).get(b1))).getName(), "Era esperado valores iguais, mas  'b2' é diferente de " + result313 + " <((RBucketReactive) sync(((RMapCacheReactive) sync(b4.get())).get(b1))).getName()>")
chamada antiga: Assertions.assertEquals("b2", result.get(0).getName())
nova chamada: assertEquals("b2", result.get(0).getName(), "Era esperado valores iguais, mas  'b2' é diferente de " + result314 + " <result.get(0).getName()>")
chamada antiga: Assertions.assertEquals("b3", result.get(1).getName())
nova chamada: assertEquals("b3", result.get(1).getName(), "Era esperado valores iguais, mas  'b3' é diferente de " + result315 + " <result.get(1).getName()>")
chamada antiga: Assertions.assertEquals("b1", result.get(2).getName())
nova chamada: assertEquals("b1", result.get(2).getName(), "Era esperado valores iguais, mas  'b1' é diferente de " + result316 + " <result.get(2).getName()>")
chamada antiga: Assertions.assertEquals("b2", result.get(0).getName())
nova chamada: assertEquals("b2", result.get(0).getName(), "Era esperado valores iguais, mas  'b2' é diferente de " + result317 + " <result.get(0).getName()>")
chamada antiga: Assertions.assertEquals("b3", result.get(1).getName())
nova chamada: assertEquals("b3", result.get(1).getName(), "Era esperado valores iguais, mas  'b3' é diferente de " + result318 + " <result.get(1).getName()>")
chamada antiga: Assertions.assertEquals("b1", result.get(2).getName())
nova chamada: assertEquals("b1", result.get(2).getName(), "Era esperado valores iguais, mas  'b1' é diferente de " + result319 + " <result.get(2).getName()>")
chamada antiga: Assertions.assertEquals(0, lock.getHoldCount())
nova chamada: assertEquals(0, lock.getHoldCount(), "Era esperado valores iguais, mas  0 é diferente de " + result320 + " <lock.getHoldCount()>")
chamada antiga: Assertions.assertEquals(1, lock.getHoldCount())
nova chamada: assertEquals(1, lock.getHoldCount(), "Era esperado valores iguais, mas  1 é diferente de " + result321 + " <lock.getHoldCount()>")
chamada antiga: Assertions.assertEquals(0, lock.getHoldCount())
nova chamada: assertEquals(0, lock.getHoldCount(), "Era esperado valores iguais, mas  0 é diferente de " + result322 + " <lock.getHoldCount()>")
chamada antiga: Assertions.assertEquals(2, lock.getHoldCount())
nova chamada: assertEquals(2, lock.getHoldCount(), "Era esperado valores iguais, mas  2 é diferente de " + result323 + " <lock.getHoldCount()>")
chamada antiga: Assertions.assertEquals(1, lock.getHoldCount())
nova chamada: assertEquals(1, lock.getHoldCount(), "Era esperado valores iguais, mas  1 é diferente de " + result324 + " <lock.getHoldCount()>")
chamada antiga: Assertions.assertEquals(0, lock.getHoldCount())
nova chamada: assertEquals(0, lock.getHoldCount(), "Era esperado valores iguais, mas  0 é diferente de " + result325 + " <lock.getHoldCount()>")
chamada antiga: Assertions.assertEquals(iterations, lockedCounter.get())
nova chamada: assertEquals(iterations, lockedCounter.get(), "Era esperado valores iguais, mas  iterations é diferente de " + result326 + " <lockedCounter.get()>")
chamada antiga: Assertions.assertEquals(16 * iterations, lockedCounter.get())
nova chamada: assertEquals(16 * iterations, lockedCounter.get(), "Era esperado valores iguais, mas  16 * iterations é diferente de " + result327 + " <lockedCounter.get()>")
chamada antiga: Assertions.assertEquals(iterations, lockedCounter.get())
nova chamada: assertEquals(iterations, lockedCounter.get(), "Era esperado valores iguais, mas  iterations é diferente de " + result328 + " <lockedCounter.get()>")
chamada antiga: Assertions.assertEquals("b3", ((RBucket) ((RBucket) b1.get()).get()).getName())
nova chamada: assertEquals("b3", ((RBucket) ((RBucket) b1.get()).get()).getName(), "Era esperado valores iguais, mas  'b3' é diferente de " + result329 + " <((RBucket) ((RBucket) b1.get()).get()).getName()>")
chamada antiga: Assertions.assertEquals("b2", ((RBucket) ((RedissonMapCache) b4.get()).get(b1)).getName())
nova chamada: assertEquals("b2", ((RBucket) ((RedissonMapCache) b4.get()).get(b1)).getName(), "Era esperado valores iguais, mas  'b2' é diferente de " + result330 + " <((RBucket) ((RedissonMapCache) b4.get()).get(b1)).getName()>")
chamada antiga: Assertions.assertEquals("t1", ((RedissonLiveObjectServiceTest.TestREntity) redisson.getBucket("b5").get()).getName())
nova chamada: assertEquals("t1", ((RedissonLiveObjectServiceTest.TestREntity) redisson.getBucket("b5").get()).getName(), "Era esperado valores iguais, mas  't1' é diferente de " + result331 + " <((RedissonLiveObjectServiceTest.TestREntity) redisson.getBucket('b5').get()).getName()>")
chamada antiga: Assertions.assertEquals("t2", ((RedissonLiveObjectServiceTest.TestREntity) redisson.getBucket("b5").get()).getValue())
nova chamada: assertEquals("t2", ((RedissonLiveObjectServiceTest.TestREntity) redisson.getBucket("b5").get()).getValue(), "Era esperado valores iguais, mas  't2' é diferente de " + result332 + " <((RedissonLiveObjectServiceTest.TestREntity) redisson.getBucket('b5').get()).getValue()>")
chamada antiga: Assertions.assertEquals("b2", result.get(0).getName())
nova chamada: assertEquals("b2", result.get(0).getName(), "Era esperado valores iguais, mas  'b2' é diferente de " + result333 + " <result.get(0).getName()>")
chamada antiga: Assertions.assertEquals("b3", result.get(1).getName())
nova chamada: assertEquals("b3", result.get(1).getName(), "Era esperado valores iguais, mas  'b3' é diferente de " + result334 + " <result.get(1).getName()>")
chamada antiga: Assertions.assertEquals("b1", result.get(2).getName())
nova chamada: assertEquals("b1", result.get(2).getName(), "Era esperado valores iguais, mas  'b1' é diferente de " + result335 + " <result.get(2).getName()>")
chamada antiga: Assertions.assertEquals("b2", result.get(0).getName())
nova chamada: assertEquals("b2", result.get(0).getName(), "Era esperado valores iguais, mas  'b2' é diferente de " + result336 + " <result.get(0).getName()>")
chamada antiga: Assertions.assertEquals("b3", result.get(1).getName())
nova chamada: assertEquals("b3", result.get(1).getName(), "Era esperado valores iguais, mas  'b3' é diferente de " + result337 + " <result.get(1).getName()>")
chamada antiga: Assertions.assertEquals("b1", result.get(2).getName())
nova chamada: assertEquals("b1", result.get(2).getName(), "Era esperado valores iguais, mas  'b1' é diferente de " + result338 + " <result.get(2).getName()>")
chamada antiga: Assertions.assertEquals(b2.get(), b1.iterator().next().get())
nova chamada: assertEquals(b2.get(), b1.iterator().next().get(), "Era esperado valores iguais, mas " + result339 + " <b2.get()> é diferente de " + result340 + " <b1.iterator().next().get()>")
chamada antiga: Assertions.assertEquals(2, redisson.getKeys().count())
nova chamada: assertEquals(2, redisson.getKeys().count(), "Era esperado valores iguais, mas  2 é diferente de " + result341 + " <redisson.getKeys().count()>")
chamada antiga: Assertions.assertEquals(b2.get(), b1.iterator().next().get())
nova chamada: assertEquals(b2.get(), b1.iterator().next().get(), "Era esperado valores iguais, mas " + result342 + " <b2.get()> é diferente de " + result343 + " <b1.iterator().next().get()>")
chamada antiga: Assertions.assertEquals(2, redisson.getKeys().count())
nova chamada: assertEquals(2, redisson.getKeys().count(), "Era esperado valores iguais, mas  2 é diferente de " + result344 + " <redisson.getKeys().count()>")
chamada antiga: Assertions.assertEquals(b2.get(), entryRange.iterator().next().getValue().get())
nova chamada: assertEquals(b2.get(), entryRange.iterator().next().getValue().get(), "Era esperado valores iguais, mas " + result345 + " <b2.get()> é diferente de " + result346 + " <entryRange.iterator().next().getValue().get()>")
chamada antiga: Assertions.assertEquals(b2.get(), b1.readAll().iterator().next().get())
nova chamada: assertEquals(b2.get(), b1.readAll().iterator().next().get(), "Era esperado valores iguais, mas " + result347 + " <b2.get()> é diferente de " + result348 + " <b1.readAll().iterator().next().get()>")
chamada antiga: Assertions.assertEquals(2, redisson.getKeys().count())
nova chamada: assertEquals(2, redisson.getKeys().count(), "Era esperado valores iguais, mas  2 é diferente de " + result349 + " <redisson.getKeys().count()>")
chamada antiga: Assertions.assertEquals(b2.get(), b3.readAllMap().get("1").iterator().next().get())
nova chamada: assertEquals(b2.get(), b3.readAllMap().get("1").iterator().next().get(), "Era esperado valores iguais, mas " + result350 + " <b2.get()> é diferente de " + result351 + " <b3.readAllMap().get('1').iterator().next().get()>")
chamada antiga: Assertions.assertEquals(b2.get(), b3.readAllEntrySet().iterator().next().getValue().iterator().next().get())
nova chamada: assertEquals(b2.get(), b3.readAllEntrySet().iterator().next().getValue().iterator().next().get(), "Era esperado valores iguais, mas " + result352 + " <b2.get()> é diferente de " + result353 + " <b3.readAllEntrySet().iterator().next().getValue().iterator().next().get()>")
chamada antiga: Assertions.assertEquals(b2.get(), b3.readAllValues().iterator().next().iterator().next().get())
nova chamada: assertEquals(b2.get(), b3.readAllValues().iterator().next().iterator().next().get(), "Era esperado valores iguais, mas " + result354 + " <b2.get()> é diferente de " + result355 + " <b3.readAllValues().iterator().next().iterator().next().get()>")
chamada antiga: Assertions.assertEquals(b2.get(), b4.readAllKeySet().iterator().next().get())
nova chamada: assertEquals(b2.get(), b4.readAllKeySet().iterator().next().get(), "Era esperado valores iguais, mas " + result356 + " <b2.get()> é diferente de " + result357 + " <b4.readAllKeySet().iterator().next().get()>")
chamada antiga: Assertions.assertEquals(b2.get(), q1.readAll().get(0).get())
nova chamada: assertEquals(b2.get(), q1.readAll().get(0).get(), "Era esperado valores iguais, mas " + result358 + " <b2.get()> é diferente de " + result359 + " <q1.readAll().get(0).get()>")
chamada antiga: Assertions.assertEquals(b2.get(), q2.readAll().get(0).get())
nova chamada: assertEquals(b2.get(), q2.readAll().get(0).get(), "Era esperado valores iguais, mas " + result360 + " <b2.get()> é diferente de " + result361 + " <q2.readAll().get(0).get()>")
chamada antiga: Assertions.assertEquals(b2.get(), q3.readAll().get(0).get())
nova chamada: assertEquals(b2.get(), q3.readAll().get(0).get(), "Era esperado valores iguais, mas " + result362 + " <b2.get()> é diferente de " + result363 + " <q3.readAll().get(0).get()>")
chamada antiga: Assertions.assertEquals(b2.get(), l1.readAll().get(0).get())
nova chamada: assertEquals(b2.get(), l1.readAll().get(0).get(), "Era esperado valores iguais, mas " + result364 + " <b2.get()> é diferente de " + result365 + " <l1.readAll().get(0).get()>")
chamada antiga: Assertions.assertEquals(b2.get(), sl1.readAll().get(0).get())
nova chamada: assertEquals(b2.get(), sl1.readAll().get(0).get(), "Era esperado valores iguais, mas " + result366 + " <b2.get()> é diferente de " + result367 + " <sl1.readAll().get(0).get()>")
chamada antiga: Assertions.assertEquals(b2.get(), m1.readAllMap().get("1").get())
nova chamada: assertEquals(b2.get(), m1.readAllMap().get("1").get(), "Era esperado valores iguais, mas " + result368 + " <b2.get()> é diferente de " + result369 + " <m1.readAllMap().get('1').get()>")
chamada antiga: Assertions.assertEquals(b2.get(), m1.readAllEntrySet().iterator().next().getValue().get())
nova chamada: assertEquals(b2.get(), m1.readAllEntrySet().iterator().next().getValue().get(), "Era esperado valores iguais, mas " + result370 + " <b2.get()> é diferente de " + result371 + " <m1.readAllEntrySet().iterator().next().getValue().get()>")
chamada antiga: Assertions.assertEquals(b2.get(), m1.readAllValues().iterator().next().get())
nova chamada: assertEquals(b2.get(), m1.readAllValues().iterator().next().get(), "Era esperado valores iguais, mas " + result372 + " <b2.get()> é diferente de " + result373 + " <m1.readAllValues().iterator().next().get()>")
chamada antiga: Assertions.assertEquals(b2.get(), m1.readAllMap().get("1").get())
nova chamada: assertEquals(b2.get(), m1.readAllMap().get("1").get(), "Era esperado valores iguais, mas " + result374 + " <b2.get()> é diferente de " + result375 + " <m1.readAllMap().get('1').get()>")
chamada antiga: Assertions.assertEquals(b2.get(), m1.readAllEntrySet().iterator().next().getValue().get())
nova chamada: assertEquals(b2.get(), m1.readAllEntrySet().iterator().next().getValue().get(), "Era esperado valores iguais, mas " + result376 + " <b2.get()> é diferente de " + result377 + " <m1.readAllEntrySet().iterator().next().getValue().get()>")
chamada antiga: Assertions.assertEquals(b2.get(), m1.readAllValues().iterator().next().get())
nova chamada: assertEquals(b2.get(), m1.readAllValues().iterator().next().get(), "Era esperado valores iguais, mas " + result378 + " <b2.get()> é diferente de " + result379 + " <m1.readAllValues().iterator().next().get()>")
chamada antiga: Assertions.assertEquals(b2.get(), m2.readAllKeySet().iterator().next().get())
nova chamada: assertEquals(b2.get(), m2.readAllKeySet().iterator().next().get(), "Era esperado valores iguais, mas " + result380 + " <b2.get()> é diferente de " + result381 + " <m2.readAllKeySet().iterator().next().get()>")
chamada antiga: Assertions.assertEquals(b2.get(), m2.readAllKeySet().iterator().next().get())
nova chamada: assertEquals(b2.get(), m2.readAllKeySet().iterator().next().get(), "Era esperado valores iguais, mas " + result382 + " <b2.get()> é diferente de " + result383 + " <m2.readAllKeySet().iterator().next().get()>")
chamada antiga: Assertions.assertEquals(b2.get(), m3.readAllMap().get("1").iterator().next().get())
nova chamada: assertEquals(b2.get(), m3.readAllMap().get("1").iterator().next().get(), "Era esperado valores iguais, mas " + result384 + " <b2.get()> é diferente de " + result385 + " <m3.readAllMap().get('1').iterator().next().get()>")
chamada antiga: Assertions.assertEquals(b2.get(), m3.readAllEntrySet().iterator().next().getValue().iterator().next().get())
nova chamada: assertEquals(b2.get(), m3.readAllEntrySet().iterator().next().getValue().iterator().next().get(), "Era esperado valores iguais, mas " + result386 + " <b2.get()> é diferente de " + result387 + " <m3.readAllEntrySet().iterator().next().getValue().iterator().next().get()>")
chamada antiga: Assertions.assertEquals(b2.get(), m3.readAllValues().iterator().next().iterator().next().get())
nova chamada: assertEquals(b2.get(), m3.readAllValues().iterator().next().iterator().next().get(), "Era esperado valores iguais, mas " + result388 + " <b2.get()> é diferente de " + result389 + " <m3.readAllValues().iterator().next().iterator().next().get()>")
chamada antiga: Assertions.assertEquals(b2.get(), m4.readAllKeySet().iterator().next().get())
nova chamada: assertEquals(b2.get(), m4.readAllKeySet().iterator().next().get(), "Era esperado valores iguais, mas " + result390 + " <b2.get()> é diferente de " + result391 + " <m4.readAllKeySet().iterator().next().get()>")
chamada antiga: Assertions.assertEquals(b2.get(), g1.readAll().iterator().next().get())
nova chamada: assertEquals(b2.get(), g1.readAll().iterator().next().get(), "Era esperado valores iguais, mas " + result392 + " <b2.get()> é diferente de " + result393 + " <g1.readAll().iterator().next().get()>")
chamada antiga: Assertions.assertEquals(b2.get(), s1.readAll().iterator().next().get())
nova chamada: assertEquals(b2.get(), s1.readAll().iterator().next().get(), "Era esperado valores iguais, mas " + result394 + " <b2.get()> é diferente de " + result395 + " <s1.readAll().iterator().next().get()>")
chamada antiga: Assertions.assertEquals(b2.get(), mm1.get("1").readAll().get(0).get())
nova chamada: assertEquals(b2.get(), mm1.get("1").readAll().get(0).get(), "Era esperado valores iguais, mas " + result396 + " <b2.get()> é diferente de " + result397 + " <mm1.get('1').readAll().get(0).get()>")
chamada antiga: Assertions.assertEquals(b2.get(), mm2.get(b2).readAll().get(0).get())
nova chamada: assertEquals(b2.get(), mm2.get(b2).readAll().get(0).get(), "Era esperado valores iguais, mas " + result398 + " <b2.get()> é diferente de " + result399 + " <mm2.get(b2).readAll().get(0).get()>")
chamada antiga: Assertions.assertEquals(b2.get(), mm3.get("1").readAll().iterator().next().get())
nova chamada: assertEquals(b2.get(), mm3.get("1").readAll().iterator().next().get(), "Era esperado valores iguais, mas " + result400 + " <b2.get()> é diferente de " + result401 + " <mm3.get('1').readAll().iterator().next().get()>")
chamada antiga: Assertions.assertEquals(b2.get(), mm4.get(b2).readAll().iterator().next().get())
nova chamada: assertEquals(b2.get(), mm4.get(b2).readAll().iterator().next().get(), "Era esperado valores iguais, mas " + result402 + " <b2.get()> é diferente de " + result403 + " <mm4.get(b2).readAll().iterator().next().get()>")
chamada antiga: Assertions.assertEquals(b2.get(), map.values().iterator().next().get())
nova chamada: assertEquals(b2.get(), map.values().iterator().next().get(), "Era esperado valores iguais, mas " + result404 + " <b2.get()> é diferente de " + result405 + " <map.values().iterator().next().get()>")
chamada antiga: Assertions.assertEquals(b1.get(), map.keySet().iterator().next().get())
nova chamada: assertEquals(b1.get(), map.keySet().iterator().next().get(), "Era esperado valores iguais, mas " + result406 + " <b1.get()> é diferente de " + result407 + " <map.keySet().iterator().next().get()>")
chamada antiga: Assertions.assertNotEquals(3, redisson.getKeys().count())
nova chamada: assertNotEquals(3, redisson.getKeys().count(), "Era esperado valores diferentes, mas  3 é igual a " + result408 + " <redisson.getKeys().count()>")
chamada antiga: Assertions.assertEquals(1, redisson.getKeys().count())
nova chamada: assertEquals(1, redisson.getKeys().count(), "Era esperado valores iguais, mas  1 é diferente de " + result409 + " <redisson.getKeys().count()>")
chamada antiga: Assertions.assertNotEquals(1, redisson.getKeys().count())
nova chamada: assertNotEquals(1, redisson.getKeys().count(), "Era esperado valores diferentes, mas  1 é igual a " + result410 + " <redisson.getKeys().count()>")
chamada antiga: Assertions.assertEquals(3, redisson.getKeys().count())
nova chamada: assertEquals(3, redisson.getKeys().count(), "Era esperado valores iguais, mas  3 é diferente de " + result411 + " <redisson.getKeys().count()>")
chamada antiga: Assertions.assertEquals("1", iter.next())
nova chamada: assertEquals("1", iter.next(), "Era esperado valores iguais, mas  '1' é diferente de " + result412 + " <iter.next()>")
chamada antiga: Assertions.assertEquals("4", iter.next())
nova chamada: assertEquals("4", iter.next(), "Era esperado valores iguais, mas  '4' é diferente de " + result413 + " <iter.next()>")
chamada antiga: Assertions.assertEquals(4, iteration)
nova chamada: assertEquals(4, iteration, "Era esperado valores iguais, mas  4 é diferente de " + " iteration")
chamada antiga: Assertions.assertEquals(0, list.size())
nova chamada: assertEquals(0, list.size(), "Era esperado valores iguais, mas  0 é diferente de " + result414 + " <list.size()>")
chamada antiga: Assertions.assertEquals(0, setCopy.size())
nova chamada: assertEquals(0, setCopy.size(), "Era esperado valores iguais, mas  0 é diferente de " + result415 + " <setCopy.size()>")
chamada antiga: Assertions.assertEquals(-1, (int) set.first())
nova chamada: assertEquals(-1, (int) set.first(), "Era esperado valores iguais, mas  -1 é diferente de " + " (int) set.first()")
chamada antiga: Assertions.assertEquals(10, (int) set.last())
nova chamada: assertEquals(10, (int) set.last(), "Era esperado valores iguais, mas  10 é diferente de " + " (int) set.last()")
chamada antiga: Assertions.assertEquals(2, set.size())
nova chamada: assertEquals(2, set.size(), "Era esperado valores iguais, mas  2 é diferente de " + result416 + " <set.size()>")
chamada antiga: Assertions.assertEquals(4, set.size())
nova chamada: assertEquals(4, set.size(), "Era esperado valores iguais, mas  4 é diferente de " + result417 + " <set.size()>")
chamada antiga: Assertions.assertEquals(5, set.size())
nova chamada: assertEquals(5, set.size(), "Era esperado valores iguais, mas  5 é diferente de " + result418 + " <set.size()>")
chamada antiga: assertEquals(multiDecoder, actualDecoder)
nova chamada: assertEquals(multiDecoder, actualDecoder, "Era esperado valores iguais, mas  multiDecoder é diferente de " + " actualDecoder")
chamada antiga: assertNotEquals(msgMultiDecoder, actualDecoder)
nova chamada: assertNotEquals(msgMultiDecoder, actualDecoder, "Era esperado valores diferentes, mas  msgMultiDecoder é igual a " + " actualDecoder")
chamada antiga: assertEquals(subMultiDecoder, actualDecoder)
nova chamada: assertEquals(subMultiDecoder, actualDecoder, "Era esperado valores iguais, mas  subMultiDecoder é diferente de " + " actualDecoder")
chamada antiga: assertEquals(multiDecoder.getDecoder(null, 0, null), actualDecoder)
nova chamada: assertEquals(multiDecoder.getDecoder(null, 0, null), actualDecoder, "Era esperado valores iguais, mas " + result419 + " <multiDecoder.getDecoder(null, 0, null)> é diferente de " + " actualDecoder")
chamada antiga: assertEquals(expectedDecoder, actualDecoder)
nova chamada: assertEquals(expectedDecoder, actualDecoder, "Era esperado valores iguais, mas  expectedDecoder é diferente de " + " actualDecoder")
chamada antiga: assertNotEquals(multiDecoder.getDecoder(null, 0, null), actualDecoder)
nova chamada: assertNotEquals(multiDecoder.getDecoder(null, 0, null), actualDecoder, "Era esperado valores diferentes, mas " + result420 + " <multiDecoder.getDecoder(null, 0, null)> é igual a " + " actualDecoder")
chamada antiga: assertEquals(ByteArrayCodec.INSTANCE.getValueDecoder(), actualDecoder)
nova chamada: assertEquals(ByteArrayCodec.INSTANCE.getValueDecoder(), actualDecoder, "Era esperado valores iguais, mas " + result421 + " <ByteArrayCodec.INSTANCE.getValueDecoder()> é diferente de " + " actualDecoder")
chamada antiga: Assertions.assertTrue(future.get())
nova chamada: assertTrue(future.get(), "Era esperado verdadeiro, mas " + result422 + " <future.get()> é falso")
chamada antiga: Assertions.assertTrue(set.contains(2))
nova chamada: assertTrue(set.contains(2), "Era esperado verdadeiro, mas " + result423 + " <set.contains(2)> é falso")
chamada antiga: Assertions.assertTrue(set.removeAsync(1).get())
nova chamada: assertTrue(set.removeAsync(1).get(), "Era esperado verdadeiro, mas " + result424 + " <set.removeAsync(1).get()> é falso")
chamada antiga: Assertions.assertTrue(list.isEmpty())
nova chamada: assertTrue(list.isEmpty(), "Era esperado verdadeiro, mas " + result425 + " <list.isEmpty()> é falso")
chamada antiga: Assertions.assertTrue(set.retainAll(Arrays.asList(1, 2)))
nova chamada: assertTrue(set.retainAll(Arrays.asList(1, 2)), "Era esperado verdadeiro, mas " + result426 + " <set.retainAll(Arrays.asList(1, 2))> é falso")
chamada antiga: Assertions.assertTrue(set.containsAll(Collections.emptyList()))
nova chamada: assertTrue(set.containsAll(Collections.emptyList()), "Era esperado verdadeiro, mas " + result427 + " <set.containsAll(Collections.emptyList())> é falso")
chamada antiga: Assertions.assertTrue(set.containsAll(Arrays.asList(30, 11)))
nova chamada: assertTrue(set.containsAll(Arrays.asList(30, 11)), "Era esperado verdadeiro, mas " + result428 + " <set.containsAll(Arrays.asList(30, 11))> é falso")
chamada antiga: Assertions.assertTrue(set.contains(new TestObject("2", "3")))
nova chamada: assertTrue(set.contains(new TestObject("2", "3")), "Era esperado verdadeiro, mas " + result429 + " <set.contains(new TestObject('2', '3'))> é falso")
chamada antiga: Assertions.assertTrue(set.contains(new TestObject("1", "2")))
nova chamada: assertTrue(set.contains(new TestObject("1", "2")), "Era esperado verdadeiro, mas " + result430 + " <set.contains(new TestObject('1', '2'))> é falso")
chamada antiga: Assertions.assertTrue(set.retainAll(Collections.<Integer>emptyList()))
nova chamada: assertTrue(set.retainAll(Collections.<Integer>emptyList()), "Era esperado verdadeiro, mas " + result431 + " <set.retainAll(Collections.<Integer>emptyList())> é falso")
chamada antiga: Assertions.assertTrue(list.removeAll(Arrays.asList(3, 2, 10, 6)))
nova chamada: assertTrue(list.removeAll(Arrays.asList(3, 2, 10, 6)), "Era esperado verdadeiro, mas " + result432 + " <list.removeAll(Arrays.asList(3, 2, 10, 6))> é falso")
chamada antiga: Assertions.assertTrue(list.removeAll(Arrays.asList(4)))
nova chamada: assertTrue(list.removeAll(Arrays.asList(4)), "Era esperado verdadeiro, mas " + result433 + " <list.removeAll(Arrays.asList(4))> é falso")
chamada antiga: Assertions.assertTrue(list.removeAll(Arrays.asList(1, 5, 1, 5)))
nova chamada: assertTrue(list.removeAll(Arrays.asList(1, 5, 1, 5)), "Era esperado verdadeiro, mas " + result434 + " <list.removeAll(Arrays.asList(1, 5, 1, 5))> é falso")
chamada antiga: Assertions.assertTrue(list.isEmpty())
nova chamada: assertTrue(list.isEmpty(), "Era esperado verdadeiro, mas " + result435 + " <list.isEmpty()> é falso")
chamada antiga: Assertions.assertTrue(stringIterator2.hasNext())
nova chamada: assertTrue(stringIterator2.hasNext(), "Era esperado verdadeiro, mas " + result436 + " <stringIterator2.hasNext()> é falso")
chamada antiga: Assertions.assertTrue(res)
nova chamada: assertTrue(res, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(res)
nova chamada: assertTrue(res, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(map.fastPut("1", 2))
nova chamada: assertTrue(map.fastPut("1", 2), "Era esperado verdadeiro, mas " + result437 + " <map.fastPut('1', 2)> é falso")
chamada antiga: Assertions.assertTrue(System.currentTimeMillis() - s > 2000)
nova chamada: assertTrue(System.currentTimeMillis() - s > 2000, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(System.currentTimeMillis() - s > 9000)
nova chamada: assertTrue(System.currentTimeMillis() - s > 9000, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(System.currentTimeMillis() - s > 5000)
nova chamada: assertTrue(System.currentTimeMillis() - s > 5000, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(stringIterator2.hasNext())
nova chamada: assertTrue(stringIterator2.hasNext(), "Era esperado verdadeiro, mas " + result438 + " <stringIterator2.hasNext()> é falso")
chamada antiga: Assertions.assertTrue(al.compareAndSet(0, 2))
nova chamada: assertTrue(al.compareAndSet(0, 2), "Era esperado verdadeiro, mas " + result439 + " <al.compareAndSet(0, 2)> é falso")
chamada antiga: Assertions.assertTrue(al2.compareAndSet(0, 2))
nova chamada: assertTrue(al2.compareAndSet(0, 2), "Era esperado verdadeiro, mas " + result440 + " <al2.compareAndSet(0, 2)> é falso")
chamada antiga: Assertions.assertTrue(al.compareAndSet(0, 2))
nova chamada: assertTrue(al.compareAndSet(0, 2), "Era esperado verdadeiro, mas " + result441 + " <al.compareAndSet(0, 2)> é falso")
chamada antiga: Assertions.assertTrue(System.currentTimeMillis() - s > 2000)
nova chamada: assertTrue(System.currentTimeMillis() - s > 2000, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(System.currentTimeMillis() - s > 2000)
nova chamada: assertTrue(System.currentTimeMillis() - s > 2000, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(System.currentTimeMillis() - s > 2000)
nova chamada: assertTrue(System.currentTimeMillis() - s > 2000, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(future.get())
nova chamada: assertTrue(future.get(), "Era esperado verdadeiro, mas " + result442 + " <future.get()> é falso")
chamada antiga: Assertions.assertTrue(set.contains(2))
nova chamada: assertTrue(set.contains(2), "Era esperado verdadeiro, mas " + result443 + " <set.contains(2)> é falso")
chamada antiga: Assertions.assertTrue(set.contains(3))
nova chamada: assertTrue(set.contains(3), "Era esperado verdadeiro, mas " + result444 + " <set.contains(3)> é falso")
chamada antiga: Assertions.assertTrue(set.contains(3))
nova chamada: assertTrue(set.contains(3), "Era esperado verdadeiro, mas " + result445 + " <set.contains(3)> é falso")
chamada antiga: Assertions.assertTrue(set.removeAsync(1).get())
nova chamada: assertTrue(set.removeAsync(1).get(), "Era esperado verdadeiro, mas " + result446 + " <set.removeAsync(1).get()> é falso")
chamada antiga: Assertions.assertTrue(set.isEmpty())
nova chamada: assertTrue(set.isEmpty(), "Era esperado verdadeiro, mas " + result447 + " <set.isEmpty()> é falso")
chamada antiga: Assertions.assertTrue(set.retainAll(Arrays.asList(1, 2)))
nova chamada: assertTrue(set.retainAll(Arrays.asList(1, 2)), "Era esperado verdadeiro, mas " + result448 + " <set.retainAll(Arrays.asList(1, 2))> é falso")
chamada antiga: Assertions.assertTrue(set.removeAll(Arrays.asList(1, 2)))
nova chamada: assertTrue(set.removeAll(Arrays.asList(1, 2)), "Era esperado verdadeiro, mas " + result449 + " <set.removeAll(Arrays.asList(1, 2))> é falso")
chamada antiga: Assertions.assertTrue(set.add(4, 2))
nova chamada: assertTrue(set.add(4, 2), "Era esperado verdadeiro, mas " + result450 + " <set.add(4, 2)> é falso")
chamada antiga: Assertions.assertTrue(set.add(5, 3))
nova chamada: assertTrue(set.add(5, 3), "Era esperado verdadeiro, mas " + result451 + " <set.add(5, 3)> é falso")
chamada antiga: Assertions.assertTrue(set.add(3, 1))
nova chamada: assertTrue(set.add(3, 1), "Era esperado verdadeiro, mas " + result452 + " <set.add(3, 1)> é falso")
chamada antiga: Assertions.assertTrue(set.add(6, 4))
nova chamada: assertTrue(set.add(6, 4), "Era esperado verdadeiro, mas " + result453 + " <set.add(6, 4)> é falso")
chamada antiga: Assertions.assertTrue(set.add(1000, 10))
nova chamada: assertTrue(set.add(1000, 10), "Era esperado verdadeiro, mas " + result454 + " <set.add(1000, 10)> é falso")
chamada antiga: Assertions.assertTrue(set.add(1, -1))
nova chamada: assertTrue(set.add(1, -1), "Era esperado verdadeiro, mas " + result455 + " <set.add(1, -1)> é falso")
chamada antiga: Assertions.assertTrue(set.add(2, 0))
nova chamada: assertTrue(set.add(2, 0), "Era esperado verdadeiro, mas " + result456 + " <set.add(2, 0)> é falso")
chamada antiga: Assertions.assertTrue(set.remove(3))
nova chamada: assertTrue(set.remove(3), "Era esperado verdadeiro, mas " + result457 + " <set.remove(3)> é falso")
chamada antiga: Assertions.assertTrue(set.containsAll(Arrays.asList(30, 11)))
nova chamada: assertTrue(set.containsAll(Arrays.asList(30, 11)), "Era esperado verdadeiro, mas " + result458 + " <set.containsAll(Arrays.asList(30, 11))> é falso")
chamada antiga: Assertions.assertTrue(set.contains(new TestObject("2", "3")))
nova chamada: assertTrue(set.contains(new TestObject("2", "3")), "Era esperado verdadeiro, mas " + result459 + " <set.contains(new TestObject('2', '3'))> é falso")
chamada antiga: Assertions.assertTrue(set.contains(new TestObject("1", "2")))
nova chamada: assertTrue(set.contains(new TestObject("1", "2")), "Era esperado verdadeiro, mas " + result460 + " <set.contains(new TestObject('1', '2'))> é falso")
chamada antiga: Assertions.assertTrue(set.add(0, new TestObject("1", "2")))
nova chamada: assertTrue(set.add(0, new TestObject("1", "2")), "Era esperado verdadeiro, mas " + result461 + " <set.add(0, new TestObject('1', '2'))> é falso")
chamada antiga: Assertions.assertTrue(set.add(2, new TestObject("2", "3")))
nova chamada: assertTrue(set.add(2, new TestObject("2", "3")), "Era esperado verdadeiro, mas " + result462 + " <set.add(2, new TestObject('2', '3'))> é falso")
chamada antiga: Assertions.assertTrue(set.add(3, new TestObject("3", "4")))
nova chamada: assertTrue(set.add(3, new TestObject("3", "4")), "Era esperado verdadeiro, mas " + result463 + " <set.add(3, new TestObject('3', '4'))> é falso")
chamada antiga: Assertions.assertTrue(set.add(4, new TestObject("5", "6")))
nova chamada: assertTrue(set.add(4, new TestObject("5", "6")), "Era esperado verdadeiro, mas " + result464 + " <set.add(4, new TestObject('5', '6'))> é falso")
chamada antiga: Assertions.assertTrue(new Double(112.3).compareTo(res2) == 0)
nova chamada: assertTrue(new Double(112.3).compareTo(res2) == 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(new Double(112.3).compareTo(res2) == 0)
nova chamada: assertTrue(new Double(112.3).compareTo(res2) == 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(new Double(112.3).compareTo(res2) == 0)
nova chamada: assertTrue(new Double(112.3).compareTo(res2) == 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(new Double(112.3).compareTo(res2) == 0)
nova chamada: assertTrue(new Double(112.3).compareTo(res2) == 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(stringIterator2.hasNext())
nova chamada: assertTrue(stringIterator2.hasNext(), "Era esperado verdadeiro, mas " + result465 + " <stringIterator2.hasNext()> é falso")
chamada antiga: Assertions.assertThrows(WriteRedisConnectionException.class, () -> {
    RedisRunner.RedisProcess master = new RedisRunner().port(6377).nosave().randomDir().run();
    Config config = new Config();
    config.useSingleServer().setAddress("redis://127.0.0.1:6377");
    RedissonClient redisson = Redisson.create(config);
    RLock lock = redisson.getLock("myLock");
    master.stop();
    Thread.sleep(3000);
    lock.tryLock(5, 10, TimeUnit.SECONDS);
})
nova chamada: assertThrows(WriteRedisConnectionException.class, () -> {
    RedisRunner.RedisProcess master = new RedisRunner().port(6377).nosave().randomDir().run();
    Config config = new Config();
    config.useSingleServer().setAddress("redis://127.0.0.1:6377");
    RedissonClient redisson = Redisson.create(config);
    RLock lock = redisson.getLock("myLock");
    master.stop();
    Thread.sleep(3000);
    lock.tryLock(5, 10, TimeUnit.SECONDS);
}, "Era esperado que a exceção  WriteRedisConnectionException.class fosse lançada, mas não foi")
chamada antiga: Assertions.assertFalse(lock.isLocked())
nova chamada: assertFalse(lock.isLocked(), "Era esperado falso, mas " + result466 + " <lock.isLocked()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(lock.isLocked())
nova chamada: assertFalse(lock.isLocked(), "Era esperado falso, mas " + result467 + " <lock.isLocked()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(lock.isHeldByCurrentThread())
nova chamada: assertFalse(lock.isHeldByCurrentThread(), "Era esperado falso, mas " + result468 + " <lock.isHeldByCurrentThread()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(lock.isHeldByCurrentThread())
nova chamada: assertFalse(lock.isHeldByCurrentThread(), "Era esperado falso, mas " + result469 + " <lock.isHeldByCurrentThread()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(lock.isHeldByCurrentThread())
nova chamada: assertFalse(lock.isHeldByCurrentThread(), "Era esperado falso, mas " + result470 + " <lock.isHeldByCurrentThread()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(lock.isLocked())
nova chamada: assertFalse(lock.isLocked(), "Era esperado falso, mas " + result471 + " <lock.isLocked()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(lock.isLocked())
nova chamada: assertFalse(lock.isLocked(), "Era esperado falso, mas " + result472 + " <lock.isLocked()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(lock.isLocked())
nova chamada: assertFalse(lock.isLocked(), "Era esperado falso, mas " + result473 + " <lock.isLocked()> é verdadeiro ")
chamada antiga: Assertions.assertThrows(IllegalMonitorStateException.class, () -> {
    RLock lock = redisson.getLock("lock");
    Thread t = new Thread() {

        public void run() {
            RLock lock = redisson.getLock("lock");
            lock.lock();
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            lock.unlock();
        }
    };
    t.start();
    t.join(400);
    try {
        lock.unlock();
    } catch (IllegalMonitorStateException e) {
        t.join();
        throw e;
    }
})
nova chamada: assertThrows(IllegalMonitorStateException.class, () -> {
    RLock lock = redisson.getLock("lock");
    Thread t = new Thread() {

        public void run() {
            RLock lock = redisson.getLock("lock");
            lock.lock();
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            lock.unlock();
        }
    };
    t.start();
    t.join(400);
    try {
        lock.unlock();
    } catch (IllegalMonitorStateException e) {
        t.join();
        throw e;
    }
}, "Era esperado que a exceção  IllegalMonitorStateException.class fosse lançada, mas não foi")
chamada antiga: Assertions.assertFalse(lock1.tryLock())
nova chamada: assertFalse(lock1.tryLock(), "Era esperado falso, mas " + result474 + " <lock1.tryLock()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(iterator.hasNext())
nova chamada: assertFalse(iterator.hasNext(), "Era esperado falso, mas " + result475 + " <iterator.hasNext()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(iterator.hasNext())
nova chamada: assertFalse(iterator.hasNext(), "Era esperado falso, mas " + result476 + " <iterator.hasNext()> é verdadeiro ")
chamada antiga: Assertions.assertThrows(IndexOutOfBoundsException.class, () -> {
    RListReactive<Integer> list = redisson.getList("list");
    sync(list.add(1));
    sync(list.add(2));
    sync(list.add(3));
    sync(list.add(4));
    sync(list.add(5));
    sync(list.set(5, 6));
})
nova chamada: assertThrows(IndexOutOfBoundsException.class, () -> {
    RListReactive<Integer> list = redisson.getList("list");
    sync(list.add(1));
    sync(list.add(2));
    sync(list.add(3));
    sync(list.add(4));
    sync(list.add(5));
    sync(list.set(5, 6));
}, "Era esperado que a exceção  IndexOutOfBoundsException.class fosse lançada, mas não foi")
chamada antiga: Assertions.assertFalse(sync(list.removeAll(Collections.emptyList())))
nova chamada: assertFalse(sync(list.removeAll(Collections.emptyList())), "Era esperado falso, mas " + result477 + " <sync(list.removeAll(Collections.emptyList()))> é verdadeiro ")
chamada antiga: Assertions.assertFalse(Arrays.asList(1).removeAll(Collections.emptyList()))
nova chamada: assertFalse(Arrays.asList(1).removeAll(Collections.emptyList()), "Era esperado falso, mas " + result478 + " <Arrays.asList(1).removeAll(Collections.emptyList())> é verdadeiro ")
chamada antiga: Assertions.assertFalse(sync(list.removeAll(Collections.emptyList())))
nova chamada: assertFalse(sync(list.removeAll(Collections.emptyList())), "Era esperado falso, mas " + result479 + " <sync(list.removeAll(Collections.emptyList()))> é verdadeiro ")
chamada antiga: Assertions.assertFalse(sync(list.retainAll(Arrays.asList(1, 2))))
nova chamada: assertFalse(sync(list.retainAll(Arrays.asList(1, 2))), "Era esperado falso, mas " + result480 + " <sync(list.retainAll(Arrays.asList(1, 2)))> é verdadeiro ")
chamada antiga: Assertions.assertThrows(RedisException.class, () -> {
    RListReactive<Integer> list = redisson.getList("list");
    sync(list.addAll(2, Arrays.asList(7, 8, 9)));
})
nova chamada: assertThrows(RedisException.class, () -> {
    RListReactive<Integer> list = redisson.getList("list");
    sync(list.addAll(2, Arrays.asList(7, 8, 9)));
}, "Era esperado que a exceção  RedisException.class fosse lançada, mas não foi")
chamada antiga: Assertions.assertFalse(sync(list.containsAll(Arrays.asList(30, 711, 11))))
nova chamada: assertFalse(sync(list.containsAll(Arrays.asList(30, 711, 11))), "Era esperado falso, mas " + result481 + " <sync(list.containsAll(Arrays.asList(30, 711, 11)))> é verdadeiro ")
chamada antiga: Assertions.assertFalse(sync(list.contains("31")))
nova chamada: assertFalse(sync(list.contains("31")), "Era esperado falso, mas " + result482 + " <sync(list.contains('31'))> é verdadeiro ")
chamada antiga: Assertions.assertNull(set.pollLast())
nova chamada: assertNull(set.pollLast(), "Era esperado nulo, mas " + result483 + " <set.pollLast()> não é nulo")
chamada antiga: Assertions.assertNull(set.pollFirst())
nova chamada: assertNull(set.pollFirst(), "Era esperado nulo, mas " + result484 + " <set.pollFirst()> não é nulo")
chamada antiga: Assertions.assertFalse(set.add("a"))
nova chamada: assertFalse(set.add("a"), "Era esperado falso, mas " + result485 + " <set.add('a')> é verdadeiro ")
chamada antiga: Assertions.assertFalse(set.add("a"))
nova chamada: assertFalse(set.add("a"), "Era esperado falso, mas " + result486 + " <set.add('a')> é verdadeiro ")
chamada antiga: Assertions.assertFalse(set.add("a"))
nova chamada: assertFalse(set.add("a"), "Era esperado falso, mas " + result487 + " <set.add('a')> é verdadeiro ")
chamada antiga: Assertions.assertNull(ttl)
nova chamada: assertNull(ttl, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: Assertions.assertNotNull(firstTTL)
nova chamada: assertNotNull(firstTTL, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: Assertions.assertNotNull(secondTTL)
nova chamada: assertNotNull(secondTTL, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: Assertions.assertNotNull(thirdTTL)
nova chamada: assertNotNull(thirdTTL, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: Assertions.assertNotNull(fourthTTL)
nova chamada: assertNotNull(fourthTTL, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: Assertions.assertNotNull(firstTTL)
nova chamada: assertNotNull(firstTTL, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: Assertions.assertNotNull(thirdTTL)
nova chamada: assertNotNull(thirdTTL, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: Assertions.assertNotNull(fourthTTL)
nova chamada: assertNotNull(fourthTTL, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: Assertions.assertNotNull(unlocked)
nova chamada: assertNotNull(unlocked, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: Assertions.assertNull(ttl)
nova chamada: assertNull(ttl, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: Assertions.assertNotNull(thirdTTL)
nova chamada: assertNotNull(thirdTTL, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: Assertions.assertNotNull(fourthTTL)
nova chamada: assertNotNull(fourthTTL, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: Assertions.assertFalse(locked)
nova chamada: assertFalse(locked, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: Assertions.assertFalse(locked)
nova chamada: assertFalse(locked, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: Assertions.assertFalse(locked)
nova chamada: assertFalse(locked, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: Assertions.assertFalse(locked)
nova chamada: assertFalse(locked, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: Assertions.assertFalse(locked)
nova chamada: assertFalse(locked, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: Assertions.assertNull(ttl)
nova chamada: assertNull(ttl, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: Assertions.assertNotNull(firstTTL)
nova chamada: assertNotNull(firstTTL, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: Assertions.assertNotNull(secondTTL)
nova chamada: assertNotNull(secondTTL, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: Assertions.assertNotNull(unlocked)
nova chamada: assertNotNull(unlocked, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: Assertions.assertNull(ttl)
nova chamada: assertNull(ttl, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: Assertions.assertNotNull(thirdTTL)
nova chamada: assertNotNull(thirdTTL, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: Assertions.assertNotNull(secondTTLAgain)
nova chamada: assertNotNull(secondTTLAgain, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: Assertions.assertNotNull(thirdTTL)
nova chamada: assertNotNull(thirdTTL, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: Assertions.assertNull(ttl)
nova chamada: assertNull(ttl, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: Assertions.assertNotNull(firstTTL)
nova chamada: assertNotNull(firstTTL, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: Assertions.assertNotNull(secondTTL)
nova chamada: assertNotNull(secondTTL, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: Assertions.assertNotNull(thirdTTL)
nova chamada: assertNotNull(thirdTTL, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: Assertions.assertNull(ttl)
nova chamada: assertNull(ttl, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: Assertions.assertFalse(lock.isLocked())
nova chamada: assertFalse(lock.isLocked(), "Era esperado falso, mas " + result488 + " <lock.isLocked()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(lock.isLocked())
nova chamada: assertFalse(lock.isLocked(), "Era esperado falso, mas " + result489 + " <lock.isLocked()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(lock.isHeldByCurrentThread())
nova chamada: assertFalse(lock.isHeldByCurrentThread(), "Era esperado falso, mas " + result490 + " <lock.isHeldByCurrentThread()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(lock.isHeldByCurrentThread())
nova chamada: assertFalse(lock.isHeldByCurrentThread(), "Era esperado falso, mas " + result491 + " <lock.isHeldByCurrentThread()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(lock.isHeldByCurrentThread())
nova chamada: assertFalse(lock.isHeldByCurrentThread(), "Era esperado falso, mas " + result492 + " <lock.isHeldByCurrentThread()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(lock.isLocked())
nova chamada: assertFalse(lock.isLocked(), "Era esperado falso, mas " + result493 + " <lock.isLocked()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(lock.isLocked())
nova chamada: assertFalse(lock.isLocked(), "Era esperado falso, mas " + result494 + " <lock.isLocked()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(lock.isLocked())
nova chamada: assertFalse(lock.isLocked(), "Era esperado falso, mas " + result495 + " <lock.isLocked()> é verdadeiro ")
chamada antiga: Assertions.assertThrows(IllegalMonitorStateException.class, () -> {
    RLock lock = redisson.getFairLock("lock");
    Thread t = new Thread() {

        public void run() {
            RLock lock = redisson.getFairLock("lock");
            lock.lock();
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            lock.unlock();
        }
    };
    t.start();
    t.join(400);
    try {
        lock.unlock();
    } catch (IllegalMonitorStateException e) {
        t.join();
        throw e;
    }
})
nova chamada: assertThrows(IllegalMonitorStateException.class, () -> {
    RLock lock = redisson.getFairLock("lock");
    Thread t = new Thread() {

        public void run() {
            RLock lock = redisson.getFairLock("lock");
            lock.lock();
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            lock.unlock();
        }
    };
    t.start();
    t.join(400);
    try {
        lock.unlock();
    } catch (IllegalMonitorStateException e) {
        t.join();
        throw e;
    }
}, "Era esperado que a exceção  IllegalMonitorStateException.class fosse lançada, mas não foi")
chamada antiga: Assertions.assertFalse(lock1.tryLock())
nova chamada: assertFalse(lock1.tryLock(), "Era esperado falso, mas " + result496 + " <lock1.tryLock()> é verdadeiro ")
chamada antiga: Assertions.assertThrows(WriteRedisConnectionException.class, () -> {
    RLock lock = redisson.getSpinLock("myLock");
    master.stop();
    Thread.sleep(3000);
    lock.tryLock(5, 10, TimeUnit.SECONDS);
})
nova chamada: assertThrows(WriteRedisConnectionException.class, () -> {
    RLock lock = redisson.getSpinLock("myLock");
    master.stop();
    Thread.sleep(3000);
    lock.tryLock(5, 10, TimeUnit.SECONDS);
}, "Era esperado que a exceção  WriteRedisConnectionException.class fosse lançada, mas não foi")
chamada antiga: Assertions.assertFalse(lock.isLocked())
nova chamada: assertFalse(lock.isLocked(), "Era esperado falso, mas " + result497 + " <lock.isLocked()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(lock.isLocked())
nova chamada: assertFalse(lock.isLocked(), "Era esperado falso, mas " + result498 + " <lock.isLocked()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(lock.isHeldByCurrentThread())
nova chamada: assertFalse(lock.isHeldByCurrentThread(), "Era esperado falso, mas " + result499 + " <lock.isHeldByCurrentThread()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(lock.isHeldByCurrentThread())
nova chamada: assertFalse(lock.isHeldByCurrentThread(), "Era esperado falso, mas " + result500 + " <lock.isHeldByCurrentThread()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(lock.isHeldByCurrentThread())
nova chamada: assertFalse(lock.isHeldByCurrentThread(), "Era esperado falso, mas " + result501 + " <lock.isHeldByCurrentThread()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(lock.isLocked())
nova chamada: assertFalse(lock.isLocked(), "Era esperado falso, mas " + result502 + " <lock.isLocked()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(lock.isLocked())
nova chamada: assertFalse(lock.isLocked(), "Era esperado falso, mas " + result503 + " <lock.isLocked()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(lock.isLocked())
nova chamada: assertFalse(lock.isLocked(), "Era esperado falso, mas " + result504 + " <lock.isLocked()> é verdadeiro ")
chamada antiga: Assertions.assertThrows(IllegalMonitorStateException.class, () -> {
    RLock lock = redisson.getSpinLock("lock");
    Thread t = new Thread() {

        public void run() {
            RLock lock = redisson.getSpinLock("lock");
            lock.lock();
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            lock.unlock();
        }
    };
    t.start();
    t.join(400);
    try {
        lock.unlock();
    } catch (IllegalMonitorStateException e) {
        t.join();
        throw e;
    }
})
nova chamada: assertThrows(IllegalMonitorStateException.class, () -> {
    RLock lock = redisson.getSpinLock("lock");
    Thread t = new Thread() {

        public void run() {
            RLock lock = redisson.getSpinLock("lock");
            lock.lock();
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            lock.unlock();
        }
    };
    t.start();
    t.join(400);
    try {
        lock.unlock();
    } catch (IllegalMonitorStateException e) {
        t.join();
        throw e;
    }
}, "Era esperado que a exceção  IllegalMonitorStateException.class fosse lançada, mas não foi")
chamada antiga: Assertions.assertFalse(lock1.tryLock())
nova chamada: assertFalse(lock1.tryLock(), "Era esperado falso, mas " + result505 + " <lock1.tryLock()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(set.contains(1))
nova chamada: assertFalse(set.contains(1), "Era esperado falso, mas " + result506 + " <set.contains(1)> é verdadeiro ")
chamada antiga: Assertions.assertFalse(set.removeAsync(1).get())
nova chamada: assertFalse(set.removeAsync(1).get(), "Era esperado falso, mas " + result507 + " <set.removeAsync(1).get()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(set.contains(3))
nova chamada: assertFalse(set.contains(3), "Era esperado falso, mas " + result508 + " <set.contains(3)> é verdadeiro ")
chamada antiga: Assertions.assertFalse(iter.hasNext())
nova chamada: assertFalse(iter.hasNext(), "Era esperado falso, mas " + result509 + " <iter.hasNext()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(setRes2)
nova chamada: assertFalse(setRes2, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: Assertions.assertThrows(IllegalArgumentException.class, () -> {
    TreeSet<Integer> set = new TreeSet<Integer>();
    set.add(1);
    set.add(2);
    set.add(3);
    set.add(4);
    set.add(5);
    SortedSet<Integer> hs = set.tailSet(3);
    hs.add(10);
    assertThat(hs).containsExactly(3, 4, 5, 10);
    set.remove(4);
    assertThat(hs).containsExactly(3, 5, 10);
    set.remove(3);
    assertThat(hs).containsExactly(5, 10);
    hs.add(-1);
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    TreeSet<Integer> set = new TreeSet<Integer>();
    set.add(1);
    set.add(2);
    set.add(3);
    set.add(4);
    set.add(5);
    SortedSet<Integer> hs = set.tailSet(3);
    hs.add(10);
    assertThat(hs).containsExactly(3, 4, 5, 10);
    set.remove(4);
    assertThat(hs).containsExactly(3, 5, 10);
    set.remove(3);
    assertThat(hs).containsExactly(5, 10);
    hs.add(-1);
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: Assertions.assertThrows(IllegalArgumentException.class, () -> {
    TreeSet<Integer> set = new TreeSet<>();
    set.add(1);
    set.add(2);
    set.add(3);
    set.add(4);
    set.add(5);
    SortedSet<Integer> hs = set.headSet(3);
    hs.add(0);
    assertThat(hs).containsExactly(0, 1, 2);
    set.remove(2);
    assertThat(hs).containsExactly(0, 1);
    set.remove(3);
    assertThat(hs).containsExactly(0, 1);
    hs.add(7);
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    TreeSet<Integer> set = new TreeSet<>();
    set.add(1);
    set.add(2);
    set.add(3);
    set.add(4);
    set.add(5);
    SortedSet<Integer> hs = set.headSet(3);
    hs.add(0);
    assertThat(hs).containsExactly(0, 1, 2);
    set.remove(2);
    assertThat(hs).containsExactly(0, 1);
    set.remove(3);
    assertThat(hs).containsExactly(0, 1);
    hs.add(7);
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: Assertions.assertFalse(set.remove(0))
nova chamada: assertFalse(set.remove(0), "Era esperado falso, mas " + result510 + " <set.remove(0)> é verdadeiro ")
chamada antiga: Assertions.assertFalse(set.containsAll(Arrays.asList(30, 711, 11)))
nova chamada: assertFalse(set.containsAll(Arrays.asList(30, 711, 11)), "Era esperado falso, mas " + result511 + " <set.containsAll(Arrays.asList(30, 711, 11))> é verdadeiro ")
chamada antiga: Assertions.assertFalse(set.contains(new TestObject("1", "9")))
nova chamada: assertFalse(set.contains(new TestObject("1", "9")), "Era esperado falso, mas " + result512 + " <set.contains(new TestObject('1', '9'))> é verdadeiro ")
chamada antiga: Assertions.assertFalse(set.add(new TestObject("1", "2")))
nova chamada: assertFalse(set.add(new TestObject("1", "2")), "Era esperado falso, mas " + result513 + " <set.add(new TestObject('1', '2'))> é verdadeiro ")
chamada antiga: Assertions.assertEquals("192.168.234.129", node.getAddress().getHost())
nova chamada: assertEquals("192.168.234.129", node.getAddress().getHost(), "Era esperado valores iguais, mas  '192.168.234.129' é diferente de " + result514 + " <node.getAddress().getHost()>")
chamada antiga: Assertions.assertEquals(7001, node.getAddress().getPort())
nova chamada: assertEquals(7001, node.getAddress().getPort(), "Era esperado valores iguais, mas  7001 é diferente de " + result515 + " <node.getAddress().getPort()>")
chamada antiga: Assertions.assertEquals(sb.getLng(), set.iterator().next().getLng())
nova chamada: assertEquals(sb.getLng(), set.iterator().next().getLng(), "Era esperado valores iguais, mas " + result516 + " <sb.getLng()> é diferente de " + result517 + " <set.iterator().next().getLng()>")
chamada antiga: Assertions.assertFalse(set.contains(1))
nova chamada: assertFalse(set.contains(1), "Era esperado falso, mas " + result518 + " <set.contains(1)> é verdadeiro ")
chamada antiga: Assertions.assertFalse(set.removeAsync(1).get())
nova chamada: assertFalse(set.removeAsync(1).get(), "Era esperado falso, mas " + result519 + " <set.removeAsync(1).get()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(set.contains(3))
nova chamada: assertFalse(set.contains(3), "Era esperado falso, mas " + result520 + " <set.contains(3)> é verdadeiro ")
chamada antiga: Assertions.assertEquals(4, iteration)
nova chamada: assertEquals(4, iteration, "Era esperado valores iguais, mas  4 é diferente de " + " iteration")
chamada antiga: Assertions.assertEquals(0, list.size())
nova chamada: assertEquals(0, list.size(), "Era esperado valores iguais, mas  0 é diferente de " + result521 + " <list.size()>")
chamada antiga: Assertions.assertEquals(0, setCopy.size())
nova chamada: assertEquals(0, setCopy.size(), "Era esperado valores iguais, mas  0 é diferente de " + result522 + " <setCopy.size()>")
chamada antiga: Assertions.assertEquals(2, set.size())
nova chamada: assertEquals(2, set.size(), "Era esperado valores iguais, mas  2 é diferente de " + result523 + " <set.size()>")
chamada antiga: Assertions.assertEquals(0, set.size())
nova chamada: assertEquals(0, set.size(), "Era esperado valores iguais, mas  0 é diferente de " + result524 + " <set.size()>")
chamada antiga: Assertions.assertEquals(10000, cnt)
nova chamada: assertEquals(10000, cnt, "Era esperado valores iguais, mas  10000 é diferente de " + " cnt")
chamada antiga: Assertions.assertFalse(set.containsAll(Arrays.asList(30, 711, 11)))
nova chamada: assertFalse(set.containsAll(Arrays.asList(30, 711, 11)), "Era esperado falso, mas " + result525 + " <set.containsAll(Arrays.asList(30, 711, 11))> é verdadeiro ")
chamada antiga: Assertions.assertFalse(set.contains(new TestObject("1", "9")))
nova chamada: assertFalse(set.contains(new TestObject("1", "9")), "Era esperado falso, mas " + result526 + " <set.contains(new TestObject('1', '9'))> é verdadeiro ")
chamada antiga: Assertions.assertEquals(4, set.size())
nova chamada: assertEquals(4, set.size(), "Era esperado valores iguais, mas  4 é diferente de " + result527 + " <set.size()>")
chamada antiga: Assertions.assertEquals(5, set.size())
nova chamada: assertEquals(5, set.size(), "Era esperado valores iguais, mas  5 é diferente de " + result528 + " <set.size()>")
chamada antiga: Assertions.assertEquals(0, set.size())
nova chamada: assertEquals(0, set.size(), "Era esperado valores iguais, mas  0 é diferente de " + result529 + " <set.size()>")
chamada antiga: Assertions.assertFalse(set.retainAll(Arrays.asList(1, 2)))
nova chamada: assertFalse(set.retainAll(Arrays.asList(1, 2)), "Era esperado falso, mas " + result530 + " <set.retainAll(Arrays.asList(1, 2))> é verdadeiro ")
chamada antiga: Assertions.assertFalse(set.move("otherSet", 2))
nova chamada: assertFalse(set.move("otherSet", 2), "Era esperado falso, mas " + result531 + " <set.move('otherSet', 2)> é verdadeiro ")
chamada antiga: Assertions.assertEquals(1, set.size())
nova chamada: assertEquals(1, set.size(), "Era esperado valores iguais, mas  1 é diferente de " + result532 + " <set.size()>")
chamada antiga: Assertions.assertEquals(0, otherSet.size())
nova chamada: assertEquals(0, otherSet.size(), "Era esperado valores iguais, mas  0 é diferente de " + result533 + " <otherSet.size()>")
chamada antiga: Assertions.assertFalse(list.removeAll(Collections.emptyList()))
nova chamada: assertFalse(list.removeAll(Collections.emptyList()), "Era esperado falso, mas " + result534 + " <list.removeAll(Collections.emptyList())> é verdadeiro ")
chamada antiga: Assertions.assertFalse(Arrays.asList(1).removeAll(Collections.emptyList()))
nova chamada: assertFalse(Arrays.asList(1).removeAll(Collections.emptyList()), "Era esperado falso, mas " + result535 + " <Arrays.asList(1).removeAll(Collections.emptyList())> é verdadeiro ")
chamada antiga: Assertions.assertFalse(list.removeAll(Collections.emptyList()))
nova chamada: assertFalse(list.removeAll(Collections.emptyList()), "Era esperado falso, mas " + result536 + " <list.removeAll(Collections.emptyList())> é verdadeiro ")
chamada antiga: Assertions.assertEquals(expectedValuesSet, actualValuesSet)
nova chamada: assertEquals(expectedValuesSet, actualValuesSet, "Era esperado valores iguais, mas  expectedValuesSet é diferente de " + " actualValuesSet")
chamada antiga: Assertions.assertEquals(expectedMap.entrySet(), m.readAllEntrySet())
nova chamada: assertEquals(expectedMap.entrySet(), m.readAllEntrySet(), "Era esperado valores iguais, mas " + result537 + " <expectedMap.entrySet()> é diferente de " + result538 + " <m.readAllEntrySet()>")
chamada antiga: Assertions.assertEquals(value, map.putIfAbsent(key, new SimpleValue("3")))
nova chamada: assertEquals(value, map.putIfAbsent(key, new SimpleValue("3")), "Era esperado valores iguais, mas  value é diferente de " + result539 + " <map.putIfAbsent(key, new SimpleValue('3'))>")
chamada antiga: Assertions.assertEquals(value, map.get(key))
nova chamada: assertEquals(value, map.get(key), "Era esperado valores iguais, mas  value é diferente de " + result540 + " <map.get(key)>")
chamada antiga: Assertions.assertNull(map.putIfAbsent(key1, value1))
nova chamada: assertNull(map.putIfAbsent(key1, value1), "Era esperado nulo, mas " + result541 + " <map.putIfAbsent(key1, value1)> não é nulo")
chamada antiga: Assertions.assertEquals(value1, map.get(key1))
nova chamada: assertEquals(value1, map.get(key1), "Era esperado valores iguais, mas  value1 é diferente de " + result542 + " <map.get(key1)>")
chamada antiga: Assertions.assertNull(val1)
nova chamada: assertNull(val1, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: Assertions.assertEquals(0, map.size())
nova chamada: assertEquals(0, map.size(), "Era esperado valores iguais, mas  0 é diferente de " + result543 + " <map.size()>")
chamada antiga: Assertions.assertFalse(res)
nova chamada: assertFalse(res, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: Assertions.assertFalse(res1)
nova chamada: assertFalse(res1, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: Assertions.assertEquals("2", val1.getValue())
nova chamada: assertEquals("2", val1.getValue(), "Era esperado valores iguais, mas  '2' é diferente de " + result544 + " <val1.getValue()>")
chamada antiga: Assertions.assertFalse(res)
nova chamada: assertFalse(res, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: Assertions.assertEquals("2", val1.getValue())
nova chamada: assertEquals("2", val1.getValue(), "Era esperado valores iguais, mas  '2' é diferente de " + result545 + " <val1.getValue()>")
chamada antiga: Assertions.assertFalse(res1)
nova chamada: assertFalse(res1, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: Assertions.assertEquals("3", val1.getValue())
nova chamada: assertEquals("3", val1.getValue(), "Era esperado valores iguais, mas  '3' é diferente de " + result546 + " <val1.getValue()>")
chamada antiga: Assertions.assertEquals("2", res.getValue())
nova chamada: assertEquals("2", res.getValue(), "Era esperado valores iguais, mas  '2' é diferente de " + result547 + " <res.getValue()>")
chamada antiga: Assertions.assertEquals("3", val1.getValue())
nova chamada: assertEquals("3", val1.getValue(), "Era esperado valores iguais, mas  '3' é diferente de " + result548 + " <val1.getValue()>")
chamada antiga: Assertions.assertFalse(map.fastPut("1", 3))
nova chamada: assertFalse(map.fastPut("1", 3), "Era esperado falso, mas " + result549 + " <map.fastPut('1', 3)> é verdadeiro ")
chamada antiga: Assertions.assertEquals(1, map.size())
nova chamada: assertEquals(1, map.size(), "Era esperado valores iguais, mas  1 é diferente de " + result550 + " <map.size()>")
chamada antiga: Assertions.assertThrows(WriteRedisConnectionException.class, () -> {
    RedisProcess master = null;
    RedisProcess slave = null;
    RedissonClient client = null;
    try {
        master = redisTestInstance();
        slave = redisTestInstance();
        Map<String, Integer> weights = new HashMap<>();
        weights.put(master.getRedisServerAddressAndPort(), 1);
        weights.put(slave.getRedisServerAddressAndPort(), 2);
        Config config = new Config();
        config.useMasterSlaveServers().setReadMode(ReadMode.SLAVE).setMasterAddress(master.getRedisServerAddressAndPort()).addSlaveAddress(slave.getRedisServerAddressAndPort()).setLoadBalancer(new WeightedRoundRobinBalancer(weights, 1));
        client = Redisson.create(config);
        slave.stop();
        RedissonClient clientCopy = client;
        assertThat(clientCopy.getBucket("key").get()).isNull();
    } finally {
        if (master != null) {
            master.stop();
        }
        if (slave != null) {
            slave.stop();
        }
        if (client != null) {
            client.shutdown();
        }
    }
})
nova chamada: assertThrows(WriteRedisConnectionException.class, () -> {
    RedisProcess master = null;
    RedisProcess slave = null;
    RedissonClient client = null;
    try {
        master = redisTestInstance();
        slave = redisTestInstance();
        Map<String, Integer> weights = new HashMap<>();
        weights.put(master.getRedisServerAddressAndPort(), 1);
        weights.put(slave.getRedisServerAddressAndPort(), 2);
        Config config = new Config();
        config.useMasterSlaveServers().setReadMode(ReadMode.SLAVE).setMasterAddress(master.getRedisServerAddressAndPort()).addSlaveAddress(slave.getRedisServerAddressAndPort()).setLoadBalancer(new WeightedRoundRobinBalancer(weights, 1));
        client = Redisson.create(config);
        slave.stop();
        RedissonClient clientCopy = client;
        assertThat(clientCopy.getBucket("key").get()).isNull();
    } finally {
        if (master != null) {
            master.stop();
        }
        if (slave != null) {
            slave.stop();
        }
        if (client != null) {
            client.shutdown();
        }
    }
}, "Era esperado que a exceção  WriteRedisConnectionException.class fosse lançada, mas não foi")
chamada antiga: Assertions.assertEquals(2, l)
nova chamada: assertEquals(2, l, "Era esperado valores iguais, mas  2 é diferente de " + " l")
chamada antiga: Assertions.assertEquals(3, l)
nova chamada: assertEquals(3, l, "Era esperado valores iguais, mas  3 é diferente de " + " l")
chamada antiga: Assertions.assertEquals((Integer) 1, sync(queue1.poll(2, TimeUnit.SECONDS)))
nova chamada: assertEquals((Integer) 1, sync(queue1.poll(2, TimeUnit.SECONDS)), "Era esperado valores iguais, mas  (Integer) 1 é diferente de " + result551 + " <sync(queue1.poll(2, TimeUnit.SECONDS))>")
chamada antiga: Assertions.assertNull(sync(queue1.poll(5, TimeUnit.SECONDS)))
nova chamada: assertNull(sync(queue1.poll(5, TimeUnit.SECONDS)), "Era esperado nulo, mas " + result552 + " <sync(queue1.poll(5, TimeUnit.SECONDS))> não é nulo")
chamada antiga: Assertions.assertEquals((Integer) 1, sync(queue1.poll(10, TimeUnit.SECONDS)))
nova chamada: assertEquals((Integer) 1, sync(queue1.poll(10, TimeUnit.SECONDS)), "Era esperado valores iguais, mas  (Integer) 1 é diferente de " + result553 + " <sync(queue1.poll(10, TimeUnit.SECONDS))>")
chamada antiga: Assertions.assertEquals((Integer) 1, sync(queue.poll()))
nova chamada: assertEquals((Integer) 1, sync(queue.poll()), "Era esperado valores iguais, mas  (Integer) 1 é diferente de " + result554 + " <sync(queue.poll())>")
chamada antiga: Assertions.assertEquals((Integer) 2, sync(queue.peek()))
nova chamada: assertEquals((Integer) 2, sync(queue.peek()), "Era esperado valores iguais, mas  (Integer) 2 é diferente de " + result555 + " <sync(queue.peek())>")
chamada antiga: Assertions.assertEquals(0, sync(queue.size()).intValue())
nova chamada: assertEquals(0, sync(queue.size()).intValue(), "Era esperado valores iguais, mas  0 é diferente de " + result556 + " <sync(queue.size()).intValue()>")
chamada antiga: Assertions.assertNull(sync(queue.poll()))
nova chamada: assertNull(sync(queue.poll()), "Era esperado nulo, mas " + result557 + " <sync(queue.poll())> não é nulo")
chamada antiga: Assertions.assertEquals(100, sync(queue.size()).intValue())
nova chamada: assertEquals(100, sync(queue.size()).intValue(), "Era esperado valores iguais, mas  100 é diferente de " + result558 + " <sync(queue.size()).intValue()>")
chamada antiga: Assertions.assertEquals(10, count)
nova chamada: assertEquals(10, count, "Era esperado valores iguais, mas  10 é diferente de " + " count")
chamada antiga: Assertions.assertEquals(10, batch.size())
nova chamada: assertEquals(10, batch.size(), "Era esperado valores iguais, mas  10 é diferente de " + result559 + " <batch.size()>")
chamada antiga: Assertions.assertEquals(90, sync(queue.size()).intValue())
nova chamada: assertEquals(90, sync(queue.size()).intValue(), "Era esperado valores iguais, mas  90 é diferente de " + result560 + " <sync(queue.size()).intValue()>")
chamada antiga: Assertions.assertEquals(0, sync(queue.size()).intValue())
nova chamada: assertEquals(0, sync(queue.size()).intValue(), "Era esperado valores iguais, mas  0 é diferente de " + result561 + " <sync(queue.size()).intValue()>")
chamada antiga: Assertions.assertEquals(0, sync(queue1.size()).intValue())
nova chamada: assertEquals(0, sync(queue1.size()).intValue(), "Era esperado valores iguais, mas  0 é diferente de " + result562 + " <sync(queue1.size()).intValue()>")
chamada antiga: Assertions.assertEquals(1, sync(queue1.size()).intValue())
nova chamada: assertEquals(1, sync(queue1.size()).intValue(), "Era esperado valores iguais, mas  1 é diferente de " + result563 + " <sync(queue1.size()).intValue()>")
chamada antiga: Assertions.assertEquals(0, semaphore.availablePermits())
nova chamada: assertEquals(0, semaphore.availablePermits(), "Era esperado valores iguais, mas  0 é diferente de " + result564 + " <semaphore.availablePermits()>")
chamada antiga: Assertions.assertEquals(2, semaphore.availablePermits())
nova chamada: assertEquals(2, semaphore.availablePermits(), "Era esperado valores iguais, mas  2 é diferente de " + result565 + " <semaphore.availablePermits()>")
chamada antiga: Assertions.assertEquals(0, semaphore.availablePermits())
nova chamada: assertEquals(0, semaphore.availablePermits(), "Era esperado valores iguais, mas  0 é diferente de " + result566 + " <semaphore.availablePermits()>")
chamada antiga: Assertions.assertEquals(2, semaphore.availablePermits())
nova chamada: assertEquals(2, semaphore.availablePermits(), "Era esperado valores iguais, mas  2 é diferente de " + result567 + " <semaphore.availablePermits()>")
chamada antiga: Assertions.assertEquals(0, semaphore.acquiredPermits())
nova chamada: assertEquals(0, semaphore.acquiredPermits(), "Era esperado valores iguais, mas  0 é diferente de " + result568 + " <semaphore.acquiredPermits()>")
chamada antiga: Assertions.assertEquals(1, semaphore.acquiredPermits())
nova chamada: assertEquals(1, semaphore.acquiredPermits(), "Era esperado valores iguais, mas  1 é diferente de " + result569 + " <semaphore.acquiredPermits()>")
chamada antiga: Assertions.assertEquals(2, semaphore.acquiredPermits())
nova chamada: assertEquals(2, semaphore.acquiredPermits(), "Era esperado valores iguais, mas  2 é diferente de " + result570 + " <semaphore.acquiredPermits()>")
chamada antiga: Assertions.assertEquals(0, semaphore.acquiredPermits())
nova chamada: assertEquals(0, semaphore.acquiredPermits(), "Era esperado valores iguais, mas  0 é diferente de " + result571 + " <semaphore.acquiredPermits()>")
chamada antiga: Assertions.assertEquals(2, semaphore.getPermits())
nova chamada: assertEquals(2, semaphore.getPermits(), "Era esperado valores iguais, mas  2 é diferente de " + result572 + " <semaphore.getPermits()>")
chamada antiga: Assertions.assertEquals(2, semaphore.getPermits())
nova chamada: assertEquals(2, semaphore.getPermits(), "Era esperado valores iguais, mas  2 é diferente de " + result573 + " <semaphore.getPermits()>")
chamada antiga: Assertions.assertEquals(2, semaphore.getPermits())
nova chamada: assertEquals(2, semaphore.getPermits(), "Era esperado valores iguais, mas  2 é diferente de " + result574 + " <semaphore.getPermits()>")
chamada antiga: Assertions.assertThrows(RedisException.class, () -> {
    RPermitExpirableSemaphore s = redisson.getPermitExpirableSemaphore("test");
    s.release("1234");
})
nova chamada: assertThrows(RedisException.class, () -> {
    RPermitExpirableSemaphore s = redisson.getPermitExpirableSemaphore("test");
    s.release("1234");
}, "Era esperado que a exceção  RedisException.class fosse lançada, mas não foi")
chamada antiga: Assertions.assertEquals(0, al.getAndSet(12))
nova chamada: assertEquals(0, al.getAndSet(12), "Era esperado valores iguais, mas  0 é diferente de " + result575 + " <al.getAndSet(12)>")
chamada antiga: Assertions.assertEquals(2, al.get())
nova chamada: assertEquals(2, al.get(), "Era esperado valores iguais, mas  2 é diferente de " + result576 + " <al.get()>")
chamada antiga: Assertions.assertEquals(2, al2.get())
nova chamada: assertEquals(2, al2.get(), "Era esperado valores iguais, mas  2 é diferente de " + result577 + " <al2.get()>")
chamada antiga: Assertions.assertFalse(al.compareAndSet(-1, 2))
nova chamada: assertFalse(al.compareAndSet(-1, 2), "Era esperado falso, mas " + result578 + " <al.compareAndSet(-1, 2)> é verdadeiro ")
chamada antiga: Assertions.assertEquals(0, al.get())
nova chamada: assertEquals(0, al.get(), "Era esperado valores iguais, mas  0 é diferente de " + result579 + " <al.get()>")
chamada antiga: Assertions.assertEquals(2, al.get())
nova chamada: assertEquals(2, al.get(), "Era esperado valores iguais, mas  2 é diferente de " + result580 + " <al.get()>")
chamada antiga: Assertions.assertEquals(2, al.getAndIncrement())
nova chamada: assertEquals(2, al.getAndIncrement(), "Era esperado valores iguais, mas  2 é diferente de " + result581 + " <al.getAndIncrement()>")
chamada antiga: Assertions.assertEquals(3, al.get())
nova chamada: assertEquals(3, al.get(), "Era esperado valores iguais, mas  3 é diferente de " + result582 + " <al.get()>")
chamada antiga: Assertions.assertEquals(1, al.incrementAndGet())
nova chamada: assertEquals(1, al.incrementAndGet(), "Era esperado valores iguais, mas  1 é diferente de " + result583 + " <al.incrementAndGet()>")
chamada antiga: Assertions.assertEquals(1, al.get())
nova chamada: assertEquals(1, al.get(), "Era esperado valores iguais, mas  1 é diferente de " + result584 + " <al.get()>")
chamada antiga: Assertions.assertEquals(0, al.getAndIncrement())
nova chamada: assertEquals(0, al.getAndIncrement(), "Era esperado valores iguais, mas  0 é diferente de " + result585 + " <al.getAndIncrement()>")
chamada antiga: Assertions.assertEquals(1, al.get())
nova chamada: assertEquals(1, al.get(), "Era esperado valores iguais, mas  1 é diferente de " + result586 + " <al.get()>")
chamada antiga: Assertions.assertEquals(0, al.get())
nova chamada: assertEquals(0, al.get(), "Era esperado valores iguais, mas  0 é diferente de " + result587 + " <al.get()>")
chamada antiga: Assertions.assertEquals(0, al.getAndIncrement())
nova chamada: assertEquals(0, al.getAndIncrement(), "Era esperado valores iguais, mas  0 é diferente de " + result588 + " <al.getAndIncrement()>")
chamada antiga: Assertions.assertEquals(1, al.get())
nova chamada: assertEquals(1, al.get(), "Era esperado valores iguais, mas  1 é diferente de " + result589 + " <al.get()>")
chamada antiga: Assertions.assertEquals(1, al.getAndDecrement())
nova chamada: assertEquals(1, al.getAndDecrement(), "Era esperado valores iguais, mas  1 é diferente de " + result590 + " <al.getAndDecrement()>")
chamada antiga: Assertions.assertEquals(0, al.get())
nova chamada: assertEquals(0, al.get(), "Era esperado valores iguais, mas  0 é diferente de " + result591 + " <al.get()>")
chamada antiga: Assertions.assertEquals(0, al.getAndIncrement())
nova chamada: assertEquals(0, al.getAndIncrement(), "Era esperado valores iguais, mas  0 é diferente de " + result592 + " <al.getAndIncrement()>")
chamada antiga: Assertions.assertEquals(1, al.getAndSet(12))
nova chamada: assertEquals(1, al.getAndSet(12), "Era esperado valores iguais, mas  1 é diferente de " + result593 + " <al.getAndSet(12)>")
chamada antiga: Assertions.assertEquals(12, al.get())
nova chamada: assertEquals(12, al.get(), "Era esperado valores iguais, mas  12 é diferente de " + result594 + " <al.get()>")
chamada antiga: Assertions.assertEquals(1, state)
nova chamada: assertEquals(1, state, "Era esperado valores iguais, mas  1 é diferente de " + " state")
chamada antiga: Assertions.assertEquals(Long.MAX_VALUE - 1000, newState)
nova chamada: assertEquals(Long.MAX_VALUE - 1000, newState, "Era esperado valores iguais, mas  Long.MAX_VALUE - 1000 é diferente de " + " newState")
chamada antiga: Assertions.assertTimeout(Duration.ofSeconds(7), () -> {
    RScheduledExecutorService executor = redisson.getExecutorService("test");
    ScheduledFuture<Long> future1 = executor.schedule(new ScheduledCallableTask(), 5, TimeUnit.SECONDS);
    ScheduledFuture<Long> future2 = executor.schedule(new ScheduledCallableTask(), 5, TimeUnit.SECONDS);
    ScheduledFuture<Long> future3 = executor.schedule(new ScheduledCallableTask(), 5, TimeUnit.SECONDS);
    node.shutdown();
    RedissonNodeConfig nodeConfig = new RedissonNodeConfig(redisson.getConfig());
    nodeConfig.setExecutorServiceWorkers(Collections.singletonMap("test", 1));
    node = RedissonNode.create(nodeConfig);
    node.start();
    assertThat(future1.get()).isEqualTo(100);
    assertThat(future2.get()).isEqualTo(100);
    assertThat(future3.get()).isEqualTo(100);
})
nova chamada: assertTimeout(Duration.ofSeconds(7), () -> {
    RScheduledExecutorService executor = redisson.getExecutorService("test");
    ScheduledFuture<Long> future1 = executor.schedule(new ScheduledCallableTask(), 5, TimeUnit.SECONDS);
    ScheduledFuture<Long> future2 = executor.schedule(new ScheduledCallableTask(), 5, TimeUnit.SECONDS);
    ScheduledFuture<Long> future3 = executor.schedule(new ScheduledCallableTask(), 5, TimeUnit.SECONDS);
    node.shutdown();
    RedissonNodeConfig nodeConfig = new RedissonNodeConfig(redisson.getConfig());
    nodeConfig.setExecutorServiceWorkers(Collections.singletonMap("test", 1));
    node = RedissonNode.create(nodeConfig);
    node.start();
    assertThat(future1.get()).isEqualTo(100);
    assertThat(future2.get()).isEqualTo(100);
    assertThat(future3.get()).isEqualTo(100);
}, "Era esperado que o tempo de execução " + result595 + " <Duration.ofSeconds(7)> não fosse ultrapassado, mas foi")
chamada antiga: Assertions.assertThrows(IllegalArgumentException.class, () -> {
    RScheduledExecutorService executor = redisson.getExecutorService("test");
    executor.schedule(new ScheduledRunnableTask("executed"), CronSchedule.of("0 44 12 19 JUN ? 2018 32"));
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    RScheduledExecutorService executor = redisson.getExecutorService("test");
    executor.schedule(new ScheduledRunnableTask("executed"), CronSchedule.of("0 44 12 19 JUN ? 2018 32"));
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: Assertions.assertTimeout(Duration.ofSeconds(15), () -> {
    RScheduledExecutorService e = redisson.getExecutorService("myExecutor");
    e.registerWorkers(WorkerOptions.defaults());
    String taskId = redisson.getExecutorService("myExecutor").schedule(new RunnableTask2(), 2000, TimeUnit.MILLISECONDS).getTaskId();
    Thread.sleep(5500);
    assertThat(e.cancelTask(taskId)).isFalse();
})
nova chamada: assertTimeout(Duration.ofSeconds(15), () -> {
    RScheduledExecutorService e = redisson.getExecutorService("myExecutor");
    e.registerWorkers(WorkerOptions.defaults());
    String taskId = redisson.getExecutorService("myExecutor").schedule(new RunnableTask2(), 2000, TimeUnit.MILLISECONDS).getTaskId();
    Thread.sleep(5500);
    assertThat(e.cancelTask(taskId)).isFalse();
}, "Era esperado que o tempo de execução " + result596 + " <Duration.ofSeconds(15)> não fosse ultrapassado, mas foi")
chamada antiga: Assertions.assertThrows(NullPointerException.class, () -> {
    RExecutorService e = redisson.getExecutorService("test");
    e.execute();
})
nova chamada: assertThrows(NullPointerException.class, () -> {
    RExecutorService e = redisson.getExecutorService("test");
    e.execute();
}, "Era esperado que a exceção  NullPointerException.class fosse lançada, mas não foi")
chamada antiga: Assertions.assertThrows(RejectedExecutionException.class, () -> {
    RExecutorService e = redisson.getExecutorService("test");
    e.execute(new RunnableTask());
    Future<?> f1 = e.submit(new RunnableTask2());
    Future<String> f2 = e.submit(new CallableTask());
    e.shutdown();
    f1.get();
    assertThat(f2.get()).isEqualTo(CallableTask.RESULT);
    assertThat(e.isShutdown()).isTrue();
    e.execute(new RunnableTask());
    assertThat(redisson.getKeys().count()).isZero();
})
nova chamada: assertThrows(RejectedExecutionException.class, () -> {
    RExecutorService e = redisson.getExecutorService("test");
    e.execute(new RunnableTask());
    Future<?> f1 = e.submit(new RunnableTask2());
    Future<String> f2 = e.submit(new CallableTask());
    e.shutdown();
    f1.get();
    assertThat(f2.get()).isEqualTo(CallableTask.RESULT);
    assertThat(e.isShutdown()).isTrue();
    e.execute(new RunnableTask());
    assertThat(redisson.getKeys().count()).isZero();
}, "Era esperado que a exceção  RejectedExecutionException.class fosse lançada, mas não foi")
chamada antiga: Assertions.assertThrows(RejectedExecutionException.class, () -> {
    RExecutorService e = redisson.getExecutorService("test");
    e.execute(new RunnableTask());
    Future<?> f1 = e.submit(new RunnableTask2());
    Future<String> f2 = e.submit(new CallableTask());
    e.shutdown();
    f1.get();
    assertThat(f2.get()).isEqualTo(CallableTask.RESULT);
    assertThat(e.isShutdown()).isTrue();
    e.submit(new RunnableTask2());
    assertThat(redisson.getKeys().count()).isZero();
})
nova chamada: assertThrows(RejectedExecutionException.class, () -> {
    RExecutorService e = redisson.getExecutorService("test");
    e.execute(new RunnableTask());
    Future<?> f1 = e.submit(new RunnableTask2());
    Future<String> f2 = e.submit(new CallableTask());
    e.shutdown();
    f1.get();
    assertThat(f2.get()).isEqualTo(CallableTask.RESULT);
    assertThat(e.isShutdown()).isTrue();
    e.submit(new RunnableTask2());
    assertThat(redisson.getKeys().count()).isZero();
}, "Era esperado que a exceção  RejectedExecutionException.class fosse lançada, mas não foi")
chamada antiga: Assertions.assertThrows(RejectedExecutionException.class, () -> {
    RExecutorService e = redisson.getExecutorService("test");
    e.execute(new RunnableTask());
    Future<?> f1 = e.submit(new RunnableTask2());
    Future<String> f2 = e.submit(new CallableTask());
    e.shutdown();
    f1.get();
    assertThat(f2.get()).isEqualTo(CallableTask.RESULT);
    assertThat(e.isShutdown()).isTrue();
    e.submit(new CallableTask());
    assertThat(redisson.getKeys().count()).isZero();
})
nova chamada: assertThrows(RejectedExecutionException.class, () -> {
    RExecutorService e = redisson.getExecutorService("test");
    e.execute(new RunnableTask());
    Future<?> f1 = e.submit(new RunnableTask2());
    Future<String> f2 = e.submit(new CallableTask());
    e.shutdown();
    f1.get();
    assertThat(f2.get()).isEqualTo(CallableTask.RESULT);
    assertThat(e.isShutdown()).isTrue();
    e.submit(new CallableTask());
    assertThat(redisson.getKeys().count()).isZero();
}, "Era esperado que a exceção  RejectedExecutionException.class fosse lançada, mas não foi")
chamada antiga: Assertions.assertThrows(RejectedExecutionException.class, () -> {
    RExecutorService e = redisson.getExecutorService("test");
    e.shutdown();
    assertThat(e.isShutdown()).isTrue();
    e.submit(new RunnableTask2());
    assertThat(redisson.getKeys().count()).isZero();
})
nova chamada: assertThrows(RejectedExecutionException.class, () -> {
    RExecutorService e = redisson.getExecutorService("test");
    e.shutdown();
    assertThat(e.isShutdown()).isTrue();
    e.submit(new RunnableTask2());
    assertThat(redisson.getKeys().count()).isZero();
}, "Era esperado que a exceção  RejectedExecutionException.class fosse lançada, mas não foi")
chamada antiga: Assertions.assertThrows(IllegalArgumentException.class, () -> {
    redisson.getExecutorService("test").submit(new Runnable() {

        @Override
        public void run() {
        }
    });
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    redisson.getExecutorService("test").submit(new Runnable() {

        @Override
        public void run() {
        }
    });
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: Assertions.assertThrows(IllegalArgumentException.class, () -> {
    redisson.getExecutorService("test").submit(new Callable<Object>() {

        @Override
        public Object call() throws Exception {
            return null;
        }
    });
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    redisson.getExecutorService("test").submit(new Callable<Object>() {

        @Override
        public Object call() throws Exception {
            return null;
        }
    });
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: Assertions.assertThrows(IllegalArgumentException.class, () -> {
    redisson.getExecutorService("test").submit(new TaskCallableClass());
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    redisson.getExecutorService("test").submit(new TaskCallableClass());
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: Assertions.assertThrows(IllegalArgumentException.class, () -> {
    redisson.getExecutorService("test").submit(new TaskRunnableClass());
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    redisson.getExecutorService("test").submit(new TaskRunnableClass());
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: Assertions.assertThrows(IllegalArgumentException.class, () -> {
    redisson.getExecutorService("test").execute(new Runnable() {

        @Override
        public void run() {
        }
    });
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    redisson.getExecutorService("test").execute(new Runnable() {

        @Override
        public void run() {
        }
    });
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: Assertions.assertThrows(IllegalStateException.class, () -> {
    AnnotationConfigApplicationContext context = contexts.get(contextClass);
    SampleBean bean = context.getBean(SampleBean.class);
    bean.read("object2");
})
nova chamada: assertThrows(IllegalStateException.class, () -> {
    AnnotationConfigApplicationContext context = contexts.get(contextClass);
    SampleBean bean = context.getBean(SampleBean.class);
    bean.read("object2");
}, "Era esperado que a exceção  IllegalStateException.class fosse lançada, mas não foi")
chamada antiga: Assertions.assertThrows(IllegalStateException.class, () -> {
    bean.read("object1");
})
nova chamada: assertThrows(IllegalStateException.class, () -> {
    bean.read("object1");
}, "Era esperado que a exceção  IllegalStateException.class fosse lançada, mas não foi")
chamada antiga: Assertions.assertThrows(IllegalStateException.class, () -> {
    bean.read("object1");
})
nova chamada: assertThrows(IllegalStateException.class, () -> {
    bean.read("object1");
}, "Era esperado que a exceção  IllegalStateException.class fosse lançada, mas não foi")
chamada antiga: Assertions.assertEquals(1, listener.getSessionCreatedEvents())
nova chamada: assertEquals(1, listener.getSessionCreatedEvents(), "Era esperado valores iguais, mas  1 é diferente de " + result597 + " <listener.getSessionCreatedEvents()>")
chamada antiga: Assertions.assertEquals(0, listener.getSessionExpiredEvents())
nova chamada: assertEquals(0, listener.getSessionExpiredEvents(), "Era esperado valores iguais, mas  0 é diferente de " + result598 + " <listener.getSessionExpiredEvents()>")
chamada antiga: Assertions.assertEquals(1, listener.getSessionCreatedEvents())
nova chamada: assertEquals(1, listener.getSessionCreatedEvents(), "Era esperado valores iguais, mas  1 é diferente de " + result599 + " <listener.getSessionCreatedEvents()>")
chamada antiga: Assertions.assertEquals(1, listener.getSessionExpiredEvents())
nova chamada: assertEquals(1, listener.getSessionExpiredEvents(), "Era esperado valores iguais, mas  1 é diferente de " + result600 + " <listener.getSessionExpiredEvents()>")
chamada antiga: Assertions.assertEquals(2, listener.getSessionCreatedEvents())
nova chamada: assertEquals(2, listener.getSessionCreatedEvents(), "Era esperado valores iguais, mas  2 é diferente de " + result601 + " <listener.getSessionCreatedEvents()>")
chamada antiga: Assertions.assertEquals(1, listener.getSessionExpiredEvents())
nova chamada: assertEquals(1, listener.getSessionExpiredEvents(), "Era esperado valores iguais, mas  1 é diferente de " + result602 + " <listener.getSessionExpiredEvents()>")
chamada antiga: Assertions.assertEquals(1, listener.getSessionExpiredEvents())
nova chamada: assertEquals(1, listener.getSessionExpiredEvents(), "Era esperado valores iguais, mas  1 é diferente de " + result603 + " <listener.getSessionExpiredEvents()>")
chamada antiga: Assertions.assertEquals(2, listener.getSessionExpiredEvents())
nova chamada: assertEquals(2, listener.getSessionExpiredEvents(), "Era esperado valores iguais, mas  2 é diferente de " + result604 + " <listener.getSessionExpiredEvents()>")
chamada antiga: Assertions.assertEquals(1, listener.getSessionCreatedEvents())
nova chamada: assertEquals(1, listener.getSessionCreatedEvents(), "Era esperado valores iguais, mas  1 é diferente de " + result605 + " <listener.getSessionCreatedEvents()>")
chamada antiga: Assertions.assertEquals(0, listener.getSessionDeletedEvents())
nova chamada: assertEquals(0, listener.getSessionDeletedEvents(), "Era esperado valores iguais, mas  0 é diferente de " + result606 + " <listener.getSessionDeletedEvents()>")
chamada antiga: Assertions.assertEquals(1, listener.getSessionCreatedEvents())
nova chamada: assertEquals(1, listener.getSessionCreatedEvents(), "Era esperado valores iguais, mas  1 é diferente de " + result607 + " <listener.getSessionCreatedEvents()>")
chamada antiga: Assertions.assertEquals(1, listener.getSessionDeletedEvents())
nova chamada: assertEquals(1, listener.getSessionDeletedEvents(), "Era esperado valores iguais, mas  1 é diferente de " + result608 + " <listener.getSessionDeletedEvents()>")
chamada antiga: Assertions.assertEquals("OK", response)
nova chamada: assertEquals("OK", response, "Era esperado valores iguais, mas  'OK' é diferente de " + " response")
chamada antiga: Assertions.assertEquals(value, response)
nova chamada: assertEquals(value, response, "Era esperado valores iguais, mas  value é diferente de " + " response")
chamada antiga: Assertions.assertEquals(value, response)
nova chamada: assertEquals(value, response, "Era esperado valores iguais, mas  value é diferente de " + " response")
chamada antiga: Assertions.assertEquals("OK", response)
nova chamada: assertEquals("OK", response, "Era esperado valores iguais, mas  'OK' é diferente de " + " response")
chamada antiga: Assertions.assertEquals("OK", response)
nova chamada: assertEquals("OK", response, "Era esperado valores iguais, mas  'OK' é diferente de " + " response")
chamada antiga: Assertions.assertTimeout(Duration.ofSeconds(3), () -> {
    RBlockingDeque<Integer> queue = redisson.getPriorityBlockingDeque("queue:pollany");
    queue.pollLastAsync(500, TimeUnit.MILLISECONDS);
    queue.pollFirstAsync(10, TimeUnit.MICROSECONDS);
})
nova chamada: assertTimeout(Duration.ofSeconds(3), () -> {
    RBlockingDeque<Integer> queue = redisson.getPriorityBlockingDeque("queue:pollany");
    queue.pollLastAsync(500, TimeUnit.MILLISECONDS);
    queue.pollFirstAsync(10, TimeUnit.MICROSECONDS);
}, "Era esperado que o tempo de execução " + result609 + " <Duration.ofSeconds(3)> não fosse ultrapassado, mas foi")
chamada antiga: Assertions.assertThrows(MapReduceTimeoutException.class, () -> {
    RMap<String, String> map = getMap(mapClass);
    for (int i = 0; i < 100000; i++) {
        map.put("" + i, "ab cd fjks");
    }
    RMapReduce<String, String, String, Integer> mapReduce = map.<String, Integer>mapReduce().mapper(new WordMapper()).reducer(new WordReducer()).timeout(1, TimeUnit.SECONDS);
    mapReduce.execute();
})
nova chamada: assertThrows(MapReduceTimeoutException.class, () -> {
    RMap<String, String> map = getMap(mapClass);
    for (int i = 0; i < 100000; i++) {
        map.put("" + i, "ab cd fjks");
    }
    RMapReduce<String, String, String, Integer> mapReduce = map.<String, Integer>mapReduce().mapper(new WordMapper()).reducer(new WordReducer()).timeout(1, TimeUnit.SECONDS);
    mapReduce.execute();
}, "Era esperado que a exceção  MapReduceTimeoutException.class fosse lançada, mas não foi")
chamada antiga: Assertions.assertEquals("test2", sync(redisson.getKeys().randomKey()))
nova chamada: assertEquals("test2", sync(redisson.getKeys().randomKey()), "Era esperado valores iguais, mas  'test2' é diferente de " + result610 + " <sync(redisson.getKeys().randomKey())>")
chamada antiga: Assertions.assertNull(sync(redisson.getKeys().randomKey()))
nova chamada: assertNull(sync(redisson.getKeys().randomKey()), "Era esperado nulo, mas " + result611 + " <sync(redisson.getKeys().randomKey())> não é nulo")
chamada antiga: Assertions.assertEquals(2, sync(redisson.getKeys().deleteByPattern("test?")).intValue())
nova chamada: assertEquals(2, sync(redisson.getKeys().deleteByPattern("test?")).intValue(), "Era esperado valores iguais, mas  2 é diferente de " + result612 + " <sync(redisson.getKeys().deleteByPattern('test?')).intValue()>")
chamada antiga: Assertions.assertEquals(2, sync(redisson.getKeys().delete("test", "map2")).intValue())
nova chamada: assertEquals(2, sync(redisson.getKeys().delete("test", "map2")).intValue(), "Era esperado valores iguais, mas  2 é diferente de " + result613 + " <sync(redisson.getKeys().delete('test', 'map2')).intValue()>")
chamada antiga: Assertions.assertEquals(0, sync(redisson.getKeys().delete("test", "map2")).intValue())
nova chamada: assertEquals(0, sync(redisson.getKeys().delete("test", "map2")).intValue(), "Era esperado valores iguais, mas  0 é diferente de " + result614 + " <sync(redisson.getKeys().delete('test', 'map2')).intValue()>")
chamada antiga: Assertions.assertEquals(1, l)
nova chamada: assertEquals(1, l, "Era esperado valores iguais, mas  1 é diferente de " + " l")
chamada antiga: Assertions.assertEquals(2, l)
nova chamada: assertEquals(2, l, "Era esperado valores iguais, mas  2 é diferente de " + " l")
chamada antiga: Assertions.assertEquals(2, l)
nova chamada: assertEquals(2, l, "Era esperado valores iguais, mas  2 é diferente de " + " l")
chamada antiga: Assertions.assertNull(set.pollLast())
nova chamada: assertNull(set.pollLast(), "Era esperado nulo, mas " + result615 + " <set.pollLast()> não é nulo")
chamada antiga: Assertions.assertEquals("c", set.pollLast())
nova chamada: assertEquals("c", set.pollLast(), "Era esperado valores iguais, mas  'c' é diferente de " + result616 + " <set.pollLast()>")
chamada antiga: Assertions.assertNull(set.pollFirst())
nova chamada: assertNull(set.pollFirst(), "Era esperado nulo, mas " + result617 + " <set.pollFirst()> não é nulo")
chamada antiga: Assertions.assertEquals("a", set.pollFirst())
nova chamada: assertEquals("a", set.pollFirst(), "Era esperado valores iguais, mas  'a' é diferente de " + result618 + " <set.pollFirst()>")
chamada antiga: Assertions.assertEquals("a", set.first())
nova chamada: assertEquals("a", set.first(), "Era esperado valores iguais, mas  'a' é diferente de " + result619 + " <set.first()>")
chamada antiga: Assertions.assertEquals("d", set.last())
nova chamada: assertEquals("d", set.last(), "Era esperado valores iguais, mas  'd' é diferente de " + result620 + " <set.last()>")
chamada antiga: Assertions.assertEquals(2, set.removeRangeByScore(0.1, false, 0.3, true))
nova chamada: assertEquals(2, set.removeRangeByScore(0.1, false, 0.3, true), "Era esperado valores iguais, mas  2 é diferente de " + result621 + " <set.removeRangeByScore(0.1, false, 0.3, true)>")
chamada antiga: Assertions.assertEquals(3, set.removeRangeByScore(Double.NEGATIVE_INFINITY, false, 0.3, true))
nova chamada: assertEquals(3, set.removeRangeByScore(Double.NEGATIVE_INFINITY, false, 0.3, true), "Era esperado valores iguais, mas  3 é diferente de " + result622 + " <set.removeRangeByScore(Double.NEGATIVE_INFINITY, false, 0.3, true)>")
chamada antiga: Assertions.assertEquals(3, set.removeRangeByScore(0.4, false, Double.POSITIVE_INFINITY, true))
nova chamada: assertEquals(3, set.removeRangeByScore(0.4, false, Double.POSITIVE_INFINITY, true), "Era esperado valores iguais, mas  3 é diferente de " + result623 + " <set.removeRangeByScore(0.4, false, Double.POSITIVE_INFINITY, true)>")
chamada antiga: Assertions.assertEquals(2, set.removeRangeByRank(0, 1))
nova chamada: assertEquals(2, set.removeRangeByRank(0, 1), "Era esperado valores iguais, mas  2 é diferente de " + result624 + " <set.removeRangeByRank(0, 1)>")
chamada antiga: Assertions.assertFalse(future2.get())
nova chamada: assertFalse(future2.get(), "Era esperado falso, mas " + result625 + " <future2.get()> é verdadeiro ")
chamada antiga: Assertions.assertEquals(new Integer(0), future.get())
nova chamada: assertEquals(new Integer(0), future.get(), "Era esperado valores iguais, mas  new Integer(0) é diferente de " + result626 + " <future.get()>")
chamada antiga: Assertions.assertEquals(new Integer(1), future2.get())
nova chamada: assertEquals(new Integer(1), future2.get(), "Era esperado valores iguais, mas  new Integer(1) é diferente de " + result627 + " <future2.get()>")
chamada antiga: Assertions.assertEquals(new Integer(0), future3.get())
nova chamada: assertEquals(new Integer(0), future3.get(), "Era esperado valores iguais, mas  new Integer(0) é diferente de " + result628 + " <future3.get()>")
chamada antiga: Assertions.assertEquals(new Integer(0), future.get())
nova chamada: assertEquals(new Integer(0), future.get(), "Era esperado valores iguais, mas  new Integer(0) é diferente de " + result629 + " <future.get()>")
chamada antiga: Assertions.assertEquals(new Integer(0), future2.get())
nova chamada: assertEquals(new Integer(0), future2.get(), "Era esperado valores iguais, mas  new Integer(0) é diferente de " + result630 + " <future2.get()>")
chamada antiga: Assertions.assertEquals(new Integer(2), future3.get())
nova chamada: assertEquals(new Integer(2), future3.get(), "Era esperado valores iguais, mas  new Integer(2) é diferente de " + result631 + " <future3.get()>")
chamada antiga: Assertions.assertFalse(set.contains(1))
nova chamada: assertFalse(set.contains(1), "Era esperado falso, mas " + result632 + " <set.contains(1)> é verdadeiro ")
chamada antiga: Assertions.assertFalse(set.removeAsync(1).get())
nova chamada: assertFalse(set.removeAsync(1).get(), "Era esperado falso, mas " + result633 + " <set.removeAsync(1).get()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(set.contains(3))
nova chamada: assertFalse(set.contains(3), "Era esperado falso, mas " + result634 + " <set.contains(3)> é verdadeiro ")
chamada antiga: Assertions.assertEquals("1", iter.next())
nova chamada: assertEquals("1", iter.next(), "Era esperado valores iguais, mas  '1' é diferente de " + result635 + " <iter.next()>")
chamada antiga: Assertions.assertEquals("4", iter.next())
nova chamada: assertEquals("4", iter.next(), "Era esperado valores iguais, mas  '4' é diferente de " + result636 + " <iter.next()>")
chamada antiga: Assertions.assertFalse(iter.hasNext())
nova chamada: assertFalse(iter.hasNext(), "Era esperado falso, mas " + result637 + " <iter.hasNext()> é verdadeiro ")
chamada antiga: Assertions.assertEquals(4, iteration)
nova chamada: assertEquals(4, iteration, "Era esperado valores iguais, mas  4 é diferente de " + " iteration")
chamada antiga: Assertions.assertEquals(0, set.size())
nova chamada: assertEquals(0, set.size(), "Era esperado valores iguais, mas  0 é diferente de " + result638 + " <set.size()>")
chamada antiga: Assertions.assertEquals(0, setCopy.size())
nova chamada: assertEquals(0, setCopy.size(), "Era esperado valores iguais, mas  0 é diferente de " + result639 + " <setCopy.size()>")
chamada antiga: Assertions.assertEquals(2, set.size())
nova chamada: assertEquals(2, set.size(), "Era esperado valores iguais, mas  2 é diferente de " + result640 + " <set.size()>")
chamada antiga: Assertions.assertEquals(1, set.size())
nova chamada: assertEquals(1, set.size(), "Era esperado valores iguais, mas  1 é diferente de " + result641 + " <set.size()>")
chamada antiga: Assertions.assertFalse(set.remove(0))
nova chamada: assertFalse(set.remove(0), "Era esperado falso, mas " + result642 + " <set.remove(0)> é verdadeiro ")
chamada antiga: Assertions.assertFalse(set.containsAll(Arrays.asList(30, 711, 11)))
nova chamada: assertFalse(set.containsAll(Arrays.asList(30, 711, 11)), "Era esperado falso, mas " + result643 + " <set.containsAll(Arrays.asList(30, 711, 11))> é verdadeiro ")
chamada antiga: Assertions.assertFalse(set.contains(new TestObject("1", "9")))
nova chamada: assertFalse(set.contains(new TestObject("1", "9")), "Era esperado falso, mas " + result644 + " <set.contains(new TestObject('1', '9'))> é verdadeiro ")
chamada antiga: Assertions.assertFalse(set.add(0, new TestObject("1", "2")))
nova chamada: assertFalse(set.add(0, new TestObject("1", "2")), "Era esperado falso, mas " + result645 + " <set.add(0, new TestObject('1', '2'))> é verdadeiro ")
chamada antiga: Assertions.assertEquals(4, set.size())
nova chamada: assertEquals(4, set.size(), "Era esperado valores iguais, mas  4 é diferente de " + result646 + " <set.size()>")
chamada antiga: Assertions.assertEquals(5, set.size())
nova chamada: assertEquals(5, set.size(), "Era esperado valores iguais, mas  5 é diferente de " + result647 + " <set.size()>")
chamada antiga: Assertions.assertArrayEquals(new String[] { "c", "d" }, a)
nova chamada: assertArrayEquals(new String[] { "c", "d" }, a, "Era esperado arrays iguais, mas  new String[] { 'c', 'd' } é diferente de " + " a")
chamada antiga: Assertions.assertArrayEquals(new String[] { "b", "c" }, a)
nova chamada: assertArrayEquals(new String[] { "b", "c" }, a, "Era esperado arrays iguais, mas  new String[] { 'b', 'c' } é diferente de " + " a")
chamada antiga: Assertions.assertArrayEquals(new String[] { "c", "d" }, a)
nova chamada: assertArrayEquals(new String[] { "c", "d" }, a, "Era esperado arrays iguais, mas  new String[] { 'c', 'd' } é diferente de " + " a")
chamada antiga: Assertions.assertEquals(2, r.size())
nova chamada: assertEquals(2, r.size(), "Era esperado valores iguais, mas  2 é diferente de " + result648 + " <r.size()>")
chamada antiga: Assertions.assertEquals("c", a[0].getValue())
nova chamada: assertEquals("c", a[0].getValue(), "Era esperado valores iguais, mas  'c' é diferente de " + result649 + " <a[0].getValue()>")
chamada antiga: Assertions.assertEquals("d", a[1].getValue())
nova chamada: assertEquals("d", a[1].getValue(), "Era esperado valores iguais, mas  'd' é diferente de " + result650 + " <a[1].getValue()>")
chamada antiga: Assertions.assertEquals(2, r.size())
nova chamada: assertEquals(2, r.size(), "Era esperado valores iguais, mas  2 é diferente de " + result651 + " <r.size()>")
chamada antiga: Assertions.assertEquals("c", a[0].getValue())
nova chamada: assertEquals("c", a[0].getValue(), "Era esperado valores iguais, mas  'c' é diferente de " + result652 + " <a[0].getValue()>")
chamada antiga: Assertions.assertEquals("b", a[1].getValue())
nova chamada: assertEquals("b", a[1].getValue(), "Era esperado valores iguais, mas  'b' é diferente de " + result653 + " <a[1].getValue()>")
chamada antiga: Assertions.assertEquals("b", a[0].getValue())
nova chamada: assertEquals("b", a[0].getValue(), "Era esperado valores iguais, mas  'b' é diferente de " + result654 + " <a[0].getValue()>")
chamada antiga: Assertions.assertEquals("c", a[1].getValue())
nova chamada: assertEquals("c", a[1].getValue(), "Era esperado valores iguais, mas  'c' é diferente de " + result655 + " <a[1].getValue()>")
chamada antiga: Assertions.assertEquals("c", a[0].getValue())
nova chamada: assertEquals("c", a[0].getValue(), "Era esperado valores iguais, mas  'c' é diferente de " + result656 + " <a[0].getValue()>")
chamada antiga: Assertions.assertEquals("d", a[1].getValue())
nova chamada: assertEquals("d", a[1].getValue(), "Era esperado valores iguais, mas  'd' é diferente de " + result657 + " <a[1].getValue()>")
chamada antiga: Assertions.assertArrayEquals(new Double[] { 112.3d, null, null }, res.toArray())
nova chamada: assertArrayEquals(new Double[] { 112.3d, null, null }, res.toArray(), "Era esperado arrays iguais, mas  new Double[] { 112.3d, null, null } é diferente de " + result658 + " <res.toArray()>")
chamada antiga: Assertions.assertArrayEquals(new Integer[] { 2, 0, 1 }, res.toArray())
nova chamada: assertArrayEquals(new Integer[] { 2, 0, 1 }, res.toArray(), "Era esperado arrays iguais, mas  new Integer[] { 2, 0, 1 } é diferente de " + result659 + " <res.toArray()>")
chamada antiga: Assertions.assertEquals(3, l)
nova chamada: assertEquals(3, l, "Era esperado valores iguais, mas  3 é diferente de " + " l")
chamada antiga: Assertions.assertTrue(System.currentTimeMillis() - s > 9000)
nova chamada: assertTrue(System.currentTimeMillis() - s > 9000, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertEquals((Integer) 1, sync(queue1.poll(2, TimeUnit.SECONDS)))
nova chamada: assertEquals((Integer) 1, sync(queue1.poll(2, TimeUnit.SECONDS)), "Era esperado valores iguais, mas  (Integer) 1 é diferente de " + result660 + " <sync(queue1.poll(2, TimeUnit.SECONDS))>")
chamada antiga: Assertions.assertNull(sync(queue1.poll(5, TimeUnit.SECONDS)))
nova chamada: assertNull(sync(queue1.poll(5, TimeUnit.SECONDS)), "Era esperado nulo, mas " + result661 + " <sync(queue1.poll(5, TimeUnit.SECONDS))> não é nulo")
chamada antiga: Assertions.assertTrue(System.currentTimeMillis() - s > 5000)
nova chamada: assertTrue(System.currentTimeMillis() - s > 5000, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertEquals((Integer) 1, sync(queue1.poll(10, TimeUnit.SECONDS)))
nova chamada: assertEquals((Integer) 1, sync(queue1.poll(10, TimeUnit.SECONDS)), "Era esperado valores iguais, mas  (Integer) 1 é diferente de " + result662 + " <sync(queue1.poll(10, TimeUnit.SECONDS))>")
chamada antiga: Assertions.assertEquals(100, sync(queue.size()).intValue())
nova chamada: assertEquals(100, sync(queue.size()).intValue(), "Era esperado valores iguais, mas  100 é diferente de " + result663 + " <sync(queue.size()).intValue()>")
chamada antiga: Assertions.assertEquals(10, count)
nova chamada: assertEquals(10, count, "Era esperado valores iguais, mas  10 é diferente de " + " count")
chamada antiga: Assertions.assertEquals(10, batch.size())
nova chamada: assertEquals(10, batch.size(), "Era esperado valores iguais, mas  10 é diferente de " + result664 + " <batch.size()>")
chamada antiga: Assertions.assertEquals(90, sync(queue.size()).intValue())
nova chamada: assertEquals(90, sync(queue.size()).intValue(), "Era esperado valores iguais, mas  90 é diferente de " + result665 + " <sync(queue.size()).intValue()>")
chamada antiga: Assertions.assertEquals(0, sync(queue.size()).intValue())
nova chamada: assertEquals(0, sync(queue.size()).intValue(), "Era esperado valores iguais, mas  0 é diferente de " + result666 + " <sync(queue.size()).intValue()>")
chamada antiga: Assertions.assertEquals(0, sync(queue1.size()).intValue())
nova chamada: assertEquals(0, sync(queue1.size()).intValue(), "Era esperado valores iguais, mas  0 é diferente de " + result667 + " <sync(queue1.size()).intValue()>")
chamada antiga: Assertions.assertEquals(1, sync(queue1.size()).intValue())
nova chamada: assertEquals(1, sync(queue1.size()).intValue(), "Era esperado valores iguais, mas  1 é diferente de " + result668 + " <sync(queue1.size()).intValue()>")
chamada antiga: Assertions.assertEquals(sb.getLng(), set.iterator().next().getLng())
nova chamada: assertEquals(sb.getLng(), set.iterator().next().getLng(), "Era esperado valores iguais, mas " + result669 + " <sb.getLng()> é diferente de " + result670 + " <set.iterator().next().getLng()>")
chamada antiga: Assertions.assertFalse(set.contains("123"))
nova chamada: assertFalse(set.contains("123"), "Era esperado falso, mas " + result671 + " <set.contains('123')> é verdadeiro ")
chamada antiga: Assertions.assertFalse(set.contains("4341"))
nova chamada: assertFalse(set.contains("4341"), "Era esperado falso, mas " + result672 + " <set.contains('4341')> é verdadeiro ")
chamada antiga: Assertions.assertTrue(set.remove(1))
nova chamada: assertTrue(set.remove(1), "Era esperado verdadeiro, mas " + result673 + " <set.remove(1)> é falso")
chamada antiga: Assertions.assertFalse(set.contains(1))
nova chamada: assertFalse(set.contains(1), "Era esperado falso, mas " + result674 + " <set.contains(1)> é verdadeiro ")
chamada antiga: Assertions.assertFalse(set.remove(1))
nova chamada: assertFalse(set.remove(1), "Era esperado falso, mas " + result675 + " <set.remove(1)> é verdadeiro ")
chamada antiga: Assertions.assertTrue(set.remove(3))
nova chamada: assertTrue(set.remove(3), "Era esperado verdadeiro, mas " + result676 + " <set.remove(3)> é falso")
chamada antiga: Assertions.assertFalse(set.contains(3))
nova chamada: assertFalse(set.contains(3), "Era esperado falso, mas " + result677 + " <set.contains(3)> é verdadeiro ")
chamada antiga: Assertions.assertEquals(1, set.size())
nova chamada: assertEquals(1, set.size(), "Era esperado valores iguais, mas  1 é diferente de " + result678 + " <set.size()>")
chamada antiga: Assertions.assertEquals(2, iteration)
nova chamada: assertEquals(2, iteration, "Era esperado valores iguais, mas  2 é diferente de " + " iteration")
chamada antiga: Assertions.assertFalse(set.contains("4"))
nova chamada: assertFalse(set.contains("4"), "Era esperado falso, mas " + result679 + " <set.contains('4')> é verdadeiro ")
chamada antiga: Assertions.assertFalse(set.contains("5"))
nova chamada: assertFalse(set.contains("5"), "Era esperado falso, mas " + result680 + " <set.contains('5')> é verdadeiro ")
chamada antiga: Assertions.assertTrue(set.retainAll(Arrays.asList(1, 2)))
nova chamada: assertTrue(set.retainAll(Arrays.asList(1, 2)), "Era esperado verdadeiro, mas " + result681 + " <set.retainAll(Arrays.asList(1, 2))> é falso")
chamada antiga: Assertions.assertEquals(2, set.size())
nova chamada: assertEquals(2, set.size(), "Era esperado valores iguais, mas  2 é diferente de " + result682 + " <set.size()>")
chamada antiga: Assertions.assertEquals(10000, cnt)
nova chamada: assertEquals(10000, cnt, "Era esperado valores iguais, mas  10000 é diferente de " + " cnt")
chamada antiga: Assertions.assertEquals(0, set.size())
nova chamada: assertEquals(0, set.size(), "Era esperado valores iguais, mas  0 é diferente de " + result683 + " <set.size()>")
chamada antiga: Assertions.assertTrue(set.containsAll(Collections.emptyList()))
nova chamada: assertTrue(set.containsAll(Collections.emptyList()), "Era esperado verdadeiro, mas " + result684 + " <set.containsAll(Collections.emptyList())> é falso")
chamada antiga: Assertions.assertTrue(set.containsAll(Arrays.asList(30, 11)))
nova chamada: assertTrue(set.containsAll(Arrays.asList(30, 11)), "Era esperado verdadeiro, mas " + result685 + " <set.containsAll(Arrays.asList(30, 11))> é falso")
chamada antiga: Assertions.assertFalse(set.containsAll(Arrays.asList(30, 711, 11)))
nova chamada: assertFalse(set.containsAll(Arrays.asList(30, 711, 11)), "Era esperado falso, mas " + result686 + " <set.containsAll(Arrays.asList(30, 711, 11))> é verdadeiro ")
chamada antiga: Assertions.assertFalse(set.contains(new TestObject("2", "3")))
nova chamada: assertFalse(set.contains(new TestObject("2", "3")), "Era esperado falso, mas " + result687 + " <set.contains(new TestObject('2', '3'))> é verdadeiro ")
chamada antiga: Assertions.assertTrue(set.contains(new TestObject("1", "2")))
nova chamada: assertTrue(set.contains(new TestObject("1", "2")), "Era esperado verdadeiro, mas " + result688 + " <set.contains(new TestObject('1', '2'))> é falso")
chamada antiga: Assertions.assertFalse(set.contains(new TestObject("1", "9")))
nova chamada: assertFalse(set.contains(new TestObject("1", "9")), "Era esperado falso, mas " + result689 + " <set.contains(new TestObject('1', '9'))> é verdadeiro ")
chamada antiga: Assertions.assertEquals(4, set.size())
nova chamada: assertEquals(4, set.size(), "Era esperado valores iguais, mas  4 é diferente de " + result690 + " <set.size()>")
chamada antiga: Assertions.assertEquals(5, set.size())
nova chamada: assertEquals(5, set.size(), "Era esperado valores iguais, mas  5 é diferente de " + result691 + " <set.size()>")
chamada antiga: Assertions.assertTrue(set.retainAll(Collections.<Integer>emptyList()))
nova chamada: assertTrue(set.retainAll(Collections.<Integer>emptyList()), "Era esperado verdadeiro, mas " + result692 + " <set.retainAll(Collections.<Integer>emptyList())> é falso")
chamada antiga: Assertions.assertEquals(0, set.size())
nova chamada: assertEquals(0, set.size(), "Era esperado valores iguais, mas  0 é diferente de " + result693 + " <set.size()>")
chamada antiga: Assertions.assertFalse(set.retainAll(Arrays.asList(1, 2)))
nova chamada: assertFalse(set.retainAll(Arrays.asList(1, 2)), "Era esperado falso, mas " + result694 + " <set.retainAll(Arrays.asList(1, 2))> é verdadeiro ")
chamada antiga: Assertions.assertEquals(0, cache.size())
nova chamada: assertEquals(0, cache.size(), "Era esperado valores iguais, mas  0 é diferente de " + result695 + " <cache.size()>")
chamada antiga: Assertions.assertEquals(0, cache.size())
nova chamada: assertEquals(0, cache.size(), "Era esperado valores iguais, mas  0 é diferente de " + result696 + " <cache.size()>")
chamada antiga: Assertions.assertEquals(1, cache.size())
nova chamada: assertEquals(1, cache.size(), "Era esperado valores iguais, mas  1 é diferente de " + result697 + " <cache.size()>")
chamada antiga: Assertions.assertFalse(cache.contains("33"))
nova chamada: assertFalse(cache.contains("33"), "Era esperado falso, mas " + result698 + " <cache.contains('33')> é verdadeiro ")
chamada antiga: Assertions.assertTrue(cache.add("33", 5, TimeUnit.SECONDS))
nova chamada: assertTrue(cache.add("33", 5, TimeUnit.SECONDS), "Era esperado verdadeiro, mas " + result699 + " <cache.add('33', 5, TimeUnit.SECONDS)> é falso")
chamada antiga: Assertions.assertEquals(0, cache.size())
nova chamada: assertEquals(0, cache.size(), "Era esperado valores iguais, mas  0 é diferente de " + result700 + " <cache.size()>")
chamada antiga: Assertions.assertTrue(latch.trySetCount(1))
nova chamada: assertTrue(latch.trySetCount(1), "Era esperado verdadeiro, mas " + result701 + " <latch.trySetCount(1)> é falso")
chamada antiga: Assertions.assertTrue(executor.awaitTermination(10, TimeUnit.SECONDS))
nova chamada: assertTrue(executor.awaitTermination(10, TimeUnit.SECONDS), "Era esperado verdadeiro, mas " + result702 + " <executor.awaitTermination(10, TimeUnit.SECONDS)> é falso")
chamada antiga: Assertions.assertTrue(latch.trySetCount(1))
nova chamada: assertTrue(latch.trySetCount(1), "Era esperado verdadeiro, mas " + result703 + " <latch.trySetCount(1)> é falso")
chamada antiga: Assertions.assertTrue(executor.awaitTermination(10, TimeUnit.SECONDS))
nova chamada: assertTrue(executor.awaitTermination(10, TimeUnit.SECONDS), "Era esperado verdadeiro, mas " + result704 + " <executor.awaitTermination(10, TimeUnit.SECONDS)> é falso")
chamada antiga: Assertions.assertEquals(2, latch.getCount())
nova chamada: assertEquals(2, latch.getCount(), "Era esperado valores iguais, mas  2 é diferente de " + result705 + " <latch.getCount()>")
chamada antiga: Assertions.assertEquals(1, latch.getCount())
nova chamada: assertEquals(1, latch.getCount(), "Era esperado valores iguais, mas  1 é diferente de " + result706 + " <latch.getCount()>")
chamada antiga: Assertions.assertEquals(0, latch.getCount())
nova chamada: assertEquals(0, latch.getCount(), "Era esperado valores iguais, mas  0 é diferente de " + result707 + " <latch.getCount()>")
chamada antiga: Assertions.assertEquals(0, latch.getCount())
nova chamada: assertEquals(0, latch.getCount(), "Era esperado valores iguais, mas  0 é diferente de " + result708 + " <latch.getCount()>")
chamada antiga: Assertions.assertEquals(0, latch.getCount())
nova chamada: assertEquals(0, latch.getCount(), "Era esperado valores iguais, mas  0 é diferente de " + result709 + " <latch.getCount()>")
chamada antiga: Assertions.assertEquals(0, latch.getCount())
nova chamada: assertEquals(0, latch.getCount(), "Era esperado valores iguais, mas  0 é diferente de " + result710 + " <latch.getCount()>")
chamada antiga: Assertions.assertEquals(0, latch.getCount())
nova chamada: assertEquals(0, latch.getCount(), "Era esperado valores iguais, mas  0 é diferente de " + result711 + " <latch.getCount()>")
chamada antiga: Assertions.assertEquals(0, latch.getCount())
nova chamada: assertEquals(0, latch.getCount(), "Era esperado valores iguais, mas  0 é diferente de " + result712 + " <latch.getCount()>")
chamada antiga: Assertions.assertEquals(0, latch.getCount())
nova chamada: assertEquals(0, latch.getCount(), "Era esperado valores iguais, mas  0 é diferente de " + result713 + " <latch.getCount()>")
chamada antiga: Assertions.assertEquals(0, latch.getCount())
nova chamada: assertEquals(0, latch.getCount(), "Era esperado valores iguais, mas  0 é diferente de " + result714 + " <latch.getCount()>")
chamada antiga: Assertions.assertTrue(latch.delete())
nova chamada: assertTrue(latch.delete(), "Era esperado verdadeiro, mas " + result715 + " <latch.delete()> é falso")
chamada antiga: Assertions.assertFalse(latch.delete())
nova chamada: assertFalse(latch.delete(), "Era esperado falso, mas " + result716 + " <latch.delete()> é verdadeiro ")
chamada antiga: Assertions.assertEquals(0, setCopy.size())
nova chamada: assertEquals(0, setCopy.size(), "Era esperado valores iguais, mas  0 é diferente de " + result717 + " <setCopy.size()>")
chamada antiga: Assertions.assertEquals(112, (int) res)
nova chamada: assertEquals(112, (int) res, "Era esperado valores iguais, mas  112 é diferente de " + " (int) res")
chamada antiga: Assertions.assertEquals(112, (int) res)
nova chamada: assertEquals(112, (int) res, "Era esperado valores iguais, mas  112 é diferente de " + " (int) res")
chamada antiga: Assertions.assertTrue(new Double(112.3).compareTo(res2) == 0)
nova chamada: assertTrue(new Double(112.3).compareTo(res2) == 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(new Double(112.3).compareTo(res2) == 0)
nova chamada: assertTrue(new Double(112.3).compareTo(res2) == 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertEquals(expectedMap, filtered)
nova chamada: assertEquals(expectedMap, filtered, "Era esperado valores iguais, mas  expectedMap é diferente de " + " filtered")
chamada antiga: Assertions.assertEquals(expectedMap, filtered)
nova chamada: assertEquals(expectedMap, filtered, "Era esperado valores iguais, mas  expectedMap é diferente de " + " filtered")
chamada antiga: Assertions.assertEquals(2, sync(map.size()).intValue())
nova chamada: assertEquals(2, sync(map.size()).intValue(), "Era esperado valores iguais, mas  2 é diferente de " + result718 + " <sync(map.size()).intValue()>")
chamada antiga: Assertions.assertEquals(2, val.intValue())
nova chamada: assertEquals(2, val.intValue(), "Era esperado valores iguais, mas  2 é diferente de " + result719 + " <val.intValue()>")
chamada antiga: Assertions.assertEquals(4, val2.intValue())
nova chamada: assertEquals(4, val2.intValue(), "Era esperado valores iguais, mas  4 é diferente de " + result720 + " <val2.intValue()>")
chamada antiga: Assertions.assertEquals(2, sync(map.size()).intValue())
nova chamada: assertEquals(2, sync(map.size()).intValue(), "Era esperado valores iguais, mas  2 é diferente de " + result721 + " <sync(map.size()).intValue()>")
chamada antiga: Assertions.assertEquals(2L, val.longValue())
nova chamada: assertEquals(2L, val.longValue(), "Era esperado valores iguais, mas  2L é diferente de " + result722 + " <val.longValue()>")
chamada antiga: Assertions.assertEquals(4L, val2.longValue())
nova chamada: assertEquals(4L, val2.longValue(), "Era esperado valores iguais, mas  4L é diferente de " + result723 + " <val2.longValue()>")
chamada antiga: Assertions.assertEquals("33", val)
nova chamada: assertEquals("33", val, "Era esperado valores iguais, mas  '33' é diferente de " + " val")
chamada antiga: Assertions.assertEquals(1, sync(map.size()).intValue())
nova chamada: assertEquals(1, sync(map.size()).intValue(), "Era esperado valores iguais, mas  1 é diferente de " + result724 + " <sync(map.size()).intValue()>")
chamada antiga: Assertions.assertTrue(sync(map.containsValue(new SimpleValue("2"))))
nova chamada: assertTrue(sync(map.containsValue(new SimpleValue("2"))), "Era esperado verdadeiro, mas " + result725 + " <sync(map.containsValue(new SimpleValue('2')))> é falso")
chamada antiga: Assertions.assertFalse(sync(map.containsValue(new SimpleValue("441"))))
nova chamada: assertFalse(sync(map.containsValue(new SimpleValue("441"))), "Era esperado falso, mas " + result726 + " <sync(map.containsValue(new SimpleValue('441')))> é verdadeiro ")
chamada antiga: Assertions.assertFalse(sync(map.containsValue(new SimpleKey("5"))))
nova chamada: assertFalse(sync(map.containsValue(new SimpleKey("5"))), "Era esperado falso, mas " + result727 + " <sync(map.containsValue(new SimpleKey('5')))> é verdadeiro ")
chamada antiga: Assertions.assertTrue(sync(map.containsKey(new SimpleKey("33"))))
nova chamada: assertTrue(sync(map.containsKey(new SimpleKey("33"))), "Era esperado verdadeiro, mas " + result728 + " <sync(map.containsKey(new SimpleKey('33')))> é falso")
chamada antiga: Assertions.assertFalse(sync(map.containsKey(new SimpleKey("34"))))
nova chamada: assertFalse(sync(map.containsKey(new SimpleKey("34"))), "Era esperado falso, mas " + result729 + " <sync(map.containsKey(new SimpleKey('34')))> é verdadeiro ")
chamada antiga: Assertions.assertTrue(size)
nova chamada: assertTrue(size, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertNull(val1)
nova chamada: assertNull(val1, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: Assertions.assertEquals(0, sync(map.size()).intValue())
nova chamada: assertEquals(0, sync(map.size()).intValue(), "Era esperado valores iguais, mas  0 é diferente de " + result730 + " <sync(map.size()).intValue()>")
chamada antiga: Assertions.assertFalse(removed)
nova chamada: assertFalse(removed, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: Assertions.assertFalse(size2)
nova chamada: assertFalse(size2, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: Assertions.assertEquals("2", val1.getValue())
nova chamada: assertEquals("2", val1.getValue(), "Era esperado valores iguais, mas  '2' é diferente de " + result731 + " <val1.getValue()>")
chamada antiga: Assertions.assertFalse(res)
nova chamada: assertFalse(res, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: Assertions.assertEquals("2", val1.getValue())
nova chamada: assertEquals("2", val1.getValue(), "Era esperado valores iguais, mas  '2' é diferente de " + result732 + " <val1.getValue()>")
chamada antiga: Assertions.assertTrue(res)
nova chamada: assertTrue(res, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertFalse(res1)
nova chamada: assertFalse(res1, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: Assertions.assertEquals("3", val1.getValue())
nova chamada: assertEquals("3", val1.getValue(), "Era esperado valores iguais, mas  '3' é diferente de " + result733 + " <val1.getValue()>")
chamada antiga: Assertions.assertEquals("2", res.getValue())
nova chamada: assertEquals("2", res.getValue(), "Era esperado valores iguais, mas  '2' é diferente de " + result734 + " <res.getValue()>")
chamada antiga: Assertions.assertEquals("3", val1.getValue())
nova chamada: assertEquals("3", val1.getValue(), "Era esperado valores iguais, mas  '3' é diferente de " + result735 + " <val1.getValue()>")
chamada antiga: Assertions.assertEquals("44", val1.getValue())
nova chamada: assertEquals("44", val1.getValue(), "Era esperado valores iguais, mas  '44' é diferente de " + result736 + " <val1.getValue()>")
chamada antiga: Assertions.assertEquals("abc", val2.getValue())
nova chamada: assertEquals("abc", val2.getValue(), "Era esperado valores iguais, mas  'abc' é diferente de " + result737 + " <val2.getValue()>")
chamada antiga: Assertions.assertEquals("44", val1.getValue())
nova chamada: assertEquals("44", val1.getValue(), "Era esperado valores iguais, mas  '44' é diferente de " + result738 + " <val1.getValue()>")
chamada antiga: Assertions.assertEquals("6", val2.getValue())
nova chamada: assertEquals("6", val2.getValue(), "Era esperado valores iguais, mas  '6' é diferente de " + result739 + " <val2.getValue()>")
chamada antiga: Assertions.assertEquals(value, sync(map.putIfAbsent(key, new SimpleValue("3"))))
nova chamada: assertEquals(value, sync(map.putIfAbsent(key, new SimpleValue("3"))), "Era esperado valores iguais, mas  value é diferente de " + result740 + " <sync(map.putIfAbsent(key, new SimpleValue('3')))>")
chamada antiga: Assertions.assertEquals(value, sync(map.get(key)))
nova chamada: assertEquals(value, sync(map.get(key)), "Era esperado valores iguais, mas  value é diferente de " + result741 + " <sync(map.get(key))>")
chamada antiga: Assertions.assertNull(sync(map.putIfAbsent(key1, value1)))
nova chamada: assertNull(sync(map.putIfAbsent(key1, value1)), "Era esperado nulo, mas " + result742 + " <sync(map.putIfAbsent(key1, value1))> não é nulo")
chamada antiga: Assertions.assertEquals(value1, sync(map.get(key1)))
nova chamada: assertEquals(value1, sync(map.get(key1)), "Era esperado valores iguais, mas  value1 é diferente de " + result743 + " <sync(map.get(key1))>")
chamada antiga: Assertions.assertEquals(3, sync(map.size()).intValue())
nova chamada: assertEquals(3, sync(map.size()).intValue(), "Era esperado valores iguais, mas  3 é diferente de " + result744 + " <sync(map.size()).intValue()>")
chamada antiga: Assertions.assertEquals(3, sync(map.size()).intValue())
nova chamada: assertEquals(3, sync(map.size()).intValue(), "Era esperado valores iguais, mas  3 é diferente de " + result745 + " <sync(map.size()).intValue()>")
chamada antiga: Assertions.assertEquals(3, sync(map.size()).intValue())
nova chamada: assertEquals(3, sync(map.size()).intValue(), "Era esperado valores iguais, mas  3 é diferente de " + result746 + " <sync(map.size()).intValue()>")
chamada antiga: Assertions.assertEquals(4, sync(map.size()).intValue())
nova chamada: assertEquals(4, sync(map.size()).intValue(), "Era esperado valores iguais, mas  4 é diferente de " + result747 + " <sync(map.size()).intValue()>")
chamada antiga: Assertions.assertEquals(3, sync(map.size()).intValue())
nova chamada: assertEquals(3, sync(map.size()).intValue(), "Era esperado valores iguais, mas  3 é diferente de " + result748 + " <sync(map.size()).intValue()>")
chamada antiga: Assertions.assertEquals((Long) 3L, sync(map.fastRemove(1, 3, 7)))
nova chamada: assertEquals((Long) 3L, sync(map.fastRemove(1, 3, 7)), "Era esperado valores iguais, mas  (Long) 3L é diferente de " + result749 + " <sync(map.fastRemove(1, 3, 7))>")
chamada antiga: Assertions.assertEquals(1, sync(map.size()).intValue())
nova chamada: assertEquals(1, sync(map.size()).intValue(), "Era esperado valores iguais, mas  1 é diferente de " + result750 + " <sync(map.size()).intValue()>")
chamada antiga: Assertions.assertEquals(0, keys.size())
nova chamada: assertEquals(0, keys.size(), "Era esperado valores iguais, mas  0 é diferente de " + result751 + " <keys.size()>")
chamada antiga: Assertions.assertEquals(0, values.size())
nova chamada: assertEquals(0, values.size(), "Era esperado valores iguais, mas  0 é diferente de " + result752 + " <values.size()>")
chamada antiga: Assertions.assertTrue(sync(map.fastPut(1, 2)))
nova chamada: assertTrue(sync(map.fastPut(1, 2)), "Era esperado verdadeiro, mas " + result753 + " <sync(map.fastPut(1, 2))> é falso")
chamada antiga: Assertions.assertFalse(sync(map.fastPut(1, 3)))
nova chamada: assertFalse(sync(map.fastPut(1, 3)), "Era esperado falso, mas " + result754 + " <sync(map.fastPut(1, 3))> é verdadeiro ")
chamada antiga: Assertions.assertEquals(1, sync(map.size()).intValue())
nova chamada: assertEquals(1, sync(map.size()).intValue(), "Era esperado valores iguais, mas  1 é diferente de " + result755 + " <sync(map.size()).intValue()>")
chamada antiga: Assertions.assertEquals(0, sync(map.fastRemove()).intValue())
nova chamada: assertEquals(0, sync(map.fastRemove()).intValue(), "Era esperado valores iguais, mas  0 é diferente de " + result756 + " <sync(map.fastRemove()).intValue()>")
chamada antiga: Assertions.assertEquals(1, sync(map.size()).intValue())
nova chamada: assertEquals(1, sync(map.size()).intValue(), "Era esperado valores iguais, mas  1 é diferente de " + result757 + " <sync(map.size()).intValue()>")

chamada antiga: Assertions.fail()
nova chamada: fail("A execução falhou por uma causa deliberada")
chamada antiga: Assertions.assertThrows(RedisException.class, () -> {
    topic.addListener(Integer.class, (channel, msg) -> {
    });
})
nova chamada: assertThrows(RedisException.class, () -> {
    topic.addListener(Integer.class, (channel, msg) -> {
    });
}, "Era esperado que a exceção  RedisException.class fosse lançada, mas não foi")
chamada antiga: Assertions.assertEquals(1, i.get())
nova chamada: assertEquals(1, i.get(), "Era esperado valores iguais, mas  1 é diferente de " + result758 + " <i.get()>")
chamada antiga: Assertions.assertEquals(1, str.get())
nova chamada: assertEquals(1, str.get(), "Era esperado valores iguais, mas  1 é diferente de " + result759 + " <str.get()>")
chamada antiga: Assertions.assertTrue(messageRecieved.await(5, TimeUnit.SECONDS))
nova chamada: assertTrue(messageRecieved.await(5, TimeUnit.SECONDS), "Era esperado verdadeiro, mas " + result760 + " <messageRecieved.await(5, TimeUnit.SECONDS)> é falso")
chamada antiga: Assertions.assertTrue(messageRecieved.await(5, TimeUnit.SECONDS))
nova chamada: assertTrue(messageRecieved.await(5, TimeUnit.SECONDS), "Era esperado verdadeiro, mas " + result761 + " <messageRecieved.await(5, TimeUnit.SECONDS)> é falso")
chamada antiga: Assertions.assertEquals("topic.*", pattern)
nova chamada: assertEquals("topic.*", pattern, "Era esperado valores iguais, mas  'topic.*' é diferente de " + " pattern")
chamada antiga: Assertions.assertTrue(messageRecieved.await(5, TimeUnit.SECONDS))
nova chamada: assertTrue(messageRecieved.await(5, TimeUnit.SECONDS), "Era esperado verdadeiro, mas " + result762 + " <messageRecieved.await(5, TimeUnit.SECONDS)> é falso")
chamada antiga: Assertions.assertEquals("topic.*", pattern)
nova chamada: assertEquals("topic.*", pattern, "Era esperado valores iguais, mas  'topic.*' é diferente de " + " pattern")
chamada antiga: Assertions.assertTrue(executor.awaitTermination(threads * loops * 1000, TimeUnit.SECONDS))
nova chamada: assertTrue(executor.awaitTermination(threads * loops * 1000, TimeUnit.SECONDS), "Era esperado verdadeiro, mas " + result763 + " <executor.awaitTermination(threads * loops * 1000, TimeUnit.SECONDS)> é falso")
chamada antiga: Assertions.assertTrue(writeLock.tryLock(1, 10, TimeUnit.SECONDS))
nova chamada: assertTrue(writeLock.tryLock(1, 10, TimeUnit.SECONDS), "Era esperado verdadeiro, mas " + result764 + " <writeLock.tryLock(1, 10, TimeUnit.SECONDS)> é falso")
chamada antiga: Assertions.assertTrue(readLock.tryLock(1, 4, TimeUnit.SECONDS))
nova chamada: assertTrue(readLock.tryLock(1, 4, TimeUnit.SECONDS), "Era esperado verdadeiro, mas " + result765 + " <readLock.tryLock(1, 4, TimeUnit.SECONDS)> é falso")
chamada antiga: Assertions.assertTrue(readLock2.tryLock(1, 4, TimeUnit.SECONDS))
nova chamada: assertTrue(readLock2.tryLock(1, 4, TimeUnit.SECONDS), "Era esperado verdadeiro, mas " + result766 + " <readLock2.tryLock(1, 4, TimeUnit.SECONDS)> é falso")
chamada antiga: Assertions.assertTrue(writeLock.tryLock())
nova chamada: assertTrue(writeLock.tryLock(), "Era esperado verdadeiro, mas " + result767 + " <writeLock.tryLock()> é falso")
chamada antiga: Assertions.assertTrue(rLock.tryLock())
nova chamada: assertTrue(rLock.tryLock(), "Era esperado verdadeiro, mas " + result768 + " <rLock.tryLock()> é falso")
chamada antiga: Assertions.assertFalse(ref.get())
nova chamada: assertFalse(ref.get(), "Era esperado falso, mas " + result769 + " <ref.get()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(readWriteLock.writeLock().tryLock())
nova chamada: assertFalse(readWriteLock.writeLock().tryLock(), "Era esperado falso, mas " + result770 + " <readWriteLock.writeLock().tryLock()> é verdadeiro ")
chamada antiga: Assertions.assertTrue(readWriteLock.writeLock().tryLock())
nova chamada: assertTrue(readWriteLock.writeLock().tryLock(), "Era esperado verdadeiro, mas " + result771 + " <readWriteLock.writeLock().tryLock()> é falso")
chamada antiga: Assertions.assertTrue(lock.writeLock().tryLock())
nova chamada: assertTrue(lock.writeLock().tryLock(), "Era esperado verdadeiro, mas " + result772 + " <lock.writeLock().tryLock()> é falso")
chamada antiga: Assertions.assertTrue(lock.readLock().tryLock())
nova chamada: assertTrue(lock.readLock().tryLock(), "Era esperado verdadeiro, mas " + result773 + " <lock.readLock().tryLock()> é falso")
chamada antiga: Assertions.assertTrue(writeLock.isHeldByCurrentThread())
nova chamada: assertTrue(writeLock.isHeldByCurrentThread(), "Era esperado verdadeiro, mas " + result774 + " <writeLock.isHeldByCurrentThread()> é falso")
chamada antiga: Assertions.assertFalse(lock.writeLock().tryLock())
nova chamada: assertFalse(lock.writeLock().tryLock(), "Era esperado falso, mas " + result775 + " <lock.writeLock().tryLock()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(lock.writeLock().isLocked())
nova chamada: assertFalse(lock.writeLock().isLocked(), "Era esperado falso, mas " + result776 + " <lock.writeLock().isLocked()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(lock.writeLock().isHeldByCurrentThread())
nova chamada: assertFalse(lock.writeLock().isHeldByCurrentThread(), "Era esperado falso, mas " + result777 + " <lock.writeLock().isHeldByCurrentThread()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(writeLock.isHeldByCurrentThread())
nova chamada: assertFalse(writeLock.isHeldByCurrentThread(), "Era esperado falso, mas " + result778 + " <writeLock.isHeldByCurrentThread()> é verdadeiro ")
chamada antiga: Assertions.assertTrue(writeLock.isLocked())
nova chamada: assertTrue(writeLock.isLocked(), "Era esperado verdadeiro, mas " + result779 + " <writeLock.isLocked()> é falso")
chamada antiga: Assertions.assertFalse(lock.readLock().tryLock())
nova chamada: assertFalse(lock.readLock().tryLock(), "Era esperado falso, mas " + result780 + " <lock.readLock().tryLock()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(redisson.getReadWriteLock("lock").readLock().tryLock())
nova chamada: assertFalse(redisson.getReadWriteLock("lock").readLock().tryLock(), "Era esperado falso, mas " + result781 + " <redisson.getReadWriteLock('lock').readLock().tryLock()> é verdadeiro ")
chamada antiga: Assertions.assertTrue(lock.readLock().tryLock())
nova chamada: assertTrue(lock.readLock().tryLock(), "Era esperado verdadeiro, mas " + result782 + " <lock.readLock().tryLock()> é falso")
chamada antiga: Assertions.assertTrue(redisson.getReadWriteLock("lock").readLock().tryLock())
nova chamada: assertTrue(redisson.getReadWriteLock("lock").readLock().tryLock(), "Era esperado verdadeiro, mas " + result783 + " <redisson.getReadWriteLock('lock').readLock().tryLock()> é falso")
chamada antiga: Assertions.assertFalse(lock.readLock().forceUnlock())
nova chamada: assertFalse(lock.readLock().forceUnlock(), "Era esperado falso, mas " + result784 + " <lock.readLock().forceUnlock()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(lock.writeLock().tryLock())
nova chamada: assertFalse(lock.writeLock().tryLock(), "Era esperado falso, mas " + result785 + " <lock.writeLock().tryLock()> é verdadeiro ")
chamada antiga: Assertions.assertTrue(readLock2.get().isLocked())
nova chamada: assertTrue(readLock2.get().isLocked(), "Era esperado verdadeiro, mas " + result786 + " <readLock2.get().isLocked()> é falso")
chamada antiga: Assertions.assertFalse(lock.writeLock().tryLock())
nova chamada: assertFalse(lock.writeLock().tryLock(), "Era esperado falso, mas " + result787 + " <lock.writeLock().tryLock()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(readLock1.isHeldByCurrentThread())
nova chamada: assertFalse(readLock1.isHeldByCurrentThread(), "Era esperado falso, mas " + result788 + " <readLock1.isHeldByCurrentThread()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(readLock2.get().isLocked())
nova chamada: assertFalse(readLock2.get().isLocked(), "Era esperado falso, mas " + result789 + " <readLock2.get().isLocked()> é verdadeiro ")
chamada antiga: Assertions.assertTrue(lock.writeLock().tryLock())
nova chamada: assertTrue(lock.writeLock().tryLock(), "Era esperado verdadeiro, mas " + result790 + " <lock.writeLock().tryLock()> é falso")
chamada antiga: Assertions.assertTrue(lock.writeLock().isLocked())
nova chamada: assertTrue(lock.writeLock().isLocked(), "Era esperado verdadeiro, mas " + result791 + " <lock.writeLock().isLocked()> é falso")
chamada antiga: Assertions.assertTrue(lock.writeLock().isHeldByCurrentThread())
nova chamada: assertTrue(lock.writeLock().isHeldByCurrentThread(), "Era esperado verdadeiro, mas " + result792 + " <lock.writeLock().isHeldByCurrentThread()> é falso")
chamada antiga: Assertions.assertFalse(lock.writeLock().isLocked())
nova chamada: assertFalse(lock.writeLock().isLocked(), "Era esperado falso, mas " + result793 + " <lock.writeLock().isLocked()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(lock.writeLock().isHeldByCurrentThread())
nova chamada: assertFalse(lock.writeLock().isHeldByCurrentThread(), "Era esperado falso, mas " + result794 + " <lock.writeLock().isHeldByCurrentThread()> é verdadeiro ")
chamada antiga: Assertions.assertTrue(lock.writeLock().tryLock())
nova chamada: assertTrue(lock.writeLock().tryLock(), "Era esperado verdadeiro, mas " + result795 + " <lock.writeLock().tryLock()> é falso")
chamada antiga: Assertions.assertFalse(readLock1.isHeldByCurrentThread())
nova chamada: assertFalse(readLock1.isHeldByCurrentThread(), "Era esperado falso, mas " + result796 + " <readLock1.isHeldByCurrentThread()> é verdadeiro ")
chamada antiga: Assertions.assertTrue(readLock1.isLocked())
nova chamada: assertTrue(readLock1.isLocked(), "Era esperado verdadeiro, mas " + result797 + " <readLock1.isLocked()> é falso")
chamada antiga: Assertions.assertTrue(spendTime < 2050)
nova chamada: assertTrue(spendTime < 2050, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(spendTime < 2050)
nova chamada: assertTrue(spendTime < 2050, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertEquals(0, lock.getHoldCount())
nova chamada: assertEquals(0, lock.getHoldCount(), "Era esperado valores iguais, mas  0 é diferente de " + result798 + " <lock.getHoldCount()>")
chamada antiga: Assertions.assertEquals(1, lock.getHoldCount())
nova chamada: assertEquals(1, lock.getHoldCount(), "Era esperado valores iguais, mas  1 é diferente de " + result799 + " <lock.getHoldCount()>")
chamada antiga: Assertions.assertEquals(0, lock.getHoldCount())
nova chamada: assertEquals(0, lock.getHoldCount(), "Era esperado valores iguais, mas  0 é diferente de " + result800 + " <lock.getHoldCount()>")
chamada antiga: Assertions.assertEquals(2, lock.getHoldCount())
nova chamada: assertEquals(2, lock.getHoldCount(), "Era esperado valores iguais, mas  2 é diferente de " + result801 + " <lock.getHoldCount()>")
chamada antiga: Assertions.assertEquals(1, lock.getHoldCount())
nova chamada: assertEquals(1, lock.getHoldCount(), "Era esperado valores iguais, mas  1 é diferente de " + result802 + " <lock.getHoldCount()>")
chamada antiga: Assertions.assertEquals(0, lock.getHoldCount())
nova chamada: assertEquals(0, lock.getHoldCount(), "Era esperado valores iguais, mas  0 é diferente de " + result803 + " <lock.getHoldCount()>")
chamada antiga: Assertions.assertFalse(lock.isHeldByCurrentThread())
nova chamada: assertFalse(lock.isHeldByCurrentThread(), "Era esperado falso, mas " + result804 + " <lock.isHeldByCurrentThread()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(lock.isHeldByCurrentThread())
nova chamada: assertFalse(lock.isHeldByCurrentThread(), "Era esperado falso, mas " + result805 + " <lock.isHeldByCurrentThread()> é verdadeiro ")
chamada antiga: Assertions.assertTrue(lock.isHeldByCurrentThread())
nova chamada: assertTrue(lock.isHeldByCurrentThread(), "Era esperado verdadeiro, mas " + result806 + " <lock.isHeldByCurrentThread()> é falso")
chamada antiga: Assertions.assertFalse(lock.isHeldByCurrentThread())
nova chamada: assertFalse(lock.isHeldByCurrentThread(), "Era esperado falso, mas " + result807 + " <lock.isHeldByCurrentThread()> é verdadeiro ")
chamada antiga: Assertions.assertTrue(lock.isLocked())
nova chamada: assertTrue(lock.isLocked(), "Era esperado verdadeiro, mas " + result808 + " <lock.isLocked()> é falso")
chamada antiga: Assertions.assertFalse(lock.isLocked())
nova chamada: assertFalse(lock.isLocked(), "Era esperado falso, mas " + result809 + " <lock.isLocked()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(lock.isLocked())
nova chamada: assertFalse(lock.isLocked(), "Era esperado falso, mas " + result810 + " <lock.isLocked()> é verdadeiro ")
chamada antiga: Assertions.assertTrue(lock.isLocked())
nova chamada: assertTrue(lock.isLocked(), "Era esperado verdadeiro, mas " + result811 + " <lock.isLocked()> é falso")
chamada antiga: Assertions.assertFalse(lock.isLocked())
nova chamada: assertFalse(lock.isLocked(), "Era esperado falso, mas " + result812 + " <lock.isLocked()> é verdadeiro ")
chamada antiga: Assertions.assertThrows(IllegalMonitorStateException.class, () -> {
    RReadWriteLock rwlock = redisson.getReadWriteLock("lock");
    Thread t = new Thread() {

        public void run() {
            RReadWriteLock rwlock = redisson.getReadWriteLock("lock");
            rwlock.readLock().lock();
        }
    };
    t.start();
    t.join();
    RLock lock = rwlock.readLock();
    try {
        lock.unlock();
    } finally {
        lock.forceUnlock();
    }
})
nova chamada: assertThrows(IllegalMonitorStateException.class, () -> {
    RReadWriteLock rwlock = redisson.getReadWriteLock("lock");
    Thread t = new Thread() {

        public void run() {
            RReadWriteLock rwlock = redisson.getReadWriteLock("lock");
            rwlock.readLock().lock();
        }
    };
    t.start();
    t.join();
    RLock lock = rwlock.readLock();
    try {
        lock.unlock();
    } finally {
        lock.forceUnlock();
    }
}, "Era esperado que a exceção  IllegalMonitorStateException.class fosse lançada, mas não foi")
chamada antiga: Assertions.assertTrue(lock.tryLock())
nova chamada: assertTrue(lock.tryLock(), "Era esperado verdadeiro, mas " + result813 + " <lock.tryLock()> é falso")
chamada antiga: Assertions.assertTrue(lock.tryLock())
nova chamada: assertTrue(lock.tryLock(), "Era esperado verdadeiro, mas " + result814 + " <lock.tryLock()> é falso")
chamada antiga: Assertions.assertTrue(lock.tryLock())
nova chamada: assertTrue(lock.tryLock(), "Era esperado verdadeiro, mas " + result815 + " <lock.tryLock()> é falso")
chamada antiga: Assertions.assertEquals(iterations, lockedCounter.get())
nova chamada: assertEquals(iterations, lockedCounter.get(), "Era esperado valores iguais, mas  iterations é diferente de " + result816 + " <lockedCounter.get()>")
chamada antiga: Assertions.assertEquals(16 * iterations, lockedCounter.get())
nova chamada: assertEquals(16 * iterations, lockedCounter.get(), "Era esperado valores iguais, mas  16 * iterations é diferente de " + result817 + " <lockedCounter.get()>")
chamada antiga: Assertions.assertEquals(iterations, lockedCounter.get())
nova chamada: assertEquals(iterations, lockedCounter.get(), "Era esperado valores iguais, mas  iterations é diferente de " + result818 + " <lockedCounter.get()>")
chamada antiga: Assertions.assertTimeout(Duration.ofSeconds(3), () -> {
    final String lockName = "lock1";
    final CountDownLatch startSignal = new CountDownLatch(1);
    final CountDownLatch testSignal = new CountDownLatch(1);
    final CountDownLatch completeSignal = new CountDownLatch(2);
    System.out.println("configure");
    final long millis = System.currentTimeMillis();
    new Thread() {

        @Override
        public void run() {
            try {
                startSignal.await();
                RLock lock = redisson.getLock(lockName);
                System.out.println("1. getlock " + lock.getName() + " - " + Thread.currentThread().getId());
                lock.lock();
                System.out.println("1. lock " + lock.getName() + " - " + Thread.currentThread().getId());
                testSignal.countDown();
                Thread.sleep(500);
                lock.unlock();
                System.out.println("1. unlock " + lock.getName() + " - " + Thread.currentThread().getId());
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            completeSignal.countDown();
        }
    }.start();
    new Thread() {

        @Override
        public void run() {
            try {
                testSignal.await();
                RLock lock = redisson.getLock(lockName);
                System.out.println("2. getlock " + lock.getName() + " - " + Thread.currentThread().getId());
                lock.lock();
                System.out.println("2. lock " + lock.getName() + " - " + Thread.currentThread().getId());
                long current = System.currentTimeMillis();
                Assertions.assertTrue(current - millis >= 500, "current=" + current + ", millis=" + millis);
                Thread.sleep(500);
                lock.unlock();
                System.out.println("2. unlock " + lock.getName() + " - " + Thread.currentThread().getId());
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            completeSignal.countDown();
        }
    }.start();
    System.out.println("start");
    startSignal.countDown();
    completeSignal.await();
    System.out.println("complete");
})
nova chamada: assertTimeout(Duration.ofSeconds(3), () -> {
    final String lockName = "lock1";
    final CountDownLatch startSignal = new CountDownLatch(1);
    final CountDownLatch testSignal = new CountDownLatch(1);
    final CountDownLatch completeSignal = new CountDownLatch(2);
    System.out.println("configure");
    final long millis = System.currentTimeMillis();
    new Thread() {

        @Override
        public void run() {
            try {
                startSignal.await();
                RLock lock = redisson.getLock(lockName);
                System.out.println("1. getlock " + lock.getName() + " - " + Thread.currentThread().getId());
                lock.lock();
                System.out.println("1. lock " + lock.getName() + " - " + Thread.currentThread().getId());
                testSignal.countDown();
                Thread.sleep(500);
                lock.unlock();
                System.out.println("1. unlock " + lock.getName() + " - " + Thread.currentThread().getId());
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            completeSignal.countDown();
        }
    }.start();
    new Thread() {

        @Override
        public void run() {
            try {
                testSignal.await();
                RLock lock = redisson.getLock(lockName);
                System.out.println("2. getlock " + lock.getName() + " - " + Thread.currentThread().getId());
                lock.lock();
                System.out.println("2. lock " + lock.getName() + " - " + Thread.currentThread().getId());
                long current = System.currentTimeMillis();
                Assertions.assertTrue(current - millis >= 500, "current=" + current + ", millis=" + millis);
                Thread.sleep(500);
                lock.unlock();
                System.out.println("2. unlock " + lock.getName() + " - " + Thread.currentThread().getId());
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            completeSignal.countDown();
        }
    }.start();
    System.out.println("start");
    startSignal.countDown();
    completeSignal.await();
    System.out.println("complete");
}, "Era esperado que o tempo de execução " + result819 + " <Duration.ofSeconds(3)> não fosse ultrapassado, mas foi")
chamada antiga: Assertions.assertTimeout(Duration.ofSeconds(3), () -> {
    final String countDownName = getClass().getName() + ":countDown#1";
    final CountDownLatch startSignal = new CountDownLatch(1);
    final CountDownLatch testSignal = new CountDownLatch(1);
    final CountDownLatch completeSignal = new CountDownLatch(2);
    System.out.println("configure");
    final long millis = System.currentTimeMillis();
    new Thread() {

        @Override
        public void run() {
            try {
                startSignal.await();
                RCountDownLatch countDownLatch = redisson.getCountDownLatch(countDownName);
                System.out.println("1. getCountDownLatch " + countDownLatch.getName() + " - " + Thread.currentThread().getId());
                countDownLatch.trySetCount(1);
                System.out.println("1. trySetCount " + countDownLatch.getName() + " - " + Thread.currentThread().getId());
                Thread.sleep(500);
                testSignal.countDown();
                Thread.sleep(500);
                System.out.println("1. sleep " + countDownLatch.getName() + " - " + Thread.currentThread().getId());
                countDownLatch.countDown();
                System.out.println("1. countDown " + countDownLatch.getName() + " - " + Thread.currentThread().getId());
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            completeSignal.countDown();
        }
    }.start();
    new Thread() {

        @Override
        public void run() {
            try {
                testSignal.await();
                RCountDownLatch countDownLatch = redisson.getCountDownLatch(countDownName);
                System.out.println("2. getCountDownLatch " + countDownLatch.getName() + " - " + Thread.currentThread().getId());
                countDownLatch.await();
                System.out.println("2. await " + countDownLatch.getName() + " - " + Thread.currentThread().getId());
                long current = System.currentTimeMillis();
                Assertions.assertTrue((current - millis) >= 1000, "current=" + current + ", millis=" + millis);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            completeSignal.countDown();
        }
    }.start();
    System.out.println("start");
    startSignal.countDown();
    completeSignal.await();
    System.out.println("complete");
})
nova chamada: assertTimeout(Duration.ofSeconds(3), () -> {
    final String countDownName = getClass().getName() + ":countDown#1";
    final CountDownLatch startSignal = new CountDownLatch(1);
    final CountDownLatch testSignal = new CountDownLatch(1);
    final CountDownLatch completeSignal = new CountDownLatch(2);
    System.out.println("configure");
    final long millis = System.currentTimeMillis();
    new Thread() {

        @Override
        public void run() {
            try {
                startSignal.await();
                RCountDownLatch countDownLatch = redisson.getCountDownLatch(countDownName);
                System.out.println("1. getCountDownLatch " + countDownLatch.getName() + " - " + Thread.currentThread().getId());
                countDownLatch.trySetCount(1);
                System.out.println("1. trySetCount " + countDownLatch.getName() + " - " + Thread.currentThread().getId());
                Thread.sleep(500);
                testSignal.countDown();
                Thread.sleep(500);
                System.out.println("1. sleep " + countDownLatch.getName() + " - " + Thread.currentThread().getId());
                countDownLatch.countDown();
                System.out.println("1. countDown " + countDownLatch.getName() + " - " + Thread.currentThread().getId());
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            completeSignal.countDown();
        }
    }.start();
    new Thread() {

        @Override
        public void run() {
            try {
                testSignal.await();
                RCountDownLatch countDownLatch = redisson.getCountDownLatch(countDownName);
                System.out.println("2. getCountDownLatch " + countDownLatch.getName() + " - " + Thread.currentThread().getId());
                countDownLatch.await();
                System.out.println("2. await " + countDownLatch.getName() + " - " + Thread.currentThread().getId());
                long current = System.currentTimeMillis();
                Assertions.assertTrue((current - millis) >= 1000, "current=" + current + ", millis=" + millis);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            completeSignal.countDown();
        }
    }.start();
    System.out.println("start");
    startSignal.countDown();
    completeSignal.await();
    System.out.println("complete");
}, "Era esperado que o tempo de execução " + result820 + " <Duration.ofSeconds(3)> não fosse ultrapassado, mas foi")
chamada antiga: Assertions.assertThrows(TransactionTimeoutException.class, () -> {
    RMap<Integer, String> m = redisson.getMap("test");
    m.put(1, "test");
    RTransaction transaction1 = redisson.createTransaction(TransactionOptions.defaults().timeout(10, TimeUnit.SECONDS));
    RMap<Integer, String> map1 = transaction1.getMap("put_test");
    map1.remove(1);
    RTransaction transaction2 = redisson.createTransaction(TransactionOptions.defaults());
    RMap<Integer, String> map2 = transaction2.getMap("put_test");
    map2.put(1, "aryan");
    try {
        transaction2.commit();
        Assertions.fail();
    } catch (TransactionTimeoutException e) {
    }
    transaction1.commit();
    assertThat(m.size()).isZero();
})
nova chamada: assertThrows(TransactionTimeoutException.class, () -> {
    RMap<Integer, String> m = redisson.getMap("test");
    m.put(1, "test");
    RTransaction transaction1 = redisson.createTransaction(TransactionOptions.defaults().timeout(10, TimeUnit.SECONDS));
    RMap<Integer, String> map1 = transaction1.getMap("put_test");
    map1.remove(1);
    RTransaction transaction2 = redisson.createTransaction(TransactionOptions.defaults());
    RMap<Integer, String> map2 = transaction2.getMap("put_test");
    map2.put(1, "aryan");
    try {
        transaction2.commit();
        Assertions.fail();
    } catch (TransactionTimeoutException e) {
    }
    transaction1.commit();
    assertThat(m.size()).isZero();
}, "Era esperado que a exceção  TransactionTimeoutException.class fosse lançada, mas não foi")
chamada antiga: Assertions.assertTrue(executor.awaitTermination(10, TimeUnit.MINUTES))
nova chamada: assertTrue(executor.awaitTermination(10, TimeUnit.MINUTES), "Era esperado verdadeiro, mas " + result821 + " <executor.awaitTermination(10, TimeUnit.MINUTES)> é falso")
chamada antiga: Assertions.assertThrows(IllegalArgumentException.class, () -> {
    RedissonClient r = Redisson.create(config);
    r.getMap("test").put("1", new Dummy());
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    RedissonClient r = Redisson.create(config);
    r.getMap("test").put("1", new Dummy());
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: Assertions.assertThrows(RedisOutOfMemoryException.class, () -> {
    RedissonClient r = null;
    try {
        r = Redisson.create(config);
        r.getKeys().flushall();
        for (int i = 0; i < 10000; i++) {
            r.getMap("test").put("" + i, "" + i);
        }
    } finally {
        r.shutdown();
        p.stop();
    }
})
nova chamada: assertThrows(RedisOutOfMemoryException.class, () -> {
    RedissonClient r = null;
    try {
        r = Redisson.create(config);
        r.getKeys().flushall();
        for (int i = 0; i < 10000; i++) {
            r.getMap("test").put("" + i, "" + i);
        }
    } finally {
        r.shutdown();
        p.stop();
    }
}, "Era esperado que a exceção  RedisOutOfMemoryException.class fosse lançada, mas não foi")
chamada antiga: Assertions.assertThrows(RedisOutOfMemoryException.class, () -> {
    RedissonClient r = null;
    try {
        r = Redisson.create(config);
        r.getKeys().flushall();
        for (int i = 0; i < 10000; i++) {
            r.getMap("test").fastPut("" + i, "" + i);
        }
    } finally {
        r.shutdown();
        p.stop();
    }
})
nova chamada: assertThrows(RedisOutOfMemoryException.class, () -> {
    RedissonClient r = null;
    try {
        r = Redisson.create(config);
        r.getKeys().flushall();
        for (int i = 0; i < 10000; i++) {
            r.getMap("test").fastPut("" + i, "" + i);
        }
    } finally {
        r.shutdown();
        p.stop();
    }
}, "Era esperado que a exceção  RedisOutOfMemoryException.class fosse lançada, mas não foi")
chamada antiga: Assertions.assertThrows(IllegalArgumentException.class, () -> {
    Config redissonConfig = new Config();
    redissonConfig.useSingleServer().setAddress(RedisRunner.getDefaultRedisServerBindAddressAndPort()).setConnectionPoolSize(2);
    Redisson.create(redissonConfig);
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    Config redissonConfig = new Config();
    redissonConfig.useSingleServer().setAddress(RedisRunner.getDefaultRedisServerBindAddressAndPort()).setConnectionPoolSize(2);
    Redisson.create(redissonConfig);
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: Assertions.assertEquals(0, p.stop())
nova chamada: assertEquals(0, p.stop(), "Era esperado valores iguais, mas  0 é diferente de " + result822 + " <p.stop()>")
chamada antiga: Assertions.assertEquals(0, pp.stop())
nova chamada: assertEquals(0, pp.stop(), "Era esperado valores iguais, mas  0 é diferente de " + result823 + " <pp.stop()>")
chamada antiga: Assertions.assertEquals(0, runner.stop())
nova chamada: assertEquals(0, runner.stop(), "Era esperado valores iguais, mas  0 é diferente de " + result824 + " <runner.stop()>")
chamada antiga: Assertions.assertEquals(0, pp.stop())
nova chamada: assertEquals(0, pp.stop(), "Era esperado valores iguais, mas  0 é diferente de " + result825 + " <pp.stop()>")
chamada antiga: Assertions.assertFalse(r.isShuttingDown())
nova chamada: assertFalse(r.isShuttingDown(), "Era esperado falso, mas " + result826 + " <r.isShuttingDown()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(r.isShutdown())
nova chamada: assertFalse(r.isShutdown(), "Era esperado falso, mas " + result827 + " <r.isShutdown()> é verdadeiro ")
chamada antiga: Assertions.assertTrue(r.isShuttingDown())
nova chamada: assertTrue(r.isShuttingDown(), "Era esperado verdadeiro, mas " + result828 + " <r.isShuttingDown()> é falso")
chamada antiga: Assertions.assertTrue(r.isShutdown())
nova chamada: assertTrue(r.isShutdown(), "Era esperado verdadeiro, mas " + result829 + " <r.isShutdown()> é falso")
chamada antiga: Assertions.assertThrows(RedisConnectionException.class, () -> {
    Config config = new Config();
    config.useSingleServer().setAddress("redis://127.99.0.1:1111");
    Redisson.create(config);
    Thread.sleep(1500);
})
nova chamada: assertThrows(RedisConnectionException.class, () -> {
    Config config = new Config();
    config.useSingleServer().setAddress("redis://127.99.0.1:1111");
    Redisson.create(config);
    Thread.sleep(1500);
}, "Era esperado que a exceção  RedisConnectionException.class fosse lançada, mas não foi")
chamada antiga: Assertions.assertThrows(RedisConnectionException.class, () -> {
    Config config = new Config();
    config.useClusterServers().addNodeAddress("redis://127.99.0.1:1111");
    Redisson.create(config);
    Thread.sleep(1500);
})
nova chamada: assertThrows(RedisConnectionException.class, () -> {
    Config config = new Config();
    config.useClusterServers().addNodeAddress("redis://127.99.0.1:1111");
    Redisson.create(config);
    Thread.sleep(1500);
}, "Era esperado que a exceção  RedisConnectionException.class fosse lançada, mas não foi")
chamada antiga: Assertions.assertThrows(RedisConnectionException.class, () -> {
    Config config = new Config();
    config.useReplicatedServers().addNodeAddress("redis://127.99.0.1:1111");
    Redisson.create(config);
    Thread.sleep(1500);
})
nova chamada: assertThrows(RedisConnectionException.class, () -> {
    Config config = new Config();
    config.useReplicatedServers().addNodeAddress("redis://127.99.0.1:1111");
    Redisson.create(config);
    Thread.sleep(1500);
}, "Era esperado que a exceção  RedisConnectionException.class fosse lançada, mas não foi")
chamada antiga: Assertions.assertThrows(RedisConnectionException.class, () -> {
    Config config = new Config();
    config.useMasterSlaveServers().setMasterAddress("redis://127.99.0.1:1111").addSlaveAddress("redis://127.99.0.2:1111");
    Redisson.create(config);
    Thread.sleep(1500);
})
nova chamada: assertThrows(RedisConnectionException.class, () -> {
    Config config = new Config();
    config.useMasterSlaveServers().setMasterAddress("redis://127.99.0.1:1111").addSlaveAddress("redis://127.99.0.2:1111");
    Redisson.create(config);
    Thread.sleep(1500);
}, "Era esperado que a exceção  RedisConnectionException.class fosse lançada, mas não foi")
chamada antiga: Assertions.assertThrows(RedisConnectionException.class, () -> {
    Config config = new Config();
    config.useMasterSlaveServers().setMasterAddress("redis://gadfgdfgdsfg:1111").addSlaveAddress("redis://asdfasdfsdfaasdf:1111");
    Redisson.create(config);
    Thread.sleep(1500);
})
nova chamada: assertThrows(RedisConnectionException.class, () -> {
    Config config = new Config();
    config.useMasterSlaveServers().setMasterAddress("redis://gadfgdfgdsfg:1111").addSlaveAddress("redis://asdfasdfsdfaasdf:1111");
    Redisson.create(config);
    Thread.sleep(1500);
}, "Era esperado que a exceção  RedisConnectionException.class fosse lançada, mas não foi")
chamada antiga: Assertions.assertThrows(RedisConnectionException.class, () -> {
    Config config = new Config();
    config.useSentinelServers().addSentinelAddress("redis://127.99.0.1:1111").setMasterName("test");
    Redisson.create(config);
    Thread.sleep(1500);
})
nova chamada: assertThrows(RedisConnectionException.class, () -> {
    Config config = new Config();
    config.useSentinelServers().addSentinelAddress("redis://127.99.0.1:1111").setMasterName("test");
    Redisson.create(config);
    Thread.sleep(1500);
}, "Era esperado que a exceção  RedisConnectionException.class fosse lançada, mas não foi")
chamada antiga: org.junit.jupiter.api.Assertions.assertThrows(IOException.class, () -> {
    m.getValueEncoder().encode(new NonSerializable());
})
nova chamada: assertThrows(IOException.class, () -> {
    m.getValueEncoder().encode(new NonSerializable());
}, "Era esperado que a exceção  IOException.class fosse lançada, mas não foi")
chamada antiga: Assertions.assertEquals(list, decodedList)
nova chamada: assertEquals(list, decodedList, "Era esperado valores iguais, mas  list é diferente de " + " decodedList")
chamada antiga: Assertions.assertThrows(JsonMappingException.class, () -> {
    String JSON = "{'id': 124,\n" + " 'obj':[ 'com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl',\n" + "  {\n" + "    'transletBytecodes' : [ 'AAIAZQ==' ],\n" + "    'transletName' : 'a.b',\n" + "    'outputProperties' : { }\n" + "  }\n" + " ]\n" + "}";
    JSON = JSON.replace("'", "\"");
    JsonJacksonCodec codec = new JsonJacksonCodec();
    codec.getObjectMapper().readValue(JSON, Bean1599.class);
})
nova chamada: assertThrows(JsonMappingException.class, () -> {
    String JSON = "{'id': 124,\n" + " 'obj':[ 'com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl',\n" + "  {\n" + "    'transletBytecodes' : [ 'AAIAZQ==' ],\n" + "    'transletName' : 'a.b',\n" + "    'outputProperties' : { }\n" + "  }\n" + " ]\n" + "}";
    JSON = JSON.replace("'", "\"");
    JsonJacksonCodec codec = new JsonJacksonCodec();
    codec.getObjectMapper().readValue(JSON, Bean1599.class);
}, "Era esperado que a exceção  JsonMappingException.class fosse lançada, mas não foi")
chamada antiga: Assertions.assertTrue(objectMapper.getDeserializationConfig().isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES))
nova chamada: assertTrue(objectMapper.getDeserializationConfig().isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES), "Era esperado verdadeiro, mas " + result830 + " <objectMapper.getDeserializationConfig().isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)> é falso")
chamada antiga: Assertions.assertFalse(codec.getObjectMapper().getDeserializationConfig().isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES))
nova chamada: assertFalse(codec.getObjectMapper().getDeserializationConfig().isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES), "Era esperado falso, mas " + result831 + " <codec.getObjectMapper().getDeserializationConfig().isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)> é verdadeiro ")
chamada antiga: Assertions.assertFalse(objectMapper.getDeserializationConfig().isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE))
nova chamada: assertFalse(objectMapper.getDeserializationConfig().isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE), "Era esperado falso, mas " + result832 + " <objectMapper.getDeserializationConfig().isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)> é verdadeiro ")
chamada antiga: Assertions.assertFalse(codec.getObjectMapper().getDeserializationConfig().isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE))
nova chamada: assertFalse(codec.getObjectMapper().getDeserializationConfig().isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE), "Era esperado falso, mas " + result833 + " <codec.getObjectMapper().getDeserializationConfig().isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)> é verdadeiro ")
chamada antiga: Assertions.assertEquals(1, (int) sync(queue1.removeLast()))
nova chamada: assertEquals(1, (int) sync(queue1.removeLast()), "Era esperado valores iguais, mas  1 é diferente de " + " (int) sync(queue1.removeLast())")
chamada antiga: Assertions.assertEquals(2, (int) sync(queue1.removeLast()))
nova chamada: assertEquals(2, (int) sync(queue1.removeLast()), "Era esperado valores iguais, mas  2 é diferente de " + " (int) sync(queue1.removeLast())")
chamada antiga: Assertions.assertEquals(3, (int) sync(queue1.removeLast()))
nova chamada: assertEquals(3, (int) sync(queue1.removeLast()), "Era esperado valores iguais, mas  3 é diferente de " + " (int) sync(queue1.removeLast())")
chamada antiga: Assertions.assertEquals(3, (int) sync(queue1.removeFirst()))
nova chamada: assertEquals(3, (int) sync(queue1.removeFirst()), "Era esperado valores iguais, mas  3 é diferente de " + " (int) sync(queue1.removeFirst())")
chamada antiga: Assertions.assertEquals(2, (int) sync(queue1.removeFirst()))
nova chamada: assertEquals(2, (int) sync(queue1.removeFirst()), "Era esperado valores iguais, mas  2 é diferente de " + " (int) sync(queue1.removeFirst())")
chamada antiga: Assertions.assertEquals(1, (int) sync(queue1.removeFirst()))
nova chamada: assertEquals(1, (int) sync(queue1.removeFirst()), "Era esperado valores iguais, mas  1 é diferente de " + " (int) sync(queue1.removeFirst())")
chamada antiga: Assertions.assertNull(sync(queue1.peekFirst()))
nova chamada: assertNull(sync(queue1.peekFirst()), "Era esperado nulo, mas " + result834 + " <sync(queue1.peekFirst())> não é nulo")
chamada antiga: Assertions.assertNull(sync(queue1.peekLast()))
nova chamada: assertNull(sync(queue1.peekLast()), "Era esperado nulo, mas " + result835 + " <sync(queue1.peekLast())> não é nulo")
chamada antiga: Assertions.assertEquals(2, (int) sync(queue1.peekFirst()))
nova chamada: assertEquals(2, (int) sync(queue1.peekFirst()), "Era esperado valores iguais, mas  2 é diferente de " + " (int) sync(queue1.peekFirst())")
chamada antiga: Assertions.assertEquals(2, (int) sync(queue1.peekLast()))
nova chamada: assertEquals(2, (int) sync(queue1.peekLast()), "Era esperado valores iguais, mas  2 é diferente de " + " (int) sync(queue1.peekLast())")
chamada antiga: Assertions.assertEquals(a, resa)
nova chamada: assertEquals(a, resa, "Era esperado valores iguais, mas  a é diferente de " + " resa")
chamada antiga: Assertions.assertTrue(set.contains(new TestObject("2", "3")))
nova chamada: assertTrue(set.contains(new TestObject("2", "3")), "Era esperado verdadeiro, mas " + result836 + " <set.contains(new TestObject('2', '3'))> é falso")
chamada antiga: Assertions.assertTrue(set.contains(new TestObject("1", "2")))
nova chamada: assertTrue(set.contains(new TestObject("1", "2")), "Era esperado verdadeiro, mas " + result837 + " <set.contains(new TestObject('1', '2'))> é falso")
chamada antiga: Assertions.assertFalse(set.contains(new TestObject("1", "9")))
nova chamada: assertFalse(set.contains(new TestObject("1", "9")), "Era esperado falso, mas " + result838 + " <set.contains(new TestObject('1', '9'))> é verdadeiro ")
chamada antiga: Assertions.assertEquals(3, l)
nova chamada: assertEquals(3, l, "Era esperado valores iguais, mas  3 é diferente de " + " l")
chamada antiga: Assertions.assertTrue(System.currentTimeMillis() - s > 3900)
nova chamada: assertTrue(System.currentTimeMillis() - s > 3900, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertEquals(3, l)
nova chamada: assertEquals(3, l, "Era esperado valores iguais, mas  3 é diferente de " + " l")
chamada antiga: Assertions.assertTrue(System.currentTimeMillis() - s > 9000)
nova chamada: assertTrue(System.currentTimeMillis() - s > 9000, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertEquals((Integer) 1, queue1.poll(2, TimeUnit.SECONDS))
nova chamada: assertEquals((Integer) 1, queue1.poll(2, TimeUnit.SECONDS), "Era esperado valores iguais, mas  (Integer) 1 é diferente de " + result839 + " <queue1.poll(2, TimeUnit.SECONDS)>")
chamada antiga: Assertions.assertNull(queue1.poll(5, TimeUnit.SECONDS))
nova chamada: assertNull(queue1.poll(5, TimeUnit.SECONDS), "Era esperado nulo, mas " + result840 + " <queue1.poll(5, TimeUnit.SECONDS)> não é nulo")
chamada antiga: Assertions.assertTrue(System.currentTimeMillis() - s > 4900)
nova chamada: assertTrue(System.currentTimeMillis() - s > 4900, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertEquals(100, queue.size())
nova chamada: assertEquals(100, queue.size(), "Era esperado valores iguais, mas  100 é diferente de " + result841 + " <queue.size()>")
chamada antiga: Assertions.assertEquals(10, count)
nova chamada: assertEquals(10, count, "Era esperado valores iguais, mas  10 é diferente de " + " count")
chamada antiga: Assertions.assertEquals(10, batch.size())
nova chamada: assertEquals(10, batch.size(), "Era esperado valores iguais, mas  10 é diferente de " + result842 + " <batch.size()>")
chamada antiga: Assertions.assertEquals(90, queue.size())
nova chamada: assertEquals(90, queue.size(), "Era esperado valores iguais, mas  90 é diferente de " + result843 + " <queue.size()>")
chamada antiga: Assertions.assertEquals(0, queue.size())
nova chamada: assertEquals(0, queue.size(), "Era esperado valores iguais, mas  0 é diferente de " + result844 + " <queue.size()>")
chamada antiga: Assertions.assertTrue(queue.add(1))
nova chamada: assertTrue(queue.add(1), "Era esperado verdadeiro, mas " + result845 + " <queue.add(1)> é falso")
chamada antiga: Assertions.assertEquals(1, queue.size())
nova chamada: assertEquals(1, queue.size(), "Era esperado valores iguais, mas  1 é diferente de " + result846 + " <queue.size()>")
chamada antiga: Assertions.assertEquals(1, count)
nova chamada: assertEquals(1, count, "Era esperado valores iguais, mas  1 é diferente de " + " count")
chamada antiga: Assertions.assertEquals(1, batch.size())
nova chamada: assertEquals(1, batch.size(), "Era esperado valores iguais, mas  1 é diferente de " + result847 + " <batch.size()>")
chamada antiga: Assertions.assertTrue(queue.isEmpty())
nova chamada: assertTrue(queue.isEmpty(), "Era esperado verdadeiro, mas " + result848 + " <queue.isEmpty()> é falso")
chamada antiga: Assertions.assertEquals(4, iteration)
nova chamada: assertEquals(4, iteration, "Era esperado valores iguais, mas  4 é diferente de " + " iteration")
chamada antiga: Assertions.assertEquals(0, queue.size())
nova chamada: assertEquals(0, queue.size(), "Era esperado valores iguais, mas  0 é diferente de " + result849 + " <queue.size()>")
chamada antiga: Assertions.assertTrue(queue.isEmpty())
nova chamada: assertTrue(queue.isEmpty(), "Era esperado verdadeiro, mas " + result850 + " <queue.isEmpty()> é falso")
chamada antiga: Assertions.assertEquals("282297a0228f48cd3fc6a55de6316f31422f5d17", r)
nova chamada: assertEquals("282297a0228f48cd3fc6a55de6316f31422f5d17", r, "Era esperado valores iguais, mas  '282297a0228f48cd3fc6a55de6316f31422f5d17' é diferente de " + " r")
chamada antiga: Assertions.assertEquals(1, r1.size())
nova chamada: assertEquals(1, r1.size(), "Era esperado valores iguais, mas  1 é diferente de " + result851 + " <r1.size()>")
chamada antiga: Assertions.assertTrue(r1.get(0))
nova chamada: assertTrue(r1.get(0), "Era esperado verdadeiro, mas " + result852 + " <r1.get(0)> é falso")
chamada antiga: Assertions.assertEquals(1, r2.size())
nova chamada: assertEquals(1, r2.size(), "Era esperado valores iguais, mas  1 é diferente de " + result853 + " <r2.size()>")
chamada antiga: Assertions.assertFalse(r2.get(0))
nova chamada: assertFalse(r2.get(0), "Era esperado falso, mas " + result854 + " <r2.get(0)> é verdadeiro ")
chamada antiga: Assertions.assertEquals("282297a0228f48cd3fc6a55de6316f31422f5d17", r)
nova chamada: assertEquals("282297a0228f48cd3fc6a55de6316f31422f5d17", r, "Era esperado valores iguais, mas  '282297a0228f48cd3fc6a55de6316f31422f5d17' é diferente de " + " r")
chamada antiga: Assertions.assertEquals("bar", r1)
nova chamada: assertEquals("bar", r1, "Era esperado valores iguais, mas  'bar' é diferente de " + " r1")
chamada antiga: Assertions.assertEquals("282297a0228f48cd3fc6a55de6316f31422f5d17", r)
nova chamada: assertEquals("282297a0228f48cd3fc6a55de6316f31422f5d17", r, "Era esperado valores iguais, mas  '282297a0228f48cd3fc6a55de6316f31422f5d17' é diferente de " + " r")
chamada antiga: Assertions.assertEquals("bar", r1)
nova chamada: assertEquals("bar", r1, "Era esperado valores iguais, mas  'bar' é diferente de " + " r1")
chamada antiga: Assertions.assertEquals("282297a0228f48cd3fc6a55de6316f31422f5d17", res)
nova chamada: assertEquals("282297a0228f48cd3fc6a55de6316f31422f5d17", res, "Era esperado valores iguais, mas  '282297a0228f48cd3fc6a55de6316f31422f5d17' é diferente de " + " res")
chamada antiga: Assertions.assertEquals("bar", r1)
nova chamada: assertEquals("bar", r1, "Era esperado valores iguais, mas  'bar' é diferente de " + " r1")
chamada antiga: Assertions.assertFalse(sync(al.compareAndSet(-1, 2)))
nova chamada: assertFalse(sync(al.compareAndSet(-1, 2)), "Era esperado falso, mas " + result855 + " <sync(al.compareAndSet(-1, 2))> é verdadeiro ")
chamada antiga: Assertions.assertEquals(0, sync(al.get()).intValue())
nova chamada: assertEquals(0, sync(al.get()).intValue(), "Era esperado valores iguais, mas  0 é diferente de " + result856 + " <sync(al.get()).intValue()>")
chamada antiga: Assertions.assertTrue(sync(al.compareAndSet(0, 2)))
nova chamada: assertTrue(sync(al.compareAndSet(0, 2)), "Era esperado verdadeiro, mas " + result857 + " <sync(al.compareAndSet(0, 2))> é falso")
chamada antiga: Assertions.assertEquals(2, sync(al.get()).intValue())
nova chamada: assertEquals(2, sync(al.get()).intValue(), "Era esperado valores iguais, mas  2 é diferente de " + result858 + " <sync(al.get()).intValue()>")
chamada antiga: Assertions.assertEquals(2, sync(al.getAndIncrement()).intValue())
nova chamada: assertEquals(2, sync(al.getAndIncrement()).intValue(), "Era esperado valores iguais, mas  2 é diferente de " + result859 + " <sync(al.getAndIncrement()).intValue()>")
chamada antiga: Assertions.assertEquals(3, sync(al.get()).intValue())
nova chamada: assertEquals(3, sync(al.get()).intValue(), "Era esperado valores iguais, mas  3 é diferente de " + result860 + " <sync(al.get()).intValue()>")
chamada antiga: Assertions.assertEquals(1, sync(al.incrementAndGet()).intValue())
nova chamada: assertEquals(1, sync(al.incrementAndGet()).intValue(), "Era esperado valores iguais, mas  1 é diferente de " + result861 + " <sync(al.incrementAndGet()).intValue()>")
chamada antiga: Assertions.assertEquals(1, sync(al.get()).intValue())
nova chamada: assertEquals(1, sync(al.get()).intValue(), "Era esperado valores iguais, mas  1 é diferente de " + result862 + " <sync(al.get()).intValue()>")
chamada antiga: Assertions.assertEquals(0, sync(al.getAndIncrement()).intValue())
nova chamada: assertEquals(0, sync(al.getAndIncrement()).intValue(), "Era esperado valores iguais, mas  0 é diferente de " + result863 + " <sync(al.getAndIncrement()).intValue()>")
chamada antiga: Assertions.assertEquals(1, sync(al.get()).intValue())
nova chamada: assertEquals(1, sync(al.get()).intValue(), "Era esperado valores iguais, mas  1 é diferente de " + result864 + " <sync(al.get()).intValue()>")
chamada antiga: Assertions.assertEquals(0, sync(al.get()).intValue())
nova chamada: assertEquals(0, sync(al.get()).intValue(), "Era esperado valores iguais, mas  0 é diferente de " + result865 + " <sync(al.get()).intValue()>")
chamada antiga: Assertions.assertEquals(0, sync(al.getAndIncrement()).intValue())
nova chamada: assertEquals(0, sync(al.getAndIncrement()).intValue(), "Era esperado valores iguais, mas  0 é diferente de " + result866 + " <sync(al.getAndIncrement()).intValue()>")
chamada antiga: Assertions.assertEquals(1, sync(al.get()).intValue())
nova chamada: assertEquals(1, sync(al.get()).intValue(), "Era esperado valores iguais, mas  1 é diferente de " + result867 + " <sync(al.get()).intValue()>")
chamada antiga: Assertions.assertEquals(1, sync(al.getAndDecrement()).intValue())
nova chamada: assertEquals(1, sync(al.getAndDecrement()).intValue(), "Era esperado valores iguais, mas  1 é diferente de " + result868 + " <sync(al.getAndDecrement()).intValue()>")
chamada antiga: Assertions.assertEquals(0, sync(al.get()).intValue())
nova chamada: assertEquals(0, sync(al.get()).intValue(), "Era esperado valores iguais, mas  0 é diferente de " + result869 + " <sync(al.get()).intValue()>")
chamada antiga: Assertions.assertEquals(0, sync(al.getAndIncrement()).intValue())
nova chamada: assertEquals(0, sync(al.getAndIncrement()).intValue(), "Era esperado valores iguais, mas  0 é diferente de " + result870 + " <sync(al.getAndIncrement()).intValue()>")
chamada antiga: Assertions.assertEquals(1, sync(al.getAndSet(12)).intValue())
nova chamada: assertEquals(1, sync(al.getAndSet(12)).intValue(), "Era esperado valores iguais, mas  1 é diferente de " + result871 + " <sync(al.getAndSet(12)).intValue()>")
chamada antiga: Assertions.assertEquals(12, sync(al.get()).intValue())
nova chamada: assertEquals(12, sync(al.get()).intValue(), "Era esperado valores iguais, mas  12 é diferente de " + result872 + " <sync(al.get()).intValue()>")
chamada antiga: Assertions.assertEquals(1, state)
nova chamada: assertEquals(1, state, "Era esperado valores iguais, mas  1 é diferente de " + " state")
chamada antiga: Assertions.assertEquals(Long.MAX_VALUE - 1000, newState)
nova chamada: assertEquals(Long.MAX_VALUE - 1000, newState, "Era esperado valores iguais, mas  Long.MAX_VALUE - 1000 é diferente de " + " newState")
chamada antiga: Assertions.assertEquals(3L, sync(log.count()).longValue())
nova chamada: assertEquals(3L, sync(log.count()).longValue(), "Era esperado valores iguais, mas  3L é diferente de " + result873 + " <sync(log.count()).longValue()>")
chamada antiga: Assertions.assertTrue(sync(hll1.add("foo")))
nova chamada: assertTrue(sync(hll1.add("foo")), "Era esperado verdadeiro, mas " + result874 + " <sync(hll1.add('foo'))> é falso")
chamada antiga: Assertions.assertTrue(sync(hll1.add("bar")))
nova chamada: assertTrue(sync(hll1.add("bar")), "Era esperado verdadeiro, mas " + result875 + " <sync(hll1.add('bar'))> é falso")
chamada antiga: Assertions.assertTrue(sync(hll1.add("zap")))
nova chamada: assertTrue(sync(hll1.add("zap")), "Era esperado verdadeiro, mas " + result876 + " <sync(hll1.add('zap'))> é falso")
chamada antiga: Assertions.assertTrue(sync(hll1.add("a")))
nova chamada: assertTrue(sync(hll1.add("a")), "Era esperado verdadeiro, mas " + result877 + " <sync(hll1.add('a'))> é falso")
chamada antiga: Assertions.assertTrue(sync(hll2.add("a")))
nova chamada: assertTrue(sync(hll2.add("a")), "Era esperado verdadeiro, mas " + result878 + " <sync(hll2.add('a'))> é falso")
chamada antiga: Assertions.assertTrue(sync(hll2.add("b")))
nova chamada: assertTrue(sync(hll2.add("b")), "Era esperado verdadeiro, mas " + result879 + " <sync(hll2.add('b'))> é falso")
chamada antiga: Assertions.assertTrue(sync(hll2.add("c")))
nova chamada: assertTrue(sync(hll2.add("c")), "Era esperado verdadeiro, mas " + result880 + " <sync(hll2.add('c'))> é falso")
chamada antiga: Assertions.assertTrue(sync(hll2.add("foo")))
nova chamada: assertTrue(sync(hll2.add("foo")), "Era esperado verdadeiro, mas " + result881 + " <sync(hll2.add('foo'))> é falso")
chamada antiga: Assertions.assertFalse(sync(hll2.add("c")))
nova chamada: assertFalse(sync(hll2.add("c")), "Era esperado falso, mas " + result882 + " <sync(hll2.add('c'))> é verdadeiro ")
chamada antiga: Assertions.assertEquals(6L, sync(hll3.count()).longValue())
nova chamada: assertEquals(6L, sync(hll3.count()).longValue(), "Era esperado valores iguais, mas  6L é diferente de " + result883 + " <sync(hll3.count()).longValue()>")
chamada antiga: Assertions.assertThrows(NullPointerException.class, () -> {
    RMap<Integer, String> map = getMap("simple12");
    destroy(map);
    map.put(1, null);
})
nova chamada: assertThrows(NullPointerException.class, () -> {
    RMap<Integer, String> map = getMap("simple12");
    destroy(map);
    map.put(1, null);
}, "Era esperado que a exceção  NullPointerException.class fosse lançada, mas não foi")
chamada antiga: Assertions.assertThrows(NullPointerException.class, () -> {
    RMap<Integer, String> map = getMap("simple12");
    destroy(map);
    map.put(null, "1");
})
nova chamada: assertThrows(NullPointerException.class, () -> {
    RMap<Integer, String> map = getMap("simple12");
    destroy(map);
    map.put(null, "1");
}, "Era esperado que a exceção  NullPointerException.class fosse lançada, mas não foi")
chamada antiga: Assertions.assertTimeout(Duration.ofSeconds(5), () -> {
    RMap<String, SimpleObjectWithoutDefaultConstructor> map = getMap("deserializationFailure", new JsonJacksonCodec());
    Assumptions.assumeTrue(!(map instanceof RLocalCachedMap));
    SimpleObjectWithoutDefaultConstructor object = new SimpleObjectWithoutDefaultConstructor("test-val");
    assertThat(object.getTestField()).isEqualTo("test-val");
    map.put("test-key", object);
    try {
        map.get("test-key");
        Assertions.fail("Expected exception from map.get() call");
    } catch (Exception e) {
        e.printStackTrace();
    }
    destroy(map);
})
nova chamada: assertTimeout(Duration.ofSeconds(5), () -> {
    RMap<String, SimpleObjectWithoutDefaultConstructor> map = getMap("deserializationFailure", new JsonJacksonCodec());
    Assumptions.assumeTrue(!(map instanceof RLocalCachedMap));
    SimpleObjectWithoutDefaultConstructor object = new SimpleObjectWithoutDefaultConstructor("test-val");
    assertThat(object.getTestField()).isEqualTo("test-val");
    map.put("test-key", object);
    try {
        map.get("test-key");
        Assertions.fail("Expected exception from map.get() call");
    } catch (Exception e) {
        e.printStackTrace();
    }
    destroy(map);
}, "Era esperado que o tempo de execução " + result884 + " <Duration.ofSeconds(5)> não fosse ultrapassado, mas foi")
chamada antiga: Assertions.assertNotNull(sync(bucket.get()))
nova chamada: assertNotNull(sync(bucket.get()), "Era esperado não nulo, mas " + result885 + " <sync(bucket.get())> é nulo")
chamada antiga: Assertions.assertNull(sync(bucket.get()))
nova chamada: assertNull(sync(bucket.get()), "Era esperado nulo, mas " + result886 + " <sync(bucket.get())> não é nulo")
chamada antiga: Assertions.assertTrue(sync(bucket.renamenx("test1")))
nova chamada: assertTrue(sync(bucket.renamenx("test1")), "Era esperado verdadeiro, mas " + result887 + " <sync(bucket.renamenx('test1'))> é falso")
chamada antiga: Assertions.assertNull(sync(oldBucket.get()))
nova chamada: assertNull(sync(oldBucket.get()), "Era esperado nulo, mas " + result888 + " <sync(oldBucket.get())> não é nulo")
chamada antiga: Assertions.assertEquals("someValue", sync(newBucket.get()))
nova chamada: assertEquals("someValue", sync(newBucket.get()), "Era esperado valores iguais, mas  'someValue' é diferente de " + result889 + " <sync(newBucket.get())>")
chamada antiga: Assertions.assertFalse(sync(newBucket.renamenx("test2")))
nova chamada: assertFalse(sync(newBucket.renamenx("test2")), "Era esperado falso, mas " + result890 + " <sync(newBucket.renamenx('test2'))> é verdadeiro ")
chamada antiga: Assertions.assertNull(sync(oldBucket.get()))
nova chamada: assertNull(sync(oldBucket.get()), "Era esperado nulo, mas " + result891 + " <sync(oldBucket.get())> não é nulo")
chamada antiga: Assertions.assertEquals("someValue", sync(newBucket.get()))
nova chamada: assertEquals("someValue", sync(newBucket.get()), "Era esperado valores iguais, mas  'someValue' é diferente de " + result892 + " <sync(newBucket.get())>")
chamada antiga: Assertions.assertNull(sync(bucket.get()))
nova chamada: assertNull(sync(bucket.get()), "Era esperado nulo, mas " + result893 + " <sync(bucket.get())> não é nulo")
chamada antiga: Assertions.assertEquals(value, sync(bucket.get()))
nova chamada: assertEquals(value, sync(bucket.get()), "Era esperado valores iguais, mas  value é diferente de " + result894 + " <sync(bucket.get())>")
chamada antiga: Assertions.assertEquals(value, sync(bucket.get()))
nova chamada: assertEquals(value, sync(bucket.get()), "Era esperado valores iguais, mas  value é diferente de " + result895 + " <sync(bucket.get())>")
chamada antiga: Assertions.assertTrue(sync(bucket.delete()))
nova chamada: assertTrue(sync(bucket.delete()), "Era esperado verdadeiro, mas " + result896 + " <sync(bucket.delete())> é falso")
chamada antiga: Assertions.assertNull(sync(bucket.get()))
nova chamada: assertNull(sync(bucket.get()), "Era esperado nulo, mas " + result897 + " <sync(bucket.get())> não é nulo")
chamada antiga: Assertions.assertFalse(sync(bucket.delete()))
nova chamada: assertFalse(sync(bucket.delete()), "Era esperado falso, mas " + result898 + " <sync(bucket.delete())> é verdadeiro ")
chamada antiga: Assertions.assertNull(sync(bucket.get()))
nova chamada: assertNull(sync(bucket.get()), "Era esperado nulo, mas " + result899 + " <sync(bucket.get())> não é nulo")
chamada antiga: Assertions.assertEquals(value, sync(bucket.get()))
nova chamada: assertEquals(value, sync(bucket.get()), "Era esperado valores iguais, mas  value é diferente de " + result900 + " <sync(bucket.get())>")
chamada antiga: Assertions.assertTrue(sync(bucket.isExists()))
nova chamada: assertTrue(sync(bucket.isExists()), "Era esperado verdadeiro, mas " + result901 + " <sync(bucket.isExists())> é falso")
chamada antiga: Assertions.assertNull(sync(bucket.get()))
nova chamada: assertNull(sync(bucket.get()), "Era esperado nulo, mas " + result902 + " <sync(bucket.get())> não é nulo")
chamada antiga: Assertions.assertEquals(value, sync(bucket.get()))
nova chamada: assertEquals(value, sync(bucket.get()), "Era esperado valores iguais, mas  value é diferente de " + result903 + " <sync(bucket.get())>")
chamada antiga: Assertions.assertTrue(sync(bucket.isExists()))
nova chamada: assertTrue(sync(bucket.isExists()), "Era esperado verdadeiro, mas " + result904 + " <sync(bucket.isExists())> é falso")
chamada antiga: Assertions.assertFalse(sync(bucket.isExists()))
nova chamada: assertFalse(sync(bucket.isExists()), "Era esperado falso, mas " + result905 + " <sync(bucket.isExists())> é verdadeiro ")
chamada antiga: Assertions.assertEquals(2, buckets.size())
nova chamada: assertEquals(2, buckets.size(), "Era esperado valores iguais, mas  2 é diferente de " + result906 + " <buckets.size()>")
chamada antiga: Assertions.assertTrue(names.contains(buckets.get(0).getName()))
nova chamada: assertTrue(names.contains(buckets.get(0).getName()), "Era esperado verdadeiro, mas " + result907 + " <names.contains(buckets.get(0).getName())> é falso")
chamada antiga: Assertions.assertTrue(names.contains(buckets.get(1).getName()))
nova chamada: assertTrue(names.contains(buckets.get(1).getName()), "Era esperado verdadeiro, mas " + result908 + " <names.contains(buckets.get(1).getName())> é falso")
chamada antiga: Assertions.assertTrue(vals.contains(sync(buckets.get(0).get())))
nova chamada: assertTrue(vals.contains(sync(buckets.get(0).get())), "Era esperado verdadeiro, mas " + result909 + " <vals.contains(sync(buckets.get(0).get()))> é falso")
chamada antiga: Assertions.assertTrue(vals.contains(sync(buckets.get(1).get())))
nova chamada: assertTrue(vals.contains(sync(buckets.get(1).get())), "Era esperado verdadeiro, mas " + result910 + " <vals.contains(sync(buckets.get(1).get()))> é falso")
chamada antiga: Assertions.assertEquals(0, queue1.size())
nova chamada: assertEquals(0, queue1.size(), "Era esperado valores iguais, mas  0 é diferente de " + result911 + " <queue1.size()>")
chamada antiga: Assertions.assertEquals(1, queue1.size())
nova chamada: assertEquals(1, queue1.size(), "Era esperado valores iguais, mas  1 é diferente de " + result912 + " <queue1.size()>")
chamada antiga: Assertions.assertThrows(RuntimeException.class, () -> {
    Config config = createConfig();
    config.setCodec(new ErrorsCodec());
    RedissonClient redisson = Redisson.create(config);
    redisson.getBucket("1234").set("1234");
})
nova chamada: assertThrows(RuntimeException.class, () -> {
    Config config = createConfig();
    config.setCodec(new ErrorsCodec());
    RedissonClient redisson = Redisson.create(config);
    redisson.getBucket("1234").set("1234");
}, "Era esperado que a exceção  RuntimeException.class fosse lançada, mas não foi")
chamada antiga: Assertions.assertThrows(RuntimeException.class, () -> {
    redisson.getBucket("1234").set("1234");
    Config config = createConfig();
    config.setCodec(new ErrorsCodec());
    RedissonClient redisson = Redisson.create(config);
    redisson.getBucket("1234").get();
})
nova chamada: assertThrows(RuntimeException.class, () -> {
    redisson.getBucket("1234").set("1234");
    Config config = createConfig();
    config.setCodec(new ErrorsCodec());
    RedissonClient redisson = Redisson.create(config);
    redisson.getBucket("1234").get();
}, "Era esperado que a exceção  RuntimeException.class fosse lançada, mas não foi")
chamada antiga: Assertions.assertThrows(IllegalArgumentException.class, () -> {
    RBloomFilter<String> filter = redisson.getBloomFilter("filter");
    filter.tryInit(1, -1);
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    RBloomFilter<String> filter = redisson.getBloomFilter("filter");
    filter.tryInit(1, -1);
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: Assertions.assertThrows(IllegalArgumentException.class, () -> {
    RBloomFilter<String> filter = redisson.getBloomFilter("filter");
    filter.tryInit(1, 2);
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    RBloomFilter<String> filter = redisson.getBloomFilter("filter");
    filter.tryInit(1, 2);
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: Assertions.assertThrows(IllegalArgumentException.class, () -> {
    RBloomFilter<String> filter = redisson.getBloomFilter("filter");
    filter.tryInit(1, 1);
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    RBloomFilter<String> filter = redisson.getBloomFilter("filter");
    filter.tryInit(1, 1);
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: Assertions.assertThrows(IllegalStateException.class, () -> {
    RBloomFilter<String> filter = redisson.getBloomFilter("filter");
    filter.getExpectedInsertions();
})
nova chamada: assertThrows(IllegalStateException.class, () -> {
    RBloomFilter<String> filter = redisson.getBloomFilter("filter");
    filter.getExpectedInsertions();
}, "Era esperado que a exceção  IllegalStateException.class fosse lançada, mas não foi")
chamada antiga: Assertions.assertThrows(IllegalStateException.class, () -> {
    RBloomFilter<String> filter = redisson.getBloomFilter("filter");
    filter.contains("32");
})
nova chamada: assertThrows(IllegalStateException.class, () -> {
    RBloomFilter<String> filter = redisson.getBloomFilter("filter");
    filter.contains("32");
}, "Era esperado que a exceção  IllegalStateException.class fosse lançada, mas não foi")
chamada antiga: Assertions.assertThrows(IllegalStateException.class, () -> {
    RBloomFilter<String> filter = redisson.getBloomFilter("filter");
    filter.add("123");
})
nova chamada: assertThrows(IllegalStateException.class, () -> {
    RBloomFilter<String> filter = redisson.getBloomFilter("filter");
    filter.add("123");
}, "Era esperado que a exceção  IllegalStateException.class fosse lançada, mas não foi")
chamada antiga: Assertions.assertEquals(t, cache.get("1"))
nova chamada: assertEquals(t, cache.get("1"), "Era esperado valores iguais, mas  t é diferente de " + result913 + " <cache.get('1')>")
chamada antiga: Assertions.assertEquals("2", cache.get("1"))
nova chamada: assertEquals("2", cache.get("1"), "Era esperado valores iguais, mas  '2' é diferente de " + result914 + " <cache.get('1')>")
chamada antiga: Assertions.assertEquals("value", result)
nova chamada: assertEquals("value", result, "Era esperado valores iguais, mas  'value' é diferente de " + " result")
chamada antiga: Assertions.assertNull(cache.get("key"))
nova chamada: assertNull(cache.get("key"), "Era esperado nulo, mas " + result915 + " <cache.get('key')> não é nulo")
chamada antiga: Assertions.assertNull(cache.get("key"))
nova chamada: assertNull(cache.get("key"), "Era esperado nulo, mas " + result916 + " <cache.get('key')> não é nulo")
chamada antiga: Assertions.assertEquals("2", cache.get("1"))
nova chamada: assertEquals("2", cache.get("1"), "Era esperado valores iguais, mas  '2' é diferente de " + result917 + " <cache.get('1')>")
chamada antiga: Assertions.assertEquals("2", cache.get("1"))
nova chamada: assertEquals("2", cache.get("1"), "Era esperado valores iguais, mas  '2' é diferente de " + result918 + " <cache.get('1')>")
chamada antiga: Assertions.assertNotNull(cache.get(key))
nova chamada: assertNotNull(cache.get(key), "Era esperado não nulo, mas " + result919 + " <cache.get(key)> é nulo")
chamada antiga: Assertions.assertNull(cache.get(key))
nova chamada: assertNull(cache.get(key), "Era esperado nulo, mas " + result920 + " <cache.get(key)> não é nulo")
chamada antiga: assertEquals("111", t.getMyClass().getValue())
nova chamada: assertEquals("111", t.getMyClass().getValue(), "Era esperado valores iguais, mas  '111' é diferente de " + result921 + " <t.getMyClass().getValue()>")
chamada antiga: assertEquals("1", t.getName())
nova chamada: assertEquals("1", t.getName(), "Era esperado valores iguais, mas  '1' é diferente de " + result922 + " <t.getName()>")
chamada antiga: assertTrue(redisson.getMap(scheme.getName(TestREntity.class, "1")).isExists())
nova chamada: assertTrue(redisson.getMap(scheme.getName(TestREntity.class, "1")).isExists(), "Era esperado verdadeiro, mas " + result923 + " <redisson.getMap(scheme.getName(TestREntity.class, '1')).isExists()> é falso")
chamada antiga: assertEquals("3333", t.getName())
nova chamada: assertEquals("3333", t.getName(), "Era esperado valores iguais, mas  '3333' é diferente de " + result924 + " <t.getName()>")
chamada antiga: assertTrue(redisson.getMap(scheme.getName(TestREntity.class, "3333")).isExists())
nova chamada: assertTrue(redisson.getMap(scheme.getName(TestREntity.class, "3333")).isExists(), "Era esperado verdadeiro, mas " + result925 + " <redisson.getMap(scheme.getName(TestREntity.class, '3333')).isExists()> é falso")
chamada antiga: assertEquals("111", t.getValue())
nova chamada: assertEquals("111", t.getValue(), "Era esperado valores iguais, mas  '111' é diferente de " + result926 + " <t.getValue()>")
chamada antiga: assertTrue(redisson.getMap(scheme.getName(TestREntity.class, "3333")).isExists())
nova chamada: assertTrue(redisson.getMap(scheme.getName(TestREntity.class, "3333")).isExists(), "Era esperado verdadeiro, mas " + result927 + " <redisson.getMap(scheme.getName(TestREntity.class, '3333')).isExists()> é falso")
chamada antiga: assertTrue(!redisson.getMap(scheme.getName(TestREntity.class, "1")).isExists())
nova chamada: assertTrue(!redisson.getMap(scheme.getName(TestREntity.class, "1")).isExists(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("111", redisson.getMap(scheme.getName(TestREntity.class, "3333")).get("value"))
nova chamada: assertEquals("111", redisson.getMap(scheme.getName(TestREntity.class, "3333")).get("value"), "Era esperado valores iguais, mas  '111' é diferente de " + result928 + " <redisson.getMap(scheme.getName(TestREntity.class, '3333')).get('value')>")
chamada antiga: assertEquals("123", t2.getValue().get("field"))
nova chamada: assertEquals("123", t2.getValue().get("field"), "Era esperado valores iguais, mas  '123' é diferente de " + result929 + " <t2.getValue().get('field')>")
chamada antiga: assertEquals("333", t3.getValue().get("field"))
nova chamada: assertEquals("333", t3.getValue().get("field"), "Era esperado valores iguais, mas  '333' é diferente de " + result930 + " <t3.getValue().get('field')>")
chamada antiga: assertEquals("hello", t3.getValue().get("field"))
nova chamada: assertEquals("hello", t3.getValue().get("field"), "Era esperado valores iguais, mas  'hello' é diferente de " + result931 + " <t3.getValue().get('field')>")
chamada antiga: assertEquals("123", s.<TestREntityWithRMap>get(TestREntityWithRMap.class, "2").getValue().get("field"))
nova chamada: assertEquals("123", s.<TestREntityWithRMap>get(TestREntityWithRMap.class, "2").getValue().get("field"), "Era esperado valores iguais, mas  '123' é diferente de " + result932 + " <s.<TestREntityWithRMap>get(TestREntityWithRMap.class, '2').getValue().get('field')>")
chamada antiga: assertEquals("333", s.<TestREntityWithRMap>get(TestREntityWithRMap.class, "2").getValue().get("field"))
nova chamada: assertEquals("333", s.<TestREntityWithRMap>get(TestREntityWithRMap.class, "2").getValue().get("field"), "Era esperado valores iguais, mas  '333' é diferente de " + result933 + " <s.<TestREntityWithRMap>get(TestREntityWithRMap.class, '2').getValue().get('field')>")
chamada antiga: assertEquals("123", s.get(TestREntityWithRMap.class, "111").getValue().get("field"))
nova chamada: assertEquals("123", s.get(TestREntityWithRMap.class, "111").getValue().get("field"), "Era esperado valores iguais, mas  '123' é diferente de " + result934 + " <s.get(TestREntityWithRMap.class, '111').getValue().get('field')>")
chamada antiga: assertEquals("123", s.get(TestREntityValueNested.class, "122").getValue().getValue().get("field"))
nova chamada: assertEquals("123", s.get(TestREntityValueNested.class, "122").getValue().getValue().get("field"), "Era esperado valores iguais, mas  '123' é diferente de " + result935 + " <s.get(TestREntityValueNested.class, '122').getValue().getValue().get('field')>")
chamada antiga: assertTrue(Objects.equals("55555", t.getId()))
nova chamada: assertTrue(Objects.equals("55555", t.getId()), "Era esperado verdadeiro, mas " + result936 + " <Objects.equals('55555', t.getId())> é falso")
chamada antiga: assertTrue(Objects.equals(90909l, t.getId()))
nova chamada: assertTrue(Objects.equals(90909l, t.getId()), "Era esperado verdadeiro, mas " + result937 + " <Objects.equals(90909l, t.getId())> é falso")
chamada antiga: assertTrue(Objects.equals(90909, t.getId()))
nova chamada: assertTrue(Objects.equals(90909, t.getId()), "Era esperado verdadeiro, mas " + result938 + " <Objects.equals(90909, t.getId())> é falso")
chamada antiga: assertTrue(Objects.equals(new ObjectId(9090909), t.getId()))
nova chamada: assertTrue(Objects.equals(new ObjectId(9090909), t.getId()), "Era esperado verdadeiro, mas " + result939 + " <Objects.equals(new ObjectId(9090909), t.getId())> é falso")
chamada antiga: assertEquals(new Byte("0"), Byte.valueOf(t.getId().toString()))
nova chamada: assertEquals(new Byte("0"), Byte.valueOf(t.getId().toString()), "Era esperado valores iguais, mas  new Byte('0') é diferente de " + result940 + " <Byte.valueOf(t.getId().toString())>")
chamada antiga: assertEquals((byte) 90, Byte.parseByte(t.getId().toString()))
nova chamada: assertEquals((byte) 90, Byte.parseByte(t.getId().toString()), "Era esperado valores iguais, mas  (byte) 90 é diferente de " + result941 + " <Byte.parseByte(t.getId().toString())>")
chamada antiga: assertTrue(l.removeAll((List) t.getId()))
nova chamada: assertTrue(l.removeAll((List) t.getId()), "Era esperado verdadeiro, mas " + result942 + " <l.removeAll((List) t.getId())> é falso")
chamada antiga: assertTrue(l.isEmpty())
nova chamada: assertTrue(l.isEmpty(), "Era esperado verdadeiro, mas " + result943 + " <l.isEmpty()> é falso")
chamada antiga: assertEquals(3, redisson.getKeys().count())
nova chamada: assertEquals(3, redisson.getKeys().count(), "Era esperado valores iguais, mas  3 é diferente de " + result944 + " <redisson.getKeys().count()>")
chamada antiga: assertEquals(1, persisted.getValues().size())
nova chamada: assertEquals(1, persisted.getValues().size(), "Era esperado valores iguais, mas  1 é diferente de " + result945 + " <persisted.getValues().size()>")
chamada antiga: assertEquals("123", ((TestREntity) persisted.getContent()).getName())
nova chamada: assertEquals("123", ((TestREntity) persisted.getContent()).getName(), "Era esperado valores iguais, mas  '123' é diferente de " + result946 + " <((TestREntity) persisted.getContent()).getName()>")
chamada antiga: assertEquals(new ObjectId(100), persisted.getId())
nova chamada: assertEquals(new ObjectId(100), persisted.getId(), "Era esperado valores iguais, mas  new ObjectId(100) é diferente de " + result947 + " <persisted.getId()>")
chamada antiga: assertEquals("VALUE", persisted.getValue())
nova chamada: assertEquals("VALUE", persisted.getValue(), "Era esperado valores iguais, mas  'VALUE' é diferente de " + result948 + " <persisted.getValue()>")
chamada antiga: assertEquals(new ObjectId(100), merged.getId())
nova chamada: assertEquals(new ObjectId(100), merged.getId(), "Era esperado valores iguais, mas  new ObjectId(100) é diferente de " + result949 + " <merged.getId()>")
chamada antiga: assertEquals("VALUE", merged.getValue())
nova chamada: assertEquals("VALUE", merged.getValue(), "Era esperado valores iguais, mas  'VALUE' é diferente de " + result950 + " <merged.getValue()>")
chamada antiga: assertNull(ts.getValue())
nova chamada: assertNull(ts.getValue(), "Era esperado nulo, mas " + result951 + " <ts.getValue()> não é nulo")
chamada antiga: assertEquals("VALUE", merged.getValue())
nova chamada: assertEquals("VALUE", merged.getValue(), "Era esperado valores iguais, mas  'VALUE' é diferente de " + result952 + " <merged.getValue()>")
chamada antiga: assertEquals("CODE", merged.getCode())
nova chamada: assertEquals("CODE", merged.getCode(), "Era esperado valores iguais, mas  'CODE' é diferente de " + result953 + " <merged.getCode()>")
chamada antiga: assertEquals("VALUE", merged.getValue())
nova chamada: assertEquals("VALUE", merged.getValue(), "Era esperado valores iguais, mas  'VALUE' é diferente de " + result954 + " <merged.getValue()>")
chamada antiga: assertEquals("CODE", merged.getCode())
nova chamada: assertEquals("CODE", merged.getCode(), "Era esperado valores iguais, mas  'CODE' é diferente de " + result955 + " <merged.getCode()>")
chamada antiga: assertEquals(ts, detach)
nova chamada: assertEquals(ts, detach, "Era esperado valores iguais, mas  ts é diferente de " + " detach")
chamada antiga: assertFalse(service.isExists(new Object()))
nova chamada: assertFalse(service.isExists(new Object()), "Era esperado falso, mas " + result956 + " <service.isExists(new Object())> é verdadeiro ")
chamada antiga: assertFalse(service.isExists(service.get(TestClass.class, new ObjectId(100))))
nova chamada: assertFalse(service.isExists(service.get(TestClass.class, new ObjectId(100))), "Era esperado falso, mas " + result957 + " <service.isExists(service.get(TestClass.class, new ObjectId(100)))> é verdadeiro ")
chamada antiga: assertFalse(service.isExists(ts))
nova chamada: assertFalse(service.isExists(ts), "Era esperado falso, mas " + result958 + " <service.isExists(ts)> é verdadeiro ")
chamada antiga: assertTrue(service.isExists(service.get(TestClass.class, new ObjectId(100))))
nova chamada: assertTrue(service.isExists(service.get(TestClass.class, new ObjectId(100))), "Era esperado verdadeiro, mas " + result959 + " <service.isExists(service.get(TestClass.class, new ObjectId(100)))> é falso")
chamada antiga: assertFalse(service.isExists(ts))
nova chamada: assertFalse(service.isExists(ts), "Era esperado falso, mas " + result960 + " <service.isExists(ts)> é verdadeiro ")
chamada antiga: assertTrue(service.isExists(persisted))
nova chamada: assertTrue(service.isExists(persisted), "Era esperado verdadeiro, mas " + result961 + " <service.isExists(persisted)> é falso")
chamada antiga: assertFalse(service.isLiveObject(ts))
nova chamada: assertFalse(service.isLiveObject(ts), "Era esperado falso, mas " + result962 + " <service.isLiveObject(ts)> é verdadeiro ")
chamada antiga: assertFalse(service.isLiveObject(ts))
nova chamada: assertFalse(service.isLiveObject(ts), "Era esperado falso, mas " + result963 + " <service.isLiveObject(ts)> é verdadeiro ")
chamada antiga: assertTrue(service.isLiveObject(persisted))
nova chamada: assertTrue(service.isLiveObject(persisted), "Era esperado verdadeiro, mas " + result964 + " <service.isLiveObject(persisted)> é falso")
chamada antiga: assertEquals(new ObjectId(100), liveObject.getLiveObjectId())
nova chamada: assertEquals(new ObjectId(100), liveObject.getLiveObjectId(), "Era esperado valores iguais, mas  new ObjectId(100) é diferente de " + result965 + " <liveObject.getLiveObjectId()>")
chamada antiga: assertTrue(service.isClassRegistered(TestClass.class))
nova chamada: assertTrue(service.isClassRegistered(TestClass.class), "Era esperado verdadeiro, mas " + result966 + " <service.isClassRegistered(TestClass.class)> é falso")
chamada antiga: assertTrue(newService.isClassRegistered(TestClass.class))
nova chamada: assertTrue(newService.isClassRegistered(TestClass.class), "Era esperado verdadeiro, mas " + result967 + " <newService.isClassRegistered(TestClass.class)> é falso")
chamada antiga: assertFalse(newRedisson.getLiveObjectService().isClassRegistered(TestClass.class))
nova chamada: assertFalse(newRedisson.getLiveObjectService().isClassRegistered(TestClass.class), "Era esperado falso, mas " + result968 + " <newRedisson.getLiveObjectService().isClassRegistered(TestClass.class)> é verdadeiro ")
chamada antiga: assertTrue(service.isClassRegistered(TestClass.class))
nova chamada: assertTrue(service.isClassRegistered(TestClass.class), "Era esperado verdadeiro, mas " + result969 + " <service.isClassRegistered(TestClass.class)> é falso")
chamada antiga: assertFalse(service.isClassRegistered(TestClass.class))
nova chamada: assertFalse(service.isClassRegistered(TestClass.class), "Era esperado falso, mas " + result970 + " <service.isClassRegistered(TestClass.class)> é verdadeiro ")
chamada antiga: assertFalse(newService.isClassRegistered(TestClass.class))
nova chamada: assertFalse(newService.isClassRegistered(TestClass.class), "Era esperado falso, mas " + result971 + " <newService.isClassRegistered(TestClass.class)> é verdadeiro ")
chamada antiga: assertTrue(newRedisson.getLiveObjectService().isClassRegistered(TestClass.class))
nova chamada: assertTrue(newRedisson.getLiveObjectService().isClassRegistered(TestClass.class), "Era esperado verdadeiro, mas " + result972 + " <newRedisson.getLiveObjectService().isClassRegistered(TestClass.class)> é falso")
chamada antiga: assertFalse(service.isClassRegistered(TestClass.class))
nova chamada: assertFalse(service.isClassRegistered(TestClass.class), "Era esperado falso, mas " + result973 + " <service.isClassRegistered(TestClass.class)> é verdadeiro ")
chamada antiga: assertFalse(newService.isClassRegistered(TestClass.class))
nova chamada: assertFalse(newService.isClassRegistered(TestClass.class), "Era esperado falso, mas " + result974 + " <newService.isClassRegistered(TestClass.class)> é verdadeiro ")
chamada antiga: assertNull(service.get(TestClass.class, new ObjectId(100)))
nova chamada: assertNull(service.get(TestClass.class, new ObjectId(100)), "Era esperado nulo, mas " + result975 + " <service.get(TestClass.class, new ObjectId(100))> não é nulo")
chamada antiga: assertNotNull(service.get(TestClass.class, new ObjectId(100)))
nova chamada: assertNotNull(service.get(TestClass.class, new ObjectId(100)), "Era esperado não nulo, mas " + result976 + " <service.get(TestClass.class, new ObjectId(100))> é nulo")
chamada antiga: assertNotNull(service.get(TestClass.class, new ObjectId(100)))
nova chamada: assertNotNull(service.get(TestClass.class, new ObjectId(100)), "Era esperado não nulo, mas " + result977 + " <service.get(TestClass.class, new ObjectId(100))> é nulo")
chamada antiga: assertTrue(service.isExists(persisted))
nova chamada: assertTrue(service.isExists(persisted), "Era esperado verdadeiro, mas " + result978 + " <service.isExists(persisted)> é falso")
chamada antiga: assertFalse(service.isExists(persisted))
nova chamada: assertFalse(service.isExists(persisted), "Era esperado falso, mas " + result979 + " <service.isExists(persisted)> é verdadeiro ")
chamada antiga: assertTrue(service.isExists(persisted))
nova chamada: assertTrue(service.isExists(persisted), "Era esperado verdadeiro, mas " + result980 + " <service.isExists(persisted)> é falso")
chamada antiga: assertFalse(service.isExists(persisted))
nova chamada: assertFalse(service.isExists(persisted), "Era esperado falso, mas " + result981 + " <service.isExists(persisted)> é verdadeiro ")
chamada antiga: assertEquals(4, uuid.version())
nova chamada: assertEquals(4, uuid.version(), "Era esperado valores iguais, mas  4 é diferente de " + result982 + " <uuid.version()>")
chamada antiga: assertEquals(new Long(1), tc1.getName())
nova chamada: assertEquals(new Long(1), tc1.getName(), "Era esperado valores iguais, mas  new Long(1) é diferente de " + result983 + " <tc1.getName()>")
chamada antiga: assertEquals(new Long(1), tc2.getName())
nova chamada: assertEquals(new Long(1), tc2.getName(), "Era esperado valores iguais, mas  new Long(1) é diferente de " + result984 + " <tc2.getName()>")
chamada antiga: assertFalse(HashMap.class.isAssignableFrom(ts.getContent().getClass()))
nova chamada: assertFalse(HashMap.class.isAssignableFrom(ts.getContent().getClass()), "Era esperado falso, mas " + result985 + " <HashMap.class.isAssignableFrom(ts.getContent().getClass())> é verdadeiro ")
chamada antiga: assertTrue(RMap.class.isAssignableFrom(ts.getContent().getClass()))
nova chamada: assertTrue(RMap.class.isAssignableFrom(ts.getContent().getClass()), "Era esperado verdadeiro, mas " + result986 + " <RMap.class.isAssignableFrom(ts.getContent().getClass())> é falso")
chamada antiga: assertFalse(HashSet.class.isAssignableFrom(ts.getContent().getClass()))
nova chamada: assertFalse(HashSet.class.isAssignableFrom(ts.getContent().getClass()), "Era esperado falso, mas " + result987 + " <HashSet.class.isAssignableFrom(ts.getContent().getClass())> é verdadeiro ")
chamada antiga: assertTrue(RSet.class.isAssignableFrom(ts.getContent().getClass()))
nova chamada: assertTrue(RSet.class.isAssignableFrom(ts.getContent().getClass()), "Era esperado verdadeiro, mas " + result988 + " <RSet.class.isAssignableFrom(ts.getContent().getClass())> é falso")
chamada antiga: assertFalse(TreeSet.class.isAssignableFrom(ts.getContent().getClass()))
nova chamada: assertFalse(TreeSet.class.isAssignableFrom(ts.getContent().getClass()), "Era esperado falso, mas " + result989 + " <TreeSet.class.isAssignableFrom(ts.getContent().getClass())> é verdadeiro ")
chamada antiga: assertTrue(RSortedSet.class.isAssignableFrom(ts.getContent().getClass()))
nova chamada: assertTrue(RSortedSet.class.isAssignableFrom(ts.getContent().getClass()), "Era esperado verdadeiro, mas " + result990 + " <RSortedSet.class.isAssignableFrom(ts.getContent().getClass())> é falso")
chamada antiga: assertFalse(ArrayList.class.isAssignableFrom(ts.getContent().getClass()))
nova chamada: assertFalse(ArrayList.class.isAssignableFrom(ts.getContent().getClass()), "Era esperado falso, mas " + result991 + " <ArrayList.class.isAssignableFrom(ts.getContent().getClass())> é verdadeiro ")
chamada antiga: assertTrue(RList.class.isAssignableFrom(ts.getContent().getClass()))
nova chamada: assertTrue(RList.class.isAssignableFrom(ts.getContent().getClass()), "Era esperado verdadeiro, mas " + result992 + " <RList.class.isAssignableFrom(ts.getContent().getClass())> é falso")
chamada antiga: assertFalse(ConcurrentHashMap.class.isAssignableFrom(ts.getContent().getClass()))
nova chamada: assertFalse(ConcurrentHashMap.class.isAssignableFrom(ts.getContent().getClass()), "Era esperado falso, mas " + result993 + " <ConcurrentHashMap.class.isAssignableFrom(ts.getContent().getClass())> é verdadeiro ")
chamada antiga: assertTrue(RMap.class.isAssignableFrom(ts.getContent().getClass()))
nova chamada: assertTrue(RMap.class.isAssignableFrom(ts.getContent().getClass()), "Era esperado verdadeiro, mas " + result994 + " <RMap.class.isAssignableFrom(ts.getContent().getClass())> é falso")
chamada antiga: assertFalse(ArrayBlockingQueue.class.isAssignableFrom(ts.getContent().getClass()))
nova chamada: assertFalse(ArrayBlockingQueue.class.isAssignableFrom(ts.getContent().getClass()), "Era esperado falso, mas " + result995 + " <ArrayBlockingQueue.class.isAssignableFrom(ts.getContent().getClass())> é verdadeiro ")
chamada antiga: assertTrue(RBlockingQueue.class.isAssignableFrom(ts.getContent().getClass()))
nova chamada: assertTrue(RBlockingQueue.class.isAssignableFrom(ts.getContent().getClass()), "Era esperado verdadeiro, mas " + result996 + " <RBlockingQueue.class.isAssignableFrom(ts.getContent().getClass())> é falso")
chamada antiga: assertFalse(ConcurrentLinkedQueue.class.isAssignableFrom(ts.getContent().getClass()))
nova chamada: assertFalse(ConcurrentLinkedQueue.class.isAssignableFrom(ts.getContent().getClass()), "Era esperado falso, mas " + result997 + " <ConcurrentLinkedQueue.class.isAssignableFrom(ts.getContent().getClass())> é verdadeiro ")
chamada antiga: assertTrue(RQueue.class.isAssignableFrom(ts.getContent().getClass()))
nova chamada: assertTrue(RQueue.class.isAssignableFrom(ts.getContent().getClass()), "Era esperado verdadeiro, mas " + result998 + " <RQueue.class.isAssignableFrom(ts.getContent().getClass())> é falso")
chamada antiga: assertFalse(LinkedBlockingDeque.class.isAssignableFrom(ts.getContent().getClass()))
nova chamada: assertFalse(LinkedBlockingDeque.class.isAssignableFrom(ts.getContent().getClass()), "Era esperado falso, mas " + result999 + " <LinkedBlockingDeque.class.isAssignableFrom(ts.getContent().getClass())> é verdadeiro ")
chamada antiga: assertTrue(RBlockingDeque.class.isAssignableFrom(ts.getContent().getClass()))
nova chamada: assertTrue(RBlockingDeque.class.isAssignableFrom(ts.getContent().getClass()), "Era esperado verdadeiro, mas " + result1000 + " <RBlockingDeque.class.isAssignableFrom(ts.getContent().getClass())> é falso")
chamada antiga: assertFalse(LinkedList.class.isAssignableFrom(ts.getContent().getClass()))
nova chamada: assertFalse(LinkedList.class.isAssignableFrom(ts.getContent().getClass()), "Era esperado falso, mas " + result1001 + " <LinkedList.class.isAssignableFrom(ts.getContent().getClass())> é verdadeiro ")
chamada antiga: assertTrue(RDeque.class.isAssignableFrom(ts.getContent().getClass()))
nova chamada: assertTrue(RDeque.class.isAssignableFrom(ts.getContent().getClass()), "Era esperado verdadeiro, mas " + result1002 + " <RDeque.class.isAssignableFrom(ts.getContent().getClass())> é falso")
chamada antiga: assertTrue(HashMap.class.isAssignableFrom(ts.getContent().getClass()))
nova chamada: assertTrue(HashMap.class.isAssignableFrom(ts.getContent().getClass()), "Era esperado verdadeiro, mas " + result1003 + " <HashMap.class.isAssignableFrom(ts.getContent().getClass())> é falso")
chamada antiga: assertFalse(RMap.class.isAssignableFrom(ts.getContent().getClass()))
nova chamada: assertFalse(RMap.class.isAssignableFrom(ts.getContent().getClass()), "Era esperado falso, mas " + result1004 + " <RMap.class.isAssignableFrom(ts.getContent().getClass())> é verdadeiro ")
chamada antiga: assertTrue(HashSet.class.isAssignableFrom(ts.getContent().getClass()))
nova chamada: assertTrue(HashSet.class.isAssignableFrom(ts.getContent().getClass()), "Era esperado verdadeiro, mas " + result1005 + " <HashSet.class.isAssignableFrom(ts.getContent().getClass())> é falso")
chamada antiga: assertFalse(RSet.class.isAssignableFrom(ts.getContent().getClass()))
nova chamada: assertFalse(RSet.class.isAssignableFrom(ts.getContent().getClass()), "Era esperado falso, mas " + result1006 + " <RSet.class.isAssignableFrom(ts.getContent().getClass())> é verdadeiro ")
chamada antiga: assertTrue(TreeSet.class.isAssignableFrom(ts.getContent().getClass()))
nova chamada: assertTrue(TreeSet.class.isAssignableFrom(ts.getContent().getClass()), "Era esperado verdadeiro, mas " + result1007 + " <TreeSet.class.isAssignableFrom(ts.getContent().getClass())> é falso")
chamada antiga: assertFalse(RSortedSet.class.isAssignableFrom(ts.getContent().getClass()))
nova chamada: assertFalse(RSortedSet.class.isAssignableFrom(ts.getContent().getClass()), "Era esperado falso, mas " + result1008 + " <RSortedSet.class.isAssignableFrom(ts.getContent().getClass())> é verdadeiro ")
chamada antiga: assertTrue(ArrayList.class.isAssignableFrom(ts.getContent().getClass()))
nova chamada: assertTrue(ArrayList.class.isAssignableFrom(ts.getContent().getClass()), "Era esperado verdadeiro, mas " + result1009 + " <ArrayList.class.isAssignableFrom(ts.getContent().getClass())> é falso")
chamada antiga: assertFalse(RList.class.isAssignableFrom(ts.getContent().getClass()))
nova chamada: assertFalse(RList.class.isAssignableFrom(ts.getContent().getClass()), "Era esperado falso, mas " + result1010 + " <RList.class.isAssignableFrom(ts.getContent().getClass())> é verdadeiro ")
chamada antiga: assertTrue(ConcurrentHashMap.class.isAssignableFrom(ts.getContent().getClass()))
nova chamada: assertTrue(ConcurrentHashMap.class.isAssignableFrom(ts.getContent().getClass()), "Era esperado verdadeiro, mas " + result1011 + " <ConcurrentHashMap.class.isAssignableFrom(ts.getContent().getClass())> é falso")
chamada antiga: assertFalse(RMap.class.isAssignableFrom(ts.getContent().getClass()))
nova chamada: assertFalse(RMap.class.isAssignableFrom(ts.getContent().getClass()), "Era esperado falso, mas " + result1012 + " <RMap.class.isAssignableFrom(ts.getContent().getClass())> é verdadeiro ")
chamada antiga: assertTrue(ConcurrentLinkedQueue.class.isAssignableFrom(ts.getContent().getClass()))
nova chamada: assertTrue(ConcurrentLinkedQueue.class.isAssignableFrom(ts.getContent().getClass()), "Era esperado verdadeiro, mas " + result1013 + " <ConcurrentLinkedQueue.class.isAssignableFrom(ts.getContent().getClass())> é falso")
chamada antiga: assertFalse(RQueue.class.isAssignableFrom(ts.getContent().getClass()))
nova chamada: assertFalse(RQueue.class.isAssignableFrom(ts.getContent().getClass()), "Era esperado falso, mas " + result1014 + " <RQueue.class.isAssignableFrom(ts.getContent().getClass())> é verdadeiro ")
chamada antiga: assertTrue(LinkedBlockingDeque.class.isAssignableFrom(ts.getContent().getClass()))
nova chamada: assertTrue(LinkedBlockingDeque.class.isAssignableFrom(ts.getContent().getClass()), "Era esperado verdadeiro, mas " + result1015 + " <LinkedBlockingDeque.class.isAssignableFrom(ts.getContent().getClass())> é falso")
chamada antiga: assertFalse(RBlockingDeque.class.isAssignableFrom(ts.getContent().getClass()))
nova chamada: assertFalse(RBlockingDeque.class.isAssignableFrom(ts.getContent().getClass()), "Era esperado falso, mas " + result1016 + " <RBlockingDeque.class.isAssignableFrom(ts.getContent().getClass())> é verdadeiro ")
chamada antiga: assertTrue(LinkedList.class.isAssignableFrom(ts.getContent().getClass()))
nova chamada: assertTrue(LinkedList.class.isAssignableFrom(ts.getContent().getClass()), "Era esperado verdadeiro, mas " + result1017 + " <LinkedList.class.isAssignableFrom(ts.getContent().getClass())> é falso")
chamada antiga: assertFalse(RDeque.class.isAssignableFrom(ts.getContent().getClass()))
nova chamada: assertFalse(RDeque.class.isAssignableFrom(ts.getContent().getClass()), "Era esperado falso, mas " + result1018 + " <RDeque.class.isAssignableFrom(ts.getContent().getClass())> é verdadeiro ")
chamada antiga: assertTrue(service.asLiveObject(myObject).isExists())
nova chamada: assertTrue(service.asLiveObject(myObject).isExists(), "Era esperado verdadeiro, mas " + result1019 + " <service.asLiveObject(myObject).isExists()> é falso")
chamada antiga: assertFalse(service.asLiveObject(myObject).isExists())
nova chamada: assertFalse(service.asLiveObject(myObject).isExists(), "Era esperado falso, mas " + result1020 + " <service.asLiveObject(myObject).isExists()> é verdadeiro ")
chamada antiga: assertEquals("123345", service.asRMap(myObject).get("value"))
nova chamada: assertEquals("123345", service.asRMap(myObject).get("value"), "Era esperado valores iguais, mas  '123345' é diferente de " + result1021 + " <service.asRMap(myObject).get('value')>")
chamada antiga: assertEquals("9999", myObject.getValue())
nova chamada: assertEquals("9999", myObject.getValue(), "Era esperado valores iguais, mas  '9999' é diferente de " + result1022 + " <myObject.getValue()>")
chamada antiga: assertEquals("123345", myObject.get("value"))
nova chamada: assertEquals("123345", myObject.get("value"), "Era esperado valores iguais, mas  '123345' é diferente de " + result1023 + " <myObject.get('value')>")
chamada antiga: assertEquals("9999", myObject.get("value"))
nova chamada: assertEquals("9999", myObject.get("value"), "Era esperado valores iguais, mas  '9999' é diferente de " + result1024 + " <myObject.get('value')>")
chamada antiga: assertEquals("9999", myObject.getValue())
nova chamada: assertEquals("9999", myObject.getValue(), "Era esperado valores iguais, mas  '9999' é diferente de " + result1025 + " <myObject.getValue()>")
chamada antiga: Assertions.assertThrows(IllegalArgumentException.class, () -> {
    Customer customer = new Customer("12");
    customer = redisson.getLiveObjectService().persist(customer);
    Order order = new Order();
    customer.getOrders().add(order);
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    Customer customer = new Customer("12");
    customer = redisson.getLiveObjectService().persist(customer);
    Order order = new Order();
    customer.getOrders().add(order);
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: Assertions.assertTimeout(Duration.ofSeconds(10), () -> {
    RLiveObjectService s = redisson.getLiveObjectService();
    List<TestREntity> objects = new ArrayList<>();
    int objectsAmount = 100000;
    for (int i = 0; i < objectsAmount; i++) {
        TestREntity e = new TestREntity();
        e.setName("" + i);
        e.setValue("value" + i);
        objects.add(e);
    }
    List<Object> attachedObjects = s.merge(objects.toArray());
    assertThat(attachedObjects).hasSize(objectsAmount);
    objects.clear();
    for (int i = 0; i < objectsAmount; i++) {
        TestREntity e = (TestREntity) attachedObjects.get(i);
        e.setName("" + i);
        e.setValue("value" + i * 1000);
        objects.add(e);
    }
    List<Object> attachedObjects2 = s.merge(objects.toArray());
    assertThat(attachedObjects2).hasSize(objectsAmount);
    assertThat(redisson.getKeys().count()).isEqualTo(objectsAmount);
})
nova chamada: assertTimeout(Duration.ofSeconds(10), () -> {
    RLiveObjectService s = redisson.getLiveObjectService();
    List<TestREntity> objects = new ArrayList<>();
    int objectsAmount = 100000;
    for (int i = 0; i < objectsAmount; i++) {
        TestREntity e = new TestREntity();
        e.setName("" + i);
        e.setValue("value" + i);
        objects.add(e);
    }
    List<Object> attachedObjects = s.merge(objects.toArray());
    assertThat(attachedObjects).hasSize(objectsAmount);
    objects.clear();
    for (int i = 0; i < objectsAmount; i++) {
        TestREntity e = (TestREntity) attachedObjects.get(i);
        e.setName("" + i);
        e.setValue("value" + i * 1000);
        objects.add(e);
    }
    List<Object> attachedObjects2 = s.merge(objects.toArray());
    assertThat(attachedObjects2).hasSize(objectsAmount);
    assertThat(redisson.getKeys().count()).isEqualTo(objectsAmount);
}, "Era esperado que o tempo de execução " + result1026 + " <Duration.ofSeconds(10)> não fosse ultrapassado, mas foi")
chamada antiga: Assertions.assertTimeout(Duration.ofSeconds(40), () -> {
    RLiveObjectService s = redisson.getLiveObjectService();
    List<TestREntity> objects = new ArrayList<>();
    int objectsAmount = 1000000;
    for (int i = 0; i < objectsAmount; i++) {
        TestREntity e = new TestREntity();
        e.setName("" + i);
        e.setValue("value" + i);
        objects.add(e);
    }
    List<Object> attachedObjects = s.persist(objects.toArray());
    assertThat(attachedObjects).hasSize(objectsAmount);
    assertThat(redisson.getKeys().count()).isEqualTo(objectsAmount);
})
nova chamada: assertTimeout(Duration.ofSeconds(40), () -> {
    RLiveObjectService s = redisson.getLiveObjectService();
    List<TestREntity> objects = new ArrayList<>();
    int objectsAmount = 1000000;
    for (int i = 0; i < objectsAmount; i++) {
        TestREntity e = new TestREntity();
        e.setName("" + i);
        e.setValue("value" + i);
        objects.add(e);
    }
    List<Object> attachedObjects = s.persist(objects.toArray());
    assertThat(attachedObjects).hasSize(objectsAmount);
    assertThat(redisson.getKeys().count()).isEqualTo(objectsAmount);
}, "Era esperado que o tempo de execução " + result1027 + " <Duration.ofSeconds(40)> não fosse ultrapassado, mas foi")
chamada antiga: Assertions.assertTrue(bucket.renamenx("test1"))
nova chamada: assertTrue(bucket.renamenx("test1"), "Era esperado verdadeiro, mas " + result1028 + " <bucket.renamenx('test1')> é falso")
chamada antiga: Assertions.assertTrue(bucket.delete())
nova chamada: assertTrue(bucket.delete(), "Era esperado verdadeiro, mas " + result1029 + " <bucket.delete()> é falso")
chamada antiga: Assertions.assertTrue(bucket.isExists())
nova chamada: assertTrue(bucket.isExists(), "Era esperado verdadeiro, mas " + result1030 + " <bucket.isExists()> é falso")
chamada antiga: Assertions.assertTrue(bucket.isExists())
nova chamada: assertTrue(bucket.isExists(), "Era esperado verdadeiro, mas " + result1031 + " <bucket.isExists()> é falso")
chamada antiga: Assertions.assertTrue(System.currentTimeMillis() - s > 2000)
nova chamada: assertTrue(System.currentTimeMillis() - s > 2000, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(System.currentTimeMillis() - s > 9000)
nova chamada: assertTrue(System.currentTimeMillis() - s > 9000, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(System.currentTimeMillis() - s > 4900)
nova chamada: assertTrue(System.currentTimeMillis() - s > 4900, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(queue.add(1))
nova chamada: assertTrue(queue.add(1), "Era esperado verdadeiro, mas " + result1032 + " <queue.add(1)> é falso")
chamada antiga: Assertions.assertTrue(queue.isEmpty())
nova chamada: assertTrue(queue.isEmpty(), "Era esperado verdadeiro, mas " + result1033 + " <queue.isEmpty()> é falso")
chamada antiga: Assertions.assertTrue(r1.get(0))
nova chamada: assertTrue(r1.get(0), "Era esperado verdadeiro, mas " + result1034 + " <r1.get(0)> é falso")
chamada antiga: Assertions.assertTrue(1 == iterator.next())
nova chamada: assertTrue(1 == iterator.next(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(2 == iterator.next())
nova chamada: assertTrue(2 == iterator.next(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(3 == iterator.next())
nova chamada: assertTrue(3 == iterator.next(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(4 == iterator.next())
nova chamada: assertTrue(4 == iterator.next(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(1 == iterator.next())
nova chamada: assertTrue(1 == iterator.next(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(2 == iterator.next())
nova chamada: assertTrue(2 == iterator.next(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(3 == iterator.next())
nova chamada: assertTrue(3 == iterator.next(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(4 == iterator.next())
nova chamada: assertTrue(4 == iterator.next(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(1 == iterator.next())
nova chamada: assertTrue(1 == iterator.next(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(iterator.hasPrevious())
nova chamada: assertTrue(iterator.hasPrevious(), "Era esperado verdadeiro, mas " + result1035 + " <iterator.hasPrevious()> é falso")
chamada antiga: Assertions.assertTrue(1 == iterator.previous())
nova chamada: assertTrue(1 == iterator.previous(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(iterator.hasNext())
nova chamada: assertTrue(iterator.hasNext(), "Era esperado verdadeiro, mas " + result1036 + " <iterator.hasNext()> é falso")
chamada antiga: Assertions.assertTrue(1 == iterator.next())
nova chamada: assertTrue(1 == iterator.next(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(2 == iterator.next())
nova chamada: assertTrue(2 == iterator.next(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(iterator.hasPrevious())
nova chamada: assertTrue(iterator.hasPrevious(), "Era esperado verdadeiro, mas " + result1037 + " <iterator.hasPrevious()> é falso")
chamada antiga: Assertions.assertTrue(3 == iterator.next())
nova chamada: assertTrue(3 == iterator.next(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(iterator.hasPrevious())
nova chamada: assertTrue(iterator.hasPrevious(), "Era esperado verdadeiro, mas " + result1038 + " <iterator.hasPrevious()> é falso")
chamada antiga: Assertions.assertTrue(3 == iterator.previous())
nova chamada: assertTrue(3 == iterator.previous(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(iterator.hasPrevious())
nova chamada: assertTrue(iterator.hasPrevious(), "Era esperado verdadeiro, mas " + result1039 + " <iterator.hasPrevious()> é falso")
chamada antiga: Assertions.assertTrue(2 == iterator.previous())
nova chamada: assertTrue(2 == iterator.previous(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(iterator.hasPrevious())
nova chamada: assertTrue(iterator.hasPrevious(), "Era esperado verdadeiro, mas " + result1040 + " <iterator.hasPrevious()> é falso")
chamada antiga: Assertions.assertTrue(1 == iterator.previous())
nova chamada: assertTrue(1 == iterator.previous(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(1 == iterator.next())
nova chamada: assertTrue(1 == iterator.next(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(1 == iterator.nextIndex())
nova chamada: assertTrue(1 == iterator.nextIndex(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(0 == iterator.previousIndex())
nova chamada: assertTrue(0 == iterator.previousIndex(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(2 == iterator.next())
nova chamada: assertTrue(2 == iterator.next(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(3 == iterator.next())
nova chamada: assertTrue(3 == iterator.next(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(4 == iterator.next())
nova chamada: assertTrue(4 == iterator.next(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(5 == iterator.next())
nova chamada: assertTrue(5 == iterator.next(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(0 == iterator.next())
nova chamada: assertTrue(0 == iterator.next(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(7 == iterator.next())
nova chamada: assertTrue(7 == iterator.next(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(8 == iterator.next())
nova chamada: assertTrue(8 == iterator.next(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(0 == iterator.next())
nova chamada: assertTrue(0 == iterator.next(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(10 == iterator.next())
nova chamada: assertTrue(10 == iterator.next(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(9 == iterator.previousIndex())
nova chamada: assertTrue(9 == iterator.previousIndex(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(10 == iterator.nextIndex())
nova chamada: assertTrue(10 == iterator.nextIndex(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(1 == iterator.next())
nova chamada: assertTrue(1 == iterator.next(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(1 == iterator.nextIndex())
nova chamada: assertTrue(1 == iterator.nextIndex(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(0 == iterator.previousIndex())
nova chamada: assertTrue(0 == iterator.previousIndex(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(2 == iterator.next())
nova chamada: assertTrue(2 == iterator.next(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(3 == iterator.next())
nova chamada: assertTrue(3 == iterator.next(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(4 == iterator.next())
nova chamada: assertTrue(4 == iterator.next(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(5 == iterator.next())
nova chamada: assertTrue(5 == iterator.next(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(0 == iterator.next())
nova chamada: assertTrue(0 == iterator.next(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(7 == iterator.next())
nova chamada: assertTrue(7 == iterator.next(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(8 == iterator.next())
nova chamada: assertTrue(8 == iterator.next(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(0 == iterator.next())
nova chamada: assertTrue(0 == iterator.next(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(10 == iterator.next())
nova chamada: assertTrue(10 == iterator.next(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(9 == iterator.previousIndex())
nova chamada: assertTrue(9 == iterator.previousIndex(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(10 == iterator.nextIndex())
nova chamada: assertTrue(10 == iterator.nextIndex(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(1 == iterator.next())
nova chamada: assertTrue(1 == iterator.next(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(iterator.hasPrevious())
nova chamada: assertTrue(iterator.hasPrevious(), "Era esperado verdadeiro, mas " + result1041 + " <iterator.hasPrevious()> é falso")
chamada antiga: Assertions.assertTrue(1 == iterator.previous())
nova chamada: assertTrue(1 == iterator.previous(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(iterator.hasNext())
nova chamada: assertTrue(iterator.hasNext(), "Era esperado verdadeiro, mas " + result1042 + " <iterator.hasNext()> é falso")
chamada antiga: Assertions.assertTrue(1 == iterator.next())
nova chamada: assertTrue(1 == iterator.next(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(2 == iterator.next())
nova chamada: assertTrue(2 == iterator.next(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(iterator.hasPrevious())
nova chamada: assertTrue(iterator.hasPrevious(), "Era esperado verdadeiro, mas " + result1043 + " <iterator.hasPrevious()> é falso")
chamada antiga: Assertions.assertTrue(3 == iterator.next())
nova chamada: assertTrue(3 == iterator.next(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(iterator.hasPrevious())
nova chamada: assertTrue(iterator.hasPrevious(), "Era esperado verdadeiro, mas " + result1044 + " <iterator.hasPrevious()> é falso")
chamada antiga: Assertions.assertTrue(3 == iterator.previous())
nova chamada: assertTrue(3 == iterator.previous(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(iterator.hasPrevious())
nova chamada: assertTrue(iterator.hasPrevious(), "Era esperado verdadeiro, mas " + result1045 + " <iterator.hasPrevious()> é falso")
chamada antiga: Assertions.assertTrue(2 == iterator.previous())
nova chamada: assertTrue(2 == iterator.previous(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(iterator.hasPrevious())
nova chamada: assertTrue(iterator.hasPrevious(), "Era esperado verdadeiro, mas " + result1046 + " <iterator.hasPrevious()> é falso")
chamada antiga: Assertions.assertTrue(1 == iterator.previous())
nova chamada: assertTrue(1 == iterator.previous(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(55 == list.indexOf(56))
nova chamada: assertTrue(55 == list.indexOf(56), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(99 == list.indexOf(100))
nova chamada: assertTrue(99 == list.indexOf(100), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(-1 == list.indexOf(200))
nova chamada: assertTrue(-1 == list.indexOf(200), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(-1 == list.indexOf(0))
nova chamada: assertTrue(-1 == list.indexOf(0), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(list.removeAll(Arrays.asList(3, 2, 10, 6)))
nova chamada: assertTrue(list.removeAll(Arrays.asList(3, 2, 10, 6)), "Era esperado verdadeiro, mas " + result1047 + " <list.removeAll(Arrays.asList(3, 2, 10, 6))> é falso")
chamada antiga: Assertions.assertTrue(list.removeAll(Arrays.asList(4)))
nova chamada: assertTrue(list.removeAll(Arrays.asList(4)), "Era esperado verdadeiro, mas " + result1048 + " <list.removeAll(Arrays.asList(4))> é falso")
chamada antiga: Assertions.assertTrue(list.removeAll(Arrays.asList(1, 5, 1, 5)))
nova chamada: assertTrue(list.removeAll(Arrays.asList(1, 5, 1, 5)), "Era esperado verdadeiro, mas " + result1049 + " <list.removeAll(Arrays.asList(1, 5, 1, 5))> é falso")
chamada antiga: Assertions.assertTrue(list.isEmpty())
nova chamada: assertTrue(list.isEmpty(), "Era esperado verdadeiro, mas " + result1050 + " <list.isEmpty()> é falso")
chamada antiga: Assertions.assertTrue(list.retainAll(Arrays.asList(3, 2, 10, 6)))
nova chamada: assertTrue(list.retainAll(Arrays.asList(3, 2, 10, 6)), "Era esperado verdadeiro, mas " + result1051 + " <list.retainAll(Arrays.asList(3, 2, 10, 6))> é falso")
chamada antiga: Assertions.assertTrue(list.retainAll(Collections.<Integer>emptyList()))
nova chamada: assertTrue(list.retainAll(Collections.<Integer>emptyList()), "Era esperado verdadeiro, mas " + result1052 + " <list.retainAll(Collections.<Integer>emptyList())> é falso")
chamada antiga: Assertions.assertTrue(list.addAll(Arrays.asList(7, 8, 9)))
nova chamada: assertTrue(list.addAll(Arrays.asList(7, 8, 9)), "Era esperado verdadeiro, mas " + result1053 + " <list.addAll(Arrays.asList(7, 8, 9))> é falso")
chamada antiga: Assertions.assertTrue(list.addAll(Arrays.asList(9, 1, 9)))
nova chamada: assertTrue(list.addAll(Arrays.asList(9, 1, 9)), "Era esperado verdadeiro, mas " + result1054 + " <list.addAll(Arrays.asList(9, 1, 9))> é falso")
chamada antiga: Assertions.assertTrue(list.containsAll(Arrays.asList(30, 11)))
nova chamada: assertTrue(list.containsAll(Arrays.asList(30, 11)), "Era esperado verdadeiro, mas " + result1055 + " <list.containsAll(Arrays.asList(30, 11))> é falso")
chamada antiga: Assertions.assertTrue(list.containsAll(Arrays.asList(30)))
nova chamada: assertTrue(list.containsAll(Arrays.asList(30)), "Era esperado verdadeiro, mas " + result1056 + " <list.containsAll(Arrays.asList(30))> é falso")
chamada antiga: Assertions.assertTrue(list.containsAll(Collections.emptyList()))
nova chamada: assertTrue(list.containsAll(Collections.emptyList()), "Era esperado verdadeiro, mas " + result1057 + " <list.containsAll(Collections.emptyList())> é falso")
chamada antiga: Assertions.assertTrue(Arrays.asList(1).containsAll(Collections.emptyList()))
nova chamada: assertTrue(Arrays.asList(1).containsAll(Collections.emptyList()), "Era esperado verdadeiro, mas " + result1058 + " <Arrays.asList(1).containsAll(Collections.emptyList())> é falso")
chamada antiga: Assertions.assertTrue(list.isEmpty())
nova chamada: assertTrue(list.isEmpty(), "Era esperado verdadeiro, mas " + result1059 + " <list.isEmpty()> é falso")
chamada antiga: Assertions.assertTrue(list.contains("3"))
nova chamada: assertTrue(list.contains("3"), "Era esperado verdadeiro, mas " + result1060 + " <list.contains('3')> é falso")
chamada antiga: Assertions.assertTrue(list.contains("1"))
nova chamada: assertTrue(list.contains("1"), "Era esperado verdadeiro, mas " + result1061 + " <list.contains('1')> é falso")
chamada antiga: assertTrue(stringIterator2.hasNext())
nova chamada: assertTrue(stringIterator2.hasNext(), "Era esperado verdadeiro, mas " + result1062 + " <stringIterator2.hasNext()> é falso")
chamada antiga: assertTrue(stringIterator2.hasNext())
nova chamada: assertTrue(stringIterator2.hasNext(), "Era esperado verdadeiro, mas " + result1063 + " <stringIterator2.hasNext()> é falso")
chamada antiga: Assertions.assertTrue(queue.addAll(Arrays.asList(7, 8, 9)))
nova chamada: assertTrue(queue.addAll(Arrays.asList(7, 8, 9)), "Era esperado verdadeiro, mas " + result1064 + " <queue.addAll(Arrays.asList(7, 8, 9))> é falso")
chamada antiga: Assertions.assertTrue(queue.addAll(Arrays.asList(9, 1, 9)))
nova chamada: assertTrue(queue.addAll(Arrays.asList(9, 1, 9)), "Era esperado verdadeiro, mas " + result1065 + " <queue.addAll(Arrays.asList(9, 1, 9))> é falso")
chamada antiga: Assertions.assertTrue(queue.removeAll(Arrays.asList(3, 2, 10, 6)))
nova chamada: assertTrue(queue.removeAll(Arrays.asList(3, 2, 10, 6)), "Era esperado verdadeiro, mas " + result1066 + " <queue.removeAll(Arrays.asList(3, 2, 10, 6))> é falso")
chamada antiga: Assertions.assertTrue(queue.removeAll(Arrays.asList(4)))
nova chamada: assertTrue(queue.removeAll(Arrays.asList(4)), "Era esperado verdadeiro, mas " + result1067 + " <queue.removeAll(Arrays.asList(4))> é falso")
chamada antiga: Assertions.assertTrue(queue.removeAll(Arrays.asList(1, 5, 1, 5)))
nova chamada: assertTrue(queue.removeAll(Arrays.asList(1, 5, 1, 5)), "Era esperado verdadeiro, mas " + result1068 + " <queue.removeAll(Arrays.asList(1, 5, 1, 5))> é falso")
chamada antiga: Assertions.assertTrue(queue.isEmpty())
nova chamada: assertTrue(queue.isEmpty(), "Era esperado verdadeiro, mas " + result1069 + " <queue.isEmpty()> é falso")
chamada antiga: Assertions.assertTrue(System.currentTimeMillis() - s > 2000)
nova chamada: assertTrue(System.currentTimeMillis() - s > 2000, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(System.currentTimeMillis() - s > 9000)
nova chamada: assertTrue(System.currentTimeMillis() - s > 9000, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(System.currentTimeMillis() - s > 5000)
nova chamada: assertTrue(System.currentTimeMillis() - s > 5000, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(queue.isEmpty())
nova chamada: assertTrue(queue.isEmpty(), "Era esperado verdadeiro, mas " + result1070 + " <queue.isEmpty()> é falso")
chamada antiga: Assertions.assertTrue(r1.get(0))
nova chamada: assertTrue(r1.get(0), "Era esperado verdadeiro, mas " + result1071 + " <r1.get(0)> é falso")
chamada antiga: Assertions.assertTrue(e.awaitTermination(30, TimeUnit.SECONDS))
nova chamada: assertTrue(e.awaitTermination(30, TimeUnit.SECONDS), "Era esperado verdadeiro, mas " + result1072 + " <e.awaitTermination(30, TimeUnit.SECONDS)> é falso")
chamada antiga: Assertions.assertTrue((Boolean) res.get(0))
nova chamada: assertTrue((Boolean) res.get(0), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue((Boolean) res.get(1))
nova chamada: assertTrue((Boolean) res.get(1), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(sync(redisson.getMap("test").remove("2", "5")))
nova chamada: assertTrue(sync(redisson.getMap("test").remove("2", "5")), "Era esperado verdadeiro, mas " + result1073 + " <sync(redisson.getMap('test').remove('2', '5'))> é falso")
chamada antiga: Assertions.assertTrue(sync(redisson.getMap("test").remove("1", "2")))
nova chamada: assertTrue(sync(redisson.getMap("test").remove("1", "2")), "Era esperado verdadeiro, mas " + result1074 + " <sync(redisson.getMap('test').remove('1', '2'))> é falso")
chamada antiga: Assertions.assertTrue(sync(set.remove(1)))
nova chamada: assertTrue(sync(set.remove(1)), "Era esperado verdadeiro, mas " + result1075 + " <sync(set.remove(1))> é falso")
chamada antiga: Assertions.assertTrue(sync(set.retainAll(Arrays.asList(1, 2))))
nova chamada: assertTrue(sync(set.retainAll(Arrays.asList(1, 2))), "Era esperado verdadeiro, mas " + result1076 + " <sync(set.retainAll(Arrays.asList(1, 2)))> é falso")
chamada antiga: Assertions.assertTrue(sync(set.containsAll(Collections.emptyList())))
nova chamada: assertTrue(sync(set.containsAll(Collections.emptyList())), "Era esperado verdadeiro, mas " + result1077 + " <sync(set.containsAll(Collections.emptyList()))> é falso")
chamada antiga: Assertions.assertTrue(sync(set.containsAll(Arrays.asList(30, 11))))
nova chamada: assertTrue(sync(set.containsAll(Arrays.asList(30, 11))), "Era esperado verdadeiro, mas " + result1078 + " <sync(set.containsAll(Arrays.asList(30, 11)))> é falso")
chamada antiga: Assertions.assertTrue(sync(set.contains(new TestObject("2", "3"))))
nova chamada: assertTrue(sync(set.contains(new TestObject("2", "3"))), "Era esperado verdadeiro, mas " + result1079 + " <sync(set.contains(new TestObject('2', '3')))> é falso")
chamada antiga: Assertions.assertTrue(sync(set.contains(new TestObject("1", "2"))))
nova chamada: assertTrue(sync(set.contains(new TestObject("1", "2"))), "Era esperado verdadeiro, mas " + result1080 + " <sync(set.contains(new TestObject('1', '2')))> é falso")
chamada antiga: Assertions.assertTrue(sync(set.retainAll(Collections.<Integer>emptyList())))
nova chamada: assertTrue(sync(set.retainAll(Collections.<Integer>emptyList())), "Era esperado verdadeiro, mas " + result1081 + " <sync(set.retainAll(Collections.<Integer>emptyList()))> é falso")
chamada antiga: Assertions.assertTrue(sync(set.move("otherSet", 1)))
nova chamada: assertTrue(sync(set.move("otherSet", 1)), "Era esperado verdadeiro, mas " + result1082 + " <sync(set.move('otherSet', 1))> é falso")
chamada antiga: Assertions.assertTrue(sync(tmp.contains(1)))
nova chamada: assertTrue(sync(tmp.contains(1)), "Era esperado verdadeiro, mas " + result1083 + " <sync(tmp.contains(1))> é falso")
chamada antiga: Assertions.assertTrue(sync(tmp.contains(3)))
nova chamada: assertTrue(sync(tmp.contains(3)), "Era esperado verdadeiro, mas " + result1084 + " <sync(tmp.contains(3))> é falso")
chamada antiga: Assertions.assertTrue(System.currentTimeMillis() - s > 2000)
nova chamada: assertTrue(System.currentTimeMillis() - s > 2000, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(System.currentTimeMillis() - s > 9000)
nova chamada: assertTrue(System.currentTimeMillis() - s > 9000, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(System.currentTimeMillis() - s > 5000)
nova chamada: assertTrue(System.currentTimeMillis() - s > 5000, "Era esperado verdadeiro, mas o valor obtido é falso")
Total asserts: 7589
Asserts sem descrição: 7503
Asserts com descrição: 86
Assertion Roulette: 6591

Após do refactor: 
Total asserts: 7589
Asserts sem descrição: 7224
Asserts com descrição: 365
Assertion Roulette: 6328
