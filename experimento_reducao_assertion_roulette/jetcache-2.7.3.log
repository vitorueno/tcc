
Projeto: /home/vitor-otto/opensource/jetcache-2.7.3

Antes do refactor: 
chamada antiga: Assert.assertArrayEquals(buildKey("123"), buildKey(new String("123")))
nova chamada: assertArrayEquals(buildKey("123"), buildKey(new String("123")), "Era esperado arrays iguais, mas " + result0 + " <buildKey('123')> é diferente de " + result1 + " <buildKey(new String('123'))>")
chamada antiga: Assert.assertArrayEquals(buildKey(new byte[] { 1, 2, 3 }), buildKey(new byte[] { 1, 2, 3 }))
nova chamada: assertArrayEquals(buildKey(new byte[] { 1, 2, 3 }), buildKey(new byte[] { 1, 2, 3 }), "Era esperado arrays iguais, mas " + result2 + " <buildKey(new byte[] { 1, 2, 3 })> é diferente de " + result3 + " <buildKey(new byte[] { 1, 2, 3 })>")
chamada antiga: Assert.assertArrayEquals(buildKey(123), buildKey(123))
nova chamada: assertArrayEquals(buildKey(123), buildKey(123), "Era esperado arrays iguais, mas " + result4 + " <buildKey(123)> é diferente de " + result5 + " <buildKey(123)>")
chamada antiga: Assert.assertArrayEquals(buildKey(123L), buildKey(123L))
nova chamada: assertArrayEquals(buildKey(123L), buildKey(123L), "Era esperado arrays iguais, mas " + result6 + " <buildKey(123L)> é diferente de " + result7 + " <buildKey(123L)>")
chamada antiga: Assert.assertArrayEquals(buildKey(true), buildKey(true))
nova chamada: assertArrayEquals(buildKey(true), buildKey(true), "Era esperado arrays iguais, mas " + result8 + " <buildKey(true)> é diferente de " + result9 + " <buildKey(true)>")
chamada antiga: Assert.assertArrayEquals(buildKey(new Date(123)), buildKey(new Date(123)))
nova chamada: assertArrayEquals(buildKey(new Date(123)), buildKey(new Date(123)), "Era esperado arrays iguais, mas " + result10 + " <buildKey(new Date(123))> é diferente de " + result11 + " <buildKey(new Date(123))>")
chamada antiga: Assert.assertArrayEquals(buildKey(new Date(123)), buildKey(new Date(123)))
nova chamada: assertArrayEquals(buildKey(new Date(123)), buildKey(new Date(123)), "Era esperado arrays iguais, mas " + result12 + " <buildKey(new Date(123))> é diferente de " + result13 + " <buildKey(new Date(123))>")
chamada antiga: Assert.assertArrayEquals(buildKey(c1), buildKey(c2))
nova chamada: assertArrayEquals(buildKey(c1), buildKey(c2), "Era esperado arrays iguais, mas " + result14 + " <buildKey(c1)> é diferente de " + result15 + " <buildKey(c2)>")
chamada antiga: assertArrayEquals(byteKey, c.buildKey(byteKey))
nova chamada: assertArrayEquals(byteKey, c.buildKey(byteKey), "Era esperado arrays iguais, mas  byteKey é diferente de " + result16 + " <c.buildKey(byteKey)>")
chamada antiga: assertArrayEquals(strKey.getBytes(), c.buildKey(strKey))
nova chamada: assertArrayEquals(strKey.getBytes(), c.buildKey(strKey), "Era esperado arrays iguais, mas " + result17 + " <strKey.getBytes()> é diferente de " + result18 + " <c.buildKey(strKey)>")
chamada antiga: assertArrayEquals(byteKey, c.buildKey(byteKey))
nova chamada: assertArrayEquals(byteKey, c.buildKey(byteKey), "Era esperado arrays iguais, mas  byteKey é diferente de " + result19 + " <c.buildKey(byteKey)>")
chamada antiga: assertArrayEquals(strKey.getBytes(), c.buildKey(strKey))
nova chamada: assertArrayEquals(strKey.getBytes(), c.buildKey(strKey), "Era esperado arrays iguais, mas " + result20 + " <strKey.getBytes()> é diferente de " + result21 + " <c.buildKey(strKey)>")
chamada antiga: assertArrayEquals(convertedKey.getBytes(), c.buildKey(byteKey))
nova chamada: assertArrayEquals(convertedKey.getBytes(), c.buildKey(byteKey), "Era esperado arrays iguais, mas " + result22 + " <convertedKey.getBytes()> é diferente de " + result23 + " <c.buildKey(byteKey)>")
chamada antiga: assertArrayEquals(convertedKey.getBytes(), c.buildKey(strKey))
nova chamada: assertArrayEquals(convertedKey.getBytes(), c.buildKey(strKey), "Era esperado arrays iguais, mas " + result24 + " <convertedKey.getBytes()> é diferente de " + result25 + " <c.buildKey(strKey)>")
chamada antiga: assertArrayEquals(convertedKey.getBytes(), c.buildKey("long long long str"))
nova chamada: assertArrayEquals(convertedKey.getBytes(), c.buildKey("long long long str"), "Era esperado arrays iguais, mas " + result26 + " <convertedKey.getBytes()> é diferente de " + result27 + " <c.buildKey('long long long str')>")
chamada antiga: assertArrayEquals(convertedKey.getBytes(), c.buildKey(1))
nova chamada: assertArrayEquals(convertedKey.getBytes(), c.buildKey(1), "Era esperado arrays iguais, mas " + result28 + " <convertedKey.getBytes()> é diferente de " + result29 + " <c.buildKey(1)>")
chamada antiga: assertArrayEquals(strKey.getBytes(), c.buildKey(strKey.getBytes()))
nova chamada: assertArrayEquals(strKey.getBytes(), c.buildKey(strKey.getBytes()), "Era esperado arrays iguais, mas " + result30 + " <strKey.getBytes()> é diferente de " + result31 + " <c.buildKey(strKey.getBytes())>")
chamada antiga: assertArrayEquals(strKey.getBytes(), c.buildKey(strKey.getBytes()))
nova chamada: assertArrayEquals(strKey.getBytes(), c.buildKey(strKey.getBytes()), "Era esperado arrays iguais, mas " + result32 + " <strKey.getBytes()> é diferente de " + result33 + " <c.buildKey(strKey.getBytes())>")
chamada antiga: assertArrayEquals(strKey.getBytes(), c.buildKey(strKey.getBytes()))
nova chamada: assertArrayEquals(strKey.getBytes(), c.buildKey(strKey.getBytes()), "Era esperado arrays iguais, mas " + result34 + " <strKey.getBytes()> é diferente de " + result35 + " <c.buildKey(strKey.getBytes())>")
chamada antiga: Assert.assertEquals(target.count(), target.count())
nova chamada: assertEquals(target.count(), target.count(), "Era esperado valores iguais, mas " + result36 + " <target.count()> é diferente de " + result37 + " <target.count()>")
chamada antiga: Assert.assertNotEquals(service.notCachedCount(), service.notCachedCount())
nova chamada: assertNotEquals(service.notCachedCount(), service.notCachedCount(), "Era esperado valores diferentes, mas " + result38 + " <service.notCachedCount()> é igual a " + result39 + " <service.notCachedCount()>")
chamada antiga: Assert.assertEquals(service.countWithAnnoOnClass(), service.countWithAnnoOnClass())
nova chamada: assertEquals(service.countWithAnnoOnClass(), service.countWithAnnoOnClass(), "Era esperado valores iguais, mas " + result40 + " <service.countWithAnnoOnClass()> é diferente de " + result41 + " <service.countWithAnnoOnClass()>")
chamada antiga: Assert.assertEquals(service.countWithAnnoOnInterface(), service.countWithAnnoOnInterface())
nova chamada: assertEquals(service.countWithAnnoOnInterface(), service.countWithAnnoOnInterface(), "Era esperado valores iguais, mas " + result42 + " <service.countWithAnnoOnInterface()> é diferente de " + result43 + " <service.countWithAnnoOnInterface()>")
chamada antiga: Assert.assertNotEquals(service.enableCacheWithNoCacheCount(bean), service.enableCacheWithNoCacheCount(bean))
nova chamada: assertNotEquals(service.enableCacheWithNoCacheCount(bean), service.enableCacheWithNoCacheCount(bean), "Era esperado valores diferentes, mas " + result44 + " <service.enableCacheWithNoCacheCount(bean)> é igual a " + result45 + " <service.enableCacheWithNoCacheCount(bean)>")
chamada antiga: Assert.assertEquals(service.enableCacheWithAnnoOnClass(bean), service.enableCacheWithAnnoOnClass(bean))
nova chamada: assertEquals(service.enableCacheWithAnnoOnClass(bean), service.enableCacheWithAnnoOnClass(bean), "Era esperado valores iguais, mas " + result46 + " <service.enableCacheWithAnnoOnClass(bean)> é diferente de " + result47 + " <service.enableCacheWithAnnoOnClass(bean)>")
chamada antiga: Assert.assertEquals(service.enableCacheWithAnnoOnInterface(bean), service.enableCacheWithAnnoOnInterface(bean))
nova chamada: assertEquals(service.enableCacheWithAnnoOnInterface(bean), service.enableCacheWithAnnoOnInterface(bean), "Era esperado valores iguais, mas " + result48 + " <service.enableCacheWithAnnoOnInterface(bean)> é diferente de " + result49 + " <service.enableCacheWithAnnoOnInterface(bean)>")
chamada antiga: Assert.assertEquals(v1, service.count("K1"))
nova chamada: assertEquals(v1, service.count("K1"), "Era esperado valores iguais, mas  v1 é diferente de " + result50 + " <service.count('K1')>")
chamada antiga: Assert.assertNotEquals(v1, v2)
nova chamada: assertNotEquals(v1, v2, "Era esperado valores diferentes, mas  v1 é igual a " + " v2")
chamada antiga: Assert.assertEquals(v2, service.count("K1"))
nova chamada: assertEquals(v2, service.count("K1"), "Era esperado valores iguais, mas  v2 é diferente de " + result51 + " <service.count('K1')>")
chamada antiga: Assert.assertEquals(200, service.count("K1"))
nova chamada: assertEquals(200, service.count("K1"), "Era esperado valores iguais, mas  200 é diferente de " + result52 + " <service.count('K1')>")
chamada antiga: Assert.assertEquals(200, service.count("K1"))
nova chamada: assertEquals(200, service.count("K1"), "Era esperado valores iguais, mas  200 é diferente de " + result53 + " <service.count('K1')>")
chamada antiga: Assert.assertEquals(service.count("K1"), service.count("K1"))
nova chamada: assertEquals(service.count("K1"), service.count("K1"), "Era esperado valores iguais, mas " + result54 + " <service.count('K1')> é diferente de " + result55 + " <service.count('K1')>")
chamada antiga: Assert.assertNotEquals(service.count("K1"), service.count("K2"))
nova chamada: assertNotEquals(service.count("K1"), service.count("K2"), "Era esperado valores diferentes, mas " + result56 + " <service.count('K1')> é igual a " + result57 + " <service.count('K2')>")
chamada antiga: Assert.assertNotEquals(bean.noCacheCount(), bean.noCacheCount())
nova chamada: assertNotEquals(bean.noCacheCount(), bean.noCacheCount(), "Era esperado valores diferentes, mas " + result58 + " <bean.noCacheCount()> é igual a " + result59 + " <bean.noCacheCount()>")
chamada antiga: Assert.assertEquals(bean.staticCount(), bean.staticCount())
nova chamada: assertEquals(bean.staticCount(), bean.staticCount(), "Era esperado valores iguais, mas " + result60 + " <bean.staticCount()> é diferente de " + result61 + " <bean.staticCount()>")
chamada antiga: Assert.assertEquals(bean.count(), bean.count())
nova chamada: assertEquals(bean.count(), bean.count(), "Era esperado valores iguais, mas " + result62 + " <bean.count()> é diferente de " + result63 + " <bean.count()>")
chamada antiga: Assert.assertEquals(bean.countWithLocalCache(), bean.countWithLocalCache())
nova chamada: assertEquals(bean.countWithLocalCache(), bean.countWithLocalCache(), "Era esperado valores iguais, mas " + result64 + " <bean.countWithLocalCache()> é diferente de " + result65 + " <bean.countWithLocalCache()>")
chamada antiga: Assert.assertEquals(bean.countWithBoth(), bean.countWithBoth())
nova chamada: assertEquals(bean.countWithBoth(), bean.countWithBoth(), "Era esperado valores iguais, mas " + result66 + " <bean.countWithBoth()> é diferente de " + result67 + " <bean.countWithBoth()>")
chamada antiga: Assert.assertNotEquals(bean.countWithDisabledCache(), bean.countWithDisabledCache())
nova chamada: assertNotEquals(bean.countWithDisabledCache(), bean.countWithDisabledCache(), "Era esperado valores diferentes, mas " + result68 + " <bean.countWithDisabledCache()> é igual a " + result69 + " <bean.countWithDisabledCache()>")
chamada antiga: Assert.assertEquals(x, bean.countWithExpire50())
nova chamada: assertEquals(x, bean.countWithExpire50(), "Era esperado valores iguais, mas  x é diferente de " + result70 + " <bean.countWithExpire50()>")
chamada antiga: Assert.assertNotEquals(x, bean.countWithExpire50())
nova chamada: assertNotEquals(x, bean.countWithExpire50(), "Era esperado valores diferentes, mas  x é igual a " + result71 + " <bean.countWithExpire50()>")
chamada antiga: Assert.assertNotEquals(x1, x2)
nova chamada: assertNotEquals(x1, x2, "Era esperado valores diferentes, mas  x1 é igual a " + " x2")
chamada antiga: Assert.assertEquals(x1, x3)
nova chamada: assertEquals(x1, x3, "Era esperado valores iguais, mas  x1 é diferente de " + " x3")
chamada antiga: Assert.assertNotEquals(x1, x2)
nova chamada: assertNotEquals(x1, x2, "Era esperado valores diferentes, mas  x1 é igual a " + " x2")
chamada antiga: Assert.assertEquals(x1, x3)
nova chamada: assertEquals(x1, x3, "Era esperado valores iguais, mas  x1 é diferente de " + " x3")
chamada antiga: Assert.assertNotEquals(x1, x2)
nova chamada: assertNotEquals(x1, x2, "Era esperado valores diferentes, mas  x1 é igual a " + " x2")
chamada antiga: Assert.assertEquals(x1, x3)
nova chamada: assertEquals(x1, x3, "Era esperado valores iguais, mas  x1 é diferente de " + " x3")
chamada antiga: Assert.assertNotEquals(x1, x2)
nova chamada: assertNotEquals(x1, x2, "Era esperado valores diferentes, mas  x1 é igual a " + " x2")
chamada antiga: Assert.assertEquals(x1, x3)
nova chamada: assertEquals(x1, x3, "Era esperado valores iguais, mas  x1 é diferente de " + " x3")
chamada antiga: Assert.assertEquals(bean.countEnabledWithConfigBean(), bean.countEnabledWithConfigBean())
nova chamada: assertEquals(bean.countEnabledWithConfigBean(), bean.countEnabledWithConfigBean(), "Era esperado valores iguais, mas " + result72 + " <bean.countEnabledWithConfigBean()> é diferente de " + result73 + " <bean.countEnabledWithConfigBean()>")
chamada antiga: Assert.assertNotEquals(bean.countDisabledWithConfigBean(), bean.countDisabledWithConfigBean())
nova chamada: assertNotEquals(bean.countDisabledWithConfigBean(), bean.countDisabledWithConfigBean(), "Era esperado valores diferentes, mas " + result74 + " <bean.countDisabledWithConfigBean()> é igual a " + result75 + " <bean.countDisabledWithConfigBean()>")
chamada antiga: Assert.assertNotEquals(bean.countWithWrongCondition(), bean.countWithWrongCondition())
nova chamada: assertNotEquals(bean.countWithWrongCondition(), bean.countWithWrongCondition(), "Era esperado valores diferentes, mas " + result76 + " <bean.countWithWrongCondition()> é igual a " + result77 + " <bean.countWithWrongCondition()>")
chamada antiga: Assert.assertEquals(bean.count(true), bean.count(true))
nova chamada: assertEquals(bean.count(true), bean.count(true), "Era esperado valores iguais, mas " + result78 + " <bean.count(true)> é diferente de " + result79 + " <bean.count(true)>")
chamada antiga: Assert.assertNotEquals(bean.count(false), bean.count(false))
nova chamada: assertNotEquals(bean.count(false), bean.count(false), "Era esperado valores diferentes, mas " + result80 + " <bean.count(false)> é igual a " + result81 + " <bean.count(false)>")
chamada antiga: Assert.assertNotEquals(bean.count(), bean.count1())
nova chamada: assertNotEquals(bean.count(), bean.count1(), "Era esperado valores diferentes, mas " + result82 + " <bean.count()> é igual a " + result83 + " <bean.count1()>")
chamada antiga: Assert.assertEquals(bean.namedCount1_WithNameN1(), bean.namedCount1_WithNameN1())
nova chamada: assertEquals(bean.namedCount1_WithNameN1(), bean.namedCount1_WithNameN1(), "Era esperado valores iguais, mas " + result84 + " <bean.namedCount1_WithNameN1()> é diferente de " + result85 + " <bean.namedCount1_WithNameN1()>")
chamada antiga: Assert.assertEquals(bean.namedCount1_WithNameN1(), bean.namedCount2_WithNameN1())
nova chamada: assertEquals(bean.namedCount1_WithNameN1(), bean.namedCount2_WithNameN1(), "Era esperado valores iguais, mas " + result86 + " <bean.namedCount1_WithNameN1()> é diferente de " + result87 + " <bean.namedCount2_WithNameN1()>")
chamada antiga: Assert.assertNotEquals(bean.namedCount1_WithNameN1(), bean.namedCount_WithNameN2())
nova chamada: assertNotEquals(bean.namedCount1_WithNameN1(), bean.namedCount_WithNameN2(), "Era esperado valores diferentes, mas " + result88 + " <bean.namedCount1_WithNameN1()> é igual a " + result89 + " <bean.namedCount_WithNameN2()>")
chamada antiga: Assert.assertEquals(bean.namedCount_WithNameN2(), bean.namedCount_WithNameN2())
nova chamada: assertEquals(bean.namedCount_WithNameN2(), bean.namedCount_WithNameN2(), "Era esperado valores iguais, mas " + result90 + " <bean.namedCount_WithNameN2()> é diferente de " + result91 + " <bean.namedCount_WithNameN2()>")
chamada antiga: Assert.assertEquals(v1, bean.count("K1"))
nova chamada: assertEquals(v1, bean.count("K1"), "Era esperado valores iguais, mas  v1 é diferente de " + result92 + " <bean.count('K1')>")
chamada antiga: Assert.assertNotEquals(v1, v2)
nova chamada: assertNotEquals(v1, v2, "Era esperado valores diferentes, mas  v1 é igual a " + " v2")
chamada antiga: Assert.assertEquals(v2, bean.count("K1"))
nova chamada: assertEquals(v2, bean.count("K1"), "Era esperado valores iguais, mas  v2 é diferente de " + result93 + " <bean.count('K1')>")
chamada antiga: Assert.assertEquals(200, bean.count("K1"))
nova chamada: assertEquals(200, bean.count("K1"), "Era esperado valores iguais, mas  200 é diferente de " + result94 + " <bean.count('K1')>")
chamada antiga: Assert.assertEquals(200, bean.count("K1"))
nova chamada: assertEquals(200, bean.count("K1"), "Era esperado valores iguais, mas  200 é diferente de " + result95 + " <bean.count('K1')>")
chamada antiga: Assert.assertEquals(bean.count("K1"), bean.count("K1"))
nova chamada: assertEquals(bean.count("K1"), bean.count("K1"), "Era esperado valores iguais, mas " + result96 + " <bean.count('K1')> é diferente de " + result97 + " <bean.count('K1')>")
chamada antiga: Assert.assertNotEquals(bean.count("K1"), bean.count("K2"))
nova chamada: assertNotEquals(bean.count("K1"), bean.count("K2"), "Era esperado valores diferentes, mas " + result98 + " <bean.count('K1')> é igual a " + result99 + " <bean.count('K2')>")
chamada antiga: Assert.assertSame(c, c2)
nova chamada: assertSame(c, c2, "Era esperado objetos iguais, mas  c é diferente de " + " c2")
chamada antiga: Assert.assertEquals(CacheResultCode.NOT_EXISTS, cache.GET("BASE_K1").getResultCode())
nova chamada: assertEquals(CacheResultCode.NOT_EXISTS, cache.GET("BASE_K1").getResultCode(), "Era esperado valores iguais, mas  CacheResultCode.NOT_EXISTS é diferente de " + result100 + " <cache.GET('BASE_K1').getResultCode()>")
chamada antiga: Assert.assertEquals(CacheResultCode.SUCCESS, cache.PUT("BASE_K1", "V1", 10, TimeUnit.SECONDS).getResultCode())
nova chamada: assertEquals(CacheResultCode.SUCCESS, cache.PUT("BASE_K1", "V1", 10, TimeUnit.SECONDS).getResultCode(), "Era esperado valores iguais, mas  CacheResultCode.SUCCESS é diferente de " + result101 + " <cache.PUT('BASE_K1', 'V1', 10, TimeUnit.SECONDS).getResultCode()>")
chamada antiga: Assert.assertEquals(CacheResultCode.SUCCESS, cache.GET("BASE_K1").getResultCode())
nova chamada: assertEquals(CacheResultCode.SUCCESS, cache.GET("BASE_K1").getResultCode(), "Era esperado valores iguais, mas  CacheResultCode.SUCCESS é diferente de " + result102 + " <cache.GET('BASE_K1').getResultCode()>")
chamada antiga: Assert.assertEquals("V1", cache.GET("BASE_K1").getValue())
nova chamada: assertEquals("V1", cache.GET("BASE_K1").getValue(), "Era esperado valores iguais, mas  'V1' é diferente de " + result103 + " <cache.GET('BASE_K1').getValue()>")
chamada antiga: Assert.assertEquals(CacheResultCode.SUCCESS, cache.PUT("BASE_K1", "V2", 10, TimeUnit.SECONDS).getResultCode())
nova chamada: assertEquals(CacheResultCode.SUCCESS, cache.PUT("BASE_K1", "V2", 10, TimeUnit.SECONDS).getResultCode(), "Era esperado valores iguais, mas  CacheResultCode.SUCCESS é diferente de " + result104 + " <cache.PUT('BASE_K1', 'V2', 10, TimeUnit.SECONDS).getResultCode()>")
chamada antiga: Assert.assertEquals("V2", cache.GET("BASE_K1").getValue())
nova chamada: assertEquals("V2", cache.GET("BASE_K1").getValue(), "Era esperado valores iguais, mas  'V2' é diferente de " + result105 + " <cache.GET('BASE_K1').getValue()>")
chamada antiga: Assert.assertEquals(CacheResultCode.SUCCESS, cache.REMOVE("BASE_K1").getResultCode())
nova chamada: assertEquals(CacheResultCode.SUCCESS, cache.REMOVE("BASE_K1").getResultCode(), "Era esperado valores iguais, mas  CacheResultCode.SUCCESS é diferente de " + result106 + " <cache.REMOVE('BASE_K1').getResultCode()>")
chamada antiga: Assert.assertEquals(CacheResultCode.NOT_EXISTS, cache.GET("BASE_K1").getResultCode())
nova chamada: assertEquals(CacheResultCode.NOT_EXISTS, cache.GET("BASE_K1").getResultCode(), "Era esperado valores iguais, mas  CacheResultCode.NOT_EXISTS é diferente de " + result107 + " <cache.GET('BASE_K1').getResultCode()>")
chamada antiga: Assert.assertTrue(r.isSuccess())
nova chamada: assertTrue(r.isSuccess(), "Era esperado verdadeiro, mas " + result108 + " <r.isSuccess()> é falso")
chamada antiga: Assert.assertNull(r.getValue())
nova chamada: assertNull(r.getValue(), "Era esperado nulo, mas " + result109 + " <r.getValue()> não é nulo")
chamada antiga: Assert.assertNull(cache.get(null))
nova chamada: assertNull(cache.get(null), "Era esperado nulo, mas " + result110 + " <cache.get(null)> não é nulo")
chamada antiga: Assert.assertEquals(CacheResultCode.FAIL, cache.GET(null).getResultCode())
nova chamada: assertEquals(CacheResultCode.FAIL, cache.GET(null).getResultCode(), "Era esperado valores iguais, mas  CacheResultCode.FAIL é diferente de " + result111 + " <cache.GET(null).getResultCode()>")
chamada antiga: Assert.assertEquals(CacheResult.MSG_ILLEGAL_ARGUMENT, cache.GET(null).getMessage())
nova chamada: assertEquals(CacheResult.MSG_ILLEGAL_ARGUMENT, cache.GET(null).getMessage(), "Era esperado valores iguais, mas  CacheResult.MSG_ILLEGAL_ARGUMENT é diferente de " + result112 + " <cache.GET(null).getMessage()>")
chamada antiga: Assert.assertNull(cache.getAll(null))
nova chamada: assertNull(cache.getAll(null), "Era esperado nulo, mas " + result113 + " <cache.getAll(null)> não é nulo")
chamada antiga: Assert.assertEquals(CacheResultCode.FAIL, cache.GET_ALL(null).getResultCode())
nova chamada: assertEquals(CacheResultCode.FAIL, cache.GET_ALL(null).getResultCode(), "Era esperado valores iguais, mas  CacheResultCode.FAIL é diferente de " + result114 + " <cache.GET_ALL(null).getResultCode()>")
chamada antiga: Assert.assertEquals(CacheResult.MSG_ILLEGAL_ARGUMENT, cache.GET_ALL(null).getMessage())
nova chamada: assertEquals(CacheResult.MSG_ILLEGAL_ARGUMENT, cache.GET_ALL(null).getMessage(), "Era esperado valores iguais, mas  CacheResult.MSG_ILLEGAL_ARGUMENT é diferente de " + result115 + " <cache.GET_ALL(null).getMessage()>")
chamada antiga: Assert.assertEquals(CacheResultCode.FAIL, cache.PUT(null, "V1").getResultCode())
nova chamada: assertEquals(CacheResultCode.FAIL, cache.PUT(null, "V1").getResultCode(), "Era esperado valores iguais, mas  CacheResultCode.FAIL é diferente de " + result116 + " <cache.PUT(null, 'V1').getResultCode()>")
chamada antiga: Assert.assertEquals(CacheResult.MSG_ILLEGAL_ARGUMENT, cache.PUT(null, "V1").getMessage())
nova chamada: assertEquals(CacheResult.MSG_ILLEGAL_ARGUMENT, cache.PUT(null, "V1").getMessage(), "Era esperado valores iguais, mas  CacheResult.MSG_ILLEGAL_ARGUMENT é diferente de " + result117 + " <cache.PUT(null, 'V1').getMessage()>")
chamada antiga: Assert.assertEquals(CacheResultCode.FAIL, cache.PUT(null, "V1", 1, TimeUnit.SECONDS).getResultCode())
nova chamada: assertEquals(CacheResultCode.FAIL, cache.PUT(null, "V1", 1, TimeUnit.SECONDS).getResultCode(), "Era esperado valores iguais, mas  CacheResultCode.FAIL é diferente de " + result118 + " <cache.PUT(null, 'V1', 1, TimeUnit.SECONDS).getResultCode()>")
chamada antiga: Assert.assertEquals(CacheResult.MSG_ILLEGAL_ARGUMENT, cache.PUT(null, "V1", 1, TimeUnit.SECONDS).getMessage())
nova chamada: assertEquals(CacheResult.MSG_ILLEGAL_ARGUMENT, cache.PUT(null, "V1", 1, TimeUnit.SECONDS).getMessage(), "Era esperado valores iguais, mas  CacheResult.MSG_ILLEGAL_ARGUMENT é diferente de " + result119 + " <cache.PUT(null, 'V1', 1, TimeUnit.SECONDS).getMessage()>")
chamada antiga: Assert.assertEquals(CacheResultCode.FAIL, cache.PUT_ALL(null).getResultCode())
nova chamada: assertEquals(CacheResultCode.FAIL, cache.PUT_ALL(null).getResultCode(), "Era esperado valores iguais, mas  CacheResultCode.FAIL é diferente de " + result120 + " <cache.PUT_ALL(null).getResultCode()>")
chamada antiga: Assert.assertEquals(CacheResult.MSG_ILLEGAL_ARGUMENT, cache.PUT_ALL(null).getMessage())
nova chamada: assertEquals(CacheResult.MSG_ILLEGAL_ARGUMENT, cache.PUT_ALL(null).getMessage(), "Era esperado valores iguais, mas  CacheResult.MSG_ILLEGAL_ARGUMENT é diferente de " + result121 + " <cache.PUT_ALL(null).getMessage()>")
chamada antiga: Assert.assertEquals(CacheResultCode.FAIL, cache.PUT_ALL(null, 1, TimeUnit.SECONDS).getResultCode())
nova chamada: assertEquals(CacheResultCode.FAIL, cache.PUT_ALL(null, 1, TimeUnit.SECONDS).getResultCode(), "Era esperado valores iguais, mas  CacheResultCode.FAIL é diferente de " + result122 + " <cache.PUT_ALL(null, 1, TimeUnit.SECONDS).getResultCode()>")
chamada antiga: Assert.assertEquals(CacheResult.MSG_ILLEGAL_ARGUMENT, cache.PUT_ALL(null, 1, TimeUnit.SECONDS).getMessage())
nova chamada: assertEquals(CacheResult.MSG_ILLEGAL_ARGUMENT, cache.PUT_ALL(null, 1, TimeUnit.SECONDS).getMessage(), "Era esperado valores iguais, mas  CacheResult.MSG_ILLEGAL_ARGUMENT é diferente de " + result123 + " <cache.PUT_ALL(null, 1, TimeUnit.SECONDS).getMessage()>")
chamada antiga: Assert.assertEquals(CacheResultCode.FAIL, cache.REMOVE(null).getResultCode())
nova chamada: assertEquals(CacheResultCode.FAIL, cache.REMOVE(null).getResultCode(), "Era esperado valores iguais, mas  CacheResultCode.FAIL é diferente de " + result124 + " <cache.REMOVE(null).getResultCode()>")
chamada antiga: Assert.assertEquals(CacheResult.MSG_ILLEGAL_ARGUMENT, cache.REMOVE(null).getMessage())
nova chamada: assertEquals(CacheResult.MSG_ILLEGAL_ARGUMENT, cache.REMOVE(null).getMessage(), "Era esperado valores iguais, mas  CacheResult.MSG_ILLEGAL_ARGUMENT é diferente de " + result125 + " <cache.REMOVE(null).getMessage()>")
chamada antiga: Assert.assertEquals(CacheResultCode.FAIL, cache.REMOVE_ALL(null).getResultCode())
nova chamada: assertEquals(CacheResultCode.FAIL, cache.REMOVE_ALL(null).getResultCode(), "Era esperado valores iguais, mas  CacheResultCode.FAIL é diferente de " + result126 + " <cache.REMOVE_ALL(null).getResultCode()>")
chamada antiga: Assert.assertEquals(CacheResult.MSG_ILLEGAL_ARGUMENT, cache.REMOVE_ALL(null).getMessage())
nova chamada: assertEquals(CacheResult.MSG_ILLEGAL_ARGUMENT, cache.REMOVE_ALL(null).getMessage(), "Era esperado valores iguais, mas  CacheResult.MSG_ILLEGAL_ARGUMENT é diferente de " + result127 + " <cache.REMOVE_ALL(null).getMessage()>")
chamada antiga: Assert.assertNull(cache.tryLock(null, 1, TimeUnit.SECONDS))
nova chamada: assertNull(cache.tryLock(null, 1, TimeUnit.SECONDS), "Era esperado nulo, mas " + result128 + " <cache.tryLock(null, 1, TimeUnit.SECONDS)> não é nulo")
chamada antiga: Assert.assertTrue(r.isSuccess())
nova chamada: assertTrue(r.isSuccess(), "Era esperado verdadeiro, mas " + result129 + " <r.isSuccess()> é falso")
chamada antiga: Assert.assertEquals(3, r.getValues().size())
nova chamada: assertEquals(3, r.getValues().size(), "Era esperado valores iguais, mas  3 é diferente de " + result130 + " <r.getValues().size()>")
chamada antiga: Assert.assertTrue(r.getValues().get(k1).isSuccess())
nova chamada: assertTrue(r.getValues().get(k1).isSuccess(), "Era esperado verdadeiro, mas " + result131 + " <r.getValues().get(k1).isSuccess()> é falso")
chamada antiga: Assert.assertEquals("V1", r.getValues().get(k1).getValue())
nova chamada: assertEquals("V1", r.getValues().get(k1).getValue(), "Era esperado valores iguais, mas  'V1' é diferente de " + result132 + " <r.getValues().get(k1).getValue()>")
chamada antiga: Assert.assertTrue(r.getValues().get(k2).isSuccess())
nova chamada: assertTrue(r.getValues().get(k2).isSuccess(), "Era esperado verdadeiro, mas " + result133 + " <r.getValues().get(k2).isSuccess()> é falso")
chamada antiga: Assert.assertEquals("V2", r.getValues().get(k2).getValue())
nova chamada: assertEquals("V2", r.getValues().get(k2).getValue(), "Era esperado valores iguais, mas  'V2' é diferente de " + result134 + " <r.getValues().get(k2).getValue()>")
chamada antiga: Assert.assertEquals(CacheResultCode.NOT_EXISTS, r.getValues().get(k3).getResultCode())
nova chamada: assertEquals(CacheResultCode.NOT_EXISTS, r.getValues().get(k3).getResultCode(), "Era esperado valores iguais, mas  CacheResultCode.NOT_EXISTS é diferente de " + result135 + " <r.getValues().get(k3).getResultCode()>")
chamada antiga: Assert.assertNull(r.getValues().get(k3).getValue())
nova chamada: assertNull(r.getValues().get(k3).getValue(), "Era esperado nulo, mas " + result136 + " <r.getValues().get(k3).getValue()> não é nulo")
chamada antiga: Assert.assertEquals(2, map.size())
nova chamada: assertEquals(2, map.size(), "Era esperado valores iguais, mas  2 é diferente de " + result137 + " <map.size()>")
chamada antiga: Assert.assertEquals("V1", map.get(k1))
nova chamada: assertEquals("V1", map.get(k1), "Era esperado valores iguais, mas  'V1' é diferente de " + result138 + " <map.get(k1)>")
chamada antiga: Assert.assertEquals("V2", map.get(k2))
nova chamada: assertEquals("V2", map.get(k2), "Era esperado valores iguais, mas  'V2' é diferente de " + result139 + " <map.get(k2)>")
chamada antiga: Assert.assertNull(map.get(k3))
nova chamada: assertNull(map.get(k3), "Era esperado nulo, mas " + result140 + " <map.get(k3)> não é nulo")
chamada antiga: Assert.assertEquals(0, cache.getAll(Collections.emptySet()).size())
nova chamada: assertEquals(0, cache.getAll(Collections.emptySet()).size(), "Era esperado valores iguais, mas  0 é diferente de " + result141 + " <cache.getAll(Collections.emptySet()).size()>")
chamada antiga: Assert.assertTrue(cache.PUT_ALL(m).isSuccess())
nova chamada: assertTrue(cache.PUT_ALL(m).isSuccess(), "Era esperado verdadeiro, mas " + result142 + " <cache.PUT_ALL(m).isSuccess()> é falso")
chamada antiga: Assert.assertEquals("V1", cache.get(k1))
nova chamada: assertEquals("V1", cache.get(k1), "Era esperado valores iguais, mas  'V1' é diferente de " + result143 + " <cache.get(k1)>")
chamada antiga: Assert.assertEquals("V2", cache.get(k2))
nova chamada: assertEquals("V2", cache.get(k2), "Era esperado valores iguais, mas  'V2' é diferente de " + result144 + " <cache.get(k2)>")
chamada antiga: Assert.assertEquals("V3", cache.get(k3))
nova chamada: assertEquals("V3", cache.get(k3), "Era esperado valores iguais, mas  'V3' é diferente de " + result145 + " <cache.get(k3)>")
chamada antiga: Assert.assertEquals("V4", cache.get(k4))
nova chamada: assertEquals("V4", cache.get(k4), "Era esperado valores iguais, mas  'V4' é diferente de " + result146 + " <cache.get(k4)>")
chamada antiga: Assert.assertEquals("V5", cache.get(k5))
nova chamada: assertEquals("V5", cache.get(k5), "Era esperado valores iguais, mas  'V5' é diferente de " + result147 + " <cache.get(k5)>")
chamada antiga: Assert.assertEquals("V6", cache.get(k6))
nova chamada: assertEquals("V6", cache.get(k6), "Era esperado valores iguais, mas  'V6' é diferente de " + result148 + " <cache.get(k6)>")
chamada antiga: Assert.assertTrue(cache.PUT_ALL(m, 5000, TimeUnit.MILLISECONDS).isSuccess())
nova chamada: assertTrue(cache.PUT_ALL(m, 5000, TimeUnit.MILLISECONDS).isSuccess(), "Era esperado verdadeiro, mas " + result149 + " <cache.PUT_ALL(m, 5000, TimeUnit.MILLISECONDS).isSuccess()> é falso")
chamada antiga: Assert.assertEquals("V7", cache.get(k7))
nova chamada: assertEquals("V7", cache.get(k7), "Era esperado valores iguais, mas  'V7' é diferente de " + result150 + " <cache.get(k7)>")
chamada antiga: Assert.assertEquals("V8", cache.get(k8))
nova chamada: assertEquals("V8", cache.get(k8), "Era esperado valores iguais, mas  'V8' é diferente de " + result151 + " <cache.get(k8)>")
chamada antiga: Assert.assertEquals("V9", cache.get(k9))
nova chamada: assertEquals("V9", cache.get(k9), "Era esperado valores iguais, mas  'V9' é diferente de " + result152 + " <cache.get(k9)>")
chamada antiga: Assert.assertEquals("V77", cache.get(k7))
nova chamada: assertEquals("V77", cache.get(k7), "Era esperado valores iguais, mas  'V77' é diferente de " + result153 + " <cache.get(k7)>")
chamada antiga: Assert.assertEquals("V88", cache.get(k8))
nova chamada: assertEquals("V88", cache.get(k8), "Era esperado valores iguais, mas  'V88' é diferente de " + result154 + " <cache.get(k8)>")
chamada antiga: Assert.assertEquals("V99", cache.get(k9))
nova chamada: assertEquals("V99", cache.get(k9), "Era esperado valores iguais, mas  'V99' é diferente de " + result155 + " <cache.get(k9)>")
chamada antiga: Assert.assertNull(cache.get(k1))
nova chamada: assertNull(cache.get(k1), "Era esperado nulo, mas " + result156 + " <cache.get(k1)> não é nulo")
chamada antiga: Assert.assertNull(cache.get(k2))
nova chamada: assertNull(cache.get(k2), "Era esperado nulo, mas " + result157 + " <cache.get(k2)> não é nulo")
chamada antiga: Assert.assertNotNull(cache.get(k3))
nova chamada: assertNotNull(cache.get(k3), "Era esperado não nulo, mas " + result158 + " <cache.get(k3)> é nulo")
chamada antiga: Assert.assertTrue(cache.REMOVE_ALL(s).isSuccess())
nova chamada: assertTrue(cache.REMOVE_ALL(s).isSuccess(), "Era esperado verdadeiro, mas " + result159 + " <cache.REMOVE_ALL(s).isSuccess()> é falso")
chamada antiga: Assert.assertNull(cache.get(k1))
nova chamada: assertNull(cache.get(k1), "Era esperado nulo, mas " + result160 + " <cache.get(k1)> não é nulo")
chamada antiga: Assert.assertNull(cache.get(k2))
nova chamada: assertNull(cache.get(k2), "Era esperado nulo, mas " + result161 + " <cache.get(k2)> não é nulo")
chamada antiga: Assert.assertNull(cache.get(k3))
nova chamada: assertNull(cache.get(k3), "Era esperado nulo, mas " + result162 + " <cache.get(k3)> não é nulo")
chamada antiga: Assert.assertTrue(cache.putIfAbsent("PIA_K1", "V1"))
nova chamada: assertTrue(cache.putIfAbsent("PIA_K1", "V1"), "Era esperado verdadeiro, mas " + result163 + " <cache.putIfAbsent('PIA_K1', 'V1')> é falso")
chamada antiga: Assert.assertEquals("V1", cache.get("PIA_K1"))
nova chamada: assertEquals("V1", cache.get("PIA_K1"), "Era esperado valores iguais, mas  'V1' é diferente de " + result164 + " <cache.get('PIA_K1')>")
chamada antiga: Assert.assertTrue(cache.remove("PIA_K1"))
nova chamada: assertTrue(cache.remove("PIA_K1"), "Era esperado verdadeiro, mas " + result165 + " <cache.remove('PIA_K1')> é falso")
chamada antiga: Assert.assertEquals(CacheResultCode.SUCCESS, cache.PUT_IF_ABSENT("PIA_K2", "V2", 10, TimeUnit.SECONDS).getResultCode())
nova chamada: assertEquals(CacheResultCode.SUCCESS, cache.PUT_IF_ABSENT("PIA_K2", "V2", 10, TimeUnit.SECONDS).getResultCode(), "Era esperado valores iguais, mas  CacheResultCode.SUCCESS é diferente de " + result166 + " <cache.PUT_IF_ABSENT('PIA_K2', 'V2', 10, TimeUnit.SECONDS).getResultCode()>")
chamada antiga: Assert.assertEquals(CacheResultCode.EXISTS, cache.PUT_IF_ABSENT("PIA_K2", "V2", 10, TimeUnit.SECONDS).getResultCode())
nova chamada: assertEquals(CacheResultCode.EXISTS, cache.PUT_IF_ABSENT("PIA_K2", "V2", 10, TimeUnit.SECONDS).getResultCode(), "Era esperado valores iguais, mas  CacheResultCode.EXISTS é diferente de " + result167 + " <cache.PUT_IF_ABSENT('PIA_K2', 'V2', 10, TimeUnit.SECONDS).getResultCode()>")
chamada antiga: Assert.assertEquals("V2", cache.get("PIA_K2"))
nova chamada: assertEquals("V2", cache.get("PIA_K2"), "Era esperado valores iguais, mas  'V2' é diferente de " + result168 + " <cache.get('PIA_K2')>")
chamada antiga: Assert.assertTrue(cache.remove("PIA_K2"))
nova chamada: assertTrue(cache.remove("PIA_K2"), "Era esperado verdadeiro, mas " + result169 + " <cache.remove('PIA_K2')> é falso")
chamada antiga: Assert.assertEquals(CacheResultCode.SUCCESS, cache.PUT_IF_ABSENT("PIA_K3", "V3", 5, TimeUnit.MILLISECONDS).getResultCode())
nova chamada: assertEquals(CacheResultCode.SUCCESS, cache.PUT_IF_ABSENT("PIA_K3", "V3", 5, TimeUnit.MILLISECONDS).getResultCode(), "Era esperado valores iguais, mas  CacheResultCode.SUCCESS é diferente de " + result170 + " <cache.PUT_IF_ABSENT('PIA_K3', 'V3', 5, TimeUnit.MILLISECONDS).getResultCode()>")
chamada antiga: Assert.assertEquals(CacheResultCode.SUCCESS, cache.PUT_IF_ABSENT("PIA_K3", "V3", 5, TimeUnit.MILLISECONDS).getResultCode())
nova chamada: assertEquals(CacheResultCode.SUCCESS, cache.PUT_IF_ABSENT("PIA_K3", "V3", 5, TimeUnit.MILLISECONDS).getResultCode(), "Era esperado valores iguais, mas  CacheResultCode.SUCCESS é diferente de " + result171 + " <cache.PUT_IF_ABSENT('PIA_K3', 'V3', 5, TimeUnit.MILLISECONDS).getResultCode()>")
chamada antiga: Assert.assertEquals(a2, fromCache)
nova chamada: assertEquals(a2, fromCache, "Era esperado valores iguais, mas  a2 é diferente de " + " fromCache")
chamada antiga: Assert.assertNotEquals(a3, fromCache)
nova chamada: assertNotEquals(a3, fromCache, "Era esperado valores diferentes, mas  a3 é igual a " + " fromCache")
chamada antiga: Assert.assertNotNull(cache.tryLock("LockKey1", 50, TimeUnit.MILLISECONDS))
nova chamada: assertNotNull(cache.tryLock("LockKey1", 50, TimeUnit.MILLISECONDS), "Era esperado não nulo, mas " + result172 + " <cache.tryLock('LockKey1', 50, TimeUnit.MILLISECONDS)> é nulo")
chamada antiga: Assert.assertNull(cache.tryLock("LockKey1", 50, TimeUnit.MILLISECONDS))
nova chamada: assertNull(cache.tryLock("LockKey1", 50, TimeUnit.MILLISECONDS), "Era esperado nulo, mas " + result173 + " <cache.tryLock('LockKey1', 50, TimeUnit.MILLISECONDS)> não é nulo")
chamada antiga: Assert.assertNotNull(cache.tryLock("LockKey1", 50, TimeUnit.MILLISECONDS))
nova chamada: assertNotNull(cache.tryLock("LockKey1", 50, TimeUnit.MILLISECONDS), "Era esperado não nulo, mas " + result174 + " <cache.tryLock('LockKey1', 50, TimeUnit.MILLISECONDS)> é nulo")
chamada antiga: Assert.assertEquals(1, runCount[0])
nova chamada: assertEquals(1, runCount[0], "Era esperado valores iguais, mas  1 é diferente de " + " runCount[0]")
chamada antiga: Assert.assertEquals(1, runCount[1])
nova chamada: assertEquals(1, runCount[1], "Era esperado valores iguais, mas  1 é diferente de " + " runCount[1]")
chamada antiga: Assert.assertEquals(CacheResultCode.SUCCESS, cache.PUT("EXPIRE_A_K1", "V1").getResultCode())
nova chamada: assertEquals(CacheResultCode.SUCCESS, cache.PUT("EXPIRE_A_K1", "V1").getResultCode(), "Era esperado valores iguais, mas  CacheResultCode.SUCCESS é diferente de " + result175 + " <cache.PUT('EXPIRE_A_K1', 'V1').getResultCode()>")
chamada antiga: Assert.assertEquals(CacheResultCode.SUCCESS, r.getResultCode())
nova chamada: assertEquals(CacheResultCode.SUCCESS, r.getResultCode(), "Era esperado valores iguais, mas  CacheResultCode.SUCCESS é diferente de " + result176 + " <r.getResultCode()>")
chamada antiga: Assert.assertEquals("V1", r.getValue())
nova chamada: assertEquals("V1", r.getValue(), "Era esperado valores iguais, mas  'V1' é diferente de " + result177 + " <r.getValue()>")
chamada antiga: Assert.assertEquals(CacheResultCode.SUCCESS, r.getResultCode())
nova chamada: assertEquals(CacheResultCode.SUCCESS, r.getResultCode(), "Era esperado valores iguais, mas  CacheResultCode.SUCCESS é diferente de " + result178 + " <r.getResultCode()>")
chamada antiga: Assert.assertEquals("V1", r.getValue())
nova chamada: assertEquals("V1", r.getValue(), "Era esperado valores iguais, mas  'V1' é diferente de " + result179 + " <r.getValue()>")
chamada antiga: Assert.assertTrue(r.getResultCode() == CacheResultCode.EXPIRED || r.getResultCode() == CacheResultCode.NOT_EXISTS)
nova chamada: assertTrue(r.getResultCode() == CacheResultCode.EXPIRED || r.getResultCode() == CacheResultCode.NOT_EXISTS, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assert.assertNull(r.getValue())
nova chamada: assertNull(r.getValue(), "Era esperado nulo, mas " + result180 + " <r.getValue()> não é nulo")
chamada antiga: Assert.assertEquals("V1", cache.get(key))
nova chamada: assertEquals("V1", cache.get(key), "Era esperado valores iguais, mas  'V1' é diferente de " + result181 + " <cache.get(key)>")
chamada antiga: Assert.assertEquals("V1", cache.get(key))
nova chamada: assertEquals("V1", cache.get(key), "Era esperado valores iguais, mas  'V1' é diferente de " + result182 + " <cache.get(key)>")
chamada antiga: Assert.assertEquals("V1", cache.get(key))
nova chamada: assertEquals("V1", cache.get(key), "Era esperado valores iguais, mas  'V1' é diferente de " + result183 + " <cache.get(key)>")
chamada antiga: Assert.assertTrue(r.getResultCode() == CacheResultCode.EXPIRED || r.getResultCode() == CacheResultCode.NOT_EXISTS)
nova chamada: assertTrue(r.getResultCode() == CacheResultCode.EXPIRED || r.getResultCode() == CacheResultCode.NOT_EXISTS, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assert.assertNull(r.getValue())
nova chamada: assertNull(r.getValue(), "Era esperado nulo, mas " + result184 + " <r.getValue()> não é nulo")
chamada antiga: Assert.assertEquals("V1", cache.get(d2))
nova chamada: assertEquals("V1", cache.get(d2), "Era esperado valores iguais, mas  'V1' é diferente de " + result185 + " <cache.get(d2)>")
chamada antiga: Assert.assertNull(cache.get(d3))
nova chamada: assertNull(cache.get(d3), "Era esperado nulo, mas " + result186 + " <cache.get(d3)> não é nulo")
chamada antiga: Assert.assertEquals(lockAtommicCount1.get(), lockCount1.get())
nova chamada: assertEquals(lockAtommicCount1.get(), lockCount1.get(), "Era esperado valores iguais, mas " + result187 + " <lockAtommicCount1.get()> é diferente de " + result188 + " <lockCount1.get()>")
chamada antiga: Assert.assertEquals(lockAtommicCount2.get(), lockCount2.get())
nova chamada: assertEquals(lockAtommicCount2.get(), lockCount2.get(), "Era esperado valores iguais, mas " + result189 + " <lockAtommicCount2.get()> é diferente de " + result190 + " <lockCount2.get()>")
chamada antiga: Assert.assertEquals(3, loadSuccess.get())
nova chamada: assertEquals(3, loadSuccess.get(), "Era esperado valores iguais, mas  3 é diferente de " + result191 + " <loadSuccess.get()>")
chamada antiga: Assert.assertEquals(2 + 3, getFailCount.get())
nova chamada: assertEquals(2 + 3, getFailCount.get(), "Era esperado valores iguais, mas  2 + 3 é diferente de " + result192 + " <getFailCount.get()>")
chamada antiga: Assert.assertNull(failMsg[0])
nova chamada: assertNull(failMsg[0], "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: Assert.assertEquals("V", v)
nova chamada: assertEquals("V", v, "Era esperado valores iguais, mas  'V' é diferente de " + " v")
chamada antiga: Assert.assertEquals(2, loadSuccess.intValue())
nova chamada: assertEquals(2, loadSuccess.intValue(), "Era esperado valores iguais, mas  2 é diferente de " + result193 + " <loadSuccess.intValue()>")
chamada antiga: Assert.assertEquals(2, loadSuccess.intValue())
nova chamada: assertEquals(2, loadSuccess.intValue(), "Era esperado valores iguais, mas  2 é diferente de " + result194 + " <loadSuccess.intValue()>")
chamada antiga: assertEquals("V1", l1Cache.get("SIMPLE_K1"))
nova chamada: assertEquals("V1", l1Cache.get("SIMPLE_K1"), "Era esperado valores iguais, mas  'V1' é diferente de " + result195 + " <l1Cache.get('SIMPLE_K1')>")
chamada antiga: assertEquals("V1", l2Cache.get("SIMPLE_K1"))
nova chamada: assertEquals("V1", l2Cache.get("SIMPLE_K1"), "Era esperado valores iguais, mas  'V1' é diferente de " + result196 + " <l2Cache.get('SIMPLE_K1')>")
chamada antiga: assertEquals("V2", cache.get("SIMPLE_K2"))
nova chamada: assertEquals("V2", cache.get("SIMPLE_K2"), "Era esperado valores iguais, mas  'V2' é diferente de " + result197 + " <cache.get('SIMPLE_K2')>")
chamada antiga: assertNull(l2Cache.get("SIMPLE_K2"))
nova chamada: assertNull(l2Cache.get("SIMPLE_K2"), "Era esperado nulo, mas " + result198 + " <l2Cache.get('SIMPLE_K2')> não é nulo")
chamada antiga: assertNull(l1Cache.get("SIMPLE_K3"))
nova chamada: assertNull(l1Cache.get("SIMPLE_K3"), "Era esperado nulo, mas " + result199 + " <l1Cache.get('SIMPLE_K3')> não é nulo")
chamada antiga: assertEquals("V3", cache.get("SIMPLE_K3"))
nova chamada: assertEquals("V3", cache.get("SIMPLE_K3"), "Era esperado valores iguais, mas  'V3' é diferente de " + result200 + " <cache.get('SIMPLE_K3')>")
chamada antiga: assertEquals("V3", l1Cache.get("SIMPLE_K3"))
nova chamada: assertEquals("V3", l1Cache.get("SIMPLE_K3"), "Era esperado valores iguais, mas  'V3' é diferente de " + result201 + " <l1Cache.get('SIMPLE_K3')>")
chamada antiga: assertTrue(r1.getHolder().getValue() instanceof CacheValueHolder)
nova chamada: assertTrue(r1.getHolder().getValue() instanceof CacheValueHolder, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(r2.getHolder().getValue() instanceof CacheValueHolder)
nova chamada: assertTrue(r2.getHolder().getValue() instanceof CacheValueHolder, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(multiResult.isSuccess())
nova chamada: assertTrue(multiResult.isSuccess(), "Era esperado verdadeiro, mas " + result202 + " <multiResult.isSuccess()> é falso")
chamada antiga: assertTrue(multiResult.getValues().get("MIX_K1").isSuccess())
nova chamada: assertTrue(multiResult.getValues().get("MIX_K1").isSuccess(), "Era esperado verdadeiro, mas " + result203 + " <multiResult.getValues().get('MIX_K1').isSuccess()> é falso")
chamada antiga: assertEquals("V1", multiResult.getValues().get("MIX_K1").getValue())
nova chamada: assertEquals("V1", multiResult.getValues().get("MIX_K1").getValue(), "Era esperado valores iguais, mas  'V1' é diferente de " + result204 + " <multiResult.getValues().get('MIX_K1').getValue()>")
chamada antiga: assertTrue(multiResult.getValues().get("MIX_K1").getHolder().getValue() instanceof CacheValueHolder)
nova chamada: assertTrue(multiResult.getValues().get("MIX_K1").getHolder().getValue() instanceof CacheValueHolder, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(multiResult.getValues().get("MIX_K2").isSuccess())
nova chamada: assertTrue(multiResult.getValues().get("MIX_K2").isSuccess(), "Era esperado verdadeiro, mas " + result205 + " <multiResult.getValues().get('MIX_K2').isSuccess()> é falso")
chamada antiga: assertNull(multiResult.getValues().get("MIX_K2").getValue())
nova chamada: assertNull(multiResult.getValues().get("MIX_K2").getValue(), "Era esperado nulo, mas " + result206 + " <multiResult.getValues().get('MIX_K2').getValue()> não é nulo")
chamada antiga: assertTrue(multiResult.getValues().get("MIX_K2").getHolder().getValue() instanceof CacheValueHolder)
nova chamada: assertTrue(multiResult.getValues().get("MIX_K2").getHolder().getValue() instanceof CacheValueHolder, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNull(multiResult.getValues().get("MIX_K3").getValue())
nova chamada: assertNull(multiResult.getValues().get("MIX_K3").getValue(), "Era esperado nulo, mas " + result207 + " <multiResult.getValues().get('MIX_K3').getValue()> não é nulo")
chamada antiga: assertNull(multiResult.getValues().get("MIX_K3").getHolder())
nova chamada: assertNull(multiResult.getValues().get("MIX_K3").getHolder(), "Era esperado nulo, mas " + result208 + " <multiResult.getValues().get('MIX_K3').getHolder()> não é nulo")
chamada antiga: assertTrue(r1.getHolder().getValue() instanceof String)
nova chamada: assertTrue(r1.getHolder().getValue() instanceof String, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNull(r2.getHolder().getValue())
nova chamada: assertNull(r2.getHolder().getValue(), "Era esperado nulo, mas " + result209 + " <r2.getHolder().getValue()> não é nulo")
chamada antiga: assertTrue(multiResult.isSuccess())
nova chamada: assertTrue(multiResult.isSuccess(), "Era esperado verdadeiro, mas " + result210 + " <multiResult.isSuccess()> é falso")
chamada antiga: assertTrue(multiResult.getValues().get("MIX_K1").isSuccess())
nova chamada: assertTrue(multiResult.getValues().get("MIX_K1").isSuccess(), "Era esperado verdadeiro, mas " + result211 + " <multiResult.getValues().get('MIX_K1').isSuccess()> é falso")
chamada antiga: assertEquals("V1", multiResult.getValues().get("MIX_K1").getValue())
nova chamada: assertEquals("V1", multiResult.getValues().get("MIX_K1").getValue(), "Era esperado valores iguais, mas  'V1' é diferente de " + result212 + " <multiResult.getValues().get('MIX_K1').getValue()>")
chamada antiga: assertTrue(multiResult.getValues().get("MIX_K1").getHolder().getValue() instanceof String)
nova chamada: assertTrue(multiResult.getValues().get("MIX_K1").getHolder().getValue() instanceof String, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(multiResult.getValues().get("MIX_K2").isSuccess())
nova chamada: assertTrue(multiResult.getValues().get("MIX_K2").isSuccess(), "Era esperado verdadeiro, mas " + result213 + " <multiResult.getValues().get('MIX_K2').isSuccess()> é falso")
chamada antiga: assertNull(multiResult.getValues().get("MIX_K2").getValue())
nova chamada: assertNull(multiResult.getValues().get("MIX_K2").getValue(), "Era esperado nulo, mas " + result214 + " <multiResult.getValues().get('MIX_K2').getValue()> não é nulo")
chamada antiga: assertNull(multiResult.getValues().get("MIX_K2").getHolder().getValue())
nova chamada: assertNull(multiResult.getValues().get("MIX_K2").getHolder().getValue(), "Era esperado nulo, mas " + result215 + " <multiResult.getValues().get('MIX_K2').getHolder().getValue()> não é nulo")
chamada antiga: assertNull(multiResult.getValues().get("MIX_K3").getValue())
nova chamada: assertNull(multiResult.getValues().get("MIX_K3").getValue(), "Era esperado nulo, mas " + result216 + " <multiResult.getValues().get('MIX_K3').getValue()> não é nulo")
chamada antiga: assertNull(multiResult.getValues().get("MIX_K3").getHolder())
nova chamada: assertNull(multiResult.getValues().get("MIX_K3").getHolder(), "Era esperado nulo, mas " + result217 + " <multiResult.getValues().get('MIX_K3').getHolder()> não é nulo")
chamada antiga: Assertions.assertEquals("V1", c1.get("K"))
nova chamada: assertEquals("V1", c1.get("K"), "Era esperado valores iguais, mas  'V1' é diferente de " + result218 + " <c1.get('K')>")
chamada antiga: assertEquals(CacheResultCode.FAIL, cr.getResultCode())
nova chamada: assertEquals(CacheResultCode.FAIL, cr.getResultCode(), "Era esperado valores iguais, mas  CacheResultCode.FAIL é diferente de " + result219 + " <cr.getResultCode()>")
chamada antiga: assertNull(cr.getValue())
nova chamada: assertNull(cr.getValue(), "Era esperado nulo, mas " + result220 + " <cr.getValue()> não é nulo")
chamada antiga: assertEquals(CacheResultCode.FAIL, cr.getResultCode())
nova chamada: assertEquals(CacheResultCode.FAIL, cr.getResultCode(), "Era esperado valores iguais, mas  CacheResultCode.FAIL é diferente de " + result221 + " <cr.getResultCode()>")
chamada antiga: assertNull(cr.getValue())
nova chamada: assertNull(cr.getValue(), "Era esperado nulo, mas " + result222 + " <cr.getValue()> não é nulo")
chamada antiga: assertEquals(CacheResultCode.FAIL, cr.getResultCode())
nova chamada: assertEquals(CacheResultCode.FAIL, cr.getResultCode(), "Era esperado valores iguais, mas  CacheResultCode.FAIL é diferente de " + result223 + " <cr.getResultCode()>")
chamada antiga: assertNull(cr.getValues())
nova chamada: assertNull(cr.getValues(), "Era esperado nulo, mas " + result224 + " <cr.getValues()> não é nulo")
chamada antiga: assertEquals(CacheResultCode.FAIL, cr.getResultCode())
nova chamada: assertEquals(CacheResultCode.FAIL, cr.getResultCode(), "Era esperado valores iguais, mas  CacheResultCode.FAIL é diferente de " + result225 + " <cr.getResultCode()>")
chamada antiga: assertNull(cr.getValues())
nova chamada: assertNull(cr.getValues(), "Era esperado nulo, mas " + result226 + " <cr.getValues()> não é nulo")
chamada antiga: assertEquals(CacheResultCode.FAIL, cr.getResultCode())
nova chamada: assertEquals(CacheResultCode.FAIL, cr.getResultCode(), "Era esperado valores iguais, mas  CacheResultCode.FAIL é diferente de " + result227 + " <cr.getResultCode()>")
chamada antiga: assertEquals(CacheResultCode.FAIL, cr.getResultCode())
nova chamada: assertEquals(CacheResultCode.FAIL, cr.getResultCode(), "Era esperado valores iguais, mas  CacheResultCode.FAIL é diferente de " + result228 + " <cr.getResultCode()>")
chamada antiga: assertEquals(CacheResultCode.FAIL, cr.getResultCode())
nova chamada: assertEquals(CacheResultCode.FAIL, cr.getResultCode(), "Era esperado valores iguais, mas  CacheResultCode.FAIL é diferente de " + result229 + " <cr.getResultCode()>")
chamada antiga: assertEquals("XXX", cr.getMessage())
nova chamada: assertEquals("XXX", cr.getMessage(), "Era esperado valores iguais, mas  'XXX' é diferente de " + result230 + " <cr.getMessage()>")
chamada antiga: assertEquals(CacheResultCode.FAIL, cr.getResultCode())
nova chamada: assertEquals(CacheResultCode.FAIL, cr.getResultCode(), "Era esperado valores iguais, mas  CacheResultCode.FAIL é diferente de " + result231 + " <cr.getResultCode()>")
chamada antiga: assertEquals(CacheResultCode.FAIL, cr.getResultCode())
nova chamada: assertEquals(CacheResultCode.FAIL, cr.getResultCode(), "Era esperado valores iguais, mas  CacheResultCode.FAIL é diferente de " + result232 + " <cr.getResultCode()>")
chamada antiga: assertEquals(CacheResultCode.FAIL, cr.getResultCode())
nova chamada: assertEquals(CacheResultCode.FAIL, cr.getResultCode(), "Era esperado valores iguais, mas  CacheResultCode.FAIL é diferente de " + result233 + " <cr.getResultCode()>")
chamada antiga: assertEquals(CacheResultCode.FAIL, cr.getResultCode())
nova chamada: assertEquals(CacheResultCode.FAIL, cr.getResultCode(), "Era esperado valores iguais, mas  CacheResultCode.FAIL é diferente de " + result234 + " <cr.getResultCode()>")
chamada antiga: assertEquals(CacheResultCode.FAIL, cr.getResultCode())
nova chamada: assertEquals(CacheResultCode.FAIL, cr.getResultCode(), "Era esperado valores iguais, mas  CacheResultCode.FAIL é diferente de " + result235 + " <cr.getResultCode()>")
chamada antiga: assertEquals(CacheResultCode.FAIL, cr.getResultCode())
nova chamada: assertEquals(CacheResultCode.FAIL, cr.getResultCode(), "Era esperado valores iguais, mas  CacheResultCode.FAIL é diferente de " + result236 + " <cr.getResultCode()>")
chamada antiga: assertEquals(CacheResultCode.FAIL, cr.getResultCode())
nova chamada: assertEquals(CacheResultCode.FAIL, cr.getResultCode(), "Era esperado valores iguais, mas  CacheResultCode.FAIL é diferente de " + result237 + " <cr.getResultCode()>")
chamada antiga: assertEquals(CacheResultCode.FAIL, cr.getResultCode())
nova chamada: assertEquals(CacheResultCode.FAIL, cr.getResultCode(), "Era esperado valores iguais, mas  CacheResultCode.FAIL é diferente de " + result238 + " <cr.getResultCode()>")
chamada antiga: assertEquals(CacheResultCode.FAIL, cr.getResultCode())
nova chamada: assertEquals(CacheResultCode.FAIL, cr.getResultCode(), "Era esperado valores iguais, mas  CacheResultCode.FAIL é diferente de " + result239 + " <cr.getResultCode()>")
chamada antiga: assertEquals(CacheResultCode.FAIL, cr.getResultCode())
nova chamada: assertEquals(CacheResultCode.FAIL, cr.getResultCode(), "Era esperado valores iguais, mas  CacheResultCode.FAIL é diferente de " + result240 + " <cr.getResultCode()>")
chamada antiga: assertEquals("XXX", cr.getMessage())
nova chamada: assertEquals("XXX", cr.getMessage(), "Era esperado valores iguais, mas  'XXX' é diferente de " + result241 + " <cr.getMessage()>")
chamada antiga: Assert.assertEquals("V1", cache.get("K1"))
nova chamada: assertEquals("V1", cache.get("K1"), "Era esperado valores iguais, mas  'V1' é diferente de " + result242 + " <cache.get('K1')>")
chamada antiga: Assert.assertEquals("V1", cache.get("K1"))
nova chamada: assertEquals("V1", cache.get("K1"), "Era esperado valores iguais, mas  'V1' é diferente de " + result243 + " <cache.get('K1')>")
chamada antiga: assertEquals(CacheResultCode.FAIL, cr.getResultCode())
nova chamada: assertEquals(CacheResultCode.FAIL, cr.getResultCode(), "Era esperado valores iguais, mas  CacheResultCode.FAIL é diferente de " + result244 + " <cr.getResultCode()>")
chamada antiga: assertNull(cr.getValue())
nova chamada: assertNull(cr.getValue(), "Era esperado nulo, mas " + result245 + " <cr.getValue()> não é nulo")
chamada antiga: assertEquals(CacheResultCode.FAIL, cr.getResultCode())
nova chamada: assertEquals(CacheResultCode.FAIL, cr.getResultCode(), "Era esperado valores iguais, mas  CacheResultCode.FAIL é diferente de " + result246 + " <cr.getResultCode()>")
chamada antiga: assertNull(cr.getValues())
nova chamada: assertNull(cr.getValues(), "Era esperado nulo, mas " + result247 + " <cr.getValues()> não é nulo")
chamada antiga: assertEquals(CacheResultCode.FAIL, cr.getResultCode())
nova chamada: assertEquals(CacheResultCode.FAIL, cr.getResultCode(), "Era esperado valores iguais, mas  CacheResultCode.FAIL é diferente de " + result248 + " <cr.getResultCode()>")
chamada antiga: assertEquals(CacheResultCode.FAIL, cr.getResultCode())
nova chamada: assertEquals(CacheResultCode.FAIL, cr.getResultCode(), "Era esperado valores iguais, mas  CacheResultCode.FAIL é diferente de " + result249 + " <cr.getResultCode()>")
chamada antiga: assertEquals("XXX", cr.getMessage())
nova chamada: assertEquals("XXX", cr.getMessage(), "Era esperado valores iguais, mas  'XXX' é diferente de " + result250 + " <cr.getMessage()>")
chamada antiga: assertEquals(CacheResultCode.FAIL, cr.getResultCode())
nova chamada: assertEquals(CacheResultCode.FAIL, cr.getResultCode(), "Era esperado valores iguais, mas  CacheResultCode.FAIL é diferente de " + result251 + " <cr.getResultCode()>")
chamada antiga: assertEquals(CacheResultCode.FAIL, cr.getResultCode())
nova chamada: assertEquals(CacheResultCode.FAIL, cr.getResultCode(), "Era esperado valores iguais, mas  CacheResultCode.FAIL é diferente de " + result252 + " <cr.getResultCode()>")
chamada antiga: assertEquals(CacheResultCode.FAIL, cr.getResultCode())
nova chamada: assertEquals(CacheResultCode.FAIL, cr.getResultCode(), "Era esperado valores iguais, mas  CacheResultCode.FAIL é diferente de " + result253 + " <cr.getResultCode()>")
chamada antiga: assertEquals(CacheResultCode.FAIL, cr.getResultCode())
nova chamada: assertEquals(CacheResultCode.FAIL, cr.getResultCode(), "Era esperado valores iguais, mas  CacheResultCode.FAIL é diferente de " + result254 + " <cr.getResultCode()>")
chamada antiga: assertEquals(CacheResultCode.FAIL, cr.getResultCode())
nova chamada: assertEquals(CacheResultCode.FAIL, cr.getResultCode(), "Era esperado valores iguais, mas  CacheResultCode.FAIL é diferente de " + result255 + " <cr.getResultCode()>")
chamada antiga: assertEquals("XXX", cr.getMessage())
nova chamada: assertEquals("XXX", cr.getMessage(), "Era esperado valores iguais, mas  'XXX' é diferente de " + result256 + " <cr.getMessage()>")
chamada antiga: Assertions.assertTrue(result.isSuccess())
nova chamada: assertTrue(result.isSuccess(), "Era esperado verdadeiro, mas " + result257 + " <result.isSuccess()> é falso")
chamada antiga: Assert.assertArrayEquals(bs, (byte[]) codec.decodeKey(codec.encodeKey(bs)))
nova chamada: assertArrayEquals(bs, (byte[]) codec.decodeKey(codec.encodeKey(bs)), "Era esperado arrays iguais, mas  bs é diferente de " + " (byte[]) codec.decodeKey(codec.encodeKey(bs))")
chamada antiga: Assert.assertArrayEquals(bs, (byte[]) codec.decodeValue(codec.encodeValue(bs)))
nova chamada: assertArrayEquals(bs, (byte[]) codec.decodeValue(codec.encodeValue(bs)), "Era esperado arrays iguais, mas  bs é diferente de " + " (byte[]) codec.decodeValue(codec.encodeValue(bs))")
chamada antiga: Assert.assertTrue(cache.unwrap(AbstractRedisClient.class) instanceof AbstractRedisClient)
nova chamada: assertTrue(cache.unwrap(AbstractRedisClient.class) instanceof AbstractRedisClient, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assert.assertEquals("V1", cache.get("readFromSlaveTest_K1"))
nova chamada: assertEquals("V1", cache.get("readFromSlaveTest_K1"), "Era esperado valores iguais, mas  'V1' é diferente de " + result258 + " <cache.get('readFromSlaveTest_K1')>")
chamada antiga: Assert.assertEquals("V1", cache.get("readFromSlaveTest_K1"))
nova chamada: assertEquals("V1", cache.get("readFromSlaveTest_K1"), "Era esperado valores iguais, mas  'V1' é diferente de " + result259 + " <cache.get('readFromSlaveTest_K1')>")
chamada antiga: Assert.assertEquals("V1", cache.get("readFromSlaveTest_K1"))
nova chamada: assertEquals("V1", cache.get("readFromSlaveTest_K1"), "Era esperado valores iguais, mas  'V1' é diferente de " + result260 + " <cache.get('readFromSlaveTest_K1')>")
chamada antiga: Assert.assertEquals("V1", cache.get("readFromSlaveTest_K1"))
nova chamada: assertEquals("V1", cache.get("readFromSlaveTest_K1"), "Era esperado valores iguais, mas  'V1' é diferente de " + result261 + " <cache.get('readFromSlaveTest_K1')>")
chamada antiga: Assert.assertEquals(CacheResultCode.NOT_EXISTS, cache.GET("vetoTest").getResultCode())
nova chamada: assertEquals(CacheResultCode.NOT_EXISTS, cache.GET("vetoTest").getResultCode(), "Era esperado valores iguais, mas  CacheResultCode.NOT_EXISTS é diferente de " + result262 + " <cache.GET('vetoTest').getResultCode()>")
chamada antiga: Assert.assertEquals(CacheResultCode.NOT_EXISTS, cache.GET("vetoTest").getResultCode())
nova chamada: assertEquals(CacheResultCode.NOT_EXISTS, cache.GET("vetoTest").getResultCode(), "Era esperado valores iguais, mas  CacheResultCode.NOT_EXISTS é diferente de " + result263 + " <cache.GET('vetoTest').getResultCode()>")
chamada antiga: Assert.assertNull(cache.get("nullValueTest_K1"))
nova chamada: assertNull(cache.get("nullValueTest_K1"), "Era esperado nulo, mas " + result264 + " <cache.get('nullValueTest_K1')> não é nulo")
chamada antiga: Assert.assertEquals(1, monitor.getCacheStat().getGetCount())
nova chamada: assertEquals(1, monitor.getCacheStat().getGetCount(), "Era esperado valores iguais, mas  1 é diferente de " + result265 + " <monitor.getCacheStat().getGetCount()>")
chamada antiga: Assert.assertEquals(0, monitor.getCacheStat().getGetHitCount())
nova chamada: assertEquals(0, monitor.getCacheStat().getGetHitCount(), "Era esperado valores iguais, mas  0 é diferente de " + result266 + " <monitor.getCacheStat().getGetHitCount()>")
chamada antiga: Assert.assertEquals(1, monitor.getCacheStat().getGetMissCount())
nova chamada: assertEquals(1, monitor.getCacheStat().getGetMissCount(), "Era esperado valores iguais, mas  1 é diferente de " + result267 + " <monitor.getCacheStat().getGetMissCount()>")
chamada antiga: Assert.assertEquals(1, monitor.getCacheStat().getLoadCount())
nova chamada: assertEquals(1, monitor.getCacheStat().getLoadCount(), "Era esperado valores iguais, mas  1 é diferente de " + result268 + " <monitor.getCacheStat().getLoadCount()>")
chamada antiga: Assert.assertEquals(0, monitor.getCacheStat().getPutCount())
nova chamada: assertEquals(0, monitor.getCacheStat().getPutCount(), "Era esperado valores iguais, mas  0 é diferente de " + result269 + " <monitor.getCacheStat().getPutCount()>")
chamada antiga: Assert.assertNull(cache.get("nullValueTest_K1"))
nova chamada: assertNull(cache.get("nullValueTest_K1"), "Era esperado nulo, mas " + result270 + " <cache.get('nullValueTest_K1')> não é nulo")
chamada antiga: Assert.assertEquals(2, monitor.getCacheStat().getGetCount())
nova chamada: assertEquals(2, monitor.getCacheStat().getGetCount(), "Era esperado valores iguais, mas  2 é diferente de " + result271 + " <monitor.getCacheStat().getGetCount()>")
chamada antiga: Assert.assertEquals(0, monitor.getCacheStat().getGetHitCount())
nova chamada: assertEquals(0, monitor.getCacheStat().getGetHitCount(), "Era esperado valores iguais, mas  0 é diferente de " + result272 + " <monitor.getCacheStat().getGetHitCount()>")
chamada antiga: Assert.assertEquals(2, monitor.getCacheStat().getGetMissCount())
nova chamada: assertEquals(2, monitor.getCacheStat().getGetMissCount(), "Era esperado valores iguais, mas  2 é diferente de " + result273 + " <monitor.getCacheStat().getGetMissCount()>")
chamada antiga: Assert.assertEquals(2, monitor.getCacheStat().getLoadCount())
nova chamada: assertEquals(2, monitor.getCacheStat().getLoadCount(), "Era esperado valores iguais, mas  2 é diferente de " + result274 + " <monitor.getCacheStat().getLoadCount()>")
chamada antiga: Assert.assertEquals(1, monitor.getCacheStat().getPutCount())
nova chamada: assertEquals(1, monitor.getCacheStat().getPutCount(), "Era esperado valores iguais, mas  1 é diferente de " + result275 + " <monitor.getCacheStat().getPutCount()>")
chamada antiga: Assert.assertNull(cache.get("nullValueTest_K1"))
nova chamada: assertNull(cache.get("nullValueTest_K1"), "Era esperado nulo, mas " + result276 + " <cache.get('nullValueTest_K1')> não é nulo")
chamada antiga: Assert.assertEquals(3, monitor.getCacheStat().getGetCount())
nova chamada: assertEquals(3, monitor.getCacheStat().getGetCount(), "Era esperado valores iguais, mas  3 é diferente de " + result277 + " <monitor.getCacheStat().getGetCount()>")
chamada antiga: Assert.assertEquals(1, monitor.getCacheStat().getGetHitCount())
nova chamada: assertEquals(1, monitor.getCacheStat().getGetHitCount(), "Era esperado valores iguais, mas  1 é diferente de " + result278 + " <monitor.getCacheStat().getGetHitCount()>")
chamada antiga: Assert.assertEquals(2, monitor.getCacheStat().getGetMissCount())
nova chamada: assertEquals(2, monitor.getCacheStat().getGetMissCount(), "Era esperado valores iguais, mas  2 é diferente de " + result279 + " <monitor.getCacheStat().getGetMissCount()>")
chamada antiga: Assert.assertEquals(2, monitor.getCacheStat().getLoadCount())
nova chamada: assertEquals(2, monitor.getCacheStat().getLoadCount(), "Era esperado valores iguais, mas  2 é diferente de " + result280 + " <monitor.getCacheStat().getLoadCount()>")
chamada antiga: Assert.assertEquals(1, monitor.getCacheStat().getPutCount())
nova chamada: assertEquals(1, monitor.getCacheStat().getPutCount(), "Era esperado valores iguais, mas  1 é diferente de " + result281 + " <monitor.getCacheStat().getPutCount()>")
chamada antiga: Assert.assertEquals("LoadingCache_Key1_V0", cache.get("LoadingCache_Key1"))
nova chamada: assertEquals("LoadingCache_Key1_V0", cache.get("LoadingCache_Key1"), "Era esperado valores iguais, mas  'LoadingCache_Key1_V0' é diferente de " + result282 + " <cache.get('LoadingCache_Key1')>")
chamada antiga: Assert.assertEquals(1, monitor.getCacheStat().getGetCount())
nova chamada: assertEquals(1, monitor.getCacheStat().getGetCount(), "Era esperado valores iguais, mas  1 é diferente de " + result283 + " <monitor.getCacheStat().getGetCount()>")
chamada antiga: Assert.assertEquals(0, monitor.getCacheStat().getGetHitCount())
nova chamada: assertEquals(0, monitor.getCacheStat().getGetHitCount(), "Era esperado valores iguais, mas  0 é diferente de " + result284 + " <monitor.getCacheStat().getGetHitCount()>")
chamada antiga: Assert.assertEquals(1, monitor.getCacheStat().getGetMissCount())
nova chamada: assertEquals(1, monitor.getCacheStat().getGetMissCount(), "Era esperado valores iguais, mas  1 é diferente de " + result285 + " <monitor.getCacheStat().getGetMissCount()>")
chamada antiga: Assert.assertEquals(1, monitor.getCacheStat().getLoadCount())
nova chamada: assertEquals(1, monitor.getCacheStat().getLoadCount(), "Era esperado valores iguais, mas  1 é diferente de " + result286 + " <monitor.getCacheStat().getLoadCount()>")
chamada antiga: Assert.assertEquals(1, monitor.getCacheStat().getPutCount())
nova chamada: assertEquals(1, monitor.getCacheStat().getPutCount(), "Era esperado valores iguais, mas  1 é diferente de " + result287 + " <monitor.getCacheStat().getPutCount()>")
chamada antiga: Assert.assertEquals("LoadingCache_Key1_V0", cache.get("LoadingCache_Key1"))
nova chamada: assertEquals("LoadingCache_Key1_V0", cache.get("LoadingCache_Key1"), "Era esperado valores iguais, mas  'LoadingCache_Key1_V0' é diferente de " + result288 + " <cache.get('LoadingCache_Key1')>")
chamada antiga: Assert.assertEquals(2, monitor.getCacheStat().getGetCount())
nova chamada: assertEquals(2, monitor.getCacheStat().getGetCount(), "Era esperado valores iguais, mas  2 é diferente de " + result289 + " <monitor.getCacheStat().getGetCount()>")
chamada antiga: Assert.assertEquals(1, monitor.getCacheStat().getGetHitCount())
nova chamada: assertEquals(1, monitor.getCacheStat().getGetHitCount(), "Era esperado valores iguais, mas  1 é diferente de " + result290 + " <monitor.getCacheStat().getGetHitCount()>")
chamada antiga: Assert.assertEquals(1, monitor.getCacheStat().getGetMissCount())
nova chamada: assertEquals(1, monitor.getCacheStat().getGetMissCount(), "Era esperado valores iguais, mas  1 é diferente de " + result291 + " <monitor.getCacheStat().getGetMissCount()>")
chamada antiga: Assert.assertEquals(1, monitor.getCacheStat().getLoadCount())
nova chamada: assertEquals(1, monitor.getCacheStat().getLoadCount(), "Era esperado valores iguais, mas  1 é diferente de " + result292 + " <monitor.getCacheStat().getLoadCount()>")
chamada antiga: Assert.assertEquals(1, monitor.getCacheStat().getPutCount())
nova chamada: assertEquals(1, monitor.getCacheStat().getPutCount(), "Era esperado valores iguais, mas  1 é diferente de " + result293 + " <monitor.getCacheStat().getPutCount()>")
chamada antiga: Assert.assertEquals("LoadingCache_Key1_V0", map.get("LoadingCache_Key1"))
nova chamada: assertEquals("LoadingCache_Key1_V0", map.get("LoadingCache_Key1"), "Era esperado valores iguais, mas  'LoadingCache_Key1_V0' é diferente de " + result294 + " <map.get('LoadingCache_Key1')>")
chamada antiga: Assert.assertEquals("LoadingCache_Key2_V1", map.get("LoadingCache_Key2"))
nova chamada: assertEquals("LoadingCache_Key2_V1", map.get("LoadingCache_Key2"), "Era esperado valores iguais, mas  'LoadingCache_Key2_V1' é diferente de " + result295 + " <map.get('LoadingCache_Key2')>")
chamada antiga: Assert.assertEquals("LoadingCache_Key3_V2", map.get("LoadingCache_Key3"))
nova chamada: assertEquals("LoadingCache_Key3_V2", map.get("LoadingCache_Key3"), "Era esperado valores iguais, mas  'LoadingCache_Key3_V2' é diferente de " + result296 + " <map.get('LoadingCache_Key3')>")
chamada antiga: Assert.assertEquals(5, monitor.getCacheStat().getGetCount())
nova chamada: assertEquals(5, monitor.getCacheStat().getGetCount(), "Era esperado valores iguais, mas  5 é diferente de " + result297 + " <monitor.getCacheStat().getGetCount()>")
chamada antiga: Assert.assertEquals(2, monitor.getCacheStat().getGetHitCount())
nova chamada: assertEquals(2, monitor.getCacheStat().getGetHitCount(), "Era esperado valores iguais, mas  2 é diferente de " + result298 + " <monitor.getCacheStat().getGetHitCount()>")
chamada antiga: Assert.assertEquals(3, monitor.getCacheStat().getGetMissCount())
nova chamada: assertEquals(3, monitor.getCacheStat().getGetMissCount(), "Era esperado valores iguais, mas  3 é diferente de " + result299 + " <monitor.getCacheStat().getGetMissCount()>")
chamada antiga: Assert.assertEquals(3, monitor.getCacheStat().getLoadCount())
nova chamada: assertEquals(3, monitor.getCacheStat().getLoadCount(), "Era esperado valores iguais, mas  3 é diferente de " + result300 + " <monitor.getCacheStat().getLoadCount()>")
chamada antiga: Assert.assertEquals(3, monitor.getCacheStat().getPutCount())
nova chamada: assertEquals(3, monitor.getCacheStat().getPutCount(), "Era esperado valores iguais, mas  3 é diferente de " + result301 + " <monitor.getCacheStat().getPutCount()>")
chamada antiga: Assert.assertTrue(cache.unwrap(LinkedHashMap.class) instanceof LinkedHashMap)
nova chamada: assertTrue(cache.unwrap(LinkedHashMap.class) instanceof LinkedHashMap, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assert.assertTrue(cache.unwrap(com.github.benmanes.caffeine.cache.Cache.class) instanceof com.github.benmanes.caffeine.cache.Cache)
nova chamada: assertTrue(cache.unwrap(com.github.benmanes.caffeine.cache.Cache.class) instanceof com.github.benmanes.caffeine.cache.Cache, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assert.assertEquals("V1", cache.get("KK1"))
nova chamada: assertEquals("V1", cache.get("KK1"), "Era esperado valores iguais, mas  'V1' é diferente de " + result302 + " <cache.get('KK1')>")
chamada antiga: Assert.assertNull(l1Cache.get("useSubExpire_key"))
nova chamada: assertNull(l1Cache.get("useSubExpire_key"), "Era esperado nulo, mas " + result303 + " <l1Cache.get('useSubExpire_key')> não é nulo")
chamada antiga: Assert.assertEquals("V1", cache.get("useSubExpire_key"))
nova chamada: assertEquals("V1", cache.get("useSubExpire_key"), "Era esperado valores iguais, mas  'V1' é diferente de " + result304 + " <cache.get('useSubExpire_key')>")
chamada antiga: Assert.assertNull(l1Cache.get("useSubExpire_key"))
nova chamada: assertNull(l1Cache.get("useSubExpire_key"), "Era esperado nulo, mas " + result305 + " <l1Cache.get('useSubExpire_key')> não é nulo")
chamada antiga: Assert.assertNull(l1Cache.get("useSubExpire_key"))
nova chamada: assertNull(l1Cache.get("useSubExpire_key"), "Era esperado nulo, mas " + result306 + " <l1Cache.get('useSubExpire_key')> não é nulo")
chamada antiga: Assert.assertEquals("V2", cache.getAll(s).get("useSubExpire_key"))
nova chamada: assertEquals("V2", cache.getAll(s).get("useSubExpire_key"), "Era esperado valores iguais, mas  'V2' é diferente de " + result307 + " <cache.getAll(s).get('useSubExpire_key')>")
chamada antiga: Assert.assertNull(l1Cache.get("useSubExpire_key"))
nova chamada: assertNull(l1Cache.get("useSubExpire_key"), "Era esperado nulo, mas " + result308 + " <l1Cache.get('useSubExpire_key')> não é nulo")
chamada antiga: Assert.assertEquals(oldStat.getGetCount() + 1, m.getCacheStat().getGetCount())
nova chamada: assertEquals(oldStat.getGetCount() + 1, m.getCacheStat().getGetCount(), "Era esperado valores iguais, mas  oldStat.getGetCount() + 1 é diferente de " + result309 + " <m.getCacheStat().getGetCount()>")
chamada antiga: Assert.assertEquals(oldStat.getGetMissCount() + 1, m.getCacheStat().getGetMissCount())
nova chamada: assertEquals(oldStat.getGetMissCount() + 1, m.getCacheStat().getGetMissCount(), "Era esperado valores iguais, mas  oldStat.getGetMissCount() + 1 é diferente de " + result310 + " <m.getCacheStat().getGetMissCount()>")
chamada antiga: Assert.assertEquals(oldStat.getPutCount() + 1, m.getCacheStat().getPutCount())
nova chamada: assertEquals(oldStat.getPutCount() + 1, m.getCacheStat().getPutCount(), "Era esperado valores iguais, mas  oldStat.getPutCount() + 1 é diferente de " + result311 + " <m.getCacheStat().getPutCount()>")
chamada antiga: Assert.assertEquals(oldStat.getGetCount() + 1, m.getCacheStat().getGetCount())
nova chamada: assertEquals(oldStat.getGetCount() + 1, m.getCacheStat().getGetCount(), "Era esperado valores iguais, mas  oldStat.getGetCount() + 1 é diferente de " + result312 + " <m.getCacheStat().getGetCount()>")
chamada antiga: Assert.assertEquals(oldStat.getGetHitCount() + 1, m.getCacheStat().getGetHitCount())
nova chamada: assertEquals(oldStat.getGetHitCount() + 1, m.getCacheStat().getGetHitCount(), "Era esperado valores iguais, mas  oldStat.getGetHitCount() + 1 é diferente de " + result313 + " <m.getCacheStat().getGetHitCount()>")
chamada antiga: Assert.assertEquals(oldStat.getRemoveCount() + 1, m.getCacheStat().getRemoveCount())
nova chamada: assertEquals(oldStat.getRemoveCount() + 1, m.getCacheStat().getRemoveCount(), "Era esperado valores iguais, mas  oldStat.getRemoveCount() + 1 é diferente de " + result314 + " <m.getCacheStat().getRemoveCount()>")
chamada antiga: Assert.assertEquals(oldStat.getGetCount() + 1, m.getCacheStat().getGetCount())
nova chamada: assertEquals(oldStat.getGetCount() + 1, m.getCacheStat().getGetCount(), "Era esperado valores iguais, mas  oldStat.getGetCount() + 1 é diferente de " + result315 + " <m.getCacheStat().getGetCount()>")
chamada antiga: Assert.assertEquals(oldStat.getGetMissCount() + 1, m.getCacheStat().getGetMissCount())
nova chamada: assertEquals(oldStat.getGetMissCount() + 1, m.getCacheStat().getGetMissCount(), "Era esperado valores iguais, mas  oldStat.getGetMissCount() + 1 é diferente de " + result316 + " <m.getCacheStat().getGetMissCount()>")
chamada antiga: Assert.assertEquals(oldStat.getPutCount(), m.getCacheStat().getPutCount())
nova chamada: assertEquals(oldStat.getPutCount(), m.getCacheStat().getPutCount(), "Era esperado valores iguais, mas " + result317 + " <oldStat.getPutCount()> é diferente de " + result318 + " <m.getCacheStat().getPutCount()>")
chamada antiga: Assert.assertEquals(oldStat.getLoadCount() + 1, m.getCacheStat().getLoadCount())
nova chamada: assertEquals(oldStat.getLoadCount() + 1, m.getCacheStat().getLoadCount(), "Era esperado valores iguais, mas  oldStat.getLoadCount() + 1 é diferente de " + result319 + " <m.getCacheStat().getLoadCount()>")
chamada antiga: Assert.assertEquals(oldStat.getLoadSuccessCount() + 1, m.getCacheStat().getLoadSuccessCount())
nova chamada: assertEquals(oldStat.getLoadSuccessCount() + 1, m.getCacheStat().getLoadSuccessCount(), "Era esperado valores iguais, mas  oldStat.getLoadSuccessCount() + 1 é diferente de " + result320 + " <m.getCacheStat().getLoadSuccessCount()>")
chamada antiga: Assert.assertEquals(oldStat.getGetCount() + 1, m.getCacheStat().getGetCount())
nova chamada: assertEquals(oldStat.getGetCount() + 1, m.getCacheStat().getGetCount(), "Era esperado valores iguais, mas  oldStat.getGetCount() + 1 é diferente de " + result321 + " <m.getCacheStat().getGetCount()>")
chamada antiga: Assert.assertEquals(oldStat.getGetMissCount() + 1, m.getCacheStat().getGetMissCount())
nova chamada: assertEquals(oldStat.getGetMissCount() + 1, m.getCacheStat().getGetMissCount(), "Era esperado valores iguais, mas  oldStat.getGetMissCount() + 1 é diferente de " + result322 + " <m.getCacheStat().getGetMissCount()>")
chamada antiga: Assert.assertEquals(oldStat.getPutCount() + 1, m.getCacheStat().getPutCount())
nova chamada: assertEquals(oldStat.getPutCount() + 1, m.getCacheStat().getPutCount(), "Era esperado valores iguais, mas  oldStat.getPutCount() + 1 é diferente de " + result323 + " <m.getCacheStat().getPutCount()>")
chamada antiga: Assert.assertEquals(oldStat.getLoadCount() + 1, m.getCacheStat().getLoadCount())
nova chamada: assertEquals(oldStat.getLoadCount() + 1, m.getCacheStat().getLoadCount(), "Era esperado valores iguais, mas  oldStat.getLoadCount() + 1 é diferente de " + result324 + " <m.getCacheStat().getLoadCount()>")
chamada antiga: Assert.assertEquals(oldStat.getLoadSuccessCount() + 1, m.getCacheStat().getLoadSuccessCount())
nova chamada: assertEquals(oldStat.getLoadSuccessCount() + 1, m.getCacheStat().getLoadSuccessCount(), "Era esperado valores iguais, mas  oldStat.getLoadSuccessCount() + 1 é diferente de " + result325 + " <m.getCacheStat().getLoadSuccessCount()>")
chamada antiga: Assert.assertEquals(oldStat.getGetCount() + 1, m.getCacheStat().getGetCount())
nova chamada: assertEquals(oldStat.getGetCount() + 1, m.getCacheStat().getGetCount(), "Era esperado valores iguais, mas  oldStat.getGetCount() + 1 é diferente de " + result326 + " <m.getCacheStat().getGetCount()>")
chamada antiga: Assert.assertEquals(oldStat.getGetHitCount() + 1, m.getCacheStat().getGetHitCount())
nova chamada: assertEquals(oldStat.getGetHitCount() + 1, m.getCacheStat().getGetHitCount(), "Era esperado valores iguais, mas  oldStat.getGetHitCount() + 1 é diferente de " + result327 + " <m.getCacheStat().getGetHitCount()>")
chamada antiga: Assert.assertEquals(oldStat.getRemoveCount() + 1, m.getCacheStat().getRemoveCount())
nova chamada: assertEquals(oldStat.getRemoveCount() + 1, m.getCacheStat().getRemoveCount(), "Era esperado valores iguais, mas  oldStat.getRemoveCount() + 1 é diferente de " + result328 + " <m.getCacheStat().getRemoveCount()>")
chamada antiga: Assert.assertEquals(oldStat.getGetCount() + 1, m.getCacheStat().getGetCount())
nova chamada: assertEquals(oldStat.getGetCount() + 1, m.getCacheStat().getGetCount(), "Era esperado valores iguais, mas  oldStat.getGetCount() + 1 é diferente de " + result329 + " <m.getCacheStat().getGetCount()>")
chamada antiga: Assert.assertEquals(oldStat.getGetMissCount() + 1, m.getCacheStat().getGetMissCount())
nova chamada: assertEquals(oldStat.getGetMissCount() + 1, m.getCacheStat().getGetMissCount(), "Era esperado valores iguais, mas  oldStat.getGetMissCount() + 1 é diferente de " + result330 + " <m.getCacheStat().getGetMissCount()>")
chamada antiga: Assert.assertEquals(oldStat.getPutCount(), m.getCacheStat().getPutCount())
nova chamada: assertEquals(oldStat.getPutCount(), m.getCacheStat().getPutCount(), "Era esperado valores iguais, mas " + result331 + " <oldStat.getPutCount()> é diferente de " + result332 + " <m.getCacheStat().getPutCount()>")
chamada antiga: Assert.assertEquals(oldStat.getLoadCount() + 1, m.getCacheStat().getLoadCount())
nova chamada: assertEquals(oldStat.getLoadCount() + 1, m.getCacheStat().getLoadCount(), "Era esperado valores iguais, mas  oldStat.getLoadCount() + 1 é diferente de " + result333 + " <m.getCacheStat().getLoadCount()>")
chamada antiga: Assert.assertEquals(oldStat.getLoadSuccessCount() + 1, m.getCacheStat().getLoadSuccessCount())
nova chamada: assertEquals(oldStat.getLoadSuccessCount() + 1, m.getCacheStat().getLoadSuccessCount(), "Era esperado valores iguais, mas  oldStat.getLoadSuccessCount() + 1 é diferente de " + result334 + " <m.getCacheStat().getLoadSuccessCount()>")
chamada antiga: Assert.assertEquals(oldStat.getGetCount() + 1, m.getCacheStat().getGetCount())
nova chamada: assertEquals(oldStat.getGetCount() + 1, m.getCacheStat().getGetCount(), "Era esperado valores iguais, mas  oldStat.getGetCount() + 1 é diferente de " + result335 + " <m.getCacheStat().getGetCount()>")
chamada antiga: Assert.assertEquals(oldStat.getGetMissCount() + 1, m.getCacheStat().getGetMissCount())
nova chamada: assertEquals(oldStat.getGetMissCount() + 1, m.getCacheStat().getGetMissCount(), "Era esperado valores iguais, mas  oldStat.getGetMissCount() + 1 é diferente de " + result336 + " <m.getCacheStat().getGetMissCount()>")
chamada antiga: Assert.assertEquals(oldStat.getPutCount() + 1, m.getCacheStat().getPutCount())
nova chamada: assertEquals(oldStat.getPutCount() + 1, m.getCacheStat().getPutCount(), "Era esperado valores iguais, mas  oldStat.getPutCount() + 1 é diferente de " + result337 + " <m.getCacheStat().getPutCount()>")
chamada antiga: Assert.assertEquals(oldStat.getLoadCount() + 1, m.getCacheStat().getLoadCount())
nova chamada: assertEquals(oldStat.getLoadCount() + 1, m.getCacheStat().getLoadCount(), "Era esperado valores iguais, mas  oldStat.getLoadCount() + 1 é diferente de " + result338 + " <m.getCacheStat().getLoadCount()>")
chamada antiga: Assert.assertEquals(oldStat.getLoadSuccessCount() + 1, m.getCacheStat().getLoadSuccessCount())
nova chamada: assertEquals(oldStat.getLoadSuccessCount() + 1, m.getCacheStat().getLoadSuccessCount(), "Era esperado valores iguais, mas  oldStat.getLoadSuccessCount() + 1 é diferente de " + result339 + " <m.getCacheStat().getLoadSuccessCount()>")
chamada antiga: Assert.assertEquals(oldStat.getGetCount() + 1, m.getCacheStat().getGetCount())
nova chamada: assertEquals(oldStat.getGetCount() + 1, m.getCacheStat().getGetCount(), "Era esperado valores iguais, mas  oldStat.getGetCount() + 1 é diferente de " + result340 + " <m.getCacheStat().getGetCount()>")
chamada antiga: Assert.assertEquals(oldStat.getGetHitCount() + 1, m.getCacheStat().getGetHitCount())
nova chamada: assertEquals(oldStat.getGetHitCount() + 1, m.getCacheStat().getGetHitCount(), "Era esperado valores iguais, mas  oldStat.getGetHitCount() + 1 é diferente de " + result341 + " <m.getCacheStat().getGetHitCount()>")
chamada antiga: Assert.assertEquals(oldStat.getRemoveCount() + 1, m.getCacheStat().getRemoveCount())
nova chamada: assertEquals(oldStat.getRemoveCount() + 1, m.getCacheStat().getRemoveCount(), "Era esperado valores iguais, mas  oldStat.getRemoveCount() + 1 é diferente de " + result342 + " <m.getCacheStat().getRemoveCount()>")
chamada antiga: Assert.assertEquals(oldStat.getPutCount() + 2, m.getCacheStat().getPutCount())
nova chamada: assertEquals(oldStat.getPutCount() + 2, m.getCacheStat().getPutCount(), "Era esperado valores iguais, mas  oldStat.getPutCount() + 2 é diferente de " + result343 + " <m.getCacheStat().getPutCount()>")
chamada antiga: Assert.assertEquals(oldStat.getGetCount() + 3, m.getCacheStat().getGetCount())
nova chamada: assertEquals(oldStat.getGetCount() + 3, m.getCacheStat().getGetCount(), "Era esperado valores iguais, mas  oldStat.getGetCount() + 3 é diferente de " + result344 + " <m.getCacheStat().getGetCount()>")
chamada antiga: Assert.assertEquals(oldStat.getGetHitCount() + 2, m.getCacheStat().getGetHitCount())
nova chamada: assertEquals(oldStat.getGetHitCount() + 2, m.getCacheStat().getGetHitCount(), "Era esperado valores iguais, mas  oldStat.getGetHitCount() + 2 é diferente de " + result345 + " <m.getCacheStat().getGetHitCount()>")
chamada antiga: Assert.assertEquals(oldStat.getGetMissCount() + 1, m.getCacheStat().getGetMissCount())
nova chamada: assertEquals(oldStat.getGetMissCount() + 1, m.getCacheStat().getGetMissCount(), "Era esperado valores iguais, mas  oldStat.getGetMissCount() + 1 é diferente de " + result346 + " <m.getCacheStat().getGetMissCount()>")
chamada antiga: Assert.assertEquals(oldStat.getRemoveCount() + 3, m.getCacheStat().getRemoveCount())
nova chamada: assertEquals(oldStat.getRemoveCount() + 3, m.getCacheStat().getRemoveCount(), "Era esperado valores iguais, mas  oldStat.getRemoveCount() + 3 é diferente de " + result347 + " <m.getCacheStat().getRemoveCount()>")
chamada antiga: Assert.assertEquals(oldStat.getRemoveCount() + 3, m.getCacheStat().getRemoveSuccessCount())
nova chamada: assertEquals(oldStat.getRemoveCount() + 3, m.getCacheStat().getRemoveSuccessCount(), "Era esperado valores iguais, mas  oldStat.getRemoveCount() + 3 é diferente de " + result348 + " <m.getCacheStat().getRemoveSuccessCount()>")
chamada antiga: Assert.assertEquals(k1, k2)
nova chamada: assertEquals(k1, k2, "Era esperado valores iguais, mas  k1 é diferente de " + " k2")
chamada antiga: Assert.assertEquals(g.apply(new Object[] { q1 }), g.apply(new Object[] { q2 }))
nova chamada: assertEquals(g.apply(new Object[] { q1 }), g.apply(new Object[] { q2 }), "Era esperado valores iguais, mas " + result349 + " <g.apply(new Object[] { q1 })> é diferente de " + result350 + " <g.apply(new Object[] { q2 })>")
chamada antiga: Assert.assertEquals(g.apply(new Object[] { q1 }), g.apply(new Object[] { q2 }))
nova chamada: assertEquals(g.apply(new Object[] { q1 }), g.apply(new Object[] { q2 }), "Era esperado valores iguais, mas " + result351 + " <g.apply(new Object[] { q1 })> é diferente de " + result352 + " <g.apply(new Object[] { q2 })>")
chamada antiga: Assert.assertEquals(g.apply(new Object[] { q1 }), g.apply(new Object[] { q2 }))
nova chamada: assertEquals(g.apply(new Object[] { q1 }), g.apply(new Object[] { q2 }), "Era esperado valores iguais, mas " + result353 + " <g.apply(new Object[] { q1 })> é diferente de " + result354 + " <g.apply(new Object[] { q2 })>")
chamada antiga: Assert.assertEquals(t.withSecond(34).withNano(0), rt)
nova chamada: assertEquals(t.withSecond(34).withNano(0), rt, "Era esperado valores iguais, mas " + result355 + " <t.withSecond(34).withNano(0)> é diferente de " + " rt")
chamada antiga: Assert.assertEquals(t.withSecond(34).withNano(0), rt)
nova chamada: assertEquals(t.withSecond(34).withNano(0), rt, "Era esperado valores iguais, mas " + result356 + " <t.withSecond(34).withNano(0)> é diferente de " + " rt")
chamada antiga: Assert.assertEquals(t.withMinute(51).withSecond(0).withNano(0), rt)
nova chamada: assertEquals(t.withMinute(51).withSecond(0).withNano(0), rt, "Era esperado valores iguais, mas " + result357 + " <t.withMinute(51).withSecond(0).withNano(0)> é diferente de " + " rt")
chamada antiga: Assert.assertEquals(t.withMinute(51).withSecond(0).withNano(0), rt)
nova chamada: assertEquals(t.withMinute(51).withSecond(0).withNano(0), rt, "Era esperado valores iguais, mas " + result358 + " <t.withMinute(51).withSecond(0).withNano(0)> é diferente de " + " rt")
chamada antiga: Assert.assertEquals(t.withMinute(51).withSecond(0).withNano(0), rt)
nova chamada: assertEquals(t.withMinute(51).withSecond(0).withNano(0), rt, "Era esperado valores iguais, mas " + result359 + " <t.withMinute(51).withSecond(0).withNano(0)> é diferente de " + " rt")
chamada antiga: Assert.assertEquals(t.withMinute(55).withSecond(0).withNano(0), rt)
nova chamada: assertEquals(t.withMinute(55).withSecond(0).withNano(0), rt, "Era esperado valores iguais, mas " + result360 + " <t.withMinute(55).withSecond(0).withNano(0)> é diferente de " + " rt")
chamada antiga: Assert.assertEquals(t.withDayOfMonth(12).withHour(0).withMinute(0).withSecond(0).withNano(0), rt)
nova chamada: assertEquals(t.withDayOfMonth(12).withHour(0).withMinute(0).withSecond(0).withNano(0), rt, "Era esperado valores iguais, mas " + result361 + " <t.withDayOfMonth(12).withHour(0).withMinute(0).withSecond(0).withNano(0)> é diferente de " + " rt")
chamada antiga: Assert.assertEquals(t.withDayOfMonth(12).withHour(0).withMinute(0).withSecond(0).withNano(0), rt)
nova chamada: assertEquals(t.withDayOfMonth(12).withHour(0).withMinute(0).withSecond(0).withNano(0), rt, "Era esperado valores iguais, mas " + result362 + " <t.withDayOfMonth(12).withHour(0).withMinute(0).withSecond(0).withNano(0)> é diferente de " + " rt")
chamada antiga: Assert.assertEquals(t.withDayOfMonth(12).withHour(0).withMinute(0).withSecond(0).withNano(0), rt)
nova chamada: assertEquals(t.withDayOfMonth(12).withHour(0).withMinute(0).withSecond(0).withNano(0), rt, "Era esperado valores iguais, mas " + result363 + " <t.withDayOfMonth(12).withHour(0).withMinute(0).withSecond(0).withNano(0)> é diferente de " + " rt")
chamada antiga: Assert.assertEquals(t.withDayOfMonth(12).withHour(0).withMinute(0).withSecond(0).withNano(0), rt)
nova chamada: assertEquals(t.withDayOfMonth(12).withHour(0).withMinute(0).withSecond(0).withNano(0), rt, "Era esperado valores iguais, mas " + result364 + " <t.withDayOfMonth(12).withHour(0).withMinute(0).withSecond(0).withNano(0)> é diferente de " + " rt")
chamada antiga: Assert.assertEquals(t.withDayOfMonth(12).withHour(0).withMinute(0).withSecond(0).withNano(0), rt)
nova chamada: assertEquals(t.withDayOfMonth(12).withHour(0).withMinute(0).withSecond(0).withNano(0), rt, "Era esperado valores iguais, mas " + result365 + " <t.withDayOfMonth(12).withHour(0).withMinute(0).withSecond(0).withNano(0)> é diferente de " + " rt")
chamada antiga: Assert.assertEquals(t.withDayOfMonth(12).withHour(0).withMinute(0).withSecond(0).withNano(0), rt)
nova chamada: assertEquals(t.withDayOfMonth(12).withHour(0).withMinute(0).withSecond(0).withNano(0), rt, "Era esperado valores iguais, mas " + result366 + " <t.withDayOfMonth(12).withHour(0).withMinute(0).withSecond(0).withNano(0)> é diferente de " + " rt")
chamada antiga: Assertions.assertEquals("V1", local1.get("K1"))
nova chamada: assertEquals("V1", local1.get("K1"), "Era esperado valores iguais, mas  'V1' é diferente de " + result367 + " <local1.get('K1')>")
chamada antiga: Assertions.assertEquals("V1", local2.get("K1"))
nova chamada: assertEquals("V1", local2.get("K1"), "Era esperado valores iguais, mas  'V1' é diferente de " + result368 + " <local2.get('K1')>")
chamada antiga: Assertions.assertEquals("V2", local1.get("K1"))
nova chamada: assertEquals("V2", local1.get("K1"), "Era esperado valores iguais, mas  'V2' é diferente de " + result369 + " <local1.get('K1')>")
chamada antiga: Assertions.assertEquals("V1", local1.get("K1"))
nova chamada: assertEquals("V1", local1.get("K1"), "Era esperado valores iguais, mas  'V1' é diferente de " + result370 + " <local1.get('K1')>")
chamada antiga: Assertions.assertEquals("V1", local2.get("K1"))
nova chamada: assertEquals("V1", local2.get("K1"), "Era esperado valores iguais, mas  'V1' é diferente de " + result371 + " <local2.get('K1')>")
chamada antiga: Assertions.assertEquals(null, local2.get("K1"))
nova chamada: assertEquals(null, local2.get("K1"), "Era esperado valores iguais, mas  null é diferente de " + result372 + " <local2.get('K1')>")
chamada antiga: Assertions.assertEquals("V1", local2.get("K1"))
nova chamada: assertEquals("V1", local2.get("K1"), "Era esperado valores iguais, mas  'V1' é diferente de " + result373 + " <local2.get('K1')>")
chamada antiga: Assertions.assertEquals("V1", local1.get("K1"))
nova chamada: assertEquals("V1", local1.get("K1"), "Era esperado valores iguais, mas  'V1' é diferente de " + result374 + " <local1.get('K1')>")
chamada antiga: Assertions.assertEquals("V2_new", local1.get("K2"))
nova chamada: assertEquals("V2_new", local1.get("K2"), "Era esperado valores iguais, mas  'V2_new' é diferente de " + result375 + " <local1.get('K2')>")
chamada antiga: assertNull(decoder.apply(encoder.apply(null)))
nova chamada: assertNull(decoder.apply(encoder.apply(null)), "Era esperado nulo, mas " + result376 + " <decoder.apply(encoder.apply(null))> não é nulo")
chamada antiga: assertEquals("", decoder.apply(encoder.apply("")))
nova chamada: assertEquals("", decoder.apply(encoder.apply("")), "Era esperado valores iguais, mas  '' é diferente de " + result377 + " <decoder.apply(encoder.apply(''))>")
chamada antiga: assertEquals("123", decoder.apply(encoder.apply("123")))
nova chamada: assertEquals("123", decoder.apply(encoder.apply("123")), "Era esperado valores iguais, mas  '123' é diferente de " + result378 + " <decoder.apply(encoder.apply('123'))>")
chamada antiga: assertEquals(123, decoder.apply(encoder.apply(123)))
nova chamada: assertEquals(123, decoder.apply(encoder.apply(123)), "Era esperado valores iguais, mas  123 é diferente de " + result379 + " <decoder.apply(encoder.apply(123))>")
chamada antiga: assertEquals(date, decoder.apply(encoder.apply(date)))
nova chamada: assertEquals(date, decoder.apply(encoder.apply(date)), "Era esperado valores iguais, mas  date é diferente de " + result380 + " <decoder.apply(encoder.apply(date))>")
chamada antiga: assertArrayEquals(new byte[] { 1, 2, 3, -1 }, (byte[]) decoder.apply(encoder.apply(new byte[] { 1, 2, 3, -1 })))
nova chamada: assertArrayEquals(new byte[] { 1, 2, 3, -1 }, (byte[]) decoder.apply(encoder.apply(new byte[] { 1, 2, 3, -1 })), "Era esperado arrays iguais, mas  new byte[] { 1, 2, 3, -1 } é diferente de " + " (byte[]) decoder.apply(encoder.apply(new byte[] { 1, 2, 3, -1 }))")
chamada antiga: assertEquals(h.getExpireTime(), h2.getExpireTime())
nova chamada: assertEquals(h.getExpireTime(), h2.getExpireTime(), "Era esperado valores iguais, mas " + result381 + " <h.getExpireTime()> é diferente de " + result382 + " <h2.getExpireTime()>")
chamada antiga: assertNull(h2.getValue())
nova chamada: assertNull(h2.getValue(), "Era esperado nulo, mas " + result383 + " <h2.getValue()> não é nulo")
chamada antiga: assertEquals(h.getExpireTime(), h2.getExpireTime())
nova chamada: assertEquals(h.getExpireTime(), h2.getExpireTime(), "Era esperado valores iguais, mas " + result384 + " <h.getExpireTime()> é diferente de " + result385 + " <h2.getExpireTime()>")
chamada antiga: assertEquals("c", cm2.getCacheName())
nova chamada: assertEquals("c", cm2.getCacheName(), "Era esperado valores iguais, mas  'c' é diferente de " + result386 + " <cm2.getCacheName()>")
chamada antiga: assertNull(cm2.getKeys())
nova chamada: assertNull(cm2.getKeys(), "Era esperado nulo, mas " + result387 + " <cm2.getKeys()> não é nulo")
chamada antiga: assertEquals("12", cm2.getKeys()[0])
nova chamada: assertEquals("12", cm2.getKeys()[0], "Era esperado valores iguais, mas  '12' é diferente de " + " cm2.getKeys()[0]")
chamada antiga: assertEquals("34", cm2.getKeys()[1])
nova chamada: assertEquals("34", cm2.getKeys()[1], "Era esperado valores iguais, mas  '34' é diferente de " + " cm2.getKeys()[1]")
chamada antiga: assertEquals("1", m2.get(1))
nova chamada: assertEquals("1", m2.get(1), "Era esperado valores iguais, mas  '1' é diferente de " + result388 + " <m2.get(1)>")
chamada antiga: assertEquals("2", m2.get(2))
nova chamada: assertEquals("2", m2.get(2), "Era esperado valores iguais, mas  '2' é diferente de " + result389 + " <m2.get(2)>")
chamada antiga: assertEquals("3", m2.get(3))
nova chamada: assertEquals("3", m2.get(3), "Era esperado valores iguais, mas  '3' é diferente de " + result390 + " <m2.get(3)>")
chamada antiga: assertEquals("4", m2.get(4))
nova chamada: assertEquals("4", m2.get(4), "Era esperado valores iguais, mas  '4' é diferente de " + result391 + " <m2.get(4)>")
chamada antiga: assertEquals("5", m2.get(5))
nova chamada: assertEquals("5", m2.get(5), "Era esperado valores iguais, mas  '5' é diferente de " + result392 + " <m2.get(5)>")
chamada antiga: assertEquals(1, list2.get(0))
nova chamada: assertEquals(1, list2.get(0), "Era esperado valores iguais, mas  1 é diferente de " + result393 + " <list2.get(0)>")
chamada antiga: assertEquals(2, list2.get(1))
nova chamada: assertEquals(2, list2.get(1), "Era esperado valores iguais, mas  2 é diferente de " + result394 + " <list2.get(1)>")
chamada antiga: assertEquals(3, list2.get(2))
nova chamada: assertEquals(3, list2.get(2), "Era esperado valores iguais, mas  3 é diferente de " + result395 + " <list2.get(2)>")
chamada antiga: assertEquals(4, list2.get(3))
nova chamada: assertEquals(4, list2.get(3), "Era esperado valores iguais, mas  4 é diferente de " + result396 + " <list2.get(3)>")
chamada antiga: assertEquals(5, list2.get(4))
nova chamada: assertEquals(5, list2.get(4), "Era esperado valores iguais, mas  5 é diferente de " + result397 + " <list2.get(4)>")
chamada antiga: assertTrue(s2.contains(1))
nova chamada: assertTrue(s2.contains(1), "Era esperado verdadeiro, mas " + result398 + " <s2.contains(1)> é falso")
chamada antiga: assertTrue(s2.contains(2))
nova chamada: assertTrue(s2.contains(2), "Era esperado verdadeiro, mas " + result399 + " <s2.contains(2)> é falso")
chamada antiga: assertTrue(s2.contains(3))
nova chamada: assertTrue(s2.contains(3), "Era esperado verdadeiro, mas " + result400 + " <s2.contains(3)> é falso")
chamada antiga: assertTrue(s2.contains(4))
nova chamada: assertTrue(s2.contains(4), "Era esperado verdadeiro, mas " + result401 + " <s2.contains(4)> é falso")
chamada antiga: assertTrue(s2.contains(5))
nova chamada: assertTrue(s2.contains(5), "Era esperado verdadeiro, mas " + result402 + " <s2.contains(5)> é falso")
chamada antiga: assertEquals(q.getId(), q2.getId())
nova chamada: assertEquals(q.getId(), q2.getId(), "Era esperado valores iguais, mas " + result403 + " <q.getId()> é diferente de " + result404 + " <q2.getId()>")
chamada antiga: assertEquals(q.getName(), q2.getName())
nova chamada: assertEquals(q.getName(), q2.getName(), "Era esperado valores iguais, mas " + result405 + " <q.getName()> é diferente de " + result406 + " <q2.getName()>")
chamada antiga: assertEquals(q.getEmail(), q2.getEmail())
nova chamada: assertEquals(q.getEmail(), q2.getEmail(), "Era esperado valores iguais, mas " + result407 + " <q.getEmail()> é diferente de " + result408 + " <q2.getEmail()>")
chamada antiga: Assert.assertSame(m.commands(client), m.commands(client))
nova chamada: assertSame(m.commands(client), m.commands(client), "Era esperado objetos iguais, mas " + result409 + " <m.commands(client)> é diferente de " + result410 + " <m.commands(client)>")
chamada antiga: Assert.assertSame(m.asyncCommands(client), m.asyncCommands(client))
nova chamada: assertSame(m.asyncCommands(client), m.asyncCommands(client), "Era esperado objetos iguais, mas " + result411 + " <m.asyncCommands(client)> é diferente de " + result412 + " <m.asyncCommands(client)>")
chamada antiga: Assert.assertSame(m.reactiveCommands(client), m.reactiveCommands(client))
nova chamada: assertSame(m.reactiveCommands(client), m.reactiveCommands(client), "Era esperado objetos iguais, mas " + result413 + " <m.reactiveCommands(client)> é diferente de " + result414 + " <m.reactiveCommands(client)>")
chamada antiga: Assert.assertSame(m.commands(client), m.commands(client))
nova chamada: assertSame(m.commands(client), m.commands(client), "Era esperado objetos iguais, mas " + result415 + " <m.commands(client)> é diferente de " + result416 + " <m.commands(client)>")
chamada antiga: Assert.assertSame(m.asyncCommands(client), m.asyncCommands(client))
nova chamada: assertSame(m.asyncCommands(client), m.asyncCommands(client), "Era esperado objetos iguais, mas " + result417 + " <m.asyncCommands(client)> é diferente de " + result418 + " <m.asyncCommands(client)>")
chamada antiga: Assert.assertSame(m.reactiveCommands(client), m.reactiveCommands(client))
nova chamada: assertSame(m.reactiveCommands(client), m.reactiveCommands(client), "Era esperado objetos iguais, mas " + result419 + " <m.reactiveCommands(client)> é diferente de " + result420 + " <m.reactiveCommands(client)>")
chamada antiga: Assert.assertNotSame(pool1, ((RedisCache) cache).readCommands())
nova chamada: assertNotSame(pool1, ((RedisCache) cache).readCommands(), "Era esperado objetos diferentes, mas  pool1 é igual a " + result421 + " <((RedisCache) cache).readCommands()>")
chamada antiga: Assert.assertNotSame(pool1, ((RedisCache) cache).readCommands())
nova chamada: assertNotSame(pool1, ((RedisCache) cache).readCommands(), "Era esperado objetos diferentes, mas  pool1 é igual a " + result422 + " <((RedisCache) cache).readCommands()>")
chamada antiga: Assert.assertNotSame(pool1, ((RedisCache) cache).readCommands())
nova chamada: assertNotSame(pool1, ((RedisCache) cache).readCommands(), "Era esperado objetos diferentes, mas  pool1 é igual a " + result423 + " <((RedisCache) cache).readCommands()>")
chamada antiga: Assert.assertNotSame(pool1, ((RedisCache) cache).readCommands())
nova chamada: assertNotSame(pool1, ((RedisCache) cache).readCommands(), "Era esperado objetos diferentes, mas  pool1 é igual a " + result424 + " <((RedisCache) cache).readCommands()>")
chamada antiga: Assert.assertNotNull(l1Cache.get("useSubExpire_key"))
nova chamada: assertNotNull(l1Cache.get("useSubExpire_key"), "Era esperado não nulo, mas " + result425 + " <l1Cache.get('useSubExpire_key')> é nulo")
chamada antiga: Assert.assertNotNull(l1Cache.get("useSubExpire_key"))
nova chamada: assertNotNull(l1Cache.get("useSubExpire_key"), "Era esperado não nulo, mas " + result426 + " <l1Cache.get('useSubExpire_key')> é nulo")
chamada antiga: Assert.assertNotEquals(k1, k3)
nova chamada: assertNotEquals(k1, k3, "Era esperado valores diferentes, mas  k1 é igual a " + " k3")
chamada antiga: Assert.assertNotEquals(k1, k2)
nova chamada: assertNotEquals(k1, k2, "Era esperado valores diferentes, mas  k1 é igual a " + " k2")
chamada antiga: Assert.assertNotEquals(g.apply(new Object[] { q1 }), g.apply(new Object[] { q2 }))
nova chamada: assertNotEquals(g.apply(new Object[] { q1 }), g.apply(new Object[] { q2 }), "Era esperado valores diferentes, mas " + result427 + " <g.apply(new Object[] { q1 })> é igual a " + result428 + " <g.apply(new Object[] { q2 })>")
chamada antiga: Assert.assertNotEquals(g.apply(new Object[] { q1 }), g.apply(new Object[] { q2 }))
nova chamada: assertNotEquals(g.apply(new Object[] { q1 }), g.apply(new Object[] { q2 }), "Era esperado valores diferentes, mas " + result429 + " <g.apply(new Object[] { q1 })> é igual a " + result430 + " <g.apply(new Object[] { q2 })>")
chamada antiga: assertNull(cache.tryLock(null, 1, TimeUnit.HOURS))
nova chamada: assertNull(cache.tryLock(null, 1, TimeUnit.HOURS), "Era esperado nulo, mas " + result431 + " <cache.tryLock(null, 1, TimeUnit.HOURS)> não é nulo")
chamada antiga: assertNotNull(lock)
nova chamada: assertNotNull(lock, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(concreteCache.get("key"))
nova chamada: assertNotNull(concreteCache.get("key"), "Era esperado não nulo, mas " + result432 + " <concreteCache.get('key')> é nulo")
chamada antiga: assertNotNull(lock)
nova chamada: assertNotNull(lock, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(lock)
nova chamada: assertNull(lock, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(lock)
nova chamada: assertNull(lock, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(lock)
nova chamada: assertNull(lock, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotNull(lock)
nova chamada: assertNotNull(lock, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(lock)
nova chamada: assertNotNull(lock, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(lock)
nova chamada: assertNull(lock, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(CacheResultCode.NOT_EXISTS, concreteCache.GET("key").getResultCode())
nova chamada: assertEquals(CacheResultCode.NOT_EXISTS, concreteCache.GET("key").getResultCode(), "Era esperado valores iguais, mas  CacheResultCode.NOT_EXISTS é diferente de " + result433 + " <concreteCache.GET('key').getResultCode()>")
chamada antiga: assertEquals(CacheResultCode.NOT_EXISTS, concreteCache.GET("key").getResultCode())
nova chamada: assertEquals(CacheResultCode.NOT_EXISTS, concreteCache.GET("key").getResultCode(), "Era esperado valores iguais, mas  CacheResultCode.NOT_EXISTS é diferente de " + result434 + " <concreteCache.GET('key').getResultCode()>")
chamada antiga: assertNotNull(concreteCache.get("key"))
nova chamada: assertNotNull(concreteCache.get("key"), "Era esperado não nulo, mas " + result435 + " <concreteCache.get('key')> é nulo")
chamada antiga: assertNotNull(concreteCache.get("key"))
nova chamada: assertNotNull(concreteCache.get("key"), "Era esperado não nulo, mas " + result436 + " <concreteCache.get('key')> é nulo")
chamada antiga: assertNotNull(concreteCache.GET("key"))
nova chamada: assertNotNull(concreteCache.GET("key"), "Era esperado não nulo, mas " + result437 + " <concreteCache.GET('key')> é nulo")
chamada antiga: Assert.assertNotNull(t1)
nova chamada: assertNotNull(t1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: Assert.assertNotNull(t2)
nova chamada: assertNotNull(t2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: Assert.assertNotSame(t1, t2)
nova chamada: assertNotSame(t1, t2, "Era esperado objetos diferentes, mas  t1 é igual a " + " t2")
chamada antiga: Assert.assertTrue(new LettuceFactory(acb, key, StatefulRedisConnection.class).getObject() instanceof StatefulRedisConnection)
nova chamada: assertTrue(new LettuceFactory(acb, key, StatefulRedisConnection.class).getObject() instanceof StatefulRedisConnection, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assert.assertTrue(new LettuceFactory(acb, key, RedisCommands.class).getObject() instanceof RedisCommands)
nova chamada: assertTrue(new LettuceFactory(acb, key, RedisCommands.class).getObject() instanceof RedisCommands, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assert.assertTrue(new LettuceFactory(acb, key, RedisAsyncCommands.class).getObject() instanceof RedisAsyncCommands)
nova chamada: assertTrue(new LettuceFactory(acb, key, RedisAsyncCommands.class).getObject() instanceof RedisAsyncCommands, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assert.assertTrue(new LettuceFactory(acb, key, RedisReactiveCommands.class).getObject() instanceof RedisReactiveCommands)
nova chamada: assertTrue(new LettuceFactory(acb, key, RedisReactiveCommands.class).getObject() instanceof RedisReactiveCommands, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assert.assertNotNull(c1.unwrap(RedisClient.class))
nova chamada: assertNotNull(c1.unwrap(RedisClient.class), "Era esperado não nulo, mas " + result438 + " <c1.unwrap(RedisClient.class)> é nulo")
chamada antiga: Assert.assertEquals(20000, cc1.getExpireAfterWriteInMillis())
nova chamada: assertEquals(20000, cc1.getExpireAfterWriteInMillis(), "Era esperado valores iguais, mas  20000 é diferente de " + result439 + " <cc1.getExpireAfterWriteInMillis()>")
chamada antiga: Assert.assertEquals("V1", a1SlaveCache.get("K1"))
nova chamada: assertEquals("V1", a1SlaveCache.get("K1"), "Era esperado valores iguais, mas  'V1' é diferente de " + result440 + " <a1SlaveCache.get('K1')>")
chamada antiga: Assert.assertNotNull(defaultClient)
nova chamada: assertNotNull(defaultClient, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: Assert.assertNotNull(a1Client)
nova chamada: assertNotNull(a1Client, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: Assert.assertTrue(cache.PUT("K", "V").isSuccess())
nova chamada: assertTrue(cache.PUT("K", "V").isSuccess(), "Era esperado verdadeiro, mas " + result441 + " <cache.PUT('K', 'V').isSuccess()> é falso")
chamada antiga: assertEquals(8, configTree.getProperties().size())
nova chamada: assertEquals(8, configTree.getProperties().size(), "Era esperado valores iguais, mas  8 é diferente de " + result442 + " <configTree.getProperties().size()>")
chamada antiga: assertEquals(3, configTree.subTree("remote.default").getProperties().size())
nova chamada: assertEquals(3, configTree.subTree("remote.default").getProperties().size(), "Era esperado valores iguais, mas  3 é diferente de " + result443 + " <configTree.subTree('remote.default').getProperties().size()>")
chamada antiga: assertEquals(5, configTree.subTree("remote.A1.").getProperties().size())
nova chamada: assertEquals(5, configTree.subTree("remote.A1.").getProperties().size(), "Era esperado valores iguais, mas  5 é diferente de " + result444 + " <configTree.subTree('remote.A1.').getProperties().size()>")
chamada antiga: assertEquals(1, configTree.subTree("remote.default.uri").getProperties().size())
nova chamada: assertEquals(1, configTree.subTree("remote.default.uri").getProperties().size(), "Era esperado valores iguais, mas  1 é diferente de " + result445 + " <configTree.subTree('remote.default.uri').getProperties().size()>")
chamada antiga: assertEquals(3, configTree.subTree("remote.A1.uri").getProperties().size())
nova chamada: assertEquals(3, configTree.subTree("remote.A1.uri").getProperties().size(), "Era esperado valores iguais, mas  3 é diferente de " + result446 + " <configTree.subTree('remote.A1.uri').getProperties().size()>")
chamada antiga: assertTrue(configTree.containsProperty("remote.default.type"))
nova chamada: assertTrue(configTree.containsProperty("remote.default.type"), "Era esperado verdadeiro, mas " + result447 + " <configTree.containsProperty('remote.default.type')> é falso")
chamada antiga: assertTrue(configTree.containsProperty("remote.default.uri"))
nova chamada: assertTrue(configTree.containsProperty("remote.default.uri"), "Era esperado verdadeiro, mas " + result448 + " <configTree.containsProperty('remote.default.uri')> é falso")
chamada antiga: assertEquals("redis://127.0.0.1:6379/", configTree.getProperty("remote.default.uri"))
nova chamada: assertEquals("redis://127.0.0.1:6379/", configTree.getProperty("remote.default.uri"), "Era esperado valores iguais, mas  'redis://127.0.0.1:6379/' é diferente de " + result449 + " <configTree.getProperty('remote.default.uri')>")
chamada antiga: assertEquals(1, children.size())
nova chamada: assertEquals(1, children.size(), "Era esperado valores iguais, mas  1 é diferente de " + result450 + " <children.size()>")
chamada antiga: assertTrue(children.contains("remote"))
nova chamada: assertTrue(children.contains("remote"), "Era esperado verdadeiro, mas " + result451 + " <children.contains('remote')> é falso")
chamada antiga: assertEquals(2, children.size())
nova chamada: assertEquals(2, children.size(), "Era esperado valores iguais, mas  2 é diferente de " + result452 + " <children.size()>")
chamada antiga: assertTrue(children.contains("default"))
nova chamada: assertTrue(children.contains("default"), "Era esperado verdadeiro, mas " + result453 + " <children.contains('default')> é falso")
chamada antiga: assertTrue(children.contains("A1"))
nova chamada: assertTrue(children.contains("A1"), "Era esperado verdadeiro, mas " + result454 + " <children.contains('A1')> é falso")
chamada antiga: assertEquals(0, children.size())
nova chamada: assertEquals(0, children.size(), "Era esperado valores iguais, mas  0 é diferente de " + result455 + " <children.size()>")
chamada antiga: Assert.assertTrue(cache.PUT("K", "V").isSuccess())
nova chamada: assertTrue(cache.PUT("K", "V").isSuccess(), "Era esperado verdadeiro, mas " + result456 + " <cache.PUT('K', 'V').isSuccess()> é falso")
chamada antiga: Assert.assertTrue(t1 instanceof Pool)
nova chamada: assertTrue(t1 instanceof Pool, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assert.assertTrue(t2 instanceof JedisSentinelPool)
nova chamada: assertTrue(t2 instanceof JedisSentinelPool, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assert.assertEquals(200, cc1.getLimit())
nova chamada: assertEquals(200, cc1.getLimit(), "Era esperado valores iguais, mas  200 é diferente de " + result457 + " <cc1.getLimit()>")
chamada antiga: Assert.assertEquals(10000, cc1.getExpireAfterWriteInMillis())
nova chamada: assertEquals(10000, cc1.getExpireAfterWriteInMillis(), "Era esperado valores iguais, mas  10000 é diferente de " + result458 + " <cc1.getExpireAfterWriteInMillis()>")
chamada antiga: Assert.assertEquals(2, slavePools.length)
nova chamada: assertEquals(2, slavePools.length, "Era esperado valores iguais, mas  2 é diferente de " + " slavePools.length")
chamada antiga: Assert.assertTrue(Arrays.equals(new int[] { 30, 100 }, ws) || Arrays.equals(new int[] { 100, 30 }, ws))
nova chamada: assertTrue(Arrays.equals(new int[] { 30, 100 }, ws) || Arrays.equals(new int[] { 100, 30 }, ws), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(c instanceof AbstractExternalCache)
nova chamada: assertTrue(c instanceof AbstractExternalCache, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(cb.getConfig().getExpireAfterWriteInMillis(), c.config().getExpireAfterWriteInMillis())
nova chamada: assertEquals(cb.getConfig().getExpireAfterWriteInMillis(), c.config().getExpireAfterWriteInMillis(), "Era esperado valores iguais, mas " + result459 + " <cb.getConfig().getExpireAfterWriteInMillis()> é diferente de " + result460 + " <c.config().getExpireAfterWriteInMillis()>")
chamada antiga: assertSame(cb.getConfig().getKeyConvertor(), config.getKeyConvertor())
nova chamada: assertSame(cb.getConfig().getKeyConvertor(), config.getKeyConvertor(), "Era esperado objetos iguais, mas " + result461 + " <cb.getConfig().getKeyConvertor()> é diferente de " + result462 + " <config.getKeyConvertor()>")
chamada antiga: assertSame(cb.getConfig().getValueEncoder(), config.getValueEncoder())
nova chamada: assertSame(cb.getConfig().getValueEncoder(), config.getValueEncoder(), "Era esperado objetos iguais, mas " + result463 + " <cb.getConfig().getValueEncoder()> é diferente de " + result464 + " <config.getValueEncoder()>")
chamada antiga: assertSame(cb.getConfig().getValueDecoder(), config.getValueDecoder())
nova chamada: assertSame(cb.getConfig().getValueDecoder(), config.getValueDecoder(), "Era esperado objetos iguais, mas " + result465 + " <cb.getConfig().getValueDecoder()> é diferente de " + result466 + " <config.getValueDecoder()>")
chamada antiga: assertEquals(cb.getConfig().isCacheNullValue(), config.isCacheNullValue())
nova chamada: assertEquals(cb.getConfig().isCacheNullValue(), config.isCacheNullValue(), "Era esperado valores iguais, mas " + result467 + " <cb.getConfig().isCacheNullValue()> é diferente de " + result468 + " <config.isCacheNullValue()>")
chamada antiga: assertEquals(cb.getConfig().getKeyPrefix() + cacheName, config.getKeyPrefix())
nova chamada: assertEquals(cb.getConfig().getKeyPrefix() + cacheName, config.getKeyPrefix(), "Era esperado valores iguais, mas  cb.getConfig().getKeyPrefix() + cacheName é diferente de " + result469 + " <config.getKeyPrefix()>")
chamada antiga: assertEquals(cb.getConfig().isCachePenetrationProtect(), config.isCachePenetrationProtect())
nova chamada: assertEquals(cb.getConfig().isCachePenetrationProtect(), config.isCachePenetrationProtect(), "Era esperado valores iguais, mas " + result470 + " <cb.getConfig().isCachePenetrationProtect()> é diferente de " + result471 + " <config.isCachePenetrationProtect()>")
chamada antiga: assertEquals(cb.getConfig().getPenetrationProtectTimeout(), config.getPenetrationProtectTimeout())
nova chamada: assertEquals(cb.getConfig().getPenetrationProtectTimeout(), config.getPenetrationProtectTimeout(), "Era esperado valores iguais, mas " + result472 + " <cb.getConfig().getPenetrationProtectTimeout()> é diferente de " + result473 + " <config.getPenetrationProtectTimeout()>")
chamada antiga: assertNull(c.config().getRefreshPolicy())
nova chamada: assertNull(c.config().getRefreshPolicy(), "Era esperado nulo, mas " + result474 + " <c.config().getRefreshPolicy()> não é nulo")
chamada antiga: assertEquals(2000, remoteConfig.getExpireAfterWriteInMillis())
nova chamada: assertEquals(2000, remoteConfig.getExpireAfterWriteInMillis(), "Era esperado valores iguais, mas  2000 é diferente de " + result475 + " <remoteConfig.getExpireAfterWriteInMillis()>")
chamada antiga: assertEquals(1000, localConfig.getExpireAfterWriteInMillis())
nova chamada: assertEquals(1000, localConfig.getExpireAfterWriteInMillis(), "Era esperado valores iguais, mas  1000 é diferente de " + result476 + " <localConfig.getExpireAfterWriteInMillis()>")
chamada antiga: assertEquals(1, localConfig.getLimit())
nova chamada: assertEquals(1, localConfig.getLimit(), "Era esperado valores iguais, mas  1 é diferente de " + result477 + " <localConfig.getLimit()>")
chamada antiga: assertSame(keyConvertor, localConfig.getKeyConvertor())
nova chamada: assertSame(keyConvertor, localConfig.getKeyConvertor(), "Era esperado objetos iguais, mas  keyConvertor é diferente de " + result478 + " <localConfig.getKeyConvertor()>")
chamada antiga: assertSame(keyConvertor, remoteConfig.getKeyConvertor())
nova chamada: assertSame(keyConvertor, remoteConfig.getKeyConvertor(), "Era esperado objetos iguais, mas  keyConvertor é diferente de " + result479 + " <remoteConfig.getKeyConvertor()>")
chamada antiga: assertSame(valueEncoder, remoteConfig.getValueEncoder())
nova chamada: assertSame(valueEncoder, remoteConfig.getValueEncoder(), "Era esperado objetos iguais, mas  valueEncoder é diferente de " + result480 + " <remoteConfig.getValueEncoder()>")
chamada antiga: assertSame(valueDecoder, remoteConfig.getValueDecoder())
nova chamada: assertSame(valueDecoder, remoteConfig.getValueDecoder(), "Era esperado objetos iguais, mas  valueDecoder é diferente de " + result481 + " <remoteConfig.getValueDecoder()>")
chamada antiga: assertTrue(localConfig.isCacheNullValue())
nova chamada: assertTrue(localConfig.isCacheNullValue(), "Era esperado verdadeiro, mas " + result482 + " <localConfig.isCacheNullValue()> é falso")
chamada antiga: assertTrue(remoteConfig.isCacheNullValue())
nova chamada: assertTrue(remoteConfig.isCacheNullValue(), "Era esperado verdadeiro, mas " + result483 + " <remoteConfig.isCacheNullValue()> é falso")
chamada antiga: assertEquals(cb.getConfig().getKeyPrefix() + CacheConsts.DEFAULT_AREA + "_" + cacheName, remoteConfig.getKeyPrefix())
nova chamada: assertEquals(cb.getConfig().getKeyPrefix() + CacheConsts.DEFAULT_AREA + "_" + cacheName, remoteConfig.getKeyPrefix(), "Era esperado valores iguais, mas  cb.getConfig().getKeyPrefix() + CacheConsts.DEFAULT_AREA + '_' + cacheName é diferente de " + result484 + " <remoteConfig.getKeyPrefix()>")
chamada antiga: assertTrue(multiConfig.isCachePenetrationProtect())
nova chamada: assertTrue(multiConfig.isCachePenetrationProtect(), "Era esperado verdadeiro, mas " + result485 + " <multiConfig.isCachePenetrationProtect()> é falso")
chamada antiga: assertEquals(Duration.ofSeconds(20), multiConfig.getPenetrationProtectTimeout())
nova chamada: assertEquals(Duration.ofSeconds(20), multiConfig.getPenetrationProtectTimeout(), "Era esperado valores iguais, mas " + result486 + " <Duration.ofSeconds(20)> é diferente de " + result487 + " <multiConfig.getPenetrationProtectTimeout()>")
chamada antiga: assertSame(rp, multiConfig.getRefreshPolicy())
nova chamada: assertSame(rp, multiConfig.getRefreshPolicy(), "Era esperado objetos iguais, mas  rp é diferente de " + result488 + " <multiConfig.getRefreshPolicy()>")
chamada antiga: assertTrue(c instanceof AbstractEmbeddedCache)
nova chamada: assertTrue(c instanceof AbstractEmbeddedCache, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("K1V", cache.get("K1"))
nova chamada: assertEquals("K1V", cache.get("K1"), "Era esperado valores iguais, mas  'K1V' é diferente de " + result489 + " <cache.get('K1')>")
chamada antiga: assertEquals("K10", cache.get("K1"))
nova chamada: assertEquals("K10", cache.get("K1"), "Era esperado valores iguais, mas  'K10' é diferente de " + result490 + " <cache.get('K1')>")
chamada antiga: Assert.assertEquals(testBean.count(), testBean.count())
nova chamada: assertEquals(testBean.count(), testBean.count(), "Era esperado valores iguais, mas " + result491 + " <testBean.count()> é diferente de " + result492 + " <testBean.count()>")
chamada antiga: Assert.assertTrue(cache.PUT("K1", "V1").isSuccess())
nova chamada: assertTrue(cache.PUT("K1", "V1").isSuccess(), "Era esperado verdadeiro, mas " + result493 + " <cache.PUT('K1', 'V1').isSuccess()> é falso")
chamada antiga: Assert.assertEquals("V1", cache.get("K1"))
nova chamada: assertEquals("V1", cache.get("K1"), "Era esperado valores iguais, mas  'V1' é diferente de " + result494 + " <cache.get('K1')>")
chamada antiga: Assert.assertEquals(serviceDelegate.combinedTest1(), serviceDelegate.combinedTest1())
nova chamada: assertEquals(serviceDelegate.combinedTest1(), serviceDelegate.combinedTest1(), "Era esperado valores iguais, mas " + result495 + " <serviceDelegate.combinedTest1()> é diferente de " + result496 + " <serviceDelegate.combinedTest1()>")
chamada antiga: Assert.assertEquals(serviceDelegate.combinedTest2(), serviceDelegate.combinedTest2())
nova chamada: assertEquals(serviceDelegate.combinedTest2(), serviceDelegate.combinedTest2(), "Era esperado valores iguais, mas " + result497 + " <serviceDelegate.combinedTest2()> é diferente de " + result498 + " <serviceDelegate.combinedTest2()>")
chamada antiga: Assert.assertEquals(service.combinedTest1(), service.combinedTest1())
nova chamada: assertEquals(service.combinedTest1(), service.combinedTest1(), "Era esperado valores iguais, mas " + result499 + " <service.combinedTest1()> é diferente de " + result500 + " <service.combinedTest1()>")
chamada antiga: Assert.assertEquals(service.combinedTest2(), service.combinedTest2())
nova chamada: assertEquals(service.combinedTest2(), service.combinedTest2(), "Era esperado valores iguais, mas " + result501 + " <service.combinedTest2()> é diferente de " + result502 + " <service.combinedTest2()>")
chamada antiga: Assertions.assertEquals(1000, c1.config().getExpireAfterWriteInMillis())
nova chamada: assertEquals(1000, c1.config().getExpireAfterWriteInMillis(), "Era esperado valores iguais, mas  1000 é diferente de " + result503 + " <c1.config().getExpireAfterWriteInMillis()>")
chamada antiga: Assertions.assertEquals(1000, c2.config().getExpireAfterWriteInMillis())
nova chamada: assertEquals(1000, c2.config().getExpireAfterWriteInMillis(), "Era esperado valores iguais, mas  1000 é diferente de " + result504 + " <c2.config().getExpireAfterWriteInMillis()>")
chamada antiga: Assert.assertTrue(pc.matches(C1.class))
nova chamada: assertTrue(pc.matches(C1.class), "Era esperado verdadeiro, mas " + result505 + " <pc.matches(C1.class)> é falso")
chamada antiga: Assert.assertTrue(pc.matches(I1.class))
nova chamada: assertTrue(pc.matches(I1.class), "Era esperado verdadeiro, mas " + result506 + " <pc.matches(I1.class)> é falso")
chamada antiga: Assert.assertTrue(pc.matches(m1, C1.class))
nova chamada: assertTrue(pc.matches(m1, C1.class), "Era esperado verdadeiro, mas " + result507 + " <pc.matches(m1, C1.class)> é falso")
chamada antiga: Assert.assertTrue(pc.matches(m2, C1.class))
nova chamada: assertTrue(pc.matches(m2, C1.class), "Era esperado verdadeiro, mas " + result508 + " <pc.matches(m2, C1.class)> é falso")
chamada antiga: Assert.assertTrue(pc.matches(m1, I1.class))
nova chamada: assertTrue(pc.matches(m1, I1.class), "Era esperado verdadeiro, mas " + result509 + " <pc.matches(m1, I1.class)> é falso")
chamada antiga: Assert.assertTrue(pc.matches(m2, I1.class))
nova chamada: assertTrue(pc.matches(m2, I1.class), "Era esperado verdadeiro, mas " + result510 + " <pc.matches(m2, I1.class)> é falso")
chamada antiga: Assert.assertTrue(pc.matches(m1, o1.getClass()))
nova chamada: assertTrue(pc.matches(m1, o1.getClass()), "Era esperado verdadeiro, mas " + result511 + " <pc.matches(m1, o1.getClass())> é falso")
chamada antiga: Assert.assertTrue(pc.matches(m2, o1.getClass()))
nova chamada: assertTrue(pc.matches(m2, o1.getClass()), "Era esperado verdadeiro, mas " + result512 + " <pc.matches(m2, o1.getClass())> é falso")
chamada antiga: Assert.assertTrue(pc.matches(o1.getClass().getMethod("foo"), o1.getClass()))
nova chamada: assertTrue(pc.matches(o1.getClass().getMethod("foo"), o1.getClass()), "Era esperado verdadeiro, mas " + result513 + " <pc.matches(o1.getClass().getMethod('foo'), o1.getClass())> é falso")
chamada antiga: Assert.assertTrue(pc.matches(m1, C2.class))
nova chamada: assertTrue(pc.matches(m1, C2.class), "Era esperado verdadeiro, mas " + result514 + " <pc.matches(m1, C2.class)> é falso")
chamada antiga: Assert.assertTrue(pc.matches(m2, C2.class))
nova chamada: assertTrue(pc.matches(m2, C2.class), "Era esperado verdadeiro, mas " + result515 + " <pc.matches(m2, C2.class)> é falso")
chamada antiga: Assert.assertTrue(pc.matches(m2, I2.class))
nova chamada: assertTrue(pc.matches(m2, I2.class), "Era esperado verdadeiro, mas " + result516 + " <pc.matches(m2, I2.class)> é falso")
chamada antiga: Assert.assertTrue(pc.matches(m1, o1.getClass()))
nova chamada: assertTrue(pc.matches(m1, o1.getClass()), "Era esperado verdadeiro, mas " + result517 + " <pc.matches(m1, o1.getClass())> é falso")
chamada antiga: Assert.assertTrue(pc.matches(m2, o1.getClass()))
nova chamada: assertTrue(pc.matches(m2, o1.getClass()), "Era esperado verdadeiro, mas " + result518 + " <pc.matches(m2, o1.getClass())> é falso")
chamada antiga: Assert.assertTrue(pc.matches(o1.getClass().getMethod("foo"), o1.getClass()))
nova chamada: assertTrue(pc.matches(o1.getClass().getMethod("foo"), o1.getClass()), "Era esperado verdadeiro, mas " + result519 + " <pc.matches(o1.getClass().getMethod('foo'), o1.getClass())> é falso")
chamada antiga: Assert.assertTrue(pc.matches(m1, C3.class))
nova chamada: assertTrue(pc.matches(m1, C3.class), "Era esperado verdadeiro, mas " + result520 + " <pc.matches(m1, C3.class)> é falso")
chamada antiga: Assert.assertTrue(pc.matches(m2, C3.class))
nova chamada: assertTrue(pc.matches(m2, C3.class), "Era esperado verdadeiro, mas " + result521 + " <pc.matches(m2, C3.class)> é falso")
chamada antiga: Assert.assertTrue(pc.matches(m3, C3.class))
nova chamada: assertTrue(pc.matches(m3, C3.class), "Era esperado verdadeiro, mas " + result522 + " <pc.matches(m3, C3.class)> é falso")
chamada antiga: Assert.assertTrue(pc.matches(m1, I3.class))
nova chamada: assertTrue(pc.matches(m1, I3.class), "Era esperado verdadeiro, mas " + result523 + " <pc.matches(m1, I3.class)> é falso")
chamada antiga: Assert.assertTrue(pc.matches(m2, I3.class))
nova chamada: assertTrue(pc.matches(m2, I3.class), "Era esperado verdadeiro, mas " + result524 + " <pc.matches(m2, I3.class)> é falso")
chamada antiga: Assert.assertTrue(pc.matches(m3, I3.class))
nova chamada: assertTrue(pc.matches(m3, I3.class), "Era esperado verdadeiro, mas " + result525 + " <pc.matches(m3, I3.class)> é falso")
chamada antiga: Assert.assertTrue(map.getByMethodInfo(CachePointcut.getKey(m1, I3.class)).isEnableCacheContext())
nova chamada: assertTrue(map.getByMethodInfo(CachePointcut.getKey(m1, I3.class)).isEnableCacheContext(), "Era esperado verdadeiro, mas " + result526 + " <map.getByMethodInfo(CachePointcut.getKey(m1, I3.class)).isEnableCacheContext()> é falso")
chamada antiga: Assert.assertTrue(map.getByMethodInfo(CachePointcut.getKey(m1, C3.class)).isEnableCacheContext())
nova chamada: assertTrue(map.getByMethodInfo(CachePointcut.getKey(m1, C3.class)).isEnableCacheContext(), "Era esperado verdadeiro, mas " + result527 + " <map.getByMethodInfo(CachePointcut.getKey(m1, C3.class)).isEnableCacheContext()> é falso")
chamada antiga: Assert.assertTrue(map.getByMethodInfo(CachePointcut.getKey(m2, I3.class)).isEnableCacheContext())
nova chamada: assertTrue(map.getByMethodInfo(CachePointcut.getKey(m2, I3.class)).isEnableCacheContext(), "Era esperado verdadeiro, mas " + result528 + " <map.getByMethodInfo(CachePointcut.getKey(m2, I3.class)).isEnableCacheContext()> é falso")
chamada antiga: Assert.assertTrue(map.getByMethodInfo(CachePointcut.getKey(m2, C3.class)).isEnableCacheContext())
nova chamada: assertTrue(map.getByMethodInfo(CachePointcut.getKey(m2, C3.class)).isEnableCacheContext(), "Era esperado verdadeiro, mas " + result529 + " <map.getByMethodInfo(CachePointcut.getKey(m2, C3.class)).isEnableCacheContext()> é falso")
chamada antiga: Assert.assertTrue(map.getByMethodInfo(CachePointcut.getKey(m3, I3.class)).isEnableCacheContext())
nova chamada: assertTrue(map.getByMethodInfo(CachePointcut.getKey(m3, I3.class)).isEnableCacheContext(), "Era esperado verdadeiro, mas " + result530 + " <map.getByMethodInfo(CachePointcut.getKey(m3, I3.class)).isEnableCacheContext()> é falso")
chamada antiga: Assert.assertTrue(map.getByMethodInfo(CachePointcut.getKey(m3, C3.class)).isEnableCacheContext())
nova chamada: assertTrue(map.getByMethodInfo(CachePointcut.getKey(m3, C3.class)).isEnableCacheContext(), "Era esperado verdadeiro, mas " + result531 + " <map.getByMethodInfo(CachePointcut.getKey(m3, C3.class)).isEnableCacheContext()> é falso")
chamada antiga: Assert.assertEquals("A1", cac.getArea())
nova chamada: assertEquals("A1", cac.getArea(), "Era esperado valores iguais, mas  'A1' é diferente de " + result532 + " <cac.getArea()>")
chamada antiga: Assert.assertEquals(false, cac.isEnabled())
nova chamada: assertEquals(false, cac.isEnabled(), "Era esperado valores iguais, mas  false é diferente de " + result533 + " <cac.isEnabled()>")
chamada antiga: Assert.assertEquals(1, cac.getExpire())
nova chamada: assertEquals(1, cac.getExpire(), "Era esperado valores iguais, mas  1 é diferente de " + result534 + " <cac.getExpire()>")
chamada antiga: Assert.assertEquals(CacheType.BOTH, cac.getCacheType())
nova chamada: assertEquals(CacheType.BOTH, cac.getCacheType(), "Era esperado valores iguais, mas  CacheType.BOTH é diferente de " + result535 + " <cac.getCacheType()>")
chamada antiga: Assert.assertEquals(2, cac.getLocalLimit())
nova chamada: assertEquals(2, cac.getLocalLimit(), "Era esperado valores iguais, mas  2 é diferente de " + result536 + " <cac.getLocalLimit()>")
chamada antiga: Assert.assertTrue(pc.matches(m1, C4.class))
nova chamada: assertTrue(pc.matches(m1, C4.class), "Era esperado verdadeiro, mas " + result537 + " <pc.matches(m1, C4.class)> é falso")
chamada antiga: Assert.assertTrue(pc.matches(m2, C4.class))
nova chamada: assertTrue(pc.matches(m2, C4.class), "Era esperado verdadeiro, mas " + result538 + " <pc.matches(m2, C4.class)> é falso")
chamada antiga: Assert.assertTrue(pc.matches(m1, I4.class))
nova chamada: assertTrue(pc.matches(m1, I4.class), "Era esperado verdadeiro, mas " + result539 + " <pc.matches(m1, I4.class)> é falso")
chamada antiga: Assert.assertTrue(pc.matches(m2, I4.class))
nova chamada: assertTrue(pc.matches(m2, I4.class), "Era esperado verdadeiro, mas " + result540 + " <pc.matches(m2, I4.class)> é falso")
chamada antiga: Assert.assertTrue(map.getByMethodInfo(CachePointcut.getKey(m1, C4.class)).isEnableCacheContext())
nova chamada: assertTrue(map.getByMethodInfo(CachePointcut.getKey(m1, C4.class)).isEnableCacheContext(), "Era esperado verdadeiro, mas " + result541 + " <map.getByMethodInfo(CachePointcut.getKey(m1, C4.class)).isEnableCacheContext()> é falso")
chamada antiga: Assert.assertTrue(map.getByMethodInfo(CachePointcut.getKey(m2, I4.class)).isEnableCacheContext())
nova chamada: assertTrue(map.getByMethodInfo(CachePointcut.getKey(m2, I4.class)).isEnableCacheContext(), "Era esperado verdadeiro, mas " + result542 + " <map.getByMethodInfo(CachePointcut.getKey(m2, I4.class)).isEnableCacheContext()> é falso")
chamada antiga: Assert.assertTrue(map.getByMethodInfo(CachePointcut.getKey(m2, C4.class)).isEnableCacheContext())
nova chamada: assertTrue(map.getByMethodInfo(CachePointcut.getKey(m2, C4.class)).isEnableCacheContext(), "Era esperado verdadeiro, mas " + result543 + " <map.getByMethodInfo(CachePointcut.getKey(m2, C4.class)).isEnableCacheContext()> é falso")
chamada antiga: Assert.assertTrue(pc.matches(C5.class))
nova chamada: assertTrue(pc.matches(C5.class), "Era esperado verdadeiro, mas " + result544 + " <pc.matches(C5.class)> é falso")
chamada antiga: Assert.assertTrue(pc.matches(C5.class.getMethod("bar2"), C5.class))
nova chamada: assertTrue(pc.matches(C5.class.getMethod("bar2"), C5.class), "Era esperado verdadeiro, mas " + result545 + " <pc.matches(C5.class.getMethod('bar2'), C5.class)> é falso")
chamada antiga: Assert.assertTrue(pc.matches(m1, C6_2.class))
nova chamada: assertTrue(pc.matches(m1, C6_2.class), "Era esperado verdadeiro, mas " + result546 + " <pc.matches(m1, C6_2.class)> é falso")
chamada antiga: Assert.assertTrue(pc.matches(m3, I6.class))
nova chamada: assertTrue(pc.matches(m3, I6.class), "Era esperado verdadeiro, mas " + result547 + " <pc.matches(m3, I6.class)> é falso")
chamada antiga: Assert.assertTrue(pc.matches(m3, C6_2.class))
nova chamada: assertTrue(pc.matches(m3, C6_2.class), "Era esperado verdadeiro, mas " + result548 + " <pc.matches(m3, C6_2.class)> é falso")
chamada antiga: assertNotEquals(c1.count(), c1.count())
nova chamada: assertNotEquals(c1.count(), c1.count(), "Era esperado valores diferentes, mas " + result549 + " <c1.count()> é igual a " + result550 + " <c1.count()>")
chamada antiga: assertNotEquals(c1.countWithoutCache(), c1.countWithoutCache())
nova chamada: assertNotEquals(c1.countWithoutCache(), c1.countWithoutCache(), "Era esperado valores diferentes, mas " + result551 + " <c1.countWithoutCache()> é igual a " + result552 + " <c1.countWithoutCache()>")
chamada antiga: assertEquals(c2.count(), c2.count())
nova chamada: assertEquals(c2.count(), c2.count(), "Era esperado valores iguais, mas " + result553 + " <c2.count()> é diferente de " + result554 + " <c2.count()>")
chamada antiga: assertNotEquals(c2.countWithoutCache(), c2.countWithoutCache())
nova chamada: assertNotEquals(c2.countWithoutCache(), c2.countWithoutCache(), "Era esperado valores diferentes, mas " + result555 + " <c2.countWithoutCache()> é igual a " + result556 + " <c2.countWithoutCache()>")
chamada antiga: assertNotEquals(c1.count(), c1.count())
nova chamada: assertNotEquals(c1.count(), c1.count(), "Era esperado valores diferentes, mas " + result557 + " <c1.count()> é igual a " + result558 + " <c1.count()>")
chamada antiga: assertNotEquals(c1.countWithoutCache(), c1.countWithoutCache())
nova chamada: assertNotEquals(c1.countWithoutCache(), c1.countWithoutCache(), "Era esperado valores diferentes, mas " + result559 + " <c1.countWithoutCache()> é igual a " + result560 + " <c1.countWithoutCache()>")
chamada antiga: assertEquals(c2.count(), c2.count())
nova chamada: assertEquals(c2.count(), c2.count(), "Era esperado valores iguais, mas " + result561 + " <c2.count()> é diferente de " + result562 + " <c2.count()>")
chamada antiga: assertNotEquals(c2.countWithoutCache(), c2.countWithoutCache())
nova chamada: assertNotEquals(c2.countWithoutCache(), c2.countWithoutCache(), "Era esperado valores diferentes, mas " + result563 + " <c2.countWithoutCache()> é igual a " + result564 + " <c2.countWithoutCache()>")
chamada antiga: assertEquals(c2.count(), c4.count())
nova chamada: assertEquals(c2.count(), c4.count(), "Era esperado valores iguais, mas " + result565 + " <c2.count()> é diferente de " + result566 + " <c4.count()>")
chamada antiga: assertNotEquals(c1.count(), c1.count())
nova chamada: assertNotEquals(c1.count(), c1.count(), "Era esperado valores diferentes, mas " + result567 + " <c1.count()> é igual a " + result568 + " <c1.count()>")
chamada antiga: assertNotEquals(c1.countWithoutCache(), c1.countWithoutCache())
nova chamada: assertNotEquals(c1.countWithoutCache(), c1.countWithoutCache(), "Era esperado valores diferentes, mas " + result569 + " <c1.countWithoutCache()> é igual a " + result570 + " <c1.countWithoutCache()>")
chamada antiga: assertEquals(c2.count(), c2.count())
nova chamada: assertEquals(c2.count(), c2.count(), "Era esperado valores iguais, mas " + result571 + " <c2.count()> é diferente de " + result572 + " <c2.count()>")
chamada antiga: assertNotEquals(c2.countWithoutCache(), c2.countWithoutCache())
nova chamada: assertNotEquals(c2.countWithoutCache(), c2.countWithoutCache(), "Era esperado valores diferentes, mas " + result573 + " <c2.countWithoutCache()> é igual a " + result574 + " <c2.countWithoutCache()>")
chamada antiga: assertNotEquals(c1.count(), c1.count())
nova chamada: assertNotEquals(c1.count(), c1.count(), "Era esperado valores diferentes, mas " + result575 + " <c1.count()> é igual a " + result576 + " <c1.count()>")
chamada antiga: assertNotEquals(c1.countWithoutCache(), c1.countWithoutCache())
nova chamada: assertNotEquals(c1.countWithoutCache(), c1.countWithoutCache(), "Era esperado valores diferentes, mas " + result577 + " <c1.countWithoutCache()> é igual a " + result578 + " <c1.countWithoutCache()>")
chamada antiga: assertEquals(c2.count(), c2.count())
nova chamada: assertEquals(c2.count(), c2.count(), "Era esperado valores iguais, mas " + result579 + " <c2.count()> é diferente de " + result580 + " <c2.count()>")
chamada antiga: assertNotEquals(c2.countWithoutCache(), c2.countWithoutCache())
nova chamada: assertNotEquals(c2.countWithoutCache(), c2.countWithoutCache(), "Era esperado valores diferentes, mas " + result581 + " <c2.countWithoutCache()> é igual a " + result582 + " <c2.countWithoutCache()>")
chamada antiga: assertNotEquals(c1.count(), c1.count())
nova chamada: assertNotEquals(c1.count(), c1.count(), "Era esperado valores diferentes, mas " + result583 + " <c1.count()> é igual a " + result584 + " <c1.count()>")
chamada antiga: assertNotEquals(c1.countWithoutCache(), c1.countWithoutCache())
nova chamada: assertNotEquals(c1.countWithoutCache(), c1.countWithoutCache(), "Era esperado valores diferentes, mas " + result585 + " <c1.countWithoutCache()> é igual a " + result586 + " <c1.countWithoutCache()>")
chamada antiga: assertNotEquals(c2.count(), c2.count())
nova chamada: assertNotEquals(c2.count(), c2.count(), "Era esperado valores diferentes, mas " + result587 + " <c2.count()> é igual a " + result588 + " <c2.count()>")
chamada antiga: assertNotEquals(c2.countWithoutCache(), c2.countWithoutCache())
nova chamada: assertNotEquals(c2.countWithoutCache(), c2.countWithoutCache(), "Era esperado valores diferentes, mas " + result589 + " <c2.countWithoutCache()> é igual a " + result590 + " <c2.countWithoutCache()>")
chamada antiga: assertNotEquals(c1.count(), c1.count())
nova chamada: assertNotEquals(c1.count(), c1.count(), "Era esperado valores diferentes, mas " + result591 + " <c1.count()> é igual a " + result592 + " <c1.count()>")
chamada antiga: assertNotEquals(c1.countWithoutCache(), c1.countWithoutCache())
nova chamada: assertNotEquals(c1.countWithoutCache(), c1.countWithoutCache(), "Era esperado valores diferentes, mas " + result593 + " <c1.countWithoutCache()> é igual a " + result594 + " <c1.countWithoutCache()>")
chamada antiga: assertEquals(c2.count(), c2.count())
nova chamada: assertEquals(c2.count(), c2.count(), "Era esperado valores iguais, mas " + result595 + " <c2.count()> é diferente de " + result596 + " <c2.count()>")
chamada antiga: assertNotEquals(c2.countWithoutCache(), c2.countWithoutCache())
nova chamada: assertNotEquals(c2.countWithoutCache(), c2.countWithoutCache(), "Era esperado valores diferentes, mas " + result597 + " <c2.countWithoutCache()> é igual a " + result598 + " <c2.countWithoutCache()>")
chamada antiga: assertNotEquals(c2_1.count(), c2_1.count())
nova chamada: assertNotEquals(c2_1.count(), c2_1.count(), "Era esperado valores diferentes, mas " + result599 + " <c2_1.count()> é igual a " + result600 + " <c2_1.count()>")
chamada antiga: assertNotEquals(c2_2.countWithoutCache(), c2_2.countWithoutCache())
nova chamada: assertNotEquals(c2_2.countWithoutCache(), c2_2.countWithoutCache(), "Era esperado valores diferentes, mas " + result601 + " <c2_2.countWithoutCache()> é igual a " + result602 + " <c2_2.countWithoutCache()>")
chamada antiga: assertEquals(c2_2.count(), c2_2.count())
nova chamada: assertEquals(c2_2.count(), c2_2.count(), "Era esperado valores iguais, mas " + result603 + " <c2_2.count()> é diferente de " + result604 + " <c2_2.count()>")
chamada antiga: assertEquals(v1, i8_proxy.count("K1"))
nova chamada: assertEquals(v1, i8_proxy.count("K1"), "Era esperado valores iguais, mas  v1 é diferente de " + result605 + " <i8_proxy.count('K1')>")
chamada antiga: assertNotEquals(v1, v2)
nova chamada: assertNotEquals(v1, v2, "Era esperado valores diferentes, mas  v1 é igual a " + " v2")
chamada antiga: assertEquals(v2, i8_proxy.count("K1"))
nova chamada: assertEquals(v2, i8_proxy.count("K1"), "Era esperado valores iguais, mas  v2 é diferente de " + result606 + " <i8_proxy.count('K1')>")
chamada antiga: assertEquals(200, i8_proxy.count("K1"))
nova chamada: assertEquals(200, i8_proxy.count("K1"), "Era esperado valores iguais, mas  200 é diferente de " + result607 + " <i8_proxy.count('K1')>")
chamada antiga: assertEquals(200, i8_proxy.count("K1"))
nova chamada: assertEquals(200, i8_proxy.count("K1"), "Era esperado valores iguais, mas  200 é diferente de " + result608 + " <i8_proxy.count('K1')>")
chamada antiga: assertEquals(i8_proxy.count("K1"), i8_proxy.count("K1"))
nova chamada: assertEquals(i8_proxy.count("K1"), i8_proxy.count("K1"), "Era esperado valores iguais, mas " + result609 + " <i8_proxy.count('K1')> é diferente de " + result610 + " <i8_proxy.count('K1')>")
chamada antiga: assertNotEquals(i8_proxy.count("K1"), i8_proxy.count("K2"))
nova chamada: assertNotEquals(i8_proxy.count("K1"), i8_proxy.count("K2"), "Era esperado valores diferentes, mas " + result611 + " <i8_proxy.count('K1')> é igual a " + result612 + " <i8_proxy.count('K2')>")
chamada antiga: assertEquals(i8_proxy.randomUpdate("K1"), i8_proxy.count("K1"))
nova chamada: assertEquals(i8_proxy.randomUpdate("K1"), i8_proxy.count("K1"), "Era esperado valores iguais, mas " + result613 + " <i8_proxy.randomUpdate('K1')> é diferente de " + result614 + " <i8_proxy.count('K1')>")
chamada antiga: assertEquals(i8_proxy.randomUpdate2("K1"), i8_proxy.count("K1"))
nova chamada: assertEquals(i8_proxy.randomUpdate2("K1"), i8_proxy.count("K1"), "Era esperado valores iguais, mas " + result615 + " <i8_proxy.randomUpdate2('K1')> é diferente de " + result616 + " <i8_proxy.count('K1')>")
chamada antiga: Assert.assertNotNull(c1.unwrap(com.github.benmanes.caffeine.cache.Cache.class))
nova chamada: assertNotNull(c1.unwrap(com.github.benmanes.caffeine.cache.Cache.class), "Era esperado não nulo, mas " + result617 + " <c1.unwrap(com.github.benmanes.caffeine.cache.Cache.class)> é nulo")
chamada antiga: Assert.assertNotNull(defaultPool)
nova chamada: assertNotNull(defaultPool, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: Assert.assertNotNull(A1Pool)
nova chamada: assertNotNull(A1Pool, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: Assert.assertNotNull(cache)
nova chamada: assertNotNull(cache, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: Assert.assertNotNull(map.getByMethodInfo(CachePointcut.getKey(m1, C1.class)).getCachedAnnoConfig())
nova chamada: assertNotNull(map.getByMethodInfo(CachePointcut.getKey(m1, C1.class)).getCachedAnnoConfig(), "Era esperado não nulo, mas " + result618 + " <map.getByMethodInfo(CachePointcut.getKey(m1, C1.class)).getCachedAnnoConfig()> é nulo")
chamada antiga: Assert.assertNotNull(map.getByMethodInfo(CachePointcut.getKey(m1, I1.class)).getCachedAnnoConfig())
nova chamada: assertNotNull(map.getByMethodInfo(CachePointcut.getKey(m1, I1.class)).getCachedAnnoConfig(), "Era esperado não nulo, mas " + result619 + " <map.getByMethodInfo(CachePointcut.getKey(m1, I1.class)).getCachedAnnoConfig()> é nulo")
chamada antiga: Assert.assertNotNull(map.getByMethodInfo(CachePointcut.getKey(m2, C1.class)).getCachedAnnoConfig())
nova chamada: assertNotNull(map.getByMethodInfo(CachePointcut.getKey(m2, C1.class)).getCachedAnnoConfig(), "Era esperado não nulo, mas " + result620 + " <map.getByMethodInfo(CachePointcut.getKey(m2, C1.class)).getCachedAnnoConfig()> é nulo")
chamada antiga: Assert.assertNotNull(map.getByMethodInfo(CachePointcut.getKey(m2, I1.class)).getCachedAnnoConfig())
nova chamada: assertNotNull(map.getByMethodInfo(CachePointcut.getKey(m2, I1.class)).getCachedAnnoConfig(), "Era esperado não nulo, mas " + result621 + " <map.getByMethodInfo(CachePointcut.getKey(m2, I1.class)).getCachedAnnoConfig()> é nulo")
chamada antiga: Assert.assertNotNull(map.getByMethodInfo(CachePointcut.getKey(m1, C2.class)).getCachedAnnoConfig())
nova chamada: assertNotNull(map.getByMethodInfo(CachePointcut.getKey(m1, C2.class)).getCachedAnnoConfig(), "Era esperado não nulo, mas " + result622 + " <map.getByMethodInfo(CachePointcut.getKey(m1, C2.class)).getCachedAnnoConfig()> é nulo")
chamada antiga: Assert.assertNotNull(map.getByMethodInfo(CachePointcut.getKey(m2, I2.class)).getCachedAnnoConfig())
nova chamada: assertNotNull(map.getByMethodInfo(CachePointcut.getKey(m2, I2.class)).getCachedAnnoConfig(), "Era esperado não nulo, mas " + result623 + " <map.getByMethodInfo(CachePointcut.getKey(m2, I2.class)).getCachedAnnoConfig()> é nulo")
chamada antiga: Assert.assertNotNull(map.getByMethodInfo(CachePointcut.getKey(m2, C2.class)).getCachedAnnoConfig())
nova chamada: assertNotNull(map.getByMethodInfo(CachePointcut.getKey(m2, C2.class)).getCachedAnnoConfig(), "Era esperado não nulo, mas " + result624 + " <map.getByMethodInfo(CachePointcut.getKey(m2, C2.class)).getCachedAnnoConfig()> é nulo")
chamada antiga: Assert.assertNotNull(map.getByMethodInfo(CachePointcut.getKey(m1, I4.class)).getCachedAnnoConfig())
nova chamada: assertNotNull(map.getByMethodInfo(CachePointcut.getKey(m1, I4.class)).getCachedAnnoConfig(), "Era esperado não nulo, mas " + result625 + " <map.getByMethodInfo(CachePointcut.getKey(m1, I4.class)).getCachedAnnoConfig()> é nulo")
chamada antiga: Assert.assertNotNull(map.getByMethodInfo(CachePointcut.getKey(m1, C4.class)).getCachedAnnoConfig())
nova chamada: assertNotNull(map.getByMethodInfo(CachePointcut.getKey(m1, C4.class)).getCachedAnnoConfig(), "Era esperado não nulo, mas " + result626 + " <map.getByMethodInfo(CachePointcut.getKey(m1, C4.class)).getCachedAnnoConfig()> é nulo")
chamada antiga: Assert.assertNotNull(map.getByMethodInfo(CachePointcut.getKey(m2, I4.class)).getCachedAnnoConfig())
nova chamada: assertNotNull(map.getByMethodInfo(CachePointcut.getKey(m2, I4.class)).getCachedAnnoConfig(), "Era esperado não nulo, mas " + result627 + " <map.getByMethodInfo(CachePointcut.getKey(m2, I4.class)).getCachedAnnoConfig()> é nulo")
chamada antiga: Assert.assertNotNull(map.getByMethodInfo(CachePointcut.getKey(m2, C4.class)).getCachedAnnoConfig())
nova chamada: assertNotNull(map.getByMethodInfo(CachePointcut.getKey(m2, C4.class)).getCachedAnnoConfig(), "Era esperado não nulo, mas " + result628 + " <map.getByMethodInfo(CachePointcut.getKey(m2, C4.class)).getCachedAnnoConfig()> é nulo")
chamada antiga: assertNull(cache.get("KEY"))
nova chamada: assertNull(cache.get("KEY"), "Era esperado nulo, mas " + result629 + " <cache.get('KEY')> não é nulo")
chamada antiga: assertNull(cache.get("KEY1"))
nova chamada: assertNull(cache.get("KEY1"), "Era esperado nulo, mas " + result630 + " <cache.get('KEY1')> não é nulo")
chamada antiga: assertNull(cache.get("KEY2"))
nova chamada: assertNull(cache.get("KEY2"), "Era esperado nulo, mas " + result631 + " <cache.get('KEY2')> não é nulo")
chamada antiga: assertNull(cache.get("KEY"))
nova chamada: assertNull(cache.get("KEY"), "Era esperado nulo, mas " + result632 + " <cache.get('KEY')> não é nulo")
chamada antiga: assertNotNull(cache.get("KEY"))
nova chamada: assertNotNull(cache.get("KEY"), "Era esperado não nulo, mas " + result633 + " <cache.get('KEY')> é nulo")
chamada antiga: assertNotNull(cache.get("KEY"))
nova chamada: assertNotNull(cache.get("KEY"), "Era esperado não nulo, mas " + result634 + " <cache.get('KEY')> é nulo")
chamada antiga: assertNotNull(cache.get("KEY"))
nova chamada: assertNotNull(cache.get("KEY"), "Era esperado não nulo, mas " + result635 + " <cache.get('KEY')> é nulo")
chamada antiga: Assert.assertNotSame(t1, t2)
nova chamada: assertNotSame(t1, t2, "Era esperado objetos diferentes, mas  t1 é igual a " + " t2")
chamada antiga: Assert.assertSame(CacheInvokeConfig.getNoCacheInvokeConfigInstance(), map.getByMethodInfo(CachePointcut.getKey(m1, I2.class)))
nova chamada: assertSame(CacheInvokeConfig.getNoCacheInvokeConfigInstance(), map.getByMethodInfo(CachePointcut.getKey(m1, I2.class)), "Era esperado objetos iguais, mas " + result636 + " <CacheInvokeConfig.getNoCacheInvokeConfigInstance()> é diferente de " + result637 + " <map.getByMethodInfo(CachePointcut.getKey(m1, I2.class))>")
chamada antiga: assertTrue(e.getTarget() instanceof SpelEvaluator)
nova chamada: assertTrue(e.getTarget() instanceof SpelEvaluator, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(e.getTarget() instanceof SpelEvaluator)
nova chamada: assertTrue(e.getTarget() instanceof SpelEvaluator, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(e.getTarget() instanceof MvelEvaluator)
nova chamada: assertTrue(e.getTarget() instanceof MvelEvaluator, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("a_bean", e.apply(root))
nova chamada: assertEquals("a_bean", e.apply(root), "Era esperado valores iguais, mas  'a_bean' é diferente de " + result638 + " <e.apply(root)>")
chamada antiga: assertEquals("123", e.apply(root))
nova chamada: assertEquals("123", e.apply(root), "Era esperado valores iguais, mas  '123' é diferente de " + result639 + " <e.apply(root)>")
chamada antiga: assertNull(e.apply(root))
nova chamada: assertNull(e.apply(root), "Era esperado nulo, mas " + result640 + " <e.apply(root)> não é nulo")
chamada antiga: assertEquals(3, is.length)
nova chamada: assertEquals(3, is.length, "Era esperado valores iguais, mas  3 é diferente de " + " is.length")
chamada antiga: assertNull(ClassUtil.getShortClassName(null))
nova chamada: assertNull(ClassUtil.getShortClassName(null), "Era esperado nulo, mas " + result641 + " <ClassUtil.getShortClassName(null)> não é nulo")
chamada antiga: assertEquals("j.l.String", ClassUtil.getShortClassName("java.lang.String"))
nova chamada: assertEquals("j.l.String", ClassUtil.getShortClassName("java.lang.String"), "Era esperado valores iguais, mas  'j.l.String' é diferente de " + result642 + " <ClassUtil.getShortClassName('java.lang.String')>")
chamada antiga: assertEquals("String", ClassUtil.getShortClassName("String"))
nova chamada: assertEquals("String", ClassUtil.getShortClassName("String"), "Era esperado valores iguais, mas  'String' é diferente de " + result643 + " <ClassUtil.getShortClassName('String')>")
chamada antiga: assertEquals(s1, s2)
nova chamada: assertEquals(s1, s2, "Era esperado valores iguais, mas  s1 é diferente de " + " s2")
chamada antiga: assertEquals(s1, s2)
nova chamada: assertEquals(s1, s2, "Era esperado valores iguais, mas  s1 é diferente de " + " s2")
chamada antiga: assertEquals(s1, s2)
nova chamada: assertEquals(s1, s2, "Era esperado valores iguais, mas  s1 é diferente de " + " s2")
chamada antiga: assertEquals(x1, x2)
nova chamada: assertEquals(x1, x2, "Era esperado valores iguais, mas  x1 é diferente de " + " x2")
chamada antiga: assertEquals(x1, x3)
nova chamada: assertEquals(x1, x3, "Era esperado valores iguais, mas  x1 é diferente de " + " x3")
chamada antiga: assertEquals(X1, X3)
nova chamada: assertEquals(X1, X3, "Era esperado valores iguais, mas  X1 é diferente de " + " X3")
chamada antiga: assertEquals(X2, X4)
nova chamada: assertEquals(X2, X4, "Era esperado valores iguais, mas  X2 é diferente de " + " X4")
chamada antiga: assertEquals(x1, x4)
nova chamada: assertEquals(x1, x4, "Era esperado valores iguais, mas  x1 é diferente de " + " x4")
chamada antiga: assertEquals(x2, x5)
nova chamada: assertEquals(x2, x5, "Era esperado valores iguais, mas  x2 é diferente de " + " x5")
chamada antiga: assertEquals(x3, x6)
nova chamada: assertEquals(x3, x6, "Era esperado valores iguais, mas  x3 é diferente de " + " x6")
chamada antiga: assertNull(x1)
nova chamada: assertNull(x1, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotNull(x2)
nova chamada: assertNotNull(x2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(x3)
nova chamada: assertNotNull(x3, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(x2, x3)
nova chamada: assertEquals(x2, x3, "Era esperado valores iguais, mas  x2 é diferente de " + " x3")
chamada antiga: assertNull(x1)
nova chamada: assertNull(x1, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(x2)
nova chamada: assertNull(x2, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(x3)
nova chamada: assertNull(x3, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotEquals(x1, x2)
nova chamada: assertNotEquals(x1, x2, "Era esperado valores diferentes, mas  x1 é igual a " + " x2")
chamada antiga: assertEquals(x1, x2)
nova chamada: assertEquals(x1, x2, "Era esperado valores iguais, mas  x1 é diferente de " + " x2")
chamada antiga: assertNotEquals(x1, x2)
nova chamada: assertNotEquals(x1, x2, "Era esperado valores diferentes, mas  x1 é igual a " + " x2")
chamada antiga: assertEquals(x2, x3)
nova chamada: assertEquals(x2, x3, "Era esperado valores iguais, mas  x2 é diferente de " + " x3")
chamada antiga: assertEquals(x1, x2)
nova chamada: assertEquals(x1, x2, "Era esperado valores iguais, mas  x1 é diferente de " + " x2")
chamada antiga: assertNotEquals(x1, x2)
nova chamada: assertNotEquals(x1, x2, "Era esperado valores diferentes, mas  x1 é igual a " + " x2")
chamada antiga: assertTrue(x1 != x2 && x1 != x3 && x2 != x3)
nova chamada: assertTrue(x1 != x2 && x1 != x3 && x2 != x3, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(x1 != x2 && x1 != x3 && x2 != x3)
nova chamada: assertTrue(x1 != x2 && x1 != x3 && x2 != x3, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(x1, x2)
nova chamada: assertEquals(x1, x2, "Era esperado valores iguais, mas  x1 é diferente de " + " x2")
chamada antiga: assertEquals(x1, x3)
nova chamada: assertEquals(x1, x3, "Era esperado valores iguais, mas  x1 é diferente de " + " x3")
chamada antiga: assertEquals(x1, x2)
nova chamada: assertEquals(x1, x2, "Era esperado valores iguais, mas  x1 é diferente de " + " x2")
chamada antiga: assertNotEquals(x1, x2)
nova chamada: assertNotEquals(x1, x2, "Era esperado valores diferentes, mas  x1 é igual a " + " x2")
chamada antiga: assertEquals(x1, x2)
nova chamada: assertEquals(x1, x2, "Era esperado valores iguais, mas  x1 é diferente de " + " x2")
chamada antiga: assertTrue(ExpressionUtil.evalCondition(context, cachedAnnoConfig))
nova chamada: assertTrue(ExpressionUtil.evalCondition(context, cachedAnnoConfig), "Era esperado verdadeiro, mas " + result644 + " <ExpressionUtil.evalCondition(context, cachedAnnoConfig)> é falso")
chamada antiga: assertTrue(ExpressionUtil.evalCondition(context, cachedAnnoConfig))
nova chamada: assertTrue(ExpressionUtil.evalCondition(context, cachedAnnoConfig), "Era esperado verdadeiro, mas " + result645 + " <ExpressionUtil.evalCondition(context, cachedAnnoConfig)> é falso")
chamada antiga: assertTrue(ExpressionUtil.evalCondition(context, cachedAnnoConfig))
nova chamada: assertTrue(ExpressionUtil.evalCondition(context, cachedAnnoConfig), "Era esperado verdadeiro, mas " + result646 + " <ExpressionUtil.evalCondition(context, cachedAnnoConfig)> é falso")
chamada antiga: assertTrue(ExpressionUtil.evalPostCondition(context, cachedAnnoConfig))
nova chamada: assertTrue(ExpressionUtil.evalPostCondition(context, cachedAnnoConfig), "Era esperado verdadeiro, mas " + result647 + " <ExpressionUtil.evalPostCondition(context, cachedAnnoConfig)> é falso")
chamada antiga: assertTrue(ExpressionUtil.evalPostCondition(context, cachedAnnoConfig))
nova chamada: assertTrue(ExpressionUtil.evalPostCondition(context, cachedAnnoConfig), "Era esperado verdadeiro, mas " + result648 + " <ExpressionUtil.evalPostCondition(context, cachedAnnoConfig)> é falso")
chamada antiga: assertTrue(ExpressionUtil.evalPostCondition(context, cachedAnnoConfig))
nova chamada: assertTrue(ExpressionUtil.evalPostCondition(context, cachedAnnoConfig), "Era esperado verdadeiro, mas " + result649 + " <ExpressionUtil.evalPostCondition(context, cachedAnnoConfig)> é falso")
chamada antiga: assertEquals(5678, ExpressionUtil.evalKey(context, cachedAnnoConfig))
nova chamada: assertEquals(5678, ExpressionUtil.evalKey(context, cachedAnnoConfig), "Era esperado valores iguais, mas  5678 é diferente de " + result650 + " <ExpressionUtil.evalKey(context, cachedAnnoConfig)>")
chamada antiga: assertNull(ExpressionUtil.evalKey(context, cachedAnnoConfig))
nova chamada: assertNull(ExpressionUtil.evalKey(context, cachedAnnoConfig), "Era esperado nulo, mas " + result651 + " <ExpressionUtil.evalKey(context, cachedAnnoConfig)> não é nulo")
chamada antiga: assertEquals(5678, ExpressionUtil.evalValue(context, updateAnnoConfig))
nova chamada: assertEquals(5678, ExpressionUtil.evalValue(context, updateAnnoConfig), "Era esperado valores iguais, mas  5678 é diferente de " + result652 + " <ExpressionUtil.evalValue(context, updateAnnoConfig)>")
chamada antiga: assertNull(ExpressionUtil.evalValue(context, updateAnnoConfig))
nova chamada: assertNull(ExpressionUtil.evalValue(context, updateAnnoConfig), "Era esperado nulo, mas " + result653 + " <ExpressionUtil.evalValue(context, updateAnnoConfig)> não é nulo")
chamada antiga: assertNotNull(cic.getCachedAnnoConfig())
nova chamada: assertNotNull(cic.getCachedAnnoConfig(), "Era esperado não nulo, mas " + result654 + " <cic.getCachedAnnoConfig()> é nulo")
chamada antiga: assertNull(cic.getCachedAnnoConfig().getRefreshPolicy())
nova chamada: assertNull(cic.getCachedAnnoConfig().getRefreshPolicy(), "Era esperado nulo, mas " + result655 + " <cic.getCachedAnnoConfig().getRefreshPolicy()> não é nulo")
chamada antiga: assertNotNull(cic.getCachedAnnoConfig())
nova chamada: assertNotNull(cic.getCachedAnnoConfig(), "Era esperado não nulo, mas " + result656 + " <cic.getCachedAnnoConfig()> é nulo")
chamada antiga: assertNotNull(cic.getCachedAnnoConfig().getRefreshPolicy())
nova chamada: assertNotNull(cic.getCachedAnnoConfig().getRefreshPolicy(), "Era esperado não nulo, mas " + result657 + " <cic.getCachedAnnoConfig().getRefreshPolicy()> é nulo")
chamada antiga: assertTrue(cic.isEnableCacheContext())
nova chamada: assertTrue(cic.isEnableCacheContext(), "Era esperado verdadeiro, mas " + result658 + " <cic.isEnableCacheContext()> é falso")
chamada antiga: assertNotNull(cic.getInvalidateAnnoConfigs())
nova chamada: assertNotNull(cic.getInvalidateAnnoConfigs(), "Era esperado não nulo, mas " + result659 + " <cic.getInvalidateAnnoConfigs()> é nulo")
chamada antiga: assertNotNull(cic.getUpdateAnnoConfig())
nova chamada: assertNotNull(cic.getUpdateAnnoConfig(), "Era esperado não nulo, mas " + result660 + " <cic.getUpdateAnnoConfig()> é nulo")
chamada antiga: assertNotNull(cic.getInvalidateAnnoConfigs())
nova chamada: assertNotNull(cic.getInvalidateAnnoConfigs(), "Era esperado não nulo, mas " + result661 + " <cic.getInvalidateAnnoConfigs()> é nulo")
chamada antiga: assertNotNull(cic.getUpdateAnnoConfig())
nova chamada: assertNotNull(cic.getUpdateAnnoConfig(), "Era esperado não nulo, mas " + result662 + " <cic.getUpdateAnnoConfig()> é nulo")
chamada antiga: assertNotNull(cic.getInvalidateAnnoConfigs())
nova chamada: assertNotNull(cic.getInvalidateAnnoConfigs(), "Era esperado não nulo, mas " + result663 + " <cic.getInvalidateAnnoConfigs()> é nulo")
chamada antiga: assertEquals(2, cic.getInvalidateAnnoConfigs().size())
nova chamada: assertEquals(2, cic.getInvalidateAnnoConfigs().size(), "Era esperado valores iguais, mas  2 é diferente de " + result664 + " <cic.getInvalidateAnnoConfigs().size()>")
chamada antiga: assertEquals("a_bean", e.apply(new RootObject()))
nova chamada: assertEquals("a_bean", e.apply(new RootObject()), "Era esperado valores iguais, mas  'a_bean' é diferente de " + result665 + " <e.apply(new RootObject())>")
chamada antiga: assertEquals(1000, cache.get("K1"))
nova chamada: assertEquals(1000, cache.get("K1"), "Era esperado valores iguais, mas  1000 é diferente de " + result666 + " <cache.get('K1')>")
chamada antiga: assertEquals(1000, cache.get("K1"))
nova chamada: assertEquals(1000, cache.get("K1"), "Era esperado valores iguais, mas  1000 é diferente de " + result667 + " <cache.get('K1')>")
chamada antiga: assertEquals("V", cache.get("K1"))
nova chamada: assertEquals("V", cache.get("K1"), "Era esperado valores iguais, mas  'V' é diferente de " + result668 + " <cache.get('K1')>")
chamada antiga: assertEquals("V", cache.get("K1"))
nova chamada: assertEquals("V", cache.get("K1"), "Era esperado valores iguais, mas  'V' é diferente de " + result669 + " <cache.get('K1')>")
chamada antiga: assertEquals("V", cache.get("K1"))
nova chamada: assertEquals("V", cache.get("K1"), "Era esperado valores iguais, mas  'V' é diferente de " + result670 + " <cache.get('K1')>")
chamada antiga: assertEquals("V", cache.get("K1"))
nova chamada: assertEquals("V", cache.get("K1"), "Era esperado valores iguais, mas  'V' é diferente de " + result671 + " <cache.get('K1')>")
chamada antiga: Assertions.assertEquals(2, cacheManager.getCacheBuilderTemplate().getCacheMonitorInstallers().size())
nova chamada: assertEquals(2, cacheManager.getCacheBuilderTemplate().getCacheMonitorInstallers().size(), "Era esperado valores iguais, mas  2 é diferente de " + result672 + " <cacheManager.getCacheBuilderTemplate().getCacheMonitorInstallers().size()>")
chamada antiga: Assertions.assertEquals(2, monitors.size())
nova chamada: assertEquals(2, monitors.size(), "Era esperado valores iguais, mas  2 é diferente de " + result673 + " <monitors.size()>")
chamada antiga: Assertions.assertEquals("K1", MockRemoteCacheBuilder.getLastPublishMessage().getKeys()[0])
nova chamada: assertEquals("K1", MockRemoteCacheBuilder.getLastPublishMessage().getKeys()[0], "Era esperado valores iguais, mas  'K1' é diferente de " + " MockRemoteCacheBuilder.getLastPublishMessage().getKeys()[0]")
chamada antiga: assertEquals(s1, s2)
nova chamada: assertEquals(s1, s2, "Era esperado valores iguais, mas  s1 é diferente de " + " s2")
chamada antiga: assertEquals(s1, s2)
nova chamada: assertEquals(s1, s2, "Era esperado valores iguais, mas  s1 é diferente de " + " s2")
chamada antiga: assertEquals(s1, s2)
nova chamada: assertEquals(s1, s2, "Era esperado valores iguais, mas  s1 é diferente de " + " s2")
chamada antiga: assertEquals(s1, s2)
nova chamada: assertEquals(s1, s2, "Era esperado valores iguais, mas  s1 é diferente de " + " s2")
chamada antiga: assertEquals("Foo", g.removeHiddenPackage(hs, "com.foo.Foo"))
nova chamada: assertEquals("Foo", g.removeHiddenPackage(hs, "com.foo.Foo"), "Era esperado valores iguais, mas  'Foo' é diferente de " + result674 + " <g.removeHiddenPackage(hs, 'com.foo.Foo')>")
chamada antiga: assertEquals("foo.Bar", g.removeHiddenPackage(hs, "com.bar.foo.Bar"))
nova chamada: assertEquals("foo.Bar", g.removeHiddenPackage(hs, "com.bar.foo.Bar"), "Era esperado valores iguais, mas  'foo.Bar' é diferente de " + result675 + " <g.removeHiddenPackage(hs, 'com.bar.foo.Bar')>")
chamada antiga: assertEquals("", g.removeHiddenPackage(hs, "com.foo"))
nova chamada: assertEquals("", g.removeHiddenPackage(hs, "com.foo"), "Era esperado valores iguais, mas  '' é diferente de " + result676 + " <g.removeHiddenPackage(hs, 'com.foo')>")
chamada antiga: assertEquals("com.bar.foo.Bar", g.removeHiddenPackage(null, "com.bar.foo.Bar"))
nova chamada: assertEquals("com.bar.foo.Bar", g.removeHiddenPackage(null, "com.bar.foo.Bar"), "Era esperado valores iguais, mas  'com.bar.foo.Bar' é diferente de " + result677 + " <g.removeHiddenPackage(null, 'com.bar.foo.Bar')>")
chamada antiga: assertEquals(null, g.removeHiddenPackage(hs, null))
nova chamada: assertEquals(null, g.removeHiddenPackage(hs, null), "Era esperado valores iguais, mas  null é diferente de " + result678 + " <g.removeHiddenPackage(hs, null)>")
chamada antiga: assertEquals(JavaValueEncoder.class, parser.parseEncoder("java").getClass())
nova chamada: assertEquals(JavaValueEncoder.class, parser.parseEncoder("java").getClass(), "Era esperado valores iguais, mas  JavaValueEncoder.class é diferente de " + result679 + " <parser.parseEncoder('java').getClass()>")
chamada antiga: assertSame(func, parser.parseEncoder("bean:myBean"))
nova chamada: assertSame(func, parser.parseEncoder("bean:myBean"), "Era esperado objetos iguais, mas  func é diferente de " + result680 + " <parser.parseEncoder('bean:myBean')>")
chamada antiga: assertSame(func, parser.parseEncoder("bean:sp"))
nova chamada: assertSame(func, parser.parseEncoder("bean:sp"), "Era esperado objetos iguais, mas  func é diferente de " + result681 + " <parser.parseEncoder('bean:sp')>")
chamada antiga: assertEquals(KryoValueDecoder.class, parser.parseDecoder("kryo").getClass())
nova chamada: assertEquals(KryoValueDecoder.class, parser.parseDecoder("kryo").getClass(), "Era esperado valores iguais, mas  KryoValueDecoder.class é diferente de " + result682 + " <parser.parseDecoder('kryo').getClass()>")
chamada antiga: assertSame(func, parser.parseDecoder("bean:myBean"))
nova chamada: assertSame(func, parser.parseDecoder("bean:myBean"), "Era esperado objetos iguais, mas  func é diferente de " + result683 + " <parser.parseDecoder('bean:myBean')>")
chamada antiga: assertSame(func, parser.parseDecoder("bean:sp"))
nova chamada: assertSame(func, parser.parseDecoder("bean:sp"), "Era esperado objetos iguais, mas  func é diferente de " + result684 + " <parser.parseDecoder('bean:sp')>")
chamada antiga: assertSame(FastjsonKeyConvertor.INSTANCE, parser.parseKeyConvertor("fastjson"))
nova chamada: assertSame(FastjsonKeyConvertor.INSTANCE, parser.parseKeyConvertor("fastjson"), "Era esperado objetos iguais, mas  FastjsonKeyConvertor.INSTANCE é diferente de " + result685 + " <parser.parseKeyConvertor('fastjson')>")
chamada antiga: assertSame(func, parser.parseKeyConvertor("bean:cvt"))
nova chamada: assertSame(func, parser.parseKeyConvertor("bean:cvt"), "Era esperado objetos iguais, mas  func é diferente de " + result686 + " <parser.parseKeyConvertor('bean:cvt')>")
chamada antiga: Assertions.assertTrue(MockRemoteCacheBuilder.isSubscribeStart())
nova chamada: assertTrue(MockRemoteCacheBuilder.isSubscribeStart(), "Era esperado verdadeiro, mas " + result687 + " <MockRemoteCacheBuilder.isSubscribeStart()> é falso")
chamada antiga: Assert.assertEquals(value, bean.count("K1"))
nova chamada: assertEquals(value, bean.count("K1"), "Era esperado valores iguais, mas  value é diferente de " + result688 + " <bean.count('K1')>")
chamada antiga: Assert.assertNotEquals(value, bean.count("K1"))
nova chamada: assertNotEquals(value, bean.count("K1"), "Era esperado valores diferentes, mas  value é igual a " + result689 + " <bean.count('K1')>")
chamada antiga: Assert.assertNotNull(cm.getCache("C1"))
nova chamada: assertNotNull(cm.getCache("C1"), "Era esperado não nulo, mas " + result690 + " <cm.getCache('C1')> é nulo")
chamada antiga: Assert.assertNotNull(cm.getCache("C2"))
nova chamada: assertNotNull(cm.getCache("C2"), "Era esperado não nulo, mas " + result691 + " <cm.getCache('C2')> é nulo")
chamada antiga: Assert.assertTrue(CacheContext.isEnabled())
nova chamada: assertTrue(CacheContext.isEnabled(), "Era esperado verdadeiro, mas " + result692 + " <CacheContext.isEnabled()> é falso")
chamada antiga: Assert.assertEquals(value, bean.count("K1"))
nova chamada: assertEquals(value, bean.count("K1"), "Era esperado valores iguais, mas  value é diferente de " + result693 + " <bean.count('K1')>")
chamada antiga: Assert.assertNotEquals(value, bean.count("K1"))
nova chamada: assertNotEquals(value, bean.count("K1"), "Era esperado valores diferentes, mas  value é igual a " + result694 + " <bean.count('K1')>")
chamada antiga: Assert.assertEquals(CacheMessage.TYPE_PUT, MockRemoteCacheBuilder.getLastPublishMessage().getType())
nova chamada: assertEquals(CacheMessage.TYPE_PUT, MockRemoteCacheBuilder.getLastPublishMessage().getType(), "Era esperado valores iguais, mas  CacheMessage.TYPE_PUT é diferente de " + result695 + " <MockRemoteCacheBuilder.getLastPublishMessage().getType()>")
chamada antiga: Assert.assertEquals("K1", MockRemoteCacheBuilder.getLastPublishMessage().getKeys()[0])
nova chamada: assertEquals("K1", MockRemoteCacheBuilder.getLastPublishMessage().getKeys()[0], "Era esperado valores iguais, mas  'K1' é diferente de " + " MockRemoteCacheBuilder.getLastPublishMessage().getKeys()[0]")
chamada antiga: Assert.assertEquals(CacheMessage.TYPE_PUT_ALL, MockRemoteCacheBuilder.getLastPublishMessage().getType())
nova chamada: assertEquals(CacheMessage.TYPE_PUT_ALL, MockRemoteCacheBuilder.getLastPublishMessage().getType(), "Era esperado valores iguais, mas  CacheMessage.TYPE_PUT_ALL é diferente de " + result696 + " <MockRemoteCacheBuilder.getLastPublishMessage().getType()>")
chamada antiga: Assert.assertEquals("K1", MockRemoteCacheBuilder.getLastPublishMessage().getKeys()[0])
nova chamada: assertEquals("K1", MockRemoteCacheBuilder.getLastPublishMessage().getKeys()[0], "Era esperado valores iguais, mas  'K1' é diferente de " + " MockRemoteCacheBuilder.getLastPublishMessage().getKeys()[0]")
chamada antiga: Assert.assertEquals("K2", MockRemoteCacheBuilder.getLastPublishMessage().getKeys()[1])
nova chamada: assertEquals("K2", MockRemoteCacheBuilder.getLastPublishMessage().getKeys()[1], "Era esperado valores iguais, mas  'K2' é diferente de " + " MockRemoteCacheBuilder.getLastPublishMessage().getKeys()[1]")
chamada antiga: Assert.assertEquals(CacheMessage.TYPE_REMOVE, MockRemoteCacheBuilder.getLastPublishMessage().getType())
nova chamada: assertEquals(CacheMessage.TYPE_REMOVE, MockRemoteCacheBuilder.getLastPublishMessage().getType(), "Era esperado valores iguais, mas  CacheMessage.TYPE_REMOVE é diferente de " + result697 + " <MockRemoteCacheBuilder.getLastPublishMessage().getType()>")
chamada antiga: Assert.assertEquals("K3", MockRemoteCacheBuilder.getLastPublishMessage().getKeys()[0])
nova chamada: assertEquals("K3", MockRemoteCacheBuilder.getLastPublishMessage().getKeys()[0], "Era esperado valores iguais, mas  'K3' é diferente de " + " MockRemoteCacheBuilder.getLastPublishMessage().getKeys()[0]")
chamada antiga: Assert.assertEquals(CacheMessage.TYPE_REMOVE_ALL, MockRemoteCacheBuilder.getLastPublishMessage().getType())
nova chamada: assertEquals(CacheMessage.TYPE_REMOVE_ALL, MockRemoteCacheBuilder.getLastPublishMessage().getType(), "Era esperado valores iguais, mas  CacheMessage.TYPE_REMOVE_ALL é diferente de " + result698 + " <MockRemoteCacheBuilder.getLastPublishMessage().getType()>")
chamada antiga: Assert.assertEquals("K1", MockRemoteCacheBuilder.getLastPublishMessage().getKeys()[0])
nova chamada: assertEquals("K1", MockRemoteCacheBuilder.getLastPublishMessage().getKeys()[0], "Era esperado valores iguais, mas  'K1' é diferente de " + " MockRemoteCacheBuilder.getLastPublishMessage().getKeys()[0]")
chamada antiga: Assert.assertEquals("K3", MockRemoteCacheBuilder.getLastPublishMessage().getKeys()[1])
nova chamada: assertEquals("K3", MockRemoteCacheBuilder.getLastPublishMessage().getKeys()[1], "Era esperado valores iguais, mas  'K3' é diferente de " + " MockRemoteCacheBuilder.getLastPublishMessage().getKeys()[1]")
chamada antiga: assertEquals(0, DefaultEncoderParser.parseQueryParameters(null).size())
nova chamada: assertEquals(0, DefaultEncoderParser.parseQueryParameters(null).size(), "Era esperado valores iguais, mas  0 é diferente de " + result699 + " <DefaultEncoderParser.parseQueryParameters(null).size()>")
chamada antiga: assertEquals("b", DefaultEncoderParser.parseQueryParameters("a=b").get("a"))
nova chamada: assertEquals("b", DefaultEncoderParser.parseQueryParameters("a=b").get("a"), "Era esperado valores iguais, mas  'b' é diferente de " + result700 + " <DefaultEncoderParser.parseQueryParameters('a=b').get('a')>")
chamada antiga: assertEquals("b", m.get("a"))
nova chamada: assertEquals("b", m.get("a"), "Era esperado valores iguais, mas  'b' é diferente de " + result701 + " <m.get('a')>")
chamada antiga: assertEquals("d", m.get("c"))
nova chamada: assertEquals("d", m.get("c"), "Era esperado valores iguais, mas  'd' é diferente de " + result702 + " <m.get('c')>")
chamada antiga: assertEquals(KryoValueEncoder.class, encoder.getClass())
nova chamada: assertEquals(KryoValueEncoder.class, encoder.getClass(), "Era esperado valores iguais, mas  KryoValueEncoder.class é diferente de " + result703 + " <encoder.getClass()>")
chamada antiga: assertTrue(encoder.isUseIdentityNumber())
nova chamada: assertTrue(encoder.isUseIdentityNumber(), "Era esperado verdadeiro, mas " + result704 + " <encoder.isUseIdentityNumber()> é falso")
chamada antiga: assertEquals(JavaValueEncoder.class, encoder.getClass())
nova chamada: assertEquals(JavaValueEncoder.class, encoder.getClass(), "Era esperado valores iguais, mas  JavaValueEncoder.class é diferente de " + result705 + " <encoder.getClass()>")
chamada antiga: assertEquals(KryoValueDecoder.class, decoder.getClass())
nova chamada: assertEquals(KryoValueDecoder.class, decoder.getClass(), "Era esperado valores iguais, mas  KryoValueDecoder.class é diferente de " + result706 + " <decoder.getClass()>")
chamada antiga: assertTrue(decoder.isUseIdentityNumber())
nova chamada: assertTrue(decoder.isUseIdentityNumber(), "Era esperado verdadeiro, mas " + result707 + " <decoder.isUseIdentityNumber()> é falso")
chamada antiga: assertEquals(JavaValueDecoder.class, decoder.getClass())
nova chamada: assertEquals(JavaValueDecoder.class, decoder.getClass(), "Era esperado valores iguais, mas  JavaValueDecoder.class é diferente de " + result708 + " <decoder.getClass()>")
Total asserts: 1049
Asserts sem descrição: 1018
Asserts com descrição: 31
Assertion Roulette: 957

Após do refactor: 
Total asserts: 1049
Asserts sem descrição: 717
Asserts com descrição: 332
Assertion Roulette: 700
