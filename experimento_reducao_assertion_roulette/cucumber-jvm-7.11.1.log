Antes do refactor: 


Projeto: /home/vitor-otto/opensource/cucumber-jvm-7.11.1

Total asserts: 2165
Asserts sem descrição: 1769
Asserts com descrição: 354
Assertion Roulette: 1084

Após o refactor: 


Projeto: /home/vitor-otto/opensource/cucumber-jvm-7.11.1

chamada antiga: assertEquals(n, belly.getCukes())
nova chamada: assertEquals(n, belly.getCukes(), "Era esperado valores iguais, mas  n é diferente de " + result0 + " <belly.getCukes()>")
chamada antiga: assertDoesNotThrow(factory::stop)
nova chamada: assertDoesNotThrow(factory::stop, "Era esperado que nenhuma exceção fosse lançada, mas  factory::stop foi lançada")
chamada antiga: assertDoesNotThrow(factory::start)
nova chamada: assertDoesNotThrow(factory::start, "Era esperado que nenhuma exceção fosse lançada, mas  factory::start foi lançada")
chamada antiga: assertDoesNotThrow(factory::stop)
nova chamada: assertDoesNotThrow(factory::stop, "Era esperado que nenhuma exceção fosse lançada, mas  factory::stop foi lançada")
chamada antiga: assertAll(() -> assertThat(bean.getClass(), not(is(ApplicationScopedBean.class))), () -> assertThat(bean.getClass().getSuperclass(), is(ApplicationScopedBean.class)))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat(bean.getClass(), not(is(ApplicationScopedBean.class))), () -> assertThat(bean.getClass().getSuperclass(), is(ApplicationScopedBean.class)))
chamada antiga: assertTrue(hasTheSameRowsAs(table).inOrder().matches(identical))
nova chamada: assertTrue(hasTheSameRowsAs(table).inOrder().matches(identical), "Era esperado verdadeiro, mas " + result1 + " <hasTheSameRowsAs(table).inOrder().matches(identical)> é falso")
chamada antiga: assertFalse(hasTheSameRowsAs(table).inOrder().matches(shuffled))
nova chamada: assertFalse(hasTheSameRowsAs(table).inOrder().matches(shuffled), "Era esperado falso, mas " + result2 + " <hasTheSameRowsAs(table).inOrder().matches(shuffled)> é verdadeiro ")
chamada antiga: assertFalse(hasTheSameRowsAs(table).inOrder().matches(different))
nova chamada: assertFalse(hasTheSameRowsAs(table).inOrder().matches(different), "Era esperado falso, mas " + result3 + " <hasTheSameRowsAs(table).inOrder().matches(different)> é verdadeiro ")
chamada antiga: assertTrue(hasTheSameRowsAs(table).matches(identical))
nova chamada: assertTrue(hasTheSameRowsAs(table).matches(identical), "Era esperado verdadeiro, mas " + result4 + " <hasTheSameRowsAs(table).matches(identical)> é falso")
chamada antiga: assertTrue(hasTheSameRowsAs(table).matches(shuffled))
nova chamada: assertTrue(hasTheSameRowsAs(table).matches(shuffled), "Era esperado verdadeiro, mas " + result5 + " <hasTheSameRowsAs(table).matches(shuffled)> é falso")
chamada antiga: assertFalse(hasTheSameRowsAs(table).matches(different))
nova chamada: assertFalse(hasTheSameRowsAs(table).matches(different), "Era esperado falso, mas " + result6 + " <hasTheSameRowsAs(table).matches(different)> é verdadeiro ")
chamada antiga: assertEquals(Optional.of(asList(outline, examplesA, example1)), pathTo)
nova chamada: assertEquals(Optional.of(asList(outline, examplesA, example1)), pathTo, "Era esperado valores iguais, mas " + result7 + " <Optional.of(asList(outline, examplesA, example1))> é diferente de " + " pathTo")
chamada antiga: assertEquals(Optional.of(asList(outline, examplesA, example2)), pathTo)
nova chamada: assertEquals(Optional.of(asList(outline, examplesA, example2)), pathTo, "Era esperado valores iguais, mas " + result8 + " <Optional.of(asList(outline, examplesA, example2))> é diferente de " + " pathTo")
chamada antiga: assertEquals(Optional.of(asList(outline, examplesB, example3)), pathTo)
nova chamada: assertEquals(Optional.of(asList(outline, examplesB, example3)), pathTo, "Era esperado valores iguais, mas " + result9 + " <Optional.of(asList(outline, examplesB, example3))> é diferente de " + " pathTo")
chamada antiga: assertEquals(Optional.of(asList(outline, examplesB, example4)), pathTo)
nova chamada: assertEquals(Optional.of(asList(outline, examplesB, example4)), pathTo, "Era esperado valores iguais, mas " + result10 + " <Optional.of(asList(outline, examplesB, example4))> é diferente de " + " pathTo")
chamada antiga: assertEquals(Optional.of(asList(outline, examplesA)), pathTo)
nova chamada: assertEquals(Optional.of(asList(outline, examplesA)), pathTo, "Era esperado valores iguais, mas " + result11 + " <Optional.of(asList(outline, examplesA))> é diferente de " + " pathTo")
chamada antiga: assertEquals(Optional.of(asList(emptyOutline, emptyExamplesA)), pathTo)
nova chamada: assertEquals(Optional.of(asList(emptyOutline, emptyExamplesA)), pathTo, "Era esperado valores iguais, mas " + result12 + " <Optional.of(asList(emptyOutline, emptyExamplesA))> é diferente de " + " pathTo")
chamada antiga: assertEquals(Optional.of(asList(outline, examplesB)), pathTo)
nova chamada: assertEquals(Optional.of(asList(outline, examplesB)), pathTo, "Era esperado valores iguais, mas " + result13 + " <Optional.of(asList(outline, examplesB))> é diferente de " + " pathTo")
chamada antiga: assertEquals(Optional.of(asList(emptyOutline, emptyExamplesB)), pathTo)
nova chamada: assertEquals(Optional.of(asList(emptyOutline, emptyExamplesB)), pathTo, "Era esperado valores iguais, mas " + result14 + " <Optional.of(asList(emptyOutline, emptyExamplesB))> é diferente de " + " pathTo")
chamada antiga: assertEquals(Optional.of(asList(outline)), pathTo)
nova chamada: assertEquals(Optional.of(asList(outline)), pathTo, "Era esperado valores iguais, mas " + result15 + " <Optional.of(asList(outline))> é diferente de " + " pathTo")
chamada antiga: assertEquals(Optional.of(asList(emptyOutline)), pathTo)
nova chamada: assertEquals(Optional.of(asList(emptyOutline)), pathTo, "Era esperado valores iguais, mas " + result16 + " <Optional.of(asList(emptyOutline))> é diferente de " + " pathTo")
chamada antiga: assertEquals(Optional.empty(), pathTo)
nova chamada: assertEquals(Optional.empty(), pathTo, "Era esperado valores iguais, mas " + result17 + " <Optional.empty()> é diferente de " + " pathTo")
chamada antiga: assertEquals(Optional.empty(), pathTo)
nova chamada: assertEquals(Optional.empty(), pathTo, "Era esperado valores iguais, mas " + result18 + " <Optional.empty()> é diferente de " + " pathTo")
chamada antiga: assertEquals(Optional.of(asList(example1)), pathTo)
nova chamada: assertEquals(Optional.of(asList(example1)), pathTo, "Era esperado valores iguais, mas " + result19 + " <Optional.of(asList(example1))> é diferente de " + " pathTo")
chamada antiga: assertEquals(Optional.empty(), pathTo)
nova chamada: assertEquals(Optional.empty(), pathTo, "Era esperado valores iguais, mas " + result20 + " <Optional.empty()> é diferente de " + " pathTo")
chamada antiga: assertNotNull(events.get(0).getUndefinedParameterType())
nova chamada: assertNotNull(events.get(0).getUndefinedParameterType(), "Era esperado não nulo, mas " + result21 + " <events.get(0).getUndefinedParameterType()> é nulo")
chamada antiga: assertEquals(parameterInfos.size(), args.length)
nova chamada: assertEquals(parameterInfos.size(), args.length, "Era esperado valores iguais, mas " + result22 + " <parameterInfos.size()> é diferente de " + " args.length")
chamada antiga: assertAll(() -> assertThat(uri.getScheme(), is(equalTo("classpath"))), () -> assertThat(uri.getSchemeSpecificPart(), is(equalTo("/path/to/file.feature"))))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat(uri.getScheme(), is(equalTo("classpath"))), () -> assertThat(uri.getSchemeSpecificPart(), is(equalTo("/path/to/file.feature"))))
chamada antiga: assertAll(() -> assertThat(uri.getScheme(), is("classpath")), () -> assertThat(uri.getSchemeSpecificPart(), is("/")))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat(uri.getScheme(), is("classpath")), () -> assertThat(uri.getSchemeSpecificPart(), is("/")))
chamada antiga: assertAll(() -> assertThat(uri.getScheme(), is("classpath")), () -> assertThat(uri.getSchemeSpecificPart(), is("/")))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat(uri.getScheme(), is("classpath")), () -> assertThat(uri.getSchemeSpecificPart(), is("/")))
chamada antiga: assertAll(() -> assertThat(uri.getScheme(), is("classpath")), () -> assertThat(uri.getSchemeSpecificPart(), is("/path/to/file.feature")))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat(uri.getScheme(), is("classpath")), () -> assertThat(uri.getSchemeSpecificPart(), is("/path/to/file.feature")))
chamada antiga: assertAll(() -> assertThat(uri.getScheme(), is("classpath")), () -> assertThat(uri.getSchemeSpecificPart(), is("/path/to")))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat(uri.getScheme(), is("classpath")), () -> assertThat(uri.getSchemeSpecificPart(), is("/path/to")))
chamada antiga: assertAll(() -> assertThat(uri.getScheme(), is("file")), () -> assertThat(uri.getSchemeSpecificPart(), is("/path/to/file.feature")))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat(uri.getScheme(), is("file")), () -> assertThat(uri.getSchemeSpecificPart(), is("/path/to/file.feature")))
chamada antiga: assertAll(() -> assertThat(uri.getScheme(), is("file")), () -> assertThat(uri.getSchemeSpecificPart(), is("/path/to")))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat(uri.getScheme(), is("file")), () -> assertThat(uri.getSchemeSpecificPart(), is("/path/to")))
chamada antiga: assertAll(() -> assertThat(uri.getScheme(), is("file")), () -> assertThat(uri.getSchemeSpecificPart(), endsWith("path/to/file.feature")))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat(uri.getScheme(), is("file")), () -> assertThat(uri.getSchemeSpecificPart(), endsWith("path/to/file.feature")))
chamada antiga: assertAll(() -> assertThat(uri.getScheme(), is("file")), () -> assertThat(uri.getSchemeSpecificPart(), endsWith("path/to/file.feature")))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat(uri.getScheme(), is("file")), () -> assertThat(uri.getSchemeSpecificPart(), endsWith("path/to/file.feature")))
chamada antiga: assertAll(() -> assertThat(uri.getScheme(), is("file")), () -> assertThat(uri.getSchemeSpecificPart(), endsWith("path/to/file.feature")))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat(uri.getScheme(), is("file")), () -> assertThat(uri.getSchemeSpecificPart(), endsWith("path/to/file.feature")))
chamada antiga: assertAll(() -> assertThat(uri.getScheme(), is(is("file"))), () -> assertThat(uri.getSchemeSpecificPart(), is("/C:/path/to/file.feature")))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat(uri.getScheme(), is(is("file"))), () -> assertThat(uri.getSchemeSpecificPart(), is("/C:/path/to/file.feature")))
chamada antiga: assertAll(() -> assertThat(uri.getScheme(), is(is("file"))), () -> assertThat(uri.getSchemeSpecificPart(), endsWith("path/to the/file.feature")))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat(uri.getScheme(), is(is("file"))), () -> assertThat(uri.getSchemeSpecificPart(), endsWith("path/to the/file.feature")))
chamada antiga: assertAll(() -> assertThat(uri.getScheme(), is("file")), () -> assertThat(uri.getSchemeSpecificPart(), is("/C:/path/to/file.feature")))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat(uri.getScheme(), is("file")), () -> assertThat(uri.getSchemeSpecificPart(), is("/C:/path/to/file.feature")))
chamada antiga: assertAll(() -> assertThat(uri.getScheme(), is("classpath")), () -> assertThat(uri.getSchemeSpecificPart(), is("/")))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat(uri.getScheme(), is("classpath")), () -> assertThat(uri.getSchemeSpecificPart(), is("/")))
chamada antiga: assertAll(() -> assertThat(uri.getScheme(), is("classpath")), () -> assertThat(uri.getSchemeSpecificPart(), is("/")))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat(uri.getScheme(), is("classpath")), () -> assertThat(uri.getSchemeSpecificPart(), is("/")))
chamada antiga: assertAll(() -> assertThat(uri.getScheme(), is("classpath")), () -> assertThat(uri.getSchemeSpecificPart(), is("/")))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat(uri.getScheme(), is("classpath")), () -> assertThat(uri.getSchemeSpecificPart(), is("/")))
chamada antiga: assertAll(() -> assertThat(uri.getScheme(), is("classpath")), () -> assertThat(uri.getSchemeSpecificPart(), is("com/example/app")))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat(uri.getScheme(), is("classpath")), () -> assertThat(uri.getSchemeSpecificPart(), is("com/example/app")))
chamada antiga: assertAll(() -> assertThat(uri.getScheme(), is("classpath")), () -> assertThat(uri.getSchemeSpecificPart(), is("/com/example/app")))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat(uri.getScheme(), is("classpath")), () -> assertThat(uri.getSchemeSpecificPart(), is("/com/example/app")))
chamada antiga: assertAll(() -> assertThat(uri.getScheme(), is("classpath")), () -> assertThat(uri.getSchemeSpecificPart(), is("/com/example/app")))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat(uri.getScheme(), is("classpath")), () -> assertThat(uri.getSchemeSpecificPart(), is("/com/example/app")))
chamada antiga: assertAll(() -> assertThat(uri.getScheme(), is("classpath")), () -> assertThat(uri.getSchemeSpecificPart(), is("/com/example/app")))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat(uri.getScheme(), is("classpath")), () -> assertThat(uri.getSchemeSpecificPart(), is("/com/example/app")))
chamada antiga: assertAll(() -> assertThat(uri.getScheme(), is("classpath")), () -> assertThat(uri.getSchemeSpecificPart(), is(equalTo("/com/example/app"))))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat(uri.getScheme(), is("classpath")), () -> assertThat(uri.getSchemeSpecificPart(), is(equalTo("/com/example/app"))))
chamada antiga: assertAll(() -> assertThat(featureWithLines.uri(), is(URI.create("classpath:example.feature"))), () -> assertThat(featureWithLines.lines(), emptyCollectionOf(Integer.class)))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat(featureWithLines.uri(), is(URI.create("classpath:example.feature"))), () -> assertThat(featureWithLines.lines(), emptyCollectionOf(Integer.class)))
chamada antiga: assertAll(() -> assertThat(featureWithLines.uri(), is(URI.create("classpath:example.feature"))), () -> assertThat(featureWithLines.lines(), contains(999)))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat(featureWithLines.uri(), is(URI.create("classpath:example.feature"))), () -> assertThat(featureWithLines.lines(), contains(999)))
chamada antiga: assertAll(() -> assertThat(featureWithLines.uri(), is(URI.create("classpath:example.feature"))), () -> assertThat(featureWithLines.lines(), contains(999, 2000)))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat(featureWithLines.uri(), is(URI.create("classpath:example.feature"))), () -> assertThat(featureWithLines.lines(), contains(999, 2000)))
chamada antiga: assertNotNull(optionsBuilder)
nova chamada: assertNotNull(optionsBuilder, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(options)
nova chamada: assertNotNull(options, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertAll(() -> assertThat(options.getFeaturePaths(), contains(new File("somewhere_else.feature").toURI())), () -> assertThat(options.getLineFilters(), hasEntry(new File("somewhere_else.feature").toURI(), singleton(3))))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat(options.getFeaturePaths(), contains(new File("somewhere_else.feature").toURI())), () -> assertThat(options.getLineFilters(), hasEntry(new File("somewhere_else.feature").toURI(), singleton(3))))
chamada antiga: assertAll(() -> assertThat(logRecordListener.getLogRecords().get(0).getMessage(), is("Use '--no-summary' instead of '-p/--plugin null_summary'. '-p/--plugin null_summary' will be removed in a future release.")), () -> assertThat(plugins.getPlugins(), not(hasItem(plugin("io.cucumber.core.plugin.DefaultSummaryPrinter")))))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat(logRecordListener.getLogRecords().get(0).getMessage(), is("Use '--no-summary' instead of '-p/--plugin null_summary'. '-p/--plugin null_summary' will be removed in a future release.")), () -> assertThat(plugins.getPlugins(), not(hasItem(plugin("io.cucumber.core.plugin.DefaultSummaryPrinter")))))
chamada antiga: assertAll(() -> assertThat(plugins.getPlugins(), not(hasItem(plugin("io.cucumber.core.plugin.DefaultSummaryPrinter")))))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat(plugins.getPlugins(), not(hasItem(plugin("io.cucumber.core.plugin.DefaultSummaryPrinter")))))
chamada antiga: assertAll(() -> assertThat(actual, contains("@should_not_be_clobbered")), () -> assertThat(options.getLineFilters(), hasEntry(new File("this/should/be/rerun.feature").toURI(), singleton(12))))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat(actual, contains("@should_not_be_clobbered")), () -> assertThat(options.getLineFilters(), hasEntry(new File("this/should/be/rerun.feature").toURI(), singleton(12))))
chamada antiga: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat(plugins.getPlugins(), not(hasItem(plugin("io.cucumber.core.plugin.DefaultSummaryPrinter")))))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", "Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat(plugins.getPlugins(), not(hasItem(plugin("io.cucumber.core.plugin.DefaultSummaryPrinter")))))
chamada antiga: assertAll(() -> assertThat(options.getFeaturePaths(), contains(URI.create("classpath:com/example.feature"))), () -> assertThat(tagExpressions, contains("@example")))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat(options.getFeaturePaths(), contains(URI.create("classpath:com/example.feature"))), () -> assertThat(tagExpressions, contains("@example")))
chamada antiga: assertAll(() -> assertThat(options.getFeaturePaths(), contains(URI.create("classpath:path/to.feature"))), () -> assertThat(options.getTagExpressions(), not(contains("@example"))))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat(options.getFeaturePaths(), contains(URI.create("classpath:path/to.feature"))), () -> assertThat(options.getTagExpressions(), not(contains("@example"))))
chamada antiga: assertAll(() -> assertThat(runtimeOptions.getFeaturePaths(), hasSize(0)), () -> assertThat(runtimeOptions.getLineFilters(), equalTo(emptyMap())))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat(runtimeOptions.getFeaturePaths(), hasSize(0)), () -> assertThat(runtimeOptions.getLineFilters(), equalTo(emptyMap())))
chamada antiga: assertAll(() -> assertThat(runtimeOptions.getFeaturePaths(), hasSize(0)), () -> assertThat(runtimeOptions.getLineFilters(), equalTo(emptyMap())))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat(runtimeOptions.getFeaturePaths(), hasSize(0)), () -> assertThat(runtimeOptions.getLineFilters(), equalTo(emptyMap())))
chamada antiga: assertAll(() -> assertThat(runtimeOptions.getFeaturePaths(), hasSize(0)), () -> assertThat(runtimeOptions.getLineFilters(), equalTo(emptyMap())))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat(runtimeOptions.getFeaturePaths(), hasSize(0)), () -> assertThat(runtimeOptions.getLineFilters(), equalTo(emptyMap())))
chamada antiga: assertAll(() -> assertThat(runtimeOptions.getFeaturePaths(), hasSize(0)), () -> assertThat(runtimeOptions.getLineFilters(), equalTo(emptyMap())))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat(runtimeOptions.getFeaturePaths(), hasSize(0)), () -> assertThat(runtimeOptions.getLineFilters(), equalTo(emptyMap())))
chamada antiga: assertAll(() -> assertThat(runtimeOptions.getFeaturePaths(), contains(URI.create("file:/home/users/mp/My%20Documents/tests/bar.feature"))), () -> assertThat(runtimeOptions.getLineFilters(), hasEntry(URI.create("file:/home/users/mp/My%20Documents/tests/bar.feature"), singleton(2))))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat(runtimeOptions.getFeaturePaths(), contains(URI.create("file:/home/users/mp/My%20Documents/tests/bar.feature"))), () -> assertThat(runtimeOptions.getLineFilters(), hasEntry(URI.create("file:/home/users/mp/My%20Documents/tests/bar.feature"), singleton(2))))
chamada antiga: assertAll(() -> assertThat(options.getFeaturePaths(), contains(new File("path/bar.feature").toURI())), () -> assertThat(options.getLineFilters(), hasEntry(new File("path/bar.feature").toURI(), singleton(2))))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat(options.getFeaturePaths(), contains(new File("path/bar.feature").toURI())), () -> assertThat(options.getLineFilters(), hasEntry(new File("path/bar.feature").toURI(), singleton(2))))
chamada antiga: assertEquals(prettyPluginA, prettyPluginB)
nova chamada: assertEquals(prettyPluginA, prettyPluginB, "Era esperado valores iguais, mas  prettyPluginA é diferente de " + " prettyPluginB")
chamada antiga: assertEquals(prettyPluginA.hashCode(), prettyPluginB.hashCode())
nova chamada: assertEquals(prettyPluginA.hashCode(), prettyPluginB.hashCode(), "Era esperado valores iguais, mas " + result23 + " <prettyPluginA.hashCode()> é diferente de " + result24 + " <prettyPluginB.hashCode()>")
chamada antiga: assertEquals(htmlPluginA, htmlPluginB)
nova chamada: assertEquals(htmlPluginA, htmlPluginB, "Era esperado valores iguais, mas  htmlPluginA é diferente de " + " htmlPluginB")
chamada antiga: assertEquals(htmlPluginA.hashCode(), htmlPluginB.hashCode())
nova chamada: assertEquals(htmlPluginA.hashCode(), htmlPluginB.hashCode(), "Era esperado valores iguais, mas " + result25 + " <htmlPluginA.hashCode()> é diferente de " + result26 + " <htmlPluginB.hashCode()>")
chamada antiga: assertNotEquals(prettyPluginA, htmlPluginA)
nova chamada: assertNotEquals(prettyPluginA, htmlPluginA, "Era esperado valores diferentes, mas  prettyPluginA é igual a " + " htmlPluginA")
chamada antiga: assertNotEquals(prettyPluginA.hashCode(), htmlPluginA.hashCode())
nova chamada: assertNotEquals(prettyPluginA.hashCode(), htmlPluginA.hashCode(), "Era esperado valores diferentes, mas " + result27 + " <prettyPluginA.hashCode()> é igual a " + result28 + " <htmlPluginA.hashCode()>")
chamada antiga: assertAll(() -> assertThat(plugins.getPlugins(), is(empty())))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat(plugins.getPlugins(), is(empty())))
chamada antiga: assertAll(() -> assertThat(getRegexpPattern(iterator.next()), is(equalTo("name1"))), () -> assertThat(getRegexpPattern(iterator.next()), is(equalTo("name2"))))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat(getRegexpPattern(iterator.next()), is(equalTo("name1"))), () -> assertThat(getRegexpPattern(iterator.next()), is(equalTo("name2"))))
chamada antiga: assertAll(() -> assertThat(actual.getMessage(), is("Invalid tag expression at 'io.cucumber.core.options.CucumberOptionsAnnotationParserTest$ClassWithInvalidTagExpression'")), () -> assertThat(actual.getCause(), isA(TagExpressionException.class)))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat(actual.getMessage(), is("Invalid tag expression at 'io.cucumber.core.options.CucumberOptionsAnnotationParserTest$ClassWithInvalidTagExpression'")), () -> assertThat(actual.getCause(), isA(TagExpressionException.class)))
chamada antiga: assertAll(() -> assertThat(actual.getMessage(), is("Invalid tag expression at 'io.cucumber.core.options.CucumberOptionsAnnotationParserTest$ClassWithInvalidTagExpression'")), () -> assertThat(actual.getCause(), isA(TagExpressionException.class)))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat(actual.getMessage(), is("Invalid tag expression at 'io.cucumber.core.options.CucumberOptionsAnnotationParserTest$ClassWithInvalidTagExpression'")), () -> assertThat(actual.getCause(), isA(TagExpressionException.class)))
chamada antiga: assertAll(() -> assertPluginExists(pluginList, HtmlFormatter.class.getName()), () -> assertPluginExists(pluginList, PrettyFormatter.class.getName()))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertPluginExists(pluginList, HtmlFormatter.class.getName()), () -> assertPluginExists(pluginList, PrettyFormatter.class.getName()))
chamada antiga: assertTrue(runtimeOptions.isMonochrome())
nova chamada: assertTrue(runtimeOptions.isMonochrome(), "Era esperado verdadeiro, mas " + result29 + " <runtimeOptions.isMonochrome()> é falso")
chamada antiga: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat(plugins.getPlugins(), is(empty())))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", "Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat(plugins.getPlugins(), is(empty())))
chamada antiga: assertAll(() -> assertThat(snakeCase.generate(sentence), is(equalTo(expectedSnakeCase))), () -> assertThat(camelCase.generate(sentence), is(equalTo(expectedCamelCase))))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat(snakeCase.generate(sentence), is(equalTo(expectedSnakeCase))), () -> assertThat(camelCase.generate(sentence), is(equalTo(expectedCamelCase))))
chamada antiga: assertTrue(JarUriFileSystemService.supports(URI.create("jar:file:/example.jar!com/example/app")))
nova chamada: assertTrue(JarUriFileSystemService.supports(URI.create("jar:file:/example.jar!com/example/app")), "Era esperado verdadeiro, mas " + result30 + " <JarUriFileSystemService.supports(URI.create('jar:file:/example.jar!com/example/app'))> é falso")
chamada antiga: assertTrue(JarUriFileSystemService.supports(URI.create("file:/example.jar")))
nova chamada: assertTrue(JarUriFileSystemService.supports(URI.create("file:/example.jar")), "Era esperado verdadeiro, mas " + result31 + " <JarUriFileSystemService.supports(URI.create('file:/example.jar'))> é falso")
chamada antiga: assertTrue(fileSystem1.isOpen())
nova chamada: assertTrue(fileSystem1.isOpen(), "Era esperado verdadeiro, mas " + result32 + " <fileSystem1.isOpen()> é falso")
chamada antiga: assertTrue(fileSystem2.isOpen())
nova chamada: assertTrue(fileSystem2.isOpen(), "Era esperado verdadeiro, mas " + result33 + " <fileSystem2.isOpen()> é falso")
chamada antiga: assertFalse(fileSystem1.isOpen())
nova chamada: assertFalse(fileSystem1.isOpen(), "Era esperado falso, mas " + result34 + " <fileSystem1.isOpen()> é verdadeiro ")
chamada antiga: assertFalse(fileSystem2.isOpen())
nova chamada: assertFalse(fileSystem2.isOpen(), "Era esperado falso, mas " + result35 + " <fileSystem2.isOpen()> é verdadeiro ")
chamada antiga: assertEquals("com.example", packageName)
nova chamada: assertEquals("com.example", packageName, "Era esperado valores iguais, mas  'com.example' é diferente de " + " packageName")
chamada antiga: assertEquals("com.example", packageName)
nova chamada: assertEquals("com.example", packageName, "Era esperado valores iguais, mas  'com.example' é diferente de " + " packageName")
chamada antiga: assertEquals("com.example.app", packageName)
nova chamada: assertEquals("com.example.app", packageName, "Era esperado valores iguais, mas  'com.example.app' é diferente de " + " packageName")
chamada antiga: assertEquals("com.example.app", packageName)
nova chamada: assertEquals("com.example.app", packageName, "Era esperado valores iguais, mas  'com.example.app' é diferente de " + " packageName")
chamada antiga: assertEquals("com.example.app", packageName)
nova chamada: assertEquals("com.example.app", packageName, "Era esperado valores iguais, mas  'com.example.app' é diferente de " + " packageName")
chamada antiga: assertEquals("com.example.app.App", fqn)
nova chamada: assertEquals("com.example.app.App", fqn, "Era esperado valores iguais, mas  'com.example.app.App' é diferente de " + " fqn")
chamada antiga: assertEquals("com.example.app.App", fqn)
nova chamada: assertEquals("com.example.app.App", fqn, "Era esperado valores iguais, mas  'com.example.app.App' é diferente de " + " fqn")
chamada antiga: assertEquals("com.example.app.App", fqn)
nova chamada: assertEquals("com.example.app.App", fqn, "Era esperado valores iguais, mas  'com.example.app.App' é diferente de " + " fqn")
chamada antiga: assertEquals(URI.create("classpath:com/example/app/app.feature"), fqn)
nova chamada: assertEquals(URI.create("classpath:com/example/app/app.feature"), fqn, "Era esperado valores iguais, mas " + result36 + " <URI.create('classpath:com/example/app/app.feature')> é diferente de " + " fqn")
chamada antiga: assertEquals(URI.create("classpath:com/example/app/app.feature"), fqn)
nova chamada: assertEquals(URI.create("classpath:com/example/app/app.feature"), fqn, "Era esperado valores iguais, mas " + result37 + " <URI.create('classpath:com/example/app/app.feature')> é diferente de " + " fqn")
chamada antiga: assertEquals(URI.create("classpath:com/example/app/app.feature"), fqn)
nova chamada: assertEquals(URI.create("classpath:com/example/app/app.feature"), fqn, "Era esperado valores iguais, mas " + result38 + " <URI.create('classpath:com/example/app/app.feature')> é diferente de " + " fqn")
chamada antiga: assertAll(() -> assertThat(runners[0], is(not(equalTo(runners[1])))), () -> assertThat(runners[1], is(not(equalTo(runners[0])))))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat(runners[0], is(not(equalTo(runners[1])))), () -> assertThat(runners[1], is(not(equalTo(runners[0])))))
chamada antiga: assertAll(() -> assertThat(eventBus, is(not(equalTo(runnerBus)))), () -> assertThat(runnerBus, is(not(equalTo(eventBus)))))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat(eventBus, is(not(equalTo(runnerBus)))), () -> assertThat(runnerBus, is(not(equalTo(eventBus)))))
chamada antiga: assertTrue(predicate.test(pickle))
nova chamada: assertTrue(predicate.test(pickle), "Era esperado verdadeiro, mas " + result39 + " <predicate.test(pickle)> é falso")
chamada antiga: assertFalse(predicate.test(pickle))
nova chamada: assertFalse(predicate.test(pickle), "Era esperado falso, mas " + result40 + " <predicate.test(pickle)> é verdadeiro ")
chamada antiga: assertTrue(predicate.test(pickle))
nova chamada: assertTrue(predicate.test(pickle), "Era esperado verdadeiro, mas " + result41 + " <predicate.test(pickle)> é falso")
chamada antiga: assertTrue(predicate.test(pickle))
nova chamada: assertTrue(predicate.test(pickle), "Era esperado verdadeiro, mas " + result42 + " <predicate.test(pickle)> é falso")
chamada antiga: assertTrue(predicate.test(pickle))
nova chamada: assertTrue(predicate.test(pickle), "Era esperado verdadeiro, mas " + result43 + " <predicate.test(pickle)> é falso")
chamada antiga: assertTrue(predicate.test(pickle))
nova chamada: assertTrue(predicate.test(pickle), "Era esperado verdadeiro, mas " + result44 + " <predicate.test(pickle)> é falso")
chamada antiga: assertFalse(predicate.test(pickle))
nova chamada: assertFalse(predicate.test(pickle), "Era esperado falso, mas " + result45 + " <predicate.test(pickle)> é verdadeiro ")
chamada antiga: assertTrue(predicate.test(pickle))
nova chamada: assertTrue(predicate.test(pickle), "Era esperado verdadeiro, mas " + result46 + " <predicate.test(pickle)> é falso")
chamada antiga: assertTrue(predicate.test(pickle))
nova chamada: assertTrue(predicate.test(pickle), "Era esperado verdadeiro, mas " + result47 + " <predicate.test(pickle)> é falso")
chamada antiga: assertFalse(predicate.test(pickle))
nova chamada: assertFalse(predicate.test(pickle), "Era esperado falso, mas " + result48 + " <predicate.test(pickle)> é verdadeiro ")
chamada antiga: assertTrue(predicate.test(pickle))
nova chamada: assertTrue(predicate.test(pickle), "Era esperado verdadeiro, mas " + result49 + " <predicate.test(pickle)> é falso")
chamada antiga: assertFalse(predicate.test(pickle))
nova chamada: assertFalse(predicate.test(pickle), "Era esperado falso, mas " + result50 + " <predicate.test(pickle)> é verdadeiro ")
chamada antiga: assertTrue(predicate.test(pickle))
nova chamada: assertTrue(predicate.test(pickle), "Era esperado verdadeiro, mas " + result51 + " <predicate.test(pickle)> é falso")
chamada antiga: assertTrue(predicate.test(pickle))
nova chamada: assertTrue(predicate.test(pickle), "Era esperado verdadeiro, mas " + result52 + " <predicate.test(pickle)> é falso")
chamada antiga: assertFalse(predicate.test(pickle))
nova chamada: assertFalse(predicate.test(pickle), "Era esperado falso, mas " + result53 + " <predicate.test(pickle)> é verdadeiro ")
chamada antiga: assertTrue(predicate.test(pickle))
nova chamada: assertTrue(predicate.test(pickle), "Era esperado verdadeiro, mas " + result54 + " <predicate.test(pickle)> é falso")
chamada antiga: assertFalse(predicate.test(pickle))
nova chamada: assertFalse(predicate.test(pickle), "Era esperado falso, mas " + result55 + " <predicate.test(pickle)> é verdadeiro ")
chamada antiga: assertTrue(predicate.test(pickle))
nova chamada: assertTrue(predicate.test(pickle), "Era esperado verdadeiro, mas " + result56 + " <predicate.test(pickle)> é falso")
chamada antiga: assertFalse(predicate.test(pickle))
nova chamada: assertFalse(predicate.test(pickle), "Era esperado falso, mas " + result57 + " <predicate.test(pickle)> é verdadeiro ")
chamada antiga: assertTrue(predicate.test(pickle))
nova chamada: assertTrue(predicate.test(pickle), "Era esperado verdadeiro, mas " + result58 + " <predicate.test(pickle)> é falso")
chamada antiga: assertTrue(predicate.test(pickle))
nova chamada: assertTrue(predicate.test(pickle), "Era esperado verdadeiro, mas " + result59 + " <predicate.test(pickle)> é falso")
chamada antiga: assertTrue(predicate.test(pickle))
nova chamada: assertTrue(predicate.test(pickle), "Era esperado verdadeiro, mas " + result60 + " <predicate.test(pickle)> é falso")
chamada antiga: assertFalse(predicate.test(pickle))
nova chamada: assertFalse(predicate.test(pickle), "Era esperado falso, mas " + result61 + " <predicate.test(pickle)> é verdadeiro ")
chamada antiga: assertTrue(passedResult.getStatus().isOk())
nova chamada: assertTrue(passedResult.getStatus().isOk(), "Era esperado verdadeiro, mas " + result62 + " <passedResult.getStatus().isOk()> é falso")
chamada antiga: assertTrue(skippedResult.getStatus().isOk())
nova chamada: assertTrue(skippedResult.getStatus().isOk(), "Era esperado verdadeiro, mas " + result63 + " <skippedResult.getStatus().isOk()> é falso")
chamada antiga: assertFalse(failedResult.getStatus().isOk())
nova chamada: assertFalse(failedResult.getStatus().isOk(), "Era esperado falso, mas " + result64 + " <failedResult.getStatus().isOk()> é verdadeiro ")
chamada antiga: assertNull(collector.getThrowable())
nova chamada: assertNull(collector.getThrowable(), "Era esperado nulo, mas " + result65 + " <collector.getThrowable()> não é nulo")
chamada antiga: assertEquals(exception, collector.getThrowable())
nova chamada: assertEquals(exception, collector.getThrowable(), "Era esperado valores iguais, mas  exception é diferente de " + result66 + " <collector.getThrowable()>")
chamada antiga: assertEquals(firstException, collector.getThrowable())
nova chamada: assertEquals(firstException, collector.getThrowable(), "Era esperado valores iguais, mas  firstException é diferente de " + result67 + " <collector.getThrowable()>")
chamada antiga: assertEquals(secondException, collector.getThrowable().getSuppressed()[0])
nova chamada: assertEquals(secondException, collector.getThrowable().getSuppressed()[0], "Era esperado valores iguais, mas  secondException é diferente de " + " collector.getThrowable().getSuppressed()[0]")
chamada antiga: assertEquals(secondException, collector.getThrowable())
nova chamada: assertEquals(secondException, collector.getThrowable(), "Era esperado valores iguais, mas  secondException é diferente de " + result68 + " <collector.getThrowable()>")
chamada antiga: assertEquals(firstException, collector.getThrowable().getSuppressed()[0])
nova chamada: assertEquals(firstException, collector.getThrowable().getSuppressed()[0], "Era esperado valores iguais, mas  firstException é diferente de " + " collector.getThrowable().getSuppressed()[0]")
chamada antiga: assertEquals(firstException, collector.getThrowable())
nova chamada: assertEquals(firstException, collector.getThrowable(), "Era esperado valores iguais, mas  firstException é diferente de " + result69 + " <collector.getThrowable()>")
chamada antiga: assertEquals(secondException, collector.getThrowable().getSuppressed()[0])
nova chamada: assertEquals(secondException, collector.getThrowable().getSuppressed()[0], "Era esperado valores iguais, mas  secondException é diferente de " + " collector.getThrowable().getSuppressed()[0]")
chamada antiga: assertEquals(DataTable.create(singletonList(singletonList(null))), arguments.get(0).getValue())
nova chamada: assertEquals(DataTable.create(singletonList(singletonList(null))), arguments.get(0).getValue(), "Era esperado valores iguais, mas " + result70 + " <DataTable.create(singletonList(singletonList(null)))> é diferente de " + result71 + " <arguments.get(0).getValue()>")
chamada antiga: assertAll(() -> assertThat(stepDefs.cell(0, 0), is(equalTo("Birth Date"))), () -> assertThat(stepDefs.cell(1, 0), is(equalTo("1957-05-10"))))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat(stepDefs.cell(0, 0), is(equalTo("Birth Date"))), () -> assertThat(stepDefs.cell(1, 0), is(equalTo("1957-05-10"))))
chamada antiga: assertAll(() -> assertThat(stepDefs.cell(0, 0), is(equalTo("Birth Date"))), () -> assertThat(stepDefs.cell(0, 1), is(equalTo("1957-05-10"))))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat(stepDefs.cell(0, 0), is(equalTo("Birth Date"))), () -> assertThat(stepDefs.cell(0, 1), is(equalTo("1957-05-10"))))
chamada antiga: assertEquals(parameterInfos.size(), args.length)
nova chamada: assertEquals(parameterInfos.size(), args.length, "Era esperado valores iguais, mas " + result72 + " <parameterInfos.size()> é diferente de " + " args.length")
chamada antiga: assertTrue(ambiguousCalled)
nova chamada: assertTrue(ambiguousCalled, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertFalse(isTestAbortedExceptionPredicate.test(new RuntimeException()))
nova chamada: assertFalse(isTestAbortedExceptionPredicate.test(new RuntimeException()), "Era esperado falso, mas " + result73 + " <isTestAbortedExceptionPredicate.test(new RuntimeException())> é verdadeiro ")
chamada antiga: assertTrue(isTestAbortedExceptionPredicate.test(new TestAbortedException()))
nova chamada: assertTrue(isTestAbortedExceptionPredicate.test(new TestAbortedException()), "Era esperado verdadeiro, mas " + result74 + " <isTestAbortedExceptionPredicate.test(new TestAbortedException())> é falso")
chamada antiga: assertTrue(isTestAbortedExceptionPredicate.test(new TestAbortedExceptionSubClass()))
nova chamada: assertTrue(isTestAbortedExceptionPredicate.test(new TestAbortedExceptionSubClass()), "Era esperado verdadeiro, mas " + result75 + " <isTestAbortedExceptionPredicate.test(new TestAbortedExceptionSubClass())> é falso")
chamada antiga: assertAll(() -> assertThat(expectedThrown.getMessage(), is(equalTo("Duplicate step definitions in StepDefinitionA_Location and StepDefinitionB_Location"))), () -> assertThat(expectedThrown.getCause(), is(nullValue())))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat(expectedThrown.getMessage(), is(equalTo("Duplicate step definitions in StepDefinitionA_Location and StepDefinitionB_Location"))), () -> assertThat(expectedThrown.getCause(), is(nullValue())))
chamada antiga: assertAll(() -> assertThat(s.getStatus(), is(equalTo(FAILED))), () -> assertTrue(s.isFailed()))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat(s.getStatus(), is(equalTo(FAILED))), () -> assertTrue(s.isFailed()))
chamada antiga: assertAll(() -> assertThat(s.getStatus(), is(equalTo(SKIPPED))), () -> assertFalse(s.isFailed()))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat(s.getStatus(), is(equalTo(SKIPPED))), () -> assertFalse(s.isFailed()))
chamada antiga: assertAll(() -> assertThat(s.getStatus(), is(equalTo(UNDEFINED))), () -> assertFalse(s.isFailed()))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat(s.getStatus(), is(equalTo(UNDEFINED))), () -> assertFalse(s.isFailed()))
chamada antiga: assertAll(() -> assertThat(s.getStatus(), is(equalTo(UNDEFINED))), () -> assertFalse(s.isFailed()))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat(s.getStatus(), is(equalTo(UNDEFINED))), () -> assertFalse(s.isFailed()))
chamada antiga: assertTrue(Files.exists(reportJsFile))
nova chamada: assertTrue(Files.exists(reportJsFile), "Era esperado verdadeiro, mas " + result76 + " <Files.exists(reportJsFile)> é falso")
chamada antiga: assertAll(() -> assertTimelineTestDataIsAsExpected(expectedTests, actualOutput.tests, true, true), () -> assertTimelineGroupDataIsAsExpected(expectedGroups, actualOutput.groups))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertTimelineTestDataIsAsExpected(expectedTests, actualOutput.tests, true, true), () -> assertTimelineGroupDataIsAsExpected(expectedGroups, actualOutput.groups))
chamada antiga: assertDoesNotThrow(() -> rethrowIfUnrecoverable(new Throwable()))
nova chamada: assertDoesNotThrow(() -> rethrowIfUnrecoverable(new Throwable()), "Era esperado que nenhuma exceção fosse lançada, mas  () - rethrowIfUnrecoverable(new Throwable()) foi lançada")
chamada antiga: assertAll(() -> assertThat(expectedThrown.getMessage(), is(equalTo("java.lang.RuntimeException"))), () -> assertThat(expectedThrown.getCause(), isA(RuntimeException.class)))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat(expectedThrown.getMessage(), is(equalTo("java.lang.RuntimeException"))), () -> assertThat(expectedThrown.getCause(), isA(RuntimeException.class)))
chamada antiga: assertAll(() -> assertThat(expectedThrown.getMessage(), is(nullValue())), () -> assertThat(expectedThrown.getCause(), is(nullValue())))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat(expectedThrown.getMessage(), is(nullValue())), () -> assertThat(expectedThrown.getCause(), is(nullValue())))
chamada antiga: assertAll(() -> assertThat(expectedThrown.getMessage(), is(equalTo("message"))), () -> assertThat(expectedThrown.getCause(), is(nullValue())))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat(expectedThrown.getMessage(), is(equalTo("message"))), () -> assertThat(expectedThrown.getCause(), is(nullValue())))
chamada antiga: assertAll(() -> assertThat(expectedThrown.getMessage(), is(nullValue())), () -> assertThat(expectedThrown.getCause(), is(nullValue())))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat(expectedThrown.getMessage(), is(nullValue())), () -> assertThat(expectedThrown.getCause(), is(nullValue())))
chamada antiga: assertAll(() -> assertThat(expectedThrown.getMessage(), is(equalTo("message"))), () -> assertThat(expectedThrown.getCause(), isA(RuntimeException.class)))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat(expectedThrown.getMessage(), is(equalTo("message"))), () -> assertThat(expectedThrown.getCause(), isA(RuntimeException.class)))
chamada antiga: assertAll(() -> assertThat(expectedThrown.getMessage(), is(nullValue())), () -> assertThat(expectedThrown.getCause(), is(nullValue())))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat(expectedThrown.getMessage(), is(nullValue())), () -> assertThat(expectedThrown.getCause(), is(nullValue())))
chamada antiga: assertEquals(belly.getContents(), Collections.nCopies(n, "cukes"))
nova chamada: assertEquals(belly.getContents(), Collections.nCopies(n, "cukes"), "Era esperado valores iguais, mas " + result77 + " <belly.getContents()> é diferente de " + result78 + " <Collections.nCopies(n, 'cukes')>")
chamada antiga: assertEquals("glass", container)
nova chamada: assertEquals("glass", container, "Era esperado valores iguais, mas  'glass' é diferente de " + " container")
chamada antiga: assertEquals("milk", liquid)
nova chamada: assertEquals("milk", liquid, "Era esperado valores iguais, mas  'milk' é diferente de " + " liquid")
chamada antiga: assertEquals("happy", mood)
nova chamada: assertEquals("happy", mood, "Era esperado valores iguais, mas  'happy' é diferente de " + " mood")
chamada antiga: assertFalse(steps.getBelly().isDisposed())
nova chamada: assertFalse(steps.getBelly().isDisposed(), "Era esperado falso, mas " + result79 + " <steps.getBelly().isDisposed()> é verdadeiro ")
chamada antiga: assertTrue(steps.getBelly().isDisposed())
nova chamada: assertTrue(steps.getBelly().isDisposed(), "Era esperado verdadeiro, mas " + result80 + " <steps.getBelly().isDisposed()> é falso")
chamada antiga: assertTrue(new CucumberEngineOptions(ansiColors).isMonochrome())
nova chamada: assertTrue(new CucumberEngineOptions(ansiColors).isMonochrome(), "Era esperado verdadeiro, mas " + result81 + " <new CucumberEngineOptions(ansiColors).isMonochrome()> é falso")
chamada antiga: assertFalse(new CucumberEngineOptions(noAnsiColors).isMonochrome())
nova chamada: assertFalse(new CucumberEngineOptions(noAnsiColors).isMonochrome(), "Era esperado falso, mas " + result82 + " <new CucumberEngineOptions(noAnsiColors).isMonochrome()> é verdadeiro ")
chamada antiga: assertTrue(new CucumberEngineOptions(dryRun).isDryRun())
nova chamada: assertTrue(new CucumberEngineOptions(dryRun).isDryRun(), "Era esperado verdadeiro, mas " + result83 + " <new CucumberEngineOptions(dryRun).isDryRun()> é falso")
chamada antiga: assertFalse(new CucumberEngineOptions(noDryRun).isDryRun())
nova chamada: assertFalse(new CucumberEngineOptions(noDryRun).isDryRun(), "Era esperado falso, mas " + result84 + " <new CucumberEngineOptions(noDryRun).isDryRun()> é verdadeiro ")
chamada antiga: assertTrue(new CucumberEngineOptions(enabled).isParallelExecutionEnabled())
nova chamada: assertTrue(new CucumberEngineOptions(enabled).isParallelExecutionEnabled(), "Era esperado verdadeiro, mas " + result85 + " <new CucumberEngineOptions(enabled).isParallelExecutionEnabled()> é falso")
chamada antiga: assertFalse(new CucumberEngineOptions(disabled).isParallelExecutionEnabled())
nova chamada: assertFalse(new CucumberEngineOptions(disabled).isParallelExecutionEnabled(), "Era esperado falso, mas " + result86 + " <new CucumberEngineOptions(disabled).isParallelExecutionEnabled()> é verdadeiro ")
chamada antiga: assertFalse(new CucumberEngineOptions(absent).isParallelExecutionEnabled())
nova chamada: assertFalse(new CucumberEngineOptions(absent).isParallelExecutionEnabled(), "Era esperado falso, mas " + result87 + " <new CucumberEngineOptions(absent).isParallelExecutionEnabled()> é verdadeiro ")
chamada antiga: assertEquals("A feature with scenario outlines", feature.getDisplayName())
nova chamada: assertEquals("A feature with scenario outlines", feature.getDisplayName(), "Era esperado valores iguais, mas  'A feature with scenario outlines' é diferente de " + result88 + " <feature.getDisplayName()>")
chamada antiga: assertEquals(emptySet(), feature.getTags())
nova chamada: assertEquals(emptySet(), feature.getTags(), "Era esperado valores iguais, mas " + result89 + " <emptySet()> é diferente de " + result90 + " <feature.getTags()>")
chamada antiga: assertEquals(of(from(featurePath)), feature.getSource())
nova chamada: assertEquals(of(from(featurePath)), feature.getSource(), "Era esperado valores iguais, mas " + result91 + " <of(from(featurePath))> é diferente de " + result92 + " <feature.getSource()>")
chamada antiga: assertEquals(CONTAINER, feature.getType())
nova chamada: assertEquals(CONTAINER, feature.getType(), "Era esperado valores iguais, mas  CONTAINER é diferente de " + result93 + " <feature.getType()>")
chamada antiga: assertEquals(id.append("feature", featureSegmentValue), feature.getUniqueId())
nova chamada: assertEquals(id.append("feature", featureSegmentValue), feature.getUniqueId(), "Era esperado valores iguais, mas " + result94 + " <id.append('feature', featureSegmentValue)> é diferente de " + result95 + " <feature.getUniqueId()>")
chamada antiga: assertEquals("A scenario", scenario.getDisplayName())
nova chamada: assertEquals("A scenario", scenario.getDisplayName(), "Era esperado valores iguais, mas  'A scenario' é diferente de " + result96 + " <scenario.getDisplayName()>")
chamada antiga: assertEquals(asSet(create("FeatureTag"), create("ScenarioTag"), create("ResourceA"), create("ResourceAReadOnly")), scenario.getTags())
nova chamada: assertEquals(asSet(create("FeatureTag"), create("ScenarioTag"), create("ResourceA"), create("ResourceAReadOnly")), scenario.getTags(), "Era esperado valores iguais, mas " + result97 + " <asSet(create('FeatureTag'), create('ScenarioTag'), create('ResourceA'), create('ResourceAReadOnly'))> é diferente de " + result98 + " <scenario.getTags()>")
chamada antiga: assertEquals(of(from(featurePath, from(5, 3))), scenario.getSource())
nova chamada: assertEquals(of(from(featurePath, from(5, 3))), scenario.getSource(), "Era esperado valores iguais, mas " + result99 + " <of(from(featurePath, from(5, 3)))> é diferente de " + result100 + " <scenario.getSource()>")
chamada antiga: assertEquals(TEST, scenario.getType())
nova chamada: assertEquals(TEST, scenario.getType(), "Era esperado valores iguais, mas  TEST é diferente de " + result101 + " <scenario.getType()>")
chamada antiga: assertEquals(id.append("feature", featureSegmentValue).append("scenario", "5"), scenario.getUniqueId())
nova chamada: assertEquals(id.append("feature", featureSegmentValue).append("scenario", "5"), scenario.getUniqueId(), "Era esperado valores iguais, mas " + result102 + " <id.append('feature', featureSegmentValue).append('scenario', '5')> é diferente de " + result103 + " <scenario.getUniqueId()>")
chamada antiga: assertEquals(Optional.of("io.cucumber.junit.platform.engine"), pickleDescriptor.getPackage())
nova chamada: assertEquals(Optional.of("io.cucumber.junit.platform.engine"), pickleDescriptor.getPackage(), "Era esperado valores iguais, mas " + result104 + " <Optional.of('io.cucumber.junit.platform.engine')> é diferente de " + result105 + " <pickleDescriptor.getPackage()>")
chamada antiga: assertEquals(asSet(new ExclusiveResource("resource-a", LockMode.READ_WRITE), new ExclusiveResource("resource-a", LockMode.READ)), pickleDescriptor.getExclusiveResources())
nova chamada: assertEquals(asSet(new ExclusiveResource("resource-a", LockMode.READ_WRITE), new ExclusiveResource("resource-a", LockMode.READ)), pickleDescriptor.getExclusiveResources(), "Era esperado valores iguais, mas " + result106 + " <asSet(new ExclusiveResource('resource-a', LockMode.READ_WRITE), new ExclusiveResource('resource-a', LockMode.READ))> é diferente de " + result107 + " <pickleDescriptor.getExclusiveResources()>")
chamada antiga: assertEquals("A scenario outline", outline.getDisplayName())
nova chamada: assertEquals("A scenario outline", outline.getDisplayName(), "Era esperado valores iguais, mas  'A scenario outline' é diferente de " + result108 + " <outline.getDisplayName()>")
chamada antiga: assertEquals(emptySet(), outline.getTags())
nova chamada: assertEquals(emptySet(), outline.getTags(), "Era esperado valores iguais, mas " + result109 + " <emptySet()> é diferente de " + result110 + " <outline.getTags()>")
chamada antiga: assertEquals(of(from(featurePath, from(11, 3))), outline.getSource())
nova chamada: assertEquals(of(from(featurePath, from(11, 3))), outline.getSource(), "Era esperado valores iguais, mas " + result111 + " <of(from(featurePath, from(11, 3)))> é diferente de " + result112 + " <outline.getSource()>")
chamada antiga: assertEquals(CONTAINER, outline.getType())
nova chamada: assertEquals(CONTAINER, outline.getType(), "Era esperado valores iguais, mas  CONTAINER é diferente de " + result113 + " <outline.getType()>")
chamada antiga: assertEquals(id.append("feature", featureSegmentValue).append("scenario", "11"), outline.getUniqueId())
nova chamada: assertEquals(id.append("feature", featureSegmentValue).append("scenario", "11"), outline.getUniqueId(), "Era esperado valores iguais, mas " + result114 + " <id.append('feature', featureSegmentValue).append('scenario', '11')> é diferente de " + result115 + " <outline.getUniqueId()>")
chamada antiga: assertEquals("Example #1.1", example.getDisplayName())
nova chamada: assertEquals("Example #1.1", example.getDisplayName(), "Era esperado valores iguais, mas  'Example #1.1' é diferente de " + result116 + " <example.getDisplayName()>")
chamada antiga: assertEquals(asSet(create("FeatureTag"), create("Example1Tag"), create("ScenarioOutlineTag")), example.getTags())
nova chamada: assertEquals(asSet(create("FeatureTag"), create("Example1Tag"), create("ScenarioOutlineTag")), example.getTags(), "Era esperado valores iguais, mas " + result117 + " <asSet(create('FeatureTag'), create('Example1Tag'), create('ScenarioOutlineTag'))> é diferente de " + result118 + " <example.getTags()>")
chamada antiga: assertEquals(of(from(featurePath, from(19, 7))), example.getSource())
nova chamada: assertEquals(of(from(featurePath, from(19, 7))), example.getSource(), "Era esperado valores iguais, mas " + result119 + " <of(from(featurePath, from(19, 7)))> é diferente de " + result120 + " <example.getSource()>")
chamada antiga: assertEquals(TEST, example.getType())
nova chamada: assertEquals(TEST, example.getType(), "Era esperado valores iguais, mas  TEST é diferente de " + result121 + " <example.getType()>")
chamada antiga: assertEquals(id.append("feature", featureSegmentValue).append("scenario", "11").append("examples", "17").append("example", "19"), example.getUniqueId())
nova chamada: assertEquals(id.append("feature", featureSegmentValue).append("scenario", "11").append("examples", "17").append("example", "19"), example.getUniqueId(), "Era esperado valores iguais, mas " + result122 + " <id.append('feature', featureSegmentValue).append('scenario', '11').append('examples', '17').append('example', '19')> é diferente de " + result123 + " <example.getUniqueId()>")
chamada antiga: assertEquals(Optional.of("io.cucumber.junit.platform.engine"), pickleDescriptor.getPackage())
nova chamada: assertEquals(Optional.of("io.cucumber.junit.platform.engine"), pickleDescriptor.getPackage(), "Era esperado valores iguais, mas " + result124 + " <Optional.of('io.cucumber.junit.platform.engine')> é diferente de " + result125 + " <pickleDescriptor.getPackage()>")
chamada antiga: assertEquals("A feature with scenario outlines - A scenario outline - With some text - Example #1.1", example.getDisplayName())
nova chamada: assertEquals("A feature with scenario outlines - A scenario outline - With some text - Example #1.1", example.getDisplayName(), "Era esperado valores iguais, mas  'A feature with scenario outlines - A scenario outline - With some text - Example #1.1' é diferente de " + result126 + " <example.getDisplayName()>")
chamada antiga: assertTrue(getNodes().size() > 0)
nova chamada: assertTrue(getNodes().size() > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(getPickles().size() > 0)
nova chamada: assertTrue(getPickles().size() > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(getNodes().size() > 0)
nova chamada: assertTrue(getNodes().size() > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(getPickles().size() > 0)
nova chamada: assertTrue(getPickles().size() > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(ENGINE_ID, engine.getId())
nova chamada: assertEquals(ENGINE_ID, engine.getId(), "Era esperado valores iguais, mas  ENGINE_ID é diferente de " + result127 + " <engine.getId()>")
chamada antiga: assertEquals(Optional.of("DEVELOPMENT"), engine.getVersion())
nova chamada: assertEquals(Optional.of("DEVELOPMENT"), engine.getVersion(), "Era esperado valores iguais, mas " + result128 + " <Optional.of('DEVELOPMENT')> é diferente de " + result129 + " <engine.getVersion()>")
chamada antiga: assertNotNull(engine.createExecutionContext(execution))
nova chamada: assertNotNull(engine.createExecutionContext(execution), "Era esperado não nulo, mas " + result130 + " <engine.createExecutionContext(execution)> é nulo")
chamada antiga: assertEquals(0, testDescriptor.getChildren().size())
nova chamada: assertEquals(0, testDescriptor.getChildren().size(), "Era esperado valores iguais, mas  0 é diferente de " + result131 + " <testDescriptor.getChildren().size()>")
chamada antiga: assertEquals(1, testDescriptor.getChildren().size())
nova chamada: assertEquals(1, testDescriptor.getChildren().size(), "Era esperado valores iguais, mas  1 é diferente de " + result132 + " <testDescriptor.getChildren().size()>")
chamada antiga: assertEquals(1, testDescriptor.getChildren().size())
nova chamada: assertEquals(1, testDescriptor.getChildren().size(), "Era esperado valores iguais, mas  1 é diferente de " + result133 + " <testDescriptor.getChildren().size()>")
chamada antiga: assertEquals(1L, testDescriptor.getDescendants().stream().filter(TestDescriptor::isTest).count())
nova chamada: assertEquals(1L, testDescriptor.getDescendants().stream().filter(TestDescriptor::isTest).count(), "Era esperado valores iguais, mas  1L é diferente de " + result134 + " <testDescriptor.getDescendants().stream().filter(TestDescriptor::isTest).count()>")
chamada antiga: assertEquals(2L, testDescriptor.getDescendants().stream().filter(TestDescriptor::isTest).count())
nova chamada: assertEquals(2L, testDescriptor.getDescendants().stream().filter(TestDescriptor::isTest).count(), "Era esperado valores iguais, mas  2L é diferente de " + result135 + " <testDescriptor.getDescendants().stream().filter(TestDescriptor::isTest).count()>")
chamada antiga: assertEquals(2, testDescriptor.getChildren().size())
nova chamada: assertEquals(2, testDescriptor.getChildren().size(), "Era esperado valores iguais, mas  2 é diferente de " + result136 + " <testDescriptor.getChildren().size()>")
chamada antiga: assertEquals(7, testDescriptor.getChildren().size())
nova chamada: assertEquals(7, testDescriptor.getChildren().size(), "Era esperado valores iguais, mas  7 é diferente de " + result137 + " <testDescriptor.getChildren().size()>")
chamada antiga: assertEquals(unsorted, sorted)
nova chamada: assertEquals(unsorted, sorted, "Era esperado valores iguais, mas  unsorted é diferente de " + " sorted")
chamada antiga: assertEquals(4, tests.size())
nova chamada: assertEquals(4, tests.size(), "Era esperado valores iguais, mas  4 é diferente de " + result138 + " <tests.size()>")
chamada antiga: assertEquals(2, tests.size())
nova chamada: assertEquals(2, tests.size(), "Era esperado valores iguais, mas  2 é diferente de " + result139 + " <tests.size()>")
chamada antiga: assertEquals(1, tests.size())
nova chamada: assertEquals(1, tests.size(), "Era esperado valores iguais, mas  1 é diferente de " + result140 + " <tests.size()>")
chamada antiga: assertEquals(1, tests.size())
nova chamada: assertEquals(1, tests.size(), "Era esperado valores iguais, mas  1 é diferente de " + result141 + " <tests.size()>")
chamada antiga: assertEquals(2, tests.size())
nova chamada: assertEquals(2, tests.size(), "Era esperado valores iguais, mas  2 é diferente de " + result142 + " <tests.size()>")
chamada antiga: assertEquals(1, tests.size())
nova chamada: assertEquals(1, tests.size(), "Era esperado valores iguais, mas  1 é diferente de " + result143 + " <tests.size()>")
chamada antiga: assertEquals(1, testDescriptor.getChildren().size())
nova chamada: assertEquals(1, testDescriptor.getChildren().size(), "Era esperado valores iguais, mas  1 é diferente de " + result144 + " <testDescriptor.getChildren().size()>")
chamada antiga: assertEquals(1L, testDescriptor.getDescendants().stream().filter(TestDescriptor::isTest).count())
nova chamada: assertEquals(1L, testDescriptor.getDescendants().stream().filter(TestDescriptor::isTest).count(), "Era esperado valores iguais, mas  1L é diferente de " + result145 + " <testDescriptor.getDescendants().stream().filter(TestDescriptor::isTest).count()>")
chamada antiga: assertEquals(2L, testDescriptor.getDescendants().stream().filter(TestDescriptor::isTest).count())
nova chamada: assertEquals(2L, testDescriptor.getDescendants().stream().filter(TestDescriptor::isTest).count(), "Era esperado valores iguais, mas  2L é diferente de " + result146 + " <testDescriptor.getDescendants().stream().filter(TestDescriptor::isTest).count()>")
chamada antiga: assertEquals(6, testDescriptor.getChildren().size())
nova chamada: assertEquals(6, testDescriptor.getChildren().size(), "Era esperado valores iguais, mas  6 é diferente de " + result147 + " <testDescriptor.getChildren().size()>")
chamada antiga: assertEquals(6, testDescriptor.getChildren().size())
nova chamada: assertEquals(6, testDescriptor.getChildren().size(), "Era esperado valores iguais, mas  6 é diferente de " + result148 + " <testDescriptor.getChildren().size()>")
chamada antiga: assertTrue(testDescriptor.getDescendants().isEmpty())
nova chamada: assertTrue(testDescriptor.getDescendants().isEmpty(), "Era esperado verdadeiro, mas " + result149 + " <testDescriptor.getDescendants().isEmpty()> é falso")
chamada antiga: assertEquals(1, testDescriptor.getChildren().size())
nova chamada: assertEquals(1, testDescriptor.getChildren().size(), "Era esperado valores iguais, mas  1 é diferente de " + result150 + " <testDescriptor.getChildren().size()>")
chamada antiga: assertEquals(1, testDescriptor.getChildren().size())
nova chamada: assertEquals(1, testDescriptor.getChildren().size(), "Era esperado valores iguais, mas  1 é diferente de " + result151 + " <testDescriptor.getChildren().size()>")
chamada antiga: assertEquals(selectors, testDescriptor.getDescendants().stream().filter(PickleDescriptor.class::isInstance).map(TestDescriptor::getUniqueId).collect(toSet()))
nova chamada: assertEquals(selectors, testDescriptor.getDescendants().stream().filter(PickleDescriptor.class::isInstance).map(TestDescriptor::getUniqueId).collect(toSet()), "Era esperado valores iguais, mas  selectors é diferente de " + result152 + " <testDescriptor.getDescendants().stream().filter(PickleDescriptor.class::isInstance).map(TestDescriptor::getUniqueId).collect(toSet())>")
chamada antiga: assertEquals(6, testDescriptor.getChildren().size())
nova chamada: assertEquals(6, testDescriptor.getChildren().size(), "Era esperado valores iguais, mas  6 é diferente de " + result153 + " <testDescriptor.getChildren().size()>")
chamada antiga: assertEquals(0, testDescriptor.getChildren().size())
nova chamada: assertEquals(0, testDescriptor.getChildren().size(), "Era esperado valores iguais, mas  0 é diferente de " + result154 + " <testDescriptor.getChildren().size()>")
chamada antiga: assertEquals(1, logRecordListener.getLogRecords().size())
nova chamada: assertEquals(1, logRecordListener.getLogRecords().size(), "Era esperado valores iguais, mas  1 é diferente de " + result155 + " <logRecordListener.getLogRecords().size()>")
chamada antiga: assertEquals(Level.WARNING, logRecord.getLevel())
nova chamada: assertEquals(Level.WARNING, logRecord.getLevel(), "Era esperado valores iguais, mas  Level.WARNING é diferente de " + result156 + " <logRecord.getLevel()>")
chamada antiga: assertEquals("No features found in package 'io.cucumber.junit.platform.engine.nofeatures'", logRecord.getMessage())
nova chamada: assertEquals("No features found in package 'io.cucumber.junit.platform.engine.nofeatures'", logRecord.getMessage(), "Era esperado valores iguais, mas  'No features found in package 'io.cucumber.junit.platform.engine.nofeatures'' é diferente de " + result157 + " <logRecord.getMessage()>")
chamada antiga: assertAll(() -> {
    assertThat(results).extracting(Message::getContent).isEqualTo(contents);
    assertThat(results).extracting(Message::getAuthor).extracting(User::getId).allMatch(user.getId()::equals);
})
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> {
    assertThat(results).extracting(Message::getContent).isEqualTo(contents);
    assertThat(results).extracting(Message::getAuthor).extracting(User::getId).allMatch(user.getId()::equals);
})
chamada antiga: assertEquals(expectedResult, result)
nova chamada: assertEquals("Era esperado valores iguais, mas  expectedResult é diferente de " + " result", expectedResult, result)
chamada antiga: assertEquals(expected, calc.value())
nova chamada: assertEquals("Era esperado valores iguais, mas  expected é diferente de " + result158 + " <calc.value()>", expected, calc.value())
chamada antiga: assertEquals(-calc.value().intValue(), change)
nova chamada: assertEquals("Era esperado valores iguais, mas  -calc.value().intValue() é diferente de " + " change", -calc.value().intValue(), change)
chamada antiga: assertEquals(expectedResult, result)
nova chamada: assertEquals("Era esperado valores iguais, mas  expectedResult é diferente de " + " result", expectedResult, result)
chamada antiga: assertEquals(expected, calc.value())
nova chamada: assertEquals("Era esperado valores iguais, mas  expected é diferente de " + result159 + " <calc.value()>", expected, calc.value())
chamada antiga: assertEquals(-calc.value().intValue(), change)
nova chamada: assertEquals("Era esperado valores iguais, mas  -calc.value().intValue() é diferente de " + " change", -calc.value().intValue(), change)
chamada antiga: assertEquals(groceriesPrice, totalPrice)
nova chamada: assertEquals("Era esperado valores iguais, mas  groceriesPrice é diferente de " + " totalPrice", groceriesPrice, totalPrice)
chamada antiga: assertEquals(-calc.value().intValue(), change)
nova chamada: assertEquals(-calc.value().intValue(), change, "Era esperado valores iguais, mas  -calc.value().intValue() é diferente de " + " change")
chamada antiga: assertEquals(expectedResult, result)
nova chamada: assertEquals(expectedResult, result, "Era esperado valores iguais, mas  expectedResult é diferente de " + " result")
chamada antiga: assertEquals(expected, calc.value())
nova chamada: assertEquals(expected, calc.value(), "Era esperado valores iguais, mas  expected é diferente de " + result160 + " <calc.value()>")
chamada antiga: assertEquals(1, transform.size())
nova chamada: assertEquals(1, transform.size(), "Era esperado valores iguais, mas  1 é diferente de " + result161 + " <transform.size()>")
chamada antiga: assertEquals(here, transform.get(0).name)
nova chamada: assertEquals(here, transform.get(0).name, "Era esperado valores iguais, mas  here é diferente de " + " transform.get(0).name")
chamada antiga: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> {
    assertThat(results).extracting(Message::getContent).isEqualTo(contents);
    assertThat(results).extracting(Message::getAuthor).extracting(User::getId).allMatch(user.getId()::equals);
})
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", "Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> {
    assertThat(results).extracting(Message::getContent).isEqualTo(contents);
    assertThat(results).extracting(Message::getAuthor).extracting(User::getId).allMatch(user.getId()::equals);
})
chamada antiga: assertNull(lookupTableTypeByType)
nova chamada: assertNull(lookupTableTypeByType, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(lookupTableTypeByType)
nova chamada: assertNull(lookupTableTypeByType, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(lookupTableTypeByType)
nova chamada: assertNull(lookupTableTypeByType, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertSame(cell, lookupTableTypeByType)
nova chamada: assertSame(cell, lookupTableTypeByType, "Era esperado objetos iguais, mas  cell é diferente de " + " lookupTableTypeByType")
chamada antiga: assertSame(ENTRY, lookupTableTypeByType)
nova chamada: assertSame(ENTRY, lookupTableTypeByType, "Era esperado objetos iguais, mas  ENTRY é diferente de " + " lookupTableTypeByType")
chamada antiga: assertEquals(singletonList(singletonList(new BigDecimal("2105.88"))), dataTableType.transform(singletonList(singletonList("2,105.88"))))
nova chamada: assertEquals(singletonList(singletonList(new BigDecimal("2105.88"))), dataTableType.transform(singletonList(singletonList("2,105.88"))), "Era esperado valores iguais, mas " + result162 + " <singletonList(singletonList(new BigDecimal('2105.88')))> é diferente de " + result163 + " <dataTableType.transform(singletonList(singletonList('2,105.88')))>")
chamada antiga: assertEquals(singletonList(singletonList(new BigDecimal("2105.88"))), dataTableType.transform(singletonList(singletonList("2.105,88"))))
nova chamada: assertEquals(singletonList(singletonList(new BigDecimal("2105.88"))), dataTableType.transform(singletonList(singletonList("2.105,88"))), "Era esperado valores iguais, mas " + result164 + " <singletonList(singletonList(new BigDecimal('2105.88')))> é diferente de " + result165 + " <dataTableType.transform(singletonList(singletonList('2.105,88')))>")
chamada antiga: assertEquals(singletonList(singletonList(null)), dataTableType.transform(singletonList(singletonList(null))))
nova chamada: assertEquals(singletonList(singletonList(null)), dataTableType.transform(singletonList(singletonList(null))), "Era esperado valores iguais, mas " + result166 + " <singletonList(singletonList(null))> é diferente de " + result167 + " <dataTableType.transform(singletonList(singletonList(null)))>")
chamada antiga: assertEquals(singletonList(singletonList(null)), dataTableType.transform(singletonList(singletonList(null))))
nova chamada: assertEquals(singletonList(singletonList(null)), dataTableType.transform(singletonList(singletonList(null))), "Era esperado valores iguais, mas " + result168 + " <singletonList(singletonList(null))> é diferente de " + result169 + " <dataTableType.transform(singletonList(singletonList(null)))>")
chamada antiga: assertEquals(singletonList(singletonList(null)), dataTableType.transform(singletonList(singletonList(null))))
nova chamada: assertEquals(singletonList(singletonList(null)), dataTableType.transform(singletonList(singletonList(null))), "Era esperado valores iguais, mas " + result170 + " <singletonList(singletonList(null))> é diferente de " + result171 + " <dataTableType.transform(singletonList(singletonList(null)))>")
chamada antiga: assertEquals(singletonList(singletonList(null)), dataTableType.transform(singletonList(singletonList(null))))
nova chamada: assertEquals(singletonList(singletonList(null)), dataTableType.transform(singletonList(singletonList(null))), "Era esperado valores iguais, mas " + result172 + " <singletonList(singletonList(null))> é diferente de " + result173 + " <dataTableType.transform(singletonList(singletonList(null)))>")
chamada antiga: assertEquals(singletonList(singletonList(null)), dataTableType.transform(singletonList(singletonList(null))))
nova chamada: assertEquals(singletonList(singletonList(null)), dataTableType.transform(singletonList(singletonList(null))), "Era esperado valores iguais, mas " + result174 + " <singletonList(singletonList(null))> é diferente de " + result175 + " <dataTableType.transform(singletonList(singletonList(null)))>")
chamada antiga: assertEquals(singletonList(singletonList(null)), dataTableType.transform(singletonList(singletonList(null))))
nova chamada: assertEquals(singletonList(singletonList(null)), dataTableType.transform(singletonList(singletonList(null))), "Era esperado valores iguais, mas " + result176 + " <singletonList(singletonList(null))> é diferente de " + result177 + " <dataTableType.transform(singletonList(singletonList(null)))>")
chamada antiga: assertEquals(singletonList(singletonList(null)), dataTableType.transform(singletonList(singletonList(null))))
nova chamada: assertEquals(singletonList(singletonList(null)), dataTableType.transform(singletonList(singletonList(null))), "Era esperado valores iguais, mas " + result178 + " <singletonList(singletonList(null))> é diferente de " + result179 + " <dataTableType.transform(singletonList(singletonList(null)))>")
chamada antiga: assertEquals(singletonList(singletonList(null)), dataTableType.transform(singletonList(singletonList(null))))
nova chamada: assertEquals(singletonList(singletonList(null)), dataTableType.transform(singletonList(singletonList(null))), "Era esperado valores iguais, mas " + result180 + " <singletonList(singletonList(null))> é diferente de " + result181 + " <dataTableType.transform(singletonList(singletonList(null)))>")
chamada antiga: assertEquals(singletonList(singletonList(null)), dataTableType.transform(singletonList(singletonList(null))))
nova chamada: assertEquals(singletonList(singletonList(null)), dataTableType.transform(singletonList(singletonList(null))), "Era esperado valores iguais, mas " + result182 + " <singletonList(singletonList(null))> é diferente de " + result183 + " <dataTableType.transform(singletonList(singletonList(null)))>")
chamada antiga: assertEquals(singletonList(singletonList("")), dataTableType.transform(singletonList(singletonList("[blank]"))))
nova chamada: assertEquals(singletonList(singletonList("")), dataTableType.transform(singletonList(singletonList("[blank]"))), "Era esperado valores iguais, mas " + result184 + " <singletonList(singletonList(''))> é diferente de " + result185 + " <dataTableType.transform(singletonList(singletonList('[blank]')))>")
chamada antiga: assertEquals(singletonList(singletonList("")), dataTableType.transform(singletonList(singletonList("[blank]"))))
nova chamada: assertEquals(singletonList(singletonList("")), dataTableType.transform(singletonList(singletonList("[blank]"))), "Era esperado valores iguais, mas " + result186 + " <singletonList(singletonList(''))> é diferente de " + result187 + " <dataTableType.transform(singletonList(singletonList('[blank]')))>")
chamada antiga: assertEquals(singletonList(singletonList(Boolean.TRUE)), dataTableType.transform(singletonList(singletonList("true"))))
nova chamada: assertEquals(singletonList(singletonList(Boolean.TRUE)), dataTableType.transform(singletonList(singletonList("true"))), "Era esperado valores iguais, mas " + result188 + " <singletonList(singletonList(Boolean.TRUE))> é diferente de " + result189 + " <dataTableType.transform(singletonList(singletonList('true')))>")
chamada antiga: assertEquals(singletonList(singletonList(Boolean.FALSE)), dataTableType.transform(singletonList(singletonList("false"))))
nova chamada: assertEquals(singletonList(singletonList(Boolean.FALSE)), dataTableType.transform(singletonList(singletonList("false"))), "Era esperado valores iguais, mas " + result190 + " <singletonList(singletonList(Boolean.FALSE))> é diferente de " + result191 + " <dataTableType.transform(singletonList(singletonList('false')))>")
chamada antiga: assertEquals(singletonList(singletonList(Boolean.TRUE)), dataTableType.transform(singletonList(singletonList("yes"))))
nova chamada: assertEquals(singletonList(singletonList(Boolean.TRUE)), dataTableType.transform(singletonList(singletonList("yes"))), "Era esperado valores iguais, mas " + result192 + " <singletonList(singletonList(Boolean.TRUE))> é diferente de " + result193 + " <dataTableType.transform(singletonList(singletonList('yes')))>")
chamada antiga: assertTrue(new TableDiffer(table(), table()).calculateDiffs().isEmpty())
nova chamada: assertTrue(new TableDiffer(table(), table()).calculateDiffs().isEmpty(), "Era esperado verdadeiro, mas " + result194 + " <new TableDiffer(table(), table()).calculateDiffs().isEmpty()> é falso")
chamada antiga: assertEquals(emptyTable.cells(), emptyList)
nova chamada: assertEquals(emptyTable.cells(), emptyList, "Era esperado valores iguais, mas " + result195 + " <emptyTable.cells()> é diferente de " + " emptyList")
chamada antiga: assertTrue(new TableDiffer(table(), table()).calculateUnorderedDiffs().isEmpty())
nova chamada: assertTrue(new TableDiffer(table(), table()).calculateUnorderedDiffs().isEmpty(), "Era esperado verdadeiro, mas " + result196 + " <new TableDiffer(table(), table()).calculateUnorderedDiffs().isEmpty()> é falso")
chamada antiga: assertTrue(new TableDiffer(table(), otherTableWithDifferentOrder()).calculateUnorderedDiffs().isEmpty())
nova chamada: assertTrue(new TableDiffer(table(), otherTableWithDifferentOrder()).calculateUnorderedDiffs().isEmpty(), "Era esperado verdadeiro, mas " + result197 + " <new TableDiffer(table(), otherTableWithDifferentOrder()).calculateUnorderedDiffs().isEmpty()> é falso")
chamada antiga: assertEquals(emptyList(), converter.toList(table, Integer.class))
nova chamada: assertEquals(emptyList(), converter.toList(table, Integer.class), "Era esperado valores iguais, mas " + result198 + " <emptyList()> é diferente de " + result199 + " <converter.toList(table, Integer.class)>")
chamada antiga: assertEquals(emptyList(), converter.convert(table, LIST_OF_INT))
nova chamada: assertEquals(emptyList(), converter.convert(table, LIST_OF_INT), "Era esperado valores iguais, mas " + result200 + " <emptyList()> é diferente de " + result201 + " <converter.convert(table, LIST_OF_INT)>")
chamada antiga: assertEquals(emptyList(), converter.toLists(table, Integer.class))
nova chamada: assertEquals(emptyList(), converter.toLists(table, Integer.class), "Era esperado valores iguais, mas " + result202 + " <emptyList()> é diferente de " + result203 + " <converter.toLists(table, Integer.class)>")
chamada antiga: assertEquals(emptyList(), converter.convert(table, LIST_OF_LIST_OF_INT))
nova chamada: assertEquals(emptyList(), converter.convert(table, LIST_OF_LIST_OF_INT), "Era esperado valores iguais, mas " + result204 + " <emptyList()> é diferente de " + result205 + " <converter.convert(table, LIST_OF_LIST_OF_INT)>")
chamada antiga: assertEquals(emptyList(), converter.convert(table, LIST_OF_AUTHOR))
nova chamada: assertEquals(emptyList(), converter.convert(table, LIST_OF_AUTHOR), "Era esperado valores iguais, mas " + result206 + " <emptyList()> é diferente de " + result207 + " <converter.convert(table, LIST_OF_AUTHOR)>")
chamada antiga: assertEquals(emptyMap(), converter.toMap(table, Integer.class, Integer.class))
nova chamada: assertEquals(emptyMap(), converter.toMap(table, Integer.class, Integer.class), "Era esperado valores iguais, mas " + result208 + " <emptyMap()> é diferente de " + result209 + " <converter.toMap(table, Integer.class, Integer.class)>")
chamada antiga: assertEquals(emptyMap(), converter.convert(table, MAP_OF_INT_TO_INT))
nova chamada: assertEquals(emptyMap(), converter.convert(table, MAP_OF_INT_TO_INT), "Era esperado valores iguais, mas " + result210 + " <emptyMap()> é diferente de " + result211 + " <converter.convert(table, MAP_OF_INT_TO_INT)>")
chamada antiga: assertEquals(emptyMap(), converter.toMap(table, Integer.class, Integer.class))
nova chamada: assertEquals(emptyMap(), converter.toMap(table, Integer.class, Integer.class), "Era esperado valores iguais, mas " + result212 + " <emptyMap()> é diferente de " + result213 + " <converter.toMap(table, Integer.class, Integer.class)>")
chamada antiga: assertEquals(emptyMap(), converter.convert(table, MAP_OF_INT_TO_INT))
nova chamada: assertEquals(emptyMap(), converter.convert(table, MAP_OF_INT_TO_INT), "Era esperado valores iguais, mas " + result214 + " <emptyMap()> é diferente de " + result215 + " <converter.convert(table, MAP_OF_INT_TO_INT)>")
chamada antiga: assertEquals(emptyList(), converter.toMaps(table, Integer.class, Integer.class))
nova chamada: assertEquals(emptyList(), converter.toMaps(table, Integer.class, Integer.class), "Era esperado valores iguais, mas " + result216 + " <emptyList()> é diferente de " + result217 + " <converter.toMaps(table, Integer.class, Integer.class)>")
chamada antiga: assertEquals(emptyList(), converter.convert(table, LIST_OF_MAP_OF_INT_TO_INT))
nova chamada: assertEquals(emptyList(), converter.convert(table, LIST_OF_MAP_OF_INT_TO_INT), "Era esperado valores iguais, mas " + result218 + " <emptyList()> é diferente de " + result219 + " <converter.convert(table, LIST_OF_MAP_OF_INT_TO_INT)>")
chamada antiga: assertEquals(emptyList(), converter.toMaps(table, String.class, Integer.class))
nova chamada: assertEquals(emptyList(), converter.toMaps(table, String.class, Integer.class), "Era esperado valores iguais, mas " + result220 + " <emptyList()> é diferente de " + result221 + " <converter.toMaps(table, String.class, Integer.class)>")
chamada antiga: assertEquals(emptyList(), converter.convert(table, LIST_OF_MAP_OF_STRING_TO_INT))
nova chamada: assertEquals(emptyList(), converter.convert(table, LIST_OF_MAP_OF_STRING_TO_INT), "Era esperado valores iguais, mas " + result222 + " <emptyList()> é diferente de " + result223 + " <converter.convert(table, LIST_OF_MAP_OF_STRING_TO_INT)>")
chamada antiga: assertSame(table, converter.convert(table, DataTable.class))
nova chamada: assertSame(table, converter.convert(table, DataTable.class), "Era esperado objetos iguais, mas  table é diferente de " + result224 + " <converter.convert(table, DataTable.class)>")
chamada antiga: assertEquals(expected, converter.toList(table, String.class))
nova chamada: assertEquals(expected, converter.toList(table, String.class), "Era esperado valores iguais, mas  expected é diferente de " + result225 + " <converter.toList(table, String.class)>")
chamada antiga: assertEquals(expected, converter.convert(table, List.class))
nova chamada: assertEquals(expected, converter.convert(table, List.class), "Era esperado valores iguais, mas  expected é diferente de " + result226 + " <converter.convert(table, List.class)>")
chamada antiga: assertEquals(expected, converter.toList(table, OPTIONAL_BIG_DECIMAL))
nova chamada: assertEquals(expected, converter.toList(table, OPTIONAL_BIG_DECIMAL), "Era esperado valores iguais, mas  expected é diferente de " + result227 + " <converter.toList(table, OPTIONAL_BIG_DECIMAL)>")
chamada antiga: assertEquals(expected, converter.toMaps(table, OPTIONAL_STRING, OPTIONAL_BIG_INTEGER))
nova chamada: assertEquals(expected, converter.toMaps(table, OPTIONAL_STRING, OPTIONAL_BIG_INTEGER), "Era esperado valores iguais, mas  expected é diferente de " + result228 + " <converter.toMaps(table, OPTIONAL_STRING, OPTIONAL_BIG_INTEGER)>")
chamada antiga: assertEquals(expected, converter.toList(table, Integer.class))
nova chamada: assertEquals(expected, converter.toList(table, Integer.class), "Era esperado valores iguais, mas  expected é diferente de " + result229 + " <converter.toList(table, Integer.class)>")
chamada antiga: assertEquals(expected, converter.convert(table, LIST_OF_INT))
nova chamada: assertEquals(expected, converter.convert(table, LIST_OF_INT), "Era esperado valores iguais, mas  expected é diferente de " + result230 + " <converter.convert(table, LIST_OF_INT)>")
chamada antiga: assertEquals(expected, converter.convert(table, LIST_OF_MAP))
nova chamada: assertEquals(expected, converter.convert(table, LIST_OF_MAP), "Era esperado valores iguais, mas  expected é diferente de " + result231 + " <converter.convert(table, LIST_OF_MAP)>")
chamada antiga: assertEquals(expected, converter.toList(table, Author.class))
nova chamada: assertEquals(expected, converter.toList(table, Author.class), "Era esperado valores iguais, mas  expected é diferente de " + result232 + " <converter.toList(table, Author.class)>")
chamada antiga: assertEquals(expected, converter.convert(table, LIST_OF_AUTHOR))
nova chamada: assertEquals(expected, converter.convert(table, LIST_OF_AUTHOR), "Era esperado valores iguais, mas  expected é diferente de " + result233 + " <converter.convert(table, LIST_OF_AUTHOR)>")
chamada antiga: assertEquals(expected, converter.toList(table, Author.class))
nova chamada: assertEquals(expected, converter.toList(table, Author.class), "Era esperado valores iguais, mas  expected é diferente de " + result234 + " <converter.toList(table, Author.class)>")
chamada antiga: assertEquals(expected, converter.convert(table, LIST_OF_AUTHOR))
nova chamada: assertEquals(expected, converter.convert(table, LIST_OF_AUTHOR), "Era esperado valores iguais, mas  expected é diferente de " + result235 + " <converter.convert(table, LIST_OF_AUTHOR)>")
chamada antiga: assertEquals(expected, converter.toList(table, Author.class))
nova chamada: assertEquals(expected, converter.toList(table, Author.class), "Era esperado valores iguais, mas  expected é diferente de " + result236 + " <converter.toList(table, Author.class)>")
chamada antiga: assertEquals(expected, converter.convert(table, LIST_OF_AUTHOR))
nova chamada: assertEquals(expected, converter.convert(table, LIST_OF_AUTHOR), "Era esperado valores iguais, mas  expected é diferente de " + result237 + " <converter.convert(table, LIST_OF_AUTHOR)>")
chamada antiga: assertEquals(expected, converter.toList(table, Author.class))
nova chamada: assertEquals(expected, converter.toList(table, Author.class), "Era esperado valores iguais, mas  expected é diferente de " + result238 + " <converter.toList(table, Author.class)>")
chamada antiga: assertEquals(expected, converter.convert(table, LIST_OF_AUTHOR))
nova chamada: assertEquals(expected, converter.convert(table, LIST_OF_AUTHOR), "Era esperado valores iguais, mas  expected é diferente de " + result239 + " <converter.convert(table, LIST_OF_AUTHOR)>")
chamada antiga: assertEquals(expected, converter.toList(table, Integer.class))
nova chamada: assertEquals(expected, converter.toList(table, Integer.class), "Era esperado valores iguais, mas  expected é diferente de " + result240 + " <converter.toList(table, Integer.class)>")
chamada antiga: assertEquals(expected, converter.convert(table, LIST_OF_INT))
nova chamada: assertEquals(expected, converter.convert(table, LIST_OF_INT), "Era esperado valores iguais, mas  expected é diferente de " + result241 + " <converter.convert(table, LIST_OF_INT)>")
chamada antiga: assertEquals(expected, converter.toList(table, Integer.class))
nova chamada: assertEquals(expected, converter.toList(table, Integer.class), "Era esperado valores iguais, mas  expected é diferente de " + result242 + " <converter.toList(table, Integer.class)>")
chamada antiga: assertEquals(expected, converter.convert(table, LIST_OF_INT))
nova chamada: assertEquals(expected, converter.convert(table, LIST_OF_INT), "Era esperado valores iguais, mas  expected é diferente de " + result243 + " <converter.convert(table, LIST_OF_INT)>")
chamada antiga: assertEquals(expected, converter.toList(table, OPTIONAL_STRING))
nova chamada: assertEquals(expected, converter.toList(table, OPTIONAL_STRING), "Era esperado valores iguais, mas  expected é diferente de " + result244 + " <converter.toList(table, OPTIONAL_STRING)>")
chamada antiga: assertEquals(expected, converter.convert(table, LIST_OF_OPTIONAL_STRING))
nova chamada: assertEquals(expected, converter.convert(table, LIST_OF_OPTIONAL_STRING), "Era esperado valores iguais, mas  expected é diferente de " + result245 + " <converter.convert(table, LIST_OF_OPTIONAL_STRING)>")
chamada antiga: assertEquals(expected, converter.toList(table, OPTIONAL_STRING))
nova chamada: assertEquals(expected, converter.toList(table, OPTIONAL_STRING), "Era esperado valores iguais, mas  expected é diferente de " + result246 + " <converter.toList(table, OPTIONAL_STRING)>")
chamada antiga: assertEquals(expected, converter.convert(table, LIST_OF_OPTIONAL_STRING))
nova chamada: assertEquals(expected, converter.convert(table, LIST_OF_OPTIONAL_STRING), "Era esperado valores iguais, mas  expected é diferente de " + result247 + " <converter.convert(table, LIST_OF_OPTIONAL_STRING)>")
chamada antiga: assertEquals(expected, converter.convert(table, LIST_OF_LIST))
nova chamada: assertEquals(expected, converter.convert(table, LIST_OF_LIST), "Era esperado valores iguais, mas  expected é diferente de " + result248 + " <converter.convert(table, LIST_OF_LIST)>")
chamada antiga: assertEquals(expected, converter.toLists(table, String.class))
nova chamada: assertEquals(expected, converter.toLists(table, String.class), "Era esperado valores iguais, mas  expected é diferente de " + result249 + " <converter.toLists(table, String.class)>")
chamada antiga: assertEquals(expected, converter.toLists(table, Integer.class))
nova chamada: assertEquals(expected, converter.toLists(table, Integer.class), "Era esperado valores iguais, mas  expected é diferente de " + result250 + " <converter.toLists(table, Integer.class)>")
chamada antiga: assertEquals(expected, converter.convert(table, LIST_OF_LIST_OF_INT))
nova chamada: assertEquals(expected, converter.convert(table, LIST_OF_LIST_OF_INT), "Era esperado valores iguais, mas  expected é diferente de " + result251 + " <converter.convert(table, LIST_OF_LIST_OF_INT)>")
chamada antiga: assertEquals(expected, converter.toMap(table, String.class, String.class))
nova chamada: assertEquals(expected, converter.toMap(table, String.class, String.class), "Era esperado valores iguais, mas  expected é diferente de " + result252 + " <converter.toMap(table, String.class, String.class)>")
chamada antiga: assertEquals(expected, converter.convert(table, Map.class))
nova chamada: assertEquals(expected, converter.convert(table, Map.class), "Era esperado valores iguais, mas  expected é diferente de " + result253 + " <converter.convert(table, Map.class)>")
chamada antiga: assertEquals(expected, converter.toMap(table, String.class, String.class))
nova chamada: assertEquals(expected, converter.toMap(table, String.class, String.class), "Era esperado valores iguais, mas  expected é diferente de " + result254 + " <converter.toMap(table, String.class, String.class)>")
chamada antiga: assertEquals(expected, converter.convert(table, Map.class))
nova chamada: assertEquals(expected, converter.convert(table, Map.class), "Era esperado valores iguais, mas  expected é diferente de " + result255 + " <converter.convert(table, Map.class)>")
chamada antiga: assertEquals(expected, converter.toMap(table, Integer.class, Integer.class))
nova chamada: assertEquals(expected, converter.toMap(table, Integer.class, Integer.class), "Era esperado valores iguais, mas  expected é diferente de " + result256 + " <converter.toMap(table, Integer.class, Integer.class)>")
chamada antiga: assertEquals(expected, converter.convert(table, MAP_OF_INT_TO_INT))
nova chamada: assertEquals(expected, converter.convert(table, MAP_OF_INT_TO_INT), "Era esperado valores iguais, mas  expected é diferente de " + result257 + " <converter.convert(table, MAP_OF_INT_TO_INT)>")
chamada antiga: assertEquals(expected, converter.toMap(table, AirPortCode.class, Coordinate.class))
nova chamada: assertEquals(expected, converter.toMap(table, AirPortCode.class, Coordinate.class), "Era esperado valores iguais, mas  expected é diferente de " + result258 + " <converter.toMap(table, AirPortCode.class, Coordinate.class)>")
chamada antiga: assertEquals(expected, converter.convert(table, MAP_OF_AIR_PORT_CODE_TO_COORDINATE))
nova chamada: assertEquals(expected, converter.convert(table, MAP_OF_AIR_PORT_CODE_TO_COORDINATE), "Era esperado valores iguais, mas  expected é diferente de " + result259 + " <converter.convert(table, MAP_OF_AIR_PORT_CODE_TO_COORDINATE)>")
chamada antiga: assertEquals(expected, converter.toMap(table, AirPortCode.class, Coordinate.class))
nova chamada: assertEquals(expected, converter.toMap(table, AirPortCode.class, Coordinate.class), "Era esperado valores iguais, mas  expected é diferente de " + result260 + " <converter.toMap(table, AirPortCode.class, Coordinate.class)>")
chamada antiga: assertEquals(expected, converter.convert(table, MAP_OF_AIR_PORT_CODE_TO_COORDINATE))
nova chamada: assertEquals(expected, converter.convert(table, MAP_OF_AIR_PORT_CODE_TO_COORDINATE), "Era esperado valores iguais, mas  expected é diferente de " + result261 + " <converter.convert(table, MAP_OF_AIR_PORT_CODE_TO_COORDINATE)>")
chamada antiga: assertEquals(expected, converter.toMap(table, AirPortCode.class, Coordinate.class))
nova chamada: assertEquals(expected, converter.toMap(table, AirPortCode.class, Coordinate.class), "Era esperado valores iguais, mas  expected é diferente de " + result262 + " <converter.toMap(table, AirPortCode.class, Coordinate.class)>")
chamada antiga: assertEquals(expected, converter.convert(table, MAP_OF_AIR_PORT_CODE_TO_COORDINATE))
nova chamada: assertEquals(expected, converter.convert(table, MAP_OF_AIR_PORT_CODE_TO_COORDINATE), "Era esperado valores iguais, mas  expected é diferente de " + result263 + " <converter.convert(table, MAP_OF_AIR_PORT_CODE_TO_COORDINATE)>")
chamada antiga: assertEquals(expected, converter.toMap(table, AirPortCode.class, Coordinate.class))
nova chamada: assertEquals(expected, converter.toMap(table, AirPortCode.class, Coordinate.class), "Era esperado valores iguais, mas  expected é diferente de " + result264 + " <converter.toMap(table, AirPortCode.class, Coordinate.class)>")
chamada antiga: assertEquals(expected, converter.convert(table, MAP_OF_AIR_PORT_CODE_TO_COORDINATE))
nova chamada: assertEquals(expected, converter.convert(table, MAP_OF_AIR_PORT_CODE_TO_COORDINATE), "Era esperado valores iguais, mas  expected é diferente de " + result265 + " <converter.convert(table, MAP_OF_AIR_PORT_CODE_TO_COORDINATE)>")
chamada antiga: assertEquals(expected, converter.toMap(table, AirPortCode.class, AirPortCode.class))
nova chamada: assertEquals(expected, converter.toMap(table, AirPortCode.class, AirPortCode.class), "Era esperado valores iguais, mas  expected é diferente de " + result266 + " <converter.toMap(table, AirPortCode.class, AirPortCode.class)>")
chamada antiga: assertEquals(expected, converter.convert(table, MAP_OF_AIR_PORT_CODE_TO_AIR_PORT_CODE))
nova chamada: assertEquals(expected, converter.convert(table, MAP_OF_AIR_PORT_CODE_TO_AIR_PORT_CODE), "Era esperado valores iguais, mas  expected é diferente de " + result267 + " <converter.convert(table, MAP_OF_AIR_PORT_CODE_TO_AIR_PORT_CODE)>")
chamada antiga: assertEquals(expected, converter.convert(table, MAP_OF_AIR_PORT_CODE_TO_AIR_PORT_CODE))
nova chamada: assertEquals(expected, converter.convert(table, MAP_OF_AIR_PORT_CODE_TO_AIR_PORT_CODE), "Era esperado valores iguais, mas  expected é diferente de " + result268 + " <converter.convert(table, MAP_OF_AIR_PORT_CODE_TO_AIR_PORT_CODE)>")
chamada antiga: assertEquals(expected, converter.convert(table, MAP_OF_STRING_TO_LIST_OF_DOUBLE))
nova chamada: assertEquals(expected, converter.convert(table, MAP_OF_STRING_TO_LIST_OF_DOUBLE), "Era esperado valores iguais, mas  expected é diferente de " + result269 + " <converter.convert(table, MAP_OF_STRING_TO_LIST_OF_DOUBLE)>")
chamada antiga: assertEquals(expected, converter.convert(table, MAP_OF_STRING_TO_LIST_OF_DATE))
nova chamada: assertEquals(expected, converter.convert(table, MAP_OF_STRING_TO_LIST_OF_DATE), "Era esperado valores iguais, mas  expected é diferente de " + result270 + " <converter.convert(table, MAP_OF_STRING_TO_LIST_OF_DATE)>")
chamada antiga: assertEquals(expected, converter.convert(table, MAP_OF_STRING_TO_LIST_OF_DATE))
nova chamada: assertEquals(expected, converter.convert(table, MAP_OF_STRING_TO_LIST_OF_DATE), "Era esperado valores iguais, mas  expected é diferente de " + result271 + " <converter.convert(table, MAP_OF_STRING_TO_LIST_OF_DATE)>")
chamada antiga: assertEquals(expected, converter.convert(table, MAP_OF_STRING_TO_LIST_OF_DOUBLE))
nova chamada: assertEquals(expected, converter.convert(table, MAP_OF_STRING_TO_LIST_OF_DOUBLE), "Era esperado valores iguais, mas  expected é diferente de " + result272 + " <converter.convert(table, MAP_OF_STRING_TO_LIST_OF_DOUBLE)>")
chamada antiga: assertEquals(expected, converter.convert(table, MAP_OF_STRING_TO_MAP_OF_INTEGER_TO_PIECE))
nova chamada: assertEquals(expected, converter.convert(table, MAP_OF_STRING_TO_MAP_OF_INTEGER_TO_PIECE), "Era esperado valores iguais, mas  expected é diferente de " + result273 + " <converter.convert(table, MAP_OF_STRING_TO_MAP_OF_INTEGER_TO_PIECE)>")
chamada antiga: assertEquals(expected, converter.convert(table, MAP_OF_STRING_TO_MAP_OF_STRING_DOUBLE))
nova chamada: assertEquals(expected, converter.convert(table, MAP_OF_STRING_TO_MAP_OF_STRING_DOUBLE), "Era esperado valores iguais, mas  expected é diferente de " + result274 + " <converter.convert(table, MAP_OF_STRING_TO_MAP_OF_STRING_DOUBLE)>")
chamada antiga: assertEquals(expected, converter.toMap(table, String.class, Coordinate.class))
nova chamada: assertEquals(expected, converter.toMap(table, String.class, Coordinate.class), "Era esperado valores iguais, mas  expected é diferente de " + result275 + " <converter.toMap(table, String.class, Coordinate.class)>")
chamada antiga: assertEquals(expected, converter.convert(table, MAP_OF_STRING_TO_COORDINATE))
nova chamada: assertEquals(expected, converter.convert(table, MAP_OF_STRING_TO_COORDINATE), "Era esperado valores iguais, mas  expected é diferente de " + result276 + " <converter.convert(table, MAP_OF_STRING_TO_COORDINATE)>")
chamada antiga: assertEquals(expected, converter.toMap(table, Integer.class, String.class))
nova chamada: assertEquals(expected, converter.toMap(table, Integer.class, String.class), "Era esperado valores iguais, mas  expected é diferente de " + result277 + " <converter.toMap(table, Integer.class, String.class)>")
chamada antiga: assertEquals(expected, converter.convert(table, MAP_OF_INT_TO_STRING))
nova chamada: assertEquals(expected, converter.convert(table, MAP_OF_INT_TO_STRING), "Era esperado valores iguais, mas  expected é diferente de " + result278 + " <converter.convert(table, MAP_OF_INT_TO_STRING)>")
chamada antiga: assertEquals(expected, converter.convert(table, MAP_OF_STRING_TO_MAP))
nova chamada: assertEquals(expected, converter.convert(table, MAP_OF_STRING_TO_MAP), "Era esperado valores iguais, mas  expected é diferente de " + result279 + " <converter.convert(table, MAP_OF_STRING_TO_MAP)>")
chamada antiga: assertEquals(expected, converter.toMaps(table, Integer.class, Integer.class))
nova chamada: assertEquals(expected, converter.toMaps(table, Integer.class, Integer.class), "Era esperado valores iguais, mas  expected é diferente de " + result280 + " <converter.toMaps(table, Integer.class, Integer.class)>")
chamada antiga: assertEquals(expected, converter.convert(table, LIST_OF_MAP_OF_INT_TO_INT))
nova chamada: assertEquals(expected, converter.convert(table, LIST_OF_MAP_OF_INT_TO_INT), "Era esperado valores iguais, mas  expected é diferente de " + result281 + " <converter.convert(table, LIST_OF_MAP_OF_INT_TO_INT)>")
chamada antiga: assertEquals(expected, converter.toMaps(table, Integer.class, Integer.class))
nova chamada: assertEquals(expected, converter.toMaps(table, Integer.class, Integer.class), "Era esperado valores iguais, mas  expected é diferente de " + result282 + " <converter.toMaps(table, Integer.class, Integer.class)>")
chamada antiga: assertEquals(expected, converter.convert(table, LIST_OF_MAP_OF_INT_TO_INT))
nova chamada: assertEquals(expected, converter.convert(table, LIST_OF_MAP_OF_INT_TO_INT), "Era esperado valores iguais, mas  expected é diferente de " + result283 + " <converter.convert(table, LIST_OF_MAP_OF_INT_TO_INT)>")
chamada antiga: assertEquals(expected, converter.convert(table, ChessBoard.class))
nova chamada: assertEquals(expected, converter.convert(table, ChessBoard.class), "Era esperado valores iguais, mas  expected é diferente de " + result284 + " <converter.convert(table, ChessBoard.class)>")
chamada antiga: assertEquals(Optional.empty(), converter.convert(table, OPTIONAL_CHESS_BOARD_TYPE))
nova chamada: assertEquals(Optional.empty(), converter.convert(table, OPTIONAL_CHESS_BOARD_TYPE), "Era esperado valores iguais, mas " + result285 + " <Optional.empty()> é diferente de " + result286 + " <converter.convert(table, OPTIONAL_CHESS_BOARD_TYPE)>")
chamada antiga: assertNull(converter.convert(table, Integer.class))
nova chamada: assertNull(converter.convert(table, Integer.class), "Era esperado nulo, mas " + result287 + " <converter.convert(table, Integer.class)> não é nulo")
chamada antiga: assertEquals(Integer.valueOf(3), converter.convert(table, Integer.class))
nova chamada: assertEquals(Integer.valueOf(3), converter.convert(table, Integer.class), "Era esperado valores iguais, mas " + result288 + " <Integer.valueOf(3)> é diferente de " + result289 + " <converter.convert(table, Integer.class)>")
chamada antiga: assertEquals(Piece.BLACK_BISHOP, converter.convert(table, Piece.class))
nova chamada: assertEquals(Piece.BLACK_BISHOP, converter.convert(table, Piece.class), "Era esperado valores iguais, mas  Piece.BLACK_BISHOP é diferente de " + result290 + " <converter.convert(table, Piece.class)>")
chamada antiga: assertEquals(Piece.BLACK_BISHOP, converter.convert(table, Piece.class))
nova chamada: assertEquals(Piece.BLACK_BISHOP, converter.convert(table, Piece.class), "Era esperado valores iguais, mas  Piece.BLACK_BISHOP é diferente de " + result291 + " <converter.convert(table, Piece.class)>")
chamada antiga: assertEquals(Piece.BLACK_BISHOP, converter.convert(table, Piece.class))
nova chamada: assertEquals(Piece.BLACK_BISHOP, converter.convert(table, Piece.class), "Era esperado valores iguais, mas  Piece.BLACK_BISHOP é diferente de " + result292 + " <converter.convert(table, Piece.class)>")
chamada antiga: assertSame(expected, converter.convert(table, DataTable.class))
nova chamada: assertSame(expected, converter.convert(table, DataTable.class), "Era esperado objetos iguais, mas  expected é diferente de " + result293 + " <converter.convert(table, DataTable.class)>")
chamada antiga: assertEquals(table.transpose(), converter.convert(table, DataTable.class, true))
nova chamada: assertEquals(table.transpose(), converter.convert(table, DataTable.class, true), "Era esperado valores iguais, mas " + result294 + " <table.transpose()> é diferente de " + result295 + " <converter.convert(table, DataTable.class, true)>")
chamada antiga: assertTrue(table.isEmpty())
nova chamada: assertTrue(table.isEmpty(), "Era esperado verdadeiro, mas " + result296 + " <table.isEmpty()> é falso")
chamada antiga: assertTrue(table.cells().isEmpty())
nova chamada: assertTrue(table.cells().isEmpty(), "Era esperado verdadeiro, mas " + result297 + " <table.cells().isEmpty()> é falso")
chamada antiga: assertSame(tableConverter, lowerCaseTable.getTableConverter())
nova chamada: assertSame(tableConverter, lowerCaseTable.getTableConverter(), "Era esperado objetos iguais, mas  tableConverter é diferente de " + result298 + " <lowerCaseTable.getTableConverter()>")
chamada antiga: assertEquals(raw, table.cells())
nova chamada: assertEquals(raw, table.cells(), "Era esperado valores iguais, mas  raw é diferente de " + result299 + " <table.cells()>")
chamada antiga: assertEquals(raw, table.cells())
nova chamada: assertEquals(raw, table.cells(), "Era esperado valores iguais, mas  raw é diferente de " + result300 + " <table.cells()>")
chamada antiga: assertEquals(raw, table.cells())
nova chamada: assertEquals(raw, table.cells(), "Era esperado valores iguais, mas  raw é diferente de " + result301 + " <table.cells()>")
chamada antiga: assertEquals(raw.get(0).get(0), table.cell(0, 0))
nova chamada: assertEquals(raw.get(0).get(0), table.cell(0, 0), "Era esperado valores iguais, mas " + result302 + " <raw.get(0).get(0)> é diferente de " + result303 + " <table.cell(0, 0)>")
chamada antiga: assertEquals(raw.get(0).get(1), table.cell(0, 1))
nova chamada: assertEquals(raw.get(0).get(1), table.cell(0, 1), "Era esperado valores iguais, mas " + result304 + " <raw.get(0).get(1)> é diferente de " + result305 + " <table.cell(0, 1)>")
chamada antiga: assertEquals(raw.get(1).get(0), table.cell(1, 0))
nova chamada: assertEquals(raw.get(1).get(0), table.cell(1, 0), "Era esperado valores iguais, mas " + result306 + " <raw.get(1).get(0)> é diferente de " + result307 + " <table.cell(1, 0)>")
chamada antiga: assertEquals(raw.get(1).get(1), table.cell(1, 1))
nova chamada: assertEquals(raw.get(1).get(1), table.cell(1, 1), "Era esperado valores iguais, mas " + result308 + " <raw.get(1).get(1)> é diferente de " + result309 + " <table.cell(1, 1)>")
chamada antiga: assertEquals(asList(asList("ten", "10"), asList("hundred", "100")), table.subTable(0, 0, 2, 2).cells())
nova chamada: assertEquals(asList(asList("ten", "10"), asList("hundred", "100")), table.subTable(0, 0, 2, 2).cells(), "Era esperado valores iguais, mas " + result310 + " <asList(asList('ten', '10'), asList('hundred', '100'))> é diferente de " + result311 + " <table.subTable(0, 0, 2, 2).cells()>")
chamada antiga: assertEquals(asList(asList("100", "2"), asList("1000", "3")), table.subTable(1, 1).cells())
nova chamada: assertEquals(asList(asList("100", "2"), asList("1000", "3")), table.subTable(1, 1).cells(), "Era esperado valores iguais, mas " + result312 + " <asList(asList('100', '2'), asList('1000', '3'))> é diferente de " + result313 + " <table.subTable(1, 1).cells()>")
chamada antiga: assertEquals(table.cells(), table.subTable(0, 0).cells())
nova chamada: assertEquals(table.cells(), table.subTable(0, 0).cells(), "Era esperado valores iguais, mas " + result314 + " <table.cells()> é diferente de " + result315 + " <table.subTable(0, 0).cells()>")
chamada antiga: assertEquals("ten", table.subTable(0, 0, 3, 3).cell(0, 0))
nova chamada: assertEquals("ten", table.subTable(0, 0, 3, 3).cell(0, 0), "Era esperado valores iguais, mas  'ten' é diferente de " + result316 + " <table.subTable(0, 0, 3, 3).cell(0, 0)>")
chamada antiga: assertEquals("1", table.subTable(0, 0).cell(0, 2))
nova chamada: assertEquals("1", table.subTable(0, 0).cell(0, 2), "Era esperado valores iguais, mas  '1' é diferente de " + result317 + " <table.subTable(0, 0).cell(0, 2)>")
chamada antiga: assertEquals("thousand", table.subTable(0, 0, 3, 3).cell(2, 0))
nova chamada: assertEquals("thousand", table.subTable(0, 0, 3, 3).cell(2, 0), "Era esperado valores iguais, mas  'thousand' é diferente de " + result318 + " <table.subTable(0, 0, 3, 3).cell(2, 0)>")
chamada antiga: assertEquals("3", table.subTable(0, 0).cell(2, 2))
nova chamada: assertEquals("3", table.subTable(0, 0).cell(2, 2), "Era esperado valores iguais, mas  '3' é diferente de " + result319 + " <table.subTable(0, 0).cell(2, 2)>")
chamada antiga: assertEquals(emptyDataTable(), subTable)
nova chamada: assertEquals(emptyDataTable(), subTable, "Era esperado valores iguais, mas " + result320 + " <emptyDataTable()> é diferente de " + " subTable")
chamada antiga: assertTrue(subTable.isEmpty())
nova chamada: assertTrue(subTable.isEmpty(), "Era esperado verdadeiro, mas " + result321 + " <subTable.isEmpty()> é falso")
chamada antiga: assertEquals(0, subTable.height())
nova chamada: assertEquals(0, subTable.height(), "Era esperado valores iguais, mas  0 é diferente de " + result322 + " <subTable.height()>")
chamada antiga: assertEquals(0, subTable.width())
nova chamada: assertEquals(0, subTable.width(), "Era esperado valores iguais, mas  0 é diferente de " + result323 + " <subTable.width()>")
chamada antiga: assertEquals(emptyList(), subTable.cells())
nova chamada: assertEquals(emptyList(), subTable.cells(), "Era esperado valores iguais, mas " + result324 + " <emptyList()> é diferente de " + result325 + " <subTable.cells()>")
chamada antiga: assertEquals(raw.get(2), table.row(2))
nova chamada: assertEquals(raw.get(2), table.row(2), "Era esperado valores iguais, mas " + result326 + " <raw.get(2)> é diferente de " + result327 + " <table.row(2)>")
chamada antiga: assertEquals(asList(asList("hundred", "100"), asList("thousand", "1000")), table.rows(1).cells())
nova chamada: assertEquals(asList(asList("hundred", "100"), asList("thousand", "1000")), table.rows(1).cells(), "Era esperado valores iguais, mas " + result328 + " <asList(asList('hundred', '100'), asList('thousand', '1000'))> é diferente de " + result329 + " <table.rows(1).cells()>")
chamada antiga: assertEquals(DataTable.create(singletonList(asList("hundred", "100"))), table.rows(1, 2))
nova chamada: assertEquals(DataTable.create(singletonList(asList("hundred", "100"))), table.rows(1, 2), "Era esperado valores iguais, mas " + result330 + " <DataTable.create(singletonList(asList('hundred', '100')))> é diferente de " + result331 + " <table.rows(1, 2)>")
chamada antiga: assertEquals(asList("100", "1000"), table.column(1))
nova chamada: assertEquals(asList("100", "1000"), table.column(1), "Era esperado valores iguais, mas " + result332 + " <asList('100', '1000')> é diferente de " + result333 + " <table.column(1)>")
chamada antiga: assertEquals(asList("thousand", "1000", "3"), table.column(1))
nova chamada: assertEquals(asList("thousand", "1000", "3"), table.column(1), "Era esperado valores iguais, mas " + result334 + " <asList('thousand', '1000', '3')> é diferente de " + result335 + " <table.column(1)>")
chamada antiga: assertEquals(asList(asList("100", "2"), asList("1000", "3")), table.columns(1).cells())
nova chamada: assertEquals(asList(asList("100", "2"), asList("1000", "3")), table.columns(1).cells(), "Era esperado valores iguais, mas " + result336 + " <asList(asList('100', '2'), asList('1000', '3'))> é diferente de " + result337 + " <table.columns(1).cells()>")
chamada antiga: assertEquals(DataTable.create(asList(singletonList("100"), singletonList("1000"))), table.columns(1, 2))
nova chamada: assertEquals(DataTable.create(asList(singletonList("100"), singletonList("1000"))), table.columns(1, 2), "Era esperado valores iguais, mas " + result338 + " <DataTable.create(asList(singletonList('100'), singletonList('1000')))> é diferente de " + result339 + " <table.columns(1, 2)>")
chamada antiga: assertEquals(raw, table.asLists())
nova chamada: assertEquals(raw, table.asLists(), "Era esperado valores iguais, mas  raw é diferente de " + result340 + " <table.asLists()>")
chamada antiga: assertTrue(table.isEmpty())
nova chamada: assertTrue(table.isEmpty(), "Era esperado verdadeiro, mas " + result341 + " <table.isEmpty()> é falso")
chamada antiga: assertTrue(table.cells().isEmpty())
nova chamada: assertTrue(table.cells().isEmpty(), "Era esperado verdadeiro, mas " + result342 + " <table.cells().isEmpty()> é falso")
chamada antiga: assertEquals("" + "| one  | four  | seven  |\n" + "| 4444 | 55555 | 666666 |\n", other.toString())
nova chamada: assertEquals("" + "| one  | four  | seven  |\n" + "| 4444 | 55555 | 666666 |\n", other.toString(), "Era esperado valores iguais, mas  '' + '| one  | four  | seven  |\n' + '| 4444 | 55555 | 666666 |\n' é diferente de " + result343 + " <other.toString()>")
chamada antiga: assertEquals(1L, table.convert(Long.class, false))
nova chamada: assertEquals(1L, table.convert(Long.class, false), "Era esperado valores iguais, mas  1L é diferente de " + result344 + " <table.convert(Long.class, false)>")
chamada antiga: assertEquals(1L, table.<Long>convert((Type) Long.class, false))
nova chamada: assertEquals(1L, table.<Long>convert((Type) Long.class, false), "Era esperado valores iguais, mas  1L é diferente de " + result345 + " <table.<Long>convert((Type) Long.class, false)>")
chamada antiga: assertEquals(asList("1", "100", "2", "1000"), table.values())
nova chamada: assertEquals(asList("1", "100", "2", "1000"), table.values(), "Era esperado valores iguais, mas " + result346 + " <asList('1', '100', '2', '1000')> é diferente de " + result347 + " <table.values()>")
chamada antiga: assertEquals(asList(1L, 2L), table.asList(Long.class))
nova chamada: assertEquals(asList(1L, 2L), table.asList(Long.class), "Era esperado valores iguais, mas " + result348 + " <asList(1L, 2L)> é diferente de " + result349 + " <table.asList(Long.class)>")
chamada antiga: assertEquals(asList(1L, 2L), table.asList((Type) Long.class))
nova chamada: assertEquals(asList(1L, 2L), table.asList((Type) Long.class), "Era esperado valores iguais, mas " + result350 + " <asList(1L, 2L)> é diferente de " + result351 + " <table.asList((Type) Long.class)>")
chamada antiga: assertEquals(asList("1", "2"), table.asList())
nova chamada: assertEquals(asList("1", "2"), table.asList(), "Era esperado valores iguais, mas " + result352 + " <asList('1', '2')> é diferente de " + result353 + " <table.asList()>")
chamada antiga: assertEquals(asList(asList(1L, 100L), asList(2L, 1000L)), table.asLists(Long.class))
nova chamada: assertEquals(asList(asList(1L, 100L), asList(2L, 1000L)), table.asLists(Long.class), "Era esperado valores iguais, mas " + result354 + " <asList(asList(1L, 100L), asList(2L, 1000L))> é diferente de " + result355 + " <table.asLists(Long.class)>")
chamada antiga: assertEquals(asList(asList(1L, 100L), asList(2L, 1000L)), table.asLists((Type) Long.class))
nova chamada: assertEquals(asList(asList(1L, 100L), asList(2L, 1000L)), table.asLists((Type) Long.class), "Era esperado valores iguais, mas " + result356 + " <asList(asList(1L, 100L), asList(2L, 1000L))> é diferente de " + result357 + " <table.asLists((Type) Long.class)>")
chamada antiga: assertEquals(raw, table.asLists())
nova chamada: assertEquals(raw, table.asLists(), "Era esperado valores iguais, mas  raw é diferente de " + result358 + " <table.asLists()>")
chamada antiga: assertEquals(expected, table.asMaps(String.class, Long.class))
nova chamada: assertEquals(expected, table.asMaps(String.class, Long.class), "Era esperado valores iguais, mas  expected é diferente de " + result359 + " <table.asMaps(String.class, Long.class)>")
chamada antiga: assertEquals(expected, table.asMaps((Type) String.class, (Type) Long.class))
nova chamada: assertEquals(expected, table.asMaps((Type) String.class, (Type) Long.class), "Era esperado valores iguais, mas  expected é diferente de " + result360 + " <table.asMaps((Type) String.class, (Type) Long.class)>")
chamada antiga: assertEquals(singletonList(expected), table.asMaps())
nova chamada: assertEquals(singletonList(expected), table.asMaps(), "Era esperado valores iguais, mas " + result361 + " <singletonList(expected)> é diferente de " + result362 + " <table.asMaps()>")
chamada antiga: assertEquals(singletonList(expected), table.asMaps())
nova chamada: assertEquals(singletonList(expected), table.asMaps(), "Era esperado valores iguais, mas " + result363 + " <singletonList(expected)> é diferente de " + result364 + " <table.asMaps()>")
chamada antiga: assertEquals(singletonList(expected), table.asMaps())
nova chamada: assertEquals(singletonList(expected), table.asMaps(), "Era esperado valores iguais, mas " + result365 + " <singletonList(expected)> é diferente de " + result366 + " <table.asMaps()>")
chamada antiga: assertEquals(table.entries(), table.asMaps())
nova chamada: assertEquals(table.entries(), table.asMaps(), "Era esperado valores iguais, mas " + result367 + " <table.entries()> é diferente de " + result368 + " <table.asMaps()>")
chamada antiga: assertEquals(expected, table.asMap(String.class, Long.class))
nova chamada: assertEquals(expected, table.asMap(String.class, Long.class), "Era esperado valores iguais, mas  expected é diferente de " + result369 + " <table.asMap(String.class, Long.class)>")
chamada antiga: assertEquals(expected, table.asMap((Type) String.class, (Type) Long.class))
nova chamada: assertEquals(expected, table.asMap((Type) String.class, (Type) Long.class), "Era esperado valores iguais, mas  expected é diferente de " + result370 + " <table.asMap((Type) String.class, (Type) Long.class)>")
chamada antiga: assertEquals(expected, table.asMap())
nova chamada: assertEquals(expected, table.asMap(), "Era esperado valores iguais, mas  expected é diferente de " + result371 + " <table.asMap()>")
chamada antiga: assertEquals(createSimpleTable(), createSimpleTable())
nova chamada: assertEquals(createSimpleTable(), createSimpleTable(), "Era esperado valores iguais, mas " + result372 + " <createSimpleTable()> é diferente de " + result373 + " <createSimpleTable()>")
chamada antiga: assertEquals(createSimpleTable().hashCode(), createSimpleTable().hashCode())
nova chamada: assertEquals(createSimpleTable().hashCode(), createSimpleTable().hashCode(), "Era esperado valores iguais, mas " + result374 + " <createSimpleTable().hashCode()> é diferente de " + result375 + " <createSimpleTable().hashCode()>")
chamada antiga: assertEquals(createSimpleTable().transpose(), createSimpleTable().transpose())
nova chamada: assertEquals(createSimpleTable().transpose(), createSimpleTable().transpose(), "Era esperado valores iguais, mas " + result376 + " <createSimpleTable().transpose()> é diferente de " + result377 + " <createSimpleTable().transpose()>")
chamada antiga: assertEquals(createSimpleTable().transpose().hashCode(), createSimpleTable().transpose().hashCode())
nova chamada: assertEquals(createSimpleTable().transpose().hashCode(), createSimpleTable().transpose().hashCode(), "Era esperado valores iguais, mas " + result378 + " <createSimpleTable().transpose().hashCode()> é diferente de " + result379 + " <createSimpleTable().transpose().hashCode()>")
chamada antiga: assertNotEquals(createSimpleTable(), createSimpleNumberTable())
nova chamada: assertNotEquals(createSimpleTable(), createSimpleNumberTable(), "Era esperado valores diferentes, mas " + result380 + " <createSimpleTable()> é igual a " + result381 + " <createSimpleNumberTable()>")
chamada antiga: assertNotEquals(createSimpleTable().hashCode(), createSimpleNumberTable().hashCode())
nova chamada: assertNotEquals(createSimpleTable().hashCode(), createSimpleNumberTable().hashCode(), "Era esperado valores diferentes, mas " + result382 + " <createSimpleTable().hashCode()> é igual a " + result383 + " <createSimpleNumberTable().hashCode()>")
chamada antiga: assertNotEquals(createSimpleTable().transpose(), createSimpleNumberTable().transpose())
nova chamada: assertNotEquals(createSimpleTable().transpose(), createSimpleNumberTable().transpose(), "Era esperado valores diferentes, mas " + result384 + " <createSimpleTable().transpose()> é igual a " + result385 + " <createSimpleNumberTable().transpose()>")
chamada antiga: assertNotEquals(createSimpleTable().transpose().hashCode(), createSimpleNumberTable().transpose().hashCode())
nova chamada: assertNotEquals(createSimpleTable().transpose().hashCode(), createSimpleNumberTable().transpose().hashCode(), "Era esperado valores diferentes, mas " + result386 + " <createSimpleTable().transpose().hashCode()> é igual a " + result387 + " <createSimpleNumberTable().transpose().hashCode()>")
chamada antiga: assertEquals(expected, appendable.toString())
nova chamada: assertEquals(expected, appendable.toString(), "Era esperado valores iguais, mas  expected é diferente de " + result388 + " <appendable.toString()>")
chamada antiga: assertEquals(expected, appendable.toString())
nova chamada: assertEquals(expected, appendable.toString(), "Era esperado valores iguais, mas  expected é diferente de " + result389 + " <appendable.toString()>")
chamada antiga: assertSame(table, table.transpose().transpose())
nova chamada: assertSame(table, table.transpose().transpose(), "Era esperado objetos iguais, mas  table é diferente de " + result390 + " <table.transpose().transpose()>")
chamada antiga: assertEquals("| hello |\n", formatter.format(table))
nova chamada: assertEquals("| hello |\n", formatter.format(table), "Era esperado valores iguais, mas  '| hello |\n' é diferente de " + result391 + " <formatter.format(table)>")
chamada antiga: assertEquals("| hello |\n", stringBuilder.toString())
nova chamada: assertEquals("| hello |\n", stringBuilder.toString(), "Era esperado valores iguais, mas  '| hello |\n' é diferente de " + result392 + " <stringBuilder.toString()>")
chamada antiga: assertEquals("| hello |\n", appendable.toString())
nova chamada: assertEquals("| hello |\n", appendable.toString(), "Era esperado valores iguais, mas  '| hello |\n' é diferente de " + result393 + " <appendable.toString()>")
chamada antiga: assertEquals("" + "| 1 | 1 | 1 |\n" + "| 4 | 5 | 6 |\n" + "| 7 | 8 | 9 |\n", formatter.format(table))
nova chamada: assertEquals("" + "| 1 | 1 | 1 |\n" + "| 4 | 5 | 6 |\n" + "| 7 | 8 | 9 |\n", formatter.format(table), "Era esperado valores iguais, mas  '' + '| 1 | 1 | 1 |\n' + '| 4 | 5 | 6 |\n' + '| 7 | 8 | 9 |\n' é diferente de " + result394 + " <formatter.format(table)>")
chamada antiga: assertEquals("|  |\n", formatter.format(table))
nova chamada: assertEquals("|  |\n", formatter.format(table), "Era esperado valores iguais, mas  '|  |\n' é diferente de " + result395 + " <formatter.format(table)>")
chamada antiga: assertEquals("| [empty] |\n", formatter.format(table))
nova chamada: assertEquals("| [empty] |\n", formatter.format(table), "Era esperado valores iguais, mas  '| [empty] |\n' é diferente de " + result396 + " <formatter.format(table)>")
chamada antiga: assertEquals("" + "| \\| |\n" + "| \\\\ |\n" + "| \\n |\n", formatter.format(table))
nova chamada: assertEquals("" + "| \\| |\n" + "| \\\\ |\n" + "| \\n |\n", formatter.format(table), "Era esperado valores iguais, mas  '' + '| \\| |\n' + '| \\\\ |\n' + '| \\n |\n' é diferente de " + result397 + " <formatter.format(table)>")
chamada antiga: assertEquals("    | Hello |\n", formatter.format(table))
nova chamada: assertEquals("    | Hello |\n", formatter.format(table), "Era esperado valores iguais, mas  '    | Hello |\n' é diferente de " + result398 + " <formatter.format(table)>")
chamada antiga: assertEquals("" + "+ | 1 | 1 | 1 |\n" + "- | 4 | 5 | 6 |\n" + "  | 7 | 8 | 9 |\n", formatter.format(table))
nova chamada: assertEquals("" + "+ | 1 | 1 | 1 |\n" + "- | 4 | 5 | 6 |\n" + "  | 7 | 8 | 9 |\n", formatter.format(table), "Era esperado valores iguais, mas  '' + '+ | 1 | 1 | 1 |\n' + '- | 4 | 5 | 6 |\n' + '  | 7 | 8 | 9 |\n' é diferente de " + result399 + " <formatter.format(table)>")
chamada antiga: assertEquals("| | |\n", formatter.format(table))
nova chamada: assertEquals("| | |\n", formatter.format(table), "Era esperado valores iguais, mas  '| | |\n' é diferente de " + result400 + " <formatter.format(table)>")
chamada antiga: assertEquals(new BigDecimal("1042.0000000000000000000002"), english.parseBigDecimal("1,042.0000000000000000000002"))
nova chamada: assertEquals(new BigDecimal("1042.0000000000000000000002"), english.parseBigDecimal("1,042.0000000000000000000002"), "Era esperado valores iguais, mas  new BigDecimal('1042.0000000000000000000002') é diferente de " + result401 + " <english.parseBigDecimal('1,042.0000000000000000000002')>")
chamada antiga: assertEquals(new BigDecimal("1042.0000000000000000000002"), german.parseBigDecimal("1.042,0000000000000000000002"))
nova chamada: assertEquals(new BigDecimal("1042.0000000000000000000002"), german.parseBigDecimal("1.042,0000000000000000000002"), "Era esperado valores iguais, mas  new BigDecimal('1042.0000000000000000000002') é diferente de " + result402 + " <german.parseBigDecimal('1.042,0000000000000000000002')>")
chamada antiga: assertAll(() -> assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("Instantiation of 'some.bogus.Class' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor."))), () -> assertThat("Unexpected exception cause class", actualThrown.getCause(), isA(ClassNotFoundException.class)))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("Instantiation of 'some.bogus.Class' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor."))), () -> assertThat("Unexpected exception cause class", actualThrown.getCause(), isA(ClassNotFoundException.class)))
chamada antiga: assertAll(() -> assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("Instantiation of 'java.lang.String' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor."))), () -> assertThat("Unexpected exception cause class", actualThrown.getCause(), isA(ClassCastException.class)))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("Instantiation of 'java.lang.String' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor."))), () -> assertThat("Unexpected exception cause class", actualThrown.getCause(), isA(ClassCastException.class)))
chamada antiga: assertAll(() -> assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("Instantiation of 'io.cucumber.guice.InjectorSourceFactoryTest$PrivateConstructor' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor."))), () -> assertThat("Unexpected exception cause class", actualThrown.getCause(), isA(NoSuchMethodException.class)))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("Instantiation of 'io.cucumber.guice.InjectorSourceFactoryTest$PrivateConstructor' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor."))), () -> assertThat("Unexpected exception cause class", actualThrown.getCause(), isA(NoSuchMethodException.class)))
chamada antiga: assertAll(() -> assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("Instantiation of 'io.cucumber.guice.InjectorSourceFactoryTest$NoDefaultConstructor' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor."))), () -> assertThat("Unexpected exception cause class", actualThrown.getCause(), isA(NoSuchMethodException.class)))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("Instantiation of 'io.cucumber.guice.InjectorSourceFactoryTest$NoDefaultConstructor' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor."))), () -> assertThat("Unexpected exception cause class", actualThrown.getCause(), isA(NoSuchMethodException.class)))
chamada antiga: assertAll(() -> assertDoesNotMatch(matcher, arg), () -> assertMismatchDescription("was null", matcher, arg))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertDoesNotMatch(matcher, arg), () -> assertMismatchDescription("was null", matcher, arg))
chamada antiga: assertAll(() -> assertDoesNotMatch(matcher, arg), () -> assertMismatchDescription("collection did not contain more than one element <[foo]>", matcher, arg))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertDoesNotMatch(matcher, arg), () -> assertMismatchDescription("collection did not contain more than one element <[foo]>", matcher, arg))
chamada antiga: assertAll(() -> assertDoesNotMatch(matcher, arg), () -> assertMismatchDescription("collection contained null element <[foo, null]>", matcher, arg))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertDoesNotMatch(matcher, arg), () -> assertMismatchDescription("collection contained null element <[foo, null]>", matcher, arg))
chamada antiga: assertAll(() -> assertDoesNotMatch(matcher, arg), () -> assertMismatchDescription("collection contained elements that are not unique <[foo, foo]>", matcher, arg))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertDoesNotMatch(matcher, arg), () -> assertMismatchDescription("collection contained elements that are not unique <[foo, foo]>", matcher, arg))
chamada antiga: assertAll(() -> assertDoesNotMatch(matcher, arg), () -> assertMismatchDescription("collection contained elements that are not unique <[foo, bar, foo]>", matcher, arg))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertDoesNotMatch(matcher, arg), () -> assertMismatchDescription("collection contained elements that are not unique <[foo, bar, foo]>", matcher, arg))
chamada antiga: assertAll(() -> assertDoesNotMatch(matcher, arg), () -> assertMismatchDescription("collection contained elements that are not unique <[foo, foo, foo]>", matcher, arg))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertDoesNotMatch(matcher, arg), () -> assertMismatchDescription("collection contained elements that are not unique <[foo, foo, foo]>", matcher, arg))
chamada antiga: assertAll(() -> assertDoesNotMatch(matcher, arg), () -> assertMismatchDescription("was null", matcher, arg))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertDoesNotMatch(matcher, arg), () -> assertMismatchDescription("was null", matcher, arg))
chamada antiga: assertAll(() -> assertDoesNotMatch(matcher, arg), () -> assertMismatchDescription("collection did not contain more than one element <[foo]>", matcher, arg))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertDoesNotMatch(matcher, arg), () -> assertMismatchDescription("collection did not contain more than one element <[foo]>", matcher, arg))
chamada antiga: assertAll(() -> assertDoesNotMatch(matcher, arg), () -> assertMismatchDescription("collection contained null element <[null, null]>", matcher, arg))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertDoesNotMatch(matcher, arg), () -> assertMismatchDescription("collection contained null element <[null, null]>", matcher, arg))
chamada antiga: assertAll(() -> assertDoesNotMatch(matcher, arg), () -> assertMismatchDescription("collection contained elements that are not equal <[foo, bar]>", matcher, arg))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertDoesNotMatch(matcher, arg), () -> assertMismatchDescription("collection contained elements that are not equal <[foo, bar]>", matcher, arg))
chamada antiga: assertAll(() -> assertDoesNotMatch(matcher, arg), () -> assertMismatchDescription("collection contained elements that are not equal <[foo, foo, bar]>", matcher, arg))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertDoesNotMatch(matcher, arg), () -> assertMismatchDescription("collection contained elements that are not equal <[foo, foo, bar]>", matcher, arg))
chamada antiga: assertAll(() -> assertDoesNotMatch(matcher, arg), () -> assertMismatchDescription("collection contained elements that are not equal <[foo, bar, baz]>", matcher, arg))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertDoesNotMatch(matcher, arg), () -> assertMismatchDescription("collection contained elements that are not equal <[foo, bar, baz]>", matcher, arg))
chamada antiga: assertAll(() -> assertThat(list.size(), equalTo(1)), () -> assertThat(list.get(0), equalTo(element)))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat(list.size(), equalTo(1)), () -> assertThat(list.get(0), equalTo(element)))
chamada antiga: assertTrue(factory.addClass(YourInjectorSource.class))
nova chamada: assertTrue(factory.addClass(YourInjectorSource.class), "Era esperado verdadeiro, mas " + result403 + " <factory.addClass(YourInjectorSource.class)> é falso")
chamada antiga: assertTrue(factory.addClass(YourInjectorSource.class))
nova chamada: assertTrue(factory.addClass(YourInjectorSource.class), "Era esperado verdadeiro, mas " + result404 + " <factory.addClass(YourInjectorSource.class)> é falso")
chamada antiga: assertTrue(factory.addClass(YourInjectorSource.class))
nova chamada: assertTrue(factory.addClass(YourInjectorSource.class), "Era esperado verdadeiro, mas " + result405 + " <factory.addClass(YourInjectorSource.class)> é falso")
chamada antiga: assertTrue(factory.addClass(YourInjectorSource.class))
nova chamada: assertTrue(factory.addClass(YourInjectorSource.class), "Era esperado verdadeiro, mas " + result406 + " <factory.addClass(YourInjectorSource.class)> é falso")
chamada antiga: assertEquals(n, belly.getCukes())
nova chamada: assertEquals(n, belly.getCukes(), "Era esperado valores iguais, mas  n é diferente de " + result407 + " <belly.getCukes()>")
chamada antiga: assertEquals(42, cukeCount)
nova chamada: assertEquals(42, cukeCount, "Era esperado valores iguais, mas  42 é diferente de " + " cukeCount")
chamada antiga: assertEquals("LHR", flight.from)
nova chamada: assertEquals("LHR", flight.from, "Era esperado valores iguais, mas  'LHR' é diferente de " + " flight.from")
chamada antiga: assertEquals("CDG", flight.to)
nova chamada: assertEquals("CDG", flight.to, "Era esperado valores iguais, mas  'CDG' é diferente de " + " flight.to")
chamada antiga: assertEquals(45, delay)
nova chamada: assertEquals(45, delay, "Era esperado valores iguais, mas  45 é diferente de " + " delay")
chamada antiga: assertEquals(expectedCount, this.count)
nova chamada: assertEquals(expectedCount, this.count, "Era esperado valores iguais, mas  expectedCount é diferente de " + " this.count")
chamada antiga: assertEquals(expected, toTranspose.transpose())
nova chamada: assertEquals(expected, toTranspose.transpose(), "Era esperado valores iguais, mas  expected é diferente de " + result408 + " <toTranspose.transpose()>")
chamada antiga: assertNull(options.objectFactory())
nova chamada: assertNull(options.objectFactory(), "Era esperado nulo, mas " + result409 + " <options.objectFactory()> não é nulo")
chamada antiga: assertNotNull(options.objectFactory())
nova chamada: assertNotNull(options.objectFactory(), "Era esperado não nulo, mas " + result410 + " <options.objectFactory()> é nulo")
chamada antiga: assertEquals(TestObjectFactory.class, options.objectFactory())
nova chamada: assertEquals(TestObjectFactory.class, options.objectFactory(), "Era esperado valores iguais, mas  TestObjectFactory.class é diferente de " + result411 + " <options.objectFactory()>")
chamada antiga: assertEquals(stepOccurrence1.getText(), stepOccurrence2.getText())
nova chamada: assertEquals(stepOccurrence1.getText(), stepOccurrence2.getText(), "Era esperado valores iguais, mas " + result412 + " <stepOccurrence1.getText()> é diferente de " + result413 + " <stepOccurrence2.getText()>")
chamada antiga: assertNotEquals(stepDescription1, stepDescription2)
nova chamada: assertNotEquals(stepDescription1, stepDescription2, "Era esperado valores diferentes, mas  stepDescription1 é igual a " + " stepDescription2")
chamada antiga: assertNotEquals(stepDescription1, stepDescription2)
nova chamada: assertNotEquals(stepDescription1, stepDescription2, "Era esperado valores diferentes, mas  stepDescription1 é igual a " + " stepDescription2")
chamada antiga: assertEquals("first", stepDescription.getClassName())
nova chamada: assertEquals("first", stepDescription.getClassName(), "Era esperado valores iguais, mas  'first' é diferente de " + result414 + " <stepDescription.getClassName()>")
chamada antiga: assertEquals("step", stepDescription.getMethodName())
nova chamada: assertEquals("step", stepDescription.getMethodName(), "Era esperado valores iguais, mas  'step' é diferente de " + result415 + " <stepDescription.getMethodName()>")
chamada antiga: assertEquals("step(first)", stepDescription.getDisplayName())
nova chamada: assertEquals("step(first)", stepDescription.getDisplayName(), "Era esperado valores iguais, mas  'step(first)' é diferente de " + result416 + " <stepDescription.getDisplayName()>")
chamada antiga: assertEquals("scenario name", runner.getDescription().getDisplayName())
nova chamada: assertEquals("scenario name", runner.getDescription().getDisplayName(), "Era esperado valores iguais, mas  'scenario name' é diferente de " + result417 + " <runner.getDescription().getDisplayName()>")
chamada antiga: assertEquals("it works", runner.getDescription().getChildren().get(0).getMethodName())
nova chamada: assertEquals("it works", runner.getDescription().getChildren().get(0).getMethodName(), "Era esperado valores iguais, mas  'it works' é diferente de " + result418 + " <runner.getDescription().getChildren().get(0).getMethodName()>")
chamada antiga: assertEquals("scenario_name", runner.getDescription().getDisplayName())
nova chamada: assertEquals("scenario_name", runner.getDescription().getDisplayName(), "Era esperado valores iguais, mas  'scenario_name' é diferente de " + result419 + " <runner.getDescription().getDisplayName()>")
chamada antiga: assertEquals("scenario_name", runner.getDescription().getChildren().get(0).getClassName())
nova chamada: assertEquals("scenario_name", runner.getDescription().getChildren().get(0).getClassName(), "Era esperado valores iguais, mas  'scenario_name' é diferente de " + result420 + " <runner.getDescription().getChildren().get(0).getClassName()>")
chamada antiga: assertEquals("it_works", runner.getDescription().getChildren().get(0).getMethodName())
nova chamada: assertEquals("it_works", runner.getDescription().getChildren().get(0).getMethodName(), "Era esperado valores iguais, mas  'it_works' é diferente de " + result421 + " <runner.getDescription().getChildren().get(0).getMethodName()>")
chamada antiga: assertTrue(descriptions.contains(description))
nova chamada: assertTrue(descriptions.contains(description), "Era esperado verdadeiro, mas " + result422 + " <descriptions.contains(description)> é falso")
chamada antiga: assertTrue(descriptions.add(description))
nova chamada: assertTrue(descriptions.add(description), "Era esperado verdadeiro, mas " + result423 + " <descriptions.add(description)> é falso")
chamada antiga: assertTrue(scenarioA.getChildren().isEmpty())
nova chamada: assertTrue(scenarioA.getChildren().isEmpty(), "Era esperado verdadeiro, mas " + result424 + " <scenarioA.getChildren().isEmpty()> é falso")
chamada antiga: assertTrue(scenarioB.getChildren().isEmpty())
nova chamada: assertTrue(scenarioB.getChildren().isEmpty(), "Era esperado verdadeiro, mas " + result425 + " <scenarioB.getChildren().isEmpty()> é falso")
chamada antiga: assertTrue(scenarioC0.getChildren().isEmpty())
nova chamada: assertTrue(scenarioC0.getChildren().isEmpty(), "Era esperado verdadeiro, mas " + result426 + " <scenarioC0.getChildren().isEmpty()> é falso")
chamada antiga: assertTrue(scenarioC1.getChildren().isEmpty())
nova chamada: assertTrue(scenarioC1.getChildren().isEmpty(), "Era esperado verdadeiro, mas " + result427 + " <scenarioC1.getChildren().isEmpty()> é falso")
chamada antiga: assertTrue(scenarioC2.getChildren().isEmpty())
nova chamada: assertTrue(scenarioC2.getChildren().isEmpty(), "Era esperado verdadeiro, mas " + result428 + " <scenarioC2.getChildren().isEmpty()> é falso")
chamada antiga: assertNotNull(o1)
nova chamada: assertNotNull(o1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotSame(o1, o2)
nova chamada: assertNotSame(o1, o2, "Era esperado objetos diferentes, mas  o1 é igual a " + " o2")
chamada antiga: assertEquals(n, belly.getCukes())
nova chamada: assertEquals(n, belly.getCukes(), "Era esperado valores iguais, mas  n é diferente de " + result429 + " <belly.getCukes()>")
chamada antiga: assertTrue(inTheBelly)
nova chamada: assertTrue(inTheBelly, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(42, cukes.intValue())
nova chamada: assertEquals(42, cukes.intValue(), "Era esperado valores iguais, mas  42 é diferente de " + result430 + " <cukes.intValue()>")
chamada antiga: assertEquals("belly", what)
nova chamada: assertEquals("belly", what, "Era esperado valores iguais, mas  'belly' é diferente de " + " what")
chamada antiga: assertTrue(invoked.get())
nova chamada: assertTrue(invoked.get(), "Era esperado verdadeiro, mas " + result431 + " <invoked.get()> é falso")
chamada antiga: assertEquals(42, cuckes.intValue())
nova chamada: assertEquals(42, cuckes.intValue(), "Era esperado valores iguais, mas  42 é diferente de " + result432 + " <cuckes.intValue()>")
chamada antiga: assertEquals(42, cuckes)
nova chamada: assertEquals(42, cuckes, "Era esperado valores iguais, mas  42 é diferente de " + " cuckes")
chamada antiga: assertEquals(42, cuckes.intValue())
nova chamada: assertEquals(42, cuckes.intValue(), "Era esperado valores iguais, mas  42 é diferente de " + result433 + " <cuckes.intValue()>")
chamada antiga: assertEquals("42", number)
nova chamada: assertEquals("42", number, "Era esperado valores iguais, mas  '42' é diferente de " + " number")
chamada antiga: assertEquals("42", this.number)
nova chamada: assertEquals("42", this.number, "Era esperado valores iguais, mas  '42' é diferente de " + " this.number")
chamada antiga: assertEquals("314", number)
nova chamada: assertEquals("314", number, "Era esperado valores iguais, mas  '314' é diferente de " + " number")
chamada antiga: assertEquals(TestObjectFactory.class, options.objectFactory())
nova chamada: assertEquals(TestObjectFactory.class, options.objectFactory(), "Era esperado valores iguais, mas  TestObjectFactory.class é diferente de " + result434 + " <options.objectFactory()>")
chamada antiga: assertEquals(exception.getCause(), error)
nova chamada: assertEquals(exception.getCause(), error, "Era esperado valores iguais, mas " + result435 + " <exception.getCause()> é diferente de " + " error")
chamada antiga: assertEquals(exception.getCause(), error)
nova chamada: assertEquals(exception.getCause(), error, "Era esperado valores iguais, mas " + result436 + " <exception.getCause()> é diferente de " + " error")
chamada antiga: assertEquals(exception.getCause(), error)
nova chamada: assertEquals(exception.getCause(), error, "Era esperado valores iguais, mas " + result437 + " <exception.getCause()> é diferente de " + " error")
chamada antiga: assertEquals(scenarioNames, asList("\"SC1\"", "\"SC2\"", "\"SC3\""))
nova chamada: assertEquals(scenarioNames, asList("\"SC1\"", "\"SC2\"", "\"SC3\""), "Era esperado valores iguais, mas  scenarioNames é diferente de " + result438 + " <asList('\'SC1\'', '\'SC2\'', '\'SC3\'')>")
chamada antiga: assertEquals(frequency(featureNames, "\"A feature containing 3 scenarios\""), 3)
nova chamada: assertEquals(frequency(featureNames, "\"A feature containing 3 scenarios\""), 3, "Era esperado valores iguais, mas " + result439 + " <frequency(featureNames, '\'A feature containing 3 scenarios\'')> é diferente de " + " 3")
chamada antiga: assertEquals(scenarios.length, 1)
nova chamada: assertEquals(scenarios.length, 1, "Era esperado valores iguais, mas  scenarios.length é diferente de " + " 1")
chamada antiga: assertEquals(1, events.stream().map(Object::getClass).filter(TestRunStarted.class::isAssignableFrom).count())
nova chamada: assertEquals(1, events.stream().map(Object::getClass).filter(TestRunStarted.class::isAssignableFrom).count(), "Era esperado valores iguais, mas  1 é diferente de " + result440 + " <events.stream().map(Object::getClass).filter(TestRunStarted.class::isAssignableFrom).count()>")
chamada antiga: assertEquals(1, events.stream().map(Object::getClass).filter(TestRunFinished.class::isAssignableFrom).count())
nova chamada: assertEquals(1, events.stream().map(Object::getClass).filter(TestRunFinished.class::isAssignableFrom).count(), "Era esperado valores iguais, mas  1 é diferente de " + result441 + " <events.stream().map(Object::getClass).filter(TestRunFinished.class::isAssignableFrom).count()>")
chamada antiga: assertEquals(1, events.stream().map(Object::getClass).filter(TestRunStarted.class::isAssignableFrom).count())
nova chamada: assertEquals(1, events.stream().map(Object::getClass).filter(TestRunStarted.class::isAssignableFrom).count(), "Era esperado valores iguais, mas  1 é diferente de " + result442 + " <events.stream().map(Object::getClass).filter(TestRunStarted.class::isAssignableFrom).count()>")
chamada antiga: assertEquals(1, events.stream().map(Object::getClass).filter(TestRunFinished.class::isAssignableFrom).count())
nova chamada: assertEquals(1, events.stream().map(Object::getClass).filter(TestRunFinished.class::isAssignableFrom).count(), "Era esperado valores iguais, mas  1 é diferente de " + result443 + " <events.stream().map(Object::getClass).filter(TestRunFinished.class::isAssignableFrom).count()>")
chamada antiga: assertEquals(n, belly.getCukes())
nova chamada: assertEquals(n, belly.getCukes(), "Era esperado valores iguais, mas  n é diferente de " + result444 + " <belly.getCukes()>")
chamada antiga: assertEquals(n, belly.getCukes())
nova chamada: assertEquals(n, belly.getCukes(), "Era esperado valores iguais, mas  n é diferente de " + result445 + " <belly.getCukes()>")
chamada antiga: assertEquals(0, belly.getCukes())
nova chamada: assertEquals(0, belly.getCukes(), "Era esperado valores iguais, mas  0 é diferente de " + result446 + " <belly.getCukes()>")
chamada antiga: assertEquals(0, bellyBean.getCukes())
nova chamada: assertEquals(0, bellyBean.getCukes(), "Era esperado valores iguais, mas  0 é diferente de " + result447 + " <bellyBean.getCukes()>")
chamada antiga: assertEquals(n, bellyBean.getCukes())
nova chamada: assertEquals(n, bellyBean.getCukes(), "Era esperado valores iguais, mas  n é diferente de " + result448 + " <bellyBean.getCukes()>")
chamada antiga: assertNotNull(options.objectFactory())
nova chamada: assertNotNull(options.objectFactory(), "Era esperado não nulo, mas " + result449 + " <options.objectFactory()> é nulo")
chamada antiga: assertNotNull(belly)
nova chamada: assertNotNull(belly, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bellyBean)
nova chamada: assertNotNull(bellyBean, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(concurrency, map.size())
nova chamada: assertEquals(concurrency, map.size(), "Era esperado valores iguais, mas  concurrency é diferente de " + result450 + " <map.size()>")
chamada antiga: assertNotEquals(response, response2)
nova chamada: assertNotEquals(response, response2, "Era esperado valores diferentes, mas  response é igual a " + " response2")
chamada antiga: assertTrue(CucumberTestContext.getInstance().getId().isEmpty())
nova chamada: assertTrue(CucumberTestContext.getInstance().getId().isEmpty(), "Era esperado verdadeiro, mas " + result451 + " <CucumberTestContext.getInstance().getId().isEmpty()> é falso")
chamada antiga: assertTrue(CucumberTestContext.getInstance().getId().isEmpty())
nova chamada: assertTrue(CucumberTestContext.getInstance().getId().isEmpty(), "Era esperado verdadeiro, mas " + result452 + " <CucumberTestContext.getInstance().getId().isEmpty()> é falso")
chamada antiga: assertTrue(CucumberTestContext.getInstance().getId().isEmpty())
nova chamada: assertTrue(CucumberTestContext.getInstance().getId().isEmpty(), "Era esperado verdadeiro, mas " + result453 + " <CucumberTestContext.getInstance().getId().isEmpty()> é falso")
chamada antiga: assertEquals(testContextId1.get() + 1, testContextId2.get())
nova chamada: assertEquals(testContextId1.get() + 1, testContextId2.get(), "Era esperado valores iguais, mas  testContextId1.get() + 1 é diferente de " + result454 + " <testContextId2.get()>")
chamada antiga: assertTrue(stepdef.isAutowired())
nova chamada: assertTrue(stepdef.isAutowired(), "Era esperado verdadeiro, mas " + result455 + " <stepdef.isAutowired()> é falso")
chamada antiga: assertTrue(stepdef.isAutowired())
nova chamada: assertTrue(stepdef.isAutowired(), "Era esperado verdadeiro, mas " + result456 + " <stepdef.isAutowired()> é falso")
chamada antiga: assertDoesNotThrow(belly::getInstanceId)
nova chamada: assertDoesNotThrow(belly::getInstanceId, "Era esperado que nenhuma exceção fosse lançada, mas  belly::getInstanceId foi lançada")
chamada antiga: assertDoesNotThrow(factory::stop)
nova chamada: assertDoesNotThrow(factory::stop, "Era esperado que nenhuma exceção fosse lançada, mas  factory::stop foi lançada")
chamada antiga: assertDoesNotThrow(factory::stop)
nova chamada: assertDoesNotThrow(factory::stop, "Era esperado que nenhuma exceção fosse lançada, mas  factory::stop foi lançada")
chamada antiga: assertDoesNotThrow(factory::stop)
nova chamada: assertDoesNotThrow(factory::stop, "Era esperado que nenhuma exceção fosse lançada, mas  factory::stop foi lançada")
chamada antiga: assertDoesNotThrow(factory::start)
nova chamada: assertDoesNotThrow(factory::start, "Era esperado que nenhuma exceção fosse lançada, mas  factory::start foi lançada")
chamada antiga: assertDoesNotThrow(factory::start)
nova chamada: assertDoesNotThrow(factory::start, "Era esperado que nenhuma exceção fosse lançada, mas  factory::start foi lançada")
chamada antiga: assertEquals(n, belly.getCukes())
nova chamada: assertEquals(n, belly.getCukes(), "Era esperado valores iguais, mas  n é diferente de " + result457 + " <belly.getCukes()>")
chamada antiga: assertEquals(0, belly.getCukes())
nova chamada: assertEquals(0, belly.getCukes(), "Era esperado valores iguais, mas  0 é diferente de " + result458 + " <belly.getCukes()>")
chamada antiga: assertEquals(0, bellyBean.getCukes())
nova chamada: assertEquals(0, bellyBean.getCukes(), "Era esperado valores iguais, mas  0 é diferente de " + result459 + " <bellyBean.getCukes()>")
chamada antiga: assertEquals(n, bellyBean.getCukes())
nova chamada: assertEquals(n, bellyBean.getCukes(), "Era esperado valores iguais, mas  n é diferente de " + result460 + " <bellyBean.getCukes()>")
chamada antiga: assertNotNull(context)
nova chamada: assertNotNull(context, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(belly)
nova chamada: assertNotNull(belly, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bellyBean)
nova chamada: assertNotNull(bellyBean, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(arg1, cucumbers)
nova chamada: assertEquals(arg1, cucumbers, "Era esperado valores iguais, mas  arg1 é diferente de " + " cucumbers")
chamada antiga: assertEquals(arg1, oneStepDef.cucumbers)
nova chamada: assertEquals(arg1, oneStepDef.cucumbers, "Era esperado valores iguais, mas  arg1 é diferente de " + " oneStepDef.cucumbers")
chamada antiga: assertEquals(n, belly.getCukes())
nova chamada: assertEquals(n, belly.getCukes(), "Era esperado valores iguais, mas  n é diferente de " + result461 + " <belly.getCukes()>")
chamada antiga: assertDoesNotThrow(factory::stop)
nova chamada: assertDoesNotThrow(factory::stop, "Era esperado que nenhuma exceção fosse lançada, mas  factory::stop foi lançada")
chamada antiga: assertDoesNotThrow(factory::start)
nova chamada: assertDoesNotThrow(factory::start, "Era esperado que nenhuma exceção fosse lançada, mas  factory::start foi lançada")
chamada antiga: assertDoesNotThrow(factory::stop)
nova chamada: assertDoesNotThrow(factory::stop, "Era esperado que nenhuma exceção fosse lançada, mas  factory::stop foi lançada")
chamada antiga: assertAll(() -> assertThat(bean.getClass(), not(is(ApplicationScopedBean.class))), () -> assertThat(bean.getClass().getSuperclass(), is(ApplicationScopedBean.class)))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat(bean.getClass(), not(is(ApplicationScopedBean.class))), () -> assertThat(bean.getClass().getSuperclass(), is(ApplicationScopedBean.class)))
chamada antiga: assertNull(options.objectFactory())
nova chamada: assertNull(options.objectFactory(), "Era esperado nulo, mas " + result462 + " <options.objectFactory()> não é nulo")
chamada antiga: assertTrue(feature.isPresent())
nova chamada: assertTrue(feature.isPresent(), "Era esperado verdadeiro, mas " + result463 + " <feature.isPresent()> é falso")
chamada antiga: assertEquals(0, feature.get().getPickles().size())
nova chamada: assertEquals(0, feature.get().getPickles().size(), "Era esperado valores iguais, mas  0 é diferente de " + result464 + " <feature.get().getPickles().size()>")
chamada antiga: assertEquals(path, receivedPath.get())
nova chamada: assertEquals(path, receivedPath.get(), "Era esperado valores iguais, mas  path é diferente de " + result465 + " <receivedPath.get()>")
chamada antiga: assertEquals(source, recievedSource.get())
nova chamada: assertEquals(source, recievedSource.get(), "Era esperado valores iguais, mas  source é diferente de " + result466 + " <recievedSource.get()>")
chamada antiga: assertEquals(idGenerator, recievedIdGenerator.get())
nova chamada: assertEquals(idGenerator, recievedIdGenerator.get(), "Era esperado valores iguais, mas  idGenerator é diferente de " + result467 + " <recievedIdGenerator.get()>")
chamada antiga: assertTrue(authors.contains(expectedAuthor))
nova chamada: assertTrue(authors.contains(expectedAuthor), "Era esperado verdadeiro, mas " + result468 + " <authors.contains(expectedAuthor)> é falso")
chamada antiga: assertTrue(authors.contains(expectedAuthor))
nova chamada: assertTrue(authors.contains(expectedAuthor), "Era esperado verdadeiro, mas " + result469 + " <authors.contains(expectedAuthor)> é falso")
chamada antiga: assertEquals(expectedAuthor, author)
nova chamada: assertEquals(expectedAuthor, author, "Era esperado valores iguais, mas  expectedAuthor é diferente de " + " author")
chamada antiga: assertEquals(expectedAuthor, author)
nova chamada: assertEquals(expectedAuthor, author, "Era esperado valores iguais, mas  expectedAuthor é diferente de " + " author")
chamada antiga: assertTrue(persons.contains(expectedPerson))
nova chamada: assertTrue(persons.contains(expectedPerson), "Era esperado verdadeiro, mas " + result470 + " <persons.contains(expectedPerson)> é falso")
chamada antiga: assertTrue(persons.contains(mononymousPerson))
nova chamada: assertTrue(persons.contains(mononymousPerson), "Era esperado verdadeiro, mas " + result471 + " <persons.contains(mononymousPerson)> é falso")
chamada antiga: assertEquals(expected, date)
nova chamada: assertEquals(expected, date, "Era esperado valores iguais, mas  expected é diferente de " + " date")
chamada antiga: assertEquals(this.scenarioName, scenarioName)
nova chamada: assertEquals(this.scenarioName, scenarioName, "Era esperado valores iguais, mas  this.scenarioName é diferente de " + " scenarioName")
chamada antiga: assertEquals(expected, body)
nova chamada: assertEquals(expected, body, "Era esperado valores iguais, mas  expected é diferente de " + " body")
chamada antiga: assertTrue(invoked)
nova chamada: assertTrue(invoked, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(invoked)
nova chamada: assertTrue(invoked, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(invoked)
nova chamada: assertTrue(invoked, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertAll(() -> assertThat(stackTraceElement.getMethodName(), is("method_throws")), () -> assertThat(stackTraceElement.getClassName(), is(JavaStepDefinitionTest.class.getName())))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThat(stackTraceElement.getMethodName(), is("method_throws")), () -> assertThat(stackTraceElement.getClassName(), is(JavaStepDefinitionTest.class.getName())))
chamada antiga: assertAll(() -> assertThrows(InvalidMethodSignatureException.class, () -> new JavaDocStringTypeDefinition("", voidMethod, lookup)), () -> assertThrows(InvalidMethodSignatureException.class, () -> new JavaDocStringTypeDefinition("", voidObjectMethod, lookup)))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> assertThrows(InvalidMethodSignatureException.class, () -> new JavaDocStringTypeDefinition("", voidMethod, lookup)), () -> assertThrows(InvalidMethodSignatureException.class, () -> new JavaDocStringTypeDefinition("", voidObjectMethod, lookup)))
chamada antiga: assertFalse(isTransposed(m))
nova chamada: assertFalse(isTransposed(m), "Era esperado falso, mas " + result472 + " <isTransposed(m)> é verdadeiro ")
chamada antiga: assertTrue(isTransposed(m))
nova chamada: assertTrue(isTransposed(m), "Era esperado verdadeiro, mas " + result473 + " <isTransposed(m)> é falso")
chamada antiga: assertTrue(authors.contains(expectedAuthor))
nova chamada: assertTrue(authors.contains(expectedAuthor), "Era esperado verdadeiro, mas " + result474 + " <authors.contains(expectedAuthor)> é falso")
chamada antiga: assertTrue(authors.contains(expectedAuthor))
nova chamada: assertTrue(authors.contains(expectedAuthor), "Era esperado verdadeiro, mas " + result475 + " <authors.contains(expectedAuthor)> é falso")
Total asserts: 2165
Asserts sem descrição: 1769
Asserts com descrição: 354
Assertion Roulette: 1084
