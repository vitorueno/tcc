
Projeto: /home/vitor-otto/opensource/liquibase-4.19.1

Antes do refactor: 
chamada antiga: assertNotNull(cdiLiquibase)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", cdiLiquibase)
chamada antiga: assertEquals(shouldBeRunning, cdiLiquibase.isInitialized())
nova chamada: assertEquals("Era esperado valores iguais, mas  shouldBeRunning é diferente de " + result0 + " <cdiLiquibase.isInitialized()>", shouldBeRunning, cdiLiquibase.isInitialized())
chamada antiga: assertEquals(shouldBeRunning, cdiLiquibase.isUpdateSuccessful())
nova chamada: assertEquals("Era esperado valores iguais, mas  shouldBeRunning é diferente de " + result1 + " <cdiLiquibase.isUpdateSuccessful()>", shouldBeRunning, cdiLiquibase.isUpdateSuccessful())
chamada antiga: assertEquals(liquibaseSchemas.size(), resolved.size())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result2 + " <liquibaseSchemas.size()> é diferente de " + result3 + " <resolved.size()>", liquibaseSchemas.size(), resolved.size())
chamada antiga: Assert.assertEquals(9, previous.size())
nova chamada: assertEquals("Era esperado valores iguais, mas  9 é diferente de " + result4 + " <previous.size()>", 9, previous.size())
chamada antiga: assertEquals(schemes.size(), resolved.size())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result5 + " <schemes.size()> é diferente de " + result6 + " <resolved.size()>", schemes.size(), resolved.size())
chamada antiga: Assert.assertEquals(16, previous.size())
nova chamada: assertEquals("Era esperado valores iguais, mas  16 é diferente de " + result7 + " <previous.size()>", 16, previous.size())
chamada antiga: assertEquals(liquibaseSchemas.size(), resolved.size())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result8 + " <liquibaseSchemas.size()> é diferente de " + result9 + " <resolved.size()>", liquibaseSchemas.size(), resolved.size())
chamada antiga: Assert.assertEquals(7, resolved.size())
nova chamada: assertEquals("Era esperado valores iguais, mas  7 é diferente de " + result10 + " <resolved.size()>", 7, resolved.size())
chamada antiga: Assert.assertEquals(1, locations.size())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result11 + " <locations.size()>", 1, locations.size())
chamada antiga: Assert.assertEquals(mojo.changeLogDirectory, dirLocation)
nova chamada: assertEquals("Era esperado valores iguais, mas  mojo.changeLogDirectory é diferente de " + " dirLocation", mojo.changeLogDirectory, dirLocation)
chamada antiga: assertNotNull(mojo)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", mojo)
chamada antiga: assertEquals("target/liquibase/myOutputDirectory", mojo.getOutputDirectory())
nova chamada: assertEquals("Era esperado valores iguais, mas  'target/liquibase/myOutputDirectory' é diferente de " + result12 + " <mojo.getOutputDirectory()>", "target/liquibase/myOutputDirectory", mojo.getOutputDirectory())
chamada antiga: assertEquals("TIMESTAMP_NTZ", databaseDataType.getType())
nova chamada: assertEquals("Era esperado valores iguais, mas  'TIMESTAMP_NTZ' é diferente de " + result13 + " <databaseDataType.getType()>", "TIMESTAMP_NTZ", databaseDataType.getType())
chamada antiga: assertEquals("TIMESTAMP_NTZ", databaseDataType.toSql())
nova chamada: assertEquals("Era esperado valores iguais, mas  'TIMESTAMP_NTZ' é diferente de " + result14 + " <databaseDataType.toSql()>", "TIMESTAMP_NTZ", databaseDataType.toSql())
chamada antiga: assertFalse(databaseDataType.isAutoIncrement())
nova chamada: assertFalse("Era esperado falso, mas " + result15 + " <databaseDataType.isAutoIncrement()> é verdadeiro ", databaseDataType.isAutoIncrement())
chamada antiga: assertEquals(2, aliases.length)
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + " aliases.length", 2, aliases.length)
chamada antiga: assertTrue(Arrays.asList(aliases).contains("datetime"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result16 + " <Arrays.asList(aliases).contains('datetime')> é falso", Arrays.asList(aliases).contains("datetime"))
chamada antiga: assertTrue(Arrays.asList(aliases).contains("java.sql.Types.DATETIME"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result17 + " <Arrays.asList(aliases).contains('java.sql.Types.DATETIME')> é falso", Arrays.asList(aliases).contains("java.sql.Types.DATETIME"))
chamada antiga: assertEquals("liquibase.datatype.core.TimestampNTZTypeSnowflake", liquibaseDataType.getClass().getName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'liquibase.datatype.core.TimestampNTZTypeSnowflake' é diferente de " + result18 + " <liquibaseDataType.getClass().getName()>", "liquibase.datatype.core.TimestampNTZTypeSnowflake", liquibaseDataType.getClass().getName())
chamada antiga: assertTrue(timestampNTZType.supports(snowflakeDatabase))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result19 + " <timestampNTZType.supports(snowflakeDatabase)> é falso", timestampNTZType.supports(snowflakeDatabase))
chamada antiga: assertFalse(timestampNTZType.supports(new PostgresDatabase()))
nova chamada: assertFalse("Era esperado falso, mas " + result20 + " <timestampNTZType.supports(new PostgresDatabase())> é verdadeiro ", timestampNTZType.supports(new PostgresDatabase()))
chamada antiga: assertEquals(PRIORITY_DATABASE, timestampNTZType.getPriority())
nova chamada: assertEquals("Era esperado valores iguais, mas  PRIORITY_DATABASE é diferente de " + result21 + " <timestampNTZType.getPriority()>", PRIORITY_DATABASE, timestampNTZType.getPriority())
chamada antiga: assertEquals(0, timestampNTZType.getMinParameters(snowflakeDatabase))
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + result22 + " <timestampNTZType.getMinParameters(snowflakeDatabase)>", 0, timestampNTZType.getMinParameters(snowflakeDatabase))
chamada antiga: assertEquals(0, timestampNTZType.getMinParameters(snowflakeDatabase))
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + result23 + " <timestampNTZType.getMinParameters(snowflakeDatabase)>", 0, timestampNTZType.getMinParameters(snowflakeDatabase))
chamada antiga: assertEquals("snowflake", database.getShortName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'snowflake' é diferente de " + result24 + " <database.getShortName()>", "snowflake", database.getShortName())
chamada antiga: assertEquals("Snowflake", database.getDefaultDatabaseProductName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'Snowflake' é diferente de " + result25 + " <database.getDefaultDatabaseProductName()>", "Snowflake", database.getDefaultDatabaseProductName())
chamada antiga: assertNull(database.getDefaultPort())
nova chamada: assertNull("Era esperado nulo, mas " + result26 + " <database.getDefaultPort()> não é nulo", database.getDefaultPort())
chamada antiga: assertEquals("current_timestamp::timestamp_ntz", database.getCurrentDateTimeFunction())
nova chamada: assertEquals("Era esperado valores iguais, mas  'current_timestamp::timestamp_ntz' é diferente de " + result27 + " <database.getCurrentDateTimeFunction()>", "current_timestamp::timestamp_ntz", database.getCurrentDateTimeFunction())
chamada antiga: assertEquals(PRIORITY_DATABASE, database.getPriority())
nova chamada: assertEquals("Era esperado valores iguais, mas  PRIORITY_DATABASE é diferente de " + result28 + " <database.getPriority()>", PRIORITY_DATABASE, database.getPriority())
chamada antiga: assertFalse(database.supportsInitiallyDeferrableColumns())
nova chamada: assertFalse("Era esperado falso, mas " + result29 + " <database.supportsInitiallyDeferrableColumns()> é verdadeiro ", database.supportsInitiallyDeferrableColumns())
chamada antiga: assertTrue(database.supportsDropTableCascadeConstraints())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result30 + " <database.supportsDropTableCascadeConstraints()> é falso", database.supportsDropTableCascadeConstraints())
chamada antiga: assertTrue(database.isCorrectDatabaseImplementation(jdbcConnection))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result31 + " <database.isCorrectDatabaseImplementation(jdbcConnection)> é falso", database.isCorrectDatabaseImplementation(jdbcConnection))
chamada antiga: assertEquals("net.snowflake.client.jdbc.SnowflakeDriver", database.getDefaultDriver("jdbc:snowflake:"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'net.snowflake.client.jdbc.SnowflakeDriver' é diferente de " + result32 + " <database.getDefaultDriver('jdbc:snowflake:')>", "net.snowflake.client.jdbc.SnowflakeDriver", database.getDefaultDriver("jdbc:snowflake:"))
chamada antiga: assertNull(database.getDefaultDriver("jdbc:wrong-name:"))
nova chamada: assertNull("Era esperado nulo, mas " + result33 + " <database.getDefaultDriver('jdbc:wrong-name:')> não é nulo", database.getDefaultDriver("jdbc:wrong-name:"))
chamada antiga: assertTrue(database.supportsSchemas())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result34 + " <database.supportsSchemas()> é falso", database.supportsSchemas())
chamada antiga: assertTrue(database.supportsCatalogs())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result35 + " <database.supportsCatalogs()> é falso", database.supportsCatalogs())
chamada antiga: assertFalse(database.supportsCatalogInObjectName(null))
nova chamada: assertFalse("Era esperado falso, mas " + result36 + " <database.supportsCatalogInObjectName(null)> é verdadeiro ", database.supportsCatalogInObjectName(null))
chamada antiga: assertTrue(database.supportsSequences())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result37 + " <database.supportsSequences()> é falso", database.supportsSequences())
chamada antiga: assertEquals("DATABASECHANGELOG", database.getDatabaseChangeLogTableName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'DATABASECHANGELOG' é diferente de " + result38 + " <database.getDatabaseChangeLogTableName()>", "DATABASECHANGELOG", database.getDatabaseChangeLogTableName())
chamada antiga: assertEquals("DATABASECHANGELOGLOCK", database.getDatabaseChangeLogLockTableName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'DATABASECHANGELOGLOCK' é diferente de " + result39 + " <database.getDatabaseChangeLogLockTableName()>", "DATABASECHANGELOGLOCK", database.getDatabaseChangeLogLockTableName())
chamada antiga: assertFalse(database.supportsTablespaces())
nova chamada: assertFalse("Era esperado falso, mas " + result40 + " <database.supportsTablespaces()> é verdadeiro ", database.supportsTablespaces())
chamada antiga: assertTrue(database.supportsAutoIncrement())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result41 + " <database.supportsAutoIncrement()> é falso", database.supportsAutoIncrement())
chamada antiga: assertEquals("AUTOINCREMENT", database.getAutoIncrementClause())
nova chamada: assertEquals("Era esperado valores iguais, mas  'AUTOINCREMENT' é diferente de " + result42 + " <database.getAutoIncrementClause()>", "AUTOINCREMENT", database.getAutoIncrementClause())
chamada antiga: assertEquals("AUTOINCREMENT (1, 1)", database.getAutoIncrementClause(null, null, null, null))
nova chamada: assertEquals("Era esperado valores iguais, mas  'AUTOINCREMENT (1, 1)' é diferente de " + result43 + " <database.getAutoIncrementClause(null, null, null, null)>", "AUTOINCREMENT (1, 1)", database.getAutoIncrementClause(null, null, null, null))
chamada antiga: assertEquals("AUTOINCREMENT (1, 1)", database.getAutoIncrementClause(new BigInteger("1"), new BigInteger("1"), null, null))
nova chamada: assertEquals("Era esperado valores iguais, mas  'AUTOINCREMENT (1, 1)' é diferente de " + result44 + " <database.getAutoIncrementClause(new BigInteger('1'), new BigInteger('1'), null, null)>", "AUTOINCREMENT (1, 1)", database.getAutoIncrementClause(new BigInteger("1"), new BigInteger("1"), null, null))
chamada antiga: assertEquals("AUTOINCREMENT (7, 1)", database.getAutoIncrementClause(new BigInteger("7"), new BigInteger("1"), null, null))
nova chamada: assertEquals("Era esperado valores iguais, mas  'AUTOINCREMENT (7, 1)' é diferente de " + result45 + " <database.getAutoIncrementClause(new BigInteger('7'), new BigInteger('1'), null, null)>", "AUTOINCREMENT (7, 1)", database.getAutoIncrementClause(new BigInteger("7"), new BigInteger("1"), null, null))
chamada antiga: assertEquals("AUTOINCREMENT (1, 7)", database.getAutoIncrementClause(new BigInteger("1"), new BigInteger("7"), null, null))
nova chamada: assertEquals("Era esperado valores iguais, mas  'AUTOINCREMENT (1, 7)' é diferente de " + result46 + " <database.getAutoIncrementClause(new BigInteger('1'), new BigInteger('7'), null, null)>", "AUTOINCREMENT (1, 7)", database.getAutoIncrementClause(new BigInteger("1"), new BigInteger("7"), null, null))
chamada antiga: assertEquals("AUTOINCREMENT (7, 1)", database.getAutoIncrementClause(new BigInteger("7"), null, null, null))
nova chamada: assertEquals("Era esperado valores iguais, mas  'AUTOINCREMENT (7, 1)' é diferente de " + result47 + " <database.getAutoIncrementClause(new BigInteger('7'), null, null, null)>", "AUTOINCREMENT (7, 1)", database.getAutoIncrementClause(new BigInteger("7"), null, null, null))
chamada antiga: assertEquals("AUTOINCREMENT (1, 7)", database.getAutoIncrementClause(null, new BigInteger("7"), null, null))
nova chamada: assertEquals("Era esperado valores iguais, mas  'AUTOINCREMENT (1, 7)' é diferente de " + result48 + " <database.getAutoIncrementClause(null, new BigInteger('7'), null, null)>", "AUTOINCREMENT (1, 7)", database.getAutoIncrementClause(null, new BigInteger("7"), null, null))
chamada antiga: assertTrue(database.generateAutoIncrementStartWith(new BigInteger("1")))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result49 + " <database.generateAutoIncrementStartWith(new BigInteger('1'))> é falso", database.generateAutoIncrementStartWith(new BigInteger("1")))
chamada antiga: assertTrue(database.generateAutoIncrementBy(new BigInteger("1")))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result50 + " <database.generateAutoIncrementBy(new BigInteger('1'))> é falso", database.generateAutoIncrementBy(new BigInteger("1")))
chamada antiga: assertTrue(database.supportsRestrictForeignKeys())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result51 + " <database.supportsRestrictForeignKeys()> é falso", database.supportsRestrictForeignKeys())
chamada antiga: assertTrue(database.isReservedWord("table"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result52 + " <database.isReservedWord('table')> é falso", database.isReservedWord("table"))
chamada antiga: assertNull(database.getDefaultCatalogName())
nova chamada: assertNull("Era esperado nulo, mas " + result53 + " <database.getDefaultCatalogName()> não é nulo", database.getDefaultCatalogName())
chamada antiga: assertNull(database.getDefaultSchemaName())
nova chamada: assertNull("Era esperado nulo, mas " + result54 + " <database.getDefaultSchemaName()> não é nulo", database.getDefaultSchemaName())
chamada antiga: assertNull(database.getJdbcCatalogName(new CatalogAndSchema(null, null)))
nova chamada: assertNull("Era esperado nulo, mas " + result55 + " <database.getJdbcCatalogName(new CatalogAndSchema(null, null))> não é nulo", database.getJdbcCatalogName(new CatalogAndSchema(null, null)))
chamada antiga: assertNull(database.getJdbcSchemaName(new CatalogAndSchema(null, null)))
nova chamada: assertNull("Era esperado nulo, mas " + result56 + " <database.getJdbcSchemaName(new CatalogAndSchema(null, null))> não é nulo", database.getJdbcSchemaName(new CatalogAndSchema(null, null)))
chamada antiga: assertEquals(1, pk.getColumnNamesAsList().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result57 + " <pk.getColumnNamesAsList().size()>", 1, pk.getColumnNamesAsList().size())
chamada antiga: assertEquals(2, pk.getColumnNamesAsList().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + result58 + " <pk.getColumnNamesAsList().size()>", 2, pk.getColumnNamesAsList().size())
chamada antiga: assertEquals("id1", pk.getColumnNamesAsList().get(0))
nova chamada: assertEquals("Era esperado valores iguais, mas  'id1' é diferente de " + result59 + " <pk.getColumnNamesAsList().get(0)>", "id1", pk.getColumnNamesAsList().get(0))
chamada antiga: assertEquals("id2", pk.getColumnNamesAsList().get(1))
nova chamada: assertEquals("Era esperado valores iguais, mas  'id2' é diferente de " + result60 + " <pk.getColumnNamesAsList().get(1)>", "id2", pk.getColumnNamesAsList().get(1))
chamada antiga: assertEquals(2, pk.getColumnNamesAsList().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + result61 + " <pk.getColumnNamesAsList().size()>", 2, pk.getColumnNamesAsList().size())
chamada antiga: assertEquals("id1", pk.getColumnNamesAsList().get(0))
nova chamada: assertEquals("Era esperado valores iguais, mas  'id1' é diferente de " + result62 + " <pk.getColumnNamesAsList().get(0)>", "id1", pk.getColumnNamesAsList().get(0))
chamada antiga: assertEquals("id2", pk.getColumnNamesAsList().get(1))
nova chamada: assertEquals("Era esperado valores iguais, mas  'id2' é diferente de " + result63 + " <pk.getColumnNamesAsList().get(1)>", "id2", pk.getColumnNamesAsList().get(1))
chamada antiga: assertNotNull(ChangeLogSerializerFactory.getInstance())
nova chamada: assertNotNull("Era esperado não nulo, mas " + result64 + " <ChangeLogSerializerFactory.getInstance()> é nulo", ChangeLogSerializerFactory.getInstance())
chamada antiga: assertSame(ChangeLogSerializerFactory.getInstance(), ChangeLogSerializerFactory.getInstance())
nova chamada: assertSame("Era esperado objetos iguais, mas " + result65 + " <ChangeLogSerializerFactory.getInstance()> é diferente de " + result66 + " <ChangeLogSerializerFactory.getInstance()>", ChangeLogSerializerFactory.getInstance(), ChangeLogSerializerFactory.getInstance())
chamada antiga: assertEquals(0, ChangeLogSerializerFactory.getInstance().getSerializers().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + result67 + " <ChangeLogSerializerFactory.getInstance().getSerializers().size()>", 0, ChangeLogSerializerFactory.getInstance().getSerializers().size())
chamada antiga: assertEquals(1, ChangeLogSerializerFactory.getInstance().getSerializers().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result68 + " <ChangeLogSerializerFactory.getInstance().getSerializers().size()>", 1, ChangeLogSerializerFactory.getInstance().getSerializers().size())
chamada antiga: assertEquals(0, factory.getSerializers().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + result69 + " <factory.getSerializers().size()>", 0, factory.getSerializers().size())
chamada antiga: assertEquals(2, factory.getSerializers().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + result70 + " <factory.getSerializers().size()>", 2, factory.getSerializers().size())
chamada antiga: assertEquals(1, factory.getSerializers().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result71 + " <factory.getSerializers().size()>", 1, factory.getSerializers().size())
chamada antiga: assertNotSame(instance1, ChangeLogSerializerFactory.getInstance())
nova chamada: assertNotSame("Era esperado objetos diferentes, mas  instance1 é igual a " + result72 + " <ChangeLogSerializerFactory.getInstance()>", instance1, ChangeLogSerializerFactory.getInstance())
chamada antiga: assertEquals(6, serializers.size())
nova chamada: assertEquals("Era esperado valores iguais, mas  6 é diferente de " + result73 + " <serializers.size()>", 6, serializers.size())
chamada antiga: assertNotNull(serializer)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", serializer)
chamada antiga: assertSame(XMLChangeLogSerializer.class, serializer.getClass())
nova chamada: assertSame("Era esperado objetos iguais, mas  XMLChangeLogSerializer.class é diferente de " + result74 + " <serializer.getClass()>", XMLChangeLogSerializer.class, serializer.getClass())
chamada antiga: assertEquals(1, ChangeLogSerializerFactory.getInstance().getSerializers("xml").size())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result75 + " <ChangeLogSerializerFactory.getInstance().getSerializers('xml').size()>", 1, ChangeLogSerializerFactory.getInstance().getSerializers("xml").size())
chamada antiga: assertSame(highestPriority, factory.getSerializer("xml"))
nova chamada: assertSame("Era esperado objetos iguais, mas  highestPriority é diferente de " + result76 + " <factory.getSerializer('xml')>", highestPriority, factory.getSerializer("xml"))
chamada antiga: assertEquals(3, factory.getSerializers().get("xml").size())
nova chamada: assertEquals("Era esperado valores iguais, mas  3 é diferente de " + result77 + " <factory.getSerializers().get('xml').size()>", 3, factory.getSerializers().get("xml").size())
chamada antiga: assertEquals("{\n" + "  \"changeSet\": {\n" + "    \"id\": \"1\",\n" + "    \"author\": \"nvoxland\",\n" + "    \"ignore\": true,\n" + "    \"objectQuotingStrategy\": \"LEGACY\",\n" + "    \"preconditions\": {\n" + "      \"preConditions\": {\n" + "        \"nestedPreconditions\": [\n" + "          {\n" + "            \"preConditions\": {\n" + "              \"onError\": \"WARN\",\n" + "              \"onFail\": \"CONTINUE\",\n" + "              \"onSqlOutput\": \"TEST\"\n" + "            }\n" + "          }\n" + "        ]\n" + "        ,\n" + "        \"onError\": \"CONTINUE\",\n" + "        \"onFail\": \"MARK_RAN\",\n" + "        \"onSqlOutput\": \"FAIL\"\n" + "      }\n" + "    },\n" + "    \"runInTransaction\": false,\n" + "    \"runOrder\": \"last\",\n" + "    \"changes\": [\n" + "      {\n" + "        \"addColumn\": {\n" + "          \"catalogName\": \"cat\",\n" + "          \"columns\": [\n" + "            {\n" + "              \"column\": {\n" + "                \"defaultValueNumeric\": 3,\n" + "                \"name\": \"col1\"\n" + "              }\n" + "            },\n" + "            {\n" + "              \"column\": {\n" + "                \"defaultValueComputed\": \"NOW()\",\n" + "                \"name\": \"col2\"\n" + "              }\n" + "            },\n" + "            {\n" + "              \"column\": {\n" + "                \"defaultValueBoolean\": true,\n" + "                \"name\": \"col3\"\n" + "              }\n" + "            },\n" + "            {\n" + "              \"column\": {\n" + "                \"defaultValueDate\": \"1970-01-01T00:00:00\",\n" + "                \"name\": \"col2\"\n" + "              }\n" + "            },\n" + "            {\n" + "              \"column\": {\n" + "                \"defaultValueSequenceNext\": \"seq_me\",\n" + "                \"name\": \"col2\"\n" + "              }\n" + "            }\n" + "          ]\n" + "          \n" + "        }\n" + "      }\n" + "    ]\n" + "    \n" + "  }\n" + "}\n", serializedJson)
nova chamada: assertEquals("Era esperado valores iguais, mas  '{\n' + '  \'changeSet\': {\n' + '    \'id\': \'1\',\n' + '    \'author\': \'nvoxland\',\n' + '    \'ignore\': true,\n' + '    \'objectQuotingStrategy\': \'LEGACY\',\n' + '    \'preconditions\': {\n' + '      \'preConditions\': {\n' + '        \'nestedPreconditions\': [\n' + '          {\n' + '            \'preConditions\': {\n' + '              \'onError\': \'WARN\',\n' + '              \'onFail\': \'CONTINUE\',\n' + '              \'onSqlOutput\': \'TEST\'\n' + '            }\n' + '          }\n' + '        ]\n' + '        ,\n' + '        \'onError\': \'CONTINUE\',\n' + '        \'onFail\': \'MARK_RAN\',\n' + '        \'onSqlOutput\': \'FAIL\'\n' + '      }\n' + '    },\n' + '    \'runInTransaction\': false,\n' + '    \'runOrder\': \'last\',\n' + '    \'changes\': [\n' + '      {\n' + '        \'addColumn\': {\n' + '          \'catalogName\': \'cat\',\n' + '          \'columns\': [\n' + '            {\n' + '              \'column\': {\n' + '                \'defaultValueNumeric\': 3,\n' + '                \'name\': \'col1\'\n' + '              }\n' + '            },\n' + '            {\n' + '              \'column\': {\n' + '                \'defaultValueComputed\': \'NOW()\',\n' + '                \'name\': \'col2\'\n' + '              }\n' + '            },\n' + '            {\n' + '              \'column\': {\n' + '                \'defaultValueBoolean\': true,\n' + '                \'name\': \'col3\'\n' + '              }\n' + '            },\n' + '            {\n' + '              \'column\': {\n' + '                \'defaultValueDate\': \'1970-01-01T00:00:00\',\n' + '                \'name\': \'col2\'\n' + '              }\n' + '            },\n' + '            {\n' + '              \'column\': {\n' + '                \'defaultValueSequenceNext\': \'seq_me\',\n' + '                \'name\': \'col2\'\n' + '              }\n' + '            }\n' + '          ]\n' + '          \n' + '        }\n' + '      }\n' + '    ]\n' + '    \n' + '  }\n' + '}\n' é diferente de " + " serializedJson", "{\n" + "  \"changeSet\": {\n" + "    \"id\": \"1\",\n" + "    \"author\": \"nvoxland\",\n" + "    \"ignore\": true,\n" + "    \"objectQuotingStrategy\": \"LEGACY\",\n" + "    \"preconditions\": {\n" + "      \"preConditions\": {\n" + "        \"nestedPreconditions\": [\n" + "          {\n" + "            \"preConditions\": {\n" + "              \"onError\": \"WARN\",\n" + "              \"onFail\": \"CONTINUE\",\n" + "              \"onSqlOutput\": \"TEST\"\n" + "            }\n" + "          }\n" + "        ]\n" + "        ,\n" + "        \"onError\": \"CONTINUE\",\n" + "        \"onFail\": \"MARK_RAN\",\n" + "        \"onSqlOutput\": \"FAIL\"\n" + "      }\n" + "    },\n" + "    \"runInTransaction\": false,\n" + "    \"runOrder\": \"last\",\n" + "    \"changes\": [\n" + "      {\n" + "        \"addColumn\": {\n" + "          \"catalogName\": \"cat\",\n" + "          \"columns\": [\n" + "            {\n" + "              \"column\": {\n" + "                \"defaultValueNumeric\": 3,\n" + "                \"name\": \"col1\"\n" + "              }\n" + "            },\n" + "            {\n" + "              \"column\": {\n" + "                \"defaultValueComputed\": \"NOW()\",\n" + "                \"name\": \"col2\"\n" + "              }\n" + "            },\n" + "            {\n" + "              \"column\": {\n" + "                \"defaultValueBoolean\": true,\n" + "                \"name\": \"col3\"\n" + "              }\n" + "            },\n" + "            {\n" + "              \"column\": {\n" + "                \"defaultValueDate\": \"1970-01-01T00:00:00\",\n" + "                \"name\": \"col2\"\n" + "              }\n" + "            },\n" + "            {\n" + "              \"column\": {\n" + "                \"defaultValueSequenceNext\": \"seq_me\",\n" + "                \"name\": \"col2\"\n" + "              }\n" + "            }\n" + "          ]\n" + "          \n" + "        }\n" + "      }\n" + "    ]\n" + "    \n" + "  }\n" + "}\n", serializedJson)
chamada antiga: assertEquals("addAutoIncrement", node.getTagName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'addAutoIncrement' é diferente de " + result78 + " <node.getTagName()>", "addAutoIncrement", node.getTagName())
chamada antiga: assertEquals("addColumn", node.getTagName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'addColumn' é diferente de " + result79 + " <node.getTagName()>", "addColumn", node.getTagName())
chamada antiga: assertEquals("TAB", node.getAttribute("tableName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'TAB' é diferente de " + result80 + " <node.getAttribute('tableName')>", "TAB", node.getAttribute("tableName"))
chamada antiga: assertEquals(1, columns.getLength())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result81 + " <columns.getLength()>", 1, columns.getLength())
chamada antiga: assertEquals("column", ((Element) columns.item(0)).getTagName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'column' é diferente de " + result82 + " <((Element) columns.item(0)).getTagName()>", "column", ((Element) columns.item(0)).getTagName())
chamada antiga: assertEquals("NEWCOL", ((Element) columns.item(0)).getAttribute("name"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'NEWCOL' é diferente de " + result83 + " <((Element) columns.item(0)).getAttribute('name')>", "NEWCOL", ((Element) columns.item(0)).getAttribute("name"))
chamada antiga: assertEquals("TYP", ((Element) columns.item(0)).getAttribute("type"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'TYP' é diferente de " + result84 + " <((Element) columns.item(0)).getAttribute('type')>", "TYP", ((Element) columns.item(0)).getAttribute("type"))
chamada antiga: assertEquals("addDefaultValue", node.getTagName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'addDefaultValue' é diferente de " + result85 + " <node.getTagName()>", "addDefaultValue", node.getTagName())
chamada antiga: assertEquals("SCHEMA_NAME", node.getAttribute("schemaName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'SCHEMA_NAME' é diferente de " + result86 + " <node.getAttribute('schemaName')>", "SCHEMA_NAME", node.getAttribute("schemaName"))
chamada antiga: assertEquals("TABLE_NAME", node.getAttribute("tableName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'TABLE_NAME' é diferente de " + result87 + " <node.getAttribute('tableName')>", "TABLE_NAME", node.getAttribute("tableName"))
chamada antiga: assertEquals("COLUMN_NAME", node.getAttribute("columnName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'COLUMN_NAME' é diferente de " + result88 + " <node.getAttribute('columnName')>", "COLUMN_NAME", node.getAttribute("columnName"))
chamada antiga: assertEquals("DEF STRING", node.getAttribute("defaultValue"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'DEF STRING' é diferente de " + result89 + " <node.getAttribute('defaultValue')>", "DEF STRING", node.getAttribute("defaultValue"))
chamada antiga: assertEquals("42", node.getAttribute("defaultValueNumeric"))
nova chamada: assertEquals("Era esperado valores iguais, mas  '42' é diferente de " + result90 + " <node.getAttribute('defaultValueNumeric')>", "42", node.getAttribute("defaultValueNumeric"))
chamada antiga: assertEquals("true", node.getAttribute("defaultValueBoolean"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'true' é diferente de " + result91 + " <node.getAttribute('defaultValueBoolean')>", "true", node.getAttribute("defaultValueBoolean"))
chamada antiga: assertEquals("2007-01-02", node.getAttribute("defaultValueDate"))
nova chamada: assertEquals("Era esperado valores iguais, mas  '2007-01-02' é diferente de " + result92 + " <node.getAttribute('defaultValueDate')>", "2007-01-02", node.getAttribute("defaultValueDate"))
chamada antiga: assertEquals("sampleSeq", node.getAttribute("defaultValueSequenceNext"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'sampleSeq' é diferente de " + result93 + " <node.getAttribute('defaultValueSequenceNext')>", "sampleSeq", node.getAttribute("defaultValueSequenceNext"))
chamada antiga: assertEquals("addForeignKeyConstraint", node.getTagName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'addForeignKeyConstraint' é diferente de " + result94 + " <node.getTagName()>", "addForeignKeyConstraint", node.getTagName())
chamada antiga: assertEquals("FK_NAME", node.getAttribute("constraintName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'FK_NAME' é diferente de " + result95 + " <node.getAttribute('constraintName')>", "FK_NAME", node.getAttribute("constraintName"))
chamada antiga: assertEquals("BASE_SCHEMA_NAME", node.getAttribute("baseTableSchemaName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'BASE_SCHEMA_NAME' é diferente de " + result96 + " <node.getAttribute('baseTableSchemaName')>", "BASE_SCHEMA_NAME", node.getAttribute("baseTableSchemaName"))
chamada antiga: assertEquals("BASE_TABLE_NAME", node.getAttribute("baseTableName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'BASE_TABLE_NAME' é diferente de " + result97 + " <node.getAttribute('baseTableName')>", "BASE_TABLE_NAME", node.getAttribute("baseTableName"))
chamada antiga: assertEquals("BASE_COL_NAME", node.getAttribute("baseColumnNames"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'BASE_COL_NAME' é diferente de " + result98 + " <node.getAttribute('baseColumnNames')>", "BASE_COL_NAME", node.getAttribute("baseColumnNames"))
chamada antiga: assertEquals("REF_SCHEMA_NAME", node.getAttribute("referencedTableSchemaName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'REF_SCHEMA_NAME' é diferente de " + result99 + " <node.getAttribute('referencedTableSchemaName')>", "REF_SCHEMA_NAME", node.getAttribute("referencedTableSchemaName"))
chamada antiga: assertEquals("REF_TABLE_NAME", node.getAttribute("referencedTableName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'REF_TABLE_NAME' é diferente de " + result100 + " <node.getAttribute('referencedTableName')>", "REF_TABLE_NAME", node.getAttribute("referencedTableName"))
chamada antiga: assertEquals("REF_COL_NAME", node.getAttribute("referencedColumnNames"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'REF_COL_NAME' é diferente de " + result101 + " <node.getAttribute('referencedColumnNames')>", "REF_COL_NAME", node.getAttribute("referencedColumnNames"))
chamada antiga: assertEquals("true", node.getAttribute("deferrable"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'true' é diferente de " + result102 + " <node.getAttribute('deferrable')>", "true", node.getAttribute("deferrable"))
chamada antiga: assertEquals("true", node.getAttribute("initiallyDeferred"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'true' é diferente de " + result103 + " <node.getAttribute('initiallyDeferred')>", "true", node.getAttribute("initiallyDeferred"))
chamada antiga: assertEquals("true", node.getAttribute("validate"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'true' é diferente de " + result104 + " <node.getAttribute('validate')>", "true", node.getAttribute("validate"))
chamada antiga: assertEquals("CASCADE", node.getAttribute("onDelete"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'CASCADE' é diferente de " + result105 + " <node.getAttribute('onDelete')>", "CASCADE", node.getAttribute("onDelete"))
chamada antiga: assertEquals("CASCADE", node.getAttribute("onUpdate"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'CASCADE' é diferente de " + result106 + " <node.getAttribute('onUpdate')>", "CASCADE", node.getAttribute("onUpdate"))
chamada antiga: assertEquals("addNotNullConstraint", node.getTagName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'addNotNullConstraint' é diferente de " + result107 + " <node.getTagName()>", "addNotNullConstraint", node.getTagName())
chamada antiga: assertEquals("TABLE_NAME", node.getAttribute("tableName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'TABLE_NAME' é diferente de " + result108 + " <node.getAttribute('tableName')>", "TABLE_NAME", node.getAttribute("tableName"))
chamada antiga: assertEquals("COL_HERE", node.getAttribute("columnName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'COL_HERE' é diferente de " + result109 + " <node.getAttribute('columnName')>", "COL_HERE", node.getAttribute("columnName"))
chamada antiga: assertEquals("DEFAULT_VALUE", node.getAttribute("defaultNullValue"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'DEFAULT_VALUE' é diferente de " + result110 + " <node.getAttribute('defaultNullValue')>", "DEFAULT_VALUE", node.getAttribute("defaultNullValue"))
chamada antiga: assertEquals("addPrimaryKey", node.getTagName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'addPrimaryKey' é diferente de " + result111 + " <node.getTagName()>", "addPrimaryKey", node.getTagName())
chamada antiga: assertEquals("SCHEMA_NAME", node.getAttribute("schemaName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'SCHEMA_NAME' é diferente de " + result112 + " <node.getAttribute('schemaName')>", "SCHEMA_NAME", node.getAttribute("schemaName"))
chamada antiga: assertEquals("TABLE_NAME", node.getAttribute("tableName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'TABLE_NAME' é diferente de " + result113 + " <node.getAttribute('tableName')>", "TABLE_NAME", node.getAttribute("tableName"))
chamada antiga: assertEquals("COL_HERE", node.getAttribute("columnNames"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'COL_HERE' é diferente de " + result114 + " <node.getAttribute('columnNames')>", "COL_HERE", node.getAttribute("columnNames"))
chamada antiga: assertEquals("PK_NAME", node.getAttribute("constraintName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'PK_NAME' é diferente de " + result115 + " <node.getAttribute('constraintName')>", "PK_NAME", node.getAttribute("constraintName"))
chamada antiga: assertEquals("TABLESPACE_NAME", node.getAttribute("tablespace"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'TABLESPACE_NAME' é diferente de " + result116 + " <node.getAttribute('tablespace')>", "TABLESPACE_NAME", node.getAttribute("tablespace"))
chamada antiga: assertEquals("true", node.getAttribute("validate"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'true' é diferente de " + result117 + " <node.getAttribute('validate')>", "true", node.getAttribute("validate"))
chamada antiga: assertEquals("addUniqueConstraint", node.getTagName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'addUniqueConstraint' é diferente de " + result118 + " <node.getTagName()>", "addUniqueConstraint", node.getTagName())
chamada antiga: assertEquals("SCHEMA_NAME", node.getAttribute("schemaName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'SCHEMA_NAME' é diferente de " + result119 + " <node.getAttribute('schemaName')>", "SCHEMA_NAME", node.getAttribute("schemaName"))
chamada antiga: assertEquals("TABLE_NAME", node.getAttribute("tableName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'TABLE_NAME' é diferente de " + result120 + " <node.getAttribute('tableName')>", "TABLE_NAME", node.getAttribute("tableName"))
chamada antiga: assertEquals("COL_HERE", node.getAttribute("columnNames"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'COL_HERE' é diferente de " + result121 + " <node.getAttribute('columnNames')>", "COL_HERE", node.getAttribute("columnNames"))
chamada antiga: assertEquals("PK_NAME", node.getAttribute("constraintName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'PK_NAME' é diferente de " + result122 + " <node.getAttribute('constraintName')>", "PK_NAME", node.getAttribute("constraintName"))
chamada antiga: assertEquals("TABLESPACE_NAME", node.getAttribute("tablespace"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'TABLESPACE_NAME' é diferente de " + result123 + " <node.getAttribute('tablespace')>", "TABLESPACE_NAME", node.getAttribute("tablespace"))
chamada antiga: assertEquals("true", node.getAttribute("disabled"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'true' é diferente de " + result124 + " <node.getAttribute('disabled')>", "true", node.getAttribute("disabled"))
chamada antiga: assertEquals("true", node.getAttribute("deferrable"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'true' é diferente de " + result125 + " <node.getAttribute('deferrable')>", "true", node.getAttribute("deferrable"))
chamada antiga: assertEquals("true", node.getAttribute("initiallyDeferred"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'true' é diferente de " + result126 + " <node.getAttribute('initiallyDeferred')>", "true", node.getAttribute("initiallyDeferred"))
chamada antiga: assertEquals("true", node.getAttribute("validate"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'true' é diferente de " + result127 + " <node.getAttribute('validate')>", "true", node.getAttribute("validate"))
chamada antiga: assertEquals("alterSequence", node.getNodeName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'alterSequence' é diferente de " + result128 + " <node.getNodeName()>", "alterSequence", node.getNodeName())
chamada antiga: assertEquals("SEQ_NAME", node.getAttribute("sequenceName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'SEQ_NAME' é diferente de " + result129 + " <node.getAttribute('sequenceName')>", "SEQ_NAME", node.getAttribute("sequenceName"))
chamada antiga: assertFalse(node.hasAttribute("incrementBy"))
nova chamada: assertFalse("Era esperado falso, mas " + result130 + " <node.hasAttribute('incrementBy')> é verdadeiro ", node.hasAttribute("incrementBy"))
chamada antiga: assertFalse(node.hasAttribute("maxValue"))
nova chamada: assertFalse("Era esperado falso, mas " + result131 + " <node.hasAttribute('maxValue')> é verdadeiro ", node.hasAttribute("maxValue"))
chamada antiga: assertFalse(node.hasAttribute("minValue"))
nova chamada: assertFalse("Era esperado falso, mas " + result132 + " <node.hasAttribute('minValue')> é verdadeiro ", node.hasAttribute("minValue"))
chamada antiga: assertFalse(node.hasAttribute("ordered"))
nova chamada: assertFalse("Era esperado falso, mas " + result133 + " <node.hasAttribute('ordered')> é verdadeiro ", node.hasAttribute("ordered"))
chamada antiga: assertEquals("alterSequence", node.getNodeName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'alterSequence' é diferente de " + result134 + " <node.getNodeName()>", "alterSequence", node.getNodeName())
chamada antiga: assertEquals("SCHEMA_NAME", node.getAttribute("schemaName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'SCHEMA_NAME' é diferente de " + result135 + " <node.getAttribute('schemaName')>", "SCHEMA_NAME", node.getAttribute("schemaName"))
chamada antiga: assertEquals("SEQ_NAME", node.getAttribute("sequenceName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'SEQ_NAME' é diferente de " + result136 + " <node.getAttribute('sequenceName')>", "SEQ_NAME", node.getAttribute("sequenceName"))
chamada antiga: assertEquals("1", node.getAttribute("incrementBy"))
nova chamada: assertEquals("Era esperado valores iguais, mas  '1' é diferente de " + result137 + " <node.getAttribute('incrementBy')>", "1", node.getAttribute("incrementBy"))
chamada antiga: assertEquals("2", node.getAttribute("maxValue"))
nova chamada: assertEquals("Era esperado valores iguais, mas  '2' é diferente de " + result138 + " <node.getAttribute('maxValue')>", "2", node.getAttribute("maxValue"))
chamada antiga: assertEquals("3", node.getAttribute("minValue"))
nova chamada: assertEquals("Era esperado valores iguais, mas  '3' é diferente de " + result139 + " <node.getAttribute('minValue')>", "3", node.getAttribute("minValue"))
chamada antiga: assertEquals("true", node.getAttribute("ordered"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'true' é diferente de " + result140 + " <node.getAttribute('ordered')>", "true", node.getAttribute("ordered"))
chamada antiga: assertEquals("2008", node.getAttribute("cacheSize"))
nova chamada: assertEquals("Era esperado valores iguais, mas  '2008' é diferente de " + result141 + " <node.getAttribute('cacheSize')>", "2008", node.getAttribute("cacheSize"))
chamada antiga: assertEquals("column", element.getTagName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'column' é diferente de " + result142 + " <element.getTagName()>", "column", element.getTagName())
chamada antiga: assertEquals("id", element.getAttribute("name"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'id' é diferente de " + result143 + " <element.getAttribute('name')>", "id", element.getAttribute("name"))
chamada antiga: assertEquals("varchar(255)", element.getAttribute("type"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'varchar(255)' é diferente de " + result144 + " <element.getAttribute('type')>", "varchar(255)", element.getAttribute("type"))
chamada antiga: assertEquals("test Value", element.getAttribute("defaultValue"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'test Value' é diferente de " + result145 + " <element.getAttribute('defaultValue')>", "test Value", element.getAttribute("defaultValue"))
chamada antiga: assertEquals("some value here", element.getAttribute("value"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'some value here' é diferente de " + result146 + " <element.getAttribute('value')>", "some value here", element.getAttribute("value"))
chamada antiga: assertEquals(12, constraintsElement.getAttributes().getLength())
nova chamada: assertEquals("Era esperado valores iguais, mas  12 é diferente de " + result147 + " <constraintsElement.getAttributes().getLength()>", 12, constraintsElement.getAttributes().getLength())
chamada antiga: assertEquals("true", constraintsElement.getAttribute("deferrable"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'true' é diferente de " + result148 + " <constraintsElement.getAttribute('deferrable')>", "true", constraintsElement.getAttribute("deferrable"))
chamada antiga: assertEquals("true", constraintsElement.getAttribute("validateNullable"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'true' é diferente de " + result149 + " <constraintsElement.getAttribute('validateNullable')>", "true", constraintsElement.getAttribute("validateNullable"))
chamada antiga: assertEquals("true", constraintsElement.getAttribute("validateUnique"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'true' é diferente de " + result150 + " <constraintsElement.getAttribute('validateUnique')>", "true", constraintsElement.getAttribute("validateUnique"))
chamada antiga: assertEquals("true", constraintsElement.getAttribute("validatePrimaryKey"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'true' é diferente de " + result151 + " <constraintsElement.getAttribute('validatePrimaryKey')>", "true", constraintsElement.getAttribute("validatePrimaryKey"))
chamada antiga: assertEquals("true", constraintsElement.getAttribute("validateForeignKey"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'true' é diferente de " + result152 + " <constraintsElement.getAttribute('validateForeignKey')>", "true", constraintsElement.getAttribute("validateForeignKey"))
chamada antiga: assertEquals("true", constraintsElement.getAttribute("deleteCascade"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'true' é diferente de " + result153 + " <constraintsElement.getAttribute('deleteCascade')>", "true", constraintsElement.getAttribute("deleteCascade"))
chamada antiga: assertEquals("FK_NAME", constraintsElement.getAttribute("foreignKeyName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'FK_NAME' é diferente de " + result154 + " <constraintsElement.getAttribute('foreignKeyName')>", "FK_NAME", constraintsElement.getAttribute("foreignKeyName"))
chamada antiga: assertEquals("true", constraintsElement.getAttribute("initiallyDeferred"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'true' é diferente de " + result155 + " <constraintsElement.getAttribute('initiallyDeferred')>", "true", constraintsElement.getAttribute("initiallyDeferred"))
chamada antiga: assertEquals("false", constraintsElement.getAttribute("nullable"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'false' é diferente de " + result156 + " <constraintsElement.getAttribute('nullable')>", "false", constraintsElement.getAttribute("nullable"))
chamada antiga: assertEquals("true", constraintsElement.getAttribute("primaryKey"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'true' é diferente de " + result157 + " <constraintsElement.getAttribute('primaryKey')>", "true", constraintsElement.getAttribute("primaryKey"))
chamada antiga: assertEquals("state(id)", constraintsElement.getAttribute("references"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'state(id)' é diferente de " + result158 + " <constraintsElement.getAttribute('references')>", "state(id)", constraintsElement.getAttribute("references"))
chamada antiga: assertEquals("true", constraintsElement.getAttribute("unique"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'true' é diferente de " + result159 + " <constraintsElement.getAttribute('unique')>", "true", constraintsElement.getAttribute("unique"))
chamada antiga: assertEquals("createIndex", element.getTagName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'createIndex' é diferente de " + result160 + " <element.getTagName()>", "createIndex", element.getTagName())
chamada antiga: assertEquals("IDX_TEST", element.getAttribute("indexName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'IDX_TEST' é diferente de " + result161 + " <element.getAttribute('indexName')>", "IDX_TEST", element.getAttribute("indexName"))
chamada antiga: assertEquals("TAB_NAME", element.getAttribute("tableName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'TAB_NAME' é diferente de " + result162 + " <element.getAttribute('tableName')>", "TAB_NAME", element.getAttribute("tableName"))
chamada antiga: assertEquals(2, element.getChildNodes().getLength())
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + result163 + " <element.getChildNodes().getLength()>", 2, element.getChildNodes().getLength())
chamada antiga: assertEquals("column", ((Element) element.getChildNodes().item(0)).getTagName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'column' é diferente de " + result164 + " <((Element) element.getChildNodes().item(0)).getTagName()>", "column", ((Element) element.getChildNodes().item(0)).getTagName())
chamada antiga: assertEquals("COL1", ((Element) element.getChildNodes().item(0)).getAttribute("name"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'COL1' é diferente de " + result165 + " <((Element) element.getChildNodes().item(0)).getAttribute('name')>", "COL1", ((Element) element.getChildNodes().item(0)).getAttribute("name"))
chamada antiga: assertEquals("column", ((Element) element.getChildNodes().item(1)).getTagName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'column' é diferente de " + result166 + " <((Element) element.getChildNodes().item(1)).getTagName()>", "column", ((Element) element.getChildNodes().item(1)).getTagName())
chamada antiga: assertEquals("COL2", ((Element) element.getChildNodes().item(1)).getAttribute("name"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'COL2' é diferente de " + result167 + " <((Element) element.getChildNodes().item(1)).getAttribute('name')>", "COL2", ((Element) element.getChildNodes().item(1)).getAttribute("name"))
chamada antiga: assertEquals("true", ((Element) element.getChildNodes().item(1)).getAttribute("descending"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'true' é diferente de " + result168 + " <((Element) element.getChildNodes().item(1)).getAttribute('descending')>", "true", ((Element) element.getChildNodes().item(1)).getAttribute("descending"))
chamada antiga: assertEquals("createProcedure", element.getTagName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'createProcedure' é diferente de " + result169 + " <element.getTagName()>", "createProcedure", element.getTagName())
chamada antiga: assertEquals("CREATE PROC PROCBODY HERE", element.getTextContent())
nova chamada: assertEquals("Era esperado valores iguais, mas  'CREATE PROC PROCBODY HERE' é diferente de " + result170 + " <element.getTextContent()>", "CREATE PROC PROCBODY HERE", element.getTextContent())
chamada antiga: assertEquals("createSequence", node.getNodeName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'createSequence' é diferente de " + result171 + " <node.getNodeName()>", "createSequence", node.getNodeName())
chamada antiga: assertEquals("SEQ_NAME", node.getAttribute("sequenceName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'SEQ_NAME' é diferente de " + result172 + " <node.getAttribute('sequenceName')>", "SEQ_NAME", node.getAttribute("sequenceName"))
chamada antiga: assertFalse(node.hasAttribute("incrementBy"))
nova chamada: assertFalse("Era esperado falso, mas " + result173 + " <node.hasAttribute('incrementBy')> é verdadeiro ", node.hasAttribute("incrementBy"))
chamada antiga: assertFalse(node.hasAttribute("maxValue"))
nova chamada: assertFalse("Era esperado falso, mas " + result174 + " <node.hasAttribute('maxValue')> é verdadeiro ", node.hasAttribute("maxValue"))
chamada antiga: assertFalse(node.hasAttribute("minValue"))
nova chamada: assertFalse("Era esperado falso, mas " + result175 + " <node.hasAttribute('minValue')> é verdadeiro ", node.hasAttribute("minValue"))
chamada antiga: assertFalse(node.hasAttribute("ordered"))
nova chamada: assertFalse("Era esperado falso, mas " + result176 + " <node.hasAttribute('ordered')> é verdadeiro ", node.hasAttribute("ordered"))
chamada antiga: assertFalse(node.hasAttribute("startValue"))
nova chamada: assertFalse("Era esperado falso, mas " + result177 + " <node.hasAttribute('startValue')> é verdadeiro ", node.hasAttribute("startValue"))
chamada antiga: assertFalse(node.hasAttribute("cycle"))
nova chamada: assertFalse("Era esperado falso, mas " + result178 + " <node.hasAttribute('cycle')> é verdadeiro ", node.hasAttribute("cycle"))
chamada antiga: assertEquals("createSequence", node.getNodeName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'createSequence' é diferente de " + result179 + " <node.getNodeName()>", "createSequence", node.getNodeName())
chamada antiga: assertEquals("SEQ_NAME", node.getAttribute("sequenceName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'SEQ_NAME' é diferente de " + result180 + " <node.getAttribute('sequenceName')>", "SEQ_NAME", node.getAttribute("sequenceName"))
chamada antiga: assertEquals("1", node.getAttribute("incrementBy"))
nova chamada: assertEquals("Era esperado valores iguais, mas  '1' é diferente de " + result181 + " <node.getAttribute('incrementBy')>", "1", node.getAttribute("incrementBy"))
chamada antiga: assertEquals("2", node.getAttribute("maxValue"))
nova chamada: assertEquals("Era esperado valores iguais, mas  '2' é diferente de " + result182 + " <node.getAttribute('maxValue')>", "2", node.getAttribute("maxValue"))
chamada antiga: assertEquals("3", node.getAttribute("minValue"))
nova chamada: assertEquals("Era esperado valores iguais, mas  '3' é diferente de " + result183 + " <node.getAttribute('minValue')>", "3", node.getAttribute("minValue"))
chamada antiga: assertEquals("true", node.getAttribute("ordered"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'true' é diferente de " + result184 + " <node.getAttribute('ordered')>", "true", node.getAttribute("ordered"))
chamada antiga: assertEquals("4", node.getAttribute("startValue"))
nova chamada: assertEquals("Era esperado valores iguais, mas  '4' é diferente de " + result185 + " <node.getAttribute('startValue')>", "4", node.getAttribute("startValue"))
chamada antiga: assertEquals("true", node.getAttribute("cycle"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'true' é diferente de " + result186 + " <node.getAttribute('cycle')>", "true", node.getAttribute("cycle"))
chamada antiga: assertEquals("createTable", element.getTagName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'createTable' é diferente de " + result187 + " <element.getTagName()>", "createTable", element.getTagName())
chamada antiga: assertEquals(5, element.getChildNodes().getLength())
nova chamada: assertEquals("Era esperado valores iguais, mas  5 é diferente de " + result188 + " <element.getChildNodes().getLength()>", 5, element.getChildNodes().getLength())
chamada antiga: assertEquals("column", columnElement.getTagName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'column' é diferente de " + result189 + " <columnElement.getTagName()>", "column", columnElement.getTagName())
chamada antiga: assertEquals("id", columnElement.getAttribute("name"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'id' é diferente de " + result190 + " <columnElement.getAttribute('name')>", "id", columnElement.getAttribute("name"))
chamada antiga: assertEquals("int", columnElement.getAttribute("type"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'int' é diferente de " + result191 + " <columnElement.getAttribute('type')>", "int", columnElement.getAttribute("type"))
chamada antiga: assertEquals("constraints", constraintsElement.getTagName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'constraints' é diferente de " + result192 + " <constraintsElement.getTagName()>", "constraints", constraintsElement.getTagName())
chamada antiga: assertEquals(2, constraintsElement.getAttributes().getLength())
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + result193 + " <constraintsElement.getAttributes().getLength()>", 2, constraintsElement.getAttributes().getLength())
chamada antiga: assertEquals("true", constraintsElement.getAttribute("primaryKey"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'true' é diferente de " + result194 + " <constraintsElement.getAttribute('primaryKey')>", "true", constraintsElement.getAttribute("primaryKey"))
chamada antiga: assertEquals("false", constraintsElement.getAttribute("nullable"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'false' é diferente de " + result195 + " <constraintsElement.getAttribute('nullable')>", "false", constraintsElement.getAttribute("nullable"))
chamada antiga: assertEquals("column", columnElement.getTagName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'column' é diferente de " + result196 + " <columnElement.getTagName()>", "column", columnElement.getTagName())
chamada antiga: assertEquals("name", columnElement.getAttribute("name"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'name' é diferente de " + result197 + " <columnElement.getAttribute('name')>", "name", columnElement.getAttribute("name"))
chamada antiga: assertEquals("varchar(255)", columnElement.getAttribute("type"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'varchar(255)' é diferente de " + result198 + " <columnElement.getAttribute('type')>", "varchar(255)", columnElement.getAttribute("type"))
chamada antiga: assertEquals("column", columnElement.getTagName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'column' é diferente de " + result199 + " <columnElement.getTagName()>", "column", columnElement.getTagName())
chamada antiga: assertEquals("state_id", columnElement.getAttribute("name"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'state_id' é diferente de " + result200 + " <columnElement.getAttribute('name')>", "state_id", columnElement.getAttribute("name"))
chamada antiga: assertEquals("constraints", constraintsElement.getTagName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'constraints' é diferente de " + result201 + " <constraintsElement.getTagName()>", "constraints", constraintsElement.getTagName())
chamada antiga: assertEquals(5, constraintsElement.getAttributes().getLength())
nova chamada: assertEquals("Era esperado valores iguais, mas  5 é diferente de " + result202 + " <constraintsElement.getAttributes().getLength()>", 5, constraintsElement.getAttributes().getLength())
chamada antiga: assertEquals("false", constraintsElement.getAttribute("nullable"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'false' é diferente de " + result203 + " <constraintsElement.getAttribute('nullable')>", "false", constraintsElement.getAttribute("nullable"))
chamada antiga: assertEquals("true", constraintsElement.getAttribute("deferrable"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'true' é diferente de " + result204 + " <constraintsElement.getAttribute('deferrable')>", "true", constraintsElement.getAttribute("deferrable"))
chamada antiga: assertEquals("true", constraintsElement.getAttribute("initiallyDeferred"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'true' é diferente de " + result205 + " <constraintsElement.getAttribute('initiallyDeferred')>", "true", constraintsElement.getAttribute("initiallyDeferred"))
chamada antiga: assertEquals("fk_tab_ref", constraintsElement.getAttribute("foreignKeyName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'fk_tab_ref' é diferente de " + result206 + " <constraintsElement.getAttribute('foreignKeyName')>", "fk_tab_ref", constraintsElement.getAttribute("foreignKeyName"))
chamada antiga: assertEquals("state(id)", constraintsElement.getAttribute("references"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'state(id)' é diferente de " + result207 + " <constraintsElement.getAttribute('references')>", "state(id)", constraintsElement.getAttribute("references"))
chamada antiga: assertEquals("column", columnElement.getTagName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'column' é diferente de " + result208 + " <columnElement.getTagName()>", "column", columnElement.getTagName())
chamada antiga: assertEquals("phone", columnElement.getAttribute("name"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'phone' é diferente de " + result209 + " <columnElement.getAttribute('name')>", "phone", columnElement.getAttribute("name"))
chamada antiga: assertEquals("varchar(255)", columnElement.getAttribute("type"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'varchar(255)' é diferente de " + result210 + " <columnElement.getAttribute('type')>", "varchar(255)", columnElement.getAttribute("type"))
chamada antiga: assertEquals("column", columnElement.getTagName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'column' é diferente de " + result211 + " <columnElement.getTagName()>", "column", columnElement.getTagName())
chamada antiga: assertEquals("phone2", columnElement.getAttribute("name"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'phone2' é diferente de " + result212 + " <columnElement.getAttribute('name')>", "phone2", columnElement.getAttribute("name"))
chamada antiga: assertEquals("varchar(255)", columnElement.getAttribute("type"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'varchar(255)' é diferente de " + result213 + " <columnElement.getAttribute('type')>", "varchar(255)", columnElement.getAttribute("type"))
chamada antiga: assertEquals("constraints", constraintsElement.getTagName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'constraints' é diferente de " + result214 + " <constraintsElement.getTagName()>", "constraints", constraintsElement.getTagName())
chamada antiga: assertEquals(1, constraintsElement.getAttributes().getLength())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result215 + " <constraintsElement.getAttributes().getLength()>", 1, constraintsElement.getAttributes().getLength())
chamada antiga: assertEquals("true", constraintsElement.getAttribute("unique"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'true' é diferente de " + result216 + " <constraintsElement.getAttribute('unique')>", "true", constraintsElement.getAttribute("unique"))
chamada antiga: assertEquals("dropColumn", node.getTagName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'dropColumn' é diferente de " + result217 + " <node.getTagName()>", "dropColumn", node.getTagName())
chamada antiga: assertFalse(node.hasAttribute("schemaName"))
nova chamada: assertFalse("Era esperado falso, mas " + result218 + " <node.hasAttribute('schemaName')> é verdadeiro ", node.hasAttribute("schemaName"))
chamada antiga: assertEquals("TABLE_NAME", node.getAttribute("tableName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'TABLE_NAME' é diferente de " + result219 + " <node.getAttribute('tableName')>", "TABLE_NAME", node.getAttribute("tableName"))
chamada antiga: assertEquals("COL_NAME", node.getAttribute("columnName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'COL_NAME' é diferente de " + result220 + " <node.getAttribute('columnName')>", "COL_NAME", node.getAttribute("columnName"))
chamada antiga: assertEquals("dropColumn", node.getTagName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'dropColumn' é diferente de " + result221 + " <node.getTagName()>", "dropColumn", node.getTagName())
chamada antiga: assertEquals("SCHEMA_NAME", node.getAttribute("schemaName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'SCHEMA_NAME' é diferente de " + result222 + " <node.getAttribute('schemaName')>", "SCHEMA_NAME", node.getAttribute("schemaName"))
chamada antiga: assertEquals("TABLE_NAME", node.getAttribute("tableName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'TABLE_NAME' é diferente de " + result223 + " <node.getAttribute('tableName')>", "TABLE_NAME", node.getAttribute("tableName"))
chamada antiga: assertEquals("COL_NAME", node.getAttribute("columnName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'COL_NAME' é diferente de " + result224 + " <node.getAttribute('columnName')>", "COL_NAME", node.getAttribute("columnName"))
chamada antiga: assertEquals("dropDefaultValue", node.getTagName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'dropDefaultValue' é diferente de " + result225 + " <node.getTagName()>", "dropDefaultValue", node.getTagName())
chamada antiga: assertFalse(node.hasAttribute("schemaName"))
nova chamada: assertFalse("Era esperado falso, mas " + result226 + " <node.hasAttribute('schemaName')> é verdadeiro ", node.hasAttribute("schemaName"))
chamada antiga: assertEquals("TABLE_NAME", node.getAttribute("tableName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'TABLE_NAME' é diferente de " + result227 + " <node.getAttribute('tableName')>", "TABLE_NAME", node.getAttribute("tableName"))
chamada antiga: assertEquals("COL_NAME", node.getAttribute("columnName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'COL_NAME' é diferente de " + result228 + " <node.getAttribute('columnName')>", "COL_NAME", node.getAttribute("columnName"))
chamada antiga: assertEquals("dropDefaultValue", node.getTagName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'dropDefaultValue' é diferente de " + result229 + " <node.getTagName()>", "dropDefaultValue", node.getTagName())
chamada antiga: assertEquals("SCHEMA_NAME", node.getAttribute("schemaName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'SCHEMA_NAME' é diferente de " + result230 + " <node.getAttribute('schemaName')>", "SCHEMA_NAME", node.getAttribute("schemaName"))
chamada antiga: assertEquals("TABLE_NAME", node.getAttribute("tableName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'TABLE_NAME' é diferente de " + result231 + " <node.getAttribute('tableName')>", "TABLE_NAME", node.getAttribute("tableName"))
chamada antiga: assertEquals("COL_NAME", node.getAttribute("columnName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'COL_NAME' é diferente de " + result232 + " <node.getAttribute('columnName')>", "COL_NAME", node.getAttribute("columnName"))
chamada antiga: assertEquals("dropForeignKeyConstraint", node.getTagName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'dropForeignKeyConstraint' é diferente de " + result233 + " <node.getTagName()>", "dropForeignKeyConstraint", node.getTagName())
chamada antiga: assertEquals("SCHEMA_NAME", node.getAttribute("baseTableSchemaName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'SCHEMA_NAME' é diferente de " + result234 + " <node.getAttribute('baseTableSchemaName')>", "SCHEMA_NAME", node.getAttribute("baseTableSchemaName"))
chamada antiga: assertEquals("TABLE_NAME", node.getAttribute("baseTableName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'TABLE_NAME' é diferente de " + result235 + " <node.getAttribute('baseTableName')>", "TABLE_NAME", node.getAttribute("baseTableName"))
chamada antiga: assertEquals("FK_NAME", node.getAttribute("constraintName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'FK_NAME' é diferente de " + result236 + " <node.getAttribute('constraintName')>", "FK_NAME", node.getAttribute("constraintName"))
chamada antiga: assertEquals("dropIndex", element.getTagName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'dropIndex' é diferente de " + result237 + " <element.getTagName()>", "dropIndex", element.getTagName())
chamada antiga: assertEquals("IDX_NAME", element.getAttribute("indexName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'IDX_NAME' é diferente de " + result238 + " <element.getAttribute('indexName')>", "IDX_NAME", element.getAttribute("indexName"))
chamada antiga: assertEquals("dropNotNullConstraint", node.getTagName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'dropNotNullConstraint' é diferente de " + result239 + " <node.getTagName()>", "dropNotNullConstraint", node.getTagName())
chamada antiga: assertEquals("TABLE_NAME", node.getAttribute("tableName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'TABLE_NAME' é diferente de " + result240 + " <node.getAttribute('tableName')>", "TABLE_NAME", node.getAttribute("tableName"))
chamada antiga: assertEquals("COL_HERE", node.getAttribute("columnName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'COL_HERE' é diferente de " + result241 + " <node.getAttribute('columnName')>", "COL_HERE", node.getAttribute("columnName"))
chamada antiga: assertEquals("dropPrimaryKey", node.getTagName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'dropPrimaryKey' é diferente de " + result242 + " <node.getTagName()>", "dropPrimaryKey", node.getTagName())
chamada antiga: assertEquals("SCHEMA_NAME", node.getAttribute("schemaName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'SCHEMA_NAME' é diferente de " + result243 + " <node.getAttribute('schemaName')>", "SCHEMA_NAME", node.getAttribute("schemaName"))
chamada antiga: assertEquals("TABLE_NAME", node.getAttribute("tableName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'TABLE_NAME' é diferente de " + result244 + " <node.getAttribute('tableName')>", "TABLE_NAME", node.getAttribute("tableName"))
chamada antiga: assertEquals("PK_NAME", node.getAttribute("constraintName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'PK_NAME' é diferente de " + result245 + " <node.getAttribute('constraintName')>", "PK_NAME", node.getAttribute("constraintName"))
chamada antiga: assertEquals("dropSequence", element.getTagName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'dropSequence' é diferente de " + result246 + " <element.getTagName()>", "dropSequence", element.getTagName())
chamada antiga: assertEquals("SEQ_NAME", element.getAttribute("sequenceName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'SEQ_NAME' é diferente de " + result247 + " <element.getAttribute('sequenceName')>", "SEQ_NAME", element.getAttribute("sequenceName"))
chamada antiga: assertEquals("dropTable", element.getTagName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'dropTable' é diferente de " + result248 + " <element.getTagName()>", "dropTable", element.getTagName())
chamada antiga: assertEquals("TAB_NAME", element.getAttribute("tableName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'TAB_NAME' é diferente de " + result249 + " <element.getAttribute('tableName')>", "TAB_NAME", element.getAttribute("tableName"))
chamada antiga: assertEquals("true", element.getAttribute("cascadeConstraints"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'true' é diferente de " + result250 + " <element.getAttribute('cascadeConstraints')>", "true", element.getAttribute("cascadeConstraints"))
chamada antiga: assertEquals("dropTable", element.getTagName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'dropTable' é diferente de " + result251 + " <element.getTagName()>", "dropTable", element.getTagName())
chamada antiga: assertEquals("TAB_NAME", element.getAttribute("tableName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'TAB_NAME' é diferente de " + result252 + " <element.getAttribute('tableName')>", "TAB_NAME", element.getAttribute("tableName"))
chamada antiga: assertEquals("true", element.getAttribute("cascadeConstraints"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'true' é diferente de " + result253 + " <element.getAttribute('cascadeConstraints')>", "true", element.getAttribute("cascadeConstraints"))
chamada antiga: assertTrue(element.hasAttribute("schemaName"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result254 + " <element.hasAttribute('schemaName')> é falso", element.hasAttribute("schemaName"))
chamada antiga: assertEquals("dropTable", element.getTagName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'dropTable' é diferente de " + result255 + " <element.getTagName()>", "dropTable", element.getTagName())
chamada antiga: assertFalse(element.hasAttribute("cascadeConstraints"))
nova chamada: assertFalse("Era esperado falso, mas " + result256 + " <element.hasAttribute('cascadeConstraints')> é verdadeiro ", element.hasAttribute("cascadeConstraints"))
chamada antiga: assertEquals("dropUniqueConstraint", element.getTagName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'dropUniqueConstraint' é diferente de " + result257 + " <element.getTagName()>", "dropUniqueConstraint", element.getTagName())
chamada antiga: assertEquals("SCHEMA_NAME", element.getAttribute("schemaName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'SCHEMA_NAME' é diferente de " + result258 + " <element.getAttribute('schemaName')>", "SCHEMA_NAME", element.getAttribute("schemaName"))
chamada antiga: assertEquals("TAB_NAME", element.getAttribute("tableName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'TAB_NAME' é diferente de " + result259 + " <element.getAttribute('tableName')>", "TAB_NAME", element.getAttribute("tableName"))
chamada antiga: assertEquals("UQ_CONSTRAINT", element.getAttribute("constraintName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'UQ_CONSTRAINT' é diferente de " + result260 + " <element.getAttribute('constraintName')>", "UQ_CONSTRAINT", element.getAttribute("constraintName"))
chamada antiga: assertEquals("dropUniqueConstraint", element.getTagName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'dropUniqueConstraint' é diferente de " + result261 + " <element.getTagName()>", "dropUniqueConstraint", element.getTagName())
chamada antiga: assertEquals("TAB_NAME", element.getAttribute("tableName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'TAB_NAME' é diferente de " + result262 + " <element.getAttribute('tableName')>", "TAB_NAME", element.getAttribute("tableName"))
chamada antiga: assertEquals("UQ_CONSTRAINT", element.getAttribute("constraintName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'UQ_CONSTRAINT' é diferente de " + result263 + " <element.getAttribute('constraintName')>", "UQ_CONSTRAINT", element.getAttribute("constraintName"))
chamada antiga: assertFalse(element.hasAttribute("schemaName"))
nova chamada: assertFalse("Era esperado falso, mas " + result264 + " <element.hasAttribute('schemaName')> é verdadeiro ", element.hasAttribute("schemaName"))
chamada antiga: assertEquals("dropView", node.getTagName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'dropView' é diferente de " + result265 + " <node.getTagName()>", "dropView", node.getTagName())
chamada antiga: assertFalse(node.hasAttribute("schemaName"))
nova chamada: assertFalse("Era esperado falso, mas " + result266 + " <node.hasAttribute('schemaName')> é verdadeiro ", node.hasAttribute("schemaName"))
chamada antiga: assertEquals("VIEW_NAME", node.getAttribute("viewName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'VIEW_NAME' é diferente de " + result267 + " <node.getAttribute('viewName')>", "VIEW_NAME", node.getAttribute("viewName"))
chamada antiga: assertEquals("dropView", node.getTagName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'dropView' é diferente de " + result268 + " <node.getTagName()>", "dropView", node.getTagName())
chamada antiga: assertEquals("SCHEMA_NAME", node.getAttribute("schemaName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'SCHEMA_NAME' é diferente de " + result269 + " <node.getAttribute('schemaName')>", "SCHEMA_NAME", node.getAttribute("schemaName"))
chamada antiga: assertEquals("VIEW_NAME", node.getAttribute("viewName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'VIEW_NAME' é diferente de " + result270 + " <node.getAttribute('viewName')>", "VIEW_NAME", node.getAttribute("viewName"))
chamada antiga: assertEquals("insert", node.getTagName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'insert' é diferente de " + result271 + " <node.getTagName()>", "insert", node.getTagName())
chamada antiga: assertEquals("TABLE_NAME", node.getAttribute("tableName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'TABLE_NAME' é diferente de " + result272 + " <node.getAttribute('tableName')>", "TABLE_NAME", node.getAttribute("tableName"))
chamada antiga: assertEquals(4, columns.getLength())
nova chamada: assertEquals("Era esperado valores iguais, mas  4 é diferente de " + result273 + " <columns.getLength()>", 4, columns.getLength())
chamada antiga: assertEquals("column", ((Element) columns.item(0)).getTagName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'column' é diferente de " + result274 + " <((Element) columns.item(0)).getTagName()>", "column", ((Element) columns.item(0)).getTagName())
chamada antiga: assertEquals("id", ((Element) columns.item(0)).getAttribute("name"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'id' é diferente de " + result275 + " <((Element) columns.item(0)).getAttribute('name')>", "id", ((Element) columns.item(0)).getAttribute("name"))
chamada antiga: assertEquals("123", ((Element) columns.item(0)).getAttribute("valueNumeric"))
nova chamada: assertEquals("Era esperado valores iguais, mas  '123' é diferente de " + result276 + " <((Element) columns.item(0)).getAttribute('valueNumeric')>", "123", ((Element) columns.item(0)).getAttribute("valueNumeric"))
chamada antiga: assertEquals("column", ((Element) columns.item(1)).getTagName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'column' é diferente de " + result277 + " <((Element) columns.item(1)).getTagName()>", "column", ((Element) columns.item(1)).getTagName())
chamada antiga: assertEquals("name", ((Element) columns.item(1)).getAttribute("name"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'name' é diferente de " + result278 + " <((Element) columns.item(1)).getAttribute('name')>", "name", ((Element) columns.item(1)).getAttribute("name"))
chamada antiga: assertEquals("Andrew", ((Element) columns.item(1)).getAttribute("value"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'Andrew' é diferente de " + result279 + " <((Element) columns.item(1)).getAttribute('value')>", "Andrew", ((Element) columns.item(1)).getAttribute("value"))
chamada antiga: assertEquals("column", ((Element) columns.item(2)).getTagName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'column' é diferente de " + result280 + " <((Element) columns.item(2)).getTagName()>", "column", ((Element) columns.item(2)).getTagName())
chamada antiga: assertEquals("age", ((Element) columns.item(2)).getAttribute("name"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'age' é diferente de " + result281 + " <((Element) columns.item(2)).getAttribute('name')>", "age", ((Element) columns.item(2)).getAttribute("name"))
chamada antiga: assertEquals("21", ((Element) columns.item(2)).getAttribute("valueNumeric"))
nova chamada: assertEquals("Era esperado valores iguais, mas  '21' é diferente de " + result282 + " <((Element) columns.item(2)).getAttribute('valueNumeric')>", "21", ((Element) columns.item(2)).getAttribute("valueNumeric"))
chamada antiga: assertEquals("column", ((Element) columns.item(3)).getTagName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'column' é diferente de " + result283 + " <((Element) columns.item(3)).getTagName()>", "column", ((Element) columns.item(3)).getTagName())
chamada antiga: assertEquals("height", ((Element) columns.item(3)).getAttribute("name"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'height' é diferente de " + result284 + " <((Element) columns.item(3)).getAttribute('name')>", "height", ((Element) columns.item(3)).getAttribute("name"))
chamada antiga: assertEquals("1.78", ((Element) columns.item(3)).getAttribute("valueNumeric"))
nova chamada: assertEquals("Era esperado valores iguais, mas  '1.78' é diferente de " + result285 + " <((Element) columns.item(3)).getAttribute('valueNumeric')>", "1.78", ((Element) columns.item(3)).getAttribute("valueNumeric"))
chamada antiga: assertEquals("loadData", node.getNodeName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'loadData' é diferente de " + result286 + " <node.getNodeName()>", "loadData", node.getNodeName())
chamada antiga: assertEquals("SCHEMA_NAME", node.getAttribute("schemaName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'SCHEMA_NAME' é diferente de " + result287 + " <node.getAttribute('schemaName')>", "SCHEMA_NAME", node.getAttribute("schemaName"))
chamada antiga: assertEquals("TABLE_NAME", node.getAttribute("tableName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'TABLE_NAME' é diferente de " + result288 + " <node.getAttribute('tableName')>", "TABLE_NAME", node.getAttribute("tableName"))
chamada antiga: assertEquals("FILE_NAME", node.getAttribute("file"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'FILE_NAME' é diferente de " + result289 + " <node.getAttribute('file')>", "FILE_NAME", node.getAttribute("file"))
chamada antiga: assertEquals(StandardCharsets.UTF_8.name(), node.getAttribute("encoding"))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result290 + " <StandardCharsets.UTF_8.name()> é diferente de " + result291 + " <node.getAttribute('encoding')>", StandardCharsets.UTF_8.name(), node.getAttribute("encoding"))
chamada antiga: assertEquals("sql", element.getTagName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'sql' é diferente de " + result292 + " <element.getTagName()>", "sql", element.getTagName())
chamada antiga: assertEquals("SOME SQL HERE", element.getTextContent())
nova chamada: assertEquals("Era esperado valores iguais, mas  'SOME SQL HERE' é diferente de " + result293 + " <element.getTextContent()>", "SOME SQL HERE", element.getTextContent())
chamada antiga: assertEquals("renameColumn", node.getTagName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'renameColumn' é diferente de " + result294 + " <node.getTagName()>", "renameColumn", node.getTagName())
chamada antiga: assertEquals("SCHEMA_NAME", node.getAttribute("schemaName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'SCHEMA_NAME' é diferente de " + result295 + " <node.getAttribute('schemaName')>", "SCHEMA_NAME", node.getAttribute("schemaName"))
chamada antiga: assertEquals("TABLE_NAME", node.getAttribute("tableName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'TABLE_NAME' é diferente de " + result296 + " <node.getAttribute('tableName')>", "TABLE_NAME", node.getAttribute("tableName"))
chamada antiga: assertEquals("oldColName", node.getAttribute("oldColumnName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'oldColName' é diferente de " + result297 + " <node.getAttribute('oldColumnName')>", "oldColName", node.getAttribute("oldColumnName"))
chamada antiga: assertEquals("newColName", node.getAttribute("newColumnName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'newColName' é diferente de " + result298 + " <node.getAttribute('newColumnName')>", "newColName", node.getAttribute("newColumnName"))
chamada antiga: assertEquals("renameTable", node.getTagName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'renameTable' é diferente de " + result299 + " <node.getTagName()>", "renameTable", node.getTagName())
chamada antiga: assertEquals("SCHEMA_NAME", node.getAttribute("schemaName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'SCHEMA_NAME' é diferente de " + result300 + " <node.getAttribute('schemaName')>", "SCHEMA_NAME", node.getAttribute("schemaName"))
chamada antiga: assertEquals("OLD_NAME", node.getAttribute("oldTableName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'OLD_NAME' é diferente de " + result301 + " <node.getAttribute('oldTableName')>", "OLD_NAME", node.getAttribute("oldTableName"))
chamada antiga: assertEquals("NEW_NAME", node.getAttribute("newTableName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'NEW_NAME' é diferente de " + result302 + " <node.getAttribute('newTableName')>", "NEW_NAME", node.getAttribute("newTableName"))
chamada antiga: assertEquals("renameSequence", node.getTagName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'renameSequence' é diferente de " + result303 + " <node.getTagName()>", "renameSequence", node.getTagName())
chamada antiga: assertEquals("SCHEMA_NAME", node.getAttribute("schemaName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'SCHEMA_NAME' é diferente de " + result304 + " <node.getAttribute('schemaName')>", "SCHEMA_NAME", node.getAttribute("schemaName"))
chamada antiga: assertEquals("OLD_NAME", node.getAttribute("oldSequenceName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'OLD_NAME' é diferente de " + result305 + " <node.getAttribute('oldSequenceName')>", "OLD_NAME", node.getAttribute("oldSequenceName"))
chamada antiga: assertEquals("NEW_NAME", node.getAttribute("newSequenceName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'NEW_NAME' é diferente de " + result306 + " <node.getAttribute('newSequenceName')>", "NEW_NAME", node.getAttribute("newSequenceName"))
chamada antiga: assertEquals("renameView", node.getTagName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'renameView' é diferente de " + result307 + " <node.getTagName()>", "renameView", node.getTagName())
chamada antiga: assertEquals("SCHEMA_NAME", node.getAttribute("schemaName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'SCHEMA_NAME' é diferente de " + result308 + " <node.getAttribute('schemaName')>", "SCHEMA_NAME", node.getAttribute("schemaName"))
chamada antiga: assertEquals("OLD_NAME", node.getAttribute("oldViewName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'OLD_NAME' é diferente de " + result309 + " <node.getAttribute('oldViewName')>", "OLD_NAME", node.getAttribute("oldViewName"))
chamada antiga: assertEquals("NEW_NAME", node.getAttribute("newViewName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'NEW_NAME' é diferente de " + result310 + " <node.getAttribute('newViewName')>", "NEW_NAME", node.getAttribute("newViewName"))
chamada antiga: assertEquals("sqlFile", element.getTagName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'sqlFile' é diferente de " + result311 + " <element.getTagName()>", "sqlFile", element.getTagName())
chamada antiga: assertEquals(fileName, element.getAttribute("path"))
nova chamada: assertEquals("Era esperado valores iguais, mas  fileName é diferente de " + result312 + " <element.getAttribute('path')>", fileName, element.getAttribute("path"))
chamada antiga: assertEquals("tagDatabase", node.getTagName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'tagDatabase' é diferente de " + result313 + " <node.getTagName()>", "tagDatabase", node.getTagName())
chamada antiga: assertEquals("TAG_NAME", node.getAttribute("tag"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'TAG_NAME' é diferente de " + result314 + " <node.getAttribute('tag')>", "TAG_NAME", node.getAttribute("tag"))
chamada antiga: assertEquals("createView", node.getTagName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'createView' é diferente de " + result315 + " <node.getTagName()>", "createView", node.getTagName())
chamada antiga: assertEquals("SCHEMA_NAME", node.getAttribute("schemaName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'SCHEMA_NAME' é diferente de " + result316 + " <node.getAttribute('schemaName')>", "SCHEMA_NAME", node.getAttribute("schemaName"))
chamada antiga: assertEquals("VIEW_NAME", node.getAttribute("viewName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'VIEW_NAME' é diferente de " + result317 + " <node.getAttribute('viewName')>", "VIEW_NAME", node.getAttribute("viewName"))
chamada antiga: assertEquals("SELECT * FROM EXISTING_TABLE", node.getTextContent())
nova chamada: assertEquals("Era esperado valores iguais, mas  'SELECT * FROM EXISTING_TABLE' é diferente de " + result318 + " <node.getTextContent()>", "SELECT * FROM EXISTING_TABLE", node.getTextContent())
chamada antiga: assertEquals("<update catalogName=\"a\"\n" + "        schemaName=\"b\"\n" + "        tableName=\"c\">\n" + "    <where>Some Text</where>\n" + "</update>", out)
nova chamada: assertEquals("Era esperado valores iguais, mas  'update catalogName=\'a\'\n' + '        schemaName=\'b\'\n' + '        tableName=\'c\'\n' + '    whereSome Text/where\n' + '/update' é diferente de " + " out", "<update catalogName=\"a\"\n" + "        schemaName=\"b\"\n" + "        tableName=\"c\">\n" + "    <where>Some Text</where>\n" + "</update>", out)
chamada antiga: assertEquals("<changeSet author=\"tms\"\n" + "        contextFilter=\"context\"\n" + "        created=\"created\"\n" + "        dbms=\"mssql\"\n" + "        failOnError=\"true\"\n" + "        id=\"1\"\n" + "        ignore=\"true\"\n" + "        labels=\"label\"\n" + "        logicalFilePath=\"path/to/file.json\"\n" + "        objectQuotingStrategy=\"LEGACY\"\n" + "        runAlways=\"true\"\n" + "        runInTransaction=\"false\"\n" + "        runOnChange=\"true\"\n" + "        runOrder=\"last\"/>", out)
nova chamada: assertEquals("Era esperado valores iguais, mas  'changeSet author=\'tms\'\n' + '        contextFilter=\'context\'\n' + '        created=\'created\'\n' + '        dbms=\'mssql\'\n' + '        failOnError=\'true\'\n' + '        id=\'1\'\n' + '        ignore=\'true\'\n' + '        labels=\'label\'\n' + '        logicalFilePath=\'path/to/file.json\'\n' + '        objectQuotingStrategy=\'LEGACY\'\n' + '        runAlways=\'true\'\n' + '        runInTransaction=\'false\'\n' + '        runOnChange=\'true\'\n' + '        runOrder=\'last\'/' é diferente de " + " out", "<changeSet author=\"tms\"\n" + "        contextFilter=\"context\"\n" + "        created=\"created\"\n" + "        dbms=\"mssql\"\n" + "        failOnError=\"true\"\n" + "        id=\"1\"\n" + "        ignore=\"true\"\n" + "        labels=\"label\"\n" + "        logicalFilePath=\"path/to/file.json\"\n" + "        objectQuotingStrategy=\"LEGACY\"\n" + "        runAlways=\"true\"\n" + "        runInTransaction=\"false\"\n" + "        runOnChange=\"true\"\n" + "        runOrder=\"last\"/>", out)
chamada antiga: assertEquals("<createTable catalogName=\"a\"\n" + "        schemaName=\"b\"\n" + "        tableName=\"c\">\n" + "    <column defaultValue=\"x1\" name=\"x\"/>\n" + "    <column defaultValue=\"y1\" name=\"y\"/>\n" + "</createTable>", out)
nova chamada: assertEquals("Era esperado valores iguais, mas  'createTable catalogName=\'a\'\n' + '        schemaName=\'b\'\n' + '        tableName=\'c\'\n' + '    column defaultValue=\'x1\' name=\'x\'/\n' + '    column defaultValue=\'y1\' name=\'y\'/\n' + '/createTable' é diferente de " + " out", "<createTable catalogName=\"a\"\n" + "        schemaName=\"b\"\n" + "        tableName=\"c\">\n" + "    <column defaultValue=\"x1\" name=\"x\"/>\n" + "    <column defaultValue=\"y1\" name=\"y\"/>\n" + "</createTable>", out)
chamada antiga: assertEquals("<addAutoIncrement catalogName=\"a\"\n" + "        schemaName=\"b\"\n" + "        tableName=\"c\"/>", out)
nova chamada: assertEquals("Era esperado valores iguais, mas  'addAutoIncrement catalogName=\'a\'\n' + '        schemaName=\'b\'\n' + '        tableName=\'c\'/' é diferente de " + " out", "<addAutoIncrement catalogName=\"a\"\n" + "        schemaName=\"b\"\n" + "        tableName=\"c\"/>", out)
chamada antiga: assertEquals("ValHere", ReflectionSerializer.getInstance().getValue(visitor, "value"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'ValHere' é diferente de " + result319 + " <ReflectionSerializer.getInstance().getValue(visitor, 'value')>", "ValHere", ReflectionSerializer.getInstance().getValue(visitor, "value"))
chamada antiga: assertEquals(true, ReflectionSerializer.getInstance().getValue(visitor, "applyToRollback"))
nova chamada: assertEquals("Era esperado valores iguais, mas  true é diferente de " + result320 + " <ReflectionSerializer.getInstance().getValue(visitor, 'applyToRollback')>", true, ReflectionSerializer.getInstance().getValue(visitor, "applyToRollback"))
chamada antiga: assertEquals(0, errMsgs.size())
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + result321 + " <errMsgs.size()>", 0, errMsgs.size())
chamada antiga: assertEquals(1, errMsgs.size())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result322 + " <errMsgs.size()>", 1, errMsgs.size())
chamada antiga: assertEquals(0, errMsgs.size())
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + result323 + " <errMsgs.size()>", 0, errMsgs.size())
chamada antiga: assertEquals("DRIVER", cli.driver)
nova chamada: assertEquals("Era esperado valores iguais, mas  'DRIVER' é diferente de " + " cli.driver", "DRIVER", cli.driver)
chamada antiga: assertEquals("USERNAME", cli.username)
nova chamada: assertEquals("Era esperado valores iguais, mas  'USERNAME' é diferente de " + " cli.username", "USERNAME", cli.username)
chamada antiga: assertEquals("PASSWD", cli.password)
nova chamada: assertEquals("Era esperado valores iguais, mas  'PASSWD' é diferente de " + " cli.password", "PASSWD", cli.password)
chamada antiga: assertEquals("URL", cli.url)
nova chamada: assertEquals("Era esperado valores iguais, mas  'URL' é diferente de " + " cli.url", "URL", cli.url)
chamada antiga: assertEquals("FILE", cli.changeLogFile)
nova chamada: assertEquals("Era esperado valores iguais, mas  'FILE' é diferente de " + " cli.changeLogFile", "FILE", cli.changeLogFile)
chamada antiga: assertEquals("CLASSPAHT", cli.classpath)
nova chamada: assertEquals("Era esperado valores iguais, mas  'CLASSPAHT' é diferente de " + " cli.classpath", "CLASSPAHT", cli.classpath)
chamada antiga: assertEquals("CONTEXTS", cli.contexts)
nova chamada: assertEquals("Era esperado valores iguais, mas  'CONTEXTS' é diferente de " + " cli.contexts", "CONTEXTS", cli.contexts)
chamada antiga: assertEquals(Boolean.TRUE, cli.promptForNonLocalDatabase)
nova chamada: assertEquals("Era esperado valores iguais, mas  Boolean.TRUE é diferente de " + " cli.promptForNonLocalDatabase", Boolean.TRUE, cli.promptForNonLocalDatabase)
chamada antiga: assertEquals("DRIVER", cli.driver)
nova chamada: assertEquals("Era esperado valores iguais, mas  'DRIVER' é diferente de " + " cli.driver", "DRIVER", cli.driver)
chamada antiga: assertEquals("PASSED USERNAME", cli.username)
nova chamada: assertEquals("Era esperado valores iguais, mas  'PASSED USERNAME' é diferente de " + " cli.username", "PASSED USERNAME", cli.username)
chamada antiga: assertEquals("PASSED PASSWD", cli.password)
nova chamada: assertEquals("Era esperado valores iguais, mas  'PASSED PASSWD' é diferente de " + " cli.password", "PASSED PASSWD", cli.password)
chamada antiga: assertEquals("URL", cli.url)
nova chamada: assertEquals("Era esperado valores iguais, mas  'URL' é diferente de " + " cli.url", "URL", cli.url)
chamada antiga: assertEquals("FILE", cli.changeLogFile)
nova chamada: assertEquals("Era esperado valores iguais, mas  'FILE' é diferente de " + " cli.changeLogFile", "FILE", cli.changeLogFile)
chamada antiga: assertEquals("CLASSPAHT", cli.classpath)
nova chamada: assertEquals("Era esperado valores iguais, mas  'CLASSPAHT' é diferente de " + " cli.classpath", "CLASSPAHT", cli.classpath)
chamada antiga: assertEquals("CONTEXTS", cli.contexts)
nova chamada: assertEquals("Era esperado valores iguais, mas  'CONTEXTS' é diferente de " + " cli.contexts", "CONTEXTS", cli.contexts)
chamada antiga: assertEquals(Boolean.TRUE, cli.promptForNonLocalDatabase)
nova chamada: assertEquals("Era esperado valores iguais, mas  Boolean.TRUE é diferente de " + " cli.promptForNonLocalDatabase", Boolean.TRUE, cli.promptForNonLocalDatabase)
chamada antiga: assertFalse(cli.checkSetup().isEmpty())
nova chamada: assertFalse("Era esperado falso, mas " + result324 + " <cli.checkSetup().isEmpty()> é verdadeiro ", cli.checkSetup().isEmpty())
chamada antiga: assertFalse(cli.checkSetup().isEmpty())
nova chamada: assertFalse("Era esperado falso, mas " + result325 + " <cli.checkSetup().isEmpty()> é verdadeiro ", cli.checkSetup().isEmpty())
chamada antiga: assertFalse(cli.checkSetup().isEmpty())
nova chamada: assertFalse("Era esperado falso, mas " + result326 + " <cli.checkSetup().isEmpty()> é verdadeiro ", cli.checkSetup().isEmpty())
chamada antiga: assertEquals(0, cli.checkSetup().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + result327 + " <cli.checkSetup().size()>", 0, cli.checkSetup().size())
chamada antiga: assertEquals(0, cli.checkSetup().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + result328 + " <cli.checkSetup().size()>", 0, cli.checkSetup().size())
chamada antiga: assertEquals(0, cli.checkSetup().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + result329 + " <cli.checkSetup().size()>", 0, cli.checkSetup().size())
chamada antiga: assertEquals(0, cli.checkSetup().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + result330 + " <cli.checkSetup().size()>", 0, cli.checkSetup().size())
chamada antiga: assertEquals(1, cli.checkSetup().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result331 + " <cli.checkSetup().size()>", 1, cli.checkSetup().size())
chamada antiga: assertEquals(0, cli.checkSetup().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + result332 + " <cli.checkSetup().size()>", 0, cli.checkSetup().size())
chamada antiga: assertEquals(1, cli.checkSetup().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result333 + " <cli.checkSetup().size()>", 1, cli.checkSetup().size())
chamada antiga: assertEquals(url, cli.url)
nova chamada: assertEquals("Era esperado valores iguais, mas  url é diferente de " + " cli.url", url, cli.url)
chamada antiga: assertEquals("--defaultsFile=liquibase.properties migrate", StringUtil.join(Arrays.asList(fixedArgs), " "))
nova chamada: assertEquals("Era esperado valores iguais, mas  '--defaultsFile=liquibase.properties migrate' é diferente de " + result334 + " <StringUtil.join(Arrays.asList(fixedArgs), ' ')>", "--defaultsFile=liquibase.properties migrate", StringUtil.join(Arrays.asList(fixedArgs), " "))
chamada antiga: assertEquals("--defaultsFile=liquibase.properties migrate", StringUtil.join(Arrays.asList(fixedArgs), " "))
nova chamada: assertEquals("Era esperado valores iguais, mas  '--defaultsFile=liquibase.properties migrate' é diferente de " + result335 + " <StringUtil.join(Arrays.asList(fixedArgs), ' ')>", "--defaultsFile=liquibase.properties migrate", StringUtil.join(Arrays.asList(fixedArgs), " "))
chamada antiga: assertEquals("--driver=DRIVER --username=USERNAME --password=PASSWORD --url=URL --changeLogFile=FILE " + "--classpath=CLASSPATH;CLASSPATH2 --contexts=CONTEXT1,CONTEXT2 " + "--promptForNonLocalDatabase=true migrate", StringUtil.join(Arrays.asList(fixedArgs), " "))
nova chamada: assertEquals("Era esperado valores iguais, mas  '--driver=DRIVER --username=USERNAME --password=PASSWORD --url=URL --changeLogFile=FILE ' + '--classpath=CLASSPATH;CLASSPATH2 --contexts=CONTEXT1,CONTEXT2 ' + '--promptForNonLocalDatabase=true migrate' é diferente de " + result336 + " <StringUtil.join(Arrays.asList(fixedArgs), ' ')>", "--driver=DRIVER --username=USERNAME --password=PASSWORD --url=URL --changeLogFile=FILE " + "--classpath=CLASSPATH;CLASSPATH2 --contexts=CONTEXT1,CONTEXT2 " + "--promptForNonLocalDatabase=true migrate", StringUtil.join(Arrays.asList(fixedArgs), " "))
chamada antiga: assertTrue(true)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", true)
chamada antiga: assertNotNull(LockServiceFactory.getInstance())
nova chamada: assertNotNull("Era esperado não nulo, mas " + result337 + " <LockServiceFactory.getInstance()> é nulo", LockServiceFactory.getInstance())
chamada antiga: assertSame(LockServiceFactory.getInstance(), LockServiceFactory.getInstance())
nova chamada: assertSame("Era esperado objetos iguais, mas " + result338 + " <LockServiceFactory.getInstance()> é diferente de " + result339 + " <LockServiceFactory.getInstance()>", LockServiceFactory.getInstance(), LockServiceFactory.getInstance())
chamada antiga: assertNotNull(lockServiceFactory.getLockService(oracle1))
nova chamada: assertNotNull("Era esperado não nulo, mas " + result340 + " <lockServiceFactory.getLockService(oracle1)> é nulo", lockServiceFactory.getLockService(oracle1))
chamada antiga: assertNotNull(lockServiceFactory.getLockService(oracle2))
nova chamada: assertNotNull("Era esperado não nulo, mas " + result341 + " <lockServiceFactory.getLockService(oracle2)> é nulo", lockServiceFactory.getLockService(oracle2))
chamada antiga: assertNotNull(lockServiceFactory.getLockService(mysql))
nova chamada: assertNotNull("Era esperado não nulo, mas " + result342 + " <lockServiceFactory.getLockService(mysql)> é nulo", lockServiceFactory.getLockService(mysql))
chamada antiga: assertSame(lockServiceFactory.getLockService(oracle1), lockServiceFactory.getLockService(oracle1))
nova chamada: assertSame("Era esperado objetos iguais, mas " + result343 + " <lockServiceFactory.getLockService(oracle1)> é diferente de " + result344 + " <lockServiceFactory.getLockService(oracle1)>", lockServiceFactory.getLockService(oracle1), lockServiceFactory.getLockService(oracle1))
chamada antiga: assertSame(lockServiceFactory.getLockService(oracle2), lockServiceFactory.getLockService(oracle2))
nova chamada: assertSame("Era esperado objetos iguais, mas " + result345 + " <lockServiceFactory.getLockService(oracle2)> é diferente de " + result346 + " <lockServiceFactory.getLockService(oracle2)>", lockServiceFactory.getLockService(oracle2), lockServiceFactory.getLockService(oracle2))
chamada antiga: assertSame(lockServiceFactory.getLockService(mysql), lockServiceFactory.getLockService(mysql))
nova chamada: assertSame("Era esperado objetos iguais, mas " + result347 + " <lockServiceFactory.getLockService(mysql)> é diferente de " + result348 + " <lockServiceFactory.getLockService(mysql)>", lockServiceFactory.getLockService(mysql), lockServiceFactory.getLockService(mysql))
chamada antiga: assertNotSame(lockServiceFactory.getLockService(oracle1), lockServiceFactory.getLockService(oracle2))
nova chamada: assertNotSame("Era esperado objetos diferentes, mas " + result349 + " <lockServiceFactory.getLockService(oracle1)> é igual a " + result350 + " <lockServiceFactory.getLockService(oracle2)>", lockServiceFactory.getLockService(oracle1), lockServiceFactory.getLockService(oracle2))
chamada antiga: assertNotSame(lockServiceFactory.getLockService(oracle1), lockServiceFactory.getLockService(mysql))
nova chamada: assertNotSame("Era esperado objetos diferentes, mas " + result351 + " <lockServiceFactory.getLockService(oracle1)> é igual a " + result352 + " <lockServiceFactory.getLockService(mysql)>", lockServiceFactory.getLockService(oracle1), lockServiceFactory.getLockService(mysql))
chamada antiga: assertTrue(lockServiceFactory.getLockService(getMockDatabase()) instanceof MockLockService)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", lockServiceFactory.getLockService(getMockDatabase()) instanceof MockLockService)
chamada antiga: assertEquals(expected, bt.objectToSql("'111111111111'", new PostgresDatabase()))
nova chamada: assertEquals("Era esperado valores iguais, mas  expected é diferente de " + result353 + " <bt.objectToSql(''111111111111'', new PostgresDatabase())>", expected, bt.objectToSql("'111111111111'", new PostgresDatabase()))
chamada antiga: assertEquals(expected, bt.objectToSql("b'111111111111'", new PostgresDatabase()))
nova chamada: assertEquals("Era esperado valores iguais, mas  expected é diferente de " + result354 + " <bt.objectToSql('b'111111111111'', new PostgresDatabase())>", expected, bt.objectToSql("b'111111111111'", new PostgresDatabase()))
chamada antiga: assertEquals(expected, bt.objectToSql("'111111111111'::bit", new PostgresDatabase()))
nova chamada: assertEquals("Era esperado valores iguais, mas  expected é diferente de " + result355 + " <bt.objectToSql(''111111111111'::bit', new PostgresDatabase())>", expected, bt.objectToSql("'111111111111'::bit", new PostgresDatabase()))
chamada antiga: assertEquals(expected, bt.objectToSql("b'111111111111'::bit", new PostgresDatabase()))
nova chamada: assertEquals("Era esperado valores iguais, mas  expected é diferente de " + result356 + " <bt.objectToSql('b'111111111111'::bit', new PostgresDatabase())>", expected, bt.objectToSql("b'111111111111'::bit", new PostgresDatabase()))
chamada antiga: assertEquals(expected, bt.objectToSql("'111111111111'::\"bit\"", new PostgresDatabase()))
nova chamada: assertEquals("Era esperado valores iguais, mas  expected é diferente de " + result357 + " <bt.objectToSql(''111111111111'::\'bit\'', new PostgresDatabase())>", expected, bt.objectToSql("'111111111111'::\"bit\"", new PostgresDatabase()))
chamada antiga: assertEquals(expected, bt.objectToSql("b'111111111111'::\"bit\"", new PostgresDatabase()))
nova chamada: assertEquals("Era esperado valores iguais, mas  expected é diferente de " + result358 + " <bt.objectToSql('b'111111111111'::\'bit\'', new PostgresDatabase())>", expected, bt.objectToSql("b'111111111111'::\"bit\"", new PostgresDatabase()))
chamada antiga: assertNotEquals("b'1'", bt.objectToSql("'12'", new PostgresDatabase()))
nova chamada: assertNotEquals("Era esperado valores diferentes, mas  'b'1'' é igual a " + result359 + " <bt.objectToSql(''12'', new PostgresDatabase())>", "b'1'", bt.objectToSql("'12'", new PostgresDatabase()))
chamada antiga: assertEquals(this.getClass().getName().replaceFirst("Test$", ""), generatorUnderTest.getClass().getName())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result360 + " <this.getClass().getName().replaceFirst('Test$', '')> é diferente de " + result361 + " <generatorUnderTest.getClass().getName()>", this.getClass().getName().replaceFirst("Test$", ""), generatorUnderTest.getClass().getName())
chamada antiga: assertNull(chain.generateSql(new MockSqlStatement(), new MockDatabase()))
nova chamada: assertNull("Era esperado nulo, mas " + result362 + " <chain.generateSql(new MockSqlStatement(), new MockDatabase())> não é nulo", chain.generateSql(new MockSqlStatement(), new MockDatabase()))
chamada antiga: assertEquals(0, chain.generateSql(new MockSqlStatement(), new MockDatabase()).length)
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + " chain.generateSql(new MockSqlStatement(), new MockDatabase()).length", 0, chain.generateSql(new MockSqlStatement(), new MockDatabase()).length)
chamada antiga: assertEquals(2, sql.length)
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + " sql.length", 2, sql.length)
chamada antiga: assertEquals("A1", sql[0].toSql())
nova chamada: assertEquals("Era esperado valores iguais, mas  'A1' é diferente de " + result363 + " <sql[0].toSql()>", "A1", sql[0].toSql())
chamada antiga: assertEquals("A2", sql[1].toSql())
nova chamada: assertEquals("Era esperado valores iguais, mas  'A2' é diferente de " + result364 + " <sql[1].toSql()>", "A2", sql[1].toSql())
chamada antiga: assertEquals(4, sql.length)
nova chamada: assertEquals("Era esperado valores iguais, mas  4 é diferente de " + " sql.length", 4, sql.length)
chamada antiga: assertEquals("B1", sql[0].toSql())
nova chamada: assertEquals("Era esperado valores iguais, mas  'B1' é diferente de " + result365 + " <sql[0].toSql()>", "B1", sql[0].toSql())
chamada antiga: assertEquals("B2", sql[1].toSql())
nova chamada: assertEquals("Era esperado valores iguais, mas  'B2' é diferente de " + result366 + " <sql[1].toSql()>", "B2", sql[1].toSql())
chamada antiga: assertEquals("A1", sql[2].toSql())
nova chamada: assertEquals("Era esperado valores iguais, mas  'A1' é diferente de " + result367 + " <sql[2].toSql()>", "A1", sql[2].toSql())
chamada antiga: assertEquals("A2", sql[3].toSql())
nova chamada: assertEquals("Era esperado valores iguais, mas  'A2' é diferente de " + result368 + " <sql[3].toSql()>", "A2", sql[3].toSql())
chamada antiga: assertEquals(6, sql.length)
nova chamada: assertEquals("Era esperado valores iguais, mas  6 é diferente de " + " sql.length", 6, sql.length)
chamada antiga: assertEquals("C1", sql[0].toSql())
nova chamada: assertEquals("Era esperado valores iguais, mas  'C1' é diferente de " + result369 + " <sql[0].toSql()>", "C1", sql[0].toSql())
chamada antiga: assertEquals("C2", sql[1].toSql())
nova chamada: assertEquals("Era esperado valores iguais, mas  'C2' é diferente de " + result370 + " <sql[1].toSql()>", "C2", sql[1].toSql())
chamada antiga: assertEquals("B1", sql[2].toSql())
nova chamada: assertEquals("Era esperado valores iguais, mas  'B1' é diferente de " + result371 + " <sql[2].toSql()>", "B1", sql[2].toSql())
chamada antiga: assertEquals("B2", sql[3].toSql())
nova chamada: assertEquals("Era esperado valores iguais, mas  'B2' é diferente de " + result372 + " <sql[3].toSql()>", "B2", sql[3].toSql())
chamada antiga: assertEquals("A1", sql[4].toSql())
nova chamada: assertEquals("Era esperado valores iguais, mas  'A1' é diferente de " + result373 + " <sql[4].toSql()>", "A1", sql[4].toSql())
chamada antiga: assertEquals("A2", sql[5].toSql())
nova chamada: assertEquals("Era esperado valores iguais, mas  'A2' é diferente de " + result374 + " <sql[5].toSql()>", "A2", sql[5].toSql())
chamada antiga: assertFalse(validationErrors.hasErrors())
nova chamada: assertFalse("Era esperado falso, mas " + result375 + " <validationErrors.hasErrors()> é verdadeiro ", validationErrors.hasErrors())
chamada antiga: assertFalse(validationErrors.hasErrors())
nova chamada: assertFalse("Era esperado falso, mas " + result376 + " <validationErrors.hasErrors()> é verdadeiro ", validationErrors.hasErrors())
chamada antiga: assertTrue(validationErrors.hasErrors())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result377 + " <validationErrors.hasErrors()> é falso", validationErrors.hasErrors())
chamada antiga: assertFalse(validationErrors.hasErrors())
nova chamada: assertFalse("Era esperado falso, mas " + result378 + " <validationErrors.hasErrors()> é verdadeiro ", validationErrors.hasErrors())
chamada antiga: assertTrue(validationErrors.hasErrors())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result379 + " <validationErrors.hasErrors()> é falso", validationErrors.hasErrors())
chamada antiga: assertTrue(validationErrors.hasErrors())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result380 + " <validationErrors.hasErrors()> é falso", validationErrors.hasErrors())
chamada antiga: assertEquals("CREATE TABLE SCHEMA_NAME.TABLE_NAME (, CONSTRAINT fk_test_parent FOREIGN KEY (id) REFERENCES \"my-schema\".TABLE_NAME(id))", generatedSql[0].toSql())
nova chamada: assertEquals("Era esperado valores iguais, mas  'CREATE TABLE SCHEMA_NAME.TABLE_NAME (, CONSTRAINT fk_test_parent FOREIGN KEY (id) REFERENCES \'my-schema\'.TABLE_NAME(id))' é diferente de " + result381 + " <generatedSql[0].toSql()>", "CREATE TABLE SCHEMA_NAME.TABLE_NAME (, CONSTRAINT fk_test_parent FOREIGN KEY (id) REFERENCES \"my-schema\".TABLE_NAME(id))", generatedSql[0].toSql())
chamada antiga: assertEquals(expectedSql, generatedSql[0].toSql())
nova chamada: assertEquals("Era esperado valores iguais, mas  expectedSql é diferente de " + result382 + " <generatedSql[0].toSql()>", expectedSql, generatedSql[0].toSql())
chamada antiga: assertTrue(actualNames.containsAll(expectedNames))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result383 + " <actualNames.containsAll(expectedNames)> é falso", actualNames.containsAll(expectedNames))
chamada antiga: assertTrue(expectedNames.containsAll(actualNames))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result384 + " <expectedNames.containsAll(actualNames)> é falso", expectedNames.containsAll(actualNames))
chamada antiga: Assert.assertTrue(sql[0].toSql().contains("TEST_TABLE") && sql[0].toSql().contains("col1"))
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", sql[0].toSql().contains("TEST_TABLE") && sql[0].toSql().contains("col1"))
chamada antiga: Assert.assertTrue(sql[2].toSql().contains("TEST_TABLE") && sql[2].toSql().contains("col2"))
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", sql[2].toSql().contains("TEST_TABLE") && sql[2].toSql().contains("col2"))
chamada antiga: Assert.assertTrue(sql[0].toSql().contains("TEST_TABLE") && sql[0].toSql().contains("col1"))
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", sql[0].toSql().contains("TEST_TABLE") && sql[0].toSql().contains("col1"))
chamada antiga: Assert.assertEquals(1, sql.length)
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + " sql.length", 1, sql.length)
chamada antiga: Assert.assertEquals("ALTER TABLE TEST_TABLE DROP col1, DROP col2", sql[0].toSql())
nova chamada: assertEquals("Era esperado valores iguais, mas  'ALTER TABLE TEST_TABLE DROP col1, DROP col2' é diferente de " + result385 + " <sql[0].toSql()>", "ALTER TABLE TEST_TABLE DROP col1, DROP col2", sql[0].toSql())
chamada antiga: Assert.assertEquals(4, sql.length)
nova chamada: assertEquals("Era esperado valores iguais, mas  4 é diferente de " + " sql.length", 4, sql.length)
chamada antiga: Assert.assertEquals("ALTER TABLE TEST_TABLE DROP COLUMN col1", sql[1].toSql())
nova chamada: assertEquals("Era esperado valores iguais, mas  'ALTER TABLE TEST_TABLE DROP COLUMN col1' é diferente de " + result386 + " <sql[1].toSql()>", "ALTER TABLE TEST_TABLE DROP COLUMN col1", sql[1].toSql())
chamada antiga: Assert.assertEquals("ALTER TABLE TEST_TABLE DROP COLUMN col2", sql[3].toSql())
nova chamada: assertEquals("Era esperado valores iguais, mas  'ALTER TABLE TEST_TABLE DROP COLUMN col2' é diferente de " + result387 + " <sql[3].toSql()>", "ALTER TABLE TEST_TABLE DROP COLUMN col2", sql[3].toSql())
chamada antiga: Assert.assertEquals(2, sql.length)
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + " sql.length", 2, sql.length)
chamada antiga: Assert.assertEquals("ALTER TABLE TEST_TABLE DROP COLUMN col1", sql[1].toSql())
nova chamada: assertEquals("Era esperado valores iguais, mas  'ALTER TABLE TEST_TABLE DROP COLUMN col1' é diferente de " + result388 + " <sql[1].toSql()>", "ALTER TABLE TEST_TABLE DROP COLUMN col1", sql[1].toSql())
chamada antiga: assertEquals("", result)
nova chamada: assertEquals("Era esperado valores iguais, mas  '' é diferente de " + " result", "", result)
chamada antiga: assertEquals(String.format("UPDATE %s.%s SET %s = '%s' WHERE %s = '%s';\n", SCHEMA_NAME, TABLE_NAME, "col0", "value0", "pk1", "keyvalue1"), result)
nova chamada: assertEquals("Era esperado valores iguais, mas " + result389 + " <String.format('UPDATE %s.%s SET %s = '%s' WHERE %s = '%s';\n', SCHEMA_NAME, TABLE_NAME, 'col0', 'value0', 'pk1', 'keyvalue1')> é diferente de " + " result", String.format("UPDATE %s.%s SET %s = '%s' WHERE %s = '%s';\n", SCHEMA_NAME, TABLE_NAME, "col0", "value0", "pk1", "keyvalue1"), result)
chamada antiga: assertThat(results, is(arrayWithSize(1)))
nova chamada: assertThat("Era esperado que  results satisfizesse a condição " + result390 + " <is(arrayWithSize(1))>, mas não a satisfez", results, is(arrayWithSize(1)))
chamada antiga: assertEquals(String.format("MERGE INTO %s.%s (%s, %s) KEY(%s) VALUES ('%s', '%s');", SCHEMA_NAME, TABLE_NAME, "pk1", "col0", "pk1", "keyvalue1", "value0"), results[0].toSql())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result391 + " <String.format('MERGE INTO %s.%s (%s, %s) KEY(%s) VALUES ('%s', '%s');', SCHEMA_NAME, TABLE_NAME, 'pk1', 'col0', 'pk1', 'keyvalue1', 'value0')> é diferente de " + result392 + " <results[0].toSql()>", String.format("MERGE INTO %s.%s (%s, %s) KEY(%s) VALUES ('%s', '%s');", SCHEMA_NAME, TABLE_NAME, "pk1", "col0", "pk1", "keyvalue1", "value0"), results[0].toSql())
chamada antiga: assertThat(results, is(arrayWithSize(1)))
nova chamada: assertThat("Era esperado que  results satisfizesse a condição " + result393 + " <is(arrayWithSize(1))>, mas não a satisfez", results, is(arrayWithSize(1)))
chamada antiga: assertEquals(String.format("MERGE INTO %s.%s (%s, %s) KEY(%s) VALUES ('%s', '%s');", SCHEMA_NAME, TABLE_NAME, "pk1", "col0", "pk1", "keyvalue1", "scale values mean"), results[0].toSql())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result394 + " <String.format('MERGE INTO %s.%s (%s, %s) KEY(%s) VALUES ('%s', '%s');', SCHEMA_NAME, TABLE_NAME, 'pk1', 'col0', 'pk1', 'keyvalue1', 'scale values mean')> é diferente de " + result395 + " <results[0].toSql()>", String.format("MERGE INTO %s.%s (%s, %s) KEY(%s) VALUES ('%s', '%s');", SCHEMA_NAME, TABLE_NAME, "pk1", "col0", "pk1", "keyvalue1", "scale values mean"), results[0].toSql())
chamada antiga: Assert.assertEquals("CREATE INDEX INDEX1 ON SCHEMA1.TABLE1(COL1, COL2 DESC)", result[0].toSql())
nova chamada: assertEquals("Era esperado valores iguais, mas  'CREATE INDEX INDEX1 ON SCHEMA1.TABLE1(COL1, COL2 DESC)' é diferente de " + result396 + " <result[0].toSql()>", "CREATE INDEX INDEX1 ON SCHEMA1.TABLE1(COL1, COL2 DESC)", result[0].toSql())
chamada antiga: assertEquals(1, sqls.length)
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + " sqls.length", 1, sqls.length)
chamada antiga: assertTrue(sql.contains("COMMENTS = 'comment12345'"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result397 + " <sql.contains('COMMENTS = 'comment12345'')> é falso", sql.contains("COMMENTS = 'comment12345'"))
chamada antiga: assertTrue(sql.contains("CONTEXTS = '(childChangeLogContext1, childChangeLogContext2 AND childChangeLogContext3) AND (includeContext1, includeContext2 AND includeContext3) AND (rootContext1 OR (rootContext2) AND (rootContext3)) AND (changeSetContext1 AND changeSetContext2)'"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result398 + " <sql.contains('CONTEXTS = '(childChangeLogContext1, childChangeLogContext2 AND childChangeLogContext3) AND (includeContext1, includeContext2 AND includeContext3) AND (rootContext1 OR (rootContext2) AND (rootContext3)) AND (changeSetContext1 AND changeSetContext2)'')> é falso", sql.contains("CONTEXTS = '(childChangeLogContext1, childChangeLogContext2 AND childChangeLogContext3) AND (includeContext1, includeContext2 AND includeContext3) AND (rootContext1 OR (rootContext2) AND (rootContext3)) AND (changeSetContext1 AND changeSetContext2)'"))
chamada antiga: assertTrue(sql.contains("LABELS = 'newlabel123'"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result399 + " <sql.contains('LABELS = 'newlabel123'')> é falso", sql.contains("LABELS = 'newlabel123'"))
chamada antiga: assertEquals("a", new MarkChangeSetRanGenerator().getLabelsColumn(changeSet))
nova chamada: assertEquals("Era esperado valores iguais, mas  'a' é diferente de " + result400 + " <new MarkChangeSetRanGenerator().getLabelsColumn(changeSet)>", "a", new MarkChangeSetRanGenerator().getLabelsColumn(changeSet))
chamada antiga: assertEquals("a,b", new MarkChangeSetRanGenerator().getLabelsColumn(changeSet))
nova chamada: assertEquals("Era esperado valores iguais, mas  'a,b' é diferente de " + result401 + " <new MarkChangeSetRanGenerator().getLabelsColumn(changeSet)>", "a,b", new MarkChangeSetRanGenerator().getLabelsColumn(changeSet))
chamada antiga: assertEquals("p1,a,b", new MarkChangeSetRanGenerator().getLabelsColumn(changeSet))
nova chamada: assertEquals("Era esperado valores iguais, mas  'p1,a,b' é diferente de " + result402 + " <new MarkChangeSetRanGenerator().getLabelsColumn(changeSet)>", "p1,a,b", new MarkChangeSetRanGenerator().getLabelsColumn(changeSet))
chamada antiga: assertEquals("p1,a", new MarkChangeSetRanGenerator().getLabelsColumn(changeSet))
nova chamada: assertEquals("Era esperado valores iguais, mas  'p1,a' é diferente de " + result403 + " <new MarkChangeSetRanGenerator().getLabelsColumn(changeSet)>", "p1,a", new MarkChangeSetRanGenerator().getLabelsColumn(changeSet))
chamada antiga: assertEquals("p1", new MarkChangeSetRanGenerator().getLabelsColumn(changeSet))
nova chamada: assertEquals("Era esperado valores iguais, mas  'p1' é diferente de " + result404 + " <new MarkChangeSetRanGenerator().getLabelsColumn(changeSet)>", "p1", new MarkChangeSetRanGenerator().getLabelsColumn(changeSet))
chamada antiga: assertEquals("p1", new MarkChangeSetRanGenerator().getLabelsColumn(changeSet))
nova chamada: assertEquals("Era esperado valores iguais, mas  'p1' é diferente de " + result405 + " <new MarkChangeSetRanGenerator().getLabelsColumn(changeSet)>", "p1", new MarkChangeSetRanGenerator().getLabelsColumn(changeSet))
chamada antiga: assertEquals("a", new MarkChangeSetRanGenerator().getContextsColumn(changeSet))
nova chamada: assertEquals("Era esperado valores iguais, mas  'a' é diferente de " + result406 + " <new MarkChangeSetRanGenerator().getContextsColumn(changeSet)>", "a", new MarkChangeSetRanGenerator().getContextsColumn(changeSet))
chamada antiga: assertEquals("(a or b)", new MarkChangeSetRanGenerator().getContextsColumn(changeSet))
nova chamada: assertEquals("Era esperado valores iguais, mas  '(a or b)' é diferente de " + result407 + " <new MarkChangeSetRanGenerator().getContextsColumn(changeSet)>", "(a or b)", new MarkChangeSetRanGenerator().getContextsColumn(changeSet))
chamada antiga: assertEquals("p1 AND (a or b)", new MarkChangeSetRanGenerator().getContextsColumn(changeSet))
nova chamada: assertEquals("Era esperado valores iguais, mas  'p1 AND (a or b)' é diferente de " + result408 + " <new MarkChangeSetRanGenerator().getContextsColumn(changeSet)>", "p1 AND (a or b)", new MarkChangeSetRanGenerator().getContextsColumn(changeSet))
chamada antiga: assertEquals("p1 AND a", new MarkChangeSetRanGenerator().getContextsColumn(changeSet))
nova chamada: assertEquals("Era esperado valores iguais, mas  'p1 AND a' é diferente de " + result409 + " <new MarkChangeSetRanGenerator().getContextsColumn(changeSet)>", "p1 AND a", new MarkChangeSetRanGenerator().getContextsColumn(changeSet))
chamada antiga: assertEquals("p1", new MarkChangeSetRanGenerator().getContextsColumn(changeSet))
nova chamada: assertEquals("Era esperado valores iguais, mas  'p1' é diferente de " + result410 + " <new MarkChangeSetRanGenerator().getContextsColumn(changeSet)>", "p1", new MarkChangeSetRanGenerator().getContextsColumn(changeSet))
chamada antiga: assertEquals("p1", new MarkChangeSetRanGenerator().getContextsColumn(changeSet))
nova chamada: assertEquals("Era esperado valores iguais, mas  'p1' é diferente de " + result411 + " <new MarkChangeSetRanGenerator().getContextsColumn(changeSet)>", "p1", new MarkChangeSetRanGenerator().getContextsColumn(changeSet))
chamada antiga: assertTrue(truncatedPath.endsWith("/..."))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result412 + " <truncatedPath.endsWith('/...')> é falso", truncatedPath.endsWith("/..."))
chamada antiga: assertTrue(truncatedPath.length() <= filePath.length())
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", truncatedPath.length() <= filePath.length())
chamada antiga: assertTrue(validationErrors.getErrorMessages().contains("Cannot add an identity column to derby"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result413 + " <validationErrors.getErrorMessages().contains('Cannot add an identity column to derby')> é falso", validationErrors.getErrorMessages().contains("Cannot add an identity column to derby"))
chamada antiga: Assert.assertFalse(generatorUnderTest.validate(drop, new MySQLDatabase(), new MockSqlGeneratorChain()).hasErrors())
nova chamada: assertFalse("Era esperado falso, mas " + result414 + " <generatorUnderTest.validate(drop, new MySQLDatabase(), new MockSqlGeneratorChain()).hasErrors()> é verdadeiro ", generatorUnderTest.validate(drop, new MySQLDatabase(), new MockSqlGeneratorChain()).hasErrors())
chamada antiga: Assert.assertFalse(generatorUnderTest.validate(drop, new MSSQLDatabase(), new MockSqlGeneratorChain()).hasErrors())
nova chamada: assertFalse("Era esperado falso, mas " + result415 + " <generatorUnderTest.validate(drop, new MSSQLDatabase(), new MockSqlGeneratorChain()).hasErrors()> é verdadeiro ", generatorUnderTest.validate(drop, new MSSQLDatabase(), new MockSqlGeneratorChain()).hasErrors())
chamada antiga: Assert.assertFalse(generatorUnderTest.validate(drop, new MSSQLDatabase(), new MockSqlGeneratorChain()).hasErrors())
nova chamada: assertFalse("Era esperado falso, mas " + result416 + " <generatorUnderTest.validate(drop, new MSSQLDatabase(), new MockSqlGeneratorChain()).hasErrors()> é verdadeiro ", generatorUnderTest.validate(drop, new MSSQLDatabase(), new MockSqlGeneratorChain()).hasErrors())
chamada antiga: assertEquals(String.format("INSERT INTO %s.%s (col3) VALUES (nextval('%s.%s'))", SCHEMA_NAME, TABLE_NAME, SCHEMA_NAME, SEQUENCE_NAME), theSql)
nova chamada: assertEquals("Era esperado valores iguais, mas " + result417 + " <String.format('INSERT INTO %s.%s (col3) VALUES (nextval('%s.%s'))', SCHEMA_NAME, TABLE_NAME, SCHEMA_NAME, SEQUENCE_NAME)> é diferente de " + " theSql", String.format("INSERT INTO %s.%s (col3) VALUES (nextval('%s.%s'))", SCHEMA_NAME, TABLE_NAME, SCHEMA_NAME, SEQUENCE_NAME), theSql)
chamada antiga: assertEquals(String.format("INSERT INTO %s.%s (col3) VALUES (nextval('%s.%s'))", SCHEMA_NAME, TABLE_NAME, SCHEMA_NAME, SEQUENCE_NAME), theSql)
nova chamada: assertEquals("Era esperado valores iguais, mas " + result418 + " <String.format('INSERT INTO %s.%s (col3) VALUES (nextval('%s.%s'))', SCHEMA_NAME, TABLE_NAME, SCHEMA_NAME, SEQUENCE_NAME)> é diferente de " + " theSql", String.format("INSERT INTO %s.%s (col3) VALUES (nextval('%s.%s'))", SCHEMA_NAME, TABLE_NAME, SCHEMA_NAME, SEQUENCE_NAME), theSql)
chamada antiga: assertTrue(theSql.contains("INSERT INTO mycatalog.mytable (pk_col1, col2) VALUES ('value1', 'value2');"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result419 + " <theSql.contains('INSERT INTO mycatalog.mytable (pk_col1, col2) VALUES ('value1', 'value2');')> é falso", theSql.contains("INSERT INTO mycatalog.mytable (pk_col1, col2) VALUES ('value1', 'value2');"))
chamada antiga: assertTrue(theSql.contains("UPDATE mycatalog.mytable"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result420 + " <theSql.contains('UPDATE mycatalog.mytable')> é falso", theSql.contains("UPDATE mycatalog.mytable"))
chamada antiga: assertEquals("DECLARE", sqlLines[lineToCheck].trim())
nova chamada: assertEquals("Era esperado valores iguais, mas  'DECLARE' é diferente de " + result421 + " <sqlLines[lineToCheck].trim()>", "DECLARE", sqlLines[lineToCheck].trim())
chamada antiga: assertEquals("v_reccount NUMBER := 0;", sqlLines[lineToCheck].trim())
nova chamada: assertEquals("Era esperado valores iguais, mas  'v_reccount NUMBER := 0;' é diferente de " + result422 + " <sqlLines[lineToCheck].trim()>", "v_reccount NUMBER := 0;", sqlLines[lineToCheck].trim())
chamada antiga: assertEquals("BEGIN", sqlLines[lineToCheck].trim())
nova chamada: assertEquals("Era esperado valores iguais, mas  'BEGIN' é diferente de " + result423 + " <sqlLines[lineToCheck].trim()>", "BEGIN", sqlLines[lineToCheck].trim())
chamada antiga: assertEquals("SELECT COUNT(*) INTO v_reccount FROM mycatalog.mytable WHERE pk_col1 = 'value1';", sqlLines[lineToCheck].trim())
nova chamada: assertEquals("Era esperado valores iguais, mas  'SELECT COUNT(*) INTO v_reccount FROM mycatalog.mytable WHERE pk_col1 = 'value1';' é diferente de " + result424 + " <sqlLines[lineToCheck].trim()>", "SELECT COUNT(*) INTO v_reccount FROM mycatalog.mytable WHERE pk_col1 = 'value1';", sqlLines[lineToCheck].trim())
chamada antiga: assertEquals("IF v_reccount = 0 THEN", sqlLines[lineToCheck].trim())
nova chamada: assertEquals("Era esperado valores iguais, mas  'IF v_reccount = 0 THEN' é diferente de " + result425 + " <sqlLines[lineToCheck].trim()>", "IF v_reccount = 0 THEN", sqlLines[lineToCheck].trim())
chamada antiga: assertEquals("INSERT INTO mycatalog.mytable (pk_col1, col2) VALUES ('value1', 'value2');", sqlLines[lineToCheck])
nova chamada: assertEquals("Era esperado valores iguais, mas  'INSERT INTO mycatalog.mytable (pk_col1, col2) VALUES ('value1', 'value2');' é diferente de " + " sqlLines[lineToCheck]", "INSERT INTO mycatalog.mytable (pk_col1, col2) VALUES ('value1', 'value2');", sqlLines[lineToCheck])
chamada antiga: assertEquals("ELSIF v_reccount = 1 THEN", sqlLines[lineToCheck].trim())
nova chamada: assertEquals("Era esperado valores iguais, mas  'ELSIF v_reccount = 1 THEN' é diferente de " + result426 + " <sqlLines[lineToCheck].trim()>", "ELSIF v_reccount = 1 THEN", sqlLines[lineToCheck].trim())
chamada antiga: assertEquals("UPDATE mycatalog.mytable SET col2 = 'value2' WHERE pk_col1 = 'value1';", sqlLines[lineToCheck].trim())
nova chamada: assertEquals("Era esperado valores iguais, mas  'UPDATE mycatalog.mytable SET col2 = 'value2' WHERE pk_col1 = 'value1';' é diferente de " + result427 + " <sqlLines[lineToCheck].trim()>", "UPDATE mycatalog.mytable SET col2 = 'value2' WHERE pk_col1 = 'value1';", sqlLines[lineToCheck].trim())
chamada antiga: assertEquals("END IF;", sqlLines[lineToCheck].trim())
nova chamada: assertEquals("Era esperado valores iguais, mas  'END IF;' é diferente de " + result428 + " <sqlLines[lineToCheck].trim()>", "END IF;", sqlLines[lineToCheck].trim())
chamada antiga: assertEquals("END;", sqlLines[lineToCheck].trim())
nova chamada: assertEquals("Era esperado valores iguais, mas  'END;' é diferente de " + result429 + " <sqlLines[lineToCheck].trim()>", "END;", sqlLines[lineToCheck].trim())
chamada antiga: assertEquals("UPDATE mycatalog.mytable SET col2 = 'value2' WHERE pk_col1 = 'value1'", sqlLines[lineToCheck].trim())
nova chamada: assertEquals("Era esperado valores iguais, mas  'UPDATE mycatalog.mytable SET col2 = 'value2' WHERE pk_col1 = 'value1'' é diferente de " + result430 + " <sqlLines[lineToCheck].trim()>", "UPDATE mycatalog.mytable SET col2 = 'value2' WHERE pk_col1 = 'value1'", sqlLines[lineToCheck].trim())
chamada antiga: assertEquals("INSERT INTO mycatalog.mytable (col3) VALUES (myschema.my_seq.nextval)", prepareInsertStatement(sequenceNext))
nova chamada: assertEquals("Era esperado valores iguais, mas  'INSERT INTO mycatalog.mytable (col3) VALUES (myschema.my_seq.nextval)' é diferente de " + result431 + " <prepareInsertStatement(sequenceNext)>", "INSERT INTO mycatalog.mytable (col3) VALUES (myschema.my_seq.nextval)", prepareInsertStatement(sequenceNext))
chamada antiga: assertEquals("INSERT INTO mycatalog.mytable (col3) VALUES (myschema.my_seq.nextval)", prepareInsertStatement(sequenceNext))
nova chamada: assertEquals("Era esperado valores iguais, mas  'INSERT INTO mycatalog.mytable (col3) VALUES (myschema.my_seq.nextval)' é diferente de " + result432 + " <prepareInsertStatement(sequenceNext)>", "INSERT INTO mycatalog.mytable (col3) VALUES (myschema.my_seq.nextval)", prepareInsertStatement(sequenceNext))
chamada antiga: assertEquals("UPDATE mycatalog.mytable SET col3 = myschema.my_seq.nextval", prepareUpdateStatement(sequenceNext))
nova chamada: assertEquals("Era esperado valores iguais, mas  'UPDATE mycatalog.mytable SET col3 = myschema.my_seq.nextval' é diferente de " + result433 + " <prepareUpdateStatement(sequenceNext)>", "UPDATE mycatalog.mytable SET col3 = myschema.my_seq.nextval", prepareUpdateStatement(sequenceNext))
chamada antiga: assertEquals("UPDATE mycatalog.mytable SET col3 = myschema.my_seq.nextval", prepareUpdateStatement(sequenceNext))
nova chamada: assertEquals("Era esperado valores iguais, mas  'UPDATE mycatalog.mytable SET col3 = myschema.my_seq.nextval' é diferente de " + result434 + " <prepareUpdateStatement(sequenceNext)>", "UPDATE mycatalog.mytable SET col3 = myschema.my_seq.nextval", prepareUpdateStatement(sequenceNext))
chamada antiga: assertEquals("DROP INDEX \"defaultSchema\".\"indexName\"", sqls[0].toSql())
nova chamada: assertEquals("Era esperado valores iguais, mas  'DROP INDEX \'defaultSchema\'.\'indexName\'' é diferente de " + result435 + " <sqls[0].toSql()>", "DROP INDEX \"defaultSchema\".\"indexName\"", sqls[0].toSql())
chamada antiga: assertEquals("DROP INDEX default_schema.index_name", sqls[0].toSql())
nova chamada: assertEquals("Era esperado valores iguais, mas  'DROP INDEX default_schema.index_name' é diferente de " + result436 + " <sqls[0].toSql()>", "DROP INDEX default_schema.index_name", sqls[0].toSql())
chamada antiga: assertEquals("DROP INDEX index_name", sqls[0].toSql())
nova chamada: assertEquals("Era esperado valores iguais, mas  'DROP INDEX index_name' é diferente de " + result437 + " <sqls[0].toSql()>", "DROP INDEX index_name", sqls[0].toSql())
chamada antiga: assertEquals("", result)
nova chamada: assertEquals("Era esperado valores iguais, mas  '' é diferente de " + " result", "", result)
chamada antiga: assertEquals(String.format("UPDATE %s.%s SET %s = '%s' WHERE %s = '%s';\n", CATALOG_NAME, TABLE_NAME, "col0", "value0", "pk1", "keyvalue1"), result)
nova chamada: assertEquals("Era esperado valores iguais, mas " + result438 + " <String.format('UPDATE %s.%s SET %s = '%s' WHERE %s = '%s';\n', CATALOG_NAME, TABLE_NAME, 'col0', 'value0', 'pk1', 'keyvalue1')> é diferente de " + " result", String.format("UPDATE %s.%s SET %s = '%s' WHERE %s = '%s';\n", CATALOG_NAME, TABLE_NAME, "col0", "value0", "pk1", "keyvalue1"), result)
chamada antiga: assertThat(results, is(arrayWithSize(1)))
nova chamada: assertThat("Era esperado que  results satisfizesse a condição " + result439 + " <is(arrayWithSize(1))>, mas não a satisfez", results, is(arrayWithSize(1)))
chamada antiga: assertEquals(String.format("INSERT INTO %s.%s (%s, %s) VALUES ('%s', '%s')\nON DUPLICATE KEY UPDATE col0 = 'value0'", CATALOG_NAME, TABLE_NAME, "pk1", "col0", "keyvalue1", "value0"), results[0].toSql())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result440 + " <String.format('INSERT INTO %s.%s (%s, %s) VALUES ('%s', '%s')\nON DUPLICATE KEY UPDATE col0 = 'value0'', CATALOG_NAME, TABLE_NAME, 'pk1', 'col0', 'keyvalue1', 'value0')> é diferente de " + result441 + " <results[0].toSql()>", String.format("INSERT INTO %s.%s (%s, %s) VALUES ('%s', '%s')\nON DUPLICATE KEY UPDATE col0 = 'value0'", CATALOG_NAME, TABLE_NAME, "pk1", "col0", "keyvalue1", "value0"), results[0].toSql())
chamada antiga: assertNotNull(recordCheck)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", recordCheck)
chamada antiga: assertEquals("MERGE INTO mycatalog:myschema.mytable AS dst", lines[lineNumber])
nova chamada: assertEquals("Era esperado valores iguais, mas  'MERGE INTO mycatalog:myschema.mytable AS dst' é diferente de " + " lines[lineNumber]", "MERGE INTO mycatalog:myschema.mytable AS dst", lines[lineNumber])
chamada antiga: assertEquals("USING (", lines[lineNumber])
nova chamada: assertEquals("Era esperado valores iguais, mas  'USING (' é diferente de " + " lines[lineNumber]", "USING (", lines[lineNumber])
chamada antiga: assertEquals("\tSELECT 1 AS pk_col1, 2 AS pk_col2, 'value2' AS col2, NULL::INTEGER AS col3", lines[lineNumber])
nova chamada: assertEquals("Era esperado valores iguais, mas  '\tSELECT 1 AS pk_col1, 2 AS pk_col2, 'value2' AS col2, NULL::INTEGER AS col3' é diferente de " + " lines[lineNumber]", "\tSELECT 1 AS pk_col1, 2 AS pk_col2, 'value2' AS col2, NULL::INTEGER AS col3", lines[lineNumber])
chamada antiga: assertEquals("\tFROM sysmaster:informix.sysdual", lines[lineNumber])
nova chamada: assertEquals("Era esperado valores iguais, mas  '\tFROM sysmaster:informix.sysdual' é diferente de " + " lines[lineNumber]", "\tFROM sysmaster:informix.sysdual", lines[lineNumber])
chamada antiga: assertEquals(") AS src", lines[lineNumber])
nova chamada: assertEquals("Era esperado valores iguais, mas  ') AS src' é diferente de " + " lines[lineNumber]", ") AS src", lines[lineNumber])
chamada antiga: assertEquals("ON dst.pk_col1 = src.pk_col1 AND dst.pk_col2 = src.pk_col2", lines[lineNumber])
nova chamada: assertEquals("Era esperado valores iguais, mas  'ON dst.pk_col1 = src.pk_col1 AND dst.pk_col2 = src.pk_col2' é diferente de " + " lines[lineNumber]", "ON dst.pk_col1 = src.pk_col1 AND dst.pk_col2 = src.pk_col2", lines[lineNumber])
chamada antiga: assertEquals("WHEN NOT MATCHED THEN", lines[lineNumber])
nova chamada: assertEquals("Era esperado valores iguais, mas  'WHEN NOT MATCHED THEN' é diferente de " + " lines[lineNumber]", "WHEN NOT MATCHED THEN", lines[lineNumber])
chamada antiga: assertNotNull(insertStatement)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", insertStatement)
chamada antiga: assertEquals("INSERT (dst.pk_col1, dst.pk_col2, dst.col2, dst.col3) VALUES (src.pk_col1, src.pk_col2, src.col2, src.col3)", lines[lineNumber])
nova chamada: assertEquals("Era esperado valores iguais, mas  'INSERT (dst.pk_col1, dst.pk_col2, dst.col2, dst.col3) VALUES (src.pk_col1, src.pk_col2, src.col2, src.col3)' é diferente de " + " lines[lineNumber]", "INSERT (dst.pk_col1, dst.pk_col2, dst.col2, dst.col3) VALUES (src.pk_col1, src.pk_col2, src.col2, src.col3)", lines[lineNumber])
chamada antiga: assertNotNull(elseStatement)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", elseStatement)
chamada antiga: assertEquals("", lines[lineNumber])
nova chamada: assertEquals("Era esperado valores iguais, mas  '' é diferente de " + " lines[lineNumber]", "", lines[lineNumber])
chamada antiga: assertNotNull(updateStatement)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", updateStatement)
chamada antiga: assertEquals("WHEN MATCHED THEN", lines[lineNumber])
nova chamada: assertEquals("Era esperado valores iguais, mas  'WHEN MATCHED THEN' é diferente de " + " lines[lineNumber]", "WHEN MATCHED THEN", lines[lineNumber])
chamada antiga: assertEquals("UPDATE SET dst.col2 = src.col2, dst.col3 = src.col3", lines[lineNumber])
nova chamada: assertEquals("Era esperado valores iguais, mas  'UPDATE SET dst.col2 = src.col2, dst.col3 = src.col3' é diferente de " + " lines[lineNumber]", "UPDATE SET dst.col2 = src.col2, dst.col3 = src.col3", lines[lineNumber])
chamada antiga: assertNotNull(updateStatement)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", updateStatement)
chamada antiga: assertEquals("", lines[lineNumber])
nova chamada: assertEquals("Era esperado valores iguais, mas  '' é diferente de " + " lines[lineNumber]", "", lines[lineNumber])
chamada antiga: assertNotNull(o)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", o)
chamada antiga: assertNotNull(methodName)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", methodName)
chamada antiga: assertEquals("DECLARE @reccount integer", lines[lineNumber])
nova chamada: assertEquals("Era esperado valores iguais, mas  'DECLARE @reccount integer' é diferente de " + " lines[lineNumber]", "DECLARE @reccount integer", lines[lineNumber])
chamada antiga: assertEquals("SELECT @reccount = count(*) FROM mycatalog.myschema.mytable WHERE " + where, lines[lineNumber])
nova chamada: assertEquals("Era esperado valores iguais, mas  'SELECT @reccount = count(*) FROM mycatalog.myschema.mytable WHERE ' + where é diferente de " + " lines[lineNumber]", "SELECT @reccount = count(*) FROM mycatalog.myschema.mytable WHERE " + where, lines[lineNumber])
chamada antiga: assertEquals("IF @reccount = 0", lines[lineNumber])
nova chamada: assertEquals("Era esperado valores iguais, mas  'IF @reccount = 0' é diferente de " + " lines[lineNumber]", "IF @reccount = 0", lines[lineNumber])
chamada antiga: assertEquals("BEGIN", lines[lineNumber])
nova chamada: assertEquals("Era esperado valores iguais, mas  'BEGIN' é diferente de " + " lines[lineNumber]", "BEGIN", lines[lineNumber])
chamada antiga: assertTrue(lines[lineNumber].startsWith("INSERT"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result442 + " <lines[lineNumber].startsWith('INSERT')> é falso", lines[lineNumber].startsWith("INSERT"))
chamada antiga: assertEquals("END", lines[lineNumber])
nova chamada: assertEquals("Era esperado valores iguais, mas  'END' é diferente de " + " lines[lineNumber]", "END", lines[lineNumber])
chamada antiga: assertEquals("ELSE", lines[lineNumber])
nova chamada: assertEquals("Era esperado valores iguais, mas  'ELSE' é diferente de " + " lines[lineNumber]", "ELSE", lines[lineNumber])
chamada antiga: assertEquals("BEGIN", lines[lineNumber])
nova chamada: assertEquals("Era esperado valores iguais, mas  'BEGIN' é diferente de " + " lines[lineNumber]", "BEGIN", lines[lineNumber])
chamada antiga: assertTrue(lines[lineNumber].startsWith("UPDATE"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result443 + " <lines[lineNumber].startsWith('UPDATE')> é falso", lines[lineNumber].startsWith("UPDATE"))
chamada antiga: assertEquals("END", lines[lineNumber])
nova chamada: assertEquals("Era esperado valores iguais, mas  'END' é diferente de " + " lines[lineNumber]", "END", lines[lineNumber])
chamada antiga: Assert.assertNotNull(o)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", o)
chamada antiga: Assert.assertNotNull(methodName)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", methodName)
chamada antiga: assertFalse(generatorUnderTest.validate(addPKColumn, new OracleDatabase(), new MockSqlGeneratorChain()).hasErrors())
nova chamada: assertFalse("Era esperado falso, mas " + result444 + " <generatorUnderTest.validate(addPKColumn, new OracleDatabase(), new MockSqlGeneratorChain()).hasErrors()> é verdadeiro ", generatorUnderTest.validate(addPKColumn, new OracleDatabase(), new MockSqlGeneratorChain()).hasErrors())
chamada antiga: assertFalse(generatorUnderTest.validate(addPKColumn, new H2Database(), new MockSqlGeneratorChain()).hasErrors())
nova chamada: assertFalse("Era esperado falso, mas " + result445 + " <generatorUnderTest.validate(addPKColumn, new H2Database(), new MockSqlGeneratorChain()).hasErrors()> é verdadeiro ", generatorUnderTest.validate(addPKColumn, new H2Database(), new MockSqlGeneratorChain()).hasErrors())
chamada antiga: assertTrue(generatorUnderTest.validate(addPKColumn, new DB2Database(), new MockSqlGeneratorChain()).getErrorMessages().contains("Cannot add a primary key column"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result446 + " <generatorUnderTest.validate(addPKColumn, new DB2Database(), new MockSqlGeneratorChain()).getErrorMessages().contains('Cannot add a primary key column')> é falso", generatorUnderTest.validate(addPKColumn, new DB2Database(), new MockSqlGeneratorChain()).getErrorMessages().contains("Cannot add a primary key column"))
chamada antiga: assertTrue(generatorUnderTest.validate(addPKColumn, new DerbyDatabase(), new MockSqlGeneratorChain()).getErrorMessages().contains("Cannot add a primary key column"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result447 + " <generatorUnderTest.validate(addPKColumn, new DerbyDatabase(), new MockSqlGeneratorChain()).getErrorMessages().contains('Cannot add a primary key column')> é falso", generatorUnderTest.validate(addPKColumn, new DerbyDatabase(), new MockSqlGeneratorChain()).getErrorMessages().contains("Cannot add a primary key column"))
chamada antiga: assertTrue(generatorUnderTest.validate(addPKColumn, new SQLiteDatabase(), new MockSqlGeneratorChain()).getErrorMessages().contains("Cannot add a primary key column"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result448 + " <generatorUnderTest.validate(addPKColumn, new SQLiteDatabase(), new MockSqlGeneratorChain()).getErrorMessages().contains('Cannot add a primary key column')> é falso", generatorUnderTest.validate(addPKColumn, new SQLiteDatabase(), new MockSqlGeneratorChain()).getErrorMessages().contains("Cannot add a primary key column"))
chamada antiga: assertTrue(generatorUnderTest.validate(new AddColumnStatement(null, null, null, null, null, null, new AutoIncrementConstraint()), new MySQLDatabase(), new MockSqlGeneratorChain()).getErrorMessages().contains("Cannot add a non-primary key identity column"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result449 + " <generatorUnderTest.validate(new AddColumnStatement(null, null, null, null, null, null, new AutoIncrementConstraint()), new MySQLDatabase(), new MockSqlGeneratorChain()).getErrorMessages().contains('Cannot add a non-primary key identity column')> é falso", generatorUnderTest.validate(new AddColumnStatement(null, null, null, null, null, null, new AutoIncrementConstraint()), new MySQLDatabase(), new MockSqlGeneratorChain()).getErrorMessages().contains("Cannot add a non-primary key identity column"))
chamada antiga: assertTrue(generatorUnderTest.validate(new AddColumnStatement(null, null, null, null, null, null, new AutoIncrementConstraint()), new MySQLDatabase(), new MockSqlGeneratorChain()).getErrorMessages().contains("Cannot add a non-primary key identity column"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result450 + " <generatorUnderTest.validate(new AddColumnStatement(null, null, null, null, null, null, new AutoIncrementConstraint()), new MySQLDatabase(), new MockSqlGeneratorChain()).getErrorMessages().contains('Cannot add a non-primary key identity column')> é falso", generatorUnderTest.validate(new AddColumnStatement(null, null, null, null, null, null, new AutoIncrementConstraint()), new MySQLDatabase(), new MockSqlGeneratorChain()).getErrorMessages().contains("Cannot add a non-primary key identity column"))
chamada antiga: assertTrue(generatorUnderTest.validate(new AddColumnStatement(new AddColumnStatement(null, null, TABLE_NAME, COLUMN_NAME, COLUMN_TYPE, null), new AddColumnStatement(null, null, "other_table", "other_column", COLUMN_TYPE, null)), new MySQLDatabase(), new MockSqlGeneratorChain()).getErrorMessages().contains("All columns must be targeted at the same table"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result451 + " <generatorUnderTest.validate(new AddColumnStatement(new AddColumnStatement(null, null, TABLE_NAME, COLUMN_NAME, COLUMN_TYPE, null), new AddColumnStatement(null, null, 'other_table', 'other_column', COLUMN_TYPE, null)), new MySQLDatabase(), new MockSqlGeneratorChain()).getErrorMessages().contains('All columns must be targeted at the same table')> é falso", generatorUnderTest.validate(new AddColumnStatement(new AddColumnStatement(null, null, TABLE_NAME, COLUMN_NAME, COLUMN_TYPE, null), new AddColumnStatement(null, null, "other_table", "other_column", COLUMN_TYPE, null)), new MySQLDatabase(), new MockSqlGeneratorChain()).getErrorMessages().contains("All columns must be targeted at the same table"))
chamada antiga: assertFalse(generatorUnderTest.validate(createSampleSqlStatement(), h2DatabaseV1, new MockSqlGeneratorChain()).hasErrors())
nova chamada: assertFalse("Era esperado falso, mas " + result452 + " <generatorUnderTest.validate(createSampleSqlStatement(), h2DatabaseV1, new MockSqlGeneratorChain()).hasErrors()> é verdadeiro ", generatorUnderTest.validate(createSampleSqlStatement(), h2DatabaseV1, new MockSqlGeneratorChain()).hasErrors())
chamada antiga: assertFalse(generatorUnderTest.validate(statement, new MySQLDatabase(), new MockSqlGeneratorChain()).hasErrors())
nova chamada: assertFalse("Era esperado falso, mas " + result453 + " <generatorUnderTest.validate(statement, new MySQLDatabase(), new MockSqlGeneratorChain()).hasErrors()> é verdadeiro ", generatorUnderTest.validate(statement, new MySQLDatabase(), new MockSqlGeneratorChain()).hasErrors())
chamada antiga: assertFalse(generatorUnderTest.validate(columns, new MySQLDatabase(), new MockSqlGeneratorChain()).hasErrors())
nova chamada: assertFalse("Era esperado falso, mas " + result454 + " <generatorUnderTest.validate(columns, new MySQLDatabase(), new MockSqlGeneratorChain()).hasErrors()> é verdadeiro ", generatorUnderTest.validate(columns, new MySQLDatabase(), new MockSqlGeneratorChain()).hasErrors())
chamada antiga: assertEquals(1, sql.length)
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + " sql.length", 1, sql.length)
chamada antiga: assertEquals("ALTER TABLE " + TABLE_NAME + " ADD column1 INT NOT NULL, ADD column2 INT NOT NULL", sql[0].toSql())
nova chamada: assertEquals("Era esperado valores iguais, mas  'ALTER TABLE ' + TABLE_NAME + ' ADD column1 INT NOT NULL, ADD column2 INT NOT NULL' é diferente de " + result455 + " <sql[0].toSql()>", "ALTER TABLE " + TABLE_NAME + " ADD column1 INT NOT NULL, ADD column2 INT NOT NULL", sql[0].toSql())
chamada antiga: assertTrue(actualNames.containsAll(expectedNames))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result456 + " <actualNames.containsAll(expectedNames)> é falso", actualNames.containsAll(expectedNames))
chamada antiga: assertTrue(expectedNames.containsAll(actualNames))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result457 + " <expectedNames.containsAll(actualNames)> é falso", expectedNames.containsAll(actualNames))
chamada antiga: assertFalse(generatorUnderTest.validate(columns, new MariaDBDatabase(), new MockSqlGeneratorChain()).hasErrors())
nova chamada: assertFalse("Era esperado falso, mas " + result458 + " <generatorUnderTest.validate(columns, new MariaDBDatabase(), new MockSqlGeneratorChain()).hasErrors()> é verdadeiro ", generatorUnderTest.validate(columns, new MariaDBDatabase(), new MockSqlGeneratorChain()).hasErrors())
chamada antiga: assertEquals(1, sql.length)
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + " sql.length", 1, sql.length)
chamada antiga: assertEquals("ALTER TABLE " + TABLE_NAME + " ADD `PERIOD` INT NOT NULL", sql[0].toSql())
nova chamada: assertEquals("Era esperado valores iguais, mas  'ALTER TABLE ' + TABLE_NAME + ' ADD `PERIOD` INT NOT NULL' é diferente de " + result459 + " <sql[0].toSql()>", "ALTER TABLE " + TABLE_NAME + " ADD `PERIOD` INT NOT NULL", sql[0].toSql())
chamada antiga: assertFalse(generatorUnderTest.validate(columns, h2Database, new MockSqlGeneratorChain()).hasErrors())
nova chamada: assertFalse("Era esperado falso, mas " + result460 + " <generatorUnderTest.validate(columns, h2Database, new MockSqlGeneratorChain()).hasErrors()> é verdadeiro ", generatorUnderTest.validate(columns, h2Database, new MockSqlGeneratorChain()).hasErrors())
chamada antiga: assertTrue(generatorUnderTest.validate(columns, new H2Database() {

    @Override
    public int getDatabaseMajorVersion() throws DatabaseException {
        return 1;
    }
}, new MockSqlGeneratorChain()).hasErrors())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result461 + " <generatorUnderTest.validate(columns, new H2Database() {\n\n    @Override\n    public int getDatabaseMajorVersion() throws DatabaseException {\n        return 1;\n    }\n}, new MockSqlGeneratorChain()).hasErrors()> é falso", generatorUnderTest.validate(columns, new H2Database() {

    @Override
    public int getDatabaseMajorVersion() throws DatabaseException {
        return 1;
    }
}, new MockSqlGeneratorChain()).hasErrors())
chamada antiga: assertEquals(1, sql.length)
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + " sql.length", 1, sql.length)
chamada antiga: assertEquals("ALTER TABLE table_name ADD ID BIGINT NOT NULL PRIMARY KEY", sql[0].toSql())
nova chamada: assertEquals("Era esperado valores iguais, mas  'ALTER TABLE table_name ADD ID BIGINT NOT NULL PRIMARY KEY' é diferente de " + result462 + " <sql[0].toSql()>", "ALTER TABLE table_name ADD ID BIGINT NOT NULL PRIMARY KEY", sql[0].toSql())
chamada antiga: assertEquals(5, sql.length)
nova chamada: assertEquals("Era esperado valores iguais, mas  5 é diferente de " + " sql.length", 5, sql.length)
chamada antiga: assertEquals("ALTER TABLE schema_name.table_name ADD column1 BIGINT NULL, ADD column2 BIT(1) NULL", sql[0].toSql())
nova chamada: assertEquals("Era esperado valores iguais, mas  'ALTER TABLE schema_name.table_name ADD column1 BIGINT NULL, ADD column2 BIT(1) NULL' é diferente de " + result463 + " <sql[0].toSql()>", "ALTER TABLE schema_name.table_name ADD column1 BIGINT NULL, ADD column2 BIT(1) NULL", sql[0].toSql())
chamada antiga: assertEquals("UPDATE schema_name.table_name SET column1 = 0", sql[1].toSql())
nova chamada: assertEquals("Era esperado valores iguais, mas  'UPDATE schema_name.table_name SET column1 = 0' é diferente de " + result464 + " <sql[1].toSql()>", "UPDATE schema_name.table_name SET column1 = 0", sql[1].toSql())
chamada antiga: assertEquals("UPDATE schema_name.table_name SET column2 = 1", sql[2].toSql())
nova chamada: assertEquals("Era esperado valores iguais, mas  'UPDATE schema_name.table_name SET column2 = 1' é diferente de " + result465 + " <sql[2].toSql()>", "UPDATE schema_name.table_name SET column2 = 1", sql[2].toSql())
chamada antiga: assertEquals("ALTER TABLE schema_name.table_name MODIFY column1 BIGINT NOT NULL", sql[3].toSql())
nova chamada: assertEquals("Era esperado valores iguais, mas  'ALTER TABLE schema_name.table_name MODIFY column1 BIGINT NOT NULL' é diferente de " + result466 + " <sql[3].toSql()>", "ALTER TABLE schema_name.table_name MODIFY column1 BIGINT NOT NULL", sql[3].toSql())
chamada antiga: assertEquals("ALTER TABLE schema_name.table_name MODIFY column2 BIT(1) NOT NULL", sql[4].toSql())
nova chamada: assertEquals("Era esperado valores iguais, mas  'ALTER TABLE schema_name.table_name MODIFY column2 BIT(1) NOT NULL' é diferente de " + result467 + " <sql[4].toSql()>", "ALTER TABLE schema_name.table_name MODIFY column2 BIT(1) NOT NULL", sql[4].toSql())
chamada antiga: assertEquals("UPDATE DATABASECHANGELOG " + "SET MD5SUM = '7:e27bf9c0c2313160ef960a15d44ced47' " + "WHERE ID = N'SYPA: AUTO_START tüüp INT -> TEXT, vaartus 0 00 17 * * ?' " + "AND AUTHOR = 'martin' " + "AND FILENAME = 'db/changelog.xml'", sqls[0].toSql())
nova chamada: assertEquals("Era esperado valores iguais, mas  'UPDATE DATABASECHANGELOG ' + 'SET MD5SUM = '7:e27bf9c0c2313160ef960a15d44ced47' ' + 'WHERE ID = N'SYPA: AUTO_START tüüp INT - TEXT, vaartus 0 00 17 * * ?' ' + 'AND AUTHOR = 'martin' ' + 'AND FILENAME = 'db/changelog.xml'' é diferente de " + result468 + " <sqls[0].toSql()>", "UPDATE DATABASECHANGELOG " + "SET MD5SUM = '7:e27bf9c0c2313160ef960a15d44ced47' " + "WHERE ID = N'SYPA: AUTO_START tüüp INT -> TEXT, vaartus 0 00 17 * * ?' " + "AND AUTHOR = 'martin' " + "AND FILENAME = 'db/changelog.xml'", sqls[0].toSql())
chamada antiga: assertEquals("UPDATE DATABASECHANGELOG " + "SET MD5SUM = '7:e27bf9c0c2313160ef960a15d44ced47' " + "WHERE ID = N'SYPA: AUTO_START tüüp INT -> TEXT, vaartus 0 00 17 * * ?' " + "AND AUTHOR = 'martin' " + "AND FILENAME = 'db/changelog.xml'", sqls[0].toSql())
nova chamada: assertEquals("Era esperado valores iguais, mas  'UPDATE DATABASECHANGELOG ' + 'SET MD5SUM = '7:e27bf9c0c2313160ef960a15d44ced47' ' + 'WHERE ID = N'SYPA: AUTO_START tüüp INT - TEXT, vaartus 0 00 17 * * ?' ' + 'AND AUTHOR = 'martin' ' + 'AND FILENAME = 'db/changelog.xml'' é diferente de " + result469 + " <sqls[0].toSql()>", "UPDATE DATABASECHANGELOG " + "SET MD5SUM = '7:e27bf9c0c2313160ef960a15d44ced47' " + "WHERE ID = N'SYPA: AUTO_START tüüp INT -> TEXT, vaartus 0 00 17 * * ?' " + "AND AUTHOR = 'martin' " + "AND FILENAME = 'db/changelog.xml'", sqls[0].toSql())
chamada antiga: assertEquals(1, sql.length)
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + " sql.length", 1, sql.length)
chamada antiga: assertEquals("UPDATE changelog " + "SET TAG = 'v1.0' " + "FROM DATABASECHANGELOG AS changelog " + "INNER JOIN (" + "SELECT TOP (1) ID, AUTHOR, FILENAME " + "FROM DATABASECHANGELOG " + "ORDER BY DATEEXECUTED DESC, ORDEREXECUTED DESC" + ") AS latest " + "ON latest.ID = changelog.ID " + "AND latest.AUTHOR = changelog.AUTHOR " + "AND latest.FILENAME = changelog.FILENAME", sql[0].toSql())
nova chamada: assertEquals("Era esperado valores iguais, mas  'UPDATE changelog ' + 'SET TAG = 'v1.0' ' + 'FROM DATABASECHANGELOG AS changelog ' + 'INNER JOIN (' + 'SELECT TOP (1) ID, AUTHOR, FILENAME ' + 'FROM DATABASECHANGELOG ' + 'ORDER BY DATEEXECUTED DESC, ORDEREXECUTED DESC' + ') AS latest ' + 'ON latest.ID = changelog.ID ' + 'AND latest.AUTHOR = changelog.AUTHOR ' + 'AND latest.FILENAME = changelog.FILENAME' é diferente de " + result470 + " <sql[0].toSql()>", "UPDATE changelog " + "SET TAG = 'v1.0' " + "FROM DATABASECHANGELOG AS changelog " + "INNER JOIN (" + "SELECT TOP (1) ID, AUTHOR, FILENAME " + "FROM DATABASECHANGELOG " + "ORDER BY DATEEXECUTED DESC, ORDEREXECUTED DESC" + ") AS latest " + "ON latest.ID = changelog.ID " + "AND latest.AUTHOR = changelog.AUTHOR " + "AND latest.FILENAME = changelog.FILENAME", sql[0].toSql())
chamada antiga: assertEquals(1, sql.length)
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + " sql.length", 1, sql.length)
chamada antiga: assertEquals("UPDATE DATABASECHANGELOG " + "SET TAG = 'v1.0' " + "WHERE DATEEXECUTED = (" + "SELECT MAX(DATEEXECUTED) " + "FROM DATABASECHANGELOG" + ")", sql[0].toSql())
nova chamada: assertEquals("Era esperado valores iguais, mas  'UPDATE DATABASECHANGELOG ' + 'SET TAG = 'v1.0' ' + 'WHERE DATEEXECUTED = (' + 'SELECT MAX(DATEEXECUTED) ' + 'FROM DATABASECHANGELOG' + ')' é diferente de " + result471 + " <sql[0].toSql()>", "UPDATE DATABASECHANGELOG " + "SET TAG = 'v1.0' " + "WHERE DATEEXECUTED = (" + "SELECT MAX(DATEEXECUTED) " + "FROM DATABASECHANGELOG" + ")", sql[0].toSql())
chamada antiga: assertEquals(1, sql.length)
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + " sql.length", 1, sql.length)
chamada antiga: assertEquals("ALTER TABLE catalog1:schema2.table3 MODIFY (column4 TYPE5 DEFAULT 'default-value-6')", sql[0].toSql())
nova chamada: assertEquals("Era esperado valores iguais, mas  'ALTER TABLE catalog1:schema2.table3 MODIFY (column4 TYPE5 DEFAULT 'default-value-6')' é diferente de " + result472 + " <sql[0].toSql()>", "ALTER TABLE catalog1:schema2.table3 MODIFY (column4 TYPE5 DEFAULT 'default-value-6')", sql[0].toSql())
chamada antiga: assertEquals("ALTER TABLE tbl1 MODIFY (id INT8 DEFAULT 1)", sqls[0].toSql())
nova chamada: assertEquals("Era esperado valores iguais, mas  'ALTER TABLE tbl1 MODIFY (id INT8 DEFAULT 1)' é diferente de " + result473 + " <sqls[0].toSql()>", "ALTER TABLE tbl1 MODIFY (id INT8 DEFAULT 1)", sqls[0].toSql())
chamada antiga: assertEquals(1, sqls.length)
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + " sqls.length", 1, sqls.length)
chamada antiga: assertEquals("ALTER TABLE schema_name.table_name MODIFY column_name NOT NULL", sql.toSql())
nova chamada: assertEquals("Era esperado valores iguais, mas  'ALTER TABLE schema_name.table_name MODIFY column_name NOT NULL' é diferente de " + result474 + " <sql.toSql()>", "ALTER TABLE schema_name.table_name MODIFY column_name NOT NULL", sql.toSql())
chamada antiga: assertEquals(1, sqls.length)
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + " sqls.length", 1, sqls.length)
chamada antiga: assertEquals("ALTER TABLE schema_name.table_name MODIFY column_name NOT NULL ENABLE NOVALIDATE", sql.toSql())
nova chamada: assertEquals("Era esperado valores iguais, mas  'ALTER TABLE schema_name.table_name MODIFY column_name NOT NULL ENABLE NOVALIDATE' é diferente de " + result475 + " <sql.toSql()>", "ALTER TABLE schema_name.table_name MODIFY column_name NOT NULL ENABLE NOVALIDATE", sql.toSql())
chamada antiga: assertEquals(1, sqls.length)
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + " sqls.length", 1, sqls.length)
chamada antiga: assertEquals("ALTER TABLE schema_name.table_name MODIFY column_name CONSTRAINT constraint_name NOT NULL", sql.toSql())
nova chamada: assertEquals("Era esperado valores iguais, mas  'ALTER TABLE schema_name.table_name MODIFY column_name CONSTRAINT constraint_name NOT NULL' é diferente de " + result476 + " <sql.toSql()>", "ALTER TABLE schema_name.table_name MODIFY column_name CONSTRAINT constraint_name NOT NULL", sql.toSql())
chamada antiga: assertEquals(1, sql.length)
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + " sql.length", 1, sql.length)
chamada antiga: assertEquals("select text from syscomments where id = object_id('dbo.view_name') order by colid", sql[0].toSql())
nova chamada: assertEquals("Era esperado valores iguais, mas  'select text from syscomments where id = object_id('dbo.view_name') order by colid' é diferente de " + result477 + " <sql[0].toSql()>", "select text from syscomments where id = object_id('dbo.view_name') order by colid", sql[0].toSql())
chamada antiga: assertEquals(1, sql.length)
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + " sql.length", 1, sql.length)
chamada antiga: assertEquals("select text from syscomments where id = object_id('OWNER.view_name') order by colid", sql[0].toSql())
nova chamada: assertEquals("Era esperado valores iguais, mas  'select text from syscomments where id = object_id('OWNER.view_name') order by colid' é diferente de " + result478 + " <sql[0].toSql()>", "select text from syscomments where id = object_id('OWNER.view_name') order by colid", sql[0].toSql())
chamada antiga: assertEquals("DELETE FROM DATABASECHANGELOG " + "WHERE ID = '1' " + "AND AUTHOR = 'a' " + "AND FILENAME = 'server_principals/BUILTIN$Administrators.xml'", sqls[0].toSql())
nova chamada: assertEquals("Era esperado valores iguais, mas  'DELETE FROM DATABASECHANGELOG ' + 'WHERE ID = '1' ' + 'AND AUTHOR = 'a' ' + 'AND FILENAME = 'server_principals/BUILTIN$Administrators.xml'' é diferente de " + result479 + " <sqls[0].toSql()>", "DELETE FROM DATABASECHANGELOG " + "WHERE ID = '1' " + "AND AUTHOR = 'a' " + "AND FILENAME = 'server_principals/BUILTIN$Administrators.xml'", sqls[0].toSql())
chamada antiga: assertNotNull(SqlGeneratorFactory.getInstance())
nova chamada: assertNotNull("Era esperado não nulo, mas " + result480 + " <SqlGeneratorFactory.getInstance()> é nulo", SqlGeneratorFactory.getInstance())
chamada antiga: assertSame(SqlGeneratorFactory.getInstance(), SqlGeneratorFactory.getInstance())
nova chamada: assertSame("Era esperado objetos iguais, mas " + result481 + " <SqlGeneratorFactory.getInstance()> é diferente de " + result482 + " <SqlGeneratorFactory.getInstance()>", SqlGeneratorFactory.getInstance(), SqlGeneratorFactory.getInstance())
chamada antiga: assertEquals(0, factory.getGenerators().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + result483 + " <factory.getGenerators().size()>", 0, factory.getGenerators().size())
chamada antiga: assertEquals(1, factory.getGenerators().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result484 + " <factory.getGenerators().size()>", 1, factory.getGenerators().size())
chamada antiga: assertEquals(0, factory.getGenerators().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + result485 + " <factory.getGenerators().size()>", 0, factory.getGenerators().size())
chamada antiga: assertEquals(3, factory.getGenerators().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  3 é diferente de " + result486 + " <factory.getGenerators().size()>", 3, factory.getGenerators().size())
chamada antiga: assertEquals(2, factory.getGenerators().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + result487 + " <factory.getGenerators().size()>", 2, factory.getGenerators().size())
chamada antiga: assertEquals(0, factory.getGenerators().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + result488 + " <factory.getGenerators().size()>", 0, factory.getGenerators().size())
chamada antiga: assertEquals(3, factory.getGenerators().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  3 é diferente de " + result489 + " <factory.getGenerators().size()>", 3, factory.getGenerators().size())
chamada antiga: assertEquals(2, factory.getGenerators().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + result490 + " <factory.getGenerators().size()>", 2, factory.getGenerators().size())
chamada antiga: assertEquals(0, factory.getGenerators().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + result491 + " <factory.getGenerators().size()>", 0, factory.getGenerators().size())
chamada antiga: assertEquals(3, factory.getGenerators().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  3 é diferente de " + result492 + " <factory.getGenerators().size()>", 3, factory.getGenerators().size())
chamada antiga: assertEquals(3, factory.getGenerators().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  3 é diferente de " + result493 + " <factory.getGenerators().size()>", 3, factory.getGenerators().size())
chamada antiga: assertEquals(0, factory.getGenerators(statement, database).size())
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + result494 + " <factory.getGenerators(statement, database).size()>", 0, factory.getGenerators(statement, database).size())
chamada antiga: assertEquals(2, factory.getGenerators(statement, database).size())
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + result495 + " <factory.getGenerators(statement, database).size()>", 2, factory.getGenerators(statement, database).size())
chamada antiga: assertEquals(1, factory.getGenerators(statement, database).size())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result496 + " <factory.getGenerators(statement, database).size()>", 1, factory.getGenerators(statement, database).size())
chamada antiga: assertEquals(0, factory.getGenerators(statement, database).size())
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + result497 + " <factory.getGenerators(statement, database).size()>", 0, factory.getGenerators(statement, database).size())
chamada antiga: assertEquals(2, factory.getGenerators(statement, database).size())
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + result498 + " <factory.getGenerators(statement, database).size()>", 2, factory.getGenerators(statement, database).size())
chamada antiga: assertEquals(2, factory.getGenerators(statement, database).size())
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + result499 + " <factory.getGenerators(statement, database).size()>", 2, factory.getGenerators(statement, database).size())
chamada antiga: assertNotSame(factory, SqlGeneratorFactory.getInstance())
nova chamada: assertNotSame("Era esperado objetos diferentes, mas  factory é igual a " + result500 + " <SqlGeneratorFactory.getInstance()>", factory, SqlGeneratorFactory.getInstance())
chamada antiga: assertTrue(generators.size() > 10)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", generators.size() > 10)
chamada antiga: assertNotNull(allGenerators)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", allGenerators)
chamada antiga: assertEquals(1, allGenerators.size())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result501 + " <allGenerators.size()>", 1, allGenerators.size())
chamada antiga: assertNotNull(Scope.getCurrentScope().getSingleton(ExecutorService.class).getExecutor("jdbc", oracle1))
nova chamada: assertNotNull("Era esperado não nulo, mas " + result502 + " <Scope.getCurrentScope().getSingleton(ExecutorService.class).getExecutor('jdbc', oracle1)> é nulo", Scope.getCurrentScope().getSingleton(ExecutorService.class).getExecutor("jdbc", oracle1))
chamada antiga: assertNotNull(Scope.getCurrentScope().getSingleton(ExecutorService.class).getExecutor("jdbc", oracle2))
nova chamada: assertNotNull("Era esperado não nulo, mas " + result503 + " <Scope.getCurrentScope().getSingleton(ExecutorService.class).getExecutor('jdbc', oracle2)> é nulo", Scope.getCurrentScope().getSingleton(ExecutorService.class).getExecutor("jdbc", oracle2))
chamada antiga: assertNotNull(Scope.getCurrentScope().getSingleton(ExecutorService.class).getExecutor("jdbc", mysql))
nova chamada: assertNotNull("Era esperado não nulo, mas " + result504 + " <Scope.getCurrentScope().getSingleton(ExecutorService.class).getExecutor('jdbc', mysql)> é nulo", Scope.getCurrentScope().getSingleton(ExecutorService.class).getExecutor("jdbc", mysql))
chamada antiga: assertSame(Scope.getCurrentScope().getSingleton(ExecutorService.class).getExecutor("jdbc", oracle1), Scope.getCurrentScope().getSingleton(ExecutorService.class).getExecutor("jdbc", oracle1))
nova chamada: assertSame("Era esperado objetos iguais, mas " + result505 + " <Scope.getCurrentScope().getSingleton(ExecutorService.class).getExecutor('jdbc', oracle1)> é diferente de " + result506 + " <Scope.getCurrentScope().getSingleton(ExecutorService.class).getExecutor('jdbc', oracle1)>", Scope.getCurrentScope().getSingleton(ExecutorService.class).getExecutor("jdbc", oracle1), Scope.getCurrentScope().getSingleton(ExecutorService.class).getExecutor("jdbc", oracle1))
chamada antiga: assertSame(Scope.getCurrentScope().getSingleton(ExecutorService.class).getExecutor("jdbc", oracle2), Scope.getCurrentScope().getSingleton(ExecutorService.class).getExecutor("jdbc", oracle2))
nova chamada: assertSame("Era esperado objetos iguais, mas " + result507 + " <Scope.getCurrentScope().getSingleton(ExecutorService.class).getExecutor('jdbc', oracle2)> é diferente de " + result508 + " <Scope.getCurrentScope().getSingleton(ExecutorService.class).getExecutor('jdbc', oracle2)>", Scope.getCurrentScope().getSingleton(ExecutorService.class).getExecutor("jdbc", oracle2), Scope.getCurrentScope().getSingleton(ExecutorService.class).getExecutor("jdbc", oracle2))
chamada antiga: assertSame(Scope.getCurrentScope().getSingleton(ExecutorService.class).getExecutor("jdbc", mysql), Scope.getCurrentScope().getSingleton(ExecutorService.class).getExecutor("jdbc", mysql))
nova chamada: assertSame("Era esperado objetos iguais, mas " + result509 + " <Scope.getCurrentScope().getSingleton(ExecutorService.class).getExecutor('jdbc', mysql)> é diferente de " + result510 + " <Scope.getCurrentScope().getSingleton(ExecutorService.class).getExecutor('jdbc', mysql)>", Scope.getCurrentScope().getSingleton(ExecutorService.class).getExecutor("jdbc", mysql), Scope.getCurrentScope().getSingleton(ExecutorService.class).getExecutor("jdbc", mysql))
chamada antiga: assertNotSame(Scope.getCurrentScope().getSingleton(ExecutorService.class).getExecutor("jdbc", oracle1), Scope.getCurrentScope().getSingleton(ExecutorService.class).getExecutor("jdbc", oracle2))
nova chamada: assertNotSame("Era esperado objetos diferentes, mas " + result511 + " <Scope.getCurrentScope().getSingleton(ExecutorService.class).getExecutor('jdbc', oracle1)> é igual a " + result512 + " <Scope.getCurrentScope().getSingleton(ExecutorService.class).getExecutor('jdbc', oracle2)>", Scope.getCurrentScope().getSingleton(ExecutorService.class).getExecutor("jdbc", oracle1), Scope.getCurrentScope().getSingleton(ExecutorService.class).getExecutor("jdbc", oracle2))
chamada antiga: assertNotSame(Scope.getCurrentScope().getSingleton(ExecutorService.class).getExecutor("jdbc", oracle1), Scope.getCurrentScope().getSingleton(ExecutorService.class).getExecutor("jdbc", mysql))
nova chamada: assertNotSame("Era esperado objetos diferentes, mas " + result513 + " <Scope.getCurrentScope().getSingleton(ExecutorService.class).getExecutor('jdbc', oracle1)> é igual a " + result514 + " <Scope.getCurrentScope().getSingleton(ExecutorService.class).getExecutor('jdbc', mysql)>", Scope.getCurrentScope().getSingleton(ExecutorService.class).getExecutor("jdbc", oracle1), Scope.getCurrentScope().getSingleton(ExecutorService.class).getExecutor("jdbc", mysql))
chamada antiga: assertEquals("", new JdbcExecutor().getErrorCode(new RuntimeException()))
nova chamada: assertEquals("Era esperado valores iguais, mas  '' é diferente de " + result515 + " <new JdbcExecutor().getErrorCode(new RuntimeException())>", "", new JdbcExecutor().getErrorCode(new RuntimeException()))
chamada antiga: assertEquals("(123) ", new JdbcExecutor().getErrorCode(new SQLException("reason", "sqlState", 123)))
nova chamada: assertEquals("Era esperado valores iguais, mas  '(123) ' é diferente de " + result516 + " <new JdbcExecutor().getErrorCode(new SQLException('reason', 'sqlState', 123))>", "(123) ", new JdbcExecutor().getErrorCode(new SQLException("reason", "sqlState", 123)))
chamada antiga: assertEquals("(0) ", new JdbcExecutor().getErrorCode(new SQLException()))
nova chamada: assertEquals("Era esperado valores iguais, mas  '(0) ' é diferente de " + result517 + " <new JdbcExecutor().getErrorCode(new SQLException())>", "(0) ", new JdbcExecutor().getErrorCode(new SQLException()))
chamada antiga: assertNotNull(generator)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", generator)
chamada antiga: assertTrue(generator instanceof StandardDiffGenerator)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", generator instanceof StandardDiffGenerator)
chamada antiga: assertEquals(primaryKey, statement.getPrimaryKey())
nova chamada: assertEquals("Era esperado valores iguais, mas  primaryKey é diferente de " + result518 + " <statement.getPrimaryKey()>", primaryKey, statement.getPrimaryKey())
chamada antiga: assertEquals(Boolean.FALSE, statement.getOnlyUpdate())
nova chamada: assertEquals("Era esperado valores iguais, mas  Boolean.FALSE é diferente de " + result519 + " <statement.getOnlyUpdate()>", Boolean.FALSE, statement.getOnlyUpdate())
chamada antiga: assertEquals(Boolean.TRUE, statement.getOnlyUpdate())
nova chamada: assertEquals("Era esperado valores iguais, mas  Boolean.TRUE é diferente de " + result520 + " <statement.getOnlyUpdate()>", Boolean.TRUE, statement.getOnlyUpdate())
chamada antiga: assertEquals(Boolean.FALSE, statement.getOnlyUpdate())
nova chamada: assertEquals("Era esperado valores iguais, mas  Boolean.FALSE é diferente de " + result521 + " <statement.getOnlyUpdate()>", Boolean.FALSE, statement.getOnlyUpdate())
chamada antiga: assertFalse(new UpdateExecutablePreparedStatement(database, "catalogName", "schemaName", "tableName", new ArrayList<ColumnConfig>(), changeSet, resourceAccessor).continueOnError())
nova chamada: assertFalse("Era esperado falso, mas " + result522 + " <new UpdateExecutablePreparedStatement(database, 'catalogName', 'schemaName', 'tableName', new ArrayList<ColumnConfig>(), changeSet, resourceAccessor).continueOnError()> é verdadeiro ", new UpdateExecutablePreparedStatement(database, "catalogName", "schemaName", "tableName", new ArrayList<ColumnConfig>(), changeSet, resourceAccessor).continueOnError())
chamada antiga: assertNotEquals(java.sql.Types.NULL, stmt.getParamTypes().get(1).intValue())
nova chamada: assertNotEquals("Era esperado valores diferentes, mas  java.sql.Types.NULL é igual a " + result523 + " <stmt.getParamTypes().get(1).intValue()>", java.sql.Types.NULL, stmt.getParamTypes().get(1).intValue())
chamada antiga: assertEquals(java.sql.Types.DATE, stmt.getParamTypes().get(1).intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  java.sql.Types.DATE é diferente de " + result524 + " <stmt.getParamTypes().get(1).intValue()>", java.sql.Types.DATE, stmt.getParamTypes().get(1).intValue())
chamada antiga: assertNotEquals(java.sql.Types.NULL, stmt.getParamTypes().get(1).intValue())
nova chamada: assertNotEquals("Era esperado valores diferentes, mas  java.sql.Types.NULL é igual a " + result525 + " <stmt.getParamTypes().get(1).intValue()>", java.sql.Types.NULL, stmt.getParamTypes().get(1).intValue())
chamada antiga: assertEquals(java.sql.Types.TIMESTAMP, stmt.getParamTypes().get(1).intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  java.sql.Types.TIMESTAMP é diferente de " + result526 + " <stmt.getParamTypes().get(1).intValue()>", java.sql.Types.TIMESTAMP, stmt.getParamTypes().get(1).intValue())
chamada antiga: assertNotEquals(java.sql.Types.NULL, stmt.getParamTypes().get(1).intValue())
nova chamada: assertNotEquals("Era esperado valores diferentes, mas  java.sql.Types.NULL é igual a " + result527 + " <stmt.getParamTypes().get(1).intValue()>", java.sql.Types.NULL, stmt.getParamTypes().get(1).intValue())
chamada antiga: assertEquals(java.sql.Types.TIMESTAMP, stmt.getParamTypes().get(1).intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  java.sql.Types.TIMESTAMP é diferente de " + result528 + " <stmt.getParamTypes().get(1).intValue()>", java.sql.Types.TIMESTAMP, stmt.getParamTypes().get(1).intValue())
chamada antiga: assertEquals(java.sql.Types.NULL, stmt.getParamTypes().get(1).intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  java.sql.Types.NULL é diferente de " + result529 + " <stmt.getParamTypes().get(1).intValue()>", java.sql.Types.NULL, stmt.getParamTypes().get(1).intValue())
chamada antiga: assertFalse(new InsertExecutablePreparedStatement(database, "catalogName", "schemaName", "tableName", new ArrayList<ColumnConfig>(), changeSet, resourceAccessor).continueOnError())
nova chamada: assertFalse("Era esperado falso, mas " + result530 + " <new InsertExecutablePreparedStatement(database, 'catalogName', 'schemaName', 'tableName', new ArrayList<ColumnConfig>(), changeSet, resourceAccessor).continueOnError()> é verdadeiro ", new InsertExecutablePreparedStatement(database, "catalogName", "schemaName", "tableName", new ArrayList<ColumnConfig>(), changeSet, resourceAccessor).continueOnError())
chamada antiga: assertEquals("COL_NAME", constraint.getColumnName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'COL_NAME' é diferente de " + result531 + " <constraint.getColumnName()>", "COL_NAME", constraint.getColumnName())
chamada antiga: assertNotNull(ChangeLogParserFactory.getInstance())
nova chamada: assertNotNull("Era esperado não nulo, mas " + result532 + " <ChangeLogParserFactory.getInstance()> é nulo", ChangeLogParserFactory.getInstance())
chamada antiga: assertSame(ChangeLogParserFactory.getInstance(), ChangeLogParserFactory.getInstance())
nova chamada: assertSame("Era esperado objetos iguais, mas " + result533 + " <ChangeLogParserFactory.getInstance()> é diferente de " + result534 + " <ChangeLogParserFactory.getInstance()>", ChangeLogParserFactory.getInstance(), ChangeLogParserFactory.getInstance())
chamada antiga: assertEquals(5, ChangeLogParserFactory.getInstance().getParsers().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  5 é diferente de " + result535 + " <ChangeLogParserFactory.getInstance().getParsers().size()>", 5, ChangeLogParserFactory.getInstance().getParsers().size())
chamada antiga: assertEquals(6, ChangeLogParserFactory.getInstance().getParsers().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  6 é diferente de " + result536 + " <ChangeLogParserFactory.getInstance().getParsers().size()>", 6, ChangeLogParserFactory.getInstance().getParsers().size())
chamada antiga: assertEquals(5, factory.getParsers().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  5 é diferente de " + result537 + " <factory.getParsers().size()>", 5, factory.getParsers().size())
chamada antiga: assertEquals(7, factory.getParsers().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  7 é diferente de " + result538 + " <factory.getParsers().size()>", 7, factory.getParsers().size())
chamada antiga: assertEquals(6, factory.getParsers().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  6 é diferente de " + result539 + " <factory.getParsers().size()>", 6, factory.getParsers().size())
chamada antiga: assertNotSame(instance1, ChangeLogParserFactory.getInstance())
nova chamada: assertNotSame("Era esperado objetos diferentes, mas  instance1 é igual a " + result540 + " <ChangeLogParserFactory.getInstance()>", instance1, ChangeLogParserFactory.getInstance())
chamada antiga: assertEquals(5, generators.size())
nova chamada: assertEquals("Era esperado valores iguais, mas  5 é diferente de " + result541 + " <generators.size()>", 5, generators.size())
chamada antiga: assertNotNull(parser)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", parser)
chamada antiga: assertTrue(parser instanceof XMLChangeLogSAXParser)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", parser instanceof XMLChangeLogSAXParser)
chamada antiga: assertNotNull(defaultParser)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", defaultParser)
chamada antiga: assertTrue(defaultParser instanceof XMLChangeLogSAXParser)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", defaultParser instanceof XMLChangeLogSAXParser)
chamada antiga: assertNotNull(PreconditionFactory.getInstance())
nova chamada: assertNotNull("Era esperado não nulo, mas " + result542 + " <PreconditionFactory.getInstance()> é nulo", PreconditionFactory.getInstance())
chamada antiga: assertSame(PreconditionFactory.getInstance(), PreconditionFactory.getInstance())
nova chamada: assertSame("Era esperado objetos iguais, mas " + result543 + " <PreconditionFactory.getInstance()> é diferente de " + result544 + " <PreconditionFactory.getInstance()>", PreconditionFactory.getInstance(), PreconditionFactory.getInstance())
chamada antiga: assertEquals(0, PreconditionFactory.getInstance().getPreconditions().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + result545 + " <PreconditionFactory.getInstance().getPreconditions().size()>", 0, PreconditionFactory.getInstance().getPreconditions().size())
chamada antiga: assertEquals(1, PreconditionFactory.getInstance().getPreconditions().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result546 + " <PreconditionFactory.getInstance().getPreconditions().size()>", 1, PreconditionFactory.getInstance().getPreconditions().size())
chamada antiga: assertEquals(0, factory.getPreconditions().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + result547 + " <factory.getPreconditions().size()>", 0, factory.getPreconditions().size())
chamada antiga: assertEquals(2, factory.getPreconditions().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + result548 + " <factory.getPreconditions().size()>", 2, factory.getPreconditions().size())
chamada antiga: assertEquals(1, factory.getPreconditions().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result549 + " <factory.getPreconditions().size()>", 1, factory.getPreconditions().size())
chamada antiga: assertNotSame(instance1, PreconditionFactory.getInstance())
nova chamada: assertNotSame("Era esperado objetos diferentes, mas  instance1 é igual a " + result550 + " <PreconditionFactory.getInstance()>", instance1, PreconditionFactory.getInstance())
chamada antiga: assertTrue(generators.size() > 5)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", generators.size() > 5)
chamada antiga: assertNotNull(precondtion)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", precondtion)
chamada antiga: assertTrue(precondtion instanceof AndPrecondition)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", precondtion instanceof AndPrecondition)
chamada antiga: assertTrue(ranChangeSet.isSameAs(incomingChangeSet))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result551 + " <ranChangeSet.isSameAs(incomingChangeSet)> é falso", ranChangeSet.isSameAs(incomingChangeSet))
chamada antiga: assertEquals(7, testChangeLogVisitor.visitedChangeSets.size())
nova chamada: assertEquals("Era esperado valores iguais, mas  7 é diferente de " + result552 + " <testChangeLogVisitor.visitedChangeSets.size()>", 7, testChangeLogVisitor.visitedChangeSets.size())
chamada antiga: assertEquals(7, testChangeLogVisitor.visitedChangeSets.size())
nova chamada: assertEquals("Era esperado valores iguais, mas  7 é diferente de " + result553 + " <testChangeLogVisitor.visitedChangeSets.size()>", 7, testChangeLogVisitor.visitedChangeSets.size())
chamada antiga: assertEquals(7, testChangeLogVisitor.visitedChangeSets.size())
nova chamada: assertEquals("Era esperado valores iguais, mas  7 é diferente de " + result554 + " <testChangeLogVisitor.visitedChangeSets.size()>", 7, testChangeLogVisitor.visitedChangeSets.size())
chamada antiga: assertEquals(4, testChangeLogVisitor.visitedChangeSets.size())
nova chamada: assertEquals("Era esperado valores iguais, mas  4 é diferente de " + result555 + " <testChangeLogVisitor.visitedChangeSets.size()>", 4, testChangeLogVisitor.visitedChangeSets.size())
chamada antiga: assertEquals(3, testChangeLogVisitor.visitedChangeSets.size())
nova chamada: assertEquals("Era esperado valores iguais, mas  3 é diferente de " + result556 + " <testChangeLogVisitor.visitedChangeSets.size()>", 3, testChangeLogVisitor.visitedChangeSets.size())
chamada antiga: assertEquals("1", testChangeLogVisitor.visitedChangeSets.get(0).getId())
nova chamada: assertEquals("Era esperado valores iguais, mas  '1' é diferente de " + result557 + " <testChangeLogVisitor.visitedChangeSets.get(0).getId()>", "1", testChangeLogVisitor.visitedChangeSets.get(0).getId())
chamada antiga: assertEquals("4", testChangeLogVisitor.visitedChangeSets.get(1).getId())
nova chamada: assertEquals("Era esperado valores iguais, mas  '4' é diferente de " + result558 + " <testChangeLogVisitor.visitedChangeSets.get(1).getId()>", "4", testChangeLogVisitor.visitedChangeSets.get(1).getId())
chamada antiga: assertEquals("5", testChangeLogVisitor.visitedChangeSets.get(2).getId())
nova chamada: assertEquals("Era esperado valores iguais, mas  '5' é diferente de " + result559 + " <testChangeLogVisitor.visitedChangeSets.get(2).getId()>", "5", testChangeLogVisitor.visitedChangeSets.get(2).getId())
chamada antiga: assertEquals(3, testChangeLogVisitor.visitedChangeSets.size())
nova chamada: assertEquals("Era esperado valores iguais, mas  3 é diferente de " + result560 + " <testChangeLogVisitor.visitedChangeSets.size()>", 3, testChangeLogVisitor.visitedChangeSets.size())
chamada antiga: assertEquals("5", testChangeLogVisitor.visitedChangeSets.get(0).getId())
nova chamada: assertEquals("Era esperado valores iguais, mas  '5' é diferente de " + result561 + " <testChangeLogVisitor.visitedChangeSets.get(0).getId()>", "5", testChangeLogVisitor.visitedChangeSets.get(0).getId())
chamada antiga: assertEquals("4", testChangeLogVisitor.visitedChangeSets.get(1).getId())
nova chamada: assertEquals("Era esperado valores iguais, mas  '4' é diferente de " + result562 + " <testChangeLogVisitor.visitedChangeSets.get(1).getId()>", "4", testChangeLogVisitor.visitedChangeSets.get(1).getId())
chamada antiga: assertEquals("1", testChangeLogVisitor.visitedChangeSets.get(2).getId())
nova chamada: assertEquals("Era esperado valores iguais, mas  '1' é diferente de " + result563 + " <testChangeLogVisitor.visitedChangeSets.get(2).getId()>", "1", testChangeLogVisitor.visitedChangeSets.get(2).getId())
chamada antiga: assertTrue(writer.toString().contains("CREATE TABLE PUBLIC.DATABASECHANGELOG"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result564 + " <writer.toString().contains('CREATE TABLE PUBLIC.DATABASECHANGELOG')> é falso", writer.toString().contains("CREATE TABLE PUBLIC.DATABASECHANGELOG"))
chamada antiga: assertTrue(writer.toString().contains("INSERT INTO PUBLIC.DATABASECHANGELOG"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result565 + " <writer.toString().contains('INSERT INTO PUBLIC.DATABASECHANGELOG')> é falso", writer.toString().contains("INSERT INTO PUBLIC.DATABASECHANGELOG"))
chamada antiga: assertTrue(new File(temporaryFolder.getRoot(), CHANGE_LOG_CSV).exists())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result566 + " <new File(temporaryFolder.getRoot(), CHANGE_LOG_CSV).exists()> é falso", new File(temporaryFolder.getRoot(), CHANGE_LOG_CSV).exists())
chamada antiga: assertFalse(new File(temporaryFolder.getRoot(), CHANGE_LOG_CSV + ".new").exists())
nova chamada: assertFalse("Era esperado falso, mas " + result567 + " <new File(temporaryFolder.getRoot(), CHANGE_LOG_CSV + '.new').exists()> é verdadeiro ", new File(temporaryFolder.getRoot(), CHANGE_LOG_CSV + ".new").exists())
chamada antiga: assertFalse(writer.toString().contains("CREATE TABLE PUBLIC.DATABASECHANGELOG"))
nova chamada: assertFalse("Era esperado falso, mas " + result568 + " <writer.toString().contains('CREATE TABLE PUBLIC.DATABASECHANGELOG')> é verdadeiro ", writer.toString().contains("CREATE TABLE PUBLIC.DATABASECHANGELOG"))
chamada antiga: assertTrue(writer.toString().contains("INSERT INTO PUBLIC.DATABASECHANGELOG"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result569 + " <writer.toString().contains('INSERT INTO PUBLIC.DATABASECHANGELOG')> é falso", writer.toString().contains("INSERT INTO PUBLIC.DATABASECHANGELOG"))
chamada antiga: assertFalse(filter.accepts(new ChangeSet("1", "testAuthor", false, false, "path/changelog", null, null, null)).isAccepted())
nova chamada: assertFalse("Era esperado falso, mas " + result570 + " <filter.accepts(new ChangeSet('1', 'testAuthor', false, false, 'path/changelog', null, null, null)).isAccepted()> é verdadeiro ", filter.accepts(new ChangeSet("1", "testAuthor", false, false, "path/changelog", null, null, null)).isAccepted())
chamada antiga: assertFalse(filter.accepts(new ChangeSet("2", "testAuthor", false, false, "path/changelog", null, null, null)).isAccepted())
nova chamada: assertFalse("Era esperado falso, mas " + result571 + " <filter.accepts(new ChangeSet('2', 'testAuthor', false, false, 'path/changelog', null, null, null)).isAccepted()> é verdadeiro ", filter.accepts(new ChangeSet("2", "testAuthor", false, false, "path/changelog", null, null, null)).isAccepted())
chamada antiga: assertTrue(filter.accepts(new ChangeSet("3", "testAuthor", false, false, "path/changelog", null, null, null)).isAccepted())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result572 + " <filter.accepts(new ChangeSet('3', 'testAuthor', false, false, 'path/changelog', null, null, null)).isAccepted()> é falso", filter.accepts(new ChangeSet("3", "testAuthor", false, false, "path/changelog", null, null, null)).isAccepted())
chamada antiga: assertTrue(filter.accepts(new ChangeSet(null, null, false, false, null, "test1", null, null)).isAccepted())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result573 + " <filter.accepts(new ChangeSet(null, null, false, false, null, 'test1', null, null)).isAccepted()> é falso", filter.accepts(new ChangeSet(null, null, false, false, null, "test1", null, null)).isAccepted())
chamada antiga: assertTrue(filter.accepts(new ChangeSet(null, null, false, false, null, "test2", null, null)).isAccepted())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result574 + " <filter.accepts(new ChangeSet(null, null, false, false, null, 'test2', null, null)).isAccepted()> é falso", filter.accepts(new ChangeSet(null, null, false, false, null, "test2", null, null)).isAccepted())
chamada antiga: assertTrue(filter.accepts(new ChangeSet(null, null, false, false, null, "test1, test2", null, null)).isAccepted())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result575 + " <filter.accepts(new ChangeSet(null, null, false, false, null, 'test1, test2', null, null)).isAccepted()> é falso", filter.accepts(new ChangeSet(null, null, false, false, null, "test1, test2", null, null)).isAccepted())
chamada antiga: assertTrue(filter.accepts(new ChangeSet(null, null, false, false, null, null, null, null)).isAccepted())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result576 + " <filter.accepts(new ChangeSet(null, null, false, false, null, null, null, null)).isAccepted()> é falso", filter.accepts(new ChangeSet(null, null, false, false, null, null, null, null)).isAccepted())
chamada antiga: assertTrue(filter.accepts(new ChangeSet(null, null, false, false, null, "test1", null, null)).isAccepted())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result577 + " <filter.accepts(new ChangeSet(null, null, false, false, null, 'test1', null, null)).isAccepted()> é falso", filter.accepts(new ChangeSet(null, null, false, false, null, "test1", null, null)).isAccepted())
chamada antiga: assertTrue(filter.accepts(new ChangeSet(null, null, false, false, null, "test2", null, null)).isAccepted())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result578 + " <filter.accepts(new ChangeSet(null, null, false, false, null, 'test2', null, null)).isAccepted()> é falso", filter.accepts(new ChangeSet(null, null, false, false, null, "test2", null, null)).isAccepted())
chamada antiga: assertTrue(filter.accepts(new ChangeSet(null, null, false, false, null, "test1, test2", null, null)).isAccepted())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result579 + " <filter.accepts(new ChangeSet(null, null, false, false, null, 'test1, test2', null, null)).isAccepted()> é falso", filter.accepts(new ChangeSet(null, null, false, false, null, "test1, test2", null, null)).isAccepted())
chamada antiga: assertTrue(filter.accepts(new ChangeSet(null, null, false, false, null, null, null, null)).isAccepted())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result580 + " <filter.accepts(new ChangeSet(null, null, false, false, null, null, null, null)).isAccepted()> é falso", filter.accepts(new ChangeSet(null, null, false, false, null, null, null, null)).isAccepted())
chamada antiga: assertTrue(filter.accepts(new ChangeSet(null, null, false, false, null, "test1", null, null)).isAccepted())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result581 + " <filter.accepts(new ChangeSet(null, null, false, false, null, 'test1', null, null)).isAccepted()> é falso", filter.accepts(new ChangeSet(null, null, false, false, null, "test1", null, null)).isAccepted())
chamada antiga: assertTrue(filter.accepts(new ChangeSet(null, null, false, false, null, "test1, test2", null, null)).isAccepted())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result582 + " <filter.accepts(new ChangeSet(null, null, false, false, null, 'test1, test2', null, null)).isAccepted()> é falso", filter.accepts(new ChangeSet(null, null, false, false, null, "test1, test2", null, null)).isAccepted())
chamada antiga: assertTrue(filter.accepts(new ChangeSet(null, null, false, false, null, null, null, null)).isAccepted())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result583 + " <filter.accepts(new ChangeSet(null, null, false, false, null, null, null, null)).isAccepted()> é falso", filter.accepts(new ChangeSet(null, null, false, false, null, null, null, null)).isAccepted())
chamada antiga: assertTrue(filter.accepts(new ChangeSet(null, null, false, false, null, "test1", null, null)).isAccepted())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result584 + " <filter.accepts(new ChangeSet(null, null, false, false, null, 'test1', null, null)).isAccepted()> é falso", filter.accepts(new ChangeSet(null, null, false, false, null, "test1", null, null)).isAccepted())
chamada antiga: assertTrue(filter.accepts(new ChangeSet(null, null, false, false, null, "test2", null, null)).isAccepted())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result585 + " <filter.accepts(new ChangeSet(null, null, false, false, null, 'test2', null, null)).isAccepted()> é falso", filter.accepts(new ChangeSet(null, null, false, false, null, "test2", null, null)).isAccepted())
chamada antiga: assertTrue(filter.accepts(new ChangeSet(null, null, false, false, null, "test1, test2", null, null)).isAccepted())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result586 + " <filter.accepts(new ChangeSet(null, null, false, false, null, 'test1, test2', null, null)).isAccepted()> é falso", filter.accepts(new ChangeSet(null, null, false, false, null, "test1, test2", null, null)).isAccepted())
chamada antiga: assertTrue(filter.accepts(new ChangeSet(null, null, false, false, null, null, null, null)).isAccepted())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result587 + " <filter.accepts(new ChangeSet(null, null, false, false, null, null, null, null)).isAccepted()> é falso", filter.accepts(new ChangeSet(null, null, false, false, null, null, null, null)).isAccepted())
chamada antiga: assertTrue(filter.accepts(new ChangeSet(null, null, false, false, null, "test1", null, null)).isAccepted())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result588 + " <filter.accepts(new ChangeSet(null, null, false, false, null, 'test1', null, null)).isAccepted()> é falso", filter.accepts(new ChangeSet(null, null, false, false, null, "test1", null, null)).isAccepted())
chamada antiga: assertTrue(filter.accepts(new ChangeSet(null, null, false, false, null, "test1, test2", null, null)).isAccepted())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result589 + " <filter.accepts(new ChangeSet(null, null, false, false, null, 'test1, test2', null, null)).isAccepted()> é falso", filter.accepts(new ChangeSet(null, null, false, false, null, "test1, test2", null, null)).isAccepted())
chamada antiga: assertFalse(filter.accepts(new ChangeSet(null, null, false, false, null, "test2", null, null)).isAccepted())
nova chamada: assertFalse("Era esperado falso, mas " + result590 + " <filter.accepts(new ChangeSet(null, null, false, false, null, 'test2', null, null)).isAccepted()> é verdadeiro ", filter.accepts(new ChangeSet(null, null, false, false, null, "test2", null, null)).isAccepted())
chamada antiga: assertTrue(filter.accepts(new ChangeSet(null, null, false, false, null, null, null, null)).isAccepted())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result591 + " <filter.accepts(new ChangeSet(null, null, false, false, null, null, null, null)).isAccepted()> é falso", filter.accepts(new ChangeSet(null, null, false, false, null, null, null, null)).isAccepted())
chamada antiga: assertTrue(filter.accepts(new ChangeSet(null, null, false, false, null, "test1", null, null)).isAccepted())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result592 + " <filter.accepts(new ChangeSet(null, null, false, false, null, 'test1', null, null)).isAccepted()> é falso", filter.accepts(new ChangeSet(null, null, false, false, null, "test1", null, null)).isAccepted())
chamada antiga: assertTrue(filter.accepts(new ChangeSet(null, null, false, false, null, "test2", null, null)).isAccepted())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result593 + " <filter.accepts(new ChangeSet(null, null, false, false, null, 'test2', null, null)).isAccepted()> é falso", filter.accepts(new ChangeSet(null, null, false, false, null, "test2", null, null)).isAccepted())
chamada antiga: assertTrue(filter.accepts(new ChangeSet(null, null, false, false, null, "test1, test2", null, null)).isAccepted())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result594 + " <filter.accepts(new ChangeSet(null, null, false, false, null, 'test1, test2', null, null)).isAccepted()> é falso", filter.accepts(new ChangeSet(null, null, false, false, null, "test1, test2", null, null)).isAccepted())
chamada antiga: assertFalse(filter.accepts(new ChangeSet(null, null, false, false, null, "test3", null, null)).isAccepted())
nova chamada: assertFalse("Era esperado falso, mas " + result595 + " <filter.accepts(new ChangeSet(null, null, false, false, null, 'test3', null, null)).isAccepted()> é verdadeiro ", filter.accepts(new ChangeSet(null, null, false, false, null, "test3", null, null)).isAccepted())
chamada antiga: assertTrue(filter.accepts(new ChangeSet(null, null, false, false, null, "test3, test1", null, null)).isAccepted())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result596 + " <filter.accepts(new ChangeSet(null, null, false, false, null, 'test3, test1', null, null)).isAccepted()> é falso", filter.accepts(new ChangeSet(null, null, false, false, null, "test3, test1", null, null)).isAccepted())
chamada antiga: assertTrue(filter.accepts(new ChangeSet(null, null, false, false, null, "test3, TEST1", null, null)).isAccepted())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result597 + " <filter.accepts(new ChangeSet(null, null, false, false, null, 'test3, TEST1', null, null)).isAccepted()> é falso", filter.accepts(new ChangeSet(null, null, false, false, null, "test3, TEST1", null, null)).isAccepted())
chamada antiga: assertTrue(filter.accepts(new ChangeSet(null, null, false, false, null, null, null, null)).isAccepted())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result598 + " <filter.accepts(new ChangeSet(null, null, false, false, null, null, null, null)).isAccepted()> é falso", filter.accepts(new ChangeSet(null, null, false, false, null, null, null, null)).isAccepted())
chamada antiga: assertTrue(filter.accepts(new ChangeSet(null, null, false, false, null, "test1", null, null)).isAccepted())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result599 + " <filter.accepts(new ChangeSet(null, null, false, false, null, 'test1', null, null)).isAccepted()> é falso", filter.accepts(new ChangeSet(null, null, false, false, null, "test1", null, null)).isAccepted())
chamada antiga: assertTrue(filter.accepts(new ChangeSet(null, null, false, false, null, "test2", null, null)).isAccepted())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result600 + " <filter.accepts(new ChangeSet(null, null, false, false, null, 'test2', null, null)).isAccepted()> é falso", filter.accepts(new ChangeSet(null, null, false, false, null, "test2", null, null)).isAccepted())
chamada antiga: assertTrue(filter.accepts(new ChangeSet(null, null, false, false, null, "test1, test2", null, null)).isAccepted())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result601 + " <filter.accepts(new ChangeSet(null, null, false, false, null, 'test1, test2', null, null)).isAccepted()> é falso", filter.accepts(new ChangeSet(null, null, false, false, null, "test1, test2", null, null)).isAccepted())
chamada antiga: assertFalse(filter.accepts(new ChangeSet(null, null, false, false, null, "test3", null, null)).isAccepted())
nova chamada: assertFalse("Era esperado falso, mas " + result602 + " <filter.accepts(new ChangeSet(null, null, false, false, null, 'test3', null, null)).isAccepted()> é verdadeiro ", filter.accepts(new ChangeSet(null, null, false, false, null, "test3", null, null)).isAccepted())
chamada antiga: assertTrue(filter.accepts(new ChangeSet(null, null, false, false, null, "test3, test1", null, null)).isAccepted())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result603 + " <filter.accepts(new ChangeSet(null, null, false, false, null, 'test3, test1', null, null)).isAccepted()> é falso", filter.accepts(new ChangeSet(null, null, false, false, null, "test3, test1", null, null)).isAccepted())
chamada antiga: assertTrue(filter.accepts(new ChangeSet(null, null, false, false, null, "test3, TEST1", null, null)).isAccepted())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result604 + " <filter.accepts(new ChangeSet(null, null, false, false, null, 'test3, TEST1', null, null)).isAccepted()> é falso", filter.accepts(new ChangeSet(null, null, false, false, null, "test3, TEST1", null, null)).isAccepted())
chamada antiga: assertTrue(filter.accepts(new ChangeSet(null, null, false, false, null, null, null, null)).isAccepted())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result605 + " <filter.accepts(new ChangeSet(null, null, false, false, null, null, null, null)).isAccepted()> é falso", filter.accepts(new ChangeSet(null, null, false, false, null, null, null, null)).isAccepted())
chamada antiga: assertTrue(filter.accepts(changeSet).isAccepted())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result606 + " <filter.accepts(changeSet).isAccepted()> é falso", filter.accepts(changeSet).isAccepted())
chamada antiga: assertEquals(1, changeSet.getSqlVisitors().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result607 + " <changeSet.getSqlVisitors().size()>", 1, changeSet.getSqlVisitors().size())
chamada antiga: assertTrue(filter.accepts(changeSet).isAccepted())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result608 + " <filter.accepts(changeSet).isAccepted()> é falso", filter.accepts(changeSet).isAccepted())
chamada antiga: assertEquals(1, changeSet.getSqlVisitors().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result609 + " <changeSet.getSqlVisitors().size()>", 1, changeSet.getSqlVisitors().size())
chamada antiga: assertTrue(filter.accepts(changeSet).isAccepted())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result610 + " <filter.accepts(changeSet).isAccepted()> é falso", filter.accepts(changeSet).isAccepted())
chamada antiga: assertEquals(1, changeSet.getSqlVisitors().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result611 + " <changeSet.getSqlVisitors().size()>", 1, changeSet.getSqlVisitors().size())
chamada antiga: assertTrue(filter.accepts(changeSet).isAccepted())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result612 + " <filter.accepts(changeSet).isAccepted()> é falso", filter.accepts(changeSet).isAccepted())
chamada antiga: assertEquals(1, changeSet.getSqlVisitors().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result613 + " <changeSet.getSqlVisitors().size()>", 1, changeSet.getSqlVisitors().size())
chamada antiga: assertFalse(filter.accepts(new ChangeSet("1", "testAuthor", false, false, "path/changelog", null, null, null)).isAccepted())
nova chamada: assertFalse("Era esperado falso, mas " + result614 + " <filter.accepts(new ChangeSet('1', 'testAuthor', false, false, 'path/changelog', null, null, null)).isAccepted()> é verdadeiro ", filter.accepts(new ChangeSet("1", "testAuthor", false, false, "path/changelog", null, null, null)).isAccepted())
chamada antiga: assertFalse(filter.accepts(new ChangeSet("1", "testAuthor", false, false, "path/changelog", null, null, null)).isAccepted())
nova chamada: assertFalse("Era esperado falso, mas " + result615 + " <filter.accepts(new ChangeSet('1', 'testAuthor', false, false, 'path/changelog', null, null, null)).isAccepted()> é verdadeiro ", filter.accepts(new ChangeSet("1", "testAuthor", false, false, "path/changelog", null, null, null)).isAccepted())
chamada antiga: assertFalse(filter.accepts(new ChangeSet("1", "testAuthor", false, false, "path/changelog", null, null, null)).isAccepted())
nova chamada: assertFalse("Era esperado falso, mas " + result616 + " <filter.accepts(new ChangeSet('1', 'testAuthor', false, false, 'path/changelog', null, null, null)).isAccepted()> é verdadeiro ", filter.accepts(new ChangeSet("1", "testAuthor", false, false, "path/changelog", null, null, null)).isAccepted())
chamada antiga: assertFalse(filter.accepts(new ChangeSet("2", "testAuthor", false, false, "path/changelog", null, null, null)).isAccepted())
nova chamada: assertFalse("Era esperado falso, mas " + result617 + " <filter.accepts(new ChangeSet('2', 'testAuthor', false, false, 'path/changelog', null, null, null)).isAccepted()> é verdadeiro ", filter.accepts(new ChangeSet("2", "testAuthor", false, false, "path/changelog", null, null, null)).isAccepted())
chamada antiga: assertTrue(filter.accepts(new ChangeSet("3", "testAuthor", false, false, "path/changelog", null, null, null)).isAccepted())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result618 + " <filter.accepts(new ChangeSet('3', 'testAuthor', false, false, 'path/changelog', null, null, null)).isAccepted()> é falso", filter.accepts(new ChangeSet("3", "testAuthor", false, false, "path/changelog", null, null, null)).isAccepted())
chamada antiga: assertFalse(filter.accepts(new ChangeSet("a1", "b1", false, false, "c1", null, null, null)).isAccepted())
nova chamada: assertFalse("Era esperado falso, mas " + result619 + " <filter.accepts(new ChangeSet('a1', 'b1', false, false, 'c1', null, null, null)).isAccepted()> é verdadeiro ", filter.accepts(new ChangeSet("a1", "b1", false, false, "c1", null, null, null)).isAccepted())
chamada antiga: assertFalse(filter.accepts(new ChangeSet("a2", "b2", false, false, "c2", null, null, null)).isAccepted())
nova chamada: assertFalse("Era esperado falso, mas " + result620 + " <filter.accepts(new ChangeSet('a2', 'b2', false, false, 'c2', null, null, null)).isAccepted()> é verdadeiro ", filter.accepts(new ChangeSet("a2", "b2", false, false, "c2", null, null, null)).isAccepted())
chamada antiga: assertTrue(filter.accepts(new ChangeSet("a1", "b1", false, false, "c1", null, null, null)).isAccepted())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result621 + " <filter.accepts(new ChangeSet('a1', 'b1', false, false, 'c1', null, null, null)).isAccepted()> é falso", filter.accepts(new ChangeSet("a1", "b1", false, false, "c1", null, null, null)).isAccepted())
chamada antiga: assertFalse(filter.accepts(new ChangeSet("a2", "b2", false, false, "c2", null, null, null)).isAccepted())
nova chamada: assertFalse("Era esperado falso, mas " + result622 + " <filter.accepts(new ChangeSet('a2', 'b2', false, false, 'c2', null, null, null)).isAccepted()> é verdadeiro ", filter.accepts(new ChangeSet("a2", "b2", false, false, "c2", null, null, null)).isAccepted())
chamada antiga: assertTrue(filter.accepts(new ChangeSet("a1", "b1", false, false, "c1", null, null, null)).isAccepted())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result623 + " <filter.accepts(new ChangeSet('a1', 'b1', false, false, 'c1', null, null, null)).isAccepted()> é falso", filter.accepts(new ChangeSet("a1", "b1", false, false, "c1", null, null, null)).isAccepted())
chamada antiga: assertTrue(filter.accepts(new ChangeSet("a2", "b2", false, false, "c2", null, null, null)).isAccepted())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result624 + " <filter.accepts(new ChangeSet('a2', 'b2', false, false, 'c2', null, null, null)).isAccepted()> é falso", filter.accepts(new ChangeSet("a2", "b2", false, false, "c2", null, null, null)).isAccepted())
chamada antiga: assertFalse(filter.accepts(new ChangeSet("a3", "b3", false, false, "c3", null, null, null)).isAccepted())
nova chamada: assertFalse("Era esperado falso, mas " + result625 + " <filter.accepts(new ChangeSet('a3', 'b3', false, false, 'c3', null, null, null)).isAccepted()> é verdadeiro ", filter.accepts(new ChangeSet("a3", "b3", false, false, "c3", null, null, null)).isAccepted())
chamada antiga: assertTrue(filter.accepts(new ChangeSet(null, null, false, false, null, null, "mysql", null)).isAccepted())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result626 + " <filter.accepts(new ChangeSet(null, null, false, false, null, null, 'mysql', null)).isAccepted()> é falso", filter.accepts(new ChangeSet(null, null, false, false, null, null, "mysql", null)).isAccepted())
chamada antiga: assertTrue(filter.accepts(new ChangeSet(null, null, false, false, null, null, "mysql, oracle", null)).isAccepted())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result627 + " <filter.accepts(new ChangeSet(null, null, false, false, null, null, 'mysql, oracle', null)).isAccepted()> é falso", filter.accepts(new ChangeSet(null, null, false, false, null, null, "mysql, oracle", null)).isAccepted())
chamada antiga: assertFalse(filter.accepts(new ChangeSet(null, null, false, false, null, null, "oracle", null)).isAccepted())
nova chamada: assertFalse("Era esperado falso, mas " + result628 + " <filter.accepts(new ChangeSet(null, null, false, false, null, null, 'oracle', null)).isAccepted()> é verdadeiro ", filter.accepts(new ChangeSet(null, null, false, false, null, null, "oracle", null)).isAccepted())
chamada antiga: assertTrue(filter.accepts(new ChangeSet(null, null, false, false, null, null, null, null)).isAccepted())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result629 + " <filter.accepts(new ChangeSet(null, null, false, false, null, null, null, null)).isAccepted()> é falso", filter.accepts(new ChangeSet(null, null, false, false, null, null, null, null)).isAccepted())
chamada antiga: assertFalse(filter.accepts(new ChangeSet(null, null, false, false, null, null, "h2,!mysql", null)).isAccepted())
nova chamada: assertFalse("Era esperado falso, mas " + result630 + " <filter.accepts(new ChangeSet(null, null, false, false, null, null, 'h2,!mysql', null)).isAccepted()> é verdadeiro ", filter.accepts(new ChangeSet(null, null, false, false, null, null, "h2,!mysql", null)).isAccepted())
chamada antiga: assertTrue(Files.isDirectory(columnsOutputDirPath))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result631 + " <Files.isDirectory(columnsOutputDirPath)> é falso", Files.isDirectory(columnsOutputDirPath))
chamada antiga: assertEquals(expectedNumberOfColumnHtmlFiles, Files.list(columnsOutputDirPath).count())
nova chamada: assertEquals("Era esperado valores iguais, mas  expectedNumberOfColumnHtmlFiles é diferente de " + result632 + " <Files.list(columnsOutputDirPath).count()>", expectedNumberOfColumnHtmlFiles, Files.list(columnsOutputDirPath).count())
chamada antiga: assertTrue(handler.validationPassed())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result633 + " <handler.validationPassed()> é falso", handler.validationPassed())
chamada antiga: assertEquals(1, handler.getSetupExceptions().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result634 + " <handler.getSetupExceptions().size()>", 1, handler.getSetupExceptions().size())
chamada antiga: assertEquals("Test message", handler.getSetupExceptions().get(0).getMessage())
nova chamada: assertEquals("Era esperado valores iguais, mas  'Test message' é diferente de " + result635 + " <handler.getSetupExceptions().get(0).getMessage()>", "Test message", handler.getSetupExceptions().get(0).getMessage())
chamada antiga: assertFalse(handler.validationPassed())
nova chamada: assertFalse("Era esperado falso, mas " + result636 + " <handler.validationPassed()> é verdadeiro ", handler.validationPassed())
chamada antiga: assertEquals(1, handler.getDuplicateChangeSets().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result637 + " <handler.getDuplicateChangeSets().size()>", 1, handler.getDuplicateChangeSets().size())
chamada antiga: assertFalse(handler.validationPassed())
nova chamada: assertFalse("Era esperado falso, mas " + result638 + " <handler.validationPassed()> é verdadeiro ", handler.validationPassed())
chamada antiga: assertEquals(1, handler.getValidationErrors().getErrorMessages().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result639 + " <handler.getValidationErrors().getErrorMessages().size()>", 1, handler.getValidationErrors().getErrorMessages().size())
chamada antiga: assertTrue(handler.getValidationErrors().getErrorMessages().get(0).startsWith("Test message"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result640 + " <handler.getValidationErrors().getErrorMessages().get(0).startsWith('Test message')> é falso", handler.getValidationErrors().getErrorMessages().get(0).startsWith("Test message"))
chamada antiga: assertFalse(handler.validationPassed())
nova chamada: assertFalse("Era esperado falso, mas " + result641 + " <handler.validationPassed()> é verdadeiro ", handler.validationPassed())
chamada antiga: assertEquals(1, handler.getValidationErrors().getErrorMessages().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result642 + " <handler.getValidationErrors().getErrorMessages().size()>", 1, handler.getValidationErrors().getErrorMessages().size())
chamada antiga: assertTrue(handler.getValidationErrors().getErrorMessages().get(0).contains("Author"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result643 + " <handler.getValidationErrors().getErrorMessages().get(0).contains('Author')> é falso", handler.getValidationErrors().getErrorMessages().get(0).contains("Author"))
chamada antiga: assertFalse(handler.validationPassed())
nova chamada: assertFalse("Era esperado falso, mas " + result644 + " <handler.validationPassed()> é verdadeiro ", handler.validationPassed())
chamada antiga: assertEquals(1, handler.getValidationErrors().getErrorMessages().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result645 + " <handler.getValidationErrors().getErrorMessages().size()>", 1, handler.getValidationErrors().getErrorMessages().size())
chamada antiga: assertTrue(handler.getValidationErrors().getErrorMessages().get(0).contains("Id"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result646 + " <handler.getValidationErrors().getErrorMessages().get(0).contains('Id')> é falso", handler.getValidationErrors().getErrorMessages().get(0).contains("Id"))
chamada antiga: assertFalse(handler.validationPassed())
nova chamada: assertFalse("Era esperado falso, mas " + result647 + " <handler.validationPassed()> é verdadeiro ", handler.validationPassed())
chamada antiga: assertEquals(1, handler.getValidationErrors().getErrorMessages().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result648 + " <handler.getValidationErrors().getErrorMessages().size()>", 1, handler.getValidationErrors().getErrorMessages().size())
chamada antiga: assertTrue(handler.getValidationErrors().getErrorMessages().get(0).contains("Author"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result649 + " <handler.getValidationErrors().getErrorMessages().get(0).contains('Author')> é falso", handler.getValidationErrors().getErrorMessages().get(0).contains("Author"))
chamada antiga: assertTrue(handler.getValidationErrors().getErrorMessages().get(0).contains("Id"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result650 + " <handler.getValidationErrors().getErrorMessages().get(0).contains('Id')> é falso", handler.getValidationErrors().getErrorMessages().get(0).contains("Id"))
chamada antiga: assertFalse(handler.validationPassed())
nova chamada: assertFalse("Era esperado falso, mas " + result651 + " <handler.validationPassed()> é verdadeiro ", handler.validationPassed())
chamada antiga: assertEquals(0, handler.getSetupExceptions().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + result652 + " <handler.getSetupExceptions().size()>", 0, handler.getSetupExceptions().size())
chamada antiga: assertTrue(handler.validationPassed())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result653 + " <handler.validationPassed()> é falso", handler.validationPassed())
chamada antiga: assertTrue(handler.validationPassed())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result654 + " <handler.validationPassed()> é falso", handler.validationPassed())
chamada antiga: assertTrue(handler.validationPassed())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result655 + " <handler.validationPassed()> é falso", handler.validationPassed())
chamada antiga: assertFalse(handler.validationPassed())
nova chamada: assertFalse("Era esperado falso, mas " + result656 + " <handler.validationPassed()> é verdadeiro ", handler.validationPassed())
chamada antiga: assertTrue(handler.validationPassed())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result657 + " <handler.validationPassed()> é falso", handler.validationPassed())
chamada antiga: assertTrue(handler.validationPassed())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result658 + " <handler.validationPassed()> é falso", handler.validationPassed())
chamada antiga: assertFalse(exceptionThrown)
nova chamada: assertFalse("Era esperado falso, mas o valor é verdadeiro", exceptionThrown)
chamada antiga: assertTrue(failedExceptionThrown)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", failedExceptionThrown)
chamada antiga: assertFalse(errorExceptionThrown)
nova chamada: assertFalse("Era esperado falso, mas o valor é verdadeiro", errorExceptionThrown)
chamada antiga: assertFalse(exceptionThrown)
nova chamada: assertFalse("Era esperado falso, mas o valor é verdadeiro", exceptionThrown)
chamada antiga: assertNotNull(ChangeLogParserFactory.getInstance())
nova chamada: assertNotNull("Era esperado não nulo, mas " + result659 + " <ChangeLogParserFactory.getInstance()> é nulo", ChangeLogParserFactory.getInstance())
chamada antiga: assertSame(ChangeLogParserFactory.getInstance(), ChangeLogParserFactory.getInstance())
nova chamada: assertSame("Era esperado objetos iguais, mas " + result660 + " <ChangeLogParserFactory.getInstance()> é diferente de " + result661 + " <ChangeLogParserFactory.getInstance()>", ChangeLogParserFactory.getInstance(), ChangeLogParserFactory.getInstance())
chamada antiga: assertEquals(1, ChangeLogParserFactory.getInstance().getParsers().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result662 + " <ChangeLogParserFactory.getInstance().getParsers().size()>", 1, ChangeLogParserFactory.getInstance().getParsers().size())
chamada antiga: assertEquals(3, factory.getParsers().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  3 é diferente de " + result663 + " <factory.getParsers().size()>", 3, factory.getParsers().size())
chamada antiga: assertEquals(2, factory.getParsers().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + result664 + " <factory.getParsers().size()>", 2, factory.getParsers().size())
chamada antiga: assertThat(factory.getParsers(), empty())
nova chamada: assertThat("Era esperado que " + result665 + " <factory.getParsers()> satisfizesse a condição " + result666 + " <empty()>, mas não a satisfez", factory.getParsers(), empty())
chamada antiga: assertNotNull(parser)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", parser)
chamada antiga: assertSame(xmlChangeLogParser, parser)
nova chamada: assertSame("Era esperado objetos iguais, mas  xmlChangeLogParser é diferente de " + " parser", xmlChangeLogParser, parser)
chamada antiga: assertNotNull(parser)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", parser)
chamada antiga: assertSame(xmlChangeLogParser, parser)
nova chamada: assertSame("Era esperado objetos iguais, mas  xmlChangeLogParser é diferente de " + " parser", xmlChangeLogParser, parser)
chamada antiga: assertEquals(higherPriorityParser, factory.getParser("banana", new JUnitResourceAccessor()))
nova chamada: assertEquals("Era esperado valores iguais, mas  higherPriorityParser é diferente de " + result667 + " <factory.getParser('banana', new JUnitResourceAccessor())>", higherPriorityParser, factory.getParser("banana", new JUnitResourceAccessor()))
chamada antiga: assertThat(factory.getParsers(), not(hasItem(mockChangeLogParser)))
nova chamada: assertThat("Era esperado que " + result668 + " <factory.getParsers()> satisfizesse a condição " + result669 + " <not(hasItem(mockChangeLogParser))>, mas não a satisfez", factory.getParsers(), not(hasItem(mockChangeLogParser)))
chamada antiga: assertNotSame(instance1, ChangeLogParserFactory.getInstance())
nova chamada: assertNotSame("Era esperado objetos diferentes, mas  instance1 é igual a " + result670 + " <ChangeLogParserFactory.getInstance()>", instance1, ChangeLogParserFactory.getInstance())
chamada antiga: assertThat(parsers, not(empty()))
nova chamada: assertThat("Era esperado que  parsers satisfizesse a condição " + result671 + " <not(empty())>, mas não a satisfez", parsers, not(empty()))
chamada antiga: assertNotNull(change)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", change)
chamada antiga: assertTrue(change instanceof CreateTableChange)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", change instanceof CreateTableChange)
chamada antiga: assertNotSame(change, Scope.getCurrentScope().getSingleton(ChangeFactory.class).create("createTable"))
nova chamada: assertNotSame("Era esperado objetos diferentes, mas  change é igual a " + result672 + " <Scope.getCurrentScope().getSingleton(ChangeFactory.class).create('createTable')>", change, Scope.getCurrentScope().getSingleton(ChangeFactory.class).create("createTable"))
chamada antiga: assertNull(change)
nova chamada: assertNull("Era esperado nulo, mas o valor obtido não é nulo", change)
chamada antiga: assertEquals(3, checkSum.getVersion())
nova chamada: assertEquals("Era esperado valores iguais, mas  3 é diferente de " + result673 + " <checkSum.getVersion()>", 3, checkSum.getVersion())
chamada antiga: assertEquals(checksumString, checkSum.toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  checksumString é diferente de " + result674 + " <checkSum.toString()>", checksumString, checkSum.toString())
chamada antiga: assertNull(CheckSum.parse(null))
nova chamada: assertNull("Era esperado nulo, mas " + result675 + " <CheckSum.parse(null)> não é nulo", CheckSum.parse(null))
chamada antiga: assertEquals(1, checkSum.getVersion())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result676 + " <checkSum.getVersion()>", 1, checkSum.getVersion())
chamada antiga: assertEquals("1:asdf", checkSum.toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  '1:asdf' é diferente de " + result677 + " <checkSum.toString()>", "1:asdf", checkSum.toString())
chamada antiga: assertEquals(8, CheckSum.getCurrentVersion())
nova chamada: assertEquals("Era esperado valores iguais, mas  8 é diferente de " + result678 + " <CheckSum.getCurrentVersion()>", 8, CheckSum.getCurrentVersion())
chamada antiga: assertEquals(CheckSum.getCurrentVersion(), checkSum.getVersion())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result679 + " <CheckSum.getCurrentVersion()> é diferente de " + result680 + " <checkSum.getVersion()>", CheckSum.getCurrentVersion(), checkSum.getVersion())
chamada antiga: assertNotEquals(checkSum.toString(), valueToHash)
nova chamada: assertNotEquals("Era esperado valores diferentes, mas " + result681 + " <checkSum.toString()> é igual a " + " valueToHash", checkSum.toString(), valueToHash)
chamada antiga: assertEquals(checkSum2, checkSum1)
nova chamada: assertEquals("Era esperado valores iguais, mas  checkSum2 é diferente de " + " checkSum1", checkSum2, checkSum1)
chamada antiga: assertEquals(CheckSum.getCurrentVersion(), checkSum.getVersion())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result682 + " <CheckSum.getCurrentVersion()> é diferente de " + result683 + " <checkSum.getVersion()>", CheckSum.getCurrentVersion(), checkSum.getVersion())
chamada antiga: assertNotEquals(checkSum.toString(), valueToHash)
nova chamada: assertNotEquals("Era esperado valores diferentes, mas " + result684 + " <checkSum.toString()> é igual a " + " valueToHash", checkSum.toString(), valueToHash)
chamada antiga: assertEquals(CheckSum.compute(valueToHash).toString(), checkSum.toString())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result685 + " <CheckSum.compute(valueToHash).toString()> é diferente de " + result686 + " <checkSum.toString()>", CheckSum.compute(valueToHash).toString(), checkSum.toString())
chamada antiga: assertTrue(CheckSum.parse("9:asdf").toString().startsWith("9:"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result687 + " <CheckSum.parse('9:asdf').toString().startsWith('9:')> é falso", CheckSum.parse("9:asdf").toString().startsWith("9:"))
chamada antiga: assertEquals(CheckSum.parse("9:asdf"), CheckSum.parse("9:asdf"))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result688 + " <CheckSum.parse('9:asdf')> é diferente de " + result689 + " <CheckSum.parse('9:asdf')>", CheckSum.parse("9:asdf"), CheckSum.parse("9:asdf"))
chamada antiga: assertNotEquals(CheckSum.parse("9:asdf"), CheckSum.parse("8:asdf"))
nova chamada: assertNotEquals("Era esperado valores diferentes, mas " + result690 + " <CheckSum.parse('9:asdf')> é igual a " + result691 + " <CheckSum.parse('8:asdf')>", CheckSum.parse("9:asdf"), CheckSum.parse("8:asdf"))
chamada antiga: assertNotEquals(CheckSum.parse("9:asdf"), CheckSum.parse("9:qwert"))
nova chamada: assertNotEquals("Era esperado valores diferentes, mas " + result692 + " <CheckSum.parse('9:asdf')> é igual a " + result693 + " <CheckSum.parse('9:qwert')>", CheckSum.parse("9:asdf"), CheckSum.parse("9:qwert"))
chamada antiga: assertNotEquals(12, CheckSum.parse("9:asdf"))
nova chamada: assertNotEquals("Era esperado valores diferentes, mas  12 é igual a " + result694 + " <CheckSum.parse('9:asdf')>", 12, CheckSum.parse("9:asdf"))
chamada antiga: assertNotEquals(null, CheckSum.parse("9:asdf"))
nova chamada: assertNotEquals("Era esperado valores diferentes, mas  null é igual a " + result695 + " <CheckSum.parse('9:asdf')>", null, CheckSum.parse("9:asdf"))
chamada antiga: assertEquals(checkSum, CheckSum.compute("a string\rwith\rlines").toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  checkSum é diferente de " + result696 + " <CheckSum.compute('a string\rwith\rlines').toString()>", checkSum, CheckSum.compute("a string\rwith\rlines").toString())
chamada antiga: assertEquals(checkSum, CheckSum.compute("a string\r\nwith\r\nlines").toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  checkSum é diferente de " + result697 + " <CheckSum.compute('a string\r\nwith\r\nlines').toString()>", checkSum, CheckSum.compute("a string\r\nwith\r\nlines").toString())
chamada antiga: assertEquals(checkSum, CheckSum.compute("a string\rwith\nlines").toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  checkSum é diferente de " + result698 + " <CheckSum.compute('a string\rwith\nlines').toString()>", checkSum, CheckSum.compute("a string\rwith\nlines").toString())
chamada antiga: assertNotEquals(checkSum, CheckSum.compute("a string\n\nwith\n\nlines").toString())
nova chamada: assertNotEquals("Era esperado valores diferentes, mas  checkSum é igual a " + result699 + " <CheckSum.compute('a string\n\nwith\n\nlines').toString()>", checkSum, CheckSum.compute("a string\n\nwith\n\nlines").toString())
chamada antiga: assertEquals(checkSum, CheckSum.compute(new ByteArrayInputStream("a string\nwith\nlines".getBytes()), true).toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  checkSum é diferente de " + result700 + " <CheckSum.compute(new ByteArrayInputStream('a string\nwith\nlines'.getBytes()), true).toString()>", checkSum, CheckSum.compute(new ByteArrayInputStream("a string\nwith\nlines".getBytes()), true).toString())
chamada antiga: assertEquals(checkSum, CheckSum.compute(new ByteArrayInputStream("a string\rwith\rlines".getBytes()), true).toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  checkSum é diferente de " + result701 + " <CheckSum.compute(new ByteArrayInputStream('a string\rwith\rlines'.getBytes()), true).toString()>", checkSum, CheckSum.compute(new ByteArrayInputStream("a string\rwith\rlines".getBytes()), true).toString())
chamada antiga: assertEquals(checkSum, CheckSum.compute(new ByteArrayInputStream("a string\r\nwith\r\nlines".getBytes()), true).toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  checkSum é diferente de " + result702 + " <CheckSum.compute(new ByteArrayInputStream('a string\r\nwith\r\nlines'.getBytes()), true).toString()>", checkSum, CheckSum.compute(new ByteArrayInputStream("a string\r\nwith\r\nlines".getBytes()), true).toString())
chamada antiga: assertEquals(checkSum, CheckSum.compute(new ByteArrayInputStream("a string\rwith\r\nlines".getBytes()), true).toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  checkSum é diferente de " + result703 + " <CheckSum.compute(new ByteArrayInputStream('a string\rwith\r\nlines'.getBytes()), true).toString()>", checkSum, CheckSum.compute(new ByteArrayInputStream("a string\rwith\r\nlines".getBytes()), true).toString())
chamada antiga: assertEquals(checkSum, CheckSum.compute("a string\r\rwith\r\rlines").toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  checkSum é diferente de " + result704 + " <CheckSum.compute('a string\r\rwith\r\rlines').toString()>", checkSum, CheckSum.compute("a string\r\rwith\r\rlines").toString())
chamada antiga: assertEquals(checkSum, CheckSum.compute("a string\r\n\r\nwith\r\n\r\nlines").toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  checkSum é diferente de " + result705 + " <CheckSum.compute('a string\r\n\r\nwith\r\n\r\nlines').toString()>", checkSum, CheckSum.compute("a string\r\n\r\nwith\r\n\r\nlines").toString())
chamada antiga: assertEquals(checkSum, CheckSum.compute(new ByteArrayInputStream("a string\n\nwith\n\nlines".getBytes()), true).toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  checkSum é diferente de " + result706 + " <CheckSum.compute(new ByteArrayInputStream('a string\n\nwith\n\nlines'.getBytes()), true).toString()>", checkSum, CheckSum.compute(new ByteArrayInputStream("a string\n\nwith\n\nlines".getBytes()), true).toString())
chamada antiga: assertEquals(checkSum, CheckSum.compute(new ByteArrayInputStream("a string\r\rwith\r\rlines".getBytes()), true).toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  checkSum é diferente de " + result707 + " <CheckSum.compute(new ByteArrayInputStream('a string\r\rwith\r\rlines'.getBytes()), true).toString()>", checkSum, CheckSum.compute(new ByteArrayInputStream("a string\r\rwith\r\rlines".getBytes()), true).toString())
chamada antiga: assertEquals(checkSum, CheckSum.compute(new ByteArrayInputStream("a string\r\n\r\nwith\r\n\r\nlines".getBytes()), true).toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  checkSum é diferente de " + result708 + " <CheckSum.compute(new ByteArrayInputStream('a string\r\n\r\nwith\r\n\r\nlines'.getBytes()), true).toString()>", checkSum, CheckSum.compute(new ByteArrayInputStream("a string\r\n\r\nwith\r\n\r\nlines".getBytes()), true).toString())
chamada antiga: Assert.assertEquals(1, statements.length)
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + " statements.length", 1, statements.length)
chamada antiga: Assert.assertNotNull(statements[0])
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", statements[0])
chamada antiga: Assert.assertEquals(3, ((InsertSetStatement) statements[0]).getStatementsArray().length)
nova chamada: assertEquals("Era esperado valores iguais, mas  3 é diferente de " + " ((InsertSetStatement) statements[0]).getStatementsArray().length", 3, ((InsertSetStatement) statements[0]).getStatementsArray().length)
chamada antiga: Assert.assertEquals("EnumValOne", ((InsertSetStatement) statements[0]).getStatementsArray()[0].getColumnValues().get("enum_col"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'EnumValOne' é diferente de " + result709 + " <((InsertSetStatement) statements[0]).getStatementsArray()[0].getColumnValues().get('enum_col')>", "EnumValOne", ((InsertSetStatement) statements[0]).getStatementsArray()[0].getColumnValues().get("enum_col"))
chamada antiga: Assert.assertEquals("EnumValTwo", ((InsertSetStatement) statements[0]).getStatementsArray()[1].getColumnValues().get("enum_col"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'EnumValTwo' é diferente de " + result710 + " <((InsertSetStatement) statements[0]).getStatementsArray()[1].getColumnValues().get('enum_col')>", "EnumValTwo", ((InsertSetStatement) statements[0]).getStatementsArray()[1].getColumnValues().get("enum_col"))
chamada antiga: Assert.assertEquals("NULL", ((InsertSetStatement) statements[0]).getStatementsArray()[2].getColumnValues().get("enum_col"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'NULL' é diferente de " + result711 + " <((InsertSetStatement) statements[0]).getStatementsArray()[2].getColumnValues().get('enum_col')>", "NULL", ((InsertSetStatement) statements[0]).getStatementsArray()[2].getColumnValues().get("enum_col"))
chamada antiga: Assert.assertEquals(1, statements.length)
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + " statements.length", 1, statements.length)
chamada antiga: Assert.assertTrue(statements[0] instanceof AddColumnStatement)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", statements[0] instanceof AddColumnStatement)
chamada antiga: Assert.assertTrue(stmt.isMultiple())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result712 + " <stmt.isMultiple()> é falso", stmt.isMultiple())
chamada antiga: Assert.assertEquals(2, stmt.getColumns().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + result713 + " <stmt.getColumns().size()>", 2, stmt.getColumns().size())
chamada antiga: Assert.assertEquals(2, statements.length)
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + " statements.length", 2, statements.length)
chamada antiga: Assert.assertTrue(statements[0] instanceof AddColumnStatement)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", statements[0] instanceof AddColumnStatement)
chamada antiga: Assert.assertTrue(stmt.isMultiple())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result714 + " <stmt.isMultiple()> é falso", stmt.isMultiple())
chamada antiga: Assert.assertEquals(2, stmt.getColumns().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + result715 + " <stmt.getColumns().size()>", 2, stmt.getColumns().size())
chamada antiga: Assert.assertTrue(statements[1] instanceof ReorganizeTableStatement)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", statements[1] instanceof ReorganizeTableStatement)
chamada antiga: Assert.assertEquals(1, statements.length)
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + " statements.length", 1, statements.length)
chamada antiga: Assert.assertTrue(statements[0] instanceof AddColumnStatement)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", statements[0] instanceof AddColumnStatement)
chamada antiga: Assert.assertEquals(myUniqueConstraintName, stmt.getUniqueStatementName())
nova chamada: assertEquals("Era esperado valores iguais, mas  myUniqueConstraintName é diferente de " + result716 + " <stmt.getUniqueStatementName()>", myUniqueConstraintName, stmt.getUniqueStatementName())
chamada antiga: Assert.assertEquals(1, statements.length)
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + " statements.length", 1, statements.length)
chamada antiga: Assert.assertTrue(statements[0] instanceof AddColumnStatement)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", statements[0] instanceof AddColumnStatement)
chamada antiga: Assert.assertNull(stmt.getUniqueStatementName())
nova chamada: assertNull("Era esperado nulo, mas " + result717 + " <stmt.getUniqueStatementName()> não é nulo", stmt.getUniqueStatementName())
chamada antiga: Assert.assertEquals(1, statements.length)
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + " statements.length", 1, statements.length)
chamada antiga: Assert.assertTrue(statements[0] instanceof DropColumnStatement)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", statements[0] instanceof DropColumnStatement)
chamada antiga: Assert.assertEquals("catalog1", dropStmt.getCatalogName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'catalog1' é diferente de " + result718 + " <dropStmt.getCatalogName()>", "catalog1", dropStmt.getCatalogName())
chamada antiga: Assert.assertEquals("schema1", dropStmt.getSchemaName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'schema1' é diferente de " + result719 + " <dropStmt.getSchemaName()>", "schema1", dropStmt.getSchemaName())
chamada antiga: Assert.assertEquals("table1", dropStmt.getTableName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'table1' é diferente de " + result720 + " <dropStmt.getTableName()>", "table1", dropStmt.getTableName())
chamada antiga: assertEquals("x", metaData.getParameterName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'x' é diferente de " + result721 + " <metaData.getParameterName()>", "x", metaData.getParameterName())
chamada antiga: assertEquals("y", metaData.getDisplayName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'y' é diferente de " + result722 + " <metaData.getDisplayName()>", "y", metaData.getDisplayName())
chamada antiga: assertEquals("integer", metaData.getDataType())
nova chamada: assertEquals("Era esperado valores iguais, mas  'integer' é diferente de " + result723 + " <metaData.getDataType()>", "integer", metaData.getDataType())
chamada antiga: assertEquals(2, metaData.getRequiredForDatabase().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + result724 + " <metaData.getRequiredForDatabase().size()>", 2, metaData.getRequiredForDatabase().size())
chamada antiga: assertTrue(metaData.getRequiredForDatabase().contains("mysql"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result725 + " <metaData.getRequiredForDatabase().contains('mysql')> é falso", metaData.getRequiredForDatabase().contains("mysql"))
chamada antiga: assertTrue(metaData.getRequiredForDatabase().contains("mssql"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result726 + " <metaData.getRequiredForDatabase().contains('mssql')> é falso", metaData.getRequiredForDatabase().contains("mssql"))
chamada antiga: assertEquals("column", metaData.getMustEqualExisting())
nova chamada: assertEquals("Era esperado valores iguais, mas  'column' é diferente de " + result727 + " <metaData.getMustEqualExisting()>", "column", metaData.getMustEqualExisting())
chamada antiga: assertEquals(LiquibaseSerializable.SerializationType.NESTED_OBJECT, metaData.getSerializationType())
nova chamada: assertEquals("Era esperado valores iguais, mas  LiquibaseSerializable.SerializationType.NESTED_OBJECT é diferente de " + result728 + " <metaData.getSerializationType()>", LiquibaseSerializable.SerializationType.NESTED_OBJECT, metaData.getSerializationType())
chamada antiga: assertEquals("desc", metaData.getDescription())
nova chamada: assertEquals("Era esperado valores iguais, mas  'desc' é diferente de " + result729 + " <metaData.getDescription()>", "desc", metaData.getDescription())
chamada antiga: assertEquals("examp", metaData.getExampleValue(new MockDatabase()))
nova chamada: assertEquals("Era esperado valores iguais, mas  'examp' é diferente de " + result730 + " <metaData.getExampleValue(new MockDatabase())>", "examp", metaData.getExampleValue(new MockDatabase()))
chamada antiga: assertEquals("2.1", metaData.getSince())
nova chamada: assertEquals("Era esperado valores iguais, mas  '2.1' é diferente de " + result731 + " <metaData.getSince()>", "2.1", metaData.getSince())
chamada antiga: assertEquals(3, metaData.getSupportedDatabases().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  3 é diferente de " + result732 + " <metaData.getSupportedDatabases().size()>", 3, metaData.getSupportedDatabases().size())
chamada antiga: assertTrue(metaData.getSupportedDatabases().contains("mysql"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result733 + " <metaData.getSupportedDatabases().contains('mysql')> é falso", metaData.getSupportedDatabases().contains("mysql"))
chamada antiga: assertTrue(metaData.getSupportedDatabases().contains("mssql"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result734 + " <metaData.getSupportedDatabases().contains('mssql')> é falso", metaData.getSupportedDatabases().contains("mssql"))
chamada antiga: assertTrue(metaData.getSupportedDatabases().contains("h2"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result735 + " <metaData.getSupportedDatabases().contains('h2')> é falso", metaData.getSupportedDatabases().contains("h2"))
chamada antiga: assertEquals(0, new ChangeParameterMetaData(new ExampleAbstractChange(), "x", "y", null, null, null, Integer.class, null, null, null, LiquibaseSerializable.SerializationType.NAMED_FIELD).getRequiredForDatabase().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + result736 + " <new ChangeParameterMetaData(new ExampleAbstractChange(), 'x', 'y', null, null, null, Integer.class, null, null, null, LiquibaseSerializable.SerializationType.NAMED_FIELD).getRequiredForDatabase().size()>", 0, new ChangeParameterMetaData(new ExampleAbstractChange(), "x", "y", null, null, null, Integer.class, null, null, null, LiquibaseSerializable.SerializationType.NAMED_FIELD).getRequiredForDatabase().size())
chamada antiga: assertEquals(0, new ChangeParameterMetaData(new ExampleAbstractChange(), "x", "y", null, null, null, Integer.class, new String[] { "none" }, null, null, LiquibaseSerializable.SerializationType.NAMED_FIELD).getRequiredForDatabase().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + result737 + " <new ChangeParameterMetaData(new ExampleAbstractChange(), 'x', 'y', null, null, null, Integer.class, new String[] { 'none' }, null, null, LiquibaseSerializable.SerializationType.NAMED_FIELD).getRequiredForDatabase().size()>", 0, new ChangeParameterMetaData(new ExampleAbstractChange(), "x", "y", null, null, null, Integer.class, new String[] { "none" }, null, null, LiquibaseSerializable.SerializationType.NAMED_FIELD).getRequiredForDatabase().size())
chamada antiga: assertTrue(new ChangeParameterMetaData(new ExampleAbstractChange(), "x", "y", null, null, null, Integer.class, new String[] { "mysql" }, null, null, LiquibaseSerializable.SerializationType.NAMED_FIELD).isRequiredFor(new MySQLDatabase()))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result738 + " <new ChangeParameterMetaData(new ExampleAbstractChange(), 'x', 'y', null, null, null, Integer.class, new String[] { 'mysql' }, null, null, LiquibaseSerializable.SerializationType.NAMED_FIELD).isRequiredFor(new MySQLDatabase())> é falso", new ChangeParameterMetaData(new ExampleAbstractChange(), "x", "y", null, null, null, Integer.class, new String[] { "mysql" }, null, null, LiquibaseSerializable.SerializationType.NAMED_FIELD).isRequiredFor(new MySQLDatabase()))
chamada antiga: assertTrue(new ChangeParameterMetaData(new ExampleAbstractChange(), "x", "y", null, null, null, Integer.class, new String[] { "mysql" }, null, null, LiquibaseSerializable.SerializationType.NAMED_FIELD).isRequiredFor(new MySQLDatabase() {
}))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result739 + " <new ChangeParameterMetaData(new ExampleAbstractChange(), 'x', 'y', null, null, null, Integer.class, new String[] { 'mysql' }, null, null, LiquibaseSerializable.SerializationType.NAMED_FIELD).isRequiredFor(new MySQLDatabase() {\n})> é falso", new ChangeParameterMetaData(new ExampleAbstractChange(), "x", "y", null, null, null, Integer.class, new String[] { "mysql" }, null, null, LiquibaseSerializable.SerializationType.NAMED_FIELD).isRequiredFor(new MySQLDatabase() {
}))
chamada antiga: assertFalse(new ChangeParameterMetaData(new ExampleAbstractChange(), "x", "y", null, null, null, Integer.class, new String[] { "mysql" }, null, null, LiquibaseSerializable.SerializationType.NAMED_FIELD).isRequiredFor(new MSSQLDatabase()))
nova chamada: assertFalse("Era esperado falso, mas " + result740 + " <new ChangeParameterMetaData(new ExampleAbstractChange(), 'x', 'y', null, null, null, Integer.class, new String[] { 'mysql' }, null, null, LiquibaseSerializable.SerializationType.NAMED_FIELD).isRequiredFor(new MSSQLDatabase())> é verdadeiro ", new ChangeParameterMetaData(new ExampleAbstractChange(), "x", "y", null, null, null, Integer.class, new String[] { "mysql" }, null, null, LiquibaseSerializable.SerializationType.NAMED_FIELD).isRequiredFor(new MSSQLDatabase()))
chamada antiga: assertTrue(new ChangeParameterMetaData(new ExampleAbstractChange(), "x", "y", null, null, null, Integer.class, new String[] { "mysql", "mssql" }, null, null, LiquibaseSerializable.SerializationType.NAMED_FIELD).isRequiredFor(new MySQLDatabase()))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result741 + " <new ChangeParameterMetaData(new ExampleAbstractChange(), 'x', 'y', null, null, null, Integer.class, new String[] { 'mysql', 'mssql' }, null, null, LiquibaseSerializable.SerializationType.NAMED_FIELD).isRequiredFor(new MySQLDatabase())> é falso", new ChangeParameterMetaData(new ExampleAbstractChange(), "x", "y", null, null, null, Integer.class, new String[] { "mysql", "mssql" }, null, null, LiquibaseSerializable.SerializationType.NAMED_FIELD).isRequiredFor(new MySQLDatabase()))
chamada antiga: assertTrue(new ChangeParameterMetaData(new ExampleAbstractChange(), "x", "y", null, null, null, Integer.class, new String[] { "mysql", "mssql" }, null, null, LiquibaseSerializable.SerializationType.NAMED_FIELD).isRequiredFor(new MSSQLDatabase()))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result742 + " <new ChangeParameterMetaData(new ExampleAbstractChange(), 'x', 'y', null, null, null, Integer.class, new String[] { 'mysql', 'mssql' }, null, null, LiquibaseSerializable.SerializationType.NAMED_FIELD).isRequiredFor(new MSSQLDatabase())> é falso", new ChangeParameterMetaData(new ExampleAbstractChange(), "x", "y", null, null, null, Integer.class, new String[] { "mysql", "mssql" }, null, null, LiquibaseSerializable.SerializationType.NAMED_FIELD).isRequiredFor(new MSSQLDatabase()))
chamada antiga: assertFalse(new ChangeParameterMetaData(new ExampleAbstractChange(), "x", "y", null, null, null, Integer.class, new String[] { "mysql", "mssql" }, null, null, LiquibaseSerializable.SerializationType.NAMED_FIELD).isRequiredFor(new OracleDatabase()))
nova chamada: assertFalse("Era esperado falso, mas " + result743 + " <new ChangeParameterMetaData(new ExampleAbstractChange(), 'x', 'y', null, null, null, Integer.class, new String[] { 'mysql', 'mssql' }, null, null, LiquibaseSerializable.SerializationType.NAMED_FIELD).isRequiredFor(new OracleDatabase())> é verdadeiro ", new ChangeParameterMetaData(new ExampleAbstractChange(), "x", "y", null, null, null, Integer.class, new String[] { "mysql", "mssql" }, null, null, LiquibaseSerializable.SerializationType.NAMED_FIELD).isRequiredFor(new OracleDatabase()))
chamada antiga: assertTrue(new ChangeParameterMetaData(new ExampleAbstractChange(), "x", "y", null, null, null, Integer.class, new String[] { "all" }, null, null, LiquibaseSerializable.SerializationType.NAMED_FIELD).isRequiredFor(new OracleDatabase()))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result744 + " <new ChangeParameterMetaData(new ExampleAbstractChange(), 'x', 'y', null, null, null, Integer.class, new String[] { 'all' }, null, null, LiquibaseSerializable.SerializationType.NAMED_FIELD).isRequiredFor(new OracleDatabase())> é falso", new ChangeParameterMetaData(new ExampleAbstractChange(), "x", "y", null, null, null, Integer.class, new String[] { "all" }, null, null, LiquibaseSerializable.SerializationType.NAMED_FIELD).isRequiredFor(new OracleDatabase()))
chamada antiga: assertTrue(new ChangeParameterMetaData(new ExampleAbstractChange(), "x", "y", null, null, null, Integer.class, new String[] { "all" }, null, null, LiquibaseSerializable.SerializationType.NAMED_FIELD).isRequiredFor(new MySQLDatabase()))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result745 + " <new ChangeParameterMetaData(new ExampleAbstractChange(), 'x', 'y', null, null, null, Integer.class, new String[] { 'all' }, null, null, LiquibaseSerializable.SerializationType.NAMED_FIELD).isRequiredFor(new MySQLDatabase())> é falso", new ChangeParameterMetaData(new ExampleAbstractChange(), "x", "y", null, null, null, Integer.class, new String[] { "all" }, null, null, LiquibaseSerializable.SerializationType.NAMED_FIELD).isRequiredFor(new MySQLDatabase()))
chamada antiga: assertFalse(new ChangeParameterMetaData(new ExampleAbstractChange(), "x", "y", null, null, null, Integer.class, new String[] {}, null, null, LiquibaseSerializable.SerializationType.NAMED_FIELD).isRequiredFor(new OracleDatabase()))
nova chamada: assertFalse("Era esperado falso, mas " + result746 + " <new ChangeParameterMetaData(new ExampleAbstractChange(), 'x', 'y', null, null, null, Integer.class, new String[] {}, null, null, LiquibaseSerializable.SerializationType.NAMED_FIELD).isRequiredFor(new OracleDatabase())> é verdadeiro ", new ChangeParameterMetaData(new ExampleAbstractChange(), "x", "y", null, null, null, Integer.class, new String[] {}, null, null, LiquibaseSerializable.SerializationType.NAMED_FIELD).isRequiredFor(new OracleDatabase()))
chamada antiga: assertFalse(new ChangeParameterMetaData(new ExampleAbstractChange(), "x", "y", null, null, null, Integer.class, new String[] {}, null, null, LiquibaseSerializable.SerializationType.NAMED_FIELD).isRequiredFor(new MySQLDatabase()))
nova chamada: assertFalse("Era esperado falso, mas " + result747 + " <new ChangeParameterMetaData(new ExampleAbstractChange(), 'x', 'y', null, null, null, Integer.class, new String[] {}, null, null, LiquibaseSerializable.SerializationType.NAMED_FIELD).isRequiredFor(new MySQLDatabase())> é verdadeiro ", new ChangeParameterMetaData(new ExampleAbstractChange(), "x", "y", null, null, null, Integer.class, new String[] {}, null, null, LiquibaseSerializable.SerializationType.NAMED_FIELD).isRequiredFor(new MySQLDatabase()))
chamada antiga: assertEquals("newTable", tableNameMetaData.getCurrentValue(change))
nova chamada: assertEquals("Era esperado valores iguais, mas  'newTable' é diferente de " + result748 + " <tableNameMetaData.getCurrentValue(change)>", "newTable", tableNameMetaData.getCurrentValue(change))
chamada antiga: assertEquals("newCatalog", catalogNameMetaData.getCurrentValue(change))
nova chamada: assertEquals("Era esperado valores iguais, mas  'newCatalog' é diferente de " + result749 + " <catalogNameMetaData.getCurrentValue(change)>", "newCatalog", catalogNameMetaData.getCurrentValue(change))
chamada antiga: assertNull(remarksMetaData.getCurrentValue(change))
nova chamada: assertNull("Era esperado nulo, mas " + result750 + " <remarksMetaData.getCurrentValue(change)> não é nulo", remarksMetaData.getCurrentValue(change))
chamada antiga: assertEquals("changedTableName", tableNameMetaData.getCurrentValue(change))
nova chamada: assertEquals("Era esperado valores iguais, mas  'changedTableName' é diferente de " + result751 + " <tableNameMetaData.getCurrentValue(change)>", "changedTableName", tableNameMetaData.getCurrentValue(change))
chamada antiga: Assert.assertEquals(1, statements.length)
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + " statements.length", 1, statements.length)
chamada antiga: Assert.assertTrue(statements[0] instanceof DropColumnStatement)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", statements[0] instanceof DropColumnStatement)
chamada antiga: Assert.assertTrue(stmt.isMultiple())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result752 + " <stmt.isMultiple()> é falso", stmt.isMultiple())
chamada antiga: Assert.assertEquals(2, stmt.getColumns().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + result753 + " <stmt.getColumns().size()>", 2, stmt.getColumns().size())
chamada antiga: assertFalse(change.isStripComments())
nova chamada: assertFalse("Era esperado falso, mas " + result754 + " <change.isStripComments()> é verdadeiro ", change.isStripComments())
chamada antiga: assertTrue(change.isSplitStatements())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result755 + " <change.isSplitStatements()> é falso", change.isSplitStatements())
chamada antiga: assertNull(change.getEndDelimiter())
nova chamada: assertNull("Era esperado nulo, mas " + result756 + " <change.getEndDelimiter()> não é nulo", change.getEndDelimiter())
chamada antiga: assertTrue(change.isStripComments())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result757 + " <change.isStripComments()> é falso", change.isStripComments())
chamada antiga: assertFalse(change.isStripComments())
nova chamada: assertFalse("Era esperado falso, mas " + result758 + " <change.isStripComments()> é verdadeiro ", change.isStripComments())
chamada antiga: assertFalse(change.isStripComments())
nova chamada: assertFalse("Era esperado falso, mas " + result759 + " <change.isStripComments()> é verdadeiro ", change.isStripComments())
chamada antiga: assertTrue(change.isSplitStatements())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result760 + " <change.isSplitStatements()> é falso", change.isSplitStatements())
chamada antiga: assertFalse(change.isSplitStatements())
nova chamada: assertFalse("Era esperado falso, mas " + result761 + " <change.isSplitStatements()> é verdadeiro ", change.isSplitStatements())
chamada antiga: assertTrue(change.isSplitStatements())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result762 + " <change.isSplitStatements()> é falso", change.isSplitStatements())
chamada antiga: assertEquals("SOME SQL", sql.getSql())
nova chamada: assertEquals("Era esperado valores iguais, mas  'SOME SQL' é diferente de " + result763 + " <sql.getSql()>", "SOME SQL", sql.getSql())
chamada antiga: assertEquals("GO", change.getEndDelimiter())
nova chamada: assertEquals("Era esperado valores iguais, mas  'GO' é diferente de " + result764 + " <change.getEndDelimiter()>", "GO", change.getEndDelimiter())
chamada antiga: assertEquals(";", change.getEndDelimiter())
nova chamada: assertEquals("Era esperado valores iguais, mas  ';' é diferente de " + result765 + " <change.getEndDelimiter()>", ";", change.getEndDelimiter())
chamada antiga: assertEquals(sql.toString(), sqlCRLF.toString())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result766 + " <sql.toString()> é diferente de " + result767 + " <sqlCRLF.toString()>", sql.toString(), sqlCRLF.toString())
chamada antiga: assertEquals(sql.toString(), sqlLF.toString())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result768 + " <sql.toString()> é diferente de " + result769 + " <sqlLF.toString()>", sql.toString(), sqlLF.toString())
chamada antiga: assertNotEquals(sql.toString(), sqlDifferent.toString())
nova chamada: assertNotEquals("Era esperado valores diferentes, mas " + result770 + " <sql.toString()> é igual a " + result771 + " <sqlDifferent.toString()>", sql.toString(), sqlDifferent.toString())
chamada antiga: assertNotNull(new ExampleAbstractSQLChange().generateCheckSum())
nova chamada: assertNotNull("Era esperado não nulo, mas " + result772 + " <new ExampleAbstractSQLChange().generateCheckSum()> é nulo", new ExampleAbstractSQLChange().generateCheckSum())
chamada antiga: assertNotEquals(baseCheckSum.toString(), change.generateCheckSum().toString())
nova chamada: assertNotEquals("Era esperado valores diferentes, mas " + result773 + " <baseCheckSum.toString()> é igual a " + result774 + " <change.generateCheckSum().toString()>", baseCheckSum.toString(), change.generateCheckSum().toString())
chamada antiga: assertNotEquals(baseCheckSum.toString(), change.generateCheckSum().toString())
nova chamada: assertNotEquals("Era esperado valores diferentes, mas " + result775 + " <baseCheckSum.toString()> é igual a " + result776 + " <change.generateCheckSum().toString()>", baseCheckSum.toString(), change.generateCheckSum().toString())
chamada antiga: assertNotEquals(baseCheckSum.toString(), change.generateCheckSum().toString())
nova chamada: assertNotEquals("Era esperado valores diferentes, mas " + result777 + " <baseCheckSum.toString()> é igual a " + result778 + " <change.generateCheckSum().toString()>", baseCheckSum.toString(), change.generateCheckSum().toString())
chamada antiga: assertEquals(1, statements.length)
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + " statements.length", 1, statements.length)
chamada antiga: assertEquals("LINE 1;\r\n\r\nLINE 2;\r\nLINE 3;", ((RawSqlStatement) statements[0]).getSql())
nova chamada: assertEquals("Era esperado valores iguais, mas  'LINE 1;\r\n\r\nLINE 2;\r\nLINE 3;' é diferente de " + result779 + " <((RawSqlStatement) statements[0]).getSql()>", "LINE 1;\r\n\r\nLINE 2;\r\nLINE 3;", ((RawSqlStatement) statements[0]).getSql())
chamada antiga: assertEquals("x:true:false:" + expected, StreamUtil.readStreamAsString(normalizingStream))
nova chamada: assertEquals("Era esperado valores iguais, mas  'x:true:false:' + expected é diferente de " + result780 + " <StreamUtil.readStreamAsString(normalizingStream)>", "x:true:false:" + expected, StreamUtil.readStreamAsString(normalizingStream))
chamada antiga: assertEquals("MESSAGE HERE", duplicateChangeSetException.getMessage())
nova chamada: assertEquals("Era esperado valores iguais, mas  'MESSAGE HERE' é diferente de " + result781 + " <duplicateChangeSetException.getMessage()>", "MESSAGE HERE", duplicateChangeSetException.getMessage())
chamada antiga: assertEquals("Message Here", ex.getMessage())
nova chamada: assertEquals("Era esperado valores iguais, mas  'Message Here' é diferente de " + result782 + " <ex.getMessage()>", "Message Here", ex.getMessage())
chamada antiga: assertFalse(errors.hasErrors())
nova chamada: assertFalse("Era esperado falso, mas " + result783 + " <errors.hasErrors()> é verdadeiro ", errors.hasErrors())
chamada antiga: assertTrue(errors.hasErrors())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result784 + " <errors.hasErrors()> é falso", errors.hasErrors())
chamada antiga: assertFalse(errors.hasErrors())
nova chamada: assertFalse("Era esperado falso, mas " + result785 + " <errors.hasErrors()> é verdadeiro ", errors.hasErrors())
chamada antiga: assertTrue(errors.hasErrors())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result786 + " <errors.hasErrors()> é falso", errors.hasErrors())
chamada antiga: assertTrue(errors.getErrorMessages().contains("testField is required"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result787 + " <errors.getErrorMessages().contains('testField is required')> é falso", errors.getErrorMessages().contains("testField is required"))
chamada antiga: assertTrue(DatabaseList.definitionMatches("", new OracleDatabase(), true))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result788 + " <DatabaseList.definitionMatches('', new OracleDatabase(), true)> é falso", DatabaseList.definitionMatches("", new OracleDatabase(), true))
chamada antiga: assertFalse(DatabaseList.definitionMatches("", new OracleDatabase(), false))
nova chamada: assertFalse("Era esperado falso, mas " + result789 + " <DatabaseList.definitionMatches('', new OracleDatabase(), false)> é verdadeiro ", DatabaseList.definitionMatches("", new OracleDatabase(), false))
chamada antiga: assertTrue(DatabaseList.definitionMatches((String) null, new OracleDatabase(), true))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result790 + " <DatabaseList.definitionMatches((String) null, new OracleDatabase(), true)> é falso", DatabaseList.definitionMatches((String) null, new OracleDatabase(), true))
chamada antiga: assertFalse(DatabaseList.definitionMatches((String) null, new OracleDatabase(), false))
nova chamada: assertFalse("Era esperado falso, mas " + result791 + " <DatabaseList.definitionMatches((String) null, new OracleDatabase(), false)> é verdadeiro ", DatabaseList.definitionMatches((String) null, new OracleDatabase(), false))
chamada antiga: assertTrue(DatabaseList.definitionMatches("   ", new OracleDatabase(), true))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result792 + " <DatabaseList.definitionMatches('   ', new OracleDatabase(), true)> é falso", DatabaseList.definitionMatches("   ", new OracleDatabase(), true))
chamada antiga: assertFalse(DatabaseList.definitionMatches("   ", new OracleDatabase(), false))
nova chamada: assertFalse("Era esperado falso, mas " + result793 + " <DatabaseList.definitionMatches('   ', new OracleDatabase(), false)> é verdadeiro ", DatabaseList.definitionMatches("   ", new OracleDatabase(), false))
chamada antiga: assertTrue(DatabaseList.definitionMatches("oracle", new OracleDatabase(), false))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result794 + " <DatabaseList.definitionMatches('oracle', new OracleDatabase(), false)> é falso", DatabaseList.definitionMatches("oracle", new OracleDatabase(), false))
chamada antiga: assertTrue(DatabaseList.definitionMatches("oracle,mysql,mssql", new OracleDatabase(), false))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result795 + " <DatabaseList.definitionMatches('oracle,mysql,mssql', new OracleDatabase(), false)> é falso", DatabaseList.definitionMatches("oracle,mysql,mssql", new OracleDatabase(), false))
chamada antiga: assertTrue(DatabaseList.definitionMatches("oracle,mysql,mssql", new MySQLDatabase(), false))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result796 + " <DatabaseList.definitionMatches('oracle,mysql,mssql', new MySQLDatabase(), false)> é falso", DatabaseList.definitionMatches("oracle,mysql,mssql", new MySQLDatabase(), false))
chamada antiga: assertTrue(DatabaseList.definitionMatches("oracle,mysql,mssql", new MSSQLDatabase(), false))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result797 + " <DatabaseList.definitionMatches('oracle,mysql,mssql', new MSSQLDatabase(), false)> é falso", DatabaseList.definitionMatches("oracle,mysql,mssql", new MSSQLDatabase(), false))
chamada antiga: assertFalse(DatabaseList.definitionMatches("oracle,mysql,mssql", new H2Database(), false))
nova chamada: assertFalse("Era esperado falso, mas " + result798 + " <DatabaseList.definitionMatches('oracle,mysql,mssql', new H2Database(), false)> é verdadeiro ", DatabaseList.definitionMatches("oracle,mysql,mssql", new H2Database(), false))
chamada antiga: assertTrue(DatabaseList.definitionMatches("!h2", new MySQLDatabase(), false))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result799 + " <DatabaseList.definitionMatches('!h2', new MySQLDatabase(), false)> é falso", DatabaseList.definitionMatches("!h2", new MySQLDatabase(), false))
chamada antiga: assertTrue(DatabaseList.definitionMatches("!h2", new MySQLDatabase(), true))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result800 + " <DatabaseList.definitionMatches('!h2', new MySQLDatabase(), true)> é falso", DatabaseList.definitionMatches("!h2", new MySQLDatabase(), true))
chamada antiga: assertFalse(DatabaseList.definitionMatches("!h2", new H2Database(), false))
nova chamada: assertFalse("Era esperado falso, mas " + result801 + " <DatabaseList.definitionMatches('!h2', new H2Database(), false)> é verdadeiro ", DatabaseList.definitionMatches("!h2", new H2Database(), false))
chamada antiga: assertFalse(DatabaseList.definitionMatches("!h2", new H2Database(), true))
nova chamada: assertFalse("Era esperado falso, mas " + result802 + " <DatabaseList.definitionMatches('!h2', new H2Database(), true)> é verdadeiro ", DatabaseList.definitionMatches("!h2", new H2Database(), true))
chamada antiga: assertFalse(DatabaseList.definitionMatches("!h2,mysql", new H2Database(), false))
nova chamada: assertFalse("Era esperado falso, mas " + result803 + " <DatabaseList.definitionMatches('!h2,mysql', new H2Database(), false)> é verdadeiro ", DatabaseList.definitionMatches("!h2,mysql", new H2Database(), false))
chamada antiga: assertTrue(DatabaseList.definitionMatches("!h2,mysql", new MySQLDatabase(), false))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result804 + " <DatabaseList.definitionMatches('!h2,mysql', new MySQLDatabase(), false)> é falso", DatabaseList.definitionMatches("!h2,mysql", new MySQLDatabase(), false))
chamada antiga: assertFalse(getDatabase().supportsInitiallyDeferrableColumns())
nova chamada: assertFalse("Era esperado falso, mas " + result805 + " <getDatabase().supportsInitiallyDeferrableColumns()> é verdadeiro ", getDatabase().supportsInitiallyDeferrableColumns())
chamada antiga: assertEquals("GETDATE()", getDatabase().getCurrentDateTimeFunction())
nova chamada: assertEquals("Era esperado valores iguais, mas  'GETDATE()' é diferente de " + result806 + " <getDatabase().getCurrentDateTimeFunction()>", "GETDATE()", getDatabase().getCurrentDateTimeFunction())
chamada antiga: assertTrue(database instanceof MSSQLDatabase)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", database instanceof MSSQLDatabase)
chamada antiga: assertTrue(mssqlDatabase.dataTypeIsNotModifiable("datetime"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result807 + " <mssqlDatabase.dataTypeIsNotModifiable('datetime')> é falso", mssqlDatabase.dataTypeIsNotModifiable("datetime"))
chamada antiga: assertEquals("MySchema.MyUDT", database.escapeDataTypeName("MySchema.MyUDT"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'MySchema.MyUDT' é diferente de " + result808 + " <database.escapeDataTypeName('MySchema.MyUDT')>", "MySchema.MyUDT", database.escapeDataTypeName("MySchema.MyUDT"))
chamada antiga: assertEquals("[MySchema€].[MyUDT€]", database.escapeDataTypeName("MySchema€.MyUDT€"))
nova chamada: assertEquals("Era esperado valores iguais, mas  '[MySchema€].[MyUDT€]' é diferente de " + result809 + " <database.escapeDataTypeName('MySchema€.MyUDT€')>", "[MySchema€].[MyUDT€]", database.escapeDataTypeName("MySchema€.MyUDT€"))
chamada antiga: assertEquals("MySchema.[MyUDT]", database.escapeDataTypeName("MySchema.[MyUDT]"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'MySchema.[MyUDT]' é diferente de " + result810 + " <database.escapeDataTypeName('MySchema.[MyUDT]')>", "MySchema.[MyUDT]", database.escapeDataTypeName("MySchema.[MyUDT]"))
chamada antiga: assertEquals("[MySchema].MyUDT", database.escapeDataTypeName("[MySchema].MyUDT"))
nova chamada: assertEquals("Era esperado valores iguais, mas  '[MySchema].MyUDT' é diferente de " + result811 + " <database.escapeDataTypeName('[MySchema].MyUDT')>", "[MySchema].MyUDT", database.escapeDataTypeName("[MySchema].MyUDT"))
chamada antiga: assertEquals("[MySchema].[MyUDT]", database.escapeDataTypeName("[MySchema].[MyUDT]"))
nova chamada: assertEquals("Era esperado valores iguais, mas  '[MySchema].[MyUDT]' é diferente de " + result812 + " <database.escapeDataTypeName('[MySchema].[MyUDT]')>", "[MySchema].[MyUDT]", database.escapeDataTypeName("[MySchema].[MyUDT]"))
chamada antiga: assertEquals("MySchema.MyUDT", database.unescapeDataTypeName("MySchema.MyUDT"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'MySchema.MyUDT' é diferente de " + result813 + " <database.unescapeDataTypeName('MySchema.MyUDT')>", "MySchema.MyUDT", database.unescapeDataTypeName("MySchema.MyUDT"))
chamada antiga: assertEquals("MySchema.MyUDT", database.unescapeDataTypeName("MySchema.[MyUDT]"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'MySchema.MyUDT' é diferente de " + result814 + " <database.unescapeDataTypeName('MySchema.[MyUDT]')>", "MySchema.MyUDT", database.unescapeDataTypeName("MySchema.[MyUDT]"))
chamada antiga: assertEquals("MySchema.MyUDT", database.unescapeDataTypeName("[MySchema].MyUDT"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'MySchema.MyUDT' é diferente de " + result815 + " <database.unescapeDataTypeName('[MySchema].MyUDT')>", "MySchema.MyUDT", database.unescapeDataTypeName("[MySchema].MyUDT"))
chamada antiga: assertEquals("MySchema.MyUDT", database.unescapeDataTypeName("[MySchema].[MyUDT]"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'MySchema.MyUDT' é diferente de " + result816 + " <database.unescapeDataTypeName('[MySchema].[MyUDT]')>", "MySchema.MyUDT", database.unescapeDataTypeName("[MySchema].[MyUDT]"))
chamada antiga: assertEquals("int", database.unescapeDataTypeString("int"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'int' é diferente de " + result817 + " <database.unescapeDataTypeString('int')>", "int", database.unescapeDataTypeString("int"))
chamada antiga: assertEquals("int", database.unescapeDataTypeString("[int]"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'int' é diferente de " + result818 + " <database.unescapeDataTypeString('[int]')>", "int", database.unescapeDataTypeString("[int]"))
chamada antiga: assertEquals("decimal(19, 2)", database.unescapeDataTypeString("decimal(19, 2)"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'decimal(19, 2)' é diferente de " + result819 + " <database.unescapeDataTypeString('decimal(19, 2)')>", "decimal(19, 2)", database.unescapeDataTypeString("decimal(19, 2)"))
chamada antiga: assertEquals("decimal(19, 2)", database.unescapeDataTypeString("[decimal](19, 2)"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'decimal(19, 2)' é diferente de " + result820 + " <database.unescapeDataTypeString('[decimal](19, 2)')>", "decimal(19, 2)", database.unescapeDataTypeString("[decimal](19, 2)"))
chamada antiga: assertThat(oracleDataType.getType(), CoreMatchers.is("TIMESTAMP"))
nova chamada: assertThat("Era esperado que " + result821 + " <oracleDataType.getType()> satisfizesse a condição " + result822 + " <CoreMatchers.is('TIMESTAMP')>, mas não a satisfez", oracleDataType.getType(), CoreMatchers.is("TIMESTAMP"))
chamada antiga: assertEquals("UPDATE \"SAMPLESCHEMA\".\"test_table\" SET \"id\" = \"SAMPLESCHEMA\".\"test_table_id_seq\".nextval;", mockExecutor.getRanSql().trim())
nova chamada: assertEquals("Era esperado valores iguais, mas  'UPDATE \'SAMPLESCHEMA\'.\'test_table\' SET \'id\' = \'SAMPLESCHEMA\'.\'test_table_id_seq\'.nextval;' é diferente de " + result823 + " <mockExecutor.getRanSql().trim()>", "UPDATE \"SAMPLESCHEMA\".\"test_table\" SET \"id\" = \"SAMPLESCHEMA\".\"test_table_id_seq\".nextval;", mockExecutor.getRanSql().trim())
chamada antiga: assertEquals("TO_DATE('2017-08-16 16:32:55', 'YYYY-MM-DD HH24:MI:SS')", database.getDateLiteral("2017-08-16T16:32:55"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'TO_DATE('2017-08-16 16:32:55', 'YYYY-MM-DD HH24:MI:SS')' é diferente de " + result824 + " <database.getDateLiteral('2017-08-16T16:32:55')>", "TO_DATE('2017-08-16 16:32:55', 'YYYY-MM-DD HH24:MI:SS')", database.getDateLiteral("2017-08-16T16:32:55"))
chamada antiga: assertEquals("TO_DATE('2017-08-16', 'YYYY-MM-DD')", database.getDateLiteral("2017-08-16"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'TO_DATE('2017-08-16', 'YYYY-MM-DD')' é diferente de " + result825 + " <database.getDateLiteral('2017-08-16')>", "TO_DATE('2017-08-16', 'YYYY-MM-DD')", database.getDateLiteral("2017-08-16"))
chamada antiga: assertEquals("TO_DATE('16:32:55', 'HH24:MI:SS')", database.getDateLiteral("16:32:55"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'TO_DATE('16:32:55', 'HH24:MI:SS')' é diferente de " + result826 + " <database.getDateLiteral('16:32:55')>", "TO_DATE('16:32:55', 'HH24:MI:SS')", database.getDateLiteral("16:32:55"))
chamada antiga: assertEquals("TO_TIMESTAMP('2017-08-16 16:32:55.125', 'YYYY-MM-DD HH24:MI:SS.FF')", database.getDateLiteral("2017-08-16T16:32:55.125"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'TO_TIMESTAMP('2017-08-16 16:32:55.125', 'YYYY-MM-DD HH24:MI:SS.FF')' é diferente de " + result827 + " <database.getDateLiteral('2017-08-16T16:32:55.125')>", "TO_TIMESTAMP('2017-08-16 16:32:55.125', 'YYYY-MM-DD HH24:MI:SS.FF')", database.getDateLiteral("2017-08-16T16:32:55.125"))
chamada antiga: assertEquals("TO_TIMESTAMP('2017-08-16 16:32:55.3', 'YYYY-MM-DD HH24:MI:SS.FF')", database.getDateLiteral("2017-08-16T16:32:55.3"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'TO_TIMESTAMP('2017-08-16 16:32:55.3', 'YYYY-MM-DD HH24:MI:SS.FF')' é diferente de " + result828 + " <database.getDateLiteral('2017-08-16T16:32:55.3')>", "TO_TIMESTAMP('2017-08-16 16:32:55.3', 'YYYY-MM-DD HH24:MI:SS.FF')", database.getDateLiteral("2017-08-16T16:32:55.3"))
chamada antiga: assertEquals("UNSUPPORTED:2017-08-16T16:32:55_3", database.getDateLiteral("2017-08-16T16:32:55_3"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'UNSUPPORTED:2017-08-16T16:32:55_3' é diferente de " + result829 + " <database.getDateLiteral('2017-08-16T16:32:55_3')>", "UNSUPPORTED:2017-08-16T16:32:55_3", database.getDateLiteral("2017-08-16T16:32:55_3"))
chamada antiga: assertEquals("UNSUPPORTED:123", database.getDateLiteral("123"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'UNSUPPORTED:123' é diferente de " + result830 + " <database.getDateLiteral('123')>", "UNSUPPORTED:123", database.getDateLiteral("123"))
chamada antiga: assertFalse(getDatabase().supportsInitiallyDeferrableColumns())
nova chamada: assertFalse("Era esperado falso, mas " + result831 + " <getDatabase().supportsInitiallyDeferrableColumns()> é verdadeiro ", getDatabase().supportsInitiallyDeferrableColumns())
chamada antiga: Assert.assertEquals("NOW()", getDatabase().getCurrentDateTimeFunction())
nova chamada: assertEquals("Era esperado valores iguais, mas  'NOW()' é diferente de " + result832 + " <getDatabase().getCurrentDateTimeFunction()>", "NOW()", getDatabase().getCurrentDateTimeFunction())
chamada antiga: assertEquals("org.h2.Driver", database.getDefaultDriver("jdbc:h2:mem:liquibase"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'org.h2.Driver' é diferente de " + result833 + " <database.getDefaultDriver('jdbc:h2:mem:liquibase')>", "org.h2.Driver", database.getDefaultDriver("jdbc:h2:mem:liquibase"))
chamada antiga: assertNull(database.getDefaultDriver("jdbc:db2://localhost;databaseName=liquibase"))
nova chamada: assertNull("Era esperado nulo, mas " + result834 + " <database.getDefaultDriver('jdbc:db2://localhost;databaseName=liquibase')> não é nulo", database.getDefaultDriver("jdbc:db2://localhost;databaseName=liquibase"))
chamada antiga: assertEquals("tableName", database.escapeTableName(null, null, "tableName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'tableName' é diferente de " + result835 + " <database.escapeTableName(null, null, 'tableName')>", "tableName", database.escapeTableName(null, null, "tableName"))
chamada antiga: assertEquals("schemaName.tableName", database.escapeTableName("catalogName", "schemaName", "tableName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'schemaName.tableName' é diferente de " + result836 + " <database.escapeTableName('catalogName', 'schemaName', 'tableName')>", "schemaName.tableName", database.escapeTableName("catalogName", "schemaName", "tableName"))
chamada antiga: Assert.assertEquals(1, statements.length)
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + " statements.length", 1, statements.length)
chamada antiga: Assert.assertTrue(statements[0] instanceof AddColumnStatement)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", statements[0] instanceof AddColumnStatement)
chamada antiga: Assert.assertTrue(stmt.isMultiple())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result837 + " <stmt.isMultiple()> é falso", stmt.isMultiple())
chamada antiga: Assert.assertEquals(2, stmt.getColumns().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + result838 + " <stmt.getColumns().size()>", 2, stmt.getColumns().size())
chamada antiga: assertEquals("DATETIME (2010-11-12 13:14:15) YEAR TO FRACTION(5)", d)
nova chamada: assertEquals("Era esperado valores iguais, mas  'DATETIME (2010-11-12 13:14:15) YEAR TO FRACTION(5)' é diferente de " + " d", "DATETIME (2010-11-12 13:14:15) YEAR TO FRACTION(5)", d)
chamada antiga: assertEquals("'2010-11-12'", d)
nova chamada: assertEquals("Era esperado valores iguais, mas  ''2010-11-12'' é diferente de " + " d", "'2010-11-12'", d)
chamada antiga: assertEquals("DATETIME (13:14:15) HOUR TO FRACTION(5)", d)
nova chamada: assertEquals("Era esperado valores iguais, mas  'DATETIME (13:14:15) HOUR TO FRACTION(5)' é diferente de " + " d", "DATETIME (13:14:15) HOUR TO FRACTION(5)", d)
chamada antiga: assertEquals("com.informix.jdbc.IfxDriver", database.getDefaultDriver("jdbc:informix-sqli://localhost:9088/liquibase:informixserver=ol_ids_1150_1"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'com.informix.jdbc.IfxDriver' é diferente de " + result839 + " <database.getDefaultDriver('jdbc:informix-sqli://localhost:9088/liquibase:informixserver=ol_ids_1150_1')>", "com.informix.jdbc.IfxDriver", database.getDefaultDriver("jdbc:informix-sqli://localhost:9088/liquibase:informixserver=ol_ids_1150_1"))
chamada antiga: assertEquals(12, database.getMaxFractionalDigitsForTimestamp())
nova chamada: assertEquals("Era esperado valores iguais, mas  12 é diferente de " + result840 + " <database.getMaxFractionalDigitsForTimestamp()>", 12, database.getMaxFractionalDigitsForTimestamp())
chamada antiga: assertTrue(getDatabase().supportsInitiallyDeferrableColumns())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result841 + " <getDatabase().supportsInitiallyDeferrableColumns()> é falso", getDatabase().supportsInitiallyDeferrableColumns())
chamada antiga: Assert.assertEquals("NOW()", getDatabase().getCurrentDateTimeFunction())
nova chamada: assertEquals("Era esperado valores iguais, mas  'NOW()' é diferente de " + result842 + " <getDatabase().getCurrentDateTimeFunction()>", "NOW()", getDatabase().getCurrentDateTimeFunction())
chamada antiga: assertEquals("\"tableName\"", database.escapeTableName(null, null, "tableName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  '\'tableName\'' é diferente de " + result843 + " <database.escapeTableName(null, null, 'tableName')>", "\"tableName\"", database.escapeTableName(null, null, "tableName"))
chamada antiga: assertEquals("tbl", database.escapeTableName(null, null, "tbl"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'tbl' é diferente de " + result844 + " <database.escapeTableName(null, null, 'tbl')>", "tbl", database.escapeTableName(null, null, "tbl"))
chamada antiga: assertEquals("\"user\"", database.escapeTableName(null, null, "user"))
nova chamada: assertEquals("Era esperado valores iguais, mas  '\'user\'' é diferente de " + result845 + " <database.escapeTableName(null, null, 'user')>", "\"user\"", database.escapeTableName(null, null, "user"))
chamada antiga: assertEquals("\"schemaName\".\"tableName\"", database.escapeTableName("catalogName", "schemaName", "tableName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  '\'schemaName\'.\'tableName\'' é diferente de " + result846 + " <database.escapeTableName('catalogName', 'schemaName', 'tableName')>", "\"schemaName\".\"tableName\"", database.escapeTableName("catalogName", "schemaName", "tableName"))
chamada antiga: assertEquals("\"user\"", database.escapeTableName(null, null, "user"))
nova chamada: assertEquals("Era esperado valores iguais, mas  '\'user\'' é diferente de " + result847 + " <database.escapeTableName(null, null, 'user')>", "\"user\"", database.escapeTableName(null, null, "user"))
chamada antiga: assertEquals("tableName", database.escapeTableName(null, null, "tableName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'tableName' é diferente de " + result848 + " <database.escapeTableName(null, null, 'tableName')>", "tableName", database.escapeTableName(null, null, "tableName"))
chamada antiga: assertEquals("\"tbl\"", database.escapeTableName(null, null, "tbl"))
nova chamada: assertEquals("Era esperado valores iguais, mas  '\'tbl\'' é diferente de " + result849 + " <database.escapeTableName(null, null, 'tbl')>", "\"tbl\"", database.escapeTableName(null, null, "tbl"))
chamada antiga: assertEquals("\"user\"", database.escapeTableName(null, null, "user"))
nova chamada: assertEquals("Era esperado valores iguais, mas  '\'user\'' é diferente de " + result850 + " <database.escapeTableName(null, null, 'user')>", "\"user\"", database.escapeTableName(null, null, "user"))
chamada antiga: assertEquals(COLUMN_AUTHOR, result)
nova chamada: assertEquals("Era esperado valores iguais, mas  COLUMN_AUTHOR é diferente de " + " result", COLUMN_AUTHOR, result)
chamada antiga: assertTrue(tableName.matches("[\\[\\\"`]?My Table  [\\]\\\"`]?"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result851 + " <tableName.matches('[\\[\\\'`]?My Table  [\\]\\\'`]?')> é falso", tableName.matches("[\\[\\\"`]?My Table  [\\]\\\"`]?"))
chamada antiga: assertEquals("\"MyTable\"", tableName)
nova chamada: assertEquals("Era esperado valores iguais, mas  '\'MyTable\'' é diferente de " + " tableName", "\"MyTable\"", tableName)
chamada antiga: assertTrue(tableName.matches("[\\[\\\"`]?My Table[\\]\\\"`]?"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result852 + " <tableName.matches('[\\[\\\'`]?My Table[\\]\\\'`]?')> é falso", tableName.matches("[\\[\\\"`]?My Table[\\]\\\"`]?"))
chamada antiga: assertEquals("", database.getConcatSql())
nova chamada: assertEquals("Era esperado valores iguais, mas  '' é diferente de " + result853 + " <database.getConcatSql()>", "", database.getConcatSql())
chamada antiga: assertEquals("foo", database.getConcatSql("foo"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'foo' é diferente de " + result854 + " <database.getConcatSql('foo')>", "foo", database.getConcatSql("foo"))
chamada antiga: assertEquals("foo || bar", database.getConcatSql("foo", "bar"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'foo || bar' é diferente de " + result855 + " <database.getConcatSql('foo', 'bar')>", "foo || bar", database.getConcatSql("foo", "bar"))
chamada antiga: assertEquals("one || two || | three", database.getConcatSql("one", "two", "| three"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'one || two || | three' é diferente de " + result856 + " <database.getConcatSql('one', 'two', '| three')>", "one || two || | three", database.getConcatSql("one", "two", "| three"))
chamada antiga: assertTrue(expected.getBytes(GlobalConfiguration.FILE_ENCODING.getCurrentValue()).length <= PostgresDatabase.PGSQL_PK_BYTES_LIMIT)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", expected.getBytes(GlobalConfiguration.FILE_ENCODING.getCurrentValue()).length <= PostgresDatabase.PGSQL_PK_BYTES_LIMIT)
chamada antiga: assertFalse(getDatabase().supportsInitiallyDeferrableColumns())
nova chamada: assertFalse("Era esperado falso, mas " + result857 + " <getDatabase().supportsInitiallyDeferrableColumns()> é verdadeiro ", getDatabase().supportsInitiallyDeferrableColumns())
chamada antiga: Assert.assertEquals("NOW()", getDatabase().getCurrentDateTimeFunction())
nova chamada: assertEquals("Era esperado valores iguais, mas  'NOW()' é diferente de " + result858 + " <getDatabase().getCurrentDateTimeFunction()>", "NOW()", getDatabase().getCurrentDateTimeFunction())
chamada antiga: Assert.assertEquals("NOW(1)", mySQLDatabase.getCurrentDateTimeFunction(1))
nova chamada: assertEquals("Era esperado valores iguais, mas  'NOW(1)' é diferente de " + result859 + " <mySQLDatabase.getCurrentDateTimeFunction(1)>", "NOW(1)", mySQLDatabase.getCurrentDateTimeFunction(1))
chamada antiga: Assert.assertEquals("NOW(2)", mySQLDatabase.getCurrentDateTimeFunction(2))
nova chamada: assertEquals("Era esperado valores iguais, mas  'NOW(2)' é diferente de " + result860 + " <mySQLDatabase.getCurrentDateTimeFunction(2)>", "NOW(2)", mySQLDatabase.getCurrentDateTimeFunction(2))
chamada antiga: Assert.assertEquals("NOW(5)", mySQLDatabase.getCurrentDateTimeFunction(5))
nova chamada: assertEquals("Era esperado valores iguais, mas  'NOW(5)' é diferente de " + result861 + " <mySQLDatabase.getCurrentDateTimeFunction(5)>", "NOW(5)", mySQLDatabase.getCurrentDateTimeFunction(5))
chamada antiga: assertEquals("NOW()", mySQLDatabase.generateDatabaseFunctionValue(new DatabaseFunction("CURRENT_TIMESTAMP()")))
nova chamada: assertEquals("Era esperado valores iguais, mas  'NOW()' é diferente de " + result862 + " <mySQLDatabase.generateDatabaseFunctionValue(new DatabaseFunction('CURRENT_TIMESTAMP()'))>", "NOW()", mySQLDatabase.generateDatabaseFunctionValue(new DatabaseFunction("CURRENT_TIMESTAMP()")))
chamada antiga: assertNull(mySQLDatabase.generateDatabaseFunctionValue(new DatabaseFunction(null)))
nova chamada: assertNull("Era esperado nulo, mas " + result863 + " <mySQLDatabase.generateDatabaseFunctionValue(new DatabaseFunction(null))> não é nulo", mySQLDatabase.generateDatabaseFunctionValue(new DatabaseFunction(null)))
chamada antiga: assertEquals("NOW(2)", mySQLDatabase.generateDatabaseFunctionValue(new DatabaseFunction("CURRENT_TIMESTAMP(2)")))
nova chamada: assertEquals("Era esperado valores iguais, mas  'NOW(2)' é diferente de " + result864 + " <mySQLDatabase.generateDatabaseFunctionValue(new DatabaseFunction('CURRENT_TIMESTAMP(2)'))>", "NOW(2)", mySQLDatabase.generateDatabaseFunctionValue(new DatabaseFunction("CURRENT_TIMESTAMP(2)")))
chamada antiga: assertEquals("NOW(3)", mySQLDatabase.generateDatabaseFunctionValue(new DatabaseFunction("CURRENT_TIMESTAMP(3)")))
nova chamada: assertEquals("Era esperado valores iguais, mas  'NOW(3)' é diferente de " + result865 + " <mySQLDatabase.generateDatabaseFunctionValue(new DatabaseFunction('CURRENT_TIMESTAMP(3)'))>", "NOW(3)", mySQLDatabase.generateDatabaseFunctionValue(new DatabaseFunction("CURRENT_TIMESTAMP(3)")))
chamada antiga: assertEquals("NOW()", mySQLDatabase.generateDatabaseFunctionValue(new DatabaseFunction("CURRENT_TIMESTAMP(string)")))
nova chamada: assertEquals("Era esperado valores iguais, mas  'NOW()' é diferente de " + result866 + " <mySQLDatabase.generateDatabaseFunctionValue(new DatabaseFunction('CURRENT_TIMESTAMP(string)'))>", "NOW()", mySQLDatabase.generateDatabaseFunctionValue(new DatabaseFunction("CURRENT_TIMESTAMP(string)")))
chamada antiga: assertEquals("tableName", database.escapeTableName(null, null, "tableName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'tableName' é diferente de " + result867 + " <database.escapeTableName(null, null, 'tableName')>", "tableName", database.escapeTableName(null, null, "tableName"))
chamada antiga: assertEquals("catalogName.tableName", database.escapeTableName("catalogName", "schemaName", "tableName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'catalogName.tableName' é diferente de " + result868 + " <database.escapeTableName('catalogName', 'schemaName', 'tableName')>", "catalogName.tableName", database.escapeTableName("catalogName", "schemaName", "tableName"))
chamada antiga: Assert.assertEquals("\\\\0", database.escapeStringForDatabase("\\0"))
nova chamada: assertEquals("Era esperado valores iguais, mas  '\\\\0' é diferente de " + result869 + " <database.escapeStringForDatabase('\\0')>", "\\\\0", database.escapeStringForDatabase("\\0"))
chamada antiga: assertFalse(getDatabase().supportsInitiallyDeferrableColumns())
nova chamada: assertFalse("Era esperado falso, mas " + result870 + " <getDatabase().supportsInitiallyDeferrableColumns()> é verdadeiro ", getDatabase().supportsInitiallyDeferrableColumns())
chamada antiga: Assert.assertEquals("NOW()", getDatabase().getCurrentDateTimeFunction())
nova chamada: assertEquals("Era esperado valores iguais, mas  'NOW()' é diferente de " + result871 + " <getDatabase().getCurrentDateTimeFunction()>", "NOW()", getDatabase().getCurrentDateTimeFunction())
chamada antiga: assertEquals("org.mariadb.jdbc.Driver", this.database.getDefaultDriver("jdbc:mariadb://localhost/liquibase"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'org.mariadb.jdbc.Driver' é diferente de " + result872 + " <this.database.getDefaultDriver('jdbc:mariadb://localhost/liquibase')>", "org.mariadb.jdbc.Driver", this.database.getDefaultDriver("jdbc:mariadb://localhost/liquibase"))
chamada antiga: assertNull(this.database.getDefaultDriver("jdbc:db2://localhost;databaseName=liquibase"))
nova chamada: assertNull("Era esperado nulo, mas " + result873 + " <this.database.getDefaultDriver('jdbc:db2://localhost;databaseName=liquibase')> não é nulo", this.database.getDefaultDriver("jdbc:db2://localhost;databaseName=liquibase"))
chamada antiga: assertEquals("tableName", database.escapeTableName(null, null, "tableName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'tableName' é diferente de " + result874 + " <database.escapeTableName(null, null, 'tableName')>", "tableName", database.escapeTableName(null, null, "tableName"))
chamada antiga: assertEquals("catalogName.tableName", database.escapeTableName("catalogName", "schemaName", "tableName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'catalogName.tableName' é diferente de " + result875 + " <database.escapeTableName('catalogName', 'schemaName', 'tableName')>", "catalogName.tableName", database.escapeTableName("catalogName", "schemaName", "tableName"))
chamada antiga: Assert.assertEquals("\\\\0", database.escapeStringForDatabase("\\0"))
nova chamada: assertEquals("Era esperado valores iguais, mas  '\\\\0' é diferente de " + result876 + " <database.escapeStringForDatabase('\\0')>", "\\\\0", database.escapeStringForDatabase("\\0"))
chamada antiga: assertEquals("TIMESTAMP('2008-01-25 13:57:41')", new DerbyDatabase().getDateLiteral("2008-01-25 13:57:41"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'TIMESTAMP('2008-01-25 13:57:41')' é diferente de " + result877 + " <new DerbyDatabase().getDateLiteral('2008-01-25 13:57:41')>", "TIMESTAMP('2008-01-25 13:57:41')", new DerbyDatabase().getDateLiteral("2008-01-25 13:57:41"))
chamada antiga: assertEquals("TIMESTAMP('2008-01-25 13:57:41.300000')", new DerbyDatabase().getDateLiteral("2008-01-25 13:57:41.3"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'TIMESTAMP('2008-01-25 13:57:41.300000')' é diferente de " + result878 + " <new DerbyDatabase().getDateLiteral('2008-01-25 13:57:41.3')>", "TIMESTAMP('2008-01-25 13:57:41.300000')", new DerbyDatabase().getDateLiteral("2008-01-25 13:57:41.3"))
chamada antiga: assertEquals("TIMESTAMP('2008-01-25 13:57:41.340000')", new DerbyDatabase().getDateLiteral("2008-01-25 13:57:41.34"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'TIMESTAMP('2008-01-25 13:57:41.340000')' é diferente de " + result879 + " <new DerbyDatabase().getDateLiteral('2008-01-25 13:57:41.34')>", "TIMESTAMP('2008-01-25 13:57:41.340000')", new DerbyDatabase().getDateLiteral("2008-01-25 13:57:41.34"))
chamada antiga: assertEquals("TIMESTAMP('2008-01-25 13:57:41.347000')", new DerbyDatabase().getDateLiteral("2008-01-25 13:57:41.347"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'TIMESTAMP('2008-01-25 13:57:41.347000')' é diferente de " + result880 + " <new DerbyDatabase().getDateLiteral('2008-01-25 13:57:41.347')>", "TIMESTAMP('2008-01-25 13:57:41.347000')", new DerbyDatabase().getDateLiteral("2008-01-25 13:57:41.347"))
chamada antiga: assertEquals(12, database.getMaxFractionalDigitsForTimestamp())
nova chamada: assertEquals("Era esperado valores iguais, mas  12 é diferente de " + result881 + " <database.getMaxFractionalDigitsForTimestamp()>", 12, database.getMaxFractionalDigitsForTimestamp())
chamada antiga: assertEquals("tableName", database.escapeTableName(null, null, "tableName"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'tableName' é diferente de " + result882 + " <database.escapeTableName(null, null, 'tableName')>", "tableName", database.escapeTableName(null, null, "tableName"))
chamada antiga: assertEquals("DROP TABLE test_table;", mockExecutor.getRanSql().trim())
nova chamada: assertEquals("Era esperado valores iguais, mas  'DROP TABLE test_table;' é diferente de " + result883 + " <mockExecutor.getRanSql().trim()>", "DROP TABLE test_table;", mockExecutor.getRanSql().trim())
chamada antiga: assertEquals("DROP TABLE test_table SHOULD BE APPENDED;", mockExecutor.getRanSql().trim())
nova chamada: assertEquals("Era esperado valores iguais, mas  'DROP TABLE test_table SHOULD BE APPENDED;' é diferente de " + result884 + " <mockExecutor.getRanSql().trim()>", "DROP TABLE test_table SHOULD BE APPENDED;", mockExecutor.getRanSql().trim())
chamada antiga: assertEquals("DROP TABLE test_table;", mockExecutor.getRanSql().trim())
nova chamada: assertEquals("Era esperado valores iguais, mas  'DROP TABLE test_table;' é diferente de " + result885 + " <mockExecutor.getRanSql().trim()>", "DROP TABLE test_table;", mockExecutor.getRanSql().trim())
chamada antiga: assertEquals("DROP TABLE test_table SHOULD BE APPENDED;", mockExecutor.getRanSql().trim())
nova chamada: assertEquals("Era esperado valores iguais, mas  'DROP TABLE test_table SHOULD BE APPENDED;' é diferente de " + result886 + " <mockExecutor.getRanSql().trim()>", "DROP TABLE test_table SHOULD BE APPENDED;", mockExecutor.getRanSql().trim())
chamada antiga: assertTrue(database.isDateOnly("2018-01-01"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result887 + " <database.isDateOnly('2018-01-01')> é falso", database.isDateOnly("2018-01-01"))
chamada antiga: assertFalse(database.isDateOnly("18-01-01"))
nova chamada: assertFalse("Era esperado falso, mas " + result888 + " <database.isDateOnly('18-01-01')> é verdadeiro ", database.isDateOnly("18-01-01"))
chamada antiga: assertFalse(database.isDateOnly("2018-1-1"))
nova chamada: assertFalse("Era esperado falso, mas " + result889 + " <database.isDateOnly('2018-1-1')> é verdadeiro ", database.isDateOnly("2018-1-1"))
chamada antiga: assertTrue(database.isDateOnly("now"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result890 + " <database.isDateOnly('now')> é falso", database.isDateOnly("now"))
chamada antiga: assertTrue(database.isDateOnly("now+1year"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result891 + " <database.isDateOnly('now+1year')> é falso", database.isDateOnly("now+1year"))
chamada antiga: assertTrue(database.isDateOnly("now+1day"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result892 + " <database.isDateOnly('now+1day')> é falso", database.isDateOnly("now+1day"))
chamada antiga: assertTrue(database.isDateOnly("now-11hours"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result893 + " <database.isDateOnly('now-11hours')> é falso", database.isDateOnly("now-11hours"))
chamada antiga: assertTrue(database.isDateOnly("now+111minutes"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result894 + " <database.isDateOnly('now+111minutes')> é falso", database.isDateOnly("now+111minutes"))
chamada antiga: assertTrue(database.isDateOnly("today"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result895 + " <database.isDateOnly('today')> é falso", database.isDateOnly("today"))
chamada antiga: assertTrue(database.isDateOnly("today+2"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result896 + " <database.isDateOnly('today+2')> é falso", database.isDateOnly("today+2"))
chamada antiga: assertTrue(database.isDateOnly("today-1"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result897 + " <database.isDateOnly('today-1')> é falso", database.isDateOnly("today-1"))
chamada antiga: assertTrue(database.isDateOnly("TODAY"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result898 + " <database.isDateOnly('TODAY')> é falso", database.isDateOnly("TODAY"))
chamada antiga: assertFalse(database.isDateOnly("NO"))
nova chamada: assertFalse("Era esperado falso, mas " + result899 + " <database.isDateOnly('NO')> é verdadeiro ", database.isDateOnly("NO"))
chamada antiga: assertFalse(database.isDateOnly("TODA"))
nova chamada: assertFalse("Era esperado falso, mas " + result900 + " <database.isDateOnly('TODA')> é verdadeiro ", database.isDateOnly("TODA"))
chamada antiga: assertTrue(database.isDateTime("2018-01-01 10:11:12"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result901 + " <database.isDateTime('2018-01-01 10:11:12')> é falso", database.isDateTime("2018-01-01 10:11:12"))
chamada antiga: assertTrue(database.isDateTime("2018-01-01 10:11:12.2"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result902 + " <database.isDateTime('2018-01-01 10:11:12.2')> é falso", database.isDateTime("2018-01-01 10:11:12.2"))
chamada antiga: assertTrue(database.isDateTime("2018-01-01T10:11:12"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result903 + " <database.isDateTime('2018-01-01T10:11:12')> é falso", database.isDateTime("2018-01-01T10:11:12"))
chamada antiga: assertTrue(database.isDateTime("2018-01-01T10:11:12.2"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result904 + " <database.isDateTime('2018-01-01T10:11:12.2')> é falso", database.isDateTime("2018-01-01T10:11:12.2"))
chamada antiga: assertFalse(database.isDateTime("18-01-01T10:11:12.2"))
nova chamada: assertFalse("Era esperado falso, mas " + result905 + " <database.isDateTime('18-01-01T10:11:12.2')> é verdadeiro ", database.isDateTime("18-01-01T10:11:12.2"))
chamada antiga: assertFalse(database.isDateTime("2018-01-01"))
nova chamada: assertFalse("Era esperado falso, mas " + result906 + " <database.isDateTime('2018-01-01')> é verdadeiro ", database.isDateTime("2018-01-01"))
chamada antiga: assertTrue(database.isDateTime("now"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result907 + " <database.isDateTime('now')> é falso", database.isDateTime("now"))
chamada antiga: assertTrue(database.isDateTime("now+1year"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result908 + " <database.isDateTime('now+1year')> é falso", database.isDateTime("now+1year"))
chamada antiga: assertTrue(database.isDateTime("now+1day"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result909 + " <database.isDateTime('now+1day')> é falso", database.isDateTime("now+1day"))
chamada antiga: assertTrue(database.isDateTime("now-11hours"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result910 + " <database.isDateTime('now-11hours')> é falso", database.isDateTime("now-11hours"))
chamada antiga: assertTrue(database.isDateTime("now+111minutes"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result911 + " <database.isDateTime('now+111minutes')> é falso", database.isDateTime("now+111minutes"))
chamada antiga: assertTrue(database.isDateTime("today"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result912 + " <database.isDateTime('today')> é falso", database.isDateTime("today"))
chamada antiga: assertTrue(database.isDateTime("today+2"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result913 + " <database.isDateTime('today+2')> é falso", database.isDateTime("today+2"))
chamada antiga: assertTrue(database.isDateTime("today-2"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result914 + " <database.isDateTime('today-2')> é falso", database.isDateTime("today-2"))
chamada antiga: assertTrue(database.isDateTime("TODAY"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result915 + " <database.isDateTime('TODAY')> é falso", database.isDateTime("TODAY"))
chamada antiga: assertFalse(database.isDateTime("NO"))
nova chamada: assertFalse("Era esperado falso, mas " + result916 + " <database.isDateTime('NO')> é verdadeiro ", database.isDateTime("NO"))
chamada antiga: assertFalse(database.isDateTime("TODA"))
nova chamada: assertFalse("Era esperado falso, mas " + result917 + " <database.isDateTime('TODA')> é verdadeiro ", database.isDateTime("TODA"))
chamada antiga: assertTrue(database.isTimestamp("2018-01-01T10:11:12.2"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result918 + " <database.isTimestamp('2018-01-01T10:11:12.2')> é falso", database.isTimestamp("2018-01-01T10:11:12.2"))
chamada antiga: assertFalse(database.isTimestamp("2018-01-01T10:11:12"))
nova chamada: assertFalse("Era esperado falso, mas " + result919 + " <database.isTimestamp('2018-01-01T10:11:12')> é verdadeiro ", database.isTimestamp("2018-01-01T10:11:12"))
chamada antiga: assertFalse(database.isTimestamp("2018-01-01 10:11:12.2"))
nova chamada: assertFalse("Era esperado falso, mas " + result920 + " <database.isTimestamp('2018-01-01 10:11:12.2')> é verdadeiro ", database.isTimestamp("2018-01-01 10:11:12.2"))
chamada antiga: assertFalse(database.isTimestamp("18-01-01T10:11:12.2"))
nova chamada: assertFalse("Era esperado falso, mas " + result921 + " <database.isTimestamp('18-01-01T10:11:12.2')> é verdadeiro ", database.isTimestamp("18-01-01T10:11:12.2"))
chamada antiga: assertFalse(database.isTimestamp("2018-01-01"))
nova chamada: assertFalse("Era esperado falso, mas " + result922 + " <database.isTimestamp('2018-01-01')> é verdadeiro ", database.isTimestamp("2018-01-01"))
chamada antiga: assertTrue(database.isTimestamp("now"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result923 + " <database.isTimestamp('now')> é falso", database.isTimestamp("now"))
chamada antiga: assertTrue(database.isTimestamp("now+1year"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result924 + " <database.isTimestamp('now+1year')> é falso", database.isTimestamp("now+1year"))
chamada antiga: assertTrue(database.isTimestamp("now+1day"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result925 + " <database.isTimestamp('now+1day')> é falso", database.isTimestamp("now+1day"))
chamada antiga: assertTrue(database.isTimestamp("now-11hours"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result926 + " <database.isTimestamp('now-11hours')> é falso", database.isTimestamp("now-11hours"))
chamada antiga: assertTrue(database.isTimestamp("now+111minutes"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result927 + " <database.isTimestamp('now+111minutes')> é falso", database.isTimestamp("now+111minutes"))
chamada antiga: assertTrue(database.isTimestamp("today"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result928 + " <database.isTimestamp('today')> é falso", database.isTimestamp("today"))
chamada antiga: assertTrue(database.isTimestamp("today+2"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result929 + " <database.isTimestamp('today+2')> é falso", database.isTimestamp("today+2"))
chamada antiga: assertTrue(database.isTimestamp("today-2"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result930 + " <database.isTimestamp('today-2')> é falso", database.isTimestamp("today-2"))
chamada antiga: assertTrue(database.isTimestamp("TODAY"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result931 + " <database.isTimestamp('TODAY')> é falso", database.isTimestamp("TODAY"))
chamada antiga: assertFalse(database.isTimestamp("NO"))
nova chamada: assertFalse("Era esperado falso, mas " + result932 + " <database.isTimestamp('NO')> é verdadeiro ", database.isTimestamp("NO"))
chamada antiga: assertFalse(database.isTimestamp("TODA"))
nova chamada: assertFalse("Era esperado falso, mas " + result933 + " <database.isTimestamp('TODA')> é verdadeiro ", database.isTimestamp("TODA"))
chamada antiga: assertTrue(database.isTimeOnly("10:11:12"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result934 + " <database.isTimeOnly('10:11:12')> é falso", database.isTimeOnly("10:11:12"))
chamada antiga: assertFalse(database.isTimeOnly("2018-01-01 10:11:12"))
nova chamada: assertFalse("Era esperado falso, mas " + result935 + " <database.isTimeOnly('2018-01-01 10:11:12')> é verdadeiro ", database.isTimeOnly("2018-01-01 10:11:12"))
chamada antiga: assertFalse(database.isTimeOnly("2018-01-01T10:11:12"))
nova chamada: assertFalse("Era esperado falso, mas " + result936 + " <database.isTimeOnly('2018-01-01T10:11:12')> é verdadeiro ", database.isTimeOnly("2018-01-01T10:11:12"))
chamada antiga: assertFalse(database.isTimeOnly("10:11:12.2"))
nova chamada: assertFalse("Era esperado falso, mas " + result937 + " <database.isTimeOnly('10:11:12.2')> é verdadeiro ", database.isTimeOnly("10:11:12.2"))
chamada antiga: assertTrue(database.isTimeOnly("now"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result938 + " <database.isTimeOnly('now')> é falso", database.isTimeOnly("now"))
chamada antiga: assertTrue(database.isTimeOnly("now+1year"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result939 + " <database.isTimeOnly('now+1year')> é falso", database.isTimeOnly("now+1year"))
chamada antiga: assertTrue(database.isTimeOnly("now+1day"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result940 + " <database.isTimeOnly('now+1day')> é falso", database.isTimeOnly("now+1day"))
chamada antiga: assertTrue(database.isTimeOnly("now-11hours"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result941 + " <database.isTimeOnly('now-11hours')> é falso", database.isTimeOnly("now-11hours"))
chamada antiga: assertTrue(database.isTimeOnly("now+111minutes"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result942 + " <database.isTimeOnly('now+111minutes')> é falso", database.isTimeOnly("now+111minutes"))
chamada antiga: assertTrue(database.isTimeOnly("today"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result943 + " <database.isTimeOnly('today')> é falso", database.isTimeOnly("today"))
chamada antiga: assertTrue(database.isTimeOnly("today+2"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result944 + " <database.isTimeOnly('today+2')> é falso", database.isTimeOnly("today+2"))
chamada antiga: assertTrue(database.isTimeOnly("today-2"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result945 + " <database.isTimeOnly('today-2')> é falso", database.isTimeOnly("today-2"))
chamada antiga: assertTrue(database.isTimeOnly("TODAY"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result946 + " <database.isTimeOnly('TODAY')> é falso", database.isTimeOnly("TODAY"))
chamada antiga: assertFalse(database.isTimeOnly("NO"))
nova chamada: assertFalse("Era esperado falso, mas " + result947 + " <database.isTimeOnly('NO')> é verdadeiro ", database.isTimeOnly("NO"))
chamada antiga: assertFalse(database.isTimeOnly("TODA"))
nova chamada: assertFalse("Era esperado falso, mas " + result948 + " <database.isTimeOnly('TODA')> é verdadeiro ", database.isTimeOnly("TODA"))
chamada antiga: assertTrue(tableName.matches("[\\[\\\"`]?My Table  [\\]\\\"`]?"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result949 + " <tableName.matches('[\\[\\\'`]?My Table  [\\]\\\'`]?')> é falso", tableName.matches("[\\[\\\"`]?My Table  [\\]\\\"`]?"))
chamada antiga: assertEquals("MyTable", tableName)
nova chamada: assertEquals("Era esperado valores iguais, mas  'MyTable' é diferente de " + " tableName", "MyTable", tableName)
chamada antiga: assertTrue(tableName.matches("[\\[\\\"`]?My Table[\\]\\\"`]?"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result950 + " <tableName.matches('[\\[\\\'`]?My Table[\\]\\\'`]?')> é falso", tableName.matches("[\\[\\\"`]?My Table[\\]\\\"`]?"))
chamada antiga: assertNotNull(DatabaseFactory.getInstance())
nova chamada: assertNotNull("Era esperado não nulo, mas " + result951 + " <DatabaseFactory.getInstance()> é nulo", DatabaseFactory.getInstance())
chamada antiga: assertThat(dbConnection, notNullValue())
nova chamada: assertThat("Era esperado que  dbConnection satisfizesse a condição " + result952 + " <notNullValue()>, mas não a satisfez", dbConnection, notNullValue())
chamada antiga: assertThat(dbConnection, instanceOf(OfflineConnection.class))
nova chamada: assertThat("Era esperado que  dbConnection satisfizesse a condição " + result953 + " <instanceOf(OfflineConnection.class)>, mas não a satisfez", dbConnection, instanceOf(OfflineConnection.class))
chamada antiga: assertThat(dbConnection.getConnectionUserName(), equalTo(username))
nova chamada: assertThat("Era esperado que " + result954 + " <dbConnection.getConnectionUserName()> satisfizesse a condição " + result955 + " <equalTo(username)>, mas não a satisfez", dbConnection.getConnectionUserName(), equalTo(username))
chamada antiga: assertThat(dbConnection, notNullValue())
nova chamada: assertThat("Era esperado que  dbConnection satisfizesse a condição " + result956 + " <notNullValue()>, mas não a satisfez", dbConnection, notNullValue())
chamada antiga: assertThat(dbConnection.getDatabaseProductName(), equalTo("H2"))
nova chamada: assertThat("Era esperado que " + result957 + " <dbConnection.getDatabaseProductName()> satisfizesse a condição " + result958 + " <equalTo('H2')>, mas não a satisfez", dbConnection.getDatabaseProductName(), equalTo("H2"))
chamada antiga: assertThat(dbConnection, notNullValue())
nova chamada: assertThat("Era esperado que  dbConnection satisfizesse a condição " + result959 + " <notNullValue()>, mas não a satisfez", dbConnection, notNullValue())
chamada antiga: assertThat(dbConnection.getDatabaseProductName(), equalTo("H2"))
nova chamada: assertThat("Era esperado que " + result960 + " <dbConnection.getDatabaseProductName()> satisfizesse a condição " + result961 + " <equalTo('H2')>, mas não a satisfez", dbConnection.getDatabaseProductName(), equalTo("H2"))
chamada antiga: assertThat(dbConnection, notNullValue())
nova chamada: assertThat("Era esperado que  dbConnection satisfizesse a condição " + result962 + " <notNullValue()>, mas não a satisfez", dbConnection, notNullValue())
chamada antiga: assertThat(dbConnection.getDatabaseProductName(), equalTo("H2"))
nova chamada: assertThat("Era esperado que " + result963 + " <dbConnection.getDatabaseProductName()> satisfizesse a condição " + result964 + " <equalTo('H2')>, mas não a satisfez", dbConnection.getDatabaseProductName(), equalTo("H2"))
chamada antiga: assertThat(dbConnection, notNullValue())
nova chamada: assertThat("Era esperado que  dbConnection satisfizesse a condição " + result965 + " <notNullValue()>, mas não a satisfez", dbConnection, notNullValue())
chamada antiga: assertThat(dbConnection.getDatabaseProductName(), equalTo("H2"))
nova chamada: assertThat("Era esperado que " + result966 + " <dbConnection.getDatabaseProductName()> satisfizesse a condição " + result967 + " <equalTo('H2')>, mas não a satisfez", dbConnection.getDatabaseProductName(), equalTo("H2"))
chamada antiga: assertThat(dbConnection, notNullValue())
nova chamada: assertThat("Era esperado que  dbConnection satisfizesse a condição " + result968 + " <notNullValue()>, mas não a satisfez", dbConnection, notNullValue())
chamada antiga: assertThat(dbConnection.getDatabaseProductName(), equalTo("H2"))
nova chamada: assertThat("Era esperado que " + result969 + " <dbConnection.getDatabaseProductName()> satisfizesse a condição " + result970 + " <equalTo('H2')>, mas não a satisfez", dbConnection.getDatabaseProductName(), equalTo("H2"))
chamada antiga: assertTrue(liquibase.tagExists("Test Tag"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result971 + " <liquibase.tagExists('Test Tag')> é falso", liquibase.tagExists("Test Tag"))
chamada antiga: assertFalse(lockService.hasChangeLogLock())
nova chamada: assertFalse("Era esperado falso, mas " + result972 + " <lockService.hasChangeLogLock()> é verdadeiro ", lockService.hasChangeLogLock())
chamada antiga: assertTrue(tableSnapshotGenerator.has(new Table().setName("hyphen_context"), database))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result973 + " <tableSnapshotGenerator.has(new Table().setName('hyphen_context'), database)> é falso", tableSnapshotGenerator.has(new Table().setName("hyphen_context"), database))
chamada antiga: assertTrue(tableSnapshotGenerator.has(new Table().setName("camel_context"), database))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result974 + " <tableSnapshotGenerator.has(new Table().setName('camel_context'), database)> é falso", tableSnapshotGenerator.has(new Table().setName("camel_context"), database))
chamada antiga: assertTrue(tableSnapshotGenerator.has(new Table().setName("bar_id"), database))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result975 + " <tableSnapshotGenerator.has(new Table().setName('bar_id'), database)> é falso", tableSnapshotGenerator.has(new Table().setName("bar_id"), database))
chamada antiga: assertTrue(tableSnapshotGenerator.has(new Table().setName("foo_id"), database))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result976 + " <tableSnapshotGenerator.has(new Table().setName('foo_id'), database)> é falso", tableSnapshotGenerator.has(new Table().setName("foo_id"), database))
chamada antiga: assertTrue(liquibase.getDatabaseChangeLog().getChangeSets().stream().allMatch(changeSet -> changeSet.getDescription().contains(pathToSet)))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result977 + " <liquibase.getDatabaseChangeLog().getChangeSets().stream().allMatch(changeSet -> changeSet.getDescription().contains(pathToSet))> é falso", liquibase.getDatabaseChangeLog().getChangeSets().stream().allMatch(changeSet -> changeSet.getDescription().contains(pathToSet)))
chamada antiga: assertTrue(true)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", true)
chamada antiga: assertEquals(2, seenSequences.size())
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + result978 + " <seenSequences.size()>", 2, seenSequences.size())
chamada antiga: assertEquals("seq_owned", seenSequences.get(0))
nova chamada: assertEquals("Era esperado valores iguais, mas  'seq_owned' é diferente de " + result979 + " <seenSequences.get(0)>", "seq_owned", seenSequences.get(0))
chamada antiga: assertEquals("seq_unowned", seenSequences.get(1))
nova chamada: assertEquals("Era esperado valores iguais, mas  'seq_unowned' é diferente de " + result980 + " <seenSequences.get(1)>", "seq_unowned", seenSequences.get(1))
chamada antiga: assertTrue(sql.startsWith("CREATE TABLE primary_table_numero_uno (name CHAR(20));"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result981 + " <sql.startsWith('CREATE TABLE primary_table_numero_uno (name CHAR(20));')> é falso", sql.startsWith("CREATE TABLE primary_table_numero_uno (name CHAR(20));"))
chamada antiga: assertTrue(sql.endsWith("CREATE TABLE primary_table_numero_cinco(name CHAR(20));"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result982 + " <sql.endsWith('CREATE TABLE primary_table_numero_cinco(name CHAR(20));')> é falso", sql.endsWith("CREATE TABLE primary_table_numero_cinco(name CHAR(20));"))
chamada antiga: assertTrue(indexOwner.next())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result983 + " <indexOwner.next()> é falso", indexOwner.next())
chamada antiga: assertTrue(indexOwner.next())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result984 + " <indexOwner.next()> é falso", indexOwner.next())
chamada antiga: assertEquals("LBCAT2", owner)
nova chamada: assertEquals("Era esperado valores iguais, mas  'LBCAT2' é diferente de " + " owner", "LBCAT2", owner)
chamada antiga: assertEquals("LBCAT2", owner)
nova chamada: assertEquals("Era esperado valores iguais, mas  'LBCAT2' é diferente de " + " owner", "LBCAT2", owner)
chamada antiga: assertNotNull(defaultValue)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", defaultValue)
chamada antiga: assertEquals("0000-00-00 00:00:00", defaultValue)
nova chamada: assertEquals("Era esperado valores iguais, mas  '0000-00-00 00:00:00' é diferente de " + " defaultValue", "0000-00-00 00:00:00", defaultValue)
chamada antiga: assertNotNull(defaultValue)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", defaultValue)
chamada antiga: assertEquals("0000-00-00 00:00:00", defaultValue)
nova chamada: assertEquals("Era esperado valores iguais, mas  '0000-00-00 00:00:00' é diferente de " + " defaultValue", "0000-00-00 00:00:00", defaultValue)
chamada antiga: Assert.assertEquals(1, queryResult.size())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result985 + " <queryResult.size()>", 1, queryResult.size())
chamada antiga: Assert.assertEquals(insertedValue.toString(), queryResult.get(0).get(colName))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result986 + " <insertedValue.toString()> é diferente de " + result987 + " <queryResult.get(0).get(colName)>", insertedValue.toString(), queryResult.get(0).get(colName))
chamada antiga: Assert.assertEquals(insertedValue.toString(), queryResult.get(1).get(colName))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result988 + " <insertedValue.toString()> é diferente de " + result989 + " <queryResult.get(1).get(colName)>", insertedValue.toString(), queryResult.get(1).get(colName))
chamada antiga: assertEquals("a", columns.get(0).getName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'a' é diferente de " + result990 + " <columns.get(0).getName()>", "a", columns.get(0).getName())
chamada antiga: assertNull(columns.get(0).getDescending())
nova chamada: assertNull("Era esperado nulo, mas " + result991 + " <columns.get(0).getDescending()> não é nulo", columns.get(0).getDescending())
chamada antiga: assertEquals("b", columns.get(1).getName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'b' é diferente de " + result992 + " <columns.get(1).getName()>", "b", columns.get(1).getName())
chamada antiga: assertNull(columns.get(1).getDescending())
nova chamada: assertNull("Era esperado nulo, mas " + result993 + " <columns.get(1).getDescending()> não é nulo", columns.get(1).getDescending())
chamada antiga: assertEquals("c", columns.get(2).getName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'c' é diferente de " + result994 + " <columns.get(2).getName()>", "c", columns.get(2).getName())
chamada antiga: assertTrue(columns.get(2).getDescending())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result995 + " <columns.get(2).getDescending()> é falso", columns.get(2).getDescending())
Total asserts: 1461
Asserts sem descrição: 1269
Asserts com descrição: 192
Assertion Roulette: 1056

Após do refactor: 
Total asserts: 1461
Asserts sem descrição: 244
Asserts com descrição: 1217
Assertion Roulette: 182
