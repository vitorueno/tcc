
Projeto: /home/vitor-otto/opensource/avro-release-1.11.1

Antes do refactor: 
chamada antiga: assertEquals(jsonData, run(new DataFileReadTool(), sampleFile.getPath()))
nova chamada: assertEquals("Era esperado valores iguais, mas  jsonData é diferente de " + result0 + " <run(new DataFileReadTool(), sampleFile.getPath())>", jsonData, run(new DataFileReadTool(), sampleFile.getPath()))
chamada antiga: assertEquals(jsonData, run(new DataFileReadTool(), stdin, "-"))
nova chamada: assertEquals("Era esperado valores iguais, mas  jsonData é diferente de " + result1 + " <run(new DataFileReadTool(), stdin, '-')>", jsonData, run(new DataFileReadTool(), stdin, "-"))
chamada antiga: assertEquals(jsonData, run(new DataFileReadTool(), "--pretty", sampleFile.getPath()))
nova chamada: assertEquals("Era esperado valores iguais, mas  jsonData é diferente de " + result2 + " <run(new DataFileReadTool(), '--pretty', sampleFile.getPath())>", jsonData, run(new DataFileReadTool(), "--pretty", sampleFile.getPath()))
chamada antiga: assertEquals(jsonData, run(new DataFileReadTool(), "--reader-schema", "\"long\"", sampleFile.getPath()))
nova chamada: assertEquals("Era esperado valores iguais, mas  jsonData é diferente de " + result3 + " <run(new DataFileReadTool(), '--reader-schema', '\'long\'', sampleFile.getPath())>", jsonData, run(new DataFileReadTool(), "--reader-schema", "\"long\"", sampleFile.getPath()))
chamada antiga: assertEquals(jsonData, run(new DataFileReadTool(), "--reader-schema-file", readerSchemaFile.getPath(), sampleFile.getPath()))
nova chamada: assertEquals("Era esperado valores iguais, mas  jsonData é diferente de " + result4 + " <run(new DataFileReadTool(), '--reader-schema-file', readerSchemaFile.getPath(), sampleFile.getPath())>", jsonData, run(new DataFileReadTool(), "--reader-schema-file", readerSchemaFile.getPath(), sampleFile.getPath()))
chamada antiga: assertEquals(expectedJson, run(new DataFileReadTool(), "--head", sampleFile.getPath()))
nova chamada: assertEquals("Era esperado valores iguais, mas  expectedJson é diferente de " + result5 + " <run(new DataFileReadTool(), '--head', sampleFile.getPath())>", expectedJson, run(new DataFileReadTool(), "--head", sampleFile.getPath()))
chamada antiga: assertEquals(expectedJson, run(new DataFileReadTool(), "--head=3", sampleFile.getPath()))
nova chamada: assertEquals("Era esperado valores iguais, mas  expectedJson é diferente de " + result6 + " <run(new DataFileReadTool(), '--head=3', sampleFile.getPath())>", expectedJson, run(new DataFileReadTool(), "--head=3", sampleFile.getPath()))
chamada antiga: assertEquals(expectedJson, run(new DataFileReadTool(), "--head", "5", sampleFile.getPath()))
nova chamada: assertEquals("Era esperado valores iguais, mas  expectedJson é diferente de " + result7 + " <run(new DataFileReadTool(), '--head', '5', sampleFile.getPath())>", expectedJson, run(new DataFileReadTool(), "--head", "5", sampleFile.getPath()))
chamada antiga: assertEquals(jsonData, run(new DataFileReadTool(), "--head=3000000000", sampleFile.getPath()))
nova chamada: assertEquals("Era esperado valores iguais, mas  jsonData é diferente de " + result8 + " <run(new DataFileReadTool(), '--head=3000000000', sampleFile.getPath())>", jsonData, run(new DataFileReadTool(), "--head=3000000000", sampleFile.getPath()))
chamada antiga: assertEquals("\n", run(new DataFileReadTool(), "--head=0", sampleFile.getPath()))
nova chamada: assertEquals("Era esperado valores iguais, mas  '\n' é diferente de " + result9 + " <run(new DataFileReadTool(), '--head=0', sampleFile.getPath())>", "\n", run(new DataFileReadTool(), "--head=0", sampleFile.getPath()))
chamada antiga: assertEquals("\n", run(new DataFileReadTool(), "--head=-5", sampleFile.getPath()))
nova chamada: assertEquals("Era esperado valores iguais, mas  '\n' é diferente de " + result10 + " <run(new DataFileReadTool(), '--head=-5', sampleFile.getPath())>", "\n", run(new DataFileReadTool(), "--head=-5", sampleFile.getPath()))
chamada antiga: assertEquals(schema.toString() + "\n", run(new DataFileGetMetaTool(), sampleFile.getPath(), "--key", "avro.schema"))
nova chamada: assertEquals("Era esperado valores iguais, mas  schema.toString() + '\n' é diferente de " + result11 + " <run(new DataFileGetMetaTool(), sampleFile.getPath(), '--key', 'avro.schema')>", schema.toString() + "\n", run(new DataFileGetMetaTool(), sampleFile.getPath(), "--key", "avro.schema"))
chamada antiga: assertEquals(schema.toString() + "\n", run(new DataFileGetSchemaTool(), sampleFile.getPath()))
nova chamada: assertEquals("Era esperado valores iguais, mas  schema.toString() + '\n' é diferente de " + result12 + " <run(new DataFileGetSchemaTool(), sampleFile.getPath())>", schema.toString() + "\n", run(new DataFileGetSchemaTool(), sampleFile.getPath()))
chamada antiga: assertEquals(0, countRecords(outFile))
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + result13 + " <countRecords(outFile)>", 0, countRecords(outFile))
chamada antiga: assertEquals(5, countRecords(outFile))
nova chamada: assertEquals("Era esperado valores iguais, mas  5 é diferente de " + result14 + " <countRecords(outFile)>", 5, countRecords(outFile))
chamada antiga: assertTrue(baos.toString().contains("Compression codec (default: null)"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result15 + " <baos.toString().contains('Compression codec (default: null)')> é falso", baos.toString().contains("Compression codec (default: null)"))
chamada antiga: assertEquals(readFileAsString(protocol), readFileAsString(outfile))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result16 + " <readFileAsString(protocol)> é diferente de " + result17 + " <readFileAsString(outfile)>", readFileAsString(protocol), readFileAsString(outfile))
chamada antiga: assertEquals("Warning: Found documentation comment at line 19, column 1. Ignoring previous one at line 1, column 1: \"" + "Licensed to the Apache Software Foundation (ASF) under one\n" + "or more contributor license agreements.  See the NOTICE file\n" + "distributed with this work for additional information\n" + "regarding copyright ownership.  The ASF licenses this file\n" + "to you under the Apache License, Version 2.0 (the\n" + "\"License\"); you may not use this file except in compliance\n" + "with the License.  You may obtain a copy of the License at\n\n" + "    https://www.apache.org/licenses/LICENSE-2.0\n\n" + "Unless required by applicable law or agreed to in writing, software\n" + "distributed under the License is distributed on an \"AS IS\" BASIS,\n" + "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n" + "See the License for the specific language governing permissions and\n" + "limitations under the License." + "\"\nDid you mean to use a multiline comment ( /* ... */ ) instead?", warnings)
nova chamada: assertEquals("Era esperado valores iguais, mas  'Warning: Found documentation comment at line 19, column 1. Ignoring previous one at line 1, column 1: \'' + 'Licensed to the Apache Software Foundation (ASF) under one\n' + 'or more contributor license agreements.  See the NOTICE file\n' + 'distributed with this work for additional information\n' + 'regarding copyright ownership.  The ASF licenses this file\n' + 'to you under the Apache License, Version 2.0 (the\n' + '\'License\'); you may not use this file except in compliance\n' + 'with the License.  You may obtain a copy of the License at\n\n' + '    https://www.apache.org/licenses/LICENSE-2.0\n\n' + 'Unless required by applicable law or agreed to in writing, software\n' + 'distributed under the License is distributed on an \'AS IS\' BASIS,\n' + 'WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n' + 'See the License for the specific language governing permissions and\n' + 'limitations under the License.' + '\'\nDid you mean to use a multiline comment ( /* ... */ ) instead?' é diferente de " + " warnings", "Warning: Found documentation comment at line 19, column 1. Ignoring previous one at line 1, column 1: \"" + "Licensed to the Apache Software Foundation (ASF) under one\n" + "or more contributor license agreements.  See the NOTICE file\n" + "distributed with this work for additional information\n" + "regarding copyright ownership.  The ASF licenses this file\n" + "to you under the Apache License, Version 2.0 (the\n" + "\"License\"); you may not use this file except in compliance\n" + "with the License.  You may obtain a copy of the License at\n\n" + "    https://www.apache.org/licenses/LICENSE-2.0\n\n" + "Unless required by applicable law or agreed to in writing, software\n" + "distributed under the License is distributed on an \"AS IS\" BASIS,\n" + "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n" + "See the License for the specific language governing permissions and\n" + "limitations under the License." + "\"\nDid you mean to use a multiline comment ( /* ... */ ) instead?", warnings)
chamada antiga: assertTrue(err.toString().contains("Need count (--count)"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result18 + " <err.toString().contains('Need count (--count)')> é falso", err.toString().contains("Need count (--count)"))
chamada antiga: assertTrue(err.toString().contains("Compression codec (default: deflate)"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result19 + " <err.toString().contains('Compression codec (default: deflate)')> é falso", err.toString().contains("Compression codec (default: deflate)"))
chamada antiga: assertEquals(COUNT, i)
nova chamada: assertEquals("Era esperado valores iguais, mas  COUNT é diferente de " + " i", COUNT, i)
chamada antiga: assertEquals(WordCountUtil.COUNTS.size(), numWords)
nova chamada: assertEquals("Era esperado valores iguais, mas " + result20 + " <WordCountUtil.COUNTS.size()> é diferente de " + " numWords", WordCountUtil.COUNTS.size(), numWords)
chamada antiga: assertEquals(4, files.length)
nova chamada: assertEquals("Era esperado valores iguais, mas  4 é diferente de " + " files.length", 4, files.length)
chamada antiga: assertEquals("Warning: Found documentation comment at line 19, column 1. Ignoring previous one at line 1, column 1: \"" + "Licensed to the Apache Software Foundation (ASF) under one\n" + "or more contributor license agreements.  See the NOTICE file\n" + "distributed with this work for additional information\n" + "regarding copyright ownership.  The ASF licenses this file\n" + "to you under the Apache License, Version 2.0 (the\n" + "\"License\"); you may not use this file except in compliance\n" + "with the License.  You may obtain a copy of the License at\n\n" + "    https://www.apache.org/licenses/LICENSE-2.0\n\n" + "Unless required by applicable law or agreed to in writing, software\n" + "distributed under the License is distributed on an \"AS IS\" BASIS,\n" + "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n" + "See the License for the specific language governing permissions and\n" + "limitations under the License." + "\"\nDid you mean to use a multiline comment ( /* ... */ ) instead?", warnings)
nova chamada: assertEquals("Era esperado valores iguais, mas  'Warning: Found documentation comment at line 19, column 1. Ignoring previous one at line 1, column 1: \'' + 'Licensed to the Apache Software Foundation (ASF) under one\n' + 'or more contributor license agreements.  See the NOTICE file\n' + 'distributed with this work for additional information\n' + 'regarding copyright ownership.  The ASF licenses this file\n' + 'to you under the Apache License, Version 2.0 (the\n' + '\'License\'); you may not use this file except in compliance\n' + 'with the License.  You may obtain a copy of the License at\n\n' + '    https://www.apache.org/licenses/LICENSE-2.0\n\n' + 'Unless required by applicable law or agreed to in writing, software\n' + 'distributed under the License is distributed on an \'AS IS\' BASIS,\n' + 'WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n' + 'See the License for the specific language governing permissions and\n' + 'limitations under the License.' + '\'\nDid you mean to use a multiline comment ( /* ... */ ) instead?' é diferente de " + " warnings", "Warning: Found documentation comment at line 19, column 1. Ignoring previous one at line 1, column 1: \"" + "Licensed to the Apache Software Foundation (ASF) under one\n" + "or more contributor license agreements.  See the NOTICE file\n" + "distributed with this work for additional information\n" + "regarding copyright ownership.  The ASF licenses this file\n" + "to you under the Apache License, Version 2.0 (the\n" + "\"License\"); you may not use this file except in compliance\n" + "with the License.  You may obtain a copy of the License at\n\n" + "    https://www.apache.org/licenses/LICENSE-2.0\n\n" + "Unless required by applicable law or agreed to in writing, software\n" + "distributed under the License is distributed on an \"AS IS\" BASIS,\n" + "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n" + "See the License for the specific language governing permissions and\n" + "limitations under the License." + "\"\nDid you mean to use a multiline comment ( /* ... */ ) instead?", warnings)
chamada antiga: assertEquals(1, returnCode)
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + " returnCode", 1, returnCode)
chamada antiga: assertEquals(0, returnCode)
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + " returnCode", 0, returnCode)
chamada antiga: assertEquals("220" + System.lineSeparator(), out.toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  '220' + System.lineSeparator() é diferente de " + result21 + " <out.toString()>", "220" + System.lineSeparator(), out.toString())
chamada antiga: assertEquals(json, baos.toString(UTF8).replace("\r", ""))
nova chamada: assertEquals("Era esperado valores iguais, mas  json é diferente de " + result22 + " <baos.toString(UTF8).replace('\r', '')>", json, baos.toString(UTF8).replace("\r", ""))
chamada antiga: assertEquals(avro, baos.toString(UTF8))
nova chamada: assertEquals("Era esperado valores iguais, mas  avro é diferente de " + result23 + " <baos.toString(UTF8)>", avro, baos.toString(UTF8))
chamada antiga: Assert.assertTrue(baos.toString().contains("Compression codec (default: deflate)"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result24 + " <baos.toString().contains('Compression codec (default: deflate)')> é falso", baos.toString().contains("Compression codec (default: deflate)"))
chamada antiga: assertFalse(r.hasNext())
nova chamada: assertFalse("Era esperado falso, mas " + result25 + " <r.hasNext()> é verdadeiro ", r.hasNext())
chamada antiga: Assert.assertEquals(defaultOutputFile.length(), nullOutputFile.length())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result26 + " <defaultOutputFile.length()> é diferente de " + result27 + " <nullOutputFile.length()>", defaultOutputFile.length(), nullOutputFile.length())
chamada antiga: assertEquals(0, returnCode)
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + " returnCode", 0, returnCode)
chamada antiga: assertEquals(LIMIT_WITHIN_INPUT_BOUNDS, numRowsInFile(output))
nova chamada: assertEquals("Era esperado valores iguais, mas  LIMIT_WITHIN_INPUT_BOUNDS é diferente de " + result28 + " <numRowsInFile(output)>", LIMIT_WITHIN_INPUT_BOUNDS, numRowsInFile(output))
chamada antiga: assertEquals(0, returnCode)
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + " returnCode", 0, returnCode)
chamada antiga: assertEquals(LIMIT_WITHIN_INPUT_BOUNDS, numRowsInFile(output))
nova chamada: assertEquals("Era esperado valores iguais, mas  LIMIT_WITHIN_INPUT_BOUNDS é diferente de " + result29 + " <numRowsInFile(output)>", LIMIT_WITHIN_INPUT_BOUNDS, numRowsInFile(output))
chamada antiga: assertEquals(0, returnCode)
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + " returnCode", 0, returnCode)
chamada antiga: assertEquals(LIMIT_WITHIN_INPUT_BOUNDS, numRowsInFile(output))
nova chamada: assertEquals("Era esperado valores iguais, mas  LIMIT_WITHIN_INPUT_BOUNDS é diferente de " + result30 + " <numRowsInFile(output)>", LIMIT_WITHIN_INPUT_BOUNDS, numRowsInFile(output))
chamada antiga: assertEquals(0, returnCode)
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + " returnCode", 0, returnCode)
chamada antiga: assertEquals(ROWS_IN_INPUT_FILES - OFFSET, numRowsInFile(output))
nova chamada: assertEquals("Era esperado valores iguais, mas  ROWS_IN_INPUT_FILES - OFFSET é diferente de " + result31 + " <numRowsInFile(output)>", ROWS_IN_INPUT_FILES - OFFSET, numRowsInFile(output))
chamada antiga: assertEquals(0, returnCode)
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + " returnCode", 0, returnCode)
chamada antiga: assertEquals(0, returnCode)
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + " returnCode", 0, returnCode)
chamada antiga: assertEquals(0, returnCode)
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + " returnCode", 0, returnCode)
chamada antiga: assertEquals(0, returnCode)
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + " returnCode", 0, returnCode)
chamada antiga: assertEquals(0, returnCode)
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + " returnCode", 0, returnCode)
chamada antiga: assertTrue(baos1.toString("UTF-8").replace("\r", "").endsWith("hello\t{\"greeting\":\"Hi!\"}\n"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result32 + " <baos1.toString('UTF-8').replace('\r', '').endsWith('hello\t{\'greeting\':\'Hi!\'}\n')> é falso", baos1.toString("UTF-8").replace("\r", "").endsWith("hello\t{\"greeting\":\"Hi!\"}\n"))
chamada antiga: assertEquals("\"Hello!\"\n", baos2.toString("UTF-8").replace("\r", ""))
nova chamada: assertEquals("Era esperado valores iguais, mas  '\'Hello!\'\n' é diferente de " + result33 + " <baos2.toString('UTF-8').replace('\r', '')>", "\"Hello!\"\n", baos2.toString("UTF-8").replace("\r", ""))
chamada antiga: Assert.assertEquals(String.format("zstandard[%d]", level), codec.toString())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result34 + " <String.format('zstandard[%d]', level)> é diferente de " + result35 + " <codec.toString()>", String.format("zstandard[%d]", level), codec.toString())
chamada antiga: assertEquals(0, returnCode)
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + " returnCode", 0, returnCode)
chamada antiga: assertEquals(ROWS_IN_INPUT_FILES * 3, numRowsInFile(output))
nova chamada: assertEquals("Era esperado valores iguais, mas  ROWS_IN_INPUT_FILES * 3 é diferente de " + result36 + " <numRowsInFile(output)>", ROWS_IN_INPUT_FILES * 3, numRowsInFile(output))
chamada antiga: assertEquals(0, returnCode)
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + " returnCode", 0, returnCode)
chamada antiga: assertEquals(ROWS_IN_INPUT_FILES * 3, numRowsInFile(output))
nova chamada: assertEquals("Era esperado valores iguais, mas  ROWS_IN_INPUT_FILES * 3 é diferente de " + result37 + " <numRowsInFile(output)>", ROWS_IN_INPUT_FILES * 3, numRowsInFile(output))
chamada antiga: assertEquals(0, returnCode)
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + " returnCode", 0, returnCode)
chamada antiga: assertEquals(ROWS_IN_INPUT_FILES * 3, numRowsInFile(output))
nova chamada: assertEquals("Era esperado valores iguais, mas  ROWS_IN_INPUT_FILES * 3 é diferente de " + result38 + " <numRowsInFile(output)>", ROWS_IN_INPUT_FILES * 3, numRowsInFile(output))
chamada antiga: assertEquals(getCodec(input1).getClass(), getCodec(output).getClass())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result39 + " <getCodec(input1).getClass()> é diferente de " + result40 + " <getCodec(output).getClass()>", getCodec(input1).getClass(), getCodec(output).getClass())
chamada antiga: assertEquals(1, returnCode)
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + " returnCode", 1, returnCode)
chamada antiga: assertEquals(2, returnCode)
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + " returnCode", 2, returnCode)
chamada antiga: assertEquals(3, returnCode)
nova chamada: assertEquals("Era esperado valores iguais, mas  3 é diferente de " + " returnCode", 3, returnCode)
chamada antiga: assertEquals(0, returnCode)
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + " returnCode", 0, returnCode)
chamada antiga: Assert.assertEquals(0, in.tell())
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + result41 + " <in.tell()>", 0, in.tell())
chamada antiga: Assert.assertEquals(0, in.length())
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + result42 + " <in.length()>", 0, in.length())
chamada antiga: Assert.assertEquals(1, bytes.length)
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + " bytes.length", 1, bytes.length)
chamada antiga: Assert.assertEquals(0, bytes[0])
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + " bytes[0]", 0, bytes[0])
chamada antiga: Assert.assertEquals(0, in.readInt())
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + result43 + " <in.readInt()>", 0, in.readInt())
chamada antiga: Assert.assertEquals(sentinel, in.readLong())
nova chamada: assertEquals("Era esperado valores iguais, mas  sentinel é diferente de " + result44 + " <in.readLong()>", sentinel, in.readLong())
chamada antiga: Assert.assertEquals(sentinel, in.readLong())
nova chamada: assertEquals("Era esperado valores iguais, mas  sentinel é diferente de " + result45 + " <in.readLong()>", sentinel, in.readLong())
chamada antiga: Assert.assertEquals(sentinel, in.readLong())
nova chamada: assertEquals("Era esperado valores iguais, mas  sentinel é diferente de " + result46 + " <in.readLong()>", sentinel, in.readLong())
chamada antiga: Assert.assertEquals(sentinel, in.readLong())
nova chamada: assertEquals("Era esperado valores iguais, mas  sentinel é diferente de " + result47 + " <in.readLong()>", sentinel, in.readLong())
chamada antiga: Assert.assertEquals(sentinel, in.readLong())
nova chamada: assertEquals("Era esperado valores iguais, mas  sentinel é diferente de " + result48 + " <in.readLong()>", sentinel, in.readLong())
chamada antiga: Assert.assertEquals(sentinel, in.readLong())
nova chamada: assertEquals("Era esperado valores iguais, mas  sentinel é diferente de " + result49 + " <in.readLong()>", sentinel, in.readLong())
chamada antiga: Assert.assertEquals(sentinel, in.readLong())
nova chamada: assertEquals("Era esperado valores iguais, mas  sentinel é diferente de " + result50 + " <in.readLong()>", sentinel, in.readLong())
chamada antiga: Assert.assertEquals(sentinel, in.readLong())
nova chamada: assertEquals("Era esperado valores iguais, mas  sentinel é diferente de " + result51 + " <in.readLong()>", sentinel, in.readLong())
chamada antiga: Assert.assertEquals(sentinel, in.readLong())
nova chamada: assertEquals("Era esperado valores iguais, mas  sentinel é diferente de " + result52 + " <in.readLong()>", sentinel, in.readLong())
chamada antiga: Assert.assertEquals(sentinel, in.readLong())
nova chamada: assertEquals("Era esperado valores iguais, mas  sentinel é diferente de " + result53 + " <in.readLong()>", sentinel, in.readLong())
chamada antiga: Assert.assertEquals(sentinel, in.readLong())
nova chamada: assertEquals("Era esperado valores iguais, mas  sentinel é diferente de " + result54 + " <in.readLong()>", sentinel, in.readLong())
chamada antiga: Assert.assertEquals(0, in.getRowCount())
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + result55 + " <in.getRowCount()>", 0, in.getRowCount())
chamada antiga: Assert.assertEquals(0, in.getColumnCount())
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + result56 + " <in.getColumnCount()>", 0, in.getColumnCount())
chamada antiga: Assert.assertEquals(0, in.getRowCount())
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + result57 + " <in.getRowCount()>", 0, in.getRowCount())
chamada antiga: Assert.assertEquals(1, in.getColumnCount())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result58 + " <in.getColumnCount()>", 1, in.getColumnCount())
chamada antiga: Assert.assertEquals(COUNT, in.getRowCount())
nova chamada: assertEquals("Era esperado valores iguais, mas  COUNT é diferente de " + result59 + " <in.getRowCount()>", COUNT, in.getRowCount())
chamada antiga: Assert.assertEquals(1, in.getColumnCount())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result60 + " <in.getColumnCount()>", 1, in.getColumnCount())
chamada antiga: Assert.assertEquals(COUNT, count)
nova chamada: assertEquals("Era esperado valores iguais, mas  COUNT é diferente de " + " count", COUNT, count)
chamada antiga: Assert.assertEquals(COUNT, in.getRowCount())
nova chamada: assertEquals("Era esperado valores iguais, mas  COUNT é diferente de " + result61 + " <in.getRowCount()>", COUNT, in.getRowCount())
chamada antiga: Assert.assertEquals(1, in.getColumnCount())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result62 + " <in.getColumnCount()>", 1, in.getColumnCount())
chamada antiga: Assert.assertEquals(COUNT, count)
nova chamada: assertEquals("Era esperado valores iguais, mas  COUNT é diferente de " + " count", COUNT, count)
chamada antiga: Assert.assertEquals(COUNT, in.getRowCount())
nova chamada: assertEquals("Era esperado valores iguais, mas  COUNT é diferente de " + result63 + " <in.getRowCount()>", COUNT, in.getRowCount())
chamada antiga: Assert.assertEquals(1, in.getColumnCount())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result64 + " <in.getColumnCount()>", 1, in.getColumnCount())
chamada antiga: Assert.assertEquals(COUNT, count)
nova chamada: assertEquals("Era esperado valores iguais, mas  COUNT é diferente de " + " count", COUNT, count)
chamada antiga: Assert.assertEquals(COUNT, in.getRowCount())
nova chamada: assertEquals("Era esperado valores iguais, mas  COUNT é diferente de " + result65 + " <in.getRowCount()>", COUNT, in.getRowCount())
chamada antiga: Assert.assertEquals(2, in.getColumnCount())
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + result66 + " <in.getColumnCount()>", 2, in.getColumnCount())
chamada antiga: Assert.assertEquals(COUNT, count)
nova chamada: assertEquals("Era esperado valores iguais, mas  COUNT é diferente de " + " count", COUNT, count)
chamada antiga: Assert.assertEquals(0, min)
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + " min", 0, min)
chamada antiga: Assert.assertTrue(max > 1024 * 32)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", max > 1024 * 32)
chamada antiga: Assert.assertTrue(average > 16.0f)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", average > 16.0f)
chamada antiga: Assert.assertTrue(average < 64.0f)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", average < 64.0f)
chamada antiga: assertTrue(compressedSize > 0)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", compressedSize > 0)
chamada antiga: assertTrue(compressedSize < inputSize || codec.equals("null"))
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", compressedSize < inputSize || codec.equals("null"))
chamada antiga: assertEquals(decompressedBuffer, inputByteBuffer)
nova chamada: assertEquals("Era esperado valores iguais, mas  decompressedBuffer é diferente de " + " inputByteBuffer", decompressedBuffer, inputByteBuffer)
chamada antiga: assertTrue(compressedSize > 0)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", compressedSize > 0)
chamada antiga: assertEquals(decompressedBuffer, inputByteBuffer)
nova chamada: assertEquals("Era esperado valores iguais, mas  decompressedBuffer é diferente de " + " inputByteBuffer", decompressedBuffer, inputByteBuffer)
chamada antiga: assertEquals(WordCountUtil.TOTAL, total)
nova chamada: assertEquals("Era esperado valores iguais, mas  WordCountUtil.TOTAL é diferente de " + " total", WordCountUtil.TOTAL, total)
chamada antiga: assertEquals(COUNTS.size(), numWords)
nova chamada: assertEquals("Era esperado valores iguais, mas " + result67 + " <COUNTS.size()> é diferente de " + " numWords", COUNTS.size(), numWords)
chamada antiga: assertEquals(COUNTS.size(), numWords)
nova chamada: assertEquals("Era esperado valores iguais, mas " + result68 + " <COUNTS.size()> é diferente de " + " numWords", COUNTS.size(), numWords)
chamada antiga: assertEquals(expected.length, shredded.length)
nova chamada: assertEquals("Era esperado valores iguais, mas  expected.length é diferente de " + " shredded.length", expected.length, shredded.length)
chamada antiga: assertEquals(WordCountUtil.TOTAL, total)
nova chamada: assertEquals("Era esperado valores iguais, mas  WordCountUtil.TOTAL é diferente de " + " total", WordCountUtil.TOTAL, total)
chamada antiga: assertEquals(WordCountUtil.TOTAL, total)
nova chamada: assertEquals("Era esperado valores iguais, mas  WordCountUtil.TOTAL é diferente de " + " total", WordCountUtil.TOTAL, total)
chamada antiga: assertTrue(metadata.get("test1") != null)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", metadata.get("test1") != null)
chamada antiga: assertTrue(new String(metadata.get("test1")).equals("1"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result69 + " <new String(metadata.get('test1')).equals('1')> é falso", new String(metadata.get("test1")).equals("1"))
chamada antiga: assertTrue(metadata.get("test2") != null)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", metadata.get("test2") != null)
chamada antiga: assertTrue(new String(metadata.get("test2")).equals("2"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result70 + " <new String(metadata.get('test2')).equals('2')> é falso", new String(metadata.get("test2")).equals("2"))
chamada antiga: assertTrue(metadata.get("test5") != null)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", metadata.get("test5") != null)
chamada antiga: assertTrue(new String(metadata.get("test5")).equals("5"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result71 + " <new String(metadata.get('test5')).equals('5')> é falso", new String(metadata.get("test5")).equals("5"))
chamada antiga: assertTrue(metadata.get("test3") == null)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", metadata.get("test3") == null)
chamada antiga: assertTrue(metadata.get("test4") == null)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", metadata.get("test4") == null)
chamada antiga: assertEquals(test, o)
nova chamada: assertEquals("Era esperado valores iguais, mas  test é diferente de " + " o", test, o)
chamada antiga: Assert.assertEquals(src, dst)
nova chamada: assertEquals("Era esperado valores iguais, mas  src é diferente de " + " dst", src, dst)
chamada antiga: Assert.assertEquals(expected, dst)
nova chamada: assertEquals("Era esperado valores iguais, mas  expected é diferente de " + " dst", expected, dst)
chamada antiga: assertTrue(compilesWithoutError)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", compilesWithoutError)
chamada antiga: assertTrue(new File(OUTPUT_DIR.getRoot(), "SimpleRecord.java").exists())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result72 + " <new File(OUTPUT_DIR.getRoot(), 'SimpleRecord.java').exists()> é falso", new File(OUTPUT_DIR.getRoot(), "SimpleRecord.java").exists())
chamada antiga: assertTrue(compiler.publicFields())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result73 + " <compiler.publicFields()> é falso", compiler.publicFields())
chamada antiga: assertFalse(compiler.privateFields())
nova chamada: assertFalse("Era esperado falso, mas " + result74 + " <compiler.privateFields()> é verdadeiro ", compiler.privateFields())
chamada antiga: assertTrue(this.outputFile.exists())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result75 + " <this.outputFile.exists()> é falso", this.outputFile.exists())
chamada antiga: assertTrue(this.outputFile.exists())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result76 + " <this.outputFile.exists()> é falso", this.outputFile.exists())
chamada antiga: assertTrue(foundAllArgsConstructor)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", foundAllArgsConstructor)
chamada antiga: assertTrue(new SpecificCompiler(validSchema1).compile().size() > 0)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", new SpecificCompiler(validSchema1).compile().size() > 0)
chamada antiga: assertTrue(new SpecificCompiler(validSchema2).compile().size() > 0)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", new SpecificCompiler(validSchema2).compile().size() > 0)
chamada antiga: assertTrue(new SpecificCompiler(validSchema3).compile().size() > 0)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", new SpecificCompiler(validSchema3).compile().size() > 0)
chamada antiga: assertTrue(new SpecificCompiler(validSchema4).compile().size() > 0)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", new SpecificCompiler(validSchema4).compile().size() > 0)
chamada antiga: assertFalse(compiler.publicFields())
nova chamada: assertFalse("Era esperado falso, mas " + result77 + " <compiler.publicFields()> é verdadeiro ", compiler.publicFields())
chamada antiga: assertTrue(compiler.privateFields())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result78 + " <compiler.privateFields()> é falso", compiler.privateFields())
chamada antiga: assertTrue(this.outputFile.exists())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result79 + " <this.outputFile.exists()> é falso", this.outputFile.exists())
chamada antiga: assertTrue(compiler.isCreateSetters())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result80 + " <compiler.isCreateSetters()> é falso", compiler.isCreateSetters())
chamada antiga: assertTrue(this.outputFile.exists())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result81 + " <this.outputFile.exists()> é falso", this.outputFile.exists())
chamada antiga: assertFalse(compiler.isCreateSetters())
nova chamada: assertFalse("Era esperado falso, mas " + result82 + " <compiler.isCreateSetters()> é verdadeiro ", compiler.isCreateSetters())
chamada antiga: assertTrue(this.outputFile.exists())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result83 + " <this.outputFile.exists()> é falso", this.outputFile.exists())
chamada antiga: Assert.assertEquals(1, usedCustomLogicalTypeFactories.size())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result84 + " <usedCustomLogicalTypeFactories.size()>", 1, usedCustomLogicalTypeFactories.size())
chamada antiga: Assert.assertEquals("string-custom", entry.getKey())
nova chamada: assertEquals("Era esperado valores iguais, mas  'string-custom' é diferente de " + result85 + " <entry.getKey()>", "string-custom", entry.getKey())
chamada antiga: Assert.assertEquals("org.apache.avro.compiler.specific.TestSpecificCompiler.StringCustomLogicalTypeFactory", entry.getValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  'org.apache.avro.compiler.specific.TestSpecificCompiler.StringCustomLogicalTypeFactory' é diferente de " + result86 + " <entry.getValue()>", "org.apache.avro.compiler.specific.TestSpecificCompiler.StringCustomLogicalTypeFactory", entry.getValue())
chamada antiga: Assert.assertEquals(0, usedCustomLogicalTypeFactories.size())
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + result87 + " <usedCustomLogicalTypeFactories.size()>", 0, usedCustomLogicalTypeFactories.size())
chamada antiga: Assert.assertEquals(1, usedConversionClasses.size())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result88 + " <usedConversionClasses.size()>", 1, usedConversionClasses.size())
chamada antiga: Assert.assertEquals("org.apache.avro.Conversions.DecimalConversion", usedConversionClasses.iterator().next())
nova chamada: assertEquals("Era esperado valores iguais, mas  'org.apache.avro.Conversions.DecimalConversion' é diferente de " + result89 + " <usedConversionClasses.iterator().next()>", "org.apache.avro.Conversions.DecimalConversion", usedConversionClasses.iterator().next())
chamada antiga: Assert.assertEquals(2, conversions.size())
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + result90 + " <conversions.size()>", 2, conversions.size())
chamada antiga: Assert.assertEquals(1, usedConversionClasses.size())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result91 + " <usedConversionClasses.size()>", 1, usedConversionClasses.size())
chamada antiga: Assert.assertEquals("org.apache.avro.data.TimeConversions.DateConversion", usedConversionClasses.iterator().next())
nova chamada: assertEquals("Era esperado valores iguais, mas  'org.apache.avro.data.TimeConversions.DateConversion' é diferente de " + result92 + " <usedConversionClasses.iterator().next()>", "org.apache.avro.data.TimeConversions.DateConversion", usedConversionClasses.iterator().next())
chamada antiga: Assert.assertEquals(1, usedConversionClasses.size())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result93 + " <usedConversionClasses.size()>", 1, usedConversionClasses.size())
chamada antiga: Assert.assertEquals("org.apache.avro.data.TimeConversions.DateConversion", usedConversionClasses.iterator().next())
nova chamada: assertEquals("Era esperado valores iguais, mas  'org.apache.avro.data.TimeConversions.DateConversion' é diferente de " + result94 + " <usedConversionClasses.iterator().next()>", "org.apache.avro.data.TimeConversions.DateConversion", usedConversionClasses.iterator().next())
chamada antiga: Assert.assertEquals(1, usedConversionClasses.size())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result95 + " <usedConversionClasses.size()>", 1, usedConversionClasses.size())
chamada antiga: Assert.assertEquals("org.apache.avro.data.TimeConversions.DateConversion", usedConversionClasses.iterator().next())
nova chamada: assertEquals("Era esperado valores iguais, mas  'org.apache.avro.data.TimeConversions.DateConversion' é diferente de " + result96 + " <usedConversionClasses.iterator().next()>", "org.apache.avro.data.TimeConversions.DateConversion", usedConversionClasses.iterator().next())
chamada antiga: Assert.assertEquals(1, usedConversionClasses.size())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result97 + " <usedConversionClasses.size()>", 1, usedConversionClasses.size())
chamada antiga: Assert.assertEquals("org.apache.avro.data.TimeConversions.DateConversion", usedConversionClasses.iterator().next())
nova chamada: assertEquals("Era esperado valores iguais, mas  'org.apache.avro.data.TimeConversions.DateConversion' é diferente de " + result98 + " <usedConversionClasses.iterator().next()>", "org.apache.avro.data.TimeConversions.DateConversion", usedConversionClasses.iterator().next())
chamada antiga: Assert.assertEquals(1, usedConversionClasses.size())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result99 + " <usedConversionClasses.size()>", 1, usedConversionClasses.size())
chamada antiga: Assert.assertEquals("org.apache.avro.data.TimeConversions.DateConversion", usedConversionClasses.iterator().next())
nova chamada: assertEquals("Era esperado valores iguais, mas  'org.apache.avro.data.TimeConversions.DateConversion' é diferente de " + result100 + " <usedConversionClasses.iterator().next()>", "org.apache.avro.data.TimeConversions.DateConversion", usedConversionClasses.iterator().next())
chamada antiga: assertTrue(this.outputFile.exists())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result101 + " <this.outputFile.exists()> é falso", this.outputFile.exists())
chamada antiga: assertTrue(this.outputFile.exists())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result102 + " <this.outputFile.exists()> é falso", this.outputFile.exists())
chamada antiga: assertEquals(9, optionalFound)
nova chamada: assertEquals("Era esperado valores iguais, mas  9 é diferente de " + " optionalFound", 9, optionalFound)
chamada antiga: assertTrue(this.outputFile.exists())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result103 + " <this.outputFile.exists()> é falso", this.outputFile.exists())
chamada antiga: assertEquals(5, optionalFound)
nova chamada: assertEquals("Era esperado valores iguais, mas  5 é diferente de " + " optionalFound", 5, optionalFound)
chamada antiga: assertTrue(this.outputFile.exists())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result104 + " <this.outputFile.exists()> é falso", this.outputFile.exists())
chamada antiga: assertEquals(17, optionalFound)
nova chamada: assertEquals("Era esperado valores iguais, mas  17 é diferente de " + " optionalFound", 17, optionalFound)
chamada antiga: assertTrue(this.outputFile.exists())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result105 + " <this.outputFile.exists()> é falso", this.outputFile.exists())
chamada antiga: assertTrue(this.outputFile.exists())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result106 + " <this.outputFile.exists()> é falso", this.outputFile.exists())
chamada antiga: assertEquals(1, itWorksFound)
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + " itWorksFound", 1, itWorksFound)
chamada antiga: assertTrue(this.outputFile.exists())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result107 + " <this.outputFile.exists()> é falso", this.outputFile.exists())
chamada antiga: Assert.assertEquals(SchemaCompatibility.SchemaCompatibilityType.COMPATIBLE, compat)
nova chamada: assertEquals("Era esperado valores iguais, mas  SchemaCompatibility.SchemaCompatibilityType.COMPATIBLE é diferente de " + " compat", SchemaCompatibility.SchemaCompatibilityType.COMPATIBLE, compat)
chamada antiga: Assert.assertEquals(SchemaCompatibility.SchemaCompatibilityType.COMPATIBLE, compat)
nova chamada: assertEquals("Era esperado valores iguais, mas  SchemaCompatibility.SchemaCompatibilityType.COMPATIBLE é diferente de " + " compat", SchemaCompatibility.SchemaCompatibilityType.COMPATIBLE, compat)
chamada antiga: Assert.assertEquals("caca", trimmed.getDoc())
nova chamada: assertEquals("Era esperado valores iguais, mas  'caca' é diferente de " + result108 + " <trimmed.getDoc()>", "caca", trimmed.getDoc())
chamada antiga: Assert.assertEquals(SchemaCompatibility.SchemaCompatibilityType.COMPATIBLE, compat)
nova chamada: assertEquals("Era esperado valores iguais, mas  SchemaCompatibility.SchemaCompatibilityType.COMPATIBLE é diferente de " + " compat", SchemaCompatibility.SchemaCompatibilityType.COMPATIBLE, compat)
chamada antiga: Assert.assertEquals(SchemaCompatibility.SchemaCompatibilityType.COMPATIBLE, compat)
nova chamada: assertEquals("Era esperado valores iguais, mas  SchemaCompatibility.SchemaCompatibilityType.COMPATIBLE é diferente de " + " compat", SchemaCompatibility.SchemaCompatibilityType.COMPATIBLE, compat)
chamada antiga: Assert.assertEquals("N", Schemas.getJavaClassName(new Schema.Parser().parse("{\"type\": \"fixed\", \"name\": \"N\", \"size\": 10}")))
nova chamada: assertEquals("Era esperado valores iguais, mas  'N' é diferente de " + result109 + " <Schemas.getJavaClassName(new Schema.Parser().parse('{\'type\': \'fixed\', \'name\': \'N\', \'size\': 10}'))>", "N", Schemas.getJavaClassName(new Schema.Parser().parse("{\"type\": \"fixed\", \"name\": \"N\", \"size\": 10}")))
chamada antiga: Assert.assertEquals("N", Schemas.getJavaClassName(new Schema.Parser().parse("{\"type\": \"fixed\", \"name\": \"N\", \"size\": 10, \"namespace\": \"\"}")))
nova chamada: assertEquals("Era esperado valores iguais, mas  'N' é diferente de " + result110 + " <Schemas.getJavaClassName(new Schema.Parser().parse('{\'type\': \'fixed\', \'name\': \'N\', \'size\': 10, \'namespace\': \'\'}'))>", "N", Schemas.getJavaClassName(new Schema.Parser().parse("{\"type\": \"fixed\", \"name\": \"N\", \"size\": 10, \"namespace\": \"\"}")))
chamada antiga: Assert.assertEquals("com.example.N", Schemas.getJavaClassName(new Schema.Parser().parse("{\"type\": \"fixed\", \"name\": \"N\", \"size\": 10, \"namespace\": \"com.example\"}")))
nova chamada: assertEquals("Era esperado valores iguais, mas  'com.example.N' é diferente de " + result111 + " <Schemas.getJavaClassName(new Schema.Parser().parse('{\'type\': \'fixed\', \'name\': \'N\', \'size\': 10, \'namespace\': \'com.example\'}'))>", "com.example.N", Schemas.getJavaClassName(new Schema.Parser().parse("{\"type\": \"fixed\", \"name\": \"N\", \"size\": 10, \"namespace\": \"com.example\"}")))
chamada antiga: Assert.assertEquals("t1.", Schemas.visit(new Schema.Parser().parse(s1), new TestVisitor()))
nova chamada: assertEquals("Era esperado valores iguais, mas  't1.' é diferente de " + result112 + " <Schemas.visit(new Schema.Parser().parse(s1), new TestVisitor())>", "t1.", Schemas.visit(new Schema.Parser().parse(s1), new TestVisitor()))
chamada antiga: Assert.assertEquals("c1.\"int\"!", Schemas.visit(new Schema.Parser().parse(s2), new TestVisitor()))
nova chamada: assertEquals("Era esperado valores iguais, mas  'c1.\'int\'!' é diferente de " + result113 + " <Schemas.visit(new Schema.Parser().parse(s2), new TestVisitor())>", "c1.\"int\"!", Schemas.visit(new Schema.Parser().parse(s2), new TestVisitor()))
chamada antiga: Assert.assertEquals("ss1.", Schemas.visit(new Schema.Parser().parse(s3), new TestVisitor()))
nova chamada: assertEquals("Era esperado valores iguais, mas  'ss1.' é diferente de " + result114 + " <Schemas.visit(new Schema.Parser().parse(s3), new TestVisitor())>", "ss1.", Schemas.visit(new Schema.Parser().parse(s3), new TestVisitor()))
chamada antiga: Assert.assertEquals("st1.!", Schemas.visit(new Schema.Parser().parse(s4), new TestVisitor()))
nova chamada: assertEquals("Era esperado valores iguais, mas  'st1.!' é diferente de " + result115 + " <Schemas.visit(new Schema.Parser().parse(s4), new TestVisitor())>", "st1.!", Schemas.visit(new Schema.Parser().parse(s4), new TestVisitor()))
chamada antiga: Assert.assertEquals("c1.c2.\"int\"!\"long\"!", Schemas.visit(new Schema.Parser().parse(s5), new TestVisitor()))
nova chamada: assertEquals("Era esperado valores iguais, mas  'c1.c2.\'int\'!\'long\'!' é diferente de " + result116 + " <Schemas.visit(new Schema.Parser().parse(s5), new TestVisitor())>", "c1.c2.\"int\"!\"long\"!", Schemas.visit(new Schema.Parser().parse(s5), new TestVisitor()))
chamada antiga: Assert.assertEquals("c1.ss2.!", Schemas.visit(new Schema.Parser().parse(s6), new TestVisitor()))
nova chamada: assertEquals("Era esperado valores iguais, mas  'c1.ss2.!' é diferente de " + result117 + " <Schemas.visit(new Schema.Parser().parse(s6), new TestVisitor())>", "c1.ss2.!", Schemas.visit(new Schema.Parser().parse(s6), new TestVisitor()))
chamada antiga: Assert.assertEquals("c1.css2.\"int\"!!", Schemas.visit(new Schema.Parser().parse(s7), new TestVisitor()))
nova chamada: assertEquals("Era esperado valores iguais, mas  'c1.css2.\'int\'!!' é diferente de " + result118 + " <Schemas.visit(new Schema.Parser().parse(s7), new TestVisitor())>", "c1.css2.\"int\"!!", Schemas.visit(new Schema.Parser().parse(s7), new TestVisitor()))
chamada antiga: Assert.assertEquals("c1.ct2.\"int\"!", Schemas.visit(new Schema.Parser().parse(s9), new TestVisitor()))
nova chamada: assertEquals("Era esperado valores iguais, mas  'c1.ct2.\'int\'!' é diferente de " + result119 + " <Schemas.visit(new Schema.Parser().parse(s9), new TestVisitor())>", "c1.ct2.\"int\"!", Schemas.visit(new Schema.Parser().parse(s9), new TestVisitor()))
chamada antiga: Assert.assertEquals("c1.c2.\"int\".!\"long\".!", Schemas.visit(new Schema.Parser().parse(s11), new TestVisitor() {

    public SchemaVisitorAction visitTerminal(Schema terminal) {
        sb.append(terminal).append('.');
        return SchemaVisitorAction.SKIP_SIBLINGS;
    }
}))
nova chamada: assertEquals("Era esperado valores iguais, mas  'c1.c2.\'int\'.!\'long\'.!' é diferente de " + result120 + " <Schemas.visit(new Schema.Parser().parse(s11), new TestVisitor() {\n\n    public SchemaVisitorAction visitTerminal(Schema terminal) {\n        sb.append(terminal).append('.');\n        return SchemaVisitorAction.SKIP_SIBLINGS;\n    }\n})>", "c1.c2.\"int\".!\"long\".!", Schemas.visit(new Schema.Parser().parse(s11), new TestVisitor() {

    public SchemaVisitorAction visitTerminal(Schema terminal) {
        sb.append(terminal).append('.');
        return SchemaVisitorAction.SKIP_SIBLINGS;
    }
}))
chamada antiga: Assert.assertEquals("c1.ct2.\"int\".", Schemas.visit(new Schema.Parser().parse(s12), new TestVisitor() {

    public SchemaVisitorAction visitTerminal(Schema terminal) {
        sb.append(terminal).append('.');
        return SchemaVisitorAction.TERMINATE;
    }
}))
nova chamada: assertEquals("Era esperado valores iguais, mas  'c1.ct2.\'int\'.' é diferente de " + result121 + " <Schemas.visit(new Schema.Parser().parse(s12), new TestVisitor() {\n\n    public SchemaVisitorAction visitTerminal(Schema terminal) {\n        sb.append(terminal).append('.');\n        return SchemaVisitorAction.TERMINATE;\n    }\n})>", "c1.ct2.\"int\".", Schemas.visit(new Schema.Parser().parse(s12), new TestVisitor() {

    public SchemaVisitorAction visitTerminal(Schema terminal) {
        sb.append(terminal).append('.');
        return SchemaVisitorAction.TERMINATE;
    }
}))
chamada antiga: Assert.assertEquals("\"int\".", Schemas.visit(new Schema.Parser().parse(s12), new TestVisitor() {

    public SchemaVisitorAction visitTerminal(Schema terminal) {
        sb.append(terminal).append('.');
        return SchemaVisitorAction.SKIP_SIBLINGS;
    }
}))
nova chamada: assertEquals("Era esperado valores iguais, mas  '\'int\'.' é diferente de " + result122 + " <Schemas.visit(new Schema.Parser().parse(s12), new TestVisitor() {\n\n    public SchemaVisitorAction visitTerminal(Schema terminal) {\n        sb.append(terminal).append('.');\n        return SchemaVisitorAction.SKIP_SIBLINGS;\n    }\n})>", "\"int\".", Schemas.visit(new Schema.Parser().parse(s12), new TestVisitor() {

    public SchemaVisitorAction visitTerminal(Schema terminal) {
        sb.append(terminal).append('.');
        return SchemaVisitorAction.SKIP_SIBLINGS;
    }
}))
chamada antiga: Assert.assertEquals(5, protocol.getTypes().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  5 é diferente de " + result123 + " <protocol.getTypes().size()>", 5, protocol.getTypes().size())
chamada antiga: assertEquals(DocCommentHelper.getDoc(), "This is a token.")
nova chamada: assertEquals("Era esperado valores iguais, mas " + result124 + " <DocCommentHelper.getDoc()> é diferente de " + " 'This is a token.'", DocCommentHelper.getDoc(), "This is a token.")
chamada antiga: assertEquals(DocCommentHelper.getDoc(), "This is the second token.")
nova chamada: assertEquals("Era esperado valores iguais, mas " + result125 + " <DocCommentHelper.getDoc()> é diferente de " + " 'This is the second token.'", DocCommentHelper.getDoc(), "This is the second token.")
chamada antiga: assertEquals(schemaComment, DocCommentHelper.stripIndents(parsedComment))
nova chamada: assertEquals("Era esperado valores iguais, mas  schemaComment é diferente de " + result126 + " <DocCommentHelper.stripIndents(parsedComment)>", schemaComment, DocCommentHelper.stripIndents(parsedComment))
chamada antiga: assertEquals(schemaComment, DocCommentHelper.stripIndents(parsedComment))
nova chamada: assertEquals("Era esperado valores iguais, mas  schemaComment é diferente de " + result127 + " <DocCommentHelper.stripIndents(parsedComment)>", schemaComment, DocCommentHelper.stripIndents(parsedComment))
chamada antiga: Assert.assertEquals(data.toString(), read.toString())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result128 + " <data.toString()> é diferente de " + result129 + " <read.toString()>", data.toString(), read.toString())
chamada antiga: Assert.assertNull(trimmed.getDoc())
nova chamada: assertNull("Era esperado nulo, mas " + result130 + " <trimmed.getDoc()> não é nulo", trimmed.getDoc())
chamada antiga: Assert.assertTrue(Schemas.hasGeneratedJavaClass(new Schema.Parser().parse("{\"type\": \"fixed\", \"name\": \"N\", \"size\": 10}")))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result131 + " <Schemas.hasGeneratedJavaClass(new Schema.Parser().parse('{\'type\': \'fixed\', \'name\': \'N\', \'size\': 10}'))> é falso", Schemas.hasGeneratedJavaClass(new Schema.Parser().parse("{\"type\": \"fixed\", \"name\": \"N\", \"size\": 10}")))
chamada antiga: assertNull(DocCommentHelper.getDoc())
nova chamada: assertNull("Era esperado nulo, mas " + result132 + " <DocCommentHelper.getDoc()> não é nulo", DocCommentHelper.getDoc())
chamada antiga: assertTrue(TEST_DIR.exists())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result133 + " <TEST_DIR.exists()> é falso", TEST_DIR.exists())
chamada antiga: assertTrue(TEST_INPUT_DIR.exists())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result134 + " <TEST_INPUT_DIR.exists()> é falso", TEST_INPUT_DIR.exists())
chamada antiga: assertTrue(TEST_OUTPUT_DIR.exists())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result135 + " <TEST_OUTPUT_DIR.exists()> é falso", TEST_OUTPUT_DIR.exists())
chamada antiga: assertEquals(slurped.trim(), output.replace("\\r", "").trim())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result136 + " <slurped.trim()> é diferente de " + result137 + " <output.replace('\\r', '').trim()>", slurped.trim(), output.replace("\\r", "").trim())
chamada antiga: Assert.assertEquals(LogicalTypes.date(), logicalTypeOfField("aDate"))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result138 + " <LogicalTypes.date()> é diferente de " + result139 + " <logicalTypeOfField('aDate')>", LogicalTypes.date(), logicalTypeOfField("aDate"))
chamada antiga: Assert.assertEquals(LogicalTypes.timeMillis(), logicalTypeOfField("aTime"))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result140 + " <LogicalTypes.timeMillis()> é diferente de " + result141 + " <logicalTypeOfField('aTime')>", LogicalTypes.timeMillis(), logicalTypeOfField("aTime"))
chamada antiga: Assert.assertEquals(LogicalTypes.timestampMillis(), logicalTypeOfField("aTimestamp"))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result142 + " <LogicalTypes.timestampMillis()> é diferente de " + result143 + " <logicalTypeOfField('aTimestamp')>", LogicalTypes.timestampMillis(), logicalTypeOfField("aTimestamp"))
chamada antiga: Assert.assertEquals(LogicalTypes.localTimestampMillis(), logicalTypeOfField("aLocalTimestamp"))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result144 + " <LogicalTypes.localTimestampMillis()> é diferente de " + result145 + " <logicalTypeOfField('aLocalTimestamp')>", LogicalTypes.localTimestampMillis(), logicalTypeOfField("aLocalTimestamp"))
chamada antiga: Assert.assertEquals(LogicalTypes.decimal(6, 2), logicalTypeOfField("pocketMoney"))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result146 + " <LogicalTypes.decimal(6, 2)> é diferente de " + result147 + " <logicalTypeOfField('pocketMoney')>", LogicalTypes.decimal(6, 2), logicalTypeOfField("pocketMoney"))
chamada antiga: Assert.assertEquals(LogicalTypes.uuid(), logicalTypeOfField("identifier"))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result148 + " <LogicalTypes.uuid()> é diferente de " + result149 + " <logicalTypeOfField('identifier')>", LogicalTypes.uuid(), logicalTypeOfField("identifier"))
chamada antiga: Assert.assertEquals(LogicalTypes.timestampMicros(), logicalTypeOfField("anotherTimestamp"))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result150 + " <LogicalTypes.timestampMicros()> é diferente de " + result151 + " <logicalTypeOfField('anotherTimestamp')>", LogicalTypes.timestampMicros(), logicalTypeOfField("anotherTimestamp"))
chamada antiga: Assert.assertEquals(LogicalTypes.decimal(6, 2), logicalTypeOfField("allowance"))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result152 + " <LogicalTypes.decimal(6, 2)> é diferente de " + result153 + " <logicalTypeOfField('allowance')>", LogicalTypes.decimal(6, 2), logicalTypeOfField("allowance"))
chamada antiga: Assert.assertEquals("decimal", fieldSchema.getObjectProp("logicalType"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'decimal' é diferente de " + result154 + " <fieldSchema.getObjectProp('logicalType')>", "decimal", fieldSchema.getObjectProp("logicalType"))
chamada antiga: Assert.assertEquals(3000000000L, fieldSchema.getObjectProp("precision"))
nova chamada: assertEquals("Era esperado valores iguais, mas  3000000000L é diferente de " + result155 + " <fieldSchema.getObjectProp('precision')>", 3000000000L, fieldSchema.getObjectProp("precision"))
chamada antiga: Assert.assertEquals(0, fieldSchema.getObjectProp("scale"))
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + result156 + " <fieldSchema.getObjectProp('scale')>", 0, fieldSchema.getObjectProp("scale"))
chamada antiga: assertEquals(0, ((GenericRecord) request).get("x"))
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + result157 + " <((GenericRecord) request).get('x')>", 0, ((GenericRecord) request).get("x"))
chamada antiga: assertEquals(1, r.request("m", params))
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result158 + " <r.request('m', params)>", 1, r.request("m", params))
chamada antiga: assertTrue(o.contains("10 calls"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result159 + " <o.contains('10 calls')> é falso", o.contains("10 calls"))
chamada antiga: assertTrue(r.contains("m: 0ms"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result160 + " <r.contains('m: 0ms')> é falso", r.contains("m: 0ms"))
chamada antiga: assertTrue(r.contains("m: 100ms"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result161 + " <r.contains('m: 100ms')> é falso", r.contains("m: 100ms"))
chamada antiga: assertTrue(r.contains("Average: 500.0ms"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result162 + " <r.contains('Average: 500.0ms')> é falso", r.contains("Average: 500.0ms"))
chamada antiga: assertTrue(resp.contains("Average: 2.0"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result163 + " <resp.contains('Average: 2.0')> é falso", resp.contains("Average: 2.0"))
chamada antiga: Assert.assertNotNull(recSchema.getDoc())
nova chamada: assertNotNull("Era esperado não nulo, mas " + result164 + " <recSchema.getDoc()> é nulo", recSchema.getDoc())
chamada antiga: Assert.assertNotNull(cv.toString())
nova chamada: assertNotNull("Era esperado não nulo, mas " + result165 + " <cv.toString()> é nulo", cv.toString())
chamada antiga: Assert.assertNotNull(recSchema.getDoc())
nova chamada: assertNotNull("Era esperado não nulo, mas " + result166 + " <recSchema.getDoc()> é nulo", recSchema.getDoc())
chamada antiga: Assert.assertEquals(SIZE, data.remaining())
nova chamada: assertEquals("Era esperado valores iguais, mas  SIZE é diferente de " + result167 + " <data.remaining()>", SIZE, data.remaining())
chamada antiga: assertEquals(new Utf8("goodbye"), response)
nova chamada: assertEquals("Era esperado valores iguais, mas  new Utf8('goodbye') é diferente de " + " response", new Utf8("goodbye"), response)
chamada antiga: assertEquals(record, echoed)
nova chamada: assertEquals("Era esperado valores iguais, mas  record é diferente de " + " echoed", record, echoed)
chamada antiga: assertEquals(data, echoed)
nova chamada: assertEquals("Era esperado valores iguais, mas  data é diferente de " + " echoed", data, echoed)
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", error)
chamada antiga: assertEquals("an error", ((GenericRecord) error.getValue()).get("message").toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  'an error' é diferente de " + result168 + " <((GenericRecord) error.getValue()).get('message').toString()>", "an error", ((GenericRecord) error.getValue()).get("message").toString())
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", error)
chamada antiga: assertTrue(error.toString().contains("foo"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result169 + " <error.toString().contains('foo')> é falso", error.toString().contains("foo"))
chamada antiga: Assert.assertFalse(Schemas.hasGeneratedJavaClass(new Schema.Parser().parse("{\"type\": \"int\"}")))
nova chamada: assertFalse("Era esperado falso, mas " + result170 + " <Schemas.hasGeneratedJavaClass(new Schema.Parser().parse('{\'type\': \'int\'}'))> é verdadeiro ", Schemas.hasGeneratedJavaClass(new Schema.Parser().parse("{\"type\": \"int\"}")))
chamada antiga: Assert.assertTrue(buf.remaining() > 0)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", buf.remaining() > 0)
chamada antiga: Assert.assertTrue(buf.remaining() > 0)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", buf.remaining() > 0)
chamada antiga: Assert.assertTrue(buf.remaining() > 0)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", buf.remaining() > 0)
chamada antiga: Assert.assertTrue(buf.remaining() > 0)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", buf.remaining() > 0)
chamada antiga: Assert.assertTrue(buf.remaining() > 0)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", buf.remaining() > 0)
chamada antiga: Assert.assertEquals("apache", str)
nova chamada: assertEquals("Era esperado valores iguais, mas  'apache' é diferente de " + " str", "apache", str)
chamada antiga: fail("Should NEVER get here")
nova chamada: fail("A execução falhou por uma causa deliberada", "Should NEVER get here")
chamada antiga: assertEquals(NetworkType.IPv4, request1.getConnection().getNetworkType())
nova chamada: assertEquals("Era esperado valores iguais, mas  NetworkType.IPv4 é diferente de " + result171 + " <request1.getConnection().getNetworkType()>", NetworkType.IPv4, request1.getConnection().getNetworkType())
chamada antiga: assertEquals("1.1.1.1", request1.getConnection().getNetworkAddress())
nova chamada: assertEquals("Era esperado valores iguais, mas  '1.1.1.1' é diferente de " + result172 + " <request1.getConnection().getNetworkAddress()>", "1.1.1.1", request1.getConnection().getNetworkAddress())
chamada antiga: assertEquals("Chrome 123", request1.getHttpRequest().getUserAgent().getUseragent())
nova chamada: assertEquals("Era esperado valores iguais, mas  'Chrome 123' é diferente de " + result173 + " <request1.getHttpRequest().getUserAgent().getUseragent()>", "Chrome 123", request1.getHttpRequest().getUserAgent().getUseragent())
chamada antiga: assertEquals("Foo", request1.getHttpRequest().getUserAgent().getId())
nova chamada: assertEquals("Era esperado valores iguais, mas  'Foo' é diferente de " + result174 + " <request1.getHttpRequest().getUserAgent().getId()>", "Foo", request1.getHttpRequest().getUserAgent().getId())
chamada antiga: assertEquals(HttpMethod.GET, request1.getHttpRequest().getURI().getMethod())
nova chamada: assertEquals("Era esperado valores iguais, mas  HttpMethod.GET é diferente de " + result175 + " <request1.getHttpRequest().getURI().getMethod()>", HttpMethod.GET, request1.getHttpRequest().getURI().getMethod())
chamada antiga: assertEquals("/index.html", request1.getHttpRequest().getURI().getPath())
nova chamada: assertEquals("Era esperado valores iguais, mas  '/index.html' é diferente de " + result176 + " <request1.getHttpRequest().getURI().getPath()>", "/index.html", request1.getHttpRequest().getURI().getPath())
chamada antiga: assertEquals(1, request1.getHttpRequest().getURI().getParameters().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result177 + " <request1.getHttpRequest().getURI().getParameters().size()>", 1, request1.getHttpRequest().getURI().getParameters().size())
chamada antiga: assertEquals("Foo", request1.getHttpRequest().getURI().getParameters().get(0).getName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'Foo' é diferente de " + result178 + " <request1.getHttpRequest().getURI().getParameters().get(0).getName()>", "Foo", request1.getHttpRequest().getURI().getParameters().get(0).getName())
chamada antiga: assertEquals("Bar", request1.getHttpRequest().getURI().getParameters().get(0).getValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  'Bar' é diferente de " + result179 + " <request1.getHttpRequest().getURI().getParameters().get(0).getValue()>", "Bar", request1.getHttpRequest().getURI().getParameters().get(0).getValue())
chamada antiga: assertEquals(NetworkType.IPv4, request2.getConnection().getNetworkType())
nova chamada: assertEquals("Era esperado valores iguais, mas  NetworkType.IPv4 é diferente de " + result180 + " <request2.getConnection().getNetworkType()>", NetworkType.IPv4, request2.getConnection().getNetworkType())
chamada antiga: assertEquals("2.2.2.2", request2.getConnection().getNetworkAddress())
nova chamada: assertEquals("Era esperado valores iguais, mas  '2.2.2.2' é diferente de " + result181 + " <request2.getConnection().getNetworkAddress()>", "2.2.2.2", request2.getConnection().getNetworkAddress())
chamada antiga: assertEquals("Chrome 123", request2.getHttpRequest().getUserAgent().getUseragent())
nova chamada: assertEquals("Era esperado valores iguais, mas  'Chrome 123' é diferente de " + result182 + " <request2.getHttpRequest().getUserAgent().getUseragent()>", "Chrome 123", request2.getHttpRequest().getUserAgent().getUseragent())
chamada antiga: assertEquals("Bar", request2.getHttpRequest().getUserAgent().getId())
nova chamada: assertEquals("Era esperado valores iguais, mas  'Bar' é diferente de " + result183 + " <request2.getHttpRequest().getUserAgent().getId()>", "Bar", request2.getHttpRequest().getUserAgent().getId())
chamada antiga: assertEquals(HttpMethod.GET, request2.getHttpRequest().getURI().getMethod())
nova chamada: assertEquals("Era esperado valores iguais, mas  HttpMethod.GET é diferente de " + result184 + " <request2.getHttpRequest().getURI().getMethod()>", HttpMethod.GET, request2.getHttpRequest().getURI().getMethod())
chamada antiga: assertEquals("/index.html", request2.getHttpRequest().getURI().getPath())
nova chamada: assertEquals("Era esperado valores iguais, mas  '/index.html' é diferente de " + result185 + " <request2.getHttpRequest().getURI().getPath()>", "/index.html", request2.getHttpRequest().getURI().getPath())
chamada antiga: assertEquals(1, request2.getHttpRequest().getURI().getParameters().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result186 + " <request2.getHttpRequest().getURI().getParameters().size()>", 1, request2.getHttpRequest().getURI().getParameters().size())
chamada antiga: assertEquals("Foo", request2.getHttpRequest().getURI().getParameters().get(0).getName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'Foo' é diferente de " + result187 + " <request2.getHttpRequest().getURI().getParameters().get(0).getName()>", "Foo", request2.getHttpRequest().getURI().getParameters().get(0).getName())
chamada antiga: assertEquals("Bar", request2.getHttpRequest().getURI().getParameters().get(0).getValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  'Bar' é diferente de " + result188 + " <request2.getHttpRequest().getURI().getParameters().get(0).getValue()>", "Bar", request2.getHttpRequest().getURI().getParameters().get(0).getValue())
chamada antiga: assertEquals(NetworkType.IPv4, request1.getConnection().getNetworkType())
nova chamada: assertEquals("Era esperado valores iguais, mas  NetworkType.IPv4 é diferente de " + result189 + " <request1.getConnection().getNetworkType()>", NetworkType.IPv4, request1.getConnection().getNetworkType())
chamada antiga: assertEquals("1.1.1.1", request1.getConnection().getNetworkAddress())
nova chamada: assertEquals("Era esperado valores iguais, mas  '1.1.1.1' é diferente de " + result190 + " <request1.getConnection().getNetworkAddress()>", "1.1.1.1", request1.getConnection().getNetworkAddress())
chamada antiga: assertEquals("Chrome 123", request1.getHttpRequest().getUserAgent().getUseragent())
nova chamada: assertEquals("Era esperado valores iguais, mas  'Chrome 123' é diferente de " + result191 + " <request1.getHttpRequest().getUserAgent().getUseragent()>", "Chrome 123", request1.getHttpRequest().getUserAgent().getUseragent())
chamada antiga: assertEquals("Foo", request1.getHttpRequest().getUserAgent().getId())
nova chamada: assertEquals("Era esperado valores iguais, mas  'Foo' é diferente de " + result192 + " <request1.getHttpRequest().getUserAgent().getId()>", "Foo", request1.getHttpRequest().getUserAgent().getId())
chamada antiga: assertEquals(HttpMethod.GET, request1.getHttpRequest().getURI().getMethod())
nova chamada: assertEquals("Era esperado valores iguais, mas  HttpMethod.GET é diferente de " + result193 + " <request1.getHttpRequest().getURI().getMethod()>", HttpMethod.GET, request1.getHttpRequest().getURI().getMethod())
chamada antiga: assertEquals("/index.html", request1.getHttpRequest().getURI().getPath())
nova chamada: assertEquals("Era esperado valores iguais, mas  '/index.html' é diferente de " + result194 + " <request1.getHttpRequest().getURI().getPath()>", "/index.html", request1.getHttpRequest().getURI().getPath())
chamada antiga: assertEquals(1, request1.getHttpRequest().getURI().getParameters().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result195 + " <request1.getHttpRequest().getURI().getParameters().size()>", 1, request1.getHttpRequest().getURI().getParameters().size())
chamada antiga: assertEquals("Foo", request1.getHttpRequest().getURI().getParameters().get(0).getName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'Foo' é diferente de " + result196 + " <request1.getHttpRequest().getURI().getParameters().get(0).getName()>", "Foo", request1.getHttpRequest().getURI().getParameters().get(0).getName())
chamada antiga: assertEquals("Bar", request1.getHttpRequest().getURI().getParameters().get(0).getValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  'Bar' é diferente de " + result197 + " <request1.getHttpRequest().getURI().getParameters().get(0).getValue()>", "Bar", request1.getHttpRequest().getURI().getParameters().get(0).getValue())
chamada antiga: assertEquals(NetworkType.IPv4, request2.getConnection().getNetworkType())
nova chamada: assertEquals("Era esperado valores iguais, mas  NetworkType.IPv4 é diferente de " + result198 + " <request2.getConnection().getNetworkType()>", NetworkType.IPv4, request2.getConnection().getNetworkType())
chamada antiga: assertEquals("2.2.2.2", request2.getConnection().getNetworkAddress())
nova chamada: assertEquals("Era esperado valores iguais, mas  '2.2.2.2' é diferente de " + result199 + " <request2.getConnection().getNetworkAddress()>", "2.2.2.2", request2.getConnection().getNetworkAddress())
chamada antiga: assertEquals("Firefox 456", request2.getHttpRequest().getUserAgent().getUseragent())
nova chamada: assertEquals("Era esperado valores iguais, mas  'Firefox 456' é diferente de " + result200 + " <request2.getHttpRequest().getUserAgent().getUseragent()>", "Firefox 456", request2.getHttpRequest().getUserAgent().getUseragent())
chamada antiga: assertEquals("Bar", request2.getHttpRequest().getUserAgent().getId())
nova chamada: assertEquals("Era esperado valores iguais, mas  'Bar' é diferente de " + result201 + " <request2.getHttpRequest().getUserAgent().getId()>", "Bar", request2.getHttpRequest().getUserAgent().getId())
chamada antiga: assertEquals(HttpMethod.POST, request2.getHttpRequest().getURI().getMethod())
nova chamada: assertEquals("Era esperado valores iguais, mas  HttpMethod.POST é diferente de " + result202 + " <request2.getHttpRequest().getURI().getMethod()>", HttpMethod.POST, request2.getHttpRequest().getURI().getMethod())
chamada antiga: assertEquals("/index.html", request2.getHttpRequest().getURI().getPath())
nova chamada: assertEquals("Era esperado valores iguais, mas  '/index.html' é diferente de " + result203 + " <request2.getHttpRequest().getURI().getPath()>", "/index.html", request2.getHttpRequest().getURI().getPath())
chamada antiga: assertEquals(1, request2.getHttpRequest().getURI().getParameters().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result204 + " <request2.getHttpRequest().getURI().getParameters().size()>", 1, request2.getHttpRequest().getURI().getParameters().size())
chamada antiga: assertEquals("Foo", request2.getHttpRequest().getURI().getParameters().get(0).getName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'Foo' é diferente de " + result205 + " <request2.getHttpRequest().getURI().getParameters().get(0).getName()>", "Foo", request2.getHttpRequest().getURI().getParameters().get(0).getName())
chamada antiga: assertEquals("Bar", request2.getHttpRequest().getURI().getParameters().get(0).getValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  'Bar' é diferente de " + result206 + " <request2.getHttpRequest().getURI().getParameters().get(0).getValue()>", "Bar", request2.getHttpRequest().getURI().getParameters().get(0).getValue())
chamada antiga: assertEquals(NetworkType.IPv4, request.getConnection().getNetworkType())
nova chamada: assertEquals("Era esperado valores iguais, mas  NetworkType.IPv4 é diferente de " + result207 + " <request.getConnection().getNetworkType()>", NetworkType.IPv4, request.getConnection().getNetworkType())
chamada antiga: assertEquals("1.1.1.1", request.getConnection().getNetworkAddress())
nova chamada: assertEquals("Era esperado valores iguais, mas  '1.1.1.1' é diferente de " + result208 + " <request.getConnection().getNetworkAddress()>", "1.1.1.1", request.getConnection().getNetworkAddress())
chamada antiga: assertEquals(0, request.getHttpRequest().getURI().getParameters().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + result209 + " <request.getHttpRequest().getURI().getParameters().size()>", 0, request.getHttpRequest().getURI().getParameters().size())
chamada antiga: assertEquals("Firefox 321", request.getHttpRequest().getUserAgent().getUseragent())
nova chamada: assertEquals("Era esperado valores iguais, mas  'Firefox 321' é diferente de " + result210 + " <request.getHttpRequest().getUserAgent().getUseragent()>", "Firefox 321", request.getHttpRequest().getUserAgent().getUseragent())
chamada antiga: assertEquals("Bar", request.getHttpRequest().getUserAgent().getId())
nova chamada: assertEquals("Era esperado valores iguais, mas  'Bar' é diferente de " + result211 + " <request.getHttpRequest().getUserAgent().getId()>", "Bar", request.getHttpRequest().getUserAgent().getId())
chamada antiga: assertEquals(HttpMethod.POST, request.getHttpRequest().getURI().getMethod())
nova chamada: assertEquals("Era esperado valores iguais, mas  HttpMethod.POST é diferente de " + result212 + " <request.getHttpRequest().getURI().getMethod()>", HttpMethod.POST, request.getHttpRequest().getURI().getMethod())
chamada antiga: assertEquals("/login.php", request.getHttpRequest().getURI().getPath())
nova chamada: assertEquals("Era esperado valores iguais, mas  '/login.php' é diferente de " + result213 + " <request.getHttpRequest().getURI().getPath()>", "/login.php", request.getHttpRequest().getURI().getPath())
chamada antiga: assertEquals(NetworkType.IPv4, request.getConnection().getNetworkType())
nova chamada: assertEquals("Era esperado valores iguais, mas  NetworkType.IPv4 é diferente de " + result214 + " <request.getConnection().getNetworkType()>", NetworkType.IPv4, request.getConnection().getNetworkType())
chamada antiga: assertEquals("1.1.1.1", request.getConnection().getNetworkAddress())
nova chamada: assertEquals("Era esperado valores iguais, mas  '1.1.1.1' é diferente de " + result215 + " <request.getConnection().getNetworkAddress()>", "1.1.1.1", request.getConnection().getNetworkAddress())
chamada antiga: assertEquals("Chrome 123", request.getHttpRequest().getUserAgent().getUseragent())
nova chamada: assertEquals("Era esperado valores iguais, mas  'Chrome 123' é diferente de " + result216 + " <request.getHttpRequest().getUserAgent().getUseragent()>", "Chrome 123", request.getHttpRequest().getUserAgent().getUseragent())
chamada antiga: assertEquals("Foo", request.getHttpRequest().getUserAgent().getId())
nova chamada: assertEquals("Era esperado valores iguais, mas  'Foo' é diferente de " + result217 + " <request.getHttpRequest().getUserAgent().getId()>", "Foo", request.getHttpRequest().getUserAgent().getId())
chamada antiga: assertEquals(0, request.getHttpRequest().getURI().getParameters().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + result218 + " <request.getHttpRequest().getURI().getParameters().size()>", 0, request.getHttpRequest().getURI().getParameters().size())
chamada antiga: assertEquals(HttpMethod.GET, request.getHttpRequest().getURI().getMethod())
nova chamada: assertEquals("Era esperado valores iguais, mas  HttpMethod.GET é diferente de " + result219 + " <request.getHttpRequest().getURI().getMethod()>", HttpMethod.GET, request.getHttpRequest().getURI().getMethod())
chamada antiga: assertEquals("/index.html", request.getHttpRequest().getURI().getPath())
nova chamada: assertEquals("Era esperado valores iguais, mas  '/index.html' é diferente de " + result220 + " <request.getHttpRequest().getURI().getPath()>", "/index.html", request.getHttpRequest().getURI().getPath())
chamada antiga: assertFalse(builder.hasNullableRecordBuilder())
nova chamada: assertFalse("Era esperado falso, mas " + result221 + " <builder.hasNullableRecordBuilder()> é verdadeiro ", builder.hasNullableRecordBuilder())
chamada antiga: assertFalse(builder.hasNullableRecord())
nova chamada: assertFalse("Era esperado falso, mas " + result222 + " <builder.hasNullableRecord()> é verdadeiro ", builder.hasNullableRecord())
chamada antiga: assertFalse(builder.hasNullableString())
nova chamada: assertFalse("Era esperado falso, mas " + result223 + " <builder.hasNullableString()> é verdadeiro ", builder.hasNullableString())
chamada antiga: assertFalse(builder.hasNullableLong())
nova chamada: assertFalse("Era esperado falso, mas " + result224 + " <builder.hasNullableLong()> é verdadeiro ", builder.hasNullableLong())
chamada antiga: assertFalse(builder.hasNullableInt())
nova chamada: assertFalse("Era esperado falso, mas " + result225 + " <builder.hasNullableInt()> é verdadeiro ", builder.hasNullableInt())
chamada antiga: assertFalse(builder.hasNullableMap())
nova chamada: assertFalse("Era esperado falso, mas " + result226 + " <builder.hasNullableMap()> é verdadeiro ", builder.hasNullableMap())
chamada antiga: assertFalse(builder.hasNullableArray())
nova chamada: assertFalse("Era esperado falso, mas " + result227 + " <builder.hasNullableArray()> é verdadeiro ", builder.hasNullableArray())
chamada antiga: assertFalse(builderCopy.hasNullableRecordBuilder())
nova chamada: assertFalse("Era esperado falso, mas " + result228 + " <builderCopy.hasNullableRecordBuilder()> é verdadeiro ", builderCopy.hasNullableRecordBuilder())
chamada antiga: assertFalse(builderCopy.hasNullableRecord())
nova chamada: assertFalse("Era esperado falso, mas " + result229 + " <builderCopy.hasNullableRecord()> é verdadeiro ", builderCopy.hasNullableRecord())
chamada antiga: assertFalse(builderCopy.hasNullableString())
nova chamada: assertFalse("Era esperado falso, mas " + result230 + " <builderCopy.hasNullableString()> é verdadeiro ", builderCopy.hasNullableString())
chamada antiga: assertFalse(builderCopy.hasNullableLong())
nova chamada: assertFalse("Era esperado falso, mas " + result231 + " <builderCopy.hasNullableLong()> é verdadeiro ", builderCopy.hasNullableLong())
chamada antiga: assertFalse(builderCopy.hasNullableInt())
nova chamada: assertFalse("Era esperado falso, mas " + result232 + " <builderCopy.hasNullableInt()> é verdadeiro ", builderCopy.hasNullableInt())
chamada antiga: assertFalse(builderCopy.hasNullableMap())
nova chamada: assertFalse("Era esperado falso, mas " + result233 + " <builderCopy.hasNullableMap()> é verdadeiro ", builderCopy.hasNullableMap())
chamada antiga: assertFalse(builderCopy.hasNullableArray())
nova chamada: assertFalse("Era esperado falso, mas " + result234 + " <builderCopy.hasNullableArray()> é verdadeiro ", builderCopy.hasNullableArray())
chamada antiga: assertFalse(builder.hasNullableRecordBuilder())
nova chamada: assertFalse("Era esperado falso, mas " + result235 + " <builder.hasNullableRecordBuilder()> é verdadeiro ", builder.hasNullableRecordBuilder())
chamada antiga: assertFalse(builder.hasNullableRecord())
nova chamada: assertFalse("Era esperado falso, mas " + result236 + " <builder.hasNullableRecord()> é verdadeiro ", builder.hasNullableRecord())
chamada antiga: assertFalse(builder.hasNullableString())
nova chamada: assertFalse("Era esperado falso, mas " + result237 + " <builder.hasNullableString()> é verdadeiro ", builder.hasNullableString())
chamada antiga: assertFalse(builder.hasNullableLong())
nova chamada: assertFalse("Era esperado falso, mas " + result238 + " <builder.hasNullableLong()> é verdadeiro ", builder.hasNullableLong())
chamada antiga: assertFalse(builder.hasNullableInt())
nova chamada: assertFalse("Era esperado falso, mas " + result239 + " <builder.hasNullableInt()> é verdadeiro ", builder.hasNullableInt())
chamada antiga: assertFalse(builder.hasNullableMap())
nova chamada: assertFalse("Era esperado falso, mas " + result240 + " <builder.hasNullableMap()> é verdadeiro ", builder.hasNullableMap())
chamada antiga: assertFalse(builder.hasNullableArray())
nova chamada: assertFalse("Era esperado falso, mas " + result241 + " <builder.hasNullableArray()> é verdadeiro ", builder.hasNullableArray())
chamada antiga: assertFalse(builder.hasNullableRecordBuilder())
nova chamada: assertFalse("Era esperado falso, mas " + result242 + " <builder.hasNullableRecordBuilder()> é verdadeiro ", builder.hasNullableRecordBuilder())
chamada antiga: assertTrue(builder.hasNullableRecord())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result243 + " <builder.hasNullableRecord()> é falso", builder.hasNullableRecord())
chamada antiga: assertTrue(builder.hasNullableString())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result244 + " <builder.hasNullableString()> é falso", builder.hasNullableString())
chamada antiga: assertTrue(builder.hasNullableLong())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result245 + " <builder.hasNullableLong()> é falso", builder.hasNullableLong())
chamada antiga: assertTrue(builder.hasNullableInt())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result246 + " <builder.hasNullableInt()> é falso", builder.hasNullableInt())
chamada antiga: assertTrue(builder.hasNullableMap())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result247 + " <builder.hasNullableMap()> é falso", builder.hasNullableMap())
chamada antiga: assertTrue(builder.hasNullableArray())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result248 + " <builder.hasNullableArray()> é falso", builder.hasNullableArray())
chamada antiga: assertTrue(builder.hasNullableRecordBuilder())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result249 + " <builder.hasNullableRecordBuilder()> é falso", builder.hasNullableRecordBuilder())
chamada antiga: assertFalse(builder.hasNullableRecord())
nova chamada: assertFalse("Era esperado falso, mas " + result250 + " <builder.hasNullableRecord()> é verdadeiro ", builder.hasNullableRecord())
chamada antiga: assertTrue(builder.hasNullableRecordBuilder())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result251 + " <builder.hasNullableRecordBuilder()> é falso", builder.hasNullableRecordBuilder())
chamada antiga: assertFalse(builder.hasNullableRecord())
nova chamada: assertFalse("Era esperado falso, mas " + result252 + " <builder.hasNullableRecord()> é verdadeiro ", builder.hasNullableRecord())
chamada antiga: assertTrue(builder.hasNullableString())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result253 + " <builder.hasNullableString()> é falso", builder.hasNullableString())
chamada antiga: assertTrue(builder.hasNullableLong())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result254 + " <builder.hasNullableLong()> é falso", builder.hasNullableLong())
chamada antiga: assertTrue(builder.hasNullableInt())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result255 + " <builder.hasNullableInt()> é falso", builder.hasNullableInt())
chamada antiga: assertTrue(builder.hasNullableMap())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result256 + " <builder.hasNullableMap()> é falso", builder.hasNullableMap())
chamada antiga: assertTrue(builder.hasNullableArray())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result257 + " <builder.hasNullableArray()> é falso", builder.hasNullableArray())
chamada antiga: assertEquals("Chrome 123", Optional.of(request).flatMap(Request::getOptionalHttpRequest).flatMap(HttpRequest::getOptionalUserAgent).flatMap(UserAgent::getOptionalUseragent).orElse("UNKNOWN"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'Chrome 123' é diferente de " + result258 + " <Optional.of(request).flatMap(Request::getOptionalHttpRequest).flatMap(HttpRequest::getOptionalUserAgent).flatMap(UserAgent::getOptionalUseragent).orElse('UNKNOWN')>", "Chrome 123", Optional.of(request).flatMap(Request::getOptionalHttpRequest).flatMap(HttpRequest::getOptionalUserAgent).flatMap(UserAgent::getOptionalUseragent).orElse("UNKNOWN"))
chamada antiga: assertFalse(Optional.of(request).flatMap(Request::getOptionalHttpRequest).flatMap(HttpRequest::getOptionalUserAgent).flatMap(UserAgent::getOptionalId).isPresent())
nova chamada: assertFalse("Era esperado falso, mas " + result259 + " <Optional.of(request).flatMap(Request::getOptionalHttpRequest).flatMap(HttpRequest::getOptionalUserAgent).flatMap(UserAgent::getOptionalId).isPresent()> é verdadeiro ", Optional.of(request).flatMap(Request::getOptionalHttpRequest).flatMap(HttpRequest::getOptionalUserAgent).flatMap(UserAgent::getOptionalId).isPresent())
chamada antiga: assertEquals(HttpMethod.GET, Optional.of(request).flatMap(Request::getOptionalHttpRequest).flatMap(HttpRequest::getOptionalURI).flatMap(HttpURI::getOptionalMethod).orElse(null))
nova chamada: assertEquals("Era esperado valores iguais, mas  HttpMethod.GET é diferente de " + result260 + " <Optional.of(request).flatMap(Request::getOptionalHttpRequest).flatMap(HttpRequest::getOptionalURI).flatMap(HttpURI::getOptionalMethod).orElse(null)>", HttpMethod.GET, Optional.of(request).flatMap(Request::getOptionalHttpRequest).flatMap(HttpRequest::getOptionalURI).flatMap(HttpURI::getOptionalMethod).orElse(null))
chamada antiga: assertEquals("/index.html", Optional.of(request).flatMap(Request::getOptionalHttpRequest).flatMap(HttpRequest::getOptionalURI).flatMap(HttpURI::getOptionalPath).orElse(null))
nova chamada: assertEquals("Era esperado valores iguais, mas  '/index.html' é diferente de " + result261 + " <Optional.of(request).flatMap(Request::getOptionalHttpRequest).flatMap(HttpRequest::getOptionalURI).flatMap(HttpURI::getOptionalPath).orElse(null)>", "/index.html", Optional.of(request).flatMap(Request::getOptionalHttpRequest).flatMap(HttpRequest::getOptionalURI).flatMap(HttpURI::getOptionalPath).orElse(null))
chamada antiga: assertThat(conversions, hasItem("org.apache.avro.data.TimeConversions.TimestampMillisConversion"))
nova chamada: assertThat("Era esperado que  conversions satisfizesse a condição " + result262 + " <hasItem('org.apache.avro.data.TimeConversions.TimestampMillisConversion')>, mas não a satisfez", conversions, hasItem("org.apache.avro.data.TimeConversions.TimestampMillisConversion"))
chamada antiga: assertThat(conversions, hasItem("org.apache.avro.data.TimeConversions.TimestampMicrosConversion"))
nova chamada: assertThat("Era esperado que  conversions satisfizesse a condição " + result263 + " <hasItem('org.apache.avro.data.TimeConversions.TimestampMicrosConversion')>, mas não a satisfez", conversions, hasItem("org.apache.avro.data.TimeConversions.TimestampMicrosConversion"))
chamada antiga: Assert.assertNull(fieldSchema.getLogicalType())
nova chamada: assertNull("Era esperado nulo, mas " + result264 + " <fieldSchema.getLogicalType()> não é nulo", fieldSchema.getLogicalType())
chamada antiga: Assert.assertNotNull(context.requestHandshakeMeta())
nova chamada: assertNotNull("Era esperado não nulo, mas " + result265 + " <context.requestHandshakeMeta()> é nulo", context.requestHandshakeMeta())
chamada antiga: Assert.assertNotNull(context.responseHandshakeMeta())
nova chamada: assertNotNull("Era esperado não nulo, mas " + result266 + " <context.responseHandshakeMeta()> é nulo", context.responseHandshakeMeta())
chamada antiga: Assert.assertNull(context.getRequestPayload())
nova chamada: assertNull("Era esperado nulo, mas " + result267 + " <context.getRequestPayload()> não é nulo", context.getRequestPayload())
chamada antiga: Assert.assertNull(context.getResponsePayload())
nova chamada: assertNull("Era esperado nulo, mas " + result268 + " <context.getResponsePayload()> não é nulo", context.getResponsePayload())
chamada antiga: Assert.assertNotNull(buf)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", buf)
chamada antiga: Assert.assertNotNull(buf.array())
nova chamada: assertNotNull("Era esperado não nulo, mas " + result269 + " <buf.array()> é nulo", buf.array())
chamada antiga: Assert.assertNotNull(partialstr)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", partialstr)
chamada antiga: Assert.assertNull(context.getRequestPayload())
nova chamada: assertNull("Era esperado nulo, mas " + result270 + " <context.getRequestPayload()> não é nulo", context.getRequestPayload())
chamada antiga: Assert.assertNull(context.getResponsePayload())
nova chamada: assertNull("Era esperado nulo, mas " + result271 + " <context.getResponsePayload()> não é nulo", context.getResponsePayload())
chamada antiga: Assert.assertNotNull(handshakeMeta)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", handshakeMeta)
chamada antiga: Assert.assertNotNull(buf)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", buf)
chamada antiga: Assert.assertNotNull(buf.array())
nova chamada: assertNotNull("Era esperado não nulo, mas " + result272 + " <buf.array()> é nulo", buf.array())
chamada antiga: Assert.assertNotNull(partialstr)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", partialstr)
chamada antiga: Assert.assertNotNull(context.getMessage())
nova chamada: assertNotNull("Era esperado não nulo, mas " + result273 + " <context.getMessage()> é nulo", context.getMessage())
chamada antiga: Assert.assertNotNull(context.getRequestPayload())
nova chamada: assertNotNull("Era esperado não nulo, mas " + result274 + " <context.getRequestPayload()> é nulo", context.getRequestPayload())
chamada antiga: Assert.assertNull(context.getResponsePayload())
nova chamada: assertNull("Era esperado nulo, mas " + result275 + " <context.getResponsePayload()> não é nulo", context.getResponsePayload())
chamada antiga: Assert.assertNotNull(meta)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", meta)
chamada antiga: Assert.assertNotNull(context.getMessage())
nova chamada: assertNotNull("Era esperado não nulo, mas " + result276 + " <context.getMessage()> é nulo", context.getMessage())
chamada antiga: Assert.assertNull(context.getResponsePayload())
nova chamada: assertNull("Era esperado nulo, mas " + result277 + " <context.getResponsePayload()> não é nulo", context.getResponsePayload())
chamada antiga: Assert.assertNotNull(buf)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", buf)
chamada antiga: Assert.assertNotNull(buf.array())
nova chamada: assertNotNull("Era esperado não nulo, mas " + result278 + " <buf.array()> é nulo", buf.array())
chamada antiga: Assert.assertNotNull(partialstr)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", partialstr)
chamada antiga: Assert.assertNotNull(context.requestCallMeta())
nova chamada: assertNotNull("Era esperado não nulo, mas " + result279 + " <context.requestCallMeta()> é nulo", context.requestCallMeta())
chamada antiga: Assert.assertNotNull(context.responseCallMeta())
nova chamada: assertNotNull("Era esperado não nulo, mas " + result280 + " <context.responseCallMeta()> é nulo", context.responseCallMeta())
chamada antiga: Assert.assertNotNull(context.getResponsePayload())
nova chamada: assertNotNull("Era esperado não nulo, mas " + result281 + " <context.getResponsePayload()> é nulo", context.getResponsePayload())
chamada antiga: Assert.assertNotNull(buf)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", buf)
chamada antiga: Assert.assertNotNull(buf.array())
nova chamada: assertNotNull("Era esperado não nulo, mas " + result282 + " <buf.array()> é nulo", buf.array())
chamada antiga: Assert.assertNotNull(partialstr)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", partialstr)
chamada antiga: Assert.assertNotNull(context.responseCallMeta())
nova chamada: assertNotNull("Era esperado não nulo, mas " + result283 + " <context.responseCallMeta()> é nulo", context.responseCallMeta())
chamada antiga: Assert.assertNotNull(context.getRequestPayload())
nova chamada: assertNotNull("Era esperado não nulo, mas " + result284 + " <context.getRequestPayload()> é nulo", context.getRequestPayload())
chamada antiga: Assert.assertNotNull(buf)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", buf)
chamada antiga: Assert.assertNotNull(buf.array())
nova chamada: assertNotNull("Era esperado não nulo, mas " + result285 + " <buf.array()> é nulo", buf.array())
chamada antiga: Assert.assertNotNull(partialstr)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", partialstr)
chamada antiga: Assert.assertNotNull(rpcMeta)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", rpcMeta)
chamada antiga: Assert.assertNotNull(keybuf)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", keybuf)
chamada antiga: fail("A execução falhou por uma causa deliberada", "Should NEVER get here")
nova chamada: fail("A execução falhou por uma causa deliberada", "A execução falhou por uma causa deliberada", "Should NEVER get here")
chamada antiga: assertEquals(specificRecord, deserialized)
nova chamada: assertEquals("Era esperado valores iguais, mas  specificRecord é diferente de " + " deserialized", specificRecord, deserialized)
chamada antiga: assertEquals(stringablesRecord, deserialized)
nova chamada: assertEquals("Era esperado valores iguais, mas  stringablesRecord é diferente de " + " deserialized", stringablesRecord, deserialized)
chamada antiga: Assert.assertTrue(builder.hasName())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result286 + " <builder.hasName()> é falso", builder.hasName())
chamada antiga: Assert.assertEquals("James Gosling", builder.getName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'James Gosling' é diferente de " + result287 + " <builder.getName()>", "James Gosling", builder.getName())
chamada antiga: Assert.assertTrue(builder.hasYearOfBirth())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result288 + " <builder.hasYearOfBirth()> é falso", builder.hasYearOfBirth())
chamada antiga: Assert.assertEquals(1955, builder.getYearOfBirth())
nova chamada: assertEquals("Era esperado valores iguais, mas  1955 é diferente de " + result289 + " <builder.getYearOfBirth()>", 1955, builder.getYearOfBirth())
chamada antiga: Assert.assertFalse(builder.hasCountry())
nova chamada: assertFalse("Era esperado falso, mas " + result290 + " <builder.hasCountry()> é verdadeiro ", builder.hasCountry())
chamada antiga: Assert.assertNull(builder.getCountry())
nova chamada: assertNull("Era esperado nulo, mas " + result291 + " <builder.getCountry()> não é nulo", builder.getCountry())
chamada antiga: Assert.assertTrue(builder.hasState())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result292 + " <builder.hasState()> é falso", builder.hasState())
chamada antiga: Assert.assertEquals("CA", builder.getState())
nova chamada: assertEquals("Era esperado valores iguais, mas  'CA' é diferente de " + result293 + " <builder.getState()>", "CA", builder.getState())
chamada antiga: Assert.assertFalse(builder.hasFriends())
nova chamada: assertFalse("Era esperado falso, mas " + result294 + " <builder.hasFriends()> é verdadeiro ", builder.hasFriends())
chamada antiga: Assert.assertNull(builder.getFriends())
nova chamada: assertNull("Era esperado nulo, mas " + result295 + " <builder.getFriends()> não é nulo", builder.getFriends())
chamada antiga: Assert.assertFalse(builder.hasLanguages())
nova chamada: assertFalse("Era esperado falso, mas " + result296 + " <builder.hasLanguages()> é verdadeiro ", builder.hasLanguages())
chamada antiga: Assert.assertNull(builder.getLanguages())
nova chamada: assertNull("Era esperado nulo, mas " + result297 + " <builder.getLanguages()> não é nulo", builder.getLanguages())
chamada antiga: Assert.assertEquals("James Gosling", person.getName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'James Gosling' é diferente de " + result298 + " <person.getName()>", "James Gosling", person.getName())
chamada antiga: Assert.assertEquals(1955, person.getYearOfBirth())
nova chamada: assertEquals("Era esperado valores iguais, mas  1955 é diferente de " + result299 + " <person.getYearOfBirth()>", 1955, person.getYearOfBirth())
chamada antiga: Assert.assertEquals("US", person.getCountry())
nova chamada: assertEquals("Era esperado valores iguais, mas  'US' é diferente de " + result300 + " <person.getCountry()>", "US", person.getCountry())
chamada antiga: Assert.assertEquals("CA", person.getState())
nova chamada: assertEquals("Era esperado valores iguais, mas  'CA' é diferente de " + result301 + " <person.getState()>", "CA", person.getState())
chamada antiga: Assert.assertNotNull(person.getFriends())
nova chamada: assertNotNull("Era esperado não nulo, mas " + result302 + " <person.getFriends()> é nulo", person.getFriends())
chamada antiga: Assert.assertEquals(0, person.getFriends().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + result303 + " <person.getFriends().size()>", 0, person.getFriends().size())
chamada antiga: Assert.assertNotNull(person.getLanguages())
nova chamada: assertNotNull("Era esperado não nulo, mas " + result304 + " <person.getLanguages()> é nulo", person.getLanguages())
chamada antiga: Assert.assertEquals(2, person.getLanguages().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + result305 + " <person.getLanguages().size()>", 2, person.getLanguages().size())
chamada antiga: Assert.assertEquals("English", person.getLanguages().get(0))
nova chamada: assertEquals("Era esperado valores iguais, mas  'English' é diferente de " + result306 + " <person.getLanguages().get(0)>", "English", person.getLanguages().get(0))
chamada antiga: Assert.assertEquals("Java", person.getLanguages().get(1))
nova chamada: assertEquals("Era esperado valores iguais, mas  'Java' é diferente de " + result307 + " <person.getLanguages().get(1)>", "Java", person.getLanguages().get(1))
chamada antiga: Assert.assertEquals(builder, Person.newBuilder(builder))
nova chamada: assertEquals("Era esperado valores iguais, mas  builder é diferente de " + result308 + " <Person.newBuilder(builder)>", builder, Person.newBuilder(builder))
chamada antiga: Assert.assertEquals(person, Person.newBuilder(person).build())
nova chamada: assertEquals("Era esperado valores iguais, mas  person é diferente de " + result309 + " <Person.newBuilder(person).build()>", person, Person.newBuilder(person).build())
chamada antiga: Assert.assertEquals("James Gosling", builderCopy.getName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'James Gosling' é diferente de " + result310 + " <builderCopy.getName()>", "James Gosling", builderCopy.getName())
chamada antiga: Assert.assertEquals(1955, builderCopy.getYearOfBirth())
nova chamada: assertEquals("Era esperado valores iguais, mas  1955 é diferente de " + result311 + " <builderCopy.getYearOfBirth()>", 1955, builderCopy.getYearOfBirth())
chamada antiga: Assert.assertEquals("US", builderCopy.getCountry())
nova chamada: assertEquals("Era esperado valores iguais, mas  'US' é diferente de " + result312 + " <builderCopy.getCountry()>", "US", builderCopy.getCountry())
chamada antiga: Assert.assertEquals("CA", builderCopy.getState())
nova chamada: assertEquals("Era esperado valores iguais, mas  'CA' é diferente de " + result313 + " <builderCopy.getState()>", "CA", builderCopy.getState())
chamada antiga: Assert.assertNotNull(builderCopy.getFriends())
nova chamada: assertNotNull("Era esperado não nulo, mas " + result314 + " <builderCopy.getFriends()> é nulo", builderCopy.getFriends())
chamada antiga: Assert.assertEquals(0, builderCopy.getFriends().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + result315 + " <builderCopy.getFriends().size()>", 0, builderCopy.getFriends().size())
chamada antiga: Assert.assertFalse(builderCopy.hasFriends())
nova chamada: assertFalse("Era esperado falso, mas " + result316 + " <builderCopy.hasFriends()> é verdadeiro ", builderCopy.hasFriends())
chamada antiga: Assert.assertFalse(builderCopy.hasCountry())
nova chamada: assertFalse("Era esperado falso, mas " + result317 + " <builderCopy.hasCountry()> é verdadeiro ", builderCopy.hasCountry())
chamada antiga: Assert.assertNull(builderCopy.getFriends())
nova chamada: assertNull("Era esperado nulo, mas " + result318 + " <builderCopy.getFriends()> não é nulo", builderCopy.getFriends())
chamada antiga: Assert.assertNull(builderCopy.getCountry())
nova chamada: assertNull("Era esperado nulo, mas " + result319 + " <builderCopy.getCountry()> não é nulo", builderCopy.getCountry())
chamada antiga: Assert.assertNotNull(person2.getFriends())
nova chamada: assertNotNull("Era esperado não nulo, mas " + result320 + " <person2.getFriends()> é nulo", person2.getFriends())
chamada antiga: Assert.assertTrue(person2.getFriends().isEmpty())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result321 + " <person2.getFriends().isEmpty()> é falso", person2.getFriends().isEmpty())
chamada antiga: Assert.assertEquals(datetime, p.getDatetime())
nova chamada: assertEquals("Era esperado valores iguais, mas  datetime é diferente de " + result322 + " <p.getDatetime()>", datetime, p.getDatetime())
chamada antiga: Assert.assertEquals(ProductPage.class, p.getPageContext().getClass())
nova chamada: assertEquals("Era esperado valores iguais, mas  ProductPage.class é diferente de " + result323 + " <p.getPageContext().getClass()>", ProductPage.class, p.getPageContext().getClass())
chamada antiga: Assert.assertEquals(product, ((ProductPage) p.getPageContext()).getProduct())
nova chamada: assertEquals("Era esperado valores iguais, mas  product é diferente de " + result324 + " <((ProductPage) p.getPageContext()).getProduct()>", product, ((ProductPage) p.getPageContext()).getProduct())
chamada antiga: Assert.assertEquals(datetime, p2.getDatetime())
nova chamada: assertEquals("Era esperado valores iguais, mas  datetime é diferente de " + result325 + " <p2.getDatetime()>", datetime, p2.getDatetime())
chamada antiga: Assert.assertEquals(ProductPage.class, p2.getPageContext().getClass())
nova chamada: assertEquals("Era esperado valores iguais, mas  ProductPage.class é diferente de " + result326 + " <p2.getPageContext().getClass()>", ProductPage.class, p2.getPageContext().getClass())
chamada antiga: Assert.assertEquals(product, ((ProductPage) p2.getPageContext()).getProduct())
nova chamada: assertEquals("Era esperado valores iguais, mas  product é diferente de " + result327 + " <((ProductPage) p2.getPageContext()).getProduct()>", product, ((ProductPage) p2.getPageContext()).getProduct())
chamada antiga: Assert.assertEquals(p, p2)
nova chamada: assertEquals("Era esperado valores iguais, mas  p é diferente de " + " p2", p, p2)
chamada antiga: Assert.assertEquals(interop.getArrayField().size(), copy.getArrayField().size())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result328 + " <interop.getArrayField().size()> é diferente de " + result329 + " <copy.getArrayField().size()>", interop.getArrayField().size(), copy.getArrayField().size())
chamada antiga: Assert.assertEquals(interop.getArrayField(), copy.getArrayField())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result330 + " <interop.getArrayField()> é diferente de " + result331 + " <copy.getArrayField()>", interop.getArrayField(), copy.getArrayField())
chamada antiga: Assert.assertEquals(interop.getBoolField(), copy.getBoolField())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result332 + " <interop.getBoolField()> é diferente de " + result333 + " <copy.getBoolField()>", interop.getBoolField(), copy.getBoolField())
chamada antiga: Assert.assertEquals(interop.getBytesField(), copy.getBytesField())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result334 + " <interop.getBytesField()> é diferente de " + result335 + " <copy.getBytesField()>", interop.getBytesField(), copy.getBytesField())
chamada antiga: Assert.assertEquals(interop.getEnumField(), copy.getEnumField())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result336 + " <interop.getEnumField()> é diferente de " + result337 + " <copy.getEnumField()>", interop.getEnumField(), copy.getEnumField())
chamada antiga: Assert.assertEquals(interop.getFixedField(), copy.getFixedField())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result338 + " <interop.getFixedField()> é diferente de " + result339 + " <copy.getFixedField()>", interop.getFixedField(), copy.getFixedField())
chamada antiga: Assert.assertEquals(interop.getIntField(), copy.getIntField())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result340 + " <interop.getIntField()> é diferente de " + result341 + " <copy.getIntField()>", interop.getIntField(), copy.getIntField())
chamada antiga: Assert.assertEquals(interop.getLongField(), copy.getLongField())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result342 + " <interop.getLongField()> é diferente de " + result343 + " <copy.getLongField()>", interop.getLongField(), copy.getLongField())
chamada antiga: Assert.assertEquals(interop.getMapField(), copy.getMapField())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result344 + " <interop.getMapField()> é diferente de " + result345 + " <copy.getMapField()>", interop.getMapField(), copy.getMapField())
chamada antiga: Assert.assertEquals(interop.getRecordField(), copy.getRecordField())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result346 + " <interop.getRecordField()> é diferente de " + result347 + " <copy.getRecordField()>", interop.getRecordField(), copy.getRecordField())
chamada antiga: Assert.assertEquals(interop.getStringField(), copy.getStringField())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result348 + " <interop.getStringField()> é diferente de " + result349 + " <copy.getStringField()>", interop.getStringField(), copy.getStringField())
chamada antiga: Assert.assertEquals(interop.getUnionField(), copy.getUnionField())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result350 + " <interop.getUnionField()> é diferente de " + result351 + " <copy.getUnionField()>", interop.getUnionField(), copy.getUnionField())
chamada antiga: Assert.assertEquals(interop, copy)
nova chamada: assertEquals("Era esperado valores iguais, mas  interop é diferente de " + " copy", interop, copy)
chamada antiga: assertEquals(expectedJson, out.toString("UTF-8"))
nova chamada: assertEquals("Era esperado valores iguais, mas  expectedJson é diferente de " + result352 + " <out.toString('UTF-8')>", expectedJson, out.toString("UTF-8"))
chamada antiga: Assert.assertEquals("value", testError.getValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  'value' é diferente de " + result353 + " <testError.getValue()>", "value", testError.getValue())
chamada antiga: Assert.assertEquals("value", testError.getMessage())
nova chamada: assertEquals("Era esperado valores iguais, mas  'value' é diferente de " + result354 + " <testError.getMessage()>", "value", testError.getMessage())
chamada antiga: Assert.assertEquals("message$", testError.getMessage$())
nova chamada: assertEquals("Era esperado valores iguais, mas  'message$' é diferente de " + result355 + " <testError.getMessage$()>", "message$", testError.getMessage$())
chamada antiga: Assert.assertEquals(testErrorBuilder, TestError.newBuilder(testErrorBuilder))
nova chamada: assertEquals("Era esperado valores iguais, mas  testErrorBuilder é diferente de " + result356 + " <TestError.newBuilder(testErrorBuilder)>", testErrorBuilder, TestError.newBuilder(testErrorBuilder))
chamada antiga: Assert.assertEquals(testErrorBuilder, TestError.newBuilder(testError))
nova chamada: assertEquals("Era esperado valores iguais, mas  testErrorBuilder é diferente de " + result357 + " <TestError.newBuilder(testError)>", testErrorBuilder, TestError.newBuilder(testError))
chamada antiga: Assert.assertEquals(error, TestError.newBuilder().setValue("value").setCause(new NullPointerException()).setMessage$("message").build())
nova chamada: assertEquals("Era esperado valores iguais, mas  error é diferente de " + result358 + " <TestError.newBuilder().setValue('value').setCause(new NullPointerException()).setMessage$('message').build()>", error, TestError.newBuilder().setValue("value").setCause(new NullPointerException()).setMessage$("message").build())
chamada antiga: Assert.assertEquals(TestRecord.getClassSchema(), TestRecord.SCHEMA$)
nova chamada: assertEquals("Era esperado valores iguais, mas " + result359 + " <TestRecord.getClassSchema()> é diferente de " + " TestRecord.SCHEMA$", TestRecord.getClassSchema(), TestRecord.SCHEMA$)
chamada antiga: Assert.assertEquals(MD5.getClassSchema(), MD5.SCHEMA$)
nova chamada: assertEquals("Era esperado valores iguais, mas " + result360 + " <MD5.getClassSchema()> é diferente de " + " MD5.SCHEMA$", MD5.getClassSchema(), MD5.SCHEMA$)
chamada antiga: Assert.assertEquals(Kind.getClassSchema(), Kind.SCHEMA$)
nova chamada: assertEquals("Era esperado valores iguais, mas " + result361 + " <Kind.getClassSchema()> é diferente de " + " Kind.SCHEMA$", Kind.getClassSchema(), Kind.SCHEMA$)
chamada antiga: Assert.assertEquals(before, after)
nova chamada: assertEquals("Era esperado valores iguais, mas  before é diferente de " + " after", before, after)
chamada antiga: Assert.assertEquals(Reserved.default$, SpecificData.get().createEnum("default", Reserved.SCHEMA$))
nova chamada: assertEquals("Era esperado valores iguais, mas  Reserved.default$ é diferente de " + result362 + " <SpecificData.get().createEnum('default', Reserved.SCHEMA$)>", Reserved.default$, SpecificData.get().createEnum("default", Reserved.SCHEMA$))
chamada antiga: assertEquals(nestedEvolve1.getRootName(), "RootName")
nova chamada: assertEquals("Era esperado valores iguais, mas " + result363 + " <nestedEvolve1.getRootName()> é diferente de " + " 'RootName'", nestedEvolve1.getRootName(), "RootName")
chamada antiga: assertEquals(nestedEvolve1.getNested().getName(), "Name")
nova chamada: assertEquals("Era esperado valores iguais, mas " + result364 + " <nestedEvolve1.getNested().getName()> é diferente de " + " 'Name'", nestedEvolve1.getNested().getName(), "Name")
chamada antiga: assertEquals(nestedEvolve1.getNested().getValue(), 1)
nova chamada: assertEquals("Era esperado valores iguais, mas " + result365 + " <nestedEvolve1.getNested().getValue()> é diferente de " + " 1", nestedEvolve1.getNested().getValue(), 1)
chamada antiga: Assert.assertTrue(testErrorBuilder.hasValue())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result366 + " <testErrorBuilder.hasValue()> é falso", testErrorBuilder.hasValue())
chamada antiga: Assert.assertNotNull(testErrorBuilder.getValue())
nova chamada: assertNotNull("Era esperado não nulo, mas " + result367 + " <testErrorBuilder.getValue()> é nulo", testErrorBuilder.getValue())
chamada antiga: Assert.assertTrue(testErrorBuilder.hasCause())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result368 + " <testErrorBuilder.hasCause()> é falso", testErrorBuilder.hasCause())
chamada antiga: Assert.assertNotNull(testErrorBuilder.getCause())
nova chamada: assertNotNull("Era esperado não nulo, mas " + result369 + " <testErrorBuilder.getCause()> é nulo", testErrorBuilder.getCause())
chamada antiga: Assert.assertTrue(testErrorBuilder.hasMessage$())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result370 + " <testErrorBuilder.hasMessage$()> é falso", testErrorBuilder.hasMessage$())
chamada antiga: Assert.assertNotNull(testErrorBuilder.getMessage$())
nova chamada: assertNotNull("Era esperado não nulo, mas " + result371 + " <testErrorBuilder.getMessage$()> é nulo", testErrorBuilder.getMessage$())
chamada antiga: Assert.assertFalse(testErrorBuilder.hasValue())
nova chamada: assertFalse("Era esperado falso, mas " + result372 + " <testErrorBuilder.hasValue()> é verdadeiro ", testErrorBuilder.hasValue())
chamada antiga: Assert.assertFalse(testErrorBuilder.hasCause())
nova chamada: assertFalse("Era esperado falso, mas " + result373 + " <testErrorBuilder.hasCause()> é verdadeiro ", testErrorBuilder.hasCause())
chamada antiga: Assert.assertFalse(testErrorBuilder.hasMessage$())
nova chamada: assertFalse("Era esperado falso, mas " + result374 + " <testErrorBuilder.hasMessage$()> é verdadeiro ", testErrorBuilder.hasMessage$())
chamada antiga: assertEquals(responder.getSpecificData().getClassLoader(), loader)
nova chamada: assertEquals("Era esperado valores iguais, mas " + result375 + " <responder.getSpecificData().getClassLoader()> é diferente de " + " loader", responder.getSpecificData().getClassLoader(), loader)
chamada antiga: assertEquals(requestor.getSpecificData().getClassLoader(), loader)
nova chamada: assertEquals("Era esperado valores iguais, mas " + result376 + " <requestor.getSpecificData().getClassLoader()> é diferente de " + " loader", requestor.getSpecificData().getClassLoader(), loader)
chamada antiga: assertEquals(Simple.PROTOCOL, SpecificRequestor.getRemote(proxy))
nova chamada: assertEquals("Era esperado valores iguais, mas  Simple.PROTOCOL é diferente de " + result377 + " <SpecificRequestor.getRemote(proxy)>", Simple.PROTOCOL, SpecificRequestor.getRemote(proxy))
chamada antiga: assertEquals("goodbye", response)
nova chamada: assertEquals("Era esperado valores iguais, mas  'goodbye' é diferente de " + " response", "goodbye", response)
chamada antiga: assertEquals(record, echoed)
nova chamada: assertEquals("Era esperado valores iguais, mas  record é diferente de " + " echoed", record, echoed)
chamada antiga: assertEquals(record.hashCode(), echoed.hashCode())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result378 + " <record.hashCode()> é diferente de " + result379 + " <echoed.hashCode()>", record.hashCode(), echoed.hashCode())
chamada antiga: assertEquals(3, result)
nova chamada: assertEquals("Era esperado valores iguais, mas  3 é diferente de " + " result", 3, result)
chamada antiga: assertEquals(data, echoed)
nova chamada: assertEquals("Era esperado valores iguais, mas  data é diferente de " + " echoed", data, echoed)
chamada antiga: assertEquals(data, echoed)
nova chamada: assertEquals("Era esperado valores iguais, mas  data é diferente de " + " echoed", data, echoed)
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", error)
chamada antiga: assertEquals("an error", error.getMessage$())
nova chamada: assertEquals("Era esperado valores iguais, mas  'an error' é diferente de " + result380 + " <error.getMessage$()>", "an error", error.getMessage$())
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", error)
chamada antiga: assertTrue(error.toString().contains("foo"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result381 + " <error.toString().contains('foo')> é falso", error.toString().contains("foo"))
chamada antiga: assertEquals(2, ackCount)
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + " ackCount", 2, ackCount)
chamada antiga: Assert.assertNull(testErrorBuilder.getValue())
nova chamada: assertNull("Era esperado nulo, mas " + result382 + " <testErrorBuilder.getValue()> não é nulo", testErrorBuilder.getValue())
chamada antiga: Assert.assertNull(testErrorBuilder.getCause())
nova chamada: assertNull("Era esperado nulo, mas " + result383 + " <testErrorBuilder.getCause()> não é nulo", testErrorBuilder.getCause())
chamada antiga: Assert.assertNull(testErrorBuilder.getMessage$())
nova chamada: assertNull("Era esperado nulo, mas " + result384 + " <testErrorBuilder.getMessage$()> não é nulo", testErrorBuilder.getMessage$())
chamada antiga: assertEquals(Schema.create(Type.NULL), new Schema.Parser().parse("\"null\""))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result385 + " <Schema.create(Type.NULL)> é diferente de " + result386 + " <new Schema.Parser().parse('\'null\'')>", Schema.create(Type.NULL), new Schema.Parser().parse("\"null\""))
chamada antiga: assertEquals(Schema.create(Type.NULL), new Schema.Parser().parse("{\"type\":\"null\"}"))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result387 + " <Schema.create(Type.NULL)> é diferente de " + result388 + " <new Schema.Parser().parse('{\'type\':\'null\'}')>", Schema.create(Type.NULL), new Schema.Parser().parse("{\"type\":\"null\"}"))
chamada antiga: assertEquals(Schema.create(Type.BOOLEAN), new Schema.Parser().parse("\"boolean\""))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result389 + " <Schema.create(Type.BOOLEAN)> é diferente de " + result390 + " <new Schema.Parser().parse('\'boolean\'')>", Schema.create(Type.BOOLEAN), new Schema.Parser().parse("\"boolean\""))
chamada antiga: assertEquals(Schema.create(Type.BOOLEAN), new Schema.Parser().parse("{\"type\":\"boolean\"}"))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result391 + " <Schema.create(Type.BOOLEAN)> é diferente de " + result392 + " <new Schema.Parser().parse('{\'type\':\'boolean\'}')>", Schema.create(Type.BOOLEAN), new Schema.Parser().parse("{\"type\":\"boolean\"}"))
chamada antiga: assertEquals(Schema.create(Type.STRING), new Schema.Parser().parse("\"string\""))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result393 + " <Schema.create(Type.STRING)> é diferente de " + result394 + " <new Schema.Parser().parse('\'string\'')>", Schema.create(Type.STRING), new Schema.Parser().parse("\"string\""))
chamada antiga: assertEquals(Schema.create(Type.STRING), new Schema.Parser().parse("{\"type\":\"string\"}"))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result395 + " <Schema.create(Type.STRING)> é diferente de " + result396 + " <new Schema.Parser().parse('{\'type\':\'string\'}')>", Schema.create(Type.STRING), new Schema.Parser().parse("{\"type\":\"string\"}"))
chamada antiga: assertEquals(Schema.create(Type.BYTES), new Schema.Parser().parse("\"bytes\""))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result397 + " <Schema.create(Type.BYTES)> é diferente de " + result398 + " <new Schema.Parser().parse('\'bytes\'')>", Schema.create(Type.BYTES), new Schema.Parser().parse("\"bytes\""))
chamada antiga: assertEquals(Schema.create(Type.BYTES), new Schema.Parser().parse("{\"type\":\"bytes\"}"))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result399 + " <Schema.create(Type.BYTES)> é diferente de " + result400 + " <new Schema.Parser().parse('{\'type\':\'bytes\'}')>", Schema.create(Type.BYTES), new Schema.Parser().parse("{\"type\":\"bytes\"}"))
chamada antiga: assertEquals(Schema.create(Type.INT), new Schema.Parser().parse("\"int\""))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result401 + " <Schema.create(Type.INT)> é diferente de " + result402 + " <new Schema.Parser().parse('\'int\'')>", Schema.create(Type.INT), new Schema.Parser().parse("\"int\""))
chamada antiga: assertEquals(Schema.create(Type.INT), new Schema.Parser().parse("{\"type\":\"int\"}"))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result403 + " <Schema.create(Type.INT)> é diferente de " + result404 + " <new Schema.Parser().parse('{\'type\':\'int\'}')>", Schema.create(Type.INT), new Schema.Parser().parse("{\"type\":\"int\"}"))
chamada antiga: assertEquals(Schema.create(Type.LONG), new Schema.Parser().parse("\"long\""))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result405 + " <Schema.create(Type.LONG)> é diferente de " + result406 + " <new Schema.Parser().parse('\'long\'')>", Schema.create(Type.LONG), new Schema.Parser().parse("\"long\""))
chamada antiga: assertEquals(Schema.create(Type.LONG), new Schema.Parser().parse("{\"type\":\"long\"}"))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result407 + " <Schema.create(Type.LONG)> é diferente de " + result408 + " <new Schema.Parser().parse('{\'type\':\'long\'}')>", Schema.create(Type.LONG), new Schema.Parser().parse("{\"type\":\"long\"}"))
chamada antiga: assertEquals(Schema.create(Type.FLOAT), new Schema.Parser().parse("\"float\""))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result409 + " <Schema.create(Type.FLOAT)> é diferente de " + result410 + " <new Schema.Parser().parse('\'float\'')>", Schema.create(Type.FLOAT), new Schema.Parser().parse("\"float\""))
chamada antiga: assertEquals(Schema.create(Type.FLOAT), new Schema.Parser().parse("{\"type\":\"float\"}"))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result411 + " <Schema.create(Type.FLOAT)> é diferente de " + result412 + " <new Schema.Parser().parse('{\'type\':\'float\'}')>", Schema.create(Type.FLOAT), new Schema.Parser().parse("{\"type\":\"float\"}"))
chamada antiga: assertEquals(Schema.create(Type.DOUBLE), new Schema.Parser().parse("\"double\""))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result413 + " <Schema.create(Type.DOUBLE)> é diferente de " + result414 + " <new Schema.Parser().parse('\'double\'')>", Schema.create(Type.DOUBLE), new Schema.Parser().parse("\"double\""))
chamada antiga: assertEquals(Schema.create(Type.DOUBLE), new Schema.Parser().parse("{\"type\":\"double\"}"))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result415 + " <Schema.create(Type.DOUBLE)> é diferente de " + result416 + " <new Schema.Parser().parse('{\'type\':\'double\'}')>", Schema.create(Type.DOUBLE), new Schema.Parser().parse("{\"type\":\"double\"}"))
chamada antiga: assertEquals("bar", schema.getField("f").getProp("foo"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'bar' é diferente de " + result417 + " <schema.getField('f').getProp('foo')>", "bar", schema.getField("f").getProp("foo"))
chamada antiga: assertEquals("bar", new Schema.Parser().parse(schema.toString()).getField("f").getProp("foo"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'bar' é diferente de " + result418 + " <new Schema.Parser().parse(schema.toString()).getField('f').getProp('foo')>", "bar", new Schema.Parser().parse(schema.toString()).getField("f").getProp("foo"))
chamada antiga: assertEquals("boo", schema.getField("f").getProp("baz"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'boo' é diferente de " + result419 + " <schema.getField('f').getProp('baz')>", "boo", schema.getField("f").getProp("baz"))
chamada antiga: assertEquals(s1, s2)
nova chamada: assertEquals("Era esperado valores iguais, mas  s1 é diferente de " + " s2", s1, s2)
chamada antiga: assertNull(s.getProp("foo"))
nova chamada: assertNull("Era esperado nulo, mas " + result420 + " <s.getProp('foo')> não é nulo", s.getProp("foo"))
chamada antiga: assertEquals(json, s.toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  json é diferente de " + result421 + " <s.toString()>", json, s.toString())
chamada antiga: assertEquals(new Schema.Parser().parse("\"boolean\""), s)
nova chamada: assertEquals("Era esperado valores iguais, mas " + result422 + " <new Schema.Parser().parse('\'boolean\'')> é diferente de " + " s", new Schema.Parser().parse("\"boolean\""), s)
chamada antiga: assertEquals("p.Z", xs.getField("g").schema().getFullName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'p.Z' é diferente de " + result423 + " <xs.getField('g').schema().getFullName()>", "p.Z", xs.getField("g").schema().getFullName())
chamada antiga: assertEquals("q.Z", ys.getField("f").schema().getFullName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'q.Z' é diferente de " + result424 + " <ys.getField('f').schema().getFullName()>", "q.Z", ys.getField("f").schema().getFullName())
chamada antiga: assertEquals(xs, new Schema.Parser().parse(xs.toString()))
nova chamada: assertEquals("Era esperado valores iguais, mas  xs é diferente de " + result425 + " <new Schema.Parser().parse(xs.toString())>", xs, new Schema.Parser().parse(xs.toString()))
chamada antiga: assertEquals(outer, new Schema.Parser().parse(outer.toString()))
nova chamada: assertEquals("Era esperado valores iguais, mas  outer é diferente de " + result426 + " <new Schema.Parser().parse(outer.toString())>", outer, new Schema.Parser().parse(outer.toString()))
chamada antiga: assertEquals(outer, new Schema.Parser().parse(outer.toString()))
nova chamada: assertEquals("Era esperado valores iguais, mas  outer é diferente de " + result427 + " <new Schema.Parser().parse(outer.toString())>", outer, new Schema.Parser().parse(outer.toString()))
chamada antiga: assertEquals(outer, new Schema.Parser().parse(outer.toString()))
nova chamada: assertEquals("Era esperado valores iguais, mas  outer é diferente de " + result428 + " <new Schema.Parser().parse(outer.toString())>", outer, new Schema.Parser().parse(outer.toString()))
chamada antiga: assertEquals(outer, new Schema.Parser().parse(outer.toString()))
nova chamada: assertEquals("Era esperado valores iguais, mas  outer é diferente de " + result429 + " <new Schema.Parser().parse(outer.toString())>", outer, new Schema.Parser().parse(outer.toString()))
chamada antiga: assertEquals(nullOuter, new Schema.Parser().parse(nullOuter.toString()))
nova chamada: assertEquals("Era esperado valores iguais, mas  nullOuter é diferente de " + result430 + " <new Schema.Parser().parse(nullOuter.toString())>", nullOuter, new Schema.Parser().parse(nullOuter.toString()))
chamada antiga: assertEquals(nullOuter, new Schema.Parser().parse(nullOuter.toString()))
nova chamada: assertEquals("Era esperado valores iguais, mas  nullOuter é diferente de " + result431 + " <new Schema.Parser().parse(nullOuter.toString())>", nullOuter, new Schema.Parser().parse(nullOuter.toString()))
chamada antiga: assertEquals("x.Y", u.getFullName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'x.Y' é diferente de " + result432 + " <u.getFullName()>", "x.Y", u.getFullName())
chamada antiga: fail("Should not have parsed: " + json)
nova chamada: fail("A execução falhou por uma causa deliberada", "Should not have parsed: " + json)
chamada antiga: assertEquals("This is not a world record.", schema.getDoc())
nova chamada: assertEquals("Era esperado valores iguais, mas  'This is not a world record.' é diferente de " + result433 + " <schema.getDoc()>", "This is not a world record.", schema.getDoc())
chamada antiga: assertEquals("Inner Fixed", schema.getField("inner_fixed").doc())
nova chamada: assertEquals("Era esperado valores iguais, mas  'Inner Fixed' é diferente de " + result434 + " <schema.getField('inner_fixed').doc()>", "Inner Fixed", schema.getField("inner_fixed").doc())
chamada antiga: assertEquals("Very Inner Fixed", schema.getField("inner_fixed").schema().getDoc())
nova chamada: assertEquals("Era esperado valores iguais, mas  'Very Inner Fixed' é diferente de " + result435 + " <schema.getField('inner_fixed').schema().getDoc()>", "Very Inner Fixed", schema.getField("inner_fixed").schema().getDoc())
chamada antiga: assertEquals("Inner String", schema.getField("inner_string").doc())
nova chamada: assertEquals("Era esperado valores iguais, mas  'Inner String' é diferente de " + result436 + " <schema.getField('inner_string').doc()>", "Inner String", schema.getField("inner_string").doc())
chamada antiga: assertEquals("Inner Enum", schema.getField("inner_enum").doc())
nova chamada: assertEquals("Era esperado valores iguais, mas  'Inner Enum' é diferente de " + result437 + " <schema.getField('inner_enum').doc()>", "Inner Enum", schema.getField("inner_enum").doc())
chamada antiga: assertEquals("Very Inner Enum", schema.getField("inner_enum").schema().getDoc())
nova chamada: assertEquals("Era esperado valores iguais, mas  'Very Inner Enum' é diferente de " + result438 + " <schema.getField('inner_enum').schema().getDoc()>", "Very Inner Enum", schema.getField("inner_enum").schema().getDoc())
chamada antiga: assertEquals("Inner Union", schema.getField("inner_union").doc())
nova chamada: assertEquals("Era esperado valores iguais, mas  'Inner Union' é diferente de " + result439 + " <schema.getField('inner_union').doc()>", "Inner Union", schema.getField("inner_union").doc())
chamada antiga: assertEquals("test", schema.getField("f").doc())
nova chamada: assertEquals("Era esperado valores iguais, mas  'test' é diferente de " + result440 + " <schema.getField('f').doc()>", "test", schema.getField("f").doc())
chamada antiga: assertEquals("test", schema.getField("f").doc())
nova chamada: assertEquals("Era esperado valores iguais, mas  'test' é diferente de " + result441 + " <schema.getField('f').doc()>", "test", schema.getField("f").doc())
chamada antiga: assertEquals(s1.getAliases(), Collections.emptySet())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result442 + " <s1.getAliases()> é diferente de " + result443 + " <Collections.emptySet()>", s1.getAliases(), Collections.emptySet())
chamada antiga: assertEquals(s1.getField("f").aliases(), Collections.emptySet())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result444 + " <s1.getField('f').aliases()> é diferente de " + result445 + " <Collections.emptySet()>", s1.getField("f").aliases(), Collections.emptySet())
chamada antiga: assertEquals(s2.getAliases(), Collections.singleton("a.b"))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result446 + " <s2.getAliases()> é diferente de " + result447 + " <Collections.singleton('a.b')>", s2.getAliases(), Collections.singleton("a.b"))
chamada antiga: assertEquals(s2.getField("g").aliases(), Collections.singleton("f"))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result448 + " <s2.getField('g').aliases()> é diferente de " + result449 + " <Collections.singleton('f')>", s2.getField("g").aliases(), Collections.singleton("f"))
chamada antiga: assertNotSame(s2, s3)
nova chamada: assertNotSame("Era esperado objetos diferentes, mas  s2 é igual a " + " s3", s2, s3)
chamada antiga: assertEquals(s2, s3)
nova chamada: assertEquals("Era esperado valores iguais, mas  s2 é diferente de " + " s3", s2, s3)
chamada antiga: assertNotSame(s2, s3)
nova chamada: assertNotSame("Era esperado objetos diferentes, mas  s2 é igual a " + " s3", s2, s3)
chamada antiga: assertEquals(s2, s3)
nova chamada: assertEquals("Era esperado valores iguais, mas  s2 é diferente de " + " s3", s2, s3)
chamada antiga: assertNotSame(s2, s3)
nova chamada: assertNotSame("Era esperado objetos diferentes, mas  s2 é igual a " + " s3", s2, s3)
chamada antiga: assertEquals(s2, s3)
nova chamada: assertEquals("Era esperado valores iguais, mas  s2 é diferente de " + " s3", s2, s3)
chamada antiga: assertEquals(s1.getAliases(), Collections.emptySet())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result450 + " <s1.getAliases()> é diferente de " + result451 + " <Collections.emptySet()>", s1.getAliases(), Collections.emptySet())
chamada antiga: assertEquals(s2.getAliases(), Collections.singleton("a"))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result452 + " <s2.getAliases()> é diferente de " + result453 + " <Collections.singleton('a')>", s2.getAliases(), Collections.singleton("a"))
chamada antiga: assertNotSame(s2, s3)
nova chamada: assertNotSame("Era esperado objetos diferentes, mas  s2 é igual a " + " s3", s2, s3)
chamada antiga: assertEquals(s2, s3)
nova chamada: assertEquals("Era esperado valores iguais, mas  s2 é diferente de " + " s3", s2, s3)
chamada antiga: assertNull(s0.getProp("foo"))
nova chamada: assertNull("Era esperado nulo, mas " + result454 + " <s0.getProp('foo')> não é nulo", s0.getProp("foo"))
chamada antiga: assertEquals("bar", s1.getProp("foo"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'bar' é diferente de " + result455 + " <s1.getProp('foo')>", "bar", s1.getProp("foo"))
chamada antiga: assertNotEquals(s0, s1)
nova chamada: assertNotEquals("Era esperado valores diferentes, mas  s0 é igual a " + " s1", s0, s1)
chamada antiga: assertEquals("bar", s2.getProp("foo"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'bar' é diferente de " + result456 + " <s2.getProp('foo')>", "bar", s2.getProp("foo"))
chamada antiga: assertEquals(s1, s2)
nova chamada: assertEquals("Era esperado valores iguais, mas  s1 é diferente de " + " s2", s1, s2)
chamada antiga: assertNotEquals(s0, s2)
nova chamada: assertNotEquals("Era esperado valores diferentes, mas  s0 é igual a " + " s2", s0, s2)
chamada antiga: assertEquals(schema, names.get(new Schema.Name("Name", "space")))
nova chamada: assertEquals("Era esperado valores iguais, mas  schema é diferente de " + result457 + " <names.get(new Schema.Name('Name', 'space'))>", schema, names.get(new Schema.Name("Name", "space")))
chamada antiga: assertEquals(schema, names.get("Name"))
nova chamada: assertEquals("Era esperado valores iguais, mas  schema é diferente de " + result458 + " <names.get('Name')>", schema, names.get("Name"))
chamada antiga: assertEquals(schema, names.get(new Schema.Name("Name", "")))
nova chamada: assertEquals("Era esperado valores iguais, mas  schema é diferente de " + result459 + " <names.get(new Schema.Name('Name', ''))>", schema, names.get(new Schema.Name("Name", "")))
chamada antiga: assertEquals(schema, names.get("Name"))
nova chamada: assertEquals("Era esperado valores iguais, mas  schema é diferente de " + result460 + " <names.get('Name')>", schema, names.get("Name"))
chamada antiga: assertNull(names.get("Name"))
nova chamada: assertNull("Era esperado nulo, mas " + result461 + " <names.get('Name')> não é nulo", names.get("Name"))
chamada antiga: assertEquals(record, echoed)
nova chamada: assertEquals("Era esperado valores iguais, mas  record é diferente de " + " echoed", record, echoed)
chamada antiga: assertEquals(record.hashCode(), echoed.hashCode())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result462 + " <record.hashCode()> é diferente de " + result463 + " <echoed.hashCode()>", record.hashCode(), echoed.hashCode())
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", error)
chamada antiga: assertEquals("an error", error.getMessage$())
nova chamada: assertEquals("Era esperado valores iguais, mas  'an error' é diferente de " + result464 + " <error.getMessage$()>", "an error", error.getMessage$())
chamada antiga: assertEquals(protocol.getDoc(), "Protocol used for testing.")
nova chamada: assertEquals("Era esperado valores iguais, mas " + result465 + " <protocol.getDoc()> é diferente de " + " 'Protocol used for testing.'", protocol.getDoc(), "Protocol used for testing.")
chamada antiga: assertEquals(6, protocol.getMessages().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  6 é diferente de " + result466 + " <protocol.getMessages().size()>", 6, protocol.getMessages().size())
chamada antiga: assertEquals("Pretend you're in a cave!", protocol.getMessages().get("echo").getDoc())
nova chamada: assertEquals("Era esperado valores iguais, mas  'Pretend you're in a cave!' é diferente de " + result467 + " <protocol.getMessages().get('echo').getDoc()>", "Pretend you're in a cave!", protocol.getMessages().get("echo").getDoc())
chamada antiga: assertTrue(m.isOneWay())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result468 + " <m.isOneWay()> é falso", m.isOneWay())
chamada antiga: assertTrue(m.isOneWay())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result469 + " <m.isOneWay()> é falso", m.isOneWay())
chamada antiga: assertNotNull(msg)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", msg)
chamada antiga: assertNotNull(field)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", field)
chamada antiga: assertTrue(field.aliases().contains("salute"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result470 + " <field.aliases().contains('salute')> é falso", field.aliases().contains("salute"))
chamada antiga: assertNotNull(msg)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", msg)
chamada antiga: assertNotNull(field)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", field)
chamada antiga: assertEquals("customValue", field.getProp("customProp"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'customValue' é diferente de " + result471 + " <field.getProp('customProp')>", "customValue", field.getProp("customProp"))
chamada antiga: assertEquals(duplicate, original)
nova chamada: assertEquals("Era esperado valores iguais, mas  duplicate é diferente de " + " original", duplicate, original)
chamada antiga: assertEquals("\\\"", SpecificCompiler.javaEscape("\""))
nova chamada: assertEquals("Era esperado valores iguais, mas  '\\\'' é diferente de " + result472 + " <SpecificCompiler.javaEscape('\'')>", "\\\"", SpecificCompiler.javaEscape("\""))
chamada antiga: assertEquals("foo/bar/Baz.java".replace("/", File.separator), compiler.makePath("Baz", "foo.bar"))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result473 + " <'foo/bar/Baz.java'.replace('/', File.separator)> é diferente de " + result474 + " <compiler.makePath('Baz', 'foo.bar')>", "foo/bar/Baz.java".replace("/", File.separator), compiler.makePath("Baz", "foo.bar"))
chamada antiga: assertEquals("baz.java", compiler.makePath("baz", ""))
nova chamada: assertEquals("Era esperado valores iguais, mas  'baz.java' é diferente de " + result475 + " <compiler.makePath('baz', '')>", "baz.java", compiler.makePath("baz", ""))
chamada antiga: assertEquals(0, new SpecificCompiler(new Schema.Parser().parse("\"double\"")).compile().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + result476 + " <new SpecificCompiler(new Schema.Parser().parse('\'double\'')).compile().size()>", 0, new SpecificCompiler(new Schema.Parser().parse("\"double\"")).compile().size())
chamada antiga: assertEquals(1, outputs.size())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result477 + " <outputs.size()>", 1, outputs.size())
chamada antiga: assertEquals(o.path, "Test.java")
nova chamada: assertEquals("Era esperado valores iguais, mas  o.path é diferente de " + " 'Test.java'", o.path, "Test.java")
chamada antiga: assertTrue(o.contents.contains("public enum Test"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result478 + " <o.contents.contains('public enum Test')> é falso", o.contents.contains("public enum Test"))
chamada antiga: assertEquals("foo", SpecificCompiler.mangle("foo"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'foo' é diferente de " + result479 + " <SpecificCompiler.mangle('foo')>", "foo", SpecificCompiler.mangle("foo"))
chamada antiga: assertEquals("goto$", SpecificCompiler.mangle("goto"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'goto$' é diferente de " + result480 + " <SpecificCompiler.mangle('goto')>", "goto$", SpecificCompiler.mangle("goto"))
chamada antiga: assertTrue(errType.contains("public class finally$ extends org.apache.avro.specific.SpecificExceptionBase"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result481 + " <errType.contains('public class finally$ extends org.apache.avro.specific.SpecificExceptionBase')> é falso", errType.contains("public class finally$ extends org.apache.avro.specific.SpecificExceptionBase"))
chamada antiga: assertTrue(errType.contains("private boolean catch$;"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result482 + " <errType.contains('private boolean catch$;')> é falso", errType.contains("private boolean catch$;"))
chamada antiga: assertTrue(protocol.contains("java.lang.CharSequence goto$(java.lang.CharSequence break$)"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result483 + " <protocol.contains('java.lang.CharSequence goto$(java.lang.CharSequence break$)')> é falso", protocol.contains("java.lang.CharSequence goto$(java.lang.CharSequence break$)"))
chamada antiga: assertTrue(protocol.contains("public interface default$"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result484 + " <protocol.contains('public interface default$')> é falso", protocol.contains("public interface default$"))
chamada antiga: assertTrue(protocol.contains(" finally$"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result485 + " <protocol.contains(' finally$')> é falso", protocol.contains(" finally$"))
chamada antiga: assertEquals(1, outputs.size())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result486 + " <outputs.size()>", 1, outputs.size())
chamada antiga: assertTrue(contents.contains("private java.lang.CharSequence package$;"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result487 + " <contents.contains('private java.lang.CharSequence package$;')> é falso", contents.contains("private java.lang.CharSequence package$;"))
chamada antiga: assertTrue(contents.contains("class volatile$ extends"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result488 + " <contents.contains('class volatile$ extends')> é falso", contents.contains("class volatile$ extends"))
chamada antiga: assertTrue(contents.contains("volatile$ short$;"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result489 + " <contents.contains('volatile$ short$;')> é falso", contents.contains("volatile$ short$;"))
chamada antiga: assertEquals(1, outputs.size())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result490 + " <outputs.size()>", 1, outputs.size())
chamada antiga: assertTrue(contents.contains("new$"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result491 + " <contents.contains('new$')> é falso", contents.contains("new$"))
chamada antiga: assertEquals(3, outputs.size())
nova chamada: assertEquals("Era esperado valores iguais, mas  3 é diferente de " + result492 + " <outputs.size()>", 3, outputs.size())
chamada antiga: assertEquals(3, count)
nova chamada: assertEquals("Era esperado valores iguais, mas  3 é diferente de " + " count", 3, count)
chamada antiga: assertEquals(6, out.size())
nova chamada: assertEquals("Era esperado valores iguais, mas  6 é diferente de " + result493 + " <out.size()>", 6, out.size())
chamada antiga: assertTrue(!outputFile.exists())
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", !outputFile.exists())
chamada antiga: assertTrue(!outputDir.exists())
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", !outputDir.exists())
chamada antiga: assertTrue(outputDir.exists())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result494 + " <outputDir.exists()> é falso", outputDir.exists())
chamada antiga: assertTrue(outputFile.exists())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result495 + " <outputFile.exists()> é falso", outputFile.exists())
chamada antiga: assertEquals(lastModified, outputFile.lastModified())
nova chamada: assertEquals("Era esperado valores iguais, mas  lastModified é diferente de " + result496 + " <outputFile.lastModified()>", lastModified, outputFile.lastModified())
chamada antiga: assertTrue(lastModified != outputFile.lastModified())
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", lastModified != outputFile.lastModified())
chamada antiga: assertEquals("getHeight", SpecificCompiler.generateGetMethod(createRecord("test", false, height), height))
nova chamada: assertEquals("Era esperado valores iguais, mas  'getHeight' é diferente de " + result497 + " <SpecificCompiler.generateGetMethod(createRecord('test', false, height), height)>", "getHeight", SpecificCompiler.generateGetMethod(createRecord("test", false, height), height))
chamada antiga: assertEquals("getHeightAndWidth", SpecificCompiler.generateGetMethod(createRecord("test", false, height_and_width), height_and_width))
nova chamada: assertEquals("Era esperado valores iguais, mas  'getHeightAndWidth' é diferente de " + result498 + " <SpecificCompiler.generateGetMethod(createRecord('test', false, height_and_width), height_and_width)>", "getHeightAndWidth", SpecificCompiler.generateGetMethod(createRecord("test", false, height_and_width), height_and_width))
chamada antiga: assertEquals("getMessage", SpecificCompiler.generateGetMethod(createRecord("test", false, message), message))
nova chamada: assertEquals("Era esperado valores iguais, mas  'getMessage' é diferente de " + result499 + " <SpecificCompiler.generateGetMethod(createRecord('test', false, message), message)>", "getMessage", SpecificCompiler.generateGetMethod(createRecord("test", false, message), message))
chamada antiga: assertEquals("getMessage$", SpecificCompiler.generateGetMethod(createRecord("test", true, message), message))
nova chamada: assertEquals("Era esperado valores iguais, mas  'getMessage$' é diferente de " + result500 + " <SpecificCompiler.generateGetMethod(createRecord('test', true, message), message)>", "getMessage$", SpecificCompiler.generateGetMethod(createRecord("test", true, message), message))
chamada antiga: assertEquals("getCause", SpecificCompiler.generateGetMethod(createRecord("test", false, cause), cause))
nova chamada: assertEquals("Era esperado valores iguais, mas  'getCause' é diferente de " + result501 + " <SpecificCompiler.generateGetMethod(createRecord('test', false, cause), cause)>", "getCause", SpecificCompiler.generateGetMethod(createRecord("test", false, cause), cause))
chamada antiga: assertEquals("getCause$", SpecificCompiler.generateGetMethod(createRecord("test", true, cause), cause))
nova chamada: assertEquals("Era esperado valores iguais, mas  'getCause$' é diferente de " + result502 + " <SpecificCompiler.generateGetMethod(createRecord('test', true, cause), cause)>", "getCause$", SpecificCompiler.generateGetMethod(createRecord("test", true, cause), cause))
chamada antiga: assertEquals("getClass$", SpecificCompiler.generateGetMethod(createRecord("test", false, clasz), clasz))
nova chamada: assertEquals("Era esperado valores iguais, mas  'getClass$' é diferente de " + result503 + " <SpecificCompiler.generateGetMethod(createRecord('test', false, clasz), clasz)>", "getClass$", SpecificCompiler.generateGetMethod(createRecord("test", false, clasz), clasz))
chamada antiga: assertEquals("getClass$", SpecificCompiler.generateGetMethod(createRecord("test", true, clasz), clasz))
nova chamada: assertEquals("Era esperado valores iguais, mas  'getClass$' é diferente de " + result504 + " <SpecificCompiler.generateGetMethod(createRecord('test', true, clasz), clasz)>", "getClass$", SpecificCompiler.generateGetMethod(createRecord("test", true, clasz), clasz))
chamada antiga: assertEquals("getSchema$", SpecificCompiler.generateGetMethod(createRecord("test", false, schema), schema))
nova chamada: assertEquals("Era esperado valores iguais, mas  'getSchema$' é diferente de " + result505 + " <SpecificCompiler.generateGetMethod(createRecord('test', false, schema), schema)>", "getSchema$", SpecificCompiler.generateGetMethod(createRecord("test", false, schema), schema))
chamada antiga: assertEquals("getSchema$", SpecificCompiler.generateGetMethod(createRecord("test", true, schema), schema))
nova chamada: assertEquals("Era esperado valores iguais, mas  'getSchema$' é diferente de " + result506 + " <SpecificCompiler.generateGetMethod(createRecord('test', true, schema), schema)>", "getSchema$", SpecificCompiler.generateGetMethod(createRecord("test", true, schema), schema))
chamada antiga: assertEquals("getHeight", SpecificCompiler.generateGetMethod(createRecord("test", false, Height), Height))
nova chamada: assertEquals("Era esperado valores iguais, mas  'getHeight' é diferente de " + result507 + " <SpecificCompiler.generateGetMethod(createRecord('test', false, Height), Height)>", "getHeight", SpecificCompiler.generateGetMethod(createRecord("test", false, Height), Height))
chamada antiga: assertEquals("getHeight$0", SpecificCompiler.generateGetMethod(createRecord("test", false, height, Height), height))
nova chamada: assertEquals("Era esperado valores iguais, mas  'getHeight$0' é diferente de " + result508 + " <SpecificCompiler.generateGetMethod(createRecord('test', false, height, Height), height)>", "getHeight$0", SpecificCompiler.generateGetMethod(createRecord("test", false, height, Height), height))
chamada antiga: assertEquals("getHeight$1", SpecificCompiler.generateGetMethod(createRecord("test", false, height, Height), Height))
nova chamada: assertEquals("Era esperado valores iguais, mas  'getHeight$1' é diferente de " + result509 + " <SpecificCompiler.generateGetMethod(createRecord('test', false, height, Height), Height)>", "getHeight$1", SpecificCompiler.generateGetMethod(createRecord("test", false, height, Height), Height))
chamada antiga: assertEquals("getMessage$", SpecificCompiler.generateGetMethod(createRecord("test", true, Message), Message))
nova chamada: assertEquals("Era esperado valores iguais, mas  'getMessage$' é diferente de " + result510 + " <SpecificCompiler.generateGetMethod(createRecord('test', true, Message), Message)>", "getMessage$", SpecificCompiler.generateGetMethod(createRecord("test", true, Message), Message))
chamada antiga: assertEquals("getMessage$0", SpecificCompiler.generateGetMethod(createRecord("test", true, message, Message), message))
nova chamada: assertEquals("Era esperado valores iguais, mas  'getMessage$0' é diferente de " + result511 + " <SpecificCompiler.generateGetMethod(createRecord('test', true, message, Message), message)>", "getMessage$0", SpecificCompiler.generateGetMethod(createRecord("test", true, message, Message), message))
chamada antiga: assertEquals("getMessage$1", SpecificCompiler.generateGetMethod(createRecord("test", true, message, Message), Message))
nova chamada: assertEquals("Era esperado valores iguais, mas  'getMessage$1' é diferente de " + result512 + " <SpecificCompiler.generateGetMethod(createRecord('test', true, message, Message), Message)>", "getMessage$1", SpecificCompiler.generateGetMethod(createRecord("test", true, message, Message), Message))
chamada antiga: assertEquals("getSchema$", SpecificCompiler.generateGetMethod(createRecord("test", false, Schema$), Schema$))
nova chamada: assertEquals("Era esperado valores iguais, mas  'getSchema$' é diferente de " + result513 + " <SpecificCompiler.generateGetMethod(createRecord('test', false, Schema$), Schema$)>", "getSchema$", SpecificCompiler.generateGetMethod(createRecord("test", false, Schema$), Schema$))
chamada antiga: assertEquals("getSchema$0", SpecificCompiler.generateGetMethod(createRecord("test", false, schema, Schema$), schema))
nova chamada: assertEquals("Era esperado valores iguais, mas  'getSchema$0' é diferente de " + result514 + " <SpecificCompiler.generateGetMethod(createRecord('test', false, schema, Schema$), schema)>", "getSchema$0", SpecificCompiler.generateGetMethod(createRecord("test", false, schema, Schema$), schema))
chamada antiga: assertEquals("getSchema$1", SpecificCompiler.generateGetMethod(createRecord("test", false, schema, Schema$), Schema$))
nova chamada: assertEquals("Era esperado valores iguais, mas  'getSchema$1' é diferente de " + result515 + " <SpecificCompiler.generateGetMethod(createRecord('test', false, schema, Schema$), Schema$)>", "getSchema$1", SpecificCompiler.generateGetMethod(createRecord("test", false, schema, Schema$), Schema$))
chamada antiga: assertEquals("setHeight", SpecificCompiler.generateSetMethod(createRecord("test", false, height), height))
nova chamada: assertEquals("Era esperado valores iguais, mas  'setHeight' é diferente de " + result516 + " <SpecificCompiler.generateSetMethod(createRecord('test', false, height), height)>", "setHeight", SpecificCompiler.generateSetMethod(createRecord("test", false, height), height))
chamada antiga: assertEquals("setHeightAndWidth", SpecificCompiler.generateSetMethod(createRecord("test", false, height_and_width), height_and_width))
nova chamada: assertEquals("Era esperado valores iguais, mas  'setHeightAndWidth' é diferente de " + result517 + " <SpecificCompiler.generateSetMethod(createRecord('test', false, height_and_width), height_and_width)>", "setHeightAndWidth", SpecificCompiler.generateSetMethod(createRecord("test", false, height_and_width), height_and_width))
chamada antiga: assertEquals("setMessage", SpecificCompiler.generateSetMethod(createRecord("test", false, message), message))
nova chamada: assertEquals("Era esperado valores iguais, mas  'setMessage' é diferente de " + result518 + " <SpecificCompiler.generateSetMethod(createRecord('test', false, message), message)>", "setMessage", SpecificCompiler.generateSetMethod(createRecord("test", false, message), message))
chamada antiga: assertEquals("setMessage$", SpecificCompiler.generateSetMethod(createRecord("test", true, message), message))
nova chamada: assertEquals("Era esperado valores iguais, mas  'setMessage$' é diferente de " + result519 + " <SpecificCompiler.generateSetMethod(createRecord('test', true, message), message)>", "setMessage$", SpecificCompiler.generateSetMethod(createRecord("test", true, message), message))
chamada antiga: assertEquals("setCause", SpecificCompiler.generateSetMethod(createRecord("test", false, cause), cause))
nova chamada: assertEquals("Era esperado valores iguais, mas  'setCause' é diferente de " + result520 + " <SpecificCompiler.generateSetMethod(createRecord('test', false, cause), cause)>", "setCause", SpecificCompiler.generateSetMethod(createRecord("test", false, cause), cause))
chamada antiga: assertEquals("setCause$", SpecificCompiler.generateSetMethod(createRecord("test", true, cause), cause))
nova chamada: assertEquals("Era esperado valores iguais, mas  'setCause$' é diferente de " + result521 + " <SpecificCompiler.generateSetMethod(createRecord('test', true, cause), cause)>", "setCause$", SpecificCompiler.generateSetMethod(createRecord("test", true, cause), cause))
chamada antiga: assertEquals("setClass$", SpecificCompiler.generateSetMethod(createRecord("test", false, clasz), clasz))
nova chamada: assertEquals("Era esperado valores iguais, mas  'setClass$' é diferente de " + result522 + " <SpecificCompiler.generateSetMethod(createRecord('test', false, clasz), clasz)>", "setClass$", SpecificCompiler.generateSetMethod(createRecord("test", false, clasz), clasz))
chamada antiga: assertEquals("setClass$", SpecificCompiler.generateSetMethod(createRecord("test", true, clasz), clasz))
nova chamada: assertEquals("Era esperado valores iguais, mas  'setClass$' é diferente de " + result523 + " <SpecificCompiler.generateSetMethod(createRecord('test', true, clasz), clasz)>", "setClass$", SpecificCompiler.generateSetMethod(createRecord("test", true, clasz), clasz))
chamada antiga: assertEquals("setSchema$", SpecificCompiler.generateSetMethod(createRecord("test", false, schema), schema))
nova chamada: assertEquals("Era esperado valores iguais, mas  'setSchema$' é diferente de " + result524 + " <SpecificCompiler.generateSetMethod(createRecord('test', false, schema), schema)>", "setSchema$", SpecificCompiler.generateSetMethod(createRecord("test", false, schema), schema))
chamada antiga: assertEquals("setSchema$", SpecificCompiler.generateSetMethod(createRecord("test", true, schema), schema))
nova chamada: assertEquals("Era esperado valores iguais, mas  'setSchema$' é diferente de " + result525 + " <SpecificCompiler.generateSetMethod(createRecord('test', true, schema), schema)>", "setSchema$", SpecificCompiler.generateSetMethod(createRecord("test", true, schema), schema))
chamada antiga: assertEquals("setHeight", SpecificCompiler.generateSetMethod(createRecord("test", false, Height), Height))
nova chamada: assertEquals("Era esperado valores iguais, mas  'setHeight' é diferente de " + result526 + " <SpecificCompiler.generateSetMethod(createRecord('test', false, Height), Height)>", "setHeight", SpecificCompiler.generateSetMethod(createRecord("test", false, Height), Height))
chamada antiga: assertEquals("setHeight$0", SpecificCompiler.generateSetMethod(createRecord("test", false, height, Height), height))
nova chamada: assertEquals("Era esperado valores iguais, mas  'setHeight$0' é diferente de " + result527 + " <SpecificCompiler.generateSetMethod(createRecord('test', false, height, Height), height)>", "setHeight$0", SpecificCompiler.generateSetMethod(createRecord("test", false, height, Height), height))
chamada antiga: assertEquals("setHeight$1", SpecificCompiler.generateSetMethod(createRecord("test", false, height, Height), Height))
nova chamada: assertEquals("Era esperado valores iguais, mas  'setHeight$1' é diferente de " + result528 + " <SpecificCompiler.generateSetMethod(createRecord('test', false, height, Height), Height)>", "setHeight$1", SpecificCompiler.generateSetMethod(createRecord("test", false, height, Height), Height))
chamada antiga: assertEquals("setMessage$", SpecificCompiler.generateSetMethod(createRecord("test", true, Message), Message))
nova chamada: assertEquals("Era esperado valores iguais, mas  'setMessage$' é diferente de " + result529 + " <SpecificCompiler.generateSetMethod(createRecord('test', true, Message), Message)>", "setMessage$", SpecificCompiler.generateSetMethod(createRecord("test", true, Message), Message))
chamada antiga: assertEquals("setMessage$0", SpecificCompiler.generateSetMethod(createRecord("test", true, message, Message), message))
nova chamada: assertEquals("Era esperado valores iguais, mas  'setMessage$0' é diferente de " + result530 + " <SpecificCompiler.generateSetMethod(createRecord('test', true, message, Message), message)>", "setMessage$0", SpecificCompiler.generateSetMethod(createRecord("test", true, message, Message), message))
chamada antiga: assertEquals("setMessage$1", SpecificCompiler.generateSetMethod(createRecord("test", true, message, Message), Message))
nova chamada: assertEquals("Era esperado valores iguais, mas  'setMessage$1' é diferente de " + result531 + " <SpecificCompiler.generateSetMethod(createRecord('test', true, message, Message), Message)>", "setMessage$1", SpecificCompiler.generateSetMethod(createRecord("test", true, message, Message), Message))
chamada antiga: assertEquals("setSchema$", SpecificCompiler.generateSetMethod(createRecord("test", false, Schema$), Schema$))
nova chamada: assertEquals("Era esperado valores iguais, mas  'setSchema$' é diferente de " + result532 + " <SpecificCompiler.generateSetMethod(createRecord('test', false, Schema$), Schema$)>", "setSchema$", SpecificCompiler.generateSetMethod(createRecord("test", false, Schema$), Schema$))
chamada antiga: assertEquals("setSchema$0", SpecificCompiler.generateSetMethod(createRecord("test", false, schema, Schema$), schema))
nova chamada: assertEquals("Era esperado valores iguais, mas  'setSchema$0' é diferente de " + result533 + " <SpecificCompiler.generateSetMethod(createRecord('test', false, schema, Schema$), schema)>", "setSchema$0", SpecificCompiler.generateSetMethod(createRecord("test", false, schema, Schema$), schema))
chamada antiga: assertEquals("setSchema$1", SpecificCompiler.generateSetMethod(createRecord("test", false, schema, Schema$), Schema$))
nova chamada: assertEquals("Era esperado valores iguais, mas  'setSchema$1' é diferente de " + result534 + " <SpecificCompiler.generateSetMethod(createRecord('test', false, schema, Schema$), Schema$)>", "setSchema$1", SpecificCompiler.generateSetMethod(createRecord("test", false, schema, Schema$), Schema$))
chamada antiga: assertEquals("hasHeight", SpecificCompiler.generateHasMethod(createRecord("test", false, height), height))
nova chamada: assertEquals("Era esperado valores iguais, mas  'hasHeight' é diferente de " + result535 + " <SpecificCompiler.generateHasMethod(createRecord('test', false, height), height)>", "hasHeight", SpecificCompiler.generateHasMethod(createRecord("test", false, height), height))
chamada antiga: assertEquals("hasHeightAndWidth", SpecificCompiler.generateHasMethod(createRecord("test", false, height_and_width), height_and_width))
nova chamada: assertEquals("Era esperado valores iguais, mas  'hasHeightAndWidth' é diferente de " + result536 + " <SpecificCompiler.generateHasMethod(createRecord('test', false, height_and_width), height_and_width)>", "hasHeightAndWidth", SpecificCompiler.generateHasMethod(createRecord("test", false, height_and_width), height_and_width))
chamada antiga: assertEquals("hasMessage", SpecificCompiler.generateHasMethod(createRecord("test", false, message), message))
nova chamada: assertEquals("Era esperado valores iguais, mas  'hasMessage' é diferente de " + result537 + " <SpecificCompiler.generateHasMethod(createRecord('test', false, message), message)>", "hasMessage", SpecificCompiler.generateHasMethod(createRecord("test", false, message), message))
chamada antiga: assertEquals("hasMessage$", SpecificCompiler.generateHasMethod(createRecord("test", true, message), message))
nova chamada: assertEquals("Era esperado valores iguais, mas  'hasMessage$' é diferente de " + result538 + " <SpecificCompiler.generateHasMethod(createRecord('test', true, message), message)>", "hasMessage$", SpecificCompiler.generateHasMethod(createRecord("test", true, message), message))
chamada antiga: assertEquals("hasCause", SpecificCompiler.generateHasMethod(createRecord("test", false, cause), cause))
nova chamada: assertEquals("Era esperado valores iguais, mas  'hasCause' é diferente de " + result539 + " <SpecificCompiler.generateHasMethod(createRecord('test', false, cause), cause)>", "hasCause", SpecificCompiler.generateHasMethod(createRecord("test", false, cause), cause))
chamada antiga: assertEquals("hasCause$", SpecificCompiler.generateHasMethod(createRecord("test", true, cause), cause))
nova chamada: assertEquals("Era esperado valores iguais, mas  'hasCause$' é diferente de " + result540 + " <SpecificCompiler.generateHasMethod(createRecord('test', true, cause), cause)>", "hasCause$", SpecificCompiler.generateHasMethod(createRecord("test", true, cause), cause))
chamada antiga: assertEquals("hasClass$", SpecificCompiler.generateHasMethod(createRecord("test", false, clasz), clasz))
nova chamada: assertEquals("Era esperado valores iguais, mas  'hasClass$' é diferente de " + result541 + " <SpecificCompiler.generateHasMethod(createRecord('test', false, clasz), clasz)>", "hasClass$", SpecificCompiler.generateHasMethod(createRecord("test", false, clasz), clasz))
chamada antiga: assertEquals("hasClass$", SpecificCompiler.generateHasMethod(createRecord("test", true, clasz), clasz))
nova chamada: assertEquals("Era esperado valores iguais, mas  'hasClass$' é diferente de " + result542 + " <SpecificCompiler.generateHasMethod(createRecord('test', true, clasz), clasz)>", "hasClass$", SpecificCompiler.generateHasMethod(createRecord("test", true, clasz), clasz))
chamada antiga: assertEquals("hasSchema$", SpecificCompiler.generateHasMethod(createRecord("test", false, schema), schema))
nova chamada: assertEquals("Era esperado valores iguais, mas  'hasSchema$' é diferente de " + result543 + " <SpecificCompiler.generateHasMethod(createRecord('test', false, schema), schema)>", "hasSchema$", SpecificCompiler.generateHasMethod(createRecord("test", false, schema), schema))
chamada antiga: assertEquals("hasSchema$", SpecificCompiler.generateHasMethod(createRecord("test", true, schema), schema))
nova chamada: assertEquals("Era esperado valores iguais, mas  'hasSchema$' é diferente de " + result544 + " <SpecificCompiler.generateHasMethod(createRecord('test', true, schema), schema)>", "hasSchema$", SpecificCompiler.generateHasMethod(createRecord("test", true, schema), schema))
chamada antiga: assertEquals("hasHeight", SpecificCompiler.generateHasMethod(createRecord("test", false, Height), Height))
nova chamada: assertEquals("Era esperado valores iguais, mas  'hasHeight' é diferente de " + result545 + " <SpecificCompiler.generateHasMethod(createRecord('test', false, Height), Height)>", "hasHeight", SpecificCompiler.generateHasMethod(createRecord("test", false, Height), Height))
chamada antiga: assertEquals("hasHeight$0", SpecificCompiler.generateHasMethod(createRecord("test", false, height, Height), height))
nova chamada: assertEquals("Era esperado valores iguais, mas  'hasHeight$0' é diferente de " + result546 + " <SpecificCompiler.generateHasMethod(createRecord('test', false, height, Height), height)>", "hasHeight$0", SpecificCompiler.generateHasMethod(createRecord("test", false, height, Height), height))
chamada antiga: assertEquals("hasHeight$1", SpecificCompiler.generateHasMethod(createRecord("test", false, height, Height), Height))
nova chamada: assertEquals("Era esperado valores iguais, mas  'hasHeight$1' é diferente de " + result547 + " <SpecificCompiler.generateHasMethod(createRecord('test', false, height, Height), Height)>", "hasHeight$1", SpecificCompiler.generateHasMethod(createRecord("test", false, height, Height), Height))
chamada antiga: assertEquals("hasMessage$", SpecificCompiler.generateHasMethod(createRecord("test", true, Message), Message))
nova chamada: assertEquals("Era esperado valores iguais, mas  'hasMessage$' é diferente de " + result548 + " <SpecificCompiler.generateHasMethod(createRecord('test', true, Message), Message)>", "hasMessage$", SpecificCompiler.generateHasMethod(createRecord("test", true, Message), Message))
chamada antiga: assertEquals("hasMessage$0", SpecificCompiler.generateHasMethod(createRecord("test", true, message, Message), message))
nova chamada: assertEquals("Era esperado valores iguais, mas  'hasMessage$0' é diferente de " + result549 + " <SpecificCompiler.generateHasMethod(createRecord('test', true, message, Message), message)>", "hasMessage$0", SpecificCompiler.generateHasMethod(createRecord("test", true, message, Message), message))
chamada antiga: assertEquals("hasMessage$1", SpecificCompiler.generateHasMethod(createRecord("test", true, message, Message), Message))
nova chamada: assertEquals("Era esperado valores iguais, mas  'hasMessage$1' é diferente de " + result550 + " <SpecificCompiler.generateHasMethod(createRecord('test', true, message, Message), Message)>", "hasMessage$1", SpecificCompiler.generateHasMethod(createRecord("test", true, message, Message), Message))
chamada antiga: assertEquals("hasSchema$", SpecificCompiler.generateHasMethod(createRecord("test", false, Schema$), Schema$))
nova chamada: assertEquals("Era esperado valores iguais, mas  'hasSchema$' é diferente de " + result551 + " <SpecificCompiler.generateHasMethod(createRecord('test', false, Schema$), Schema$)>", "hasSchema$", SpecificCompiler.generateHasMethod(createRecord("test", false, Schema$), Schema$))
chamada antiga: assertEquals("hasSchema$0", SpecificCompiler.generateHasMethod(createRecord("test", false, schema, Schema$), schema))
nova chamada: assertEquals("Era esperado valores iguais, mas  'hasSchema$0' é diferente de " + result552 + " <SpecificCompiler.generateHasMethod(createRecord('test', false, schema, Schema$), schema)>", "hasSchema$0", SpecificCompiler.generateHasMethod(createRecord("test", false, schema, Schema$), schema))
chamada antiga: assertEquals("hasSchema$1", SpecificCompiler.generateHasMethod(createRecord("test", false, schema, Schema$), Schema$))
nova chamada: assertEquals("Era esperado valores iguais, mas  'hasSchema$1' é diferente de " + result553 + " <SpecificCompiler.generateHasMethod(createRecord('test', false, schema, Schema$), Schema$)>", "hasSchema$1", SpecificCompiler.generateHasMethod(createRecord("test", false, schema, Schema$), Schema$))
chamada antiga: assertEquals("clearHeight", SpecificCompiler.generateClearMethod(createRecord("test", false, height), height))
nova chamada: assertEquals("Era esperado valores iguais, mas  'clearHeight' é diferente de " + result554 + " <SpecificCompiler.generateClearMethod(createRecord('test', false, height), height)>", "clearHeight", SpecificCompiler.generateClearMethod(createRecord("test", false, height), height))
chamada antiga: assertEquals("clearHeightAndWidth", SpecificCompiler.generateClearMethod(createRecord("test", false, height_and_width), height_and_width))
nova chamada: assertEquals("Era esperado valores iguais, mas  'clearHeightAndWidth' é diferente de " + result555 + " <SpecificCompiler.generateClearMethod(createRecord('test', false, height_and_width), height_and_width)>", "clearHeightAndWidth", SpecificCompiler.generateClearMethod(createRecord("test", false, height_and_width), height_and_width))
chamada antiga: assertEquals("clearMessage", SpecificCompiler.generateClearMethod(createRecord("test", false, message), message))
nova chamada: assertEquals("Era esperado valores iguais, mas  'clearMessage' é diferente de " + result556 + " <SpecificCompiler.generateClearMethod(createRecord('test', false, message), message)>", "clearMessage", SpecificCompiler.generateClearMethod(createRecord("test", false, message), message))
chamada antiga: assertEquals("clearMessage$", SpecificCompiler.generateClearMethod(createRecord("test", true, message), message))
nova chamada: assertEquals("Era esperado valores iguais, mas  'clearMessage$' é diferente de " + result557 + " <SpecificCompiler.generateClearMethod(createRecord('test', true, message), message)>", "clearMessage$", SpecificCompiler.generateClearMethod(createRecord("test", true, message), message))
chamada antiga: assertEquals("clearCause", SpecificCompiler.generateClearMethod(createRecord("test", false, cause), cause))
nova chamada: assertEquals("Era esperado valores iguais, mas  'clearCause' é diferente de " + result558 + " <SpecificCompiler.generateClearMethod(createRecord('test', false, cause), cause)>", "clearCause", SpecificCompiler.generateClearMethod(createRecord("test", false, cause), cause))
chamada antiga: assertEquals("clearCause$", SpecificCompiler.generateClearMethod(createRecord("test", true, cause), cause))
nova chamada: assertEquals("Era esperado valores iguais, mas  'clearCause$' é diferente de " + result559 + " <SpecificCompiler.generateClearMethod(createRecord('test', true, cause), cause)>", "clearCause$", SpecificCompiler.generateClearMethod(createRecord("test", true, cause), cause))
chamada antiga: assertEquals("clearClass$", SpecificCompiler.generateClearMethod(createRecord("test", false, clasz), clasz))
nova chamada: assertEquals("Era esperado valores iguais, mas  'clearClass$' é diferente de " + result560 + " <SpecificCompiler.generateClearMethod(createRecord('test', false, clasz), clasz)>", "clearClass$", SpecificCompiler.generateClearMethod(createRecord("test", false, clasz), clasz))
chamada antiga: assertEquals("clearClass$", SpecificCompiler.generateClearMethod(createRecord("test", true, clasz), clasz))
nova chamada: assertEquals("Era esperado valores iguais, mas  'clearClass$' é diferente de " + result561 + " <SpecificCompiler.generateClearMethod(createRecord('test', true, clasz), clasz)>", "clearClass$", SpecificCompiler.generateClearMethod(createRecord("test", true, clasz), clasz))
chamada antiga: assertEquals("clearSchema$", SpecificCompiler.generateClearMethod(createRecord("test", false, schema), schema))
nova chamada: assertEquals("Era esperado valores iguais, mas  'clearSchema$' é diferente de " + result562 + " <SpecificCompiler.generateClearMethod(createRecord('test', false, schema), schema)>", "clearSchema$", SpecificCompiler.generateClearMethod(createRecord("test", false, schema), schema))
chamada antiga: assertEquals("clearSchema$", SpecificCompiler.generateClearMethod(createRecord("test", true, schema), schema))
nova chamada: assertEquals("Era esperado valores iguais, mas  'clearSchema$' é diferente de " + result563 + " <SpecificCompiler.generateClearMethod(createRecord('test', true, schema), schema)>", "clearSchema$", SpecificCompiler.generateClearMethod(createRecord("test", true, schema), schema))
chamada antiga: assertEquals("clearHeight", SpecificCompiler.generateClearMethod(createRecord("test", false, Height), Height))
nova chamada: assertEquals("Era esperado valores iguais, mas  'clearHeight' é diferente de " + result564 + " <SpecificCompiler.generateClearMethod(createRecord('test', false, Height), Height)>", "clearHeight", SpecificCompiler.generateClearMethod(createRecord("test", false, Height), Height))
chamada antiga: assertEquals("clearHeight$0", SpecificCompiler.generateClearMethod(createRecord("test", false, height, Height), height))
nova chamada: assertEquals("Era esperado valores iguais, mas  'clearHeight$0' é diferente de " + result565 + " <SpecificCompiler.generateClearMethod(createRecord('test', false, height, Height), height)>", "clearHeight$0", SpecificCompiler.generateClearMethod(createRecord("test", false, height, Height), height))
chamada antiga: assertEquals("clearHeight$1", SpecificCompiler.generateClearMethod(createRecord("test", false, height, Height), Height))
nova chamada: assertEquals("Era esperado valores iguais, mas  'clearHeight$1' é diferente de " + result566 + " <SpecificCompiler.generateClearMethod(createRecord('test', false, height, Height), Height)>", "clearHeight$1", SpecificCompiler.generateClearMethod(createRecord("test", false, height, Height), Height))
chamada antiga: assertEquals("clearMessage$", SpecificCompiler.generateClearMethod(createRecord("test", true, Message), Message))
nova chamada: assertEquals("Era esperado valores iguais, mas  'clearMessage$' é diferente de " + result567 + " <SpecificCompiler.generateClearMethod(createRecord('test', true, Message), Message)>", "clearMessage$", SpecificCompiler.generateClearMethod(createRecord("test", true, Message), Message))
chamada antiga: assertEquals("clearMessage$0", SpecificCompiler.generateClearMethod(createRecord("test", true, message, Message), message))
nova chamada: assertEquals("Era esperado valores iguais, mas  'clearMessage$0' é diferente de " + result568 + " <SpecificCompiler.generateClearMethod(createRecord('test', true, message, Message), message)>", "clearMessage$0", SpecificCompiler.generateClearMethod(createRecord("test", true, message, Message), message))
chamada antiga: assertEquals("clearMessage$1", SpecificCompiler.generateClearMethod(createRecord("test", true, message, Message), Message))
nova chamada: assertEquals("Era esperado valores iguais, mas  'clearMessage$1' é diferente de " + result569 + " <SpecificCompiler.generateClearMethod(createRecord('test', true, message, Message), Message)>", "clearMessage$1", SpecificCompiler.generateClearMethod(createRecord("test", true, message, Message), Message))
chamada antiga: assertEquals("clearSchema$", SpecificCompiler.generateClearMethod(createRecord("test", false, Schema$), Schema$))
nova chamada: assertEquals("Era esperado valores iguais, mas  'clearSchema$' é diferente de " + result570 + " <SpecificCompiler.generateClearMethod(createRecord('test', false, Schema$), Schema$)>", "clearSchema$", SpecificCompiler.generateClearMethod(createRecord("test", false, Schema$), Schema$))
chamada antiga: assertEquals("clearSchema$0", SpecificCompiler.generateClearMethod(createRecord("test", false, schema, Schema$), schema))
nova chamada: assertEquals("Era esperado valores iguais, mas  'clearSchema$0' é diferente de " + result571 + " <SpecificCompiler.generateClearMethod(createRecord('test', false, schema, Schema$), schema)>", "clearSchema$0", SpecificCompiler.generateClearMethod(createRecord("test", false, schema, Schema$), schema))
chamada antiga: assertEquals("clearSchema$1", SpecificCompiler.generateClearMethod(createRecord("test", false, schema, Schema$), Schema$))
nova chamada: assertEquals("Era esperado valores iguais, mas  'clearSchema$1' é diferente de " + result572 + " <SpecificCompiler.generateClearMethod(createRecord('test', false, schema, Schema$), Schema$)>", "clearSchema$1", SpecificCompiler.generateClearMethod(createRecord("test", false, schema, Schema$), Schema$))
chamada antiga: assertNotNull(Simple.class.getAnnotation(TestAnnotation.class))
nova chamada: assertNotNull("Era esperado não nulo, mas " + result573 + " <Simple.class.getAnnotation(TestAnnotation.class)> é nulo", Simple.class.getAnnotation(TestAnnotation.class))
chamada antiga: assertNotNull(TestRecord.class.getAnnotation(TestAnnotation.class))
nova chamada: assertNotNull("Era esperado não nulo, mas " + result574 + " <TestRecord.class.getAnnotation(TestAnnotation.class)> é nulo", TestRecord.class.getAnnotation(TestAnnotation.class))
chamada antiga: assertNotNull(MD5.class.getAnnotation(TestAnnotation.class))
nova chamada: assertNotNull("Era esperado não nulo, mas " + result575 + " <MD5.class.getAnnotation(TestAnnotation.class)> é nulo", MD5.class.getAnnotation(TestAnnotation.class))
chamada antiga: assertNotNull(Kind.class.getAnnotation(TestAnnotation.class))
nova chamada: assertNotNull("Era esperado não nulo, mas " + result576 + " <Kind.class.getAnnotation(TestAnnotation.class)> é nulo", Kind.class.getAnnotation(TestAnnotation.class))
chamada antiga: assertNotNull(TestRecord.class.getDeclaredField("name").getAnnotation(TestAnnotation.class))
nova chamada: assertNotNull("Era esperado não nulo, mas " + result577 + " <TestRecord.class.getDeclaredField('name').getAnnotation(TestAnnotation.class)> é nulo", TestRecord.class.getDeclaredField("name").getAnnotation(TestAnnotation.class))
chamada antiga: assertNotNull(Simple.class.getMethod("ack").getAnnotation(TestAnnotation.class))
nova chamada: assertNotNull("Era esperado não nulo, mas " + result578 + " <Simple.class.getMethod('ack').getAnnotation(TestAnnotation.class)> é nulo", Simple.class.getMethod("ack").getAnnotation(TestAnnotation.class))
chamada antiga: assertEquals(1, outputs.size())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result579 + " <outputs.size()>", 1, outputs.size())
chamada antiga: assertEquals(o.path, "X.java")
nova chamada: assertEquals("Era esperado valores iguais, mas  o.path é diferente de " + " 'X.java'", o.path, "X.java")
chamada antiga: assertTrue(o.contents.contains("[\\\"Y\\\"]"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result580 + " <o.contents.contains('[\\\'Y\\\']')> é falso", o.contents.contains("[\\\"Y\\\"]"))
chamada antiga: assertTrue(o.contents.contains("[\\\"g\\\"]"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result581 + " <o.contents.contains('[\\\'g\\\']')> é falso", o.contents.contains("[\\\"g\\\"]"))
chamada antiga: assertNotNull(outputs)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", outputs)
chamada antiga: assertNotNull(outputs)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", outputs)
chamada antiga: assertTrue(cTask.call())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result582 + " <cTask.call()> é falso", cTask.call())
chamada antiga: assertEquals(1, outputs.size())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result583 + " <outputs.size()>", 1, outputs.size())
chamada antiga: assertTrue(contents.contains("private java.net.URI"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result584 + " <contents.contains('private java.net.URI')> é falso", contents.contains("private java.net.URI"))
chamada antiga: assertTrue(contents.contains("catch (java.net.URISyntaxException e)"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result585 + " <contents.contains('catch (java.net.URISyntaxException e)')> é falso", contents.contains("catch (java.net.URISyntaxException e)"))
chamada antiga: assertTrue(contents.contains("private java.net.URL"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result586 + " <contents.contains('private java.net.URL')> é falso", contents.contains("private java.net.URL"))
chamada antiga: assertTrue(contents.contains("catch (java.net.MalformedURLException e)"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result587 + " <contents.contains('catch (java.net.MalformedURLException e)')> é falso", contents.contains("catch (java.net.MalformedURLException e)"))
chamada antiga: assertEquals(responder.getReflectData().getClassLoader(), loader)
nova chamada: assertEquals("Era esperado valores iguais, mas " + result588 + " <responder.getReflectData().getClassLoader()> é diferente de " + " loader", responder.getReflectData().getClassLoader(), loader)
chamada antiga: assertEquals(requestor.getReflectData().getClassLoader(), loader)
nova chamada: assertEquals("Era esperado valores iguais, mas " + result589 + " <requestor.getReflectData().getClassLoader()> é diferente de " + " loader", requestor.getReflectData().getClassLoader(), loader)
chamada antiga: assertEquals("goodbye", response)
nova chamada: assertEquals("Era esperado valores iguais, mas  'goodbye' é diferente de " + " response", "goodbye", response)
chamada antiga: assertEquals(record, echoed)
nova chamada: assertEquals("Era esperado valores iguais, mas  record é diferente de " + " echoed", record, echoed)
chamada antiga: assertEquals(3, result)
nova chamada: assertEquals("Era esperado valores iguais, mas  3 é diferente de " + " result", 3, result)
chamada antiga: assertArrayEquals(data, echoed)
nova chamada: assertArrayEquals("Era esperado arrays iguais, mas  data é diferente de " + " echoed", data, echoed)
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", error)
chamada antiga: assertEquals("foo", error.getMessage())
nova chamada: assertEquals("Era esperado valores iguais, mas  'foo' é diferente de " + result590 + " <error.getMessage()>", "foo", error.getMessage())
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", error)
chamada antiga: assertTrue(error.toString().contains("foo"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result591 + " <error.toString().contains('foo')> é falso", error.toString().contains("foo"))
chamada antiga: assertEquals(new Utf8("goodbye"), response)
nova chamada: assertEquals("Era esperado valores iguais, mas  new Utf8('goodbye') é diferente de " + " response", new Utf8("goodbye"), response)
chamada antiga: assertEquals(new Utf8("goodbye"), response)
nova chamada: assertEquals("Era esperado valores iguais, mas  new Utf8('goodbye') é diferente de " + " response", new Utf8("goodbye"), response)
chamada antiga: fail("A execução falhou por uma causa deliberada", "Should not have parsed: " + json)
nova chamada: fail("A execução falhou por uma causa deliberada", "A execução falhou por uma causa deliberada", "Should not have parsed: " + json)
chamada antiga: assertEquals(20, s.elapsedNanos())
nova chamada: assertEquals("Era esperado valores iguais, mas  20 é diferente de " + result592 + " <s.elapsedNanos()>", 20, s.elapsedNanos())
chamada antiga: assertEquals(60, s.elapsedNanos())
nova chamada: assertEquals("Era esperado valores iguais, mas  60 é diferente de " + result593 + " <s.elapsedNanos()>", 60, s.elapsedNanos())
chamada antiga: assertTrue(s.elapsedNanos() >= 0)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", s.elapsedNanos() >= 0)
chamada antiga: assertEquals(20, h.getCount())
nova chamada: assertEquals("Era esperado valores iguais, mas  20 é diferente de " + result594 + " <h.getCount()>", 20, h.getCount())
chamada antiga: assertArrayEquals(new int[] { 1, 1, 2, 4, 8, 4 }, h.getHistogram())
nova chamada: assertArrayEquals("Era esperado arrays iguais, mas  new int[] { 1, 1, 2, 4, 8, 4 } é diferente de " + result595 + " <h.getHistogram()>", new int[] { 1, 1, 2, 4, 8, 4 }, h.getHistogram())
chamada antiga: assertEquals("[0,1)=1;[1,2)=1;[2,4)=2;[4,8)=4;[8,16)=8;[16,infinity)=4", h.toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  '[0,1)=1;[1,2)=1;[2,4)=2;[4,8)=4;[8,16)=8;[16,infinity)=4' é diferente de " + result596 + " <h.toString()>", "[0,1)=1;[1,2)=1;[2,4)=2;[4,8)=4;[8,16)=8;[16,infinity)=4", h.toString())
chamada antiga: assertEquals(correctBucketLabels.length, pos)
nova chamada: assertEquals("Era esperado valores iguais, mas  correctBucketLabels.length é diferente de " + " pos", correctBucketLabels.length, pos)
chamada antiga: assertEquals(correctBucketLabels.length, labels.size())
nova chamada: assertEquals("Era esperado valores iguais, mas  correctBucketLabels.length é diferente de " + result597 + " <labels.size()>", correctBucketLabels.length, labels.size())
chamada antiga: assertEquals(correctBoundryLabels.length, boundryLabels.size())
nova chamada: assertEquals("Era esperado valores iguais, mas  correctBoundryLabels.length é diferente de " + result598 + " <boundryLabels.size()>", correctBoundryLabels.length, boundryLabels.size())
chamada antiga: assertEquals("[0,1)", entries.get(0).bucket)
nova chamada: assertEquals("Era esperado valores iguais, mas  '[0,1)' é diferente de " + " entries.get(0).bucket", "[0,1)", entries.get(0).bucket)
chamada antiga: assertEquals(4, entries.get(5).count)
nova chamada: assertEquals("Era esperado valores iguais, mas  4 é diferente de " + " entries.get(5).count", 4, entries.get(5).count)
chamada antiga: assertEquals(6, entries.size())
nova chamada: assertEquals("Era esperado valores iguais, mas  6 é diferente de " + result599 + " <entries.size()>", 6, entries.size())
chamada antiga: assertTrue(recent.contains(1010))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result600 + " <recent.contains(1010)> é falso", recent.contains(1010))
chamada antiga: assertTrue(recent.contains(9191))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result601 + " <recent.contains(9191)> é falso", recent.contains(9191))
chamada antiga: assertEquals(3, h.getCount())
nova chamada: assertEquals("Era esperado valores iguais, mas  3 é diferente de " + result602 + " <h.getCount()>", 3, h.getCount())
chamada antiga: assertEquals(0, orderCounter.getAndIncrement())
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + result603 + " <orderCounter.getAndIncrement()>", 0, orderCounter.getAndIncrement())
chamada antiga: assertEquals(1, orderCounter.getAndIncrement())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result604 + " <orderCounter.getAndIncrement()>", 1, orderCounter.getAndIncrement())
chamada antiga: assertEquals(6, orderCounter.getAndIncrement())
nova chamada: assertEquals("Era esperado valores iguais, mas  6 é diferente de " + result605 + " <orderCounter.getAndIncrement()>", 6, orderCounter.getAndIncrement())
chamada antiga: assertEquals(5, orderCounter.getAndIncrement())
nova chamada: assertEquals("Era esperado valores iguais, mas  5 é diferente de " + result606 + " <orderCounter.getAndIncrement()>", 5, orderCounter.getAndIncrement())
chamada antiga: assertEquals(2, orderCounter.getAndIncrement())
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + result607 + " <orderCounter.getAndIncrement()>", 2, orderCounter.getAndIncrement())
chamada antiga: assertEquals(3, orderCounter.getAndIncrement())
nova chamada: assertEquals("Era esperado valores iguais, mas  3 é diferente de " + result608 + " <orderCounter.getAndIncrement()>", 3, orderCounter.getAndIncrement())
chamada antiga: assertEquals(4, orderCounter.getAndIncrement())
nova chamada: assertEquals("Era esperado valores iguais, mas  4 é diferente de " + result609 + " <orderCounter.getAndIncrement()>", 4, orderCounter.getAndIncrement())
chamada antiga: assertEquals(new Utf8("hello"), ((GenericRecord) request).get("x"))
nova chamada: assertEquals("Era esperado valores iguais, mas  new Utf8('hello') é diferente de " + result610 + " <((GenericRecord) request).get('x')>", new Utf8("hello"), ((GenericRecord) request).get("x"))
chamada antiga: assertEquals(0, BinaryData.compare(b, 0, b, 0, schema))
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + result611 + " <BinaryData.compare(b, 0, b, 0, schema)>", 0, BinaryData.compare(b, 0, b, 0, schema))
chamada antiga: assertEquals(-1, BinaryData.compare(b1, 0, b2, 0, schema))
nova chamada: assertEquals("Era esperado valores iguais, mas  -1 é diferente de " + result612 + " <BinaryData.compare(b1, 0, b2, 0, schema)>", -1, BinaryData.compare(b1, 0, b2, 0, schema))
chamada antiga: assertEquals(1, BinaryData.compare(b2, 0, b1, 0, schema))
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result613 + " <BinaryData.compare(b2, 0, b1, 0, schema)>", 1, BinaryData.compare(b2, 0, b1, 0, schema))
chamada antiga: assertEquals(0, BinaryData.compare(b1, 0, b1, 0, schema))
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + result614 + " <BinaryData.compare(b1, 0, b1, 0, schema)>", 0, BinaryData.compare(b1, 0, b1, 0, schema))
chamada antiga: assertEquals(0, BinaryData.compare(b2, 0, b2, 0, schema))
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + result615 + " <BinaryData.compare(b2, 0, b2, 0, schema)>", 0, BinaryData.compare(b2, 0, b2, 0, schema))
chamada antiga: assertEquals(-1, compare(o1, o2, schema, comparable, comparator))
nova chamada: assertEquals("Era esperado valores iguais, mas  -1 é diferente de " + result616 + " <compare(o1, o2, schema, comparable, comparator)>", -1, compare(o1, o2, schema, comparable, comparator))
chamada antiga: assertEquals(1, compare(o2, o1, schema, comparable, comparator))
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result617 + " <compare(o2, o1, schema, comparable, comparator)>", 1, compare(o2, o1, schema, comparable, comparator))
chamada antiga: assertEquals(0, compare(o1, o1, schema, comparable, comparator))
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + result618 + " <compare(o1, o1, schema, comparable, comparator)>", 0, compare(o1, o1, schema, comparable, comparator))
chamada antiga: assertEquals(0, compare(o2, o2, schema, comparable, comparator))
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + result619 + " <compare(o2, o2, schema, comparable, comparator)>", 0, compare(o2, o2, schema, comparable, comparator))
chamada antiga: assertEquals(comparator.hashCode(o1, schema), BinaryData.hashCode(b1, 0, b1.length, schema))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result620 + " <comparator.hashCode(o1, schema)> é diferente de " + result621 + " <BinaryData.hashCode(b1, 0, b1.length, schema)>", comparator.hashCode(o1, schema), BinaryData.hashCode(b1, 0, b1.length, schema))
chamada antiga: assertEquals(comparator.hashCode(o2, schema), BinaryData.hashCode(b2, 0, b2.length, schema))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result622 + " <comparator.hashCode(o2, schema)> é diferente de " + result623 + " <BinaryData.hashCode(b2, 0, b2.length, schema)>", comparator.hashCode(o2, schema), BinaryData.hashCode(b2, 0, b2.length, schema))
chamada antiga: assertEquals(foo, o)
nova chamada: assertEquals("Era esperado valores iguais, mas  foo é diferente de " + " o", foo, o)
chamada antiga: assertEquals(foo.getInt32(), o.getInt32())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result624 + " <foo.getInt32()> é diferente de " + result625 + " <o.getInt32()>", foo.getInt32(), o.getInt32())
chamada antiga: assertEquals(foo.getBool(), o.getBool())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result626 + " <foo.getBool()> é diferente de " + result627 + " <o.getBool()>", foo.getBool(), o.getBool())
chamada antiga: assertEquals(0, o.getFooArrayCount())
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + result628 + " <o.getFooArrayCount()>", 0, o.getFooArrayCount())
chamada antiga: assertEquals(s.getField("fooArray").defaultVal(), Lists.newArrayList())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result629 + " <s.getField('fooArray').defaultVal()> é diferente de " + result630 + " <Lists.newArrayList()>", s.getField("fooArray").defaultVal(), Lists.newArrayList())
chamada antiga: assertEquals(N.class.getName(), SpecificData.get().getClass(s).getName())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result631 + " <N.class.getName()> é diferente de " + result632 + " <SpecificData.get().getClass(s).getName()>", N.class.getName(), SpecificData.get().getClass(s).getName())
chamada antiga: assertEquals(org.apache.avro.protobuf.noopt.Test.class.getName(), s.getNamespace())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result633 + " <org.apache.avro.protobuf.noopt.Test.class.getName()> é diferente de " + result634 + " <s.getNamespace()>", org.apache.avro.protobuf.noopt.Test.class.getName(), s.getNamespace())
chamada antiga: assertEquals(org.apache.avro.protobuf.multiplefiles.Foo.class.getPackage().getName(), fooSchema.getNamespace())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result635 + " <org.apache.avro.protobuf.multiplefiles.Foo.class.getPackage().getName()> é diferente de " + result636 + " <fooSchema.getNamespace()>", org.apache.avro.protobuf.multiplefiles.Foo.class.getPackage().getName(), fooSchema.getNamespace())
chamada antiga: assertEquals(org.apache.avro.protobuf.multiplefiles.M.class.getName(), nSchema.getNamespace())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result637 + " <org.apache.avro.protobuf.multiplefiles.M.class.getName()> é diferente de " + result638 + " <nSchema.getNamespace()>", org.apache.avro.protobuf.multiplefiles.M.class.getName(), nSchema.getNamespace())
chamada antiga: assertNotEquals(conversion.getRecommendedSchema(), s1)
nova chamada: assertNotEquals("Era esperado valores diferentes, mas " + result639 + " <conversion.getRecommendedSchema()> é igual a " + " s1", conversion.getRecommendedSchema(), s1)
chamada antiga: assertEquals(conversion.getRecommendedSchema(), s2)
nova chamada: assertEquals("Era esperado valores iguais, mas " + result640 + " <conversion.getRecommendedSchema()> é diferente de " + " s2", conversion.getRecommendedSchema(), s2)
chamada antiga: assertEquals("A", decodedDatum.get("field1").toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  'A' é diferente de " + result641 + " <decodedDatum.get('field1').toString()>", "A", decodedDatum.get("field1").toString())
chamada antiga: assertEquals("B", decodedDatum.get("field1").toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  'B' é diferente de " + result642 + " <decodedDatum.get('field1').toString()>", "B", decodedDatum.get("field1").toString())
chamada antiga: assertEquals("A", decodedDatum.get("field1").toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  'A' é diferente de " + result643 + " <decodedDatum.get('field1').toString()>", "A", decodedDatum.get("field1").toString())
chamada antiga: assertEquals(value, result)
nova chamada: assertEquals("Era esperado valores iguais, mas  value é diferente de " + " result", value, result)
chamada antiga: assertEquals(value, result)
nova chamada: assertEquals("Era esperado valores iguais, mas  value é diferente de " + " result", value, result)
chamada antiga: assertEquals(new BigDecimal("99892.123400000000000"), result)
nova chamada: assertEquals("Era esperado valores iguais, mas  new BigDecimal('99892.123400000000000') é diferente de " + " result", new BigDecimal("99892.123400000000000"), result)
chamada antiga: assertEquals(value, result)
nova chamada: assertEquals("Era esperado valores iguais, mas  value é diferente de " + " result", value, result)
chamada antiga: assertEquals(value, result)
nova chamada: assertEquals("Era esperado valores iguais, mas  value é diferente de " + " result", value, result)
chamada antiga: assertEquals(new BigDecimal("99892.123400000000000"), result)
nova chamada: assertEquals("Era esperado valores iguais, mas  new BigDecimal('99892.123400000000000') é diferente de " + " result", new BigDecimal("99892.123400000000000"), result)
chamada antiga: assertEquals(value, result)
nova chamada: assertEquals("Era esperado valores iguais, mas  value é diferente de " + " result", value, result)
chamada antiga: assertEquals(new BigDecimal("123.45"), result)
nova chamada: assertEquals("Era esperado valores iguais, mas  new BigDecimal('123.45') é diferente de " + " result", new BigDecimal("123.45"), result)
chamada antiga: assertEquals(decimal.getPrecision(), bigDecimal.precision())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result644 + " <decimal.getPrecision()> é diferente de " + result645 + " <bigDecimal.precision()>", decimal.getPrecision(), bigDecimal.precision())
chamada antiga: assertTrue(decimal.getScale() >= bigDecimal.scale())
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", decimal.getScale() >= bigDecimal.scale())
chamada antiga: assertNotEquals(0, bigDecimal.compareTo(fromFixed))
nova chamada: assertNotEquals("Era esperado valores diferentes, mas  0 é igual a " + result646 + " <bigDecimal.compareTo(fromFixed)>", 0, bigDecimal.compareTo(fromFixed))
chamada antiga: assertNotEquals(bigDecimal, fromFixed)
nova chamada: assertNotEquals("Era esperado valores diferentes, mas  bigDecimal é igual a " + " fromFixed", bigDecimal, fromFixed)
chamada antiga: assertEquals(new BigDecimal("123.45"), fromFixed)
nova chamada: assertEquals("Era esperado valores iguais, mas  new BigDecimal('123.45') é diferente de " + " fromFixed", new BigDecimal("123.45"), fromFixed)
chamada antiga: assertEquals(decimal.getPrecision(), bigDecimal.precision())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result647 + " <decimal.getPrecision()> é diferente de " + result648 + " <bigDecimal.precision()>", decimal.getPrecision(), bigDecimal.precision())
chamada antiga: assertTrue(decimal.getScale() >= bigDecimal.scale())
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", decimal.getScale() >= bigDecimal.scale())
chamada antiga: assertNotEquals(0, bigDecimal.compareTo(fromBytes))
nova chamada: assertNotEquals("Era esperado valores diferentes, mas  0 é igual a " + result649 + " <bigDecimal.compareTo(fromBytes)>", 0, bigDecimal.compareTo(fromBytes))
chamada antiga: assertNotEquals(bigDecimal, fromBytes)
nova chamada: assertNotEquals("Era esperado valores diferentes, mas  bigDecimal é igual a " + " fromBytes", bigDecimal, fromBytes)
chamada antiga: assertEquals(new BigDecimal("123.45"), fromBytes)
nova chamada: assertEquals("Era esperado valores iguais, mas  new BigDecimal('123.45') é diferente de " + " fromBytes", new BigDecimal("123.45"), fromBytes)
chamada antiga: Assert.assertEquals("myrecord", schema.getName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'myrecord' é diferente de " + result650 + " <schema.getName()>", "myrecord", schema.getName())
chamada antiga: Assert.assertEquals("org.example", schema.getNamespace())
nova chamada: assertEquals("Era esperado valores iguais, mas  'org.example' é diferente de " + result651 + " <schema.getNamespace()>", "org.example", schema.getNamespace())
chamada antiga: Assert.assertEquals("org.example.oldrecord", schema.getAliases().iterator().next())
nova chamada: assertEquals("Era esperado valores iguais, mas  'org.example.oldrecord' é diferente de " + result652 + " <schema.getAliases().iterator().next()>", "org.example.oldrecord", schema.getAliases().iterator().next())
chamada antiga: Assert.assertEquals(4, fields.size())
nova chamada: assertEquals("Era esperado valores iguais, mas  4 é diferente de " + result653 + " <fields.size()>", 4, fields.size())
chamada antiga: Assert.assertEquals(new Schema.Field("f0", Schema.create(Schema.Type.STRING)), fields.get(0))
nova chamada: assertEquals("Era esperado valores iguais, mas  new Schema.Field('f0', Schema.create(Schema.Type.STRING)) é diferente de " + result654 + " <fields.get(0)>", new Schema.Field("f0", Schema.create(Schema.Type.STRING)), fields.get(0))
chamada antiga: Assert.assertEquals(new Schema.Field("f1", Schema.create(Schema.Type.LONG), "This is f1"), fields.get(1))
nova chamada: assertEquals("Era esperado valores iguais, mas  new Schema.Field('f1', Schema.create(Schema.Type.LONG), 'This is f1') é diferente de " + result655 + " <fields.get(1)>", new Schema.Field("f1", Schema.create(Schema.Type.LONG), "This is f1"), fields.get(1))
chamada antiga: Assert.assertEquals(new Schema.Field("f2", optional, null, true), fields.get(2))
nova chamada: assertEquals("Era esperado valores iguais, mas  new Schema.Field('f2', optional, null, true) é diferente de " + result656 + " <fields.get(2)>", new Schema.Field("f2", optional, null, true), fields.get(2))
chamada antiga: Assert.assertEquals(new Schema.Field("f3", optional2, null, Schema.Field.NULL_DEFAULT_VALUE), fields.get(3))
nova chamada: assertEquals("Era esperado valores iguais, mas  new Schema.Field('f3', optional2, null, Schema.Field.NULL_DEFAULT_VALUE) é diferente de " + result657 + " <fields.get(3)>", new Schema.Field("f3", optional2, null, Schema.Field.NULL_DEFAULT_VALUE), fields.get(3))
chamada antiga: Assert.assertEquals("mydoc", s.getDoc())
nova chamada: assertEquals("Era esperado valores iguais, mas  'mydoc' é diferente de " + result658 + " <s.getDoc()>", "mydoc", s.getDoc())
chamada antiga: Assert.assertEquals(2, size)
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + " size", 2, size)
chamada antiga: Assert.assertEquals("v1", s.getProp("p1"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'v1' é diferente de " + result659 + " <s.getProp('p1')>", "v1", s.getProp("p1"))
chamada antiga: Assert.assertEquals("v2real", s.getProp("p2"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'v2real' é diferente de " + result660 + " <s.getProp('p2')>", "v2real", s.getProp("p2"))
chamada antiga: Assert.assertEquals(7, s.getObjectProps().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  7 é diferente de " + result661 + " <s.getObjectProps().size()>", 7, s.getObjectProps().size())
chamada antiga: Assert.assertEquals(true, s.getObjectProp("booleanProp"))
nova chamada: assertEquals("Era esperado valores iguais, mas  true é diferente de " + result662 + " <s.getObjectProp('booleanProp')>", true, s.getObjectProp("booleanProp"))
chamada antiga: Assert.assertEquals(Integer.MAX_VALUE, s.getObjectProp("intProp"))
nova chamada: assertEquals("Era esperado valores iguais, mas  Integer.MAX_VALUE é diferente de " + result663 + " <s.getObjectProp('intProp')>", Integer.MAX_VALUE, s.getObjectProp("intProp"))
chamada antiga: Assert.assertEquals(Long.MAX_VALUE, s.getObjectProp("longProp"))
nova chamada: assertEquals("Era esperado valores iguais, mas  Long.MAX_VALUE é diferente de " + result664 + " <s.getObjectProp('longProp')>", Long.MAX_VALUE, s.getObjectProp("longProp"))
chamada antiga: Assert.assertEquals(1.0d, s.getObjectProp("floatProp"))
nova chamada: assertEquals("Era esperado valores iguais, mas  1.0d é diferente de " + result665 + " <s.getObjectProp('floatProp')>", 1.0d, s.getObjectProp("floatProp"))
chamada antiga: Assert.assertEquals(Double.MAX_VALUE, s.getObjectProp("doubleProp"))
nova chamada: assertEquals("Era esperado valores iguais, mas  Double.MAX_VALUE é diferente de " + result666 + " <s.getObjectProp('doubleProp')>", Double.MAX_VALUE, s.getObjectProp("doubleProp"))
chamada antiga: Assert.assertEquals("ABC", s.getObjectProp("byteProp"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'ABC' é diferente de " + result667 + " <s.getObjectProp('byteProp')>", "ABC", s.getObjectProp("byteProp"))
chamada antiga: Assert.assertEquals("abc", s.getObjectProp("stringProp"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'abc' é diferente de " + result668 + " <s.getObjectProp('stringProp')>", "abc", s.getObjectProp("stringProp"))
chamada antiga: Assert.assertEquals(7, f.getObjectProps().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  7 é diferente de " + result669 + " <f.getObjectProps().size()>", 7, f.getObjectProps().size())
chamada antiga: Assert.assertEquals(true, f.getObjectProp("booleanProp"))
nova chamada: assertEquals("Era esperado valores iguais, mas  true é diferente de " + result670 + " <f.getObjectProp('booleanProp')>", true, f.getObjectProp("booleanProp"))
chamada antiga: Assert.assertEquals(Integer.MAX_VALUE, f.getObjectProp("intProp"))
nova chamada: assertEquals("Era esperado valores iguais, mas  Integer.MAX_VALUE é diferente de " + result671 + " <f.getObjectProp('intProp')>", Integer.MAX_VALUE, f.getObjectProp("intProp"))
chamada antiga: Assert.assertEquals(Long.MAX_VALUE, f.getObjectProp("longProp"))
nova chamada: assertEquals("Era esperado valores iguais, mas  Long.MAX_VALUE é diferente de " + result672 + " <f.getObjectProp('longProp')>", Long.MAX_VALUE, f.getObjectProp("longProp"))
chamada antiga: Assert.assertEquals(1.0d, f.getObjectProp("floatProp"))
nova chamada: assertEquals("Era esperado valores iguais, mas  1.0d é diferente de " + result673 + " <f.getObjectProp('floatProp')>", 1.0d, f.getObjectProp("floatProp"))
chamada antiga: Assert.assertEquals(Double.MAX_VALUE, f.getObjectProp("doubleProp"))
nova chamada: assertEquals("Era esperado valores iguais, mas  Double.MAX_VALUE é diferente de " + result674 + " <f.getObjectProp('doubleProp')>", Double.MAX_VALUE, f.getObjectProp("doubleProp"))
chamada antiga: Assert.assertEquals("ABC", f.getObjectProp("byteProp"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'ABC' é diferente de " + result675 + " <f.getObjectProp('byteProp')>", "ABC", f.getObjectProp("byteProp"))
chamada antiga: Assert.assertEquals("abc", f.getObjectProp("stringProp"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'abc' é diferente de " + result676 + " <f.getObjectProp('stringProp')>", "abc", f.getObjectProp("stringProp"))
chamada antiga: Assert.assertEquals(1, s.getObjectProps().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result677 + " <s.getObjectProps().size()>", 1, s.getObjectProps().size())
chamada antiga: Assert.assertEquals(7, valueCollection.size())
nova chamada: assertEquals("Era esperado valores iguais, mas  7 é diferente de " + result678 + " <valueCollection.size()>", 7, valueCollection.size())
chamada antiga: Assert.assertEquals(true, iter.next())
nova chamada: assertEquals("Era esperado valores iguais, mas  true é diferente de " + result679 + " <iter.next()>", true, iter.next())
chamada antiga: Assert.assertEquals(Integer.MAX_VALUE, iter.next())
nova chamada: assertEquals("Era esperado valores iguais, mas  Integer.MAX_VALUE é diferente de " + result680 + " <iter.next()>", Integer.MAX_VALUE, iter.next())
chamada antiga: Assert.assertEquals(Long.MAX_VALUE, iter.next())
nova chamada: assertEquals("Era esperado valores iguais, mas  Long.MAX_VALUE é diferente de " + result681 + " <iter.next()>", Long.MAX_VALUE, iter.next())
chamada antiga: Assert.assertEquals(1.0d, iter.next())
nova chamada: assertEquals("Era esperado valores iguais, mas  1.0d é diferente de " + result682 + " <iter.next()>", 1.0d, iter.next())
chamada antiga: Assert.assertEquals(Double.MAX_VALUE, iter.next())
nova chamada: assertEquals("Era esperado valores iguais, mas  Double.MAX_VALUE é diferente de " + result683 + " <iter.next()>", Double.MAX_VALUE, iter.next())
chamada antiga: Assert.assertEquals("ABC", iter.next())
nova chamada: assertEquals("Era esperado valores iguais, mas  'ABC' é diferente de " + result684 + " <iter.next()>", "ABC", iter.next())
chamada antiga: Assert.assertEquals("abc", iter.next())
nova chamada: assertEquals("Era esperado valores iguais, mas  'abc' é diferente de " + result685 + " <iter.next()>", "abc", iter.next())
chamada antiga: Assert.assertEquals(1, f.getObjectProps().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result686 + " <f.getObjectProps().size()>", 1, f.getObjectProps().size())
chamada antiga: Assert.assertEquals(7, valueCollection.size())
nova chamada: assertEquals("Era esperado valores iguais, mas  7 é diferente de " + result687 + " <valueCollection.size()>", 7, valueCollection.size())
chamada antiga: Assert.assertEquals(true, iter.next())
nova chamada: assertEquals("Era esperado valores iguais, mas  true é diferente de " + result688 + " <iter.next()>", true, iter.next())
chamada antiga: Assert.assertEquals(Integer.MAX_VALUE, iter.next())
nova chamada: assertEquals("Era esperado valores iguais, mas  Integer.MAX_VALUE é diferente de " + result689 + " <iter.next()>", Integer.MAX_VALUE, iter.next())
chamada antiga: Assert.assertEquals(Long.MAX_VALUE, iter.next())
nova chamada: assertEquals("Era esperado valores iguais, mas  Long.MAX_VALUE é diferente de " + result690 + " <iter.next()>", Long.MAX_VALUE, iter.next())
chamada antiga: Assert.assertEquals(1.0d, iter.next())
nova chamada: assertEquals("Era esperado valores iguais, mas  1.0d é diferente de " + result691 + " <iter.next()>", 1.0d, iter.next())
chamada antiga: Assert.assertEquals(Double.MAX_VALUE, iter.next())
nova chamada: assertEquals("Era esperado valores iguais, mas  Double.MAX_VALUE é diferente de " + result692 + " <iter.next()>", Double.MAX_VALUE, iter.next())
chamada antiga: Assert.assertEquals("ABC", iter.next())
nova chamada: assertEquals("Era esperado valores iguais, mas  'ABC' é diferente de " + result693 + " <iter.next()>", "ABC", iter.next())
chamada antiga: Assert.assertEquals("abc", iter.next())
nova chamada: assertEquals("Era esperado valores iguais, mas  'abc' é diferente de " + result694 + " <iter.next()>", "abc", iter.next())
chamada antiga: Assert.assertEquals(values.size(), valueMap.size())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result695 + " <values.size()> é diferente de " + result696 + " <valueMap.size()>", values.size(), valueMap.size())
chamada antiga: Assert.assertEquals(true, valueMap.get("booleanKey"))
nova chamada: assertEquals("Era esperado valores iguais, mas  true é diferente de " + result697 + " <valueMap.get('booleanKey')>", true, valueMap.get("booleanKey"))
chamada antiga: Assert.assertEquals(Integer.MAX_VALUE, valueMap.get("intKey"))
nova chamada: assertEquals("Era esperado valores iguais, mas  Integer.MAX_VALUE é diferente de " + result698 + " <valueMap.get('intKey')>", Integer.MAX_VALUE, valueMap.get("intKey"))
chamada antiga: Assert.assertEquals(Long.MAX_VALUE, valueMap.get("longKey"))
nova chamada: assertEquals("Era esperado valores iguais, mas  Long.MAX_VALUE é diferente de " + result699 + " <valueMap.get('longKey')>", Long.MAX_VALUE, valueMap.get("longKey"))
chamada antiga: Assert.assertEquals(1.0d, valueMap.get("floatKey"))
nova chamada: assertEquals("Era esperado valores iguais, mas  1.0d é diferente de " + result700 + " <valueMap.get('floatKey')>", 1.0d, valueMap.get("floatKey"))
chamada antiga: Assert.assertEquals(Double.MAX_VALUE, valueMap.get("doubleKey"))
nova chamada: assertEquals("Era esperado valores iguais, mas  Double.MAX_VALUE é diferente de " + result701 + " <valueMap.get('doubleKey')>", Double.MAX_VALUE, valueMap.get("doubleKey"))
chamada antiga: Assert.assertEquals("ABC", valueMap.get("byteKey"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'ABC' é diferente de " + result702 + " <valueMap.get('byteKey')>", "ABC", valueMap.get("byteKey"))
chamada antiga: Assert.assertEquals("abc", valueMap.get("stringKey"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'abc' é diferente de " + result703 + " <valueMap.get('stringKey')>", "abc", valueMap.get("stringKey"))
chamada antiga: Assert.assertEquals(values.size(), valueMap.size())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result704 + " <values.size()> é diferente de " + result705 + " <valueMap.size()>", values.size(), valueMap.size())
chamada antiga: Assert.assertEquals(true, valueMap.get("booleanKey"))
nova chamada: assertEquals("Era esperado valores iguais, mas  true é diferente de " + result706 + " <valueMap.get('booleanKey')>", true, valueMap.get("booleanKey"))
chamada antiga: Assert.assertEquals(Integer.MAX_VALUE, valueMap.get("intKey"))
nova chamada: assertEquals("Era esperado valores iguais, mas  Integer.MAX_VALUE é diferente de " + result707 + " <valueMap.get('intKey')>", Integer.MAX_VALUE, valueMap.get("intKey"))
chamada antiga: Assert.assertEquals(Long.MAX_VALUE, valueMap.get("longKey"))
nova chamada: assertEquals("Era esperado valores iguais, mas  Long.MAX_VALUE é diferente de " + result708 + " <valueMap.get('longKey')>", Long.MAX_VALUE, valueMap.get("longKey"))
chamada antiga: Assert.assertEquals(1.0d, valueMap.get("floatKey"))
nova chamada: assertEquals("Era esperado valores iguais, mas  1.0d é diferente de " + result709 + " <valueMap.get('floatKey')>", 1.0d, valueMap.get("floatKey"))
chamada antiga: Assert.assertEquals(Double.MAX_VALUE, valueMap.get("doubleKey"))
nova chamada: assertEquals("Era esperado valores iguais, mas  Double.MAX_VALUE é diferente de " + result710 + " <valueMap.get('doubleKey')>", Double.MAX_VALUE, valueMap.get("doubleKey"))
chamada antiga: Assert.assertEquals("ABC", valueMap.get("byteKey"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'ABC' é diferente de " + result711 + " <valueMap.get('byteKey')>", "ABC", valueMap.get("byteKey"))
chamada antiga: Assert.assertEquals("abc", valueMap.get("stringKey"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'abc' é diferente de " + result712 + " <valueMap.get('stringKey')>", "abc", valueMap.get("stringKey"))
chamada antiga: Assert.assertEquals("myrecord", s1.getName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'myrecord' é diferente de " + result713 + " <s1.getName()>", "myrecord", s1.getName())
chamada antiga: Assert.assertEquals("myrecord", s2.getName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'myrecord' é diferente de " + result714 + " <s2.getName()>", "myrecord", s2.getName())
chamada antiga: Assert.assertEquals("myrecord", s3.getName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'myrecord' é diferente de " + result715 + " <s3.getName()>", "myrecord", s3.getName())
chamada antiga: Assert.assertEquals("myrecord", s4.getName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'myrecord' é diferente de " + result716 + " <s4.getName()>", "myrecord", s4.getName())
chamada antiga: Assert.assertEquals("org.example", s1.getNamespace())
nova chamada: assertEquals("Era esperado valores iguais, mas  'org.example' é diferente de " + result717 + " <s1.getNamespace()>", "org.example", s1.getNamespace())
chamada antiga: Assert.assertEquals("org.example", s2.getNamespace())
nova chamada: assertEquals("Era esperado valores iguais, mas  'org.example' é diferente de " + result718 + " <s2.getNamespace()>", "org.example", s2.getNamespace())
chamada antiga: Assert.assertEquals("org.example", s3.getNamespace())
nova chamada: assertEquals("Era esperado valores iguais, mas  'org.example' é diferente de " + result719 + " <s3.getNamespace()>", "org.example", s3.getNamespace())
chamada antiga: Assert.assertEquals("org.example", s4.getNamespace())
nova chamada: assertEquals("Era esperado valores iguais, mas  'org.example' é diferente de " + result720 + " <s4.getNamespace()>", "org.example", s4.getNamespace())
chamada antiga: Assert.assertEquals("org.example.myrecord", s1.getFullName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'org.example.myrecord' é diferente de " + result721 + " <s1.getFullName()>", "org.example.myrecord", s1.getFullName())
chamada antiga: Assert.assertEquals("org.example.myrecord", s2.getFullName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'org.example.myrecord' é diferente de " + result722 + " <s2.getFullName()>", "org.example.myrecord", s2.getFullName())
chamada antiga: Assert.assertEquals("org.example.myrecord", s3.getFullName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'org.example.myrecord' é diferente de " + result723 + " <s3.getFullName()>", "org.example.myrecord", s3.getFullName())
chamada antiga: Assert.assertEquals("org.example.myrecord", s4.getFullName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'org.example.myrecord' é diferente de " + result724 + " <s4.getFullName()>", "org.example.myrecord", s4.getFullName())
chamada antiga: Assert.assertEquals(expected, built1)
nova chamada: assertEquals("Era esperado valores iguais, mas  expected é diferente de " + " built1", expected, built1)
chamada antiga: Assert.assertEquals(expected, built1)
nova chamada: assertEquals("Era esperado valores iguais, mas  expected é diferente de " + " built1", expected, built1)
chamada antiga: Assert.assertEquals(expected, built1)
nova chamada: assertEquals("Era esperado valores iguais, mas  expected é diferente de " + " built1", expected, built1)
chamada antiga: Assert.assertEquals(expected, built1)
nova chamada: assertEquals("Era esperado valores iguais, mas  expected é diferente de " + " built1", expected, built1)
chamada antiga: Assert.assertEquals(expected, built1)
nova chamada: assertEquals("Era esperado valores iguais, mas  expected é diferente de " + " built1", expected, built1)
chamada antiga: Assert.assertEquals(expected, built1)
nova chamada: assertEquals("Era esperado valores iguais, mas  expected é diferente de " + " built1", expected, built1)
chamada antiga: Assert.assertEquals(expected, built1)
nova chamada: assertEquals("Era esperado valores iguais, mas  expected é diferente de " + " built1", expected, built1)
chamada antiga: Assert.assertEquals(expected, built1)
nova chamada: assertEquals("Era esperado valores iguais, mas  expected é diferente de " + " built1", expected, built1)
chamada antiga: Assert.assertEquals(Schema.create(type), bareByName)
nova chamada: assertEquals("Era esperado valores iguais, mas " + result725 + " <Schema.create(type)> é diferente de " + " bareByName", Schema.create(type), bareByName)
chamada antiga: Assert.assertEquals(bareByName, bare)
nova chamada: assertEquals("Era esperado valores iguais, mas  bareByName é diferente de " + " bare", bareByName, bare)
chamada antiga: Assert.assertEquals("LongList", schema.getName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'LongList' é diferente de " + result726 + " <schema.getName()>", "LongList", schema.getName())
chamada antiga: Assert.assertEquals(2, fields.size())
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + result727 + " <fields.size()>", 2, fields.size())
chamada antiga: Assert.assertEquals(new Schema.Field("value", Schema.create(Schema.Type.LONG), null), fields.get(0))
nova chamada: assertEquals("Era esperado valores iguais, mas  new Schema.Field('value', Schema.create(Schema.Type.LONG), null) é diferente de " + result728 + " <fields.get(0)>", new Schema.Field("value", Schema.create(Schema.Type.LONG), null), fields.get(0))
chamada antiga: Assert.assertEquals(Schema.Type.UNION, fields.get(1).schema().getType())
nova chamada: assertEquals("Era esperado valores iguais, mas  Schema.Type.UNION é diferente de " + result729 + " <fields.get(1).schema().getType()>", Schema.Type.UNION, fields.get(1).schema().getType())
chamada antiga: Assert.assertEquals(Schema.Type.NULL, fields.get(1).schema().getTypes().get(0).getType())
nova chamada: assertEquals("Era esperado valores iguais, mas  Schema.Type.NULL é diferente de " + result730 + " <fields.get(1).schema().getTypes().get(0).getType()>", Schema.Type.NULL, fields.get(1).schema().getTypes().get(0).getType())
chamada antiga: Assert.assertEquals(Schema.Type.RECORD, recordSchema.getType())
nova chamada: assertEquals("Era esperado valores iguais, mas  Schema.Type.RECORD é diferente de " + result731 + " <recordSchema.getType()>", Schema.Type.RECORD, recordSchema.getType())
chamada antiga: Assert.assertEquals("LongList", recordSchema.getName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'LongList' é diferente de " + result732 + " <recordSchema.getName()>", "LongList", recordSchema.getName())
chamada antiga: Assert.assertEquals(NullNode.getInstance(), fields.get(1).defaultValue())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result733 + " <NullNode.getInstance()> é diferente de " + result734 + " <fields.get(1).defaultValue()>", NullNode.getInstance(), fields.get(1).defaultValue())
chamada antiga: Assert.assertEquals(expected, schema)
nova chamada: assertEquals("Era esperado valores iguais, mas  expected é diferente de " + " schema", expected, schema)
chamada antiga: Assert.assertEquals(expected, schema)
nova chamada: assertEquals("Era esperado valores iguais, mas  expected é diferente de " + " schema", expected, schema)
chamada antiga: Assert.assertEquals(expected, schema)
nova chamada: assertEquals("Era esperado valores iguais, mas  expected é diferente de " + " schema", expected, schema)
chamada antiga: Assert.assertEquals(expected, schema1)
nova chamada: assertEquals("Era esperado valores iguais, mas  expected é diferente de " + " schema1", expected, schema1)
chamada antiga: Assert.assertEquals(expected, schema2)
nova chamada: assertEquals("Era esperado valores iguais, mas  expected é diferente de " + " schema2", expected, schema2)
chamada antiga: Assert.assertEquals(expected, schema3)
nova chamada: assertEquals("Era esperado valores iguais, mas  expected é diferente de " + " schema3", expected, schema3)
chamada antiga: Assert.assertEquals(expected, schema1)
nova chamada: assertEquals("Era esperado valores iguais, mas  expected é diferente de " + " schema1", expected, schema1)
chamada antiga: Assert.assertEquals(expected, schema2)
nova chamada: assertEquals("Era esperado valores iguais, mas  expected é diferente de " + " schema2", expected, schema2)
chamada antiga: Assert.assertEquals(expected, schema3)
nova chamada: assertEquals("Era esperado valores iguais, mas  expected é diferente de " + " schema3", expected, schema3)
chamada antiga: Assert.assertEquals(expected, schema)
nova chamada: assertEquals("Era esperado valores iguais, mas  expected é diferente de " + " schema", expected, schema)
chamada antiga: Assert.assertEquals(expected, schema)
nova chamada: assertEquals("Era esperado valores iguais, mas  expected é diferente de " + " schema", expected, schema)
chamada antiga: Assert.assertEquals("documented", rec.getField("documented").doc())
nova chamada: assertEquals("Era esperado valores iguais, mas  'documented' é diferente de " + result735 + " <rec.getField('documented').doc()>", "documented", rec.getField("documented").doc())
chamada antiga: Assert.assertEquals(Order.ASCENDING, rec.getField("ascending").order())
nova chamada: assertEquals("Era esperado valores iguais, mas  Order.ASCENDING é diferente de " + result736 + " <rec.getField('ascending').order()>", Order.ASCENDING, rec.getField("ascending").order())
chamada antiga: Assert.assertEquals(Order.DESCENDING, rec.getField("descending").order())
nova chamada: assertEquals("Era esperado valores iguais, mas  Order.DESCENDING é diferente de " + result737 + " <rec.getField('descending').order()>", Order.DESCENDING, rec.getField("descending").order())
chamada antiga: Assert.assertEquals(Order.IGNORE, rec.getField("ignored").order())
nova chamada: assertEquals("Era esperado valores iguais, mas  Order.IGNORE é diferente de " + result738 + " <rec.getField('ignored').order()>", Order.IGNORE, rec.getField("ignored").order())
chamada antiga: Assert.assertEquals(full, shortcut)
nova chamada: assertEquals("Era esperado valores iguais, mas  full é diferente de " + " shortcut", full, shortcut)
chamada antiga: Assert.assertEquals(Schema.createFixed("Foo", null, null, 1), f)
nova chamada: assertEquals("Era esperado valores iguais, mas " + result739 + " <Schema.createFixed('Foo', null, null, 1)> é diferente de " + " f", Schema.createFixed("Foo", null, null, 1), f)
chamada antiga: Assert.assertEquals(expected, r.getField(name).schema())
nova chamada: assertEquals("Era esperado valores iguais, mas  expected é diferente de " + result740 + " <r.getField(name).schema()>", expected, r.getField(name).schema())
chamada antiga: Assert.assertEquals(false, newRec.get("boolF"))
nova chamada: assertEquals("Era esperado valores iguais, mas  false é diferente de " + result741 + " <newRec.get('boolF')>", false, newRec.get("boolF"))
chamada antiga: Assert.assertEquals(false, newRec.get("boolU"))
nova chamada: assertEquals("Era esperado valores iguais, mas  false é diferente de " + result742 + " <newRec.get('boolU')>", false, newRec.get("boolU"))
chamada antiga: Assert.assertEquals(1, newRec.get("intF"))
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result743 + " <newRec.get('intF')>", 1, newRec.get("intF"))
chamada antiga: Assert.assertEquals(1, newRec.get("intU"))
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result744 + " <newRec.get('intU')>", 1, newRec.get("intU"))
chamada antiga: Assert.assertEquals(2L, newRec.get("longF"))
nova chamada: assertEquals("Era esperado valores iguais, mas  2L é diferente de " + result745 + " <newRec.get('longF')>", 2L, newRec.get("longF"))
chamada antiga: Assert.assertEquals(2L, newRec.get("longU"))
nova chamada: assertEquals("Era esperado valores iguais, mas  2L é diferente de " + result746 + " <newRec.get('longU')>", 2L, newRec.get("longU"))
chamada antiga: Assert.assertEquals(3f, newRec.get("floatF"))
nova chamada: assertEquals("Era esperado valores iguais, mas  3f é diferente de " + result747 + " <newRec.get('floatF')>", 3f, newRec.get("floatF"))
chamada antiga: Assert.assertEquals(3f, newRec.get("floatU"))
nova chamada: assertEquals("Era esperado valores iguais, mas  3f é diferente de " + result748 + " <newRec.get('floatU')>", 3f, newRec.get("floatU"))
chamada antiga: Assert.assertEquals(4d, newRec.get("doubleF"))
nova chamada: assertEquals("Era esperado valores iguais, mas  4d é diferente de " + result749 + " <newRec.get('doubleF')>", 4d, newRec.get("doubleF"))
chamada antiga: Assert.assertEquals(4d, newRec.get("doubleU"))
nova chamada: assertEquals("Era esperado valores iguais, mas  4d é diferente de " + result750 + " <newRec.get('doubleU')>", 4d, newRec.get("doubleU"))
chamada antiga: Assert.assertEquals("def", newRec.get("stringF").toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  'def' é diferente de " + result751 + " <newRec.get('stringF').toString()>", "def", newRec.get("stringF").toString())
chamada antiga: Assert.assertEquals("def", newRec.get("stringU").toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  'def' é diferente de " + result752 + " <newRec.get('stringU').toString()>", "def", newRec.get("stringU").toString())
chamada antiga: Assert.assertEquals(bufdef, newRec.get("bytesF1"))
nova chamada: assertEquals("Era esperado valores iguais, mas  bufdef é diferente de " + result753 + " <newRec.get('bytesF1')>", bufdef, newRec.get("bytesF1"))
chamada antiga: Assert.assertEquals(bufdef, newRec.get("bytesF2"))
nova chamada: assertEquals("Era esperado valores iguais, mas  bufdef é diferente de " + result754 + " <newRec.get('bytesF2')>", bufdef, newRec.get("bytesF2"))
chamada antiga: Assert.assertEquals(bufdef, newRec.get("bytesF3"))
nova chamada: assertEquals("Era esperado valores iguais, mas  bufdef é diferente de " + result755 + " <newRec.get('bytesF3')>", bufdef, newRec.get("bytesF3"))
chamada antiga: Assert.assertEquals(bufdef, newRec.get("bytesU"))
nova chamada: assertEquals("Era esperado valores iguais, mas  bufdef é diferente de " + result756 + " <newRec.get('bytesU')>", bufdef, newRec.get("bytesU"))
chamada antiga: Assert.assertEquals("S", newRec.get("enumF").toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  'S' é diferente de " + result757 + " <newRec.get('enumF').toString()>", "S", newRec.get("enumF").toString())
chamada antiga: Assert.assertEquals("SS", newRec.get("enumU").toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  'SS' é diferente de " + result758 + " <newRec.get('enumU').toString()>", "SS", newRec.get("enumU").toString())
chamada antiga: Assert.assertEquals(mapdef.size(), map.size())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result759 + " <mapdef.size()> é diferente de " + result760 + " <map.size()>", mapdef.size(), map.size())
chamada antiga: Assert.assertEquals(newRec.get("mapF"), newRec.get("mapU"))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result761 + " <newRec.get('mapF')> é diferente de " + result762 + " <newRec.get('mapU')>", newRec.get("mapF"), newRec.get("mapU"))
chamada antiga: Assert.assertEquals(arrdef.size(), arr.size())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result763 + " <arrdef.size()> é diferente de " + result764 + " <arr.size()>", arrdef.size(), arr.size())
chamada antiga: Assert.assertEquals(newRec.get("arrayF"), newRec.get("arrayU"))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result765 + " <newRec.get('arrayF')> é diferente de " + result766 + " <newRec.get('arrayU')>", newRec.get("arrayF"), newRec.get("arrayU"))
chamada antiga: Assert.assertEquals(recdef, newRec.get("recordF"))
nova chamada: assertEquals("Era esperado valores iguais, mas  recdef é diferente de " + result767 + " <newRec.get('recordF')>", recdef, newRec.get("recordF"))
chamada antiga: Assert.assertEquals(recdef2, newRec.get("recordU"))
nova chamada: assertEquals("Era esperado valores iguais, mas  recdef2 é diferente de " + result768 + " <newRec.get('recordU')>", recdef2, newRec.get("recordU"))
chamada antiga: Assert.assertEquals("S", newRec.get("byName").toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  'S' é diferente de " + result769 + " <newRec.get('byName').toString()>", "S", newRec.get("byName").toString())
chamada antiga: Assert.assertEquals(1, rec1.get("requiredInt"))
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result770 + " <rec1.get('requiredInt')>", 1, rec1.get("requiredInt"))
chamada antiga: Assert.assertEquals(null, rec1.get("optionalInt"))
nova chamada: assertEquals("Era esperado valores iguais, mas  null é diferente de " + result771 + " <rec1.get('optionalInt')>", null, rec1.get("optionalInt"))
chamada antiga: Assert.assertEquals(3, rec1.get("nullableIntWithDefault"))
nova chamada: assertEquals("Era esperado valores iguais, mas  3 é diferente de " + result772 + " <rec1.get('nullableIntWithDefault')>", 3, rec1.get("nullableIntWithDefault"))
chamada antiga: Assert.assertEquals(1, rec2.get("requiredInt"))
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result773 + " <rec2.get('requiredInt')>", 1, rec2.get("requiredInt"))
chamada antiga: Assert.assertEquals(2, rec2.get("optionalInt"))
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + result774 + " <rec2.get('optionalInt')>", 2, rec2.get("optionalInt"))
chamada antiga: Assert.assertEquals(13, rec2.get("nullableIntWithDefault"))
nova chamada: assertEquals("Era esperado valores iguais, mas  13 é diferente de " + result775 + " <rec2.get('nullableIntWithDefault')>", 13, rec2.get("nullableIntWithDefault"))
chamada antiga: Assert.assertEquals(a2, a1)
nova chamada: assertEquals("Era esperado valores iguais, mas  a2 é diferente de " + " a1", a2, a1)
chamada antiga: fail("File descriptor leaked from new DataFileReader() over " + maxTries + " tries: (" + sb.substring(0, sb.length() - 1) + ")")
nova chamada: fail("A execução falhou por uma causa deliberada", "File descriptor leaked from new DataFileReader() over " + maxTries + " tries: (" + sb.substring(0, sb.length() - 1) + ")")
chamada antiga: assertEquals("TestSchema", r.getSchema().getName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'TestSchema' é diferente de " + result776 + " <r.getSchema().getName()>", "TestSchema", r.getSchema().getName())
chamada antiga: assertEquals("TestSchema", r2.getSchema().getName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'TestSchema' é diferente de " + result777 + " <r2.getSchema().getName()>", "TestSchema", r2.getSchema().getName())
chamada antiga: Assert.assertNotNull(field.defaultVal())
nova chamada: assertNotNull("Era esperado não nulo, mas " + result778 + " <field.defaultVal()> é nulo", field.defaultVal())
chamada antiga: Assert.assertArrayEquals(new byte[16], (byte[]) field.defaultVal())
nova chamada: assertArrayEquals("Era esperado arrays iguais, mas  new byte[16] é diferente de " + " (byte[]) field.defaultVal()", new byte[16], (byte[]) field.defaultVal())
chamada antiga: Assert.assertFalse(schema.isError())
nova chamada: assertFalse("Era esperado falso, mas " + result779 + " <schema.isError()> é verdadeiro ", schema.isError())
chamada antiga: Assert.assertTrue(fields.get(0).aliases().contains("f0alias"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result780 + " <fields.get(0).aliases().contains('f0alias')> é falso", fields.get(0).aliases().contains("f0alias"))
chamada antiga: Assert.assertNotEquals(new Schema.Field("f3", optional2, null, (Object) null), fields.get(3))
nova chamada: assertNotEquals("Era esperado valores diferentes, mas  new Schema.Field('f3', optional2, null, (Object) null) é igual a " + result781 + " <fields.get(3)>", new Schema.Field("f3", optional2, null, (Object) null), fields.get(3))
chamada antiga: Assert.assertTrue(s.getObjectProp("booleanProp") instanceof Boolean)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", s.getObjectProp("booleanProp") instanceof Boolean)
chamada antiga: Assert.assertTrue(s.getObjectProp("intProp") instanceof Integer)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", s.getObjectProp("intProp") instanceof Integer)
chamada antiga: Assert.assertTrue(s.getObjectProp("intProp") instanceof Integer)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", s.getObjectProp("intProp") instanceof Integer)
chamada antiga: Assert.assertTrue(s.getObjectProp("longProp") instanceof Long)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", s.getObjectProp("longProp") instanceof Long)
chamada antiga: Assert.assertTrue(s.getObjectProp("floatProp") instanceof Double)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", s.getObjectProp("floatProp") instanceof Double)
chamada antiga: Assert.assertTrue(s.getObjectProp("doubleProp") instanceof Double)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", s.getObjectProp("doubleProp") instanceof Double)
chamada antiga: Assert.assertTrue(s.getObjectProp("byteProp") instanceof String)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", s.getObjectProp("byteProp") instanceof String)
chamada antiga: Assert.assertTrue(s.getObjectProp("stringProp") instanceof String)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", s.getObjectProp("stringProp") instanceof String)
chamada antiga: Assert.assertTrue(f.getObjectProp("booleanProp") instanceof Boolean)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", f.getObjectProp("booleanProp") instanceof Boolean)
chamada antiga: Assert.assertTrue(f.getObjectProp("intProp") instanceof Integer)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", f.getObjectProp("intProp") instanceof Integer)
chamada antiga: Assert.assertTrue(f.getObjectProp("intProp") instanceof Integer)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", f.getObjectProp("intProp") instanceof Integer)
chamada antiga: Assert.assertTrue(f.getObjectProp("longProp") instanceof Long)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", f.getObjectProp("longProp") instanceof Long)
chamada antiga: Assert.assertTrue(f.getObjectProp("floatProp") instanceof Double)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", f.getObjectProp("floatProp") instanceof Double)
chamada antiga: Assert.assertTrue(f.getObjectProp("doubleProp") instanceof Double)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", f.getObjectProp("doubleProp") instanceof Double)
chamada antiga: Assert.assertTrue(f.getObjectProp("byteProp") instanceof String)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", f.getObjectProp("byteProp") instanceof String)
chamada antiga: Assert.assertTrue(f.getObjectProp("stringProp") instanceof String)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", f.getObjectProp("stringProp") instanceof String)
chamada antiga: Assert.assertTrue(s.getObjectProp("arrayProp") instanceof Collection)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", s.getObjectProp("arrayProp") instanceof Collection)
chamada antiga: Assert.assertTrue(f.getObjectProp("arrayProp") instanceof Collection)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", f.getObjectProp("arrayProp") instanceof Collection)
chamada antiga: Assert.assertTrue(s.getObjectProp("mapProp") instanceof Map)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", s.getObjectProp("mapProp") instanceof Map)
chamada antiga: Assert.assertTrue(valueMap.get("booleanKey") instanceof Boolean)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", valueMap.get("booleanKey") instanceof Boolean)
chamada antiga: Assert.assertTrue(valueMap.get("intKey") instanceof Integer)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", valueMap.get("intKey") instanceof Integer)
chamada antiga: Assert.assertTrue(valueMap.get("longKey") instanceof Long)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", valueMap.get("longKey") instanceof Long)
chamada antiga: Assert.assertTrue(valueMap.get("floatKey") instanceof Double)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", valueMap.get("floatKey") instanceof Double)
chamada antiga: Assert.assertTrue(valueMap.get("doubleKey") instanceof Double)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", valueMap.get("doubleKey") instanceof Double)
chamada antiga: Assert.assertTrue(valueMap.get("byteKey") instanceof String)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", valueMap.get("byteKey") instanceof String)
chamada antiga: Assert.assertTrue(valueMap.get("stringKey") instanceof String)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", valueMap.get("stringKey") instanceof String)
chamada antiga: Assert.assertTrue(f.getObjectProp("mapProp") instanceof Map)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", f.getObjectProp("mapProp") instanceof Map)
chamada antiga: Assert.assertTrue(valueMap.get("booleanKey") instanceof Boolean)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", valueMap.get("booleanKey") instanceof Boolean)
chamada antiga: Assert.assertTrue(valueMap.get("intKey") instanceof Integer)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", valueMap.get("intKey") instanceof Integer)
chamada antiga: Assert.assertTrue(valueMap.get("longKey") instanceof Long)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", valueMap.get("longKey") instanceof Long)
chamada antiga: Assert.assertTrue(valueMap.get("floatKey") instanceof Double)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", valueMap.get("floatKey") instanceof Double)
chamada antiga: Assert.assertTrue(valueMap.get("doubleKey") instanceof Double)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", valueMap.get("doubleKey") instanceof Double)
chamada antiga: Assert.assertTrue(valueMap.get("byteKey") instanceof String)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", valueMap.get("byteKey") instanceof String)
chamada antiga: Assert.assertTrue(valueMap.get("stringKey") instanceof String)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", valueMap.get("stringKey") instanceof String)
chamada antiga: Assert.assertTrue(rec.getField("aliased").aliases().contains("anAlias"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result782 + " <rec.getField('aliased').aliases().contains('anAlias')> é falso", rec.getField("aliased").aliases().contains("anAlias"))
chamada antiga: Assert.assertNull(newRec.get("nullF"))
nova chamada: assertNull("Era esperado nulo, mas " + result783 + " <newRec.get('nullF')> não é nulo", newRec.get("nullF"))
chamada antiga: Assert.assertNull(newRec.get("nullU"))
nova chamada: assertNull("Era esperado nulo, mas " + result784 + " <newRec.get('nullU')> não é nulo", newRec.get("nullU"))
chamada antiga: Assert.assertArrayEquals(bytedef, ((GenericData.Fixed) newRec.get("fixedF1")).bytes())
nova chamada: assertArrayEquals("Era esperado arrays iguais, mas  bytedef é diferente de " + result785 + " <((GenericData.Fixed) newRec.get('fixedF1')).bytes()>", bytedef, ((GenericData.Fixed) newRec.get("fixedF1")).bytes())
chamada antiga: Assert.assertArrayEquals(bytedef, ((GenericData.Fixed) newRec.get("fixedF2")).bytes())
nova chamada: assertArrayEquals("Era esperado arrays iguais, mas  bytedef é diferente de " + result786 + " <((GenericData.Fixed) newRec.get('fixedF2')).bytes()>", bytedef, ((GenericData.Fixed) newRec.get("fixedF2")).bytes())
chamada antiga: Assert.assertArrayEquals(bytedef, ((GenericData.Fixed) newRec.get("fixedF3")).bytes())
nova chamada: assertArrayEquals("Era esperado arrays iguais, mas  bytedef é diferente de " + result787 + " <((GenericData.Fixed) newRec.get('fixedF3')).bytes()>", bytedef, ((GenericData.Fixed) newRec.get("fixedF3")).bytes())
chamada antiga: Assert.assertArrayEquals(bytedef, ((GenericData.Fixed) newRec.get("fixedU")).bytes())
nova chamada: assertArrayEquals("Era esperado arrays iguais, mas  bytedef é diferente de " + result788 + " <((GenericData.Fixed) newRec.get('fixedU')).bytes()>", bytedef, ((GenericData.Fixed) newRec.get("fixedU")).bytes())
chamada antiga: Assert.assertNotSame(schema1, schema2)
nova chamada: assertNotSame("Era esperado objetos diferentes, mas  schema1 é igual a " + " schema2", schema1, schema2)
chamada antiga: Assert.assertNotSame(schema1, schema3)
nova chamada: assertNotSame("Era esperado objetos diferentes, mas  schema1 é igual a " + " schema3", schema1, schema3)
chamada antiga: MatcherAssert.assertThat(LogicalTypes.getCustomRegisteredTypes(), IsMapContaining.hasEntry("registered", factory))
nova chamada: assertThat("Era esperado que " + result789 + " <LogicalTypes.getCustomRegisteredTypes()> satisfizesse a condição " + result790 + " <IsMapContaining.hasEntry('registered', factory)>, mas não a satisfez", LogicalTypes.getCustomRegisteredTypes(), IsMapContaining.hasEntry("registered", factory))
chamada antiga: MatcherAssert.assertThat(LogicalTypes.getCustomRegisteredTypes(), IsMapContaining.hasEntry("factory", factory))
nova chamada: assertThat("Era esperado que " + result791 + " <LogicalTypes.getCustomRegisteredTypes()> satisfizesse a condição " + result792 + " <IsMapContaining.hasEntry('factory', factory)>, mas não a satisfez", LogicalTypes.getCustomRegisteredTypes(), IsMapContaining.hasEntry("factory", factory))
chamada antiga: MatcherAssert.assertThat(LogicalTypes.getCustomRegisteredTypes(), IsMapContaining.hasEntry("logicalTypeName", factory))
nova chamada: assertThat("Era esperado que " + result793 + " <LogicalTypes.getCustomRegisteredTypes()> satisfizesse a condição " + result794 + " <IsMapContaining.hasEntry('logicalTypeName', factory)>, mas não a satisfez", LogicalTypes.getCustomRegisteredTypes(), IsMapContaining.hasEntry("logicalTypeName", factory))
chamada antiga: MatcherAssert.assertThat(LogicalTypes.getCustomRegisteredTypes(), IsMapContaining.hasEntry(equalTo("service-example"), instanceOf(LogicalTypes.LogicalTypeFactory.class)))
nova chamada: assertThat("Era esperado que " + result795 + " <LogicalTypes.getCustomRegisteredTypes()> satisfizesse a condição " + result796 + " <IsMapContaining.hasEntry(equalTo('service-example'), instanceOf(LogicalTypes.LogicalTypeFactory.class))>, mas não a satisfez", LogicalTypes.getCustomRegisteredTypes(), IsMapContaining.hasEntry(equalTo("service-example"), instanceOf(LogicalTypes.LogicalTypeFactory.class)))
chamada antiga: assertThat(decoded.get("parentField1").toString(), equalTo("parentValue1"))
nova chamada: assertThat("Era esperado que " + result797 + " <decoded.get('parentField1').toString()> satisfizesse a condição " + result798 + " <equalTo('parentValue1')>, mas não a satisfez", decoded.get("parentField1").toString(), equalTo("parentValue1"))
chamada antiga: assertThat(decoded.get("parentField2").toString(), equalTo("parentValue2"))
nova chamada: assertThat("Era esperado que " + result799 + " <decoded.get('parentField2').toString()> satisfizesse a condição " + result800 + " <equalTo('parentValue2')>, mas não a satisfez", decoded.get("parentField2").toString(), equalTo("parentValue2"))
chamada antiga: assertThat(((GenericData.Record) decoded.get("child1")).get("childField").toString(), equalTo("childValue1"))
nova chamada: assertThat("Era esperado que " + result801 + " <((GenericData.Record) decoded.get('child1')).get('childField').toString()> satisfizesse a condição " + result802 + " <equalTo('childValue1')>, mas não a satisfez", ((GenericData.Record) decoded.get("child1")).get("childField").toString(), equalTo("childValue1"))
chamada antiga: assertThat(decoded.get("parentField1").toString(), equalTo("parentValue1"))
nova chamada: assertThat("Era esperado que " + result803 + " <decoded.get('parentField1').toString()> satisfizesse a condição " + result804 + " <equalTo('parentValue1')>, mas não a satisfez", decoded.get("parentField1").toString(), equalTo("parentValue1"))
chamada antiga: assertThat(decoded.get("parentField2").toString(), equalTo("parentValue2"))
nova chamada: assertThat("Era esperado que " + result805 + " <decoded.get('parentField2').toString()> satisfizesse a condição " + result806 + " <equalTo('parentValue2')>, mas não a satisfez", decoded.get("parentField2").toString(), equalTo("parentValue2"))
chamada antiga: assertThat(((GenericData.Record) decoded.get("child1")).get("childField").toString(), equalTo("childValue1"))
nova chamada: assertThat("Era esperado que " + result807 + " <((GenericData.Record) decoded.get('child1')).get('childField').toString()> satisfizesse a condição " + result808 + " <equalTo('childValue1')>, mas não a satisfez", ((GenericData.Record) decoded.get("child1")).get("childField").toString(), equalTo("childValue1"))
chamada antiga: fail("A execução falhou por uma causa deliberada", "File descriptor leaked from new DataFileReader() over " + maxTries + " tries: (" + sb.substring(0, sb.length() - 1) + ")")
nova chamada: fail("A execução falhou por uma causa deliberada", "A execução falhou por uma causa deliberada", "File descriptor leaked from new DataFileReader() over " + maxTries + " tries: (" + sb.substring(0, sb.length() - 1) + ")")
chamada antiga: Assert.assertTrue(RecordBuilderBase.isValidValue(new Field("f", Schema.create(Type.NULL), null, null), null))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result809 + " <RecordBuilderBase.isValidValue(new Field('f', Schema.create(Type.NULL), null, null), null)> é falso", RecordBuilderBase.isValidValue(new Field("f", Schema.create(Type.NULL), null, null), null))
chamada antiga: Assert.assertTrue(RecordBuilderBase.isValidValue(new Field("f", unionWithoutNull, null, null), new Object()))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result810 + " <RecordBuilderBase.isValidValue(new Field('f', unionWithoutNull, null, null), new Object())> é falso", RecordBuilderBase.isValidValue(new Field("f", unionWithoutNull, null, null), new Object()))
chamada antiga: Assert.assertFalse(RecordBuilderBase.isValidValue(new Field("f", unionWithoutNull, null, null), null))
nova chamada: assertFalse("Era esperado falso, mas " + result811 + " <RecordBuilderBase.isValidValue(new Field('f', unionWithoutNull, null, null), null)> é verdadeiro ", RecordBuilderBase.isValidValue(new Field("f", unionWithoutNull, null, null), null))
chamada antiga: Assert.assertTrue(RecordBuilderBase.isValidValue(new Field("f", unionWithNull, null, null), new Object()))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result812 + " <RecordBuilderBase.isValidValue(new Field('f', unionWithNull, null, null), new Object())> é falso", RecordBuilderBase.isValidValue(new Field("f", unionWithNull, null, null), new Object()))
chamada antiga: Assert.assertTrue(RecordBuilderBase.isValidValue(new Field("f", unionWithNull, null, null), null))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result813 + " <RecordBuilderBase.isValidValue(new Field('f', unionWithNull, null, null), null)> é falso", RecordBuilderBase.isValidValue(new Field("f", unionWithNull, null, null), null))
chamada antiga: assertTrue(intClass.isPrimitive())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result814 + " <intClass.isPrimitive()> é falso", intClass.isPrimitive())
chamada antiga: assertFalse(integerClass.isPrimitive())
nova chamada: assertFalse("Era esperado falso, mas " + result815 + " <integerClass.isPrimitive()> é verdadeiro ", integerClass.isPrimitive())
chamada antiga: assertNotNull(Reflection.class.getMethod("primitive", intClass))
nova chamada: assertNotNull("Era esperado não nulo, mas " + result816 + " <Reflection.class.getMethod('primitive', intClass)> é nulo", Reflection.class.getMethod("primitive", intClass))
chamada antiga: assertNotNull(Reflection.class.getMethod("primitiveWrapper", integerClass))
nova chamada: assertNotNull("Era esperado não nulo, mas " + result817 + " <Reflection.class.getMethod('primitiveWrapper', integerClass)> é nulo", Reflection.class.getMethod("primitiveWrapper", integerClass))
chamada antiga: assertEquals(1, record.get("x"))
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result818 + " <record.get('x')>", 1, record.get("x"))
chamada antiga: assertEquals("str", record.get("y"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'str' é diferente de " + result819 + " <record.get('y')>", "str", record.get("y"))
chamada antiga: assertEquals(before, after)
nova chamada: assertEquals("Era esperado valores iguais, mas  before é diferente de " + " after", before, after)
chamada antiga: assertEquals(record, copy)
nova chamada: assertEquals("Era esperado valores iguais, mas  record é diferente de " + " copy", record, copy)
chamada antiga: assertEquals(record, copy)
nova chamada: assertEquals("Era esperado valores iguais, mas  record é diferente de " + " copy", record, copy)
chamada antiga: assertTrue(out.flushCount < currentCount && out.flushCount >= flushCounter)
nova chamada: assertTrue(out.flushCount < currentCount && out.flushCount >= flushCounter, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assert.assertEquals(allAsV2, decodedUsingV2)
nova chamada: assertEquals("Era esperado valores iguais, mas  allAsV2 é diferente de " + " decodedUsingV2", allAsV2, decodedUsingV2)
chamada antiga: Assert.assertEquals(V2_BUILDER.set("id", 6L).set("message", "m-6").clear("data").build(), record)
nova chamada: assertEquals("Era esperado valores iguais, mas " + result820 + " <V2_BUILDER.set('id', 6L).set('message', 'm-6').clear('data').build()> é diferente de " + " record", V2_BUILDER.set("id", 6L).set("message", "m-6").clear("data").build(), record)
chamada antiga: Assert.assertEquals(V2_BUILDER.set("id", 4L).set("message", "m-4").clear("data").build(), record)
nova chamada: assertEquals("Era esperado valores iguais, mas " + result821 + " <V2_BUILDER.set('id', 4L).set('message', 'm-4').clear('data').build()> é diferente de " + " record", V2_BUILDER.set("id", 4L).set("message", "m-4").clear("data").build(), record)
chamada antiga: Assert.assertEquals(V1_RECORDS.get(2), record)
nova chamada: assertEquals("Era esperado valores iguais, mas " + result822 + " <V1_RECORDS.get(2)> é diferente de " + " record", V1_RECORDS.get(2), record)
chamada antiga: Assert.assertEquals(b0.array(), b1.array())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result823 + " <b0.array()> é diferente de " + result824 + " <b1.array()>", b0.array(), b1.array())
chamada antiga: assertEquals(1, data.resolveUnion(s, new ArrayList<Float>()))
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result825 + " <data.resolveUnion(s, new ArrayList<Float>())>", 1, data.resolveUnion(s, new ArrayList<Float>()))
chamada antiga: assertEquals(1, data.resolveUnion(s, new HashMap<String, Float>()))
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result826 + " <data.resolveUnion(s, new HashMap<String, Float>())>", 1, data.resolveUnion(s, new HashMap<String, Float>()))
chamada antiga: assertEquals(1, data.resolveUnion(s, map))
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result827 + " <data.resolveUnion(s, map)>", 1, data.resolveUnion(s, map))
chamada antiga: assertEquals(1, data.resolveUnion(s, new GenericData.Fixed(f)))
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result828 + " <data.resolveUnion(s, new GenericData.Fixed(f))>", 1, data.resolveUnion(s, new GenericData.Fixed(f)))
chamada antiga: assertEquals(1, data.resolveUnion(s, E.A))
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result829 + " <data.resolveUnion(s, E.A)>", 1, data.resolveUnion(s, E.A))
chamada antiga: assertEquals(1, data.resolveUnion(s, ByteBuffer.wrap(new byte[] { 1 })))
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result830 + " <data.resolveUnion(s, ByteBuffer.wrap(new byte[] { 1 }))>", 1, data.resolveUnion(s, ByteBuffer.wrap(new byte[] { 1 })))
chamada antiga: assertEquals(Schema.Type.UNION, response.getType())
nova chamada: assertEquals("Era esperado valores iguais, mas  Schema.Type.UNION é diferente de " + result831 + " <response.getType()>", Schema.Type.UNION, response.getType())
chamada antiga: assertEquals(Schema.Type.NULL, response.getTypes().get(0).getType())
nova chamada: assertEquals("Era esperado valores iguais, mas  Schema.Type.NULL é diferente de " + result832 + " <response.getTypes().get(0).getType()>", Schema.Type.NULL, response.getTypes().get(0).getType())
chamada antiga: assertEquals(Schema.Type.STRING, response.getTypes().get(1).getType())
nova chamada: assertEquals("Era esperado valores iguais, mas  Schema.Type.STRING é diferente de " + result833 + " <response.getTypes().get(1).getType()>", Schema.Type.STRING, response.getTypes().get(1).getType())
chamada antiga: assertEquals(Schema.Type.UNION, param.getType())
nova chamada: assertEquals("Era esperado valores iguais, mas  Schema.Type.UNION é diferente de " + result834 + " <param.getType()>", Schema.Type.UNION, param.getType())
chamada antiga: assertEquals(Schema.Type.NULL, param.getTypes().get(0).getType())
nova chamada: assertEquals("Era esperado valores iguais, mas  Schema.Type.NULL é diferente de " + result835 + " <param.getTypes().get(0).getType()>", Schema.Type.NULL, param.getTypes().get(0).getType())
chamada antiga: assertEquals(Schema.Type.STRING, param.getTypes().get(1).getType())
nova chamada: assertEquals("Era esperado valores iguais, mas  Schema.Type.STRING é diferente de " + result836 + " <param.getTypes().get(1).getType()>", Schema.Type.STRING, param.getTypes().get(1).getType())
chamada antiga: assertEquals(String.class, ReflectData.get().getClass(response))
nova chamada: assertEquals("Era esperado valores iguais, mas  String.class é diferente de " + result837 + " <ReflectData.get().getClass(response)>", String.class, ReflectData.get().getClass(response))
chamada antiga: assertEquals(String.class, ReflectData.get().getClass(param))
nova chamada: assertEquals("Era esperado valores iguais, mas  String.class é diferente de " + result838 + " <ReflectData.get().getClass(param)>", String.class, ReflectData.get().getClass(param))
chamada antiga: assertEquals(Schema.Type.STRING, r10Schema.getType())
nova chamada: assertEquals("Era esperado valores iguais, mas  Schema.Type.STRING é diferente de " + result839 + " <r10Schema.getType()>", Schema.Type.STRING, r10Schema.getType())
chamada antiga: assertEquals(R10.class.getName(), r10Schema.getProp("java-class"))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result840 + " <R10.class.getName()> é diferente de " + result841 + " <r10Schema.getProp('java-class')>", R10.class.getName(), r10Schema.getProp("java-class"))
chamada antiga: assertEquals(Schema.Type.RECORD, r11Record.getType())
nova chamada: assertEquals("Era esperado valores iguais, mas  Schema.Type.RECORD é diferente de " + result842 + " <r11Record.getType()>", Schema.Type.RECORD, r11Record.getType())
chamada antiga: assertEquals(JsonProperties.NULL_VALUE, r11Field.defaultVal())
nova chamada: assertEquals("Era esperado valores iguais, mas  JsonProperties.NULL_VALUE é diferente de " + result843 + " <r11Field.defaultVal()>", JsonProperties.NULL_VALUE, r11Field.defaultVal())
chamada antiga: assertEquals(Schema.Type.UNION, r11FieldSchema.getType())
nova chamada: assertEquals("Era esperado valores iguais, mas  Schema.Type.UNION é diferente de " + result844 + " <r11FieldSchema.getType()>", Schema.Type.UNION, r11FieldSchema.getType())
chamada antiga: assertEquals(Schema.Type.NULL, r11FieldSchema.getTypes().get(0).getType())
nova chamada: assertEquals("Era esperado valores iguais, mas  Schema.Type.NULL é diferente de " + result845 + " <r11FieldSchema.getTypes().get(0).getType()>", Schema.Type.NULL, r11FieldSchema.getTypes().get(0).getType())
chamada antiga: assertEquals(Schema.Type.STRING, r11String.getType())
nova chamada: assertEquals("Era esperado valores iguais, mas  Schema.Type.STRING é diferente de " + result846 + " <r11String.getType()>", Schema.Type.STRING, r11String.getType())
chamada antiga: assertEquals(Schema.Type.UNION, response.getType())
nova chamada: assertEquals("Era esperado valores iguais, mas  Schema.Type.UNION é diferente de " + result847 + " <response.getType()>", Schema.Type.UNION, response.getType())
chamada antiga: assertEquals(Schema.Type.NULL, response.getTypes().get(0).getType())
nova chamada: assertEquals("Era esperado valores iguais, mas  Schema.Type.NULL é diferente de " + result848 + " <response.getTypes().get(0).getType()>", Schema.Type.NULL, response.getTypes().get(0).getType())
chamada antiga: assertEquals(Schema.Type.STRING, response.getTypes().get(1).getType())
nova chamada: assertEquals("Era esperado valores iguais, mas  Schema.Type.STRING é diferente de " + result849 + " <response.getTypes().get(1).getType()>", Schema.Type.STRING, response.getTypes().get(1).getType())
chamada antiga: assertEquals(Schema.Type.UNION, param.getType())
nova chamada: assertEquals("Era esperado valores iguais, mas  Schema.Type.UNION é diferente de " + result850 + " <param.getType()>", Schema.Type.UNION, param.getType())
chamada antiga: assertEquals(Schema.Type.NULL, param.getTypes().get(0).getType())
nova chamada: assertEquals("Era esperado valores iguais, mas  Schema.Type.NULL é diferente de " + result851 + " <param.getTypes().get(0).getType()>", Schema.Type.NULL, param.getTypes().get(0).getType())
chamada antiga: assertEquals(Schema.Type.STRING, param.getTypes().get(1).getType())
nova chamada: assertEquals("Era esperado valores iguais, mas  Schema.Type.STRING é diferente de " + result852 + " <param.getTypes().get(1).getType()>", Schema.Type.STRING, param.getTypes().get(1).getType())
chamada antiga: assertEquals(String.class, ReflectData.get().getClass(response))
nova chamada: assertEquals("Era esperado valores iguais, mas  String.class é diferente de " + result853 + " <ReflectData.get().getClass(response)>", String.class, ReflectData.get().getClass(response))
chamada antiga: assertEquals(String.class, ReflectData.get().getClass(param))
nova chamada: assertEquals("Era esperado valores iguais, mas  String.class é diferente de " + result854 + " <ReflectData.get().getClass(param)>", String.class, ReflectData.get().getClass(param))
chamada antiga: assertEquals(Schema.Type.INT, s.getField("x").schema().getType())
nova chamada: assertEquals("Era esperado valores iguais, mas  Schema.Type.INT é diferente de " + result855 + " <s.getField('x').schema().getType()>", Schema.Type.INT, s.getField("x").schema().getType())
chamada antiga: assertEquals(new Schema.Parser().parse("{\"type\":\"array\",\"items\":[\"null\",\"string\"]}"), s.getField("strings").schema())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result856 + " <new Schema.Parser().parse('{\'type\':\'array\',\'items\':[\'null\',\'string\']}')> é diferente de " + result857 + " <s.getField('strings').schema()>", new Schema.Parser().parse("{\"type\":\"array\",\"items\":[\"null\",\"string\"]}"), s.getField("strings").schema())
chamada antiga: assertEquals(Schema.Type.NULL, s.getType())
nova chamada: assertEquals("Era esperado valores iguais, mas  Schema.Type.NULL é diferente de " + result858 + " <s.getType()>", Schema.Type.NULL, s.getType())
chamada antiga: assertEquals(Schema.Type.INT, message.getResponse().getType())
nova chamada: assertEquals("Era esperado valores iguais, mas  Schema.Type.INT é diferente de " + result859 + " <message.getResponse().getType()>", Schema.Type.INT, message.getResponse().getType())
chamada antiga: assertEquals(Schema.Type.INT, field.schema().getType())
nova chamada: assertEquals("Era esperado valores iguais, mas  Schema.Type.INT é diferente de " + result860 + " <field.schema().getType()>", Schema.Type.INT, field.schema().getType())
chamada antiga: assertEquals(Schema.Type.RECORD, e1.getType())
nova chamada: assertEquals("Era esperado valores iguais, mas  Schema.Type.RECORD é diferente de " + result861 + " <e1.getType()>", Schema.Type.RECORD, e1.getType())
chamada antiga: assertTrue(e1.isError())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result862 + " <e1.isError()> é falso", e1.isError())
chamada antiga: assertEquals(Schema.Type.UNION, messageSchema.getType())
nova chamada: assertEquals("Era esperado valores iguais, mas  Schema.Type.UNION é diferente de " + result863 + " <messageSchema.getType()>", Schema.Type.UNION, messageSchema.getType())
chamada antiga: assertEquals(Schema.Type.NULL, messageSchema.getTypes().get(0).getType())
nova chamada: assertEquals("Era esperado valores iguais, mas  Schema.Type.NULL é diferente de " + result864 + " <messageSchema.getTypes().get(0).getType()>", Schema.Type.NULL, messageSchema.getTypes().get(0).getType())
chamada antiga: assertEquals(Schema.Type.STRING, messageSchema.getTypes().get(1).getType())
nova chamada: assertEquals("Era esperado valores iguais, mas  Schema.Type.STRING é diferente de " + result865 + " <messageSchema.getTypes().get(1).getType()>", Schema.Type.STRING, messageSchema.getTypes().get(1).getType())
chamada antiga: assertEquals(Schema.Type.UNION, response.getType())
nova chamada: assertEquals("Era esperado valores iguais, mas  Schema.Type.UNION é diferente de " + result866 + " <response.getType()>", Schema.Type.UNION, response.getType())
chamada antiga: assertEquals(Schema.Type.STRING, response.getTypes().get(0).getType())
nova chamada: assertEquals("Era esperado valores iguais, mas  Schema.Type.STRING é diferente de " + result867 + " <response.getTypes().get(0).getType()>", Schema.Type.STRING, response.getTypes().get(0).getType())
chamada antiga: assertEquals(e1, response.getTypes().get(1))
nova chamada: assertEquals("Era esperado valores iguais, mas  e1 é diferente de " + result868 + " <response.getTypes().get(1)>", e1, response.getTypes().get(1))
chamada antiga: assertEquals(noPackage.getName(), ReflectData.getClassName(s))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result869 + " <noPackage.getName()> é diferente de " + result870 + " <ReflectData.getClassName(s)>", noPackage.getName(), ReflectData.getClassName(s))
chamada antiga: assertEquals(object, after)
nova chamada: assertEquals("Era esperado valores iguais, mas  object é diferente de " + " after", object, after)
chamada antiga: assertEquals(schemaJson, ReflectData.get().getSchema(type).toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  schemaJson é diferente de " + result871 + " <ReflectData.get().getSchema(type).toString()>", schemaJson, ReflectData.get().getSchema(type).toString())
chamada antiga: assertEquals(record, decoded)
nova chamada: assertEquals("Era esperado valores iguais, mas  record é diferente de " + " decoded", record, decoded)
chamada antiga: assertTrue(decoded.i1 == null)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", decoded.i1 == null)
chamada antiga: assertTrue(decoded.i2 == null)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", decoded.i2 == null)
chamada antiga: assertTrue(decoded.i3 == null)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", decoded.i3 == null)
chamada antiga: assertTrue(decoded.i4 == null)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", decoded.i4 == null)
chamada antiga: assertTrue(decoded.i5 == 5)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", decoded.i5 == 5)
chamada antiga: assertTrue(decoded.i6 == 6)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", decoded.i6 == 6)
chamada antiga: assertTrue(decoded.i7.getTime() == 7)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", decoded.i7.getTime() == 7)
chamada antiga: assertTrue(decoded.i8 == 8)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", decoded.i8 == 8)
chamada antiga: assertTrue(decoded.i9.getTime() == 9)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", decoded.i9.getTime() == 9)
chamada antiga: assertTrue(decoded.i10.getTime() == 10)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", decoded.i10.getTime() == 10)
chamada antiga: assertTrue(decoded.i11.getTime() == 11)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", decoded.i11.getTime() == 11)
chamada antiga: assertEquals(schm.toString(), "{\"type\":\"record\",\"name\":\"AvroEncRecord\",\"namespace" + "\":\"org.apache.avro.reflect.TestReflect\",\"fields\":[{\"name\":\"date\"," + "\"type\":{\"type\":\"long\",\"CustomEncoding\":\"DateAsLongEncoding\"}}]}")
nova chamada: assertEquals("Era esperado valores iguais, mas " + result872 + " <schm.toString()> é diferente de " + " '{\'type\':\'record\',\'name\':\'AvroEncRecord\',\'namespace' + '\':\'org.apache.avro.reflect.TestReflect\',\'fields\':[{\'name\':\'date\',' + '\'type\':{\'type\':\'long\',\'CustomEncoding\':\'DateAsLongEncoding\'}}]}'", schm.toString(), "{\"type\":\"record\",\"name\":\"AvroEncRecord\",\"namespace" + "\":\"org.apache.avro.reflect.TestReflect\",\"fields\":[{\"name\":\"date\"," + "\"type\":{\"type\":\"long\",\"CustomEncoding\":\"DateAsLongEncoding\"}}]}")
chamada antiga: assertEquals(record, decoded)
nova chamada: assertEquals("Era esperado valores iguais, mas  record é diferente de " + " decoded", record, decoded)
chamada antiga: assertEquals(a, decoded)
nova chamada: assertEquals("Era esperado valores iguais, mas  a é diferente de " + " decoded", a, decoded)
chamada antiga: assertEquals(b, decoded)
nova chamada: assertEquals("Era esperado valores iguais, mas  b é diferente de " + " decoded", b, decoded)
chamada antiga: assertEquals(reflected, reparsed)
nova chamada: assertEquals("Era esperado valores iguais, mas  reflected é diferente de " + " reparsed", reflected, reparsed)
chamada antiga: assertEquals("{\"type\":\"string\",\"java-class\":\"" + c.getName() + "\"}", schema.toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  '{\'type\':\'string\',\'java-class\':\'' + c.getName() + '\'}' é diferente de " + result873 + " <schema.toString()>", "{\"type\":\"string\",\"java-class\":\"" + c.getName() + "\"}", schema.toString())
chamada antiga: assertEquals(0, reflectData.compare(datum, decoded, schema, equals))
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + result874 + " <reflectData.compare(datum, decoded, schema, equals)>", 0, reflectData.compare(datum, decoded, schema, equals))
chamada antiga: assertEquals(data.getSchema(data.getClass(s)).toString(), "{\"type\":\"record\",\"name\":\"Z\",\"namespace\":\"org.apache.avro.reflect.TestReflect\",\"fields\":[]}")
nova chamada: assertEquals("Era esperado valores iguais, mas " + result875 + " <data.getSchema(data.getClass(s)).toString()> é diferente de " + " '{\'type\':\'record\',\'name\':\'Z\',\'namespace\':\'org.apache.avro.reflect.TestReflect\',\'fields\':[]}'", data.getSchema(data.getClass(s)).toString(), "{\"type\":\"record\",\"name\":\"Z\",\"namespace\":\"org.apache.avro.reflect.TestReflect\",\"fields\":[]}")
chamada antiga: Assert.assertEquals(requiredSchema(boolean.class), primitives.getField("aBoolean").schema())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result876 + " <requiredSchema(boolean.class)> é diferente de " + result877 + " <primitives.getField('aBoolean').schema()>", requiredSchema(boolean.class), primitives.getField("aBoolean").schema())
chamada antiga: Assert.assertEquals(requiredSchema(byte.class), primitives.getField("aByte").schema())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result878 + " <requiredSchema(byte.class)> é diferente de " + result879 + " <primitives.getField('aByte').schema()>", requiredSchema(byte.class), primitives.getField("aByte").schema())
chamada antiga: Assert.assertEquals(requiredSchema(short.class), primitives.getField("aShort").schema())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result880 + " <requiredSchema(short.class)> é diferente de " + result881 + " <primitives.getField('aShort').schema()>", requiredSchema(short.class), primitives.getField("aShort").schema())
chamada antiga: Assert.assertEquals(requiredSchema(int.class), primitives.getField("anInt").schema())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result882 + " <requiredSchema(int.class)> é diferente de " + result883 + " <primitives.getField('anInt').schema()>", requiredSchema(int.class), primitives.getField("anInt").schema())
chamada antiga: Assert.assertEquals(requiredSchema(long.class), primitives.getField("aLong").schema())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result884 + " <requiredSchema(long.class)> é diferente de " + result885 + " <primitives.getField('aLong').schema()>", requiredSchema(long.class), primitives.getField("aLong").schema())
chamada antiga: Assert.assertEquals(requiredSchema(float.class), primitives.getField("aFloat").schema())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result886 + " <requiredSchema(float.class)> é diferente de " + result887 + " <primitives.getField('aFloat').schema()>", requiredSchema(float.class), primitives.getField("aFloat").schema())
chamada antiga: Assert.assertEquals(requiredSchema(double.class), primitives.getField("aDouble").schema())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result888 + " <requiredSchema(double.class)> é diferente de " + result889 + " <primitives.getField('aDouble').schema()>", requiredSchema(double.class), primitives.getField("aDouble").schema())
chamada antiga: Assert.assertEquals(nullableSchema(boolean.class), wrappers.getField("aBoolean").schema())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result890 + " <nullableSchema(boolean.class)> é diferente de " + result891 + " <wrappers.getField('aBoolean').schema()>", nullableSchema(boolean.class), wrappers.getField("aBoolean").schema())
chamada antiga: Assert.assertEquals(nullableSchema(byte.class), wrappers.getField("aByte").schema())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result892 + " <nullableSchema(byte.class)> é diferente de " + result893 + " <wrappers.getField('aByte').schema()>", nullableSchema(byte.class), wrappers.getField("aByte").schema())
chamada antiga: Assert.assertEquals(nullableSchema(short.class), wrappers.getField("aShort").schema())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result894 + " <nullableSchema(short.class)> é diferente de " + result895 + " <wrappers.getField('aShort').schema()>", nullableSchema(short.class), wrappers.getField("aShort").schema())
chamada antiga: Assert.assertEquals(nullableSchema(int.class), wrappers.getField("anInt").schema())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result896 + " <nullableSchema(int.class)> é diferente de " + result897 + " <wrappers.getField('anInt').schema()>", nullableSchema(int.class), wrappers.getField("anInt").schema())
chamada antiga: Assert.assertEquals(nullableSchema(long.class), wrappers.getField("aLong").schema())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result898 + " <nullableSchema(long.class)> é diferente de " + result899 + " <wrappers.getField('aLong').schema()>", nullableSchema(long.class), wrappers.getField("aLong").schema())
chamada antiga: Assert.assertEquals(nullableSchema(float.class), wrappers.getField("aFloat").schema())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result900 + " <nullableSchema(float.class)> é diferente de " + result901 + " <wrappers.getField('aFloat').schema()>", nullableSchema(float.class), wrappers.getField("aFloat").schema())
chamada antiga: Assert.assertEquals(nullableSchema(double.class), wrappers.getField("aDouble").schema())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result902 + " <nullableSchema(double.class)> é diferente de " + result903 + " <wrappers.getField('aDouble').schema()>", nullableSchema(double.class), wrappers.getField("aDouble").schema())
chamada antiga: Assert.assertEquals(nullableSchema(Primitives.class), wrappers.getField("anObject").schema())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result904 + " <nullableSchema(Primitives.class)> é diferente de " + result905 + " <wrappers.getField('anObject').schema()>", nullableSchema(Primitives.class), wrappers.getField("anObject").schema())
chamada antiga: assertEquals(pojoWithList, deserialized)
nova chamada: assertEquals("Era esperado valores iguais, mas  pojoWithList é diferente de " + " deserialized", pojoWithList, deserialized)
chamada antiga: assertEquals(pojoWithArray, deserialized)
nova chamada: assertEquals("Era esperado valores iguais, mas  pojoWithArray é diferente de " + " deserialized", pojoWithArray, deserialized)
chamada antiga: assertEquals(pojo, deserializedPojo)
nova chamada: assertEquals("Era esperado valores iguais, mas  pojo é diferente de " + " deserializedPojo", pojo, deserializedPojo)
chamada antiga: assertTrue(deserializedPojo.getTestEnum().is_V())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result906 + " <deserializedPojo.getTestEnum().is_V()> é falso", deserializedPojo.getTestEnum().is_V())
chamada antiga: assertTrue(employeeRecord instanceof GenericRecord)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", employeeRecord instanceof GenericRecord)
chamada antiga: assertTrue(key instanceof GenericRecord)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", key instanceof GenericRecord)
chamada antiga: assertTrue(value instanceof GenericRecord)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", value instanceof GenericRecord)
chamada antiga: assertTrue((id.equals(1) && name.equals("Foo")) || (id.equals(2) && name.equals("Bar")))
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", (id.equals(1) && name.equals("Foo")) || (id.equals(2) && name.equals("Bar")))
chamada antiga: assertNotNull(co.getEmployees())
nova chamada: assertNotNull("Era esperado não nulo, mas " + result907 + " <co.getEmployees()> é nulo", co.getEmployees())
chamada antiga: assertEquals(2, co.getEmployees().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + result908 + " <co.getEmployees().size()>", 2, co.getEmployees().size())
chamada antiga: assertTrue(employeeMapElement instanceof GenericRecord)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", employeeMapElement instanceof GenericRecord)
chamada antiga: assertEquals(11, key)
nova chamada: assertEquals("Era esperado valores iguais, mas  11 é diferente de " + " key", 11, key)
chamada antiga: assertTrue(value instanceof GenericRecord)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", value instanceof GenericRecord)
chamada antiga: assertEquals("Foo", name)
nova chamada: assertEquals("Era esperado valores iguais, mas  'Foo' é diferente de " + " name", "Foo", name)
chamada antiga: assertTrue(companyMap instanceof GenericArray)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", companyMap instanceof GenericArray)
chamada antiga: assertTrue(companyMapElement instanceof GenericRecord)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", companyMapElement instanceof GenericRecord)
chamada antiga: assertEquals(14, key)
nova chamada: assertEquals("Era esperado valores iguais, mas  14 é diferente de " + " key", 14, key)
chamada antiga: assertEquals("CompanyFoo", value)
nova chamada: assertEquals("Era esperado valores iguais, mas  'CompanyFoo' é diferente de " + " value", "CompanyFoo", value)
chamada antiga: assertNotNull(co.getEmployees())
nova chamada: assertNotNull("Era esperado não nulo, mas " + result909 + " <co.getEmployees()> é nulo", co.getEmployees())
chamada antiga: assertEquals(1, co.getEmployees().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result910 + " <co.getEmployees().size()>", 1, co.getEmployees().size())
chamada antiga: assertTrue(map1element instanceof GenericRecord)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", map1element instanceof GenericRecord)
chamada antiga: assertEquals(1, key)
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + " key", 1, key)
chamada antiga: assertEquals("Foo", value.toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  'Foo' é diferente de " + result911 + " <value.toString()>", "Foo", value.toString())
chamada antiga: assertEquals(map1obj, map2obj)
nova chamada: assertEquals("Era esperado valores iguais, mas  map1obj é diferente de " + " map2obj", map1obj, map2obj)
chamada antiga: assertNotNull(entity.getMap1())
nova chamada: assertNotNull("Era esperado não nulo, mas " + result912 + " <entity.getMap1()> é nulo", entity.getMap1())
chamada antiga: assertEquals(1, entity.getMap1().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result913 + " <entity.getMap1().size()>", 1, entity.getMap1().size())
chamada antiga: assertEquals(entity.getMap1(), entity.getMap2())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result914 + " <entity.getMap1()> é diferente de " + result915 + " <entity.getMap2()>", entity.getMap1(), entity.getMap2())
chamada antiga: assertEquals(entity.getMap1(), entity.getMap3())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result916 + " <entity.getMap1()> é diferente de " + result917 + " <entity.getMap3()>", entity.getMap1(), entity.getMap3())
chamada antiga: assertEquals(entity.getMap1(), entity.getMap4())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result918 + " <entity.getMap1()> é diferente de " + result919 + " <entity.getMap4()>", entity.getMap1(), entity.getMap4())
chamada antiga: assertEquals(map1schema.getFullName(), "org.apache.avro.reflect.PairIntegerString")
nova chamada: assertEquals("Era esperado valores iguais, mas " + result920 + " <map1schema.getFullName()> é diferente de " + " 'org.apache.avro.reflect.PairIntegerString'", map1schema.getFullName(), "org.apache.avro.reflect.PairIntegerString")
chamada antiga: assertEquals(map1schema, map2schema)
nova chamada: assertEquals("Era esperado valores iguais, mas  map1schema é diferente de " + " map2schema", map1schema, map2schema)
chamada antiga: assertEquals(map1schema, map3schema)
nova chamada: assertEquals("Era esperado valores iguais, mas  map1schema é diferente de " + " map3schema", map1schema, map3schema)
chamada antiga: assertEquals(map1schema, map4schema)
nova chamada: assertEquals("Era esperado valores iguais, mas  map1schema é diferente de " + " map4schema", map1schema, map4schema)
chamada antiga: Assert.assertNotEquals(b0.array(), b1.array())
nova chamada: assertNotEquals("Era esperado valores diferentes, mas " + result921 + " <b0.array()> é igual a " + result922 + " <b1.array()>", b0.array(), b1.array())
chamada antiga: Assert.assertArrayEquals(fileBuffer, buffer.array())
nova chamada: assertArrayEquals("Era esperado arrays iguais, mas  fileBuffer é diferente de " + result923 + " <buffer.array()>", fileBuffer, buffer.array())
chamada antiga: assertThat(s.getField("a1").schema().getLogicalType(), nullValue())
nova chamada: assertThat("Era esperado que " + result924 + " <s.getField('a1').schema().getLogicalType()> satisfizesse a condição " + result925 + " <nullValue()>, mas não a satisfez", s.getField("a1").schema().getLogicalType(), nullValue())
chamada antiga: assertThat(getCapturedStdErr(), is(""))
nova chamada: assertThat("Era esperado que " + result926 + " <getCapturedStdErr()> satisfizesse a condição " + result927 + " <is('')>, mas não a satisfez", getCapturedStdErr(), is(""))
chamada antiga: assertThat(s.getField("a1").schema().getLogicalType(), nullValue())
nova chamada: assertThat("Era esperado que " + result928 + " <s.getField('a1').schema().getLogicalType()> satisfizesse a condição " + result929 + " <nullValue()>, mas não a satisfez", s.getField("a1").schema().getLogicalType(), nullValue())
chamada antiga: assertThat(getCapturedStdErr(), containsString("Ignored the A.a1.logicalType property (\"date\"). It should" + " probably be nested inside the \"type\" for the field."))
nova chamada: assertThat("Era esperado que " + result930 + " <getCapturedStdErr()> satisfizesse a condição " + result931 + " <containsString('Ignored the A.a1.logicalType property (\'date\'). It should' + ' probably be nested inside the \'type\' for the field.')>, mas não a satisfez", getCapturedStdErr(), containsString("Ignored the A.a1.logicalType property (\"date\"). It should" + " probably be nested inside the \"type\" for the field."))
chamada antiga: assertThat(s.getField("a1").schema().getLogicalType(), nullValue())
nova chamada: assertThat("Era esperado que " + result932 + " <s.getField('a1').schema().getLogicalType()> satisfizesse a condição " + result933 + " <nullValue()>, mas não a satisfez", s.getField("a1").schema().getLogicalType(), nullValue())
chamada antiga: assertThat(s.getField("a1").schema().getLogicalType(), nullValue())
nova chamada: assertThat("Era esperado que " + result934 + " <s.getField('a1').schema().getLogicalType()> satisfizesse a condição " + result935 + " <nullValue()>, mas não a satisfez", s.getField("a1").schema().getLogicalType(), nullValue())
chamada antiga: assertThat(getCapturedStdErr(), is(""))
nova chamada: assertThat("Era esperado que " + result936 + " <getCapturedStdErr()> satisfizesse a condição " + result937 + " <is('')>, mas não a satisfez", getCapturedStdErr(), is(""))
chamada antiga: assertThat(s.getField("a1").schema().getLogicalType(), is(LogicalTypes.date()))
nova chamada: assertThat("Era esperado que " + result938 + " <s.getField('a1').schema().getLogicalType()> satisfizesse a condição " + result939 + " <is(LogicalTypes.date())>, mas não a satisfez", s.getField("a1").schema().getLogicalType(), is(LogicalTypes.date()))
chamada antiga: assertThat(s.getField("a1").schema().getLogicalType(), nullValue())
nova chamada: assertThat("Era esperado que " + result940 + " <s.getField('a1').schema().getLogicalType()> satisfizesse a condição " + result941 + " <nullValue()>, mas não a satisfez", s.getField("a1").schema().getLogicalType(), nullValue())
chamada antiga: assertThat(getCapturedStdErr(), containsString("Ignoring invalid logical type for name: date"))
nova chamada: assertThat("Era esperado que " + result942 + " <getCapturedStdErr()> satisfizesse a condição " + result943 + " <containsString('Ignoring invalid logical type for name: date')>, mas não a satisfez", getCapturedStdErr(), containsString("Ignoring invalid logical type for name: date"))
chamada antiga: assertThat(data.getSchema(data.getClass(s)).getFullName(), is("org.apache.avro.reflect.TestReflect.SampleRecord.AnotherSampleRecord"))
nova chamada: assertThat("Era esperado que " + result944 + " <data.getSchema(data.getClass(s)).getFullName()> satisfizesse a condição " + result945 + " <is('org.apache.avro.reflect.TestReflect.SampleRecord.AnotherSampleRecord')>, mas não a satisfez", data.getSchema(data.getClass(s)).getFullName(), is("org.apache.avro.reflect.TestReflect.SampleRecord.AnotherSampleRecord"))
chamada antiga: assertThat(protocol.getTypes(), contains(recordSchema))
nova chamada: assertThat("Era esperado que " + result946 + " <protocol.getTypes()> satisfizesse a condição " + result947 + " <contains(recordSchema)>, mas não a satisfez", protocol.getTypes(), contains(recordSchema))
chamada antiga: assertThat(protocol.getMessages().keySet(), containsInAnyOrder("store", "findById", "exists"))
nova chamada: assertThat("Era esperado que " + result948 + " <protocol.getMessages().keySet()> satisfizesse a condição " + result949 + " <containsInAnyOrder('store', 'findById', 'exists')>, mas não a satisfez", protocol.getMessages().keySet(), containsInAnyOrder("store", "findById", "exists"))
chamada antiga: assertThat(storeArgument.schema(), equalTo(recordSchema))
nova chamada: assertThat("Era esperado que " + result950 + " <storeArgument.schema()> satisfizesse a condição " + result951 + " <equalTo(recordSchema)>, mas não a satisfez", storeArgument.schema(), equalTo(recordSchema))
chamada antiga: assertThat(findByIdArgument.schema(), equalTo(Schema.create(Schema.Type.STRING)))
nova chamada: assertThat("Era esperado que " + result952 + " <findByIdArgument.schema()> satisfizesse a condição " + result953 + " <equalTo(Schema.create(Schema.Type.STRING))>, mas não a satisfez", findByIdArgument.schema(), equalTo(Schema.create(Schema.Type.STRING)))
chamada antiga: assertThat(findByIdResponse, equalTo(recordSchema))
nova chamada: assertThat("Era esperado que  findByIdResponse satisfizesse a condição " + result954 + " <equalTo(recordSchema)>, mas não a satisfez", findByIdResponse, equalTo(recordSchema))
chamada antiga: assertThat(existsArgument.schema(), equalTo(Schema.create(Schema.Type.STRING)))
nova chamada: assertThat("Era esperado que " + result955 + " <existsArgument.schema()> satisfizesse a condição " + result956 + " <equalTo(Schema.create(Schema.Type.STRING))>, mas não a satisfez", existsArgument.schema(), equalTo(Schema.create(Schema.Type.STRING)))
chamada antiga: assertNotNull(parsedStringSchema)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", parsedStringSchema)
chamada antiga: assertNotNull(parsedArrayOfStringSchema)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", parsedArrayOfStringSchema)
chamada antiga: assertEquals(parsedStringSchema.toString(), parsedArrayOfStringSchema.toString())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result957 + " <parsedStringSchema.toString()> é diferente de " + result958 + " <parsedArrayOfStringSchema.toString()>", parsedStringSchema.toString(), parsedArrayOfStringSchema.toString())
chamada antiga: assertEquals(expected, schema)
nova chamada: assertEquals("Era esperado valores iguais, mas  expected é diferente de " + " schema", expected, schema)
chamada antiga: assertNotNull(schemaString)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", schemaString)
chamada antiga: assertNotNull(schemaString)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", schemaString)
chamada antiga: assertNotNull(schemaString)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", schemaString)
chamada antiga: assertNotNull(schemaString)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", schemaString)
chamada antiga: assertEquals(2, schema.getFields().size())
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + result959 + " <schema.getFields().size()>", 2, schema.getFields().size())
chamada antiga: assertTrue(schema.isUnion())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result960 + " <schema.isUnion()> é falso", schema.isUnion())
chamada antiga: assertTrue(schema.isUnion())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result961 + " <schema.isUnion()> é falso", schema.isUnion())
chamada antiga: assertFalse(schema.isUnion())
nova chamada: assertFalse("Era esperado falso, mas " + result962 + " <schema.isUnion()> é verdadeiro ", schema.isUnion())
chamada antiga: assertFalse(schema.isUnion())
nova chamada: assertFalse("Era esperado falso, mas " + result963 + " <schema.isUnion()> é verdadeiro ", schema.isUnion())
chamada antiga: assertFalse(schema.isUnion())
nova chamada: assertFalse("Era esperado falso, mas " + result964 + " <schema.isUnion()> é verdadeiro ", schema.isUnion())
chamada antiga: assertFalse(schema.isUnion())
nova chamada: assertFalse("Era esperado falso, mas " + result965 + " <schema.isUnion()> é verdadeiro ", schema.isUnion())
chamada antiga: assertFalse(schema.isUnion())
nova chamada: assertFalse("Era esperado falso, mas " + result966 + " <schema.isUnion()> é verdadeiro ", schema.isUnion())
chamada antiga: assertTrue(schema.isNullable())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result967 + " <schema.isNullable()> é falso", schema.isNullable())
chamada antiga: assertFalse(schema.isNullable())
nova chamada: assertFalse("Era esperado falso, mas " + result968 + " <schema.isNullable()> é verdadeiro ", schema.isNullable())
chamada antiga: assertFalse(schema.isNullable())
nova chamada: assertFalse("Era esperado falso, mas " + result969 + " <schema.isNullable()> é verdadeiro ", schema.isNullable())
chamada antiga: assertEquals(parent, parentWithoutInlinedChildReference)
nova chamada: assertEquals("Era esperado valores iguais, mas  parent é diferente de " + " parentWithoutInlinedChildReference", parent, parentWithoutInlinedChildReference)
chamada antiga: assertTrue(field.hasDefaultValue())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result970 + " <field.hasDefaultValue()> é falso", field.hasDefaultValue())
chamada antiga: assertEquals(1, field.defaultVal())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result971 + " <field.defaultVal()>", 1, field.defaultVal())
chamada antiga: assertEquals(1, GenericData.get().getDefaultValue(field))
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result972 + " <GenericData.get().getDefaultValue(field)>", 1, GenericData.get().getDefaultValue(field))
chamada antiga: assertTrue(field.hasDefaultValue())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result973 + " <field.hasDefaultValue()> é falso", field.hasDefaultValue())
chamada antiga: assertEquals(Integer.MIN_VALUE, field.defaultVal())
nova chamada: assertEquals("Era esperado valores iguais, mas  Integer.MIN_VALUE é diferente de " + result974 + " <field.defaultVal()>", Integer.MIN_VALUE, field.defaultVal())
chamada antiga: assertEquals(Integer.MIN_VALUE, GenericData.get().getDefaultValue(field))
nova chamada: assertEquals("Era esperado valores iguais, mas  Integer.MIN_VALUE é diferente de " + result975 + " <GenericData.get().getDefaultValue(field)>", Integer.MIN_VALUE, GenericData.get().getDefaultValue(field))
chamada antiga: assertTrue(field.hasDefaultValue())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result976 + " <field.hasDefaultValue()> é falso", field.hasDefaultValue())
chamada antiga: assertEquals(Integer.MAX_VALUE, field.defaultVal())
nova chamada: assertEquals("Era esperado valores iguais, mas  Integer.MAX_VALUE é diferente de " + result977 + " <field.defaultVal()>", Integer.MAX_VALUE, field.defaultVal())
chamada antiga: assertEquals(Integer.MAX_VALUE, GenericData.get().getDefaultValue(field))
nova chamada: assertEquals("Era esperado valores iguais, mas  Integer.MAX_VALUE é diferente de " + result978 + " <GenericData.get().getDefaultValue(field)>", Integer.MAX_VALUE, GenericData.get().getDefaultValue(field))
chamada antiga: assertTrue(field.hasDefaultValue())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result979 + " <field.hasDefaultValue()> é falso", field.hasDefaultValue())
chamada antiga: assertEquals(1, field.defaultVal())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result980 + " <field.defaultVal()>", 1, field.defaultVal())
chamada antiga: assertEquals(1, GenericData.get().getDefaultValue(field))
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result981 + " <GenericData.get().getDefaultValue(field)>", 1, GenericData.get().getDefaultValue(field))
chamada antiga: assertTrue(field.hasDefaultValue())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result982 + " <field.hasDefaultValue()> é falso", field.hasDefaultValue())
chamada antiga: assertEquals(Integer.MIN_VALUE, field.defaultVal())
nova chamada: assertEquals("Era esperado valores iguais, mas  Integer.MIN_VALUE é diferente de " + result983 + " <field.defaultVal()>", Integer.MIN_VALUE, field.defaultVal())
chamada antiga: assertEquals(Integer.MIN_VALUE, GenericData.get().getDefaultValue(field))
nova chamada: assertEquals("Era esperado valores iguais, mas  Integer.MIN_VALUE é diferente de " + result984 + " <GenericData.get().getDefaultValue(field)>", Integer.MIN_VALUE, GenericData.get().getDefaultValue(field))
chamada antiga: assertTrue(field.hasDefaultValue())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result985 + " <field.hasDefaultValue()> é falso", field.hasDefaultValue())
chamada antiga: assertEquals(Integer.MAX_VALUE, field.defaultVal())
nova chamada: assertEquals("Era esperado valores iguais, mas  Integer.MAX_VALUE é diferente de " + result986 + " <field.defaultVal()>", Integer.MAX_VALUE, field.defaultVal())
chamada antiga: assertEquals(Integer.MAX_VALUE, GenericData.get().getDefaultValue(field))
nova chamada: assertEquals("Era esperado valores iguais, mas  Integer.MAX_VALUE é diferente de " + result987 + " <GenericData.get().getDefaultValue(field)>", Integer.MAX_VALUE, GenericData.get().getDefaultValue(field))
chamada antiga: assertTrue(field.hasDefaultValue())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result988 + " <field.hasDefaultValue()> é falso", field.hasDefaultValue())
chamada antiga: assertEquals(1L, field.defaultVal())
nova chamada: assertEquals("Era esperado valores iguais, mas  1L é diferente de " + result989 + " <field.defaultVal()>", 1L, field.defaultVal())
chamada antiga: assertEquals(1L, GenericData.get().getDefaultValue(field))
nova chamada: assertEquals("Era esperado valores iguais, mas  1L é diferente de " + result990 + " <GenericData.get().getDefaultValue(field)>", 1L, GenericData.get().getDefaultValue(field))
chamada antiga: assertTrue(field.hasDefaultValue())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result991 + " <field.hasDefaultValue()> é falso", field.hasDefaultValue())
chamada antiga: assertEquals(Long.MIN_VALUE, field.defaultVal())
nova chamada: assertEquals("Era esperado valores iguais, mas  Long.MIN_VALUE é diferente de " + result992 + " <field.defaultVal()>", Long.MIN_VALUE, field.defaultVal())
chamada antiga: assertEquals(Long.MIN_VALUE, GenericData.get().getDefaultValue(field))
nova chamada: assertEquals("Era esperado valores iguais, mas  Long.MIN_VALUE é diferente de " + result993 + " <GenericData.get().getDefaultValue(field)>", Long.MIN_VALUE, GenericData.get().getDefaultValue(field))
chamada antiga: assertTrue(field.hasDefaultValue())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result994 + " <field.hasDefaultValue()> é falso", field.hasDefaultValue())
chamada antiga: assertEquals(Long.MAX_VALUE, field.defaultVal())
nova chamada: assertEquals("Era esperado valores iguais, mas  Long.MAX_VALUE é diferente de " + result995 + " <field.defaultVal()>", Long.MAX_VALUE, field.defaultVal())
chamada antiga: assertEquals(Long.MAX_VALUE, GenericData.get().getDefaultValue(field))
nova chamada: assertEquals("Era esperado valores iguais, mas  Long.MAX_VALUE é diferente de " + result996 + " <GenericData.get().getDefaultValue(field)>", Long.MAX_VALUE, GenericData.get().getDefaultValue(field))
chamada antiga: assertTrue(field.hasDefaultValue())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result997 + " <field.hasDefaultValue()> é falso", field.hasDefaultValue())
chamada antiga: assertEquals(1L, field.defaultVal())
nova chamada: assertEquals("Era esperado valores iguais, mas  1L é diferente de " + result998 + " <field.defaultVal()>", 1L, field.defaultVal())
chamada antiga: assertEquals(1L, GenericData.get().getDefaultValue(field))
nova chamada: assertEquals("Era esperado valores iguais, mas  1L é diferente de " + result999 + " <GenericData.get().getDefaultValue(field)>", 1L, GenericData.get().getDefaultValue(field))
chamada antiga: assertTrue(field.hasDefaultValue())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1000 + " <field.hasDefaultValue()> é falso", field.hasDefaultValue())
chamada antiga: assertEquals(1.0d, field.defaultVal())
nova chamada: assertEquals("Era esperado valores iguais, mas  1.0d é diferente de " + result1001 + " <field.defaultVal()>", 1.0d, field.defaultVal())
chamada antiga: assertEquals(1.0d, GenericData.get().getDefaultValue(field))
nova chamada: assertEquals("Era esperado valores iguais, mas  1.0d é diferente de " + result1002 + " <GenericData.get().getDefaultValue(field)>", 1.0d, GenericData.get().getDefaultValue(field))
chamada antiga: assertTrue(field.hasDefaultValue())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1003 + " <field.hasDefaultValue()> é falso", field.hasDefaultValue())
chamada antiga: assertEquals(1.0d, field.defaultVal())
nova chamada: assertEquals("Era esperado valores iguais, mas  1.0d é diferente de " + result1004 + " <field.defaultVal()>", 1.0d, field.defaultVal())
chamada antiga: assertEquals(1.0d, GenericData.get().getDefaultValue(field))
nova chamada: assertEquals("Era esperado valores iguais, mas  1.0d é diferente de " + result1005 + " <GenericData.get().getDefaultValue(field)>", 1.0d, GenericData.get().getDefaultValue(field))
chamada antiga: assertTrue(field.hasDefaultValue())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1006 + " <field.hasDefaultValue()> é falso", field.hasDefaultValue())
chamada antiga: assertEquals(1.0d, field.defaultVal())
nova chamada: assertEquals("Era esperado valores iguais, mas  1.0d é diferente de " + result1007 + " <field.defaultVal()>", 1.0d, field.defaultVal())
chamada antiga: assertEquals(1.0d, GenericData.get().getDefaultValue(field))
nova chamada: assertEquals("Era esperado valores iguais, mas  1.0d é diferente de " + result1008 + " <GenericData.get().getDefaultValue(field)>", 1.0d, GenericData.get().getDefaultValue(field))
chamada antiga: assertTrue(field.hasDefaultValue())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1009 + " <field.hasDefaultValue()> é falso", field.hasDefaultValue())
chamada antiga: assertEquals(1.0d, field.defaultVal())
nova chamada: assertEquals("Era esperado valores iguais, mas  1.0d é diferente de " + result1010 + " <field.defaultVal()>", 1.0d, field.defaultVal())
chamada antiga: assertEquals(1.0d, GenericData.get().getDefaultValue(field))
nova chamada: assertEquals("Era esperado valores iguais, mas  1.0d é diferente de " + result1011 + " <GenericData.get().getDefaultValue(field)>", 1.0d, GenericData.get().getDefaultValue(field))
chamada antiga: assertTrue(field.hasDefaultValue())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1012 + " <field.hasDefaultValue()> é falso", field.hasDefaultValue())
chamada antiga: assertEquals(1.0f, field.defaultVal())
nova chamada: assertEquals("Era esperado valores iguais, mas  1.0f é diferente de " + result1013 + " <field.defaultVal()>", 1.0f, field.defaultVal())
chamada antiga: assertEquals(1.0f, GenericData.get().getDefaultValue(field))
nova chamada: assertEquals("Era esperado valores iguais, mas  1.0f é diferente de " + result1014 + " <GenericData.get().getDefaultValue(field)>", 1.0f, GenericData.get().getDefaultValue(field))
chamada antiga: assertTrue(field.hasDefaultValue())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1015 + " <field.hasDefaultValue()> é falso", field.hasDefaultValue())
chamada antiga: assertEquals(1.0f, field.defaultVal())
nova chamada: assertEquals("Era esperado valores iguais, mas  1.0f é diferente de " + result1016 + " <field.defaultVal()>", 1.0f, field.defaultVal())
chamada antiga: assertEquals(1.0f, GenericData.get().getDefaultValue(field))
nova chamada: assertEquals("Era esperado valores iguais, mas  1.0f é diferente de " + result1017 + " <GenericData.get().getDefaultValue(field)>", 1.0f, GenericData.get().getDefaultValue(field))
chamada antiga: assertTrue(field.hasDefaultValue())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1018 + " <field.hasDefaultValue()> é falso", field.hasDefaultValue())
chamada antiga: assertEquals(1.0f, field.defaultVal())
nova chamada: assertEquals("Era esperado valores iguais, mas  1.0f é diferente de " + result1019 + " <field.defaultVal()>", 1.0f, field.defaultVal())
chamada antiga: assertEquals(1.0f, GenericData.get().getDefaultValue(field))
nova chamada: assertEquals("Era esperado valores iguais, mas  1.0f é diferente de " + result1020 + " <GenericData.get().getDefaultValue(field)>", 1.0f, GenericData.get().getDefaultValue(field))
chamada antiga: assertTrue(field.hasDefaultValue())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1021 + " <field.hasDefaultValue()> é falso", field.hasDefaultValue())
chamada antiga: assertEquals(1.0f, field.defaultVal())
nova chamada: assertEquals("Era esperado valores iguais, mas  1.0f é diferente de " + result1022 + " <field.defaultVal()>", 1.0f, field.defaultVal())
chamada antiga: assertEquals(1.0f, GenericData.get().getDefaultValue(field))
nova chamada: assertEquals("Era esperado valores iguais, mas  1.0f é diferente de " + result1023 + " <GenericData.get().getDefaultValue(field)>", 1.0f, GenericData.get().getDefaultValue(field))
chamada antiga: assertEquals(schema, schema2)
nova chamada: assertEquals("Era esperado valores iguais, mas  schema é diferente de " + " schema2", schema, schema2)
chamada antiga: assertEquals("name", name.getQualified("space"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'name' é diferente de " + result1024 + " <name.getQualified('space')>", "name", name.getQualified("space"))
chamada antiga: assertEquals("space.name", name.getQualified("otherdefault"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'space.name' é diferente de " + result1025 + " <name.getQualified('otherdefault')>", "space.name", name.getQualified("otherdefault"))
chamada antiga: assertEquals("Int", nameInt.getQualified("space"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'Int' é diferente de " + result1026 + " <nameInt.getQualified('space')>", "Int", nameInt.getQualified("space"))
chamada antiga: Assert.assertEquals(bbr, deserialized)
nova chamada: assertEquals("Era esperado valores iguais, mas  bbr é diferente de " + " deserialized", bbr, deserialized)
chamada antiga: Assert.assertEquals(toCheck, o)
nova chamada: assertEquals("Era esperado valores iguais, mas  toCheck é diferente de " + " o", toCheck, o)
chamada antiga: assertEquals(StringBuilder.class, object.getClass())
nova chamada: assertEquals("Era esperado valores iguais, mas  StringBuilder.class é diferente de " + result1027 + " <object.getClass()>", StringBuilder.class, object.getClass())
chamada antiga: assertEquals("Hello", builder.toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  'Hello' é diferente de " + result1028 + " <builder.toString()>", "Hello", builder.toString())
chamada antiga: assertEquals(r, o)
nova chamada: assertEquals("Era esperado valores iguais, mas  r é diferente de " + " o", r, o)
chamada antiga: Assert.assertNotNull(toCheck)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", toCheck)
chamada antiga: Assert.assertNotNull(o)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", o)
chamada antiga: Assertions.assertEquals(original, copy)
nova chamada: assertEquals("Era esperado valores iguais, mas  original é diferente de " + " copy", original, copy)
chamada antiga: assertEquals(r0, r1)
nova chamada: assertEquals("Era esperado valores iguais, mas  r0 é diferente de " + " r1", r0, r1)
chamada antiga: assertEquals(r0, r2)
nova chamada: assertEquals("Era esperado valores iguais, mas  r0 é diferente de " + " r2", r0, r2)
chamada antiga: assertEquals(r1, r2)
nova chamada: assertEquals("Era esperado valores iguais, mas  r1 é diferente de " + " r2", r1, r2)
chamada antiga: assertFalse(record2.equals(record1))
nova chamada: assertFalse("Era esperado falso, mas " + result1029 + " <record2.equals(record1)> é verdadeiro ", record2.equals(record1))
chamada antiga: assertFalse(record1.equals(record2))
nova chamada: assertFalse("Era esperado falso, mas " + result1030 + " <record1.equals(record2)> é verdadeiro ", record1.equals(record2))
chamada antiga: assertTrue(forward.equals(backward))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1031 + " <forward.equals(backward)> é falso", forward.equals(backward))
chamada antiga: assertEquals(Integer.valueOf(99), array.get(0))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result1032 + " <Integer.valueOf(99)> é diferente de " + result1033 + " <array.get(0)>", Integer.valueOf(99), array.get(0))
chamada antiga: assertEquals(array, list)
nova chamada: assertEquals("Era esperado valores iguais, mas  array é diferente de " + " list", array, list)
chamada antiga: assertEquals(list, array)
nova chamada: assertEquals("Era esperado valores iguais, mas  list é diferente de " + " array", list, array)
chamada antiga: assertEquals(list.hashCode(), array.hashCode())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result1034 + " <list.hashCode()> é diferente de " + result1035 + " <array.hashCode()>", list.hashCode(), array.hashCode())
chamada antiga: assertEquals(0, array.size())
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + result1036 + " <array.size()>", 0, array.size())
chamada antiga: assertEquals(5, array.size())
nova chamada: assertEquals("Era esperado valores iguais, mas  5 é diferente de " + result1037 + " <array.size()>", 5, array.size())
chamada antiga: assertEquals(Integer.valueOf(6), array.get(0))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result1038 + " <Integer.valueOf(6)> é diferente de " + result1039 + " <array.get(0)>", Integer.valueOf(6), array.get(0))
chamada antiga: assertEquals(6, array.size())
nova chamada: assertEquals("Era esperado valores iguais, mas  6 é diferente de " + result1040 + " <array.size()>", 6, array.size())
chamada antiga: assertEquals(Integer.valueOf(0), array.get(1))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result1041 + " <Integer.valueOf(0)> é diferente de " + result1042 + " <array.get(1)>", Integer.valueOf(0), array.get(1))
chamada antiga: assertEquals(Integer.valueOf(4), array.get(5))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result1043 + " <Integer.valueOf(4)> é diferente de " + result1044 + " <array.get(5)>", Integer.valueOf(4), array.get(5))
chamada antiga: assertEquals(Integer.valueOf(7), array.get(6))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result1045 + " <Integer.valueOf(7)> é diferente de " + result1046 + " <array.get(6)>", Integer.valueOf(7), array.get(6))
chamada antiga: assertEquals(7, array.size())
nova chamada: assertEquals("Era esperado valores iguais, mas  7 é diferente de " + result1047 + " <array.size()>", 7, array.size())
chamada antiga: assertEquals(Integer.valueOf(6), array.get(0))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result1048 + " <Integer.valueOf(6)> é diferente de " + result1049 + " <array.get(0)>", Integer.valueOf(6), array.get(0))
chamada antiga: assertEquals(Integer.valueOf(4), array.get(5))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result1050 + " <Integer.valueOf(4)> é diferente de " + result1051 + " <array.get(5)>", Integer.valueOf(4), array.get(5))
chamada antiga: assertEquals(Integer.valueOf(8), array.get(1))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result1052 + " <Integer.valueOf(8)> é diferente de " + result1053 + " <array.get(1)>", Integer.valueOf(8), array.get(1))
chamada antiga: assertEquals(Integer.valueOf(0), array.get(2))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result1054 + " <Integer.valueOf(0)> é diferente de " + result1055 + " <array.get(2)>", Integer.valueOf(0), array.get(2))
chamada antiga: assertEquals(Integer.valueOf(6), array.get(0))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result1056 + " <Integer.valueOf(6)> é diferente de " + result1057 + " <array.get(0)>", Integer.valueOf(6), array.get(0))
chamada antiga: assertEquals(8, array.size())
nova chamada: assertEquals("Era esperado valores iguais, mas  8 é diferente de " + result1058 + " <array.size()>", 8, array.size())
chamada antiga: assertEquals(10, array.size())
nova chamada: assertEquals("Era esperado valores iguais, mas  10 é diferente de " + result1059 + " <array.size()>", 10, array.size())
chamada antiga: assertEquals(Integer.valueOf(0), array.get(0))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result1060 + " <Integer.valueOf(0)> é diferente de " + result1061 + " <array.get(0)>", Integer.valueOf(0), array.get(0))
chamada antiga: assertEquals(Integer.valueOf(9), array.get(9))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result1062 + " <Integer.valueOf(9)> é diferente de " + result1063 + " <array.get(9)>", Integer.valueOf(9), array.get(9))
chamada antiga: assertEquals(9, array.size())
nova chamada: assertEquals("Era esperado valores iguais, mas  9 é diferente de " + result1064 + " <array.size()>", 9, array.size())
chamada antiga: assertEquals(Integer.valueOf(1), array.get(0))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result1065 + " <Integer.valueOf(1)> é diferente de " + result1066 + " <array.get(0)>", Integer.valueOf(1), array.get(0))
chamada antiga: assertEquals(Integer.valueOf(2), array.get(1))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result1067 + " <Integer.valueOf(2)> é diferente de " + result1068 + " <array.get(1)>", Integer.valueOf(2), array.get(1))
chamada antiga: assertEquals(Integer.valueOf(9), array.get(8))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result1069 + " <Integer.valueOf(9)> é diferente de " + result1070 + " <array.get(8)>", Integer.valueOf(9), array.get(8))
chamada antiga: assertEquals(Integer.valueOf(9), array.remove(8))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result1071 + " <Integer.valueOf(9)> é diferente de " + result1072 + " <array.remove(8)>", Integer.valueOf(9), array.remove(8))
chamada antiga: assertEquals(8, array.size())
nova chamada: assertEquals("Era esperado valores iguais, mas  8 é diferente de " + result1073 + " <array.size()>", 8, array.size())
chamada antiga: assertEquals(Integer.valueOf(88), array.get(8))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result1074 + " <Integer.valueOf(88)> é diferente de " + result1075 + " <array.get(8)>", Integer.valueOf(88), array.get(8))
chamada antiga: assertEquals(10, array.size())
nova chamada: assertEquals("Era esperado valores iguais, mas  10 é diferente de " + result1076 + " <array.size()>", 10, array.size())
chamada antiga: assertEquals(Integer.valueOf(0), array.get(0))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result1077 + " <Integer.valueOf(0)> é diferente de " + result1078 + " <array.get(0)>", Integer.valueOf(0), array.get(0))
chamada antiga: assertEquals(Integer.valueOf(5), array.get(5))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result1079 + " <Integer.valueOf(5)> é diferente de " + result1080 + " <array.get(5)>", Integer.valueOf(5), array.get(5))
chamada antiga: assertEquals(Integer.valueOf(5), array.set(5, 55))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result1081 + " <Integer.valueOf(5)> é diferente de " + result1082 + " <array.set(5, 55)>", Integer.valueOf(5), array.set(5, 55))
chamada antiga: assertEquals(10, array.size())
nova chamada: assertEquals("Era esperado valores iguais, mas  10 é diferente de " + result1083 + " <array.size()>", 10, array.size())
chamada antiga: assertEquals(Integer.valueOf(55), array.get(5))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result1084 + " <Integer.valueOf(55)> é diferente de " + result1085 + " <array.get(5)>", Integer.valueOf(55), array.get(5))
chamada antiga: assertEquals("\"a\\nb\"", data.toString(bytes))
nova chamada: assertEquals("Era esperado valores iguais, mas  '\'a\\nb\'' é diferente de " + result1086 + " <data.toString(bytes)>", "\"a\\nb\"", data.toString(bytes))
chamada antiga: assertEquals("\"a\\nb\"", data.toString(bytes))
nova chamada: assertEquals("Era esperado valores iguais, mas  '\'a\\nb\'' é diferente de " + result1087 + " <data.toString(bytes)>", "\"a\\nb\"", data.toString(bytes))
chamada antiga: assertEquals("{\"a\\n\\\\b\": \"a\\n\\\\b\"}", data.toString(m))
nova chamada: assertEquals("Era esperado valores iguais, mas  '{\'a\\n\\\\b\': \'a\\n\\\\b\'}' é diferente de " + result1088 + " <data.toString(m)>", "{\"a\\n\\\\b\": \"a\\n\\\\b\"}", data.toString(m))
chamada antiga: assertEquals("[97, 10, 98]", data.toString(new GenericData.Fixed(Schema.createFixed("test", null, null, 3), new byte[] { 'a', '\n', 'b' })))
nova chamada: assertEquals("Era esperado valores iguais, mas  '[97, 10, 98]' é diferente de " + result1089 + " <data.toString(new GenericData.Fixed(Schema.createFixed('test', null, null, 3), new byte[] { 'a', '\n', 'b' }))>", "[97, 10, 98]", data.toString(new GenericData.Fixed(Schema.createFixed("test", null, null, 3), new byte[] { 'a', '\n', 'b' })))
chamada antiga: assertEquals("\"/\"", data.toString("/"))
nova chamada: assertEquals("Era esperado valores iguais, mas  '\'/\'' é diferente de " + result1090 + " <data.toString('/')>", "\"/\"", data.toString("/"))
chamada antiga: assertEquals("\"Infinity\"", data.toString(Float.POSITIVE_INFINITY))
nova chamada: assertEquals("Era esperado valores iguais, mas  '\'Infinity\'' é diferente de " + result1091 + " <data.toString(Float.POSITIVE_INFINITY)>", "\"Infinity\"", data.toString(Float.POSITIVE_INFINITY))
chamada antiga: assertEquals("\"-Infinity\"", data.toString(Float.NEGATIVE_INFINITY))
nova chamada: assertEquals("Era esperado valores iguais, mas  '\'-Infinity\'' é diferente de " + result1092 + " <data.toString(Float.NEGATIVE_INFINITY)>", "\"-Infinity\"", data.toString(Float.NEGATIVE_INFINITY))
chamada antiga: assertEquals("\"NaN\"", data.toString(Float.NaN))
nova chamada: assertEquals("Era esperado valores iguais, mas  '\'NaN\'' é diferente de " + result1093 + " <data.toString(Float.NaN)>", "\"NaN\"", data.toString(Float.NaN))
chamada antiga: assertEquals("\"Infinity\"", data.toString(Double.POSITIVE_INFINITY))
nova chamada: assertEquals("Era esperado valores iguais, mas  '\'Infinity\'' é diferente de " + result1094 + " <data.toString(Double.POSITIVE_INFINITY)>", "\"Infinity\"", data.toString(Double.POSITIVE_INFINITY))
chamada antiga: assertEquals("\"-Infinity\"", data.toString(Double.NEGATIVE_INFINITY))
nova chamada: assertEquals("Era esperado valores iguais, mas  '\'-Infinity\'' é diferente de " + result1095 + " <data.toString(Double.NEGATIVE_INFINITY)>", "\"-Infinity\"", data.toString(Double.NEGATIVE_INFINITY))
chamada antiga: assertEquals("\"NaN\"", data.toString(Double.NaN))
nova chamada: assertEquals("Era esperado valores iguais, mas  '\'NaN\'' é diferente de " + result1096 + " <data.toString(Double.NaN)>", "\"NaN\"", data.toString(Double.NaN))
chamada antiga: assertEquals("\"1961-04-12T06:07:10Z\"", data.toString(Instant.parse("1961-04-12T06:07:10Z")))
nova chamada: assertEquals("Era esperado valores iguais, mas  '\'1961-04-12T06:07:10Z\'' é diferente de " + result1097 + " <data.toString(Instant.parse('1961-04-12T06:07:10Z'))>", "\"1961-04-12T06:07:10Z\"", data.toString(Instant.parse("1961-04-12T06:07:10Z")))
chamada antiga: assertEquals("\"1961-04-12\"", data.toString(LocalDate.parse("1961-04-12")))
nova chamada: assertEquals("Era esperado valores iguais, mas  '\'1961-04-12\'' é diferente de " + result1098 + " <data.toString(LocalDate.parse('1961-04-12'))>", "\"1961-04-12\"", data.toString(LocalDate.parse("1961-04-12")))
chamada antiga: assertEquals("\"1961-04-12T06:07:10\"", data.toString(LocalDateTime.parse("1961-04-12T06:07:10")))
nova chamada: assertEquals("Era esperado valores iguais, mas  '\'1961-04-12T06:07:10\'' é diferente de " + result1099 + " <data.toString(LocalDateTime.parse('1961-04-12T06:07:10'))>", "\"1961-04-12T06:07:10\"", data.toString(LocalDateTime.parse("1961-04-12T06:07:10")))
chamada antiga: assertEquals("\"10:10:10\"", data.toString(LocalTime.parse("10:10:10")))
nova chamada: assertEquals("Era esperado valores iguais, mas  '\'10:10:10\'' é diferente de " + result1100 + " <data.toString(LocalTime.parse('10:10:10'))>", "\"10:10:10\"", data.toString(LocalTime.parse("10:10:10")))
chamada antiga: assertEquals(0, z.compareTo(z2))
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + result1101 + " <z.compareTo(z2)>", 0, z.compareTo(z2))
chamada antiga: assertTrue(y.compareTo(z) > 0)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", y.compareTo(z) > 0)
chamada antiga: assertTrue(z.compareTo(y) < 0)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", z.compareTo(y) < 0)
chamada antiga: assertEquals(buffer, buffer_copy)
nova chamada: assertEquals("Era esperado valores iguais, mas  buffer é diferente de " + " buffer_copy", buffer, buffer_copy)
chamada antiga: assertTrue(GenericData.get().validate(schema, z))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1102 + " <GenericData.get().validate(schema, z)> é falso", GenericData.get().validate(schema, z))
chamada antiga: assertTrue(GenericData.get().validate(schema, y))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1103 + " <GenericData.get().validate(schema, y)> é falso", GenericData.get().validate(schema, y))
chamada antiga: assertTrue(GenericData.get().validate(schema, x))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1104 + " <GenericData.get().validate(schema, x)> é falso", GenericData.get().validate(schema, x))
chamada antiga: assertFalse(GenericData.get().validate(schema, w))
nova chamada: assertFalse("Era esperado falso, mas " + result1105 + " <GenericData.get().validate(schema, w)> é verdadeiro ", GenericData.get().validate(schema, w))
chamada antiga: assertTrue(GenericData.get().validate(schema, null))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1106 + " <GenericData.get().validate(schema, null)> é falso", GenericData.get().validate(schema, null))
chamada antiga: assertTrue(GenericData.get().validate(schema, z))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1107 + " <GenericData.get().validate(schema, z)> é falso", GenericData.get().validate(schema, z))
chamada antiga: assertTrue(GenericData.get().validate(schema, y))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1108 + " <GenericData.get().validate(schema, y)> é falso", GenericData.get().validate(schema, y))
chamada antiga: assertTrue(GenericData.get().validate(schema, x))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1109 + " <GenericData.get().validate(schema, x)> é falso", GenericData.get().validate(schema, x))
chamada antiga: assertFalse(GenericData.get().validate(schema, w))
nova chamada: assertFalse("Era esperado falso, mas " + result1110 + " <GenericData.get().validate(schema, w)> é verdadeiro ", GenericData.get().validate(schema, w))
chamada antiga: assertTrue(GenericData.get().validate(schema, null))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1111 + " <GenericData.get().validate(schema, null)> é falso", GenericData.get().validate(schema, null))
chamada antiga: assertTrue(gd.validate(schema, new GenericData.EnumSymbol(schema, "ONE")))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1112 + " <gd.validate(schema, new GenericData.EnumSymbol(schema, 'ONE'))> é falso", gd.validate(schema, new GenericData.EnumSymbol(schema, "ONE")))
chamada antiga: assertTrue(gd.validate(schema, new GenericData.EnumSymbol(schema, anEnum.ONE)))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1113 + " <gd.validate(schema, new GenericData.EnumSymbol(schema, anEnum.ONE))> é falso", gd.validate(schema, new GenericData.EnumSymbol(schema, anEnum.ONE)))
chamada antiga: assertTrue(GenericData.get().validate(unionSchema, record))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1114 + " <GenericData.get().validate(unionSchema, record)> é falso", GenericData.get().validate(unionSchema, record))
chamada antiga: assertTrue(record == list.peek())
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", record == list.peek())
chamada antiga: assertNull(list.peek())
nova chamada: assertNull("Era esperado nulo, mas " + result1115 + " <list.peek()> não é nulo", list.peek())
chamada antiga: Assert.assertEquals(anArray, builder.get("anArray"))
nova chamada: assertEquals("Era esperado valores iguais, mas  anArray é diferente de " + result1116 + " <builder.get('anArray')>", anArray, builder.get("anArray"))
chamada antiga: Assert.assertEquals(1, record.get("intField"))
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result1117 + " <record.get('intField')>", 1, record.get("intField"))
chamada antiga: Assert.assertEquals(anArray, record.get("anArray"))
nova chamada: assertEquals("Era esperado valores iguais, mas  anArray é diferente de " + result1118 + " <record.get('anArray')>", anArray, record.get("anArray"))
chamada antiga: Assert.assertEquals("0", record.get("id").toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  '0' é diferente de " + result1119 + " <record.get('id').toString()>", "0", record.get("id").toString())
chamada antiga: Assert.assertEquals(builder, new GenericRecordBuilder(builder))
nova chamada: assertEquals("Era esperado valores iguais, mas  builder é diferente de " + " new GenericRecordBuilder(builder)", builder, new GenericRecordBuilder(builder))
chamada antiga: Assert.assertEquals(record, new GenericRecordBuilder(record).build())
nova chamada: assertEquals("Era esperado valores iguais, mas  record é diferente de " + result1120 + " <new GenericRecordBuilder(record).build()>", record, new GenericRecordBuilder(record).build())
chamada antiga: assertEquals(0, GenericData.get().compare(specificRecord, deserialized, FooBarSpecificRecord.SCHEMA$))
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + result1121 + " <GenericData.get().compare(specificRecord, deserialized, FooBarSpecificRecord.SCHEMA$)>", 0, GenericData.get().compare(specificRecord, deserialized, FooBarSpecificRecord.SCHEMA$))
chamada antiga: assertEquals(specificRecord, deserialized)
nova chamada: assertEquals("Era esperado valores iguais, mas  specificRecord é diferente de " + " deserialized", specificRecord, deserialized)
chamada antiga: Assert.assertNull(builder.get("id"))
nova chamada: assertNull("Era esperado nulo, mas " + result1122 + " <builder.get('id')> não é nulo", builder.get("id"))
chamada antiga: Assert.assertNotNull(record.get("id"))
nova chamada: assertNotNull("Era esperado não nulo, mas " + result1123 + " <record.get('id')> é nulo", record.get("id"))
chamada antiga: Assert.assertNull(builder.get("intField"))
nova chamada: assertNull("Era esperado nulo, mas " + result1124 + " <builder.get('intField')> não é nulo", builder.get("intField"))
chamada antiga: assertEquals(expectedResult, checkReaderWriterCompatibility(reader, WRITER_SCHEMA))
nova chamada: assertEquals("Era esperado valores iguais, mas  expectedResult é diferente de " + result1125 + " <checkReaderWriterCompatibility(reader, WRITER_SCHEMA)>", expectedResult, checkReaderWriterCompatibility(reader, WRITER_SCHEMA))
chamada antiga: assertEquals(expectedResult, checkReaderWriterCompatibility(reader, WRITER_SCHEMA))
nova chamada: assertEquals("Era esperado valores iguais, mas  expectedResult é diferente de " + result1126 + " <checkReaderWriterCompatibility(reader, WRITER_SCHEMA)>", expectedResult, checkReaderWriterCompatibility(reader, WRITER_SCHEMA))
chamada antiga: assertEquals(expectedResult, checkReaderWriterCompatibility(reader, WRITER_SCHEMA))
nova chamada: assertEquals("Era esperado valores iguais, mas  expectedResult é diferente de " + result1127 + " <checkReaderWriterCompatibility(reader, WRITER_SCHEMA)>", expectedResult, checkReaderWriterCompatibility(reader, WRITER_SCHEMA))
chamada antiga: assertEquals(expectedResult, checkReaderWriterCompatibility(reader, WRITER_SCHEMA))
nova chamada: assertEquals("Era esperado valores iguais, mas  expectedResult é diferente de " + result1128 + " <checkReaderWriterCompatibility(reader, WRITER_SCHEMA)>", expectedResult, checkReaderWriterCompatibility(reader, WRITER_SCHEMA))
chamada antiga: assertEquals(SchemaCompatibility.SchemaCompatibilityType.INCOMPATIBLE, compatibility.getType())
nova chamada: assertEquals("Era esperado valores iguais, mas  SchemaCompatibility.SchemaCompatibilityType.INCOMPATIBLE é diferente de " + result1129 + " <compatibility.getType()>", SchemaCompatibility.SchemaCompatibilityType.INCOMPATIBLE, compatibility.getType())
chamada antiga: assertEquals(SchemaCompatibility.SchemaCompatibilityResult.incompatible(SchemaIncompatibilityType.READER_FIELD_MISSING_DEFAULT_VALUE, reader, WRITER_SCHEMA, "newfield1", asList("", "fields", "1")), compatibility.getResult())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result1130 + " <SchemaCompatibility.SchemaCompatibilityResult.incompatible(SchemaIncompatibilityType.READER_FIELD_MISSING_DEFAULT_VALUE, reader, WRITER_SCHEMA, 'newfield1', asList('', 'fields', '1'))> é diferente de " + result1131 + " <compatibility.getResult()>", SchemaCompatibility.SchemaCompatibilityResult.incompatible(SchemaIncompatibilityType.READER_FIELD_MISSING_DEFAULT_VALUE, reader, WRITER_SCHEMA, "newfield1", asList("", "fields", "1")), compatibility.getResult())
chamada antiga: assertEquals(String.format("Data encoded using writer schema:%n%s%n" + "will or may fail to decode using reader schema:%n%s%n", WRITER_SCHEMA.toString(true), reader.toString(true)), compatibility.getDescription())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result1132 + " <String.format('Data encoded using writer schema:%n%s%n' + 'will or may fail to decode using reader schema:%n%s%n', WRITER_SCHEMA.toString(true), reader.toString(true))> é diferente de " + result1133 + " <compatibility.getDescription()>", String.format("Data encoded using writer schema:%n%s%n" + "will or may fail to decode using reader schema:%n%s%n", WRITER_SCHEMA.toString(true), reader.toString(true)), compatibility.getDescription())
chamada antiga: assertEquals(reader, compatibility.getReader())
nova chamada: assertEquals("Era esperado valores iguais, mas  reader é diferente de " + result1134 + " <compatibility.getReader()>", reader, compatibility.getReader())
chamada antiga: assertEquals(WRITER_SCHEMA, compatibility.getWriter())
nova chamada: assertEquals("Era esperado valores iguais, mas  WRITER_SCHEMA é diferente de " + result1135 + " <compatibility.getWriter()>", WRITER_SCHEMA, compatibility.getWriter())
chamada antiga: assertEquals(validResult, checkReaderWriterCompatibility(validReader, STRING_ARRAY_SCHEMA))
nova chamada: assertEquals("Era esperado valores iguais, mas  validResult é diferente de " + result1136 + " <checkReaderWriterCompatibility(validReader, STRING_ARRAY_SCHEMA)>", validResult, checkReaderWriterCompatibility(validReader, STRING_ARRAY_SCHEMA))
chamada antiga: assertEquals(invalidResult, checkReaderWriterCompatibility(invalidReader, STRING_ARRAY_SCHEMA))
nova chamada: assertEquals("Era esperado valores iguais, mas  invalidResult é diferente de " + result1137 + " <checkReaderWriterCompatibility(invalidReader, STRING_ARRAY_SCHEMA)>", invalidResult, checkReaderWriterCompatibility(invalidReader, STRING_ARRAY_SCHEMA))
chamada antiga: assertEquals(validResult, checkReaderWriterCompatibility(validReader, STRING_SCHEMA))
nova chamada: assertEquals("Era esperado valores iguais, mas  validResult é diferente de " + result1138 + " <checkReaderWriterCompatibility(validReader, STRING_SCHEMA)>", validResult, checkReaderWriterCompatibility(validReader, STRING_SCHEMA))
chamada antiga: assertEquals(invalidResult, checkReaderWriterCompatibility(INT_SCHEMA, STRING_SCHEMA))
nova chamada: assertEquals("Era esperado valores iguais, mas  invalidResult é diferente de " + result1139 + " <checkReaderWriterCompatibility(INT_SCHEMA, STRING_SCHEMA)>", invalidResult, checkReaderWriterCompatibility(INT_SCHEMA, STRING_SCHEMA))
chamada antiga: assertEquals(SchemaCompatibilityType.INCOMPATIBLE, result.getType())
nova chamada: assertEquals("Era esperado valores iguais, mas  SchemaCompatibilityType.INCOMPATIBLE é diferente de " + result1140 + " <result.getType()>", SchemaCompatibilityType.INCOMPATIBLE, result.getType())
chamada antiga: assertEquals(reader, compatibility.getReader())
nova chamada: assertEquals("Era esperado valores iguais, mas  reader é diferente de " + result1141 + " <compatibility.getReader()>", reader, compatibility.getReader())
chamada antiga: assertEquals(writer, compatibility.getWriter())
nova chamada: assertEquals("Era esperado valores iguais, mas  writer é diferente de " + result1142 + " <compatibility.getWriter()>", writer, compatibility.getWriter())
chamada antiga: assertEquals(SchemaCompatibilityType.INCOMPATIBLE, compatibilityResult.getCompatibility())
nova chamada: assertEquals("Era esperado valores iguais, mas  SchemaCompatibilityType.INCOMPATIBLE é diferente de " + result1143 + " <compatibilityResult.getCompatibility()>", SchemaCompatibilityType.INCOMPATIBLE, compatibilityResult.getCompatibility())
chamada antiga: assertEquals(incompatibilityTypes.size(), compatibilityResult.getIncompatibilities().size())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result1144 + " <incompatibilityTypes.size()> é diferente de " + result1145 + " <compatibilityResult.getIncompatibilities().size()>", incompatibilityTypes.size(), compatibilityResult.getIncompatibilities().size())
chamada antiga: assertEquals(description, compatibility.getDescription())
nova chamada: assertEquals("Era esperado valores iguais, mas  description é diferente de " + result1146 + " <compatibility.getDescription()>", description, compatibility.getDescription())
chamada antiga: assertNotNull(loc.get("lat"))
nova chamada: assertNotNull("Era esperado não nulo, mas " + result1147 + " <loc.get('lat')> é nulo", loc.get("lat"))
chamada antiga: assertNull(loc.get("long_r2"))
nova chamada: assertNull("Era esperado nulo, mas " + result1148 + " <loc.get('long_r2')> não é nulo", loc.get("long_r2"))
chamada antiga: Assert.assertFalse(builder.has("intField"))
nova chamada: assertFalse("Era esperado falso, mas " + result1149 + " <builder.has('intField')> é verdadeiro ", builder.has("intField"))
chamada antiga: assertThat(conversion.fromBytes(d1bytes, bytesSchema, decimal), is(d1))
nova chamada: assertThat("Era esperado que " + result1150 + " <conversion.fromBytes(d1bytes, bytesSchema, decimal)> satisfizesse a condição " + result1151 + " <is(d1)>, mas não a satisfez", conversion.fromBytes(d1bytes, bytesSchema, decimal), is(d1))
chamada antiga: assertThat(conversion.fromBytes(d2bytes, bytesSchema, decimal), is(d2))
nova chamada: assertThat("Era esperado que " + result1152 + " <conversion.fromBytes(d2bytes, bytesSchema, decimal)> satisfizesse a condição " + result1153 + " <is(d2)>, mas não a satisfez", conversion.fromBytes(d2bytes, bytesSchema, decimal), is(d2))
chamada antiga: assertThat(conversion.fromFixed(d1fixed, fixedSchema, decimal), is(d1))
nova chamada: assertThat("Era esperado que " + result1154 + " <conversion.fromFixed(d1fixed, fixedSchema, decimal)> satisfizesse a condição " + result1155 + " <is(d1)>, mas não a satisfez", conversion.fromFixed(d1fixed, fixedSchema, decimal), is(d1))
chamada antiga: assertThat(conversion.fromFixed(d2fixed, fixedSchema, decimal), is(d2))
nova chamada: assertThat("Era esperado que " + result1156 + " <conversion.fromFixed(d2fixed, fixedSchema, decimal)> satisfizesse a condição " + result1157 + " <is(d2)>, mas não a satisfez", conversion.fromFixed(d2fixed, fixedSchema, decimal), is(d2))
chamada antiga: assertEquals(JsonProperties.NULL_VALUE, leftField.defaultVal())
nova chamada: assertEquals("Era esperado valores iguais, mas  JsonProperties.NULL_VALUE é diferente de " + result1158 + " <leftField.defaultVal()>", JsonProperties.NULL_VALUE, leftField.defaultVal())
chamada antiga: assertEquals(Type.UNION, leftFieldSchema.getType())
nova chamada: assertEquals("Era esperado valores iguais, mas  Type.UNION é diferente de " + result1159 + " <leftFieldSchema.getType()>", Type.UNION, leftFieldSchema.getType())
chamada antiga: assertEquals("null", leftFieldSchema.getTypes().get(0).getName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'null' é diferente de " + result1160 + " <leftFieldSchema.getTypes().get(0).getName()>", "null", leftFieldSchema.getTypes().get(0).getName())
chamada antiga: assertEquals("Node", leftFieldSchema.getTypes().get(1).getName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'Node' é diferente de " + result1161 + " <leftFieldSchema.getTypes().get(1).getName()>", "Node", leftFieldSchema.getTypes().get(1).getName())
chamada antiga: assertEquals(JsonProperties.NULL_VALUE, rightField.defaultVal())
nova chamada: assertEquals("Era esperado valores iguais, mas  JsonProperties.NULL_VALUE é diferente de " + result1162 + " <rightField.defaultVal()>", JsonProperties.NULL_VALUE, rightField.defaultVal())
chamada antiga: assertEquals(Type.UNION, rightFieldSchema.getType())
nova chamada: assertEquals("Era esperado valores iguais, mas  Type.UNION é diferente de " + result1163 + " <rightFieldSchema.getType()>", Type.UNION, rightFieldSchema.getType())
chamada antiga: assertEquals("null", rightFieldSchema.getTypes().get(0).getName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'null' é diferente de " + result1164 + " <rightFieldSchema.getTypes().get(0).getName()>", "null", rightFieldSchema.getTypes().get(0).getName())
chamada antiga: assertEquals("Node", rightFieldSchema.getTypes().get(1).getName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'Node' é diferente de " + result1165 + " <rightFieldSchema.getTypes().get(1).getName()>", "Node", rightFieldSchema.getTypes().get(1).getName())
chamada antiga: assertEquals(JsonProperties.NULL_VALUE, leftField.defaultVal())
nova chamada: assertEquals("Era esperado valores iguais, mas  JsonProperties.NULL_VALUE é diferente de " + result1166 + " <leftField.defaultVal()>", JsonProperties.NULL_VALUE, leftField.defaultVal())
chamada antiga: assertEquals(Type.UNION, leftFieldSchema.getType())
nova chamada: assertEquals("Era esperado valores iguais, mas  Type.UNION é diferente de " + result1167 + " <leftFieldSchema.getType()>", Type.UNION, leftFieldSchema.getType())
chamada antiga: assertEquals("null", leftFieldSchema.getTypes().get(0).getName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'null' é diferente de " + result1168 + " <leftFieldSchema.getTypes().get(0).getName()>", "null", leftFieldSchema.getTypes().get(0).getName())
chamada antiga: assertEquals("string", leftFieldSchema.getTypes().get(1).getName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'string' é diferente de " + result1169 + " <leftFieldSchema.getTypes().get(1).getName()>", "string", leftFieldSchema.getTypes().get(1).getName())
chamada antiga: assertEquals("Node", leftFieldSchema.getTypes().get(2).getName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'Node' é diferente de " + result1170 + " <leftFieldSchema.getTypes().get(2).getName()>", "Node", leftFieldSchema.getTypes().get(2).getName())
chamada antiga: assertEquals(JsonProperties.NULL_VALUE, rightField.defaultVal())
nova chamada: assertEquals("Era esperado valores iguais, mas  JsonProperties.NULL_VALUE é diferente de " + result1171 + " <rightField.defaultVal()>", JsonProperties.NULL_VALUE, rightField.defaultVal())
chamada antiga: assertEquals(Type.UNION, rightFieldSchema.getType())
nova chamada: assertEquals("Era esperado valores iguais, mas  Type.UNION é diferente de " + result1172 + " <rightFieldSchema.getType()>", Type.UNION, rightFieldSchema.getType())
chamada antiga: assertEquals("null", rightFieldSchema.getTypes().get(0).getName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'null' é diferente de " + result1173 + " <rightFieldSchema.getTypes().get(0).getName()>", "null", rightFieldSchema.getTypes().get(0).getName())
chamada antiga: assertEquals("string", rightFieldSchema.getTypes().get(1).getName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'string' é diferente de " + result1174 + " <rightFieldSchema.getTypes().get(1).getName()>", "string", rightFieldSchema.getTypes().get(1).getName())
chamada antiga: assertEquals("Node", rightFieldSchema.getTypes().get(2).getName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'Node' é diferente de " + result1175 + " <rightFieldSchema.getTypes().get(2).getName()>", "Node", rightFieldSchema.getTypes().get(2).getName())
chamada antiga: assertEquals(33, exceptions)
nova chamada: assertEquals("Era esperado valores iguais, mas  33 é diferente de " + " exceptions", 33, exceptions)
chamada antiga: assertFalse(p1.equals(p2))
nova chamada: assertFalse("Era esperado falso, mas " + result1176 + " <p1.equals(p2)> é verdadeiro ", p1.equals(p2))
chamada antiga: assertNotNull(parsedStringProtocol)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", parsedStringProtocol)
chamada antiga: assertNotNull(parsedArrayOfStringProtocol)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", parsedArrayOfStringProtocol)
chamada antiga: assertEquals(parsedStringProtocol.toString(), parsedArrayOfStringProtocol.toString())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result1177 + " <parsedStringProtocol.toString()> é diferente de " + result1178 + " <parsedArrayOfStringProtocol.toString()>", parsedStringProtocol.toString(), parsedArrayOfStringProtocol.toString())
chamada antiga: assertEquals(m1.getName(), m2.getName())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result1179 + " <m1.getName()> é diferente de " + result1180 + " <m2.getName()>", m1.getName(), m2.getName())
chamada antiga: assertEquals(m1.getDoc(), m2.getDoc())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result1181 + " <m1.getDoc()> é diferente de " + result1182 + " <m2.getDoc()>", m1.getDoc(), m2.getDoc())
chamada antiga: assertEquals(m1.getProp("foo"), m2.getProp("foo"))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result1183 + " <m1.getProp('foo')> é diferente de " + result1184 + " <m2.getProp('foo')>", m1.getProp("foo"), m2.getProp("foo"))
chamada antiga: Assert.assertEquals(genericEnumSymbol, readRecord(schema1, data).get("field"))
nova chamada: assertEquals("Era esperado valores iguais, mas  genericEnumSymbol é diferente de " + result1185 + " <readRecord(schema1, data).get('field')>", genericEnumSymbol, readRecord(schema1, data).get("field"))
chamada antiga: Assert.assertEquals(genericEnumSymbol, readRecord(schema2, data).get("field"))
nova chamada: assertEquals("Era esperado valores iguais, mas  genericEnumSymbol é diferente de " + result1186 + " <readRecord(schema2, data).get('field')>", genericEnumSymbol, readRecord(schema2, data).get("field"))
chamada antiga: Assert.assertEquals(2, action.rindex)
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + " action.rindex", 2, action.rindex)
chamada antiga: Assert.assertEquals(2, action.rindex)
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + " action.rindex", 2, action.rindex)
chamada antiga: Assert.assertEquals(2, action.rindex)
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + " action.rindex", 2, action.rindex)
chamada antiga: Assert.assertEquals(4, action.rindex)
nova chamada: assertEquals("Era esperado valores iguais, mas  4 é diferente de " + " action.rindex", 4, action.rindex)
chamada antiga: Assert.assertTrue(grammar.production[1] instanceof Symbol.UnionAdjustAction)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", grammar.production[1] instanceof Symbol.UnionAdjustAction)
chamada antiga: Assert.assertTrue(grammar.production[1] instanceof Symbol.UnionAdjustAction)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", grammar.production[1] instanceof Symbol.UnionAdjustAction)
chamada antiga: Assert.assertTrue(grammar.production[1] instanceof Symbol.UnionAdjustAction)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", grammar.production[1] instanceof Symbol.UnionAdjustAction)
chamada antiga: Assert.assertTrue(grammar.production[1] instanceof Symbol.UnionAdjustAction)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", grammar.production[1] instanceof Symbol.UnionAdjustAction)
chamada antiga: assertThat(outer, not(outer2))
nova chamada: assertThat("Era esperado que  outer satisfizesse a condição " + result1187 + " <not(outer2)>, mas não a satisfez", outer, not(outer2))
chamada antiga: assertThat(out.get("a1"), instanceOf(String.class))
nova chamada: assertThat("Era esperado que " + result1188 + " <out.get('a1')> satisfizesse a condição " + result1189 + " <instanceOf(String.class)>, mas não a satisfez", out.get("a1"), instanceOf(String.class))
chamada antiga: assertThat(((GenericRecord) out.get("inner")).get("b1"), instanceOf(String.class))
nova chamada: assertThat("Era esperado que " + result1190 + " <((GenericRecord) out.get('inner')).get('b1')> satisfizesse a condição " + result1191 + " <instanceOf(String.class)>, mas não a satisfez", ((GenericRecord) out.get("inner")).get("b1"), instanceOf(String.class))
chamada antiga: Assert.assertEquals(nextIndex, 10)
nova chamada: assertEquals("Era esperado valores iguais, mas  nextIndex é diferente de " + " 10", nextIndex, 10)
chamada antiga: Assert.assertEquals(legacydata.length, result.length)
nova chamada: assertEquals("Era esperado valores iguais, mas  legacydata.length é diferente de " + " result.length", legacydata.length, result.length)
chamada antiga: Assert.assertArrayEquals(legacydata, result)
nova chamada: assertArrayEquals("Era esperado arrays iguais, mas  legacydata é diferente de " + " result", legacydata, result)
chamada antiga: Assert.assertEquals(complexdata.length, result2.length)
nova chamada: assertEquals("Era esperado valores iguais, mas  complexdata.length é diferente de " + " result2.length", complexdata.length, result2.length)
chamada antiga: Assert.assertArrayEquals(complexdata, result2)
nova chamada: assertArrayEquals("Era esperado arrays iguais, mas  complexdata é diferente de " + " result2", complexdata, result2)
chamada antiga: Assert.assertEquals(legacydata.length, result.length)
nova chamada: assertEquals("Era esperado valores iguais, mas  legacydata.length é diferente de " + " result.length", legacydata.length, result.length)
chamada antiga: Assert.assertArrayEquals(legacydata, result)
nova chamada: assertArrayEquals("Era esperado arrays iguais, mas  legacydata é diferente de " + " result", legacydata, result)
chamada antiga: Assert.assertEquals(complexdata.length, result2.length)
nova chamada: assertEquals("Era esperado valores iguais, mas  complexdata.length é diferente de " + " result2.length", complexdata.length, result2.length)
chamada antiga: Assert.assertArrayEquals(complexdata, result2)
nova chamada: assertArrayEquals("Era esperado arrays iguais, mas  complexdata é diferente de " + " result2", complexdata, result2)
chamada antiga: Assert.assertEquals(legacydata.length, result.length)
nova chamada: assertEquals("Era esperado valores iguais, mas  legacydata.length é diferente de " + " result.length", legacydata.length, result.length)
chamada antiga: Assert.assertArrayEquals(legacydata, result)
nova chamada: assertArrayEquals("Era esperado arrays iguais, mas  legacydata é diferente de " + " result", legacydata, result)
chamada antiga: Assert.assertEquals(complexdata.length + 2, result2.length)
nova chamada: assertEquals("Era esperado valores iguais, mas  complexdata.length + 2 é diferente de " + " result2.length", complexdata.length + 2, result2.length)
chamada antiga: Assert.assertEquals(complexdata[0] >>> 1, result2[0])
nova chamada: assertEquals("Era esperado valores iguais, mas  complexdata[0]  1 é diferente de " + " result2[0]", complexdata[0] >>> 1, result2[0])
chamada antiga: Assert.assertEquals(100, in.readLong())
nova chamada: assertEquals("Era esperado valores iguais, mas  100 é diferente de " + result1192 + " <in.readLong()>", 100, in.readLong())
chamada antiga: Assert.assertEquals(200, in.readLong())
nova chamada: assertEquals("Era esperado valores iguais, mas  200 é diferente de " + result1193 + " <in.readLong()>", 200, in.readLong())
chamada antiga: assertEquals(n, buf.remaining())
nova chamada: assertEquals("Era esperado valores iguais, mas  n é diferente de " + result1194 + " <buf.remaining()>", n, buf.remaining())
chamada antiga: assertEquals(s, s2)
nova chamada: assertEquals("Era esperado valores iguais, mas  s é diferente de " + " s2", s, s2)
chamada antiga: Assert.assertEquals(b1.length, bb1.limit() - bb1.position())
nova chamada: assertEquals("Era esperado valores iguais, mas  b1.length é diferente de " + " bb1.limit() - bb1.position()", b1.length, bb1.limit() - bb1.position())
chamada antiga: Assert.assertEquals(b1.length, bb2.limit() - bb2.position())
nova chamada: assertEquals("Era esperado valores iguais, mas  b1.length é diferente de " + " bb2.limit() - bb2.position()", b1.length, bb2.limit() - bb2.position())
chamada antiga: Assert.assertEquals(0, test.skip(5))
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + result1195 + " <test.skip(5)>", 0, test.skip(5))
chamada antiga: Assert.assertEquals(0, test.available())
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + result1196 + " <test.available()>", 0, test.available())
chamada antiga: Assert.assertFalse(test.getClass() != ByteArrayInputStream.class && test.markSupported())
nova chamada: assertFalse("Era esperado falso, mas o valor é verdadeiro", test.getClass() != ByteArrayInputStream.class && test.markSupported())
chamada antiga: Assert.assertEquals(-1, test.read())
nova chamada: assertEquals("Era esperado valores iguais, mas  -1 é diferente de " + result1197 + " <test.read()>", -1, test.read())
chamada antiga: Assert.assertEquals("Invalid int encoding", message)
nova chamada: assertEquals("Era esperado valores iguais, mas  'Invalid int encoding' é diferente de " + " message", "Invalid int encoding", message)
chamada antiga: Assert.assertEquals("Invalid long encoding", message)
nova chamada: assertEquals("Era esperado valores iguais, mas  'Invalid long encoding' é diferente de " + " message", "Invalid long encoding", message)
chamada antiga: Assert.assertTrue(null != eof)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", null != eof)
chamada antiga: Assert.assertEquals(0x10000000000000L, d.readLong())
nova chamada: assertEquals("Era esperado valores iguais, mas  0x10000000000000L é diferente de " + result1198 + " <d.readLong()>", 0x10000000000000L, d.readLong())
chamada antiga: Assert.assertSame(enc, factory.binaryEncoder(out, enc))
nova chamada: assertSame("Era esperado objetos iguais, mas  enc é diferente de " + result1199 + " <factory.binaryEncoder(out, enc)>", enc, factory.binaryEncoder(out, enc))
chamada antiga: Assert.assertSame(reuse, factory.blockingBinaryEncoder(out, reuse))
nova chamada: assertSame("Era esperado objetos iguais, mas  reuse é diferente de " + result1200 + " <factory.blockingBinaryEncoder(out, reuse)>", reuse, factory.blockingBinaryEncoder(out, reuse))
chamada antiga: Assert.assertSame(enc, factory.directBinaryEncoder(out, enc))
nova chamada: assertSame("Era esperado objetos iguais, mas  enc é diferente de " + result1201 + " <factory.directBinaryEncoder(out, enc)>", enc, factory.directBinaryEncoder(out, enc))
chamada antiga: Assert.assertEquals("1" + separator + "2", out.toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  '1' + separator + '2' é diferente de " + result1202 + " <out.toString()>", "1" + separator + "2", out.toString())
chamada antiga: Assert.assertEquals(mapper.readTree("{\"b\":\"myVal\",\"a\":1}"), mapper.readTree(fromAvroToJson(avroBytes, schema, false)))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result1203 + " <mapper.readTree('{\'b\':\'myVal\',\'a\':1}')> é diferente de " + result1204 + " <mapper.readTree(fromAvroToJson(avroBytes, schema, false))>", mapper.readTree("{\"b\":\"myVal\",\"a\":1}"), mapper.readTree(fromAvroToJson(avroBytes, schema, false)))
chamada antiga: Assert.assertEquals(mapper.readTree("{\"b\":{\"string\":\"myVal\"},\"a\":1}"), mapper.readTree(fromAvroToJson(avroBytes, schema, true)))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result1205 + " <mapper.readTree('{\'b\':{\'string\':\'myVal\'},\'a\':1}')> é diferente de " + result1206 + " <mapper.readTree(fromAvroToJson(avroBytes, schema, true))>", mapper.readTree("{\"b\":{\"string\":\"myVal\"},\"a\":1}"), mapper.readTree(fromAvroToJson(avroBytes, schema, true)))
chamada antiga: Assert.assertEquals("{\"a\": 1, \"b\": 2}", o.toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  '{\'a\': 1, \'b\': 2}' é diferente de " + result1207 + " <o.toString()>", "{\"a\": 1, \"b\": 2}", o.toString())
chamada antiga: Assert.assertEquals("{\"a\": {\"a1\": null, \"a2\": true}, \"b\": {\"b1\": \"h\", \"b2\": 3.14, \"b3\": 1.4}}", o.toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  '{\'a\': {\'a1\': null, \'a2\': true}, \'b\': {\'b1\': \'h\', \'b2\': 3.14, \'b3\': 1.4}}' é diferente de " + result1208 + " <o.toString()>", "{\"a\": {\"a1\": null, \"a2\": true}, \"b\": {\"b1\": \"h\", \"b2\": 3.14, \"b3\": 1.4}}", o.toString())
chamada antiga: Assert.assertEquals("{\"a\": {\"a1\": null, \"a2\": true}}", o.toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  '{\'a\': {\'a1\': null, \'a2\': true}}' é diferente de " + result1209 + " <o.toString()>", "{\"a\": {\"a1\": null, \"a2\": true}}", o.toString())
chamada antiga: Assert.assertEquals("{\"a\": {\"a1\": null, \"a2\": true}}", o.toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  '{\'a\': {\'a1\': null, \'a2\': true}}' é diferente de " + result1210 + " <o.toString()>", "{\"a\": {\"a1\": null, \"a2\": true}}", o.toString())
chamada antiga: assertThat(asList(buffer.position(), buffer.remaining()), is(asList(0, EXAMPLE_DATA_SIZE)))
nova chamada: assertThat("Era esperado que " + result1211 + " <asList(buffer.position(), buffer.remaining())> satisfizesse a condição " + result1212 + " <is(asList(0, EXAMPLE_DATA_SIZE))>, mas não a satisfez", asList(buffer.position(), buffer.remaining()), is(asList(0, EXAMPLE_DATA_SIZE)))
chamada antiga: assertThat(output.toByteArray(), equalTo(avroEncoded(someBytes(EXAMPLE_DATA_SIZE))))
nova chamada: assertThat("Era esperado que " + result1213 + " <output.toByteArray()> satisfizesse a condição " + result1214 + " <equalTo(avroEncoded(someBytes(EXAMPLE_DATA_SIZE)))>, mas não a satisfez", output.toByteArray(), equalTo(avroEncoded(someBytes(EXAMPLE_DATA_SIZE))))
chamada antiga: assertThat(asList(buffer.position(), buffer.remaining()), is(asList(0, EXAMPLE_DATA_SIZE)))
nova chamada: assertThat("Era esperado que " + result1215 + " <asList(buffer.position(), buffer.remaining())> satisfizesse a condição " + result1216 + " <is(asList(0, EXAMPLE_DATA_SIZE))>, mas não a satisfez", asList(buffer.position(), buffer.remaining()), is(asList(0, EXAMPLE_DATA_SIZE)))
chamada antiga: assertEquals(SchemaNormalization.toParsingForm(new Schema.Parser().parse(input)), expectedOutput)
nova chamada: assertEquals("Era esperado valores iguais, mas " + result1217 + " <SchemaNormalization.toParsingForm(new Schema.Parser().parse(input))> é diferente de " + " expectedOutput", SchemaNormalization.toParsingForm(new Schema.Parser().parse(input)), expectedOutput)
chamada antiga: assertEquals(carefulFP, Long.parseLong(expectedOutput))
nova chamada: assertEquals("Era esperado valores iguais, mas  carefulFP é diferente de " + result1218 + " <Long.parseLong(expectedOutput)>", carefulFP, Long.parseLong(expectedOutput))
chamada antiga: assertEquals(carefulFP, Long.parseLong(expectedOutput))
nova chamada: assertEquals("Era esperado valores iguais, mas  carefulFP é diferente de " + result1219 + " <Long.parseLong(expectedOutput)>", carefulFP, Long.parseLong(expectedOutput))
chamada antiga: assertTrue(codec instanceof ZstandardCodec)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", codec instanceof ZstandardCodec)
chamada antiga: assertTrue(codec.getName().equals("zstandard"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1220 + " <codec.getName().equals('zstandard')> é falso", codec.getName().equals("zstandard"))
chamada antiga: assertTrue(codec.toString().equals("zstandard[3]"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1221 + " <codec.toString().equals('zstandard[3]')> é falso", codec.toString().equals("zstandard[3]"))
chamada antiga: Assert.assertNotNull(result)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", result)
chamada antiga: Assert.assertTrue(result instanceof GenericRecord)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", result instanceof GenericRecord)
chamada antiga: Assert.assertEquals(new Utf8("testValue"), ((GenericRecord) result).get("name"))
nova chamada: assertEquals("Era esperado valores iguais, mas  new Utf8('testValue') é diferente de " + result1222 + " <((GenericRecord) result).get('name')>", new Utf8("testValue"), ((GenericRecord) result).get("name"))
chamada antiga: assertTrue(customCodec.equals(new CustomCodec()))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1223 + " <customCodec.equals(new CustomCodec())> é falso", customCodec.equals(new CustomCodec()))
chamada antiga: assertFalse(customCodec.equals(snappyCodec))
nova chamada: assertFalse("Era esperado falso, mas " + result1224 + " <customCodec.equals(snappyCodec)> é verdadeiro ", customCodec.equals(snappyCodec))
chamada antiga: assertEquals(testString, new String(decompressed.array(), UTF_8))
nova chamada: assertEquals("Era esperado valores iguais, mas  testString é diferente de " + " new String(decompressed.array(), UTF_8)", testString, new String(decompressed.array(), UTF_8))
chamada antiga: assertTrue(codecClass.isInstance(codecInstance))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1225 + " <codecClass.isInstance(codecInstance)> é falso", codecClass.isInstance(codecInstance))
chamada antiga: assertTrue(codecInstance.getName().equals(codec))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1226 + " <codecInstance.getName().equals(codec)> é falso", codecInstance.getName().equals(codec))
chamada antiga: assertTrue(compressedSize > 0)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", compressedSize > 0)
chamada antiga: assertTrue(compressedSize < inputSize || codec.equals("null"))
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", compressedSize < inputSize || codec.equals("null"))
chamada antiga: assertTrue(compressedSize > 0)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", compressedSize > 0)
chamada antiga: fail("IOException should have been thrown")
nova chamada: fail("A execução falhou por uma causa deliberada", "IOException should have been thrown")
chamada antiga: Assert.assertEquals(decompressedBuffer, inputByteBuffer)
nova chamada: assertEquals("Era esperado valores iguais, mas  decompressedBuffer é diferente de " + " inputByteBuffer", decompressedBuffer, inputByteBuffer)
chamada antiga: Assert.assertEquals(decompressedBuffer, inputByteBuffer)
nova chamada: assertEquals("Era esperado valores iguais, mas  decompressedBuffer é diferente de " + " inputByteBuffer", decompressedBuffer, inputByteBuffer)
chamada antiga: assertEquals(42.0, decoded.get(FIELD_A))
nova chamada: assertEquals("Era esperado valores iguais, mas  42.0 é diferente de " + result1227 + " <decoded.get(FIELD_A)>", 42.0, decoded.get(FIELD_A))
chamada antiga: assertEquals(42L, decoded.get(FIELD_A))
nova chamada: assertEquals("Era esperado valores iguais, mas  42L é diferente de " + result1228 + " <decoded.get(FIELD_A)>", 42L, decoded.get(FIELD_A))
chamada antiga: assertEquals(42.0, decoded.get(FIELD_A))
nova chamada: assertEquals("Era esperado valores iguais, mas  42.0 é diferente de " + result1229 + " <decoded.get(FIELD_A)>", 42.0, decoded.get(FIELD_A))
chamada antiga: assertEquals(42.0, decoded.get(FIELD_A))
nova chamada: assertEquals("Era esperado valores iguais, mas  42.0 é diferente de " + result1230 + " <decoded.get(FIELD_A)>", 42.0, decoded.get(FIELD_A))
chamada antiga: assertEquals(42.0f, decoded.get(FIELD_A))
nova chamada: assertEquals("Era esperado valores iguais, mas  42.0f é diferente de " + result1231 + " <decoded.get(FIELD_A)>", 42.0f, decoded.get(FIELD_A))
chamada antiga: assertEquals(42.0f, decoded.get(FIELD_A))
nova chamada: assertEquals("Era esperado valores iguais, mas  42.0f é diferente de " + result1232 + " <decoded.get(FIELD_A)>", 42.0f, decoded.get(FIELD_A))
chamada antiga: assertEquals(42.0f, decoded.get(FIELD_A))
nova chamada: assertEquals("Era esperado valores iguais, mas  42.0f é diferente de " + result1233 + " <decoded.get(FIELD_A)>", 42.0f, decoded.get(FIELD_A))
chamada antiga: assertEquals(42.0f, decoded.get(FIELD_A))
nova chamada: assertEquals("Era esperado valores iguais, mas  42.0f é diferente de " + result1234 + " <decoded.get(FIELD_A)>", 42.0f, decoded.get(FIELD_A))
chamada antiga: assertEquals(42L, decoded.get(FIELD_A))
nova chamada: assertEquals("Era esperado valores iguais, mas  42L é diferente de " + result1235 + " <decoded.get(FIELD_A)>", 42L, decoded.get(FIELD_A))
chamada antiga: assertEquals(42.0F, decoded.get(FIELD_A))
nova chamada: assertEquals("Era esperado valores iguais, mas  42.0F é diferente de " + result1236 + " <decoded.get(FIELD_A)>", 42.0F, decoded.get(FIELD_A))
chamada antiga: assertEquals(42.0, decodeGenericBlob(DOUBLE_RECORD, writer, encoded).get(FIELD_A))
nova chamada: assertEquals("Era esperado valores iguais, mas  42.0 é diferente de " + result1237 + " <decodeGenericBlob(DOUBLE_RECORD, writer, encoded).get(FIELD_A)>", 42.0, decodeGenericBlob(DOUBLE_RECORD, writer, encoded).get(FIELD_A))
chamada antiga: assertEquals(42.0f, decodeGenericBlob(FLOAT_RECORD, writer, encoded).get(FIELD_A))
nova chamada: assertEquals("Era esperado valores iguais, mas  42.0f é diferente de " + result1238 + " <decodeGenericBlob(FLOAT_RECORD, writer, encoded).get(FIELD_A)>", 42.0f, decodeGenericBlob(FLOAT_RECORD, writer, encoded).get(FIELD_A))
chamada antiga: assertEquals(42L, decodeGenericBlob(LONG_RECORD, writer, encoded).get(FIELD_A))
nova chamada: assertEquals("Era esperado valores iguais, mas  42L é diferente de " + result1239 + " <decodeGenericBlob(LONG_RECORD, writer, encoded).get(FIELD_A)>", 42L, decodeGenericBlob(LONG_RECORD, writer, encoded).get(FIELD_A))
chamada antiga: assertEquals(42, decodeGenericBlob(INT_RECORD, writer, encoded).get(FIELD_A))
nova chamada: assertEquals("Era esperado valores iguais, mas  42 é diferente de " + result1240 + " <decodeGenericBlob(INT_RECORD, writer, encoded).get(FIELD_A)>", 42, decodeGenericBlob(INT_RECORD, writer, encoded).get(FIELD_A))
chamada antiga: assertArrayEquals("42".getBytes(StandardCharsets.UTF_8), actual.array())
nova chamada: assertArrayEquals("Era esperado arrays iguais, mas " + result1241 + " <'42'.getBytes(StandardCharsets.UTF_8)> é diferente de " + result1242 + " <actual.array()>", "42".getBytes(StandardCharsets.UTF_8), actual.array())
chamada antiga: assertArrayEquals(goeran.getBytes(StandardCharsets.UTF_8), actual.array())
nova chamada: assertArrayEquals("Era esperado arrays iguais, mas " + result1243 + " <goeran.getBytes(StandardCharsets.UTF_8)> é diferente de " + result1244 + " <actual.array()>", goeran.getBytes(StandardCharsets.UTF_8), actual.array())
chamada antiga: assertEquals("42", read.toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  '42' é diferente de " + result1245 + " <read.toString()>", "42", read.toString())
chamada antiga: assertEquals(goeran, read.toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  goeran é diferente de " + result1246 + " <read.toString()>", goeran, read.toString())
chamada antiga: assertEquals("A", decoded.get(FIELD_A).toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  'A' é diferente de " + result1247 + " <decoded.get(FIELD_A).toString()>", "A", decoded.get(FIELD_A).toString())
chamada antiga: assertEquals("A", decoded.get(FIELD_A).toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  'A' é diferente de " + result1248 + " <decoded.get(FIELD_A).toString()>", "A", decoded.get(FIELD_A).toString())
chamada antiga: assertEquals(42, decoded.get(FIELD_A))
nova chamada: assertEquals("Era esperado valores iguais, mas  42 é diferente de " + result1249 + " <decoded.get(FIELD_A)>", 42, decoded.get(FIELD_A))
chamada antiga: assertEquals(42, decoded.get(FIELD_A))
nova chamada: assertEquals("Era esperado valores iguais, mas  42 é diferente de " + result1250 + " <decoded.get(FIELD_A)>", 42, decoded.get(FIELD_A))
chamada antiga: assertEquals(314, decoded.get("newFieldWithDefault"))
nova chamada: assertEquals("Era esperado valores iguais, mas  314 é diferente de " + result1251 + " <decoded.get('newFieldWithDefault')>", 314, decoded.get("newFieldWithDefault"))
chamada antiga: assertEquals(1, decoded.get("fname"))
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result1252 + " <decoded.get('fname')>", 1, decoded.get("fname"))
chamada antiga: assertFalse(Arrays.equals(randSyncFile, customSyncFile))
nova chamada: assertFalse("Era esperado falso, mas " + result1253 + " <Arrays.equals(randSyncFile, customSyncFile)> é verdadeiro ", Arrays.equals(randSyncFile, customSyncFile))
chamada antiga: assertTrue(Arrays.equals(customSyncFile, sameCustomSyncFile))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1254 + " <Arrays.equals(customSyncFile, sameCustomSyncFile)> é falso", Arrays.equals(customSyncFile, sameCustomSyncFile))
chamada antiga: Assert.assertTrue(threw)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", threw)
chamada antiga: assertEquals(bs.length, u.getByteLength())
nova chamada: assertEquals("Era esperado valores iguais, mas  bs.length é diferente de " + result1255 + " <u.getByteLength()>", bs.length, u.getByteLength())
chamada antiga: assertEquals(5, u.getByteLength())
nova chamada: assertEquals("Era esperado valores iguais, mas  5 é diferente de " + result1256 + " <u.getByteLength()>", 5, u.getByteLength())
chamada antiga: assertEquals(3, u.getByteLength())
nova chamada: assertEquals("Era esperado valores iguais, mas  3 é diferente de " + result1257 + " <u.getByteLength()>", 3, u.getByteLength())
chamada antiga: assertSame(content, u.getBytes())
nova chamada: assertSame("Era esperado objetos iguais, mas  content é diferente de " + result1258 + " <u.getBytes()>", content, u.getBytes())
chamada antiga: assertEquals(4, u.getByteLength())
nova chamada: assertEquals("Era esperado valores iguais, mas  4 é diferente de " + result1259 + " <u.getByteLength()>", 4, u.getByteLength())
chamada antiga: assertSame(content, u.getBytes())
nova chamada: assertSame("Era esperado objetos iguais, mas  content é diferente de " + result1260 + " <u.getBytes()>", content, u.getBytes())
chamada antiga: assertEquals(97, new Utf8("a").hashCode())
nova chamada: assertEquals("Era esperado valores iguais, mas  97 é diferente de " + result1261 + " <new Utf8('a').hashCode()>", 97, new Utf8("a").hashCode())
chamada antiga: assertEquals(3904, new Utf8("zz").hashCode())
nova chamada: assertEquals("Era esperado valores iguais, mas  3904 é diferente de " + result1262 + " <new Utf8('zz').hashCode()>", 3904, new Utf8("zz").hashCode())
chamada antiga: assertEquals(122, new Utf8("z").hashCode())
nova chamada: assertEquals("Era esperado valores iguais, mas  122 é diferente de " + result1263 + " <new Utf8('z').hashCode()>", 122, new Utf8("z").hashCode())
chamada antiga: assertEquals(99162322, new Utf8("hello").hashCode())
nova chamada: assertEquals("Era esperado valores iguais, mas  99162322 é diferente de " + result1264 + " <new Utf8('hello').hashCode()>", 99162322, new Utf8("hello").hashCode())
chamada antiga: assertEquals(3198781, new Utf8("hell").hashCode())
nova chamada: assertEquals("Era esperado valores iguais, mas  3198781 é diferente de " + result1265 + " <new Utf8('hell').hashCode()>", 3198781, new Utf8("hell").hashCode())
chamada antiga: assertEquals(97, u.hashCode())
nova chamada: assertEquals("Era esperado valores iguais, mas  97 é diferente de " + result1266 + " <u.hashCode()>", 97, u.hashCode())
chamada antiga: assertEquals(97, u.hashCode())
nova chamada: assertEquals("Era esperado valores iguais, mas  97 é diferente de " + result1267 + " <u.hashCode()>", 97, u.hashCode())
chamada antiga: assertEquals(97, u.hashCode())
nova chamada: assertEquals("Era esperado valores iguais, mas  97 é diferente de " + result1268 + " <u.hashCode()>", 97, u.hashCode())
chamada antiga: assertEquals(97, u.hashCode())
nova chamada: assertEquals("Era esperado valores iguais, mas  97 é diferente de " + result1269 + " <u.hashCode()>", 97, u.hashCode())
chamada antiga: assertNotEquals(97, u.hashCode())
nova chamada: assertNotEquals("Era esperado valores diferentes, mas  97 é igual a " + result1270 + " <u.hashCode()>", 97, u.hashCode())
chamada antiga: assertEquals(3904, u.hashCode())
nova chamada: assertEquals("Era esperado valores iguais, mas  3904 é diferente de " + result1271 + " <u.hashCode()>", 3904, u.hashCode())
chamada antiga: assertEquals(122, u.hashCode())
nova chamada: assertEquals("Era esperado valores iguais, mas  122 é diferente de " + result1272 + " <u.hashCode()>", 122, u.hashCode())
chamada antiga: assertEquals(99162322, u.hashCode())
nova chamada: assertEquals("Era esperado valores iguais, mas  99162322 é diferente de " + result1273 + " <u.hashCode()>", 99162322, u.hashCode())
chamada antiga: assertEquals(3198781, u.hashCode())
nova chamada: assertEquals("Era esperado valores iguais, mas  3198781 é diferente de " + result1274 + " <u.hashCode()>", 3198781, u.hashCode())
chamada antiga: assertEquals(3904, u.hashCode())
nova chamada: assertEquals("Era esperado valores iguais, mas  3904 é diferente de " + result1275 + " <u.hashCode()>", 3904, u.hashCode())
chamada antiga: assertEquals(122, u.hashCode())
nova chamada: assertEquals("Era esperado valores iguais, mas  122 é diferente de " + result1276 + " <u.hashCode()>", 122, u.hashCode())
chamada antiga: assertEquals(99162322, u.hashCode())
nova chamada: assertEquals("Era esperado valores iguais, mas  99162322 é diferente de " + result1277 + " <u.hashCode()>", 99162322, u.hashCode())
chamada antiga: assertEquals(3198781, u.hashCode())
nova chamada: assertEquals("Era esperado valores iguais, mas  3198781 é diferente de " + result1278 + " <u.hashCode()>", 3198781, u.hashCode())
chamada antiga: assertEquals(null, toJsonNode(null))
nova chamada: assertEquals("Era esperado valores iguais, mas  null é diferente de " + result1279 + " <toJsonNode(null)>", null, toJsonNode(null))
chamada antiga: assertEquals(NullNode.getInstance(), toJsonNode(JsonProperties.NULL_VALUE))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result1280 + " <NullNode.getInstance()> é diferente de " + result1281 + " <toJsonNode(JsonProperties.NULL_VALUE)>", NullNode.getInstance(), toJsonNode(JsonProperties.NULL_VALUE))
chamada antiga: assertEquals(BooleanNode.TRUE, toJsonNode(true))
nova chamada: assertEquals("Era esperado valores iguais, mas  BooleanNode.TRUE é diferente de " + result1282 + " <toJsonNode(true)>", BooleanNode.TRUE, toJsonNode(true))
chamada antiga: assertEquals(IntNode.valueOf(1), toJsonNode(1))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result1283 + " <IntNode.valueOf(1)> é diferente de " + result1284 + " <toJsonNode(1)>", IntNode.valueOf(1), toJsonNode(1))
chamada antiga: assertEquals(LongNode.valueOf(2), toJsonNode(2L))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result1285 + " <LongNode.valueOf(2)> é diferente de " + result1286 + " <toJsonNode(2L)>", LongNode.valueOf(2), toJsonNode(2L))
chamada antiga: assertEquals(FloatNode.valueOf(1.0f), toJsonNode(1.0f))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result1287 + " <FloatNode.valueOf(1.0f)> é diferente de " + result1288 + " <toJsonNode(1.0f)>", FloatNode.valueOf(1.0f), toJsonNode(1.0f))
chamada antiga: assertEquals(DoubleNode.valueOf(2.0), toJsonNode(2.0))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result1289 + " <DoubleNode.valueOf(2.0)> é diferente de " + result1290 + " <toJsonNode(2.0)>", DoubleNode.valueOf(2.0), toJsonNode(2.0))
chamada antiga: assertEquals(TextNode.valueOf("\u0001\u0002"), toJsonNode(new byte[] { 1, 2 }))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result1291 + " <TextNode.valueOf('\u0001\u0002')> é diferente de " + result1292 + " <toJsonNode(new byte[] { 1, 2 })>", TextNode.valueOf("\u0001\u0002"), toJsonNode(new byte[] { 1, 2 }))
chamada antiga: assertEquals(TextNode.valueOf("a"), toJsonNode("a"))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result1293 + " <TextNode.valueOf('a')> é diferente de " + result1294 + " <toJsonNode('a')>", TextNode.valueOf("a"), toJsonNode("a"))
chamada antiga: assertEquals(TextNode.valueOf("UP"), toJsonNode(Direction.UP))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result1295 + " <TextNode.valueOf('UP')> é diferente de " + result1296 + " <toJsonNode(Direction.UP)>", TextNode.valueOf("UP"), toJsonNode(Direction.UP))
chamada antiga: assertEquals(BigIntegerNode.valueOf(BigInteger.ONE), toJsonNode(BigInteger.ONE))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result1297 + " <BigIntegerNode.valueOf(BigInteger.ONE)> é diferente de " + result1298 + " <toJsonNode(BigInteger.ONE)>", BigIntegerNode.valueOf(BigInteger.ONE), toJsonNode(BigInteger.ONE))
chamada antiga: assertEquals(DecimalNode.valueOf(BigDecimal.ONE), toJsonNode(BigDecimal.ONE))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result1299 + " <DecimalNode.valueOf(BigDecimal.ONE)> é diferente de " + result1300 + " <toJsonNode(BigDecimal.ONE)>", DecimalNode.valueOf(BigDecimal.ONE), toJsonNode(BigDecimal.ONE))
chamada antiga: assertEquals(an, toJsonNode(Collections.singletonList(1)))
nova chamada: assertEquals("Era esperado valores iguais, mas  an é diferente de " + result1301 + " <toJsonNode(Collections.singletonList(1))>", an, toJsonNode(Collections.singletonList(1)))
chamada antiga: assertEquals(on, toJsonNode(Collections.singletonMap("a", 1)))
nova chamada: assertEquals("Era esperado valores iguais, mas  on é diferente de " + result1302 + " <toJsonNode(Collections.singletonMap('a', 1))>", on, toJsonNode(Collections.singletonMap("a", 1)))
chamada antiga: assertEquals(null, toObject(null))
nova chamada: assertEquals("Era esperado valores iguais, mas  null é diferente de " + result1303 + " <toObject(null)>", null, toObject(null))
chamada antiga: assertEquals(JsonProperties.NULL_VALUE, toObject(NullNode.getInstance()))
nova chamada: assertEquals("Era esperado valores iguais, mas  JsonProperties.NULL_VALUE é diferente de " + result1304 + " <toObject(NullNode.getInstance())>", JsonProperties.NULL_VALUE, toObject(NullNode.getInstance()))
chamada antiga: assertEquals(true, toObject(BooleanNode.TRUE))
nova chamada: assertEquals("Era esperado valores iguais, mas  true é diferente de " + result1305 + " <toObject(BooleanNode.TRUE)>", true, toObject(BooleanNode.TRUE))
chamada antiga: assertEquals(1, toObject(IntNode.valueOf(1)))
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result1306 + " <toObject(IntNode.valueOf(1))>", 1, toObject(IntNode.valueOf(1)))
chamada antiga: assertEquals(2L, toObject(IntNode.valueOf(2), Schema.create(Schema.Type.LONG)))
nova chamada: assertEquals("Era esperado valores iguais, mas  2L é diferente de " + result1307 + " <toObject(IntNode.valueOf(2), Schema.create(Schema.Type.LONG))>", 2L, toObject(IntNode.valueOf(2), Schema.create(Schema.Type.LONG)))
chamada antiga: assertEquals(1.0f, toObject(DoubleNode.valueOf(1.0), Schema.create(Schema.Type.FLOAT)))
nova chamada: assertEquals("Era esperado valores iguais, mas  1.0f é diferente de " + result1308 + " <toObject(DoubleNode.valueOf(1.0), Schema.create(Schema.Type.FLOAT))>", 1.0f, toObject(DoubleNode.valueOf(1.0), Schema.create(Schema.Type.FLOAT)))
chamada antiga: assertEquals(2.0, toObject(DoubleNode.valueOf(2.0)))
nova chamada: assertEquals("Era esperado valores iguais, mas  2.0 é diferente de " + result1309 + " <toObject(DoubleNode.valueOf(2.0))>", 2.0, toObject(DoubleNode.valueOf(2.0)))
chamada antiga: assertEquals(TextNode.valueOf("\u0001\u0002"), toJsonNode(new byte[] { 1, 2 }))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result1310 + " <TextNode.valueOf('\u0001\u0002')> é diferente de " + result1311 + " <toJsonNode(new byte[] { 1, 2 })>", TextNode.valueOf("\u0001\u0002"), toJsonNode(new byte[] { 1, 2 }))
chamada antiga: assertArrayEquals(new byte[] { 1, 2 }, (byte[]) toObject(TextNode.valueOf("\u0001\u0002"), Schema.create(Schema.Type.BYTES)))
nova chamada: assertArrayEquals("Era esperado arrays iguais, mas  new byte[] { 1, 2 } é diferente de " + " (byte[]) toObject(TextNode.valueOf('\u0001\u0002'), Schema.create(Schema.Type.BYTES))", new byte[] { 1, 2 }, (byte[]) toObject(TextNode.valueOf("\u0001\u0002"), Schema.create(Schema.Type.BYTES)))
chamada antiga: assertEquals("a", toObject(TextNode.valueOf("a")))
nova chamada: assertEquals("Era esperado valores iguais, mas  'a' é diferente de " + result1312 + " <toObject(TextNode.valueOf('a'))>", "a", toObject(TextNode.valueOf("a")))
chamada antiga: assertEquals("UP", toObject(TextNode.valueOf("UP"), SchemaBuilder.enumeration("Direction").symbols("UP", "DOWN")))
nova chamada: assertEquals("Era esperado valores iguais, mas  'UP' é diferente de " + result1313 + " <toObject(TextNode.valueOf('UP'), SchemaBuilder.enumeration('Direction').symbols('UP', 'DOWN'))>", "UP", toObject(TextNode.valueOf("UP"), SchemaBuilder.enumeration("Direction").symbols("UP", "DOWN")))
chamada antiga: assertEquals(Collections.singletonList(1), toObject(an))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result1314 + " <Collections.singletonList(1)> é diferente de " + result1315 + " <toObject(an)>", Collections.singletonList(1), toObject(an))
chamada antiga: assertEquals(Collections.singletonMap("a", 1), toObject(on))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result1316 + " <Collections.singletonMap('a', 1)> é diferente de " + result1317 + " <toObject(on)>", Collections.singletonMap("a", 1), toObject(on))
chamada antiga: assertEquals(Collections.singletonMap("a", 1L), toObject(on, SchemaBuilder.record("r").fields().requiredLong("a").endRecord()))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result1318 + " <Collections.singletonMap('a', 1L)> é diferente de " + result1319 + " <toObject(on, SchemaBuilder.record('r').fields().requiredLong('a').endRecord())>", Collections.singletonMap("a", 1L), toObject(on, SchemaBuilder.record("r").fields().requiredLong("a").endRecord()))
chamada antiga: assertEquals(JsonProperties.NULL_VALUE, toObject(NullNode.getInstance(), SchemaBuilder.unionOf().nullType().and().intType().endUnion()))
nova chamada: assertEquals("Era esperado valores iguais, mas  JsonProperties.NULL_VALUE é diferente de " + result1320 + " <toObject(NullNode.getInstance(), SchemaBuilder.unionOf().nullType().and().intType().endUnion())>", JsonProperties.NULL_VALUE, toObject(NullNode.getInstance(), SchemaBuilder.unionOf().nullType().and().intType().endUnion()))
chamada antiga: assertEquals("a", toObject(TextNode.valueOf("a"), SchemaBuilder.unionOf().stringType().and().intType().endUnion()))
nova chamada: assertEquals("Era esperado valores iguais, mas  'a' é diferente de " + result1321 + " <toObject(TextNode.valueOf('a'), SchemaBuilder.unionOf().stringType().and().intType().endUnion())>", "a", toObject(TextNode.valueOf("a"), SchemaBuilder.unionOf().stringType().and().intType().endUnion()))
chamada antiga: Assert.assertEquals(original, copy)
nova chamada: assertEquals("Era esperado valores iguais, mas  original é diferente de " + " copy", original, copy)
chamada antiga: Assert.assertEquals(original.hashCode(), copy.hashCode())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result1322 + " <original.hashCode()> é diferente de " + result1323 + " <copy.hashCode()>", original.hashCode(), copy.hashCode())
chamada antiga: Assert.assertEquals(original.toString(), copy.toString())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result1324 + " <original.toString()> é diferente de " + result1325 + " <copy.toString()>", original.toString(), copy.toString())
chamada antiga: Assert.assertEquals(DEFAULT_VALUE, instanceOfGeneratedClass.getNonNullDate())
nova chamada: assertEquals("Era esperado valores iguais, mas  DEFAULT_VALUE é diferente de " + result1326 + " <instanceOfGeneratedClass.getNonNullDate()>", DEFAULT_VALUE, instanceOfGeneratedClass.getNonNullDate())
chamada antiga: assertEquals(1, parsedArgs.length)
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + " parsedArgs.length", 1, parsedArgs.length)
chamada antiga: assertEquals(record, parsedArgs[0])
nova chamada: assertEquals("Era esperado valores iguais, mas  record é diferente de " + " parsedArgs[0]", record, parsedArgs[0])
chamada antiga: assertEquals(record, parsedResponse)
nova chamada: assertEquals("Era esperado valores iguais, mas  record é diferente de " + " parsedResponse", record, parsedResponse)
chamada antiga: fail("A execução falhou por uma causa deliberada", "IOException should have been thrown")
nova chamada: fail("A execução falhou por uma causa deliberada", "A execução falhou por uma causa deliberada", "IOException should have been thrown")
chamada antiga: assertEquals(record, echoedRecord)
nova chamada: assertEquals("Era esperado valores iguais, mas  record é diferente de " + " echoedRecord", record, echoedRecord)
chamada antiga: assertEquals(10, result)
nova chamada: assertEquals("Era esperado valores iguais, mas  10 é diferente de " + " result", 10, result)
chamada antiga: assertEquals(val1 + val2 + val3 + val4, stub.concatenate(val1, val2, val3, val4))
nova chamada: assertEquals("Era esperado valores iguais, mas  val1 + val2 + val3 + val4 é diferente de " + result1327 + " <stub.concatenate(val1, val2, val3, val4)>", val1 + val2 + val3 + val4, stub.concatenate(val1, val2, val3, val4))
chamada antiga: assertEquals(record, future.get(1, TimeUnit.SECONDS))
nova chamada: assertEquals("Era esperado valores iguais, mas  record é diferente de " + result1328 + " <future.get(1, TimeUnit.SECONDS)>", record, future.get(1, TimeUnit.SECONDS))
chamada antiga: assertEquals(0, oneWayCount.get())
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + result1329 + " <oneWayCount.get()>", 0, oneWayCount.get())
chamada antiga: assertEquals(3, oneWayCount.get())
nova chamada: assertEquals("Era esperado valores iguais, mas  3 é diferente de " + result1330 + " <oneWayCount.get()>", 3, oneWayCount.get())
chamada antiga: assertEquals(null, stub.concatenate("foo", true, 42L, 42))
nova chamada: assertEquals("Era esperado valores iguais, mas  null é diferente de " + result1331 + " <stub.concatenate('foo', true, 42L, 42)>", null, stub.concatenate("foo", true, 42L, 42))
chamada antiga: assertThat(fromCache, is("class java.lang.String"))
nova chamada: assertThat("Era esperado que  fromCache satisfizesse a condição " + result1332 + " <is('class java.lang.String')>, mas não a satisfez", fromCache, is("class java.lang.String"))
chamada antiga: assertThat(cache.apply(String.class), sameInstance(fromCache))
nova chamada: assertThat("Era esperado que " + result1333 + " <cache.apply(String.class)> satisfizesse a condição " + result1334 + " <sameInstance(fromCache)>, mas não a satisfez", cache.apply(String.class), sameInstance(fromCache))
chamada antiga: assertThat(stringLogicalType.getSomeIdentifier(), instanceOf(UUID.class))
nova chamada: assertThat("Era esperado que " + result1335 + " <stringLogicalType.getSomeIdentifier()> satisfizesse a condição " + result1336 + " <instanceOf(UUID.class)>, mas não a satisfez", stringLogicalType.getSomeIdentifier(), instanceOf(UUID.class))
chamada antiga: assertThat(StringLogicalType.getClassSchema().getField("someJavaString").schema().getProp(GenericData.STRING_PROP), equalTo("String"))
nova chamada: assertThat("Era esperado que " + result1337 + " <StringLogicalType.getClassSchema().getField('someJavaString').schema().getProp(GenericData.STRING_PROP)> satisfizesse a condição " + result1338 + " <equalTo('String')>, mas não a satisfez", StringLogicalType.getClassSchema().getField("someJavaString").schema().getProp(GenericData.STRING_PROP), equalTo("String"))
chamada antiga: assertEquals(writerSchema, serializer.getWriterSchema())
nova chamada: assertEquals("Era esperado valores iguais, mas  writerSchema é diferente de " + result1339 + " <serializer.getWriterSchema()>", writerSchema, serializer.getWriterSchema())
chamada antiga: assertEquals("record1", record.toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  'record1' é diferente de " + result1340 + " <record.toString()>", "record1", record.toString())
chamada antiga: assertEquals("record2", record.toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  'record2' é diferente de " + result1341 + " <record.toString()>", "record2", record.toString())
chamada antiga: assertEquals("foo", converter.convert(avroKey).toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  'foo' é diferente de " + result1342 + " <converter.convert(avroKey).toString()>", "foo", converter.convert(avroKey).toString())
chamada antiga: assertEquals(42, converter.convert(avroValue).intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  42 é diferente de " + result1343 + " <converter.convert(avroValue).intValue()>", 42, converter.convert(avroValue).intValue())
chamada antiga: assertEquals(true, converter.convert(new BooleanWritable(true)))
nova chamada: assertEquals("Era esperado valores iguais, mas  true é diferente de " + result1344 + " <converter.convert(new BooleanWritable(true))>", true, converter.convert(new BooleanWritable(true)))
chamada antiga: assertEquals(1, bytes.get(0))
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result1345 + " <bytes.get(0)>", 1, bytes.get(0))
chamada antiga: assertEquals(2, bytes.get(1))
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + result1346 + " <bytes.get(1)>", 2, bytes.get(1))
chamada antiga: assertEquals(3, bytes.get(2))
nova chamada: assertEquals("Era esperado valores iguais, mas  3 é diferente de " + result1347 + " <bytes.get(2)>", 3, bytes.get(2))
chamada antiga: assertEquals(42, converter.convert(new ByteWritable((byte) 42)).bytes()[0])
nova chamada: assertEquals("Era esperado valores iguais, mas  42 é diferente de " + " converter.convert(new ByteWritable((byte) 42)).bytes()[0]", 42, converter.convert(new ByteWritable((byte) 42)).bytes()[0])
chamada antiga: assertEquals(2, converter.convert(new IntWritable(2)).intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + result1348 + " <converter.convert(new IntWritable(2)).intValue()>", 2, converter.convert(new IntWritable(2)).intValue())
chamada antiga: assertEquals(123L, converter.convert(new LongWritable(123L)).longValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  123L é diferente de " + result1349 + " <converter.convert(new LongWritable(123L)).longValue()>", 123L, converter.convert(new LongWritable(123L)).longValue())
chamada antiga: assertNull(converter.convert(NullWritable.get()))
nova chamada: assertNull("Era esperado nulo, mas " + result1350 + " <converter.convert(NullWritable.get())> não é nulo", converter.convert(NullWritable.get()))
chamada antiga: assertEquals("foo", converter.convert(new Text("foo")).toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  'foo' é diferente de " + result1351 + " <converter.convert(new Text('foo')).toString()>", "foo", converter.convert(new Text("foo")).toString())
chamada antiga: assertEquals(writerSchema, deserializer.getWriterSchema())
nova chamada: assertEquals("Era esperado valores iguais, mas  writerSchema é diferente de " + result1352 + " <deserializer.getWriterSchema()>", writerSchema, deserializer.getWriterSchema())
chamada antiga: assertEquals(readerSchema, deserializer.getReaderSchema())
nova chamada: assertEquals("Era esperado valores iguais, mas  readerSchema é diferente de " + result1353 + " <deserializer.getReaderSchema()>", readerSchema, deserializer.getReaderSchema())
chamada antiga: assertEquals("record1", record.datum().toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  'record1' é diferente de " + result1354 + " <record.datum().toString()>", "record1", record.datum().toString())
chamada antiga: assertEquals("record2", record.datum().toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  'record2' é diferente de " + result1355 + " <record.datum().toString()>", "record2", record.datum().toString())
chamada antiga: assertEquals(writerSchema, deserializer.getWriterSchema())
nova chamada: assertEquals("Era esperado valores iguais, mas  writerSchema é diferente de " + result1356 + " <deserializer.getWriterSchema()>", writerSchema, deserializer.getWriterSchema())
chamada antiga: assertEquals(readerSchema, deserializer.getReaderSchema())
nova chamada: assertEquals("Era esperado valores iguais, mas  readerSchema é diferente de " + result1357 + " <deserializer.getReaderSchema()>", readerSchema, deserializer.getReaderSchema())
chamada antiga: assertEquals("record1", record.datum().toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  'record1' é diferente de " + result1358 + " <record.datum().toString()>", "record1", record.datum().toString())
chamada antiga: assertEquals("record2", record.datum().toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  'record2' é diferente de " + result1359 + " <record.datum().toString()>", "record2", record.datum().toString())
chamada antiga: assertTrue(serialization.accept(AvroKey.class))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1360 + " <serialization.accept(AvroKey.class)> é falso", serialization.accept(AvroKey.class))
chamada antiga: assertTrue(serialization.accept(AvroValue.class))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1361 + " <serialization.accept(AvroValue.class)> é falso", serialization.accept(AvroValue.class))
chamada antiga: assertFalse(serialization.accept(AvroWrapper.class))
nova chamada: assertFalse("Era esperado falso, mas " + result1362 + " <serialization.accept(AvroWrapper.class)> é verdadeiro ", serialization.accept(AvroWrapper.class))
chamada antiga: assertFalse(serialization.accept(String.class))
nova chamada: assertFalse("Era esperado falso, mas " + result1363 + " <serialization.accept(String.class)> é verdadeiro ", serialization.accept(String.class))
chamada antiga: assertTrue(serializer instanceof AvroSerializer)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", serializer instanceof AvroSerializer)
chamada antiga: assertEquals(writerSchema, avroSerializer.getWriterSchema())
nova chamada: assertEquals("Era esperado valores iguais, mas  writerSchema é diferente de " + result1364 + " <avroSerializer.getWriterSchema()>", writerSchema, avroSerializer.getWriterSchema())
chamada antiga: assertTrue(serializer instanceof AvroSerializer)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", serializer instanceof AvroSerializer)
chamada antiga: assertEquals(writerSchema, avroSerializer.getWriterSchema())
nova chamada: assertEquals("Era esperado valores iguais, mas  writerSchema é diferente de " + result1365 + " <avroSerializer.getWriterSchema()>", writerSchema, avroSerializer.getWriterSchema())
chamada antiga: assertTrue(deserializer instanceof AvroKeyDeserializer)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", deserializer instanceof AvroKeyDeserializer)
chamada antiga: assertEquals(readerSchema, avroDeserializer.getReaderSchema())
nova chamada: assertEquals("Era esperado valores iguais, mas  readerSchema é diferente de " + result1366 + " <avroDeserializer.getReaderSchema()>", readerSchema, avroDeserializer.getReaderSchema())
chamada antiga: assertTrue(deserializer instanceof AvroValueDeserializer)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", deserializer instanceof AvroValueDeserializer)
chamada antiga: assertEquals(readerSchema, avroDeserializer.getReaderSchema())
nova chamada: assertEquals("Era esperado valores iguais, mas  readerSchema é diferente de " + result1367 + " <avroDeserializer.getReaderSchema()>", readerSchema, avroDeserializer.getReaderSchema())
chamada antiga: Assert.assertEquals(loader, data.getClassLoader())
nova chamada: assertEquals("Era esperado valores iguais, mas  loader é diferente de " + result1368 + " <data.getClassLoader()>", loader, data.getClassLoader())
chamada antiga: assertTrue(roundTrip(schema, "record", null) instanceof String)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", roundTrip(schema, "record", null) instanceof String)
chamada antiga: assertTrue(roundTrip(schema, "record", GenericData.class) instanceof Utf8)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", roundTrip(schema, "record", GenericData.class) instanceof Utf8)
chamada antiga: assertEquals("deflate", reader.getMetaString("avro.codec"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'deflate' é diferente de " + result1369 + " <reader.getMetaString('avro.codec')>", "deflate", reader.getMetaString("avro.codec"))
chamada antiga: assertTrue(directory.exists())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1370 + " <directory.exists()> é falso", directory.exists())
chamada antiga: assertEquals(2, indexRecords.size())
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + result1371 + " <indexRecords.size()>", 2, indexRecords.size())
chamada antiga: assertEquals("apple", indexRecords.get(0).getKey().toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  'apple' é diferente de " + result1372 + " <indexRecords.get(0).getKey().toString()>", "apple", indexRecords.get(0).getKey().toString())
chamada antiga: assertEquals("carrot", indexRecords.get(1).getKey().toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  'carrot' é diferente de " + result1373 + " <indexRecords.get(1).getKey().toString()>", "carrot", indexRecords.get(1).getKey().toString())
chamada antiga: assertTrue(hadoopDeflateCodec.getClass().equals(avroDeflateCodec.getClass()))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1374 + " <hadoopDeflateCodec.getClass().equals(avroDeflateCodec.getClass())> é falso", hadoopDeflateCodec.getClass().equals(avroDeflateCodec.getClass()))
chamada antiga: assertTrue(hadoopSnappyCodec.getClass().equals(avroSnappyCodec.getClass()))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1375 + " <hadoopSnappyCodec.getClass().equals(avroSnappyCodec.getClass())> é falso", hadoopSnappyCodec.getClass().equals(avroSnappyCodec.getClass()))
chamada antiga: assertTrue(hadoopSnappyCodec.getClass().equals(avroSnappyCodec.getClass()))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1376 + " <hadoopSnappyCodec.getClass().equals(avroSnappyCodec.getClass())> é falso", hadoopSnappyCodec.getClass().equals(avroSnappyCodec.getClass()))
chamada antiga: assertTrue(hadoopSnappyCodec.getClass().equals(avroSnappyCodec.getClass()))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1377 + " <hadoopSnappyCodec.getClass().equals(avroSnappyCodec.getClass())> é falso", hadoopSnappyCodec.getClass().equals(avroSnappyCodec.getClass()))
chamada antiga: assertTrue(hadoopSnappyCodec == null)
nova chamada: assertTrue("Era esperado verdadeiro, mas o valor obtido é falso", hadoopSnappyCodec == null)
chamada antiga: assertEquals(0, mComparator.compare("", ""))
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + result1378 + " <mComparator.compare('', '')>", 0, mComparator.compare("", ""))
chamada antiga: assertThat(mComparator.compare("", "a"), lessThan(0))
nova chamada: assertThat("Era esperado que " + result1379 + " <mComparator.compare('', 'a')> satisfizesse a condição " + result1380 + " <lessThan(0)>, mas não a satisfez", mComparator.compare("", "a"), lessThan(0))
chamada antiga: assertThat(mComparator.compare("a", ""), greaterThan(0))
nova chamada: assertThat("Era esperado que " + result1381 + " <mComparator.compare('a', '')> satisfizesse a condição " + result1382 + " <greaterThan(0)>, mas não a satisfez", mComparator.compare("a", ""), greaterThan(0))
chamada antiga: assertEquals(0, mComparator.compare("a", "a"))
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + result1383 + " <mComparator.compare('a', 'a')>", 0, mComparator.compare("a", "a"))
chamada antiga: assertThat(mComparator.compare("a", "b"), lessThan(0))
nova chamada: assertThat("Era esperado que " + result1384 + " <mComparator.compare('a', 'b')> satisfizesse a condição " + result1385 + " <lessThan(0)>, mas não a satisfez", mComparator.compare("a", "b"), lessThan(0))
chamada antiga: assertThat(mComparator.compare("b", "a"), greaterThan(0))
nova chamada: assertThat("Era esperado que " + result1386 + " <mComparator.compare('b', 'a')> satisfizesse a condição " + result1387 + " <greaterThan(0)>, mas não a satisfez", mComparator.compare("b", "a"), greaterThan(0))
chamada antiga: assertEquals(0, mComparator.compare("ab", "ab"))
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + result1388 + " <mComparator.compare('ab', 'ab')>", 0, mComparator.compare("ab", "ab"))
chamada antiga: assertThat(mComparator.compare("a", "aa"), lessThan(0))
nova chamada: assertThat("Era esperado que " + result1389 + " <mComparator.compare('a', 'aa')> satisfizesse a condição " + result1390 + " <lessThan(0)>, mas não a satisfez", mComparator.compare("a", "aa"), lessThan(0))
chamada antiga: assertThat(mComparator.compare("aa", "a"), greaterThan(0))
nova chamada: assertThat("Era esperado que " + result1391 + " <mComparator.compare('aa', 'a')> satisfizesse a condição " + result1392 + " <greaterThan(0)>, mas não a satisfez", mComparator.compare("aa", "a"), greaterThan(0))
chamada antiga: assertThat(mComparator.compare("abc", "abcdef"), lessThan(0))
nova chamada: assertThat("Era esperado que " + result1393 + " <mComparator.compare('abc', 'abcdef')> satisfizesse a condição " + result1394 + " <lessThan(0)>, mas não a satisfez", mComparator.compare("abc", "abcdef"), lessThan(0))
chamada antiga: assertThat(mComparator.compare("abcdef", "abc"), greaterThan(0))
nova chamada: assertThat("Era esperado que " + result1395 + " <mComparator.compare('abcdef', 'abc')> satisfizesse a condição " + result1396 + " <greaterThan(0)>, mas não a satisfez", mComparator.compare("abcdef", "abc"), greaterThan(0))
chamada antiga: assertEquals(0, mComparator.compare(new Utf8(""), new Utf8("")))
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + result1397 + " <mComparator.compare(new Utf8(''), new Utf8(''))>", 0, mComparator.compare(new Utf8(""), new Utf8("")))
chamada antiga: assertThat(mComparator.compare(new Utf8(""), new Utf8("a")), lessThan(0))
nova chamada: assertThat("Era esperado que " + result1398 + " <mComparator.compare(new Utf8(''), new Utf8('a'))> satisfizesse a condição " + result1399 + " <lessThan(0)>, mas não a satisfez", mComparator.compare(new Utf8(""), new Utf8("a")), lessThan(0))
chamada antiga: assertThat(mComparator.compare(new Utf8("a"), new Utf8("")), greaterThan(0))
nova chamada: assertThat("Era esperado que " + result1400 + " <mComparator.compare(new Utf8('a'), new Utf8(''))> satisfizesse a condição " + result1401 + " <greaterThan(0)>, mas não a satisfez", mComparator.compare(new Utf8("a"), new Utf8("")), greaterThan(0))
chamada antiga: assertEquals(0, mComparator.compare(new Utf8("a"), new Utf8("a")))
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + result1402 + " <mComparator.compare(new Utf8('a'), new Utf8('a'))>", 0, mComparator.compare(new Utf8("a"), new Utf8("a")))
chamada antiga: assertThat(mComparator.compare(new Utf8("a"), new Utf8("b")), lessThan(0))
nova chamada: assertThat("Era esperado que " + result1403 + " <mComparator.compare(new Utf8('a'), new Utf8('b'))> satisfizesse a condição " + result1404 + " <lessThan(0)>, mas não a satisfez", mComparator.compare(new Utf8("a"), new Utf8("b")), lessThan(0))
chamada antiga: assertThat(mComparator.compare(new Utf8("b"), new Utf8("a")), greaterThan(0))
nova chamada: assertThat("Era esperado que " + result1405 + " <mComparator.compare(new Utf8('b'), new Utf8('a'))> satisfizesse a condição " + result1406 + " <greaterThan(0)>, mas não a satisfez", mComparator.compare(new Utf8("b"), new Utf8("a")), greaterThan(0))
chamada antiga: assertEquals(0, mComparator.compare(new Utf8("ab"), new Utf8("ab")))
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + result1407 + " <mComparator.compare(new Utf8('ab'), new Utf8('ab'))>", 0, mComparator.compare(new Utf8("ab"), new Utf8("ab")))
chamada antiga: assertThat(mComparator.compare(new Utf8("a"), new Utf8("aa")), lessThan(0))
nova chamada: assertThat("Era esperado que " + result1408 + " <mComparator.compare(new Utf8('a'), new Utf8('aa'))> satisfizesse a condição " + result1409 + " <lessThan(0)>, mas não a satisfez", mComparator.compare(new Utf8("a"), new Utf8("aa")), lessThan(0))
chamada antiga: assertThat(mComparator.compare(new Utf8("aa"), new Utf8("a")), greaterThan(0))
nova chamada: assertThat("Era esperado que " + result1410 + " <mComparator.compare(new Utf8('aa'), new Utf8('a'))> satisfizesse a condição " + result1411 + " <greaterThan(0)>, mas não a satisfez", mComparator.compare(new Utf8("aa"), new Utf8("a")), greaterThan(0))
chamada antiga: assertThat(mComparator.compare(new Utf8("abc"), new Utf8("abcdef")), lessThan(0))
nova chamada: assertThat("Era esperado que " + result1412 + " <mComparator.compare(new Utf8('abc'), new Utf8('abcdef'))> satisfizesse a condição " + result1413 + " <lessThan(0)>, mas não a satisfez", mComparator.compare(new Utf8("abc"), new Utf8("abcdef")), lessThan(0))
chamada antiga: assertThat(mComparator.compare(new Utf8("abcdef"), new Utf8("abc")), greaterThan(0))
nova chamada: assertThat("Era esperado que " + result1414 + " <mComparator.compare(new Utf8('abcdef'), new Utf8('abc'))> satisfizesse a condição " + result1415 + " <greaterThan(0)>, mas não a satisfez", mComparator.compare(new Utf8("abcdef"), new Utf8("abc")), greaterThan(0))
chamada antiga: assertEquals(0, mComparator.compare(new Utf8(""), ""))
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + result1416 + " <mComparator.compare(new Utf8(''), '')>", 0, mComparator.compare(new Utf8(""), ""))
chamada antiga: assertThat(mComparator.compare(new Utf8(""), "a"), lessThan(0))
nova chamada: assertThat("Era esperado que " + result1417 + " <mComparator.compare(new Utf8(''), 'a')> satisfizesse a condição " + result1418 + " <lessThan(0)>, mas não a satisfez", mComparator.compare(new Utf8(""), "a"), lessThan(0))
chamada antiga: assertThat(mComparator.compare(new Utf8("a"), ""), greaterThan(0))
nova chamada: assertThat("Era esperado que " + result1419 + " <mComparator.compare(new Utf8('a'), '')> satisfizesse a condição " + result1420 + " <greaterThan(0)>, mas não a satisfez", mComparator.compare(new Utf8("a"), ""), greaterThan(0))
chamada antiga: assertEquals(0, mComparator.compare(new Utf8("a"), "a"))
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + result1421 + " <mComparator.compare(new Utf8('a'), 'a')>", 0, mComparator.compare(new Utf8("a"), "a"))
chamada antiga: assertThat(mComparator.compare(new Utf8("a"), "b"), lessThan(0))
nova chamada: assertThat("Era esperado que " + result1422 + " <mComparator.compare(new Utf8('a'), 'b')> satisfizesse a condição " + result1423 + " <lessThan(0)>, mas não a satisfez", mComparator.compare(new Utf8("a"), "b"), lessThan(0))
chamada antiga: assertThat(mComparator.compare(new Utf8("b"), "a"), greaterThan(0))
nova chamada: assertThat("Era esperado que " + result1424 + " <mComparator.compare(new Utf8('b'), 'a')> satisfizesse a condição " + result1425 + " <greaterThan(0)>, mas não a satisfez", mComparator.compare(new Utf8("b"), "a"), greaterThan(0))
chamada antiga: assertEquals(0, mComparator.compare(new Utf8("ab"), "ab"))
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + result1426 + " <mComparator.compare(new Utf8('ab'), 'ab')>", 0, mComparator.compare(new Utf8("ab"), "ab"))
chamada antiga: assertThat(mComparator.compare(new Utf8("a"), "aa"), lessThan(0))
nova chamada: assertThat("Era esperado que " + result1427 + " <mComparator.compare(new Utf8('a'), 'aa')> satisfizesse a condição " + result1428 + " <lessThan(0)>, mas não a satisfez", mComparator.compare(new Utf8("a"), "aa"), lessThan(0))
chamada antiga: assertThat(mComparator.compare(new Utf8("aa"), "a"), greaterThan(0))
nova chamada: assertThat("Era esperado que " + result1429 + " <mComparator.compare(new Utf8('aa'), 'a')> satisfizesse a condição " + result1430 + " <greaterThan(0)>, mas não a satisfez", mComparator.compare(new Utf8("aa"), "a"), greaterThan(0))
chamada antiga: assertThat(mComparator.compare(new Utf8("abc"), "abcdef"), lessThan(0))
nova chamada: assertThat("Era esperado que " + result1431 + " <mComparator.compare(new Utf8('abc'), 'abcdef')> satisfizesse a condição " + result1432 + " <lessThan(0)>, mas não a satisfez", mComparator.compare(new Utf8("abc"), "abcdef"), lessThan(0))
chamada antiga: assertThat(mComparator.compare(new Utf8("abcdef"), "abc"), greaterThan(0))
nova chamada: assertThat("Era esperado que " + result1433 + " <mComparator.compare(new Utf8('abcdef'), 'abc')> satisfizesse a condição " + result1434 + " <greaterThan(0)>, mas não a satisfez", mComparator.compare(new Utf8("abcdef"), "abc"), greaterThan(0))
chamada antiga: Assert.assertTrue(job.waitForCompletion(true))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1435 + " <job.waitForCompletion(true)> é falso", job.waitForCompletion(true))
chamada antiga: Assert.assertEquals(1, outputFiles.length)
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + " outputFiles.length", 1, outputFiles.length)
chamada antiga: Assert.assertEquals(3, counts.get("apple").intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  3 é diferente de " + result1436 + " <counts.get('apple').intValue()>", 3, counts.get("apple").intValue())
chamada antiga: Assert.assertEquals(2, counts.get("banana").intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + result1437 + " <counts.get('banana').intValue()>", 2, counts.get("banana").intValue())
chamada antiga: Assert.assertEquals(1, counts.get("carrot").intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result1438 + " <counts.get('carrot').intValue()>", 1, counts.get("carrot").intValue())
chamada antiga: Assert.assertTrue(job.waitForCompletion(true))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1439 + " <job.waitForCompletion(true)> é falso", job.waitForCompletion(true))
chamada antiga: Assert.assertEquals(1, outputFiles.length)
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + " outputFiles.length", 1, outputFiles.length)
chamada antiga: Assert.assertEquals(3, counts.get("apple").intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  3 é diferente de " + result1440 + " <counts.get('apple').intValue()>", 3, counts.get("apple").intValue())
chamada antiga: Assert.assertEquals(2, counts.get("banana").intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + result1441 + " <counts.get('banana').intValue()>", 2, counts.get("banana").intValue())
chamada antiga: Assert.assertEquals(1, counts.get("carrot").intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result1442 + " <counts.get('carrot').intValue()>", 1, counts.get("carrot").intValue())
chamada antiga: Assert.assertTrue(job.waitForCompletion(true))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1443 + " <job.waitForCompletion(true)> é falso", job.waitForCompletion(true))
chamada antiga: Assert.assertEquals(1, outputFiles.length)
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + " outputFiles.length", 1, outputFiles.length)
chamada antiga: Assert.assertEquals(3, counts.get("apple").intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  3 é diferente de " + result1444 + " <counts.get('apple').intValue()>", 3, counts.get("apple").intValue())
chamada antiga: Assert.assertEquals(2, counts.get("banana").intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + result1445 + " <counts.get('banana').intValue()>", 2, counts.get("banana").intValue())
chamada antiga: Assert.assertEquals(1, counts.get("carrot").intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result1446 + " <counts.get('carrot').intValue()>", 1, counts.get("carrot").intValue())
chamada antiga: Assert.assertTrue(job.waitForCompletion(true))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1447 + " <job.waitForCompletion(true)> é falso", job.waitForCompletion(true))
chamada antiga: Assert.assertEquals(1, outputFiles.length)
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + " outputFiles.length", 1, outputFiles.length)
chamada antiga: Assert.assertEquals(3, counts.get("apple").intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  3 é diferente de " + result1448 + " <counts.get('apple').intValue()>", 3, counts.get("apple").intValue())
chamada antiga: Assert.assertEquals(2, counts.get("banana").intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + result1449 + " <counts.get('banana').intValue()>", 2, counts.get("banana").intValue())
chamada antiga: Assert.assertEquals(1, counts.get("carrot").intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result1450 + " <counts.get('carrot').intValue()>", 1, counts.get("carrot").intValue())
chamada antiga: Assert.assertTrue(job.waitForCompletion(true))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1451 + " <job.waitForCompletion(true)> é falso", job.waitForCompletion(true))
chamada antiga: Assert.assertEquals(1, outputFiles.length)
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + " outputFiles.length", 1, outputFiles.length)
chamada antiga: Assert.assertEquals(3, counts.get("apple").intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  3 é diferente de " + result1452 + " <counts.get('apple').intValue()>", 3, counts.get("apple").intValue())
chamada antiga: Assert.assertEquals(2, counts.get("banana").intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + result1453 + " <counts.get('banana').intValue()>", 2, counts.get("banana").intValue())
chamada antiga: Assert.assertEquals(1, counts.get("carrot").intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result1454 + " <counts.get('carrot').intValue()>", 1, counts.get("carrot").intValue())
chamada antiga: Assert.assertTrue(job.waitForCompletion(true))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1455 + " <job.waitForCompletion(true)> é falso", job.waitForCompletion(true))
chamada antiga: Assert.assertEquals(1, outputFiles.length)
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + " outputFiles.length", 1, outputFiles.length)
chamada antiga: Assert.assertEquals(3, counts.get("apple").intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  3 é diferente de " + result1456 + " <counts.get('apple').intValue()>", 3, counts.get("apple").intValue())
chamada antiga: Assert.assertEquals(2, counts.get("banana").intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + result1457 + " <counts.get('banana').intValue()>", 2, counts.get("banana").intValue())
chamada antiga: Assert.assertEquals(1, counts.get("carrot").intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result1458 + " <counts.get('carrot').intValue()>", 1, counts.get("carrot").intValue())
chamada antiga: Assert.assertTrue(job.waitForCompletion(true))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1459 + " <job.waitForCompletion(true)> é falso", job.waitForCompletion(true))
chamada antiga: Assert.assertEquals(1, outputFiles.length)
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + " outputFiles.length", 1, outputFiles.length)
chamada antiga: Assert.assertNotNull(inputStream)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", inputStream)
chamada antiga: assertNotNull(inputFormat)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", inputFormat)
chamada antiga: assertTrue(dataFileReader.hasNext())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1460 + " <dataFileReader.hasNext()> é falso", dataFileReader.hasNext())
chamada antiga: assertEquals(1, dataFileReader.next().intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result1461 + " <dataFileReader.next().intValue()>", 1, dataFileReader.next().intValue())
chamada antiga: assertTrue(dataFileReader.hasNext())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1462 + " <dataFileReader.hasNext()> é falso", dataFileReader.hasNext())
chamada antiga: assertEquals(2, dataFileReader.next().intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + result1463 + " <dataFileReader.next().intValue()>", 2, dataFileReader.next().intValue())
chamada antiga: assertFalse(dataFileReader.hasNext())
nova chamada: assertFalse("Era esperado falso, mas " + result1464 + " <dataFileReader.hasNext()> é verdadeiro ", dataFileReader.hasNext())
chamada antiga: assertTrue(dataFileReader.hasNext())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1465 + " <dataFileReader.hasNext()> é falso", dataFileReader.hasNext())
chamada antiga: assertEquals(2, dataFileReader.next())
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + result1466 + " <dataFileReader.next()>", 2, dataFileReader.next())
chamada antiga: assertTrue(dataFileReader.hasNext())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1467 + " <dataFileReader.hasNext()> é falso", dataFileReader.hasNext())
chamada antiga: assertEquals(1, dataFileReader.next())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result1468 + " <dataFileReader.next()>", 1, dataFileReader.next())
chamada antiga: assertTrue(job.waitForCompletion(true))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1469 + " <job.waitForCompletion(true)> é falso", job.waitForCompletion(true))
chamada antiga: assertTrue(avroFileReader.hasNext())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1470 + " <avroFileReader.hasNext()> é falso", avroFileReader.hasNext())
chamada antiga: assertTrue(job.waitForCompletion(true))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1471 + " <job.waitForCompletion(true)> é falso", job.waitForCompletion(true))
chamada antiga: assertTrue(avroFileReader.hasNext())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1472 + " <avroFileReader.hasNext()> é falso", avroFileReader.hasNext())
chamada antiga: assertNotNull(appleRecord.get())
nova chamada: assertNotNull("Era esperado não nulo, mas " + result1473 + " <appleRecord.get()> é nulo", appleRecord.get())
chamada antiga: assertEquals("apple", appleRecord.getKey().toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  'apple' é diferente de " + result1474 + " <appleRecord.getKey().toString()>", "apple", appleRecord.getKey().toString())
chamada antiga: assertEquals(3, appleDocs.size())
nova chamada: assertEquals("Era esperado valores iguais, mas  3 é diferente de " + result1475 + " <appleDocs.size()>", 3, appleDocs.size())
chamada antiga: assertTrue(appleDocs.contains(1))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1476 + " <appleDocs.contains(1)> é falso", appleDocs.contains(1))
chamada antiga: assertTrue(appleDocs.contains(2))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1477 + " <appleDocs.contains(2)> é falso", appleDocs.contains(2))
chamada antiga: assertTrue(appleDocs.contains(3))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1478 + " <appleDocs.contains(3)> é falso", appleDocs.contains(3))
chamada antiga: assertTrue(avroFileReader.hasNext())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1479 + " <avroFileReader.hasNext()> é falso", avroFileReader.hasNext())
chamada antiga: assertNotNull(bananaRecord.get())
nova chamada: assertNotNull("Era esperado não nulo, mas " + result1480 + " <bananaRecord.get()> é nulo", bananaRecord.get())
chamada antiga: assertEquals("banana", bananaRecord.getKey().toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  'banana' é diferente de " + result1481 + " <bananaRecord.getKey().toString()>", "banana", bananaRecord.getKey().toString())
chamada antiga: assertEquals(2, bananaDocs.size())
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + result1482 + " <bananaDocs.size()>", 2, bananaDocs.size())
chamada antiga: assertTrue(bananaDocs.contains(1))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1483 + " <bananaDocs.contains(1)> é falso", bananaDocs.contains(1))
chamada antiga: assertTrue(bananaDocs.contains(2))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1484 + " <bananaDocs.contains(2)> é falso", bananaDocs.contains(2))
chamada antiga: assertTrue(avroFileReader.hasNext())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1485 + " <avroFileReader.hasNext()> é falso", avroFileReader.hasNext())
chamada antiga: assertEquals("carrot", carrotRecord.getKey().toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  'carrot' é diferente de " + result1486 + " <carrotRecord.getKey().toString()>", "carrot", carrotRecord.getKey().toString())
chamada antiga: assertEquals(1, carrotDocs.size())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result1487 + " <carrotDocs.size()>", 1, carrotDocs.size())
chamada antiga: assertTrue(carrotDocs.contains(1))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1488 + " <carrotDocs.contains(1)> é falso", carrotDocs.contains(1))
chamada antiga: assertFalse(avroFileReader.hasNext())
nova chamada: assertFalse("Era esperado falso, mas " + result1489 + " <avroFileReader.hasNext()> é verdadeiro ", avroFileReader.hasNext())
chamada antiga: assertTrue(job.waitForCompletion(true))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1490 + " <job.waitForCompletion(true)> é falso", job.waitForCompletion(true))
chamada antiga: assertTrue(avroFileReader.hasNext())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1491 + " <avroFileReader.hasNext()> é falso", avroFileReader.hasNext())
chamada antiga: assertNotNull(record1.get())
nova chamada: assertNotNull("Era esperado não nulo, mas " + result1492 + " <record1.get()> é nulo", record1.get())
chamada antiga: assertEquals(1, record1.getKey().intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result1493 + " <record1.getKey().intValue()>", 1, record1.getKey().intValue())
chamada antiga: assertEquals("apple banana carrot", record1.getValue().toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  'apple banana carrot' é diferente de " + result1494 + " <record1.getValue().toString()>", "apple banana carrot", record1.getValue().toString())
chamada antiga: assertTrue(avroFileReader.hasNext())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1495 + " <avroFileReader.hasNext()> é falso", avroFileReader.hasNext())
chamada antiga: assertNotNull(record2.get())
nova chamada: assertNotNull("Era esperado não nulo, mas " + result1496 + " <record2.get()> é nulo", record2.get())
chamada antiga: assertEquals(2, record2.getKey().intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + result1497 + " <record2.getKey().intValue()>", 2, record2.getKey().intValue())
chamada antiga: assertEquals("apple banana", record2.getValue().toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  'apple banana' é diferente de " + result1498 + " <record2.getValue().toString()>", "apple banana", record2.getValue().toString())
chamada antiga: assertTrue(avroFileReader.hasNext())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1499 + " <avroFileReader.hasNext()> é falso", avroFileReader.hasNext())
chamada antiga: assertNotNull(record3.get())
nova chamada: assertNotNull("Era esperado não nulo, mas " + result1500 + " <record3.get()> é nulo", record3.get())
chamada antiga: assertEquals(3, record3.getKey().intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  3 é diferente de " + result1501 + " <record3.getKey().intValue()>", 3, record3.getKey().intValue())
chamada antiga: assertEquals("apple", record3.getValue().toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  'apple' é diferente de " + result1502 + " <record3.getValue().toString()>", "apple", record3.getValue().toString())
chamada antiga: assertFalse(avroFileReader.hasNext())
nova chamada: assertFalse("Era esperado falso, mas " + result1503 + " <avroFileReader.hasNext()> é verdadeiro ", avroFileReader.hasNext())
chamada antiga: Assert.assertTrue(job.waitForCompletion(true))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1504 + " <job.waitForCompletion(true)> é falso", job.waitForCompletion(true))
chamada antiga: Assert.assertEquals(1, outputFiles.length)
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + " outputFiles.length", 1, outputFiles.length)
chamada antiga: Assert.assertEquals(3, counts.get("apple").intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  3 é diferente de " + result1505 + " <counts.get('apple').intValue()>", 3, counts.get("apple").intValue())
chamada antiga: Assert.assertEquals(2, counts.get("banana").intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + result1506 + " <counts.get('banana').intValue()>", 2, counts.get("banana").intValue())
chamada antiga: Assert.assertEquals(1, counts.get("carrot").intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result1507 + " <counts.get('carrot').intValue()>", 1, counts.get("carrot").intValue())
chamada antiga: Assert.assertEquals(1, outputFiles.length)
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + " outputFiles.length", 1, outputFiles.length)
chamada antiga: Assert.assertEquals(3, counts.get("apple").intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  3 é diferente de " + result1508 + " <counts.get('apple').intValue()>", 3, counts.get("apple").intValue())
chamada antiga: Assert.assertEquals(2, counts.get("banana").intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + result1509 + " <counts.get('banana').intValue()>", 2, counts.get("banana").intValue())
chamada antiga: Assert.assertEquals(1, counts.get("carrot").intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result1510 + " <counts.get('carrot').intValue()>", 1, counts.get("carrot").intValue())
chamada antiga: Assert.assertEquals(1, outputFiles.length)
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + " outputFiles.length", 1, outputFiles.length)
chamada antiga: Assert.assertEquals(3, counts.get("apple").intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  3 é diferente de " + result1511 + " <counts.get('apple').intValue()>", 3, counts.get("apple").intValue())
chamada antiga: Assert.assertEquals(2, counts.get("banana").intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + result1512 + " <counts.get('banana').intValue()>", 2, counts.get("banana").intValue())
chamada antiga: Assert.assertEquals(1, counts.get("carrot").intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result1513 + " <counts.get('carrot').intValue()>", 1, counts.get("carrot").intValue())
chamada antiga: Assert.assertEquals(1, outputFiles.length)
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + " outputFiles.length", 1, outputFiles.length)
chamada antiga: Assert.assertEquals(3, counts.get("apple").intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  3 é diferente de " + result1514 + " <counts.get('apple').intValue()>", 3, counts.get("apple").intValue())
chamada antiga: Assert.assertEquals(2, counts.get("banana").intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + result1515 + " <counts.get('banana').intValue()>", 2, counts.get("banana").intValue())
chamada antiga: Assert.assertEquals(1, counts.get("carrot").intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result1516 + " <counts.get('carrot').intValue()>", 1, counts.get("carrot").intValue())
chamada antiga: Assert.assertEquals(1, outputFiles.length)
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + " outputFiles.length", 1, outputFiles.length)
chamada antiga: Assert.assertEquals(3, counts.get("apple").intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  3 é diferente de " + result1517 + " <counts.get('apple').intValue()>", 3, counts.get("apple").intValue())
chamada antiga: Assert.assertEquals(2, counts.get("banana").intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + result1518 + " <counts.get('banana').intValue()>", 2, counts.get("banana").intValue())
chamada antiga: Assert.assertEquals(1, counts.get("carrot").intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result1519 + " <counts.get('carrot').intValue()>", 1, counts.get("carrot").intValue())
chamada antiga: Assert.assertTrue(job.waitForCompletion(true))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1520 + " <job.waitForCompletion(true)> é falso", job.waitForCompletion(true))
chamada antiga: Assert.assertEquals(1, outputFiles.length)
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + " outputFiles.length", 1, outputFiles.length)
chamada antiga: Assert.assertEquals(3, counts.get("apple").intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  3 é diferente de " + result1521 + " <counts.get('apple').intValue()>", 3, counts.get("apple").intValue())
chamada antiga: Assert.assertEquals(2, counts.get("banana").intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + result1522 + " <counts.get('banana').intValue()>", 2, counts.get("banana").intValue())
chamada antiga: Assert.assertEquals(1, counts.get("carrot").intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result1523 + " <counts.get('carrot').intValue()>", 1, counts.get("carrot").intValue())
chamada antiga: Assert.assertTrue(job.waitForCompletion(true))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1524 + " <job.waitForCompletion(true)> é falso", job.waitForCompletion(true))
chamada antiga: Assert.assertEquals(1, outputFiles.length)
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + " outputFiles.length", 1, outputFiles.length)
chamada antiga: Assert.assertEquals(3, counts.get("apple").intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  3 é diferente de " + result1525 + " <counts.get('apple').intValue()>", 3, counts.get("apple").intValue())
chamada antiga: Assert.assertEquals(2, counts.get("banana").intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + result1526 + " <counts.get('banana').intValue()>", 2, counts.get("banana").intValue())
chamada antiga: Assert.assertEquals(1, counts.get("carrot").intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result1527 + " <counts.get('carrot').intValue()>", 1, counts.get("carrot").intValue())
chamada antiga: Assert.assertTrue(job.waitForCompletion(true))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1528 + " <job.waitForCompletion(true)> é falso", job.waitForCompletion(true))
chamada antiga: Assert.assertEquals(1, outputFiles.length)
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + " outputFiles.length", 1, outputFiles.length)
chamada antiga: Assert.assertEquals(3, counts.get("apple").intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  3 é diferente de " + result1529 + " <counts.get('apple').intValue()>", 3, counts.get("apple").intValue())
chamada antiga: Assert.assertEquals(2, counts.get("banana").intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + result1530 + " <counts.get('banana').intValue()>", 2, counts.get("banana").intValue())
chamada antiga: Assert.assertEquals(1, counts.get("carrot").intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result1531 + " <counts.get('carrot').intValue()>", 1, counts.get("carrot").intValue())
chamada antiga: Assert.assertTrue(job.waitForCompletion(true))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1532 + " <job.waitForCompletion(true)> é falso", job.waitForCompletion(true))
chamada antiga: Assert.assertEquals(1, outputFiles.length)
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + " outputFiles.length", 1, outputFiles.length)
chamada antiga: Assert.assertEquals(3, counts.get("apple").intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  3 é diferente de " + result1533 + " <counts.get('apple').intValue()>", 3, counts.get("apple").intValue())
chamada antiga: Assert.assertEquals(2, counts.get("banana").intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + result1534 + " <counts.get('banana').intValue()>", 2, counts.get("banana").intValue())
chamada antiga: Assert.assertEquals(1, counts.get("carrot").intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result1535 + " <counts.get('carrot').intValue()>", 1, counts.get("carrot").intValue())
chamada antiga: Assert.assertEquals(1, outputFiles.length)
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + " outputFiles.length", 1, outputFiles.length)
chamada antiga: Assert.assertEquals(3, counts.get("apple").intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  3 é diferente de " + result1536 + " <counts.get('apple').intValue()>", 3, counts.get("apple").intValue())
chamada antiga: Assert.assertEquals(2, counts.get("banana").intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + result1537 + " <counts.get('banana').intValue()>", 2, counts.get("banana").intValue())
chamada antiga: Assert.assertEquals(1, counts.get("carrot").intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result1538 + " <counts.get('carrot').intValue()>", 1, counts.get("carrot").intValue())
chamada antiga: Assert.assertEquals(1, outputFiles.length)
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + " outputFiles.length", 1, outputFiles.length)
chamada antiga: Assert.assertEquals(3, counts.get("apple").intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  3 é diferente de " + result1539 + " <counts.get('apple').intValue()>", 3, counts.get("apple").intValue())
chamada antiga: Assert.assertEquals(2, counts.get("banana").intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + result1540 + " <counts.get('banana').intValue()>", 2, counts.get("banana").intValue())
chamada antiga: Assert.assertEquals(1, counts.get("carrot").intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result1541 + " <counts.get('carrot').intValue()>", 1, counts.get("carrot").intValue())
chamada antiga: Assert.assertEquals(1, outputFiles.length)
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + " outputFiles.length", 1, outputFiles.length)
chamada antiga: Assert.assertEquals(3, counts.get("apple").intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  3 é diferente de " + result1542 + " <counts.get('apple').intValue()>", 3, counts.get("apple").intValue())
chamada antiga: Assert.assertEquals(2, counts.get("banana").intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + result1543 + " <counts.get('banana').intValue()>", 2, counts.get("banana").intValue())
chamada antiga: Assert.assertEquals(1, counts.get("carrot").intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result1544 + " <counts.get('carrot').intValue()>", 1, counts.get("carrot").intValue())
chamada antiga: Assert.assertEquals(1, outputFiles.length)
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + " outputFiles.length", 1, outputFiles.length)
chamada antiga: Assert.assertEquals(3, counts.get("apple").intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  3 é diferente de " + result1545 + " <counts.get('apple').intValue()>", 3, counts.get("apple").intValue())
chamada antiga: Assert.assertEquals(2, counts.get("banana").intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + result1546 + " <counts.get('banana').intValue()>", 2, counts.get("banana").intValue())
chamada antiga: Assert.assertEquals(1, counts.get("carrot").intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result1547 + " <counts.get('carrot').intValue()>", 1, counts.get("carrot").intValue())
chamada antiga: Assert.assertTrue(job.waitForCompletion(true))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1548 + " <job.waitForCompletion(true)> é falso", job.waitForCompletion(true))
chamada antiga: Assert.assertEquals(1, outputFiles.length)
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + " outputFiles.length", 1, outputFiles.length)
chamada antiga: Assert.assertEquals(3, counts.get("apple").intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  3 é diferente de " + result1549 + " <counts.get('apple').intValue()>", 3, counts.get("apple").intValue())
chamada antiga: Assert.assertEquals(2, counts.get("banana").intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + result1550 + " <counts.get('banana').intValue()>", 2, counts.get("banana").intValue())
chamada antiga: Assert.assertEquals(1, counts.get("carrot").intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result1551 + " <counts.get('carrot').intValue()>", 1, counts.get("carrot").intValue())
chamada antiga: Assert.assertTrue(job.waitForCompletion(true))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1552 + " <job.waitForCompletion(true)> é falso", job.waitForCompletion(true))
chamada antiga: Assert.assertEquals(1, outputFiles.length)
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + " outputFiles.length", 1, outputFiles.length)
chamada antiga: Assert.assertEquals(3, counts.get("apple").intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  3 é diferente de " + result1553 + " <counts.get('apple').intValue()>", 3, counts.get("apple").intValue())
chamada antiga: Assert.assertEquals(2, counts.get("banana").intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + result1554 + " <counts.get('banana').intValue()>", 2, counts.get("banana").intValue())
chamada antiga: Assert.assertEquals(1, counts.get("carrot").intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result1555 + " <counts.get('carrot').intValue()>", 1, counts.get("carrot").intValue())
chamada antiga: Assert.assertTrue(job.waitForCompletion(true))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1556 + " <job.waitForCompletion(true)> é falso", job.waitForCompletion(true))
chamada antiga: Assert.assertEquals(1, outputFiles.length)
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + " outputFiles.length", 1, outputFiles.length)
chamada antiga: Assert.assertEquals(3, counts.get("apple").intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  3 é diferente de " + result1557 + " <counts.get('apple').intValue()>", 3, counts.get("apple").intValue())
chamada antiga: Assert.assertEquals(2, counts.get("banana").intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + result1558 + " <counts.get('banana').intValue()>", 2, counts.get("banana").intValue())
chamada antiga: Assert.assertEquals(1, counts.get("carrot").intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result1559 + " <counts.get('carrot').intValue()>", 1, counts.get("carrot").intValue())
chamada antiga: assertTrue(avroFileReader.hasNext())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1560 + " <avroFileReader.hasNext()> é falso", avroFileReader.hasNext())
chamada antiga: assertNotNull(firstRecord.get())
nova chamada: assertNotNull("Era esperado não nulo, mas " + result1561 + " <firstRecord.get()> é nulo", firstRecord.get())
chamada antiga: assertEquals("apple", firstRecord.getKey().toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  'apple' é diferente de " + result1562 + " <firstRecord.getKey().toString()>", "apple", firstRecord.getKey().toString())
chamada antiga: assertEquals("apple", firstRecord.getValue().getName().toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  'apple' é diferente de " + result1563 + " <firstRecord.getValue().getName().toString()>", "apple", firstRecord.getValue().getName().toString())
chamada antiga: assertTrue(avroFileReader.hasNext())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1564 + " <avroFileReader.hasNext()> é falso", avroFileReader.hasNext())
chamada antiga: assertNotNull(secondRecord.get())
nova chamada: assertNotNull("Era esperado não nulo, mas " + result1565 + " <secondRecord.get()> é nulo", secondRecord.get())
chamada antiga: assertEquals("banana", secondRecord.getKey().toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  'banana' é diferente de " + result1566 + " <secondRecord.getKey().toString()>", "banana", secondRecord.getKey().toString())
chamada antiga: assertEquals("banana", secondRecord.getValue().getName().toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  'banana' é diferente de " + result1567 + " <secondRecord.getValue().getName().toString()>", "banana", secondRecord.getValue().getName().toString())
chamada antiga: assertFalse(avroFileReader.hasNext())
nova chamada: assertFalse("Era esperado falso, mas " + result1568 + " <avroFileReader.hasNext()> é verdadeiro ", avroFileReader.hasNext())
chamada antiga: assertTrue(avroFileReader.hasNext())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1569 + " <avroFileReader.hasNext()> é falso", avroFileReader.hasNext())
chamada antiga: assertNotNull(firstRecord.get())
nova chamada: assertNotNull("Era esperado não nulo, mas " + result1570 + " <firstRecord.get()> é nulo", firstRecord.get())
chamada antiga: assertEquals("reflectionData", firstRecord.getKey().toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  'reflectionData' é diferente de " + result1571 + " <firstRecord.getKey().toString()>", "reflectionData", firstRecord.getKey().toString())
chamada antiga: assertEquals(record.attribute, firstRecord.getValue().attribute)
nova chamada: assertEquals("Era esperado valores iguais, mas  record.attribute é diferente de " + " firstRecord.getValue().attribute", record.attribute, firstRecord.getValue().attribute)
chamada antiga: assertTrue(avroFileReader.hasNext())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1572 + " <avroFileReader.hasNext()> é falso", avroFileReader.hasNext())
chamada antiga: assertNotNull(secondRecord.get())
nova chamada: assertNotNull("Era esperado não nulo, mas " + result1573 + " <secondRecord.get()> é nulo", secondRecord.get())
chamada antiga: assertEquals("banana", secondRecord.getKey().toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  'banana' é diferente de " + result1574 + " <secondRecord.getKey().toString()>", "banana", secondRecord.getKey().toString())
chamada antiga: assertEquals("banana", secondRecord.getValue().getName().toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  'banana' é diferente de " + result1575 + " <secondRecord.getValue().getName().toString()>", "banana", secondRecord.getValue().getName().toString())
chamada antiga: assertTrue(avroFileReader.hasNext())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1576 + " <avroFileReader.hasNext()> é falso", avroFileReader.hasNext())
chamada antiga: assertNotNull(firstRecord.get())
nova chamada: assertNotNull("Era esperado não nulo, mas " + result1577 + " <firstRecord.get()> é nulo", firstRecord.get())
chamada antiga: assertEquals("apple", firstRecord.getKey().toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  'apple' é diferente de " + result1578 + " <firstRecord.getKey().toString()>", "apple", firstRecord.getKey().toString())
chamada antiga: assertEquals("apple", firstRecord.getValue().getName().toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  'apple' é diferente de " + result1579 + " <firstRecord.getValue().getName().toString()>", "apple", firstRecord.getValue().getName().toString())
chamada antiga: assertEquals(fsInput.length(), FILE_CONTENTS.length())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result1580 + " <fsInput.length()> é diferente de " + result1581 + " <FILE_CONTENTS.length()>", fsInput.length(), FILE_CONTENTS.length())
chamada antiga: assertThat(actualBytes, is(equalTo(expectedBytes)))
nova chamada: assertThat("Era esperado que  actualBytes satisfizesse a condição " + result1582 + " <is(equalTo(expectedBytes))>, mas não a satisfez", actualBytes, is(equalTo(expectedBytes)))
chamada antiga: assertThat(actualByteCount, is(equalTo(expectedBytes.length)))
nova chamada: assertThat("Era esperado que  actualByteCount satisfizesse a condição " + result1583 + " <is(equalTo(expectedBytes.length))>, mas não a satisfez", actualByteCount, is(equalTo(expectedBytes.length)))
chamada antiga: assertThat(actualByte, is(equalTo(expectedByte)))
nova chamada: assertThat("Era esperado que  actualByte satisfizesse a condição " + result1584 + " <is(equalTo(expectedByte))>, mas não a satisfez", actualByte, is(equalTo(expectedByte)))
chamada antiga: assertThat(actualTellPos, is(equalTo(expectedTellPos)))
nova chamada: assertThat("Era esperado que  actualTellPos satisfizesse a condição " + result1585 + " <is(equalTo(expectedTellPos))>, mas não a satisfez", actualTellPos, is(equalTo(expectedTellPos)))
chamada antiga: assertEquals("first", key.datum().toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  'first' é diferente de " + result1586 + " <key.datum().toString()>", "first", key.datum().toString())
chamada antiga: assertEquals(1, value.datum().intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result1587 + " <value.datum().intValue()>", 1, value.datum().intValue())
chamada antiga: assertEquals("second", key.datum().toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  'second' é diferente de " + result1588 + " <key.datum().toString()>", "second", key.datum().toString())
chamada antiga: assertEquals(2, value.datum().intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + result1589 + " <value.datum().intValue()>", 2, value.datum().intValue())
chamada antiga: assertTrue(job.waitForCompletion(true))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1590 + " <job.waitForCompletion(true)> é falso", job.waitForCompletion(true))
chamada antiga: assertTrue(avroFileReader.hasNext())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1591 + " <avroFileReader.hasNext()> é falso", avroFileReader.hasNext())
chamada antiga: assertNotNull(appleRecord.get())
nova chamada: assertNotNull("Era esperado não nulo, mas " + result1592 + " <appleRecord.get()> é nulo", appleRecord.get())
chamada antiga: assertEquals("apple", appleRecord.getKey().toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  'apple' é diferente de " + result1593 + " <appleRecord.getKey().toString()>", "apple", appleRecord.getKey().toString())
chamada antiga: assertEquals(3, appleRecord.getValue().intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  3 é diferente de " + result1594 + " <appleRecord.getValue().intValue()>", 3, appleRecord.getValue().intValue())
chamada antiga: assertTrue(avroFileReader.hasNext())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1595 + " <avroFileReader.hasNext()> é falso", avroFileReader.hasNext())
chamada antiga: assertNotNull(bananaRecord.get())
nova chamada: assertNotNull("Era esperado não nulo, mas " + result1596 + " <bananaRecord.get()> é nulo", bananaRecord.get())
chamada antiga: assertEquals("banana", bananaRecord.getKey().toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  'banana' é diferente de " + result1597 + " <bananaRecord.getKey().toString()>", "banana", bananaRecord.getKey().toString())
chamada antiga: assertEquals(2, bananaRecord.getValue().intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + result1598 + " <bananaRecord.getValue().intValue()>", 2, bananaRecord.getValue().intValue())
chamada antiga: assertTrue(avroFileReader.hasNext())
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1599 + " <avroFileReader.hasNext()> é falso", avroFileReader.hasNext())
chamada antiga: assertEquals("carrot", carrotRecord.getKey().toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  'carrot' é diferente de " + result1600 + " <carrotRecord.getKey().toString()>", "carrot", carrotRecord.getKey().toString())
chamada antiga: assertEquals(1, carrotRecord.getValue().intValue())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result1601 + " <carrotRecord.getValue().intValue()>", 1, carrotRecord.getValue().intValue())
chamada antiga: assertFalse(avroFileReader.hasNext())
nova chamada: assertFalse("Era esperado falso, mas " + result1602 + " <avroFileReader.hasNext()> é verdadeiro ", avroFileReader.hasNext())
chamada antiga: assertNotNull(capturedCodecFactory.getValue())
nova chamada: assertNotNull("Era esperado não nulo, mas " + result1603 + " <capturedCodecFactory.getValue()> é nulo", capturedCodecFactory.getValue())
chamada antiga: assertEquals(expectedCodec.toString(), capturedCodecFactory.getValue().toString())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result1604 + " <expectedCodec.toString()> é diferente de " + result1605 + " <capturedCodecFactory.getValue().toString()>", expectedCodec.toString(), capturedCodecFactory.getValue().toString())
chamada antiga: assertNotNull(recordWriter)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", recordWriter)
chamada antiga: assertSame(expectedRecordWriter, recordWriter)
nova chamada: assertSame("Era esperado objetos iguais, mas  expectedRecordWriter é diferente de " + " recordWriter", expectedRecordWriter, recordWriter)
chamada antiga: assertEquals("first", firstString.toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  'first' é diferente de " + result1606 + " <firstString.toString()>", "first", firstString.toString())
chamada antiga: assertEquals("second", secondString.toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  'second' é diferente de " + result1607 + " <secondString.toString()>", "second", secondString.toString())
chamada antiga: assertEquals(numOfCounts, WordCountUtil.COUNTS.size())
nova chamada: assertEquals("Era esperado valores iguais, mas  numOfCounts é diferente de " + result1608 + " <WordCountUtil.COUNTS.size()>", numOfCounts, WordCountUtil.COUNTS.size())
chamada antiga: assertEquals(sumOfCounts, actualSumOfCounts)
nova chamada: assertEquals("Era esperado valores iguais, mas  sumOfCounts é diferente de " + " actualSumOfCounts", sumOfCounts, actualSumOfCounts)
chamada antiga: Assert.assertEquals(numOfCounts, WordCountUtil.COUNTS.size())
nova chamada: assertEquals("Era esperado valores iguais, mas  numOfCounts é diferente de " + result1609 + " <WordCountUtil.COUNTS.size()>", numOfCounts, WordCountUtil.COUNTS.size())
chamada antiga: Assert.assertEquals(sumOfCounts, actualSumOfCounts)
nova chamada: assertEquals("Era esperado valores iguais, mas  sumOfCounts é diferente de " + " actualSumOfCounts", sumOfCounts, actualSumOfCounts)
chamada antiga: Assert.assertEquals(numOfCounts, WordCountUtil.COUNTS.size())
nova chamada: assertEquals("Era esperado valores iguais, mas  numOfCounts é diferente de " + result1610 + " <WordCountUtil.COUNTS.size()>", numOfCounts, WordCountUtil.COUNTS.size())
chamada antiga: Assert.assertEquals(sumOfCounts, actualSumOfCounts)
nova chamada: assertEquals("Era esperado valores iguais, mas  sumOfCounts é diferente de " + " actualSumOfCounts", sumOfCounts, actualSumOfCounts)
chamada antiga: Assert.assertEquals(numOfCounts, WordCountUtil.COUNTS.size())
nova chamada: assertEquals("Era esperado valores iguais, mas  numOfCounts é diferente de " + result1611 + " <WordCountUtil.COUNTS.size()>", numOfCounts, WordCountUtil.COUNTS.size())
chamada antiga: Assert.assertEquals(sumOfCounts, actualSumOfCounts)
nova chamada: assertEquals("Era esperado valores iguais, mas  sumOfCounts é diferente de " + " actualSumOfCounts", sumOfCounts, actualSumOfCounts)
chamada antiga: Assert.assertEquals(numOfCounts, WordCountUtil.COUNTS.size())
nova chamada: assertEquals("Era esperado valores iguais, mas  numOfCounts é diferente de " + result1612 + " <WordCountUtil.COUNTS.size()>", numOfCounts, WordCountUtil.COUNTS.size())
chamada antiga: Assert.assertEquals(sumOfCounts, actualSumOfCounts)
nova chamada: assertEquals("Era esperado valores iguais, mas  sumOfCounts é diferente de " + " actualSumOfCounts", sumOfCounts, actualSumOfCounts)
chamada antiga: assertEquals(WordCountUtil.COUNTS.size(), numWords)
nova chamada: assertEquals("Era esperado valores iguais, mas " + result1613 + " <WordCountUtil.COUNTS.size()> é diferente de " + " numWords", WordCountUtil.COUNTS.size(), numWords)
chamada antiga: assertEquals(5, numRecs)
nova chamada: assertEquals("Era esperado valores iguais, mas  5 é diferente de " + " numRecs", 5, numRecs)
chamada antiga: assertEquals(newSyncInterval, jobConf.getInt(AvroOutputFormat.SYNC_INTERVAL_KEY, -1))
nova chamada: assertEquals("Era esperado valores iguais, mas  newSyncInterval é diferente de " + result1614 + " <jobConf.getInt(AvroOutputFormat.SYNC_INTERVAL_KEY, -1)>", newSyncInterval, jobConf.getInt(AvroOutputFormat.SYNC_INTERVAL_KEY, -1))
chamada antiga: assertNull(AvroOutputFormat.getCodecFactory(job))
nova chamada: assertNull("Era esperado nulo, mas " + result1615 + " <AvroOutputFormat.getCodecFactory(job)> não é nulo", AvroOutputFormat.getCodecFactory(job))
chamada antiga: assertNull(AvroOutputFormat.getCodecFactory(job))
nova chamada: assertNull("Era esperado nulo, mas " + result1616 + " <AvroOutputFormat.getCodecFactory(job)> não é nulo", AvroOutputFormat.getCodecFactory(job))
chamada antiga: assertNull(AvroOutputFormat.getCodecFactory(job))
nova chamada: assertNull("Era esperado nulo, mas " + result1617 + " <AvroOutputFormat.getCodecFactory(job)> não é nulo", AvroOutputFormat.getCodecFactory(job))
chamada antiga: assertNotNull(factory)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", factory)
chamada antiga: assertEquals(factory.getClass(), avroBZip2Codec.getClass())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result1618 + " <factory.getClass()> é diferente de " + result1619 + " <avroBZip2Codec.getClass()>", factory.getClass(), avroBZip2Codec.getClass())
chamada antiga: assertNotNull(factory)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", factory)
chamada antiga: assertEquals(factory.getClass(), avroBZip2Codec.getClass())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result1620 + " <factory.getClass()> é diferente de " + result1621 + " <avroBZip2Codec.getClass()>", factory.getClass(), avroBZip2Codec.getClass())
chamada antiga: assertNotNull(factory)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", factory)
chamada antiga: assertEquals(factory.getClass(), avroDeflateCodec.getClass())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result1622 + " <factory.getClass()> é diferente de " + result1623 + " <avroDeflateCodec.getClass()>", factory.getClass(), avroDeflateCodec.getClass())
chamada antiga: assertNotNull(factory)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", factory)
chamada antiga: assertEquals(factory.getClass(), avroDeflateCodec.getClass())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result1624 + " <factory.getClass()> é diferente de " + result1625 + " <avroDeflateCodec.getClass()>", factory.getClass(), avroDeflateCodec.getClass())
chamada antiga: assertNotNull(factory)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", factory)
chamada antiga: assertEquals(factory.getClass(), avroSnappyCodec.getClass())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result1626 + " <factory.getClass()> é diferente de " + result1627 + " <avroSnappyCodec.getClass()>", factory.getClass(), avroSnappyCodec.getClass())
chamada antiga: assertNotNull(factory)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", factory)
chamada antiga: assertEquals(factory.getClass(), avroSnappyCodec.getClass())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result1628 + " <factory.getClass()> é diferente de " + result1629 + " <avroSnappyCodec.getClass()>", factory.getClass(), avroSnappyCodec.getClass())
chamada antiga: assertNotNull(factory)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", factory)
chamada antiga: assertEquals(factory.getClass(), avroDeflateCodec.getClass())
nova chamada: assertEquals("Era esperado valores iguais, mas " + result1630 + " <factory.getClass()> é diferente de " + result1631 + " <avroDeflateCodec.getClass()>", factory.getClass(), avroDeflateCodec.getClass())
chamada antiga: assertEquals(datum, wrapper.toString())
nova chamada: assertEquals("Era esperado valores iguais, mas  datum é diferente de " + result1632 + " <wrapper.toString()>", datum, wrapper.toString())
chamada antiga: fail("Expected an AvroRuntimeException")
nova chamada: fail("A execução falhou por uma causa deliberada", "Expected an AvroRuntimeException")
chamada antiga: assertEquals("k1", asString(fileReader.next()))
nova chamada: assertEquals("Era esperado valores iguais, mas  'k1' é diferente de " + result1633 + " <asString(fileReader.next())>", "k1", asString(fileReader.next()))
chamada antiga: assertEquals("k2", asString(fileReader.next()))
nova chamada: assertEquals("Era esperado valores iguais, mas  'k2' é diferente de " + result1634 + " <asString(fileReader.next())>", "k2", asString(fileReader.next()))
chamada antiga: assertEquals("v1", asString(fileReader.next()))
nova chamada: assertEquals("Era esperado valores iguais, mas  'v1' é diferente de " + result1635 + " <asString(fileReader.next())>", "v1", asString(fileReader.next()))
chamada antiga: assertEquals("v2", asString(fileReader.next()))
nova chamada: assertEquals("Era esperado valores iguais, mas  'v2' é diferente de " + result1636 + " <asString(fileReader.next())>", "v2", asString(fileReader.next()))
chamada antiga: assertEquals("k3\tv3", asString(fileReader.next()))
nova chamada: assertEquals("Era esperado valores iguais, mas  'k3\tv3' é diferente de " + result1637 + " <asString(fileReader.next())>", "k3\tv3", asString(fileReader.next()))
chamada antiga: assertEquals("k4\tv4", asString(fileReader.next()))
nova chamada: assertEquals("Era esperado valores iguais, mas  'k4\tv4' é diferente de " + result1638 + " <asString(fileReader.next())>", "k4\tv4", asString(fileReader.next()))
chamada antiga: fail("A execução falhou por uma causa deliberada", "Expected an AvroRuntimeException")
nova chamada: fail("A execução falhou por uma causa deliberada", "A execução falhou por uma causa deliberada", "Expected an AvroRuntimeException")
chamada antiga: assertEquals(COUNTS.size(), numWords)
nova chamada: assertEquals("Era esperado valores iguais, mas " + result1639 + " <COUNTS.size()> é diferente de " + " numWords", COUNTS.size(), numWords)
chamada antiga: assertEquals(STRING_META_VALUE, in.getMetaString(STRING_KEY))
nova chamada: assertEquals("Era esperado valores iguais, mas  STRING_META_VALUE é diferente de " + result1640 + " <in.getMetaString(STRING_KEY)>", STRING_META_VALUE, in.getMetaString(STRING_KEY))
chamada antiga: assertEquals(LONG_META_VALUE, in.getMetaLong(LONG_KEY))
nova chamada: assertEquals("Era esperado valores iguais, mas  LONG_META_VALUE é diferente de " + result1641 + " <in.getMetaLong(LONG_KEY)>", LONG_META_VALUE, in.getMetaLong(LONG_KEY))
chamada antiga: assertTrue(Arrays.equals(BYTES_META_VALUE, in.getMeta(BYTES_KEY)))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1642 + " <Arrays.equals(BYTES_META_VALUE, in.getMeta(BYTES_KEY))> é falso", Arrays.equals(BYTES_META_VALUE, in.getMeta(BYTES_KEY)))
chamada antiga: assertEquals(1, mapCloseCalls.get())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result1643 + " <mapCloseCalls.get()>", 1, mapCloseCalls.get())
chamada antiga: assertEquals(1, reducerCloseCalls.get())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result1644 + " <reducerCloseCalls.get()>", 1, reducerCloseCalls.get())
chamada antiga: assertEquals(1, mapConfigureCalls.get())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result1645 + " <mapConfigureCalls.get()>", 1, mapConfigureCalls.get())
chamada antiga: assertEquals(1, reducerConfigureCalls.get())
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + result1646 + " <reducerConfigureCalls.get()>", 1, reducerConfigureCalls.get())
chamada antiga: assertEquals(COUNT, i)
nova chamada: assertEquals("Era esperado valores iguais, mas  COUNT é diferente de " + " i", COUNT, i)
chamada antiga: assertEquals(WordCountUtil.COUNTS.size(), numWords)
nova chamada: assertEquals("Era esperado valores iguais, mas " + result1647 + " <WordCountUtil.COUNTS.size()> é diferente de " + " numWords", WordCountUtil.COUNTS.size(), numWords)
chamada antiga: assertEquals(1, statuses.length)
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + " statuses.length", 1, statuses.length)
chamada antiga: assertEquals("somefile.avro", statuses[0].getPath().getName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'somefile.avro' é diferente de " + result1648 + " <statuses[0].getPath().getName()>", "somefile.avro", statuses[0].getPath().getName())
chamada antiga: assertEquals(2, statuses.length)
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + " statuses.length", 2, statuses.length)
chamada antiga: assertTrue(names.contains("somefile.avro"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1649 + " <names.contains('somefile.avro')> é falso", names.contains("somefile.avro"))
chamada antiga: assertTrue(names.contains("someotherfile.txt"))
nova chamada: assertTrue("Era esperado verdadeiro, mas " + result1650 + " <names.contains('someotherfile.txt')> é falso", names.contains("someotherfile.txt"))
chamada antiga: outputClient.fail(message)
nova chamada: fail("A execução falhou por uma causa deliberada", message)
chamada antiga: Assert.fail("Expected " + TestError.class.getCanonicalName())
nova chamada: fail("A execução falhou por uma causa deliberada", "Expected " + TestError.class.getCanonicalName())
chamada antiga: Assert.assertEquals("wait", response)
nova chamada: assertEquals("Era esperado valores iguais, mas  'wait' é diferente de " + " response", "wait", response)
chamada antiga: Assert.assertEquals("Hello, how are you?", simpleClient.hello("how are you?"))
nova chamada: assertEquals("Era esperado valores iguais, mas  'Hello, how are you?' é diferente de " + result1651 + " <simpleClient.hello('how are you?')>", "Hello, how are you?", simpleClient.hello("how are you?"))
chamada antiga: Assert.assertEquals("Hello, World!", future1.get(2, TimeUnit.SECONDS))
nova chamada: assertEquals("Era esperado valores iguais, mas  'Hello, World!' é diferente de " + result1652 + " <future1.get(2, TimeUnit.SECONDS)>", "Hello, World!", future1.get(2, TimeUnit.SECONDS))
chamada antiga: Assert.assertEquals("Hello, what's up?", future2.get(2, TimeUnit.SECONDS))
nova chamada: assertEquals("Era esperado valores iguais, mas  'Hello, what's up?' é diferente de " + result1653 + " <future2.get(2, TimeUnit.SECONDS)>", "Hello, what's up?", future2.get(2, TimeUnit.SECONDS))
chamada antiga: Assert.assertEquals(record, simpleClient.echo(record))
nova chamada: assertEquals("Era esperado valores iguais, mas  record é diferente de " + result1654 + " <simpleClient.echo(record)>", record, simpleClient.echo(record))
chamada antiga: Assert.assertEquals(record, future1.get(2, TimeUnit.SECONDS))
nova chamada: assertEquals("Era esperado valores iguais, mas  record é diferente de " + result1655 + " <future1.get(2, TimeUnit.SECONDS)>", record, future1.get(2, TimeUnit.SECONDS))
chamada antiga: Assert.assertEquals(record, future2.get(2, TimeUnit.SECONDS))
nova chamada: assertEquals("Era esperado valores iguais, mas  record é diferente de " + result1656 + " <future2.get(2, TimeUnit.SECONDS)>", record, future2.get(2, TimeUnit.SECONDS))
chamada antiga: Assert.assertEquals(8, simpleClient.add(2, 6))
nova chamada: assertEquals("Era esperado valores iguais, mas  8 é diferente de " + result1657 + " <simpleClient.add(2, 6)>", 8, simpleClient.add(2, 6))
chamada antiga: Assert.assertEquals(Integer.valueOf(16), future1.get(2, TimeUnit.SECONDS))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result1658 + " <Integer.valueOf(16)> é diferente de " + result1659 + " <future1.get(2, TimeUnit.SECONDS)>", Integer.valueOf(16), future1.get(2, TimeUnit.SECONDS))
chamada antiga: Assert.assertEquals(Integer.valueOf(768), future2.get(2, TimeUnit.SECONDS))
nova chamada: assertEquals("Era esperado valores iguais, mas " + result1660 + " <Integer.valueOf(768)> é diferente de " + result1661 + " <future2.get(2, TimeUnit.SECONDS)>", Integer.valueOf(768), future2.get(2, TimeUnit.SECONDS))
chamada antiga: Assert.assertEquals(byteBuffer, simpleClient.echoBytes(byteBuffer))
nova chamada: assertEquals("Era esperado valores iguais, mas  byteBuffer é diferente de " + result1662 + " <simpleClient.echoBytes(byteBuffer)>", byteBuffer, simpleClient.echoBytes(byteBuffer))
chamada antiga: Assert.assertEquals(byteBuffer, future1.get(2, TimeUnit.SECONDS))
nova chamada: assertEquals("Era esperado valores iguais, mas  byteBuffer é diferente de " + result1663 + " <future1.get(2, TimeUnit.SECONDS)>", byteBuffer, future1.get(2, TimeUnit.SECONDS))
chamada antiga: Assert.assertEquals(byteBuffer, future2.get(2, TimeUnit.SECONDS))
nova chamada: assertEquals("Era esperado valores iguais, mas  byteBuffer é diferente de " + result1664 + " <future2.get(2, TimeUnit.SECONDS)>", byteBuffer, future2.get(2, TimeUnit.SECONDS))
chamada antiga: assertEquals(0, allMessages.getCount())
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + result1665 + " <allMessages.getCount()>", 0, allMessages.getCount())
chamada antiga: Assert.assertEquals("Sent message to [wife] from [husband] with body [I love you!]", result)
nova chamada: assertEquals("Era esperado valores iguais, mas  'Sent message to [wife] from [husband] with body [I love you!]' é diferente de " + " result", "Sent message to [wife] from [husband] with body [I love you!]", result)
chamada antiga: Assert.assertEquals(2, ((NettyServer) server).getNumActiveConnections())
nova chamada: assertEquals("Era esperado valores iguais, mas  2 é diferente de " + result1666 + " <((NettyServer) server).getNumActiveConnections()>", 2, ((NettyServer) server).getNumActiveConnections())
chamada antiga: Assert.assertEquals(1, numActiveConnections)
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + " numActiveConnections", 1, numActiveConnections)
Total asserts: 2618
Asserts sem descrição: 2215
Asserts com descrição: 403
Assertion Roulette: 1859

Após do refactor: 
Total asserts: 2618
Asserts sem descrição: 1036
Asserts com descrição: 1582
Assertion Roulette: 882
