
Projeto: /home/vitor-otto/opensource/jsoup-jsoup-1.15.3

Antes do refactor: 
chamada antiga: assertNotNull(files)
nova chamada: assertNotNull(files, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(files.length > 10)
nova chamada: assertTrue(files.length > 10, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNotNull(files)
nova chamada: assertNotNull(files, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(files.length > 10)
nova chamada: assertTrue(files.length > 10, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNotNull(doc)
nova chamada: assertNotNull(doc, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(doc)
nova chamada: assertNotNull(doc, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(xmlDoc)
nova chamada: assertNotNull(xmlDoc, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(doc)
nova chamada: assertNotNull(doc, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(doc)
nova chamada: assertNotNull(doc, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: Validate.fail("Should not be reachable")
nova chamada: fail("Should not be reachable", "A execução falhou por uma causa deliberada")
chamada antiga: assertTrue(runner.isInterrupted())
nova chamada: assertTrue(runner.isInterrupted(), "Era esperado verdadeiro, mas " + result0 + " <runner.isInterrupted()> é falso")
chamada antiga: assertTrue(body[0].length() > 0)
nova chamada: assertTrue(body[0].length() > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(body[0].contains("<p>Are you still there?"))
nova chamada: assertTrue(body[0].contains("<p>Are you still there?"), "Era esperado verdadeiro, mas " + result1 + " <body[0].contains('<p>Are you still there?')> é falso")
chamada antiga: assertTrue(runner.isInterrupted())
nova chamada: assertTrue(runner.isInterrupted(), "Era esperado verdadeiro, mas " + result2 + " <runner.isInterrupted()> é falso")
chamada antiga: assertEquals(0, body[0].length())
nova chamada: assertEquals(0, body[0].length(), "Era esperado valores iguais, mas  0 é diferente de " + result3 + " <body[0].length()>")
chamada antiga: assertTrue(threw)
nova chamada: assertTrue(threw, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("outatime", h1.text())
nova chamada: assertEquals("outatime", h1.text(), "Era esperado valores iguais, mas  'outatime' é diferente de " + result4 + " <h1.text()>")
chamada antiga: assertEquals("outatime", h1.text())
nova chamada: assertEquals("outatime", h1.text(), "Era esperado valores iguais, mas  'outatime' é diferente de " + result5 + " <h1.text()>")
chamada antiga: assertEquals(0, catcher.exceptionCount.get())
nova chamada: assertEquals(0, catcher.exceptionCount.get(), "Era esperado valores iguais, mas  0 é diferente de " + result6 + " <catcher.exceptionCount.get()>")
chamada antiga: assertEquals(numThreads - 1, catcher.multiThreadExceptions.get())
nova chamada: assertEquals(numThreads - 1, catcher.multiThreadExceptions.get(), "Era esperado valores iguais, mas  numThreads - 1 é diferente de " + result7 + " <catcher.multiThreadExceptions.get()>")
chamada antiga: assertEquals(numThreads - 1, catcher.exceptionCount.get())
nova chamada: assertEquals(numThreads - 1, catcher.exceptionCount.get(), "Era esperado valores iguais, mas  numThreads - 1 é diferente de " + result8 + " <catcher.exceptionCount.get()>")
chamada antiga: fail("Should not be reachable", "A execução falhou por uma causa deliberada")
nova chamada: fail("Should not be reachable", "A execução falhou por uma causa deliberada", "A execução falhou por uma causa deliberada")
chamada antiga: assertEquals("Hello, World!", p.text())
nova chamada: assertEquals("Hello, World!", p.text(), "Era esperado valores iguais, mas  'Hello, World!' é diferente de " + result9 + " <p.text()>")
chamada antiga: assertTrue(doc.title().contains("Environment Variables"))
nova chamada: assertTrue(doc.title().contains("Environment Variables"), "Era esperado verdadeiro, mas " + result10 + " <doc.title().contains('Environment Variables')> é falso")
chamada antiga: assertTrue(doc.title().contains("Environment Variables"))
nova chamada: assertTrue(doc.title().contains("Environment Variables"), "Era esperado verdadeiro, mas " + result11 + " <doc.title().contains('Environment Variables')> é falso")
chamada antiga: assertTrue(threw)
nova chamada: assertTrue(threw, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(threw)
nova chamada: assertTrue(threw, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(404, res.statusCode())
nova chamada: assertEquals(404, res.statusCode(), "Era esperado valores iguais, mas  404 é diferente de " + result12 + " <res.statusCode()>")
chamada antiga: assertEquals("Webserver Environment Variables", doc.title())
nova chamada: assertEquals("Webserver Environment Variables", doc.title(), "Era esperado valores iguais, mas  'Webserver Environment Variables' é diferente de " + result13 + " <doc.title()>")
chamada antiga: assertEquals("POST", ihVal("Method", doc))
nova chamada: assertEquals("POST", ihVal("Method", doc), "Era esperado valores iguais, mas  'POST' é diferente de " + result14 + " <ihVal('Method', doc)>")
chamada antiga: assertEquals("gzip", ihVal("Accept-Encoding", doc))
nova chamada: assertEquals("gzip", ihVal("Accept-Encoding", doc), "Era esperado valores iguais, mas  'gzip' é diferente de " + result15 + " <ihVal('Accept-Encoding', doc)>")
chamada antiga: assertEquals("auth=token", ihVal("Cookie", doc))
nova chamada: assertEquals("auth=token", ihVal("Cookie", doc), "Era esperado valores iguais, mas  'auth=token' é diferente de " + result16 + " <ihVal('Cookie', doc)>")
chamada antiga: assertEquals("度一下", ihVal("百", doc))
nova chamada: assertEquals("度一下", ihVal("百", doc), "Era esperado valores iguais, mas  '度一下' é diferente de " + result17 + " <ihVal('百', doc)>")
chamada antiga: assertEquals("Jsoup, Jonathan", ihVal("uname", doc))
nova chamada: assertEquals("Jsoup, Jonathan", ihVal("uname", doc), "Era esperado valores iguais, mas  'Jsoup, Jonathan' é diferente de " + result18 + " <ihVal('uname', doc)>")
chamada antiga: assertEquals("application/x-www-form-urlencoded; charset=UTF-8", ihVal("Content-Type", doc))
nova chamada: assertEquals("application/x-www-form-urlencoded; charset=UTF-8", ihVal("Content-Type", doc), "Era esperado valores iguais, mas  'application/x-www-form-urlencoded; charset=UTF-8' é diferente de " + result19 + " <ihVal('Content-Type', doc)>")
chamada antiga: assertTrue(ihVal("Content-Type", doc).contains(MULTIPART_FORM_DATA))
nova chamada: assertTrue(ihVal("Content-Type", doc).contains(MULTIPART_FORM_DATA), "Era esperado verdadeiro, mas " + result20 + " <ihVal('Content-Type', doc).contains(MULTIPART_FORM_DATA)> é falso")
chamada antiga: assertTrue(ihVal("Content-Type", doc).contains("boundary"))
nova chamada: assertTrue(ihVal("Content-Type", doc).contains("boundary"), "Era esperado verdadeiro, mas " + result21 + " <ihVal('Content-Type', doc).contains('boundary')> é falso")
chamada antiga: assertEquals("Jsoup, Jonathan", ihVal("uname", doc))
nova chamada: assertEquals("Jsoup, Jonathan", ihVal("uname", doc), "Era esperado valores iguais, mas  'Jsoup, Jonathan' é diferente de " + result22 + " <ihVal('uname', doc)>")
chamada antiga: assertEquals("度一下", ihVal("百", doc))
nova chamada: assertEquals("度一下", ihVal("百", doc), "Era esperado valores iguais, mas  '度一下' é diferente de " + result23 + " <ihVal('百', doc)>")
chamada antiga: assertEquals("hello", ihVal("Random-Header-name", doc))
nova chamada: assertEquals("hello", ihVal("Random-Header-name", doc), "Era esperado valores iguais, mas  'hello' é diferente de " + result24 + " <ihVal('Random-Header-name', doc)>")
chamada antiga: assertEquals("cross-site", ihVal("Sec-Fetch-Site", doc))
nova chamada: assertEquals("cross-site", ihVal("Sec-Fetch-Site", doc), "Era esperado valores iguais, mas  'cross-site' é diferente de " + result25 + " <ihVal('Sec-Fetch-Site', doc)>")
chamada antiga: assertEquals("cors", ihVal("Sec-Fetch-Mode", doc))
nova chamada: assertEquals("cors", ihVal("Sec-Fetch-Mode", doc), "Era esperado valores iguais, mas  'cors' é diferente de " + result26 + " <ihVal('Sec-Fetch-Mode', doc)>")
chamada antiga: assertEquals("hello", ihVal("Random-Header-name", doc))
nova chamada: assertEquals("hello", ihVal("Random-Header-name", doc), "Era esperado valores iguais, mas  'hello' é diferente de " + result27 + " <ihVal('Random-Header-name', doc)>")
chamada antiga: assertEquals("cross-site", ihVal("Sec-Fetch-Site", doc))
nova chamada: assertEquals("cross-site", ihVal("Sec-Fetch-Site", doc), "Era esperado valores iguais, mas  'cross-site' é diferente de " + result28 + " <ihVal('Sec-Fetch-Site', doc)>")
chamada antiga: assertEquals("cors", ihVal("Sec-Fetch-Mode", doc))
nova chamada: assertEquals("cors", ihVal("Sec-Fetch-Mode", doc), "Era esperado valores iguais, mas  'cors' é diferente de " + result29 + " <ihVal('Sec-Fetch-Mode', doc)>")
chamada antiga: assertEquals("POST", ihVal("Method", doc))
nova chamada: assertEquals("POST", ihVal("Method", doc), "Era esperado valores iguais, mas  'POST' é diferente de " + result30 + " <ihVal('Method', doc)>")
chamada antiga: assertEquals("application/json", ihVal("Content-Type", doc))
nova chamada: assertEquals("application/json", ihVal("Content-Type", doc), "Era esperado valores iguais, mas  'application/json' é diferente de " + result31 + " <ihVal('Content-Type', doc)>")
chamada antiga: assertEquals("foo=true", ihVal("Query String", doc))
nova chamada: assertEquals("foo=true", ihVal("Query String", doc), "Era esperado valores iguais, mas  'foo=true' é diferente de " + result32 + " <ihVal('Query String', doc)>")
chamada antiga: assertEquals(body, ihVal("Post Data", doc))
nova chamada: assertEquals(body, ihVal("Post Data", doc), "Era esperado valores iguais, mas  body é diferente de " + result33 + " <ihVal('Post Data', doc)>")
chamada antiga: assertEquals("POST", ihVal("Method", doc))
nova chamada: assertEquals("POST", ihVal("Method", doc), "Era esperado valores iguais, mas  'POST' é diferente de " + result34 + " <ihVal('Method', doc)>")
chamada antiga: assertEquals("application/json", ihVal("Content-Type", doc))
nova chamada: assertEquals("application/json", ihVal("Content-Type", doc), "Era esperado valores iguais, mas  'application/json' é diferente de " + result35 + " <ihVal('Content-Type', doc)>")
chamada antiga: assertEquals(body, ihVal("Post Data", doc))
nova chamada: assertEquals(body, ihVal("Post Data", doc), "Era esperado valores iguais, mas  body é diferente de " + result36 + " <ihVal('Post Data', doc)>")
chamada antiga: assertEquals("POST", ihVal("Method", doc))
nova chamada: assertEquals("POST", ihVal("Method", doc), "Era esperado valores iguais, mas  'POST' é diferente de " + result37 + " <ihVal('Method', doc)>")
chamada antiga: assertEquals("text/plain", ihVal("Content-Type", doc))
nova chamada: assertEquals("text/plain", ihVal("Content-Type", doc), "Era esperado valores iguais, mas  'text/plain' é diferente de " + result38 + " <ihVal('Content-Type', doc)>")
chamada antiga: assertEquals(body, ihVal("Post Data", doc))
nova chamada: assertEquals(body, ihVal("Post Data", doc), "Era esperado valores iguais, mas  body é diferente de " + result39 + " <ihVal('Post Data', doc)>")
chamada antiga: assertEquals("POST", ihVal("Method", doc))
nova chamada: assertEquals("POST", ihVal("Method", doc), "Era esperado valores iguais, mas  'POST' é diferente de " + result40 + " <ihVal('Method', doc)>")
chamada antiga: assertEquals("uname=Jsoup&uname=Jonathan&%E7%99%BE=%E5%BA%A6%E4%B8%80%E4%B8%8B", ihVal("Query String", doc))
nova chamada: assertEquals("uname=Jsoup&uname=Jonathan&%E7%99%BE=%E5%BA%A6%E4%B8%80%E4%B8%8B", ihVal("Query String", doc), "Era esperado valores iguais, mas  'uname=Jsoup&uname=Jonathan&%E7%99%BE=%E5%BA%A6%E4%B8%80%E4%B8%8B' é diferente de " + result41 + " <ihVal('Query String', doc)>")
chamada antiga: assertEquals(body, ihVal("Post Data", doc))
nova chamada: assertEquals(body, ihVal("Post Data", doc), "Era esperado valores iguais, mas  body é diferente de " + result42 + " <ihVal('Post Data', doc)>")
chamada antiga: assertEquals("what=the&what=about+%26+me%3F", ihVal("Query String", doc))
nova chamada: assertEquals("what=the&what=about+%26+me%3F", ihVal("Query String", doc), "Era esperado valores iguais, mas  'what=the&what=about+%26+me%3F' é diferente de " + result43 + " <ihVal('Query String', doc)>")
chamada antiga: assertEquals("the, about & me?", ihVal("what", doc))
nova chamada: assertEquals("the, about & me?", ihVal("what", doc), "Era esperado valores iguais, mas  'the, about & me?' é diferente de " + result44 + " <ihVal('what', doc)>")
chamada antiga: assertEquals("Mozilla", ihVal("User-Agent", doc))
nova chamada: assertEquals("Mozilla", ihVal("User-Agent", doc), "Era esperado valores iguais, mas  'Mozilla' é diferente de " + result45 + " <ihVal('User-Agent', doc)>")
chamada antiga: assertEquals("http://example.com", ihVal("Referer", doc))
nova chamada: assertEquals("http://example.com", ihVal("Referer", doc), "Era esperado valores iguais, mas  'http://example.com' é diferente de " + result46 + " <ihVal('Referer', doc)>")
chamada antiga: assertEquals("PUT", ihVal("Method", doc))
nova chamada: assertEquals("PUT", ihVal("Method", doc), "Era esperado valores iguais, mas  'PUT' é diferente de " + result47 + " <ihVal('Method', doc)>")
chamada antiga: assertEquals("gzip", ihVal("Accept-Encoding", doc))
nova chamada: assertEquals("gzip", ihVal("Accept-Encoding", doc), "Era esperado valores iguais, mas  'gzip' é diferente de " + result48 + " <ihVal('Accept-Encoding', doc)>")
chamada antiga: assertEquals("auth=token", ihVal("Cookie", doc))
nova chamada: assertEquals("auth=token", ihVal("Cookie", doc), "Era esperado valores iguais, mas  'auth=token' é diferente de " + result49 + " <ihVal('Cookie', doc)>")
chamada antiga: assertEquals("4", ihVal("Parts", res))
nova chamada: assertEquals("4", ihVal("Parts", res), "Era esperado valores iguais, mas  '4' é diferente de " + result50 + " <ihVal('Parts', res)>")
chamada antiga: assertEquals("application/octet-stream", ihVal("Part secondPart ContentType", res))
nova chamada: assertEquals("application/octet-stream", ihVal("Part secondPart ContentType", res), "Era esperado valores iguais, mas  'application/octet-stream' é diferente de " + result51 + " <ihVal('Part secondPart ContentType', res)>")
chamada antiga: assertEquals("secondPart", ihVal("Part secondPart Name", res))
nova chamada: assertEquals("secondPart", ihVal("Part secondPart Name", res), "Era esperado valores iguais, mas  'secondPart' é diferente de " + result52 + " <ihVal('Part secondPart Name', res)>")
chamada antiga: assertEquals("google-ipod.html.gz", ihVal("Part secondPart Filename", res))
nova chamada: assertEquals("google-ipod.html.gz", ihVal("Part secondPart Filename", res), "Era esperado valores iguais, mas  'google-ipod.html.gz' é diferente de " + result53 + " <ihVal('Part secondPart Filename', res)>")
chamada antiga: assertEquals("12212", ihVal("Part secondPart Size", res))
nova chamada: assertEquals("12212", ihVal("Part secondPart Size", res), "Era esperado valores iguais, mas  '12212' é diferente de " + result54 + " <ihVal('Part secondPart Size', res)>")
chamada antiga: assertEquals("image/jpeg", ihVal("Part firstPart ContentType", res))
nova chamada: assertEquals("image/jpeg", ihVal("Part firstPart ContentType", res), "Era esperado valores iguais, mas  'image/jpeg' é diferente de " + result55 + " <ihVal('Part firstPart ContentType', res)>")
chamada antiga: assertEquals("firstPart", ihVal("Part firstPart Name", res))
nova chamada: assertEquals("firstPart", ihVal("Part firstPart Name", res), "Era esperado valores iguais, mas  'firstPart' é diferente de " + result56 + " <ihVal('Part firstPart Name', res)>")
chamada antiga: assertEquals("thumb.jpg", ihVal("Part firstPart Filename", res))
nova chamada: assertEquals("thumb.jpg", ihVal("Part firstPart Filename", res), "Era esperado valores iguais, mas  'thumb.jpg' é diferente de " + result57 + " <ihVal('Part firstPart Filename', res)>")
chamada antiga: assertEquals("1052", ihVal("Part firstPart Size", res))
nova chamada: assertEquals("1052", ihVal("Part firstPart Size", res), "Era esperado valores iguais, mas  '1052' é diferente de " + result58 + " <ihVal('Part firstPart Size', res)>")
chamada antiga: assertEquals("Jay", ihVal("firstname", res))
nova chamada: assertEquals("Jay", ihVal("firstname", res), "Era esperado valores iguais, mas  'Jay' é diferente de " + result59 + " <ihVal('firstname', res)>")
chamada antiga: assertEquals("Soup", ihVal("surname", res))
nova chamada: assertEquals("Soup", ihVal("surname", res), "Era esperado valores iguais, mas  'Soup' é diferente de " + result60 + " <ihVal('surname', res)>")
chamada antiga: assertTrue(doc.title().contains("Environment"))
nova chamada: assertTrue(doc.title().contains("Environment"), "Era esperado verdadeiro, mas " + result61 + " <doc.title().contains('Environment')> é falso")
chamada antiga: assertTrue(doc2.title().contains("Environment"))
nova chamada: assertTrue(doc2.title().contains("Environment"), "Era esperado verdadeiro, mas " + result62 + " <doc2.title().contains('Environment')> é falso")
chamada antiga: assertTrue(body.contains("Environment"))
nova chamada: assertTrue(body.contains("Environment"), "Era esperado verdadeiro, mas " + result63 + " <body.contains('Environment')> é falso")
chamada antiga: assertTrue(bytes.length > 100)
nova chamada: assertTrue(bytes.length > 100, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(doc.title().contains("Environment"))
nova chamada: assertTrue(doc.title().contains("Environment"), "Era esperado verdadeiro, mas " + result64 + " <doc.title().contains('Environment')> é falso")
chamada antiga: assertEquals("asdfg123", cookies.get("token"))
nova chamada: assertEquals("asdfg123", cookies.get("token"), "Era esperado valores iguais, mas  'asdfg123' é diferente de " + result65 + " <cookies.get('token')>")
chamada antiga: assertEquals("jhy", cookies.get("uid"))
nova chamada: assertEquals("jhy", cookies.get("uid"), "Era esperado valores iguais, mas  'jhy' é diferente de " + result66 + " <cookies.get('uid')>")
chamada antiga: assertEquals("token=asdfg123; uid=jhy", ihVal("Cookie", doc))
nova chamada: assertEquals("token=asdfg123; uid=jhy", ihVal("Cookie", doc), "Era esperado valores iguais, mas  'token=asdfg123; uid=jhy' é diferente de " + result67 + " <ihVal('Cookie', doc)>")
chamada antiga: assertEquals(0, res.cookies().size())
nova chamada: assertEquals(0, res.cookies().size(), "Era esperado valores iguais, mas  0 é diferente de " + result68 + " <res.cookies().size()>")
chamada antiga: assertEquals(echoUrl, doc.location())
nova chamada: assertEquals(echoUrl, doc.location(), "Era esperado valores iguais, mas  echoUrl é diferente de " + result69 + " <doc.location()>")
chamada antiga: assertEquals("True", ihVal("Cookie: LetMeIn", doc))
nova chamada: assertEquals("True", ihVal("Cookie: LetMeIn", doc), "Era esperado valores iguais, mas  'True' é diferente de " + result70 + " <ihVal('Cookie: LetMeIn', doc)>")
chamada antiga: assertEquals("Yes", ihVal("Cookie: DoesItWork", doc))
nova chamada: assertEquals("Yes", ihVal("Cookie: DoesItWork", doc), "Era esperado valores iguais, mas  'Yes' é diferente de " + result71 + " <ihVal('Cookie: DoesItWork', doc)>")
chamada antiga: assertEquals("deflate", res.header("Content-Encoding"))
nova chamada: assertEquals("deflate", res.header("Content-Encoding"), "Era esperado valores iguais, mas  'deflate' é diferente de " + result72 + " <res.header('Content-Encoding')>")
chamada antiga: assertEquals("Hello, World!", doc.selectFirst("p").text())
nova chamada: assertEquals("Hello, World!", doc.selectFirst("p").text(), "Era esperado valores iguais, mas  'Hello, World!' é diferente de " + result73 + " <doc.selectFirst('p').text()>")
chamada antiga: assertEquals("Something", document.title())
nova chamada: assertEquals("Something", document.title(), "Era esperado valores iguais, mas  'Something' é diferente de " + result74 + " <document.title()>")
chamada antiga: assertEquals(0, document.select("p").size())
nova chamada: assertEquals(0, document.select("p").size(), "Era esperado valores iguais, mas  0 é diferente de " + result75 + " <document.select('p').size()>")
chamada antiga: assertEquals(0, doc.select("p").size())
nova chamada: assertEquals(0, doc.select("p").size(), "Era esperado valores iguais, mas  0 é diferente de " + result76 + " <doc.select('p').size()>")
chamada antiga: assertEquals("Hello, World!", p.text())
nova chamada: assertEquals("Hello, World!", p.text(), "Era esperado valores iguais, mas  'Hello, World!' é diferente de " + result77 + " <p.text()>")
chamada antiga: assertEquals(HelloServlet.Url, doc.location())
nova chamada: assertEquals(HelloServlet.Url, doc.location(), "Era esperado valores iguais, mas  HelloServlet.Url é diferente de " + result78 + " <doc.location()>")
chamada antiga: assertTrue(threw)
nova chamada: assertTrue(threw, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(EchoServlet.Url, doc.location())
nova chamada: assertEquals(EchoServlet.Url, doc.location(), "Era esperado valores iguais, mas  EchoServlet.Url é diferente de " + result79 + " <doc.location()>")
chamada antiga: assertEquals("GET", ihVal("Method", doc))
nova chamada: assertEquals("GET", ihVal("Method", doc), "Era esperado valores iguais, mas  'GET' é diferente de " + result80 + " <ihVal('Method', doc)>")
chamada antiga: assertNull(ihVal("Hello", doc))
nova chamada: assertNull(ihVal("Hello", doc), "Era esperado nulo, mas " + result81 + " <ihVal('Hello', doc)> não é nulo")
chamada antiga: assertEquals(EchoServlet.Url, doc.location())
nova chamada: assertEquals(EchoServlet.Url, doc.location(), "Era esperado valores iguais, mas  EchoServlet.Url é diferente de " + result82 + " <doc.location()>")
chamada antiga: assertEquals("POST", ihVal("Method", doc))
nova chamada: assertEquals("POST", ihVal("Method", doc), "Era esperado valores iguais, mas  'POST' é diferente de " + result83 + " <ihVal('Method', doc)>")
chamada antiga: assertEquals("there", ihVal("Hello", doc))
nova chamada: assertEquals("there", ihVal("Hello", doc), "Era esperado valores iguais, mas  'there' é diferente de " + result84 + " <ihVal('Hello', doc)>")
chamada antiga: assertEquals("UTF-8", con.response().charset())
nova chamada: assertEquals("UTF-8", con.response().charset(), "Era esperado valores iguais, mas  'UTF-8' é diferente de " + result85 + " <con.response().charset()>")
chamada antiga: assertEquals("OK", doc.title())
nova chamada: assertEquals("OK", doc.title(), "Era esperado valores iguais, mas  'OK' é diferente de " + result86 + " <doc.title()>")
chamada antiga: assertTrue(threw)
nova chamada: assertTrue(threw, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNotNull(title)
nova chamada: assertNotNull(title, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("jsoup RSS news", title.text())
nova chamada: assertEquals("jsoup RSS news", title.text(), "Era esperado valores iguais, mas  'jsoup RSS news' é diferente de " + result87 + " <title.text()>")
chamada antiga: assertEquals("channel", title.parent().nodeName())
nova chamada: assertEquals("channel", title.parent().nodeName(), "Era esperado valores iguais, mas  'channel' é diferente de " + result88 + " <title.parent().nodeName()>")
chamada antiga: assertEquals("", doc.title())
nova chamada: assertEquals("", doc.title(), "Era esperado valores iguais, mas  '' é diferente de " + result89 + " <doc.title()>")
chamada antiga: assertEquals(3, doc.select("link").size())
nova chamada: assertEquals(3, doc.select("link").size(), "Era esperado valores iguais, mas  3 é diferente de " + result90 + " <doc.select('link').size()>")
chamada antiga: assertEquals("application/rss+xml", con.response().contentType())
nova chamada: assertEquals("application/rss+xml", con.response().contentType(), "Era esperado valores iguais, mas  'application/rss+xml' é diferente de " + result91 + " <con.response().contentType()>")
chamada antiga: assertTrue(doc.parser().getTreeBuilder() instanceof XmlTreeBuilder)
nova chamada: assertTrue(doc.parser().getTreeBuilder() instanceof XmlTreeBuilder, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(Document.OutputSettings.Syntax.xml, doc.outputSettings().syntax())
nova chamada: assertEquals(Document.OutputSettings.Syntax.xml, doc.outputSettings().syntax(), "Era esperado valores iguais, mas  Document.OutputSettings.Syntax.xml é diferente de " + result92 + " <doc.outputSettings().syntax()>")
chamada antiga: assertEquals(1052, bytes.length)
nova chamada: assertEquals(1052, bytes.length, "Era esperado valores iguais, mas  1052 é diferente de " + " bytes.length")
chamada antiga: assertEquals(14766, text.length())
nova chamada: assertEquals(14766, text.length(), "Era esperado valores iguais, mas  14766 é diferente de " + result93 + " <text.length()>")
chamada antiga: assertEquals(text, docFromLocalServer.body().text())
nova chamada: assertEquals(text, docFromLocalServer.body().text(), "Era esperado valores iguais, mas  text é diferente de " + result94 + " <docFromLocalServer.body().text()>")
chamada antiga: assertEquals(text, docFromFileRead.body().text())
nova chamada: assertEquals(text, docFromFileRead.body().text(), "Era esperado valores iguais, mas  text é diferente de " + result95 + " <docFromFileRead.body().text()>")
chamada antiga: assertEquals(1, forms.size())
nova chamada: assertEquals(1, forms.size(), "Era esperado valores iguais, mas  1 é diferente de " + result96 + " <forms.size()>")
chamada antiga: assertNotNull(fileData)
nova chamada: assertNotNull(fileData, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(ihVal("Method", doc), "POST")
nova chamada: assertEquals(ihVal("Method", doc), "POST", "Era esperado valores iguais, mas " + result97 + " <ihVal('Method', doc)> é diferente de " + " 'POST'")
chamada antiga: assertEquals(ihVal("Part _file Filename", doc), "check.html")
nova chamada: assertEquals(ihVal("Part _file Filename", doc), "check.html", "Era esperado valores iguais, mas " + result98 + " <ihVal('Part _file Filename', doc)> é diferente de " + " 'check.html'")
chamada antiga: assertEquals(ihVal("Part _file Name", doc), "_file")
nova chamada: assertEquals(ihVal("Part _file Name", doc), "_file", "Era esperado valores iguais, mas " + result99 + " <ihVal('Part _file Name', doc)> é diferente de " + " '_file'")
chamada antiga: assertEquals(ihVal("_function", doc), "tidy")
nova chamada: assertEquals(ihVal("_function", doc), "tidy", "Era esperado valores iguais, mas " + result100 + " <ihVal('_function', doc)> é diferente de " + " 'tidy'")
chamada antiga: assertTrue(req.parser().getTreeBuilder() instanceof XmlTreeBuilder)
nova chamada: assertTrue(req.parser().getTreeBuilder() instanceof XmlTreeBuilder, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("<doc><val>One<val>Two</val>Three</val></doc>\n", doc.outerHtml())
nova chamada: assertEquals("<doc><val>One<val>Two</val>Three</val></doc>\n", doc.outerHtml(), "Era esperado valores iguais, mas  'docvalOnevalTwo/valThree/val/doc\n' é diferente de " + result101 + " <doc.outerHtml()>")
chamada antiga: assertEquals(con.response().contentType(), contentType)
nova chamada: assertEquals(con.response().contentType(), contentType, "Era esperado valores iguais, mas " + result102 + " <con.response().contentType()> é diferente de " + " contentType")
chamada antiga: assertTrue(req.parser().getTreeBuilder() instanceof HtmlTreeBuilder)
nova chamada: assertTrue(req.parser().getTreeBuilder() instanceof HtmlTreeBuilder, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("<html> <head></head> <body> <doc> <val> One <val> Two </val>Three </val> </doc> </body> </html>", StringUtil.normaliseWhitespace(doc.outerHtml()))
nova chamada: assertEquals("<html> <head></head> <body> <doc> <val> One <val> Two </val>Three </val> </doc> </body> </html>", StringUtil.normaliseWhitespace(doc.outerHtml()), "Era esperado valores iguais, mas  'html head/head body doc val One val Two /valThree /val /doc /body /html' é diferente de " + result103 + " <StringUtil.normaliseWhitespace(doc.outerHtml())>")
chamada antiga: assertEquals("text/html;charset=utf-8", res.header("Content-Type"))
nova chamada: assertEquals("text/html;charset=utf-8", res.header("Content-Type"), "Era esperado valores iguais, mas  'text/html;charset=utf-8' é diferente de " + result104 + " <res.header('Content-Type')>")
chamada antiga: assertEquals("no-cache, no-store", res.header("Cache-Control"))
nova chamada: assertEquals("no-cache, no-store", res.header("Cache-Control"), "Era esperado valores iguais, mas  'no-cache, no-store' é diferente de " + result105 + " <res.header('Cache-Control')>")
chamada antiga: assertEquals(2, header.size())
nova chamada: assertEquals(2, header.size(), "Era esperado valores iguais, mas  2 é diferente de " + result106 + " <header.size()>")
chamada antiga: assertEquals("no-cache", header.get(0))
nova chamada: assertEquals("no-cache", header.get(0), "Era esperado valores iguais, mas  'no-cache' é diferente de " + result107 + " <header.get(0)>")
chamada antiga: assertEquals("no-store", header.get(1))
nova chamada: assertEquals("no-store", header.get(1), "Era esperado valores iguais, mas  'no-store' é diferente de " + result108 + " <header.get(1)>")
chamada antiga: assertEquals("text/xml", response.header("Content-Type"))
nova chamada: assertEquals("text/xml", response.header("Content-Type"), "Era esperado valores iguais, mas  'text/xml' é diferente de " + result109 + " <response.header('Content-Type')>")
chamada antiga: assertEquals("", response.body())
nova chamada: assertEquals("", response.body(), "Era esperado valores iguais, mas  '' é diferente de " + result110 + " <response.body()>")
chamada antiga: assertEquals("", doc.text())
nova chamada: assertEquals("", doc.text(), "Era esperado valores iguais, mas  '' é diferente de " + result111 + " <doc.text()>")
chamada antiga: assertEquals(url, wDoc.getDocumentURI())
nova chamada: assertEquals(url, wDoc.getDocumentURI(), "Era esperado valores iguais, mas  url é diferente de " + result112 + " <wDoc.getDocumentURI()>")
chamada antiga: assertTrue(html.contains("Upload"))
nova chamada: assertTrue(html.contains("Upload"), "Era esperado verdadeiro, mas " + result113 + " <html.contains('Upload')> é falso")
chamada antiga: assertEquals("http://example.com/foo.jpg", doc.select("img").first().absUrl("src"))
nova chamada: assertEquals("http://example.com/foo.jpg", doc.select("img").first().absUrl("src"), "Era esperado valores iguais, mas  'http://example.com/foo.jpg' é diferente de " + result114 + " <doc.select('img').first().absUrl('src')>")
chamada antiga: assertEquals(actualDocText, defaultRes.parse().text().length())
nova chamada: assertEquals(actualDocText, defaultRes.parse().text().length(), "Era esperado valores iguais, mas  actualDocText é diferente de " + result115 + " <defaultRes.parse().text().length()>")
chamada antiga: assertEquals(49165, smallRes.parse().text().length())
nova chamada: assertEquals(49165, smallRes.parse().text().length(), "Era esperado valores iguais, mas  49165 é diferente de " + result116 + " <smallRes.parse().text().length()>")
chamada antiga: assertEquals(196577, mediumRes.parse().text().length())
nova chamada: assertEquals(196577, mediumRes.parse().text().length(), "Era esperado valores iguais, mas  196577 é diferente de " + result117 + " <mediumRes.parse().text().length()>")
chamada antiga: assertEquals(actualDocText, largeRes.parse().text().length())
nova chamada: assertEquals(actualDocText, largeRes.parse().text().length(), "Era esperado valores iguais, mas  actualDocText é diferente de " + result118 + " <largeRes.parse().text().length()>")
chamada antiga: assertEquals(actualDocText, unlimitedRes.parse().text().length())
nova chamada: assertEquals(actualDocText, unlimitedRes.parse().text().length(), "Era esperado valores iguais, mas  actualDocText é diferente de " + result119 + " <unlimitedRes.parse().text().length()>")
chamada antiga: assertEquals("Large HTML", doc1.title())
nova chamada: assertEquals("Large HTML", doc1.title(), "Era esperado valores iguais, mas  'Large HTML' é diferente de " + result120 + " <doc1.title()>")
chamada antiga: assertEquals("Large HTML", doc2.title())
nova chamada: assertEquals("Large HTML", doc2.title(), "Era esperado valores iguais, mas  'Large HTML' é diferente de " + result121 + " <doc2.title()>")
chamada antiga: assertEquals(actualDocText, defaultRes.body().length())
nova chamada: assertEquals(actualDocText, defaultRes.body().length(), "Era esperado valores iguais, mas  actualDocText é diferente de " + result122 + " <defaultRes.body().length()>")
chamada antiga: assertEquals(50 * 1024, smallRes.body().length())
nova chamada: assertEquals(50 * 1024, smallRes.body().length(), "Era esperado valores iguais, mas  50 * 1024 é diferente de " + result123 + " <smallRes.body().length()>")
chamada antiga: assertEquals(200 * 1024, mediumRes.body().length())
nova chamada: assertEquals(200 * 1024, mediumRes.body().length(), "Era esperado valores iguais, mas  200 * 1024 é diferente de " + result124 + " <mediumRes.body().length()>")
chamada antiga: assertEquals(actualDocText, largeRes.body().length())
nova chamada: assertEquals(actualDocText, largeRes.body().length(), "Era esperado valores iguais, mas  actualDocText é diferente de " + result125 + " <largeRes.body().length()>")
chamada antiga: assertEquals(actualDocText, unlimitedRes.body().length())
nova chamada: assertEquals(actualDocText, unlimitedRes.body().length(), "Era esperado valores iguais, mas  actualDocText é diferente de " + result126 + " <unlimitedRes.body().length()>")
chamada antiga: assertEquals("GBK", doc.outputSettings().charset().displayName())
nova chamada: assertEquals("GBK", doc.outputSettings().charset().displayName(), "Era esperado valores iguais, mas  'GBK' é diferente de " + result127 + " <doc.outputSettings().charset().displayName()>")
chamada antiga: assertEquals("GBK", res.charset())
nova chamada: assertEquals("GBK", res.charset(), "Era esperado valores iguais, mas  'GBK' é diferente de " + result128 + " <res.charset()>")
chamada antiga: assertEquals("text/html;charset=gbk", res.contentType())
nova chamada: assertEquals("text/html;charset=gbk", res.contentType(), "Era esperado valores iguais, mas  'text/html;charset=gbk' é diferente de " + result129 + " <res.contentType()>")
chamada antiga: assertTrue(threw)
nova chamada: assertTrue(threw, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("", doc.title())
nova chamada: assertEquals("", doc.title(), "Era esperado valores iguais, mas  '' é diferente de " + result130 + " <doc.title()>")
chamada antiga: assertTrue(doc.title().contains("jsoup"))
nova chamada: assertTrue(doc.title().contains("jsoup"), "Era esperado verdadeiro, mas " + result131 + " <doc.title().contains('jsoup')> é falso")
chamada antiga: assertTrue(doc.title().contains("jsoup"))
nova chamada: assertTrue(doc.title().contains("jsoup"), "Era esperado verdadeiro, mas " + result132 + " <doc.title().contains('jsoup')> é falso")
chamada antiga: assertEquals("https://jsoup.org/", con.response().url().toString())
nova chamada: assertEquals("https://jsoup.org/", con.response().url().toString(), "Era esperado valores iguais, mas  'https://jsoup.org/' é diferente de " + result133 + " <con.response().url().toString()>")
chamada antiga: assertEquals("https://jsoup.org/", res.url().toExternalForm())
nova chamada: assertEquals("https://jsoup.org/", res.url().toExternalForm(), "Era esperado valores iguais, mas  'https://jsoup.org/' é diferente de " + result134 + " <res.url().toExternalForm()>")
chamada antiga: assertEquals(Connection.Method.GET, res.method())
nova chamada: assertEquals(Connection.Method.GET, res.method(), "Era esperado valores iguais, mas  Connection.Method.GET é diferente de " + result135 + " <res.method()>")
chamada antiga: assertTrue(doc.title().contains("Google"))
nova chamada: assertTrue(doc.title().contains("Google"), "Era esperado verdadeiro, mas " + result136 + " <doc.title().contains('Google')> é falso")
chamada antiga: assertTrue(doc.title().contains("HTML Tidy Online"))
nova chamada: assertTrue(doc.title().contains("HTML Tidy Online"), "Era esperado verdadeiro, mas " + result137 + " <doc.title().contains('HTML Tidy Online')> é falso")
chamada antiga: assertTrue(doc.title().contains("OK"))
nova chamada: assertTrue(doc.title().contains("OK"), "Era esperado verdadeiro, mas " + result138 + " <doc.title().contains('OK')> é falso")
chamada antiga: assertEquals(doc.location(), "http://direct.infohound.net/tools/ok.html")
nova chamada: assertEquals(doc.location(), "http://direct.infohound.net/tools/ok.html", "Era esperado valores iguais, mas " + result139 + " <doc.location()> é diferente de " + " 'http://direct.infohound.net/tools/ok.html'")
chamada antiga: assertEquals(doc.location(), "http://esportspenedes.cat/ep/index.php")
nova chamada: assertEquals(doc.location(), "http://esportspenedes.cat/ep/index.php", "Era esperado valores iguais, mas " + result140 + " <doc.location()> é diferente de " + " 'http://esportspenedes.cat/ep/index.php'")
chamada antiga: assertTrue(doc.title().contains("Google"))
nova chamada: assertTrue(doc.title().contains("Google"), "Era esperado verdadeiro, mas " + result141 + " <doc.title().contains('Google')> é falso")
chamada antiga: assertTrue(true)
nova chamada: assertTrue(true, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(500, res.statusCode())
nova chamada: assertEquals(500, res.statusCode(), "Era esperado valores iguais, mas  500 é diferente de " + result142 + " <res.statusCode()>")
chamada antiga: assertEquals("Application Error", res.statusMessage())
nova chamada: assertEquals("Application Error", res.statusMessage(), "Era esperado valores iguais, mas  'Application Error' é diferente de " + result143 + " <res.statusMessage()>")
chamada antiga: assertEquals("Woops", doc.select("h1").first().text())
nova chamada: assertEquals("Woops", doc.select("h1").first().text(), "Era esperado valores iguais, mas  'Woops' é diferente de " + result144 + " <doc.select('h1').first().text()>")
chamada antiga: assertEquals(500, res.statusCode())
nova chamada: assertEquals(500, res.statusCode(), "Era esperado valores iguais, mas  500 é diferente de " + result145 + " <res.statusCode()>")
chamada antiga: assertEquals("Application Error", res.statusMessage())
nova chamada: assertEquals("Application Error", res.statusMessage(), "Era esperado valores iguais, mas  'Application Error' é diferente de " + result146 + " <res.statusMessage()>")
chamada antiga: assertEquals(200, res.statusCode())
nova chamada: assertEquals(200, res.statusCode(), "Era esperado valores iguais, mas  200 é diferente de " + result147 + " <res.statusCode()>")
chamada antiga: assertEquals("All Good", res.statusMessage())
nova chamada: assertEquals("All Good", res.statusMessage(), "Era esperado valores iguais, mas  'All Good' é diferente de " + result148 + " <res.statusMessage()>")
chamada antiga: assertEquals(200, res.statusCode())
nova chamada: assertEquals(200, res.statusCode(), "Era esperado valores iguais, mas  200 é diferente de " + result149 + " <res.statusCode()>")
chamada antiga: assertEquals(200, res.statusCode())
nova chamada: assertEquals(200, res.statusCode(), "Era esperado valores iguais, mas  200 é diferente de " + result150 + " <res.statusCode()>")
chamada antiga: assertEquals(302, res.statusCode())
nova chamada: assertEquals(302, res.statusCode(), "Era esperado valores iguais, mas  302 é diferente de " + result151 + " <res.statusCode()>")
chamada antiga: assertEquals("http://jsoup.org", res.header("Location"))
nova chamada: assertEquals("http://jsoup.org", res.header("Location"), "Era esperado valores iguais, mas  'http://jsoup.org' é diferente de " + result152 + " <res.header('Location')>")
chamada antiga: assertEquals("asdfg123", res.cookie("token"))
nova chamada: assertEquals("asdfg123", res.cookie("token"), "Era esperado valores iguais, mas  'asdfg123' é diferente de " + result153 + " <res.cookie('token')>")
chamada antiga: assertEquals("token=asdfg123; uid=jhy", ihVal("HTTP_COOKIE", doc))
nova chamada: assertEquals("token=asdfg123; uid=jhy", ihVal("HTTP_COOKIE", doc), "Era esperado valores iguais, mas  'token=asdfg123; uid=jhy' é diferente de " + result154 + " <ihVal('HTTP_COOKIE', doc)>")
chamada antiga: assertTrue(threw)
nova chamada: assertTrue(threw, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("text/html; charset=UFT8", res.header("Content-Type"))
nova chamada: assertEquals("text/html; charset=UFT8", res.header("Content-Type"), "Era esperado valores iguais, mas  'text/html; charset=UFT8' é diferente de " + result155 + " <res.header('Content-Type')>")
chamada antiga: assertNull(res.charset())
nova chamada: assertNull(res.charset(), "Era esperado nulo, mas " + result156 + " <res.charset()> não é nulo")
chamada antiga: assertTrue(doc.text().contains("Hello!"))
nova chamada: assertTrue(doc.text().contains("Hello!"), "Era esperado verdadeiro, mas " + result157 + " <doc.text().contains('Hello!')> é falso")
chamada antiga: assertEquals("UTF-8", res.charset())
nova chamada: assertEquals("UTF-8", res.charset(), "Era esperado valores iguais, mas  'UTF-8' é diferente de " + result158 + " <res.charset()>")
chamada antiga: assertEquals("ISO-8859-1", res.charset())
nova chamada: assertEquals("ISO-8859-1", res.charset(), "Era esperado valores iguais, mas  'ISO-8859-1' é diferente de " + result159 + " <res.charset()>")
chamada antiga: assertEquals("ISO-8859-1", res.charset())
nova chamada: assertEquals("ISO-8859-1", res.charset(), "Era esperado valores iguais, mas  'ISO-8859-1' é diferente de " + result160 + " <res.charset()>")
chamada antiga: assertEquals("UTF-8", res.charset())
nova chamada: assertEquals("UTF-8", res.charset(), "Era esperado valores iguais, mas  'UTF-8' é diferente de " + result161 + " <res.charset()>")
chamada antiga: assertEquals("UTF-8", res.charset())
nova chamada: assertEquals("UTF-8", res.charset(), "Era esperado valores iguais, mas  'UTF-8' é diferente de " + result162 + " <res.charset()>")
chamada antiga: assertEquals("ISO-8859-1", res.charset())
nova chamada: assertEquals("ISO-8859-1", res.charset(), "Era esperado valores iguais, mas  'ISO-8859-1' é diferente de " + result163 + " <res.charset()>")
chamada antiga: assertEquals("https://jsoup.org/", doc.location())
nova chamada: assertEquals("https://jsoup.org/", doc.location(), "Era esperado valores iguais, mas  'https://jsoup.org/' é diferente de " + result164 + " <doc.location()>")
chamada antiga: assertTrue(doc.title().contains("jsoup"))
nova chamada: assertTrue(doc.title().contains("jsoup"), "Era esperado verdadeiro, mas " + result165 + " <doc.title().contains('jsoup')> é falso")
chamada antiga: assertTrue(doc.title().contains("jsoup"))
nova chamada: assertTrue(doc.title().contains("jsoup"), "Era esperado verdadeiro, mas " + result166 + " <doc.title().contains('jsoup')> é falso")
chamada antiga: assertTrue(caught)
nova chamada: assertTrue(caught, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(doc.title().contains("jsoup"))
nova chamada: assertTrue(doc.title().contains("jsoup"), "Era esperado verdadeiro, mas " + result167 + " <doc.title().contains('jsoup')> é falso")
chamada antiga: assertTrue(caught)
nova chamada: assertTrue(caught, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNull(res1.charset())
nova chamada: assertNull(res1.charset(), "Era esperado nulo, mas " + result168 + " <res1.charset()> não é nulo")
chamada antiga: assertEquals("windows-1252", doc1.charset().displayName())
nova chamada: assertEquals("windows-1252", doc1.charset().displayName(), "Era esperado valores iguais, mas  'windows-1252' é diferente de " + result169 + " <doc1.charset().displayName()>")
chamada antiga: assertEquals("Cost is €100", doc1.select("p").text())
nova chamada: assertEquals("Cost is €100", doc1.select("p").text(), "Era esperado valores iguais, mas  'Cost is €100' é diferente de " + result170 + " <doc1.select('p').text()>")
chamada antiga: assertTrue(doc1.text().contains("€"))
nova chamada: assertTrue(doc1.text().contains("€"), "Era esperado verdadeiro, mas " + result171 + " <doc1.text().contains('€')> é falso")
chamada antiga: assertNull(res2.charset())
nova chamada: assertNull(res2.charset(), "Era esperado nulo, mas " + result172 + " <res2.charset()> não é nulo")
chamada antiga: assertEquals("UTF-8", doc2.charset().displayName())
nova chamada: assertEquals("UTF-8", doc2.charset().displayName(), "Era esperado valores iguais, mas  'UTF-8' é diferente de " + result173 + " <doc2.charset().displayName()>")
chamada antiga: assertEquals("Cost is �100", doc2.select("p").text())
nova chamada: assertEquals("Cost is �100", doc2.select("p").text(), "Era esperado valores iguais, mas  'Cost is �100' é diferente de " + result174 + " <doc2.select('p').text()>")
chamada antiga: assertTrue(doc2.text().contains("�"))
nova chamada: assertTrue(doc2.text().contains("�"), "Era esperado verdadeiro, mas " + result175 + " <doc2.text().contains('�')> é falso")
chamada antiga: assertNull(res3.charset())
nova chamada: assertNull(res3.charset(), "Era esperado nulo, mas " + result176 + " <res3.charset()> não é nulo")
chamada antiga: assertEquals("windows-1252", res3.charset())
nova chamada: assertEquals("windows-1252", res3.charset(), "Era esperado valores iguais, mas  'windows-1252' é diferente de " + result177 + " <res3.charset()>")
chamada antiga: assertEquals("windows-1252", doc3.charset().displayName())
nova chamada: assertEquals("windows-1252", doc3.charset().displayName(), "Era esperado valores iguais, mas  'windows-1252' é diferente de " + result178 + " <doc3.charset().displayName()>")
chamada antiga: assertEquals("Cost is €100", doc3.select("p").text())
nova chamada: assertEquals("Cost is €100", doc3.select("p").text(), "Era esperado valores iguais, mas  'Cost is €100' é diferente de " + result179 + " <doc3.select('p').text()>")
chamada antiga: assertTrue(doc3.text().contains("€"))
nova chamada: assertTrue(doc3.text().contains("€"), "Era esperado verdadeiro, mas " + result180 + " <doc3.text().contains('€')> é falso")
chamada antiga: assertEquals(doc.body().text(), "\uD83D\uDCA9!")
nova chamada: assertEquals(doc.body().text(), "\uD83D\uDCA9!", "Era esperado valores iguais, mas " + result181 + " <doc.body().text()> é diferente de " + " '\uD83D\uDCA9!'")
chamada antiga: assertEquals(doc.location(), urlEscaped)
nova chamada: assertEquals(doc.location(), urlEscaped, "Era esperado valores iguais, mas " + result182 + " <doc.location()> é diferente de " + " urlEscaped")
chamada antiga: assertEquals("/tools/test\uD83D\uDCA9.html", res2.header("Location"))
nova chamada: assertEquals("/tools/test\uD83D\uDCA9.html", res2.header("Location"), "Era esperado valores iguais, mas  '/tools/test\uD83D\uDCA9.html' é diferente de " + result183 + " <res2.header('Location')>")
chamada antiga: assertEquals("http://infohound.net/tools/q.pl?q=one%20two", doc.location())
nova chamada: assertEquals("http://infohound.net/tools/q.pl?q=one%20two", doc.location(), "Era esperado valores iguais, mas  'http://infohound.net/tools/q.pl?q=one%20two' é diferente de " + result184 + " <doc.location()>")
chamada antiga: assertEquals("http://infohound.net/tools/q.pl?q=one%20two", doc.location())
nova chamada: assertEquals("http://infohound.net/tools/q.pl?q=one%20two", doc.location(), "Era esperado valores iguais, mas  'http://infohound.net/tools/q.pl?q=one%20two' é diferente de " + result185 + " <doc.location()>")
chamada antiga: assertEquals("\uD83D\uDCA9!", doc.body().text())
nova chamada: assertEquals("\uD83D\uDCA9!", doc.body().text(), "Era esperado valores iguais, mas  '\uD83D\uDCA9!' é diferente de " + result186 + " <doc.body().text()>")
chamada antiga: assertEquals(urlEscaped, doc.location())
nova chamada: assertEquals(urlEscaped, doc.location(), "Era esperado valores iguais, mas  urlEscaped é diferente de " + result187 + " <doc.location()>")
chamada antiga: assertEquals("http://www.omroepbrabant.nl/?news/2474781303/Gestrande+ree+in+Oss+niet+verdoofd,+maar+doodgeschoten+%E2%80%98Dit+kan+gewoon+niet,+bizar%E2%80%99+[VIDEO].aspx", doc.location())
nova chamada: assertEquals("http://www.omroepbrabant.nl/?news/2474781303/Gestrande+ree+in+Oss+niet+verdoofd,+maar+doodgeschoten+%E2%80%98Dit+kan+gewoon+niet,+bizar%E2%80%99+[VIDEO].aspx", doc.location(), "Era esperado valores iguais, mas  'http://www.omroepbrabant.nl/?news/2474781303/Gestrande+ree+in+Oss+niet+verdoofd,+maar+doodgeschoten+%E2%80%98Dit+kan+gewoon+niet,+bizar%E2%80%99+[VIDEO].aspx' é diferente de " + result188 + " <doc.location()>")
chamada antiga: assertEquals("https://saudi.souq.com/sa-en/%D8%AE%D8%B2%D9%86%D8%A9-%D8%A2%D9%85%D9%86%D8%A9-3-%D8%B7%D8%A8%D9%82%D8%A7%D8%AA-%D8%A8%D9%86%D8%B8%D8%A7%D9%85-%D9%82%D9%81%D9%84-%D8%A5%D9%84%D9%83%D8%AA%D8%B1%D9%88%D9%86%D9%8A-bsd11523-6831477/i/?ctype=dsrch", doc.location())
nova chamada: assertEquals("https://saudi.souq.com/sa-en/%D8%AE%D8%B2%D9%86%D8%A9-%D8%A2%D9%85%D9%86%D8%A9-3-%D8%B7%D8%A8%D9%82%D8%A7%D8%AA-%D8%A8%D9%86%D8%B8%D8%A7%D9%85-%D9%82%D9%81%D9%84-%D8%A5%D9%84%D9%83%D8%AA%D8%B1%D9%88%D9%86%D9%8A-bsd11523-6831477/i/?ctype=dsrch", doc.location(), "Era esperado valores iguais, mas  'https://saudi.souq.com/sa-en/%D8%AE%D8%B2%D9%86%D8%A9-%D8%A2%D9%85%D9%86%D8%A9-3-%D8%B7%D8%A8%D9%82%D8%A7%D8%AA-%D8%A8%D9%86%D8%B8%D8%A7%D9%85-%D9%82%D9%81%D9%84-%D8%A5%D9%84%D9%83%D8%AA%D8%B1%D9%88%D9%86%D9%8A-bsd11523-6831477/i/?ctype=dsrch' é diferente de " + result189 + " <doc.location()>")
chamada antiga: assertEquals(200, res.statusCode())
nova chamada: assertEquals(200, res.statusCode(), "Era esperado valores iguais, mas  200 é diferente de " + result190 + " <res.statusCode()>")
chamada antiga: assertEquals("gąska - Szukaj w Google", doc.title())
nova chamada: assertEquals("gąska - Szukaj w Google", doc.title(), "Era esperado valores iguais, mas  'gąska - Szukaj w Google' é diferente de " + result191 + " <doc.title()>")
chamada antiga: assertEquals("Index of /archiv/TV/A/%23No.Title", doc.title())
nova chamada: assertEquals("Index of /archiv/TV/A/%23No.Title", doc.title(), "Era esperado valores iguais, mas  'Index of /archiv/TV/A/%23No.Title' é diferente de " + result192 + " <doc.title()>")
chamada antiga: assertEquals("M2J | Sv.stargate Wiki | FANDOM powered by Wikia", doc.title())
nova chamada: assertEquals("M2J | Sv.stargate Wiki | FANDOM powered by Wikia", doc.title(), "Era esperado valores iguais, mas  'M2J | Sv.stargate Wiki | FANDOM powered by Wikia' é diferente de " + result193 + " <doc.title()>")
chamada antiga: assertEquals(110160, doc.select("dd").size())
nova chamada: assertEquals(110160, doc.select("dd").size(), "Era esperado valores iguais, mas  110160 é diferente de " + result194 + " <doc.select('dd').size()>")
chamada antiga: assertTrue(System.currentTimeMillis() - start < 1000)
nova chamada: assertTrue(System.currentTimeMillis() - start < 1000, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("石嘴山市环境保护局", doc.title())
nova chamada: assertEquals("石嘴山市环境保护局", doc.title(), "Era esperado valores iguais, mas  '石嘴山市环境保护局' é diferente de " + result195 + " <doc.title()>")
chamada antiga: assertEquals("https://xn--rksmrgs-5wao1o.josefsson.org/", doc.location())
nova chamada: assertEquals("https://xn--rksmrgs-5wao1o.josefsson.org/", doc.location(), "Era esperado valores iguais, mas  'https://xn--rksmrgs-5wao1o.josefsson.org/' é diferente de " + result196 + " <doc.location()>")
chamada antiga: assertTrue(doc.title().contains("Räksmörgås.josefßon.org"))
nova chamada: assertTrue(doc.title().contains("Räksmörgås.josefßon.org"), "Era esperado verdadeiro, mas " + result197 + " <doc.title().contains('Räksmörgås.josefßon.org')> é falso")
chamada antiga: assertEquals("The board’s next fear: the female quota", doc.title())
nova chamada: assertEquals("The board’s next fear: the female quota", doc.title(), "Era esperado valores iguais, mas  'The board’s next fear: the female quota' é diferente de " + result198 + " <doc.title()>")
chamada antiga: assertEquals("en", doc.select("html").attr("xml:lang"))
nova chamada: assertEquals("en", doc.select("html").attr("xml:lang"), "Era esperado valores iguais, mas  'en' é diferente de " + result199 + " <doc.select('html').attr('xml:lang')>")
chamada antiga: assertEquals(17, articleBody.size())
nova chamada: assertEquals(17, articleBody.size(), "Era esperado valores iguais, mas  17 é diferente de " + result200 + " <articleBody.size()>")
chamada antiga: assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title())
nova chamada: assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title(), "Era esperado valores iguais, mas  'News.com.au | News from Australia and around the world online | NewsComAu' é diferente de " + result201 + " <doc.title()>")
chamada antiga: assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim())
nova chamada: assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim(), "Era esperado valores iguais, mas  'Brace yourself for Metro meltdown' é diferente de " + result202 + " <doc.select('.id1225817868581 h4').text().trim()>")
chamada antiga: assertEquals("/entertainment/horoscopes", a.attr("href"))
nova chamada: assertEquals("/entertainment/horoscopes", a.attr("href"), "Era esperado valores iguais, mas  '/entertainment/horoscopes' é diferente de " + result203 + " <a.attr('href')>")
chamada antiga: assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href"))
nova chamada: assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href"), "Era esperado valores iguais, mas  'http://www.news.com.au/entertainment/horoscopes' é diferente de " + result204 + " <a.attr('abs:href')>")
chamada antiga: assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href"))
nova chamada: assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href"), "Era esperado valores iguais, mas  'http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003' é diferente de " + result205 + " <hs.attr('href')>")
chamada antiga: assertEquals(hs.attr("href"), hs.attr("abs:href"))
nova chamada: assertEquals(hs.attr("href"), hs.attr("abs:href"), "Era esperado valores iguais, mas " + result206 + " <hs.attr('href')> é diferente de " + result207 + " <hs.attr('abs:href')>")
chamada antiga: assertEquals("ipod - Google Search", doc.title())
nova chamada: assertEquals("ipod - Google Search", doc.title(), "Era esperado valores iguais, mas  'ipod - Google Search' é diferente de " + result208 + " <doc.title()>")
chamada antiga: assertEquals(12, results.size())
nova chamada: assertEquals(12, results.size(), "Era esperado valores iguais, mas  12 é diferente de " + result209 + " <results.size()>")
chamada antiga: assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href"))
nova chamada: assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href"), "Era esperado valores iguais, mas  'http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA' é diferente de " + result210 + " <results.get(0).attr('href')>")
chamada antiga: assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href"))
nova chamada: assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href"), "Era esperado valores iguais, mas  'http://www.apple.com/itunes/' é diferente de " + result211 + " <results.get(1).attr('href')>")
chamada antiga: assertEquals("Yahoo! JAPAN", doc.title())
nova chamada: assertEquals("Yahoo! JAPAN", doc.title(), "Era esperado valores iguais, mas  'Yahoo! JAPAN' é diferente de " + result212 + " <doc.title()>")
chamada antiga: assertEquals("http://www.yahoo.co.jp/_ylh=X3oDMTB0NWxnaGxsBF9TAzIwNzcyOTYyNjUEdGlkAzEyBHRtcGwDZ2Ex/t/2322m2", a.attr("abs:href"))
nova chamada: assertEquals("http://www.yahoo.co.jp/_ylh=X3oDMTB0NWxnaGxsBF9TAzIwNzcyOTYyNjUEdGlkAzEyBHRtcGwDZ2Ex/t/2322m2", a.attr("abs:href"), "Era esperado valores iguais, mas  'http://www.yahoo.co.jp/_ylh=X3oDMTB0NWxnaGxsBF9TAzIwNzcyOTYyNjUEdGlkAzEyBHRtcGwDZ2Ex/t/2322m2' é diferente de " + result213 + " <a.attr('abs:href')>")
chamada antiga: assertEquals("全国、人気の駅ランキング", a.text())
nova chamada: assertEquals("全国、人気の駅ランキング", a.text(), "Era esperado valores iguais, mas  '全国、人気の駅ランキング' é diferente de " + result214 + " <a.text()>")
chamada antiga: assertEquals("百度一下", submit.attr("value"))
nova chamada: assertEquals("百度一下", submit.attr("value"), "Era esperado valores iguais, mas  '百度一下' é diferente de " + result215 + " <submit.attr('value')>")
chamada antiga: assertEquals("su", submit.id())
nova chamada: assertEquals("su", submit.id(), "Era esperado valores iguais, mas  'su' é diferente de " + result216 + " <submit.id()>")
chamada antiga: assertEquals("http://news.baidu.com", newsLink.absUrl("href"))
nova chamada: assertEquals("http://news.baidu.com", newsLink.absUrl("href"), "Era esperado valores iguais, mas  'http://news.baidu.com' é diferente de " + result217 + " <newsLink.absUrl('href')>")
chamada antiga: assertEquals("GB2312", doc.outputSettings().charset().displayName())
nova chamada: assertEquals("GB2312", doc.outputSettings().charset().displayName(), "Era esperado valores iguais, mas  'GB2312' é diferente de " + result218 + " <doc.outputSettings().charset().displayName()>")
chamada antiga: assertEquals("<title>百度一下，你就知道      </title>", doc.select("title").outerHtml())
nova chamada: assertEquals("<title>百度一下，你就知道      </title>", doc.select("title").outerHtml(), "Era esperado valores iguais, mas  'title百度一下，你就知道      /title' é diferente de " + result219 + " <doc.select('title').outerHtml()>")
chamada antiga: assertEquals("<title>&#x767e;&#x5ea6;&#x4e00;&#x4e0b;&#xff0c;&#x4f60;&#x5c31;&#x77e5;&#x9053;      </title>", doc.select("title").outerHtml())
nova chamada: assertEquals("<title>&#x767e;&#x5ea6;&#x4e00;&#x4e0b;&#xff0c;&#x4f60;&#x5c31;&#x77e5;&#x9053;      </title>", doc.select("title").outerHtml(), "Era esperado valores iguais, mas  'title&#x767e;&#x5ea6;&#x4e00;&#x4e0b;&#xff0c;&#x4f60;&#x5c31;&#x77e5;&#x9053;      /title' é diferente de " + result220 + " <doc.select('title').outerHtml()>")
chamada antiga: assertEquals("GB2312", doc.outputSettings().charset().displayName())
nova chamada: assertEquals("GB2312", doc.outputSettings().charset().displayName(), "Era esperado valores iguais, mas  'GB2312' é diferente de " + result221 + " <doc.outputSettings().charset().displayName()>")
chamada antiga: assertEquals("<title>百度一下，你就知道</title>", doc.select("title").outerHtml())
nova chamada: assertEquals("<title>百度一下，你就知道</title>", doc.select("title").outerHtml(), "Era esperado valores iguais, mas  'title百度一下，你就知道/title' é diferente de " + result222 + " <doc.select('title').outerHtml()>")
chamada antiga: assertEquals("新", doc.text())
nova chamada: assertEquals("新", doc.text(), "Era esperado valores iguais, mas  '新' é diferente de " + result223 + " <doc.text()>")
chamada antiga: assertEquals("GB2312", doc.outputSettings().charset().displayName())
nova chamada: assertEquals("GB2312", doc.outputSettings().charset().displayName(), "Era esperado valores iguais, mas  'GB2312' é diferente de " + result224 + " <doc.outputSettings().charset().displayName()>")
chamada antiga: assertEquals("UTF-8", doc.outputSettings().charset().displayName())
nova chamada: assertEquals("UTF-8", doc.outputSettings().charset().displayName(), "Era esperado valores iguais, mas  'UTF-8' é diferente de " + result225 + " <doc.outputSettings().charset().displayName()>")
chamada antiga: assertNotEquals("新", doc.text())
nova chamada: assertNotEquals("新", doc.text(), "Era esperado valores diferentes, mas  '新' é igual a " + result226 + " <doc.text()>")
chamada antiga: assertEquals("UTF-8", doc.outputSettings().charset().displayName())
nova chamada: assertEquals("UTF-8", doc.outputSettings().charset().displayName(), "Era esperado valores iguais, mas  'UTF-8' é diferente de " + result227 + " <doc.outputSettings().charset().displayName()>")
chamada antiga: assertEquals("新", doc.text())
nova chamada: assertEquals("新", doc.text(), "Era esperado valores iguais, mas  '新' é diferente de " + result228 + " <doc.text()>")
chamada antiga: assertEquals("UTF-8", doc.outputSettings().charset().displayName())
nova chamada: assertEquals("UTF-8", doc.outputSettings().charset().displayName(), "Era esperado valores iguais, mas  'UTF-8' é diferente de " + result229 + " <doc.outputSettings().charset().displayName()>")
chamada antiga: assertEquals("As BP Lays Out Future, It Will Not Include Hayward", headline.text())
nova chamada: assertEquals("As BP Lays Out Future, It Will Not Include Hayward", headline.text(), "Era esperado valores iguais, mas  'As BP Lays Out Future, It Will Not Include Hayward' é diferente de " + result230 + " <headline.text()>")
chamada antiga: assertEquals("In July, GM said its electric Chevrolet Volt will be sold in the United States at $41,000 -- $8,000 more than its nearest competitor, the Nissan Leaf.", p.text())
nova chamada: assertEquals("In July, GM said its electric Chevrolet Volt will be sold in the United States at $41,000 -- $8,000 more than its nearest competitor, the Nissan Leaf.", p.text(), "Era esperado valores iguais, mas  'In July, GM said its electric Chevrolet Volt will be sold in the United States at $41,000 -- $8,000 more than its nearest competitor, the Nissan Leaf.' é diferente de " + result231 + " <p.text()>")
chamada antiga: assertEquals(2, form.children().size())
nova chamada: assertEquals(2, form.children().size(), "Era esperado valores iguais, mas  2 é diferente de " + result232 + " <form.children().size()>")
chamada antiga: assertEquals("UTF-8", doc.outputSettings().charset().name())
nova chamada: assertEquals("UTF-8", doc.outputSettings().charset().name(), "Era esperado valores iguais, mas  'UTF-8' é diferente de " + result233 + " <doc.outputSettings().charset().name()>")
chamada antiga: assertEquals("XWiki Jetty HSQLDB 12.1-SNAPSHOT", doc.select("#xwikiplatformversion").text())
nova chamada: assertEquals("XWiki Jetty HSQLDB 12.1-SNAPSHOT", doc.select("#xwikiplatformversion").text(), "Era esperado valores iguais, mas  'XWiki Jetty HSQLDB 12.1-SNAPSHOT' é diferente de " + result234 + " <doc.select('#xwikiplatformversion').text()>")
chamada antiga: assertEquals(wantHtml, doc.select("[data-id=userdirectory]").outerHtml())
nova chamada: assertEquals(wantHtml, doc.select("[data-id=userdirectory]").outerHtml(), "Era esperado valores iguais, mas  wantHtml é diferente de " + result235 + " <doc.select('[data-id=userdirectory]').outerHtml()>")
chamada antiga: assertEquals("XWiki Jetty HSQLDB 12.1-SNAPSHOT", doc.select("#xwikiplatformversion").text())
nova chamada: assertEquals("XWiki Jetty HSQLDB 12.1-SNAPSHOT", doc.select("#xwikiplatformversion").text(), "Era esperado valores iguais, mas  'XWiki Jetty HSQLDB 12.1-SNAPSHOT' é diferente de " + result236 + " <doc.select('#xwikiplatformversion').text()>")
chamada antiga: assertEquals(0, errors.size())
nova chamada: assertEquals(0, errors.size(), "Era esperado valores iguais, mas  0 é diferente de " + result237 + " <errors.size()>")
chamada antiga: assertTrue(doc.select("[data-id=userdirectory]").outerHtml().startsWith(wantHtml))
nova chamada: assertTrue(doc.select("[data-id=userdirectory]").outerHtml().startsWith(wantHtml), "Era esperado verdadeiro, mas " + result238 + " <doc.select('[data-id=userdirectory]').outerHtml().startsWith(wantHtml)> é falso")
chamada antiga: assertEquals("XWiki Jetty HSQLDB 12.1-SNAPSHOT", doc.select("#xwikiplatformversion").text())
nova chamada: assertEquals("XWiki Jetty HSQLDB 12.1-SNAPSHOT", doc.select("#xwikiplatformversion").text(), "Era esperado valores iguais, mas  'XWiki Jetty HSQLDB 12.1-SNAPSHOT' é diferente de " + result239 + " <doc.select('#xwikiplatformversion').text()>")
chamada antiga: assertTrue(doc.select("[data-id=userdirectory]").outerHtml().startsWith(wantHtml))
nova chamada: assertTrue(doc.select("[data-id=userdirectory]").outerHtml().startsWith(wantHtml), "Era esperado verdadeiro, mas " + result240 + " <doc.select('[data-id=userdirectory]').outerHtml().startsWith(wantHtml)> é falso")
chamada antiga: assertEquals("XWiki Jetty HSQLDB 12.1-SNAPSHOT", doc.select("#xwikiplatformversion").text())
nova chamada: assertEquals("XWiki Jetty HSQLDB 12.1-SNAPSHOT", doc.select("#xwikiplatformversion").text(), "Era esperado valores iguais, mas  'XWiki Jetty HSQLDB 12.1-SNAPSHOT' é diferente de " + result241 + " <doc.select('#xwikiplatformversion').text()>")
chamada antiga: assertEquals(wantHtml, doc.select("[data-id=userdirectory]").outerHtml())
nova chamada: assertEquals(wantHtml, doc.select("[data-id=userdirectory]").outerHtml(), "Era esperado valores iguais, mas  wantHtml é diferente de " + result242 + " <doc.select('[data-id=userdirectory]').outerHtml()>")
chamada antiga: assertEquals("XWiki Jetty HSQLDB 12.1-SNAPSHOT", doc.select("#xwikiplatformversion").text())
nova chamada: assertEquals("XWiki Jetty HSQLDB 12.1-SNAPSHOT", doc.select("#xwikiplatformversion").text(), "Era esperado valores iguais, mas  'XWiki Jetty HSQLDB 12.1-SNAPSHOT' é diferente de " + result243 + " <doc.select('#xwikiplatformversion').text()>")
chamada antiga: assertEquals(0, doc1.select("table tr").size())
nova chamada: assertEquals(0, doc1.select("table tr").size(), "Era esperado valores iguais, mas  0 é diferente de " + result244 + " <doc1.select('table tr').size()>")
chamada antiga: assertEquals(0, doc2.select("table tr").size())
nova chamada: assertEquals(0, doc2.select("table tr").size(), "Era esperado valores iguais, mas  0 é diferente de " + result245 + " <doc2.select('table tr').size()>")
chamada antiga: assertEquals(1, cookies.size())
nova chamada: assertEquals(1, cookies.size(), "Era esperado valores iguais, mas  1 é diferente de " + result246 + " <cookies.size()>")
chamada antiga: assertEquals("Root", cookies.get("One"))
nova chamada: assertEquals("Root", cookies.get("One"), "Era esperado valores iguais, mas  'Root' é diferente de " + result247 + " <cookies.get('One')>")
chamada antiga: assertEquals(userAgent, keyText("User-Agent", echo))
nova chamada: assertEquals(userAgent, keyText("User-Agent", echo), "Era esperado valores iguais, mas  userAgent é diferente de " + result248 + " <keyText('User-Agent', echo)>")
chamada antiga: assertEquals(0, doc4.select("table tr").size())
nova chamada: assertEquals(0, doc4.select("table tr").size(), "Era esperado valores iguais, mas  0 é diferente de " + result249 + " <doc4.select('table tr').size()>")
chamada antiga: assertEquals("Qux", doc5Bar.first().text())
nova chamada: assertEquals("Qux", doc5Bar.first().text(), "Era esperado valores iguais, mas  'Qux' é diferente de " + result250 + " <doc5Bar.first().text()>")
chamada antiga: assertEquals(2, doc.select("table tr").size())
nova chamada: assertEquals(2, doc.select("table tr").size(), "Era esperado valores iguais, mas  2 é diferente de " + result251 + " <doc.select('table tr').size()>")
chamada antiga: assertEquals(2, doc3Els.size())
nova chamada: assertEquals(2, doc3Els.size(), "Era esperado valores iguais, mas  2 é diferente de " + result252 + " <doc3Els.size()>")
chamada antiga: assertEquals("CookieServlet", doc3Els.get(0).text())
nova chamada: assertEquals("CookieServlet", doc3Els.get(0).text(), "Era esperado valores iguais, mas  'CookieServlet' é diferente de " + result253 + " <doc3Els.get(0).text()>")
chamada antiga: assertEquals("Root", doc3Els.get(1).text())
nova chamada: assertEquals("Root", doc3Els.get(1).text(), "Era esperado valores iguais, mas  'Root' é diferente de " + result254 + " <doc3Els.get(1).text()>")
chamada antiga: assertEquals(2, echoEls.size())
nova chamada: assertEquals(2, echoEls.size(), "Era esperado valores iguais, mas  2 é diferente de " + result255 + " <echoEls.size()>")
chamada antiga: assertEquals("EchoServlet", echoEls.get(0).text())
nova chamada: assertEquals("EchoServlet", echoEls.get(0).text(), "Era esperado valores iguais, mas  'EchoServlet' é diferente de " + result256 + " <echoEls.get(0).text()>")
chamada antiga: assertEquals("Root", echoEls.get(1).text())
nova chamada: assertEquals("Root", echoEls.get(1).text(), "Era esperado valores iguais, mas  'Root' é diferente de " + result257 + " <echoEls.get(1).text()>")
chamada antiga: assertEquals(EchoServlet.Url, doc1.location())
nova chamada: assertEquals(EchoServlet.Url, doc1.location(), "Era esperado valores iguais, mas  EchoServlet.Url é diferente de " + result258 + " <doc1.location()>")
chamada antiga: assertEquals(xmlVal, doc1.html())
nova chamada: assertEquals(xmlVal, doc1.html(), "Era esperado valores iguais, mas  xmlVal é diferente de " + result259 + " <doc1.html()>")
chamada antiga: assertTrue(doc2.html().startsWith("<html>"))
nova chamada: assertTrue(doc2.html().startsWith("<html>"), "Era esperado verdadeiro, mas " + result260 + " <doc2.html().startsWith('<html>')> é falso")
chamada antiga: assertEquals(xmlVal, doc3.html())
nova chamada: assertEquals(xmlVal, doc3.html(), "Era esperado valores iguais, mas  xmlVal é diferente de " + result261 + " <doc3.html()>")
chamada antiga: assertEquals("<p><opentag openattr=\"\">Hello</opentag></p>", TextUtil.stripNewlines(openClean))
nova chamada: assertEquals("<p><opentag openattr=\"\">Hello</opentag></p>", TextUtil.stripNewlines(openClean), "Era esperado valores iguais, mas  'popentag openattr=\'\'Hello/opentag/p' é diferente de " + result262 + " <TextUtil.stripNewlines(openClean)>")
chamada antiga: assertEquals("<p>Hello</p>", clean)
nova chamada: assertEquals("<p>Hello</p>", clean, "Era esperado valores iguais, mas  'pHello/p' é diferente de " + " clean")
chamada antiga: assertNotEquals(p1, p2)
nova chamada: assertNotEquals(p1, p2, "Era esperado valores diferentes, mas  p1 é igual a " + " p2")
chamada antiga: assertSame(script1, script2)
nova chamada: assertSame(script1, script2, "Era esperado objetos iguais, mas  script1 é diferente de " + " script2")
chamada antiga: assertEquals(p1, p2)
nova chamada: assertEquals(p1, p2, "Era esperado valores iguais, mas  p1 é diferente de " + " p2")
chamada antiga: assertEquals(p1, p2)
nova chamada: assertEquals(p1, p2, "Era esperado valores iguais, mas  p1 é diferente de " + " p2")
chamada antiga: assertSame(p1, p2)
nova chamada: assertSame(p1, p2, "Era esperado objetos iguais, mas  p1 é diferente de " + " p2")
chamada antiga: assertTrue(div.isBlock())
nova chamada: assertTrue(div.isBlock(), "Era esperado verdadeiro, mas " + result263 + " <div.isBlock()> é falso")
chamada antiga: assertTrue(div.formatAsBlock())
nova chamada: assertTrue(div.formatAsBlock(), "Era esperado verdadeiro, mas " + result264 + " <div.formatAsBlock()> é falso")
chamada antiga: assertTrue(p.isBlock())
nova chamada: assertTrue(p.isBlock(), "Era esperado verdadeiro, mas " + result265 + " <p.isBlock()> é falso")
chamada antiga: assertTrue(img.isInline())
nova chamada: assertTrue(img.isInline(), "Era esperado verdadeiro, mas " + result266 + " <img.isInline()> é falso")
chamada antiga: assertTrue(img.isSelfClosing())
nova chamada: assertTrue(img.isSelfClosing(), "Era esperado verdadeiro, mas " + result267 + " <img.isSelfClosing()> é falso")
chamada antiga: assertEquals(foo, foo2)
nova chamada: assertEquals(foo, foo2, "Era esperado valores iguais, mas  foo é diferente de " + " foo2")
chamada antiga: assertTrue(foo.isInline())
nova chamada: assertTrue(foo.isInline(), "Era esperado verdadeiro, mas " + result268 + " <foo.isInline()> é falso")
chamada antiga: assertTrue(foo.formatAsBlock())
nova chamada: assertTrue(foo.formatAsBlock(), "Era esperado verdadeiro, mas " + result269 + " <foo.formatAsBlock()> é falso")
chamada antiga: assertTrue(Tag.isKnownTag("div"))
nova chamada: assertTrue(Tag.isKnownTag("div"), "Era esperado verdadeiro, mas " + result270 + " <Tag.isKnownTag('div')> é falso")
chamada antiga: assertEquals("<doc id=\"2\" href=\"/bar\">Foo <br /><link>One</link><link>Two</link></doc>", TextUtil.stripNewlines(doc.html()))
nova chamada: assertEquals("<doc id=\"2\" href=\"/bar\">Foo <br /><link>One</link><link>Two</link></doc>", TextUtil.stripNewlines(doc.html()), "Era esperado valores iguais, mas  'doc id=\'2\' href=\'/bar\'Foo br /linkOne/linklinkTwo/link/doc' é diferente de " + result271 + " <TextUtil.stripNewlines(doc.html())>")
chamada antiga: assertEquals(doc.getElementById("2").absUrl("href"), "http://foo.com/bar")
nova chamada: assertEquals(doc.getElementById("2").absUrl("href"), "http://foo.com/bar", "Era esperado valores iguais, mas " + result272 + " <doc.getElementById('2').absUrl('href')> é diferente de " + " 'http://foo.com/bar'")
chamada antiga: assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", TextUtil.stripNewlines(doc.html()))
nova chamada: assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", TextUtil.stripNewlines(doc.html()), "Era esperado valores iguais, mas  'docvalOnevalTwo/valThree/val/doc' é diferente de " + result273 + " <TextUtil.stripNewlines(doc.html())>")
chamada antiga: assertEquals("<!DOCTYPE HTML><!-- a comment -->One <qux />Two", TextUtil.stripNewlines(doc.html()))
nova chamada: assertEquals("<!DOCTYPE HTML><!-- a comment -->One <qux />Two", TextUtil.stripNewlines(doc.html()), "Era esperado valores iguais, mas  '!DOCTYPE HTML!-- a comment --One qux /Two' é diferente de " + result274 + " <TextUtil.stripNewlines(doc.html())>")
chamada antiga: assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", TextUtil.stripNewlines(doc.html()))
nova chamada: assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", TextUtil.stripNewlines(doc.html()), "Era esperado valores iguais, mas  'docvalOnevalTwo/valThree/val/doc' é diferente de " + result275 + " <TextUtil.stripNewlines(doc.html())>")
chamada antiga: assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", TextUtil.stripNewlines(xmlDoc.html()))
nova chamada: assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", TextUtil.stripNewlines(xmlDoc.html()), "Era esperado valores iguais, mas  'docvalOnevalTwo/valThree/val/doc' é diferente de " + result276 + " <TextUtil.stripNewlines(xmlDoc.html())>")
chamada antiga: assertNotEquals(htmlDoc, xmlDoc)
nova chamada: assertNotEquals(htmlDoc, xmlDoc, "Era esperado valores diferentes, mas  htmlDoc é igual a " + " xmlDoc")
chamada antiga: assertEquals(xmlDoc, autoXmlDoc)
nova chamada: assertEquals(xmlDoc, autoXmlDoc, "Era esperado valores iguais, mas  xmlDoc é diferente de " + " autoXmlDoc")
chamada antiga: assertEquals(1, htmlDoc.select("head").size())
nova chamada: assertEquals(1, htmlDoc.select("head").size(), "Era esperado valores iguais, mas  1 é diferente de " + result277 + " <htmlDoc.select('head').size()>")
chamada antiga: assertEquals(0, xmlDoc.select("head").size())
nova chamada: assertEquals(0, xmlDoc.select("head").size(), "Era esperado valores iguais, mas  0 é diferente de " + result278 + " <xmlDoc.select('head').size()>")
chamada antiga: assertEquals(0, autoXmlDoc.select("head").size())
nova chamada: assertEquals(0, autoXmlDoc.select("head").size(), "Era esperado valores iguais, mas  0 é diferente de " + result279 + " <autoXmlDoc.select('head').size()>")
chamada antiga: assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", TextUtil.stripNewlines(doc.html()))
nova chamada: assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", TextUtil.stripNewlines(doc.html()), "Era esperado valores iguais, mas  'docvalOnevalTwo/valThree/val/doc' é diferente de " + result280 + " <TextUtil.stripNewlines(doc.html())>")
chamada antiga: assertEquals("<br>one<br>", htmlDoc.body().html())
nova chamada: assertEquals("<br>one<br>", htmlDoc.body().html(), "Era esperado valores iguais, mas  'bronebr' é diferente de " + result281 + " <htmlDoc.body().html()>")
chamada antiga: assertEquals("<br>one</br>", xmlDoc.html())
nova chamada: assertEquals("<br>one</br>", xmlDoc.html(), "Era esperado valores iguais, mas  'brone/br' é diferente de " + result282 + " <xmlDoc.html()>")
chamada antiga: assertEquals("<?xml encoding=\"UTF-8\"?><body>One</body><!-- comment -->", doc.outerHtml())
nova chamada: assertEquals("<?xml encoding=\"UTF-8\"?><body>One</body><!-- comment -->", doc.outerHtml(), "Era esperado valores iguais, mas  '?xml encoding=\'UTF-8\'?bodyOne/body!-- comment --' é diferente de " + result283 + " <doc.outerHtml()>")
chamada antiga: assertEquals("#declaration", doc.childNode(0).nodeName())
nova chamada: assertEquals("#declaration", doc.childNode(0).nodeName(), "Era esperado valores iguais, mas  '#declaration' é diferente de " + result284 + " <doc.childNode(0).nodeName()>")
chamada antiga: assertEquals("#comment", doc.childNode(2).nodeName())
nova chamada: assertEquals("#comment", doc.childNode(2).nodeName(), "Era esperado valores iguais, mas  '#comment' é diferente de " + result285 + " <doc.childNode(2).nodeName()>")
chamada antiga: assertEquals(3, nodes.size())
nova chamada: assertEquals(3, nodes.size(), "Era esperado valores iguais, mas  3 é diferente de " + result286 + " <nodes.size()>")
chamada antiga: assertEquals("http://example.com/foo/", nodes.get(0).absUrl("src"))
nova chamada: assertEquals("http://example.com/foo/", nodes.get(0).absUrl("src"), "Era esperado valores iguais, mas  'http://example.com/foo/' é diferente de " + result287 + " <nodes.get(0).absUrl('src')>")
chamada antiga: assertEquals("one", nodes.get(0).nodeName())
nova chamada: assertEquals("one", nodes.get(0).nodeName(), "Era esperado valores iguais, mas  'one' é diferente de " + result288 + " <nodes.get(0).nodeName()>")
chamada antiga: assertEquals("Two", ((TextNode) nodes.get(1)).text())
nova chamada: assertEquals("Two", ((TextNode) nodes.get(1)).text(), "Era esperado valores iguais, mas  'Two' é diferente de " + result289 + " <((TextNode) nodes.get(1)).text()>")
chamada antiga: assertEquals(Syntax.xml, doc.outputSettings().syntax())
nova chamada: assertEquals(Syntax.xml, doc.outputSettings().syntax(), "Era esperado valores iguais, mas  Syntax.xml é diferente de " + result290 + " <doc.outputSettings().syntax()>")
chamada antiga: assertEquals("<img src=\"asdf\" onerror=\"alert(1)\" x=\"\" />", xmlDoc.html())
nova chamada: assertEquals("<img src=\"asdf\" onerror=\"alert(1)\" x=\"\" />", xmlDoc.html(), "Era esperado valores iguais, mas  'img src=\'asdf\' onerror=\'alert(1)\' x=\'\' /' é diferente de " + result291 + " <xmlDoc.html()>")
chamada antiga: assertEquals("ISO-8859-1", doc.charset().name())
nova chamada: assertEquals("ISO-8859-1", doc.charset().name(), "Era esperado valores iguais, mas  'ISO-8859-1' é diferente de " + result292 + " <doc.charset().name()>")
chamada antiga: assertEquals("<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?><data>äöåéü</data>", TextUtil.stripNewlines(doc.html()))
nova chamada: assertEquals("<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?><data>äöåéü</data>", TextUtil.stripNewlines(doc.html()), "Era esperado valores iguais, mas  '?xml version=\'1.0\' encoding=\'ISO-8859-1\'?dataäöåéü/data' é diferente de " + result293 + " <TextUtil.stripNewlines(doc.html())>")
chamada antiga: assertEquals("1", decl.attr("version"))
nova chamada: assertEquals("1", decl.attr("version"), "Era esperado valores iguais, mas  '1' é diferente de " + result294 + " <decl.attr('version')>")
chamada antiga: assertEquals("UTF-8", decl.attr("encoding"))
nova chamada: assertEquals("UTF-8", decl.attr("encoding"), "Era esperado valores iguais, mas  'UTF-8' é diferente de " + result295 + " <decl.attr('encoding')>")
chamada antiga: assertEquals("else", decl.attr("something"))
nova chamada: assertEquals("else", decl.attr("something"), "Era esperado valores iguais, mas  'else' é diferente de " + result296 + " <decl.attr('something')>")
chamada antiga: assertEquals("version=\"1\" encoding=\"UTF-8\" something=\"else\"", decl.getWholeDeclaration())
nova chamada: assertEquals("version=\"1\" encoding=\"UTF-8\" something=\"else\"", decl.getWholeDeclaration(), "Era esperado valores iguais, mas  'version=\'1\' encoding=\'UTF-8\' something=\'else\'' é diferente de " + result297 + " <decl.getWholeDeclaration()>")
chamada antiga: assertEquals("<?xml version=\"1\" encoding=\"UTF-8\" something=\"else\"?>", decl.outerHtml())
nova chamada: assertEquals("<?xml version=\"1\" encoding=\"UTF-8\" something=\"else\"?>", decl.outerHtml(), "Era esperado valores iguais, mas  '?xml version=\'1\' encoding=\'UTF-8\' something=\'else\'?' é diferente de " + result298 + " <decl.outerHtml()>")
chamada antiga: assertEquals("myProcessingInstruction", decl.name())
nova chamada: assertEquals("myProcessingInstruction", decl.name(), "Era esperado valores iguais, mas  'myProcessingInstruction' é diferente de " + result299 + " <decl.name()>")
chamada antiga: assertTrue(decl.hasAttr("My"))
nova chamada: assertTrue(decl.hasAttr("My"), "Era esperado verdadeiro, mas " + result300 + " <decl.hasAttr('My')> é falso")
chamada antiga: assertEquals("<?myProcessingInstruction My Processing instruction.?>", decl.outerHtml())
nova chamada: assertEquals("<?myProcessingInstruction My Processing instruction.?>", decl.outerHtml(), "Era esperado valores iguais, mas  '?myProcessingInstruction My Processing instruction.?' é diferente de " + result301 + " <decl.outerHtml()>")
chamada antiga: assertEquals("<?XML version=\"1\" encoding=\"UTF-8\" something=\"else\"?>", doc.outerHtml())
nova chamada: assertEquals("<?XML version=\"1\" encoding=\"UTF-8\" something=\"else\"?>", doc.outerHtml(), "Era esperado valores iguais, mas  '?XML version=\'1\' encoding=\'UTF-8\' something=\'else\'?' é diferente de " + result302 + " <doc.outerHtml()>")
chamada antiga: assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + "<html>\n" + " <head></head>\n" + " <body></body>\n" + "</html>", document.outerHtml())
nova chamada: assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + "<html>\n" + " <head></head>\n" + " <body></body>\n" + "</html>", document.outerHtml(), "Era esperado valores iguais, mas  '?xml version=\'1.0\' encoding=\'UTF-8\'?\n' + 'html\n' + ' head/head\n' + ' body/body\n' + '/html' é diferente de " + result303 + " <document.outerHtml()>")
chamada antiga: assertEquals("<CHECK>One</CHECK><TEST ID=\"1\">Check</TEST>", TextUtil.stripNewlines(doc.html()))
nova chamada: assertEquals("<CHECK>One</CHECK><TEST ID=\"1\">Check</TEST>", TextUtil.stripNewlines(doc.html()), "Era esperado valores iguais, mas  'CHECKOne/CHECKTEST ID=\'1\'Check/TEST' é diferente de " + result304 + " <TextUtil.stripNewlines(doc.html())>")
chamada antiga: assertEquals("<One>One<Two ID=\"2\">Two</Two></One>", TextUtil.stripNewlines(doc.html()))
nova chamada: assertEquals("<One>One<Two ID=\"2\">Two</Two></One>", TextUtil.stripNewlines(doc.html()), "Era esperado valores iguais, mas  'OneOneTwo ID=\'2\'Two/Two/One' é diferente de " + result305 + " <TextUtil.stripNewlines(doc.html())>")
chamada antiga: assertEquals(xml, doc.html())
nova chamada: assertEquals(xml, doc.html(), "Era esperado valores iguais, mas  xml é diferente de " + result306 + " <doc.html()>")
chamada antiga: assertEquals("<test id=\"1\">Check</test>", TextUtil.stripNewlines(doc.html()))
nova chamada: assertEquals("<test id=\"1\">Check</test>", TextUtil.stripNewlines(doc.html()), "Era esperado valores iguais, mas  'test id=\'1\'Check/test' é diferente de " + result307 + " <TextUtil.stripNewlines(doc.html())>")
chamada antiga: assertEquals("<div>test</div><p></p>", document.html())
nova chamada: assertEquals("<div>test</div><p></p>", document.html(), "Era esperado valores iguais, mas  'divtest/divp/p' é diferente de " + result308 + " <document.html()>")
chamada antiga: assertEquals("<html>\n <foo><&amp;", div.text())
nova chamada: assertEquals("<html>\n <foo><&amp;", div.text(), "Era esperado valores iguais, mas  'html\n foo&amp;' é diferente de " + result309 + " <div.text()>")
chamada antiga: assertEquals(0, div.children().size())
nova chamada: assertEquals(0, div.children().size(), "Era esperado valores iguais, mas  0 é diferente de " + result310 + " <div.children().size()>")
chamada antiga: assertEquals(1, div.childNodeSize())
nova chamada: assertEquals(1, div.childNodeSize(), "Era esperado valores iguais, mas  1 é diferente de " + result311 + " <div.childNodeSize()>")
chamada antiga: assertEquals("<div id=\"1\"><![CDATA[\n<html>\n <foo><&amp;]]></div>", div.outerHtml())
nova chamada: assertEquals("<div id=\"1\"><![CDATA[\n<html>\n <foo><&amp;]]></div>", div.outerHtml(), "Era esperado valores iguais, mas  'div id=\'1\'![CDATA[\nhtml\n foo&amp;]]/div' é diferente de " + result312 + " <div.outerHtml()>")
chamada antiga: assertEquals("\n<html>\n <foo><&amp;", cdata.text())
nova chamada: assertEquals("\n<html>\n <foo><&amp;", cdata.text(), "Era esperado valores iguais, mas  '\nhtml\n foo&amp;' é diferente de " + result313 + " <cdata.text()>")
chamada antiga: assertEquals(xml, doc.outerHtml())
nova chamada: assertEquals(xml, doc.outerHtml(), "Era esperado valores iguais, mas  xml é diferente de " + result314 + " <doc.outerHtml()>")
chamada antiga: assertEquals("//\n\n  foo();\n//", doc.selectFirst("script").text())
nova chamada: assertEquals("//\n\n  foo();\n//", doc.selectFirst("script").text(), "Era esperado valores iguais, mas  '//\n\n  foo();\n//' é diferente de " + result315 + " <doc.selectFirst('script').text()>")
chamada antiga: assertEquals("One", doc.select("val").text())
nova chamada: assertEquals("One", doc.select("val").text(), "Era esperado valores iguais, mas  'One' é diferente de " + result316 + " <doc.select('val').text()>")
chamada antiga: assertEquals("<script> var a=\"<!--?\"; var b=\"?-->\"; </script>", doc.html())
nova chamada: assertEquals("<script> var a=\"<!--?\"; var b=\"?-->\"; </script>", doc.html(), "Era esperado valores iguais, mas  'script var a=\'!--?\'; var b=\'?--\'; /script' é diferente de " + result317 + " <doc.html()>")
chamada antiga: assertEquals("<p One=\"One\" ONE=\"Two\" one=\"Three\" two=\"Six\" Two=\"Eight\">Text</p>", doc.selectFirst("p").outerHtml())
nova chamada: assertEquals("<p One=\"One\" ONE=\"Two\" one=\"Three\" two=\"Six\" Two=\"Eight\">Text</p>", doc.selectFirst("p").outerHtml(), "Era esperado valores iguais, mas  'p One=\'One\' ONE=\'Two\' one=\'Three\' two=\'Six\' Two=\'Eight\'Text/p' é diferente de " + result318 + " <doc.selectFirst('p').outerHtml()>")
chamada antiga: assertNull(treeBuilder.reader)
nova chamada: assertNull(treeBuilder.reader, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(treeBuilder.tokeniser)
nova chamada: assertNull(treeBuilder.tokeniser, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(doc.outputSettings().syntax(), Syntax.xml)
nova chamada: assertEquals(doc.outputSettings().syntax(), Syntax.xml, "Era esperado valores iguais, mas " + result319 + " <doc.outputSettings().syntax()> é diferente de " + " Syntax.xml")
chamada antiga: assertEquals(doc.outputSettings().escapeMode(), Entities.EscapeMode.xhtml)
nova chamada: assertEquals(doc.outputSettings().escapeMode(), Entities.EscapeMode.xhtml, "Era esperado valores iguais, mas " + result320 + " <doc.outputSettings().escapeMode()> é diferente de " + " Entities.EscapeMode.xhtml")
chamada antiga: assertEquals("<p one=\"&lt;two>©\">Three</p>", doc.html())
nova chamada: assertEquals("<p one=\"&lt;two>©\">Three</p>", doc.html(), "Era esperado valores iguais, mas  'p one=\'&lt;two©\'Three/p' é diferente de " + result321 + " <doc.html()>")
chamada antiga: assertEquals(doc.outputSettings().syntax(), Syntax.xml)
nova chamada: assertEquals(doc.outputSettings().syntax(), Syntax.xml, "Era esperado valores iguais, mas " + result322 + " <doc.outputSettings().syntax()> é diferente de " + " Syntax.xml")
chamada antiga: assertEquals("<p one=\"&lt;two>&copy;\">Three</p>", doc.html())
nova chamada: assertEquals("<p one=\"&lt;two>&copy;\">Three</p>", doc.html(), "Era esperado valores iguais, mas  'p one=\'&lt;two&copy;\'Three/p' é diferente de " + result323 + " <doc.html()>")
chamada antiga: assertEquals(Syntax.xml, doc.outputSettings().syntax())
nova chamada: assertEquals(Syntax.xml, doc.outputSettings().syntax(), "Era esperado valores iguais, mas  Syntax.xml é diferente de " + result324 + " <doc.outputSettings().syntax()>")
chamada antiga: assertEquals("<body style=\"color: red\" name=\"\"><div></div></body>", out)
nova chamada: assertEquals("<body style=\"color: red\" name=\"\"><div></div></body>", out, "Era esperado valores iguais, mas  'body style=\'color: red\' name=\'\'div/div/body' é diferente de " + " out")
chamada antiga: assertEquals("foo", t1.getName())
nova chamada: assertEquals("foo", t1.getName(), "Era esperado valores iguais, mas  'foo' é diferente de " + result325 + " <t1.getName()>")
chamada antiga: assertEquals("FOO", t3.getName())
nova chamada: assertEquals("FOO", t3.getName(), "Era esperado valores iguais, mas  'FOO' é diferente de " + result326 + " <t3.getName()>")
chamada antiga: assertSame(t1, t2)
nova chamada: assertSame(t1, t2, "Era esperado objetos iguais, mas  t1 é diferente de " + " t2")
chamada antiga: assertSame(t3, t4)
nova chamada: assertSame(t3, t4, "Era esperado objetos iguais, mas  t3 é diferente de " + " t4")
chamada antiga: assertEquals("p", p.tagName())
nova chamada: assertEquals("p", p.tagName(), "Era esperado valores iguais, mas  'p' é diferente de " + result327 + " <p.tagName()>")
chamada antiga: assertEquals("foo.png", img.attr("src"))
nova chamada: assertEquals("foo.png", img.attr("src"), "Era esperado valores iguais, mas  'foo.png' é diferente de " + result328 + " <img.attr('src')>")
chamada antiga: assertEquals("img", img.tagName())
nova chamada: assertEquals("img", img.tagName(), "Era esperado valores iguais, mas  'img' é diferente de " + result329 + " <img.tagName()>")
chamada antiga: assertEquals("p", p.tagName())
nova chamada: assertEquals("p", p.tagName(), "Era esperado valores iguais, mas  'p' é diferente de " + result330 + " <p.tagName()>")
chamada antiga: assertEquals("foo > bar", p.attr("class"))
nova chamada: assertEquals("foo > bar", p.attr("class"), "Era esperado valores iguais, mas  'foo  bar' é diferente de " + result331 + " <p.attr('class')>")
chamada antiga: assertEquals("<p one=\"One\" two=\"two\">Text</p>", p.outerHtml())
nova chamada: assertEquals("<p one=\"One\" two=\"two\">Text</p>", p.outerHtml(), "Era esperado valores iguais, mas  'p one=\'One\' two=\'two\'Text/p' é diferente de " + result332 + " <p.outerHtml()>")
chamada antiga: assertEquals(1, parser.getErrors().size())
nova chamada: assertEquals(1, parser.getErrors().size(), "Era esperado valores iguais, mas  1 é diferente de " + result333 + " <parser.getErrors().size()>")
chamada antiga: assertEquals("Dropped duplicate attribute(s) in tag [p]", parser.getErrors().get(0).getErrorMessage())
nova chamada: assertEquals("Dropped duplicate attribute(s) in tag [p]", parser.getErrors().get(0).getErrorMessage(), "Era esperado valores iguais, mas  'Dropped duplicate attribute(s) in tag [p]' é diferente de " + result334 + " <parser.getErrors().get(0).getErrorMessage()>")
chamada antiga: assertEquals("<p One=\"One\" one=\"Three\" two=\"Four\" Two=\"Six\">Text</p>", doc.selectFirst("p").outerHtml())
nova chamada: assertEquals("<p One=\"One\" one=\"Three\" two=\"Four\" Two=\"Six\">Text</p>", doc.selectFirst("p").outerHtml(), "Era esperado valores iguais, mas  'p One=\'One\' one=\'Three\' two=\'Four\' Two=\'Six\'Text/p' é diferente de " + result335 + " <doc.selectFirst('p').outerHtml()>")
chamada antiga: assertEquals("<p a>One<a></a></p><p><a>Something</a></p><a>Else</a>", TextUtil.stripNewlines(doc.body().html()))
nova chamada: assertEquals("<p a>One<a></a></p><p><a>Something</a></p><a>Else</a>", TextUtil.stripNewlines(doc.body().html()), "Era esperado valores iguais, mas  'p aOnea/a/ppaSomething/a/paElse/a' é diferente de " + result336 + " <TextUtil.stripNewlines(doc.body().html())>")
chamada antiga: assertEquals("<p .....></p>", doc.body().html())
nova chamada: assertEquals("<p .....></p>", doc.body().html(), "Era esperado valores iguais, mas  'p ...../p' é diferente de " + result337 + " <doc.body().html()>")
chamada antiga: assertEquals(" <table><tr><td></table> ", comment.getData())
nova chamada: assertEquals(" <table><tr><td></table> ", comment.getData(), "Era esperado valores iguais, mas  ' tabletrtd/table ' é diferente de " + result338 + " <comment.getData()>")
chamada antiga: assertEquals("Hello", text.getWholeText())
nova chamada: assertEquals("Hello", text.getWholeText(), "Era esperado valores iguais, mas  'Hello' é diferente de " + result339 + " <text.getWholeText()>")
chamada antiga: assertEquals("Hello", p.text())
nova chamada: assertEquals("Hello", p.text(), "Era esperado valores iguais, mas  'Hello' é diferente de " + result340 + " <p.text()>")
chamada antiga: assertEquals("Hello", text.getWholeText())
nova chamada: assertEquals("Hello", text.getWholeText(), "Era esperado valores iguais, mas  'Hello' é diferente de " + result341 + " <text.getWholeText()>")
chamada antiga: assertEquals(" <tr><td>", comment.getData())
nova chamada: assertEquals(" <tr><td>", comment.getData(), "Era esperado valores iguais, mas  ' trtd' é diferente de " + result342 + " <comment.getData()>")
chamada antiga: assertEquals("--", comment.getData())
nova chamada: assertEquals("--", comment.getData(), "Era esperado valores iguais, mas  '--' é diferente de " + result343 + " <comment.getData()>")
chamada antiga: assertEquals(0, parser.getErrors().size())
nova chamada: assertEquals(0, parser.getErrors().size(), "Era esperado valores iguais, mas  0 é diferente de " + result344 + " <parser.getErrors().size()>")
chamada antiga: assertEquals(0, doc.getElementsByTag("p").size())
nova chamada: assertEquals(0, doc.getElementsByTag("p").size(), "Era esperado valores iguais, mas  0 é diferente de " + result345 + " <doc.getElementsByTag('p').size()>")
chamada antiga: assertEquals("", doc.text())
nova chamada: assertEquals("", doc.text(), "Era esperado valores iguais, mas  '' é diferente de " + result346 + " <doc.text()>")
chamada antiga: assertEquals("", doc.text())
nova chamada: assertEquals("", doc.text(), "Era esperado valores iguais, mas  '' é diferente de " + result347 + " <doc.text()>")
chamada antiga: assertEquals("", doc.text())
nova chamada: assertEquals("", doc.text(), "Era esperado valores iguais, mas  '' é diferente de " + result348 + " <doc.text()>")
chamada antiga: assertEquals("one", t.text())
nova chamada: assertEquals("one", t.text(), "Era esperado valores iguais, mas  'one' é diferente de " + result349 + " <t.text()>")
chamada antiga: assertEquals("two", doc.select("p").get(1).text())
nova chamada: assertEquals("two", doc.select("p").get(1).text(), "Era esperado valores iguais, mas  'two' é diferente de " + result350 + " <doc.select('p').get(1).text()>")
chamada antiga: assertEquals(2, options.size())
nova chamada: assertEquals(2, options.size(), "Era esperado valores iguais, mas  2 é diferente de " + result351 + " <options.size()>")
chamada antiga: assertEquals("One", options.first().text())
nova chamada: assertEquals("One", options.first().text(), "Era esperado valores iguais, mas  'One' é diferente de " + result352 + " <options.first().text()>")
chamada antiga: assertEquals("TwoThree", options.last().text())
nova chamada: assertEquals("TwoThree", options.last().text(), "Era esperado valores iguais, mas  'TwoThree' é diferente de " + result353 + " <options.last().text()>")
chamada antiga: assertEquals(0, parser.getErrors().size())
nova chamada: assertEquals(0, parser.getErrors().size(), "Era esperado valores iguais, mas  0 é diferente de " + result354 + " <parser.getErrors().size()>")
chamada antiga: assertEquals("<div><a name=\"top\"></a><p id=\"1\">Hello</p></div>", TextUtil.stripNewlines(doc.body().html()))
nova chamada: assertEquals("<div><a name=\"top\"></a><p id=\"1\">Hello</p></div>", TextUtil.stripNewlines(doc.body().html()), "Era esperado valores iguais, mas  'diva name=\'top\'/ap id=\'1\'Hello/p/div' é diferente de " + result355 + " <TextUtil.stripNewlines(doc.body().html())>")
chamada antiga: assertEquals(1, doc.children().size())
nova chamada: assertEquals(1, doc.children().size(), "Era esperado valores iguais, mas  1 é diferente de " + result356 + " <doc.children().size()>")
chamada antiga: assertEquals(2, doc.child(0).children().size())
nova chamada: assertEquals(2, doc.child(0).children().size(), "Era esperado valores iguais, mas  2 é diferente de " + result357 + " <doc.child(0).children().size()>")
chamada antiga: assertEquals(3, head.children().size())
nova chamada: assertEquals(3, head.children().size(), "Era esperado valores iguais, mas  3 é diferente de " + result358 + " <head.children().size()>")
chamada antiga: assertEquals(1, body.children().size())
nova chamada: assertEquals(1, body.children().size(), "Era esperado valores iguais, mas  1 é diferente de " + result359 + " <body.children().size()>")
chamada antiga: assertEquals("keywords", head.getElementsByTag("meta").get(0).attr("name"))
nova chamada: assertEquals("keywords", head.getElementsByTag("meta").get(0).attr("name"), "Era esperado valores iguais, mas  'keywords' é diferente de " + result360 + " <head.getElementsByTag('meta').get(0).attr('name')>")
chamada antiga: assertEquals(0, body.getElementsByTag("meta").size())
nova chamada: assertEquals(0, body.getElementsByTag("meta").size(), "Era esperado valores iguais, mas  0 é diferente de " + result361 + " <body.getElementsByTag('meta').size()>")
chamada antiga: assertEquals("jsoup", doc.title())
nova chamada: assertEquals("jsoup", doc.title(), "Era esperado valores iguais, mas  'jsoup' é diferente de " + result362 + " <doc.title()>")
chamada antiga: assertEquals("Hello world", body.text())
nova chamada: assertEquals("Hello world", body.text(), "Era esperado valores iguais, mas  'Hello world' é diferente de " + result363 + " <body.text()>")
chamada antiga: assertEquals("Hello world", body.children().get(0).text())
nova chamada: assertEquals("Hello world", body.children().get(0).text(), "Era esperado valores iguais, mas  'Hello world' é diferente de " + result364 + " <body.children().get(0).text()>")
chamada antiga: assertEquals("foo bar baz", doc.text())
nova chamada: assertEquals("foo bar baz", doc.text(), "Era esperado valores iguais, mas  'foo bar baz' é diferente de " + result365 + " <doc.text()>")
chamada antiga: assertEquals("Surf & Turf", div.attr("title"))
nova chamada: assertEquals("Surf & Turf", div.attr("title"), "Era esperado valores iguais, mas  'Surf & Turf' é diferente de " + result366 + " <div.attr('title')>")
chamada antiga: assertEquals("Reef & Beef", div.text())
nova chamada: assertEquals("Reef & Beef", div.text(), "Era esperado valores iguais, mas  'Reef & Beef' é diferente de " + result367 + " <div.text()>")
chamada antiga: assertEquals("font-family: bold", tels.get(0).data())
nova chamada: assertEquals("font-family: bold", tels.get(0).data(), "Era esperado valores iguais, mas  'font-family: bold' é diferente de " + result368 + " <tels.get(0).data()>")
chamada antiga: assertEquals("", tels.get(0).text())
nova chamada: assertEquals("", tels.get(0).text(), "Era esperado valores iguais, mas  '' é diferente de " + result369 + " <tels.get(0).text()>")
chamada antiga: assertEquals("Hello There", doc.text())
nova chamada: assertEquals("Hello There", doc.text(), "Era esperado valores iguais, mas  'Hello There' é diferente de " + result370 + " <doc.text()>")
chamada antiga: assertEquals("obj.insert('<a rel=\"none\" />');\ni++;", doc.data())
nova chamada: assertEquals("obj.insert('<a rel=\"none\" />');\ni++;", doc.data(), "Era esperado valores iguais, mas  'obj.insert('a rel=\'none\' /');\ni++;' é diferente de " + result371 + " <doc.data()>")
chamada antiga: assertEquals("<html><head></head><body>pre <script>inner</script> aft</body></html>", TextUtil.stripNewlines(doc.html()))
nova chamada: assertEquals("<html><head></head><body>pre <script>inner</script> aft</body></html>", TextUtil.stripNewlines(doc.html()), "Era esperado valores iguais, mas  'htmlhead/headbodypre scriptinner/script aft/body/html' é diferente de " + result372 + " <TextUtil.stripNewlines(doc.html())>")
chamada antiga: assertEquals("Hello", els.text())
nova chamada: assertEquals("Hello", els.text(), "Era esperado valores iguais, mas  'Hello' é diferente de " + result373 + " <els.text()>")
chamada antiga: assertEquals("Hello", els.val())
nova chamada: assertEquals("Hello", els.val(), "Era esperado valores iguais, mas  'Hello' é diferente de " + result374 + " <els.val()>")
chamada antiga: assertEquals(expect, el.text())
nova chamada: assertEquals(expect, el.text(), "Era esperado valores iguais, mas  expect é diferente de " + result375 + " <el.text()>")
chamada antiga: assertEquals(expect, el.val())
nova chamada: assertEquals(expect, el.val(), "Era esperado valores iguais, mas  expect é diferente de " + result376 + " <el.val()>")
chamada antiga: assertEquals(expect, el.html())
nova chamada: assertEquals(expect, el.html(), "Era esperado valores iguais, mas  expect é diferente de " + result377 + " <el.html()>")
chamada antiga: assertEquals("<textarea>\n\t" + expect + "\n</textarea>", el.outerHtml())
nova chamada: assertEquals("<textarea>\n\t" + expect + "\n</textarea>", el.outerHtml(), "Era esperado valores iguais, mas  'textarea\n\t' + expect + '\n/textarea' é diferente de " + result378 + " <el.outerHtml()>")
chamada antiga: assertEquals(expect, el.data())
nova chamada: assertEquals(expect, el.data(), "Era esperado valores iguais, mas  expect é diferente de " + result379 + " <el.data()>")
chamada antiga: assertEquals("One\n\tTwo\n\tThree", el.html())
nova chamada: assertEquals("One\n\tTwo\n\tThree", el.html(), "Era esperado valores iguais, mas  'One\n\tTwo\n\tThree' é diferente de " + result380 + " <el.html()>")
chamada antiga: assertEquals("<script>" + expect + "</script>", el.outerHtml())
nova chamada: assertEquals("<script>" + expect + "</script>", el.outerHtml(), "Era esperado valores iguais, mas  'script' + expect + '/script' é diferente de " + result381 + " <el.outerHtml()>")
chamada antiga: assertEquals(0, ol.size())
nova chamada: assertEquals(0, ol.size(), "Era esperado valores iguais, mas  0 é diferente de " + result382 + " <ol.size()>")
chamada antiga: assertEquals(2, lis.size())
nova chamada: assertEquals(2, lis.size(), "Era esperado valores iguais, mas  2 é diferente de " + result383 + " <lis.size()>")
chamada antiga: assertEquals("body", lis.first().parent().tagName())
nova chamada: assertEquals("body", lis.first().parent().tagName(), "Era esperado valores iguais, mas  'body' é diferente de " + result384 + " <lis.first().parent().tagName()>")
chamada antiga: assertEquals(0, doc2.select("ul").size())
nova chamada: assertEquals(0, doc2.select("ul").size(), "Era esperado valores iguais, mas  0 é diferente de " + result385 + " <doc2.select('ul').size()>")
chamada antiga: assertEquals(1, doc2.select("ol").size())
nova chamada: assertEquals(1, doc2.select("ol").size(), "Era esperado valores iguais, mas  1 é diferente de " + result386 + " <doc2.select('ol').size()>")
chamada antiga: assertEquals(2, doc2.select("ol li").size())
nova chamada: assertEquals(2, doc2.select("ol li").size(), "Era esperado valores iguais, mas  2 é diferente de " + result387 + " <doc2.select('ol li').size()>")
chamada antiga: assertEquals(2, doc2.select("ol li p").size())
nova chamada: assertEquals(2, doc2.select("ol li p").size(), "Era esperado valores iguais, mas  2 é diferente de " + result388 + " <doc2.select('ol li p').size()>")
chamada antiga: assertEquals(1, doc2.select("ol li").get(0).children().size())
nova chamada: assertEquals(1, doc2.select("ol li").get(0).children().size(), "Era esperado valores iguais, mas  1 é diferente de " + result389 + " <doc2.select('ol li').get(0).children().size()>")
chamada antiga: assertEquals("Hello<p>There</p><p>now</p>", TextUtil.stripNewlines(doc.body().html()))
nova chamada: assertEquals("Hello<p>There</p><p>now</p>", TextUtil.stripNewlines(doc.body().html()), "Era esperado valores iguais, mas  'HellopThere/ppnow/p' é diferente de " + result390 + " <TextUtil.stripNewlines(doc.body().html())>")
chamada antiga: assertEquals("<table><tbody><tr><td>1</td></tr><tr><td>2</td></tr><tr><td><table><tbody><tr><td>3</td><td>4</td></tr></tbody></table></td></tr><tr><td>5</td></tr></tbody></table>", TextUtil.stripNewlines(doc.body().html()))
nova chamada: assertEquals("<table><tbody><tr><td>1</td></tr><tr><td>2</td></tr><tr><td><table><tbody><tr><td>3</td><td>4</td></tr></tbody></table></td></tr><tr><td>5</td></tr></tbody></table>", TextUtil.stripNewlines(doc.body().html()), "Era esperado valores iguais, mas  'tabletbodytrtd1/td/trtrtd2/td/trtrtdtabletbodytrtd3/tdtd4/td/tr/tbody/table/td/trtrtd5/td/tr/tbody/table' é diferente de " + result391 + " <TextUtil.stripNewlines(doc.body().html())>")
chamada antiga: assertEquals("<table><colgroup><col></colgroup><colgroup><col><col><col></colgroup><thead><tr><th></th><th>2008</th><th>2007</th><th>2006</th></tr></thead><tbody><tr><th scope=\"rowgroup\">Research and development</th><td>$ 1,109</td><td>$ 782</td><td>$ 712</td></tr><tr><th scope=\"row\">Percentage of net sales</th><td>3.4%</td><td>3.3%</td><td>3.7%</td></tr></tbody><tbody><tr><th scope=\"rowgroup\">Selling, general, and administrative</th><td>$ 3,761</td><td>$ 2,963</td><td>$ 2,433</td></tr><tr><th scope=\"row\">Percentage of net sales</th><td>11.6%</td><td>12.3%</td><td>12.6%</td></tr></tbody></table>", TextUtil.stripNewlines(doc.body().html()))
nova chamada: assertEquals("<table><colgroup><col></colgroup><colgroup><col><col><col></colgroup><thead><tr><th></th><th>2008</th><th>2007</th><th>2006</th></tr></thead><tbody><tr><th scope=\"rowgroup\">Research and development</th><td>$ 1,109</td><td>$ 782</td><td>$ 712</td></tr><tr><th scope=\"row\">Percentage of net sales</th><td>3.4%</td><td>3.3%</td><td>3.7%</td></tr></tbody><tbody><tr><th scope=\"rowgroup\">Selling, general, and administrative</th><td>$ 3,761</td><td>$ 2,963</td><td>$ 2,433</td></tr><tr><th scope=\"row\">Percentage of net sales</th><td>11.6%</td><td>12.3%</td><td>12.6%</td></tr></tbody></table>", TextUtil.stripNewlines(doc.body().html()), "Era esperado valores iguais, mas  'tablecolgroupcol/colgroupcolgroupcolcolcol/colgrouptheadtrth/thth2008/thth2007/thth2006/th/tr/theadtbodytrth scope=\'rowgroup\'Research and development/thtd$ 1,109/tdtd$ 782/tdtd$ 712/td/trtrth scope=\'row\'Percentage of net sales/thtd3.4%/tdtd3.3%/tdtd3.7%/td/tr/tbodytbodytrth scope=\'rowgroup\'Selling, general, and administrative/thtd$ 3,761/tdtd$ 2,963/tdtd$ 2,433/td/trtrth scope=\'row\'Percentage of net sales/thtd11.6%/tdtd12.3%/tdtd12.6%/td/tr/tbody/table' é diferente de " + result392 + " <TextUtil.stripNewlines(doc.body().html())>")
chamada antiga: assertEquals("<table><tbody><tr><td>aaa</td><td>bbb</td></tr></tbody></table>", TextUtil.stripNewlines(doc.body().html()))
nova chamada: assertEquals("<table><tbody><tr><td>aaa</td><td>bbb</td></tr></tbody></table>", TextUtil.stripNewlines(doc.body().html()), "Era esperado valores iguais, mas  'tabletbodytrtdaaa/tdtdbbb/td/tr/tbody/table' é diferente de " + result393 + " <TextUtil.stripNewlines(doc.body().html())>")
chamada antiga: assertEquals("<table><caption>A caption</caption><tbody><tr><td>One</td><td>Two</td></tr></tbody></table>", TextUtil.stripNewlines(doc.body().html()))
nova chamada: assertEquals("<table><caption>A caption</caption><tbody><tr><td>One</td><td>Two</td></tr></tbody></table>", TextUtil.stripNewlines(doc.body().html()), "Era esperado valores iguais, mas  'tablecaptionA caption/captiontbodytrtdOne/tdtdTwo/td/tr/tbody/table' é diferente de " + result394 + " <TextUtil.stripNewlines(doc.body().html())>")
chamada antiga: assertEquals("<table><tbody><tr><td>One</td><td><table><tbody><tr><td>Two</td></tr></tbody></table><table><tbody><tr><td>Three</td></tr></tbody></table></td></tr></tbody></table>", TextUtil.stripNewlines(doc.body().html()))
nova chamada: assertEquals("<table><tbody><tr><td>One</td><td><table><tbody><tr><td>Two</td></tr></tbody></table><table><tbody><tr><td>Three</td></tr></tbody></table></td></tr></tbody></table>", TextUtil.stripNewlines(doc.body().html()), "Era esperado valores iguais, mas  'tabletbodytrtdOne/tdtdtabletbodytrtdTwo/td/tr/tbody/tabletabletbodytrtdThree/td/tr/tbody/table/td/tr/tbody/table' é diferente de " + result395 + " <TextUtil.stripNewlines(doc.body().html())>")
chamada antiga: assertEquals("<table><tbody><tr><td>One</td><td><table><tbody><tr><td>Two</td></tr></tbody></table></td><td>Three</td></tr></tbody></table>", TextUtil.stripNewlines(doc.body().html()))
nova chamada: assertEquals("<table><tbody><tr><td>One</td><td><table><tbody><tr><td>Two</td></tr></tbody></table></td><td>Three</td></tr></tbody></table>", TextUtil.stripNewlines(doc.body().html()), "Era esperado valores iguais, mas  'tabletbodytrtdOne/tdtdtabletbodytrtdTwo/td/tr/tbody/table/tdtdThree/td/tr/tbody/table' é diferente de " + result396 + " <TextUtil.stripNewlines(doc.body().html())>")
chamada antiga: assertEquals("http://foo/2/", doc.baseUri())
nova chamada: assertEquals("http://foo/2/", doc.baseUri(), "Era esperado valores iguais, mas  'http://foo/2/' é diferente de " + result397 + " <doc.baseUri()>")
chamada antiga: assertEquals(3, anchors.size())
nova chamada: assertEquals(3, anchors.size(), "Era esperado valores iguais, mas  3 é diferente de " + result398 + " <anchors.size()>")
chamada antiga: assertEquals("http://foo/2/", anchors.get(0).baseUri())
nova chamada: assertEquals("http://foo/2/", anchors.get(0).baseUri(), "Era esperado valores iguais, mas  'http://foo/2/' é diferente de " + result399 + " <anchors.get(0).baseUri()>")
chamada antiga: assertEquals("http://foo/2/", anchors.get(1).baseUri())
nova chamada: assertEquals("http://foo/2/", anchors.get(1).baseUri(), "Era esperado valores iguais, mas  'http://foo/2/' é diferente de " + result400 + " <anchors.get(1).baseUri()>")
chamada antiga: assertEquals("http://foo/2/", anchors.get(2).baseUri())
nova chamada: assertEquals("http://foo/2/", anchors.get(2).baseUri(), "Era esperado valores iguais, mas  'http://foo/2/' é diferente de " + result401 + " <anchors.get(2).baseUri()>")
chamada antiga: assertEquals("http://foo/2/1", anchors.get(0).absUrl("href"))
nova chamada: assertEquals("http://foo/2/1", anchors.get(0).absUrl("href"), "Era esperado valores iguais, mas  'http://foo/2/1' é diferente de " + result402 + " <anchors.get(0).absUrl('href')>")
chamada antiga: assertEquals("http://foo/2/3", anchors.get(1).absUrl("href"))
nova chamada: assertEquals("http://foo/2/3", anchors.get(1).absUrl("href"), "Era esperado valores iguais, mas  'http://foo/2/3' é diferente de " + result403 + " <anchors.get(1).absUrl('href')>")
chamada antiga: assertEquals("http://foo/4", anchors.get(2).absUrl("href"))
nova chamada: assertEquals("http://foo/4", anchors.get(2).absUrl("href"), "Era esperado valores iguais, mas  'http://foo/4' é diferente de " + result404 + " <anchors.get(2).absUrl('href')>")
chamada antiga: assertEquals("https://example.net/img.jpg", el.absUrl("src"))
nova chamada: assertEquals("https://example.net/img.jpg", el.absUrl("src"), "Era esperado valores iguais, mas  'https://example.net/img.jpg' é diferente de " + result405 + " <el.absUrl('src')>")
chamada antiga: assertEquals("<html>\n <foo><&amp;", div.text())
nova chamada: assertEquals("<html>\n <foo><&amp;", div.text(), "Era esperado valores iguais, mas  'html\n foo&amp;' é diferente de " + result406 + " <div.text()>")
chamada antiga: assertEquals(0, div.children().size())
nova chamada: assertEquals(0, div.children().size(), "Era esperado valores iguais, mas  0 é diferente de " + result407 + " <div.children().size()>")
chamada antiga: assertEquals(1, div.childNodeSize())
nova chamada: assertEquals(1, div.childNodeSize(), "Era esperado valores iguais, mas  1 é diferente de " + result408 + " <div.childNodeSize()>")
chamada antiga: assertEquals("<html>\n <foo><&amp;", div.text())
nova chamada: assertEquals("<html>\n <foo><&amp;", div.text(), "Era esperado valores iguais, mas  'html\n foo&amp;' é diferente de " + result409 + " <div.text()>")
chamada antiga: assertEquals(0, div.children().size())
nova chamada: assertEquals(0, div.children().size(), "Era esperado valores iguais, mas  0 é diferente de " + result410 + " <div.children().size()>")
chamada antiga: assertEquals(1, div.childNodeSize())
nova chamada: assertEquals(1, div.childNodeSize(), "Era esperado valores iguais, mas  1 é diferente de " + result411 + " <div.childNodeSize()>")
chamada antiga: assertEquals("<div id=\"1\"><![CDATA[\n<html>\n <foo><&amp;]]>\n</div>", div.outerHtml())
nova chamada: assertEquals("<div id=\"1\"><![CDATA[\n<html>\n <foo><&amp;]]>\n</div>", div.outerHtml(), "Era esperado valores iguais, mas  'div id=\'1\'![CDATA[\nhtml\n foo&amp;]]\n/div' é diferente de " + result412 + " <div.outerHtml()>")
chamada antiga: assertEquals("\n<html>\n <foo><&amp;", cdata.text())
nova chamada: assertEquals("\n<html>\n <foo><&amp;", cdata.text(), "Era esperado valores iguais, mas  '\nhtml\n foo&amp;' é diferente de " + result413 + " <cdata.text()>")
chamada antiga: assertEquals(cdata, node.text())
nova chamada: assertEquals(cdata, node.text(), "Era esperado valores iguais, mas  cdata é diferente de " + result414 + " <node.text()>")
chamada antiga: assertEquals("", script.text())
nova chamada: assertEquals("", script.text(), "Era esperado valores iguais, mas  '' é diferente de " + result415 + " <script.text()>")
chamada antiga: assertEquals(data, script.data())
nova chamada: assertEquals(data, script.data(), "Era esperado valores iguais, mas  data é diferente de " + result416 + " <script.data()>")
chamada antiga: assertEquals(html, script.outerHtml())
nova chamada: assertEquals(html, script.outerHtml(), "Era esperado valores iguais, mas  html é diferente de " + result417 + " <script.outerHtml()>")
chamada antiga: assertEquals(data, dataNode.getWholeData())
nova chamada: assertEquals(data, dataNode.getWholeData(), "Era esperado valores iguais, mas  data é diferente de " + result418 + " <dataNode.getWholeData()>")
chamada antiga: assertEquals(1, doc.body().childNodeSize())
nova chamada: assertEquals(1, doc.body().childNodeSize(), "Era esperado valores iguais, mas  1 é diferente de " + result419 + " <doc.body().childNodeSize()>")
chamada antiga: assertEquals("One ", ((TextNode) nodes.get(0)).getWholeText())
nova chamada: assertEquals("One ", ((TextNode) nodes.get(0)).getWholeText(), "Era esperado valores iguais, mas  'One ' é diferente de " + result420 + " <((TextNode) nodes.get(0)).getWholeText()>")
chamada antiga: assertEquals("Two <&", ((TextNode) nodes.get(1)).getWholeText())
nova chamada: assertEquals("Two <&", ((TextNode) nodes.get(1)).getWholeText(), "Era esperado valores iguais, mas  'Two &' é diferente de " + result421 + " <((TextNode) nodes.get(1)).getWholeText()>")
chamada antiga: assertEquals("Two <&", ((CDataNode) nodes.get(1)).getWholeText())
nova chamada: assertEquals("Two <&", ((CDataNode) nodes.get(1)).getWholeText(), "Era esperado valores iguais, mas  'Two &' é diferente de " + result422 + " <((CDataNode) nodes.get(1)).getWholeText()>")
chamada antiga: assertEquals(" Three", ((TextNode) nodes.get(2)).getWholeText())
nova chamada: assertEquals(" Three", ((TextNode) nodes.get(2)).getWholeText(), "Era esperado valores iguais, mas  ' Three' é diferente de " + result423 + " <((TextNode) nodes.get(2)).getWholeText()>")
chamada antiga: assertEquals(h, p.outerHtml())
nova chamada: assertEquals(h, p.outerHtml(), "Era esperado valores iguais, mas  h é diferente de " + result424 + " <p.outerHtml()>")
chamada antiga: assertEquals("One ", nodes.get(0).text())
nova chamada: assertEquals("One ", nodes.get(0).text(), "Era esperado valores iguais, mas  'One ' é diferente de " + result425 + " <nodes.get(0).text()>")
chamada antiga: assertEquals(" Two <& ", nodes.get(1).text())
nova chamada: assertEquals(" Two <& ", nodes.get(1).text(), "Era esperado valores iguais, mas  ' Two & ' é diferente de " + result426 + " <nodes.get(1).text()>")
chamada antiga: assertEquals(" Three", nodes.get(2).text())
nova chamada: assertEquals(" Three", nodes.get(2).text(), "Era esperado valores iguais, mas  ' Three' é diferente de " + result427 + " <nodes.get(2).text()>")
chamada antiga: assertEquals("Hello < There <&>", doc.select("div").first().text())
nova chamada: assertEquals("Hello < There <&>", doc.select("div").first().text(), "Era esperado valores iguais, mas  'Hello  There &' é diferente de " + result428 + " <doc.select('div').first().text()>")
chamada antiga: assertEquals(2, foos.size())
nova chamada: assertEquals(2, foos.size(), "Era esperado valores iguais, mas  2 é diferente de " + result429 + " <foos.size()>")
chamada antiga: assertEquals("bar", foos.first().attr("title"))
nova chamada: assertEquals("bar", foos.first().attr("title"), "Era esperado valores iguais, mas  'bar' é diferente de " + result430 + " <foos.first().attr('title')>")
chamada antiga: assertEquals("qux", foos.last().attr("title"))
nova chamada: assertEquals("qux", foos.last().attr("title"), "Era esperado valores iguais, mas  'qux' é diferente de " + result431 + " <foos.last().attr('title')>")
chamada antiga: assertEquals("there", foos.last().text())
nova chamada: assertEquals("there", foos.last().text(), "Era esperado valores iguais, mas  'there' é diferente de " + result432 + " <foos.last().text()>")
chamada antiga: assertEquals(h, TextUtil.stripNewlines(out))
nova chamada: assertEquals(h, TextUtil.stripNewlines(out), "Era esperado valores iguais, mas  h é diferente de " + result433 + " <TextUtil.stripNewlines(out)>")
chamada antiga: assertEquals("<body><!-- comment --><p><a href=\"foo\">One</a></p></body>", TextUtil.stripNewlines(doc.body().outerHtml()))
nova chamada: assertEquals("<body><!-- comment --><p><a href=\"foo\">One</a></p></body>", TextUtil.stripNewlines(doc.body().outerHtml()), "Era esperado valores iguais, mas  'body!-- comment --pa href=\'foo\'One/a/p/body' é diferente de " + result434 + " <TextUtil.stripNewlines(doc.body().outerHtml())>")
chamada antiga: assertEquals("http://example.com/foo", doc.select("a").first().absUrl("href"))
nova chamada: assertEquals("http://example.com/foo", doc.select("a").first().absUrl("href"), "Era esperado valores iguais, mas  'http://example.com/foo' é diferente de " + result435 + " <doc.select('a').first().absUrl('href')>")
chamada antiga: assertEquals(expectedHtml, doc.body().html())
nova chamada: assertEquals(expectedHtml, doc.body().html(), "Era esperado valores iguais, mas  expectedHtml é diferente de " + result436 + " <doc.body().html()>")
chamada antiga: assertEquals(expectedHtml, doc.body().html())
nova chamada: assertEquals(expectedHtml, doc.body().html(), "Era esperado valores iguais, mas  expectedHtml é diferente de " + result437 + " <doc.body().html()>")
chamada antiga: assertEquals("<input>\n<table></table>", doc.body().html())
nova chamada: assertEquals("<input>\n<table></table>", doc.body().html(), "Era esperado valores iguais, mas  'input\ntable/table' é diferente de " + result438 + " <doc.body().html()>")
chamada antiga: assertEquals("<foo:bar id=\"1\" /><abc:def id=\"2\">Foo<p>Hello</p></abc:def><foo:bar>There</foo:bar>", TextUtil.stripNewlines(doc.body().html()))
nova chamada: assertEquals("<foo:bar id=\"1\" /><abc:def id=\"2\">Foo<p>Hello</p></abc:def><foo:bar>There</foo:bar>", TextUtil.stripNewlines(doc.body().html()), "Era esperado valores iguais, mas  'foo:bar id=\'1\' /abc:def id=\'2\'FoopHello/p/abc:deffoo:barThere/foo:bar' é diferente de " + result439 + " <TextUtil.stripNewlines(doc.body().html())>")
chamada antiga: assertEquals("<div id=\"1\"></div><script src=\"/foo\"></script><div id=\"2\"><img><img></div><a id=\"3\"></a><i></i><foo /><foo>One</foo><hr> hr text <hr> hr text two", TextUtil.stripNewlines(doc.body().html()))
nova chamada: assertEquals("<div id=\"1\"></div><script src=\"/foo\"></script><div id=\"2\"><img><img></div><a id=\"3\"></a><i></i><foo /><foo>One</foo><hr> hr text <hr> hr text two", TextUtil.stripNewlines(doc.body().html()), "Era esperado valores iguais, mas  'div id=\'1\'/divscript src=\'/foo\'/scriptdiv id=\'2\'imgimg/diva id=\'3\'/ai/ifoo /fooOne/foohr hr text hr hr text two' é diferente de " + result440 + " <TextUtil.stripNewlines(doc.body().html())>")
chamada antiga: assertEquals("<html><head><noframes></noframes><meta name=\"foo\"></head><body>One</body></html>", TextUtil.stripNewlines(doc.html()))
nova chamada: assertEquals("<html><head><noframes></noframes><meta name=\"foo\"></head><body>One</body></html>", TextUtil.stripNewlines(doc.html()), "Era esperado valores iguais, mas  'htmlheadnoframes/noframesmeta name=\'foo\'/headbodyOne/body/html' é diferente de " + result441 + " <TextUtil.stripNewlines(doc.html())>")
chamada antiga: assertEquals("<html><head><style></style><meta name=\"foo\"></head><body>One</body></html>", TextUtil.stripNewlines(doc.html()))
nova chamada: assertEquals("<html><head><style></style><meta name=\"foo\"></head><body>One</body></html>", TextUtil.stripNewlines(doc.html()), "Era esperado valores iguais, mas  'htmlheadstyle/stylemeta name=\'foo\'/headbodyOne/body/html' é diferente de " + result442 + " <TextUtil.stripNewlines(doc.html())>")
chamada antiga: assertEquals("<html><head><title></title><meta name=\"foo\"></head><body>One</body></html>", TextUtil.stripNewlines(doc.html()))
nova chamada: assertEquals("<html><head><title></title><meta name=\"foo\"></head><body>One</body></html>", TextUtil.stripNewlines(doc.html()), "Era esperado valores iguais, mas  'htmlheadtitle/titlemeta name=\'foo\'/headbodyOne/body/html' é diferente de " + result443 + " <TextUtil.stripNewlines(doc.html())>")
chamada antiga: assertEquals("<html><head></head><body><p>One</p><iframe id=\"1\"></iframe><p>Two</p></body></html>", TextUtil.stripNewlines(doc.html()))
nova chamada: assertEquals("<html><head></head><body><p>One</p><iframe id=\"1\"></iframe><p>Two</p></body></html>", TextUtil.stripNewlines(doc.html()), "Era esperado valores iguais, mas  'htmlhead/headbodypOne/piframe id=\'1\'/iframepTwo/p/body/html' é diferente de " + result444 + " <TextUtil.stripNewlines(doc.html())>")
chamada antiga: assertEquals("<a href=\"/\">link</a>", doc.body().html())
nova chamada: assertEquals("<a href=\"/\">link</a>", doc.body().html(), "Era esperado valores iguais, mas  'a href=\'/\'link/a' é diferente de " + result445 + " <doc.body().html()>")
chamada antiga: assertEquals(3, doc.select("p").size())
nova chamada: assertEquals(3, doc.select("p").size(), "Era esperado valores iguais, mas  3 é diferente de " + result446 + " <doc.select('p').size()>")
chamada antiga: assertEquals(3, doc.body().children().size())
nova chamada: assertEquals(3, doc.body().children().size(), "Era esperado valores iguais, mas  3 é diferente de " + result447 + " <doc.body().children().size()>")
chamada antiga: assertEquals(0, doc.select("dl").size())
nova chamada: assertEquals(0, doc.select("dl").size(), "Era esperado valores iguais, mas  0 é diferente de " + result448 + " <doc.select('dl').size()>")
chamada antiga: assertEquals(4, doc.select("dt, dd").size())
nova chamada: assertEquals(4, doc.select("dt, dd").size(), "Era esperado valores iguais, mas  4 é diferente de " + result449 + " <doc.select('dt, dd').size()>")
chamada antiga: assertEquals(2, dts.size())
nova chamada: assertEquals(2, dts.size(), "Era esperado valores iguais, mas  2 é diferente de " + result450 + " <dts.size()>")
chamada antiga: assertEquals("Zug", dts.get(1).nextElementSibling().text())
nova chamada: assertEquals("Zug", dts.get(1).nextElementSibling().text(), "Era esperado valores iguais, mas  'Zug' é diferente de " + result451 + " <dts.get(1).nextElementSibling().text()>")
chamada antiga: assertEquals("dt", doc.select("#1").first().parent().tagName())
nova chamada: assertEquals("dt", doc.select("#1").first().parent().tagName(), "Era esperado valores iguais, mas  'dt' é diferente de " + result452 + " <doc.select('#1').first().parent().tagName()>")
chamada antiga: assertEquals("dd", doc.select("#2").first().parent().tagName())
nova chamada: assertEquals("dd", doc.select("#2").first().parent().tagName(), "Era esperado valores iguais, mas  'dd' é diferente de " + result453 + " <doc.select('#2').first().parent().tagName()>")
chamada antiga: assertEquals("<dl><dt><div id=\"1\">Term</div></dt><dd><div id=\"2\">Def</div></dd></dl>", TextUtil.stripNewlines(doc.body().html()))
nova chamada: assertEquals("<dl><dt><div id=\"1\">Term</div></dt><dd><div id=\"2\">Def</div></dd></dl>", TextUtil.stripNewlines(doc.body().html()), "Era esperado valores iguais, mas  'dldtdiv id=\'1\'Term/div/dtdddiv id=\'2\'Def/div/dd/dl' é diferente de " + result454 + " <TextUtil.stripNewlines(doc.body().html())>")
chamada antiga: assertEquals("<html><head><script></script><noscript></noscript></head><frameset><frame src=\"foo\"><frame src=\"foo\"></frameset></html>", TextUtil.stripNewlines(doc.html()))
nova chamada: assertEquals("<html><head><script></script><noscript></noscript></head><frameset><frame src=\"foo\"><frame src=\"foo\"></frameset></html>", TextUtil.stripNewlines(doc.html()), "Era esperado valores iguais, mas  'htmlheadscript/scriptnoscript/noscript/headframesetframe src=\'foo\'frame src=\'foo\'/frameset/html' é diferente de " + result455 + " <TextUtil.stripNewlines(doc.html())>")
chamada antiga: assertEquals("<html><head><title>One</title></head><frameset><frame><frame></frameset></html>", TextUtil.stripNewlines(doc.html()))
nova chamada: assertEquals("<html><head><title>One</title></head><frameset><frame><frame></frameset></html>", TextUtil.stripNewlines(doc.html()), "Era esperado valores iguais, mas  'htmlheadtitleOne/title/headframesetframeframe/frameset/html' é diferente de " + result456 + " <TextUtil.stripNewlines(doc.html())>")
chamada antiga: assertEquals("Deprecated", a.text())
nova chamada: assertEquals("Deprecated", a.text(), "Era esperado valores iguais, mas  'Deprecated' é diferente de " + result457 + " <a.text()>")
chamada antiga: assertEquals("font", a.child(0).tagName())
nova chamada: assertEquals("font", a.child(0).tagName(), "Era esperado valores iguais, mas  'font' é diferente de " + result458 + " <a.child(0).tagName()>")
chamada antiga: assertEquals("b", a.child(0).child(0).tagName())
nova chamada: assertEquals("b", a.child(0).child(0).tagName(), "Era esperado valores iguais, mas  'b' é diferente de " + result459 + " <a.child(0).child(0).tagName()>")
chamada antiga: assertEquals("/foo", a.attr("href"))
nova chamada: assertEquals("/foo", a.attr("href"), "Era esperado valores iguais, mas  '/foo' é diferente de " + result460 + " <a.attr('href')>")
chamada antiga: assertEquals("http://example.com/foo", a.attr("abs:href"))
nova chamada: assertEquals("http://example.com/foo", a.attr("abs:href"), "Era esperado valores iguais, mas  'http://example.com/foo' é diferente de " + result461 + " <a.attr('abs:href')>")
chamada antiga: assertEquals("<!doctype html><html><head></head><body>OneTwoThree<link>FourFive Six Seven</body></html>", TextUtil.stripNewlines(doc.html()))
nova chamada: assertEquals("<!doctype html><html><head></head><body>OneTwoThree<link>FourFive Six Seven</body></html>", TextUtil.stripNewlines(doc.html()), "Era esperado valores iguais, mas  '!doctype htmlhtmlhead/headbodyOneTwoThreelinkFourFive Six Seven/body/html' é diferente de " + result462 + " <TextUtil.stripNewlines(doc.html())>")
chamada antiga: assertEquals("<html><head></head><body></body></html>", TextUtil.stripNewlines(doc.html()))
nova chamada: assertEquals("<html><head></head><body></body></html>", TextUtil.stripNewlines(doc.html()), "Era esperado valores iguais, mas  'htmlhead/headbody/body/html' é diferente de " + result463 + " <TextUtil.stripNewlines(doc.html())>")
chamada antiga: assertEquals("<html><head></head><body><span class=\"foo\">bar</span></body></html>", TextUtil.stripNewlines(doc.html()))
nova chamada: assertEquals("<html><head></head><body><span class=\"foo\">bar</span></body></html>", TextUtil.stripNewlines(doc.html()), "Era esperado valores iguais, mas  'htmlhead/headbodyspan class=\'foo\'bar/span/body/html' é diferente de " + result464 + " <TextUtil.stripNewlines(doc.html())>")
chamada antiga: assertEquals("<html><head></head><body class=\"name\"><font face=\"Arial\"><div>One</div></font></body></html>", TextUtil.stripNewlines(doc.html()))
nova chamada: assertEquals("<html><head></head><body class=\"name\"><font face=\"Arial\"><div>One</div></font></body></html>", TextUtil.stripNewlines(doc.html()), "Era esperado valores iguais, mas  'htmlhead/headbody class=\'name\'font face=\'Arial\'divOne/div/font/body/html' é diferente de " + result465 + " <TextUtil.stripNewlines(doc.html())>")
chamada antiga: assertEquals("gb2312", doc.select("meta").attr("charset"))
nova chamada: assertEquals("gb2312", doc.select("meta").attr("charset"), "Era esperado valores iguais, mas  'gb2312' é diferente de " + result466 + " <doc.select('meta').attr('charset')>")
chamada antiga: assertEquals("<h1>Hello</h1><h2>There <hgroup><h1>Another</h1><h2>headline</h2></hgroup><hgroup><h1>More</h1><p>stuff</p></hgroup></h2>", TextUtil.stripNewlines(doc.body().html()))
nova chamada: assertEquals("<h1>Hello</h1><h2>There <hgroup><h1>Another</h1><h2>headline</h2></hgroup><hgroup><h1>More</h1><p>stuff</p></hgroup></h2>", TextUtil.stripNewlines(doc.body().html()), "Era esperado valores iguais, mas  'h1Hello/h1h2There hgrouph1Another/h1h2headline/h2/hgrouphgrouph1More/h1pstuff/p/hgroup/h2' é diferente de " + result467 + " <TextUtil.stripNewlines(doc.body().html())>")
chamada antiga: assertEquals("<abc_def id=\"1\">Hello</abc_def> <abc-def>There</abc-def>", TextUtil.stripNewlines(doc.body().html()))
nova chamada: assertEquals("<abc_def id=\"1\">Hello</abc_def> <abc-def>There</abc-def>", TextUtil.stripNewlines(doc.body().html()), "Era esperado valores iguais, mas  'abc_def id=\'1\'Hello/abc_def abc-defThere/abc-def' é diferente de " + result468 + " <TextUtil.stripNewlines(doc.body().html())>")
chamada antiga: assertEquals("<h1>Hello <div>There</div> now</h1><h2>More</h2><h3>Content</h3>", TextUtil.stripNewlines(doc.body().html()))
nova chamada: assertEquals("<h1>Hello <div>There</div> now</h1><h2>More</h2><h3>Content</h3>", TextUtil.stripNewlines(doc.body().html()), "Era esperado valores iguais, mas  'h1Hello divThere/div now/h1h2More/h2h3Content/h3' é diferente de " + result469 + " <TextUtil.stripNewlines(doc.body().html())>")
chamada antiga: assertEquals("<span>Hello <div>there</div> <span>now</span></span>", TextUtil.stripNewlines(doc.body().html()))
nova chamada: assertEquals("<span>Hello <div>there</div> <span>now</span></span>", TextUtil.stripNewlines(doc.body().html()), "Era esperado valores iguais, mas  'spanHello divthere/div spannow/span/span' é diferente de " + result470 + " <TextUtil.stripNewlines(doc.body().html())>")
chamada antiga: assertEquals("<html><head><noscript>&lt;img src=\"foo\"&gt;</noscript></head><body><p>Hello</p></body></html>", TextUtil.stripNewlines(doc.html()))
nova chamada: assertEquals("<html><head><noscript>&lt;img src=\"foo\"&gt;</noscript></head><body><p>Hello</p></body></html>", TextUtil.stripNewlines(doc.html()), "Era esperado valores iguais, mas  'htmlheadnoscript&lt;img src=\'foo\'&gt;/noscript/headbodypHello/p/body/html' é diferente de " + result471 + " <TextUtil.stripNewlines(doc.html())>")
chamada antiga: assertEquals("<a>Hello <div>there</div> <span>now</span></a>", TextUtil.stripNewlines(doc.body().html()))
nova chamada: assertEquals("<a>Hello <div>there</div> <span>now</span></a>", TextUtil.stripNewlines(doc.body().html()), "Era esperado valores iguais, mas  'aHello divthere/div spannow/span/a' é diferente de " + result472 + " <TextUtil.stripNewlines(doc.body().html())>")
chamada antiga: assertEquals("<font>Hello <div>there</div> <span>now</span></font>", TextUtil.stripNewlines(doc.body().html()))
nova chamada: assertEquals("<font>Hello <div>there</div> <span>now</span></font>", TextUtil.stripNewlines(doc.body().html()), "Era esperado valores iguais, mas  'fontHello divthere/div spannow/span/font' é diferente de " + result473 + " <TextUtil.stripNewlines(doc.body().html())>")
chamada antiga: assertEquals("<p>1<b>2<i>3</i></b><i>4</i>5</p>", doc.body().html())
nova chamada: assertEquals("<p>1<b>2<i>3</i></b><i>4</i>5</p>", doc.body().html(), "Era esperado valores iguais, mas  'p1b2i3/i/bi4/i5/p' é diferente de " + result474 + " <doc.body().html()>")
chamada antiga: assertEquals("<b>1</b>\n<p><b>2</b>3</p>", doc.body().html())
nova chamada: assertEquals("<b>1</b>\n<p><b>2</b>3</p>", doc.body().html(), "Era esperado valores iguais, mas  'b1/b\npb2/b3/p' é diferente de " + result475 + " <doc.body().html()>")
chamada antiga: assertEquals(StringUtil.normaliseWhitespace(w), StringUtil.normaliseWhitespace(doc.body().html()))
nova chamada: assertEquals(StringUtil.normaliseWhitespace(w), StringUtil.normaliseWhitespace(doc.body().html()), "Era esperado valores iguais, mas " + result476 + " <StringUtil.normaliseWhitespace(w)> é diferente de " + result477 + " <StringUtil.normaliseWhitespace(doc.body().html())>")
chamada antiga: assertEquals("<b></b><b>bbb</b><table><tbody><tr><td>aaa</td></tr></tbody></table><b>ccc</b>", TextUtil.stripNewlines(doc.body().html()))
nova chamada: assertEquals("<b></b><b>bbb</b><table><tbody><tr><td>aaa</td></tr></tbody></table><b>ccc</b>", TextUtil.stripNewlines(doc.body().html()), "Era esperado valores iguais, mas  'b/bbbbb/btabletbodytrtdaaa/td/tr/tbody/tablebccc/b' é diferente de " + result478 + " <TextUtil.stripNewlines(doc.body().html())>")
chamada antiga: assertEquals(want, doc.html())
nova chamada: assertEquals(want, doc.html(), "Era esperado valores iguais, mas  want é diferente de " + result479 + " <doc.html()>")
chamada antiga: assertEquals(want, doc.body().html())
nova chamada: assertEquals(want, doc.body().html(), "Era esperado valores iguais, mas  want é diferente de " + result480 + " <doc.body().html()>")
chamada antiga: assertEquals("<p><b class=\"one\">One <i>Two <b>Three</b></i></b></p>\n<p><b class=\"one\"><i><b>Hello</b></i></b></p>", doc.body().html())
nova chamada: assertEquals("<p><b class=\"one\">One <i>Two <b>Three</b></i></b></p>\n<p><b class=\"one\"><i><b>Hello</b></i></b></p>", doc.body().html(), "Era esperado valores iguais, mas  'pb class=\'one\'One iTwo bThree/b/i/b/p\npb class=\'one\'ibHello/b/i/b/p' é diferente de " + result481 + " <doc.body().html()>")
chamada antiga: assertEquals(want, doc.body().html())
nova chamada: assertEquals(want, doc.body().html(), "Era esperado valores iguais, mas  want é diferente de " + result482 + " <doc.body().html()>")
chamada antiga: assertEquals("<!-- comment --><!-- comment 2 --><html><head></head><body><p>One</p></body></html>", TextUtil.stripNewlines(doc.html()))
nova chamada: assertEquals("<!-- comment --><!-- comment 2 --><html><head></head><body><p>One</p></body></html>", TextUtil.stripNewlines(doc.html()), "Era esperado valores iguais, mas  '!-- comment --!-- comment 2 --htmlhead/headbodypOne/p/body/html' é diferente de " + result483 + " <TextUtil.stripNewlines(doc.html())>")
chamada antiga: assertEquals("<td>One</td>\n<td id=\"2\"></td>", doc.select("tr").first().html())
nova chamada: assertEquals("<td>One</td>\n<td id=\"2\"></td>", doc.select("tr").first().html(), "Era esperado valores iguais, mas  'tdOne/td\ntd id=\'2\'/td' é diferente de " + result484 + " <doc.select('tr').first().html()>")
chamada antiga: assertEquals("link text", a.text())
nova chamada: assertEquals("link text", a.text(), "Era esperado valores iguais, mas  'link text' é diferente de " + result485 + " <a.text()>")
chamada antiga: assertEquals("/lib/14160711/", a.attr("href"))
nova chamada: assertEquals("/lib/14160711/", a.attr("href"), "Era esperado valores iguais, mas  '/lib/14160711/' é diferente de " + result486 + " <a.attr('href')>")
chamada antiga: assertEquals(doc.select("span").first().children().size(), 0)
nova chamada: assertEquals(doc.select("span").first().children().size(), 0, "Era esperado valores iguais, mas " + result487 + " <doc.select('span').first().children().size()> é diferente de " + " 0")
chamada antiga: assertEquals(doc.select("table").size(), 1)
nova chamada: assertEquals(doc.select("table").size(), 1, "Era esperado valores iguais, mas " + result488 + " <doc.select('table').size()> é diferente de " + " 1")
chamada antiga: assertEquals("Data", Jsoup.parse("<title>Data").title())
nova chamada: assertEquals("Data", Jsoup.parse("<title>Data").title(), "Era esperado valores iguais, mas  'Data' é diferente de " + result489 + " <Jsoup.parse('<title>Data').title()>")
chamada antiga: assertEquals("Data<", Jsoup.parse("<title>Data<").title())
nova chamada: assertEquals("Data<", Jsoup.parse("<title>Data<").title(), "Era esperado valores iguais, mas  'Data' é diferente de " + result490 + " <Jsoup.parse('<title>Data<').title()>")
chamada antiga: assertEquals("Data</", Jsoup.parse("<title>Data</").title())
nova chamada: assertEquals("Data</", Jsoup.parse("<title>Data</").title(), "Era esperado valores iguais, mas  'Data/' é diferente de " + result491 + " <Jsoup.parse('<title>Data</').title()>")
chamada antiga: assertEquals("Data</t", Jsoup.parse("<title>Data</t").title())
nova chamada: assertEquals("Data</t", Jsoup.parse("<title>Data</t").title(), "Era esperado valores iguais, mas  'Data/t' é diferente de " + result492 + " <Jsoup.parse('<title>Data</t').title()>")
chamada antiga: assertEquals("Data</ti", Jsoup.parse("<title>Data</ti").title())
nova chamada: assertEquals("Data</ti", Jsoup.parse("<title>Data</ti").title(), "Era esperado valores iguais, mas  'Data/ti' é diferente de " + result493 + " <Jsoup.parse('<title>Data</ti').title()>")
chamada antiga: assertEquals("Data", Jsoup.parse("<title>Data</title>").title())
nova chamada: assertEquals("Data", Jsoup.parse("<title>Data</title>").title(), "Era esperado valores iguais, mas  'Data' é diferente de " + result494 + " <Jsoup.parse('<title>Data</title>').title()>")
chamada antiga: assertEquals("Data", Jsoup.parse("<title>Data</title >").title())
nova chamada: assertEquals("Data", Jsoup.parse("<title>Data</title >").title(), "Era esperado valores iguais, mas  'Data' é diferente de " + result495 + " <Jsoup.parse('<title>Data</title >').title()>")
chamada antiga: assertEquals("One <b>Two <b>Three", one.title())
nova chamada: assertEquals("One <b>Two <b>Three", one.title(), "Era esperado valores iguais, mas  'One bTwo bThree' é diferente de " + result496 + " <one.title()>")
chamada antiga: assertEquals("Test", one.select("p").first().text())
nova chamada: assertEquals("Test", one.select("p").first().text(), "Era esperado valores iguais, mas  'Test' é diferente de " + result497 + " <one.select('p').first().text()>")
chamada antiga: assertEquals("One", two.title())
nova chamada: assertEquals("One", two.title(), "Era esperado valores iguais, mas  'One' é diferente de " + result498 + " <two.title()>")
chamada antiga: assertEquals("<b>Two <p>Test</p></b>", two.body().html())
nova chamada: assertEquals("<b>Two <p>Test</p></b>", two.body().html(), "Era esperado valores iguais, mas  'bTwo pTest/p/b' é diferente de " + result499 + " <two.body().html()>")
chamada antiga: assertEquals("Data", Jsoup.parse("<script>Data").select("script").first().data())
nova chamada: assertEquals("Data", Jsoup.parse("<script>Data").select("script").first().data(), "Era esperado valores iguais, mas  'Data' é diferente de " + result500 + " <Jsoup.parse('<script>Data').select('script').first().data()>")
chamada antiga: assertEquals("Data<", Jsoup.parse("<script>Data<").select("script").first().data())
nova chamada: assertEquals("Data<", Jsoup.parse("<script>Data<").select("script").first().data(), "Era esperado valores iguais, mas  'Data' é diferente de " + result501 + " <Jsoup.parse('<script>Data<').select('script').first().data()>")
chamada antiga: assertEquals("Data</sc", Jsoup.parse("<script>Data</sc").select("script").first().data())
nova chamada: assertEquals("Data</sc", Jsoup.parse("<script>Data</sc").select("script").first().data(), "Era esperado valores iguais, mas  'Data/sc' é diferente de " + result502 + " <Jsoup.parse('<script>Data</sc').select('script').first().data()>")
chamada antiga: assertEquals("Data</-sc", Jsoup.parse("<script>Data</-sc").select("script").first().data())
nova chamada: assertEquals("Data</-sc", Jsoup.parse("<script>Data</-sc").select("script").first().data(), "Era esperado valores iguais, mas  'Data/-sc' é diferente de " + result503 + " <Jsoup.parse('<script>Data</-sc').select('script').first().data()>")
chamada antiga: assertEquals("Data</sc-", Jsoup.parse("<script>Data</sc-").select("script").first().data())
nova chamada: assertEquals("Data</sc-", Jsoup.parse("<script>Data</sc-").select("script").first().data(), "Era esperado valores iguais, mas  'Data/sc-' é diferente de " + result504 + " <Jsoup.parse('<script>Data</sc-').select('script').first().data()>")
chamada antiga: assertEquals("Data</sc--", Jsoup.parse("<script>Data</sc--").select("script").first().data())
nova chamada: assertEquals("Data</sc--", Jsoup.parse("<script>Data</sc--").select("script").first().data(), "Era esperado valores iguais, mas  'Data/sc--' é diferente de " + result505 + " <Jsoup.parse('<script>Data</sc--').select('script').first().data()>")
chamada antiga: assertEquals("Data", Jsoup.parse("<script>Data</script>").select("script").first().data())
nova chamada: assertEquals("Data", Jsoup.parse("<script>Data</script>").select("script").first().data(), "Era esperado valores iguais, mas  'Data' é diferente de " + result506 + " <Jsoup.parse('<script>Data</script>').select('script').first().data()>")
chamada antiga: assertEquals("Data</script", Jsoup.parse("<script>Data</script").select("script").first().data())
nova chamada: assertEquals("Data</script", Jsoup.parse("<script>Data</script").select("script").first().data(), "Era esperado valores iguais, mas  'Data/script' é diferente de " + result507 + " <Jsoup.parse('<script>Data</script').select('script').first().data()>")
chamada antiga: assertEquals("Data", Jsoup.parse("<script>Data</script ").select("script").first().data())
nova chamada: assertEquals("Data", Jsoup.parse("<script>Data</script ").select("script").first().data(), "Era esperado valores iguais, mas  'Data' é diferente de " + result508 + " <Jsoup.parse('<script>Data</script ').select('script').first().data()>")
chamada antiga: assertEquals("Data", Jsoup.parse("<script>Data</script n").select("script").first().data())
nova chamada: assertEquals("Data", Jsoup.parse("<script>Data</script n").select("script").first().data(), "Era esperado valores iguais, mas  'Data' é diferente de " + result509 + " <Jsoup.parse('<script>Data</script n').select('script').first().data()>")
chamada antiga: assertEquals("Data", Jsoup.parse("<script>Data</script n=").select("script").first().data())
nova chamada: assertEquals("Data", Jsoup.parse("<script>Data</script n=").select("script").first().data(), "Era esperado valores iguais, mas  'Data' é diferente de " + result510 + " <Jsoup.parse('<script>Data</script n=').select('script').first().data()>")
chamada antiga: assertEquals("Data", Jsoup.parse("<script>Data</script n=\"").select("script").first().data())
nova chamada: assertEquals("Data", Jsoup.parse("<script>Data</script n=\"").select("script").first().data(), "Era esperado valores iguais, mas  'Data' é diferente de " + result511 + " <Jsoup.parse('<script>Data</script n=\'').select('script').first().data()>")
chamada antiga: assertEquals("Data", Jsoup.parse("<script>Data</script n=\"p").select("script").first().data())
nova chamada: assertEquals("Data", Jsoup.parse("<script>Data</script n=\"p").select("script").first().data(), "Era esperado valores iguais, mas  'Data' é diferente de " + result512 + " <Jsoup.parse('<script>Data</script n=\'p').select('script').first().data()>")
chamada antiga: assertEquals("Data", Jsoup.parse("<style>Data").select("style").first().data())
nova chamada: assertEquals("Data", Jsoup.parse("<style>Data").select("style").first().data(), "Era esperado valores iguais, mas  'Data' é diferente de " + result513 + " <Jsoup.parse('<style>Data').select('style').first().data()>")
chamada antiga: assertEquals("Data</st", Jsoup.parse("<style>Data</st").select("style").first().data())
nova chamada: assertEquals("Data</st", Jsoup.parse("<style>Data</st").select("style").first().data(), "Era esperado valores iguais, mas  'Data/st' é diferente de " + result514 + " <Jsoup.parse('<style>Data</st').select('style').first().data()>")
chamada antiga: assertEquals("Data", Jsoup.parse("<style>Data</style>").select("style").first().data())
nova chamada: assertEquals("Data", Jsoup.parse("<style>Data</style>").select("style").first().data(), "Era esperado valores iguais, mas  'Data' é diferente de " + result515 + " <Jsoup.parse('<style>Data</style>').select('style').first().data()>")
chamada antiga: assertEquals("Data</style", Jsoup.parse("<style>Data</style").select("style").first().data())
nova chamada: assertEquals("Data</style", Jsoup.parse("<style>Data</style").select("style").first().data(), "Era esperado valores iguais, mas  'Data/style' é diferente de " + result516 + " <Jsoup.parse('<style>Data</style').select('style').first().data()>")
chamada antiga: assertEquals("Data</-style", Jsoup.parse("<style>Data</-style").select("style").first().data())
nova chamada: assertEquals("Data</-style", Jsoup.parse("<style>Data</-style").select("style").first().data(), "Era esperado valores iguais, mas  'Data/-style' é diferente de " + result517 + " <Jsoup.parse('<style>Data</-style').select('style').first().data()>")
chamada antiga: assertEquals("Data</style-", Jsoup.parse("<style>Data</style-").select("style").first().data())
nova chamada: assertEquals("Data</style-", Jsoup.parse("<style>Data</style-").select("style").first().data(), "Era esperado valores iguais, mas  'Data/style-' é diferente de " + result518 + " <Jsoup.parse('<style>Data</style-').select('style').first().data()>")
chamada antiga: assertEquals("Data</style--", Jsoup.parse("<style>Data</style--").select("style").first().data())
nova chamada: assertEquals("Data</style--", Jsoup.parse("<style>Data</style--").select("style").first().data(), "Era esperado valores iguais, mas  'Data/style--' é diferente de " + result519 + " <Jsoup.parse('<style>Data</style--').select('style').first().data()>")
chamada antiga: assertEquals("<textarea>One</textarea>", doc.body().html())
nova chamada: assertEquals("<textarea>One</textarea>", doc.body().html(), "Era esperado valores iguais, mas  'textareaOne/textarea' é diferente de " + result520 + " <doc.body().html()>")
chamada antiga: assertEquals("<!-- one <script>Blah</script> -->", doc.select("script").first().data())
nova chamada: assertEquals("<!-- one <script>Blah</script> -->", doc.select("script").first().data(), "Era esperado valores iguais, mas  '!-- one scriptBlah/script --' é diferente de " + result521 + " <doc.select('script').first().data()>")
chamada antiga: assertEquals("0\n<p>0</p>", doc.body().html())
nova chamada: assertEquals("0\n<p>0</p>", doc.body().html(), "Era esperado valores iguais, mas  '0\np0/p' é diferente de " + result522 + " <doc.body().html()>")
chamada antiga: assertEquals("<p id=\"\uFFFD\">Blah &#x0;</p>", doc.body().html())
nova chamada: assertEquals("<p id=\"\uFFFD\">Blah &#x0;</p>", doc.body().html(), "Era esperado valores iguais, mas  'p id=\'\uFFFD\'Blah &#x0;/p' é diferente de " + result523 + " <doc.body().html()>")
chamada antiga: assertEquals("<!-- \uFFFD \uFFFD -->", doc.body().html())
nova chamada: assertEquals("<!-- \uFFFD \uFFFD -->", doc.body().html(), "Era esperado valores iguais, mas  '!-- \uFFFD \uFFFD --' é diferente de " + result524 + " <doc.body().html()>")
chamada antiga: assertEquals("<a href=\"one\" id=\"two\"></a>", doc.body().html())
nova chamada: assertEquals("<a href=\"one\" id=\"two\"></a>", doc.body().html(), "Era esperado valores iguais, mas  'a href=\'one\' id=\'two\'/a' é diferente de " + result525 + " <doc.body().html()>")
chamada antiga: assertEquals("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">", doc.childNode(0).outerHtml())
nova chamada: assertEquals("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">", doc.childNode(0).outerHtml(), "Era esperado valores iguais, mas  '!DOCTYPE html PUBLIC \'-//W3C//DTD XHTML 1.0 Transitional//EN\' \'http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\'' é diferente de " + result526 + " <doc.childNode(0).outerHtml()>")
chamada antiga: assertEquals(9, errors.size())
nova chamada: assertEquals(9, errors.size(), "Era esperado valores iguais, mas  9 é diferente de " + result527 + " <errors.size()>")
chamada antiga: assertEquals("<1:21>: Attributes incorrectly present on end tag [/p]", errors.get(0).toString())
nova chamada: assertEquals("<1:21>: Attributes incorrectly present on end tag [/p]", errors.get(0).toString(), "Era esperado valores iguais, mas  '1:21: Attributes incorrectly present on end tag [/p]' é diferente de " + result528 + " <errors.get(0).toString()>")
chamada antiga: assertEquals("<2:16>: Unexpected Doctype token [<!doctype html>] when in state [InBody]", errors.get(1).toString())
nova chamada: assertEquals("<2:16>: Unexpected Doctype token [<!doctype html>] when in state [InBody]", errors.get(1).toString(), "Era esperado valores iguais, mas  '2:16: Unexpected Doctype token [!doctype html] when in state [InBody]' é diferente de " + result529 + " <errors.get(1).toString()>")
chamada antiga: assertEquals("<3:2>: Invalid character reference: invalid named reference [arrgh]", errors.get(2).toString())
nova chamada: assertEquals("<3:2>: Invalid character reference: invalid named reference [arrgh]", errors.get(2).toString(), "Era esperado valores iguais, mas  '3:2: Invalid character reference: invalid named reference [arrgh]' é diferente de " + result530 + " <errors.get(2).toString()>")
chamada antiga: assertEquals("<3:16>: Tag [font] cannot be self closing; not a void tag", errors.get(3).toString())
nova chamada: assertEquals("<3:16>: Tag [font] cannot be self closing; not a void tag", errors.get(3).toString(), "Era esperado valores iguais, mas  '3:16: Tag [font] cannot be self closing; not a void tag' é diferente de " + result531 + " <errors.get(3).toString()>")
chamada antiga: assertEquals("<3:20>: Invalid character reference: missing semicolon on [&#33]", errors.get(4).toString())
nova chamada: assertEquals("<3:20>: Invalid character reference: missing semicolon on [&#33]", errors.get(4).toString(), "Era esperado valores iguais, mas  '3:20: Invalid character reference: missing semicolon on [&#33]' é diferente de " + result532 + " <errors.get(4).toString()>")
chamada antiga: assertEquals("<3:25>: Invalid character reference: missing semicolon on [&amp]", errors.get(5).toString())
nova chamada: assertEquals("<3:25>: Invalid character reference: missing semicolon on [&amp]", errors.get(5).toString(), "Era esperado valores iguais, mas  '3:25: Invalid character reference: missing semicolon on [&amp]' é diferente de " + result533 + " <errors.get(5).toString()>")
chamada antiga: assertEquals("<3:34>: Invalid character reference: character [55296] outside of valid range", errors.get(6).toString())
nova chamada: assertEquals("<3:34>: Invalid character reference: character [55296] outside of valid range", errors.get(6).toString(), "Era esperado valores iguais, mas  '3:34: Invalid character reference: character [55296] outside of valid range' é diferente de " + result534 + " <errors.get(6).toString()>")
chamada antiga: assertEquals("<3:46>: Unexpected EndTag token [</div>] when in state [InBody]", errors.get(7).toString())
nova chamada: assertEquals("<3:46>: Unexpected EndTag token [</div>] when in state [InBody]", errors.get(7).toString(), "Era esperado valores iguais, mas  '3:46: Unexpected EndTag token [/div] when in state [InBody]' é diferente de " + result535 + " <errors.get(7).toString()>")
chamada antiga: assertEquals("<3:51>: Unexpectedly reached end of file (EOF) in input state [TagName]", errors.get(8).toString())
nova chamada: assertEquals("<3:51>: Unexpectedly reached end of file (EOF) in input state [TagName]", errors.get(8).toString(), "Era esperado valores iguais, mas  '3:51: Unexpectedly reached end of file (EOF) in input state [TagName]' é diferente de " + result536 + " <errors.get(8).toString()>")
chamada antiga: assertEquals(3, errors.size())
nova chamada: assertEquals(3, errors.size(), "Era esperado valores iguais, mas  3 é diferente de " + result537 + " <errors.size()>")
chamada antiga: assertEquals("<1:21>: Attributes incorrectly present on end tag [/p]", errors.get(0).toString())
nova chamada: assertEquals("<1:21>: Attributes incorrectly present on end tag [/p]", errors.get(0).toString(), "Era esperado valores iguais, mas  '1:21: Attributes incorrectly present on end tag [/p]' é diferente de " + result538 + " <errors.get(0).toString()>")
chamada antiga: assertEquals("<2:16>: Unexpected Doctype token [<!doctype html>] when in state [InBody]", errors.get(1).toString())
nova chamada: assertEquals("<2:16>: Unexpected Doctype token [<!doctype html>] when in state [InBody]", errors.get(1).toString(), "Era esperado valores iguais, mas  '2:16: Unexpected Doctype token [!doctype html] when in state [InBody]' é diferente de " + result539 + " <errors.get(1).toString()>")
chamada antiga: assertEquals("<3:2>: Invalid character reference: invalid named reference [arrgh]", errors.get(2).toString())
nova chamada: assertEquals("<3:2>: Invalid character reference: invalid named reference [arrgh]", errors.get(2).toString(), "Era esperado valores iguais, mas  '3:2: Invalid character reference: invalid named reference [arrgh]' é diferente de " + result540 + " <errors.get(2).toString()>")
chamada antiga: assertEquals(0, errors.size())
nova chamada: assertEquals(0, errors.size(), "Era esperado valores iguais, mas  0 é diferente de " + result541 + " <errors.size()>")
chamada antiga: assertEquals(0, errors.size())
nova chamada: assertEquals(0, errors.size(), "Era esperado valores iguais, mas  0 é diferente de " + result542 + " <errors.size()>")
chamada antiga: assertEquals("<html><head></head><body><table><tbody><tr><td>text</td><!-- Comment --></tr></tbody></table></body></html>", TextUtil.stripNewlines(node.outerHtml()))
nova chamada: assertEquals("<html><head></head><body><table><tbody><tr><td>text</td><!-- Comment --></tr></tbody></table></body></html>", TextUtil.stripNewlines(node.outerHtml()), "Era esperado valores iguais, mas  'htmlhead/headbodytabletbodytrtdtext/td!-- Comment --/tr/tbody/table/body/html' é diferente de " + result543 + " <TextUtil.stripNewlines(node.outerHtml())>")
chamada antiga: assertEquals("<script>\n" + "  <!--\n" + "    document.write('</scr' + 'ipt>');\n" + "  // -->\n" + "</script>", node.body().html())
nova chamada: assertEquals("<script>\n" + "  <!--\n" + "    document.write('</scr' + 'ipt>');\n" + "  // -->\n" + "</script>", node.body().html(), "Era esperado valores iguais, mas  'script\n' + '  !--\n' + '    document.write('/scr' + 'ipt');\n' + '  // --\n' + '/script' é diferente de " + result544 + " <node.body().html()>")
chamada antiga: assertEquals(1, nodes.size())
nova chamada: assertEquals(1, nodes.size(), "Era esperado valores iguais, mas  1 é diferente de " + result545 + " <nodes.size()>")
chamada antiga: assertEquals("html", nodes.get(0).nodeName())
nova chamada: assertEquals("html", nodes.get(0).nodeName(), "Era esperado valores iguais, mas  'html' é diferente de " + result546 + " <nodes.get(0).nodeName()>")
chamada antiga: assertEquals("<html> <head></head> <body> <ol> <li>One</li> </ol> <p>Two</p> </body> </html>", StringUtil.normaliseWhitespace(nodes.get(0).outerHtml()))
nova chamada: assertEquals("<html> <head></head> <body> <ol> <li>One</li> </ol> <p>Two</p> </body> </html>", StringUtil.normaliseWhitespace(nodes.get(0).outerHtml()), "Era esperado valores iguais, mas  'html head/head body ol liOne/li /ol pTwo/p /body /html' é diferente de " + result547 + " <StringUtil.normaliseWhitespace(nodes.get(0).outerHtml())>")
chamada antiga: assertEquals(StringUtil.normaliseWhitespace("One &amp;clubsuite; ♣"), doc.body().html())
nova chamada: assertEquals(StringUtil.normaliseWhitespace("One &amp;clubsuite; ♣"), doc.body().html(), "Era esperado valores iguais, mas " + result548 + " <StringUtil.normaliseWhitespace('One &amp;clubsuite; ♣')> é diferente de " + result549 + " <doc.body().html()>")
chamada antiga: assertEquals("&amp; \" &reg; &amp;icy &amp;hopf &icy; &hopf;", doc.body().html())
nova chamada: assertEquals("&amp; \" &reg; &amp;icy &amp;hopf &icy; &hopf;", doc.body().html(), "Era esperado valores iguais, mas  '&amp; \' &reg; &amp;icy &amp;hopf &icy; &hopf;' é diferente de " + result550 + " <doc.body().html()>")
chamada antiga: assertEquals("<!--?xml encoding='UTF-8' ?--> <html> <head></head> <body> One </body> </html>", StringUtil.normaliseWhitespace(doc.outerHtml()))
nova chamada: assertEquals("<!--?xml encoding='UTF-8' ?--> <html> <head></head> <body> One </body> </html>", StringUtil.normaliseWhitespace(doc.outerHtml()), "Era esperado valores iguais, mas  '!--?xml encoding='UTF-8' ?-- html head/head body One /body /html' é diferente de " + result551 + " <StringUtil.normaliseWhitespace(doc.outerHtml())>")
chamada antiga: assertEquals("<textarea>&lt;p&gt;Jsoup&lt;/p&gt;</textarea>", doc.body().html())
nova chamada: assertEquals("<textarea>&lt;p&gt;Jsoup&lt;/p&gt;</textarea>", doc.body().html(), "Era esperado valores iguais, mas  'textarea&lt;p&gt;Jsoup&lt;/p&gt;/textarea' é diferente de " + result552 + " <doc.body().html()>")
chamada antiga: assertEquals(2, controls.size())
nova chamada: assertEquals(2, controls.size(), "Era esperado valores iguais, mas  2 é diferente de " + result553 + " <controls.size()>")
chamada antiga: assertEquals("1", controls.get(0).id())
nova chamada: assertEquals("1", controls.get(0).id(), "Era esperado valores iguais, mas  '1' é diferente de " + result554 + " <controls.get(0).id()>")
chamada antiga: assertEquals("2", controls.get(1).id())
nova chamada: assertEquals("2", controls.get(1).id(), "Era esperado valores iguais, mas  '2' é diferente de " + result555 + " <controls.get(1).id()>")
chamada antiga: assertEquals(2, controls.size())
nova chamada: assertEquals(2, controls.size(), "Era esperado valores iguais, mas  2 é diferente de " + result556 + " <controls.size()>")
chamada antiga: assertEquals("1", controls.get(0).id())
nova chamada: assertEquals("1", controls.get(0).id(), "Era esperado valores iguais, mas  '1' é diferente de " + result557 + " <controls.get(0).id()>")
chamada antiga: assertEquals("2", controls.get(1).id())
nova chamada: assertEquals("2", controls.get(1).id(), "Era esperado valores iguais, mas  '2' é diferente de " + result558 + " <controls.get(1).id()>")
chamada antiga: assertEquals("<table><tbody><tr><form></form><input type=\"hidden\" id=\"1\"><td><input type=\"text\" id=\"2\"></td></tr><tr></tr></tbody></table>", TextUtil.stripNewlines(doc.body().html()))
nova chamada: assertEquals("<table><tbody><tr><form></form><input type=\"hidden\" id=\"1\"><td><input type=\"text\" id=\"2\"></td></tr><tr></tr></tbody></table>", TextUtil.stripNewlines(doc.body().html()), "Era esperado valores iguais, mas  'tabletbodytrform/forminput type=\'hidden\' id=\'1\'tdinput type=\'text\' id=\'2\'/td/trtr/tr/tbody/table' é diferente de " + result559 + " <TextUtil.stripNewlines(doc.body().html())>")
chamada antiga: assertEquals(1, doc.select("table input").size())
nova chamada: assertEquals(1, doc.select("table input").size(), "Era esperado valores iguais, mas  1 é diferente de " + result560 + " <doc.select('table input').size()>")
chamada antiga: assertEquals(2, doc.select("input").size())
nova chamada: assertEquals(2, doc.select("input").size(), "Era esperado valores iguais, mas  2 é diferente de " + result561 + " <doc.select('input').size()>")
chamada antiga: assertEquals("<img>\n<svg>\n <image />\n</svg>", doc.body().html())
nova chamada: assertEquals("<img>\n<svg>\n <image />\n</svg>", doc.body().html(), "Era esperado valores iguais, mas  'img\nsvg\n image /\n/svg' é diferente de " + result562 + " <doc.body().html()>")
chamada antiga: assertEquals("<!doctype> <html> <head></head> <body></body> </html>", StringUtil.normaliseWhitespace(doc.outerHtml()))
nova chamada: assertEquals("<!doctype> <html> <head></head> <body></body> </html>", StringUtil.normaliseWhitespace(doc.outerHtml()), "Era esperado valores iguais, mas  '!doctype html head/head body/body /html' é diferente de " + result563 + " <StringUtil.normaliseWhitespace(doc.outerHtml())>")
chamada antiga: assertEquals("<!doctype> <html> <head></head> <body> <p>Foo</p> </body> </html>", StringUtil.normaliseWhitespace(doc.outerHtml()))
nova chamada: assertEquals("<!doctype> <html> <head></head> <body> <p>Foo</p> </body> </html>", StringUtil.normaliseWhitespace(doc.outerHtml()), "Era esperado valores iguais, mas  '!doctype html head/head body pFoo/p /body /html' é diferente de " + result564 + " <StringUtil.normaliseWhitespace(doc.outerHtml())>")
chamada antiga: assertEquals("<!doctype �> <html> <head></head> <body></body> </html>", StringUtil.normaliseWhitespace(doc.outerHtml()))
nova chamada: assertEquals("<!doctype �> <html> <head></head> <body></body> </html>", StringUtil.normaliseWhitespace(doc.outerHtml()), "Era esperado valores iguais, mas  '!doctype � html head/head body/body /html' é diferente de " + result565 + " <StringUtil.normaliseWhitespace(doc.outerHtml())>")
chamada antiga: assertEquals(50000, doc.body().childNodeSize())
nova chamada: assertEquals(50000, doc.body().childNodeSize(), "Era esperado valores iguais, mas  50000 é diferente de " + result566 + " <doc.body().childNodeSize()>")
chamada antiga: assertTrue(System.currentTimeMillis() - start < 1000)
nova chamada: assertTrue(System.currentTimeMillis() - start < 1000, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("<form action=\"/submit\"> <hr><label>This is a searchable index. Enter search keywords: <input name=\"isindex\"></label> <hr> </form>", StringUtil.normaliseWhitespace(doc.body().html()))
nova chamada: assertEquals("<form action=\"/submit\"> <hr><label>This is a searchable index. Enter search keywords: <input name=\"isindex\"></label> <hr> </form>", StringUtil.normaliseWhitespace(doc.body().html()), "Era esperado valores iguais, mas  'form action=\'/submit\' hrlabelThis is a searchable index. Enter search keywords: input name=\'isindex\'/label hr /form' é diferente de " + result567 + " <StringUtil.normaliseWhitespace(doc.body().html())>")
chamada antiga: assertEquals(1, doc.body().children().size())
nova chamada: assertEquals(1, doc.body().children().size(), "Era esperado valores iguais, mas  1 é diferente de " + result568 + " <doc.body().children().size()>")
chamada antiga: assertEquals("hello", main.text())
nova chamada: assertEquals("hello", main.text(), "Era esperado valores iguais, mas  'hello' é diferente de " + result569 + " <main.text()>")
chamada antiga: assertEquals("Yes", els.text())
nova chamada: assertEquals("Yes", els.text(), "Era esperado valores iguais, mas  'Yes' é diferente de " + result570 + " <els.text()>")
chamada antiga: assertEquals("Correct", els.text())
nova chamada: assertEquals("Correct", els.text(), "Era esperado valores iguais, mas  'Correct' é diferente de " + result571 + " <els.text()>")
chamada antiga: assertEquals("Check", els.text())
nova chamada: assertEquals("Check", els.text(), "Era esperado valores iguais, mas  'Check' é diferente de " + result572 + " <els.text()>")
chamada antiga: assertEquals("<script type=\"text/javascript\">console.log('foo');</script>\n" + "<div id=\"somecontent\">\n" + " some content\n" + "</div>\n" + "<script type=\"text/javascript\">console.log('bar');</script>", body.body().html())
nova chamada: assertEquals("<script type=\"text/javascript\">console.log('foo');</script>\n" + "<div id=\"somecontent\">\n" + " some content\n" + "</div>\n" + "<script type=\"text/javascript\">console.log('bar');</script>", body.body().html(), "Era esperado valores iguais, mas  'script type=\'text/javascript\'console.log('foo');/script\n' + 'div id=\'somecontent\'\n' + ' some content\n' + '/div\n' + 'script type=\'text/javascript\'console.log('bar');/script' é diferente de " + result573 + " <body.body().html()>")
chamada antiga: assertEquals("<!doctype html> <html> <head></head> <body> <div id=\"1\"> One </div> </body> </html>", StringUtil.normaliseWhitespace(doc.outerHtml()))
nova chamada: assertEquals("<!doctype html> <html> <head></head> <body> <div id=\"1\"> One </div> </body> </html>", StringUtil.normaliseWhitespace(doc.outerHtml()), "Era esperado valores iguais, mas  '!doctype html html head/head body div id=\'1\' One /div /body /html' é diferente de " + result574 + " <StringUtil.normaliseWhitespace(doc.outerHtml())>")
chamada antiga: assertEquals("<tag>One</tag>", TextUtil.stripNewlines(div.nextElementSibling().outerHtml()))
nova chamada: assertEquals("<tag>One</tag>", TextUtil.stripNewlines(div.nextElementSibling().outerHtml()), "Era esperado valores iguais, mas  'tagOne/tag' é diferente de " + result575 + " <TextUtil.stripNewlines(div.nextElementSibling().outerHtml())>")
chamada antiga: assertEquals("<!doctype html> <html> <head></head> <body> <img alt=\"One\"> </body> </html>", StringUtil.normaliseWhitespace(doc.outerHtml()))
nova chamada: assertEquals("<!doctype html> <html> <head></head> <body> <img alt=\"One\"> </body> </html>", StringUtil.normaliseWhitespace(doc.outerHtml()), "Era esperado valores iguais, mas  '!doctype html html head/head body img alt=\'One\' /body /html' é diferente de " + result576 + " <StringUtil.normaliseWhitespace(doc.outerHtml())>")
chamada antiga: assertEquals("<form name=\"one\"></form>", StringUtil.normaliseWhitespace(doc.body().html()))
nova chamada: assertEquals("<form name=\"one\"></form>", StringUtil.normaliseWhitespace(doc.body().html()), "Era esperado valores iguais, mas  'form name=\'one\'/form' é diferente de " + result577 + " <StringUtil.normaliseWhitespace(doc.body().html())>")
chamada antiga: assertEquals("<html> <head></head> <body> <div id=\"1\"> <SPAN id=\"2\"></SPAN> </div> </body> </html>", StringUtil.normaliseWhitespace(doc.outerHtml()))
nova chamada: assertEquals("<html> <head></head> <body> <div id=\"1\"> <SPAN id=\"2\"></SPAN> </div> </body> </html>", StringUtil.normaliseWhitespace(doc.outerHtml()), "Era esperado valores iguais, mas  'html head/head body div id=\'1\' SPAN id=\'2\'/SPAN /div /body /html' é diferente de " + result578 + " <StringUtil.normaliseWhitespace(doc.outerHtml())>")
chamada antiga: assertEquals("<TaG id=\"one\">One</TaG>", TextUtil.stripNewlines(div.nextElementSibling().outerHtml()))
nova chamada: assertEquals("<TaG id=\"one\">One</TaG>", TextUtil.stripNewlines(div.nextElementSibling().outerHtml()), "Era esperado valores iguais, mas  'TaG id=\'one\'One/TaG' é diferente de " + result579 + " <TextUtil.stripNewlines(div.nextElementSibling().outerHtml())>")
chamada antiga: assertEquals("<html> <head></head> <body> <div id=\"1\"> <span ID=\"2\"></span> </div> </body> </html>", StringUtil.normaliseWhitespace(doc.outerHtml()))
nova chamada: assertEquals("<html> <head></head> <body> <div id=\"1\"> <span ID=\"2\"></span> </div> </body> </html>", StringUtil.normaliseWhitespace(doc.outerHtml()), "Era esperado valores iguais, mas  'html head/head body div id=\'1\' span ID=\'2\'/span /div /body /html' é diferente de " + result580 + " <StringUtil.normaliseWhitespace(doc.outerHtml())>")
chamada antiga: assertEquals("<tag ID=\"one\">One</tag>", TextUtil.stripNewlines(div.nextElementSibling().outerHtml()))
nova chamada: assertEquals("<tag ID=\"one\">One</tag>", TextUtil.stripNewlines(div.nextElementSibling().outerHtml()), "Era esperado valores iguais, mas  'tag ID=\'one\'One/tag' é diferente de " + result581 + " <TextUtil.stripNewlines(div.nextElementSibling().outerHtml())>")
chamada antiga: assertEquals("<html> <head></head> <body> <div id=\"1\"> <SPAN ID=\"2\"></SPAN> </div> </body> </html>", StringUtil.normaliseWhitespace(doc.outerHtml()))
nova chamada: assertEquals("<html> <head></head> <body> <div id=\"1\"> <SPAN ID=\"2\"></SPAN> </div> </body> </html>", StringUtil.normaliseWhitespace(doc.outerHtml()), "Era esperado valores iguais, mas  'html head/head body div id=\'1\' SPAN ID=\'2\'/SPAN /div /body /html' é diferente de " + result582 + " <StringUtil.normaliseWhitespace(doc.outerHtml())>")
chamada antiga: assertEquals("<TaG ID=\"one\">One</TaG>", TextUtil.stripNewlines(div.nextElementSibling().outerHtml()))
nova chamada: assertEquals("<TaG ID=\"one\">One</TaG>", TextUtil.stripNewlines(div.nextElementSibling().outerHtml()), "Era esperado valores iguais, mas  'TaG ID=\'one\'One/TaG' é diferente de " + result583 + " <TextUtil.stripNewlines(div.nextElementSibling().outerHtml())>")
chamada antiga: assertEquals("<p><a>One</a><a></a><a foo=\"bar\">Two</a></p>", doc.body().html())
nova chamada: assertEquals("<p><a>One</a><a></a><a foo=\"bar\">Two</a></p>", doc.body().html(), "Era esperado valores iguais, mas  'paOne/aa/aa foo=\'bar\'Two/a/p' é diferente de " + result584 + " <doc.body().html()>")
chamada antiga: assertEquals("<r> <X> A </X> <y> B </y> </r>", StringUtil.normaliseWhitespace(doc.body().html()))
nova chamada: assertEquals("<r> <X> A </X> <y> B </y> </r>", StringUtil.normaliseWhitespace(doc.body().html()), "Era esperado valores iguais, mas  'r X A /X y B /y /r' é diferente de " + result585 + " <StringUtil.normaliseWhitespace(doc.body().html())>")
chamada antiga: assertEquals("<r> <x> A </x> <y> B </y> </r>", StringUtil.normaliseWhitespace(doc.body().html()))
nova chamada: assertEquals("<r> <x> A </x> <y> B </y> </r>", StringUtil.normaliseWhitespace(doc.body().html()), "Era esperado valores iguais, mas  'r x A /x y B /y /r' é diferente de " + result586 + " <StringUtil.normaliseWhitespace(doc.body().html())>")
chamada antiga: assertEquals("<A>ONE </A><A>Two</A>", doc.body().html())
nova chamada: assertEquals("<A>ONE </A><A>Two</A>", doc.body().html(), "Era esperado valores iguais, mas  'AONE /AATwo/A' é diferente de " + result587 + " <doc.body().html()>")
chamada antiga: assertEquals("<div>\n test\n</div>\n<p></p>", document.body().html())
nova chamada: assertEquals("<div>\n test\n</div>\n<p></p>", document.body().html(), "Era esperado valores iguais, mas  'div\n test\n/div\np/p' é diferente de " + result588 + " <document.body().html()>")
chamada antiga: assertEquals(0, parser.getErrors().size())
nova chamada: assertEquals(0, parser.getErrors().size(), "Era esperado valores iguais, mas  0 é diferente de " + result589 + " <parser.getErrors().size()>")
chamada antiga: assertTrue(Jsoup.isValid(html, Safelist.basic()))
nova chamada: assertTrue(Jsoup.isValid(html, Safelist.basic()), "Era esperado verdadeiro, mas " + result590 + " <Jsoup.isValid(html, Safelist.basic())> é falso")
chamada antiga: assertEquals("<p>test<br>test<br></p>", clean)
nova chamada: assertEquals("<p>test<br>test<br></p>", clean, "Era esperado valores iguais, mas  'ptestbrtestbr/p' é diferente de " + " clean")
chamada antiga: assertEquals(1, parser.getErrors().size())
nova chamada: assertEquals(1, parser.getErrors().size(), "Era esperado valores iguais, mas  1 é diferente de " + result591 + " <parser.getErrors().size()>")
chamada antiga: assertEquals("<3:8>: Tag [div] cannot be self closing; not a void tag", parser.getErrors().get(0).toString())
nova chamada: assertEquals("<3:8>: Tag [div] cannot be self closing; not a void tag", parser.getErrors().get(0).toString(), "Era esperado valores iguais, mas  '3:8: Tag [div] cannot be self closing; not a void tag' é diferente de " + result592 + " <parser.getErrors().get(0).toString()>")
chamada antiga: assertEquals("<p>test</p> <div></div> <div> Two </div>", StringUtil.normaliseWhitespace(clean))
nova chamada: assertEquals("<p>test</p> <div></div> <div> Two </div>", StringUtil.normaliseWhitespace(clean), "Era esperado valores iguais, mas  'ptest/p div/div div Two /div' é diferente de " + result593 + " <StringUtil.normaliseWhitespace(clean)>")
chamada antiga: assertEquals(200, doc.select("span").size())
nova chamada: assertEquals(200, doc.select("span").size(), "Era esperado valores iguais, mas  200 é diferente de " + result594 + " <doc.select('span').size()>")
chamada antiga: assertEquals(1, doc.select("p").size())
nova chamada: assertEquals(1, doc.select("p").size(), "Era esperado valores iguais, mas  1 é diferente de " + result595 + " <doc.select('p').size()>")
chamada antiga: assertTrue(doc.childNode(0) instanceof Comment)
nova chamada: assertTrue(doc.childNode(0) instanceof Comment, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("One\nTwo", pre.text())
nova chamada: assertEquals("One\nTwo", pre.text(), "Era esperado valores iguais, mas  'One\nTwo' é diferente de " + result596 + " <pre.text()>")
chamada antiga: assertEquals("\nOne\nTwo\n", pre.wholeText())
nova chamada: assertEquals("\nOne\nTwo\n", pre.wholeText(), "Era esperado valores iguais, mas  '\nOne\nTwo\n' é diferente de " + result597 + " <pre.wholeText()>")
chamada antiga: assertEquals("<!--?xml version=\"1.0\" encoding=\"utf-8\"?--><!-- so --> <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"><!-- what --> <html xml:lang=\"en\" lang=\"en\" xmlns=\"http://www.w3.org/1999/xhtml\"><!-- now --> <head><!-- then --> <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> <title>A Certain Kind of Test</title> </head> <body> <h1>Hello</h1>h1&gt; (There is a UTF8 hidden BOM at the top of this file.) </body> </html>", StringUtil.normaliseWhitespace(doc.html()))
nova chamada: assertEquals("<!--?xml version=\"1.0\" encoding=\"utf-8\"?--><!-- so --> <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"><!-- what --> <html xml:lang=\"en\" lang=\"en\" xmlns=\"http://www.w3.org/1999/xhtml\"><!-- now --> <head><!-- then --> <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> <title>A Certain Kind of Test</title> </head> <body> <h1>Hello</h1>h1&gt; (There is a UTF8 hidden BOM at the top of this file.) </body> </html>", StringUtil.normaliseWhitespace(doc.html()), "Era esperado valores iguais, mas  '!--?xml version=\'1.0\' encoding=\'utf-8\'?--!-- so -- !DOCTYPE html PUBLIC \'-//W3C//DTD XHTML 1.0 Transitional//EN\' \'http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\'!-- what -- html xml:lang=\'en\' lang=\'en\' xmlns=\'http://www.w3.org/1999/xhtml\'!-- now -- head!-- then -- meta http-equiv=\'Content-type\' content=\'text/html; charset=utf-8\' titleA Certain Kind of Test/title /head body h1Hello/h1h1&gt; (There is a UTF8 hidden BOM at the top of this file.) /body /html' é diferente de " + result598 + " <StringUtil.normaliseWhitespace(doc.html())>")
chamada antiga: assertEquals("A Certain Kind of Test", doc.head().select("title").text())
nova chamada: assertEquals("A Certain Kind of Test", doc.head().select("title").text(), "Era esperado valores iguais, mas  'A Certain Kind of Test' é diferente de " + result599 + " <doc.head().select('title').text()>")
chamada antiga: assertEquals("UTF-8", doc.charset().name())
nova chamada: assertEquals("UTF-8", doc.charset().name(), "Era esperado valores iguais, mas  'UTF-8' é diferente de " + result600 + " <doc.charset().name()>")
chamada antiga: assertEquals("One", doc.text())
nova chamada: assertEquals("One", doc.text(), "Era esperado valores iguais, mas  'One' é diferente de " + result601 + " <doc.text()>")
chamada antiga: assertEquals("<html><head><meta charset=\"UTF-8\"></head><body>One</body></html>", TextUtil.stripNewlines(html))
nova chamada: assertEquals("<html><head><meta charset=\"UTF-8\"></head><body>One</body></html>", TextUtil.stripNewlines(html), "Era esperado valores iguais, mas  'htmlheadmeta charset=\'UTF-8\'/headbodyOne/body/html' é diferente de " + result602 + " <TextUtil.stripNewlines(html)>")
chamada antiga: assertEquals(2, links.size())
nova chamada: assertEquals(2, links.size(), "Era esperado valores iguais, mas  2 é diferente de " + result603 + " <links.size()>")
chamada antiga: assertEquals(expectedHref, links.get(0).attr("href"))
nova chamada: assertEquals(expectedHref, links.get(0).attr("href"), "Era esperado valores iguais, mas  expectedHref é diferente de " + result604 + " <links.get(0).attr('href')>")
chamada antiga: assertEquals(expectedHref, links.get(1).attr("href"))
nova chamada: assertEquals(expectedHref, links.get(1).attr("href"), "Era esperado valores iguais, mas  expectedHref é diferente de " + result605 + " <links.get(1).attr('href')>")
chamada antiga: assertEquals("<div><div><textarea></textarea></div></div>", TextUtil.stripNewlines(doc.body().html()))
nova chamada: assertEquals("<div><div><textarea></textarea></div></div>", TextUtil.stripNewlines(doc.body().html()), "Era esperado valores iguais, mas  'divdivtextarea/textarea/div/div' é diferente de " + result606 + " <TextUtil.stripNewlines(doc.body().html())>")
chamada antiga: assertEquals("Just<a>One</a><a>Two</a>", doc.body().html())
nova chamada: assertEquals("Just<a>One</a><a>Two</a>", doc.body().html(), "Era esperado valores iguais, mas  'JustaOne/aaTwo/a' é diferente de " + result607 + " <doc.body().html()>")
chamada antiga: assertEquals("JustOneTwo", doc.body().text())
nova chamada: assertEquals("JustOneTwo", doc.body().text(), "Era esperado valores iguais, mas  'JustOneTwo' é diferente de " + result608 + " <doc.body().text()>")
chamada antiga: assertEquals("<div>\n" + " <p><a href=\"one\">One</a></p>\n" + " <p><a href=\"two\">Two</a></p>\n" + "</div>", doc.body().html())
nova chamada: assertEquals("<div>\n" + " <p><a href=\"one\">One</a></p>\n" + " <p><a href=\"two\">Two</a></p>\n" + "</div>", doc.body().html(), "Era esperado valores iguais, mas  'div\n' + ' pa href=\'one\'One/a/p\n' + ' pa href=\'two\'Two/a/p\n' + '/div' é diferente de " + result609 + " <doc.body().html()>")
chamada antiga: assertEquals("<body>\n" + " <p>1</p>\n" + " <p>2</p>\n" + "</body>", doc.body().outerHtml())
nova chamada: assertEquals("<body>\n" + " <p>1</p>\n" + " <p>2</p>\n" + "</body>", doc.body().outerHtml(), "Era esperado valores iguais, mas  'body\n' + ' p1/p\n' + ' p2/p\n' + '/body' é diferente de " + result610 + " <doc.body().outerHtml()>")
chamada antiga: assertEquals("<body>\n" + " <p>1</p>\n" + " <P>2</P>\n" + "</body>", caseDoc.body().outerHtml())
nova chamada: assertEquals("<body>\n" + " <p>1</p>\n" + " <P>2</P>\n" + "</body>", caseDoc.body().outerHtml(), "Era esperado valores iguais, mas  'body\n' + ' p1/p\n' + ' P2/P\n' + '/body' é diferente de " + result611 + " <caseDoc.body().outerHtml()>")
chamada antiga: assertEquals("H<sub>2</sub>O", clean)
nova chamada: assertEquals("H<sub>2</sub>O", clean, "Era esperado valores iguais, mas  'Hsub2/subO' é diferente de " + " clean")
chamada antiga: assertEquals("H2O", doc.text())
nova chamada: assertEquals("H2O", doc.text(), "Era esperado valores iguais, mas  'H2O' é diferente de " + result612 + " <doc.text()>")
chamada antiga: assertEquals("t<u>es</u>t <b>on</b> <i>f</i><u>ir</u>e", clean)
nova chamada: assertEquals("t<u>es</u>t <b>on</b> <i>f</i><u>ir</u>e", clean, "Era esperado valores iguais, mas  'tues/ut bon/b if/iuir/ue' é diferente de " + " clean")
chamada antiga: assertEquals("test on fire", doc.text())
nova chamada: assertEquals("test on fire", doc.text(), "Era esperado valores iguais, mas  'test on fire' é diferente de " + result613 + " <doc.text()>")
chamada antiga: assertEquals(text, doc.text())
nova chamada: assertEquals(text, doc.text(), "Era esperado valores iguais, mas  text é diferente de " + result614 + " <doc.text()>")
chamada antiga: assertEquals(2, select.childrenSize())
nova chamada: assertEquals(2, select.childrenSize(), "Era esperado valores iguais, mas  2 é diferente de " + result615 + " <select.childrenSize()>")
chamada antiga: assertEquals("<optgroup label=\"a\"> <option>one </option><option>two </option><option>three </option></optgroup><optgroup label=\"b\"> <option>four </option><option>fix </option><option>six </option></optgroup>", select.html())
nova chamada: assertEquals("<optgroup label=\"a\"> <option>one </option><option>two </option><option>three </option></optgroup><optgroup label=\"b\"> <option>four </option><option>fix </option><option>six </option></optgroup>", select.html(), "Era esperado valores iguais, mas  'optgroup label=\'a\' optionone /optionoptiontwo /optionoptionthree /option/optgroupoptgroup label=\'b\' optionfour /optionoptionfix /optionoptionsix /option/optgroup' é diferente de " + result616 + " <select.html()>")
chamada antiga: assertNull(treeBuilder.reader)
nova chamada: assertNull(treeBuilder.reader, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(treeBuilder.tokeniser)
nova chamada: assertNull(treeBuilder.tokeniser, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertTrue(doc.selectFirst("script").childNode(0) instanceof DataNode)
nova chamada: assertTrue(doc.selectFirst("script").childNode(0) instanceof DataNode, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(doc.selectFirst("style").childNode(0) instanceof DataNode)
nova chamada: assertTrue(doc.selectFirst("style").childNode(0) instanceof DataNode, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(doc.selectFirst("script").childNode(0) instanceof DataNode)
nova chamada: assertTrue(doc.selectFirst("script").childNode(0) instanceof DataNode, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(doc.selectFirst("style").childNode(0) instanceof DataNode)
nova chamada: assertTrue(doc.selectFirst("style").childNode(0) instanceof DataNode, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("YES YES", doc.selectFirst("textarea").val())
nova chamada: assertEquals("YES YES", doc.selectFirst("textarea").val(), "Era esperado valores iguais, mas  'YES YES' é diferente de " + result617 + " <doc.selectFirst('textarea').val()>")
chamada antiga: assertEquals("YES YES", doc.selectFirst("textarea").val())
nova chamada: assertEquals("YES YES", doc.selectFirst("textarea").val(), "Era esperado valores iguais, mas  'YES YES' é diferente de " + result618 + " <doc.selectFirst('textarea').val()>")
chamada antiga: assertEquals("<!doctype html>\n<html>\n<head>\n<title>Hello</title>\n</head>\n<body>\n<p>One</p>\n</body>\n</html>\n", doc.outerHtml())
nova chamada: assertEquals("<!doctype html>\n<html>\n<head>\n<title>Hello</title>\n</head>\n<body>\n<p>One</p>\n</body>\n</html>\n", doc.outerHtml(), "Era esperado valores iguais, mas  '!doctype html\nhtml\nhead\ntitleHello/title\n/head\nbody\npOne/p\n/body\n/html\n' é diferente de " + result619 + " <doc.outerHtml()>")
chamada antiga: assertEquals("<html><head></head><body>One<p>Hello!</p><p>There</p></body>  </html> ", doc.outerHtml())
nova chamada: assertEquals("<html><head></head><body>One<p>Hello!</p><p>There</p></body>  </html> ", doc.outerHtml(), "Era esperado valores iguais, mas  'htmlhead/headbodyOnepHello!/ppThere/p/body  /html ' é diferente de " + result620 + " <doc.outerHtml()>")
chamada antiga: assertEquals("One\tTwo", pre.text())
nova chamada: assertEquals("One\tTwo", pre.text(), "Era esperado valores iguais, mas  'One\tTwo' é diferente de " + result621 + " <pre.text()>")
chamada antiga: assertEquals("Three Four", span.text())
nova chamada: assertEquals("Three Four", span.text(), "Era esperado valores iguais, mas  'Three Four' é diferente de " + result622 + " <span.text()>")
chamada antiga: assertEquals("\tThree\tFour", span.wholeText())
nova chamada: assertEquals("\tThree\tFour", span.wholeText(), "Era esperado valores iguais, mas  '\tThree\tFour' é diferente de " + result623 + " <span.wholeText()>")
chamada antiga: assertEquals("One\tTwo Three Four", doc.body().text())
nova chamada: assertEquals("One\tTwo Three Four", doc.body().text(), "Era esperado valores iguais, mas  'One\tTwo Three Four' é diferente de " + result624 + " <doc.body().text()>")
chamada antiga: assertEquals("<pre>One\tTwo</pre><span> Three Four</span>", doc.body().html())
nova chamada: assertEquals("<pre>One\tTwo</pre><span> Three Four</span>", doc.body().html(), "Era esperado valores iguais, mas  'preOne\tTwo/prespan Three Four/span' é diferente de " + result625 + " <doc.body().html()>")
chamada antiga: assertEquals(html, doc.body().html())
nova chamada: assertEquals(html, doc.body().html(), "Era esperado valores iguais, mas  html é diferente de " + result626 + " <doc.body().html()>")
chamada antiga: assertNotNull(div)
nova chamada: assertNotNull(div, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("\nOne\nTwo Three\nFour", div.wholeText())
nova chamada: assertEquals("\nOne\nTwo Three\nFour", div.wholeText(), "Era esperado valores iguais, mas  '\nOne\nTwo Three\nFour' é diferente de " + result627 + " <div.wholeText()>")
chamada antiga: assertEquals("\nOne\nTwo ", div.wholeOwnText())
nova chamada: assertEquals("\nOne\nTwo ", div.wholeOwnText(), "Era esperado valores iguais, mas  '\nOne\nTwo ' é diferente de " + result628 + " <div.wholeOwnText()>")
chamada antiga: assertTrue(didAddElements(bare))
nova chamada: assertTrue(didAddElements(bare), "Era esperado verdadeiro, mas " + result629 + " <didAddElements(bare)> é falso")
chamada antiga: assertEquals("<tr>\n <tr>\n  <td>One</td>\n </tr>\n</tr>", element.outerHtml())
nova chamada: assertEquals("<tr>\n <tr>\n  <td>One</td>\n </tr>\n</tr>", element.outerHtml(), "Era esperado valores iguais, mas  'tr\n tr\n  tdOne/td\n /tr\n/tr' é diferente de " + result630 + " <element.outerHtml()>")
chamada antiga: assertEquals(1, nodes.size())
nova chamada: assertEquals(1, nodes.size(), "Era esperado valores iguais, mas  1 é diferente de " + result631 + " <nodes.size()>")
chamada antiga: assertEquals("h2", node.nodeName())
nova chamada: assertEquals("h2", node.nodeName(), "Era esperado valores iguais, mas  'h2' é diferente de " + result632 + " <node.nodeName()>")
chamada antiga: assertEquals("<p><h2>text</h2></p>", node.parent().outerHtml())
nova chamada: assertEquals("<p><h2>text</h2></p>", node.parent().outerHtml(), "Era esperado valores iguais, mas  'ph2text/h2/p' é diferente de " + result633 + " <node.parent().outerHtml()>")
chamada antiga: assertEquals(2, nodes.size())
nova chamada: assertEquals(2, nodes.size(), "Era esperado valores iguais, mas  2 é diferente de " + result634 + " <nodes.size()>")
chamada antiga: assertEquals("<p><p></p><a></a></p>", node.parent().outerHtml())
nova chamada: assertEquals("<p><p></p><a></a></p>", node.parent().outerHtml(), "Era esperado valores iguais, mas  'pp/pa/a/p' é diferente de " + result635 + " <node.parent().outerHtml()>")
chamada antiga: assertNotNull(doc)
nova chamada: assertNotNull(doc, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("<a> <b> </b></a><b><div><a> </a><a>test</a></div> </b>", TextUtil.stripNewlines(doc.body().html()))
nova chamada: assertEquals("<a> <b> </b></a><b><div><a> </a><a>test</a></div> </b>", TextUtil.stripNewlines(doc.body().html()), "Era esperado valores iguais, mas  'a b /b/abdiva /aatest/a/div /b' é diferente de " + result636 + " <TextUtil.stripNewlines(doc.body().html())>")
chamada antiga: assertEquals(Document.OutputSettings.Syntax.html, doc.outputSettings().syntax())
nova chamada: assertEquals(Document.OutputSettings.Syntax.html, doc.outputSettings().syntax(), "Era esperado valores iguais, mas  Document.OutputSettings.Syntax.html é diferente de " + result637 + " <doc.outputSettings().syntax()>")
chamada antiga: assertEquals("<body style=\"color: red\" name>\n <div></div>\n</body>", out)
nova chamada: assertEquals("<body style=\"color: red\" name>\n <div></div>\n</body>", out, "Era esperado valores iguais, mas  'body style=\'color: red\' name\n div/div\n/body' é diferente de " + " out")
chamada antiga: assertEquals(want, TextUtil.stripNewlines(doc.html()))
nova chamada: assertEquals(want, TextUtil.stripNewlines(doc.html()), "Era esperado valores iguais, mas  want é diferente de " + result638 + " <TextUtil.stripNewlines(doc.html())>")
chamada antiga: assertEquals(want, TextUtil.stripNewlines(doc.html()))
nova chamada: assertEquals(want, TextUtil.stripNewlines(doc.html()), "Era esperado valores iguais, mas  want é diferente de " + result639 + " <TextUtil.stripNewlines(doc.html())>")
chamada antiga: assertEquals(want, TextUtil.stripNewlines(doc.html()))
nova chamada: assertEquals(want, TextUtil.stripNewlines(doc.html()), "Era esperado valores iguais, mas  want é diferente de " + result640 + " <TextUtil.stripNewlines(doc.html())>")
chamada antiga: assertNotNull(tmplRow)
nova chamada: assertNotNull(tmplRow, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(tmplTbl)
nova chamada: assertNotNull(tmplTbl, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(want, TextUtil.stripNewlines(doc.html()))
nova chamada: assertEquals(want, TextUtil.stripNewlines(doc.html()), "Era esperado valores iguais, mas  want é diferente de " + result641 + " <TextUtil.stripNewlines(doc.html())>")
chamada antiga: assertEquals(want, TextUtil.stripNewlines(doc.html()))
nova chamada: assertEquals(want, TextUtil.stripNewlines(doc.html()), "Era esperado valores iguais, mas  want é diferente de " + result642 + " <TextUtil.stripNewlines(doc.html())>")
chamada antiga: assertEquals("p", p.normalName())
nova chamada: assertEquals("p", p.normalName(), "Era esperado valores iguais, mas  'p' é diferente de " + result643 + " <p.normalName()>")
chamada antiga: assertEquals(p, p1)
nova chamada: assertEquals(p, p1, "Era esperado valores iguais, mas  p é diferente de " + " p1")
chamada antiga: assertEquals(want, TextUtil.stripNewlines(table.html()))
nova chamada: assertEquals(want, TextUtil.stripNewlines(table.html()), "Era esperado valores iguais, mas  want é diferente de " + result644 + " <TextUtil.stripNewlines(table.html())>")
chamada antiga: assertEquals(want, TextUtil.stripNewlines(doc.body().html()))
nova chamada: assertEquals(want, TextUtil.stripNewlines(doc.body().html()), "Era esperado valores iguais, mas  want é diferente de " + result645 + " <TextUtil.stripNewlines(doc.body().html())>")
chamada antiga: assertEquals(want, TextUtil.stripNewlines(tmpl.html()))
nova chamada: assertEquals(want, TextUtil.stripNewlines(tmpl.html()), "Era esperado valores iguais, mas  want é diferente de " + result646 + " <TextUtil.stripNewlines(tmpl.html())>")
chamada antiga: assertEquals(want, TextUtil.stripNewlines(doc.html()))
nova chamada: assertEquals(want, TextUtil.stripNewlines(doc.html()), "Era esperado valores iguais, mas  want é diferente de " + result647 + " <TextUtil.stripNewlines(doc.html())>")
chamada antiga: assertEquals(want, TextUtil.stripNewlines(tmpl.html()))
nova chamada: assertEquals(want, TextUtil.stripNewlines(tmpl.html()), "Era esperado valores iguais, mas  want é diferente de " + result648 + " <TextUtil.stripNewlines(tmpl.html())>")
chamada antiga: assertEquals(want, TextUtil.stripNewlines(doc.html()))
nova chamada: assertEquals(want, TextUtil.stripNewlines(doc.html()), "Era esperado valores iguais, mas  want é diferente de " + result649 + " <TextUtil.stripNewlines(doc.html())>")
chamada antiga: assertEquals(want, TextUtil.stripNewlines(frag.body().html()))
nova chamada: assertEquals(want, TextUtil.stripNewlines(frag.body().html()), "Era esperado valores iguais, mas  want é diferente de " + result650 + " <TextUtil.stripNewlines(frag.body().html())>")
chamada antiga: assertNotNull(doc)
nova chamada: assertNotNull(doc, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("<template><form><hr><label>This is a searchable index. Enter search keywords: <input name=\"isindex\"></label><hr></form></template>", TextUtil.stripNewlines(doc.head().html()))
nova chamada: assertEquals("<template><form><hr><label>This is a searchable index. Enter search keywords: <input name=\"isindex\"></label><hr></form></template>", TextUtil.stripNewlines(doc.head().html()), "Era esperado valores iguais, mas  'templateformhrlabelThis is a searchable index. Enter search keywords: input name=\'isindex\'/labelhr/form/template' é diferente de " + result651 + " <TextUtil.stripNewlines(doc.head().html())>")
chamada antiga: assertNotNull(doc)
nova chamada: assertNotNull(doc, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("<template><select></select><input>&lt;</template>", TextUtil.stripNewlines(doc.head().html()))
nova chamada: assertEquals("<template><select></select><input>&lt;</template>", TextUtil.stripNewlines(doc.head().html()), "Era esperado valores iguais, mas  'templateselect/selectinput&lt;/template' é diferente de " + result652 + " <TextUtil.stripNewlines(doc.head().html())>")
chamada antiga: assertEquals("One & Two", s)
nova chamada: assertEquals("One & Two", s, "Era esperado valores iguais, mas  'One & Two' é diferente de " + " s")
chamada antiga: assertEquals(body, Parser.unescapeEntities(body, false))
nova chamada: assertEquals(body, Parser.unescapeEntities(body, false), "Era esperado valores iguais, mas  body é diferente de " + result653 + " <Parser.unescapeEntities(body, false)>")
chamada antiga: assertEquals(text, "H\u00E9llo, w\u00F6rld!")
nova chamada: assertEquals(text, "H\u00E9llo, w\u00F6rld!", "Era esperado valores iguais, mas  text é diferente de " + " 'H\u00E9llo, w\u00F6rld!'")
chamada antiga: assertEquals(38, constants.size())
nova chamada: assertEquals(38, constants.size(), "Era esperado valores iguais, mas  38 é diferente de " + result654 + " <constants.size()>")
chamada antiga: assertEquals("<html>\n" + " <head></head>\n" + " <body><a href=\"#1\"> </a>\n" + "  <div>\n" + "   <a href=\"#1\"> </a><a href=\"#2\">child</a>\n" + "  </div>\n" + " </body>\n" + "</html>", s)
nova chamada: assertEquals("<html>\n" + " <head></head>\n" + " <body><a href=\"#1\"> </a>\n" + "  <div>\n" + "   <a href=\"#1\"> </a><a href=\"#2\">child</a>\n" + "  </div>\n" + " </body>\n" + "</html>", s, "Era esperado valores iguais, mas  'html\n' + ' head/head\n' + ' bodya href=\'#1\' /a\n' + '  div\n' + '   a href=\'#1\' /aa href=\'#2\'child/a\n' + '  /div\n' + ' /body\n' + '/html' é diferente de " + " s")
chamada antiga: assertEquals("<html>\n" + " <head></head>\n" + " <body><a href=\"#1\"> </a>\n" + "  <div>\n" + "   <a href=\"#1\"> </a>\n" + "   <div>\n" + "    <a href=\"#1\"> </a><a href=\"#2\">child</a>\n" + "   </div>\n" + "  </div>\n" + " </body>\n" + "</html>", s)
nova chamada: assertEquals("<html>\n" + " <head></head>\n" + " <body><a href=\"#1\"> </a>\n" + "  <div>\n" + "   <a href=\"#1\"> </a>\n" + "   <div>\n" + "    <a href=\"#1\"> </a><a href=\"#2\">child</a>\n" + "   </div>\n" + "  </div>\n" + " </body>\n" + "</html>", s, "Era esperado valores iguais, mas  'html\n' + ' head/head\n' + ' bodya href=\'#1\' /a\n' + '  div\n' + '   a href=\'#1\' /a\n' + '   div\n' + '    a href=\'#1\' /aa href=\'#2\'child/a\n' + '   /div\n' + '  /div\n' + ' /body\n' + '/html' é diferente de " + " s")
chamada antiga: assertEquals(0, r.pos())
nova chamada: assertEquals(0, r.pos(), "Era esperado valores iguais, mas  0 é diferente de " + result655 + " <r.pos()>")
chamada antiga: assertEquals('o', r.current())
nova chamada: assertEquals('o', r.current(), "Era esperado valores iguais, mas  'o' é diferente de " + result656 + " <r.current()>")
chamada antiga: assertEquals('o', r.consume())
nova chamada: assertEquals('o', r.consume(), "Era esperado valores iguais, mas  'o' é diferente de " + result657 + " <r.consume()>")
chamada antiga: assertEquals(1, r.pos())
nova chamada: assertEquals(1, r.pos(), "Era esperado valores iguais, mas  1 é diferente de " + result658 + " <r.pos()>")
chamada antiga: assertEquals('n', r.current())
nova chamada: assertEquals('n', r.current(), "Era esperado valores iguais, mas  'n' é diferente de " + result659 + " <r.current()>")
chamada antiga: assertEquals(1, r.pos())
nova chamada: assertEquals(1, r.pos(), "Era esperado valores iguais, mas  1 é diferente de " + result660 + " <r.pos()>")
chamada antiga: assertEquals('n', r.consume())
nova chamada: assertEquals('n', r.consume(), "Era esperado valores iguais, mas  'n' é diferente de " + result661 + " <r.consume()>")
chamada antiga: assertEquals('e', r.consume())
nova chamada: assertEquals('e', r.consume(), "Era esperado valores iguais, mas  'e' é diferente de " + result662 + " <r.consume()>")
chamada antiga: assertTrue(r.isEmpty())
nova chamada: assertTrue(r.isEmpty(), "Era esperado verdadeiro, mas " + result663 + " <r.isEmpty()> é falso")
chamada antiga: assertEquals(CharacterReader.EOF, r.consume())
nova chamada: assertEquals(CharacterReader.EOF, r.consume(), "Era esperado valores iguais, mas  CharacterReader.EOF é diferente de " + result664 + " <r.consume()>")
chamada antiga: assertTrue(r.isEmpty())
nova chamada: assertTrue(r.isEmpty(), "Era esperado verdadeiro, mas " + result665 + " <r.isEmpty()> é falso")
chamada antiga: assertEquals(CharacterReader.EOF, r.consume())
nova chamada: assertEquals(CharacterReader.EOF, r.consume(), "Era esperado valores iguais, mas  CharacterReader.EOF é diferente de " + result666 + " <r.consume()>")
chamada antiga: assertEquals('o', r.consume())
nova chamada: assertEquals('o', r.consume(), "Era esperado valores iguais, mas  'o' é diferente de " + result667 + " <r.consume()>")
chamada antiga: assertEquals('n', r.current())
nova chamada: assertEquals('n', r.current(), "Era esperado valores iguais, mas  'n' é diferente de " + result668 + " <r.current()>")
chamada antiga: assertEquals('o', r.current())
nova chamada: assertEquals('o', r.current(), "Era esperado valores iguais, mas  'o' é diferente de " + result669 + " <r.current()>")
chamada antiga: assertEquals('o', r.consume())
nova chamada: assertEquals('o', r.consume(), "Era esperado valores iguais, mas  'o' é diferente de " + result670 + " <r.consume()>")
chamada antiga: assertEquals('n', r.consume())
nova chamada: assertEquals('n', r.consume(), "Era esperado valores iguais, mas  'n' é diferente de " + result671 + " <r.consume()>")
chamada antiga: assertEquals('e', r.consume())
nova chamada: assertEquals('e', r.consume(), "Era esperado valores iguais, mas  'e' é diferente de " + result672 + " <r.consume()>")
chamada antiga: assertTrue(r.isEmpty())
nova chamada: assertTrue(r.isEmpty(), "Era esperado verdadeiro, mas " + result673 + " <r.isEmpty()> é falso")
chamada antiga: assertEquals('e', r.current())
nova chamada: assertEquals('e', r.current(), "Era esperado valores iguais, mas  'e' é diferente de " + result674 + " <r.current()>")
chamada antiga: assertEquals('e', r.consume())
nova chamada: assertEquals('e', r.consume(), "Era esperado valores iguais, mas  'e' é diferente de " + result675 + " <r.consume()>")
chamada antiga: assertTrue(r.isEmpty())
nova chamada: assertTrue(r.isEmpty(), "Era esperado verdadeiro, mas " + result676 + " <r.isEmpty()> é falso")
chamada antiga: assertEquals(CharacterReader.EOF, r.consume())
nova chamada: assertEquals(CharacterReader.EOF, r.consume(), "Era esperado valores iguais, mas  CharacterReader.EOF é diferente de " + result677 + " <r.consume()>")
chamada antiga: assertTrue(r.isEmpty())
nova chamada: assertTrue(r.isEmpty(), "Era esperado verdadeiro, mas " + result678 + " <r.isEmpty()> é falso")
chamada antiga: assertEquals('e', r.consume())
nova chamada: assertEquals('e', r.consume(), "Era esperado valores iguais, mas  'e' é diferente de " + result679 + " <r.consume()>")
chamada antiga: assertTrue(r.isEmpty())
nova chamada: assertTrue(r.isEmpty(), "Era esperado verdadeiro, mas " + result680 + " <r.isEmpty()> é falso")
chamada antiga: assertEquals(CharacterReader.EOF, r.consume())
nova chamada: assertEquals(CharacterReader.EOF, r.consume(), "Era esperado valores iguais, mas  CharacterReader.EOF é diferente de " + result681 + " <r.consume()>")
chamada antiga: assertTrue(r.isEmpty())
nova chamada: assertTrue(r.isEmpty(), "Era esperado verdadeiro, mas " + result682 + " <r.isEmpty()> é falso")
chamada antiga: assertEquals(1, r.pos())
nova chamada: assertEquals(1, r.pos(), "Era esperado valores iguais, mas  1 é diferente de " + result683 + " <r.pos()>")
chamada antiga: assertEquals('n', r.consume())
nova chamada: assertEquals('n', r.consume(), "Era esperado valores iguais, mas  'n' é diferente de " + result684 + " <r.consume()>")
chamada antiga: assertEquals('e', r.consume())
nova chamada: assertEquals('e', r.consume(), "Era esperado valores iguais, mas  'e' é diferente de " + result685 + " <r.consume()>")
chamada antiga: assertTrue(r.isEmpty())
nova chamada: assertTrue(r.isEmpty(), "Era esperado verdadeiro, mas " + result686 + " <r.isEmpty()> é falso")
chamada antiga: assertEquals(1, r.pos())
nova chamada: assertEquals(1, r.pos(), "Era esperado valores iguais, mas  1 é diferente de " + result687 + " <r.pos()>")
chamada antiga: assertEquals('n', r.consume())
nova chamada: assertEquals('n', r.consume(), "Era esperado valores iguais, mas  'n' é diferente de " + result688 + " <r.consume()>")
chamada antiga: assertEquals(2, r.pos())
nova chamada: assertEquals(2, r.pos(), "Era esperado valores iguais, mas  2 é diferente de " + result689 + " <r.pos()>")
chamada antiga: assertEquals(in, toEnd)
nova chamada: assertEquals(in, toEnd, "Era esperado valores iguais, mas  in é diferente de " + " toEnd")
chamada antiga: assertTrue(r.isEmpty())
nova chamada: assertTrue(r.isEmpty(), "Era esperado verdadeiro, mas " + result690 + " <r.isEmpty()> é falso")
chamada antiga: assertEquals(-1, r.nextIndexOf('x'))
nova chamada: assertEquals(-1, r.nextIndexOf('x'), "Era esperado valores iguais, mas  -1 é diferente de " + result691 + " <r.nextIndexOf('x')>")
chamada antiga: assertEquals(3, r.nextIndexOf('h'))
nova chamada: assertEquals(3, r.nextIndexOf('h'), "Era esperado valores iguais, mas  3 é diferente de " + result692 + " <r.nextIndexOf('h')>")
chamada antiga: assertEquals("bla", pull)
nova chamada: assertEquals("bla", pull, "Era esperado valores iguais, mas  'bla' é diferente de " + " pull")
chamada antiga: assertEquals(2, r.nextIndexOf('l'))
nova chamada: assertEquals(2, r.nextIndexOf('l'), "Era esperado valores iguais, mas  2 é diferente de " + result693 + " <r.nextIndexOf('l')>")
chamada antiga: assertEquals(" blah", r.consumeToEnd())
nova chamada: assertEquals(" blah", r.consumeToEnd(), "Era esperado valores iguais, mas  ' blah' é diferente de " + result694 + " <r.consumeToEnd()>")
chamada antiga: assertEquals(-1, r.nextIndexOf('x'))
nova chamada: assertEquals(-1, r.nextIndexOf('x'), "Era esperado valores iguais, mas  -1 é diferente de " + result695 + " <r.nextIndexOf('x')>")
chamada antiga: assertEquals(-1, r.nextIndexOf("Foo"))
nova chamada: assertEquals(-1, r.nextIndexOf("Foo"), "Era esperado valores iguais, mas  -1 é diferente de " + result696 + " <r.nextIndexOf('Foo')>")
chamada antiga: assertEquals(4, r.nextIndexOf("Two"))
nova chamada: assertEquals(4, r.nextIndexOf("Two"), "Era esperado valores iguais, mas  4 é diferente de " + result697 + " <r.nextIndexOf('Two')>")
chamada antiga: assertEquals("One Two ", r.consumeTo("something"))
nova chamada: assertEquals("One Two ", r.consumeTo("something"), "Era esperado valores iguais, mas  'One Two ' é diferente de " + result698 + " <r.consumeTo('something')>")
chamada antiga: assertEquals(10, r.nextIndexOf("Two"))
nova chamada: assertEquals(10, r.nextIndexOf("Two"), "Era esperado valores iguais, mas  10 é diferente de " + result699 + " <r.nextIndexOf('Two')>")
chamada antiga: assertEquals("something Two Three Four", r.consumeToEnd())
nova chamada: assertEquals("something Two Three Four", r.consumeToEnd(), "Era esperado valores iguais, mas  'something Two Three Four' é diferente de " + result700 + " <r.consumeToEnd()>")
chamada antiga: assertEquals(-1, r.nextIndexOf("Two"))
nova chamada: assertEquals(-1, r.nextIndexOf("Two"), "Era esperado valores iguais, mas  -1 é diferente de " + result701 + " <r.nextIndexOf('Two')>")
chamada antiga: assertEquals(-1, r.nextIndexOf("]]>"))
nova chamada: assertEquals(-1, r.nextIndexOf("]]>"), "Era esperado valores iguais, mas  -1 é diferente de " + result702 + " <r.nextIndexOf(']]>')>")
chamada antiga: assertEquals("One ", r.consumeTo('T'))
nova chamada: assertEquals("One ", r.consumeTo('T'), "Era esperado valores iguais, mas  'One ' é diferente de " + result703 + " <r.consumeTo('T')>")
chamada antiga: assertEquals("", r.consumeTo('T'))
nova chamada: assertEquals("", r.consumeTo('T'), "Era esperado valores iguais, mas  '' é diferente de " + result704 + " <r.consumeTo('T')>")
chamada antiga: assertEquals('T', r.consume())
nova chamada: assertEquals('T', r.consume(), "Era esperado valores iguais, mas  'T' é diferente de " + result705 + " <r.consume()>")
chamada antiga: assertEquals("wo ", r.consumeTo('T'))
nova chamada: assertEquals("wo ", r.consumeTo('T'), "Era esperado valores iguais, mas  'wo ' é diferente de " + result706 + " <r.consumeTo('T')>")
chamada antiga: assertEquals('T', r.consume())
nova chamada: assertEquals('T', r.consume(), "Era esperado valores iguais, mas  'T' é diferente de " + result707 + " <r.consume()>")
chamada antiga: assertEquals("hree", r.consumeTo('T'))
nova chamada: assertEquals("hree", r.consumeTo('T'), "Era esperado valores iguais, mas  'hree' é diferente de " + result708 + " <r.consumeTo('T')>")
chamada antiga: assertEquals("One ", r.consumeTo("Two"))
nova chamada: assertEquals("One ", r.consumeTo("Two"), "Era esperado valores iguais, mas  'One ' é diferente de " + result709 + " <r.consumeTo('Two')>")
chamada antiga: assertEquals('T', r.consume())
nova chamada: assertEquals('T', r.consume(), "Era esperado valores iguais, mas  'T' é diferente de " + result710 + " <r.consume()>")
chamada antiga: assertEquals("wo ", r.consumeTo("Two"))
nova chamada: assertEquals("wo ", r.consumeTo("Two"), "Era esperado valores iguais, mas  'wo ' é diferente de " + result711 + " <r.consumeTo('Two')>")
chamada antiga: assertEquals('T', r.consume())
nova chamada: assertEquals('T', r.consume(), "Era esperado valores iguais, mas  'T' é diferente de " + result712 + " <r.consume()>")
chamada antiga: assertEquals("wo Four", builder.toString())
nova chamada: assertEquals("wo Four", builder.toString(), "Era esperado valores iguais, mas  'wo Four' é diferente de " + result713 + " <builder.toString()>")
chamada antiga: assertEquals('O', r.consume())
nova chamada: assertEquals('O', r.consume(), "Era esperado valores iguais, mas  'O' é diferente de " + result714 + " <r.consume()>")
chamada antiga: assertEquals('e', r.consume())
nova chamada: assertEquals('e', r.consume(), "Era esperado valores iguais, mas  'e' é diferente de " + result715 + " <r.consume()>")
chamada antiga: assertEquals("One ", r.consumeToAny('&', ';'))
nova chamada: assertEquals("One ", r.consumeToAny('&', ';'), "Era esperado valores iguais, mas  'One ' é diferente de " + result716 + " <r.consumeToAny('&', ';')>")
chamada antiga: assertTrue(r.matches('&'))
nova chamada: assertTrue(r.matches('&'), "Era esperado verdadeiro, mas " + result717 + " <r.matches('&')> é falso")
chamada antiga: assertTrue(r.matches("&bar;"))
nova chamada: assertTrue(r.matches("&bar;"), "Era esperado verdadeiro, mas " + result718 + " <r.matches('&bar;')> é falso")
chamada antiga: assertEquals('&', r.consume())
nova chamada: assertEquals('&', r.consume(), "Era esperado valores iguais, mas  '&' é diferente de " + result719 + " <r.consume()>")
chamada antiga: assertEquals("bar", r.consumeToAny('&', ';'))
nova chamada: assertEquals("bar", r.consumeToAny('&', ';'), "Era esperado valores iguais, mas  'bar' é diferente de " + result720 + " <r.consumeToAny('&', ';')>")
chamada antiga: assertEquals(';', r.consume())
nova chamada: assertEquals(';', r.consume(), "Era esperado valores iguais, mas  ';' é diferente de " + result721 + " <r.consume()>")
chamada antiga: assertEquals(" qux", r.consumeToAny('&', ';'))
nova chamada: assertEquals(" qux", r.consumeToAny('&', ';'), "Era esperado valores iguais, mas  ' qux' é diferente de " + result722 + " <r.consumeToAny('&', ';')>")
chamada antiga: assertEquals("One", r.consumeLetterSequence())
nova chamada: assertEquals("One", r.consumeLetterSequence(), "Era esperado valores iguais, mas  'One' é diferente de " + result723 + " <r.consumeLetterSequence()>")
chamada antiga: assertEquals(" &", r.consumeTo("bar;"))
nova chamada: assertEquals(" &", r.consumeTo("bar;"), "Era esperado valores iguais, mas  ' &' é diferente de " + result724 + " <r.consumeTo('bar;')>")
chamada antiga: assertEquals("bar", r.consumeLetterSequence())
nova chamada: assertEquals("bar", r.consumeLetterSequence(), "Era esperado valores iguais, mas  'bar' é diferente de " + result725 + " <r.consumeLetterSequence()>")
chamada antiga: assertEquals("; qux", r.consumeToEnd())
nova chamada: assertEquals("; qux", r.consumeToEnd(), "Era esperado valores iguais, mas  '; qux' é diferente de " + result726 + " <r.consumeToEnd()>")
chamada antiga: assertEquals("One12", r.consumeLetterThenDigitSequence())
nova chamada: assertEquals("One12", r.consumeLetterThenDigitSequence(), "Era esperado valores iguais, mas  'One12' é diferente de " + result727 + " <r.consumeLetterThenDigitSequence()>")
chamada antiga: assertEquals(' ', r.consume())
nova chamada: assertEquals(' ', r.consume(), "Era esperado valores iguais, mas  ' ' é diferente de " + result728 + " <r.consume()>")
chamada antiga: assertEquals("Two", r.consumeLetterThenDigitSequence())
nova chamada: assertEquals("Two", r.consumeLetterThenDigitSequence(), "Era esperado valores iguais, mas  'Two' é diferente de " + result729 + " <r.consumeLetterThenDigitSequence()>")
chamada antiga: assertEquals(" &bar; qux", r.consumeToEnd())
nova chamada: assertEquals(" &bar; qux", r.consumeToEnd(), "Era esperado valores iguais, mas  ' &bar; qux' é diferente de " + result730 + " <r.consumeToEnd()>")
chamada antiga: assertTrue(r.matches('O'))
nova chamada: assertTrue(r.matches('O'), "Era esperado verdadeiro, mas " + result731 + " <r.matches('O')> é falso")
chamada antiga: assertTrue(r.matches("One Two Three"))
nova chamada: assertTrue(r.matches("One Two Three"), "Era esperado verdadeiro, mas " + result732 + " <r.matches('One Two Three')> é falso")
chamada antiga: assertTrue(r.matches("One"))
nova chamada: assertTrue(r.matches("One"), "Era esperado verdadeiro, mas " + result733 + " <r.matches('One')> é falso")
chamada antiga: assertEquals('O', r.consume())
nova chamada: assertEquals('O', r.consume(), "Era esperado valores iguais, mas  'O' é diferente de " + result734 + " <r.consume()>")
chamada antiga: assertTrue(r.matches("ne Two Three"))
nova chamada: assertTrue(r.matches("ne Two Three"), "Era esperado verdadeiro, mas " + result735 + " <r.matches('ne Two Three')> é falso")
chamada antiga: assertEquals("ne Two Three", r.consumeToEnd())
nova chamada: assertEquals("ne Two Three", r.consumeToEnd(), "Era esperado valores iguais, mas  'ne Two Three' é diferente de " + result736 + " <r.consumeToEnd()>")
chamada antiga: assertTrue(r.isEmpty())
nova chamada: assertTrue(r.isEmpty(), "Era esperado verdadeiro, mas " + result737 + " <r.isEmpty()> é falso")
chamada antiga: assertTrue(r.matchesIgnoreCase("O"))
nova chamada: assertTrue(r.matchesIgnoreCase("O"), "Era esperado verdadeiro, mas " + result738 + " <r.matchesIgnoreCase('O')> é falso")
chamada antiga: assertTrue(r.matchesIgnoreCase("o"))
nova chamada: assertTrue(r.matchesIgnoreCase("o"), "Era esperado verdadeiro, mas " + result739 + " <r.matchesIgnoreCase('o')> é falso")
chamada antiga: assertTrue(r.matches('O'))
nova chamada: assertTrue(r.matches('O'), "Era esperado verdadeiro, mas " + result740 + " <r.matches('O')> é falso")
chamada antiga: assertTrue(r.matchesIgnoreCase("One Two Three"))
nova chamada: assertTrue(r.matchesIgnoreCase("One Two Three"), "Era esperado verdadeiro, mas " + result741 + " <r.matchesIgnoreCase('One Two Three')> é falso")
chamada antiga: assertTrue(r.matchesIgnoreCase("ONE two THREE"))
nova chamada: assertTrue(r.matchesIgnoreCase("ONE two THREE"), "Era esperado verdadeiro, mas " + result742 + " <r.matchesIgnoreCase('ONE two THREE')> é falso")
chamada antiga: assertTrue(r.matchesIgnoreCase("One"))
nova chamada: assertTrue(r.matchesIgnoreCase("One"), "Era esperado verdadeiro, mas " + result743 + " <r.matchesIgnoreCase('One')> é falso")
chamada antiga: assertTrue(r.matchesIgnoreCase("one"))
nova chamada: assertTrue(r.matchesIgnoreCase("one"), "Era esperado verdadeiro, mas " + result744 + " <r.matchesIgnoreCase('one')> é falso")
chamada antiga: assertEquals('O', r.consume())
nova chamada: assertEquals('O', r.consume(), "Era esperado valores iguais, mas  'O' é diferente de " + result745 + " <r.consume()>")
chamada antiga: assertTrue(r.matchesIgnoreCase("NE Two Three"))
nova chamada: assertTrue(r.matchesIgnoreCase("NE Two Three"), "Era esperado verdadeiro, mas " + result746 + " <r.matchesIgnoreCase('NE Two Three')> é falso")
chamada antiga: assertEquals("ne Two Three", r.consumeToEnd())
nova chamada: assertEquals("ne Two Three", r.consumeToEnd(), "Era esperado valores iguais, mas  'ne Two Three' é diferente de " + result747 + " <r.consumeToEnd()>")
chamada antiga: assertTrue(r.containsIgnoreCase("two"))
nova chamada: assertTrue(r.containsIgnoreCase("two"), "Era esperado verdadeiro, mas " + result748 + " <r.containsIgnoreCase('two')> é falso")
chamada antiga: assertTrue(r.containsIgnoreCase("three"))
nova chamada: assertTrue(r.containsIgnoreCase("three"), "Era esperado verdadeiro, mas " + result749 + " <r.containsIgnoreCase('three')> é falso")
chamada antiga: assertTrue(r.containsIgnoreCase("</title>"))
nova chamada: assertTrue(r.containsIgnoreCase("</title>"), "Era esperado verdadeiro, mas " + result750 + " <r.containsIgnoreCase('</title>')> é falso")
chamada antiga: assertTrue(r.containsIgnoreCase("</title>"))
nova chamada: assertTrue(r.containsIgnoreCase("</title>"), "Era esperado verdadeiro, mas " + result751 + " <r.containsIgnoreCase('</title>')> é falso")
chamada antiga: assertTrue(r.containsIgnoreCase("</title>"))
nova chamada: assertTrue(r.containsIgnoreCase("</title>"), "Era esperado verdadeiro, mas " + result752 + " <r.containsIgnoreCase('</title>')> é falso")
chamada antiga: assertTrue(r.matches("<p>"))
nova chamada: assertTrue(r.matches("<p>"), "Era esperado verdadeiro, mas " + result753 + " <r.matches('<p>')> é falso")
chamada antiga: assertTrue(r.containsIgnoreCase("</title>"))
nova chamada: assertTrue(r.containsIgnoreCase("</title>"), "Era esperado verdadeiro, mas " + result754 + " <r.containsIgnoreCase('</title>')> é falso")
chamada antiga: assertTrue(r.containsIgnoreCase("</title>"))
nova chamada: assertTrue(r.containsIgnoreCase("</title>"), "Era esperado verdadeiro, mas " + result755 + " <r.containsIgnoreCase('</title>')> é falso")
chamada antiga: assertTrue(r.matches("<p>"))
nova chamada: assertTrue(r.matches("<p>"), "Era esperado verdadeiro, mas " + result756 + " <r.matches('<p>')> é falso")
chamada antiga: assertTrue(r.matches("<foo>"))
nova chamada: assertTrue(r.matches("<foo>"), "Era esperado verdadeiro, mas " + result757 + " <r.matches('<foo>')> é falso")
chamada antiga: assertTrue(r.containsIgnoreCase("</TITLE>"))
nova chamada: assertTrue(r.containsIgnoreCase("</TITLE>"), "Era esperado verdadeiro, mas " + result758 + " <r.containsIgnoreCase('</TITLE>')> é falso")
chamada antiga: assertTrue(r.containsIgnoreCase("</title>"))
nova chamada: assertTrue(r.containsIgnoreCase("</title>"), "Era esperado verdadeiro, mas " + result759 + " <r.containsIgnoreCase('</title>')> é falso")
chamada antiga: assertEquals("One", r.consumeToAny(scan))
nova chamada: assertEquals("One", r.consumeToAny(scan), "Era esperado valores iguais, mas  'One' é diferente de " + result760 + " <r.consumeToAny(scan)>")
chamada antiga: assertTrue(r.matchesAny(scan))
nova chamada: assertTrue(r.matchesAny(scan), "Era esperado verdadeiro, mas " + result761 + " <r.matchesAny(scan)> é falso")
chamada antiga: assertEquals('\n', r.consume())
nova chamada: assertEquals('\n', r.consume(), "Era esperado valores iguais, mas  '\n' é diferente de " + result762 + " <r.consume()>")
chamada antiga: assertEquals("Check", one)
nova chamada: assertEquals("Check", one, "Era esperado valores iguais, mas  'Check' é diferente de " + " one")
chamada antiga: assertEquals("Check", two)
nova chamada: assertEquals("Check", two, "Era esperado valores iguais, mas  'Check' é diferente de " + " two")
chamada antiga: assertEquals("Check", three)
nova chamada: assertEquals("Check", three, "Era esperado valores iguais, mas  'Check' é diferente de " + " three")
chamada antiga: assertEquals("CHOKE", four)
nova chamada: assertEquals("CHOKE", four, "Era esperado valores iguais, mas  'CHOKE' é diferente de " + " four")
chamada antiga: assertSame(one, two)
nova chamada: assertSame(one, two, "Era esperado objetos iguais, mas  one é diferente de " + " two")
chamada antiga: assertSame(two, three)
nova chamada: assertSame(two, three, "Era esperado objetos iguais, mas  two é diferente de " + " three")
chamada antiga: assertNotSame(three, four)
nova chamada: assertNotSame(three, four, "Era esperado objetos diferentes, mas  three é igual a " + " four")
chamada antiga: assertNotSame(four, five)
nova chamada: assertNotSame(four, five, "Era esperado objetos diferentes, mas  four é igual a " + " five")
chamada antiga: assertEquals(five, "A string that is longer than 16 chars")
nova chamada: assertEquals(five, "A string that is longer than 16 chars", "Era esperado valores iguais, mas  five é diferente de " + " 'A string that is longer than 16 chars'")
chamada antiga: assertTrue(r.rangeEquals(0, 5, "Check"))
nova chamada: assertTrue(r.rangeEquals(0, 5, "Check"), "Era esperado verdadeiro, mas " + result763 + " <r.rangeEquals(0, 5, 'Check')> é falso")
chamada antiga: assertTrue(r.rangeEquals(6, 5, "Check"))
nova chamada: assertTrue(r.rangeEquals(6, 5, "Check"), "Era esperado verdadeiro, mas " + result764 + " <r.rangeEquals(6, 5, 'Check')> é falso")
chamada antiga: assertTrue(r.rangeEquals(12, 5, "Check"))
nova chamada: assertTrue(r.rangeEquals(12, 5, "Check"), "Era esperado verdadeiro, mas " + result765 + " <r.rangeEquals(12, 5, 'Check')> é falso")
chamada antiga: assertTrue(r.rangeEquals(18, 5, "CHOKE"))
nova chamada: assertTrue(r.rangeEquals(18, 5, "CHOKE"), "Era esperado verdadeiro, mas " + result766 + " <r.rangeEquals(18, 5, 'CHOKE')> é falso")
chamada antiga: assertTrue(r.matchConsume("One"))
nova chamada: assertTrue(r.matchConsume("One"), "Era esperado verdadeiro, mas " + result767 + " <r.matchConsume('One')> é falso")
chamada antiga: assertTrue(r.isEmpty())
nova chamada: assertTrue(r.isEmpty(), "Era esperado verdadeiro, mas " + result768 + " <r.isEmpty()> é falso")
chamada antiga: assertEquals("Two", two)
nova chamada: assertEquals("Two", two, "Era esperado valores iguais, mas  'Two' é diferente de " + " two")
chamada antiga: assertTrue(r.matchConsume("<!"))
nova chamada: assertTrue(r.matchConsume("<!"), "Era esperado verdadeiro, mas " + result769 + " <r.matchConsume('<!')> é falso")
chamada antiga: assertTrue(r.isEmpty())
nova chamada: assertTrue(r.isEmpty(), "Era esperado verdadeiro, mas " + result770 + " <r.isEmpty()> é falso")
chamada antiga: assertEquals("", after)
nova chamada: assertEquals("", after, "Era esperado valores iguais, mas  '' é diferente de " + " after")
chamada antiga: assertTrue(r.isEmpty())
nova chamada: assertTrue(r.isEmpty(), "Era esperado verdadeiro, mas " + result771 + " <r.isEmpty()> é falso")
chamada antiga: assertEquals("How", r.consumeTo(' '))
nova chamada: assertEquals("How", r.consumeTo(' '), "Era esperado valores iguais, mas  'How' é diferente de " + result772 + " <r.consumeTo(' ')>")
chamada antiga: assertEquals(' ', r.consume())
nova chamada: assertEquals(' ', r.consume(), "Era esperado valores iguais, mas  ' ' é diferente de " + result773 + " <r.consume()>")
chamada antiga: assertEquals(4, r.pos())
nova chamada: assertEquals(4, r.pos(), "Era esperado valores iguais, mas  4 é diferente de " + result774 + " <r.pos()>")
chamada antiga: assertEquals('a', r.consume())
nova chamada: assertEquals('a', r.consume(), "Era esperado valores iguais, mas  'a' é diferente de " + result775 + " <r.consume()>")
chamada antiga: assertEquals(5, r.pos())
nova chamada: assertEquals(5, r.pos(), "Era esperado valores iguais, mas  5 é diferente de " + result776 + " <r.pos()>")
chamada antiga: assertEquals('b', r.consume())
nova chamada: assertEquals('b', r.consume(), "Era esperado valores iguais, mas  'b' é diferente de " + result777 + " <r.consume()>")
chamada antiga: assertEquals('o', r.consume())
nova chamada: assertEquals('o', r.consume(), "Era esperado valores iguais, mas  'o' é diferente de " + result778 + " <r.consume()>")
chamada antiga: assertEquals('u', r.consume())
nova chamada: assertEquals('u', r.consume(), "Era esperado valores iguais, mas  'u' é diferente de " + result779 + " <r.consume()>")
chamada antiga: assertEquals('t', r.consume())
nova chamada: assertEquals('t', r.consume(), "Era esperado valores iguais, mas  't' é diferente de " + result780 + " <r.consume()>")
chamada antiga: assertEquals(' ', r.consume())
nova chamada: assertEquals(' ', r.consume(), "Era esperado valores iguais, mas  ' ' é diferente de " + result781 + " <r.consume()>")
chamada antiga: assertEquals('n', r.consume())
nova chamada: assertEquals('n', r.consume(), "Era esperado valores iguais, mas  'n' é diferente de " + result782 + " <r.consume()>")
chamada antiga: assertEquals('o', r.consume())
nova chamada: assertEquals('o', r.consume(), "Era esperado valores iguais, mas  'o' é diferente de " + result783 + " <r.consume()>")
chamada antiga: assertEquals('w', r.consume())
nova chamada: assertEquals('w', r.consume(), "Era esperado valores iguais, mas  'w' é diferente de " + result784 + " <r.consume()>")
chamada antiga: assertTrue(r.isEmpty())
nova chamada: assertTrue(r.isEmpty(), "Era esperado verdadeiro, mas " + result785 + " <r.isEmpty()> é falso")
chamada antiga: assertTrue(r.isEmpty())
nova chamada: assertTrue(r.isEmpty(), "Era esperado verdadeiro, mas " + result786 + " <r.isEmpty()> é falso")
chamada antiga: assertTrue(reader.isTrackNewlines())
nova chamada: assertTrue(reader.isTrackNewlines(), "Era esperado verdadeiro, mas " + result787 + " <reader.isTrackNewlines()> é falso")
chamada antiga: assertTrue(track.isTrackNewlines())
nova chamada: assertTrue(track.isTrackNewlines(), "Era esperado verdadeiro, mas " + result788 + " <track.isTrackNewlines()> é falso")
chamada antiga: assertEquals(0, noTrack.pos())
nova chamada: assertEquals(0, noTrack.pos(), "Era esperado valores iguais, mas  0 é diferente de " + result789 + " <noTrack.pos()>")
chamada antiga: assertEquals(1, noTrack.lineNumber())
nova chamada: assertEquals(1, noTrack.lineNumber(), "Era esperado valores iguais, mas  1 é diferente de " + result790 + " <noTrack.lineNumber()>")
chamada antiga: assertEquals(1, noTrack.columnNumber())
nova chamada: assertEquals(1, noTrack.columnNumber(), "Era esperado valores iguais, mas  1 é diferente de " + result791 + " <noTrack.columnNumber()>")
chamada antiga: assertEquals(12, noTrack.pos())
nova chamada: assertEquals(12, noTrack.pos(), "Era esperado valores iguais, mas  12 é diferente de " + result792 + " <noTrack.pos()>")
chamada antiga: assertEquals(1, noTrack.lineNumber())
nova chamada: assertEquals(1, noTrack.lineNumber(), "Era esperado valores iguais, mas  1 é diferente de " + result793 + " <noTrack.lineNumber()>")
chamada antiga: assertEquals(13, noTrack.columnNumber())
nova chamada: assertEquals(13, noTrack.columnNumber(), "Era esperado valores iguais, mas  13 é diferente de " + result794 + " <noTrack.columnNumber()>")
chamada antiga: assertEquals("1:13", noTrack.cursorPos())
nova chamada: assertEquals("1:13", noTrack.cursorPos(), "Era esperado valores iguais, mas  '1:13' é diferente de " + result795 + " <noTrack.cursorPos()>")
chamada antiga: assertEquals(32778, noTrack.pos())
nova chamada: assertEquals(32778, noTrack.pos(), "Era esperado valores iguais, mas  32778 é diferente de " + result796 + " <noTrack.pos()>")
chamada antiga: assertEquals(1, noTrack.lineNumber())
nova chamada: assertEquals(1, noTrack.lineNumber(), "Era esperado valores iguais, mas  1 é diferente de " + result797 + " <noTrack.lineNumber()>")
chamada antiga: assertEquals(noTrack.pos() + 1, noTrack.columnNumber())
nova chamada: assertEquals(noTrack.pos() + 1, noTrack.columnNumber(), "Era esperado valores iguais, mas  noTrack.pos() + 1 é diferente de " + result798 + " <noTrack.columnNumber()>")
chamada antiga: assertEquals("1:32779", noTrack.cursorPos())
nova chamada: assertEquals("1:32779", noTrack.cursorPos(), "Era esperado valores iguais, mas  '1:32779' é diferente de " + result799 + " <noTrack.cursorPos()>")
chamada antiga: assertEquals(0, track.pos())
nova chamada: assertEquals(0, track.pos(), "Era esperado valores iguais, mas  0 é diferente de " + result800 + " <track.pos()>")
chamada antiga: assertEquals(1, track.lineNumber())
nova chamada: assertEquals(1, track.lineNumber(), "Era esperado valores iguais, mas  1 é diferente de " + result801 + " <track.lineNumber()>")
chamada antiga: assertEquals(1, track.columnNumber())
nova chamada: assertEquals(1, track.columnNumber(), "Era esperado valores iguais, mas  1 é diferente de " + result802 + " <track.columnNumber()>")
chamada antiga: assertEquals(1, track.lineNumber())
nova chamada: assertEquals(1, track.lineNumber(), "Era esperado valores iguais, mas  1 é diferente de " + result803 + " <track.lineNumber()>")
chamada antiga: assertEquals(6, track.columnNumber())
nova chamada: assertEquals(6, track.columnNumber(), "Era esperado valores iguais, mas  6 é diferente de " + result804 + " <track.columnNumber()>")
chamada antiga: assertEquals(2, track.lineNumber())
nova chamada: assertEquals(2, track.lineNumber(), "Era esperado valores iguais, mas  2 é diferente de " + result805 + " <track.lineNumber()>")
chamada antiga: assertEquals(1, track.columnNumber())
nova chamada: assertEquals(1, track.columnNumber(), "Era esperado valores iguais, mas  1 é diferente de " + result806 + " <track.columnNumber()>")
chamada antiga: assertEquals("<bar>", track.consumeTo('\n'))
nova chamada: assertEquals("<bar>", track.consumeTo('\n'), "Era esperado valores iguais, mas  'bar' é diferente de " + result807 + " <track.consumeTo('\n')>")
chamada antiga: assertEquals(2, track.lineNumber())
nova chamada: assertEquals(2, track.lineNumber(), "Era esperado valores iguais, mas  2 é diferente de " + result808 + " <track.lineNumber()>")
chamada antiga: assertEquals(6, track.columnNumber())
nova chamada: assertEquals(6, track.columnNumber(), "Era esperado valores iguais, mas  6 é diferente de " + result809 + " <track.columnNumber()>")
chamada antiga: assertEquals("\n", track.consumeTo("<qux>"))
nova chamada: assertEquals("\n", track.consumeTo("<qux>"), "Era esperado valores iguais, mas  '\n' é diferente de " + result810 + " <track.consumeTo('<qux>')>")
chamada antiga: assertEquals(12, track.pos())
nova chamada: assertEquals(12, track.pos(), "Era esperado valores iguais, mas  12 é diferente de " + result811 + " <track.pos()>")
chamada antiga: assertEquals(3, track.lineNumber())
nova chamada: assertEquals(3, track.lineNumber(), "Era esperado valores iguais, mas  3 é diferente de " + result812 + " <track.lineNumber()>")
chamada antiga: assertEquals(1, track.columnNumber())
nova chamada: assertEquals(1, track.columnNumber(), "Era esperado valores iguais, mas  1 é diferente de " + result813 + " <track.columnNumber()>")
chamada antiga: assertEquals("3:1", track.cursorPos())
nova chamada: assertEquals("3:1", track.cursorPos(), "Era esperado valores iguais, mas  '3:1' é diferente de " + result814 + " <track.cursorPos()>")
chamada antiga: assertEquals("<qux>", track.consumeTo('\n'))
nova chamada: assertEquals("<qux>", track.consumeTo('\n'), "Era esperado valores iguais, mas  'qux' é diferente de " + result815 + " <track.consumeTo('\n')>")
chamada antiga: assertEquals("3:6", track.cursorPos())
nova chamada: assertEquals("3:6", track.cursorPos(), "Era esperado valores iguais, mas  '3:6' é diferente de " + result816 + " <track.cursorPos()>")
chamada antiga: assertEquals(32778, track.pos())
nova chamada: assertEquals(32778, track.pos(), "Era esperado valores iguais, mas  32778 é diferente de " + result817 + " <track.pos()>")
chamada antiga: assertEquals(4, track.lineNumber())
nova chamada: assertEquals(4, track.lineNumber(), "Era esperado valores iguais, mas  4 é diferente de " + result818 + " <track.lineNumber()>")
chamada antiga: assertEquals(32761, track.columnNumber())
nova chamada: assertEquals(32761, track.columnNumber(), "Era esperado valores iguais, mas  32761 é diferente de " + result819 + " <track.columnNumber()>")
chamada antiga: assertEquals("4:32761", track.cursorPos())
nova chamada: assertEquals("4:32761", track.cursorPos(), "Era esperado valores iguais, mas  '4:32761' é diferente de " + result820 + " <track.cursorPos()>")
chamada antiga: assertEquals("4:32766", track.cursorPos())
nova chamada: assertEquals("4:32766", track.cursorPos(), "Era esperado valores iguais, mas  '4:32766' é diferente de " + result821 + " <track.cursorPos()>")
chamada antiga: assertEquals(5, track.lineNumber())
nova chamada: assertEquals(5, track.lineNumber(), "Era esperado valores iguais, mas  5 é diferente de " + result822 + " <track.lineNumber()>")
chamada antiga: assertEquals("5:1", track.cursorPos())
nova chamada: assertEquals("5:1", track.cursorPos(), "Era esperado valores iguais, mas  '5:1' é diferente de " + result823 + " <track.cursorPos()>")
chamada antiga: assertEquals("5:6", track.cursorPos())
nova chamada: assertEquals("5:6", track.cursorPos(), "Era esperado valores iguais, mas  '5:6' é diferente de " + result824 + " <track.cursorPos()>")
chamada antiga: assertEquals("1:1", reader.cursorPos())
nova chamada: assertEquals("1:1", reader.cursorPos(), "Era esperado valores iguais, mas  '1:1' é diferente de " + result825 + " <reader.cursorPos()>")
chamada antiga: assertEquals(131096, reader.pos())
nova chamada: assertEquals(131096, reader.pos(), "Era esperado valores iguais, mas  131096 é diferente de " + result826 + " <reader.pos()>")
chamada antiga: assertEquals(reader.pos() + 1, reader.columnNumber())
nova chamada: assertEquals(reader.pos() + 1, reader.columnNumber(), "Era esperado valores iguais, mas  reader.pos() + 1 é diferente de " + result827 + " <reader.columnNumber()>")
chamada antiga: assertEquals(1, reader.lineNumber())
nova chamada: assertEquals(1, reader.lineNumber(), "Era esperado valores iguais, mas  1 é diferente de " + result828 + " <reader.lineNumber()>")
chamada antiga: assertEquals(280218, reader.pos())
nova chamada: assertEquals(280218, reader.pos(), "Era esperado valores iguais, mas  280218 é diferente de " + result829 + " <reader.pos()>")
chamada antiga: assertEquals(1002, reader.lineNumber())
nova chamada: assertEquals(1002, reader.lineNumber(), "Era esperado valores iguais, mas  1002 é diferente de " + result830 + " <reader.lineNumber()>")
chamada antiga: assertEquals(1, reader.columnNumber())
nova chamada: assertEquals(1, reader.columnNumber(), "Era esperado valores iguais, mas  1 é diferente de " + result831 + " <reader.columnNumber()>")
chamada antiga: assertEquals(1002, reader.lineNumber())
nova chamada: assertEquals(1002, reader.lineNumber(), "Era esperado valores iguais, mas  1002 é diferente de " + result832 + " <reader.lineNumber()>")
chamada antiga: assertEquals(14, reader.columnNumber())
nova chamada: assertEquals(14, reader.columnNumber(), "Era esperado valores iguais, mas  14 é diferente de " + result833 + " <reader.columnNumber()>")
chamada antiga: assertEquals(2, doc.body().childNodeSize())
nova chamada: assertEquals(2, doc.body().childNodeSize(), "Era esperado valores iguais, mas  2 é diferente de " + result834 + " <doc.body().childNodeSize()>")
chamada antiga: assertEquals(25000, doc.select("dd").size())
nova chamada: assertEquals(25000, doc.select("dd").size(), "Era esperado valores iguais, mas  25000 é diferente de " + result835 + " <doc.select('dd').size()>")
chamada antiga: assertTrue(System.currentTimeMillis() - start < 20000)
nova chamada: assertTrue(System.currentTimeMillis() - start < 20000, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(7, attr.size())
nova chamada: assertEquals(7, attr.size(), "Era esperado valores iguais, mas  7 é diferente de " + result836 + " <attr.size()>")
chamada antiga: assertEquals("123", attr.get("id"))
nova chamada: assertEquals("123", attr.get("id"), "Era esperado valores iguais, mas  '123' é diferente de " + result837 + " <attr.get('id')>")
chamada antiga: assertEquals("baz = 'bar'", attr.get("class"))
nova chamada: assertEquals("baz = 'bar'", attr.get("class"), "Era esperado valores iguais, mas  'baz = 'bar'' é diferente de " + result838 + " <attr.get('class')>")
chamada antiga: assertEquals("border: 2px", attr.get("style"))
nova chamada: assertEquals("border: 2px", attr.get("style"), "Era esperado valores iguais, mas  'border: 2px' é diferente de " + result839 + " <attr.get('style')>")
chamada antiga: assertEquals("", attr.get("qux"))
nova chamada: assertEquals("", attr.get("qux"), "Era esperado valores iguais, mas  '' é diferente de " + result840 + " <attr.get('qux')>")
chamada antiga: assertEquals("", attr.get("zim"))
nova chamada: assertEquals("", attr.get("zim"), "Era esperado valores iguais, mas  '' é diferente de " + result841 + " <attr.get('zim')>")
chamada antiga: assertEquals("12", attr.get("foo"))
nova chamada: assertEquals("12", attr.get("foo"), "Era esperado valores iguais, mas  '12' é diferente de " + result842 + " <attr.get('foo')>")
chamada antiga: assertEquals("18", attr.get("mux"))
nova chamada: assertEquals("18", attr.get("mux"), "Era esperado valores iguais, mas  '18' é diferente de " + result843 + " <attr.get('mux')>")
chamada antiga: assertEquals(2, el.attributes().size())
nova chamada: assertEquals(2, el.attributes().size(), "Era esperado valores iguais, mas  2 é diferente de " + result844 + " <el.attributes().size()>")
chamada antiga: assertEquals("bar\r\nqux", el.attr("foo"))
nova chamada: assertEquals("bar\r\nqux", el.attr("foo"), "Era esperado valores iguais, mas  'bar\r\nqux' é diferente de " + result845 + " <el.attr('foo')>")
chamada antiga: assertEquals("two", el.attr("bar"))
nova chamada: assertEquals("two", el.attr("bar"), "Era esperado valores iguais, mas  'two' é diferente de " + result846 + " <el.attr('bar')>")
chamada antiga: assertEquals(0, attr.size())
nova chamada: assertEquals(0, attr.size(), "Era esperado valores iguais, mas  0 é diferente de " + result847 + " <attr.size()>")
chamada antiga: assertEquals(1, attr.size())
nova chamada: assertEquals(1, attr.size(), "Era esperado valores iguais, mas  1 é diferente de " + result848 + " <attr.size()>")
chamada antiga: assertTrue(attr.hasKey("=empty"))
nova chamada: assertTrue(attr.hasKey("=empty"), "Era esperado verdadeiro, mas " + result849 + " <attr.hasKey('=empty')> é falso")
chamada antiga: assertEquals("", attr.get("=empty"))
nova chamada: assertEquals("", attr.get("=empty"), "Era esperado valores iguais, mas  '' é diferente de " + result850 + " <attr.get('=empty')>")
chamada antiga: assertEquals("?foo=bar&mid&lt=true", els.first().attr("href"))
nova chamada: assertEquals("?foo=bar&mid&lt=true", els.first().attr("href"), "Era esperado valores iguais, mas  '?foo=bar&mid&lt=true' é diferente de " + result851 + " <els.first().attr('href')>")
chamada antiga: assertEquals("?foo=bar<qux&lg=1", els.last().attr("href"))
nova chamada: assertEquals("?foo=bar<qux&lg=1", els.last().attr("href"), "Era esperado valores iguais, mas  '?foo=barqux&lg=1' é diferente de " + result852 + " <els.last().attr('href')>")
chamada antiga: assertEquals("&wr_id=123&mid-size=true&ok=&wr", els.first().attr("href"))
nova chamada: assertEquals("&wr_id=123&mid-size=true&ok=&wr", els.first().attr("href"), "Era esperado valores iguais, mas  '&wr_id=123&mid-size=true&ok=&wr' é diferente de " + result853 + " <els.first().attr('href')>")
chamada antiga: assertEquals("123", el.attr("normal"))
nova chamada: assertEquals("123", el.attr("normal"), "Era esperado valores iguais, mas  '123' é diferente de " + result854 + " <el.attr('normal')>")
chamada antiga: assertEquals("", el.attr("boolean"))
nova chamada: assertEquals("", el.attr("boolean"), "Era esperado valores iguais, mas  '' é diferente de " + result855 + " <el.attr('boolean')>")
chamada antiga: assertEquals("", el.attr("empty"))
nova chamada: assertEquals("", el.attr("empty"), "Era esperado valores iguais, mas  '' é diferente de " + result856 + " <el.attr('empty')>")
chamada antiga: assertEquals(html, el.outerHtml())
nova chamada: assertEquals(html, el.outerHtml(), "Era esperado valores iguais, mas  html é diferente de " + result857 + " <el.outerHtml()>")
chamada antiga: assertEquals("<img onerror=\"doMyJob\">", doc.body().html())
nova chamada: assertEquals("<img onerror=\"doMyJob\">", doc.body().html(), "Era esperado valores iguais, mas  'img onerror=\'doMyJob\'' é diferente de " + result858 + " <doc.body().html()>")
chamada antiga: assertEquals("<img onerror=\"doMyJob\" />", doc.html())
nova chamada: assertEquals("<img onerror=\"doMyJob\" />", doc.html(), "Era esperado valores iguais, mas  'img onerror=\'doMyJob\' /' é diferente de " + result859 + " <doc.html()>")
chamada antiga: assertEquals("IMG", bothOn.normalizeTag("IMG"))
nova chamada: assertEquals("IMG", bothOn.normalizeTag("IMG"), "Era esperado valores iguais, mas  'IMG' é diferente de " + result860 + " <bothOn.normalizeTag('IMG')>")
chamada antiga: assertEquals("ID", bothOn.normalizeAttribute("ID"))
nova chamada: assertEquals("ID", bothOn.normalizeAttribute("ID"), "Era esperado valores iguais, mas  'ID' é diferente de " + result861 + " <bothOn.normalizeAttribute('ID')>")
chamada antiga: assertEquals("img", bothOff.normalizeTag("IMG"))
nova chamada: assertEquals("img", bothOff.normalizeTag("IMG"), "Era esperado valores iguais, mas  'img' é diferente de " + result862 + " <bothOff.normalizeTag('IMG')>")
chamada antiga: assertEquals("id", bothOff.normalizeAttribute("ID"))
nova chamada: assertEquals("id", bothOff.normalizeAttribute("ID"), "Era esperado valores iguais, mas  'id' é diferente de " + result863 + " <bothOff.normalizeAttribute('ID')>")
chamada antiga: assertEquals("IMG", tagOn.normalizeTag("IMG"))
nova chamada: assertEquals("IMG", tagOn.normalizeTag("IMG"), "Era esperado valores iguais, mas  'IMG' é diferente de " + result864 + " <tagOn.normalizeTag('IMG')>")
chamada antiga: assertEquals("id", tagOn.normalizeAttribute("ID"))
nova chamada: assertEquals("id", tagOn.normalizeAttribute("ID"), "Era esperado valores iguais, mas  'id' é diferente de " + result865 + " <tagOn.normalizeAttribute('ID')>")
chamada antiga: assertEquals("img", attrOn.normalizeTag("IMG"))
nova chamada: assertEquals("img", attrOn.normalizeTag("IMG"), "Era esperado valores iguais, mas  'img' é diferente de " + result866 + " <attrOn.normalizeTag('IMG')>")
chamada antiga: assertEquals("ID", attrOn.normalizeAttribute("ID"))
nova chamada: assertEquals("ID", attrOn.normalizeAttribute("ID"), "Era esperado valores iguais, mas  'ID' é diferente de " + result867 + " <attrOn.normalizeAttribute('ID')>")
chamada antiga: assertEquals("hidden", normalizedAttribute)
nova chamada: assertEquals("hidden", normalizedAttribute, "Era esperado valores iguais, mas  'hidden' é diferente de " + " normalizedAttribute")
chamada antiga: assertEquals("item", normalizedAttributes.asList().get(0).getKey())
nova chamada: assertEquals("item", normalizedAttributes.asList().get(0).getKey(), "Era esperado valores iguais, mas  'item' é diferente de " + result868 + " <normalizedAttributes.asList().get(0).getKey()>")
chamada antiga: assertEquals(8, constants.size())
nova chamada: assertEquals(8, constants.size(), "Era esperado valores iguais, mas  8 é diferente de " + result869 + " <constants.size()>")
chamada antiga: assertNotNull(parseMethod)
nova chamada: assertNotNull(parseMethod, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(seen)
nova chamada: assertTrue(seen, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(":contains", pre)
nova chamada: assertEquals(":contains", pre, "Era esperado valores iguais, mas  ':contains' é diferente de " + " pre")
chamada antiga: assertEquals("one (two) three", guts)
nova chamada: assertEquals("one (two) three", guts, "Era esperado valores iguais, mas  'one (two) three' é diferente de " + " guts")
chamada antiga: assertEquals(" four", remainder)
nova chamada: assertEquals(" four", remainder, "Era esperado valores iguais, mas  ' four' é diferente de " + " remainder")
chamada antiga: assertEquals(":contains", pre)
nova chamada: assertEquals(":contains", pre, "Era esperado valores iguais, mas  ':contains' é diferente de " + " pre")
chamada antiga: assertEquals("one (two) \\( \\) \\) three", guts)
nova chamada: assertEquals("one (two) \\( \\) \\) three", guts, "Era esperado valores iguais, mas  'one (two) \\( \\) \\) three' é diferente de " + " guts")
chamada antiga: assertEquals("one (two) ( ) ) three", TokenQueue.unescape(guts))
nova chamada: assertEquals("one (two) ( ) ) three", TokenQueue.unescape(guts), "Era esperado valores iguais, mas  'one (two) ( ) ) three' é diferente de " + result870 + " <TokenQueue.unescape(guts)>")
chamada antiga: assertEquals(" four", remainder)
nova chamada: assertEquals(" four", remainder, "Era esperado valores iguais, mas  ' four' é diferente de " + " remainder")
chamada antiga: assertEquals("something(or another)", match)
nova chamada: assertEquals("something(or another)", match, "Era esperado valores iguais, mas  'something(or another)' é diferente de " + " match")
chamada antiga: assertEquals("one ( ) \\", TokenQueue.unescape("one \\( \\) \\\\"))
nova chamada: assertEquals("one ( ) \\", TokenQueue.unescape("one \\( \\) \\\\"), "Era esperado valores iguais, mas  'one ( ) \\' é diferente de " + result871 + " <TokenQueue.unescape('one \\( \\) \\\\')>")
chamada antiga: assertEquals("<textarea>one < two ", data)
nova chamada: assertEquals("<textarea>one < two ", data, "Era esperado valores iguais, mas  'textareaone  two ' é diferente de " + " data")
chamada antiga: assertEquals("<textarea> one two < three </oops>", data)
nova chamada: assertEquals("<textarea> one two < three </oops>", data, "Era esperado valores iguais, mas  'textarea one two  three /oops' é diferente de " + " data")
chamada antiga: assertEquals("Three Two", tq.remainder())
nova chamada: assertEquals("Three Two", tq.remainder(), "Era esperado valores iguais, mas  'Three Two' é diferente de " + result872 + " <tq.remainder()>")
chamada antiga: assertEquals("<textarea>one < two ", data)
nova chamada: assertEquals("<textarea>one < two ", data, "Era esperado valores iguais, mas  'textareaone  two ' é diferente de " + " data")
chamada antiga: assertEquals(" third ", data)
nova chamada: assertEquals(" third ", data, "Era esperado valores iguais, mas  ' third ' é diferente de " + " data")
chamada antiga: assertEquals("#identifier", Jsoup.parse(html).select(selector).first().cssSelector())
nova chamada: assertEquals("#identifier", Jsoup.parse(html).select(selector).first().cssSelector(), "Era esperado valores iguais, mas  '#identifier' é diferente de " + result873 + " <Jsoup.parse(html).select(selector).first().cssSelector()>")
chamada antiga: assertEquals("\n\\) foo1", doc.select("div:matches(" + Pattern.quote("\\)") + ")").get(0).childNode(0).toString())
nova chamada: assertEquals("\n\\) foo1", doc.select("div:matches(" + Pattern.quote("\\)") + ")").get(0).childNode(0).toString(), "Era esperado valores iguais, mas  '\n\\) foo1' é diferente de " + result874 + " <doc.select('div:matches(' + Pattern.quote('\\)') + ')').get(0).childNode(0).toString()>")
chamada antiga: assertEquals("\n( foo2", doc.select("div:matches(" + Pattern.quote("(") + ")").get(0).childNode(0).toString())
nova chamada: assertEquals("\n( foo2", doc.select("div:matches(" + Pattern.quote("(") + ")").get(0).childNode(0).toString(), "Era esperado valores iguais, mas  '\n( foo2' é diferente de " + result875 + " <doc.select('div:matches(' + Pattern.quote('(') + ')').get(0).childNode(0).toString()>")
chamada antiga: assertEquals("\n1) foo3", doc.select("div:matches(" + Pattern.quote("1)") + ")").get(0).childNode(0).toString())
nova chamada: assertEquals("\n1) foo3", doc.select("div:matches(" + Pattern.quote("1)") + ")").get(0).childNode(0).toString(), "Era esperado valores iguais, mas  '\n1) foo3' é diferente de " + result876 + " <doc.select('div:matches(' + Pattern.quote('1)') + ')').get(0).childNode(0).toString()>")
chamada antiga: assertEquals("You&I", els.text())
nova chamada: assertEquals("You&I", els.text(), "Era esperado valores iguais, mas  'You&I' é diferente de " + result877 + " <els.text()>")
chamada antiga: assertEquals("hello world</", els.text())
nova chamada: assertEquals("hello world</", els.text(), "Era esperado valores iguais, mas  'hello world/' é diferente de " + result878 + " <els.text()>")
chamada antiga: assertEquals("hello world", els.text())
nova chamada: assertEquals("hello world", els.text(), "Era esperado valores iguais, mas  'hello world' é diferente de " + result879 + " <els.text()>")
chamada antiga: assertEquals("fake", els.text())
nova chamada: assertEquals("fake", els.text(), "Era esperado valores iguais, mas  'fake' é diferente de " + result880 + " <els.text()>")
chamada antiga: assertEquals("fake", els.text())
nova chamada: assertEquals("fake", els.text(), "Era esperado valores iguais, mas  'fake' é diferente de " + result881 + " <els.text()>")
chamada antiga: assertEquals("<fake>", els.text())
nova chamada: assertEquals("<fake>", els.text(), "Era esperado valores iguais, mas  'fake' é diferente de " + result882 + " <els.text()>")
chamada antiga: assertEquals("", els.text())
nova chamada: assertEquals("", els.text(), "Era esperado valores iguais, mas  '' é diferente de " + result883 + " <els.text()>")
chamada antiga: assertEquals("hello world</?fake", els.text())
nova chamada: assertEquals("hello world</?fake", els.text(), "Era esperado valores iguais, mas  'hello world/?fake' é diferente de " + result884 + " <els.text()>")
chamada antiga: assertEquals(" <table><tr><td></table> --! --- ", comment.getData())
nova chamada: assertEquals(" <table><tr><td></table> --! --- ", comment.getData(), "Era esperado valores iguais, mas  ' tabletrtd/table --! --- ' é diferente de " + result885 + " <comment.getData()>")
chamada antiga: assertEquals("Hello", text.getWholeText())
nova chamada: assertEquals("Hello", text.getWholeText(), "Era esperado valores iguais, mas  'Hello' é diferente de " + result886 + " <text.getWholeText()>")
chamada antiga: assertEquals(" <table><tr><td></table> --!-", comment.getData())
nova chamada: assertEquals(" <table><tr><td></table> --!-", comment.getData(), "Era esperado valores iguais, mas  ' tabletrtd/table --!-' é diferente de " + result887 + " <comment.getData()>")
chamada antiga: assertEquals("Hello", text.getWholeText())
nova chamada: assertEquals("Hello", text.getWholeText(), "Era esperado valores iguais, mas  'Hello' é diferente de " + result888 + " <text.getWholeText()>")
chamada antiga: assertEquals("<p></p><p></p><div id=\"one\"><span>Two</span></div>", TextUtil.stripNewlines(doc.body().html()))
nova chamada: assertEquals("<p></p><p></p><div id=\"one\"><span>Two</span></div>", TextUtil.stripNewlines(doc.body().html()), "Era esperado valores iguais, mas  'p/pp/pdiv id=\'one\'spanTwo/span/div' é diferente de " + result889 + " <TextUtil.stripNewlines(doc.body().html())>")
chamada antiga: assertEquals(CharacterReader.readAheadLimit - 1, errorList.get(0).getPosition())
nova chamada: assertEquals(CharacterReader.readAheadLimit - 1, errorList.get(0).getPosition(), "Era esperado valores iguais, mas  CharacterReader.readAheadLimit - 1 é diferente de " + result890 + " <errorList.get(0).getPosition()>")
chamada antiga: assertEquals(6, errorList.get(0).getPosition())
nova chamada: assertEquals(6, errorList.get(0).getPosition(), "Era esperado valores iguais, mas  6 é diferente de " + result891 + " <errorList.get(0).getPosition()>")
chamada antiga: assertEquals(7, errorList.get(0).getPosition())
nova chamada: assertEquals(7, errorList.get(0).getPosition(), "Era esperado valores iguais, mas  7 é diferente de " + result892 + " <errorList.get(0).getPosition()>")
chamada antiga: assertEquals(5, errorList.get(0).getPosition())
nova chamada: assertEquals(5, errorList.get(0).getPosition(), "Era esperado valores iguais, mas  5 é diferente de " + result893 + " <errorList.get(0).getPosition()>")
chamada antiga: assertEquals("One �Two", doc.title())
nova chamada: assertEquals("One �Two", doc.title(), "Era esperado valores iguais, mas  'One �Two' é diferente de " + result894 + " <doc.title()>")
chamada antiga: assertEquals("<html><head></head><body><div>One<plaintext>&lt;div&gt;Two&lt;/plaintext&gt;�no &lt; Return</plaintext></div></body></html>", TextUtil.stripNewlines(doc.html()))
nova chamada: assertEquals("<html><head></head><body><div>One<plaintext>&lt;div&gt;Two&lt;/plaintext&gt;�no &lt; Return</plaintext></div></body></html>", TextUtil.stripNewlines(doc.html()), "Era esperado valores iguais, mas  'htmlhead/headbodydivOneplaintext&lt;div&gt;Two&lt;/plaintext&gt;�no &lt; Return/plaintext/div/body/html' é diferente de " + result895 + " <TextUtil.stripNewlines(doc.html())>")
chamada antiga: assertEquals("<di�v>\n One\n</di�v>Two", doc.body().html())
nova chamada: assertEquals("<di�v>\n One\n</di�v>Two", doc.body().html(), "Era esperado valores iguais, mas  'di�v\n One\n/di�vTwo' é diferente de " + result896 + " <doc.body().html()>")
chamada antiga: assertEquals("foo<bar", p.attr("name"))
nova chamada: assertEquals("foo<bar", p.attr("name"), "Era esperado valores iguais, mas  'foobar' é diferente de " + result897 + " <p.attr('name')>")
chamada antiga: assertEquals("<p foo></p>", doc.body().html())
nova chamada: assertEquals("<p foo></p>", doc.body().html(), "Era esperado valores iguais, mas  'p foo/p' é diferente de " + result898 + " <doc.body().html()>")
chamada antiga: assertEquals(1, els.size())
nova chamada: assertEquals(1, els.size(), "Era esperado valores iguais, mas  1 é diferente de " + result899 + " <els.size()>")
chamada antiga: assertNotNull(el)
nova chamada: assertNotNull(el, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("One", el.text())
nova chamada: assertEquals("One", el.text(), "Era esperado valores iguais, mas  'One' é diferente de " + result900 + " <el.text()>")
chamada antiga: assertEquals(tag, el.tagName())
nova chamada: assertEquals(tag, el.tagName(), "Era esperado valores iguais, mas  tag é diferente de " + result901 + " <el.tagName()>")
chamada antiga: assertEquals(1, els.size())
nova chamada: assertEquals(1, els.size(), "Era esperado valores iguais, mas  1 é diferente de " + result902 + " <els.size()>")
chamada antiga: assertNotNull(el)
nova chamada: assertNotNull(el, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("One", el.text())
nova chamada: assertEquals("One", el.text(), "Era esperado valores iguais, mas  'One' é diferente de " + result903 + " <el.text()>")
chamada antiga: assertEquals(attrName.toLowerCase(), attribute.getKey())
nova chamada: assertEquals(attrName.toLowerCase(), attribute.getKey(), "Era esperado valores iguais, mas " + result904 + " <attrName.toLowerCase()> é diferente de " + result905 + " <attribute.getKey()>")
chamada antiga: assertEquals("foo", attribute.getValue())
nova chamada: assertEquals("foo", attribute.getValue(), "Era esperado valores iguais, mas  'foo' é diferente de " + result906 + " <attribute.getValue()>")
chamada antiga: assertEquals(1, els.size())
nova chamada: assertEquals(1, els.size(), "Era esperado valores iguais, mas  1 é diferente de " + result907 + " <els.size()>")
chamada antiga: assertNotNull(el)
nova chamada: assertNotNull(el, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(text, el.text())
nova chamada: assertEquals(text, el.text(), "Era esperado valores iguais, mas  text é diferente de " + result908 + " <el.text()>")
chamada antiga: assertEquals(1, els.size())
nova chamada: assertEquals(1, els.size(), "Era esperado valores iguais, mas  1 é diferente de " + result909 + " <els.size()>")
chamada antiga: assertNotNull(el)
nova chamada: assertNotNull(el, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(" " + comment + " ", child.getData())
nova chamada: assertEquals(" " + comment + " ", child.getData(), "Era esperado valores iguais, mas  ' ' + comment + ' ' é diferente de " + result910 + " <child.getData()>")
chamada antiga: assertEquals(1, els.size())
nova chamada: assertEquals(1, els.size(), "Era esperado valores iguais, mas  1 é diferente de " + result911 + " <els.size()>")
chamada antiga: assertNotNull(el)
nova chamada: assertNotNull(el, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(cdata, el.text())
nova chamada: assertEquals(cdata, el.text(), "Era esperado valores iguais, mas  cdata é diferente de " + result912 + " <el.text()>")
chamada antiga: assertEquals(cdata, child.getWholeText())
nova chamada: assertEquals(cdata, child.getWholeText(), "Era esperado valores iguais, mas  cdata é diferente de " + result913 + " <child.getWholeText()>")
chamada antiga: assertEquals(1, els.size())
nova chamada: assertEquals(1, els.size(), "Era esperado valores iguais, mas  1 é diferente de " + result914 + " <els.size()>")
chamada antiga: assertNotNull(el)
nova chamada: assertNotNull(el, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(title, el.text())
nova chamada: assertEquals(title, el.text(), "Era esperado valores iguais, mas  title é diferente de " + result915 + " <el.text()>")
chamada antiga: assertEquals(title, child.getWholeText())
nova chamada: assertEquals(title, child.getWholeText(), "Era esperado valores iguais, mas  title é diferente de " + result916 + " <child.getWholeText()>")
chamada antiga: assertEquals(title, doc.title())
nova chamada: assertEquals(title, doc.title(), "Era esperado valores iguais, mas  title é diferente de " + result917 + " <doc.title()>")
chamada antiga: assertEquals("\u20ac", Jsoup.parse("&#0128;").text())
nova chamada: assertEquals("\u20ac", Jsoup.parse("&#0128;").text(), "Era esperado valores iguais, mas  '\u20ac' é diferente de " + result918 + " <Jsoup.parse('&#0128;').text()>")
chamada antiga: assertEquals("\u201a", Jsoup.parse("&#0130;").text())
nova chamada: assertEquals("\u201a", Jsoup.parse("&#0130;").text(), "Era esperado valores iguais, mas  '\u201a' é diferente de " + result919 + " <Jsoup.parse('&#0130;').text()>")
chamada antiga: assertEquals("\u20ac", Jsoup.parse("&#x80;").text())
nova chamada: assertEquals("\u20ac", Jsoup.parse("&#x80;").text(), "Era esperado valores iguais, mas  '\u20ac' é diferente de " + result920 + " <Jsoup.parse('&#x80;').text()>")
chamada antiga: assertEquals("\u20ac", parser.parseInput("<html><body>&#0128;</body></html>", "").text())
nova chamada: assertEquals("\u20ac", parser.parseInput("<html><body>&#0128;</body></html>", "").text(), "Era esperado valores iguais, mas  '\u20ac' é diferente de " + result921 + " <parser.parseInput('<html><body>&#0128;</body></html>', '').text()>")
chamada antiga: assertEquals(1, parser.getErrors().size())
nova chamada: assertEquals(1, parser.getErrors().size(), "Era esperado valores iguais, mas  1 é diferente de " + result922 + " <parser.getErrors().size()>")
chamada antiga: assertEquals(expectedCommentData, ((Comment) commentNode).getData())
nova chamada: assertEquals(expectedCommentData, ((Comment) commentNode).getData(), "Era esperado valores iguais, mas  expectedCommentData é diferente de " + result923 + " <((Comment) commentNode).getData()>")
chamada antiga: assertEquals(cdataContents, ((CDataNode) cdataNode).text())
nova chamada: assertEquals(cdataContents, ((CDataNode) cdataNode).text(), "Era esperado valores iguais, mas  cdataContents é diferente de " + result924 + " <((CDataNode) cdataNode).text()>")
chamada antiga: assertEquals("#comment", comment.nodeName())
nova chamada: assertEquals("#comment", comment.nodeName(), "Era esperado valores iguais, mas  '#comment' é diferente de " + result925 + " <comment.nodeName()>")
chamada antiga: assertEquals(" This is one heck of a comment! ", comment.getData())
nova chamada: assertEquals(" This is one heck of a comment! ", comment.getData(), "Era esperado valores iguais, mas  ' This is one heck of a comment! ' é diferente de " + result926 + " <comment.getData()>")
chamada antiga: assertEquals("<!-- This is one heck of a comment! -->", comment.toString())
nova chamada: assertEquals("<!-- This is one heck of a comment! -->", comment.toString(), "Era esperado valores iguais, mas  '!-- This is one heck of a comment! --' é diferente de " + result927 + " <comment.toString()>")
chamada antiga: assertEquals("<div>\n <!-- comment-->\n</div>", doc.body().html())
nova chamada: assertEquals("<div>\n <!-- comment-->\n</div>", doc.body().html(), "Era esperado valores iguais, mas  'div\n !-- comment--\n/div' é diferente de " + result928 + " <doc.body().html()>")
chamada antiga: assertEquals("<p>One<!-- comment -->Two</p>", doc.body().html())
nova chamada: assertEquals("<p>One<!-- comment -->Two</p>", doc.body().html(), "Era esperado valores iguais, mas  'pOne!-- comment --Two/p' é diferente de " + result929 + " <doc.body().html()>")
chamada antiga: assertEquals("OneTwo", doc.text())
nova chamada: assertEquals("OneTwo", doc.text(), "Era esperado valores iguais, mas  'OneTwo' é diferente de " + result930 + " <doc.text()>")
chamada antiga: assertEquals("<!-- a simple comment --><html><head></head><body></body></html>", doc.html())
nova chamada: assertEquals("<!-- a simple comment --><html><head></head><body></body></html>", doc.html(), "Era esperado valores iguais, mas  '!-- a simple comment --htmlhead/headbody/body/html' é diferente de " + result931 + " <doc.html()>")
chamada antiga: assertEquals("<!-- a simple comment -->", c1.outerHtml())
nova chamada: assertEquals("<!-- a simple comment -->", c1.outerHtml(), "Era esperado valores iguais, mas  '!-- a simple comment --' é diferente de " + result932 + " <c1.outerHtml()>")
chamada antiga: assertNotSame(comment, c1)
nova chamada: assertNotSame(comment, c1, "Era esperado objetos diferentes, mas  comment é igual a " + " c1")
chamada antiga: assertEquals(comment.getData(), comment.getData())
nova chamada: assertEquals(comment.getData(), comment.getData(), "Era esperado valores iguais, mas " + result933 + " <comment.getData()> é diferente de " + result934 + " <comment.getData()>")
chamada antiga: assertEquals("New", c1.getData())
nova chamada: assertEquals("New", c1.getData(), "Era esperado valores iguais, mas  'New' é diferente de " + result935 + " <c1.getData()>")
chamada antiga: assertNotEquals(c1.getData(), comment.getData())
nova chamada: assertNotEquals(c1.getData(), comment.getData(), "Era esperado valores diferentes, mas " + result936 + " <c1.getData()> é igual a " + result937 + " <comment.getData()>")
chamada antiga: assertTrue(decl.isXmlDeclaration())
nova chamada: assertTrue(decl.isXmlDeclaration(), "Era esperado verdadeiro, mas " + result938 + " <decl.isXmlDeclaration()> é falso")
chamada antiga: assertNotNull(xmlDeclaration)
nova chamada: assertNotNull(xmlDeclaration, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(hasAnyAttributes(doc))
nova chamada: assertTrue(hasAnyAttributes(doc), "Era esperado verdadeiro, mas " + result939 + " <hasAnyAttributes(doc)> é falso")
chamada antiga: assertEquals(1, els.size())
nova chamada: assertEquals(1, els.size(), "Era esperado valores iguais, mas  1 é diferente de " + result940 + " <els.size()>")
chamada antiga: assertEquals("", id)
nova chamada: assertEquals("", id, "Era esperado valores iguais, mas  '' é diferente de " + " id")
chamada antiga: assertTrue(p.hasClass("Foobs"))
nova chamada: assertTrue(p.hasClass("Foobs"), "Era esperado verdadeiro, mas " + result941 + " <p.hasClass('Foobs')> é falso")
chamada antiga: assertTrue(hasAnyAttributes(html))
nova chamada: assertTrue(hasAnyAttributes(html), "Era esperado verdadeiro, mas " + result942 + " <hasAnyAttributes(html)> é falso")
chamada antiga: assertTrue(hasAnyAttributes(p))
nova chamada: assertTrue(hasAnyAttributes(p), "Era esperado verdadeiro, mas " + result943 + " <hasAnyAttributes(p)> é falso")
chamada antiga: assertTrue(attributes.hasKey("class"))
nova chamada: assertTrue(attributes.hasKey("class"), "Era esperado verdadeiro, mas " + result944 + " <attributes.hasKey('class')> é falso")
chamada antiga: assertEquals("key=\"value &amp;\"", attr.html())
nova chamada: assertEquals("key=\"value &amp;\"", attr.html(), "Era esperado valores iguais, mas  'key=\'value &amp;\'' é diferente de " + result945 + " <attr.html()>")
chamada antiga: assertEquals(attr.html(), attr.toString())
nova chamada: assertEquals(attr.html(), attr.toString(), "Era esperado valores iguais, mas " + result946 + " <attr.html()> é diferente de " + result947 + " <attr.toString()>")
chamada antiga: assertEquals(s + "=\"A" + s + "B\"", attr.html())
nova chamada: assertEquals(s + "=\"A" + s + "B\"", attr.html(), "Era esperado valores iguais, mas  s + '=\'A' + s + 'B\'' é diferente de " + result948 + " <attr.html()>")
chamada antiga: assertEquals(attr.html(), attr.toString())
nova chamada: assertEquals(attr.html(), attr.toString(), "Era esperado valores iguais, mas " + result949 + " <attr.html()> é diferente de " + result950 + " <attr.toString()>")
chamada antiga: assertEquals("", attributes.get("hidden"))
nova chamada: assertEquals("", attributes.get("hidden"), "Era esperado valores iguais, mas  '' é diferente de " + result951 + " <attributes.get('hidden')>")
chamada antiga: assertEquals("hidden", first.getKey())
nova chamada: assertEquals("hidden", first.getKey(), "Era esperado valores iguais, mas  'hidden' é diferente de " + result952 + " <first.getKey()>")
chamada antiga: assertEquals("", first.getValue())
nova chamada: assertEquals("", first.getValue(), "Era esperado valores iguais, mas  '' é diferente de " + result953 + " <first.getValue()>")
chamada antiga: assertTrue(Attribute.isBooleanAttribute(first.getKey()))
nova chamada: assertTrue(Attribute.isBooleanAttribute(first.getKey()), "Era esperado verdadeiro, mas " + result954 + " <Attribute.isBooleanAttribute(first.getKey())> é falso")
chamada antiga: assertEquals("two", oldVal)
nova chamada: assertEquals("two", oldVal, "Era esperado valores iguais, mas  'two' é diferente de " + " oldVal")
chamada antiga: assertEquals("three", attr.getKey())
nova chamada: assertEquals("three", attr.getKey(), "Era esperado valores iguais, mas  'three' é diferente de " + result955 + " <attr.getKey()>")
chamada antiga: assertEquals("four", attr.getValue())
nova chamada: assertEquals("four", attr.getValue(), "Era esperado valores iguais, mas  'four' é diferente de " + result956 + " <attr.getValue()>")
chamada antiga: assertNull(attr.parent)
nova chamada: assertNull(attr.parent, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertTrue(a1.hasDeclaredValue())
nova chamada: assertTrue(a1.hasDeclaredValue(), "Era esperado verdadeiro, mas " + result957 + " <a1.hasDeclaredValue()> é falso")
chamada antiga: assertTrue(a3.hasDeclaredValue())
nova chamada: assertTrue(a3.hasDeclaredValue(), "Era esperado verdadeiro, mas " + result958 + " <a3.hasDeclaredValue()> é falso")
chamada antiga: assertEquals("one", attr.html())
nova chamada: assertEquals("one", attr.html(), "Era esperado valores iguais, mas  'one' é diferente de " + result959 + " <attr.html()>")
chamada antiga: assertEquals("val", oldVal)
nova chamada: assertEquals("val", oldVal, "Era esperado valores iguais, mas  'val' é diferente de " + " oldVal")
chamada antiga: assertEquals("", oldVal)
nova chamada: assertEquals("", oldVal, "Era esperado valores iguais, mas  '' é diferente de " + " oldVal")
chamada antiga: assertTrue(Attribute.isBooleanAttribute("required"))
nova chamada: assertTrue(Attribute.isBooleanAttribute("required"), "Era esperado verdadeiro, mas " + result960 + " <Attribute.isBooleanAttribute('required')> é falso")
chamada antiga: assertTrue(Attribute.isBooleanAttribute("REQUIRED"))
nova chamada: assertTrue(Attribute.isBooleanAttribute("REQUIRED"), "Era esperado verdadeiro, mas " + result961 + " <Attribute.isBooleanAttribute('REQUIRED')> é falso")
chamada antiga: assertTrue(Attribute.isBooleanAttribute("rEQUIREd"))
nova chamada: assertTrue(Attribute.isBooleanAttribute("rEQUIREd"), "Era esperado verdadeiro, mas " + result962 + " <Attribute.isBooleanAttribute('rEQUIREd')> é falso")
chamada antiga: assertEquals("<a href=\"autofocus\" required>One</a>", doc.selectFirst("a").outerHtml())
nova chamada: assertEquals("<a href=\"autofocus\" required>One</a>", doc.selectFirst("a").outerHtml(), "Era esperado valores iguais, mas  'a href=\'autofocus\' requiredOne/a' é diferente de " + result963 + " <doc.selectFirst('a').outerHtml()>")
chamada antiga: assertEquals("<a href=\"autofocus\" REQUIRED>One</a>", doc2.selectFirst("a").outerHtml())
nova chamada: assertEquals("<a href=\"autofocus\" REQUIRED>One</a>", doc2.selectFirst("a").outerHtml(), "Era esperado valores iguais, mas  'a href=\'autofocus\' REQUIREDOne/a' é diferente de " + result964 + " <doc2.selectFirst('a').outerHtml()>")
chamada antiga: assertTrue(htmlParser.isTrackPosition())
nova chamada: assertTrue(htmlParser.isTrackPosition(), "Era esperado verdadeiro, mas " + result965 + " <htmlParser.isTrackPosition()> é falso")
chamada antiga: assertTrue(xmlParser.isTrackPosition())
nova chamada: assertTrue(xmlParser.isTrackPosition(), "Era esperado verdadeiro, mas " + result966 + " <xmlParser.isTrackPosition()> é falso")
chamada antiga: assertNotNull(text)
nova chamada: assertNotNull(text, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(now)
nova chamada: assertNotNull(now, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(comment)
nova chamada: assertNotNull(comment, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("1,1:0-2,12:19", pRange.toString())
nova chamada: assertEquals("1,1:0-2,12:19", pRange.toString(), "Era esperado valores iguais, mas  '1,1:0-2,12:19' é diferente de " + result967 + " <pRange.toString()>")
chamada antiga: assertTrue(pStart.isTracked())
nova chamada: assertTrue(pStart.isTracked(), "Era esperado verdadeiro, mas " + result968 + " <pStart.isTracked()> é falso")
chamada antiga: assertEquals(0, pStart.pos())
nova chamada: assertEquals(0, pStart.pos(), "Era esperado valores iguais, mas  0 é diferente de " + result969 + " <pStart.pos()>")
chamada antiga: assertEquals(1, pStart.columnNumber())
nova chamada: assertEquals(1, pStart.columnNumber(), "Era esperado valores iguais, mas  1 é diferente de " + result970 + " <pStart.columnNumber()>")
chamada antiga: assertEquals(1, pStart.lineNumber())
nova chamada: assertEquals(1, pStart.lineNumber(), "Era esperado valores iguais, mas  1 é diferente de " + result971 + " <pStart.lineNumber()>")
chamada antiga: assertEquals("1,1:0", pStart.toString())
nova chamada: assertEquals("1,1:0", pStart.toString(), "Era esperado valores iguais, mas  '1,1:0' é diferente de " + result972 + " <pStart.toString()>")
chamada antiga: assertTrue(pStart.isTracked())
nova chamada: assertTrue(pStart.isTracked(), "Era esperado verdadeiro, mas " + result973 + " <pStart.isTracked()> é falso")
chamada antiga: assertEquals(19, pEnd.pos())
nova chamada: assertEquals(19, pEnd.pos(), "Era esperado valores iguais, mas  19 é diferente de " + result974 + " <pEnd.pos()>")
chamada antiga: assertEquals(12, pEnd.columnNumber())
nova chamada: assertEquals(12, pEnd.columnNumber(), "Era esperado valores iguais, mas  12 é diferente de " + result975 + " <pEnd.columnNumber()>")
chamada antiga: assertEquals(2, pEnd.lineNumber())
nova chamada: assertEquals(2, pEnd.lineNumber(), "Era esperado valores iguais, mas  2 é diferente de " + result976 + " <pEnd.lineNumber()>")
chamada antiga: assertEquals("2,12:19", pEnd.toString())
nova chamada: assertEquals("2,12:19", pEnd.toString(), "Era esperado valores iguais, mas  '2,12:19' é diferente de " + result977 + " <pEnd.toString()>")
chamada antiga: assertEquals("3,1:20", span.sourceRange().start().toString())
nova chamada: assertEquals("3,1:20", span.sourceRange().start().toString(), "Era esperado valores iguais, mas  '3,1:20' é diferente de " + result978 + " <span.sourceRange().start().toString()>")
chamada antiga: assertEquals("3,7:26", span.sourceRange().end().toString())
nova chamada: assertEquals("3,7:26", span.sourceRange().end().toString(), "Era esperado valores iguais, mas  '3,7:26' é diferente de " + result979 + " <span.sourceRange().end().toString()>")
chamada antiga: assertTrue(spanEnd.isTracked())
nova chamada: assertTrue(spanEnd.isTracked(), "Era esperado verdadeiro, mas " + result980 + " <spanEnd.isTracked()> é falso")
chamada antiga: assertEquals("5,14:52-5,21:59", spanEnd.toString())
nova chamada: assertEquals("5,14:52-5,21:59", spanEnd.toString(), "Era esperado valores iguais, mas  '5,14:52-5,21:59' é diferente de " + result981 + " <spanEnd.toString()>")
chamada antiga: assertEquals("Hello\n ®\n there ©.", wholeText)
nova chamada: assertEquals("Hello\n ®\n there ©.", wholeText, "Era esperado valores iguais, mas  'Hello\n ®\n there ©.' é diferente de " + " wholeText")
chamada antiga: assertEquals(textRange.end().pos() - textRange.start().pos(), textOrig.length())
nova chamada: assertEquals(textRange.end().pos() - textRange.start().pos(), textOrig.length(), "Era esperado valores iguais, mas  textRange.end().pos() - textRange.start().pos() é diferente de " + result982 + " <textOrig.length()>")
chamada antiga: assertEquals("3,7:26", textRange.start().toString())
nova chamada: assertEquals("3,7:26", textRange.start().toString(), "Era esperado valores iguais, mas  '3,7:26' é diferente de " + result983 + " <textRange.start().toString()>")
chamada antiga: assertEquals("5,14:52", textRange.end().toString())
nova chamada: assertEquals("5,14:52", textRange.end().toString(), "Era esperado valores iguais, mas  '5,14:52' é diferente de " + result984 + " <textRange.end().toString()>")
chamada antiga: assertEquals("6,2:66", comment.sourceRange().start().toString())
nova chamada: assertEquals("6,2:66", comment.sourceRange().start().toString(), "Era esperado valores iguais, mas  '6,2:66' é diferente de " + result985 + " <comment.sourceRange().start().toString()>")
chamada antiga: assertEquals("6,18:82", comment.sourceRange().end().toString())
nova chamada: assertEquals("6,18:82", comment.sourceRange().end().toString(), "Era esperado valores iguais, mas  '6,18:82' é diferente de " + result986 + " <comment.sourceRange().end().toString()>")
chamada antiga: assertNotNull(doctype)
nova chamada: assertNotNull(doctype, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("html", doctype.name())
nova chamada: assertEquals("html", doctype.name(), "Era esperado valores iguais, mas  'html' é diferente de " + result987 + " <doctype.name()>")
chamada antiga: assertEquals("1,1:0-2,6:15", doctype.sourceRange().toString())
nova chamada: assertEquals("1,1:0-2,6:15", doctype.sourceRange().toString(), "Era esperado valores iguais, mas  '1,1:0-2,6:15' é diferente de " + result988 + " <doctype.sourceRange().toString()>")
chamada antiga: assertNotNull(titleText)
nova chamada: assertNotNull(titleText, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("jsoup ©\n2022", title.text())
nova chamada: assertEquals("jsoup ©\n2022", title.text(), "Era esperado valores iguais, mas  'jsoup ©\n2022' é diferente de " + result989 + " <title.text()>")
chamada antiga: assertEquals(titleText.getWholeText(), title.text())
nova chamada: assertEquals(titleText.getWholeText(), title.text(), "Era esperado valores iguais, mas " + result990 + " <titleText.getWholeText()> é diferente de " + result991 + " <title.text()>")
chamada antiga: assertEquals("3,1:16-3,8:23", title.sourceRange().toString())
nova chamada: assertEquals("3,1:16-3,8:23", title.sourceRange().toString(), "Era esperado valores iguais, mas  '3,1:16-3,8:23' é diferente de " + result992 + " <title.sourceRange().toString()>")
chamada antiga: assertEquals("3,8:23-4,5:40", titleText.sourceRange().toString())
nova chamada: assertEquals("3,8:23-4,5:40", titleText.sourceRange().toString(), "Era esperado valores iguais, mas  '3,8:23-4,5:40' é diferente de " + result993 + " <titleText.sourceRange().toString()>")
chamada antiga: assertEquals("\n<jsoup>\n", cdata.text())
nova chamada: assertEquals("\n<jsoup>\n", cdata.text(), "Era esperado valores iguais, mas  '\njsoup\n' é diferente de " + result994 + " <cdata.text()>")
chamada antiga: assertEquals("5,1:55-7,4:76", cdata.sourceRange().toString())
nova chamada: assertEquals("5,1:55-7,4:76", cdata.sourceRange().toString(), "Era esperado valores iguais, mas  '5,1:55-7,4:76' é diferente de " + result995 + " <cdata.sourceRange().toString()>")
chamada antiga: assertNotNull(script)
nova chamada: assertNotNull(script, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("2,1:7-2,9:15", script.sourceRange().toString())
nova chamada: assertEquals("2,1:7-2,9:15", script.sourceRange().toString(), "Era esperado valores iguais, mas  '2,1:7-2,9:15' é diferente de " + result996 + " <script.sourceRange().toString()>")
chamada antiga: assertNotNull(data)
nova chamada: assertNotNull(data, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("2,9:15-4,8:33", data.sourceRange().toString())
nova chamada: assertEquals("2,9:15-4,8:33", data.sourceRange().toString(), "Era esperado valores iguais, mas  '2,9:15-4,8:33' é diferente de " + result997 + " <data.sourceRange().toString()>")
chamada antiga: assertEquals("1,1:0-1,39:38", decl.sourceRange().toString())
nova chamada: assertEquals("1,1:0-1,39:38", decl.sourceRange().toString(), "Era esperado valores iguais, mas  '1,1:0-1,39:38' é diferente de " + result998 + " <decl.sourceRange().toString()>")
chamada antiga: assertEquals("2,1:39-2,16:54", doctype.sourceRange().toString())
nova chamada: assertEquals("2,1:39-2,16:54", doctype.sourceRange().toString(), "Era esperado valores iguais, mas  '2,1:39-2,16:54' é diferente de " + result999 + " <doctype.sourceRange().toString()>")
chamada antiga: assertNotNull(rss)
nova chamada: assertNotNull(rss, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("3,1:55-3,14:68", rss.sourceRange().toString())
nova chamada: assertEquals("3,1:55-3,14:68", rss.sourceRange().toString(), "Era esperado valores iguais, mas  '3,1:55-3,14:68' é diferente de " + result1000 + " <rss.sourceRange().toString()>")
chamada antiga: assertEquals("5,1:73-5,7:79", rss.endSourceRange().toString())
nova chamada: assertEquals("5,1:73-5,7:79", rss.endSourceRange().toString(), "Era esperado valores iguais, mas  '5,1:73-5,7:79' é diferente de " + result1001 + " <rss.endSourceRange().toString()>")
chamada antiga: assertNotNull(text)
nova chamada: assertNotNull(text, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("3,14:68-5,1:73", text.sourceRange().toString())
nova chamada: assertEquals("3,14:68-5,1:73", text.sourceRange().toString(), "Era esperado valores iguais, mas  '3,14:68-5,1:73' é diferente de " + result1002 + " <text.sourceRange().toString()>")
chamada antiga: assertEquals("6,1:80-6,17:96", comment.sourceRange().toString())
nova chamada: assertEquals("6,1:80-6,17:96", comment.sourceRange().toString(), "Era esperado valores iguais, mas  '6,1:80-6,17:96' é diferente de " + result1003 + " <comment.sourceRange().toString()>")
chamada antiga: assertNotNull(firstP)
nova chamada: assertNotNull(firstP, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("4,1:53-4,4:56", firstP.sourceRange().toString())
nova chamada: assertEquals("4,1:53-4,4:56", firstP.sourceRange().toString(), "Era esperado valores iguais, mas  '4,1:53-4,4:56' é diferente de " + result1004 + " <firstP.sourceRange().toString()>")
chamada antiga: assertNotNull(p)
nova chamada: assertNotNull(p, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("1000,1:279646-1000,10:279655", p.sourceRange().toString())
nova chamada: assertEquals("1000,1:279646-1000,10:279655", p.sourceRange().toString(), "Era esperado valores iguais, mas  '1000,1:279646-1000,10:279655' é diferente de " + result1005 + " <p.sourceRange().toString()>")
chamada antiga: assertEquals("1000,567:280212-1000,571:280216", p.endSourceRange().toString())
nova chamada: assertEquals("1000,567:280212-1000,571:280216", p.endSourceRange().toString(), "Era esperado valores iguais, mas  '1000,567:280212-1000,571:280216' é diferente de " + result1006 + " <p.endSourceRange().toString()>")
chamada antiga: assertNotNull(text)
nova chamada: assertNotNull(text, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("1000,10:279655-1000,357:280002", text.sourceRange().toString())
nova chamada: assertEquals("1000,10:279655-1000,357:280002", text.sourceRange().toString(), "Era esperado valores iguais, mas  '1000,10:279655-1000,357:280002' é diferente de " + result1007 + " <text.sourceRange().toString()>")
chamada antiga: assertNotNull(item)
nova chamada: assertNotNull(item, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("13,5:496-13,11:502", item.sourceRange().toString())
nova chamada: assertEquals("13,5:496-13,11:502", item.sourceRange().toString(), "Era esperado valores iguais, mas  '13,5:496-13,11:502' é diferente de " + result1008 + " <item.sourceRange().toString()>")
chamada antiga: assertEquals("17,5:779-17,12:786", item.endSourceRange().toString())
nova chamada: assertEquals("17,5:779-17,12:786", item.endSourceRange().toString(), "Era esperado valores iguais, mas  '17,5:779-17,12:786' é diferente de " + result1009 + " <item.endSourceRange().toString()>")
chamada antiga: assertEquals("<!doctype html>", html5.outerHtml())
nova chamada: assertEquals("<!doctype html>", html5.outerHtml(), "Era esperado valores iguais, mas  '!doctype html' é diferente de " + result1010 + " <html5.outerHtml()>")
chamada antiga: assertEquals("<!DOCTYPE html PUBLIC \"-//IETF//DTD HTML//\">", publicDocType.outerHtml())
nova chamada: assertEquals("<!DOCTYPE html PUBLIC \"-//IETF//DTD HTML//\">", publicDocType.outerHtml(), "Era esperado valores iguais, mas  '!DOCTYPE html PUBLIC \'-//IETF//DTD HTML//\'' é diferente de " + result1011 + " <publicDocType.outerHtml()>")
chamada antiga: assertEquals("<!DOCTYPE html SYSTEM \"http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd\">", systemDocType.outerHtml())
nova chamada: assertEquals("<!DOCTYPE html SYSTEM \"http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd\">", systemDocType.outerHtml(), "Era esperado valores iguais, mas  '!DOCTYPE html SYSTEM \'http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd\'' é diferente de " + result1012 + " <systemDocType.outerHtml()>")
chamada antiga: assertEquals("<!DOCTYPE notHtml PUBLIC \"--public\" \"--system\">", combo.outerHtml())
nova chamada: assertEquals("<!DOCTYPE notHtml PUBLIC \"--public\" \"--system\">", combo.outerHtml(), "Era esperado valores iguais, mas  '!DOCTYPE notHtml PUBLIC \'--public\' \'--system\'' é diferente de " + result1013 + " <combo.outerHtml()>")
chamada antiga: assertEquals("notHtml", combo.name())
nova chamada: assertEquals("notHtml", combo.name(), "Era esperado valores iguais, mas  'notHtml' é diferente de " + result1014 + " <combo.name()>")
chamada antiga: assertEquals("--public", combo.publicId())
nova chamada: assertEquals("--public", combo.publicId(), "Era esperado valores iguais, mas  '--public' é diferente de " + result1015 + " <combo.publicId()>")
chamada antiga: assertEquals("--system", combo.systemId())
nova chamada: assertEquals("--system", combo.systemId(), "Era esperado valores iguais, mas  '--system' é diferente de " + result1016 + " <combo.systemId()>")
chamada antiga: assertEquals("<!doctype html>", htmlOutput(base))
nova chamada: assertEquals("<!doctype html>", htmlOutput(base), "Era esperado valores iguais, mas  '!doctype html' é diferente de " + result1017 + " <htmlOutput(base)>")
chamada antiga: assertEquals(base, xmlOutput(base))
nova chamada: assertEquals(base, xmlOutput(base), "Era esperado valores iguais, mas  base é diferente de " + result1018 + " <xmlOutput(base)>")
chamada antiga: assertEquals(publicDoc, htmlOutput(publicDoc))
nova chamada: assertEquals(publicDoc, htmlOutput(publicDoc), "Era esperado valores iguais, mas  publicDoc é diferente de " + result1019 + " <htmlOutput(publicDoc)>")
chamada antiga: assertEquals(publicDoc, xmlOutput(publicDoc))
nova chamada: assertEquals(publicDoc, xmlOutput(publicDoc), "Era esperado valores iguais, mas  publicDoc é diferente de " + result1020 + " <xmlOutput(publicDoc)>")
chamada antiga: assertEquals(systemDoc, htmlOutput(systemDoc))
nova chamada: assertEquals(systemDoc, htmlOutput(systemDoc), "Era esperado valores iguais, mas  systemDoc é diferente de " + result1021 + " <htmlOutput(systemDoc)>")
chamada antiga: assertEquals(systemDoc, xmlOutput(systemDoc))
nova chamada: assertEquals(systemDoc, xmlOutput(systemDoc), "Era esperado valores iguais, mas  systemDoc é diferente de " + result1022 + " <xmlOutput(systemDoc)>")
chamada antiga: assertEquals(legacyDoc, htmlOutput(legacyDoc))
nova chamada: assertEquals(legacyDoc, htmlOutput(legacyDoc), "Era esperado valores iguais, mas  legacyDoc é diferente de " + result1023 + " <htmlOutput(legacyDoc)>")
chamada antiga: assertEquals(legacyDoc, xmlOutput(legacyDoc))
nova chamada: assertEquals(legacyDoc, xmlOutput(legacyDoc), "Era esperado valores iguais, mas  legacyDoc é diferente de " + result1024 + " <xmlOutput(legacyDoc)>")
chamada antiga: assertEquals(3, a.size())
nova chamada: assertEquals(3, a.size(), "Era esperado valores iguais, mas  3 é diferente de " + result1025 + " <a.size()>")
chamada antiga: assertTrue(a.hasKey("Tot"))
nova chamada: assertTrue(a.hasKey("Tot"), "Era esperado verdadeiro, mas " + result1026 + " <a.hasKey('Tot')> é falso")
chamada antiga: assertTrue(a.hasKey("Hello"))
nova chamada: assertTrue(a.hasKey("Hello"), "Era esperado verdadeiro, mas " + result1027 + " <a.hasKey('Hello')> é falso")
chamada antiga: assertTrue(a.hasKey("data-name"))
nova chamada: assertTrue(a.hasKey("data-name"), "Era esperado verdadeiro, mas " + result1028 + " <a.hasKey('data-name')> é falso")
chamada antiga: assertTrue(a.hasKeyIgnoreCase("tot"))
nova chamada: assertTrue(a.hasKeyIgnoreCase("tot"), "Era esperado verdadeiro, mas " + result1029 + " <a.hasKeyIgnoreCase('tot')> é falso")
chamada antiga: assertEquals("There", a.getIgnoreCase("hEllo"))
nova chamada: assertEquals("There", a.getIgnoreCase("hEllo"), "Era esperado valores iguais, mas  'There' é diferente de " + result1030 + " <a.getIgnoreCase('hEllo')>")
chamada antiga: assertEquals(1, dataset.size())
nova chamada: assertEquals(1, dataset.size(), "Era esperado valores iguais, mas  1 é diferente de " + result1031 + " <dataset.size()>")
chamada antiga: assertEquals("Jsoup", dataset.get("name"))
nova chamada: assertEquals("Jsoup", dataset.get("name"), "Era esperado valores iguais, mas  'Jsoup' é diferente de " + result1032 + " <dataset.get('name')>")
chamada antiga: assertEquals("", a.get("tot"))
nova chamada: assertEquals("", a.get("tot"), "Era esperado valores iguais, mas  '' é diferente de " + result1033 + " <a.get('tot')>")
chamada antiga: assertEquals("a&p", a.get("Tot"))
nova chamada: assertEquals("a&p", a.get("Tot"), "Era esperado valores iguais, mas  'a&p' é diferente de " + result1034 + " <a.get('Tot')>")
chamada antiga: assertEquals("a&p", a.getIgnoreCase("tot"))
nova chamada: assertEquals("a&p", a.getIgnoreCase("tot"), "Era esperado valores iguais, mas  'a&p' é diferente de " + result1035 + " <a.getIgnoreCase('tot')>")
chamada antiga: assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", a.html())
nova chamada: assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", a.html(), "Era esperado valores iguais, mas  ' Tot=\'a&amp;p\' Hello=\'There\' data-name=\'Jsoup\'' é diferente de " + result1036 + " <a.html()>")
chamada antiga: assertEquals(a.html(), a.toString())
nova chamada: assertEquals(a.html(), a.toString(), "Era esperado valores iguais, mas " + result1037 + " <a.html()> é diferente de " + result1038 + " <a.toString()>")
chamada antiga: assertTrue(a.hasKey("Tot"))
nova chamada: assertTrue(a.hasKey("Tot"), "Era esperado verdadeiro, mas " + result1039 + " <a.hasKey('Tot')> é falso")
chamada antiga: assertEquals("Tot", attr.getKey())
nova chamada: assertEquals("Tot", attr.getKey(), "Era esperado valores iguais, mas  'Tot' é diferente de " + result1040 + " <attr.getKey()>")
chamada antiga: assertEquals(2, a.size())
nova chamada: assertEquals(2, a.size(), "Era esperado valores iguais, mas  2 é diferente de " + result1041 + " <a.size()>")
chamada antiga: assertEquals("Hello", attr.getKey())
nova chamada: assertEquals("Hello", attr.getKey(), "Era esperado valores iguais, mas  'Hello' é diferente de " + result1042 + " <attr.getKey()>")
chamada antiga: assertEquals("There", attr.getValue())
nova chamada: assertEquals("There", attr.getValue(), "Era esperado valores iguais, mas  'There' é diferente de " + result1043 + " <attr.getValue()>")
chamada antiga: assertEquals(2, a.size())
nova chamada: assertEquals(2, a.size(), "Era esperado valores iguais, mas  2 é diferente de " + result1044 + " <a.size()>")
chamada antiga: assertEquals("There", a.get("Hello"))
nova chamada: assertEquals("There", a.get("Hello"), "Era esperado valores iguais, mas  'There' é diferente de " + result1045 + " <a.get('Hello')>")
chamada antiga: assertEquals("a&p", a.get("Foo"))
nova chamada: assertEquals("a&p", a.get("Foo"), "Era esperado valores iguais, mas  'a&p' é diferente de " + result1046 + " <a.get('Foo')>")
chamada antiga: assertEquals("Qux", a.get("Bar"))
nova chamada: assertEquals("Qux", a.get("Bar"), "Era esperado valores iguais, mas  'Qux' é diferente de " + result1047 + " <a.get('Bar')>")
chamada antiga: assertEquals(3, seen)
nova chamada: assertEquals(3, seen, "Era esperado valores iguais, mas  3 é diferente de " + " seen")
chamada antiga: assertTrue(iterator.hasNext())
nova chamada: assertTrue(iterator.hasNext(), "Era esperado verdadeiro, mas " + result1048 + " <iterator.hasNext()> é falso")
chamada antiga: assertEquals(datas.length, i)
nova chamada: assertEquals(datas.length, i, "Era esperado valores iguais, mas  datas.length é diferente de " + " i")
chamada antiga: assertTrue(it.hasNext())
nova chamada: assertTrue(it.hasNext(), "Era esperado verdadeiro, mas " + result1049 + " <it.hasNext()> é falso")
chamada antiga: assertEquals("One", it.next().getKey())
nova chamada: assertEquals("One", it.next().getKey(), "Era esperado valores iguais, mas  'One' é diferente de " + result1050 + " <it.next().getKey()>")
chamada antiga: assertTrue(it.hasNext())
nova chamada: assertTrue(it.hasNext(), "Era esperado verdadeiro, mas " + result1051 + " <it.hasNext()> é falso")
chamada antiga: assertEquals("Two", it.next().getKey())
nova chamada: assertEquals("Two", it.next().getKey(), "Era esperado valores iguais, mas  'Two' é diferente de " + result1052 + " <it.next().getKey()>")
chamada antiga: assertEquals(2, seen)
nova chamada: assertEquals(2, seen, "Era esperado valores iguais, mas  2 é diferente de " + " seen")
chamada antiga: assertEquals(2, attributes.size())
nova chamada: assertEquals(2, attributes.size(), "Era esperado valores iguais, mas  2 é diferente de " + result1053 + " <attributes.size()>")
chamada antiga: assertEquals("One", attributes.get(0).getKey())
nova chamada: assertEquals("One", attributes.get(0).getKey(), "Era esperado valores iguais, mas  'One' é diferente de " + result1054 + " <attributes.get(0).getKey()>")
chamada antiga: assertEquals("Two", attributes.get(1).getKey())
nova chamada: assertEquals("Two", attributes.get(1).getKey(), "Era esperado valores iguais, mas  'Two' é diferente de " + result1055 + " <attributes.get(1).getKey()>")
chamada antiga: assertEquals(" One=\"One\" Two=\"Two\"", a.html())
nova chamada: assertEquals(" One=\"One\" Two=\"Two\"", a.html(), "Era esperado valores iguais, mas  ' One=\'One\' Two=\'Two\'' é diferente de " + result1056 + " <a.html()>")
chamada antiga: assertEquals(5, a.size())
nova chamada: assertEquals(5, a.size(), "Era esperado valores iguais, mas  5 é diferente de " + result1057 + " <a.size()>")
chamada antiga: assertEquals(3, a.size())
nova chamada: assertEquals(3, a.size(), "Era esperado valores iguais, mas  3 é diferente de " + result1058 + " <a.size()>")
chamada antiga: assertTrue(a.hasKey("tot"))
nova chamada: assertTrue(a.hasKey("tot"), "Era esperado verdadeiro, mas " + result1059 + " <a.hasKey('tot')> é falso")
chamada antiga: assertTrue(ats.hasDeclaredValueForKey("a"))
nova chamada: assertTrue(ats.hasDeclaredValueForKey("a"), "Era esperado verdadeiro, mas " + result1060 + " <ats.hasDeclaredValueForKey('a')> é falso")
chamada antiga: assertTrue(ats.hasDeclaredValueForKeyIgnoreCase("A"))
nova chamada: assertTrue(ats.hasDeclaredValueForKeyIgnoreCase("A"), "Era esperado verdadeiro, mas " + result1061 + " <ats.hasDeclaredValueForKeyIgnoreCase('A')> é falso")
chamada antiga: assertEquals(2, a.size())
nova chamada: assertEquals(2, a.size(), "Era esperado valores iguais, mas  2 é diferente de " + result1062 + " <a.size()>")
chamada antiga: assertEquals(4, a.size())
nova chamada: assertEquals(4, a.size(), "Era esperado valores iguais, mas  4 é diferente de " + result1063 + " <a.size()>")
chamada antiga: assertEquals(2, a.asList().size())
nova chamada: assertEquals(2, a.asList().size(), "Era esperado valores iguais, mas  2 é diferente de " + result1064 + " <a.asList().size()>")
chamada antiga: assertEquals(" foo bar=\"\" async qux=\"qux\" defer=\"deferring\" ismap inert", el.attributes().html())
nova chamada: assertEquals(" foo bar=\"\" async qux=\"qux\" defer=\"deferring\" ismap inert", el.attributes().html(), "Era esperado valores iguais, mas  ' foo bar=\'\' async qux=\'qux\' defer=\'deferring\' ismap inert' é diferente de " + result1065 + " <el.attributes().html()>")
chamada antiga: assertEquals("key", attribute.html())
nova chamada: assertEquals("key", attribute.html(), "Era esperado valores iguais, mas  'key' é diferente de " + result1066 + " <attribute.html()>")
chamada antiga: assertEquals(" key", attributes.html())
nova chamada: assertEquals(" key", attributes.html(), "Era esperado valores iguais, mas  ' key' é diferente de " + result1067 + " <attributes.html()>")
chamada antiga: assertEquals("checked", attribute.html())
nova chamada: assertEquals("checked", attribute.html(), "Era esperado valores iguais, mas  'checked' é diferente de " + result1068 + " <attribute.html()>")
chamada antiga: assertEquals(" checked", attributes.html())
nova chamada: assertEquals(" checked", attributes.html(), "Era esperado valores iguais, mas  ' checked' é diferente de " + result1069 + " <attributes.html()>")
chamada antiga: assertEquals("checked", attribute.html())
nova chamada: assertEquals("checked", attribute.html(), "Era esperado valores iguais, mas  'checked' é diferente de " + result1070 + " <attribute.html()>")
chamada antiga: assertEquals(" checked", attributes.html())
nova chamada: assertEquals(" checked", attributes.html(), "Era esperado valores iguais, mas  ' checked' é diferente de " + result1071 + " <attributes.html()>")
chamada antiga: assertEquals(one, one.clone())
nova chamada: assertEquals(one, one.clone(), "Era esperado valores iguais, mas  one é diferente de " + result1072 + " <one.clone()>")
chamada antiga: assertEquals(one, two)
nova chamada: assertEquals(one, two, "Era esperado valores iguais, mas  one é diferente de " + " two")
chamada antiga: assertEquals(two, two)
nova chamada: assertEquals(two, two, "Era esperado valores iguais, mas  two é diferente de " + " two")
chamada antiga: assertEquals(one, three)
nova chamada: assertEquals(one, three, "Era esperado valores iguais, mas  one é diferente de " + " three")
chamada antiga: assertEquals(two, three)
nova chamada: assertEquals(two, three, "Era esperado valores iguais, mas  two é diferente de " + " three")
chamada antiga: assertEquals(three, three)
nova chamada: assertEquals(three, three, "Era esperado valores iguais, mas  three é diferente de " + " three")
chamada antiga: assertEquals(three, three.clone())
nova chamada: assertEquals(three, three.clone(), "Era esperado valores iguais, mas  three é diferente de " + result1073 + " <three.clone()>")
chamada antiga: assertEquals(four, four)
nova chamada: assertEquals(four, four, "Era esperado valores iguais, mas  four é diferente de " + " four")
chamada antiga: assertEquals(four, four.clone())
nova chamada: assertEquals(four, four.clone(), "Era esperado valores iguais, mas  four é diferente de " + result1074 + " <four.clone()>")
chamada antiga: assertNotEquals(one, four)
nova chamada: assertNotEquals(one, four, "Era esperado valores diferentes, mas  one é igual a " + " four")
chamada antiga: assertEquals(3, two.size())
nova chamada: assertEquals(3, two.size(), "Era esperado valores iguais, mas  3 é diferente de " + result1075 + " <two.size()>")
chamada antiga: assertEquals("Val2", two.get("Key2"))
nova chamada: assertEquals("Val2", two.get("Key2"), "Era esperado valores iguais, mas  'Val2' é diferente de " + result1076 + " <two.get('Key2')>")
chamada antiga: assertEquals(one, two)
nova chamada: assertEquals(one, two, "Era esperado valores iguais, mas  one é diferente de " + " two")
chamada antiga: assertEquals(4, two.size())
nova chamada: assertEquals(4, two.size(), "Era esperado valores iguais, mas  4 é diferente de " + result1077 + " <two.size()>")
chamada antiga: assertEquals(3, one.size())
nova chamada: assertEquals(3, one.size(), "Era esperado valores iguais, mas  3 é diferente de " + result1078 + " <one.size()>")
chamada antiga: assertNotEquals(one, two)
nova chamada: assertNotEquals(one, two, "Era esperado valores diferentes, mas  one é igual a " + " two")
chamada antiga: assertEquals(8, form.elements().size())
nova chamada: assertEquals(8, form.elements().size(), "Era esperado valores iguais, mas  8 é diferente de " + result1079 + " <form.elements().size()>")
chamada antiga: assertEquals(6, data.size())
nova chamada: assertEquals(6, data.size(), "Era esperado valores iguais, mas  6 é diferente de " + result1080 + " <data.size()>")
chamada antiga: assertEquals("one=two", data.get(0).toString())
nova chamada: assertEquals("one=two", data.get(0).toString(), "Era esperado valores iguais, mas  'one=two' é diferente de " + result1081 + " <data.get(0).toString()>")
chamada antiga: assertEquals("three=four", data.get(1).toString())
nova chamada: assertEquals("three=four", data.get(1).toString(), "Era esperado valores iguais, mas  'three=four' é diferente de " + result1082 + " <data.get(1).toString()>")
chamada antiga: assertEquals("three=five", data.get(2).toString())
nova chamada: assertEquals("three=five", data.get(2).toString(), "Era esperado valores iguais, mas  'three=five' é diferente de " + result1083 + " <data.get(2).toString()>")
chamada antiga: assertEquals("six=seven", data.get(3).toString())
nova chamada: assertEquals("six=seven", data.get(3).toString(), "Era esperado valores iguais, mas  'six=seven' é diferente de " + result1084 + " <data.get(3).toString()>")
chamada antiga: assertEquals("seven=on", data.get(4).toString())
nova chamada: assertEquals("seven=on", data.get(4).toString(), "Era esperado valores iguais, mas  'seven=on' é diferente de " + result1085 + " <data.get(4).toString()>")
chamada antiga: assertEquals("eight=on", data.get(5).toString())
nova chamada: assertEquals("eight=on", data.get(5).toString(), "Era esperado valores iguais, mas  'eight=on' é diferente de " + result1086 + " <data.get(5).toString()>")
chamada antiga: assertEquals("test=foo", form.formData().get(0).toString())
nova chamada: assertEquals("test=foo", form.formData().get(0).toString(), "Era esperado valores iguais, mas  'test=foo' é diferente de " + result1087 + " <form.formData().get(0).toString()>")
chamada antiga: assertEquals(Connection.Method.GET, con.request().method())
nova chamada: assertEquals(Connection.Method.GET, con.request().method(), "Era esperado valores iguais, mas  Connection.Method.GET é diferente de " + result1088 + " <con.request().method()>")
chamada antiga: assertEquals("http://example.com/search", con.request().url().toExternalForm())
nova chamada: assertEquals("http://example.com/search", con.request().url().toExternalForm(), "Era esperado valores iguais, mas  'http://example.com/search' é diferente de " + result1089 + " <con.request().url().toExternalForm()>")
chamada antiga: assertEquals("q=jsoup", dataList.get(0).toString())
nova chamada: assertEquals("q=jsoup", dataList.get(0).toString(), "Era esperado valores iguais, mas  'q=jsoup' é diferente de " + result1090 + " <dataList.get(0).toString()>")
chamada antiga: assertEquals(Connection.Method.POST, con2.request().method())
nova chamada: assertEquals(Connection.Method.POST, con2.request().method(), "Era esperado valores iguais, mas  Connection.Method.POST é diferente de " + result1091 + " <con2.request().method()>")
chamada antiga: assertEquals("http://example.com/", con.request().url().toExternalForm())
nova chamada: assertEquals("http://example.com/", con.request().url().toExternalForm(), "Era esperado valores iguais, mas  'http://example.com/' é diferente de " + result1092 + " <con.request().url().toExternalForm()>")
chamada antiga: assertTrue(threw)
nova chamada: assertTrue(threw, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(formEl instanceof FormElement)
nova chamada: assertTrue(formEl instanceof FormElement, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(1, form.elements().size())
nova chamada: assertEquals(1, form.elements().size(), "Era esperado valores iguais, mas  1 é diferente de " + result1093 + " <form.elements().size()>")
chamada antiga: assertTrue(formEl instanceof FormElement)
nova chamada: assertTrue(formEl instanceof FormElement, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(1, form.elements().size())
nova chamada: assertEquals(1, form.elements().size(), "Era esperado valores iguais, mas  1 é diferente de " + result1094 + " <form.elements().size()>")
chamada antiga: assertEquals("foo=bar", data.get(0).toString())
nova chamada: assertEquals("foo=bar", data.get(0).toString(), "Era esperado valores iguais, mas  'foo=bar' é diferente de " + result1095 + " <data.get(0).toString()>")
chamada antiga: assertEquals("on", data.get(0).value())
nova chamada: assertEquals("on", data.get(0).value(), "Era esperado valores iguais, mas  'on' é diferente de " + result1096 + " <data.get(0).value()>")
chamada antiga: assertEquals("foo", data.get(0).key())
nova chamada: assertEquals("foo", data.get(0).key(), "Era esperado valores iguais, mas  'foo' é diferente de " + result1097 + " <data.get(0).key()>")
chamada antiga: assertEquals(3, data.size())
nova chamada: assertEquals(3, data.size(), "Era esperado valores iguais, mas  3 é diferente de " + result1098 + " <data.size()>")
chamada antiga: assertEquals("user", data.get(0).key())
nova chamada: assertEquals("user", data.get(0).key(), "Era esperado valores iguais, mas  'user' é diferente de " + result1099 + " <data.get(0).key()>")
chamada antiga: assertEquals("pass", data.get(1).key())
nova chamada: assertEquals("pass", data.get(1).key(), "Era esperado valores iguais, mas  'pass' é diferente de " + result1100 + " <data.get(1).key()>")
chamada antiga: assertEquals("login", data.get(2).key())
nova chamada: assertEquals("login", data.get(2).key(), "Era esperado valores iguais, mas  'login' é diferente de " + result1101 + " <data.get(2).key()>")
chamada antiga: assertEquals(2, data.size())
nova chamada: assertEquals(2, data.size(), "Era esperado valores iguais, mas  2 é diferente de " + result1102 + " <data.size()>")
chamada antiga: assertEquals("user", data.get(0).key())
nova chamada: assertEquals("user", data.get(0).key(), "Era esperado valores iguais, mas  'user' é diferente de " + result1103 + " <data.get(0).key()>")
chamada antiga: assertEquals("login", data.get(1).key())
nova chamada: assertEquals("login", data.get(1).key(), "Era esperado valores iguais, mas  'login' é diferente de " + result1104 + " <data.get(1).key()>")
chamada antiga: assertNull(doc.selectFirst("input[name=pass]"))
nova chamada: assertNull(doc.selectFirst("input[name=pass]"), "Era esperado nulo, mas " + result1105 + " <doc.selectFirst('input[name=pass]')> não é nulo")
chamada antiga: assertEquals(echoUrl, echo.location())
nova chamada: assertEquals(echoUrl, echo.location(), "Era esperado valores iguais, mas  echoUrl é diferente de " + result1106 + " <echo.location()>")
chamada antiga: assertEquals("EchoServlet", els.get(0).nextElementSibling().text())
nova chamada: assertEquals("EchoServlet", els.get(0).nextElementSibling().text(), "Era esperado valores iguais, mas  'EchoServlet' é diferente de " + result1107 + " <els.get(0).nextElementSibling().text()>")
chamada antiga: assertEquals("Root", els.get(1).nextElementSibling().text())
nova chamada: assertEquals("Root", els.get(1).nextElementSibling().text(), "Era esperado valores iguais, mas  'Root' é diferente de " + result1108 + " <els.get(1).nextElementSibling().text()>")
chamada antiga: assertTrue(cookieDoc.connection().response().url().toExternalForm().contains("CookieServlet"))
nova chamada: assertTrue(cookieDoc.connection().response().url().toExternalForm().contains("CookieServlet"), "Era esperado verdadeiro, mas " + result1109 + " <cookieDoc.connection().response().url().toExternalForm().contains('CookieServlet')> é falso")
chamada antiga: assertTrue(formDoc.connection().response().url().toExternalForm().contains("upload-form"))
nova chamada: assertTrue(formDoc.connection().response().url().toExternalForm().contains("upload-form"), "Era esperado verdadeiro, mas " + result1110 + " <formDoc.connection().response().url().toExternalForm().contains('upload-form')> é falso")
chamada antiga: assertTrue(echo.connection().response().url().toExternalForm().contains("EchoServlet"))
nova chamada: assertTrue(echo.connection().response().url().toExternalForm().contains("EchoServlet"), "Era esperado verdadeiro, mas " + result1111 + " <echo.connection().response().url().toExternalForm().contains('EchoServlet')> é falso")
chamada antiga: assertEquals("Hello &amp;&lt;&gt; &Aring; &aring; &#x3c0; &#x65b0; there &frac34; &copy; &raquo;", escapedAscii)
nova chamada: assertEquals("Hello &amp;&lt;&gt; &Aring; &aring; &#x3c0; &#x65b0; there &frac34; &copy; &raquo;", escapedAscii, "Era esperado valores iguais, mas  'Hello &amp;&lt;&gt; &Aring; &aring; &#x3c0; &#x65b0; there &frac34; &copy; &raquo;' é diferente de " + " escapedAscii")
chamada antiga: assertEquals("Hello &amp;&lt;&gt; &angst; &aring; &pi; &#x65b0; there &frac34; &copy; &raquo;", escapedAsciiFull)
nova chamada: assertEquals("Hello &amp;&lt;&gt; &angst; &aring; &pi; &#x65b0; there &frac34; &copy; &raquo;", escapedAsciiFull, "Era esperado valores iguais, mas  'Hello &amp;&lt;&gt; &angst; &aring; &pi; &#x65b0; there &frac34; &copy; &raquo;' é diferente de " + " escapedAsciiFull")
chamada antiga: assertEquals("Hello &amp;&lt;&gt; &#xc5; &#xe5; &#x3c0; &#x65b0; there &#xbe; &#xa9; &#xbb;", escapedAsciiXhtml)
nova chamada: assertEquals("Hello &amp;&lt;&gt; &#xc5; &#xe5; &#x3c0; &#x65b0; there &#xbe; &#xa9; &#xbb;", escapedAsciiXhtml, "Era esperado valores iguais, mas  'Hello &amp;&lt;&gt; &#xc5; &#xe5; &#x3c0; &#x65b0; there &#xbe; &#xa9; &#xbb;' é diferente de " + " escapedAsciiXhtml")
chamada antiga: assertEquals("Hello &amp;&lt;&gt; Å å π 新 there ¾ © »", escapedUtfFull)
nova chamada: assertEquals("Hello &amp;&lt;&gt; Å å π 新 there ¾ © »", escapedUtfFull, "Era esperado valores iguais, mas  'Hello &amp;&lt;&gt; Å å π 新 there ¾ © »' é diferente de " + " escapedUtfFull")
chamada antiga: assertEquals("Hello &amp;&lt;&gt; Å å π 新 there ¾ © »", escapedUtfMin)
nova chamada: assertEquals("Hello &amp;&lt;&gt; Å å π 新 there ¾ © »", escapedUtfMin, "Era esperado valores iguais, mas  'Hello &amp;&lt;&gt; Å å π 新 there ¾ © »' é diferente de " + " escapedUtfMin")
chamada antiga: assertEquals(text, Entities.unescape(escapedAscii))
nova chamada: assertEquals(text, Entities.unescape(escapedAscii), "Era esperado valores iguais, mas  text é diferente de " + result1112 + " <Entities.unescape(escapedAscii)>")
chamada antiga: assertEquals(text, Entities.unescape(escapedAsciiFull))
nova chamada: assertEquals(text, Entities.unescape(escapedAsciiFull), "Era esperado valores iguais, mas  text é diferente de " + result1113 + " <Entities.unescape(escapedAsciiFull)>")
chamada antiga: assertEquals(text, Entities.unescape(escapedAsciiXhtml))
nova chamada: assertEquals(text, Entities.unescape(escapedAsciiXhtml), "Era esperado valores iguais, mas  text é diferente de " + result1114 + " <Entities.unescape(escapedAsciiXhtml)>")
chamada antiga: assertEquals(text, Entities.unescape(escapedUtfFull))
nova chamada: assertEquals(text, Entities.unescape(escapedUtfFull), "Era esperado valores iguais, mas  text é diferente de " + result1115 + " <Entities.unescape(escapedUtfFull)>")
chamada antiga: assertEquals(text, Entities.unescape(escapedUtfMin))
nova chamada: assertEquals(text, Entities.unescape(escapedUtfMin), "Era esperado valores iguais, mas  text é diferente de " + result1116 + " <Entities.unescape(escapedUtfMin)>")
chamada antiga: assertEquals("&#x1d559;", escapedAscii)
nova chamada: assertEquals("&#x1d559;", escapedAscii, "Era esperado valores iguais, mas  '&#x1d559;' é diferente de " + " escapedAscii")
chamada antiga: assertEquals("&hopf;", escapedAsciiFull)
nova chamada: assertEquals("&hopf;", escapedAsciiFull, "Era esperado valores iguais, mas  '&hopf;' é diferente de " + " escapedAsciiFull")
chamada antiga: assertEquals(text, escapedUtf)
nova chamada: assertEquals(text, escapedUtf, "Era esperado valores iguais, mas  text é diferente de " + " escapedUtf")
chamada antiga: assertEquals(un, Entities.unescape(text))
nova chamada: assertEquals(un, Entities.unescape(text), "Era esperado valores iguais, mas  un é diferente de " + result1117 + " <Entities.unescape(text)>")
chamada antiga: assertEquals("&Gt; &Gg;&#x338; &Gt;&#x20d2; &Gt;&#x338; &Gt; &Gt;", escaped)
nova chamada: assertEquals("&Gt; &Gg;&#x338; &Gt;&#x20d2; &Gt;&#x338; &Gt; &Gt;", escaped, "Era esperado valores iguais, mas  '&Gt; &Gg;&#x338; &Gt;&#x20d2; &Gt;&#x338; &Gt; &Gt;' é diferente de " + " escaped")
chamada antiga: assertEquals(un, Entities.unescape(escaped))
nova chamada: assertEquals(un, Entities.unescape(escaped), "Era esperado valores iguais, mas  un é diferente de " + result1118 + " <Entities.unescape(escaped)>")
chamada antiga: assertEquals(38, xhtml.codepointForName("amp"))
nova chamada: assertEquals(38, xhtml.codepointForName("amp"), "Era esperado valores iguais, mas  38 é diferente de " + result1119 + " <xhtml.codepointForName('amp')>")
chamada antiga: assertEquals(62, xhtml.codepointForName("gt"))
nova chamada: assertEquals(62, xhtml.codepointForName("gt"), "Era esperado valores iguais, mas  62 é diferente de " + result1120 + " <xhtml.codepointForName('gt')>")
chamada antiga: assertEquals(60, xhtml.codepointForName("lt"))
nova chamada: assertEquals(60, xhtml.codepointForName("lt"), "Era esperado valores iguais, mas  60 é diferente de " + result1121 + " <xhtml.codepointForName('lt')>")
chamada antiga: assertEquals(34, xhtml.codepointForName("quot"))
nova chamada: assertEquals(34, xhtml.codepointForName("quot"), "Era esperado valores iguais, mas  34 é diferente de " + result1122 + " <xhtml.codepointForName('quot')>")
chamada antiga: assertEquals("amp", xhtml.nameForCodepoint(38))
nova chamada: assertEquals("amp", xhtml.nameForCodepoint(38), "Era esperado valores iguais, mas  'amp' é diferente de " + result1123 + " <xhtml.nameForCodepoint(38)>")
chamada antiga: assertEquals("gt", xhtml.nameForCodepoint(62))
nova chamada: assertEquals("gt", xhtml.nameForCodepoint(62), "Era esperado valores iguais, mas  'gt' é diferente de " + result1124 + " <xhtml.nameForCodepoint(62)>")
chamada antiga: assertEquals("lt", xhtml.nameForCodepoint(60))
nova chamada: assertEquals("lt", xhtml.nameForCodepoint(60), "Era esperado valores iguais, mas  'lt' é diferente de " + result1125 + " <xhtml.nameForCodepoint(60)>")
chamada antiga: assertEquals("quot", xhtml.nameForCodepoint(34))
nova chamada: assertEquals("quot", xhtml.nameForCodepoint(34), "Era esperado valores iguais, mas  'quot' é diferente de " + result1126 + " <xhtml.nameForCodepoint(34)>")
chamada antiga: assertEquals("≫⃒", Entities.getByName("nGt"))
nova chamada: assertEquals("≫⃒", Entities.getByName("nGt"), "Era esperado valores iguais, mas  '≫⃒' é diferente de " + result1127 + " <Entities.getByName('nGt')>")
chamada antiga: assertEquals("fj", Entities.getByName("fjlig"))
nova chamada: assertEquals("fj", Entities.getByName("fjlig"), "Era esperado valores iguais, mas  'fj' é diferente de " + result1128 + " <Entities.getByName('fjlig')>")
chamada antiga: assertEquals("≫", Entities.getByName("gg"))
nova chamada: assertEquals("≫", Entities.getByName("gg"), "Era esperado valores iguais, mas  '≫' é diferente de " + result1129 + " <Entities.getByName('gg')>")
chamada antiga: assertEquals("©", Entities.getByName("copy"))
nova chamada: assertEquals("©", Entities.getByName("copy"), "Era esperado valores iguais, mas  '©' é diferente de " + result1130 + " <Entities.getByName('copy')>")
chamada antiga: assertEquals("&#x210c1;", escapedAscii)
nova chamada: assertEquals("&#x210c1;", escapedAscii, "Era esperado valores iguais, mas  '&#x210c1;' é diferente de " + " escapedAscii")
chamada antiga: assertEquals(text, escapedUtf)
nova chamada: assertEquals(text, escapedUtf, "Era esperado valores iguais, mas  text é diferente de " + " escapedUtf")
chamada antiga: assertEquals(un, Entities.unescape(text))
nova chamada: assertEquals(un, Entities.unescape(text), "Era esperado valores iguais, mas  un é diferente de " + result1131 + " <Entities.unescape(text)>")
chamada antiga: assertEquals(un, Entities.unescape(text))
nova chamada: assertEquals(un, Entities.unescape(text), "Era esperado valores iguais, mas  un é diferente de " + result1132 + " <Entities.unescape(text)>")
chamada antiga: assertEquals("Hello Æ &<> ® Å &angst π π 新 there &! ¾ © ©", Entities.unescape(text))
nova chamada: assertEquals("Hello Æ &<> ® Å &angst π π 新 there &! ¾ © ©", Entities.unescape(text), "Era esperado valores iguais, mas  'Hello Æ & ® Å &angst π π 新 there &! ¾ © ©' é diferente de " + result1133 + " <Entities.unescape(text)>")
chamada antiga: assertEquals("&0987654321; &unknown", Entities.unescape("&0987654321; &unknown"))
nova chamada: assertEquals("&0987654321; &unknown", Entities.unescape("&0987654321; &unknown"), "Era esperado valores iguais, mas  '&0987654321; &unknown' é diferente de " + result1134 + " <Entities.unescape('&0987654321; &unknown')>")
chamada antiga: assertEquals("Hello &amp= &", Entities.unescape(text, true))
nova chamada: assertEquals("Hello &amp= &", Entities.unescape(text, true), "Era esperado valores iguais, mas  'Hello &amp= &' é diferente de " + result1135 + " <Entities.unescape(text, true)>")
chamada antiga: assertEquals("Hello &= &", Entities.unescape(text))
nova chamada: assertEquals("Hello &= &", Entities.unescape(text), "Era esperado valores iguais, mas  'Hello &= &' é diferente de " + result1136 + " <Entities.unescape(text)>")
chamada antiga: assertEquals("Hello &= &", Entities.unescape(text, false))
nova chamada: assertEquals("Hello &= &", Entities.unescape(text, false), "Era esperado valores iguais, mas  'Hello &= &' é diferente de " + result1137 + " <Entities.unescape(text, false)>")
chamada antiga: assertEquals("&Uuml; &uuml; &amp; &amp;", Entities.escape(unescaped, new OutputSettings().charset("ascii").escapeMode(extended)))
nova chamada: assertEquals("&Uuml; &uuml; &amp; &amp;", Entities.escape(unescaped, new OutputSettings().charset("ascii").escapeMode(extended)), "Era esperado valores iguais, mas  '&Uuml; &uuml; &amp; &amp;' é diferente de " + result1138 + " <Entities.escape(unescaped, new OutputSettings().charset('ascii').escapeMode(extended))>")
chamada antiga: assertEquals("Ü ü & &", Entities.unescape(escaped))
nova chamada: assertEquals("Ü ü & &", Entities.unescape(escaped), "Era esperado valores iguais, mas  'Ü ü & &' é diferente de " + result1139 + " <Entities.unescape(escaped)>")
chamada antiga: assertEquals(unescaped, Entities.unescape(escaped))
nova chamada: assertEquals(unescaped, Entities.unescape(escaped), "Era esperado valores iguais, mas  unescaped é diferente de " + result1140 + " <Entities.unescape(escaped)>")
chamada antiga: assertEquals("&sup1;&sup2;&sup3;&frac14;&frac12;&frac34;", p.html())
nova chamada: assertEquals("&sup1;&sup2;&sup3;&frac14;&frac12;&frac34;", p.html(), "Era esperado valores iguais, mas  '&sup1;&sup2;&sup3;&frac14;&frac12;&frac34;' é diferente de " + result1141 + " <p.html()>")
chamada antiga: assertEquals("¹²³¼½¾", p.text())
nova chamada: assertEquals("¹²³¼½¾", p.text(), "Era esperado valores iguais, mas  '¹²³¼½¾' é diferente de " + result1142 + " <p.text()>")
chamada antiga: assertEquals("¹²³¼½¾", p.html())
nova chamada: assertEquals("¹²³¼½¾", p.html(), "Era esperado valores iguais, mas  '¹²³¼½¾' é diferente de " + result1143 + " <p.html()>")
chamada antiga: assertEquals(string, Entities.unescape(string))
nova chamada: assertEquals(string, Entities.unescape(string), "Era esperado valores iguais, mas  string é diferente de " + result1144 + " <Entities.unescape(string)>")
chamada antiga: assertEquals("<a title=\"<p>One</p>\">One</a>", element.outerHtml())
nova chamada: assertEquals("<a title=\"<p>One</p>\">One</a>", element.outerHtml(), "Era esperado valores iguais, mas  'a title=\'pOne/p\'One/a' é diferente de " + result1145 + " <element.outerHtml()>")
chamada antiga: assertEquals("<a title=\"&lt;p>One&lt;/p>\">One</a>", element.outerHtml())
nova chamada: assertEquals("<a title=\"&lt;p>One&lt;/p>\">One</a>", element.outerHtml(), "Era esperado valores iguais, mas  'a title=\'&lt;pOne&lt;/p\'One/a' é diferente de " + result1146 + " <element.outerHtml()>")
chamada antiga: assertEquals(input, doc.body().html())
nova chamada: assertEquals(input, doc.body().html(), "Era esperado valores iguais, mas  input é diferente de " + result1147 + " <doc.body().html()>")
chamada antiga: assertEquals(input, xml.html())
nova chamada: assertEquals(input, xml.html(), "Era esperado valores iguais, mas  input é diferente de " + result1148 + " <xml.html()>")
chamada antiga: assertEquals("", noBase.absUrl("relHref"))
nova chamada: assertEquals("", noBase.absUrl("relHref"), "Era esperado valores iguais, mas  '' é diferente de " + result1149 + " <noBase.absUrl('relHref')>")
chamada antiga: assertEquals("http://bar/qux", noBase.absUrl("absHref"))
nova chamada: assertEquals("http://bar/qux", noBase.absUrl("absHref"), "Era esperado valores iguais, mas  'http://bar/qux' é diferente de " + result1150 + " <noBase.absUrl('absHref')>")
chamada antiga: assertEquals("http://foo/foo", withBase.absUrl("relHref"))
nova chamada: assertEquals("http://foo/foo", withBase.absUrl("relHref"), "Era esperado valores iguais, mas  'http://foo/foo' é diferente de " + result1151 + " <withBase.absUrl('relHref')>")
chamada antiga: assertEquals("http://bar/qux", withBase.absUrl("absHref"))
nova chamada: assertEquals("http://bar/qux", withBase.absUrl("absHref"), "Era esperado valores iguais, mas  'http://bar/qux' é diferente de " + result1152 + " <withBase.absUrl('absHref')>")
chamada antiga: assertEquals("", withBase.absUrl("noval"))
nova chamada: assertEquals("", withBase.absUrl("noval"), "Era esperado valores iguais, mas  '' é diferente de " + result1153 + " <withBase.absUrl('noval')>")
chamada antiga: assertEquals("http://bar/qux", dodgyBase.absUrl("absHref"))
nova chamada: assertEquals("http://bar/qux", dodgyBase.absUrl("absHref"), "Era esperado valores iguais, mas  'http://bar/qux' é diferente de " + result1154 + " <dodgyBase.absUrl('absHref')>")
chamada antiga: assertEquals("", dodgyBase.absUrl("relHref"))
nova chamada: assertEquals("", dodgyBase.absUrl("relHref"), "Era esperado valores iguais, mas  '' é diferente de " + result1155 + " <dodgyBase.absUrl('relHref')>")
chamada antiga: assertEquals(baseUri, doc.baseUri())
nova chamada: assertEquals(baseUri, doc.baseUri(), "Era esperado valores iguais, mas  baseUri é diferente de " + result1156 + " <doc.baseUri()>")
chamada antiga: assertEquals(baseUri, doc.select("div").first().baseUri())
nova chamada: assertEquals(baseUri, doc.select("div").first().baseUri(), "Era esperado valores iguais, mas  baseUri é diferente de " + result1157 + " <doc.select('div').first().baseUri()>")
chamada antiga: assertEquals(baseUri, doc.select("p").first().baseUri())
nova chamada: assertEquals(baseUri, doc.select("p").first().baseUri(), "Era esperado valores iguais, mas  baseUri é diferente de " + result1158 + " <doc.select('p').first().baseUri()>")
chamada antiga: assertEquals("/foo", a.attr("href"))
nova chamada: assertEquals("/foo", a.attr("href"), "Era esperado valores iguais, mas  '/foo' é diferente de " + result1159 + " <a.attr('href')>")
chamada antiga: assertEquals("https://jsoup.org/foo", a.attr("abs:href"))
nova chamada: assertEquals("https://jsoup.org/foo", a.attr("abs:href"), "Era esperado valores iguais, mas  'https://jsoup.org/foo' é diferente de " + result1160 + " <a.attr('abs:href')>")
chamada antiga: assertTrue(a.hasAttr("abs:href"))
nova chamada: assertTrue(a.hasAttr("abs:href"), "Era esperado verdadeiro, mas " + result1161 + " <a.hasAttr('abs:href')> é falso")
chamada antiga: assertEquals("https://jsoup.org/rez/osi_logo.png", img.attr("abs:src"))
nova chamada: assertEquals("https://jsoup.org/rez/osi_logo.png", img.attr("abs:src"), "Era esperado valores iguais, mas  'https://jsoup.org/rez/osi_logo.png' é diferente de " + result1162 + " <img.attr('abs:src')>")
chamada antiga: assertEquals(img.absUrl("src"), img.attr("abs:src"))
nova chamada: assertEquals(img.absUrl("src"), img.attr("abs:src"), "Era esperado valores iguais, mas " + result1163 + " <img.absUrl('src')> é diferente de " + result1164 + " <img.attr('abs:src')>")
chamada antiga: assertTrue(one.hasAttr("href"))
nova chamada: assertTrue(one.hasAttr("href"), "Era esperado verdadeiro, mas " + result1165 + " <one.hasAttr('href')> é falso")
chamada antiga: assertEquals("", one.absUrl("href"))
nova chamada: assertEquals("", one.absUrl("href"), "Era esperado valores iguais, mas  '' é diferente de " + result1166 + " <one.absUrl('href')>")
chamada antiga: assertTrue(two.hasAttr("abs:href"))
nova chamada: assertTrue(two.hasAttr("abs:href"), "Era esperado verdadeiro, mas " + result1167 + " <two.hasAttr('abs:href')> é falso")
chamada antiga: assertTrue(two.hasAttr("href"))
nova chamada: assertTrue(two.hasAttr("href"), "Era esperado verdadeiro, mas " + result1168 + " <two.hasAttr('href')> é falso")
chamada antiga: assertEquals("https://jsoup.org/", two.absUrl("href"))
nova chamada: assertEquals("https://jsoup.org/", two.absUrl("href"), "Era esperado valores iguais, mas  'https://jsoup.org/' é diferente de " + result1169 + " <two.absUrl('href')>")
chamada antiga: assertTrue(el.hasAttr("abs:href"))
nova chamada: assertTrue(el.hasAttr("abs:href"), "Era esperado verdadeiro, mas " + result1170 + " <el.hasAttr('abs:href')> é falso")
chamada antiga: assertEquals("odd", el.attr("abs:href"))
nova chamada: assertEquals("odd", el.attr("abs:href"), "Era esperado valores iguais, mas  'odd' é diferente de " + result1171 + " <el.attr('abs:href')>")
chamada antiga: assertEquals("file:/etc/password", one.absUrl("href"))
nova chamada: assertEquals("file:/etc/password", one.absUrl("href"), "Era esperado valores iguais, mas  'file:/etc/password' é diferente de " + result1172 + " <one.absUrl('href')>")
chamada antiga: assertEquals("file:/var/log/messages", two.absUrl("href"))
nova chamada: assertEquals("file:/var/log/messages", two.absUrl("href"), "Era esperado valores iguais, mas  'file:/var/log/messages' é diferente de " + result1173 + " <two.absUrl('href')>")
chamada antiga: assertEquals("file://localhost/etc/password", one.absUrl("href"))
nova chamada: assertEquals("file://localhost/etc/password", one.absUrl("href"), "Era esperado valores iguais, mas  'file://localhost/etc/password' é diferente de " + result1174 + " <one.absUrl('href')>")
chamada antiga: assertEquals("http://example.net/foo", one.absUrl("href"))
nova chamada: assertEquals("http://example.net/foo", one.absUrl("href"), "Era esperado valores iguais, mas  'http://example.net/foo' é diferente de " + result1175 + " <one.absUrl('href')>")
chamada antiga: assertEquals("https://example.net/foo", two.absUrl("href"))
nova chamada: assertEquals("https://example.net/foo", two.absUrl("href"), "Era esperado valores iguais, mas  'https://example.net/foo' é diferente de " + result1176 + " <two.absUrl('href')>")
chamada antiga: assertEquals("https://www.google.com/images/errors/logo_sm.gif", doc3.select("img").attr("abs:src"))
nova chamada: assertEquals("https://www.google.com/images/errors/logo_sm.gif", doc3.select("img").attr("abs:src"), "Era esperado valores iguais, mas  'https://www.google.com/images/errors/logo_sm.gif' é diferente de " + result1177 + " <doc3.select('img').attr('abs:src')>")
chamada antiga: assertEquals("https://jsoup.org/path/file?foo", a1.absUrl("href"))
nova chamada: assertEquals("https://jsoup.org/path/file?foo", a1.absUrl("href"), "Era esperado valores iguais, mas  'https://jsoup.org/path/file?foo' é diferente de " + result1178 + " <a1.absUrl('href')>")
chamada antiga: assertEquals("https://jsoup.org/path/bar.html?foo", a2.absUrl("href"))
nova chamada: assertEquals("https://jsoup.org/path/bar.html?foo", a2.absUrl("href"), "Era esperado valores iguais, mas  'https://jsoup.org/path/bar.html?foo' é diferente de " + result1179 + " <a2.absUrl('href')>")
chamada antiga: assertEquals("http://example.com/one/two.html", a1.absUrl("href"))
nova chamada: assertEquals("http://example.com/one/two.html", a1.absUrl("href"), "Era esperado valores iguais, mas  'http://example.com/one/two.html' é diferente de " + result1180 + " <a1.absUrl('href')>")
chamada antiga: assertEquals("two three", p.text())
nova chamada: assertEquals("two three", p.text(), "Era esperado valores iguais, mas  'two three' é diferente de " + result1181 + " <p.text()>")
chamada antiga: assertEquals("<span>two</span> three", TextUtil.stripNewlines(p.html()))
nova chamada: assertEquals("<span>two</span> three", TextUtil.stripNewlines(p.html()), "Era esperado valores iguais, mas  'spantwo/span three' é diferente de " + result1182 + " <TextUtil.stripNewlines(p.html())>")
chamada antiga: assertEquals("One <em>foo</em> three", p.html())
nova chamada: assertEquals("One <em>foo</em> three", p.html(), "Era esperado valores iguais, mas  'One emfoo/em three' é diferente de " + result1183 + " <p.html()>")
chamada antiga: assertSame(p.ownerDocument(), doc)
nova chamada: assertSame(p.ownerDocument(), doc, "Era esperado objetos iguais, mas " + result1184 + " <p.ownerDocument()> é diferente de " + " doc")
chamada antiga: assertSame(doc.ownerDocument(), doc)
nova chamada: assertSame(doc.ownerDocument(), doc, "Era esperado objetos iguais, mas " + result1185 + " <doc.ownerDocument()> é diferente de " + " doc")
chamada antiga: assertNull(doc.parent())
nova chamada: assertNull(doc.parent(), "Era esperado nulo, mas " + result1186 + " <doc.parent()> não é nulo")
chamada antiga: assertSame(doc, root)
nova chamada: assertSame(doc, root, "Era esperado objetos iguais, mas  doc é diferente de " + " root")
chamada antiga: assertNull(root.parent())
nova chamada: assertNull(root.parent(), "Era esperado nulo, mas " + result1187 + " <root.parent()> não é nulo")
chamada antiga: assertSame(doc.root(), doc)
nova chamada: assertSame(doc.root(), doc, "Era esperado objetos iguais, mas " + result1188 + " <doc.root()> é diferente de " + " doc")
chamada antiga: assertSame(doc.root(), doc.ownerDocument())
nova chamada: assertSame(doc.root(), doc.ownerDocument(), "Era esperado objetos iguais, mas " + result1189 + " <doc.root()> é diferente de " + result1190 + " <doc.ownerDocument()>")
chamada antiga: assertNull(standAlone.parent())
nova chamada: assertNull(standAlone.parent(), "Era esperado nulo, mas " + result1191 + " <standAlone.parent()> não é nulo")
chamada antiga: assertSame(standAlone.root(), standAlone)
nova chamada: assertSame(standAlone.root(), standAlone, "Era esperado objetos iguais, mas " + result1192 + " <standAlone.root()> é diferente de " + " standAlone")
chamada antiga: assertNull(standAlone.ownerDocument())
nova chamada: assertNull(standAlone.ownerDocument(), "Era esperado nulo, mas " + result1193 + " <standAlone.ownerDocument()> não é nulo")
chamada antiga: assertEquals("<p>One <em>four</em><b>two</b> three</p>", doc.body().html())
nova chamada: assertEquals("<p>One <em>four</em><b>two</b> three</p>", doc.body().html(), "Era esperado valores iguais, mas  'pOne emfour/embtwo/b three/p' é diferente de " + result1194 + " <doc.body().html()>")
chamada antiga: assertEquals("<p>One <em>four</em><i>five</i><b>two</b> three</p>", doc.body().html())
nova chamada: assertEquals("<p>One <em>four</em><i>five</i><b>two</b> three</p>", doc.body().html(), "Era esperado valores iguais, mas  'pOne emfour/emifive/ibtwo/b three/p' é diferente de " + result1195 + " <doc.body().html()>")
chamada antiga: assertEquals("<p>One <b>two</b><em>four</em> three</p>", doc.body().html())
nova chamada: assertEquals("<p>One <b>two</b><em>four</em> three</p>", doc.body().html(), "Era esperado valores iguais, mas  'pOne btwo/bemfour/em three/p' é diferente de " + result1196 + " <doc.body().html()>")
chamada antiga: assertEquals("<p>One <b>two</b><i>five</i><em>four</em> three</p>", doc.body().html())
nova chamada: assertEquals("<p>One <b>two</b><i>five</i><em>four</em> three</p>", doc.body().html(), "Era esperado valores iguais, mas  'pOne btwo/bifive/iemfour/em three/p' é diferente de " + result1197 + " <doc.body().html()>")
chamada antiga: assertEquals("<div>One Two <b>Three</b> Four</div>", TextUtil.stripNewlines(doc.body().html()))
nova chamada: assertEquals("<div>One Two <b>Three</b> Four</div>", TextUtil.stripNewlines(doc.body().html()), "Era esperado valores iguais, mas  'divOne Two bThree/b Four/div' é diferente de " + result1198 + " <TextUtil.stripNewlines(doc.body().html())>")
chamada antiga: assertTrue(node instanceof TextNode)
nova chamada: assertTrue(node instanceof TextNode, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("Two ", ((TextNode) node).text())
nova chamada: assertEquals("Two ", ((TextNode) node).text(), "Era esperado valores iguais, mas  'Two ' é diferente de " + result1199 + " <((TextNode) node).text()>")
chamada antiga: assertEquals(node, twoText)
nova chamada: assertEquals(node, twoText, "Era esperado valores iguais, mas  node é diferente de " + " twoText")
chamada antiga: assertEquals(node.parent(), doc.select("div").first())
nova chamada: assertEquals(node.parent(), doc.select("div").first(), "Era esperado valores iguais, mas " + result1200 + " <node.parent()> é diferente de " + result1201 + " <doc.select('div').first()>")
chamada antiga: assertEquals("<div>One  Two</div>", TextUtil.stripNewlines(doc.body().html()))
nova chamada: assertEquals("<div>One  Two</div>", TextUtil.stripNewlines(doc.body().html()), "Era esperado valores iguais, mas  'divOne  Two/div' é diferente de " + result1202 + " <TextUtil.stripNewlines(doc.body().html())>")
chamada antiga: assertNull(node)
nova chamada: assertNull(node, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals("<div><p><#text></#text></p></div>", accum.toString())
nova chamada: assertEquals("<div><p><#text></#text></p></div>", accum.toString(), "Era esperado valores iguais, mas  'divp#text/#text/p/div' é diferente de " + result1203 + " <accum.toString()>")
chamada antiga: assertEquals("<div><p>Hello</p></div><div>There Now<p>Another</p></div>", TextUtil.stripNewlines(doc.body().html()))
nova chamada: assertEquals("<div><p>Hello</p></div><div>There Now<p>Another</p></div>", TextUtil.stripNewlines(doc.body().html()), "Era esperado valores iguais, mas  'divpHello/p/divdivThere NowpAnother/p/div' é diferente de " + result1204 + " <TextUtil.stripNewlines(doc.body().html())>")
chamada antiga: assertEquals(0, node.siblingIndex())
nova chamada: assertEquals(0, node.siblingIndex(), "Era esperado valores iguais, mas  0 é diferente de " + result1205 + " <node.siblingIndex()>")
chamada antiga: assertEquals(0, node.siblingNodes().size())
nova chamada: assertEquals(0, node.siblingNodes().size(), "Era esperado valores iguais, mas  0 é diferente de " + result1206 + " <node.siblingNodes().size()>")
chamada antiga: assertNull(node.previousSibling())
nova chamada: assertNull(node.previousSibling(), "Era esperado nulo, mas " + result1207 + " <node.previousSibling()> não é nulo")
chamada antiga: assertNull(node.nextSibling())
nova chamada: assertNull(node.nextSibling(), "Era esperado nulo, mas " + result1208 + " <node.nextSibling()> não é nulo")
chamada antiga: assertEquals(0, el.siblingElements().size())
nova chamada: assertEquals(0, el.siblingElements().size(), "Era esperado valores iguais, mas  0 é diferente de " + result1209 + " <el.siblingElements().size()>")
chamada antiga: assertNull(el.previousElementSibling())
nova chamada: assertNull(el.previousElementSibling(), "Era esperado nulo, mas " + result1210 + " <el.previousElementSibling()> não é nulo")
chamada antiga: assertNull(el.nextElementSibling())
nova chamada: assertNull(el.nextElementSibling(), "Era esperado nulo, mas " + result1211 + " <el.nextElementSibling()> não é nulo")
chamada antiga: assertEquals("Two", p2.text())
nova chamada: assertEquals("Two", p2.text(), "Era esperado valores iguais, mas  'Two' é diferente de " + result1212 + " <p2.text()>")
chamada antiga: assertEquals(2, nodes.size())
nova chamada: assertEquals(2, nodes.size(), "Era esperado valores iguais, mas  2 é diferente de " + result1213 + " <nodes.size()>")
chamada antiga: assertEquals("<p>One</p>", nodes.get(0).outerHtml())
nova chamada: assertEquals("<p>One</p>", nodes.get(0).outerHtml(), "Era esperado valores iguais, mas  'pOne/p' é diferente de " + result1214 + " <nodes.get(0).outerHtml()>")
chamada antiga: assertEquals("<p>Three</p>", nodes.get(1).outerHtml())
nova chamada: assertEquals("<p>Three</p>", nodes.get(1).outerHtml(), "Era esperado valores iguais, mas  'pThree/p' é diferente de " + result1215 + " <nodes.get(1).outerHtml()>")
chamada antiga: assertEquals(5, divChildren.size())
nova chamada: assertEquals(5, divChildren.size(), "Era esperado valores iguais, mas  5 é diferente de " + result1216 + " <divChildren.size()>")
chamada antiga: assertEquals("Text 1 ", tn1.text())
nova chamada: assertEquals("Text 1 ", tn1.text(), "Era esperado valores iguais, mas  'Text 1 ' é diferente de " + result1217 + " <tn1.text()>")
chamada antiga: assertEquals("<div id=\"1\">Text 1 <p>One</p> Text 2 <p>Two</p><p>Three</p></div><div id=\"2\">Text 1 updated" + "<p>One</p> Text 2 <p>Two</p><p>Three</p></div>", TextUtil.stripNewlines(doc.body().html()))
nova chamada: assertEquals("<div id=\"1\">Text 1 <p>One</p> Text 2 <p>Two</p><p>Three</p></div><div id=\"2\">Text 1 updated" + "<p>One</p> Text 2 <p>Two</p><p>Three</p></div>", TextUtil.stripNewlines(doc.body().html()), "Era esperado valores iguais, mas  'div id=\'1\'Text 1 pOne/p Text 2 pTwo/ppThree/p/divdiv id=\'2\'Text 1 updated' + 'pOne/p Text 2 pTwo/ppThree/p/div' é diferente de " + result1218 + " <TextUtil.stripNewlines(doc.body().html())>")
chamada antiga: assertTrue(el.hasClass("foo"))
nova chamada: assertTrue(el.hasClass("foo"), "Era esperado verdadeiro, mas " + result1219 + " <el.hasClass('foo')> é falso")
chamada antiga: assertTrue(elClone.hasClass("foo"))
nova chamada: assertTrue(elClone.hasClass("foo"), "Era esperado verdadeiro, mas " + result1220 + " <elClone.hasClass('foo')> é falso")
chamada antiga: assertEquals("Text", elClone.text())
nova chamada: assertEquals("Text", elClone.text(), "Era esperado valores iguais, mas  'Text' é diferente de " + result1221 + " <elClone.text()>")
chamada antiga: assertTrue(elClone.hasClass("foo"))
nova chamada: assertTrue(elClone.hasClass("foo"), "Era esperado verdadeiro, mas " + result1222 + " <elClone.hasClass('foo')> é falso")
chamada antiga: assertEquals("None", el.text())
nova chamada: assertEquals("None", el.text(), "Era esperado valores iguais, mas  'None' é diferente de " + result1223 + " <el.text()>")
chamada antiga: assertEquals("Text", elClone.text())
nova chamada: assertEquals("Text", elClone.text(), "Era esperado valores iguais, mas  'Text' é diferente de " + result1224 + " <elClone.text()>")
chamada antiga: assertEquals(singletonAttributes(), getAttributesCaseInsensitive(inputElement))
nova chamada: assertEquals(singletonAttributes(), getAttributesCaseInsensitive(inputElement), "Era esperado valores iguais, mas " + result1225 + " <singletonAttributes()> é diferente de " + result1226 + " <getAttributesCaseInsensitive(inputElement)>")
chamada antiga: assertNotNull(div)
nova chamada: assertNotNull(div, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(text)
nova chamada: assertNotNull(text, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(docClone)
nova chamada: assertNotNull(docClone, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotSame(doc, docClone)
nova chamada: assertNotSame(doc, docClone, "Era esperado objetos diferentes, mas  doc é igual a " + " docClone")
chamada antiga: assertTrue(doc.outputSettings().prettyPrint())
nova chamada: assertTrue(doc.outputSettings().prettyPrint(), "Era esperado verdadeiro, mas " + result1227 + " <doc.outputSettings().prettyPrint()> é falso")
chamada antiga: assertEquals(1, docClone.childNodes().size())
nova chamada: assertEquals(1, docClone.childNodes().size(), "Era esperado valores iguais, mas  1 é diferente de " + result1228 + " <docClone.childNodes().size()>")
chamada antiga: assertEquals(textClone, docClone.childNode(0))
nova chamada: assertEquals(textClone, docClone.childNode(0), "Era esperado valores iguais, mas  textClone é diferente de " + result1229 + " <docClone.childNode(0)>")
chamada antiga: assertNotNull(div)
nova chamada: assertNotNull(div, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(a)
nova chamada: assertNotNull(a, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("One ", first.text())
nova chamada: assertEquals("One ", first.text(), "Era esperado valores iguais, mas  'One ' é diferente de " + result1230 + " <first.text()>")
chamada antiga: assertEquals(" Three", last.text())
nova chamada: assertEquals(" Three", last.text(), "Era esperado valores iguais, mas  ' Three' é diferente de " + result1231 + " <last.text()>")
chamada antiga: assertNull(a.firstChild())
nova chamada: assertNull(a.firstChild(), "Era esperado nulo, mas " + result1232 + " <a.firstChild()> não é nulo")
chamada antiga: assertNull(a.lastChild())
nova chamada: assertNull(a.lastChild(), "Era esperado nulo, mas " + result1233 + " <a.lastChild()> não é nulo")
chamada antiga: assertEquals("span", firstEl.tagName())
nova chamada: assertEquals("span", firstEl.tagName(), "Era esperado valores iguais, mas  'span' é diferente de " + result1234 + " <firstEl.tagName()>")
chamada antiga: assertEquals("a", lastEl.tagName())
nova chamada: assertEquals("a", lastEl.tagName(), "Era esperado valores iguais, mas  'a' é diferente de " + result1235 + " <lastEl.tagName()>")
chamada antiga: assertNull(a.firstElementChild())
nova chamada: assertNull(a.firstElementChild(), "Era esperado nulo, mas " + result1236 + " <a.firstElementChild()> não é nulo")
chamada antiga: assertNull(a.lastElementChild())
nova chamada: assertNull(a.lastElementChild(), "Era esperado nulo, mas " + result1237 + " <a.lastElementChild()> não é nulo")
chamada antiga: assertNull(firstEl.firstElementChild())
nova chamada: assertNull(firstEl.firstElementChild(), "Era esperado nulo, mas " + result1238 + " <firstEl.firstElementChild()> não é nulo")
chamada antiga: assertNull(firstEl.lastElementChild())
nova chamada: assertNull(firstEl.lastElementChild(), "Era esperado nulo, mas " + result1239 + " <firstEl.lastElementChild()> não é nulo")
chamada antiga: assertEquals("", el.text())
nova chamada: assertEquals("", el.text(), "Era esperado valores iguais, mas  '' é diferente de " + result1240 + " <el.text()>")
chamada antiga: assertEquals("", el.ownText())
nova chamada: assertEquals("", el.ownText(), "Era esperado valores iguais, mas  '' é diferente de " + result1241 + " <el.ownText()>")
chamada antiga: assertEquals("", el.wholeText())
nova chamada: assertEquals("", el.wholeText(), "Era esperado valores iguais, mas  '' é diferente de " + result1242 + " <el.wholeText()>")
chamada antiga: assertEquals(src, el.html())
nova chamada: assertEquals(src, el.html(), "Era esperado valores iguais, mas  src é diferente de " + result1243 + " <el.html()>")
chamada antiga: assertEquals(src, el.data())
nova chamada: assertEquals(src, el.data(), "Era esperado valores iguais, mas  src é diferente de " + result1244 + " <el.data()>")
chamada antiga: assertEquals("var foo = 5 < 2; var bar = 1 && 2;", el.text())
nova chamada: assertEquals("var foo = 5 < 2; var bar = 1 && 2;", el.text(), "Era esperado valores iguais, mas  'var foo = 5  2; var bar = 1 && 2;' é diferente de " + result1245 + " <el.text()>")
chamada antiga: assertEquals("var foo = 5 < 2; var bar = 1 && 2;", el.ownText())
nova chamada: assertEquals("var foo = 5 < 2; var bar = 1 && 2;", el.ownText(), "Era esperado valores iguais, mas  'var foo = 5  2; var bar = 1 && 2;' é diferente de " + result1246 + " <el.ownText()>")
chamada antiga: assertEquals("var foo = 5 < 2;\nvar bar = 1 && 2;", el.wholeText())
nova chamada: assertEquals("var foo = 5 < 2;\nvar bar = 1 && 2;", el.wholeText(), "Era esperado valores iguais, mas  'var foo = 5  2;\nvar bar = 1 && 2;' é diferente de " + result1247 + " <el.wholeText()>")
chamada antiga: assertEquals("var foo = 5 &lt; 2;\nvar bar = 1 &amp;&amp; 2;", el.html())
nova chamada: assertEquals("var foo = 5 &lt; 2;\nvar bar = 1 &amp;&amp; 2;", el.html(), "Era esperado valores iguais, mas  'var foo = 5 &lt; 2;\nvar bar = 1 &amp;&amp; 2;' é diferente de " + result1248 + " <el.html()>")
chamada antiga: assertEquals("", el.data())
nova chamada: assertEquals("", el.data(), "Era esperado valores iguais, mas  '' é diferente de " + result1249 + " <el.data()>")
chamada antiga: assertEquals("Foo", el.id())
nova chamada: assertEquals("Foo", el.id(), "Era esperado valores iguais, mas  'Foo' é diferente de " + result1250 + " <el.id()>")
chamada antiga: assertEquals("Foo", el.id())
nova chamada: assertEquals("Foo", el.id(), "Era esperado valores iguais, mas  'Foo' é diferente de " + result1251 + " <el.id()>")
chamada antiga: assertEquals(2, divs.size())
nova chamada: assertEquals(2, divs.size(), "Era esperado valores iguais, mas  2 é diferente de " + result1252 + " <divs.size()>")
chamada antiga: assertEquals("div1", divs.get(0).id())
nova chamada: assertEquals("div1", divs.get(0).id(), "Era esperado valores iguais, mas  'div1' é diferente de " + result1253 + " <divs.get(0).id()>")
chamada antiga: assertEquals("div2", divs.get(1).id())
nova chamada: assertEquals("div2", divs.get(1).id(), "Era esperado valores iguais, mas  'div2' é diferente de " + result1254 + " <divs.get(1).id()>")
chamada antiga: assertEquals(2, ps.size())
nova chamada: assertEquals(2, ps.size(), "Era esperado valores iguais, mas  2 é diferente de " + result1255 + " <ps.size()>")
chamada antiga: assertEquals("Hello", ((TextNode) ps.get(0).childNode(0)).getWholeText())
nova chamada: assertEquals("Hello", ((TextNode) ps.get(0).childNode(0)).getWholeText(), "Era esperado valores iguais, mas  'Hello' é diferente de " + result1256 + " <((TextNode) ps.get(0).childNode(0)).getWholeText()>")
chamada antiga: assertEquals("Another ", ((TextNode) ps.get(1).childNode(0)).getWholeText())
nova chamada: assertEquals("Another ", ((TextNode) ps.get(1).childNode(0)).getWholeText(), "Era esperado valores iguais, mas  'Another ' é diferente de " + result1257 + " <((TextNode) ps.get(1).childNode(0)).getWholeText()>")
chamada antiga: assertEquals(ps, ps2)
nova chamada: assertEquals(ps, ps2, "Era esperado valores iguais, mas  ps é diferente de " + " ps2")
chamada antiga: assertEquals("foo.png", imgs.get(0).attr("src"))
nova chamada: assertEquals("foo.png", imgs.get(0).attr("src"), "Era esperado valores iguais, mas  'foo.png' é diferente de " + result1258 + " <imgs.get(0).attr('src')>")
chamada antiga: assertEquals(0, empty.size())
nova chamada: assertEquals(0, empty.size(), "Era esperado valores iguais, mas  0 é diferente de " + result1259 + " <empty.size()>")
chamada antiga: assertEquals(1, els.size())
nova chamada: assertEquals(1, els.size(), "Era esperado valores iguais, mas  1 é diferente de " + result1260 + " <els.size()>")
chamada antiga: assertEquals("1", els.first().id())
nova chamada: assertEquals("1", els.first().id(), "Era esperado valores iguais, mas  '1' é diferente de " + result1261 + " <els.first().id()>")
chamada antiga: assertEquals("abc:def", els.first().tagName())
nova chamada: assertEquals("abc:def", els.first().tagName(), "Era esperado valores iguais, mas  'abc:def' é diferente de " + result1262 + " <els.first().tagName()>")
chamada antiga: assertEquals("div1", div.id())
nova chamada: assertEquals("div1", div.id(), "Era esperado valores iguais, mas  'div1' é diferente de " + result1263 + " <div.id()>")
chamada antiga: assertNull(doc.getElementById("none"))
nova chamada: assertNull(doc.getElementById("none"), "Era esperado nulo, mas " + result1264 + " <doc.getElementById('none')> não é nulo")
chamada antiga: assertEquals("div", div2.tagName())
nova chamada: assertEquals("div", div2.tagName(), "Era esperado valores iguais, mas  'div' é diferente de " + result1265 + " <div2.tagName()>")
chamada antiga: assertEquals("span", span.tagName())
nova chamada: assertEquals("span", span.tagName(), "Era esperado valores iguais, mas  'span' é diferente de " + result1266 + " <span.tagName()>")
chamada antiga: assertEquals("Hello Another element", doc.text())
nova chamada: assertEquals("Hello Another element", doc.text(), "Era esperado valores iguais, mas  'Hello Another element' é diferente de " + result1267 + " <doc.text()>")
chamada antiga: assertEquals("Another element", doc.getElementsByTag("p").get(1).text())
nova chamada: assertEquals("Another element", doc.getElementsByTag("p").get(1).text(), "Era esperado valores iguais, mas  'Another element' é diferente de " + result1268 + " <doc.getElementsByTag('p').get(1).text()>")
chamada antiga: assertEquals("Hello there now", p.text())
nova chamada: assertEquals("Hello there now", p.text(), "Era esperado valores iguais, mas  'Hello there now' é diferente de " + result1269 + " <p.text()>")
chamada antiga: assertEquals("Hello now", p.ownText())
nova chamada: assertEquals("Hello now", p.ownText(), "Era esperado valores iguais, mas  'Hello now' é diferente de " + result1270 + " <p.ownText()>")
chamada antiga: assertEquals("Hello There. Here is some text.", text)
nova chamada: assertEquals("Hello There. Here is some text.", text, "Era esperado valores iguais, mas  'Hello There. Here is some text.' é diferente de " + " text")
chamada antiga: assertEquals("Hello there.   What's \n\n  that?", doc.text())
nova chamada: assertEquals("Hello there.   What's \n\n  that?", doc.text(), "Era esperado valores iguais, mas  'Hello there.   What's \n\n  that?' é diferente de " + result1271 + " <doc.text()>")
chamada antiga: assertEquals("code\n\ncode", doc.text())
nova chamada: assertEquals("code\n\ncode", doc.text(), "Era esperado valores iguais, mas  'code\n\ncode' é diferente de " + result1272 + " <doc.text()>")
chamada antiga: assertEquals("<pre><code>code\n\ncode</code></pre>", doc.body().html())
nova chamada: assertEquals("<pre><code>code\n\ncode</code></pre>", doc.body().html(), "Era esperado valores iguais, mas  'precodecode\n\ncode/code/pre' é diferente de " + result1273 + " <doc.body().html()>")
chamada antiga: assertEquals("code\n\ncode", doc.text())
nova chamada: assertEquals("code\n\ncode", doc.text(), "Era esperado valores iguais, mas  'code\n\ncode' é diferente de " + result1274 + " <doc.text()>")
chamada antiga: assertEquals("<pre><code><span><b>code\n\ncode</b></span></code></pre>", doc.body().html())
nova chamada: assertEquals("<pre><code><span><b>code\n\ncode</b></span></code></pre>", doc.body().html(), "Era esperado valores iguais, mas  'precodespanbcode\n\ncode/b/span/code/pre' é diferente de " + result1275 + " <doc.body().html()>")
chamada antiga: assertEquals("Hello there", doc.text())
nova chamada: assertEquals("Hello there", doc.text(), "Era esperado valores iguais, mas  'Hello there' é diferente de " + result1276 + " <doc.text()>")
chamada antiga: assertEquals("Hello there", doc.select("p").first().ownText())
nova chamada: assertEquals("Hello there", doc.select("p").first().ownText(), "Era esperado valores iguais, mas  'Hello there' é diferente de " + result1277 + " <doc.select('p').first().ownText()>")
chamada antiga: assertEquals("Hello there", doc.text())
nova chamada: assertEquals("Hello there", doc.text(), "Era esperado valores iguais, mas  'Hello there' é diferente de " + result1278 + " <doc.text()>")
chamada antiga: assertEquals("Hello there now", doc.text())
nova chamada: assertEquals("Hello there now", doc.text(), "Era esperado valores iguais, mas  'Hello there now' é diferente de " + result1279 + " <doc.text()>")
chamada antiga: assertEquals("Hello there now", doc.select("p").first().ownText())
nova chamada: assertEquals("Hello there now", doc.select("p").first().ownText(), "Era esperado valores iguais, mas  'Hello there now' é diferente de " + result1280 + " <doc.select('p').first().ownText()>")
chamada antiga: assertEquals("Hello there now", doc.text())
nova chamada: assertEquals("Hello there now", doc.text(), "Era esperado valores iguais, mas  'Hello there now' é diferente de " + result1281 + " <doc.text()>")
chamada antiga: assertEquals(" Hello\nthere    ", doc.wholeText())
nova chamada: assertEquals(" Hello\nthere    ", doc.wholeText(), "Era esperado valores iguais, mas  ' Hello\nthere    ' é diferente de " + result1282 + " <doc.wholeText()>")
chamada antiga: assertEquals("Hello  \n  there", doc.wholeText())
nova chamada: assertEquals("Hello  \n  there", doc.wholeText(), "Era esperado valores iguais, mas  'Hello  \n  there' é diferente de " + result1283 + " <doc.wholeText()>")
chamada antiga: assertEquals("Hello  \n  there", doc.wholeText())
nova chamada: assertEquals("Hello  \n  there", doc.wholeText(), "Era esperado valores iguais, mas  'Hello  \n  there' é diferente de " + result1284 + " <doc.wholeText()>")
chamada antiga: assertEquals("there", p.text())
nova chamada: assertEquals("there", p.text(), "Era esperado valores iguais, mas  'there' é diferente de " + result1285 + " <p.text()>")
chamada antiga: assertEquals("Hello", p.previousElementSibling().text())
nova chamada: assertEquals("Hello", p.previousElementSibling().text(), "Era esperado valores iguais, mas  'Hello' é diferente de " + result1286 + " <p.previousElementSibling().text()>")
chamada antiga: assertEquals("this", p.nextElementSibling().text())
nova chamada: assertEquals("this", p.nextElementSibling().text(), "Era esperado valores iguais, mas  'this' é diferente de " + result1287 + " <p.nextElementSibling().text()>")
chamada antiga: assertEquals("Hello", p.firstElementSibling().text())
nova chamada: assertEquals("Hello", p.firstElementSibling().text(), "Era esperado valores iguais, mas  'Hello' é diferente de " + result1288 + " <p.firstElementSibling().text()>")
chamada antiga: assertEquals("element", p.lastElementSibling().text())
nova chamada: assertEquals("element", p.lastElementSibling().text(), "Era esperado valores iguais, mas  'element' é diferente de " + result1289 + " <p.lastElementSibling().text()>")
chamada antiga: assertEquals("there", p.text())
nova chamada: assertEquals("there", p.text(), "Era esperado valores iguais, mas  'there' é diferente de " + result1290 + " <p.text()>")
chamada antiga: assertEquals("Hello", p.previousElementSibling().text())
nova chamada: assertEquals("Hello", p.previousElementSibling().text(), "Era esperado valores iguais, mas  'Hello' é diferente de " + result1291 + " <p.previousElementSibling().text()>")
chamada antiga: assertEquals("this", p.nextElementSibling().text())
nova chamada: assertEquals("this", p.nextElementSibling().text(), "Era esperado valores iguais, mas  'this' é diferente de " + result1292 + " <p.nextElementSibling().text()>")
chamada antiga: assertEquals("this", p.nextElementSibling().nextElementSibling().text())
nova chamada: assertEquals("this", p.nextElementSibling().nextElementSibling().text(), "Era esperado valores iguais, mas  'this' é diferente de " + result1293 + " <p.nextElementSibling().nextElementSibling().text()>")
chamada antiga: assertEquals("is", p.nextElementSibling().nextElementSibling().nextElementSibling().text())
nova chamada: assertEquals("is", p.nextElementSibling().nextElementSibling().nextElementSibling().text(), "Era esperado valores iguais, mas  'is' é diferente de " + result1294 + " <p.nextElementSibling().nextElementSibling().nextElementSibling().text()>")
chamada antiga: assertEquals("Hello", p.firstElementSibling().text())
nova chamada: assertEquals("Hello", p.firstElementSibling().text(), "Era esperado valores iguais, mas  'Hello' é diferente de " + result1295 + " <p.firstElementSibling().text()>")
chamada antiga: assertEquals("element", p.lastElementSibling().text())
nova chamada: assertEquals("element", p.lastElementSibling().text(), "Era esperado valores iguais, mas  'element' é diferente de " + result1296 + " <p.lastElementSibling().text()>")
chamada antiga: assertSame(p, p.firstElementSibling())
nova chamada: assertSame(p, p.firstElementSibling(), "Era esperado objetos iguais, mas  p é diferente de " + result1297 + " <p.firstElementSibling()>")
chamada antiga: assertSame(p, p.lastElementSibling())
nova chamada: assertSame(p, p.lastElementSibling(), "Era esperado objetos iguais, mas  p é diferente de " + result1298 + " <p.lastElementSibling()>")
chamada antiga: assertSame(one, one.firstElementSibling())
nova chamada: assertSame(one, one.firstElementSibling(), "Era esperado objetos iguais, mas  one é diferente de " + result1299 + " <one.firstElementSibling()>")
chamada antiga: assertSame(one, two.firstElementSibling())
nova chamada: assertSame(one, two.firstElementSibling(), "Era esperado objetos iguais, mas  one é diferente de " + result1300 + " <two.firstElementSibling()>")
chamada antiga: assertSame(three, three.lastElementSibling())
nova chamada: assertSame(three, three.lastElementSibling(), "Era esperado objetos iguais, mas  three é diferente de " + result1301 + " <three.lastElementSibling()>")
chamada antiga: assertSame(three, two.lastElementSibling())
nova chamada: assertSame(three, two.lastElementSibling(), "Era esperado objetos iguais, mas  three é diferente de " + result1302 + " <two.lastElementSibling()>")
chamada antiga: assertEquals(4, parents.size())
nova chamada: assertEquals(4, parents.size(), "Era esperado valores iguais, mas  4 é diferente de " + result1303 + " <parents.size()>")
chamada antiga: assertEquals("p", parents.get(0).tagName())
nova chamada: assertEquals("p", parents.get(0).tagName(), "Era esperado valores iguais, mas  'p' é diferente de " + result1304 + " <parents.get(0).tagName()>")
chamada antiga: assertEquals("div", parents.get(1).tagName())
nova chamada: assertEquals("div", parents.get(1).tagName(), "Era esperado valores iguais, mas  'div' é diferente de " + result1305 + " <parents.get(1).tagName()>")
chamada antiga: assertEquals("body", parents.get(2).tagName())
nova chamada: assertEquals("body", parents.get(2).tagName(), "Era esperado valores iguais, mas  'body' é diferente de " + result1306 + " <parents.get(2).tagName()>")
chamada antiga: assertEquals("html", parents.get(3).tagName())
nova chamada: assertEquals("html", parents.get(3).tagName(), "Era esperado valores iguais, mas  'html' é diferente de " + result1307 + " <parents.get(3).tagName()>")
chamada antiga: assertEquals(0, ps.get(0).elementSiblingIndex())
nova chamada: assertEquals(0, ps.get(0).elementSiblingIndex(), "Era esperado valores iguais, mas  0 é diferente de " + result1308 + " <ps.get(0).elementSiblingIndex()>")
chamada antiga: assertEquals(1, ps.get(1).elementSiblingIndex())
nova chamada: assertEquals(1, ps.get(1).elementSiblingIndex(), "Era esperado valores iguais, mas  1 é diferente de " + result1309 + " <ps.get(1).elementSiblingIndex()>")
chamada antiga: assertEquals(2, ps.get(2).elementSiblingIndex())
nova chamada: assertEquals(2, ps.get(2).elementSiblingIndex(), "Era esperado valores iguais, mas  2 é diferente de " + result1310 + " <ps.get(2).elementSiblingIndex()>")
chamada antiga: assertEquals(0, ps.get(0).elementSiblingIndex())
nova chamada: assertEquals(0, ps.get(0).elementSiblingIndex(), "Era esperado valores iguais, mas  0 é diferente de " + result1311 + " <ps.get(0).elementSiblingIndex()>")
chamada antiga: assertEquals(1, ps.get(1).elementSiblingIndex())
nova chamada: assertEquals(1, ps.get(1).elementSiblingIndex(), "Era esperado valores iguais, mas  1 é diferente de " + result1312 + " <ps.get(1).elementSiblingIndex()>")
chamada antiga: assertEquals(2, ps.get(2).elementSiblingIndex())
nova chamada: assertEquals(2, ps.get(2).elementSiblingIndex(), "Era esperado valores iguais, mas  2 é diferente de " + result1313 + " <ps.get(2).elementSiblingIndex()>")
chamada antiga: assertEquals(2, els.size())
nova chamada: assertEquals(2, els.size(), "Era esperado valores iguais, mas  2 é diferente de " + result1314 + " <els.size()>")
chamada antiga: assertEquals("div", els.get(0).tagName())
nova chamada: assertEquals("div", els.get(0).tagName(), "Era esperado valores iguais, mas  'div' é diferente de " + result1315 + " <els.get(0).tagName()>")
chamada antiga: assertEquals("span", els.get(1).tagName())
nova chamada: assertEquals("span", els.get(1).tagName(), "Era esperado valores iguais, mas  'span' é diferente de " + result1316 + " <els.get(1).tagName()>")
chamada antiga: assertEquals(2, els2.size())
nova chamada: assertEquals(2, els2.size(), "Era esperado valores iguais, mas  2 é diferente de " + result1317 + " <els2.size()>")
chamada antiga: assertEquals("div", els2.get(0).tagName())
nova chamada: assertEquals("div", els2.get(0).tagName(), "Era esperado valores iguais, mas  'div' é diferente de " + result1318 + " <els2.get(0).tagName()>")
chamada antiga: assertEquals("b", els2.get(1).tagName())
nova chamada: assertEquals("b", els2.get(1).tagName(), "Era esperado valores iguais, mas  'b' é diferente de " + result1319 + " <els2.get(1).tagName()>")
chamada antiga: assertEquals(0, none.size())
nova chamada: assertEquals(0, none.size(), "Era esperado valores iguais, mas  0 é diferente de " + result1320 + " <none.size()>")
chamada antiga: assertEquals(2, els.size())
nova chamada: assertEquals(2, els.size(), "Era esperado valores iguais, mas  2 é diferente de " + result1321 + " <els.size()>")
chamada antiga: assertEquals("div", els.get(0).tagName())
nova chamada: assertEquals("div", els.get(0).tagName(), "Era esperado valores iguais, mas  'div' é diferente de " + result1322 + " <els.get(0).tagName()>")
chamada antiga: assertEquals("b", els.get(1).tagName())
nova chamada: assertEquals("b", els.get(1).tagName(), "Era esperado valores iguais, mas  'b' é diferente de " + result1323 + " <els.get(1).tagName()>")
chamada antiga: assertEquals(0, none.size())
nova chamada: assertEquals(0, none.size(), "Era esperado valores iguais, mas  0 é diferente de " + result1324 + " <none.size()>")
chamada antiga: assertEquals(1, meta.size())
nova chamada: assertEquals(1, meta.size(), "Era esperado valores iguais, mas  1 é diferente de " + result1325 + " <meta.size()>")
chamada antiga: assertEquals("1", meta.first().id())
nova chamada: assertEquals("1", meta.first().id(), "Era esperado valores iguais, mas  '1' é diferente de " + result1326 + " <meta.first().id()>")
chamada antiga: assertEquals(1, els.size())
nova chamada: assertEquals(1, els.size(), "Era esperado valores iguais, mas  1 é diferente de " + result1327 + " <els.size()>")
chamada antiga: assertEquals("div", els.get(0).tagName())
nova chamada: assertEquals("div", els.get(0).tagName(), "Era esperado valores iguais, mas  'div' é diferente de " + result1328 + " <els.get(0).tagName()>")
chamada antiga: assertEquals(0, none.size())
nova chamada: assertEquals(0, none.size(), "Era esperado valores iguais, mas  0 é diferente de " + result1329 + " <none.size()>")
chamada antiga: assertEquals("mellow yellow", span.className())
nova chamada: assertEquals("mellow yellow", span.className(), "Era esperado valores iguais, mas  'mellow yellow' é diferente de " + result1330 + " <span.className()>")
chamada antiga: assertTrue(span.hasClass("mellow"))
nova chamada: assertTrue(span.hasClass("mellow"), "Era esperado verdadeiro, mas " + result1331 + " <span.hasClass('mellow')> é falso")
chamada antiga: assertTrue(span.hasClass("yellow"))
nova chamada: assertTrue(span.hasClass("yellow"), "Era esperado verdadeiro, mas " + result1332 + " <span.hasClass('yellow')> é falso")
chamada antiga: assertEquals(2, classes.size())
nova chamada: assertEquals(2, classes.size(), "Era esperado valores iguais, mas  2 é diferente de " + result1333 + " <classes.size()>")
chamada antiga: assertTrue(classes.contains("mellow"))
nova chamada: assertTrue(classes.contains("mellow"), "Era esperado verdadeiro, mas " + result1334 + " <classes.contains('mellow')> é falso")
chamada antiga: assertTrue(classes.contains("yellow"))
nova chamada: assertTrue(classes.contains("yellow"), "Era esperado verdadeiro, mas " + result1335 + " <classes.contains('yellow')> é falso")
chamada antiga: assertEquals("", doc.className())
nova chamada: assertEquals("", doc.className(), "Era esperado valores iguais, mas  '' é diferente de " + result1336 + " <doc.className()>")
chamada antiga: assertEquals(0, classes.size())
nova chamada: assertEquals(0, classes.size(), "Era esperado valores iguais, mas  0 é diferente de " + result1337 + " <classes.size()>")
chamada antiga: assertTrue(hasClass)
nova chamada: assertTrue(hasClass, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(hasClass)
nova chamada: assertTrue(hasClass, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(hasClass)
nova chamada: assertTrue(hasClass, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(hasClass)
nova chamada: assertTrue(hasClass, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(hasClass)
nova chamada: assertTrue(hasClass, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(hasClass)
nova chamada: assertTrue(hasClass, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(hasClass)
nova chamada: assertTrue(hasClass, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(hasClass)
nova chamada: assertTrue(hasClass, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(hasClass)
nova chamada: assertTrue(hasClass, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("mellow yellow green", div.className())
nova chamada: assertEquals("mellow yellow green", div.className(), "Era esperado valores iguais, mas  'mellow yellow green' é diferente de " + result1338 + " <div.className()>")
chamada antiga: assertEquals("mellow green", div.className())
nova chamada: assertEquals("mellow green", div.className(), "Era esperado valores iguais, mas  'mellow green' é diferente de " + result1339 + " <div.className()>")
chamada antiga: assertEquals("mellow red", div.className())
nova chamada: assertEquals("mellow red", div.className(), "Era esperado valores iguais, mas  'mellow red' é diferente de " + result1340 + " <div.className()>")
chamada antiga: assertEquals("<html><head></head><body><div title=\"Tags &amp;c.\"><img src=\"foo.png\"><p><!-- comment -->Hello</p><p>there</p></div></body></html>", TextUtil.stripNewlines(doc.outerHtml()))
nova chamada: assertEquals("<html><head></head><body><div title=\"Tags &amp;c.\"><img src=\"foo.png\"><p><!-- comment -->Hello</p><p>there</p></div></body></html>", TextUtil.stripNewlines(doc.outerHtml()), "Era esperado valores iguais, mas  'htmlhead/headbodydiv title=\'Tags &amp;c.\'img src=\'foo.png\'p!-- comment --Hello/ppthere/p/div/body/html' é diferente de " + result1341 + " <TextUtil.stripNewlines(doc.outerHtml())>")
chamada antiga: assertEquals("<p>Hello</p>", doc.getElementsByTag("div").get(0).html())
nova chamada: assertEquals("<p>Hello</p>", doc.getElementsByTag("div").get(0).html(), "Era esperado valores iguais, mas  'pHello/p' é diferente de " + result1342 + " <doc.getElementsByTag('div').get(0).html()>")
chamada antiga: assertEquals("<html>\n <head>\n  <title>Format test</title>\n </head>\n <body>\n  <div>\n   <p>Hello <span>jsoup <span>users</span></span></p>\n   <p>Good.</p>\n  </div>\n </body>\n</html>", doc.html())
nova chamada: assertEquals("<html>\n <head>\n  <title>Format test</title>\n </head>\n <body>\n  <div>\n   <p>Hello <span>jsoup <span>users</span></span></p>\n   <p>Good.</p>\n  </div>\n </body>\n</html>", doc.html(), "Era esperado valores iguais, mas  'html\n head\n  titleFormat test/title\n /head\n body\n  div\n   pHello spanjsoup spanusers/span/span/p\n   pGood./p\n  /div\n /body\n/html' é diferente de " + result1343 + " <doc.html()>")
chamada antiga: assertEquals("<html>\n <head>\n  <title>Format test</title>\n </head>\n <body>\n  <div>\n   <p>\n    Hello \n    <span>\n     jsoup \n     <span>users</span>\n    </span>\n   </p>\n   <p>Good.</p>\n  </div>\n </body>\n</html>", doc.html())
nova chamada: assertEquals("<html>\n <head>\n  <title>Format test</title>\n </head>\n <body>\n  <div>\n   <p>\n    Hello \n    <span>\n     jsoup \n     <span>users</span>\n    </span>\n   </p>\n   <p>Good.</p>\n  </div>\n </body>\n</html>", doc.html(), "Era esperado valores iguais, mas  'html\n head\n  titleFormat test/title\n /head\n body\n  div\n   p\n    Hello \n    span\n     jsoup \n     spanusers/span\n    /span\n   /p\n   pGood./p\n  /div\n /body\n/html' é diferente de " + result1344 + " <doc.html()>")
chamada antiga: assertEquals("<html>\n<head></head>\n<body>\n<div>\n<p>Hello there</p>\n</div>\n</body>\n</html>", doc.html())
nova chamada: assertEquals("<html>\n<head></head>\n<body>\n<div>\n<p>Hello there</p>\n</div>\n</body>\n</html>", doc.html(), "Era esperado valores iguais, mas  'html\nhead/head\nbody\ndiv\npHello there/p\n/div\n/body\n/html' é diferente de " + result1345 + " <doc.html()>")
chamada antiga: assertEquals(defaultMax, settings.maxPaddingWidth())
nova chamada: assertEquals(defaultMax, settings.maxPaddingWidth(), "Era esperado valores iguais, mas  defaultMax é diferente de " + result1346 + " <settings.maxPaddingWidth()>")
chamada antiga: assertTrue(html.contains("                              <div>\n" + "                              Foo\n" + "                              </div>"))
nova chamada: assertTrue(html.contains("                              <div>\n" + "                              Foo\n" + "                              </div>"), "Era esperado verdadeiro, mas " + result1347 + " <html.contains('                              <div>\n' + '                              Foo\n' + '                              </div>')> é falso")
chamada antiga: assertEquals(32, settings.maxPaddingWidth())
nova chamada: assertEquals(32, settings.maxPaddingWidth(), "Era esperado valores iguais, mas  32 é diferente de " + result1348 + " <settings.maxPaddingWidth()>")
chamada antiga: assertTrue(html.contains("                                <div>\n" + "                                Foo\n" + "                                </div>"))
nova chamada: assertTrue(html.contains("                                <div>\n" + "                                Foo\n" + "                                </div>"), "Era esperado verdadeiro, mas " + result1349 + " <html.contains('                                <div>\n' + '                                Foo\n' + '                                </div>')> é falso")
chamada antiga: assertEquals(-1, settings.maxPaddingWidth())
nova chamada: assertEquals(-1, settings.maxPaddingWidth(), "Era esperado valores iguais, mas  -1 é diferente de " + result1350 + " <settings.maxPaddingWidth()>")
chamada antiga: assertTrue(html.contains("                                         <div>\n" + "                                          Foo\n" + "                                         </div>"))
nova chamada: assertTrue(html.contains("                                         <div>\n" + "                                          Foo\n" + "                                         </div>"), "Era esperado verdadeiro, mas " + result1351 + " <html.contains('                                         <div>\n' + '                                          Foo\n' + '                                         </div>')> é falso")
chamada antiga: assertEquals("<html><head></head><body><div>   \n<p>Hello\n there\n</p></div></body></html>", doc.html())
nova chamada: assertEquals("<html><head></head><body><div>   \n<p>Hello\n there\n</p></div></body></html>", doc.html(), "Era esperado valores iguais, mas  'htmlhead/headbodydiv   \npHello\n there\n/p/div/body/html' é diferente de " + result1352 + " <doc.html()>")
chamada antiga: assertEquals("   \n<p>Hello\n there\n</p>", div.html())
nova chamada: assertEquals("   \n<p>Hello\n there\n</p>", div.html(), "Era esperado valores iguais, mas  '   \npHello\n there\n/p' é diferente de " + result1353 + " <div.html()>")
chamada antiga: assertEquals("<div><span>1:15</span>–<span>2:15</span>&nbsp;p.m.</div>", document.body().html())
nova chamada: assertEquals("<div><span>1:15</span>–<span>2:15</span>&nbsp;p.m.</div>", document.body().html(), "Era esperado valores iguais, mas  'divspan1:15/span–span2:15/span&nbsp;p.m./div' é diferente de " + result1354 + " <document.body().html()>")
chamada antiga: assertEquals("<div>\n <span>1:15</span>–<span>2:15</span>&nbsp;p.m.\n</div>", document.body().html())
nova chamada: assertEquals("<div>\n <span>1:15</span>–<span>2:15</span>&nbsp;p.m.\n</div>", document.body().html(), "Era esperado valores iguais, mas  'div\n span1:15/span–span2:15/span&nbsp;p.m.\n/div' é diferente de " + result1355 + " <document.body().html()>")
chamada antiga: assertEquals("<div>\n <span>1:15</span>\n –\n <span>2:15</span>\n &nbsp;p.m.\n</div>", document.body().html())
nova chamada: assertEquals("<div>\n <span>1:15</span>\n –\n <span>2:15</span>\n &nbsp;p.m.\n</div>", document.body().html(), "Era esperado valores iguais, mas  'div\n span1:15/span\n –\n span2:15/span\n &nbsp;p.m.\n/div' é diferente de " + result1356 + " <document.body().html()>")
chamada antiga: assertEquals("<span>0</span>.\n" + "<div>\n" + " <span>1</span>-<span>2</span>\n" + " <p><span>3</span>-<span>4</span></p>\n" + " <div>\n" + "  5\n" + " </div>\n" + "</div>", doc.body().html())
nova chamada: assertEquals("<span>0</span>.\n" + "<div>\n" + " <span>1</span>-<span>2</span>\n" + " <p><span>3</span>-<span>4</span></p>\n" + " <div>\n" + "  5\n" + " </div>\n" + "</div>", doc.body().html(), "Era esperado valores iguais, mas  'span0/span.\n' + 'div\n' + ' span1/span-span2/span\n' + ' pspan3/span-span4/span/p\n' + ' div\n' + '  5\n' + ' /div\n' + '/div' é diferente de " + result1357 + " <doc.body().html()>")
chamada antiga: assertEquals("<section>\n <div></div>\n</section>", doc.select("section").first().outerHtml())
nova chamada: assertEquals("<section>\n <div></div>\n</section>", doc.select("section").first().outerHtml(), "Era esperado valores iguais, mas  'section\n div/div\n/section' é diferente de " + result1358 + " <doc.select('section').first().outerHtml()>")
chamada antiga: assertEquals("<script>one\ntwo</script>\n<style>three\nfour</style>", doc.head().html())
nova chamada: assertEquals("<script>one\ntwo</script>\n<style>three\nfour</style>", doc.head().html(), "Era esperado valores iguais, mas  'scriptone\ntwo/script\nstylethree\nfour/style' é diferente de " + result1359 + " <doc.head().html()>")
chamada antiga: assertEquals("<title>Hello there</title>", doc.select("title").first().outerHtml())
nova chamada: assertEquals("<title>Hello there</title>", doc.select("title").first().outerHtml(), "Era esperado valores iguais, mas  'titleHello there/title' é diferente de " + result1360 + " <doc.select('title').first().outerHtml()>")
chamada antiga: assertEquals("<div>\n <p>Hello</p>\n <p>there</p>\n</div>", doc.select("div").first().outerHtml())
nova chamada: assertEquals("<div>\n <p>Hello</p>\n <p>there</p>\n</div>", doc.select("div").first().outerHtml(), "Era esperado valores iguais, mas  'div\n pHello/p\n pthere/p\n/div' é diferente de " + result1361 + " <doc.select('div').first().outerHtml()>")
chamada antiga: assertEquals("<div>\n <p>Hello</p>\n <p>there</p>\n</div>\n<div>\n Another\n</div>", doc.select("body").first().html())
nova chamada: assertEquals("<div>\n <p>Hello</p>\n <p>there</p>\n</div>\n<div>\n Another\n</div>", doc.select("body").first().html(), "Era esperado valores iguais, mas  'div\n pHello/p\n pthere/p\n/div\ndiv\n Another\n/div' é diferente de " + result1362 + " <doc.select('body').first().html()>")
chamada antiga: assertEquals("Hello there now", doc.text())
nova chamada: assertEquals("Hello there now", doc.text(), "Era esperado valores iguais, mas  'Hello there now' é diferente de " + result1363 + " <doc.text()>")
chamada antiga: assertEquals("there now", doc.select("p").get(0).text())
nova chamada: assertEquals("there now", doc.select("p").get(0).text(), "Era esperado valores iguais, mas  'there now' é diferente de " + result1364 + " <doc.select('p').get(0).text()>")
chamada antiga: assertEquals("Gone", div.text())
nova chamada: assertEquals("Gone", div.text(), "Era esperado valores iguais, mas  'Gone' é diferente de " + result1365 + " <div.text()>")
chamada antiga: assertEquals(0, doc.select("p").size())
nova chamada: assertEquals(0, doc.select("p").size(), "Era esperado valores iguais, mas  0 é diferente de " + result1366 + " <doc.select('p').size()>")
chamada antiga: assertEquals("<html><head></head><body><div id=\"1\"><p>Hello</p><p>there</p><p class=\"second\">now</p></div></body></html>", TextUtil.stripNewlines(doc.html()))
nova chamada: assertEquals("<html><head></head><body><div id=\"1\"><p>Hello</p><p>there</p><p class=\"second\">now</p></div></body></html>", TextUtil.stripNewlines(doc.html()), "Era esperado valores iguais, mas  'htmlhead/headbodydiv id=\'1\'pHello/ppthere/pp class=\'second\'now/p/div/body/html' é diferente de " + result1367 + " <TextUtil.stripNewlines(doc.html())>")
chamada antiga: assertTrue(div.hasAttr("true"))
nova chamada: assertTrue(div.hasAttr("true"), "Era esperado verdadeiro, mas " + result1368 + " <div.hasAttr('true')> é falso")
chamada antiga: assertEquals("", div.attr("true"))
nova chamada: assertEquals("", div.attr("true"), "Era esperado valores iguais, mas  '' é diferente de " + result1369 + " <div.attr('true')>")
chamada antiga: assertEquals("<div true></div>", div.outerHtml())
nova chamada: assertEquals("<div true></div>", div.outerHtml(), "Era esperado valores iguais, mas  'div true/div' é diferente de " + result1370 + " <div.outerHtml()>")
chamada antiga: assertEquals("<table><tbody><tr><td>1</td></tr><tr><td>2</td></tr></tbody></table>", TextUtil.stripNewlines(doc.body().html()))
nova chamada: assertEquals("<table><tbody><tr><td>1</td></tr><tr><td>2</td></tr></tbody></table>", TextUtil.stripNewlines(doc.body().html()), "Era esperado valores iguais, mas  'tabletbodytrtd1/td/trtrtd2/td/tr/tbody/table' é diferente de " + result1371 + " <TextUtil.stripNewlines(doc.body().html())>")
chamada antiga: assertEquals("<table><tbody><tr><td>2</td></tr><tr><td>1</td></tr></tbody></table>", TextUtil.stripNewlines(doc.body().html()))
nova chamada: assertEquals("<table><tbody><tr><td>2</td></tr><tr><td>1</td></tr></tbody></table>", TextUtil.stripNewlines(doc.body().html()), "Era esperado valores iguais, mas  'tabletbodytrtd2/td/trtrtd1/td/tr/tbody/table' é diferente de " + result1372 + " <TextUtil.stripNewlines(doc.body().html())>")
chamada antiga: assertEquals("Before", div.child(0).text())
nova chamada: assertEquals("Before", div.child(0).text(), "Era esperado valores iguais, mas  'Before' é diferente de " + result1373 + " <div.child(0).text()>")
chamada antiga: assertEquals("Hello", div.child(1).text())
nova chamada: assertEquals("Hello", div.child(1).text(), "Era esperado valores iguais, mas  'Hello' é diferente de " + result1374 + " <div.child(1).text()>")
chamada antiga: assertEquals("Hello there & now >", div.text())
nova chamada: assertEquals("Hello there & now >", div.text(), "Era esperado valores iguais, mas  'Hello there & now ' é diferente de " + result1375 + " <div.text()>")
chamada antiga: assertEquals("<p>Hello</p> there &amp; now &gt;", TextUtil.stripNewlines(div.html()))
nova chamada: assertEquals("<p>Hello</p> there &amp; now &gt;", TextUtil.stripNewlines(div.html()), "Era esperado valores iguais, mas  'pHello/p there &amp; now &gt;' é diferente de " + result1376 + " <TextUtil.stripNewlines(div.html())>")
chamada antiga: assertEquals("there & now > Hello", div.text())
nova chamada: assertEquals("there & now > Hello", div.text(), "Era esperado valores iguais, mas  'there & now  Hello' é diferente de " + result1377 + " <div.text()>")
chamada antiga: assertEquals("there &amp; now &gt; <p>Hello</p>", TextUtil.stripNewlines(div.html()))
nova chamada: assertEquals("there &amp; now &gt; <p>Hello</p>", TextUtil.stripNewlines(div.html()), "Era esperado valores iguais, mas  'there &amp; now &gt; pHello/p' é diferente de " + result1378 + " <TextUtil.stripNewlines(div.html())>")
chamada antiga: assertEquals("<p>Hello</p><p>there</p><p>now</p>", TextUtil.stripNewlines(div.html()))
nova chamada: assertEquals("<p>Hello</p><p>there</p><p>now</p>", TextUtil.stripNewlines(div.html()), "Era esperado valores iguais, mas  'pHello/ppthere/ppnow/p' é diferente de " + result1379 + " <TextUtil.stripNewlines(div.html())>")
chamada antiga: assertEquals("<p>there</p><p>now</p><p>Hello</p>", TextUtil.stripNewlines(div.html()))
nova chamada: assertEquals("<p>there</p><p>now</p><p>Hello</p>", TextUtil.stripNewlines(div.html()), "Era esperado valores iguais, mas  'pthere/ppnow/ppHello/p' é diferente de " + result1380 + " <TextUtil.stripNewlines(div.html())>")
chamada antiga: assertEquals("<p>there</p><p>now</p>", TextUtil.stripNewlines(div.html()))
nova chamada: assertEquals("<p>there</p><p>now</p>", TextUtil.stripNewlines(div.html()), "Era esperado valores iguais, mas  'pthere/ppnow/p' é diferente de " + result1381 + " <TextUtil.stripNewlines(div.html())>")
chamada antiga: assertEquals("good", title.html())
nova chamada: assertEquals("good", title.html(), "Era esperado valores iguais, mas  'good' é diferente de " + result1382 + " <title.html()>")
chamada antiga: assertEquals("&lt;i&gt;bad&lt;/i&gt;", title.html())
nova chamada: assertEquals("&lt;i&gt;bad&lt;/i&gt;", title.html(), "Era esperado valores iguais, mas  '&lt;i&gt;bad&lt;/i&gt;' é diferente de " + result1383 + " <title.html()>")
chamada antiga: assertEquals("<title>&lt;i&gt;bad&lt;/i&gt;</title>", head.html())
nova chamada: assertEquals("<title>&lt;i&gt;bad&lt;/i&gt;</title>", head.html(), "Era esperado valores iguais, mas  'title&lt;i&gt;bad&lt;/i&gt;/title' é diferente de " + result1384 + " <head.html()>")
chamada antiga: assertEquals("<div><div class=\"head\"><p>Hello</p></div><p>There</p></div>", TextUtil.stripNewlines(doc.body().html()))
nova chamada: assertEquals("<div><div class=\"head\"><p>Hello</p></div><p>There</p></div>", TextUtil.stripNewlines(doc.body().html()), "Era esperado valores iguais, mas  'divdiv class=\'head\'pHello/p/divpThere/p/div' é diferente de " + result1385 + " <TextUtil.stripNewlines(doc.body().html())>")
chamada antiga: assertEquals("<div><div class=\"head\"><div><div class=\"foo\"><p>Hello</p></div><p>What?</p></div></div><p>There</p></div>", TextUtil.stripNewlines(doc.body().html()))
nova chamada: assertEquals("<div><div class=\"head\"><div><div class=\"foo\"><p>Hello</p></div><p>What?</p></div></div><p>There</p></div>", TextUtil.stripNewlines(doc.body().html()), "Era esperado valores iguais, mas  'divdiv class=\'head\'divdiv class=\'foo\'pHello/p/divpWhat?/p/div/divpThere/p/div' é diferente de " + result1386 + " <TextUtil.stripNewlines(doc.body().html())>")
chamada antiga: assertEquals(ret, p)
nova chamada: assertEquals(ret, p, "Era esperado valores iguais, mas  ret é diferente de " + " p")
chamada antiga: assertSame(p, wrapped)
nova chamada: assertSame(p, wrapped, "Era esperado objetos iguais, mas  p é diferente de " + " wrapped")
chamada antiga: assertEquals("<div><p>Hello</p></div>", TextUtil.stripNewlines(doc.body().html()))
nova chamada: assertEquals("<div><p>Hello</p></div>", TextUtil.stripNewlines(doc.body().html()), "Era esperado valores iguais, mas  'divpHello/p/div' é diferente de " + result1387 + " <TextUtil.stripNewlines(doc.body().html())>")
chamada antiga: assertSame(orphan, wrapped)
nova chamada: assertSame(orphan, wrapped, "Era esperado objetos iguais, mas  orphan é diferente de " + " wrapped")
chamada antiga: assertTrue(orphan.hasParent())
nova chamada: assertTrue(orphan.hasParent(), "Era esperado verdadeiro, mas " + result1388 + " <orphan.hasParent()> é falso")
chamada antiga: assertNotNull(orphan.parent())
nova chamada: assertNotNull(orphan.parent(), "Era esperado não nulo, mas " + result1389 + " <orphan.parent()> é nulo")
chamada antiga: assertEquals("div", orphan.parent().tagName())
nova chamada: assertEquals("div", orphan.parent().tagName(), "Era esperado valores iguais, mas  'div' é diferente de " + result1390 + " <orphan.parent().tagName()>")
chamada antiga: assertEquals("<div>\n <span>Hello!</span>\n</div>", orphan.parent().outerHtml())
nova chamada: assertEquals("<div>\n <span>Hello!</span>\n</div>", orphan.parent().outerHtml(), "Era esperado valores iguais, mas  'div\n spanHello!/span\n/div' é diferente de " + result1391 + " <orphan.parent().outerHtml()>")
chamada antiga: assertEquals("div", i.parent().tagName())
nova chamada: assertEquals("div", i.parent().tagName(), "Era esperado valores iguais, mas  'div' é diferente de " + result1392 + " <i.parent().tagName()>")
chamada antiga: assertEquals("<p>Hello <div id=\"id1\"><i>there</i></div> quite now.</p>", TextUtil.stripNewlines(doc.body().html()))
nova chamada: assertEquals("<p>Hello <div id=\"id1\"><i>there</i></div> quite now.</p>", TextUtil.stripNewlines(doc.body().html()), "Era esperado valores iguais, mas  'pHello div id=\'id1\'ithere/i/div quite now./p' é diferente de " + result1393 + " <TextUtil.stripNewlines(doc.body().html())>")
chamada antiga: assertEquals("<div><div>one</div><div>two</div><p>Hello</p><p>There</p></div>", TextUtil.stripNewlines(doc.body().html()))
nova chamada: assertEquals("<div><div>one</div><div>two</div><p>Hello</p><p>There</p></div>", TextUtil.stripNewlines(doc.body().html()), "Era esperado valores iguais, mas  'divdivone/divdivtwo/divpHello/ppThere/p/div' é diferente de " + result1394 + " <TextUtil.stripNewlines(doc.body().html())>")
chamada antiga: assertEquals("<div><div>one</div><div>two</div><p>Hello</p><p>Three</p><!-- four --><p>There</p></div>", TextUtil.stripNewlines(doc.body().html()))
nova chamada: assertEquals("<div><div>one</div><div>two</div><p>Hello</p><p>Three</p><!-- four --><p>There</p></div>", TextUtil.stripNewlines(doc.body().html()), "Era esperado valores iguais, mas  'divdivone/divdivtwo/divpHello/ppThree/p!-- four --pThere/p/div' é diferente de " + result1395 + " <TextUtil.stripNewlines(doc.body().html())>")
chamada antiga: assertEquals("<div><p>Hello</p><div>one</div><div>two</div><p>There</p></div>", TextUtil.stripNewlines(doc.body().html()))
nova chamada: assertEquals("<div><p>Hello</p><div>one</div><div>two</div><p>There</p></div>", TextUtil.stripNewlines(doc.body().html()), "Era esperado valores iguais, mas  'divpHello/pdivone/divdivtwo/divpThere/p/div' é diferente de " + result1396 + " <TextUtil.stripNewlines(doc.body().html())>")
chamada antiga: assertEquals("<div><p>Hello</p><div>one</div><div>two</div><p>There</p><p>Three</p><!-- four --></div>", TextUtil.stripNewlines(doc.body().html()))
nova chamada: assertEquals("<div><p>Hello</p><div>one</div><div>two</div><p>There</p><p>Three</p><!-- four --></div>", TextUtil.stripNewlines(doc.body().html()), "Era esperado valores iguais, mas  'divpHello/pdivone/divdivtwo/divpThere/ppThree/p!-- four --/div' é diferente de " + result1397 + " <TextUtil.stripNewlines(doc.body().html())>")
chamada antiga: assertEquals("<div><div class=\"head\"><p>Hello</p></div><p>There!</p></div>", TextUtil.stripNewlines(doc.body().html()))
nova chamada: assertEquals("<div><div class=\"head\"><p>Hello</p></div><p>There!</p></div>", TextUtil.stripNewlines(doc.body().html()), "Era esperado valores iguais, mas  'divdiv class=\'head\'pHello/p/divpThere!/p/div' é diferente de " + result1398 + " <TextUtil.stripNewlines(doc.body().html())>")
chamada antiga: assertNotNull(body)
nova chamada: assertNotNull(body, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("body", body.tagName())
nova chamada: assertEquals("body", body.tagName(), "Era esperado valores iguais, mas  'body' é diferente de " + result1399 + " <body.tagName()>")
chamada antiga: assertNotNull(div)
nova chamada: assertNotNull(div, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("div", div.tagName())
nova chamada: assertEquals("div", div.tagName(), "Era esperado valores iguais, mas  'div' é diferente de " + result1400 + " <div.tagName()>")
chamada antiga: assertSame(div, p.parent())
nova chamada: assertSame(div, p.parent(), "Era esperado objetos iguais, mas  div é diferente de " + result1401 + " <p.parent()>")
chamada antiga: assertSame(body, div.parent())
nova chamada: assertSame(body, div.parent(), "Era esperado objetos iguais, mas  body é diferente de " + result1402 + " <div.parent()>")
chamada antiga: assertEquals("<div><p>Hello</p></div> There", TextUtil.stripNewlines(doc.body().html()))
nova chamada: assertEquals("<div><p>Hello</p></div> There", TextUtil.stripNewlines(doc.body().html()), "Era esperado valores iguais, mas  'divpHello/p/div There' é diferente de " + result1403 + " <TextUtil.stripNewlines(doc.body().html())>")
chamada antiga: assertTrue(div.hasText())
nova chamada: assertTrue(div.hasText(), "Era esperado verdadeiro, mas " + result1404 + " <div.hasText()> é falso")
chamada antiga: assertTrue(ps.first().hasText())
nova chamada: assertTrue(ps.first().hasText(), "Era esperado verdadeiro, mas " + result1405 + " <ps.first().hasText()> é falso")
chamada antiga: assertEquals(2, dataset.size())
nova chamada: assertEquals(2, dataset.size(), "Era esperado valores iguais, mas  2 é diferente de " + result1406 + " <dataset.size()>")
chamada antiga: assertEquals("jsoup", dataset.get("name"))
nova chamada: assertEquals("jsoup", dataset.get("name"), "Era esperado valores iguais, mas  'jsoup' é diferente de " + result1407 + " <dataset.get('name')>")
chamada antiga: assertEquals("jar", dataset.get("package"))
nova chamada: assertEquals("jar", dataset.get("package"), "Era esperado valores iguais, mas  'jar' é diferente de " + result1408 + " <dataset.get('package')>")
chamada antiga: assertEquals(2, dataset.size())
nova chamada: assertEquals(2, dataset.size(), "Era esperado valores iguais, mas  2 é diferente de " + result1409 + " <dataset.size()>")
chamada antiga: assertEquals(4, attributes.size())
nova chamada: assertEquals(4, attributes.size(), "Era esperado valores iguais, mas  4 é diferente de " + result1410 + " <attributes.size()>")
chamada antiga: assertEquals("jsoup updated", attributes.get("data-name"))
nova chamada: assertEquals("jsoup updated", attributes.get("data-name"), "Era esperado valores iguais, mas  'jsoup updated' é diferente de " + result1411 + " <attributes.get('data-name')>")
chamada antiga: assertEquals("jsoup updated", dataset.get("name"))
nova chamada: assertEquals("jsoup updated", dataset.get("name"), "Era esperado valores iguais, mas  'jsoup updated' é diferente de " + result1412 + " <dataset.get('name')>")
chamada antiga: assertEquals("java", attributes.get("data-language"))
nova chamada: assertEquals("java", attributes.get("data-language"), "Era esperado valores iguais, mas  'java' é diferente de " + result1413 + " <attributes.get('data-language')>")
chamada antiga: assertEquals("java", dataset.get("language"))
nova chamada: assertEquals("java", dataset.get("language"), "Era esperado valores iguais, mas  'java' é diferente de " + result1414 + " <dataset.get('language')>")
chamada antiga: assertEquals(3, dataset.size())
nova chamada: assertEquals(3, dataset.size(), "Era esperado valores iguais, mas  3 é diferente de " + result1415 + " <dataset.size()>")
chamada antiga: assertEquals("bacon", dataset.get("food"))
nova chamada: assertEquals("bacon", dataset.get("food"), "Era esperado valores iguais, mas  'bacon' é diferente de " + result1416 + " <dataset.get('food')>")
chamada antiga: assertNull(dataset.get(""))
nova chamada: assertNull(dataset.get(""), "Era esperado nulo, mas " + result1417 + " <dataset.get('')> não é nulo")
chamada antiga: assertEquals(0, p.dataset().size())
nova chamada: assertEquals(0, p.dataset().size(), "Era esperado valores iguais, mas  0 é diferente de " + result1418 + " <p.dataset().size()>")
chamada antiga: assertEquals("<img src=\"foo\">", img.toString())
nova chamada: assertEquals("<img src=\"foo\">", img.toString(), "Era esperado valores iguais, mas  'img src=\'foo\'' é diferente de " + result1419 + " <img.toString()>")
chamada antiga: assertEquals("<img src=\"foo\">", img.toString())
nova chamada: assertEquals("<img src=\"foo\">", img.toString(), "Era esperado valores iguais, mas  'img src=\'foo\'' é diferente de " + result1420 + " <img.toString()>")
chamada antiga: assertEquals("<div id=\"foo\">\n Hello\n</div>", orphan.toString())
nova chamada: assertEquals("<div id=\"foo\">\n Hello\n</div>", orphan.toString(), "Era esperado valores iguais, mas  'div id=\'foo\'\n Hello\n/div' é diferente de " + result1421 + " <orphan.toString()>")
chamada antiga: assertNotNull(clone.parentNode)
nova chamada: assertNotNull(clone.parentNode, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(1, clone.parentNode.childNodeSize())
nova chamada: assertEquals(1, clone.parentNode.childNodeSize(), "Era esperado valores iguais, mas  1 é diferente de " + result1422 + " <clone.parentNode.childNodeSize()>")
chamada antiga: assertSame(clone.ownerDocument(), clone.parentNode)
nova chamada: assertSame(clone.ownerDocument(), clone.parentNode, "Era esperado objetos iguais, mas " + result1423 + " <clone.ownerDocument()> é diferente de " + " clone.parentNode")
chamada antiga: assertEquals(0, clone.siblingIndex)
nova chamada: assertEquals(0, clone.siblingIndex, "Era esperado valores iguais, mas  0 é diferente de " + " clone.siblingIndex")
chamada antiga: assertEquals(1, p.siblingIndex)
nova chamada: assertEquals(1, p.siblingIndex, "Era esperado valores iguais, mas  1 é diferente de " + " p.siblingIndex")
chamada antiga: assertNotNull(p.parent())
nova chamada: assertNotNull(p.parent(), "Era esperado não nulo, mas " + result1424 + " <p.parent()> é nulo")
chamada antiga: assertEquals("<p><span>Two</span><span>Three</span></p>", TextUtil.stripNewlines(clone.outerHtml()))
nova chamada: assertEquals("<p><span>Two</span><span>Three</span></p>", TextUtil.stripNewlines(clone.outerHtml()), "Era esperado valores iguais, mas  'pspanTwo/spanspanThree/span/p' é diferente de " + result1425 + " <TextUtil.stripNewlines(clone.outerHtml())>")
chamada antiga: assertEquals("<div><p>One</p><p><span>Two</span></p></div>", TextUtil.stripNewlines(doc.body().html()))
nova chamada: assertEquals("<div><p>One</p><p><span>Two</span></p></div>", TextUtil.stripNewlines(doc.body().html()), "Era esperado valores iguais, mas  'divpOne/ppspanTwo/span/p/div' é diferente de " + result1426 + " <TextUtil.stripNewlines(doc.body().html())>")
chamada antiga: assertNotNull(clone.parent())
nova chamada: assertNotNull(clone.parent(), "Era esperado não nulo, mas " + result1427 + " <clone.parent()> é nulo")
chamada antiga: assertEquals("<div><p>One</p><p><span>Two</span></p></div><p><span>Two</span><span>Three</span></p>", TextUtil.stripNewlines(doc.body().html()))
nova chamada: assertEquals("<div><p>One</p><p><span>Two</span></p></div><p><span>Two</span><span>Three</span></p>", TextUtil.stripNewlines(doc.body().html()), "Era esperado valores iguais, mas  'divpOne/ppspanTwo/span/p/divpspanTwo/spanspanThree/span/p' é diferente de " + result1428 + " <TextUtil.stripNewlines(doc.body().html())>")
chamada antiga: assertEquals(2, classes.size())
nova chamada: assertEquals(2, classes.size(), "Era esperado valores iguais, mas  2 é diferente de " + result1429 + " <classes.size()>")
chamada antiga: assertTrue(classes.contains("one"))
nova chamada: assertTrue(classes.contains("one"), "Era esperado verdadeiro, mas " + result1430 + " <classes.contains('one')> é falso")
chamada antiga: assertTrue(classes.contains("two"))
nova chamada: assertTrue(classes.contains("two"), "Era esperado verdadeiro, mas " + result1431 + " <classes.contains('two')> é falso")
chamada antiga: assertEquals(2, copyClasses.size())
nova chamada: assertEquals(2, copyClasses.size(), "Era esperado valores iguais, mas  2 é diferente de " + result1432 + " <copyClasses.size()>")
chamada antiga: assertTrue(copyClasses.contains("one"))
nova chamada: assertTrue(copyClasses.contains("one"), "Era esperado verdadeiro, mas " + result1433 + " <copyClasses.contains('one')> é falso")
chamada antiga: assertTrue(copyClasses.contains("two"))
nova chamada: assertTrue(copyClasses.contains("two"), "Era esperado verdadeiro, mas " + result1434 + " <copyClasses.contains('two')> é falso")
chamada antiga: assertTrue(classes.contains("one"))
nova chamada: assertTrue(classes.contains("one"), "Era esperado verdadeiro, mas " + result1435 + " <classes.contains('one')> é falso")
chamada antiga: assertTrue(copyClasses.contains("three"))
nova chamada: assertTrue(copyClasses.contains("three"), "Era esperado verdadeiro, mas " + result1436 + " <copyClasses.contains('three')> é falso")
chamada antiga: assertEquals("", div.html())
nova chamada: assertEquals("", div.html(), "Era esperado valores iguais, mas  '' é diferente de " + result1437 + " <div.html()>")
chamada antiga: assertEquals("", copy.html())
nova chamada: assertEquals("", copy.html(), "Era esperado valores iguais, mas  '' é diferente de " + result1438 + " <copy.html()>")
chamada antiga: assertEquals(1, d.childNodeSize())
nova chamada: assertEquals(1, d.childNodeSize(), "Era esperado valores iguais, mas  1 é diferente de " + result1439 + " <d.childNodeSize()>")
chamada antiga: assertEquals(0, d2.childNodeSize())
nova chamada: assertEquals(0, d2.childNodeSize(), "Era esperado valores iguais, mas  0 é diferente de " + result1440 + " <d2.childNodeSize()>")
chamada antiga: assertEquals(1, p.childNodeSize())
nova chamada: assertEquals(1, p.childNodeSize(), "Era esperado valores iguais, mas  1 é diferente de " + result1441 + " <p.childNodeSize()>")
chamada antiga: assertEquals(0, p2.childNodeSize())
nova chamada: assertEquals(0, p2.childNodeSize(), "Era esperado valores iguais, mas  0 é diferente de " + result1442 + " <p2.childNodeSize()>")
chamada antiga: assertEquals("", p2.text())
nova chamada: assertEquals("", p2.text(), "Era esperado valores iguais, mas  '' é diferente de " + result1443 + " <p2.text()>")
chamada antiga: assertEquals("One", t2.text())
nova chamada: assertEquals("One", t2.text(), "Era esperado valores iguais, mas  'One' é diferente de " + result1444 + " <t2.text()>")
chamada antiga: assertEquals("two", p2.className())
nova chamada: assertEquals("two", p2.className(), "Era esperado valores iguais, mas  'two' é diferente de " + result1445 + " <p2.className()>")
chamada antiga: assertEquals("two", p.className())
nova chamada: assertEquals("two", p.className(), "Era esperado valores iguais, mas  'two' é diferente de " + result1446 + " <p.className()>")
chamada antiga: assertEquals(1, d2.childNodeSize())
nova chamada: assertEquals(1, d2.childNodeSize(), "Era esperado valores iguais, mas  1 é diferente de " + result1447 + " <d2.childNodeSize()>")
chamada antiga: assertEquals("Three", d2.text())
nova chamada: assertEquals("Three", d2.text(), "Era esperado valores iguais, mas  'Three' é diferente de " + result1448 + " <d2.text()>")
chamada antiga: assertEquals("One", d.text())
nova chamada: assertEquals("One", d.text(), "Era esperado valores iguais, mas  'One' é diferente de " + result1449 + " <d.text()>")
chamada antiga: assertEquals(base, d2.baseUri())
nova chamada: assertEquals(base, d2.baseUri(), "Era esperado valores iguais, mas  base é diferente de " + result1450 + " <d2.baseUri()>")
chamada antiga: assertEquals(0, doc.select("i").size())
nova chamada: assertEquals(0, doc.select("i").size(), "Era esperado valores iguais, mas  0 é diferente de " + result1451 + " <doc.select('i').size()>")
chamada antiga: assertEquals(1, doc.select("em").size())
nova chamada: assertEquals(1, doc.select("em").size(), "Era esperado valores iguais, mas  1 é diferente de " + result1452 + " <doc.select('em').size()>")
chamada antiga: assertEquals("<em>Hello</em>", doc.select("div").first().html())
nova chamada: assertEquals("<em>Hello</em>", doc.select("div").first().html(), "Era esperado valores iguais, mas  'emHello/em' é diferente de " + result1453 + " <doc.select('div').first().html()>")
chamada antiga: assertTrue(doc.html().contains(doc.select("title").outerHtml()))
nova chamada: assertTrue(doc.html().contains(doc.select("title").outerHtml()), "Era esperado verdadeiro, mas " + result1454 + " <doc.html().contains(doc.select('title').outerHtml())> é falso")
chamada antiga: assertTrue(doc.html().contains(doc.select("div").outerHtml()))
nova chamada: assertTrue(doc.html().contains(doc.select("div").outerHtml()), "Era esperado verdadeiro, mas " + result1455 + " <doc.html().contains(doc.select('div').outerHtml())> é falso")
chamada antiga: assertEquals(3, textNodes.size())
nova chamada: assertEquals(3, textNodes.size(), "Era esperado valores iguais, mas  3 é diferente de " + result1456 + " <textNodes.size()>")
chamada antiga: assertEquals("One ", textNodes.get(0).text())
nova chamada: assertEquals("One ", textNodes.get(0).text(), "Era esperado valores iguais, mas  'One ' é diferente de " + result1457 + " <textNodes.get(0).text()>")
chamada antiga: assertEquals(" Three ", textNodes.get(1).text())
nova chamada: assertEquals(" Three ", textNodes.get(1).text(), "Era esperado valores iguais, mas  ' Three ' é diferente de " + result1458 + " <textNodes.get(1).text()>")
chamada antiga: assertEquals(" Four", textNodes.get(2).text())
nova chamada: assertEquals(" Four", textNodes.get(2).text(), "Era esperado valores iguais, mas  ' Four' é diferente de " + result1459 + " <textNodes.get(2).text()>")
chamada antiga: assertEquals(0, doc.select("br").first().textNodes().size())
nova chamada: assertEquals(0, doc.select("br").first().textNodes().size(), "Era esperado valores iguais, mas  0 é diferente de " + result1460 + " <doc.select('br').first().textNodes().size()>")
chamada antiga: assertEquals("One Two three-more Fo-ur", p.text())
nova chamada: assertEquals("One Two three-more Fo-ur", p.text(), "Era esperado valores iguais, mas  'One Two three-more Fo-ur' é diferente de " + result1461 + " <p.text()>")
chamada antiga: assertEquals("One three-more Fo-ur", p.ownText())
nova chamada: assertEquals("One three-more Fo-ur", p.ownText(), "Era esperado valores iguais, mas  'One three-more Fo-ur' é diferente de " + result1462 + " <p.ownText()>")
chamada antiga: assertEquals(4, p.textNodes().size())
nova chamada: assertEquals(4, p.textNodes().size(), "Era esperado valores iguais, mas  4 é diferente de " + result1463 + " <p.textNodes().size()>")
chamada antiga: assertEquals(1, scriptData.size())
nova chamada: assertEquals(1, scriptData.size(), "Era esperado valores iguais, mas  1 é diferente de " + result1464 + " <scriptData.size()>")
chamada antiga: assertEquals("One Two", scriptData.get(0).getWholeData())
nova chamada: assertEquals("One Two", scriptData.get(0).getWholeData(), "Era esperado valores iguais, mas  'One Two' é diferente de " + result1465 + " <scriptData.get(0).getWholeData()>")
chamada antiga: assertEquals(1, styleData.size())
nova chamada: assertEquals(1, styleData.size(), "Era esperado valores iguais, mas  1 é diferente de " + result1466 + " <styleData.size()>")
chamada antiga: assertEquals("Three Four", styleData.get(0).getWholeData())
nova chamada: assertEquals("Three Four", styleData.get(0).getWholeData(), "Era esperado valores iguais, mas  'Three Four' é diferente de " + result1467 + " <styleData.get(0).getWholeData()>")
chamada antiga: assertEquals(0, pData.size())
nova chamada: assertEquals(0, pData.size(), "Era esperado valores iguais, mas  0 é diferente de " + result1468 + " <pData.size()>")
chamada antiga: assertEquals("Two", p2.text())
nova chamada: assertEquals("Two", p2.text(), "Era esperado valores iguais, mas  'Two' é diferente de " + result1469 + " <p2.text()>")
chamada antiga: assertEquals(2, els.size())
nova chamada: assertEquals(2, els.size(), "Era esperado valores iguais, mas  2 é diferente de " + result1470 + " <els.size()>")
chamada antiga: assertEquals("<p>One</p>", els.get(0).outerHtml())
nova chamada: assertEquals("<p>One</p>", els.get(0).outerHtml(), "Era esperado valores iguais, mas  'pOne/p' é diferente de " + result1471 + " <els.get(0).outerHtml()>")
chamada antiga: assertEquals("<p>Three</p>", els.get(1).outerHtml())
nova chamada: assertEquals("<p>Three</p>", els.get(1).outerHtml(), "Era esperado valores iguais, mas  'pThree/p' é diferente de " + result1472 + " <els.get(1).outerHtml()>")
chamada antiga: assertEquals(2, div.children().size())
nova chamada: assertEquals(2, div.children().size(), "Era esperado valores iguais, mas  2 é diferente de " + result1473 + " <div.children().size()>")
chamada antiga: assertEquals("One", div.child(0).text())
nova chamada: assertEquals("One", div.child(0).text(), "Era esperado valores iguais, mas  'One' é diferente de " + result1474 + " <div.child(0).text()>")
chamada antiga: assertEquals(4, div1.childNodeSize())
nova chamada: assertEquals(4, div1.childNodeSize(), "Era esperado valores iguais, mas  4 é diferente de " + result1475 + " <div1.childNodeSize()>")
chamada antiga: assertEquals(4, children.size())
nova chamada: assertEquals(4, children.size(), "Era esperado valores iguais, mas  4 é diferente de " + result1476 + " <children.size()>")
chamada antiga: assertEquals(4, children.size())
nova chamada: assertEquals(4, children.size(), "Era esperado valores iguais, mas  4 é diferente de " + result1477 + " <children.size()>")
chamada antiga: assertEquals(0, div1.childNodeSize())
nova chamada: assertEquals(0, div1.childNodeSize(), "Era esperado valores iguais, mas  0 é diferente de " + result1478 + " <div1.childNodeSize()>")
chamada antiga: assertEquals(4, div2.childNodeSize())
nova chamada: assertEquals(4, div2.childNodeSize(), "Era esperado valores iguais, mas  4 é diferente de " + result1479 + " <div2.childNodeSize()>")
chamada antiga: assertEquals("<div id=\"1\"></div>\n<div id=\"2\">\n Text \n <p>One</p> Text \n <p>Two</p>\n</div>", doc.body().html())
nova chamada: assertEquals("<div id=\"1\"></div>\n<div id=\"2\">\n Text \n <p>One</p> Text \n <p>Two</p>\n</div>", doc.body().html(), "Era esperado valores iguais, mas  'div id=\'1\'/div\ndiv id=\'2\'\n Text \n pOne/p Text \n pTwo/p\n/div' é diferente de " + result1480 + " <doc.body().html()>")
chamada antiga: assertEquals(2, div2.childNodeSize())
nova chamada: assertEquals(2, div2.childNodeSize(), "Era esperado valores iguais, mas  2 é diferente de " + result1481 + " <div2.childNodeSize()>")
chamada antiga: assertEquals(2, div1.childNodeSize())
nova chamada: assertEquals(2, div1.childNodeSize(), "Era esperado valores iguais, mas  2 é diferente de " + result1482 + " <div1.childNodeSize()>")
chamada antiga: assertEquals(4, div2.childNodeSize())
nova chamada: assertEquals(4, div2.childNodeSize(), "Era esperado valores iguais, mas  4 é diferente de " + result1483 + " <div2.childNodeSize()>")
chamada antiga: assertEquals(3, p1s.get(1).siblingIndex())
nova chamada: assertEquals(3, p1s.get(1).siblingIndex(), "Era esperado valores iguais, mas  3 é diferente de " + result1484 + " <p1s.get(1).siblingIndex()>")
chamada antiga: assertNull(el1.parent())
nova chamada: assertNull(el1.parent(), "Era esperado nulo, mas " + result1485 + " <el1.parent()> não é nulo")
chamada antiga: assertEquals(div2, el1.parent())
nova chamada: assertEquals(div2, el1.parent(), "Era esperado valores iguais, mas  div2 é diferente de " + result1486 + " <el1.parent()>")
chamada antiga: assertEquals(7, div2.childNodeSize())
nova chamada: assertEquals(7, div2.childNodeSize(), "Era esperado valores iguais, mas  7 é diferente de " + result1487 + " <div2.childNodeSize()>")
chamada antiga: assertEquals(3, el1.siblingIndex())
nova chamada: assertEquals(3, el1.siblingIndex(), "Era esperado valores iguais, mas  3 é diferente de " + result1488 + " <el1.siblingIndex()>")
chamada antiga: assertEquals(4, el2.siblingIndex())
nova chamada: assertEquals(4, el2.siblingIndex(), "Era esperado valores iguais, mas  4 é diferente de " + result1489 + " <el2.siblingIndex()>")
chamada antiga: assertEquals(5, tn1.siblingIndex())
nova chamada: assertEquals(5, tn1.siblingIndex(), "Era esperado valores iguais, mas  5 é diferente de " + result1490 + " <tn1.siblingIndex()>")
chamada antiga: assertEquals(4, div1.childNodeSize())
nova chamada: assertEquals(4, div1.childNodeSize(), "Era esperado valores iguais, mas  4 é diferente de " + result1491 + " <div1.childNodeSize()>")
chamada antiga: assertEquals(2, div2.childNodeSize())
nova chamada: assertEquals(2, div2.childNodeSize(), "Era esperado valores iguais, mas  2 é diferente de " + result1492 + " <div2.childNodeSize()>")
chamada antiga: assertEquals("<div id=\"1\">Text <p>One</p> Text <p>Two</p></div><div id=\"2\"><p>One cloned</p><p>Two</p></div>", TextUtil.stripNewlines(doc.body().html()))
nova chamada: assertEquals("<div id=\"1\">Text <p>One</p> Text <p>Two</p></div><div id=\"2\"><p>One cloned</p><p>Two</p></div>", TextUtil.stripNewlines(doc.body().html()), "Era esperado valores iguais, mas  'div id=\'1\'Text pOne/p Text pTwo/p/divdiv id=\'2\'pOne cloned/ppTwo/p/div' é diferente de " + result1493 + " <TextUtil.stripNewlines(doc.body().html())>")
chamada antiga: assertEquals(divA.cssSelector(), "#id1")
nova chamada: assertEquals(divA.cssSelector(), "#id1", "Era esperado valores iguais, mas " + result1494 + " <divA.cssSelector()> é diferente de " + " '#id1'")
chamada antiga: assertEquals(divB.cssSelector(), "html > body > div:nth-child(2)")
nova chamada: assertEquals(divB.cssSelector(), "html > body > div:nth-child(2)", "Era esperado valores iguais, mas " + result1495 + " <divB.cssSelector()> é diferente de " + " 'html  body  div:nth-child(2)'")
chamada antiga: assertEquals(divC.cssSelector(), "html > body > div.c1.c2")
nova chamada: assertEquals(divC.cssSelector(), "html > body > div.c1.c2", "Era esperado valores iguais, mas " + result1496 + " <divC.cssSelector()> é diferente de " + " 'html  body  div.c1.c2'")
chamada antiga: assertSame(divA, doc.select(divA.cssSelector()).first())
nova chamada: assertSame(divA, doc.select(divA.cssSelector()).first(), "Era esperado objetos iguais, mas  divA é diferente de " + result1497 + " <doc.select(divA.cssSelector()).first()>")
chamada antiga: assertSame(divB, doc.select(divB.cssSelector()).first())
nova chamada: assertSame(divB, doc.select(divB.cssSelector()).first(), "Era esperado objetos iguais, mas  divB é diferente de " + result1498 + " <doc.select(divB.cssSelector()).first()>")
chamada antiga: assertSame(divC, doc.select(divC.cssSelector()).first())
nova chamada: assertSame(divC, doc.select(divC.cssSelector()).first(), "Era esperado objetos iguais, mas  divC é diferente de " + result1499 + " <doc.select(divC.cssSelector()).first()>")
chamada antiga: assertEquals(divA.cssSelector(), "html > body > article > div:nth-child(1)")
nova chamada: assertEquals(divA.cssSelector(), "html > body > article > div:nth-child(1)", "Era esperado valores iguais, mas " + result1500 + " <divA.cssSelector()> é diferente de " + " 'html  body  article  div:nth-child(1)'")
chamada antiga: assertEquals(divB.cssSelector(), "html > body > article > div:nth-child(2)")
nova chamada: assertEquals(divB.cssSelector(), "html > body > article > div:nth-child(2)", "Era esperado valores iguais, mas " + result1501 + " <divB.cssSelector()> é diferente de " + " 'html  body  article  div:nth-child(2)'")
chamada antiga: assertEquals(divC.cssSelector(), "html > body > article > div.c1")
nova chamada: assertEquals(divC.cssSelector(), "html > body > article > div.c1", "Era esperado valores iguais, mas " + result1502 + " <divC.cssSelector()> é diferente de " + " 'html  body  article  div.c1'")
chamada antiga: assertSame(divA, doc.select(divA.cssSelector()).first())
nova chamada: assertSame(divA, doc.select(divA.cssSelector()).first(), "Era esperado objetos iguais, mas  divA é diferente de " + result1503 + " <doc.select(divA.cssSelector()).first()>")
chamada antiga: assertSame(divB, doc.select(divB.cssSelector()).first())
nova chamada: assertSame(divB, doc.select(divB.cssSelector()).first(), "Era esperado objetos iguais, mas  divB é diferente de " + result1504 + " <doc.select(divB.cssSelector()).first()>")
chamada antiga: assertSame(divC, doc.select(divC.cssSelector()).first())
nova chamada: assertSame(divC, doc.select(divC.cssSelector()).first(), "Era esperado objetos iguais, mas  divC é diferente de " + result1505 + " <doc.select(divC.cssSelector()).first()>")
chamada antiga: assertEquals("c1 c2", div.className())
nova chamada: assertEquals("c1 c2", div.className(), "Era esperado valores iguais, mas  'c1 c2' é diferente de " + result1506 + " <div.className()>")
chamada antiga: assertEquals(2, arr1.length)
nova chamada: assertEquals(2, arr1.length, "Era esperado valores iguais, mas  2 é diferente de " + " arr1.length")
chamada antiga: assertEquals("c1", arr1[0])
nova chamada: assertEquals("c1", arr1[0], "Era esperado valores iguais, mas  'c1' é diferente de " + " arr1[0]")
chamada antiga: assertEquals("c2", arr1[1])
nova chamada: assertEquals("c2", arr1[1], "Era esperado valores iguais, mas  'c2' é diferente de " + " arr1[1]")
chamada antiga: assertEquals(2, div.classNames().size())
nova chamada: assertEquals(2, div.classNames().size(), "Era esperado valores iguais, mas  2 é diferente de " + result1507 + " <div.classNames().size()>")
chamada antiga: assertEquals("c1 c2", div.className())
nova chamada: assertEquals("c1 c2", div.className(), "Era esperado valores iguais, mas  'c1 c2' é diferente de " + result1508 + " <div.className()>")
chamada antiga: assertEquals("c1 c2 c3", div.className())
nova chamada: assertEquals("c1 c2 c3", div.className(), "Era esperado valores iguais, mas  'c1 c2 c3' é diferente de " + result1509 + " <div.className()>")
chamada antiga: assertEquals(3, arr2.length)
nova chamada: assertEquals(3, arr2.length, "Era esperado valores iguais, mas  3 é diferente de " + " arr2.length")
chamada antiga: assertEquals("c1", arr2[0])
nova chamada: assertEquals("c1", arr2[0], "Era esperado valores iguais, mas  'c1' é diferente de " + " arr2[0]")
chamada antiga: assertEquals("c2", arr2[1])
nova chamada: assertEquals("c2", arr2[1], "Era esperado valores iguais, mas  'c2' é diferente de " + " arr2[1]")
chamada antiga: assertEquals("c3", arr2[2])
nova chamada: assertEquals("c3", arr2[2], "Era esperado valores iguais, mas  'c3' é diferente de " + " arr2[2]")
chamada antiga: assertEquals(8, els.size())
nova chamada: assertEquals(8, els.size(), "Era esperado valores iguais, mas  8 é diferente de " + result1510 + " <els.size()>")
chamada antiga: assertEquals(e0, e0)
nova chamada: assertEquals(e0, e0, "Era esperado valores iguais, mas  e0 é diferente de " + " e0")
chamada antiga: assertTrue(e0.hasSameValue(e1))
nova chamada: assertTrue(e0.hasSameValue(e1), "Era esperado verdadeiro, mas " + result1511 + " <e0.hasSameValue(e1)> é falso")
chamada antiga: assertTrue(e0.hasSameValue(e4))
nova chamada: assertTrue(e0.hasSameValue(e4), "Era esperado verdadeiro, mas " + result1512 + " <e0.hasSameValue(e4)> é falso")
chamada antiga: assertTrue(e0.hasSameValue(e5))
nova chamada: assertTrue(e0.hasSameValue(e5), "Era esperado verdadeiro, mas " + result1513 + " <e0.hasSameValue(e5)> é falso")
chamada antiga: assertNotEquals(e0, e2)
nova chamada: assertNotEquals(e0, e2, "Era esperado valores diferentes, mas  e0 é igual a " + " e2")
chamada antiga: assertEquals(e0.hashCode(), e0.hashCode())
nova chamada: assertEquals(e0.hashCode(), e0.hashCode(), "Era esperado valores iguais, mas " + result1514 + " <e0.hashCode()> é diferente de " + result1515 + " <e0.hashCode()>")
chamada antiga: assertNotEquals(e0.hashCode(), (e2.hashCode()))
nova chamada: assertNotEquals(e0.hashCode(), (e2.hashCode()), "Era esperado valores diferentes, mas " + result1516 + " <e0.hashCode()> é igual a " + " (e2.hashCode())")
chamada antiga: assertNotEquals(e0.hashCode(), (e3).hashCode())
nova chamada: assertNotEquals(e0.hashCode(), (e3).hashCode(), "Era esperado valores diferentes, mas " + result1517 + " <e0.hashCode()> é igual a " + result1518 + " <(e3).hashCode()>")
chamada antiga: assertNotEquals(e0.hashCode(), (e6).hashCode())
nova chamada: assertNotEquals(e0.hashCode(), (e6).hashCode(), "Era esperado valores diferentes, mas " + result1519 + " <e0.hashCode()> é igual a " + result1520 + " <(e6).hashCode()>")
chamada antiga: assertNotEquals(e0.hashCode(), (e7).hashCode())
nova chamada: assertNotEquals(e0.hashCode(), (e7).hashCode(), "Era esperado valores diferentes, mas " + result1521 + " <e0.hashCode()> é igual a " + result1522 + " <(e7).hashCode()>")
chamada antiga: assertEquals("http://example.com/bar/one.html", els.get(0).absUrl("href"))
nova chamada: assertEquals("http://example.com/bar/one.html", els.get(0).absUrl("href"), "Era esperado valores iguais, mas  'http://example.com/bar/one.html' é diferente de " + result1523 + " <els.get(0).absUrl('href')>")
chamada antiga: assertEquals("http://example.com/bar/two.html", els.get(1).absUrl("href"))
nova chamada: assertEquals("http://example.com/bar/two.html", els.get(1).absUrl("href"), "Era esperado valores iguais, mas  'http://example.com/bar/two.html' é diferente de " + result1524 + " <els.get(1).absUrl('href')>")
chamada antiga: assertEquals("http://example.com/three.html", els.get(2).absUrl("href"))
nova chamada: assertEquals("http://example.com/three.html", els.get(2).absUrl("href"), "Era esperado valores iguais, mas  'http://example.com/three.html' é diferente de " + result1525 + " <els.get(2).absUrl('href')>")
chamada antiga: assertEquals("http://example2.com/four/", els.get(3).absUrl("href"))
nova chamada: assertEquals("http://example2.com/four/", els.get(3).absUrl("href"), "Era esperado valores iguais, mas  'http://example2.com/four/' é diferente de " + result1526 + " <els.get(3).absUrl('href')>")
chamada antiga: assertEquals("https://example2.com/five/", els.get(4).absUrl("href"))
nova chamada: assertEquals("https://example2.com/five/", els.get(4).absUrl("href"), "Era esperado valores iguais, mas  'https://example2.com/five/' é diferente de " + result1527 + " <els.get(4).absUrl('href')>")
chamada antiga: assertEquals("", els.get(5).absUrl("href"))
nova chamada: assertEquals("", els.get(5).absUrl("href"), "Era esperado valores iguais, mas  '' é diferente de " + result1528 + " <els.get(5).absUrl('href')>")
chamada antiga: assertEquals("http://example.com/bar/", els.get(6).absUrl("href"))
nova chamada: assertEquals("http://example.com/bar/", els.get(6).absUrl("href"), "Era esperado valores iguais, mas  'http://example.com/bar/' é diferente de " + result1529 + " <els.get(6).absUrl('href')>")
chamada antiga: assertEquals(idnFoo, hrefOne)
nova chamada: assertEquals(idnFoo, hrefOne, "Era esperado valores iguais, mas  idnFoo é diferente de " + " hrefOne")
chamada antiga: assertEquals("https://www.测试.测试/bar.html?qux", hrefTwo)
nova chamada: assertEquals("https://www.测试.测试/bar.html?qux", hrefTwo, "Era esperado valores iguais, mas  'https://www.测试.测试/bar.html?qux' é diferente de " + " hrefTwo")
chamada antiga: assertEquals("<body><div3>Check</div3><div4></div4><div1></div1><div2></div2></body>", result)
nova chamada: assertEquals("<body><div3>Check</div3><div4></div4><div1></div1><div2></div2></body>", result, "Era esperado valores iguais, mas  'bodydiv3Check/div3div4/div4div1/div1div2/div2/body' é diferente de " + " result")
chamada antiga: assertTrue(set.contains(root))
nova chamada: assertTrue(set.contains(root), "Era esperado verdadeiro, mas " + result1530 + " <set.contains(root)> é falso")
chamada antiga: assertEquals(1, els.size())
nova chamada: assertEquals(1, els.size(), "Era esperado valores iguais, mas  1 é diferente de " + result1531 + " <els.size()>")
chamada antiga: assertEquals("html > body > fb|comments", els.get(0).cssSelector())
nova chamada: assertEquals("html > body > fb|comments", els.get(0).cssSelector(), "Era esperado valores iguais, mas  'html  body  fb|comments' é diferente de " + result1532 + " <els.get(0).cssSelector()>")
chamada antiga: assertEquals("<a>Text</a>", a.outerHtml())
nova chamada: assertEquals("<a>Text</a>", a.outerHtml(), "Era esperado valores iguais, mas  'aText/a' é diferente de " + result1533 + " <a.outerHtml()>")
chamada antiga: assertEquals("<a>Text</a>\n<p>Two</p>", doc.body().html())
nova chamada: assertEquals("<a>Text</a>\n<p>Two</p>", doc.body().html(), "Era esperado valores iguais, mas  'aText/a\npTwo/p' é diferente de " + result1534 + " <doc.body().html()>")
chamada antiga: assertTrue(p.is("p"))
nova chamada: assertTrue(p.is("p"), "Era esperado verdadeiro, mas " + result1535 + " <p.is('p')> é falso")
chamada antiga: assertTrue(p.is("p:has(a)"))
nova chamada: assertTrue(p.is("p:has(a)"), "Era esperado verdadeiro, mas " + result1536 + " <p.is('p:has(a)')> é falso")
chamada antiga: assertTrue(p.is("p:first-child"))
nova chamada: assertTrue(p.is("p:first-child"), "Era esperado verdadeiro, mas " + result1537 + " <p.is('p:first-child')> é falso")
chamada antiga: assertTrue(p.is("*"))
nova chamada: assertTrue(p.is("*"), "Era esperado verdadeiro, mas " + result1538 + " <p.is('*')> é falso")
chamada antiga: assertTrue(p.is("div p"))
nova chamada: assertTrue(p.is("div p"), "Era esperado verdadeiro, mas " + result1539 + " <p.is('div p')> é falso")
chamada antiga: assertTrue(q.is("p"))
nova chamada: assertTrue(q.is("p"), "Era esperado verdadeiro, mas " + result1540 + " <q.is('p')> é falso")
chamada antiga: assertTrue(q.is("p ~ p"))
nova chamada: assertTrue(q.is("p ~ p"), "Era esperado verdadeiro, mas " + result1541 + " <q.is('p ~ p')> é falso")
chamada antiga: assertTrue(q.is("p + p"))
nova chamada: assertTrue(q.is("p + p"), "Era esperado verdadeiro, mas " + result1542 + " <q.is('p + p')> é falso")
chamada antiga: assertTrue(q.is("p:last-child"))
nova chamada: assertTrue(q.is("p:last-child"), "Era esperado verdadeiro, mas " + result1543 + " <q.is('p:last-child')> é falso")
chamada antiga: assertEquals("One Three", p.ownText())
nova chamada: assertEquals("One Three", p.ownText(), "Era esperado valores iguais, mas  'One Three' é diferente de " + result1544 + " <p.ownText()>")
chamada antiga: assertTrue(p.is(QueryParser.parse("p")))
nova chamada: assertTrue(p.is(QueryParser.parse("p")), "Era esperado verdadeiro, mas " + result1545 + " <p.is(QueryParser.parse('p'))> é falso")
chamada antiga: assertEquals("div", a.closest(QueryParser.parse("div:has( > p)")).tagName())
nova chamada: assertEquals("div", a.closest(QueryParser.parse("div:has( > p)")).tagName(), "Era esperado valores iguais, mas  'div' é diferente de " + result1546 + " <a.closest(QueryParser.parse('div:has( > p)')).tagName()>")
chamada antiga: assertEquals("body", body.nodeName())
nova chamada: assertEquals("body", body.nodeName(), "Era esperado valores iguais, mas  'body' é diferente de " + result1547 + " <body.nodeName()>")
chamada antiga: assertEquals("Here is div-03", el.text())
nova chamada: assertEquals("Here is div-03", el.text(), "Era esperado valores iguais, mas  'Here is div-03' é diferente de " + result1548 + " <el.text()>")
chamada antiga: assertEquals("div-03", el.id())
nova chamada: assertEquals("div-03", el.id(), "Era esperado valores iguais, mas  'div-03' é diferente de " + result1549 + " <el.id()>")
chamada antiga: assertEquals("div-02", el.closest("#div-02").id())
nova chamada: assertEquals("div-02", el.closest("#div-02").id(), "Era esperado valores iguais, mas  'div-02' é diferente de " + result1550 + " <el.closest('#div-02').id()>")
chamada antiga: assertEquals(el, el.closest("div div"))
nova chamada: assertEquals(el, el.closest("div div"), "Era esperado valores iguais, mas  el é diferente de " + result1551 + " <el.closest('div div')>")
chamada antiga: assertEquals("div-01", el.closest("article > div").id())
nova chamada: assertEquals("div-01", el.closest("article > div").id(), "Era esperado valores iguais, mas  'div-01' é diferente de " + result1552 + " <el.closest('article > div').id()>")
chamada antiga: assertEquals("article", el.closest(":not(div)").tagName())
nova chamada: assertEquals("article", el.closest(":not(div)").tagName(), "Era esperado valores iguais, mas  'article' é diferente de " + result1553 + " <el.closest(':not(div)').tagName()>")
chamada antiga: assertNull(el.closest("p"))
nova chamada: assertNull(el.closest("p"), "Era esperado nulo, mas " + result1554 + " <el.closest('p')> não é nulo")
chamada antiga: assertEquals("P", a.tagName())
nova chamada: assertEquals("P", a.tagName(), "Era esperado valores iguais, mas  'P' é diferente de " + result1555 + " <a.tagName()>")
chamada antiga: assertEquals(2, docChildren.size())
nova chamada: assertEquals(2, docChildren.size(), "Era esperado valores iguais, mas  2 é diferente de " + result1556 + " <docChildren.size()>")
chamada antiga: assertEquals("<p><a>One</a></p>", docChildren.get(0).outerHtml())
nova chamada: assertEquals("<p><a>One</a></p>", docChildren.get(0).outerHtml(), "Era esperado valores iguais, mas  'paOne/a/p' é diferente de " + result1557 + " <docChildren.get(0).outerHtml()>")
chamada antiga: assertEquals("<p><a>Two</a></p>", docChildren.get(1).outerHtml())
nova chamada: assertEquals("<p><a>Two</a></p>", docChildren.get(1).outerHtml(), "Era esperado valores iguais, mas  'paTwo/a/p' é diferente de " + result1558 + " <docChildren.get(1).outerHtml()>")
chamada antiga: assertEquals(3, div.childNodes().size())
nova chamada: assertEquals(3, div.childNodes().size(), "Era esperado valores iguais, mas  3 é diferente de " + result1559 + " <div.childNodes().size()>")
chamada antiga: assertEquals("Three", div.childNodes().get(2).outerHtml())
nova chamada: assertEquals("Three", div.childNodes().get(2).outerHtml(), "Era esperado valores iguais, mas  'Three' é diferente de " + result1560 + " <div.childNodes().get(2).outerHtml()>")
chamada antiga: assertEquals(1, p.children().size())
nova chamada: assertEquals(1, p.children().size(), "Era esperado valores iguais, mas  1 é diferente de " + result1561 + " <p.children().size()>")
chamada antiga: assertEquals("One", p.children().text())
nova chamada: assertEquals("One", p.children().text(), "Era esperado valores iguais, mas  'One' é diferente de " + result1562 + " <p.children().text()>")
chamada antiga: assertEquals(0, span.children().size())
nova chamada: assertEquals(0, span.children().size(), "Era esperado valores iguais, mas  0 é diferente de " + result1563 + " <span.children().size()>")
chamada antiga: assertEquals(1, span.childNodes().size())
nova chamada: assertEquals(1, span.childNodes().size(), "Era esperado valores iguais, mas  1 é diferente de " + result1564 + " <span.childNodes().size()>")
chamada antiga: assertEquals("Four", span.childNodes().get(0).outerHtml())
nova chamada: assertEquals("Four", span.childNodes().get(0).outerHtml(), "Era esperado valores iguais, mas  'Four' é diferente de " + result1565 + " <span.childNodes().get(0).outerHtml()>")
chamada antiga: assertEquals(0, foo.children().size())
nova chamada: assertEquals(0, foo.children().size(), "Era esperado valores iguais, mas  0 é diferente de " + result1566 + " <foo.children().size()>")
chamada antiga: assertEquals(0, foo.childNodes().size())
nova chamada: assertEquals(0, foo.childNodes().size(), "Era esperado valores iguais, mas  0 é diferente de " + result1567 + " <foo.childNodes().size()>")
chamada antiga: assertEquals(0, img.children().size())
nova chamada: assertEquals(0, img.children().size(), "Era esperado valores iguais, mas  0 é diferente de " + result1568 + " <img.children().size()>")
chamada antiga: assertEquals(0, img.childNodes().size())
nova chamada: assertEquals(0, img.childNodes().size(), "Era esperado valores iguais, mas  0 é diferente de " + result1569 + " <img.childNodes().size()>")
chamada antiga: assertEquals(2, els.size())
nova chamada: assertEquals(2, els.size(), "Era esperado valores iguais, mas  2 é diferente de " + result1570 + " <els.size()>")
chamada antiga: assertEquals(3, nodes.size())
nova chamada: assertEquals(3, nodes.size(), "Era esperado valores iguais, mas  3 é diferente de " + result1571 + " <nodes.size()>")
chamada antiga: assertEquals(2, els.size())
nova chamada: assertEquals(2, els.size(), "Era esperado valores iguais, mas  2 é diferente de " + result1572 + " <els.size()>")
chamada antiga: assertEquals(4, els2.size())
nova chamada: assertEquals(4, els2.size(), "Era esperado valores iguais, mas  4 é diferente de " + result1573 + " <els2.size()>")
chamada antiga: assertEquals("<p><a>One</a></p>\n" + "<p>P3</p>\n" + "<p><a>Two</a></p>\n" + "<p>P4</p>Three", div.html())
nova chamada: assertEquals("<p><a>One</a></p>\n" + "<p>P3</p>\n" + "<p><a>Two</a></p>\n" + "<p>P4</p>Three", div.html(), "Era esperado valores iguais, mas  'paOne/a/p\n' + 'pP3/p\n' + 'paTwo/a/p\n' + 'pP4/pThree' é diferente de " + result1574 + " <div.html()>")
chamada antiga: assertEquals("P3", els2.get(1).text())
nova chamada: assertEquals("P3", els2.get(1).text(), "Era esperado valores iguais, mas  'P3' é diferente de " + result1575 + " <els2.get(1).text()>")
chamada antiga: assertEquals("P4", els2.get(3).text())
nova chamada: assertEquals("P4", els2.get(3).text(), "Era esperado valores iguais, mas  'P4' é diferente de " + result1576 + " <els2.get(3).text()>")
chamada antiga: assertEquals(5, els3.size())
nova chamada: assertEquals(5, els3.size(), "Era esperado valores iguais, mas  5 é diferente de " + result1577 + " <els3.size()>")
chamada antiga: assertEquals("span", els3.get(2).tagName())
nova chamada: assertEquals("span", els3.get(2).tagName(), "Era esperado valores iguais, mas  'span' é diferente de " + result1578 + " <els3.get(2).tagName()>")
chamada antiga: assertEquals("Another", els3.get(2).text())
nova chamada: assertEquals("Another", els3.get(2).text(), "Era esperado valores iguais, mas  'Another' é diferente de " + result1579 + " <els3.get(2).text()>")
chamada antiga: assertEquals("<p><a>One</a></p>\n" + "<p>P3</p><span>Another</span>\n" + "<p><a>Two</a></p>\n" + "<p>P4</p>Three", div.html())
nova chamada: assertEquals("<p><a>One</a></p>\n" + "<p>P3</p><span>Another</span>\n" + "<p><a>Two</a></p>\n" + "<p>P4</p>Three", div.html(), "Era esperado valores iguais, mas  'paOne/a/p\n' + 'pP3/pspanAnother/span\n' + 'paTwo/a/p\n' + 'pP4/pThree' é diferente de " + result1580 + " <div.html()>")
chamada antiga: assertEquals("SomeText AnotherText", p.className())
nova chamada: assertEquals("SomeText AnotherText", p.className(), "Era esperado valores iguais, mas  'SomeText AnotherText' é diferente de " + result1581 + " <p.className()>")
chamada antiga: assertTrue(p.classNames().contains("SomeText"))
nova chamada: assertTrue(p.classNames().contains("SomeText"), "Era esperado verdadeiro, mas " + result1582 + " <p.classNames().contains('SomeText')> é falso")
chamada antiga: assertTrue(p.classNames().contains("AnotherText"))
nova chamada: assertTrue(p.classNames().contains("AnotherText"), "Era esperado verdadeiro, mas " + result1583 + " <p.classNames().contains('AnotherText')> é falso")
chamada antiga: assertTrue(p.hasClass("SomeText"))
nova chamada: assertTrue(p.hasClass("SomeText"), "Era esperado verdadeiro, mas " + result1584 + " <p.hasClass('SomeText')> é falso")
chamada antiga: assertTrue(p.hasClass("sometext"))
nova chamada: assertTrue(p.hasClass("sometext"), "Era esperado verdadeiro, mas " + result1585 + " <p.hasClass('sometext')> é falso")
chamada antiga: assertTrue(p.hasClass("AnotherText"))
nova chamada: assertTrue(p.hasClass("AnotherText"), "Era esperado verdadeiro, mas " + result1586 + " <p.hasClass('AnotherText')> é falso")
chamada antiga: assertTrue(p.hasClass("anothertext"))
nova chamada: assertTrue(p.hasClass("anothertext"), "Era esperado verdadeiro, mas " + result1587 + " <p.hasClass('anothertext')> é falso")
chamada antiga: assertEquals("One", p1.text())
nova chamada: assertEquals("One", p1.text(), "Era esperado valores iguais, mas  'One' é diferente de " + result1588 + " <p1.text()>")
chamada antiga: assertEquals(p1, p2)
nova chamada: assertEquals(p1, p2, "Era esperado valores iguais, mas  p1 é diferente de " + " p2")
chamada antiga: assertEquals(p1, p3)
nova chamada: assertEquals(p1, p3, "Era esperado valores iguais, mas  p1 é diferente de " + " p3")
chamada antiga: assertEquals(p1, p4)
nova chamada: assertEquals(p1, p4, "Era esperado valores iguais, mas  p1 é diferente de " + " p4")
chamada antiga: assertEquals(p1, p5)
nova chamada: assertEquals(p1, p5, "Era esperado valores iguais, mas  p1 é diferente de " + " p5")
chamada antiga: assertEquals(p1, p6)
nova chamada: assertEquals(p1, p6, "Era esperado valores iguais, mas  p1 é diferente de " + " p6")
chamada antiga: assertEquals(p1, p7)
nova chamada: assertEquals(p1, p7, "Era esperado valores iguais, mas  p1 é diferente de " + " p7")
chamada antiga: assertEquals(p1, p8)
nova chamada: assertEquals(p1, p8, "Era esperado valores iguais, mas  p1 é diferente de " + " p8")
chamada antiga: assertEquals(p1, p9)
nova chamada: assertEquals(p1, p9, "Era esperado valores iguais, mas  p1 é diferente de " + " p9")
chamada antiga: assertEquals(p1, p10)
nova chamada: assertEquals(p1, p10, "Era esperado valores iguais, mas  p1 é diferente de " + " p10")
chamada antiga: assertEquals(div, appendTo1)
nova chamada: assertEquals(div, appendTo1, "Era esperado valores iguais, mas  div é diferente de " + " appendTo1")
chamada antiga: assertEquals(p, appendTo2)
nova chamada: assertEquals(p, appendTo2, "Era esperado valores iguais, mas  p é diferente de " + " appendTo2")
chamada antiga: assertEquals("<div class=\"a\"></div>\n<div class=\"b\">\n <p>Two</p>\n</div>", parentDoc.body().html())
nova chamada: assertEquals("<div class=\"a\"></div>\n<div class=\"b\">\n <p>Two</p>\n</div>", parentDoc.body().html(), "Era esperado valores iguais, mas  'div class=\'a\'/div\ndiv class=\'b\'\n pTwo/p\n/div' é diferente de " + result1589 + " <parentDoc.body().html()>")
chamada antiga: assertEquals("", childDoc.body().html())
nova chamada: assertEquals("", childDoc.body().html(), "Era esperado valores iguais, mas  '' é diferente de " + result1590 + " <childDoc.body().html()>")
chamada antiga: assertEquals("You can't always get what you want.", p.text())
nova chamada: assertEquals("You can't always get what you want.", p.text(), "Era esperado valores iguais, mas  'You can't always get what you want.' é diferente de " + result1591 + " <p.text()>")
chamada antiga: assertEquals("<p>" + escaped + "</p>", p.outerHtml())
nova chamada: assertEquals("<p>" + escaped + "</p>", p.outerHtml(), "Era esperado valores iguais, mas  'p' + escaped + '/p' é diferente de " + result1592 + " <p.outerHtml()>")
chamada antiga: assertEquals(withNbsp, p.textNodes().get(0).getWholeText())
nova chamada: assertEquals(withNbsp, p.textNodes().get(0).getWholeText(), "Era esperado valores iguais, mas  withNbsp é diferente de " + result1593 + " <p.textNodes().get(0).getWholeText()>")
chamada antiga: assertEquals(160, withNbsp.charAt(29))
nova chamada: assertEquals(160, withNbsp.charAt(29), "Era esperado valores iguais, mas  160 é diferente de " + result1594 + " <withNbsp.charAt(29)>")
chamada antiga: assertEquals("p", matched.nodeName())
nova chamada: assertEquals("p", matched.nodeName(), "Era esperado valores iguais, mas  'p' é diferente de " + result1595 + " <matched.nodeName()>")
chamada antiga: assertTrue(matched.is(":containsOwn(get what you want)"))
nova chamada: assertTrue(matched.is(":containsOwn(get what you want)"), "Era esperado verdadeiro, mas " + result1596 + " <matched.is(':containsOwn(get what you want)')> é falso")
chamada antiga: assertEquals("Thisisonelongword", p.text())
nova chamada: assertEquals("Thisisonelongword", p.text(), "Era esperado valores iguais, mas  'Thisisonelongword' é diferente de " + result1597 + " <p.text()>")
chamada antiga: assertEquals("<p>" + escaped + "</p>", p.outerHtml())
nova chamada: assertEquals("<p>" + escaped + "</p>", p.outerHtml(), "Era esperado valores iguais, mas  'p' + escaped + '/p' é diferente de " + result1598 + " <p.outerHtml()>")
chamada antiga: assertEquals(decoded, p.textNodes().get(0).getWholeText())
nova chamada: assertEquals(decoded, p.textNodes().get(0).getWholeText(), "Era esperado valores iguais, mas  decoded é diferente de " + result1599 + " <p.textNodes().get(0).getWholeText()>")
chamada antiga: assertEquals("p", matched.nodeName())
nova chamada: assertEquals("p", matched.nodeName(), "Era esperado valores iguais, mas  'p' é diferente de " + result1600 + " <matched.nodeName()>")
chamada antiga: assertTrue(matched.is(":containsOwn(Thisisonelongword)"))
nova chamada: assertTrue(matched.is(":containsOwn(Thisisonelongword)"), "Era esperado verdadeiro, mas " + result1601 + " <matched.is(':containsOwn(Thisisonelongword)')> é falso")
chamada antiga: assertEquals("<body><div><p>XXX</p><p>after1</p><p>after2</p></div></body>", TextUtil.stripNewlines(body.outerHtml()))
nova chamada: assertEquals("<body><div><p>XXX</p><p>after1</p><p>after2</p></div></body>", TextUtil.stripNewlines(body.outerHtml()), "Era esperado valores iguais, mas  'bodydivpXXX/ppafter1/ppafter2/p/div/body' é diferente de " + result1602 + " <TextUtil.stripNewlines(body.outerHtml())>")
chamada antiga: assertEquals("<body><div><p>before1</p><p>before2</p><p>XXX</p></div></body>", TextUtil.stripNewlines(body.outerHtml()))
nova chamada: assertEquals("<body><div><p>before1</p><p>before2</p><p>XXX</p></div></body>", TextUtil.stripNewlines(body.outerHtml()), "Era esperado valores iguais, mas  'bodydivpbefore1/ppbefore2/ppXXX/p/div/body' é diferente de " + result1603 + " <TextUtil.stripNewlines(body.outerHtml())>")
chamada antiga: assertEquals(expectedText, originalNextElementSibling.text())
nova chamada: assertEquals(expectedText, originalNextElementSibling.text(), "Era esperado valores iguais, mas  expectedText é diferente de " + result1604 + " <originalNextElementSibling.text()>")
chamada antiga: assertEquals(expectedText, originalNextSibling.text())
nova chamada: assertEquals(expectedText, originalNextSibling.text(), "Era esperado valores iguais, mas  expectedText é diferente de " + result1605 + " <originalNextSibling.text()>")
chamada antiga: assertEquals(cloneExpect, cloneNextElementSibling.text())
nova chamada: assertEquals(cloneExpect, cloneNextElementSibling.text(), "Era esperado valores iguais, mas  cloneExpect é diferente de " + result1606 + " <cloneNextElementSibling.text()>")
chamada antiga: assertEquals(cloneExpect, cloneNextSibling.text())
nova chamada: assertEquals(cloneExpect, cloneNextSibling.text(), "Era esperado valores iguais, mas  cloneExpect é diferente de " + result1607 + " <cloneNextSibling.text()>")
chamada antiga: assertEquals("<img src=\"foo\" noshade nohref async autofocus=\"false\">", img.outerHtml())
nova chamada: assertEquals("<img src=\"foo\" noshade nohref async autofocus=\"false\">", img.outerHtml(), "Era esperado valores iguais, mas  'img src=\'foo\' noshade nohref async autofocus=\'false\'' é diferente de " + result1608 + " <img.outerHtml()>")
chamada antiga: assertEquals("One Two", doc.text())
nova chamada: assertEquals("One Two", doc.text(), "Era esperado valores iguais, mas  'One Two' é diferente de " + result1609 + " <doc.text()>")
chamada antiga: assertEquals("One Two Three Four", doc.text())
nova chamada: assertEquals("One Two Three Four", doc.text(), "Era esperado valores iguais, mas  'One Two Three Four' é diferente de " + result1610 + " <doc.text()>")
chamada antiga: assertNotNull(elementSiblings)
nova chamada: assertNotNull(elementSiblings, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(2, elementSiblings.size())
nova chamada: assertEquals(2, elementSiblings.size(), "Era esperado valores iguais, mas  2 é diferente de " + result1611 + " <elementSiblings.size()>")
chamada antiga: assertEquals("b", elementSiblings.get(0).id())
nova chamada: assertEquals("b", elementSiblings.get(0).id(), "Era esperado valores iguais, mas  'b' é diferente de " + result1612 + " <elementSiblings.get(0).id()>")
chamada antiga: assertEquals("c", elementSiblings.get(1).id())
nova chamada: assertEquals("c", elementSiblings.get(1).id(), "Era esperado valores iguais, mas  'c' é diferente de " + result1613 + " <elementSiblings.get(1).id()>")
chamada antiga: assertNotNull(elementSiblings1)
nova chamada: assertNotNull(elementSiblings1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(1, elementSiblings1.size())
nova chamada: assertEquals(1, elementSiblings1.size(), "Era esperado valores iguais, mas  1 é diferente de " + result1614 + " <elementSiblings1.size()>")
chamada antiga: assertEquals("c", elementSiblings1.get(0).id())
nova chamada: assertEquals("c", elementSiblings1.get(0).id(), "Era esperado valores iguais, mas  'c' é diferente de " + result1615 + " <elementSiblings1.get(0).id()>")
chamada antiga: assertEquals(0, elementSiblings2.size())
nova chamada: assertEquals(0, elementSiblings2.size(), "Era esperado valores iguais, mas  0 é diferente de " + result1616 + " <elementSiblings2.size()>")
chamada antiga: assertNotNull(elementSiblings3)
nova chamada: assertNotNull(elementSiblings3, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(1, elementSiblings3.size())
nova chamada: assertEquals(1, elementSiblings3.size(), "Era esperado valores iguais, mas  1 é diferente de " + result1617 + " <elementSiblings3.size()>")
chamada antiga: assertEquals("div", elementSiblings3.get(0).id())
nova chamada: assertEquals("div", elementSiblings3.get(0).id(), "Era esperado valores iguais, mas  'div' é diferente de " + result1618 + " <elementSiblings3.get(0).id()>")
chamada antiga: assertEquals(0, elementSiblings4.size())
nova chamada: assertEquals(0, elementSiblings4.size(), "Era esperado valores iguais, mas  0 é diferente de " + result1619 + " <elementSiblings4.size()>")
chamada antiga: assertNotNull(elementSiblings)
nova chamada: assertNotNull(elementSiblings, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(1, elementSiblings.size())
nova chamada: assertEquals(1, elementSiblings.size(), "Era esperado valores iguais, mas  1 é diferente de " + result1620 + " <elementSiblings.size()>")
chamada antiga: assertEquals("a", elementSiblings.get(0).id())
nova chamada: assertEquals("a", elementSiblings.get(0).id(), "Era esperado valores iguais, mas  'a' é diferente de " + result1621 + " <elementSiblings.get(0).id()>")
chamada antiga: assertEquals(0, elementSiblings1.size())
nova chamada: assertEquals(0, elementSiblings1.size(), "Era esperado valores iguais, mas  0 é diferente de " + result1622 + " <elementSiblings1.size()>")
chamada antiga: assertNotNull(elementSiblings2)
nova chamada: assertNotNull(elementSiblings2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(2, elementSiblings2.size())
nova chamada: assertEquals(2, elementSiblings2.size(), "Era esperado valores iguais, mas  2 é diferente de " + result1623 + " <elementSiblings2.size()>")
chamada antiga: assertEquals("b", elementSiblings2.get(0).id())
nova chamada: assertEquals("b", elementSiblings2.get(0).id(), "Era esperado valores iguais, mas  'b' é diferente de " + result1624 + " <elementSiblings2.get(0).id()>")
chamada antiga: assertEquals("a", elementSiblings2.get(1).id())
nova chamada: assertEquals("a", elementSiblings2.get(1).id(), "Era esperado valores iguais, mas  'a' é diferente de " + result1625 + " <elementSiblings2.get(1).id()>")
chamada antiga: assertEquals(0, elementSiblings3.size())
nova chamada: assertEquals(0, elementSiblings3.size(), "Era esperado valores iguais, mas  0 é diferente de " + result1626 + " <elementSiblings3.size()>")
chamada antiga: assertEquals("<a href=\"http://example.com\">Hello</a>", el.outerHtml())
nova chamada: assertEquals("<a href=\"http://example.com\">Hello</a>", el.outerHtml(), "Era esperado valores iguais, mas  'a href=\'http://example.com\'Hello/a' é diferente de " + result1627 + " <el.outerHtml()>")
chamada antiga: assertSame(el, el2)
nova chamada: assertSame(el, el2, "Era esperado objetos iguais, mas  el é diferente de " + " el2")
chamada antiga: assertEquals("<a>Hello</a>", el2.outerHtml())
nova chamada: assertEquals("<a>Hello</a>", el2.outerHtml(), "Era esperado valores iguais, mas  'aHello/a' é diferente de " + result1628 + " <el2.outerHtml()>")
chamada antiga: assertEquals("<a href=\"http://example.com\" id=\"1\">Hello</a>", el.outerHtml())
nova chamada: assertEquals("<a href=\"http://example.com\" id=\"1\">Hello</a>", el.outerHtml(), "Era esperado valores iguais, mas  'a href=\'http://example.com\' id=\'1\'Hello/a' é diferente de " + result1629 + " <el.outerHtml()>")
chamada antiga: assertSame(el, el2)
nova chamada: assertSame(el, el2, "Era esperado objetos iguais, mas  el é diferente de " + " el2")
chamada antiga: assertEquals("<a id=\"1\">Hello</a>", el2.outerHtml())
nova chamada: assertEquals("<a id=\"1\">Hello</a>", el2.outerHtml(), "Era esperado valores iguais, mas  'a id=\'1\'Hello/a' é diferente de " + result1630 + " <el2.outerHtml()>")
chamada antiga: assertEquals("<a><span>Hello</span></a>", el.outerHtml())
nova chamada: assertEquals("<a><span>Hello</span></a>", el.outerHtml(), "Era esperado valores iguais, mas  'aspanHello/span/a' é diferente de " + result1631 + " <el.outerHtml()>")
chamada antiga: assertNotNull(span)
nova chamada: assertNotNull(span, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertSame(el, el2)
nova chamada: assertSame(el, el2, "Era esperado objetos iguais, mas  el é diferente de " + " el2")
chamada antiga: assertSame(doc, div.root())
nova chamada: assertSame(doc, div.root(), "Era esperado objetos iguais, mas  doc é diferente de " + result1632 + " <div.root()>")
chamada antiga: assertSame(doc, div.ownerDocument())
nova chamada: assertSame(doc, div.ownerDocument(), "Era esperado objetos iguais, mas  doc é diferente de " + result1633 + " <div.ownerDocument()>")
chamada antiga: assertNotNull(div)
nova chamada: assertNotNull(div, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(7, counter.get())
nova chamada: assertEquals(7, counter.get(), "Era esperado valores iguais, mas  7 é diferente de " + result1634 + " <counter.get()>")
chamada antiga: assertEquals(div2, div)
nova chamada: assertEquals(div2, div, "Era esperado valores iguais, mas  div2 é diferente de " + " div")
chamada antiga: assertNotNull(div)
nova chamada: assertNotNull(div, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(7, counter.get())
nova chamada: assertEquals(7, counter.get(), "Era esperado valores iguais, mas  7 é diferente de " + result1635 + " <counter.get()>")
chamada antiga: assertEquals(div2, div)
nova chamada: assertEquals(div2, div, "Era esperado valores iguais, mas  div2 é diferente de " + " div")
chamada antiga: assertNotNull(div)
nova chamada: assertNotNull(div, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertSame(div, div2)
nova chamada: assertSame(div, div2, "Era esperado objetos iguais, mas  div é diferente de " + " div2")
chamada antiga: assertEquals("<div><p>One</p><p>Three</p></div>", TextUtil.stripNewlines(doc.body().html()))
nova chamada: assertEquals("<div><p>One</p><p>Three</p></div>", TextUtil.stripNewlines(doc.body().html()), "Era esperado valores iguais, mas  'divpOne/ppThree/p/div' é diferente de " + result1636 + " <TextUtil.stripNewlines(doc.body().html())>")
chamada antiga: assertEquals("<div><p>Hello</p></div><div>There Now<p>Another</p></div>", TextUtil.stripNewlines(doc.body().html()))
nova chamada: assertEquals("<div><p>Hello</p></div><div>There Now<p>Another</p></div>", TextUtil.stripNewlines(doc.body().html()), "Era esperado valores iguais, mas  'divpHello/p/divdivThere NowpAnother/p/div' é diferente de " + result1637 + " <TextUtil.stripNewlines(doc.body().html())>")
chamada antiga: assertEquals(12, p.text().length())
nova chamada: assertEquals(12, p.text().length(), "Era esperado valores iguais, mas  12 é diferente de " + result1638 + " <p.text().length()>")
chamada antiga: assertEquals(text, p.text())
nova chamada: assertEquals(text, p.text(), "Era esperado valores iguais, mas  text é diferente de " + result1639 + " <p.text()>")
chamada antiga: assertEquals(7, d.text().length())
nova chamada: assertEquals(7, d.text().length(), "Era esperado valores iguais, mas  7 é diferente de " + result1640 + " <d.text().length()>")
chamada antiga: assertEquals("One\u200DTwo", d.text())
nova chamada: assertEquals("One\u200DTwo", d.text(), "Era esperado valores iguais, mas  'One\u200DTwo' é diferente de " + result1641 + " <d.text()>")
chamada antiga: assertTrue(found.hasSameValue(d))
nova chamada: assertTrue(found.hasSameValue(d), "Era esperado verdadeiro, mas " + result1642 + " <found.hasSameValue(d)> é falso")
chamada antiga: assertEquals("<div><p>One</p><p>Two</p></div><p>Three</p><p>Four</p>", TextUtil.stripNewlines(doc.body().html()))
nova chamada: assertEquals("<div><p>One</p><p>Two</p></div><p>Three</p><p>Four</p>", TextUtil.stripNewlines(doc.body().html()), "Era esperado valores iguais, mas  'divpOne/ppTwo/p/divpThree/ppFour/p' é diferente de " + result1643 + " <TextUtil.stripNewlines(doc.body().html())>")
chamada antiga: assertEquals("<p>Three</p><p>Four</p><div><p>One</p><p>Two</p></div>", TextUtil.stripNewlines(doc.body().html()))
nova chamada: assertEquals("<p>Three</p><p>Four</p><div><p>One</p><p>Two</p></div>", TextUtil.stripNewlines(doc.body().html()), "Era esperado valores iguais, mas  'pThree/ppFour/pdivpOne/ppTwo/p/div' é diferente de " + result1644 + " <TextUtil.stripNewlines(doc.body().html())>")
chamada antiga: assertEquals("<p>Four</p><p>Three</p><p>Three</p><p>Four</p><div><p>One</p><p>Two</p></div>", TextUtil.stripNewlines(doc.body().html()))
nova chamada: assertEquals("<p>Four</p><p>Three</p><p>Three</p><p>Four</p><div><p>One</p><p>Two</p></div>", TextUtil.stripNewlines(doc.body().html()), "Era esperado valores iguais, mas  'pFour/ppThree/ppThree/ppFour/pdivpOne/ppTwo/p/div' é diferente de " + result1645 + " <TextUtil.stripNewlines(doc.body().html())>")
chamada antiga: assertEquals("<p>Four</p><p>Three</p><p>Four</p><div><p>One</p><p>Two</p></div><p>Three</p>", TextUtil.stripNewlines(doc.body().html()))
nova chamada: assertEquals("<p>Four</p><p>Three</p><p>Four</p><div><p>One</p><p>Two</p></div><p>Three</p>", TextUtil.stripNewlines(doc.body().html()), "Era esperado valores iguais, mas  'pFour/ppThree/ppFour/pdivpOne/ppTwo/p/divpThree/p' é diferente de " + result1646 + " <TextUtil.stripNewlines(doc.body().html())>")
chamada antiga: assertEquals("<div><p>One</p><p>Two</p></div>", TextUtil.stripNewlines(div.outerHtml()))
nova chamada: assertEquals("<div><p>One</p><p>Two</p></div>", TextUtil.stripNewlines(div.outerHtml()), "Era esperado valores iguais, mas  'divpOne/ppTwo/p/div' é diferente de " + result1647 + " <TextUtil.stripNewlines(div.outerHtml())>")
chamada antiga: assertEquals("<nav><p>One</p><p>Three</p></nav>", TextUtil.stripNewlines(wrap.outerHtml()))
nova chamada: assertEquals("<nav><p>One</p><p>Three</p></nav>", TextUtil.stripNewlines(wrap.outerHtml()), "Era esperado valores iguais, mas  'navpOne/ppThree/p/nav' é diferente de " + result1648 + " <TextUtil.stripNewlines(wrap.outerHtml())>")
chamada antiga: assertEquals("<div><p>Two</p><nav><p>One</p><p>Three</p></nav></div>", TextUtil.stripNewlines(div.outerHtml()))
nova chamada: assertEquals("<div><p>Two</p><nav><p>One</p><p>Three</p></nav></div>", TextUtil.stripNewlines(div.outerHtml()), "Era esperado valores iguais, mas  'divpTwo/pnavpOne/ppThree/p/nav/div' é diferente de " + result1649 + " <TextUtil.stripNewlines(div.outerHtml())>")
chamada antiga: assertEquals("<div><p>Two</p><nav><p>One</p><p>Three</p></nav></div>", TextUtil.stripNewlines(div.outerHtml()))
nova chamada: assertEquals("<div><p>Two</p><nav><p>One</p><p>Three</p></nav></div>", TextUtil.stripNewlines(div.outerHtml()), "Era esperado valores iguais, mas  'divpTwo/pnavpOne/ppThree/p/nav/div' é diferente de " + result1650 + " <TextUtil.stripNewlines(div.outerHtml())>")
chamada antiga: assertEquals(2, row.childrenSize())
nova chamada: assertEquals(2, row.childrenSize(), "Era esperado valores iguais, mas  2 é diferente de " + result1651 + " <row.childrenSize()>")
chamada antiga: assertEquals(5, row.childNodeSize())
nova chamada: assertEquals(5, row.childNodeSize(), "Era esperado valores iguais, mas  5 é diferente de " + result1652 + " <row.childNodeSize()>")
chamada antiga: assertTrue(doc.selectFirst("div").isBlock())
nova chamada: assertTrue(doc.selectFirst("div").isBlock(), "Era esperado verdadeiro, mas " + result1653 + " <doc.selectFirst('div').isBlock()> é falso")
chamada antiga: assertTrue(doc.selectFirst("p").isBlock())
nova chamada: assertTrue(doc.selectFirst("p").isBlock(), "Era esperado verdadeiro, mas " + result1654 + " <doc.selectFirst('p').isBlock()> é falso")
chamada antiga: assertNotNull(el)
nova chamada: assertNotNull(el, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(xEl)
nova chamada: assertNotNull(xEl, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("<script>var foo = 4 < 2;\nvar bar > 1 && 2;</script>", el.outerHtml())
nova chamada: assertEquals("<script>var foo = 4 < 2;\nvar bar > 1 && 2;</script>", el.outerHtml(), "Era esperado valores iguais, mas  'scriptvar foo = 4  2;\nvar bar  1 && 2;/script' é diferente de " + result1655 + " <el.outerHtml()>")
chamada antiga: assertEquals("<script>" + escaped + "</script>", xEl.outerHtml())
nova chamada: assertEquals("<script>" + escaped + "</script>", xEl.outerHtml(), "Era esperado valores iguais, mas  'script' + escaped + '/script' é diferente de " + result1656 + " <xEl.outerHtml()>")
chamada antiga: assertEquals("<p></p>", pH)
nova chamada: assertEquals("<p></p>", pH, "Era esperado valores iguais, mas  'p/p' é diferente de " + " pH")
chamada antiga: assertEquals("<i></i>", iH)
nova chamada: assertEquals("<i></i>", iH, "Era esperado valores iguais, mas  'i/i' é diferente de " + " iH")
chamada antiga: assertEquals(p.outerHtml(), p.toString())
nova chamada: assertEquals(p.outerHtml(), p.toString(), "Era esperado valores iguais, mas " + result1657 + " <p.outerHtml()> é diferente de " + result1658 + " <p.toString()>")
chamada antiga: assertEquals(i.outerHtml(), i.toString())
nova chamada: assertEquals(i.outerHtml(), i.toString(), "Era esperado valores iguais, mas " + result1659 + " <i.outerHtml()> é diferente de " + result1660 + " <i.toString()>")
chamada antiga: assertNotNull(style)
nova chamada: assertNotNull(style, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(styleContents, style.html())
nova chamada: assertEquals(styleContents, style.html(), "Era esperado valores iguais, mas  styleContents é diferente de " + result1661 + " <style.html()>")
chamada antiga: assertEquals(styleContents, style.html())
nova chamada: assertEquals(styleContents, style.html(), "Era esperado valores iguais, mas  styleContents é diferente de " + result1662 + " <style.html()>")
chamada antiga: assertEquals("", style.text())
nova chamada: assertEquals("", style.text(), "Era esperado valores iguais, mas  '' é diferente de " + result1663 + " <style.text()>")
chamada antiga: assertEquals("", style.text())
nova chamada: assertEquals("", style.text(), "Era esperado valores iguais, mas  '' é diferente de " + result1664 + " <style.text()>")
chamada antiga: assertEquals(styleContents, style.html())
nova chamada: assertEquals(styleContents, style.html(), "Era esperado valores iguais, mas  styleContents é diferente de " + result1665 + " <style.html()>")
chamada antiga: assertEquals("<div></div>\n<div>\n <p>One</p>\n <p>Two</p>\n <p>Three</p>\n</div>", doc.body().html())
nova chamada: assertEquals("<div></div>\n<div>\n <p>One</p>\n <p>Two</p>\n <p>Three</p>\n</div>", doc.body().html(), "Era esperado valores iguais, mas  'div/div\ndiv\n pOne/p\n pTwo/p\n pThree/p\n/div' é diferente de " + result1666 + " <doc.body().html()>")
chamada antiga: assertEquals("<div></div>\n<div></div>\n<p>One</p>\n<p>Two</p>\n<p>Three</p>", doc.body().html())
nova chamada: assertEquals("<div></div>\n<div></div>\n<p>One</p>\n<p>Two</p>\n<p>Three</p>", doc.body().html(), "Era esperado valores iguais, mas  'div/div\ndiv/div\npOne/p\npTwo/p\npThree/p' é diferente de " + result1667 + " <doc.body().html()>")
chamada antiga: assertEquals("<div></div>\n<div>\n <p>Four</p>\n <p>One</p>\n <p>Two</p>\n <p>Three</p>\n</div>", doc.body().html())
nova chamada: assertEquals("<div></div>\n<div>\n <p>Four</p>\n <p>One</p>\n <p>Two</p>\n <p>Three</p>\n</div>", doc.body().html(), "Era esperado valores iguais, mas  'div/div\ndiv\n pFour/p\n pOne/p\n pTwo/p\n pThree/p\n/div' é diferente de " + result1668 + " <doc.body().html()>")
chamada antiga: assertEquals("<div></div>\n<div>\n <p>One</p>\n <p>Two</p>\n <p>Three</p>\n <p>Four</p>\n</div>", doc.body().html())
nova chamada: assertEquals("<div></div>\n<div>\n <p>One</p>\n <p>Two</p>\n <p>Three</p>\n <p>Four</p>\n</div>", doc.body().html(), "Era esperado valores iguais, mas  'div/div\ndiv\n pOne/p\n pTwo/p\n pThree/p\n pFour/p\n/div' é diferente de " + result1669 + " <doc.body().html()>")
chamada antiga: assertNotNull(outer)
nova chamada: assertNotNull(outer, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("<div></div>\n<div>\n <p>Four</p>\n</div>\n<p>One</p>\n<p>Two</p>\n<p>Three</p>", doc.body().html())
nova chamada: assertEquals("<div></div>\n<div>\n <p>Four</p>\n</div>\n<p>One</p>\n<p>Two</p>\n<p>Three</p>", doc.body().html(), "Era esperado valores iguais, mas  'div/div\ndiv\n pFour/p\n/div\npOne/p\npTwo/p\npThree/p' é diferente de " + result1670 + " <doc.body().html()>")
chamada antiga: assertEquals("", div.attr("href"))
nova chamada: assertEquals("", div.attr("href"), "Era esperado valores iguais, mas  '' é diferente de " + result1671 + " <div.attr('href')>")
chamada antiga: assertEquals(1, hrefs.size())
nova chamada: assertEquals(1, hrefs.size(), "Era esperado valores iguais, mas  1 é diferente de " + result1672 + " <hrefs.size()>")
chamada antiga: assertTrue(a.hasAttributes())
nova chamada: assertTrue(a.hasAttributes(), "Era esperado verdadeiro, mas " + result1673 + " <a.hasAttributes()> é falso")
chamada antiga: assertEquals(0, p.childNodeSize())
nova chamada: assertEquals(0, p.childNodeSize(), "Era esperado valores iguais, mas  0 é diferente de " + result1674 + " <p.childNodeSize()>")
chamada antiga: assertEquals(0, p.childrenSize())
nova chamada: assertEquals(0, p.childrenSize(), "Era esperado valores iguais, mas  0 é diferente de " + result1675 + " <p.childrenSize()>")
chamada antiga: assertEquals(0, childNodes.size())
nova chamada: assertEquals(0, childNodes.size(), "Era esperado valores iguais, mas  0 é diferente de " + result1676 + " <childNodes.size()>")
chamada antiga: assertEquals(0, children.size())
nova chamada: assertEquals(0, children.size(), "Era esperado valores iguais, mas  0 é diferente de " + result1677 + " <children.size()>")
chamada antiga: assertEquals(0, els.size())
nova chamada: assertEquals(0, els.size(), "Era esperado valores iguais, mas  0 é diferente de " + result1678 + " <els.size()>")
chamada antiga: assertEquals(1, els.size())
nova chamada: assertEquals(1, els.size(), "Era esperado valores iguais, mas  1 é diferente de " + result1679 + " <els.size()>")
chamada antiga: assertNotNull(p)
nova chamada: assertNotNull(p, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(0, p.attributesSize())
nova chamada: assertEquals(0, p.attributesSize(), "Era esperado valores iguais, mas  0 é diferente de " + result1680 + " <p.attributesSize()>")
chamada antiga: assertEquals(1, p.attributesSize())
nova chamada: assertEquals(1, p.attributesSize(), "Era esperado valores iguais, mas  1 é diferente de " + result1681 + " <p.attributesSize()>")
chamada antiga: assertTrue(p.hasAttributes())
nova chamada: assertTrue(p.hasAttributes(), "Era esperado verdadeiro, mas " + result1682 + " <p.hasAttributes()> é falso")
chamada antiga: assertEquals(0, p.attributesSize())
nova chamada: assertEquals(0, p.attributesSize(), "Era esperado valores iguais, mas  0 é diferente de " + result1683 + " <p.attributesSize()>")
chamada antiga: assertNotNull(div)
nova chamada: assertNotNull(div, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(text)
nova chamada: assertNotNull(text, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(docClone)
nova chamada: assertNotNull(docClone, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotSame(doc, docClone)
nova chamada: assertNotSame(doc, docClone, "Era esperado objetos diferentes, mas  doc é igual a " + " docClone")
chamada antiga: assertSame(docClone, divClone.childNode(0).ownerDocument())
nova chamada: assertSame(docClone, divClone.childNode(0).ownerDocument(), "Era esperado objetos iguais, mas  docClone é diferente de " + result1684 + " <divClone.childNode(0).ownerDocument()>")
chamada antiga: assertTrue(doc.outputSettings().prettyPrint())
nova chamada: assertTrue(doc.outputSettings().prettyPrint(), "Era esperado verdadeiro, mas " + result1685 + " <doc.outputSettings().prettyPrint()> é falso")
chamada antiga: assertEquals(1, docClone.children().size())
nova chamada: assertEquals(1, docClone.children().size(), "Era esperado valores iguais, mas  1 é diferente de " + result1686 + " <docClone.children().size()>")
chamada antiga: assertEquals(divClone, docClone.child(0))
nova chamada: assertEquals(divClone, docClone.child(0), "Era esperado valores iguais, mas  divClone é diferente de " + result1687 + " <docClone.child(0)>")
chamada antiga: assertEquals(html, html2)
nova chamada: assertEquals(html, html2, "Era esperado valores iguais, mas  html é diferente de " + " html2")
chamada antiga: assertEquals(html, html2)
nova chamada: assertEquals(html, html2, "Era esperado valores iguais, mas  html é diferente de " + " html2")
chamada antiga: assertNotNull(p)
nova chamada: assertNotNull(p, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(html, p.outerHtml())
nova chamada: assertEquals(html, p.outerHtml(), "Era esperado valores iguais, mas  html é diferente de " + result1688 + " <p.outerHtml()>")
chamada antiga: assertEquals("Hello World", p.text())
nova chamada: assertEquals("Hello World", p.text(), "Era esperado valores iguais, mas  'Hello World' é diferente de " + result1689 + " <p.text()>")
chamada antiga: assertEquals("Hello\nWorld", p.wholeText())
nova chamada: assertEquals("Hello\nWorld", p.wholeText(), "Era esperado valores iguais, mas  'Hello\nWorld' é diferente de " + result1690 + " <p.wholeText()>")
chamada antiga: assertNotNull(div)
nova chamada: assertNotNull(div, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(expect, actual)
nova chamada: assertEquals(expect, actual, "Era esperado valores iguais, mas  expect é diferente de " + " actual")
chamada antiga: assertEquals(expectText, div.wholeText())
nova chamada: assertEquals(expectText, div.wholeText(), "Era esperado valores iguais, mas  expectText é diferente de " + result1691 + " <div.wholeText()>")
chamada antiga: assertEquals(expectOwn, div.child(0).wholeOwnText())
nova chamada: assertEquals(expectOwn, div.child(0).wholeOwnText(), "Era esperado valores iguais, mas  expectOwn é diferente de " + result1692 + " <div.child(0).wholeOwnText()>")
chamada antiga: assertEquals("Three", span.text())
nova chamada: assertEquals("Three", span.text(), "Era esperado valores iguais, mas  'Three' é diferente de " + result1693 + " <span.text()>")
chamada antiga: assertNull(doc.selectFirst("div"))
nova chamada: assertNull(doc.selectFirst("div"), "Era esperado nulo, mas " + result1694 + " <doc.selectFirst('div')> não é nulo")
chamada antiga: assertTrue(threw)
nova chamada: assertTrue(threw, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(threw)
nova chamada: assertTrue(threw, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(threw)
nova chamada: assertTrue(threw, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(text, body.text())
nova chamada: assertEquals(text, body.text(), "Era esperado valores iguais, mas  text é diferente de " + result1695 + " <body.text()>")
chamada antiga: assertEquals(text, body.text())
nova chamada: assertEquals(text, body.text(), "Era esperado valores iguais, mas  text é diferente de " + result1696 + " <body.text()>")
chamada antiga: assertEquals("<p><span>One</span> <span>Two</span> <span>Three</span></p>", body.html())
nova chamada: assertEquals("<p><span>One</span> <span>Two</span> <span>Three</span></p>", body.html(), "Era esperado valores iguais, mas  'pspanOne/span spanTwo/span spanThree/span/p' é diferente de " + result1697 + " <body.html()>")
chamada antiga: assertEquals("<!--\nlicense\n-->\n<!doctype html>\n<html>\n <head></head>\n <body></body>\n</html>", doc1.html())
nova chamada: assertEquals("<!--\nlicense\n-->\n<!doctype html>\n<html>\n <head></head>\n <body></body>\n</html>", doc1.html(), "Era esperado valores iguais, mas  '!--\nlicense\n--\n!doctype html\nhtml\n head/head\n body/body\n/html' é diferente de " + result1698 + " <doc1.html()>")
chamada antiga: assertEquals("<!--\nlicense\n--><!doctype html>\n<html><head></head><body></body></html>", doc1.html())
nova chamada: assertEquals("<!--\nlicense\n--><!doctype html>\n<html><head></head><body></body></html>", doc1.html(), "Era esperado valores iguais, mas  '!--\nlicense\n--!doctype html\nhtmlhead/headbody/body/html' é diferente de " + result1699 + " <doc1.html()>")
chamada antiga: assertEquals("<!doctype html>\n<html>\n <head></head>\n <body></body>\n</html>", doc2.html())
nova chamada: assertEquals("<!doctype html>\n<html>\n <head></head>\n <body></body>\n</html>", doc2.html(), "Era esperado valores iguais, mas  '!doctype html\nhtml\n head/head\n body/body\n/html' é diferente de " + result1700 + " <doc2.html()>")
chamada antiga: assertEquals("<!doctype html>\n<html>\n <head></head>\n <body></body>\n</html>", doc3.html())
nova chamada: assertEquals("<!doctype html>\n<html>\n <head></head>\n <body></body>\n</html>", doc3.html(), "Era esperado valores iguais, mas  '!doctype html\nhtml\n head/head\n body/body\n/html' é diferente de " + result1701 + " <doc3.html()>")
chamada antiga: assertEquals("<!doctype html>\n<html>\n <head></head>\n <body></body>\n</html>", doc4.html())
nova chamada: assertEquals("<!doctype html>\n<html>\n <head></head>\n <body></body>\n</html>", doc4.html(), "Era esperado valores iguais, mas  '!doctype html\nhtml\n head/head\n body/body\n/html' é diferente de " + result1702 + " <doc4.html()>")
chamada antiga: assertEquals("<!--\n comment \n -->\n<!doctype html>\n<html>\n <head></head>\n <body></body>\n</html>", doc5.html())
nova chamada: assertEquals("<!--\n comment \n -->\n<!doctype html>\n<html>\n <head></head>\n <body></body>\n</html>", doc5.html(), "Era esperado valores iguais, mas  '!--\n comment \n --\n!doctype html\nhtml\n head/head\n body/body\n/html' é diferente de " + result1703 + " <doc5.html()>")
chamada antiga: assertEquals("<!--\n comment \n -->\n<!doctype html>\n<html>\n <head></head>\n <body></body>\n</html>", doc6.html())
nova chamada: assertEquals("<!--\n comment \n -->\n<!doctype html>\n<html>\n <head></head>\n <body></body>\n</html>", doc6.html(), "Era esperado valores iguais, mas  '!--\n comment \n --\n!doctype html\nhtml\n head/head\n body/body\n/html' é diferente de " + result1704 + " <doc6.html()>")
chamada antiga: assertEquals("<div>\n {{ msg }}\n</div>\n<div>\n {{ msg }}\n</div>", doc.body().html())
nova chamada: assertEquals("<div>\n {{ msg }}\n</div>\n<div>\n {{ msg }}\n</div>", doc.body().html(), "Era esperado valores iguais, mas  'div\n {{ msg }}\n/div\ndiv\n {{ msg }}\n/div' é diferente de " + result1705 + " <doc.body().html()>")
chamada antiga: assertEquals("<p>This <span>is </span>fine.</p>", doc.body().html())
nova chamada: assertEquals("<p>This <span>is </span>fine.</p>", doc.body().html(), "Era esperado valores iguais, mas  'pThis spanis /spanfine./p' é diferente de " + result1706 + " <doc.body().html()>")
chamada antiga: assertEquals("<div>\n" + " <p>One Two</p> <a> Hello </a>\n" + " <p>Some text</p>\n" + "</div>", doc.body().html())
nova chamada: assertEquals("<div>\n" + " <p>One Two</p> <a> Hello </a>\n" + " <p>Some text</p>\n" + "</div>", doc.body().html(), "Era esperado valores iguais, mas  'div\n' + ' pOne Two/p a Hello /a\n' + ' pSome text/p\n' + '/div' é diferente de " + result1707 + " <doc.body().html()>")
chamada antiga: assertEquals("<div><a>Text</a>\n</div>", doc.body().html())
nova chamada: assertEquals("<div><a>Text</a>\n</div>", doc.body().html(), "Era esperado valores iguais, mas  'divaText/a\n/div' é diferente de " + result1708 + " <doc.body().html()>")
chamada antiga: assertTrue(one.isBlank())
nova chamada: assertTrue(one.isBlank(), "Era esperado verdadeiro, mas " + result1709 + " <one.isBlank()> é falso")
chamada antiga: assertTrue(two.isBlank())
nova chamada: assertTrue(two.isBlank(), "Era esperado verdadeiro, mas " + result1710 + " <two.isBlank()> é falso")
chamada antiga: assertTrue(three.isBlank())
nova chamada: assertTrue(three.isBlank(), "Era esperado verdadeiro, mas " + result1711 + " <three.isBlank()> é falso")
chamada antiga: assertEquals("two &", span.text())
nova chamada: assertEquals("two &", span.text(), "Era esperado valores iguais, mas  'two &' é diferente de " + result1712 + " <span.text()>")
chamada antiga: assertEquals("two &", spanText.text())
nova chamada: assertEquals("two &", spanText.text(), "Era esperado valores iguais, mas  'two &' é diferente de " + result1713 + " <spanText.text()>")
chamada antiga: assertEquals(" three &", tn.text())
nova chamada: assertEquals(" three &", tn.text(), "Era esperado valores iguais, mas  ' three &' é diferente de " + result1714 + " <tn.text()>")
chamada antiga: assertEquals("One <span>two &amp;</span> POW!", TextUtil.stripNewlines(p.html()))
nova chamada: assertEquals("One <span>two &amp;</span> POW!", TextUtil.stripNewlines(p.html()), "Era esperado valores iguais, mas  'One spantwo &amp;/span POW!' é diferente de " + result1715 + " <TextUtil.stripNewlines(p.html())>")
chamada antiga: assertEquals("kablam &", tn.text())
nova chamada: assertEquals("kablam &", tn.text(), "Era esperado valores iguais, mas  'kablam &' é diferente de " + result1716 + " <tn.text()>")
chamada antiga: assertEquals("One <span>two &amp;</span>kablam &amp;", TextUtil.stripNewlines(p.html()))
nova chamada: assertEquals("One <span>two &amp;</span>kablam &amp;", TextUtil.stripNewlines(p.html()), "Era esperado valores iguais, mas  'One spantwo &amp;/spankablam &amp;' é diferente de " + result1717 + " <TextUtil.stripNewlines(p.html())>")
chamada antiga: assertEquals("Hello ", tn.getWholeText())
nova chamada: assertEquals("Hello ", tn.getWholeText(), "Era esperado valores iguais, mas  'Hello ' é diferente de " + result1718 + " <tn.getWholeText()>")
chamada antiga: assertEquals("there", tail.getWholeText())
nova chamada: assertEquals("there", tail.getWholeText(), "Era esperado valores iguais, mas  'there' é diferente de " + result1719 + " <tail.getWholeText()>")
chamada antiga: assertEquals("Hello there!", div.text())
nova chamada: assertEquals("Hello there!", div.text(), "Era esperado valores iguais, mas  'Hello there!' é diferente de " + result1720 + " <div.text()>")
chamada antiga: assertSame(tn.parent(), tail.parent())
nova chamada: assertSame(tn.parent(), tail.parent(), "Era esperado objetos iguais, mas " + result1721 + " <tn.parent()> é diferente de " + result1722 + " <tail.parent()>")
chamada antiga: assertEquals("Hello <b>there</b>", TextUtil.stripNewlines(div.html()))
nova chamada: assertEquals("Hello <b>there</b>", TextUtil.stripNewlines(div.html()), "Era esperado valores iguais, mas  'Hello bthere/b' é diferente de " + result1723 + " <TextUtil.stripNewlines(div.html())>")
chamada antiga: assertEquals(new String(Character.toChars(135361)), t.outerHtml().trim())
nova chamada: assertEquals(new String(Character.toChars(135361)), t.outerHtml().trim(), "Era esperado valores iguais, mas  new String(Character.toChars(135361)) é diferente de " + result1724 + " <t.outerHtml().trim()>")
chamada antiga: assertEquals(0, nodes.size())
nova chamada: assertEquals(0, nodes.size(), "Era esperado valores iguais, mas  0 é diferente de " + result1725 + " <nodes.size()>")
chamada antiga: assertEquals(whole, tn.getWholeText())
nova chamada: assertEquals(whole, tn.getWholeText(), "Era esperado valores iguais, mas  whole é diferente de " + result1726 + " <tn.getWholeText()>")
chamada antiga: assertEquals(norm, tn.text())
nova chamada: assertEquals(norm, tn.text(), "Era esperado valores iguais, mas  norm é diferente de " + result1727 + " <tn.text()>")
chamada antiga: assertEquals(norm, tn.outerHtml())
nova chamada: assertEquals(norm, tn.outerHtml(), "Era esperado valores iguais, mas  norm é diferente de " + result1728 + " <tn.outerHtml()>")
chamada antiga: assertEquals(norm, tn.toString())
nova chamada: assertEquals(norm, tn.toString(), "Era esperado valores iguais, mas  norm é diferente de " + result1729 + " <tn.toString()>")
chamada antiga: assertEquals(whole, tn.getWholeText())
nova chamada: assertEquals(whole, tn.getWholeText(), "Era esperado valores iguais, mas  whole é diferente de " + result1730 + " <tn.getWholeText()>")
chamada antiga: assertEquals(norm, tn.text())
nova chamada: assertEquals(norm, tn.text(), "Era esperado valores iguais, mas  norm é diferente de " + result1731 + " <tn.text()>")
chamada antiga: assertEquals(norm, tn.outerHtml())
nova chamada: assertEquals(norm, tn.outerHtml(), "Era esperado valores iguais, mas  norm é diferente de " + result1732 + " <tn.outerHtml()>")
chamada antiga: assertEquals(norm, tn.toString())
nova chamada: assertEquals(norm, tn.toString(), "Era esperado valores iguais, mas  norm é diferente de " + result1733 + " <tn.toString()>")
chamada antiga: assertEquals("<p>" + norm + "</p>", el.outerHtml())
nova chamada: assertEquals("<p>" + norm + "</p>", el.outerHtml(), "Era esperado valores iguais, mas  'p' + norm + '/p' é diferente de " + result1734 + " <el.outerHtml()>")
chamada antiga: assertEquals(norm, el.html())
nova chamada: assertEquals(norm, el.html(), "Era esperado valores iguais, mas  norm é diferente de " + result1735 + " <el.html()>")
chamada antiga: assertEquals(whole, el.wholeText())
nova chamada: assertEquals(whole, el.wholeText(), "Era esperado valores iguais, mas  whole é diferente de " + result1736 + " <el.wholeText()>")
chamada antiga: assertNotSame(x, y)
nova chamada: assertNotSame(x, y, "Era esperado objetos diferentes, mas  x é igual a " + " y")
chamada antiga: assertEquals(x.outerHtml(), y.outerHtml())
nova chamada: assertEquals(x.outerHtml(), y.outerHtml(), "Era esperado valores iguais, mas " + result1737 + " <x.outerHtml()> é diferente de " + result1738 + " <y.outerHtml()>")
chamada antiga: assertNotEquals(x.outerHtml(), y.outerHtml())
nova chamada: assertNotEquals(x.outerHtml(), y.outerHtml(), "Era esperado valores diferentes, mas " + result1739 + " <x.outerHtml()> é igual a " + result1740 + " <y.outerHtml()>")
chamada antiga: assertEquals("zzz", x.text())
nova chamada: assertEquals("zzz", x.text(), "Era esperado valores iguais, mas  'zzz' é diferente de " + result1741 + " <x.text()>")
chamada antiga: assertEquals("zzz", x.text())
nova chamada: assertEquals("zzz", x.text(), "Era esperado valores iguais, mas  'zzz' é diferente de " + result1742 + " <x.text()>")
chamada antiga: assertEquals("xxx", y.text())
nova chamada: assertEquals("xxx", y.text(), "Era esperado valores iguais, mas  'xxx' é diferente de " + result1743 + " <y.text()>")
chamada antiga: assertEquals("zzz", x.text())
nova chamada: assertEquals("zzz", x.text(), "Era esperado valores iguais, mas  'zzz' é diferente de " + result1744 + " <x.text()>")
chamada antiga: assertEquals("xxx", y.text())
nova chamada: assertEquals("xxx", y.text(), "Era esperado valores iguais, mas  'xxx' é diferente de " + result1745 + " <y.text()>")
chamada antiga: assertTrue(foundFirst)
nova chamada: assertTrue(foundFirst, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(rows, wrapper.childNodes.size())
nova chamada: assertEquals(rows, wrapper.childNodes.size(), "Era esperado valores iguais, mas  rows é diferente de " + result1746 + " <wrapper.childNodes.size()>")
chamada antiga: assertEquals(rows, childNodes.size())
nova chamada: assertEquals(rows, childNodes.size(), "Era esperado valores iguais, mas  rows é diferente de " + result1747 + " <childNodes.size()>")
chamada antiga: assertEquals(0, doc.body().childNodes().size())
nova chamada: assertEquals(0, doc.body().childNodes().size(), "Era esperado valores iguais, mas  0 é diferente de " + result1748 + " <doc.body().childNodes().size()>")
chamada antiga: assertEquals(wrapper, wrapperAcutal)
nova chamada: assertEquals(wrapper, wrapperAcutal, "Era esperado valores iguais, mas  wrapper é diferente de " + " wrapperAcutal")
chamada antiga: assertEquals("El-1", wrapperAcutal.children().get(0).text())
nova chamada: assertEquals("El-1", wrapperAcutal.children().get(0).text(), "Era esperado valores iguais, mas  'El-1' é diferente de " + result1749 + " <wrapperAcutal.children().get(0).text()>")
chamada antiga: assertEquals("El-" + rows, wrapperAcutal.children().get(rows - 1).text())
nova chamada: assertEquals("El-" + rows, wrapperAcutal.children().get(rows - 1).text(), "Era esperado valores iguais, mas  'El-' + rows é diferente de " + result1750 + " <wrapperAcutal.children().get(rows - 1).text()>")
chamada antiga: assertTrue(runtime <= 10000)
nova chamada: assertTrue(runtime <= 10000, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(2, wrapper.childNodes.size())
nova chamada: assertEquals(2, wrapper.childNodes.size(), "Era esperado valores iguais, mas  2 é diferente de " + result1751 + " <wrapper.childNodes.size()>")
chamada antiga: assertEquals(rows + 2, wrapper.childNodes.size())
nova chamada: assertEquals(rows + 2, wrapper.childNodes.size(), "Era esperado valores iguais, mas  rows + 2 é diferente de " + result1752 + " <wrapper.childNodes.size()>")
chamada antiga: assertEquals(rows, childNodes.size())
nova chamada: assertEquals(rows, childNodes.size(), "Era esperado valores iguais, mas  rows é diferente de " + result1753 + " <childNodes.size()>")
chamada antiga: assertEquals(0, doc.body().childNodes().size())
nova chamada: assertEquals(0, doc.body().childNodes().size(), "Era esperado valores iguais, mas  0 é diferente de " + result1754 + " <doc.body().childNodes().size()>")
chamada antiga: assertEquals(wrapper, wrapperAcutal)
nova chamada: assertEquals(wrapper, wrapperAcutal, "Era esperado valores iguais, mas  wrapper é diferente de " + " wrapperAcutal")
chamada antiga: assertEquals("Prior Content", wrapperAcutal.children().get(0).text())
nova chamada: assertEquals("Prior Content", wrapperAcutal.children().get(0).text(), "Era esperado valores iguais, mas  'Prior Content' é diferente de " + result1755 + " <wrapperAcutal.children().get(0).text()>")
chamada antiga: assertEquals("El-1", wrapperAcutal.children().get(1).text())
nova chamada: assertEquals("El-1", wrapperAcutal.children().get(1).text(), "Era esperado valores iguais, mas  'El-1' é diferente de " + result1756 + " <wrapperAcutal.children().get(1).text()>")
chamada antiga: assertEquals("El-" + rows, wrapperAcutal.children().get(rows).text())
nova chamada: assertEquals("El-" + rows, wrapperAcutal.children().get(rows).text(), "Era esperado valores iguais, mas  'El-' + rows é diferente de " + result1757 + " <wrapperAcutal.children().get(rows).text()>")
chamada antiga: assertEquals("End Content", wrapperAcutal.children().get(rows + 1).text())
nova chamada: assertEquals("End Content", wrapperAcutal.children().get(rows + 1).text(), "Era esperado valores iguais, mas  'End Content' é diferente de " + result1758 + " <wrapperAcutal.children().get(rows + 1).text()>")
chamada antiga: assertTrue(runtime <= 10000)
nova chamada: assertTrue(runtime <= 10000, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("Replaced", doc.text())
nova chamada: assertEquals("Replaced", doc.text(), "Era esperado valores iguais, mas  'Replaced' é diferente de " + result1759 + " <doc.text()>")
chamada antiga: assertEquals("Replaced", doc.body().text())
nova chamada: assertEquals("Replaced", doc.body().text(), "Era esperado valores iguais, mas  'Replaced' é diferente de " + result1760 + " <doc.body().text()>")
chamada antiga: assertEquals(1, doc.select("head").size())
nova chamada: assertEquals(1, doc.select("head").size(), "Era esperado valores iguais, mas  1 é diferente de " + result1761 + " <doc.select('head').size()>")
chamada antiga: assertEquals("", noTitle.title())
nova chamada: assertEquals("", noTitle.title(), "Era esperado valores iguais, mas  '' é diferente de " + result1762 + " <noTitle.title()>")
chamada antiga: assertEquals("Hello", noTitle.title())
nova chamada: assertEquals("Hello", noTitle.title(), "Era esperado valores iguais, mas  'Hello' é diferente de " + result1763 + " <noTitle.title()>")
chamada antiga: assertEquals("Hello", noTitle.select("title").first().text())
nova chamada: assertEquals("Hello", noTitle.select("title").first().text(), "Era esperado valores iguais, mas  'Hello' é diferente de " + result1764 + " <noTitle.select('title').first().text()>")
chamada antiga: assertEquals("First", withTitle.title())
nova chamada: assertEquals("First", withTitle.title(), "Era esperado valores iguais, mas  'First' é diferente de " + result1765 + " <withTitle.title()>")
chamada antiga: assertEquals("Hello", withTitle.title())
nova chamada: assertEquals("Hello", withTitle.title(), "Era esperado valores iguais, mas  'Hello' é diferente de " + result1766 + " <withTitle.title()>")
chamada antiga: assertEquals("Hello", withTitle.select("title").first().text())
nova chamada: assertEquals("Hello", withTitle.select("title").first().text(), "Era esperado valores iguais, mas  'Hello' é diferente de " + result1767 + " <withTitle.select('title').first().text()>")
chamada antiga: assertEquals("Hello there now", normaliseTitle.title())
nova chamada: assertEquals("Hello there now", normaliseTitle.title(), "Era esperado valores iguais, mas  'Hello there now' é diferente de " + result1768 + " <normaliseTitle.title()>")
chamada antiga: assertEquals("<p title=\"π\">π &amp; &lt; &gt;</p>", doc.body().html())
nova chamada: assertEquals("<p title=\"π\">π &amp; &lt; &gt;</p>", doc.body().html(), "Era esperado valores iguais, mas  'p title=\'π\'π &amp; &lt; &gt;/p' é diferente de " + result1769 + " <doc.body().html()>")
chamada antiga: assertEquals("UTF-8", doc.outputSettings().charset().name())
nova chamada: assertEquals("UTF-8", doc.outputSettings().charset().name(), "Era esperado valores iguais, mas  'UTF-8' é diferente de " + result1770 + " <doc.outputSettings().charset().name()>")
chamada antiga: assertEquals(Entities.EscapeMode.base, doc.outputSettings().escapeMode())
nova chamada: assertEquals(Entities.EscapeMode.base, doc.outputSettings().escapeMode(), "Era esperado valores iguais, mas  Entities.EscapeMode.base é diferente de " + result1771 + " <doc.outputSettings().escapeMode()>")
chamada antiga: assertEquals("<p title=\"&#x3c0;\">&#x3c0; &amp; &lt; &gt;</p>", doc.body().html())
nova chamada: assertEquals("<p title=\"&#x3c0;\">&#x3c0; &amp; &lt; &gt;</p>", doc.body().html(), "Era esperado valores iguais, mas  'p title=\'&#x3c0;\'&#x3c0; &amp; &lt; &gt;/p' é diferente de " + result1772 + " <doc.body().html()>")
chamada antiga: assertEquals("<p title=\"&pi;\">&pi; &amp; &lt; &gt;</p>", doc.body().html())
nova chamada: assertEquals("<p title=\"&pi;\">&pi; &amp; &lt; &gt;</p>", doc.body().html(), "Era esperado valores iguais, mas  'p title=\'&pi;\'&pi; &amp; &lt; &gt;/p' é diferente de " + result1773 + " <doc.body().html()>")
chamada antiga: assertEquals("&lt; &gt; &amp; \" ' ×", doc.body().html())
nova chamada: assertEquals("&lt; &gt; &amp; \" ' ×", doc.body().html(), "Era esperado valores iguais, mas  '&lt; &gt; &amp; \' ' ×' é diferente de " + result1774 + " <doc.body().html()>")
chamada antiga: assertEquals("<html><head><script>one</script><noscript>&lt;p&gt;two</noscript></head><body><p>three</p><p>four</p></body></html>", TextUtil.stripNewlines(doc.html()))
nova chamada: assertEquals("<html><head><script>one</script><noscript>&lt;p&gt;two</noscript></head><body><p>three</p><p>four</p></body></html>", TextUtil.stripNewlines(doc.html()), "Era esperado valores iguais, mas  'htmlheadscriptone/scriptnoscript&lt;p&gt;two/noscript/headbodypthree/ppfour/p/body/html' é diferente de " + result1775 + " <TextUtil.stripNewlines(doc.html())>")
chamada antiga: assertEquals("", doc.html())
nova chamada: assertEquals("", doc.html(), "Era esperado valores iguais, mas  '' é diferente de " + result1776 + " <doc.html()>")
chamada antiga: assertEquals("body", body.tagName())
nova chamada: assertEquals("body", body.tagName(), "Era esperado valores iguais, mas  'body' é diferente de " + result1777 + " <body.tagName()>")
chamada antiga: assertEquals("head", head.tagName())
nova chamada: assertEquals("head", head.tagName(), "Era esperado valores iguais, mas  'head' é diferente de " + result1778 + " <head.tagName()>")
chamada antiga: assertEquals("<html><head></head><body></body></html>", TextUtil.stripNewlines(doc.html()))
nova chamada: assertEquals("<html><head></head><body></body></html>", TextUtil.stripNewlines(doc.html()), "Era esperado valores iguais, mas  'htmlhead/headbody/body/html' é diferente de " + result1779 + " <TextUtil.stripNewlines(doc.html())>")
chamada antiga: assertEquals("BODY", body.tagName())
nova chamada: assertEquals("BODY", body.tagName(), "Era esperado valores iguais, mas  'BODY' é diferente de " + result1780 + " <body.tagName()>")
chamada antiga: assertEquals("body", body.normalName())
nova chamada: assertEquals("body", body.normalName(), "Era esperado valores iguais, mas  'body' é diferente de " + result1781 + " <body.normalName()>")
chamada antiga: assertEquals("HEAD", head.tagName())
nova chamada: assertEquals("HEAD", head.tagName(), "Era esperado valores iguais, mas  'HEAD' é diferente de " + result1782 + " <head.tagName()>")
chamada antiga: assertEquals("body", body.normalName())
nova chamada: assertEquals("body", body.normalName(), "Era esperado valores iguais, mas  'body' é diferente de " + result1783 + " <body.normalName()>")
chamada antiga: assertEquals("HTML", root.tagName())
nova chamada: assertEquals("HTML", root.tagName(), "Era esperado valores iguais, mas  'HTML' é diferente de " + result1784 + " <root.tagName()>")
chamada antiga: assertEquals("html", root.normalName())
nova chamada: assertEquals("html", root.normalName(), "Era esperado valores iguais, mas  'html' é diferente de " + result1785 + " <root.normalName()>")
chamada antiga: assertEquals("SHOUTY", doc.title())
nova chamada: assertEquals("SHOUTY", doc.title(), "Era esperado valores iguais, mas  'SHOUTY' é diferente de " + result1786 + " <doc.title()>")
chamada antiga: assertEquals("<html><head><title>Hello</title></head><body><p>One</p><p>Two</p></body></html>", TextUtil.stripNewlines(clone.html()))
nova chamada: assertEquals("<html><head><title>Hello</title></head><body><p>One</p><p>Two</p></body></html>", TextUtil.stripNewlines(clone.html()), "Era esperado valores iguais, mas  'htmlheadtitleHello/title/headbodypOne/ppTwo/p/body/html' é diferente de " + result1787 + " <TextUtil.stripNewlines(clone.html())>")
chamada antiga: assertEquals("<html><head><title>Hello there</title></head><body><p id=\"1\">One more</p><p>Two</p></body></html>", TextUtil.stripNewlines(clone.html()))
nova chamada: assertEquals("<html><head><title>Hello there</title></head><body><p id=\"1\">One more</p><p>Two</p></body></html>", TextUtil.stripNewlines(clone.html()), "Era esperado valores iguais, mas  'htmlheadtitleHello there/title/headbodyp id=\'1\'One more/ppTwo/p/body/html' é diferente de " + result1788 + " <TextUtil.stripNewlines(clone.html())>")
chamada antiga: assertEquals("<html><head><title>Hello</title></head><body><p>One</p><p>Two</p></body></html>", TextUtil.stripNewlines(doc.html()))
nova chamada: assertEquals("<html><head><title>Hello</title></head><body><p>One</p><p>Two</p></body></html>", TextUtil.stripNewlines(doc.html()), "Era esperado valores iguais, mas  'htmlheadtitleHello/title/headbodypOne/ppTwo/p/body/html' é diferente de " + result1789 + " <TextUtil.stripNewlines(doc.html())>")
chamada antiga: assertEquals(expect, doc.html())
nova chamada: assertEquals(expect, doc.html(), "Era esperado valores iguais, mas  expect é diferente de " + result1790 + " <doc.html()>")
chamada antiga: assertEquals(doc.html(), clone.html())
nova chamada: assertEquals(doc.html(), clone.html(), "Era esperado valores iguais, mas " + result1791 + " <doc.html()> é diferente de " + result1792 + " <clone.html()>")
chamada antiga: assertEquals("<!doctype html><html><head><title>Doctype test</title></head><body></body></html>", TextUtil.stripNewlines(clone.html()))
nova chamada: assertEquals("<!doctype html><html><head><title>Doctype test</title></head><body></body></html>", TextUtil.stripNewlines(clone.html()), "Era esperado valores iguais, mas  '!doctype htmlhtmlheadtitleDoctype test/title/headbody/body/html' é diferente de " + result1793 + " <TextUtil.stripNewlines(clone.html())>")
chamada antiga: assertEquals("http://www.yahoo.co.jp/index.html", location)
nova chamada: assertEquals("http://www.yahoo.co.jp/index.html", location, "Era esperado valores iguais, mas  'http://www.yahoo.co.jp/index.html' é diferente de " + " location")
chamada antiga: assertEquals("http://www.yahoo.co.jp/_ylh=X3oDMTB0NWxnaGxsBF9TAzIwNzcyOTYyNjUEdGlkAzEyBHRtcGwDZ2Ex/", baseUri)
nova chamada: assertEquals("http://www.yahoo.co.jp/_ylh=X3oDMTB0NWxnaGxsBF9TAzIwNzcyOTYyNjUEdGlkAzEyBHRtcGwDZ2Ex/", baseUri, "Era esperado valores iguais, mas  'http://www.yahoo.co.jp/_ylh=X3oDMTB0NWxnaGxsBF9TAzIwNzcyOTYyNjUEdGlkAzEyBHRtcGwDZ2Ex/' é diferente de " + " baseUri")
chamada antiga: assertEquals("http://www.nytimes.com/2010/07/26/business/global/26bp.html?hp", location)
nova chamada: assertEquals("http://www.nytimes.com/2010/07/26/business/global/26bp.html?hp", location, "Era esperado valores iguais, mas  'http://www.nytimes.com/2010/07/26/business/global/26bp.html?hp' é diferente de " + " location")
chamada antiga: assertEquals("http://www.nytimes.com/2010/07/26/business/global/26bp.html?hp", baseUri)
nova chamada: assertEquals("http://www.nytimes.com/2010/07/26/business/global/26bp.html?hp", baseUri, "Era esperado valores iguais, mas  'http://www.nytimes.com/2010/07/26/business/global/26bp.html?hp' é diferente de " + " baseUri")
chamada antiga: assertEquals("", doc.location())
nova chamada: assertEquals("", doc.location(), "Era esperado valores iguais, mas  '' é diferente de " + result1794 + " <doc.location()>")
chamada antiga: assertEquals("<!doctype html>\n" + "<html>\n" + " <head></head>\n" + " <body>\n" + "  <img async checked src=\"&amp;<>&quot;\">&lt;&gt;&amp;\"<foo />bar\n" + " </body>\n" + "</html>", doc.html())
nova chamada: assertEquals("<!doctype html>\n" + "<html>\n" + " <head></head>\n" + " <body>\n" + "  <img async checked src=\"&amp;<>&quot;\">&lt;&gt;&amp;\"<foo />bar\n" + " </body>\n" + "</html>", doc.html(), "Era esperado valores iguais, mas  '!doctype html\n' + 'html\n' + ' head/head\n' + ' body\n' + '  img async checked src=\'&amp;&quot;\'&lt;&gt;&amp;\'foo /bar\n' + ' /body\n' + '/html' é diferente de " + result1795 + " <doc.html()>")
chamada antiga: assertEquals("<!DOCTYPE html>\n" + "<html>\n" + " <head></head>\n" + " <body>\n" + "  <img async=\"\" checked=\"checked\" src=\"&amp;&lt;>&quot;\" />&lt;&gt;&amp;\"<foo />bar\n" + " </body>\n" + "</html>", doc.html())
nova chamada: assertEquals("<!DOCTYPE html>\n" + "<html>\n" + " <head></head>\n" + " <body>\n" + "  <img async=\"\" checked=\"checked\" src=\"&amp;&lt;>&quot;\" />&lt;&gt;&amp;\"<foo />bar\n" + " </body>\n" + "</html>", doc.html(), "Era esperado valores iguais, mas  '!DOCTYPE html\n' + 'html\n' + ' head/head\n' + ' body\n' + '  img async=\'\' checked=\'checked\' src=\'&amp;&lt;&quot;\' /&lt;&gt;&amp;\'foo /bar\n' + ' /body\n' + '/html' é diferente de " + result1796 + " <doc.html()>")
chamada antiga: assertEquals(Syntax.html, doc.outputSettings().syntax())
nova chamada: assertEquals(Syntax.html, doc.outputSettings().syntax(), "Era esperado valores iguais, mas  Syntax.html é diferente de " + result1797 + " <doc.outputSettings().syntax()>")
chamada antiga: assertEquals(htmlContent, document.html(new StringWriter()).toString())
nova chamada: assertEquals(htmlContent, document.html(new StringWriter()).toString(), "Era esperado valores iguais, mas  htmlContent é diferente de " + result1798 + " <document.html(new StringWriter()).toString()>")
chamada antiga: assertEquals(expectedLink, doc.selectFirst("a").attr("abs:href"))
nova chamada: assertEquals(expectedLink, doc.selectFirst("a").attr("abs:href"), "Era esperado valores iguais, mas  expectedLink é diferente de " + result1799 + " <doc.selectFirst('a').attr('abs:href')>")
chamada antiga: assertEquals(expectedLink, clone.selectFirst("a").attr("abs:href"))
nova chamada: assertEquals(expectedLink, clone.selectFirst("a").attr("abs:href"), "Era esperado valores iguais, mas  expectedLink é diferente de " + result1800 + " <clone.selectFirst('a').attr('abs:href')>")
chamada antiga: assertNotEquals(docA, docB)
nova chamada: assertNotEquals(docA, docB, "Era esperado valores diferentes, mas  docA é igual a " + " docB")
chamada antiga: assertEquals(docA, docA)
nova chamada: assertEquals(docA, docA, "Era esperado valores iguais, mas  docA é diferente de " + " docA")
chamada antiga: assertEquals(docA.hashCode(), docA.hashCode())
nova chamada: assertEquals(docA.hashCode(), docA.hashCode(), "Era esperado valores iguais, mas " + result1801 + " <docA.hashCode()> é diferente de " + result1802 + " <docA.hashCode()>")
chamada antiga: assertNotEquals(docA.hashCode(), docC.hashCode())
nova chamada: assertNotEquals(docA.hashCode(), docC.hashCode(), "Era esperado valores diferentes, mas " + result1803 + " <docA.hashCode()> é igual a " + result1804 + " <docC.hashCode()>")
chamada antiga: assertTrue(docA.hasSameValue(docB))
nova chamada: assertTrue(docA.hasSameValue(docB), "Era esperado verdadeiro, mas " + result1805 + " <docA.hasSameValue(docB)> é falso")
chamada antiga: assertEquals(htmlCharsetUTF8, doc.toString())
nova chamada: assertEquals(htmlCharsetUTF8, doc.toString(), "Era esperado valores iguais, mas  htmlCharsetUTF8 é diferente de " + result1806 + " <doc.toString()>")
chamada antiga: assertEquals(charsetUtf8, doc.charset().name())
nova chamada: assertEquals(charsetUtf8, doc.charset().name(), "Era esperado valores iguais, mas  charsetUtf8 é diferente de " + result1807 + " <doc.charset().name()>")
chamada antiga: assertEquals(charsetUtf8, selectedElement.attr("charset"))
nova chamada: assertEquals(charsetUtf8, selectedElement.attr("charset"), "Era esperado valores iguais, mas  charsetUtf8 é diferente de " + result1808 + " <selectedElement.attr('charset')>")
chamada antiga: assertEquals(doc.charset(), doc.outputSettings().charset())
nova chamada: assertEquals(doc.charset(), doc.outputSettings().charset(), "Era esperado valores iguais, mas " + result1809 + " <doc.charset()> é diferente de " + result1810 + " <doc.outputSettings().charset()>")
chamada antiga: assertEquals(htmlCharsetISO, doc.toString())
nova chamada: assertEquals(htmlCharsetISO, doc.toString(), "Era esperado valores iguais, mas  htmlCharsetISO é diferente de " + result1811 + " <doc.toString()>")
chamada antiga: assertEquals(charsetIso8859, doc.charset().name())
nova chamada: assertEquals(charsetIso8859, doc.charset().name(), "Era esperado valores iguais, mas  charsetIso8859 é diferente de " + result1812 + " <doc.charset().name()>")
chamada antiga: assertEquals(charsetIso8859, selectedElement.attr("charset"))
nova chamada: assertEquals(charsetIso8859, selectedElement.attr("charset"), "Era esperado valores iguais, mas  charsetIso8859 é diferente de " + result1813 + " <selectedElement.attr('charset')>")
chamada antiga: assertEquals(doc.charset(), doc.outputSettings().charset())
nova chamada: assertEquals(doc.charset(), doc.outputSettings().charset(), "Era esperado valores iguais, mas " + result1814 + " <doc.charset()> é diferente de " + result1815 + " <doc.outputSettings().charset()>")
chamada antiga: assertEquals(charsetUtf8, docNoCharset.select("meta[charset]").first().attr("charset"))
nova chamada: assertEquals(charsetUtf8, docNoCharset.select("meta[charset]").first().attr("charset"), "Era esperado valores iguais, mas  charsetUtf8 é diferente de " + result1816 + " <docNoCharset.select('meta[charset]').first().attr('charset')>")
chamada antiga: assertEquals(htmlCharsetUTF8, docNoCharset.toString())
nova chamada: assertEquals(htmlCharsetUTF8, docNoCharset.toString(), "Era esperado valores iguais, mas  htmlCharsetUTF8 é diferente de " + result1817 + " <docNoCharset.toString()>")
chamada antiga: assertEquals(htmlNoCharset, docDisabled.toString())
nova chamada: assertEquals(htmlNoCharset, docDisabled.toString(), "Era esperado valores iguais, mas  htmlNoCharset é diferente de " + result1818 + " <docDisabled.toString()>")
chamada antiga: assertNull(docDisabled.select("meta[charset]").first())
nova chamada: assertNull(docDisabled.select("meta[charset]").first(), "Era esperado nulo, mas " + result1819 + " <docDisabled.select('meta[charset]').first()> não é nulo")
chamada antiga: assertEquals(htmlCharset, doc.toString())
nova chamada: assertEquals(htmlCharset, doc.toString(), "Era esperado valores iguais, mas  htmlCharset é diferente de " + result1820 + " <doc.toString()>")
chamada antiga: assertNotNull(selectedElement)
nova chamada: assertNotNull(selectedElement, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("dontTouch", selectedElement.attr("charset"))
nova chamada: assertEquals("dontTouch", selectedElement.attr("charset"), "Era esperado valores iguais, mas  'dontTouch' é diferente de " + result1821 + " <selectedElement.attr('charset')>")
chamada antiga: assertNotNull(selectedElement)
nova chamada: assertNotNull(selectedElement, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("dontTouch", selectedElement.attr("content"))
nova chamada: assertEquals("dontTouch", selectedElement.attr("content"), "Era esperado valores iguais, mas  'dontTouch' é diferente de " + result1822 + " <selectedElement.attr('content')>")
chamada antiga: assertEquals(charsetUtf8, selectedElement.attr("charset"))
nova chamada: assertEquals(charsetUtf8, selectedElement.attr("charset"), "Era esperado valores iguais, mas  charsetUtf8 é diferente de " + result1823 + " <selectedElement.attr('charset')>")
chamada antiga: assertTrue(doc.select("meta[name=charset]").isEmpty())
nova chamada: assertTrue(doc.select("meta[name=charset]").isEmpty(), "Era esperado verdadeiro, mas " + result1824 + " <doc.select('meta[name=charset]').isEmpty()> é falso")
chamada antiga: assertEquals(htmlCharsetUTF8, doc.toString())
nova chamada: assertEquals(htmlCharsetUTF8, doc.toString(), "Era esperado valores iguais, mas  htmlCharsetUTF8 é diferente de " + result1825 + " <doc.toString()>")
chamada antiga: assertEquals(xmlCharsetUTF8, doc.toString())
nova chamada: assertEquals(xmlCharsetUTF8, doc.toString(), "Era esperado valores iguais, mas  xmlCharsetUTF8 é diferente de " + result1826 + " <doc.toString()>")
chamada antiga: assertEquals(charsetUtf8, doc.charset().name())
nova chamada: assertEquals(charsetUtf8, doc.charset().name(), "Era esperado valores iguais, mas  charsetUtf8 é diferente de " + result1827 + " <doc.charset().name()>")
chamada antiga: assertEquals(charsetUtf8, selectedNode.attr("encoding"))
nova chamada: assertEquals(charsetUtf8, selectedNode.attr("encoding"), "Era esperado valores iguais, mas  charsetUtf8 é diferente de " + result1828 + " <selectedNode.attr('encoding')>")
chamada antiga: assertEquals(doc.charset(), doc.outputSettings().charset())
nova chamada: assertEquals(doc.charset(), doc.outputSettings().charset(), "Era esperado valores iguais, mas " + result1829 + " <doc.charset()> é diferente de " + result1830 + " <doc.outputSettings().charset()>")
chamada antiga: assertEquals(xmlCharsetISO, doc.toString())
nova chamada: assertEquals(xmlCharsetISO, doc.toString(), "Era esperado valores iguais, mas  xmlCharsetISO é diferente de " + result1831 + " <doc.toString()>")
chamada antiga: assertEquals(charsetIso8859, doc.charset().name())
nova chamada: assertEquals(charsetIso8859, doc.charset().name(), "Era esperado valores iguais, mas  charsetIso8859 é diferente de " + result1832 + " <doc.charset().name()>")
chamada antiga: assertEquals(charsetIso8859, selectedNode.attr("encoding"))
nova chamada: assertEquals(charsetIso8859, selectedNode.attr("encoding"), "Era esperado valores iguais, mas  charsetIso8859 é diferente de " + result1833 + " <selectedNode.attr('encoding')>")
chamada antiga: assertEquals(doc.charset(), doc.outputSettings().charset())
nova chamada: assertEquals(doc.charset(), doc.outputSettings().charset(), "Era esperado valores iguais, mas " + result1834 + " <doc.charset()> é diferente de " + result1835 + " <doc.outputSettings().charset()>")
chamada antiga: assertEquals(xmlCharsetUTF8, doc.toString())
nova chamada: assertEquals(xmlCharsetUTF8, doc.toString(), "Era esperado valores iguais, mas  xmlCharsetUTF8 é diferente de " + result1836 + " <doc.toString()>")
chamada antiga: assertEquals(charsetUtf8, selectedNode.attr("encoding"))
nova chamada: assertEquals(charsetUtf8, selectedNode.attr("encoding"), "Era esperado valores iguais, mas  charsetUtf8 é diferente de " + result1837 + " <selectedNode.attr('encoding')>")
chamada antiga: assertEquals(xmlNoCharset, doc.toString())
nova chamada: assertEquals(xmlNoCharset, doc.toString(), "Era esperado valores iguais, mas  xmlNoCharset é diferente de " + result1838 + " <doc.toString()>")
chamada antiga: assertEquals(xmlCharset, doc.toString())
nova chamada: assertEquals(xmlCharset, doc.toString(), "Era esperado valores iguais, mas  xmlCharset é diferente de " + result1839 + " <doc.toString()>")
chamada antiga: assertEquals("dontTouch", selectedNode.attr("encoding"))
nova chamada: assertEquals("dontTouch", selectedNode.attr("encoding"), "Era esperado valores iguais, mas  'dontTouch' é diferente de " + result1840 + " <selectedNode.attr('encoding')>")
chamada antiga: assertEquals("dontTouch", selectedNode.attr("version"))
nova chamada: assertEquals("dontTouch", selectedNode.attr("version"), "Era esperado valores iguais, mas  'dontTouch' é diferente de " + result1841 + " <selectedNode.attr('version')>")
chamada antiga: assertEquals(html, p.outerHtml())
nova chamada: assertEquals(html, p.outerHtml(), "Era esperado valores iguais, mas  html é diferente de " + result1842 + " <p.outerHtml()>")
chamada antiga: assertEquals(html, out[0])
nova chamada: assertEquals(html, out[0], "Era esperado valores iguais, mas  html é diferente de " + " out[0]")
chamada antiga: assertEquals(StandardCharsets.US_ASCII, doc.outputSettings().charset())
nova chamada: assertEquals(StandardCharsets.US_ASCII, doc.outputSettings().charset(), "Era esperado valores iguais, mas  StandardCharsets.US_ASCII é diferente de " + result1843 + " <doc.outputSettings().charset()>")
chamada antiga: assertEquals(asci, p.outerHtml())
nova chamada: assertEquals(asci, p.outerHtml(), "Era esperado valores iguais, mas  asci é diferente de " + result1844 + " <p.outerHtml()>")
chamada antiga: assertNotNull(documentType)
nova chamada: assertNotNull(documentType, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("html", documentType.name())
nova chamada: assertEquals("html", documentType.name(), "Era esperado valores iguais, mas  'html' é diferente de " + result1845 + " <documentType.name()>")
chamada antiga: assertNotNull(head)
nova chamada: assertNotNull(head, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("Frame Test", doc.title())
nova chamada: assertEquals("Frame Test", doc.title(), "Era esperado valores iguais, mas  'Frame Test' é diferente de " + result1846 + " <doc.title()>")
chamada antiga: assertNull(doc.selectFirst("body"))
nova chamada: assertNull(doc.selectFirst("body"), "Era esperado nulo, mas " + result1847 + " <doc.selectFirst('body')> não é nulo")
chamada antiga: assertNotNull(frameset)
nova chamada: assertNotNull(frameset, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(body)
nova chamada: assertNotNull(body, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertSame(frameset, body)
nova chamada: assertSame(frameset, body, "Era esperado objetos iguais, mas  frameset é diferente de " + " body")
chamada antiga: assertEquals("frame", body.child(0).tagName())
nova chamada: assertEquals("frame", body.child(0).tagName(), "Era esperado valores iguais, mas  'frame' é diferente de " + result1848 + " <body.child(0).tagName()>")
chamada antiga: assertNull(doc.selectFirst("body"))
nova chamada: assertNull(doc.selectFirst("body"), "Era esperado nulo, mas " + result1849 + " <doc.selectFirst('body')> não é nulo")
chamada antiga: assertEquals(expected, doc.html())
nova chamada: assertEquals(expected, doc.html(), "Era esperado valores iguais, mas  expected é diferente de " + result1850 + " <doc.html()>")
chamada antiga: assertEquals(0, meta.getLength())
nova chamada: assertEquals(0, meta.getLength(), "Era esperado valores iguais, mas  0 é diferente de " + result1851 + " <meta.getLength()>")
chamada antiga: assertEquals(expected, TextUtil.stripNewlines(out))
nova chamada: assertEquals(expected, TextUtil.stripNewlines(out), "Era esperado valores iguais, mas  expected é diferente de " + result1852 + " <TextUtil.stripNewlines(out)>")
chamada antiga: assertEquals("Text", roundTrip.getElementsByTagName("p").item(0).getTextContent())
nova chamada: assertEquals("Text", roundTrip.getElementsByTagName("p").item(0).getTextContent(), "Era esperado valores iguais, mas  'Text' é diferente de " + result1853 + " <roundTrip.getElementsByTagName('p').item(0).getTextContent()>")
chamada antiga: assertTrue(furtherOut.length() > out.length())
nova chamada: assertTrue(furtherOut.length() > out.length(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(furtherExpected, TextUtil.stripNewlines(furtherOut))
nova chamada: assertEquals(furtherExpected, TextUtil.stripNewlines(furtherOut), "Era esperado valores iguais, mas  furtherExpected é diferente de " + result1854 + " <TextUtil.stripNewlines(furtherOut)>")
chamada antiga: assertNull(htmlEl.getNamespaceURI())
nova chamada: assertNull(htmlEl.getNamespaceURI(), "Era esperado nulo, mas " + result1855 + " <htmlEl.getNamespaceURI()> não é nulo")
chamada antiga: assertEquals("html", htmlEl.getLocalName())
nova chamada: assertEquals("html", htmlEl.getLocalName(), "Era esperado valores iguais, mas  'html' é diferente de " + result1856 + " <htmlEl.getLocalName()>")
chamada antiga: assertEquals("html", htmlEl.getNodeName())
nova chamada: assertEquals("html", htmlEl.getNodeName(), "Era esperado valores iguais, mas  'html' é diferente de " + result1857 + " <htmlEl.getNodeName()>")
chamada antiga: assertSame(doctype, doctypeNode)
nova chamada: assertSame(doctype, doctypeNode, "Era esperado objetos iguais, mas  doctype é diferente de " + " doctypeNode")
chamada antiga: assertEquals("html", doctype.getName())
nova chamada: assertEquals("html", doctype.getName(), "Era esperado valores iguais, mas  'html' é diferente de " + result1858 + " <doctype.getName()>")
chamada antiga: assertTrue(xml.contains("ipod"))
nova chamada: assertTrue(xml.contains("ipod"), "Era esperado verdadeiro, mas " + result1859 + " <xml.contains('ipod')> é falso")
chamada antiga: assertEquals("Images", roundTrip.getElementsByTagName("a").item(0).getTextContent())
nova chamada: assertEquals("Images", roundTrip.getElementsByTagName("a").item(0).getTextContent(), "Era esperado valores iguais, mas  'Images' é diferente de " + result1860 + " <roundTrip.getElementsByTagName('a').item(0).getTextContent()>")
chamada antiga: assertEquals(doc.location(), wDoc.getDocumentURI())
nova chamada: assertEquals(doc.location(), wDoc.getDocumentURI(), "Era esperado valores iguais, mas " + result1861 + " <doc.location()> é diferente de " + result1862 + " <wDoc.getDocumentURI()>")
chamada antiga: assertEquals("http://www.w3.org/1999/xhtml", htmlEl.getNamespaceURI())
nova chamada: assertEquals("http://www.w3.org/1999/xhtml", htmlEl.getNamespaceURI(), "Era esperado valores iguais, mas  'http://www.w3.org/1999/xhtml' é diferente de " + result1863 + " <htmlEl.getNamespaceURI()>")
chamada antiga: assertEquals("html", htmlEl.getLocalName())
nova chamada: assertEquals("html", htmlEl.getLocalName(), "Era esperado valores iguais, mas  'html' é diferente de " + result1864 + " <htmlEl.getLocalName()>")
chamada antiga: assertEquals("html", htmlEl.getNodeName())
nova chamada: assertEquals("html", htmlEl.getNodeName(), "Era esperado valores iguais, mas  'html' é diferente de " + result1865 + " <htmlEl.getNodeName()>")
chamada antiga: assertEquals("http://www.w3.org/1999/xhtml", head.getNamespaceURI())
nova chamada: assertEquals("http://www.w3.org/1999/xhtml", head.getNamespaceURI(), "Era esperado valores iguais, mas  'http://www.w3.org/1999/xhtml' é diferente de " + result1866 + " <head.getNamespaceURI()>")
chamada antiga: assertEquals("head", head.getLocalName())
nova chamada: assertEquals("head", head.getLocalName(), "Era esperado valores iguais, mas  'head' é diferente de " + result1867 + " <head.getLocalName()>")
chamada antiga: assertEquals("head", head.getNodeName())
nova chamada: assertEquals("head", head.getNodeName(), "Era esperado valores iguais, mas  'head' é diferente de " + result1868 + " <head.getNodeName()>")
chamada antiga: assertEquals("Check", epubTitle.getTextContent())
nova chamada: assertEquals("Check", epubTitle.getTextContent(), "Era esperado valores iguais, mas  'Check' é diferente de " + result1869 + " <epubTitle.getTextContent()>")
chamada antiga: assertEquals("http://www.idpf.org/2007/ops", epubTitle.getNamespaceURI())
nova chamada: assertEquals("http://www.idpf.org/2007/ops", epubTitle.getNamespaceURI(), "Era esperado valores iguais, mas  'http://www.idpf.org/2007/ops' é diferente de " + result1870 + " <epubTitle.getNamespaceURI()>")
chamada antiga: assertEquals("title", epubTitle.getLocalName())
nova chamada: assertEquals("title", epubTitle.getLocalName(), "Era esperado valores iguais, mas  'title' é diferente de " + result1871 + " <epubTitle.getLocalName()>")
chamada antiga: assertEquals("epub:title", epubTitle.getNodeName())
nova chamada: assertEquals("epub:title", epubTitle.getNodeName(), "Era esperado valores iguais, mas  'epub:title' é diferente de " + result1872 + " <epubTitle.getNodeName()>")
chamada antiga: assertEquals("urn:test", xSection.getNamespaceURI())
nova chamada: assertEquals("urn:test", xSection.getNamespaceURI(), "Era esperado valores iguais, mas  'urn:test' é diferente de " + result1873 + " <xSection.getNamespaceURI()>")
chamada antiga: assertEquals("section", xSection.getLocalName())
nova chamada: assertEquals("section", xSection.getLocalName(), "Era esperado valores iguais, mas  'section' é diferente de " + result1874 + " <xSection.getLocalName()>")
chamada antiga: assertEquals("x:section", xSection.getNodeName())
nova chamada: assertEquals("x:section", xSection.getNodeName(), "Era esperado valores iguais, mas  'x:section' é diferente de " + result1875 + " <xSection.getNodeName()>")
chamada antiga: assertEquals("http://www.w3.org/2000/svg", svg.getNamespaceURI())
nova chamada: assertEquals("http://www.w3.org/2000/svg", svg.getNamespaceURI(), "Era esperado valores iguais, mas  'http://www.w3.org/2000/svg' é diferente de " + result1876 + " <svg.getNamespaceURI()>")
chamada antiga: assertEquals("svg", svg.getLocalName())
nova chamada: assertEquals("svg", svg.getLocalName(), "Era esperado valores iguais, mas  'svg' é diferente de " + result1877 + " <svg.getLocalName()>")
chamada antiga: assertEquals("svg", svg.getNodeName())
nova chamada: assertEquals("svg", svg.getNodeName(), "Era esperado valores iguais, mas  'svg' é diferente de " + result1878 + " <svg.getNodeName()>")
chamada antiga: assertEquals("http://www.w3.org/2000/svg", path.getNamespaceURI())
nova chamada: assertEquals("http://www.w3.org/2000/svg", path.getNamespaceURI(), "Era esperado valores iguais, mas  'http://www.w3.org/2000/svg' é diferente de " + result1879 + " <path.getNamespaceURI()>")
chamada antiga: assertEquals("path", path.getLocalName())
nova chamada: assertEquals("path", path.getLocalName(), "Era esperado valores iguais, mas  'path' é diferente de " + result1880 + " <path.getLocalName()>")
chamada antiga: assertEquals("path", path.getNodeName())
nova chamada: assertEquals("path", path.getNodeName(), "Era esperado valores iguais, mas  'path' é diferente de " + result1881 + " <path.getNodeName()>")
chamada antiga: assertEquals("http://example.com/clip", clip.getNamespaceURI())
nova chamada: assertEquals("http://example.com/clip", clip.getNamespaceURI(), "Era esperado valores iguais, mas  'http://example.com/clip' é diferente de " + result1882 + " <clip.getNamespaceURI()>")
chamada antiga: assertEquals("clip", clip.getLocalName())
nova chamada: assertEquals("clip", clip.getLocalName(), "Era esperado valores iguais, mas  'clip' é diferente de " + result1883 + " <clip.getLocalName()>")
chamada antiga: assertEquals("clip", clip.getNodeName())
nova chamada: assertEquals("clip", clip.getNodeName(), "Era esperado valores iguais, mas  'clip' é diferente de " + result1884 + " <clip.getNodeName()>")
chamada antiga: assertEquals("456", clip.getTextContent())
nova chamada: assertEquals("456", clip.getTextContent(), "Era esperado valores iguais, mas  '456' é diferente de " + result1885 + " <clip.getTextContent()>")
chamada antiga: assertEquals("http://www.w3.org/1999/xhtml", picture.getNamespaceURI())
nova chamada: assertEquals("http://www.w3.org/1999/xhtml", picture.getNamespaceURI(), "Era esperado valores iguais, mas  'http://www.w3.org/1999/xhtml' é diferente de " + result1886 + " <picture.getNamespaceURI()>")
chamada antiga: assertEquals("picture", picture.getLocalName())
nova chamada: assertEquals("picture", picture.getLocalName(), "Era esperado valores iguais, mas  'picture' é diferente de " + result1887 + " <picture.getLocalName()>")
chamada antiga: assertEquals("picture", picture.getNodeName())
nova chamada: assertEquals("picture", picture.getNodeName(), "Era esperado valores iguais, mas  'picture' é diferente de " + result1888 + " <picture.getNodeName()>")
chamada antiga: assertEquals("http://www.w3.org/1999/xhtml", img.getNamespaceURI())
nova chamada: assertEquals("http://www.w3.org/1999/xhtml", img.getNamespaceURI(), "Era esperado valores iguais, mas  'http://www.w3.org/1999/xhtml' é diferente de " + result1889 + " <img.getNamespaceURI()>")
chamada antiga: assertEquals("img", img.getLocalName())
nova chamada: assertEquals("img", img.getLocalName(), "Era esperado valores iguais, mas  'img' é diferente de " + result1890 + " <img.getLocalName()>")
chamada antiga: assertEquals("img", img.getNodeName())
nova chamada: assertEquals("img", img.getNodeName(), "Era esperado valores iguais, mas  'img' é diferente de " + result1891 + " <img.getNodeName()>")
chamada antiga: assertTrue(body.hasAttr("\""))
nova chamada: assertTrue(body.hasAttr("\""), "Era esperado verdadeiro, mas " + result1892 + " <body.hasAttr('\'')> é falso")
chamada antiga: assertTrue(body.hasAttr("name\""))
nova chamada: assertTrue(body.hasAttr("name\""), "Era esperado verdadeiro, mas " + result1893 + " <body.hasAttr('name\'')> é falso")
chamada antiga: assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><html><head/><body name=\"\" style=\"color: red\"/></html>", xml)
nova chamada: assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><html><head/><body name=\"\" style=\"color: red\"/></html>", xml, "Era esperado valores iguais, mas  '?xml version=\'1.0\' encoding=\'UTF-8\'?htmlhead/body name=\'\' style=\'color: red\'//html' é diferente de " + " xml")
chamada antiga: assertEquals(expected, TextUtil.stripNewlines(out))
nova chamada: assertEquals(expected, TextUtil.stripNewlines(out), "Era esperado valores iguais, mas  expected é diferente de " + result1894 + " <TextUtil.stripNewlines(out)>")
chamada antiga: assertEquals(expected, TextUtil.stripNewlines(out))
nova chamada: assertEquals(expected, TextUtil.stripNewlines(out), "Era esperado valores iguais, mas  expected é diferente de " + result1895 + " <TextUtil.stripNewlines(out)>")
chamada antiga: assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><html><head/><body>&lt;インセンティブで高収入！&gt;Text <p>More</p></body></html>", xml)
nova chamada: assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><html><head/><body>&lt;インセンティブで高収入！&gt;Text <p>More</p></body></html>", xml, "Era esperado valores iguais, mas  '?xml version=\'1.0\' encoding=\'UTF-8\'?htmlhead/body&lt;インセンティブで高収入！&gt;Text pMore/p/body/html' é diferente de " + " xml")
chamada antiga: assertNull(htmlEl.getNamespaceURI())
nova chamada: assertNull(htmlEl.getNamespaceURI(), "Era esperado nulo, mas " + result1896 + " <htmlEl.getNamespaceURI()> não é nulo")
chamada antiga: assertEquals("html", htmlEl.getLocalName())
nova chamada: assertEquals("html", htmlEl.getLocalName(), "Era esperado valores iguais, mas  'html' é diferente de " + result1897 + " <htmlEl.getLocalName()>")
chamada antiga: assertEquals("html", htmlEl.getNodeName())
nova chamada: assertEquals("html", htmlEl.getNodeName(), "Era esperado valores iguais, mas  'html' é diferente de " + result1898 + " <htmlEl.getNodeName()>")
chamada antiga: assertNull(fb.getNamespaceURI())
nova chamada: assertNull(fb.getNamespaceURI(), "Era esperado nulo, mas " + result1899 + " <fb.getNamespaceURI()> não é nulo")
chamada antiga: assertEquals("like", fb.getLocalName())
nova chamada: assertEquals("like", fb.getLocalName(), "Era esperado valores iguais, mas  'like' é diferente de " + result1900 + " <fb.getLocalName()>")
chamada antiga: assertEquals("fb:like", fb.getNodeName())
nova chamada: assertEquals("fb:like", fb.getNodeName(), "Era esperado valores iguais, mas  'fb:like' é diferente de " + result1901 + " <fb.getNodeName()>")
chamada antiga: assertEquals("div", nodeList.item(0).getLocalName())
nova chamada: assertEquals("div", nodeList.item(0).getLocalName(), "Era esperado valores iguais, mas  'div' é diferente de " + result1902 + " <nodeList.item(0).getLocalName()>")
chamada antiga: assertNull(nodeList)
nova chamada: assertNull(nodeList, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotNull(nodeList)
nova chamada: assertNotNull(nodeList, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(1, nodeList.getLength())
nova chamada: assertEquals(1, nodeList.getLength(), "Era esperado valores iguais, mas  1 é diferente de " + result1903 + " <nodeList.getLength()>")
chamada antiga: assertEquals("div", nodeList.item(0).getLocalName())
nova chamada: assertEquals("div", nodeList.item(0).getLocalName(), "Era esperado valores iguais, mas  'div' é diferente de " + result1904 + " <nodeList.item(0).getLocalName()>")
chamada antiga: assertEquals("http://www.w3.org/1999/xhtml", nodeList.item(0).getNamespaceURI())
nova chamada: assertEquals("http://www.w3.org/1999/xhtml", nodeList.item(0).getNamespaceURI(), "Era esperado valores iguais, mas  'http://www.w3.org/1999/xhtml' é diferente de " + result1905 + " <nodeList.item(0).getNamespaceURI()>")
chamada antiga: assertNull(nodeList.item(0).getPrefix())
nova chamada: assertNull(nodeList.item(0).getPrefix(), "Era esperado nulo, mas " + result1906 + " <nodeList.item(0).getPrefix()> não é nulo")
chamada antiga: assertEquals("body", item.getNodeName())
nova chamada: assertEquals("body", item.getNodeName(), "Era esperado valores iguais, mas  'body' é diferente de " + result1907 + " <item.getNodeName()>")
chamada antiga: assertNull(item.getNamespaceURI())
nova chamada: assertNull(item.getNamespaceURI(), "Era esperado nulo, mas " + result1908 + " <item.getNamespaceURI()> não é nulo")
chamada antiga: assertNull(item.getPrefix())
nova chamada: assertNull(item.getPrefix(), "Era esperado nulo, mas " + result1909 + " <item.getPrefix()> não é nulo")
chamada antiga: assertNull(nodeList)
nova chamada: assertNull(nodeList, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertTrue(w3c.namespaceAware())
nova chamada: assertTrue(w3c.namespaceAware(), "Era esperado verdadeiro, mas " + result1910 + " <w3c.namespaceAware()> é falso")
chamada antiga: assertEquals("div", nodeList.item(0).getLocalName())
nova chamada: assertEquals("div", nodeList.item(0).getLocalName(), "Era esperado valores iguais, mas  'div' é diferente de " + result1911 + " <nodeList.item(0).getLocalName()>")
chamada antiga: assertTrue(output(publicDoc, false).startsWith("<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE html PUBLIC"))
nova chamada: assertTrue(output(publicDoc, false).startsWith("<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE html PUBLIC"), "Era esperado verdadeiro, mas " + result1912 + " <output(publicDoc, false).startsWith('<?xml version=\'1.0\' encoding=\'UTF-8\'?><!DOCTYPE html PUBLIC')> é falso")
chamada antiga: assertEquals(want.toLowerCase(Locale.ROOT), have.toLowerCase(Locale.ROOT))
nova chamada: assertEquals(want.toLowerCase(Locale.ROOT), have.toLowerCase(Locale.ROOT), "Era esperado valores iguais, mas " + result1913 + " <want.toLowerCase(Locale.ROOT)> é diferente de " + result1914 + " <have.toLowerCase(Locale.ROOT)>")
chamada antiga: assertNotNull(jDiv)
nova chamada: assertNotNull(jDiv, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("div", div.getLocalName())
nova chamada: assertEquals("div", div.getLocalName(), "Era esperado valores iguais, mas  'div' é diferente de " + result1915 + " <div.getLocalName()>")
chamada antiga: assertEquals(jDiv, div.getUserData(W3CDom.SourceProperty))
nova chamada: assertEquals(jDiv, div.getUserData(W3CDom.SourceProperty), "Era esperado valores iguais, mas  jDiv é diferente de " + result1916 + " <div.getUserData(W3CDom.SourceProperty)>")
chamada antiga: assertEquals("One", textNode.getTextContent())
nova chamada: assertEquals("One", textNode.getTextContent(), "Era esperado valores iguais, mas  'One' é diferente de " + result1917 + " <textNode.getTextContent()>")
chamada antiga: assertEquals(Node.TEXT_NODE, textNode.getNodeType())
nova chamada: assertEquals(Node.TEXT_NODE, textNode.getNodeType(), "Era esperado valores iguais, mas  Node.TEXT_NODE é diferente de " + result1918 + " <textNode.getNodeType()>")
chamada antiga: assertEquals(jText, textNode.getUserData(W3CDom.SourceProperty))
nova chamada: assertEquals(jText, textNode.getUserData(W3CDom.SourceProperty), "Era esperado valores iguais, mas  jText é diferente de " + result1919 + " <textNode.getUserData(W3CDom.SourceProperty)>")
chamada antiga: assertEquals("utf-8", DataUtil.getCharsetFromContentType("text/html;charset=utf-8 "))
nova chamada: assertEquals("utf-8", DataUtil.getCharsetFromContentType("text/html;charset=utf-8 "), "Era esperado valores iguais, mas  'utf-8' é diferente de " + result1920 + " <DataUtil.getCharsetFromContentType('text/html;charset=utf-8 ')>")
chamada antiga: assertEquals("UTF-8", DataUtil.getCharsetFromContentType("text/html; charset=UTF-8"))
nova chamada: assertEquals("UTF-8", DataUtil.getCharsetFromContentType("text/html; charset=UTF-8"), "Era esperado valores iguais, mas  'UTF-8' é diferente de " + result1921 + " <DataUtil.getCharsetFromContentType('text/html; charset=UTF-8')>")
chamada antiga: assertEquals("ISO-8859-1", DataUtil.getCharsetFromContentType("text/html; charset=ISO-8859-1"))
nova chamada: assertEquals("ISO-8859-1", DataUtil.getCharsetFromContentType("text/html; charset=ISO-8859-1"), "Era esperado valores iguais, mas  'ISO-8859-1' é diferente de " + result1922 + " <DataUtil.getCharsetFromContentType('text/html; charset=ISO-8859-1')>")
chamada antiga: assertNull(DataUtil.getCharsetFromContentType("text/html"))
nova chamada: assertNull(DataUtil.getCharsetFromContentType("text/html"), "Era esperado nulo, mas " + result1923 + " <DataUtil.getCharsetFromContentType('text/html')> não é nulo")
chamada antiga: assertNull(DataUtil.getCharsetFromContentType(null))
nova chamada: assertNull(DataUtil.getCharsetFromContentType(null), "Era esperado nulo, mas " + result1924 + " <DataUtil.getCharsetFromContentType(null)> não é nulo")
chamada antiga: assertNull(DataUtil.getCharsetFromContentType("text/html;charset=Unknown"))
nova chamada: assertNull(DataUtil.getCharsetFromContentType("text/html;charset=Unknown"), "Era esperado nulo, mas " + result1925 + " <DataUtil.getCharsetFromContentType('text/html;charset=Unknown')> não é nulo")
chamada antiga: assertEquals("utf-8", DataUtil.getCharsetFromContentType("text/html; charset=\"utf-8\""))
nova chamada: assertEquals("utf-8", DataUtil.getCharsetFromContentType("text/html; charset=\"utf-8\""), "Era esperado valores iguais, mas  'utf-8' é diferente de " + result1926 + " <DataUtil.getCharsetFromContentType('text/html; charset=\'utf-8\'')>")
chamada antiga: assertEquals("UTF-8", DataUtil.getCharsetFromContentType("text/html;charset=\"UTF-8\""))
nova chamada: assertEquals("UTF-8", DataUtil.getCharsetFromContentType("text/html;charset=\"UTF-8\""), "Era esperado valores iguais, mas  'UTF-8' é diferente de " + result1927 + " <DataUtil.getCharsetFromContentType('text/html;charset=\'UTF-8\'')>")
chamada antiga: assertEquals("ISO-8859-1", DataUtil.getCharsetFromContentType("text/html; charset=\"ISO-8859-1\""))
nova chamada: assertEquals("ISO-8859-1", DataUtil.getCharsetFromContentType("text/html; charset=\"ISO-8859-1\""), "Era esperado valores iguais, mas  'ISO-8859-1' é diferente de " + result1928 + " <DataUtil.getCharsetFromContentType('text/html; charset=\'ISO-8859-1\'')>")
chamada antiga: assertNull(DataUtil.getCharsetFromContentType("text/html; charset=\"Unsupported\""))
nova chamada: assertNull(DataUtil.getCharsetFromContentType("text/html; charset=\"Unsupported\""), "Era esperado nulo, mas " + result1929 + " <DataUtil.getCharsetFromContentType('text/html; charset=\'Unsupported\'')> não é nulo")
chamada antiga: assertEquals("UTF-8", DataUtil.getCharsetFromContentType("text/html; charset='UTF-8'"))
nova chamada: assertEquals("UTF-8", DataUtil.getCharsetFromContentType("text/html; charset='UTF-8'"), "Era esperado valores iguais, mas  'UTF-8' é diferente de " + result1930 + " <DataUtil.getCharsetFromContentType('text/html; charset='UTF-8'')>")
chamada antiga: assertEquals("One", doc.head().text())
nova chamada: assertEquals("One", doc.head().text(), "Era esperado valores iguais, mas  'One' é diferente de " + result1931 + " <doc.head().text()>")
chamada antiga: assertEquals("One", doc.head().text())
nova chamada: assertEquals("One", doc.head().text(), "Era esperado valores iguais, mas  'One' é diferente de " + result1932 + " <doc.head().text()>")
chamada antiga: assertEquals("UTF-8", doc.outputSettings().charset().displayName())
nova chamada: assertEquals("UTF-8", doc.outputSettings().charset().displayName(), "Era esperado valores iguais, mas  'UTF-8' é diferente de " + result1933 + " <doc.outputSettings().charset().displayName()>")
chamada antiga: assertNull(DataUtil.getCharsetFromContentType("text/html; charset="))
nova chamada: assertNull(DataUtil.getCharsetFromContentType("text/html; charset="), "Era esperado nulo, mas " + result1934 + " <DataUtil.getCharsetFromContentType('text/html; charset=')> não é nulo")
chamada antiga: assertNull(DataUtil.getCharsetFromContentType("text/html; charset=;"))
nova chamada: assertNull(DataUtil.getCharsetFromContentType("text/html; charset=;"), "Era esperado nulo, mas " + result1935 + " <DataUtil.getCharsetFromContentType('text/html; charset=;')> não é nulo")
chamada antiga: assertEquals("ISO-8859-1", DataUtil.getCharsetFromContentType("text/html; charset=ISO-8859-1, charset=1251"))
nova chamada: assertEquals("ISO-8859-1", DataUtil.getCharsetFromContentType("text/html; charset=ISO-8859-1, charset=1251"), "Era esperado valores iguais, mas  'ISO-8859-1' é diferente de " + result1936 + " <DataUtil.getCharsetFromContentType('text/html; charset=ISO-8859-1, charset=1251')>")
chamada antiga: assertEquals("iso-8859-1", DataUtil.getCharsetFromContentType("text/html; charset=charset=iso-8859-1"))
nova chamada: assertEquals("iso-8859-1", DataUtil.getCharsetFromContentType("text/html; charset=charset=iso-8859-1"), "Era esperado valores iguais, mas  'iso-8859-1' é diferente de " + result1937 + " <DataUtil.getCharsetFromContentType('text/html; charset=charset=iso-8859-1')>")
chamada antiga: assertNull(DataUtil.getCharsetFromContentType("text/html; charset=$HJKDF§$/("))
nova chamada: assertNull(DataUtil.getCharsetFromContentType("text/html; charset=$HJKDF§$/("), "Era esperado nulo, mas " + result1938 + " <DataUtil.getCharsetFromContentType('text/html; charset=$HJKDF§$/(')> não é nulo")
chamada antiga: assertEquals(DataUtil.boundaryLength, m1.length())
nova chamada: assertEquals(DataUtil.boundaryLength, m1.length(), "Era esperado valores iguais, mas  DataUtil.boundaryLength é diferente de " + result1939 + " <m1.length()>")
chamada antiga: assertEquals(DataUtil.boundaryLength, m2.length())
nova chamada: assertEquals(DataUtil.boundaryLength, m2.length(), "Era esperado valores iguais, mas  DataUtil.boundaryLength é diferente de " + result1940 + " <m2.length()>")
chamada antiga: assertNotSame(m1, m2)
nova chamada: assertNotSame(m1, m2, "Era esperado objetos diferentes, mas  m1 é igual a " + " m2")
chamada antiga: assertEquals(expected, doc.toString())
nova chamada: assertEquals(expected, doc.toString(), "Era esperado valores iguais, mas  expected é diferente de " + result1941 + " <doc.toString()>")
chamada antiga: assertEquals("한국어", doc.body().text())
nova chamada: assertEquals("한국어", doc.body().text(), "Era esperado valores iguais, mas  '한국어' é diferente de " + result1942 + " <doc.body().text()>")
chamada antiga: assertEquals("Übergrößenträger", doc.body().text())
nova chamada: assertEquals("Übergrößenträger", doc.body().text(), "Era esperado valores iguais, mas  'Übergrößenträger' é diferente de " + result1943 + " <doc.body().text()>")
chamada antiga: assertEquals(fileContent, doc.outerHtml())
nova chamada: assertEquals(fileContent, doc.outerHtml(), "Era esperado valores iguais, mas  fileContent é diferente de " + result1944 + " <doc.outerHtml()>")
chamada antiga: assertTrue(doc.title().contains("UTF-16BE"))
nova chamada: assertTrue(doc.title().contains("UTF-16BE"), "Era esperado verdadeiro, mas " + result1945 + " <doc.title().contains('UTF-16BE')> é falso")
chamada antiga: assertTrue(doc.text().contains("가각갂갃간갅"))
nova chamada: assertTrue(doc.text().contains("가각갂갃간갅"), "Era esperado verdadeiro, mas " + result1946 + " <doc.text().contains('가각갂갃간갅')> é falso")
chamada antiga: assertTrue(doc.title().contains("UTF-16LE"))
nova chamada: assertTrue(doc.title().contains("UTF-16LE"), "Era esperado verdadeiro, mas " + result1947 + " <doc.title().contains('UTF-16LE')> é falso")
chamada antiga: assertTrue(doc.text().contains("가각갂갃간갅"))
nova chamada: assertTrue(doc.text().contains("가각갂갃간갅"), "Era esperado verdadeiro, mas " + result1948 + " <doc.text().contains('가각갂갃간갅')> é falso")
chamada antiga: assertTrue(doc.title().contains("UTF-32BE"))
nova chamada: assertTrue(doc.title().contains("UTF-32BE"), "Era esperado verdadeiro, mas " + result1949 + " <doc.title().contains('UTF-32BE')> é falso")
chamada antiga: assertTrue(doc.text().contains("가각갂갃간갅"))
nova chamada: assertTrue(doc.text().contains("가각갂갃간갅"), "Era esperado verdadeiro, mas " + result1950 + " <doc.text().contains('가각갂갃간갅')> é falso")
chamada antiga: assertTrue(doc.title().contains("UTF-32LE"))
nova chamada: assertTrue(doc.title().contains("UTF-32LE"), "Era esperado verdadeiro, mas " + result1951 + " <doc.title().contains('UTF-32LE')> é falso")
chamada antiga: assertTrue(doc.text().contains("가각갂갃간갅"))
nova chamada: assertTrue(doc.text().contains("가각갂갃간갅"), "Era esperado verdadeiro, mas " + result1952 + " <doc.text().contains('가각갂갃간갅')> é falso")
chamada antiga: assertEquals("OK", doc.head().select("title").text())
nova chamada: assertEquals("OK", doc.head().select("title").text(), "Era esperado valores iguais, mas  'OK' é diferente de " + result1953 + " <doc.head().select('title').text()>")
chamada antiga: assertEquals("OK", doc.head().select("title").text())
nova chamada: assertEquals("OK", doc.head().select("title").text(), "Era esperado valores iguais, mas  'OK' é diferente de " + result1954 + " <doc.head().select('title').text()>")
chamada antiga: assertEquals("There is a UTF8 BOM at the top (before the XML decl). If not read correctly, will look like a non-joining space.", doc.body().text())
nova chamada: assertEquals("There is a UTF8 BOM at the top (before the XML decl). If not read correctly, will look like a non-joining space.", doc.body().text(), "Era esperado valores iguais, mas  'There is a UTF8 BOM at the top (before the XML decl). If not read correctly, will look like a non-joining space.' é diferente de " + result1955 + " <doc.body().text()>")
chamada antiga: assertEquals("Hellö Wörld!", doc.body().text())
nova chamada: assertEquals("Hellö Wörld!", doc.body().text(), "Era esperado valores iguais, mas  'Hellö Wörld!' é diferente de " + result1956 + " <doc.body().text()>")
chamada antiga: assertEquals("Gzip test", doc.title())
nova chamada: assertEquals("Gzip test", doc.title(), "Era esperado valores iguais, mas  'Gzip test' é diferente de " + result1957 + " <doc.title()>")
chamada antiga: assertEquals("This is a gzipped HTML file.", doc.selectFirst("p").text())
nova chamada: assertEquals("This is a gzipped HTML file.", doc.selectFirst("p").text(), "Era esperado valores iguais, mas  'This is a gzipped HTML file.' é diferente de " + result1958 + " <doc.selectFirst('p').text()>")
chamada antiga: assertEquals("Gzip test", doc.title())
nova chamada: assertEquals("Gzip test", doc.title(), "Era esperado valores iguais, mas  'Gzip test' é diferente de " + result1959 + " <doc.title()>")
chamada antiga: assertEquals("This is a gzipped HTML file.", doc.selectFirst("p").text())
nova chamada: assertEquals("This is a gzipped HTML file.", doc.selectFirst("p").text(), "Era esperado valores iguais, mas  'This is a gzipped HTML file.' é diferente de " + result1960 + " <doc.selectFirst('p').text()>")
chamada antiga: assertEquals("This is not gzipped", doc.title())
nova chamada: assertEquals("This is not gzipped", doc.title(), "Era esperado valores iguais, mas  'This is not gzipped' é diferente de " + result1961 + " <doc.title()>")
chamada antiga: assertEquals("And should still be readable.", doc.selectFirst("p").text())
nova chamada: assertEquals("And should still be readable.", doc.selectFirst("p").text(), "Era esperado valores iguais, mas  'And should still be readable.' é diferente de " + result1962 + " <doc.selectFirst('p').text()>")
chamada antiga: assertTrue(doc.hasSameValue(expected))
nova chamada: assertTrue(doc.hasSameValue(expected), "Era esperado verdadeiro, mas " + result1963 + " <doc.hasSameValue(expected)> é falso")
chamada antiga: assertEquals(input, read)
nova chamada: assertEquals(input, read, "Era esperado valores iguais, mas  input é diferente de " + " read")
chamada antiga: assertEquals(Connection.Method.GET, con.request().method())
nova chamada: assertEquals(Connection.Method.GET, con.request().method(), "Era esperado valores iguais, mas  Connection.Method.GET é diferente de " + result1964 + " <con.request().method()>")
chamada antiga: assertTrue(res.hasHeader("Accept-Encoding"))
nova chamada: assertTrue(res.hasHeader("Accept-Encoding"), "Era esperado verdadeiro, mas " + result1965 + " <res.hasHeader('Accept-Encoding')> é falso")
chamada antiga: assertTrue(res.hasHeader("accept-encoding"))
nova chamada: assertTrue(res.hasHeader("accept-encoding"), "Era esperado verdadeiro, mas " + result1966 + " <res.hasHeader('accept-encoding')> é falso")
chamada antiga: assertTrue(res.hasHeader("accept-Encoding"))
nova chamada: assertTrue(res.hasHeader("accept-Encoding"), "Era esperado verdadeiro, mas " + result1967 + " <res.hasHeader('accept-Encoding')> é falso")
chamada antiga: assertTrue(res.hasHeader("ACCEPT-ENCODING"))
nova chamada: assertTrue(res.hasHeader("ACCEPT-ENCODING"), "Era esperado verdadeiro, mas " + result1968 + " <res.hasHeader('ACCEPT-ENCODING')> é falso")
chamada antiga: assertEquals("gzip", res.header("accept-Encoding"))
nova chamada: assertEquals("gzip", res.header("accept-Encoding"), "Era esperado valores iguais, mas  'gzip' é diferente de " + result1969 + " <res.header('accept-Encoding')>")
chamada antiga: assertEquals("gzip", res.header("ACCEPT-ENCODING"))
nova chamada: assertEquals("gzip", res.header("ACCEPT-ENCODING"), "Era esperado valores iguais, mas  'gzip' é diferente de " + result1970 + " <res.header('ACCEPT-ENCODING')>")
chamada antiga: assertEquals("text/html", res.header("Content-Type"))
nova chamada: assertEquals("text/html", res.header("Content-Type"), "Era esperado valores iguais, mas  'text/html' é diferente de " + result1971 + " <res.header('Content-Type')>")
chamada antiga: assertEquals("http://example.com", res.header("Referrer"))
nova chamada: assertEquals("http://example.com", res.header("Referrer"), "Era esperado valores iguais, mas  'http://example.com' é diferente de " + result1972 + " <res.header('Referrer')>")
chamada antiga: assertEquals("deflate", res.header("Accept-Encoding"))
nova chamada: assertEquals("deflate", res.header("Accept-Encoding"), "Era esperado valores iguais, mas  'deflate' é diferente de " + result1973 + " <res.header('Accept-Encoding')>")
chamada antiga: assertEquals("deflate", res.header("accept-Encoding"))
nova chamada: assertEquals("deflate", res.header("accept-Encoding"), "Era esperado valores iguais, mas  'deflate' é diferente de " + result1974 + " <res.header('accept-Encoding')>")
chamada antiga: assertEquals("text/html", con.request().header("content-type"))
nova chamada: assertEquals("text/html", con.request().header("content-type"), "Era esperado valores iguais, mas  'text/html' é diferente de " + result1975 + " <con.request().header('content-type')>")
chamada antiga: assertEquals("keep-alive", con.request().header("Connection"))
nova chamada: assertEquals("keep-alive", con.request().header("Connection"), "Era esperado valores iguais, mas  'keep-alive' é diferente de " + result1976 + " <con.request().header('Connection')>")
chamada antiga: assertEquals("http://example.com", con.request().header("Host"))
nova chamada: assertEquals("http://example.com", con.request().header("Host"), "Era esperado valores iguais, mas  'http://example.com' é diferente de " + result1977 + " <con.request().header('Host')>")
chamada antiga: assertEquals("no-cache, no-store", res.header("Cache-Control"))
nova chamada: assertEquals("no-cache, no-store", res.header("Cache-Control"), "Era esperado valores iguais, mas  'no-cache, no-store' é diferente de " + result1978 + " <res.header('Cache-Control')>")
chamada antiga: assertTrue(req.hasHeader("Accept"))
nova chamada: assertTrue(req.hasHeader("Accept"), "Era esperado verdadeiro, mas " + result1979 + " <req.hasHeader('Accept')> é falso")
chamada antiga: assertTrue(req.hasHeader("ACCEpt"))
nova chamada: assertTrue(req.hasHeader("ACCEpt"), "Era esperado verdadeiro, mas " + result1980 + " <req.hasHeader('ACCEpt')> é falso")
chamada antiga: assertEquals("Something, Everything", req.header("accept"))
nova chamada: assertEquals("Something, Everything", req.header("accept"), "Era esperado valores iguais, mas  'Something, Everything' é diferente de " + result1981 + " <req.header('accept')>")
chamada antiga: assertTrue(req.hasHeader("fOO"))
nova chamada: assertTrue(req.hasHeader("fOO"), "Era esperado verdadeiro, mas " + result1982 + " <req.hasHeader('fOO')> é falso")
chamada antiga: assertEquals("Bar", req.header("foo"))
nova chamada: assertEquals("Bar", req.header("foo"), "Era esperado valores iguais, mas  'Bar' é diferente de " + result1983 + " <req.header('foo')>")
chamada antiga: assertEquals(2, accept.size())
nova chamada: assertEquals(2, accept.size(), "Era esperado valores iguais, mas  2 é diferente de " + result1984 + " <accept.size()>")
chamada antiga: assertEquals("Something", accept.get(0))
nova chamada: assertEquals("Something", accept.get(0), "Era esperado valores iguais, mas  'Something' é diferente de " + result1985 + " <accept.get(0)>")
chamada antiga: assertEquals("Everything", accept.get(1))
nova chamada: assertEquals("Everything", accept.get(1), "Era esperado valores iguais, mas  'Everything' é diferente de " + result1986 + " <accept.get(1)>")
chamada antiga: assertEquals(accept, headers.get("Accept"))
nova chamada: assertEquals(accept, headers.get("Accept"), "Era esperado valores iguais, mas  accept é diferente de " + result1987 + " <headers.get('Accept')>")
chamada antiga: assertEquals("Bar", headers.get("Foo").get(0))
nova chamada: assertEquals("Bar", headers.get("Foo").get(0), "Era esperado valores iguais, mas  'Bar' é diferente de " + result1988 + " <headers.get('Foo').get(0)>")
chamada antiga: assertTrue(req.hasHeader("Accept"))
nova chamada: assertTrue(req.hasHeader("Accept"), "Era esperado verdadeiro, mas " + result1989 + " <req.hasHeader('Accept')> é falso")
chamada antiga: assertTrue(req.hasHeaderWithValue("accept", "Something"))
nova chamada: assertTrue(req.hasHeaderWithValue("accept", "Something"), "Era esperado verdadeiro, mas " + result1990 + " <req.hasHeaderWithValue('accept', 'Something')> é falso")
chamada antiga: assertTrue(req.hasHeaderWithValue("accept", "Everything"))
nova chamada: assertTrue(req.hasHeaderWithValue("accept", "Everything"), "Era esperado verdadeiro, mas " + result1991 + " <req.hasHeaderWithValue('accept', 'Everything')> é falso")
chamada antiga: assertEquals("Bar", headers.get("Foo").get(0))
nova chamada: assertEquals("Bar", headers.get("Foo").get(0), "Era esperado valores iguais, mas  'Bar' é diferente de " + result1992 + " <headers.get('Foo').get(0)>")
chamada antiga: assertNull(headers.get("Accept"))
nova chamada: assertNull(headers.get("Accept"), "Era esperado nulo, mas " + result1993 + " <headers.get('Accept')> não é nulo")
chamada antiga: assertEquals(0, res.cookies().size())
nova chamada: assertEquals(0, res.cookies().size(), "Era esperado valores iguais, mas  0 é diferente de " + result1994 + " <res.cookies().size()>")
chamada antiga: assertEquals(4, res.cookies().size())
nova chamada: assertEquals(4, res.cookies().size(), "Era esperado valores iguais, mas  4 é diferente de " + result1995 + " <res.cookies().size()>")
chamada antiga: assertEquals("", res.cookie("one"))
nova chamada: assertEquals("", res.cookie("one"), "Era esperado valores iguais, mas  '' é diferente de " + result1996 + " <res.cookie('one')>")
chamada antiga: assertEquals("", res.cookie("two"))
nova chamada: assertEquals("", res.cookie("two"), "Era esperado valores iguais, mas  '' é diferente de " + result1997 + " <res.cookie('two')>")
chamada antiga: assertEquals("", res.cookie("three"))
nova chamada: assertEquals("", res.cookie("three"), "Era esperado valores iguais, mas  '' é diferente de " + result1998 + " <res.cookie('three')>")
chamada antiga: assertEquals("data", res.cookie("four"))
nova chamada: assertEquals("data", res.cookie("four"), "Era esperado valores iguais, mas  'data' é diferente de " + result1999 + " <res.cookie('four')>")
chamada antiga: assertEquals("http://example.com", con.request().url().toExternalForm())
nova chamada: assertEquals("http://example.com", con.request().url().toExternalForm(), "Era esperado valores iguais, mas  'http://example.com' é diferente de " + result2000 + " <con.request().url().toExternalForm()>")
chamada antiga: assertEquals(HttpConnection.DEFAULT_UA, con.request().header("User-Agent"))
nova chamada: assertEquals(HttpConnection.DEFAULT_UA, con.request().header("User-Agent"), "Era esperado valores iguais, mas  HttpConnection.DEFAULT_UA é diferente de " + result2001 + " <con.request().header('User-Agent')>")
chamada antiga: assertEquals("Mozilla", con.request().header("User-Agent"))
nova chamada: assertEquals("Mozilla", con.request().header("User-Agent"), "Era esperado valores iguais, mas  'Mozilla' é diferente de " + result2002 + " <con.request().header('User-Agent')>")
chamada antiga: assertEquals(30 * 1000, con.request().timeout())
nova chamada: assertEquals(30 * 1000, con.request().timeout(), "Era esperado valores iguais, mas  30 * 1000 é diferente de " + result2003 + " <con.request().timeout()>")
chamada antiga: assertEquals(1000, con.request().timeout())
nova chamada: assertEquals(1000, con.request().timeout(), "Era esperado valores iguais, mas  1000 é diferente de " + result2004 + " <con.request().timeout()>")
chamada antiga: assertEquals("http://foo.com", con.request().header("Referer"))
nova chamada: assertEquals("http://foo.com", con.request().header("Referer"), "Era esperado valores iguais, mas  'http://foo.com' é diferente de " + result2005 + " <con.request().header('Referer')>")
chamada antiga: assertEquals(Connection.Method.GET, con.request().method())
nova chamada: assertEquals(Connection.Method.GET, con.request().method(), "Era esperado valores iguais, mas  Connection.Method.GET é diferente de " + result2006 + " <con.request().method()>")
chamada antiga: assertEquals(Connection.Method.POST, con.request().method())
nova chamada: assertEquals(Connection.Method.POST, con.request().method(), "Era esperado valores iguais, mas  Connection.Method.POST é diferente de " + result2007 + " <con.request().method()>")
chamada antiga: assertEquals("Name", one.key())
nova chamada: assertEquals("Name", one.key(), "Era esperado valores iguais, mas  'Name' é diferente de " + result2008 + " <one.key()>")
chamada antiga: assertEquals("Val", one.value())
nova chamada: assertEquals("Val", one.value(), "Era esperado valores iguais, mas  'Val' é diferente de " + result2009 + " <one.value()>")
chamada antiga: assertEquals("Foo", two.key())
nova chamada: assertEquals("Foo", two.key(), "Era esperado valores iguais, mas  'Foo' é diferente de " + result2010 + " <two.key()>")
chamada antiga: assertEquals("bar", two.value())
nova chamada: assertEquals("bar", two.value(), "Era esperado valores iguais, mas  'bar' é diferente de " + result2011 + " <two.value()>")
chamada antiga: assertEquals("Val", con.request().cookie("Name"))
nova chamada: assertEquals("Val", con.request().cookie("Name"), "Era esperado valores iguais, mas  'Val' é diferente de " + result2012 + " <con.request().cookie('Name')>")
chamada antiga: assertEquals("file", kv.key())
nova chamada: assertEquals("file", kv.key(), "Era esperado valores iguais, mas  'file' é diferente de " + result2013 + " <kv.key()>")
chamada antiga: assertEquals("thumb.jpg", kv.value())
nova chamada: assertEquals("thumb.jpg", kv.value(), "Era esperado valores iguais, mas  'thumb.jpg' é diferente de " + result2014 + " <kv.value()>")
chamada antiga: assertTrue(kv.hasInputStream())
nova chamada: assertTrue(kv.hasInputStream(), "Era esperado verdadeiro, mas " + result2015 + " <kv.hasInputStream()> é falso")
chamada antiga: assertEquals("one", kv.key())
nova chamada: assertEquals("one", kv.key(), "Era esperado valores iguais, mas  'one' é diferente de " + result2016 + " <kv.key()>")
chamada antiga: assertEquals("two", kv.value())
nova chamada: assertEquals("two", kv.value(), "Era esperado valores iguais, mas  'two' é diferente de " + result2017 + " <kv.value()>")
chamada antiga: assertEquals("foo", con.request().requestBody())
nova chamada: assertEquals("foo", con.request().requestBody(), "Era esperado valores iguais, mas  'foo' é diferente de " + result2018 + " <con.request().requestBody()>")
chamada antiga: assertEquals("http://test.com/?q=white%20space", url2.toExternalForm())
nova chamada: assertEquals("http://test.com/?q=white%20space", url2.toExternalForm(), "Era esperado valores iguais, mas  'http://test.com/?q=white%20space' é diferente de " + result2019 + " <url2.toExternalForm()>")
chamada antiga: assertTrue(threw)
nova chamada: assertTrue(threw, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(puny, con.request().url().toExternalForm())
nova chamada: assertEquals(puny, con.request().url().toExternalForm(), "Era esperado valores iguais, mas  puny é diferente de " + result2020 + " <con.request().url().toExternalForm()>")
chamada antiga: assertEquals(puny, req.url().toExternalForm())
nova chamada: assertEquals(puny, req.url().toExternalForm(), "Era esperado valores iguais, mas  puny é diferente de " + result2021 + " <req.url().toExternalForm()>")
chamada antiga: assertTrue(urlThrew)
nova chamada: assertTrue(urlThrew, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(threw)
nova chamada: assertTrue(threw, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(threw)
nova chamada: assertTrue(threw, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(threw)
nova chamada: assertTrue(threw, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(threw)
nova chamada: assertTrue(threw, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertFalse(p.formatAsBlock())
nova chamada: assertFalse(p.formatAsBlock(), "Era esperado falso, mas " + result2022 + " <p.formatAsBlock()> é verdadeiro ")
chamada antiga: assertFalse(img.isBlock())
nova chamada: assertFalse(img.isBlock(), "Era esperado falso, mas " + result2023 + " <img.isBlock()> é verdadeiro ")
chamada antiga: assertFalse(Tag.isKnownTag("explain"))
nova chamada: assertFalse(Tag.isKnownTag("explain"), "Era esperado falso, mas " + result2024 + " <Tag.isKnownTag('explain')> é verdadeiro ")
chamada antiga: assertFalse(Jsoup.isValid(html, Safelist.relaxed()))
nova chamada: assertFalse(Jsoup.isValid(html, Safelist.relaxed()), "Era esperado falso, mas " + result2025 + " <Jsoup.isValid(html, Safelist.relaxed())> é verdadeiro ")
chamada antiga: assertFalse(doc.body().html().contains("&lt;"))
nova chamada: assertFalse(doc.body().html().contains("&lt;"), "Era esperado falso, mas " + result2026 + " <doc.body().html().contains('&lt;')> é verdadeiro ")
chamada antiga: assertFalse(doc.body().html().contains("&gt;"))
nova chamada: assertFalse(doc.body().html().contains("&gt;"), "Era esperado falso, mas " + result2027 + " <doc.body().html().contains('&gt;')> é verdadeiro ")
chamada antiga: assertFalse(didAddElements(full))
nova chamada: assertFalse(didAddElements(full), "Era esperado falso, mas " + result2028 + " <didAddElements(full)> é verdadeiro ")
chamada antiga: assertFalse(r.isEmpty())
nova chamada: assertFalse(r.isEmpty(), "Era esperado falso, mas " + result2029 + " <r.isEmpty()> é verdadeiro ")
chamada antiga: assertFalse(r.isEmpty())
nova chamada: assertFalse(r.isEmpty(), "Era esperado falso, mas " + result2030 + " <r.isEmpty()> é verdadeiro ")
chamada antiga: assertFalse(r.isEmpty())
nova chamada: assertFalse(r.isEmpty(), "Era esperado falso, mas " + result2031 + " <r.isEmpty()> é verdadeiro ")
chamada antiga: assertFalse(r.matches("one"))
nova chamada: assertFalse(r.matches("one"), "Era esperado falso, mas " + result2032 + " <r.matches('one')> é verdadeiro ")
chamada antiga: assertFalse(r.matches("One"))
nova chamada: assertFalse(r.matches("One"), "Era esperado falso, mas " + result2033 + " <r.matches('One')> é verdadeiro ")
chamada antiga: assertFalse(r.matches("ne Two Three Four"))
nova chamada: assertFalse(r.matches("ne Two Three Four"), "Era esperado falso, mas " + result2034 + " <r.matches('ne Two Three Four')> é verdadeiro ")
chamada antiga: assertFalse(r.matches("ne"))
nova chamada: assertFalse(r.matches("ne"), "Era esperado falso, mas " + result2035 + " <r.matches('ne')> é verdadeiro ")
chamada antiga: assertFalse(r.matches('o'))
nova chamada: assertFalse(r.matches('o'), "Era esperado falso, mas " + result2036 + " <r.matches('o')> é verdadeiro ")
chamada antiga: assertFalse(r.matchesIgnoreCase("One"))
nova chamada: assertFalse(r.matchesIgnoreCase("One"), "Era esperado falso, mas " + result2037 + " <r.matchesIgnoreCase('One')> é verdadeiro ")
chamada antiga: assertFalse(r.matchesIgnoreCase("ne Two Three Four"))
nova chamada: assertFalse(r.matchesIgnoreCase("ne Two Three Four"), "Era esperado falso, mas " + result2038 + " <r.matchesIgnoreCase('ne Two Three Four')> é verdadeiro ")
chamada antiga: assertFalse(r.matchesIgnoreCase("ne"))
nova chamada: assertFalse(r.matchesIgnoreCase("ne"), "Era esperado falso, mas " + result2039 + " <r.matchesIgnoreCase('ne')> é verdadeiro ")
chamada antiga: assertFalse(r.containsIgnoreCase("one"))
nova chamada: assertFalse(r.containsIgnoreCase("one"), "Era esperado falso, mas " + result2040 + " <r.containsIgnoreCase('one')> é verdadeiro ")
chamada antiga: assertFalse(r.containsIgnoreCase("</not>"))
nova chamada: assertFalse(r.containsIgnoreCase("</not>"), "Era esperado falso, mas " + result2041 + " <r.containsIgnoreCase('</not>')> é verdadeiro ")
chamada antiga: assertFalse(r.containsIgnoreCase("</not>"))
nova chamada: assertFalse(r.containsIgnoreCase("</not>"), "Era esperado falso, mas " + result2042 + " <r.containsIgnoreCase('</not>')> é verdadeiro ")
chamada antiga: assertFalse(r.containsIgnoreCase("</not>"))
nova chamada: assertFalse(r.containsIgnoreCase("</not>"), "Era esperado falso, mas " + result2043 + " <r.containsIgnoreCase('</not>')> é verdadeiro ")
chamada antiga: assertFalse(r.containsIgnoreCase("</not>"))
nova chamada: assertFalse(r.containsIgnoreCase("</not>"), "Era esperado falso, mas " + result2044 + " <r.containsIgnoreCase('</not>')> é verdadeiro ")
chamada antiga: assertFalse(r.containsIgnoreCase("</title>"))
nova chamada: assertFalse(r.containsIgnoreCase("</title>"), "Era esperado falso, mas " + result2045 + " <r.containsIgnoreCase('</title>')> é verdadeiro ")
chamada antiga: assertFalse(r.matches("<foo>"))
nova chamada: assertFalse(r.matches("<foo>"), "Era esperado falso, mas " + result2046 + " <r.matches('<foo>')> é verdadeiro ")
chamada antiga: assertFalse(r.matchesAny(scan))
nova chamada: assertFalse(r.matchesAny(scan), "Era esperado falso, mas " + result2047 + " <r.matchesAny(scan)> é verdadeiro ")
chamada antiga: assertFalse(r.matchesAny(scan))
nova chamada: assertFalse(r.matchesAny(scan), "Era esperado falso, mas " + result2048 + " <r.matchesAny(scan)> é verdadeiro ")
chamada antiga: assertFalse(r.rangeEquals(0, 5, "CHOKE"))
nova chamada: assertFalse(r.rangeEquals(0, 5, "CHOKE"), "Era esperado falso, mas " + result2049 + " <r.rangeEquals(0, 5, 'CHOKE')> é verdadeiro ")
chamada antiga: assertFalse(r.rangeEquals(0, 5, "Chec"))
nova chamada: assertFalse(r.rangeEquals(0, 5, "Chec"), "Era esperado falso, mas " + result2050 + " <r.rangeEquals(0, 5, 'Chec')> é verdadeiro ")
chamada antiga: assertFalse(r.rangeEquals(6, 5, "Chuck"))
nova chamada: assertFalse(r.rangeEquals(6, 5, "Chuck"), "Era esperado falso, mas " + result2051 + " <r.rangeEquals(6, 5, 'Chuck')> é verdadeiro ")
chamada antiga: assertFalse(r.rangeEquals(12, 5, "Cheeky"))
nova chamada: assertFalse(r.rangeEquals(12, 5, "Cheeky"), "Era esperado falso, mas " + result2052 + " <r.rangeEquals(12, 5, 'Cheeky')> é verdadeiro ")
chamada antiga: assertFalse(r.rangeEquals(18, 5, "CHIKE"))
nova chamada: assertFalse(r.rangeEquals(18, 5, "CHIKE"), "Era esperado falso, mas " + result2053 + " <r.rangeEquals(18, 5, 'CHIKE')> é verdadeiro ")
chamada antiga: assertFalse(r.isEmpty())
nova chamada: assertFalse(r.isEmpty(), "Era esperado falso, mas " + result2054 + " <r.isEmpty()> é verdadeiro ")
chamada antiga: assertFalse(reader.isTrackNewlines())
nova chamada: assertFalse(reader.isTrackNewlines(), "Era esperado falso, mas " + result2055 + " <reader.isTrackNewlines()> é verdadeiro ")
chamada antiga: assertFalse(reader.isTrackNewlines())
nova chamada: assertFalse(reader.isTrackNewlines(), "Era esperado falso, mas " + result2056 + " <reader.isTrackNewlines()> é verdadeiro ")
chamada antiga: assertFalse(noTrack.isTrackNewlines())
nova chamada: assertFalse(noTrack.isTrackNewlines(), "Era esperado falso, mas " + result2057 + " <noTrack.isTrackNewlines()> é verdadeiro ")
chamada antiga: assertFalse(comment.isXmlDeclaration())
nova chamada: assertFalse(comment.isXmlDeclaration(), "Era esperado falso, mas " + result2058 + " <comment.isXmlDeclaration()> é verdadeiro ")
chamada antiga: assertFalse(hasAnyAttributes(html))
nova chamada: assertFalse(hasAnyAttributes(html), "Era esperado falso, mas " + result2059 + " <hasAnyAttributes(html)> é verdadeiro ")
chamada antiga: assertFalse(hasAnyAttributes(html))
nova chamada: assertFalse(hasAnyAttributes(html), "Era esperado falso, mas " + result2060 + " <hasAnyAttributes(html)> é verdadeiro ")
chamada antiga: assertFalse(hasAnyAttributes(html))
nova chamada: assertFalse(hasAnyAttributes(html), "Era esperado falso, mas " + result2061 + " <hasAnyAttributes(html)> é verdadeiro ")
chamada antiga: assertFalse(hasAnyAttributes(html))
nova chamada: assertFalse(hasAnyAttributes(html), "Era esperado falso, mas " + result2062 + " <hasAnyAttributes(html)> é verdadeiro ")
chamada antiga: assertFalse(p.hasClass("Foobs"))
nova chamada: assertFalse(p.hasClass("Foobs"), "Era esperado falso, mas " + result2063 + " <p.hasClass('Foobs')> é verdadeiro ")
chamada antiga: assertFalse(hasAnyAttributes(html))
nova chamada: assertFalse(hasAnyAttributes(html), "Era esperado falso, mas " + result2064 + " <hasAnyAttributes(html)> é verdadeiro ")
chamada antiga: assertFalse(hasAnyAttributes(p))
nova chamada: assertFalse(hasAnyAttributes(p), "Era esperado falso, mas " + result2065 + " <hasAnyAttributes(p)> é verdadeiro ")
chamada antiga: assertFalse(hasAnyAttributes(html))
nova chamada: assertFalse(hasAnyAttributes(html), "Era esperado falso, mas " + result2066 + " <hasAnyAttributes(html)> é verdadeiro ")
chamada antiga: assertFalse(attributes.hasKey("class"))
nova chamada: assertFalse(attributes.hasKey("class"), "Era esperado falso, mas " + result2067 + " <attributes.hasKey('class')> é verdadeiro ")
chamada antiga: assertFalse(first.hasDeclaredValue())
nova chamada: assertFalse(first.hasDeclaredValue(), "Era esperado falso, mas " + result2068 + " <first.hasDeclaredValue()> é verdadeiro ")
chamada antiga: assertFalse(a2.hasDeclaredValue())
nova chamada: assertFalse(a2.hasDeclaredValue(), "Era esperado falso, mas " + result2069 + " <a2.hasDeclaredValue()> é verdadeiro ")
chamada antiga: assertFalse(Attribute.isBooleanAttribute("random string"))
nova chamada: assertFalse(Attribute.isBooleanAttribute("random string"), "Era esperado falso, mas " + result2070 + " <Attribute.isBooleanAttribute('random string')> é verdadeiro ")
chamada antiga: assertFalse(htmlParser.isTrackPosition())
nova chamada: assertFalse(htmlParser.isTrackPosition(), "Era esperado falso, mas " + result2071 + " <htmlParser.isTrackPosition()> é verdadeiro ")
chamada antiga: assertFalse(xmlParser.isTrackPosition())
nova chamada: assertFalse(xmlParser.isTrackPosition(), "Era esperado falso, mas " + result2072 + " <xmlParser.isTrackPosition()> é verdadeiro ")
chamada antiga: assertFalse(body.sourceRange().isTracked())
nova chamada: assertFalse(body.sourceRange().isTracked(), "Era esperado falso, mas " + result2073 + " <body.sourceRange().isTracked()> é verdadeiro ")
chamada antiga: assertFalse(pEndRange.isTracked())
nova chamada: assertFalse(pEndRange.isTracked(), "Era esperado falso, mas " + result2074 + " <pEndRange.isTracked()> é verdadeiro ")
chamada antiga: assertFalse(a.hasKey("tot"))
nova chamada: assertFalse(a.hasKey("tot"), "Era esperado falso, mas " + result2075 + " <a.hasKey('tot')> é verdadeiro ")
chamada antiga: assertFalse(a.hasKey("Tot"))
nova chamada: assertFalse(a.hasKey("Tot"), "Era esperado falso, mas " + result2076 + " <a.hasKey('Tot')> é verdadeiro ")
chamada antiga: assertFalse(a.hasKey("Foo"))
nova chamada: assertFalse(a.hasKey("Foo"), "Era esperado falso, mas " + result2077 + " <a.hasKey('Foo')> é verdadeiro ")
chamada antiga: assertFalse(a.hasKey("Tot"))
nova chamada: assertFalse(a.hasKey("Tot"), "Era esperado falso, mas " + result2078 + " <a.hasKey('Tot')> é verdadeiro ")
chamada antiga: assertFalse(a.hasKey("Hello"))
nova chamada: assertFalse(a.hasKey("Hello"), "Era esperado falso, mas " + result2079 + " <a.hasKey('Hello')> é verdadeiro ")
chamada antiga: assertFalse(it.hasNext())
nova chamada: assertFalse(it.hasNext(), "Era esperado falso, mas " + result2080 + " <it.hasNext()> é verdadeiro ")
chamada antiga: assertFalse(iterator.hasNext())
nova chamada: assertFalse(iterator.hasNext(), "Era esperado falso, mas " + result2081 + " <iterator.hasNext()> é verdadeiro ")
chamada antiga: assertFalse(a.hasKey("Tot"))
nova chamada: assertFalse(a.hasKey("Tot"), "Era esperado falso, mas " + result2082 + " <a.hasKey('Tot')> é verdadeiro ")
chamada antiga: assertFalse(ats.hasDeclaredValueForKey("A"))
nova chamada: assertFalse(ats.hasDeclaredValueForKey("A"), "Era esperado falso, mas " + result2083 + " <ats.hasDeclaredValueForKey('A')> é verdadeiro ")
chamada antiga: assertFalse(ats.hasDeclaredValueForKey("c"))
nova chamada: assertFalse(ats.hasDeclaredValueForKey("c"), "Era esperado falso, mas " + result2084 + " <ats.hasDeclaredValueForKey('c')> é verdadeiro ")
chamada antiga: assertFalse(ats.hasDeclaredValueForKey("C"))
nova chamada: assertFalse(ats.hasDeclaredValueForKey("C"), "Era esperado falso, mas " + result2085 + " <ats.hasDeclaredValueForKey('C')> é verdadeiro ")
chamada antiga: assertFalse(ats.hasDeclaredValueForKeyIgnoreCase("C"))
nova chamada: assertFalse(ats.hasDeclaredValueForKeyIgnoreCase("C"), "Era esperado falso, mas " + result2086 + " <ats.hasDeclaredValueForKeyIgnoreCase('C')> é verdadeiro ")
chamada antiga: assertFalse(one.hasAttr("abs:href"))
nova chamada: assertFalse(one.hasAttr("abs:href"), "Era esperado falso, mas " + result2087 + " <one.hasAttr('abs:href')> é verdadeiro ")
chamada antiga: assertFalse(el.hasClass("foo"))
nova chamada: assertFalse(el.hasClass("foo"), "Era esperado falso, mas " + result2088 + " <el.hasClass('foo')> é verdadeiro ")
chamada antiga: assertFalse(docClone.outputSettings().prettyPrint())
nova chamada: assertFalse(docClone.outputSettings().prettyPrint(), "Era esperado falso, mas " + result2089 + " <docClone.outputSettings().prettyPrint()> é verdadeiro ")
chamada antiga: assertFalse(docClone.outputSettings().prettyPrint())
nova chamada: assertFalse(docClone.outputSettings().prettyPrint(), "Era esperado falso, mas " + result2090 + " <docClone.outputSettings().prettyPrint()> é verdadeiro ")
chamada antiga: assertFalse(doc.hasClass("mellow"))
nova chamada: assertFalse(doc.hasClass("mellow"), "Era esperado falso, mas " + result2091 + " <doc.hasClass('mellow')> é verdadeiro ")
chamada antiga: assertFalse(hasClass)
nova chamada: assertFalse(hasClass, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: assertFalse(hasClass)
nova chamada: assertFalse(hasClass, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: assertFalse(hasClass)
nova chamada: assertFalse(hasClass, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: assertFalse(div.hasAttr("false"))
nova chamada: assertFalse(div.hasAttr("false"), "Era esperado falso, mas " + result2092 + " <div.hasAttr('false')> é verdadeiro ")
chamada antiga: assertFalse(orphan.hasParent())
nova chamada: assertFalse(orphan.hasParent(), "Era esperado falso, mas " + result2093 + " <orphan.hasParent()> é verdadeiro ")
chamada antiga: assertFalse(ps.last().hasText())
nova chamada: assertFalse(ps.last().hasText(), "Era esperado falso, mas " + result2094 + " <ps.last().hasText()> é verdadeiro ")
chamada antiga: assertFalse(classes.contains("three"))
nova chamada: assertFalse(classes.contains("three"), "Era esperado falso, mas " + result2095 + " <classes.contains('three')> é verdadeiro ")
chamada antiga: assertFalse(copyClasses.contains("one"))
nova chamada: assertFalse(copyClasses.contains("one"), "Era esperado falso, mas " + result2096 + " <copyClasses.contains('one')> é verdadeiro ")
chamada antiga: assertFalse(e0.hasSameValue(e2))
nova chamada: assertFalse(e0.hasSameValue(e2), "Era esperado falso, mas " + result2097 + " <e0.hasSameValue(e2)> é verdadeiro ")
chamada antiga: assertFalse(e0.hasSameValue(e3))
nova chamada: assertFalse(e0.hasSameValue(e3), "Era esperado falso, mas " + result2098 + " <e0.hasSameValue(e3)> é verdadeiro ")
chamada antiga: assertFalse(e0.hasSameValue(e6))
nova chamada: assertFalse(e0.hasSameValue(e6), "Era esperado falso, mas " + result2099 + " <e0.hasSameValue(e6)> é verdadeiro ")
chamada antiga: assertFalse(e0.hasSameValue(e7))
nova chamada: assertFalse(e0.hasSameValue(e7), "Era esperado falso, mas " + result2100 + " <e0.hasSameValue(e7)> é verdadeiro ")
chamada antiga: assertFalse(p.is("div"))
nova chamada: assertFalse(p.is("div"), "Era esperado falso, mas " + result2101 + " <p.is('div')> é verdadeiro ")
chamada antiga: assertFalse(p.is("a"))
nova chamada: assertFalse(p.is("a"), "Era esperado falso, mas " + result2102 + " <p.is('a')> é verdadeiro ")
chamada antiga: assertFalse(p.is("p:last-child"))
nova chamada: assertFalse(p.is("p:last-child"), "Era esperado falso, mas " + result2103 + " <p.is('p:last-child')> é verdadeiro ")
chamada antiga: assertFalse(q.is("p a"))
nova chamada: assertFalse(q.is("p a"), "Era esperado falso, mas " + result2104 + " <q.is('p a')> é verdadeiro ")
chamada antiga: assertFalse(q.is("a"))
nova chamada: assertFalse(q.is("a"), "Era esperado falso, mas " + result2105 + " <q.is('a')> é verdadeiro ")
chamada antiga: assertFalse(p.is(aEval))
nova chamada: assertFalse(p.is(aEval), "Era esperado falso, mas " + result2106 + " <p.is(aEval)> é verdadeiro ")
chamada antiga: assertFalse(hasClass)
nova chamada: assertFalse(hasClass, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: assertFalse(doc.body().html().contains("class=\"\""))
nova chamada: assertFalse(doc.body().html().contains("class=\"\""), "Era esperado falso, mas " + result2107 + " <doc.body().html().contains('class=\'\'')> é verdadeiro ")
chamada antiga: assertFalse(doc.selectFirst("span").isBlock())
nova chamada: assertFalse(doc.selectFirst("span").isBlock(), "Era esperado falso, mas " + result2108 + " <doc.selectFirst('span').isBlock()> é verdadeiro ")
chamada antiga: assertFalse(div.hasAttributes())
nova chamada: assertFalse(div.hasAttributes(), "Era esperado falso, mas " + result2109 + " <div.hasAttributes()> é verdadeiro ")
chamada antiga: assertFalse(p.hasAttributes())
nova chamada: assertFalse(p.hasAttributes(), "Era esperado falso, mas " + result2110 + " <p.hasAttributes()> é verdadeiro ")
chamada antiga: assertFalse(p.hasChildNodes())
nova chamada: assertFalse(p.hasChildNodes(), "Era esperado falso, mas " + result2111 + " <p.hasChildNodes()> é verdadeiro ")
chamada antiga: assertFalse(p.hasChildNodes())
nova chamada: assertFalse(p.hasChildNodes(), "Era esperado falso, mas " + result2112 + " <p.hasChildNodes()> é verdadeiro ")
chamada antiga: assertFalse(p.hasAttributes())
nova chamada: assertFalse(p.hasAttributes(), "Era esperado falso, mas " + result2113 + " <p.hasAttributes()> é verdadeiro ")
chamada antiga: assertFalse(p.hasAttributes())
nova chamada: assertFalse(p.hasAttributes(), "Era esperado falso, mas " + result2114 + " <p.hasAttributes()> é verdadeiro ")
chamada antiga: assertFalse(docClone.outputSettings().prettyPrint())
nova chamada: assertFalse(docClone.outputSettings().prettyPrint(), "Era esperado falso, mas " + result2115 + " <docClone.outputSettings().prettyPrint()> é verdadeiro ")
chamada antiga: assertFalse(docClone.outputSettings().prettyPrint())
nova chamada: assertFalse(docClone.outputSettings().prettyPrint(), "Era esperado falso, mas " + result2116 + " <docClone.outputSettings().prettyPrint()> é verdadeiro ")
chamada antiga: assertFalse(four.isBlank())
nova chamada: assertFalse(four.isBlank(), "Era esperado falso, mas " + result2117 + " <four.isBlank()> é verdadeiro ")
chamada antiga: assertFalse(five.isBlank())
nova chamada: assertFalse(five.isBlank(), "Era esperado falso, mas " + result2118 + " <five.isBlank()> é verdadeiro ")
chamada antiga: assertFalse(docA.hasSameValue(docC))
nova chamada: assertFalse(docA.hasSameValue(docC), "Era esperado falso, mas " + result2119 + " <docA.hasSameValue(docC)> é verdadeiro ")
chamada antiga: assertFalse(doc.updateMetaCharsetElement())
nova chamada: assertFalse(doc.updateMetaCharsetElement(), "Era esperado falso, mas " + result2120 + " <doc.updateMetaCharsetElement()> é verdadeiro ")
chamada antiga: assertFalse(w3c.namespaceAware())
nova chamada: assertFalse(w3c.namespaceAware(), "Era esperado falso, mas " + result2121 + " <w3c.namespaceAware()> é verdadeiro ")
chamada antiga: assertFalse(doc.outerHtml().contains("\u0000"))
nova chamada: assertFalse(doc.outerHtml().contains("\u0000"), "Era esperado falso, mas " + result2122 + " <doc.outerHtml().contains('\u0000')> é verdadeiro ")
chamada antiga: assertFalse(res.hasHeader("content-type"))
nova chamada: assertFalse(res.hasHeader("content-type"), "Era esperado falso, mas " + result2123 + " <res.hasHeader('content-type')> é verdadeiro ")
chamada antiga: assertFalse(res.hasHeader("Accept-Encoding"))
nova chamada: assertFalse(res.hasHeader("Accept-Encoding"), "Era esperado falso, mas " + result2124 + " <res.hasHeader('Accept-Encoding')> é verdadeiro ")
chamada antiga: assertFalse(req.hasHeaderWithValue("accept", "Something for nothing"))
nova chamada: assertFalse(req.hasHeaderWithValue("accept", "Something for nothing"), "Era esperado falso, mas " + result2125 + " <req.hasHeaderWithValue('accept', 'Something for nothing')> é verdadeiro ")
chamada antiga: assertFalse(req.hasHeader("Accept"))
nova chamada: assertFalse(req.hasHeader("Accept"), "Era esperado falso, mas " + result2126 + " <req.hasHeader('Accept')> é verdadeiro ")
chamada antiga: assertFalse(kv.hasInputStream())
nova chamada: assertFalse(kv.hasInputStream(), "Era esperado falso, mas " + result2127 + " <kv.hasInputStream()> é verdadeiro ")
chamada antiga: assertFalse(safelist2.isSafeTag("invalidTag"))
nova chamada: assertFalse(safelist2.isSafeTag("invalidTag"), "Era esperado falso, mas " + result2128 + " <safelist2.isSafeTag('invalidTag')> é verdadeiro ")
chamada antiga: assertFalse(safelist2.isSafeAttribute(TEST_TAG, null, new Attribute("invalidAttribute", TEST_VALUE)))
nova chamada: assertFalse(safelist2.isSafeAttribute(TEST_TAG, null, new Attribute("invalidAttribute", TEST_VALUE)), "Era esperado falso, mas " + result2129 + " <safelist2.isSafeAttribute(TEST_TAG, null, new Attribute('invalidAttribute', TEST_VALUE))> é verdadeiro ")
chamada antiga: assertFalse(safelist2.isSafeAttribute(TEST_TAG, invalidElement, invalidAttribute))
nova chamada: assertFalse(safelist2.isSafeAttribute(TEST_TAG, invalidElement, invalidAttribute), "Era esperado falso, mas " + result2130 + " <safelist2.isSafeAttribute(TEST_TAG, invalidElement, invalidAttribute)> é verdadeiro ")
chamada antiga: assertEquals("Hello <b>there</b>!", TextUtil.stripNewlines(cleanHtml))
nova chamada: assertEquals("Hello <b>there</b>!", TextUtil.stripNewlines(cleanHtml), "Era esperado valores iguais, mas  'Hello bthere/b!' é diferente de " + result2131 + " <TextUtil.stripNewlines(cleanHtml)>")
chamada antiga: assertEquals("Hello <b>there</b>!", TextUtil.stripNewlines(cleanHtml))
nova chamada: assertEquals("Hello <b>there</b>!", TextUtil.stripNewlines(cleanHtml), "Era esperado valores iguais, mas  'Hello bthere/b!' é diferente de " + result2132 + " <TextUtil.stripNewlines(cleanHtml)>")
chamada antiga: assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml))
nova chamada: assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml), "Era esperado valores iguais, mas  'pa rel=\'nofollow\'Dodgy/a a href=\'http://nice.com\' rel=\'nofollow\'Nice/a/pblockquoteHello/blockquote' é diferente de " + result2133 + " <TextUtil.stripNewlines(cleanHtml)>")
chamada antiga: assertEquals("<p><img src=\"http://example.com/\" alt=\"Image\"></p><p><img></p>", TextUtil.stripNewlines(cleanHtml))
nova chamada: assertEquals("<p><img src=\"http://example.com/\" alt=\"Image\"></p><p><img></p>", TextUtil.stripNewlines(cleanHtml), "Era esperado valores iguais, mas  'pimg src=\'http://example.com/\' alt=\'Image\'/ppimg/p' é diferente de " + result2134 + " <TextUtil.stripNewlines(cleanHtml)>")
chamada antiga: assertEquals("<h1>Head</h1><table><tbody><tr><td>One</td><td>Two</td></tr></tbody></table>", TextUtil.stripNewlines(cleanHtml))
nova chamada: assertEquals("<h1>Head</h1><table><tbody><tr><td>One</td><td>Two</td></tr></tbody></table>", TextUtil.stripNewlines(cleanHtml), "Era esperado valores iguais, mas  'h1Head/h1tabletbodytrtdOne/tdtdTwo/td/tr/tbody/table' é diferente de " + result2135 + " <TextUtil.stripNewlines(cleanHtml)>")
chamada antiga: assertEquals("<p>Nice</p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml))
nova chamada: assertEquals("<p>Nice</p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml), "Era esperado valores iguais, mas  'pNice/pblockquoteHello/blockquote' é diferente de " + result2136 + " <TextUtil.stripNewlines(cleanHtml)>")
chamada antiga: assertEquals("<p>Nice</p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml))
nova chamada: assertEquals("<p>Nice</p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml), "Era esperado valores iguais, mas  'pNice/pblockquoteHello/blockquote' é diferente de " + result2137 + " <TextUtil.stripNewlines(cleanHtml)>")
chamada antiga: assertEquals("<p><a href=\"http://nice.com\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml))
nova chamada: assertEquals("<p><a href=\"http://nice.com\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml), "Era esperado valores iguais, mas  'pa href=\'http://nice.com\'Nice/a/pblockquoteHello/blockquote' é diferente de " + result2138 + " <TextUtil.stripNewlines(cleanHtml)>")
chamada antiga: assertEquals("<p>Contact me <a rel=\"nofollow\">here</a></p>", TextUtil.stripNewlines(cleanHtml))
nova chamada: assertEquals("<p>Contact me <a rel=\"nofollow\">here</a></p>", TextUtil.stripNewlines(cleanHtml), "Era esperado valores iguais, mas  'pContact me a rel=\'nofollow\'here/a/p' é diferente de " + result2139 + " <TextUtil.stripNewlines(cleanHtml)>")
chamada antiga: assertEquals("<a href=\"SOMETHING://x\"></a>", TextUtil.stripNewlines(cleanHtml))
nova chamada: assertEquals("<a href=\"SOMETHING://x\"></a>", TextUtil.stripNewlines(cleanHtml), "Era esperado valores iguais, mas  'a href=\'SOMETHING://x\'/a' é diferente de " + result2140 + " <TextUtil.stripNewlines(cleanHtml)>")
chamada antiga: assertEquals("<p>Hello</p>", cleanHtml)
nova chamada: assertEquals("<p>Hello</p>", cleanHtml, "Era esperado valores iguais, mas  'pHello/p' é diferente de " + " cleanHtml")
chamada antiga: assertEquals("<p>Hello</p>", cleanHtml)
nova chamada: assertEquals("<p>Hello</p>", cleanHtml, "Era esperado valores iguais, mas  'pHello/p' é diferente de " + " cleanHtml")
chamada antiga: assertEquals("", cleanHtml)
nova chamada: assertEquals("", cleanHtml, "Era esperado valores iguais, mas  '' é diferente de " + " cleanHtml")
chamada antiga: assertEquals("<img>", cleanHtml)
nova chamada: assertEquals("<img>", cleanHtml, "Era esperado valores iguais, mas  'img' é diferente de " + " cleanHtml")
chamada antiga: assertEquals("<a>XSS</a>", cleanHtml)
nova chamada: assertEquals("<a>XSS</a>", cleanHtml, "Era esperado valores iguais, mas  'aXSS/a' é diferente de " + " cleanHtml")
chamada antiga: assertEquals("<a>Valid anchor</a>", cleanHtml)
nova chamada: assertEquals("<a>Valid anchor</a>", cleanHtml, "Era esperado valores iguais, mas  'aValid anchor/a' é diferente de " + " cleanHtml")
chamada antiga: assertEquals("<a>Invalid anchor</a>", cleanHtml)
nova chamada: assertEquals("<a>Invalid anchor</a>", cleanHtml, "Era esperado valores iguais, mas  'aInvalid anchor/a' é diferente de " + " cleanHtml")
chamada antiga: assertEquals(validAnchor, cleanHtml)
nova chamada: assertEquals(validAnchor, cleanHtml, "Era esperado valores iguais, mas  validAnchor é diferente de " + " cleanHtml")
chamada antiga: assertEquals("<a>Invalid anchor</a>", cleanHtml)
nova chamada: assertEquals("<a>Invalid anchor</a>", cleanHtml, "Era esperado valores iguais, mas  'aInvalid anchor/a' é diferente de " + " cleanHtml")
chamada antiga: assertEquals("<p>Test</p>", cleanHtml)
nova chamada: assertEquals("<p>Test</p>", cleanHtml, "Era esperado valores iguais, mas  'pTest/p' é diferente de " + " cleanHtml")
chamada antiga: assertEquals("<img alt=\"\">", cleanHtml)
nova chamada: assertEquals("<img alt=\"\">", cleanHtml, "Era esperado valores iguais, mas  'img alt=\'\'' é diferente de " + " cleanHtml")
chamada antiga: assertTrue(Jsoup.isValid(ok, Safelist.basic()))
nova chamada: assertTrue(Jsoup.isValid(ok, Safelist.basic()), "Era esperado verdadeiro, mas " + result2141 + " <Jsoup.isValid(ok, Safelist.basic())> é falso")
chamada antiga: assertTrue(Jsoup.isValid(ok1, Safelist.basic()))
nova chamada: assertTrue(Jsoup.isValid(ok1, Safelist.basic()), "Era esperado verdadeiro, mas " + result2142 + " <Jsoup.isValid(ok1, Safelist.basic())> é falso")
chamada antiga: assertTrue(cleaner.isValid(okDoc))
nova chamada: assertTrue(cleaner.isValid(okDoc), "Era esperado verdadeiro, mas " + result2143 + " <cleaner.isValid(okDoc)> é falso")
chamada antiga: assertEquals("<a href=\"http://example.com/foo\" rel=\"nofollow\">Link</a><img src=\"http://example.com/bar\">", clean)
nova chamada: assertEquals("<a href=\"http://example.com/foo\" rel=\"nofollow\">Link</a><img src=\"http://example.com/bar\">", clean, "Era esperado valores iguais, mas  'a href=\'http://example.com/foo\' rel=\'nofollow\'Link/aimg src=\'http://example.com/bar\'' é diferente de " + " clean")
chamada antiga: assertEquals("<a href=\"/foo\" rel=\"nofollow\">Link</a><img src=\"/bar\"> <img>", clean)
nova chamada: assertEquals("<a href=\"/foo\" rel=\"nofollow\">Link</a><img src=\"/bar\"> <img>", clean, "Era esperado valores iguais, mas  'a href=\'/foo\' rel=\'nofollow\'Link/aimg src=\'/bar\' img' é diferente de " + " clean")
chamada antiga: assertEquals("<a rel=\"nofollow\">Link</a>", clean)
nova chamada: assertEquals("<a rel=\"nofollow\">Link</a>", clean, "Era esperado valores iguais, mas  'a rel=\'nofollow\'Link/a' é diferente de " + " clean")
chamada antiga: assertEquals("<a rel=\"nofollow\">Link</a>", clean)
nova chamada: assertEquals("<a rel=\"nofollow\">Link</a>", clean, "Era esperado valores iguais, mas  'a rel=\'nofollow\'Link/a' é diferente de " + " clean")
chamada antiga: assertEquals("<a rel=\"nofollow\">Link</a>", cleanColon)
nova chamada: assertEquals("<a rel=\"nofollow\">Link</a>", cleanColon, "Era esperado valores iguais, mas  'a rel=\'nofollow\'Link/a' é diferente de " + " cleanColon")
chamada antiga: assertEquals("<a rel=\"nofollow\">Link</a>", clean)
nova chamada: assertEquals("<a rel=\"nofollow\">Link</a>", clean, "Era esperado valores iguais, mas  'a rel=\'nofollow\'Link/a' é diferente de " + " clean")
chamada antiga: assertEquals("<img> <img>", dropped)
nova chamada: assertEquals("<img> <img>", dropped, "Era esperado valores iguais, mas  'img img' é diferente de " + " dropped")
chamada antiga: assertEquals("<img src=\"cid:12345\"> <img src=\"data:gzzt\">", preserved)
nova chamada: assertEquals("<img src=\"cid:12345\"> <img src=\"data:gzzt\">", preserved, "Era esperado valores iguais, mas  'img src=\'cid:12345\' img src=\'data:gzzt\'' é diferente de " + " preserved")
chamada antiga: assertEquals("<p class=\"foo\"><a class=\"qux\">link</a></p>", clean)
nova chamada: assertEquals("<p class=\"foo\"><a class=\"qux\">link</a></p>", clean, "Era esperado valores iguais, mas  'p class=\'foo\'a class=\'qux\'link/a/p' é diferente de " + " clean")
chamada antiga: assertEquals("<p class=\"foo\">One</p>", clean)
nova chamada: assertEquals("<p class=\"foo\">One</p>", clean, "Era esperado valores iguais, mas  'p class=\'foo\'One/p' é diferente de " + " clean")
chamada antiga: assertNotSame(defaultOut, customOut)
nova chamada: assertNotSame(defaultOut, customOut, "Era esperado objetos diferentes, mas  defaultOut é igual a " + " customOut")
chamada antiga: assertEquals("<div><p>&Bscr;</p></div>", customOut)
nova chamada: assertEquals("<div><p>&Bscr;</p></div>", customOut, "Era esperado valores iguais, mas  'divp&Bscr;/p/div' é diferente de " + " customOut")
chamada antiga: assertEquals("<div>\n" + " <p>ℬ</p>\n" + "</div>", defaultOut)
nova chamada: assertEquals("<div>\n" + " <p>ℬ</p>\n" + "</div>", defaultOut, "Era esperado valores iguais, mas  'div\n' + ' pℬ/p\n' + '/div' é diferente de " + " defaultOut")
chamada antiga: assertEquals("<div><p>&#x212c;</p></div>", customOut2)
nova chamada: assertEquals("<div><p>&#x212c;</p></div>", customOut2, "Era esperado valores iguais, mas  'divp&#x212c;/p/div' é diferente de " + " customOut2")
chamada antiga: assertEquals("", clean)
nova chamada: assertEquals("", clean, "Era esperado valores iguais, mas  '' é diferente de " + " clean")
chamada antiga: assertNotNull(cleanDoc)
nova chamada: assertNotNull(cleanDoc, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(0, cleanDoc.body().childNodeSize())
nova chamada: assertEquals(0, cleanDoc.body().childNodeSize(), "Era esperado valores iguais, mas  0 é diferente de " + result2144 + " <cleanDoc.body().childNodeSize()>")
chamada antiga: assertEquals("привет", Jsoup.clean("привет", Safelist.none()))
nova chamada: assertEquals("привет", Jsoup.clean("привет", Safelist.none()), "Era esperado valores iguais, mas  'привет' é diferente de " + result2145 + " <Jsoup.clean('привет', Safelist.none())>")
chamada antiga: assertTrue(Jsoup.isValid("Hello<script>alert('Doh')</script>World !", safelist))
nova chamada: assertTrue(Jsoup.isValid("Hello<script>alert('Doh')</script>World !", safelist), "Era esperado verdadeiro, mas " + result2146 + " <Jsoup.isValid('Hello<script>alert('Doh')</script>World !', safelist)> é falso")
chamada antiga: assertEquals("<a rel=\"nofollow\"></a>", clean)
nova chamada: assertEquals("<a rel=\"nofollow\"></a>", clean, "Era esperado valores iguais, mas  'a rel=\'nofollow\'/a' é diferente de " + " clean")
chamada antiga: assertEquals("<a rel=\"nofollow\">Clean</a>", clean)
nova chamada: assertEquals("<a rel=\"nofollow\">Clean</a>", clean, "Era esperado valores iguais, mas  'a rel=\'nofollow\'Clean/a' é diferente de " + " clean")
chamada antiga: assertEquals("<a>One</a> <a>Two</a>", clean)
nova chamada: assertEquals("<a>One</a> <a>Two</a>", clean, "Era esperado valores iguais, mas  'aOne/a aTwo/a' é diferente de " + " clean")
chamada antiga: assertEquals(orig, TextUtil.stripNewlines(clean))
nova chamada: assertEquals(orig, TextUtil.stripNewlines(clean), "Era esperado valores iguais, mas  orig é diferente de " + result2147 + " <TextUtil.stripNewlines(clean)>")
chamada antiga: assertTrue(isValid)
nova chamada: assertTrue(isValid, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(Document.OutputSettings.Syntax.xml, result.outputSettings().syntax())
nova chamada: assertEquals(Document.OutputSettings.Syntax.xml, result.outputSettings().syntax(), "Era esperado valores iguais, mas  Document.OutputSettings.Syntax.xml é diferente de " + result2148 + " <result.outputSettings().syntax()>")
chamada antiga: assertEquals("<p>test<br /></p>", result.body().html())
nova chamada: assertEquals("<p>test<br /></p>", result.body().html(), "Era esperado valores iguais, mas  'ptestbr //p' é diferente de " + result2149 + " <result.body().html()>")
chamada antiga: assertEquals("2,2:22-2,5:25", origRange.toString())
nova chamada: assertEquals("2,2:22-2,5:25", origRange.toString(), "Era esperado valores iguais, mas  '2,2:22-2,5:25' é diferente de " + result2150 + " <origRange.toString()>")
chamada antiga: assertEquals(cleanRange, origRange)
nova chamada: assertEquals(cleanRange, origRange, "Era esperado valores iguais, mas  cleanRange é diferente de " + " origRange")
chamada antiga: assertEquals(clean.endSourceRange(), orig.endSourceRange())
nova chamada: assertEquals(clean.endSourceRange(), orig.endSourceRange(), "Era esperado valores iguais, mas " + result2151 + " <clean.endSourceRange()> é diferente de " + result2152 + " <orig.endSourceRange()>")
chamada antiga: assertEquals("", StringUtil.join(Collections.singletonList(""), " "))
nova chamada: assertEquals("", StringUtil.join(Collections.singletonList(""), " "), "Era esperado valores iguais, mas  '' é diferente de " + result2153 + " <StringUtil.join(Collections.singletonList(''), ' ')>")
chamada antiga: assertEquals("one", StringUtil.join(Collections.singletonList("one"), " "))
nova chamada: assertEquals("one", StringUtil.join(Collections.singletonList("one"), " "), "Era esperado valores iguais, mas  'one' é diferente de " + result2154 + " <StringUtil.join(Collections.singletonList('one'), ' ')>")
chamada antiga: assertEquals("one two three", StringUtil.join(Arrays.asList("one", "two", "three"), " "))
nova chamada: assertEquals("one two three", StringUtil.join(Arrays.asList("one", "two", "three"), " "), "Era esperado valores iguais, mas  'one two three' é diferente de " + result2155 + " <StringUtil.join(Arrays.asList('one', 'two', 'three'), ' ')>")
chamada antiga: assertEquals("", StringUtil.padding(0))
nova chamada: assertEquals("", StringUtil.padding(0), "Era esperado valores iguais, mas  '' é diferente de " + result2156 + " <StringUtil.padding(0)>")
chamada antiga: assertEquals(" ", StringUtil.padding(1))
nova chamada: assertEquals(" ", StringUtil.padding(1), "Era esperado valores iguais, mas  ' ' é diferente de " + result2157 + " <StringUtil.padding(1)>")
chamada antiga: assertEquals("  ", StringUtil.padding(2))
nova chamada: assertEquals("  ", StringUtil.padding(2), "Era esperado valores iguais, mas  '  ' é diferente de " + result2158 + " <StringUtil.padding(2)>")
chamada antiga: assertEquals("               ", StringUtil.padding(15))
nova chamada: assertEquals("               ", StringUtil.padding(15), "Era esperado valores iguais, mas  '               ' é diferente de " + result2159 + " <StringUtil.padding(15)>")
chamada antiga: assertEquals("                              ", StringUtil.padding(45))
nova chamada: assertEquals("                              ", StringUtil.padding(45), "Era esperado valores iguais, mas  '                              ' é diferente de " + result2160 + " <StringUtil.padding(45)>")
chamada antiga: assertEquals("", StringUtil.padding(0, -1))
nova chamada: assertEquals("", StringUtil.padding(0, -1), "Era esperado valores iguais, mas  '' é diferente de " + result2161 + " <StringUtil.padding(0, -1)>")
chamada antiga: assertEquals("                    ", StringUtil.padding(20, -1))
nova chamada: assertEquals("                    ", StringUtil.padding(20, -1), "Era esperado valores iguais, mas  '                    ' é diferente de " + result2162 + " <StringUtil.padding(20, -1)>")
chamada antiga: assertEquals("                     ", StringUtil.padding(21, -1))
nova chamada: assertEquals("                     ", StringUtil.padding(21, -1), "Era esperado valores iguais, mas  '                     ' é diferente de " + result2163 + " <StringUtil.padding(21, -1)>")
chamada antiga: assertEquals("                              ", StringUtil.padding(30, -1))
nova chamada: assertEquals("                              ", StringUtil.padding(30, -1), "Era esperado valores iguais, mas  '                              ' é diferente de " + result2164 + " <StringUtil.padding(30, -1)>")
chamada antiga: assertEquals("                                             ", StringUtil.padding(45, -1))
nova chamada: assertEquals("                                             ", StringUtil.padding(45, -1), "Era esperado valores iguais, mas  '                                             ' é diferente de " + result2165 + " <StringUtil.padding(45, -1)>")
chamada antiga: assertEquals("", StringUtil.padding(0, 0))
nova chamada: assertEquals("", StringUtil.padding(0, 0), "Era esperado valores iguais, mas  '' é diferente de " + result2166 + " <StringUtil.padding(0, 0)>")
chamada antiga: assertEquals("", StringUtil.padding(21, 0))
nova chamada: assertEquals("", StringUtil.padding(21, 0), "Era esperado valores iguais, mas  '' é diferente de " + result2167 + " <StringUtil.padding(21, 0)>")
chamada antiga: assertEquals("", StringUtil.padding(0, 30))
nova chamada: assertEquals("", StringUtil.padding(0, 30), "Era esperado valores iguais, mas  '' é diferente de " + result2168 + " <StringUtil.padding(0, 30)>")
chamada antiga: assertEquals(" ", StringUtil.padding(1, 30))
nova chamada: assertEquals(" ", StringUtil.padding(1, 30), "Era esperado valores iguais, mas  ' ' é diferente de " + result2169 + " <StringUtil.padding(1, 30)>")
chamada antiga: assertEquals("  ", StringUtil.padding(2, 30))
nova chamada: assertEquals("  ", StringUtil.padding(2, 30), "Era esperado valores iguais, mas  '  ' é diferente de " + result2170 + " <StringUtil.padding(2, 30)>")
chamada antiga: assertEquals("               ", StringUtil.padding(15, 30))
nova chamada: assertEquals("               ", StringUtil.padding(15, 30), "Era esperado valores iguais, mas  '               ' é diferente de " + result2171 + " <StringUtil.padding(15, 30)>")
chamada antiga: assertEquals("                              ", StringUtil.padding(45, 30))
nova chamada: assertEquals("                              ", StringUtil.padding(45, 30), "Era esperado valores iguais, mas  '                              ' é diferente de " + result2172 + " <StringUtil.padding(45, 30)>")
chamada antiga: assertEquals(5, StringUtil.padding(20, 5).length())
nova chamada: assertEquals(5, StringUtil.padding(20, 5).length(), "Era esperado valores iguais, mas  5 é diferente de " + result2173 + " <StringUtil.padding(20, 5).length()>")
chamada antiga: assertEquals(21, padding.length)
nova chamada: assertEquals(21, padding.length, "Era esperado valores iguais, mas  21 é diferente de " + " padding.length")
chamada antiga: assertTrue(StringUtil.isBlank(null))
nova chamada: assertTrue(StringUtil.isBlank(null), "Era esperado verdadeiro, mas " + result2174 + " <StringUtil.isBlank(null)> é falso")
chamada antiga: assertTrue(StringUtil.isBlank(""))
nova chamada: assertTrue(StringUtil.isBlank(""), "Era esperado verdadeiro, mas " + result2175 + " <StringUtil.isBlank('')> é falso")
chamada antiga: assertTrue(StringUtil.isBlank("      "))
nova chamada: assertTrue(StringUtil.isBlank("      "), "Era esperado verdadeiro, mas " + result2176 + " <StringUtil.isBlank('      ')> é falso")
chamada antiga: assertTrue(StringUtil.isBlank("   \r\n  "))
nova chamada: assertTrue(StringUtil.isBlank("   \r\n  "), "Era esperado verdadeiro, mas " + result2177 + " <StringUtil.isBlank('   \r\n  ')> é falso")
chamada antiga: assertTrue(StringUtil.isNumeric("1"))
nova chamada: assertTrue(StringUtil.isNumeric("1"), "Era esperado verdadeiro, mas " + result2178 + " <StringUtil.isNumeric('1')> é falso")
chamada antiga: assertTrue(StringUtil.isNumeric("1234"))
nova chamada: assertTrue(StringUtil.isNumeric("1234"), "Era esperado verdadeiro, mas " + result2179 + " <StringUtil.isNumeric('1234')> é falso")
chamada antiga: assertTrue(StringUtil.isWhitespace('\t'))
nova chamada: assertTrue(StringUtil.isWhitespace('\t'), "Era esperado verdadeiro, mas " + result2180 + " <StringUtil.isWhitespace('\t')> é falso")
chamada antiga: assertTrue(StringUtil.isWhitespace('\n'))
nova chamada: assertTrue(StringUtil.isWhitespace('\n'), "Era esperado verdadeiro, mas " + result2181 + " <StringUtil.isWhitespace('\n')> é falso")
chamada antiga: assertTrue(StringUtil.isWhitespace('\r'))
nova chamada: assertTrue(StringUtil.isWhitespace('\r'), "Era esperado verdadeiro, mas " + result2182 + " <StringUtil.isWhitespace('\r')> é falso")
chamada antiga: assertTrue(StringUtil.isWhitespace('\f'))
nova chamada: assertTrue(StringUtil.isWhitespace('\f'), "Era esperado verdadeiro, mas " + result2183 + " <StringUtil.isWhitespace('\f')> é falso")
chamada antiga: assertTrue(StringUtil.isWhitespace(' '))
nova chamada: assertTrue(StringUtil.isWhitespace(' '), "Era esperado verdadeiro, mas " + result2184 + " <StringUtil.isWhitespace(' ')> é falso")
chamada antiga: assertEquals(" ", normaliseWhitespace("    \r \n \r\n"))
nova chamada: assertEquals(" ", normaliseWhitespace("    \r \n \r\n"), "Era esperado valores iguais, mas  ' ' é diferente de " + result2185 + " <normaliseWhitespace('    \r \n \r\n')>")
chamada antiga: assertEquals(" hello there ", normaliseWhitespace("   hello   \r \n  there    \n"))
nova chamada: assertEquals(" hello there ", normaliseWhitespace("   hello   \r \n  there    \n"), "Era esperado valores iguais, mas  ' hello there ' é diferente de " + result2186 + " <normaliseWhitespace('   hello   \r \n  there    \n')>")
chamada antiga: assertEquals("hello", normaliseWhitespace("hello"))
nova chamada: assertEquals("hello", normaliseWhitespace("hello"), "Era esperado valores iguais, mas  'hello' é diferente de " + result2187 + " <normaliseWhitespace('hello')>")
chamada antiga: assertEquals("hello there", normaliseWhitespace("hello\nthere"))
nova chamada: assertEquals("hello there", normaliseWhitespace("hello\nthere"), "Era esperado valores iguais, mas  'hello there' é diferente de " + result2188 + " <normaliseWhitespace('hello\nthere')>")
chamada antiga: assertEquals(test71540charsExpectedSingleWhitespace, normaliseWhitespace(test71540chars))
nova chamada: assertEquals(test71540charsExpectedSingleWhitespace, normaliseWhitespace(test71540chars), "Era esperado valores iguais, mas  test71540charsExpectedSingleWhitespace é diferente de " + result2189 + " <normaliseWhitespace(test71540chars)>")
chamada antiga: assertEquals(test71540charsExpectedSingleWhitespace, extractedText)
nova chamada: assertEquals(test71540charsExpectedSingleWhitespace, extractedText, "Era esperado valores iguais, mas  test71540charsExpectedSingleWhitespace é diferente de " + " extractedText")
chamada antiga: assertEquals("http://example.com/one/two?three", resolve("http://example.com", "./one/two?three"))
nova chamada: assertEquals("http://example.com/one/two?three", resolve("http://example.com", "./one/two?three"), "Era esperado valores iguais, mas  'http://example.com/one/two?three' é diferente de " + result2190 + " <resolve('http://example.com', './one/two?three')>")
chamada antiga: assertEquals("http://example.com/one/two?three", resolve("http://example.com?one", "./one/two?three"))
nova chamada: assertEquals("http://example.com/one/two?three", resolve("http://example.com?one", "./one/two?three"), "Era esperado valores iguais, mas  'http://example.com/one/two?three' é diferente de " + result2191 + " <resolve('http://example.com?one', './one/two?three')>")
chamada antiga: assertEquals("http://example.com/one/two?three#four", resolve("http://example.com", "./one/two?three#four"))
nova chamada: assertEquals("http://example.com/one/two?three#four", resolve("http://example.com", "./one/two?three#four"), "Era esperado valores iguais, mas  'http://example.com/one/two?three#four' é diferente de " + result2192 + " <resolve('http://example.com', './one/two?three#four')>")
chamada antiga: assertEquals("https://example.com/one", resolve("http://example.com/", "https://example.com/one"))
nova chamada: assertEquals("https://example.com/one", resolve("http://example.com/", "https://example.com/one"), "Era esperado valores iguais, mas  'https://example.com/one' é diferente de " + result2193 + " <resolve('http://example.com/', 'https://example.com/one')>")
chamada antiga: assertEquals("http://example.com/one/two.html", resolve("http://example.com/two/", "../one/two.html"))
nova chamada: assertEquals("http://example.com/one/two.html", resolve("http://example.com/two/", "../one/two.html"), "Era esperado valores iguais, mas  'http://example.com/one/two.html' é diferente de " + result2194 + " <resolve('http://example.com/two/', '../one/two.html')>")
chamada antiga: assertEquals("https://example2.com/one", resolve("https://example.com/", "//example2.com/one"))
nova chamada: assertEquals("https://example2.com/one", resolve("https://example.com/", "//example2.com/one"), "Era esperado valores iguais, mas  'https://example2.com/one' é diferente de " + result2195 + " <resolve('https://example.com/', '//example2.com/one')>")
chamada antiga: assertEquals("https://example.com:8080/one", resolve("https://example.com:8080", "./one"))
nova chamada: assertEquals("https://example.com:8080/one", resolve("https://example.com:8080", "./one"), "Era esperado valores iguais, mas  'https://example.com:8080/one' é diferente de " + result2196 + " <resolve('https://example.com:8080', './one')>")
chamada antiga: assertEquals("https://example2.com/one", resolve("http://example.com/", "https://example2.com/one"))
nova chamada: assertEquals("https://example2.com/one", resolve("http://example.com/", "https://example2.com/one"), "Era esperado valores iguais, mas  'https://example2.com/one' é diferente de " + result2197 + " <resolve('http://example.com/', 'https://example2.com/one')>")
chamada antiga: assertEquals("https://example.com/one", resolve("wrong", "https://example.com/one"))
nova chamada: assertEquals("https://example.com/one", resolve("wrong", "https://example.com/one"), "Era esperado valores iguais, mas  'https://example.com/one' é diferente de " + result2198 + " <resolve('wrong', 'https://example.com/one')>")
chamada antiga: assertEquals("https://example.com/one", resolve("https://example.com/one", ""))
nova chamada: assertEquals("https://example.com/one", resolve("https://example.com/one", ""), "Era esperado valores iguais, mas  'https://example.com/one' é diferente de " + result2199 + " <resolve('https://example.com/one', '')>")
chamada antiga: assertEquals("", resolve("wrong", "also wrong"))
nova chamada: assertEquals("", resolve("wrong", "also wrong"), "Era esperado valores iguais, mas  '' é diferente de " + result2200 + " <resolve('wrong', 'also wrong')>")
chamada antiga: assertEquals("ftp://example.com/one", resolve("ftp://example.com/two/", "../one"))
nova chamada: assertEquals("ftp://example.com/one", resolve("ftp://example.com/two/", "../one"), "Era esperado valores iguais, mas  'ftp://example.com/one' é diferente de " + result2201 + " <resolve('ftp://example.com/two/', '../one')>")
chamada antiga: assertEquals("ftp://example.com/one/two.c", resolve("ftp://example.com/one/", "./two.c"))
nova chamada: assertEquals("ftp://example.com/one/two.c", resolve("ftp://example.com/one/", "./two.c"), "Era esperado valores iguais, mas  'ftp://example.com/one/two.c' é diferente de " + result2202 + " <resolve('ftp://example.com/one/', './two.c')>")
chamada antiga: assertEquals("ftp://example.com/one/two.c", resolve("ftp://example.com/one/", "two.c"))
nova chamada: assertEquals("ftp://example.com/one/two.c", resolve("ftp://example.com/one/", "two.c"), "Era esperado valores iguais, mas  'ftp://example.com/one/two.c' é diferente de " + result2203 + " <resolve('ftp://example.com/one/', 'two.c')>")
chamada antiga: assertEquals("http://example.com/g", resolve("http://example.com/b/c/d;p?q", "../../../g"))
nova chamada: assertEquals("http://example.com/g", resolve("http://example.com/b/c/d;p?q", "../../../g"), "Era esperado valores iguais, mas  'http://example.com/g' é diferente de " + result2204 + " <resolve('http://example.com/b/c/d;p?q', '../../../g')>")
chamada antiga: assertEquals("http://example.com/g", resolve("http://example.com/b/c/d;p?q", "../../../../g"))
nova chamada: assertEquals("http://example.com/g", resolve("http://example.com/b/c/d;p?q", "../../../../g"), "Era esperado valores iguais, mas  'http://example.com/g' é diferente de " + result2205 + " <resolve('http://example.com/b/c/d;p?q', '../../../../g')>")
chamada antiga: assertEquals("http://example.com/g", resolve("http://example.com/b/c/d;p?q", "/./g"))
nova chamada: assertEquals("http://example.com/g", resolve("http://example.com/b/c/d;p?q", "/./g"), "Era esperado valores iguais, mas  'http://example.com/g' é diferente de " + result2206 + " <resolve('http://example.com/b/c/d;p?q', '/./g')>")
chamada antiga: assertEquals("http://example.com/g", resolve("http://example.com/b/c/d;p?q", "/../g"))
nova chamada: assertEquals("http://example.com/g", resolve("http://example.com/b/c/d;p?q", "/../g"), "Era esperado valores iguais, mas  'http://example.com/g' é diferente de " + result2207 + " <resolve('http://example.com/b/c/d;p?q', '/../g')>")
chamada antiga: assertEquals("http://example.com/b/c/g.", resolve("http://example.com/b/c/d;p?q", "g."))
nova chamada: assertEquals("http://example.com/b/c/g.", resolve("http://example.com/b/c/d;p?q", "g."), "Era esperado valores iguais, mas  'http://example.com/b/c/g.' é diferente de " + result2208 + " <resolve('http://example.com/b/c/d;p?q', 'g.')>")
chamada antiga: assertEquals("http://example.com/b/c/.g", resolve("http://example.com/b/c/d;p?q", ".g"))
nova chamada: assertEquals("http://example.com/b/c/.g", resolve("http://example.com/b/c/d;p?q", ".g"), "Era esperado valores iguais, mas  'http://example.com/b/c/.g' é diferente de " + result2209 + " <resolve('http://example.com/b/c/d;p?q', '.g')>")
chamada antiga: assertEquals("http://example.com/b/c/g..", resolve("http://example.com/b/c/d;p?q", "g.."))
nova chamada: assertEquals("http://example.com/b/c/g..", resolve("http://example.com/b/c/d;p?q", "g.."), "Era esperado valores iguais, mas  'http://example.com/b/c/g..' é diferente de " + result2210 + " <resolve('http://example.com/b/c/d;p?q', 'g..')>")
chamada antiga: assertEquals("http://example.com/b/c/..g", resolve("http://example.com/b/c/d;p?q", "..g"))
nova chamada: assertEquals("http://example.com/b/c/..g", resolve("http://example.com/b/c/d;p?q", "..g"), "Era esperado valores iguais, mas  'http://example.com/b/c/..g' é diferente de " + result2211 + " <resolve('http://example.com/b/c/d;p?q', '..g')>")
chamada antiga: assertEquals("http://example.com/b/g", resolve("http://example.com/b/c/d;p?q", "./../g"))
nova chamada: assertEquals("http://example.com/b/g", resolve("http://example.com/b/c/d;p?q", "./../g"), "Era esperado valores iguais, mas  'http://example.com/b/g' é diferente de " + result2212 + " <resolve('http://example.com/b/c/d;p?q', './../g')>")
chamada antiga: assertEquals("http://example.com/b/c/g/", resolve("http://example.com/b/c/d;p?q", "./g/."))
nova chamada: assertEquals("http://example.com/b/c/g/", resolve("http://example.com/b/c/d;p?q", "./g/."), "Era esperado valores iguais, mas  'http://example.com/b/c/g/' é diferente de " + result2213 + " <resolve('http://example.com/b/c/d;p?q', './g/.')>")
chamada antiga: assertEquals("http://example.com/b/c/g/h", resolve("http://example.com/b/c/d;p?q", "g/./h"))
nova chamada: assertEquals("http://example.com/b/c/g/h", resolve("http://example.com/b/c/d;p?q", "g/./h"), "Era esperado valores iguais, mas  'http://example.com/b/c/g/h' é diferente de " + result2214 + " <resolve('http://example.com/b/c/d;p?q', 'g/./h')>")
chamada antiga: assertEquals("http://example.com/b/c/h", resolve("http://example.com/b/c/d;p?q", "g/../h"))
nova chamada: assertEquals("http://example.com/b/c/h", resolve("http://example.com/b/c/d;p?q", "g/../h"), "Era esperado valores iguais, mas  'http://example.com/b/c/h' é diferente de " + result2215 + " <resolve('http://example.com/b/c/d;p?q', 'g/../h')>")
chamada antiga: assertEquals("http://example.com/b/c/g;x=1/y", resolve("http://example.com/b/c/d;p?q", "g;x=1/./y"))
nova chamada: assertEquals("http://example.com/b/c/g;x=1/y", resolve("http://example.com/b/c/d;p?q", "g;x=1/./y"), "Era esperado valores iguais, mas  'http://example.com/b/c/g;x=1/y' é diferente de " + result2216 + " <resolve('http://example.com/b/c/d;p?q', 'g;x=1/./y')>")
chamada antiga: assertEquals("http://example.com/b/c/y", resolve("http://example.com/b/c/d;p?q", "g;x=1/../y"))
nova chamada: assertEquals("http://example.com/b/c/y", resolve("http://example.com/b/c/d;p?q", "g;x=1/../y"), "Era esperado valores iguais, mas  'http://example.com/b/c/y' é diferente de " + result2217 + " <resolve('http://example.com/b/c/d;p?q', 'g;x=1/../y')>")
chamada antiga: assertEquals("http://example.com/b/c/g?y/./x", resolve("http://example.com/b/c/d;p?q", "g?y/./x"))
nova chamada: assertEquals("http://example.com/b/c/g?y/./x", resolve("http://example.com/b/c/d;p?q", "g?y/./x"), "Era esperado valores iguais, mas  'http://example.com/b/c/g?y/./x' é diferente de " + result2218 + " <resolve('http://example.com/b/c/d;p?q', 'g?y/./x')>")
chamada antiga: assertEquals("http://example.com/b/c/g?y/../x", resolve("http://example.com/b/c/d;p?q", "g?y/../x"))
nova chamada: assertEquals("http://example.com/b/c/g?y/../x", resolve("http://example.com/b/c/d;p?q", "g?y/../x"), "Era esperado valores iguais, mas  'http://example.com/b/c/g?y/../x' é diferente de " + result2219 + " <resolve('http://example.com/b/c/d;p?q', 'g?y/../x')>")
chamada antiga: assertEquals("http://example.com/b/c/g#s/./x", resolve("http://example.com/b/c/d;p?q", "g#s/./x"))
nova chamada: assertEquals("http://example.com/b/c/g#s/./x", resolve("http://example.com/b/c/d;p?q", "g#s/./x"), "Era esperado valores iguais, mas  'http://example.com/b/c/g#s/./x' é diferente de " + result2220 + " <resolve('http://example.com/b/c/d;p?q', 'g#s/./x')>")
chamada antiga: assertEquals("http://example.com/b/c/g#s/../x", resolve("http://example.com/b/c/d;p?q", "g#s/../x"))
nova chamada: assertEquals("http://example.com/b/c/g#s/../x", resolve("http://example.com/b/c/d;p?q", "g#s/../x"), "Era esperado valores iguais, mas  'http://example.com/b/c/g#s/../x' é diferente de " + result2221 + " <resolve('http://example.com/b/c/d;p?q', 'g#s/../x')>")
chamada antiga: assertEquals("foo:bar", resolve("\nhttps://\texample.com/", "\r\nfo\to:ba\br"))
nova chamada: assertEquals("foo:bar", resolve("\nhttps://\texample.com/", "\r\nfo\to:ba\br"), "Era esperado valores iguais, mas  'foo:bar' é diferente de " + result2222 + " <resolve('\nhttps://\texample.com/', '\r\nfo\to:ba\br')>")
chamada antiga: assertEquals("https://example.com/foo bar/", resolve("HTTPS://example.com/example/", "../foo bar/"))
nova chamada: assertEquals("https://example.com/foo bar/", resolve("HTTPS://example.com/example/", "../foo bar/"), "Era esperado valores iguais, mas  'https://example.com/foo bar/' é diferente de " + result2223 + " <resolve('HTTPS://example.com/example/', '../foo bar/')>")
chamada antiga: assertTrue(StringUtil.isAscii(""))
nova chamada: assertTrue(StringUtil.isAscii(""), "Era esperado verdadeiro, mas " + result2224 + " <StringUtil.isAscii('')> é falso")
chamada antiga: assertTrue(StringUtil.isAscii("example.com"))
nova chamada: assertTrue(StringUtil.isAscii("example.com"), "Era esperado verdadeiro, mas " + result2225 + " <StringUtil.isAscii('example.com')> é falso")
chamada antiga: assertTrue(StringUtil.isAscii("One Two"))
nova chamada: assertTrue(StringUtil.isAscii("One Two"), "Era esperado verdadeiro, mas " + result2226 + " <StringUtil.isAscii('One Two')> é falso")
chamada antiga: assertEquals(3, els.size())
nova chamada: assertEquals(3, els.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2227 + " <els.size()>")
chamada antiga: assertEquals("1", els.get(0).id())
nova chamada: assertEquals("1", els.get(0).id(), "Era esperado valores iguais, mas  '1' é diferente de " + result2228 + " <els.get(0).id()>")
chamada antiga: assertEquals("2", els.get(1).id())
nova chamada: assertEquals("2", els.get(1).id(), "Era esperado valores iguais, mas  '2' é diferente de " + result2229 + " <els.get(1).id()>")
chamada antiga: assertEquals("3", els.get(2).id())
nova chamada: assertEquals("3", els.get(2).id(), "Era esperado valores iguais, mas  '3' é diferente de " + result2230 + " <els.get(2).id()>")
chamada antiga: assertEquals(0, none.size())
nova chamada: assertEquals(0, none.size(), "Era esperado valores iguais, mas  0 é diferente de " + result2231 + " <none.size()>")
chamada antiga: assertEquals(2, els.size())
nova chamada: assertEquals(2, els.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2232 + " <els.size()>")
chamada antiga: assertEquals("Hello", els.get(0).text())
nova chamada: assertEquals("Hello", els.get(0).text(), "Era esperado valores iguais, mas  'Hello' é diferente de " + result2233 + " <els.get(0).text()>")
chamada antiga: assertEquals("Foo two!", els.get(1).text())
nova chamada: assertEquals("Foo two!", els.get(1).text(), "Era esperado valores iguais, mas  'Foo two!' é diferente de " + result2234 + " <els.get(1).text()>")
chamada antiga: assertEquals(0, none.size())
nova chamada: assertEquals(0, none.size(), "Era esperado valores iguais, mas  0 é diferente de " + result2235 + " <none.size()>")
chamada antiga: assertEquals(2, els.size())
nova chamada: assertEquals(2, els.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2236 + " <els.size()>")
chamada antiga: assertEquals("0", els.get(0).id())
nova chamada: assertEquals("0", els.get(0).id(), "Era esperado valores iguais, mas  '0' é diferente de " + result2237 + " <els.get(0).id()>")
chamada antiga: assertEquals("1", els.get(1).id())
nova chamada: assertEquals("1", els.get(1).id(), "Era esperado valores iguais, mas  '1' é diferente de " + result2238 + " <els.get(1).id()>")
chamada antiga: assertEquals(0, none.size())
nova chamada: assertEquals(0, none.size(), "Era esperado valores iguais, mas  0 é diferente de " + result2239 + " <none.size()>")
chamada antiga: assertEquals(1, els2.size())
nova chamada: assertEquals(1, els2.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2240 + " <els2.size()>")
chamada antiga: assertEquals(elsFromAttr.size(), elsFromClass.size())
nova chamada: assertEquals(elsFromAttr.size(), elsFromClass.size(), "Era esperado valores iguais, mas " + result2241 + " <elsFromAttr.size()> é diferente de " + result2242 + " <elsFromClass.size()>")
chamada antiga: assertEquals(3, elsFromClass.size())
nova chamada: assertEquals(3, elsFromClass.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2243 + " <elsFromClass.size()>")
chamada antiga: assertEquals("Two", elsFromClass.get(1).text())
nova chamada: assertEquals("Two", elsFromClass.get(1).text(), "Era esperado valores iguais, mas  'Two' é diferente de " + result2244 + " <elsFromClass.get(1).text()>")
chamada antiga: assertEquals(4, withTitle.size())
nova chamada: assertEquals(4, withTitle.size(), "Era esperado valores iguais, mas  4 é diferente de " + result2245 + " <withTitle.size()>")
chamada antiga: assertEquals(1, foo.size())
nova chamada: assertEquals(1, foo.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2246 + " <foo.size()>")
chamada antiga: assertEquals(1, foo2.size())
nova chamada: assertEquals(1, foo2.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2247 + " <foo2.size()>")
chamada antiga: assertEquals(1, foo3.size())
nova chamada: assertEquals(1, foo3.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2248 + " <foo3.size()>")
chamada antiga: assertEquals(1, dataName.size())
nova chamada: assertEquals(1, dataName.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2249 + " <dataName.size()>")
chamada antiga: assertEquals("with spaces", dataName.first().attr("data-name"))
nova chamada: assertEquals("with spaces", dataName.first().attr("data-name"), "Era esperado valores iguais, mas  'with spaces' é diferente de " + result2250 + " <dataName.first().attr('data-name')>")
chamada antiga: assertEquals(5, not.size())
nova chamada: assertEquals(5, not.size(), "Era esperado valores iguais, mas  5 é diferente de " + result2251 + " <not.size()>")
chamada antiga: assertEquals("Foo", not.first().attr("title"))
nova chamada: assertEquals("Foo", not.first().attr("title"), "Era esperado valores iguais, mas  'Foo' é diferente de " + result2252 + " <not.first().attr('title')>")
chamada antiga: assertEquals(2, starts.size())
nova chamada: assertEquals(2, starts.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2253 + " <starts.size()>")
chamada antiga: assertEquals("Bar", starts.first().attr("title"))
nova chamada: assertEquals("Bar", starts.first().attr("title"), "Era esperado valores iguais, mas  'Bar' é diferente de " + result2254 + " <starts.first().attr('title')>")
chamada antiga: assertEquals("Balim", starts.last().attr("title"))
nova chamada: assertEquals("Balim", starts.last().attr("title"), "Era esperado valores iguais, mas  'Balim' é diferente de " + result2255 + " <starts.last().attr('title')>")
chamada antiga: assertEquals(2, ends.size())
nova chamada: assertEquals(2, ends.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2256 + " <ends.size()>")
chamada antiga: assertEquals("Balim", ends.first().attr("title"))
nova chamada: assertEquals("Balim", ends.first().attr("title"), "Era esperado valores iguais, mas  'Balim' é diferente de " + result2257 + " <ends.first().attr('title')>")
chamada antiga: assertEquals("SLIM", ends.last().attr("title"))
nova chamada: assertEquals("SLIM", ends.last().attr("title"), "Era esperado valores iguais, mas  'SLIM' é diferente de " + result2258 + " <ends.last().attr('title')>")
chamada antiga: assertEquals(2, contains.size())
nova chamada: assertEquals(2, contains.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2259 + " <contains.size()>")
chamada antiga: assertEquals("Balim", contains.first().attr("title"))
nova chamada: assertEquals("Balim", contains.first().attr("title"), "Era esperado valores iguais, mas  'Balim' é diferente de " + result2260 + " <contains.first().attr('title')>")
chamada antiga: assertEquals("SLIM", contains.last().attr("title"))
nova chamada: assertEquals("SLIM", contains.last().attr("title"), "Era esperado valores iguais, mas  'SLIM' é diferente de " + result2261 + " <contains.last().attr('title')>")
chamada antiga: assertEquals(2, byTag.size())
nova chamada: assertEquals(2, byTag.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2262 + " <byTag.size()>")
chamada antiga: assertEquals("1", byTag.first().id())
nova chamada: assertEquals("1", byTag.first().id(), "Era esperado valores iguais, mas  '1' é diferente de " + result2263 + " <byTag.first().id()>")
chamada antiga: assertEquals("2", byTag.last().id())
nova chamada: assertEquals("2", byTag.last().id(), "Era esperado valores iguais, mas  '2' é diferente de " + result2264 + " <byTag.last().id()>")
chamada antiga: assertEquals(1, byAttr.size())
nova chamada: assertEquals(1, byAttr.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2265 + " <byAttr.size()>")
chamada antiga: assertEquals("2", byAttr.last().id())
nova chamada: assertEquals("2", byAttr.last().id(), "Era esperado valores iguais, mas  '2' é diferente de " + result2266 + " <byAttr.last().id()>")
chamada antiga: assertEquals(1, byTagAttr.size())
nova chamada: assertEquals(1, byTagAttr.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2267 + " <byTagAttr.size()>")
chamada antiga: assertEquals("2", byTagAttr.last().id())
nova chamada: assertEquals("2", byTagAttr.last().id(), "Era esperado valores iguais, mas  '2' é diferente de " + result2268 + " <byTagAttr.last().id()>")
chamada antiga: assertEquals(2, byContains.size())
nova chamada: assertEquals(2, byContains.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2269 + " <byContains.size()>")
chamada antiga: assertEquals("1", byContains.first().id())
nova chamada: assertEquals("1", byContains.first().id(), "Era esperado valores iguais, mas  '1' é diferente de " + result2270 + " <byContains.first().id()>")
chamada antiga: assertEquals("2", byContains.last().id())
nova chamada: assertEquals("2", byContains.last().id(), "Era esperado valores iguais, mas  '2' é diferente de " + result2271 + " <byContains.last().id()>")
chamada antiga: assertEquals(2, byTag.size())
nova chamada: assertEquals(2, byTag.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2272 + " <byTag.size()>")
chamada antiga: assertEquals("1", byTag.first().id())
nova chamada: assertEquals("1", byTag.first().id(), "Era esperado valores iguais, mas  '1' é diferente de " + result2273 + " <byTag.first().id()>")
chamada antiga: assertEquals("2", byTag.last().id())
nova chamada: assertEquals("2", byTag.last().id(), "Era esperado valores iguais, mas  '2' é diferente de " + result2274 + " <byTag.last().id()>")
chamada antiga: assertEquals(1, byAttr.size())
nova chamada: assertEquals(1, byAttr.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2275 + " <byAttr.size()>")
chamada antiga: assertEquals("2", byAttr.last().id())
nova chamada: assertEquals("2", byAttr.last().id(), "Era esperado valores iguais, mas  '2' é diferente de " + result2276 + " <byAttr.last().id()>")
chamada antiga: assertEquals(1, byTagAttr.size())
nova chamada: assertEquals(1, byTagAttr.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2277 + " <byTagAttr.size()>")
chamada antiga: assertEquals("2", byTagAttr.last().id())
nova chamada: assertEquals("2", byTagAttr.last().id(), "Era esperado valores iguais, mas  '2' é diferente de " + result2278 + " <byTagAttr.last().id()>")
chamada antiga: assertEquals(2, byContains.size())
nova chamada: assertEquals(2, byContains.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2279 + " <byContains.size()>")
chamada antiga: assertEquals("1", byContains.first().id())
nova chamada: assertEquals("1", byContains.first().id(), "Era esperado valores iguais, mas  '1' é diferente de " + result2280 + " <byContains.first().id()>")
chamada antiga: assertEquals("2", byContains.last().id())
nova chamada: assertEquals("2", byContains.last().id(), "Era esperado valores iguais, mas  '2' é diferente de " + result2281 + " <byContains.last().id()>")
chamada antiga: assertEquals(2, byTag.size())
nova chamada: assertEquals(2, byTag.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2282 + " <byTag.size()>")
chamada antiga: assertEquals("1", byTag.first().id())
nova chamada: assertEquals("1", byTag.first().id(), "Era esperado valores iguais, mas  '1' é diferente de " + result2283 + " <byTag.first().id()>")
chamada antiga: assertEquals("2", byTag.last().id())
nova chamada: assertEquals("2", byTag.last().id(), "Era esperado valores iguais, mas  '2' é diferente de " + result2284 + " <byTag.last().id()>")
chamada antiga: assertEquals(1, byAttr.size())
nova chamada: assertEquals(1, byAttr.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2285 + " <byAttr.size()>")
chamada antiga: assertEquals("2", byAttr.last().id())
nova chamada: assertEquals("2", byAttr.last().id(), "Era esperado valores iguais, mas  '2' é diferente de " + result2286 + " <byAttr.last().id()>")
chamada antiga: assertEquals(1, byTagAttr.size())
nova chamada: assertEquals(1, byTagAttr.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2287 + " <byTagAttr.size()>")
chamada antiga: assertEquals("2", byTagAttr.last().id())
nova chamada: assertEquals("2", byTagAttr.last().id(), "Era esperado valores iguais, mas  '2' é diferente de " + result2288 + " <byTagAttr.last().id()>")
chamada antiga: assertEquals(2, byContains.size())
nova chamada: assertEquals(2, byContains.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2289 + " <byContains.size()>")
chamada antiga: assertEquals("1", byContains.first().id())
nova chamada: assertEquals("1", byContains.first().id(), "Era esperado valores iguais, mas  '1' é diferente de " + result2290 + " <byContains.first().id()>")
chamada antiga: assertEquals("2", byContains.last().id())
nova chamada: assertEquals("2", byContains.last().id(), "Era esperado valores iguais, mas  '2' é diferente de " + result2291 + " <byContains.last().id()>")
chamada antiga: assertEquals(els1, els2)
nova chamada: assertEquals(els1, els2, "Era esperado valores iguais, mas  els1 é diferente de " + " els2")
chamada antiga: assertEquals(els3, els4)
nova chamada: assertEquals(els3, els4, "Era esperado valores iguais, mas  els3 é diferente de " + " els4")
chamada antiga: assertEquals("One", els1.text())
nova chamada: assertEquals("One", els1.text(), "Era esperado valores iguais, mas  'One' é diferente de " + result2292 + " <els1.text()>")
chamada antiga: assertEquals(1, els1.size())
nova chamada: assertEquals(1, els1.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2293 + " <els1.size()>")
chamada antiga: assertEquals("Two", els3.text())
nova chamada: assertEquals("Two", els3.text(), "Era esperado valores iguais, mas  'Two' é diferente de " + result2294 + " <els3.text()>")
chamada antiga: assertEquals(1, els2.size())
nova chamada: assertEquals(1, els2.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2295 + " <els2.size()>")
chamada antiga: assertEquals(2, withData.size())
nova chamada: assertEquals(2, withData.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2296 + " <withData.size()>")
chamada antiga: assertEquals("1", withData.first().id())
nova chamada: assertEquals("1", withData.first().id(), "Era esperado valores iguais, mas  '1' é diferente de " + result2297 + " <withData.first().id()>")
chamada antiga: assertEquals("2", withData.last().id())
nova chamada: assertEquals("2", withData.last().id(), "Era esperado valores iguais, mas  '2' é diferente de " + result2298 + " <withData.last().id()>")
chamada antiga: assertEquals(1, withData.size())
nova chamada: assertEquals(1, withData.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2299 + " <withData.size()>")
chamada antiga: assertEquals("2", withData.first().id())
nova chamada: assertEquals("2", withData.first().id(), "Era esperado valores iguais, mas  '2' é diferente de " + result2300 + " <withData.first().id()>")
chamada antiga: assertEquals(1, doc.select("[^attrib]").size())
nova chamada: assertEquals(1, doc.select("[^attrib]").size(), "Era esperado valores iguais, mas  1 é diferente de " + result2301 + " <doc.select('[^attrib]').size()>")
chamada antiga: assertEquals(3, imgs.size())
nova chamada: assertEquals(3, imgs.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2302 + " <imgs.size()>")
chamada antiga: assertEquals("1", imgs.get(0).id())
nova chamada: assertEquals("1", imgs.get(0).id(), "Era esperado valores iguais, mas  '1' é diferente de " + result2303 + " <imgs.get(0).id()>")
chamada antiga: assertEquals("2", imgs.get(1).id())
nova chamada: assertEquals("2", imgs.get(1).id(), "Era esperado valores iguais, mas  '2' é diferente de " + result2304 + " <imgs.get(1).id()>")
chamada antiga: assertEquals("3", imgs.get(2).id())
nova chamada: assertEquals("3", imgs.get(2).id(), "Era esperado valores iguais, mas  '3' é diferente de " + result2305 + " <imgs.get(2).id()>")
chamada antiga: assertEquals(2, imgs.size())
nova chamada: assertEquals(2, imgs.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2306 + " <imgs.size()>")
chamada antiga: assertEquals("1", imgs.get(0).id())
nova chamada: assertEquals("1", imgs.get(0).id(), "Era esperado valores iguais, mas  '1' é diferente de " + result2307 + " <imgs.get(0).id()>")
chamada antiga: assertEquals("4", imgs.get(1).id())
nova chamada: assertEquals("4", imgs.get(1).id(), "Era esperado valores iguais, mas  '4' é diferente de " + result2308 + " <imgs.get(1).id()>")
chamada antiga: assertEquals(1, els.size())
nova chamada: assertEquals(1, els.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2309 + " <els.size()>")
chamada antiga: assertEquals("Hello", els.text())
nova chamada: assertEquals("Hello", els.text(), "Era esperado valores iguais, mas  'Hello' é diferente de " + result2310 + " <els.text()>")
chamada antiga: assertEquals(1, els.size())
nova chamada: assertEquals(1, els.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2311 + " <els.size()>")
chamada antiga: assertEquals("Two +", els.text())
nova chamada: assertEquals("Two +", els.text(), "Era esperado valores iguais, mas  'Two +' é diferente de " + result2312 + " <els.text()>")
chamada antiga: assertEquals("p", els.first().tagName())
nova chamada: assertEquals("p", els.first().tagName(), "Era esperado valores iguais, mas  'p' é diferente de " + result2313 + " <els.first().tagName()>")
chamada antiga: assertEquals(8, allDoc.size())
nova chamada: assertEquals(8, allDoc.size(), "Era esperado valores iguais, mas  8 é diferente de " + result2314 + " <allDoc.size()>")
chamada antiga: assertEquals(3, allUnderDiv.size())
nova chamada: assertEquals(3, allUnderDiv.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2315 + " <allUnderDiv.size()>")
chamada antiga: assertEquals("p", allUnderDiv.first().tagName())
nova chamada: assertEquals("p", allUnderDiv.first().tagName(), "Era esperado valores iguais, mas  'p' é diferente de " + result2316 + " <allUnderDiv.first().tagName()>")
chamada antiga: assertEquals(2, ps.size())
nova chamada: assertEquals(2, ps.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2317 + " <ps.size()>")
chamada antiga: assertEquals(5, els.size())
nova chamada: assertEquals(5, els.size(), "Era esperado valores iguais, mas  5 é diferente de " + result2318 + " <els.size()>")
chamada antiga: assertEquals("div", els.get(0).tagName())
nova chamada: assertEquals("div", els.get(0).tagName(), "Era esperado valores iguais, mas  'div' é diferente de " + result2319 + " <els.get(0).tagName()>")
chamada antiga: assertEquals("foo", els.get(0).attr("title"))
nova chamada: assertEquals("foo", els.get(0).attr("title"), "Era esperado valores iguais, mas  'foo' é diferente de " + result2320 + " <els.get(0).attr('title')>")
chamada antiga: assertEquals("div", els.get(1).tagName())
nova chamada: assertEquals("div", els.get(1).tagName(), "Era esperado valores iguais, mas  'div' é diferente de " + result2321 + " <els.get(1).tagName()>")
chamada antiga: assertEquals("bar", els.get(1).attr("title"))
nova chamada: assertEquals("bar", els.get(1).attr("title"), "Era esperado valores iguais, mas  'bar' é diferente de " + result2322 + " <els.get(1).attr('title')>")
chamada antiga: assertEquals("div", els.get(2).tagName())
nova chamada: assertEquals("div", els.get(2).tagName(), "Era esperado valores iguais, mas  'div' é diferente de " + result2323 + " <els.get(2).tagName()>")
chamada antiga: assertEquals(0, els.get(2).attr("title").length())
nova chamada: assertEquals(0, els.get(2).attr("title").length(), "Era esperado valores iguais, mas  0 é diferente de " + result2324 + " <els.get(2).attr('title').length()>")
chamada antiga: assertEquals("p", els.get(3).tagName())
nova chamada: assertEquals("p", els.get(3).tagName(), "Era esperado valores iguais, mas  'p' é diferente de " + result2325 + " <els.get(3).tagName()>")
chamada antiga: assertEquals("span", els.get(4).tagName())
nova chamada: assertEquals("span", els.get(4).tagName(), "Era esperado valores iguais, mas  'span' é diferente de " + result2326 + " <els.get(4).tagName()>")
chamada antiga: assertEquals(3, els.size())
nova chamada: assertEquals(3, els.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2327 + " <els.size()>")
chamada antiga: assertEquals("1", els.get(0).id())
nova chamada: assertEquals("1", els.get(0).id(), "Era esperado valores iguais, mas  '1' é diferente de " + result2328 + " <els.get(0).id()>")
chamada antiga: assertEquals("2", els.get(1).id())
nova chamada: assertEquals("2", els.get(1).id(), "Era esperado valores iguais, mas  '2' é diferente de " + result2329 + " <els.get(1).id()>")
chamada antiga: assertEquals("foo", els.get(2).attr("title"))
nova chamada: assertEquals("foo", els.get(2).attr("title"), "Era esperado valores iguais, mas  'foo' é diferente de " + result2330 + " <els.get(2).attr('title')>")
chamada antiga: assertEquals(2, els.size())
nova chamada: assertEquals(2, els.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2331 + " <els.size()>")
chamada antiga: assertEquals("Hello", els.get(0).text())
nova chamada: assertEquals("Hello", els.get(0).text(), "Era esperado valores iguais, mas  'Hello' é diferente de " + result2332 + " <els.get(0).text()>")
chamada antiga: assertEquals("There", els.get(1).text())
nova chamada: assertEquals("There", els.get(1).text(), "Era esperado valores iguais, mas  'There' é diferente de " + result2333 + " <els.get(1).text()>")
chamada antiga: assertEquals(1, p.size())
nova chamada: assertEquals(1, p.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2334 + " <p.size()>")
chamada antiga: assertEquals("Hello", p.get(0).text())
nova chamada: assertEquals("Hello", p.get(0).text(), "Era esperado valores iguais, mas  'Hello' é diferente de " + result2335 + " <p.get(0).text()>")
chamada antiga: assertEquals(0, empty.size())
nova chamada: assertEquals(0, empty.size(), "Era esperado valores iguais, mas  0 é diferente de " + result2336 + " <empty.size()>")
chamada antiga: assertEquals(0, aboveRoot.size())
nova chamada: assertEquals(0, aboveRoot.size(), "Era esperado valores iguais, mas  0 é diferente de " + result2337 + " <aboveRoot.size()>")
chamada antiga: assertEquals(1, div.size())
nova chamada: assertEquals(1, div.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2338 + " <div.size()>")
chamada antiga: assertEquals("div", div.first().tagName())
nova chamada: assertEquals("div", div.first().tagName(), "Era esperado valores iguais, mas  'div' é diferente de " + result2339 + " <div.first().tagName()>")
chamada antiga: assertEquals(1, p.size())
nova chamada: assertEquals(1, p.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2340 + " <p.size()>")
chamada antiga: assertEquals("p", p.first().tagName())
nova chamada: assertEquals("p", p.first().tagName(), "Era esperado valores iguais, mas  'p' é diferente de " + result2341 + " <p.first().tagName()>")
chamada antiga: assertEquals(1, div2.size())
nova chamada: assertEquals(1, div2.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2342 + " <div2.size()>")
chamada antiga: assertEquals("div", div2.first().tagName())
nova chamada: assertEquals("div", div2.first().tagName(), "Era esperado valores iguais, mas  'div' é diferente de " + result2343 + " <div2.first().tagName()>")
chamada antiga: assertEquals(1, p2.size())
nova chamada: assertEquals(1, p2.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2344 + " <p2.size()>")
chamada antiga: assertEquals("p", p2.first().tagName())
nova chamada: assertEquals("p", p2.first().tagName(), "Era esperado valores iguais, mas  'p' é diferente de " + result2345 + " <p2.first().tagName()>")
chamada antiga: assertEquals(1, els.size())
nova chamada: assertEquals(1, els.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2346 + " <els.size()>")
chamada antiga: assertEquals("Hello", els.first().text())
nova chamada: assertEquals("Hello", els.first().text(), "Era esperado valores iguais, mas  'Hello' é diferente de " + result2347 + " <els.first().text()>")
chamada antiga: assertEquals("span", els.first().tagName())
nova chamada: assertEquals("span", els.first().tagName(), "Era esperado valores iguais, mas  'span' é diferente de " + result2348 + " <els.first().tagName()>")
chamada antiga: assertEquals(0, aboveRoot.size())
nova chamada: assertEquals(0, aboveRoot.size(), "Era esperado valores iguais, mas  0 é diferente de " + result2349 + " <aboveRoot.size()>")
chamada antiga: assertEquals(2, divs.size())
nova chamada: assertEquals(2, divs.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2350 + " <divs.size()>")
chamada antiga: assertEquals("2", divs.get(0).id())
nova chamada: assertEquals("2", divs.get(0).id(), "Era esperado valores iguais, mas  '2' é diferente de " + result2351 + " <divs.get(0).id()>")
chamada antiga: assertEquals("3", divs.get(1).id())
nova chamada: assertEquals("3", divs.get(1).id(), "Era esperado valores iguais, mas  '3' é diferente de " + result2352 + " <divs.get(1).id()>")
chamada antiga: assertEquals(1, div2.size())
nova chamada: assertEquals(1, div2.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2353 + " <div2.size()>")
chamada antiga: assertEquals("2", div2.get(0).id())
nova chamada: assertEquals("2", div2.get(0).id(), "Era esperado valores iguais, mas  '2' é diferente de " + result2354 + " <div2.get(0).id()>")
chamada antiga: assertEquals(3, allAs.size())
nova chamada: assertEquals(3, allAs.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2355 + " <allAs.size()>")
chamada antiga: assertEquals("a", allAs.first().tagName())
nova chamada: assertEquals("a", allAs.first().tagName(), "Era esperado valores iguais, mas  'a' é diferente de " + result2356 + " <allAs.first().tagName()>")
chamada antiga: assertEquals(2, fooAs.size())
nova chamada: assertEquals(2, fooAs.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2357 + " <fooAs.size()>")
chamada antiga: assertEquals("a", fooAs.first().tagName())
nova chamada: assertEquals("a", fooAs.first().tagName(), "Era esperado valores iguais, mas  'a' é diferente de " + result2358 + " <fooAs.first().tagName()>")
chamada antiga: assertEquals(1, barAs.size())
nova chamada: assertEquals(1, barAs.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2359 + " <barAs.size()>")
chamada antiga: assertEquals(3, divChilds.size())
nova chamada: assertEquals(3, divChilds.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2360 + " <divChilds.size()>")
chamada antiga: assertEquals("p", divChilds.get(0).tagName())
nova chamada: assertEquals("p", divChilds.get(0).tagName(), "Era esperado valores iguais, mas  'p' é diferente de " + result2361 + " <divChilds.get(0).tagName()>")
chamada antiga: assertEquals("p", divChilds.get(1).tagName())
nova chamada: assertEquals("p", divChilds.get(1).tagName(), "Era esperado valores iguais, mas  'p' é diferente de " + result2362 + " <divChilds.get(1).tagName()>")
chamada antiga: assertEquals("span", divChilds.get(2).tagName())
nova chamada: assertEquals("span", divChilds.get(2).tagName(), "Era esperado valores iguais, mas  'span' é diferente de " + result2363 + " <divChilds.get(2).tagName()>")
chamada antiga: assertEquals(1, els.size())
nova chamada: assertEquals(1, els.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2364 + " <els.size()>")
chamada antiga: assertEquals("a", els.first().tagName())
nova chamada: assertEquals("a", els.first().tagName(), "Era esperado valores iguais, mas  'a' é diferente de " + result2365 + " <els.first().tagName()>")
chamada antiga: assertEquals(2, doc.select("DiV").size())
nova chamada: assertEquals(2, doc.select("DiV").size(), "Era esperado valores iguais, mas  2 é diferente de " + result2366 + " <doc.select('DiV').size()>")
chamada antiga: assertEquals(1, doc.select("DiV[TiTLE]").size())
nova chamada: assertEquals(1, doc.select("DiV[TiTLE]").size(), "Era esperado valores iguais, mas  1 é diferente de " + result2367 + " <doc.select('DiV[TiTLE]').size()>")
chamada antiga: assertEquals(1, doc.select("DiV[TiTLE=BAR]").size())
nova chamada: assertEquals(1, doc.select("DiV[TiTLE=BAR]").size(), "Era esperado valores iguais, mas  1 é diferente de " + result2368 + " <doc.select('DiV[TiTLE=BAR]').size()>")
chamada antiga: assertEquals(0, doc.select("DiV[TiTLE=BARBARELLA]").size())
nova chamada: assertEquals(0, doc.select("DiV[TiTLE=BARBARELLA]").size(), "Era esperado valores iguais, mas  0 é diferente de " + result2369 + " <doc.select('DiV[TiTLE=BARBARELLA]').size()>")
chamada antiga: assertEquals(2, sibs.size())
nova chamada: assertEquals(2, sibs.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2370 + " <sibs.size()>")
chamada antiga: assertEquals("Two", sibs.get(0).text())
nova chamada: assertEquals("Two", sibs.get(0).text(), "Era esperado valores iguais, mas  'Two' é diferente de " + result2371 + " <sibs.get(0).text()>")
chamada antiga: assertEquals("Three", sibs.get(1).text())
nova chamada: assertEquals("Three", sibs.get(1).text(), "Era esperado valores iguais, mas  'Three' é diferente de " + result2372 + " <sibs.get(1).text()>")
chamada antiga: assertEquals(1, sibs.size())
nova chamada: assertEquals(1, sibs.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2373 + " <sibs.size()>")
chamada antiga: assertEquals("Two", sibs.get(0).text())
nova chamada: assertEquals("Two", sibs.get(0).text(), "Era esperado valores iguais, mas  'Two' é diferente de " + result2374 + " <sibs.get(0).text()>")
chamada antiga: assertEquals(0, sibs.size())
nova chamada: assertEquals(0, sibs.size(), "Era esperado valores iguais, mas  0 é diferente de " + result2375 + " <sibs.size()>")
chamada antiga: assertEquals(2, sibs.size())
nova chamada: assertEquals(2, sibs.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2376 + " <sibs.size()>")
chamada antiga: assertEquals("Two", sibs.get(0).text())
nova chamada: assertEquals("Two", sibs.get(0).text(), "Era esperado valores iguais, mas  'Two' é diferente de " + result2377 + " <sibs.get(0).text()>")
chamada antiga: assertEquals("Three", sibs.get(1).text())
nova chamada: assertEquals("Three", sibs.get(1).text(), "Era esperado valores iguais, mas  'Three' é diferente de " + result2378 + " <sibs.get(1).text()>")
chamada antiga: assertEquals(3, els.size())
nova chamada: assertEquals(3, els.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2379 + " <els.size()>")
chamada antiga: assertEquals("ol", els.get(0).tagName())
nova chamada: assertEquals("ol", els.get(0).tagName(), "Era esperado valores iguais, mas  'ol' é diferente de " + result2380 + " <els.get(0).tagName()>")
chamada antiga: assertEquals("Two", els.get(1).text())
nova chamada: assertEquals("Two", els.get(1).text(), "Era esperado valores iguais, mas  'Two' é diferente de " + result2381 + " <els.get(1).text()>")
chamada antiga: assertEquals("Three", els.get(2).text())
nova chamada: assertEquals("Three", els.get(2).text(), "Era esperado valores iguais, mas  'Three' é diferente de " + result2382 + " <els.get(2).text()>")
chamada antiga: assertEquals(1, els.size())
nova chamada: assertEquals(1, els.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2383 + " <els.size()>")
chamada antiga: assertEquals("Three", els.first().text())
nova chamada: assertEquals("Three", els.first().text(), "Era esperado valores iguais, mas  'Three' é diferente de " + result2384 + " <els.first().text()>")
chamada antiga: assertEquals("One", el1.text())
nova chamada: assertEquals("One", el1.text(), "Era esperado valores iguais, mas  'One' é diferente de " + result2385 + " <el1.text()>")
chamada antiga: assertEquals("Two", el2.text())
nova chamada: assertEquals("Two", el2.text(), "Era esperado valores iguais, mas  'Two' é diferente de " + result2386 + " <el2.text()>")
chamada antiga: assertEquals("One", el3.text())
nova chamada: assertEquals("One", el3.text(), "Era esperado valores iguais, mas  'One' é diferente de " + result2387 + " <el3.text()>")
chamada antiga: assertEquals("Two", el4.text())
nova chamada: assertEquals("Two", el4.text(), "Era esperado valores iguais, mas  'Two' é diferente de " + result2388 + " <el4.text()>")
chamada antiga: assertEquals(2, spans.size())
nova chamada: assertEquals(2, spans.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2389 + " <spans.size()>")
chamada antiga: assertEquals("One", spans.first().text())
nova chamada: assertEquals("One", spans.first().text(), "Era esperado valores iguais, mas  'One' é diferente de " + result2390 + " <spans.first().text()>")
chamada antiga: assertEquals("2", div.id())
nova chamada: assertEquals("2", div.id(), "Era esperado valores iguais, mas  '2' é diferente de " + result2391 + " <div.id()>")
chamada antiga: assertEquals(3, ps.size())
nova chamada: assertEquals(3, ps.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2392 + " <ps.size()>")
chamada antiga: assertEquals("One", ps.get(0).text())
nova chamada: assertEquals("One", ps.get(0).text(), "Era esperado valores iguais, mas  'One' é diferente de " + result2393 + " <ps.get(0).text()>")
chamada antiga: assertEquals("Two", ps.get(1).text())
nova chamada: assertEquals("Two", ps.get(1).text(), "Era esperado valores iguais, mas  'Two' é diferente de " + result2394 + " <ps.get(1).text()>")
chamada antiga: assertEquals("Four", ps.get(2).text())
nova chamada: assertEquals("Four", ps.get(2).text(), "Era esperado valores iguais, mas  'Four' é diferente de " + result2395 + " <ps.get(2).text()>")
chamada antiga: assertEquals(2, ps.size())
nova chamada: assertEquals(2, ps.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2396 + " <ps.size()>")
chamada antiga: assertEquals("Two", ps.get(0).text())
nova chamada: assertEquals("Two", ps.get(0).text(), "Era esperado valores iguais, mas  'Two' é diferente de " + result2397 + " <ps.get(0).text()>")
chamada antiga: assertEquals("Three", ps.get(1).text())
nova chamada: assertEquals("Three", ps.get(1).text(), "Era esperado valores iguais, mas  'Three' é diferente de " + result2398 + " <ps.get(1).text()>")
chamada antiga: assertEquals(2, ps.size())
nova chamada: assertEquals(2, ps.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2399 + " <ps.size()>")
chamada antiga: assertEquals("One", ps.get(0).text())
nova chamada: assertEquals("One", ps.get(0).text(), "Era esperado valores iguais, mas  'One' é diferente de " + result2400 + " <ps.get(0).text()>")
chamada antiga: assertEquals("Four", ps.get(1).text())
nova chamada: assertEquals("Four", ps.get(1).text(), "Era esperado valores iguais, mas  'Four' é diferente de " + result2401 + " <ps.get(1).text()>")
chamada antiga: assertEquals(1, ps2.size())
nova chamada: assertEquals(1, ps2.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2402 + " <ps2.size()>")
chamada antiga: assertEquals("One", ps2.get(0).text())
nova chamada: assertEquals("One", ps2.get(0).text(), "Era esperado valores iguais, mas  'One' é diferente de " + result2403 + " <ps2.get(0).text()>")
chamada antiga: assertEquals("p", ps2.get(0).tagName())
nova chamada: assertEquals("p", ps2.get(0).tagName(), "Era esperado valores iguais, mas  'p' é diferente de " + result2404 + " <ps2.get(0).tagName()>")
chamada antiga: assertEquals(1, ps.size())
nova chamada: assertEquals(1, ps.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2405 + " <ps.size()>")
chamada antiga: assertEquals("Two", ps.get(0).text())
nova chamada: assertEquals("Two", ps.get(0).text(), "Era esperado valores iguais, mas  'Two' é diferente de " + result2406 + " <ps.get(0).text()>")
chamada antiga: assertEquals(1, ps.size())
nova chamada: assertEquals(1, ps.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2407 + " <ps.size()>")
chamada antiga: assertEquals("Two", ps.get(0).text())
nova chamada: assertEquals("Two", ps.get(0).text(), "Era esperado valores iguais, mas  'Two' é diferente de " + result2408 + " <ps.get(0).text()>")
chamada antiga: assertEquals(2, divs1.size())
nova chamada: assertEquals(2, divs1.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2409 + " <divs1.size()>")
chamada antiga: assertEquals("0", divs1.get(0).id())
nova chamada: assertEquals("0", divs1.get(0).id(), "Era esperado valores iguais, mas  '0' é diferente de " + result2410 + " <divs1.get(0).id()>")
chamada antiga: assertEquals("1", divs1.get(1).id())
nova chamada: assertEquals("1", divs1.get(1).id(), "Era esperado valores iguais, mas  '1' é diferente de " + result2411 + " <divs1.get(1).id()>")
chamada antiga: assertEquals(1, divs2.size())
nova chamada: assertEquals(1, divs2.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2412 + " <divs2.size()>")
chamada antiga: assertEquals("1", divs2.get(0).id())
nova chamada: assertEquals("1", divs2.get(0).id(), "Era esperado valores iguais, mas  '1' é diferente de " + result2413 + " <divs2.get(0).id()>")
chamada antiga: assertEquals(3, divs3.size())
nova chamada: assertEquals(3, divs3.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2414 + " <divs3.size()>")
chamada antiga: assertEquals("0", divs3.get(0).id())
nova chamada: assertEquals("0", divs3.get(0).id(), "Era esperado valores iguais, mas  '0' é diferente de " + result2415 + " <divs3.get(0).id()>")
chamada antiga: assertEquals("1", divs3.get(1).id())
nova chamada: assertEquals("1", divs3.get(1).id(), "Era esperado valores iguais, mas  '1' é diferente de " + result2416 + " <divs3.get(1).id()>")
chamada antiga: assertEquals("2", divs3.get(2).id())
nova chamada: assertEquals("2", divs3.get(2).id(), "Era esperado valores iguais, mas  '2' é diferente de " + result2417 + " <divs3.get(2).id()>")
chamada antiga: assertEquals(3, els1.size())
nova chamada: assertEquals(3, els1.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2418 + " <els1.size()>")
chamada antiga: assertEquals("body", els1.first().tagName())
nova chamada: assertEquals("body", els1.first().tagName(), "Era esperado valores iguais, mas  'body' é diferente de " + result2419 + " <els1.first().tagName()>")
chamada antiga: assertEquals("0", els1.get(1).id())
nova chamada: assertEquals("0", els1.get(1).id(), "Era esperado valores iguais, mas  '0' é diferente de " + result2420 + " <els1.get(1).id()>")
chamada antiga: assertEquals("2", els1.get(2).id())
nova chamada: assertEquals("2", els1.get(2).id(), "Era esperado valores iguais, mas  '2' é diferente de " + result2421 + " <els1.get(2).id()>")
chamada antiga: assertEquals(2, els2.size())
nova chamada: assertEquals(2, els2.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2422 + " <els2.size()>")
chamada antiga: assertEquals("p", els2.first().tagName())
nova chamada: assertEquals("p", els2.first().tagName(), "Era esperado valores iguais, mas  'p' é diferente de " + result2423 + " <els2.first().tagName()>")
chamada antiga: assertEquals("1", els2.get(1).id())
nova chamada: assertEquals("1", els2.get(1).id(), "Era esperado valores iguais, mas  '1' é diferente de " + result2424 + " <els2.get(1).id()>")
chamada antiga: assertEquals(1, divs.size())
nova chamada: assertEquals(1, divs.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2425 + " <divs.size()>")
chamada antiga: assertEquals("One", divs.first().text())
nova chamada: assertEquals("One", divs.first().text(), "Era esperado valores iguais, mas  'One' é diferente de " + result2426 + " <divs.first().text()>")
chamada antiga: assertEquals(1, divs.size())
nova chamada: assertEquals(1, divs.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2427 + " <divs.size()>")
chamada antiga: assertEquals("div", divs.first().tagName())
nova chamada: assertEquals("div", divs.first().tagName(), "Era esperado valores iguais, mas  'div' é diferente de " + result2428 + " <divs.first().tagName()>")
chamada antiga: assertEquals("Two", divs.first().text())
nova chamada: assertEquals("Two", divs.first().text(), "Era esperado valores iguais, mas  'Two' é diferente de " + result2429 + " <divs.first().text()>")
chamada antiga: assertEquals(1, divs.size())
nova chamada: assertEquals(1, divs.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2430 + " <divs.size()>")
chamada antiga: assertEquals("div", divs.first().tagName())
nova chamada: assertEquals("div", divs.first().tagName(), "Era esperado valores iguais, mas  'div' é diferente de " + result2431 + " <divs.first().tagName()>")
chamada antiga: assertEquals("Two", divs.first().text())
nova chamada: assertEquals("Two", divs.first().text(), "Era esperado valores iguais, mas  'Two' é diferente de " + result2432 + " <divs.first().text()>")
chamada antiga: assertEquals(3, ps1.size())
nova chamada: assertEquals(3, ps1.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2433 + " <ps1.size()>")
chamada antiga: assertEquals(2, ps2.size())
nova chamada: assertEquals(2, ps2.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2434 + " <ps2.size()>")
chamada antiga: assertEquals("The Rain.", ps2.first().html())
nova chamada: assertEquals("The Rain.", ps2.first().html(), "Era esperado valores iguais, mas  'The Rain.' é diferente de " + result2435 + " <ps2.first().html()>")
chamada antiga: assertEquals("The <i>RAIN</i>.", ps2.last().html())
nova chamada: assertEquals("The <i>RAIN</i>.", ps2.last().html(), "Era esperado valores iguais, mas  'The iRAIN/i.' é diferente de " + result2436 + " <ps2.last().html()>")
chamada antiga: assertEquals(1, ps3.size())
nova chamada: assertEquals(1, ps3.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2437 + " <ps3.size()>")
chamada antiga: assertEquals("light", ps3.first().className())
nova chamada: assertEquals("light", ps3.first().className(), "Era esperado valores iguais, mas  'light' é diferente de " + result2438 + " <ps3.first().className()>")
chamada antiga: assertEquals(1, ps4.size())
nova chamada: assertEquals(1, ps4.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2439 + " <ps4.size()>")
chamada antiga: assertEquals("light", ps3.first().className())
nova chamada: assertEquals("light", ps3.first().className(), "Era esperado valores iguais, mas  'light' é diferente de " + result2440 + " <ps3.first().className()>")
chamada antiga: assertEquals(8, ps5.size())
nova chamada: assertEquals(8, ps5.size(), "Era esperado valores iguais, mas  8 é diferente de " + result2441 + " <ps5.size()>")
chamada antiga: assertEquals(8, ps6.size())
nova chamada: assertEquals(8, ps6.size(), "Era esperado valores iguais, mas  8 é diferente de " + result2442 + " <ps6.size()>")
chamada antiga: assertEquals(1, ps1.size())
nova chamada: assertEquals(1, ps1.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2443 + " <ps1.size()>")
chamada antiga: assertEquals("1", ps1.first().id())
nova chamada: assertEquals("1", ps1.first().id(), "Era esperado valores iguais, mas  '1' é diferente de " + result2444 + " <ps1.first().id()>")
chamada antiga: assertEquals(1, ps2.size())
nova chamada: assertEquals(1, ps2.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2445 + " <ps2.size()>")
chamada antiga: assertEquals("2", ps2.first().id())
nova chamada: assertEquals("2", ps2.first().id(), "Era esperado valores iguais, mas  '2' é diferente de " + result2446 + " <ps2.first().id()>")
chamada antiga: assertEquals(1, es1.size())
nova chamada: assertEquals(1, es1.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2447 + " <es1.size()>")
chamada antiga: assertEquals(1, es2.size())
nova chamada: assertEquals(1, es2.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2448 + " <es2.size()>")
chamada antiga: assertEquals(ps.get(0), es1.first())
nova chamada: assertEquals(ps.get(0), es1.first(), "Era esperado valores iguais, mas " + result2449 + " <ps.get(0)> é diferente de " + result2450 + " <es1.first()>")
chamada antiga: assertEquals(ps.get(1), es2.first())
nova chamada: assertEquals(ps.get(1), es2.first(), "Era esperado valores iguais, mas " + result2451 + " <ps.get(1)> é diferente de " + result2452 + " <es2.first()>")
chamada antiga: assertEquals(0, doc.select("div:containsWholeText(jsoup the html parser)").size())
nova chamada: assertEquals(0, doc.select("div:containsWholeText(jsoup the html parser)").size(), "Era esperado valores iguais, mas  0 é diferente de " + result2453 + " <doc.select('div:containsWholeText(jsoup the html parser)').size()>")
chamada antiga: assertEquals(0, doc.select("div:containsWholeText(jsoup\n the html parser)").size())
nova chamada: assertEquals(0, doc.select("div:containsWholeText(jsoup\n the html parser)").size(), "Era esperado valores iguais, mas  0 é diferente de " + result2454 + " <doc.select('div:containsWholeText(jsoup\n the html parser)').size()>")
chamada antiga: assertEquals(1, blanks.size())
nova chamada: assertEquals(1, blanks.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2455 + " <blanks.size()>")
chamada antiga: assertEquals(".  ", blanks.first().wholeText())
nova chamada: assertEquals(".  ", blanks.first().wholeText(), "Era esperado valores iguais, mas  '.  ' é diferente de " + result2456 + " <blanks.first().wholeText()>")
chamada antiga: assertEquals(1, es1.size())
nova chamada: assertEquals(1, es1.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2457 + " <es1.size()>")
chamada antiga: assertEquals(1, es2.size())
nova chamada: assertEquals(1, es2.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2458 + " <es2.size()>")
chamada antiga: assertEquals(ps.get(0), es1.first())
nova chamada: assertEquals(ps.get(0), es1.first(), "Era esperado valores iguais, mas " + result2459 + " <ps.get(0)> é diferente de " + result2460 + " <es1.first()>")
chamada antiga: assertEquals(ps.get(1), es2.first())
nova chamada: assertEquals(ps.get(1), es2.first(), "Era esperado valores iguais, mas " + result2461 + " <ps.get(1)> é diferente de " + result2462 + " <es2.first()>")
chamada antiga: assertEquals(0, doc.select("div:containsWholeOwnText(jsoup the html parser)").size())
nova chamada: assertEquals(0, doc.select("div:containsWholeOwnText(jsoup the html parser)").size(), "Era esperado valores iguais, mas  0 é diferente de " + result2463 + " <doc.select('div:containsWholeOwnText(jsoup the html parser)').size()>")
chamada antiga: assertEquals(0, doc.select("div:containsWholeOwnText(jsoup\n the  parser)").size())
nova chamada: assertEquals(0, doc.select("div:containsWholeOwnText(jsoup\n the  parser)").size(), "Era esperado valores iguais, mas  0 é diferente de " + result2464 + " <doc.select('div:containsWholeOwnText(jsoup\n the  parser)').size()>")
chamada antiga: assertEquals(1, blanks.size())
nova chamada: assertEquals(1, blanks.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2465 + " <blanks.size()>")
chamada antiga: assertEquals(".  ", blanks.first().wholeText())
nova chamada: assertEquals(".  ", blanks.first().wholeText(), "Era esperado valores iguais, mas  '.  ' é diferente de " + result2466 + " <blanks.first().wholeText()>")
chamada antiga: assertEquals(1, ps.size())
nova chamada: assertEquals(1, ps.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2467 + " <ps.size()>")
chamada antiga: assertEquals("1", ps.first().id())
nova chamada: assertEquals("1", ps.first().id(), "Era esperado valores iguais, mas  '1' é diferente de " + result2468 + " <ps.first().id()>")
chamada antiga: assertEquals(0, doc.select("p:containsOwn(there)").size())
nova chamada: assertEquals(0, doc.select("p:containsOwn(there)").size(), "Era esperado valores iguais, mas  0 é diferente de " + result2469 + " <doc.select('p:containsOwn(there)').size()>")
chamada antiga: assertEquals(1, doc2.select("p:containsOwn(igor)").size())
nova chamada: assertEquals(1, doc2.select("p:containsOwn(igor)").size(), "Era esperado valores iguais, mas  1 é diferente de " + result2470 + " <doc2.select('p:containsOwn(igor)').size()>")
chamada antiga: assertEquals(0, p1.size())
nova chamada: assertEquals(0, p1.size(), "Era esperado valores iguais, mas  0 é diferente de " + result2471 + " <p1.size()>")
chamada antiga: assertEquals(1, p2.size())
nova chamada: assertEquals(1, p2.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2472 + " <p2.size()>")
chamada antiga: assertEquals("1", p2.first().id())
nova chamada: assertEquals("1", p2.first().id(), "Era esperado valores iguais, mas  '1' é diferente de " + result2473 + " <p2.first().id()>")
chamada antiga: assertEquals(1, p4.size())
nova chamada: assertEquals(1, p4.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2474 + " <p4.size()>")
chamada antiga: assertEquals("4", p4.first().id())
nova chamada: assertEquals("4", p4.first().id(), "Era esperado valores iguais, mas  '4' é diferente de " + result2475 + " <p4.first().id()>")
chamada antiga: assertEquals(1, p5.size())
nova chamada: assertEquals(1, p5.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2476 + " <p5.size()>")
chamada antiga: assertEquals("2", p5.first().id())
nova chamada: assertEquals("2", p5.first().id(), "Era esperado valores iguais, mas  '2' é diferente de " + result2477 + " <p5.first().id()>")
chamada antiga: assertEquals(1, p6.size())
nova chamada: assertEquals(1, p6.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2478 + " <p6.size()>")
chamada antiga: assertEquals("3", p6.first().id())
nova chamada: assertEquals("3", p6.first().id(), "Era esperado valores iguais, mas  '3' é diferente de " + result2479 + " <p6.first().id()>")
chamada antiga: assertEquals(1, p7.size())
nova chamada: assertEquals(1, p7.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2480 + " <p7.size()>")
chamada antiga: assertEquals("1", p7.first().id())
nova chamada: assertEquals("1", p7.first().id(), "Era esperado valores iguais, mas  '1' é diferente de " + result2481 + " <p7.first().id()>")
chamada antiga: assertEquals(1, p1.size())
nova chamada: assertEquals(1, p1.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2482 + " <p1.size()>")
chamada antiga: assertEquals("1", p1.first().id())
nova chamada: assertEquals("1", p1.first().id(), "Era esperado valores iguais, mas  '1' é diferente de " + result2483 + " <p1.first().id()>")
chamada antiga: assertEquals(0, doc.select("p:matchesOwn(there)").size())
nova chamada: assertEquals(0, doc.select("p:matchesOwn(there)").size(), "Era esperado valores iguais, mas  0 é diferente de " + result2484 + " <doc.select('p:matchesOwn(there)').size()>")
chamada antiga: assertEquals(1, p1.size())
nova chamada: assertEquals(1, p1.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2485 + " <p1.size()>")
chamada antiga: assertEquals("1", p1.first().id())
nova chamada: assertEquals("1", p1.first().id(), "Era esperado valores iguais, mas  '1' é diferente de " + result2486 + " <p1.first().id()>")
chamada antiga: assertEquals(1, doc.select("p:matchesWholeText(there\n now)").size())
nova chamada: assertEquals(1, doc.select("p:matchesWholeText(there\n now)").size(), "Era esperado valores iguais, mas  1 é diferente de " + result2487 + " <doc.select('p:matchesWholeText(there\n now)').size()>")
chamada antiga: assertEquals(0, doc.select("p:matchesWholeText(There\n now)").size())
nova chamada: assertEquals(0, doc.select("p:matchesWholeText(There\n now)").size(), "Era esperado valores iguais, mas  0 é diferente de " + result2488 + " <doc.select('p:matchesWholeText(There\n now)').size()>")
chamada antiga: assertEquals(1, p2.size())
nova chamada: assertEquals(1, p2.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2489 + " <p2.size()>")
chamada antiga: assertEquals("2", p2.first().id())
nova chamada: assertEquals("2", p2.first().id(), "Era esperado valores iguais, mas  '2' é diferente de " + result2490 + " <p2.first().id()>")
chamada antiga: assertEquals(1, p3.size())
nova chamada: assertEquals(1, p3.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2491 + " <p3.size()>")
chamada antiga: assertEquals("3", p3.first().id())
nova chamada: assertEquals("3", p3.first().id(), "Era esperado valores iguais, mas  '3' é diferente de " + result2492 + " <p3.first().id()>")
chamada antiga: assertEquals(1, p1.size())
nova chamada: assertEquals(1, p1.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2493 + " <p1.size()>")
chamada antiga: assertEquals("1", p1.first().id())
nova chamada: assertEquals("1", p1.first().id(), "Era esperado valores iguais, mas  '1' é diferente de " + result2494 + " <p1.first().id()>")
chamada antiga: assertEquals(0, doc.select("p:matchesWholeOwnText(there\n now)").size())
nova chamada: assertEquals(0, doc.select("p:matchesWholeOwnText(there\n now)").size(), "Era esperado valores iguais, mas  0 é diferente de " + result2495 + " <doc.select('p:matchesWholeOwnText(there\n now)').size()>")
chamada antiga: assertEquals(1, p2.size())
nova chamada: assertEquals(1, p2.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2496 + " <p2.size()>")
chamada antiga: assertEquals("2", p2.first().id())
nova chamada: assertEquals("2", p2.first().id(), "Era esperado valores iguais, mas  '2' é diferente de " + result2497 + " <p2.first().id()>")
chamada antiga: assertEquals(1, p3.size())
nova chamada: assertEquals(1, p3.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2498 + " <p3.size()>")
chamada antiga: assertEquals("3", p3.first().id())
nova chamada: assertEquals("3", p3.first().id(), "Era esperado valores iguais, mas  '3' é diferente de " + result2499 + " <p3.first().id()>")
chamada antiga: assertEquals(1, el1.size())
nova chamada: assertEquals(1, el1.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2500 + " <el1.size()>")
chamada antiga: assertEquals("1", el1.first().id())
nova chamada: assertEquals("1", el1.first().id(), "Era esperado valores iguais, mas  '1' é diferente de " + result2501 + " <el1.first().id()>")
chamada antiga: assertEquals(1, el2.size())
nova chamada: assertEquals(1, el2.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2502 + " <el2.size()>")
chamada antiga: assertEquals("2", el2.first().id())
nova chamada: assertEquals("2", el2.first().id(), "Era esperado valores iguais, mas  '2' é diferente de " + result2503 + " <el2.first().id()>")
chamada antiga: assertEquals(2, el1.size())
nova chamada: assertEquals(2, el1.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2504 + " <el1.size()>")
chamada antiga: assertEquals("Two", el1.first().text())
nova chamada: assertEquals("Two", el1.first().text(), "Era esperado valores iguais, mas  'Two' é diferente de " + result2505 + " <el1.first().text()>")
chamada antiga: assertEquals("Three", el1.last().text())
nova chamada: assertEquals("Three", el1.last().text(), "Era esperado valores iguais, mas  'Three' é diferente de " + result2506 + " <el1.last().text()>")
chamada antiga: assertEquals(2, el2.size())
nova chamada: assertEquals(2, el2.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2507 + " <el2.size()>")
chamada antiga: assertEquals("One", el2.first().text())
nova chamada: assertEquals("One", el2.first().text(), "Era esperado valores iguais, mas  'One' é diferente de " + result2508 + " <el2.first().text()>")
chamada antiga: assertEquals("Two", el2.last().text())
nova chamada: assertEquals("Two", el2.last().text(), "Era esperado valores iguais, mas  'Two' é diferente de " + result2509 + " <el2.last().text()>")
chamada antiga: assertEquals(2, el1.size())
nova chamada: assertEquals(2, el1.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2510 + " <el1.size()>")
chamada antiga: assertEquals("body", el1.first().tagName())
nova chamada: assertEquals("body", el1.first().tagName(), "Era esperado valores iguais, mas  'body' é diferente de " + result2511 + " <el1.first().tagName()>")
chamada antiga: assertEquals("span", el1.last().tagName())
nova chamada: assertEquals("span", el1.last().tagName(), "Era esperado valores iguais, mas  'span' é diferente de " + result2512 + " <el1.last().tagName()>")
chamada antiga: assertEquals(1, el1.size())
nova chamada: assertEquals(1, el1.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2513 + " <el1.size()>")
chamada antiga: assertEquals("1", el1.first().id())
nova chamada: assertEquals("1", el1.first().id(), "Era esperado valores iguais, mas  '1' é diferente de " + result2514 + " <el1.first().id()>")
chamada antiga: assertEquals(1, ps.size())
nova chamada: assertEquals(1, ps.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2515 + " <ps.size()>")
chamada antiga: assertEquals(2, containers.size())
nova chamada: assertEquals(2, containers.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2516 + " <containers.size()>")
chamada antiga: assertEquals("div", containers.get(0).tagName())
nova chamada: assertEquals("div", containers.get(0).tagName(), "Era esperado valores iguais, mas  'div' é diferente de " + result2517 + " <containers.get(0).tagName()>")
chamada antiga: assertEquals("li", containers.get(1).tagName())
nova chamada: assertEquals("li", containers.get(1).tagName(), "Era esperado valores iguais, mas  'li' é diferente de " + result2518 + " <containers.get(1).tagName()>")
chamada antiga: assertEquals("123", containers.get(1).text())
nova chamada: assertEquals("123", containers.get(1).text(), "Era esperado valores iguais, mas  '123' é diferente de " + result2519 + " <containers.get(1).text()>")
chamada antiga: assertEquals("div", doc.select("div[k" + s + "]").first().tagName())
nova chamada: assertEquals("div", doc.select("div[k" + s + "]").first().tagName(), "Era esperado valores iguais, mas  'div' é diferente de " + result2520 + " <doc.select('div[k' + s + ']').first().tagName()>")
chamada antiga: assertEquals("div", doc.select("div:containsOwn(" + s + ")").first().tagName())
nova chamada: assertEquals("div", doc.select("div:containsOwn(" + s + ")").first().tagName(), "Era esperado valores iguais, mas  'div' é diferente de " + result2521 + " <doc.select('div:containsOwn(' + s + ')').first().tagName()>")
chamada antiga: assertEquals(2, found.size())
nova chamada: assertEquals(2, found.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2522 + " <found.size()>")
chamada antiga: assertEquals("class without space", found.get(0).text())
nova chamada: assertEquals("class without space", found.get(0).text(), "Era esperado valores iguais, mas  'class without space' é diferente de " + result2523 + " <found.get(0).text()>")
chamada antiga: assertEquals("class with space", found.get(1).text())
nova chamada: assertEquals("class with space", found.get(1).text(), "Era esperado valores iguais, mas  'class with space' é diferente de " + result2524 + " <found.get(1).text()>")
chamada antiga: assertEquals(2, found.size())
nova chamada: assertEquals(2, found.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2525 + " <found.size()>")
chamada antiga: assertEquals("class without space", found.get(0).text())
nova chamada: assertEquals("class without space", found.get(0).text(), "Era esperado valores iguais, mas  'class without space' é diferente de " + result2526 + " <found.get(0).text()>")
chamada antiga: assertEquals("class with space", found.get(1).text())
nova chamada: assertEquals("class with space", found.get(1).text(), "Era esperado valores iguais, mas  'class with space' é diferente de " + result2527 + " <found.get(1).text()>")
chamada antiga: assertEquals(0, found.size())
nova chamada: assertEquals(0, found.size(), "Era esperado valores iguais, mas  0 é diferente de " + result2528 + " <found.size()>")
chamada antiga: assertEquals(2, els.size())
nova chamada: assertEquals(2, els.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2529 + " <els.size()>")
chamada antiga: assertEquals(2, subSelect.size())
nova chamada: assertEquals(2, subSelect.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2530 + " <subSelect.size()>")
chamada antiga: assertEquals("One", doc.select("div[data='End]']").first().text())
nova chamada: assertEquals("One", doc.select("div[data='End]']").first().text(), "Era esperado valores iguais, mas  'One' é diferente de " + result2531 + " <doc.select('div[data='End]']').first().text()>")
chamada antiga: assertEquals("Two", doc.select("div[data='[Another)]]']").first().text())
nova chamada: assertEquals("Two", doc.select("div[data='[Another)]]']").first().text(), "Era esperado valores iguais, mas  'Two' é diferente de " + result2532 + " <doc.select('div[data='[Another)]]']').first().text()>")
chamada antiga: assertEquals("One", doc.select("div[data=\"End]\"]").first().text())
nova chamada: assertEquals("One", doc.select("div[data=\"End]\"]").first().text(), "Era esperado valores iguais, mas  'One' é diferente de " + result2533 + " <doc.select('div[data=\'End]\']').first().text()>")
chamada antiga: assertEquals("Two", doc.select("div[data=\"[Another)]]\"]").first().text())
nova chamada: assertEquals("Two", doc.select("div[data=\"[Another)]]\"]").first().text(), "Era esperado valores iguais, mas  'Two' é diferente de " + result2534 + " <doc.select('div[data=\'[Another)]]\']').first().text()>")
chamada antiga: assertEquals(2, dataEls1.size())
nova chamada: assertEquals(2, dataEls1.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2535 + " <dataEls1.size()>")
chamada antiga: assertEquals(1, dataEls2.size())
nova chamada: assertEquals(1, dataEls2.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2536 + " <dataEls2.size()>")
chamada antiga: assertEquals(dataEls1.last(), dataEls2.first())
nova chamada: assertEquals(dataEls1.last(), dataEls2.first(), "Era esperado valores iguais, mas " + result2537 + " <dataEls1.last()> é diferente de " + result2538 + " <dataEls2.first()>")
chamada antiga: assertEquals("<script>FUNCTION</script>", dataEls2.outerHtml())
nova chamada: assertEquals("<script>FUNCTION</script>", dataEls2.outerHtml(), "Era esperado valores iguais, mas  'scriptFUNCTION/script' é diferente de " + result2539 + " <dataEls2.outerHtml()>")
chamada antiga: assertEquals(1, dataEls3.size())
nova chamada: assertEquals(1, dataEls3.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2540 + " <dataEls3.size()>")
chamada antiga: assertEquals("span", dataEls3.first().tagName())
nova chamada: assertEquals("span", dataEls3.first().tagName(), "Era esperado valores iguais, mas  'span' é diferente de " + result2541 + " <dataEls3.first().tagName()>")
chamada antiga: assertEquals(3, dataEls4.size())
nova chamada: assertEquals(3, dataEls4.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2542 + " <dataEls4.size()>")
chamada antiga: assertEquals("body", dataEls4.first().tagName())
nova chamada: assertEquals("body", dataEls4.first().tagName(), "Era esperado valores iguais, mas  'body' é diferente de " + result2543 + " <dataEls4.first().tagName()>")
chamada antiga: assertEquals("script", dataEls4.get(1).tagName())
nova chamada: assertEquals("script", dataEls4.get(1).tagName(), "Era esperado valores iguais, mas  'script' é diferente de " + result2544 + " <dataEls4.get(1).tagName()>")
chamada antiga: assertEquals("span", dataEls4.get(2).tagName())
nova chamada: assertEquals("span", dataEls4.get(2).tagName(), "Era esperado valores iguais, mas  'span' é diferente de " + result2545 + " <dataEls4.get(2).tagName()>")
chamada antiga: assertEquals(1, dataEls5.size())
nova chamada: assertEquals(1, dataEls5.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2546 + " <dataEls5.size()>")
chamada antiga: assertEquals(1, els.size())
nova chamada: assertEquals(1, els.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2547 + " <els.size()>")
chamada antiga: assertEquals("One'One", els.text())
nova chamada: assertEquals("One'One", els.text(), "Era esperado valores iguais, mas  'One'One' é diferente de " + result2548 + " <els.text()>")
chamada antiga: assertEquals("One", doc.selectFirst("p").text())
nova chamada: assertEquals("One", doc.selectFirst("p").text(), "Era esperado valores iguais, mas  'One' é diferente de " + result2549 + " <doc.selectFirst('p').text()>")
chamada antiga: assertEquals("Two", doc.selectFirst("p.foo").text())
nova chamada: assertEquals("Two", doc.selectFirst("p.foo").text(), "Era esperado valores iguais, mas  'Two' é diferente de " + result2550 + " <doc.selectFirst('p.foo').text()>")
chamada antiga: assertEquals("One", doc.selectFirst("p, div").text())
nova chamada: assertEquals("One", doc.selectFirst("p, div").text(), "Era esperado valores iguais, mas  'One' é diferente de " + result2551 + " <doc.selectFirst('p, div').text()>")
chamada antiga: assertEquals("One", one.first().text())
nova chamada: assertEquals("One", one.first().text(), "Era esperado valores iguais, mas  'One' é diferente de " + result2552 + " <one.first().text()>")
chamada antiga: assertEquals("Two", two.first().text())
nova chamada: assertEquals("Two", two.first().text(), "Era esperado valores iguais, mas  'Two' é diferente de " + result2553 + " <two.first().text()>")
chamada antiga: assertEquals(origHtml, doc.html())
nova chamada: assertEquals(origHtml, doc.html(), "Era esperado valores iguais, mas  origHtml é diferente de " + result2554 + " <doc.html()>")
chamada antiga: assertEquals("Two", doc.select("p:matchText + br + *").text())
nova chamada: assertEquals("Two", doc.select("p:matchText + br + *").text(), "Era esperado valores iguais, mas  'Two' é diferente de " + result2555 + " <doc.select('p:matchText + br + *').text()>")
chamada antiga: assertEquals(0, els.size())
nova chamada: assertEquals(0, els.size(), "Era esperado valores iguais, mas  0 é diferente de " + result2556 + " <els.size()>")
chamada antiga: assertEquals(3, els.size())
nova chamada: assertEquals(3, els.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2557 + " <els.size()>")
chamada antiga: assertEquals("One", els.get(0).text())
nova chamada: assertEquals("One", els.get(0).text(), "Era esperado valores iguais, mas  'One' é diferente de " + result2558 + " <els.get(0).text()>")
chamada antiga: assertEquals("Two", els.get(1).text())
nova chamada: assertEquals("Two", els.get(1).text(), "Era esperado valores iguais, mas  'Two' é diferente de " + result2559 + " <els.get(1).text()>")
chamada antiga: assertEquals("Three", els.get(2).toString())
nova chamada: assertEquals("Three", els.get(2).toString(), "Era esperado valores iguais, mas  'Three' é diferente de " + result2560 + " <els.get(2).toString()>")
chamada antiga: assertEquals(1, els.size())
nova chamada: assertEquals(1, els.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2561 + " <els.size()>")
chamada antiga: assertEquals("Four", els.text())
nova chamada: assertEquals("Four", els.text(), "Era esperado valores iguais, mas  'Four' é diferente de " + result2562 + " <els.text()>")
chamada antiga: assertEquals(1, els.size())
nova chamada: assertEquals(1, els.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2563 + " <els.size()>")
chamada antiga: assertEquals("Two", els.text())
nova chamada: assertEquals("Two", els.text(), "Era esperado valores iguais, mas  'Two' é diferente de " + result2564 + " <els.text()>")
chamada antiga: assertEquals(1, els.size())
nova chamada: assertEquals(1, els.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2565 + " <els.size()>")
chamada antiga: assertEquals(1, els.size())
nova chamada: assertEquals(1, els.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2566 + " <els.size()>")
chamada antiga: assertEquals(0, doc.select("mixedCase").size())
nova chamada: assertEquals(0, doc.select("mixedCase").size(), "Era esperado valores iguais, mas  0 é diferente de " + result2567 + " <doc.select('mixedCase').size()>")
chamada antiga: assertEquals(1, doc.select("*|mixedCase").size())
nova chamada: assertEquals(1, doc.select("*|mixedCase").size(), "Era esperado valores iguais, mas  1 é diferente de " + result2568 + " <doc.select('*|mixedCase').size()>")
chamada antiga: assertEquals(0, doc.select("lowercase").size())
nova chamada: assertEquals(0, doc.select("lowercase").size(), "Era esperado valores iguais, mas  0 é diferente de " + result2569 + " <doc.select('lowercase').size()>")
chamada antiga: assertEquals(1, doc.select("*|lowercase").size())
nova chamada: assertEquals(1, doc.select("*|lowercase").size(), "Era esperado valores iguais, mas  1 é diferente de " + result2570 + " <doc.select('*|lowercase').size()>")
chamada antiga: assertEquals(0, doc.select("mixedCase").size())
nova chamada: assertEquals(0, doc.select("mixedCase").size(), "Era esperado valores iguais, mas  0 é diferente de " + result2571 + " <doc.select('mixedCase').size()>")
chamada antiga: assertEquals(1, doc.select("*|mixedCase").size())
nova chamada: assertEquals(1, doc.select("*|mixedCase").size(), "Era esperado valores iguais, mas  1 é diferente de " + result2572 + " <doc.select('*|mixedCase').size()>")
chamada antiga: assertEquals(0, doc.select("lowercase").size())
nova chamada: assertEquals(0, doc.select("lowercase").size(), "Era esperado valores iguais, mas  0 é diferente de " + result2573 + " <doc.select('lowercase').size()>")
chamada antiga: assertEquals(1, doc.select("*|lowercase").size())
nova chamada: assertEquals(1, doc.select("*|lowercase").size(), "Era esperado valores iguais, mas  1 é diferente de " + result2574 + " <doc.select('*|lowercase').size()>")
chamada antiga: assertEquals(1, els.size())
nova chamada: assertEquals(1, els.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2575 + " <els.size()>")
chamada antiga: assertEquals("Hello", els.first().text())
nova chamada: assertEquals("Hello", els.first().text(), "Era esperado valores iguais, mas  'Hello' é diferente de " + result2576 + " <els.first().text()>")
chamada antiga: assertEquals(2, select.size())
nova chamada: assertEquals(2, select.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2577 + " <select.size()>")
chamada antiga: assertEquals("1111", select.get(0).text())
nova chamada: assertEquals("1111", select.get(0).text(), "Era esperado valores iguais, mas  '1111' é diferente de " + result2578 + " <select.get(0).text()>")
chamada antiga: assertEquals("2222", select.get(1).text())
nova chamada: assertEquals("2222", select.get(1).text(), "Era esperado valores iguais, mas  '2222' é diferente de " + result2579 + " <select.get(1).text()>")
chamada antiga: assertEquals("1", outer.id())
nova chamada: assertEquals("1", outer.id(), "Era esperado valores iguais, mas  '1' é diferente de " + result2580 + " <outer.id()>")
chamada antiga: assertEquals("1", span.id())
nova chamada: assertEquals("1", span.id(), "Era esperado valores iguais, mas  '1' é diferente de " + result2581 + " <span.id()>")
chamada antiga: assertEquals("2", inner.id())
nova chamada: assertEquals("2", inner.id(), "Era esperado valores iguais, mas  '2' é diferente de " + result2582 + " <inner.id()>")
chamada antiga: assertEquals(outer, span)
nova chamada: assertEquals(outer, span, "Era esperado valores iguais, mas  outer é diferente de " + " span")
chamada antiga: assertNotEquals(outer, inner)
nova chamada: assertNotEquals(outer, inner, "Era esperado valores diferentes, mas  outer é igual a " + " inner")
chamada antiga: assertNotNull(div)
nova chamada: assertNotNull(div, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(2, spans.size())
nova chamada: assertEquals(2, spans.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2583 + " <spans.size()>")
chamada antiga: assertEquals("One Two", spans.get(0).text())
nova chamada: assertEquals("One Two", spans.get(0).text(), "Era esperado valores iguais, mas  'One Two' é diferente de " + result2584 + " <spans.get(0).text()>")
chamada antiga: assertEquals("Three Four", spans.get(1).text())
nova chamada: assertEquals("Three Four", spans.get(1).text(), "Era esperado valores iguais, mas  'Three Four' é diferente de " + result2585 + " <spans.get(1).text()>")
chamada antiga: assertEquals(1, metaEls.size())
nova chamada: assertEquals(1, metaEls.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2586 + " <metaEls.size()>")
chamada antiga: assertEquals("One", metaEls.get(0).text())
nova chamada: assertEquals("One", metaEls.get(0).text(), "Era esperado valores iguais, mas  'One' é diferente de " + result2587 + " <metaEls.get(0).text()>")
chamada antiga: assertEquals(2, nsEls.size())
nova chamada: assertEquals(2, nsEls.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2588 + " <nsEls.size()>")
chamada antiga: assertEquals("One", nsEls.get(0).text())
nova chamada: assertEquals("One", nsEls.get(0).text(), "Era esperado valores iguais, mas  'One' é diferente de " + result2589 + " <nsEls.get(0).text()>")
chamada antiga: assertEquals("Two", nsEls.get(1).text())
nova chamada: assertEquals("Two", nsEls.get(1).text(), "Era esperado valores iguais, mas  'Two' é diferente de " + result2590 + " <nsEls.get(1).text()>")
chamada antiga: assertEquals(1, a.size())
nova chamada: assertEquals(1, a.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2591 + " <a.size()>")
chamada antiga: assertEquals(a, b)
nova chamada: assertEquals(a, b, "Era esperado valores iguais, mas  a é diferente de " + " b")
chamada antiga: assertEquals(a, c)
nova chamada: assertEquals(a, c, "Era esperado valores iguais, mas  a é diferente de " + " c")
chamada antiga: assertEquals(a, d)
nova chamada: assertEquals(a, d, "Era esperado valores iguais, mas  a é diferente de " + " d")
chamada antiga: assertEquals(0, e.size())
nova chamada: assertEquals(0, e.size(), "Era esperado valores iguais, mas  0 é diferente de " + result2592 + " <e.size()>")
chamada antiga: assertNotEquals(a, e)
nova chamada: assertNotEquals(a, e, "Era esperado valores diferentes, mas  a é igual a " + " e")
chamada antiga: assertEquals("%&", ex.getMessage())
nova chamada: assertEquals("%&", ex.getMessage(), "Era esperado valores iguais, mas  '%&' é diferente de " + result2593 + " <ex.getMessage()>")
chamada antiga: assertEquals(2, els.size())
nova chamada: assertEquals(2, els.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2594 + " <els.size()>")
chamada antiga: assertEquals("One", els.get(0).text())
nova chamada: assertEquals("One", els.get(0).text(), "Era esperado valores iguais, mas  'One' é diferente de " + result2595 + " <els.get(0).text()>")
chamada antiga: assertEquals("Two", els.get(1).text())
nova chamada: assertEquals("Two", els.get(1).text(), "Era esperado valores iguais, mas  'Two' é diferente de " + result2596 + " <els.get(1).text()>")
chamada antiga: assertNotNull(div)
nova chamada: assertNotNull(div, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertSame(div, w3cDiv)
nova chamada: assertSame(div, w3cDiv, "Era esperado objetos iguais, mas  div é diferente de " + " w3cDiv")
chamada antiga: assertEquals(1, els.size())
nova chamada: assertEquals(1, els.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2597 + " <els.size()>")
chamada antiga: assertEquals("One", els.get(0).text())
nova chamada: assertEquals("One", els.get(0).text(), "Era esperado valores iguais, mas  'One' é diferente de " + result2598 + " <els.get(0).text()>")
chamada antiga: assertEquals("p", els.get(0).tagName())
nova chamada: assertEquals("p", els.get(0).tagName(), "Era esperado valores iguais, mas  'p' é diferente de " + result2599 + " <els.get(0).tagName()>")
chamada antiga: assertEquals(1, div.selectXpath("//body").size())
nova chamada: assertEquals(1, div.selectXpath("//body").size(), "Era esperado valores iguais, mas  1 é diferente de " + result2600 + " <div.selectXpath('//body').size()>")
chamada antiga: assertEquals(1, doc.selectXpath("//body").size())
nova chamada: assertEquals(1, doc.selectXpath("//body").size(), "Era esperado valores iguais, mas  1 é diferente de " + result2601 + " <doc.selectXpath('//body').size()>")
chamada antiga: assertEquals(0, doc.selectXpath("//div").size())
nova chamada: assertEquals(0, doc.selectXpath("//div").size(), "Era esperado valores iguais, mas  0 é diferente de " + result2602 + " <doc.selectXpath('//div').size()>")
chamada antiga: assertTrue(threw)
nova chamada: assertTrue(threw, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(1, elements.size())
nova chamada: assertEquals(1, elements.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2603 + " <elements.size()>")
chamada antiga: assertEquals("One", elements.first().id())
nova chamada: assertEquals("One", elements.first().id(), "Era esperado valores iguais, mas  'One' é diferente de " + result2604 + " <elements.first().id()>")
chamada antiga: assertEquals(1, elements.size())
nova chamada: assertEquals(1, elements.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2605 + " <elements.size()>")
chamada antiga: assertEquals(1, elements.size())
nova chamada: assertEquals(1, elements.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2606 + " <elements.size()>")
chamada antiga: assertEquals("One", elements.first().id())
nova chamada: assertEquals("One", elements.first().id(), "Era esperado valores iguais, mas  'One' é diferente de " + result2607 + " <elements.first().id()>")
chamada antiga: assertTrue(fromCss.size() >= 1)
nova chamada: assertTrue(fromCss.size() >= 1, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(fromXpath.size() >= 1)
nova chamada: assertTrue(fromXpath.size() >= 1, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(fromCss, fromXpath)
nova chamada: assertEquals(fromCss, fromXpath, "Era esperado valores iguais, mas  fromCss é diferente de " + " fromXpath")
chamada antiga: assertEquals(3, text.size())
nova chamada: assertEquals(3, text.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2608 + " <text.size()>")
chamada antiga: assertEquals("One", text.get(0).text())
nova chamada: assertEquals("One", text.get(0).text(), "Era esperado valores iguais, mas  'One' é diferente de " + result2609 + " <text.get(0).text()>")
chamada antiga: assertEquals("Two", text.get(1).text())
nova chamada: assertEquals("Two", text.get(1).text(), "Era esperado valores iguais, mas  'Two' é diferente de " + result2610 + " <text.get(1).text()>")
chamada antiga: assertEquals("Three and some more", text.get(2).text())
nova chamada: assertEquals("Three and some more", text.get(2).text(), "Era esperado valores iguais, mas  'Three and some more' é diferente de " + result2611 + " <text.get(2).text()>")
chamada antiga: assertEquals(3, nodes.size())
nova chamada: assertEquals(3, nodes.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2612 + " <nodes.size()>")
chamada antiga: assertEquals("One", nodes.get(0).outerHtml())
nova chamada: assertEquals("One", nodes.get(0).outerHtml(), "Era esperado valores iguais, mas  'One' é diferente de " + result2613 + " <nodes.get(0).outerHtml()>")
chamada antiga: assertEquals("Two", nodes.get(1).outerHtml())
nova chamada: assertEquals("Two", nodes.get(1).outerHtml(), "Era esperado valores iguais, mas  'Two' é diferente de " + result2614 + " <nodes.get(1).outerHtml()>")
chamada antiga: assertEquals("Three and some more", nodes.get(2).outerHtml())
nova chamada: assertEquals("Three and some more", nodes.get(2).outerHtml(), "Era esperado valores iguais, mas  'Three and some more' é diferente de " + result2615 + " <nodes.get(2).outerHtml()>")
chamada antiga: assertEquals(2, hrefs.size())
nova chamada: assertEquals(2, hrefs.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2616 + " <hrefs.size()>")
chamada antiga: assertEquals("/foo", hrefs.get(0))
nova chamada: assertEquals("/foo", hrefs.get(0), "Era esperado valores iguais, mas  '/foo' é diferente de " + result2617 + " <hrefs.get(0)>")
chamada antiga: assertEquals("/bar", hrefs.get(1))
nova chamada: assertEquals("/bar", hrefs.get(1), "Era esperado valores iguais, mas  '/bar' é diferente de " + result2618 + " <hrefs.get(1)>")
chamada antiga: assertEquals(3, ps.size())
nova chamada: assertEquals(3, ps.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2619 + " <ps.size()>")
chamada antiga: assertEquals("One", p1.text())
nova chamada: assertEquals("One", p1.text(), "Era esperado valores iguais, mas  'One' é diferente de " + result2620 + " <p1.text()>")
chamada antiga: assertEquals(2, sibs.size())
nova chamada: assertEquals(2, sibs.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2621 + " <sibs.size()>")
chamada antiga: assertEquals("Two", sibs.get(0).text())
nova chamada: assertEquals("Two", sibs.get(0).text(), "Era esperado valores iguais, mas  'Two' é diferente de " + result2622 + " <sibs.get(0).text()>")
chamada antiga: assertEquals("Three", sibs.get(1).text())
nova chamada: assertEquals("Three", sibs.get(1).text(), "Era esperado valores iguais, mas  'Three' é diferente de " + result2623 + " <sibs.get(1).text()>")
chamada antiga: assertNotNull(p)
nova chamada: assertNotNull(p, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(4, chain.size())
nova chamada: assertEquals(4, chain.size(), "Era esperado valores iguais, mas  4 é diferente de " + result2624 + " <chain.size()>")
chamada antiga: assertEquals("html", chain.get(0).tagName())
nova chamada: assertEquals("html", chain.get(0).tagName(), "Era esperado valores iguais, mas  'html' é diferente de " + result2625 + " <chain.get(0).tagName()>")
chamada antiga: assertEquals("p", chain.get(3).tagName())
nova chamada: assertEquals("p", chain.get(3).tagName(), "Era esperado valores iguais, mas  'p' é diferente de " + result2626 + " <chain.get(3).tagName()>")
chamada antiga: assertTrue(threw)
nova chamada: assertTrue(threw, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(1, elements.size())
nova chamada: assertEquals(1, elements.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2627 + " <elements.size()>")
chamada antiga: assertEquals("One", elements.first().id())
nova chamada: assertEquals("One", elements.first().id(), "Era esperado valores iguais, mas  'One' é diferente de " + result2628 + " <elements.first().id()>")
chamada antiga: assertEquals(1, elements.size())
nova chamada: assertEquals(1, elements.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2629 + " <elements.size()>")
chamada antiga: assertEquals("Cheaper by the Dozen", elements.first().text())
nova chamada: assertEquals("Cheaper by the Dozen", elements.first().text(), "Era esperado valores iguais, mas  'Cheaper by the Dozen' é diferente de " + result2630 + " <elements.first().text()>")
chamada antiga: assertEquals(1, byPrefix.size())
nova chamada: assertEquals(1, byPrefix.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2631 + " <byPrefix.size()>")
chamada antiga: assertEquals("Cheaper by the Dozen", byPrefix.first().text())
nova chamada: assertEquals("Cheaper by the Dozen", byPrefix.first().text(), "Era esperado valores iguais, mas  'Cheaper by the Dozen' é diferente de " + result2632 + " <byPrefix.first().text()>")
chamada antiga: assertEquals(1, byLocalName.size())
nova chamada: assertEquals(1, byLocalName.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2633 + " <byLocalName.size()>")
chamada antiga: assertEquals("Cheaper by the Dozen", byLocalName.first().text())
nova chamada: assertEquals("Cheaper by the Dozen", byLocalName.first().text(), "Era esperado valores iguais, mas  'Cheaper by the Dozen' é diferente de " + result2634 + " <byLocalName.first().text()>")
chamada antiga: assertEquals(1, isbn.size())
nova chamada: assertEquals(1, isbn.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2635 + " <isbn.size()>")
chamada antiga: assertEquals("1568491379", isbn.first().text())
nova chamada: assertEquals("1568491379", isbn.first().text(), "Era esperado valores iguais, mas  '1568491379' é diferente de " + result2636 + " <isbn.first().text()>")
chamada antiga: assertEquals(2, els.size())
nova chamada: assertEquals(2, els.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2637 + " <els.size()>")
chamada antiga: assertEquals("Hello", els.get(0).text())
nova chamada: assertEquals("Hello", els.get(0).text(), "Era esperado valores iguais, mas  'Hello' é diferente de " + result2638 + " <els.get(0).text()>")
chamada antiga: assertEquals("There", els.get(1).text())
nova chamada: assertEquals("There", els.get(1).text(), "Era esperado valores iguais, mas  'There' é diferente de " + result2639 + " <els.get(1).text()>")
chamada antiga: assertEquals(2, withTitle.size())
nova chamada: assertEquals(2, withTitle.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2640 + " <withTitle.size()>")
chamada antiga: assertTrue(withTitle.hasAttr("title"))
nova chamada: assertTrue(withTitle.hasAttr("title"), "Era esperado verdadeiro, mas " + result2641 + " <withTitle.hasAttr('title')> é falso")
chamada antiga: assertEquals("foo", withTitle.attr("title"))
nova chamada: assertEquals("foo", withTitle.attr("title"), "Era esperado valores iguais, mas  'foo' é diferente de " + result2642 + " <withTitle.attr('title')>")
chamada antiga: assertEquals(2, withTitle.size())
nova chamada: assertEquals(2, withTitle.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2643 + " <withTitle.size()>")
chamada antiga: assertEquals(0, doc.select("p[title]").size())
nova chamada: assertEquals(0, doc.select("p[title]").size(), "Era esperado valores iguais, mas  0 é diferente de " + result2644 + " <doc.select('p[title]').size()>")
chamada antiga: assertEquals(4, ps.size())
nova chamada: assertEquals(4, ps.size(), "Era esperado valores iguais, mas  4 é diferente de " + result2645 + " <ps.size()>")
chamada antiga: assertEquals("classy", ps.last().attr("style"))
nova chamada: assertEquals("classy", ps.last().attr("style"), "Era esperado valores iguais, mas  'classy' é diferente de " + result2646 + " <ps.last().attr('style')>")
chamada antiga: assertEquals("bar", ps.last().attr("class"))
nova chamada: assertEquals("bar", ps.last().attr("class"), "Era esperado valores iguais, mas  'bar' é diferente de " + result2647 + " <ps.last().attr('class')>")
chamada antiga: assertTrue(ps.hasAttr("class"))
nova chamada: assertTrue(ps.hasAttr("class"), "Era esperado verdadeiro, mas " + result2648 + " <ps.hasAttr('class')> é falso")
chamada antiga: assertTrue(two.hasAttr("abs:href"))
nova chamada: assertTrue(two.hasAttr("abs:href"), "Era esperado verdadeiro, mas " + result2649 + " <two.hasAttr('abs:href')> é falso")
chamada antiga: assertTrue(both.hasAttr("abs:href"))
nova chamada: assertTrue(both.hasAttr("abs:href"), "Era esperado verdadeiro, mas " + result2650 + " <both.hasAttr('abs:href')> é falso")
chamada antiga: assertEquals("foo", classVal)
nova chamada: assertEquals("foo", classVal, "Era esperado valores iguais, mas  'foo' é diferente de " + " classVal")
chamada antiga: assertEquals("", one.attr("abs:href"))
nova chamada: assertEquals("", one.attr("abs:href"), "Era esperado valores iguais, mas  '' é diferente de " + result2651 + " <one.attr('abs:href')>")
chamada antiga: assertEquals("https://jsoup.org", two.attr("abs:href"))
nova chamada: assertEquals("https://jsoup.org", two.attr("abs:href"), "Era esperado valores iguais, mas  'https://jsoup.org' é diferente de " + result2652 + " <two.attr('abs:href')>")
chamada antiga: assertEquals("https://jsoup.org", both.attr("abs:href"))
nova chamada: assertEquals("https://jsoup.org", both.attr("abs:href"), "Era esperado valores iguais, mas  'https://jsoup.org' é diferente de " + result2653 + " <both.attr('abs:href')>")
chamada antiga: assertTrue(els.hasClass("red"))
nova chamada: assertTrue(els.hasClass("red"), "Era esperado verdadeiro, mas " + result2654 + " <els.hasClass('red')> é falso")
chamada antiga: assertEquals("blue", els.get(0).className())
nova chamada: assertEquals("blue", els.get(0).className(), "Era esperado valores iguais, mas  'blue' é diferente de " + result2655 + " <els.get(0).className()>")
chamada antiga: assertEquals("red green blue mellow", els.get(1).className())
nova chamada: assertEquals("red green blue mellow", els.get(1).className(), "Era esperado valores iguais, mas  'red green blue mellow' é diferente de " + result2656 + " <els.get(1).className()>")
chamada antiga: assertTrue(one.hasClass("One"))
nova chamada: assertTrue(one.hasClass("One"), "Era esperado verdadeiro, mas " + result2657 + " <one.hasClass('One')> é falso")
chamada antiga: assertTrue(one.hasClass("ONE"))
nova chamada: assertTrue(one.hasClass("ONE"), "Era esperado verdadeiro, mas " + result2658 + " <one.hasClass('ONE')> é falso")
chamada antiga: assertTrue(two.hasClass("TWO"))
nova chamada: assertTrue(two.hasClass("TWO"), "Era esperado verdadeiro, mas " + result2659 + " <two.hasClass('TWO')> é falso")
chamada antiga: assertTrue(two.hasClass("Two"))
nova chamada: assertTrue(two.hasClass("Two"), "Era esperado verdadeiro, mas " + result2660 + " <two.hasClass('Two')> é falso")
chamada antiga: assertTrue(thr.hasClass("ThreE"))
nova chamada: assertTrue(thr.hasClass("ThreE"), "Era esperado verdadeiro, mas " + result2661 + " <thr.hasClass('ThreE')> é falso")
chamada antiga: assertTrue(thr.hasClass("three"))
nova chamada: assertTrue(thr.hasClass("three"), "Era esperado verdadeiro, mas " + result2662 + " <thr.hasClass('three')> é falso")
chamada antiga: assertEquals("Hello there world", doc.select("div > *").text())
nova chamada: assertEquals("Hello there world", doc.select("div > *").text(), "Era esperado valores iguais, mas  'Hello there world' é diferente de " + result2663 + " <doc.select('div > *').text()>")
chamada antiga: assertTrue(divs.hasText())
nova chamada: assertTrue(divs.hasText(), "Era esperado verdadeiro, mas " + result2664 + " <divs.hasText()> é falso")
chamada antiga: assertEquals("<p>Hello</p>\n<p>There</p>", divs.html())
nova chamada: assertEquals("<p>Hello</p>\n<p>There</p>", divs.html(), "Era esperado valores iguais, mas  'pHello/p\npThere/p' é diferente de " + result2665 + " <divs.html()>")
chamada antiga: assertEquals("<div><p>Hello</p></div><div><p>There</p></div>", TextUtil.stripNewlines(divs.outerHtml()))
nova chamada: assertEquals("<div><p>Hello</p></div><div><p>There</p></div>", TextUtil.stripNewlines(divs.outerHtml()), "Era esperado valores iguais, mas  'divpHello/p/divdivpThere/p/div' é diferente de " + result2666 + " <TextUtil.stripNewlines(divs.outerHtml())>")
chamada antiga: assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml()))
nova chamada: assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml()), "Era esperado valores iguais, mas  'pbBold/bTwoiItal/i/p' é diferente de " + result2667 + " <TextUtil.stripNewlines(ps.get(1).outerHtml())>")
chamada antiga: assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml()))
nova chamada: assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml()), "Era esperado valores iguais, mas  'pspanGone/span/p' é diferente de " + result2668 + " <TextUtil.stripNewlines(ps.get(1).outerHtml())>")
chamada antiga: assertEquals(2, els.size())
nova chamada: assertEquals(2, els.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2669 + " <els.size()>")
chamada antiga: assertEquals("one", els.val())
nova chamada: assertEquals("one", els.val(), "Era esperado valores iguais, mas  'one' é diferente de " + result2670 + " <els.val()>")
chamada antiga: assertEquals("two", els.last().val())
nova chamada: assertEquals("two", els.last().val(), "Era esperado valores iguais, mas  'two' é diferente de " + result2671 + " <els.last().val()>")
chamada antiga: assertEquals("three", els.first().val())
nova chamada: assertEquals("three", els.first().val(), "Era esperado valores iguais, mas  'three' é diferente de " + result2672 + " <els.first().val()>")
chamada antiga: assertEquals("three", els.last().val())
nova chamada: assertEquals("three", els.last().val(), "Era esperado valores iguais, mas  'three' é diferente de " + result2673 + " <els.last().val()>")
chamada antiga: assertEquals("<textarea>three</textarea>", els.last().outerHtml())
nova chamada: assertEquals("<textarea>three</textarea>", els.last().outerHtml(), "Era esperado valores iguais, mas  'textareathree/textarea' é diferente de " + result2674 + " <els.last().outerHtml()>")
chamada antiga: assertEquals("<p>This <span>foo</span><a>is</a> <span>foo</span><a>jsoup</a>.</p>", TextUtil.stripNewlines(doc.body().html()))
nova chamada: assertEquals("<p>This <span>foo</span><a>is</a> <span>foo</span><a>jsoup</a>.</p>", TextUtil.stripNewlines(doc.body().html()), "Era esperado valores iguais, mas  'pThis spanfoo/spanais/a spanfoo/spanajsoup/a./p' é diferente de " + result2675 + " <TextUtil.stripNewlines(doc.body().html())>")
chamada antiga: assertEquals("<p>This <a>is</a><span>foo</span> <a>jsoup</a><span>foo</span>.</p>", TextUtil.stripNewlines(doc.body().html()))
nova chamada: assertEquals("<p>This <a>is</a><span>foo</span> <a>jsoup</a><span>foo</span>.</p>", TextUtil.stripNewlines(doc.body().html()), "Era esperado valores iguais, mas  'pThis ais/aspanfoo/span ajsoup/aspanfoo/span./p' é diferente de " + result2676 + " <TextUtil.stripNewlines(doc.body().html())>")
chamada antiga: assertEquals("<p><i><b>This</b></i> is <i><b>jsoup</b></i></p>", doc.body().html())
nova chamada: assertEquals("<p><i><b>This</b></i> is <i><b>jsoup</b></i></p>", doc.body().html(), "Era esperado valores iguais, mas  'pibThis/b/i is ibjsoup/b/i/p' é diferente de " + result2677 + " <doc.body().html()>")
chamada antiga: assertEquals("<div>\n <p><b>This</b> is <b>jsoup</b>.</p>\n</div>\n<div>\n <p>How do you like it?</p>\n</div>", doc.body().html())
nova chamada: assertEquals("<div>\n <p><b>This</b> is <b>jsoup</b>.</p>\n</div>\n<div>\n <p>How do you like it?</p>\n</div>", doc.body().html(), "Era esperado valores iguais, mas  'div\n pbThis/b is bjsoup/b./p\n/div\ndiv\n pHow do you like it?/p\n/div' é diferente de " + result2678 + " <doc.body().html()>")
chamada antiga: assertEquals("<div>One <a href=\"/\">Two</a></div>", TextUtil.stripNewlines(doc.body().html()))
nova chamada: assertEquals("<div>One <a href=\"/\">Two</a></div>", TextUtil.stripNewlines(doc.body().html()), "Era esperado valores iguais, mas  'divOne a href=\'/\'Two/a/div' é diferente de " + result2679 + " <TextUtil.stripNewlines(doc.body().html())>")
chamada antiga: assertEquals("<a>One</a> Two Three <i>Four</i> Fix <i>Six</i>", TextUtil.stripNewlines(doc.body().html()))
nova chamada: assertEquals("<a>One</a> Two Three <i>Four</i> Fix <i>Six</i>", TextUtil.stripNewlines(doc.body().html()), "Era esperado valores iguais, mas  'aOne/a Two Three iFour/i Fix iSix/i' é diferente de " + result2680 + " <TextUtil.stripNewlines(doc.body().html())>")
chamada antiga: assertEquals("<p>One two three four</p>", doc.body().html())
nova chamada: assertEquals("<p>One two three four</p>", doc.body().html(), "Era esperado valores iguais, mas  'pOne two three four/p' é diferente de " + result2681 + " <doc.body().html()>")
chamada antiga: assertEquals("<div><p></p> <p></p></div>", doc.body().html())
nova chamada: assertEquals("<div><p></p> <p></p></div>", doc.body().html(), "Era esperado valores iguais, mas  'divp/p p/p/div' é diferente de " + result2682 + " <doc.body().html()>")
chamada antiga: assertEquals("<div> jsoup </div>", doc.body().html())
nova chamada: assertEquals("<div> jsoup </div>", doc.body().html(), "Era esperado valores iguais, mas  'div jsoup /div' é diferente de " + result2683 + " <doc.body().html()>")
chamada antiga: assertEquals("there", doc.select("p").eq(1).text())
nova chamada: assertEquals("there", doc.select("p").eq(1).text(), "Era esperado valores iguais, mas  'there' é diferente de " + result2684 + " <doc.select('p').eq(1).text()>")
chamada antiga: assertEquals("there", doc.select("p").get(1).text())
nova chamada: assertEquals("there", doc.select("p").get(1).text(), "Era esperado valores iguais, mas  'there' é diferente de " + result2685 + " <doc.select('p').get(1).text()>")
chamada antiga: assertTrue(ps.is("[title=foo]"))
nova chamada: assertTrue(ps.is("[title=foo]"), "Era esperado verdadeiro, mas " + result2686 + " <ps.is('[title=foo]')> é falso")
chamada antiga: assertEquals(3, parents.size())
nova chamada: assertEquals(3, parents.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2687 + " <parents.size()>")
chamada antiga: assertEquals("div", parents.get(0).tagName())
nova chamada: assertEquals("div", parents.get(0).tagName(), "Era esperado valores iguais, mas  'div' é diferente de " + result2688 + " <parents.get(0).tagName()>")
chamada antiga: assertEquals("body", parents.get(1).tagName())
nova chamada: assertEquals("body", parents.get(1).tagName(), "Era esperado valores iguais, mas  'body' é diferente de " + result2689 + " <parents.get(1).tagName()>")
chamada antiga: assertEquals("html", parents.get(2).tagName())
nova chamada: assertEquals("html", parents.get(2).tagName(), "Era esperado valores iguais, mas  'html' é diferente de " + result2690 + " <parents.get(2).tagName()>")
chamada antiga: assertEquals(1, div1.size())
nova chamada: assertEquals(1, div1.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2691 + " <div1.size()>")
chamada antiga: assertEquals("1", div1.first().id())
nova chamada: assertEquals("1", div1.first().id(), "Era esperado valores iguais, mas  '1' é diferente de " + result2692 + " <div1.first().id()>")
chamada antiga: assertEquals(1, div2.size())
nova chamada: assertEquals(1, div2.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2693 + " <div2.size()>")
chamada antiga: assertEquals("2", div2.first().id())
nova chamada: assertEquals("2", div2.first().id(), "Era esperado valores iguais, mas  '2' é diferente de " + result2694 + " <div2.first().id()>")
chamada antiga: assertEquals("<p>Hello <em>there</em> <em>now</em></p>", doc.body().html())
nova chamada: assertEquals("<p>Hello <em>there</em> <em>now</em></p>", doc.body().html(), "Era esperado valores iguais, mas  'pHello emthere/em emnow/em/p' é diferente de " + result2695 + " <doc.body().html()>")
chamada antiga: assertEquals("<div><p><#text></#text></p></div><div><#text></#text></div>", accum.toString())
nova chamada: assertEquals("<div><p><#text></#text></p></div><div><#text></#text></div>", accum.toString(), "Era esperado valores iguais, mas  'divp#text/#text/p/divdiv#text/#text/div' é diferente de " + result2696 + " <accum.toString()>")
chamada antiga: assertEquals(3, els.size())
nova chamada: assertEquals(3, els.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2697 + " <els.size()>")
chamada antiga: assertEquals(2, forms.size())
nova chamada: assertEquals(2, forms.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2698 + " <forms.size()>")
chamada antiga: assertNotNull(forms.get(0))
nova chamada: assertNotNull(forms.get(0), "Era esperado não nulo, mas " + result2699 + " <forms.get(0)> é nulo")
chamada antiga: assertNotNull(forms.get(1))
nova chamada: assertNotNull(forms.get(1), "Era esperado não nulo, mas " + result2700 + " <forms.get(1)> é nulo")
chamada antiga: assertEquals("1", forms.get(0).id())
nova chamada: assertEquals("1", forms.get(0).id(), "Era esperado valores iguais, mas  '1' é diferente de " + result2701 + " <forms.get(0).id()>")
chamada antiga: assertEquals("2", forms.get(1).id())
nova chamada: assertEquals("2", forms.get(1).id(), "Era esperado valores iguais, mas  '2' é diferente de " + result2702 + " <forms.get(1).id()>")
chamada antiga: assertEquals(2, comments.size())
nova chamada: assertEquals(2, comments.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2703 + " <comments.size()>")
chamada antiga: assertEquals(" comment2 ", comments.get(0).getData())
nova chamada: assertEquals(" comment2 ", comments.get(0).getData(), "Era esperado valores iguais, mas  ' comment2 ' é diferente de " + result2704 + " <comments.get(0).getData()>")
chamada antiga: assertEquals(" comment3 ", comments.get(1).getData())
nova chamada: assertEquals(" comment3 ", comments.get(1).getData(), "Era esperado valores iguais, mas  ' comment3 ' é diferente de " + result2705 + " <comments.get(1).getData()>")
chamada antiga: assertEquals(1, comments1.size())
nova chamada: assertEquals(1, comments1.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2706 + " <comments1.size()>")
chamada antiga: assertEquals(" comment3 ", comments1.get(0).getData())
nova chamada: assertEquals(" comment3 ", comments1.get(0).getData(), "Era esperado valores iguais, mas  ' comment3 ' é diferente de " + result2707 + " <comments1.get(0).getData()>")
chamada antiga: assertEquals(2, textNodes.size())
nova chamada: assertEquals(2, textNodes.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2708 + " <textNodes.size()>")
chamada antiga: assertEquals("Two", textNodes.get(0).text())
nova chamada: assertEquals("Two", textNodes.get(0).text(), "Era esperado valores iguais, mas  'Two' é diferente de " + result2709 + " <textNodes.get(0).text()>")
chamada antiga: assertEquals("Four", textNodes.get(1).text())
nova chamada: assertEquals("Four", textNodes.get(1).text(), "Era esperado valores iguais, mas  'Four' é diferente de " + result2710 + " <textNodes.get(1).text()>")
chamada antiga: assertEquals(2, dataNodes.size())
nova chamada: assertEquals(2, dataNodes.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2711 + " <dataNodes.size()>")
chamada antiga: assertEquals("Two", dataNodes.get(0).getWholeData())
nova chamada: assertEquals("Two", dataNodes.get(0).getWholeData(), "Era esperado valores iguais, mas  'Two' é diferente de " + result2712 + " <dataNodes.get(0).getWholeData()>")
chamada antiga: assertEquals("Three", dataNodes.get(1).getWholeData())
nova chamada: assertEquals("Three", dataNodes.get(1).getWholeData(), "Era esperado valores iguais, mas  'Three' é diferente de " + result2713 + " <dataNodes.get(1).getWholeData()>")
chamada antiga: assertEquals(1, scriptNode.size())
nova chamada: assertEquals(1, scriptNode.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2714 + " <scriptNode.size()>")
chamada antiga: assertEquals("<crux>", dataNode.getWholeData())
nova chamada: assertEquals("<crux>", dataNode.getWholeData(), "Era esperado valores iguais, mas  'crux' é diferente de " + result2715 + " <dataNode.getWholeData()>")
chamada antiga: assertEquals("<script type=\"application/json\"><cromulent></script>", script.outerHtml())
nova chamada: assertEquals("<script type=\"application/json\"><cromulent></script>", script.outerHtml(), "Era esperado valores iguais, mas  'script type=\'application/json\'cromulent/script' é diferente de " + result2716 + " <script.outerHtml()>")
chamada antiga: assertEquals(0, doc.select("form").textNodes().size())
nova chamada: assertEquals(0, doc.select("form").textNodes().size(), "Era esperado valores iguais, mas  0 é diferente de " + result2717 + " <doc.select('form').textNodes().size()>")
chamada antiga: assertEquals(1, els.size())
nova chamada: assertEquals(1, els.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2718 + " <els.size()>")
chamada antiga: assertEquals("Check", els.text())
nova chamada: assertEquals("Check", els.text(), "Era esperado valores iguais, mas  'Check' é diferente de " + result2719 + " <els.text()>")
chamada antiga: assertEquals(2, els.size())
nova chamada: assertEquals(2, els.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2720 + " <els.size()>")
chamada antiga: assertEquals(2, next.size())
nova chamada: assertEquals(2, next.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2721 + " <next.size()>")
chamada antiga: assertEquals("5", next.first().text())
nova chamada: assertEquals("5", next.first().text(), "Era esperado valores iguais, mas  '5' é diferente de " + result2722 + " <next.first().text()>")
chamada antiga: assertEquals("11", next.last().text())
nova chamada: assertEquals("11", next.last().text(), "Era esperado valores iguais, mas  '11' é diferente de " + result2723 + " <next.last().text()>")
chamada antiga: assertEquals(0, els.next("p:contains(6)").size())
nova chamada: assertEquals(0, els.next("p:contains(6)").size(), "Era esperado valores iguais, mas  0 é diferente de " + result2724 + " <els.next('p:contains(6)').size()>")
chamada antiga: assertEquals(1, nextF.size())
nova chamada: assertEquals(1, nextF.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2725 + " <nextF.size()>")
chamada antiga: assertEquals("5", nextF.first().text())
nova chamada: assertEquals("5", nextF.first().text(), "Era esperado valores iguais, mas  '5' é diferente de " + result2726 + " <nextF.first().text()>")
chamada antiga: assertEquals(4, nextA.size())
nova chamada: assertEquals(4, nextA.size(), "Era esperado valores iguais, mas  4 é diferente de " + result2727 + " <nextA.size()>")
chamada antiga: assertEquals("5", nextA.first().text())
nova chamada: assertEquals("5", nextA.first().text(), "Era esperado valores iguais, mas  '5' é diferente de " + result2728 + " <nextA.first().text()>")
chamada antiga: assertEquals("12", nextA.last().text())
nova chamada: assertEquals("12", nextA.last().text(), "Era esperado valores iguais, mas  '12' é diferente de " + result2729 + " <nextA.last().text()>")
chamada antiga: assertEquals(1, nextAF.size())
nova chamada: assertEquals(1, nextAF.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2730 + " <nextAF.size()>")
chamada antiga: assertEquals("6", nextAF.first().text())
nova chamada: assertEquals("6", nextAF.first().text(), "Era esperado valores iguais, mas  '6' é diferente de " + result2731 + " <nextAF.first().text()>")
chamada antiga: assertEquals(2, prev.size())
nova chamada: assertEquals(2, prev.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2732 + " <prev.size()>")
chamada antiga: assertEquals("3", prev.first().text())
nova chamada: assertEquals("3", prev.first().text(), "Era esperado valores iguais, mas  '3' é diferente de " + result2733 + " <prev.first().text()>")
chamada antiga: assertEquals("9", prev.last().text())
nova chamada: assertEquals("9", prev.last().text(), "Era esperado valores iguais, mas  '9' é diferente de " + result2734 + " <prev.last().text()>")
chamada antiga: assertEquals(0, els.prev("p:contains(1)").size())
nova chamada: assertEquals(0, els.prev("p:contains(1)").size(), "Era esperado valores iguais, mas  0 é diferente de " + result2735 + " <els.prev('p:contains(1)').size()>")
chamada antiga: assertEquals(1, prevF.size())
nova chamada: assertEquals(1, prevF.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2736 + " <prevF.size()>")
chamada antiga: assertEquals("3", prevF.first().text())
nova chamada: assertEquals("3", prevF.first().text(), "Era esperado valores iguais, mas  '3' é diferente de " + result2737 + " <prevF.first().text()>")
chamada antiga: assertEquals(6, prevA.size())
nova chamada: assertEquals(6, prevA.size(), "Era esperado valores iguais, mas  6 é diferente de " + result2738 + " <prevA.size()>")
chamada antiga: assertEquals("3", prevA.first().text())
nova chamada: assertEquals("3", prevA.first().text(), "Era esperado valores iguais, mas  '3' é diferente de " + result2739 + " <prevA.first().text()>")
chamada antiga: assertEquals("7", prevA.last().text())
nova chamada: assertEquals("7", prevA.last().text(), "Era esperado valores iguais, mas  '7' é diferente de " + result2740 + " <prevA.last().text()>")
chamada antiga: assertEquals(1, prevAF.size())
nova chamada: assertEquals(1, prevAF.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2741 + " <prevAF.size()>")
chamada antiga: assertEquals("1", prevAF.first().text())
nova chamada: assertEquals("1", prevAF.first().text(), "Era esperado valores iguais, mas  '1' é diferente de " + result2742 + " <prevAF.first().text()>")
chamada antiga: assertEquals(2, divText.size())
nova chamada: assertEquals(2, divText.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2743 + " <divText.size()>")
chamada antiga: assertEquals("1 2 3 4 5 6", divText.get(0))
nova chamada: assertEquals("1 2 3 4 5 6", divText.get(0), "Era esperado valores iguais, mas  '1 2 3 4 5 6' é diferente de " + result2744 + " <divText.get(0)>")
chamada antiga: assertEquals("7 8 9 10 11 12", divText.get(1))
nova chamada: assertEquals("7 8 9 10 11 12", divText.get(1), "Era esperado valores iguais, mas  '7 8 9 10 11 12' é diferente de " + result2745 + " <divText.get(1)>")
chamada antiga: assertEquals(13, ps.size())
nova chamada: assertEquals(13, ps.size(), "Era esperado valores iguais, mas  13 é diferente de " + result2746 + " <ps.size()>")
chamada antiga: assertEquals(12, pText.size())
nova chamada: assertEquals(12, pText.size(), "Era esperado valores iguais, mas  12 é diferente de " + result2747 + " <pText.size()>")
chamada antiga: assertEquals("1", pText.get(0))
nova chamada: assertEquals("1", pText.get(0), "Era esperado valores iguais, mas  '1' é diferente de " + result2748 + " <pText.get(0)>")
chamada antiga: assertEquals("2", pText.get(1))
nova chamada: assertEquals("2", pText.get(1), "Era esperado valores iguais, mas  '2' é diferente de " + result2749 + " <pText.get(1)>")
chamada antiga: assertEquals("5", pText.get(4))
nova chamada: assertEquals("5", pText.get(4), "Era esperado valores iguais, mas  '5' é diferente de " + result2750 + " <pText.get(4)>")
chamada antiga: assertEquals("7", pText.get(6))
nova chamada: assertEquals("7", pText.get(6), "Era esperado valores iguais, mas  '7' é diferente de " + result2751 + " <pText.get(6)>")
chamada antiga: assertEquals("12", pText.get(11))
nova chamada: assertEquals("12", pText.get(11), "Era esperado valores iguais, mas  '12' é diferente de " + result2752 + " <pText.get(11)>")
chamada antiga: assertEquals(3, hrefAttrs.size())
nova chamada: assertEquals(3, hrefAttrs.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2753 + " <hrefAttrs.size()>")
chamada antiga: assertEquals("/foo", hrefAttrs.get(0))
nova chamada: assertEquals("/foo", hrefAttrs.get(0), "Era esperado valores iguais, mas  '/foo' é diferente de " + result2754 + " <hrefAttrs.get(0)>")
chamada antiga: assertEquals("http://example.com/bar", hrefAttrs.get(1))
nova chamada: assertEquals("http://example.com/bar", hrefAttrs.get(1), "Era esperado valores iguais, mas  'http://example.com/bar' é diferente de " + result2755 + " <hrefAttrs.get(1)>")
chamada antiga: assertEquals("", hrefAttrs.get(2))
nova chamada: assertEquals("", hrefAttrs.get(2), "Era esperado valores iguais, mas  '' é diferente de " + result2756 + " <hrefAttrs.get(2)>")
chamada antiga: assertEquals(4, doc.select("a").size())
nova chamada: assertEquals(4, doc.select("a").size(), "Era esperado valores iguais, mas  4 é diferente de " + result2757 + " <doc.select('a').size()>")
chamada antiga: assertEquals(3, absAttrs.size())
nova chamada: assertEquals(3, absAttrs.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2758 + " <absAttrs.size()>")
chamada antiga: assertEquals(3, absAttrs.size())
nova chamada: assertEquals(3, absAttrs.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2759 + " <absAttrs.size()>")
chamada antiga: assertEquals("http://example.com/foo", absAttrs.get(0))
nova chamada: assertEquals("http://example.com/foo", absAttrs.get(0), "Era esperado valores iguais, mas  'http://example.com/foo' é diferente de " + result2760 + " <absAttrs.get(0)>")
chamada antiga: assertEquals("http://example.com/bar", absAttrs.get(1))
nova chamada: assertEquals("http://example.com/bar", absAttrs.get(1), "Era esperado valores iguais, mas  'http://example.com/bar' é diferente de " + result2761 + " <absAttrs.get(1)>")
chamada antiga: assertEquals("http://example.com", absAttrs.get(2))
nova chamada: assertEquals("http://example.com", absAttrs.get(2), "Era esperado valores iguais, mas  'http://example.com' é diferente de " + result2762 + " <absAttrs.get(2)>")
chamada antiga: assertEquals("l1 l2 yes", doc.body().select(">p>strong,>*>li>strong").text())
nova chamada: assertEquals("l1 l2 yes", doc.body().select(">p>strong,>*>li>strong").text(), "Era esperado valores iguais, mas  'l1 l2 yes' é diferente de " + result2763 + " <doc.body().select('>p>strong,>*>li>strong').text()>")
chamada antiga: assertEquals("l2 yes", doc.select("body>p>strong,body>*>li>strong").text())
nova chamada: assertEquals("l2 yes", doc.select("body>p>strong,body>*>li>strong").text(), "Era esperado valores iguais, mas  'l2 yes' é diferente de " + result2764 + " <doc.select('body>p>strong,body>*>li>strong').text()>")
chamada antiga: assertEquals("yes", doc.select(">body>*>li>strong,>body>p>strong").text())
nova chamada: assertEquals("yes", doc.select(">body>*>li>strong,>body>p>strong").text(), "Era esperado valores iguais, mas  'yes' é diferente de " + result2765 + " <doc.select('>body>*>li>strong,>body>p>strong').text()>")
chamada antiga: assertEquals("l2", doc.select(">body>p>strong,>body>*>li>strong").text())
nova chamada: assertEquals("l2", doc.select(">body>p>strong,>body>*>li>strong").text(), "Era esperado valores iguais, mas  'l2' é diferente de " + result2766 + " <doc.select('>body>p>strong,>body>*>li>strong').text()>")
chamada antiga: assertTrue(eval instanceof CombiningEvaluator.Or)
nova chamada: assertTrue(eval instanceof CombiningEvaluator.Or, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(3, or.evaluators.size())
nova chamada: assertEquals(3, or.evaluators.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2767 + " <or.evaluators.size()>")
chamada antiga: assertTrue(eval instanceof CombiningEvaluator.Or)
nova chamada: assertTrue(eval instanceof CombiningEvaluator.Or, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(2, or.evaluators.size())
nova chamada: assertEquals(2, or.evaluators.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2768 + " <or.evaluators.size()>")
chamada antiga: assertEquals(".foo > ol", andLeft.toString())
nova chamada: assertEquals(".foo > ol", andLeft.toString(), "Era esperado valores iguais, mas  '.foo  ol' é diferente de " + result2769 + " <andLeft.toString()>")
chamada antiga: assertEquals(2, andLeft.evaluators.size())
nova chamada: assertEquals(2, andLeft.evaluators.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2770 + " <andLeft.evaluators.size()>")
chamada antiga: assertEquals("ol > li + li", andRight.toString())
nova chamada: assertEquals("ol > li + li", andRight.toString(), "Era esperado valores iguais, mas  'ol  li + li' é diferente de " + result2771 + " <andRight.toString()>")
chamada antiga: assertEquals(2, andRight.evaluators.size())
nova chamada: assertEquals(2, andRight.evaluators.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2772 + " <andRight.evaluators.size()>")
chamada antiga: assertEquals(query, eval.toString())
nova chamada: assertEquals(query, eval.toString(), "Era esperado valores iguais, mas  query é diferente de " + result2773 + " <eval.toString()>")
chamada antiga: assertEquals("span div", parse.toString())
nova chamada: assertEquals("span div", parse.toString(), "Era esperado valores iguais, mas  'span div' é diferente de " + result2774 + " <parse.toString()>")
chamada antiga: assertEquals(q, parse.toString())
nova chamada: assertEquals(q, parse.toString(), "Era esperado valores iguais, mas  q é diferente de " + result2775 + " <parse.toString()>")
chamada antiga: assertEquals(3, sel.size())
nova chamada: assertEquals(3, sel.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2776 + " <sel.size()>")
chamada antiga: assertEquals("head", sel.get(0).tagName())
nova chamada: assertEquals("head", sel.get(0).tagName(), "Era esperado valores iguais, mas  'head' é diferente de " + result2777 + " <sel.get(0).tagName()>")
chamada antiga: assertEquals("br", sel.get(1).tagName())
nova chamada: assertEquals("br", sel.get(1).tagName(), "Era esperado valores iguais, mas  'br' é diferente de " + result2778 + " <sel.get(1).tagName()>")
chamada antiga: assertEquals("p", sel.get(2).tagName())
nova chamada: assertEquals("p", sel.get(2).tagName(), "Era esperado valores iguais, mas  'p' é diferente de " + result2779 + " <sel.get(2).tagName()>")
chamada antiga: assertEquals(1, sel.size())
nova chamada: assertEquals(1, sel.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2780 + " <sel.size()>")
chamada antiga: assertEquals("br", sel.get(0).tagName())
nova chamada: assertEquals("br", sel.get(0).tagName(), "Era esperado valores iguais, mas  'br' é diferente de " + result2781 + " <sel.get(0).tagName()>")
chamada antiga: assertEquals(6, sel.size())
nova chamada: assertEquals(6, sel.size(), "Era esperado valores iguais, mas  6 é diferente de " + result2782 + " <sel.size()>")
chamada antiga: assertEquals("head", sel.get(0).tagName())
nova chamada: assertEquals("head", sel.get(0).tagName(), "Era esperado valores iguais, mas  'head' é diferente de " + result2783 + " <sel.get(0).tagName()>")
chamada antiga: assertEquals("body", sel.get(1).tagName())
nova chamada: assertEquals("body", sel.get(1).tagName(), "Era esperado valores iguais, mas  'body' é diferente de " + result2784 + " <sel.get(1).tagName()>")
chamada antiga: assertEquals("span", sel.get(2).tagName())
nova chamada: assertEquals("span", sel.get(2).tagName(), "Era esperado valores iguais, mas  'span' é diferente de " + result2785 + " <sel.get(2).tagName()>")
chamada antiga: assertEquals("br", sel.get(3).tagName())
nova chamada: assertEquals("br", sel.get(3).tagName(), "Era esperado valores iguais, mas  'br' é diferente de " + result2786 + " <sel.get(3).tagName()>")
chamada antiga: assertEquals("p", sel.get(4).tagName())
nova chamada: assertEquals("p", sel.get(4).tagName(), "Era esperado valores iguais, mas  'p' é diferente de " + result2787 + " <sel.get(4).tagName()>")
chamada antiga: assertTrue(sel.get(4).hasClass("empty"))
nova chamada: assertTrue(sel.get(4).hasClass("empty"), "Era esperado verdadeiro, mas " + result2788 + " <sel.get(4).hasClass('empty')> é falso")
chamada antiga: assertEquals("em", sel.get(5).tagName())
nova chamada: assertEquals("em", sel.get(5).tagName(), "Era esperado valores iguais, mas  'em' é diferente de " + result2789 + " <sel.get(5).tagName()>")
chamada antiga: assertEquals(1, sel.size())
nova chamada: assertEquals(1, sel.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2790 + " <sel.size()>")
chamada antiga: assertNotNull(sel.get(0))
nova chamada: assertNotNull(sel.get(0), "Era esperado não nulo, mas " + result2791 + " <sel.get(0)> é nulo")
chamada antiga: assertEquals(Tag.valueOf("html"), sel.get(0).tag())
nova chamada: assertEquals(Tag.valueOf("html"), sel.get(0).tag(), "Era esperado valores iguais, mas " + result2792 + " <Tag.valueOf('html')> é diferente de " + result2793 + " <sel.get(0).tag()>")
chamada antiga: assertEquals(1, sel2.size())
nova chamada: assertEquals(1, sel2.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2794 + " <sel2.size()>")
chamada antiga: assertNotNull(sel2.get(0))
nova chamada: assertNotNull(sel2.get(0), "Era esperado não nulo, mas " + result2795 + " <sel2.get(0)> é nulo")
chamada antiga: assertEquals(Tag.valueOf("body"), sel2.get(0).tag())
nova chamada: assertEquals(Tag.valueOf("body"), sel2.get(0).tag(), "Era esperado valores iguais, mas " + result2796 + " <Tag.valueOf('body')> é diferente de " + result2797 + " <sel2.get(0).tag()>")
chamada antiga: assertEquals("<div><p><#text></#text></p></div><div><#text></#text></div>", accum.toString())
nova chamada: assertEquals("<div><p><#text></#text></p></div><div><#text></#text></div>", accum.toString(), "Era esperado valores iguais, mas  'divp#text/#text/p/divdiv#text/#text/div' é diferente de " + result2798 + " <accum.toString()>")
chamada antiga: assertEquals("<div><p></p></div><div><#text></#text></div>", accum.toString())
nova chamada: assertEquals("<div><p></p></div><div><#text></#text></div>", accum.toString(), "Era esperado valores iguais, mas  'divp/p/divdiv#text/#text/div' é diferente de " + result2799 + " <accum.toString()>")
chamada antiga: assertEquals("<div></div><div><#text></#text></div>", accum.toString())
nova chamada: assertEquals("<div></div><div><#text></#text></div>", accum.toString(), "Era esperado valores iguais, mas  'div/divdiv#text/#text/div' é diferente de " + result2800 + " <accum.toString()>")
chamada antiga: assertEquals("<div></div>\n<div>\n There be\n</div>", doc.select("body").html())
nova chamada: assertEquals("<div></div>\n<div>\n There be\n</div>", doc.select("body").html(), "Era esperado valores iguais, mas  'div/div\ndiv\n There be\n/div' é diferente de " + result2801 + " <doc.select('body').html()>")
chamada antiga: assertEquals("<div><p><#text></#text></p>", accum.toString())
nova chamada: assertEquals("<div><p><#text></#text></p>", accum.toString(), "Era esperado valores iguais, mas  'divp#text/#text/p' é diferente de " + result2802 + " <accum.toString()>")
chamada antiga: assertNotNull(p)
nova chamada: assertNotNull(p, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("<p>One <u>two</u> <u>three</u> four.</p>", p.outerHtml())
nova chamada: assertEquals("<p>One <u>two</u> <u>three</u> four.</p>", p.outerHtml(), "Era esperado valores iguais, mas  'pOne utwo/u uthree/u four./p' é diferente de " + result2803 + " <p.outerHtml()>")
chamada antiga: assertEquals("<div>\n" + " <p><span>0</span><span>1</span></p>\n" + " <p><span>2</span><span>3</span></p>\n" + "</div>", doc.body().html())
nova chamada: assertEquals("<div>\n" + " <p><span>0</span><span>1</span></p>\n" + " <p><span>2</span><span>3</span></p>\n" + "</div>", doc.body().html(), "Era esperado valores iguais, mas  'div\n' + ' pspan0/spanspan1/span/p\n' + ' pspan2/spanspan3/span/p\n' + '/div' é diferente de " + result2804 + " <doc.body().html()>")
chamada antiga: assertEquals(7, count[0])
nova chamada: assertEquals(7, count[0], "Era esperado valores iguais, mas  7 é diferente de " + " count[0]")
chamada antiga: assertEquals("<div><p id=\"2\">Two</p><p></p></div>", TextUtil.stripNewlines(doc.body().html()))
nova chamada: assertEquals("<div><p id=\"2\">Two</p><p></p></div>", TextUtil.stripNewlines(doc.body().html()), "Era esperado valores iguais, mas  'divp id=\'2\'Two/pp/p/div' é diferente de " + result2805 + " <TextUtil.stripNewlines(doc.body().html())>")
Total asserts: 3255
Asserts sem descrição: 3209
Asserts com descrição: 46
Assertion Roulette: 2850

Após do refactor: 
Total asserts: 3255
Asserts sem descrição: 226
Asserts com descrição: 3029
Assertion Roulette: 207
