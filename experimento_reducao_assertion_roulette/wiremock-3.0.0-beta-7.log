
Projeto: /home/vitor-otto/opensource/wiremock-3.0.0-beta-7

Antes do refactor: 
chamada antiga: assertFalse(mappings.get(0).getRequest().getHeaders().containsKey("No"))
nova chamada: assertFalse(mappings.get(0).getRequest().getHeaders().containsKey("No"), "Era esperado falso, mas " + result0 + " <mappings.get(0).getRequest().getHeaders().containsKey('No')> é verdadeiro ")
chamada antiga: assertTrue(match.isExactMatch())
nova chamada: assertTrue(match.isExactMatch(), "Era esperado verdadeiro, mas " + result1 + " <match.isExactMatch()> é falso")
chamada antiga: assertTrue(match.isExactMatch())
nova chamada: assertTrue(match.isExactMatch(), "Era esperado verdadeiro, mas " + result2 + " <match.isExactMatch()> é falso")
chamada antiga: assertTrue(result)
nova chamada: assertTrue(result, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertFalse(result)
nova chamada: assertFalse(result, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: assertTrue(result)
nova chamada: assertTrue(result, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(pattern.isMatchAny())
nova chamada: assertTrue(pattern.isMatchAny(), "Era esperado verdadeiro, mas " + result3 + " <pattern.isMatchAny()> é falso")
chamada antiga: assertFalse(pattern.isMatchAll())
nova chamada: assertFalse(pattern.isMatchAll(), "Era esperado falso, mas " + result4 + " <pattern.isMatchAll()> é verdadeiro ")
chamada antiga: assertTrue(pattern.isMatchAny())
nova chamada: assertTrue(pattern.isMatchAny(), "Era esperado verdadeiro, mas " + result5 + " <pattern.isMatchAny()> é falso")
chamada antiga: assertFalse(pattern.isMatchAll())
nova chamada: assertFalse(pattern.isMatchAll(), "Era esperado falso, mas " + result6 + " <pattern.isMatchAll()> é verdadeiro ")
chamada antiga: assertTrue(pattern.isMatchAll())
nova chamada: assertTrue(pattern.isMatchAll(), "Era esperado verdadeiro, mas " + result7 + " <pattern.isMatchAll()> é falso")
chamada antiga: assertFalse(pattern.isMatchAny())
nova chamada: assertFalse(pattern.isMatchAny(), "Era esperado falso, mas " + result8 + " <pattern.isMatchAny()> é verdadeiro ")
chamada antiga: assertNull(pattern)
nova chamada: assertNull(pattern, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertTrue(matcher.match("2022-06-14T12:13:14Z").isExactMatch())
nova chamada: assertTrue(matcher.match("2022-06-14T12:13:14Z").isExactMatch(), "Era esperado verdadeiro, mas " + result9 + " <matcher.match('2022-06-14T12:13:14Z').isExactMatch()> é falso")
chamada antiga: assertFalse(matcher.match("2020-06-14T12:13:14Z").isExactMatch())
nova chamada: assertFalse(matcher.match("2020-06-14T12:13:14Z").isExactMatch(), "Era esperado falso, mas " + result10 + " <matcher.match('2020-06-14T12:13:14Z').isExactMatch()> é verdadeiro ")
chamada antiga: assertTrue(matcher.match("2022-06-14T12:13:14").isExactMatch())
nova chamada: assertTrue(matcher.match("2022-06-14T12:13:14").isExactMatch(), "Era esperado verdadeiro, mas " + result11 + " <matcher.match('2022-06-14T12:13:14').isExactMatch()> é falso")
chamada antiga: assertFalse(matcher.match("2020-06-14T12:13:14").isExactMatch())
nova chamada: assertFalse(matcher.match("2020-06-14T12:13:14").isExactMatch(), "Era esperado falso, mas " + result12 + " <matcher.match('2020-06-14T12:13:14').isExactMatch()> é verdadeiro ")
chamada antiga: assertTrue(matcher.match("2022-06-14T12:13:14Z").isExactMatch())
nova chamada: assertTrue(matcher.match("2022-06-14T12:13:14Z").isExactMatch(), "Era esperado verdadeiro, mas " + result13 + " <matcher.match('2022-06-14T12:13:14Z').isExactMatch()> é falso")
chamada antiga: assertFalse(matcher.match("2020-06-14T12:13:14Z").isExactMatch())
nova chamada: assertFalse(matcher.match("2020-06-14T12:13:14Z").isExactMatch(), "Era esperado falso, mas " + result14 + " <matcher.match('2020-06-14T12:13:14Z').isExactMatch()> é verdadeiro ")
chamada antiga: assertTrue(matcher.match("2021-07-01T23:59:59").isExactMatch())
nova chamada: assertTrue(matcher.match("2021-07-01T23:59:59").isExactMatch(), "Era esperado verdadeiro, mas " + result15 + " <matcher.match('2021-07-01T23:59:59').isExactMatch()> é falso")
chamada antiga: assertFalse(matcher.match("2021-06-01T15:15:15").isExactMatch())
nova chamada: assertFalse(matcher.match("2021-06-01T15:15:15").isExactMatch(), "Era esperado falso, mas " + result16 + " <matcher.match('2021-06-01T15:15:15').isExactMatch()> é verdadeiro ")
chamada antiga: assertTrue(matcher.match(good.toString()).isExactMatch())
nova chamada: assertTrue(matcher.match(good.toString()).isExactMatch(), "Era esperado verdadeiro, mas " + result17 + " <matcher.match(good.toString()).isExactMatch()> é falso")
chamada antiga: assertFalse(matcher.match(bad.toString()).isExactMatch())
nova chamada: assertFalse(matcher.match(bad.toString()).isExactMatch(), "Era esperado falso, mas " + result18 + " <matcher.match(bad.toString()).isExactMatch()> é verdadeiro ")
chamada antiga: assertTrue(matcher.match(good.toString()).isExactMatch())
nova chamada: assertTrue(matcher.match(good.toString()).isExactMatch(), "Era esperado verdadeiro, mas " + result19 + " <matcher.match(good.toString()).isExactMatch()> é falso")
chamada antiga: assertFalse(matcher.match(bad.toString()).isExactMatch())
nova chamada: assertFalse(matcher.match(bad.toString()).isExactMatch(), "Era esperado falso, mas " + result20 + " <matcher.match(bad.toString()).isExactMatch()> é verdadeiro ")
chamada antiga: assertFalse(matcher.match(null).isExactMatch())
nova chamada: assertFalse(matcher.match(null).isExactMatch(), "Era esperado falso, mas " + result21 + " <matcher.match(null).isExactMatch()> é verdadeiro ")
chamada antiga: assertTrue(matcher.match(good.toString()).isExactMatch())
nova chamada: assertTrue(matcher.match(good.toString()).isExactMatch(), "Era esperado verdadeiro, mas " + result22 + " <matcher.match(good.toString()).isExactMatch()> é falso")
chamada antiga: assertFalse(matcher.match(bad.toString()).isExactMatch())
nova chamada: assertFalse(matcher.match(bad.toString()).isExactMatch(), "Era esperado falso, mas " + result23 + " <matcher.match(bad.toString()).isExactMatch()> é verdadeiro ")
chamada antiga: assertTrue(matcher.match("2021-01-01T00:00:00Z").isExactMatch())
nova chamada: assertTrue(matcher.match("2021-01-01T00:00:00Z").isExactMatch(), "Era esperado verdadeiro, mas " + result24 + " <matcher.match('2021-01-01T00:00:00Z').isExactMatch()> é falso")
chamada antiga: assertTrue(matcher.match("2021-01-01T00:00:00").isExactMatch())
nova chamada: assertTrue(matcher.match("2021-01-01T00:00:00").isExactMatch(), "Era esperado verdadeiro, mas " + result25 + " <matcher.match('2021-01-01T00:00:00').isExactMatch()> é falso")
chamada antiga: assertTrue(matcher.match("2022-06-01T11:22:33Z").isExactMatch())
nova chamada: assertTrue(matcher.match("2022-06-01T11:22:33Z").isExactMatch(), "Era esperado verdadeiro, mas " + result26 + " <matcher.match('2022-06-01T11:22:33Z').isExactMatch()> é falso")
chamada antiga: assertTrue(matcher.match("2019-06-01T11:22:33Z").isExactMatch())
nova chamada: assertTrue(matcher.match("2019-06-01T11:22:33Z").isExactMatch(), "Era esperado verdadeiro, mas " + result27 + " <matcher.match('2019-06-01T11:22:33Z').isExactMatch()> é falso")
chamada antiga: assertFalse(matcher.match("2020-06-01T11:22:33Z").isExactMatch())
nova chamada: assertFalse(matcher.match("2020-06-01T11:22:33Z").isExactMatch(), "Era esperado falso, mas " + result28 + " <matcher.match('2020-06-01T11:22:33Z').isExactMatch()> é verdadeiro ")
chamada antiga: assertFalse(matchResult.isExactMatch())
nova chamada: assertFalse(matchResult.isExactMatch(), "Era esperado falso, mas " + result29 + " <matchResult.isExactMatch()> é verdadeiro ")
chamada antiga: assertTrue(matchResult.isExactMatch())
nova chamada: assertTrue(matchResult.isExactMatch(), "Era esperado verdadeiro, mas " + result30 + " <matchResult.isExactMatch()> é falso")
chamada antiga: assertFalse(matchResult.isExactMatch())
nova chamada: assertFalse(matchResult.isExactMatch(), "Era esperado falso, mas " + result31 + " <matchResult.isExactMatch()> é verdadeiro ")
chamada antiga: assertTrue(matchResult.isExactMatch())
nova chamada: assertTrue(matchResult.isExactMatch(), "Era esperado verdadeiro, mas " + result32 + " <matchResult.isExactMatch()> é falso")
chamada antiga: assertFalse(matchResult.isExactMatch())
nova chamada: assertFalse(matchResult.isExactMatch(), "Era esperado falso, mas " + result33 + " <matchResult.isExactMatch()> é verdadeiro ")
chamada antiga: assertTrue(matchResult.isExactMatch())
nova chamada: assertTrue(matchResult.isExactMatch(), "Era esperado verdadeiro, mas " + result34 + " <matchResult.isExactMatch()> é falso")
chamada antiga: assertFalse(matchResult.isExactMatch())
nova chamada: assertFalse(matchResult.isExactMatch(), "Era esperado falso, mas " + result35 + " <matchResult.isExactMatch()> é verdadeiro ")
chamada antiga: assertTrue(matchResult.isExactMatch())
nova chamada: assertTrue(matchResult.isExactMatch(), "Era esperado verdadeiro, mas " + result36 + " <matchResult.isExactMatch()> é falso")
chamada antiga: assertFalse(matchResult.isExactMatch())
nova chamada: assertFalse(matchResult.isExactMatch(), "Era esperado falso, mas " + result37 + " <matchResult.isExactMatch()> é verdadeiro ")
chamada antiga: assertTrue(matchResult.isExactMatch())
nova chamada: assertTrue(matchResult.isExactMatch(), "Era esperado verdadeiro, mas " + result38 + " <matchResult.isExactMatch()> é falso")
chamada antiga: assertFalse(matchResult.isExactMatch())
nova chamada: assertFalse(matchResult.isExactMatch(), "Era esperado falso, mas " + result39 + " <matchResult.isExactMatch()> é verdadeiro ")
chamada antiga: assertTrue(matchResult.isExactMatch())
nova chamada: assertTrue(matchResult.isExactMatch(), "Era esperado verdadeiro, mas " + result40 + " <matchResult.isExactMatch()> é falso")
chamada antiga: assertFalse(matchResult.isExactMatch())
nova chamada: assertFalse(matchResult.isExactMatch(), "Era esperado falso, mas " + result41 + " <matchResult.isExactMatch()> é verdadeiro ")
chamada antiga: assertFalse(matchResult.isExactMatch())
nova chamada: assertFalse(matchResult.isExactMatch(), "Era esperado falso, mas " + result42 + " <matchResult.isExactMatch()> é verdadeiro ")
chamada antiga: assertTrue(matchResult.isExactMatch())
nova chamada: assertTrue(matchResult.isExactMatch(), "Era esperado verdadeiro, mas " + result43 + " <matchResult.isExactMatch()> é falso")
chamada antiga: assertTrue(matchResult.isExactMatch())
nova chamada: assertTrue(matchResult.isExactMatch(), "Era esperado verdadeiro, mas " + result44 + " <matchResult.isExactMatch()> é falso")
chamada antiga: assertFalse(matchResult.isExactMatch())
nova chamada: assertFalse(matchResult.isExactMatch(), "Era esperado falso, mas " + result45 + " <matchResult.isExactMatch()> é verdadeiro ")
chamada antiga: assertFalse(matchResult.isExactMatch())
nova chamada: assertFalse(matchResult.isExactMatch(), "Era esperado falso, mas " + result46 + " <matchResult.isExactMatch()> é verdadeiro ")
chamada antiga: assertFalse(matchResult.isExactMatch())
nova chamada: assertFalse(matchResult.isExactMatch(), "Era esperado falso, mas " + result47 + " <matchResult.isExactMatch()> é verdadeiro ")
chamada antiga: assertTrue(WireMock.notContaining("thing").match("otherstuff").isExactMatch())
nova chamada: assertTrue(WireMock.notContaining("thing").match("otherstuff").isExactMatch(), "Era esperado verdadeiro, mas " + result48 + " <WireMock.notContaining('thing').match('otherstuff').isExactMatch()> é falso")
chamada antiga: assertTrue(WireMock.notContaining("thing").match(null).isExactMatch())
nova chamada: assertTrue(WireMock.notContaining("thing").match(null).isExactMatch(), "Era esperado verdadeiro, mas " + result49 + " <WireMock.notContaining('thing').match(null).isExactMatch()> é falso")
chamada antiga: assertFalse(matchResult.isExactMatch())
nova chamada: assertFalse(matchResult.isExactMatch(), "Era esperado falso, mas " + result50 + " <matchResult.isExactMatch()> é verdadeiro ")
chamada antiga: assertTrue(WireMock.containing("thing").match("mythings").isExactMatch())
nova chamada: assertTrue(WireMock.containing("thing").match("mythings").isExactMatch(), "Era esperado verdadeiro, mas " + result51 + " <WireMock.containing('thing').match('mythings').isExactMatch()> é falso")
chamada antiga: assertFalse(matchResult.isExactMatch())
nova chamada: assertFalse(matchResult.isExactMatch(), "Era esperado falso, mas " + result52 + " <matchResult.isExactMatch()> é verdadeiro ")
chamada antiga: assertFalse(matchResult.isExactMatch())
nova chamada: assertFalse(matchResult.isExactMatch(), "Era esperado falso, mas " + result53 + " <matchResult.isExactMatch()> é verdadeiro ")
chamada antiga: assertFalse(matchResult.isExactMatch())
nova chamada: assertFalse(matchResult.isExactMatch(), "Era esperado falso, mas " + result54 + " <matchResult.isExactMatch()> é verdadeiro ")
chamada antiga: assertFalse(matchResult.isExactMatch())
nova chamada: assertFalse(matchResult.isExactMatch(), "Era esperado falso, mas " + result55 + " <matchResult.isExactMatch()> é verdadeiro ")
chamada antiga: assertTrue(pattern.match("<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n" + "<things>\n" + "    <thing characteristic=\"tepid\"/>\n" + "    <thing characteristic=\"tedious\"/>\n" + "</things>").isExactMatch())
nova chamada: assertTrue(pattern.match("<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n" + "<things>\n" + "    <thing characteristic=\"tepid\"/>\n" + "    <thing characteristic=\"tedious\"/>\n" + "</things>").isExactMatch(), "Era esperado verdadeiro, mas " + result56 + " <pattern.match('<?xml version=\'1.0\' encoding=\'utf-8\' ?>\n' + '<things>\n' + '    <thing characteristic=\'tepid\'/>\n' + '    <thing characteristic=\'tedious\'/>\n' + '</things>').isExactMatch()> é falso")
chamada antiga: assertTrue(pattern.match("<things><thing characteristic=\"tepid\"/><thing characteristic=\"tedious\"/></things>").isExactMatch())
nova chamada: assertTrue(pattern.match("<things><thing characteristic=\"tepid\"/><thing characteristic=\"tedious\"/></things>").isExactMatch(), "Era esperado verdadeiro, mas " + result57 + " <pattern.match('<things><thing characteristic=\'tepid\'/><thing characteristic=\'tedious\'/></things>').isExactMatch()> é falso")
chamada antiga: assertFalse(matchResult.isExactMatch())
nova chamada: assertFalse(matchResult.isExactMatch(), "Era esperado falso, mas " + result58 + " <matchResult.isExactMatch()> é verdadeiro ")
chamada antiga: assertTrue(match.isExactMatch())
nova chamada: assertTrue(match.isExactMatch(), "Era esperado verdadeiro, mas " + result59 + " <match.isExactMatch()> é falso")
chamada antiga: assertTrue(match.isExactMatch())
nova chamada: assertTrue(match.isExactMatch(), "Era esperado verdadeiro, mas " + result60 + " <match.isExactMatch()> é falso")
chamada antiga: assertFalse(pattern.match("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n" + "<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n" + "    <soap:Body>\n" + "        <stuff xmlns=\"https://example.com/the-wrong-namespace\">\n" + "            <things />\n" + "        </stuff>\n" + "    </soap:Body>\n" + "</soap:Envelope>\n").isExactMatch())
nova chamada: assertFalse(pattern.match("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n" + "<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n" + "    <soap:Body>\n" + "        <stuff xmlns=\"https://example.com/the-wrong-namespace\">\n" + "            <things />\n" + "        </stuff>\n" + "    </soap:Body>\n" + "</soap:Envelope>\n").isExactMatch(), "Era esperado falso, mas " + result61 + " <pattern.match('<?xml version=\'1.0\' encoding=\'utf-8\'?>\n' + '<soap:Envelope xmlns:xsi=\'http://www.w3.org/2001/XMLSchema-instance\' xmlns:xsd=\'http://www.w3.org/2001/XMLSchema\' xmlns:soap=\'http://schemas.xmlsoap.org/soap/envelope/\'>\n' + '    <soap:Body>\n' + '        <stuff xmlns=\'https://example.com/the-wrong-namespace\'>\n' + '            <things />\n' + '        </stuff>\n' + '    </soap:Body>\n' + '</soap:Envelope>\n').isExactMatch()> é verdadeiro ")
chamada antiga: assertTrue(pattern.match("<my-attribs two=\"2\" one=\"1\" three=\"3\"/>").isExactMatch())
nova chamada: assertTrue(pattern.match("<my-attribs two=\"2\" one=\"1\" three=\"3\"/>").isExactMatch(), "Era esperado verdadeiro, mas " + result62 + " <pattern.match('<my-attribs two=\'2\' one=\'1\' three=\'3\'/>').isExactMatch()> é falso")
chamada antiga: assertTrue(pattern.match("<my-elements>\n" + "    <two />\n" + "    <three />\n" + "    <one />\n" + "</my-elements>").isExactMatch())
nova chamada: assertTrue(pattern.match("<my-elements>\n" + "    <two />\n" + "    <three />\n" + "    <one />\n" + "</my-elements>").isExactMatch(), "Era esperado verdadeiro, mas " + result63 + " <pattern.match('<my-elements>\n' + '    <two />\n' + '    <three />\n' + '    <one />\n' + '</my-elements>').isExactMatch()> é falso")
chamada antiga: assertTrue(pattern.match(xmlWithDtdThatCannotBeFetched).isExactMatch())
nova chamada: assertTrue(pattern.match(xmlWithDtdThatCannotBeFetched).isExactMatch(), "Era esperado verdadeiro, mas " + result64 + " <pattern.match(xmlWithDtdThatCannotBeFetched).isExactMatch()> é falso")
chamada antiga: assertNull(equalToXmlPattern.getPlaceholderOpeningDelimiterRegex())
nova chamada: assertNull(equalToXmlPattern.getPlaceholderOpeningDelimiterRegex(), "Era esperado nulo, mas " + result65 + " <equalToXmlPattern.getPlaceholderOpeningDelimiterRegex()> não é nulo")
chamada antiga: assertNull(equalToXmlPattern.getPlaceholderClosingDelimiterRegex())
nova chamada: assertNull(equalToXmlPattern.getPlaceholderClosingDelimiterRegex(), "Era esperado nulo, mas " + result66 + " <equalToXmlPattern.getPlaceholderClosingDelimiterRegex()> não é nulo")
chamada antiga: assertTrue(matchResult.isExactMatch())
nova chamada: assertTrue(matchResult.isExactMatch(), "Era esperado verdadeiro, mas " + result67 + " <matchResult.isExactMatch()> é falso")
chamada antiga: assertTrue(matchResult.isExactMatch())
nova chamada: assertTrue(matchResult.isExactMatch(), "Era esperado verdadeiro, mas " + result68 + " <matchResult.isExactMatch()> é falso")
chamada antiga: assertTrue(stringValuePattern instanceof EqualToXmlPattern)
nova chamada: assertTrue(stringValuePattern instanceof EqualToXmlPattern, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(stringValuePattern instanceof EqualToXmlPattern)
nova chamada: assertTrue(stringValuePattern instanceof EqualToXmlPattern, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(enablePlaceholders, equalToXmlPattern.isEnablePlaceholders())
nova chamada: assertEquals(enablePlaceholders, equalToXmlPattern.isEnablePlaceholders(), "Era esperado valores iguais, mas  enablePlaceholders é diferente de " + result69 + " <equalToXmlPattern.isEnablePlaceholders()>")
chamada antiga: assertEquals(placeholderOpeningDelimiterRegex, equalToXmlPattern.getPlaceholderOpeningDelimiterRegex())
nova chamada: assertEquals(placeholderOpeningDelimiterRegex, equalToXmlPattern.getPlaceholderOpeningDelimiterRegex(), "Era esperado valores iguais, mas  placeholderOpeningDelimiterRegex é diferente de " + result70 + " <equalToXmlPattern.getPlaceholderOpeningDelimiterRegex()>")
chamada antiga: assertEquals(placeholderClosingDelimiterRegex, equalToXmlPattern.getPlaceholderClosingDelimiterRegex())
nova chamada: assertEquals(placeholderClosingDelimiterRegex, equalToXmlPattern.getPlaceholderClosingDelimiterRegex(), "Era esperado valores iguais, mas  placeholderClosingDelimiterRegex é diferente de " + result71 + " <equalToXmlPattern.getPlaceholderClosingDelimiterRegex()>")
chamada antiga: assertTrue(matchResult.isExactMatch())
nova chamada: assertTrue(matchResult.isExactMatch(), "Era esperado verdadeiro, mas " + result72 + " <matchResult.isExactMatch()> é falso")
chamada antiga: assertTrue(pattern.match(actual).isExactMatch())
nova chamada: assertTrue(pattern.match(actual).isExactMatch(), "Era esperado verdadeiro, mas " + result73 + " <pattern.match(actual).isExactMatch()> é falso")
chamada antiga: assertTrue(pattern.isMatchAny())
nova chamada: assertTrue(pattern.isMatchAny(), "Era esperado verdadeiro, mas " + result74 + " <pattern.isMatchAny()> é falso")
chamada antiga: assertFalse(pattern.isMatchAll())
nova chamada: assertFalse(pattern.isMatchAll(), "Era esperado falso, mas " + result75 + " <pattern.isMatchAll()> é verdadeiro ")
chamada antiga: assertNull(pattern.getBodyPatterns())
nova chamada: assertNull(pattern.getBodyPatterns(), "Era esperado nulo, mas " + result76 + " <pattern.getBodyPatterns()> não é nulo")
chamada antiga: assertTrue(pattern.isMatchAll())
nova chamada: assertTrue(pattern.isMatchAll(), "Era esperado verdadeiro, mas " + result77 + " <pattern.isMatchAll()> é falso")
chamada antiga: assertFalse(pattern.isMatchAny())
nova chamada: assertFalse(pattern.isMatchAny(), "Era esperado falso, mas " + result78 + " <pattern.isMatchAny()> é verdadeiro ")
chamada antiga: assertNull(pattern.getHeaders())
nova chamada: assertNull(pattern.getHeaders(), "Era esperado nulo, mas " + result79 + " <pattern.getHeaders()> não é nulo")
chamada antiga: assertTrue(pattern.isMatchAny())
nova chamada: assertTrue(pattern.isMatchAny(), "Era esperado verdadeiro, mas " + result80 + " <pattern.isMatchAny()> é falso")
chamada antiga: assertFalse(pattern.isMatchAll())
nova chamada: assertFalse(pattern.isMatchAll(), "Era esperado falso, mas " + result81 + " <pattern.isMatchAll()> é verdadeiro ")
chamada antiga: assertTrue(pattern.isMatchAny())
nova chamada: assertTrue(pattern.isMatchAny(), "Era esperado verdadeiro, mas " + result82 + " <pattern.isMatchAny()> é falso")
chamada antiga: assertFalse(pattern.isMatchAll())
nova chamada: assertFalse(pattern.isMatchAll(), "Era esperado falso, mas " + result83 + " <pattern.isMatchAll()> é verdadeiro ")
chamada antiga: assertEquals(pattern.getBodyPatterns().get(0).getExpected(), expectedBinary)
nova chamada: assertEquals(pattern.getBodyPatterns().get(0).getExpected(), expectedBinary, "Era esperado valores iguais, mas " + result84 + " <pattern.getBodyPatterns().get(0).getExpected()> é diferente de " + " expectedBinary")
chamada antiga: assertTrue(pattern.isMatchAll())
nova chamada: assertTrue(pattern.isMatchAll(), "Era esperado verdadeiro, mas " + result85 + " <pattern.isMatchAll()> é falso")
chamada antiga: assertFalse(pattern.isMatchAny())
nova chamada: assertFalse(pattern.isMatchAny(), "Era esperado falso, mas " + result86 + " <pattern.isMatchAny()> é verdadeiro ")
chamada antiga: assertTrue(matcher.match("2021-06-14T12:13:14Z").isExactMatch())
nova chamada: assertTrue(matcher.match("2021-06-14T12:13:14Z").isExactMatch(), "Era esperado verdadeiro, mas " + result87 + " <matcher.match('2021-06-14T12:13:14Z').isExactMatch()> é falso")
chamada antiga: assertFalse(matcher.match("1921-06-14T12:13:14Z").isExactMatch())
nova chamada: assertFalse(matcher.match("1921-06-14T12:13:14Z").isExactMatch(), "Era esperado falso, mas " + result88 + " <matcher.match('1921-06-14T12:13:14Z').isExactMatch()> é verdadeiro ")
chamada antiga: assertTrue(matcher.match("2021-06-24T12:40:27Z").isExactMatch())
nova chamada: assertTrue(matcher.match("2021-06-24T12:40:27Z").isExactMatch(), "Era esperado verdadeiro, mas " + result89 + " <matcher.match('2021-06-24T12:40:27Z').isExactMatch()> é falso")
chamada antiga: assertFalse(matcher.match("2021-06-24T13:40:27Z").isExactMatch())
nova chamada: assertFalse(matcher.match("2021-06-24T13:40:27Z").isExactMatch(), "Era esperado falso, mas " + result90 + " <matcher.match('2021-06-24T13:40:27Z').isExactMatch()> é verdadeiro ")
chamada antiga: assertTrue(matcher.match("2021-06-14T12:13:14").isExactMatch())
nova chamada: assertTrue(matcher.match("2021-06-14T12:13:14").isExactMatch(), "Era esperado verdadeiro, mas " + result91 + " <matcher.match('2021-06-14T12:13:14').isExactMatch()> é falso")
chamada antiga: assertFalse(matcher.match("1921-06-14T12:13:14").isExactMatch())
nova chamada: assertFalse(matcher.match("1921-06-14T12:13:14").isExactMatch(), "Era esperado falso, mas " + result92 + " <matcher.match('1921-06-14T12:13:14').isExactMatch()> é verdadeiro ")
chamada antiga: assertTrue(matcher.match("2021-06-14T12:13:14Z").isExactMatch())
nova chamada: assertTrue(matcher.match("2021-06-14T12:13:14Z").isExactMatch(), "Era esperado verdadeiro, mas " + result93 + " <matcher.match('2021-06-14T12:13:14Z').isExactMatch()> é falso")
chamada antiga: assertFalse(matcher.match("1921-06-14T12:13:14Z").isExactMatch())
nova chamada: assertFalse(matcher.match("1921-06-14T12:13:14Z").isExactMatch(), "Era esperado falso, mas " + result94 + " <matcher.match('1921-06-14T12:13:14Z').isExactMatch()> é verdadeiro ")
chamada antiga: assertTrue(matcher.match(good).isExactMatch())
nova chamada: assertTrue(matcher.match(good).isExactMatch(), "Era esperado verdadeiro, mas " + result95 + " <matcher.match(good).isExactMatch()> é falso")
chamada antiga: assertFalse(matcher.match(bad).isExactMatch())
nova chamada: assertFalse(matcher.match(bad).isExactMatch(), "Era esperado falso, mas " + result96 + " <matcher.match(bad).isExactMatch()> é verdadeiro ")
chamada antiga: assertTrue(matcher.match(good).isExactMatch())
nova chamada: assertTrue(matcher.match(good).isExactMatch(), "Era esperado verdadeiro, mas " + result97 + " <matcher.match(good).isExactMatch()> é falso")
chamada antiga: assertFalse(matcher.match(bad).isExactMatch())
nova chamada: assertFalse(matcher.match(bad).isExactMatch(), "Era esperado falso, mas " + result98 + " <matcher.match(bad).isExactMatch()> é verdadeiro ")
chamada antiga: assertTrue(matcher.match(good).isExactMatch())
nova chamada: assertTrue(matcher.match(good).isExactMatch(), "Era esperado verdadeiro, mas " + result99 + " <matcher.match(good).isExactMatch()> é falso")
chamada antiga: assertFalse(matcher.match(bad).isExactMatch())
nova chamada: assertFalse(matcher.match(bad).isExactMatch(), "Era esperado falso, mas " + result100 + " <matcher.match(bad).isExactMatch()> é verdadeiro ")
chamada antiga: assertFalse(matcher.match(null).isExactMatch())
nova chamada: assertFalse(matcher.match(null).isExactMatch(), "Era esperado falso, mas " + result101 + " <matcher.match(null).isExactMatch()> é verdadeiro ")
chamada antiga: assertTrue(matcher.match(good.toString()).isExactMatch())
nova chamada: assertTrue(matcher.match(good.toString()).isExactMatch(), "Era esperado verdadeiro, mas " + result102 + " <matcher.match(good.toString()).isExactMatch()> é falso")
chamada antiga: assertFalse(matcher.match(bad.toString()).isExactMatch())
nova chamada: assertFalse(matcher.match(bad.toString()).isExactMatch(), "Era esperado falso, mas " + result103 + " <matcher.match(bad.toString()).isExactMatch()> é verdadeiro ")
chamada antiga: assertTrue(matcher.match("2020-08-29T00:00:00Z").isExactMatch())
nova chamada: assertTrue(matcher.match("2020-08-29T00:00:00Z").isExactMatch(), "Era esperado verdadeiro, mas " + result104 + " <matcher.match('2020-08-29T00:00:00Z').isExactMatch()> é falso")
chamada antiga: assertTrue(matcher.match("2020-08-29T00:00:00").isExactMatch())
nova chamada: assertTrue(matcher.match("2020-08-29T00:00:00").isExactMatch(), "Era esperado verdadeiro, mas " + result105 + " <matcher.match('2020-08-29T00:00:00').isExactMatch()> é falso")
chamada antiga: assertTrue(MultiValuePattern.absent().match(HttpHeader.absent("any-key")).isExactMatch())
nova chamada: assertTrue(MultiValuePattern.absent().match(HttpHeader.absent("any-key")).isExactMatch(), "Era esperado verdadeiro, mas " + result106 + " <MultiValuePattern.absent().match(HttpHeader.absent('any-key')).isExactMatch()> é falso")
chamada antiga: assertFalse(MultiValuePattern.absent().match(httpHeader("the-key", "the value")).isExactMatch())
nova chamada: assertFalse(MultiValuePattern.absent().match(httpHeader("the-key", "the value")).isExactMatch(), "Era esperado falso, mas " + result107 + " <MultiValuePattern.absent().match(httpHeader('the-key', 'the value')).isExactMatch()> é verdadeiro ")
chamada antiga: assertFalse(MultiValuePattern.of(beforeNow()).match(HttpHeader.absent("any-key")).isExactMatch())
nova chamada: assertFalse(MultiValuePattern.of(beforeNow()).match(HttpHeader.absent("any-key")).isExactMatch(), "Era esperado falso, mas " + result108 + " <MultiValuePattern.of(beforeNow()).match(HttpHeader.absent('any-key')).isExactMatch()> é verdadeiro ")
chamada antiga: assertTrue(MultiValuePattern.of(equalTo("required-value")).match(httpHeader("the-key", "required-value")).isExactMatch())
nova chamada: assertTrue(MultiValuePattern.of(equalTo("required-value")).match(httpHeader("the-key", "required-value")).isExactMatch(), "Era esperado verdadeiro, mas " + result109 + " <MultiValuePattern.of(equalTo('required-value')).match(httpHeader('the-key', 'required-value')).isExactMatch()> é falso")
chamada antiga: assertFalse(matchResult.isExactMatch())
nova chamada: assertFalse(matchResult.isExactMatch(), "Era esperado falso, mas " + result110 + " <matchResult.isExactMatch()> é verdadeiro ")
chamada antiga: assertTrue(MultiValuePattern.of(equalTo("required-value")).match(httpHeader("any-key", "require1234567", "required-value", "1234567rrrr")).isExactMatch())
nova chamada: assertTrue(MultiValuePattern.of(equalTo("required-value")).match(httpHeader("any-key", "require1234567", "required-value", "1234567rrrr")).isExactMatch(), "Era esperado verdadeiro, mas " + result111 + " <MultiValuePattern.of(equalTo('required-value')).match(httpHeader('any-key', 'require1234567', 'required-value', '1234567rrrr')).isExactMatch()> é falso")
chamada antiga: assertTrue(MultiValuePattern.of(equalTo("required-value")).match(queryParam("any-key", "require1234567", "required-value", "1234567rrrr")).isExactMatch())
nova chamada: assertTrue(MultiValuePattern.of(equalTo("required-value")).match(queryParam("any-key", "require1234567", "required-value", "1234567rrrr")).isExactMatch(), "Era esperado verdadeiro, mas " + result112 + " <MultiValuePattern.of(equalTo('required-value')).match(queryParam('any-key', 'require1234567', 'required-value', '1234567rrrr')).isExactMatch()> é falso")
chamada antiga: assertTrue(matcher.match("2020-06-01T11:22:33Z").isExactMatch())
nova chamada: assertTrue(matcher.match("2020-06-01T11:22:33Z").isExactMatch(), "Era esperado verdadeiro, mas " + result113 + " <matcher.match('2020-06-01T11:22:33Z').isExactMatch()> é falso")
chamada antiga: assertFalse(matcher.match("2021-06-01T11:22:33Z").isExactMatch())
nova chamada: assertFalse(matcher.match("2021-06-01T11:22:33Z").isExactMatch(), "Era esperado falso, mas " + result114 + " <matcher.match('2021-06-01T11:22:33Z').isExactMatch()> é verdadeiro ")
chamada antiga: assertTrue(matcher.match("2021-06-01T15:15:15Z").isExactMatch())
nova chamada: assertTrue(matcher.match("2021-06-01T15:15:15Z").isExactMatch(), "Era esperado verdadeiro, mas " + result115 + " <matcher.match('2021-06-01T15:15:15Z').isExactMatch()> é falso")
chamada antiga: assertFalse(matcher.match("2021-07-01T23:59:59Z").isExactMatch())
nova chamada: assertFalse(matcher.match("2021-07-01T23:59:59Z").isExactMatch(), "Era esperado falso, mas " + result116 + " <matcher.match('2021-07-01T23:59:59Z').isExactMatch()> é verdadeiro ")
chamada antiga: assertTrue(matcher.match("2021-06-01T15:15:15").isExactMatch())
nova chamada: assertTrue(matcher.match("2021-06-01T15:15:15").isExactMatch(), "Era esperado verdadeiro, mas " + result117 + " <matcher.match('2021-06-01T15:15:15').isExactMatch()> é falso")
chamada antiga: assertFalse(matcher.match("2021-07-01T23:59:59").isExactMatch())
nova chamada: assertFalse(matcher.match("2021-07-01T23:59:59").isExactMatch(), "Era esperado falso, mas " + result118 + " <matcher.match('2021-07-01T23:59:59').isExactMatch()> é verdadeiro ")
chamada antiga: assertTrue(matcher.match("2021-06-01T15:15:15").isExactMatch())
nova chamada: assertTrue(matcher.match("2021-06-01T15:15:15").isExactMatch(), "Era esperado verdadeiro, mas " + result119 + " <matcher.match('2021-06-01T15:15:15').isExactMatch()> é falso")
chamada antiga: assertFalse(matcher.match("2021-07-01T23:59:59").isExactMatch())
nova chamada: assertFalse(matcher.match("2021-07-01T23:59:59").isExactMatch(), "Era esperado falso, mas " + result120 + " <matcher.match('2021-07-01T23:59:59').isExactMatch()> é verdadeiro ")
chamada antiga: assertTrue(matcher.match("2021-06-01T15:15:15Z").isExactMatch())
nova chamada: assertTrue(matcher.match("2021-06-01T15:15:15Z").isExactMatch(), "Era esperado verdadeiro, mas " + result121 + " <matcher.match('2021-06-01T15:15:15Z').isExactMatch()> é falso")
chamada antiga: assertFalse(matcher.match("2021-07-01T23:59:59Z").isExactMatch())
nova chamada: assertFalse(matcher.match("2021-07-01T23:59:59Z").isExactMatch(), "Era esperado falso, mas " + result122 + " <matcher.match('2021-07-01T23:59:59Z').isExactMatch()> é verdadeiro ")
chamada antiga: assertFalse(matcher.match("2021-06-01T15:15:blahsdfj123").isExactMatch())
nova chamada: assertFalse(matcher.match("2021-06-01T15:15:blahsdfj123").isExactMatch(), "Era esperado falso, mas " + result123 + " <matcher.match('2021-06-01T15:15:blahsdfj123').isExactMatch()> é verdadeiro ")
chamada antiga: assertFalse(matcher.match(null).isExactMatch())
nova chamada: assertFalse(matcher.match(null).isExactMatch(), "Era esperado falso, mas " + result124 + " <matcher.match(null).isExactMatch()> é verdadeiro ")
chamada antiga: assertFalse(matcher.match("2021-06-01T15:15:15Z").isExactMatch())
nova chamada: assertFalse(matcher.match("2021-06-01T15:15:15Z").isExactMatch(), "Era esperado falso, mas " + result125 + " <matcher.match('2021-06-01T15:15:15Z').isExactMatch()> é verdadeiro ")
chamada antiga: assertTrue(matcher.match("Tue, 01 Jun 2021 15:16:17 GMT").isExactMatch())
nova chamada: assertTrue(matcher.match("Tue, 01 Jun 2021 15:16:17 GMT").isExactMatch(), "Era esperado verdadeiro, mas " + result126 + " <matcher.match('Tue, 01 Jun 2021 15:16:17 GMT').isExactMatch()> é falso")
chamada antiga: assertFalse(matcher.match("Thu, 01 Jul 2021 15:16:17 GMT").isExactMatch())
nova chamada: assertFalse(matcher.match("Thu, 01 Jul 2021 15:16:17 GMT").isExactMatch(), "Era esperado falso, mas " + result127 + " <matcher.match('Thu, 01 Jul 2021 15:16:17 GMT').isExactMatch()> é verdadeiro ")
chamada antiga: assertTrue(matcher.match("Tuesday, 01-Jun-21 14:14:14 GMT").isExactMatch())
nova chamada: assertTrue(matcher.match("Tuesday, 01-Jun-21 14:14:14 GMT").isExactMatch(), "Era esperado verdadeiro, mas " + result128 + " <matcher.match('Tuesday, 01-Jun-21 14:14:14 GMT').isExactMatch()> é falso")
chamada antiga: assertFalse(matcher.match("Thursday, 01-Jul-21 15:16:17 GMT").isExactMatch())
nova chamada: assertFalse(matcher.match("Thursday, 01-Jul-21 15:16:17 GMT").isExactMatch(), "Era esperado falso, mas " + result129 + " <matcher.match('Thursday, 01-Jul-21 15:16:17 GMT').isExactMatch()> é verdadeiro ")
chamada antiga: assertTrue(matcher.match("Tue Jun  1 01:01:01 2021").isExactMatch())
nova chamada: assertTrue(matcher.match("Tue Jun  1 01:01:01 2021").isExactMatch(), "Era esperado verdadeiro, mas " + result130 + " <matcher.match('Tue Jun  1 01:01:01 2021').isExactMatch()> é falso")
chamada antiga: assertFalse(matcher.match("Thu Jul  1 01:01:01 2021").isExactMatch())
nova chamada: assertFalse(matcher.match("Thu Jul  1 01:01:01 2021").isExactMatch(), "Era esperado falso, mas " + result131 + " <matcher.match('Thu Jul  1 01:01:01 2021').isExactMatch()> é verdadeiro ")
chamada antiga: assertTrue(matcher.match("Thu Jun 10 01:01:01 2021").isExactMatch())
nova chamada: assertTrue(matcher.match("Thu Jun 10 01:01:01 2021").isExactMatch(), "Era esperado verdadeiro, mas " + result132 + " <matcher.match('Thu Jun 10 01:01:01 2021').isExactMatch()> é falso")
chamada antiga: assertFalse(matcher.match("Sat Jul 10 01:01:01 2021").isExactMatch())
nova chamada: assertFalse(matcher.match("Sat Jul 10 01:01:01 2021").isExactMatch(), "Era esperado falso, mas " + result133 + " <matcher.match('Sat Jul 10 01:01:01 2021').isExactMatch()> é verdadeiro ")
chamada antiga: assertTrue(matcher.match("2021-06-14T15:15:15+01:00[Europe/London]").isExactMatch())
nova chamada: assertTrue(matcher.match("2021-06-14T15:15:15+01:00[Europe/London]").isExactMatch(), "Era esperado verdadeiro, mas " + result134 + " <matcher.match('2021-06-14T15:15:15+01:00[Europe/London]').isExactMatch()> é falso")
chamada antiga: assertFalse(matcher.match("2021-06-14T16:15:15+01:00[Europe/London]").isExactMatch())
nova chamada: assertFalse(matcher.match("2021-06-14T16:15:15+01:00[Europe/London]").isExactMatch(), "Era esperado falso, mas " + result135 + " <matcher.match('2021-06-14T16:15:15+01:00[Europe/London]').isExactMatch()> é verdadeiro ")
chamada antiga: assertTrue(matcher.match("01/06/2021").isExactMatch())
nova chamada: assertTrue(matcher.match("01/06/2021").isExactMatch(), "Era esperado verdadeiro, mas " + result136 + " <matcher.match('01/06/2021').isExactMatch()> é falso")
chamada antiga: assertFalse(matcher.match("01/07/2021").isExactMatch())
nova chamada: assertFalse(matcher.match("01/07/2021").isExactMatch(), "Era esperado falso, mas " + result137 + " <matcher.match('01/07/2021').isExactMatch()> é verdadeiro ")
chamada antiga: assertTrue(matcher.match(right).isExactMatch())
nova chamada: assertTrue(matcher.match(right).isExactMatch(), "Era esperado verdadeiro, mas " + result138 + " <matcher.match(right).isExactMatch()> é falso")
chamada antiga: assertFalse(matcher.match(wrong).isExactMatch())
nova chamada: assertFalse(matcher.match(wrong).isExactMatch(), "Era esperado falso, mas " + result139 + " <matcher.match(wrong).isExactMatch()> é verdadeiro ")
chamada antiga: assertTrue(matcher.match(right).isExactMatch())
nova chamada: assertTrue(matcher.match(right).isExactMatch(), "Era esperado verdadeiro, mas " + result140 + " <matcher.match(right).isExactMatch()> é falso")
chamada antiga: assertFalse(matcher.match(wrong).isExactMatch())
nova chamada: assertFalse(matcher.match(wrong).isExactMatch(), "Era esperado falso, mas " + result141 + " <matcher.match(wrong).isExactMatch()> é verdadeiro ")
chamada antiga: assertTrue(matcher.match(good.toString()).isExactMatch())
nova chamada: assertTrue(matcher.match(good.toString()).isExactMatch(), "Era esperado verdadeiro, mas " + result142 + " <matcher.match(good.toString()).isExactMatch()> é falso")
chamada antiga: assertFalse(matcher.match(bad.toString()).isExactMatch())
nova chamada: assertFalse(matcher.match(bad.toString()).isExactMatch(), "Era esperado falso, mas " + result143 + " <matcher.match(bad.toString()).isExactMatch()> é verdadeiro ")
chamada antiga: assertTrue(matcher.match(good.toString()).isExactMatch())
nova chamada: assertTrue(matcher.match(good.toString()).isExactMatch(), "Era esperado verdadeiro, mas " + result144 + " <matcher.match(good.toString()).isExactMatch()> é falso")
chamada antiga: assertFalse(matcher.match(bad.toString()).isExactMatch())
nova chamada: assertFalse(matcher.match(bad.toString()).isExactMatch(), "Era esperado falso, mas " + result145 + " <matcher.match(bad.toString()).isExactMatch()> é verdadeiro ")
chamada antiga: assertTrue(matcher.match(good.toString()).isExactMatch())
nova chamada: assertTrue(matcher.match(good.toString()).isExactMatch(), "Era esperado verdadeiro, mas " + result146 + " <matcher.match(good.toString()).isExactMatch()> é falso")
chamada antiga: assertFalse(matcher.match(bad.toString()).isExactMatch())
nova chamada: assertFalse(matcher.match(bad.toString()).isExactMatch(), "Era esperado falso, mas " + result147 + " <matcher.match(bad.toString()).isExactMatch()> é verdadeiro ")
chamada antiga: assertTrue(matcher.match(good.toString()).isExactMatch())
nova chamada: assertTrue(matcher.match(good.toString()).isExactMatch(), "Era esperado verdadeiro, mas " + result148 + " <matcher.match(good.toString()).isExactMatch()> é falso")
chamada antiga: assertFalse(matcher.match(bad.toString()).isExactMatch())
nova chamada: assertFalse(matcher.match(bad.toString()).isExactMatch(), "Era esperado falso, mas " + result149 + " <matcher.match(bad.toString()).isExactMatch()> é verdadeiro ")
chamada antiga: assertTrue(matcher.match("2019-01-01T00:00:00Z").isExactMatch())
nova chamada: assertTrue(matcher.match("2019-01-01T00:00:00Z").isExactMatch(), "Era esperado verdadeiro, mas " + result150 + " <matcher.match('2019-01-01T00:00:00Z').isExactMatch()> é falso")
chamada antiga: assertTrue(matcher.match("2019-01-01T00:00:00").isExactMatch())
nova chamada: assertTrue(matcher.match("2019-01-01T00:00:00").isExactMatch(), "Era esperado verdadeiro, mas " + result151 + " <matcher.match('2019-01-01T00:00:00').isExactMatch()> é falso")
chamada antiga: assertTrue(WireMock.equalToJson("{                  \n" + "   \"one\":    1,  \n" + "   \"two\":    2,  \n" + "   \"three\":  3,  \n" + "   \"four\":   4   \n" + "}                  \n").match("{                  \n" + "   \"one\":    1,  \n" + "   \"three\":  3,  \n" + "   \"two\":    2,  \n" + "   \"four\":   4   \n" + "}                  \n").isExactMatch())
nova chamada: assertTrue(WireMock.equalToJson("{                  \n" + "   \"one\":    1,  \n" + "   \"two\":    2,  \n" + "   \"three\":  3,  \n" + "   \"four\":   4   \n" + "}                  \n").match("{                  \n" + "   \"one\":    1,  \n" + "   \"three\":  3,  \n" + "   \"two\":    2,  \n" + "   \"four\":   4   \n" + "}                  \n").isExactMatch(), "Era esperado verdadeiro, mas " + result152 + " <WireMock.equalToJson('{                  \n' + '   \'one\':    1,  \n' + '   \'two\':    2,  \n' + '   \'three\':  3,  \n' + '   \'four\':   4   \n' + '}                  \n').match('{                  \n' + '   \'one\':    1,  \n' + '   \'three\':  3,  \n' + '   \'two\':    2,  \n' + '   \'four\':   4   \n' + '}                  \n').isExactMatch()> é falso")
chamada antiga: assertFalse(WireMock.equalToJson("[1, 2, 3, 4]").match("[1, 3, 2, 4]").isExactMatch())
nova chamada: assertFalse(WireMock.equalToJson("[1, 2, 3, 4]").match("[1, 3, 2, 4]").isExactMatch(), "Era esperado falso, mas " + result153 + " <WireMock.equalToJson('[1, 2, 3, 4]').match('[1, 3, 2, 4]').isExactMatch()> é verdadeiro ")
chamada antiga: assertTrue(WireMock.equalToJson("[1, 2, 3, 4]", true, false).match("[1, 3, 2, 4]").isExactMatch())
nova chamada: assertTrue(WireMock.equalToJson("[1, 2, 3, 4]", true, false).match("[1, 3, 2, 4]").isExactMatch(), "Era esperado verdadeiro, mas " + result154 + " <WireMock.equalToJson('[1, 2, 3, 4]', true, false).match('[1, 3, 2, 4]').isExactMatch()> é falso")
chamada antiga: assertTrue(WireMock.equalToJson("{\n" + "    \"one\": 1,\n" + "    \"two\": [\n" + "        { \"val\": 1 },\n" + "        { \"val\": 2 },\n" + "        { \"val\": 3 }\n" + "    ]\n" + "}", true, false).match("{\n" + "    \"one\": 1,\n" + "    \"two\": [\n" + "        { \"val\": 3 },\n" + "        { \"val\": 2 },\n" + "        { \"val\": 1 }\n" + "    ]\n" + "}").isExactMatch())
nova chamada: assertTrue(WireMock.equalToJson("{\n" + "    \"one\": 1,\n" + "    \"two\": [\n" + "        { \"val\": 1 },\n" + "        { \"val\": 2 },\n" + "        { \"val\": 3 }\n" + "    ]\n" + "}", true, false).match("{\n" + "    \"one\": 1,\n" + "    \"two\": [\n" + "        { \"val\": 3 },\n" + "        { \"val\": 2 },\n" + "        { \"val\": 1 }\n" + "    ]\n" + "}").isExactMatch(), "Era esperado verdadeiro, mas " + result155 + " <WireMock.equalToJson('{\n' + '    \'one\': 1,\n' + '    \'two\': [\n' + '        { \'val\': 1 },\n' + '        { \'val\': 2 },\n' + '        { \'val\': 3 }\n' + '    ]\n' + '}', true, false).match('{\n' + '    \'one\': 1,\n' + '    \'two\': [\n' + '        { \'val\': 3 },\n' + '        { \'val\': 2 },\n' + '        { \'val\': 1 }\n' + '    ]\n' + '}').isExactMatch()> é falso")
chamada antiga: assertTrue(WireMock.equalToJson("{                  \n" + "   \"one\":    1,  \n" + "   \"two\":    2,  \n" + "   \"three\":  3,  \n" + "   \"four\":   4   \n" + "}                  \n", false, true).match("{                  \n" + "   \"one\":    1,  \n" + "   \"three\":  3,  \n" + "   \"two\":    2,  \n" + "   \"four\":   4,  \n" + "   \"five\":   5,  \n" + "   \"six\":    6   \n" + "}                  \n").isExactMatch())
nova chamada: assertTrue(WireMock.equalToJson("{                  \n" + "   \"one\":    1,  \n" + "   \"two\":    2,  \n" + "   \"three\":  3,  \n" + "   \"four\":   4   \n" + "}                  \n", false, true).match("{                  \n" + "   \"one\":    1,  \n" + "   \"three\":  3,  \n" + "   \"two\":    2,  \n" + "   \"four\":   4,  \n" + "   \"five\":   5,  \n" + "   \"six\":    6   \n" + "}                  \n").isExactMatch(), "Era esperado verdadeiro, mas " + result156 + " <WireMock.equalToJson('{                  \n' + '   \'one\':    1,  \n' + '   \'two\':    2,  \n' + '   \'three\':  3,  \n' + '   \'four\':   4   \n' + '}                  \n', false, true).match('{                  \n' + '   \'one\':    1,  \n' + '   \'three\':  3,  \n' + '   \'two\':    2,  \n' + '   \'four\':   4,  \n' + '   \'five\':   5,  \n' + '   \'six\':    6   \n' + '}                  \n').isExactMatch()> é falso")
chamada antiga: assertTrue(WireMock.equalToJson("{                          \n" + "   \"one\":    1,          \n" + "   \"two\":    2,          \n" + "   \"three\":  3,          \n" + "   \"four\":   [1, 2, 3]   \n" + "}                  \n", true, true).match("{                          \n" + "   \"one\":    1,          \n" + "   \"three\":  3,          \n" + "   \"two\":    2,          \n" + "   \"four\":   [2, 1, 3],  \n" + "   \"five\":   5,          \n" + "   \"six\":    6           \n" + "}                          \n").isExactMatch())
nova chamada: assertTrue(WireMock.equalToJson("{                          \n" + "   \"one\":    1,          \n" + "   \"two\":    2,          \n" + "   \"three\":  3,          \n" + "   \"four\":   [1, 2, 3]   \n" + "}                  \n", true, true).match("{                          \n" + "   \"one\":    1,          \n" + "   \"three\":  3,          \n" + "   \"two\":    2,          \n" + "   \"four\":   [2, 1, 3],  \n" + "   \"five\":   5,          \n" + "   \"six\":    6           \n" + "}                          \n").isExactMatch(), "Era esperado verdadeiro, mas " + result157 + " <WireMock.equalToJson('{                          \n' + '   \'one\':    1,          \n' + '   \'two\':    2,          \n' + '   \'three\':  3,          \n' + '   \'four\':   [1, 2, 3]   \n' + '}                  \n', true, true).match('{                          \n' + '   \'one\':    1,          \n' + '   \'three\':  3,          \n' + '   \'two\':    2,          \n' + '   \'four\':   [2, 1, 3],  \n' + '   \'five\':   5,          \n' + '   \'six\':    6           \n' + '}                          \n').isExactMatch()> é falso")
chamada antiga: assertFalse(new EqualToJsonPattern("{\n" + "    \"outer\": {\n" + "        \"inner:\": {\n" + "            \"wrong\": 1\n" + "        }\n" + "    }\n" + "}", false, false).match("{\n" + "    \"outer\": {\n" + "        \"inner:\": {\n" + "            \"thing\": 1\n" + "        }\n" + "    }\n" + "}").isExactMatch())
nova chamada: assertFalse(new EqualToJsonPattern("{\n" + "    \"outer\": {\n" + "        \"inner:\": {\n" + "            \"wrong\": 1\n" + "        }\n" + "    }\n" + "}", false, false).match("{\n" + "    \"outer\": {\n" + "        \"inner:\": {\n" + "            \"thing\": 1\n" + "        }\n" + "    }\n" + "}").isExactMatch(), "Era esperado falso, mas " + result158 + " <new EqualToJsonPattern('{\n' + '    \'outer\': {\n' + '        \'inner:\': {\n' + '            \'wrong\': 1\n' + '        }\n' + '    }\n' + '}', false, false).match('{\n' + '    \'outer\': {\n' + '        \'inner:\': {\n' + '            \'thing\': 1\n' + '        }\n' + '    }\n' + '}').isExactMatch()> é verdadeiro ")
chamada antiga: assertFalse(match.isExactMatch())
nova chamada: assertFalse(match.isExactMatch(), "Era esperado falso, mas " + result159 + " <match.isExactMatch()> é verdadeiro ")
chamada antiga: assertFalse(match.isExactMatch())
nova chamada: assertFalse(match.isExactMatch(), "Era esperado falso, mas " + result160 + " <match.isExactMatch()> é verdadeiro ")
chamada antiga: assertFalse(match.isExactMatch())
nova chamada: assertFalse(match.isExactMatch(), "Era esperado falso, mas " + result161 + " <match.isExactMatch()> é verdadeiro ")
chamada antiga: assertFalse(match.isExactMatch())
nova chamada: assertFalse(match.isExactMatch(), "Era esperado falso, mas " + result162 + " <match.isExactMatch()> é verdadeiro ")
chamada antiga: assertFalse(match.isExactMatch())
nova chamada: assertFalse(match.isExactMatch(), "Era esperado falso, mas " + result163 + " <match.isExactMatch()> é verdadeiro ")
chamada antiga: assertFalse(match.isExactMatch())
nova chamada: assertFalse(match.isExactMatch(), "Era esperado falso, mas " + result164 + " <match.isExactMatch()> é verdadeiro ")
chamada antiga: assertFalse(match.isExactMatch())
nova chamada: assertFalse(match.isExactMatch(), "Era esperado falso, mas " + result165 + " <match.isExactMatch()> é verdadeiro ")
chamada antiga: assertFalse(match.isExactMatch())
nova chamada: assertFalse(match.isExactMatch(), "Era esperado falso, mas " + result166 + " <match.isExactMatch()> é verdadeiro ")
chamada antiga: assertTrue(result.isExactMatch())
nova chamada: assertTrue(result.isExactMatch(), "Era esperado verdadeiro, mas " + result167 + " <result.isExactMatch()> é falso")
chamada antiga: assertTrue(urlPattern.match("/my/exact/url?one=1&two=2&three=3333333").isExactMatch())
nova chamada: assertTrue(urlPattern.match("/my/exact/url?one=1&two=2&three=3333333").isExactMatch(), "Era esperado verdadeiro, mas " + result168 + " <urlPattern.match('/my/exact/url?one=1&two=2&three=3333333').isExactMatch()> é falso")
chamada antiga: assertFalse(urlPattern.match("/my/wrong/url?one=1&three=3333333").isExactMatch())
nova chamada: assertFalse(urlPattern.match("/my/wrong/url?one=1&three=3333333").isExactMatch(), "Era esperado falso, mas " + result169 + " <urlPattern.match('/my/wrong/url?one=1&three=3333333').isExactMatch()> é verdadeiro ")
chamada antiga: assertTrue(urlPattern.match("/my/regex/url?one=1&two=123456&three=3333333").isExactMatch())
nova chamada: assertTrue(urlPattern.match("/my/regex/url?one=1&two=123456&three=3333333").isExactMatch(), "Era esperado verdadeiro, mas " + result170 + " <urlPattern.match('/my/regex/url?one=1&two=123456&three=3333333').isExactMatch()> é falso")
chamada antiga: assertFalse(urlPattern.match("/my/BAD/url?one=1&two=123456&three=3333333").isExactMatch())
nova chamada: assertFalse(urlPattern.match("/my/BAD/url?one=1&two=123456&three=3333333").isExactMatch(), "Era esperado falso, mas " + result171 + " <urlPattern.match('/my/BAD/url?one=1&two=123456&three=3333333').isExactMatch()> é verdadeiro ")
chamada antiga: assertTrue(urlPathPattern.match("/the/exact/path").isExactMatch())
nova chamada: assertTrue(urlPathPattern.match("/the/exact/path").isExactMatch(), "Era esperado verdadeiro, mas " + result172 + " <urlPathPattern.match('/the/exact/path').isExactMatch()> é falso")
chamada antiga: assertFalse(urlPathPattern.match("/totally/incorrect/path").isExactMatch())
nova chamada: assertFalse(urlPathPattern.match("/totally/incorrect/path").isExactMatch(), "Era esperado falso, mas " + result173 + " <urlPathPattern.match('/totally/incorrect/path').isExactMatch()> é verdadeiro ")
chamada antiga: assertTrue(urlPathPattern.match("/my/regex/path?one=not_looked_at").isExactMatch())
nova chamada: assertTrue(urlPathPattern.match("/my/regex/path?one=not_looked_at").isExactMatch(), "Era esperado verdadeiro, mas " + result174 + " <urlPathPattern.match('/my/regex/path?one=not_looked_at').isExactMatch()> é falso")
chamada antiga: assertFalse(urlPathPattern.match("/my/12345/path").isExactMatch())
nova chamada: assertFalse(urlPathPattern.match("/my/12345/path").isExactMatch(), "Era esperado falso, mas " + result175 + " <urlPathPattern.match('/my/12345/path').isExactMatch()> é verdadeiro ")
chamada antiga: assertFalse(match.isExactMatch())
nova chamada: assertFalse(match.isExactMatch(), "Era esperado falso, mas " + result176 + " <match.isExactMatch()> é verdadeiro ")
chamada antiga: assertTrue(match.isExactMatch())
nova chamada: assertTrue(match.isExactMatch(), "Era esperado verdadeiro, mas " + result177 + " <match.isExactMatch()> é falso")
chamada antiga: assertTrue(match.isExactMatch())
nova chamada: assertTrue(match.isExactMatch(), "Era esperado verdadeiro, mas " + result178 + " <match.isExactMatch()> é falso")
chamada antiga: assertTrue(match.isExactMatch())
nova chamada: assertTrue(match.isExactMatch(), "Era esperado verdadeiro, mas " + result179 + " <match.isExactMatch()> é falso")
chamada antiga: assertTrue(match.isExactMatch())
nova chamada: assertTrue(match.isExactMatch(), "Era esperado verdadeiro, mas " + result180 + " <match.isExactMatch()> é falso")
chamada antiga: assertTrue(match.isExactMatch())
nova chamada: assertTrue(match.isExactMatch(), "Era esperado verdadeiro, mas " + result181 + " <match.isExactMatch()> é falso")
chamada antiga: assertTrue(match.isExactMatch())
nova chamada: assertTrue(match.isExactMatch(), "Era esperado verdadeiro, mas " + result182 + " <match.isExactMatch()> é falso")
chamada antiga: assertTrue(match.isExactMatch())
nova chamada: assertTrue(match.isExactMatch(), "Era esperado verdadeiro, mas " + result183 + " <match.isExactMatch()> é falso")
chamada antiga: assertFalse(match.isExactMatch())
nova chamada: assertFalse(match.isExactMatch(), "Era esperado falso, mas " + result184 + " <match.isExactMatch()> é verdadeiro ")
chamada antiga: assertThrows(JsonException.class, () -> {
    Json.read("{                                      \n" + "    \"matchesJsonPath\": {              \n" + "        \"express\": \"$..thing\",      \n" + "        \"equalTo\": \"the value\"      \n" + "    }                                   \n" + "}", StringValuePattern.class);
})
nova chamada: assertThrows(JsonException.class, () -> {
    Json.read("{                                      \n" + "    \"matchesJsonPath\": {              \n" + "        \"express\": \"$..thing\",      \n" + "        \"equalTo\": \"the value\"      \n" + "    }                                   \n" + "}", StringValuePattern.class);
}, "Era esperado que a exceção  JsonException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(JsonException.class, () -> {
    Json.read("{                                      \n" + "    \"matchesJsonPath\": {              \n" + "        \"expression\": \"$..thing\",   \n" + "        \"badOperator\": \"the value\"  \n" + "    }                                   \n" + "}", StringValuePattern.class);
})
nova chamada: assertThrows(JsonException.class, () -> {
    Json.read("{                                      \n" + "    \"matchesJsonPath\": {              \n" + "        \"expression\": \"$..thing\",   \n" + "        \"badOperator\": \"the value\"  \n" + "    }                                   \n" + "}", StringValuePattern.class);
}, "Era esperado que a exceção  JsonException.class fosse lançada, mas não foi")
chamada antiga: assertTrue(result.isExactMatch())
nova chamada: assertTrue(result.isExactMatch(), "Era esperado verdadeiro, mas " + result185 + " <result.isExactMatch()> é falso")
chamada antiga: assertTrue(result.isExactMatch())
nova chamada: assertTrue(result.isExactMatch(), "Era esperado verdadeiro, mas " + result186 + " <result.isExactMatch()> é falso")
chamada antiga: assertEquals(200, statusCode)
nova chamada: assertEquals(200, statusCode, "Era esperado valores iguais, mas  200 é diferente de " + " statusCode")
chamada antiga: assertEquals(200, statusCode)
nova chamada: assertEquals(200, statusCode, "Era esperado valores iguais, mas  200 é diferente de " + " statusCode")
chamada antiga: assertEquals(200, statusCode)
nova chamada: assertEquals(200, statusCode, "Era esperado valores iguais, mas  200 é diferente de " + " statusCode")
chamada antiga: assertEquals(200, statusCode)
nova chamada: assertEquals(200, statusCode, "Era esperado valores iguais, mas  200 é diferente de " + " statusCode")
chamada antiga: assertEquals(200, response.statusCode())
nova chamada: assertEquals(200, response.statusCode(), "Era esperado valores iguais, mas  200 é diferente de " + result187 + " <response.statusCode()>")
chamada antiga: assertThrows(NotRecordingException.class, WireMock::stopRecording)
nova chamada: assertThrows(NotRecordingException.class, WireMock::stopRecording, "Era esperado que a exceção  NotRecordingException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(NotRecordingException.class, adminClient::stopStubRecording)
nova chamada: assertThrows(NotRecordingException.class, adminClient::stopStubRecording, "Era esperado que a exceção  NotRecordingException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(NotRecordingException.class, proxyingService::stopRecording)
nova chamada: assertThrows(NotRecordingException.class, proxyingService::stopRecording, "Era esperado que a exceção  NotRecordingException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(InvalidInputException.class, () -> {
    startRecording(recordSpec());
})
nova chamada: assertThrows(InvalidInputException.class, () -> {
    startRecording(recordSpec());
}, "Era esperado que a exceção  InvalidInputException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(InvalidInputException.class, () -> {
    proxyingService.startRecording(recordSpec());
})
nova chamada: assertThrows(InvalidInputException.class, () -> {
    proxyingService.startRecording(recordSpec());
}, "Era esperado que a exceção  InvalidInputException.class fosse lançada, mas não foi")
chamada antiga: assertNull(httpConnector)
nova chamada: assertNull(httpConnector, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertThrows(Exception.class, () -> {
    new CommandLineOptions("--port");
})
nova chamada: assertThrows(Exception.class, () -> {
    new CommandLineOptions("--port");
}, "Era esperado que a exceção  Exception.class fosse lançada, mas não foi")
chamada antiga: assertThrows(Exception.class, () -> {
    new CommandLineOptions("--proxy-all");
})
nova chamada: assertThrows(Exception.class, () -> {
    new CommandLineOptions("--proxy-all");
}, "Era esperado que a exceção  Exception.class fosse lançada, mas não foi")
chamada antiga: assertThrows(IllegalArgumentException.class, () -> {
    new CommandLineOptions("--no-request-journal", "--record-mappings");
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    new CommandLineOptions("--no-request-journal", "--record-mappings");
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: assertSame(one, two)
nova chamada: assertSame(one, two, "Era esperado objetos iguais, mas  one é diferente de " + " two")
chamada antiga: assertFalse(options.getStores().getSettingsStore().get().getProxyPassThrough())
nova chamada: assertFalse(options.getStores().getSettingsStore().get().getProxyPassThrough(), "Era esperado falso, mas " + result188 + " <options.getStores().getSettingsStore().get().getProxyPassThrough()> é verdadeiro ")
chamada antiga: assertTrue(options.getStores().getSettingsStore().get().getProxyPassThrough())
nova chamada: assertTrue(options.getStores().getSettingsStore().get().getProxyPassThrough(), "Era esperado verdadeiro, mas " + result189 + " <options.getStores().getSettingsStore().get().getProxyPassThrough()> é falso")
chamada antiga: assertTrue(options.getStores().getSettingsStore().get().getProxyPassThrough())
nova chamada: assertTrue(options.getStores().getSettingsStore().get().getProxyPassThrough(), "Era esperado verdadeiro, mas " + result190 + " <options.getStores().getSettingsStore().get().getProxyPassThrough()> é falso")
chamada antiga: assertThrows(IllegalArgumentException.class, () -> {
    ProxySettings.fromString(":8090");
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    ProxySettings.fromString(":8090");
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(VerificationException.class, () -> {
    testClient.get("/this/got/requested?query");
    verify(getRequestedFor(urlEqualTo("/this/got/requested")));
})
nova chamada: assertThrows(VerificationException.class, () -> {
    testClient.get("/this/got/requested?query");
    verify(getRequestedFor(urlEqualTo("/this/got/requested")));
}, "Era esperado que a exceção  VerificationException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(VerificationException.class, () -> {
    testClient.get("/this/got/requested?query");
    verify(getRequestedFor(urlEqualTo("/this/got/requeste?query")));
})
nova chamada: assertThrows(VerificationException.class, () -> {
    testClient.get("/this/got/requested?query");
    verify(getRequestedFor(urlEqualTo("/this/got/requeste?query")));
}, "Era esperado que a exceção  VerificationException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(VerificationException.class, () -> {
    testClient.get("/this/got/requested?query");
    verify(getRequestedFor(urlEqualTo("/this/got/requested/?query")));
})
nova chamada: assertThrows(VerificationException.class, () -> {
    testClient.get("/this/got/requested?query");
    verify(getRequestedFor(urlEqualTo("/this/got/requested/?query")));
}, "Era esperado que a exceção  VerificationException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(VerificationException.class, () -> {
    testClient.get("/this/got/requested?query");
    verify(getRequestedFor(urlPathEqualTo("/this/got/requeste")));
})
nova chamada: assertThrows(VerificationException.class, () -> {
    testClient.get("/this/got/requested?query");
    verify(getRequestedFor(urlPathEqualTo("/this/got/requeste")));
}, "Era esperado que a exceção  VerificationException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(VerificationException.class, () -> {
    testClient.get("/this/got/requested?query");
    verify(getRequestedFor(urlPathEqualTo("/this/got/requested/")));
})
nova chamada: assertThrows(VerificationException.class, () -> {
    testClient.get("/this/got/requested?query");
    verify(getRequestedFor(urlPathEqualTo("/this/got/requested/")));
}, "Era esperado que a exceção  VerificationException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(VerificationException.class, () -> {
    testClient.get("/this/got/requested");
    verify(getRequestedFor(urlPathMatching("/(.*?)/got/")));
})
nova chamada: assertThrows(VerificationException.class, () -> {
    testClient.get("/this/got/requested");
    verify(getRequestedFor(urlPathMatching("/(.*?)/got/")));
}, "Era esperado que a exceção  VerificationException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(VerificationException.class, () -> {
    testClient.get("/this/got/requested");
    verify(getRequestedFor(urlPathMatching("/got/.*")));
})
nova chamada: assertThrows(VerificationException.class, () -> {
    testClient.get("/this/got/requested");
    verify(getRequestedFor(urlPathMatching("/got/.*")));
}, "Era esperado que a exceção  VerificationException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(VerificationException.class, () -> {
    testClient.get("/this/got/requested");
    verify(getRequestedFor(urlEqualTo("/this/did/not")));
})
nova chamada: assertThrows(VerificationException.class, () -> {
    testClient.get("/this/got/requested");
    verify(getRequestedFor(urlEqualTo("/this/did/not")));
}, "Era esperado que a exceção  VerificationException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(VerificationException.class, () -> {
    testClient.put("/to/modify", withHeader("Content-Type", "application/json"), withHeader("Encoding", "LATIN-1"));
    verify(putRequestedFor(urlEqualTo("/to/modify")).withHeader("Content-Type", equalTo("application/json")).withHeader("Encoding", notMatching("LATIN-1")));
})
nova chamada: assertThrows(VerificationException.class, () -> {
    testClient.put("/to/modify", withHeader("Content-Type", "application/json"), withHeader("Encoding", "LATIN-1"));
    verify(putRequestedFor(urlEqualTo("/to/modify")).withHeader("Content-Type", equalTo("application/json")).withHeader("Encoding", notMatching("LATIN-1")));
}, "Era esperado que a exceção  VerificationException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(VerificationException.class, () -> verify(postRequestedFor(urlEqualTo("/body/json")).withRequestBody(not(containing("Important value")))))
nova chamada: assertThrows(VerificationException.class, () -> verify(postRequestedFor(urlEqualTo("/body/json")).withRequestBody(not(containing("Important value")))), "Era esperado que a exceção  VerificationException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(VerificationException.class, () -> {
    testClient.get("/query?param=my-value");
    verify(getRequestedFor(urlPathEqualTo("/query")).withQueryParam("param", equalTo("wrong-value")));
})
nova chamada: assertThrows(VerificationException.class, () -> {
    testClient.get("/query?param=my-value");
    verify(getRequestedFor(urlPathEqualTo("/query")).withQueryParam("param", equalTo("wrong-value")));
}, "Era esperado que a exceção  VerificationException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(VerificationException.class, () -> {
    testClient.get("/query");
    verify(getRequestedFor(urlPathEqualTo("/query")).withQueryParam("param", equalTo("my-value")));
})
nova chamada: assertThrows(VerificationException.class, () -> {
    testClient.get("/query");
    verify(getRequestedFor(urlPathEqualTo("/query")).withQueryParam("param", equalTo("my-value")));
}, "Era esperado que a exceção  VerificationException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(VerificationException.class, () -> {
    testClient.get("/count/this");
    testClient.get("/count/this");
    testClient.get("/count/this");
    WireMock.reset();
    verify(getRequestedFor(urlEqualTo("/count/this")));
})
nova chamada: assertThrows(VerificationException.class, () -> {
    testClient.get("/count/this");
    testClient.get("/count/this");
    testClient.get("/count/this");
    WireMock.reset();
    verify(getRequestedFor(urlEqualTo("/count/this")));
}, "Era esperado que a exceção  VerificationException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(VerificationException.class, () -> {
    getCountableRequests(5);
    verify(lessThan(5), getRequestedFor(urlEqualTo("/add/to/count")));
})
nova chamada: assertThrows(VerificationException.class, () -> {
    getCountableRequests(5);
    verify(lessThan(5), getRequestedFor(urlEqualTo("/add/to/count")));
}, "Era esperado que a exceção  VerificationException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(VerificationException.class, () -> {
    getCountableRequests(6);
    verify(lessThan(5), getRequestedFor(urlEqualTo("/add/to/count")));
})
nova chamada: assertThrows(VerificationException.class, () -> {
    getCountableRequests(6);
    verify(lessThan(5), getRequestedFor(urlEqualTo("/add/to/count")));
}, "Era esperado que a exceção  VerificationException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(VerificationException.class, () -> {
    getCountableRequests(6);
    verify(lessThanOrExactly(5), getRequestedFor(urlEqualTo("/add/to/count")));
})
nova chamada: assertThrows(VerificationException.class, () -> {
    getCountableRequests(6);
    verify(lessThanOrExactly(5), getRequestedFor(urlEqualTo("/add/to/count")));
}, "Era esperado que a exceção  VerificationException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(VerificationException.class, () -> {
    getCountableRequests(4);
    verify(exactly(5), getRequestedFor(urlEqualTo("/add/to/count")));
})
nova chamada: assertThrows(VerificationException.class, () -> {
    getCountableRequests(4);
    verify(exactly(5), getRequestedFor(urlEqualTo("/add/to/count")));
}, "Era esperado que a exceção  VerificationException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(VerificationException.class, () -> {
    getCountableRequests(6);
    verify(exactly(5), getRequestedFor(urlEqualTo("/add/to/count")));
})
nova chamada: assertThrows(VerificationException.class, () -> {
    getCountableRequests(6);
    verify(exactly(5), getRequestedFor(urlEqualTo("/add/to/count")));
}, "Era esperado que a exceção  VerificationException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(VerificationException.class, () -> {
    getCountableRequests(4);
    verify(moreThanOrExactly(5), getRequestedFor(urlEqualTo("/add/to/count")));
})
nova chamada: assertThrows(VerificationException.class, () -> {
    getCountableRequests(4);
    verify(moreThanOrExactly(5), getRequestedFor(urlEqualTo("/add/to/count")));
}, "Era esperado que a exceção  VerificationException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(VerificationException.class, () -> {
    getCountableRequests(4);
    verify(moreThan(5), getRequestedFor(urlEqualTo("/add/to/count")));
})
nova chamada: assertThrows(VerificationException.class, () -> {
    getCountableRequests(4);
    verify(moreThan(5), getRequestedFor(urlEqualTo("/add/to/count")));
}, "Era esperado que a exceção  VerificationException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(VerificationException.class, () -> {
    getCountableRequests(5);
    verify(moreThan(5), getRequestedFor(urlEqualTo("/add/to/count")));
})
nova chamada: assertThrows(VerificationException.class, () -> {
    getCountableRequests(5);
    verify(moreThan(5), getRequestedFor(urlEqualTo("/add/to/count")));
}, "Era esperado que a exceção  VerificationException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(VerificationException.class, () -> {
    testClient.get("/without/another/header", withHeader("Content-Type", "application/json"));
    verify(getRequestedFor(urlEqualTo("/without/another/header")).withoutHeader("Content-Type"));
})
nova chamada: assertThrows(VerificationException.class, () -> {
    testClient.get("/without/another/header", withHeader("Content-Type", "application/json"));
    verify(getRequestedFor(urlEqualTo("/without/another/header")).withoutHeader("Content-Type"));
}, "Era esperado que a exceção  VerificationException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(VerificationException.class, () -> {
    testClient.post("/no/body", new StringEntity("not absent"));
    verify(postRequestedFor(urlEqualTo("/no/body")).withRequestBody(absent()));
})
nova chamada: assertThrows(VerificationException.class, () -> {
    testClient.post("/no/body", new StringEntity("not absent"));
    verify(postRequestedFor(urlEqualTo("/no/body")).withRequestBody(absent()));
}, "Era esperado que a exceção  VerificationException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(RequestJournalDisabledException.class, () -> {
    verify(getRequestedFor(urlEqualTo("/whatever")));
})
nova chamada: assertThrows(RequestJournalDisabledException.class, () -> {
    verify(getRequestedFor(urlEqualTo("/whatever")));
}, "Era esperado que a exceção  RequestJournalDisabledException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(RequestJournalDisabledException.class, () -> {
    findAll(getRequestedFor(urlEqualTo("/whatever")));
})
nova chamada: assertThrows(RequestJournalDisabledException.class, () -> {
    findAll(getRequestedFor(urlEqualTo("/whatever")));
}, "Era esperado que a exceção  RequestJournalDisabledException.class fosse lançada, mas não foi")
chamada antiga: assertTrue(wm.listAllStubMappings().getMappings().isEmpty())
nova chamada: assertTrue(wm.listAllStubMappings().getMappings().isEmpty(), "Era esperado verdadeiro, mas " + result191 + " <wm.listAllStubMappings().getMappings().isEmpty()> é falso")
chamada antiga: assertTrue(wm.listAllStubMappings().getMappings().isEmpty())
nova chamada: assertTrue(wm.listAllStubMappings().getMappings().isEmpty(), "Era esperado verdadeiro, mas " + result192 + " <wm.listAllStubMappings().getMappings().isEmpty()> é falso")
chamada antiga: assertFalse(fetchedSettings.getProxyPassThrough())
nova chamada: assertFalse(fetchedSettings.getProxyPassThrough(), "Era esperado falso, mas " + result193 + " <fetchedSettings.getProxyPassThrough()> é verdadeiro ")
chamada antiga: assertThrows(NotAuthorisedException.class, () -> {
    initialise(new BasicAuthenticator(new BasicCredentials("user1", "password1"), new BasicCredentials("user2", "password2")), new ClientBasicAuthenticator("user1", "password1"));
    badClient = WireMock.create().port(server.port()).authenticator(new ClientBasicAuthenticator("user1", "wrong_password")).build();
    badClient.getServeEvents();
})
nova chamada: assertThrows(NotAuthorisedException.class, () -> {
    initialise(new BasicAuthenticator(new BasicCredentials("user1", "password1"), new BasicCredentials("user2", "password2")), new ClientBasicAuthenticator("user1", "password1"));
    badClient = WireMock.create().port(server.port()).authenticator(new ClientBasicAuthenticator("user1", "wrong_password")).build();
    badClient.getServeEvents();
}, "Era esperado que a exceção  NotAuthorisedException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(SocketTimeoutException.class, () -> {
    stubFor(get(urlEqualTo("/delayed")).willReturn(aResponse().withStatus(200).withFixedDelay(LONGER_THAN_SOCKET_TIMEOUT)));
    httpClient.execute(new HttpGet(wireMockRule.url("/delayed")));
})
nova chamada: assertThrows(SocketTimeoutException.class, () -> {
    stubFor(get(urlEqualTo("/delayed")).willReturn(aResponse().withStatus(200).withFixedDelay(LONGER_THAN_SOCKET_TIMEOUT)));
    httpClient.execute(new HttpGet(wireMockRule.url("/delayed")));
}, "Era esperado que a exceção  SocketTimeoutException.class fosse lançada, mas não foi")
chamada antiga: assertTrue(callSucceeded.get())
nova chamada: assertTrue(callSucceeded.get(), "Era esperado verdadeiro, mas " + result194 + " <callSucceeded.get()> é falso")
chamada antiga: assertTrue(callSucceeded.get())
nova chamada: assertTrue(callSucceeded.get(), "Era esperado verdadeiro, mas " + result195 + " <callSucceeded.get()> é falso")
chamada antiga: assertTrue(exception.getMessage().contains("Not listening on HTTP port. Either HTTP is not enabled or the WireMock server is stopped."))
nova chamada: assertTrue(exception.getMessage().contains("Not listening on HTTP port. Either HTTP is not enabled or the WireMock server is stopped."), "Era esperado verdadeiro, mas " + result196 + " <exception.getMessage().contains('Not listening on HTTP port. Either HTTP is not enabled or the WireMock server is stopped.')> é falso")
chamada antiga: assertThrows(Exception.class, () -> {
    String testKeystorePath = Resources.getResource("bad-keystore").toString();
    startServerWithKeystore(testKeystorePath);
})
nova chamada: assertThrows(Exception.class, () -> {
    String testKeystorePath = Resources.getResource("bad-keystore").toString();
    startServerWithKeystore(testKeystorePath);
}, "Era esperado que a exceção  Exception.class fosse lançada, mas não foi")
chamada antiga: assertThrows(AdminException.class, () -> {
    wm.register(get(urlPathMatching("/the/.*/one")).andMatching(new MyRequestMatcher()).willReturn(ok()));
})
nova chamada: assertThrows(AdminException.class, () -> {
    wm.register(get(urlPathMatching("/the/.*/one")).andMatching(new MyRequestMatcher()).willReturn(ok()));
}, "Era esperado que a exceção  AdminException.class fosse lançada, mas não foi")
chamada antiga: assertEquals(loggedResponse.getBodyAsString(), "")
nova chamada: assertEquals(loggedResponse.getBodyAsString(), "", "Era esperado valores iguais, mas " + result197 + " <loggedResponse.getBodyAsString()> é diferente de " + " ''")
chamada antiga: assertTrue(loggedRequest.containsHeader("content-type"))
nova chamada: assertTrue(loggedRequest.containsHeader("content-type"), "Era esperado verdadeiro, mas " + result198 + " <loggedRequest.containsHeader('content-type')> é falso")
chamada antiga: assertNotNull(loggedRequest.getHeader("content-type"))
nova chamada: assertNotNull(loggedRequest.getHeader("content-type"), "Era esperado não nulo, mas " + result199 + " <loggedRequest.getHeader('content-type')> é nulo")
chamada antiga: assertTrue(loggedRequest.containsHeader("CONTENT-TYPE"))
nova chamada: assertTrue(loggedRequest.containsHeader("CONTENT-TYPE"), "Era esperado verdadeiro, mas " + result200 + " <loggedRequest.containsHeader('CONTENT-TYPE')> é falso")
chamada antiga: assertNotNull(loggedRequest.getHeader("CONTENT-TYPE"))
nova chamada: assertNotNull(loggedRequest.getHeader("CONTENT-TYPE"), "Era esperado não nulo, mas " + result201 + " <loggedRequest.getHeader('CONTENT-TYPE')> é nulo")
chamada antiga: assertTrue(loggedRequest.containsHeader("Accept"))
nova chamada: assertTrue(loggedRequest.containsHeader("Accept"), "Era esperado verdadeiro, mas " + result202 + " <loggedRequest.containsHeader('Accept')> é falso")
chamada antiga: assertNotNull(loggedRequest.getHeader("Accept"))
nova chamada: assertNotNull(loggedRequest.getHeader("Accept"), "Era esperado não nulo, mas " + result203 + " <loggedRequest.getHeader('Accept')> é nulo")
chamada antiga: assertTrue(reqMap.containsKey("queryParams"))
nova chamada: assertTrue(reqMap.containsKey("queryParams"), "Era esperado verdadeiro, mas " + result204 + " <reqMap.containsKey('queryParams')> é falso")
chamada antiga: assertEquals("value-1", ((List) ((Map) ((Map) reqMap.get("queryParams")).get("test-param-1")).get("values")).get(0))
nova chamada: assertEquals("value-1", ((List) ((Map) ((Map) reqMap.get("queryParams")).get("test-param-1")).get("values")).get(0), "Era esperado valores iguais, mas  'value-1' é diferente de " + result205 + " <((List) ((Map) ((Map) reqMap.get('queryParams')).get('test-param-1')).get('values')).get(0)>")
chamada antiga: assertEquals("value-2", ((List) ((Map) ((Map) reqMap.get("queryParams")).get("test-param-2")).get("values")).get(0))
nova chamada: assertEquals("value-2", ((List) ((Map) ((Map) reqMap.get("queryParams")).get("test-param-2")).get("values")).get(0), "Era esperado valores iguais, mas  'value-2' é diferente de " + result206 + " <((List) ((Map) ((Map) reqMap.get('queryParams')).get('test-param-2')).get('values')).get(0)>")
chamada antiga: assertEquals("test-param-1", req.queryParameter("test-param-1").key())
nova chamada: assertEquals("test-param-1", req.queryParameter("test-param-1").key(), "Era esperado valores iguais, mas  'test-param-1' é diferente de " + result207 + " <req.queryParameter('test-param-1').key()>")
chamada antiga: assertEquals("value-1", req.queryParameter("test-param-1").firstValue())
nova chamada: assertEquals("value-1", req.queryParameter("test-param-1").firstValue(), "Era esperado valores iguais, mas  'value-1' é diferente de " + result208 + " <req.queryParameter('test-param-1').firstValue()>")
chamada antiga: assertEquals("test-param-2", req.queryParameter("test-param-2").key())
nova chamada: assertEquals("test-param-2", req.queryParameter("test-param-2").key(), "Era esperado valores iguais, mas  'test-param-2' é diferente de " + result209 + " <req.queryParameter('test-param-2').key()>")
chamada antiga: assertEquals("value-2", req.queryParameter("test-param-2").firstValue())
nova chamada: assertEquals("value-2", req.queryParameter("test-param-2").firstValue(), "Era esperado valores iguais, mas  'value-2' é diferente de " + result210 + " <req.queryParameter('test-param-2').firstValue()>")
chamada antiga: assertThrows(InvalidInputException.class, () -> stubFor(get(urlPathEqualTo("/stuff")).withPathParam("wrong", containing("things")).willReturn(ok())))
nova chamada: assertThrows(InvalidInputException.class, () -> stubFor(get(urlPathEqualTo("/stuff")).withPathParam("wrong", containing("things")).willReturn(ok())), "Era esperado que a exceção  InvalidInputException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(InvalidInputException.class, () -> wm.stubFor(get(urlPathEqualTo("/stuff")).withPathParam("wrong", containing("things")).willReturn(ok())))
nova chamada: assertThrows(InvalidInputException.class, () -> wm.stubFor(get(urlPathEqualTo("/stuff")).withPathParam("wrong", containing("things")).willReturn(ok())), "Era esperado que a exceção  InvalidInputException.class fosse lançada, mas não foi")
chamada antiga: assertDoesNotThrow(() -> new DirectCallHttpServer(options, adminRequestHandler, stubRequestHandler))
nova chamada: assertDoesNotThrow(() -> new DirectCallHttpServer(options, adminRequestHandler, stubRequestHandler), "Era esperado que nenhuma exceção fosse lançada, mas  () - new DirectCallHttpServer(options, adminRequestHandler, stubRequestHandler) foi lançada")
chamada antiga: assertDoesNotThrow(server::start)
nova chamada: assertDoesNotThrow(server::start, "Era esperado que nenhuma exceção fosse lançada, mas  server::start foi lançada")
chamada antiga: assertTrue(server.isRunning())
nova chamada: assertTrue(server.isRunning(), "Era esperado verdadeiro, mas " + result211 + " <server.isRunning()> é falso")
chamada antiga: assertEquals(server.isRunning(), isRunning)
nova chamada: assertEquals(server.isRunning(), isRunning, "Era esperado valores iguais, mas " + result212 + " <server.isRunning()> é diferente de " + " isRunning")
chamada antiga: assertEquals(server.port(), -1)
nova chamada: assertEquals(server.port(), -1, "Era esperado valores iguais, mas " + result213 + " <server.port()> é diferente de " + " -1")
chamada antiga: assertEquals(server.httpsPort(), -2)
nova chamada: assertEquals(server.httpsPort(), -2, "Era esperado valores iguais, mas " + result214 + " <server.httpsPort()> é diferente de " + " -2")
chamada antiga: assertEquals(response, actual)
nova chamada: assertEquals(response, actual, "Era esperado valores iguais, mas  response é diferente de " + " actual")

chamada antiga: fail()
nova chamada: fail("A execução falhou por uma causa deliberada")
chamada antiga: assertEquals("The request was not handled within the timeout of 5ms", actual.getMessage())
nova chamada: assertEquals("The request was not handled within the timeout of 5ms", actual.getMessage(), "Era esperado valores iguais, mas  'The request was not handled within the timeout of 5ms' é diferente de " + result215 + " <actual.getMessage()>")
chamada antiga: assertTrue(actual.getCause() instanceof TimeoutException)
nova chamada: assertTrue(actual.getCause() instanceof TimeoutException, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(404, response.getStatus())
nova chamada: assertEquals(404, response.getStatus(), "Era esperado valores iguais, mas  404 é diferente de " + result216 + " <response.getStatus()>")
chamada antiga: assertEquals(200, response.getStatus())
nova chamada: assertEquals(200, response.getStatus(), "Era esperado valores iguais, mas  200 é diferente de " + result217 + " <response.getStatus()>")
chamada antiga: assertEquals("THINGS!", response.getBodyAsString())
nova chamada: assertEquals("THINGS!", response.getBodyAsString(), "Era esperado valores iguais, mas  'THINGS!' é diferente de " + result218 + " <response.getBodyAsString()>")
chamada antiga: assertNull(alias)
nova chamada: assertNull(alias, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals("default_alias", alias)
nova chamada: assertEquals("default_alias", alias, "Era esperado valores iguais, mas  'default_alias' é diferente de " + " alias")
chamada antiga: assertEquals("default_alias", alias)
nova chamada: assertEquals("default_alias", alias, "Era esperado valores iguais, mas  'default_alias' é diferente de " + " alias")
chamada antiga: assertEquals("default_alias", alias)
nova chamada: assertEquals("default_alias", alias, "Era esperado valores iguais, mas  'default_alias' é diferente de " + " alias")
chamada antiga: assertEquals("default_alias", alias)
nova chamada: assertEquals("default_alias", alias, "Era esperado valores iguais, mas  'default_alias' é diferente de " + " alias")
chamada antiga: assertEquals("default_alias", alias)
nova chamada: assertEquals("default_alias", alias, "Era esperado valores iguais, mas  'default_alias' é diferente de " + " alias")
chamada antiga: assertEquals("default_alias", alias)
nova chamada: assertEquals("default_alias", alias, "Era esperado valores iguais, mas  'default_alias' é diferente de " + " alias")
chamada antiga: assertEquals("default_alias", alias)
nova chamada: assertEquals("default_alias", alias, "Era esperado valores iguais, mas  'default_alias' é diferente de " + " alias")
chamada antiga: assertEquals("default_alias", alias)
nova chamada: assertEquals("default_alias", alias, "Era esperado valores iguais, mas  'default_alias' é diferente de " + " alias")
chamada antiga: assertNull(generatingKeyManager.getCertificateChain(hostname))
nova chamada: assertNull(generatingKeyManager.getCertificateChain(hostname), "Era esperado nulo, mas " + result219 + " <generatingKeyManager.getCertificateChain(hostname)> não é nulo")
chamada antiga: assertNull(generatingKeyManager.getPrivateKey(hostname))
nova chamada: assertNull(generatingKeyManager.getPrivateKey(hostname), "Era esperado nulo, mas " + result220 + " <generatingKeyManager.getPrivateKey(hostname)> não é nulo")
chamada antiga: assertEquals(hostname, keyAlias)
nova chamada: assertEquals(hostname, keyAlias, "Era esperado valores iguais, mas  hostname é diferente de " + " keyAlias")
chamada antiga: assertEquals(2, generatingKeyManager.getCertificateChain(keyAlias).length)
nova chamada: assertEquals(2, generatingKeyManager.getCertificateChain(keyAlias).length, "Era esperado valores iguais, mas  2 é diferente de " + " generatingKeyManager.getCertificateChain(keyAlias).length")
chamada antiga: assertEquals(myPublicKey, generatingKeyManager.getCertificateChain(keyAlias)[0].getPublicKey())
nova chamada: assertEquals(myPublicKey, generatingKeyManager.getCertificateChain(keyAlias)[0].getPublicKey(), "Era esperado valores iguais, mas  myPublicKey é diferente de " + result221 + " <generatingKeyManager.getCertificateChain(keyAlias)[0].getPublicKey()>")
chamada antiga: assertEquals(keyAlias, sameKeyAlias)
nova chamada: assertEquals(keyAlias, sameKeyAlias, "Era esperado valores iguais, mas  keyAlias é diferente de " + " sameKeyAlias")
chamada antiga: assertEquals(privateKey, generatingKeyManager.getPrivateKey(sameKeyAlias))
nova chamada: assertEquals(privateKey, generatingKeyManager.getPrivateKey(sameKeyAlias), "Era esperado valores iguais, mas  privateKey é diferente de " + result222 + " <generatingKeyManager.getPrivateKey(sameKeyAlias)>")
chamada antiga: assertArrayEquals(certificateChain, generatingKeyManager.getCertificateChain(sameKeyAlias))
nova chamada: assertArrayEquals(certificateChain, generatingKeyManager.getCertificateChain(sameKeyAlias), "Era esperado arrays iguais, mas  certificateChain é diferente de " + result223 + " <generatingKeyManager.getCertificateChain(sameKeyAlias)>")
chamada antiga: assertNull(alias)
nova chamada: assertNull(alias, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals("default_alias", alias)
nova chamada: assertEquals("default_alias", alias, "Era esperado valores iguais, mas  'default_alias' é diferente de " + " alias")
chamada antiga: assertEquals("default_alias", alias)
nova chamada: assertEquals("default_alias", alias, "Era esperado valores iguais, mas  'default_alias' é diferente de " + " alias")
chamada antiga: assertEquals("default_alias", alias)
nova chamada: assertEquals("default_alias", alias, "Era esperado valores iguais, mas  'default_alias' é diferente de " + " alias")
chamada antiga: assertEquals("default_alias", alias)
nova chamada: assertEquals("default_alias", alias, "Era esperado valores iguais, mas  'default_alias' é diferente de " + " alias")
chamada antiga: assertEquals("default_alias", alias)
nova chamada: assertEquals("default_alias", alias, "Era esperado valores iguais, mas  'default_alias' é diferente de " + " alias")
chamada antiga: assertEquals("default_alias", alias)
nova chamada: assertEquals("default_alias", alias, "Era esperado valores iguais, mas  'default_alias' é diferente de " + " alias")
chamada antiga: assertEquals("default_alias", alias)
nova chamada: assertEquals("default_alias", alias, "Era esperado valores iguais, mas  'default_alias' é diferente de " + " alias")
chamada antiga: assertEquals(invalidCertForTrustManager1, thrown)
nova chamada: assertEquals(invalidCertForTrustManager1, thrown, "Era esperado valores iguais, mas  invalidCertForTrustManager1 é diferente de " + " thrown")
chamada antiga: assertEquals(invalidCertForTrustManager2, thrown)
nova chamada: assertEquals(invalidCertForTrustManager2, thrown, "Era esperado valores iguais, mas  invalidCertForTrustManager2 é diferente de " + " thrown")
chamada antiga: assertArrayEquals(new X509Certificate[] { cert1, cert2, cert3, cert4 }, acceptedIssuers)
nova chamada: assertArrayEquals(new X509Certificate[] { cert1, cert2, cert3, cert4 }, acceptedIssuers, "Era esperado arrays iguais, mas  new X509Certificate[] { cert1, cert2, cert3, cert4 } é diferente de " + " acceptedIssuers")
chamada antiga: assertArrayEquals(new X509Certificate[] { cert1, cert2, cert3, cert4 }, compositeTrustManager.getAcceptedIssuers())
nova chamada: assertArrayEquals(new X509Certificate[] { cert1, cert2, cert3, cert4 }, compositeTrustManager.getAcceptedIssuers(), "Era esperado arrays iguais, mas  new X509Certificate[] { cert1, cert2, cert3, cert4 } é diferente de " + result224 + " <compositeTrustManager.getAcceptedIssuers()>")
chamada antiga: assertThrows(IllegalStateException.class, () -> {
    HttpHeader.absent("Something").firstValue();
})
nova chamada: assertThrows(IllegalStateException.class, () -> {
    HttpHeader.absent("Something").firstValue();
}, "Era esperado que a exceção  IllegalStateException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(IllegalStateException.class, () -> {
    HttpHeader.absent("Something").values();
})
nova chamada: assertThrows(IllegalStateException.class, () -> {
    HttpHeader.absent("Something").values();
}, "Era esperado que a exceção  IllegalStateException.class fosse lançada, mas não foi")
chamada antiga: assertEquals("Hello World", result)
nova chamada: assertEquals("Hello World", result, "Era esperado valores iguais, mas  'Hello World' é diferente de " + " result")
chamada antiga: assertEquals(response.getBodyAsString(), "Result")
nova chamada: assertEquals(response.getBodyAsString(), "Result", "Era esperado valores iguais, mas " + result225 + " <response.getBodyAsString()> é diferente de " + " 'Result'")
chamada antiga: assertEquals(HTTP_INTERNAL_ERROR, response.getStatus())
nova chamada: assertEquals(HTTP_INTERNAL_ERROR, response.getStatus(), "Era esperado valores iguais, mas  HTTP_INTERNAL_ERROR é diferente de " + result226 + " <response.getStatus()>")
chamada antiga: assertEquals(response.getBodyAsString(), "Result")
nova chamada: assertEquals(response.getBodyAsString(), "Result", "Era esperado valores iguais, mas " + result227 + " <response.getBodyAsString()> é diferente de " + " 'Result'")
chamada antiga: assertThrows(SSLException.class, () -> client.execute(new HttpGet(server.url("/whatever"))))
nova chamada: assertThrows(SSLException.class, () -> client.execute(new HttpGet(server.url("/whatever"))), "Era esperado que a exceção  SSLException.class fosse lançada, mas não foi")
chamada antiga: assertTrue(encoding.isPresent())
nova chamada: assertTrue(encoding.isPresent(), "Era esperado verdadeiro, mas " + result228 + " <encoding.isPresent()> é falso")
chamada antiga: assertTrue(encoding.isPresent())
nova chamada: assertTrue(encoding.isPresent(), "Era esperado verdadeiro, mas " + result229 + " <encoding.isPresent()> é falso")
chamada antiga: assertFalse(header.encodingPart().isPresent())
nova chamada: assertFalse(header.encodingPart().isPresent(), "Era esperado falso, mas " + result230 + " <header.encodingPart().isPresent()> é verdadeiro ")
chamada antiga: assertTrue(encoding.isPresent())
nova chamada: assertTrue(encoding.isPresent(), "Era esperado verdadeiro, mas " + result231 + " <encoding.isPresent()> é falso")
chamada antiga: assertThrows(NullPointerException.class, () -> {
    new MockRequestBuilder().withHeader("Content-Type", null).build();
})
nova chamada: assertThrows(NullPointerException.class, () -> {
    new MockRequestBuilder().withHeader("Content-Type", null).build();
}, "Era esperado que a exceção  NullPointerException.class fosse lançada, mas não foi")
chamada antiga: assertTrue(exception.getMessage().contains("No requests exactly matched. Most similar request was:"))
nova chamada: assertTrue(exception.getMessage().contains("No requests exactly matched. Most similar request was:"), "Era esperado verdadeiro, mas " + result232 + " <exception.getMessage().contains('No requests exactly matched. Most similar request was:')> é falso")
chamada antiga: assertThrows(IllegalArgumentException.class, () -> {
    new LimitAndOffsetPaginator<>(Collections.<Void>emptyList(), -1, 3);
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    new LimitAndOffsetPaginator<>(Collections.<Void>emptyList(), -1, 3);
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(IllegalArgumentException.class, () -> {
    new LimitAndOffsetPaginator<>(Collections.<Void>emptyList(), 0, -10);
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    new LimitAndOffsetPaginator<>(Collections.<Void>emptyList(), 0, -10);
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(IllegalArgumentException.class, () -> {
    DateTimeOffset.fromString("101");
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    DateTimeOffset.fromString("101");
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(IllegalArgumentException.class, () -> {
    DateTimeOffset.fromString("101 squillions");
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    DateTimeOffset.fromString("101 squillions");
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: assertNotNull(keyStore)
nova chamada: assertNotNull(keyStore, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(keyStore)
nova chamada: assertNotNull(keyStore, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(keyStore)
nova chamada: assertNotNull(keyStore, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertThrows(IllegalArgumentException.class, () -> {
    KeyStoreSettings trustStoreSettings = new KeyStoreSettings("test-unknownstore", "", "jks");
    trustStoreSettings.loadStore();
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    KeyStoreSettings trustStoreSettings = new KeyStoreSettings("test-unknownstore", "", "jks");
    trustStoreSettings.loadStore();
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: assertTrue(ContentTypes.determineIsTextFromExtension("txt"))
nova chamada: assertTrue(ContentTypes.determineIsTextFromExtension("txt"), "Era esperado verdadeiro, mas " + result233 + " <ContentTypes.determineIsTextFromExtension('txt')> é falso")
chamada antiga: assertTrue(ContentTypes.determineIsTextFromExtension("json"))
nova chamada: assertTrue(ContentTypes.determineIsTextFromExtension("json"), "Era esperado verdadeiro, mas " + result234 + " <ContentTypes.determineIsTextFromExtension('json')> é falso")
chamada antiga: assertTrue(ContentTypes.determineIsTextFromExtension("xml"))
nova chamada: assertTrue(ContentTypes.determineIsTextFromExtension("xml"), "Era esperado verdadeiro, mas " + result235 + " <ContentTypes.determineIsTextFromExtension('xml')> é falso")
chamada antiga: assertTrue(ContentTypes.determineIsTextFromExtension("html"))
nova chamada: assertTrue(ContentTypes.determineIsTextFromExtension("html"), "Era esperado verdadeiro, mas " + result236 + " <ContentTypes.determineIsTextFromExtension('html')> é falso")
chamada antiga: assertTrue(ContentTypes.determineIsTextFromExtension("htm"))
nova chamada: assertTrue(ContentTypes.determineIsTextFromExtension("htm"), "Era esperado verdadeiro, mas " + result237 + " <ContentTypes.determineIsTextFromExtension('htm')> é falso")
chamada antiga: assertTrue(ContentTypes.determineIsTextFromExtension("yaml"))
nova chamada: assertTrue(ContentTypes.determineIsTextFromExtension("yaml"), "Era esperado verdadeiro, mas " + result238 + " <ContentTypes.determineIsTextFromExtension('yaml')> é falso")
chamada antiga: assertTrue(ContentTypes.determineIsTextFromExtension("csv"))
nova chamada: assertTrue(ContentTypes.determineIsTextFromExtension("csv"), "Era esperado verdadeiro, mas " + result239 + " <ContentTypes.determineIsTextFromExtension('csv')> é falso")
chamada antiga: assertFalse(ContentTypes.determineIsTextFromExtension("jpg"))
nova chamada: assertFalse(ContentTypes.determineIsTextFromExtension("jpg"), "Era esperado falso, mas " + result240 + " <ContentTypes.determineIsTextFromExtension('jpg')> é verdadeiro ")
chamada antiga: assertFalse(ContentTypes.determineIsTextFromExtension("png"))
nova chamada: assertFalse(ContentTypes.determineIsTextFromExtension("png"), "Era esperado falso, mas " + result241 + " <ContentTypes.determineIsTextFromExtension('png')> é verdadeiro ")
chamada antiga: assertFalse(ContentTypes.determineIsTextFromExtension(null))
nova chamada: assertFalse(ContentTypes.determineIsTextFromExtension(null), "Era esperado falso, mas " + result242 + " <ContentTypes.determineIsTextFromExtension(null)> é verdadeiro ")
chamada antiga: assertFalse(ContentTypes.determineIsTextFromExtension(""))
nova chamada: assertFalse(ContentTypes.determineIsTextFromExtension(""), "Era esperado falso, mas " + result243 + " <ContentTypes.determineIsTextFromExtension('')> é verdadeiro ")
chamada antiga: assertTrue(ContentTypes.determineIsTextFromMimeType("text/plain"))
nova chamada: assertTrue(ContentTypes.determineIsTextFromMimeType("text/plain"), "Era esperado verdadeiro, mas " + result244 + " <ContentTypes.determineIsTextFromMimeType('text/plain')> é falso")
chamada antiga: assertTrue(ContentTypes.determineIsTextFromMimeType("text/html"))
nova chamada: assertTrue(ContentTypes.determineIsTextFromMimeType("text/html"), "Era esperado verdadeiro, mas " + result245 + " <ContentTypes.determineIsTextFromMimeType('text/html')> é falso")
chamada antiga: assertTrue(ContentTypes.determineIsTextFromMimeType("application/json"))
nova chamada: assertTrue(ContentTypes.determineIsTextFromMimeType("application/json"), "Era esperado verdadeiro, mas " + result246 + " <ContentTypes.determineIsTextFromMimeType('application/json')> é falso")
chamada antiga: assertTrue(ContentTypes.determineIsTextFromMimeType("some-preamble; application/json"))
nova chamada: assertTrue(ContentTypes.determineIsTextFromMimeType("some-preamble; application/json"), "Era esperado verdadeiro, mas " + result247 + " <ContentTypes.determineIsTextFromMimeType('some-preamble; application/json')> é falso")
chamada antiga: assertTrue(ContentTypes.determineIsTextFromMimeType("application/blah.something+json"))
nova chamada: assertTrue(ContentTypes.determineIsTextFromMimeType("application/blah.something+json"), "Era esperado verdadeiro, mas " + result248 + " <ContentTypes.determineIsTextFromMimeType('application/blah.something+json')> é falso")
chamada antiga: assertTrue(ContentTypes.determineIsTextFromMimeType("application/xml"))
nova chamada: assertTrue(ContentTypes.determineIsTextFromMimeType("application/xml"), "Era esperado verdadeiro, mas " + result249 + " <ContentTypes.determineIsTextFromMimeType('application/xml')> é falso")
chamada antiga: assertTrue(ContentTypes.determineIsTextFromMimeType("text/xml"))
nova chamada: assertTrue(ContentTypes.determineIsTextFromMimeType("text/xml"), "Era esperado verdadeiro, mas " + result250 + " <ContentTypes.determineIsTextFromMimeType('text/xml')> é falso")
chamada antiga: assertTrue(ContentTypes.determineIsTextFromMimeType("text/xml; utf-8"))
nova chamada: assertTrue(ContentTypes.determineIsTextFromMimeType("text/xml; utf-8"), "Era esperado verdadeiro, mas " + result251 + " <ContentTypes.determineIsTextFromMimeType('text/xml; utf-8')> é falso")
chamada antiga: assertTrue(ContentTypes.determineIsTextFromMimeType("application/csv"))
nova chamada: assertTrue(ContentTypes.determineIsTextFromMimeType("application/csv"), "Era esperado verdadeiro, mas " + result252 + " <ContentTypes.determineIsTextFromMimeType('application/csv')> é falso")
chamada antiga: assertTrue(ContentTypes.determineIsTextFromMimeType("application/x-www-form-urlencoded"))
nova chamada: assertTrue(ContentTypes.determineIsTextFromMimeType("application/x-www-form-urlencoded"), "Era esperado verdadeiro, mas " + result253 + " <ContentTypes.determineIsTextFromMimeType('application/x-www-form-urlencoded')> é falso")
chamada antiga: assertFalse(ContentTypes.determineIsTextFromMimeType("application/octet-stream"))
nova chamada: assertFalse(ContentTypes.determineIsTextFromMimeType("application/octet-stream"), "Era esperado falso, mas " + result254 + " <ContentTypes.determineIsTextFromMimeType('application/octet-stream')> é verdadeiro ")
chamada antiga: assertFalse(ContentTypes.determineIsTextFromMimeType("image/jpeg"))
nova chamada: assertFalse(ContentTypes.determineIsTextFromMimeType("image/jpeg"), "Era esperado falso, mas " + result255 + " <ContentTypes.determineIsTextFromMimeType('image/jpeg')> é verdadeiro ")
chamada antiga: assertFalse(ContentTypes.determineIsTextFromMimeType("application/pdf"))
nova chamada: assertFalse(ContentTypes.determineIsTextFromMimeType("application/pdf"), "Era esperado falso, mas " + result256 + " <ContentTypes.determineIsTextFromMimeType('application/pdf')> é verdadeiro ")
chamada antiga: assertTrue(ContentTypes.determineIsText("txt", "text/plain"))
nova chamada: assertTrue(ContentTypes.determineIsText("txt", "text/plain"), "Era esperado verdadeiro, mas " + result257 + " <ContentTypes.determineIsText('txt', 'text/plain')> é falso")
chamada antiga: assertTrue(ContentTypes.determineIsText("xml", ""))
nova chamada: assertTrue(ContentTypes.determineIsText("xml", ""), "Era esperado verdadeiro, mas " + result258 + " <ContentTypes.determineIsText('xml', '')> é falso")
chamada antiga: assertTrue(ContentTypes.determineIsText("json", null))
nova chamada: assertTrue(ContentTypes.determineIsText("json", null), "Era esperado verdadeiro, mas " + result259 + " <ContentTypes.determineIsText('json', null)> é falso")
chamada antiga: assertFalse(ContentTypes.determineIsText("png", null))
nova chamada: assertFalse(ContentTypes.determineIsText("png", null), "Era esperado falso, mas " + result260 + " <ContentTypes.determineIsText('png', null)> é verdadeiro ")
chamada antiga: assertFalse(ContentTypes.determineIsText(null, "image/jpeg"))
nova chamada: assertFalse(ContentTypes.determineIsText(null, "image/jpeg"), "Era esperado falso, mas " + result261 + " <ContentTypes.determineIsText(null, 'image/jpeg')> é verdadeiro ")
chamada antiga: assertEquals("/home/bob/myfile.txt", path)
nova chamada: assertEquals("/home/bob/myfile.txt", path, "Era esperado valores iguais, mas  '/home/bob/myfile.txt' é diferente de " + " path")
chamada antiga: assertEquals(Paths.get("C:/Users/bob/myfile.txt"), path)
nova chamada: assertEquals(Paths.get("C:/Users/bob/myfile.txt"), path, "Era esperado valores iguais, mas " + result262 + " <Paths.get('C:/Users/bob/myfile.txt')> é diferente de " + " path")
chamada antiga: assertArrayEquals(empty, concat(empty, empty))
nova chamada: assertArrayEquals(empty, concat(empty, empty), "Era esperado arrays iguais, mas  empty é diferente de " + result263 + " <concat(empty, empty)>")
chamada antiga: assertArrayEquals(new Integer[] { 1, 2 }, result)
nova chamada: assertArrayEquals(new Integer[] { 1, 2 }, result, "Era esperado arrays iguais, mas  new Integer[] { 1, 2 } é diferente de " + " result")
chamada antiga: assertArrayEquals(new Integer[] { 1, 2 }, result)
nova chamada: assertArrayEquals(new Integer[] { 1, 2 }, result, "Era esperado arrays iguais, mas  new Integer[] { 1, 2 } é diferente de " + " result")
chamada antiga: assertArrayEquals(new Integer[] { 1, 2 }, result)
nova chamada: assertArrayEquals(new Integer[] { 1, 2 }, result, "Era esperado arrays iguais, mas  new Integer[] { 1, 2 } é diferente de " + " result")
chamada antiga: assertArrayEquals(new Integer[] { 1, 2 }, result)
nova chamada: assertArrayEquals(new Integer[] { 1, 2 }, result, "Era esperado arrays iguais, mas  new Integer[] { 1, 2 } é diferente de " + " result")
chamada antiga: assertArrayEquals(new Integer[] { 1, 2, 3, 4 }, result)
nova chamada: assertArrayEquals(new Integer[] { 1, 2, 3, 4 }, result, "Era esperado arrays iguais, mas  new Integer[] { 1, 2, 3, 4 } é diferente de " + " result")
chamada antiga: assertArrayEquals(new Integer[] { 1, 2, 3, 4 }, result)
nova chamada: assertArrayEquals(new Integer[] { 1, 2, 3, 4 }, result, "Era esperado arrays iguais, mas  new Integer[] { 1, 2, 3, 4 } é diferente de " + " result")
chamada antiga: assertArrayEquals(new Integer[] { null }, prepend(null, empty))
nova chamada: assertArrayEquals(new Integer[] { null }, prepend(null, empty), "Era esperado arrays iguais, mas  new Integer[] { null } é diferente de " + result264 + " <prepend(null, empty)>")
chamada antiga: assertArrayEquals(new Integer[] { 1 }, result)
nova chamada: assertArrayEquals(new Integer[] { 1 }, result, "Era esperado arrays iguais, mas  new Integer[] { 1 } é diferente de " + " result")
chamada antiga: assertArrayEquals(new Integer[] { null, 1, 2 }, result)
nova chamada: assertArrayEquals(new Integer[] { null, 1, 2 }, result, "Era esperado arrays iguais, mas  new Integer[] { null, 1, 2 } é diferente de " + " result")
chamada antiga: assertArrayEquals(new Integer[] { null, 1, 2 }, result)
nova chamada: assertArrayEquals(new Integer[] { null, 1, 2 }, result, "Era esperado arrays iguais, mas  new Integer[] { null, 1, 2 } é diferente de " + " result")
chamada antiga: assertArrayEquals(new Integer[] { 1, 2, 3 }, result)
nova chamada: assertArrayEquals(new Integer[] { 1, 2, 3 }, result, "Era esperado arrays iguais, mas  new Integer[] { 1, 2, 3 } é diferente de " + " result")
chamada antiga: assertArrayEquals(new Integer[] { 1, 2, 3 }, result)
nova chamada: assertArrayEquals(new Integer[] { 1, 2, 3 }, result, "Era esperado arrays iguais, mas  new Integer[] { 1, 2, 3 } é diferente de " + " result")
chamada antiga: assertEquals(pair(Collections.<Number>emptyList(), Collections.<Integer>emptyList()), splitByType(input, Integer.class))
nova chamada: assertEquals(pair(Collections.<Number>emptyList(), Collections.<Integer>emptyList()), splitByType(input, Integer.class), "Era esperado valores iguais, mas " + result265 + " <pair(Collections.<Number>emptyList(), Collections.<Integer>emptyList())> é diferente de " + result266 + " <splitByType(input, Integer.class)>")
chamada antiga: assertEquals(pair(singletonList(1L), Collections.<Integer>emptyList()), splitByType(input, Integer.class))
nova chamada: assertEquals(pair(singletonList(1L), Collections.<Integer>emptyList()), splitByType(input, Integer.class), "Era esperado valores iguais, mas " + result267 + " <pair(singletonList(1L), Collections.<Integer>emptyList())> é diferente de " + result268 + " <splitByType(input, Integer.class)>")
chamada antiga: assertEquals(pair(Collections.<Number>emptyList(), singletonList(1)), splitByType(input, Integer.class))
nova chamada: assertEquals(pair(Collections.<Number>emptyList(), singletonList(1)), splitByType(input, Integer.class), "Era esperado valores iguais, mas " + result269 + " <pair(Collections.<Number>emptyList(), singletonList(1))> é diferente de " + result270 + " <splitByType(input, Integer.class)>")
chamada antiga: assertEquals(pair(asList(1L, 2L, 3L), asList(1, 2, 3)), splitByType(input, Integer.class))
nova chamada: assertEquals(pair(asList(1L, 2L, 3L), asList(1, 2, 3)), splitByType(input, Integer.class), "Era esperado valores iguais, mas " + result271 + " <pair(asList(1L, 2L, 3L), asList(1, 2, 3))> é diferente de " + result272 + " <splitByType(input, Integer.class)>")
chamada antiga: assertThrows(IllegalArgumentException.class, () -> {
    PathTemplate template = new PathTemplate("/things/{id}");
    template.parse("/things/stuff/11-22-33");
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    PathTemplate template = new PathTemplate("/things/{id}");
    template.parse("/things/stuff/11-22-33");
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(IllegalArgumentException.class, () -> {
    PathTemplate template = new PathTemplate("/things/{id}/otherthings/{subId}");
    template.render(new PathParams().add("id", "123"));
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    PathTemplate template = new PathTemplate("/things/{id}/otherthings/{subId}");
    template.render(new PathParams().add("id", "123"));
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(IllegalArgumentException.class, () -> {
    PathTemplate template = new PathTemplate("/things/{id}/**");
    template.render(new PathParams().add("id", "123"));
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    PathTemplate template = new PathTemplate("/things/{id}/**");
    template.render(new PathParams().add("id", "123"));
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: assertTrue(PathTemplate.couldBePathTemplate("/things/{id}"))
nova chamada: assertTrue(PathTemplate.couldBePathTemplate("/things/{id}"), "Era esperado verdadeiro, mas " + result273 + " <PathTemplate.couldBePathTemplate('/things/{id}')> é falso")
chamada antiga: assertTrue(PathTemplate.couldBePathTemplate("/things/**"))
nova chamada: assertTrue(PathTemplate.couldBePathTemplate("/things/**"), "Era esperado verdadeiro, mas " + result274 + " <PathTemplate.couldBePathTemplate('/things/**')> é falso")
chamada antiga: assertTrue(PathTemplate.couldBePathTemplate("/things/{id}/stuff"))
nova chamada: assertTrue(PathTemplate.couldBePathTemplate("/things/{id}/stuff"), "Era esperado verdadeiro, mas " + result275 + " <PathTemplate.couldBePathTemplate('/things/{id}/stuff')> é falso")
chamada antiga: assertFalse(PathTemplate.couldBePathTemplate("/things/in/path"))
nova chamada: assertFalse(PathTemplate.couldBePathTemplate("/things/in/path"), "Era esperado falso, mas " + result276 + " <PathTemplate.couldBePathTemplate('/things/in/path')> é verdadeiro ")
chamada antiga: assertFalse(PathTemplate.couldBePathTemplate("/thing"))
nova chamada: assertFalse(PathTemplate.couldBePathTemplate("/thing"), "Era esperado falso, mas " + result277 + " <PathTemplate.couldBePathTemplate('/thing')> é verdadeiro ")
chamada antiga: assertFalse(jettySettings.getAcceptors().isPresent())
nova chamada: assertFalse(jettySettings.getAcceptors().isPresent(), "Era esperado falso, mas " + result278 + " <jettySettings.getAcceptors().isPresent()> é verdadeiro ")
chamada antiga: assertFalse(jettySettings.getAcceptQueueSize().isPresent())
nova chamada: assertFalse(jettySettings.getAcceptQueueSize().isPresent(), "Era esperado falso, mas " + result279 + " <jettySettings.getAcceptQueueSize().isPresent()> é verdadeiro ")
chamada antiga: assertFalse(jettySettings.getRequestHeaderSize().isPresent())
nova chamada: assertFalse(jettySettings.getRequestHeaderSize().isPresent(), "Era esperado falso, mas " + result280 + " <jettySettings.getRequestHeaderSize().isPresent()> é verdadeiro ")
chamada antiga: assertFalse(jettySettings.getStopTimeout().isPresent())
nova chamada: assertFalse(jettySettings.getStopTimeout().isPresent(), "Era esperado falso, mas " + result281 + " <jettySettings.getStopTimeout().isPresent()> é verdadeiro ")
chamada antiga: assertFalse(jettySettings.getIdleTimeout().isPresent())
nova chamada: assertFalse(jettySettings.getIdleTimeout().isPresent(), "Era esperado falso, mas " + result282 + " <jettySettings.getIdleTimeout().isPresent()> é verdadeiro ")
chamada antiga: assertTrue(optional.isPresent())
nova chamada: assertTrue(optional.isPresent(), "Era esperado verdadeiro, mas " + result283 + " <optional.isPresent()> é falso")
chamada antiga: assertEquals(Integer.valueOf(number), optional.get())
nova chamada: assertEquals(Integer.valueOf(number), optional.get(), "Era esperado valores iguais, mas " + result284 + " <Integer.valueOf(number)> é diferente de " + result285 + " <optional.get()>")
chamada antiga: assertTrue(optional.isPresent())
nova chamada: assertTrue(optional.isPresent(), "Era esperado verdadeiro, mas " + result286 + " <optional.isPresent()> é falso")
chamada antiga: assertEquals(Long.valueOf(longNumber), optional.get())
nova chamada: assertEquals(Long.valueOf(longNumber), optional.get(), "Era esperado valores iguais, mas " + result287 + " <Long.valueOf(longNumber)> é diferente de " + result288 + " <optional.get()>")
chamada antiga: assertThrows(RuntimeException.class, () -> {
    SingleRootFileSource fileSource = new SingleRootFileSource("src/test/resources/filesource/one");
    fileSource.listFilesRecursively();
})
nova chamada: assertThrows(RuntimeException.class, () -> {
    SingleRootFileSource fileSource = new SingleRootFileSource("src/test/resources/filesource/one");
    fileSource.listFilesRecursively();
}, "Era esperado que a exceção  RuntimeException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(RuntimeException.class, () -> {
    SingleRootFileSource fileSource = new SingleRootFileSource("src/test/resources/filesource/one");
    fileSource.writeTextFile("thing", "stuff");
})
nova chamada: assertThrows(RuntimeException.class, () -> {
    SingleRootFileSource fileSource = new SingleRootFileSource("src/test/resources/filesource/one");
    fileSource.writeTextFile("thing", "stuff");
}, "Era esperado que a exceção  RuntimeException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(NotAuthorisedException.class, () -> {
    SingleRootFileSource fileSource = new SingleRootFileSource("src/test/resources/security-filesource/root");
    fileSource.getBinaryFileNamed("../rootdir/file.json");
})
nova chamada: assertThrows(NotAuthorisedException.class, () -> {
    SingleRootFileSource fileSource = new SingleRootFileSource("src/test/resources/security-filesource/root");
    fileSource.getBinaryFileNamed("../rootdir/file.json");
}, "Era esperado que a exceção  NotAuthorisedException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(NotAuthorisedException.class, () -> {
    SingleRootFileSource fileSource = new SingleRootFileSource(ROOT_PATH);
    fileSource.writeTextFile("..", "stuff");
})
nova chamada: assertThrows(NotAuthorisedException.class, () -> {
    SingleRootFileSource fileSource = new SingleRootFileSource(ROOT_PATH);
    fileSource.writeTextFile("..", "stuff");
}, "Era esperado que a exceção  NotAuthorisedException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(NotAuthorisedException.class, () -> {
    SingleRootFileSource fileSource = new SingleRootFileSource(ROOT_PATH);
    String badPath = Paths.get("..", "not-under-root").toAbsolutePath().toString();
    fileSource.writeTextFile(badPath, "stuff");
})
nova chamada: assertThrows(NotAuthorisedException.class, () -> {
    SingleRootFileSource fileSource = new SingleRootFileSource(ROOT_PATH);
    String badPath = Paths.get("..", "not-under-root").toAbsolutePath().toString();
    fileSource.writeTextFile(badPath, "stuff");
}, "Era esperado que a exceção  NotAuthorisedException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(NotAuthorisedException.class, () -> {
    SingleRootFileSource fileSource = new SingleRootFileSource(ROOT_PATH);
    fileSource.writeBinaryFile("..", "stuff".getBytes());
})
nova chamada: assertThrows(NotAuthorisedException.class, () -> {
    SingleRootFileSource fileSource = new SingleRootFileSource(ROOT_PATH);
    fileSource.writeBinaryFile("..", "stuff".getBytes());
}, "Era esperado que a exceção  NotAuthorisedException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(NotAuthorisedException.class, () -> {
    SingleRootFileSource fileSource = new SingleRootFileSource(ROOT_PATH);
    String badPath = Paths.get("..", "not-under-root").toAbsolutePath().toString();
    fileSource.writeBinaryFile(badPath, "stuff".getBytes());
})
nova chamada: assertThrows(NotAuthorisedException.class, () -> {
    SingleRootFileSource fileSource = new SingleRootFileSource(ROOT_PATH);
    String badPath = Paths.get("..", "not-under-root").toAbsolutePath().toString();
    fileSource.writeBinaryFile(badPath, "stuff".getBytes());
}, "Era esperado que a exceção  NotAuthorisedException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(NotAuthorisedException.class, () -> {
    SingleRootFileSource fileSource = new SingleRootFileSource(ROOT_PATH);
    String badPath = Paths.get("..", "not-under-root").toAbsolutePath().toString();
    fileSource.deleteFile(badPath);
})
nova chamada: assertThrows(NotAuthorisedException.class, () -> {
    SingleRootFileSource fileSource = new SingleRootFileSource(ROOT_PATH);
    String badPath = Paths.get("..", "not-under-root").toAbsolutePath().toString();
    fileSource.deleteFile(badPath);
}, "Era esperado que a exceção  NotAuthorisedException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(NotAuthorisedException.class, () -> {
    SingleRootFileSource fileSource = new SingleRootFileSource(ROOT_PATH);
    fileSource.getBinaryFileNamed("../illegal.file");
})
nova chamada: assertThrows(NotAuthorisedException.class, () -> {
    SingleRootFileSource fileSource = new SingleRootFileSource(ROOT_PATH);
    fileSource.getBinaryFileNamed("../illegal.file");
}, "Era esperado que a exceção  NotAuthorisedException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(NotAuthorisedException.class, () -> {
    SingleRootFileSource fileSource = new SingleRootFileSource(ROOT_PATH);
    fileSource.getTextFileNamed("../illegal.file");
})
nova chamada: assertThrows(NotAuthorisedException.class, () -> {
    SingleRootFileSource fileSource = new SingleRootFileSource(ROOT_PATH);
    fileSource.getTextFileNamed("../illegal.file");
}, "Era esperado que a exceção  NotAuthorisedException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(NotAuthorisedException.class, () -> {
    SingleRootFileSource fileSource = new SingleRootFileSource(ROOT_PATH);
    String badPath = new File(ROOT_PATH, "../illegal.file").getCanonicalPath();
    fileSource.getBinaryFileNamed(badPath);
})
nova chamada: assertThrows(NotAuthorisedException.class, () -> {
    SingleRootFileSource fileSource = new SingleRootFileSource(ROOT_PATH);
    String badPath = new File(ROOT_PATH, "../illegal.file").getCanonicalPath();
    fileSource.getBinaryFileNamed(badPath);
}, "Era esperado que a exceção  NotAuthorisedException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(NotAuthorisedException.class, () -> {
    SingleRootFileSource fileSource = new SingleRootFileSource(ROOT_PATH);
    String badPath = new File(ROOT_PATH, "../illegal.file").getCanonicalPath();
    fileSource.getTextFileNamed(badPath);
})
nova chamada: assertThrows(NotAuthorisedException.class, () -> {
    SingleRootFileSource fileSource = new SingleRootFileSource(ROOT_PATH);
    String badPath = new File(ROOT_PATH, "../illegal.file").getCanonicalPath();
    fileSource.getTextFileNamed(badPath);
}, "Era esperado que a exceção  NotAuthorisedException.class fosse lançada, mas não foi")
chamada antiga: assertTrue(Limit.UNLIMITED.isUnlimited())
nova chamada: assertTrue(Limit.UNLIMITED.isUnlimited(), "Era esperado verdadeiro, mas " + result289 + " <Limit.UNLIMITED.isUnlimited()> é falso")
chamada antiga: assertThrows(UnsupportedOperationException.class, () -> {
    fileSource.writeTextFile("filename", "filecontents");
})
nova chamada: assertThrows(UnsupportedOperationException.class, () -> {
    fileSource.writeTextFile("filename", "filecontents");
}, "Era esperado que a exceção  UnsupportedOperationException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(UnsupportedOperationException.class, fileSource::createIfNecessary)
nova chamada: assertThrows(UnsupportedOperationException.class, fileSource::createIfNecessary, "Era esperado que a exceção  UnsupportedOperationException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(IllegalArgumentException.class, () -> {
    ProxySettings proxySettings = ProxySettings.fromString(PROXYVIA_URL + ":80a");
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    ProxySettings proxySettings = ProxySettings.fromString(PROXYVIA_URL + ":80a");
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(IllegalArgumentException.class, () -> {
    ProxySettings proxySettings = ProxySettings.fromString("https://" + PROXYVIA_URL_WITH_PORT);
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    ProxySettings proxySettings = ProxySettings.fromString("https://" + PROXYVIA_URL_WITH_PORT);
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(IllegalArgumentException.class, () -> {
    ProxySettings proxySettings = ProxySettings.fromString("ul:invalid:80");
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    ProxySettings proxySettings = ProxySettings.fromString("ul:invalid:80");
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: assertEquals(3, proxyingService.getStubMappings().size())
nova chamada: assertEquals(3, proxyingService.getStubMappings().size(), "Era esperado valores iguais, mas  3 é diferente de " + result290 + " <proxyingService.getStubMappings().size()>")
chamada antiga: assertFalse(wireMockConfiguration.getStores().getSettingsStore().get().getProxyPassThrough())
nova chamada: assertFalse(wireMockConfiguration.getStores().getSettingsStore().get().getProxyPassThrough(), "Era esperado falso, mas " + result291 + " <wireMockConfiguration.getStores().getSettingsStore().get().getProxyPassThrough()> é verdadeiro ")
chamada antiga: assertThrows(IllegalArgumentException.class, () -> {
    get(urlEqualTo("/some/resource")).willReturn(aResponse()).inScenario(null);
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    get(urlEqualTo("/some/resource")).willReturn(aResponse()).inScenario(null);
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(ClientError.class, () -> resetScenario("non-exist"))
nova chamada: assertThrows(ClientError.class, () -> resetScenario("non-exist"), "Era esperado que a exceção  ClientError.class fosse lançada, mas não foi")
chamada antiga: assertThrows(ClientError.class, () -> setScenarioState("set-me", "non-exist"))
nova chamada: assertThrows(ClientError.class, () -> setScenarioState("set-me", "non-exist"), "Era esperado que a exceção  ClientError.class fosse lançada, mas não foi")
chamada antiga: assertEquals(stubMapping, result)
nova chamada: assertEquals(stubMapping, result, "Era esperado valores iguais, mas  stubMapping é diferente de " + " result")
chamada antiga: assertEquals(stubMapping, result)
nova chamada: assertEquals(stubMapping, result, "Era esperado valores iguais, mas  stubMapping é diferente de " + " result")
chamada antiga: assertEquals("/?transformed=nonglobal", result.getRequest().getUrl())
nova chamada: assertEquals("/?transformed=nonglobal", result.getRequest().getUrl(), "Era esperado valores iguais, mas  '/?transformed=nonglobal' é diferente de " + result292 + " <result.getRequest().getUrl()>")
chamada antiga: assertEquals("/?transformed=global", result.getRequest().getUrl())
nova chamada: assertEquals("/?transformed=global", result.getRequest().getUrl(), "Era esperado valores iguais, mas  '/?transformed=global' é diferente de " + result293 + " <result.getRequest().getUrl()>")
chamada antiga: assertEquals(FULL, SnapshotOutputFormatter.fromString(null))
nova chamada: assertEquals(FULL, SnapshotOutputFormatter.fromString(null), "Era esperado valores iguais, mas  FULL é diferente de " + result294 + " <SnapshotOutputFormatter.fromString(null)>")
chamada antiga: assertThrows(IllegalArgumentException.class, () -> {
    SnapshotOutputFormatter.fromString("invalid output format");
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    SnapshotOutputFormatter.fromString("invalid output format");
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: assertEquals(FULL, SnapshotOutputFormatter.fromString("full"))
nova chamada: assertEquals(FULL, SnapshotOutputFormatter.fromString("full"), "Era esperado valores iguais, mas  FULL é diferente de " + result295 + " <SnapshotOutputFormatter.fromString('full')>")
chamada antiga: assertEquals(IDS, SnapshotOutputFormatter.fromString("ids"))
nova chamada: assertEquals(IDS, SnapshotOutputFormatter.fromString("ids"), "Era esperado valores iguais, mas  IDS é diferente de " + result296 + " <SnapshotOutputFormatter.fromString('ids')>")
chamada antiga: assertEquals(expected.build(), new RequestPatternTransformer(null, null).apply(request).build())
nova chamada: assertEquals(expected.build(), new RequestPatternTransformer(null, null).apply(request).build(), "Era esperado valores iguais, mas " + result297 + " <expected.build()> é diferente de " + result298 + " <new RequestPatternTransformer(null, null).apply(request).build()>")
chamada antiga: assertEquals(expected.build(), new RequestPatternTransformer(headers, null).apply(request).build())
nova chamada: assertEquals(expected.build(), new RequestPatternTransformer(headers, null).apply(request).build(), "Era esperado valores iguais, mas " + result299 + " <expected.build()> é diferente de " + result300 + " <new RequestPatternTransformer(headers, null).apply(request).build()>")
chamada antiga: assertEquals(new ResponseDefinitionBodyMatcher(Long.MAX_VALUE, Long.MAX_VALUE), matcher)
nova chamada: assertEquals(new ResponseDefinitionBodyMatcher(Long.MAX_VALUE, Long.MAX_VALUE), matcher, "Era esperado valores iguais, mas  new ResponseDefinitionBodyMatcher(Long.MAX_VALUE, Long.MAX_VALUE) é diferente de " + " matcher")
chamada antiga: assertEquals(new ResponseDefinitionBodyMatcher(100, Long.MAX_VALUE), matcher)
nova chamada: assertEquals(new ResponseDefinitionBodyMatcher(100, Long.MAX_VALUE), matcher, "Era esperado valores iguais, mas  new ResponseDefinitionBodyMatcher(100, Long.MAX_VALUE) é diferente de " + " matcher")
chamada antiga: assertEquals(new ResponseDefinitionBodyMatcher(100, 10), matcher)
nova chamada: assertEquals(new ResponseDefinitionBodyMatcher(100, 10), matcher, "Era esperado valores iguais, mas  new ResponseDefinitionBodyMatcher(100, 10) é diferente de " + " matcher")
chamada antiga: assertFalse(matcher.match(new ResponseDefinition()).isExactMatch())
nova chamada: assertFalse(matcher.match(new ResponseDefinition()).isExactMatch(), "Era esperado falso, mas " + result301 + " <matcher.match(new ResponseDefinition()).isExactMatch()> é verdadeiro ")
chamada antiga: assertTrue(matcher.match(textResponseDefinition("a")).isExactMatch())
nova chamada: assertTrue(matcher.match(textResponseDefinition("a")).isExactMatch(), "Era esperado verdadeiro, mas " + result302 + " <matcher.match(textResponseDefinition('a')).isExactMatch()> é falso")
chamada antiga: assertTrue(matcher.match(binaryResponseDefinition(new byte[] { 0x1 })).isExactMatch())
nova chamada: assertTrue(matcher.match(binaryResponseDefinition(new byte[] { 0x1 })).isExactMatch(), "Era esperado verdadeiro, mas " + result303 + " <matcher.match(binaryResponseDefinition(new byte[] { 0x1 })).isExactMatch()> é falso")
chamada antiga: assertFalse(matcher.match(textResponseDefinition("f")).isExactMatch())
nova chamada: assertFalse(matcher.match(textResponseDefinition("f")).isExactMatch(), "Era esperado falso, mas " + result304 + " <matcher.match(textResponseDefinition('f')).isExactMatch()> é verdadeiro ")
chamada antiga: assertFalse(matcher.match(textResponseDefinition("fo")).isExactMatch())
nova chamada: assertFalse(matcher.match(textResponseDefinition("fo")).isExactMatch(), "Era esperado falso, mas " + result305 + " <matcher.match(textResponseDefinition('fo')).isExactMatch()> é verdadeiro ")
chamada antiga: assertTrue(matcher.match(textResponseDefinition("foo")).isExactMatch())
nova chamada: assertTrue(matcher.match(textResponseDefinition("foo")).isExactMatch(), "Era esperado verdadeiro, mas " + result306 + " <matcher.match(textResponseDefinition('foo')).isExactMatch()> é falso")
chamada antiga: assertFalse(matcher.match(binaryResponseDefinition(new byte[] { 0x1 })).isExactMatch())
nova chamada: assertFalse(matcher.match(binaryResponseDefinition(new byte[] { 0x1 })).isExactMatch(), "Era esperado falso, mas " + result307 + " <matcher.match(binaryResponseDefinition(new byte[] { 0x1 })).isExactMatch()> é verdadeiro ")
chamada antiga: assertFalse(matcher.match(binaryResponseDefinition(new byte[] { 0x1, 0xc })).isExactMatch())
nova chamada: assertFalse(matcher.match(binaryResponseDefinition(new byte[] { 0x1, 0xc })).isExactMatch(), "Era esperado falso, mas " + result308 + " <matcher.match(binaryResponseDefinition(new byte[] { 0x1, 0xc })).isExactMatch()> é verdadeiro ")
chamada antiga: assertTrue(matcher.match(binaryResponseDefinition(new byte[] { 0x1, 0xc, 0xf })).isExactMatch())
nova chamada: assertTrue(matcher.match(binaryResponseDefinition(new byte[] { 0x1, 0xc, 0xf })).isExactMatch(), "Era esperado verdadeiro, mas " + result309 + " <matcher.match(binaryResponseDefinition(new byte[] { 0x1, 0xc, 0xf })).isExactMatch()> é falso")
chamada antiga: assertEquals(responseDefinition().withStatus(401).build(), aTransformer().apply(response))
nova chamada: assertEquals(responseDefinition().withStatus(401).build(), aTransformer().apply(response), "Era esperado valores iguais, mas " + result310 + " <responseDefinition().withStatus(401).build()> é diferente de " + result311 + " <aTransformer().apply(response)>")
chamada antiga: assertEquals(expected, aTransformer().apply(response))
nova chamada: assertEquals(expected, aTransformer().apply(response), "Era esperado valores iguais, mas  expected é diferente de " + result312 + " <aTransformer().apply(response)>")
chamada antiga: assertEquals(expected, aTransformer().apply(response))
nova chamada: assertEquals(expected, aTransformer().apply(response), "Era esperado valores iguais, mas  expected é diferente de " + result313 + " <aTransformer().apply(response)>")
chamada antiga: assertEquals(expected, aTransformer().apply(response))
nova chamada: assertEquals(expected, aTransformer().apply(response), "Era esperado valores iguais, mas  expected é diferente de " + result314 + " <aTransformer().apply(response)>")
chamada antiga: assertEquals(expected, aTransformer().apply(response))
nova chamada: assertEquals(expected, aTransformer().apply(response), "Era esperado valores iguais, mas  expected é diferente de " + result315 + " <aTransformer().apply(response)>")
chamada antiga: assertTrue(filters.apply(serveEvent))
nova chamada: assertTrue(filters.apply(serveEvent), "Era esperado verdadeiro, mas " + result316 + " <filters.apply(serveEvent)> é falso")
chamada antiga: assertTrue(filters.apply(serveEvent))
nova chamada: assertTrue(filters.apply(serveEvent), "Era esperado verdadeiro, mas " + result317 + " <filters.apply(serveEvent)> é falso")
chamada antiga: assertFalse(filters.apply(serveEvent))
nova chamada: assertFalse(filters.apply(serveEvent), "Era esperado falso, mas " + result318 + " <filters.apply(serveEvent)> é verdadeiro ")
chamada antiga: assertTrue(filters.apply(proxiedServeEvent(request)))
nova chamada: assertTrue(filters.apply(proxiedServeEvent(request)), "Era esperado verdadeiro, mas " + result319 + " <filters.apply(proxiedServeEvent(request))> é falso")
chamada antiga: assertTrue(filters.apply(proxiedServeEvent(request.url("/bar"))))
nova chamada: assertTrue(filters.apply(proxiedServeEvent(request.url("/bar"))), "Era esperado verdadeiro, mas " + result320 + " <filters.apply(proxiedServeEvent(request.url('/bar')))> é falso")
chamada antiga: assertFalse(filters.apply(proxiedServeEvent(request.method(POST))))
nova chamada: assertFalse(filters.apply(proxiedServeEvent(request.method(POST))), "Era esperado falso, mas " + result321 + " <filters.apply(proxiedServeEvent(request.method(POST)))> é verdadeiro ")
chamada antiga: assertTrue(filters.apply(proxiedServeEvent(ids.get(0))))
nova chamada: assertTrue(filters.apply(proxiedServeEvent(ids.get(0))), "Era esperado verdadeiro, mas " + result322 + " <filters.apply(proxiedServeEvent(ids.get(0)))> é falso")
chamada antiga: assertTrue(filters.apply(proxiedServeEvent(ids.get(1))))
nova chamada: assertTrue(filters.apply(proxiedServeEvent(ids.get(1))), "Era esperado verdadeiro, mas " + result323 + " <filters.apply(proxiedServeEvent(ids.get(1)))> é falso")
chamada antiga: assertFalse(filters.apply(proxiedServeEvent(UUID.fromString("00000000-0000-0000-0000-000000000002"))))
nova chamada: assertFalse(filters.apply(proxiedServeEvent(UUID.fromString("00000000-0000-0000-0000-000000000002"))), "Era esperado falso, mas " + result324 + " <filters.apply(proxiedServeEvent(UUID.fromString('00000000-0000-0000-0000-000000000002')))> é verdadeiro ")
chamada antiga: assertTrue(filters.apply(proxiedServeEvent(request)))
nova chamada: assertTrue(filters.apply(proxiedServeEvent(request)), "Era esperado verdadeiro, mas " + result325 + " <filters.apply(proxiedServeEvent(request))> é falso")
chamada antiga: assertFalse(filters.apply(proxiedServeEvent(request.url("/bar"))))
nova chamada: assertFalse(filters.apply(proxiedServeEvent(request.url("/bar"))), "Era esperado falso, mas " + result326 + " <filters.apply(proxiedServeEvent(request.url('/bar')))> é verdadeiro ")
chamada antiga: assertFalse(filters.apply(proxiedServeEvent(request.method(POST))))
nova chamada: assertFalse(filters.apply(proxiedServeEvent(request.method(POST))), "Era esperado falso, mas " + result327 + " <filters.apply(proxiedServeEvent(request.method(POST)))> é verdadeiro ")
chamada antiga: assertTrue(filters.apply(proxiedServeEvent(ids.get(0), request)))
nova chamada: assertTrue(filters.apply(proxiedServeEvent(ids.get(0), request)), "Era esperado verdadeiro, mas " + result328 + " <filters.apply(proxiedServeEvent(ids.get(0), request))> é falso")
chamada antiga: assertFalse(filters.apply(proxiedServeEvent(UUID.fromString("00000000-0000-0000-0000-000000000002"), request)))
nova chamada: assertFalse(filters.apply(proxiedServeEvent(UUID.fromString("00000000-0000-0000-0000-000000000002"), request)), "Era esperado falso, mas " + result329 + " <filters.apply(proxiedServeEvent(UUID.fromString('00000000-0000-0000-0000-000000000002'), request))> é verdadeiro ")
chamada antiga: assertFalse(filters.apply(proxiedServeEvent(ids.get(0), request.method(POST))))
nova chamada: assertFalse(filters.apply(proxiedServeEvent(ids.get(0), request.method(POST))), "Era esperado falso, mas " + result330 + " <filters.apply(proxiedServeEvent(ids.get(0), request.method(POST)))> é verdadeiro ")
chamada antiga: assertNotNull(output)
nova chamada: assertNotNull(output, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(output.length() > 0)
nova chamada: assertTrue(output.length() > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNull(output)
nova chamada: assertNull(output, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals("[ERROR: Access to TEST_VAR is denied]", value)
nova chamada: assertEquals("[ERROR: Access to TEST_VAR is denied]", value, "Era esperado valores iguais, mas  '[ERROR: Access to TEST_VAR is denied]' é diferente de " + " value")
chamada antiga: assertEquals("[ERROR: The key cannot be empty]", value)
nova chamada: assertEquals("[ERROR: The key cannot be empty]", value, "Era esperado valores iguais, mas  '[ERROR: The key cannot be empty]' é diferente de " + " value")
chamada antiga: assertEquals("aaa", System.getProperty("test.key"))
nova chamada: assertEquals("aaa", System.getProperty("test.key"), "Era esperado valores iguais, mas  'aaa' é diferente de " + result331 + " <System.getProperty('test.key')>")
chamada antiga: assertEquals("aaa", value)
nova chamada: assertEquals("aaa", value, "Era esperado valores iguais, mas  'aaa' é diferente de " + " value")
chamada antiga: assertEquals("[ERROR: Access to test.key is denied]", value)
nova chamada: assertEquals("[ERROR: Access to test.key is denied]", value, "Era esperado valores iguais, mas  '[ERROR: Access to test.key is denied]' é diferente de " + " value")
chamada antiga: assertNull(output)
nova chamada: assertNull(output, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertTrue(authoriser.isPermitted("allowed_key_1"))
nova chamada: assertTrue(authoriser.isPermitted("allowed_key_1"), "Era esperado verdadeiro, mas " + result332 + " <authoriser.isPermitted('allowed_key_1')> é falso")
chamada antiga: assertTrue(authoriser.isPermitted("ALLOWED_KEY_2"))
nova chamada: assertTrue(authoriser.isPermitted("ALLOWED_KEY_2"), "Era esperado verdadeiro, mas " + result333 + " <authoriser.isPermitted('ALLOWED_KEY_2')> é falso")
chamada antiga: assertTrue(authoriser.isPermitted("permitted_key_3"))
nova chamada: assertTrue(authoriser.isPermitted("permitted_key_3"), "Era esperado verdadeiro, mas " + result334 + " <authoriser.isPermitted('permitted_key_3')> é falso")
chamada antiga: assertFalse(authoriser.isPermitted("forbidden_key_1"))
nova chamada: assertFalse(authoriser.isPermitted("forbidden_key_1"), "Era esperado falso, mas " + result335 + " <authoriser.isPermitted('forbidden_key_1')> é verdadeiro ")
chamada antiga: assertFalse(authoriser.isPermitted("notallowed_key_2"))
nova chamada: assertFalse(authoriser.isPermitted("notallowed_key_2"), "Era esperado falso, mas " + result336 + " <authoriser.isPermitted('notallowed_key_2')> é verdadeiro ")
chamada antiga: assertFalse(authoriser.isPermitted("notpermitted_key_3"))
nova chamada: assertFalse(authoriser.isPermitted("notpermitted_key_3"), "Era esperado falso, mas " + result337 + " <authoriser.isPermitted('notpermitted_key_3')> é verdadeiro ")
chamada antiga: assertTrue(authoriser.isPermitted("wiremock_key_1"))
nova chamada: assertTrue(authoriser.isPermitted("wiremock_key_1"), "Era esperado verdadeiro, mas " + result338 + " <authoriser.isPermitted('wiremock_key_1')> é falso")
chamada antiga: assertTrue(authoriser.isPermitted("wiremock.thing.2"))
nova chamada: assertTrue(authoriser.isPermitted("wiremock.thing.2"), "Era esperado verdadeiro, mas " + result339 + " <authoriser.isPermitted('wiremock.thing.2')> é falso")
chamada antiga: assertFalse(authoriser.isPermitted("notallowed_key_2"))
nova chamada: assertFalse(authoriser.isPermitted("notallowed_key_2"), "Era esperado falso, mas " + result340 + " <authoriser.isPermitted('notallowed_key_2')> é verdadeiro ")
chamada antiga: assertThrows(IllegalArgumentException.class, () -> {
    new WireMockServer(wireMockConfig().dynamicPort().extensions(ExampleTransformer.class, AnotherExampleTransformer.class));
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    new WireMockServer(wireMockConfig().dynamicPort().extensions(ExampleTransformer.class, AnotherExampleTransformer.class));
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: assertNotNull(pojo)
nova chamada: assertNotNull(pojo, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(pojo)
nova chamada: assertNotNull(pojo, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(pojo)
nova chamada: assertNotNull(pojo, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(response.equals(copiedResponse))
nova chamada: assertTrue(response.equals(copiedResponse), "Era esperado verdadeiro, mas " + result341 + " <response.equals(copiedResponse)> é falso")
chamada antiga: assertTrue(responseDefinition.specifiesBodyFile())
nova chamada: assertTrue(responseDefinition.specifiesBodyFile(), "Era esperado verdadeiro, mas " + result342 + " <responseDefinition.specifiesBodyFile()> é falso")
chamada antiga: assertFalse(responseDefinition.specifiesBodyContent())
nova chamada: assertFalse(responseDefinition.specifiesBodyContent(), "Era esperado falso, mas " + result343 + " <responseDefinition.specifiesBodyContent()> é verdadeiro ")
chamada antiga: assertFalse(responseDefinition.specifiesBodyFile())
nova chamada: assertFalse(responseDefinition.specifiesBodyFile(), "Era esperado falso, mas " + result344 + " <responseDefinition.specifiesBodyFile()> é verdadeiro ")
chamada antiga: assertTrue(responseDefinition.specifiesBodyContent())
nova chamada: assertTrue(responseDefinition.specifiesBodyContent(), "Era esperado verdadeiro, mas " + result345 + " <responseDefinition.specifiesBodyContent()> é falso")
chamada antiga: assertNull(response.content())
nova chamada: assertNull(response.content(), "Era esperado nulo, mas " + result346 + " <response.content()> não é nulo")
chamada antiga: assertThrows(IllegalStateException.class, () -> {
    createServer(wireMockConfig().port(Network.findFreePort())).port();
})
nova chamada: assertThrows(IllegalStateException.class, () -> {
    createServer(wireMockConfig().port(Network.findFreePort())).port();
}, "Era esperado que a exceção  IllegalStateException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(IllegalStateException.class, () -> {
    createServer(wireMockConfig().httpsPort(Network.findFreePort())).httpsPort();
})
nova chamada: assertThrows(IllegalStateException.class, () -> {
    createServer(wireMockConfig().httpsPort(Network.findFreePort())).httpsPort();
}, "Era esperado que a exceção  IllegalStateException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(IllegalStateException.class, () -> {
    WireMockServer wireMockServer = createServer(wireMockConfig().port(Network.findFreePort()));
    wireMockServer.start();
    wireMockServer.httpsPort();
})
nova chamada: assertThrows(IllegalStateException.class, () -> {
    WireMockServer wireMockServer = createServer(wireMockConfig().port(Network.findFreePort()));
    wireMockServer.start();
    wireMockServer.httpsPort();
}, "Era esperado que a exceção  IllegalStateException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(IOException.class, () -> {
    new WireMockServer(options().enableBrowserProxying(true).caKeystorePath(Files.createTempFile("notakeystore", "jks").toString()));
})
nova chamada: assertThrows(IOException.class, () -> {
    new WireMockServer(options().enableBrowserProxying(true).caKeystorePath(Files.createTempFile("notakeystore", "jks").toString()));
}, "Era esperado que a exceção  IOException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(FatalStartupException.class, new WireMockServer(options().enableBrowserProxying(true).caKeystorePath(emptyKeyStore().toString()))::start)
nova chamada: assertThrows(FatalStartupException.class, new WireMockServer(options().enableBrowserProxying(true).caKeystorePath(emptyKeyStore().toString()))::start, "Era esperado que a exceção  FatalStartupException.class fosse lançada, mas não foi")
chamada antiga: assertEquals(200, certResponse.statusCode())
nova chamada: assertEquals(200, certResponse.statusCode(), "Era esperado valores iguais, mas  200 é diferente de " + result347 + " <certResponse.statusCode()>")
chamada antiga: assertEquals("application/x-pem-file", certResponse.firstHeader("Content-Type"))
nova chamada: assertEquals("application/x-pem-file", certResponse.firstHeader("Content-Type"), "Era esperado valores iguais, mas  'application/x-pem-file' é diferente de " + result348 + " <certResponse.firstHeader('Content-Type')>")
chamada antiga: assertEquals(keyStore.getCertificateAuthority().certificateChain()[0], cert)
nova chamada: assertEquals(keyStore.getCertificateAuthority().certificateChain()[0], cert, "Era esperado valores iguais, mas  keyStore.getCertificateAuthority().certificateChain()[0] é diferente de " + " cert")
chamada antiga: assertNotNull(wmRuntimeInfo)
nova chamada: assertNotNull(wmRuntimeInfo, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(wmRuntimeInfo.getWireMock())
nova chamada: assertNotNull(wmRuntimeInfo.getWireMock(), "Era esperado não nulo, mas " + result349 + " <wmRuntimeInfo.getWireMock()> é nulo")
chamada antiga: assertThrows(IllegalStateException.class, wmRuntimeInfo::getHttpsPort)
nova chamada: assertThrows(IllegalStateException.class, wmRuntimeInfo::getHttpsPort, "Era esperado que a exceção  IllegalStateException.class fosse lançada, mas não foi")
chamada antiga: assertDoesNotThrow(wm1RuntimeInfo::getHttpsPort)
nova chamada: assertDoesNotThrow(wm1RuntimeInfo::getHttpsPort, "Era esperado que nenhuma exceção fosse lançada, mas  wm1RuntimeInfo::getHttpsPort foi lançada")
chamada antiga: assertThrows(VerificationException.class, () -> extension.afterEach(extensionContext))
nova chamada: assertThrows(VerificationException.class, () -> extension.afterEach(extensionContext), "Era esperado que a exceção  VerificationException.class fosse lançada, mas não foi")
chamada antiga: assertDoesNotThrow(() -> extension.afterEach(extensionContext))
nova chamada: assertDoesNotThrow(() -> extension.afterEach(extensionContext), "Era esperado que nenhuma exceção fosse lançada, mas  () - extension.afterEach(extensionContext) foi lançada")
chamada antiga: assertDoesNotThrow(wm1RuntimeInfo::getHttpsPort)
nova chamada: assertDoesNotThrow(wm1RuntimeInfo::getHttpsPort, "Era esperado que nenhuma exceção fosse lançada, mas  wm1RuntimeInfo::getHttpsPort foi lançada")
chamada antiga: assertDoesNotThrow(info::getHttpBaseUrl)
nova chamada: assertDoesNotThrow(info::getHttpBaseUrl, "Era esperado que nenhuma exceção fosse lançada, mas  info::getHttpBaseUrl foi lançada")
chamada antiga: assertEquals("Domain 1", responseBody)
nova chamada: assertEquals("Domain 1", responseBody, "Era esperado valores iguais, mas  'Domain 1' é diferente de " + " responseBody")
chamada antiga: assertEquals("Domain 2", responseBody)
nova chamada: assertEquals("Domain 2", responseBody, "Era esperado valores iguais, mas  'Domain 2' é diferente de " + " responseBody")
chamada antiga: assertEquals("Domain 1", responseBody)
nova chamada: assertEquals("Domain 1", responseBody, "Era esperado valores iguais, mas  'Domain 1' é diferente de " + " responseBody")
chamada antiga: assertEquals("Domain 2", responseBody)
nova chamada: assertEquals("Domain 2", responseBody, "Era esperado valores iguais, mas  'Domain 2' é diferente de " + " responseBody")
chamada antiga: assertTrue(false)
nova chamada: assertTrue(false, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(true)
nova chamada: assertTrue(true, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertThrows(VerificationException.class, () -> {
    verify(postRequestedFor(urlEqualTo("/verify/this")).withHeader("Content-Type", equalTo("text/xml")));
    verify(3, postRequestedFor(urlEqualTo("/3/of/these")));
})
nova chamada: assertThrows(VerificationException.class, () -> {
    verify(postRequestedFor(urlEqualTo("/verify/this")).withHeader("Content-Type", equalTo("text/xml")));
    verify(3, postRequestedFor(urlEqualTo("/3/of/these")));
}, "Era esperado que a exceção  VerificationException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(VerificationException.class, () -> {
    verify(putRequestedFor(urlEqualTo("/without/header")).withoutHeader("Content-Type"));
})
nova chamada: assertThrows(VerificationException.class, () -> {
    verify(putRequestedFor(urlEqualTo("/without/header")).withoutHeader("Content-Type"));
}, "Era esperado que a exceção  VerificationException.class fosse lançada, mas não foi")
chamada antiga: assertEquals("body", retrievedBody)
nova chamada: assertEquals("Era esperado valores iguais, mas  'body' é diferente de " + " retrievedBody", "body", retrievedBody)
Total asserts: 2948
Asserts sem descrição: 2837
Asserts com descrição: 111
Assertion Roulette: 1890

Após do refactor: 
Total asserts: 2948
Asserts sem descrição: 2326
Asserts com descrição: 622
Assertion Roulette: 1604
