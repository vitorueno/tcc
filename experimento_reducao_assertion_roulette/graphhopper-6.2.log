
Projeto: /home/vitor-otto/opensource/graphhopper-6.2

Antes do refactor: 
chamada antiga: assertTrue(impossibleAlternative.isImpossible())
nova chamada: assertTrue(impossibleAlternative.isImpossible(), "Era esperado verdadeiro, mas " + result0 + " <impossibleAlternative.isImpossible()> é falso")
chamada antiga: assertTrue(((Trip.PtLeg) impossibleAlternative.getLegs().get(0)).stops.get(0).departureCancelled)
nova chamada: assertTrue(((Trip.PtLeg) impossibleAlternative.getLegs().get(0)).stops.get(0).departureCancelled, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(2, response.getAll().size())
nova chamada: assertEquals(2, response.getAll().size(), "Era esperado valores iguais, mas  2 é diferente de " + result1 + " <response.getAll().size()>")
chamada antiga: assertTrue(impossibleAlternative.isImpossible())
nova chamada: assertTrue(impossibleAlternative.isImpossible(), "Era esperado verdadeiro, mas " + result2 + " <impossibleAlternative.isImpossible()> é falso")
chamada antiga: assertEquals(3, response.getAll().size())
nova chamada: assertEquals(3, response.getAll().size(), "Era esperado valores iguais, mas  3 é diferente de " + result3 + " <response.getAll().size()>")
chamada antiga: assertTrue(impossibleAlternative.isImpossible())
nova chamada: assertTrue(impossibleAlternative.isImpossible(), "Era esperado verdadeiro, mas " + result4 + " <impossibleAlternative.isImpossible()> é falso")
chamada antiga: assertTrue(((Trip.PtLeg) impossibleAlternative.getLegs().get(0)).stops.get(1).arrivalCancelled)
nova chamada: assertTrue(((Trip.PtLeg) impossibleAlternative.getLegs().get(0)).stops.get(1).arrivalCancelled, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(2, response.getAll().size())
nova chamada: assertEquals(2, response.getAll().size(), "Era esperado valores iguais, mas  2 é diferente de " + result5 + " <response.getAll().size()>")
chamada antiga: assertTrue(impossibleAlternative.isImpossible())
nova chamada: assertTrue(impossibleAlternative.isImpossible(), "Era esperado verdadeiro, mas " + result6 + " <impossibleAlternative.isImpossible()> é falso")
chamada antiga: assertTrue(((Trip.PtLeg) impossibleAlternative.getLegs().get(0)).stops.get(2).departureCancelled)
nova chamada: assertTrue(((Trip.PtLeg) impossibleAlternative.getLegs().get(0)).stops.get(2).departureCancelled, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(1, response.getAll().size())
nova chamada: assertEquals(1, response.getAll().size(), "Era esperado valores iguais, mas  1 é diferente de " + result7 + " <response.getAll().size()>")
chamada antiga: assertEquals("EXTRA0", ptLeg.trip_id)
nova chamada: assertEquals("EXTRA0", ptLeg.trip_id, "Era esperado valores iguais, mas  'EXTRA0' é diferente de " + " ptLeg.trip_id")
chamada antiga: assertEquals(1, response.getAll().size())
nova chamada: assertEquals(1, response.getAll().size(), "Era esperado valores iguais, mas  1 é diferente de " + result8 + " <response.getAll().size()>")
chamada antiga: assertEquals(1, responseWithRealtimeUpdate.getAll().size())
nova chamada: assertEquals(1, responseWithRealtimeUpdate.getAll().size(), "Era esperado valores iguais, mas  1 é diferente de " + result9 + " <responseWithRealtimeUpdate.getAll().size()>")
chamada antiga: assertEquals(1, response.getAll().size())
nova chamada: assertEquals(1, response.getAll().size(), "Era esperado valores iguais, mas  1 é diferente de " + result10 + " <response.getAll().size()>")
chamada antiga: assertEquals(1, response.getAll().size())
nova chamada: assertEquals(1, response.getAll().size(), "Era esperado valores iguais, mas  1 é diferente de " + result11 + " <response.getAll().size()>")
chamada antiga: assertTrue(route.getAll().get(route.getAll().size() - 1).isImpossible())
nova chamada: assertTrue(route.getAll().get(route.getAll().size() - 1).isImpossible(), "Era esperado verdadeiro, mas " + result12 + " <route.getAll().get(route.getAll().size() - 1).isImpossible()> é falso")
chamada antiga: assertEquals(2, response.getAll().size())
nova chamada: assertEquals(2, response.getAll().size(), "Era esperado valores iguais, mas  2 é diferente de " + result13 + " <response.getAll().size()>")
chamada antiga: assertTrue(impossibleAlternative.isImpossible())
nova chamada: assertTrue(impossibleAlternative.isImpossible(), "Era esperado verdadeiro, mas " + result14 + " <impossibleAlternative.isImpossible()> é falso")
chamada antiga: assertEquals(2, response.getAll().size())
nova chamada: assertEquals(2, response.getAll().size(), "Era esperado valores iguais, mas  2 é diferente de " + result15 + " <response.getAll().size()>")
chamada antiga: assertTrue(impossibleAlternative.isImpossible())
nova chamada: assertTrue(impossibleAlternative.isImpossible(), "Era esperado verdadeiro, mas " + result16 + " <impossibleAlternative.isImpossible()> é falso")
chamada antiga: assertEquals(1, response.getAll().size())
nova chamada: assertEquals(1, response.getAll().size(), "Era esperado valores iguais, mas  1 é diferente de " + result17 + " <response.getAll().size()>")
chamada antiga: assertFalse(((Trip.PtLeg) possibleAlternative.getLegs().get(0)).stops.get(0).departureCancelled)
nova chamada: assertFalse(((Trip.PtLeg) possibleAlternative.getLegs().get(0)).stops.get(0).departureCancelled, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: assertFalse(route.hasErrors())
nova chamada: assertFalse(route.hasErrors(), "Era esperado falso, mas " + result18 + " <route.hasErrors()> é verdadeiro ")
chamada antiga: assertFalse(route.hasErrors())
nova chamada: assertFalse(route.hasErrors(), "Era esperado falso, mas " + result19 + " <route.hasErrors()> é verdadeiro ")
chamada antiga: assertFalse(route.getAll().isEmpty())
nova chamada: assertFalse(route.getAll().isEmpty(), "Era esperado falso, mas " + result20 + " <route.getAll().isEmpty()> é verdadeiro ")
chamada antiga: assertFalse(route.hasErrors())
nova chamada: assertFalse(route.hasErrors(), "Era esperado falso, mas " + result21 + " <route.hasErrors()> é verdadeiro ")
chamada antiga: assertEquals(1, route.getAll().size())
nova chamada: assertEquals(1, route.getAll().size(), "Era esperado valores iguais, mas  1 é diferente de " + result22 + " <route.getAll().size()>")
chamada antiga: assertEquals("JUSTICE_COURT,MUSEUM", firstLeg.stops.stream().map(s -> s.stop_id).collect(Collectors.joining(",")))
nova chamada: assertEquals("JUSTICE_COURT,MUSEUM", firstLeg.stops.stream().map(s -> s.stop_id).collect(Collectors.joining(",")), "Era esperado valores iguais, mas  'JUSTICE_COURT,MUSEUM' é diferente de " + result23 + " <firstLeg.stops.stream().map(s -> s.stop_id).collect(Collectors.joining(','))>")
chamada antiga: assertEquals("EMSI,DADAN", secondLeg.stops.stream().map(s -> s.stop_id).collect(Collectors.joining(",")))
nova chamada: assertEquals("EMSI,DADAN", secondLeg.stops.stream().map(s -> s.stop_id).collect(Collectors.joining(",")), "Era esperado valores iguais, mas  'EMSI,DADAN' é diferente de " + result24 + " <secondLeg.stops.stream().map(s -> s.stop_id).collect(Collectors.joining(','))>")
chamada antiga: assertEquals(LocalDateTime.parse("2007-01-01T10:00:00").atZone(zoneId).toInstant(), transferLeg.getDepartureTime().toInstant())
nova chamada: assertEquals(LocalDateTime.parse("2007-01-01T10:00:00").atZone(zoneId).toInstant(), transferLeg.getDepartureTime().toInstant(), "Era esperado valores iguais, mas " + result25 + " <LocalDateTime.parse('2007-01-01T10:00:00').atZone(zoneId).toInstant()> é diferente de " + result26 + " <transferLeg.getDepartureTime().toInstant()>")
chamada antiga: assertEquals(LocalDateTime.parse("2007-01-01T10:08:06.670").atZone(zoneId).toInstant(), transferLeg.getArrivalTime().toInstant())
nova chamada: assertEquals(LocalDateTime.parse("2007-01-01T10:08:06.670").atZone(zoneId).toInstant(), transferLeg.getArrivalTime().toInstant(), "Era esperado valores iguais, mas " + result27 + " <LocalDateTime.parse('2007-01-01T10:08:06.670').atZone(zoneId).toInstant()> é diferente de " + result28 + " <transferLeg.getArrivalTime().toInstant()>")
chamada antiga: assertEquals(readWktLineString("LINESTRING (-116.76164 36.906093, -116.761812 36.905928, -116.76217 36.905659)"), transitSolution.getLegs().get(1).geometry)
nova chamada: assertEquals(readWktLineString("LINESTRING (-116.76164 36.906093, -116.761812 36.905928, -116.76217 36.905659)"), transitSolution.getLegs().get(1).geometry, "Era esperado valores iguais, mas " + result29 + " <readWktLineString('LINESTRING (-116.76164 36.906093, -116.761812 36.905928, -116.76217 36.905659)')> é diferente de " + " transitSolution.getLegs().get(1).geometry")
chamada antiga: assertEquals(4500000L, transitSolution.getTime())
nova chamada: assertEquals(4500000L, transitSolution.getTime(), "Era esperado valores iguais, mas  4500000L é diferente de " + result30 + " <transitSolution.getTime()>")
chamada antiga: assertEquals(4500000.0, transitSolution.getRouteWeight())
nova chamada: assertEquals(4500000.0, transitSolution.getRouteWeight(), "Era esperado valores iguais, mas  4500000.0 é diferente de " + result31 + " <transitSolution.getRouteWeight()>")
chamada antiga: assertFalse(route.hasErrors())
nova chamada: assertFalse(route.hasErrors(), "Era esperado falso, mas " + result32 + " <route.hasErrors()> é verdadeiro ")
chamada antiga: assertEquals(1, route.getAll().size())
nova chamada: assertEquals(1, route.getAll().size(), "Era esperado valores iguais, mas  1 é diferente de " + result33 + " <route.getAll().size()>")
chamada antiga: assertFalse(route.hasErrors())
nova chamada: assertFalse(route.hasErrors(), "Era esperado falso, mas " + result34 + " <route.hasErrors()> é verdadeiro ")
chamada antiga: assertEquals(1, route.getAll().size())
nova chamada: assertEquals(1, route.getAll().size(), "Era esperado valores iguais, mas  1 é diferente de " + result35 + " <route.getAll().size()>")
chamada antiga: assertEquals(2, transitSolution.getLegs().size())
nova chamada: assertEquals(2, transitSolution.getLegs().size(), "Era esperado valores iguais, mas  2 é diferente de " + result36 + " <transitSolution.getLegs().size()>")
chamada antiga: assertEquals("COURT2MUSEUM", ptLeg1.route_id)
nova chamada: assertEquals("COURT2MUSEUM", ptLeg1.route_id, "Era esperado valores iguais, mas  'COURT2MUSEUM' é diferente de " + " ptLeg1.route_id")
chamada antiga: assertEquals("MUSEUM1", ptLeg1.trip_id)
nova chamada: assertEquals("MUSEUM1", ptLeg1.trip_id, "Era esperado valores iguais, mas  'MUSEUM1' é diferente de " + " ptLeg1.trip_id")
chamada antiga: assertEquals("JUSTICE_COURT", ptLeg1.stops.get(0).stop_id)
nova chamada: assertEquals("JUSTICE_COURT", ptLeg1.stops.get(0).stop_id, "Era esperado valores iguais, mas  'JUSTICE_COURT' é diferente de " + " ptLeg1.stops.get(0).stop_id")
chamada antiga: assertEquals("MUSEUM", ptLeg1.stops.get(1).stop_id)
nova chamada: assertEquals("MUSEUM", ptLeg1.stops.get(1).stop_id, "Era esperado valores iguais, mas  'MUSEUM' é diferente de " + " ptLeg1.stops.get(1).stop_id")
chamada antiga: assertEquals("MUSEUM2AIRPORT", ptLeg2.route_id)
nova chamada: assertEquals("MUSEUM2AIRPORT", ptLeg2.route_id, "Era esperado valores iguais, mas  'MUSEUM2AIRPORT' é diferente de " + " ptLeg2.route_id")
chamada antiga: assertEquals("MUSEUMAIRPORT1", ptLeg2.trip_id)
nova chamada: assertEquals("MUSEUMAIRPORT1", ptLeg2.trip_id, "Era esperado valores iguais, mas  'MUSEUMAIRPORT1' é diferente de " + " ptLeg2.trip_id")
chamada antiga: assertEquals("NEXT_TO_MUSEUM", ptLeg2.stops.get(0).stop_id)
nova chamada: assertEquals("NEXT_TO_MUSEUM", ptLeg2.stops.get(0).stop_id, "Era esperado valores iguais, mas  'NEXT_TO_MUSEUM' é diferente de " + " ptLeg2.stops.get(0).stop_id")
chamada antiga: assertEquals("AIRPORT", ptLeg2.stops.get(1).stop_id)
nova chamada: assertEquals("AIRPORT", ptLeg2.stops.get(1).stop_id, "Era esperado valores iguais, mas  'AIRPORT' é diferente de " + " ptLeg2.stops.get(1).stop_id")
chamada antiga: assertEquals("NEXT_TO_MUSEUM,AIRPORT", ((Trip.PtLeg) ptLegs.get(0)).stops.stream().map(s -> s.stop_id).collect(Collectors.joining(",")))
nova chamada: assertEquals("NEXT_TO_MUSEUM,AIRPORT", ((Trip.PtLeg) ptLegs.get(0)).stops.stream().map(s -> s.stop_id).collect(Collectors.joining(",")), "Era esperado valores iguais, mas  'NEXT_TO_MUSEUM,AIRPORT' é diferente de " + result37 + " <((Trip.PtLeg) ptLegs.get(0)).stops.stream().map(s -> s.stop_id).collect(Collectors.joining(','))>")
chamada antiga: assertEquals("BEATTY_AIRPORT,BULLFROG", ((Trip.PtLeg) ptLegs.get(1)).stops.stream().map(s -> s.stop_id).collect(Collectors.joining(",")))
nova chamada: assertEquals("BEATTY_AIRPORT,BULLFROG", ((Trip.PtLeg) ptLegs.get(1)).stops.stream().map(s -> s.stop_id).collect(Collectors.joining(",")), "Era esperado valores iguais, mas  'BEATTY_AIRPORT,BULLFROG' é diferente de " + result38 + " <((Trip.PtLeg) ptLegs.get(1)).stops.stream().map(s -> s.stop_id).collect(Collectors.joining(','))>")
chamada antiga: assertEquals("14:10", LocalDateTime.ofInstant(arrivalTime, zoneId).toLocalTime().toString())
nova chamada: assertEquals("14:10", LocalDateTime.ofInstant(arrivalTime, zoneId).toLocalTime().toString(), "Era esperado valores iguais, mas  '14:10' é diferente de " + result39 + " <LocalDateTime.ofInstant(arrivalTime, zoneId).toLocalTime().toString()>")
chamada antiga: assertEquals(15_000_000, Duration.between(ghRequest.getEarliestDepartureTime(), arrivalTime).toMillis())
nova chamada: assertEquals(15_000_000, Duration.between(ghRequest.getEarliestDepartureTime(), arrivalTime).toMillis(), "Era esperado valores iguais, mas  15_000_000 é diferente de " + result40 + " <Duration.between(ghRequest.getEarliestDepartureTime(), arrivalTime).toMillis()>")
chamada antiga: assertEquals(1.5E7, transitSolution.getRouteWeight())
nova chamada: assertEquals(1.5E7, transitSolution.getRouteWeight(), "Era esperado valores iguais, mas  1.5E7 é diferente de " + result41 + " <transitSolution.getRouteWeight()>")
chamada antiga: assertFalse(route.hasErrors())
nova chamada: assertFalse(route.hasErrors(), "Era esperado falso, mas " + result42 + " <route.hasErrors()> é verdadeiro ")
chamada antiga: assertEquals(1, route.getAll().size())
nova chamada: assertEquals(1, route.getAll().size(), "Era esperado valores iguais, mas  1 é diferente de " + result43 + " <route.getAll().size()>")
chamada antiga: assertEquals(4500000L, transitSolution.getTime())
nova chamada: assertEquals(4500000L, transitSolution.getTime(), "Era esperado valores iguais, mas  4500000L é diferente de " + result44 + " <transitSolution.getTime()>")
chamada antiga: assertEquals(4500000.0, transitSolution.getRouteWeight())
nova chamada: assertEquals(4500000.0, transitSolution.getRouteWeight(), "Era esperado valores iguais, mas  4500000.0 é diferente de " + result45 + " <transitSolution.getRouteWeight()>")
chamada antiga: assertEquals("JUSTICE_COURT,MUSEUM", ((Trip.PtLeg) transitSolution.getLegs().get(0)).stops.stream().map(s -> s.stop_id).collect(Collectors.joining(",")))
nova chamada: assertEquals("JUSTICE_COURT,MUSEUM", ((Trip.PtLeg) transitSolution.getLegs().get(0)).stops.stream().map(s -> s.stop_id).collect(Collectors.joining(",")), "Era esperado valores iguais, mas  'JUSTICE_COURT,MUSEUM' é diferente de " + result46 + " <((Trip.PtLeg) transitSolution.getLegs().get(0)).stops.stream().map(s -> s.stop_id).collect(Collectors.joining(','))>")
chamada antiga: assertEquals("10:00", LocalDateTime.ofInstant(walkDepartureTime, zoneId).toLocalTime().toString())
nova chamada: assertEquals("10:00", LocalDateTime.ofInstant(walkDepartureTime, zoneId).toLocalTime().toString(), "Era esperado valores iguais, mas  '10:00' é diferente de " + result47 + " <LocalDateTime.ofInstant(walkDepartureTime, zoneId).toLocalTime().toString()>")
chamada antiga: assertEquals(readWktLineString("LINESTRING (-116.76164 36.906093, -116.761812 36.905928, -116.76217 36.905659)"), transitSolution.getLegs().get(1).geometry)
nova chamada: assertEquals(readWktLineString("LINESTRING (-116.76164 36.906093, -116.761812 36.905928, -116.76217 36.905659)"), transitSolution.getLegs().get(1).geometry, "Era esperado valores iguais, mas " + result48 + " <readWktLineString('LINESTRING (-116.76164 36.906093, -116.761812 36.905928, -116.76217 36.905659)')> é diferente de " + " transitSolution.getLegs().get(1).geometry")
chamada antiga: assertEquals("10:08:06.670", LocalDateTime.ofInstant(walkArrivalTime, zoneId).toLocalTime().toString())
nova chamada: assertEquals("10:08:06.670", LocalDateTime.ofInstant(walkArrivalTime, zoneId).toLocalTime().toString(), "Era esperado valores iguais, mas  '10:08:06.670' é diferente de " + result49 + " <LocalDateTime.ofInstant(walkArrivalTime, zoneId).toLocalTime().toString()>")
chamada antiga: assertEquals("EMSI,DADAN", ((Trip.PtLeg) transitSolution.getLegs().get(2)).stops.stream().map(s -> s.stop_id).collect(Collectors.joining(",")))
nova chamada: assertEquals("EMSI,DADAN", ((Trip.PtLeg) transitSolution.getLegs().get(2)).stops.stream().map(s -> s.stop_id).collect(Collectors.joining(",")), "Era esperado valores iguais, mas  'EMSI,DADAN' é diferente de " + result50 + " <((Trip.PtLeg) transitSolution.getLegs().get(2)).stops.stream().map(s -> s.stop_id).collect(Collectors.joining(','))>")
chamada antiga: assertEquals(1, walkRoute.getLegs().size())
nova chamada: assertEquals(1, walkRoute.getLegs().size(), "Era esperado valores iguais, mas  1 é diferente de " + result51 + " <walkRoute.getLegs().size()>")
chamada antiga: assertEquals(486670, walkRoute.getTime())
nova chamada: assertEquals(486670, walkRoute.getTime(), "Era esperado valores iguais, mas  486670 é diferente de " + result52 + " <walkRoute.getTime()>")
chamada antiga: assertEquals(readWktLineString("LINESTRING (-116.76164 36.906093, -116.761812 36.905928, -116.76217 36.905659)"), walkRoute.getLegs().get(0).geometry)
nova chamada: assertEquals(readWktLineString("LINESTRING (-116.76164 36.906093, -116.761812 36.905928, -116.76217 36.905659)"), walkRoute.getLegs().get(0).geometry, "Era esperado valores iguais, mas " + result53 + " <readWktLineString('LINESTRING (-116.76164 36.906093, -116.761812 36.905928, -116.76217 36.905659)')> é diferente de " + " walkRoute.getLegs().get(0).geometry")
chamada antiga: assertFalse(route.hasErrors())
nova chamada: assertFalse(route.hasErrors(), "Era esperado falso, mas " + result54 + " <route.hasErrors()> é verdadeiro ")
chamada antiga: assertTrue(amount.getAmount().doubleValue() > onlyFare.fare_attribute.price)
nova chamada: assertTrue(amount.getAmount().doubleValue() > onlyFare.fare_attribute.price, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(cheapestFareWhereEveryLegGoesThroughAllZones >= cheapestFare)
nova chamada: assertTrue(cheapestFareWhereEveryLegGoesThroughAllZones >= cheapestFare, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(2, transfersToStop.size())
nova chamada: assertEquals(2, transfersToStop.size(), "Era esperado valores iguais, mas  2 é diferente de " + result55 + " <transfersToStop.size()>")
chamada antiga: assertEquals("MUSEUM", transfer.from_stop_id)
nova chamada: assertEquals("MUSEUM", transfer.from_stop_id, "Era esperado valores iguais, mas  'MUSEUM' é diferente de " + " transfer.from_stop_id")
chamada antiga: assertEquals("NEXT_TO_MUSEUM", transfer.to_stop_id)
nova chamada: assertEquals("NEXT_TO_MUSEUM", transfer.to_stop_id, "Era esperado valores iguais, mas  'NEXT_TO_MUSEUM' é diferente de " + " transfer.to_stop_id")
chamada antiga: Assertions.assertNull(transfer.from_route_id)
nova chamada: assertNull(transfer.from_route_id, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: Assertions.assertNull(transfer.to_route_id)
nova chamada: assertNull(transfer.to_route_id, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: Assertions.assertEquals(600, transfer.min_transfer_time)
nova chamada: assertEquals(600, transfer.min_transfer_time, "Era esperado valores iguais, mas  600 é diferente de " + " transfer.min_transfer_time")
chamada antiga: assertEquals("NEXT_TO_MUSEUM", withinStationTransfer.from_stop_id)
nova chamada: assertEquals("NEXT_TO_MUSEUM", withinStationTransfer.from_stop_id, "Era esperado valores iguais, mas  'NEXT_TO_MUSEUM' é diferente de " + " withinStationTransfer.from_stop_id")
chamada antiga: assertEquals("NEXT_TO_MUSEUM", withinStationTransfer.to_stop_id)
nova chamada: assertEquals("NEXT_TO_MUSEUM", withinStationTransfer.to_stop_id, "Era esperado valores iguais, mas  'NEXT_TO_MUSEUM' é diferente de " + " withinStationTransfer.to_stop_id")
chamada antiga: assertNull(withinStationTransfer.from_route_id)
nova chamada: assertNull(withinStationTransfer.from_route_id, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(withinStationTransfer.to_route_id)
nova chamada: assertNull(withinStationTransfer.to_route_id, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(5, transfersToStop.size())
nova chamada: assertEquals(5, transfersToStop.size(), "Era esperado valores iguais, mas  5 é diferente de " + result56 + " <transfersToStop.size()>")
chamada antiga: assertEquals("AB", transfersToStop.get(0).from_route_id)
nova chamada: assertEquals("AB", transfersToStop.get(0).from_route_id, "Era esperado valores iguais, mas  'AB' é diferente de " + " transfersToStop.get(0).from_route_id")
chamada antiga: assertEquals("FUNNY_BLOCK_AB", transfersToStop.get(1).from_route_id)
nova chamada: assertEquals("FUNNY_BLOCK_AB", transfersToStop.get(1).from_route_id, "Era esperado valores iguais, mas  'FUNNY_BLOCK_AB' é diferente de " + " transfersToStop.get(1).from_route_id")
chamada antiga: assertEquals("STBA", transfersToStop.get(2).from_route_id)
nova chamada: assertEquals("STBA", transfersToStop.get(2).from_route_id, "Era esperado valores iguais, mas  'STBA' é diferente de " + " transfersToStop.get(2).from_route_id")
chamada antiga: assertEquals("AAMV", transfersToStop.get(3).from_route_id)
nova chamada: assertEquals("AAMV", transfersToStop.get(3).from_route_id, "Era esperado valores iguais, mas  'AAMV' é diferente de " + " transfersToStop.get(3).from_route_id")
chamada antiga: assertEquals("ABBFC", transfersToStop.get(4).from_route_id)
nova chamada: assertEquals("ABBFC", transfersToStop.get(4).from_route_id, "Era esperado valores iguais, mas  'ABBFC' é diferente de " + " transfersToStop.get(4).from_route_id")
chamada antiga: assertFalse(route.hasErrors())
nova chamada: assertFalse(route.hasErrors(), "Era esperado falso, mas " + result57 + " <route.hasErrors()> é verdadeiro ")
chamada antiga: assertEquals(1, route.getAll().size())
nova chamada: assertEquals(1, route.getAll().size(), "Era esperado valores iguais, mas  1 é diferente de " + result58 + " <route.getAll().size()>")
chamada antiga: assertEquals(1, route.getAll().size())
nova chamada: assertEquals(1, route.getAll().size(), "Era esperado valores iguais, mas  1 é diferente de " + result59 + " <route.getAll().size()>")
chamada antiga: assertEquals(1, route.getAll().size())
nova chamada: assertEquals(1, route.getAll().size(), "Era esperado valores iguais, mas  1 é diferente de " + result60 + " <route.getAll().size()>")
chamada antiga: assertEquals(1, response.getAll().size())
nova chamada: assertEquals(1, response.getAll().size(), "Era esperado valores iguais, mas  1 é diferente de " + result61 + " <response.getAll().size()>")
chamada antiga: assertEquals(1, route.getAll().size())
nova chamada: assertEquals(1, route.getAll().size(), "Era esperado valores iguais, mas  1 é diferente de " + result62 + " <route.getAll().size()>")
chamada antiga: assertEquals(1, route.getAll().size())
nova chamada: assertEquals(1, route.getAll().size(), "Era esperado valores iguais, mas  1 é diferente de " + result63 + " <route.getAll().size()>")
chamada antiga: assertEquals(expectedDepartureTimes, actualDepartureTimes)
nova chamada: assertEquals(expectedDepartureTimes, actualDepartureTimes, "Era esperado valores iguais, mas  expectedDepartureTimes é diferente de " + " actualDepartureTimes")
chamada antiga: assertEquals(expectedDepartureTimes, actualDepartureTimes)
nova chamada: assertEquals(expectedDepartureTimes, actualDepartureTimes, "Era esperado valores iguais, mas  expectedDepartureTimes é diferente de " + " actualDepartureTimes")
chamada antiga: assertEquals(expectedDepartureTimes, actualDepartureTimes)
nova chamada: assertEquals(expectedDepartureTimes, actualDepartureTimes, "Era esperado valores iguais, mas  expectedDepartureTimes é diferente de " + " actualDepartureTimes")
chamada antiga: assertTrue(route.getAll().isEmpty())
nova chamada: assertTrue(route.getAll().isEmpty(), "Era esperado verdadeiro, mas " + result64 + " <route.getAll().isEmpty()> é falso")
chamada antiga: assertTrue(route.getAll().isEmpty())
nova chamada: assertTrue(route.getAll().isEmpty(), "Era esperado verdadeiro, mas " + result65 + " <route.getAll().isEmpty()> é falso")
chamada antiga: assertEquals("AB", ((Trip.PtLeg) mondayTrip.getLegs().get(1)).route_id)
nova chamada: assertEquals("AB", ((Trip.PtLeg) mondayTrip.getLegs().get(1)).route_id, "Era esperado valores iguais, mas  'AB' é diferente de " + " ((Trip.PtLeg) mondayTrip.getLegs().get(1)).route_id")
chamada antiga: assertNotEquals("AB", ((Trip.PtLeg) mondayTrip.getLegs().get(0)).route_id)
nova chamada: assertNotEquals("AB", ((Trip.PtLeg) mondayTrip.getLegs().get(0)).route_id, "Era esperado valores diferentes, mas  'AB' é igual a " + " ((Trip.PtLeg) mondayTrip.getLegs().get(0)).route_id")
chamada antiga: assertNotEquals("AB", ((Trip.PtLeg) mondayTrip.getLegs().get(1)).route_id)
nova chamada: assertNotEquals("AB", ((Trip.PtLeg) mondayTrip.getLegs().get(1)).route_id, "Era esperado valores diferentes, mas  'AB' é igual a " + " ((Trip.PtLeg) mondayTrip.getLegs().get(1)).route_id")
chamada antiga: assertEquals("AB", ((Trip.PtLeg) mondayTrip.getLegs().get(1)).route_id)
nova chamada: assertEquals("AB", ((Trip.PtLeg) mondayTrip.getLegs().get(1)).route_id, "Era esperado valores iguais, mas  'AB' é diferente de " + " ((Trip.PtLeg) mondayTrip.getLegs().get(1)).route_id")
chamada antiga: assertEquals(22800000.0, mondayTrip.getRouteWeight())
nova chamada: assertEquals(22800000.0, mondayTrip.getRouteWeight(), "Era esperado valores iguais, mas  22800000.0 é diferente de " + result66 + " <mondayTrip.getRouteWeight()>")
chamada antiga: assertEquals("AB", ((Trip.PtLeg) mondayTrip.getLegs().get(0)).route_id)
nova chamada: assertEquals("AB", ((Trip.PtLeg) mondayTrip.getLegs().get(0)).route_id, "Era esperado valores iguais, mas  'AB' é diferente de " + " ((Trip.PtLeg) mondayTrip.getLegs().get(0)).route_id")
chamada antiga: assertEquals(22900000.0, mondayTrip.getRouteWeight())
nova chamada: assertEquals(22900000.0, mondayTrip.getRouteWeight(), "Era esperado valores iguais, mas  22900000.0 é diferente de " + result67 + " <mondayTrip.getRouteWeight()>")
chamada antiga: assertEquals("AB", ((Trip.PtLeg) mondayTrip.getLegs().get(0)).route_id)
nova chamada: assertEquals("AB", ((Trip.PtLeg) mondayTrip.getLegs().get(0)).route_id, "Era esperado valores iguais, mas  'AB' é diferente de " + " ((Trip.PtLeg) mondayTrip.getLegs().get(0)).route_id")
chamada antiga: assertEquals(18600000.0, mondayTrip.getRouteWeight())
nova chamada: assertEquals(18600000.0, mondayTrip.getRouteWeight(), "Era esperado valores iguais, mas  18600000.0 é diferente de " + result68 + " <mondayTrip.getRouteWeight()>")
chamada antiga: assertEquals("AB", ((Trip.PtLeg) mondayTrip.getLegs().get(0)).route_id)
nova chamada: assertEquals("AB", ((Trip.PtLeg) mondayTrip.getLegs().get(0)).route_id, "Era esperado valores iguais, mas  'AB' é diferente de " + " ((Trip.PtLeg) mondayTrip.getLegs().get(0)).route_id")
chamada antiga: assertEquals(18700000.0, mondayTrip.getRouteWeight())
nova chamada: assertEquals(18700000.0, mondayTrip.getRouteWeight(), "Era esperado valores iguais, mas  18700000.0 é diferente de " + result69 + " <mondayTrip.getRouteWeight()>")
chamada antiga: assertNotEquals("AB", ((Trip.PtLeg) mondayTrip.getLegs().get(0)).route_id)
nova chamada: assertNotEquals("AB", ((Trip.PtLeg) mondayTrip.getLegs().get(0)).route_id, "Era esperado valores diferentes, mas  'AB' é igual a " + " ((Trip.PtLeg) mondayTrip.getLegs().get(0)).route_id")
chamada antiga: assertNotEquals("AB", ((Trip.PtLeg) mondayTrip.getLegs().get(1)).route_id)
nova chamada: assertNotEquals("AB", ((Trip.PtLeg) mondayTrip.getLegs().get(1)).route_id, "Era esperado valores diferentes, mas  'AB' é igual a " + " ((Trip.PtLeg) mondayTrip.getLegs().get(1)).route_id")
chamada antiga: assertEquals("AB", ((Trip.PtLeg) mondayTrip.getLegs().get(1)).route_id)
nova chamada: assertEquals("AB", ((Trip.PtLeg) mondayTrip.getLegs().get(1)).route_id, "Era esperado valores iguais, mas  'AB' é diferente de " + " ((Trip.PtLeg) mondayTrip.getLegs().get(1)).route_id")
chamada antiga: assertEquals(22900000.0, mondayTrip.getRouteWeight())
nova chamada: assertEquals(22900000.0, mondayTrip.getRouteWeight(), "Era esperado valores iguais, mas  22900000.0 é diferente de " + result70 + " <mondayTrip.getRouteWeight()>")
chamada antiga: assertEquals("FUNNY_BLOCK_AB1", (((Trip.PtLeg) mondayTrip.getLegs().get(0)).trip_id))
nova chamada: assertEquals("FUNNY_BLOCK_AB1", (((Trip.PtLeg) mondayTrip.getLegs().get(0)).trip_id), "Era esperado valores iguais, mas  'FUNNY_BLOCK_AB1' é diferente de " + " (((Trip.PtLeg) mondayTrip.getLegs().get(0)).trip_id)")
chamada antiga: assertEquals("FUNNY_BLOCK_BFC1", (((Trip.PtLeg) mondayTrip.getLegs().get(1)).trip_id))
nova chamada: assertEquals("FUNNY_BLOCK_BFC1", (((Trip.PtLeg) mondayTrip.getLegs().get(1)).trip_id), "Era esperado valores iguais, mas  'FUNNY_BLOCK_BFC1' é diferente de " + " (((Trip.PtLeg) mondayTrip.getLegs().get(1)).trip_id)")
chamada antiga: assertEquals("FUNNY_BLOCK_FCAMV1", (((Trip.PtLeg) mondayTrip.getLegs().get(2)).trip_id))
nova chamada: assertEquals("FUNNY_BLOCK_FCAMV1", (((Trip.PtLeg) mondayTrip.getLegs().get(2)).trip_id), "Era esperado valores iguais, mas  'FUNNY_BLOCK_FCAMV1' é diferente de " + " (((Trip.PtLeg) mondayTrip.getLegs().get(2)).trip_id)")
chamada antiga: assertTrue((((Trip.PtLeg) mondayTrip.getLegs().get(1)).isInSameVehicleAsPrevious))
nova chamada: assertTrue((((Trip.PtLeg) mondayTrip.getLegs().get(1)).isInSameVehicleAsPrevious), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue((((Trip.PtLeg) mondayTrip.getLegs().get(2)).isInSameVehicleAsPrevious))
nova chamada: assertTrue((((Trip.PtLeg) mondayTrip.getLegs().get(2)).isInSameVehicleAsPrevious), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("FUNNY_BLOCK_AB1", (((Trip.PtLeg) sundayTrip.getLegs().get(0)).trip_id))
nova chamada: assertEquals("FUNNY_BLOCK_AB1", (((Trip.PtLeg) sundayTrip.getLegs().get(0)).trip_id), "Era esperado valores iguais, mas  'FUNNY_BLOCK_AB1' é diferente de " + " (((Trip.PtLeg) sundayTrip.getLegs().get(0)).trip_id)")
chamada antiga: assertEquals("FUNNY_BLOCK_FCAMV1", (((Trip.PtLeg) sundayTrip.getLegs().get(1)).trip_id))
nova chamada: assertEquals("FUNNY_BLOCK_FCAMV1", (((Trip.PtLeg) sundayTrip.getLegs().get(1)).trip_id), "Era esperado valores iguais, mas  'FUNNY_BLOCK_FCAMV1' é diferente de " + " (((Trip.PtLeg) sundayTrip.getLegs().get(1)).trip_id)")
chamada antiga: assertTrue((((Trip.PtLeg) sundayTrip.getLegs().get(1)).isInSameVehicleAsPrevious))
nova chamada: assertTrue((((Trip.PtLeg) sundayTrip.getLegs().get(1)).isInSameVehicleAsPrevious), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNull(config.getConfigForDistance(190, "turn", " then"))
nova chamada: assertNull(config.getConfigForDistance(190, "turn", " then"), "Era esperado nulo, mas " + result71 + " <config.getConfigForDistance(190, 'turn', ' then')> não é nulo")
chamada antiga: assertNull(config.getConfigForDistance(190, "turn", " then"))
nova chamada: assertNull(config.getConfigForDistance(190, "turn", " then"), "Era esperado nulo, mas " + result72 + " <config.getConfigForDistance(190, 'turn', ' then')> não é nulo")
chamada antiga: assertNull(configMetric.getConfigForDistance(1999, "turn", " then"))
nova chamada: assertNull(configMetric.getConfigForDistance(1999, "turn", " then"), "Era esperado nulo, mas " + result73 + " <configMetric.getConfigForDistance(1999, 'turn', ' then')> não é nulo")
chamada antiga: assertNull(configMetric.getConfigForDistance(1999, "abbiegen", " dann"))
nova chamada: assertNull(configMetric.getConfigForDistance(1999, "abbiegen", " dann"), "Era esperado nulo, mas " + result74 + " <configMetric.getConfigForDistance(1999, 'abbiegen', ' dann')> não é nulo")
chamada antiga: assertNull(configImperial.getConfigForDistance(1999, "turn", " then"))
nova chamada: assertNull(configImperial.getConfigForDistance(1999, "turn", " then"), "Era esperado nulo, mas " + result75 + " <configImperial.getConfigForDistance(1999, 'turn', ' then')> não é nulo")
chamada antiga: assertEquals(expectedSpokenDistance, values.spokenDistance)
nova chamada: assertEquals(expectedSpokenDistance, values.spokenDistance, "Era esperado valores iguais, mas  expectedSpokenDistance é diferente de " + " values.spokenDistance")
chamada antiga: assertEquals(expectedInstruction, values.turnDescription)
nova chamada: assertEquals(expectedInstruction, values.turnDescription, "Era esperado valores iguais, mas  expectedInstruction é diferente de " + " values.turnDescription")
chamada antiga: assertEquals(translationMap.getWithFallBack(Locale.US).tr("navigate.in_km", 12), "In 12 kilometers")
nova chamada: assertEquals(translationMap.getWithFallBack(Locale.US).tr("navigate.in_km", 12), "In 12 kilometers", "Era esperado valores iguais, mas " + result76 + " <translationMap.getWithFallBack(Locale.US).tr('navigate.in_km', 12)> é diferente de " + " 'In 12 kilometers'")
chamada antiga: assertEquals(translationMap.getWithFallBack(Locale.GERMAN).tr("navigate.in_km", 12), "In 12 Kilometern")
nova chamada: assertEquals(translationMap.getWithFallBack(Locale.GERMAN).tr("navigate.in_km", 12), "In 12 Kilometern", "Era esperado valores iguais, mas " + result77 + " <translationMap.getWithFallBack(Locale.GERMAN).tr('navigate.in_km', 12)> é diferente de " + " 'In 12 Kilometern'")
chamada antiga: assertEquals(translationMap.getWithFallBack(new Locale("de", "DE")).tr("navigate.in_km", 12), "In 12 Kilometern")
nova chamada: assertEquals(translationMap.getWithFallBack(new Locale("de", "DE")).tr("navigate.in_km", 12), "In 12 Kilometern", "Era esperado valores iguais, mas " + result78 + " <translationMap.getWithFallBack(new Locale('de', 'DE')).tr('navigate.in_km', 12)> é diferente de " + " 'In 12 Kilometern'")
chamada antiga: assertEquals(translationMap.getWithFallBack(new Locale("de", "CH")).tr("navigate.in_km_singular"), "In 1 Kilometer")
nova chamada: assertEquals(translationMap.getWithFallBack(new Locale("de", "CH")).tr("navigate.in_km_singular"), "In 1 Kilometer", "Era esperado valores iguais, mas " + result79 + " <translationMap.getWithFallBack(new Locale('de', 'CH')).tr('navigate.in_km_singular')> é diferente de " + " 'In 1 Kilometer'")
chamada antiga: assertEquals("en", route.get("voiceLocale").asText())
nova chamada: assertEquals("en", route.get("voiceLocale").asText(), "Era esperado valores iguais, mas  'en' é diferente de " + result80 + " <route.get('voiceLocale').asText()>")
chamada antiga: assertEquals("depart", maneuver.get("type").asText())
nova chamada: assertEquals("depart", maneuver.get("type").asText(), "Era esperado valores iguais, mas  'depart' é diferente de " + result81 + " <maneuver.get('type').asText()>")
chamada antiga: assertEquals("straight", maneuver.get("modifier").asText())
nova chamada: assertEquals("straight", maneuver.get("modifier").asText(), "Era esperado valores iguais, mas  'straight' é diferente de " + result82 + " <maneuver.get('modifier').asText()>")
chamada antiga: assertEquals("la Callisa", step.get("name").asText())
nova chamada: assertEquals("la Callisa", step.get("name").asText(), "Era esperado valores iguais, mas  'la Callisa' é diferente de " + result83 + " <step.get('name').asText()>")
chamada antiga: assertTrue(instructionDistance < routeDistance)
nova chamada: assertTrue(instructionDistance < routeDistance, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(1, voiceInstructions.size())
nova chamada: assertEquals(1, voiceInstructions.size(), "Era esperado valores iguais, mas  1 é diferente de " + result84 + " <voiceInstructions.size()>")
chamada antiga: assertTrue(voiceInstruction.get("distanceAlongGeometry").asDouble() <= instructionDistance)
nova chamada: assertTrue(voiceInstruction.get("distanceAlongGeometry").asDouble() <= instructionDistance, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("turn sharp left onto la Callisa, then keep left", voiceInstruction.get("announcement").asText())
nova chamada: assertEquals("turn sharp left onto la Callisa, then keep left", voiceInstruction.get("announcement").asText(), "Era esperado valores iguais, mas  'turn sharp left onto la Callisa, then keep left' é diferente de " + result85 + " <voiceInstruction.get('announcement').asText()>")
chamada antiga: assertEquals(1, bannerInstructions.size())
nova chamada: assertEquals(1, bannerInstructions.size(), "Era esperado valores iguais, mas  1 é diferente de " + result86 + " <bannerInstructions.size()>")
chamada antiga: assertEquals("la Callisa", bannerInstruction.get("text").asText())
nova chamada: assertEquals("la Callisa", bannerInstruction.get("text").asText(), "Era esperado valores iguais, mas  'la Callisa' é diferente de " + result87 + " <bannerInstruction.get('text').asText()>")
chamada antiga: assertEquals("turn", bannerInstruction.get("type").asText())
nova chamada: assertEquals("turn", bannerInstruction.get("type").asText(), "Era esperado valores iguais, mas  'turn' é diferente de " + result88 + " <bannerInstruction.get('type').asText()>")
chamada antiga: assertEquals("sharp left", bannerInstruction.get("modifier").asText())
nova chamada: assertEquals("sharp left", bannerInstruction.get("modifier").asText(), "Era esperado valores iguais, mas  'sharp left' é diferente de " + result89 + " <bannerInstruction.get('modifier').asText()>")
chamada antiga: assertEquals("la Callisa", bannerInstructionComponent.get("text").asText())
nova chamada: assertEquals("la Callisa", bannerInstructionComponent.get("text").asText(), "Era esperado valores iguais, mas  'la Callisa' é diferente de " + result90 + " <bannerInstructionComponent.get('text').asText()>")
chamada antiga: assertEquals(1, voiceInstructions.size())
nova chamada: assertEquals(1, voiceInstructions.size(), "Era esperado valores iguais, mas  1 é diferente de " + result91 + " <voiceInstructions.size()>")
chamada antiga: assertTrue(voiceInstruction.get("distanceAlongGeometry").asDouble() < instructionDistance)
nova chamada: assertTrue(voiceInstruction.get("distanceAlongGeometry").asDouble() < instructionDistance, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(1, bannerInstructions.size())
nova chamada: assertEquals(1, bannerInstructions.size(), "Era esperado valores iguais, mas  1 é diferente de " + result92 + " <bannerInstructions.size()>")
chamada antiga: assertEquals("Arrive at destination", bannerInstruction.get("text").asText())
nova chamada: assertEquals("Arrive at destination", bannerInstruction.get("text").asText(), "Era esperado valores iguais, mas  'Arrive at destination' é diferente de " + result93 + " <bannerInstruction.get('text').asText()>")
chamada antiga: assertEquals(2, waypointsJson.size())
nova chamada: assertEquals(2, waypointsJson.size(), "Era esperado valores iguais, mas  2 é diferente de " + result94 + " <waypointsJson.size()>")
chamada antiga: assertEquals(2, voiceInstructions.size())
nova chamada: assertEquals(2, voiceInstructions.size(), "Era esperado valores iguais, mas  2 é diferente de " + result95 + " <voiceInstructions.size()>")
chamada antiga: assertEquals("In 200 meters At roundabout, take exit 2 onto CS-340, then At roundabout, take exit 2 onto CG-3", voiceInstruction.get("announcement").asText())
nova chamada: assertEquals("In 200 meters At roundabout, take exit 2 onto CS-340, then At roundabout, take exit 2 onto CG-3", voiceInstruction.get("announcement").asText(), "Era esperado valores iguais, mas  'In 200 meters At roundabout, take exit 2 onto CS-340, then At roundabout, take exit 2 onto CG-3' é diferente de " + result96 + " <voiceInstruction.get('announcement').asText()>")
chamada antiga: assertEquals(4, voiceInstructions.size())
nova chamada: assertEquals(4, voiceInstructions.size(), "Era esperado valores iguais, mas  4 é diferente de " + result97 + " <voiceInstructions.size()>")
chamada antiga: assertEquals("In 2 kilometers keep right", voiceInstruction.get("announcement").asText())
nova chamada: assertEquals("In 2 kilometers keep right", voiceInstruction.get("announcement").asText(), "Era esperado valores iguais, mas  'In 2 kilometers keep right' é diferente de " + result98 + " <voiceInstruction.get('announcement').asText()>")
chamada antiga: assertEquals("keep right", voiceInstruction.get("announcement").asText())
nova chamada: assertEquals("keep right", voiceInstruction.get("announcement").asText(), "Era esperado valores iguais, mas  'keep right' é diferente de " + result99 + " <voiceInstruction.get('announcement').asText()>")
chamada antiga: assertEquals(2, voiceInstructions.size())
nova chamada: assertEquals(2, voiceInstructions.size(), "Era esperado valores iguais, mas  2 é diferente de " + result100 + " <voiceInstructions.size()>")
chamada antiga: assertEquals("In 600 feet At roundabout, take exit 2 onto CS-340, then At roundabout, take exit 2 onto CG-3", voiceInstruction.get("announcement").asText())
nova chamada: assertEquals("In 600 feet At roundabout, take exit 2 onto CS-340, then At roundabout, take exit 2 onto CG-3", voiceInstruction.get("announcement").asText(), "Era esperado valores iguais, mas  'In 600 feet At roundabout, take exit 2 onto CS-340, then At roundabout, take exit 2 onto CG-3' é diferente de " + result101 + " <voiceInstruction.get('announcement').asText()>")
chamada antiga: assertEquals(4, voiceInstructions.size())
nova chamada: assertEquals(4, voiceInstructions.size(), "Era esperado valores iguais, mas  4 é diferente de " + result102 + " <voiceInstructions.size()>")
chamada antiga: assertEquals("In 2 miles keep right", voiceInstruction.get("announcement").asText())
nova chamada: assertEquals("In 2 miles keep right", voiceInstruction.get("announcement").asText(), "Era esperado valores iguais, mas  'In 2 miles keep right' é diferente de " + result103 + " <voiceInstruction.get('announcement').asText()>")
chamada antiga: assertEquals("keep right", voiceInstruction.get("announcement").asText())
nova chamada: assertEquals("keep right", voiceInstruction.get("announcement").asText(), "Era esperado valores iguais, mas  'keep right' é diferente de " + result104 + " <voiceInstruction.get('announcement').asText()>")
chamada antiga: assertEquals(2, rsp.getAll().size())
nova chamada: assertEquals(2, rsp.getAll().size(), "Era esperado valores iguais, mas  2 é diferente de " + result105 + " <rsp.getAll().size()>")
chamada antiga: assertEquals(2, routes.size())
nova chamada: assertEquals(2, routes.size(), "Era esperado valores iguais, mas  2 é diferente de " + result106 + " <routes.size()>")
chamada antiga: assertEquals("GraphHopper Route 0", routes.get(0).get("legs").get(0).get("summary").asText())
nova chamada: assertEquals("GraphHopper Route 0", routes.get(0).get("legs").get(0).get("summary").asText(), "Era esperado valores iguais, mas  'GraphHopper Route 0' é diferente de " + result107 + " <routes.get(0).get('legs').get(0).get('summary').asText()>")
chamada antiga: assertEquals("Avinguda Sant Antoni, CG-3", routes.get(1).get("legs").get(0).get("summary").asText())
nova chamada: assertEquals("Avinguda Sant Antoni, CG-3", routes.get(1).get("legs").get(0).get("summary").asText(), "Era esperado valores iguais, mas  'Avinguda Sant Antoni, CG-3' é diferente de " + result108 + " <routes.get(1).get('legs').get(0).get('summary').asText()>")
chamada antiga: assertEquals("In 2 kilometers keep right", voiceInstruction.get("announcement").asText())
nova chamada: assertEquals("In 2 kilometers keep right", voiceInstruction.get("announcement").asText(), "Era esperado valores iguais, mas  'In 2 kilometers keep right' é diferente de " + result109 + " <voiceInstruction.get('announcement').asText()>")
chamada antiga: assertEquals("In 2 Kilometern rechts halten", voiceInstruction.get("announcement").asText())
nova chamada: assertEquals("In 2 Kilometern rechts halten", voiceInstruction.get("announcement").asText(), "Era esperado valores iguais, mas  'In 2 Kilometern rechts halten' é diferente de " + result110 + " <voiceInstruction.get('announcement').asText()>")
chamada antiga: assertEquals("roundabout", primary.get("type").asText())
nova chamada: assertEquals("roundabout", primary.get("type").asText(), "Era esperado valores iguais, mas  'roundabout' é diferente de " + result111 + " <primary.get('type').asText()>")
chamada antiga: assertEquals("At roundabout, take exit 2 onto CG-3", primary.get("text").asText())
nova chamada: assertEquals("At roundabout, take exit 2 onto CG-3", primary.get("text").asText(), "Era esperado valores iguais, mas  'At roundabout, take exit 2 onto CG-3' é diferente de " + result112 + " <primary.get('text').asText()>")
chamada antiga: assertEquals("right", primary.get("modifier").asText())
nova chamada: assertEquals("right", primary.get("modifier").asText(), "Era esperado valores iguais, mas  'right' é diferente de " + result113 + " <primary.get('modifier').asText()>")
chamada antiga: assertEquals(4, waypointsJson.size())
nova chamada: assertEquals(4, waypointsJson.size(), "Era esperado valores iguais, mas  4 é diferente de " + result114 + " <waypointsJson.size()>")
chamada antiga: assertEquals(3, legs.size())
nova chamada: assertEquals(3, legs.size(), "Era esperado valores iguais, mas  3 é diferente de " + result115 + " <legs.size()>")
chamada antiga: assertEquals("InvalidInput", json.get("code").asText())
nova chamada: assertEquals("InvalidInput", json.get("code").asText(), "Era esperado valores iguais, mas  'InvalidInput' é diferente de " + result116 + " <json.get('code').asText()>")
chamada antiga: assertTrue(json.get("message").asText().startsWith("Point 0 is out of bounds: 42.554851,111.536198"))
nova chamada: assertTrue(json.get("message").asText().startsWith("Point 0 is out of bounds: 42.554851,111.536198"), "Era esperado verdadeiro, mas " + result117 + " <json.get('message').asText().startsWith('Point 0 is out of bounds: 42.554851,111.536198')> é falso")
chamada antiga: assertEquals(0, bearings.size())
nova chamada: assertEquals(0, bearings.size(), "Era esperado valores iguais, mas  0 é diferente de " + result118 + " <bearings.size()>")
chamada antiga: assertEquals(Collections.EMPTY_LIST, bearings)
nova chamada: assertEquals(Collections.EMPTY_LIST, bearings, "Era esperado valores iguais, mas  Collections.EMPTY_LIST é diferente de " + " bearings")
chamada antiga: assertEquals(1, bearings.size())
nova chamada: assertEquals(1, bearings.size(), "Era esperado valores iguais, mas  1 é diferente de " + result119 + " <bearings.size()>")
chamada antiga: assertEquals(4, bearings.size())
nova chamada: assertEquals(4, bearings.size(), "Era esperado valores iguais, mas  4 é diferente de " + result120 + " <bearings.size()>")
chamada antiga: Assertions.assertEquals(graphHopperConfig.getInt("index.max_region_search", 0), 100)
nova chamada: assertEquals(graphHopperConfig.getInt("index.max_region_search", 0), 100, "Era esperado valores iguais, mas " + result121 + " <graphHopperConfig.getInt('index.max_region_search', 0)> é diferente de " + " 100")
chamada antiga: Assertions.assertEquals(graphHopperConfig.getInt("index.pups", 0), 0)
nova chamada: assertEquals(graphHopperConfig.getInt("index.pups", 0), 0, "Era esperado valores iguais, mas " + result122 + " <graphHopperConfig.getInt('index.pups', 0)> é diferente de " + " 0")
chamada antiga: assertEquals("your_car", profileResolver.resolveProfile(new PMap().putObject("vehicle", "car")).getName())
nova chamada: assertEquals("your_car", profileResolver.resolveProfile(new PMap().putObject("vehicle", "car")).getName(), "Era esperado valores iguais, mas  'your_car' é diferente de " + result123 + " <profileResolver.resolveProfile(new PMap().putObject('vehicle', 'car')).getName()>")
chamada antiga: assertEquals("my_bike", profileResolver.resolveProfile(new PMap().putObject("vehicle", "bike")).getName())
nova chamada: assertEquals("my_bike", profileResolver.resolveProfile(new PMap().putObject("vehicle", "bike")).getName(), "Era esperado valores iguais, mas  'my_bike' é diferente de " + result124 + " <profileResolver.resolveProfile(new PMap().putObject('vehicle', 'bike')).getName()>")
chamada antiga: assertEquals("short_bike", profileResolver.resolveProfile(new PMap().putObject("weighting", "shortest")).getName())
nova chamada: assertEquals("short_bike", profileResolver.resolveProfile(new PMap().putObject("weighting", "shortest")).getName(), "Era esperado valores iguais, mas  'short_bike' é diferente de " + result125 + " <profileResolver.resolveProfile(new PMap().putObject('weighting', 'shortest')).getName()>")
chamada antiga: assertEquals("fast_bike", profileResolver.resolveProfile(new PMap().putObject("weighting", "fastest")).getName())
nova chamada: assertEquals("fast_bike", profileResolver.resolveProfile(new PMap().putObject("weighting", "fastest")).getName(), "Era esperado valores iguais, mas  'fast_bike' é diferente de " + result126 + " <profileResolver.resolveProfile(new PMap().putObject('weighting', 'fastest')).getName()>")
chamada antiga: assertEquals("short_bike", profileResolver.resolveProfile(new PMap().putObject("weighting", "shortest")).getName())
nova chamada: assertEquals("short_bike", profileResolver.resolveProfile(new PMap().putObject("weighting", "shortest")).getName(), "Era esperado valores iguais, mas  'short_bike' é diferente de " + result127 + " <profileResolver.resolveProfile(new PMap().putObject('weighting', 'shortest')).getName()>")
chamada antiga: assertEquals("fast_bike", profileResolver.resolveProfile(new PMap().putObject("vehicle", "bike").putObject("weighting", "fastest")).getName())
nova chamada: assertEquals("fast_bike", profileResolver.resolveProfile(new PMap().putObject("vehicle", "bike").putObject("weighting", "fastest")).getName(), "Era esperado valores iguais, mas  'fast_bike' é diferente de " + result128 + " <profileResolver.resolveProfile(new PMap().putObject('vehicle', 'bike').putObject('weighting', 'fastest')).getName()>")
chamada antiga: assertEquals("short_bike", profileResolver.resolveProfile(new PMap().putObject("vehicle", "bike").putObject("weighting", "shortest")).getName())
nova chamada: assertEquals("short_bike", profileResolver.resolveProfile(new PMap().putObject("vehicle", "bike").putObject("weighting", "shortest")).getName(), "Era esperado valores iguais, mas  'short_bike' é diferente de " + result129 + " <profileResolver.resolveProfile(new PMap().putObject('vehicle', 'bike').putObject('weighting', 'shortest')).getName()>")
chamada antiga: assertEquals("profile", profileResolver.resolveProfile(new PMap()).getName())
nova chamada: assertEquals("profile", profileResolver.resolveProfile(new PMap()).getName(), "Era esperado valores iguais, mas  'profile' é diferente de " + result130 + " <profileResolver.resolveProfile(new PMap()).getName()>")
chamada antiga: assertEquals("profile", profileResolver.resolveProfile(new PMap().putObject(Parameters.Routing.EDGE_BASED, false)).getName())
nova chamada: assertEquals("profile", profileResolver.resolveProfile(new PMap().putObject(Parameters.Routing.EDGE_BASED, false)).getName(), "Era esperado valores iguais, mas  'profile' é diferente de " + result131 + " <profileResolver.resolveProfile(new PMap().putObject(Parameters.Routing.EDGE_BASED, false)).getName()>")
chamada antiga: assertEquals(profile1, profileResolver.resolveProfile(hints).getName())
nova chamada: assertEquals(profile1, profileResolver.resolveProfile(hints).getName(), "Era esperado valores iguais, mas  profile1 é diferente de " + result132 + " <profileResolver.resolveProfile(hints).getName()>")
chamada antiga: assertEquals(profile1, profileResolver.resolveProfile(hints.putObject(Parameters.CH.DISABLE, true)).getName())
nova chamada: assertEquals(profile1, profileResolver.resolveProfile(hints.putObject(Parameters.CH.DISABLE, true)).getName(), "Era esperado valores iguais, mas  profile1 é diferente de " + result133 + " <profileResolver.resolveProfile(hints.putObject(Parameters.CH.DISABLE, true)).getName()>")
chamada antiga: assertEquals(profile1, profileResolver.resolveProfile(hints.putObject(Parameters.Landmark.DISABLE, true)).getName())
nova chamada: assertEquals(profile1, profileResolver.resolveProfile(hints.putObject(Parameters.Landmark.DISABLE, true)).getName(), "Era esperado valores iguais, mas  profile1 é diferente de " + result134 + " <profileResolver.resolveProfile(hints.putObject(Parameters.Landmark.DISABLE, true)).getName()>")
chamada antiga: assertEquals(4, wayList.size())
nova chamada: assertEquals(4, wayList.size(), "Era esperado valores iguais, mas  4 é diferente de " + result135 + " <wayList.size()>")
chamada antiga: assertEquals(5, points.size())
nova chamada: assertEquals(5, points.size(), "Era esperado valores iguais, mas  5 é diferente de " + result136 + " <points.size()>")
chamada antiga: assertEquals(1604121, p.getTime())
nova chamada: assertEquals(1604121, p.getTime(), "Era esperado valores iguais, mas  1604121 é diferente de " + result137 + " <p.getTime()>")
chamada antiga: assertEquals(Instruction.CONTINUE_ON_STREET, wayList.get(0).getSign())
nova chamada: assertEquals(Instruction.CONTINUE_ON_STREET, wayList.get(0).getSign(), "Era esperado valores iguais, mas  Instruction.CONTINUE_ON_STREET é diferente de " + result138 + " <wayList.get(0).getSign()>")
chamada antiga: assertEquals(Instruction.TURN_LEFT, wayList.get(1).getSign())
nova chamada: assertEquals(Instruction.TURN_LEFT, wayList.get(1).getSign(), "Era esperado valores iguais, mas  Instruction.TURN_LEFT é diferente de " + result139 + " <wayList.get(1).getSign()>")
chamada antiga: assertEquals(Instruction.TURN_RIGHT, wayList.get(2).getSign())
nova chamada: assertEquals(Instruction.TURN_RIGHT, wayList.get(2).getSign(), "Era esperado valores iguais, mas  Instruction.TURN_RIGHT é diferente de " + result140 + " <wayList.get(2).getSign()>")
chamada antiga: assertEquals(5, result.size())
nova chamada: assertEquals(5, result.size(), "Era esperado valores iguais, mas  5 é diferente de " + result141 + " <result.size()>")
chamada antiga: assertEquals(0, result.get(0).getTime().longValue())
nova chamada: assertEquals(0, result.get(0).getTime().longValue(), "Era esperado valores iguais, mas  0 é diferente de " + result142 + " <result.get(0).getTime().longValue()>")
chamada antiga: assertNull(result.get(1).getTime())
nova chamada: assertNull(result.get(1).getTime(), "Era esperado nulo, mas " + result143 + " <result.get(1).getTime()> não é nulo")
chamada antiga: assertEquals(15000, result.get(2).getTime().longValue())
nova chamada: assertEquals(15000, result.get(2).getTime().longValue(), "Era esperado valores iguais, mas  15000 é diferente de " + result144 + " <result.get(2).getTime().longValue()>")
chamada antiga: assertEquals(19000, result.get(3).getTime().longValue())
nova chamada: assertEquals(19000, result.get(3).getTime().longValue(), "Era esperado valores iguais, mas  19000 é diferente de " + result145 + " <result.get(3).getTime().longValue()>")
chamada antiga: assertEquals(22000, result.get(4).getTime().longValue())
nova chamada: assertEquals(22000, result.get(4).getTime().longValue(), "Era esperado valores iguais, mas  22000 é diferente de " + result146 + " <result.get(4).getTime().longValue()>")
chamada antiga: assertEquals("_", GpxConversions.simpleXMLEscape("<"))
nova chamada: assertEquals("_", GpxConversions.simpleXMLEscape("<"), "Era esperado valores iguais, mas  '_' é diferente de " + result147 + " <GpxConversions.simpleXMLEscape('<')>")
chamada antiga: assertEquals("_blup_", GpxConversions.simpleXMLEscape("<blup>"))
nova chamada: assertEquals("_blup_", GpxConversions.simpleXMLEscape("<blup>"), "Era esperado valores iguais, mas  '_blup_' é diferente de " + result148 + " <GpxConversions.simpleXMLEscape('<blup>')>")
chamada antiga: assertEquals("a&amp;b", GpxConversions.simpleXMLEscape("a&b"))
nova chamada: assertEquals("a&amp;b", GpxConversions.simpleXMLEscape("a&b"), "Era esperado valores iguais, mas  'a&amp;b' é diferente de " + result149 + " <GpxConversions.simpleXMLEscape('a&b')>")
chamada antiga: assertEquals("W", GpxConversions.calcDirection(currI, nextI))
nova chamada: assertEquals("W", GpxConversions.calcDirection(currI, nextI), "Era esperado valores iguais, mas  'W' é diferente de " + result150 + " <GpxConversions.calcDirection(currI, nextI)>")
chamada antiga: assertEquals("NE", GpxConversions.calcDirection(i2, null))
nova chamada: assertEquals("NE", GpxConversions.calcDirection(i2, null), "Era esperado valores iguais, mas  'NE' é diferente de " + result151 + " <GpxConversions.calcDirection(i2, null)>")
chamada antiga: assertEquals("N", GpxConversions.calcDirection(i3, null))
nova chamada: assertEquals("N", GpxConversions.calcDirection(i3, null), "Era esperado valores iguais, mas  'N' é diferente de " + result152 + " <GpxConversions.calcDirection(i3, null)>")
chamada antiga: assertEquals("S", GpxConversions.calcDirection(i4, null))
nova chamada: assertEquals("S", GpxConversions.calcDirection(i4, null), "Era esperado valores iguais, mas  'S' é diferente de " + result153 + " <GpxConversions.calcDirection(i4, null)>")
chamada antiga: assertTrue(Double.isNaN(GpxConversions.calcAzimuth(i5, null)))
nova chamada: assertTrue(Double.isNaN(GpxConversions.calcAzimuth(i5, null)), "Era esperado verdadeiro, mas " + result154 + " <Double.isNaN(GpxConversions.calcAzimuth(i5, null))> é falso")
chamada antiga: assertEquals("", GpxConversions.calcDirection(i5, null))
nova chamada: assertEquals("", GpxConversions.calcDirection(i5, null), "Era esperado valores iguais, mas  '' é diferente de " + result155 + " <GpxConversions.calcDirection(i5, null)>")
chamada antiga: assertTrue(rsp.hasErrors())
nova chamada: assertTrue(rsp.hasErrors(), "Era esperado verdadeiro, mas " + result156 + " <rsp.hasErrors()> é falso")
chamada antiga: assertEquals(2, rsp.getErrors().size())
nova chamada: assertEquals(2, rsp.getErrors().size(), "Era esperado valores iguais, mas  2 é diferente de " + result157 + " <rsp.getErrors().size()>")
chamada antiga: assertTrue(rsp.hasProblems())
nova chamada: assertTrue(rsp.hasProblems(), "Era esperado verdadeiro, mas " + result158 + " <rsp.hasProblems()> é falso")
chamada antiga: assertEquals(Long.MAX_VALUE, rsp.getTime(0, 1))
nova chamada: assertEquals(Long.MAX_VALUE, rsp.getTime(0, 1), "Era esperado valores iguais, mas  Long.MAX_VALUE é diferente de " + result159 + " <rsp.getTime(0, 1)>")
chamada antiga: assertEquals(2 * 1000, rsp.getTime(0, 0))
nova chamada: assertEquals(2 * 1000, rsp.getTime(0, 0), "Era esperado valores iguais, mas  2 * 1000 é diferente de " + result160 + " <rsp.getTime(0, 0)>")
chamada antiga: assertEquals("[[0, 1], [1, 0]]", rsp.getDisconnectedPoints().toString())
nova chamada: assertEquals("[[0, 1], [1, 0]]", rsp.getDisconnectedPoints().toString(), "Era esperado valores iguais, mas  '[[0, 1], [1, 0]]' é diferente de " + result161 + " <rsp.getDisconnectedPoints().toString()>")
chamada antiga: assertTrue(rsp.hasProblems())
nova chamada: assertTrue(rsp.hasProblems(), "Era esperado verdadeiro, mas " + result162 + " <rsp.hasProblems()> é falso")
chamada antiga: assertEquals(Long.MAX_VALUE, rsp.getTime(1, 0))
nova chamada: assertEquals(Long.MAX_VALUE, rsp.getTime(1, 0), "Era esperado valores iguais, mas  Long.MAX_VALUE é diferente de " + result163 + " <rsp.getTime(1, 0)>")
chamada antiga: assertEquals(Long.MAX_VALUE, rsp.getTime(1, 1))
nova chamada: assertEquals(Long.MAX_VALUE, rsp.getTime(1, 1), "Era esperado valores iguais, mas  Long.MAX_VALUE é diferente de " + result164 + " <rsp.getTime(1, 1)>")
chamada antiga: assertEquals(Long.MAX_VALUE, rsp.getTime(1, 2))
nova chamada: assertEquals(Long.MAX_VALUE, rsp.getTime(1, 2), "Era esperado valores iguais, mas  Long.MAX_VALUE é diferente de " + result165 + " <rsp.getTime(1, 2)>")
chamada antiga: assertEquals(Long.MAX_VALUE, rsp.getTime(0, 1))
nova chamada: assertEquals(Long.MAX_VALUE, rsp.getTime(0, 1), "Era esperado valores iguais, mas  Long.MAX_VALUE é diferente de " + result166 + " <rsp.getTime(0, 1)>")
chamada antiga: assertEquals(Long.MAX_VALUE, rsp.getTime(2, 1))
nova chamada: assertEquals(Long.MAX_VALUE, rsp.getTime(2, 1), "Era esperado valores iguais, mas  Long.MAX_VALUE é diferente de " + result167 + " <rsp.getTime(2, 1)>")
chamada antiga: assertEquals(8 * 1000, rsp.getTime(0, 0))
nova chamada: assertEquals(8 * 1000, rsp.getTime(0, 0), "Era esperado valores iguais, mas  8 * 1000 é diferente de " + result168 + " <rsp.getTime(0, 0)>")
chamada antiga: assertEquals(9 * 1000, rsp.getTime(0, 2))
nova chamada: assertEquals(9 * 1000, rsp.getTime(0, 2), "Era esperado valores iguais, mas  9 * 1000 é diferente de " + result169 + " <rsp.getTime(0, 2)>")
chamada antiga: assertEquals(10 * 1000, rsp.getTime(2, 0))
nova chamada: assertEquals(10 * 1000, rsp.getTime(2, 0), "Era esperado valores iguais, mas  10 * 1000 é diferente de " + result170 + " <rsp.getTime(2, 0)>")
chamada antiga: assertEquals(11 * 1000, rsp.getTime(2, 2))
nova chamada: assertEquals(11 * 1000, rsp.getTime(2, 2), "Era esperado valores iguais, mas  11 * 1000 é diferente de " + result171 + " <rsp.getTime(2, 2)>")
chamada antiga: assertEquals("[[0, 1], [1, 0], [1, 1], [1, 2], [2, 1]]", rsp.getDisconnectedPoints().toString())
nova chamada: assertEquals("[[0, 1], [1, 0], [1, 1], [1, 2], [2, 1]]", rsp.getDisconnectedPoints().toString(), "Era esperado valores iguais, mas  '[[0, 1], [1, 0], [1, 1], [1, 2], [2, 1]]' é diferente de " + result172 + " <rsp.getDisconnectedPoints().toString()>")
chamada antiga: assertEquals(Collections.singletonList(1), rsp.getInvalidFromPoints())
nova chamada: assertEquals(Collections.singletonList(1), rsp.getInvalidFromPoints(), "Era esperado valores iguais, mas " + result173 + " <Collections.singletonList(1)> é diferente de " + result174 + " <rsp.getInvalidFromPoints()>")
chamada antiga: assertEquals(Collections.singletonList(1), rsp.getInvalidToPoints())
nova chamada: assertEquals(Collections.singletonList(1), rsp.getInvalidToPoints(), "Era esperado valores iguais, mas " + result175 + " <Collections.singletonList(1)> é diferente de " + result176 + " <rsp.getInvalidToPoints()>")
chamada antiga: assertTrue(rsp.hasErrors())
nova chamada: assertTrue(rsp.hasErrors(), "Era esperado verdadeiro, mas " + result177 + " <rsp.hasErrors()> é falso")
chamada antiga: assertEquals(886, rsp.getTime(0, 1) / 1000)
nova chamada: assertEquals(886, rsp.getTime(0, 1) / 1000, "Era esperado valores iguais, mas  886 é diferente de " + " rsp.getTime(0, 1) / 1000")
chamada antiga: assertEquals("{\"points\":[[12.0,11.0]],\"out_arrays\":[\"weights\"],\"fail_fast\":true,\"profile\":\"car\"}", json.toString())
nova chamada: assertEquals("{\"points\":[[12.0,11.0]],\"out_arrays\":[\"weights\"],\"fail_fast\":true,\"profile\":\"car\"}", json.toString(), "Era esperado valores iguais, mas  '{\'points\':[[12.0,11.0]],\'out_arrays\':[\'weights\'],\'fail_fast\':true,\'profile\':\'car\'}' é diferente de " + result178 + " <json.toString()>")
chamada antiga: assertEquals("{\"points\":[[12.0,11.0]],\"out_arrays\":[\"weights\"],\"fail_fast\":true,\"profile\":\"bike\"}", json.toString())
nova chamada: assertEquals("{\"points\":[[12.0,11.0]],\"out_arrays\":[\"weights\"],\"fail_fast\":true,\"profile\":\"bike\"}", json.toString(), "Era esperado valores iguais, mas  '{\'points\':[[12.0,11.0]],\'out_arrays\':[\'weights\'],\'fail_fast\':true,\'profile\':\'bike\'}' é diferente de " + result179 + " <json.toString()>")
chamada antiga: assertEquals("{\"points\":[[12.0,11.0]],\"out_arrays\":[\"weights\"],\"fail_fast\":true,\"profile\":\"car\",\"some_property\":\"value\"}", json.toString())
nova chamada: assertEquals("{\"points\":[[12.0,11.0]],\"out_arrays\":[\"weights\"],\"fail_fast\":true,\"profile\":\"car\",\"some_property\":\"value\"}", json.toString(), "Era esperado valores iguais, mas  '{\'points\':[[12.0,11.0]],\'out_arrays\':[\'weights\'],\'fail_fast\':true,\'profile\':\'car\',\'some_property\':\'value\'}' é diferente de " + result180 + " <json.toString()>")
chamada antiga: assertEquals(5, gh.getClientForRequest(req).connectTimeoutMillis())
nova chamada: assertEquals(5, gh.getClientForRequest(req).connectTimeoutMillis(), "Era esperado valores iguais, mas  5 é diferente de " + result181 + " <gh.getClientForRequest(req).connectTimeoutMillis()>")
chamada antiga: assertEquals("https://localhost:8000/route?profile=&type=json&instructions=true&points_encoded=true" + "&calc_points=true&algorithm=&locale=en_US&elevation=false&optimize=false", hopper.createGetRequest(new GHRequest()).url().toString())
nova chamada: assertEquals("https://localhost:8000/route?profile=&type=json&instructions=true&points_encoded=true" + "&calc_points=true&algorithm=&locale=en_US&elevation=false&optimize=false", hopper.createGetRequest(new GHRequest()).url().toString(), "Era esperado valores iguais, mas  'https://localhost:8000/route?profile=&type=json&instructions=true&points_encoded=true' + '&calc_points=true&algorithm=&locale=en_US&elevation=false&optimize=false' é diferente de " + result182 + " <hopper.createGetRequest(new GHRequest()).url().toString()>")
chamada antiga: assertEquals("https://localhost:8000/route?profile=my_car&type=json&instructions=true&points_encoded=true" + "&calc_points=true&algorithm=&locale=en_US&elevation=false&optimize=false", hopper.createGetRequest(new GHRequest().setProfile("my_car")).url().toString())
nova chamada: assertEquals("https://localhost:8000/route?profile=my_car&type=json&instructions=true&points_encoded=true" + "&calc_points=true&algorithm=&locale=en_US&elevation=false&optimize=false", hopper.createGetRequest(new GHRequest().setProfile("my_car")).url().toString(), "Era esperado valores iguais, mas  'https://localhost:8000/route?profile=my_car&type=json&instructions=true&points_encoded=true' + '&calc_points=true&algorithm=&locale=en_US&elevation=false&optimize=false' é diferente de " + result183 + " <hopper.createGetRequest(new GHRequest().setProfile('my_car')).url().toString()>")
chamada antiga: assertEquals("http://localhost:8080/route?profile=car&point=42.509225,1.534728&point=42.512602,1.551558&type=json&instructions=true&points_encoded=true" + "&calc_points=true&algorithm=&locale=en_US&elevation=false&optimize=false&heading=10.0&heading=-90.0", hopper.createGetRequest(req).url().toString())
nova chamada: assertEquals("http://localhost:8080/route?profile=car&point=42.509225,1.534728&point=42.512602,1.551558&type=json&instructions=true&points_encoded=true" + "&calc_points=true&algorithm=&locale=en_US&elevation=false&optimize=false&heading=10.0&heading=-90.0", hopper.createGetRequest(req).url().toString(), "Era esperado valores iguais, mas  'http://localhost:8080/route?profile=car&point=42.509225,1.534728&point=42.512602,1.551558&type=json&instructions=true&points_encoded=true' + '&calc_points=true&algorithm=&locale=en_US&elevation=false&optimize=false&heading=10.0&heading=-90.0' é diferente de " + result184 + " <hopper.createGetRequest(req).url().toString()>")
chamada antiga: assertEquals("Custom models cannot be used for GET requests. Use setPostRequest(true)", e.getMessage())
nova chamada: assertEquals("Custom models cannot be used for GET requests. Use setPostRequest(true)", e.getMessage(), "Era esperado valores iguais, mas  'Custom models cannot be used for GET requests. Use setPostRequest(true)' é diferente de " + result185 + " <e.getMessage()>")
chamada antiga: assertEquals(expected, objectMapper.valueToTree(customModelJson))
nova chamada: assertEquals(expected, objectMapper.valueToTree(customModelJson), "Era esperado valores iguais, mas  expected é diferente de " + result186 + " <objectMapper.valueToTree(customModelJson)>")
chamada antiga: assertEquals(200, response.getStatus())
nova chamada: assertEquals(200, response.getStatus(), "Era esperado valores iguais, mas  200 é diferente de " + result187 + " <response.getStatus()>")
chamada antiga: assertEquals(200, response.getStatus())
nova chamada: assertEquals(200, response.getStatus(), "Era esperado valores iguais, mas  200 é diferente de " + result188 + " <response.getStatus()>")
chamada antiga: assertEquals("[1.548191,42.510033,1.548191,42.510033]", path.get("bbox").toString())
nova chamada: assertEquals("[1.548191,42.510033,1.548191,42.510033]", path.get("bbox").toString(), "Era esperado valores iguais, mas  '[1.548191,42.510033,1.548191,42.510033]' é diferente de " + result189 + " <path.get('bbox').toString()>")
chamada antiga: assertEquals(200, response.getStatus())
nova chamada: assertEquals(200, response.getStatus(), "Era esperado valores iguais, mas  200 é diferente de " + result190 + " <response.getStatus()>")
chamada antiga: assertEquals(200, response.getStatus())
nova chamada: assertEquals(200, response.getStatus(), "Era esperado valores iguais, mas  200 é diferente de " + result191 + " <response.getStatus()>")
chamada antiga: assertEquals(200, response.getStatus())
nova chamada: assertEquals(200, response.getStatus(), "Era esperado valores iguais, mas  200 é diferente de " + result192 + " <response.getStatus()>")
chamada antiga: assertEquals(400, response.getStatus())
nova chamada: assertEquals(400, response.getStatus(), "Era esperado valores iguais, mas  400 é diferente de " + result193 + " <response.getStatus()>")
chamada antiga: assertEquals(200, response.getStatus())
nova chamada: assertEquals(200, response.getStatus(), "Era esperado valores iguais, mas  200 é diferente de " + result194 + " <response.getStatus()>")
chamada antiga: assertEquals(200, response.getStatus())
nova chamada: assertEquals(200, response.getStatus(), "Era esperado valores iguais, mas  200 é diferente de " + result195 + " <response.getStatus()>")
chamada antiga: assertEquals(400, response.getStatus())
nova chamada: assertEquals(400, response.getStatus(), "Era esperado valores iguais, mas  400 é diferente de " + result196 + " <response.getStatus()>")
chamada antiga: assertEquals(400, response.getStatus())
nova chamada: assertEquals(400, response.getStatus(), "Era esperado valores iguais, mas  400 é diferente de " + result197 + " <response.getStatus()>")
chamada antiga: assertEquals(200, response.getStatus())
nova chamada: assertEquals(200, response.getStatus(), "Era esperado valores iguais, mas  200 é diferente de " + result198 + " <response.getStatus()>")
chamada antiga: assertEquals(400, response.getStatus())
nova chamada: assertEquals(400, response.getStatus(), "Era esperado valores iguais, mas  400 é diferente de " + result199 + " <response.getStatus()>")
chamada antiga: assertTrue(json.has("message"))
nova chamada: assertTrue(json.has("message"), "Era esperado verdadeiro, mas " + result200 + " <json.has('message')> é falso")
chamada antiga: assertEquals("Elevation not supported!", json.get("message").asText())
nova chamada: assertEquals("Elevation not supported!", json.get("message").asText(), "Era esperado valores iguais, mas  'Elevation not supported!' é diferente de " + result201 + " <json.get('message').asText()>")
chamada antiga: assertEquals(24, instructions.size())
nova chamada: assertEquals(24, instructions.size(), "Era esperado valores iguais, mas  24 é diferente de " + result202 + " <instructions.size()>")
chamada antiga: assertEquals("Continue onto la Callisa", instructions.get(0).getTurnDescription(null))
nova chamada: assertEquals("Continue onto la Callisa", instructions.get(0).getTurnDescription(null), "Era esperado valores iguais, mas  'Continue onto la Callisa' é diferente de " + result203 + " <instructions.get(0).getTurnDescription(null)>")
chamada antiga: assertEquals("At roundabout, take exit 2", instructions.get(4).getTurnDescription(null))
nova chamada: assertEquals("At roundabout, take exit 2", instructions.get(4).getTurnDescription(null), "Era esperado valores iguais, mas  'At roundabout, take exit 2' é diferente de " + result204 + " <instructions.get(4).getTurnDescription(null)>")
chamada antiga: assertEquals(true, instructions.get(4).getExtraInfoJSON().get("exited"))
nova chamada: assertEquals(true, instructions.get(4).getExtraInfoJSON().get("exited"), "Era esperado valores iguais, mas  true é diferente de " + result205 + " <instructions.get(4).getExtraInfoJSON().get('exited')>")
chamada antiga: assertEquals(false, instructions.get(22).getExtraInfoJSON().get("exited"))
nova chamada: assertEquals(false, instructions.get(22).getExtraInfoJSON().get("exited"), "Era esperado valores iguais, mas  false é diferente de " + result206 + " <instructions.get(22).getExtraInfoJSON().get('exited')>")
chamada antiga: assertEquals(4, rsp.getBest().getPathDetails().get(RoadClass.KEY).size())
nova chamada: assertEquals(4, rsp.getBest().getPathDetails().get(RoadClass.KEY).size(), "Era esperado valores iguais, mas  4 é diferente de " + result207 + " <rsp.getBest().getPathDetails().get(RoadClass.KEY).size()>")
chamada antiga: assertEquals(RoadClass.PRIMARY.toString(), rsp.getBest().getPathDetails().get(RoadClass.KEY).get(3).getValue())
nova chamada: assertEquals(RoadClass.PRIMARY.toString(), rsp.getBest().getPathDetails().get(RoadClass.KEY).get(3).getValue(), "Era esperado valores iguais, mas " + result208 + " <RoadClass.PRIMARY.toString()> é diferente de " + result209 + " <rsp.getBest().getPathDetails().get(RoadClass.KEY).get(3).getValue()>")
chamada antiga: assertEquals(10, roadEnvList.size())
nova chamada: assertEquals(10, roadEnvList.size(), "Era esperado valores iguais, mas  10 é diferente de " + result210 + " <roadEnvList.size()>")
chamada antiga: assertEquals(RoadEnvironment.ROAD.toString(), roadEnvList.get(0).getValue())
nova chamada: assertEquals(RoadEnvironment.ROAD.toString(), roadEnvList.get(0).getValue(), "Era esperado valores iguais, mas " + result211 + " <RoadEnvironment.ROAD.toString()> é diferente de " + result212 + " <roadEnvList.get(0).getValue()>")
chamada antiga: assertEquals(RoadEnvironment.TUNNEL.toString(), roadEnvList.get(6).getValue())
nova chamada: assertEquals(RoadEnvironment.TUNNEL.toString(), roadEnvList.get(6).getValue(), "Era esperado valores iguais, mas " + result213 + " <RoadEnvironment.TUNNEL.toString()> é diferente de " + result214 + " <roadEnvList.get(6).getValue()>")
chamada antiga: assertTrue(pathDetails.containsKey("average_speed"))
nova chamada: assertTrue(pathDetails.containsKey("average_speed"), "Era esperado verdadeiro, mas " + result215 + " <pathDetails.containsKey('average_speed')> é falso")
chamada antiga: assertTrue(pathDetails.containsKey("edge_id"))
nova chamada: assertTrue(pathDetails.containsKey("edge_id"), "Era esperado verdadeiro, mas " + result216 + " <pathDetails.containsKey('edge_id')> é falso")
chamada antiga: assertTrue(pathDetails.containsKey("time"))
nova chamada: assertTrue(pathDetails.containsKey("time"), "Era esperado verdadeiro, mas " + result217 + " <pathDetails.containsKey('time')> é falso")
chamada antiga: assertEquals(11, averageSpeedList.size())
nova chamada: assertEquals(11, averageSpeedList.size(), "Era esperado valores iguais, mas  11 é diferente de " + result218 + " <averageSpeedList.size()>")
chamada antiga: assertEquals(30.0, averageSpeedList.get(0).getValue())
nova chamada: assertEquals(30.0, averageSpeedList.get(0).getValue(), "Era esperado valores iguais, mas  30.0 é diferente de " + result219 + " <averageSpeedList.get(0).getValue()>")
chamada antiga: assertEquals(14, averageSpeedList.get(0).getLength())
nova chamada: assertEquals(14, averageSpeedList.get(0).getLength(), "Era esperado valores iguais, mas  14 é diferente de " + result220 + " <averageSpeedList.get(0).getLength()>")
chamada antiga: assertEquals(60.0, averageSpeedList.get(1).getValue())
nova chamada: assertEquals(60.0, averageSpeedList.get(1).getValue(), "Era esperado valores iguais, mas  60.0 é diferente de " + result221 + " <averageSpeedList.get(1).getValue()>")
chamada antiga: assertEquals(5, averageSpeedList.get(1).getLength())
nova chamada: assertEquals(5, averageSpeedList.get(1).getLength(), "Era esperado valores iguais, mas  5 é diferente de " + result222 + " <averageSpeedList.get(1).getLength()>")
chamada antiga: assertEquals(77, edgeIdDetails.size())
nova chamada: assertEquals(77, edgeIdDetails.size(), "Era esperado valores iguais, mas  77 é diferente de " + result223 + " <edgeIdDetails.size()>")
chamada antiga: assertEquals(882L, edgeIdDetails.get(0).getValue())
nova chamada: assertEquals(882L, edgeIdDetails.get(0).getValue(), "Era esperado valores iguais, mas  882L é diferente de " + result224 + " <edgeIdDetails.get(0).getValue()>")
chamada antiga: assertEquals(2, edgeIdDetails.get(0).getLength())
nova chamada: assertEquals(2, edgeIdDetails.get(0).getLength(), "Era esperado valores iguais, mas  2 é diferente de " + result225 + " <edgeIdDetails.get(0).getLength()>")
chamada antiga: assertEquals(883L, edgeIdDetails.get(1).getValue())
nova chamada: assertEquals(883L, edgeIdDetails.get(1).getValue(), "Era esperado valores iguais, mas  883L é diferente de " + result226 + " <edgeIdDetails.get(1).getValue()>")
chamada antiga: assertEquals(8, edgeIdDetails.get(1).getLength())
nova chamada: assertEquals(8, edgeIdDetails.get(1).getLength(), "Era esperado valores iguais, mas  8 é diferente de " + result227 + " <edgeIdDetails.get(1).getLength()>")
chamada antiga: assertEquals(expectedTime, actualTime)
nova chamada: assertEquals(expectedTime, actualTime, "Era esperado valores iguais, mas  expectedTime é diferente de " + " actualTime")
chamada antiga: assertEquals(200, response.getStatus())
nova chamada: assertEquals(200, response.getStatus(), "Era esperado valores iguais, mas  200 é diferente de " + result228 + " <response.getStatus()>")
chamada antiga: assertTrue(path.has("details"))
nova chamada: assertTrue(path.has("details"), "Era esperado verdadeiro, mas " + result229 + " <path.has('details')> é falso")
chamada antiga: assertTrue(details.has("average_speed"))
nova chamada: assertTrue(details.has("average_speed"), "Era esperado verdadeiro, mas " + result230 + " <details.has('average_speed')> é falso")
chamada antiga: assertEquals(19, averageSpeed.get(1).get(1).asInt())
nova chamada: assertEquals(19, averageSpeed.get(1).get(1).asInt(), "Era esperado valores iguais, mas  19 é diferente de " + result231 + " <averageSpeed.get(1).get(1).asInt()>")
chamada antiga: assertTrue(details.has("edge_id"))
nova chamada: assertTrue(details.has("edge_id"), "Era esperado verdadeiro, mas " + result232 + " <details.has('edge_id')> é falso")
chamada antiga: assertEquals(882, firstLink)
nova chamada: assertEquals(882, firstLink, "Era esperado valores iguais, mas  882 é diferente de " + " firstLink")
chamada antiga: assertEquals(1425, lastLink)
nova chamada: assertEquals(1425, lastLink, "Era esperado valores iguais, mas  1425 é diferente de " + " lastLink")
chamada antiga: assertEquals("Continue onto Carrer Antoni Fiter i Rossell", rsp.getBest().getInstructions().get(3).getName())
nova chamada: assertEquals("Continue onto Carrer Antoni Fiter i Rossell", rsp.getBest().getInstructions().get(3).getName(), "Era esperado valores iguais, mas  'Continue onto Carrer Antoni Fiter i Rossell' é diferente de " + result233 + " <rsp.getBest().getInstructions().get(3).getName()>")
chamada antiga: assertEquals("Carrer Antoni Fiter i Rossell", rsp.getBest().getInstructions().get(3).getName())
nova chamada: assertEquals("Carrer Antoni Fiter i Rossell", rsp.getBest().getInstructions().get(3).getName(), "Era esperado valores iguais, mas  'Carrer Antoni Fiter i Rossell' é diferente de " + result234 + " <rsp.getBest().getInstructions().get(3).getName()>")
chamada antiga: assertEquals(200, response.getStatus())
nova chamada: assertEquals(200, response.getStatus(), "Era esperado valores iguais, mas  200 é diferente de " + result235 + " <response.getStatus()>")
chamada antiga: assertEquals(200, response.getStatus())
nova chamada: assertEquals(200, response.getStatus(), "Era esperado valores iguais, mas  200 é diferente de " + result236 + " <response.getStatus()>")
chamada antiga: assertEquals(400, response.getStatus())
nova chamada: assertEquals(400, response.getStatus(), "Era esperado valores iguais, mas  400 é diferente de " + result237 + " <response.getStatus()>")
chamada antiga: assertEquals(400, response.getStatus())
nova chamada: assertEquals(400, response.getStatus(), "Era esperado valores iguais, mas  400 é diferente de " + result238 + " <response.getStatus()>")
chamada antiga: assertEquals(200, response.getStatus())
nova chamada: assertEquals(200, response.getStatus(), "Era esperado valores iguais, mas  200 é diferente de " + result239 + " <response.getStatus()>")
chamada antiga: assertTrue(str.contains("<trkpt lat=\"42.554839\" lon=\"1.536374\"><time>"))
nova chamada: assertTrue(str.contains("<trkpt lat=\"42.554839\" lon=\"1.536374\"><time>"), "Era esperado verdadeiro, mas " + result240 + " <str.contains('<trkpt lat=\'42.554839\' lon=\'1.536374\'><time>')> é falso")
chamada antiga: assertEquals(200, response.getStatus())
nova chamada: assertEquals(200, response.getStatus(), "Era esperado valores iguais, mas  200 é diferente de " + result241 + " <response.getStatus()>")
chamada antiga: assertTrue(str.contains("<trkpt lat=\"42.554839\" lon=\"1.536374\"><time>"))
nova chamada: assertTrue(str.contains("<trkpt lat=\"42.554839\" lon=\"1.536374\"><time>"), "Era esperado verdadeiro, mas " + result242 + " <str.contains('<trkpt lat=\'42.554839\' lon=\'1.536374\'><time>')> é falso")
chamada antiga: assertEquals(200, response.getStatus())
nova chamada: assertEquals(200, response.getStatus(), "Era esperado valores iguais, mas  200 é diferente de " + result243 + " <response.getStatus()>")
chamada antiga: assertTrue(str.contains("<wpt lat=\"42.510033\" lon=\"1.548191\"> <name>arrive at destination</name></wpt>"))
nova chamada: assertTrue(str.contains("<wpt lat=\"42.510033\" lon=\"1.548191\"> <name>arrive at destination</name></wpt>"), "Era esperado verdadeiro, mas " + result244 + " <str.contains('<wpt lat=\'42.510033\' lon=\'1.548191\'> <name>arrive at destination</name></wpt>')> é falso")
chamada antiga: assertTrue(str.contains("<trkpt lat=\"42.554839\" lon=\"1.536374\"><time>"))
nova chamada: assertTrue(str.contains("<trkpt lat=\"42.554839\" lon=\"1.536374\"><time>"), "Era esperado verdadeiro, mas " + result245 + " <str.contains('<trkpt lat=\'42.554839\' lon=\'1.536374\'><time>')> é falso")
chamada antiga: assertEquals(400, response.getStatus())
nova chamada: assertEquals(400, response.getStatus(), "Era esperado valores iguais, mas  400 é diferente de " + result246 + " <response.getStatus()>")
chamada antiga: assertTrue(res.contains("<gpx"))
nova chamada: assertTrue(res.contains("<gpx"), "Era esperado verdadeiro, mas " + result247 + " <res.contains('<gpx')> é falso")
chamada antiga: assertTrue(res.contains("<rtept lat="))
nova chamada: assertTrue(res.contains("<rtept lat="), "Era esperado verdadeiro, mas " + result248 + " <res.contains('<rtept lat=')> é falso")
chamada antiga: assertTrue(res.contains("<trk><name>GraphHopper Track</name><trkseg>"))
nova chamada: assertTrue(res.contains("<trk><name>GraphHopper Track</name><trkseg>"), "Era esperado verdadeiro, mas " + result249 + " <res.contains('<trk><name>GraphHopper Track</name><trkseg>')> é falso")
chamada antiga: assertTrue(res.endsWith("</gpx>"))
nova chamada: assertTrue(res.endsWith("</gpx>"), "Era esperado verdadeiro, mas " + result250 + " <res.endsWith('</gpx>')> é falso")
chamada antiga: assertTrue(res.contains("1970-01-04"))
nova chamada: assertTrue(res.contains("1970-01-04"), "Era esperado verdadeiro, mas " + result251 + " <res.contains('1970-01-04')> é falso")
chamada antiga: assertTrue(res.contains("<gpx"))
nova chamada: assertTrue(res.contains("<gpx"), "Era esperado verdadeiro, mas " + result252 + " <res.contains('<gpx')> é falso")
chamada antiga: assertTrue(res.contains("<rtept lat="))
nova chamada: assertTrue(res.contains("<rtept lat="), "Era esperado verdadeiro, mas " + result253 + " <res.contains('<rtept lat=')> é falso")
chamada antiga: assertTrue(res.endsWith("</gpx>"))
nova chamada: assertTrue(res.endsWith("</gpx>"), "Era esperado verdadeiro, mas " + result254 + " <res.endsWith('</gpx>')> é falso")
chamada antiga: assertEquals(400, response.getStatus())
nova chamada: assertEquals(400, response.getStatus(), "Era esperado valores iguais, mas  400 é diferente de " + result255 + " <response.getStatus()>")
chamada antiga: assertEquals(400, response.getStatus())
nova chamada: assertEquals(400, response.getStatus(), "Era esperado valores iguais, mas  400 é diferente de " + result256 + " <response.getStatus()>")
chamada antiga: assertEquals("You have to pass at least one point", json.get("message").asText())
nova chamada: assertEquals("You have to pass at least one point", json.get("message").asText(), "Era esperado valores iguais, mas  'You have to pass at least one point' é diferente de " + result257 + " <json.get('message').asText()>")
chamada antiga: assertEquals(400, response.getStatus())
nova chamada: assertEquals(400, response.getStatus(), "Era esperado valores iguais, mas  400 é diferente de " + result258 + " <response.getStatus()>")
chamada antiga: assertEquals("query param point is invalid: Cannot parse point 'pups'", json.get("message").asText())
nova chamada: assertEquals("query param point is invalid: Cannot parse point 'pups'", json.get("message").asText(), "Era esperado valores iguais, mas  'query param point is invalid: Cannot parse point 'pups'' é diferente de " + result259 + " <json.get('message').asText()>")
chamada antiga: assertEquals(400, response.getStatus())
nova chamada: assertEquals(400, response.getStatus(), "Era esperado valores iguais, mas  400 é diferente de " + result260 + " <response.getStatus()>")
chamada antiga: assertEquals("The number of 'heading' parameters must be zero, one or equal to the number of points (1)", json.get("message").asText())
nova chamada: assertEquals("The number of 'heading' parameters must be zero, one or equal to the number of points (1)", json.get("message").asText(), "Era esperado valores iguais, mas  'The number of 'heading' parameters must be zero, one or equal to the number of points (1)' é diferente de " + result261 + " <json.get('message').asText()>")
chamada antiga: assertEquals(200, response.getStatus())
nova chamada: assertEquals(200, response.getStatus(), "Era esperado valores iguais, mas  200 é diferente de " + result262 + " <response.getStatus()>")
chamada antiga: assertEquals(4, path.get("bbox").size())
nova chamada: assertEquals(4, path.get("bbox").size(), "Era esperado valores iguais, mas  4 é diferente de " + result263 + " <path.get('bbox').size()>")
chamada antiga: assertEquals(200, response.getStatus())
nova chamada: assertEquals(200, response.getStatus(), "Era esperado valores iguais, mas  200 é diferente de " + result264 + " <response.getStatus()>")
chamada antiga: assertEquals(200, response.getStatus())
nova chamada: assertEquals(200, response.getStatus(), "Era esperado valores iguais, mas  200 é diferente de " + result265 + " <response.getStatus()>")
chamada antiga: assertEquals("[longitude, latitude, time, distance]", headers.toString())
nova chamada: assertEquals("[longitude, latitude, time, distance]", headers.toString(), "Era esperado valores iguais, mas  '[longitude, latitude, time, distance]' é diferente de " + result266 + " <headers.toString()>")
chamada antiga: assertTrue(lines.length > 500)
nova chamada: assertTrue(lines.length > 500, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNotEquals(-1, prevTimeIndex)
nova chamada: assertNotEquals(-1, prevTimeIndex, "Era esperado valores diferentes, mas  -1 é igual a " + " prevTimeIndex")
chamada antiga: assertEquals(41, Integer.parseInt(row[prevTimeIndex]) / 1000)
nova chamada: assertEquals(41, Integer.parseInt(row[prevTimeIndex]) / 1000, "Era esperado valores iguais, mas  41 é diferente de " + " Integer.parseInt(row[prevTimeIndex]) / 1000")
chamada antiga: assertTrue(lines.length > 500)
nova chamada: assertTrue(lines.length > 500, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("prev_node_id,edge_id,node_id,time,distance", lines[0])
nova chamada: assertEquals("prev_node_id,edge_id,node_id,time,distance", lines[0], "Era esperado valores iguais, mas  'prev_node_id,edge_id,node_id,time,distance' é diferente de " + " lines[0]")
chamada antiga: assertEquals("-1,-1,1948,0,0", lines[1])
nova chamada: assertEquals("-1,-1,1948,0,0", lines[1], "Era esperado valores iguais, mas  '-1,-1,1948,0,0' é diferente de " + " lines[1]")
chamada antiga: assertEquals("1948,2277,1324,3817,74", lines[2])
nova chamada: assertEquals("1948,2277,1324,3817,74", lines[2], "Era esperado valores iguais, mas  '1948,2277,1324,3817,74' é diferente de " + " lines[2]")
chamada antiga: assertEquals("1948,2276,263,13496,262", lines[3])
nova chamada: assertEquals("1948,2276,263,13496,262", lines[3], "Era esperado valores iguais, mas  '1948,2276,263,13496,262' é diferente de " + " lines[3]")
chamada antiga: assertEquals("", row[0])
nova chamada: assertEquals("", row[0], "Era esperado valores iguais, mas  '' é diferente de " + " row[0]")
chamada antiga: assertEquals("service", row[1])
nova chamada: assertEquals("service", row[1], "Era esperado valores iguais, mas  'service' é diferente de " + " row[1]")
chamada antiga: assertEquals("Carretera d'Engolasters", row[0])
nova chamada: assertEquals("Carretera d'Engolasters", row[0], "Era esperado valores iguais, mas  'Carretera d'Engolasters' é diferente de " + " row[0]")
chamada antiga: assertEquals("secondary", row[1])
nova chamada: assertEquals("secondary", row[1], "Era esperado valores iguais, mas  'secondary' é diferente de " + " row[1]")
chamada antiga: assertTrue(Double.isInfinite(Double.parseDouble(row[2])))
nova chamada: assertTrue(Double.isInfinite(Double.parseDouble(row[2])), "Era esperado verdadeiro, mas " + result267 + " <Double.isInfinite(Double.parseDouble(row[2]))> é falso")
chamada antiga: assertEquals(400, rsp.getStatus())
nova chamada: assertEquals(400, rsp.getStatus(), "Era esperado valores iguais, mas  400 é diferente de " + result268 + " <rsp.getStatus()>")
chamada antiga: assertEquals(400, rsp.getStatus())
nova chamada: assertEquals(400, rsp.getStatus(), "Era esperado valores iguais, mas  400 é diferente de " + result269 + " <rsp.getStatus()>")
chamada antiga: assertFalse(route.hasErrors())
nova chamada: assertFalse(route.hasErrors(), "Era esperado falso, mas " + result270 + " <route.hasErrors()> é verdadeiro ")
chamada antiga: assertFalse(route.hasErrors())
nova chamada: assertFalse(route.hasErrors(), "Era esperado falso, mas " + result271 + " <route.hasErrors()> é verdadeiro ")
chamada antiga: assertFalse(route.hasErrors())
nova chamada: assertFalse(route.hasErrors(), "Era esperado falso, mas " + result272 + " <route.hasErrors()> é verdadeiro ")
chamada antiga: assertFalse(route.hasErrors())
nova chamada: assertFalse(route.hasErrors(), "Era esperado falso, mas " + result273 + " <route.hasErrors()> é verdadeiro ")
chamada antiga: assertFalse(route.getAll().isEmpty())
nova chamada: assertFalse(route.getAll().isEmpty(), "Era esperado falso, mas " + result274 + " <route.getAll().isEmpty()> é verdadeiro ")
chamada antiga: assertFalse(route.hasErrors())
nova chamada: assertFalse(route.hasErrors(), "Era esperado falso, mas " + result275 + " <route.hasErrors()> é verdadeiro ")
chamada antiga: assertFalse(route.getAll().isEmpty())
nova chamada: assertFalse(route.getAll().isEmpty(), "Era esperado falso, mas " + result276 + " <route.getAll().isEmpty()> é verdadeiro ")
chamada antiga: assertFalse(route.hasErrors())
nova chamada: assertFalse(route.hasErrors(), "Era esperado falso, mas " + result277 + " <route.hasErrors()> é verdadeiro ")
chamada antiga: assertFalse(route.getAll().isEmpty())
nova chamada: assertFalse(route.getAll().isEmpty(), "Era esperado falso, mas " + result278 + " <route.getAll().isEmpty()> é verdadeiro ")
chamada antiga: assertFalse(route.getAll().isEmpty())
nova chamada: assertFalse(route.getAll().isEmpty(), "Era esperado falso, mas " + result279 + " <route.getAll().isEmpty()> é verdadeiro ")
chamada antiga: assertFalse(route.getAll().isEmpty())
nova chamada: assertFalse(route.getAll().isEmpty(), "Era esperado falso, mas " + result280 + " <route.getAll().isEmpty()> é verdadeiro ")
chamada antiga: assertFalse(route.hasErrors())
nova chamada: assertFalse(route.hasErrors(), "Era esperado falso, mas " + result281 + " <route.hasErrors()> é verdadeiro ")
chamada antiga: assertFalse(route.getAll().isEmpty())
nova chamada: assertFalse(route.getAll().isEmpty(), "Era esperado falso, mas " + result282 + " <route.getAll().isEmpty()> é verdadeiro ")
chamada antiga: assertFalse(gpxStr.contains("NaN"))
nova chamada: assertFalse(gpxStr.contains("NaN"), "Era esperado falso, mas " + result283 + " <gpxStr.contains('NaN')> é verdadeiro ")
chamada antiga: assertFalse(rsp.hasErrors())
nova chamada: assertFalse(rsp.hasErrors(), "Era esperado falso, mas " + result284 + " <rsp.hasErrors()> é verdadeiro ")
chamada antiga: assertFalse(rsp.hasErrors())
nova chamada: assertFalse(rsp.hasErrors(), "Era esperado falso, mas " + result285 + " <rsp.hasErrors()> é verdadeiro ")
chamada antiga: assertFalse(rsp.hasErrors())
nova chamada: assertFalse(rsp.hasErrors(), "Era esperado falso, mas " + result286 + " <rsp.hasErrors()> é verdadeiro ")
chamada antiga: assertFalse(rsp.hasErrors())
nova chamada: assertFalse(rsp.hasErrors(), "Era esperado falso, mas " + result287 + " <rsp.hasErrors()> é verdadeiro ")
chamada antiga: assertFalse(infoJson.has("errors"))
nova chamada: assertFalse(infoJson.has("errors"), "Era esperado falso, mas " + result288 + " <infoJson.has('errors')> é verdadeiro ")
chamada antiga: assertFalse(infoJson.has("errors"))
nova chamada: assertFalse(infoJson.has("errors"), "Era esperado falso, mas " + result289 + " <infoJson.has('errors')> é verdadeiro ")
chamada antiga: assertFalse(response.readEntity(JsonNode.class).get("info").has("errors"))
nova chamada: assertFalse(response.readEntity(JsonNode.class).get("info").has("errors"), "Era esperado falso, mas " + result290 + " <response.readEntity(JsonNode.class).get('info').has('errors')> é verdadeiro ")
chamada antiga: assertFalse(infoJson.has("errors"))
nova chamada: assertFalse(infoJson.has("errors"), "Era esperado falso, mas " + result291 + " <infoJson.has('errors')> é verdadeiro ")
chamada antiga: assertFalse(infoJson.has("errors"))
nova chamada: assertFalse(infoJson.has("errors"), "Era esperado falso, mas " + result292 + " <infoJson.has('errors')> é verdadeiro ")
chamada antiga: assertFalse((Boolean) rsp.getBest().getPathDetails().get(RoadClassLink.KEY).get(0).getValue())
nova chamada: assertFalse((Boolean) rsp.getBest().getPathDetails().get(RoadClassLink.KEY).get(0).getValue(), "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: assertFalse(pathDetails.isEmpty())
nova chamada: assertFalse(pathDetails.isEmpty(), "Era esperado falso, mas " + result293 + " <pathDetails.isEmpty()> é verdadeiro ")
chamada antiga: assertFalse(infoJson.has("errors"))
nova chamada: assertFalse(infoJson.has("errors"), "Era esperado falso, mas " + result294 + " <infoJson.has('errors')> é verdadeiro ")
chamada antiga: assertFalse(rsp.hasErrors())
nova chamada: assertFalse(rsp.hasErrors(), "Era esperado falso, mas " + result295 + " <rsp.hasErrors()> é verdadeiro ")
chamada antiga: assertFalse(str.contains("<wpt lat=\"42.51003\" lon=\"1.548188\"> <name>Finish!</name></wpt>"))
nova chamada: assertFalse(str.contains("<wpt lat=\"42.51003\" lon=\"1.548188\"> <name>Finish!</name></wpt>"), "Era esperado falso, mas " + result296 + " <str.contains('<wpt lat=\'42.51003\' lon=\'1.548188\'> <name>Finish!</name></wpt>')> é verdadeiro ")
chamada antiga: assertFalse(str.contains("<gh:distance>115.1</gh:distance>"))
nova chamada: assertFalse(str.contains("<gh:distance>115.1</gh:distance>"), "Era esperado falso, mas " + result297 + " <str.contains('<gh:distance>115.1</gh:distance>')> é verdadeiro ")
chamada antiga: assertFalse(str.contains("<wpt lat=\"42.51003\" lon=\"1.548188\"> <name>Finish!</name></wpt>"))
nova chamada: assertFalse(str.contains("<wpt lat=\"42.51003\" lon=\"1.548188\"> <name>Finish!</name></wpt>"), "Era esperado falso, mas " + result298 + " <str.contains('<wpt lat=\'42.51003\' lon=\'1.548188\'> <name>Finish!</name></wpt>')> é verdadeiro ")
chamada antiga: assertFalse(str.contains("<gh:distance>115.1</gh:distance>"))
nova chamada: assertFalse(str.contains("<gh:distance>115.1</gh:distance>"), "Era esperado falso, mas " + result299 + " <str.contains('<gh:distance>115.1</gh:distance>')> é verdadeiro ")
chamada antiga: assertFalse(res.contains("<trk><name>GraphHopper Track</name><trkseg>"))
nova chamada: assertFalse(res.contains("<trk><name>GraphHopper Track</name><trkseg>"), "Era esperado falso, mas " + result300 + " <res.contains('<trk><name>GraphHopper Track</name><trkseg>')> é verdadeiro ")
chamada antiga: assertFalse(infoJson.has("errors"))
nova chamada: assertFalse(infoJson.has("errors"), "Era esperado falso, mas " + result301 + " <infoJson.has('errors')> é verdadeiro ")
chamada antiga: assertFalse(infoJson.has("errors"))
nova chamada: assertFalse(infoJson.has("errors"), "Era esperado falso, mas " + result302 + " <infoJson.has('errors')> é verdadeiro ")
chamada antiga: assertFalse(infoJson.has("errors"))
nova chamada: assertFalse(infoJson.has("errors"), "Era esperado falso, mas " + result303 + " <infoJson.has('errors')> é verdadeiro ")
chamada antiga: assertFalse(infoJson.has("errors"))
nova chamada: assertFalse(infoJson.has("errors"), "Era esperado falso, mas " + result304 + " <infoJson.has('errors')> é verdadeiro ")
chamada antiga: assertTrue(isoline.covers(geometryFactory.createPoint(makePrecise(new Coordinate(-116.76821, 36.914893)))))
nova chamada: assertTrue(isoline.covers(geometryFactory.createPoint(makePrecise(new Coordinate(-116.76821, 36.914893)))), "Era esperado verdadeiro, mas " + result305 + " <isoline.covers(geometryFactory.createPoint(makePrecise(new Coordinate(-116.76821, 36.914893))))> é falso")
chamada antiga: assertTrue(isoline.covers(geometryFactory.createPoint(makePrecise(new Coordinate(-116.761472, 36.914944)))))
nova chamada: assertTrue(isoline.covers(geometryFactory.createPoint(makePrecise(new Coordinate(-116.761472, 36.914944)))), "Era esperado verdadeiro, mas " + result306 + " <isoline.covers(geometryFactory.createPoint(makePrecise(new Coordinate(-116.761472, 36.914944))))> é falso")
chamada antiga: assertTrue(isoline.covers(geometryFactory.createPoint(makePrecise(new Coordinate(-116.768242, 36.909489)))))
nova chamada: assertTrue(isoline.covers(geometryFactory.createPoint(makePrecise(new Coordinate(-116.768242, 36.909489)))), "Era esperado verdadeiro, mas " + result307 + " <isoline.covers(geometryFactory.createPoint(makePrecise(new Coordinate(-116.768242, 36.909489))))> é falso")
chamada antiga: assertTrue(isoline.covers(geometryFactory.createPoint(makePrecise(new Coordinate(-116.76218, 36.905697)))))
nova chamada: assertTrue(isoline.covers(geometryFactory.createPoint(makePrecise(new Coordinate(-116.76218, 36.905697)))), "Era esperado verdadeiro, mas " + result308 + " <isoline.covers(geometryFactory.createPoint(makePrecise(new Coordinate(-116.76218, 36.905697))))> é falso")
chamada antiga: assertFalse(isoline.covers(geometryFactory.createPoint(makePrecise(new Coordinate(-116.751677, 36.915682)))))
nova chamada: assertFalse(isoline.covers(geometryFactory.createPoint(makePrecise(new Coordinate(-116.751677, 36.915682)))), "Era esperado falso, mas " + result309 + " <isoline.covers(geometryFactory.createPoint(makePrecise(new Coordinate(-116.751677, 36.915682))))> é verdadeiro ")
chamada antiga: assertTrue(isoline.covers(geometryFactory.createPoint(makePrecise(new Coordinate(-116.76821, 36.914893)))))
nova chamada: assertTrue(isoline.covers(geometryFactory.createPoint(makePrecise(new Coordinate(-116.76821, 36.914893)))), "Era esperado verdadeiro, mas " + result310 + " <isoline.covers(geometryFactory.createPoint(makePrecise(new Coordinate(-116.76821, 36.914893))))> é falso")
chamada antiga: assertTrue(isoline.covers(geometryFactory.createPoint(makePrecise(new Coordinate(-116.761472, 36.914944)))))
nova chamada: assertTrue(isoline.covers(geometryFactory.createPoint(makePrecise(new Coordinate(-116.761472, 36.914944)))), "Era esperado verdadeiro, mas " + result311 + " <isoline.covers(geometryFactory.createPoint(makePrecise(new Coordinate(-116.761472, 36.914944))))> é falso")
chamada antiga: assertTrue(isoline.covers(geometryFactory.createPoint(makePrecise(new Coordinate(-116.768242, 36.909489)))))
nova chamada: assertTrue(isoline.covers(geometryFactory.createPoint(makePrecise(new Coordinate(-116.768242, 36.909489)))), "Era esperado verdadeiro, mas " + result312 + " <isoline.covers(geometryFactory.createPoint(makePrecise(new Coordinate(-116.768242, 36.909489))))> é falso")
chamada antiga: assertTrue(isoline.covers(geometryFactory.createPoint(makePrecise(new Coordinate(-116.76218, 36.905697)))))
nova chamada: assertTrue(isoline.covers(geometryFactory.createPoint(makePrecise(new Coordinate(-116.76218, 36.905697)))), "Era esperado verdadeiro, mas " + result313 + " <isoline.covers(geometryFactory.createPoint(makePrecise(new Coordinate(-116.76218, 36.905697))))> é falso")
chamada antiga: assertFalse(isoline.covers(geometryFactory.createPoint(makePrecise(new Coordinate(-116.751677, 36.915682)))))
nova chamada: assertFalse(isoline.covers(geometryFactory.createPoint(makePrecise(new Coordinate(-116.751677, 36.915682)))), "Era esperado falso, mas " + result314 + " <isoline.covers(geometryFactory.createPoint(makePrecise(new Coordinate(-116.751677, 36.915682))))> é verdadeiro ")
chamada antiga: assertEquals(400, response.getStatus())
nova chamada: assertEquals(400, response.getStatus(), "Era esperado valores iguais, mas  400 é diferente de " + result315 + " <response.getStatus()>")
chamada antiga: assertEquals(200, response.getStatus())
nova chamada: assertEquals(200, response.getStatus(), "Era esperado valores iguais, mas  200 é diferente de " + result316 + " <response.getStatus()>")
chamada antiga: assertEquals(200, response.getStatus())
nova chamada: assertEquals(200, response.getStatus(), "Era esperado valores iguais, mas  200 é diferente de " + result317 + " <response.getStatus()>")
chamada antiga: assertEquals(200, response.getStatus())
nova chamada: assertEquals(200, response.getStatus(), "Era esperado valores iguais, mas  200 é diferente de " + result318 + " <response.getStatus()>")
chamada antiga: assertEquals(200, response.getStatus())
nova chamada: assertEquals(200, response.getStatus(), "Era esperado valores iguais, mas  200 é diferente de " + result319 + " <response.getStatus()>")
chamada antiga: assertEquals(400, response.getStatus())
nova chamada: assertEquals(400, response.getStatus(), "Era esperado valores iguais, mas  400 é diferente de " + result320 + " <response.getStatus()>")
chamada antiga: assertTrue(message.isValueNode())
nova chamada: assertTrue(message.isValueNode(), "Era esperado verdadeiro, mas " + result321 + " <message.isValueNode()> é falso")
chamada antiga: assertTrue(message.asText().startsWith("No tracks found"))
nova chamada: assertTrue(message.asText().startsWith("No tracks found"), "Era esperado verdadeiro, mas " + result322 + " <message.asText().startsWith('No tracks found')> é falso")
chamada antiga: assertTrue(json.has("message"))
nova chamada: assertTrue(json.has("message"), "Era esperado verdadeiro, mas " + result323 + " <json.has('message')> é falso")
chamada antiga: assertFalse(infoJson.has("errors"))
nova chamada: assertFalse(infoJson.has("errors"), "Era esperado falso, mas " + result324 + " <infoJson.has('errors')> é verdadeiro ")
chamada antiga: assertFalse(infoJson.has("errors"))
nova chamada: assertFalse(infoJson.has("errors"), "Era esperado falso, mas " + result325 + " <infoJson.has('errors')> é verdadeiro ")
chamada antiga: assertFalse(infoJson.has("errors"))
nova chamada: assertFalse(infoJson.has("errors"), "Era esperado falso, mas " + result326 + " <infoJson.has('errors')> é verdadeiro ")
chamada antiga: assertEquals(code, response.getStatus())
nova chamada: assertEquals(code, response.getStatus(), "Era esperado valores iguais, mas  code é diferente de " + result327 + " <response.getStatus()>")
chamada antiga: assertEquals(2, featureCollection.getFeatures().size())
nova chamada: assertEquals(2, featureCollection.getFeatures().size(), "Era esperado valores iguais, mas  2 é diferente de " + result328 + " <featureCollection.getFeatures().size()>")
chamada antiga: assertTrue(polygon0.contains(geometryFactory.createPoint(new Coordinate(1.587224, 42.5386))))
nova chamada: assertTrue(polygon0.contains(geometryFactory.createPoint(new Coordinate(1.587224, 42.5386))), "Era esperado verdadeiro, mas " + result329 + " <polygon0.contains(geometryFactory.createPoint(new Coordinate(1.587224, 42.5386)))> é falso")
chamada antiga: assertTrue(polygon1.contains(geometryFactory.createPoint(new Coordinate(1.589756, 42.558012))))
nova chamada: assertTrue(polygon1.contains(geometryFactory.createPoint(new Coordinate(1.589756, 42.558012))), "Era esperado verdadeiro, mas " + result330 + " <polygon1.contains(geometryFactory.createPoint(new Coordinate(1.589756, 42.558012)))> é falso")
chamada antiga: assertEquals(2, featureCollection.getFeatures().size())
nova chamada: assertEquals(2, featureCollection.getFeatures().size(), "Era esperado valores iguais, mas  2 é diferente de " + result331 + " <featureCollection.getFeatures().size()>")
chamada antiga: assertTrue(polygon0.contains(geometryFactory.createPoint(new Coordinate(1.587224, 42.5386))))
nova chamada: assertTrue(polygon0.contains(geometryFactory.createPoint(new Coordinate(1.587224, 42.5386))), "Era esperado verdadeiro, mas " + result332 + " <polygon0.contains(geometryFactory.createPoint(new Coordinate(1.587224, 42.5386)))> é falso")
chamada antiga: assertTrue(polygon1.contains(geometryFactory.createPoint(new Coordinate(1.589756, 42.558012))))
nova chamada: assertTrue(polygon1.contains(geometryFactory.createPoint(new Coordinate(1.589756, 42.558012))), "Era esperado verdadeiro, mas " + result333 + " <polygon1.contains(geometryFactory.createPoint(new Coordinate(1.589756, 42.558012)))> é falso")
chamada antiga: assertEquals(2, featureCollection.getFeatures().size())
nova chamada: assertEquals(2, featureCollection.getFeatures().size(), "Era esperado valores iguais, mas  2 é diferente de " + result334 + " <featureCollection.getFeatures().size()>")
chamada antiga: assertTrue(polygon0.contains(geometryFactory.createPoint(new Coordinate(1.57937, 42.531706))))
nova chamada: assertTrue(polygon0.contains(geometryFactory.createPoint(new Coordinate(1.57937, 42.531706))), "Era esperado verdadeiro, mas " + result335 + " <polygon0.contains(geometryFactory.createPoint(new Coordinate(1.57937, 42.531706)))> é falso")
chamada antiga: assertTrue(polygon1.contains(geometryFactory.createPoint(new Coordinate(1.591644, 42.543216))))
nova chamada: assertTrue(polygon1.contains(geometryFactory.createPoint(new Coordinate(1.591644, 42.543216))), "Era esperado verdadeiro, mas " + result336 + " <polygon1.contains(geometryFactory.createPoint(new Coordinate(1.591644, 42.543216)))> é falso")
chamada antiga: assertEquals(distanceLimitPolygon.getNumPoints(), weightLimitPolygon.getNumPoints())
nova chamada: assertEquals(distanceLimitPolygon.getNumPoints(), weightLimitPolygon.getNumPoints(), "Era esperado valores iguais, mas " + result337 + " <distanceLimitPolygon.getNumPoints()> é diferente de " + result338 + " <weightLimitPolygon.getNumPoints()>")
chamada antiga: assertTrue(weightLimitPolygon.equalsTopo(distanceLimitPolygon))
nova chamada: assertTrue(weightLimitPolygon.equalsTopo(distanceLimitPolygon), "Era esperado verdadeiro, mas " + result339 + " <weightLimitPolygon.equalsTopo(distanceLimitPolygon)> é falso")
chamada antiga: assertEquals(2, featureCollection.getFeatures().size())
nova chamada: assertEquals(2, featureCollection.getFeatures().size(), "Era esperado valores iguais, mas  2 é diferente de " + result340 + " <featureCollection.getFeatures().size()>")
chamada antiga: assertTrue(polygon0.contains(geometryFactory.createPoint(new Coordinate(1.587224, 42.5386))))
nova chamada: assertTrue(polygon0.contains(geometryFactory.createPoint(new Coordinate(1.587224, 42.5386))), "Era esperado verdadeiro, mas " + result341 + " <polygon0.contains(geometryFactory.createPoint(new Coordinate(1.587224, 42.5386)))> é falso")
chamada antiga: assertTrue(polygon1.contains(geometryFactory.createPoint(new Coordinate(1.589756, 42.558012))))
nova chamada: assertTrue(polygon1.contains(geometryFactory.createPoint(new Coordinate(1.589756, 42.558012))), "Era esperado verdadeiro, mas " + result342 + " <polygon1.contains(geometryFactory.createPoint(new Coordinate(1.589756, 42.558012)))> é falso")
chamada antiga: assertEquals(0, bucketNumber)
nova chamada: assertEquals(0, bucketNumber, "Era esperado valores iguais, mas  0 é diferente de " + " bucketNumber")
chamada antiga: assertEquals(400, response.getStatus())
nova chamada: assertEquals(400, response.getStatus(), "Era esperado valores iguais, mas  400 é diferente de " + result343 + " <response.getStatus()>")
chamada antiga: assertEquals(200, rsp.getStatus())
nova chamada: assertEquals(200, rsp.getStatus(), "Era esperado valores iguais, mas  200 é diferente de " + result344 + " <rsp.getStatus()>")
chamada antiga: assertEquals(400, rsp.getStatus())
nova chamada: assertEquals(400, rsp.getStatus(), "Era esperado valores iguais, mas  400 é diferente de " + result345 + " <rsp.getStatus()>")
chamada antiga: assertEquals(400, rsp.getStatus())
nova chamada: assertEquals(400, rsp.getStatus(), "Era esperado valores iguais, mas  400 é diferente de " + result346 + " <rsp.getStatus()>")
chamada antiga: assertEquals(1, featureCollection.getFeatures().size())
nova chamada: assertEquals(1, featureCollection.getFeatures().size(), "Era esperado valores iguais, mas  1 é diferente de " + result347 + " <featureCollection.getFeatures().size()>")
chamada antiga: assertTrue(polygon0.contains(geometryFactory.createPoint(new Coordinate(1.527057, 42.507145))))
nova chamada: assertTrue(polygon0.contains(geometryFactory.createPoint(new Coordinate(1.527057, 42.507145))), "Era esperado verdadeiro, mas " + result348 + " <polygon0.contains(geometryFactory.createPoint(new Coordinate(1.527057, 42.507145)))> é falso")
chamada antiga: assertAll(Arrays.stream(geometry.getCoordinates()).map(coord -> () -> assertTrue(Double.isNaN(coord.z))))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", Arrays.stream(geometry.getCoordinates()).map(coord -> () -> assertTrue(Double.isNaN(coord.z))))
chamada antiga: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", Arrays.stream(geometry.getCoordinates()).map(coord -> () -> assertTrue(Double.isNaN(coord.z))))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", "Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", Arrays.stream(geometry.getCoordinates()).map(coord -> () -> assertTrue(Double.isNaN(coord.z))))
chamada antiga: assertEquals(400, response.getStatus())
nova chamada: assertEquals(400, response.getStatus(), "Era esperado valores iguais, mas  400 é diferente de " + result351 + " <response.getStatus()>")
chamada antiga: assertEquals("query param type must be one of [json, geojson]", message)
nova chamada: assertEquals("query param type must be one of [json, geojson]", message, "Era esperado valores iguais, mas  'query param type must be one of [json, geojson]' é diferente de " + " message")
chamada antiga: assertEquals(200, response.getStatus())
nova chamada: assertEquals(200, response.getStatus(), "Era esperado valores iguais, mas  200 é diferente de " + result352 + " <response.getStatus()>")
chamada antiga: assertEquals(400, response.getStatus())
nova chamada: assertEquals(400, response.getStatus(), "Era esperado valores iguais, mas  400 é diferente de " + result353 + " <response.getStatus()>")
chamada antiga: assertEquals("query param time_limit is not a number.", message)
nova chamada: assertEquals("query param time_limit is not a number.", message, "Era esperado valores iguais, mas  'query param time_limit is not a number.' é diferente de " + " message")
chamada antiga: assertEquals(2, featureCollection.getFeatures().size())
nova chamada: assertEquals(2, featureCollection.getFeatures().size(), "Era esperado valores iguais, mas  2 é diferente de " + result354 + " <featureCollection.getFeatures().size()>")
chamada antiga: assertTrue(polygon0.contains(geometryFactory.createPoint(new Coordinate(1.587224, 42.5386))))
nova chamada: assertTrue(polygon0.contains(geometryFactory.createPoint(new Coordinate(1.587224, 42.5386))), "Era esperado verdadeiro, mas " + result355 + " <polygon0.contains(geometryFactory.createPoint(new Coordinate(1.587224, 42.5386)))> é falso")
chamada antiga: assertTrue(polygon1.contains(geometryFactory.createPoint(new Coordinate(1.58864, 42.554582))))
nova chamada: assertTrue(polygon1.contains(geometryFactory.createPoint(new Coordinate(1.58864, 42.554582))), "Era esperado verdadeiro, mas " + result356 + " <polygon1.contains(geometryFactory.createPoint(new Coordinate(1.58864, 42.554582)))> é falso")
chamada antiga: assertTrue(json.has("polygons"))
nova chamada: assertTrue(json.has("polygons"), "Era esperado verdadeiro, mas " + result357 + " <json.has('polygons')> é falso")
chamada antiga: assertTrue(json.has("info"))
nova chamada: assertTrue(json.has("info"), "Era esperado verdadeiro, mas " + result358 + " <json.has('info')> é falso")
chamada antiga: assertTrue(json.has("polygons"))
nova chamada: assertTrue(json.has("polygons"), "Era esperado verdadeiro, mas " + result359 + " <json.has('polygons')> é falso")
chamada antiga: assertTrue(json.has("info"))
nova chamada: assertTrue(json.has("info"), "Era esperado verdadeiro, mas " + result360 + " <json.has('info')> é falso")
chamada antiga: assertTrue(json.has("type"))
nova chamada: assertTrue(json.has("type"), "Era esperado verdadeiro, mas " + result361 + " <json.has('type')> é falso")
chamada antiga: assertEquals(json.path("type").asText(), "FeatureCollection")
nova chamada: assertEquals(json.path("type").asText(), "FeatureCollection", "Era esperado valores iguais, mas " + result362 + " <json.path('type').asText()> é diferente de " + " 'FeatureCollection'")
chamada antiga: assertTrue(json.has("features"))
nova chamada: assertTrue(json.has("features"), "Era esperado verdadeiro, mas " + result363 + " <json.has('features')> é falso")
chamada antiga: assertTrue(firstFeature.isObject())
nova chamada: assertTrue(firstFeature.isObject(), "Era esperado verdadeiro, mas " + result364 + " <firstFeature.isObject()> é falso")
chamada antiga: assertTrue(firstFeature.path("properties").has("bucket"))
nova chamada: assertTrue(firstFeature.path("properties").has("bucket"), "Era esperado verdadeiro, mas " + result365 + " <firstFeature.path('properties').has('bucket')> é falso")
chamada antiga: assertTrue(firstFeature.path("properties").has("copyrights"))
nova chamada: assertTrue(firstFeature.path("properties").has("copyrights"), "Era esperado verdadeiro, mas " + result366 + " <firstFeature.path('properties').has('copyrights')> é falso")
chamada antiga: assertEquals(firstFeature.path("type").asText(), "Feature")
nova chamada: assertEquals(firstFeature.path("type").asText(), "Feature", "Era esperado valores iguais, mas " + result367 + " <firstFeature.path('type').asText()> é diferente de " + " 'Feature'")
chamada antiga: assertEquals(firstFeature.path("geometry").path("type").asText(), "Polygon")
nova chamada: assertEquals(firstFeature.path("geometry").path("type").asText(), "Polygon", "Era esperado valores iguais, mas " + result368 + " <firstFeature.path('geometry').path('type').asText()> é diferente de " + " 'Polygon'")
chamada antiga: assertEquals(firstFeature.path("properties").path("bucket").asInt(), 0)
nova chamada: assertEquals(firstFeature.path("properties").path("bucket").asInt(), 0, "Era esperado valores iguais, mas " + result369 + " <firstFeature.path('properties').path('bucket').asInt()> é diferente de " + " 0")
chamada antiga: assertEquals(firstFeature.path("geometry").path("type").asText(), "Polygon")
nova chamada: assertEquals(firstFeature.path("geometry").path("type").asText(), "Polygon", "Era esperado valores iguais, mas " + result370 + " <firstFeature.path('geometry').path('type').asText()> é diferente de " + " 'Polygon'")
chamada antiga: assertEquals(lastFeature.path("properties").path("bucket").asInt(), 2)
nova chamada: assertEquals(lastFeature.path("properties").path("bucket").asInt(), 2, "Era esperado valores iguais, mas " + result371 + " <lastFeature.path('properties').path('bucket').asInt()> é diferente de " + " 2")
chamada antiga: assertEquals(lastFeature.path("geometry").path("type").asText(), "Polygon")
nova chamada: assertEquals(lastFeature.path("geometry").path("type").asText(), "Polygon", "Era esperado valores iguais, mas " + result372 + " <lastFeature.path('geometry').path('type').asText()> é diferente de " + " 'Polygon'")
chamada antiga: assertTrue(lastPolygon.contains(geometryFactory.createPoint(new Coordinate(1.580229, 42.533161))))
nova chamada: assertTrue(lastPolygon.contains(geometryFactory.createPoint(new Coordinate(1.580229, 42.533161))), "Era esperado verdadeiro, mas " + result373 + " <lastPolygon.contains(geometryFactory.createPoint(new Coordinate(1.580229, 42.533161)))> é falso")
chamada antiga: assertTrue(beforeLastPolygon.contains(geometryFactory.createPoint(new Coordinate(1.564136, 42.524938))))
nova chamada: assertTrue(beforeLastPolygon.contains(geometryFactory.createPoint(new Coordinate(1.564136, 42.524938))), "Era esperado verdadeiro, mas " + result374 + " <beforeLastPolygon.contains(geometryFactory.createPoint(new Coordinate(1.564136, 42.524938)))> é falso")
chamada antiga: assertEquals("The requested profile 'foot_profile' cannot be used with `custom_model`, because it has weighting=fastest", jsonNode.get("message").asText())
nova chamada: assertEquals("The requested profile 'foot_profile' cannot be used with `custom_model`, because it has weighting=fastest", jsonNode.get("message").asText(), "Era esperado valores iguais, mas  'The requested profile 'foot_profile' cannot be used with `custom_model`, because it has weighting=fastest' é diferente de " + result375 + " <jsonNode.get('message').asText()>")
chamada antiga: assertEquals("Since you are using the 'profile' parameter, do not use the 'vehicle' parameter. You used 'vehicle=truck'", jsonNode.get("message").asText())
nova chamada: assertEquals("Since you are using the 'profile' parameter, do not use the 'vehicle' parameter. You used 'vehicle=truck'", jsonNode.get("message").asText(), "Era esperado valores iguais, mas  'Since you are using the 'profile' parameter, do not use the 'vehicle' parameter. You used 'vehicle=truck'' é diferente de " + result376 + " <jsonNode.get('message').asText()>")
chamada antiga: assertEquals("Since you are using the 'profile' parameter, do not use the 'weighting' parameter. You used 'weighting=custom'", jsonNode.get("message").asText())
nova chamada: assertEquals("Since you are using the 'profile' parameter, do not use the 'weighting' parameter. You used 'weighting=custom'", jsonNode.get("message").asText(), "Era esperado valores iguais, mas  'Since you are using the 'profile' parameter, do not use the 'weighting' parameter. You used 'weighting=custom'' é diferente de " + result377 + " <jsonNode.get('message').asText()>")
chamada antiga: assertNotNull(jsonNode.get("message"))
nova chamada: assertNotNull(jsonNode.get("message"), "Era esperado não nulo, mas " + result378 + " <jsonNode.get('message')> é nulo")
chamada antiga: assertFalse(polygon0.contains(geometryFactory.createPoint(new Coordinate(1.589756, 42.558012))))
nova chamada: assertFalse(polygon0.contains(geometryFactory.createPoint(new Coordinate(1.589756, 42.558012))), "Era esperado falso, mas " + result379 + " <polygon0.contains(geometryFactory.createPoint(new Coordinate(1.589756, 42.558012)))> é verdadeiro ")
chamada antiga: assertFalse(polygon1.contains(geometryFactory.createPoint(new Coordinate(1.635246, 42.53841))))
nova chamada: assertFalse(polygon1.contains(geometryFactory.createPoint(new Coordinate(1.635246, 42.53841))), "Era esperado falso, mas " + result380 + " <polygon1.contains(geometryFactory.createPoint(new Coordinate(1.635246, 42.53841)))> é verdadeiro ")
chamada antiga: assertFalse(polygon0.contains(geometryFactory.createPoint(new Coordinate(1.589756, 42.558012))))
nova chamada: assertFalse(polygon0.contains(geometryFactory.createPoint(new Coordinate(1.589756, 42.558012))), "Era esperado falso, mas " + result381 + " <polygon0.contains(geometryFactory.createPoint(new Coordinate(1.589756, 42.558012)))> é verdadeiro ")
chamada antiga: assertFalse(polygon1.contains(geometryFactory.createPoint(new Coordinate(1.635246, 42.53841))))
nova chamada: assertFalse(polygon1.contains(geometryFactory.createPoint(new Coordinate(1.635246, 42.53841))), "Era esperado falso, mas " + result382 + " <polygon1.contains(geometryFactory.createPoint(new Coordinate(1.635246, 42.53841)))> é verdadeiro ")
chamada antiga: assertFalse(polygon0.contains(geometryFactory.createPoint(new Coordinate(1.587224, 42.5386))))
nova chamada: assertFalse(polygon0.contains(geometryFactory.createPoint(new Coordinate(1.587224, 42.5386))), "Era esperado falso, mas " + result383 + " <polygon0.contains(geometryFactory.createPoint(new Coordinate(1.587224, 42.5386)))> é verdadeiro ")
chamada antiga: assertFalse(polygon1.contains(geometryFactory.createPoint(new Coordinate(1.589756, 42.558012))))
nova chamada: assertFalse(polygon1.contains(geometryFactory.createPoint(new Coordinate(1.589756, 42.558012))), "Era esperado falso, mas " + result384 + " <polygon1.contains(geometryFactory.createPoint(new Coordinate(1.589756, 42.558012)))> é verdadeiro ")
chamada antiga: assertFalse(polygon0.contains(geometryFactory.createPoint(new Coordinate(1.589756, 42.558012))))
nova chamada: assertFalse(polygon0.contains(geometryFactory.createPoint(new Coordinate(1.589756, 42.558012))), "Era esperado falso, mas " + result385 + " <polygon0.contains(geometryFactory.createPoint(new Coordinate(1.589756, 42.558012)))> é verdadeiro ")
chamada antiga: assertFalse(polygon1.contains(geometryFactory.createPoint(new Coordinate(1.635246, 42.53841))))
nova chamada: assertFalse(polygon1.contains(geometryFactory.createPoint(new Coordinate(1.635246, 42.53841))), "Era esperado falso, mas " + result386 + " <polygon1.contains(geometryFactory.createPoint(new Coordinate(1.635246, 42.53841)))> é verdadeiro ")
chamada antiga: assertFalse(polygon0.contains(geometryFactory.createPoint(new Coordinate(1.525404, 42.507081))))
nova chamada: assertFalse(polygon0.contains(geometryFactory.createPoint(new Coordinate(1.525404, 42.507081))), "Era esperado falso, mas " + result387 + " <polygon0.contains(geometryFactory.createPoint(new Coordinate(1.525404, 42.507081)))> é verdadeiro ")
chamada antiga: assertFalse(polygon0.contains(geometryFactory.createPoint(new Coordinate(1.589756, 42.558012))))
nova chamada: assertFalse(polygon0.contains(geometryFactory.createPoint(new Coordinate(1.589756, 42.558012))), "Era esperado falso, mas " + result388 + " <polygon0.contains(geometryFactory.createPoint(new Coordinate(1.589756, 42.558012)))> é verdadeiro ")
chamada antiga: assertFalse(polygon1.contains(geometryFactory.createPoint(new Coordinate(1.589756, 42.558012))))
nova chamada: assertFalse(polygon1.contains(geometryFactory.createPoint(new Coordinate(1.589756, 42.558012))), "Era esperado falso, mas " + result389 + " <polygon1.contains(geometryFactory.createPoint(new Coordinate(1.589756, 42.558012)))> é verdadeiro ")
chamada antiga: assertFalse(polygon1.contains(geometryFactory.createPoint(new Coordinate(1.635246, 42.53841))))
nova chamada: assertFalse(polygon1.contains(geometryFactory.createPoint(new Coordinate(1.635246, 42.53841))), "Era esperado falso, mas " + result390 + " <polygon1.contains(geometryFactory.createPoint(new Coordinate(1.635246, 42.53841)))> é verdadeiro ")
chamada antiga: assertFalse(json.has("polygons"))
nova chamada: assertFalse(json.has("polygons"), "Era esperado falso, mas " + result391 + " <json.has('polygons')> é verdadeiro ")
chamada antiga: assertFalse(json.has("info"))
nova chamada: assertFalse(json.has("info"), "Era esperado falso, mas " + result392 + " <json.has('info')> é verdadeiro ")
chamada antiga: assertFalse(lastPolygon.contains(geometryFactory.createPoint(new Coordinate(1.584606, 42.535121))))
nova chamada: assertFalse(lastPolygon.contains(geometryFactory.createPoint(new Coordinate(1.584606, 42.535121))), "Era esperado falso, mas " + result393 + " <lastPolygon.contains(geometryFactory.createPoint(new Coordinate(1.584606, 42.535121)))> é verdadeiro ")
chamada antiga: assertFalse(beforeLastPolygon.contains(geometryFactory.createPoint(new Coordinate(1.571474, 42.529176))))
nova chamada: assertFalse(beforeLastPolygon.contains(geometryFactory.createPoint(new Coordinate(1.571474, 42.529176))), "Era esperado falso, mas " + result394 + " <beforeLastPolygon.contains(geometryFactory.createPoint(new Coordinate(1.571474, 42.529176)))> é verdadeiro ")
chamada antiga: assertFalse(json.get("info").has("errors"))
nova chamada: assertFalse(json.get("info").has("errors"), "Era esperado falso, mas " + result395 + " <json.get('info').has('errors')> é verdadeiro ")
chamada antiga: assertEquals(200, response.getStatus())
nova chamada: assertEquals(200, response.getStatus(), "Era esperado valores iguais, mas  200 é diferente de " + result396 + " <response.getStatus()>")
chamada antiga: assertEquals(200, response.getStatus())
nova chamada: assertEquals(200, response.getStatus(), "Era esperado valores iguais, mas  200 é diferente de " + result397 + " <response.getStatus()>")
chamada antiga: assertEquals(1, jsonNode.at("/paths/0/legs").size())
nova chamada: assertEquals(1, jsonNode.at("/paths/0/legs").size(), "Era esperado valores iguais, mas  1 é diferente de " + result398 + " <jsonNode.at('/paths/0/legs').size()>")
chamada antiga: assertEquals(200, response.getStatus())
nova chamada: assertEquals(200, response.getStatus(), "Era esperado valores iguais, mas  200 é diferente de " + result399 + " <response.getStatus()>")
chamada antiga: assertEquals(1, jsonNode.at("/paths/0/legs").size())
nova chamada: assertEquals(1, jsonNode.at("/paths/0/legs").size(), "Era esperado valores iguais, mas  1 é diferente de " + result400 + " <jsonNode.at('/paths/0/legs').size()>")
chamada antiga: assertEquals(200, response.getStatus())
nova chamada: assertEquals(200, response.getStatus(), "Era esperado valores iguais, mas  200 é diferente de " + result401 + " <response.getStatus()>")
chamada antiga: assertEquals(1, jsonNode.at("/paths/0/legs").size())
nova chamada: assertEquals(1, jsonNode.at("/paths/0/legs").size(), "Era esperado valores iguais, mas  1 é diferente de " + result402 + " <jsonNode.at('/paths/0/legs').size()>")
chamada antiga: assertEquals(200, response.getStatus())
nova chamada: assertEquals(200, response.getStatus(), "Era esperado valores iguais, mas  200 é diferente de " + result403 + " <response.getStatus()>")
chamada antiga: assertEquals(400, response.getStatus())
nova chamada: assertEquals(400, response.getStatus(), "Era esperado valores iguais, mas  400 é diferente de " + result404 + " <response.getStatus()>")
chamada antiga: assertEquals(400, response.getStatus())
nova chamada: assertEquals(400, response.getStatus(), "Era esperado valores iguais, mas  400 é diferente de " + result405 + " <response.getStatus()>")
chamada antiga: assertEquals("query param point size must be between 2 and 2", json.get("message").asText())
nova chamada: assertEquals("query param point size must be between 2 and 2", json.get("message").asText(), "Era esperado valores iguais, mas  'query param point size must be between 2 and 2' é diferente de " + result406 + " <json.get('message').asText()>")
chamada antiga: assertEquals(400, response.getStatus())
nova chamada: assertEquals(400, response.getStatus(), "Era esperado valores iguais, mas  400 é diferente de " + result407 + " <response.getStatus()>")
chamada antiga: assertEquals(400, response.getStatus())
nova chamada: assertEquals(400, response.getStatus(), "Era esperado valores iguais, mas  400 é diferente de " + result408 + " <response.getStatus()>")
chamada antiga: assertTrue(json.get("message").asText().startsWith("query param pt.earliest_departure_time must"))
nova chamada: assertTrue(json.get("message").asText().startsWith("query param pt.earliest_departure_time must"), "Era esperado verdadeiro, mas " + result409 + " <json.get('message').asText().startsWith('query param pt.earliest_departure_time must')> é falso")
chamada antiga: assertEquals(400, response.getStatus())
nova chamada: assertEquals(400, response.getStatus(), "Era esperado valores iguais, mas  400 é diferente de " + result410 + " <response.getStatus()>")
chamada antiga: assertEquals("query param pt.earliest_departure_time must be in a ISO-8601 format.", json.get("message").asText())
nova chamada: assertEquals("query param pt.earliest_departure_time must be in a ISO-8601 format.", json.get("message").asText(), "Era esperado valores iguais, mas  'query param pt.earliest_departure_time must be in a ISO-8601 format.' é diferente de " + result411 + " <json.get('message').asText()>")
chamada antiga: assertEquals(200, response.getStatus())
nova chamada: assertEquals(200, response.getStatus(), "Era esperado valores iguais, mas  200 é diferente de " + result412 + " <response.getStatus()>")
chamada antiga: assertTrue(info.supported_vehicles.contains("pt"))
nova chamada: assertTrue(info.supported_vehicles.contains("pt"), "Era esperado verdadeiro, mas " + result413 + " <info.supported_vehicles.contains('pt')> é falso")
chamada antiga: assertTrue(info.profiles.stream().anyMatch(p -> p.name.equals("pt")))
nova chamada: assertTrue(info.profiles.stream().anyMatch(p -> p.name.equals("pt")), "Era esperado verdadeiro, mas " + result414 + " <info.profiles.stream().anyMatch(p -> p.name.equals('pt'))> é falso")
chamada antiga: assertEquals(200, response.getStatus())
nova chamada: assertEquals(200, response.getStatus(), "Era esperado valores iguais, mas  200 é diferente de " + result415 + " <response.getStatus()>")
chamada antiga: assertEquals(1, layerValues.size())
nova chamada: assertEquals(1, layerValues.size(), "Era esperado valores iguais, mas  1 é diferente de " + result416 + " <layerValues.size()>")
chamada antiga: assertTrue(layerValues.containsKey("roads"))
nova chamada: assertTrue(layerValues.containsKey("roads"), "Era esperado verdadeiro, mas " + result417 + " <layerValues.containsKey('roads')> é falso")
chamada antiga: assertEquals(42, multiLineString.getCoordinates().length)
nova chamada: assertEquals(42, multiLineString.getCoordinates().length, "Era esperado valores iguais, mas  42 é diferente de " + " multiLineString.getCoordinates().length")
chamada antiga: assertEquals("Camì de les Pardines", map.get("name"))
nova chamada: assertEquals("Camì de les Pardines", map.get("name"), "Era esperado valores iguais, mas  'Camì de les Pardines' é diferente de " + result418 + " <map.get('name')>")
chamada antiga: assertEquals(200, response.getStatus())
nova chamada: assertEquals(200, response.getStatus(), "Era esperado valores iguais, mas  200 é diferente de " + result419 + " <response.getStatus()>")
chamada antiga: assertEquals(21, layer.getGeometries().size())
nova chamada: assertEquals(21, layer.getGeometries().size(), "Era esperado valores iguais, mas  21 é diferente de " + result420 + " <layer.getGeometries().size()>")
chamada antiga: assertEquals("road", attributes(geometry).get("road_environment"))
nova chamada: assertEquals("road", attributes(geometry).get("road_environment"), "Era esperado valores iguais, mas  'road' é diferente de " + result421 + " <attributes(geometry).get('road_environment')>")
chamada antiga: assertEquals(50.0, attributes(geometry).get("max_speed"))
nova chamada: assertEquals(50.0, attributes(geometry).get("max_speed"), "Era esperado valores iguais, mas  50.0 é diferente de " + result422 + " <attributes(geometry).get('max_speed')>")
chamada antiga: assertEquals("primary", attributes(geometry).get("road_class"))
nova chamada: assertEquals("primary", attributes(geometry).get("road_class"), "Era esperado valores iguais, mas  'primary' é diferente de " + result423 + " <attributes(geometry).get('road_class')>")
chamada antiga: assertFalse(ghResponse.hasErrors())
nova chamada: assertFalse(ghResponse.hasErrors(), "Era esperado falso, mas " + result424 + " <ghResponse.hasErrors()> é verdadeiro ")
chamada antiga: assertEquals(200, response.getStatus())
nova chamada: assertEquals(200, response.getStatus(), "Era esperado valores iguais, mas  200 é diferente de " + result425 + " <response.getStatus()>")
chamada antiga: assertFalse(infoJson.has("errors"))
nova chamada: assertFalse(infoJson.has("errors"), "Era esperado falso, mas " + result426 + " <infoJson.has('errors')> é verdadeiro ")
chamada antiga: assertEquals(200, response.getStatus())
nova chamada: assertEquals(200, response.getStatus(), "Era esperado valores iguais, mas  200 é diferente de " + result427 + " <response.getStatus()>")
chamada antiga: assertEquals(200, response.getStatus())
nova chamada: assertEquals(200, response.getStatus(), "Era esperado valores iguais, mas  200 é diferente de " + result428 + " <response.getStatus()>")
chamada antiga: assertEquals("[0, 1]", res.getPointsOrder().toString())
nova chamada: assertEquals("[0, 1]", res.getPointsOrder().toString(), "Era esperado valores iguais, mas  '[0, 1]' é diferente de " + result429 + " <res.getPointsOrder().toString()>")
chamada antiga: assertEquals(2, paths.size())
nova chamada: assertEquals(2, paths.size(), "Era esperado valores iguais, mas  2 é diferente de " + result430 + " <paths.size()>")
chamada antiga: assertEquals(35, path.getPoints().size())
nova chamada: assertEquals(35, path.getPoints().size(), "Era esperado valores iguais, mas  35 é diferente de " + result431 + " <path.getPoints().size()>")
chamada antiga: assertEquals(30, path.getPoints().size())
nova chamada: assertEquals(30, path.getPoints().size(), "Era esperado valores iguais, mas  30 é diferente de " + result432 + " <path.getPoints().size()>")
chamada antiga: assertEquals(0, res.getPoints().size())
nova chamada: assertEquals(0, res.getPoints().size(), "Era esperado valores iguais, mas  0 é diferente de " + result433 + " <res.getPoints().size()>")
chamada antiga: assertEquals(Arrays.asList("Continue onto Carrer de l'Aigüeta", "Turn right onto Carrer Pere d'Urg", "Turn right onto Carrer Bonaventura Armengol", "Keep right onto Avinguda Consell d'Europa", "At roundabout, take exit 4"), given)
nova chamada: assertEquals(Arrays.asList("Continue onto Carrer de l'Aigüeta", "Turn right onto Carrer Pere d'Urg", "Turn right onto Carrer Bonaventura Armengol", "Keep right onto Avinguda Consell d'Europa", "At roundabout, take exit 4"), given, "Era esperado valores iguais, mas " + result434 + " <Arrays.asList('Continue onto Carrer de l'Aigüeta', 'Turn right onto Carrer Pere d'Urg', 'Turn right onto Carrer Bonaventura Armengol', 'Keep right onto Avinguda Consell d'Europa', 'At roundabout, take exit 4')> é diferente de " + " given")
chamada antiga: assertEquals(Arrays.asList("Carrer de l'Aigüeta", "Carrer Pere d'Urg", "Carrer Bonaventura Armengol", "Avinguda Consell d'Europa", ""), given)
nova chamada: assertEquals(Arrays.asList("Carrer de l'Aigüeta", "Carrer Pere d'Urg", "Carrer Bonaventura Armengol", "Avinguda Consell d'Europa", ""), given, "Era esperado valores iguais, mas " + result435 + " <Arrays.asList('Carrer de l'Aigüeta', 'Carrer Pere d'Urg', 'Carrer Bonaventura Armengol', 'Avinguda Consell d'Europa', '')> é diferente de " + " given")
chamada antiga: assertTrue(res.getErrors().get(0) instanceof PointNotFoundException)
nova chamada: assertTrue(res.getErrors().get(0) instanceof PointNotFoundException, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(res.getErrors().get(0) instanceof PointOutOfBoundsException)
nova chamada: assertTrue(res.getErrors().get(0) instanceof PointOutOfBoundsException, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("Arrive at destination", finishInstructionName)
nova chamada: assertEquals("Arrive at destination", finishInstructionName, "Era esperado valores iguais, mas  'Arrive at destination' é diferente de " + " finishInstructionName")
chamada antiga: assertEquals("", finishInstructionName)
nova chamada: assertEquals("", finishInstructionName, "Era esperado valores iguais, mas  '' é diferente de " + " finishInstructionName")
chamada antiga: assertEquals(1, alt.getPathDetails().size())
nova chamada: assertEquals(1, alt.getPathDetails().size(), "Era esperado valores iguais, mas  1 é diferente de " + result436 + " <alt.getPathDetails().size()>")
chamada antiga: assertTrue((Double) details.get(0).getValue() > 20)
nova chamada: assertTrue((Double) details.get(0).getValue() > 20, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue((Double) details.get(0).getValue() < 70)
nova chamada: assertTrue((Double) details.get(0).getValue() < 70, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(200, response.getStatus())
nova chamada: assertEquals(200, response.getStatus(), "Era esperado valores iguais, mas  200 é diferente de " + result437 + " <response.getStatus()>")
chamada antiga: assertEquals(400, response.getStatus())
nova chamada: assertEquals(400, response.getStatus(), "Era esperado valores iguais, mas  400 é diferente de " + result438 + " <response.getStatus()>")
chamada antiga: assertTrue(json.get("message").toString().contains("Different subnetworks"))
nova chamada: assertTrue(json.get("message").toString().contains("Different subnetworks"), "Era esperado verdadeiro, mas " + result439 + " <json.get('message').toString().contains('Different subnetworks')> é falso")
chamada antiga: assertEquals(200, response.getStatus())
nova chamada: assertEquals(200, response.getStatus(), "Era esperado valores iguais, mas  200 é diferente de " + result440 + " <response.getStatus()>")
chamada antiga: assertEquals(Arrays.asList("Platnerstraße"), fetchStreets(mr.getEdgeMatches()))
nova chamada: assertEquals(Arrays.asList("Platnerstraße"), fetchStreets(mr.getEdgeMatches()), "Era esperado valores iguais, mas " + result441 + " <Arrays.asList('Platnerstraße')> é diferente de " + result442 + " <fetchStreets(mr.getEdgeMatches())>")
chamada antiga: assertEquals(Arrays.asList("Windmühlenstraße", "Bayrischer Platz"), fetchStreets(mr.getEdgeMatches()))
nova chamada: assertEquals(Arrays.asList("Windmühlenstraße", "Bayrischer Platz"), fetchStreets(mr.getEdgeMatches()), "Era esperado valores iguais, mas " + result443 + " <Arrays.asList('Windmühlenstraße', 'Bayrischer Platz')> é diferente de " + result444 + " <fetchStreets(mr.getEdgeMatches())>")
chamada antiga: assertEquals(142, mr.getEdgeMatches().size())
nova chamada: assertEquals(142, mr.getEdgeMatches().size(), "Era esperado valores iguais, mas  142 é diferente de " + result445 + " <mr.getEdgeMatches().size()>")
chamada antiga: assertEquals(Arrays.asList("Marbachstraße", "Weinligstraße", "Fechnerstraße"), fetchStreets(mr.getEdgeMatches()))
nova chamada: assertEquals(Arrays.asList("Marbachstraße", "Weinligstraße", "Fechnerstraße"), fetchStreets(mr.getEdgeMatches()), "Era esperado valores iguais, mas " + result446 + " <Arrays.asList('Marbachstraße', 'Weinligstraße', 'Fechnerstraße')> é diferente de " + result447 + " <fetchStreets(mr.getEdgeMatches())>")
chamada antiga: assertEquals(7, observations.size())
nova chamada: assertEquals(7, observations.size(), "Era esperado valores iguais, mas  7 é diferente de " + result448 + " <observations.size()>")
chamada antiga: assertEquals(5, filteredObservations.size())
nova chamada: assertEquals(5, filteredObservations.size(), "Era esperado valores iguais, mas  5 é diferente de " + result449 + " <filteredObservations.size()>")
chamada antiga: assertEquals(expectedLinearDistance, linearDistance(filteredObservations))
nova chamada: assertEquals(expectedLinearDistance, linearDistance(filteredObservations), "Era esperado valores iguais, mas  expectedLinearDistance é diferente de " + result450 + " <linearDistance(filteredObservations)>")
chamada antiga: assertEquals(Arrays.asList("Gustav-Adolf-Straße", "Leibnizstraße", "Hinrichsenstraße", "Tschaikowskistraße"), fetchStreets(mr.getEdgeMatches()))
nova chamada: assertEquals(Arrays.asList("Gustav-Adolf-Straße", "Leibnizstraße", "Hinrichsenstraße", "Tschaikowskistraße"), fetchStreets(mr.getEdgeMatches()), "Era esperado valores iguais, mas " + result451 + " <Arrays.asList('Gustav-Adolf-Straße', 'Leibnizstraße', 'Hinrichsenstraße', 'Tschaikowskistraße')> é diferente de " + result452 + " <fetchStreets(mr.getEdgeMatches())>")
chamada antiga: assertEquals(Arrays.asList("Jahnallee", "Funkenburgstraße", "Gustav-Adolf-Straße", "Tschaikowskistraße", "Jahnallee", "Lessingstraße"), fetchStreets(mr.getEdgeMatches()))
nova chamada: assertEquals(Arrays.asList("Jahnallee", "Funkenburgstraße", "Gustav-Adolf-Straße", "Tschaikowskistraße", "Jahnallee", "Lessingstraße"), fetchStreets(mr.getEdgeMatches()), "Era esperado valores iguais, mas " + result453 + " <Arrays.asList('Jahnallee', 'Funkenburgstraße', 'Gustav-Adolf-Straße', 'Tschaikowskistraße', 'Jahnallee', 'Lessingstraße')> é diferente de " + result454 + " <fetchStreets(mr.getEdgeMatches())>")
chamada antiga: assertEquals(Arrays.asList("Gustav-Adolf-Straße", "Funkenburgstraße"), fetchStreets(mr.getEdgeMatches()))
nova chamada: assertEquals(Arrays.asList("Gustav-Adolf-Straße", "Funkenburgstraße"), fetchStreets(mr.getEdgeMatches()), "Era esperado valores iguais, mas " + result455 + " <Arrays.asList('Gustav-Adolf-Straße', 'Funkenburgstraße')> é diferente de " + result456 + " <fetchStreets(mr.getEdgeMatches())>")
chamada antiga: assertEquals(Arrays.asList("Gustav-Adolf-Straße", "Funkenburgstraße"), fetchStreets(mr.getEdgeMatches()))
nova chamada: assertEquals(Arrays.asList("Gustav-Adolf-Straße", "Funkenburgstraße"), fetchStreets(mr.getEdgeMatches()), "Era esperado valores iguais, mas " + result457 + " <Arrays.asList('Gustav-Adolf-Straße', 'Funkenburgstraße')> é diferente de " + result458 + " <fetchStreets(mr.getEdgeMatches())>")
chamada antiga: assertEquals(264, gpxEntries.size())
nova chamada: assertEquals(264, gpxEntries.size(), "Era esperado valores iguais, mas  264 é diferente de " + result459 + " <gpxEntries.size()>")
chamada antiga: assertEquals(new Observation(new GHPoint(51.377719, 12.338217)), gpxEntries.get(0))
nova chamada: assertEquals(new Observation(new GHPoint(51.377719, 12.338217)), gpxEntries.get(0), "Era esperado valores iguais, mas  new Observation(new GHPoint(51.377719, 12.338217)) é diferente de " + result460 + " <gpxEntries.get(0)>")
chamada antiga: assertEquals(new Observation(new GHPoint(51.371482, 12.363795)), gpxEntries.get(50))
nova chamada: assertEquals(new Observation(new GHPoint(51.371482, 12.363795)), gpxEntries.get(50), "Era esperado valores iguais, mas  new Observation(new GHPoint(51.371482, 12.363795)) é diferente de " + result461 + " <gpxEntries.get(50)>")
chamada antiga: assertEquals(2, gpxEntries.size())
nova chamada: assertEquals(2, gpxEntries.size(), "Era esperado valores iguais, mas  2 é diferente de " + result462 + " <gpxEntries.size()>")
chamada antiga: assertEquals(3, gpxEntries.size())
nova chamada: assertEquals(3, gpxEntries.size(), "Era esperado valores iguais, mas  3 é diferente de " + result463 + " <gpxEntries.size()>")
chamada antiga: assertTrue(gpx.trk.isEmpty())
nova chamada: assertTrue(gpx.trk.isEmpty(), "Era esperado verdadeiro, mas " + result464 + " <gpx.trk.isEmpty()> é falso")
chamada antiga: assertTrue(GpxConversions.getEntries(gpx.trk.get(0)).isEmpty())
nova chamada: assertTrue(GpxConversions.getEntries(gpx.trk.get(0)).isEmpty(), "Era esperado verdadeiro, mas " + result465 + " <GpxConversions.getEntries(gpx.trk.get(0)).isEmpty()> é falso")
chamada antiga: assertTrue(GpxConversions.getEntries(gpx.trk.get(0)).isEmpty())
nova chamada: assertTrue(GpxConversions.getEntries(gpx.trk.get(0)).isEmpty(), "Era esperado verdadeiro, mas " + result466 + " <GpxConversions.getEntries(gpx.trk.get(0)).isEmpty()> é falso")
chamada antiga: assertEquals(Arrays.asList("Милана Видака", "Бранка Радичевића", "Здравка Челара"), fetchStreets(mr.getEdgeMatches()))
nova chamada: assertEquals(Arrays.asList("Милана Видака", "Бранка Радичевића", "Здравка Челара"), fetchStreets(mr.getEdgeMatches()), "Era esperado valores iguais, mas " + result467 + " <Arrays.asList('Милана Видака', 'Бранка Радичевића', 'Здравка Челара')> é diferente de " + result468 + " <fetchStreets(mr.getEdgeMatches())>")
chamada antiga: assertEquals(741, responsePath.getInstructions().get(0).getSign())
nova chamada: assertEquals(741, responsePath.getInstructions().get(0).getSign(), "Era esperado valores iguais, mas  741 é diferente de " + result469 + " <responsePath.getInstructions().get(0).getSign()>")
chamada antiga: assertEquals("Continue onto A 81", responsePath.getInstructions().get(0).getName())
nova chamada: assertEquals("Continue onto A 81", responsePath.getInstructions().get(0).getName(), "Era esperado valores iguais, mas  'Continue onto A 81' é diferente de " + result470 + " <responsePath.getInstructions().get(0).getName()>")
chamada antiga: assertEquals(Statement.Keyword.IF, statement.getKeyword())
nova chamada: assertEquals(Statement.Keyword.IF, statement.getKeyword(), "Era esperado valores iguais, mas  Statement.Keyword.IF é diferente de " + result471 + " <statement.getKeyword()>")
chamada antiga: assertEquals("true", statement.getCondition())
nova chamada: assertEquals("true", statement.getCondition(), "Era esperado valores iguais, mas  'true' é diferente de " + result472 + " <statement.getCondition()>")
chamada antiga: assertEquals(Statement.Op.LIMIT, statement.getOperation())
nova chamada: assertEquals(Statement.Op.LIMIT, statement.getOperation(), "Era esperado valores iguais, mas  Statement.Op.LIMIT é diferente de " + result473 + " <statement.getOperation()>")
chamada antiga: assertEquals("100", statement.getValue())
nova chamada: assertEquals("100", statement.getValue(), "Era esperado valores iguais, mas  '100' é diferente de " + result474 + " <statement.getValue()>")
chamada antiga: assertEquals(Statement.Keyword.ELSE, statement.getKeyword())
nova chamada: assertEquals(Statement.Keyword.ELSE, statement.getKeyword(), "Era esperado valores iguais, mas  Statement.Keyword.ELSE é diferente de " + result475 + " <statement.getKeyword()>")
chamada antiga: assertNull(statement.getCondition())
nova chamada: assertNull(statement.getCondition(), "Era esperado nulo, mas " + result476 + " <statement.getCondition()> não é nulo")
chamada antiga: assertEquals(Statement.Op.LIMIT, statement.getOperation())
nova chamada: assertEquals(Statement.Op.LIMIT, statement.getOperation(), "Era esperado valores iguais, mas  Statement.Op.LIMIT é diferente de " + result477 + " <statement.getOperation()>")
chamada antiga: assertEquals("abc", statement.getValue())
nova chamada: assertEquals("abc", statement.getValue(), "Era esperado valores iguais, mas  'abc' é diferente de " + result478 + " <statement.getValue()>")
chamada antiga: assertEquals(objectMapper.writeValueAsString(jsonFeatureCollection), expected)
nova chamada: assertEquals(objectMapper.writeValueAsString(jsonFeatureCollection), expected, "Era esperado valores iguais, mas " + result479 + " <objectMapper.writeValueAsString(jsonFeatureCollection)> é diferente de " + " expected")
chamada antiga: assertEquals(3, data.getFeatures().size())
nova chamada: assertEquals(3, data.getFeatures().size(), "Era esperado valores iguais, mas  3 é diferente de " + result480 + " <data.getFeatures().size()>")
chamada antiga: assertEquals("1", f1.getId())
nova chamada: assertEquals("1", f1.getId(), "Era esperado valores iguais, mas  '1' é diferente de " + result481 + " <f1.getId()>")
chamada antiga: assertEquals("value0", f1.getProperty("prop0"))
nova chamada: assertEquals("value0", f1.getProperty("prop0"), "Era esperado valores iguais, mas  'value0' é diferente de " + result482 + " <f1.getProperty('prop0')>")
chamada antiga: assertEquals("2", f2.getId())
nova chamada: assertEquals("2", f2.getId(), "Era esperado valores iguais, mas  '2' é diferente de " + result483 + " <f2.getId()>")
chamada antiga: assertEquals(4, f2.getGeometry().getNumPoints())
nova chamada: assertEquals(4, f2.getGeometry().getNumPoints(), "Era esperado valores iguais, mas  4 é diferente de " + result484 + " <f2.getGeometry().getNumPoints()>")
chamada antiga: assertEquals("a", ((Map) f3.getProperty("prop1")).get("test"))
nova chamada: assertEquals("a", ((Map) f3.getProperty("prop1")).get("test"), "Era esperado valores iguais, mas  'a' é diferente de " + result485 + " <((Map) f3.getProperty('prop1')).get('test')>")
chamada antiga: assertNotNull(ghResponse)
nova chamada: assertNotNull(ghResponse, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(Helper.createPointList(38.5, -120.2), list)
nova chamada: assertEquals(Helper.createPointList(38.5, -120.2), list, "Era esperado valores iguais, mas " + result486 + " <Helper.createPointList(38.5, -120.2)> é diferente de " + " list")
chamada antiga: assertEquals(Helper.createPointList(38.5, -120.2, 40.7, -120.95, 43.252, -126.453), list)
nova chamada: assertEquals(Helper.createPointList(38.5, -120.2, 40.7, -120.95, 43.252, -126.453), list, "Era esperado valores iguais, mas " + result487 + " <Helper.createPointList(38.5, -120.2, 40.7, -120.95, 43.252, -126.453)> é diferente de " + " list")
chamada antiga: assertEquals("_p~iF~ps|U", ResponsePathSerializer.encodePolyline(poly1, poly1.is3D(), 1e5))
nova chamada: assertEquals("_p~iF~ps|U", ResponsePathSerializer.encodePolyline(poly1, poly1.is3D(), 1e5), "Era esperado valores iguais, mas  '_p~iF~ps|U' é diferente de " + result488 + " <ResponsePathSerializer.encodePolyline(poly1, poly1.is3D(), 1e5)>")
chamada antiga: assertEquals("_p~iF~ps|U_ulLnnqC_mqNvxq`@", ResponsePathSerializer.encodePolyline(poly, poly.is3D(), 1e5))
nova chamada: assertEquals("_p~iF~ps|U_ulLnnqC_mqNvxq`@", ResponsePathSerializer.encodePolyline(poly, poly.is3D(), 1e5), "Era esperado valores iguais, mas  '_p~iF~ps|U_ulLnnqC_mqNvxq`@' é diferente de " + result489 + " <ResponsePathSerializer.encodePolyline(poly, poly.is3D(), 1e5)>")
chamada antiga: assertEquals(list, ResponsePathDeserializer.decodePolyline(str, list.size(), false))
nova chamada: assertEquals(list, ResponsePathDeserializer.decodePolyline(str, list.size(), false), "Era esperado valores iguais, mas  list é diferente de " + result490 + " <ResponsePathDeserializer.decodePolyline(str, list.size(), false)>")
chamada antiga: assertEquals(list, ResponsePathDeserializer.decodePolyline(str, list.size(), false))
nova chamada: assertEquals(list, ResponsePathDeserializer.decodePolyline(str, list.size(), false), "Era esperado valores iguais, mas  list é diferente de " + result491 + " <ResponsePathDeserializer.decodePolyline(str, list.size(), false)>")
chamada antiga: assertEquals(Helper.createPointList3D(38.5, -120.2, 10), list)
nova chamada: assertEquals(Helper.createPointList3D(38.5, -120.2, 10), list, "Era esperado valores iguais, mas " + result492 + " <Helper.createPointList3D(38.5, -120.2, 10)> é diferente de " + " list")
chamada antiga: assertEquals(Helper.createPointList3D(38.5, -120.2, 10, 40.7, -120.95, 1234, 43.252, -126.453, 1234), list)
nova chamada: assertEquals(Helper.createPointList3D(38.5, -120.2, 10, 40.7, -120.95, 1234, 43.252, -126.453, 1234), list, "Era esperado valores iguais, mas " + result493 + " <Helper.createPointList3D(38.5, -120.2, 10, 40.7, -120.95, 1234, 43.252, -126.453, 1234)> é diferente de " + " list")
chamada antiga: assertEquals("_p~iF~ps|Uo}@", ResponsePathSerializer.encodePolyline(poly1, poly1.is3D(), 1e5))
nova chamada: assertEquals("_p~iF~ps|Uo}@", ResponsePathSerializer.encodePolyline(poly1, poly1.is3D(), 1e5), "Era esperado valores iguais, mas  '_p~iF~ps|Uo}@' é diferente de " + result494 + " <ResponsePathSerializer.encodePolyline(poly1, poly1.is3D(), 1e5)>")
chamada antiga: assertEquals("_p~iF~ps|Uo}@_ulLnnqC_anF_mqNvxq`@?", ResponsePathSerializer.encodePolyline(poly, poly.is3D(), 1e5))
nova chamada: assertEquals("_p~iF~ps|Uo}@_ulLnnqC_anF_mqNvxq`@?", ResponsePathSerializer.encodePolyline(poly, poly.is3D(), 1e5), "Era esperado valores iguais, mas  '_p~iF~ps|Uo}@_ulLnnqC_anF_mqNvxq`@?' é diferente de " + result495 + " <ResponsePathSerializer.encodePolyline(poly, poly.is3D(), 1e5)>")
chamada antiga: assertEquals("ohdfzAgt}bVoEL", ResponsePathSerializer.encodePolyline(Helper.createPointList(47.827608, 12.123476, 47.827712, 12.123469), false, 1e6))
nova chamada: assertEquals("ohdfzAgt}bVoEL", ResponsePathSerializer.encodePolyline(Helper.createPointList(47.827608, 12.123476, 47.827712, 12.123469), false, 1e6), "Era esperado valores iguais, mas  'ohdfzAgt}bVoEL' é diferente de " + result496 + " <ResponsePathSerializer.encodePolyline(Helper.createPointList(47.827608, 12.123476, 47.827712, 12.123469), false, 1e6)>")
chamada antiga: assertEquals(objectMapper.readTree(getClass().getClassLoader().getResourceAsStream("fixtures/roundabout1.json")).toString(), objectMapper.valueToTree(il).toString())
nova chamada: assertEquals(objectMapper.readTree(getClass().getClassLoader().getResourceAsStream("fixtures/roundabout1.json")).toString(), objectMapper.valueToTree(il).toString(), "Era esperado valores iguais, mas " + result497 + " <objectMapper.readTree(getClass().getClassLoader().getResourceAsStream('fixtures/roundabout1.json')).toString()> é diferente de " + result498 + " <objectMapper.valueToTree(il).toString()>")
chamada antiga: assertEquals(objectMapper.readTree(getClass().getClassLoader().getResourceAsStream("fixtures/roundabout2.json")).toString(), objectMapper.valueToTree(il).toString())
nova chamada: assertEquals(objectMapper.readTree(getClass().getClassLoader().getResourceAsStream("fixtures/roundabout2.json")).toString(), objectMapper.valueToTree(il).toString(), "Era esperado valores iguais, mas " + result499 + " <objectMapper.readTree(getClass().getClassLoader().getResourceAsStream('fixtures/roundabout2.json')).toString()> é diferente de " + result500 + " <objectMapper.valueToTree(il).toString()>")
chamada antiga: assertEquals(1, Helper.countBitValue(1))
nova chamada: assertEquals(1, Helper.countBitValue(1), "Era esperado valores iguais, mas  1 é diferente de " + result501 + " <Helper.countBitValue(1)>")
chamada antiga: assertEquals(2, Helper.countBitValue(2))
nova chamada: assertEquals(2, Helper.countBitValue(2), "Era esperado valores iguais, mas  2 é diferente de " + result502 + " <Helper.countBitValue(2)>")
chamada antiga: assertEquals(2, Helper.countBitValue(3))
nova chamada: assertEquals(2, Helper.countBitValue(3), "Era esperado valores iguais, mas  2 é diferente de " + result503 + " <Helper.countBitValue(3)>")
chamada antiga: assertEquals(3, Helper.countBitValue(4))
nova chamada: assertEquals(3, Helper.countBitValue(4), "Era esperado valores iguais, mas  3 é diferente de " + result504 + " <Helper.countBitValue(4)>")
chamada antiga: assertEquals(3, Helper.countBitValue(7))
nova chamada: assertEquals(3, Helper.countBitValue(7), "Era esperado valores iguais, mas  3 é diferente de " + result505 + " <Helper.countBitValue(7)>")
chamada antiga: assertEquals(4, Helper.countBitValue(8))
nova chamada: assertEquals(4, Helper.countBitValue(8), "Era esperado valores iguais, mas  4 é diferente de " + result506 + " <Helper.countBitValue(8)>")
chamada antiga: assertEquals(5, Helper.countBitValue(20))
nova chamada: assertEquals(5, Helper.countBitValue(20), "Era esperado valores iguais, mas  5 é diferente de " + result507 + " <Helper.countBitValue(20)>")
chamada antiga: assertEquals(Locale.GERMAN, Helper.getLocale("de"))
nova chamada: assertEquals(Locale.GERMAN, Helper.getLocale("de"), "Era esperado valores iguais, mas  Locale.GERMAN é diferente de " + result508 + " <Helper.getLocale('de')>")
chamada antiga: assertEquals(Locale.GERMANY, Helper.getLocale("de_DE"))
nova chamada: assertEquals(Locale.GERMANY, Helper.getLocale("de_DE"), "Era esperado valores iguais, mas  Locale.GERMANY é diferente de " + result509 + " <Helper.getLocale('de_DE')>")
chamada antiga: assertEquals(Locale.GERMANY, Helper.getLocale("de-DE"))
nova chamada: assertEquals(Locale.GERMANY, Helper.getLocale("de-DE"), "Era esperado valores iguais, mas  Locale.GERMANY é diferente de " + result510 + " <Helper.getLocale('de-DE')>")
chamada antiga: assertEquals(Locale.ENGLISH, Helper.getLocale("en"))
nova chamada: assertEquals(Locale.ENGLISH, Helper.getLocale("en"), "Era esperado valores iguais, mas  Locale.ENGLISH é diferente de " + result511 + " <Helper.getLocale('en')>")
chamada antiga: assertEquals(Locale.US, Helper.getLocale("en_US"))
nova chamada: assertEquals(Locale.US, Helper.getLocale("en_US"), "Era esperado valores iguais, mas  Locale.US é diferente de " + result512 + " <Helper.getLocale('en_US')>")
chamada antiga: assertEquals(Locale.US, Helper.getLocale("en_US.UTF-8"))
nova chamada: assertEquals(Locale.US, Helper.getLocale("en_US.UTF-8"), "Era esperado valores iguais, mas  Locale.US é diferente de " + result513 + " <Helper.getLocale('en_US.UTF-8')>")
chamada antiga: assertEquals(4294967295L, l)
nova chamada: assertEquals(4294967295L, l, "Era esperado valores iguais, mas  4294967295L é diferente de " + " l")
chamada antiga: assertEquals(-1, Helper.toSignedInt(l))
nova chamada: assertEquals(-1, Helper.toSignedInt(l), "Era esperado valores iguais, mas  -1 é diferente de " + result514 + " <Helper.toSignedInt(l)>")
chamada antiga: assertEquals(intVal, Helper.toSignedInt(maxInt))
nova chamada: assertEquals(intVal, Helper.toSignedInt(maxInt), "Era esperado valores iguais, mas  intVal é diferente de " + result515 + " <Helper.toSignedInt(maxInt)>")
chamada antiga: assertEquals(intVal, Helper.toSignedInt(maxInt))
nova chamada: assertEquals(intVal, Helper.toSignedInt(maxInt), "Era esperado valores iguais, mas  intVal é diferente de " + result516 + " <Helper.toSignedInt(maxInt)>")
chamada antiga: assertEquals(intVal, Helper.toSignedInt(maxInt))
nova chamada: assertEquals(intVal, Helper.toSignedInt(maxInt), "Era esperado valores iguais, mas  intVal é diferente de " + result517 + " <Helper.toSignedInt(maxInt)>")
chamada antiga: assertEquals(0xFFFFffffL, (1L << 32) - 1)
nova chamada: assertEquals(0xFFFFffffL, (1L << 32) - 1, "Era esperado valores iguais, mas  0xFFFFffffL é diferente de " + " (1L  32) - 1")
chamada antiga: assertTrue(0xFFFFffffL > 0L)
nova chamada: assertTrue(0xFFFFffffL > 0L, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("test_case", Helper.camelCaseToUnderScore("testCase"))
nova chamada: assertEquals("test_case", Helper.camelCaseToUnderScore("testCase"), "Era esperado valores iguais, mas  'test_case' é diferente de " + result518 + " <Helper.camelCaseToUnderScore('testCase')>")
chamada antiga: assertEquals("test_case_t_b_d", Helper.camelCaseToUnderScore("testCaseTBD"))
nova chamada: assertEquals("test_case_t_b_d", Helper.camelCaseToUnderScore("testCaseTBD"), "Era esperado valores iguais, mas  'test_case_t_b_d' é diferente de " + result519 + " <Helper.camelCaseToUnderScore('testCaseTBD')>")
chamada antiga: assertEquals("_test_case", Helper.camelCaseToUnderScore("TestCase"))
nova chamada: assertEquals("_test_case", Helper.camelCaseToUnderScore("TestCase"), "Era esperado valores iguais, mas  '_test_case' é diferente de " + result520 + " <Helper.camelCaseToUnderScore('TestCase')>")
chamada antiga: assertEquals("_test_case", Helper.camelCaseToUnderScore("_test_case"))
nova chamada: assertEquals("_test_case", Helper.camelCaseToUnderScore("_test_case"), "Era esperado valores iguais, mas  '_test_case' é diferente de " + result521 + " <Helper.camelCaseToUnderScore('_test_case')>")
chamada antiga: assertEquals("testCase", Helper.underScoreToCamelCase("test_case"))
nova chamada: assertEquals("testCase", Helper.underScoreToCamelCase("test_case"), "Era esperado valores iguais, mas  'testCase' é diferente de " + result522 + " <Helper.underScoreToCamelCase('test_case')>")
chamada antiga: assertEquals("testCaseTBD", Helper.underScoreToCamelCase("test_case_t_b_d"))
nova chamada: assertEquals("testCaseTBD", Helper.underScoreToCamelCase("test_case_t_b_d"), "Era esperado valores iguais, mas  'testCaseTBD' é diferente de " + result523 + " <Helper.underScoreToCamelCase('test_case_t_b_d')>")
chamada antiga: assertEquals("TestCase_", Helper.underScoreToCamelCase("_test_case_"))
nova chamada: assertEquals("TestCase_", Helper.underScoreToCamelCase("_test_case_"), "Era esperado valores iguais, mas  'TestCase_' é diferente de " + result524 + " <Helper.underScoreToCamelCase('_test_case_')>")
chamada antiga: assertEquals(257, new String(s.getBytes(UTF_CS), 0, 255, UTF_CS).getBytes(UTF_CS).length)
nova chamada: assertEquals(257, new String(s.getBytes(UTF_CS), 0, 255, UTF_CS).getBytes(UTF_CS).length, "Era esperado valores iguais, mas  257 é diferente de " + " new String(s.getBytes(UTF_CS), 0, 255, UTF_CS).getBytes(UTF_CS).length")
chamada antiga: assertEquals(1, new String(bytes, 0, 1, UTF_CS).getBytes(UTF_CS).length)
nova chamada: assertEquals(1, new String(bytes, 0, 1, UTF_CS).getBytes(UTF_CS).length, "Era esperado valores iguais, mas  1 é diferente de " + " new String(bytes, 0, 1, UTF_CS).getBytes(UTF_CS).length")
chamada antiga: assertEquals(3, new String(bytes, 0, 1, UTF_CS).getBytes(UTF_CS).length)
nova chamada: assertEquals(3, new String(bytes, 0, 1, UTF_CS).getBytes(UTF_CS).length, "Era esperado valores iguais, mas  3 é diferente de " + " new String(bytes, 0, 1, UTF_CS).getBytes(UTF_CS).length")
chamada antiga: assertFalse(details.isEmpty())
nova chamada: assertFalse(details.isEmpty(), "Era esperado falso, mas " + result525 + " <details.isEmpty()> é verdadeiro ")
chamada antiga: assertFalse(json.has("error"))
nova chamada: assertFalse(json.has("error"), "Era esperado falso, mas " + result526 + " <json.has('error')> é verdadeiro ")
chamada antiga: assertFalse(json.has("error"))
nova chamada: assertFalse(json.has("error"), "Era esperado falso, mas " + result527 + " <json.has('error')> é verdadeiro ")
chamada antiga: assertFalse(json.has("error"))
nova chamada: assertFalse(json.has("error"), "Era esperado falso, mas " + result528 + " <json.has('error')> é verdadeiro ")
chamada antiga: assertFalse(mr.getEdgeMatches().isEmpty())
nova chamada: assertFalse(mr.getEdgeMatches().isEmpty(), "Era esperado falso, mas " + result529 + " <mr.getEdgeMatches().isEmpty()> é verdadeiro ")
chamada antiga: assertEquals("no paths", new GHResponse().toString())
nova chamada: assertEquals("no paths", new GHResponse().toString(), "Era esperado valores iguais, mas  'no paths' é diferente de " + result530 + " <new GHResponse().toString()>")
chamada antiga: assertFalse(new GHResponse().hasErrors())
nova chamada: assertFalse(new GHResponse().hasErrors(), "Era esperado falso, mas " + result531 + " <new GHResponse().hasErrors()> é verdadeiro ")
chamada antiga: assertFalse(rsp.hasErrors())
nova chamada: assertFalse(rsp.hasErrors(), "Era esperado falso, mas " + result532 + " <rsp.hasErrors()> é verdadeiro ")
chamada antiga: assertEquals("bar", subject.getString("foo", ""))
nova chamada: assertEquals("bar", subject.getString("foo", ""), "Era esperado valores iguais, mas  'bar' é diferente de " + result533 + " <subject.getString('foo', '')>")
chamada antiga: assertEquals("valueA", subject.getString("foo", ""))
nova chamada: assertEquals("valueA", subject.getString("foo", ""), "Era esperado valores iguais, mas  'valueA' é diferente de " + result534 + " <subject.getString('foo', '')>")
chamada antiga: assertEquals("valueB", subject.getString("bar", ""))
nova chamada: assertEquals("valueB", subject.getString("bar", ""), "Era esperado valores iguais, mas  'valueB' é diferente de " + result535 + " <subject.getString('bar', '')>")
chamada antiga: assertEquals("valueA", subject.getString("foo", ""))
nova chamada: assertEquals("valueA", subject.getString("foo", ""), "Era esperado valores iguais, mas  'valueA' é diferente de " + result536 + " <subject.getString('foo', '')>")
chamada antiga: assertEquals("", subject.getString("Foo", ""))
nova chamada: assertEquals("", subject.getString("Foo", ""), "Era esperado valores iguais, mas  '' é diferente de " + result537 + " <subject.getString('Foo', '')>")
chamada antiga: assertEquals(1234L, subject.getLong("foo", 0))
nova chamada: assertEquals(1234L, subject.getLong("foo", 0), "Era esperado valores iguais, mas  1234L é diferente de " + result538 + " <subject.getLong('foo', 0)>")
chamada antiga: assertTrue(subject.has("foo"))
nova chamada: assertTrue(subject.has("foo"), "Era esperado verdadeiro, mas " + result539 + " <subject.has('foo')> é falso")
chamada antiga: assertTrue(subject.has("bar"))
nova chamada: assertTrue(subject.has("bar"), "Era esperado verdadeiro, mas " + result540 + " <subject.has('bar')> é falso")
chamada antiga: assertEquals(2, pMap.toMap().size())
nova chamada: assertEquals(2, pMap.toMap().size(), "Era esperado valores iguais, mas  2 é diferente de " + result541 + " <pMap.toMap().size()>")
chamada antiga: assertEquals(3, pMap.getInt("x", -1))
nova chamada: assertEquals(3, pMap.getInt("x", -1), "Era esperado valores iguais, mas  3 é diferente de " + result542 + " <pMap.getInt('x', -1)>")
chamada antiga: assertEquals(2, pMap.getInt("y", -1))
nova chamada: assertEquals(2, pMap.getInt("y", -1), "Era esperado valores iguais, mas  2 é diferente de " + result543 + " <pMap.getInt('y', -1)>")
chamada antiga: assertTrue(new PMap("").toMap().isEmpty())
nova chamada: assertTrue(new PMap("").toMap().isEmpty(), "Era esperado verdadeiro, mas " + result544 + " <new PMap('').toMap().isEmpty()> é falso")
chamada antiga: assertTrue(new PMap("name").toMap().isEmpty())
nova chamada: assertTrue(new PMap("name").toMap().isEmpty(), "Era esperado verdadeiro, mas " + result545 + " <new PMap('name').toMap().isEmpty()> é falso")
chamada antiga: assertEquals(2, CustomModel.merge(bike, car).getPriority().size())
nova chamada: assertEquals(2, CustomModel.merge(bike, car).getPriority().size(), "Era esperado valores iguais, mas  2 é diferente de " + result546 + " <CustomModel.merge(bike, car).getPriority().size()>")
chamada antiga: assertEquals(1, bike.getPriority().size())
nova chamada: assertEquals(1, bike.getPriority().size(), "Era esperado valores iguais, mas  1 é diferente de " + result547 + " <bike.getPriority().size()>")
chamada antiga: assertEquals(1, car.getPriority().size())
nova chamada: assertEquals(1, car.getPriority().size(), "Era esperado valores iguais, mas  1 é diferente de " + result548 + " <car.getPriority().size()>")
chamada antiga: assertEquals(2, merged.getPriority().size())
nova chamada: assertEquals(2, merged.getPriority().size(), "Era esperado valores iguais, mas  2 é diferente de " + result549 + " <merged.getPriority().size()>")
chamada antiga: assertEquals(1, car.getPriority().size())
nova chamada: assertEquals(1, car.getPriority().size(), "Era esperado valores iguais, mas  1 é diferente de " + result550 + " <car.getPriority().size()>")
chamada antiga: assertEquals("0.5", iter.next().getValue())
nova chamada: assertEquals("0.5", iter.next().getValue(), "Era esperado valores iguais, mas  '0.5' é diferente de " + result551 + " <iter.next().getValue()>")
chamada antiga: assertEquals("0.8", iter.next().getValue())
nova chamada: assertEquals("0.8", iter.next().getValue(), "Era esperado valores iguais, mas  '0.8' é diferente de " + result552 + " <iter.next().getValue()>")
chamada antiga: assertEquals("0.5", iter.next().getValue())
nova chamada: assertEquals("0.5", iter.next().getValue(), "Era esperado valores iguais, mas  '0.5' é diferente de " + result553 + " <iter.next().getValue()>")
chamada antiga: assertEquals("0.8", iter.next().getValue())
nova chamada: assertEquals("0.8", iter.next().getValue(), "Era esperado valores iguais, mas  '0.8' é diferente de " + result554 + " <iter.next().getValue()>")
chamada antiga: assertFalse(subject.has("baz"))
nova chamada: assertFalse(subject.has("baz"), "Era esperado falso, mas " + result555 + " <subject.has('baz')> é verdadeiro ")
chamada antiga: assertFalse(instance.isValid())
nova chamada: assertFalse(instance.isValid(), "Era esperado falso, mas " + result556 + " <instance.isValid()> é verdadeiro ")
chamada antiga: assertFalse(instance.isValid())
nova chamada: assertFalse(instance.isValid(), "Era esperado falso, mas " + result557 + " <instance.isValid()> é verdadeiro ")
chamada antiga: assertTrue(instance.isValid())
nova chamada: assertTrue(instance.isValid(), "Era esperado verdadeiro, mas " + result558 + " <instance.isValid()> é falso")
chamada antiga: assertEquals(point1, point2)
nova chamada: assertEquals(point1, point2, "Era esperado valores iguais, mas  point1 é diferente de " + " point2")
chamada antiga: assertNotEquals(point1, point2)
nova chamada: assertNotEquals(point1, point2, "Era esperado valores diferentes, mas  point1 é igual a " + " point2")
chamada antiga: assertNotEquals(point1, point2)
nova chamada: assertNotEquals(point1, point2, "Era esperado valores diferentes, mas  point1 é igual a " + " point2")
chamada antiga: assertEquals(point1, point2)
nova chamada: assertEquals(point1, point2, "Era esperado valores iguais, mas  point1 é diferente de " + " point2")
chamada antiga: assertTrue(new FinishInstruction("test", 123, 321, 2).getPoints().is3D())
nova chamada: assertTrue(new FinishInstruction("test", 123, 321, 2).getPoints().is3D(), "Era esperado verdadeiro, mas " + result559 + " <new FinishInstruction('test', 123, 321, 2).getPoints().is3D()> é falso")
chamada antiga: assertFalse(new FinishInstruction("test", 123, 321, Double.NaN).getPoints().is3D())
nova chamada: assertFalse(new FinishInstruction("test", 123, 321, Double.NaN).getPoints().is3D(), "Era esperado falso, mas " + result560 + " <new FinishInstruction('test', 123, 321, Double.NaN).getPoints().is3D()> é verdadeiro ")
chamada antiga: assertTrue(new FinishInstruction("test", pointAccess, 0).getPoints().is3D())
nova chamada: assertTrue(new FinishInstruction("test", pointAccess, 0).getPoints().is3D(), "Era esperado verdadeiro, mas " + result561 + " <new FinishInstruction('test', pointAccess, 0).getPoints().is3D()> é falso")
chamada antiga: assertFalse(new FinishInstruction("test", pointAccess, 0).getPoints().is3D())
nova chamada: assertFalse(new FinishInstruction("test", pointAccess, 0).getPoints().is3D(), "Era esperado falso, mas " + result562 + " <new FinishInstruction('test', pointAccess, 0).getPoints().is3D()> é verdadeiro ")
chamada antiga: assertEquals(1, instance.getHints().getInt("something", 2))
nova chamada: assertEquals(1, instance.getHints().getInt("something", 2), "Era esperado valores iguais, mas  1 é diferente de " + result563 + " <instance.getHints().getInt('something', 2)>")
chamada antiga: assertTrue(instance.getHeadings().isEmpty())
nova chamada: assertTrue(instance.getHeadings().isEmpty(), "Era esperado verdadeiro, mas " + result564 + " <instance.getHeadings().isEmpty()> é falso")
chamada antiga: assertEquals(nodes(0, 2, 1, 4), p.calcNodes())
nova chamada: assertEquals(nodes(0, 2, 1, 4), p.calcNodes(), "Era esperado valores iguais, mas " + result565 + " <nodes(0, 2, 1, 4)> é diferente de " + result566 + " <p.calcNodes()>")
chamada antiga: assertEquals(nodes(3, 2, 1, 4, 5), p.calcNodes())
nova chamada: assertEquals(nodes(3, 2, 1, 4, 5), p.calcNodes(), "Era esperado valores iguais, mas " + result567 + " <nodes(3, 2, 1, 4, 5)> é diferente de " + result568 + " <p.calcNodes()>")
chamada antiga: assertEquals(nodes(0, 1, 5, 2, 3), p1.calcNodes())
nova chamada: assertEquals(nodes(0, 1, 5, 2, 3), p1.calcNodes(), "Era esperado valores iguais, mas " + result569 + " <nodes(0, 1, 5, 2, 3)> é diferente de " + result570 + " <p1.calcNodes()>")
chamada antiga: assertEquals(nodes(0, 4, 6, 7, 5, 3), p2.calcNodes())
nova chamada: assertEquals(nodes(0, 4, 6, 7, 5, 3), p2.calcNodes(), "Era esperado valores iguais, mas " + result571 + " <nodes(0, 4, 6, 7, 5, 3)> é diferente de " + result572 + " <p2.calcNodes()>")
chamada antiga: assertEquals(nodes(0, 4, 5, 7), p1.calcNodes())
nova chamada: assertEquals(nodes(0, 4, 5, 7), p1.calcNodes(), "Era esperado valores iguais, mas " + result573 + " <nodes(0, 4, 5, 7)> é diferente de " + result574 + " <p1.calcNodes()>")
chamada antiga: assertTrue(f.calcPath(graph, 2, 1).isFound())
nova chamada: assertTrue(f.calcPath(graph, 2, 1).isFound(), "Era esperado verdadeiro, mas " + result575 + " <f.calcPath(graph, 2, 1).isFound()> é falso")
chamada antiga: assertEquals(nodes(1, 2), p.calcNodes())
nova chamada: assertEquals(nodes(1, 2), p.calcNodes(), "Era esperado valores iguais, mas " + result576 + " <nodes(1, 2)> é diferente de " + result577 + " <p.calcNodes()>")
chamada antiga: assertEquals(p1.calcNodes(), p2.calcNodes())
nova chamada: assertEquals(p1.calcNodes(), p2.calcNodes(), "Era esperado valores iguais, mas " + result578 + " <p1.calcNodes()> é diferente de " + result579 + " <p2.calcNodes()>")
chamada antiga: assertTrue(p.isFound())
nova chamada: assertTrue(p.isFound(), "Era esperado verdadeiro, mas " + result580 + " <p.isFound()> é falso")
chamada antiga: assertEquals(nodes(0, 7, 6, 5, 4), p.calcNodes())
nova chamada: assertEquals(nodes(0, 7, 6, 5, 4), p.calcNodes(), "Era esperado valores iguais, mas " + result581 + " <nodes(0, 7, 6, 5, 4)> é diferente de " + result582 + " <p.calcNodes()>")
chamada antiga: assertEquals(12, p.calcNodes().size())
nova chamada: assertEquals(12, p.calcNodes().size(), "Era esperado valores iguais, mas  12 é diferente de " + result583 + " <p.calcNodes().size()>")
chamada antiga: assertEquals(nodes(34, 35, 36), p.calcNodes())
nova chamada: assertEquals(nodes(34, 35, 36), p.calcNodes(), "Era esperado valores iguais, mas " + result584 + " <nodes(34, 35, 36)> é diferente de " + result585 + " <p.calcNodes()>")
chamada antiga: assertEquals(3, p.calcNodes().size())
nova chamada: assertEquals(3, p.calcNodes().size(), "Era esperado valores iguais, mas  3 é diferente de " + result586 + " <p.calcNodes().size()>")
chamada antiga: assertEquals(nodes(45, 44, 54, 64, 74, 73, 72), p.calcNodes())
nova chamada: assertEquals(nodes(45, 44, 54, 64, 74, 73, 72), p.calcNodes(), "Era esperado valores iguais, mas " + result587 + " <nodes(45, 44, 54, 64, 74, 73, 72)> é diferente de " + result588 + " <p.calcNodes()>")
chamada antiga: assertEquals(nodes(0, 1, 2, 3), p.calcNodes())
nova chamada: assertEquals(nodes(0, 1, 2, 3), p.calcNodes(), "Era esperado valores iguais, mas " + result589 + " <nodes(0, 1, 2, 3)> é diferente de " + result590 + " <p.calcNodes()>")
chamada antiga: assertEquals(nodes(4, 1, 0), p.calcNodes())
nova chamada: assertEquals(nodes(4, 1, 0), p.calcNodes(), "Era esperado valores iguais, mas " + result591 + " <nodes(4, 1, 0)> é diferente de " + result592 + " <p.calcNodes()>")
chamada antiga: assertEquals(Helper.createPointList(0, 2, 1, 1.5, 1.5, 1, 1, 0.6), p.calcPoints())
nova chamada: assertEquals(Helper.createPointList(0, 2, 1, 1.5, 1.5, 1, 1, 0.6), p.calcPoints(), "Era esperado valores iguais, mas " + result593 + " <Helper.createPointList(0, 2, 1, 1.5, 1.5, 1, 1, 0.6)> é diferente de " + result594 + " <p.calcPoints()>")
chamada antiga: assertEquals(nodes(2, 0, 1), p.calcNodes())
nova chamada: assertEquals(nodes(2, 0, 1), p.calcNodes(), "Era esperado valores iguais, mas " + result595 + " <nodes(2, 0, 1)> é diferente de " + result596 + " <p.calcNodes()>")
chamada antiga: assertEquals(Helper.createPointList(0, 0, 1, 0.6, 1.5, 1, 1, 1.5), p.calcPoints())
nova chamada: assertEquals(Helper.createPointList(0, 0, 1, 0.6, 1.5, 1, 1, 1.5), p.calcPoints(), "Era esperado valores iguais, mas " + result597 + " <Helper.createPointList(0, 0, 1, 0.6, 1.5, 1, 1, 1.5)> é diferente de " + result598 + " <p.calcPoints()>")
chamada antiga: assertEquals(nodes(8, 9), p.calcNodes())
nova chamada: assertEquals(nodes(8, 9), p.calcNodes(), "Era esperado valores iguais, mas " + result599 + " <nodes(8, 9)> é diferente de " + result600 + " <p.calcNodes()>")
chamada antiga: assertEquals(nodes(8, 1, 2, 9), p.calcNodes())
nova chamada: assertEquals(nodes(8, 1, 2, 9), p.calcNodes(), "Era esperado valores iguais, mas " + result601 + " <nodes(8, 1, 2, 9)> é diferente de " + result602 + " <p.calcNodes()>")
chamada antiga: assertEquals(nodes(5, 1, 2, 3, 6), p.calcNodes())
nova chamada: assertEquals(nodes(5, 1, 2, 3, 6), p.calcNodes(), "Era esperado valores iguais, mas " + result603 + " <nodes(5, 1, 2, 3, 6)> é diferente de " + result604 + " <p.calcNodes()>")
chamada antiga: assertEquals(nodes(5, 6), p.calcNodes())
nova chamada: assertEquals(nodes(5, 6), p.calcNodes(), "Era esperado valores iguais, mas " + result605 + " <nodes(5, 6)> é diferente de " + result606 + " <p.calcNodes()>")
chamada antiga: assertEquals(nodes(8, 1, 5, 3, 9), p.calcNodes())
nova chamada: assertEquals(nodes(8, 1, 5, 3, 9), p.calcNodes(), "Era esperado valores iguais, mas " + result607 + " <nodes(8, 1, 5, 3, 9)> é diferente de " + result608 + " <p.calcNodes()>")
chamada antiga: assertEquals(85124371, p.getTime())
nova chamada: assertEquals(85124371, p.getTime(), "Era esperado valores iguais, mas  85124371 é diferente de " + result609 + " <p.getTime()>")
chamada antiga: assertEquals(nodes(0, 4, 6, 10), p.calcNodes())
nova chamada: assertEquals(nodes(0, 4, 6, 10), p.calcNodes(), "Era esperado valores iguais, mas " + result610 + " <nodes(0, 4, 6, 10)> é diferente de " + result611 + " <p.calcNodes()>")
chamada antiga: assertEquals(nodes(12, 0, 1, 2, 11, 7, 10, 13), p.calcNodes())
nova chamada: assertEquals(nodes(12, 0, 1, 2, 11, 7, 10, 13), p.calcNodes(), "Era esperado valores iguais, mas " + result612 + " <nodes(12, 0, 1, 2, 11, 7, 10, 13)> é diferente de " + result613 + " <p.calcNodes()>")
chamada antiga: assertEquals(37009625, p.getTime())
nova chamada: assertEquals(37009625, p.getTime(), "Era esperado valores iguais, mas  37009625 é diferente de " + result614 + " <p.getTime()>")
chamada antiga: assertEquals(nodes(0, 4, 6, 7), carPath1.calcNodes())
nova chamada: assertEquals(nodes(0, 4, 6, 7), carPath1.calcNodes(), "Era esperado valores iguais, mas " + result615 + " <nodes(0, 4, 6, 7)> é diferente de " + result616 + " <carPath1.calcNodes()>")
chamada antiga: assertEquals(nodes(0, 4, 5, 7), footPath1.calcNodes())
nova chamada: assertEquals(nodes(0, 4, 5, 7), footPath1.calcNodes(), "Era esperado valores iguais, mas " + result617 + " <nodes(0, 4, 5, 7)> é diferente de " + result618 + " <footPath1.calcNodes()>")
chamada antiga: assertEquals(nodes(0, 1, 5, 6, 7), carPath2.calcNodes())
nova chamada: assertEquals(nodes(0, 1, 5, 6, 7), carPath2.calcNodes(), "Era esperado valores iguais, mas " + result619 + " <nodes(0, 1, 5, 6, 7)> é diferente de " + result620 + " <carPath2.calcNodes()>")
chamada antiga: assertEquals(nodes(0, 4, 5, 7), footPath2.calcNodes())
nova chamada: assertEquals(nodes(0, 4, 5, 7), footPath2.calcNodes(), "Era esperado valores iguais, mas " + result621 + " <nodes(0, 4, 5, 7)> é diferente de " + result622 + " <footPath2.calcNodes()>")
chamada antiga: assertTrue(p.isFound())
nova chamada: assertTrue(p.isFound(), "Era esperado verdadeiro, mas " + result623 + " <p.isFound()> é falso")
chamada antiga: assertEquals(IntArrayList.from(1, 2), p.calcNodes())
nova chamada: assertEquals(IntArrayList.from(1, 2), p.calcNodes(), "Era esperado valores iguais, mas " + result624 + " <IntArrayList.from(1, 2)> é diferente de " + result625 + " <p.calcNodes()>")
chamada antiga: assertEquals(IntArrayList.from(1, 2, 3), p.calcNodes())
nova chamada: assertEquals(IntArrayList.from(1, 2, 3), p.calcNodes(), "Era esperado valores iguais, mas " + result626 + " <IntArrayList.from(1, 2, 3)> é diferente de " + result627 + " <p.calcNodes()>")
chamada antiga: assertEquals(2, pathInfos.size())
nova chamada: assertEquals(2, pathInfos.size(), "Era esperado valores iguais, mas  2 é diferente de " + result628 + " <pathInfos.size()>")
chamada antiga: assertEquals(bestPath.calcNodes(), bestAlt.calcNodes())
nova chamada: assertEquals(bestPath.calcNodes(), bestAlt.calcNodes(), "Era esperado valores iguais, mas " + result629 + " <bestPath.calcNodes()> é diferente de " + result630 + " <bestAlt.calcNodes()>")
chamada antiga: assertEquals(IntArrayList.from(5, 6, 3, 4), bestAlt.calcNodes())
nova chamada: assertEquals(IntArrayList.from(5, 6, 3, 4), bestAlt.calcNodes(), "Era esperado valores iguais, mas " + result631 + " <IntArrayList.from(5, 6, 3, 4)> é diferente de " + result632 + " <bestAlt.calcNodes()>")
chamada antiga: assertEquals(IntArrayList.from(5, 6, 7, 8, 4), secondAlt.calcNodes())
nova chamada: assertEquals(IntArrayList.from(5, 6, 7, 8, 4), secondAlt.calcNodes(), "Era esperado valores iguais, mas " + result633 + " <IntArrayList.from(5, 6, 7, 8, 4)> é diferente de " + result634 + " <secondAlt.calcNodes()>")
chamada antiga: assertEquals(3, pathInfos.size())
nova chamada: assertEquals(3, pathInfos.size(), "Era esperado valores iguais, mas  3 é diferente de " + result635 + " <pathInfos.size()>")
chamada antiga: assertEquals(IntArrayList.from(5, 6, 3, 4), pathInfos.get(0).getPath().calcNodes())
nova chamada: assertEquals(IntArrayList.from(5, 6, 3, 4), pathInfos.get(0).getPath().calcNodes(), "Era esperado valores iguais, mas " + result636 + " <IntArrayList.from(5, 6, 3, 4)> é diferente de " + result637 + " <pathInfos.get(0).getPath().calcNodes()>")
chamada antiga: assertEquals(IntArrayList.from(5, 6, 7, 8, 4), pathInfos.get(1).getPath().calcNodes())
nova chamada: assertEquals(IntArrayList.from(5, 6, 7, 8, 4), pathInfos.get(1).getPath().calcNodes(), "Era esperado valores iguais, mas " + result638 + " <IntArrayList.from(5, 6, 7, 8, 4)> é diferente de " + result639 + " <pathInfos.get(1).getPath().calcNodes()>")
chamada antiga: assertEquals(IntArrayList.from(5, 1, 9, 2, 3, 4), pathInfos.get(2).getPath().calcNodes())
nova chamada: assertEquals(IntArrayList.from(5, 1, 9, 2, 3, 4), pathInfos.get(2).getPath().calcNodes(), "Era esperado valores iguais, mas " + result640 + " <IntArrayList.from(5, 1, 9, 2, 3, 4)> é diferente de " + result641 + " <pathInfos.get(2).getPath().calcNodes()>")
chamada antiga: assertEquals(3, altDijkstra.getVisitedNodes())
nova chamada: assertEquals(3, altDijkstra.getVisitedNodes(), "Era esperado valores iguais, mas  3 é diferente de " + result642 + " <altDijkstra.getVisitedNodes()>")
chamada antiga: assertFalse(f.calcPath(graph, 0, 1).isFound())
nova chamada: assertFalse(f.calcPath(graph, 0, 1).isFound(), "Era esperado falso, mas " + result643 + " <f.calcPath(graph, 0, 1).isFound()> é verdadeiro ")
chamada antiga: assertFalse(f.calcPath(graph, 0, 5).isFound())
nova chamada: assertFalse(f.calcPath(graph, 0, 5).isFound(), "Era esperado falso, mas " + result644 + " <f.calcPath(graph, 0, 5).isFound()> é verdadeiro ")
chamada antiga: assertFalse(f.calcPath(graph, 1, 2).isFound())
nova chamada: assertFalse(f.calcPath(graph, 1, 2).isFound(), "Era esperado falso, mas " + result645 + " <f.calcPath(graph, 1, 2).isFound()> é verdadeiro ")
chamada antiga: assertFalse(p.isFound())
nova chamada: assertFalse(p.isFound(), "Era esperado falso, mas " + result646 + " <p.isFound()> é verdadeiro ")
chamada antiga: assertFalse(path.isFound())
nova chamada: assertFalse(path.isFound(), "Era esperado falso, mas " + result647 + " <path.isFound()> é verdadeiro ")
chamada antiga: assertEquals(0, p.calcNodes().size())
nova chamada: assertEquals(0, p.calcNodes().size(), "Era esperado valores iguais, mas  0 é diferente de " + result648 + " <p.calcNodes().size()>")
chamada antiga: assertEquals(504000L, tmp.getTime())
nova chamada: assertEquals(504000L, tmp.getTime(), "Era esperado valores iguais, mas  504000L é diferente de " + result649 + " <tmp.getTime()>")
chamada antiga: assertEquals("continue", tmp.getTurnDescription(tr))
nova chamada: assertEquals("continue", tmp.getTurnDescription(tr), "Era esperado valores iguais, mas  'continue' é diferente de " + result650 + " <tmp.getTurnDescription(tr)>")
chamada antiga: assertEquals(6, tmp.getLength())
nova chamada: assertEquals(6, tmp.getLength(), "Era esperado valores iguais, mas  6 é diferente de " + result651 + " <tmp.getLength()>")
chamada antiga: assertEquals(0L, tmp.getTime())
nova chamada: assertEquals(0L, tmp.getTime(), "Era esperado valores iguais, mas  0L é diferente de " + result652 + " <tmp.getTime()>")
chamada antiga: assertEquals("arrive at destination", tmp.getTurnDescription(tr))
nova chamada: assertEquals("arrive at destination", tmp.getTurnDescription(tr), "Era esperado valores iguais, mas  'arrive at destination' é diferente de " + result653 + " <tmp.getTurnDescription(tr)>")
chamada antiga: assertEquals(0, tmp.getLength())
nova chamada: assertEquals(0, tmp.getLength(), "Era esperado valores iguais, mas  0 é diferente de " + result654 + " <tmp.getLength()>")
chamada antiga: assertEquals(path.calcPoints().size() - 1, acc)
nova chamada: assertEquals(path.calcPoints().size() - 1, acc, "Era esperado valores iguais, mas  path.calcPoints().size() - 1 é diferente de " + " acc")
chamada antiga: assertEquals(360000L, tmp.getTime())
nova chamada: assertEquals(360000L, tmp.getTime(), "Era esperado valores iguais, mas  360000L é diferente de " + result655 + " <tmp.getTime()>")
chamada antiga: assertEquals("continue", tmp.getTurnDescription(tr))
nova chamada: assertEquals("continue", tmp.getTurnDescription(tr), "Era esperado valores iguais, mas  'continue' é diferente de " + result656 + " <tmp.getTurnDescription(tr)>")
chamada antiga: assertEquals(3, tmp.getLength())
nova chamada: assertEquals(3, tmp.getLength(), "Era esperado valores iguais, mas  3 é diferente de " + result657 + " <tmp.getLength()>")
chamada antiga: assertEquals(144000L, tmp.getTime())
nova chamada: assertEquals(144000L, tmp.getTime(), "Era esperado valores iguais, mas  144000L é diferente de " + result658 + " <tmp.getTime()>")
chamada antiga: assertEquals("turn sharp right onto 2", tmp.getTurnDescription(tr))
nova chamada: assertEquals("turn sharp right onto 2", tmp.getTurnDescription(tr), "Era esperado valores iguais, mas  'turn sharp right onto 2' é diferente de " + result659 + " <tmp.getTurnDescription(tr)>")
chamada antiga: assertEquals(3, tmp.getLength())
nova chamada: assertEquals(3, tmp.getLength(), "Era esperado valores iguais, mas  3 é diferente de " + result660 + " <tmp.getLength()>")
chamada antiga: assertEquals(path.calcPoints().size() - 1, acc)
nova chamada: assertEquals(path.calcPoints().size() - 1, acc, "Era esperado valores iguais, mas  path.calcPoints().size() - 1 é diferente de " + " acc")
chamada antiga: assertEquals(144000L, tmp.getTime())
nova chamada: assertEquals(144000L, tmp.getTime(), "Era esperado valores iguais, mas  144000L é diferente de " + result661 + " <tmp.getTime()>")
chamada antiga: assertEquals("continue onto 2", tmp.getTurnDescription(tr))
nova chamada: assertEquals("continue onto 2", tmp.getTurnDescription(tr), "Era esperado valores iguais, mas  'continue onto 2' é diferente de " + result662 + " <tmp.getTurnDescription(tr)>")
chamada antiga: assertEquals(3, tmp.getLength())
nova chamada: assertEquals(3, tmp.getLength(), "Era esperado valores iguais, mas  3 é diferente de " + result663 + " <tmp.getLength()>")
chamada antiga: assertEquals(360000L, tmp.getTime())
nova chamada: assertEquals(360000L, tmp.getTime(), "Era esperado valores iguais, mas  360000L é diferente de " + result664 + " <tmp.getTime()>")
chamada antiga: assertEquals("turn sharp left", tmp.getTurnDescription(tr))
nova chamada: assertEquals("turn sharp left", tmp.getTurnDescription(tr), "Era esperado valores iguais, mas  'turn sharp left' é diferente de " + result665 + " <tmp.getTurnDescription(tr)>")
chamada antiga: assertEquals(3, tmp.getLength())
nova chamada: assertEquals(3, tmp.getLength(), "Era esperado valores iguais, mas  3 é diferente de " + result666 + " <tmp.getLength()>")
chamada antiga: assertEquals(path.calcPoints().size() - 1, acc)
nova chamada: assertEquals(path.calcPoints().size() - 1, acc, "Era esperado valores iguais, mas  path.calcPoints().size() - 1 é diferente de " + " acc")
chamada antiga: assertEquals(5, il.size())
nova chamada: assertEquals(5, il.size(), "Era esperado valores iguais, mas  5 é diferente de " + result667 + " <il.size()>")
chamada antiga: assertEquals(Instruction.CONTINUE_ON_STREET, il.get(0).getSign())
nova chamada: assertEquals(Instruction.CONTINUE_ON_STREET, il.get(0).getSign(), "Era esperado valores iguais, mas  Instruction.CONTINUE_ON_STREET é diferente de " + result668 + " <il.get(0).getSign()>")
chamada antiga: assertEquals(Instruction.TURN_RIGHT, il.get(1).getSign())
nova chamada: assertEquals(Instruction.TURN_RIGHT, il.get(1).getSign(), "Era esperado valores iguais, mas  Instruction.TURN_RIGHT é diferente de " + result669 + " <il.get(1).getSign()>")
chamada antiga: assertEquals(Instruction.TURN_LEFT, il.get(2).getSign())
nova chamada: assertEquals(Instruction.TURN_LEFT, il.get(2).getSign(), "Era esperado valores iguais, mas  Instruction.TURN_LEFT é diferente de " + result670 + " <il.get(2).getSign()>")
chamada antiga: assertEquals(Instruction.TURN_SHARP_LEFT, il.get(3).getSign())
nova chamada: assertEquals(Instruction.TURN_SHARP_LEFT, il.get(3).getSign(), "Era esperado valores iguais, mas  Instruction.TURN_SHARP_LEFT é diferente de " + result671 + " <il.get(3).getSign()>")
chamada antiga: assertEquals(Instruction.FINISH, il.get(4).getSign())
nova chamada: assertEquals(Instruction.FINISH, il.get(4).getSign(), "Era esperado valores iguais, mas  Instruction.FINISH é diferente de " + result672 + " <il.get(4).getSign()>")
chamada antiga: assertTrue(p.isFound())
nova chamada: assertTrue(p.isFound(), "Era esperado verdadeiro, mas " + result673 + " <p.isFound()> é falso")
chamada antiga: assertEquals("[1, 2, 3, 4, 5, 8]", p.calcNodes().toString())
nova chamada: assertEquals("[1, 2, 3, 4, 5, 8]", p.calcNodes().toString(), "Era esperado valores iguais, mas  '[1, 2, 3, 4, 5, 8]' é diferente de " + result674 + " <p.calcNodes().toString()>")
chamada antiga: assertEquals(Arrays.asList("continue onto MainStreet 1 2", "At roundabout, take exit 3 onto 5-8", "arrive at destination"), tmpList)
nova chamada: assertEquals(Arrays.asList("continue onto MainStreet 1 2", "At roundabout, take exit 3 onto 5-8", "arrive at destination"), tmpList, "Era esperado valores iguais, mas " + result675 + " <Arrays.asList('continue onto MainStreet 1 2', 'At roundabout, take exit 3 onto 5-8', 'arrive at destination')> é diferente de " + " tmpList")
chamada antiga: assertEquals(Arrays.asList("continue onto MainStreet 1 2", "At roundabout, take exit 2 onto MainStreet 4 7", "arrive at destination"), tmpList)
nova chamada: assertEquals(Arrays.asList("continue onto MainStreet 1 2", "At roundabout, take exit 2 onto MainStreet 4 7", "arrive at destination"), tmpList, "Era esperado valores iguais, mas " + result676 + " <Arrays.asList('continue onto MainStreet 1 2', 'At roundabout, take exit 2 onto MainStreet 4 7', 'arrive at destination')> é diferente de " + " tmpList")
chamada antiga: assertTrue(p.isFound())
nova chamada: assertTrue(p.isFound(), "Era esperado verdadeiro, mas " + result677 + " <p.isFound()> é falso")
chamada antiga: assertEquals(Arrays.asList("At roundabout, take exit 3 onto 5-8", "arrive at destination"), tmpList)
nova chamada: assertEquals(Arrays.asList("At roundabout, take exit 3 onto 5-8", "arrive at destination"), tmpList, "Era esperado valores iguais, mas " + result678 + " <Arrays.asList('At roundabout, take exit 3 onto 5-8', 'arrive at destination')> é diferente de " + " tmpList")
chamada antiga: assertTrue(p.isFound())
nova chamada: assertTrue(p.isFound(), "Era esperado verdadeiro, mas " + result679 + " <p.isFound()> é falso")
chamada antiga: assertEquals(Arrays.asList("continue onto 3-6", "At roundabout, take exit 3 onto 5-8", "arrive at destination"), tmpList)
nova chamada: assertEquals(Arrays.asList("continue onto 3-6", "At roundabout, take exit 3 onto 5-8", "arrive at destination"), tmpList, "Era esperado valores iguais, mas " + result680 + " <Arrays.asList('continue onto 3-6', 'At roundabout, take exit 3 onto 5-8', 'arrive at destination')> é diferente de " + " tmpList")
chamada antiga: assertTrue(p.isFound())
nova chamada: assertTrue(p.isFound(), "Era esperado verdadeiro, mas " + result681 + " <p.isFound()> é falso")
chamada antiga: assertTrue(details.size() == 1)
nova chamada: assertTrue(details.size() == 1, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(4, averageSpeedDetails.size())
nova chamada: assertEquals(4, averageSpeedDetails.size(), "Era esperado valores iguais, mas  4 é diferente de " + result682 + " <averageSpeedDetails.size()>")
chamada antiga: assertEquals(45.0, averageSpeedDetails.get(0).getValue())
nova chamada: assertEquals(45.0, averageSpeedDetails.get(0).getValue(), "Era esperado valores iguais, mas  45.0 é diferente de " + result683 + " <averageSpeedDetails.get(0).getValue()>")
chamada antiga: assertEquals(90.0, averageSpeedDetails.get(1).getValue())
nova chamada: assertEquals(90.0, averageSpeedDetails.get(1).getValue(), "Era esperado valores iguais, mas  90.0 é diferente de " + result684 + " <averageSpeedDetails.get(1).getValue()>")
chamada antiga: assertEquals(10.0, averageSpeedDetails.get(2).getValue())
nova chamada: assertEquals(10.0, averageSpeedDetails.get(2).getValue(), "Era esperado valores iguais, mas  10.0 é diferente de " + result685 + " <averageSpeedDetails.get(2).getValue()>")
chamada antiga: assertEquals(45.0, averageSpeedDetails.get(3).getValue())
nova chamada: assertEquals(45.0, averageSpeedDetails.get(3).getValue(), "Era esperado valores iguais, mas  45.0 é diferente de " + result686 + " <averageSpeedDetails.get(3).getValue()>")
chamada antiga: assertEquals(0, averageSpeedDetails.get(0).getFirst())
nova chamada: assertEquals(0, averageSpeedDetails.get(0).getFirst(), "Era esperado valores iguais, mas  0 é diferente de " + result687 + " <averageSpeedDetails.get(0).getFirst()>")
chamada antiga: assertEquals(1, averageSpeedDetails.get(1).getFirst())
nova chamada: assertEquals(1, averageSpeedDetails.get(1).getFirst(), "Era esperado valores iguais, mas  1 é diferente de " + result688 + " <averageSpeedDetails.get(1).getFirst()>")
chamada antiga: assertEquals(2, averageSpeedDetails.get(2).getFirst())
nova chamada: assertEquals(2, averageSpeedDetails.get(2).getFirst(), "Era esperado valores iguais, mas  2 é diferente de " + result689 + " <averageSpeedDetails.get(2).getFirst()>")
chamada antiga: assertEquals(3, averageSpeedDetails.get(3).getFirst())
nova chamada: assertEquals(3, averageSpeedDetails.get(3).getFirst(), "Era esperado valores iguais, mas  3 é diferente de " + result690 + " <averageSpeedDetails.get(3).getFirst()>")
chamada antiga: assertEquals(4, averageSpeedDetails.get(3).getLast())
nova chamada: assertEquals(4, averageSpeedDetails.get(3).getLast(), "Era esperado valores iguais, mas  4 é diferente de " + result691 + " <averageSpeedDetails.get(3).getLast()>")
chamada antiga: assertTrue(p.isFound())
nova chamada: assertTrue(p.isFound(), "Era esperado verdadeiro, mas " + result692 + " <p.isFound()> é falso")
chamada antiga: assertTrue(details.size() == 1)
nova chamada: assertTrue(details.size() == 1, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(4, averageSpeedDetails.size())
nova chamada: assertEquals(4, averageSpeedDetails.size(), "Era esperado valores iguais, mas  4 é diferente de " + result693 + " <averageSpeedDetails.size()>")
chamada antiga: assertTrue(p.isFound())
nova chamada: assertTrue(p.isFound(), "Era esperado verdadeiro, mas " + result694 + " <p.isFound()> é falso")
chamada antiga: assertTrue(details.size() == 1)
nova chamada: assertTrue(details.size() == 1, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(5, averageSpeedDetails.size())
nova chamada: assertEquals(5, averageSpeedDetails.size(), "Era esperado valores iguais, mas  5 é diferente de " + result695 + " <averageSpeedDetails.size()>")
chamada antiga: assertNull(averageSpeedDetails.get(0).getValue())
nova chamada: assertNull(averageSpeedDetails.get(0).getValue(), "Era esperado nulo, mas " + result696 + " <averageSpeedDetails.get(0).getValue()> não é nulo")
chamada antiga: assertTrue(p.isFound())
nova chamada: assertTrue(p.isFound(), "Era esperado verdadeiro, mas " + result697 + " <p.isFound()> é falso")
chamada antiga: assertTrue(details.size() == 1)
nova chamada: assertTrue(details.size() == 1, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(details.size() == 1)
nova chamada: assertTrue(details.size() == 1, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(4, streetNameDetails.size())
nova chamada: assertEquals(4, streetNameDetails.size(), "Era esperado valores iguais, mas  4 é diferente de " + result698 + " <streetNameDetails.size()>")
chamada antiga: assertEquals("1-2", streetNameDetails.get(0).getValue())
nova chamada: assertEquals("1-2", streetNameDetails.get(0).getValue(), "Era esperado valores iguais, mas  '1-2' é diferente de " + result699 + " <streetNameDetails.get(0).getValue()>")
chamada antiga: assertEquals("2-3", streetNameDetails.get(1).getValue())
nova chamada: assertEquals("2-3", streetNameDetails.get(1).getValue(), "Era esperado valores iguais, mas  '2-3' é diferente de " + result700 + " <streetNameDetails.get(1).getValue()>")
chamada antiga: assertEquals("3-4", streetNameDetails.get(2).getValue())
nova chamada: assertEquals("3-4", streetNameDetails.get(2).getValue(), "Era esperado valores iguais, mas  '3-4' é diferente de " + result701 + " <streetNameDetails.get(2).getValue()>")
chamada antiga: assertEquals("4-5", streetNameDetails.get(3).getValue())
nova chamada: assertEquals("4-5", streetNameDetails.get(3).getValue(), "Era esperado valores iguais, mas  '4-5' é diferente de " + result702 + " <streetNameDetails.get(3).getValue()>")
chamada antiga: assertEquals(0, streetNameDetails.get(0).getFirst())
nova chamada: assertEquals(0, streetNameDetails.get(0).getFirst(), "Era esperado valores iguais, mas  0 é diferente de " + result703 + " <streetNameDetails.get(0).getFirst()>")
chamada antiga: assertEquals(1, streetNameDetails.get(1).getFirst())
nova chamada: assertEquals(1, streetNameDetails.get(1).getFirst(), "Era esperado valores iguais, mas  1 é diferente de " + result704 + " <streetNameDetails.get(1).getFirst()>")
chamada antiga: assertEquals(2, streetNameDetails.get(2).getFirst())
nova chamada: assertEquals(2, streetNameDetails.get(2).getFirst(), "Era esperado valores iguais, mas  2 é diferente de " + result705 + " <streetNameDetails.get(2).getFirst()>")
chamada antiga: assertEquals(3, streetNameDetails.get(3).getFirst())
nova chamada: assertEquals(3, streetNameDetails.get(3).getFirst(), "Era esperado valores iguais, mas  3 é diferente de " + result706 + " <streetNameDetails.get(3).getFirst()>")
chamada antiga: assertEquals(4, streetNameDetails.get(3).getLast())
nova chamada: assertEquals(4, streetNameDetails.get(3).getLast(), "Era esperado valores iguais, mas  4 é diferente de " + result707 + " <streetNameDetails.get(3).getLast()>")
chamada antiga: assertTrue(p.isFound())
nova chamada: assertTrue(p.isFound(), "Era esperado verdadeiro, mas " + result708 + " <p.isFound()> é falso")
chamada antiga: assertTrue(details.size() == 1)
nova chamada: assertTrue(details.size() == 1, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(4, edgeIdDetails.size())
nova chamada: assertEquals(4, edgeIdDetails.size(), "Era esperado valores iguais, mas  4 é diferente de " + result709 + " <edgeIdDetails.size()>")
chamada antiga: assertEquals(0, edgeIdDetails.get(0).getValue())
nova chamada: assertEquals(0, edgeIdDetails.get(0).getValue(), "Era esperado valores iguais, mas  0 é diferente de " + result710 + " <edgeIdDetails.get(0).getValue()>")
chamada antiga: assertEquals(2, edgeIdDetails.get(1).getValue())
nova chamada: assertEquals(2, edgeIdDetails.get(1).getValue(), "Era esperado valores iguais, mas  2 é diferente de " + result711 + " <edgeIdDetails.get(1).getValue()>")
chamada antiga: assertEquals(3, edgeIdDetails.get(2).getValue())
nova chamada: assertEquals(3, edgeIdDetails.get(2).getValue(), "Era esperado valores iguais, mas  3 é diferente de " + result712 + " <edgeIdDetails.get(2).getValue()>")
chamada antiga: assertEquals(1, edgeIdDetails.get(3).getValue())
nova chamada: assertEquals(1, edgeIdDetails.get(3).getValue(), "Era esperado valores iguais, mas  1 é diferente de " + result713 + " <edgeIdDetails.get(3).getValue()>")
chamada antiga: assertEquals(0, edgeIdDetails.get(0).getFirst())
nova chamada: assertEquals(0, edgeIdDetails.get(0).getFirst(), "Era esperado valores iguais, mas  0 é diferente de " + result714 + " <edgeIdDetails.get(0).getFirst()>")
chamada antiga: assertEquals(1, edgeIdDetails.get(1).getFirst())
nova chamada: assertEquals(1, edgeIdDetails.get(1).getFirst(), "Era esperado valores iguais, mas  1 é diferente de " + result715 + " <edgeIdDetails.get(1).getFirst()>")
chamada antiga: assertEquals(2, edgeIdDetails.get(2).getFirst())
nova chamada: assertEquals(2, edgeIdDetails.get(2).getFirst(), "Era esperado valores iguais, mas  2 é diferente de " + result716 + " <edgeIdDetails.get(2).getFirst()>")
chamada antiga: assertEquals(3, edgeIdDetails.get(3).getFirst())
nova chamada: assertEquals(3, edgeIdDetails.get(3).getFirst(), "Era esperado valores iguais, mas  3 é diferente de " + result717 + " <edgeIdDetails.get(3).getFirst()>")
chamada antiga: assertEquals(4, edgeIdDetails.get(3).getLast())
nova chamada: assertEquals(4, edgeIdDetails.get(3).getLast(), "Era esperado valores iguais, mas  4 é diferente de " + result718 + " <edgeIdDetails.get(3).getLast()>")
chamada antiga: assertTrue(p.isFound())
nova chamada: assertTrue(p.isFound(), "Era esperado verdadeiro, mas " + result719 + " <p.isFound()> é falso")
chamada antiga: assertEquals(4, edgeKeyDetails.size())
nova chamada: assertEquals(4, edgeKeyDetails.size(), "Era esperado valores iguais, mas  4 é diferente de " + result720 + " <edgeKeyDetails.size()>")
chamada antiga: assertEquals(0, edgeKeyDetails.get(0).getValue())
nova chamada: assertEquals(0, edgeKeyDetails.get(0).getValue(), "Era esperado valores iguais, mas  0 é diferente de " + result721 + " <edgeKeyDetails.get(0).getValue()>")
chamada antiga: assertEquals(4, edgeKeyDetails.get(1).getValue())
nova chamada: assertEquals(4, edgeKeyDetails.get(1).getValue(), "Era esperado valores iguais, mas  4 é diferente de " + result722 + " <edgeKeyDetails.get(1).getValue()>")
chamada antiga: assertEquals(6, edgeKeyDetails.get(2).getValue())
nova chamada: assertEquals(6, edgeKeyDetails.get(2).getValue(), "Era esperado valores iguais, mas  6 é diferente de " + result723 + " <edgeKeyDetails.get(2).getValue()>")
chamada antiga: assertEquals(2, edgeKeyDetails.get(3).getValue())
nova chamada: assertEquals(2, edgeKeyDetails.get(3).getValue(), "Era esperado valores iguais, mas  2 é diferente de " + result724 + " <edgeKeyDetails.get(3).getValue()>")
chamada antiga: assertTrue(p.isFound())
nova chamada: assertTrue(p.isFound(), "Era esperado verdadeiro, mas " + result725 + " <p.isFound()> é falso")
chamada antiga: assertEquals(4, edgeKeyDetails.size())
nova chamada: assertEquals(4, edgeKeyDetails.size(), "Era esperado valores iguais, mas  4 é diferente de " + result726 + " <edgeKeyDetails.size()>")
chamada antiga: assertEquals(3, edgeKeyDetails.get(0).getValue())
nova chamada: assertEquals(3, edgeKeyDetails.get(0).getValue(), "Era esperado valores iguais, mas  3 é diferente de " + result727 + " <edgeKeyDetails.get(0).getValue()>")
chamada antiga: assertEquals(7, edgeKeyDetails.get(1).getValue())
nova chamada: assertEquals(7, edgeKeyDetails.get(1).getValue(), "Era esperado valores iguais, mas  7 é diferente de " + result728 + " <edgeKeyDetails.get(1).getValue()>")
chamada antiga: assertEquals(5, edgeKeyDetails.get(2).getValue())
nova chamada: assertEquals(5, edgeKeyDetails.get(2).getValue(), "Era esperado valores iguais, mas  5 é diferente de " + result729 + " <edgeKeyDetails.get(2).getValue()>")
chamada antiga: assertEquals(1, edgeKeyDetails.get(3).getValue())
nova chamada: assertEquals(1, edgeKeyDetails.get(3).getValue(), "Era esperado valores iguais, mas  1 é diferente de " + result730 + " <edgeKeyDetails.get(3).getValue()>")
chamada antiga: assertTrue(p.isFound())
nova chamada: assertTrue(p.isFound(), "Era esperado verdadeiro, mas " + result731 + " <p.isFound()> é falso")
chamada antiga: assertTrue(details.size() == 1)
nova chamada: assertTrue(details.size() == 1, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(4, timeDetails.size())
nova chamada: assertEquals(4, timeDetails.size(), "Era esperado valores iguais, mas  4 é diferente de " + result732 + " <timeDetails.size()>")
chamada antiga: assertEquals(400L, timeDetails.get(0).getValue())
nova chamada: assertEquals(400L, timeDetails.get(0).getValue(), "Era esperado valores iguais, mas  400L é diferente de " + result733 + " <timeDetails.get(0).getValue()>")
chamada antiga: assertEquals(200L, timeDetails.get(1).getValue())
nova chamada: assertEquals(200L, timeDetails.get(1).getValue(), "Era esperado valores iguais, mas  200L é diferente de " + result734 + " <timeDetails.get(1).getValue()>")
chamada antiga: assertEquals(3600L, timeDetails.get(2).getValue())
nova chamada: assertEquals(3600L, timeDetails.get(2).getValue(), "Era esperado valores iguais, mas  3600L é diferente de " + result735 + " <timeDetails.get(2).getValue()>")
chamada antiga: assertEquals(400L, timeDetails.get(3).getValue())
nova chamada: assertEquals(400L, timeDetails.get(3).getValue(), "Era esperado valores iguais, mas  400L é diferente de " + result736 + " <timeDetails.get(3).getValue()>")
chamada antiga: assertEquals(0, timeDetails.get(0).getFirst())
nova chamada: assertEquals(0, timeDetails.get(0).getFirst(), "Era esperado valores iguais, mas  0 é diferente de " + result737 + " <timeDetails.get(0).getFirst()>")
chamada antiga: assertEquals(1, timeDetails.get(1).getFirst())
nova chamada: assertEquals(1, timeDetails.get(1).getFirst(), "Era esperado valores iguais, mas  1 é diferente de " + result738 + " <timeDetails.get(1).getFirst()>")
chamada antiga: assertEquals(2, timeDetails.get(2).getFirst())
nova chamada: assertEquals(2, timeDetails.get(2).getFirst(), "Era esperado valores iguais, mas  2 é diferente de " + result739 + " <timeDetails.get(2).getFirst()>")
chamada antiga: assertEquals(3, timeDetails.get(3).getFirst())
nova chamada: assertEquals(3, timeDetails.get(3).getFirst(), "Era esperado valores iguais, mas  3 é diferente de " + result740 + " <timeDetails.get(3).getFirst()>")
chamada antiga: assertEquals(4, timeDetails.get(3).getLast())
nova chamada: assertEquals(4, timeDetails.get(3).getLast(), "Era esperado valores iguais, mas  4 é diferente de " + result741 + " <timeDetails.get(3).getLast()>")
chamada antiga: assertTrue(p.isFound())
nova chamada: assertTrue(p.isFound(), "Era esperado verdadeiro, mas " + result742 + " <p.isFound()> é falso")
chamada antiga: assertTrue(details.size() == 1)
nova chamada: assertTrue(details.size() == 1, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(5D, distanceDetails.get(0).getValue())
nova chamada: assertEquals(5D, distanceDetails.get(0).getValue(), "Era esperado valores iguais, mas  5D é diferente de " + result743 + " <distanceDetails.get(0).getValue()>")
chamada antiga: assertEquals(5D, distanceDetails.get(1).getValue())
nova chamada: assertEquals(5D, distanceDetails.get(1).getValue(), "Era esperado valores iguais, mas  5D é diferente de " + result744 + " <distanceDetails.get(1).getValue()>")
chamada antiga: assertEquals(10D, distanceDetails.get(2).getValue())
nova chamada: assertEquals(10D, distanceDetails.get(2).getValue(), "Era esperado valores iguais, mas  10D é diferente de " + result745 + " <distanceDetails.get(2).getValue()>")
chamada antiga: assertEquals(5D, distanceDetails.get(3).getValue())
nova chamada: assertEquals(5D, distanceDetails.get(3).getValue(), "Era esperado valores iguais, mas  5D é diferente de " + result746 + " <distanceDetails.get(3).getValue()>")
chamada antiga: assertTrue(p.isFound())
nova chamada: assertTrue(p.isFound(), "Era esperado verdadeiro, mas " + result747 + " <p.isFound()> é falso")
chamada antiga: assertEquals(Arrays.asList("continue onto MainStreet 1 2", "At roundabout, take exit 2 onto 5-8", "arrive at destination"), tmpList)
nova chamada: assertEquals(Arrays.asList("continue onto MainStreet 1 2", "At roundabout, take exit 2 onto 5-8", "arrive at destination"), tmpList, "Era esperado valores iguais, mas " + result748 + " <Arrays.asList('continue onto MainStreet 1 2', 'At roundabout, take exit 2 onto 5-8', 'arrive at destination')> é diferente de " + " tmpList")
chamada antiga: assertTrue(p.isFound())
nova chamada: assertTrue(p.isFound(), "Era esperado verdadeiro, mas " + result749 + " <p.isFound()> é falso")
chamada antiga: assertEquals(Arrays.asList("At roundabout, take exit 1 onto MainStreet 1 11", "arrive at destination"), tmpList)
nova chamada: assertEquals(Arrays.asList("At roundabout, take exit 1 onto MainStreet 1 11", "arrive at destination"), tmpList, "Era esperado valores iguais, mas " + result750 + " <Arrays.asList('At roundabout, take exit 1 onto MainStreet 1 11', 'arrive at destination')> é diferente de " + " tmpList")
chamada antiga: assertTrue(p.isFound())
nova chamada: assertTrue(p.isFound(), "Era esperado verdadeiro, mas " + result751 + " <p.isFound()> é falso")
chamada antiga: assertEquals(Arrays.asList("continue onto MainStreet 1 2", "At roundabout, take exit 1 onto 5-8", "arrive at destination"), tmpList)
nova chamada: assertEquals(Arrays.asList("continue onto MainStreet 1 2", "At roundabout, take exit 1 onto 5-8", "arrive at destination"), tmpList, "Era esperado valores iguais, mas " + result752 + " <Arrays.asList('continue onto MainStreet 1 2', 'At roundabout, take exit 1 onto 5-8', 'arrive at destination')> é diferente de " + " tmpList")
chamada antiga: assertTrue(p.isFound())
nova chamada: assertTrue(p.isFound(), "Era esperado verdadeiro, mas " + result753 + " <p.isFound()> é falso")
chamada antiga: assertEquals(2, wayList.size())
nova chamada: assertEquals(2, wayList.size(), "Era esperado valores iguais, mas  2 é diferente de " + result754 + " <wayList.size()>")
chamada antiga: assertTrue(p.isFound())
nova chamada: assertTrue(p.isFound(), "Era esperado verdadeiro, mas " + result755 + " <p.isFound()> é falso")
chamada antiga: assertEquals(2, wayList.size())
nova chamada: assertEquals(2, wayList.size(), "Era esperado valores iguais, mas  2 é diferente de " + result756 + " <wayList.size()>")
chamada antiga: assertTrue(p.isFound())
nova chamada: assertTrue(p.isFound(), "Era esperado verdadeiro, mas " + result757 + " <p.isFound()> é falso")
chamada antiga: assertEquals(3, wayList.size())
nova chamada: assertEquals(3, wayList.size(), "Era esperado valores iguais, mas  3 é diferente de " + result758 + " <wayList.size()>")
chamada antiga: assertEquals(-7, wayList.get(1).getSign())
nova chamada: assertEquals(-7, wayList.get(1).getSign(), "Era esperado valores iguais, mas  -7 é diferente de " + result759 + " <wayList.get(1).getSign()>")
chamada antiga: assertTrue(p.isFound())
nova chamada: assertTrue(p.isFound(), "Era esperado verdadeiro, mas " + result760 + " <p.isFound()> é falso")
chamada antiga: assertEquals(2, wayList.size())
nova chamada: assertEquals(2, wayList.size(), "Era esperado valores iguais, mas  2 é diferente de " + result761 + " <wayList.size()>")
chamada antiga: assertTrue(p.isFound())
nova chamada: assertTrue(p.isFound(), "Era esperado verdadeiro, mas " + result762 + " <p.isFound()> é falso")
chamada antiga: assertEquals(2, wayList.size())
nova chamada: assertEquals(2, wayList.size(), "Era esperado valores iguais, mas  2 é diferente de " + result763 + " <wayList.size()>")
chamada antiga: assertTrue(p.isFound())
nova chamada: assertTrue(p.isFound(), "Era esperado verdadeiro, mas " + result764 + " <p.isFound()> é falso")
chamada antiga: assertEquals(3, wayList.size())
nova chamada: assertEquals(3, wayList.size(), "Era esperado valores iguais, mas  3 é diferente de " + result765 + " <wayList.size()>")
chamada antiga: assertEquals(0, wayList.get(1).getSign())
nova chamada: assertEquals(0, wayList.get(1).getSign(), "Era esperado valores iguais, mas  0 é diferente de " + result766 + " <wayList.get(1).getSign()>")
chamada antiga: assertTrue(p.isFound())
nova chamada: assertTrue(p.isFound(), "Era esperado verdadeiro, mas " + result767 + " <p.isFound()> é falso")
chamada antiga: assertEquals(3, wayList.size())
nova chamada: assertEquals(3, wayList.size(), "Era esperado valores iguais, mas  3 é diferente de " + result768 + " <wayList.size()>")
chamada antiga: assertEquals(2, wayList.get(1).getSign())
nova chamada: assertEquals(2, wayList.get(1).getSign(), "Era esperado valores iguais, mas  2 é diferente de " + result769 + " <wayList.get(1).getSign()>")
chamada antiga: assertTrue(p.isFound())
nova chamada: assertTrue(p.isFound(), "Era esperado verdadeiro, mas " + result770 + " <p.isFound()> é falso")
chamada antiga: assertEquals(3, wayList.size())
nova chamada: assertEquals(3, wayList.size(), "Era esperado valores iguais, mas  3 é diferente de " + result771 + " <wayList.size()>")
chamada antiga: assertTrue(p.isFound())
nova chamada: assertTrue(p.isFound(), "Era esperado verdadeiro, mas " + result772 + " <p.isFound()> é falso")
chamada antiga: assertEquals(3, wayList.size())
nova chamada: assertEquals(3, wayList.size(), "Era esperado valores iguais, mas  3 é diferente de " + result773 + " <wayList.size()>")
chamada antiga: assertTrue(p.isFound())
nova chamada: assertTrue(p.isFound(), "Era esperado verdadeiro, mas " + result774 + " <p.isFound()> é falso")
chamada antiga: assertEquals(3, wayList.size())
nova chamada: assertEquals(3, wayList.size(), "Era esperado valores iguais, mas  3 é diferente de " + result775 + " <wayList.size()>")
chamada antiga: assertEquals(-7, wayList.get(1).getSign())
nova chamada: assertEquals(-7, wayList.get(1).getSign(), "Era esperado valores iguais, mas  -7 é diferente de " + result776 + " <wayList.get(1).getSign()>")
chamada antiga: assertTrue(p.isFound())
nova chamada: assertTrue(p.isFound(), "Era esperado verdadeiro, mas " + result777 + " <p.isFound()> é falso")
chamada antiga: assertEquals(3, wayList.size())
nova chamada: assertEquals(3, wayList.size(), "Era esperado valores iguais, mas  3 é diferente de " + result778 + " <wayList.size()>")
chamada antiga: assertEquals(-1, wayList.get(1).getSign())
nova chamada: assertEquals(-1, wayList.get(1).getSign(), "Era esperado valores iguais, mas  -1 é diferente de " + result779 + " <wayList.get(1).getSign()>")
chamada antiga: assertTrue(p.isFound())
nova chamada: assertTrue(p.isFound(), "Era esperado verdadeiro, mas " + result780 + " <p.isFound()> é falso")
chamada antiga: assertEquals(3, wayList.size())
nova chamada: assertEquals(3, wayList.size(), "Era esperado valores iguais, mas  3 é diferente de " + result781 + " <wayList.size()>")
chamada antiga: assertEquals(Instruction.U_TURN_LEFT, wayList.get(1).getSign())
nova chamada: assertEquals(Instruction.U_TURN_LEFT, wayList.get(1).getSign(), "Era esperado valores iguais, mas  Instruction.U_TURN_LEFT é diferente de " + result782 + " <wayList.get(1).getSign()>")
chamada antiga: assertTrue(p.isFound())
nova chamada: assertTrue(p.isFound(), "Era esperado verdadeiro, mas " + result783 + " <p.isFound()> é falso")
chamada antiga: assertEquals(3, wayList.size())
nova chamada: assertEquals(3, wayList.size(), "Era esperado valores iguais, mas  3 é diferente de " + result784 + " <wayList.size()>")
chamada antiga: assertEquals(Instruction.U_TURN_RIGHT, wayList.get(1).getSign())
nova chamada: assertEquals(Instruction.U_TURN_RIGHT, wayList.get(1).getSign(), "Era esperado valores iguais, mas  Instruction.U_TURN_RIGHT é diferente de " + result785 + " <wayList.get(1).getSign()>")
chamada antiga: assertTrue(p.isFound())
nova chamada: assertTrue(p.isFound(), "Era esperado verdadeiro, mas " + result786 + " <p.isFound()> é falso")
chamada antiga: assertEquals(3, wayList.size())
nova chamada: assertEquals(3, wayList.size(), "Era esperado valores iguais, mas  3 é diferente de " + result787 + " <wayList.size()>")
chamada antiga: assertEquals(2, wayList.get(1).getSign())
nova chamada: assertEquals(2, wayList.get(1).getSign(), "Era esperado valores iguais, mas  2 é diferente de " + result788 + " <wayList.get(1).getSign()>")
chamada antiga: assertTrue(p.isFound())
nova chamada: assertTrue(p.isFound(), "Era esperado verdadeiro, mas " + result789 + " <p.isFound()> é falso")
chamada antiga: assertEquals(3, wayList.size())
nova chamada: assertEquals(3, wayList.size(), "Era esperado valores iguais, mas  3 é diferente de " + result790 + " <wayList.size()>")
chamada antiga: assertEquals(7, wayList.get(1).getSign())
nova chamada: assertEquals(7, wayList.get(1).getSign(), "Era esperado valores iguais, mas  7 é diferente de " + result791 + " <wayList.get(1).getSign()>")
chamada antiga: assertTrue(p.isFound())
nova chamada: assertTrue(p.isFound(), "Era esperado verdadeiro, mas " + result792 + " <p.isFound()> é falso")
chamada antiga: assertEquals(3, wayList.size())
nova chamada: assertEquals(3, wayList.size(), "Era esperado valores iguais, mas  3 é diferente de " + result793 + " <wayList.size()>")
chamada antiga: assertEquals(Instruction.TURN_SLIGHT_RIGHT, wayList.get(1).getSign())
nova chamada: assertEquals(Instruction.TURN_SLIGHT_RIGHT, wayList.get(1).getSign(), "Era esperado valores iguais, mas  Instruction.TURN_SLIGHT_RIGHT é diferente de " + result794 + " <wayList.get(1).getSign()>")
chamada antiga: assertTrue(p.isFound())
nova chamada: assertTrue(p.isFound(), "Era esperado verdadeiro, mas " + result795 + " <p.isFound()> é falso")
chamada antiga: assertEquals(2, wayList.size())
nova chamada: assertEquals(2, wayList.size(), "Era esperado valores iguais, mas  2 é diferente de " + result796 + " <wayList.size()>")
chamada antiga: assertEquals(11_000, path.getDistance())
nova chamada: assertEquals(11_000, path.getDistance(), "Era esperado valores iguais, mas  11_000 é diferente de " + result797 + " <path.getDistance()>")
chamada antiga: assertEquals(IntArrayList.from(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), path.calcNodes())
nova chamada: assertEquals(IntArrayList.from(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), path.calcNodes(), "Era esperado valores iguais, mas " + result798 + " <IntArrayList.from(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)> é diferente de " + result799 + " <path.calcNodes()>")
chamada antiga: assertEquals(10_900, optimalPath.getDistance())
nova chamada: assertEquals(10_900, optimalPath.getDistance(), "Era esperado valores iguais, mas  10_900 é diferente de " + result800 + " <optimalPath.getDistance()>")
chamada antiga: assertEquals(IntArrayList.from(0, 1, 10, 2, 3, 4, 5, 6, 7, 8, 9), optimalPath.calcNodes())
nova chamada: assertEquals(IntArrayList.from(0, 1, 10, 2, 3, 4, 5, 6, 7, 8, 9), optimalPath.calcNodes(), "Era esperado valores iguais, mas " + result801 + " <IntArrayList.from(0, 1, 10, 2, 3, 4, 5, 6, 7, 8, 9)> é diferente de " + result802 + " <optimalPath.calcNodes()>")
chamada antiga: assertTrue(path.isFound())
nova chamada: assertTrue(path.isFound(), "Era esperado verdadeiro, mas " + result803 + " <path.isFound()> é falso")
chamada antiga: assertEquals(IntArrayList.from(5, 6, 7, 8, 4, 10), path.calcNodes())
nova chamada: assertEquals(IntArrayList.from(5, 6, 7, 8, 4, 10), path.calcNodes(), "Era esperado valores iguais, mas " + result804 + " <IntArrayList.from(5, 6, 7, 8, 4, 10)> é diferente de " + result805 + " <path.calcNodes()>")
chamada antiga: assertEquals(IntArrayList.from(5, 1, 9, 2, 3), path.calcNodes())
nova chamada: assertEquals(IntArrayList.from(5, 1, 9, 2, 3), path.calcNodes(), "Era esperado valores iguais, mas " + result806 + " <IntArrayList.from(5, 1, 9, 2, 3)> é diferente de " + result807 + " <path.calcNodes()>")
chamada antiga: assertEquals(2, pathInfos.size())
nova chamada: assertEquals(2, pathInfos.size(), "Era esperado valores iguais, mas  2 é diferente de " + result808 + " <pathInfos.size()>")
chamada antiga: assertEquals(IntArrayList.from(5, 6, 7, 8, 4, 10), pathInfos.get(0).path.calcNodes())
nova chamada: assertEquals(IntArrayList.from(5, 6, 7, 8, 4, 10), pathInfos.get(0).path.calcNodes(), "Era esperado valores iguais, mas " + result809 + " <IntArrayList.from(5, 6, 7, 8, 4, 10)> é diferente de " + result810 + " <pathInfos.get(0).path.calcNodes()>")
chamada antiga: assertEquals(IntArrayList.from(5, 1, 9, 2, 3, 4, 10), pathInfos.get(1).path.calcNodes())
nova chamada: assertEquals(IntArrayList.from(5, 1, 9, 2, 3, 4, 10), pathInfos.get(1).path.calcNodes(), "Era esperado valores iguais, mas " + result811 + " <IntArrayList.from(5, 1, 9, 2, 3, 4, 10)> é diferente de " + result812 + " <pathInfos.get(1).path.calcNodes()>")
chamada antiga: assertEquals(2, pathInfos.size())
nova chamada: assertEquals(2, pathInfos.size(), "Era esperado valores iguais, mas  2 é diferente de " + result813 + " <pathInfos.size()>")
chamada antiga: assertEquals(IntArrayList.from(10, 4, 3, 6, 5), pathInfos.get(0).path.calcNodes())
nova chamada: assertEquals(IntArrayList.from(10, 4, 3, 6, 5), pathInfos.get(0).path.calcNodes(), "Era esperado valores iguais, mas " + result814 + " <IntArrayList.from(10, 4, 3, 6, 5)> é diferente de " + result815 + " <pathInfos.get(0).path.calcNodes()>")
chamada antiga: assertEquals(IntArrayList.from(10, 12, 11, 4, 3, 6, 5), pathInfos.get(1).path.calcNodes())
nova chamada: assertEquals(IntArrayList.from(10, 12, 11, 4, 3, 6, 5), pathInfos.get(1).path.calcNodes(), "Era esperado valores iguais, mas " + result816 + " <IntArrayList.from(10, 12, 11, 4, 3, 6, 5)> é diferente de " + result817 + " <pathInfos.get(1).path.calcNodes()>")
chamada antiga: assertEquals(2, graph.getEdges())
nova chamada: assertEquals(2, graph.getEdges(), "Era esperado valores iguais, mas  2 é diferente de " + result818 + " <graph.getEdges()>")
chamada antiga: assertEquals(3, queryCHGraph.getNodes())
nova chamada: assertEquals(3, queryCHGraph.getNodes(), "Era esperado valores iguais, mas  3 é diferente de " + result819 + " <queryCHGraph.getNodes()>")
chamada antiga: assertEquals(2, queryCHGraph.getEdges())
nova chamada: assertEquals(2, queryCHGraph.getEdges(), "Era esperado valores iguais, mas  2 é diferente de " + result820 + " <queryCHGraph.getEdges()>")
chamada antiga: assertTrue(queryCHGraph.isEdgeBased())
nova chamada: assertTrue(queryCHGraph.isEdgeBased(), "Era esperado verdadeiro, mas " + result821 + " <queryCHGraph.isEdgeBased()> é falso")
chamada antiga: assertTrue(queryCHGraph.hasTurnCosts())
nova chamada: assertTrue(queryCHGraph.hasTurnCosts(), "Era esperado verdadeiro, mas " + result822 + " <queryCHGraph.hasTurnCosts()> é falso")
chamada antiga: assertEquals(2, graph.getEdges())
nova chamada: assertEquals(2, graph.getEdges(), "Era esperado valores iguais, mas  2 é diferente de " + result823 + " <graph.getEdges()>")
chamada antiga: assertEquals(3, queryCHGraph.getNodes())
nova chamada: assertEquals(3, queryCHGraph.getNodes(), "Era esperado valores iguais, mas  3 é diferente de " + result824 + " <queryCHGraph.getNodes()>")
chamada antiga: assertEquals(3, queryCHGraph.getEdges())
nova chamada: assertEquals(3, queryCHGraph.getEdges(), "Era esperado valores iguais, mas  3 é diferente de " + result825 + " <queryCHGraph.getEdges()>")
chamada antiga: assertEquals(2, graph.getEdges())
nova chamada: assertEquals(2, graph.getEdges(), "Era esperado valores iguais, mas  2 é diferente de " + result826 + " <graph.getEdges()>")
chamada antiga: assertEquals(4, queryCHGraph.getNodes())
nova chamada: assertEquals(4, queryCHGraph.getNodes(), "Era esperado valores iguais, mas  4 é diferente de " + result827 + " <queryCHGraph.getNodes()>")
chamada antiga: assertEquals(2 + 4, queryCHGraph.getEdges())
nova chamada: assertEquals(2 + 4, queryCHGraph.getEdges(), "Era esperado valores iguais, mas  2 + 4 é diferente de " + result828 + " <queryCHGraph.getEdges()>")
chamada antiga: assertEquals(2, graph.getEdges())
nova chamada: assertEquals(2, graph.getEdges(), "Era esperado valores iguais, mas  2 é diferente de " + result829 + " <graph.getEdges()>")
chamada antiga: assertEquals(4, queryCHGraph.getNodes())
nova chamada: assertEquals(4, queryCHGraph.getNodes(), "Era esperado valores iguais, mas  4 é diferente de " + result830 + " <queryCHGraph.getNodes()>")
chamada antiga: assertEquals(3 + 4, queryCHGraph.getEdges())
nova chamada: assertEquals(3 + 4, queryCHGraph.getEdges(), "Era esperado valores iguais, mas  3 + 4 é diferente de " + result831 + " <queryCHGraph.getEdges()>")
chamada antiga: assertSame(graph.getBaseGraph(), routingCHGraph.getBaseGraph())
nova chamada: assertSame(graph.getBaseGraph(), routingCHGraph.getBaseGraph(), "Era esperado objetos iguais, mas " + result832 + " <graph.getBaseGraph()> é diferente de " + result833 + " <routingCHGraph.getBaseGraph()>")
chamada antiga: assertSame(queryGraph, queryCHGraph.getBaseGraph())
nova chamada: assertSame(queryGraph, queryCHGraph.getBaseGraph(), "Era esperado objetos iguais, mas  queryGraph é diferente de " + result834 + " <queryCHGraph.getBaseGraph()>")
chamada antiga: assertSame(weighting, queryCHGraph.getWeighting())
nova chamada: assertSame(weighting, queryCHGraph.getWeighting(), "Era esperado objetos iguais, mas  weighting é diferente de " + result835 + " <queryCHGraph.getWeighting()>")
chamada antiga: assertEquals(5, queryCHGraph.getLevel(0))
nova chamada: assertEquals(5, queryCHGraph.getLevel(0), "Era esperado valores iguais, mas  5 é diferente de " + result836 + " <queryCHGraph.getLevel(0)>")
chamada antiga: assertEquals(7, queryCHGraph.getLevel(1))
nova chamada: assertEquals(7, queryCHGraph.getLevel(1), "Era esperado valores iguais, mas  7 é diferente de " + result837 + " <queryCHGraph.getLevel(1)>")
chamada antiga: assertEquals(Integer.MAX_VALUE, queryCHGraph.getLevel(2))
nova chamada: assertEquals(Integer.MAX_VALUE, queryCHGraph.getLevel(2), "Era esperado valores iguais, mas  Integer.MAX_VALUE é diferente de " + result838 + " <queryCHGraph.getLevel(2)>")
chamada antiga: assertEquals(Double.POSITIVE_INFINITY, iter.getWeight(true))
nova chamada: assertEquals(Double.POSITIVE_INFINITY, iter.getWeight(true), "Era esperado valores iguais, mas  Double.POSITIVE_INFINITY é diferente de " + result839 + " <iter.getWeight(true)>")
chamada antiga: assertEquals(Double.POSITIVE_INFINITY, iter.getWeight(false))
nova chamada: assertEquals(Double.POSITIVE_INFINITY, iter.getWeight(false), "Era esperado valores iguais, mas  Double.POSITIVE_INFINITY é diferente de " + result840 + " <iter.getWeight(false)>")
chamada antiga: assertEquals(Double.POSITIVE_INFINITY, routingCHGraph.getEdgeIteratorState(0, 1).getWeight(true))
nova chamada: assertEquals(Double.POSITIVE_INFINITY, routingCHGraph.getEdgeIteratorState(0, 1).getWeight(true), "Era esperado valores iguais, mas  Double.POSITIVE_INFINITY é diferente de " + result841 + " <routingCHGraph.getEdgeIteratorState(0, 1).getWeight(true)>")
chamada antiga: assertEquals(Double.POSITIVE_INFINITY, routingCHGraph.getEdgeIteratorState(0, 0).getWeight(false))
nova chamada: assertEquals(Double.POSITIVE_INFINITY, routingCHGraph.getEdgeIteratorState(0, 0).getWeight(false), "Era esperado valores iguais, mas  Double.POSITIVE_INFINITY é diferente de " + result842 + " <routingCHGraph.getEdgeIteratorState(0, 0).getWeight(false)>")
chamada antiga: assertEquals(Double.POSITIVE_INFINITY, iter.getWeight(true))
nova chamada: assertEquals(Double.POSITIVE_INFINITY, iter.getWeight(true), "Era esperado valores iguais, mas  Double.POSITIVE_INFINITY é diferente de " + result843 + " <iter.getWeight(true)>")
chamada antiga: assertEquals(Double.POSITIVE_INFINITY, iter.getWeight(false))
nova chamada: assertEquals(Double.POSITIVE_INFINITY, iter.getWeight(false), "Era esperado valores iguais, mas  Double.POSITIVE_INFINITY é diferente de " + result844 + " <iter.getWeight(false)>")
chamada antiga: assertEquals(Double.POSITIVE_INFINITY, iter.getWeight(false))
nova chamada: assertEquals(Double.POSITIVE_INFINITY, iter.getWeight(false), "Era esperado valores iguais, mas  Double.POSITIVE_INFINITY é diferente de " + result845 + " <iter.getWeight(false)>")
chamada antiga: assertEquals(Double.POSITIVE_INFINITY, iter.getWeight(true))
nova chamada: assertEquals(Double.POSITIVE_INFINITY, iter.getWeight(true), "Era esperado valores iguais, mas  Double.POSITIVE_INFINITY é diferente de " + result846 + " <iter.getWeight(true)>")
chamada antiga: assertEquals(Double.POSITIVE_INFINITY, queryCHGraph.getEdgeIteratorState(1, 2).getWeight(true))
nova chamada: assertEquals(Double.POSITIVE_INFINITY, queryCHGraph.getEdgeIteratorState(1, 2).getWeight(true), "Era esperado valores iguais, mas  Double.POSITIVE_INFINITY é diferente de " + result847 + " <queryCHGraph.getEdgeIteratorState(1, 2).getWeight(true)>")
chamada antiga: assertEquals(Double.POSITIVE_INFINITY, queryCHGraph.getEdgeIteratorState(1, 0).getWeight(false))
nova chamada: assertEquals(Double.POSITIVE_INFINITY, queryCHGraph.getEdgeIteratorState(1, 0).getWeight(false), "Era esperado valores iguais, mas  Double.POSITIVE_INFINITY é diferente de " + result848 + " <queryCHGraph.getEdgeIteratorState(1, 0).getWeight(false)>")
chamada antiga: assertEquals(5, routingCHGraph.getTurnWeight(0, 1, 1))
nova chamada: assertEquals(5, routingCHGraph.getTurnWeight(0, 1, 1), "Era esperado valores iguais, mas  5 é diferente de " + result849 + " <routingCHGraph.getTurnWeight(0, 1, 1)>")
chamada antiga: assertEquals(5, queryCHGraph.getTurnWeight(0, 1, 1))
nova chamada: assertEquals(5, queryCHGraph.getTurnWeight(0, 1, 1), "Era esperado valores iguais, mas  5 é diferente de " + result850 + " <queryCHGraph.getTurnWeight(0, 1, 1)>")
chamada antiga: assertEquals(5, queryCHGraph.getTurnWeight(expectedEdge31, 1, expectedEdge14))
nova chamada: assertEquals(5, queryCHGraph.getTurnWeight(expectedEdge31, 1, expectedEdge14), "Era esperado valores iguais, mas  5 é diferente de " + result851 + " <queryCHGraph.getTurnWeight(expectedEdge31, 1, expectedEdge14)>")
chamada antiga: assertEquals(3, pathInfos.size())
nova chamada: assertEquals(3, pathInfos.size(), "Era esperado valores iguais, mas  3 é diferente de " + result852 + " <pathInfos.size()>")
chamada antiga: assertEquals(4, pathInfos.size())
nova chamada: assertEquals(4, pathInfos.size(), "Era esperado valores iguais, mas  4 é diferente de " + result853 + " <pathInfos.size()>")
chamada antiga: assertFalse(p.isFound())
nova chamada: assertFalse(p.isFound(), "Era esperado falso, mas " + result854 + " <p.isFound()> é verdadeiro ")
chamada antiga: assertFalse(fails)
nova chamada: assertFalse(fails, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: assertFalse(outIter.next())
nova chamada: assertFalse(outIter.next(), "Era esperado falso, mas " + result855 + " <outIter.next()> é verdadeiro ")
chamada antiga: assertTrue(AbstractWeighting.isValidName("blup"))
nova chamada: assertTrue(AbstractWeighting.isValidName("blup"), "Era esperado verdadeiro, mas " + result856 + " <AbstractWeighting.isValidName('blup')> é falso")
chamada antiga: assertTrue(AbstractWeighting.isValidName("blup_a"))
nova chamada: assertTrue(AbstractWeighting.isValidName("blup_a"), "Era esperado verdadeiro, mas " + result857 + " <AbstractWeighting.isValidName('blup_a')> é falso")
chamada antiga: assertTrue(AbstractWeighting.isValidName("blup|a"))
nova chamada: assertTrue(AbstractWeighting.isValidName("blup|a"), "Era esperado verdadeiro, mas " + result858 + " <AbstractWeighting.isValidName('blup|a')> é falso")
chamada antiga: assertFalse(AbstractWeighting.isValidName("Blup"))
nova chamada: assertFalse(AbstractWeighting.isValidName("Blup"), "Era esperado falso, mas " + result859 + " <AbstractWeighting.isValidName('Blup')> é verdadeiro ")
chamada antiga: assertFalse(AbstractWeighting.isValidName("Blup!"))
nova chamada: assertFalse(AbstractWeighting.isValidName("Blup!"), "Era esperado falso, mas " + result860 + " <AbstractWeighting.isValidName('Blup!')> é verdadeiro ")
chamada antiga: assertEquals(375 * 60 * 1000, w.calcEdgeMillis(edge, false))
nova chamada: assertEquals(375 * 60 * 1000, w.calcEdgeMillis(edge, false), "Era esperado valores iguais, mas  375 * 60 * 1000 é diferente de " + result861 + " <w.calcEdgeMillis(edge, false)>")
chamada antiga: assertEquals(600 * 60 * 1000, w.calcEdgeMillis(edge, true))
nova chamada: assertEquals(600 * 60 * 1000, w.calcEdgeMillis(edge, true), "Era esperado valores iguais, mas  600 * 60 * 1000 é diferente de " + result862 + " <w.calcEdgeMillis(edge, true)>")
chamada antiga: assertEquals(1000.0 / 72 * 3.6, createWeighting(new CustomModel().addToSpeed(If("true", LIMIT, "72")).setDistanceInfluence(0)).getMinWeight(1000))
nova chamada: assertEquals(1000.0 / 72 * 3.6, createWeighting(new CustomModel().addToSpeed(If("true", LIMIT, "72")).setDistanceInfluence(0)).getMinWeight(1000), "Era esperado valores iguais, mas  1000.0 / 72 * 3.6 é diferente de " + result863 + " <createWeighting(new CustomModel().addToSpeed(If('true', LIMIT, '72')).setDistanceInfluence(0)).getMinWeight(1000)>")
chamada antiga: assertEquals(1000.0 / 155 * 3.6, createWeighting(new CustomModel().addToSpeed(If("true", LIMIT, "180")).setDistanceInfluence(0)).getMinWeight(1000))
nova chamada: assertEquals(1000.0 / 155 * 3.6, createWeighting(new CustomModel().addToSpeed(If("true", LIMIT, "180")).setDistanceInfluence(0)).getMinWeight(1000), "Era esperado valores iguais, mas  1000.0 / 155 * 3.6 é diferente de " + result864 + " <createWeighting(new CustomModel().addToSpeed(If('true', LIMIT, '180')).setDistanceInfluence(0)).getMinWeight(1000)>")
chamada antiga: assertEquals(1000.0 / 150 * 3.6, createWeighting(new CustomModel().addToSpeed(If("road_class == SERVICE", MULTIPLY, "1.5")).addToSpeed(If("true", LIMIT, "150")).setDistanceInfluence(0)).getMinWeight(1000))
nova chamada: assertEquals(1000.0 / 150 * 3.6, createWeighting(new CustomModel().addToSpeed(If("road_class == SERVICE", MULTIPLY, "1.5")).addToSpeed(If("true", LIMIT, "150")).setDistanceInfluence(0)).getMinWeight(1000), "Era esperado valores iguais, mas  1000.0 / 150 * 3.6 é diferente de " + result865 + " <createWeighting(new CustomModel().addToSpeed(If('road_class == SERVICE', MULTIPLY, '1.5')).addToSpeed(If('true', LIMIT, '150')).setDistanceInfluence(0)).getMinWeight(1000)>")
chamada antiga: assertTrue(Double.isInfinite(weighting.calcEdgeWeight(motorway, false)))
nova chamada: assertTrue(Double.isInfinite(weighting.calcEdgeWeight(motorway, false)), "Era esperado verdadeiro, mas " + result866 + " <Double.isInfinite(weighting.calcEdgeWeight(motorway, false))> é falso")
chamada antiga: assertEquals(1, CustomModel.merge(new CustomModel(), queryModel).getPriority().size())
nova chamada: assertEquals(1, CustomModel.merge(new CustomModel(), queryModel).getPriority().size(), "Era esperado valores iguais, mas  1 é diferente de " + result867 + " <CustomModel.merge(new CustomModel(), queryModel).getPriority().size()>")
chamada antiga: assertEquals(100, findMinMax(new HashSet<>(), new MinMax(0, 120), statements, lookup).max)
nova chamada: assertEquals(100, findMinMax(new HashSet<>(), new MinMax(0, 120), statements, lookup).max, "Era esperado valores iguais, mas  100 é diferente de " + " findMinMax(new HashSet(), new MinMax(0, 120), statements, lookup).max")
chamada antiga: assertEquals(100, findMinMax(new HashSet<>(), new MinMax(0, 120), statements, lookup).max)
nova chamada: assertEquals(100, findMinMax(new HashSet<>(), new MinMax(0, 120), statements, lookup).max, "Era esperado valores iguais, mas  100 é diferente de " + " findMinMax(new HashSet(), new MinMax(0, 120), statements, lookup).max")
chamada antiga: assertEquals(100, findMinMax(new HashSet<>(), new MinMax(0, 120), statements, lookup).max)
nova chamada: assertEquals(100, findMinMax(new HashSet<>(), new MinMax(0, 120), statements, lookup).max, "Era esperado valores iguais, mas  100 é diferente de " + " findMinMax(new HashSet(), new MinMax(0, 120), statements, lookup).max")
chamada antiga: assertEquals(35, findMinMax(new HashSet<>(), new MinMax(0, 30), statements, lookup).max)
nova chamada: assertEquals(35, findMinMax(new HashSet<>(), new MinMax(0, 30), statements, lookup).max, "Era esperado valores iguais, mas  35 é diferente de " + " findMinMax(new HashSet(), new MinMax(0, 30), statements, lookup).max")
chamada antiga: assertEquals(140, findMinMax(new HashSet<>(), new MinMax(0, 140), statements, lookup).max)
nova chamada: assertEquals(140, findMinMax(new HashSet<>(), new MinMax(0, 140), statements, lookup).max, "Era esperado valores iguais, mas  140 é diferente de " + " findMinMax(new HashSet(), new MinMax(0, 140), statements, lookup).max")
chamada antiga: assertEquals(2, findMinMax(new HashSet<>(), new MinMax(0, 1), statements, lookup).max)
nova chamada: assertEquals(2, findMinMax(new HashSet<>(), new MinMax(0, 1), statements, lookup).max, "Era esperado valores iguais, mas  2 é diferente de " + " findMinMax(new HashSet(), new MinMax(0, 1), statements, lookup).max")
chamada antiga: assertEquals(0.5, findMinMax(new HashSet<>(), new MinMax(0, 1), statements, lookup).max)
nova chamada: assertEquals(0.5, findMinMax(new HashSet<>(), new MinMax(0, 1), statements, lookup).max, "Era esperado valores iguais, mas  0.5 é diferente de " + " findMinMax(new HashSet(), new MinMax(0, 1), statements, lookup).max")
chamada antiga: assertEquals(-0.5, minMax.min)
nova chamada: assertEquals(-0.5, minMax.min, "Era esperado valores iguais, mas  -0.5 é diferente de " + " minMax.min")
chamada antiga: assertEquals(0.5, minMax.max)
nova chamada: assertEquals(0.5, minMax.max, "Era esperado valores iguais, mas  0.5 é diferente de " + " minMax.max")
chamada antiga: assertEquals(120, findMinMax(new HashSet<>(), new MinMax(0, 150), statements, lookup).max)
nova chamada: assertEquals(120, findMinMax(new HashSet<>(), new MinMax(0, 150), statements, lookup).max, "Era esperado valores iguais, mas  120 é diferente de " + " findMinMax(new HashSet(), new MinMax(0, 150), statements, lookup).max")
chamada antiga: assertEquals(80, findMinMax(new HashSet<>(), new MinMax(0, 100), statements, lookup).max)
nova chamada: assertEquals(80, findMinMax(new HashSet<>(), new MinMax(0, 100), statements, lookup).max, "Era esperado valores iguais, mas  80 é diferente de " + " findMinMax(new HashSet(), new MinMax(0, 100), statements, lookup).max")
chamada antiga: assertEquals(60, findMinMax(new HashSet<>(), new MinMax(0, 60), statements, lookup).max)
nova chamada: assertEquals(60, findMinMax(new HashSet<>(), new MinMax(0, 60), statements, lookup).max, "Era esperado valores iguais, mas  60 é diferente de " + " findMinMax(new HashSet(), new MinMax(0, 60), statements, lookup).max")
chamada antiga: assertEquals(40, findMinMax(new HashSet<>(), new MinMax(0, 150), statements, lookup).max)
nova chamada: assertEquals(40, findMinMax(new HashSet<>(), new MinMax(0, 150), statements, lookup).max, "Era esperado valores iguais, mas  40 é diferente de " + " findMinMax(new HashSet(), new MinMax(0, 150), statements, lookup).max")
chamada antiga: assertEquals(40, findMinMax(new HashSet<>(), new MinMax(0, 40), statements, lookup).max)
nova chamada: assertEquals(40, findMinMax(new HashSet<>(), new MinMax(0, 40), statements, lookup).max, "Era esperado valores iguais, mas  40 é diferente de " + " findMinMax(new HashSet(), new MinMax(0, 40), statements, lookup).max")
chamada antiga: assertTrue(result.guessedVariables.isEmpty())
nova chamada: assertTrue(result.guessedVariables.isEmpty(), "Era esperado verdadeiro, mas " + result868 + " <result.guessedVariables.isEmpty()> é falso")
chamada antiga: assertEquals("[priority]", result.guessedVariables.toString())
nova chamada: assertEquals("[priority]", result.guessedVariables.toString(), "Era esperado valores iguais, mas  '[priority]' é diferente de " + result869 + " <result.guessedVariables.toString()>")
chamada antiga: assertTrue(result.ok)
nova chamada: assertTrue(result.ok, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("[toll]", result.guessedVariables.toString())
nova chamada: assertEquals("[toll]", result.guessedVariables.toString(), "Era esperado valores iguais, mas  '[toll]' é diferente de " + result870 + " <result.guessedVariables.toString()>")
chamada antiga: assertEquals("road_class == RoadClass.PRIMARY", parse("road_class == PRIMARY", validVariable, lookup).converted.toString())
nova chamada: assertEquals("road_class == RoadClass.PRIMARY", parse("road_class == PRIMARY", validVariable, lookup).converted.toString(), "Era esperado valores iguais, mas  'road_class == RoadClass.PRIMARY' é diferente de " + result871 + " <parse('road_class == PRIMARY', validVariable, lookup).converted.toString()>")
chamada antiga: assertEquals("toll == Toll.NO", parse("toll == NO", validVariable, lookup).converted.toString())
nova chamada: assertEquals("toll == Toll.NO", parse("toll == NO", validVariable, lookup).converted.toString(), "Era esperado valores iguais, mas  'toll == Toll.NO' é diferente de " + result872 + " <parse('toll == NO', validVariable, lookup).converted.toString()>")
chamada antiga: assertEquals("toll == Toll.NO || road_class == RoadClass.NO", parse("toll == NO || road_class == NO", validVariable, lookup).converted.toString())
nova chamada: assertEquals("toll == Toll.NO || road_class == RoadClass.NO", parse("toll == NO || road_class == NO", validVariable, lookup).converted.toString(), "Era esperado valores iguais, mas  'toll == Toll.NO || road_class == RoadClass.NO' é diferente de " + result873 + " <parse('toll == NO || road_class == NO', validVariable, lookup).converted.toString()>")
chamada antiga: assertEquals(CustomWeightingHelper.class.getSimpleName() + ".in(this.in_custom_1, edge)", parse("in_custom_1", validVariable, lookup).converted.toString())
nova chamada: assertEquals(CustomWeightingHelper.class.getSimpleName() + ".in(this.in_custom_1, edge)", parse("in_custom_1", validVariable, lookup).converted.toString(), "Era esperado valores iguais, mas  CustomWeightingHelper.class.getSimpleName() + '.in(this.in_custom_1, edge)' é diferente de " + result874 + " <parse('in_custom_1', validVariable, lookup).converted.toString()>")
chamada antiga: assertNull(parse("toll == Toll.NO", validVariable, lookup).converted)
nova chamada: assertNull(parse("toll == Toll.NO", validVariable, lookup).converted, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertTrue(result.ok)
nova chamada: assertTrue(result.ok, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("[country]", result.guessedVariables.toString())
nova chamada: assertEquals("[country]", result.guessedVariables.toString(), "Era esperado valores iguais, mas  '[country]' é diferente de " + result875 + " <result.guessedVariables.toString()>")
chamada antiga: assertEquals("country == 1", result.converted.toString())
nova chamada: assertEquals("country == 1", result.converted.toString(), "Era esperado valores iguais, mas  'country == 1' é diferente de " + result876 + " <result.converted.toString()>")
chamada antiga: assertTrue(result.ok)
nova chamada: assertTrue(result.ok, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("[country]", result.guessedVariables.toString())
nova chamada: assertEquals("[country]", result.guessedVariables.toString(), "Era esperado valores iguais, mas  '[country]' é diferente de " + result877 + " <result.guessedVariables.toString()>")
chamada antiga: assertEquals("country == -1", result.converted.toString())
nova chamada: assertEquals("country == -1", result.converted.toString(), "Era esperado valores iguais, mas  'country == -1' é diferente de " + result878 + " <result.converted.toString()>")
chamada antiga: assertTrue(result.ok)
nova chamada: assertTrue(result.ok, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("[edge]", result.guessedVariables.toString())
nova chamada: assertEquals("[edge]", result.guessedVariables.toString(), "Era esperado valores iguais, mas  '[edge]' é diferente de " + result879 + " <result.guessedVariables.toString()>")
chamada antiga: assertTrue(result.ok)
nova chamada: assertTrue(result.ok, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(result.guessedVariables.isEmpty())
nova chamada: assertTrue(result.guessedVariables.isEmpty(), "Era esperado verdadeiro, mas " + result880 + " <result.guessedVariables.isEmpty()> é falso")
chamada antiga: assertTrue(result.guessedVariables.isEmpty())
nova chamada: assertTrue(result.guessedVariables.isEmpty(), "Era esperado verdadeiro, mas " + result881 + " <result.guessedVariables.isEmpty()> é falso")
chamada antiga: assertTrue(result.ok)
nova chamada: assertTrue(result.ok, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("[edge]", result.guessedVariables.toString())
nova chamada: assertEquals("[edge]", result.guessedVariables.toString(), "Era esperado valores iguais, mas  '[edge]' é diferente de " + result882 + " <result.guessedVariables.toString()>")
chamada antiga: assertTrue(result.ok)
nova chamada: assertTrue(result.ok, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("[road_class]", result.guessedVariables.toString())
nova chamada: assertEquals("[road_class]", result.guessedVariables.toString(), "Era esperado valores iguais, mas  '[road_class]' é diferente de " + result883 + " <result.guessedVariables.toString()>")
chamada antiga: assertEquals("[toll]", result.guessedVariables.toString())
nova chamada: assertEquals("[toll]", result.guessedVariables.toString(), "Era esperado valores iguais, mas  '[toll]' é diferente de " + result884 + " <result.guessedVariables.toString()>")
chamada antiga: assertTrue(parse("road_class.ordinal()*2 == PRIMARY.ordinal()*2", validVariable, lookup).ok)
nova chamada: assertTrue(parse("road_class.ordinal()*2 == PRIMARY.ordinal()*2", validVariable, lookup).ok, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(parse("Math.sqrt(road_class.ordinal()) > 1", validVariable, lookup).ok)
nova chamada: assertTrue(parse("Math.sqrt(road_class.ordinal()) > 1", validVariable, lookup).ok, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(result.ok)
nova chamada: assertTrue(result.ok, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("[toll, road_class]", result.guessedVariables.toString())
nova chamada: assertEquals("[toll, road_class]", result.guessedVariables.toString(), "Era esperado valores iguais, mas  '[toll, road_class]' é diferente de " + result885 + " <result.guessedVariables.toString()>")
chamada antiga: assertTrue(result.ok)
nova chamada: assertTrue(result.ok, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("[average_slope]", result.guessedVariables.toString())
nova chamada: assertEquals("[average_slope]", result.guessedVariables.toString(), "Era esperado valores iguais, mas  '[average_slope]' é diferente de " + result886 + " <result.guessedVariables.toString()>")
chamada antiga: assertTrue(result.ok)
nova chamada: assertTrue(result.ok, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("[average_slope]", result.guessedVariables.toString())
nova chamada: assertEquals("[average_slope]", result.guessedVariables.toString(), "Era esperado valores iguais, mas  '[average_slope]' é diferente de " + result887 + " <result.guessedVariables.toString()>")
chamada antiga: assertAll(() -> CustomModelParser.createWeightingParameters(customModel, encodingManager, avgSpeedEnc, maxSpeed, null))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> CustomModelParser.createWeightingParameters(customModel, encodingManager, avgSpeedEnc, maxSpeed, null))
chamada antiga: assertEquals(1, blockedEdges)
nova chamada: assertEquals(1, blockedEdges, "Era esperado valores iguais, mas  1 é diferente de " + " blockedEdges")
chamada antiga: assertEquals(2, totalEdges)
nova chamada: assertEquals(2, totalEdges, "Era esperado valores iguais, mas  2 é diferente de " + " totalEdges")
chamada antiga: assertEquals(3, stagePoints.size())
nova chamada: assertEquals(3, stagePoints.size(), "Era esperado valores iguais, mas  3 é diferente de " + result888 + " <stagePoints.size()>")
chamada antiga: assertEquals(0, stagePoints.get(0).getClosestNode())
nova chamada: assertEquals(0, stagePoints.get(0).getClosestNode(), "Era esperado valores iguais, mas  0 é diferente de " + result889 + " <stagePoints.get(0).getClosestNode()>")
chamada antiga: assertEquals(6, stagePoints.get(1).getClosestNode())
nova chamada: assertEquals(6, stagePoints.get(1).getClosestNode(), "Era esperado valores iguais, mas  6 é diferente de " + result890 + " <stagePoints.get(1).getClosestNode()>")
chamada antiga: assertEquals(0, stagePoints.get(2).getClosestNode())
nova chamada: assertEquals(0, stagePoints.get(2).getClosestNode(), "Era esperado valores iguais, mas  0 é diferente de " + result891 + " <stagePoints.get(2).getClosestNode()>")
chamada antiga: assertEquals(2, paths.size())
nova chamada: assertEquals(2, paths.size(), "Era esperado valores iguais, mas  2 é diferente de " + result892 + " <paths.size()>")
chamada antiga: assertEquals(IntArrayList.from(0, 7, 6, 5), paths.get(0).calcNodes())
nova chamada: assertEquals(IntArrayList.from(0, 7, 6, 5), paths.get(0).calcNodes(), "Era esperado valores iguais, mas " + result893 + " <IntArrayList.from(0, 7, 6, 5)> é diferente de " + result894 + " <paths.get(0).calcNodes()>")
chamada antiga: assertEquals(IntArrayList.from(5, 4, 3, 2, 1, 0), paths.get(1).calcNodes())
nova chamada: assertEquals(IntArrayList.from(5, 4, 3, 2, 1, 0), paths.get(1).calcNodes(), "Era esperado valores iguais, mas " + result895 + " <IntArrayList.from(5, 4, 3, 2, 1, 0)> é diferente de " + result896 + " <paths.get(1).calcNodes()>")
chamada antiga: assertEquals(4, snap4.getClosestNode())
nova chamada: assertEquals(4, snap4.getClosestNode(), "Era esperado valores iguais, mas  4 é diferente de " + result897 + " <snap4.getClosestNode()>")
chamada antiga: assertEquals(5, snap5.getClosestNode())
nova chamada: assertEquals(5, snap5.getClosestNode(), "Era esperado valores iguais, mas  5 é diferente de " + result898 + " <snap5.getClosestNode()>")
chamada antiga: assertEquals(6, snap6.getClosestNode())
nova chamada: assertEquals(6, snap6.getClosestNode(), "Era esperado valores iguais, mas  6 é diferente de " + result899 + " <snap6.getClosestNode()>")
chamada antiga: assertEquals(2, paths.size())
nova chamada: assertEquals(2, paths.size(), "Era esperado valores iguais, mas  2 é diferente de " + result900 + " <paths.size()>")
chamada antiga: assertEquals(IntArrayList.from(5, 6, 3), paths.get(0).calcNodes())
nova chamada: assertEquals(IntArrayList.from(5, 6, 3), paths.get(0).calcNodes(), "Era esperado valores iguais, mas " + result901 + " <IntArrayList.from(5, 6, 3)> é diferente de " + result902 + " <paths.get(0).calcNodes()>")
chamada antiga: assertEquals(IntArrayList.from(3, 2, 9, 1, 5), paths.get(1).calcNodes())
nova chamada: assertEquals(IntArrayList.from(3, 2, 9, 1, 5), paths.get(1).calcNodes(), "Era esperado valores iguais, mas " + result903 + " <IntArrayList.from(3, 2, 9, 1, 5)> é diferente de " + result904 + " <paths.get(1).calcNodes()>")
chamada antiga: assertEquals(2, paths.size())
nova chamada: assertEquals(2, paths.size(), "Era esperado valores iguais, mas  2 é diferente de " + result905 + " <paths.size()>")
chamada antiga: assertEquals(IntArrayList.from(6, 3), paths.get(0).calcNodes())
nova chamada: assertEquals(IntArrayList.from(6, 3), paths.get(0).calcNodes(), "Era esperado valores iguais, mas " + result906 + " <IntArrayList.from(6, 3)> é diferente de " + result907 + " <paths.get(0).calcNodes()>")
chamada antiga: assertEquals(IntArrayList.from(3, 4, 8, 7, 6), paths.get(1).calcNodes())
nova chamada: assertEquals(IntArrayList.from(3, 4, 8, 7, 6), paths.get(1).calcNodes(), "Era esperado valores iguais, mas " + result908 + " <IntArrayList.from(3, 4, 8, 7, 6)> é diferente de " + result909 + " <paths.get(1).calcNodes()>")
chamada antiga: assertEquals(0, result.getInEdgeRight())
nova chamada: assertEquals(0, result.getInEdgeRight(), "Era esperado valores iguais, mas  0 é diferente de " + result910 + " <result.getInEdgeRight()>")
chamada antiga: assertEquals(0, result.getOutEdgeRight())
nova chamada: assertEquals(0, result.getOutEdgeRight(), "Era esperado valores iguais, mas  0 é diferente de " + result911 + " <result.getOutEdgeRight()>")
chamada antiga: assertEquals(0, result.getInEdgeLeft())
nova chamada: assertEquals(0, result.getInEdgeLeft(), "Era esperado valores iguais, mas  0 é diferente de " + result912 + " <result.getInEdgeLeft()>")
chamada antiga: assertEquals(0, result.getOutEdgeRight())
nova chamada: assertEquals(0, result.getOutEdgeRight(), "Era esperado valores iguais, mas  0 é diferente de " + result913 + " <result.getOutEdgeRight()>")
chamada antiga: assertEquals(unrestricted(), resolver.resolveDirections(snap.getClosestNode(), snap.getQueryPoint()))
nova chamada: assertEquals(unrestricted(), resolver.resolveDirections(snap.getClosestNode(), snap.getQueryPoint()), "Era esperado valores iguais, mas " + result914 + " <unrestricted()> é diferente de " + result915 + " <resolver.resolveDirections(snap.getClosestNode(), snap.getQueryPoint())>")
chamada antiga: assertEquals(IntArrayList.from(0, 7, 8), p.calcNodes())
nova chamada: assertEquals(IntArrayList.from(0, 7, 8), p.calcNodes(), "Era esperado valores iguais, mas " + result916 + " <IntArrayList.from(0, 7, 8)> é diferente de " + result917 + " <p.calcNodes()>")
chamada antiga: assertEquals(IntArrayList.from(0, 1, 2, 3, 4, 10), p.calcNodes())
nova chamada: assertEquals(IntArrayList.from(0, 1, 2, 3, 4, 10), p.calcNodes(), "Era esperado valores iguais, mas " + result918 + " <IntArrayList.from(0, 1, 2, 3, 4, 10)> é diferente de " + result919 + " <p.calcNodes()>")
chamada antiga: assertEquals(-1, algo.findEndNode(0, 4))
nova chamada: assertEquals(-1, algo.findEndNode(0, 4), "Era esperado valores iguais, mas  -1 é diferente de " + result920 + " <algo.findEndNode(0, 4)>")
chamada antiga: assertEquals(-1, algo.findEndNode(0, 4))
nova chamada: assertEquals(-1, algo.findEndNode(0, 4), "Era esperado valores iguais, mas  -1 é diferente de " + result921 + " <algo.findEndNode(0, 4)>")
chamada antiga: assertEquals(1, algo.findEndNode(0, 1))
nova chamada: assertEquals(1, algo.findEndNode(0, 1), "Era esperado valores iguais, mas  1 é diferente de " + result922 + " <algo.findEndNode(0, 1)>")
chamada antiga: assertEquals(1, algo.findEndNode(0, 1))
nova chamada: assertEquals(1, algo.findEndNode(0, 1), "Era esperado valores iguais, mas  1 é diferente de " + result923 + " <algo.findEndNode(0, 1)>")
chamada antiga: assertEquals(IntArrayList.from(0, 4), p.calcNodes())
nova chamada: assertEquals(IntArrayList.from(0, 4), p.calcNodes(), "Era esperado valores iguais, mas " + result924 + " <IntArrayList.from(0, 4)> é diferente de " + result925 + " <p.calcNodes()>")
chamada antiga: assertEquals(IntArrayList.from(0, 4, 5, 7), p.calcNodes())
nova chamada: assertEquals(IntArrayList.from(0, 4, 5, 7), p.calcNodes(), "Era esperado valores iguais, mas " + result926 + " <IntArrayList.from(0, 4, 5, 7)> é diferente de " + result927 + " <p.calcNodes()>")
chamada antiga: assertEquals(IntArrayList.from(0, 1, 2), p.calcNodes())
nova chamada: assertEquals(IntArrayList.from(0, 1, 2), p.calcNodes(), "Era esperado valores iguais, mas " + result928 + " <IntArrayList.from(0, 1, 2)> é diferente de " + result929 + " <p.calcNodes()>")
chamada antiga: assertTrue(p.isFound())
nova chamada: assertTrue(p.isFound(), "Era esperado verdadeiro, mas " + result930 + " <p.isFound()> é falso")
chamada antiga: assertTrue(p.isFound())
nova chamada: assertTrue(p.isFound(), "Era esperado verdadeiro, mas " + result931 + " <p.isFound()> é falso")
chamada antiga: assertEquals(IntArrayList.from(0, 4), p.calcNodes())
nova chamada: assertEquals(IntArrayList.from(0, 4), p.calcNodes(), "Era esperado valores iguais, mas " + result932 + " <IntArrayList.from(0, 4)> é diferente de " + result933 + " <p.calcNodes()>")
chamada antiga: assertEquals(IntArrayList.from(0, 4, 5, 7), p.calcNodes())
nova chamada: assertEquals(IntArrayList.from(0, 4, 5, 7), p.calcNodes(), "Era esperado valores iguais, mas " + result934 + " <IntArrayList.from(0, 4, 5, 7)> é diferente de " + result935 + " <p.calcNodes()>")
chamada antiga: assertEquals(IntArrayList.from(0, 1, 2), p.calcNodes())
nova chamada: assertEquals(IntArrayList.from(0, 1, 2), p.calcNodes(), "Era esperado valores iguais, mas " + result936 + " <IntArrayList.from(0, 1, 2)> é diferente de " + result937 + " <p.calcNodes()>")
chamada antiga: assertEquals(IntArrayList.from(7, 6, 0), resolver.getEdgesWithDifferentHeading(8, 90))
nova chamada: assertEquals(IntArrayList.from(7, 6, 0), resolver.getEdgesWithDifferentHeading(8, 90), "Era esperado valores iguais, mas " + result938 + " <IntArrayList.from(7, 6, 0)> é diferente de " + result939 + " <resolver.getEdgesWithDifferentHeading(8, 90)>")
chamada antiga: assertEquals(IntArrayList.from(7, 6, 0), resolver.setTolerance(100).getEdgesWithDifferentHeading(8, 90))
nova chamada: assertEquals(IntArrayList.from(7, 6, 0), resolver.setTolerance(100).getEdgesWithDifferentHeading(8, 90), "Era esperado valores iguais, mas " + result940 + " <IntArrayList.from(7, 6, 0)> é diferente de " + result941 + " <resolver.setTolerance(100).getEdgesWithDifferentHeading(8, 90)>")
chamada antiga: assertEquals(IntArrayList.from(7, 6, 5, 4, 2, 1, 0), resolver.setTolerance(10).getEdgesWithDifferentHeading(8, 90))
nova chamada: assertEquals(IntArrayList.from(7, 6, 5, 4, 2, 1, 0), resolver.setTolerance(10).getEdgesWithDifferentHeading(8, 90), "Era esperado valores iguais, mas " + result942 + " <IntArrayList.from(7, 6, 5, 4, 2, 1, 0)> é diferente de " + result943 + " <resolver.setTolerance(10).getEdgesWithDifferentHeading(8, 90)>")
chamada antiga: assertEquals(IntArrayList.from(7, 6, 5, 1, 0), resolver.setTolerance(60).getEdgesWithDifferentHeading(8, 90))
nova chamada: assertEquals(IntArrayList.from(7, 6, 5, 1, 0), resolver.setTolerance(60).getEdgesWithDifferentHeading(8, 90), "Era esperado valores iguais, mas " + result944 + " <IntArrayList.from(7, 6, 5, 1, 0)> é diferente de " + result945 + " <resolver.setTolerance(60).getEdgesWithDifferentHeading(8, 90)>")
chamada antiga: assertEquals(IntArrayList.from(1), resolver.setTolerance(170).getEdgesWithDifferentHeading(8, 180))
nova chamada: assertEquals(IntArrayList.from(1), resolver.setTolerance(170).getEdgesWithDifferentHeading(8, 180), "Era esperado valores iguais, mas " + result946 + " <IntArrayList.from(1)> é diferente de " + result947 + " <resolver.setTolerance(170).getEdgesWithDifferentHeading(8, 180)>")
chamada antiga: assertEquals(IntArrayList.from(2, 1, 0), resolver.setTolerance(130).getEdgesWithDifferentHeading(8, 180))
nova chamada: assertEquals(IntArrayList.from(2, 1, 0), resolver.setTolerance(130).getEdgesWithDifferentHeading(8, 180), "Era esperado valores iguais, mas " + result948 + " <IntArrayList.from(2, 1, 0)> é diferente de " + result949 + " <resolver.setTolerance(130).getEdgesWithDifferentHeading(8, 180)>")
chamada antiga: assertEquals(IntArrayList.from(5, 4, 3), resolver.setTolerance(90).getEdgesWithDifferentHeading(8, 315))
nova chamada: assertEquals(IntArrayList.from(5, 4, 3), resolver.setTolerance(90).getEdgesWithDifferentHeading(8, 315), "Era esperado valores iguais, mas " + result950 + " <IntArrayList.from(5, 4, 3)> é diferente de " + result951 + " <resolver.setTolerance(90).getEdgesWithDifferentHeading(8, 315)>")
chamada antiga: assertEquals(IntArrayList.from(6, 5, 4, 3, 2), resolver.setTolerance(50).getEdgesWithDifferentHeading(8, 315))
nova chamada: assertEquals(IntArrayList.from(6, 5, 4, 3, 2), resolver.setTolerance(50).getEdgesWithDifferentHeading(8, 315), "Era esperado valores iguais, mas " + result952 + " <IntArrayList.from(6, 5, 4, 3, 2)> é diferente de " + result953 + " <resolver.setTolerance(50).getEdgesWithDifferentHeading(8, 315)>")
chamada antiga: assertEquals(IntArrayList.from(1), resolver.getEdgesWithDifferentHeading(0, 90))
nova chamada: assertEquals(IntArrayList.from(1), resolver.getEdgesWithDifferentHeading(0, 90), "Era esperado valores iguais, mas " + result954 + " <IntArrayList.from(1)> é diferente de " + result955 + " <resolver.getEdgesWithDifferentHeading(0, 90)>")
chamada antiga: assertEquals(IntArrayList.from(0), resolver.getEdgesWithDifferentHeading(0, 270))
nova chamada: assertEquals(IntArrayList.from(0), resolver.getEdgesWithDifferentHeading(0, 270), "Era esperado valores iguais, mas " + result956 + " <IntArrayList.from(0)> é diferente de " + result957 + " <resolver.getEdgesWithDifferentHeading(0, 270)>")
chamada antiga: assertEquals("0->2", queryGraph.getEdgeIteratorState(1, Integer.MIN_VALUE).toString())
nova chamada: assertEquals("0->2", queryGraph.getEdgeIteratorState(1, Integer.MIN_VALUE).toString(), "Era esperado valores iguais, mas  '0-2' é diferente de " + result958 + " <queryGraph.getEdgeIteratorState(1, Integer.MIN_VALUE).toString()>")
chamada antiga: assertEquals(IntArrayList.from(1), resolver.getEdgesWithDifferentHeading(2, 90))
nova chamada: assertEquals(IntArrayList.from(1), resolver.getEdgesWithDifferentHeading(2, 90), "Era esperado valores iguais, mas " + result959 + " <IntArrayList.from(1)> é diferente de " + result960 + " <resolver.getEdgesWithDifferentHeading(2, 90)>")
chamada antiga: assertEquals("2->1", queryGraph.getEdgeIteratorState(2, Integer.MIN_VALUE).toString())
nova chamada: assertEquals("2->1", queryGraph.getEdgeIteratorState(2, Integer.MIN_VALUE).toString(), "Era esperado valores iguais, mas  '2-1' é diferente de " + result961 + " <queryGraph.getEdgeIteratorState(2, Integer.MIN_VALUE).toString()>")
chamada antiga: assertEquals(IntArrayList.from(2), resolver.getEdgesWithDifferentHeading(2, 270))
nova chamada: assertEquals(IntArrayList.from(2), resolver.getEdgesWithDifferentHeading(2, 270), "Era esperado valores iguais, mas " + result962 + " <IntArrayList.from(2)> é diferente de " + result963 + " <resolver.getEdgesWithDifferentHeading(2, 270)>")
chamada antiga: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> CustomModelParser.createWeightingParameters(customModel, encodingManager, avgSpeedEnc, maxSpeed, null))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", "Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> CustomModelParser.createWeightingParameters(customModel, encodingManager, avgSpeedEnc, maxSpeed, null))
chamada antiga: assertEquals(1, GHUtility.count(graph.createEdgeExplorer().setBaseNode(1)))
nova chamada: assertEquals(1, GHUtility.count(graph.createEdgeExplorer().setBaseNode(1)), "Era esperado valores iguais, mas  1 é diferente de " + result964 + " <GHUtility.count(graph.createEdgeExplorer().setBaseNode(1))>")
chamada antiga: assertEquals(0, GHUtility.count(chGraph.createInEdgeExplorer().setBaseNode(1)))
nova chamada: assertEquals(0, GHUtility.count(chGraph.createInEdgeExplorer().setBaseNode(1)), "Era esperado valores iguais, mas  0 é diferente de " + result965 + " <GHUtility.count(chGraph.createInEdgeExplorer().setBaseNode(1))>")
chamada antiga: assertEquals(1, GHUtility.count(graph.createEdgeExplorer().setBaseNode(1)))
nova chamada: assertEquals(1, GHUtility.count(graph.createEdgeExplorer().setBaseNode(1)), "Era esperado valores iguais, mas  1 é diferente de " + result966 + " <GHUtility.count(graph.createEdgeExplorer().setBaseNode(1))>")
chamada antiga: assertEquals(0, GHUtility.count(chGraph.createOutEdgeExplorer().setBaseNode(1)))
nova chamada: assertEquals(0, GHUtility.count(chGraph.createOutEdgeExplorer().setBaseNode(1)), "Era esperado valores iguais, mas  0 é diferente de " + result967 + " <GHUtility.count(chGraph.createOutEdgeExplorer().setBaseNode(1))>")
chamada antiga: assertEquals(0, GHUtility.count(graph.createEdgeExplorer().setBaseNode(2)))
nova chamada: assertEquals(0, GHUtility.count(graph.createEdgeExplorer().setBaseNode(2)), "Era esperado valores iguais, mas  0 é diferente de " + result968 + " <GHUtility.count(graph.createEdgeExplorer().setBaseNode(2))>")
chamada antiga: assertEquals(1, GHUtility.count(chGraph.createOutEdgeExplorer().setBaseNode(2)))
nova chamada: assertEquals(1, GHUtility.count(chGraph.createOutEdgeExplorer().setBaseNode(2)), "Era esperado valores iguais, mas  1 é diferente de " + result969 + " <GHUtility.count(chGraph.createOutEdgeExplorer().setBaseNode(2))>")
chamada antiga: assertEquals(10, chGraph.getNodes())
nova chamada: assertEquals(10, chGraph.getNodes(), "Era esperado valores iguais, mas  10 é diferente de " + result970 + " <chGraph.getNodes()>")
chamada antiga: assertEquals(2, graph.getEdges())
nova chamada: assertEquals(2, graph.getEdges(), "Era esperado valores iguais, mas  2 é diferente de " + result971 + " <graph.getEdges()>")
chamada antiga: assertEquals(3, chGraph.getEdges())
nova chamada: assertEquals(3, chGraph.getEdges(), "Era esperado valores iguais, mas  3 é diferente de " + result972 + " <chGraph.getEdges()>")
chamada antiga: assertEquals(1, GHUtility.count(chGraph.createOutEdgeExplorer().setBaseNode(2)))
nova chamada: assertEquals(1, GHUtility.count(chGraph.createOutEdgeExplorer().setBaseNode(2)), "Era esperado valores iguais, mas  1 é diferente de " + result973 + " <GHUtility.count(chGraph.createOutEdgeExplorer().setBaseNode(2))>")
chamada antiga: assertEquals(0, GHUtility.count(chOutExplorer.setBaseNode(2)))
nova chamada: assertEquals(0, GHUtility.count(chOutExplorer.setBaseNode(2)), "Era esperado valores iguais, mas  0 é diferente de " + result974 + " <GHUtility.count(chOutExplorer.setBaseNode(2))>")
chamada antiga: assertEquals(0, GHUtility.count(chInExplorer.setBaseNode(2)))
nova chamada: assertEquals(0, GHUtility.count(chInExplorer.setBaseNode(2)), "Era esperado valores iguais, mas  0 é diferente de " + result975 + " <GHUtility.count(chInExplorer.setBaseNode(2))>")
chamada antiga: assertEquals(2, GHUtility.count(chOutExplorer.setBaseNode(1)))
nova chamada: assertEquals(2, GHUtility.count(chOutExplorer.setBaseNode(1)), "Era esperado valores iguais, mas  2 é diferente de " + result976 + " <GHUtility.count(chOutExplorer.setBaseNode(1))>")
chamada antiga: assertEquals(3, GHUtility.count(chInExplorer.setBaseNode(1)))
nova chamada: assertEquals(3, GHUtility.count(chInExplorer.setBaseNode(1)), "Era esperado valores iguais, mas  3 é diferente de " + result977 + " <GHUtility.count(chInExplorer.setBaseNode(1))>")
chamada antiga: assertEquals(GHUtility.asSet(2, 4), GHUtility.getNeighbors(chOutExplorer.setBaseNode(1)))
nova chamada: assertEquals(GHUtility.asSet(2, 4), GHUtility.getNeighbors(chOutExplorer.setBaseNode(1)), "Era esperado valores iguais, mas " + result978 + " <GHUtility.asSet(2, 4)> é diferente de " + result979 + " <GHUtility.getNeighbors(chOutExplorer.setBaseNode(1))>")
chamada antiga: assertEquals(GHUtility.asSet(4), GHUtility.getNeighbors(baseCarOutExplorer.setBaseNode(1)))
nova chamada: assertEquals(GHUtility.asSet(4), GHUtility.getNeighbors(baseCarOutExplorer.setBaseNode(1)), "Era esperado valores iguais, mas " + result980 + " <GHUtility.asSet(4)> é diferente de " + result981 + " <GHUtility.getNeighbors(baseCarOutExplorer.setBaseNode(1))>")
chamada antiga: assertEquals(0, GHUtility.count(chOutExplorer.setBaseNode(3)))
nova chamada: assertEquals(0, GHUtility.count(chOutExplorer.setBaseNode(3)), "Era esperado valores iguais, mas  0 é diferente de " + result982 + " <GHUtility.count(chOutExplorer.setBaseNode(3))>")
chamada antiga: assertEquals(0, GHUtility.count(chInExplorer.setBaseNode(3)))
nova chamada: assertEquals(0, GHUtility.count(chInExplorer.setBaseNode(3)), "Era esperado valores iguais, mas  0 é diferente de " + result983 + " <GHUtility.count(chInExplorer.setBaseNode(3))>")
chamada antiga: assertEquals(0, GHUtility.count(chOutExplorer.setBaseNode(0)))
nova chamada: assertEquals(0, GHUtility.count(chOutExplorer.setBaseNode(0)), "Era esperado valores iguais, mas  0 é diferente de " + result984 + " <GHUtility.count(chOutExplorer.setBaseNode(0))>")
chamada antiga: assertEquals(1, GHUtility.count(chInExplorer.setBaseNode(0)))
nova chamada: assertEquals(1, GHUtility.count(chInExplorer.setBaseNode(0)), "Era esperado valores iguais, mas  1 é diferente de " + result985 + " <GHUtility.count(chInExplorer.setBaseNode(0))>")
chamada antiga: assertEquals(0, sc1.getBaseNode())
nova chamada: assertEquals(0, sc1.getBaseNode(), "Era esperado valores iguais, mas  0 é diferente de " + result986 + " <sc1.getBaseNode()>")
chamada antiga: assertEquals(1, sc1.getAdjNode())
nova chamada: assertEquals(1, sc1.getAdjNode(), "Era esperado valores iguais, mas  1 é diferente de " + result987 + " <sc1.getAdjNode()>")
chamada antiga: assertTrue(sc1.isShortcut())
nova chamada: assertTrue(sc1.isShortcut(), "Era esperado verdadeiro, mas " + result988 + " <sc1.isShortcut()> é falso")
chamada antiga: assertEquals(1, lg.getEdgeIteratorState(sc1, 1).getAdjNode())
nova chamada: assertEquals(1, lg.getEdgeIteratorState(sc1, 1).getAdjNode(), "Era esperado valores iguais, mas  1 é diferente de " + result989 + " <lg.getEdgeIteratorState(sc1, 1).getAdjNode()>")
chamada antiga: assertEquals(0, lg.getEdgeIteratorState(sc1, 1).getBaseNode())
nova chamada: assertEquals(0, lg.getEdgeIteratorState(sc1, 1).getBaseNode(), "Era esperado valores iguais, mas  0 é diferente de " + result990 + " <lg.getEdgeIteratorState(sc1, 1).getBaseNode()>")
chamada antiga: assertEquals(3, lg.getEdgeIteratorState(sc2, 3).getAdjNode())
nova chamada: assertEquals(3, lg.getEdgeIteratorState(sc2, 3).getAdjNode(), "Era esperado valores iguais, mas  3 é diferente de " + result991 + " <lg.getEdgeIteratorState(sc2, 3).getAdjNode()>")
chamada antiga: assertEquals(2, lg.getEdgeIteratorState(sc2, 3).getBaseNode())
nova chamada: assertEquals(2, lg.getEdgeIteratorState(sc2, 3).getBaseNode(), "Era esperado valores iguais, mas  2 é diferente de " + result992 + " <lg.getEdgeIteratorState(sc2, 3).getBaseNode()>")
chamada antiga: assertEquals(GHUtility.asSet(3, 4), GHUtility.getNeighbors(exp.setBaseNode(1)))
nova chamada: assertEquals(GHUtility.asSet(3, 4), GHUtility.getNeighbors(exp.setBaseNode(1)), "Era esperado valores iguais, mas " + result993 + " <GHUtility.asSet(3, 4)> é diferente de " + result994 + " <GHUtility.getNeighbors(exp.setBaseNode(1))>")
chamada antiga: assertEquals(edge1.getEdge(), chStore.getSkippedEdge1(chStore.toShortcutPointer(0)))
nova chamada: assertEquals(edge1.getEdge(), chStore.getSkippedEdge1(chStore.toShortcutPointer(0)), "Era esperado valores iguais, mas " + result995 + " <edge1.getEdge()> é diferente de " + result996 + " <chStore.getSkippedEdge1(chStore.toShortcutPointer(0))>")
chamada antiga: assertEquals(edge2.getEdge(), chStore.getSkippedEdge2(chStore.toShortcutPointer(0)))
nova chamada: assertEquals(edge2.getEdge(), chStore.getSkippedEdge2(chStore.toShortcutPointer(0)), "Era esperado valores iguais, mas " + result997 + " <edge2.getEdge()> é diferente de " + result998 + " <chStore.getSkippedEdge2(chStore.toShortcutPointer(0))>")
chamada antiga: assertEquals(edge1.getEdge(), chStore.getSkippedEdge1(chStore.toShortcutPointer(0)))
nova chamada: assertEquals(edge1.getEdge(), chStore.getSkippedEdge1(chStore.toShortcutPointer(0)), "Era esperado valores iguais, mas " + result999 + " <edge1.getEdge()> é diferente de " + result1000 + " <chStore.getSkippedEdge1(chStore.toShortcutPointer(0))>")
chamada antiga: assertEquals(edge2.getEdge(), chStore.getSkippedEdge2(chStore.toShortcutPointer(0)))
nova chamada: assertEquals(edge2.getEdge(), chStore.getSkippedEdge2(chStore.toShortcutPointer(0)), "Era esperado valores iguais, mas " + result1001 + " <edge2.getEdge()> é diferente de " + result1002 + " <chStore.getSkippedEdge2(chStore.toShortcutPointer(0))>")
chamada antiga: assertEquals(0, chStore.getOrigEdgeKeyFirst(chStore.toShortcutPointer(0)))
nova chamada: assertEquals(0, chStore.getOrigEdgeKeyFirst(chStore.toShortcutPointer(0)), "Era esperado valores iguais, mas  0 é diferente de " + result1003 + " <chStore.getOrigEdgeKeyFirst(chStore.toShortcutPointer(0))>")
chamada antiga: assertEquals(2, chStore.getOrigEdgeKeyLast(chStore.toShortcutPointer(0)))
nova chamada: assertEquals(2, chStore.getOrigEdgeKeyLast(chStore.toShortcutPointer(0)), "Era esperado valores iguais, mas  2 é diferente de " + result1004 + " <chStore.getOrigEdgeKeyLast(chStore.toShortcutPointer(0))>")
chamada antiga: assertNotNull(sc02)
nova chamada: assertNotNull(sc02, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(0, sc02.getBaseNode())
nova chamada: assertEquals(0, sc02.getBaseNode(), "Era esperado valores iguais, mas  0 é diferente de " + result1005 + " <sc02.getBaseNode()>")
chamada antiga: assertEquals(2, sc02.getAdjNode())
nova chamada: assertEquals(2, sc02.getAdjNode(), "Era esperado valores iguais, mas  2 é diferente de " + result1006 + " <sc02.getAdjNode()>")
chamada antiga: assertEquals(2, sc02.getEdge())
nova chamada: assertEquals(2, sc02.getEdge(), "Era esperado valores iguais, mas  2 é diferente de " + result1007 + " <sc02.getEdge()>")
chamada antiga: assertEquals(0, sc02.getSkippedEdge1())
nova chamada: assertEquals(0, sc02.getSkippedEdge1(), "Era esperado valores iguais, mas  0 é diferente de " + result1008 + " <sc02.getSkippedEdge1()>")
chamada antiga: assertEquals(1, sc02.getSkippedEdge2())
nova chamada: assertEquals(1, sc02.getSkippedEdge2(), "Era esperado valores iguais, mas  1 é diferente de " + result1009 + " <sc02.getSkippedEdge2()>")
chamada antiga: assertEquals(0, sc02.getOrigEdgeKeyFirst())
nova chamada: assertEquals(0, sc02.getOrigEdgeKeyFirst(), "Era esperado valores iguais, mas  0 é diferente de " + result1010 + " <sc02.getOrigEdgeKeyFirst()>")
chamada antiga: assertEquals(2, sc02.getOrigEdgeKeyLast())
nova chamada: assertEquals(2, sc02.getOrigEdgeKeyLast(), "Era esperado valores iguais, mas  2 é diferente de " + result1011 + " <sc02.getOrigEdgeKeyLast()>")
chamada antiga: assertNotNull(sc20)
nova chamada: assertNotNull(sc20, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(2, sc20.getBaseNode())
nova chamada: assertEquals(2, sc20.getBaseNode(), "Era esperado valores iguais, mas  2 é diferente de " + result1012 + " <sc20.getBaseNode()>")
chamada antiga: assertEquals(0, sc20.getAdjNode())
nova chamada: assertEquals(0, sc20.getAdjNode(), "Era esperado valores iguais, mas  0 é diferente de " + result1013 + " <sc20.getAdjNode()>")
chamada antiga: assertEquals(2, sc20.getEdge())
nova chamada: assertEquals(2, sc20.getEdge(), "Era esperado valores iguais, mas  2 é diferente de " + result1014 + " <sc20.getEdge()>")
chamada antiga: assertEquals(0, sc20.getSkippedEdge1())
nova chamada: assertEquals(0, sc20.getSkippedEdge1(), "Era esperado valores iguais, mas  0 é diferente de " + result1015 + " <sc20.getSkippedEdge1()>")
chamada antiga: assertEquals(1, sc20.getSkippedEdge2())
nova chamada: assertEquals(1, sc20.getSkippedEdge2(), "Era esperado valores iguais, mas  1 é diferente de " + result1016 + " <sc20.getSkippedEdge2()>")
chamada antiga: assertEquals(0, sc20.getOrigEdgeKeyFirst())
nova chamada: assertEquals(0, sc20.getOrigEdgeKeyFirst(), "Era esperado valores iguais, mas  0 é diferente de " + result1017 + " <sc20.getOrigEdgeKeyFirst()>")
chamada antiga: assertEquals(2, sc20.getOrigEdgeKeyLast())
nova chamada: assertEquals(2, sc20.getOrigEdgeKeyLast(), "Era esperado valores iguais, mas  2 é diferente de " + result1018 + " <sc20.getOrigEdgeKeyLast()>")
chamada antiga: assertEquals(new GHPoint(0, 0), res.getSnappedPoint())
nova chamada: assertEquals(new GHPoint(0, 0), res.getSnappedPoint(), "Era esperado valores iguais, mas  new GHPoint(0, 0) é diferente de " + result1019 + " <res.getSnappedPoint()>")
chamada antiga: assertEquals(new GHPoint(1, 0), res.getSnappedPoint())
nova chamada: assertEquals(new GHPoint(1, 0), res.getSnappedPoint(), "Era esperado valores iguais, mas  new GHPoint(1, 0) é diferente de " + result1020 + " <res.getSnappedPoint()>")
chamada antiga: assertEquals(new GHPoint(1, 2.5), res.getSnappedPoint())
nova chamada: assertEquals(new GHPoint(1, 2.5), res.getSnappedPoint(), "Era esperado valores iguais, mas  new GHPoint(1, 2.5) é diferente de " + result1021 + " <res.getSnappedPoint()>")
chamada antiga: assertEquals(3, queryGraph2.getNodes())
nova chamada: assertEquals(3, queryGraph2.getNodes(), "Era esperado valores iguais, mas  3 é diferente de " + result1022 + " <queryGraph2.getNodes()>")
chamada antiga: assertEquals(new GHPoint(1.5, 1.5), res.getSnappedPoint())
nova chamada: assertEquals(new GHPoint(1.5, 1.5), res.getSnappedPoint(), "Era esperado valores iguais, mas  new GHPoint(1.5, 1.5) é diferente de " + result1023 + " <res.getSnappedPoint()>")
chamada antiga: assertEquals(3, res.getClosestNode())
nova chamada: assertEquals(3, res.getClosestNode(), "Era esperado valores iguais, mas  3 é diferente de " + result1024 + " <res.getClosestNode()>")
chamada antiga: assertEquals(3, getPoints(queryGraph3, 0, 3).size())
nova chamada: assertEquals(3, getPoints(queryGraph3, 0, 3).size(), "Era esperado valores iguais, mas  3 é diferente de " + result1025 + " <getPoints(queryGraph3, 0, 3).size()>")
chamada antiga: assertEquals(2, getPoints(queryGraph3, 3, 1).size())
nova chamada: assertEquals(2, getPoints(queryGraph3, 3, 1).size(), "Era esperado valores iguais, mas  2 é diferente de " + result1026 + " <getPoints(queryGraph3, 3, 1).size()>")
chamada antiga: assertEquals(new GHPoint(1.5, 1.5), res.getSnappedPoint())
nova chamada: assertEquals(new GHPoint(1.5, 1.5), res.getSnappedPoint(), "Era esperado valores iguais, mas  new GHPoint(1.5, 1.5) é diferente de " + result1027 + " <res.getSnappedPoint()>")
chamada antiga: assertEquals(3, res.getClosestNode())
nova chamada: assertEquals(3, res.getClosestNode(), "Era esperado valores iguais, mas  3 é diferente de " + result1028 + " <res.getClosestNode()>")
chamada antiga: assertEquals(3, getPoints(queryGraph4, 0, 3).size())
nova chamada: assertEquals(3, getPoints(queryGraph4, 0, 3).size(), "Era esperado valores iguais, mas  3 é diferente de " + result1029 + " <getPoints(queryGraph4, 0, 3).size()>")
chamada antiga: assertEquals(2, getPoints(queryGraph4, 3, 1).size())
nova chamada: assertEquals(2, getPoints(queryGraph4, 3, 1).size(), "Era esperado valores iguais, mas  2 é diferente de " + result1030 + " <getPoints(queryGraph4, 3, 1).size()>")
chamada antiga: assertEquals(new GHPoint(1.300019, 1.899962), res.getSnappedPoint())
nova chamada: assertEquals(new GHPoint(1.300019, 1.899962), res.getSnappedPoint(), "Era esperado valores iguais, mas  new GHPoint(1.300019, 1.899962) é diferente de " + result1031 + " <res.getSnappedPoint()>")
chamada antiga: assertEquals(3, res.getClosestNode())
nova chamada: assertEquals(3, res.getClosestNode(), "Era esperado valores iguais, mas  3 é diferente de " + result1032 + " <res.getClosestNode()>")
chamada antiga: assertEquals(4, getPoints(queryGraph5, 0, 3).size())
nova chamada: assertEquals(4, getPoints(queryGraph5, 0, 3).size(), "Era esperado valores iguais, mas  4 é diferente de " + result1033 + " <getPoints(queryGraph5, 0, 3).size()>")
chamada antiga: assertEquals(2, getPoints(queryGraph5, 3, 1).size())
nova chamada: assertEquals(2, getPoints(queryGraph5, 3, 1).size(), "Era esperado valores iguais, mas  2 é diferente de " + result1034 + " <getPoints(queryGraph5, 3, 1).size()>")
chamada antiga: assertEquals(new GHPoint(0.5, 0), res.getSnappedPoint())
nova chamada: assertEquals(new GHPoint(0.5, 0), res.getSnappedPoint(), "Era esperado valores iguais, mas  new GHPoint(0.5, 0) é diferente de " + result1035 + " <res.getSnappedPoint()>")
chamada antiga: assertEquals(3, res.getClosestNode())
nova chamada: assertEquals(3, res.getClosestNode(), "Era esperado valores iguais, mas  3 é diferente de " + result1036 + " <res.getClosestNode()>")
chamada antiga: assertEquals(2, getPoints(queryGraph6, 0, 3).size())
nova chamada: assertEquals(2, getPoints(queryGraph6, 0, 3).size(), "Era esperado valores iguais, mas  2 é diferente de " + result1037 + " <getPoints(queryGraph6, 0, 3).size()>")
chamada antiga: assertEquals(2, getPoints(queryGraph6, 3, 2).size())
nova chamada: assertEquals(2, getPoints(queryGraph6, 3, 2).size(), "Era esperado valores iguais, mas  2 é diferente de " + result1038 + " <getPoints(queryGraph6, 3, 2).size()>")
chamada antiga: assertEquals(2, realNodeModifications.size())
nova chamada: assertEquals(2, realNodeModifications.size(), "Era esperado valores iguais, mas  2 é diferente de " + result1039 + " <realNodeModifications.size()>")
chamada antiga: assertEquals("[3->4]", realNodeModifications.get(3).getAdditionalEdges().toString())
nova chamada: assertEquals("[3->4]", realNodeModifications.get(3).getAdditionalEdges().toString(), "Era esperado valores iguais, mas  '[3-4]' é diferente de " + result1040 + " <realNodeModifications.get(3).getAdditionalEdges().toString()>")
chamada antiga: assertEquals("[2]", realNodeModifications.get(3).getRemovedEdges().toString())
nova chamada: assertEquals("[2]", realNodeModifications.get(3).getRemovedEdges().toString(), "Era esperado valores iguais, mas  '[2]' é diferente de " + result1041 + " <realNodeModifications.get(3).getRemovedEdges().toString()>")
chamada antiga: assertEquals("[1->4]", realNodeModifications.get(1).getAdditionalEdges().toString())
nova chamada: assertEquals("[1->4]", realNodeModifications.get(1).getAdditionalEdges().toString(), "Era esperado valores iguais, mas  '[1-4]' é diferente de " + result1042 + " <realNodeModifications.get(1).getAdditionalEdges().toString()>")
chamada antiga: assertEquals("[2]", realNodeModifications.get(1).getRemovedEdges().toString())
nova chamada: assertEquals("[2]", realNodeModifications.get(1).getRemovedEdges().toString(), "Era esperado valores iguais, mas  '[2]' é diferente de " + result1043 + " <realNodeModifications.get(1).getRemovedEdges().toString()>")
chamada antiga: assertEquals(4, state.fetchWayGeometry(FetchMode.ALL).size())
nova chamada: assertEquals(4, state.fetchWayGeometry(FetchMode.ALL).size(), "Era esperado valores iguais, mas  4 é diferente de " + result1044 + " <state.fetchWayGeometry(FetchMode.ALL).size()>")
chamada antiga: assertEquals(2, state.fetchWayGeometry(FetchMode.ALL).size())
nova chamada: assertEquals(2, state.fetchWayGeometry(FetchMode.ALL).size(), "Era esperado valores iguais, mas  2 é diferente de " + result1045 + " <state.fetchWayGeometry(FetchMode.ALL).size()>")
chamada antiga: assertEquals("[1->4, 1 1-0]", ((VirtualEdgeIterator) queryGraph.createEdgeExplorer().setBaseNode(1)).getEdges().toString())
nova chamada: assertEquals("[1->4, 1 1-0]", ((VirtualEdgeIterator) queryGraph.createEdgeExplorer().setBaseNode(1)).getEdges().toString(), "Era esperado valores iguais, mas  '[1-4, 1 1-0]' é diferente de " + result1046 + " <((VirtualEdgeIterator) queryGraph.createEdgeExplorer().setBaseNode(1)).getEdges().toString()>")
chamada antiga: assertEquals("[3->4]", ((VirtualEdgeIterator) queryGraph.createEdgeExplorer().setBaseNode(3)).getEdges().toString())
nova chamada: assertEquals("[3->4]", ((VirtualEdgeIterator) queryGraph.createEdgeExplorer().setBaseNode(3)).getEdges().toString(), "Era esperado valores iguais, mas  '[3-4]' é diferente de " + result1047 + " <((VirtualEdgeIterator) queryGraph.createEdgeExplorer().setBaseNode(3)).getEdges().toString()>")
chamada antiga: assertEquals(new GHPoint(1.5, 1.5), res1.getSnappedPoint())
nova chamada: assertEquals(new GHPoint(1.5, 1.5), res1.getSnappedPoint(), "Era esperado valores iguais, mas  new GHPoint(1.5, 1.5) é diferente de " + result1048 + " <res1.getSnappedPoint()>")
chamada antiga: assertEquals(3, res1.getClosestNode())
nova chamada: assertEquals(3, res1.getClosestNode(), "Era esperado valores iguais, mas  3 é diferente de " + result1049 + " <res1.getClosestNode()>")
chamada antiga: assertEquals(3, getPoints(queryGraph, 0, 3).size())
nova chamada: assertEquals(3, getPoints(queryGraph, 0, 3).size(), "Era esperado valores iguais, mas  3 é diferente de " + result1050 + " <getPoints(queryGraph, 0, 3).size()>")
chamada antiga: assertEquals(2, pl.size())
nova chamada: assertEquals(2, pl.size(), "Era esperado valores iguais, mas  2 é diferente de " + result1051 + " <pl.size()>")
chamada antiga: assertEquals(new GHPoint(1.5, 1.5), pl.get(0))
nova chamada: assertEquals(new GHPoint(1.5, 1.5), pl.get(0), "Era esperado valores iguais, mas  new GHPoint(1.5, 1.5) é diferente de " + result1052 + " <pl.get(0)>")
chamada antiga: assertEquals(new GHPoint(1, 2.5), pl.get(1))
nova chamada: assertEquals(new GHPoint(1, 2.5), pl.get(1), "Era esperado valores iguais, mas  new GHPoint(1, 2.5) é diferente de " + result1053 + " <pl.get(1)>")
chamada antiga: assertNotNull(queryGraph.getEdgeIteratorState(edge.getEdge(), 3))
nova chamada: assertNotNull(queryGraph.getEdgeIteratorState(edge.getEdge(), 3), "Era esperado não nulo, mas " + result1054 + " <queryGraph.getEdgeIteratorState(edge.getEdge(), 3)> é nulo")
chamada antiga: assertNotNull(queryGraph.getEdgeIteratorState(edge.getEdge(), 1))
nova chamada: assertNotNull(queryGraph.getEdgeIteratorState(edge.getEdge(), 1), "Era esperado não nulo, mas " + result1055 + " <queryGraph.getEdgeIteratorState(edge.getEdge(), 1)> é nulo")
chamada antiga: assertNotNull(queryGraph.getEdgeIteratorState(edge.getEdge(), 3))
nova chamada: assertNotNull(queryGraph.getEdgeIteratorState(edge.getEdge(), 3), "Era esperado não nulo, mas " + result1056 + " <queryGraph.getEdgeIteratorState(edge.getEdge(), 3)> é nulo")
chamada antiga: assertNotNull(queryGraph.getEdgeIteratorState(edge.getEdge(), 0))
nova chamada: assertNotNull(queryGraph.getEdgeIteratorState(edge.getEdge(), 0), "Era esperado não nulo, mas " + result1057 + " <queryGraph.getEdgeIteratorState(edge.getEdge(), 0)> é nulo")
chamada antiga: assertEquals(4, res2.getClosestNode())
nova chamada: assertEquals(4, res2.getClosestNode(), "Era esperado valores iguais, mas  4 é diferente de " + result1058 + " <res2.getClosestNode()>")
chamada antiga: assertEquals(new GHPoint(1.300019, 1.899962), res2.getSnappedPoint())
nova chamada: assertEquals(new GHPoint(1.300019, 1.899962), res2.getSnappedPoint(), "Era esperado valores iguais, mas  new GHPoint(1.300019, 1.899962) é diferente de " + result1059 + " <res2.getSnappedPoint()>")
chamada antiga: assertEquals(3, res1.getClosestNode())
nova chamada: assertEquals(3, res1.getClosestNode(), "Era esperado valores iguais, mas  3 é diferente de " + result1060 + " <res1.getClosestNode()>")
chamada antiga: assertEquals(new GHPoint(1.5, 1.5), res1.getSnappedPoint())
nova chamada: assertEquals(new GHPoint(1.5, 1.5), res1.getSnappedPoint(), "Era esperado valores iguais, mas  new GHPoint(1.5, 1.5) é diferente de " + result1061 + " <res1.getSnappedPoint()>")
chamada antiga: assertEquals(3, getPoints(queryGraph, 3, 0).size())
nova chamada: assertEquals(3, getPoints(queryGraph, 3, 0).size(), "Era esperado valores iguais, mas  3 é diferente de " + result1062 + " <getPoints(queryGraph, 3, 0).size()>")
chamada antiga: assertEquals(2, getPoints(queryGraph, 3, 4).size())
nova chamada: assertEquals(2, getPoints(queryGraph, 3, 4).size(), "Era esperado valores iguais, mas  2 é diferente de " + result1063 + " <getPoints(queryGraph, 3, 4).size()>")
chamada antiga: assertEquals(2, getPoints(queryGraph, 4, 1).size())
nova chamada: assertEquals(2, getPoints(queryGraph, 4, 1).size(), "Era esperado valores iguais, mas  2 é diferente de " + result1064 + " <getPoints(queryGraph, 4, 1).size()>")
chamada antiga: assertNull(GHUtility.getEdge(queryGraph, 4, 0))
nova chamada: assertNull(GHUtility.getEdge(queryGraph, 4, 0), "Era esperado nulo, mas " + result1065 + " <GHUtility.getEdge(queryGraph, 4, 0)> não é nulo")
chamada antiga: assertNull(GHUtility.getEdge(queryGraph, 3, 1))
nova chamada: assertNull(GHUtility.getEdge(queryGraph, 3, 1), "Era esperado nulo, mas " + result1066 + " <GHUtility.getEdge(queryGraph, 3, 1)> não é nulo")
chamada antiga: assertEquals(2, res1.getClosestNode())
nova chamada: assertEquals(2, res1.getClosestNode(), "Era esperado valores iguais, mas  2 é diferente de " + result1067 + " <res1.getClosestNode()>")
chamada antiga: assertEquals(new GHPoint(0, 0.1), res1.getSnappedPoint())
nova chamada: assertEquals(new GHPoint(0, 0.1), res1.getSnappedPoint(), "Era esperado valores iguais, mas  new GHPoint(0, 0.1) é diferente de " + result1068 + " <res1.getSnappedPoint()>")
chamada antiga: assertEquals(3, res2.getClosestNode())
nova chamada: assertEquals(3, res2.getClosestNode(), "Era esperado valores iguais, mas  3 é diferente de " + result1069 + " <res2.getClosestNode()>")
chamada antiga: assertEquals(new GHPoint(0, 0.9), res2.getSnappedPoint())
nova chamada: assertEquals(new GHPoint(0, 0.9), res2.getSnappedPoint(), "Era esperado valores iguais, mas  new GHPoint(0, 0.9) é diferente de " + result1070 + " <res2.getSnappedPoint()>")
chamada antiga: assertEquals(2, getPoints(queryGraph, 0, 2).size())
nova chamada: assertEquals(2, getPoints(queryGraph, 0, 2).size(), "Era esperado valores iguais, mas  2 é diferente de " + result1071 + " <getPoints(queryGraph, 0, 2).size()>")
chamada antiga: assertEquals(2, getPoints(queryGraph, 2, 3).size())
nova chamada: assertEquals(2, getPoints(queryGraph, 2, 3).size(), "Era esperado valores iguais, mas  2 é diferente de " + result1072 + " <getPoints(queryGraph, 2, 3).size()>")
chamada antiga: assertEquals(2, getPoints(queryGraph, 3, 1).size())
nova chamada: assertEquals(2, getPoints(queryGraph, 3, 1).size(), "Era esperado valores iguais, mas  2 é diferente de " + result1073 + " <getPoints(queryGraph, 3, 1).size()>")
chamada antiga: assertNull(GHUtility.getEdge(queryGraph, 3, 0))
nova chamada: assertNull(GHUtility.getEdge(queryGraph, 3, 0), "Era esperado nulo, mas " + result1074 + " <GHUtility.getEdge(queryGraph, 3, 0)> não é nulo")
chamada antiga: assertNull(GHUtility.getEdge(queryGraph, 2, 1))
nova chamada: assertNull(GHUtility.getEdge(queryGraph, 2, 1), "Era esperado nulo, mas " + result1075 + " <GHUtility.getEdge(queryGraph, 2, 1)> não é nulo")
chamada antiga: assertTrue(vi.next())
nova chamada: assertTrue(vi.next(), "Era esperado verdadeiro, mas " + result1076 + " <vi.next()> é falso")
chamada antiga: assertEquals(GHUtility.asSet(0, 5, 3), GHUtility.getNeighbors(ee.setBaseNode(1)))
nova chamada: assertEquals(GHUtility.asSet(0, 5, 3), GHUtility.getNeighbors(ee.setBaseNode(1)), "Era esperado valores iguais, mas " + result1077 + " <GHUtility.asSet(0, 5, 3)> é diferente de " + result1078 + " <GHUtility.getNeighbors(ee.setBaseNode(1))>")
chamada antiga: assertTrue(snap.getClosestNode() > 1)
nova chamada: assertTrue(snap.getClosestNode() > 1, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(2, GHUtility.count(ee.setBaseNode(snap.getClosestNode())))
nova chamada: assertEquals(2, GHUtility.count(ee.setBaseNode(snap.getClosestNode())), "Era esperado valores iguais, mas  2 é diferente de " + result1079 + " <GHUtility.count(ee.setBaseNode(snap.getClosestNode()))>")
chamada antiga: assertEquals(new GHPoint(0.5, 0), res1.getSnappedPoint())
nova chamada: assertEquals(new GHPoint(0.5, 0), res1.getSnappedPoint(), "Era esperado valores iguais, mas  new GHPoint(0.5, 0) é diferente de " + result1080 + " <res1.getSnappedPoint()>")
chamada antiga: assertEquals(new GHPoint(1.300019, 1.899962), res2.getSnappedPoint())
nova chamada: assertEquals(new GHPoint(1.300019, 1.899962), res2.getSnappedPoint(), "Era esperado valores iguais, mas  new GHPoint(1.300019, 1.899962) é diferente de " + result1081 + " <res2.getSnappedPoint()>")
chamada antiga: assertNotNull(GHUtility.getEdge(queryGraph, 0, 4))
nova chamada: assertNotNull(GHUtility.getEdge(queryGraph, 0, 4), "Era esperado não nulo, mas " + result1082 + " <GHUtility.getEdge(queryGraph, 0, 4)> é nulo")
chamada antiga: assertNotNull(GHUtility.getEdge(queryGraph, 0, 3))
nova chamada: assertNotNull(GHUtility.getEdge(queryGraph, 0, 3), "Era esperado não nulo, mas " + result1083 + " <GHUtility.getEdge(queryGraph, 0, 3)> é nulo")
chamada antiga: assertEquals(new GHPoint(0.5, 0), res1.getSnappedPoint())
nova chamada: assertEquals(new GHPoint(0.5, 0), res1.getSnappedPoint(), "Era esperado valores iguais, mas  new GHPoint(0.5, 0) é diferente de " + result1084 + " <res1.getSnappedPoint()>")
chamada antiga: assertEquals(new GHPoint(0.5, 0), res2.getSnappedPoint())
nova chamada: assertEquals(new GHPoint(0.5, 0), res2.getSnappedPoint(), "Era esperado valores iguais, mas  new GHPoint(0.5, 0) é diferente de " + result1085 + " <res2.getSnappedPoint()>")
chamada antiga: assertEquals(3, res1.getClosestNode())
nova chamada: assertEquals(3, res1.getClosestNode(), "Era esperado valores iguais, mas  3 é diferente de " + result1086 + " <res1.getClosestNode()>")
chamada antiga: assertEquals(3, res2.getClosestNode())
nova chamada: assertEquals(3, res2.getClosestNode(), "Era esperado valores iguais, mas  3 é diferente de " + result1087 + " <res2.getClosestNode()>")
chamada antiga: assertEquals(queryGraph.getNodes(), g.getNodes() + 1)
nova chamada: assertEquals(queryGraph.getNodes(), g.getNodes() + 1, "Era esperado valores iguais, mas " + result1088 + " <queryGraph.getNodes()> é diferente de " + " g.getNodes() + 1")
chamada antiga: assertEquals(GHUtility.asSet(1, 3), GHUtility.getNeighbors(iter))
nova chamada: assertEquals(GHUtility.asSet(1, 3), GHUtility.getNeighbors(iter), "Era esperado valores iguais, mas " + result1089 + " <GHUtility.asSet(1, 3)> é diferente de " + result1090 + " <GHUtility.getNeighbors(iter)>")
chamada antiga: assertEquals(e1.getEdge(), e2.getEdge())
nova chamada: assertEquals(e1.getEdge(), e2.getEdge(), "Era esperado valores iguais, mas " + result1091 + " <e1.getEdge()> é diferente de " + result1092 + " <e2.getEdge()>")
chamada antiga: assertEquals(startNode, it.getBaseNode())
nova chamada: assertEquals(startNode, it.getBaseNode(), "Era esperado valores iguais, mas  startNode é diferente de " + result1093 + " <it.getBaseNode()>")
chamada antiga: assertEquals(endNode, it.getAdjNode())
nova chamada: assertEquals(endNode, it.getAdjNode(), "Era esperado valores iguais, mas  endNode é diferente de " + result1094 + " <it.getAdjNode()>")
chamada antiga: assertEquals(endNode, it.getBaseNode())
nova chamada: assertEquals(endNode, it.getBaseNode(), "Era esperado valores iguais, mas  endNode é diferente de " + result1095 + " <it.getBaseNode()>")
chamada antiga: assertEquals(startNode, it.getAdjNode())
nova chamada: assertEquals(startNode, it.getAdjNode(), "Era esperado valores iguais, mas  startNode é diferente de " + result1096 + " <it.getAdjNode()>")
chamada antiga: assertEquals(expect, isAvoidEdge(queryGraph.getEdgeIteratorState(1, 2)))
nova chamada: assertEquals(expect, isAvoidEdge(queryGraph.getEdgeIteratorState(1, 2)), "Era esperado valores iguais, mas  expect é diferente de " + result1097 + " <isAvoidEdge(queryGraph.getEdgeIteratorState(1, 2))>")
chamada antiga: assertEquals(expect, isAvoidEdge(queryGraph.getEdgeIteratorState(1, 0)))
nova chamada: assertEquals(expect, isAvoidEdge(queryGraph.getEdgeIteratorState(1, 0)), "Era esperado valores iguais, mas  expect é diferente de " + result1098 + " <isAvoidEdge(queryGraph.getEdgeIteratorState(1, 0))>")
chamada antiga: assertEquals(expect, isAvoidEdge(queryGraph.getEdgeIteratorState(1, 2)))
nova chamada: assertEquals(expect, isAvoidEdge(queryGraph.getEdgeIteratorState(1, 2)), "Era esperado valores iguais, mas  expect é diferente de " + result1099 + " <isAvoidEdge(queryGraph.getEdgeIteratorState(1, 2))>")
chamada antiga: assertEquals(expect, isAvoidEdge(queryGraph.getEdgeIteratorState(1, 0)))
nova chamada: assertEquals(expect, isAvoidEdge(queryGraph.getEdgeIteratorState(1, 0)), "Era esperado valores iguais, mas  expect é diferente de " + result1100 + " <isAvoidEdge(queryGraph.getEdgeIteratorState(1, 0))>")
chamada antiga: assertEquals(expect, isAvoidEdge(queryGraph.getEdgeIteratorState(2, 1)))
nova chamada: assertEquals(expect, isAvoidEdge(queryGraph.getEdgeIteratorState(2, 1)), "Era esperado valores iguais, mas  expect é diferente de " + result1101 + " <isAvoidEdge(queryGraph.getEdgeIteratorState(2, 1))>")
chamada antiga: assertEquals(expect, isAvoidEdge(queryGraph.getEdgeIteratorState(2, 2)))
nova chamada: assertEquals(expect, isAvoidEdge(queryGraph.getEdgeIteratorState(2, 2)), "Era esperado valores iguais, mas  expect é diferente de " + result1102 + " <isAvoidEdge(queryGraph.getEdgeIteratorState(2, 2))>")
chamada antiga: assertEquals(expect, isAvoidEdge(queryGraph.getEdgeIteratorState(2, 1)))
nova chamada: assertEquals(expect, isAvoidEdge(queryGraph.getEdgeIteratorState(2, 1)), "Era esperado valores iguais, mas  expect é diferente de " + result1103 + " <isAvoidEdge(queryGraph.getEdgeIteratorState(2, 1))>")
chamada antiga: assertEquals(expect, isAvoidEdge(queryGraph.getEdgeIteratorState(2, 2)))
nova chamada: assertEquals(expect, isAvoidEdge(queryGraph.getEdgeIteratorState(2, 2)), "Era esperado valores iguais, mas  expect é diferente de " + result1104 + " <isAvoidEdge(queryGraph.getEdgeIteratorState(2, 2))>")
chamada antiga: assertEquals(expect, isAvoidEdge(queryGraph.getEdgeIteratorState(1, 0)))
nova chamada: assertEquals(expect, isAvoidEdge(queryGraph.getEdgeIteratorState(1, 0)), "Era esperado valores iguais, mas  expect é diferente de " + result1105 + " <isAvoidEdge(queryGraph.getEdgeIteratorState(1, 0))>")
chamada antiga: assertEquals(expect, isAvoidEdge(queryGraph.getEdgeIteratorState(1, 2)))
nova chamada: assertEquals(expect, isAvoidEdge(queryGraph.getEdgeIteratorState(1, 2)), "Era esperado valores iguais, mas  expect é diferente de " + result1106 + " <isAvoidEdge(queryGraph.getEdgeIteratorState(1, 2))>")
chamada antiga: assertTrue(GHUtility.getEdge(queryGraph, 2, 0).get(UNFAVORED_EDGE))
nova chamada: assertTrue(GHUtility.getEdge(queryGraph, 2, 0).get(UNFAVORED_EDGE), "Era esperado verdadeiro, mas " + result1107 + " <GHUtility.getEdge(queryGraph, 2, 0).get(UNFAVORED_EDGE)> é falso")
chamada antiga: assertTrue(GHUtility.getEdge(queryGraph, 2, 0).getReverse(UNFAVORED_EDGE))
nova chamada: assertTrue(GHUtility.getEdge(queryGraph, 2, 0).getReverse(UNFAVORED_EDGE), "Era esperado verdadeiro, mas " + result1108 + " <GHUtility.getEdge(queryGraph, 2, 0).getReverse(UNFAVORED_EDGE)> é falso")
chamada antiga: assertTrue(GHUtility.getEdge(queryGraph, 0, 2).get(UNFAVORED_EDGE))
nova chamada: assertTrue(GHUtility.getEdge(queryGraph, 0, 2).get(UNFAVORED_EDGE), "Era esperado verdadeiro, mas " + result1109 + " <GHUtility.getEdge(queryGraph, 0, 2).get(UNFAVORED_EDGE)> é falso")
chamada antiga: assertTrue(GHUtility.getEdge(queryGraph, 0, 2).getReverse(UNFAVORED_EDGE))
nova chamada: assertTrue(GHUtility.getEdge(queryGraph, 0, 2).getReverse(UNFAVORED_EDGE), "Era esperado verdadeiro, mas " + result1110 + " <GHUtility.getEdge(queryGraph, 0, 2).getReverse(UNFAVORED_EDGE)> é falso")
chamada antiga: assertEquals(expect, isAvoidEdge(incomingEdge))
nova chamada: assertEquals(expect, isAvoidEdge(incomingEdge), "Era esperado valores iguais, mas  expect é diferente de " + result1111 + " <isAvoidEdge(incomingEdge)>")
chamada antiga: assertEquals(expect, isAvoidEdge(incomingEdgeReverse))
nova chamada: assertEquals(expect, isAvoidEdge(incomingEdgeReverse), "Era esperado valores iguais, mas  expect é diferente de " + result1112 + " <isAvoidEdge(incomingEdgeReverse)>")
chamada antiga: assertEquals(new LinkedHashSet<>(Arrays.asList(incomingEdge, incomingEdgeReverse)), queryGraph.getUnfavoredVirtualEdges())
nova chamada: assertEquals(new LinkedHashSet<>(Arrays.asList(incomingEdge, incomingEdgeReverse)), queryGraph.getUnfavoredVirtualEdges(), "Era esperado valores iguais, mas  new LinkedHashSet(Arrays.asList(incomingEdge, incomingEdgeReverse)) é diferente de " + result1113 + " <queryGraph.getUnfavoredVirtualEdges()>")
chamada antiga: assertEquals(expect, isAvoidEdge(incomingEdge))
nova chamada: assertEquals(expect, isAvoidEdge(incomingEdge), "Era esperado valores iguais, mas  expect é diferente de " + result1114 + " <isAvoidEdge(incomingEdge)>")
chamada antiga: assertEquals(expect, isAvoidEdge(incomingEdgeReverse))
nova chamada: assertEquals(expect, isAvoidEdge(incomingEdgeReverse), "Era esperado valores iguais, mas  expect é diferente de " + result1115 + " <isAvoidEdge(incomingEdgeReverse)>")
chamada antiga: assertEquals(new LinkedHashSet<>(), queryGraph.getUnfavoredVirtualEdges())
nova chamada: assertEquals(new LinkedHashSet<>(), queryGraph.getUnfavoredVirtualEdges(), "Era esperado valores iguais, mas  new LinkedHashSet() é diferente de " + result1116 + " <queryGraph.getUnfavoredVirtualEdges()>")
chamada antiga: assertTrue(iter.next())
nova chamada: assertTrue(iter.next(), "Era esperado verdadeiro, mas " + result1117 + " <iter.next()> é falso")
chamada antiga: assertEquals(new GHPoint(1.5, 1.5), res.getSnappedPoint())
nova chamada: assertEquals(new GHPoint(1.5, 1.5), res.getSnappedPoint(), "Era esperado valores iguais, mas  new GHPoint(1.5, 1.5) é diferente de " + result1118 + " <res.getSnappedPoint()>")
chamada antiga: assertEquals(3, res.getClosestNode())
nova chamada: assertEquals(3, res.getClosestNode(), "Era esperado valores iguais, mas  3 é diferente de " + result1119 + " <res.getClosestNode()>")
chamada antiga: assertTrue(iter.next())
nova chamada: assertTrue(iter.next(), "Era esperado verdadeiro, mas " + result1120 + " <iter.next()> é falso")
chamada antiga: assertEquals(2, iter.getEdge())
nova chamada: assertEquals(2, iter.getEdge(), "Era esperado valores iguais, mas  2 é diferente de " + result1121 + " <iter.getEdge()>")
chamada antiga: assertEquals(0, iter.getAdjNode())
nova chamada: assertEquals(0, iter.getAdjNode(), "Era esperado valores iguais, mas  0 é diferente de " + result1122 + " <iter.getAdjNode()>")
chamada antiga: assertEquals(3, ((VirtualEdgeIteratorState) queryGraph.getEdgeIteratorState(iter.getEdge(), 0)).getOriginalEdgeKey())
nova chamada: assertEquals(3, ((VirtualEdgeIteratorState) queryGraph.getEdgeIteratorState(iter.getEdge(), 0)).getOriginalEdgeKey(), "Era esperado valores iguais, mas  3 é diferente de " + result1123 + " <((VirtualEdgeIteratorState) queryGraph.getEdgeIteratorState(iter.getEdge(), 0)).getOriginalEdgeKey()>")
chamada antiga: assertTrue(iter.next())
nova chamada: assertTrue(iter.next(), "Era esperado verdadeiro, mas " + result1124 + " <iter.next()> é falso")
chamada antiga: assertEquals(3, iter.getEdge())
nova chamada: assertEquals(3, iter.getEdge(), "Era esperado valores iguais, mas  3 é diferente de " + result1125 + " <iter.getEdge()>")
chamada antiga: assertEquals(1, iter.getAdjNode())
nova chamada: assertEquals(1, iter.getAdjNode(), "Era esperado valores iguais, mas  1 é diferente de " + result1126 + " <iter.getAdjNode()>")
chamada antiga: assertEquals(2, ((VirtualEdgeIteratorState) queryGraph.getEdgeIteratorState(iter.getEdge(), 1)).getOriginalEdgeKey())
nova chamada: assertEquals(2, ((VirtualEdgeIteratorState) queryGraph.getEdgeIteratorState(iter.getEdge(), 1)).getOriginalEdgeKey(), "Era esperado valores iguais, mas  2 é diferente de " + result1127 + " <((VirtualEdgeIteratorState) queryGraph.getEdgeIteratorState(iter.getEdge(), 1)).getOriginalEdgeKey()>")
chamada antiga: assertTrue(snap.isValid())
nova chamada: assertTrue(snap.isValid(), "Era esperado verdadeiro, mas " + result1128 + " <snap.isValid()> é falso")
chamada antiga: assertTrue(iter.next())
nova chamada: assertTrue(iter.next(), "Era esperado verdadeiro, mas " + result1129 + " <iter.next()> é falso")
chamada antiga: assertEquals(0, iter.getAdjNode())
nova chamada: assertEquals(0, iter.getAdjNode(), "Era esperado valores iguais, mas  0 é diferente de " + result1130 + " <iter.getAdjNode()>")
chamada antiga: assertEquals(1, iter.fetchWayGeometry(FetchMode.PILLAR_ONLY).size())
nova chamada: assertEquals(1, iter.fetchWayGeometry(FetchMode.PILLAR_ONLY).size(), "Era esperado valores iguais, mas  1 é diferente de " + result1131 + " <iter.fetchWayGeometry(FetchMode.PILLAR_ONLY).size()>")
chamada antiga: assertEquals(2, iter.fetchWayGeometry(FetchMode.BASE_AND_PILLAR).size())
nova chamada: assertEquals(2, iter.fetchWayGeometry(FetchMode.BASE_AND_PILLAR).size(), "Era esperado valores iguais, mas  2 é diferente de " + result1132 + " <iter.fetchWayGeometry(FetchMode.BASE_AND_PILLAR).size()>")
chamada antiga: assertEquals(2, iter.fetchWayGeometry(FetchMode.PILLAR_AND_ADJ).size())
nova chamada: assertEquals(2, iter.fetchWayGeometry(FetchMode.PILLAR_AND_ADJ).size(), "Era esperado valores iguais, mas  2 é diferente de " + result1133 + " <iter.fetchWayGeometry(FetchMode.PILLAR_AND_ADJ).size()>")
chamada antiga: assertEquals(3, iter.fetchWayGeometry(FetchMode.ALL).size())
nova chamada: assertEquals(3, iter.fetchWayGeometry(FetchMode.ALL).size(), "Era esperado valores iguais, mas  3 é diferente de " + result1134 + " <iter.fetchWayGeometry(FetchMode.ALL).size()>")
chamada antiga: assertEquals(Helper.createPointList(0.15, 0.15, 0.1, 0.1, 0.0, 0.0), iter.fetchWayGeometry(FetchMode.ALL))
nova chamada: assertEquals(Helper.createPointList(0.15, 0.15, 0.1, 0.1, 0.0, 0.0), iter.fetchWayGeometry(FetchMode.ALL), "Era esperado valores iguais, mas " + result1135 + " <Helper.createPointList(0.15, 0.15, 0.1, 0.1, 0.0, 0.0)> é diferente de " + result1136 + " <iter.fetchWayGeometry(FetchMode.ALL)>")
chamada antiga: assertTrue(iter.next())
nova chamada: assertTrue(iter.next(), "Era esperado verdadeiro, mas " + result1137 + " <iter.next()> é falso")
chamada antiga: assertEquals(1, iter.getAdjNode())
nova chamada: assertEquals(1, iter.getAdjNode(), "Era esperado valores iguais, mas  1 é diferente de " + result1138 + " <iter.getAdjNode()>")
chamada antiga: assertEquals(1, iter.fetchWayGeometry(FetchMode.PILLAR_ONLY).size())
nova chamada: assertEquals(1, iter.fetchWayGeometry(FetchMode.PILLAR_ONLY).size(), "Era esperado valores iguais, mas  1 é diferente de " + result1139 + " <iter.fetchWayGeometry(FetchMode.PILLAR_ONLY).size()>")
chamada antiga: assertEquals(2, iter.fetchWayGeometry(FetchMode.BASE_AND_PILLAR).size())
nova chamada: assertEquals(2, iter.fetchWayGeometry(FetchMode.BASE_AND_PILLAR).size(), "Era esperado valores iguais, mas  2 é diferente de " + result1140 + " <iter.fetchWayGeometry(FetchMode.BASE_AND_PILLAR).size()>")
chamada antiga: assertEquals(2, iter.fetchWayGeometry(FetchMode.PILLAR_AND_ADJ).size())
nova chamada: assertEquals(2, iter.fetchWayGeometry(FetchMode.PILLAR_AND_ADJ).size(), "Era esperado valores iguais, mas  2 é diferente de " + result1141 + " <iter.fetchWayGeometry(FetchMode.PILLAR_AND_ADJ).size()>")
chamada antiga: assertEquals(3, iter.fetchWayGeometry(FetchMode.ALL).size())
nova chamada: assertEquals(3, iter.fetchWayGeometry(FetchMode.ALL).size(), "Era esperado valores iguais, mas  3 é diferente de " + result1142 + " <iter.fetchWayGeometry(FetchMode.ALL).size()>")
chamada antiga: assertEquals(Helper.createPointList(0.15, 0.15, 0.2, 0.2, 0.3, 0.3), iter.fetchWayGeometry(FetchMode.ALL))
nova chamada: assertEquals(Helper.createPointList(0.15, 0.15, 0.2, 0.2, 0.3, 0.3), iter.fetchWayGeometry(FetchMode.ALL), "Era esperado valores iguais, mas " + result1143 + " <Helper.createPointList(0.15, 0.15, 0.2, 0.2, 0.3, 0.3)> é diferente de " + result1144 + " <iter.fetchWayGeometry(FetchMode.ALL)>")
chamada antiga: assertTrue(snap.isValid())
nova chamada: assertTrue(snap.isValid(), "Era esperado verdadeiro, mas " + result1145 + " <snap.isValid()> é falso")
chamada antiga: assertTrue(iter.next())
nova chamada: assertTrue(iter.next(), "Era esperado verdadeiro, mas " + result1146 + " <iter.next()> é falso")
chamada antiga: assertEquals(0, iter.getAdjNode())
nova chamada: assertEquals(0, iter.getAdjNode(), "Era esperado valores iguais, mas  0 é diferente de " + result1147 + " <iter.getAdjNode()>")
chamada antiga: assertEquals(1, iter.fetchWayGeometry(FetchMode.PILLAR_ONLY).size())
nova chamada: assertEquals(1, iter.fetchWayGeometry(FetchMode.PILLAR_ONLY).size(), "Era esperado valores iguais, mas  1 é diferente de " + result1148 + " <iter.fetchWayGeometry(FetchMode.PILLAR_ONLY).size()>")
chamada antiga: assertEquals(2, iter.fetchWayGeometry(FetchMode.BASE_AND_PILLAR).size())
nova chamada: assertEquals(2, iter.fetchWayGeometry(FetchMode.BASE_AND_PILLAR).size(), "Era esperado valores iguais, mas  2 é diferente de " + result1149 + " <iter.fetchWayGeometry(FetchMode.BASE_AND_PILLAR).size()>")
chamada antiga: assertEquals(2, iter.fetchWayGeometry(FetchMode.PILLAR_AND_ADJ).size())
nova chamada: assertEquals(2, iter.fetchWayGeometry(FetchMode.PILLAR_AND_ADJ).size(), "Era esperado valores iguais, mas  2 é diferente de " + result1150 + " <iter.fetchWayGeometry(FetchMode.PILLAR_AND_ADJ).size()>")
chamada antiga: assertEquals(3, iter.fetchWayGeometry(FetchMode.ALL).size())
nova chamada: assertEquals(3, iter.fetchWayGeometry(FetchMode.ALL).size(), "Era esperado valores iguais, mas  3 é diferente de " + result1151 + " <iter.fetchWayGeometry(FetchMode.ALL).size()>")
chamada antiga: assertEquals(Helper.createPointList(0.2, 0.2, 0.1, 0.1, 0.0, 0.0), iter.fetchWayGeometry(FetchMode.ALL))
nova chamada: assertEquals(Helper.createPointList(0.2, 0.2, 0.1, 0.1, 0.0, 0.0), iter.fetchWayGeometry(FetchMode.ALL), "Era esperado valores iguais, mas " + result1152 + " <Helper.createPointList(0.2, 0.2, 0.1, 0.1, 0.0, 0.0)> é diferente de " + result1153 + " <iter.fetchWayGeometry(FetchMode.ALL)>")
chamada antiga: assertTrue(iter.next())
nova chamada: assertTrue(iter.next(), "Era esperado verdadeiro, mas " + result1154 + " <iter.next()> é falso")
chamada antiga: assertEquals(1, iter.getAdjNode())
nova chamada: assertEquals(1, iter.getAdjNode(), "Era esperado valores iguais, mas  1 é diferente de " + result1155 + " <iter.getAdjNode()>")
chamada antiga: assertEquals(0, iter.fetchWayGeometry(FetchMode.PILLAR_ONLY).size())
nova chamada: assertEquals(0, iter.fetchWayGeometry(FetchMode.PILLAR_ONLY).size(), "Era esperado valores iguais, mas  0 é diferente de " + result1156 + " <iter.fetchWayGeometry(FetchMode.PILLAR_ONLY).size()>")
chamada antiga: assertEquals(1, iter.fetchWayGeometry(FetchMode.BASE_AND_PILLAR).size())
nova chamada: assertEquals(1, iter.fetchWayGeometry(FetchMode.BASE_AND_PILLAR).size(), "Era esperado valores iguais, mas  1 é diferente de " + result1157 + " <iter.fetchWayGeometry(FetchMode.BASE_AND_PILLAR).size()>")
chamada antiga: assertEquals(1, iter.fetchWayGeometry(FetchMode.PILLAR_AND_ADJ).size())
nova chamada: assertEquals(1, iter.fetchWayGeometry(FetchMode.PILLAR_AND_ADJ).size(), "Era esperado valores iguais, mas  1 é diferente de " + result1158 + " <iter.fetchWayGeometry(FetchMode.PILLAR_AND_ADJ).size()>")
chamada antiga: assertEquals(2, iter.fetchWayGeometry(FetchMode.ALL).size())
nova chamada: assertEquals(2, iter.fetchWayGeometry(FetchMode.ALL).size(), "Era esperado valores iguais, mas  2 é diferente de " + result1159 + " <iter.fetchWayGeometry(FetchMode.ALL).size()>")
chamada antiga: assertEquals(Helper.createPointList(0.2, 0.2, 0.5, 0.1), iter.fetchWayGeometry(FetchMode.ALL))
nova chamada: assertEquals(Helper.createPointList(0.2, 0.2, 0.5, 0.1), iter.fetchWayGeometry(FetchMode.ALL), "Era esperado valores iguais, mas " + result1160 + " <Helper.createPointList(0.2, 0.2, 0.5, 0.1)> é diferente de " + result1161 + " <iter.fetchWayGeometry(FetchMode.ALL)>")
chamada antiga: assertEquals(3, queryGraph.getNodes())
nova chamada: assertEquals(3, queryGraph.getNodes(), "Era esperado valores iguais, mas  3 é diferente de " + result1162 + " <queryGraph.getNodes()>")
chamada antiga: assertEquals(5, queryGraph.getEdges())
nova chamada: assertEquals(5, queryGraph.getEdges(), "Era esperado valores iguais, mas  5 é diferente de " + result1163 + " <queryGraph.getEdges()>")
chamada antiga: assertEquals(4, queryGraph.getVirtualEdges().size())
nova chamada: assertEquals(4, queryGraph.getVirtualEdges().size(), "Era esperado valores iguais, mas  4 é diferente de " + result1164 + " <queryGraph.getVirtualEdges().size()>")
chamada antiga: assertEquals(1, edge_0x.getEdge())
nova chamada: assertEquals(1, edge_0x.getEdge(), "Era esperado valores iguais, mas  1 é diferente de " + result1165 + " <edge_0x.getEdge()>")
chamada antiga: assertEquals(1, edge_x0.getEdge())
nova chamada: assertEquals(1, edge_x0.getEdge(), "Era esperado valores iguais, mas  1 é diferente de " + result1166 + " <edge_x0.getEdge()>")
chamada antiga: assertEquals(2, edge_x1.getEdge())
nova chamada: assertEquals(2, edge_x1.getEdge(), "Era esperado valores iguais, mas  2 é diferente de " + result1167 + " <edge_x1.getEdge()>")
chamada antiga: assertEquals(2, edge_1x.getEdge())
nova chamada: assertEquals(2, edge_1x.getEdge(), "Era esperado valores iguais, mas  2 é diferente de " + result1168 + " <edge_1x.getEdge()>")
chamada antiga: assertEquals(2, edge_0x.getEdgeKey())
nova chamada: assertEquals(2, edge_0x.getEdgeKey(), "Era esperado valores iguais, mas  2 é diferente de " + result1169 + " <edge_0x.getEdgeKey()>")
chamada antiga: assertEquals(3, edge_x0.getEdgeKey())
nova chamada: assertEquals(3, edge_x0.getEdgeKey(), "Era esperado valores iguais, mas  3 é diferente de " + result1170 + " <edge_x0.getEdgeKey()>")
chamada antiga: assertEquals(4, edge_x1.getEdgeKey())
nova chamada: assertEquals(4, edge_x1.getEdgeKey(), "Era esperado valores iguais, mas  4 é diferente de " + result1171 + " <edge_x1.getEdgeKey()>")
chamada antiga: assertEquals(5, edge_1x.getEdgeKey())
nova chamada: assertEquals(5, edge_1x.getEdgeKey(), "Era esperado valores iguais, mas  5 é diferente de " + result1172 + " <edge_1x.getEdgeKey()>")
chamada antiga: assertSame(queryGraph.getVirtualEdges().get(0), edge_0x)
nova chamada: assertSame(queryGraph.getVirtualEdges().get(0), edge_0x, "Era esperado objetos iguais, mas " + result1173 + " <queryGraph.getVirtualEdges().get(0)> é diferente de " + " edge_0x")
chamada antiga: assertSame(queryGraph.getVirtualEdges().get(1), edge_x0)
nova chamada: assertSame(queryGraph.getVirtualEdges().get(1), edge_x0, "Era esperado objetos iguais, mas " + result1174 + " <queryGraph.getVirtualEdges().get(1)> é diferente de " + " edge_x0")
chamada antiga: assertSame(queryGraph.getVirtualEdges().get(2), edge_x1)
nova chamada: assertSame(queryGraph.getVirtualEdges().get(2), edge_x1, "Era esperado objetos iguais, mas " + result1175 + " <queryGraph.getVirtualEdges().get(2)> é diferente de " + " edge_x1")
chamada antiga: assertSame(queryGraph.getVirtualEdges().get(3), edge_1x)
nova chamada: assertSame(queryGraph.getVirtualEdges().get(3), edge_1x, "Era esperado objetos iguais, mas " + result1176 + " <queryGraph.getVirtualEdges().get(3)> é diferente de " + " edge_1x")
chamada antiga: assertEquals(3, queryGraph.getNodes())
nova chamada: assertEquals(3, queryGraph.getNodes(), "Era esperado valores iguais, mas  3 é diferente de " + result1177 + " <queryGraph.getNodes()>")
chamada antiga: assertEquals(5, queryGraph.getEdges())
nova chamada: assertEquals(5, queryGraph.getEdges(), "Era esperado valores iguais, mas  5 é diferente de " + result1178 + " <queryGraph.getEdges()>")
chamada antiga: assertEquals(4, queryGraph.getVirtualEdges().size())
nova chamada: assertEquals(4, queryGraph.getVirtualEdges().size(), "Era esperado valores iguais, mas  4 é diferente de " + result1179 + " <queryGraph.getVirtualEdges().size()>")
chamada antiga: assertEquals(1, edge_0x.getEdge())
nova chamada: assertEquals(1, edge_0x.getEdge(), "Era esperado valores iguais, mas  1 é diferente de " + result1180 + " <edge_0x.getEdge()>")
chamada antiga: assertEquals(1, edge_x0.getEdge())
nova chamada: assertEquals(1, edge_x0.getEdge(), "Era esperado valores iguais, mas  1 é diferente de " + result1181 + " <edge_x0.getEdge()>")
chamada antiga: assertEquals(2, edge_x1.getEdge())
nova chamada: assertEquals(2, edge_x1.getEdge(), "Era esperado valores iguais, mas  2 é diferente de " + result1182 + " <edge_x1.getEdge()>")
chamada antiga: assertEquals(2, edge_1x.getEdge())
nova chamada: assertEquals(2, edge_1x.getEdge(), "Era esperado valores iguais, mas  2 é diferente de " + result1183 + " <edge_1x.getEdge()>")
chamada antiga: assertEquals(2, edge_0x.getEdgeKey())
nova chamada: assertEquals(2, edge_0x.getEdgeKey(), "Era esperado valores iguais, mas  2 é diferente de " + result1184 + " <edge_0x.getEdgeKey()>")
chamada antiga: assertEquals(3, edge_x0.getEdgeKey())
nova chamada: assertEquals(3, edge_x0.getEdgeKey(), "Era esperado valores iguais, mas  3 é diferente de " + result1185 + " <edge_x0.getEdgeKey()>")
chamada antiga: assertEquals(4, edge_x1.getEdgeKey())
nova chamada: assertEquals(4, edge_x1.getEdgeKey(), "Era esperado valores iguais, mas  4 é diferente de " + result1186 + " <edge_x1.getEdgeKey()>")
chamada antiga: assertEquals(5, edge_1x.getEdgeKey())
nova chamada: assertEquals(5, edge_1x.getEdgeKey(), "Era esperado valores iguais, mas  5 é diferente de " + result1187 + " <edge_1x.getEdgeKey()>")
chamada antiga: assertSame(queryGraph.getVirtualEdges().get(0), edge_0x)
nova chamada: assertSame(queryGraph.getVirtualEdges().get(0), edge_0x, "Era esperado objetos iguais, mas " + result1188 + " <queryGraph.getVirtualEdges().get(0)> é diferente de " + " edge_0x")
chamada antiga: assertSame(queryGraph.getVirtualEdges().get(1), edge_x0)
nova chamada: assertSame(queryGraph.getVirtualEdges().get(1), edge_x0, "Era esperado objetos iguais, mas " + result1189 + " <queryGraph.getVirtualEdges().get(1)> é diferente de " + " edge_x0")
chamada antiga: assertSame(queryGraph.getVirtualEdges().get(2), edge_x1)
nova chamada: assertSame(queryGraph.getVirtualEdges().get(2), edge_x1, "Era esperado objetos iguais, mas " + result1190 + " <queryGraph.getVirtualEdges().get(2)> é diferente de " + " edge_x1")
chamada antiga: assertSame(queryGraph.getVirtualEdges().get(3), edge_1x)
nova chamada: assertSame(queryGraph.getVirtualEdges().get(3), edge_1x, "Era esperado objetos iguais, mas " + result1191 + " <queryGraph.getVirtualEdges().get(3)> é diferente de " + " edge_1x")
chamada antiga: assertEquals(base, edge.getBaseNode())
nova chamada: assertEquals(base, edge.getBaseNode(), "Era esperado valores iguais, mas  base é diferente de " + result1192 + " <edge.getBaseNode()>")
chamada antiga: assertEquals(adj, edge.getAdjNode())
nova chamada: assertEquals(adj, edge.getAdjNode(), "Era esperado valores iguais, mas  adj é diferente de " + result1193 + " <edge.getAdjNode()>")
chamada antiga: assertEquals(IntArrayList.from(0, 1, 5, 2, 3), p1.calcNodes())
nova chamada: assertEquals(IntArrayList.from(0, 1, 5, 2, 3), p1.calcNodes(), "Era esperado valores iguais, mas " + result1194 + " <IntArrayList.from(0, 1, 5, 2, 3)> é diferente de " + result1195 + " <p1.calcNodes()>")
chamada antiga: assertEquals(IntArrayList.from(0, 4, 6, 7), p1.calcNodes())
nova chamada: assertEquals(IntArrayList.from(0, 4, 6, 7), p1.calcNodes(), "Era esperado valores iguais, mas " + result1196 + " <IntArrayList.from(0, 4, 6, 7)> é diferente de " + result1197 + " <p1.calcNodes()>")
chamada antiga: assertEquals(IntArrayList.from(0, 4, 6, 7), p2.calcNodes())
nova chamada: assertEquals(IntArrayList.from(0, 4, 6, 7), p2.calcNodes(), "Era esperado valores iguais, mas " + result1198 + " <IntArrayList.from(0, 4, 6, 7)> é diferente de " + result1199 + " <p2.calcNodes()>")
chamada antiga: assertEquals(IntArrayList.from(0, 4, 5, 7), p4.calcNodes())
nova chamada: assertEquals(IntArrayList.from(0, 4, 5, 7), p4.calcNodes(), "Era esperado valores iguais, mas " + result1200 + " <IntArrayList.from(0, 4, 5, 7)> é diferente de " + result1201 + " <p4.calcNodes()>")
chamada antiga: assertEquals(7, algo.getVisitedNodes())
nova chamada: assertEquals(7, algo.getVisitedNodes(), "Era esperado valores iguais, mas  7 é diferente de " + result1202 + " <algo.getVisitedNodes()>")
chamada antiga: assertEquals(11, algoNoSod.getVisitedNodes())
nova chamada: assertEquals(11, algoNoSod.getVisitedNodes(), "Era esperado valores iguais, mas  11 é diferente de " + result1203 + " <algoNoSod.getVisitedNodes()>")
chamada antiga: assertTrue(instance.isEnabled())
nova chamada: assertTrue(instance.isEnabled(), "Era esperado verdadeiro, mas " + result1204 + " <instance.isEnabled()> é falso")
chamada antiga: assertTrue(handler.isEnabled())
nova chamada: assertTrue(handler.isEnabled(), "Era esperado verdadeiro, mas " + result1205 + " <handler.isEnabled()> é falso")
chamada antiga: assertEquals(Integer.MAX_VALUE, res)
nova chamada: assertEquals(Integer.MAX_VALUE, res, "Era esperado valores iguais, mas  Integer.MAX_VALUE é diferente de " + " res")
chamada antiga: assertEquals(Integer.MAX_VALUE, res)
nova chamada: assertEquals(Integer.MAX_VALUE, res, "Era esperado valores iguais, mas  Integer.MAX_VALUE é diferente de " + " res")
chamada antiga: assertEquals(65536 - 2, lms.getFromWeight(0, 0))
nova chamada: assertEquals(65536 - 2, lms.getFromWeight(0, 0), "Era esperado valores iguais, mas  65536 - 2 é diferente de " + result1206 + " <lms.getFromWeight(0, 0)>")
chamada antiga: assertEquals(65534, lms.getFromWeight(0, 0))
nova chamada: assertEquals(65534, lms.getFromWeight(0, 0), "Era esperado valores iguais, mas  65534 é diferente de " + result1207 + " <lms.getFromWeight(0, 0)>")
chamada antiga: assertEquals(65534, lms.getFromWeight(0, 0))
nova chamada: assertEquals(65534, lms.getFromWeight(0, 0), "Era esperado valores iguais, mas  65534 é diferente de " + result1208 + " <lms.getFromWeight(0, 0)>")
chamada antiga: assertTrue(lms.isInfinity(0))
nova chamada: assertTrue(lms.isInfinity(0), "Era esperado verdadeiro, mas " + result1209 + " <lms.isInfinity(0)> é falso")
chamada antiga: assertEquals(3, storage.getSubnetworksWithLandmarks())
nova chamada: assertEquals(3, storage.getSubnetworksWithLandmarks(), "Era esperado valores iguais, mas  3 é diferente de " + result1210 + " <storage.getSubnetworksWithLandmarks()>")
chamada antiga: assertEquals("[2, 0]", Arrays.toString(storage.getLandmarks(1)))
nova chamada: assertEquals("[2, 0]", Arrays.toString(storage.getLandmarks(1)), "Era esperado valores iguais, mas  '[2, 0]' é diferente de " + result1211 + " <Arrays.toString(storage.getLandmarks(1))>")
chamada antiga: assertEquals("[5, 4]", Arrays.toString(storage.getLandmarks(2)))
nova chamada: assertEquals("[5, 4]", Arrays.toString(storage.getLandmarks(2)), "Era esperado valores iguais, mas  '[5, 4]' é diferente de " + result1212 + " <Arrays.toString(storage.getLandmarks(2))>")
chamada antiga: assertEquals(2, storage.getSubnetworksWithLandmarks())
nova chamada: assertEquals(2, storage.getSubnetworksWithLandmarks(), "Era esperado valores iguais, mas  2 é diferente de " + result1213 + " <storage.getSubnetworksWithLandmarks()>")
chamada antiga: assertEquals("[4, 0]", Arrays.toString(storage.getLandmarks(1)))
nova chamada: assertEquals("[4, 0]", Arrays.toString(storage.getLandmarks(1)), "Era esperado valores iguais, mas  '[4, 0]' é diferente de " + result1214 + " <Arrays.toString(storage.getLandmarks(1))>")
chamada antiga: assertEquals(3, storage.getSubnetworksWithLandmarks())
nova chamada: assertEquals(3, storage.getSubnetworksWithLandmarks(), "Era esperado valores iguais, mas  3 é diferente de " + result1215 + " <storage.getSubnetworksWithLandmarks()>")
chamada antiga: assertEquals("[1, 0]", Arrays.toString(storage.getLandmarks(1)))
nova chamada: assertEquals("[1, 0]", Arrays.toString(storage.getLandmarks(1)), "Era esperado valores iguais, mas  '[1, 0]' é diferente de " + result1216 + " <Arrays.toString(storage.getLandmarks(1))>")
chamada antiga: assertEquals("[5, 4]", Arrays.toString(storage.getLandmarks(2)))
nova chamada: assertEquals("[5, 4]", Arrays.toString(storage.getLandmarks(2)), "Era esperado valores iguais, mas  '[5, 4]' é diferente de " + result1217 + " <Arrays.toString(storage.getLandmarks(2))>")
chamada antiga: assertEquals(2, storage.getSubnetworksWithLandmarks())
nova chamada: assertEquals(2, storage.getSubnetworksWithLandmarks(), "Era esperado valores iguais, mas  2 é diferente de " + result1218 + " <storage.getSubnetworksWithLandmarks()>")
chamada antiga: assertEquals("[2, 1]", Arrays.toString(storage.getLandmarks(1)))
nova chamada: assertEquals("[2, 1]", Arrays.toString(storage.getLandmarks(1)), "Era esperado valores iguais, mas  '[2, 1]' é diferente de " + result1219 + " <Arrays.toString(storage.getLandmarks(1))>")
chamada antiga: assertEquals(3, storage.getSubnetworksWithLandmarks())
nova chamada: assertEquals(3, storage.getSubnetworksWithLandmarks(), "Era esperado valores iguais, mas  3 é diferente de " + result1220 + " <storage.getSubnetworksWithLandmarks()>")
chamada antiga: assertEquals("[1, 0]", Arrays.toString(storage.getLandmarks(1)))
nova chamada: assertEquals("[1, 0]", Arrays.toString(storage.getLandmarks(1)), "Era esperado valores iguais, mas  '[1, 0]' é diferente de " + result1221 + " <Arrays.toString(storage.getLandmarks(1))>")
chamada antiga: assertEquals("[3, 2]", Arrays.toString(storage.getLandmarks(2)))
nova chamada: assertEquals("[3, 2]", Arrays.toString(storage.getLandmarks(2)), "Era esperado valores iguais, mas  '[3, 2]' é diferente de " + result1222 + " <Arrays.toString(storage.getLandmarks(2))>")
chamada antiga: assertEquals(3, storage.getSubnetworksWithLandmarks())
nova chamada: assertEquals(3, storage.getSubnetworksWithLandmarks(), "Era esperado valores iguais, mas  3 é diferente de " + result1223 + " <storage.getSubnetworksWithLandmarks()>")
chamada antiga: assertEquals(refPath.calcNodes(), path.calcNodes())
nova chamada: assertEquals(refPath.calcNodes(), path.calcNodes(), "Era esperado valores iguais, mas " + result1224 + " <refPath.calcNodes()> é diferente de " + result1225 + " <path.calcNodes()>")
chamada antiga: assertEquals(refPath.calcNodes(), path.calcNodes())
nova chamada: assertEquals(refPath.calcNodes(), path.calcNodes(), "Era esperado valores iguais, mas " + result1226 + " <refPath.calcNodes()> é diferente de " + result1227 + " <path.calcNodes()>")
chamada antiga: assertEquals("[0, 14, 70, 182, 224]", Arrays.toString(intList))
nova chamada: assertEquals("[0, 14, 70, 182, 224]", Arrays.toString(intList), "Era esperado valores iguais, mas  '[0, 14, 70, 182, 224]' é diferente de " + result1228 + " <Arrays.toString(intList)>")
chamada antiga: assertEquals(2, store.getSubnetworksWithLandmarks())
nova chamada: assertEquals(2, store.getSubnetworksWithLandmarks(), "Era esperado valores iguais, mas  2 é diferente de " + result1229 + " <store.getSubnetworksWithLandmarks()>")
chamada antiga: assertEquals(0, store.getFromWeight(0, 224))
nova chamada: assertEquals(0, store.getFromWeight(0, 224), "Era esperado valores iguais, mas  0 é diferente de " + result1230 + " <store.getFromWeight(0, 224)>")
chamada antiga: assertEquals(4671, Math.round(store.getFromWeight(0, 47) * factor))
nova chamada: assertEquals(4671, Math.round(store.getFromWeight(0, 47) * factor), "Era esperado valores iguais, mas  4671 é diferente de " + result1231 + " <Math.round(store.getFromWeight(0, 47) * factor)>")
chamada antiga: assertEquals(3640, Math.round(store.getFromWeight(0, 52) * factor))
nova chamada: assertEquals(3640, Math.round(store.getFromWeight(0, 52) * factor), "Era esperado valores iguais, mas  3640 é diferente de " + result1232 + " <Math.round(store.getFromWeight(0, 52) * factor)>")
chamada antiga: assertEquals(5525, Math.round(weight1_224 * factor))
nova chamada: assertEquals(5525, Math.round(weight1_224 * factor), "Era esperado valores iguais, mas  5525 é diferente de " + result1233 + " <Math.round(weight1_224 * factor)>")
chamada antiga: assertEquals(921, Math.round(weight1_47 * factor))
nova chamada: assertEquals(921, Math.round(weight1_47 * factor), "Era esperado valores iguais, mas  921 é diferente de " + result1234 + " <Math.round(weight1_47 * factor)>")
chamada antiga: assertEquals(weight1_224, store.getToWeight(1, 224))
nova chamada: assertEquals(weight1_224, store.getToWeight(1, 224), "Era esperado valores iguais, mas  weight1_224 é diferente de " + result1235 + " <store.getToWeight(1, 224)>")
chamada antiga: assertEquals(weight1_47, store.getToWeight(1, 47))
nova chamada: assertEquals(weight1_47, store.getToWeight(1, 47), "Era esperado valores iguais, mas  weight1_47 é diferente de " + result1236 + " <store.getToWeight(1, 47)>")
chamada antiga: assertEquals(Arrays.asList(224, 70), list)
nova chamada: assertEquals(Arrays.asList(224, 70), list, "Era esperado valores iguais, mas " + result1237 + " <Arrays.asList(224, 70)> é diferente de " + " list")
chamada antiga: assertEquals(expectedPath.calcNodes(), path.calcNodes())
nova chamada: assertEquals(expectedPath.calcNodes(), path.calcNodes(), "Era esperado valores iguais, mas " + result1238 + " <expectedPath.calcNodes()> é diferente de " + result1239 + " <path.calcNodes()>")
chamada antiga: assertEquals(expectedAlgo.getVisitedNodes() - 72, oneDirAlgoWithLandmarks.getVisitedNodes())
nova chamada: assertEquals(expectedAlgo.getVisitedNodes() - 72, oneDirAlgoWithLandmarks.getVisitedNodes(), "Era esperado valores iguais, mas  expectedAlgo.getVisitedNodes() - 72 é diferente de " + result1240 + " <oneDirAlgoWithLandmarks.getVisitedNodes()>")
chamada antiga: assertEquals(expectedPath.calcNodes(), path.calcNodes())
nova chamada: assertEquals(expectedPath.calcNodes(), path.calcNodes(), "Era esperado valores iguais, mas " + result1241 + " <expectedPath.calcNodes()> é diferente de " + result1242 + " <path.calcNodes()>")
chamada antiga: assertEquals(expectedAlgo.getVisitedNodes() - 99, biDirAlgoWithLandmarks.getVisitedNodes())
nova chamada: assertEquals(expectedAlgo.getVisitedNodes() - 99, biDirAlgoWithLandmarks.getVisitedNodes(), "Era esperado valores iguais, mas  expectedAlgo.getVisitedNodes() - 99 é diferente de " + result1243 + " <biDirAlgoWithLandmarks.getVisitedNodes()>")
chamada antiga: assertEquals(expectedPath.calcNodes(), path.calcNodes())
nova chamada: assertEquals(expectedPath.calcNodes(), path.calcNodes(), "Era esperado valores iguais, mas " + result1244 + " <expectedPath.calcNodes()> é diferente de " + result1245 + " <path.calcNodes()>")
chamada antiga: assertEquals(expectedAlgo.getVisitedNodes() - 72, qGraphOneDirAlgo.getVisitedNodes())
nova chamada: assertEquals(expectedAlgo.getVisitedNodes() - 72, qGraphOneDirAlgo.getVisitedNodes(), "Era esperado valores iguais, mas  expectedAlgo.getVisitedNodes() - 72 é diferente de " + result1246 + " <qGraphOneDirAlgo.getVisitedNodes()>")
chamada antiga: assertTrue(plm.getLandmarkStorage().isInitialized())
nova chamada: assertTrue(plm.getLandmarkStorage().isInitialized(), "Era esperado verdadeiro, mas " + result1247 + " <plm.getLandmarkStorage().isInitialized()> é falso")
chamada antiga: assertEquals(Arrays.toString(new int[] { 2, 0 }), Arrays.toString(plm.getLandmarkStorage().getLandmarks(1)))
nova chamada: assertEquals(Arrays.toString(new int[] { 2, 0 }), Arrays.toString(plm.getLandmarkStorage().getLandmarks(1)), "Era esperado valores iguais, mas " + result1248 + " <Arrays.toString(new int[] { 2, 0 })> é diferente de " + result1249 + " <Arrays.toString(plm.getLandmarkStorage().getLandmarks(1))>")
chamada antiga: assertEquals(4800, Math.round(plm.getLandmarkStorage().getFromWeight(0, 1) * expectedFactor))
nova chamada: assertEquals(4800, Math.round(plm.getLandmarkStorage().getFromWeight(0, 1) * expectedFactor), "Era esperado valores iguais, mas  4800 é diferente de " + result1250 + " <Math.round(plm.getLandmarkStorage().getFromWeight(0, 1) * expectedFactor)>")
chamada antiga: assertTrue(plm.loadExisting())
nova chamada: assertTrue(plm.loadExisting(), "Era esperado verdadeiro, mas " + result1251 + " <plm.loadExisting()> é falso")
chamada antiga: assertEquals(Arrays.toString(new int[] { 2, 0 }), Arrays.toString(plm.getLandmarkStorage().getLandmarks(1)))
nova chamada: assertEquals(Arrays.toString(new int[] { 2, 0 }), Arrays.toString(plm.getLandmarkStorage().getLandmarks(1)), "Era esperado valores iguais, mas " + result1252 + " <Arrays.toString(new int[] { 2, 0 })> é diferente de " + result1253 + " <Arrays.toString(plm.getLandmarkStorage().getLandmarks(1))>")
chamada antiga: assertEquals(4800, Math.round(plm.getLandmarkStorage().getFromWeight(0, 1) * expectedFactor))
nova chamada: assertEquals(4800, Math.round(plm.getLandmarkStorage().getFromWeight(0, 1) * expectedFactor), "Era esperado valores iguais, mas  4800 é diferente de " + result1254 + " <Math.round(plm.getLandmarkStorage().getFromWeight(0, 1) * expectedFactor)>")
chamada antiga: assertEquals(6, snap.getClosestNode())
nova chamada: assertEquals(6, snap.getClosestNode(), "Era esperado valores iguais, mas  6 é diferente de " + result1255 + " <snap.getClosestNode()>")
chamada antiga: assertEquals(new HashSet<>(Arrays.asList(0, 2)), GHUtility.getNeighbors(graph.createEdgeExplorer().setBaseNode(1)))
nova chamada: assertEquals(new HashSet<>(Arrays.asList(0, 2)), GHUtility.getNeighbors(graph.createEdgeExplorer().setBaseNode(1)), "Era esperado valores iguais, mas  new HashSet(Arrays.asList(0, 2)) é diferente de " + result1256 + " <GHUtility.getNeighbors(graph.createEdgeExplorer().setBaseNode(1))>")
chamada antiga: assertEquals(new HashSet<>(Arrays.asList(6, 2)), GHUtility.getNeighbors(queryGraph.createEdgeExplorer().setBaseNode(1)))
nova chamada: assertEquals(new HashSet<>(Arrays.asList(6, 2)), GHUtility.getNeighbors(queryGraph.createEdgeExplorer().setBaseNode(1)), "Era esperado valores iguais, mas  new HashSet(Arrays.asList(6, 2)) é diferente de " + result1257 + " <GHUtility.getNeighbors(queryGraph.createEdgeExplorer().setBaseNode(1))>")
chamada antiga: assertEquals(nodes(6, 1, 2, 3, 4, 5, 0), path.calcNodes())
nova chamada: assertEquals(nodes(6, 1, 2, 3, 4, 5, 0), path.calcNodes(), "Era esperado valores iguais, mas " + result1258 + " <nodes(6, 1, 2, 3, 4, 5, 0)> é diferente de " + result1259 + " <path.calcNodes()>")
chamada antiga: assertEquals(0, path.getTime())
nova chamada: assertEquals(0, path.getTime(), "Era esperado valores iguais, mas  0 é diferente de " + result1260 + " <path.getTime()>")
chamada antiga: assertEquals(nodes(), path.calcNodes())
nova chamada: assertEquals(nodes(), path.calcNodes(), "Era esperado valores iguais, mas " + result1261 + " <nodes()> é diferente de " + result1262 + " <path.calcNodes()>")
chamada antiga: assertEquals(4, components.size())
nova chamada: assertEquals(4, components.size(), "Era esperado valores iguais, mas  4 é diferente de " + result1263 + " <components.size()>")
chamada antiga: assertEquals(IntArrayList.from(13, 5, 3, 7, 0), components.get(0))
nova chamada: assertEquals(IntArrayList.from(13, 5, 3, 7, 0), components.get(0), "Era esperado valores iguais, mas " + result1264 + " <IntArrayList.from(13, 5, 3, 7, 0)> é diferente de " + result1265 + " <components.get(0)>")
chamada antiga: assertEquals(IntArrayList.from(2, 4, 12, 11, 8, 1), components.get(1))
nova chamada: assertEquals(IntArrayList.from(2, 4, 12, 11, 8, 1), components.get(1), "Era esperado valores iguais, mas " + result1266 + " <IntArrayList.from(2, 4, 12, 11, 8, 1)> é diferente de " + result1267 + " <components.get(1)>")
chamada antiga: assertEquals(IntArrayList.from(10, 14, 6), components.get(2))
nova chamada: assertEquals(IntArrayList.from(10, 14, 6), components.get(2), "Era esperado valores iguais, mas " + result1268 + " <IntArrayList.from(10, 14, 6)> é diferente de " + result1269 + " <components.get(2)>")
chamada antiga: assertEquals(IntArrayList.from(15, 9), components.get(3))
nova chamada: assertEquals(IntArrayList.from(15, 9), components.get(3), "Era esperado valores iguais, mas " + result1270 + " <IntArrayList.from(15, 9)> é diferente de " + result1271 + " <components.get(3)>")
chamada antiga: assertEquals(16, scc.getNodes())
nova chamada: assertEquals(16, scc.getNodes(), "Era esperado valores iguais, mas  16 é diferente de " + result1272 + " <scc.getNodes()>")
chamada antiga: assertEquals(0, scc.getSingleNodeComponents().cardinality())
nova chamada: assertEquals(0, scc.getSingleNodeComponents().cardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result1273 + " <scc.getSingleNodeComponents().cardinality()>")
chamada antiga: assertEquals(components.get(1), scc.getBiggestComponent())
nova chamada: assertEquals(components.get(1), scc.getBiggestComponent(), "Era esperado valores iguais, mas " + result1274 + " <components.get(1)> é diferente de " + result1275 + " <scc.getBiggestComponent()>")
chamada antiga: assertEquals(3, scc.getTotalComponents())
nova chamada: assertEquals(3, scc.getTotalComponents(), "Era esperado valores iguais, mas  3 é diferente de " + result1276 + " <scc.getTotalComponents()>")
chamada antiga: assertEquals(2, components.size())
nova chamada: assertEquals(2, components.size(), "Era esperado valores iguais, mas  2 é diferente de " + result1277 + " <components.size()>")
chamada antiga: assertEquals(IntArrayList.from(2, 1, 0), components.get(1))
nova chamada: assertEquals(IntArrayList.from(2, 1, 0), components.get(1), "Era esperado valores iguais, mas " + result1278 + " <IntArrayList.from(2, 1, 0)> é diferente de " + result1279 + " <components.get(1)>")
chamada antiga: assertEquals(IntArrayList.from(7, 6, 5, 4), components.get(0))
nova chamada: assertEquals(IntArrayList.from(7, 6, 5, 4), components.get(0), "Era esperado valores iguais, mas " + result1280 + " <IntArrayList.from(7, 6, 5, 4)> é diferente de " + result1281 + " <components.get(0)>")
chamada antiga: assertEquals(1, scc.getSingleNodeComponents().cardinality())
nova chamada: assertEquals(1, scc.getSingleNodeComponents().cardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result1282 + " <scc.getSingleNodeComponents().cardinality()>")
chamada antiga: assertTrue(scc.getSingleNodeComponents().get(3))
nova chamada: assertTrue(scc.getSingleNodeComponents().get(3), "Era esperado verdadeiro, mas " + result1283 + " <scc.getSingleNodeComponents().get(3)> é falso")
chamada antiga: assertEquals(8, scc.getNodes())
nova chamada: assertEquals(8, scc.getNodes(), "Era esperado valores iguais, mas  8 é diferente de " + result1284 + " <scc.getNodes()>")
chamada antiga: assertEquals(components.get(0), scc.getBiggestComponent())
nova chamada: assertEquals(components.get(0), scc.getBiggestComponent(), "Era esperado valores iguais, mas " + result1285 + " <components.get(0)> é diferente de " + result1286 + " <scc.getBiggestComponent()>")
chamada antiga: assertTrue(scc.getSingleNodeComponents().isEmpty())
nova chamada: assertTrue(scc.getSingleNodeComponents().isEmpty(), "Era esperado verdadeiro, mas " + result1287 + " <scc.getSingleNodeComponents().isEmpty()> é falso")
chamada antiga: assertEquals(3, scc.getTotalComponents())
nova chamada: assertEquals(3, scc.getTotalComponents(), "Era esperado valores iguais, mas  3 é diferente de " + result1288 + " <scc.getTotalComponents()>")
chamada antiga: assertEquals(2, scc.getComponents().size())
nova chamada: assertEquals(2, scc.getComponents().size(), "Era esperado valores iguais, mas  2 é diferente de " + result1289 + " <scc.getComponents().size()>")
chamada antiga: assertEquals(8, scc.getNodes())
nova chamada: assertEquals(8, scc.getNodes(), "Era esperado valores iguais, mas  8 é diferente de " + result1290 + " <scc.getNodes()>")
chamada antiga: assertEquals(2, scc.getTotalComponents())
nova chamada: assertEquals(2, scc.getTotalComponents(), "Era esperado valores iguais, mas  2 é diferente de " + result1291 + " <scc.getTotalComponents()>")
chamada antiga: assertTrue(scc.getSingleNodeComponents().isEmpty())
nova chamada: assertTrue(scc.getSingleNodeComponents().isEmpty(), "Era esperado verdadeiro, mas " + result1292 + " <scc.getSingleNodeComponents().isEmpty()> é falso")
chamada antiga: assertEquals(17, scc.getNodes())
nova chamada: assertEquals(17, scc.getNodes(), "Era esperado valores iguais, mas  17 é diferente de " + result1293 + " <scc.getNodes()>")
chamada antiga: assertEquals(scc.getComponents().get(1), scc.getBiggestComponent())
nova chamada: assertEquals(scc.getComponents().get(1), scc.getBiggestComponent(), "Era esperado valores iguais, mas " + result1294 + " <scc.getComponents().get(1)> é diferente de " + result1295 + " <scc.getBiggestComponent()>")
chamada antiga: assertEquals(2, scc.getComponents().size())
nova chamada: assertEquals(2, scc.getComponents().size(), "Era esperado valores iguais, mas  2 é diferente de " + result1296 + " <scc.getComponents().size()>")
chamada antiga: assertEquals(IntArrayList.from(14, 16, 15, 13, 12, 5), scc.getComponents().get(0))
nova chamada: assertEquals(IntArrayList.from(14, 16, 15, 13, 12, 5), scc.getComponents().get(0), "Era esperado valores iguais, mas " + result1297 + " <IntArrayList.from(14, 16, 15, 13, 12, 5)> é diferente de " + result1298 + " <scc.getComponents().get(0)>")
chamada antiga: assertEquals(IntArrayList.from(8, 7, 6, 3, 4, 9, 10, 11, 2, 1, 0), scc.getComponents().get(1))
nova chamada: assertEquals(IntArrayList.from(8, 7, 6, 3, 4, 9, 10, 11, 2, 1, 0), scc.getComponents().get(1), "Era esperado valores iguais, mas " + result1299 + " <IntArrayList.from(8, 7, 6, 3, 4, 9, 10, 11, 2, 1, 0)> é diferente de " + result1300 + " <scc.getComponents().get(1)>")
chamada antiga: assertEquals(88, storage.getSubnetwork(1))
nova chamada: assertEquals(88, storage.getSubnetwork(1), "Era esperado valores iguais, mas  88 é diferente de " + result1301 + " <storage.getSubnetwork(1)>")
chamada antiga: assertEquals(0, storage.getSubnetwork(0))
nova chamada: assertEquals(0, storage.getSubnetwork(0), "Era esperado valores iguais, mas  0 é diferente de " + result1302 + " <storage.getSubnetwork(0)>")
chamada antiga: assertEquals(2, result.getEdgeKeys())
nova chamada: assertEquals(2, result.getEdgeKeys(), "Era esperado valores iguais, mas  2 é diferente de " + result1303 + " <result.getEdgeKeys()>")
chamada antiga: assertEquals(1, result.getTotalComponents())
nova chamada: assertEquals(1, result.getTotalComponents(), "Era esperado valores iguais, mas  1 é diferente de " + result1304 + " <result.getTotalComponents()>")
chamada antiga: assertEquals(1, result.getComponents().size())
nova chamada: assertEquals(1, result.getComponents().size(), "Era esperado valores iguais, mas  1 é diferente de " + result1305 + " <result.getComponents().size()>")
chamada antiga: assertTrue(result.getSingleEdgeComponents().isEmpty())
nova chamada: assertTrue(result.getSingleEdgeComponents().isEmpty(), "Era esperado verdadeiro, mas " + result1306 + " <result.getSingleEdgeComponents().isEmpty()> é falso")
chamada antiga: assertEquals(result.getComponents().get(0), result.getBiggestComponent())
nova chamada: assertEquals(result.getComponents().get(0), result.getBiggestComponent(), "Era esperado valores iguais, mas " + result1307 + " <result.getComponents().get(0)> é diferente de " + result1308 + " <result.getBiggestComponent()>")
chamada antiga: assertEquals(IntArrayList.from(1, 0), result.getComponents().get(0))
nova chamada: assertEquals(IntArrayList.from(1, 0), result.getComponents().get(0), "Era esperado valores iguais, mas " + result1309 + " <IntArrayList.from(1, 0)> é diferente de " + result1310 + " <result.getComponents().get(0)>")
chamada antiga: assertEquals(4, result.getEdgeKeys())
nova chamada: assertEquals(4, result.getEdgeKeys(), "Era esperado valores iguais, mas  4 é diferente de " + result1311 + " <result.getEdgeKeys()>")
chamada antiga: assertEquals(1, result.getTotalComponents())
nova chamada: assertEquals(1, result.getTotalComponents(), "Era esperado valores iguais, mas  1 é diferente de " + result1312 + " <result.getTotalComponents()>")
chamada antiga: assertEquals(1, result.getComponents().size())
nova chamada: assertEquals(1, result.getComponents().size(), "Era esperado valores iguais, mas  1 é diferente de " + result1313 + " <result.getComponents().size()>")
chamada antiga: assertTrue(result.getSingleEdgeComponents().isEmpty())
nova chamada: assertTrue(result.getSingleEdgeComponents().isEmpty(), "Era esperado verdadeiro, mas " + result1314 + " <result.getSingleEdgeComponents().isEmpty()> é falso")
chamada antiga: assertEquals(result.getComponents().get(0), result.getBiggestComponent())
nova chamada: assertEquals(result.getComponents().get(0), result.getBiggestComponent(), "Era esperado valores iguais, mas " + result1315 + " <result.getComponents().get(0)> é diferente de " + result1316 + " <result.getBiggestComponent()>")
chamada antiga: assertEquals(IntArrayList.from(1, 3, 2, 0), result.getComponents().get(0))
nova chamada: assertEquals(IntArrayList.from(1, 3, 2, 0), result.getComponents().get(0), "Era esperado valores iguais, mas " + result1317 + " <IntArrayList.from(1, 3, 2, 0)> é diferente de " + result1318 + " <result.getComponents().get(0)>")
chamada antiga: assertEquals(4, result.getEdgeKeys())
nova chamada: assertEquals(4, result.getEdgeKeys(), "Era esperado valores iguais, mas  4 é diferente de " + result1319 + " <result.getEdgeKeys()>")
chamada antiga: assertEquals(4, result.getTotalComponents())
nova chamada: assertEquals(4, result.getTotalComponents(), "Era esperado valores iguais, mas  4 é diferente de " + result1320 + " <result.getTotalComponents()>")
chamada antiga: assertEquals(0, result.getComponents().size())
nova chamada: assertEquals(0, result.getComponents().size(), "Era esperado valores iguais, mas  0 é diferente de " + result1321 + " <result.getComponents().size()>")
chamada antiga: assertEquals(4, result.getSingleEdgeComponents().cardinality())
nova chamada: assertEquals(4, result.getSingleEdgeComponents().cardinality(), "Era esperado valores iguais, mas  4 é diferente de " + result1322 + " <result.getSingleEdgeComponents().cardinality()>")
chamada antiga: assertEquals(IntArrayList.from(), result.getBiggestComponent())
nova chamada: assertEquals(IntArrayList.from(), result.getBiggestComponent(), "Era esperado valores iguais, mas " + result1323 + " <IntArrayList.from()> é diferente de " + result1324 + " <result.getBiggestComponent()>")
chamada antiga: assertEquals(6, result.getEdgeKeys())
nova chamada: assertEquals(6, result.getEdgeKeys(), "Era esperado valores iguais, mas  6 é diferente de " + result1325 + " <result.getEdgeKeys()>")
chamada antiga: assertEquals(5, result.getTotalComponents())
nova chamada: assertEquals(5, result.getTotalComponents(), "Era esperado valores iguais, mas  5 é diferente de " + result1326 + " <result.getTotalComponents()>")
chamada antiga: assertEquals(1, result.getComponents().size())
nova chamada: assertEquals(1, result.getComponents().size(), "Era esperado valores iguais, mas  1 é diferente de " + result1327 + " <result.getComponents().size()>")
chamada antiga: assertEquals(4, result.getSingleEdgeComponents().cardinality())
nova chamada: assertEquals(4, result.getSingleEdgeComponents().cardinality(), "Era esperado valores iguais, mas  4 é diferente de " + result1328 + " <result.getSingleEdgeComponents().cardinality()>")
chamada antiga: assertEquals(result.getComponents().get(0), result.getBiggestComponent())
nova chamada: assertEquals(result.getComponents().get(0), result.getBiggestComponent(), "Era esperado valores iguais, mas " + result1329 + " <result.getComponents().get(0)> é diferente de " + result1330 + " <result.getBiggestComponent()>")
chamada antiga: assertEquals(16, result.getEdgeKeys())
nova chamada: assertEquals(16, result.getEdgeKeys(), "Era esperado valores iguais, mas  16 é diferente de " + result1331 + " <result.getEdgeKeys()>")
chamada antiga: assertEquals(7, result.getTotalComponents())
nova chamada: assertEquals(7, result.getTotalComponents(), "Era esperado valores iguais, mas  7 é diferente de " + result1332 + " <result.getTotalComponents()>")
chamada antiga: assertEquals(3, result.getComponents().size())
nova chamada: assertEquals(3, result.getComponents().size(), "Era esperado valores iguais, mas  3 é diferente de " + result1333 + " <result.getComponents().size()>")
chamada antiga: assertEquals(4, result.getSingleEdgeComponents().cardinality())
nova chamada: assertEquals(4, result.getSingleEdgeComponents().cardinality(), "Era esperado valores iguais, mas  4 é diferente de " + result1334 + " <result.getSingleEdgeComponents().cardinality()>")
chamada antiga: assertEquals(result.getComponents().get(1), result.getBiggestComponent())
nova chamada: assertEquals(result.getComponents().get(1), result.getBiggestComponent(), "Era esperado valores iguais, mas " + result1335 + " <result.getComponents().get(1)> é diferente de " + result1336 + " <result.getBiggestComponent()>")
chamada antiga: assertEquals(16, result.getEdgeKeys())
nova chamada: assertEquals(16, result.getEdgeKeys(), "Era esperado valores iguais, mas  16 é diferente de " + result1337 + " <result.getEdgeKeys()>")
chamada antiga: assertEquals(1, result.getTotalComponents())
nova chamada: assertEquals(1, result.getTotalComponents(), "Era esperado valores iguais, mas  1 é diferente de " + result1338 + " <result.getTotalComponents()>")
chamada antiga: assertEquals(1, result.getComponents().size())
nova chamada: assertEquals(1, result.getComponents().size(), "Era esperado valores iguais, mas  1 é diferente de " + result1339 + " <result.getComponents().size()>")
chamada antiga: assertTrue(result.getSingleEdgeComponents().isEmpty())
nova chamada: assertTrue(result.getSingleEdgeComponents().isEmpty(), "Era esperado verdadeiro, mas " + result1340 + " <result.getSingleEdgeComponents().isEmpty()> é falso")
chamada antiga: assertEquals(result.getComponents().get(0), result.getBiggestComponent())
nova chamada: assertEquals(result.getComponents().get(0), result.getBiggestComponent(), "Era esperado valores iguais, mas " + result1341 + " <result.getComponents().get(0)> é diferente de " + result1342 + " <result.getBiggestComponent()>")
chamada antiga: assertEquals(IntArrayList.from(1, 3, 7, 11, 10, 6, 9, 13, 12, 15, 14, 8, 2, 5, 4, 0), result.getComponents().get(0))
nova chamada: assertEquals(IntArrayList.from(1, 3, 7, 11, 10, 6, 9, 13, 12, 15, 14, 8, 2, 5, 4, 0), result.getComponents().get(0), "Era esperado valores iguais, mas " + result1343 + " <IntArrayList.from(1, 3, 7, 11, 10, 6, 9, 13, 12, 15, 14, 8, 2, 5, 4, 0)> é diferente de " + result1344 + " <result.getComponents().get(0)>")
chamada antiga: assertEquals(10, result.getEdgeKeys())
nova chamada: assertEquals(10, result.getEdgeKeys(), "Era esperado valores iguais, mas  10 é diferente de " + result1345 + " <result.getEdgeKeys()>")
chamada antiga: assertEquals(6, result.getTotalComponents())
nova chamada: assertEquals(6, result.getTotalComponents(), "Era esperado valores iguais, mas  6 é diferente de " + result1346 + " <result.getTotalComponents()>")
chamada antiga: assertEquals(2, result.getComponents().size())
nova chamada: assertEquals(2, result.getComponents().size(), "Era esperado valores iguais, mas  2 é diferente de " + result1347 + " <result.getComponents().size()>")
chamada antiga: assertEquals(result.getComponents().get(0), result.getBiggestComponent())
nova chamada: assertEquals(result.getComponents().get(0), result.getBiggestComponent(), "Era esperado valores iguais, mas " + result1348 + " <result.getComponents().get(0)> é diferente de " + result1349 + " <result.getBiggestComponent()>")
chamada antiga: assertEquals(IntArrayList.from(7, 9, 8, 6), result.getComponents().get(0))
nova chamada: assertEquals(IntArrayList.from(7, 9, 8, 6), result.getComponents().get(0), "Era esperado valores iguais, mas " + result1350 + " <IntArrayList.from(7, 9, 8, 6)> é diferente de " + result1351 + " <result.getComponents().get(0)>")
chamada antiga: assertEquals(IntArrayList.from(1, 0), result.getComponents().get(1))
nova chamada: assertEquals(IntArrayList.from(1, 0), result.getComponents().get(1), "Era esperado valores iguais, mas " + result1352 + " <IntArrayList.from(1, 0)> é diferente de " + result1353 + " <result.getComponents().get(1)>")
chamada antiga: assertEquals(4, result.getSingleEdgeComponents().cardinality())
nova chamada: assertEquals(4, result.getSingleEdgeComponents().cardinality(), "Era esperado valores iguais, mas  4 é diferente de " + result1354 + " <result.getSingleEdgeComponents().cardinality()>")
chamada antiga: assertEquals(18, result.getEdgeKeys())
nova chamada: assertEquals(18, result.getEdgeKeys(), "Era esperado valores iguais, mas  18 é diferente de " + result1355 + " <result.getEdgeKeys()>")
chamada antiga: assertEquals(6, result.getTotalComponents())
nova chamada: assertEquals(6, result.getTotalComponents(), "Era esperado valores iguais, mas  6 é diferente de " + result1356 + " <result.getTotalComponents()>")
chamada antiga: assertEquals(2, result.getComponents().size())
nova chamada: assertEquals(2, result.getComponents().size(), "Era esperado valores iguais, mas  2 é diferente de " + result1357 + " <result.getComponents().size()>")
chamada antiga: assertEquals(result.getComponents().get(1), result.getBiggestComponent())
nova chamada: assertEquals(result.getComponents().get(1), result.getBiggestComponent(), "Era esperado valores iguais, mas " + result1358 + " <result.getComponents().get(1)> é diferente de " + result1359 + " <result.getBiggestComponent()>")
chamada antiga: assertEquals(IntArrayList.from(1, 5, 4, 0), result.getComponents().get(0))
nova chamada: assertEquals(IntArrayList.from(1, 5, 4, 0), result.getComponents().get(0), "Era esperado valores iguais, mas " + result1360 + " <IntArrayList.from(1, 5, 4, 0)> é diferente de " + result1361 + " <result.getComponents().get(0)>")
chamada antiga: assertEquals(IntArrayList.from(7, 8, 13, 14, 17, 16, 15, 12, 10, 6), result.getComponents().get(1))
nova chamada: assertEquals(IntArrayList.from(7, 8, 13, 14, 17, 16, 15, 12, 10, 6), result.getComponents().get(1), "Era esperado valores iguais, mas " + result1362 + " <IntArrayList.from(7, 8, 13, 14, 17, 16, 15, 12, 10, 6)> é diferente de " + result1363 + " <result.getComponents().get(1)>")
chamada antiga: assertEquals(4, result.getSingleEdgeComponents().cardinality())
nova chamada: assertEquals(4, result.getSingleEdgeComponents().cardinality(), "Era esperado valores iguais, mas  4 é diferente de " + result1364 + " <result.getSingleEdgeComponents().cardinality()>")
chamada antiga: assertEquals(7, result.getTotalComponents())
nova chamada: assertEquals(7, result.getTotalComponents(), "Era esperado valores iguais, mas  7 é diferente de " + result1365 + " <result.getTotalComponents()>")
chamada antiga: assertEquals(1, result.getComponents().size())
nova chamada: assertEquals(1, result.getComponents().size(), "Era esperado valores iguais, mas  1 é diferente de " + result1366 + " <result.getComponents().size()>")
chamada antiga: assertEquals(IntArrayList.from(6, 4, 2, 0), result.getBiggestComponent())
nova chamada: assertEquals(IntArrayList.from(6, 4, 2, 0), result.getBiggestComponent(), "Era esperado valores iguais, mas " + result1367 + " <IntArrayList.from(6, 4, 2, 0)> é diferente de " + result1368 + " <result.getBiggestComponent()>")
chamada antiga: assertEquals(6, result.getSingleEdgeComponents().cardinality())
nova chamada: assertEquals(6, result.getSingleEdgeComponents().cardinality(), "Era esperado valores iguais, mas  6 é diferente de " + result1369 + " <result.getSingleEdgeComponents().cardinality()>")
chamada antiga: assertEquals(10, result.getTotalComponents())
nova chamada: assertEquals(10, result.getTotalComponents(), "Era esperado valores iguais, mas  10 é diferente de " + result1370 + " <result.getTotalComponents()>")
chamada antiga: assertEquals(0, result.getComponents().size())
nova chamada: assertEquals(0, result.getComponents().size(), "Era esperado valores iguais, mas  0 é diferente de " + result1371 + " <result.getComponents().size()>")
chamada antiga: assertEquals(IntArrayList.from(), result.getBiggestComponent())
nova chamada: assertEquals(IntArrayList.from(), result.getBiggestComponent(), "Era esperado valores iguais, mas " + result1372 + " <IntArrayList.from()> é diferente de " + result1373 + " <result.getBiggestComponent()>")
chamada antiga: assertEquals(10, result.getSingleEdgeComponents().cardinality())
nova chamada: assertEquals(10, result.getSingleEdgeComponents().cardinality(), "Era esperado valores iguais, mas  10 é diferente de " + result1374 + " <result.getSingleEdgeComponents().cardinality()>")
chamada antiga: assertEquals(8, components.getEdgeKeys())
nova chamada: assertEquals(8, components.getEdgeKeys(), "Era esperado valores iguais, mas  8 é diferente de " + result1375 + " <components.getEdgeKeys()>")
chamada antiga: assertEquals(1, components.getComponents().size())
nova chamada: assertEquals(1, components.getComponents().size(), "Era esperado valores iguais, mas  1 é diferente de " + result1376 + " <components.getComponents().size()>")
chamada antiga: assertEquals(16, components.getEdgeKeys())
nova chamada: assertEquals(16, components.getEdgeKeys(), "Era esperado valores iguais, mas  16 é diferente de " + result1377 + " <components.getEdgeKeys()>")
chamada antiga: assertEquals(3, components.getComponents().size())
nova chamada: assertEquals(3, components.getComponents().size(), "Era esperado valores iguais, mas  3 é diferente de " + result1378 + " <components.getComponents().size()>")
chamada antiga: assertEquals(6, components.getEdgeKeys())
nova chamada: assertEquals(6, components.getEdgeKeys(), "Era esperado valores iguais, mas  6 é diferente de " + result1379 + " <components.getEdgeKeys()>")
chamada antiga: assertEquals(1, components.getComponents().size())
nova chamada: assertEquals(1, components.getComponents().size(), "Era esperado valores iguais, mas  1 é diferente de " + result1380 + " <components.getComponents().size()>")
chamada antiga: assertEquals(expected.getEdgeKeys(), given.getEdgeKeys())
nova chamada: assertEquals(expected.getEdgeKeys(), given.getEdgeKeys(), "Era esperado valores iguais, mas " + result1381 + " <expected.getEdgeKeys()> é diferente de " + result1382 + " <given.getEdgeKeys()>")
chamada antiga: assertEquals(3, instance.doWork())
nova chamada: assertEquals(3, instance.doWork(), "Era esperado valores iguais, mas  3 é diferente de " + result1383 + " <instance.doWork()>")
chamada antiga: assertEquals(IntArrayList.from(7, 8, 9), getSubnetworkEdges(g, subnetworkEnc))
nova chamada: assertEquals(IntArrayList.from(7, 8, 9), getSubnetworkEdges(g, subnetworkEnc), "Era esperado valores iguais, mas " + result1384 + " <IntArrayList.from(7, 8, 9)> é diferente de " + result1385 + " <getSubnetworkEdges(g, subnetworkEnc)>")
chamada antiga: assertEquals(0, instance.doWork())
nova chamada: assertEquals(0, instance.doWork(), "Era esperado valores iguais, mas  0 é diferente de " + result1386 + " <instance.doWork()>")
chamada antiga: assertEquals(IntArrayList.from(), getSubnetworkEdges(g, subnetworkEnc))
nova chamada: assertEquals(IntArrayList.from(), getSubnetworkEdges(g, subnetworkEnc), "Era esperado valores iguais, mas " + result1387 + " <IntArrayList.from()> é diferente de " + result1388 + " <getSubnetworkEdges(g, subnetworkEnc)>")
chamada antiga: assertEquals(3, instance.doWork())
nova chamada: assertEquals(3, instance.doWork(), "Era esperado valores iguais, mas  3 é diferente de " + result1389 + " <instance.doWork()>")
chamada antiga: assertEquals(IntArrayList.from(7, 8, 9), getSubnetworkEdges(g, carSubnetworkEnc))
nova chamada: assertEquals(IntArrayList.from(7, 8, 9), getSubnetworkEdges(g, carSubnetworkEnc), "Era esperado valores iguais, mas " + result1390 + " <IntArrayList.from(7, 8, 9)> é diferente de " + result1391 + " <getSubnetworkEdges(g, carSubnetworkEnc)>")
chamada antiga: assertEquals(IntArrayList.from(), getSubnetworkEdges(g, bikeSubnetworkEnc))
nova chamada: assertEquals(IntArrayList.from(), getSubnetworkEdges(g, bikeSubnetworkEnc), "Era esperado valores iguais, mas " + result1392 + " <IntArrayList.from()> é diferente de " + result1393 + " <getSubnetworkEdges(g, bikeSubnetworkEnc)>")
chamada antiga: assertEquals(6, instance.doWork())
nova chamada: assertEquals(6, instance.doWork(), "Era esperado valores iguais, mas  6 é diferente de " + result1394 + " <instance.doWork()>")
chamada antiga: assertEquals(IntArrayList.from(7, 8, 9), getSubnetworkEdges(g, carSubnetworkEnc))
nova chamada: assertEquals(IntArrayList.from(7, 8, 9), getSubnetworkEdges(g, carSubnetworkEnc), "Era esperado valores iguais, mas " + result1395 + " <IntArrayList.from(7, 8, 9)> é diferente de " + result1396 + " <getSubnetworkEdges(g, carSubnetworkEnc)>")
chamada antiga: assertEquals(IntArrayList.from(7, 8, 9), getSubnetworkEdges(g, bikeSubnetworkEnc))
nova chamada: assertEquals(IntArrayList.from(7, 8, 9), getSubnetworkEdges(g, bikeSubnetworkEnc), "Era esperado valores iguais, mas " + result1397 + " <IntArrayList.from(7, 8, 9)> é diferente de " + result1398 + " <getSubnetworkEdges(g, bikeSubnetworkEnc)>")
chamada antiga: assertEquals(3, instance.doWork())
nova chamada: assertEquals(3, instance.doWork(), "Era esperado valores iguais, mas  3 é diferente de " + result1399 + " <instance.doWork()>")
chamada antiga: assertEquals(IntArrayList.from(7, 8, 9), getSubnetworkEdges(g, subnetworkEnc))
nova chamada: assertEquals(IntArrayList.from(7, 8, 9), getSubnetworkEdges(g, subnetworkEnc), "Era esperado valores iguais, mas " + result1400 + " <IntArrayList.from(7, 8, 9)> é diferente de " + result1401 + " <getSubnetworkEdges(g, subnetworkEnc)>")
chamada antiga: assertEquals(0, instance.doWork())
nova chamada: assertEquals(0, instance.doWork(), "Era esperado valores iguais, mas  0 é diferente de " + result1402 + " <instance.doWork()>")
chamada antiga: assertEquals(IntArrayList.from(), getSubnetworkEdges(g, subnetworkEnc))
nova chamada: assertEquals(IntArrayList.from(), getSubnetworkEdges(g, subnetworkEnc), "Era esperado valores iguais, mas " + result1403 + " <IntArrayList.from()> é diferente de " + result1404 + " <getSubnetworkEdges(g, subnetworkEnc)>")
chamada antiga: assertEquals(3, instance.doWork())
nova chamada: assertEquals(3, instance.doWork(), "Era esperado valores iguais, mas  3 é diferente de " + result1405 + " <instance.doWork()>")
chamada antiga: assertEquals(IntArrayList.from(7, 8, 9), getSubnetworkEdges(g, subnetworkEnc))
nova chamada: assertEquals(IntArrayList.from(7, 8, 9), getSubnetworkEdges(g, subnetworkEnc), "Era esperado valores iguais, mas " + result1406 + " <IntArrayList.from(7, 8, 9)> é diferente de " + result1407 + " <getSubnetworkEdges(g, subnetworkEnc)>")
chamada antiga: assertEquals(11, g.getNodes())
nova chamada: assertEquals(11, g.getNodes(), "Era esperado valores iguais, mas  11 é diferente de " + result1408 + " <g.getNodes()>")
chamada antiga: assertEquals(3, subnetworkEdges)
nova chamada: assertEquals(3, subnetworkEdges, "Era esperado valores iguais, mas  3 é diferente de " + " subnetworkEdges")
chamada antiga: assertEquals(IntArrayList.from(4, 5, 6), getSubnetworkEdges(g, subnetworkEnc))
nova chamada: assertEquals(IntArrayList.from(4, 5, 6), getSubnetworkEdges(g, subnetworkEnc), "Era esperado valores iguais, mas " + result1409 + " <IntArrayList.from(4, 5, 6)> é diferente de " + result1410 + " <getSubnetworkEdges(g, subnetworkEnc)>")
chamada antiga: assertEquals(11, g.getNodes())
nova chamada: assertEquals(11, g.getNodes(), "Era esperado valores iguais, mas  11 é diferente de " + result1411 + " <g.getNodes()>")
chamada antiga: assertEquals(5, subnetworkEdges)
nova chamada: assertEquals(5, subnetworkEdges, "Era esperado valores iguais, mas  5 é diferente de " + " subnetworkEdges")
chamada antiga: assertEquals(IntArrayList.from(4, 5, 6, 7, 8), getSubnetworkEdges(g, subnetworkEnc))
nova chamada: assertEquals(IntArrayList.from(4, 5, 6, 7, 8), getSubnetworkEdges(g, subnetworkEnc), "Era esperado valores iguais, mas " + result1412 + " <IntArrayList.from(4, 5, 6, 7, 8)> é diferente de " + result1413 + " <getSubnetworkEdges(g, subnetworkEnc)>")
chamada antiga: assertEquals(2, subnetworkEdges)
nova chamada: assertEquals(2, subnetworkEdges, "Era esperado valores iguais, mas  2 é diferente de " + " subnetworkEdges")
chamada antiga: assertEquals(IntArrayList.from(0, 1), getSubnetworkEdges(g, subnetworkEnc))
nova chamada: assertEquals(IntArrayList.from(0, 1), getSubnetworkEdges(g, subnetworkEnc), "Era esperado valores iguais, mas " + result1414 + " <IntArrayList.from(0, 1)> é diferente de " + result1415 + " <getSubnetworkEdges(g, subnetworkEnc)>")
chamada antiga: assertEquals(expectedResult, resolver.resolveDirections(node, new GHPoint(lat, lon)))
nova chamada: assertEquals(expectedResult, resolver.resolveDirections(node, new GHPoint(lat, lon)), "Era esperado valores iguais, mas  expectedResult é diferente de " + result1416 + " <resolver.resolveDirections(node, new GHPoint(lat, lon))>")
chamada antiga: assertTrue(comparePaths(refPath, path, source, target, false, -1).isEmpty())
nova chamada: assertTrue(comparePaths(refPath, path, source, target, false, -1).isEmpty(), "Era esperado verdadeiro, mas " + result1417 + " <comparePaths(refPath, path, source, target, false, -1).isEmpty()> é falso")
chamada antiga: assertTrue(Double.isInfinite(testEnc.getMaxOrMaxStorableDecimal()))
nova chamada: assertTrue(Double.isInfinite(testEnc.getMaxOrMaxStorableDecimal()), "Era esperado verdadeiro, mas " + result1418 + " <Double.isInfinite(testEnc.getMaxOrMaxStorableDecimal())> é falso")
chamada antiga: assertTrue(Double.isInfinite(testEnc.getMaxStorableDecimal()))
nova chamada: assertTrue(Double.isInfinite(testEnc.getMaxStorableDecimal()), "Era esperado verdadeiro, mas " + result1419 + " <Double.isInfinite(testEnc.getMaxStorableDecimal())> é falso")
chamada antiga: assertTrue(Double.isInfinite(testEnc.getNextStorableValue(7)))
nova chamada: assertTrue(Double.isInfinite(testEnc.getNextStorableValue(7)), "Era esperado verdadeiro, mas " + result1420 + " <Double.isInfinite(testEnc.getNextStorableValue(7))> é falso")
chamada antiga: assertEquals(6, testEnc.getNextStorableValue(6))
nova chamada: assertEquals(6, testEnc.getNextStorableValue(6), "Era esperado valores iguais, mas  6 é diferente de " + result1421 + " <testEnc.getNextStorableValue(6)>")
chamada antiga: assertEquals(5, testEnc.getMaxOrMaxStorableDecimal())
nova chamada: assertEquals(5, testEnc.getMaxOrMaxStorableDecimal(), "Era esperado valores iguais, mas  5 é diferente de " + result1422 + " <testEnc.getMaxOrMaxStorableDecimal()>")
chamada antiga: assertTrue(Double.isInfinite(testEnc.getMaxStorableDecimal()))
nova chamada: assertTrue(Double.isInfinite(testEnc.getMaxStorableDecimal()), "Era esperado verdadeiro, mas " + result1423 + " <Double.isInfinite(testEnc.getMaxStorableDecimal())> é falso")
chamada antiga: assertTrue(Double.isInfinite(testEnc.getMaxOrMaxStorableDecimal()))
nova chamada: assertTrue(Double.isInfinite(testEnc.getMaxOrMaxStorableDecimal()), "Era esperado verdadeiro, mas " + result1424 + " <Double.isInfinite(testEnc.getMaxOrMaxStorableDecimal())> é falso")
chamada antiga: assertTrue(Double.isInfinite(testEnc.getMaxStorableDecimal()))
nova chamada: assertTrue(Double.isInfinite(testEnc.getMaxStorableDecimal()), "Era esperado verdadeiro, mas " + result1425 + " <Double.isInfinite(testEnc.getMaxStorableDecimal())> é falso")
chamada antiga: assertEquals(3, enc.getDecimal(false, intsRef))
nova chamada: assertEquals(3, enc.getDecimal(false, intsRef), "Era esperado valores iguais, mas  3 é diferente de " + result1426 + " <enc.getDecimal(false, intsRef)>")
chamada antiga: assertEquals(6, enc.getDecimal(false, intsRef))
nova chamada: assertEquals(6, enc.getDecimal(false, intsRef), "Era esperado valores iguais, mas  6 é diferente de " + result1427 + " <enc.getDecimal(false, intsRef)>")
chamada antiga: assertEquals(0, enc.getNextStorableValue(0))
nova chamada: assertEquals(0, enc.getNextStorableValue(0), "Era esperado valores iguais, mas  0 é diferente de " + result1428 + " <enc.getNextStorableValue(0)>")
chamada antiga: assertEquals(3, enc.getNextStorableValue(0.1))
nova chamada: assertEquals(3, enc.getNextStorableValue(0.1), "Era esperado valores iguais, mas  3 é diferente de " + result1429 + " <enc.getNextStorableValue(0.1)>")
chamada antiga: assertEquals(3, enc.getNextStorableValue(1.5))
nova chamada: assertEquals(3, enc.getNextStorableValue(1.5), "Era esperado valores iguais, mas  3 é diferente de " + result1430 + " <enc.getNextStorableValue(1.5)>")
chamada antiga: assertEquals(3, enc.getNextStorableValue(2.9))
nova chamada: assertEquals(3, enc.getNextStorableValue(2.9), "Era esperado valores iguais, mas  3 é diferente de " + result1431 + " <enc.getNextStorableValue(2.9)>")
chamada antiga: assertEquals(3, enc.getNextStorableValue(3))
nova chamada: assertEquals(3, enc.getNextStorableValue(3), "Era esperado valores iguais, mas  3 é diferente de " + result1432 + " <enc.getNextStorableValue(3)>")
chamada antiga: assertEquals(6, enc.getNextStorableValue(3.1))
nova chamada: assertEquals(6, enc.getNextStorableValue(3.1), "Era esperado valores iguais, mas  6 é diferente de " + result1433 + " <enc.getNextStorableValue(3.1)>")
chamada antiga: assertEquals(6, enc.getNextStorableValue(4.5))
nova chamada: assertEquals(6, enc.getNextStorableValue(4.5), "Era esperado valores iguais, mas  6 é diferente de " + result1434 + " <enc.getNextStorableValue(4.5)>")
chamada antiga: assertEquals(6, enc.getNextStorableValue(5.9))
nova chamada: assertEquals(6, enc.getNextStorableValue(5.9), "Era esperado valores iguais, mas  6 é diferente de " + result1435 + " <enc.getNextStorableValue(5.9)>")
chamada antiga: assertEquals(45, enc.getNextStorableValue(44.3))
nova chamada: assertEquals(45, enc.getNextStorableValue(44.3), "Era esperado valores iguais, mas  45 é diferente de " + result1436 + " <enc.getNextStorableValue(44.3)>")
chamada antiga: assertEquals(45, enc.getNextStorableValue(45))
nova chamada: assertEquals(45, enc.getNextStorableValue(45), "Era esperado valores iguais, mas  45 é diferente de " + result1437 + " <enc.getNextStorableValue(45)>")
chamada antiga: assertTrue(assertThrows(IllegalStateException.class, () -> new DecimalEncodedValueImpl("test", 5, 0, 5, true, false, false).getSmallestNonZeroValue()).getMessage().contains("getting the smallest non-zero value is not possible"))
nova chamada: assertTrue(assertThrows(IllegalStateException.class, () -> new DecimalEncodedValueImpl("test", 5, 0, 5, true, false, false).getSmallestNonZeroValue()).getMessage().contains("getting the smallest non-zero value is not possible"), "Era esperado verdadeiro, mas " + result1438 + " <assertThrows(IllegalStateException.class, () -> new DecimalEncodedValueImpl('test', 5, 0, 5, true, false, false).getSmallestNonZeroValue()).getMessage().contains('getting the smallest non-zero value is not possible')> é falso")
chamada antiga: assertEquals(expected, enc.getSmallestNonZeroValue())
nova chamada: assertEquals(expected, enc.getSmallestNonZeroValue(), "Era esperado valores iguais, mas  expected é diferente de " + result1439 + " <enc.getSmallestNonZeroValue()>")
chamada antiga: assertEquals(expected, enc.getDecimal(false, intsRef))
nova chamada: assertEquals(expected, enc.getDecimal(false, intsRef), "Era esperado valores iguais, mas  expected é diferente de " + result1440 + " <enc.getDecimal(false, intsRef)>")
chamada antiga: assertEquals(0, enc.getDecimal(false, intsRef))
nova chamada: assertEquals(0, enc.getDecimal(false, intsRef), "Era esperado valores iguais, mas  0 é diferente de " + result1441 + " <enc.getDecimal(false, intsRef)>")
chamada antiga: assertEquals(12, enc.getNextStorableValue(11.2))
nova chamada: assertEquals(12, enc.getNextStorableValue(11.2), "Era esperado valores iguais, mas  12 é diferente de " + result1442 + " <enc.getNextStorableValue(11.2)>")
chamada antiga: assertEquals(42, enc.getNextStorableValue(41.3))
nova chamada: assertEquals(42, enc.getNextStorableValue(41.3), "Era esperado valores iguais, mas  42 é diferente de " + result1443 + " <enc.getNextStorableValue(41.3)>")
chamada antiga: assertEquals(42, enc.getNextStorableValue(42))
nova chamada: assertEquals(42, enc.getNextStorableValue(42), "Era esperado valores iguais, mas  42 é diferente de " + result1444 + " <enc.getNextStorableValue(42)>")
chamada antiga: assertEquals(Double.POSITIVE_INFINITY, enc.getNextStorableValue(42.1))
nova chamada: assertEquals(Double.POSITIVE_INFINITY, enc.getNextStorableValue(42.1), "Era esperado valores iguais, mas  Double.POSITIVE_INFINITY é diferente de " + result1445 + " <enc.getNextStorableValue(42.1)>")
chamada antiga: assertEquals(Double.POSITIVE_INFINITY, enc.getNextStorableValue(45))
nova chamada: assertEquals(Double.POSITIVE_INFINITY, enc.getNextStorableValue(45), "Era esperado valores iguais, mas  Double.POSITIVE_INFINITY é diferente de " + result1446 + " <enc.getNextStorableValue(45)>")
chamada antiga: assertEquals(Double.POSITIVE_INFINITY, enc.getNextStorableValue(45.1))
nova chamada: assertEquals(Double.POSITIVE_INFINITY, enc.getNextStorableValue(45.1), "Era esperado valores iguais, mas  Double.POSITIVE_INFINITY é diferente de " + result1447 + " <enc.getNextStorableValue(45.1)>")
chamada antiga: assertEquals(42, enc.getDecimal(false, intsRef))
nova chamada: assertEquals(42, enc.getDecimal(false, intsRef), "Era esperado valores iguais, mas  42 é diferente de " + result1448 + " <enc.getDecimal(false, intsRef)>")
chamada antiga: assertEquals(Double.POSITIVE_INFINITY, enc.getDecimal(false, intsRef))
nova chamada: assertEquals(Double.POSITIVE_INFINITY, enc.getDecimal(false, intsRef), "Era esperado valores iguais, mas  Double.POSITIVE_INFINITY é diferente de " + result1449 + " <enc.getDecimal(false, intsRef)>")
chamada antiga: assertEquals(15 * 3, enc.getMaxOrMaxStorableDecimal())
nova chamada: assertEquals(15 * 3, enc.getMaxOrMaxStorableDecimal(), "Era esperado valores iguais, mas  15 * 3 é diferente de " + result1450 + " <enc.getMaxOrMaxStorableDecimal()>")
chamada antiga: assertEquals(3, enc.getDecimal(false, ints))
nova chamada: assertEquals(3, enc.getDecimal(false, ints), "Era esperado valores iguais, mas  3 é diferente de " + result1451 + " <enc.getDecimal(false, ints)>")
chamada antiga: assertEquals(3, enc.getMaxOrMaxStorableDecimal())
nova chamada: assertEquals(3, enc.getMaxOrMaxStorableDecimal(), "Era esperado valores iguais, mas  3 é diferente de " + result1452 + " <enc.getMaxOrMaxStorableDecimal()>")
chamada antiga: assertEquals(6, enc.getDecimal(false, ints))
nova chamada: assertEquals(6, enc.getDecimal(false, ints), "Era esperado valores iguais, mas  6 é diferente de " + result1453 + " <enc.getDecimal(false, ints)>")
chamada antiga: assertEquals(6, enc.getMaxOrMaxStorableDecimal())
nova chamada: assertEquals(6, enc.getMaxOrMaxStorableDecimal(), "Era esperado valores iguais, mas  6 é diferente de " + result1454 + " <enc.getMaxOrMaxStorableDecimal()>")
chamada antiga: assertEquals(0, enc.getDecimal(false, ints))
nova chamada: assertEquals(0, enc.getDecimal(false, ints), "Era esperado valores iguais, mas  0 é diferente de " + result1455 + " <enc.getDecimal(false, ints)>")
chamada antiga: assertEquals(6, enc.getMaxOrMaxStorableDecimal())
nova chamada: assertEquals(6, enc.getMaxOrMaxStorableDecimal(), "Era esperado valores iguais, mas  6 é diferente de " + result1456 + " <enc.getMaxOrMaxStorableDecimal()>")
chamada antiga: assertEquals(10, prop.getInt(false, ref))
nova chamada: assertEquals(10, prop.getInt(false, ref), "Era esperado valores iguais, mas  10 é diferente de " + result1457 + " <prop.getInt(false, ref)>")
chamada antiga: assertEquals(20, prop.getInt(true, ref))
nova chamada: assertEquals(20, prop.getInt(true, ref), "Era esperado valores iguais, mas  20 é diferente de " + result1458 + " <prop.getInt(true, ref)>")
chamada antiga: assertEquals(10, prop.getInt(false, ref))
nova chamada: assertEquals(10, prop.getInt(false, ref), "Era esperado valores iguais, mas  10 é diferente de " + result1459 + " <prop.getInt(false, ref)>")
chamada antiga: assertEquals(20, prop.getInt(true, ref))
nova chamada: assertEquals(20, prop.getInt(true, ref), "Era esperado valores iguais, mas  20 é diferente de " + result1460 + " <prop.getInt(true, ref)>")
chamada antiga: assertEquals(10, prop.getInt(false, ref))
nova chamada: assertEquals(10, prop.getInt(false, ref), "Era esperado valores iguais, mas  10 é diferente de " + result1461 + " <prop.getInt(false, ref)>")
chamada antiga: assertEquals(20, prop.getInt(true, ref))
nova chamada: assertEquals(20, prop.getInt(true, ref), "Era esperado valores iguais, mas  20 é diferente de " + result1462 + " <prop.getInt(true, ref)>")
chamada antiga: assertEquals(-5, prop.getInt(false, ref))
nova chamada: assertEquals(-5, prop.getInt(false, ref), "Era esperado valores iguais, mas  -5 é diferente de " + result1463 + " <prop.getInt(false, ref)>")
chamada antiga: assertEquals(-5, prop.getInt(false, ref))
nova chamada: assertEquals(-5, prop.getInt(false, ref), "Era esperado valores iguais, mas  -5 é diferente de " + result1464 + " <prop.getInt(false, ref)>")
chamada antiga: assertEquals(Integer.MAX_VALUE, prop.getInt(false, ref))
nova chamada: assertEquals(Integer.MAX_VALUE, prop.getInt(false, ref), "Era esperado valores iguais, mas  Integer.MAX_VALUE é diferente de " + result1465 + " <prop.getInt(false, ref)>")
chamada antiga: assertEquals(5, prop.getInt(false, ref))
nova chamada: assertEquals(5, prop.getInt(false, ref), "Era esperado valores iguais, mas  5 é diferente de " + result1466 + " <prop.getInt(false, ref)>")
chamada antiga: assertEquals(-5, prop.getInt(true, ref))
nova chamada: assertEquals(-5, prop.getInt(true, ref), "Era esperado valores iguais, mas  -5 é diferente de " + result1467 + " <prop.getInt(true, ref)>")
chamada antiga: assertEquals(-2, prop.getInt(false, ref))
nova chamada: assertEquals(-2, prop.getInt(false, ref), "Era esperado valores iguais, mas  -2 é diferente de " + result1468 + " <prop.getInt(false, ref)>")
chamada antiga: assertEquals(2, prop.getInt(true, ref))
nova chamada: assertEquals(2, prop.getInt(true, ref), "Era esperado valores iguais, mas  2 é diferente de " + result1469 + " <prop.getInt(true, ref)>")
chamada antiga: assertEquals(-3, prop.getInt(false, ref))
nova chamada: assertEquals(-3, prop.getInt(false, ref), "Era esperado valores iguais, mas  -3 é diferente de " + result1470 + " <prop.getInt(false, ref)>")
chamada antiga: assertEquals(3, prop.getInt(true, ref))
nova chamada: assertEquals(3, prop.getInt(true, ref), "Era esperado valores iguais, mas  3 é diferente de " + result1471 + " <prop.getInt(true, ref)>")
chamada antiga: assertEquals(5, prop.init(init))
nova chamada: assertEquals(5, prop.init(init), "Era esperado valores iguais, mas  5 é diferente de " + result1472 + " <prop.init(init)>")
chamada antiga: assertEquals(5, prop.bits)
nova chamada: assertEquals(5, prop.bits, "Era esperado valores iguais, mas  5 é diferente de " + " prop.bits")
chamada antiga: assertEquals(0, init.dataIndex)
nova chamada: assertEquals(0, init.dataIndex, "Era esperado valores iguais, mas  0 é diferente de " + " init.dataIndex")
chamada antiga: assertEquals(0, init.shift)
nova chamada: assertEquals(0, init.shift, "Era esperado valores iguais, mas  0 é diferente de " + " init.shift")
chamada antiga: assertEquals(RoadClass.OTHER, prop.getEnum(false, ref))
nova chamada: assertEquals(RoadClass.OTHER, prop.getEnum(false, ref), "Era esperado valores iguais, mas  RoadClass.OTHER é diferente de " + result1473 + " <prop.getEnum(false, ref)>")
chamada antiga: assertEquals(RoadClass.SECONDARY, prop.getEnum(false, ref))
nova chamada: assertEquals(RoadClass.SECONDARY, prop.getEnum(false, ref), "Era esperado valores iguais, mas  RoadClass.SECONDARY é diferente de " + result1474 + " <prop.getEnum(false, ref)>")
chamada antiga: assertEquals(3, 32 - Integer.numberOfLeadingZeros(7 - 1))
nova chamada: assertEquals(3, 32 - Integer.numberOfLeadingZeros(7 - 1), "Era esperado valores iguais, mas  3 é diferente de " + " 32 - Integer.numberOfLeadingZeros(7 - 1)")
chamada antiga: assertEquals(3, 32 - Integer.numberOfLeadingZeros(8 - 1))
nova chamada: assertEquals(3, 32 - Integer.numberOfLeadingZeros(8 - 1), "Era esperado valores iguais, mas  3 é diferente de " + " 32 - Integer.numberOfLeadingZeros(8 - 1)")
chamada antiga: assertEquals(4, 32 - Integer.numberOfLeadingZeros(9 - 1))
nova chamada: assertEquals(4, 32 - Integer.numberOfLeadingZeros(9 - 1), "Era esperado valores iguais, mas  4 é diferente de " + " 32 - Integer.numberOfLeadingZeros(9 - 1)")
chamada antiga: assertEquals(4, 32 - Integer.numberOfLeadingZeros(16 - 1))
nova chamada: assertEquals(4, 32 - Integer.numberOfLeadingZeros(16 - 1), "Era esperado valores iguais, mas  4 é diferente de " + " 32 - Integer.numberOfLeadingZeros(16 - 1)")
chamada antiga: assertEquals(5, 32 - Integer.numberOfLeadingZeros(17 - 1))
nova chamada: assertEquals(5, 32 - Integer.numberOfLeadingZeros(17 - 1), "Era esperado valores iguais, mas  5 é diferente de " + " 32 - Integer.numberOfLeadingZeros(17 - 1)")
chamada antiga: assertEquals(YES, RoadAccess.find("unknown"))
nova chamada: assertEquals(YES, RoadAccess.find("unknown"), "Era esperado valores iguais, mas  YES é diferente de " + result1475 + " <RoadAccess.find('unknown')>")
chamada antiga: assertEquals(NO, RoadAccess.find("no"))
nova chamada: assertEquals(NO, RoadAccess.find("no"), "Era esperado valores iguais, mas  NO é diferente de " + result1476 + " <RoadAccess.find('no')>")
chamada antiga: assertFalse(Double.isNaN(weighting.calcEdgeWeight(motorway, false)))
nova chamada: assertFalse(Double.isNaN(weighting.calcEdgeWeight(motorway, false)), "Era esperado falso, mas " + result1477 + " <Double.isNaN(weighting.calcEdgeWeight(motorway, false))> é verdadeiro ")
chamada antiga: assertFalse(parse("edge; getClass()", allNamesInvalid).ok)
nova chamada: assertFalse(parse("edge; getClass()", allNamesInvalid).ok, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: assertFalse(result.ok)
nova chamada: assertFalse(result.ok, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: assertFalse(result.ok)
nova chamada: assertFalse(result.ok, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: assertFalse(result.ok)
nova chamada: assertFalse(result.ok, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: assertFalse(result.ok)
nova chamada: assertFalse(result.ok, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: assertFalse(parse("edge; getClass()", allNamesInvalid, lookup).ok)
nova chamada: assertFalse(parse("edge; getClass()", allNamesInvalid, lookup).ok, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: assertFalse(result.ok)
nova chamada: assertFalse(result.ok, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: assertFalse(parse("road_class == PRIMARY", s -> false, lookup).ok)
nova chamada: assertFalse(parse("road_class == PRIMARY", s -> false, lookup).ok, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: assertFalse(result.ok)
nova chamada: assertFalse(result.ok, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: assertFalse(g.getEdgeIteratorState(edge1.getEdge(), Integer.MIN_VALUE).isShortcut())
nova chamada: assertFalse(g.getEdgeIteratorState(edge1.getEdge(), Integer.MIN_VALUE).isShortcut(), "Era esperado falso, mas " + result1478 + " <g.getEdgeIteratorState(edge1.getEdge(), Integer.MIN_VALUE).isShortcut()> é verdadeiro ")
chamada antiga: assertFalse(g.getEdgeIteratorState(edge2.getEdge(), Integer.MIN_VALUE).isShortcut())
nova chamada: assertFalse(g.getEdgeIteratorState(edge2.getEdge(), Integer.MIN_VALUE).isShortcut(), "Era esperado falso, mas " + result1479 + " <g.getEdgeIteratorState(edge2.getEdge(), Integer.MIN_VALUE).isShortcut()> é verdadeiro ")
chamada antiga: assertFalse(it.next())
nova chamada: assertFalse(it.next(), "Era esperado falso, mas " + result1480 + " <it.next()> é verdadeiro ")
chamada antiga: assertFalse(it.next())
nova chamada: assertFalse(it.next(), "Era esperado falso, mas " + result1481 + " <it.next()> é verdadeiro ")
chamada antiga: assertFalse(GHUtility.getEdge(queryGraph, 2, 1).get(UNFAVORED_EDGE))
nova chamada: assertFalse(GHUtility.getEdge(queryGraph, 2, 1).get(UNFAVORED_EDGE), "Era esperado falso, mas " + result1482 + " <GHUtility.getEdge(queryGraph, 2, 1).get(UNFAVORED_EDGE)> é verdadeiro ")
chamada antiga: assertFalse(GHUtility.getEdge(queryGraph, 2, 1).getReverse(UNFAVORED_EDGE))
nova chamada: assertFalse(GHUtility.getEdge(queryGraph, 2, 1).getReverse(UNFAVORED_EDGE), "Era esperado falso, mas " + result1483 + " <GHUtility.getEdge(queryGraph, 2, 1).getReverse(UNFAVORED_EDGE)> é verdadeiro ")
chamada antiga: assertFalse(GHUtility.getEdge(queryGraph, 1, 2).get(UNFAVORED_EDGE))
nova chamada: assertFalse(GHUtility.getEdge(queryGraph, 1, 2).get(UNFAVORED_EDGE), "Era esperado falso, mas " + result1484 + " <GHUtility.getEdge(queryGraph, 1, 2).get(UNFAVORED_EDGE)> é verdadeiro ")
chamada antiga: assertFalse(GHUtility.getEdge(queryGraph, 1, 2).getReverse(UNFAVORED_EDGE))
nova chamada: assertFalse(GHUtility.getEdge(queryGraph, 1, 2).getReverse(UNFAVORED_EDGE), "Era esperado falso, mas " + result1485 + " <GHUtility.getEdge(queryGraph, 1, 2).getReverse(UNFAVORED_EDGE)> é verdadeiro ")
chamada antiga: assertFalse(iter.next())
nova chamada: assertFalse(iter.next(), "Era esperado falso, mas " + result1486 + " <iter.next()> é verdadeiro ")
chamada antiga: assertFalse(iter.next())
nova chamada: assertFalse(iter.next(), "Era esperado falso, mas " + result1487 + " <iter.next()> é verdadeiro ")
chamada antiga: assertFalse(instance.isEnabled())
nova chamada: assertFalse(instance.isEnabled(), "Era esperado falso, mas " + result1488 + " <instance.isEnabled()> é verdadeiro ")
chamada antiga: assertFalse(handler.isEnabled())
nova chamada: assertFalse(handler.isEnabled(), "Era esperado falso, mas " + result1489 + " <handler.isEnabled()> é verdadeiro ")
chamada antiga: assertFalse(lms.isInfinity(0))
nova chamada: assertFalse(lms.isInfinity(0), "Era esperado falso, mas " + result1490 + " <lms.isInfinity(0)> é verdadeiro ")
chamada antiga: assertFalse(bool.getBool(false, ref))
nova chamada: assertFalse(bool.getBool(false, ref), "Era esperado falso, mas " + result1491 + " <bool.getBool(false, ref)> é verdadeiro ")
chamada antiga: assertTrue(bool.getBool(false, ref))
nova chamada: assertTrue(bool.getBool(false, ref), "Era esperado verdadeiro, mas " + result1492 + " <bool.getBool(false, ref)> é falso")
chamada antiga: assertFalse(bool.getBool(false, ref))
nova chamada: assertFalse(bool.getBool(false, ref), "Era esperado falso, mas " + result1493 + " <bool.getBool(false, ref)> é verdadeiro ")
chamada antiga: assertTrue(bool.getBool(true, ref))
nova chamada: assertTrue(bool.getBool(true, ref), "Era esperado verdadeiro, mas " + result1494 + " <bool.getBool(true, ref)> é falso")
chamada antiga: assertEquals("road_class", deserializedRoadClass.getName())
nova chamada: assertEquals("road_class", deserializedRoadClass.getName(), "Era esperado valores iguais, mas  'road_class' é diferente de " + result1495 + " <deserializedRoadClass.getName()>")
chamada antiga: assertTrue(Arrays.toString(deserializedRoadClass.getValues()).contains("motorway"))
nova chamada: assertTrue(Arrays.toString(deserializedRoadClass.getValues()).contains("motorway"), "Era esperado verdadeiro, mas " + result1496 + " <Arrays.toString(deserializedRoadClass.getValues()).contains('motorway')> é falso")
chamada antiga: assertEquals("lanes", deserializedLanes.getName())
nova chamada: assertEquals("lanes", deserializedLanes.getName(), "Era esperado valores iguais, mas  'lanes' é diferente de " + result1497 + " <deserializedLanes.getName()>")
chamada antiga: assertEquals("max_width", deserializedMaxWidth.getName())
nova chamada: assertEquals("max_width", deserializedMaxWidth.getName(), "Era esperado valores iguais, mas  'max_width' é diferente de " + result1498 + " <deserializedMaxWidth.getName()>")
chamada antiga: assertEquals("get_off_bike", deserializedGetOffBike.getName())
nova chamada: assertEquals("get_off_bike", deserializedGetOffBike.getName(), "Era esperado valores iguais, mas  'get_off_bike' é diferente de " + result1499 + " <deserializedGetOffBike.getName()>")
chamada antiga: assertEquals("names", deserializedNames.getName())
nova chamada: assertEquals("names", deserializedNames.getName(), "Era esperado valores iguais, mas  'names' é diferente de " + result1500 + " <deserializedNames.getName()>")
chamada antiga: assertTrue(deserializedNames.getValues().contains("jim"))
nova chamada: assertTrue(deserializedNames.getValues().contains("jim"), "Era esperado verdadeiro, mas " + result1501 + " <deserializedNames.getValues().contains('jim')> é falso")
chamada antiga: assertEquals("{\"className\":\"com.graphhopper.routing.ev.IntEncodedValueImpl\",\"name\":\"lanes\",\"bits\":3," + "\"min_storable_value\":0,\"max_storable_value\":7,\"max_value\":-2147483648,\"negate_reverse_direction\":false,\"store_two_directions\":false," + "\"fwd_data_index\":0,\"bwd_data_index\":0,\"fwd_shift\":0,\"bwd_shift\":-1,\"fwd_mask\":7,\"bwd_mask\":0}", serialized.get(0))
nova chamada: assertEquals("{\"className\":\"com.graphhopper.routing.ev.IntEncodedValueImpl\",\"name\":\"lanes\",\"bits\":3," + "\"min_storable_value\":0,\"max_storable_value\":7,\"max_value\":-2147483648,\"negate_reverse_direction\":false,\"store_two_directions\":false," + "\"fwd_data_index\":0,\"bwd_data_index\":0,\"fwd_shift\":0,\"bwd_shift\":-1,\"fwd_mask\":7,\"bwd_mask\":0}", serialized.get(0), "Era esperado valores iguais, mas  '{\'className\':\'com.graphhopper.routing.ev.IntEncodedValueImpl\',\'name\':\'lanes\',\'bits\':3,' + '\'min_storable_value\':0,\'max_storable_value\':7,\'max_value\':-2147483648,\'negate_reverse_direction\':false,\'store_two_directions\':false,' + '\'fwd_data_index\':0,\'bwd_data_index\':0,\'fwd_shift\':0,\'bwd_shift\':-1,\'fwd_mask\':7,\'bwd_mask\':0}' é diferente de " + result1502 + " <serialized.get(0)>")
chamada antiga: assertEquals("{\"className\":\"com.graphhopper.routing.ev.DecimalEncodedValueImpl\",\"name\":\"max_width\",\"bits\":7," + "\"min_storable_value\":0,\"max_storable_value\":127,\"max_value\":-2147483648,\"negate_reverse_direction\":false,\"store_two_directions\":false," + "\"fwd_data_index\":0,\"bwd_data_index\":0,\"fwd_shift\":3,\"bwd_shift\":-1,\"fwd_mask\":1016,\"bwd_mask\":0," + "\"factor\":0.1,\"use_maximum_as_infinity\":true}", serialized.get(1))
nova chamada: assertEquals("{\"className\":\"com.graphhopper.routing.ev.DecimalEncodedValueImpl\",\"name\":\"max_width\",\"bits\":7," + "\"min_storable_value\":0,\"max_storable_value\":127,\"max_value\":-2147483648,\"negate_reverse_direction\":false,\"store_two_directions\":false," + "\"fwd_data_index\":0,\"bwd_data_index\":0,\"fwd_shift\":3,\"bwd_shift\":-1,\"fwd_mask\":1016,\"bwd_mask\":0," + "\"factor\":0.1,\"use_maximum_as_infinity\":true}", serialized.get(1), "Era esperado valores iguais, mas  '{\'className\':\'com.graphhopper.routing.ev.DecimalEncodedValueImpl\',\'name\':\'max_width\',\'bits\':7,' + '\'min_storable_value\':0,\'max_storable_value\':127,\'max_value\':-2147483648,\'negate_reverse_direction\':false,\'store_two_directions\':false,' + '\'fwd_data_index\':0,\'bwd_data_index\':0,\'fwd_shift\':3,\'bwd_shift\':-1,\'fwd_mask\':1016,\'bwd_mask\':0,' + '\'factor\':0.1,\'use_maximum_as_infinity\':true}' é diferente de " + result1503 + " <serialized.get(1)>")
chamada antiga: assertEquals("{\"className\":\"com.graphhopper.routing.ev.SimpleBooleanEncodedValue\",\"name\":\"get_off_bike\",\"bits\":1," + "\"min_storable_value\":0,\"max_storable_value\":1,\"max_value\":-2147483648,\"negate_reverse_direction\":false,\"store_two_directions\":false,\"fwd_data_index\":0," + "\"bwd_data_index\":0,\"fwd_shift\":10,\"bwd_shift\":-1,\"fwd_mask\":1024,\"bwd_mask\":0}", serialized.get(2))
nova chamada: assertEquals("{\"className\":\"com.graphhopper.routing.ev.SimpleBooleanEncodedValue\",\"name\":\"get_off_bike\",\"bits\":1," + "\"min_storable_value\":0,\"max_storable_value\":1,\"max_value\":-2147483648,\"negate_reverse_direction\":false,\"store_two_directions\":false,\"fwd_data_index\":0," + "\"bwd_data_index\":0,\"fwd_shift\":10,\"bwd_shift\":-1,\"fwd_mask\":1024,\"bwd_mask\":0}", serialized.get(2), "Era esperado valores iguais, mas  '{\'className\':\'com.graphhopper.routing.ev.SimpleBooleanEncodedValue\',\'name\':\'get_off_bike\',\'bits\':1,' + '\'min_storable_value\':0,\'max_storable_value\':1,\'max_value\':-2147483648,\'negate_reverse_direction\':false,\'store_two_directions\':false,\'fwd_data_index\':0,' + '\'bwd_data_index\':0,\'fwd_shift\':10,\'bwd_shift\':-1,\'fwd_mask\':1024,\'bwd_mask\':0}' é diferente de " + result1504 + " <serialized.get(2)>")
chamada antiga: assertEquals("lanes", ev0.getName())
nova chamada: assertEquals("lanes", ev0.getName(), "Era esperado valores iguais, mas  'lanes' é diferente de " + result1505 + " <ev0.getName()>")
chamada antiga: assertEquals("max_width", ev1.getName())
nova chamada: assertEquals("max_width", ev1.getName(), "Era esperado valores iguais, mas  'max_width' é diferente de " + result1506 + " <ev1.getName()>")
chamada antiga: assertEquals("get_off_bike", ev2.getName())
nova chamada: assertEquals("get_off_bike", ev2.getName(), "Era esperado valores iguais, mas  'get_off_bike' é diferente de " + result1507 + " <ev2.getName()>")
chamada antiga: assertEquals("{\"data_index\":0,\"shift\":3,\"next_shift\":10,\"bit_mask\":1016}", s)
nova chamada: assertEquals("{\"data_index\":0,\"shift\":3,\"next_shift\":10,\"bit_mask\":1016}", s, "Era esperado valores iguais, mas  '{\'data_index\':0,\'shift\':3,\'next_shift\':10,\'bit_mask\':1016}' é diferente de " + " s")
chamada antiga: assertEquals(0, deserialized.dataIndex)
nova chamada: assertEquals(0, deserialized.dataIndex, "Era esperado valores iguais, mas  0 é diferente de " + " deserialized.dataIndex")
chamada antiga: assertEquals(3, deserialized.shift)
nova chamada: assertEquals(3, deserialized.shift, "Era esperado valores iguais, mas  3 é diferente de " + " deserialized.shift")
chamada antiga: assertEquals(10, deserialized.nextShift)
nova chamada: assertEquals(10, deserialized.nextShift, "Era esperado valores iguais, mas  10 é diferente de " + " deserialized.nextShift")
chamada antiga: assertEquals(1016, deserialized.bitMask)
nova chamada: assertEquals(1016, deserialized.bitMask, "Era esperado valores iguais, mas  1016 é diferente de " + " deserialized.bitMask")
chamada antiga: assertEquals(2, prop.init(init))
nova chamada: assertEquals(2, prop.init(init), "Era esperado valores iguais, mas  2 é diferente de " + result1508 + " <prop.init(init)>")
chamada antiga: assertEquals(2, prop.bits)
nova chamada: assertEquals(2, prop.bits, "Era esperado valores iguais, mas  2 é diferente de " + " prop.bits")
chamada antiga: assertEquals(0, init.dataIndex)
nova chamada: assertEquals(0, init.dataIndex, "Era esperado valores iguais, mas  0 é diferente de " + " init.dataIndex")
chamada antiga: assertEquals(0, init.shift)
nova chamada: assertEquals(0, init.shift, "Era esperado valores iguais, mas  0 é diferente de " + " init.shift")
chamada antiga: assertEquals(6, prop.init(init))
nova chamada: assertEquals(6, prop.init(init), "Era esperado valores iguais, mas  6 é diferente de " + result1509 + " <prop.init(init)>")
chamada antiga: assertEquals(6, prop.bits)
nova chamada: assertEquals(6, prop.bits, "Era esperado valores iguais, mas  6 é diferente de " + " prop.bits")
chamada antiga: assertEquals(0, init.dataIndex)
nova chamada: assertEquals(0, init.dataIndex, "Era esperado valores iguais, mas  0 é diferente de " + " init.dataIndex")
chamada antiga: assertEquals(0, init.shift)
nova chamada: assertEquals(0, init.shift, "Era esperado valores iguais, mas  0 é diferente de " + " init.shift")
chamada antiga: assertEquals(1, prop.init(init))
nova chamada: assertEquals(1, prop.init(init), "Era esperado valores iguais, mas  1 é diferente de " + result1510 + " <prop.init(init)>")
chamada antiga: assertEquals(1, prop.bits)
nova chamada: assertEquals(1, prop.bits, "Era esperado valores iguais, mas  1 é diferente de " + " prop.bits")
chamada antiga: assertEquals(0, init.dataIndex)
nova chamada: assertEquals(0, init.dataIndex, "Era esperado valores iguais, mas  0 é diferente de " + " init.dataIndex")
chamada antiga: assertEquals(0, init.shift)
nova chamada: assertEquals(0, init.shift, "Era esperado valores iguais, mas  0 é diferente de " + " init.shift")
chamada antiga: assertEquals(0, prop.getValues().size())
nova chamada: assertEquals(0, prop.getValues().size(), "Era esperado valores iguais, mas  0 é diferente de " + result1511 + " <prop.getValues().size()>")
chamada antiga: assertNotEquals(small, big)
nova chamada: assertNotEquals(small, big, "Era esperado valores diferentes, mas  small é igual a " + " big")
chamada antiga: assertEquals(null, prop.getString(false, ref))
nova chamada: assertEquals(null, prop.getString(false, ref), "Era esperado valores iguais, mas  null é diferente de " + result1512 + " <prop.getString(false, ref)>")
chamada antiga: assertEquals(0, prop.getValues().size())
nova chamada: assertEquals(0, prop.getValues().size(), "Era esperado valores iguais, mas  0 é diferente de " + result1513 + " <prop.getValues().size()>")
chamada antiga: assertEquals("aut", prop.getString(false, ref))
nova chamada: assertEquals("aut", prop.getString(false, ref), "Era esperado valores iguais, mas  'aut' é diferente de " + result1514 + " <prop.getString(false, ref)>")
chamada antiga: assertEquals(1, prop.getValues().size())
nova chamada: assertEquals(1, prop.getValues().size(), "Era esperado valores iguais, mas  1 é diferente de " + result1515 + " <prop.getValues().size()>")
chamada antiga: assertEquals("deu", prop.getString(false, ref))
nova chamada: assertEquals("deu", prop.getString(false, ref), "Era esperado valores iguais, mas  'deu' é diferente de " + result1516 + " <prop.getString(false, ref)>")
chamada antiga: assertEquals(2, prop.getValues().size())
nova chamada: assertEquals(2, prop.getValues().size(), "Era esperado valores iguais, mas  2 é diferente de " + result1517 + " <prop.getValues().size()>")
chamada antiga: assertEquals("che", prop.getString(false, ref))
nova chamada: assertEquals("che", prop.getString(false, ref), "Era esperado valores iguais, mas  'che' é diferente de " + result1518 + " <prop.getString(false, ref)>")
chamada antiga: assertEquals(3, prop.getValues().size())
nova chamada: assertEquals(3, prop.getValues().size(), "Era esperado valores iguais, mas  3 é diferente de " + result1519 + " <prop.getValues().size()>")
chamada antiga: assertEquals("deu", prop.getString(false, ref))
nova chamada: assertEquals("deu", prop.getString(false, ref), "Era esperado valores iguais, mas  'deu' é diferente de " + result1520 + " <prop.getString(false, ref)>")
chamada antiga: assertEquals(3, prop.getValues().size())
nova chamada: assertEquals(3, prop.getValues().size(), "Era esperado valores iguais, mas  3 é diferente de " + result1521 + " <prop.getValues().size()>")
chamada antiga: assertEquals(null, prop.getString(false, ref))
nova chamada: assertEquals(null, prop.getString(false, ref), "Era esperado valores iguais, mas  null é diferente de " + result1522 + " <prop.getString(false, ref)>")
chamada antiga: assertEquals("aut", prop.getString(false, ref))
nova chamada: assertEquals("aut", prop.getString(false, ref), "Era esperado valores iguais, mas  'aut' é diferente de " + result1523 + " <prop.getString(false, ref)>")
chamada antiga: assertEquals("deu", prop.getString(false, ref))
nova chamada: assertEquals("deu", prop.getString(false, ref), "Era esperado valores iguais, mas  'deu' é diferente de " + result1524 + " <prop.getString(false, ref)>")
chamada antiga: assertEquals("che", prop.getString(false, ref))
nova chamada: assertEquals("che", prop.getString(false, ref), "Era esperado valores iguais, mas  'che' é diferente de " + result1525 + " <prop.getString(false, ref)>")
chamada antiga: assertEquals(0, numFails)
nova chamada: assertEquals(0, numFails, "Era esperado valores iguais, mas  0 é diferente de " + " numFails")
chamada antiga: assertEquals(GHUtility.asSet(9, 111, 182), GHUtility.getNeighbors(g.createEdgeExplorer().setBaseNode(10)))
nova chamada: assertEquals(GHUtility.asSet(9, 111, 182), GHUtility.getNeighbors(g.createEdgeExplorer().setBaseNode(10)), "Era esperado valores iguais, mas " + result1526 + " <GHUtility.asSet(9, 111, 182)> é diferente de " + result1527 + " <GHUtility.getNeighbors(g.createEdgeExplorer().setBaseNode(10))>")
chamada antiga: assertEquals(GHUtility.asSet(19, 21), GHUtility.getNeighbors(g.createEdgeExplorer().setBaseNode(20)))
nova chamada: assertEquals(GHUtility.asSet(19, 21), GHUtility.getNeighbors(g.createEdgeExplorer().setBaseNode(20)), "Era esperado valores iguais, mas " + result1528 + " <GHUtility.asSet(19, 21)> é diferente de " + result1529 + " <GHUtility.getNeighbors(g.createEdgeExplorer().setBaseNode(20))>")
chamada antiga: assertEquals(GHUtility.asSet(478, 84, 83), GHUtility.getNeighbors(g.createEdgeExplorer().setBaseNode(480)))
nova chamada: assertEquals(GHUtility.asSet(478, 84, 83), GHUtility.getNeighbors(g.createEdgeExplorer().setBaseNode(480)), "Era esperado valores iguais, mas " + result1530 + " <GHUtility.asSet(478, 84, 83)> é diferente de " + result1531 + " <GHUtility.getNeighbors(g.createEdgeExplorer().setBaseNode(480))>")
chamada antiga: assertEquals(GHUtility.asSet(2, 909, 571), GHUtility.getNeighbors(g.createEdgeExplorer().setBaseNode(10)))
nova chamada: assertEquals(GHUtility.asSet(2, 909, 571), GHUtility.getNeighbors(g.createEdgeExplorer().setBaseNode(10)), "Era esperado valores iguais, mas " + result1532 + " <GHUtility.asSet(2, 909, 571)> é diferente de " + result1533 + " <GHUtility.getNeighbors(g.createEdgeExplorer().setBaseNode(10))>")
chamada antiga: assertEquals(GHUtility.asSet(444, 956, 740), GHUtility.getNeighbors(g.createEdgeExplorer().setBaseNode(441)))
nova chamada: assertEquals(GHUtility.asSet(444, 956, 740), GHUtility.getNeighbors(g.createEdgeExplorer().setBaseNode(441)), "Era esperado valores iguais, mas " + result1534 + " <GHUtility.asSet(444, 956, 740)> é diferente de " + result1535 + " <GHUtility.getNeighbors(g.createEdgeExplorer().setBaseNode(441))>")
chamada antiga: assertEquals(GHUtility.asSet(911, 404, 122, 914), GHUtility.getNeighbors(g.createEdgeExplorer().setBaseNode(912)))
nova chamada: assertEquals(GHUtility.asSet(911, 404, 122, 914), GHUtility.getNeighbors(g.createEdgeExplorer().setBaseNode(912)), "Era esperado valores iguais, mas " + result1536 + " <GHUtility.asSet(911, 404, 122, 914)> é diferente de " + result1537 + " <GHUtility.getNeighbors(g.createEdgeExplorer().setBaseNode(912))>")
chamada antiga: assertEquals(loops * queries.size() * requestFactories.size(), routeCount.get())
nova chamada: assertEquals(loops * queries.size() * requestFactories.size(), routeCount.get(), "Era esperado valores iguais, mas  loops * queries.size() * requestFactories.size() é diferente de " + result1538 + " <routeCount.get()>")
chamada antiga: assertEquals(expected, getCurrentShortcuts())
nova chamada: assertEquals(expected, getCurrentShortcuts(), "Era esperado valores iguais, mas  expected é diferente de " + result1539 + " <getCurrentShortcuts()>")
chamada antiga: assertEquals(expected, getCurrentShortcuts().size())
nova chamada: assertEquals(expected, getCurrentShortcuts().size(), "Era esperado valores iguais, mas  expected é diferente de " + result1540 + " <getCurrentShortcuts().size()>")
chamada antiga: assertEquals(3, pg.getDegree(0))
nova chamada: assertEquals(3, pg.getDegree(0), "Era esperado valores iguais, mas  3 é diferente de " + result1541 + " <pg.getDegree(0)>")
chamada antiga: assertEquals(2, pg.getDegree(4))
nova chamada: assertEquals(2, pg.getDegree(4), "Era esperado valores iguais, mas  2 é diferente de " + result1542 + " <pg.getDegree(4)>")
chamada antiga: assertEquals("3-4 16.0,", res.toString())
nova chamada: assertEquals("3-4 16.0,", res.toString(), "Era esperado valores iguais, mas  '3-4 16.0,' é diferente de " + result1543 + " <res.toString()>")
chamada antiga: assertEquals(536_870_911, largeEdgeID)
nova chamada: assertEquals(536_870_911, largeEdgeID, "Era esperado valores iguais, mas  536_870_911 é diferente de " + " largeEdgeID")
chamada antiga: assertTrue(iter.next())
nova chamada: assertTrue(iter.next(), "Era esperado verdadeiro, mas " + result1544 + " <iter.next()> é falso")
chamada antiga: assertEquals(largeEdgeID, GHUtility.getEdgeFromEdgeKey(iter.getOrigEdgeKeyFirst()))
nova chamada: assertEquals(largeEdgeID, GHUtility.getEdgeFromEdgeKey(iter.getOrigEdgeKeyFirst()), "Era esperado valores iguais, mas  largeEdgeID é diferente de " + result1545 + " <GHUtility.getEdgeFromEdgeKey(iter.getOrigEdgeKeyFirst())>")
chamada antiga: assertFalse(iter.next())
nova chamada: assertFalse(iter.next(), "Era esperado falso, mas " + result1546 + " <iter.next()> é verdadeiro ")
chamada antiga: assertFalse(instance.isEnabled())
nova chamada: assertFalse(instance.isEnabled(), "Era esperado falso, mas " + result1547 + " <instance.isEnabled()> é verdadeiro ")
chamada antiga: assertTrue(instance.isEnabled())
nova chamada: assertTrue(instance.isEnabled(), "Era esperado verdadeiro, mas " + result1548 + " <instance.isEnabled()> é falso")
chamada antiga: assertEquals(dijkstraPath.calcNodes(), chPath.calcNodes())
nova chamada: assertEquals(dijkstraPath.calcNodes(), chPath.calcNodes(), "Era esperado valores iguais, mas " + result1549 + " <dijkstraPath.calcNodes()> é diferente de " + result1550 + " <chPath.calcNodes()>")
chamada antiga: assertEquals(dijkstraPath.calcNodes(), chPath.calcNodes())
nova chamada: assertEquals(dijkstraPath.calcNodes(), chPath.calcNodes(), "Era esperado valores iguais, mas " + result1551 + " <dijkstraPath.calcNodes()> é diferente de " + result1552 + " <chPath.calcNodes()>")
chamada antiga: assertEquals(expected, given)
nova chamada: assertEquals(expected, given, "Era esperado valores iguais, mas  expected é diferente de " + " given")
chamada antiga: assertEquals(18, algo.findUpperBound(2, 100, Integer.MAX_VALUE))
nova chamada: assertEquals(18, algo.findUpperBound(2, 100, Integer.MAX_VALUE), "Era esperado valores iguais, mas  18 é diferente de " + result1553 + " <algo.findUpperBound(2, 100, Integer.MAX_VALUE)>")
chamada antiga: assertEquals(20, algo.findUpperBound(2, 100, Integer.MAX_VALUE))
nova chamada: assertEquals(20, algo.findUpperBound(2, 100, Integer.MAX_VALUE), "Era esperado valores iguais, mas  20 é diferente de " + result1554 + " <algo.findUpperBound(2, 100, Integer.MAX_VALUE)>")
chamada antiga: assertEquals(2, algo.getSettledNodes())
nova chamada: assertEquals(2, algo.getSettledNodes(), "Era esperado valores iguais, mas  2 é diferente de " + result1555 + " <algo.getSettledNodes()>")
chamada antiga: assertEquals(10, algo.findUpperBound(5, 100, Integer.MAX_VALUE))
nova chamada: assertEquals(10, algo.findUpperBound(5, 100, Integer.MAX_VALUE), "Era esperado valores iguais, mas  10 é diferente de " + result1556 + " <algo.findUpperBound(5, 100, Integer.MAX_VALUE)>")
chamada antiga: assertEquals(1, algo.getSettledNodes())
nova chamada: assertEquals(1, algo.getSettledNodes(), "Era esperado valores iguais, mas  1 é diferente de " + result1557 + " <algo.getSettledNodes()>")
chamada antiga: assertEquals(10, algo.findUpperBound(5, 100, Integer.MAX_VALUE))
nova chamada: assertEquals(10, algo.findUpperBound(5, 100, Integer.MAX_VALUE), "Era esperado valores iguais, mas  10 é diferente de " + result1558 + " <algo.findUpperBound(5, 100, Integer.MAX_VALUE)>")
chamada antiga: assertEquals(10, algo.findUpperBound(5, 100, Integer.MAX_VALUE))
nova chamada: assertEquals(10, algo.findUpperBound(5, 100, Integer.MAX_VALUE), "Era esperado valores iguais, mas  10 é diferente de " + result1559 + " <algo.findUpperBound(5, 100, Integer.MAX_VALUE)>")
chamada antiga: assertEquals(10, algo.findUpperBound(5, 100, Integer.MAX_VALUE))
nova chamada: assertEquals(10, algo.findUpperBound(5, 100, Integer.MAX_VALUE), "Era esperado valores iguais, mas  10 é diferente de " + result1560 + " <algo.findUpperBound(5, 100, Integer.MAX_VALUE)>")
chamada antiga: assertEquals(1, algo.getSettledNodes())
nova chamada: assertEquals(1, algo.getSettledNodes(), "Era esperado valores iguais, mas  1 é diferente de " + result1561 + " <algo.getSettledNodes()>")
chamada antiga: assertEquals(5, algo.findUpperBound(5, 8, Integer.MAX_VALUE))
nova chamada: assertEquals(5, algo.findUpperBound(5, 8, Integer.MAX_VALUE), "Era esperado valores iguais, mas  5 é diferente de " + result1562 + " <algo.findUpperBound(5, 8, Integer.MAX_VALUE)>")
chamada antiga: assertEquals(10, algo.findUpperBound(5, 1, Integer.MAX_VALUE))
nova chamada: assertEquals(10, algo.findUpperBound(5, 1, Integer.MAX_VALUE), "Era esperado valores iguais, mas  10 é diferente de " + result1563 + " <algo.findUpperBound(5, 1, Integer.MAX_VALUE)>")
chamada antiga: assertEquals(2, algo.getSettledNodes())
nova chamada: assertEquals(2, algo.getSettledNodes(), "Era esperado valores iguais, mas  2 é diferente de " + result1564 + " <algo.getSettledNodes()>")
chamada antiga: assertEquals(5, algo.findUpperBound(5, 5, Integer.MAX_VALUE))
nova chamada: assertEquals(5, algo.findUpperBound(5, 5, Integer.MAX_VALUE), "Era esperado valores iguais, mas  5 é diferente de " + result1565 + " <algo.findUpperBound(5, 5, Integer.MAX_VALUE)>")
chamada antiga: assertEquals(5, algo.getSettledNodes())
nova chamada: assertEquals(5, algo.getSettledNodes(), "Era esperado valores iguais, mas  5 é diferente de " + result1566 + " <algo.getSettledNodes()>")
chamada antiga: assertEquals(10, algo.findUpperBound(5, 5, 2))
nova chamada: assertEquals(10, algo.findUpperBound(5, 5, 2), "Era esperado valores iguais, mas  10 é diferente de " + result1567 + " <algo.findUpperBound(5, 5, 2)>")
chamada antiga: assertEquals(2, algo.getSettledNodes())
nova chamada: assertEquals(2, algo.getSettledNodes(), "Era esperado valores iguais, mas  2 é diferente de " + result1568 + " <algo.getSettledNodes()>")
chamada antiga: assertEquals(Double.POSITIVE_INFINITY, algo.findUpperBound(5, 5, 0))
nova chamada: assertEquals(Double.POSITIVE_INFINITY, algo.findUpperBound(5, 5, 0), "Era esperado valores iguais, mas  Double.POSITIVE_INFINITY é diferente de " + result1569 + " <algo.findUpperBound(5, 5, 0)>")
chamada antiga: assertEquals(0, algo.getSettledNodes())
nova chamada: assertEquals(0, algo.getSettledNodes(), "Era esperado valores iguais, mas  0 é diferente de " + result1570 + " <algo.getSettledNodes()>")
chamada antiga: assertEquals(10, algo.findUpperBound(5, 5, 2))
nova chamada: assertEquals(10, algo.findUpperBound(5, 5, 2), "Era esperado valores iguais, mas  10 é diferente de " + result1571 + " <algo.findUpperBound(5, 5, 2)>")
chamada antiga: assertEquals(2, algo.getSettledNodes())
nova chamada: assertEquals(2, algo.getSettledNodes(), "Era esperado valores iguais, mas  2 é diferente de " + result1572 + " <algo.getSettledNodes()>")
chamada antiga: assertEquals(10, algo.findUpperBound(5, 5, 2))
nova chamada: assertEquals(10, algo.findUpperBound(5, 5, 2), "Era esperado valores iguais, mas  10 é diferente de " + result1573 + " <algo.findUpperBound(5, 5, 2)>")
chamada antiga: assertEquals(10, algo.findUpperBound(5, 5, 2))
nova chamada: assertEquals(10, algo.findUpperBound(5, 5, 2), "Era esperado valores iguais, mas  10 é diferente de " + result1574 + " <algo.findUpperBound(5, 5, 2)>")
chamada antiga: assertEquals(10, algo.findUpperBound(5, 5, 2))
nova chamada: assertEquals(10, algo.findUpperBound(5, 5, 2), "Era esperado valores iguais, mas  10 é diferente de " + result1575 + " <algo.findUpperBound(5, 5, 2)>")
chamada antiga: assertEquals(2, algo.getSettledNodes())
nova chamada: assertEquals(2, algo.getSettledNodes(), "Era esperado valores iguais, mas  2 é diferente de " + result1576 + " <algo.getSettledNodes()>")
chamada antiga: assertTrue(Double.isInfinite(weight))
nova chamada: assertTrue(Double.isInfinite(weight), "Era esperado verdadeiro, mas " + result1577 + " <Double.isInfinite(weight)> é falso")
chamada antiga: assertTrue(Double.isInfinite(weight))
nova chamada: assertTrue(Double.isInfinite(weight), "Era esperado verdadeiro, mas " + result1578 + " <Double.isInfinite(weight)> é falso")
chamada antiga: assertEquals(IntArrayList.from(0, 1, 2, 3, 4, 5, 6), pathFwd.calcNodes())
nova chamada: assertEquals(IntArrayList.from(0, 1, 2, 3, 4, 5, 6), pathFwd.calcNodes(), "Era esperado valores iguais, mas " + result1579 + " <IntArrayList.from(0, 1, 2, 3, 4, 5, 6)> é diferente de " + result1580 + " <pathFwd.calcNodes()>")
chamada antiga: assertEquals(IntArrayList.from(6, 5, 4, 3, 2, 1, 0), pathBwd.calcNodes())
nova chamada: assertEquals(IntArrayList.from(6, 5, 4, 3, 2, 1, 0), pathBwd.calcNodes(), "Era esperado valores iguais, mas " + result1581 + " <IntArrayList.from(6, 5, 4, 3, 2, 1, 0)> é diferente de " + result1582 + " <pathBwd.calcNodes()>")
chamada antiga: assertEquals(IntArrayList.from(0, 3, 4, 3, 1), path.calcNodes())
nova chamada: assertEquals(IntArrayList.from(0, 3, 4, 3, 1), path.calcNodes(), "Era esperado valores iguais, mas " + result1583 + " <IntArrayList.from(0, 3, 4, 3, 1)> é diferente de " + result1584 + " <path.calcNodes()>")
chamada antiga: assertEquals(5, chGraph.getBaseGraph().getEdges())
nova chamada: assertEquals(5, chGraph.getBaseGraph().getEdges(), "Era esperado valores iguais, mas  5 é diferente de " + result1585 + " <chGraph.getBaseGraph().getEdges()>")
chamada antiga: assertEquals(3, snap.getClosestNode())
nova chamada: assertEquals(3, snap.getClosestNode(), "Era esperado valores iguais, mas  3 é diferente de " + result1586 + " <snap.getClosestNode()>")
chamada antiga: assertEquals(0, snap.getClosestEdge().getEdge())
nova chamada: assertEquals(0, snap.getClosestEdge().getEdge(), "Era esperado valores iguais, mas  0 é diferente de " + result1587 + " <snap.getClosestEdge().getEdge()>")
chamada antiga: assertEquals(IntArrayList.from(0, 3, 1, 2), path.calcNodes())
nova chamada: assertEquals(IntArrayList.from(0, 3, 1, 2), path.calcNodes(), "Era esperado valores iguais, mas " + result1588 + " <IntArrayList.from(0, 3, 1, 2)> é diferente de " + result1589 + " <path.calcNodes()>")
chamada antiga: assertEquals(3, snap.getClosestNode())
nova chamada: assertEquals(3, snap.getClosestNode(), "Era esperado valores iguais, mas  3 é diferente de " + result1590 + " <snap.getClosestNode()>")
chamada antiga: assertEquals(0, snap.getClosestEdge().getEdge())
nova chamada: assertEquals(0, snap.getClosestEdge().getEdge(), "Era esperado valores iguais, mas  0 é diferente de " + result1591 + " <snap.getClosestEdge().getEdge()>")
chamada antiga: assertEquals(IntArrayList.from(1, 3, 0), path.calcNodes())
nova chamada: assertEquals(IntArrayList.from(1, 3, 0), path.calcNodes(), "Era esperado valores iguais, mas " + result1592 + " <IntArrayList.from(1, 3, 0)> é diferente de " + result1593 + " <path.calcNodes()>")
chamada antiga: assertEquals(3, snap.getClosestEdge().getEdge())
nova chamada: assertEquals(3, snap.getClosestEdge().getEdge(), "Era esperado valores iguais, mas  3 é diferente de " + result1594 + " <snap.getClosestEdge().getEdge()>")
chamada antiga: assertTrue(path.isFound())
nova chamada: assertTrue(path.isFound(), "Era esperado verdadeiro, mas " + result1595 + " <path.isFound()> é falso")
chamada antiga: assertEquals(IntArrayList.from(4, 3, 2, 1, 0, 1, 5, 6), path.calcNodes())
nova chamada: assertEquals(IntArrayList.from(4, 3, 2, 1, 0, 1, 5, 6), path.calcNodes(), "Era esperado valores iguais, mas " + result1596 + " <IntArrayList.from(4, 3, 2, 1, 0, 1, 5, 6)> é diferente de " + result1597 + " <path.calcNodes()>")
chamada antiga: assertEquals(3, snap2.getClosestEdge().getEdge())
nova chamada: assertEquals(3, snap2.getClosestEdge().getEdge(), "Era esperado valores iguais, mas  3 é diferente de " + result1598 + " <snap2.getClosestEdge().getEdge()>")
chamada antiga: assertEquals(IntArrayList.from(4, 3, 2, 1, 7, 0, 7, 1, 5, 6), dijkstraPath.calcNodes())
nova chamada: assertEquals(IntArrayList.from(4, 3, 2, 1, 7, 0, 7, 1, 5, 6), dijkstraPath.calcNodes(), "Era esperado valores iguais, mas " + result1599 + " <IntArrayList.from(4, 3, 2, 1, 7, 0, 7, 1, 5, 6)> é diferente de " + result1600 + " <dijkstraPath.calcNodes()>")
chamada antiga: assertEquals(IntArrayList.from(0, 2, 3, 4, 5), path.calcNodes())
nova chamada: assertEquals(IntArrayList.from(0, 2, 3, 4, 5), path.calcNodes(), "Era esperado valores iguais, mas " + result1601 + " <IntArrayList.from(0, 2, 3, 4, 5)> é diferente de " + result1602 + " <path.calcNodes()>")
chamada antiga: assertEquals(2, chGraph.getShortcuts())
nova chamada: assertEquals(2, chGraph.getShortcuts(), "Era esperado valores iguais, mas  2 é diferente de " + result1603 + " <chGraph.getShortcuts()>")
chamada antiga: assertEquals(3, chEdge.getBaseNode())
nova chamada: assertEquals(3, chEdge.getBaseNode(), "Era esperado valores iguais, mas  3 é diferente de " + result1604 + " <chEdge.getBaseNode()>")
chamada antiga: assertEquals(4, chEdge.getAdjNode())
nova chamada: assertEquals(4, chEdge.getAdjNode(), "Era esperado valores iguais, mas  4 é diferente de " + result1605 + " <chEdge.getAdjNode()>")
chamada antiga: assertEquals(2, chEdge.getSkippedEdge1())
nova chamada: assertEquals(2, chEdge.getSkippedEdge1(), "Era esperado valores iguais, mas  2 é diferente de " + result1606 + " <chEdge.getSkippedEdge1()>")
chamada antiga: assertEquals(0, chEdge.getSkippedEdge2())
nova chamada: assertEquals(0, chEdge.getSkippedEdge2(), "Era esperado valores iguais, mas  0 é diferente de " + result1607 + " <chEdge.getSkippedEdge2()>")
chamada antiga: assertEquals(5, chEdge.getOrigEdgeKeyFirst())
nova chamada: assertEquals(5, chEdge.getOrigEdgeKeyFirst(), "Era esperado valores iguais, mas  5 é diferente de " + result1608 + " <chEdge.getOrigEdgeKeyFirst()>")
chamada antiga: assertEquals(0, chEdge.getOrigEdgeKeyLast())
nova chamada: assertEquals(0, chEdge.getOrigEdgeKeyLast(), "Era esperado valores iguais, mas  0 é diferente de " + result1609 + " <chEdge.getOrigEdgeKeyLast()>")
chamada antiga: assertSame(weighting, prepare.getCHConfig().getWeighting())
nova chamada: assertSame(weighting, prepare.getCHConfig().getWeighting(), "Era esperado objetos iguais, mas  weighting é diferente de " + result1610 + " <prepare.getCHConfig().getWeighting()>")
chamada antiga: assertEquals(2, res.getShortcuts())
nova chamada: assertEquals(2, res.getShortcuts(), "Era esperado valores iguais, mas  2 é diferente de " + result1611 + " <res.getShortcuts()>")
chamada antiga: assertEquals(7, res.getShortcuts())
nova chamada: assertEquals(7, res.getShortcuts(), "Era esperado valores iguais, mas  7 é diferente de " + result1612 + " <res.getShortcuts()>")
chamada antiga: assertEquals(6, g.getEdges())
nova chamada: assertEquals(6, g.getEdges(), "Era esperado valores iguais, mas  6 é diferente de " + result1613 + " <g.getEdges()>")
chamada antiga: assertEquals(2, result.getShortcuts())
nova chamada: assertEquals(2, result.getShortcuts(), "Era esperado valores iguais, mas  2 é diferente de " + result1614 + " <result.getShortcuts()>")
chamada antiga: assertEquals(6 + 2, routingCHGraph.getEdges())
nova chamada: assertEquals(6 + 2, routingCHGraph.getEdges(), "Era esperado valores iguais, mas  6 + 2 é diferente de " + result1615 + " <routingCHGraph.getEdges()>")
chamada antiga: assertEquals(IntArrayList.from(4, 3, 5, 2), p.calcNodes())
nova chamada: assertEquals(IntArrayList.from(4, 3, 5, 2), p.calcNodes(), "Era esperado valores iguais, mas " + result1616 + " <IntArrayList.from(4, 3, 5, 2)> é diferente de " + result1617 + " <p.calcNodes()>")
chamada antiga: assertEquals(19, oldCount)
nova chamada: assertEquals(19, oldCount, "Era esperado valores iguais, mas  19 é diferente de " + " oldCount")
chamada antiga: assertEquals(oldCount, g.getEdges())
nova chamada: assertEquals(oldCount, g.getEdges(), "Era esperado valores iguais, mas  oldCount é diferente de " + result1618 + " <g.getEdges()>")
chamada antiga: assertEquals(oldCount, GHUtility.count(g.getAllEdges()))
nova chamada: assertEquals(oldCount, GHUtility.count(g.getAllEdges()), "Era esperado valores iguais, mas  oldCount é diferente de " + result1619 + " <GHUtility.count(g.getAllEdges())>")
chamada antiga: assertEquals(numShortcuts, result.getShortcuts())
nova chamada: assertEquals(numShortcuts, result.getShortcuts(), "Era esperado valores iguais, mas  numShortcuts é diferente de " + result1620 + " <result.getShortcuts()>")
chamada antiga: assertEquals(oldCount, g.getEdges())
nova chamada: assertEquals(oldCount, g.getEdges(), "Era esperado valores iguais, mas  oldCount é diferente de " + result1621 + " <g.getEdges()>")
chamada antiga: assertEquals(oldCount + numShortcuts, routingCHGraph.getEdges())
nova chamada: assertEquals(oldCount + numShortcuts, routingCHGraph.getEdges(), "Era esperado valores iguais, mas  oldCount + numShortcuts é diferente de " + result1622 + " <routingCHGraph.getEdges()>")
chamada antiga: assertEquals(IntArrayList.from(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10), p.calcNodes())
nova chamada: assertEquals(IntArrayList.from(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10), p.calcNodes(), "Era esperado valores iguais, mas " + result1623 + " <IntArrayList.from(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)> é diferente de " + result1624 + " <p.calcNodes()>")
chamada antiga: assertEquals(oldCount, g.getEdges())
nova chamada: assertEquals(oldCount, g.getEdges(), "Era esperado valores iguais, mas  oldCount é diferente de " + result1625 + " <g.getEdges()>")
chamada antiga: assertEquals(oldCount, routingCHGraph.getBaseGraph().getEdges())
nova chamada: assertEquals(oldCount, routingCHGraph.getBaseGraph().getEdges(), "Era esperado valores iguais, mas  oldCount é diferente de " + result1626 + " <routingCHGraph.getBaseGraph().getEdges()>")
chamada antiga: assertEquals(oldCount + 23, routingCHGraph.getEdges())
nova chamada: assertEquals(oldCount + 23, routingCHGraph.getEdges(), "Era esperado valores iguais, mas  oldCount + 23 é diferente de " + result1627 + " <routingCHGraph.getEdges()>")
chamada antiga: assertEquals(IntArrayList.from(4, 5, 6, 7), p.calcNodes())
nova chamada: assertEquals(IntArrayList.from(4, 5, 6, 7), p.calcNodes(), "Era esperado valores iguais, mas " + result1628 + " <IntArrayList.from(4, 5, 6, 7)> é diferente de " + result1629 + " <p.calcNodes()>")
chamada antiga: assertEquals(IntArrayList.from(7, 2, 1), getAdjs(outExplorer.setBaseNode(6)))
nova chamada: assertEquals(IntArrayList.from(7, 2, 1), getAdjs(outExplorer.setBaseNode(6)), "Era esperado valores iguais, mas " + result1630 + " <IntArrayList.from(7, 2, 1)> é diferente de " + result1631 + " <getAdjs(outExplorer.setBaseNode(6))>")
chamada antiga: assertEquals(IntArrayList.from(8, 0, 3), getAdjs(inExplorer.setBaseNode(6)))
nova chamada: assertEquals(IntArrayList.from(8, 0, 3), getAdjs(inExplorer.setBaseNode(6)), "Era esperado valores iguais, mas " + result1632 + " <IntArrayList.from(8, 0, 3)> é diferente de " + result1633 + " <getAdjs(inExplorer.setBaseNode(6))>")
chamada antiga: assertEquals(IntArrayList.from(6, 0), getAdjs(outExplorer.setBaseNode(4)))
nova chamada: assertEquals(IntArrayList.from(6, 0), getAdjs(outExplorer.setBaseNode(4)), "Era esperado valores iguais, mas " + result1634 + " <IntArrayList.from(6, 0)> é diferente de " + result1635 + " <getAdjs(outExplorer.setBaseNode(4))>")
chamada antiga: assertEquals(IntArrayList.from(6, 1), getAdjs(inExplorer.setBaseNode(5)))
nova chamada: assertEquals(IntArrayList.from(6, 1), getAdjs(inExplorer.setBaseNode(5)), "Era esperado valores iguais, mas " + result1636 + " <IntArrayList.from(6, 1)> é diferente de " + result1637 + " <getAdjs(inExplorer.setBaseNode(5))>")
chamada antiga: assertEquals(IntArrayList.from(8, 2), getAdjs(inExplorer.setBaseNode(7)))
nova chamada: assertEquals(IntArrayList.from(8, 2), getAdjs(inExplorer.setBaseNode(7)), "Era esperado valores iguais, mas " + result1638 + " <IntArrayList.from(8, 2)> é diferente de " + result1639 + " <getAdjs(inExplorer.setBaseNode(7))>")
chamada antiga: assertEquals(IntArrayList.from(3), getAdjs(outExplorer.setBaseNode(8)))
nova chamada: assertEquals(IntArrayList.from(3), getAdjs(outExplorer.setBaseNode(8)), "Era esperado valores iguais, mas " + result1640 + " <IntArrayList.from(3)> é diferente de " + result1641 + " <getAdjs(outExplorer.setBaseNode(8))>")
chamada antiga: assertEquals(IntArrayList.from(), getAdjs(inExplorer.setBaseNode(8)))
nova chamada: assertEquals(IntArrayList.from(), getAdjs(inExplorer.setBaseNode(8)), "Era esperado valores iguais, mas " + result1642 + " <IntArrayList.from()> é diferente de " + result1643 + " <getAdjs(inExplorer.setBaseNode(8))>")
chamada antiga: assertEquals(0, result.getShortcuts())
nova chamada: assertEquals(0, result.getShortcuts(), "Era esperado valores iguais, mas  0 é diferente de " + result1644 + " <result.getShortcuts()>")
chamada antiga: assertEquals(2, result.getShortcuts())
nova chamada: assertEquals(2, result.getShortcuts(), "Era esperado valores iguais, mas  2 é diferente de " + result1645 + " <result.getShortcuts()>")
chamada antiga: assertEquals((BitUtil.LITTLE.toBitString(edgeId)), BitUtil.LITTLE.toLastBitString(fromNode, 32) + BitUtil.LITTLE.toLastBitString(endNode, 32))
nova chamada: assertEquals((BitUtil.LITTLE.toBitString(edgeId)), BitUtil.LITTLE.toLastBitString(fromNode, 32) + BitUtil.LITTLE.toLastBitString(endNode, 32), "Era esperado valores iguais, mas  (BitUtil.LITTLE.toBitString(edgeId)) é diferente de " + " BitUtil.LITTLE.toLastBitString(fromNode, 32) + BitUtil.LITTLE.toLastBitString(endNode, 32)")
chamada antiga: assertTrue(car1CHStore.getShortcuts() > 0 && resCar2.getCHStorage().getShortcuts() > 0)
nova chamada: assertTrue(car1CHStore.getShortcuts() > 0 && resCar2.getCHStorage().getShortcuts() > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNotEquals(car1CHStore.getShortcuts(), resCar2.getCHStorage().getShortcuts())
nova chamada: assertNotEquals(car1CHStore.getShortcuts(), resCar2.getCHStorage().getShortcuts(), "Era esperado valores diferentes, mas " + result1646 + " <car1CHStore.getShortcuts()> é igual a " + result1647 + " <resCar2.getCHStorage().getShortcuts()>")
chamada antiga: assertArrayEquals(new int[] { 4, 5, 8, 3, 2 }, calcNodes(graph, response.getAll().get(0)))
nova chamada: assertArrayEquals(new int[] { 4, 5, 8, 3, 2 }, calcNodes(graph, response.getAll().get(0)), "Era esperado arrays iguais, mas  new int[] { 4, 5, 8, 3, 2 } é diferente de " + result1648 + " <calcNodes(graph, response.getAll().get(0))>")
chamada antiga: assertArrayEquals(new int[] { 4, 5, 8, 1, 2, 3 }, calcNodes(graph, response.getAll().get(0)))
nova chamada: assertArrayEquals(new int[] { 4, 5, 8, 1, 2, 3 }, calcNodes(graph, response.getAll().get(0)), "Era esperado arrays iguais, mas  new int[] { 4, 5, 8, 1, 2, 3 } é diferente de " + result1649 + " <calcNodes(graph, response.getAll().get(0))>")
chamada antiga: assertArrayEquals(new int[] { 4, 5, 8, 1, 2, 3 }, calcNodes(graph, response.getAll().get(0)))
nova chamada: assertArrayEquals(new int[] { 4, 5, 8, 1, 2, 3 }, calcNodes(graph, response.getAll().get(0)), "Era esperado arrays iguais, mas  new int[] { 4, 5, 8, 1, 2, 3 } é diferente de " + result1650 + " <calcNodes(graph, response.getAll().get(0))>")
chamada antiga: assertArrayEquals(new int[] { 4, 5, 6, 7, 7, 8, 3, 2 }, calcNodes(graph, response.getAll().get(0)))
nova chamada: assertArrayEquals(new int[] { 4, 5, 6, 7, 7, 8, 3, 2 }, calcNodes(graph, response.getAll().get(0)), "Era esperado arrays iguais, mas  new int[] { 4, 5, 6, 7, 7, 8, 3, 2 } é diferente de " + result1651 + " <calcNodes(graph, response.getAll().get(0))>")
chamada antiga: assertEquals(1, response.getAll().size())
nova chamada: assertEquals(1, response.getAll().size(), "Era esperado valores iguais, mas  1 é diferente de " + result1652 + " <response.getAll().size()>")
chamada antiga: assertArrayEquals(new int[] { 5, 4, 3, 3, 8, 1, 2, 3 }, calcNodes(graph, response.getAll().get(0)))
nova chamada: assertArrayEquals(new int[] { 5, 4, 3, 3, 8, 1, 2, 3 }, calcNodes(graph, response.getAll().get(0)), "Era esperado arrays iguais, mas  new int[] { 5, 4, 3, 3, 8, 1, 2, 3 } é diferente de " + result1653 + " <calcNodes(graph, response.getAll().get(0))>")
chamada antiga: assertArrayEquals(new int[] { 5, 4, 3, 8, 7, 7, 6, 5, 4, 3, 2 }, calcNodes(graph, response.getBest()))
nova chamada: assertArrayEquals(new int[] { 5, 4, 3, 8, 7, 7, 6, 5, 4, 3, 2 }, calcNodes(graph, response.getBest()), "Era esperado arrays iguais, mas  new int[] { 5, 4, 3, 8, 7, 7, 6, 5, 4, 3, 2 } é diferente de " + result1654 + " <calcNodes(graph, response.getBest())>")
chamada antiga: assertArrayEquals(new int[] { 8, 3, 2 }, calcNodes(graph, response.getAll().get(0)))
nova chamada: assertArrayEquals(new int[] { 8, 3, 2 }, calcNodes(graph, response.getAll().get(0)), "Era esperado arrays iguais, mas  new int[] { 8, 3, 2 } é diferente de " + result1655 + " <calcNodes(graph, response.getAll().get(0))>")
chamada antiga: assertArrayEquals(new int[] { 8, 3, 2 }, calcNodes(graph, response.getAll().get(0)))
nova chamada: assertArrayEquals(new int[] { 8, 3, 2 }, calcNodes(graph, response.getAll().get(0)), "Era esperado arrays iguais, mas  new int[] { 8, 3, 2 } é diferente de " + result1656 + " <calcNodes(graph, response.getAll().get(0))>")
chamada antiga: assertArrayEquals(new int[] { 1, 5, 4, 3, 2 }, calcNodes(graph, response.getAll().get(0)))
nova chamada: assertArrayEquals(new int[] { 1, 5, 4, 3, 2 }, calcNodes(graph, response.getAll().get(0)), "Era esperado arrays iguais, mas  new int[] { 1, 5, 4, 3, 2 } é diferente de " + result1657 + " <calcNodes(graph, response.getAll().get(0))>")
chamada antiga: assertArrayEquals(new int[] { 8, 3, 2 }, calcNodes(graph, response.getAll().get(0)))
nova chamada: assertArrayEquals(new int[] { 8, 3, 2 }, calcNodes(graph, response.getAll().get(0)), "Era esperado arrays iguais, mas  new int[] { 8, 3, 2 } é diferente de " + result1658 + " <calcNodes(graph, response.getAll().get(0))>")
chamada antiga: assertArrayEquals(new int[] { 8, 3, 2 }, calcNodes(graph, response.getAll().get(0)))
nova chamada: assertArrayEquals(new int[] { 8, 3, 2 }, calcNodes(graph, response.getAll().get(0)), "Era esperado arrays iguais, mas  new int[] { 8, 3, 2 } é diferente de " + result1659 + " <calcNodes(graph, response.getAll().get(0))>")
chamada antiga: assertArrayEquals(new int[] { 0, 1, 2, 3, 4 }, calcNodes(graph, response.getAll().get(0)))
nova chamada: assertArrayEquals(new int[] { 0, 1, 2, 3, 4 }, calcNodes(graph, response.getAll().get(0)), "Era esperado arrays iguais, mas  new int[] { 0, 1, 2, 3, 4 } é diferente de " + result1660 + " <calcNodes(graph, response.getAll().get(0))>")
chamada antiga: assertTrue(parser.getAccess(way).canSkip())
nova chamada: assertTrue(parser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result1661 + " <parser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).isWay())
nova chamada: assertTrue(parser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result1662 + " <parser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).canSkip())
nova chamada: assertTrue(parser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result1663 + " <parser.getAccess(way).canSkip()> é falso")
chamada antiga: assertEquals(RoadAccess.DESTINATION, rule.getAccess(createReaderWay("track"), TransportationMode.CAR, RoadAccess.YES))
nova chamada: assertEquals(RoadAccess.DESTINATION, rule.getAccess(createReaderWay("track"), TransportationMode.CAR, RoadAccess.YES), "Era esperado valores iguais, mas  RoadAccess.DESTINATION é diferente de " + result1664 + " <rule.getAccess(createReaderWay('track'), TransportationMode.CAR, RoadAccess.YES)>")
chamada antiga: assertEquals(RoadAccess.YES, rule.getAccess(createReaderWay("primary"), TransportationMode.CAR, RoadAccess.YES))
nova chamada: assertEquals(RoadAccess.YES, rule.getAccess(createReaderWay("primary"), TransportationMode.CAR, RoadAccess.YES), "Era esperado valores iguais, mas  RoadAccess.YES é diferente de " + result1665 + " <rule.getAccess(createReaderWay('primary'), TransportationMode.CAR, RoadAccess.YES)>")
chamada antiga: assertEquals(RoadAccess.FORESTRY, rule.getAccess(createReaderWay("track"), TransportationMode.CAR, RoadAccess.YES))
nova chamada: assertEquals(RoadAccess.FORESTRY, rule.getAccess(createReaderWay("track"), TransportationMode.CAR, RoadAccess.YES), "Era esperado valores iguais, mas  RoadAccess.FORESTRY é diferente de " + result1666 + " <rule.getAccess(createReaderWay('track'), TransportationMode.CAR, RoadAccess.YES)>")
chamada antiga: assertEquals(RoadAccess.YES, rule.getAccess(createReaderWay("primary"), TransportationMode.CAR, RoadAccess.YES))
nova chamada: assertEquals(RoadAccess.YES, rule.getAccess(createReaderWay("primary"), TransportationMode.CAR, RoadAccess.YES), "Era esperado valores iguais, mas  RoadAccess.YES é diferente de " + result1667 + " <rule.getAccess(createReaderWay('primary'), TransportationMode.CAR, RoadAccess.YES)>")
chamada antiga: assertEquals(RoadAccess.DESTINATION, rule.getAccess(createReaderWay("living_street"), TransportationMode.CAR, RoadAccess.YES))
nova chamada: assertEquals(RoadAccess.DESTINATION, rule.getAccess(createReaderWay("living_street"), TransportationMode.CAR, RoadAccess.YES), "Era esperado valores iguais, mas  RoadAccess.DESTINATION é diferente de " + result1668 + " <rule.getAccess(createReaderWay('living_street'), TransportationMode.CAR, RoadAccess.YES)>")
chamada antiga: assertTrue(parser.getAccess(way).canSkip())
nova chamada: assertTrue(parser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result1669 + " <parser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).isWay())
nova chamada: assertTrue(parser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result1670 + " <parser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).canSkip())
nova chamada: assertTrue(parser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result1671 + " <parser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).isWay())
nova chamada: assertTrue(parser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result1672 + " <parser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).canSkip())
nova chamada: assertTrue(parser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result1673 + " <parser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).isWay())
nova chamada: assertTrue(parser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result1674 + " <parser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).canSkip())
nova chamada: assertTrue(parser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result1675 + " <parser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).isFerry())
nova chamada: assertTrue(parser.getAccess(way).isFerry(), "Era esperado verdadeiro, mas " + result1676 + " <parser.getAccess(way).isFerry()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).canSkip())
nova chamada: assertTrue(parser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result1677 + " <parser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).canSkip())
nova chamada: assertTrue(parser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result1678 + " <parser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).canSkip())
nova chamada: assertTrue(parser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result1679 + " <parser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).canSkip())
nova chamada: assertTrue(parser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result1680 + " <parser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).canSkip())
nova chamada: assertTrue(parser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result1681 + " <parser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).canSkip())
nova chamada: assertTrue(parser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result1682 + " <parser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).canSkip())
nova chamada: assertTrue(parser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result1683 + " <parser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).canSkip())
nova chamada: assertTrue(parser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result1684 + " <parser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).isWay())
nova chamada: assertTrue(parser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result1685 + " <parser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).canSkip())
nova chamada: assertTrue(parser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result1686 + " <parser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).isWay())
nova chamada: assertTrue(parser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result1687 + " <parser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(motorcycleAccessEnc.getBool(true, edgeFlags))
nova chamada: assertTrue(motorcycleAccessEnc.getBool(true, edgeFlags), "Era esperado verdadeiro, mas " + result1688 + " <motorcycleAccessEnc.getBool(true, edgeFlags)> é falso")
chamada antiga: assertTrue(parser.getAccess(way).isWay())
nova chamada: assertTrue(parser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result1689 + " <parser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).canSkip())
nova chamada: assertTrue(parser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result1690 + " <parser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).isWay())
nova chamada: assertTrue(parser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result1691 + " <parser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).isWay())
nova chamada: assertTrue(parser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result1692 + " <parser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).canSkip())
nova chamada: assertTrue(parser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result1693 + " <parser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).isWay())
nova chamada: assertTrue(parser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result1694 + " <parser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).canSkip())
nova chamada: assertTrue(parser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result1695 + " <parser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).isWay())
nova chamada: assertTrue(parser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result1696 + " <parser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).isWay())
nova chamada: assertTrue(parser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result1697 + " <parser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).isWay())
nova chamada: assertTrue(parser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result1698 + " <parser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).isWay())
nova chamada: assertTrue(parser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result1699 + " <parser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).isWay())
nova chamada: assertTrue(parser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result1700 + " <parser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).isWay())
nova chamada: assertTrue(parser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result1701 + " <parser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).isWay())
nova chamada: assertTrue(parser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result1702 + " <parser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).isWay())
nova chamada: assertTrue(parser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result1703 + " <parser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).isWay())
nova chamada: assertTrue(parser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result1704 + " <parser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).canSkip())
nova chamada: assertTrue(parser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result1705 + " <parser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).canSkip())
nova chamada: assertTrue(parser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result1706 + " <parser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).canSkip())
nova chamada: assertTrue(parser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result1707 + " <parser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).isWay())
nova chamada: assertTrue(parser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result1708 + " <parser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).canSkip())
nova chamada: assertTrue(parser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result1709 + " <parser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).isWay())
nova chamada: assertTrue(parser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result1710 + " <parser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).canSkip())
nova chamada: assertTrue(parser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result1711 + " <parser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).isWay())
nova chamada: assertTrue(parser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result1712 + " <parser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).isWay())
nova chamada: assertTrue(parser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result1713 + " <parser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).isWay())
nova chamada: assertTrue(parser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result1714 + " <parser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).isWay())
nova chamada: assertTrue(parser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result1715 + " <parser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).canSkip())
nova chamada: assertTrue(parser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result1716 + " <parser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).canSkip())
nova chamada: assertTrue(parser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result1717 + " <parser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).isWay())
nova chamada: assertTrue(parser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result1718 + " <parser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).canSkip())
nova chamada: assertTrue(parser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result1719 + " <parser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).isWay())
nova chamada: assertTrue(parser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result1720 + " <parser.getAccess(way).isWay()> é falso")
chamada antiga: assertEquals(RouteNetwork.REGIONAL, enc.getEnum(false, edgeFlags))
nova chamada: assertEquals(RouteNetwork.REGIONAL, enc.getEnum(false, edgeFlags), "Era esperado valores iguais, mas  RouteNetwork.REGIONAL é diferente de " + result1721 + " <enc.getEnum(false, edgeFlags)>")
chamada antiga: assertTrue(parser.getAccess(way).isWay())
nova chamada: assertTrue(parser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result1722 + " <parser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).isWay())
nova chamada: assertTrue(parser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result1723 + " <parser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).isWay())
nova chamada: assertTrue(parser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result1724 + " <parser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).canSkip())
nova chamada: assertTrue(parser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result1725 + " <parser.getAccess(way).canSkip()> é falso")
chamada antiga: assertNotEquals(true, flags.isEmpty())
nova chamada: assertNotEquals(true, flags.isEmpty(), "Era esperado valores diferentes, mas  true é igual a " + result1726 + " <flags.isEmpty()>")
chamada antiga: assertNotEquals(true, flags.isEmpty())
nova chamada: assertNotEquals(true, flags.isEmpty(), "Era esperado valores diferentes, mas  true é igual a " + result1727 + " <flags.isEmpty()>")
chamada antiga: assertTrue(flags.isEmpty())
nova chamada: assertTrue(flags.isEmpty(), "Era esperado verdadeiro, mas " + result1728 + " <flags.isEmpty()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).isWay())
nova chamada: assertTrue(parser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result1729 + " <parser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).canSkip())
nova chamada: assertTrue(parser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result1730 + " <parser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(parser.isBarrier(node))
nova chamada: assertTrue(parser.isBarrier(node), "Era esperado verdadeiro, mas " + result1731 + " <parser.isBarrier(node)> é falso")
chamada antiga: assertTrue(parser.isBarrier(node))
nova chamada: assertTrue(parser.isBarrier(node), "Era esperado verdadeiro, mas " + result1732 + " <parser.isBarrier(node)> é falso")
chamada antiga: assertTrue(parser.isBarrier(node))
nova chamada: assertTrue(parser.isBarrier(node), "Era esperado verdadeiro, mas " + result1733 + " <parser.isBarrier(node)> é falso")
chamada antiga: assertTrue(parser.isBarrier(node))
nova chamada: assertTrue(parser.isBarrier(node), "Era esperado verdadeiro, mas " + result1734 + " <parser.isBarrier(node)> é falso")
chamada antiga: assertTrue(parser.isBarrier(node))
nova chamada: assertTrue(parser.isBarrier(node), "Era esperado verdadeiro, mas " + result1735 + " <parser.isBarrier(node)> é falso")
chamada antiga: assertTrue(parser.isBarrier(node))
nova chamada: assertTrue(parser.isBarrier(node), "Era esperado verdadeiro, mas " + result1736 + " <parser.isBarrier(node)> é falso")
chamada antiga: assertTrue(parser.getAccess(way).isFerry())
nova chamada: assertTrue(parser.getAccess(way).isFerry(), "Era esperado verdadeiro, mas " + result1737 + " <parser.getAccess(way).isFerry()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).canSkip())
nova chamada: assertTrue(parser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result1738 + " <parser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).isFerry())
nova chamada: assertTrue(parser.getAccess(way).isFerry(), "Era esperado verdadeiro, mas " + result1739 + " <parser.getAccess(way).isFerry()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).isFerry())
nova chamada: assertTrue(parser.getAccess(way).isFerry(), "Era esperado verdadeiro, mas " + result1740 + " <parser.getAccess(way).isFerry()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).isFerry())
nova chamada: assertTrue(parser.getAccess(way).isFerry(), "Era esperado verdadeiro, mas " + result1741 + " <parser.getAccess(way).isFerry()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).isFerry())
nova chamada: assertTrue(parser.getAccess(way).isFerry(), "Era esperado verdadeiro, mas " + result1742 + " <parser.getAccess(way).isFerry()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).canSkip())
nova chamada: assertTrue(parser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result1743 + " <parser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).canSkip())
nova chamada: assertTrue(parser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result1744 + " <parser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).canSkip())
nova chamada: assertTrue(parser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result1745 + " <parser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(bike.restrictedValues.contains("private"))
nova chamada: assertTrue(bike.restrictedValues.contains("private"), "Era esperado verdadeiro, mas " + result1746 + " <bike.restrictedValues.contains('private')> é falso")
chamada antiga: assertTrue(bike.isBlockFords())
nova chamada: assertTrue(bike.isBlockFords(), "Era esperado verdadeiro, mas " + result1747 + " <bike.isBlockFords()> é falso")
chamada antiga: assertTrue(bike.intendedValues.contains("private"))
nova chamada: assertTrue(bike.intendedValues.contains("private"), "Era esperado verdadeiro, mas " + result1748 + " <bike.intendedValues.contains('private')> é falso")
chamada antiga: assertFalse(findPathUsingDijkstra(2, 1).isFound())
nova chamada: assertFalse(findPathUsingDijkstra(2, 1).isFound(), "Era esperado falso, mas " + result1749 + " <findPathUsingDijkstra(2, 1).isFound()> é verdadeiro ")
chamada antiga: assertFalse(response.hasErrors())
nova chamada: assertFalse(response.hasErrors(), "Era esperado falso, mas " + result1750 + " <response.hasErrors()> é verdadeiro ")
chamada antiga: assertFalse(response.hasErrors())
nova chamada: assertFalse(response.hasErrors(), "Era esperado falso, mas " + result1751 + " <response.hasErrors()> é verdadeiro ")
chamada antiga: assertFalse(response.hasErrors())
nova chamada: assertFalse(response.hasErrors(), "Era esperado falso, mas " + result1752 + " <response.hasErrors()> é verdadeiro ")
chamada antiga: assertFalse(response.hasErrors())
nova chamada: assertFalse(response.hasErrors(), "Era esperado falso, mas " + result1753 + " <response.hasErrors()> é verdadeiro ")
chamada antiga: assertFalse(response.hasErrors())
nova chamada: assertFalse(response.hasErrors(), "Era esperado falso, mas " + result1754 + " <response.hasErrors()> é verdadeiro ")
chamada antiga: assertFalse(response.hasErrors())
nova chamada: assertFalse(response.hasErrors(), "Era esperado falso, mas " + result1755 + " <response.hasErrors()> é verdadeiro ")
chamada antiga: assertFalse(response.hasErrors())
nova chamada: assertFalse(response.hasErrors(), "Era esperado falso, mas " + result1756 + " <response.hasErrors()> é verdadeiro ")
chamada antiga: assertFalse(response.hasErrors())
nova chamada: assertFalse(response.hasErrors(), "Era esperado falso, mas " + result1757 + " <response.hasErrors()> é verdadeiro ")
chamada antiga: assertFalse(response.hasErrors())
nova chamada: assertFalse(response.hasErrors(), "Era esperado falso, mas " + result1758 + " <response.hasErrors()> é verdadeiro ")
chamada antiga: assertFalse(response.hasErrors())
nova chamada: assertFalse(response.hasErrors(), "Era esperado falso, mas " + result1759 + " <response.hasErrors()> é verdadeiro ")
chamada antiga: assertFalse(motorcycleAccessEnc.getBool(false, edgeFlags))
nova chamada: assertFalse(motorcycleAccessEnc.getBool(false, edgeFlags), "Era esperado falso, mas " + result1760 + " <motorcycleAccessEnc.getBool(false, edgeFlags)> é verdadeiro ")
chamada antiga: assertFalse(parser.isBarrier(node))
nova chamada: assertFalse(parser.isBarrier(node), "Era esperado falso, mas " + result1761 + " <parser.isBarrier(node)> é verdadeiro ")
chamada antiga: assertFalse(parser.isBarrier(node))
nova chamada: assertFalse(parser.isBarrier(node), "Era esperado falso, mas " + result1762 + " <parser.isBarrier(node)> é verdadeiro ")
chamada antiga: assertFalse(parser.isBarrier(node))
nova chamada: assertFalse(parser.isBarrier(node), "Era esperado falso, mas " + result1763 + " <parser.isBarrier(node)> é verdadeiro ")
chamada antiga: assertFalse(parser.isBarrier(node))
nova chamada: assertFalse(parser.isBarrier(node), "Era esperado falso, mas " + result1764 + " <parser.isBarrier(node)> é verdadeiro ")
chamada antiga: assertFalse(parser.getAccess(way).isFerry())
nova chamada: assertFalse(parser.getAccess(way).isFerry(), "Era esperado falso, mas " + result1765 + " <parser.getAccess(way).isFerry()> é verdadeiro ")
chamada antiga: assertFalse(parser.getAccess(way).isFerry())
nova chamada: assertFalse(parser.getAccess(way).isFerry(), "Era esperado falso, mas " + result1766 + " <parser.getAccess(way).isFerry()> é verdadeiro ")
chamada antiga: assertFalse(bike.isBlockFords())
nova chamada: assertFalse(bike.isBlockFords(), "Era esperado falso, mas " + result1767 + " <bike.isBlockFords()> é verdadeiro ")
chamada antiga: assertFalse(bike.intendedValues.contains("private"))
nova chamada: assertFalse(bike.intendedValues.contains("private"), "Era esperado falso, mas " + result1768 + " <bike.intendedValues.contains('private')> é verdadeiro ")
chamada antiga: assertFalse(bike.restrictedValues.contains("private"))
nova chamada: assertFalse(bike.restrictedValues.contains("private"), "Era esperado falso, mas " + result1769 + " <bike.restrictedValues.contains('private')> é verdadeiro ")
chamada antiga: assertTrue(filter.accept(GHUtility.createMockedEdgeIteratorState(1, intsRef)))
nova chamada: assertTrue(filter.accept(GHUtility.createMockedEdgeIteratorState(1, intsRef)), "Era esperado verdadeiro, mas " + result1770 + " <filter.accept(GHUtility.createMockedEdgeIteratorState(1, intsRef))> é falso")
chamada antiga: assertFalse(filter.accept(GHUtility.createMockedEdgeIteratorState(1, intsRef)))
nova chamada: assertFalse(filter.accept(GHUtility.createMockedEdgeIteratorState(1, intsRef)), "Era esperado falso, mas " + result1771 + " <filter.accept(GHUtility.createMockedEdgeIteratorState(1, intsRef))> é verdadeiro ")
chamada antiga: assertTrue(filter.accept(GHUtility.createMockedEdgeIteratorState(1, intsRef)))
nova chamada: assertTrue(filter.accept(GHUtility.createMockedEdgeIteratorState(1, intsRef)), "Era esperado verdadeiro, mas " + result1772 + " <filter.accept(GHUtility.createMockedEdgeIteratorState(1, intsRef))> é falso")
chamada antiga: assertTrue(filter.accept(GHUtility.createMockedEdgeIteratorState(1, intsRef)))
nova chamada: assertTrue(filter.accept(GHUtility.createMockedEdgeIteratorState(1, intsRef)), "Era esperado verdadeiro, mas " + result1773 + " <filter.accept(GHUtility.createMockedEdgeIteratorState(1, intsRef))> é falso")
chamada antiga: assertFalse(filter.accept(GHUtility.createMockedEdgeIteratorState(1, intsRef)))
nova chamada: assertFalse(filter.accept(GHUtility.createMockedEdgeIteratorState(1, intsRef)), "Era esperado falso, mas " + result1774 + " <filter.accept(GHUtility.createMockedEdgeIteratorState(1, intsRef))> é verdadeiro ")
chamada antiga: assertEquals(oldFlags, edge.getFlags())
nova chamada: assertEquals(oldFlags, edge.getFlags(), "Era esperado valores iguais, mas  oldFlags é diferente de " + result1775 + " <edge.getFlags()>")
chamada antiga: assertTrue(parser.getAccessEnc().getBool(true, edgeFlags))
nova chamada: assertTrue(parser.getAccessEnc().getBool(true, edgeFlags), "Era esperado verdadeiro, mas " + result1776 + " <parser.getAccessEnc().getBool(true, edgeFlags)> é falso")
chamada antiga: assertNotEquals(WayAccess.CAN_SKIP, parser.getAccess(way))
nova chamada: assertNotEquals(WayAccess.CAN_SKIP, parser.getAccess(way), "Era esperado valores diferentes, mas  WayAccess.CAN_SKIP é igual a " + result1777 + " <parser.getAccess(way)>")
chamada antiga: assertTrue(isGraphValid(graph, parser.getAccessEnc()))
nova chamada: assertTrue(isGraphValid(graph, parser.getAccessEnc()), "Era esperado verdadeiro, mas " + result1778 + " <isGraphValid(graph, parser.getAccessEnc())> é falso")
chamada antiga: assertTrue(edge.get(wheelchairAccessEnc))
nova chamada: assertTrue(edge.get(wheelchairAccessEnc), "Era esperado verdadeiro, mas " + result1779 + " <edge.get(wheelchairAccessEnc)> é falso")
chamada antiga: assertTrue(edge.getReverse(wheelchairAccessEnc))
nova chamada: assertTrue(edge.getReverse(wheelchairAccessEnc), "Era esperado verdadeiro, mas " + result1780 + " <edge.getReverse(wheelchairAccessEnc)> é falso")
chamada antiga: assertTrue(edge.get(carAccessEnc))
nova chamada: assertTrue(edge.get(carAccessEnc), "Era esperado verdadeiro, mas " + result1781 + " <edge.get(carAccessEnc)> é falso")
chamada antiga: assertEquals(GHUtility.asSet(1, 2), GHUtility.getNeighbors(out.setBaseNode(0)))
nova chamada: assertEquals(GHUtility.asSet(1, 2), GHUtility.getNeighbors(out.setBaseNode(0)), "Era esperado valores iguais, mas " + result1782 + " <GHUtility.asSet(1, 2)> é diferente de " + result1783 + " <GHUtility.getNeighbors(out.setBaseNode(0))>")
chamada antiga: assertEquals(GHUtility.asSet(0, 3), GHUtility.getNeighbors(out.setBaseNode(1)))
nova chamada: assertEquals(GHUtility.asSet(0, 3), GHUtility.getNeighbors(out.setBaseNode(1)), "Era esperado valores iguais, mas " + result1784 + " <GHUtility.asSet(0, 3)> é diferente de " + result1785 + " <GHUtility.getNeighbors(out.setBaseNode(1))>")
chamada antiga: assertEquals(GHUtility.asSet(0), GHUtility.getNeighbors(out.setBaseNode(2)))
nova chamada: assertEquals(GHUtility.asSet(0), GHUtility.getNeighbors(out.setBaseNode(2)), "Era esperado valores iguais, mas " + result1786 + " <GHUtility.asSet(0)> é diferente de " + result1787 + " <GHUtility.getNeighbors(out.setBaseNode(2))>")
chamada antiga: assertTrue(wheelchairParser.getAccess(way).isWay())
nova chamada: assertTrue(wheelchairParser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result1788 + " <wheelchairParser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(wheelchairParser.getAccess(way).isWay())
nova chamada: assertTrue(wheelchairParser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result1789 + " <wheelchairParser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(wheelchairParser.getAccess(way).canSkip())
nova chamada: assertTrue(wheelchairParser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result1790 + " <wheelchairParser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(wheelchairParser.getAccess(way).canSkip())
nova chamada: assertTrue(wheelchairParser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result1791 + " <wheelchairParser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(wheelchairParser.getAccess(way).isWay())
nova chamada: assertTrue(wheelchairParser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result1792 + " <wheelchairParser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(wheelchairParser.getAccess(way).isWay())
nova chamada: assertTrue(wheelchairParser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result1793 + " <wheelchairParser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(wheelchairParser.getAccess(way).isWay())
nova chamada: assertTrue(wheelchairParser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result1794 + " <wheelchairParser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(wheelchairParser.getAccess(way).canSkip())
nova chamada: assertTrue(wheelchairParser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result1795 + " <wheelchairParser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(wheelchairParser.getAccess(way).canSkip())
nova chamada: assertTrue(wheelchairParser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result1796 + " <wheelchairParser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(wheelchairParser.getAccess(way).canSkip())
nova chamada: assertTrue(wheelchairParser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result1797 + " <wheelchairParser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(wheelchairParser.getAccess(way).isWay())
nova chamada: assertTrue(wheelchairParser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result1798 + " <wheelchairParser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(wheelchairParser.getAccess(way).canSkip())
nova chamada: assertTrue(wheelchairParser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result1799 + " <wheelchairParser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(wheelchairParser.getAccess(way).isWay())
nova chamada: assertTrue(wheelchairParser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result1800 + " <wheelchairParser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(wheelchairParser.getAccess(way).isWay())
nova chamada: assertTrue(wheelchairParser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result1801 + " <wheelchairParser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(wheelchairParser.getAccess(way).canSkip())
nova chamada: assertTrue(wheelchairParser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result1802 + " <wheelchairParser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(wheelchairParser.getAccess(way).canSkip())
nova chamada: assertTrue(wheelchairParser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result1803 + " <wheelchairParser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(wheelchairParser.getAccess(way).isWay())
nova chamada: assertTrue(wheelchairParser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result1804 + " <wheelchairParser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(wheelchairParser.getAccess(way).canSkip())
nova chamada: assertTrue(wheelchairParser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result1805 + " <wheelchairParser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(wheelchairParser.getAccess(way).canSkip())
nova chamada: assertTrue(wheelchairParser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result1806 + " <wheelchairParser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(wheelchairParser.getAccess(way).isWay())
nova chamada: assertTrue(wheelchairParser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result1807 + " <wheelchairParser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(wheelchairParser.getAccess(way).canSkip())
nova chamada: assertTrue(wheelchairParser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result1808 + " <wheelchairParser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(wheelchairParser.getAccess(way).isFerry())
nova chamada: assertTrue(wheelchairParser.getAccess(way).isFerry(), "Era esperado verdadeiro, mas " + result1809 + " <wheelchairParser.getAccess(way).isFerry()> é falso")
chamada antiga: assertTrue(wheelchairParser.getAccess(way).canSkip())
nova chamada: assertTrue(wheelchairParser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result1810 + " <wheelchairParser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(wheelchairParser.getAccess(way).isFerry())
nova chamada: assertTrue(wheelchairParser.getAccess(way).isFerry(), "Era esperado verdadeiro, mas " + result1811 + " <wheelchairParser.getAccess(way).isFerry()> é falso")
chamada antiga: assertTrue(wheelchairParser.getAccess(way).isFerry())
nova chamada: assertTrue(wheelchairParser.getAccess(way).isFerry(), "Era esperado verdadeiro, mas " + result1812 + " <wheelchairParser.getAccess(way).isFerry()> é falso")
chamada antiga: assertTrue(wheelchairParser.getAccess(way).isFerry())
nova chamada: assertTrue(wheelchairParser.getAccess(way).isFerry(), "Era esperado verdadeiro, mas " + result1813 + " <wheelchairParser.getAccess(way).isFerry()> é falso")
chamada antiga: assertTrue(wheelchairParser.getAccess(way).isFerry())
nova chamada: assertTrue(wheelchairParser.getAccess(way).isFerry(), "Era esperado verdadeiro, mas " + result1814 + " <wheelchairParser.getAccess(way).isFerry()> é falso")
chamada antiga: assertTrue(wheelchairParser.getAccess(way).canSkip())
nova chamada: assertTrue(wheelchairParser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result1815 + " <wheelchairParser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(wheelchairParser.getAccess(way).canSkip())
nova chamada: assertTrue(wheelchairParser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result1816 + " <wheelchairParser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(wheelchairParser.getAccess(way).canSkip())
nova chamada: assertTrue(wheelchairParser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result1817 + " <wheelchairParser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(wheelchairParser.getAccess(way).isWay())
nova chamada: assertTrue(wheelchairParser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result1818 + " <wheelchairParser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(wheelchairParser.getAccess(way).canSkip())
nova chamada: assertTrue(wheelchairParser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result1819 + " <wheelchairParser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(wheelchairParser.getAccess(way).isWay())
nova chamada: assertTrue(wheelchairParser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result1820 + " <wheelchairParser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(wheelchairParser.getAccess(way).canSkip())
nova chamada: assertTrue(wheelchairParser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result1821 + " <wheelchairParser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(wheelchairParser.getAccess(way).canSkip())
nova chamada: assertTrue(wheelchairParser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result1822 + " <wheelchairParser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(wheelchairParser.getAccess(way).isWay())
nova chamada: assertTrue(wheelchairParser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result1823 + " <wheelchairParser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(wheelchairParser.getAccess(way).isWay())
nova chamada: assertTrue(wheelchairParser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result1824 + " <wheelchairParser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(wheelchairParser.getAccess(way).isWay())
nova chamada: assertTrue(wheelchairParser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result1825 + " <wheelchairParser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(wheelchairParser.getAccess(way).canSkip())
nova chamada: assertTrue(wheelchairParser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result1826 + " <wheelchairParser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(wheelchairParser.getAccess(way).isWay())
nova chamada: assertTrue(wheelchairParser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result1827 + " <wheelchairParser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(wheelchairParser.getAccess(way).canSkip())
nova chamada: assertTrue(wheelchairParser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result1828 + " <wheelchairParser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(wheelchairParser.getAccess(way).isWay())
nova chamada: assertTrue(wheelchairParser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result1829 + " <wheelchairParser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(wheelchairParser.getAccess(way).canSkip())
nova chamada: assertTrue(wheelchairParser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result1830 + " <wheelchairParser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(wheelchairParser.getAccess(way).isWay())
nova chamada: assertTrue(wheelchairParser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result1831 + " <wheelchairParser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(wheelchairParser.getAccess(way).canSkip())
nova chamada: assertTrue(wheelchairParser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result1832 + " <wheelchairParser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(wheelchairParser.getAccess(way).canSkip())
nova chamada: assertTrue(wheelchairParser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result1833 + " <wheelchairParser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(wheelchairParser.getAccess(way).isWay())
nova chamada: assertTrue(wheelchairParser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result1834 + " <wheelchairParser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(wheelchairParser.getAccess(way).isWay())
nova chamada: assertTrue(wheelchairParser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result1835 + " <wheelchairParser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(wheelchairParser.getAccess(way).isWay())
nova chamada: assertTrue(wheelchairParser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result1836 + " <wheelchairParser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(wheelchairParser.getAccess(way).canSkip())
nova chamada: assertTrue(wheelchairParser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result1837 + " <wheelchairParser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(wheelchairParser.getAccess(way).isWay())
nova chamada: assertTrue(wheelchairParser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result1838 + " <wheelchairParser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(wheelchairParser.getAccess(way).canSkip())
nova chamada: assertTrue(wheelchairParser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result1839 + " <wheelchairParser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(wheelchairParser.getAccess(way).isWay())
nova chamada: assertTrue(wheelchairParser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result1840 + " <wheelchairParser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(wheelchairParser.getAccess(way).canSkip())
nova chamada: assertTrue(wheelchairParser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result1841 + " <wheelchairParser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(wheelchairParser.getAccess(way).isWay())
nova chamada: assertTrue(wheelchairParser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result1842 + " <wheelchairParser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(flags.isEmpty())
nova chamada: assertTrue(flags.isEmpty(), "Era esperado verdadeiro, mas " + result1843 + " <flags.isEmpty()> é falso")
chamada antiga: assertEquals(PriorityCode.UNCHANGED.getValue(), wheelchairParser.handlePriority(way, null))
nova chamada: assertEquals(PriorityCode.UNCHANGED.getValue(), wheelchairParser.handlePriority(way, null), "Era esperado valores iguais, mas " + result1844 + " <PriorityCode.UNCHANGED.getValue()> é diferente de " + result1845 + " <wheelchairParser.handlePriority(way, null)>")
chamada antiga: assertEquals(PriorityCode.AVOID.getValue(), wheelchairParser.handlePriority(way, null))
nova chamada: assertEquals(PriorityCode.AVOID.getValue(), wheelchairParser.handlePriority(way, null), "Era esperado valores iguais, mas " + result1846 + " <PriorityCode.AVOID.getValue()> é diferente de " + result1847 + " <wheelchairParser.handlePriority(way, null)>")
chamada antiga: assertEquals(PriorityCode.AVOID.getValue(), wheelchairParser.handlePriority(way, null))
nova chamada: assertEquals(PriorityCode.AVOID.getValue(), wheelchairParser.handlePriority(way, null), "Era esperado valores iguais, mas " + result1848 + " <PriorityCode.AVOID.getValue()> é diferente de " + result1849 + " <wheelchairParser.handlePriority(way, null)>")
chamada antiga: assertEquals(PriorityCode.SLIGHT_AVOID.getValue(), wheelchairParser.handlePriority(way, null))
nova chamada: assertEquals(PriorityCode.SLIGHT_AVOID.getValue(), wheelchairParser.handlePriority(way, null), "Era esperado valores iguais, mas " + result1850 + " <PriorityCode.SLIGHT_AVOID.getValue()> é diferente de " + result1851 + " <wheelchairParser.handlePriority(way, null)>")
chamada antiga: assertEquals(PriorityCode.SLIGHT_AVOID.getValue(), wheelchairParser.handlePriority(way, null))
nova chamada: assertEquals(PriorityCode.SLIGHT_AVOID.getValue(), wheelchairParser.handlePriority(way, null), "Era esperado valores iguais, mas " + result1852 + " <PriorityCode.SLIGHT_AVOID.getValue()> é diferente de " + result1853 + " <wheelchairParser.handlePriority(way, null)>")
chamada antiga: assertEquals(PriorityCode.PREFER.getValue(), wheelchairParser.handlePriority(way, null))
nova chamada: assertEquals(PriorityCode.PREFER.getValue(), wheelchairParser.handlePriority(way, null), "Era esperado valores iguais, mas " + result1854 + " <PriorityCode.PREFER.getValue()> é diferente de " + result1855 + " <wheelchairParser.handlePriority(way, null)>")
chamada antiga: assertEquals(PriorityCode.UNCHANGED.getValue(), wheelchairParser.handlePriority(way, null))
nova chamada: assertEquals(PriorityCode.UNCHANGED.getValue(), wheelchairParser.handlePriority(way, null), "Era esperado valores iguais, mas " + result1856 + " <PriorityCode.UNCHANGED.getValue()> é diferente de " + result1857 + " <wheelchairParser.handlePriority(way, null)>")
chamada antiga: assertEquals(PriorityCode.UNCHANGED.getValue(), wheelchairParser.handlePriority(way, null))
nova chamada: assertEquals(PriorityCode.UNCHANGED.getValue(), wheelchairParser.handlePriority(way, null), "Era esperado valores iguais, mas " + result1858 + " <PriorityCode.UNCHANGED.getValue()> é diferente de " + result1859 + " <wheelchairParser.handlePriority(way, null)>")
chamada antiga: assertEquals(PriorityCode.SLIGHT_AVOID.getValue(), wheelchairParser.handlePriority(way, null))
nova chamada: assertEquals(PriorityCode.SLIGHT_AVOID.getValue(), wheelchairParser.handlePriority(way, null), "Era esperado valores iguais, mas " + result1860 + " <PriorityCode.SLIGHT_AVOID.getValue()> é diferente de " + result1861 + " <wheelchairParser.handlePriority(way, null)>")
chamada antiga: assertEquals(PriorityCode.AVOID.getValue(), wheelchairParser.handlePriority(way, null))
nova chamada: assertEquals(PriorityCode.AVOID.getValue(), wheelchairParser.handlePriority(way, null), "Era esperado valores iguais, mas " + result1862 + " <PriorityCode.AVOID.getValue()> é diferente de " + result1863 + " <wheelchairParser.handlePriority(way, null)>")
chamada antiga: assertEquals(PriorityCode.AVOID.getValue(), wheelchairParser.handlePriority(way, null))
nova chamada: assertEquals(PriorityCode.AVOID.getValue(), wheelchairParser.handlePriority(way, null), "Era esperado valores iguais, mas " + result1864 + " <PriorityCode.AVOID.getValue()> é diferente de " + result1865 + " <wheelchairParser.handlePriority(way, null)>")
chamada antiga: assertEquals(PriorityCode.PREFER.getValue(), wheelchairParser.handlePriority(way, null))
nova chamada: assertEquals(PriorityCode.PREFER.getValue(), wheelchairParser.handlePriority(way, null), "Era esperado valores iguais, mas " + result1866 + " <PriorityCode.PREFER.getValue()> é diferente de " + result1867 + " <wheelchairParser.handlePriority(way, null)>")
chamada antiga: assertEquals(PriorityCode.PREFER.getValue(), wheelchairParser.handlePriority(way, null))
nova chamada: assertEquals(PriorityCode.PREFER.getValue(), wheelchairParser.handlePriority(way, null), "Era esperado valores iguais, mas " + result1868 + " <PriorityCode.PREFER.getValue()> é diferente de " + result1869 + " <wheelchairParser.handlePriority(way, null)>")
chamada antiga: assertEquals(PriorityCode.VERY_NICE.getValue(), wheelchairParser.handlePriority(way, null))
nova chamada: assertEquals(PriorityCode.VERY_NICE.getValue(), wheelchairParser.handlePriority(way, null), "Era esperado valores iguais, mas " + result1870 + " <PriorityCode.VERY_NICE.getValue()> é diferente de " + result1871 + " <wheelchairParser.handlePriority(way, null)>")
chamada antiga: assertEquals(PriorityCode.PREFER.getValue(), wheelchairParser.handlePriority(way, null))
nova chamada: assertEquals(PriorityCode.PREFER.getValue(), wheelchairParser.handlePriority(way, null), "Era esperado valores iguais, mas " + result1872 + " <PriorityCode.PREFER.getValue()> é diferente de " + result1873 + " <wheelchairParser.handlePriority(way, null)>")
chamada antiga: assertEquals(PriorityCode.AVOID.getValue(), wheelchairParser.handlePriority(way, null))
nova chamada: assertEquals(PriorityCode.AVOID.getValue(), wheelchairParser.handlePriority(way, null), "Era esperado valores iguais, mas " + result1874 + " <PriorityCode.AVOID.getValue()> é diferente de " + result1875 + " <wheelchairParser.handlePriority(way, null)>")
chamada antiga: assertTrue(wheelchairParser.isBarrier(node))
nova chamada: assertTrue(wheelchairParser.isBarrier(node), "Era esperado verdadeiro, mas " + result1876 + " <wheelchairParser.isBarrier(node)> é falso")
chamada antiga: assertTrue(wheelchairParser.isBarrier(node))
nova chamada: assertTrue(wheelchairParser.isBarrier(node), "Era esperado verdadeiro, mas " + result1877 + " <wheelchairParser.isBarrier(node)> é falso")
chamada antiga: assertTrue(wheelchairParser.isBarrier(node))
nova chamada: assertTrue(wheelchairParser.isBarrier(node), "Era esperado verdadeiro, mas " + result1878 + " <wheelchairParser.isBarrier(node)> é falso")
chamada antiga: assertTrue(wheelchairParser.isBarrier(node))
nova chamada: assertTrue(wheelchairParser.isBarrier(node), "Era esperado verdadeiro, mas " + result1879 + " <wheelchairParser.isBarrier(node)> é falso")
chamada antiga: assertTrue(wheelchairParser.isBarrier(node))
nova chamada: assertTrue(wheelchairParser.isBarrier(node), "Era esperado verdadeiro, mas " + result1880 + " <wheelchairParser.isBarrier(node)> é falso")
chamada antiga: assertTrue(wheelchairParser.isBarrier(node))
nova chamada: assertTrue(wheelchairParser.isBarrier(node), "Era esperado verdadeiro, mas " + result1881 + " <wheelchairParser.isBarrier(node)> é falso")
chamada antiga: assertTrue(wheelchairParser.isBarrier(node))
nova chamada: assertTrue(wheelchairParser.isBarrier(node), "Era esperado verdadeiro, mas " + result1882 + " <wheelchairParser.isBarrier(node)> é falso")
chamada antiga: assertTrue(wheelchairParser.isBarrier(node))
nova chamada: assertTrue(wheelchairParser.isBarrier(node), "Era esperado verdadeiro, mas " + result1883 + " <wheelchairParser.isBarrier(node)> é falso")
chamada antiga: assertTrue(wheelchairParser.getAccess(way).isWay())
nova chamada: assertTrue(wheelchairParser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result1884 + " <wheelchairParser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(wheelchairParser.getAccess(way).canSkip())
nova chamada: assertTrue(wheelchairParser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result1885 + " <wheelchairParser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(wheelchairParser.getAccess(way).canSkip())
nova chamada: assertTrue(wheelchairParser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result1886 + " <wheelchairParser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(wheelchairParser.getAccess(way).canSkip())
nova chamada: assertTrue(wheelchairParser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result1887 + " <wheelchairParser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(wheelchairParser.getAccess(way).isWay())
nova chamada: assertTrue(wheelchairParser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result1888 + " <wheelchairParser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(wheelchairParser.getAccess(way).isWay())
nova chamada: assertTrue(wheelchairParser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result1889 + " <wheelchairParser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(wheelchairParser.getAccess(way).canSkip())
nova chamada: assertTrue(wheelchairParser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result1890 + " <wheelchairParser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(wheelchairParser.getAccess(way).isWay())
nova chamada: assertTrue(wheelchairParser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result1891 + " <wheelchairParser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(wheelchairParser.getAccess(way).canSkip())
nova chamada: assertTrue(wheelchairParser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result1892 + " <wheelchairParser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(wheelchairParser.getAccess(way).isWay())
nova chamada: assertTrue(wheelchairParser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result1893 + " <wheelchairParser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(wheelchairParser.getAccess(way).canSkip())
nova chamada: assertTrue(wheelchairParser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result1894 + " <wheelchairParser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(wheelchairParser.getAccess(way).isWay())
nova chamada: assertTrue(wheelchairParser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result1895 + " <wheelchairParser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(wheelchairParser.getAccess(way).canSkip())
nova chamada: assertTrue(wheelchairParser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result1896 + " <wheelchairParser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(edge01.get(wheelchairAccessEnc))
nova chamada: assertTrue(edge01.get(wheelchairAccessEnc), "Era esperado verdadeiro, mas " + result1897 + " <edge01.get(wheelchairAccessEnc)> é falso")
chamada antiga: assertTrue(edge01.getReverse(wheelchairAccessEnc))
nova chamada: assertTrue(edge01.getReverse(wheelchairAccessEnc), "Era esperado verdadeiro, mas " + result1898 + " <edge01.getReverse(wheelchairAccessEnc)> é falso")
chamada antiga: assertTrue(edge23.get(wheelchairAccessEnc))
nova chamada: assertTrue(edge23.get(wheelchairAccessEnc), "Era esperado verdadeiro, mas " + result1899 + " <edge23.get(wheelchairAccessEnc)> é falso")
chamada antiga: assertTrue(edge23.getReverse(wheelchairAccessEnc))
nova chamada: assertTrue(edge23.getReverse(wheelchairAccessEnc), "Era esperado verdadeiro, mas " + result1900 + " <edge23.getReverse(wheelchairAccessEnc)> é falso")
chamada antiga: assertEquals("Germany", countryIndex.query(52.5243700, 13.4105300).get(0).getProperties().get("name:en"))
nova chamada: assertEquals("Germany", countryIndex.query(52.5243700, 13.4105300).get(0).getProperties().get("name:en"), "Era esperado valores iguais, mas  'Germany' é diferente de " + result1901 + " <countryIndex.query(52.5243700, 13.4105300).get(0).getProperties().get('name:en')>")
chamada antiga: assertEquals("France", countryIndex.query(48.864716, 2.349014).get(0).getProperties().get("name:en"))
nova chamada: assertEquals("France", countryIndex.query(48.864716, 2.349014).get(0).getProperties().get("name:en"), "Era esperado valores iguais, mas  'France' é diferente de " + result1902 + " <countryIndex.query(48.864716, 2.349014).get(0).getProperties().get('name:en')>")
chamada antiga: assertEquals("Austria", countryIndex.query(48.204484, 16.107888).get(0).getProperties().get("name:en"))
nova chamada: assertEquals("Austria", countryIndex.query(48.204484, 16.107888).get(0).getProperties().get("name:en"), "Era esperado valores iguais, mas  'Austria' é diferente de " + result1903 + " <countryIndex.query(48.204484, 16.107888).get(0).getProperties().get('name:en')>")
chamada antiga: assertEquals(new HashSet<>(Arrays.asList(ids)), resultIds)
nova chamada: assertEquals(new HashSet<>(Arrays.asList(ids)), resultIds, "Era esperado valores iguais, mas  new HashSet(Arrays.asList(ids)) é diferente de " + " resultIds")
chamada antiga: assertEquals(ids.length, result.size())
nova chamada: assertEquals(ids.length, result.size(), "Era esperado valores iguais, mas  ids.length é diferente de " + result1904 + " <result.size()>")
chamada antiga: assertEquals(Smoothness.MISSING, smoothnessEnc.getEnum(false, intsRef))
nova chamada: assertEquals(Smoothness.MISSING, smoothnessEnc.getEnum(false, intsRef), "Era esperado valores iguais, mas  Smoothness.MISSING é diferente de " + result1905 + " <smoothnessEnc.getEnum(false, intsRef)>")
chamada antiga: assertEquals(Smoothness.BAD, smoothnessEnc.getEnum(false, intsRef))
nova chamada: assertEquals(Smoothness.BAD, smoothnessEnc.getEnum(false, intsRef), "Era esperado valores iguais, mas  Smoothness.BAD é diferente de " + result1906 + " <smoothnessEnc.getEnum(false, intsRef)>")
chamada antiga: assertTrue(Smoothness.BAD.ordinal() < Smoothness.VERY_BAD.ordinal())
nova chamada: assertTrue(Smoothness.BAD.ordinal() < Smoothness.VERY_BAD.ordinal(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(Surface.MISSING, surfaceEnc.getEnum(false, intsRef))
nova chamada: assertEquals(Surface.MISSING, surfaceEnc.getEnum(false, intsRef), "Era esperado valores iguais, mas  Surface.MISSING é diferente de " + result1907 + " <surfaceEnc.getEnum(false, intsRef)>")
chamada antiga: assertEquals(Surface.COBBLESTONE, surfaceEnc.getEnum(false, intsRef))
nova chamada: assertEquals(Surface.COBBLESTONE, surfaceEnc.getEnum(false, intsRef), "Era esperado valores iguais, mas  Surface.COBBLESTONE é diferente de " + result1908 + " <surfaceEnc.getEnum(false, intsRef)>")
chamada antiga: assertTrue(Surface.COBBLESTONE.ordinal() > Surface.ASPHALT.ordinal())
nova chamada: assertTrue(Surface.COBBLESTONE.ordinal() > Surface.ASPHALT.ordinal(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(Surface.DIRT, surfaceEnc.getEnum(false, intsRef))
nova chamada: assertEquals(Surface.DIRT, surfaceEnc.getEnum(false, intsRef), "Era esperado valores iguais, mas  Surface.DIRT é diferente de " + result1909 + " <surfaceEnc.getEnum(false, intsRef)>")
chamada antiga: assertTrue(Double.isInfinite(tcs.get(turnCostEnc, 4, 3, 6)))
nova chamada: assertTrue(Double.isInfinite(tcs.get(turnCostEnc, 4, 3, 6)), "Era esperado verdadeiro, mas " + result1910 + " <Double.isInfinite(tcs.get(turnCostEnc, 4, 3, 6))> é falso")
chamada antiga: assertTrue(Double.isInfinite(tcs.get(turnCostEnc, 4, 3, 2)))
nova chamada: assertTrue(Double.isInfinite(tcs.get(turnCostEnc, 4, 3, 2)), "Era esperado verdadeiro, mas " + result1911 + " <Double.isInfinite(tcs.get(turnCostEnc, 4, 3, 2))> é falso")
chamada antiga: assertTrue(Double.isInfinite(tcs.get(turnCostEnc, 4, 3, 3)))
nova chamada: assertTrue(Double.isInfinite(tcs.get(turnCostEnc, 4, 3, 3)), "Era esperado verdadeiro, mas " + result1912 + " <Double.isInfinite(tcs.get(turnCostEnc, 4, 3, 3))> é falso")
chamada antiga: Assertions.assertEquals(4, lanesEnc.getInt(false, intsRef))
nova chamada: assertEquals(4, lanesEnc.getInt(false, intsRef), "Era esperado valores iguais, mas  4 é diferente de " + result1913 + " <lanesEnc.getInt(false, intsRef)>")
chamada antiga: Assertions.assertEquals(1, lanesEnc.getInt(false, intsRef))
nova chamada: assertEquals(1, lanesEnc.getInt(false, intsRef), "Era esperado valores iguais, mas  1 é diferente de " + result1914 + " <lanesEnc.getInt(false, intsRef)>")
chamada antiga: assertEquals(RoadClass.PRIMARY, rcEnc.getEnum(false, edgeFlags))
nova chamada: assertEquals(RoadClass.PRIMARY, rcEnc.getEnum(false, edgeFlags), "Era esperado valores iguais, mas  RoadClass.PRIMARY é diferente de " + result1915 + " <rcEnc.getEnum(false, edgeFlags)>")
chamada antiga: assertEquals(RoadClass.OTHER, rcEnc.getEnum(false, edgeFlags))
nova chamada: assertEquals(RoadClass.OTHER, rcEnc.getEnum(false, edgeFlags), "Era esperado valores iguais, mas  RoadClass.OTHER é diferente de " + result1916 + " <rcEnc.getEnum(false, edgeFlags)>")
chamada antiga: assertEquals(RoadClass.MOTORWAY, rcEnc.getEnum(false, edgeFlags))
nova chamada: assertEquals(RoadClass.MOTORWAY, rcEnc.getEnum(false, edgeFlags), "Era esperado valores iguais, mas  RoadClass.MOTORWAY é diferente de " + result1917 + " <rcEnc.getEnum(false, edgeFlags)>")
chamada antiga: assertEquals(RoadClass.CYCLEWAY, rcEnc.getEnum(false, edgeFlags))
nova chamada: assertEquals(RoadClass.CYCLEWAY, rcEnc.getEnum(false, edgeFlags), "Era esperado valores iguais, mas  RoadClass.CYCLEWAY é diferente de " + result1918 + " <rcEnc.getEnum(false, edgeFlags)>")
chamada antiga: assertEquals(RoadClass.OTHER, rcEnc.getEnum(false, edgeFlags))
nova chamada: assertEquals(RoadClass.OTHER, rcEnc.getEnum(false, edgeFlags), "Era esperado valores iguais, mas  RoadClass.OTHER é diferente de " + result1919 + " <rcEnc.getEnum(false, edgeFlags)>")
chamada antiga: assertEquals(RoadClass.OTHER, rcEnc.getEnum(false, edgeFlags))
nova chamada: assertEquals(RoadClass.OTHER, rcEnc.getEnum(false, edgeFlags), "Era esperado valores iguais, mas  RoadClass.OTHER é diferente de " + result1920 + " <rcEnc.getEnum(false, edgeFlags)>")
chamada antiga: assertEquals(RoadAccess.DESTINATION, roadAccessEnc.getEnum(false, edgeFlags))
nova chamada: assertEquals(RoadAccess.DESTINATION, roadAccessEnc.getEnum(false, edgeFlags), "Era esperado valores iguais, mas  RoadAccess.DESTINATION é diferente de " + result1921 + " <roadAccessEnc.getEnum(false, edgeFlags)>")
chamada antiga: assertEquals(RoadAccess.YES, roadAccessEnc.getEnum(false, edgeFlags))
nova chamada: assertEquals(RoadAccess.YES, roadAccessEnc.getEnum(false, edgeFlags), "Era esperado valores iguais, mas  RoadAccess.YES é diferente de " + result1922 + " <roadAccessEnc.getEnum(false, edgeFlags)>")
chamada antiga: assertEquals(RoadAccess.AGRICULTURAL, roadAccessEnc.getEnum(false, edgeFlags))
nova chamada: assertEquals(RoadAccess.AGRICULTURAL, roadAccessEnc.getEnum(false, edgeFlags), "Era esperado valores iguais, mas  RoadAccess.AGRICULTURAL é diferente de " + result1923 + " <roadAccessEnc.getEnum(false, edgeFlags)>")
chamada antiga: assertEquals(RoadAccess.AGRICULTURAL, roadAccessEnc.getEnum(false, edgeFlags))
nova chamada: assertEquals(RoadAccess.AGRICULTURAL, roadAccessEnc.getEnum(false, edgeFlags), "Era esperado valores iguais, mas  RoadAccess.AGRICULTURAL é diferente de " + result1924 + " <roadAccessEnc.getEnum(false, edgeFlags)>")
chamada antiga: assertEquals(HazmatWater.NO, hazWaterEnc.getEnum(false, intsRef))
nova chamada: assertEquals(HazmatWater.NO, hazWaterEnc.getEnum(false, intsRef), "Era esperado valores iguais, mas  HazmatWater.NO é diferente de " + result1925 + " <hazWaterEnc.getEnum(false, intsRef)>")
chamada antiga: assertEquals(HazmatWater.YES, hazWaterEnc.getEnum(false, intsRef))
nova chamada: assertEquals(HazmatWater.YES, hazWaterEnc.getEnum(false, intsRef), "Era esperado valores iguais, mas  HazmatWater.YES é diferente de " + result1926 + " <hazWaterEnc.getEnum(false, intsRef)>")
chamada antiga: assertEquals(HazmatWater.PERMISSIVE, hazWaterEnc.getEnum(false, intsRef))
nova chamada: assertEquals(HazmatWater.PERMISSIVE, hazWaterEnc.getEnum(false, intsRef), "Era esperado valores iguais, mas  HazmatWater.PERMISSIVE é diferente de " + result1927 + " <hazWaterEnc.getEnum(false, intsRef)>")
chamada antiga: assertEquals(HazmatWater.YES, hazWaterEnc.getEnum(false, intsRef))
nova chamada: assertEquals(HazmatWater.YES, hazWaterEnc.getEnum(false, intsRef), "Era esperado valores iguais, mas  HazmatWater.YES é diferente de " + result1928 + " <hazWaterEnc.getEnum(false, intsRef)>")
chamada antiga: assertTrue(Double.isNaN(OSMValueExtractor.stringToTons("weight limit 1.5t")))
nova chamada: assertTrue(Double.isNaN(OSMValueExtractor.stringToTons("weight limit 1.5t")), "Era esperado verdadeiro, mas " + result1929 + " <Double.isNaN(OSMValueExtractor.stringToTons('weight limit 1.5t'))> é falso")
chamada antiga: assertTrue(Double.isNaN(OSMValueExtractor.stringToTons("")))
nova chamada: assertTrue(Double.isNaN(OSMValueExtractor.stringToTons("")), "Era esperado verdadeiro, mas " + result1930 + " <Double.isNaN(OSMValueExtractor.stringToTons(''))> é falso")
chamada antiga: assertTrue(Double.isNaN(OSMValueExtractor.stringToMeter("height limit 1.5m")))
nova chamada: assertTrue(Double.isNaN(OSMValueExtractor.stringToMeter("height limit 1.5m")), "Era esperado verdadeiro, mas " + result1931 + " <Double.isNaN(OSMValueExtractor.stringToMeter('height limit 1.5m'))> é falso")
chamada antiga: assertTrue(Double.isNaN(OSMValueExtractor.stringToMeter("")))
nova chamada: assertTrue(Double.isNaN(OSMValueExtractor.stringToMeter("")), "Era esperado verdadeiro, mas " + result1932 + " <Double.isNaN(OSMValueExtractor.stringToMeter(''))> é falso")
chamada antiga: assertTrue(Double.isNaN(OSMValueExtractor.stringToMeter("default")))
nova chamada: assertTrue(Double.isNaN(OSMValueExtractor.stringToMeter("default")), "Era esperado verdadeiro, mas " + result1933 + " <Double.isNaN(OSMValueExtractor.stringToMeter('default'))> é falso")
chamada antiga: assertTrue(Double.isNaN(OSMValueExtractor.stringToKmh(null)))
nova chamada: assertTrue(Double.isNaN(OSMValueExtractor.stringToKmh(null)), "Era esperado verdadeiro, mas " + result1934 + " <Double.isNaN(OSMValueExtractor.stringToKmh(null))> é falso")
chamada antiga: assertTrue(Double.isNaN(OSMValueExtractor.stringToKmh("0")))
nova chamada: assertTrue(Double.isNaN(OSMValueExtractor.stringToKmh("0")), "Era esperado verdadeiro, mas " + result1935 + " <Double.isNaN(OSMValueExtractor.stringToKmh('0'))> é falso")
chamada antiga: assertTrue(Double.isNaN(OSMValueExtractor.stringToKmh("-20")))
nova chamada: assertTrue(Double.isNaN(OSMValueExtractor.stringToKmh("-20")), "Era esperado verdadeiro, mas " + result1936 + " <Double.isNaN(OSMValueExtractor.stringToKmh('-20'))> é falso")
chamada antiga: assertEquals(TrackType.GRADE1, ttEnc.getEnum(false, intsRef))
nova chamada: assertEquals(TrackType.GRADE1, ttEnc.getEnum(false, intsRef), "Era esperado valores iguais, mas  TrackType.GRADE1 é diferente de " + result1937 + " <ttEnc.getEnum(false, intsRef)>")
chamada antiga: assertEquals(TrackType.GRADE2, ttEnc.getEnum(false, intsRef))
nova chamada: assertEquals(TrackType.GRADE2, ttEnc.getEnum(false, intsRef), "Era esperado valores iguais, mas  TrackType.GRADE2 é diferente de " + result1938 + " <ttEnc.getEnum(false, intsRef)>")
chamada antiga: assertEquals(TrackType.GRADE3, ttEnc.getEnum(false, intsRef))
nova chamada: assertEquals(TrackType.GRADE3, ttEnc.getEnum(false, intsRef), "Era esperado valores iguais, mas  TrackType.GRADE3 é diferente de " + result1939 + " <ttEnc.getEnum(false, intsRef)>")
chamada antiga: assertEquals(TrackType.GRADE4, ttEnc.getEnum(false, intsRef))
nova chamada: assertEquals(TrackType.GRADE4, ttEnc.getEnum(false, intsRef), "Era esperado valores iguais, mas  TrackType.GRADE4 é diferente de " + result1940 + " <ttEnc.getEnum(false, intsRef)>")
chamada antiga: assertEquals(TrackType.GRADE5, ttEnc.getEnum(false, intsRef))
nova chamada: assertEquals(TrackType.GRADE5, ttEnc.getEnum(false, intsRef), "Era esperado valores iguais, mas  TrackType.GRADE5 é diferente de " + result1941 + " <ttEnc.getEnum(false, intsRef)>")
chamada antiga: assertEquals(TrackType.MISSING, ttEnc.getEnum(false, intsRef))
nova chamada: assertEquals(TrackType.MISSING, ttEnc.getEnum(false, intsRef), "Era esperado valores iguais, mas  TrackType.MISSING é diferente de " + result1942 + " <ttEnc.getEnum(false, intsRef)>")
chamada antiga: assertEquals(TrackType.MISSING, ttEnc.getEnum(false, intsRef))
nova chamada: assertEquals(TrackType.MISSING, ttEnc.getEnum(false, intsRef), "Era esperado valores iguais, mas  TrackType.MISSING é diferente de " + result1943 + " <ttEnc.getEnum(false, intsRef)>")
chamada antiga: assertEquals(HazmatTunnel.A, hazTunnelEnc.getEnum(false, intsRef))
nova chamada: assertEquals(HazmatTunnel.A, hazTunnelEnc.getEnum(false, intsRef), "Era esperado valores iguais, mas  HazmatTunnel.A é diferente de " + result1944 + " <hazTunnelEnc.getEnum(false, intsRef)>")
chamada antiga: assertEquals(HazmatTunnel.B, hazTunnelEnc.getEnum(false, intsRef))
nova chamada: assertEquals(HazmatTunnel.B, hazTunnelEnc.getEnum(false, intsRef), "Era esperado valores iguais, mas  HazmatTunnel.B é diferente de " + result1945 + " <hazTunnelEnc.getEnum(false, intsRef)>")
chamada antiga: assertEquals(HazmatTunnel.C, hazTunnelEnc.getEnum(false, intsRef))
nova chamada: assertEquals(HazmatTunnel.C, hazTunnelEnc.getEnum(false, intsRef), "Era esperado valores iguais, mas  HazmatTunnel.C é diferente de " + result1946 + " <hazTunnelEnc.getEnum(false, intsRef)>")
chamada antiga: assertEquals(HazmatTunnel.D, hazTunnelEnc.getEnum(false, intsRef))
nova chamada: assertEquals(HazmatTunnel.D, hazTunnelEnc.getEnum(false, intsRef), "Era esperado valores iguais, mas  HazmatTunnel.D é diferente de " + result1947 + " <hazTunnelEnc.getEnum(false, intsRef)>")
chamada antiga: assertEquals(HazmatTunnel.E, hazTunnelEnc.getEnum(false, intsRef))
nova chamada: assertEquals(HazmatTunnel.E, hazTunnelEnc.getEnum(false, intsRef), "Era esperado valores iguais, mas  HazmatTunnel.E é diferente de " + result1948 + " <hazTunnelEnc.getEnum(false, intsRef)>")
chamada antiga: assertEquals(HazmatTunnel.A, hazTunnelEnc.getEnum(false, intsRef))
nova chamada: assertEquals(HazmatTunnel.A, hazTunnelEnc.getEnum(false, intsRef), "Era esperado valores iguais, mas  HazmatTunnel.A é diferente de " + result1949 + " <hazTunnelEnc.getEnum(false, intsRef)>")
chamada antiga: assertEquals(HazmatTunnel.B, hazTunnelEnc.getEnum(false, intsRef))
nova chamada: assertEquals(HazmatTunnel.B, hazTunnelEnc.getEnum(false, intsRef), "Era esperado valores iguais, mas  HazmatTunnel.B é diferente de " + result1950 + " <hazTunnelEnc.getEnum(false, intsRef)>")
chamada antiga: assertEquals(HazmatTunnel.C, hazTunnelEnc.getEnum(false, intsRef))
nova chamada: assertEquals(HazmatTunnel.C, hazTunnelEnc.getEnum(false, intsRef), "Era esperado valores iguais, mas  HazmatTunnel.C é diferente de " + result1951 + " <hazTunnelEnc.getEnum(false, intsRef)>")
chamada antiga: assertEquals(HazmatTunnel.D, hazTunnelEnc.getEnum(false, intsRef))
nova chamada: assertEquals(HazmatTunnel.D, hazTunnelEnc.getEnum(false, intsRef), "Era esperado valores iguais, mas  HazmatTunnel.D é diferente de " + result1952 + " <hazTunnelEnc.getEnum(false, intsRef)>")
chamada antiga: assertEquals(HazmatTunnel.E, hazTunnelEnc.getEnum(false, intsRef))
nova chamada: assertEquals(HazmatTunnel.E, hazTunnelEnc.getEnum(false, intsRef), "Era esperado valores iguais, mas  HazmatTunnel.E é diferente de " + result1953 + " <hazTunnelEnc.getEnum(false, intsRef)>")
chamada antiga: assertEquals(HazmatTunnel.A, hazTunnelEnc.getEnum(false, intsRef))
nova chamada: assertEquals(HazmatTunnel.A, hazTunnelEnc.getEnum(false, intsRef), "Era esperado valores iguais, mas  HazmatTunnel.A é diferente de " + result1954 + " <hazTunnelEnc.getEnum(false, intsRef)>")
chamada antiga: assertEquals(HazmatTunnel.B, hazTunnelEnc.getEnum(false, intsRef))
nova chamada: assertEquals(HazmatTunnel.B, hazTunnelEnc.getEnum(false, intsRef), "Era esperado valores iguais, mas  HazmatTunnel.B é diferente de " + result1955 + " <hazTunnelEnc.getEnum(false, intsRef)>")
chamada antiga: assertEquals(HazmatTunnel.C, hazTunnelEnc.getEnum(false, intsRef))
nova chamada: assertEquals(HazmatTunnel.C, hazTunnelEnc.getEnum(false, intsRef), "Era esperado valores iguais, mas  HazmatTunnel.C é diferente de " + result1956 + " <hazTunnelEnc.getEnum(false, intsRef)>")
chamada antiga: assertEquals(HazmatTunnel.D, hazTunnelEnc.getEnum(false, intsRef))
nova chamada: assertEquals(HazmatTunnel.D, hazTunnelEnc.getEnum(false, intsRef), "Era esperado valores iguais, mas  HazmatTunnel.D é diferente de " + result1957 + " <hazTunnelEnc.getEnum(false, intsRef)>")
chamada antiga: assertEquals(HazmatTunnel.E, hazTunnelEnc.getEnum(false, intsRef))
nova chamada: assertEquals(HazmatTunnel.E, hazTunnelEnc.getEnum(false, intsRef), "Era esperado valores iguais, mas  HazmatTunnel.E é diferente de " + result1958 + " <hazTunnelEnc.getEnum(false, intsRef)>")
chamada antiga: assertEquals(HazmatTunnel.E, hazTunnelEnc.getEnum(false, intsRef))
nova chamada: assertEquals(HazmatTunnel.E, hazTunnelEnc.getEnum(false, intsRef), "Era esperado valores iguais, mas  HazmatTunnel.E é diferente de " + result1959 + " <hazTunnelEnc.getEnum(false, intsRef)>")
chamada antiga: assertEquals(HazmatTunnel.C, hazTunnelEnc.getEnum(false, intsRef))
nova chamada: assertEquals(HazmatTunnel.C, hazTunnelEnc.getEnum(false, intsRef), "Era esperado valores iguais, mas  HazmatTunnel.C é diferente de " + result1960 + " <hazTunnelEnc.getEnum(false, intsRef)>")
chamada antiga: assertEquals(HazmatTunnel.E, hazTunnelEnc.getEnum(false, intsRef))
nova chamada: assertEquals(HazmatTunnel.E, hazTunnelEnc.getEnum(false, intsRef), "Era esperado valores iguais, mas  HazmatTunnel.E é diferente de " + result1961 + " <hazTunnelEnc.getEnum(false, intsRef)>")
chamada antiga: assertEquals(HazmatTunnel.A, hazTunnelEnc.getEnum(false, intsRef))
nova chamada: assertEquals(HazmatTunnel.A, hazTunnelEnc.getEnum(false, intsRef), "Era esperado valores iguais, mas  HazmatTunnel.A é diferente de " + result1962 + " <hazTunnelEnc.getEnum(false, intsRef)>")
chamada antiga: assertEquals(HazmatTunnel.A, hazTunnelEnc.getEnum(false, intsRef))
nova chamada: assertEquals(HazmatTunnel.A, hazTunnelEnc.getEnum(false, intsRef), "Era esperado valores iguais, mas  HazmatTunnel.A é diferente de " + result1963 + " <hazTunnelEnc.getEnum(false, intsRef)>")
chamada antiga: assertEquals(Hazmat.NO, hazEnc.getEnum(false, intsRef))
nova chamada: assertEquals(Hazmat.NO, hazEnc.getEnum(false, intsRef), "Era esperado valores iguais, mas  Hazmat.NO é diferente de " + result1964 + " <hazEnc.getEnum(false, intsRef)>")
chamada antiga: assertEquals(Hazmat.YES, hazEnc.getEnum(false, intsRef))
nova chamada: assertEquals(Hazmat.YES, hazEnc.getEnum(false, intsRef), "Era esperado valores iguais, mas  Hazmat.YES é diferente de " + result1965 + " <hazEnc.getEnum(false, intsRef)>")
chamada antiga: assertEquals(Hazmat.YES, hazEnc.getEnum(false, intsRef))
nova chamada: assertEquals(Hazmat.YES, hazEnc.getEnum(false, intsRef), "Era esperado valores iguais, mas  Hazmat.YES é diferente de " + result1966 + " <hazEnc.getEnum(false, intsRef)>")
chamada antiga: assertEquals(Hazmat.YES, hazEnc.getEnum(false, intsRef))
nova chamada: assertEquals(Hazmat.YES, hazEnc.getEnum(false, intsRef), "Era esperado valores iguais, mas  Hazmat.YES é diferente de " + result1967 + " <hazEnc.getEnum(false, intsRef)>")
chamada antiga: assertEquals(Hazmat.YES, hazEnc.getEnum(false, intsRef))
nova chamada: assertEquals(Hazmat.YES, hazEnc.getEnum(false, intsRef), "Era esperado valores iguais, mas  Hazmat.YES é diferente de " + result1968 + " <hazEnc.getEnum(false, intsRef)>")
chamada antiga: assertEquals(Toll.MISSING, tollEnc.getEnum(false, intsRef))
nova chamada: assertEquals(Toll.MISSING, tollEnc.getEnum(false, intsRef), "Era esperado valores iguais, mas  Toll.MISSING é diferente de " + result1969 + " <tollEnc.getEnum(false, intsRef)>")
chamada antiga: assertEquals(Toll.HGV, tollEnc.getEnum(false, intsRef))
nova chamada: assertEquals(Toll.HGV, tollEnc.getEnum(false, intsRef), "Era esperado valores iguais, mas  Toll.HGV é diferente de " + result1970 + " <tollEnc.getEnum(false, intsRef)>")
chamada antiga: assertEquals(Toll.HGV, tollEnc.getEnum(false, intsRef))
nova chamada: assertEquals(Toll.HGV, tollEnc.getEnum(false, intsRef), "Era esperado valores iguais, mas  Toll.HGV é diferente de " + result1971 + " <tollEnc.getEnum(false, intsRef)>")
chamada antiga: assertEquals(Toll.HGV, tollEnc.getEnum(false, intsRef))
nova chamada: assertEquals(Toll.HGV, tollEnc.getEnum(false, intsRef), "Era esperado valores iguais, mas  Toll.HGV é diferente de " + result1972 + " <tollEnc.getEnum(false, intsRef)>")
chamada antiga: assertEquals(Toll.ALL, tollEnc.getEnum(false, intsRef))
nova chamada: assertEquals(Toll.ALL, tollEnc.getEnum(false, intsRef), "Era esperado valores iguais, mas  Toll.ALL é diferente de " + result1973 + " <tollEnc.getEnum(false, intsRef)>")
chamada antiga: assertEquals(Toll.ALL, tollEnc.getEnum(false, intsRef))
nova chamada: assertEquals(Toll.ALL, tollEnc.getEnum(false, intsRef), "Era esperado valores iguais, mas  Toll.ALL é diferente de " + result1974 + " <tollEnc.getEnum(false, intsRef)>")
chamada antiga: assertEquals(RoadEnvironment.FERRY, roadEnvironment)
nova chamada: assertEquals(RoadEnvironment.FERRY, roadEnvironment, "Era esperado valores iguais, mas  RoadEnvironment.FERRY é diferente de " + " roadEnvironment")
chamada antiga: assertFalse(parser.getAccessEnc().getBool(false, edgeFlags))
nova chamada: assertFalse(parser.getAccessEnc().getBool(false, edgeFlags), "Era esperado falso, mas " + result1975 + " <parser.getAccessEnc().getBool(false, edgeFlags)> é verdadeiro ")
chamada antiga: assertFalse(edge.getReverse(carAccessEnc))
nova chamada: assertFalse(edge.getReverse(carAccessEnc), "Era esperado falso, mas " + result1976 + " <edge.getReverse(carAccessEnc)> é verdadeiro ")
chamada antiga: assertFalse(flags.isEmpty())
nova chamada: assertFalse(flags.isEmpty(), "Era esperado falso, mas " + result1977 + " <flags.isEmpty()> é verdadeiro ")
chamada antiga: assertFalse(wheelchairParser.isBarrier(node))
nova chamada: assertFalse(wheelchairParser.isBarrier(node), "Era esperado falso, mas " + result1978 + " <wheelchairParser.isBarrier(node)> é verdadeiro ")
chamada antiga: assertFalse(wheelchairParser.isBarrier(node))
nova chamada: assertFalse(wheelchairParser.isBarrier(node), "Era esperado falso, mas " + result1979 + " <wheelchairParser.isBarrier(node)> é verdadeiro ")
chamada antiga: assertFalse(wheelchairParser.isBarrier(node))
nova chamada: assertFalse(wheelchairParser.isBarrier(node), "Era esperado falso, mas " + result1980 + " <wheelchairParser.isBarrier(node)> é verdadeiro ")
chamada antiga: assertFalse(wheelchairParser.isBarrier(node))
nova chamada: assertFalse(wheelchairParser.isBarrier(node), "Era esperado falso, mas " + result1981 + " <wheelchairParser.isBarrier(node)> é verdadeiro ")
chamada antiga: assertFalse(wheelchairParser.isBarrier(node))
nova chamada: assertFalse(wheelchairParser.isBarrier(node), "Era esperado falso, mas " + result1982 + " <wheelchairParser.isBarrier(node)> é verdadeiro ")
chamada antiga: assertFalse(wheelchairParser.isBarrier(node))
nova chamada: assertFalse(wheelchairParser.isBarrier(node), "Era esperado falso, mas " + result1983 + " <wheelchairParser.isBarrier(node)> é verdadeiro ")
chamada antiga: assertFalse(wheelchairParser.isBarrier(node))
nova chamada: assertFalse(wheelchairParser.isBarrier(node), "Era esperado falso, mas " + result1984 + " <wheelchairParser.isBarrier(node)> é verdadeiro ")
chamada antiga: assertFalse(wheelchairParser.isBarrier(node))
nova chamada: assertFalse(wheelchairParser.isBarrier(node), "Era esperado falso, mas " + result1985 + " <wheelchairParser.isBarrier(node)> é verdadeiro ")
chamada antiga: assertFalse(edge45.get(wheelchairAccessEnc))
nova chamada: assertFalse(edge45.get(wheelchairAccessEnc), "Era esperado falso, mas " + result1986 + " <edge45.get(wheelchairAccessEnc)> é verdadeiro ")
chamada antiga: assertFalse(edge45.getReverse(wheelchairAccessEnc))
nova chamada: assertFalse(edge45.getReverse(wheelchairAccessEnc), "Era esperado falso, mas " + result1987 + " <edge45.getReverse(wheelchairAccessEnc)> é verdadeiro ")
chamada antiga: assertTrue(isGetOffBike(way))
nova chamada: assertTrue(isGetOffBike(way), "Era esperado verdadeiro, mas " + result1988 + " <isGetOffBike(way)> é falso")
chamada antiga: assertTrue(isGetOffBike(way))
nova chamada: assertTrue(isGetOffBike(way), "Era esperado verdadeiro, mas " + result1989 + " <isGetOffBike(way)> é falso")
chamada antiga: assertTrue(isGetOffBike(way))
nova chamada: assertTrue(isGetOffBike(way), "Era esperado verdadeiro, mas " + result1990 + " <isGetOffBike(way)> é falso")
chamada antiga: assertFalse(isGetOffBike(way))
nova chamada: assertFalse(isGetOffBike(way), "Era esperado falso, mas " + result1991 + " <isGetOffBike(way)> é verdadeiro ")
chamada antiga: assertFalse(isGetOffBike(way))
nova chamada: assertFalse(isGetOffBike(way), "Era esperado falso, mas " + result1992 + " <isGetOffBike(way)> é verdadeiro ")
chamada antiga: assertTrue(isGetOffBike(way))
nova chamada: assertTrue(isGetOffBike(way), "Era esperado verdadeiro, mas " + result1993 + " <isGetOffBike(way)> é falso")
chamada antiga: assertFalse(isGetOffBike(way))
nova chamada: assertFalse(isGetOffBike(way), "Era esperado falso, mas " + result1994 + " <isGetOffBike(way)> é verdadeiro ")
chamada antiga: assertFalse(isGetOffBike(way))
nova chamada: assertFalse(isGetOffBike(way), "Era esperado falso, mas " + result1995 + " <isGetOffBike(way)> é verdadeiro ")
chamada antiga: assertFalse(isGetOffBike(way))
nova chamada: assertFalse(isGetOffBike(way), "Era esperado falso, mas " + result1996 + " <isGetOffBike(way)> é verdadeiro ")
chamada antiga: assertFalse(isGetOffBike(way))
nova chamada: assertFalse(isGetOffBike(way), "Era esperado falso, mas " + result1997 + " <isGetOffBike(way)> é verdadeiro ")
chamada antiga: assertTrue(isGetOffBike(way))
nova chamada: assertTrue(isGetOffBike(way), "Era esperado verdadeiro, mas " + result1998 + " <isGetOffBike(way)> é falso")
chamada antiga: assertTrue(isGetOffBike(way))
nova chamada: assertTrue(isGetOffBike(way), "Era esperado verdadeiro, mas " + result1999 + " <isGetOffBike(way)> é falso")
chamada antiga: assertFalse(isGetOffBike(way))
nova chamada: assertFalse(isGetOffBike(way), "Era esperado falso, mas " + result2000 + " <isGetOffBike(way)> é verdadeiro ")
chamada antiga: assertFalse(isGetOffBike(way))
nova chamada: assertFalse(isGetOffBike(way), "Era esperado falso, mas " + result2001 + " <isGetOffBike(way)> é verdadeiro ")
chamada antiga: assertTrue(isGetOffBike(way))
nova chamada: assertTrue(isGetOffBike(way), "Era esperado verdadeiro, mas " + result2002 + " <isGetOffBike(way)> é falso")
chamada antiga: assertTrue(isGetOffBike(way))
nova chamada: assertTrue(isGetOffBike(way), "Era esperado verdadeiro, mas " + result2003 + " <isGetOffBike(way)> é falso")
chamada antiga: assertFalse(isGetOffBike(way))
nova chamada: assertFalse(isGetOffBike(way), "Era esperado falso, mas " + result2004 + " <isGetOffBike(way)> é verdadeiro ")
chamada antiga: assertFalse(isGetOffBike(way))
nova chamada: assertFalse(isGetOffBike(way), "Era esperado falso, mas " + result2005 + " <isGetOffBike(way)> é verdadeiro ")
chamada antiga: assertFalse(isGetOffBike(way))
nova chamada: assertFalse(isGetOffBike(way), "Era esperado falso, mas " + result2006 + " <isGetOffBike(way)> é verdadeiro ")
chamada antiga: assertFalse(isGetOffBike(way))
nova chamada: assertFalse(isGetOffBike(way), "Era esperado falso, mas " + result2007 + " <isGetOffBike(way)> é verdadeiro ")
chamada antiga: assertFalse(isGetOffBike(way))
nova chamada: assertFalse(isGetOffBike(way), "Era esperado falso, mas " + result2008 + " <isGetOffBike(way)> é verdadeiro ")
chamada antiga: assertTrue(isGetOffBike(way))
nova chamada: assertTrue(isGetOffBike(way), "Era esperado verdadeiro, mas " + result2009 + " <isGetOffBike(way)> é falso")
chamada antiga: assertTrue(parser.getAccess(way).canSkip())
nova chamada: assertTrue(parser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result2010 + " <parser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).isWay())
nova chamada: assertTrue(parser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result2011 + " <parser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).isWay())
nova chamada: assertTrue(parser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result2012 + " <parser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(parser.getAverageSpeedEnc().getDecimal(false, flags) > 200)
nova chamada: assertTrue(parser.getAverageSpeedEnc().getDecimal(false, flags) > 200, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("[hgv, motor_vehicle, vehicle, access]", hgvParser.getRestrictions().toString())
nova chamada: assertEquals("[hgv, motor_vehicle, vehicle, access]", hgvParser.getRestrictions().toString(), "Era esperado valores iguais, mas  '[hgv, motor_vehicle, vehicle, access]' é diferente de " + result2013 + " <hgvParser.getRestrictions().toString()>")
chamada antiga: assertTrue(hikeParser.getAccess(way).canSkip())
nova chamada: assertTrue(hikeParser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result2014 + " <hikeParser.getAccess(way).canSkip()> é falso")
chamada antiga: assertEquals(PriorityCode.UNCHANGED.getValue(), hikeParser.handlePriority(way, null))
nova chamada: assertEquals(PriorityCode.UNCHANGED.getValue(), hikeParser.handlePriority(way, null), "Era esperado valores iguais, mas " + result2015 + " <PriorityCode.UNCHANGED.getValue()> é diferente de " + result2016 + " <hikeParser.handlePriority(way, null)>")
chamada antiga: assertEquals(PriorityCode.AVOID.getValue(), hikeParser.handlePriority(way, null))
nova chamada: assertEquals(PriorityCode.AVOID.getValue(), hikeParser.handlePriority(way, null), "Era esperado valores iguais, mas " + result2017 + " <PriorityCode.AVOID.getValue()> é diferente de " + result2018 + " <hikeParser.handlePriority(way, null)>")
chamada antiga: assertEquals(PriorityCode.SLIGHT_AVOID.getValue(), hikeParser.handlePriority(way, null))
nova chamada: assertEquals(PriorityCode.SLIGHT_AVOID.getValue(), hikeParser.handlePriority(way, null), "Era esperado valores iguais, mas " + result2019 + " <PriorityCode.SLIGHT_AVOID.getValue()> é diferente de " + result2020 + " <hikeParser.handlePriority(way, null)>")
chamada antiga: assertEquals(PriorityCode.SLIGHT_AVOID.getValue(), hikeParser.handlePriority(way, null))
nova chamada: assertEquals(PriorityCode.SLIGHT_AVOID.getValue(), hikeParser.handlePriority(way, null), "Era esperado valores iguais, mas " + result2021 + " <PriorityCode.SLIGHT_AVOID.getValue()> é diferente de " + result2022 + " <hikeParser.handlePriority(way, null)>")
chamada antiga: assertEquals(PriorityCode.PREFER.getValue(), hikeParser.handlePriority(way, null))
nova chamada: assertEquals(PriorityCode.PREFER.getValue(), hikeParser.handlePriority(way, null), "Era esperado valores iguais, mas " + result2023 + " <PriorityCode.PREFER.getValue()> é diferente de " + result2024 + " <hikeParser.handlePriority(way, null)>")
chamada antiga: assertEquals(PriorityCode.AVOID.getValue(), hikeParser.handlePriority(way, null))
nova chamada: assertEquals(PriorityCode.AVOID.getValue(), hikeParser.handlePriority(way, null), "Era esperado valores iguais, mas " + result2025 + " <PriorityCode.AVOID.getValue()> é diferente de " + result2026 + " <hikeParser.handlePriority(way, null)>")
chamada antiga: assertEquals(PriorityCode.UNCHANGED.getValue(), hikeParser.handlePriority(way, null))
nova chamada: assertEquals(PriorityCode.UNCHANGED.getValue(), hikeParser.handlePriority(way, null), "Era esperado valores iguais, mas " + result2027 + " <PriorityCode.UNCHANGED.getValue()> é diferente de " + result2028 + " <hikeParser.handlePriority(way, null)>")
chamada antiga: assertEquals(PriorityCode.SLIGHT_AVOID.getValue(), hikeParser.handlePriority(way, null))
nova chamada: assertEquals(PriorityCode.SLIGHT_AVOID.getValue(), hikeParser.handlePriority(way, null), "Era esperado valores iguais, mas " + result2029 + " <PriorityCode.SLIGHT_AVOID.getValue()> é diferente de " + result2030 + " <hikeParser.handlePriority(way, null)>")
chamada antiga: assertEquals(PriorityCode.BAD.getValue(), hikeParser.handlePriority(way, null))
nova chamada: assertEquals(PriorityCode.BAD.getValue(), hikeParser.handlePriority(way, null), "Era esperado valores iguais, mas " + result2031 + " <PriorityCode.BAD.getValue()> é diferente de " + result2032 + " <hikeParser.handlePriority(way, null)>")
chamada antiga: assertEquals(PriorityCode.BAD.getValue(), hikeParser.handlePriority(way, null))
nova chamada: assertEquals(PriorityCode.BAD.getValue(), hikeParser.handlePriority(way, null), "Era esperado valores iguais, mas " + result2033 + " <PriorityCode.BAD.getValue()> é diferente de " + result2034 + " <hikeParser.handlePriority(way, null)>")
chamada antiga: assertEquals(PriorityCode.PREFER.getValue(), hikeParser.handlePriority(way, null))
nova chamada: assertEquals(PriorityCode.PREFER.getValue(), hikeParser.handlePriority(way, null), "Era esperado valores iguais, mas " + result2035 + " <PriorityCode.PREFER.getValue()> é diferente de " + result2036 + " <hikeParser.handlePriority(way, null)>")
chamada antiga: assertTrue(edgeFilter.accept(edge))
nova chamada: assertTrue(edgeFilter.accept(edge), "Era esperado verdadeiro, mas " + result2037 + " <edgeFilter.accept(edge)> é falso")
chamada antiga: assertTrue(edgeFilter.accept(edge))
nova chamada: assertTrue(edgeFilter.accept(edge), "Era esperado verdadeiro, mas " + result2038 + " <edgeFilter.accept(edge)> é falso")
chamada antiga: assertTrue(edgeFilter.accept(edge))
nova chamada: assertTrue(edgeFilter.accept(edge), "Era esperado verdadeiro, mas " + result2039 + " <edgeFilter.accept(edge)> é falso")
chamada antiga: assertTrue(edgeFilter.accept(edge))
nova chamada: assertTrue(edgeFilter.accept(edge), "Era esperado verdadeiro, mas " + result2040 + " <edgeFilter.accept(edge)> é falso")
chamada antiga: assertTrue(edgeFilter.accept(edge))
nova chamada: assertTrue(edgeFilter.accept(edge), "Era esperado verdadeiro, mas " + result2041 + " <edgeFilter.accept(edge)> é falso")
chamada antiga: assertTrue(edgeFilter.accept(edge))
nova chamada: assertTrue(edgeFilter.accept(edge), "Era esperado verdadeiro, mas " + result2042 + " <edgeFilter.accept(edge)> é falso")
chamada antiga: assertTrue(edgeFilter.accept(edge))
nova chamada: assertTrue(edgeFilter.accept(edge), "Era esperado verdadeiro, mas " + result2043 + " <edgeFilter.accept(edge)> é falso")
chamada antiga: assertTrue(createNameSimilarityEdgeFilter("Wentworth Street").accept(edge1))
nova chamada: assertTrue(createNameSimilarityEdgeFilter("Wentworth Street").accept(edge1), "Era esperado verdadeiro, mas " + result2044 + " <createNameSimilarityEdgeFilter('Wentworth Street').accept(edge1)> é falso")
chamada antiga: assertTrue(createNameSimilarityEdgeFilter("Wentworth Street, Caringbah South").accept(createTestEdgeIterator("Wentworth Street")))
nova chamada: assertTrue(createNameSimilarityEdgeFilter("Wentworth Street, Caringbah South").accept(createTestEdgeIterator("Wentworth Street")), "Era esperado verdadeiro, mas " + result2045 + " <createNameSimilarityEdgeFilter('Wentworth Street, Caringbah South').accept(createTestEdgeIterator('Wentworth Street'))> é falso")
chamada antiga: assertTrue(createNameSimilarityEdgeFilter("Zum Toffental, Altdorf bei Nürnnberg").accept(createTestEdgeIterator("Zum Toffental")))
nova chamada: assertTrue(createNameSimilarityEdgeFilter("Zum Toffental, Altdorf bei Nürnnberg").accept(createTestEdgeIterator("Zum Toffental")), "Era esperado verdadeiro, mas " + result2046 + " <createNameSimilarityEdgeFilter('Zum Toffental, Altdorf bei Nürnnberg').accept(createTestEdgeIterator('Zum Toffental'))> é falso")
chamada antiga: assertTrue(edgeFilter.accept(createTestEdgeIterator("Rue Notre-Dame Ouest")))
nova chamada: assertTrue(edgeFilter.accept(createTestEdgeIterator("Rue Notre-Dame Ouest")), "Era esperado verdadeiro, mas " + result2047 + " <edgeFilter.accept(createTestEdgeIterator('Rue Notre-Dame Ouest'))> é falso")
chamada antiga: assertTrue(edgeFilter.accept(createTestEdgeIterator("Rue Saint-Antoine O")))
nova chamada: assertTrue(edgeFilter.accept(createTestEdgeIterator("Rue Saint-Antoine O")), "Era esperado verdadeiro, mas " + result2048 + " <edgeFilter.accept(createTestEdgeIterator('Rue Saint-Antoine O'))> é falso")
chamada antiga: assertTrue(edgeFilter.accept(createTestEdgeIterator("Rue de Bleury")))
nova chamada: assertTrue(edgeFilter.accept(createTestEdgeIterator("Rue de Bleury")), "Era esperado verdadeiro, mas " + result2049 + " <edgeFilter.accept(createTestEdgeIterator('Rue de Bleury'))> é falso")
chamada antiga: assertTrue(createNameSimilarityEdgeFilter("Main Rd").accept(createTestEdgeIterator("Main Road")))
nova chamada: assertTrue(createNameSimilarityEdgeFilter("Main Rd").accept(createTestEdgeIterator("Main Road")), "Era esperado verdadeiro, mas " + result2050 + " <createNameSimilarityEdgeFilter('Main Rd').accept(createTestEdgeIterator('Main Road'))> é falso")
chamada antiga: assertTrue(createNameSimilarityEdgeFilter("Main Road").accept(createTestEdgeIterator("Main Rd")))
nova chamada: assertTrue(createNameSimilarityEdgeFilter("Main Road").accept(createTestEdgeIterator("Main Rd")), "Era esperado verdadeiro, mas " + result2051 + " <createNameSimilarityEdgeFilter('Main Road').accept(createTestEdgeIterator('Main Rd'))> é falso")
chamada antiga: assertTrue(createNameSimilarityEdgeFilter("Main Rd").accept(createTestEdgeIterator("Main Road, New York")))
nova chamada: assertTrue(createNameSimilarityEdgeFilter("Main Rd").accept(createTestEdgeIterator("Main Road, New York")), "Era esperado verdadeiro, mas " + result2052 + " <createNameSimilarityEdgeFilter('Main Rd').accept(createTestEdgeIterator('Main Road, New York'))> é falso")
chamada antiga: assertTrue(createNameSimilarityEdgeFilter("Cape Point Rd").accept(createTestEdgeIterator("Cape Point")))
nova chamada: assertTrue(createNameSimilarityEdgeFilter("Cape Point Rd").accept(createTestEdgeIterator("Cape Point")), "Era esperado verdadeiro, mas " + result2053 + " <createNameSimilarityEdgeFilter('Cape Point Rd').accept(createTestEdgeIterator('Cape Point'))> é falso")
chamada antiga: assertTrue(createNameSimilarityEdgeFilter("Cape Point Rd").accept(createTestEdgeIterator("Cape Point Road")))
nova chamada: assertTrue(createNameSimilarityEdgeFilter("Cape Point Rd").accept(createTestEdgeIterator("Cape Point Road")), "Era esperado verdadeiro, mas " + result2054 + " <createNameSimilarityEdgeFilter('Cape Point Rd').accept(createTestEdgeIterator('Cape Point Road'))> é falso")
chamada antiga: assertTrue(createNameSimilarityEdgeFilter("Av. Juan Ramón Ramírez").accept(createTestEdgeIterator("Avenida Juan Ramón Ramírez")))
nova chamada: assertTrue(createNameSimilarityEdgeFilter("Av. Juan Ramón Ramírez").accept(createTestEdgeIterator("Avenida Juan Ramón Ramírez")), "Era esperado verdadeiro, mas " + result2055 + " <createNameSimilarityEdgeFilter('Av. Juan Ramón Ramírez').accept(createTestEdgeIterator('Avenida Juan Ramón Ramírez'))> é falso")
chamada antiga: assertTrue(createNameSimilarityEdgeFilter("Augustine St").accept(edge))
nova chamada: assertTrue(createNameSimilarityEdgeFilter("Augustine St").accept(edge), "Era esperado verdadeiro, mas " + result2056 + " <createNameSimilarityEdgeFilter('Augustine St').accept(edge)> é falso")
chamada antiga: assertTrue(createNameSimilarityEdgeFilter("Augustine Street").accept(edge))
nova chamada: assertTrue(createNameSimilarityEdgeFilter("Augustine Street").accept(edge), "Era esperado verdadeiro, mas " + result2057 + " <createNameSimilarityEdgeFilter('Augustine Street').accept(edge)> é falso")
chamada antiga: assertTrue(createNameSimilarityEdgeFilter("Augustine St").accept(edge))
nova chamada: assertTrue(createNameSimilarityEdgeFilter("Augustine St").accept(edge), "Era esperado verdadeiro, mas " + result2058 + " <createNameSimilarityEdgeFilter('Augustine St').accept(edge)> é falso")
chamada antiga: assertTrue(createNameSimilarityEdgeFilter("Augustine Street").accept(edge))
nova chamada: assertTrue(createNameSimilarityEdgeFilter("Augustine Street").accept(edge), "Era esperado verdadeiro, mas " + result2059 + " <createNameSimilarityEdgeFilter('Augustine Street').accept(edge)> é falso")
chamada antiga: assertTrue(createNameSimilarityEdgeFilter("Ben-Gurion").accept(edge))
nova chamada: assertTrue(createNameSimilarityEdgeFilter("Ben-Gurion").accept(edge), "Era esperado verdadeiro, mas " + result2060 + " <createNameSimilarityEdgeFilter('Ben-Gurion').accept(edge)> é falso")
chamada antiga: assertTrue(createNameSimilarityEdgeFilter("Ben Gurion").accept(edge))
nova chamada: assertTrue(createNameSimilarityEdgeFilter("Ben Gurion").accept(edge), "Era esperado verdadeiro, mas " + result2061 + " <createNameSimilarityEdgeFilter('Ben Gurion').accept(edge)> é falso")
chamada antiga: assertTrue(createNameSimilarityEdgeFilter("Ben Gurion Strasse").accept(edge))
nova chamada: assertTrue(createNameSimilarityEdgeFilter("Ben Gurion Strasse").accept(edge), "Era esperado verdadeiro, mas " + result2062 + " <createNameSimilarityEdgeFilter('Ben Gurion Strasse').accept(edge)> é falso")
chamada antiga: assertEquals("northderby", createNameSimilarityEdgeFilter("North Derby Lane").getNormalizedPointHint())
nova chamada: assertEquals("northderby", createNameSimilarityEdgeFilter("North Derby Lane").getNormalizedPointHint(), "Era esperado valores iguais, mas  'northderby' é diferente de " + result2063 + " <createNameSimilarityEdgeFilter('North Derby Lane').getNormalizedPointHint()>")
chamada antiga: assertEquals("28north", createNameSimilarityEdgeFilter("I-28 N").getNormalizedPointHint())
nova chamada: assertEquals("28north", createNameSimilarityEdgeFilter("I-28 N").getNormalizedPointHint(), "Era esperado valores iguais, mas  '28north' é diferente de " + result2064 + " <createNameSimilarityEdgeFilter('I-28 N').getNormalizedPointHint()>")
chamada antiga: assertEquals("28north", createNameSimilarityEdgeFilter(" I-28    N  ").getNormalizedPointHint())
nova chamada: assertEquals("28north", createNameSimilarityEdgeFilter(" I-28    N  ").getNormalizedPointHint(), "Era esperado valores iguais, mas  '28north' é diferente de " + result2065 + " <createNameSimilarityEdgeFilter(' I-28    N  ').getNormalizedPointHint()>")
chamada antiga: assertEquals("south23rd", createNameSimilarityEdgeFilter("S 23rd St").getNormalizedPointHint())
nova chamada: assertEquals("south23rd", createNameSimilarityEdgeFilter("S 23rd St").getNormalizedPointHint(), "Era esperado valores iguais, mas  'south23rd' é diferente de " + result2066 + " <createNameSimilarityEdgeFilter('S 23rd St').getNormalizedPointHint()>")
chamada antiga: assertEquals("66", createNameSimilarityEdgeFilter("Route 66").getNormalizedPointHint())
nova chamada: assertEquals("66", createNameSimilarityEdgeFilter("Route 66").getNormalizedPointHint(), "Era esperado valores iguais, mas  '66' é diferente de " + result2067 + " <createNameSimilarityEdgeFilter('Route 66').getNormalizedPointHint()>")
chamada antiga: assertEquals("fayettecounty1", createNameSimilarityEdgeFilter("Fayette County Rd 1").getNormalizedPointHint())
nova chamada: assertEquals("fayettecounty1", createNameSimilarityEdgeFilter("Fayette County Rd 1").getNormalizedPointHint(), "Era esperado valores iguais, mas  'fayettecounty1' é diferente de " + result2068 + " <createNameSimilarityEdgeFilter('Fayette County Rd 1').getNormalizedPointHint()>")
chamada antiga: assertEquals("112", createNameSimilarityEdgeFilter("A B C 1 12").getNormalizedPointHint())
nova chamada: assertEquals("112", createNameSimilarityEdgeFilter("A B C 1 12").getNormalizedPointHint(), "Era esperado valores iguais, mas  '112' é diferente de " + result2069 + " <createNameSimilarityEdgeFilter('A B C 1 12').getNormalizedPointHint()>")
chamada antiga: assertTrue(createNameSimilarityEdgeFilter("North Derby Lane").accept(createTestEdgeIterator("N Derby Ln")))
nova chamada: assertTrue(createNameSimilarityEdgeFilter("North Derby Lane").accept(createTestEdgeIterator("N Derby Ln")), "Era esperado verdadeiro, mas " + result2070 + " <createNameSimilarityEdgeFilter('North Derby Lane').accept(createTestEdgeIterator('N Derby Ln'))> é falso")
chamada antiga: assertTrue(createNameSimilarityEdgeFilter("N Derby Ln").accept(createTestEdgeIterator("North Derby Lane")))
nova chamada: assertTrue(createNameSimilarityEdgeFilter("N Derby Ln").accept(createTestEdgeIterator("North Derby Lane")), "Era esperado verdadeiro, mas " + result2071 + " <createNameSimilarityEdgeFilter('N Derby Ln').accept(createTestEdgeIterator('North Derby Lane'))> é falso")
chamada antiga: assertTrue(createNameSimilarityEdgeFilter("George Street").accept(createTestEdgeIterator("George St")))
nova chamada: assertTrue(createNameSimilarityEdgeFilter("George Street").accept(createTestEdgeIterator("George St")), "Era esperado verdadeiro, mas " + result2072 + " <createNameSimilarityEdgeFilter('George Street').accept(createTestEdgeIterator('George St'))> é falso")
chamada antiga: assertTrue(edgeFilter.accept(edge))
nova chamada: assertTrue(edgeFilter.accept(edge), "Era esperado verdadeiro, mas " + result2073 + " <edgeFilter.accept(edge)> é falso")
chamada antiga: assertTrue(edgeFilter.accept(edge))
nova chamada: assertTrue(edgeFilter.accept(edge), "Era esperado verdadeiro, mas " + result2074 + " <edgeFilter.accept(edge)> é falso")
chamada antiga: assertTrue(edgeFilter.accept(edge))
nova chamada: assertTrue(edgeFilter.accept(edge), "Era esperado verdadeiro, mas " + result2075 + " <edgeFilter.accept(edge)> é falso")
chamada antiga: assertTrue(edgeFilter.accept(edge))
nova chamada: assertTrue(edgeFilter.accept(edge), "Era esperado verdadeiro, mas " + result2076 + " <edgeFilter.accept(edge)> é falso")
chamada antiga: assertTrue(edgeFilter.accept(edge))
nova chamada: assertTrue(edgeFilter.accept(edge), "Era esperado verdadeiro, mas " + result2077 + " <edgeFilter.accept(edge)> é falso")
chamada antiga: assertTrue(filter.accept(doubtfire))
nova chamada: assertTrue(filter.accept(doubtfire), "Era esperado verdadeiro, mas " + result2078 + " <filter.accept(doubtfire)> é falso")
chamada antiga: assertTrue(filter.accept(doubtfire))
nova chamada: assertTrue(filter.accept(doubtfire), "Era esperado verdadeiro, mas " + result2079 + " <filter.accept(doubtfire)> é falso")
chamada antiga: assertTrue(parser.getAccess(way).canSkip())
nova chamada: assertTrue(parser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result2080 + " <parser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).isWay())
nova chamada: assertTrue(parser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result2081 + " <parser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).canSkip())
nova chamada: assertTrue(parser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result2082 + " <parser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).isWay())
nova chamada: assertTrue(parser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result2083 + " <parser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).canSkip())
nova chamada: assertTrue(parser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result2084 + " <parser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).isWay())
nova chamada: assertTrue(parser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result2085 + " <parser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).canSkip())
nova chamada: assertTrue(parser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result2086 + " <parser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).canSkip())
nova chamada: assertTrue(parser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result2087 + " <parser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).canSkip())
nova chamada: assertTrue(parser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result2088 + " <parser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).isWay())
nova chamada: assertTrue(parser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result2089 + " <parser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).canSkip())
nova chamada: assertTrue(parser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result2090 + " <parser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).canSkip())
nova chamada: assertTrue(parser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result2091 + " <parser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).canSkip())
nova chamada: assertTrue(parser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result2092 + " <parser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).canSkip())
nova chamada: assertTrue(parser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result2093 + " <parser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).canSkip())
nova chamada: assertTrue(parser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result2094 + " <parser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).canSkip())
nova chamada: assertTrue(parser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result2095 + " <parser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).isWay())
nova chamada: assertTrue(parser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result2096 + " <parser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).isWay())
nova chamada: assertTrue(parser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result2097 + " <parser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).canSkip())
nova chamada: assertTrue(parser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result2098 + " <parser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).canSkip())
nova chamada: assertTrue(parser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result2099 + " <parser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).canSkip())
nova chamada: assertTrue(parser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result2100 + " <parser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).isWay())
nova chamada: assertTrue(parser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result2101 + " <parser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).canSkip())
nova chamada: assertTrue(parser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result2102 + " <parser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).canSkip())
nova chamada: assertTrue(parser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result2103 + " <parser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(parser.isBlockFords())
nova chamada: assertTrue(parser.isBlockFords(), "Era esperado verdadeiro, mas " + result2104 + " <parser.isBlockFords()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).canSkip())
nova chamada: assertTrue(parser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result2105 + " <parser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(parser.isBarrier(node))
nova chamada: assertTrue(parser.isBarrier(node), "Era esperado verdadeiro, mas " + result2106 + " <parser.isBarrier(node)> é falso")
chamada antiga: assertTrue(tmpParser.getAccess(way).isWay())
nova chamada: assertTrue(tmpParser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result2107 + " <tmpParser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(accessEnc.getBool(false, flags))
nova chamada: assertTrue(accessEnc.getBool(false, flags), "Era esperado verdadeiro, mas " + result2108 + " <accessEnc.getBool(false, flags)> é falso")
chamada antiga: assertTrue(accessEnc.getBool(true, flags))
nova chamada: assertTrue(accessEnc.getBool(true, flags), "Era esperado verdadeiro, mas " + result2109 + " <accessEnc.getBool(true, flags)> é falso")
chamada antiga: assertTrue(accessEnc.getBool(false, flags))
nova chamada: assertTrue(accessEnc.getBool(false, flags), "Era esperado verdadeiro, mas " + result2110 + " <accessEnc.getBool(false, flags)> é falso")
chamada antiga: assertTrue(accessEnc.getBool(false, flags))
nova chamada: assertTrue(accessEnc.getBool(false, flags), "Era esperado verdadeiro, mas " + result2111 + " <accessEnc.getBool(false, flags)> é falso")
chamada antiga: assertTrue(accessEnc.getBool(true, flags))
nova chamada: assertTrue(accessEnc.getBool(true, flags), "Era esperado verdadeiro, mas " + result2112 + " <accessEnc.getBool(true, flags)> é falso")
chamada antiga: assertTrue(accessEnc.getBool(true, flags))
nova chamada: assertTrue(accessEnc.getBool(true, flags), "Era esperado verdadeiro, mas " + result2113 + " <accessEnc.getBool(true, flags)> é falso")
chamada antiga: assertTrue(accessEnc.getBool(false, flags))
nova chamada: assertTrue(accessEnc.getBool(false, flags), "Era esperado verdadeiro, mas " + result2114 + " <accessEnc.getBool(false, flags)> é falso")
chamada antiga: assertTrue(accessEnc.getBool(false, flags))
nova chamada: assertTrue(accessEnc.getBool(false, flags), "Era esperado verdadeiro, mas " + result2115 + " <accessEnc.getBool(false, flags)> é falso")
chamada antiga: assertTrue(accessEnc.getBool(true, flags))
nova chamada: assertTrue(accessEnc.getBool(true, flags), "Era esperado verdadeiro, mas " + result2116 + " <accessEnc.getBool(true, flags)> é falso")
chamada antiga: assertTrue(accessEnc.getBool(false, edgeFlags))
nova chamada: assertTrue(accessEnc.getBool(false, edgeFlags), "Era esperado verdadeiro, mas " + result2117 + " <accessEnc.getBool(false, edgeFlags)> é falso")
chamada antiga: assertTrue(accessEnc.getBool(true, edgeFlags))
nova chamada: assertTrue(accessEnc.getBool(true, edgeFlags), "Era esperado verdadeiro, mas " + result2118 + " <accessEnc.getBool(true, edgeFlags)> é falso")
chamada antiga: assertTrue(accessEnc.getBool(false, edgeFlags))
nova chamada: assertTrue(accessEnc.getBool(false, edgeFlags), "Era esperado verdadeiro, mas " + result2119 + " <accessEnc.getBool(false, edgeFlags)> é falso")
chamada antiga: assertTrue(accessEnc.getBool(true, edgeFlags))
nova chamada: assertTrue(accessEnc.getBool(true, edgeFlags), "Era esperado verdadeiro, mas " + result2120 + " <accessEnc.getBool(true, edgeFlags)> é falso")
chamada antiga: assertTrue(accessEnc.getBool(true, edgeFlags))
nova chamada: assertTrue(accessEnc.getBool(true, edgeFlags), "Era esperado verdadeiro, mas " + result2121 + " <accessEnc.getBool(true, edgeFlags)> é falso")
chamada antiga: assertTrue(roundaboutEnc.getBool(false, edgeFlags))
nova chamada: assertTrue(roundaboutEnc.getBool(false, edgeFlags), "Era esperado verdadeiro, mas " + result2122 + " <roundaboutEnc.getBool(false, edgeFlags)> é falso")
chamada antiga: assertTrue(accessEnc.getBool(false, edgeFlags))
nova chamada: assertTrue(accessEnc.getBool(false, edgeFlags), "Era esperado verdadeiro, mas " + result2123 + " <accessEnc.getBool(false, edgeFlags)> é falso")
chamada antiga: assertTrue(accessEnc.getBool(true, edgeFlags))
nova chamada: assertTrue(accessEnc.getBool(true, edgeFlags), "Era esperado verdadeiro, mas " + result2124 + " <accessEnc.getBool(true, edgeFlags)> é falso")
chamada antiga: assertTrue(accessEnc.getBool(false, edgeFlags))
nova chamada: assertTrue(accessEnc.getBool(false, edgeFlags), "Era esperado verdadeiro, mas " + result2125 + " <accessEnc.getBool(false, edgeFlags)> é falso")
chamada antiga: assertTrue(accessEnc.getBool(true, edgeFlags))
nova chamada: assertTrue(accessEnc.getBool(true, edgeFlags), "Era esperado verdadeiro, mas " + result2126 + " <accessEnc.getBool(true, edgeFlags)> é falso")
chamada antiga: assertTrue(accessEnc.getBool(false, edgeFlags))
nova chamada: assertTrue(accessEnc.getBool(false, edgeFlags), "Era esperado verdadeiro, mas " + result2127 + " <accessEnc.getBool(false, edgeFlags)> é falso")
chamada antiga: assertTrue(accessEnc.getBool(true, edgeFlags))
nova chamada: assertTrue(accessEnc.getBool(true, edgeFlags), "Era esperado verdadeiro, mas " + result2128 + " <accessEnc.getBool(true, edgeFlags)> é falso")
chamada antiga: assertTrue(parser.getAccess(way).isWay())
nova chamada: assertTrue(parser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result2129 + " <parser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).canSkip())
nova chamada: assertTrue(parser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result2130 + " <parser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).isWay())
nova chamada: assertTrue(parser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result2131 + " <parser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).isWay())
nova chamada: assertTrue(parser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result2132 + " <parser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).canSkip())
nova chamada: assertTrue(parser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result2133 + " <parser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).isWay())
nova chamada: assertTrue(parser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result2134 + " <parser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).isFerry())
nova chamada: assertTrue(parser.getAccess(way).isFerry(), "Era esperado verdadeiro, mas " + result2135 + " <parser.getAccess(way).isFerry()> é falso")
chamada antiga: assertEquals(60, parser.getAverageSpeedEnc().getDecimal(false, edgeFlags))
nova chamada: assertEquals(60, parser.getAverageSpeedEnc().getDecimal(false, edgeFlags), "Era esperado valores iguais, mas  60 é diferente de " + result2136 + " <parser.getAverageSpeedEnc().getDecimal(false, edgeFlags)>")
chamada antiga: assertTrue(parser.getAccess(way).isFerry())
nova chamada: assertTrue(parser.getAccess(way).isFerry(), "Era esperado verdadeiro, mas " + result2137 + " <parser.getAccess(way).isFerry()> é falso")
chamada antiga: assertEquals(5, parser.getAverageSpeedEnc().getDecimal(false, edgeFlags))
nova chamada: assertEquals(5, parser.getAverageSpeedEnc().getDecimal(false, edgeFlags), "Era esperado valores iguais, mas  5 é diferente de " + result2138 + " <parser.getAverageSpeedEnc().getDecimal(false, edgeFlags)>")
chamada antiga: assertTrue(parser.getAccess(way).isFerry())
nova chamada: assertTrue(parser.getAccess(way).isFerry(), "Era esperado verdadeiro, mas " + result2139 + " <parser.getAccess(way).isFerry()> é falso")
chamada antiga: assertEquals(5, parser.getAverageSpeedEnc().getDecimal(false, edgeFlags))
nova chamada: assertEquals(5, parser.getAverageSpeedEnc().getDecimal(false, edgeFlags), "Era esperado valores iguais, mas  5 é diferente de " + result2140 + " <parser.getAverageSpeedEnc().getDecimal(false, edgeFlags)>")
chamada antiga: assertTrue(parser.getAccess(way).isFerry())
nova chamada: assertTrue(parser.getAccess(way).isFerry(), "Era esperado verdadeiro, mas " + result2141 + " <parser.getAccess(way).isFerry()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).canSkip())
nova chamada: assertTrue(parser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result2142 + " <parser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).canSkip())
nova chamada: assertTrue(parser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result2143 + " <parser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).isFerry())
nova chamada: assertTrue(parser.getAccess(way).isFerry(), "Era esperado verdadeiro, mas " + result2144 + " <parser.getAccess(way).isFerry()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).canSkip())
nova chamada: assertTrue(parser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result2145 + " <parser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).isFerry())
nova chamada: assertTrue(parser.getAccess(way).isFerry(), "Era esperado verdadeiro, mas " + result2146 + " <parser.getAccess(way).isFerry()> é falso")
chamada antiga: assertTrue(parser.isBarrier(node))
nova chamada: assertTrue(parser.isBarrier(node), "Era esperado verdadeiro, mas " + result2147 + " <parser.isBarrier(node)> é falso")
chamada antiga: assertTrue(parser.isBarrier(node))
nova chamada: assertTrue(parser.isBarrier(node), "Era esperado verdadeiro, mas " + result2148 + " <parser.isBarrier(node)> é falso")
chamada antiga: assertEquals(WayAccess.CAN_SKIP, parser.getAccess(way))
nova chamada: assertEquals(WayAccess.CAN_SKIP, parser.getAccess(way), "Era esperado valores iguais, mas  WayAccess.CAN_SKIP é diferente de " + result2149 + " <parser.getAccess(way)>")
chamada antiga: assertNotEquals(WayAccess.CAN_SKIP, bikeParser.getAccess(way))
nova chamada: assertNotEquals(WayAccess.CAN_SKIP, bikeParser.getAccess(way), "Era esperado valores diferentes, mas  WayAccess.CAN_SKIP é igual a " + result2150 + " <bikeParser.getAccess(way)>")
chamada antiga: assertTrue(bikeAccessEnc.getBool(true, edgeFlags))
nova chamada: assertTrue(bikeAccessEnc.getBool(true, edgeFlags), "Era esperado verdadeiro, mas " + result2151 + " <bikeAccessEnc.getBool(true, edgeFlags)> é falso")
chamada antiga: assertTrue(bikeAccessEnc.getBool(false, edgeFlags))
nova chamada: assertTrue(bikeAccessEnc.getBool(false, edgeFlags), "Era esperado verdadeiro, mas " + result2152 + " <bikeAccessEnc.getBool(false, edgeFlags)> é falso")
chamada antiga: assertTrue(parser.getAccess(way).isWay())
nova chamada: assertTrue(parser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result2153 + " <parser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).isWay())
nova chamada: assertTrue(parser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result2154 + " <parser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).isWay())
nova chamada: assertTrue(parser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result2155 + " <parser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).canSkip())
nova chamada: assertTrue(parser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result2156 + " <parser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).isWay())
nova chamada: assertTrue(parser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result2157 + " <parser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).isWay())
nova chamada: assertTrue(parser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result2158 + " <parser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).canSkip())
nova chamada: assertTrue(parser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result2159 + " <parser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).isWay())
nova chamada: assertTrue(parser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result2160 + " <parser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(parser.getAccessEnc().getBool(false, flags))
nova chamada: assertTrue(parser.getAccessEnc().getBool(false, flags), "Era esperado verdadeiro, mas " + result2161 + " <parser.getAccessEnc().getBool(false, flags)> é falso")
chamada antiga: assertTrue(parser.getAccessEnc().getBool(true, flags))
nova chamada: assertTrue(parser.getAccessEnc().getBool(true, flags), "Era esperado verdadeiro, mas " + result2162 + " <parser.getAccessEnc().getBool(true, flags)> é falso")
chamada antiga: assertTrue(parser.getAccessEnc().getBool(false, flags))
nova chamada: assertTrue(parser.getAccessEnc().getBool(false, flags), "Era esperado verdadeiro, mas " + result2163 + " <parser.getAccessEnc().getBool(false, flags)> é falso")
chamada antiga: assertTrue(parser.getAccessEnc().getBool(false, flags))
nova chamada: assertTrue(parser.getAccessEnc().getBool(false, flags), "Era esperado verdadeiro, mas " + result2164 + " <parser.getAccessEnc().getBool(false, flags)> é falso")
chamada antiga: assertTrue(parser.getAccessEnc().getBool(false, flags))
nova chamada: assertTrue(parser.getAccessEnc().getBool(false, flags), "Era esperado verdadeiro, mas " + result2165 + " <parser.getAccessEnc().getBool(false, flags)> é falso")
chamada antiga: assertTrue(parser.getAccessEnc().getBool(true, flags))
nova chamada: assertTrue(parser.getAccessEnc().getBool(true, flags), "Era esperado verdadeiro, mas " + result2166 + " <parser.getAccessEnc().getBool(true, flags)> é falso")
chamada antiga: assertTrue(parser.getAccessEnc().getBool(true, flags))
nova chamada: assertTrue(parser.getAccessEnc().getBool(true, flags), "Era esperado verdadeiro, mas " + result2167 + " <parser.getAccessEnc().getBool(true, flags)> é falso")
chamada antiga: assertTrue(parser.getAccessEnc().getBool(true, flags))
nova chamada: assertTrue(parser.getAccessEnc().getBool(true, flags), "Era esperado verdadeiro, mas " + result2168 + " <parser.getAccessEnc().getBool(true, flags)> é falso")
chamada antiga: assertTrue(parser.getAccessEnc().getBool(false, flags))
nova chamada: assertTrue(parser.getAccessEnc().getBool(false, flags), "Era esperado verdadeiro, mas " + result2169 + " <parser.getAccessEnc().getBool(false, flags)> é falso")
chamada antiga: assertTrue(parser.getAccessEnc().getBool(false, flags))
nova chamada: assertTrue(parser.getAccessEnc().getBool(false, flags), "Era esperado verdadeiro, mas " + result2170 + " <parser.getAccessEnc().getBool(false, flags)> é falso")
chamada antiga: assertTrue(parser.getAccessEnc().getBool(true, flags))
nova chamada: assertTrue(parser.getAccessEnc().getBool(true, flags), "Era esperado verdadeiro, mas " + result2171 + " <parser.getAccessEnc().getBool(true, flags)> é falso")
chamada antiga: assertTrue(parser.getAccessEnc().getBool(false, flags))
nova chamada: assertTrue(parser.getAccessEnc().getBool(false, flags), "Era esperado verdadeiro, mas " + result2172 + " <parser.getAccessEnc().getBool(false, flags)> é falso")
chamada antiga: assertTrue(parser.getAccessEnc().getBool(false, flags))
nova chamada: assertTrue(parser.getAccessEnc().getBool(false, flags), "Era esperado verdadeiro, mas " + result2173 + " <parser.getAccessEnc().getBool(false, flags)> é falso")
chamada antiga: assertTrue(parser.getAccessEnc().getBool(true, flags))
nova chamada: assertTrue(parser.getAccessEnc().getBool(true, flags), "Era esperado verdadeiro, mas " + result2174 + " <parser.getAccessEnc().getBool(true, flags)> é falso")
chamada antiga: assertTrue(parser.getAccessEnc().getBool(false, flags))
nova chamada: assertTrue(parser.getAccessEnc().getBool(false, flags), "Era esperado verdadeiro, mas " + result2175 + " <parser.getAccessEnc().getBool(false, flags)> é falso")
chamada antiga: assertTrue(parser.getAccessEnc().getBool(true, flags))
nova chamada: assertTrue(parser.getAccessEnc().getBool(true, flags), "Era esperado verdadeiro, mas " + result2176 + " <parser.getAccessEnc().getBool(true, flags)> é falso")
chamada antiga: assertTrue(parser.getAccessEnc().getBool(false, flags))
nova chamada: assertTrue(parser.getAccessEnc().getBool(false, flags), "Era esperado verdadeiro, mas " + result2177 + " <parser.getAccessEnc().getBool(false, flags)> é falso")
chamada antiga: assertTrue(parser.getAccessEnc().getBool(true, flags))
nova chamada: assertTrue(parser.getAccessEnc().getBool(true, flags), "Era esperado verdadeiro, mas " + result2178 + " <parser.getAccessEnc().getBool(true, flags)> é falso")
chamada antiga: assertTrue(parser.getAccessEnc().getBool(false, flags))
nova chamada: assertTrue(parser.getAccessEnc().getBool(false, flags), "Era esperado verdadeiro, mas " + result2179 + " <parser.getAccessEnc().getBool(false, flags)> é falso")
chamada antiga: assertTrue(parser.getAccessEnc().getBool(true, flags))
nova chamada: assertTrue(parser.getAccessEnc().getBool(true, flags), "Era esperado verdadeiro, mas " + result2180 + " <parser.getAccessEnc().getBool(true, flags)> é falso")
chamada antiga: assertTrue(parser.getAccessEnc().getBool(false, flags))
nova chamada: assertTrue(parser.getAccessEnc().getBool(false, flags), "Era esperado verdadeiro, mas " + result2181 + " <parser.getAccessEnc().getBool(false, flags)> é falso")
chamada antiga: assertTrue(parser.getAccessEnc().getBool(true, flags))
nova chamada: assertTrue(parser.getAccessEnc().getBool(true, flags), "Era esperado verdadeiro, mas " + result2182 + " <parser.getAccessEnc().getBool(true, flags)> é falso")
chamada antiga: assertTrue(parser.getAccessEnc().getBool(false, flags))
nova chamada: assertTrue(parser.getAccessEnc().getBool(false, flags), "Era esperado verdadeiro, mas " + result2183 + " <parser.getAccessEnc().getBool(false, flags)> é falso")
chamada antiga: assertTrue(parser.getAccessEnc().getBool(true, flags))
nova chamada: assertTrue(parser.getAccessEnc().getBool(true, flags), "Era esperado verdadeiro, mas " + result2184 + " <parser.getAccessEnc().getBool(true, flags)> é falso")
chamada antiga: assertTrue(parser.getAccessEnc().getBool(false, flags))
nova chamada: assertTrue(parser.getAccessEnc().getBool(false, flags), "Era esperado verdadeiro, mas " + result2185 + " <parser.getAccessEnc().getBool(false, flags)> é falso")
chamada antiga: assertTrue(parser.getAccessEnc().getBool(true, flags))
nova chamada: assertTrue(parser.getAccessEnc().getBool(true, flags), "Era esperado verdadeiro, mas " + result2186 + " <parser.getAccessEnc().getBool(true, flags)> é falso")
chamada antiga: assertTrue(parser.getAccess(way).isWay())
nova chamada: assertTrue(parser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result2187 + " <parser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).canSkip())
nova chamada: assertTrue(parser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result2188 + " <parser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).isWay())
nova chamada: assertTrue(parser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result2189 + " <parser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).canSkip())
nova chamada: assertTrue(parser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result2190 + " <parser.getAccess(way).canSkip()> é falso")
chamada antiga: assertEquals(RouteNetwork.INTERNATIONAL, encodingManager.getEnumEncodedValue(BikeNetwork.KEY, RouteNetwork.class).getEnum(false, flags))
nova chamada: assertEquals(RouteNetwork.INTERNATIONAL, encodingManager.getEnumEncodedValue(BikeNetwork.KEY, RouteNetwork.class).getEnum(false, flags), "Era esperado valores iguais, mas  RouteNetwork.INTERNATIONAL é diferente de " + result2191 + " <encodingManager.getEnumEncodedValue(BikeNetwork.KEY, RouteNetwork.class).getEnum(false, flags)>")
chamada antiga: assertEquals(RouteNetwork.MISSING, encodingManager.getEnumEncodedValue(BikeNetwork.KEY, RouteNetwork.class).getEnum(false, flags))
nova chamada: assertEquals(RouteNetwork.MISSING, encodingManager.getEnumEncodedValue(BikeNetwork.KEY, RouteNetwork.class).getEnum(false, flags), "Era esperado valores iguais, mas  RouteNetwork.MISSING é diferente de " + result2192 + " <encodingManager.getEnumEncodedValue(BikeNetwork.KEY, RouteNetwork.class).getEnum(false, flags)>")
chamada antiga: assertEquals(RouteNetwork.MISSING, encodingManager.getEnumEncodedValue(BikeNetwork.KEY, RouteNetwork.class).getEnum(false, flags))
nova chamada: assertEquals(RouteNetwork.MISSING, encodingManager.getEnumEncodedValue(BikeNetwork.KEY, RouteNetwork.class).getEnum(false, flags), "Era esperado valores iguais, mas  RouteNetwork.MISSING é diferente de " + result2193 + " <encodingManager.getEnumEncodedValue(BikeNetwork.KEY, RouteNetwork.class).getEnum(false, flags)>")
chamada antiga: assertTrue(parser.isBarrier(node))
nova chamada: assertTrue(parser.isBarrier(node), "Era esperado verdadeiro, mas " + result2194 + " <parser.isBarrier(node)> é falso")
chamada antiga: assertEquals(expected, calc.getSpeed(way))
nova chamada: assertEquals(expected, calc.getSpeed(way), "Era esperado valores iguais, mas  expected é diferente de " + result2195 + " <calc.getSpeed(way)>")
chamada antiga: assertTrue(FootTagParser.MEAN_SPEED > footAvgSpeedEnc.getDecimal(false, flags))
nova chamada: assertTrue(FootTagParser.MEAN_SPEED > footAvgSpeedEnc.getDecimal(false, flags), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(edge.get(footAccessEnc))
nova chamada: assertTrue(edge.get(footAccessEnc), "Era esperado verdadeiro, mas " + result2196 + " <edge.get(footAccessEnc)> é falso")
chamada antiga: assertTrue(edge.getReverse(footAccessEnc))
nova chamada: assertTrue(edge.getReverse(footAccessEnc), "Era esperado verdadeiro, mas " + result2197 + " <edge.getReverse(footAccessEnc)> é falso")
chamada antiga: assertTrue(edge.get(carAccessEnc))
nova chamada: assertTrue(edge.get(carAccessEnc), "Era esperado verdadeiro, mas " + result2198 + " <edge.get(carAccessEnc)> é falso")
chamada antiga: assertEquals(GHUtility.asSet(1, 2), GHUtility.getNeighbors(out.setBaseNode(0)))
nova chamada: assertEquals(GHUtility.asSet(1, 2), GHUtility.getNeighbors(out.setBaseNode(0)), "Era esperado valores iguais, mas " + result2199 + " <GHUtility.asSet(1, 2)> é diferente de " + result2200 + " <GHUtility.getNeighbors(out.setBaseNode(0))>")
chamada antiga: assertEquals(GHUtility.asSet(0, 3), GHUtility.getNeighbors(out.setBaseNode(1)))
nova chamada: assertEquals(GHUtility.asSet(0, 3), GHUtility.getNeighbors(out.setBaseNode(1)), "Era esperado valores iguais, mas " + result2201 + " <GHUtility.asSet(0, 3)> é diferente de " + result2202 + " <GHUtility.getNeighbors(out.setBaseNode(1))>")
chamada antiga: assertEquals(GHUtility.asSet(0), GHUtility.getNeighbors(out.setBaseNode(2)))
nova chamada: assertEquals(GHUtility.asSet(0), GHUtility.getNeighbors(out.setBaseNode(2)), "Era esperado valores iguais, mas " + result2203 + " <GHUtility.asSet(0)> é diferente de " + result2204 + " <GHUtility.getNeighbors(out.setBaseNode(2))>")
chamada antiga: assertTrue(footParser.getAccess(way).isWay())
nova chamada: assertTrue(footParser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result2205 + " <footParser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(footParser.getAccess(way).isWay())
nova chamada: assertTrue(footParser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result2206 + " <footParser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(footParser.getAccess(way).canSkip())
nova chamada: assertTrue(footParser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result2207 + " <footParser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(footParser.getAccess(way).canSkip())
nova chamada: assertTrue(footParser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result2208 + " <footParser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(footParser.getAccess(way).isWay())
nova chamada: assertTrue(footParser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result2209 + " <footParser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(footParser.getAccess(way).isWay())
nova chamada: assertTrue(footParser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result2210 + " <footParser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(footParser.getAccess(way).isWay())
nova chamada: assertTrue(footParser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result2211 + " <footParser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(footParser.getAccess(way).canSkip())
nova chamada: assertTrue(footParser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result2212 + " <footParser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(footParser.getAccess(way).isWay())
nova chamada: assertTrue(footParser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result2213 + " <footParser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(footParser.getAccess(way).isWay())
nova chamada: assertTrue(footParser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result2214 + " <footParser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(footParser.getAccess(way).canSkip())
nova chamada: assertTrue(footParser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result2215 + " <footParser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(footParser.getAccess(way).isWay())
nova chamada: assertTrue(footParser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result2216 + " <footParser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(footParser.getAccess(way).canSkip())
nova chamada: assertTrue(footParser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result2217 + " <footParser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(footParser.getAccess(way).isWay())
nova chamada: assertTrue(footParser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result2218 + " <footParser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(footParser.getAccess(way).isWay())
nova chamada: assertTrue(footParser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result2219 + " <footParser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(footParser.getAccess(way).canSkip())
nova chamada: assertTrue(footParser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result2220 + " <footParser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(footParser.getAccess(way).canSkip())
nova chamada: assertTrue(footParser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result2221 + " <footParser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(footParser.getAccess(way).isWay())
nova chamada: assertTrue(footParser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result2222 + " <footParser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(footParser.getAccess(way).canSkip())
nova chamada: assertTrue(footParser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result2223 + " <footParser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(footParser.getAccess(way).canSkip())
nova chamada: assertTrue(footParser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result2224 + " <footParser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(footParser.getAccess(way).isWay())
nova chamada: assertTrue(footParser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result2225 + " <footParser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(footParser.getAccess(way).isFerry())
nova chamada: assertTrue(footParser.getAccess(way).isFerry(), "Era esperado verdadeiro, mas " + result2226 + " <footParser.getAccess(way).isFerry()> é falso")
chamada antiga: assertTrue(footParser.getAccess(way).canSkip())
nova chamada: assertTrue(footParser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result2227 + " <footParser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(footParser.getAccess(way).isFerry())
nova chamada: assertTrue(footParser.getAccess(way).isFerry(), "Era esperado verdadeiro, mas " + result2228 + " <footParser.getAccess(way).isFerry()> é falso")
chamada antiga: assertTrue(footParser.getAccess(way).isFerry())
nova chamada: assertTrue(footParser.getAccess(way).isFerry(), "Era esperado verdadeiro, mas " + result2229 + " <footParser.getAccess(way).isFerry()> é falso")
chamada antiga: assertTrue(footParser.getAccess(way).isFerry())
nova chamada: assertTrue(footParser.getAccess(way).isFerry(), "Era esperado verdadeiro, mas " + result2230 + " <footParser.getAccess(way).isFerry()> é falso")
chamada antiga: assertTrue(footParser.getAccess(way).isFerry())
nova chamada: assertTrue(footParser.getAccess(way).isFerry(), "Era esperado verdadeiro, mas " + result2231 + " <footParser.getAccess(way).isFerry()> é falso")
chamada antiga: assertTrue(footParser.getAccess(way).canSkip())
nova chamada: assertTrue(footParser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result2232 + " <footParser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(footParser.getAccess(way).canSkip())
nova chamada: assertTrue(footParser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result2233 + " <footParser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(footParser.getAccess(way).canSkip())
nova chamada: assertTrue(footParser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result2234 + " <footParser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(footParser.getAccess(way).isWay())
nova chamada: assertTrue(footParser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result2235 + " <footParser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(flags.isEmpty())
nova chamada: assertTrue(flags.isEmpty(), "Era esperado verdadeiro, mas " + result2236 + " <flags.isEmpty()> é falso")
chamada antiga: assertEquals(15, footParser.getAverageSpeedEnc().getDecimal(false, edgeFlags))
nova chamada: assertEquals(15, footParser.getAverageSpeedEnc().getDecimal(false, edgeFlags), "Era esperado valores iguais, mas  15 é diferente de " + result2237 + " <footParser.getAverageSpeedEnc().getDecimal(false, edgeFlags)>")
chamada antiga: assertEquals(0, flags.ints[0])
nova chamada: assertEquals(0, flags.ints[0], "Era esperado valores iguais, mas  0 é diferente de " + " flags.ints[0]")
chamada antiga: assertEquals(PriorityCode.UNCHANGED.getValue(), footParser.handlePriority(way, null))
nova chamada: assertEquals(PriorityCode.UNCHANGED.getValue(), footParser.handlePriority(way, null), "Era esperado valores iguais, mas " + result2238 + " <PriorityCode.UNCHANGED.getValue()> é diferente de " + result2239 + " <footParser.handlePriority(way, null)>")
chamada antiga: assertEquals(PriorityCode.AVOID.getValue(), footParser.handlePriority(way, null))
nova chamada: assertEquals(PriorityCode.AVOID.getValue(), footParser.handlePriority(way, null), "Era esperado valores iguais, mas " + result2240 + " <PriorityCode.AVOID.getValue()> é diferente de " + result2241 + " <footParser.handlePriority(way, null)>")
chamada antiga: assertEquals(PriorityCode.SLIGHT_AVOID.getValue(), footParser.handlePriority(way, null))
nova chamada: assertEquals(PriorityCode.SLIGHT_AVOID.getValue(), footParser.handlePriority(way, null), "Era esperado valores iguais, mas " + result2242 + " <PriorityCode.SLIGHT_AVOID.getValue()> é diferente de " + result2243 + " <footParser.handlePriority(way, null)>")
chamada antiga: assertEquals(PriorityCode.SLIGHT_AVOID.getValue(), footParser.handlePriority(way, null))
nova chamada: assertEquals(PriorityCode.SLIGHT_AVOID.getValue(), footParser.handlePriority(way, null), "Era esperado valores iguais, mas " + result2244 + " <PriorityCode.SLIGHT_AVOID.getValue()> é diferente de " + result2245 + " <footParser.handlePriority(way, null)>")
chamada antiga: assertEquals(PriorityCode.PREFER.getValue(), footParser.handlePriority(way, null))
nova chamada: assertEquals(PriorityCode.PREFER.getValue(), footParser.handlePriority(way, null), "Era esperado valores iguais, mas " + result2246 + " <PriorityCode.PREFER.getValue()> é diferente de " + result2247 + " <footParser.handlePriority(way, null)>")
chamada antiga: assertEquals(PriorityCode.UNCHANGED.getValue(), footParser.handlePriority(way, null))
nova chamada: assertEquals(PriorityCode.UNCHANGED.getValue(), footParser.handlePriority(way, null), "Era esperado valores iguais, mas " + result2248 + " <PriorityCode.UNCHANGED.getValue()> é diferente de " + result2249 + " <footParser.handlePriority(way, null)>")
chamada antiga: assertEquals(PriorityCode.UNCHANGED.getValue(), footParser.handlePriority(way, null))
nova chamada: assertEquals(PriorityCode.UNCHANGED.getValue(), footParser.handlePriority(way, null), "Era esperado valores iguais, mas " + result2250 + " <PriorityCode.UNCHANGED.getValue()> é diferente de " + result2251 + " <footParser.handlePriority(way, null)>")
chamada antiga: assertEquals(PriorityCode.SLIGHT_AVOID.getValue(), footParser.handlePriority(way, null))
nova chamada: assertEquals(PriorityCode.SLIGHT_AVOID.getValue(), footParser.handlePriority(way, null), "Era esperado valores iguais, mas " + result2252 + " <PriorityCode.SLIGHT_AVOID.getValue()> é diferente de " + result2253 + " <footParser.handlePriority(way, null)>")
chamada antiga: assertEquals(PriorityCode.AVOID.getValue(), footParser.handlePriority(way, null))
nova chamada: assertEquals(PriorityCode.AVOID.getValue(), footParser.handlePriority(way, null), "Era esperado valores iguais, mas " + result2254 + " <PriorityCode.AVOID.getValue()> é diferente de " + result2255 + " <footParser.handlePriority(way, null)>")
chamada antiga: assertEquals(PriorityCode.AVOID.getValue(), footParser.handlePriority(way, null))
nova chamada: assertEquals(PriorityCode.AVOID.getValue(), footParser.handlePriority(way, null), "Era esperado valores iguais, mas " + result2256 + " <PriorityCode.AVOID.getValue()> é diferente de " + result2257 + " <footParser.handlePriority(way, null)>")
chamada antiga: assertEquals(PriorityCode.PREFER.getValue(), footParser.handlePriority(way, null))
nova chamada: assertEquals(PriorityCode.PREFER.getValue(), footParser.handlePriority(way, null), "Era esperado valores iguais, mas " + result2258 + " <PriorityCode.PREFER.getValue()> é diferente de " + result2259 + " <footParser.handlePriority(way, null)>")
chamada antiga: assertTrue(footParser.isBarrier(node))
nova chamada: assertTrue(footParser.isBarrier(node), "Era esperado verdadeiro, mas " + result2260 + " <footParser.isBarrier(node)> é falso")
chamada antiga: assertTrue(footParser.isBarrier(node))
nova chamada: assertTrue(footParser.isBarrier(node), "Era esperado verdadeiro, mas " + result2261 + " <footParser.isBarrier(node)> é falso")
chamada antiga: assertTrue(footParser.isBarrier(node))
nova chamada: assertTrue(footParser.isBarrier(node), "Era esperado verdadeiro, mas " + result2262 + " <footParser.isBarrier(node)> é falso")
chamada antiga: assertTrue(footParser.isBarrier(node))
nova chamada: assertTrue(footParser.isBarrier(node), "Era esperado verdadeiro, mas " + result2263 + " <footParser.isBarrier(node)> é falso")
chamada antiga: assertTrue(footParser.isBarrier(node))
nova chamada: assertTrue(footParser.isBarrier(node), "Era esperado verdadeiro, mas " + result2264 + " <footParser.isBarrier(node)> é falso")
chamada antiga: assertTrue(blockFordsParser.isBarrier(node))
nova chamada: assertTrue(blockFordsParser.isBarrier(node), "Era esperado verdadeiro, mas " + result2265 + " <blockFordsParser.isBarrier(node)> é falso")
chamada antiga: assertTrue(footParser.isBarrier(node))
nova chamada: assertTrue(footParser.isBarrier(node), "Era esperado verdadeiro, mas " + result2266 + " <footParser.isBarrier(node)> é falso")
chamada antiga: assertTrue(footParser.isBarrier(node))
nova chamada: assertTrue(footParser.isBarrier(node), "Era esperado verdadeiro, mas " + result2267 + " <footParser.isBarrier(node)> é falso")
chamada antiga: assertTrue(footParser.isBarrier(node))
nova chamada: assertTrue(footParser.isBarrier(node), "Era esperado verdadeiro, mas " + result2268 + " <footParser.isBarrier(node)> é falso")
chamada antiga: assertEquals(16, edge.get(speedEnc))
nova chamada: assertEquals(16, edge.get(speedEnc), "Era esperado valores iguais, mas  16 é diferente de " + result2269 + " <edge.get(speedEnc)>")
chamada antiga: assertEquals(16, speedEnc.getNextStorableValue(15))
nova chamada: assertEquals(16, speedEnc.getNextStorableValue(15), "Era esperado valores iguais, mas  16 é diferente de " + result2270 + " <speedEnc.getNextStorableValue(15)>")
chamada antiga: assertEquals(1, tour.getNumberOfGeneratedPoints())
nova chamada: assertEquals(1, tour.getNumberOfGeneratedPoints(), "Era esperado valores iguais, mas  1 é diferente de " + result2271 + " <tour.getNumberOfGeneratedPoints()>")
chamada antiga: assertTrue(0 <= tour.getHeadingForIteration(0))
nova chamada: assertTrue(0 <= tour.getHeadingForIteration(0), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(360 >= tour.getHeadingForIteration(0))
nova chamada: assertTrue(360 >= tour.getHeadingForIteration(0), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(29 <= tour.getDistanceForIteration(0))
nova chamada: assertTrue(29 <= tour.getDistanceForIteration(0), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(37 >= tour.getDistanceForIteration(0))
nova chamada: assertTrue(37 >= tour.getDistanceForIteration(0), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(new CarTagParser(manager, new PMap("block_fords=true")).isBlockFords())
nova chamada: assertTrue(new CarTagParser(manager, new PMap("block_fords=true")).isBlockFords(), "Era esperado verdadeiro, mas " + result2272 + " <new CarTagParser(manager, new PMap('block_fords=true')).isBlockFords()> é falso")
chamada antiga: assertTrue(new BikeTagParser(manager, new PMap("block_fords=true")).isBlockFords())
nova chamada: assertTrue(new BikeTagParser(manager, new PMap("block_fords=true")).isBlockFords(), "Era esperado verdadeiro, mas " + result2273 + " <new BikeTagParser(manager, new PMap('block_fords=true')).isBlockFords()> é falso")
chamada antiga: assertTrue(new FootTagParser(manager, new PMap("block_fords=true")).isBlockFords())
nova chamada: assertTrue(new FootTagParser(manager, new PMap("block_fords=true")).isBlockFords(), "Era esperado verdadeiro, mas " + result2274 + " <new FootTagParser(manager, new PMap('block_fords=true')).isBlockFords()> é falso")
chamada antiga: assertEquals(Arrays.asList("bike", "hike"), em.getVehicles())
nova chamada: assertEquals(Arrays.asList("bike", "hike"), em.getVehicles(), "Era esperado valores iguais, mas " + result2275 + " <Arrays.asList('bike', 'hike')> é diferente de " + result2276 + " <em.getVehicles()>")
chamada antiga: assertEquals(RouteNetwork.LOCAL, bikeNetworkEnc.getEnum(false, edgeFlags))
nova chamada: assertEquals(RouteNetwork.LOCAL, bikeNetworkEnc.getEnum(false, edgeFlags), "Era esperado valores iguais, mas  RouteNetwork.LOCAL é diferente de " + result2277 + " <bikeNetworkEnc.getEnum(false, edgeFlags)>")
chamada antiga: assertTrue(bike1PriorityEnc.getDecimal(false, edgeFlags) > bike2PriorityEnc.getDecimal(false, edgeFlags))
nova chamada: assertTrue(bike1PriorityEnc.getDecimal(false, edgeFlags) > bike2PriorityEnc.getDecimal(false, edgeFlags), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(bikePriorityEnc.getDecimal(false, edgeFlags) > mtbPriorityEnc.getDecimal(false, edgeFlags))
nova chamada: assertTrue(bikePriorityEnc.getDecimal(false, edgeFlags) > mtbPriorityEnc.getDecimal(false, edgeFlags), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(roundaboutEnc.getBool(false, edgeFlags))
nova chamada: assertTrue(roundaboutEnc.getBool(false, edgeFlags), "Era esperado verdadeiro, mas " + result2278 + " <roundaboutEnc.getBool(false, edgeFlags)> é falso")
chamada antiga: assertTrue(roundaboutEnc.getBool(false, edgeFlags))
nova chamada: assertTrue(roundaboutEnc.getBool(false, edgeFlags), "Era esperado verdadeiro, mas " + result2279 + " <roundaboutEnc.getBool(false, edgeFlags)> é falso")
chamada antiga: assertTrue(parser.getAccess(way).isWay())
nova chamada: assertTrue(parser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result2280 + " <parser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).isWay())
nova chamada: assertTrue(parser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result2281 + " <parser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).isWay())
nova chamada: assertTrue(parser.getAccess(way).isWay(), "Era esperado verdadeiro, mas " + result2282 + " <parser.getAccess(way).isWay()> é falso")
chamada antiga: assertTrue(parser.getAccess(way).canSkip())
nova chamada: assertTrue(parser.getAccess(way).canSkip(), "Era esperado verdadeiro, mas " + result2283 + " <parser.getAccess(way).canSkip()> é falso")
chamada antiga: assertTrue(parser.isBarrier(node))
nova chamada: assertTrue(parser.isBarrier(node), "Era esperado verdadeiro, mas " + result2284 + " <parser.isBarrier(node)> é falso")
chamada antiga: assertEquals(IntArrayList.from(5, 2, 3, 4, 7, 6, 3, 1), p.calcNodes())
nova chamada: assertEquals(IntArrayList.from(5, 2, 3, 4, 7, 6, 3, 1), p.calcNodes(), "Era esperado valores iguais, mas " + result2285 + " <IntArrayList.from(5, 2, 3, 4, 7, 6, 3, 1)> é diferente de " + result2286 + " <p.calcNodes()>")
chamada antiga: assertEquals(IntArrayList.from(5, 6, 7), p.calcNodes())
nova chamada: assertEquals(IntArrayList.from(5, 6, 7), p.calcNodes(), "Era esperado valores iguais, mas " + result2287 + " <IntArrayList.from(5, 6, 7)> é diferente de " + result2288 + " <p.calcNodes()>")
chamada antiga: assertEquals(IntArrayList.from(7, 6, 3, 2, 5), p.calcNodes())
nova chamada: assertEquals(IntArrayList.from(7, 6, 3, 2, 5), p.calcNodes(), "Era esperado valores iguais, mas " + result2289 + " <IntArrayList.from(7, 6, 3, 2, 5)> é diferente de " + result2290 + " <p.calcNodes()>")
chamada antiga: assertEquals(IntArrayList.from(0, 4, 1, 1, 4, 3), p.calcNodes())
nova chamada: assertEquals(IntArrayList.from(0, 4, 1, 1, 4, 3), p.calcNodes(), "Era esperado valores iguais, mas " + result2291 + " <IntArrayList.from(0, 4, 1, 1, 4, 3)> é diferente de " + result2292 + " <p.calcNodes()>")
chamada antiga: assertEquals(IntArrayList.from(7, 6, 3, 6, 5), p.calcNodes())
nova chamada: assertEquals(IntArrayList.from(7, 6, 3, 6, 5), p.calcNodes(), "Era esperado valores iguais, mas " + result2293 + " <IntArrayList.from(7, 6, 3, 6, 5)> é diferente de " + result2294 + " <p.calcNodes()>")
chamada antiga: assertEquals(IntArrayList.from(7, 6, 3, 2, 5), p.calcNodes())
nova chamada: assertEquals(IntArrayList.from(7, 6, 3, 2, 5), p.calcNodes(), "Era esperado valores iguais, mas " + result2295 + " <IntArrayList.from(7, 6, 3, 2, 5)> é diferente de " + result2296 + " <p.calcNodes()>")
chamada antiga: assertEquals(IntArrayList.from(7, 6, 3, 2, 5), p.calcNodes())
nova chamada: assertEquals(IntArrayList.from(7, 6, 3, 2, 5), p.calcNodes(), "Era esperado valores iguais, mas " + result2297 + " <IntArrayList.from(7, 6, 3, 2, 5)> é diferente de " + result2298 + " <p.calcNodes()>")
chamada antiga: assertEquals(IntArrayList.from(5, 2, 3, 1), p.calcNodes())
nova chamada: assertEquals(IntArrayList.from(5, 2, 3, 1), p.calcNodes(), "Era esperado valores iguais, mas " + result2299 + " <IntArrayList.from(5, 2, 3, 1)> é diferente de " + result2300 + " <p.calcNodes()>")
chamada antiga: assertEquals(IntArrayList.from(5, 6, 3, 1), p.calcNodes())
nova chamada: assertEquals(IntArrayList.from(5, 6, 3, 1), p.calcNodes(), "Era esperado valores iguais, mas " + result2301 + " <IntArrayList.from(5, 6, 3, 1)> é diferente de " + result2302 + " <p.calcNodes()>")
chamada antiga: assertEquals(IntArrayList.from(5, 6, 7, 4, 3, 1), p.calcNodes())
nova chamada: assertEquals(IntArrayList.from(5, 6, 7, 4, 3, 1), p.calcNodes(), "Era esperado valores iguais, mas " + result2303 + " <IntArrayList.from(5, 6, 7, 4, 3, 1)> é diferente de " + result2304 + " <p.calcNodes()>")
chamada antiga: assertEquals(IntArrayList.from(3, 2, 2, 4), p.calcNodes())
nova chamada: assertEquals(IntArrayList.from(3, 2, 2, 4), p.calcNodes(), "Era esperado valores iguais, mas " + result2305 + " <IntArrayList.from(3, 2, 2, 4)> é diferente de " + result2306 + " <p.calcNodes()>")
chamada antiga: assertEquals(IntArrayList.from(0, 1, 4, 4, 5), p.calcNodes())
nova chamada: assertEquals(IntArrayList.from(0, 1, 4, 4, 5), p.calcNodes(), "Era esperado valores iguais, mas " + result2307 + " <IntArrayList.from(0, 1, 4, 4, 5)> é diferente de " + result2308 + " <p.calcNodes()>")
chamada antiga: assertEquals(4, size())
nova chamada: assertEquals(4, size(), "Era esperado valores iguais, mas  4 é diferente de " + result2309 + " <size()>")
chamada antiga: assertEquals(IntArrayList.from(12, 5, 4, 8), elements)
nova chamada: assertEquals(IntArrayList.from(12, 5, 4, 8), elements, "Era esperado valores iguais, mas " + result2310 + " <IntArrayList.from(12, 5, 4, 8)> é diferente de " + " elements")
chamada antiga: assertEquals(0, StringUtils.getLevenshteinDistance("", ""))
nova chamada: assertEquals(0, StringUtils.getLevenshteinDistance("", ""), "Era esperado valores iguais, mas  0 é diferente de " + result2311 + " <StringUtils.getLevenshteinDistance('', '')>")
chamada antiga: assertEquals(1, StringUtils.getLevenshteinDistance("", "a"))
nova chamada: assertEquals(1, StringUtils.getLevenshteinDistance("", "a"), "Era esperado valores iguais, mas  1 é diferente de " + result2312 + " <StringUtils.getLevenshteinDistance('', 'a')>")
chamada antiga: assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", ""))
nova chamada: assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", ""), "Era esperado valores iguais, mas  7 é diferente de " + result2313 + " <StringUtils.getLevenshteinDistance('aaapppp', '')>")
chamada antiga: assertEquals(1, StringUtils.getLevenshteinDistance("frog", "fog"))
nova chamada: assertEquals(1, StringUtils.getLevenshteinDistance("frog", "fog"), "Era esperado valores iguais, mas  1 é diferente de " + result2314 + " <StringUtils.getLevenshteinDistance('frog', 'fog')>")
chamada antiga: assertEquals(3, StringUtils.getLevenshteinDistance("fly", "ant"))
nova chamada: assertEquals(3, StringUtils.getLevenshteinDistance("fly", "ant"), "Era esperado valores iguais, mas  3 é diferente de " + result2315 + " <StringUtils.getLevenshteinDistance('fly', 'ant')>")
chamada antiga: assertEquals(7, StringUtils.getLevenshteinDistance("elephant", "hippo"))
nova chamada: assertEquals(7, StringUtils.getLevenshteinDistance("elephant", "hippo"), "Era esperado valores iguais, mas  7 é diferente de " + result2316 + " <StringUtils.getLevenshteinDistance('elephant', 'hippo')>")
chamada antiga: assertEquals(7, StringUtils.getLevenshteinDistance("hippo", "elephant"))
nova chamada: assertEquals(7, StringUtils.getLevenshteinDistance("hippo", "elephant"), "Era esperado valores iguais, mas  7 é diferente de " + result2317 + " <StringUtils.getLevenshteinDistance('hippo', 'elephant')>")
chamada antiga: assertEquals(8, StringUtils.getLevenshteinDistance("hippo", "zzzzzzzz"))
nova chamada: assertEquals(8, StringUtils.getLevenshteinDistance("hippo", "zzzzzzzz"), "Era esperado valores iguais, mas  8 é diferente de " + result2318 + " <StringUtils.getLevenshteinDistance('hippo', 'zzzzzzzz')>")
chamada antiga: assertEquals(8, StringUtils.getLevenshteinDistance("zzzzzzzz", "hippo"))
nova chamada: assertEquals(8, StringUtils.getLevenshteinDistance("zzzzzzzz", "hippo"), "Era esperado valores iguais, mas  8 é diferente de " + result2319 + " <StringUtils.getLevenshteinDistance('zzzzzzzz', 'hippo')>")
chamada antiga: assertEquals(1, StringUtils.getLevenshteinDistance("hello", "hallo"))
nova chamada: assertEquals(1, StringUtils.getLevenshteinDistance("hello", "hallo"), "Era esperado valores iguais, mas  1 é diferente de " + result2320 + " <StringUtils.getLevenshteinDistance('hello', 'hallo')>")
chamada antiga: assertEquals(3, result.size())
nova chamada: assertEquals(3, result.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2321 + " <result.size()>")
chamada antiga: assertArrayEquals(new int[] { 1, 7 }, isochroneEdges.stream().mapToInt(l -> l.node).sorted().toArray())
nova chamada: assertArrayEquals(new int[] { 1, 7 }, isochroneEdges.stream().mapToInt(l -> l.node).sorted().toArray(), "Era esperado arrays iguais, mas  new int[] { 1, 7 } é diferente de " + result2322 + " <isochroneEdges.stream().mapToInt(l -> l.node).sorted().toArray()>")
chamada antiga: assertEquals(4, result.size())
nova chamada: assertEquals(4, result.size(), "Era esperado valores iguais, mas  4 é diferente de " + result2323 + " <result.size()>")
chamada antiga: assertEquals(9, result.size())
nova chamada: assertEquals(9, result.size(), "Era esperado valores iguais, mas  9 é diferente de " + result2324 + " <result.size()>")
chamada antiga: assertEquals(countDirectedEdges(graph) + 1, result.size())
nova chamada: assertEquals(countDirectedEdges(graph) + 1, result.size(), "Era esperado valores iguais, mas  countDirectedEdges(graph) + 1 é diferente de " + result2325 + " <result.size()>")
chamada antiga: assertEquals(countDirectedEdges(graph) + 1 - 1, result.size())
nova chamada: assertEquals(countDirectedEdges(graph) + 1 - 1, result.size(), "Era esperado valores iguais, mas  countDirectedEdges(graph) + 1 - 1 é diferente de " + result2326 + " <result.size()>")
chamada antiga: assertEquals(countDirectedEdges(graph) + 1, result.size())
nova chamada: assertEquals(countDirectedEdges(graph) + 1, result.size(), "Era esperado valores iguais, mas  countDirectedEdges(graph) + 1 é diferente de " + result2327 + " <result.size()>")
chamada antiga: assertEquals(countDirectedEdges(graph) + 1, result.size())
nova chamada: assertEquals(countDirectedEdges(graph) + 1, result.size(), "Era esperado valores iguais, mas  countDirectedEdges(graph) + 1 é diferente de " + result2328 + " <result.size()>")
chamada antiga: assertEquals(6, result.size())
nova chamada: assertEquals(6, result.size(), "Era esperado valores iguais, mas  6 é diferente de " + result2329 + " <result.size()>")
chamada antiga: assertEquals(5, quadEdgeSubdivision.getVertices(false).size())
nova chamada: assertEquals(5, quadEdgeSubdivision.getVertices(false).size(), "Era esperado valores iguais, mas  5 é diferente de " + result2330 + " <quadEdgeSubdivision.getVertices(false).size()>")
chamada antiga: assertEquals("MULTIPOLYGON (((1 0, 0.5 -0.5, 1 -2, 1.5 -0.5, 1 0)))", geometry.toString())
nova chamada: assertEquals("MULTIPOLYGON (((1 0, 0.5 -0.5, 1 -2, 1.5 -0.5, 1 0)))", geometry.toString(), "Era esperado valores iguais, mas  'MULTIPOLYGON (((1 0, 0.5 -0.5, 1 -2, 1.5 -0.5, 1 0)))' é diferente de " + result2331 + " <geometry.toString()>")
chamada antiga: assertEquals("MULTIPOLYGON (((0.5 -0.5, 1 -2, 1.5 -0.5, 1 0, 0.5 -0.5)))", geometry.toString())
nova chamada: assertEquals("MULTIPOLYGON (((0.5 -0.5, 1 -2, 1.5 -0.5, 1 0, 0.5 -0.5)))", geometry.toString(), "Era esperado valores iguais, mas  'MULTIPOLYGON (((0.5 -0.5, 1 -2, 1.5 -0.5, 1 0, 0.5 -0.5)))' é diferente de " + result2332 + " <geometry.toString()>")
chamada antiga: assertEquals("MULTIPOLYGON (((0.5 -0.5, 1 -2, 1.5 -0.5, 1 0, 0.5 -0.5)))", geometry.toString())
nova chamada: assertEquals("MULTIPOLYGON (((0.5 -0.5, 1 -2, 1.5 -0.5, 1 0, 0.5 -0.5)))", geometry.toString(), "Era esperado valores iguais, mas  'MULTIPOLYGON (((0.5 -0.5, 1 -2, 1.5 -0.5, 1 0, 0.5 -0.5)))' é diferente de " + result2333 + " <geometry.toString()>")
chamada antiga: assertEquals(ee2, ee1.oNext())
nova chamada: assertEquals(ee2, ee1.oNext(), "Era esperado valores iguais, mas  ee2 é diferente de " + result2334 + " <ee1.oNext()>")
chamada antiga: assertEquals(ee3, ee2.oNext())
nova chamada: assertEquals(ee3, ee2.oNext(), "Era esperado valores iguais, mas  ee3 é diferente de " + result2335 + " <ee2.oNext()>")
chamada antiga: assertEquals(ee1, ee3.oNext())
nova chamada: assertEquals(ee1, ee3.oNext(), "Era esperado valores iguais, mas  ee1 é diferente de " + result2336 + " <ee3.oNext()>")
chamada antiga: assertEquals(ee2, ee1.oNext())
nova chamada: assertEquals(ee2, ee1.oNext(), "Era esperado valores iguais, mas  ee2 é diferente de " + result2337 + " <ee1.oNext()>")
chamada antiga: assertEquals(ee3, ee2.oNext())
nova chamada: assertEquals(ee3, ee2.oNext(), "Era esperado valores iguais, mas  ee3 é diferente de " + result2338 + " <ee2.oNext()>")
chamada antiga: assertEquals(ee4, ee3.oNext())
nova chamada: assertEquals(ee4, ee3.oNext(), "Era esperado valores iguais, mas  ee4 é diferente de " + result2339 + " <ee3.oNext()>")
chamada antiga: assertEquals(ee1, ee4.oNext())
nova chamada: assertEquals(ee1, ee4.oNext(), "Era esperado valores iguais, mas  ee1 é diferente de " + result2340 + " <ee4.oNext()>")
chamada antiga: assertEquals(e2, e1.lNext())
nova chamada: assertEquals(e2, e1.lNext(), "Era esperado valores iguais, mas  e2 é diferente de " + result2341 + " <e1.lNext()>")
chamada antiga: assertEquals(e3, e2.lNext())
nova chamada: assertEquals(e3, e2.lNext(), "Era esperado valores iguais, mas  e3 é diferente de " + result2342 + " <e2.lNext()>")
chamada antiga: assertEquals(e1, e3.lNext())
nova chamada: assertEquals(e1, e3.lNext(), "Era esperado valores iguais, mas  e1 é diferente de " + result2343 + " <e3.lNext()>")
chamada antiga: assertEquals("01100110101000111100000110010100", BitUtil.LITTLE.toLastBitString(val, 32))
nova chamada: assertEquals("01100110101000111100000110010100", BitUtil.LITTLE.toLastBitString(val, 32), "Era esperado valores iguais, mas  '01100110101000111100000110010100' é diferente de " + result2344 + " <BitUtil.LITTLE.toLastBitString(val, 32)>")
chamada antiga: assertEquals(11, spatialKeyAlgo.encodeLatLon(0.125, -0.2))
nova chamada: assertEquals(11, spatialKeyAlgo.encodeLatLon(0.125, -0.2), "Era esperado valores iguais, mas  11 é diferente de " + result2345 + " <spatialKeyAlgo.encodeLatLon(0.125, -0.2)>")
chamada antiga: assertEquals(9, spatialKeyAlgo.encodeLatLon(0.124, -0.2))
nova chamada: assertEquals(9, spatialKeyAlgo.encodeLatLon(0.124, -0.2), "Era esperado valores iguais, mas  9 é diferente de " + result2346 + " <spatialKeyAlgo.encodeLatLon(0.124, -0.2)>")
chamada antiga: assertEquals(11, spatialKeyAlgo.encodeLatLon(0.2, -0.35))
nova chamada: assertEquals(11, spatialKeyAlgo.encodeLatLon(0.2, -0.35), "Era esperado valores iguais, mas  11 é diferente de " + result2347 + " <spatialKeyAlgo.encodeLatLon(0.2, -0.35)>")
chamada antiga: assertEquals(10, spatialKeyAlgo.encodeLatLon(0.2, -0.351))
nova chamada: assertEquals(10, spatialKeyAlgo.encodeLatLon(0.2, -0.351), "Era esperado valores iguais, mas  10 é diferente de " + result2348 + " <spatialKeyAlgo.encodeLatLon(0.2, -0.351)>")
chamada antiga: assertEquals(0b0000, spatialKeyAlgo.encode(0, 0))
nova chamada: assertEquals(0b0000, spatialKeyAlgo.encode(0, 0), "Era esperado valores iguais, mas  0b0000 é diferente de " + result2349 + " <spatialKeyAlgo.encode(0, 0)>")
chamada antiga: assertEquals(0b0001, spatialKeyAlgo.encode(1, 0))
nova chamada: assertEquals(0b0001, spatialKeyAlgo.encode(1, 0), "Era esperado valores iguais, mas  0b0001 é diferente de " + result2350 + " <spatialKeyAlgo.encode(1, 0)>")
chamada antiga: assertEquals(0b0100, spatialKeyAlgo.encode(2, 0))
nova chamada: assertEquals(0b0100, spatialKeyAlgo.encode(2, 0), "Era esperado valores iguais, mas  0b0100 é diferente de " + result2351 + " <spatialKeyAlgo.encode(2, 0)>")
chamada antiga: assertEquals(0b0101, spatialKeyAlgo.encode(3, 0))
nova chamada: assertEquals(0b0101, spatialKeyAlgo.encode(3, 0), "Era esperado valores iguais, mas  0b0101 é diferente de " + result2352 + " <spatialKeyAlgo.encode(3, 0)>")
chamada antiga: assertEquals(0b0010, spatialKeyAlgo.encode(0, 1))
nova chamada: assertEquals(0b0010, spatialKeyAlgo.encode(0, 1), "Era esperado valores iguais, mas  0b0010 é diferente de " + result2353 + " <spatialKeyAlgo.encode(0, 1)>")
chamada antiga: assertEquals(0b1000, spatialKeyAlgo.encode(0, 2))
nova chamada: assertEquals(0b1000, spatialKeyAlgo.encode(0, 2), "Era esperado valores iguais, mas  0b1000 é diferente de " + result2354 + " <spatialKeyAlgo.encode(0, 2)>")
chamada antiga: assertEquals(0b1010, spatialKeyAlgo.encode(0, 3))
nova chamada: assertEquals(0b1010, spatialKeyAlgo.encode(0, 3), "Era esperado valores iguais, mas  0b1010 é diferente de " + result2355 + " <spatialKeyAlgo.encode(0, 3)>")
chamada antiga: assertEquals(0b1100, spatialKeyAlgo.encode(2, 2))
nova chamada: assertEquals(0b1100, spatialKeyAlgo.encode(2, 2), "Era esperado valores iguais, mas  0b1100 é diferente de " + result2356 + " <spatialKeyAlgo.encode(2, 2)>")
chamada antiga: assertEquals(spatialKeyAlgo.encode(2, 0), spatialKeyAlgo.right(spatialKeyAlgo.right(spatialKeyAlgo.encode(0, 0))))
nova chamada: assertEquals(spatialKeyAlgo.encode(2, 0), spatialKeyAlgo.right(spatialKeyAlgo.right(spatialKeyAlgo.encode(0, 0))), "Era esperado valores iguais, mas " + result2357 + " <spatialKeyAlgo.encode(2, 0)> é diferente de " + result2358 + " <spatialKeyAlgo.right(spatialKeyAlgo.right(spatialKeyAlgo.encode(0, 0)))>")
chamada antiga: assertEquals(0b11111111111111111111L, spatialKeyAlgo.encode(1023, 1023))
nova chamada: assertEquals(0b11111111111111111111L, spatialKeyAlgo.encode(1023, 1023), "Era esperado valores iguais, mas  0b11111111111111111111L é diferente de " + result2359 + " <spatialKeyAlgo.encode(1023, 1023)>")
chamada antiga: assertNull(index.get(aPointer, "", false))
nova chamada: assertNull(index.get(aPointer, "", false), "Era esperado nulo, mas " + result2360 + " <index.get(aPointer, '', false)> não é nulo")
chamada antiga: assertEquals("same name", index.get(aPointer, "a", false))
nova chamada: assertEquals("same name", index.get(aPointer, "a", false), "Era esperado valores iguais, mas  'same name' é diferente de " + result2361 + " <index.get(aPointer, 'a', false)>")
chamada antiga: assertEquals("same name", index.get(aPointer, "b", false))
nova chamada: assertEquals("same name", index.get(aPointer, "b", false), "Era esperado valores iguais, mas  'same name' é diferente de " + result2362 + " <index.get(aPointer, 'b', false)>")
chamada antiga: assertNull(index.get(aPointer, "c", false))
nova chamada: assertNull(index.get(aPointer, "c", false), "Era esperado nulo, mas " + result2363 + " <index.get(aPointer, 'c', false)> não é nulo")
chamada antiga: assertEquals("a name", index.get(aPointer, "a", false))
nova chamada: assertEquals("a name", index.get(aPointer, "a", false), "Era esperado valores iguais, mas  'a name' é diferente de " + result2364 + " <index.get(aPointer, 'a', false)>")
chamada antiga: assertNull(index.get(aPointer, "", false))
nova chamada: assertNull(index.get(aPointer, "", false), "Era esperado nulo, mas " + result2365 + " <index.get(aPointer, '', false)> não é nulo")
chamada antiga: assertEquals("a name", index.get(aPointer, "a", false))
nova chamada: assertEquals("a name", index.get(aPointer, "a", false), "Era esperado valores iguais, mas  'a name' é diferente de " + result2366 + " <index.get(aPointer, 'a', false)>")
chamada antiga: assertEquals("b name", index.get(aPointer, "b", false))
nova chamada: assertEquals("b name", index.get(aPointer, "b", false), "Era esperado valores iguais, mas  'b name' é diferente de " + result2367 + " <index.get(aPointer, 'b', false)>")
chamada antiga: assertNull(index.get(aPointer, "", false))
nova chamada: assertNull(index.get(aPointer, "", false), "Era esperado nulo, mas " + result2368 + " <index.get(aPointer, '', false)> não é nulo")
chamada antiga: assertEquals(list, deserializedList)
nova chamada: assertEquals(list, deserializedList, "Era esperado valores iguais, mas  list é diferente de " + " deserializedList")
chamada antiga: assertEquals("FORWARD", index.get(aPointer, "keyA", false))
nova chamada: assertEquals("FORWARD", index.get(aPointer, "keyA", false), "Era esperado valores iguais, mas  'FORWARD' é diferente de " + result2369 + " <index.get(aPointer, 'keyA', false)>")
chamada antiga: assertNull(index.get(aPointer, "keyA", true))
nova chamada: assertNull(index.get(aPointer, "keyA", true), "Era esperado nulo, mas " + result2370 + " <index.get(aPointer, 'keyA', true)> não é nulo")
chamada antiga: assertNull(index.get(aPointer, "keyB", false))
nova chamada: assertNull(index.get(aPointer, "keyB", false), "Era esperado nulo, mas " + result2371 + " <index.get(aPointer, 'keyB', false)> não é nulo")
chamada antiga: assertEquals("BACKWARD", index.get(aPointer, "keyB", true))
nova chamada: assertEquals("BACKWARD", index.get(aPointer, "keyB", true), "Era esperado valores iguais, mas  'BACKWARD' é diferente de " + result2372 + " <index.get(aPointer, 'keyB', true)>")
chamada antiga: assertEquals("BOTH", index.get(aPointer, "keyC", false))
nova chamada: assertEquals("BOTH", index.get(aPointer, "keyC", false), "Era esperado valores iguais, mas  'BOTH' é diferente de " + result2373 + " <index.get(aPointer, 'keyC', false)>")
chamada antiga: assertEquals("BOTH", index.get(aPointer, "keyC", true))
nova chamada: assertEquals("BOTH", index.get(aPointer, "keyC", true), "Era esperado valores iguais, mas  'BOTH' é diferente de " + result2374 + " <index.get(aPointer, 'keyC', true)>")
chamada antiga: assertEquals(1, index.add(createList("", "")))
nova chamada: assertEquals(1, index.add(createList("", "")), "Era esperado valores iguais, mas  1 é diferente de " + result2375 + " <index.add(createList('', ''))>")
chamada antiga: assertNull(index.get(0, "", false))
nova chamada: assertNull(index.get(0, "", false), "Era esperado nulo, mas " + result2376 + " <index.get(0, '', false)> não é nulo")
chamada antiga: assertEquals(5, index.add(createList("else", "else")))
nova chamada: assertEquals(5, index.add(createList("else", "else")), "Era esperado valores iguais, mas  5 é diferente de " + result2377 + " <index.add(createList('else', 'else'))>")
chamada antiga: assertEquals("b name 9999", index.get(aPointer, "b", false))
nova chamada: assertEquals("b name 9999", index.get(aPointer, "b", false), "Era esperado valores iguais, mas  'b name 9999' é diferente de " + result2378 + " <index.get(aPointer, 'b', false)>")
chamada antiga: assertEquals("c name 9999", index.get(aPointer, "c", false))
nova chamada: assertEquals("c name 9999", index.get(aPointer, "c", false), "Era esperado valores iguais, mas  'c name 9999' é diferente de " + result2379 + " <index.get(aPointer, 'c', false)>")
chamada antiga: assertEquals("a name 567", index.get(tmpPointer, "a", false))
nova chamada: assertEquals("a name 567", index.get(tmpPointer, "a", false), "Era esperado valores iguais, mas  'a name 567' é diferente de " + result2380 + " <index.get(tmpPointer, 'a', false)>")
chamada antiga: assertEquals("b name 567", index.get(tmpPointer, "b", false))
nova chamada: assertEquals("b name 567", index.get(tmpPointer, "b", false), "Era esperado valores iguais, mas  'b name 567' é diferente de " + result2381 + " <index.get(tmpPointer, 'b', false)>")
chamada antiga: assertEquals("c name 567", index.get(tmpPointer, "c", false))
nova chamada: assertEquals("c name 567", index.get(tmpPointer, "c", false), "Era esperado valores iguais, mas  'c name 567' é diferente de " + result2382 + " <index.get(tmpPointer, 'c', false)>")
chamada antiga: assertEquals(254, str.getBytes(Helper.UTF_CS).length)
nova chamada: assertEquals(254, str.getBytes(Helper.UTF_CS).length, "Era esperado valores iguais, mas  254 é diferente de " + " str.getBytes(Helper.UTF_CS).length")
chamada antiga: assertEquals(127, ((String) index.get(result, "", false)).length())
nova chamada: assertEquals(127, ((String) index.get(result, "", false)).length(), "Era esperado valores iguais, mas  127 é diferente de " + result2383 + " <((String) index.get(result, '', false)).length()>")
chamada antiga: assertArrayEquals(copy, bytes)
nova chamada: assertArrayEquals(copy, bytes, "Era esperado arrays iguais, mas  copy é diferente de " + " bytes")
chamada antiga: assertTrue(e.getMessage().contains("bytes.length cannot be > 255"))
nova chamada: assertTrue(e.getMessage().contains("bytes.length cannot be > 255"), "Era esperado verdadeiro, mas " + result2384 + " <e.getMessage().contains('bytes.length cannot be > 255')> é falso")
chamada antiga: assertEquals(1 + 36, after4Inserts)
nova chamada: assertEquals(1 + 36, after4Inserts, "Era esperado valores iguais, mas  1 + 36 é diferente de " + " after4Inserts")
chamada antiga: assertEquals(4f, index.get(floatres, "floatres", false))
nova chamada: assertEquals(4f, index.get(floatres, "floatres", false), "Era esperado valores iguais, mas  4f é diferente de " + result2385 + " <index.get(floatres, 'floatres', false)>")
chamada antiga: assertEquals(4L, index.get(longres, "longres", false))
nova chamada: assertEquals(4L, index.get(longres, "longres", false), "Era esperado valores iguais, mas  4L é diferente de " + result2386 + " <index.get(longres, 'longres', false)>")
chamada antiga: assertEquals(4d, index.get(doubleres, "doubleres", false))
nova chamada: assertEquals(4d, index.get(doubleres, "doubleres", false), "Era esperado valores iguais, mas  4d é diferente de " + result2387 + " <index.get(doubleres, 'doubleres', false)>")
chamada antiga: assertEquals(4, index.get(intres, "intres", false))
nova chamada: assertEquals(4, index.get(intres, "intres", false), "Era esperado valores iguais, mas  4 é diferente de " + result2388 + " <index.get(intres, 'intres', false)>")
chamada antiga: assertEquals(1 + 1 + 32, afterMapInsert)
nova chamada: assertEquals(1 + 1 + 32, afterMapInsert, "Era esperado valores iguais, mas  1 + 1 + 32 é diferente de " + " afterMapInsert")
chamada antiga: assertEquals(4, resMap.get(0).value)
nova chamada: assertEquals(4, resMap.get(0).value, "Era esperado valores iguais, mas  4 é diferente de " + " resMap.get(0).value")
chamada antiga: assertEquals(4L, resMap.get(1).value)
nova chamada: assertEquals(4L, resMap.get(1).value, "Era esperado valores iguais, mas  4L é diferente de " + " resMap.get(1).value")
chamada antiga: assertEquals(4d, resMap.get(2).value)
nova chamada: assertEquals(4d, resMap.get(2).value, "Era esperado valores iguais, mas  4d é diferente de " + " resMap.get(2).value")
chamada antiga: assertEquals(4f, resMap.get(3).value)
nova chamada: assertEquals(4f, resMap.get(3).value, "Era esperado valores iguais, mas  4f é diferente de " + " resMap.get(3).value")
chamada antiga: assertTrue(index.loadExisting())
nova chamada: assertTrue(index.loadExisting(), "Era esperado verdadeiro, mas " + result2389 + " <index.loadExisting()> é falso")
chamada antiga: assertEquals("test", index.get(pointer, "", false))
nova chamada: assertEquals("test", index.get(pointer, "", false), "Era esperado valores iguais, mas  'test' é diferente de " + result2390 + " <index.get(pointer, '', false)>")
chamada antiga: assertEquals(2, index.getKeys().size())
nova chamada: assertEquals(2, index.getKeys().size(), "Era esperado valores iguais, mas  2 é diferente de " + result2391 + " <index.getKeys().size()>")
chamada antiga: assertEquals("[, c, a, b]", index.getKeys().toString())
nova chamada: assertEquals("[, c, a, b]", index.getKeys().toString(), "Era esperado valores iguais, mas  '[, c, a, b]' é diferente de " + result2392 + " <index.getKeys().toString()>")
chamada antiga: assertTrue(index.loadExisting())
nova chamada: assertTrue(index.loadExisting(), "Era esperado verdadeiro, mas " + result2393 + " <index.loadExisting()> é falso")
chamada antiga: assertEquals("[, c, a, b]", index.getKeys().toString())
nova chamada: assertEquals("[, c, a, b]", index.getKeys().toString(), "Era esperado valores iguais, mas  '[, c, a, b]' é diferente de " + result2394 + " <index.getKeys().toString()>")
chamada antiga: assertEquals("test value", index.get(pointerA, "c", false))
nova chamada: assertEquals("test value", index.get(pointerA, "c", false), "Era esperado valores iguais, mas  'test value' é diferente de " + result2395 + " <index.get(pointerA, 'c', false)>")
chamada antiga: assertNull(index.get(pointerA, "b", false))
nova chamada: assertNull(index.get(pointerA, "b", false), "Era esperado nulo, mas " + result2396 + " <index.get(pointerA, 'b', false)> não é nulo")
chamada antiga: assertNull(index.get(pointerB, "", false))
nova chamada: assertNull(index.get(pointerB, "", false), "Era esperado nulo, mas " + result2397 + " <index.get(pointerB, '', false)> não é nulo")
chamada antiga: assertEquals("value", index.get(pointerB, "a", false))
nova chamada: assertEquals("value", index.get(pointerB, "a", false), "Era esperado valores iguais, mas  'value' é diferente de " + result2398 + " <index.get(pointerB, 'a', false)>")
chamada antiga: assertEquals("another value", index.get(pointerB, "b", false))
nova chamada: assertEquals("another value", index.get(pointerB, "b", false), "Era esperado valores iguais, mas  'another value' é diferente de " + result2399 + " <index.get(pointerB, 'b', false)>")
chamada antiga: assertEquals("[a=value (true|true), b=another value (true|true)]", index.getAll(pointerB).toString())
nova chamada: assertEquals("[a=value (true|true), b=another value (true|true)]", index.getAll(pointerB).toString(), "Era esperado valores iguais, mas  '[a=value (true|true), b=another value (true|true)]' é diferente de " + result2400 + " <index.getAll(pointerB).toString()>")
chamada antiga: assertEquals("test value", index.get(pointerA, "", false))
nova chamada: assertEquals("test value", index.get(pointerA, "", false), "Era esperado valores iguais, mas  'test value' é diferente de " + result2401 + " <index.get(pointerA, '', false)>")
chamada antiga: assertNull(index.get(pointerA, "a", false))
nova chamada: assertNull(index.get(pointerA, "a", false), "Era esperado nulo, mas " + result2402 + " <index.get(pointerA, 'a', false)> não é nulo")
chamada antiga: assertEquals("value", index.get(pointerB, "a", false))
nova chamada: assertEquals("value", index.get(pointerB, "a", false), "Era esperado valores iguais, mas  'value' é diferente de " + result2403 + " <index.get(pointerB, 'a', false)>")
chamada antiga: assertNull(index.get(pointerB, "", false))
nova chamada: assertNull(index.get(pointerB, "", false), "Era esperado nulo, mas " + result2404 + " <index.get(pointerB, '', false)> não é nulo")
chamada antiga: assertEquals(pointerA, pointerB)
nova chamada: assertEquals(pointerA, pointerB, "Era esperado valores iguais, mas  pointerA é diferente de " + " pointerB")
chamada antiga: assertEquals(pointerA, pointerB)
nova chamada: assertEquals(pointerA, pointerB, "Era esperado valores iguais, mas  pointerA é diferente de " + " pointerB")
chamada antiga: assertEquals(250, s.getBytes(UTF_CS).length)
nova chamada: assertEquals(250, s.getBytes(UTF_CS).length, "Era esperado valores iguais, mas  250 é diferente de " + " s.getBytes(UTF_CS).length")
chamada antiga: assertTrue(storedPointer < 0)
nova chamada: assertTrue(storedPointer < 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(pointer + 100, Helper.toUnsignedLong(storedPointer))
nova chamada: assertEquals(pointer + 100, Helper.toUnsignedLong(storedPointer), "Era esperado valores iguais, mas  pointer + 100 é diferente de " + result2405 + " <Helper.toUnsignedLong(storedPointer)>")
chamada antiga: assertEquals(1, instance.peekKey())
nova chamada: assertEquals(1, instance.peekKey(), "Era esperado valores iguais, mas  1 é diferente de " + result2406 + " <instance.peekKey()>")
chamada antiga: assertEquals(2, instance.peekKey())
nova chamada: assertEquals(2, instance.peekKey(), "Era esperado valores iguais, mas  2 é diferente de " + result2407 + " <instance.peekKey()>")
chamada antiga: assertEquals(2, instance.pollKey())
nova chamada: assertEquals(2, instance.pollKey(), "Era esperado valores iguais, mas  2 é diferente de " + result2408 + " <instance.pollKey()>")
chamada antiga: assertEquals(2, instance.getSize())
nova chamada: assertEquals(2, instance.getSize(), "Era esperado valores iguais, mas  2 é diferente de " + result2409 + " <instance.getSize()>")
chamada antiga: assertEquals(0, instance.peekKey())
nova chamada: assertEquals(0, instance.peekKey(), "Era esperado valores iguais, mas  0 é diferente de " + result2410 + " <instance.peekKey()>")
chamada antiga: assertEquals(0, instance.pollKey())
nova chamada: assertEquals(0, instance.pollKey(), "Era esperado valores iguais, mas  0 é diferente de " + result2411 + " <instance.pollKey()>")
chamada antiga: assertEquals(0, instance.pollKey())
nova chamada: assertEquals(0, instance.pollKey(), "Era esperado valores iguais, mas  0 é diferente de " + result2412 + " <instance.pollKey()>")
chamada antiga: assertEquals(2, instance.getSize())
nova chamada: assertEquals(2, instance.getSize(), "Era esperado valores iguais, mas  2 é diferente de " + result2413 + " <instance.getSize()>")
chamada antiga: assertEquals(34302, instance.pollKey())
nova chamada: assertEquals(34302, instance.pollKey(), "Era esperado valores iguais, mas  34302 é diferente de " + result2414 + " <instance.pollKey()>")
chamada antiga: assertEquals(2, instance.getSize())
nova chamada: assertEquals(2, instance.getSize(), "Era esperado valores iguais, mas  2 é diferente de " + result2415 + " <instance.getSize()>")
chamada antiga: assertEquals(1, instance.getSize())
nova chamada: assertEquals(1, instance.getSize(), "Era esperado valores iguais, mas  1 é diferente de " + result2416 + " <instance.getSize()>")
chamada antiga: assertTrue(copyBS.contains(30))
nova chamada: assertTrue(copyBS.contains(30), "Era esperado verdadeiro, mas " + result2417 + " <copyBS.contains(30)> é falso")
chamada antiga: assertTrue(copyBS.contains(70))
nova chamada: assertTrue(copyBS.contains(70), "Era esperado verdadeiro, mas " + result2418 + " <copyBS.contains(70)> é falso")
chamada antiga: assertTrue(copyBS.contains(100))
nova chamada: assertTrue(copyBS.contains(100), "Era esperado verdadeiro, mas " + result2419 + " <copyBS.contains(100)> é falso")
chamada antiga: assertTrue(copyBS.contains(0))
nova chamada: assertTrue(copyBS.contains(0), "Era esperado verdadeiro, mas " + result2420 + " <copyBS.contains(0)> é falso")
chamada antiga: assertEquals("{1, 12}", bs.toString())
nova chamada: assertEquals("{1, 12}", bs.toString(), "Era esperado valores iguais, mas  '{1, 12}' é diferente de " + result2421 + " <bs.toString()>")
chamada antiga: assertEquals(7, bs.next(0))
nova chamada: assertEquals(7, bs.next(0), "Era esperado valores iguais, mas  7 é diferente de " + result2422 + " <bs.next(0)>")
chamada antiga: assertEquals(7, bs.next(7))
nova chamada: assertEquals(7, bs.next(7), "Era esperado valores iguais, mas  7 é diferente de " + result2423 + " <bs.next(7)>")
chamada antiga: assertEquals(90, bs.next(8))
nova chamada: assertEquals(90, bs.next(8), "Era esperado valores iguais, mas  90 é diferente de " + result2424 + " <bs.next(8)>")
chamada antiga: assertEquals(-1, bs.next(91))
nova chamada: assertEquals(-1, bs.next(91), "Era esperado valores iguais, mas  -1 é diferente de " + result2425 + " <bs.next(91)>")
chamada antiga: assertTrue(bs.contains(7))
nova chamada: assertTrue(bs.contains(7), "Era esperado verdadeiro, mas " + result2426 + " <bs.contains(7)> é falso")
chamada antiga: assertTrue(bs.contains(8))
nova chamada: assertTrue(bs.contains(8), "Era esperado verdadeiro, mas " + result2427 + " <bs.contains(8)> é falso")
chamada antiga: assertTrue(bs.contains(1))
nova chamada: assertTrue(bs.contains(1), "Era esperado verdadeiro, mas " + result2428 + " <bs.contains(1)> é falso")
chamada antiga: assertTrue(bs.contains(12))
nova chamada: assertTrue(bs.contains(12), "Era esperado verdadeiro, mas " + result2429 + " <bs.contains(12)> é falso")
chamada antiga: assertEquals(0, bs.getCardinality())
nova chamada: assertEquals(0, bs.getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result2430 + " <bs.getCardinality()>")
chamada antiga: assertTrue(bs.contains(1))
nova chamada: assertTrue(bs.contains(1), "Era esperado verdadeiro, mas " + result2431 + " <bs.contains(1)> é falso")
chamada antiga: assertTrue(bs.contains(12))
nova chamada: assertTrue(bs.contains(12), "Era esperado verdadeiro, mas " + result2432 + " <bs.contains(12)> é falso")
chamada antiga: assertTrue(ex.getMessage().contains("Illegal key -1"))
nova chamada: assertTrue(ex.getMessage().contains("Illegal key -1"), "Era esperado verdadeiro, mas " + result2433 + " <ex.getMessage().contains('Illegal key -1')> é falso")
chamada antiga: assertEquals(21, instance.get(key))
nova chamada: assertEquals(21, instance.get(key), "Era esperado valores iguais, mas  21 é diferente de " + result2434 + " <instance.get(key)>")
chamada antiga: assertEquals(-1, instance.get(404))
nova chamada: assertEquals(-1, instance.get(404), "Era esperado valores iguais, mas  -1 é diferente de " + result2435 + " <instance.get(404)>")
chamada antiga: assertEquals(1, instance.height())
nova chamada: assertEquals(1, instance.height(), "Era esperado valores iguais, mas  1 é diferente de " + result2436 + " <instance.height()>")
chamada antiga: assertEquals(2, instance.height())
nova chamada: assertEquals(2, instance.height(), "Era esperado valores iguais, mas  2 é diferente de " + result2437 + " <instance.height()>")
chamada antiga: assertEquals(2, instance.height())
nova chamada: assertEquals(2, instance.height(), "Era esperado valores iguais, mas  2 é diferente de " + result2438 + " <instance.height()>")
chamada antiga: assertEquals(3, instance.height())
nova chamada: assertEquals(3, instance.height(), "Era esperado valores iguais, mas  3 é diferente de " + result2439 + " <instance.height()>")
chamada antiga: assertEquals(3, instance.height())
nova chamada: assertEquals(3, instance.height(), "Era esperado valores iguais, mas  3 é diferente de " + result2440 + " <instance.height()>")
chamada antiga: assertEquals(10, instance.getSize())
nova chamada: assertEquals(10, instance.getSize(), "Era esperado valores iguais, mas  10 é diferente de " + result2441 + " <instance.getSize()>")
chamada antiga: assertEquals(0, instance.getMemoryUsage())
nova chamada: assertEquals(0, instance.getMemoryUsage(), "Era esperado valores iguais, mas  0 é diferente de " + result2442 + " <instance.getMemoryUsage()>")
chamada antiga: assertEquals(3, instance.getSize())
nova chamada: assertEquals(3, instance.getSize(), "Era esperado valores iguais, mas  3 é diferente de " + result2443 + " <instance.getSize()>")
chamada antiga: assertEquals(1, instance.height())
nova chamada: assertEquals(1, instance.height(), "Era esperado valores iguais, mas  1 é diferente de " + result2444 + " <instance.height()>")
chamada antiga: assertEquals(5, instance.get(2))
nova chamada: assertEquals(5, instance.get(2), "Era esperado valores iguais, mas  5 é diferente de " + result2445 + " <instance.get(2)>")
chamada antiga: assertEquals(6, instance.get(3))
nova chamada: assertEquals(6, instance.get(3), "Era esperado valores iguais, mas  6 é diferente de " + result2446 + " <instance.get(3)>")
chamada antiga: assertEquals(12, instance.getSize())
nova chamada: assertEquals(12, instance.getSize(), "Era esperado valores iguais, mas  12 é diferente de " + result2447 + " <instance.getSize()>")
chamada antiga: assertEquals(3, instance.height())
nova chamada: assertEquals(3, instance.height(), "Era esperado valores iguais, mas  3 é diferente de " + result2448 + " <instance.height()>")
chamada antiga: assertEquals(12, instance.get(6))
nova chamada: assertEquals(12, instance.get(6), "Era esperado valores iguais, mas  12 é diferente de " + result2449 + " <instance.get(6)>")
chamada antiga: assertEquals(instance.getNoNumberValue(), result)
nova chamada: assertEquals(instance.getNoNumberValue(), result, "Era esperado valores iguais, mas " + result2450 + " <instance.getNoNumberValue()> é diferente de " + " result")
chamada antiga: assertEquals(10, result)
nova chamada: assertEquals(10, result, "Era esperado valores iguais, mas  10 é diferente de " + " result")
chamada antiga: assertEquals(10, result)
nova chamada: assertEquals(10, result, "Era esperado valores iguais, mas  10 é diferente de " + " result")
chamada antiga: assertEquals(9, result)
nova chamada: assertEquals(9, result, "Era esperado valores iguais, mas  9 é diferente de " + " result")
chamada antiga: assertEquals(0, size())
nova chamada: assertEquals(0, size(), "Era esperado valores iguais, mas  0 é diferente de " + result2451 + " <size()>")
chamada antiga: assertTrue(isEmpty())
nova chamada: assertTrue(isEmpty(), "Era esperado verdadeiro, mas " + result2452 + " <isEmpty()> é falso")
chamada antiga: assertEquals(3, size())
nova chamada: assertEquals(3, size(), "Era esperado valores iguais, mas  3 é diferente de " + result2453 + " <size()>")
chamada antiga: assertTrue(isEmpty())
nova chamada: assertTrue(isEmpty(), "Era esperado verdadeiro, mas " + result2454 + " <isEmpty()> é falso")
chamada antiga: assertEquals(2, size())
nova chamada: assertEquals(2, size(), "Era esperado valores iguais, mas  2 é diferente de " + result2455 + " <size()>")
chamada antiga: assertTrue(isEmpty())
nova chamada: assertTrue(isEmpty(), "Era esperado verdadeiro, mas " + result2456 + " <isEmpty()> é falso")
chamada antiga: assertEquals(2, size())
nova chamada: assertEquals(2, size(), "Era esperado valores iguais, mas  2 é diferente de " + result2457 + " <size()>")
chamada antiga: assertEquals(1, peekId())
nova chamada: assertEquals(1, peekId(), "Era esperado valores iguais, mas  1 é diferente de " + result2458 + " <peekId()>")
chamada antiga: assertEquals(2.1f, peekVal())
nova chamada: assertEquals(2.1f, peekVal(), "Era esperado valores iguais, mas  2.1f é diferente de " + result2459 + " <peekVal()>")
chamada antiga: assertEquals(1, poll())
nova chamada: assertEquals(1, poll(), "Era esperado valores iguais, mas  1 é diferente de " + result2460 + " <poll()>")
chamada antiga: assertEquals(4, poll())
nova chamada: assertEquals(4, poll(), "Era esperado valores iguais, mas  4 é diferente de " + result2461 + " <poll()>")
chamada antiga: assertTrue(isEmpty())
nova chamada: assertTrue(isEmpty(), "Era esperado verdadeiro, mas " + result2462 + " <isEmpty()> é falso")
chamada antiga: assertEquals(1, peekId())
nova chamada: assertEquals(1, peekId(), "Era esperado valores iguais, mas  1 é diferente de " + result2463 + " <peekId()>")
chamada antiga: assertEquals(3, size())
nova chamada: assertEquals(3, size(), "Era esperado valores iguais, mas  3 é diferente de " + result2464 + " <size()>")
chamada antiga: assertEquals(2, size())
nova chamada: assertEquals(2, size(), "Era esperado valores iguais, mas  2 é diferente de " + result2465 + " <size()>")
chamada antiga: assertTrue(isEmpty())
nova chamada: assertTrue(isEmpty(), "Era esperado verdadeiro, mas " + result2466 + " <isEmpty()> é falso")
chamada antiga: assertEquals(IntArrayList.from(5, 7, 3, 9, 8), polled)
nova chamada: assertEquals(IntArrayList.from(5, 7, 3, 9, 8), polled, "Era esperado valores iguais, mas " + result2467 + " <IntArrayList.from(5, 7, 3, 9, 8)> é diferente de " + " polled")
chamada antiga: assertEquals(3, peekId())
nova chamada: assertEquals(3, peekId(), "Era esperado valores iguais, mas  3 é diferente de " + result2468 + " <peekId()>")
chamada antiga: assertEquals(5, peekId())
nova chamada: assertEquals(5, peekId(), "Era esperado valores iguais, mas  5 é diferente de " + result2469 + " <peekId()>")
chamada antiga: assertEquals(9, peekId())
nova chamada: assertEquals(9, peekId(), "Era esperado valores iguais, mas  9 é diferente de " + result2470 + " <peekId()>")
chamada antiga: assertEquals(IntArrayList.from(9, 5, 3), polled)
nova chamada: assertEquals(IntArrayList.from(9, 5, 3), polled, "Era esperado valores iguais, mas " + result2471 + " <IntArrayList.from(9, 5, 3)> é diferente de " + " polled")
chamada antiga: assertTrue(pushCount > 0)
nova chamada: assertTrue(pushCount > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(2, poll())
nova chamada: assertEquals(2, poll(), "Era esperado valores iguais, mas  2 é diferente de " + result2472 + " <poll()>")
chamada antiga: assertTrue(contains(1))
nova chamada: assertTrue(contains(1), "Era esperado verdadeiro, mas " + result2473 + " <contains(1)> é falso")
chamada antiga: assertEquals(1, poll())
nova chamada: assertEquals(1, poll(), "Era esperado valores iguais, mas  1 é diferente de " + result2474 + " <poll()>")
chamada antiga: assertEquals(2, size())
nova chamada: assertEquals(2, size(), "Era esperado valores iguais, mas  2 é diferente de " + result2475 + " <size()>")
chamada antiga: assertTrue(instance.isEmpty())
nova chamada: assertTrue(instance.isEmpty(), "Era esperado verdadeiro, mas " + result2476 + " <instance.isEmpty()> é falso")
chamada antiga: assertEquals(10, instance.peekValue())
nova chamada: assertEquals(10, instance.peekValue(), "Era esperado valores iguais, mas  10 é diferente de " + result2477 + " <instance.peekValue()>")
chamada antiga: assertEquals(1, instance.getSize())
nova chamada: assertEquals(1, instance.getSize(), "Era esperado valores iguais, mas  1 é diferente de " + result2478 + " <instance.getSize()>")
chamada antiga: assertEquals(2, instance.peekValue())
nova chamada: assertEquals(2, instance.peekValue(), "Era esperado valores iguais, mas  2 é diferente de " + result2479 + " <instance.peekValue()>")
chamada antiga: assertEquals(1, instance.pollKey())
nova chamada: assertEquals(1, instance.pollKey(), "Era esperado valores iguais, mas  1 é diferente de " + result2480 + " <instance.pollKey()>")
chamada antiga: assertEquals(0, instance.pollKey())
nova chamada: assertEquals(0, instance.pollKey(), "Era esperado valores iguais, mas  0 é diferente de " + result2481 + " <instance.pollKey()>")
chamada antiga: assertEquals(0, instance.getSize())
nova chamada: assertEquals(0, instance.getSize(), "Era esperado valores iguais, mas  0 é diferente de " + result2482 + " <instance.getSize()>")
chamada antiga: assertTrue(instance.isEmpty())
nova chamada: assertTrue(instance.isEmpty(), "Era esperado verdadeiro, mas " + result2483 + " <instance.isEmpty()> é falso")
chamada antiga: assertEquals(1, instance.getSize())
nova chamada: assertEquals(1, instance.getSize(), "Era esperado valores iguais, mas  1 é diferente de " + result2484 + " <instance.getSize()>")
chamada antiga: assertEquals(10, instance.peekValue())
nova chamada: assertEquals(10, instance.peekValue(), "Era esperado valores iguais, mas  10 é diferente de " + result2485 + " <instance.peekValue()>")
chamada antiga: assertEquals(0, instance.peekKey())
nova chamada: assertEquals(0, instance.peekKey(), "Era esperado valores iguais, mas  0 é diferente de " + result2486 + " <instance.peekKey()>")
chamada antiga: assertEquals(2, instance.peekValue())
nova chamada: assertEquals(2, instance.peekValue(), "Era esperado valores iguais, mas  2 é diferente de " + result2487 + " <instance.peekValue()>")
chamada antiga: assertEquals(1, instance.getSize())
nova chamada: assertEquals(1, instance.getSize(), "Era esperado valores iguais, mas  1 é diferente de " + result2488 + " <instance.getSize()>")
chamada antiga: assertEquals(2, instance.peekValue())
nova chamada: assertEquals(2, instance.peekValue(), "Era esperado valores iguais, mas  2 é diferente de " + result2489 + " <instance.peekValue()>")
chamada antiga: assertEquals(2, instance.getSize())
nova chamada: assertEquals(2, instance.getSize(), "Era esperado valores iguais, mas  2 é diferente de " + result2490 + " <instance.getSize()>")
chamada antiga: assertEquals(0, instance.peekValue())
nova chamada: assertEquals(0, instance.peekValue(), "Era esperado valores iguais, mas  0 é diferente de " + result2491 + " <instance.peekValue()>")
chamada antiga: assertEquals(3, instance.getSize())
nova chamada: assertEquals(3, instance.getSize(), "Era esperado valores iguais, mas  3 é diferente de " + result2492 + " <instance.getSize()>")
chamada antiga: assertTrue(instance.isEmpty())
nova chamada: assertTrue(instance.isEmpty(), "Era esperado verdadeiro, mas " + result2493 + " <instance.isEmpty()> é falso")
chamada antiga: assertEquals(10, instance.peekValue())
nova chamada: assertEquals(10, instance.peekValue(), "Era esperado valores iguais, mas  10 é diferente de " + result2494 + " <instance.peekValue()>")
chamada antiga: assertEquals(2, instance.getSize())
nova chamada: assertEquals(2, instance.getSize(), "Era esperado valores iguais, mas  2 é diferente de " + result2495 + " <instance.getSize()>")
chamada antiga: assertEquals(11, instance.peekValue())
nova chamada: assertEquals(11, instance.peekValue(), "Era esperado valores iguais, mas  11 é diferente de " + result2496 + " <instance.peekValue()>")
chamada antiga: assertEquals(2, instance.getSize())
nova chamada: assertEquals(2, instance.getSize(), "Era esperado valores iguais, mas  2 é diferente de " + result2497 + " <instance.getSize()>")
chamada antiga: assertEquals("[1, 12]", bs.toString())
nova chamada: assertEquals("[1, 12]", bs.toString(), "Era esperado valores iguais, mas  '[1, 12]' é diferente de " + result2498 + " <bs.toString()>")
chamada antiga: assertEquals(50, instance.getMinLatForTile(52.5))
nova chamada: assertEquals(50, instance.getMinLatForTile(52.5), "Era esperado valores iguais, mas  50 é diferente de " + result2499 + " <instance.getMinLatForTile(52.5)>")
chamada antiga: assertEquals(10, instance.getMinLatForTile(29.9))
nova chamada: assertEquals(10, instance.getMinLatForTile(29.9), "Era esperado valores iguais, mas  10 é diferente de " + result2500 + " <instance.getMinLatForTile(29.9)>")
chamada antiga: assertEquals(-70, instance.getMinLatForTile(-59.9))
nova chamada: assertEquals(-70, instance.getMinLatForTile(-59.9), "Era esperado valores iguais, mas  -70 é diferente de " + result2501 + " <instance.getMinLatForTile(-59.9)>")
chamada antiga: assertEquals(-60, instance.getMinLonForTile(-59.9))
nova chamada: assertEquals(-60, instance.getMinLonForTile(-59.9), "Era esperado valores iguais, mas  -60 é diferente de " + result2502 + " <instance.getMinLonForTile(-59.9)>")
chamada antiga: assertEquals(0, instance.getMinLonForTile(0.9))
nova chamada: assertEquals(0, instance.getMinLonForTile(0.9), "Era esperado valores iguais, mas  0 é diferente de " + result2503 + " <instance.getMinLonForTile(0.9)>")
chamada antiga: assertTrue(instance.getDownloadURL(42.940339, 11.953125).contains("E000/30N000E_20101117_gmted_mea075.tif"))
nova chamada: assertTrue(instance.getDownloadURL(42.940339, 11.953125).contains("E000/30N000E_20101117_gmted_mea075.tif"), "Era esperado verdadeiro, mas " + result2504 + " <instance.getDownloadURL(42.940339, 11.953125).contains('E000/30N000E_20101117_gmted_mea075.tif')> é falso")
chamada antiga: assertTrue(instance.getDownloadURL(38.548165, -77.167969).contains("W090/30N090W_20101117_gmted_mea075.tif"))
nova chamada: assertTrue(instance.getDownloadURL(38.548165, -77.167969).contains("W090/30N090W_20101117_gmted_mea075.tif"), "Era esperado verdadeiro, mas " + result2505 + " <instance.getDownloadURL(38.548165, -77.167969).contains('W090/30N090W_20101117_gmted_mea075.tif')> é falso")
chamada antiga: assertTrue(instance.getDownloadURL(74.116047, -169.277344).contains("W180/70N180W_20101117_gmted_mea075.tif"))
nova chamada: assertTrue(instance.getDownloadURL(74.116047, -169.277344).contains("W180/70N180W_20101117_gmted_mea075.tif"), "Era esperado verdadeiro, mas " + result2506 + " <instance.getDownloadURL(74.116047, -169.277344).contains('W180/70N180W_20101117_gmted_mea075.tif')> é falso")
chamada antiga: assertTrue(instance.getDownloadURL(-61.015725, -156.621094).contains("W180/70S180W_20101117_gmted_mea075.tif"))
nova chamada: assertTrue(instance.getDownloadURL(-61.015725, -156.621094).contains("W180/70S180W_20101117_gmted_mea075.tif"), "Era esperado verdadeiro, mas " + result2507 + " <instance.getDownloadURL(-61.015725, -156.621094).contains('W180/70S180W_20101117_gmted_mea075.tif')> é falso")
chamada antiga: assertTrue(instance.getDownloadURL(74.590108, 166.640625).contains("E150/70N150E_20101117_gmted_mea075.tif"))
nova chamada: assertTrue(instance.getDownloadURL(74.590108, 166.640625).contains("E150/70N150E_20101117_gmted_mea075.tif"), "Era esperado verdadeiro, mas " + result2508 + " <instance.getDownloadURL(74.590108, 166.640625).contains('E150/70N150E_20101117_gmted_mea075.tif')> é falso")
chamada antiga: assertTrue(instance.getDownloadURL(-61.015725, 162.949219).contains("E150/70S150E_20101117_gmted_mea075.tif"))
nova chamada: assertTrue(instance.getDownloadURL(-61.015725, 162.949219).contains("E150/70S150E_20101117_gmted_mea075.tif"), "Era esperado verdadeiro, mas " + result2509 + " <instance.getDownloadURL(-61.015725, 162.949219).contains('E150/70S150E_20101117_gmted_mea075.tif')> é falso")
chamada antiga: assertEquals("30n000e_20101117_gmted_mea075", instance.getFileName(42.940339, 11.953125))
nova chamada: assertEquals("30n000e_20101117_gmted_mea075", instance.getFileName(42.940339, 11.953125), "Era esperado valores iguais, mas  '30n000e_20101117_gmted_mea075' é diferente de " + result2510 + " <instance.getFileName(42.940339, 11.953125)>")
chamada antiga: assertEquals("30n090w_20101117_gmted_mea075", instance.getFileName(38.548165, -77.167969))
nova chamada: assertEquals("30n090w_20101117_gmted_mea075", instance.getFileName(38.548165, -77.167969), "Era esperado valores iguais, mas  '30n090w_20101117_gmted_mea075' é diferente de " + result2511 + " <instance.getFileName(38.548165, -77.167969)>")
chamada antiga: assertEquals("70n180w_20101117_gmted_mea075", instance.getFileName(74.116047, -169.277344))
nova chamada: assertEquals("70n180w_20101117_gmted_mea075", instance.getFileName(74.116047, -169.277344), "Era esperado valores iguais, mas  '70n180w_20101117_gmted_mea075' é diferente de " + result2512 + " <instance.getFileName(74.116047, -169.277344)>")
chamada antiga: assertEquals("70s180w_20101117_gmted_mea075", instance.getFileName(-61.015725, -156.621094))
nova chamada: assertEquals("70s180w_20101117_gmted_mea075", instance.getFileName(-61.015725, -156.621094), "Era esperado valores iguais, mas  '70s180w_20101117_gmted_mea075' é diferente de " + result2513 + " <instance.getFileName(-61.015725, -156.621094)>")
chamada antiga: assertEquals("70n150e_20101117_gmted_mea075", instance.getFileName(74.590108, 166.640625))
nova chamada: assertEquals("70n150e_20101117_gmted_mea075", instance.getFileName(74.590108, 166.640625), "Era esperado valores iguais, mas  '70n150e_20101117_gmted_mea075' é diferente de " + result2514 + " <instance.getFileName(74.590108, 166.640625)>")
chamada antiga: assertEquals("70s150e_20101117_gmted_mea075", instance.getFileName(-61.015725, 162.949219))
nova chamada: assertEquals("70s150e_20101117_gmted_mea075", instance.getFileName(-61.015725, 162.949219), "Era esperado valores iguais, mas  '70s150e_20101117_gmted_mea075' é diferente de " + result2515 + " <instance.getFileName(-61.015725, 162.949219)>")
chamada antiga: assertTrue(file.exists())
nova chamada: assertTrue(file.exists(), "Era esperado verdadeiro, mas " + result2516 + " <file.exists()> é falso")
chamada antiga: assertEquals(1048676, file.length())
nova chamada: assertEquals(1048676, file.length(), "Era esperado valores iguais, mas  1048676 é diferente de " + result2517 + " <file.length()>")
chamada antiga: assertEquals("50n000e_20101117_gmted_mea075", instance.getFileName(69.999999, 19.493))
nova chamada: assertEquals("50n000e_20101117_gmted_mea075", instance.getFileName(69.999999, 19.493), "Era esperado valores iguais, mas  '50n000e_20101117_gmted_mea075' é diferente de " + result2518 + " <instance.getFileName(69.999999, 19.493)>")
chamada antiga: assertEquals("70n000e_20101117_gmted_mea075", instance.getFileName(70, 19.493))
nova chamada: assertEquals("70n000e_20101117_gmted_mea075", instance.getFileName(70, 19.493), "Era esperado valores iguais, mas  '70n000e_20101117_gmted_mea075' é diferente de " + result2519 + " <instance.getFileName(70, 19.493)>")
chamada antiga: assertEquals("50n000e_20101117_gmted_mea075", instance.getFileName(69.999999, 19.236))
nova chamada: assertEquals("50n000e_20101117_gmted_mea075", instance.getFileName(69.999999, 19.236), "Era esperado valores iguais, mas  '50n000e_20101117_gmted_mea075' é diferente de " + result2520 + " <instance.getFileName(69.999999, 19.236)>")
chamada antiga: assertEquals("70n000e_20101117_gmted_mea075", instance.getFileName(70, 19.236))
nova chamada: assertEquals("70n000e_20101117_gmted_mea075", instance.getFileName(70, 19.236), "Era esperado valores iguais, mas  '70n000e_20101117_gmted_mea075' é diferente de " + result2521 + " <instance.getFileName(70, 19.236)>")
chamada antiga: assertEquals("50n000e_20101117_gmted_mea075", instance.getFileName(53, 29.999999))
nova chamada: assertEquals("50n000e_20101117_gmted_mea075", instance.getFileName(53, 29.999999), "Era esperado valores iguais, mas  '50n000e_20101117_gmted_mea075' é diferente de " + result2522 + " <instance.getFileName(53, 29.999999)>")
chamada antiga: assertEquals("50n030e_20101117_gmted_mea075", instance.getFileName(53, 30.000001))
nova chamada: assertEquals("50n030e_20101117_gmted_mea075", instance.getFileName(53, 30.000001), "Era esperado valores iguais, mas  '50n030e_20101117_gmted_mea075' é diferente de " + result2523 + " <instance.getFileName(53, 30.000001)>")
chamada antiga: assertEquals("(0.0,0.0,0.0), (1.4,0.0,0.0)", round(out).toString())
nova chamada: assertEquals("(0.0,0.0,0.0), (1.4,0.0,0.0)", round(out).toString(), "Era esperado valores iguais, mas  '(0.0,0.0,0.0), (1.4,0.0,0.0)' é diferente de " + result2524 + " <round(out).toString()>")
chamada antiga: assertEquals("(0.0,0.0,0.0), (0.4,0.0,10.0), (0.8,0.0,0.0)", round(out).toString())
nova chamada: assertEquals("(0.0,0.0,0.0), (0.4,0.0,10.0), (0.8,0.0,0.0)", round(out).toString(), "Era esperado valores iguais, mas  '(0.0,0.0,0.0), (0.4,0.0,10.0), (0.8,0.0,0.0)' é diferente de " + result2525 + " <round(out).toString()>")
chamada antiga: assertEquals("(0.0,0.0,0.0), (0.4,0.0,10.0), (0.8,0.0,0.0)", round(out).toString())
nova chamada: assertEquals("(0.0,0.0,0.0), (0.4,0.0,10.0), (0.8,0.0,0.0)", round(out).toString(), "Era esperado valores iguais, mas  '(0.0,0.0,0.0), (0.4,0.0,10.0), (0.8,0.0,0.0)' é diferente de " + result2526 + " <round(out).toString()>")
chamada antiga: assertEquals("(0.0,0.0,0.0), (0.25,0.0,10.0), (0.5,0.0,10.0), (0.75,0.0,0.0)", round(out).toString())
nova chamada: assertEquals("(0.0,0.0,0.0), (0.25,0.0,10.0), (0.5,0.0,10.0), (0.75,0.0,0.0)", round(out).toString(), "Era esperado valores iguais, mas  '(0.0,0.0,0.0), (0.25,0.0,10.0), (0.5,0.0,10.0), (0.75,0.0,0.0)' é diferente de " + result2527 + " <round(out).toString()>")
chamada antiga: assertEquals("(0.0,-178.5,0.0), (0.0,-179.5,10.0), (0.0,179.5,10.0), (0.0,178.5,0.0)", round(out).toString())
nova chamada: assertEquals("(0.0,-178.5,0.0), (0.0,-179.5,10.0), (0.0,179.5,10.0), (0.0,178.5,0.0)", round(out).toString(), "Era esperado valores iguais, mas  '(0.0,-178.5,0.0), (0.0,-179.5,10.0), (0.0,179.5,10.0), (0.0,178.5,0.0)' é diferente de " + result2528 + " <round(out).toString()>")
chamada antiga: assertEquals("(88.5,-90.0,0.0), (89.5,-90.0,10.0), (89.5,90.0,10.0), (88.5,90.0,0.0)", round(out).toString())
nova chamada: assertEquals("(88.5,-90.0,0.0), (89.5,-90.0,10.0), (89.5,90.0,10.0), (88.5,90.0,0.0)", round(out).toString(), "Era esperado valores iguais, mas  '(88.5,-90.0,0.0), (89.5,-90.0,10.0), (89.5,90.0,10.0), (88.5,90.0,0.0)' é diferente de " + result2529 + " <round(out).toString()>")
chamada antiga: assertEquals(GHIntHashSet.from(1, 2, 3, 6, 8), outerNodeIds)
nova chamada: assertEquals(GHIntHashSet.from(1, 2, 3, 6, 8), outerNodeIds, "Era esperado valores iguais, mas " + result2530 + " <GHIntHashSet.from(1, 2, 3, 6, 8)> é diferente de " + " outerNodeIds")
chamada antiga: assertEquals(GHIntHashSet.from(7), innerNodeIds)
nova chamada: assertEquals(GHIntHashSet.from(7), innerNodeIds, "Era esperado valores iguais, mas " + result2531 + " <GHIntHashSet.from(7)> é diferente de " + " innerNodeIds")
chamada antiga: assertEquals(6, edge17PointList.size())
nova chamada: assertEquals(6, edge17PointList.size(), "Era esperado valores iguais, mas  6 é diferente de " + result2532 + " <edge17PointList.size()>")
chamada antiga: assertEquals(52, instance.getMinLatForTile(52.5))
nova chamada: assertEquals(52, instance.getMinLatForTile(52.5), "Era esperado valores iguais, mas  52 é diferente de " + result2533 + " <instance.getMinLatForTile(52.5)>")
chamada antiga: assertEquals(29, instance.getMinLatForTile(29.9))
nova chamada: assertEquals(29, instance.getMinLatForTile(29.9), "Era esperado valores iguais, mas  29 é diferente de " + result2534 + " <instance.getMinLatForTile(29.9)>")
chamada antiga: assertEquals(-60, instance.getMinLatForTile(-59.9))
nova chamada: assertEquals(-60, instance.getMinLatForTile(-59.9), "Era esperado valores iguais, mas  -60 é diferente de " + result2535 + " <instance.getMinLatForTile(-59.9)>")
chamada antiga: assertEquals(-60, instance.getMinLonForTile(-59.9))
nova chamada: assertEquals(-60, instance.getMinLonForTile(-59.9), "Era esperado valores iguais, mas  -60 é diferente de " + result2536 + " <instance.getMinLonForTile(-59.9)>")
chamada antiga: assertEquals(0, instance.getMinLonForTile(0.9))
nova chamada: assertEquals(0, instance.getMinLonForTile(0.9), "Era esperado valores iguais, mas  0 é diferente de " + result2537 + " <instance.getMinLonForTile(0.9)>")
chamada antiga: assertEquals("North/North_30_60/N42E011.hgt", instance.getDownloadURL(42.940339, 11.953125))
nova chamada: assertEquals("North/North_30_60/N42E011.hgt", instance.getDownloadURL(42.940339, 11.953125), "Era esperado valores iguais, mas  'North/North_30_60/N42E011.hgt' é diferente de " + result2538 + " <instance.getDownloadURL(42.940339, 11.953125)>")
chamada antiga: assertEquals("North/North_30_60/N38W078.hgt", instance.getDownloadURL(38.548165, -77.167969))
nova chamada: assertEquals("North/North_30_60/N38W078.hgt", instance.getDownloadURL(38.548165, -77.167969), "Era esperado valores iguais, mas  'North/North_30_60/N38W078.hgt' é diferente de " + result2539 + " <instance.getDownloadURL(38.548165, -77.167969)>")
chamada antiga: assertEquals("North/North_0_29/N14W005.hgt", instance.getDownloadURL(14.116047, -4.277344))
nova chamada: assertEquals("North/North_0_29/N14W005.hgt", instance.getDownloadURL(14.116047, -4.277344), "Era esperado valores iguais, mas  'North/North_0_29/N14W005.hgt' é diferente de " + result2540 + " <instance.getDownloadURL(14.116047, -4.277344)>")
chamada antiga: assertEquals("South/S52W058.hgt", instance.getDownloadURL(-51.015725, -57.621094))
nova chamada: assertEquals("South/S52W058.hgt", instance.getDownloadURL(-51.015725, -57.621094), "Era esperado valores iguais, mas  'South/S52W058.hgt' é diferente de " + result2541 + " <instance.getDownloadURL(-51.015725, -57.621094)>")
chamada antiga: assertEquals("North/North_0_29/N24E120.hgt", instance.getDownloadURL(24.590108, 120.640625))
nova chamada: assertEquals("North/North_0_29/N24E120.hgt", instance.getDownloadURL(24.590108, 120.640625), "Era esperado valores iguais, mas  'North/North_0_29/N24E120.hgt' é diferente de " + result2542 + " <instance.getDownloadURL(24.590108, 120.640625)>")
chamada antiga: assertEquals("South/S42W063.hgt", instance.getDownloadURL(-41.015725, -62.949219))
nova chamada: assertEquals("South/S42W063.hgt", instance.getDownloadURL(-41.015725, -62.949219), "Era esperado valores iguais, mas  'South/S42W063.hgt' é diferente de " + result2543 + " <instance.getDownloadURL(-41.015725, -62.949219)>")
chamada antiga: assertEquals("n42e011", instance.getFileName(42.940339, 11.953125))
nova chamada: assertEquals("n42e011", instance.getFileName(42.940339, 11.953125), "Era esperado valores iguais, mas  'n42e011' é diferente de " + result2544 + " <instance.getFileName(42.940339, 11.953125)>")
chamada antiga: assertEquals("n38w078", instance.getFileName(38.548165, -77.167969))
nova chamada: assertEquals("n38w078", instance.getFileName(38.548165, -77.167969), "Era esperado valores iguais, mas  'n38w078' é diferente de " + result2545 + " <instance.getFileName(38.548165, -77.167969)>")
chamada antiga: assertEquals("n14w005", instance.getFileName(14.116047, -4.277344))
nova chamada: assertEquals("n14w005", instance.getFileName(14.116047, -4.277344), "Era esperado valores iguais, mas  'n14w005' é diferente de " + result2546 + " <instance.getFileName(14.116047, -4.277344)>")
chamada antiga: assertEquals("s52w058", instance.getFileName(-51.015725, -57.621094))
nova chamada: assertEquals("s52w058", instance.getFileName(-51.015725, -57.621094), "Era esperado valores iguais, mas  's52w058' é diferente de " + result2547 + " <instance.getFileName(-51.015725, -57.621094)>")
chamada antiga: assertEquals("n24e120", instance.getFileName(24.590108, 120.640625))
nova chamada: assertEquals("n24e120", instance.getFileName(24.590108, 120.640625), "Era esperado valores iguais, mas  'n24e120' é diferente de " + result2548 + " <instance.getFileName(24.590108, 120.640625)>")
chamada antiga: assertEquals("s42w063", instance.getFileName(-41.015725, -62.949219))
nova chamada: assertEquals("s42w063", instance.getFileName(-41.015725, -62.949219), "Era esperado valores iguais, mas  's42w063' é diferente de " + result2549 + " <instance.getFileName(-41.015725, -62.949219)>")
chamada antiga: assertEquals("n42e011", instance.getFileName(42.999999, 11.48))
nova chamada: assertEquals("n42e011", instance.getFileName(42.999999, 11.48), "Era esperado valores iguais, mas  'n42e011' é diferente de " + result2550 + " <instance.getFileName(42.999999, 11.48)>")
chamada antiga: assertEquals("n43e011", instance.getFileName(43.000001, 11.48))
nova chamada: assertEquals("n43e011", instance.getFileName(43.000001, 11.48), "Era esperado valores iguais, mas  'n43e011' é diferente de " + result2551 + " <instance.getFileName(43.000001, 11.48)>")
chamada antiga: assertEquals("n42e011", instance.getFileName(42.1, 11.999999))
nova chamada: assertEquals("n42e011", instance.getFileName(42.1, 11.999999), "Era esperado valores iguais, mas  'n42e011' é diferente de " + result2552 + " <instance.getFileName(42.1, 11.999999)>")
chamada antiga: assertEquals("n42e012", instance.getFileName(42.1, 12.000001))
nova chamada: assertEquals("n42e012", instance.getFileName(42.1, 12.000001), "Era esperado valores iguais, mas  'n42e012' é diferente de " + result2553 + " <instance.getFileName(42.1, 12.000001)>")
chamada antiga: assertEquals(50, instance.down(52.5))
nova chamada: assertEquals(50, instance.down(52.5), "Era esperado valores iguais, mas  50 é diferente de " + result2554 + " <instance.down(52.5)>")
chamada antiga: assertEquals(0, instance.down(0.1))
nova chamada: assertEquals(0, instance.down(0.1), "Era esperado valores iguais, mas  0 é diferente de " + result2555 + " <instance.down(0.1)>")
chamada antiga: assertEquals(0, instance.down(0.01))
nova chamada: assertEquals(0, instance.down(0.01), "Era esperado valores iguais, mas  0 é diferente de " + result2556 + " <instance.down(0.01)>")
chamada antiga: assertEquals(-5, instance.down(-0.01))
nova chamada: assertEquals(-5, instance.down(-0.01), "Era esperado valores iguais, mas  -5 é diferente de " + result2557 + " <instance.down(-0.01)>")
chamada antiga: assertEquals(-5, instance.down(-2))
nova chamada: assertEquals(-5, instance.down(-2), "Era esperado valores iguais, mas  -5 é diferente de " + result2558 + " <instance.down(-2)>")
chamada antiga: assertEquals(-10, instance.down(-5.1))
nova chamada: assertEquals(-10, instance.down(-5.1), "Era esperado valores iguais, mas  -10 é diferente de " + result2559 + " <instance.down(-5.1)>")
chamada antiga: assertEquals(50, instance.down(50))
nova chamada: assertEquals(50, instance.down(50), "Era esperado valores iguais, mas  50 é diferente de " + result2560 + " <instance.down(50)>")
chamada antiga: assertEquals(45, instance.down(49))
nova chamada: assertEquals(45, instance.down(49), "Era esperado valores iguais, mas  45 é diferente de " + result2561 + " <instance.down(49)>")
chamada antiga: assertEquals("srtm_36_02", instance.getFileName(52, -0.1))
nova chamada: assertEquals("srtm_36_02", instance.getFileName(52, -0.1), "Era esperado valores iguais, mas  'srtm_36_02' é diferente de " + result2562 + " <instance.getFileName(52, -0.1)>")
chamada antiga: assertEquals("srtm_35_02", instance.getFileName(50, -10))
nova chamada: assertEquals("srtm_35_02", instance.getFileName(50, -10), "Era esperado valores iguais, mas  'srtm_35_02' é diferente de " + result2563 + " <instance.getFileName(50, -10)>")
chamada antiga: assertEquals("srtm_36_23", instance.getFileName(-52, -0.1))
nova chamada: assertEquals("srtm_36_23", instance.getFileName(-52, -0.1), "Era esperado valores iguais, mas  'srtm_36_23' é diferente de " + result2564 + " <instance.getFileName(-52, -0.1)>")
chamada antiga: assertEquals("srtm_35_22", instance.getFileName(-50, -10))
nova chamada: assertEquals("srtm_35_22", instance.getFileName(-50, -10), "Era esperado valores iguais, mas  'srtm_35_22' é diferente de " + result2565 + " <instance.getFileName(-50, -10)>")
chamada antiga: assertEquals("srtm_39_03", instance.getFileName(49.9, 11.5))
nova chamada: assertEquals("srtm_39_03", instance.getFileName(49.9, 11.5), "Era esperado valores iguais, mas  'srtm_39_03' é diferente de " + result2566 + " <instance.getFileName(49.9, 11.5)>")
chamada antiga: assertEquals("srtm_34_08", instance.getFileName(20, -11))
nova chamada: assertEquals("srtm_34_08", instance.getFileName(20, -11), "Era esperado valores iguais, mas  'srtm_34_08' é diferente de " + result2567 + " <instance.getFileName(20, -11)>")
chamada antiga: assertEquals("srtm_34_08", instance.getFileName(20, -14))
nova chamada: assertEquals("srtm_34_08", instance.getFileName(20, -14), "Era esperado valores iguais, mas  'srtm_34_08' é diferente de " + result2568 + " <instance.getFileName(20, -14)>")
chamada antiga: assertEquals("srtm_34_08", instance.getFileName(20, -15))
nova chamada: assertEquals("srtm_34_08", instance.getFileName(20, -15), "Era esperado valores iguais, mas  'srtm_34_08' é diferente de " + result2569 + " <instance.getFileName(20, -15)>")
chamada antiga: assertEquals("srtm_37_02", instance.getFileName(52.1943832, 0.1363176))
nova chamada: assertEquals("srtm_37_02", instance.getFileName(52.1943832, 0.1363176), "Era esperado valores iguais, mas  'srtm_37_02' é diferente de " + result2570 + " <instance.getFileName(52.1943832, 0.1363176)>")
chamada antiga: assertTrue(file.exists())
nova chamada: assertTrue(file.exists(), "Era esperado verdadeiro, mas " + result2571 + " <file.exists()> é falso")
chamada antiga: assertEquals(1048676, file.length())
nova chamada: assertEquals(1048676, file.length(), "Era esperado valores iguais, mas  1048676 é diferente de " + result2572 + " <file.length()>")
chamada antiga: assertEquals("srtm_39_04", instance.getFileName(44.999999, 11.5))
nova chamada: assertEquals("srtm_39_04", instance.getFileName(44.999999, 11.5), "Era esperado valores iguais, mas  'srtm_39_04' é diferente de " + result2573 + " <instance.getFileName(44.999999, 11.5)>")
chamada antiga: assertEquals("srtm_39_03", instance.getFileName(45.000001, 11.5))
nova chamada: assertEquals("srtm_39_03", instance.getFileName(45.000001, 11.5), "Era esperado valores iguais, mas  'srtm_39_03' é diferente de " + result2574 + " <instance.getFileName(45.000001, 11.5)>")
chamada antiga: assertEquals("srtm_38_04", instance.getFileName(44.94, 9.999999))
nova chamada: assertEquals("srtm_38_04", instance.getFileName(44.94, 9.999999), "Era esperado valores iguais, mas  'srtm_38_04' é diferente de " + result2575 + " <instance.getFileName(44.94, 9.999999)>")
chamada antiga: assertEquals("srtm_39_04", instance.getFileName(44.94, 10.000001))
nova chamada: assertEquals("srtm_39_04", instance.getFileName(44.94, 10.000001), "Era esperado valores iguais, mas  'srtm_39_04' é diferente de " + result2576 + " <instance.getFileName(44.94, 10.000001)>")
chamada antiga: assertEquals("Eurasia/N49E011", instance.getFileName(49, 11))
nova chamada: assertEquals("Eurasia/N49E011", instance.getFileName(49, 11), "Era esperado valores iguais, mas  'Eurasia/N49E011' é diferente de " + result2577 + " <instance.getFileName(49, 11)>")
chamada antiga: assertEquals("Eurasia/N52W002", instance.getFileName(52.268157, -1.230469))
nova chamada: assertEquals("Eurasia/N52W002", instance.getFileName(52.268157, -1.230469), "Era esperado valores iguais, mas  'Eurasia/N52W002' é diferente de " + result2578 + " <instance.getFileName(52.268157, -1.230469)>")
chamada antiga: assertEquals("Africa/S06E034", instance.getFileName(-5.965754, 34.804687))
nova chamada: assertEquals("Africa/S06E034", instance.getFileName(-5.965754, 34.804687), "Era esperado valores iguais, mas  'Africa/S06E034' é diferente de " + result2579 + " <instance.getFileName(-5.965754, 34.804687)>")
chamada antiga: assertEquals("Australia/S29E131", instance.getFileName(-28.304381, 131.484375))
nova chamada: assertEquals("Australia/S29E131", instance.getFileName(-28.304381, 131.484375), "Era esperado valores iguais, mas  'Australia/S29E131' é diferente de " + result2580 + " <instance.getFileName(-28.304381, 131.484375)>")
chamada antiga: assertEquals("South_America/S09W045", instance.getFileName(-9, -45))
nova chamada: assertEquals("South_America/S09W045", instance.getFileName(-9, -45), "Era esperado valores iguais, mas  'South_America/S09W045' é diferente de " + result2581 + " <instance.getFileName(-9, -45)>")
chamada antiga: assertEquals("South_America/S10W046", instance.getFileName(-9.1, -45.1))
nova chamada: assertEquals("South_America/S10W046", instance.getFileName(-9.1, -45.1), "Era esperado valores iguais, mas  'South_America/S10W046' é diferente de " + result2582 + " <instance.getFileName(-9.1, -45.1)>")
chamada antiga: assertEquals("South_America/S10W045", instance.getFileName(-9.6, -45))
nova chamada: assertEquals("South_America/S10W045", instance.getFileName(-9.6, -45), "Era esperado valores iguais, mas  'South_America/S10W045' é diferente de " + result2583 + " <instance.getFileName(-9.6, -45)>")
chamada antiga: assertEquals("South_America/S28W071", instance.getFileName(-28, -71))
nova chamada: assertEquals("South_America/S28W071", instance.getFileName(-28, -71), "Era esperado valores iguais, mas  'South_America/S28W071' é diferente de " + result2584 + " <instance.getFileName(-28, -71)>")
chamada antiga: assertEquals("South_America/S29W072", instance.getFileName(-28.88316, -71.070557))
nova chamada: assertEquals("South_America/S29W072", instance.getFileName(-28.88316, -71.070557), "Era esperado valores iguais, mas  'South_America/S29W072' é diferente de " + result2585 + " <instance.getFileName(-28.88316, -71.070557)>")
chamada antiga: assertEquals("Eurasia/N42E011", instance.getFileName(42.999999, 11.48))
nova chamada: assertEquals("Eurasia/N42E011", instance.getFileName(42.999999, 11.48), "Era esperado valores iguais, mas  'Eurasia/N42E011' é diferente de " + result2586 + " <instance.getFileName(42.999999, 11.48)>")
chamada antiga: assertEquals("Eurasia/N43E011", instance.getFileName(43.000001, 11.48))
nova chamada: assertEquals("Eurasia/N43E011", instance.getFileName(43.000001, 11.48), "Era esperado valores iguais, mas  'Eurasia/N43E011' é diferente de " + result2587 + " <instance.getFileName(43.000001, 11.48)>")
chamada antiga: assertEquals("Eurasia/N42E011", instance.getFileName(42.1, 11.999999))
nova chamada: assertEquals("Eurasia/N42E011", instance.getFileName(42.1, 11.999999), "Era esperado valores iguais, mas  'Eurasia/N42E011' é diferente de " + result2588 + " <instance.getFileName(42.1, 11.999999)>")
chamada antiga: assertEquals("Eurasia/N42E012", instance.getFileName(42.1, 12.000001))
nova chamada: assertEquals("Eurasia/N42E012", instance.getFileName(42.1, 12.000001), "Era esperado valores iguais, mas  'Eurasia/N42E012' é diferente de " + result2589 + " <instance.getFileName(42.1, 12.000001)>")
chamada antiga: assertEquals("North_America/N55W061", instance.getFileName(55.055, -60.541))
nova chamada: assertEquals("North_America/N55W061", instance.getFileName(55.055, -60.541), "Era esperado valores iguais, mas  'North_America/N55W061' é diferente de " + result2590 + " <instance.getFileName(55.055, -60.541)>")
chamada antiga: assertEquals(3, pl1.size())
nova chamada: assertEquals(3, pl1.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2591 + " <pl1.size()>")
chamada antiga: assertEquals(5, pl2.size())
nova chamada: assertEquals(5, pl2.size(), "Era esperado valores iguais, mas  5 é diferente de " + result2592 + " <pl2.size()>")
chamada antiga: assertEquals(3, pl1.size())
nova chamada: assertEquals(3, pl1.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2593 + " <pl1.size()>")
chamada antiga: assertEquals(3, pl1.size())
nova chamada: assertEquals(3, pl1.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2594 + " <pl1.size()>")
chamada antiga: assertEquals(5, pl2.size())
nova chamada: assertEquals(5, pl2.size(), "Era esperado valores iguais, mas  5 é diferente de " + result2595 + " <pl2.size()>")
chamada antiga: assertEquals(3, pl2.size())
nova chamada: assertEquals(3, pl2.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2596 + " <pl2.size()>")
chamada antiga: assertEquals(GHIntHashSet.from(), outerNodeIds)
nova chamada: assertEquals(GHIntHashSet.from(), outerNodeIds, "Era esperado valores iguais, mas " + result2597 + " <GHIntHashSet.from()> é diferente de " + " outerNodeIds")
chamada antiga: assertEquals(GHIntHashSet.from(0, 1, 2), innerNodeIds)
nova chamada: assertEquals(GHIntHashSet.from(0, 1, 2), innerNodeIds, "Era esperado valores iguais, mas " + result2598 + " <GHIntHashSet.from(0, 1, 2)> é diferente de " + " innerNodeIds")
chamada antiga: assertEquals(GHIntHashSet.from(2), outerNodeIds)
nova chamada: assertEquals(GHIntHashSet.from(2), outerNodeIds, "Era esperado valores iguais, mas " + result2599 + " <GHIntHashSet.from(2)> é diferente de " + " outerNodeIds")
chamada antiga: assertEquals(GHIntHashSet.from(0, 1), innerNodeIds)
nova chamada: assertEquals(GHIntHashSet.from(0, 1), innerNodeIds, "Era esperado valores iguais, mas " + result2600 + " <GHIntHashSet.from(0, 1)> é diferente de " + " innerNodeIds")
chamada antiga: assertEquals(GHIntHashSet.from(1, 3), outerNodeIds)
nova chamada: assertEquals(GHIntHashSet.from(1, 3), outerNodeIds, "Era esperado valores iguais, mas " + result2601 + " <GHIntHashSet.from(1, 3)> é diferente de " + " outerNodeIds")
chamada antiga: assertEquals(GHIntHashSet.from(2), innerNodeIds)
nova chamada: assertEquals(GHIntHashSet.from(2), innerNodeIds, "Era esperado valores iguais, mas " + result2602 + " <GHIntHashSet.from(2)> é diferente de " + " innerNodeIds")
chamada antiga: assertEquals(GHIntHashSet.from(1, 3, 6), outerNodeIds)
nova chamada: assertEquals(GHIntHashSet.from(1, 3, 6), outerNodeIds, "Era esperado valores iguais, mas " + result2603 + " <GHIntHashSet.from(1, 3, 6)> é diferente de " + " outerNodeIds")
chamada antiga: assertEquals(GHIntHashSet.from(2, 5), innerNodeIds)
nova chamada: assertEquals(GHIntHashSet.from(2, 5), innerNodeIds, "Era esperado valores iguais, mas " + result2604 + " <GHIntHashSet.from(2, 5)> é diferente de " + " innerNodeIds")
chamada antiga: assertEquals(GHIntHashSet.from(1, 3, 6, 8), outerNodeIds)
nova chamada: assertEquals(GHIntHashSet.from(1, 3, 6, 8), outerNodeIds, "Era esperado valores iguais, mas " + result2605 + " <GHIntHashSet.from(1, 3, 6, 8)> é diferente de " + " outerNodeIds")
chamada antiga: assertEquals(GHIntHashSet.from(2, 7), innerNodeIds)
nova chamada: assertEquals(GHIntHashSet.from(2, 7), innerNodeIds, "Era esperado valores iguais, mas " + result2606 + " <GHIntHashSet.from(2, 7)> é diferente de " + " innerNodeIds")
chamada antiga: assertEquals("N42/N42E011.hgt.gz", instance.getDownloadURL(42.940339, 11.953125))
nova chamada: assertEquals("N42/N42E011.hgt.gz", instance.getDownloadURL(42.940339, 11.953125), "Era esperado valores iguais, mas  'N42/N42E011.hgt.gz' é diferente de " + result2607 + " <instance.getDownloadURL(42.940339, 11.953125)>")
chamada antiga: assertEquals("N38/N38W078.hgt.gz", instance.getDownloadURL(38.548165, -77.167969))
nova chamada: assertEquals("N38/N38W078.hgt.gz", instance.getDownloadURL(38.548165, -77.167969), "Era esperado valores iguais, mas  'N38/N38W078.hgt.gz' é diferente de " + result2608 + " <instance.getDownloadURL(38.548165, -77.167969)>")
chamada antiga: assertEquals("N14/N14W005.hgt.gz", instance.getDownloadURL(14.116047, -4.277344))
nova chamada: assertEquals("N14/N14W005.hgt.gz", instance.getDownloadURL(14.116047, -4.277344), "Era esperado valores iguais, mas  'N14/N14W005.hgt.gz' é diferente de " + result2609 + " <instance.getDownloadURL(14.116047, -4.277344)>")
chamada antiga: assertEquals("S52/S52W058.hgt.gz", instance.getDownloadURL(-51.015725, -57.621094))
nova chamada: assertEquals("S52/S52W058.hgt.gz", instance.getDownloadURL(-51.015725, -57.621094), "Era esperado valores iguais, mas  'S52/S52W058.hgt.gz' é diferente de " + result2610 + " <instance.getDownloadURL(-51.015725, -57.621094)>")
chamada antiga: assertEquals("N24/N24E120.hgt.gz", instance.getDownloadURL(24.590108, 120.640625))
nova chamada: assertEquals("N24/N24E120.hgt.gz", instance.getDownloadURL(24.590108, 120.640625), "Era esperado valores iguais, mas  'N24/N24E120.hgt.gz' é diferente de " + result2611 + " <instance.getDownloadURL(24.590108, 120.640625)>")
chamada antiga: assertEquals("S42/S42W063.hgt.gz", instance.getDownloadURL(-41.015725, -62.949219))
nova chamada: assertEquals("S42/S42W063.hgt.gz", instance.getDownloadURL(-41.015725, -62.949219), "Era esperado valores iguais, mas  'S42/S42W063.hgt.gz' é diferente de " + result2612 + " <instance.getDownloadURL(-41.015725, -62.949219)>")
chamada antiga: assertEquals("n42e011", instance.getFileName(42.940339, 11.953125))
nova chamada: assertEquals("n42e011", instance.getFileName(42.940339, 11.953125), "Era esperado valores iguais, mas  'n42e011' é diferente de " + result2613 + " <instance.getFileName(42.940339, 11.953125)>")
chamada antiga: assertEquals("n38w078", instance.getFileName(38.548165, -77.167969))
nova chamada: assertEquals("n38w078", instance.getFileName(38.548165, -77.167969), "Era esperado valores iguais, mas  'n38w078' é diferente de " + result2614 + " <instance.getFileName(38.548165, -77.167969)>")
chamada antiga: assertEquals("n14w005", instance.getFileName(14.116047, -4.277344))
nova chamada: assertEquals("n14w005", instance.getFileName(14.116047, -4.277344), "Era esperado valores iguais, mas  'n14w005' é diferente de " + result2615 + " <instance.getFileName(14.116047, -4.277344)>")
chamada antiga: assertEquals("s52w058", instance.getFileName(-51.015725, -57.621094))
nova chamada: assertEquals("s52w058", instance.getFileName(-51.015725, -57.621094), "Era esperado valores iguais, mas  's52w058' é diferente de " + result2616 + " <instance.getFileName(-51.015725, -57.621094)>")
chamada antiga: assertEquals("n24e120", instance.getFileName(24.590108, 120.640625))
nova chamada: assertEquals("n24e120", instance.getFileName(24.590108, 120.640625), "Era esperado valores iguais, mas  'n24e120' é diferente de " + result2617 + " <instance.getFileName(24.590108, 120.640625)>")
chamada antiga: assertEquals("s42w063", instance.getFileName(-41.015725, -62.949219))
nova chamada: assertEquals("s42w063", instance.getFileName(-41.015725, -62.949219), "Era esperado valores iguais, mas  's42w063' é diferente de " + result2618 + " <instance.getFileName(-41.015725, -62.949219)>")
chamada antiga: assertEquals(3, rsp.getBest().getPoints().size())
nova chamada: assertEquals(3, rsp.getBest().getPoints().size(), "Era esperado valores iguais, mas  3 é diferente de " + result2619 + " <rsp.getBest().getPoints().size()>")
chamada antiga: assertTrue(hopper.load())
nova chamada: assertTrue(hopper.load(), "Era esperado verdadeiro, mas " + result2620 + " <hopper.load()> é falso")
chamada antiga: assertEquals(3, rsp.getBest().getPoints().size())
nova chamada: assertEquals(3, rsp.getBest().getPoints().size(), "Era esperado valores iguais, mas  3 é diferente de " + result2621 + " <rsp.getBest().getPoints().size()>")
chamada antiga: assertTrue(gh.getCHGraphs().isEmpty())
nova chamada: assertTrue(gh.getCHGraphs().isEmpty(), "Era esperado verdadeiro, mas " + result2622 + " <gh.getCHGraphs().isEmpty()> é falso")
chamada antiga: assertEquals(3, rsp.getBest().getPoints().size())
nova chamada: assertEquals(3, rsp.getBest().getPoints().size(), "Era esperado valores iguais, mas  3 é diferente de " + result2623 + " <rsp.getBest().getPoints().size()>")
chamada antiga: assertTrue(gh.load())
nova chamada: assertTrue(gh.load(), "Era esperado verdadeiro, mas " + result2624 + " <gh.load()> é falso")
chamada antiga: assertEquals(3, rsp.getBest().getPoints().size())
nova chamada: assertEquals(3, rsp.getBest().getPoints().size(), "Era esperado valores iguais, mas  3 é diferente de " + result2625 + " <rsp.getBest().getPoints().size()>")
chamada antiga: assertTrue(gh.getCHGraphs().isEmpty())
nova chamada: assertTrue(gh.getCHGraphs().isEmpty(), "Era esperado verdadeiro, mas " + result2626 + " <gh.getCHGraphs().isEmpty()> é falso")
chamada antiga: assertEquals(57, indexNodeList.size())
nova chamada: assertEquals(57, indexNodeList.size(), "Era esperado valores iguais, mas  57 é diferente de " + result2627 + " <indexNodeList.size()>")
chamada antiga: assertEquals(3, rsp.getBest().getPoints().size())
nova chamada: assertEquals(3, rsp.getBest().getPoints().size(), "Era esperado valores iguais, mas  3 é diferente de " + result2628 + " <rsp.getBest().getPoints().size()>")
chamada antiga: assertEquals(3, rsp.getBest().getPoints().size())
nova chamada: assertEquals(3, rsp.getBest().getPoints().size(), "Era esperado valores iguais, mas  3 é diferente de " + result2629 + " <rsp.getBest().getPoints().size()>")
chamada antiga: assertEquals(3, rsp.getBest().getPoints().size())
nova chamada: assertEquals(3, rsp.getBest().getPoints().size(), "Era esperado valores iguais, mas  3 é diferente de " + result2630 + " <rsp.getBest().getPoints().size()>")
chamada antiga: assertEquals(Helper.createPointList(51.249215, 9.431716, 52.0, 9.0, 51.2, 9.4), rsp.getBest().getPoints())
nova chamada: assertEquals(Helper.createPointList(51.249215, 9.431716, 52.0, 9.0, 51.2, 9.4), rsp.getBest().getPoints(), "Era esperado valores iguais, mas " + result2631 + " <Helper.createPointList(51.249215, 9.431716, 52.0, 9.0, 51.2, 9.4)> é diferente de " + result2632 + " <rsp.getBest().getPoints()>")
chamada antiga: assertEquals(3, rsp.getBest().getPoints().size())
nova chamada: assertEquals(3, rsp.getBest().getPoints().size(), "Era esperado valores iguais, mas  3 é diferente de " + result2633 + " <rsp.getBest().getPoints().size()>")
chamada antiga: assertEquals(3, rsp.getPoints().size())
nova chamada: assertEquals(3, rsp.getPoints().size(), "Era esperado valores iguais, mas  3 é diferente de " + result2634 + " <rsp.getPoints().size()>")
chamada antiga: assertEquals(new GHPoint(51.24921503475044, 9.431716451757769), rsp.getPoints().get(0))
nova chamada: assertEquals(new GHPoint(51.24921503475044, 9.431716451757769), rsp.getPoints().get(0), "Era esperado valores iguais, mas  new GHPoint(51.24921503475044, 9.431716451757769) é diferente de " + result2635 + " <rsp.getPoints().get(0)>")
chamada antiga: assertEquals(new GHPoint(52.0, 9.0), rsp.getPoints().get(1))
nova chamada: assertEquals(new GHPoint(52.0, 9.0), rsp.getPoints().get(1), "Era esperado valores iguais, mas  new GHPoint(52.0, 9.0) é diferente de " + result2636 + " <rsp.getPoints().get(1)>")
chamada antiga: assertEquals(new GHPoint(51.199999850988384, 9.39999970197677), rsp.getPoints().get(2))
nova chamada: assertEquals(new GHPoint(51.199999850988384, 9.39999970197677), rsp.getPoints().get(2), "Era esperado valores iguais, mas  new GHPoint(51.199999850988384, 9.39999970197677) é diferente de " + result2637 + " <rsp.getPoints().get(2)>")
chamada antiga: assertEquals(5, instance.getBaseGraph().getNodes())
nova chamada: assertEquals(5, instance.getBaseGraph().getNodes(), "Era esperado valores iguais, mas  5 é diferente de " + result2638 + " <instance.getBaseGraph().getNodes()>")
chamada antiga: assertEquals(8, instance.getBaseGraph().getEdges())
nova chamada: assertEquals(8, instance.getBaseGraph().getEdges(), "Era esperado valores iguais, mas  8 é diferente de " + result2639 + " <instance.getBaseGraph().getEdges()>")
chamada antiga: assertEquals(2, rsp.getPoints().size())
nova chamada: assertEquals(2, rsp.getPoints().size(), "Era esperado valores iguais, mas  2 é diferente de " + result2640 + " <rsp.getPoints().size()>")
chamada antiga: assertEquals(2, rsp.getPoints().size())
nova chamada: assertEquals(2, rsp.getPoints().size(), "Era esperado valores iguais, mas  2 é diferente de " + result2641 + " <rsp.getPoints().size()>")
chamada antiga: assertEquals(2, rsp.getPoints().size())
nova chamada: assertEquals(2, rsp.getPoints().size(), "Era esperado valores iguais, mas  2 é diferente de " + result2642 + " <rsp.getPoints().size()>")
chamada antiga: assertEquals(3, rsp.getPoints().size())
nova chamada: assertEquals(3, rsp.getPoints().size(), "Era esperado valores iguais, mas  3 é diferente de " + result2643 + " <rsp.getPoints().size()>")
chamada antiga: assertEquals(5, instance.getBaseGraph().getNodes())
nova chamada: assertEquals(5, instance.getBaseGraph().getNodes(), "Era esperado valores iguais, mas  5 é diferente de " + result2644 + " <instance.getBaseGraph().getNodes()>")
chamada antiga: assertEquals(5, instance.getBaseGraph().getNodes())
nova chamada: assertEquals(5, instance.getBaseGraph().getNodes(), "Era esperado valores iguais, mas  5 é diferente de " + result2645 + " <instance.getBaseGraph().getNodes()>")
chamada antiga: assertEquals("foot_access,foot_average_speed,foot_priority,car_access,car_average_speed,foot_subnetwork,car_subnetwork,roundabout,road_class,road_class_link,road_environment,max_speed,road_access,foot_network", instance.getEncodingManager().getEncodedValues().stream().map(EncodedValue::getName).collect(Collectors.joining(",")))
nova chamada: assertEquals("foot_access,foot_average_speed,foot_priority,car_access,car_average_speed,foot_subnetwork,car_subnetwork,roundabout,road_class,road_class_link,road_environment,max_speed,road_access,foot_network", instance.getEncodingManager().getEncodedValues().stream().map(EncodedValue::getName).collect(Collectors.joining(",")), "Era esperado valores iguais, mas  'foot_access,foot_average_speed,foot_priority,car_access,car_average_speed,foot_subnetwork,car_subnetwork,roundabout,road_class,road_class_link,road_environment,max_speed,road_access,foot_network' é diferente de " + result2646 + " <instance.getEncodingManager().getEncodedValues().stream().map(EncodedValue::getName).collect(Collectors.joining(','))>")
chamada antiga: assertEquals(5, instance.getBaseGraph().getNodes())
nova chamada: assertEquals(5, instance.getBaseGraph().getNodes(), "Era esperado valores iguais, mas  5 é diferente de " + result2647 + " <instance.getBaseGraph().getNodes()>")
chamada antiga: assertEquals(5, instance.getBaseGraph().getNodes())
nova chamada: assertEquals(5, instance.getBaseGraph().getNodes(), "Era esperado valores iguais, mas  5 é diferente de " + result2648 + " <instance.getBaseGraph().getNodes()>")
chamada antiga: assertEquals("foot_access,foot_average_speed,foot_priority,car_access,car_average_speed,foot_subnetwork,car_subnetwork,roundabout,road_class,road_class_link,road_environment,max_speed,road_access,foot_network", instance.getEncodingManager().getEncodedValues().stream().map(EncodedValue::getName).collect(Collectors.joining(",")))
nova chamada: assertEquals("foot_access,foot_average_speed,foot_priority,car_access,car_average_speed,foot_subnetwork,car_subnetwork,roundabout,road_class,road_class_link,road_environment,max_speed,road_access,foot_network", instance.getEncodingManager().getEncodedValues().stream().map(EncodedValue::getName).collect(Collectors.joining(",")), "Era esperado valores iguais, mas  'foot_access,foot_average_speed,foot_priority,car_access,car_average_speed,foot_subnetwork,car_subnetwork,roundabout,road_class,road_class_link,road_environment,max_speed,road_access,foot_network' é diferente de " + result2649 + " <instance.getEncodingManager().getEncodedValues().stream().map(EncodedValue::getName).collect(Collectors.joining(','))>")
chamada antiga: assertEquals("GraphHopperLocation is not specified. Call setGraphHopperLocation or init before", ex.getMessage())
nova chamada: assertEquals("GraphHopperLocation is not specified. Call setGraphHopperLocation or init before", ex.getMessage(), "Era esperado valores iguais, mas  'GraphHopperLocation is not specified. Call setGraphHopperLocation or init before' é diferente de " + result2650 + " <ex.getMessage()>")
chamada antiga: assertEquals("GraphHopperLocation is not specified. Call setGraphHopperLocation or init before", ex.getMessage())
nova chamada: assertEquals("GraphHopperLocation is not specified. Call setGraphHopperLocation or init before", ex.getMessage(), "Era esperado valores iguais, mas  'GraphHopperLocation is not specified. Call setGraphHopperLocation or init before' é diferente de " + result2651 + " <ex.getMessage()>")
chamada antiga: assertEquals("Couldn't load from existing folder: " + ghLoc + " but also cannot use file for DataReader as it wasn't specified!", ex.getMessage())
nova chamada: assertEquals("Couldn't load from existing folder: " + ghLoc + " but also cannot use file for DataReader as it wasn't specified!", ex.getMessage(), "Era esperado valores iguais, mas  'Couldn't load from existing folder: ' + ghLoc + ' but also cannot use file for DataReader as it wasn't specified!' é diferente de " + result2652 + " <ex.getMessage()>")
chamada antiga: assertEquals("Couldn't load from existing folder: " + ghLoc + " but also cannot use file for DataReader as it wasn't specified!", ex.getMessage())
nova chamada: assertEquals("Couldn't load from existing folder: " + ghLoc + " but also cannot use file for DataReader as it wasn't specified!", ex.getMessage(), "Era esperado valores iguais, mas  'Couldn't load from existing folder: ' + ghLoc + ' but also cannot use file for DataReader as it wasn't specified!' é diferente de " + result2653 + " <ex.getMessage()>")
chamada antiga: assertEquals(2, instance.getBaseGraph().getNodes())
nova chamada: assertEquals(2, instance.getBaseGraph().getNodes(), "Era esperado valores iguais, mas  2 é diferente de " + result2654 + " <instance.getBaseGraph().getNodes()>")
chamada antiga: assertEquals(2, instance.getBaseGraph().getAllEdges().length())
nova chamada: assertEquals(2, instance.getBaseGraph().getAllEdges().length(), "Era esperado valores iguais, mas  2 é diferente de " + result2655 + " <instance.getBaseGraph().getAllEdges().length()>")
chamada antiga: assertEquals(Helper.createPointList(11.1, 50, 10, 51, 11.194015, 51.995013), rsp.getPoints())
nova chamada: assertEquals(Helper.createPointList(11.1, 50, 10, 51, 11.194015, 51.995013), rsp.getPoints(), "Era esperado valores iguais, mas " + result2656 + " <Helper.createPointList(11.1, 50, 10, 51, 11.194015, 51.995013)> é diferente de " + result2657 + " <rsp.getPoints()>")
chamada antiga: assertEquals(4, rsp.getPoints().size())
nova chamada: assertEquals(4, rsp.getPoints().size(), "Era esperado valores iguais, mas  4 é diferente de " + result2658 + " <rsp.getPoints().size()>")
chamada antiga: assertEquals(5, rsp.getInstructions().size())
nova chamada: assertEquals(5, rsp.getInstructions().size(), "Era esperado valores iguais, mas  5 é diferente de " + result2659 + " <rsp.getInstructions().size()>")
chamada antiga: assertEquals(Instruction.REACHED_VIA, rsp.getInstructions().get(1).getSign())
nova chamada: assertEquals(Instruction.REACHED_VIA, rsp.getInstructions().get(1).getSign(), "Era esperado valores iguais, mas  Instruction.REACHED_VIA é diferente de " + result2660 + " <rsp.getInstructions().get(1).getSign()>")
chamada antiga: assertEquals(2, hopper.getCHGraphs().size())
nova chamada: assertEquals(2, hopper.getCHGraphs().size(), "Era esperado valores iguais, mas  2 é diferente de " + result2661 + " <hopper.getCHGraphs().size()>")
chamada antiga: assertTrue(hopper.load())
nova chamada: assertTrue(hopper.load(), "Era esperado verdadeiro, mas " + result2662 + " <hopper.load()> é falso")
chamada antiga: assertEquals("LM preparation of car already exists in storage and doesn't match configuration", ex.getMessage())
nova chamada: assertEquals("LM preparation of car already exists in storage and doesn't match configuration", ex.getMessage(), "Era esperado valores iguais, mas  'LM preparation of car already exists in storage and doesn't match configuration' é diferente de " + result2663 + " <ex.getMessage()>")
chamada antiga: assertEquals("CH preparation of car already exists in storage and doesn't match configuration", ex.getMessage())
nova chamada: assertEquals("CH preparation of car already exists in storage and doesn't match configuration", ex.getMessage(), "Era esperado valores iguais, mas  'CH preparation of car already exists in storage and doesn't match configuration' é diferente de " + result2664 + " <ex.getMessage()>")
chamada antiga: assertTrue(dateRangeParser.checkCondition("2019 Oct 8-2019 Dec 12").isCheckPassed())
nova chamada: assertTrue(dateRangeParser.checkCondition("2019 Oct 8-2019 Dec 12").isCheckPassed(), "Era esperado verdadeiro, mas " + result2665 + " <dateRangeParser.checkCondition('2019 Oct 8-2019 Dec 12').isCheckPassed()> é falso")
chamada antiga: assertEquals("yearless:true, dayOnly:false, reverse:false, from:1970-03-01T00:00:00Z, to:1970-10-31T23:59:59Z", instance.toString())
nova chamada: assertEquals("yearless:true, dayOnly:false, reverse:false, from:1970-03-01T00:00:00Z, to:1970-10-31T23:59:59Z", instance.toString(), "Era esperado valores iguais, mas  'yearless:true, dayOnly:false, reverse:false, from:1970-03-01T00:00:00Z, to:1970-10-31T23:59:59Z' é diferente de " + result2666 + " <instance.toString()>")
chamada antiga: assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 10)))
nova chamada: assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 10)), "Era esperado verdadeiro, mas " + result2667 + " <dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 10))> é falso")
chamada antiga: assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 12)))
nova chamada: assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 12)), "Era esperado verdadeiro, mas " + result2668 + " <dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 12))> é falso")
chamada antiga: assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 14)))
nova chamada: assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 14)), "Era esperado verdadeiro, mas " + result2669 + " <dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 14))> é falso")
chamada antiga: assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 10)))
nova chamada: assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 10)), "Era esperado verdadeiro, mas " + result2670 + " <dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 10))> é falso")
chamada antiga: assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 12)))
nova chamada: assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 12)), "Era esperado verdadeiro, mas " + result2671 + " <dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 12))> é falso")
chamada antiga: assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 14)))
nova chamada: assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 14)), "Era esperado verdadeiro, mas " + result2672 + " <dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 14))> é falso")
chamada antiga: assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.JULY, 10)))
nova chamada: assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.JULY, 10)), "Era esperado verdadeiro, mas " + result2673 + " <dateRange.isInRange(getCalendar(2014, Calendar.JULY, 10))> é falso")
chamada antiga: assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 12)))
nova chamada: assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 12)), "Era esperado verdadeiro, mas " + result2674 + " <dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 12))> é falso")
chamada antiga: assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.MARCH, 1)))
nova chamada: assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.MARCH, 1)), "Era esperado verdadeiro, mas " + result2675 + " <dateRange.isInRange(getCalendar(2014, Calendar.MARCH, 1))> é falso")
chamada antiga: assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.SEPTEMBER, 30)))
nova chamada: assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.SEPTEMBER, 30)), "Era esperado verdadeiro, mas " + result2676 + " <dateRange.isInRange(getCalendar(2014, Calendar.SEPTEMBER, 30))> é falso")
chamada antiga: assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 14)))
nova chamada: assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 14)), "Era esperado verdadeiro, mas " + result2677 + " <dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 14))> é falso")
chamada antiga: assertTrue(dateRange.isInRange(getCalendar(2015, Calendar.MARCH, 10)))
nova chamada: assertTrue(dateRange.isInRange(getCalendar(2015, Calendar.MARCH, 10)), "Era esperado verdadeiro, mas " + result2678 + " <dateRange.isInRange(getCalendar(2015, Calendar.MARCH, 10))> é falso")
chamada antiga: assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.JANUARY, 9)))
nova chamada: assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.JANUARY, 9)), "Era esperado verdadeiro, mas " + result2679 + " <dateRange.isInRange(getCalendar(2014, Calendar.JANUARY, 9))> é falso")
chamada antiga: assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 9)))
nova chamada: assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 9)), "Era esperado verdadeiro, mas " + result2680 + " <dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 9))> é falso")
chamada antiga: assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 15)))
nova chamada: assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 15)), "Era esperado verdadeiro, mas " + result2681 + " <dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 15))> é falso")
chamada antiga: assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.SEPTEMBER, 15)))
nova chamada: assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.SEPTEMBER, 15)), "Era esperado verdadeiro, mas " + result2682 + " <dateRange.isInRange(getCalendar(2014, Calendar.SEPTEMBER, 15))> é falso")
chamada antiga: assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.SEPTEMBER, 1)))
nova chamada: assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.SEPTEMBER, 1)), "Era esperado verdadeiro, mas " + result2683 + " <dateRange.isInRange(getCalendar(2014, Calendar.SEPTEMBER, 1))> é falso")
chamada antiga: assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.DECEMBER, 24)))
nova chamada: assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.DECEMBER, 24)), "Era esperado verdadeiro, mas " + result2684 + " <dateRange.isInRange(getCalendar(2014, Calendar.DECEMBER, 24))> é falso")
chamada antiga: assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.JANUARY, 24)))
nova chamada: assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.JANUARY, 24)), "Era esperado verdadeiro, mas " + result2685 + " <dateRange.isInRange(getCalendar(2014, Calendar.JANUARY, 24))> é falso")
chamada antiga: assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.MARCH, 31)))
nova chamada: assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.MARCH, 31)), "Era esperado verdadeiro, mas " + result2686 + " <dateRange.isInRange(getCalendar(2014, Calendar.MARCH, 31))> é falso")
chamada antiga: assertTrue(dateRange.isInRange(getCalendar(2016, Calendar.AUGUST, 10)))
nova chamada: assertTrue(dateRange.isInRange(getCalendar(2016, Calendar.AUGUST, 10)), "Era esperado verdadeiro, mas " + result2687 + " <dateRange.isInRange(getCalendar(2016, Calendar.AUGUST, 10))> é falso")
chamada antiga: assertTrue(dateRange.isInRange(getCalendar(2016, Calendar.JANUARY, 1)))
nova chamada: assertTrue(dateRange.isInRange(getCalendar(2016, Calendar.JANUARY, 1)), "Era esperado verdadeiro, mas " + result2688 + " <dateRange.isInRange(getCalendar(2016, Calendar.JANUARY, 1))> é falso")
chamada antiga: assertTrue(dateRange.isInRange(getCalendar(2016, Calendar.JANUARY, 20)))
nova chamada: assertTrue(dateRange.isInRange(getCalendar(2016, Calendar.JANUARY, 20)), "Era esperado verdadeiro, mas " + result2689 + " <dateRange.isInRange(getCalendar(2016, Calendar.JANUARY, 20))> é falso")
chamada antiga: assertTrue(dateRange.isInRange(getCalendar(2016, Calendar.JANUARY, 31)))
nova chamada: assertTrue(dateRange.isInRange(getCalendar(2016, Calendar.JANUARY, 31)), "Era esperado verdadeiro, mas " + result2690 + " <dateRange.isInRange(getCalendar(2016, Calendar.JANUARY, 31))> é falso")
chamada antiga: assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.SEPTEMBER, 1)))
nova chamada: assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.SEPTEMBER, 1)), "Era esperado verdadeiro, mas " + result2691 + " <dateRange.isInRange(getCalendar(2014, Calendar.SEPTEMBER, 1))> é falso")
chamada antiga: assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.SEPTEMBER, 1)))
nova chamada: assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.SEPTEMBER, 1)), "Era esperado verdadeiro, mas " + result2692 + " <dateRange.isInRange(getCalendar(2014, Calendar.SEPTEMBER, 1))> é falso")
chamada antiga: assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.SEPTEMBER, 30)))
nova chamada: assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.SEPTEMBER, 30)), "Era esperado verdadeiro, mas " + result2693 + " <dateRange.isInRange(getCalendar(2014, Calendar.SEPTEMBER, 30))> é falso")
chamada antiga: assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.SEPTEMBER, 1)))
nova chamada: assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.SEPTEMBER, 1)), "Era esperado verdadeiro, mas " + result2694 + " <dateRange.isInRange(getCalendar(2014, Calendar.SEPTEMBER, 1))> é falso")
chamada antiga: assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.SEPTEMBER, 30)))
nova chamada: assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.SEPTEMBER, 30)), "Era esperado verdadeiro, mas " + result2695 + " <dateRange.isInRange(getCalendar(2014, Calendar.SEPTEMBER, 30))> é falso")
chamada antiga: assertTrue(dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 26)))
nova chamada: assertTrue(dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 26)), "Era esperado verdadeiro, mas " + result2696 + " <dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 26))> é falso")
chamada antiga: assertTrue(dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 27)))
nova chamada: assertTrue(dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 27)), "Era esperado verdadeiro, mas " + result2697 + " <dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 27))> é falso")
chamada antiga: assertTrue(dateRange.dayOnly)
nova chamada: assertTrue(dateRange.dayOnly, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 21)))
nova chamada: assertTrue(dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 21)), "Era esperado verdadeiro, mas " + result2698 + " <dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 21))> é falso")
chamada antiga: assertTrue(dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 25)))
nova chamada: assertTrue(dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 25)), "Era esperado verdadeiro, mas " + result2699 + " <dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 25))> é falso")
chamada antiga: assertTrue(dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 28)))
nova chamada: assertTrue(dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 28)), "Era esperado verdadeiro, mas " + result2700 + " <dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 28))> é falso")
chamada antiga: assertTrue(dateRange.dayOnly)
nova chamada: assertTrue(dateRange.dayOnly, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(dateRange.reverse)
nova chamada: assertTrue(dateRange.reverse, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 26)))
nova chamada: assertTrue(dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 26)), "Era esperado verdadeiro, mas " + result2701 + " <dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 26))> é falso")
chamada antiga: assertTrue(dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 27)))
nova chamada: assertTrue(dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 27)), "Era esperado verdadeiro, mas " + result2702 + " <dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 27))> é falso")
chamada antiga: assertEquals(expected.get(Calendar.YEAR), actual.get(Calendar.YEAR))
nova chamada: assertEquals(expected.get(Calendar.YEAR), actual.get(Calendar.YEAR), "Era esperado valores iguais, mas " + result2703 + " <expected.get(Calendar.YEAR)> é diferente de " + result2704 + " <actual.get(Calendar.YEAR)>")
chamada antiga: assertEquals(expected.get(Calendar.MONTH), actual.get(Calendar.MONTH))
nova chamada: assertEquals(expected.get(Calendar.MONTH), actual.get(Calendar.MONTH), "Era esperado valores iguais, mas " + result2705 + " <expected.get(Calendar.MONTH)> é diferente de " + result2706 + " <actual.get(Calendar.MONTH)>")
chamada antiga: assertEquals(expected.get(Calendar.DAY_OF_MONTH), actual.get(Calendar.DAY_OF_MONTH))
nova chamada: assertEquals(expected.get(Calendar.DAY_OF_MONTH), actual.get(Calendar.DAY_OF_MONTH), "Era esperado valores iguais, mas " + result2707 + " <expected.get(Calendar.DAY_OF_MONTH)> é diferente de " + result2708 + " <actual.get(Calendar.DAY_OF_MONTH)>")
chamada antiga: assertTrue(createParser(getCalendar(2015, Calendar.SEPTEMBER, 30)).checkCondition(str))
nova chamada: assertTrue(createParser(getCalendar(2015, Calendar.SEPTEMBER, 30)).checkCondition(str), "Era esperado verdadeiro, mas " + result2709 + " <createParser(getCalendar(2015, Calendar.SEPTEMBER, 30)).checkCondition(str)> é falso")
chamada antiga: assertTrue(createParser(getCalendar(2015, Calendar.DECEMBER, 2)).checkCondition("no @ (01.11. - 31.03.)"))
nova chamada: assertTrue(createParser(getCalendar(2015, Calendar.DECEMBER, 2)).checkCondition("no @ (01.11. - 31.03.)"), "Era esperado verdadeiro, mas " + result2710 + " <createParser(getCalendar(2015, Calendar.DECEMBER, 2)).checkCondition('no @ (01.11. - 31.03.)')> é falso")
chamada antiga: assertTrue(createParser(getCalendar(2015, Calendar.DECEMBER, 2)).checkCondition("no @ (01.11 - 31.03)"))
nova chamada: assertTrue(createParser(getCalendar(2015, Calendar.DECEMBER, 2)).checkCondition("no @ (01.11 - 31.03)"), "Era esperado verdadeiro, mas " + result2711 + " <createParser(getCalendar(2015, Calendar.DECEMBER, 2)).checkCondition('no @ (01.11 - 31.03)')> é falso")
chamada antiga: assertTrue(ConditionalParser.createNumberParser("weight", 11).checkCondition("weight > 10").isCheckPassed())
nova chamada: assertTrue(ConditionalParser.createNumberParser("weight", 11).checkCondition("weight > 10").isCheckPassed(), "Era esperado verdadeiro, mas " + result2712 + " <ConditionalParser.createNumberParser('weight', 11).checkCondition('weight > 10').isCheckPassed()> é falso")
chamada antiga: assertTrue(instance.checkCondition("no @weight>10"))
nova chamada: assertTrue(instance.checkCondition("no @weight>10"), "Era esperado verdadeiro, mas " + result2713 + " <instance.checkCondition('no @weight>10')> é falso")
chamada antiga: assertTrue(instance.checkCondition("no @ weight < 10"))
nova chamada: assertTrue(instance.checkCondition("no @ weight < 10"), "Era esperado verdadeiro, mas " + result2714 + " <instance.checkCondition('no @ weight < 10')> é falso")
chamada antiga: assertTrue(instance.checkCondition("no @ weight <= 10"))
nova chamada: assertTrue(instance.checkCondition("no @ weight <= 10"), "Era esperado verdadeiro, mas " + result2715 + " <instance.checkCondition('no @ weight <= 10')> é falso")
chamada antiga: assertTrue(instance.checkCondition("no @ weight<=10"))
nova chamada: assertTrue(instance.checkCondition("no @ weight<=10"), "Era esperado verdadeiro, mas " + result2716 + " <instance.checkCondition('no @ weight<=10')> é falso")
chamada antiga: assertTrue(instance.checkCondition("no @ height > 2"))
nova chamada: assertTrue(instance.checkCondition("no @ height > 2"), "Era esperado verdadeiro, mas " + result2717 + " <instance.checkCondition('no @ height > 2')> é falso")
chamada antiga: assertTrue(instance.checkCondition("no @ height > 2t"))
nova chamada: assertTrue(instance.checkCondition("no @ height > 2t"), "Era esperado verdadeiro, mas " + result2718 + " <instance.checkCondition('no @ height > 2t')> é falso")
chamada antiga: assertFalse(edgeFilter.accept(edge))
nova chamada: assertFalse(edgeFilter.accept(edge), "Era esperado falso, mas " + result2719 + " <edgeFilter.accept(edge)> é verdadeiro ")
chamada antiga: assertFalse(edgeFilter.accept(edge))
nova chamada: assertFalse(edgeFilter.accept(edge), "Era esperado falso, mas " + result2720 + " <edgeFilter.accept(edge)> é verdadeiro ")
chamada antiga: assertFalse(edgeFilter.accept(edge))
nova chamada: assertFalse(edgeFilter.accept(edge), "Era esperado falso, mas " + result2721 + " <edgeFilter.accept(edge)> é verdadeiro ")
chamada antiga: assertFalse(edgeFilter.accept(edge))
nova chamada: assertFalse(edgeFilter.accept(edge), "Era esperado falso, mas " + result2722 + " <edgeFilter.accept(edge)> é verdadeiro ")
chamada antiga: assertFalse(edgeFilter.accept(edge))
nova chamada: assertFalse(edgeFilter.accept(edge), "Era esperado falso, mas " + result2723 + " <edgeFilter.accept(edge)> é verdadeiro ")
chamada antiga: assertFalse(edgeFilter.accept(edge))
nova chamada: assertFalse(edgeFilter.accept(edge), "Era esperado falso, mas " + result2724 + " <edgeFilter.accept(edge)> é verdadeiro ")
chamada antiga: assertFalse(createNameSimilarityEdgeFilter("Wentworth Street").accept(edge2))
nova chamada: assertFalse(createNameSimilarityEdgeFilter("Wentworth Street").accept(edge2), "Era esperado falso, mas " + result2725 + " <createNameSimilarityEdgeFilter('Wentworth Street').accept(edge2)> é verdadeiro ")
chamada antiga: assertFalse(edgeFilter.accept(createTestEdgeIterator("Rue Dupré")))
nova chamada: assertFalse(edgeFilter.accept(createTestEdgeIterator("Rue Dupré")), "Era esperado falso, mas " + result2726 + " <edgeFilter.accept(createTestEdgeIterator('Rue Dupré'))> é verdadeiro ")
chamada antiga: assertFalse(edgeFilter.accept(createTestEdgeIterator("Rue Saint-Jacques")))
nova chamada: assertFalse(edgeFilter.accept(createTestEdgeIterator("Rue Saint-Jacques")), "Era esperado falso, mas " + result2727 + " <edgeFilter.accept(createTestEdgeIterator('Rue Saint-Jacques'))> é verdadeiro ")
chamada antiga: assertFalse(edgeFilter.accept(createTestEdgeIterator("Rue Balmoral")))
nova chamada: assertFalse(edgeFilter.accept(createTestEdgeIterator("Rue Balmoral")), "Era esperado falso, mas " + result2728 + " <edgeFilter.accept(createTestEdgeIterator('Rue Balmoral'))> é verdadeiro ")
chamada antiga: assertFalse(createNameSimilarityEdgeFilter("Potsdamer Str.").accept(edge))
nova chamada: assertFalse(createNameSimilarityEdgeFilter("Potsdamer Str.").accept(edge), "Era esperado falso, mas " + result2729 + " <createNameSimilarityEdgeFilter('Potsdamer Str.').accept(edge)> é verdadeiro ")
chamada antiga: assertFalse(createNameSimilarityEdgeFilter("North Derby Lane").accept(createTestEdgeIterator("I-29 N")))
nova chamada: assertFalse(createNameSimilarityEdgeFilter("North Derby Lane").accept(createTestEdgeIterator("I-29 N")), "Era esperado falso, mas " + result2730 + " <createNameSimilarityEdgeFilter('North Derby Lane').accept(createTestEdgeIterator('I-29 N'))> é verdadeiro ")
chamada antiga: assertFalse(createNameSimilarityEdgeFilter("I-29 N").accept(createTestEdgeIterator("North Derby Lane")))
nova chamada: assertFalse(createNameSimilarityEdgeFilter("I-29 N").accept(createTestEdgeIterator("North Derby Lane")), "Era esperado falso, mas " + result2731 + " <createNameSimilarityEdgeFilter('I-29 N').accept(createTestEdgeIterator('North Derby Lane'))> é verdadeiro ")
chamada antiga: assertFalse(edgeFilter.accept(edge))
nova chamada: assertFalse(edgeFilter.accept(edge), "Era esperado falso, mas " + result2732 + " <edgeFilter.accept(edge)> é verdadeiro ")
chamada antiga: assertFalse(filter.accept(golden))
nova chamada: assertFalse(filter.accept(golden), "Era esperado falso, mas " + result2733 + " <filter.accept(golden)> é verdadeiro ")
chamada antiga: assertFalse(filter.accept(denison))
nova chamada: assertFalse(filter.accept(denison), "Era esperado falso, mas " + result2734 + " <filter.accept(denison)> é verdadeiro ")
chamada antiga: assertFalse(filter.accept(golden))
nova chamada: assertFalse(filter.accept(golden), "Era esperado falso, mas " + result2735 + " <filter.accept(golden)> é verdadeiro ")
chamada antiga: assertFalse(filter.accept(denison))
nova chamada: assertFalse(filter.accept(denison), "Era esperado falso, mas " + result2736 + " <filter.accept(denison)> é verdadeiro ")
chamada antiga: assertFalse(tmpParser.isBarrier(node))
nova chamada: assertFalse(tmpParser.isBarrier(node), "Era esperado falso, mas " + result2737 + " <tmpParser.isBarrier(node)> é verdadeiro ")
chamada antiga: assertFalse(accessEnc.getBool(true, flags))
nova chamada: assertFalse(accessEnc.getBool(true, flags), "Era esperado falso, mas " + result2738 + " <accessEnc.getBool(true, flags)> é verdadeiro ")
chamada antiga: assertFalse(accessEnc.getBool(false, flags))
nova chamada: assertFalse(accessEnc.getBool(false, flags), "Era esperado falso, mas " + result2739 + " <accessEnc.getBool(false, flags)> é verdadeiro ")
chamada antiga: assertFalse(accessEnc.getBool(true, flags))
nova chamada: assertFalse(accessEnc.getBool(true, flags), "Era esperado falso, mas " + result2740 + " <accessEnc.getBool(true, flags)> é verdadeiro ")
chamada antiga: assertFalse(accessEnc.getBool(true, edgeFlags))
nova chamada: assertFalse(accessEnc.getBool(true, edgeFlags), "Era esperado falso, mas " + result2741 + " <accessEnc.getBool(true, edgeFlags)> é verdadeiro ")
chamada antiga: assertFalse(accessEnc.getBool(false, edgeFlags))
nova chamada: assertFalse(accessEnc.getBool(false, edgeFlags), "Era esperado falso, mas " + result2742 + " <accessEnc.getBool(false, edgeFlags)> é verdadeiro ")
chamada antiga: assertFalse(accessEnc.getBool(true, edgeFlags))
nova chamada: assertFalse(accessEnc.getBool(true, edgeFlags), "Era esperado falso, mas " + result2743 + " <accessEnc.getBool(true, edgeFlags)> é verdadeiro ")
chamada antiga: assertFalse(accessEnc.getBool(false, edgeFlags))
nova chamada: assertFalse(accessEnc.getBool(false, edgeFlags), "Era esperado falso, mas " + result2744 + " <accessEnc.getBool(false, edgeFlags)> é verdadeiro ")
chamada antiga: assertFalse(accessEnc.getBool(true, edgeFlags))
nova chamada: assertFalse(accessEnc.getBool(true, edgeFlags), "Era esperado falso, mas " + result2745 + " <accessEnc.getBool(true, edgeFlags)> é verdadeiro ")
chamada antiga: assertFalse(roundaboutEnc.getBool(false, edgeFlags))
nova chamada: assertFalse(roundaboutEnc.getBool(false, edgeFlags), "Era esperado falso, mas " + result2746 + " <roundaboutEnc.getBool(false, edgeFlags)> é verdadeiro ")
chamada antiga: assertFalse(roundaboutEnc.getBool(false, edgeFlags))
nova chamada: assertFalse(roundaboutEnc.getBool(false, edgeFlags), "Era esperado falso, mas " + result2747 + " <roundaboutEnc.getBool(false, edgeFlags)> é verdadeiro ")
chamada antiga: assertFalse(parser.isBarrier(node))
nova chamada: assertFalse(parser.isBarrier(node), "Era esperado falso, mas " + result2748 + " <parser.isBarrier(node)> é verdadeiro ")
chamada antiga: assertFalse(parser.isBarrier(node))
nova chamada: assertFalse(parser.isBarrier(node), "Era esperado falso, mas " + result2749 + " <parser.isBarrier(node)> é verdadeiro ")
chamada antiga: assertFalse(parser.isBarrier(node))
nova chamada: assertFalse(parser.isBarrier(node), "Era esperado falso, mas " + result2750 + " <parser.isBarrier(node)> é verdadeiro ")
chamada antiga: assertFalse(parser.isBarrier(node))
nova chamada: assertFalse(parser.isBarrier(node), "Era esperado falso, mas " + result2751 + " <parser.isBarrier(node)> é verdadeiro ")
chamada antiga: assertFalse(parser.isBarrier(node))
nova chamada: assertFalse(parser.isBarrier(node), "Era esperado falso, mas " + result2752 + " <parser.isBarrier(node)> é verdadeiro ")
chamada antiga: assertFalse(parser.isBarrier(node))
nova chamada: assertFalse(parser.isBarrier(node), "Era esperado falso, mas " + result2753 + " <parser.isBarrier(node)> é verdadeiro ")
chamada antiga: assertFalse(accessEnc.getBool(true, edgeFlags))
nova chamada: assertFalse(accessEnc.getBool(true, edgeFlags), "Era esperado falso, mas " + result2754 + " <accessEnc.getBool(true, edgeFlags)> é verdadeiro ")
chamada antiga: assertFalse(accessEnc.getBool(false, edgeFlags))
nova chamada: assertFalse(accessEnc.getBool(false, edgeFlags), "Era esperado falso, mas " + result2755 + " <accessEnc.getBool(false, edgeFlags)> é verdadeiro ")
chamada antiga: assertFalse(parser.getAccessEnc().getBool(true, flags))
nova chamada: assertFalse(parser.getAccessEnc().getBool(true, flags), "Era esperado falso, mas " + result2756 + " <parser.getAccessEnc().getBool(true, flags)> é verdadeiro ")
chamada antiga: assertFalse(parser.getAccessEnc().getBool(true, flags))
nova chamada: assertFalse(parser.getAccessEnc().getBool(true, flags), "Era esperado falso, mas " + result2757 + " <parser.getAccessEnc().getBool(true, flags)> é verdadeiro ")
chamada antiga: assertFalse(parser.getAccessEnc().getBool(false, flags))
nova chamada: assertFalse(parser.getAccessEnc().getBool(false, flags), "Era esperado falso, mas " + result2758 + " <parser.getAccessEnc().getBool(false, flags)> é verdadeiro ")
chamada antiga: assertFalse(parser.getAccessEnc().getBool(false, flags))
nova chamada: assertFalse(parser.getAccessEnc().getBool(false, flags), "Era esperado falso, mas " + result2759 + " <parser.getAccessEnc().getBool(false, flags)> é verdadeiro ")
chamada antiga: assertFalse(parser.getAccessEnc().getBool(true, flags))
nova chamada: assertFalse(parser.getAccessEnc().getBool(true, flags), "Era esperado falso, mas " + result2760 + " <parser.getAccessEnc().getBool(true, flags)> é verdadeiro ")
chamada antiga: assertFalse(parser.getAccessEnc().getBool(true, flags))
nova chamada: assertFalse(parser.getAccessEnc().getBool(true, flags), "Era esperado falso, mas " + result2761 + " <parser.getAccessEnc().getBool(true, flags)> é verdadeiro ")
chamada antiga: assertFalse(parser.isBarrier(node))
nova chamada: assertFalse(parser.isBarrier(node), "Era esperado falso, mas " + result2762 + " <parser.isBarrier(node)> é verdadeiro ")
chamada antiga: assertFalse(parser.isBarrier(node))
nova chamada: assertFalse(parser.isBarrier(node), "Era esperado falso, mas " + result2763 + " <parser.isBarrier(node)> é verdadeiro ")
chamada antiga: assertFalse(edge.getReverse(carAccessEnc))
nova chamada: assertFalse(edge.getReverse(carAccessEnc), "Era esperado falso, mas " + result2764 + " <edge.getReverse(carAccessEnc)> é verdadeiro ")
chamada antiga: assertFalse(flags.isEmpty())
nova chamada: assertFalse(flags.isEmpty(), "Era esperado falso, mas " + result2765 + " <flags.isEmpty()> é verdadeiro ")
chamada antiga: assertFalse(flags.isEmpty())
nova chamada: assertFalse(flags.isEmpty(), "Era esperado falso, mas " + result2766 + " <flags.isEmpty()> é verdadeiro ")
chamada antiga: assertFalse(flags.isEmpty())
nova chamada: assertFalse(flags.isEmpty(), "Era esperado falso, mas " + result2767 + " <flags.isEmpty()> é verdadeiro ")
chamada antiga: assertFalse(footParser.isBarrier(node))
nova chamada: assertFalse(footParser.isBarrier(node), "Era esperado falso, mas " + result2768 + " <footParser.isBarrier(node)> é verdadeiro ")
chamada antiga: assertFalse(footParser.isBarrier(node))
nova chamada: assertFalse(footParser.isBarrier(node), "Era esperado falso, mas " + result2769 + " <footParser.isBarrier(node)> é verdadeiro ")
chamada antiga: assertFalse(footParser.isBarrier(node))
nova chamada: assertFalse(footParser.isBarrier(node), "Era esperado falso, mas " + result2770 + " <footParser.isBarrier(node)> é verdadeiro ")
chamada antiga: assertFalse(footParser.isBarrier(node))
nova chamada: assertFalse(footParser.isBarrier(node), "Era esperado falso, mas " + result2771 + " <footParser.isBarrier(node)> é verdadeiro ")
chamada antiga: assertFalse(footParser.isBarrier(node))
nova chamada: assertFalse(footParser.isBarrier(node), "Era esperado falso, mas " + result2772 + " <footParser.isBarrier(node)> é verdadeiro ")
chamada antiga: assertFalse(footParser.isBarrier(node))
nova chamada: assertFalse(footParser.isBarrier(node), "Era esperado falso, mas " + result2773 + " <footParser.isBarrier(node)> é verdadeiro ")
chamada antiga: assertFalse(blockFordsParser.isBarrier(node))
nova chamada: assertFalse(blockFordsParser.isBarrier(node), "Era esperado falso, mas " + result2774 + " <blockFordsParser.isBarrier(node)> é verdadeiro ")
chamada antiga: assertFalse(footParser.isBarrier(node))
nova chamada: assertFalse(footParser.isBarrier(node), "Era esperado falso, mas " + result2775 + " <footParser.isBarrier(node)> é verdadeiro ")
chamada antiga: assertFalse(footParser.isBarrier(node))
nova chamada: assertFalse(footParser.isBarrier(node), "Era esperado falso, mas " + result2776 + " <footParser.isBarrier(node)> é verdadeiro ")
chamada antiga: assertFalse(footParser.isBarrier(node))
nova chamada: assertFalse(footParser.isBarrier(node), "Era esperado falso, mas " + result2777 + " <footParser.isBarrier(node)> é verdadeiro ")
chamada antiga: assertFalse(footParser.isBarrier(node))
nova chamada: assertFalse(footParser.isBarrier(node), "Era esperado falso, mas " + result2778 + " <footParser.isBarrier(node)> é verdadeiro ")
chamada antiga: assertFalse(footParser.isBarrier(node))
nova chamada: assertFalse(footParser.isBarrier(node), "Era esperado falso, mas " + result2779 + " <footParser.isBarrier(node)> é verdadeiro ")
chamada antiga: assertFalse(new CarTagParser(manager, new PMap()).isBlockFords())
nova chamada: assertFalse(new CarTagParser(manager, new PMap()).isBlockFords(), "Era esperado falso, mas " + result2780 + " <new CarTagParser(manager, new PMap()).isBlockFords()> é verdadeiro ")
chamada antiga: assertFalse(new BikeTagParser(manager, new PMap()).isBlockFords())
nova chamada: assertFalse(new BikeTagParser(manager, new PMap()).isBlockFords(), "Era esperado falso, mas " + result2781 + " <new BikeTagParser(manager, new PMap()).isBlockFords()> é verdadeiro ")
chamada antiga: assertFalse(new FootTagParser(manager, new PMap()).isBlockFords())
nova chamada: assertFalse(new FootTagParser(manager, new PMap()).isBlockFords(), "Era esperado falso, mas " + result2782 + " <new FootTagParser(manager, new PMap()).isBlockFords()> é verdadeiro ")
chamada antiga: assertFalse(new CarTagParser(manager, new PMap("block_fords=false")).isBlockFords())
nova chamada: assertFalse(new CarTagParser(manager, new PMap("block_fords=false")).isBlockFords(), "Era esperado falso, mas " + result2783 + " <new CarTagParser(manager, new PMap('block_fords=false')).isBlockFords()> é verdadeiro ")
chamada antiga: assertFalse(new BikeTagParser(manager, new PMap("block_fords=false")).isBlockFords())
nova chamada: assertFalse(new BikeTagParser(manager, new PMap("block_fords=false")).isBlockFords(), "Era esperado falso, mas " + result2784 + " <new BikeTagParser(manager, new PMap('block_fords=false')).isBlockFords()> é verdadeiro ")
chamada antiga: assertFalse(new FootTagParser(manager, new PMap("block_fords=false")).isBlockFords())
nova chamada: assertFalse(new FootTagParser(manager, new PMap("block_fords=false")).isBlockFords(), "Era esperado falso, mas " + result2785 + " <new FootTagParser(manager, new PMap('block_fords=false')).isBlockFords()> é verdadeiro ")
chamada antiga: assertFalse(parser.isBarrier(node))
nova chamada: assertFalse(parser.isBarrier(node), "Era esperado falso, mas " + result2786 + " <parser.isBarrier(node)> é verdadeiro ")
chamada antiga: assertFalse(parser.isBarrier(node))
nova chamada: assertFalse(parser.isBarrier(node), "Era esperado falso, mas " + result2787 + " <parser.isBarrier(node)> é verdadeiro ")
chamada antiga: assertFalse(copyBS.contains(20))
nova chamada: assertFalse(copyBS.contains(20), "Era esperado falso, mas " + result2788 + " <copyBS.contains(20)> é verdadeiro ")
chamada antiga: assertFalse(copyBS.contains(40))
nova chamada: assertFalse(copyBS.contains(40), "Era esperado falso, mas " + result2789 + " <copyBS.contains(40)> é verdadeiro ")
chamada antiga: assertFalse(copyBS.contains(0))
nova chamada: assertFalse(copyBS.contains(0), "Era esperado falso, mas " + result2790 + " <copyBS.contains(0)> é verdadeiro ")
chamada antiga: assertFalse(copyBS.contains(91))
nova chamada: assertFalse(copyBS.contains(91), "Era esperado falso, mas " + result2791 + " <copyBS.contains(91)> é verdadeiro ")
chamada antiga: assertFalse(copyBS.contains(90))
nova chamada: assertFalse(copyBS.contains(90), "Era esperado falso, mas " + result2792 + " <copyBS.contains(90)> é verdadeiro ")
chamada antiga: assertFalse(copyBS.contains(1))
nova chamada: assertFalse(copyBS.contains(1), "Era esperado falso, mas " + result2793 + " <copyBS.contains(1)> é verdadeiro ")
chamada antiga: assertFalse(bs.contains(6))
nova chamada: assertFalse(bs.contains(6), "Era esperado falso, mas " + result2794 + " <bs.contains(6)> é verdadeiro ")
chamada antiga: assertFalse(bs.contains(2))
nova chamada: assertFalse(bs.contains(2), "Era esperado falso, mas " + result2795 + " <bs.contains(2)> é verdadeiro ")
chamada antiga: assertFalse(bs.contains(1))
nova chamada: assertFalse(bs.contains(1), "Era esperado falso, mas " + result2796 + " <bs.contains(1)> é verdadeiro ")
chamada antiga: assertFalse(bs.contains(2))
nova chamada: assertFalse(bs.contains(2), "Era esperado falso, mas " + result2797 + " <bs.contains(2)> é verdadeiro ")
chamada antiga: assertFalse(bs.contains(12))
nova chamada: assertFalse(bs.contains(12), "Era esperado falso, mas " + result2798 + " <bs.contains(12)> é verdadeiro ")
chamada antiga: assertFalse(bs.contains(2))
nova chamada: assertFalse(bs.contains(2), "Era esperado falso, mas " + result2799 + " <bs.contains(2)> é verdadeiro ")
chamada antiga: assertFalse(isEmpty())
nova chamada: assertFalse(isEmpty(), "Era esperado falso, mas " + result2800 + " <isEmpty()> é verdadeiro ")
chamada antiga: assertFalse(contains(3))
nova chamada: assertFalse(contains(3), "Era esperado falso, mas " + result2801 + " <contains(3)> é verdadeiro ")
chamada antiga: assertFalse(contains(1))
nova chamada: assertFalse(contains(1), "Era esperado falso, mas " + result2802 + " <contains(1)> é verdadeiro ")
chamada antiga: assertFalse(contains(0))
nova chamada: assertFalse(contains(0), "Era esperado falso, mas " + result2803 + " <contains(0)> é verdadeiro ")
chamada antiga: assertFalse(contains(1))
nova chamada: assertFalse(contains(1), "Era esperado falso, mas " + result2804 + " <contains(1)> é verdadeiro ")
chamada antiga: assertFalse(contains(2))
nova chamada: assertFalse(contains(2), "Era esperado falso, mas " + result2805 + " <contains(2)> é verdadeiro ")
chamada antiga: assertFalse(rsp.hasErrors())
nova chamada: assertFalse(rsp.hasErrors(), "Era esperado falso, mas " + result2806 + " <rsp.hasErrors()> é verdadeiro ")
chamada antiga: assertFalse(rsp.hasErrors())
nova chamada: assertFalse(rsp.hasErrors(), "Era esperado falso, mas " + result2807 + " <rsp.hasErrors()> é verdadeiro ")
chamada antiga: assertFalse(rsp.hasErrors())
nova chamada: assertFalse(rsp.hasErrors(), "Era esperado falso, mas " + result2808 + " <rsp.hasErrors()> é verdadeiro ")
chamada antiga: assertFalse(rsp.hasErrors())
nova chamada: assertFalse(rsp.hasErrors(), "Era esperado falso, mas " + result2809 + " <rsp.hasErrors()> é verdadeiro ")
chamada antiga: assertFalse(rsp.hasErrors())
nova chamada: assertFalse(rsp.hasErrors(), "Era esperado falso, mas " + result2810 + " <rsp.hasErrors()> é verdadeiro ")
chamada antiga: assertFalse(rsp.hasErrors())
nova chamada: assertFalse(rsp.hasErrors(), "Era esperado falso, mas " + result2811 + " <rsp.hasErrors()> é verdadeiro ")
chamada antiga: assertFalse(rsp.hasErrors())
nova chamada: assertFalse(rsp.hasErrors(), "Era esperado falso, mas " + result2812 + " <rsp.hasErrors()> é verdadeiro ")
chamada antiga: assertFalse(rsp.hasErrors())
nova chamada: assertFalse(rsp.hasErrors(), "Era esperado falso, mas " + result2813 + " <rsp.hasErrors()> é verdadeiro ")
chamada antiga: assertFalse(rsp.hasErrors())
nova chamada: assertFalse(rsp.hasErrors(), "Era esperado falso, mas " + result2814 + " <rsp.hasErrors()> é verdadeiro ")
chamada antiga: assertFalse(grsp.hasErrors())
nova chamada: assertFalse(grsp.hasErrors(), "Era esperado falso, mas " + result2815 + " <grsp.hasErrors()> é verdadeiro ")
chamada antiga: assertFalse(grsp.hasErrors())
nova chamada: assertFalse(grsp.hasErrors(), "Era esperado falso, mas " + result2816 + " <grsp.hasErrors()> é verdadeiro ")
chamada antiga: assertFalse(grsp.hasErrors())
nova chamada: assertFalse(grsp.hasErrors(), "Era esperado falso, mas " + result2817 + " <grsp.hasErrors()> é verdadeiro ")
chamada antiga: assertFalse(instance.load())
nova chamada: assertFalse(instance.load(), "Era esperado falso, mas " + result2818 + " <instance.load()> é verdadeiro ")
chamada antiga: assertFalse(new File(ghLoc).exists())
nova chamada: assertFalse(new File(ghLoc).exists(), "Era esperado falso, mas " + result2819 + " <new File(ghLoc).exists()> é verdadeiro ")
chamada antiga: assertFalse(grsp.hasErrors())
nova chamada: assertFalse(grsp.hasErrors(), "Era esperado falso, mas " + result2820 + " <grsp.hasErrors()> é verdadeiro ")
chamada antiga: assertFalse(dateRangeParser.checkCondition("2014 Oct 8-2014 Dec 12").isCheckPassed())
nova chamada: assertFalse(dateRangeParser.checkCondition("2014 Oct 8-2014 Dec 12").isCheckPassed(), "Era esperado falso, mas " + result2821 + " <dateRangeParser.checkCondition('2014 Oct 8-2014 Dec 12').isCheckPassed()> é verdadeiro ")
chamada antiga: assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 9)))
nova chamada: assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 9)), "Era esperado falso, mas " + result2822 + " <dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 9))> é verdadeiro ")
chamada antiga: assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 15)))
nova chamada: assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 15)), "Era esperado falso, mas " + result2823 + " <dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 15))> é verdadeiro ")
chamada antiga: assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 9)))
nova chamada: assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 9)), "Era esperado falso, mas " + result2824 + " <dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 9))> é verdadeiro ")
chamada antiga: assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 15)))
nova chamada: assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 15)), "Era esperado falso, mas " + result2825 + " <dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 15))> é verdadeiro ")
chamada antiga: assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.JUNE, 9)))
nova chamada: assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.JUNE, 9)), "Era esperado falso, mas " + result2826 + " <dateRange.isInRange(getCalendar(2014, Calendar.JUNE, 9))> é verdadeiro ")
chamada antiga: assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.SEPTEMBER, 14)))
nova chamada: assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.SEPTEMBER, 14)), "Era esperado falso, mas " + result2827 + " <dateRange.isInRange(getCalendar(2014, Calendar.SEPTEMBER, 14))> é verdadeiro ")
chamada antiga: assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.FEBRUARY, 25)))
nova chamada: assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.FEBRUARY, 25)), "Era esperado falso, mas " + result2828 + " <dateRange.isInRange(getCalendar(2014, Calendar.FEBRUARY, 25))> é verdadeiro ")
chamada antiga: assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.NOVEMBER, 1)))
nova chamada: assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.NOVEMBER, 1)), "Era esperado falso, mas " + result2829 + " <dateRange.isInRange(getCalendar(2014, Calendar.NOVEMBER, 1))> é verdadeiro ")
chamada antiga: assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 13)))
nova chamada: assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 13)), "Era esperado falso, mas " + result2830 + " <dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 13))> é verdadeiro ")
chamada antiga: assertFalse(dateRange.isInRange(getCalendar(2015, Calendar.MARCH, 11)))
nova chamada: assertFalse(dateRange.isInRange(getCalendar(2015, Calendar.MARCH, 11)), "Era esperado falso, mas " + result2831 + " <dateRange.isInRange(getCalendar(2015, Calendar.MARCH, 11))> é verdadeiro ")
chamada antiga: assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 10)))
nova chamada: assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 10)), "Era esperado falso, mas " + result2832 + " <dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 10))> é verdadeiro ")
chamada antiga: assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 12)))
nova chamada: assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 12)), "Era esperado falso, mas " + result2833 + " <dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 12))> é verdadeiro ")
chamada antiga: assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 14)))
nova chamada: assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 14)), "Era esperado falso, mas " + result2834 + " <dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 14))> é verdadeiro ")
chamada antiga: assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 31)))
nova chamada: assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 31)), "Era esperado falso, mas " + result2835 + " <dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 31))> é verdadeiro ")
chamada antiga: assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.APRIL, 1)))
nova chamada: assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.APRIL, 1)), "Era esperado falso, mas " + result2836 + " <dateRange.isInRange(getCalendar(2014, Calendar.APRIL, 1))> é verdadeiro ")
chamada antiga: assertFalse(dateRange.isInRange(getCalendar(2016, Calendar.AUGUST, 9)))
nova chamada: assertFalse(dateRange.isInRange(getCalendar(2016, Calendar.AUGUST, 9)), "Era esperado falso, mas " + result2837 + " <dateRange.isInRange(getCalendar(2016, Calendar.AUGUST, 9))> é verdadeiro ")
chamada antiga: assertFalse(dateRange.isInRange(getCalendar(2016, Calendar.FEBRUARY, 1)))
nova chamada: assertFalse(dateRange.isInRange(getCalendar(2016, Calendar.FEBRUARY, 1)), "Era esperado falso, mas " + result2838 + " <dateRange.isInRange(getCalendar(2016, Calendar.FEBRUARY, 1))> é verdadeiro ")
chamada antiga: assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 31)))
nova chamada: assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 31)), "Era esperado falso, mas " + result2839 + " <dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 31))> é verdadeiro ")
chamada antiga: assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.SEPTEMBER, 30)))
nova chamada: assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.SEPTEMBER, 30)), "Era esperado falso, mas " + result2840 + " <dateRange.isInRange(getCalendar(2014, Calendar.SEPTEMBER, 30))> é verdadeiro ")
chamada antiga: assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.OCTOBER, 1)))
nova chamada: assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.OCTOBER, 1)), "Era esperado falso, mas " + result2841 + " <dateRange.isInRange(getCalendar(2014, Calendar.OCTOBER, 1))> é verdadeiro ")
chamada antiga: assertFalse(dateRange.isInRange(getCalendar(2015, Calendar.SEPTEMBER, 1)))
nova chamada: assertFalse(dateRange.isInRange(getCalendar(2015, Calendar.SEPTEMBER, 1)), "Era esperado falso, mas " + result2842 + " <dateRange.isInRange(getCalendar(2015, Calendar.SEPTEMBER, 1))> é verdadeiro ")
chamada antiga: assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 31)))
nova chamada: assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 31)), "Era esperado falso, mas " + result2843 + " <dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 31))> é verdadeiro ")
chamada antiga: assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.OCTOBER, 1)))
nova chamada: assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.OCTOBER, 1)), "Era esperado falso, mas " + result2844 + " <dateRange.isInRange(getCalendar(2014, Calendar.OCTOBER, 1))> é verdadeiro ")
chamada antiga: assertFalse(dateRange.isInRange(getCalendar(2015, Calendar.SEPTEMBER, 1)))
nova chamada: assertFalse(dateRange.isInRange(getCalendar(2015, Calendar.SEPTEMBER, 1)), "Era esperado falso, mas " + result2845 + " <dateRange.isInRange(getCalendar(2015, Calendar.SEPTEMBER, 1))> é verdadeiro ")
chamada antiga: assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 31)))
nova chamada: assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 31)), "Era esperado falso, mas " + result2846 + " <dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 31))> é verdadeiro ")
chamada antiga: assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.OCTOBER, 1)))
nova chamada: assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.OCTOBER, 1)), "Era esperado falso, mas " + result2847 + " <dateRange.isInRange(getCalendar(2014, Calendar.OCTOBER, 1))> é verdadeiro ")
chamada antiga: assertFalse(dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 25)))
nova chamada: assertFalse(dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 25)), "Era esperado falso, mas " + result2848 + " <dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 25))> é verdadeiro ")
chamada antiga: assertFalse(dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 27)))
nova chamada: assertFalse(dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 27)), "Era esperado falso, mas " + result2849 + " <dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 27))> é verdadeiro ")
chamada antiga: assertFalse(dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 26)))
nova chamada: assertFalse(dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 26)), "Era esperado falso, mas " + result2850 + " <dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 26))> é verdadeiro ")
chamada antiga: assertFalse(dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 28)))
nova chamada: assertFalse(dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 28)), "Era esperado falso, mas " + result2851 + " <dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 28))> é verdadeiro ")
chamada antiga: assertFalse(dateRange.reverse)
nova chamada: assertFalse(dateRange.reverse, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: assertFalse(dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 20)))
nova chamada: assertFalse(dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 20)), "Era esperado falso, mas " + result2852 + " <dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 20))> é verdadeiro ")
chamada antiga: assertFalse(dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 26)))
nova chamada: assertFalse(dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 26)), "Era esperado falso, mas " + result2853 + " <dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 26))> é verdadeiro ")
chamada antiga: assertFalse(dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 25)))
nova chamada: assertFalse(dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 25)), "Era esperado falso, mas " + result2854 + " <dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 25))> é verdadeiro ")
chamada antiga: assertFalse(dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 28)))
nova chamada: assertFalse(dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 28)), "Era esperado falso, mas " + result2855 + " <dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 28))> é verdadeiro ")
chamada antiga: assertFalse(createParser(getCalendar(2015, Calendar.AUGUST, 31)).checkCondition(str))
nova chamada: assertFalse(createParser(getCalendar(2015, Calendar.AUGUST, 31)).checkCondition(str), "Era esperado falso, mas " + result2856 + " <createParser(getCalendar(2015, Calendar.AUGUST, 31)).checkCondition(str)> é verdadeiro ")
chamada antiga: assertFalse(createParser(getCalendar(2015, Calendar.JANUARY, 12)).checkCondition("yes @ (2015 Sep 1-2015 Sep 30)"))
nova chamada: assertFalse(createParser(getCalendar(2015, Calendar.JANUARY, 12)).checkCondition("yes @ (2015 Sep 1-2015 Sep 30)"), "Era esperado falso, mas " + result2857 + " <createParser(getCalendar(2015, Calendar.JANUARY, 12)).checkCondition('yes @ (2015 Sep 1-2015 Sep 30)')> é verdadeiro ")
chamada antiga: assertFalse(ConditionalParser.createNumberParser("weight", 10).checkCondition("weight > 10").isCheckPassed())
nova chamada: assertFalse(ConditionalParser.createNumberParser("weight", 10).checkCondition("weight > 10").isCheckPassed(), "Era esperado falso, mas " + result2858 + " <ConditionalParser.createNumberParser('weight', 10).checkCondition('weight > 10').isCheckPassed()> é verdadeiro ")
chamada antiga: assertFalse(ConditionalParser.createNumberParser("weight", 9).checkCondition("weight > 10").isCheckPassed())
nova chamada: assertFalse(ConditionalParser.createNumberParser("weight", 9).checkCondition("weight > 10").isCheckPassed(), "Era esperado falso, mas " + result2859 + " <ConditionalParser.createNumberParser('weight', 9).checkCondition('weight > 10').isCheckPassed()> é verdadeiro ")
chamada antiga: assertFalse(ConditionalParser.createNumberParser("xy", 9).checkCondition("weight > 10").isValid())
nova chamada: assertFalse(ConditionalParser.createNumberParser("xy", 9).checkCondition("weight > 10").isValid(), "Era esperado falso, mas " + result2860 + " <ConditionalParser.createNumberParser('xy', 9).checkCondition('weight > 10').isValid()> é verdadeiro ")
chamada antiga: assertFalse(instance.checkCondition("no @weight>10"))
nova chamada: assertFalse(instance.checkCondition("no @weight>10"), "Era esperado falso, mas " + result2861 + " <instance.checkCondition('no @weight>10')> é verdadeiro ")
chamada antiga: assertFalse(instance.checkCondition("no @weight>10"))
nova chamada: assertFalse(instance.checkCondition("no @weight>10"), "Era esperado falso, mas " + result2862 + " <instance.checkCondition('no @weight>10')> é verdadeiro ")
chamada antiga: assertFalse(instance.checkCondition("no @ weight < 10"))
nova chamada: assertFalse(instance.checkCondition("no @ weight < 10"), "Era esperado falso, mas " + result2863 + " <instance.checkCondition('no @ weight < 10')> é verdadeiro ")
chamada antiga: assertFalse(instance.checkCondition("no @ weight < 10"))
nova chamada: assertFalse(instance.checkCondition("no @ weight < 10"), "Era esperado falso, mas " + result2864 + " <instance.checkCondition('no @ weight < 10')> é verdadeiro ")
chamada antiga: assertFalse(instance.checkCondition("no @ weight <= 10"))
nova chamada: assertFalse(instance.checkCondition("no @ weight <= 10"), "Era esperado falso, mas " + result2865 + " <instance.checkCondition('no @ weight <= 10')> é verdadeiro ")
chamada antiga: assertFalse(instance.checkCondition("no @ weight <= 10"))
nova chamada: assertFalse(instance.checkCondition("no @ weight <= 10"), "Era esperado falso, mas " + result2866 + " <instance.checkCondition('no @ weight <= 10')> é verdadeiro ")
chamada antiga: assertFalse(instance.checkCondition("no @ weight<=10"))
nova chamada: assertFalse(instance.checkCondition("no @ weight<=10"), "Era esperado falso, mas " + result2867 + " <instance.checkCondition('no @ weight<=10')> é verdadeiro ")
chamada antiga: assertFalse(instance.checkCondition("no @ weight<=10"))
nova chamada: assertFalse(instance.checkCondition("no @ weight<=10"), "Era esperado falso, mas " + result2868 + " <instance.checkCondition('no @ weight<=10')> é verdadeiro ")
chamada antiga: assertFalse(instance.checkCondition("no @ height > 2"))
nova chamada: assertFalse(instance.checkCondition("no @ height > 2"), "Era esperado falso, mas " + result2869 + " <instance.checkCondition('no @ height > 2')> é verdadeiro ")
chamada antiga: assertFalse(instance.checkCondition("no @ height > 2"))
nova chamada: assertFalse(instance.checkCondition("no @ height > 2"), "Era esperado falso, mas " + result2870 + " <instance.checkCondition('no @ height > 2')> é verdadeiro ")
chamada antiga: assertFalse(instance.checkCondition("no @ height > 2t"))
nova chamada: assertFalse(instance.checkCondition("no @ height > 2t"), "Era esperado falso, mas " + result2871 + " <instance.checkCondition('no @ height > 2t')> é verdadeiro ")
chamada antiga: assertFalse(instance.checkCondition("no @ height > 2t"))
nova chamada: assertFalse(instance.checkCondition("no @ height > 2t"), "Era esperado falso, mas " + result2872 + " <instance.checkCondition('no @ height > 2t')> é verdadeiro ")
chamada antiga: assertFalse(acceptor.isPermittedWayConditionallyRestricted(way))
nova chamada: assertFalse(acceptor.isPermittedWayConditionallyRestricted(way), "Era esperado falso, mas " + result2873 + " <acceptor.isPermittedWayConditionallyRestricted(way)> é verdadeiro ")
chamada antiga: assertFalse(acceptor.isPermittedWayConditionallyRestricted(way))
nova chamada: assertFalse(acceptor.isPermittedWayConditionallyRestricted(way), "Era esperado falso, mas " + result2874 + " <acceptor.isPermittedWayConditionallyRestricted(way)> é verdadeiro ")
chamada antiga: assertTrue(acceptor.isPermittedWayConditionallyRestricted(way))
nova chamada: assertTrue(acceptor.isPermittedWayConditionallyRestricted(way), "Era esperado verdadeiro, mas " + result2875 + " <acceptor.isPermittedWayConditionallyRestricted(way)> é falso")
chamada antiga: assertTrue(acceptor.isRestrictedWayConditionallyPermitted(way))
nova chamada: assertTrue(acceptor.isRestrictedWayConditionallyPermitted(way), "Era esperado verdadeiro, mas " + result2876 + " <acceptor.isRestrictedWayConditionallyPermitted(way)> é falso")
chamada antiga: assertTrue(acceptor.isPermittedWayConditionallyRestricted(way))
nova chamada: assertTrue(acceptor.isPermittedWayConditionallyRestricted(way), "Era esperado verdadeiro, mas " + result2877 + " <acceptor.isPermittedWayConditionallyRestricted(way)> é falso")
chamada antiga: assertTrue(acceptor.isPermittedWayConditionallyRestricted(way))
nova chamada: assertTrue(acceptor.isPermittedWayConditionallyRestricted(way), "Era esperado verdadeiro, mas " + result2878 + " <acceptor.isPermittedWayConditionallyRestricted(way)> é falso")
chamada antiga: assertTrue(acceptor.isRestrictedWayConditionallyPermitted(way))
nova chamada: assertTrue(acceptor.isRestrictedWayConditionallyPermitted(way), "Era esperado verdadeiro, mas " + result2879 + " <acceptor.isRestrictedWayConditionallyPermitted(way)> é falso")
chamada antiga: assertTrue(osmTurnRelation.isVehicleTypeConcernedByTurnRestriction(vehicleTypes))
nova chamada: assertTrue(osmTurnRelation.isVehicleTypeConcernedByTurnRestriction(vehicleTypes), "Era esperado verdadeiro, mas " + result2880 + " <osmTurnRelation.isVehicleTypeConcernedByTurnRestriction(vehicleTypes)> é falso")
chamada antiga: assertTrue(osmTurnRelation.isVehicleTypeConcernedByTurnRestriction(vehicleTypes))
nova chamada: assertTrue(osmTurnRelation.isVehicleTypeConcernedByTurnRestriction(vehicleTypes), "Era esperado verdadeiro, mas " + result2881 + " <osmTurnRelation.isVehicleTypeConcernedByTurnRestriction(vehicleTypes)> é falso")
chamada antiga: assertFalse(osmTurnRelation.isVehicleTypeConcernedByTurnRestriction(vehicleTypes))
nova chamada: assertFalse(osmTurnRelation.isVehicleTypeConcernedByTurnRestriction(vehicleTypes), "Era esperado falso, mas " + result2882 + " <osmTurnRelation.isVehicleTypeConcernedByTurnRestriction(vehicleTypes)> é verdadeiro ")
chamada antiga: assertFalse(osmTurnRelation.isVehicleTypeConcernedByTurnRestriction(vehicleTypes))
nova chamada: assertFalse(osmTurnRelation.isVehicleTypeConcernedByTurnRestriction(vehicleTypes), "Era esperado falso, mas " + result2883 + " <osmTurnRelation.isVehicleTypeConcernedByTurnRestriction(vehicleTypes)> é verdadeiro ")
chamada antiga: assertFalse(osmTurnRelation.isVehicleTypeConcernedByTurnRestriction(vehicleTypes))
nova chamada: assertFalse(osmTurnRelation.isVehicleTypeConcernedByTurnRestriction(vehicleTypes), "Era esperado falso, mas " + result2884 + " <osmTurnRelation.isVehicleTypeConcernedByTurnRestriction(vehicleTypes)> é verdadeiro ")
chamada antiga: assertTrue(osmTurnRelation.isVehicleTypeConcernedByTurnRestriction(vehicleTypes))
nova chamada: assertTrue(osmTurnRelation.isVehicleTypeConcernedByTurnRestriction(vehicleTypes), "Era esperado verdadeiro, mas " + result2885 + " <osmTurnRelation.isVehicleTypeConcernedByTurnRestriction(vehicleTypes)> é falso")
chamada antiga: assertEquals(10 * 60, OSMReaderUtility.parseDuration("00:10"))
nova chamada: assertEquals(10 * 60, OSMReaderUtility.parseDuration("00:10"), "Era esperado valores iguais, mas  10 * 60 é diferente de " + result2886 + " <OSMReaderUtility.parseDuration('00:10')>")
chamada antiga: assertEquals(35 * 60, OSMReaderUtility.parseDuration("35"))
nova chamada: assertEquals(35 * 60, OSMReaderUtility.parseDuration("35"), "Era esperado valores iguais, mas  35 * 60 é diferente de " + result2887 + " <OSMReaderUtility.parseDuration('35')>")
chamada antiga: assertEquals(70 * 60, OSMReaderUtility.parseDuration("01:10"))
nova chamada: assertEquals(70 * 60, OSMReaderUtility.parseDuration("01:10"), "Era esperado valores iguais, mas  70 * 60 é diferente de " + result2888 + " <OSMReaderUtility.parseDuration('01:10')>")
chamada antiga: assertEquals(70 * 60 + 2, OSMReaderUtility.parseDuration("01:10:02"))
nova chamada: assertEquals(70 * 60 + 2, OSMReaderUtility.parseDuration("01:10:02"), "Era esperado valores iguais, mas  70 * 60 + 2 é diferente de " + result2889 + " <OSMReaderUtility.parseDuration('01:10:02')>")
chamada antiga: assertEquals(0, OSMReaderUtility.parseDuration(null))
nova chamada: assertEquals(0, OSMReaderUtility.parseDuration(null), "Era esperado valores iguais, mas  0 é diferente de " + result2890 + " <OSMReaderUtility.parseDuration(null)>")
chamada antiga: assertEquals(60 * 20 * 60, OSMReaderUtility.parseDuration("20:00"))
nova chamada: assertEquals(60 * 20 * 60, OSMReaderUtility.parseDuration("20:00"), "Era esperado valores iguais, mas  60 * 20 * 60 é diferente de " + result2891 + " <OSMReaderUtility.parseDuration('20:00')>")
chamada antiga: assertEquals(20 * 60, OSMReaderUtility.parseDuration("0:20:00"))
nova chamada: assertEquals(20 * 60, OSMReaderUtility.parseDuration("0:20:00"), "Era esperado valores iguais, mas  20 * 60 é diferente de " + result2892 + " <OSMReaderUtility.parseDuration('0:20:00')>")
chamada antiga: assertEquals((60 * 2 + 20) * 60 + 2, OSMReaderUtility.parseDuration("02:20:02"))
nova chamada: assertEquals((60 * 2 + 20) * 60 + 2, OSMReaderUtility.parseDuration("02:20:02"), "Era esperado valores iguais, mas  (60 * 2 + 20) * 60 + 2 é diferente de " + result2893 + " <OSMReaderUtility.parseDuration('02:20:02')>")
chamada antiga: assertEquals(31 + 31, OSMReaderUtility.parseDuration("P2M") / (24 * 60 * 60))
nova chamada: assertEquals(31 + 31, OSMReaderUtility.parseDuration("P2M") / (24 * 60 * 60), "Era esperado valores iguais, mas  31 + 31 é diferente de " + " OSMReaderUtility.parseDuration('P2M') / (24 * 60 * 60)")
chamada antiga: assertEquals(2 * 60, OSMReaderUtility.parseDuration("PT2M"))
nova chamada: assertEquals(2 * 60, OSMReaderUtility.parseDuration("PT2M"), "Era esperado valores iguais, mas  2 * 60 é diferente de " + result2894 + " <OSMReaderUtility.parseDuration('PT2M')>")
chamada antiga: assertEquals((5 * 60 + 12) * 60 + 36, OSMReaderUtility.parseDuration("PT5H12M36S"))
nova chamada: assertEquals((5 * 60 + 12) * 60 + 36, OSMReaderUtility.parseDuration("PT5H12M36S"), "Era esperado valores iguais, mas  (5 * 60 + 12) * 60 + 36 é diferente de " + result2895 + " <OSMReaderUtility.parseDuration('PT5H12M36S')>")
chamada antiga: assertEquals("Cannot parse duration tag value: " + value, e.getMessage())
nova chamada: assertEquals("Cannot parse duration tag value: " + value, e.getMessage(), "Era esperado valores iguais, mas  'Cannot parse duration tag value: ' + value é diferente de " + result2896 + " <e.getMessage()>")
chamada antiga: assertNotNull(properties.get("datareader.import.date"))
nova chamada: assertNotNull(properties.get("datareader.import.date"), "Era esperado não nulo, mas " + result2897 + " <properties.get('datareader.import.date')> é nulo")
chamada antiga: assertNotEquals("", properties.get("datareader.import.date"))
nova chamada: assertNotEquals("", properties.get("datareader.import.date"), "Era esperado valores diferentes, mas  '' é igual a " + result2898 + " <properties.get('datareader.import.date')>")
chamada antiga: assertEquals("2013-01-02T01:10:14Z", properties.get("datareader.data.date"))
nova chamada: assertEquals("2013-01-02T01:10:14Z", properties.get("datareader.data.date"), "Era esperado valores iguais, mas  '2013-01-02T01:10:14Z' é diferente de " + result2899 + " <properties.get('datareader.data.date')>")
chamada antiga: assertEquals(4, graph.getNodes())
nova chamada: assertEquals(4, graph.getNodes(), "Era esperado valores iguais, mas  4 é diferente de " + result2900 + " <graph.getNodes()>")
chamada antiga: assertEquals(GHUtility.asSet(n20), GHUtility.getNeighbors(carOutExplorer.setBaseNode(n10)))
nova chamada: assertEquals(GHUtility.asSet(n20), GHUtility.getNeighbors(carOutExplorer.setBaseNode(n10)), "Era esperado valores iguais, mas " + result2901 + " <GHUtility.asSet(n20)> é diferente de " + result2902 + " <GHUtility.getNeighbors(carOutExplorer.setBaseNode(n10))>")
chamada antiga: assertEquals(3, GHUtility.count(carOutExplorer.setBaseNode(n20)))
nova chamada: assertEquals(3, GHUtility.count(carOutExplorer.setBaseNode(n20)), "Era esperado valores iguais, mas  3 é diferente de " + result2903 + " <GHUtility.count(carOutExplorer.setBaseNode(n20))>")
chamada antiga: assertEquals(GHUtility.asSet(n20), GHUtility.getNeighbors(carOutExplorer.setBaseNode(n30)))
nova chamada: assertEquals(GHUtility.asSet(n20), GHUtility.getNeighbors(carOutExplorer.setBaseNode(n30)), "Era esperado valores iguais, mas " + result2904 + " <GHUtility.asSet(n20)> é diferente de " + result2905 + " <GHUtility.getNeighbors(carOutExplorer.setBaseNode(n30))>")
chamada antiga: assertTrue(iter.next())
nova chamada: assertTrue(iter.next(), "Era esperado verdadeiro, mas " + result2906 + " <iter.next()> é falso")
chamada antiga: assertEquals("street 123, B 122", iter.getName())
nova chamada: assertEquals("street 123, B 122", iter.getName(), "Era esperado valores iguais, mas  'street 123, B 122' é diferente de " + result2907 + " <iter.getName()>")
chamada antiga: assertEquals(n50, iter.getAdjNode())
nova chamada: assertEquals(n50, iter.getAdjNode(), "Era esperado valores iguais, mas  n50 é diferente de " + result2908 + " <iter.getAdjNode()>")
chamada antiga: assertTrue(iter.get(carAccessEnc))
nova chamada: assertTrue(iter.get(carAccessEnc), "Era esperado verdadeiro, mas " + result2909 + " <iter.get(carAccessEnc)> é falso")
chamada antiga: assertTrue(iter.getReverse(carAccessEnc))
nova chamada: assertTrue(iter.getReverse(carAccessEnc), "Era esperado verdadeiro, mas " + result2910 + " <iter.getReverse(carAccessEnc)> é falso")
chamada antiga: assertTrue(iter.next())
nova chamada: assertTrue(iter.next(), "Era esperado verdadeiro, mas " + result2911 + " <iter.next()> é falso")
chamada antiga: assertEquals("route 666", iter.getName())
nova chamada: assertEquals("route 666", iter.getName(), "Era esperado valores iguais, mas  'route 666' é diferente de " + result2912 + " <iter.getName()>")
chamada antiga: assertEquals(n30, iter.getAdjNode())
nova chamada: assertEquals(n30, iter.getAdjNode(), "Era esperado valores iguais, mas  n30 é diferente de " + result2913 + " <iter.getAdjNode()>")
chamada antiga: assertTrue(iter.next())
nova chamada: assertTrue(iter.next(), "Era esperado verdadeiro, mas " + result2914 + " <iter.next()> é falso")
chamada antiga: assertEquals("route 666", iter.getName())
nova chamada: assertEquals("route 666", iter.getName(), "Era esperado valores iguais, mas  'route 666' é diferente de " + result2915 + " <iter.getName()>")
chamada antiga: assertEquals(n10, iter.getAdjNode())
nova chamada: assertEquals(n10, iter.getAdjNode(), "Era esperado valores iguais, mas  n10 é diferente de " + result2916 + " <iter.getAdjNode()>")
chamada antiga: assertTrue(iter.get(carAccessEnc))
nova chamada: assertTrue(iter.get(carAccessEnc), "Era esperado verdadeiro, mas " + result2917 + " <iter.get(carAccessEnc)> é falso")
chamada antiga: assertTrue(iter.getReverse(carAccessEnc))
nova chamada: assertTrue(iter.getReverse(carAccessEnc), "Era esperado verdadeiro, mas " + result2918 + " <iter.getReverse(carAccessEnc)> é falso")
chamada antiga: assertTrue(iter.next())
nova chamada: assertTrue(iter.next(), "Era esperado verdadeiro, mas " + result2919 + " <iter.next()> é falso")
chamada antiga: assertEquals("route 666", iter.getName())
nova chamada: assertEquals("route 666", iter.getName(), "Era esperado valores iguais, mas  'route 666' é diferente de " + result2920 + " <iter.getName()>")
chamada antiga: assertEquals(n20, iter.getAdjNode())
nova chamada: assertEquals(n20, iter.getAdjNode(), "Era esperado valores iguais, mas  n20 é diferente de " + result2921 + " <iter.getAdjNode()>")
chamada antiga: assertEquals("2014-01-02T01:10:14Z", properties.get("datareader.data.date"))
nova chamada: assertEquals("2014-01-02T01:10:14Z", properties.get("datareader.data.date"), "Era esperado valores iguais, mas  '2014-01-02T01:10:14Z' é diferente de " + result2922 + " <properties.get('datareader.data.date')>")
chamada antiga: assertEquals(1, GHUtility.count(carOutExplorer.setBaseNode(n10)))
nova chamada: assertEquals(1, GHUtility.count(carOutExplorer.setBaseNode(n10)), "Era esperado valores iguais, mas  1 é diferente de " + result2923 + " <GHUtility.count(carOutExplorer.setBaseNode(n10))>")
chamada antiga: assertEquals(2, GHUtility.count(carOutExplorer.setBaseNode(n20)))
nova chamada: assertEquals(2, GHUtility.count(carOutExplorer.setBaseNode(n20)), "Era esperado valores iguais, mas  2 é diferente de " + result2924 + " <GHUtility.count(carOutExplorer.setBaseNode(n20))>")
chamada antiga: assertEquals(0, GHUtility.count(carOutExplorer.setBaseNode(n30)))
nova chamada: assertEquals(0, GHUtility.count(carOutExplorer.setBaseNode(n30)), "Era esperado valores iguais, mas  0 é diferente de " + result2925 + " <GHUtility.count(carOutExplorer.setBaseNode(n30))>")
chamada antiga: assertTrue(iter.next())
nova chamada: assertTrue(iter.next(), "Era esperado verdadeiro, mas " + result2926 + " <iter.next()> é falso")
chamada antiga: assertTrue(iter.next())
nova chamada: assertTrue(iter.next(), "Era esperado verdadeiro, mas " + result2927 + " <iter.next()> é falso")
chamada antiga: assertEquals(n30, iter.getAdjNode())
nova chamada: assertEquals(n30, iter.getAdjNode(), "Era esperado valores iguais, mas  n30 é diferente de " + result2928 + " <iter.getAdjNode()>")
chamada antiga: assertTrue(iter.next())
nova chamada: assertTrue(iter.next(), "Era esperado verdadeiro, mas " + result2929 + " <iter.next()> é falso")
chamada antiga: assertEquals(n23, iter.getAdjNode())
nova chamada: assertEquals(n23, iter.getAdjNode(), "Era esperado valores iguais, mas  n23 é diferente de " + result2930 + " <iter.getAdjNode()>")
chamada antiga: assertTrue(iter.get(carAccessEnc))
nova chamada: assertTrue(iter.get(carAccessEnc), "Era esperado verdadeiro, mas " + result2931 + " <iter.get(carAccessEnc)> é falso")
chamada antiga: assertTrue(iter.next())
nova chamada: assertTrue(iter.next(), "Era esperado verdadeiro, mas " + result2932 + " <iter.next()> é falso")
chamada antiga: assertEquals(n22, iter.getAdjNode())
nova chamada: assertEquals(n22, iter.getAdjNode(), "Era esperado valores iguais, mas  n22 é diferente de " + result2933 + " <iter.getAdjNode()>")
chamada antiga: assertTrue(iter.getReverse(carAccessEnc))
nova chamada: assertTrue(iter.getReverse(carAccessEnc), "Era esperado verdadeiro, mas " + result2934 + " <iter.getReverse(carAccessEnc)> é falso")
chamada antiga: assertTrue(iter.next())
nova chamada: assertTrue(iter.next(), "Era esperado verdadeiro, mas " + result2935 + " <iter.next()> é falso")
chamada antiga: assertTrue(iter.getReverse(carAccessEnc))
nova chamada: assertTrue(iter.getReverse(carAccessEnc), "Era esperado verdadeiro, mas " + result2936 + " <iter.getReverse(carAccessEnc)> é falso")
chamada antiga: assertTrue(iter.next())
nova chamada: assertTrue(iter.next(), "Era esperado verdadeiro, mas " + result2937 + " <iter.next()> é falso")
chamada antiga: assertEquals(n30, iter.getAdjNode())
nova chamada: assertEquals(n30, iter.getAdjNode(), "Era esperado valores iguais, mas  n30 é diferente de " + result2938 + " <iter.getAdjNode()>")
chamada antiga: assertTrue(iter.get(carAccessEnc))
nova chamada: assertTrue(iter.get(carAccessEnc), "Era esperado verdadeiro, mas " + result2939 + " <iter.get(carAccessEnc)> é falso")
chamada antiga: assertTrue(iter.next())
nova chamada: assertTrue(iter.next(), "Era esperado verdadeiro, mas " + result2940 + " <iter.next()> é falso")
chamada antiga: assertEquals(n10, iter.getAdjNode())
nova chamada: assertEquals(n10, iter.getAdjNode(), "Era esperado valores iguais, mas  n10 é diferente de " + result2941 + " <iter.getAdjNode()>")
chamada antiga: assertTrue(iter.getReverse(carAccessEnc))
nova chamada: assertTrue(iter.getReverse(carAccessEnc), "Era esperado verdadeiro, mas " + result2942 + " <iter.getReverse(carAccessEnc)> é falso")
chamada antiga: assertEquals(GHUtility.asSet(n40), GHUtility.getNeighbors(carAllExplorer.setBaseNode(n50)))
nova chamada: assertEquals(GHUtility.asSet(n40), GHUtility.getNeighbors(carAllExplorer.setBaseNode(n50)), "Era esperado valores iguais, mas " + result2943 + " <GHUtility.asSet(n40)> é diferente de " + result2944 + " <GHUtility.getNeighbors(carAllExplorer.setBaseNode(n50))>")
chamada antiga: assertEquals(2, graph.getNodes())
nova chamada: assertEquals(2, graph.getNodes(), "Era esperado valores iguais, mas  2 é diferente de " + result2945 + " <graph.getNodes()>")
chamada antiga: assertEquals(1, graph.getEdges())
nova chamada: assertEquals(1, graph.getEdges(), "Era esperado valores iguais, mas  1 é diferente de " + result2946 + " <graph.getEdges()>")
chamada antiga: assertEquals(GHUtility.asSet(n30), GHUtility.getNeighbors(carOutExplorer.setBaseNode(n10)))
nova chamada: assertEquals(GHUtility.asSet(n30), GHUtility.getNeighbors(carOutExplorer.setBaseNode(n10)), "Era esperado valores iguais, mas " + result2947 + " <GHUtility.asSet(n30)> é diferente de " + result2948 + " <GHUtility.getNeighbors(carOutExplorer.setBaseNode(n10))>")
chamada antiga: assertEquals(2, graph.getNodes())
nova chamada: assertEquals(2, graph.getNodes(), "Era esperado valores iguais, mas  2 é diferente de " + result2949 + " <graph.getNodes()>")
chamada antiga: assertEquals(1, graph.getEdges())
nova chamada: assertEquals(1, graph.getEdges(), "Era esperado valores iguais, mas  1 é diferente de " + result2950 + " <graph.getEdges()>")
chamada antiga: assertEquals(0, iter.getBaseNode())
nova chamada: assertEquals(0, iter.getBaseNode(), "Era esperado valores iguais, mas  0 é diferente de " + result2951 + " <iter.getBaseNode()>")
chamada antiga: assertEquals(1, iter.getAdjNode())
nova chamada: assertEquals(1, iter.getAdjNode(), "Era esperado valores iguais, mas  1 é diferente de " + result2952 + " <iter.getAdjNode()>")
chamada antiga: assertEquals(3, graph.getNodes())
nova chamada: assertEquals(3, graph.getNodes(), "Era esperado valores iguais, mas  3 é diferente de " + result2953 + " <graph.getNodes()>")
chamada antiga: assertEquals(3, graph.getEdges())
nova chamada: assertEquals(3, graph.getEdges(), "Era esperado valores iguais, mas  3 é diferente de " + result2954 + " <graph.getEdges()>")
chamada antiga: assertEquals(GHUtility.asSet(n20, n40), GHUtility.getNeighbors(carAllExplorer.setBaseNode(n10)))
nova chamada: assertEquals(GHUtility.asSet(n20, n40), GHUtility.getNeighbors(carAllExplorer.setBaseNode(n10)), "Era esperado valores iguais, mas " + result2955 + " <GHUtility.asSet(n20, n40)> é diferente de " + result2956 + " <GHUtility.getNeighbors(carAllExplorer.setBaseNode(n10))>")
chamada antiga: assertEquals(GHUtility.asSet(), GHUtility.getNeighbors(carOutExplorer.setBaseNode(n30)))
nova chamada: assertEquals(GHUtility.asSet(), GHUtility.getNeighbors(carOutExplorer.setBaseNode(n30)), "Era esperado valores iguais, mas " + result2957 + " <GHUtility.asSet()> é diferente de " + result2958 + " <GHUtility.getNeighbors(carOutExplorer.setBaseNode(n30))>")
chamada antiga: assertEquals(GHUtility.asSet(n10, n30, n40), GHUtility.getNeighbors(carAllExplorer.setBaseNode(n20)))
nova chamada: assertEquals(GHUtility.asSet(n10, n30, n40), GHUtility.getNeighbors(carAllExplorer.setBaseNode(n20)), "Era esperado valores iguais, mas " + result2959 + " <GHUtility.asSet(n10, n30, n40)> é diferente de " + result2960 + " <GHUtility.getNeighbors(carAllExplorer.setBaseNode(n20))>")
chamada antiga: assertEquals(GHUtility.asSet(n30, n40), GHUtility.getNeighbors(carOutExplorer.setBaseNode(n20)))
nova chamada: assertEquals(GHUtility.asSet(n30, n40), GHUtility.getNeighbors(carOutExplorer.setBaseNode(n20)), "Era esperado valores iguais, mas " + result2961 + " <GHUtility.asSet(n30, n40)> é diferente de " + result2962 + " <GHUtility.getNeighbors(carOutExplorer.setBaseNode(n20))>")
chamada antiga: assertEquals(GHUtility.asSet(n20, n50), GHUtility.getNeighbors(footOutExplorer.setBaseNode(n10)))
nova chamada: assertEquals(GHUtility.asSet(n20, n50), GHUtility.getNeighbors(footOutExplorer.setBaseNode(n10)), "Era esperado valores iguais, mas " + result2963 + " <GHUtility.asSet(n20, n50)> é diferente de " + result2964 + " <GHUtility.getNeighbors(footOutExplorer.setBaseNode(n10))>")
chamada antiga: assertEquals(GHUtility.asSet(n20, n50), GHUtility.getNeighbors(footOutExplorer.setBaseNode(n30)))
nova chamada: assertEquals(GHUtility.asSet(n20, n50), GHUtility.getNeighbors(footOutExplorer.setBaseNode(n30)), "Era esperado valores iguais, mas " + result2965 + " <GHUtility.asSet(n20, n50)> é diferente de " + result2966 + " <GHUtility.getNeighbors(footOutExplorer.setBaseNode(n30))>")
chamada antiga: assertEquals(GHUtility.asSet(n10, n30), GHUtility.getNeighbors(footOutExplorer.setBaseNode(n20)))
nova chamada: assertEquals(GHUtility.asSet(n10, n30), GHUtility.getNeighbors(footOutExplorer.setBaseNode(n20)), "Era esperado valores iguais, mas " + result2967 + " <GHUtility.asSet(n10, n30)> é diferente de " + result2968 + " <GHUtility.getNeighbors(footOutExplorer.setBaseNode(n20))>")
chamada antiga: assertTrue(exception.getCause().getMessage().contains("Invalid OSM NODE Id: -10;"))
nova chamada: assertTrue(exception.getCause().getMessage().contains("Invalid OSM NODE Id: -10;"), "Era esperado verdadeiro, mas " + result2969 + " <exception.getCause().getMessage().contains('Invalid OSM NODE Id: -10;')> é falso")
chamada antiga: assertEquals(7, graph.getNodes())
nova chamada: assertEquals(7, graph.getNodes(), "Era esperado valores iguais, mas  7 é diferente de " + result2970 + " <graph.getNodes()>")
chamada antiga: assertEquals(7, graph.getEdges())
nova chamada: assertEquals(7, graph.getEdges(), "Era esperado valores iguais, mas  7 é diferente de " + result2971 + " <graph.getEdges()>")
chamada antiga: assertNotEquals(n20, new20)
nova chamada: assertNotEquals(n20, new20, "Era esperado valores diferentes, mas  n20 é igual a " + " new20")
chamada antiga: assertEquals(n20, findID(hopper.getLocationIndex(), 52, 9.4))
nova chamada: assertEquals(n20, findID(hopper.getLocationIndex(), 52, 9.4), "Era esperado valores iguais, mas  n20 é diferente de " + result2972 + " <findID(hopper.getLocationIndex(), 52, 9.4)>")
chamada antiga: assertEquals(GHUtility.asSet(n20, n30), GHUtility.getNeighbors(carOutExplorer.setBaseNode(n10)))
nova chamada: assertEquals(GHUtility.asSet(n20, n30), GHUtility.getNeighbors(carOutExplorer.setBaseNode(n10)), "Era esperado valores iguais, mas " + result2973 + " <GHUtility.asSet(n20, n30)> é diferente de " + result2974 + " <GHUtility.getNeighbors(carOutExplorer.setBaseNode(n10))>")
chamada antiga: assertEquals(GHUtility.asSet(new20, n10, n50), GHUtility.getNeighbors(carOutExplorer.setBaseNode(n30)))
nova chamada: assertEquals(GHUtility.asSet(new20, n10, n50), GHUtility.getNeighbors(carOutExplorer.setBaseNode(n30)), "Era esperado valores iguais, mas " + result2975 + " <GHUtility.asSet(new20, n10, n50)> é diferente de " + result2976 + " <GHUtility.getNeighbors(carOutExplorer.setBaseNode(n30))>")
chamada antiga: assertTrue(iter.next())
nova chamada: assertTrue(iter.next(), "Era esperado verdadeiro, mas " + result2977 + " <iter.next()> é falso")
chamada antiga: assertEquals(n10, iter.getAdjNode())
nova chamada: assertEquals(n10, iter.getAdjNode(), "Era esperado valores iguais, mas  n10 é diferente de " + result2978 + " <iter.getAdjNode()>")
chamada antiga: assertTrue(iter.next())
nova chamada: assertTrue(iter.next(), "Era esperado verdadeiro, mas " + result2979 + " <iter.next()> é falso")
chamada antiga: assertEquals(n30, iter.getAdjNode())
nova chamada: assertEquals(n30, iter.getAdjNode(), "Era esperado valores iguais, mas  n30 é diferente de " + result2980 + " <iter.getAdjNode()>")
chamada antiga: assertEquals(7 + 6, graph.getEdges())
nova chamada: assertEquals(7 + 6, graph.getEdges(), "Era esperado valores iguais, mas  7 + 6 é diferente de " + result2981 + " <graph.getEdges()>")
chamada antiga: assertEquals(5, loops)
nova chamada: assertEquals(5, loops, "Era esperado valores iguais, mas  5 é diferente de " + " loops")
chamada antiga: assertEquals(5, graph.getEdges())
nova chamada: assertEquals(5, graph.getEdges(), "Era esperado valores iguais, mas  5 é diferente de " + result2982 + " <graph.getEdges()>")
chamada antiga: assertEquals(2, blocked)
nova chamada: assertEquals(2, blocked, "Era esperado valores iguais, mas  2 é diferente de " + " blocked")
chamada antiga: assertEquals(3, notBlocked)
nova chamada: assertEquals(3, notBlocked, "Era esperado valores iguais, mas  3 é diferente de " + " notBlocked")
chamada antiga: assertEquals(4, graph.getNodes())
nova chamada: assertEquals(4, graph.getNodes(), "Era esperado valores iguais, mas  4 é diferente de " + result2983 + " <graph.getNodes()>")
chamada antiga: assertEquals(4, iter.length())
nova chamada: assertEquals(4, iter.length(), "Era esperado valores iguais, mas  4 é diferente de " + result2984 + " <iter.length()>")
chamada antiga: assertEquals(4, GHUtility.count(graph.createEdgeExplorer().setBaseNode(nodeB)))
nova chamada: assertEquals(4, GHUtility.count(graph.createEdgeExplorer().setBaseNode(nodeB)), "Era esperado valores iguais, mas  4 é diferente de " + result2985 + " <GHUtility.count(graph.createEdgeExplorer().setBaseNode(nodeB))>")
chamada antiga: assertEquals(7, graph.getNodes())
nova chamada: assertEquals(7, graph.getNodes(), "Era esperado valores iguais, mas  7 é diferente de " + result2986 + " <graph.getNodes()>")
chamada antiga: assertEquals(7, graph.getEdges())
nova chamada: assertEquals(7, graph.getEdges(), "Era esperado valores iguais, mas  7 é diferente de " + result2987 + " <graph.getEdges()>")
chamada antiga: assertEquals(GHUtility.asSet(n50), GHUtility.getNeighbors(carOutExplorer.setBaseNode(n60)))
nova chamada: assertEquals(GHUtility.asSet(n50), GHUtility.getNeighbors(carOutExplorer.setBaseNode(n60)), "Era esperado valores iguais, mas " + result2988 + " <GHUtility.asSet(n50)> é diferente de " + result2989 + " <GHUtility.getNeighbors(carOutExplorer.setBaseNode(n60))>")
chamada antiga: assertTrue(iter.next())
nova chamada: assertTrue(iter.next(), "Era esperado verdadeiro, mas " + result2990 + " <iter.next()> é falso")
chamada antiga: assertEquals(n50, iter.getAdjNode())
nova chamada: assertEquals(n50, iter.getAdjNode(), "Era esperado valores iguais, mas  n50 é diferente de " + result2991 + " <iter.getAdjNode()>")
chamada antiga: assertTrue(GHUtility.getNeighbors(carOutExplorer.setBaseNode(n30)).contains(n50))
nova chamada: assertTrue(GHUtility.getNeighbors(carOutExplorer.setBaseNode(n30)).contains(n50), "Era esperado verdadeiro, mas " + result2992 + " <GHUtility.getNeighbors(carOutExplorer.setBaseNode(n30)).contains(n50)> é falso")
chamada antiga: assertEquals(GHUtility.asSet(n30, n80, n60), GHUtility.getNeighbors(carOutExplorer.setBaseNode(n50)))
nova chamada: assertEquals(GHUtility.asSet(n30, n80, n60), GHUtility.getNeighbors(carOutExplorer.setBaseNode(n50)), "Era esperado valores iguais, mas " + result2993 + " <GHUtility.asSet(n30, n80, n60)> é diferente de " + result2994 + " <GHUtility.getNeighbors(carOutExplorer.setBaseNode(n50))>")
chamada antiga: assertEquals(before, flags)
nova chamada: assertEquals(before, flags, "Era esperado valores iguais, mas  before é diferente de " + " flags")
chamada antiga: assertNotEquals(before, flags)
nova chamada: assertNotEquals(before, flags, "Era esperado valores diferentes, mas  before é igual a " + " flags")
chamada antiga: assertEquals(15, graph.getNodes())
nova chamada: assertEquals(15, graph.getNodes(), "Era esperado valores iguais, mas  15 é diferente de " + result2995 + " <graph.getNodes()>")
chamada antiga: assertNotNull(tcStorage)
nova chamada: assertNotNull(tcStorage, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(tcStorage.get(carTCEnc, edge2_3, n3, edge3_8) > 0)
nova chamada: assertTrue(tcStorage.get(carTCEnc, edge2_3, n3, edge3_8) > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(tcStorage.get(carTCEnc, edge4_3, n3, edge3_8) > 0)
nova chamada: assertTrue(tcStorage.get(carTCEnc, edge4_3, n3, edge3_8) > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(tcStorage.get(carTCEnc, edge2_3, n3, edge3_8) > 0)
nova chamada: assertTrue(tcStorage.get(carTCEnc, edge2_3, n3, edge3_8) > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(tcStorage.get(carTCEnc, edge2_3, n3, edge3_4) == 0)
nova chamada: assertTrue(tcStorage.get(carTCEnc, edge2_3, n3, edge3_4) == 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(tcStorage.get(carTCEnc, edge2_3, n3, edge3_2) == 0)
nova chamada: assertTrue(tcStorage.get(carTCEnc, edge2_3, n3, edge3_2) == 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(tcStorage.get(carTCEnc, edge2_3, n3, edge3_4) == 0)
nova chamada: assertTrue(tcStorage.get(carTCEnc, edge2_3, n3, edge3_4) == 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(tcStorage.get(carTCEnc, edge4_3, n3, edge3_2) == 0)
nova chamada: assertTrue(tcStorage.get(carTCEnc, edge4_3, n3, edge3_2) == 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(tcStorage.get(carTCEnc, edge8_3, n3, edge3_2) == 0)
nova chamada: assertTrue(tcStorage.get(carTCEnc, edge8_3, n3, edge3_2) == 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(tcStorage.get(carTCEnc, edge1_6, n1, edge1_6) > 0)
nova chamada: assertTrue(tcStorage.get(carTCEnc, edge1_6, n1, edge1_6) > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(tcStorage.get(carTCEnc, edge1_6, n6, edge1_6) == 0)
nova chamada: assertTrue(tcStorage.get(carTCEnc, edge1_6, n6, edge1_6) == 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(tcStorage.get(carTCEnc, edge4_5, n5, edge5_6) == 0)
nova chamada: assertTrue(tcStorage.get(carTCEnc, edge4_5, n5, edge5_6) == 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(tcStorage.get(carTCEnc, edge4_5, n5, edge5_1) > 0)
nova chamada: assertTrue(tcStorage.get(carTCEnc, edge4_5, n5, edge5_1) > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(tcStorage.get(bikeTCEnc, edge4_5, n5, edge5_6) == 0)
nova chamada: assertTrue(tcStorage.get(bikeTCEnc, edge4_5, n5, edge5_6) == 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(tcStorage.get(carTCEnc, edge11_14, n11, edge10_11) == 0)
nova chamada: assertTrue(tcStorage.get(carTCEnc, edge11_14, n11, edge10_11) == 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(tcStorage.get(bikeTCEnc, edge11_14, n11, edge10_11) == 0)
nova chamada: assertTrue(tcStorage.get(bikeTCEnc, edge11_14, n11, edge10_11) == 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(tcStorage.get(carTCEnc, edge10_11, n11, edge11_14) == 0)
nova chamada: assertTrue(tcStorage.get(carTCEnc, edge10_11, n11, edge11_14) == 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(tcStorage.get(bikeTCEnc, edge10_11, n11, edge11_14) > 0)
nova chamada: assertTrue(tcStorage.get(bikeTCEnc, edge10_11, n11, edge11_14) > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(2, osmRel.size())
nova chamada: assertEquals(2, osmRel.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2996 + " <osmRel.size()>")
chamada antiga: assertEquals(1, osmRel.get(0).getOsmIdFrom())
nova chamada: assertEquals(1, osmRel.get(0).getOsmIdFrom(), "Era esperado valores iguais, mas  1 é diferente de " + result2997 + " <osmRel.get(0).getOsmIdFrom()>")
chamada antiga: assertEquals(4, osmRel.get(0).getOsmIdTo())
nova chamada: assertEquals(4, osmRel.get(0).getOsmIdTo(), "Era esperado valores iguais, mas  4 é diferente de " + result2998 + " <osmRel.get(0).getOsmIdTo()>")
chamada antiga: assertEquals(OSMTurnRelation.Type.NOT, osmRel.get(0).getRestriction())
nova chamada: assertEquals(OSMTurnRelation.Type.NOT, osmRel.get(0).getRestriction(), "Era esperado valores iguais, mas  OSMTurnRelation.Type.NOT é diferente de " + result2999 + " <osmRel.get(0).getRestriction()>")
chamada antiga: assertEquals(2, osmRel.get(1).getOsmIdFrom())
nova chamada: assertEquals(2, osmRel.get(1).getOsmIdFrom(), "Era esperado valores iguais, mas  2 é diferente de " + result3000 + " <osmRel.get(1).getOsmIdFrom()>")
chamada antiga: assertEquals(4, osmRel.get(1).getOsmIdTo())
nova chamada: assertEquals(4, osmRel.get(1).getOsmIdTo(), "Era esperado valores iguais, mas  4 é diferente de " + result3001 + " <osmRel.get(1).getOsmIdTo()>")
chamada antiga: assertEquals(OSMTurnRelation.Type.NOT, osmRel.get(1).getRestriction())
nova chamada: assertEquals(OSMTurnRelation.Type.NOT, osmRel.get(1).getRestriction(), "Era esperado valores iguais, mas  OSMTurnRelation.Type.NOT é diferente de " + result3002 + " <osmRel.get(1).getRestriction()>")
chamada antiga: assertEquals(5, graph.getNodes())
nova chamada: assertEquals(5, graph.getNodes(), "Era esperado valores iguais, mas  5 é diferente de " + result3003 + " <graph.getNodes()>")
chamada antiga: assertEquals(Helper.createPointList3D(49.5001, 11.501, 426, 49.5002, 11.5015, 441, 49.5011, 11.502, 410.0), edge.fetchWayGeometry(FetchMode.ALL))
nova chamada: assertEquals(Helper.createPointList3D(49.5001, 11.501, 426, 49.5002, 11.5015, 441, 49.5011, 11.502, 410.0), edge.fetchWayGeometry(FetchMode.ALL), "Era esperado valores iguais, mas " + result3004 + " <Helper.createPointList3D(49.5001, 11.501, 426, 49.5002, 11.5015, 441, 49.5011, 11.502, 410.0)> é diferente de " + result3005 + " <edge.fetchWayGeometry(FetchMode.ALL)>")
chamada antiga: assertEquals(Helper.createPointList3D(49.501, 11.5001, 383.0, 49.5001, 11.501, 426.0), edge.fetchWayGeometry(FetchMode.ALL))
nova chamada: assertEquals(Helper.createPointList3D(49.501, 11.5001, 383.0, 49.5001, 11.501, 426.0), edge.fetchWayGeometry(FetchMode.ALL), "Era esperado valores iguais, mas " + result3006 + " <Helper.createPointList3D(49.501, 11.5001, 383.0, 49.5001, 11.501, 426.0)> é diferente de " + result3007 + " <edge.fetchWayGeometry(FetchMode.ALL)>")
chamada antiga: assertTrue(Double.isInfinite(tcStorage.get(carTCEnc, edge1, 0, edge2)))
nova chamada: assertTrue(Double.isInfinite(tcStorage.get(carTCEnc, edge1, 0, edge2)), "Era esperado verdadeiro, mas " + result3008 + " <Double.isInfinite(tcStorage.get(carTCEnc, edge1, 0, edge2))> é falso")
chamada antiga: assertTrue(Double.isInfinite(tcStorage.get(truckTCEnc, edge1, 0, edge2)))
nova chamada: assertTrue(Double.isInfinite(tcStorage.get(truckTCEnc, edge1, 0, edge2)), "Era esperado verdadeiro, mas " + result3009 + " <Double.isInfinite(tcStorage.get(truckTCEnc, edge1, 0, edge2))> é falso")
chamada antiga: assertTrue(Double.isInfinite(tcStorage.get(bikeTCEnc, edge1, 0, edge2)))
nova chamada: assertTrue(Double.isInfinite(tcStorage.get(bikeTCEnc, edge1, 0, edge2)), "Era esperado verdadeiro, mas " + result3010 + " <Double.isInfinite(tcStorage.get(bikeTCEnc, edge1, 0, edge2))> é falso")
chamada antiga: assertTrue(Double.isInfinite(tcStorage.get(truckTCEnc, edge1, 0, edge2)))
nova chamada: assertTrue(Double.isInfinite(tcStorage.get(truckTCEnc, edge1, 0, edge2)), "Era esperado verdadeiro, mas " + result3011 + " <Double.isInfinite(tcStorage.get(truckTCEnc, edge1, 0, edge2))> é falso")
chamada antiga: assertEquals(8, graph.getNodes())
nova chamada: assertEquals(8, graph.getNodes(), "Era esperado valores iguais, mas  8 é diferente de " + result3012 + " <graph.getNodes()>")
chamada antiga: assertNotNull(tcStorage)
nova chamada: assertNotNull(tcStorage, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(tcStorage.get(carTCEnc, edge2_3, n3, edge3_8) > 0)
nova chamada: assertTrue(tcStorage.get(carTCEnc, edge2_3, n3, edge3_8) > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(tcStorage.get(carTCEnc, edge4_3, n3, edge3_8) > 0)
nova chamada: assertTrue(tcStorage.get(carTCEnc, edge4_3, n3, edge3_8) > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(tcStorage.get(carTCEnc, edge1_6, n1, edge1_6) > 0)
nova chamada: assertTrue(tcStorage.get(carTCEnc, edge1_6, n1, edge1_6) > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(tcStorage.get(carTCEnc, edge4_5, n5, edge5_1) > 0)
nova chamada: assertTrue(tcStorage.get(carTCEnc, edge4_5, n5, edge5_1) > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(5, graph.getNodes())
nova chamada: assertEquals(5, graph.getNodes(), "Era esperado valores iguais, mas  5 é diferente de " + result3013 + " <graph.getNodes()>")
chamada antiga: assertNotNull(tcStorage)
nova chamada: assertNotNull(tcStorage, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(tcStorage.get(carTCEnc, edge1_2, n2, edge2_3) > 0)
nova chamada: assertTrue(tcStorage.get(carTCEnc, edge1_2, n2, edge2_3) > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(Double.isInfinite(tcStorage.get(carTCEnc, edge3_4, n4, edge4_5)))
nova chamada: assertTrue(Double.isInfinite(tcStorage.get(carTCEnc, edge3_4, n4, edge4_5)), "Era esperado verdadeiro, mas " + result3014 + " <Double.isInfinite(tcStorage.get(carTCEnc, edge3_4, n4, edge4_5))> é falso")
chamada antiga: assertTrue(Double.isInfinite(tcStorage.get(carTCEnc, edge5_1, n1, edge1_2)))
nova chamada: assertTrue(Double.isInfinite(tcStorage.get(carTCEnc, edge5_1, n1, edge1_2)), "Era esperado verdadeiro, mas " + result3015 + " <Double.isInfinite(tcStorage.get(carTCEnc, edge5_1, n1, edge1_2))> é falso")
chamada antiga: assertTrue(iter.next())
nova chamada: assertTrue(iter.next(), "Era esperado verdadeiro, mas " + result3016 + " <iter.next()> é falso")
chamada antiga: assertEquals("straße 123, B 122", iter.getName())
nova chamada: assertEquals("straße 123, B 122", iter.getName(), "Era esperado valores iguais, mas  'straße 123, B 122' é diferente de " + result3017 + " <iter.getName()>")
chamada antiga: assertTrue(iter.next())
nova chamada: assertTrue(iter.next(), "Era esperado verdadeiro, mas " + result3018 + " <iter.next()> é falso")
chamada antiga: assertTrue(iter.next())
nova chamada: assertTrue(iter.next(), "Era esperado verdadeiro, mas " + result3019 + " <iter.next()> é falso")
chamada antiga: assertEquals("διαδρομή 666", iter.getName())
nova chamada: assertEquals("διαδρομή 666", iter.getName(), "Era esperado valores iguais, mas  'διαδρομή 666' é diferente de " + result3020 + " <iter.getName()>")
chamada antiga: assertEquals("2014-01-02T00:10:14Z", properties.get("datareader.data.date"))
nova chamada: assertEquals("2014-01-02T00:10:14Z", properties.get("datareader.data.date"), "Era esperado valores iguais, mas  '2014-01-02T00:10:14Z' é diferente de " + result3021 + " <properties.get('datareader.data.date')>")
chamada antiga: assertTrue(snap.isValid())
nova chamada: assertTrue(snap.isValid(), "Era esperado verdadeiro, mas " + result3022 + " <snap.isValid()> é falso")
chamada antiga: assertTrue(snap.isValid())
nova chamada: assertTrue(snap.isValid(), "Era esperado verdadeiro, mas " + result3023 + " <snap.isValid()> é falso")
chamada antiga: assertEquals(3, list.size())
nova chamada: assertEquals(3, list.size(), "Era esperado valores iguais, mas  3 é diferente de " + result3024 + " <list.size()>")
chamada antiga: assertEquals(RoadClass.MOTORWAY.toString(), list.get(0).getValue())
nova chamada: assertEquals(RoadClass.MOTORWAY.toString(), list.get(0).getValue(), "Era esperado valores iguais, mas " + result3025 + " <RoadClass.MOTORWAY.toString()> é diferente de " + result3026 + " <list.get(0).getValue()>")
chamada antiga: assertEquals("berlin", edgeBerlin.getName())
nova chamada: assertEquals("berlin", edgeBerlin.getName(), "Era esperado valores iguais, mas  'berlin' é diferente de " + result3027 + " <edgeBerlin.getName()>")
chamada antiga: assertEquals("paris", edgeParis.getName())
nova chamada: assertEquals("paris", edgeParis.getName(), "Era esperado valores iguais, mas  'paris' é diferente de " + result3028 + " <edgeParis.getName()>")
chamada antiga: assertEquals(RoadAccess.DESTINATION, edgeBerlin.get(roadAccessEnc))
nova chamada: assertEquals(RoadAccess.DESTINATION, edgeBerlin.get(roadAccessEnc), "Era esperado valores iguais, mas  RoadAccess.DESTINATION é diferente de " + result3029 + " <edgeBerlin.get(roadAccessEnc)>")
chamada antiga: assertEquals(RoadAccess.YES, edgeParis.get(roadAccessEnc))
nova chamada: assertEquals(RoadAccess.YES, edgeParis.get(roadAccessEnc), "Era esperado valores iguais, mas  RoadAccess.YES é diferente de " + result3030 + " <edgeParis.get(roadAccessEnc)>")
chamada antiga: assertEquals(1, graph.getEdges())
nova chamada: assertEquals(1, graph.getEdges(), "Era esperado valores iguais, mas  1 é diferente de " + result3031 + " <graph.getEdges()>")
chamada antiga: assertEquals(Country.BGR, iter.get(countryEnc))
nova chamada: assertEquals(Country.BGR, iter.get(countryEnc), "Era esperado valores iguais, mas  Country.BGR é diferente de " + result3032 + " <iter.get(countryEnc)>")
chamada antiga: assertEquals("B8, B12", OSMReader.fixWayName("B8;B12"))
nova chamada: assertEquals("B8, B12", OSMReader.fixWayName("B8;B12"), "Era esperado valores iguais, mas  'B8, B12' é diferente de " + result3033 + " <OSMReader.fixWayName('B8;B12')>")
chamada antiga: assertEquals("B8, B12", OSMReader.fixWayName("B8; B12"))
nova chamada: assertEquals("B8, B12", OSMReader.fixWayName("B8; B12"), "Era esperado valores iguais, mas  'B8, B12' é diferente de " + result3034 + " <OSMReader.fixWayName('B8; B12')>")
chamada antiga: assertTrue(instance.hasTag("surface", "now", "something"))
nova chamada: assertTrue(instance.hasTag("surface", "now", "something"), "Era esperado verdadeiro, mas " + result3035 + " <instance.hasTag('surface', 'now', 'something')> é falso")
chamada antiga: assertTrue(instance.hasTag("test", "xy"))
nova chamada: assertTrue(instance.hasTag("test", "xy"), "Era esperado verdadeiro, mas " + result3036 + " <instance.hasTag('test', 'xy')> é falso")
chamada antiga: assertTrue(exception.getMessage().contains("Invalid OSM WAY Id: -1;"))
nova chamada: assertTrue(exception.getMessage().contains("Invalid OSM WAY Id: -1;"), "Era esperado verdadeiro, mas " + result3037 + " <exception.getMessage().contains('Invalid OSM WAY Id: -1;')> é falso")
chamada antiga: assertEquals("my_car", profile.getName())
nova chamada: assertEquals("my_car", profile.getName(), "Era esperado valores iguais, mas  'my_car' é diferente de " + result3038 + " <profile.getName()>")
chamada antiga: assertEquals("car", profile.getVehicle())
nova chamada: assertEquals("car", profile.getVehicle(), "Era esperado valores iguais, mas  'car' é diferente de " + result3039 + " <profile.getVehicle()>")
chamada antiga: assertEquals("fastest", profile.getWeighting())
nova chamada: assertEquals("fastest", profile.getWeighting(), "Era esperado valores iguais, mas  'fastest' é diferente de " + result3040 + " <profile.getWeighting()>")
chamada antiga: assertTrue(profile.isTurnCosts())
nova chamada: assertTrue(profile.isTurnCosts(), "Era esperado verdadeiro, mas " + result3041 + " <profile.isTurnCosts()> é falso")
chamada antiga: assertEquals(2, profile.getHints().toMap().size())
nova chamada: assertEquals(2, profile.getHints().toMap().size(), "Era esperado valores iguais, mas  2 é diferente de " + result3042 + " <profile.getHints().toMap().size()>")
chamada antiga: assertEquals("bar", profile.getHints().getString("foo", ""))
nova chamada: assertEquals("bar", profile.getHints().getString("foo", ""), "Era esperado valores iguais, mas  'bar' é diferente de " + result3043 + " <profile.getHints().getString('foo', '')>")
chamada antiga: assertEquals("buzz", profile.getHints().getString("baz", ""))
nova chamada: assertEquals("buzz", profile.getHints().getString("baz", ""), "Era esperado valores iguais, mas  'buzz' é diferente de " + result3044 + " <profile.getHints().getString('baz', '')>")
chamada antiga: assertEquals(expectedVisitedNodes, rsp.getHints().getLong("visited_nodes.sum", 0))
nova chamada: assertEquals(expectedVisitedNodes, rsp.getHints().getLong("visited_nodes.sum", 0), "Era esperado valores iguais, mas  expectedVisitedNodes é diferente de " + result3045 + " <rsp.getHints().getLong('visited_nodes.sum', 0)>")
chamada antiga: assertEquals(91, res.getPoints().size())
nova chamada: assertEquals(91, res.getPoints().size(), "Era esperado valores iguais, mas  91 é diferente de " + result3046 + " <res.getPoints().size()>")
chamada antiga: assertEquals(706, rsp.getHints().getLong("visited_nodes.sum", 0))
nova chamada: assertEquals(706, rsp.getHints().getLong("visited_nodes.sum", 0), "Era esperado valores iguais, mas  706 é diferente de " + result3047 + " <rsp.getHints().getLong('visited_nodes.sum', 0)>")
chamada antiga: assertEquals(85, res.getPoints().size())
nova chamada: assertEquals(85, res.getPoints().size(), "Era esperado valores iguais, mas  85 é diferente de " + result3048 + " <res.getPoints().size()>")
chamada antiga: assertEquals(16, il.size())
nova chamada: assertEquals(16, il.size(), "Era esperado valores iguais, mas  16 é diferente de " + result3049 + " <il.size()>")
chamada antiga: assertEquals("continue onto Avenue des Guelfes", il.get(0).getTurnDescription(tr))
nova chamada: assertEquals("continue onto Avenue des Guelfes", il.get(0).getTurnDescription(tr), "Era esperado valores iguais, mas  'continue onto Avenue des Guelfes' é diferente de " + result3050 + " <il.get(0).getTurnDescription(tr)>")
chamada antiga: assertEquals("turn slight left onto Avenue des Papalins", il.get(1).getTurnDescription(tr))
nova chamada: assertEquals("turn slight left onto Avenue des Papalins", il.get(1).getTurnDescription(tr), "Era esperado valores iguais, mas  'turn slight left onto Avenue des Papalins' é diferente de " + result3051 + " <il.get(1).getTurnDescription(tr)>")
chamada antiga: assertEquals("turn sharp right onto Quai Jean-Charles Rey", il.get(4).getTurnDescription(tr))
nova chamada: assertEquals("turn sharp right onto Quai Jean-Charles Rey", il.get(4).getTurnDescription(tr), "Era esperado valores iguais, mas  'turn sharp right onto Quai Jean-Charles Rey' é diferente de " + result3052 + " <il.get(4).getTurnDescription(tr)>")
chamada antiga: assertEquals("turn left", il.get(5).getTurnDescription(tr))
nova chamada: assertEquals("turn left", il.get(5).getTurnDescription(tr), "Era esperado valores iguais, mas  'turn left' é diferente de " + result3053 + " <il.get(5).getTurnDescription(tr)>")
chamada antiga: assertEquals("turn right onto Avenue Albert II", il.get(6).getTurnDescription(tr))
nova chamada: assertEquals("turn right onto Avenue Albert II", il.get(6).getTurnDescription(tr), "Era esperado valores iguais, mas  'turn right onto Avenue Albert II' é diferente de " + result3054 + " <il.get(6).getTurnDescription(tr)>")
chamada antiga: assertEquals(7, il.get(0).getTime() / 1000)
nova chamada: assertEquals(7, il.get(0).getTime() / 1000, "Era esperado valores iguais, mas  7 é diferente de " + " il.get(0).getTime() / 1000")
chamada antiga: assertEquals(69, il.get(1).getTime() / 1000)
nova chamada: assertEquals(69, il.get(1).getTime() / 1000, "Era esperado valores iguais, mas  69 é diferente de " + " il.get(1).getTime() / 1000")
chamada antiga: assertEquals(128, il.get(2).getTime() / 1000)
nova chamada: assertEquals(128, il.get(2).getTime() / 1000, "Era esperado valores iguais, mas  128 é diferente de " + " il.get(2).getTime() / 1000")
chamada antiga: assertEquals(9, il.get(3).getTime() / 1000)
nova chamada: assertEquals(9, il.get(3).getTime() / 1000, "Era esperado valores iguais, mas  9 é diferente de " + " il.get(3).getTime() / 1000")
chamada antiga: assertEquals(7, il.get(4).getTime() / 1000)
nova chamada: assertEquals(7, il.get(4).getTime() / 1000, "Era esperado valores iguais, mas  7 é diferente de " + " il.get(4).getTime() / 1000")
chamada antiga: assertEquals(30, il.get(5).getTime() / 1000)
nova chamada: assertEquals(30, il.get(5).getTime() / 1000, "Era esperado valores iguais, mas  30 é diferente de " + " il.get(5).getTime() / 1000")
chamada antiga: assertEquals(85, res.getPoints().size())
nova chamada: assertEquals(85, res.getPoints().size(), "Era esperado valores iguais, mas  85 é diferente de " + result3055 + " <res.getPoints().size()>")
chamada antiga: assertEquals(10, routeRsp.getBest().getInstructions().size())
nova chamada: assertEquals(10, routeRsp.getBest().getInstructions().size(), "Era esperado valores iguais, mas  10 é diferente de " + result3056 + " <routeRsp.getBest().getInstructions().size()>")
chamada antiga: assertEquals(43, routeRsp.getBest().getPoints().size())
nova chamada: assertEquals(43, routeRsp.getBest().getPoints().size(), "Era esperado valores iguais, mas  43 é diferente de " + result3057 + " <routeRsp.getBest().getPoints().size()>")
chamada antiga: assertEquals(10, routeRsp.getBest().getInstructions().size())
nova chamada: assertEquals(10, routeRsp.getBest().getInstructions().size(), "Era esperado valores iguais, mas  10 é diferente de " + result3058 + " <routeRsp.getBest().getInstructions().size()>")
chamada antiga: assertEquals(39, routeRsp.getBest().getPoints().size())
nova chamada: assertEquals(39, routeRsp.getBest().getPoints().size(), "Era esperado valores iguais, mas  39 é diferente de " + result3059 + " <routeRsp.getBest().getPoints().size()>")
chamada antiga: assertEquals(41, routeRsp.getBest().getPoints().size())
nova chamada: assertEquals(41, routeRsp.getBest().getPoints().size(), "Era esperado valores iguais, mas  41 é diferente de " + result3060 + " <routeRsp.getBest().getPoints().size()>")
chamada antiga: assertEquals(4, il.size())
nova chamada: assertEquals(4, il.size(), "Era esperado valores iguais, mas  4 é diferente de " + result3061 + " <il.size()>")
chamada antiga: assertEquals("make a U-turn onto Avenue Princesse Grace", il.get(1).getTurnDescription(tr))
nova chamada: assertEquals("make a U-turn onto Avenue Princesse Grace", il.get(1).getTurnDescription(tr), "Era esperado valores iguais, mas  'make a U-turn onto Avenue Princesse Grace' é diferente de " + result3062 + " <il.get(1).getTurnDescription(tr)>")
chamada antiga: assertEquals("make a U-turn onto Avenue Princesse Grace", il.get(2).getTurnDescription(tr))
nova chamada: assertEquals("make a U-turn onto Avenue Princesse Grace", il.get(2).getTurnDescription(tr), "Era esperado valores iguais, mas  'make a U-turn onto Avenue Princesse Grace' é diferente de " + result3063 + " <il.get(2).getTurnDescription(tr)>")
chamada antiga: assertNotEquals(sum, 0)
nova chamada: assertNotEquals(sum, 0, "Era esperado valores diferentes, mas  sum é igual a " + " 0")
chamada antiga: assertEquals(115, bestPath.getPoints().size())
nova chamada: assertEquals(115, bestPath.getPoints().size(), "Era esperado valores iguais, mas  115 é diferente de " + result3064 + " <bestPath.getPoints().size()>")
chamada antiga: assertEquals(2, rsp.getAll().size())
nova chamada: assertEquals(2, rsp.getAll().size(), "Era esperado valores iguais, mas  2 é diferente de " + result3065 + " <rsp.getAll().size()>")
chamada antiga: assertEquals(1310, rsp.getAll().get(0).getTime() / 1000)
nova chamada: assertEquals(1310, rsp.getAll().get(0).getTime() / 1000, "Era esperado valores iguais, mas  1310 é diferente de " + " rsp.getAll().get(0).getTime() / 1000")
chamada antiga: assertEquals(1431, rsp.getAll().get(1).getTime() / 1000)
nova chamada: assertEquals(1431, rsp.getAll().get(1).getTime() / 1000, "Era esperado valores iguais, mas  1431 é diferente de " + " rsp.getAll().get(1).getTime() / 1000")
chamada antiga: assertEquals(3, rsp.getAll().size())
nova chamada: assertEquals(3, rsp.getAll().size(), "Era esperado valores iguais, mas  3 é diferente de " + result3066 + " <rsp.getAll().size()>")
chamada antiga: assertEquals(1310, rsp.getAll().get(0).getTime() / 1000)
nova chamada: assertEquals(1310, rsp.getAll().get(0).getTime() / 1000, "Era esperado valores iguais, mas  1310 é diferente de " + " rsp.getAll().get(0).getTime() / 1000")
chamada antiga: assertEquals(1431, rsp.getAll().get(1).getTime() / 1000)
nova chamada: assertEquals(1431, rsp.getAll().get(1).getTime() / 1000, "Era esperado valores iguais, mas  1431 é diferente de " + " rsp.getAll().get(1).getTime() / 1000")
chamada antiga: assertEquals(1492, rsp.getAll().get(2).getTime() / 1000)
nova chamada: assertEquals(1492, rsp.getAll().get(2).getTime() / 1000, "Era esperado valores iguais, mas  1492 é diferente de " + " rsp.getAll().get(2).getTime() / 1000")
chamada antiga: assertEquals(3, rsp.getAll().size())
nova chamada: assertEquals(3, rsp.getAll().size(), "Era esperado valores iguais, mas  3 é diferente de " + result3067 + " <rsp.getAll().size()>")
chamada antiga: assertEquals(2865, rsp.getAll().get(0).getTime() / 1000)
nova chamada: assertEquals(2865, rsp.getAll().get(0).getTime() / 1000, "Era esperado valores iguais, mas  2865 é diferente de " + " rsp.getAll().get(0).getTime() / 1000")
chamada antiga: assertEquals(3318, rsp.getAll().get(1).getTime() / 1000)
nova chamada: assertEquals(3318, rsp.getAll().get(1).getTime() / 1000, "Era esperado valores iguais, mas  3318 é diferente de " + " rsp.getAll().get(1).getTime() / 1000")
chamada antiga: assertEquals(3093, rsp.getAll().get(2).getTime() / 1000)
nova chamada: assertEquals(3093, rsp.getAll().get(2).getTime() / 1000, "Era esperado valores iguais, mas  3093 é diferente de " + " rsp.getAll().get(2).getTime() / 1000")
chamada antiga: assertEquals(3, rsp.getAll().size())
nova chamada: assertEquals(3, rsp.getAll().size(), "Era esperado valores iguais, mas  3 é diferente de " + result3068 + " <rsp.getAll().size()>")
chamada antiga: assertEquals(870, rsp.getAll().get(0).getTime() / 1000)
nova chamada: assertEquals(870, rsp.getAll().get(0).getTime() / 1000, "Era esperado valores iguais, mas  870 é diferente de " + " rsp.getAll().get(0).getTime() / 1000")
chamada antiga: assertEquals(913, rsp.getAll().get(1).getTime() / 1000)
nova chamada: assertEquals(913, rsp.getAll().get(1).getTime() / 1000, "Era esperado valores iguais, mas  913 é diferente de " + " rsp.getAll().get(1).getTime() / 1000")
chamada antiga: assertEquals(958, rsp.getAll().get(2).getTime() / 1000)
nova chamada: assertEquals(958, rsp.getAll().get(2).getTime() / 1000, "Era esperado valores iguais, mas  958 é diferente de " + " rsp.getAll().get(2).getTime() / 1000")
chamada antiga: assertEquals("keep right and take B 96 toward Bautzen-West, Hoyerswerda", rsp.getBest().getInstructions().get(1).getTurnDescription(tr))
nova chamada: assertEquals("keep right and take B 96 toward Bautzen-West, Hoyerswerda", rsp.getBest().getInstructions().get(1).getTurnDescription(tr), "Era esperado valores iguais, mas  'keep right and take B 96 toward Bautzen-West, Hoyerswerda' é diferente de " + result3069 + " <rsp.getBest().getInstructions().get(1).getTurnDescription(tr)>")
chamada antiga: assertEquals("turn left onto Hoyerswerdaer Straße and drive toward Hoyerswerda, Kleinwelka", rsp.getBest().getInstructions().get(2).getTurnDescription(tr))
nova chamada: assertEquals("turn left onto Hoyerswerdaer Straße and drive toward Hoyerswerda, Kleinwelka", rsp.getBest().getInstructions().get(2).getTurnDescription(tr), "Era esperado valores iguais, mas  'turn left onto Hoyerswerdaer Straße and drive toward Hoyerswerda, Kleinwelka' é diferente de " + result3070 + " <rsp.getBest().getInstructions().get(2).getTurnDescription(tr)>")
chamada antiga: assertEquals("turn left and take A 4 toward Dresden", rsp.getBest().getInstructions().get(1).getTurnDescription(tr))
nova chamada: assertEquals("turn left and take A 4 toward Dresden", rsp.getBest().getInstructions().get(1).getTurnDescription(tr), "Era esperado valores iguais, mas  'turn left and take A 4 toward Dresden' é diferente de " + result3071 + " <rsp.getBest().getInstructions().get(1).getTurnDescription(tr)>")
chamada antiga: assertEquals(170, res.getPoints().size())
nova chamada: assertEquals(170, res.getPoints().size(), "Era esperado valores iguais, mas  170 é diferente de " + result3072 + " <res.getPoints().size()>")
chamada antiga: assertEquals(30, il.size())
nova chamada: assertEquals(30, il.size(), "Era esperado valores iguais, mas  30 é diferente de " + result3073 + " <il.size()>")
chamada antiga: assertEquals("continue onto Avenue des Guelfes", il.get(0).getTurnDescription(tr))
nova chamada: assertEquals("continue onto Avenue des Guelfes", il.get(0).getTurnDescription(tr), "Era esperado valores iguais, mas  'continue onto Avenue des Guelfes' é diferente de " + result3074 + " <il.get(0).getTurnDescription(tr)>")
chamada antiga: assertEquals("turn slight left onto Avenue des Papalins", il.get(1).getTurnDescription(tr))
nova chamada: assertEquals("turn slight left onto Avenue des Papalins", il.get(1).getTurnDescription(tr), "Era esperado valores iguais, mas  'turn slight left onto Avenue des Papalins' é diferente de " + result3075 + " <il.get(1).getTurnDescription(tr)>")
chamada antiga: assertEquals("turn sharp right onto Quai Jean-Charles Rey", il.get(4).getTurnDescription(tr))
nova chamada: assertEquals("turn sharp right onto Quai Jean-Charles Rey", il.get(4).getTurnDescription(tr), "Era esperado valores iguais, mas  'turn sharp right onto Quai Jean-Charles Rey' é diferente de " + result3076 + " <il.get(4).getTurnDescription(tr)>")
chamada antiga: assertEquals("turn left", il.get(5).getTurnDescription(tr))
nova chamada: assertEquals("turn left", il.get(5).getTurnDescription(tr), "Era esperado valores iguais, mas  'turn left' é diferente de " + result3077 + " <il.get(5).getTurnDescription(tr)>")
chamada antiga: assertEquals("turn right onto Avenue Albert II", il.get(6).getTurnDescription(tr))
nova chamada: assertEquals("turn right onto Avenue Albert II", il.get(6).getTurnDescription(tr), "Era esperado valores iguais, mas  'turn right onto Avenue Albert II' é diferente de " + result3078 + " <il.get(6).getTurnDescription(tr)>")
chamada antiga: assertEquals("waypoint 1", il.get(15).getTurnDescription(tr))
nova chamada: assertEquals("waypoint 1", il.get(15).getTurnDescription(tr), "Era esperado valores iguais, mas  'waypoint 1' é diferente de " + result3079 + " <il.get(15).getTurnDescription(tr)>")
chamada antiga: assertEquals(Instruction.U_TURN_UNKNOWN, il.get(16).getSign())
nova chamada: assertEquals(Instruction.U_TURN_UNKNOWN, il.get(16).getSign(), "Era esperado valores iguais, mas  Instruction.U_TURN_UNKNOWN é diferente de " + result3080 + " <il.get(16).getSign()>")
chamada antiga: assertEquals("continue onto Avenue Albert II", il.get(23).getTurnDescription(tr))
nova chamada: assertEquals("continue onto Avenue Albert II", il.get(23).getTurnDescription(tr), "Era esperado valores iguais, mas  'continue onto Avenue Albert II' é diferente de " + result3081 + " <il.get(23).getTurnDescription(tr)>")
chamada antiga: assertEquals("turn left", il.get(24).getTurnDescription(tr))
nova chamada: assertEquals("turn left", il.get(24).getTurnDescription(tr), "Era esperado valores iguais, mas  'turn left' é diferente de " + result3082 + " <il.get(24).getTurnDescription(tr)>")
chamada antiga: assertEquals("turn right onto Quai Jean-Charles Rey", il.get(25).getTurnDescription(tr))
nova chamada: assertEquals("turn right onto Quai Jean-Charles Rey", il.get(25).getTurnDescription(tr), "Era esperado valores iguais, mas  'turn right onto Quai Jean-Charles Rey' é diferente de " + result3083 + " <il.get(25).getTurnDescription(tr)>")
chamada antiga: assertEquals("turn sharp left onto Avenue des Papalins", il.get(26).getTurnDescription(tr))
nova chamada: assertEquals("turn sharp left onto Avenue des Papalins", il.get(26).getTurnDescription(tr), "Era esperado valores iguais, mas  'turn sharp left onto Avenue des Papalins' é diferente de " + result3084 + " <il.get(26).getTurnDescription(tr)>")
chamada antiga: assertEquals("turn slight right onto Avenue des Guelfes", il.get(28).getTurnDescription(tr))
nova chamada: assertEquals("turn slight right onto Avenue des Guelfes", il.get(28).getTurnDescription(tr), "Era esperado valores iguais, mas  'turn slight right onto Avenue des Guelfes' é diferente de " + result3085 + " <il.get(28).getTurnDescription(tr)>")
chamada antiga: assertEquals("arrive at destination", il.get(29).getTurnDescription(tr))
nova chamada: assertEquals("arrive at destination", il.get(29).getTurnDescription(tr), "Era esperado valores iguais, mas  'arrive at destination' é diferente de " + result3086 + " <il.get(29).getTurnDescription(tr)>")
chamada antiga: assertEquals(7, il.get(0).getTime() / 1000)
nova chamada: assertEquals(7, il.get(0).getTime() / 1000, "Era esperado valores iguais, mas  7 é diferente de " + " il.get(0).getTime() / 1000")
chamada antiga: assertEquals(69, il.get(1).getTime() / 1000)
nova chamada: assertEquals(69, il.get(1).getTime() / 1000, "Era esperado valores iguais, mas  69 é diferente de " + " il.get(1).getTime() / 1000")
chamada antiga: assertEquals(128, il.get(2).getTime() / 1000)
nova chamada: assertEquals(128, il.get(2).getTime() / 1000, "Era esperado valores iguais, mas  128 é diferente de " + " il.get(2).getTime() / 1000")
chamada antiga: assertEquals(9, il.get(3).getTime() / 1000)
nova chamada: assertEquals(9, il.get(3).getTime() / 1000, "Era esperado valores iguais, mas  9 é diferente de " + " il.get(3).getTime() / 1000")
chamada antiga: assertEquals(7, il.get(4).getTime() / 1000)
nova chamada: assertEquals(7, il.get(4).getTime() / 1000, "Era esperado valores iguais, mas  7 é diferente de " + " il.get(4).getTime() / 1000")
chamada antiga: assertEquals(30, il.get(5).getTime() / 1000)
nova chamada: assertEquals(30, il.get(5).getTime() / 1000, "Era esperado valores iguais, mas  30 é diferente de " + " il.get(5).getTime() / 1000")
chamada antiga: assertEquals(1, res.getPoints().size())
nova chamada: assertEquals(1, res.getPoints().size(), "Era esperado valores iguais, mas  1 é diferente de " + result3087 + " <res.getPoints().size()>")
chamada antiga: assertEquals(1, res.getInstructions().size())
nova chamada: assertEquals(1, res.getInstructions().size(), "Era esperado valores iguais, mas  1 é diferente de " + result3088 + " <res.getInstructions().size()>")
chamada antiga: assertEquals("arrive at destination", res.getInstructions().get(0).getTurnDescription(tr))
nova chamada: assertEquals("arrive at destination", res.getInstructions().get(0).getTurnDescription(tr), "Era esperado valores iguais, mas  'arrive at destination' é diferente de " + result3089 + " <res.getInstructions().get(0).getTurnDescription(tr)>")
chamada antiga: assertEquals(Instruction.FINISH, res.getInstructions().get(0).getSign())
nova chamada: assertEquals(Instruction.FINISH, res.getInstructions().get(0).getSign(), "Era esperado valores iguais, mas  Instruction.FINISH é diferente de " + result3090 + " <res.getInstructions().get(0).getSign()>")
chamada antiga: assertEquals(1, res.getPoints().size())
nova chamada: assertEquals(1, res.getPoints().size(), "Era esperado valores iguais, mas  1 é diferente de " + result3091 + " <res.getPoints().size()>")
chamada antiga: assertEquals(2, res.getInstructions().size())
nova chamada: assertEquals(2, res.getInstructions().size(), "Era esperado valores iguais, mas  2 é diferente de " + result3092 + " <res.getInstructions().size()>")
chamada antiga: assertEquals(Instruction.REACHED_VIA, res.getInstructions().get(0).getSign())
nova chamada: assertEquals(Instruction.REACHED_VIA, res.getInstructions().get(0).getSign(), "Era esperado valores iguais, mas  Instruction.REACHED_VIA é diferente de " + result3093 + " <res.getInstructions().get(0).getSign()>")
chamada antiga: assertEquals(Instruction.FINISH, res.getInstructions().get(1).getSign())
nova chamada: assertEquals(Instruction.FINISH, res.getInstructions().get(1).getSign(), "Era esperado valores iguais, mas  Instruction.FINISH é diferente de " + result3094 + " <res.getInstructions().get(1).getSign()>")
chamada antiga: assertEquals(1, details.size())
nova chamada: assertEquals(1, details.size(), "Era esperado valores iguais, mas  1 é diferente de " + result3095 + " <details.size()>")
chamada antiga: assertEquals(10, detailList.size())
nova chamada: assertEquals(10, detailList.size(), "Era esperado valores iguais, mas  10 é diferente de " + result3096 + " <detailList.size()>")
chamada antiga: assertEquals(5.0, detailList.get(0).getValue())
nova chamada: assertEquals(5.0, detailList.get(0).getValue(), "Era esperado valores iguais, mas  5.0 é diferente de " + result3097 + " <detailList.get(0).getValue()>")
chamada antiga: assertEquals(0, detailList.get(0).getFirst())
nova chamada: assertEquals(0, detailList.get(0).getFirst(), "Era esperado valores iguais, mas  0 é diferente de " + result3098 + " <detailList.get(0).getFirst()>")
chamada antiga: assertEquals(3.0, detailList.get(1).getValue())
nova chamada: assertEquals(3.0, detailList.get(1).getValue(), "Era esperado valores iguais, mas  3.0 é diferente de " + result3099 + " <detailList.get(1).getValue()>")
chamada antiga: assertEquals(res.getPoints().size() - 1, detailList.get(9).getLast())
nova chamada: assertEquals(res.getPoints().size() - 1, detailList.get(9).getLast(), "Era esperado valores iguais, mas  res.getPoints().size() - 1 é diferente de " + result3100 + " <detailList.get(9).getLast()>")
chamada antiga: assertEquals(36, res.getPoints().size())
nova chamada: assertEquals(36, res.getPoints().size(), "Era esperado valores iguais, mas  36 é diferente de " + result3101 + " <res.getPoints().size()>")
chamada antiga: assertTrue(rsp.hasErrors())
nova chamada: assertTrue(rsp.hasErrors(), "Era esperado verdadeiro, mas " + result3102 + " <rsp.hasErrors()> é falso")
chamada antiga: assertTrue(rsp.hasErrors())
nova chamada: assertTrue(rsp.hasErrors(), "Era esperado verdadeiro, mas " + result3103 + " <rsp.hasErrors()> é falso")
chamada antiga: assertTrue(rsp.hasErrors())
nova chamada: assertTrue(rsp.hasErrors(), "Era esperado verdadeiro, mas " + result3104 + " <rsp.hasErrors()> é falso")
chamada antiga: assertTrue(throwable instanceof MaximumNodesExceededException)
nova chamada: assertTrue(throwable instanceof MaximumNodesExceededException, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(5, nodesDetail)
nova chamada: assertEquals(5, nodesDetail, "Era esperado valores iguais, mas  5 é diferente de " + " nodesDetail")
chamada antiga: assertTrue(rsp.hasErrors())
nova chamada: assertTrue(rsp.hasErrors(), "Era esperado verdadeiro, mas " + result3105 + " <rsp.hasErrors()> é falso")
chamada antiga: assertTrue(rsp.hasErrors())
nova chamada: assertTrue(rsp.hasErrors(), "Era esperado verdadeiro, mas " + result3106 + " <rsp.hasErrors()> é falso")
chamada antiga: assertEquals(1, exception.getDetails().get("from"))
nova chamada: assertEquals(1, exception.getDetails().get("from"), "Era esperado valores iguais, mas  1 é diferente de " + result3107 + " <exception.getDetails().get('from')>")
chamada antiga: assertEquals(2, exception.getDetails().get("to"))
nova chamada: assertEquals(2, exception.getDetails().get("to"), "Era esperado valores iguais, mas  2 é diferente de " + result3108 + " <exception.getDetails().get('to')>")
chamada antiga: assertEquals(23, res.getPoints().size())
nova chamada: assertEquals(23, res.getPoints().size(), "Era esperado valores iguais, mas  23 é diferente de " + result3109 + " <res.getPoints().size()>")
chamada antiga: assertEquals(55, res.getPoints().size())
nova chamada: assertEquals(55, res.getPoints().size(), "Era esperado valores iguais, mas  55 é diferente de " + result3110 + " <res.getPoints().size()>")
chamada antiga: assertTrue(res.getPoints().is3D())
nova chamada: assertTrue(res.getPoints().is3D(), "Era esperado verdadeiro, mas " + result3111 + " <res.getPoints().is3D()> é falso")
chamada antiga: assertEquals(12, il.size())
nova chamada: assertEquals(12, il.size(), "Era esperado valores iguais, mas  12 é diferente de " + result3112 + " <il.size()>")
chamada antiga: assertTrue(il.get(0).getPoints().is3D())
nova chamada: assertTrue(il.get(0).getPoints().is3D(), "Era esperado verdadeiro, mas " + result3113 + " <il.get(0).getPoints().is3D()> é falso")
chamada antiga: assertEquals("(43.730684662577524,7.421283725164733,62.0), (43.7306797,7.4213823,66.0), " + "(43.731098,7.4215463,45.0), (43.7312991,7.42159,45.0), (43.7313271,7.4214147,45.0), " + "(43.7312506,7.4213664,45.0), (43.7312822,7.4211156,52.0), (43.7313624,7.4211455,52.0), " + "(43.7313714,7.4211233,52.0), (43.7314858,7.4211734,52.0), (43.7315753,7.4208688,52.0), " + "(43.7316061,7.4208249,52.0), (43.7316404,7.4208503,52.0), (43.7316741,7.4210502,52.0), " + "(43.7316276,7.4214636,45.0), (43.7316391,7.4215065,45.0), (43.7316664,7.4214904,45.0), " + "(43.7317185,7.4211861,52.0), (43.7319676,7.4206159,19.0), (43.732038,7.4203936,20.0), " + "(43.7322266,7.4196414,26.0), (43.7323236,7.4192656,26.0), (43.7323374,7.4190461,26.0), " + "(43.7323875,7.4189195,26.0), (43.731974,7.4181688,29.0), (43.7316421,7.4173042,23.0), " + "(43.7315686,7.4170356,31.0), (43.7314269,7.4166815,31.0), (43.7312401,7.4163184,49.0), " + "(43.7308286,7.4157613,29.399999618530273), (43.730662,7.4155599,22.0), " + "(43.7303643,7.4151193,51.0), (43.729579,7.4137274,40.0), (43.7295167,7.4137244,40.0), " + "(43.7294669,7.4137725,40.0), (43.7285987,7.4149068,23.0), (43.7285167,7.4149272,22.0), " + "(43.7283974,7.4148646,22.0), (43.7285619,7.4151365,23.0), (43.7285774,7.4152444,23.0), " + "(43.7285763,7.4159759,21.0), (43.7285238,7.4161982,20.0), (43.7284592,7.4163655,18.0), " + "(43.7281669,7.4168192,18.0), (43.7281442,7.4169449,18.0), (43.7281684,7.4172435,14.0), " + "(43.7282784,7.4179606,14.0), (43.7282757,7.418175,11.0), (43.7282319,7.4183683,11.0), " + "(43.7281482,7.4185473,11.0), (43.7280654,7.4186535,11.0), (43.7279259,7.418748,11.0), " + "(43.727779,7.4187731,11.0), (43.7276825,7.4190072,11.0), " + "(43.72767974015672,7.419198523220426,11.0)", str)
nova chamada: assertEquals("(43.730684662577524,7.421283725164733,62.0), (43.7306797,7.4213823,66.0), " + "(43.731098,7.4215463,45.0), (43.7312991,7.42159,45.0), (43.7313271,7.4214147,45.0), " + "(43.7312506,7.4213664,45.0), (43.7312822,7.4211156,52.0), (43.7313624,7.4211455,52.0), " + "(43.7313714,7.4211233,52.0), (43.7314858,7.4211734,52.0), (43.7315753,7.4208688,52.0), " + "(43.7316061,7.4208249,52.0), (43.7316404,7.4208503,52.0), (43.7316741,7.4210502,52.0), " + "(43.7316276,7.4214636,45.0), (43.7316391,7.4215065,45.0), (43.7316664,7.4214904,45.0), " + "(43.7317185,7.4211861,52.0), (43.7319676,7.4206159,19.0), (43.732038,7.4203936,20.0), " + "(43.7322266,7.4196414,26.0), (43.7323236,7.4192656,26.0), (43.7323374,7.4190461,26.0), " + "(43.7323875,7.4189195,26.0), (43.731974,7.4181688,29.0), (43.7316421,7.4173042,23.0), " + "(43.7315686,7.4170356,31.0), (43.7314269,7.4166815,31.0), (43.7312401,7.4163184,49.0), " + "(43.7308286,7.4157613,29.399999618530273), (43.730662,7.4155599,22.0), " + "(43.7303643,7.4151193,51.0), (43.729579,7.4137274,40.0), (43.7295167,7.4137244,40.0), " + "(43.7294669,7.4137725,40.0), (43.7285987,7.4149068,23.0), (43.7285167,7.4149272,22.0), " + "(43.7283974,7.4148646,22.0), (43.7285619,7.4151365,23.0), (43.7285774,7.4152444,23.0), " + "(43.7285763,7.4159759,21.0), (43.7285238,7.4161982,20.0), (43.7284592,7.4163655,18.0), " + "(43.7281669,7.4168192,18.0), (43.7281442,7.4169449,18.0), (43.7281684,7.4172435,14.0), " + "(43.7282784,7.4179606,14.0), (43.7282757,7.418175,11.0), (43.7282319,7.4183683,11.0), " + "(43.7281482,7.4185473,11.0), (43.7280654,7.4186535,11.0), (43.7279259,7.418748,11.0), " + "(43.727779,7.4187731,11.0), (43.7276825,7.4190072,11.0), " + "(43.72767974015672,7.419198523220426,11.0)", str, "Era esperado valores iguais, mas  '(43.730684662577524,7.421283725164733,62.0), (43.7306797,7.4213823,66.0), ' + '(43.731098,7.4215463,45.0), (43.7312991,7.42159,45.0), (43.7313271,7.4214147,45.0), ' + '(43.7312506,7.4213664,45.0), (43.7312822,7.4211156,52.0), (43.7313624,7.4211455,52.0), ' + '(43.7313714,7.4211233,52.0), (43.7314858,7.4211734,52.0), (43.7315753,7.4208688,52.0), ' + '(43.7316061,7.4208249,52.0), (43.7316404,7.4208503,52.0), (43.7316741,7.4210502,52.0), ' + '(43.7316276,7.4214636,45.0), (43.7316391,7.4215065,45.0), (43.7316664,7.4214904,45.0), ' + '(43.7317185,7.4211861,52.0), (43.7319676,7.4206159,19.0), (43.732038,7.4203936,20.0), ' + '(43.7322266,7.4196414,26.0), (43.7323236,7.4192656,26.0), (43.7323374,7.4190461,26.0), ' + '(43.7323875,7.4189195,26.0), (43.731974,7.4181688,29.0), (43.7316421,7.4173042,23.0), ' + '(43.7315686,7.4170356,31.0), (43.7314269,7.4166815,31.0), (43.7312401,7.4163184,49.0), ' + '(43.7308286,7.4157613,29.399999618530273), (43.730662,7.4155599,22.0), ' + '(43.7303643,7.4151193,51.0), (43.729579,7.4137274,40.0), (43.7295167,7.4137244,40.0), ' + '(43.7294669,7.4137725,40.0), (43.7285987,7.4149068,23.0), (43.7285167,7.4149272,22.0), ' + '(43.7283974,7.4148646,22.0), (43.7285619,7.4151365,23.0), (43.7285774,7.4152444,23.0), ' + '(43.7285763,7.4159759,21.0), (43.7285238,7.4161982,20.0), (43.7284592,7.4163655,18.0), ' + '(43.7281669,7.4168192,18.0), (43.7281442,7.4169449,18.0), (43.7281684,7.4172435,14.0), ' + '(43.7282784,7.4179606,14.0), (43.7282757,7.418175,11.0), (43.7282319,7.4183683,11.0), ' + '(43.7281482,7.4185473,11.0), (43.7280654,7.4186535,11.0), (43.7279259,7.418748,11.0), ' + '(43.727779,7.4187731,11.0), (43.7276825,7.4190072,11.0), ' + '(43.72767974015672,7.419198523220426,11.0)' é diferente de " + " str")
chamada antiga: assertEquals(55, res.getPoints().size())
nova chamada: assertEquals(55, res.getPoints().size(), "Era esperado valores iguais, mas  55 é diferente de " + result3114 + " <res.getPoints().size()>")
chamada antiga: assertEquals(new GHPoint3D(43.73068455771767, 7.421283689825812, 62.0), res.getPoints().get(0))
nova chamada: assertEquals(new GHPoint3D(43.73068455771767, 7.421283689825812, 62.0), res.getPoints().get(0), "Era esperado valores iguais, mas  new GHPoint3D(43.73068455771767, 7.421283689825812, 62.0) é diferente de " + result3115 + " <res.getPoints().get(0)>")
chamada antiga: assertEquals(new GHPoint3D(43.727679637988224, 7.419198521975086, 11.0), res.getPoints().get(res.getPoints().size() - 1))
nova chamada: assertEquals(new GHPoint3D(43.727679637988224, 7.419198521975086, 11.0), res.getPoints().get(res.getPoints().size() - 1), "Era esperado valores iguais, mas  new GHPoint3D(43.727679637988224, 7.419198521975086, 11.0) é diferente de " + result3116 + " <res.getPoints().get(res.getPoints().size() - 1)>")
chamada antiga: assertEquals(Snap.Position.TOWER, hopper.getLocationIndex().findClosest(from.lat, from.lon, EdgeFilter.ALL_EDGES).getSnappedPosition())
nova chamada: assertEquals(Snap.Position.TOWER, hopper.getLocationIndex().findClosest(from.lat, from.lon, EdgeFilter.ALL_EDGES).getSnappedPosition(), "Era esperado valores iguais, mas  Snap.Position.TOWER é diferente de " + result3117 + " <hopper.getLocationIndex().findClosest(from.lat, from.lon, EdgeFilter.ALL_EDGES).getSnappedPosition()>")
chamada antiga: assertEquals(Snap.Position.TOWER, hopper.getLocationIndex().findClosest(to.lat, to.lon, EdgeFilter.ALL_EDGES).getSnappedPosition())
nova chamada: assertEquals(Snap.Position.TOWER, hopper.getLocationIndex().findClosest(to.lat, to.lon, EdgeFilter.ALL_EDGES).getSnappedPosition(), "Era esperado valores iguais, mas  Snap.Position.TOWER é diferente de " + result3118 + " <hopper.getLocationIndex().findClosest(to.lat, to.lon, EdgeFilter.ALL_EDGES).getSnappedPosition()>")
chamada antiga: assertEquals(6, pointList.size())
nova chamada: assertEquals(6, pointList.size(), "Era esperado valores iguais, mas  6 é diferente de " + result3119 + " <pointList.size()>")
chamada antiga: assertTrue(pointList.is3D())
nova chamada: assertTrue(pointList.is3D(), "Era esperado verdadeiro, mas " + result3120 + " <pointList.is3D()> é falso")
chamada antiga: assertEquals(60, arsp.getPoints().size())
nova chamada: assertEquals(60, arsp.getPoints().size(), "Era esperado valores iguais, mas  60 é diferente de " + result3121 + " <arsp.getPoints().size()>")
chamada antiga: assertTrue(arsp.getPoints().is3D())
nova chamada: assertTrue(arsp.getPoints().is3D(), "Era esperado verdadeiro, mas " + result3122 + " <arsp.getPoints().is3D()> é falso")
chamada antiga: assertEquals(12, il.size())
nova chamada: assertEquals(12, il.size(), "Era esperado valores iguais, mas  12 é diferente de " + result3123 + " <il.size()>")
chamada antiga: assertTrue(il.get(0).getPoints().is3D())
nova chamada: assertTrue(il.get(0).getPoints().is3D(), "Era esperado verdadeiro, mas " + result3124 + " <il.get(0).getPoints().is3D()> é falso")
chamada antiga: assertEquals(60, arsp.getPoints().size())
nova chamada: assertEquals(60, arsp.getPoints().size(), "Era esperado valores iguais, mas  60 é diferente de " + result3125 + " <arsp.getPoints().size()>")
chamada antiga: assertEquals(new GHPoint3D(43.73068455771767, 7.421283689825812, 55.82900047302246), arsp.getPoints().get(0))
nova chamada: assertEquals(new GHPoint3D(43.73068455771767, 7.421283689825812, 55.82900047302246), arsp.getPoints().get(0), "Era esperado valores iguais, mas  new GHPoint3D(43.73068455771767, 7.421283689825812, 55.82900047302246) é diferente de " + result3126 + " <arsp.getPoints().get(0)>")
chamada antiga: assertEquals(new GHPoint3D(43.727679637988224, 7.419198521975086, 12.274499893188477), arsp.getPoints().get(arsp.getPoints().size() - 1))
nova chamada: assertEquals(new GHPoint3D(43.727679637988224, 7.419198521975086, 12.274499893188477), arsp.getPoints().get(arsp.getPoints().size() - 1), "Era esperado valores iguais, mas  new GHPoint3D(43.727679637988224, 7.419198521975086, 12.274499893188477) é diferente de " + result3127 + " <arsp.getPoints().get(arsp.getPoints().size() - 1)>")
chamada antiga: assertEquals(55, res.getPoints().size())
nova chamada: assertEquals(55, res.getPoints().size(), "Era esperado valores iguais, mas  55 é diferente de " + result3128 + " <res.getPoints().size()>")
chamada antiga: assertTrue(res.getPoints().is3D())
nova chamada: assertTrue(res.getPoints().is3D(), "Era esperado verdadeiro, mas " + result3129 + " <res.getPoints().is3D()> é falso")
chamada antiga: assertEquals(103, res.getPoints().size())
nova chamada: assertEquals(103, res.getPoints().size(), "Era esperado valores iguais, mas  103 é diferente de " + result3130 + " <res.getPoints().size()>")
chamada antiga: assertEquals(19, il.size())
nova chamada: assertEquals(19, il.size(), "Era esperado valores iguais, mas  19 é diferente de " + result3131 + " <il.size()>")
chamada antiga: assertEquals("continue onto Obere Landstraße", il.get(0).getTurnDescription(tr))
nova chamada: assertEquals("continue onto Obere Landstraße", il.get(0).getTurnDescription(tr), "Era esperado valores iguais, mas  'continue onto Obere Landstraße' é diferente de " + result3132 + " <il.get(0).getTurnDescription(tr)>")
chamada antiga: assertEquals("turn left onto Kirchengasse", il.get(1).getTurnDescription(tr))
nova chamada: assertEquals("turn left onto Kirchengasse", il.get(1).getTurnDescription(tr), "Era esperado valores iguais, mas  'turn left onto Kirchengasse' é diferente de " + result3133 + " <il.get(1).getTurnDescription(tr)>")
chamada antiga: assertEquals("turn right onto Pfarrplatz", il.get(2).getTurnDescription(tr))
nova chamada: assertEquals("turn right onto Pfarrplatz", il.get(2).getTurnDescription(tr), "Era esperado valores iguais, mas  'turn right onto Pfarrplatz' é diferente de " + result3134 + " <il.get(2).getTurnDescription(tr)>")
chamada antiga: assertEquals("turn right onto Margarethenstraße", il.get(3).getTurnDescription(tr))
nova chamada: assertEquals("turn right onto Margarethenstraße", il.get(3).getTurnDescription(tr), "Era esperado valores iguais, mas  'turn right onto Margarethenstraße' é diferente de " + result3135 + " <il.get(3).getTurnDescription(tr)>")
chamada antiga: assertEquals("keep left onto Hoher Markt", il.get(4).getTurnDescription(tr))
nova chamada: assertEquals("keep left onto Hoher Markt", il.get(4).getTurnDescription(tr), "Era esperado valores iguais, mas  'keep left onto Hoher Markt' é diferente de " + result3136 + " <il.get(4).getTurnDescription(tr)>")
chamada antiga: assertEquals("turn right onto Wegscheid", il.get(6).getTurnDescription(tr))
nova chamada: assertEquals("turn right onto Wegscheid", il.get(6).getTurnDescription(tr), "Era esperado valores iguais, mas  'turn right onto Wegscheid' é diferente de " + result3137 + " <il.get(6).getTurnDescription(tr)>")
chamada antiga: assertEquals("continue onto Wegscheid", il.get(7).getTurnDescription(tr))
nova chamada: assertEquals("continue onto Wegscheid", il.get(7).getTurnDescription(tr), "Era esperado valores iguais, mas  'continue onto Wegscheid' é diferente de " + result3138 + " <il.get(7).getTurnDescription(tr)>")
chamada antiga: assertEquals("turn right onto Ringstraße", il.get(8).getTurnDescription(tr))
nova chamada: assertEquals("turn right onto Ringstraße", il.get(8).getTurnDescription(tr), "Era esperado valores iguais, mas  'turn right onto Ringstraße' é diferente de " + result3139 + " <il.get(8).getTurnDescription(tr)>")
chamada antiga: assertEquals("keep left onto Eyblparkstraße", il.get(9).getTurnDescription(tr))
nova chamada: assertEquals("keep left onto Eyblparkstraße", il.get(9).getTurnDescription(tr), "Era esperado valores iguais, mas  'keep left onto Eyblparkstraße' é diferente de " + result3140 + " <il.get(9).getTurnDescription(tr)>")
chamada antiga: assertEquals("keep left onto Austraße", il.get(10).getTurnDescription(tr))
nova chamada: assertEquals("keep left onto Austraße", il.get(10).getTurnDescription(tr), "Era esperado valores iguais, mas  'keep left onto Austraße' é diferente de " + result3141 + " <il.get(10).getTurnDescription(tr)>")
chamada antiga: assertEquals("keep left onto Rechte Kremszeile", il.get(11).getTurnDescription(tr))
nova chamada: assertEquals("keep left onto Rechte Kremszeile", il.get(11).getTurnDescription(tr), "Era esperado valores iguais, mas  'keep left onto Rechte Kremszeile' é diferente de " + result3142 + " <il.get(11).getTurnDescription(tr)>")
chamada antiga: assertEquals("turn right onto Treppelweg", il.get(15).getTurnDescription(tr))
nova chamada: assertEquals("turn right onto Treppelweg", il.get(15).getTurnDescription(tr), "Era esperado valores iguais, mas  'turn right onto Treppelweg' é diferente de " + result3143 + " <il.get(15).getTurnDescription(tr)>")
chamada antiga: assertEquals("continue onto Obere Landstraße", il.get(0).getTurnDescription(tr))
nova chamada: assertEquals("continue onto Obere Landstraße", il.get(0).getTurnDescription(tr), "Era esperado valores iguais, mas  'continue onto Obere Landstraße' é diferente de " + result3144 + " <il.get(0).getTurnDescription(tr)>")
chamada antiga: assertEquals(2, hopper.getCHGraphs().size())
nova chamada: assertEquals(2, hopper.getCHGraphs().size(), "Era esperado valores iguais, mas  2 é diferente de " + result3145 + " <hopper.getCHGraphs().size()>")
chamada antiga: assertEquals(2, ((RoundaboutInstruction) res.getInstructions().get(1)).getExitNumber())
nova chamada: assertEquals(2, ((RoundaboutInstruction) res.getInstructions().get(1)).getExitNumber(), "Era esperado valores iguais, mas  2 é diferente de " + result3146 + " <((RoundaboutInstruction) res.getInstructions().get(1)).getExitNumber()>")
chamada antiga: assertEquals(2, ((RoundaboutInstruction) res.getInstructions().get(1)).getExitNumber())
nova chamada: assertEquals(2, ((RoundaboutInstruction) res.getInstructions().get(1)).getExitNumber(), "Era esperado valores iguais, mas  2 é diferente de " + result3147 + " <((RoundaboutInstruction) res.getInstructions().get(1)).getExitNumber()>")
chamada antiga: assertEquals(1, ((RoundaboutInstruction) res.getInstructions().get(1)).getExitNumber())
nova chamada: assertEquals(1, ((RoundaboutInstruction) res.getInstructions().get(1)).getExitNumber(), "Era esperado valores iguais, mas  1 é diferente de " + result3148 + " <((RoundaboutInstruction) res.getInstructions().get(1)).getExitNumber()>")
chamada antiga: assertEquals(2, ((RoundaboutInstruction) res.getInstructions().get(1)).getExitNumber())
nova chamada: assertEquals(2, ((RoundaboutInstruction) res.getInstructions().get(1)).getExitNumber(), "Era esperado valores iguais, mas  2 é diferente de " + result3149 + " <((RoundaboutInstruction) res.getInstructions().get(1)).getExitNumber()>")
chamada antiga: assertEquals(2, hopper.getCHGraphs().size())
nova chamada: assertEquals(2, hopper.getCHGraphs().size(), "Era esperado valores iguais, mas  2 é diferente de " + result3150 + " <hopper.getCHGraphs().size()>")
chamada antiga: assertTrue(instr instanceof RoundaboutInstruction)
nova chamada: assertTrue(instr instanceof RoundaboutInstruction, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(5, ((RoundaboutInstruction) instr).getExitNumber())
nova chamada: assertEquals(5, ((RoundaboutInstruction) instr).getExitNumber(), "Era esperado valores iguais, mas  5 é diferente de " + result3151 + " <((RoundaboutInstruction) instr).getExitNumber()>")
chamada antiga: assertNotEquals(sum, 0)
nova chamada: assertNotEquals(sum, 0, "Era esperado valores diferentes, mas  sum é igual a " + " 0")
chamada antiga: assertEquals(85, bestPath.getPoints().size())
nova chamada: assertEquals(85, bestPath.getPoints().size(), "Era esperado valores iguais, mas  85 é diferente de " + result3152 + " <bestPath.getPoints().size()>")
chamada antiga: assertEquals(1, rsp.getAll().size())
nova chamada: assertEquals(1, rsp.getAll().size(), "Era esperado valores iguais, mas  1 é diferente de " + result3153 + " <rsp.getAll().size()>")
chamada antiga: assertEquals(66, res.getPoints().size())
nova chamada: assertEquals(66, res.getPoints().size(), "Era esperado valores iguais, mas  66 é diferente de " + result3154 + " <res.getPoints().size()>")
chamada antiga: assertEquals(91, bestPath.getPoints().size())
nova chamada: assertEquals(91, bestPath.getPoints().size(), "Era esperado valores iguais, mas  91 é diferente de " + result3155 + " <bestPath.getPoints().size()>")
chamada antiga: assertEquals(91, bestPath.getPoints().size())
nova chamada: assertEquals(91, bestPath.getPoints().size(), "Era esperado valores iguais, mas  91 é diferente de " + result3156 + " <bestPath.getPoints().size()>")
chamada antiga: assertEquals(91, bestPath.getPoints().size())
nova chamada: assertEquals(91, bestPath.getPoints().size(), "Era esperado valores iguais, mas  91 é diferente de " + result3157 + " <bestPath.getPoints().size()>")
chamada antiga: assertEquals(expectedVisitedNodes, visitedNodes)
nova chamada: assertEquals(expectedVisitedNodes, visitedNodes, "Era esperado valores iguais, mas  expectedVisitedNodes é diferente de " + " visitedNodes")
chamada antiga: assertEquals(IllegalArgumentException.class, response.getErrors().get(0).getClass())
nova chamada: assertEquals(IllegalArgumentException.class, response.getErrors().get(0).getClass(), "Era esperado valores iguais, mas  IllegalArgumentException.class é diferente de " + result3158 + " <response.getErrors().get(0).getClass()>")
chamada antiga: assertEquals(IllegalArgumentException.class, response.getErrors().get(0).getClass())
nova chamada: assertEquals(IllegalArgumentException.class, response.getErrors().get(0).getClass(), "Era esperado valores iguais, mas  IllegalArgumentException.class é diferente de " + result3159 + " <response.getErrors().get(0).getClass()>")
chamada antiga: assertEquals(123.0, w.calcTurnWeight(5, 6, 5))
nova chamada: assertEquals(123.0, w.calcTurnWeight(5, 6, 5), "Era esperado valores iguais, mas  123.0 é diferente de " + result3160 + " <w.calcTurnWeight(5, 6, 5)>")
chamada antiga: assertEquals(46.0, w.calcTurnWeight(5, 6, 5))
nova chamada: assertEquals(46.0, w.calcTurnWeight(5, 6, 5), "Era esperado valores iguais, mas  46.0 é diferente de " + result3161 + " <w.calcTurnWeight(5, 6, 5)>")
chamada antiga: assertTrue(res.getHints().getInt("visited_nodes.sum", 0) < 150)
nova chamada: assertTrue(res.getHints().getInt("visited_nodes.sum", 0) < 150, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(res.getHints().getInt("visited_nodes.sum", 0) > 170)
nova chamada: assertTrue(res.getHints().getInt("visited_nodes.sum", 0) > 170, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(path.getTime(), pathCH.getTime())
nova chamada: assertEquals(path.getTime(), pathCH.getTime(), "Era esperado valores iguais, mas " + result3162 + " <path.getTime()> é diferente de " + result3163 + " <pathCH.getTime()>")
chamada antiga: assertEquals(149504, pathCH.getTime())
nova chamada: assertEquals(149504, pathCH.getTime(), "Era esperado valores iguais, mas  149504 é diferente de " + result3164 + " <pathCH.getTime()>")
chamada antiga: assertEquals(149504, pathLM.getTime())
nova chamada: assertEquals(149504, pathLM.getTime(), "Era esperado valores iguais, mas  149504 é diferente de " + result3165 + " <pathLM.getTime()>")
chamada antiga: assertEquals(149504, path.getTime())
nova chamada: assertEquals(149504, path.getTime(), "Era esperado valores iguais, mas  149504 é diferente de " + result3166 + " <path.getTime()>")
chamada antiga: assertNotEquals(rsp1.getHints().getInt("visited_nodes.sum", -1), rsp2.getHints().getInt("visited_nodes.sum", -1))
nova chamada: assertNotEquals(rsp1.getHints().getInt("visited_nodes.sum", -1), rsp2.getHints().getInt("visited_nodes.sum", -1), "Era esperado valores diferentes, mas " + result3167 + " <rsp1.getHints().getInt('visited_nodes.sum', -1)> é igual a " + result3168 + " <rsp2.getHints().getInt('visited_nodes.sum', -1)>")
chamada antiga: assertEquals(1, rsp.getErrors().size())
nova chamada: assertEquals(1, rsp.getErrors().size(), "Era esperado valores iguais, mas  1 é diferente de " + result3169 + " <rsp.getErrors().size()>")
chamada antiga: assertEquals(hopper.getBaseGraph().getEdges(), count)
nova chamada: assertEquals(hopper.getBaseGraph().getEdges(), count, "Era esperado valores iguais, mas " + result3170 + " <hopper.getBaseGraph().getEdges()> é diferente de " + " count")
chamada antiga: assertEquals(expectedStreets, streets)
nova chamada: assertEquals(expectedStreets, streets, "Era esperado valores iguais, mas  expectedStreets é diferente de " + " streets")
chamada antiga: assertTrue(rsp.hasErrors())
nova chamada: assertTrue(rsp.hasErrors(), "Era esperado verdadeiro, mas " + result3171 + " <rsp.hasErrors()> é falso")
chamada antiga: assertEquals(41, path.getPoints().size())
nova chamada: assertEquals(41, path.getPoints().size(), "Era esperado valores iguais, mas  41 é diferente de " + result3172 + " <path.getPoints().size()>")
chamada antiga: assertEquals(40, totalLength)
nova chamada: assertEquals(40, totalLength, "Era esperado valores iguais, mas  40 é diferente de " + " totalLength")
chamada antiga: assertEquals(expectedRef, instruction.getExtraInfoJSON().get("ref"))
nova chamada: assertEquals(expectedRef, instruction.getExtraInfoJSON().get("ref"), "Era esperado valores iguais, mas  expectedRef é diferente de " + result3173 + " <instruction.getExtraInfoJSON().get('ref')>")
chamada antiga: assertEquals(expectedInterval, ((ShallowImmutablePointList) instruction.getPoints()).getIntervalString())
nova chamada: assertEquals(expectedInterval, ((ShallowImmutablePointList) instruction.getPoints()).getIntervalString(), "Era esperado valores iguais, mas  expectedInterval é diferente de " + result3174 + " <((ShallowImmutablePointList) instruction.getPoints()).getIntervalString()>")
chamada antiga: assertEquals(expectedLength, instruction.getLength())
nova chamada: assertEquals(expectedLength, instruction.getLength(), "Era esperado valores iguais, mas  expectedLength é diferente de " + result3175 + " <instruction.getLength()>")
chamada antiga: assertEquals(expectedPoints, instruction.getPoints().size())
nova chamada: assertEquals(expectedPoints, instruction.getPoints().size(), "Era esperado valores iguais, mas  expectedPoints é diferente de " + result3176 + " <instruction.getPoints().size()>")
chamada antiga: assertEquals(expected, detail.toString())
nova chamada: assertEquals(expected, detail.toString(), "Era esperado valores iguais, mas  expected é diferente de " + result3177 + " <detail.toString()>")
chamada antiga: assertEquals("[com.graphhopper.util.exceptions.ConnectionNotFoundException: Connection between locations not found]", res.getErrors().toString())
nova chamada: assertEquals("[com.graphhopper.util.exceptions.ConnectionNotFoundException: Connection between locations not found]", res.getErrors().toString(), "Era esperado valores iguais, mas  '[com.graphhopper.util.exceptions.ConnectionNotFoundException: Connection between locations not found]' é diferente de " + result3178 + " <res.getErrors().toString()>")
chamada antiga: assertEquals(1, counter.get())
nova chamada: assertEquals(1, counter.get(), "Era esperado valores iguais, mas  1 é diferente de " + result3179 + " <counter.get()>")
chamada antiga: assertEquals(1, counter.get())
nova chamada: assertEquals(1, counter.get(), "Era esperado valores iguais, mas  1 é diferente de " + result3180 + " <counter.get()>")
chamada antiga: assertTrue(snap.isValid())
nova chamada: assertTrue(snap.isValid(), "Era esperado verdadeiro, mas " + result3181 + " <snap.isValid()> é falso")
chamada antiga: assertTrue(snap.getQueryDistance() < 3_000)
nova chamada: assertTrue(snap.getQueryDistance() < 3_000, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(time, instructionTime)
nova chamada: assertEquals(time, instructionTime, "Era esperado valores iguais, mas  time é diferente de " + " instructionTime")
chamada antiga: assertEquals(time, pathDetailTime)
nova chamada: assertEquals(time, pathDetailTime, "Era esperado valores iguais, mas  time é diferente de " + " pathDetailTime")
chamada antiga: assertTrue(hopper.load())
nova chamada: assertTrue(hopper.load(), "Era esperado verdadeiro, mas " + result3182 + " <hopper.load()> é falso")
chamada antiga: assertEquals(nodes, hopper.getBaseGraph().getNodes())
nova chamada: assertEquals(nodes, hopper.getBaseGraph().getNodes(), "Era esperado valores iguais, mas  nodes é diferente de " + result3183 + " <hopper.getBaseGraph().getNodes()>")
chamada antiga: assertTrue(hopper.load())
nova chamada: assertTrue(hopper.load(), "Era esperado verdadeiro, mas " + result3184 + " <hopper.load()> é falso")
chamada antiga: assertEquals(nodes, hopper.getBaseGraph().getNodes())
nova chamada: assertEquals(nodes, hopper.getBaseGraph().getNodes(), "Era esperado valores iguais, mas  nodes é diferente de " + result3185 + " <hopper.getBaseGraph().getNodes()>")
chamada antiga: assertTrue(counter > 0)
nova chamada: assertTrue(counter > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(list.toString(), "[1, 2, 3, 4, 5, 6]")
nova chamada: assertEquals(list.toString(), "[1, 2, 3, 4, 5, 6]", "Era esperado valores iguais, mas " + result3186 + " <list.toString()> é diferente de " + " '[1, 2, 3, 4, 5, 6]'")
chamada antiga: assertTrue(counter > 0)
nova chamada: assertTrue(counter > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(list.toString(), "[1, 2, 3, 4]")
nova chamada: assertEquals(list.toString(), "[1, 2, 3, 4]", "Era esperado valores iguais, mas " + result3187 + " <list.toString()> é diferente de " + " '[1, 2, 3, 4]'")
chamada antiga: assertEquals("continue onto blp street", enMap.tr("continue_onto", "blp street"))
nova chamada: assertEquals("continue onto blp street", enMap.tr("continue_onto", "blp street"), "Era esperado valores iguais, mas  'continue onto blp street' é diferente de " + result3188 + " <enMap.tr('continue_onto', 'blp street')>")
chamada antiga: assertEquals("Zu Fuß", trMap.tr("web.FOOT"))
nova chamada: assertEquals("Zu Fuß", trMap.tr("web.FOOT"), "Era esperado valores iguais, mas  'Zu Fuß' é diferente de " + result3189 + " <trMap.tr('web.FOOT')>")
chamada antiga: assertEquals("Пешком", ruMap.tr("web.FOOT"))
nova chamada: assertEquals("Пешком", ruMap.tr("web.FOOT"), "Era esperado valores iguais, mas  'Пешком' é diferente de " + result3190 + " <ruMap.tr('web.FOOT')>")
chamada antiga: assertEquals("Đi bộ", zhMap.tr("web.FOOT"))
nova chamada: assertEquals("Đi bộ", zhMap.tr("web.FOOT"), "Era esperado valores iguais, mas  'Đi bộ' é diferente de " + result3191 + " <zhMap.tr('web.FOOT')>")
chamada antiga: assertEquals("Zu Fuß", trMap.tr("web.FOOT"))
nova chamada: assertEquals("Zu Fuß", trMap.tr("web.FOOT"), "Era esperado valores iguais, mas  'Zu Fuß' é diferente de " + result3192 + " <trMap.tr('web.FOOT')>")
chamada antiga: assertEquals("Zu Fuß", trMap.tr("web.FOOT"))
nova chamada: assertEquals("Zu Fuß", trMap.tr("web.FOOT"), "Era esperado valores iguais, mas  'Zu Fuß' é diferente de " + result3193 + " <trMap.tr('web.FOOT')>")
chamada antiga: assertEquals("Zu Fuß", trMap.tr("web.FOOT"))
nova chamada: assertEquals("Zu Fuß", trMap.tr("web.FOOT"), "Era esperado valores iguais, mas  'Zu Fuß' é diferente de " + result3194 + " <trMap.tr('web.FOOT')>")
chamada antiga: assertEquals("רגל", trMap.tr("web.FOOT"))
nova chamada: assertEquals("רגל", trMap.tr("web.FOOT"), "Era esperado valores iguais, mas  'רגל' é diferente de " + result3195 + " <trMap.tr('web.FOOT')>")
chamada antiga: assertEquals("רגל", trMap.tr("web.FOOT"))
nova chamada: assertEquals("רגל", trMap.tr("web.FOOT"), "Era esperado valores iguais, mas  'רגל' é diferente de " + result3196 + " <trMap.tr('web.FOOT')>")
chamada antiga: assertTrue(Arrays.asList("id", "in").contains(lang))
nova chamada: assertTrue(Arrays.asList("id", "in").contains(lang), "Era esperado verdadeiro, mas " + result3197 + " <Arrays.asList('id', 'in').contains(lang)> é falso")
chamada antiga: assertEquals(lang, SINGLETON.get("in").getLanguage())
nova chamada: assertEquals(lang, SINGLETON.get("in").getLanguage(), "Era esperado valores iguais, mas  lang é diferente de " + result3198 + " <SINGLETON.get('in').getLanguage()>")
chamada antiga: assertEquals(lang, SINGLETON.get("in_ID").getLanguage())
nova chamada: assertEquals(lang, SINGLETON.get("in_ID").getLanguage(), "Era esperado valores iguais, mas  lang é diferente de " + result3199 + " <SINGLETON.get('in_ID').getLanguage()>")
chamada antiga: assertEquals("vi", SINGLETON.get("vi").getLanguage())
nova chamada: assertEquals("vi", SINGLETON.get("vi").getLanguage(), "Era esperado valores iguais, mas  'vi' é diferente de " + result3200 + " <SINGLETON.get('vi').getLanguage()>")
chamada antiga: assertEquals("vi", SINGLETON.get("vi_VN").getLanguage())
nova chamada: assertEquals("vi", SINGLETON.get("vi_VN").getLanguage(), "Era esperado valores iguais, mas  'vi' é diferente de " + result3201 + " <SINGLETON.get('vi_VN').getLanguage()>")
chamada antiga: assertTrue(ptMap.tr("roundabout_exit_onto", "1", "somestreet").contains("somestreet"))
nova chamada: assertTrue(ptMap.tr("roundabout_exit_onto", "1", "somestreet").contains("somestreet"), "Era esperado verdadeiro, mas " + result3202 + " <ptMap.tr('roundabout_exit_onto', '1', 'somestreet').contains('somestreet')> é falso")
chamada antiga: assertTrue(new File("./target/tmp/test/file2 bäh").exists())
nova chamada: assertTrue(new File("./target/tmp/test/file2 bäh").exists(), "Era esperado verdadeiro, mas " + result3203 + " <new File('./target/tmp/test/file2 bäh').exists()> é falso")
chamada antiga: assertTrue(new File("./target/tmp/test/folder1").isDirectory())
nova chamada: assertTrue(new File("./target/tmp/test/folder1").isDirectory(), "Era esperado verdadeiro, mas " + result3204 + " <new File('./target/tmp/test/folder1').isDirectory()> é falso")
chamada antiga: assertTrue(new File("./target/tmp/test/folder1/folder 3").isDirectory())
nova chamada: assertTrue(new File("./target/tmp/test/folder1/folder 3").isDirectory(), "Era esperado verdadeiro, mas " + result3205 + " <new File('./target/tmp/test/folder1/folder 3').isDirectory()> é falso")
chamada antiga: assertTrue(deque.isEmpty())
nova chamada: assertTrue(deque.isEmpty(), "Era esperado verdadeiro, mas " + result3206 + " <deque.isEmpty()> é falso")
chamada antiga: assertEquals(0, deque.getSize())
nova chamada: assertEquals(0, deque.getSize(), "Era esperado valores iguais, mas  0 é diferente de " + result3207 + " <deque.getSize()>")
chamada antiga: assertEquals(1, deque.getSize())
nova chamada: assertEquals(1, deque.getSize(), "Era esperado valores iguais, mas  1 é diferente de " + result3208 + " <deque.getSize()>")
chamada antiga: assertEquals(0, deque.getSize())
nova chamada: assertEquals(0, deque.getSize(), "Era esperado valores iguais, mas  0 é diferente de " + result3209 + " <deque.getSize()>")
chamada antiga: assertEquals(1, deque.getSize())
nova chamada: assertEquals(1, deque.getSize(), "Era esperado valores iguais, mas  1 é diferente de " + result3210 + " <deque.getSize()>")
chamada antiga: assertEquals(60, deque.getSize())
nova chamada: assertEquals(60, deque.getSize(), "Era esperado valores iguais, mas  60 é diferente de " + result3211 + " <deque.getSize()>")
chamada antiga: assertEquals(0, deque.pop())
nova chamada: assertEquals(0, deque.pop(), "Era esperado valores iguais, mas  0 é diferente de " + result3212 + " <deque.pop()>")
chamada antiga: assertEquals(59, deque.getSize())
nova chamada: assertEquals(59, deque.getSize(), "Era esperado valores iguais, mas  59 é diferente de " + result3213 + " <deque.getSize()>")
chamada antiga: assertEquals(1, deque.pop())
nova chamada: assertEquals(1, deque.pop(), "Era esperado valores iguais, mas  1 é diferente de " + result3214 + " <deque.pop()>")
chamada antiga: assertEquals(58, deque.getSize())
nova chamada: assertEquals(58, deque.getSize(), "Era esperado valores iguais, mas  58 é diferente de " + result3215 + " <deque.getSize()>")
chamada antiga: assertEquals(59, deque.getSize())
nova chamada: assertEquals(59, deque.getSize(), "Era esperado valores iguais, mas  59 é diferente de " + result3216 + " <deque.getSize()>")
chamada antiga: assertEquals(60, deque.getSize())
nova chamada: assertEquals(60, deque.getSize(), "Era esperado valores iguais, mas  60 é diferente de " + result3217 + " <deque.getSize()>")
chamada antiga: assertEquals(10, deque.getSize())
nova chamada: assertEquals(10, deque.getSize(), "Era esperado valores iguais, mas  10 é diferente de " + result3218 + " <deque.getSize()>")
chamada antiga: assertEquals(39, deque.getCapacity())
nova chamada: assertEquals(39, deque.getCapacity(), "Era esperado valores iguais, mas  39 é diferente de " + result3219 + " <deque.getCapacity()>")
chamada antiga: assertEquals(11, deque.getSize())
nova chamada: assertEquals(11, deque.getSize(), "Era esperado valores iguais, mas  11 é diferente de " + result3220 + " <deque.getSize()>")
chamada antiga: assertEquals(52, deque.pop())
nova chamada: assertEquals(52, deque.pop(), "Era esperado valores iguais, mas  52 é diferente de " + result3221 + " <deque.pop()>")
chamada antiga: assertEquals(10, deque.getSize())
nova chamada: assertEquals(10, deque.getSize(), "Era esperado valores iguais, mas  10 é diferente de " + result3222 + " <deque.getSize()>")
chamada antiga: assertFalse(iter.next())
nova chamada: assertFalse(iter.next(), "Era esperado falso, mas " + result3223 + " <iter.next()> é verdadeiro ")
chamada antiga: assertFalse(iter.getReverse(carAccessEnc))
nova chamada: assertFalse(iter.getReverse(carAccessEnc), "Era esperado falso, mas " + result3224 + " <iter.getReverse(carAccessEnc)> é verdadeiro ")
chamada antiga: assertFalse(iter.get(carAccessEnc))
nova chamada: assertFalse(iter.get(carAccessEnc), "Era esperado falso, mas " + result3225 + " <iter.get(carAccessEnc)> é verdadeiro ")
chamada antiga: assertFalse(iter.get(carAccessEnc))
nova chamada: assertFalse(iter.get(carAccessEnc), "Era esperado falso, mas " + result3226 + " <iter.get(carAccessEnc)> é verdadeiro ")
chamada antiga: assertFalse(iter.getReverse(carAccessEnc))
nova chamada: assertFalse(iter.getReverse(carAccessEnc), "Era esperado falso, mas " + result3227 + " <iter.getReverse(carAccessEnc)> é verdadeiro ")
chamada antiga: assertFalse(iter.get(carAccessEnc))
nova chamada: assertFalse(iter.get(carAccessEnc), "Era esperado falso, mas " + result3228 + " <iter.get(carAccessEnc)> é verdadeiro ")
chamada antiga: assertFalse(iter.next())
nova chamada: assertFalse(iter.next(), "Era esperado falso, mas " + result3229 + " <iter.next()> é verdadeiro ")
chamada antiga: assertFalse(iter.next())
nova chamada: assertFalse(iter.next(), "Era esperado falso, mas " + result3230 + " <iter.next()> é verdadeiro ")
chamada antiga: assertFalse(iter.next())
nova chamada: assertFalse(iter.next(), "Era esperado falso, mas " + result3231 + " <iter.next()> é verdadeiro ")
chamada antiga: assertFalse(iter.next())
nova chamada: assertFalse(iter.next(), "Era esperado falso, mas " + result3232 + " <iter.next()> é verdadeiro ")
chamada antiga: assertFalse(flags.isEmpty())
nova chamada: assertFalse(flags.isEmpty(), "Era esperado falso, mas " + result3233 + " <flags.isEmpty()> é verdadeiro ")
chamada antiga: assertFalse(instance.hasTag("surface", "now", "not"))
nova chamada: assertFalse(instance.hasTag("surface", "now", "not"), "Era esperado falso, mas " + result3234 + " <instance.hasTag('surface', 'now', 'not')> é verdadeiro ")
chamada antiga: assertFalse(instance.hasTag("test", "xy"))
nova chamada: assertFalse(instance.hasTag("test", "xy"), "Era esperado falso, mas " + result3235 + " <instance.hasTag('test', 'xy')> é verdadeiro ")
chamada antiga: assertFalse(rsp.hasErrors())
nova chamada: assertFalse(rsp.hasErrors(), "Era esperado falso, mas " + result3236 + " <rsp.hasErrors()> é verdadeiro ")
chamada antiga: assertFalse(rsp.hasErrors())
nova chamada: assertFalse(rsp.hasErrors(), "Era esperado falso, mas " + result3237 + " <rsp.hasErrors()> é verdadeiro ")
chamada antiga: assertFalse(rsp.hasErrors())
nova chamada: assertFalse(rsp.hasErrors(), "Era esperado falso, mas " + result3238 + " <rsp.hasErrors()> é verdadeiro ")
chamada antiga: assertFalse(rsp.hasErrors())
nova chamada: assertFalse(rsp.hasErrors(), "Era esperado falso, mas " + result3239 + " <rsp.hasErrors()> é verdadeiro ")
chamada antiga: assertFalse(rsp.hasErrors())
nova chamada: assertFalse(rsp.hasErrors(), "Era esperado falso, mas " + result3240 + " <rsp.hasErrors()> é verdadeiro ")
chamada antiga: assertFalse(rsp.hasErrors())
nova chamada: assertFalse(rsp.hasErrors(), "Era esperado falso, mas " + result3241 + " <rsp.hasErrors()> é verdadeiro ")
chamada antiga: assertFalse(path.hasErrors())
nova chamada: assertFalse(path.hasErrors(), "Era esperado falso, mas " + result3242 + " <path.hasErrors()> é verdadeiro ")
chamada antiga: assertFalse(pathCH.hasErrors())
nova chamada: assertFalse(pathCH.hasErrors(), "Era esperado falso, mas " + result3243 + " <pathCH.hasErrors()> é verdadeiro ")
chamada antiga: assertFalse(response.hasErrors())
nova chamada: assertFalse(response.hasErrors(), "Era esperado falso, mas " + result3244 + " <response.hasErrors()> é verdadeiro ")
chamada antiga: assertFalse(response.hasErrors())
nova chamada: assertFalse(response.hasErrors(), "Era esperado falso, mas " + result3245 + " <response.hasErrors()> é verdadeiro ")
chamada antiga: assertEquals(32, pointList.size())
nova chamada: assertEquals(32, pointList.size(), "Era esperado valores iguais, mas  32 é diferente de " + result3246 + " <pointList.size()>")
chamada antiga: assertEquals(20, pointList.size())
nova chamada: assertEquals(20, pointList.size(), "Era esperado valores iguais, mas  20 é diferente de " + result3247 + " <pointList.size()>")
chamada antiga: assertEquals(32, pointList.size())
nova chamada: assertEquals(32, pointList.size(), "Era esperado valores iguais, mas  32 é diferente de " + result3248 + " <pointList.size()>")
chamada antiga: assertEquals(20, pointList.size())
nova chamada: assertEquals(20, pointList.size(), "Era esperado valores iguais, mas  20 é diferente de " + result3249 + " <pointList.size()>")
chamada antiga: assertEquals(20, pointList.size())
nova chamada: assertEquals(20, pointList.size(), "Era esperado valores iguais, mas  20 é diferente de " + result3250 + " <pointList.size()>")
chamada antiga: assertEquals(removed1, removed2)
nova chamada: assertEquals(removed1, removed2, "Era esperado valores iguais, mas  removed1 é diferente de " + " removed2")
chamada antiga: assertEquals(13, pointList.size())
nova chamada: assertEquals(13, pointList.size(), "Era esperado valores iguais, mas  13 é diferente de " + result3251 + " <pointList.size()>")
chamada antiga: assertEquals(11, pointList.size())
nova chamada: assertEquals(11, pointList.size(), "Era esperado valores iguais, mas  11 é diferente de " + result3252 + " <pointList.size()>")
chamada antiga: assertEquals("(50.203764443183644,9.961074440801317), (50.20318963087774,9.960999562464645), (50.202952888673984,9.96094144793469), (50.20267889356641,9.96223002587773), (50.201853928011374,9.961859918278305), " + "(50.20138565901039,9.961668810881722), (50.20128507617008,9.96216874485095), (50.20088553877664,9.961953795595925), (50.200686794534775,9.961899033827313), (50.20014066696481,9.961716680863127), (50.199798499043254,9.961588158344957)", pointList.toString())
nova chamada: assertEquals("(50.203764443183644,9.961074440801317), (50.20318963087774,9.960999562464645), (50.202952888673984,9.96094144793469), (50.20267889356641,9.96223002587773), (50.201853928011374,9.961859918278305), " + "(50.20138565901039,9.961668810881722), (50.20128507617008,9.96216874485095), (50.20088553877664,9.961953795595925), (50.200686794534775,9.961899033827313), (50.20014066696481,9.961716680863127), (50.199798499043254,9.961588158344957)", pointList.toString(), "Era esperado valores iguais, mas  '(50.203764443183644,9.961074440801317), (50.20318963087774,9.960999562464645), (50.202952888673984,9.96094144793469), (50.20267889356641,9.96223002587773), (50.201853928011374,9.961859918278305), ' + '(50.20138565901039,9.961668810881722), (50.20128507617008,9.96216874485095), (50.20088553877664,9.961953795595925), (50.200686794534775,9.961899033827313), (50.20014066696481,9.961716680863127), (50.199798499043254,9.961588158344957)' é diferente de " + result3253 + " <pointList.toString()>")
chamada antiga: assertEquals(8, pl.size())
nova chamada: assertEquals(8, pl.size(), "Era esperado valores iguais, mas  8 é diferente de " + result3254 + " <pl.size()>")
chamada antiga: assertEquals(expected, given)
nova chamada: assertEquals(expected, given, "Era esperado valores iguais, mas  expected é diferente de " + " given")
chamada antiga: assertEquals("(0.0,0.0,0.0), (0.03,0.0,30.0), (0.04,0.0,50.0)", pointList.toString())
nova chamada: assertEquals("(0.0,0.0,0.0), (0.03,0.0,30.0), (0.04,0.0,50.0)", pointList.toString(), "Era esperado valores iguais, mas  '(0.0,0.0,0.0), (0.03,0.0,30.0), (0.04,0.0,50.0)' é diferente de " + result3255 + " <pointList.toString()>")
chamada antiga: assertEquals("(0.0,0.0,0.0), (0.04,0.0,50.0)", pointList.toString())
nova chamada: assertEquals("(0.0,0.0,0.0), (0.04,0.0,50.0)", pointList.toString(), "Era esperado valores iguais, mas  '(0.0,0.0,0.0), (0.04,0.0,50.0)' é diferente de " + result3256 + " <pointList.toString()>")
chamada antiga: assertEquals("(0.0,0.0,0.0), (0.03,0.0,30.0), (0.04,0.0,50.0)", pointList.toString())
nova chamada: assertEquals("(0.0,0.0,0.0), (0.03,0.0,30.0), (0.04,0.0,50.0)", pointList.toString(), "Era esperado valores iguais, mas  '(0.0,0.0,0.0), (0.03,0.0,30.0), (0.04,0.0,50.0)' é diferente de " + result3257 + " <pointList.toString()>")
chamada antiga: assertEquals("(0.0,0.0,0.0), (0.0,1.0,14.0), (1.0,1.0,20.0)", pointList.toString())
nova chamada: assertEquals("(0.0,0.0,0.0), (0.0,1.0,14.0), (1.0,1.0,20.0)", pointList.toString(), "Era esperado valores iguais, mas  '(0.0,0.0,0.0), (0.0,1.0,14.0), (1.0,1.0,20.0)' é diferente de " + result3258 + " <pointList.toString()>")
chamada antiga: assertEquals("(0.0,0.0,0.0), (0.03,0.0,30.0), (0.0,0.0,0.0)", pointList.toString())
nova chamada: assertEquals("(0.0,0.0,0.0), (0.03,0.0,30.0), (0.0,0.0,0.0)", pointList.toString(), "Era esperado valores iguais, mas  '(0.0,0.0,0.0), (0.03,0.0,30.0), (0.0,0.0,0.0)' é diferente de " + result3259 + " <pointList.toString()>")
chamada antiga: assertEquals("(0.0,0.0), (0.03,0.0), (0.0,0.0)", pointList.toString())
nova chamada: assertEquals("(0.0,0.0), (0.03,0.0), (0.0,0.0)", pointList.toString(), "Era esperado valores iguais, mas  '(0.0,0.0), (0.03,0.0), (0.0,0.0)' é diferente de " + result3260 + " <pointList.toString()>")
chamada antiga: assertEquals("0010101010101010101010101010101010101010101010101010101010101010", bitUtil.toBitString(Long.MAX_VALUE / 3))
nova chamada: assertEquals("0010101010101010101010101010101010101010101010101010101010101010", bitUtil.toBitString(Long.MAX_VALUE / 3), "Era esperado valores iguais, mas  '0010101010101010101010101010101010101010101010101010101010101010' é diferente de " + result3261 + " <bitUtil.toBitString(Long.MAX_VALUE / 3)>")
chamada antiga: assertEquals("0111111111111111111111111111111111111111111111111111111111111111", bitUtil.toBitString(Long.MAX_VALUE))
nova chamada: assertEquals("0111111111111111111111111111111111111111111111111111111111111111", bitUtil.toBitString(Long.MAX_VALUE), "Era esperado valores iguais, mas  '0111111111111111111111111111111111111111111111111111111111111111' é diferente de " + result3262 + " <bitUtil.toBitString(Long.MAX_VALUE)>")
chamada antiga: assertEquals("00101010101010101010101010101010", bitUtil.toBitString(bitUtil.fromInt(Integer.MAX_VALUE / 3)))
nova chamada: assertEquals("00101010101010101010101010101010", bitUtil.toBitString(bitUtil.fromInt(Integer.MAX_VALUE / 3)), "Era esperado valores iguais, mas  '00101010101010101010101010101010' é diferente de " + result3263 + " <bitUtil.toBitString(bitUtil.fromInt(Integer.MAX_VALUE / 3))>")
chamada antiga: assertEquals("10000000000000000000000000000000", bitUtil.toBitString(1L << 63, 32))
nova chamada: assertEquals("10000000000000000000000000000000", bitUtil.toBitString(1L << 63, 32), "Era esperado valores iguais, mas  '10000000000000000000000000000000' é diferente de " + result3264 + " <bitUtil.toBitString(1L << 63, 32)>")
chamada antiga: assertEquals("00000000000000000000000000000001", bitUtil.toBitString((1L << 32), 32))
nova chamada: assertEquals("00000000000000000000000000000001", bitUtil.toBitString((1L << 32), 32), "Era esperado valores iguais, mas  '00000000000000000000000000000001' é diferente de " + result3265 + " <bitUtil.toBitString((1L << 32), 32)>")
chamada antiga: assertEquals(str + "0000000", bitUtil.toBitString(bitUtil.fromBitString(str)))
nova chamada: assertEquals(str + "0000000", bitUtil.toBitString(bitUtil.fromBitString(str)), "Era esperado valores iguais, mas  str + '0000000' é diferente de " + result3266 + " <bitUtil.toBitString(bitUtil.fromBitString(str))>")
chamada antiga: assertEquals(str, bitUtil.toBitString(bitUtil.fromBitString(str)))
nova chamada: assertEquals(str, bitUtil.toBitString(bitUtil.fromBitString(str)), "Era esperado valores iguais, mas  str é diferente de " + result3267 + " <bitUtil.toBitString(bitUtil.fromBitString(str))>")
chamada antiga: assertEquals(str + "0", bitUtil.toBitString(bitUtil.fromBitString(str)))
nova chamada: assertEquals(str + "0", bitUtil.toBitString(bitUtil.fromBitString(str)), "Era esperado valores iguais, mas  str + '0' é diferente de " + result3268 + " <bitUtil.toBitString(bitUtil.fromBitString(str))>")
chamada antiga: assertEquals("0010101010101010101010101010101010101010101010101010101010101010", bitUtil.toBitString(Long.MAX_VALUE / 3))
nova chamada: assertEquals("0010101010101010101010101010101010101010101010101010101010101010", bitUtil.toBitString(Long.MAX_VALUE / 3), "Era esperado valores iguais, mas  '0010101010101010101010101010101010101010101010101010101010101010' é diferente de " + result3269 + " <bitUtil.toBitString(Long.MAX_VALUE / 3)>")
chamada antiga: assertEquals("0111111111111111111111111111111111111111111111111111111111111111", bitUtil.toBitString(Long.MAX_VALUE))
nova chamada: assertEquals("0111111111111111111111111111111111111111111111111111111111111111", bitUtil.toBitString(Long.MAX_VALUE), "Era esperado valores iguais, mas  '0111111111111111111111111111111111111111111111111111111111111111' é diferente de " + result3270 + " <bitUtil.toBitString(Long.MAX_VALUE)>")
chamada antiga: assertEquals("00101010101010101010101010101010", bitUtil.toBitString(bitUtil.fromInt(Integer.MAX_VALUE / 3)))
nova chamada: assertEquals("00101010101010101010101010101010", bitUtil.toBitString(bitUtil.fromInt(Integer.MAX_VALUE / 3)), "Era esperado valores iguais, mas  '00101010101010101010101010101010' é diferente de " + result3271 + " <bitUtil.toBitString(bitUtil.fromInt(Integer.MAX_VALUE / 3))>")
chamada antiga: assertEquals("10000000000000000000000000000000", bitUtil.toBitString((1L << 63), 32))
nova chamada: assertEquals("10000000000000000000000000000000", bitUtil.toBitString((1L << 63), 32), "Era esperado valores iguais, mas  '10000000000000000000000000000000' é diferente de " + result3272 + " <bitUtil.toBitString((1L << 63), 32)>")
chamada antiga: assertEquals("00000000000000000000000000000001", bitUtil.toBitString(1L << 32, 32))
nova chamada: assertEquals("00000000000000000000000000000001", bitUtil.toBitString(1L << 32, 32), "Era esperado valores iguais, mas  '00000000000000000000000000000001' é diferente de " + result3273 + " <bitUtil.toBitString(1L << 32, 32)>")
chamada antiga: assertEquals(str + "0000000", bitUtil.toBitString(bitUtil.fromBitString(str)))
nova chamada: assertEquals(str + "0000000", bitUtil.toBitString(bitUtil.fromBitString(str)), "Era esperado valores iguais, mas  str + '0000000' é diferente de " + result3274 + " <bitUtil.toBitString(bitUtil.fromBitString(str))>")
chamada antiga: assertEquals(str, bitUtil.toBitString(bitUtil.fromBitString(str)))
nova chamada: assertEquals(str, bitUtil.toBitString(bitUtil.fromBitString(str)), "Era esperado valores iguais, mas  str é diferente de " + result3275 + " <bitUtil.toBitString(bitUtil.fromBitString(str))>")
chamada antiga: assertEquals(str + "0", bitUtil.toBitString(bitUtil.fromBitString(str)))
nova chamada: assertEquals(str + "0", bitUtil.toBitString(bitUtil.fromBitString(str)), "Era esperado valores iguais, mas  str + '0' é diferente de " + result3276 + " <bitUtil.toBitString(bitUtil.fromBitString(str))>")
chamada antiga: assertEquals(Integer.MAX_VALUE, bitUtil.toInt(bytes))
nova chamada: assertEquals(Integer.MAX_VALUE, bitUtil.toInt(bytes), "Era esperado valores iguais, mas  Integer.MAX_VALUE é diferente de " + result3277 + " <bitUtil.toInt(bytes)>")
chamada antiga: assertEquals(Integer.MAX_VALUE / 3, bitUtil.toInt(bytes))
nova chamada: assertEquals(Integer.MAX_VALUE / 3, bitUtil.toInt(bytes), "Era esperado valores iguais, mas  Integer.MAX_VALUE / 3 é diferente de " + result3278 + " <bitUtil.toInt(bytes)>")
chamada antiga: assertEquals(Short.MAX_VALUE, bitUtil.toShort(bytes))
nova chamada: assertEquals(Short.MAX_VALUE, bitUtil.toShort(bytes), "Era esperado valores iguais, mas  Short.MAX_VALUE é diferente de " + result3279 + " <bitUtil.toShort(bytes)>")
chamada antiga: assertEquals(Short.MAX_VALUE / 3, bitUtil.toShort(bytes))
nova chamada: assertEquals(Short.MAX_VALUE / 3, bitUtil.toShort(bytes), "Era esperado valores iguais, mas  Short.MAX_VALUE / 3 é diferente de " + result3280 + " <bitUtil.toShort(bytes)>")
chamada antiga: assertEquals(-123, bitUtil.toShort(bytes))
nova chamada: assertEquals(-123, bitUtil.toShort(bytes), "Era esperado valores iguais, mas  -123 é diferente de " + result3281 + " <bitUtil.toShort(bytes)>")
chamada antiga: assertEquals(0xFF | 0xFF, bitUtil.toShort(bytes))
nova chamada: assertEquals(0xFF | 0xFF, bitUtil.toShort(bytes), "Era esperado valores iguais, mas  0xFF | 0xFF é diferente de " + result3282 + " <bitUtil.toShort(bytes)>")
chamada antiga: assertEquals(Long.MAX_VALUE, bitUtil.toLong(bytes))
nova chamada: assertEquals(Long.MAX_VALUE, bitUtil.toLong(bytes), "Era esperado valores iguais, mas  Long.MAX_VALUE é diferente de " + result3283 + " <bitUtil.toLong(bytes)>")
chamada antiga: assertEquals(Long.MAX_VALUE / 7, bitUtil.toLong(bytes))
nova chamada: assertEquals(Long.MAX_VALUE / 7, bitUtil.toLong(bytes), "Era esperado valores iguais, mas  Long.MAX_VALUE / 7 é diferente de " + result3284 + " <bitUtil.toLong(bytes)>")
chamada antiga: assertEquals("1", bitUtil.toLastBitString(1L, 1))
nova chamada: assertEquals("1", bitUtil.toLastBitString(1L, 1), "Era esperado valores iguais, mas  '1' é diferente de " + result3285 + " <bitUtil.toLastBitString(1L, 1)>")
chamada antiga: assertEquals("01", bitUtil.toLastBitString(1L, 2))
nova chamada: assertEquals("01", bitUtil.toLastBitString(1L, 2), "Era esperado valores iguais, mas  '01' é diferente de " + result3286 + " <bitUtil.toLastBitString(1L, 2)>")
chamada antiga: assertEquals("001", bitUtil.toLastBitString(1L, 3))
nova chamada: assertEquals("001", bitUtil.toLastBitString(1L, 3), "Era esperado valores iguais, mas  '001' é diferente de " + result3287 + " <bitUtil.toLastBitString(1L, 3)>")
chamada antiga: assertEquals("010", bitUtil.toLastBitString(2L, 3))
nova chamada: assertEquals("010", bitUtil.toLastBitString(2L, 3), "Era esperado valores iguais, mas  '010' é diferente de " + result3288 + " <bitUtil.toLastBitString(2L, 3)>")
chamada antiga: assertEquals("011", bitUtil.toLastBitString(3L, 3))
nova chamada: assertEquals("011", bitUtil.toLastBitString(3L, 3), "Era esperado valores iguais, mas  '011' é diferente de " + result3289 + " <bitUtil.toLastBitString(3L, 3)>")
chamada antiga: assertEquals(Arrays.asList("continue onto 0-1", "turn right onto 1-4", "turn left onto 7-8", "arrive at destination"), tmpList)
nova chamada: assertEquals(Arrays.asList("continue onto 0-1", "turn right onto 1-4", "turn left onto 7-8", "arrive at destination"), tmpList, "Era esperado valores iguais, mas " + result3290 + " <Arrays.asList('continue onto 0-1', 'turn right onto 1-4', 'turn left onto 7-8', 'arrive at destination')> é diferente de " + " tmpList")
chamada antiga: assertEquals(Arrays.asList("dem Straßenverlauf von 0-1 folgen", "rechts abbiegen auf 1-4", "links abbiegen auf 7-8", "Ziel erreicht"), tmpList)
nova chamada: assertEquals(Arrays.asList("dem Straßenverlauf von 0-1 folgen", "rechts abbiegen auf 1-4", "links abbiegen auf 7-8", "Ziel erreicht"), tmpList, "Era esperado valores iguais, mas " + result3291 + " <Arrays.asList('dem Straßenverlauf von 0-1 folgen', 'rechts abbiegen auf 1-4', 'links abbiegen auf 7-8', 'Ziel erreicht')> é diferente de " + " tmpList")
chamada antiga: assertEquals(10, points.size())
nova chamada: assertEquals(10, points.size(), "Era esperado valores iguais, mas  10 é diferente de " + result3292 + " <points.size()>")
chamada antiga: assertEquals(IntArrayList.from(6, 7, 8, 5, 2), p.calcNodes())
nova chamada: assertEquals(IntArrayList.from(6, 7, 8, 5, 2), p.calcNodes(), "Era esperado valores iguais, mas " + result3293 + " <IntArrayList.from(6, 7, 8, 5, 2)> é diferente de " + result3294 + " <p.calcNodes()>")
chamada antiga: assertEquals(Arrays.asList("continue onto 6-7", "turn left onto 5-8", "arrive at destination"), tmpList)
nova chamada: assertEquals(Arrays.asList("continue onto 6-7", "turn left onto 5-8", "arrive at destination"), tmpList, "Era esperado valores iguais, mas " + result3295 + " <Arrays.asList('continue onto 6-7', 'turn left onto 5-8', 'arrive at destination')> é diferente de " + " tmpList")
chamada antiga: assertEquals(1, wayList.size())
nova chamada: assertEquals(1, wayList.size(), "Era esperado valores iguais, mas  1 é diferente de " + result3296 + " <wayList.size()>")
chamada antiga: assertEquals("arrive at destination", wayList.get(0).getTurnDescription(usTR))
nova chamada: assertEquals("arrive at destination", wayList.get(0).getTurnDescription(usTR), "Era esperado valores iguais, mas  'arrive at destination' é diferente de " + result3297 + " <wayList.get(0).getTurnDescription(usTR)>")
chamada antiga: assertEquals(Arrays.asList("continue onto 2-4", "turn slight right onto 3-4", "arrive at destination"), tmpList)
nova chamada: assertEquals(Arrays.asList("continue onto 2-4", "turn slight right onto 3-4", "arrive at destination"), tmpList, "Era esperado valores iguais, mas " + result3298 + " <Arrays.asList('continue onto 2-4', 'turn slight right onto 3-4', 'arrive at destination')> é diferente de " + " tmpList")
chamada antiga: assertEquals(Arrays.asList("continue onto 3-4", "keep right onto 4-5", "arrive at destination"), tmpList)
nova chamada: assertEquals(Arrays.asList("continue onto 3-4", "keep right onto 4-5", "arrive at destination"), tmpList, "Era esperado valores iguais, mas " + result3299 + " <Arrays.asList('continue onto 3-4', 'keep right onto 4-5', 'arrive at destination')> é diferente de " + " tmpList")
chamada antiga: assertEquals(Arrays.asList("continue onto street", "turn right onto street", "arrive at destination"), tmpList)
nova chamada: assertEquals(Arrays.asList("continue onto street", "turn right onto street", "arrive at destination"), tmpList, "Era esperado valores iguais, mas " + result3300 + " <Arrays.asList('continue onto street', 'turn right onto street', 'arrive at destination')> é diferente de " + " tmpList")
chamada antiga: assertEquals(Arrays.asList("continue", "arrive at destination"), tmpList)
nova chamada: assertEquals(Arrays.asList("continue", "arrive at destination"), tmpList, "Era esperado valores iguais, mas " + result3301 + " <Arrays.asList('continue', 'arrive at destination')> é diferente de " + " tmpList")
chamada antiga: assertEquals(Arrays.asList("continue", "arrive at destination"), tmpList)
nova chamada: assertEquals(Arrays.asList("continue", "arrive at destination"), tmpList, "Era esperado valores iguais, mas " + result3302 + " <Arrays.asList('continue', 'arrive at destination')> é diferente de " + " tmpList")
chamada antiga: assertEquals(Arrays.asList("continue", "turn left", "arrive at destination"), tmpList)
nova chamada: assertEquals(Arrays.asList("continue", "turn left", "arrive at destination"), tmpList, "Era esperado valores iguais, mas " + result3303 + " <Arrays.asList('continue', 'turn left', 'arrive at destination')> é diferente de " + " tmpList")
chamada antiga: assertEquals(3, wayList.size())
nova chamada: assertEquals(3, wayList.size(), "Era esperado valores iguais, mas  3 é diferente de " + result3304 + " <wayList.size()>")
chamada antiga: assertEquals(20, wayList.get(1).getDistance())
nova chamada: assertEquals(20, wayList.get(1).getDistance(), "Era esperado valores iguais, mas  20 é diferente de " + result3305 + " <wayList.get(1).getDistance()>")
chamada antiga: assertEquals(Arrays.asList("continue", "turn right", "arrive at destination"), tmpList)
nova chamada: assertEquals(Arrays.asList("continue", "turn right", "arrive at destination"), tmpList, "Era esperado valores iguais, mas " + result3306 + " <Arrays.asList('continue', 'turn right', 'arrive at destination')> é diferente de " + " tmpList")
chamada antiga: assertEquals(3, wayList.size())
nova chamada: assertEquals(3, wayList.size(), "Era esperado valores iguais, mas  3 é diferente de " + result3307 + " <wayList.size()>")
chamada antiga: assertEquals(20, wayList.get(1).getDistance())
nova chamada: assertEquals(20, wayList.get(1).getDistance(), "Era esperado valores iguais, mas  20 é diferente de " + result3308 + " <wayList.get(1).getDistance()>")
chamada antiga: assertTrue(p.isFound())
nova chamada: assertTrue(p.isFound(), "Era esperado verdadeiro, mas " + result3309 + " <p.isFound()> é falso")
chamada antiga: assertEquals(Arrays.asList("continue onto myroad", "keep right onto myroad", "arrive at destination"), tmpList)
nova chamada: assertEquals(Arrays.asList("continue onto myroad", "keep right onto myroad", "arrive at destination"), tmpList, "Era esperado valores iguais, mas " + result3310 + " <Arrays.asList('continue onto myroad', 'keep right onto myroad', 'arrive at destination')> é diferente de " + " tmpList")
chamada antiga: assertEquals(3, wayList.size())
nova chamada: assertEquals(3, wayList.size(), "Era esperado valores iguais, mas  3 é diferente de " + result3311 + " <wayList.size()>")
chamada antiga: assertEquals(20, wayList.get(1).getDistance())
nova chamada: assertEquals(20, wayList.get(1).getDistance(), "Era esperado valores iguais, mas  20 é diferente de " + result3312 + " <wayList.get(1).getDistance()>")
chamada antiga: assertEquals(Arrays.asList("continue onto myroad", "keep left onto myroad", "arrive at destination"), tmpList)
nova chamada: assertEquals(Arrays.asList("continue onto myroad", "keep left onto myroad", "arrive at destination"), tmpList, "Era esperado valores iguais, mas " + result3313 + " <Arrays.asList('continue onto myroad', 'keep left onto myroad', 'arrive at destination')> é diferente de " + " tmpList")
chamada antiga: assertEquals(3, wayList.size())
nova chamada: assertEquals(3, wayList.size(), "Era esperado valores iguais, mas  3 é diferente de " + result3314 + " <wayList.size()>")
chamada antiga: assertEquals(20, wayList.get(1).getDistance())
nova chamada: assertEquals(20, wayList.get(1).getDistance(), "Era esperado valores iguais, mas  20 é diferente de " + result3315 + " <wayList.get(1).getDistance()>")
chamada antiga: assertEquals(Arrays.asList("continue", "keep right", "arrive at destination"), tmpList)
nova chamada: assertEquals(Arrays.asList("continue", "keep right", "arrive at destination"), tmpList, "Era esperado valores iguais, mas " + result3316 + " <Arrays.asList('continue', 'keep right', 'arrive at destination')> é diferente de " + " tmpList")
chamada antiga: assertEquals(0, il.size())
nova chamada: assertEquals(0, il.size(), "Era esperado valores iguais, mas  0 é diferente de " + result3317 + " <il.size()>")
chamada antiga: assertEquals("2-3", Instructions.find(wayList, 15.05, 10, 1000).getName())
nova chamada: assertEquals("2-3", Instructions.find(wayList, 15.05, 10, 1000).getName(), "Era esperado valores iguais, mas  '2-3' é diferente de " + result3318 + " <Instructions.find(wayList, 15.05, 10, 1000).getName()>")
chamada antiga: assertEquals("2-3", Instructions.find(wayList, 15.05, 10.001, 1000).getName())
nova chamada: assertEquals("2-3", Instructions.find(wayList, 15.05, 10.001, 1000).getName(), "Era esperado valores iguais, mas  '2-3' é diferente de " + result3319 + " <Instructions.find(wayList, 15.05, 10.001, 1000).getName()>")
chamada antiga: assertEquals("3-4", Instructions.find(wayList, 15.099, 9.9, 1000).getName())
nova chamada: assertEquals("3-4", Instructions.find(wayList, 15.099, 9.9, 1000).getName(), "Era esperado valores iguais, mas  '3-4' é diferente de " + result3320 + " <Instructions.find(wayList, 15.099, 9.9, 1000).getName()>")
chamada antiga: assertNull(Instructions.find(wayList, 50.8, 50.25, 1000))
nova chamada: assertNull(Instructions.find(wayList, 50.8, 50.25, 1000), "Era esperado nulo, mas " + result3321 + " <Instructions.find(wayList, 50.8, 50.25, 1000)> não é nulo")
chamada antiga: assertEquals(Helper.createPointList(), PointList.EMPTY)
nova chamada: assertEquals(Helper.createPointList(), PointList.EMPTY, "Era esperado valores iguais, mas " + result3322 + " <Helper.createPointList()> é diferente de " + " PointList.EMPTY")
chamada antiga: assertEquals(list1, list2)
nova chamada: assertEquals(list1, list2, "Era esperado valores iguais, mas  list1 é diferente de " + " list2")
chamada antiga: assertEquals(clonedList, instance.clone(true))
nova chamada: assertEquals(clonedList, instance.clone(true), "Era esperado valores iguais, mas  clonedList é diferente de " + result3323 + " <instance.clone(true)>")
chamada antiga: assertEquals(7, instance.size())
nova chamada: assertEquals(7, instance.size(), "Era esperado valores iguais, mas  7 é diferente de " + result3324 + " <instance.size()>")
chamada antiga: assertEquals(10, instance.getCapacity())
nova chamada: assertEquals(10, instance.getCapacity(), "Era esperado valores iguais, mas  10 é diferente de " + result3325 + " <instance.getCapacity()>")
chamada antiga: assertEquals(7, instance.size())
nova chamada: assertEquals(7, instance.size(), "Era esperado valores iguais, mas  7 é diferente de " + result3326 + " <instance.size()>")
chamada antiga: assertEquals(10, instance.getCapacity())
nova chamada: assertEquals(10, instance.getCapacity(), "Era esperado valores iguais, mas  10 é diferente de " + result3327 + " <instance.getCapacity()>")
chamada antiga: assertEquals(12, instance.size())
nova chamada: assertEquals(12, instance.size(), "Era esperado valores iguais, mas  12 é diferente de " + result3328 + " <instance.size()>")
chamada antiga: assertEquals(24, instance.getCapacity())
nova chamada: assertEquals(24, instance.getCapacity(), "Era esperado valores iguais, mas  24 é diferente de " + result3329 + " <instance.getCapacity()>")
chamada antiga: assertEquals(10, list.size())
nova chamada: assertEquals(10, list.size(), "Era esperado valores iguais, mas  10 é diferente de " + result3330 + " <list.size()>")
chamada antiga: assertEquals(9, list.size())
nova chamada: assertEquals(9, list.size(), "Era esperado valores iguais, mas  9 é diferente de " + result3331 + " <list.size()>")
chamada antiga: assertEquals(0, list.size())
nova chamada: assertEquals(0, list.size(), "Era esperado valores iguais, mas  0 é diferente de " + result3332 + " <list.size()>")
chamada antiga: assertEquals(10, list.size())
nova chamada: assertEquals(10, list.size(), "Era esperado valores iguais, mas  10 é diferente de " + result3333 + " <list.size()>")
chamada antiga: assertEquals(20, list.getCapacity())
nova chamada: assertEquals(20, list.getCapacity(), "Era esperado valores iguais, mas  20 é diferente de " + result3334 + " <list.getCapacity()>")
chamada antiga: assertEquals(1, copy.size())
nova chamada: assertEquals(1, copy.size(), "Era esperado valores iguais, mas  1 é diferente de " + result3335 + " <copy.size()>")
chamada antiga: assertEquals(1, copy.getCapacity())
nova chamada: assertEquals(1, copy.getCapacity(), "Era esperado valores iguais, mas  1 é diferente de " + result3336 + " <copy.getCapacity()>")
chamada antiga: assertEquals(500, pl2.size())
nova chamada: assertEquals(500, pl2.size(), "Era esperado valores iguais, mas  500 é diferente de " + result3337 + " <pl2.size()>")
chamada antiga: assertTrue(pl1.isImmutable())
nova chamada: assertTrue(pl1.isImmutable(), "Era esperado verdadeiro, mas " + result3338 + " <pl1.isImmutable()> é falso")
chamada antiga: assertEquals(100, pl3.size())
nova chamada: assertEquals(100, pl3.size(), "Era esperado valores iguais, mas  100 é diferente de " + result3339 + " <pl3.size()>")
chamada antiga: assertTrue(pl1.equals(pl4))
nova chamada: assertTrue(pl1.equals(pl4), "Era esperado verdadeiro, mas " + result3340 + " <pl1.equals(pl4)> é falso")
chamada antiga: assertTrue(pl2.equals(pl5))
nova chamada: assertTrue(pl2.equals(pl5), "Era esperado verdadeiro, mas " + result3341 + " <pl2.equals(pl5)> é falso")
chamada antiga: assertEquals("(0.0,0.0,0.0), (1.0,1.0,1.0), (2.0,2.0,2.0)", pl.toString())
nova chamada: assertEquals("(0.0,0.0,0.0), (1.0,1.0,1.0), (2.0,2.0,2.0)", pl.toString(), "Era esperado valores iguais, mas  '(0.0,0.0,0.0), (1.0,1.0,1.0), (2.0,2.0,2.0)' é diferente de " + result3342 + " <pl.toString()>")
chamada antiga: assertEquals("(1.0,1.0,1.0), (2.0,2.0,2.0)", pl.shallowCopy(1, 3, false).toString())
nova chamada: assertEquals("(1.0,1.0,1.0), (2.0,2.0,2.0)", pl.shallowCopy(1, 3, false).toString(), "Era esperado valores iguais, mas  '(1.0,1.0,1.0), (2.0,2.0,2.0)' é diferente de " + result3343 + " <pl.shallowCopy(1, 3, false).toString()>")
chamada antiga: assertEquals(shallowPl, clonedPl)
nova chamada: assertEquals(shallowPl, clonedPl, "Era esperado valores iguais, mas  shallowPl é diferente de " + " clonedPl")
chamada antiga: assertNotEquals(shallowPl, clonedPl)
nova chamada: assertNotEquals(shallowPl, clonedPl, "Era esperado valores diferentes, mas  shallowPl é igual a " + " clonedPl")
chamada antiga: assertEquals(shallowPl, copiedPl)
nova chamada: assertEquals(shallowPl, copiedPl, "Era esperado valores iguais, mas  shallowPl é diferente de " + " copiedPl")
chamada antiga: assertNotEquals(shallowPl, copiedPl)
nova chamada: assertNotEquals(shallowPl, copiedPl, "Era esperado valores diferentes, mas  shallowPl é igual a " + " copiedPl")
chamada antiga: assertEquals(3, pl.toLineString(true).getNumPoints())
nova chamada: assertEquals(3, pl.toLineString(true).getNumPoints(), "Era esperado valores iguais, mas  3 é diferente de " + result3344 + " <pl.toLineString(true).getNumPoints()>")
chamada antiga: assertEquals(2, pl.shallowCopy(1, 3, false).toLineString(true).getNumPoints())
nova chamada: assertEquals(2, pl.shallowCopy(1, 3, false).toLineString(true).getNumPoints(), "Era esperado valores iguais, mas  2 é diferente de " + result3345 + " <pl.shallowCopy(1, 3, false).toLineString(true).getNumPoints()>")
chamada antiga: assertEquals(0, PointList.EMPTY.toLineString(false).getNumPoints())
nova chamada: assertEquals(0, PointList.EMPTY.toLineString(false).getNumPoints(), "Era esperado valores iguais, mas  0 é diferente de " + result3346 + " <PointList.EMPTY.toLineString(false).getNumPoints()>")
chamada antiga: assertEquals(2, oneLength.toLineString(false).getNumPoints())
nova chamada: assertEquals(2, oneLength.toLineString(false).getNumPoints(), "Era esperado valores iguais, mas  2 é diferente de " + result3347 + " <oneLength.toLineString(false).getNumPoints()>")
chamada antiga: assertTrue(counter > 0)
nova chamada: assertTrue(counter > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(g.getNodes(), counter)
nova chamada: assertEquals(g.getNodes(), counter, "Era esperado valores iguais, mas " + result3348 + " <g.getNodes()> é diferente de " + " counter")
chamada antiga: assertEquals("[0, 5, 3, 2, 1, 10, 8, 7, 6, 9, 4]", list.toString())
nova chamada: assertEquals("[0, 5, 3, 2, 1, 10, 8, 7, 6, 9, 4]", list.toString(), "Era esperado valores iguais, mas  '[0, 5, 3, 2, 1, 10, 8, 7, 6, 9, 4]' é diferente de " + result3349 + " <list.toString()>")
chamada antiga: assertTrue(counter > 0)
nova chamada: assertTrue(counter > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("[1, 5, 2, 6, 3, 4]", list.toString())
nova chamada: assertEquals("[1, 5, 2, 6, 3, 4]", list.toString(), "Era esperado valores iguais, mas  '[1, 5, 2, 6, 3, 4]' é diferente de " + result3350 + " <list.toString()>")
chamada antiga: assertTrue(new Circle(10, 10, 120000).intersects(new BBox(9, 11, 8, 9)))
nova chamada: assertTrue(new Circle(10, 10, 120000).intersects(new BBox(9, 11, 8, 9)), "Era esperado verdadeiro, mas " + result3351 + " <new Circle(10, 10, 120000).intersects(new BBox(9, 11, 8, 9))> é falso")
chamada antiga: assertFalse(new Circle(10, 10, 110000).intersects(new BBox(9, 11, 8, 9)))
nova chamada: assertFalse(new Circle(10, 10, 110000).intersects(new BBox(9, 11, 8, 9)), "Era esperado falso, mas " + result3352 + " <new Circle(10, 10, 110000).intersects(new BBox(9, 11, 8, 9))> é verdadeiro ")
chamada antiga: assertFalse(circle.intersects(pointList))
nova chamada: assertFalse(circle.intersects(pointList), "Era esperado falso, mas " + result3353 + " <circle.intersects(pointList)> é verdadeiro ")
chamada antiga: assertTrue(circle.intersects(pointList))
nova chamada: assertTrue(circle.intersects(pointList), "Era esperado verdadeiro, mas " + result3354 + " <circle.intersects(pointList)> é falso")
chamada antiga: assertTrue(circle.intersects(pointList))
nova chamada: assertTrue(circle.intersects(pointList), "Era esperado verdadeiro, mas " + result3355 + " <circle.intersects(pointList)> é falso")
chamada antiga: assertFalse(circle.intersects(pointList))
nova chamada: assertFalse(circle.intersects(pointList), "Era esperado falso, mas " + result3356 + " <circle.intersects(pointList)> é verdadeiro ")
chamada antiga: assertTrue(circle.intersects(pointList))
nova chamada: assertTrue(circle.intersects(pointList), "Era esperado verdadeiro, mas " + result3357 + " <circle.intersects(pointList)> é falso")
chamada antiga: assertTrue(circle.intersects(pointList))
nova chamada: assertTrue(circle.intersects(pointList), "Era esperado verdadeiro, mas " + result3358 + " <circle.intersects(pointList)> é falso")
chamada antiga: assertTrue(c.contains(new BBox(9, 11, 10, 10.1)))
nova chamada: assertTrue(c.contains(new BBox(9, 11, 10, 10.1)), "Era esperado verdadeiro, mas " + result3359 + " <c.contains(new BBox(9, 11, 10, 10.1))> é falso")
chamada antiga: assertFalse(c.contains(new BBox(9, 11, 8, 9)))
nova chamada: assertFalse(c.contains(new BBox(9, 11, 8, 9)), "Era esperado falso, mas " + result3360 + " <c.contains(new BBox(9, 11, 8, 9))> é verdadeiro ")
chamada antiga: assertFalse(c.contains(new BBox(9, 12, 10, 10.1)))
nova chamada: assertFalse(c.contains(new BBox(9, 12, 10, 10.1)), "Era esperado falso, mas " + result3361 + " <c.contains(new BBox(9, 12, 10, 10.1))> é verdadeiro ")
chamada antiga: assertTrue(c.contains(new Circle(9.9, 10.2, 90000)))
nova chamada: assertTrue(c.contains(new Circle(9.9, 10.2, 90000)), "Era esperado verdadeiro, mas " + result3362 + " <c.contains(new Circle(9.9, 10.2, 90000))> é falso")
chamada antiga: assertFalse(c.contains(new Circle(10, 10.4, 90000)))
nova chamada: assertFalse(c.contains(new Circle(10, 10.4, 90000)), "Era esperado falso, mas " + result3363 + " <c.contains(new Circle(10, 10.4, 90000))> é verdadeiro ")
chamada antiga: assertTrue(new BBox(1, 2, 0, 1).contains(new BBox(1, 2, 0, 1)))
nova chamada: assertTrue(new BBox(1, 2, 0, 1).contains(new BBox(1, 2, 0, 1)), "Era esperado verdadeiro, mas " + result3364 + " <new BBox(1, 2, 0, 1).contains(new BBox(1, 2, 0, 1))> é falso")
chamada antiga: assertTrue(new BBox(1, 2, 0, 1).contains(new BBox(1.5, 2, 0.5, 1)))
nova chamada: assertTrue(new BBox(1, 2, 0, 1).contains(new BBox(1.5, 2, 0.5, 1)), "Era esperado verdadeiro, mas " + result3365 + " <new BBox(1, 2, 0, 1).contains(new BBox(1.5, 2, 0.5, 1))> é falso")
chamada antiga: assertTrue(new BBox(12, 15, 12, 15).intersects(new BBox(13, 14, 11, 16)))
nova chamada: assertTrue(new BBox(12, 15, 12, 15).intersects(new BBox(13, 14, 11, 16)), "Era esperado verdadeiro, mas " + result3366 + " <new BBox(12, 15, 12, 15).intersects(new BBox(13, 14, 11, 16))> é falso")
chamada antiga: assertTrue(new BBox(2, 6, 6, 11).intersects(new BBox(3, 5, 5, 12)))
nova chamada: assertTrue(new BBox(2, 6, 6, 11).intersects(new BBox(3, 5, 5, 12)), "Era esperado verdadeiro, mas " + result3367 + " <new BBox(2, 6, 6, 11).intersects(new BBox(3, 5, 5, 12))> é falso")
chamada antiga: assertTrue(new BBox(6, 11, 6, 11).intersects(new BBox(7, 10, 5, 12)))
nova chamada: assertTrue(new BBox(6, 11, 6, 11).intersects(new BBox(7, 10, 5, 12)), "Era esperado verdadeiro, mas " + result3368 + " <new BBox(6, 11, 6, 11).intersects(new BBox(7, 10, 5, 12))> é falso")
chamada antiga: assertTrue(bbox.intersects(pointList))
nova chamada: assertTrue(bbox.intersects(pointList), "Era esperado verdadeiro, mas " + result3369 + " <bbox.intersects(pointList)> é falso")
chamada antiga: assertTrue(bbox.intersects(pointList))
nova chamada: assertTrue(bbox.intersects(pointList), "Era esperado verdadeiro, mas " + result3370 + " <bbox.intersects(pointList)> é falso")
chamada antiga: assertTrue(bbox.intersects(pointList))
nova chamada: assertTrue(bbox.intersects(pointList), "Era esperado verdadeiro, mas " + result3371 + " <bbox.intersects(pointList)> é falso")
chamada antiga: assertTrue(bbox.intersects(pointList))
nova chamada: assertTrue(bbox.intersects(pointList), "Era esperado verdadeiro, mas " + result3372 + " <bbox.intersects(pointList)> é falso")
chamada antiga: assertEquals(expected, b1.calculateIntersection(b2))
nova chamada: assertEquals(expected, b1.calculateIntersection(b2), "Era esperado valores iguais, mas  expected é diferente de " + result3373 + " <b1.calculateIntersection(b2)>")
chamada antiga: assertNull(b1.calculateIntersection(b2))
nova chamada: assertNull(b1.calculateIntersection(b2), "Era esperado nulo, mas " + result3374 + " <b1.calculateIntersection(b2)> não é nulo")
chamada antiga: assertEquals(b1, b1.calculateIntersection(b2))
nova chamada: assertEquals(b1, b1.calculateIntersection(b2), "Era esperado valores iguais, mas  b1 é diferente de " + result3375 + " <b1.calculateIntersection(b2)>")
chamada antiga: assertEquals(new BBox(2, 4, 1, 3), BBox.parseTwoPoints("1,2,3,4"))
nova chamada: assertEquals(new BBox(2, 4, 1, 3), BBox.parseTwoPoints("1,2,3,4"), "Era esperado valores iguais, mas  new BBox(2, 4, 1, 3) é diferente de " + result3376 + " <BBox.parseTwoPoints('1,2,3,4')>")
chamada antiga: assertEquals(new BBox(2, 4, 1, 3), BBox.parseTwoPoints("3,2,1,4"))
nova chamada: assertEquals(new BBox(2, 4, 1, 3), BBox.parseTwoPoints("3,2,1,4"), "Era esperado valores iguais, mas  new BBox(2, 4, 1, 3) é diferente de " + result3377 + " <BBox.parseTwoPoints('3,2,1,4')>")
chamada antiga: assertEquals(new BBox(2, 4, 1, 3), BBox.parseBBoxString("2,4,1,3"))
nova chamada: assertEquals(new BBox(2, 4, 1, 3), BBox.parseBBoxString("2,4,1,3"), "Era esperado valores iguais, mas  new BBox(2, 4, 1, 3) é diferente de " + result3378 + " <BBox.parseBBoxString('2,4,1,3')>")
chamada antiga: assertFalse(new BBox(1, 2, 0, 0.5).contains(new BBox(1.5, 2, 0.5, 1)))
nova chamada: assertFalse(new BBox(1, 2, 0, 0.5).contains(new BBox(1.5, 2, 0.5, 1)), "Era esperado falso, mas " + result3379 + " <new BBox(1, 2, 0, 0.5).contains(new BBox(1.5, 2, 0.5, 1))> é verdadeiro ")
chamada antiga: assertFalse(bbox.intersects(pointList))
nova chamada: assertFalse(bbox.intersects(pointList), "Era esperado falso, mas " + result3380 + " <bbox.intersects(pointList)> é verdadeiro ")
chamada antiga: assertFalse(bbox.intersects(pointList))
nova chamada: assertFalse(bbox.intersects(pointList), "Era esperado falso, mas " + result3381 + " <bbox.intersects(pointList)> é verdadeiro ")
chamada antiga: assertTrue(square.contains(10, 10))
nova chamada: assertTrue(square.contains(10, 10), "Era esperado verdadeiro, mas " + result3382 + " <square.contains(10, 10)> é falso")
chamada antiga: assertTrue(square.contains(16, 10))
nova chamada: assertTrue(square.contains(16, 10), "Era esperado verdadeiro, mas " + result3383 + " <square.contains(16, 10)> é falso")
chamada antiga: assertFalse(square.contains(10, -20))
nova chamada: assertFalse(square.contains(10, -20), "Era esperado falso, mas " + result3384 + " <square.contains(10, -20)> é verdadeiro ")
chamada antiga: assertTrue(square.contains(10, 0.1))
nova chamada: assertTrue(square.contains(10, 0.1), "Era esperado verdadeiro, mas " + result3385 + " <square.contains(10, 0.1)> é falso")
chamada antiga: assertFalse(square.contains(10, 20))
nova chamada: assertFalse(square.contains(10, 20), "Era esperado falso, mas " + result3386 + " <square.contains(10, 20)> é verdadeiro ")
chamada antiga: assertTrue(square.contains(10, 16))
nova chamada: assertTrue(square.contains(10, 16), "Era esperado verdadeiro, mas " + result3387 + " <square.contains(10, 16)> é falso")
chamada antiga: assertFalse(square.contains(20, 20))
nova chamada: assertFalse(square.contains(20, 20), "Era esperado falso, mas " + result3388 + " <square.contains(20, 20)> é verdadeiro ")
chamada antiga: assertFalse(squareHole.contains(10, 10))
nova chamada: assertFalse(squareHole.contains(10, 10), "Era esperado falso, mas " + result3389 + " <squareHole.contains(10, 10)> é verdadeiro ")
chamada antiga: assertTrue(squareHole.contains(16, 10))
nova chamada: assertTrue(squareHole.contains(16, 10), "Era esperado verdadeiro, mas " + result3390 + " <squareHole.contains(16, 10)> é falso")
chamada antiga: assertFalse(squareHole.contains(10, -20))
nova chamada: assertFalse(squareHole.contains(10, -20), "Era esperado falso, mas " + result3391 + " <squareHole.contains(10, -20)> é verdadeiro ")
chamada antiga: assertFalse(squareHole.contains(10, 0))
nova chamada: assertFalse(squareHole.contains(10, 0), "Era esperado falso, mas " + result3392 + " <squareHole.contains(10, 0)> é verdadeiro ")
chamada antiga: assertFalse(squareHole.contains(10, 20))
nova chamada: assertFalse(squareHole.contains(10, 20), "Era esperado falso, mas " + result3393 + " <squareHole.contains(10, 20)> é verdadeiro ")
chamada antiga: assertTrue(squareHole.contains(10, 16))
nova chamada: assertTrue(squareHole.contains(10, 16), "Era esperado verdadeiro, mas " + result3394 + " <squareHole.contains(10, 16)> é falso")
chamada antiga: assertFalse(squareHole.contains(20, 20))
nova chamada: assertFalse(squareHole.contains(20, 20), "Era esperado falso, mas " + result3395 + " <squareHole.contains(20, 20)> é verdadeiro ")
chamada antiga: assertTrue(square.contains(1.5, 1.5))
nova chamada: assertTrue(square.contains(1.5, 1.5), "Era esperado verdadeiro, mas " + result3396 + " <square.contains(1.5, 1.5)> é falso")
chamada antiga: assertFalse(square.contains(0.5, 1.5))
nova chamada: assertFalse(square.contains(0.5, 1.5), "Era esperado falso, mas " + result3397 + " <square.contains(0.5, 1.5)> é verdadeiro ")
chamada antiga: assertTrue(squareHole.contains(1.1, 1.1))
nova chamada: assertTrue(squareHole.contains(1.1, 1.1), "Era esperado verdadeiro, mas " + result3398 + " <squareHole.contains(1.1, 1.1)> é falso")
chamada antiga: assertFalse(squareHole.contains(1.5, 1.5))
nova chamada: assertFalse(squareHole.contains(1.5, 1.5), "Era esperado falso, mas " + result3399 + " <squareHole.contains(1.5, 1.5)> é verdadeiro ")
chamada antiga: assertFalse(squareHole.contains(0.5, 1.5))
nova chamada: assertFalse(squareHole.contains(0.5, 1.5), "Era esperado falso, mas " + result3400 + " <squareHole.contains(0.5, 1.5)> é verdadeiro ")
chamada antiga: assertEquals("S", AC.azimuth2compassPoint(199))
nova chamada: assertEquals("S", AC.azimuth2compassPoint(199), "Era esperado valores iguais, mas  'S' é diferente de " + result3401 + " <AC.azimuth2compassPoint(199)>")
chamada antiga: assertTrue(isClockwise(a, b, c))
nova chamada: assertTrue(isClockwise(a, b, c), "Era esperado verdadeiro, mas " + result3402 + " <isClockwise(a, b, c)> é falso")
chamada antiga: assertTrue(isClockwise(b, c, a))
nova chamada: assertTrue(isClockwise(b, c, a), "Era esperado verdadeiro, mas " + result3403 + " <isClockwise(b, c, a)> é falso")
chamada antiga: assertTrue(isClockwise(c, a, b))
nova chamada: assertTrue(isClockwise(c, a, b), "Era esperado verdadeiro, mas " + result3404 + " <isClockwise(c, a, b)> é falso")
chamada antiga: assertTrue(dc.validEdgeDistance(49.94241, 11.544356, 49.937964, 11.541824, 49.942272, 11.555643))
nova chamada: assertTrue(dc.validEdgeDistance(49.94241, 11.544356, 49.937964, 11.541824, 49.942272, 11.555643), "Era esperado verdadeiro, mas " + result3405 + " <dc.validEdgeDistance(49.94241, 11.544356, 49.937964, 11.541824, 49.942272, 11.555643)> é falso")
chamada antiga: assertTrue(dc.validEdgeDistance(49.936624, 11.547636, 49.937964, 11.541824, 49.942272, 11.555643))
nova chamada: assertTrue(dc.validEdgeDistance(49.936624, 11.547636, 49.937964, 11.541824, 49.942272, 11.555643), "Era esperado verdadeiro, mas " + result3406 + " <dc.validEdgeDistance(49.936624, 11.547636, 49.937964, 11.541824, 49.942272, 11.555643)> é falso")
chamada antiga: assertTrue(dc.validEdgeDistance(49.940712, 11.556069, 49.937964, 11.541824, 49.942272, 11.555643))
nova chamada: assertTrue(dc.validEdgeDistance(49.940712, 11.556069, 49.937964, 11.541824, 49.942272, 11.555643), "Era esperado verdadeiro, mas " + result3407 + " <dc.validEdgeDistance(49.940712, 11.556069, 49.937964, 11.541824, 49.942272, 11.555643)> é falso")
chamada antiga: assertEquals(new GHPoint(42.567048, 1.6019), dist.calcCrossingPointToEdge(queryLat, queryLon, lat16, lon16, lat17, lon17))
nova chamada: assertEquals(new GHPoint(42.567048, 1.6019), dist.calcCrossingPointToEdge(queryLat, queryLon, lat16, lon16, lat17, lon17), "Era esperado valores iguais, mas  new GHPoint(42.567048, 1.6019) é diferente de " + result3408 + " <dist.calcCrossingPointToEdge(queryLat, queryLon, lat16, lon16, lat17, lon17)>")
chamada antiga: assertEquals(new GHPoint(55.81863, 37.594626), distCalc.calcCrossingPointToEdge(queryLat, queryLon, tmpLat, tmpLon, wayLat, wayLon))
nova chamada: assertEquals(new GHPoint(55.81863, 37.594626), distCalc.calcCrossingPointToEdge(queryLat, queryLon, tmpLat, tmpLon, wayLat, wayLon), "Era esperado valores iguais, mas  new GHPoint(55.81863, 37.594626) é diferente de " + result3409 + " <distCalc.calcCrossingPointToEdge(queryLat, queryLon, tmpLat, tmpLon, wayLat, wayLon)>")
chamada antiga: assertEquals(numberOfPoints, responsePath.getPoints().size())
nova chamada: assertEquals(numberOfPoints, responsePath.getPoints().size(), "Era esperado valores iguais, mas  numberOfPoints é diferente de " + result3410 + " <responsePath.getPoints().size()>")
chamada antiga: assertTrue(numberOfPoints > responsePath.getPoints().size())
nova chamada: assertTrue(numberOfPoints > responsePath.getPoints().size(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(5, points.size())
nova chamada: assertEquals(5, points.size(), "Era esperado valores iguais, mas  5 é diferente de " + result3411 + " <points.size()>")
chamada antiga: assertEquals(origPoints, points)
nova chamada: assertEquals(origPoints, points, "Era esperado valores iguais, mas  origPoints é diferente de " + " points")
chamada antiga: assertEquals(expected.intervals, partition.intervals)
nova chamada: assertEquals(expected.intervals, partition.intervals, "Era esperado valores iguais, mas  expected.intervals é diferente de " + " partition.intervals")
chamada antiga: assertEquals(12, points.size())
nova chamada: assertEquals(12, points.size(), "Era esperado valores iguais, mas  12 é diferente de " + result3412 + " <points.size()>")
chamada antiga: assertEquals(origPoints, points)
nova chamada: assertEquals(origPoints, points, "Era esperado valores iguais, mas  origPoints é diferente de " + " points")
chamada antiga: assertEquals(expected1.intervals, partition1.intervals)
nova chamada: assertEquals(expected1.intervals, partition1.intervals, "Era esperado valores iguais, mas  expected1.intervals é diferente de " + " partition1.intervals")
chamada antiga: assertEquals(expected2.intervals, partition2.intervals)
nova chamada: assertEquals(expected2.intervals, partition2.intervals, "Era esperado valores iguais, mas  expected2.intervals é diferente de " + " partition2.intervals")
chamada antiga: assertEquals(expected3.intervals, partition3.intervals)
nova chamada: assertEquals(expected3.intervals, partition3.intervals, "Era esperado valores iguais, mas  expected3.intervals é diferente de " + " partition3.intervals")
chamada antiga: assertEquals(10, list.size())
nova chamada: assertEquals(10, list.size(), "Era esperado valores iguais, mas  10 é diferente de " + result3413 + " <list.size()>")
chamada antiga: assertEquals(3, list.get(5))
nova chamada: assertEquals(3, list.get(5), "Era esperado valores iguais, mas  3 é diferente de " + result3414 + " <list.get(5)>")
chamada antiga: assertEquals(3, list.get(9))
nova chamada: assertEquals(3, list.get(9), "Era esperado valores iguais, mas  3 é diferente de " + result3415 + " <list.get(9)>")
chamada antiga: assertEquals(10, list.buffer.length)
nova chamada: assertEquals(10, list.buffer.length, "Era esperado valores iguais, mas  10 é diferente de " + " list.buffer.length")
chamada antiga: assertEquals(15, list.buffer.length)
nova chamada: assertEquals(15, list.buffer.length, "Era esperado valores iguais, mas  15 é diferente de " + " list.buffer.length")
chamada antiga: assertEquals(15, list.elementsCount)
nova chamada: assertEquals(15, list.elementsCount, "Era esperado valores iguais, mas  15 é diferente de " + " list.elementsCount")
chamada antiga: assertEquals(14 / 2.0 * (14 + 1), Arrays.stream(list.buffer).sum())
nova chamada: assertEquals(14 / 2.0 * (14 + 1), Arrays.stream(list.buffer).sum(), "Era esperado valores iguais, mas  14 / 2.0 * (14 + 1) é diferente de " + result3416 + " <Arrays.stream(list.buffer).sum()>")
chamada antiga: assertEquals(from(3, 4, 5, 6), ArrayUtil.range(3, 7))
nova chamada: assertEquals(from(3, 4, 5, 6), ArrayUtil.range(3, 7), "Era esperado valores iguais, mas " + result3417 + " <from(3, 4, 5, 6)> é diferente de " + result3418 + " <ArrayUtil.range(3, 7)>")
chamada antiga: assertEquals(from(-3, -2), ArrayUtil.range(-3, -1))
nova chamada: assertEquals(from(-3, -2), ArrayUtil.range(-3, -1), "Era esperado valores iguais, mas " + result3419 + " <from(-3, -2)> é diferente de " + result3420 + " <ArrayUtil.range(-3, -1)>")
chamada antiga: assertEquals(from(), ArrayUtil.range(5, 5))
nova chamada: assertEquals(from(), ArrayUtil.range(5, 5), "Era esperado valores iguais, mas " + result3421 + " <from()> é diferente de " + result3422 + " <ArrayUtil.range(5, 5)>")
chamada antiga: assertEquals(from(3, 4, 5, 6, 7), ArrayUtil.rangeClosed(3, 7))
nova chamada: assertEquals(from(3, 4, 5, 6, 7), ArrayUtil.rangeClosed(3, 7), "Era esperado valores iguais, mas " + result3423 + " <from(3, 4, 5, 6, 7)> é diferente de " + result3424 + " <ArrayUtil.rangeClosed(3, 7)>")
chamada antiga: assertEquals(from(-3, -2, -1), ArrayUtil.rangeClosed(-3, -1))
nova chamada: assertEquals(from(-3, -2, -1), ArrayUtil.rangeClosed(-3, -1), "Era esperado valores iguais, mas " + result3425 + " <from(-3, -2, -1)> é diferente de " + result3426 + " <ArrayUtil.rangeClosed(-3, -1)>")
chamada antiga: assertEquals(from(5), ArrayUtil.rangeClosed(5, 5))
nova chamada: assertEquals(from(5), ArrayUtil.rangeClosed(5, 5), "Era esperado valores iguais, mas " + result3427 + " <from(5)> é diferente de " + result3428 + " <ArrayUtil.rangeClosed(5, 5)>")
chamada antiga: assertEquals(15, list.buffer.length)
nova chamada: assertEquals(15, list.buffer.length, "Era esperado valores iguais, mas  15 é diferente de " + " list.buffer.length")
chamada antiga: assertEquals(15, list.elementsCount)
nova chamada: assertEquals(15, list.elementsCount, "Era esperado valores iguais, mas  15 é diferente de " + " list.elementsCount")
chamada antiga: assertEquals(14 / 2.0 * (14 + 1), Arrays.stream(list.buffer).sum())
nova chamada: assertEquals(14 / 2.0 * (14 + 1), Arrays.stream(list.buffer).sum(), "Era esperado valores iguais, mas  14 / 2.0 * (14 + 1) é diferente de " + result3429 + " <Arrays.stream(list.buffer).sum()>")
chamada antiga: assertTrue(ArrayUtil.isPermutation(list))
nova chamada: assertTrue(ArrayUtil.isPermutation(list), "Era esperado verdadeiro, mas " + result3430 + " <ArrayUtil.isPermutation(list)> é falso")
chamada antiga: assertTrue(ArrayUtil.isPermutation(IntArrayList.from()))
nova chamada: assertTrue(ArrayUtil.isPermutation(IntArrayList.from()), "Era esperado verdadeiro, mas " + result3431 + " <ArrayUtil.isPermutation(IntArrayList.from())> é falso")
chamada antiga: assertTrue(ArrayUtil.isPermutation(IntArrayList.from(0)))
nova chamada: assertTrue(ArrayUtil.isPermutation(IntArrayList.from(0)), "Era esperado verdadeiro, mas " + result3432 + " <ArrayUtil.isPermutation(IntArrayList.from(0))> é falso")
chamada antiga: assertTrue(ArrayUtil.isPermutation(IntArrayList.from(0, 1)))
nova chamada: assertTrue(ArrayUtil.isPermutation(IntArrayList.from(0, 1)), "Era esperado verdadeiro, mas " + result3433 + " <ArrayUtil.isPermutation(IntArrayList.from(0, 1))> é falso")
chamada antiga: assertTrue(ArrayUtil.isPermutation(IntArrayList.from(6, 2, 4, 0, 1, 3, 5)))
nova chamada: assertTrue(ArrayUtil.isPermutation(IntArrayList.from(6, 2, 4, 0, 1, 3, 5)), "Era esperado verdadeiro, mas " + result3434 + " <ArrayUtil.isPermutation(IntArrayList.from(6, 2, 4, 0, 1, 3, 5))> é falso")
chamada antiga: assertEquals(from(), ArrayUtil.reverse(from()))
nova chamada: assertEquals(from(), ArrayUtil.reverse(from()), "Era esperado valores iguais, mas " + result3435 + " <from()> é diferente de " + result3436 + " <ArrayUtil.reverse(from())>")
chamada antiga: assertEquals(from(1), ArrayUtil.reverse(from(1)))
nova chamada: assertEquals(from(1), ArrayUtil.reverse(from(1)), "Era esperado valores iguais, mas " + result3437 + " <from(1)> é diferente de " + result3438 + " <ArrayUtil.reverse(from(1))>")
chamada antiga: assertEquals(from(9, 5), ArrayUtil.reverse(from(5, 9)))
nova chamada: assertEquals(from(9, 5), ArrayUtil.reverse(from(5, 9)), "Era esperado valores iguais, mas " + result3439 + " <from(9, 5)> é diferente de " + result3440 + " <ArrayUtil.reverse(from(5, 9))>")
chamada antiga: assertEquals(from(7, 1, 3), ArrayUtil.reverse(from(3, 1, 7)))
nova chamada: assertEquals(from(7, 1, 3), ArrayUtil.reverse(from(3, 1, 7)), "Era esperado valores iguais, mas " + result3441 + " <from(7, 1, 3)> é diferente de " + result3442 + " <ArrayUtil.reverse(from(3, 1, 7))>")
chamada antiga: assertEquals(from(4, 3, 2, 1), ArrayUtil.reverse(from(1, 2, 3, 4)))
nova chamada: assertEquals(from(4, 3, 2, 1), ArrayUtil.reverse(from(1, 2, 3, 4)), "Era esperado valores iguais, mas " + result3443 + " <from(4, 3, 2, 1)> é diferente de " + result3444 + " <ArrayUtil.reverse(from(1, 2, 3, 4))>")
chamada antiga: assertEquals(from(5, 4, 3, 2, 1), ArrayUtil.reverse(from(1, 2, 3, 4, 5)))
nova chamada: assertEquals(from(5, 4, 3, 2, 1), ArrayUtil.reverse(from(1, 2, 3, 4, 5)), "Era esperado valores iguais, mas " + result3445 + " <from(5, 4, 3, 2, 1)> é diferente de " + result3446 + " <ArrayUtil.reverse(from(1, 2, 3, 4, 5))>")
chamada antiga: assertEquals(from(4, 1, 3, 2), ArrayUtil.shuffle(from(1, 2, 3, 4), new Random(0)))
nova chamada: assertEquals(from(4, 1, 3, 2), ArrayUtil.shuffle(from(1, 2, 3, 4), new Random(0)), "Era esperado valores iguais, mas " + result3447 + " <from(4, 1, 3, 2)> é diferente de " + result3448 + " <ArrayUtil.shuffle(from(1, 2, 3, 4), new Random(0))>")
chamada antiga: assertEquals(from(4, 3, 2, 1, 5), ArrayUtil.shuffle(from(1, 2, 3, 4, 5), new Random(1)))
nova chamada: assertEquals(from(4, 3, 2, 1, 5), ArrayUtil.shuffle(from(1, 2, 3, 4, 5), new Random(1)), "Era esperado valores iguais, mas " + result3449 + " <from(4, 3, 2, 1, 5)> é diferente de " + result3450 + " <ArrayUtil.shuffle(from(1, 2, 3, 4, 5), new Random(1))>")
chamada antiga: assertEquals(9, ArrayUtil.removeConsecutiveDuplicates(arr, arr.length))
nova chamada: assertEquals(9, ArrayUtil.removeConsecutiveDuplicates(arr, arr.length), "Era esperado valores iguais, mas  9 é diferente de " + result3451 + " <ArrayUtil.removeConsecutiveDuplicates(arr, arr.length)>")
chamada antiga: assertEquals(IntArrayList.from(3, 4, 2, 1, -3, 9, 3, 6, 7, 6, 6, 7, 7), IntArrayList.from(arr))
nova chamada: assertEquals(IntArrayList.from(3, 4, 2, 1, -3, 9, 3, 6, 7, 6, 6, 7, 7), IntArrayList.from(arr), "Era esperado valores iguais, mas " + result3452 + " <IntArrayList.from(3, 4, 2, 1, -3, 9, 3, 6, 7, 6, 6, 7, 7)> é diferente de " + result3453 + " <IntArrayList.from(arr)>")
chamada antiga: assertEquals(2, ArrayUtil.removeConsecutiveDuplicates(brr, 3))
nova chamada: assertEquals(2, ArrayUtil.removeConsecutiveDuplicates(brr, 3), "Era esperado valores iguais, mas  2 é diferente de " + result3454 + " <ArrayUtil.removeConsecutiveDuplicates(brr, 3)>")
chamada antiga: assertEquals(IntArrayList.from(4, 3, 3, 5, 3), IntArrayList.from(brr))
nova chamada: assertEquals(IntArrayList.from(4, 3, 3, 5, 3), IntArrayList.from(brr), "Era esperado valores iguais, mas " + result3455 + " <IntArrayList.from(4, 3, 3, 5, 3)> é diferente de " + result3456 + " <IntArrayList.from(brr)>")
chamada antiga: assertEquals(from(), ArrayUtil.withoutConsecutiveDuplicates(from()))
nova chamada: assertEquals(from(), ArrayUtil.withoutConsecutiveDuplicates(from()), "Era esperado valores iguais, mas " + result3457 + " <from()> é diferente de " + result3458 + " <ArrayUtil.withoutConsecutiveDuplicates(from())>")
chamada antiga: assertEquals(from(1), ArrayUtil.withoutConsecutiveDuplicates(from(1)))
nova chamada: assertEquals(from(1), ArrayUtil.withoutConsecutiveDuplicates(from(1)), "Era esperado valores iguais, mas " + result3459 + " <from(1)> é diferente de " + result3460 + " <ArrayUtil.withoutConsecutiveDuplicates(from(1))>")
chamada antiga: assertEquals(from(1), ArrayUtil.withoutConsecutiveDuplicates(from(1, 1)))
nova chamada: assertEquals(from(1), ArrayUtil.withoutConsecutiveDuplicates(from(1, 1)), "Era esperado valores iguais, mas " + result3461 + " <from(1)> é diferente de " + result3462 + " <ArrayUtil.withoutConsecutiveDuplicates(from(1, 1))>")
chamada antiga: assertEquals(from(1), ArrayUtil.withoutConsecutiveDuplicates(from(1, 1, 1)))
nova chamada: assertEquals(from(1), ArrayUtil.withoutConsecutiveDuplicates(from(1, 1, 1)), "Era esperado valores iguais, mas " + result3463 + " <from(1)> é diferente de " + result3464 + " <ArrayUtil.withoutConsecutiveDuplicates(from(1, 1, 1))>")
chamada antiga: assertEquals(from(1, 2), ArrayUtil.withoutConsecutiveDuplicates(from(1, 1, 2)))
nova chamada: assertEquals(from(1, 2), ArrayUtil.withoutConsecutiveDuplicates(from(1, 1, 2)), "Era esperado valores iguais, mas " + result3465 + " <from(1, 2)> é diferente de " + result3466 + " <ArrayUtil.withoutConsecutiveDuplicates(from(1, 1, 2))>")
chamada antiga: assertEquals(from(1, 2, 1), ArrayUtil.withoutConsecutiveDuplicates(from(1, 2, 1)))
nova chamada: assertEquals(from(1, 2, 1), ArrayUtil.withoutConsecutiveDuplicates(from(1, 2, 1)), "Era esperado valores iguais, mas " + result3467 + " <from(1, 2, 1)> é diferente de " + result3468 + " <ArrayUtil.withoutConsecutiveDuplicates(from(1, 2, 1))>")
chamada antiga: assertEquals(from(5, 6, 5, 8, 9, 11, 2, -1, 3), ArrayUtil.withoutConsecutiveDuplicates(from(5, 5, 5, 6, 6, 5, 5, 8, 9, 11, 11, 2, 2, -1, 3, 3)))
nova chamada: assertEquals(from(5, 6, 5, 8, 9, 11, 2, -1, 3), ArrayUtil.withoutConsecutiveDuplicates(from(5, 5, 5, 6, 6, 5, 5, 8, 9, 11, 11, 2, 2, -1, 3, 3)), "Era esperado valores iguais, mas " + result3469 + " <from(5, 6, 5, 8, 9, 11, 2, -1, 3)> é diferente de " + result3470 + " <ArrayUtil.withoutConsecutiveDuplicates(from(5, 5, 5, 6, 6, 5, 5, 8, 9, 11, 11, 2, 2, -1, 3, 3))>")
chamada antiga: assertEquals(IntArrayList.from(4, 4, 4), arr)
nova chamada: assertEquals(IntArrayList.from(4, 4, 4), arr, "Era esperado valores iguais, mas " + result3471 + " <IntArrayList.from(4, 4, 4)> é diferente de " + " arr")
chamada antiga: assertEquals(IntArrayList.from(5, 6, 2), brr)
nova chamada: assertEquals(IntArrayList.from(5, 6, 2), brr, "Era esperado valores iguais, mas " + result3472 + " <IntArrayList.from(5, 6, 2)> é diferente de " + " brr")
chamada antiga: assertEquals(from(), from(ArrayUtil.calcSortOrder(from(), from())))
nova chamada: assertEquals(from(), from(ArrayUtil.calcSortOrder(from(), from())), "Era esperado valores iguais, mas " + result3473 + " <from()> é diferente de " + result3474 + " <from(ArrayUtil.calcSortOrder(from(), from()))>")
chamada antiga: assertEquals(from(0), from(ArrayUtil.calcSortOrder(from(3), from(4))))
nova chamada: assertEquals(from(0), from(ArrayUtil.calcSortOrder(from(3), from(4))), "Era esperado valores iguais, mas " + result3475 + " <from(0)> é diferente de " + result3476 + " <from(ArrayUtil.calcSortOrder(from(3), from(4)))>")
chamada antiga: assertEquals(from(0, 2, 3, 1), from(ArrayUtil.calcSortOrder(from(3, 6, 3, 4), from(0, -1, 2, -6))))
nova chamada: assertEquals(from(0, 2, 3, 1), from(ArrayUtil.calcSortOrder(from(3, 6, 3, 4), from(0, -1, 2, -6))), "Era esperado valores iguais, mas " + result3477 + " <from(0, 2, 3, 1)> é diferente de " + result3478 + " <from(ArrayUtil.calcSortOrder(from(3, 6, 3, 4), from(0, -1, 2, -6)))>")
chamada antiga: assertEquals(from(2, 3, 1, 0), from(ArrayUtil.calcSortOrder(from(3, 3, 0, 0), from(0, -1, 1, 2))))
nova chamada: assertEquals(from(2, 3, 1, 0), from(ArrayUtil.calcSortOrder(from(3, 3, 0, 0), from(0, -1, 1, 2))), "Era esperado valores iguais, mas " + result3479 + " <from(2, 3, 1, 0)> é diferente de " + result3480 + " <from(ArrayUtil.calcSortOrder(from(3, 3, 0, 0), from(0, -1, 1, 2)))>")
chamada antiga: assertEquals(from(), from(ArrayUtil.calcSortOrder(new int[] { 3, 3, 0, 0 }, new int[] { 0, -1, 1, 2 }, 0)))
nova chamada: assertEquals(from(), from(ArrayUtil.calcSortOrder(new int[] { 3, 3, 0, 0 }, new int[] { 0, -1, 1, 2 }, 0)), "Era esperado valores iguais, mas " + result3481 + " <from()> é diferente de " + result3482 + " <from(ArrayUtil.calcSortOrder(new int[] { 3, 3, 0, 0 }, new int[] { 0, -1, 1, 2 }, 0))>")
chamada antiga: assertEquals(from(0), from(ArrayUtil.calcSortOrder(new int[] { 3, 3, 0, 0 }, new int[] { 0, -1, 1, 2 }, 1)))
nova chamada: assertEquals(from(0), from(ArrayUtil.calcSortOrder(new int[] { 3, 3, 0, 0 }, new int[] { 0, -1, 1, 2 }, 1)), "Era esperado valores iguais, mas " + result3483 + " <from(0)> é diferente de " + result3484 + " <from(ArrayUtil.calcSortOrder(new int[] { 3, 3, 0, 0 }, new int[] { 0, -1, 1, 2 }, 1))>")
chamada antiga: assertEquals(from(1, 0), from(ArrayUtil.calcSortOrder(new int[] { 3, 3, 0, 0 }, new int[] { 0, -1, 1, 2 }, 2)))
nova chamada: assertEquals(from(1, 0), from(ArrayUtil.calcSortOrder(new int[] { 3, 3, 0, 0 }, new int[] { 0, -1, 1, 2 }, 2)), "Era esperado valores iguais, mas " + result3485 + " <from(1, 0)> é diferente de " + result3486 + " <from(ArrayUtil.calcSortOrder(new int[] { 3, 3, 0, 0 }, new int[] { 0, -1, 1, 2 }, 2))>")
chamada antiga: assertEquals(from(2, 1, 0), from(ArrayUtil.calcSortOrder(new int[] { 3, 3, 0, 0 }, new int[] { 0, -1, 1, 2 }, 3)))
nova chamada: assertEquals(from(2, 1, 0), from(ArrayUtil.calcSortOrder(new int[] { 3, 3, 0, 0 }, new int[] { 0, -1, 1, 2 }, 3)), "Era esperado valores iguais, mas " + result3487 + " <from(2, 1, 0)> é diferente de " + result3488 + " <from(ArrayUtil.calcSortOrder(new int[] { 3, 3, 0, 0 }, new int[] { 0, -1, 1, 2 }, 3))>")
chamada antiga: assertEquals(from(2, 3, 1, 0), from(ArrayUtil.calcSortOrder(new int[] { 3, 3, 0, 0 }, new int[] { 0, -1, 1, 2 }, 4)))
nova chamada: assertEquals(from(2, 3, 1, 0), from(ArrayUtil.calcSortOrder(new int[] { 3, 3, 0, 0 }, new int[] { 0, -1, 1, 2 }, 4)), "Era esperado valores iguais, mas " + result3489 + " <from(2, 3, 1, 0)> é diferente de " + result3490 + " <from(ArrayUtil.calcSortOrder(new int[] { 3, 3, 0, 0 }, new int[] { 0, -1, 1, 2 }, 4))>")
chamada antiga: assertEquals(from(0, 6, 3, 1, 4), from(ArrayUtil.applyOrder(new int[] { 3, 4, 6, 0, 1 }, new int[] { 3, 2, 0, 4, 1 })))
nova chamada: assertEquals(from(0, 6, 3, 1, 4), from(ArrayUtil.applyOrder(new int[] { 3, 4, 6, 0, 1 }, new int[] { 3, 2, 0, 4, 1 })), "Era esperado valores iguais, mas " + result3491 + " <from(0, 6, 3, 1, 4)> é diferente de " + result3492 + " <from(ArrayUtil.applyOrder(new int[] { 3, 4, 6, 0, 1 }, new int[] { 3, 2, 0, 4, 1 }))>")
chamada antiga: assertEquals(from(-1, -1, -1, 3), from(ArrayUtil.invert(new int[] { 3, 3, 3, 3 })))
nova chamada: assertEquals(from(-1, -1, -1, 3), from(ArrayUtil.invert(new int[] { 3, 3, 3, 3 })), "Era esperado valores iguais, mas " + result3493 + " <from(-1, -1, -1, 3)> é diferente de " + result3494 + " <from(ArrayUtil.invert(new int[] { 3, 3, 3, 3 }))>")
chamada antiga: assertEquals(from(3, 2, 0, 1), from(ArrayUtil.invert(new int[] { 2, 3, 1, 0 })))
nova chamada: assertEquals(from(3, 2, 0, 1), from(ArrayUtil.invert(new int[] { 2, 3, 1, 0 })), "Era esperado valores iguais, mas " + result3495 + " <from(3, 2, 0, 1)> é diferente de " + result3496 + " <from(ArrayUtil.invert(new int[] { 2, 3, 1, 0 }))>")
chamada antiga: assertEquals(from(2, 3, 1, 0), from(ArrayUtil.invert(new int[] { 3, 2, 0, 1 })))
nova chamada: assertEquals(from(2, 3, 1, 0), from(ArrayUtil.invert(new int[] { 3, 2, 0, 1 })), "Era esperado valores iguais, mas " + result3497 + " <from(2, 3, 1, 0)> é diferente de " + result3498 + " <from(ArrayUtil.invert(new int[] { 3, 2, 0, 1 }))>")
chamada antiga: assertArrayEquals(new int[] {}, ArrayUtil.merge(new int[] {}, new int[] {}))
nova chamada: assertArrayEquals(new int[] {}, ArrayUtil.merge(new int[] {}, new int[] {}), "Era esperado arrays iguais, mas  new int[] {} é diferente de " + result3499 + " <ArrayUtil.merge(new int[] {}, new int[] {})>")
chamada antiga: assertArrayEquals(new int[] { 4, 5 }, ArrayUtil.merge(new int[] {}, new int[] { 4, 5 }))
nova chamada: assertArrayEquals(new int[] { 4, 5 }, ArrayUtil.merge(new int[] {}, new int[] { 4, 5 }), "Era esperado arrays iguais, mas  new int[] { 4, 5 } é diferente de " + result3500 + " <ArrayUtil.merge(new int[] {}, new int[] { 4, 5 })>")
chamada antiga: assertArrayEquals(new int[] { 4, 5 }, ArrayUtil.merge(new int[] { 4, 5 }, new int[] {}))
nova chamada: assertArrayEquals(new int[] { 4, 5 }, ArrayUtil.merge(new int[] { 4, 5 }, new int[] {}), "Era esperado arrays iguais, mas  new int[] { 4, 5 } é diferente de " + result3501 + " <ArrayUtil.merge(new int[] { 4, 5 }, new int[] {})>")
chamada antiga: assertArrayEquals(new int[] { 3, 6, 9 }, ArrayUtil.merge(new int[] { 6, 6, 6, 9 }, new int[] { 3, 9 }))
nova chamada: assertArrayEquals(new int[] { 3, 6, 9 }, ArrayUtil.merge(new int[] { 6, 6, 6, 9 }, new int[] { 3, 9 }), "Era esperado arrays iguais, mas  new int[] { 3, 6, 9 } é diferente de " + result3502 + " <ArrayUtil.merge(new int[] { 6, 6, 6, 9 }, new int[] { 3, 9 })>")
chamada antiga: assertEquals(from(2, 3, 6, 7, 8, 9, 10, 11, 12, 15, 20, 21, 26), from(ArrayUtil.merge(a, b)))
nova chamada: assertEquals(from(2, 3, 6, 7, 8, 9, 10, 11, 12, 15, 20, 21, 26), from(ArrayUtil.merge(a, b)), "Era esperado valores iguais, mas " + result3503 + " <from(2, 3, 6, 7, 8, 9, 10, 11, 12, 15, 20, 21, 26)> é diferente de " + result3504 + " <from(ArrayUtil.merge(a, b))>")
chamada antiga: assertEquals(false, validEdgeDistance)
nova chamada: assertEquals(false, validEdgeDistance, "Era esperado valores iguais, mas  false é diferente de " + " validEdgeDistance")
chamada antiga: assertEquals(false, validEdgeDistance)
nova chamada: assertEquals(false, validEdgeDistance, "Era esperado valores iguais, mas  false é diferente de " + " validEdgeDistance")
chamada antiga: assertEquals(g.getNodes(), newG.getNodes())
nova chamada: assertEquals(g.getNodes(), newG.getNodes(), "Era esperado valores iguais, mas " + result3505 + " <g.getNodes()> é diferente de " + result3506 + " <newG.getNodes()>")
chamada antiga: assertEquals(g.getEdges(), newG.getEdges())
nova chamada: assertEquals(g.getEdges(), newG.getEdges(), "Era esperado valores iguais, mas " + result3507 + " <g.getEdges()> é diferente de " + result3508 + " <newG.getEdges()>")
chamada antiga: assertEquals(0, newG.getEdgeIteratorState(0, Integer.MIN_VALUE).getAdjNode())
nova chamada: assertEquals(0, newG.getEdgeIteratorState(0, Integer.MIN_VALUE).getAdjNode(), "Era esperado valores iguais, mas  0 é diferente de " + result3509 + " <newG.getEdgeIteratorState(0, Integer.MIN_VALUE).getAdjNode()>")
chamada antiga: assertEquals(1, newG.getEdgeIteratorState(0, Integer.MIN_VALUE).getBaseNode())
nova chamada: assertEquals(1, newG.getEdgeIteratorState(0, Integer.MIN_VALUE).getBaseNode(), "Era esperado valores iguais, mas  1 é diferente de " + result3510 + " <newG.getEdgeIteratorState(0, Integer.MIN_VALUE).getBaseNode()>")
chamada antiga: assertEquals(1, newG.getEdgeIteratorState(1, Integer.MIN_VALUE).getAdjNode())
nova chamada: assertEquals(1, newG.getEdgeIteratorState(1, Integer.MIN_VALUE).getAdjNode(), "Era esperado valores iguais, mas  1 é diferente de " + result3511 + " <newG.getEdgeIteratorState(1, Integer.MIN_VALUE).getAdjNode()>")
chamada antiga: assertEquals(3, newG.getEdgeIteratorState(1, Integer.MIN_VALUE).getBaseNode())
nova chamada: assertEquals(3, newG.getEdgeIteratorState(1, Integer.MIN_VALUE).getBaseNode(), "Era esperado valores iguais, mas  3 é diferente de " + result3512 + " <newG.getEdgeIteratorState(1, Integer.MIN_VALUE).getBaseNode()>")
chamada antiga: assertEquals(2, newG.getEdgeIteratorState(2, Integer.MIN_VALUE).getAdjNode())
nova chamada: assertEquals(2, newG.getEdgeIteratorState(2, Integer.MIN_VALUE).getAdjNode(), "Era esperado valores iguais, mas  2 é diferente de " + result3513 + " <newG.getEdgeIteratorState(2, Integer.MIN_VALUE).getAdjNode()>")
chamada antiga: assertEquals(1, newG.getEdgeIteratorState(2, Integer.MIN_VALUE).getBaseNode())
nova chamada: assertEquals(1, newG.getEdgeIteratorState(2, Integer.MIN_VALUE).getBaseNode(), "Era esperado valores iguais, mas  1 é diferente de " + result3514 + " <newG.getEdgeIteratorState(2, Integer.MIN_VALUE).getBaseNode()>")
chamada antiga: assertEquals(2, GHUtility.createEdgeKey(1, false, false))
nova chamada: assertEquals(2, GHUtility.createEdgeKey(1, false, false), "Era esperado valores iguais, mas  2 é diferente de " + result3515 + " <GHUtility.createEdgeKey(1, false, false)>")
chamada antiga: assertEquals(2, GHUtility.createEdgeKey(1, true, false))
nova chamada: assertEquals(2, GHUtility.createEdgeKey(1, true, false), "Era esperado valores iguais, mas  2 é diferente de " + result3516 + " <GHUtility.createEdgeKey(1, true, false)>")
chamada antiga: assertEquals(2, GHUtility.createEdgeKey(1, true, true))
nova chamada: assertEquals(2, GHUtility.createEdgeKey(1, true, true), "Era esperado valores iguais, mas  2 é diferente de " + result3517 + " <GHUtility.createEdgeKey(1, true, true)>")
chamada antiga: assertEquals(3, GHUtility.createEdgeKey(1, false, true))
nova chamada: assertEquals(3, GHUtility.createEdgeKey(1, false, true), "Era esperado valores iguais, mas  3 é diferente de " + result3518 + " <GHUtility.createEdgeKey(1, false, true)>")
chamada antiga: assertEquals(3, map1.get(0))
nova chamada: assertEquals(3, map1.get(0), "Era esperado valores iguais, mas  3 é diferente de " + result3519 + " <map1.get(0)>")
chamada antiga: assertEquals(0, map1.get(1))
nova chamada: assertEquals(0, map1.get(1), "Era esperado valores iguais, mas  0 é diferente de " + result3520 + " <map1.get(1)>")
chamada antiga: assertEquals(1, map1.get(2))
nova chamada: assertEquals(1, map1.get(2), "Era esperado valores iguais, mas  1 é diferente de " + result3521 + " <map1.get(2)>")
chamada antiga: assertTrue(map1.containsKey(0))
nova chamada: assertTrue(map1.containsKey(0), "Era esperado verdadeiro, mas " + result3522 + " <map1.containsKey(0)> é falso")
chamada antiga: assertTrue(na.is3D())
nova chamada: assertTrue(na.is3D(), "Era esperado verdadeiro, mas " + result3523 + " <na.is3D()> é falso")
chamada antiga: assertEquals(12, graph.getNodes())
nova chamada: assertEquals(12, graph.getNodes(), "Era esperado valores iguais, mas  12 é diferente de " + result3524 + " <graph.getNodes()>")
chamada antiga: assertEquals("named street1", graph.getEdgeIteratorState(iter1.getEdge(), iter1.getAdjNode()).getName())
nova chamada: assertEquals("named street1", graph.getEdgeIteratorState(iter1.getEdge(), iter1.getAdjNode()).getName(), "Era esperado valores iguais, mas  'named street1' é diferente de " + result3525 + " <graph.getEdgeIteratorState(iter1.getEdge(), iter1.getAdjNode()).getName()>")
chamada antiga: assertEquals("named street2", graph.getEdgeIteratorState(iter2.getEdge(), iter2.getAdjNode()).getName())
nova chamada: assertEquals("named street2", graph.getEdgeIteratorState(iter2.getEdge(), iter2.getAdjNode()).getName(), "Era esperado valores iguais, mas  'named street2' é diferente de " + result3526 + " <graph.getEdgeIteratorState(iter2.getEdge(), iter2.getAdjNode()).getName()>")
chamada antiga: assertEquals(list, iter3.getKeyValues())
nova chamada: assertEquals(list, iter3.getKeyValues(), "Era esperado valores iguais, mas  list é diferente de " + result3527 + " <iter3.getKeyValues()>")
chamada antiga: assertEquals(list, iter3.detach(true).getKeyValues())
nova chamada: assertEquals(list, iter3.detach(true).getKeyValues(), "Era esperado valores iguais, mas  list é diferente de " + result3528 + " <iter3.detach(true).getKeyValues()>")
chamada antiga: assertEquals("FORWARD", iter3.getValue("keyA"))
nova chamada: assertEquals("FORWARD", iter3.getValue("keyA"), "Era esperado valores iguais, mas  'FORWARD' é diferente de " + result3529 + " <iter3.getValue('keyA')>")
chamada antiga: assertNull(iter3.getValue("keyB"))
nova chamada: assertNull(iter3.getValue("keyB"), "Era esperado nulo, mas " + result3530 + " <iter3.getValue('keyB')> não é nulo")
chamada antiga: assertEquals("BOTH", iter3.getValue("keyC"))
nova chamada: assertEquals("BOTH", iter3.getValue("keyC"), "Era esperado valores iguais, mas  'BOTH' é diferente de " + result3531 + " <iter3.getValue('keyC')>")
chamada antiga: assertNull(iter3.detach(true).getValue("keyA"))
nova chamada: assertNull(iter3.detach(true).getValue("keyA"), "Era esperado nulo, mas " + result3532 + " <iter3.detach(true).getValue('keyA')> não é nulo")
chamada antiga: assertEquals("BACKWARD", iter3.detach(true).getValue("keyB"))
nova chamada: assertEquals("BACKWARD", iter3.detach(true).getValue("keyB"), "Era esperado valores iguais, mas  'BACKWARD' é diferente de " + result3533 + " <iter3.detach(true).getValue('keyB')>")
chamada antiga: assertEquals("BOTH", iter3.detach(true).getValue("keyC"))
nova chamada: assertEquals("BOTH", iter3.detach(true).getValue("keyC"), "Era esperado valores iguais, mas  'BOTH' é diferente de " + result3534 + " <iter3.detach(true).getValue('keyC')>")
chamada antiga: assertEquals(2, graph.getNodes())
nova chamada: assertEquals(2, graph.getNodes(), "Era esperado valores iguais, mas  2 é diferente de " + result3535 + " <graph.getNodes()>")
chamada antiga: assertTrue(graph.isFrozen())
nova chamada: assertTrue(graph.isFrozen(), "Era esperado verdadeiro, mas " + result3536 + " <graph.isFrozen()> é falso")
chamada antiga: assertTrue(na.is3D())
nova chamada: assertTrue(na.is3D(), "Era esperado verdadeiro, mas " + result3537 + " <na.is3D()> é falso")
chamada antiga: assertTrue(g.getBounds().isValid())
nova chamada: assertTrue(g.getBounds().isValid(), "Era esperado verdadeiro, mas " + result3538 + " <g.getBounds().isValid()> é falso")
chamada antiga: assertEquals(new BBox(10, 20, 10, 12, 0, 1), g.getBounds())
nova chamada: assertEquals(new BBox(10, 20, 10, 12, 0, 1), g.getBounds(), "Era esperado valores iguais, mas  new BBox(10, 20, 10, 12, 0, 1) é diferente de " + result3539 + " <g.getBounds()>")
chamada antiga: assertEquals(2, GHUtility.count(explorer.setBaseNode(0)))
nova chamada: assertEquals(2, GHUtility.count(explorer.setBaseNode(0)), "Era esperado valores iguais, mas  2 é diferente de " + result3540 + " <GHUtility.count(explorer.setBaseNode(0))>")
chamada antiga: assertEquals(GHUtility.asSet(2, 1), GHUtility.getNeighbors(explorer.setBaseNode(0)))
nova chamada: assertEquals(GHUtility.asSet(2, 1), GHUtility.getNeighbors(explorer.setBaseNode(0)), "Era esperado valores iguais, mas " + result3541 + " <GHUtility.asSet(2, 1)> é diferente de " + result3542 + " <GHUtility.getNeighbors(explorer.setBaseNode(0))>")
chamada antiga: assertTrue(iter.next())
nova chamada: assertTrue(iter.next(), "Era esperado verdadeiro, mas " + result3543 + " <iter.next()> é falso")
chamada antiga: assertEquals(Helper.createPointList3D(3.5, 4.5, 0, 5, 6, 0), iter.fetchWayGeometry(PILLAR_ONLY))
nova chamada: assertEquals(Helper.createPointList3D(3.5, 4.5, 0, 5, 6, 0), iter.fetchWayGeometry(PILLAR_ONLY), "Era esperado valores iguais, mas " + result3544 + " <Helper.createPointList3D(3.5, 4.5, 0, 5, 6, 0)> é diferente de " + result3545 + " <iter.fetchWayGeometry(PILLAR_ONLY)>")
chamada antiga: assertTrue(iter.next())
nova chamada: assertTrue(iter.next(), "Era esperado verdadeiro, mas " + result3546 + " <iter.next()> é falso")
chamada antiga: assertEquals(Helper.createPointList3D(1.5, 1, 0, 2, 3, 0), iter.fetchWayGeometry(PILLAR_ONLY))
nova chamada: assertEquals(Helper.createPointList3D(1.5, 1, 0, 2, 3, 0), iter.fetchWayGeometry(PILLAR_ONLY), "Era esperado valores iguais, mas " + result3547 + " <Helper.createPointList3D(1.5, 1, 0, 2, 3, 0)> é diferente de " + result3548 + " <iter.fetchWayGeometry(PILLAR_ONLY)>")
chamada antiga: assertEquals(Helper.createPointList3D(10, 10, 0, 1.5, 1, 0, 2, 3, 0), iter.fetchWayGeometry(BASE_AND_PILLAR))
nova chamada: assertEquals(Helper.createPointList3D(10, 10, 0, 1.5, 1, 0, 2, 3, 0), iter.fetchWayGeometry(BASE_AND_PILLAR), "Era esperado valores iguais, mas " + result3549 + " <Helper.createPointList3D(10, 10, 0, 1.5, 1, 0, 2, 3, 0)> é diferente de " + result3550 + " <iter.fetchWayGeometry(BASE_AND_PILLAR)>")
chamada antiga: assertEquals(Helper.createPointList3D(1.5, 1, 0, 2, 3, 0, 11, 20, 1), iter.fetchWayGeometry(PILLAR_AND_ADJ))
nova chamada: assertEquals(Helper.createPointList3D(1.5, 1, 0, 2, 3, 0, 11, 20, 1), iter.fetchWayGeometry(PILLAR_AND_ADJ), "Era esperado valores iguais, mas " + result3551 + " <Helper.createPointList3D(1.5, 1, 0, 2, 3, 0, 11, 20, 1)> é diferente de " + result3552 + " <iter.fetchWayGeometry(PILLAR_AND_ADJ)>")
chamada antiga: assertEquals(Helper.createPointList3D(10, 10, 0, 11, 20, 1), iter.fetchWayGeometry(TOWER_ONLY))
nova chamada: assertEquals(Helper.createPointList3D(10, 10, 0, 11, 20, 1), iter.fetchWayGeometry(TOWER_ONLY), "Era esperado valores iguais, mas " + result3553 + " <Helper.createPointList3D(10, 10, 0, 11, 20, 1)> é diferente de " + result3554 + " <iter.fetchWayGeometry(TOWER_ONLY)>")
chamada antiga: assertEquals(Helper.createPointList3D(11, 20, 1, 10, 10, 0), iter.detach(true).fetchWayGeometry(TOWER_ONLY))
nova chamada: assertEquals(Helper.createPointList3D(11, 20, 1, 10, 10, 0), iter.detach(true).fetchWayGeometry(TOWER_ONLY), "Era esperado valores iguais, mas " + result3555 + " <Helper.createPointList3D(11, 20, 1, 10, 10, 0)> é diferente de " + result3556 + " <iter.detach(true).fetchWayGeometry(TOWER_ONLY)>")
chamada antiga: assertEquals(2, GHUtility.count(explorer.setBaseNode(1)))
nova chamada: assertEquals(2, GHUtility.count(explorer.setBaseNode(1)), "Era esperado valores iguais, mas  2 é diferente de " + result3557 + " <GHUtility.count(explorer.setBaseNode(1))>")
chamada antiga: assertEquals(GHUtility.asSet(2, 0), GHUtility.getNeighbors(explorer.setBaseNode(1)))
nova chamada: assertEquals(GHUtility.asSet(2, 0), GHUtility.getNeighbors(explorer.setBaseNode(1)), "Era esperado valores iguais, mas " + result3558 + " <GHUtility.asSet(2, 0)> é diferente de " + result3559 + " <GHUtility.getNeighbors(explorer.setBaseNode(1))>")
chamada antiga: assertEquals(1, GHUtility.count(explorer.setBaseNode(2)))
nova chamada: assertEquals(1, GHUtility.count(explorer.setBaseNode(2)), "Era esperado valores iguais, mas  1 é diferente de " + result3560 + " <GHUtility.count(explorer.setBaseNode(2))>")
chamada antiga: assertEquals(GHUtility.asSet(0), GHUtility.getNeighbors(explorer.setBaseNode(2)))
nova chamada: assertEquals(GHUtility.asSet(0), GHUtility.getNeighbors(explorer.setBaseNode(2)), "Era esperado valores iguais, mas " + result3561 + " <GHUtility.asSet(0)> é diferente de " + result3562 + " <GHUtility.getNeighbors(explorer.setBaseNode(2))>")
chamada antiga: assertEquals(Helper.createPointList3D(), eib.fetchWayGeometry(PILLAR_ONLY))
nova chamada: assertEquals(Helper.createPointList3D(), eib.fetchWayGeometry(PILLAR_ONLY), "Era esperado valores iguais, mas " + result3563 + " <Helper.createPointList3D()> é diferente de " + result3564 + " <eib.fetchWayGeometry(PILLAR_ONLY)>")
chamada antiga: assertEquals(Helper.createPointList3D(11, 20, 1), eib.fetchWayGeometry(BASE_AND_PILLAR))
nova chamada: assertEquals(Helper.createPointList3D(11, 20, 1), eib.fetchWayGeometry(BASE_AND_PILLAR), "Era esperado valores iguais, mas " + result3565 + " <Helper.createPointList3D(11, 20, 1)> é diferente de " + result3566 + " <eib.fetchWayGeometry(BASE_AND_PILLAR)>")
chamada antiga: assertEquals(Helper.createPointList3D(12, 12, 0.4), eib.fetchWayGeometry(PILLAR_AND_ADJ))
nova chamada: assertEquals(Helper.createPointList3D(12, 12, 0.4), eib.fetchWayGeometry(PILLAR_AND_ADJ), "Era esperado valores iguais, mas " + result3567 + " <Helper.createPointList3D(12, 12, 0.4)> é diferente de " + result3568 + " <eib.fetchWayGeometry(PILLAR_AND_ADJ)>")
chamada antiga: assertEquals(GHUtility.asSet(0), GHUtility.getNeighbors(explorer.setBaseNode(2)))
nova chamada: assertEquals(GHUtility.asSet(0), GHUtility.getNeighbors(explorer.setBaseNode(2)), "Era esperado valores iguais, mas " + result3569 + " <GHUtility.asSet(0)> é diferente de " + result3570 + " <GHUtility.getNeighbors(explorer.setBaseNode(2))>")
chamada antiga: assertEquals(store.getNodes(), store.getBaseGraph().getNodes())
nova chamada: assertEquals(store.getNodes(), store.getBaseGraph().getNodes(), "Era esperado valores iguais, mas " + result3571 + " <store.getNodes()> é diferente de " + result3572 + " <store.getBaseGraph().getNodes()>")
chamada antiga: assertEquals(store.getEdges(), store.getBaseGraph().getEdges())
nova chamada: assertEquals(store.getEdges(), store.getBaseGraph().getEdges(), "Era esperado valores iguais, mas " + result3573 + " <store.getEdges()> é diferente de " + result3574 + " <store.getBaseGraph().getEdges()>")
chamada antiga: assertTrue(edge1.getReverse(carAccessEnc))
nova chamada: assertTrue(edge1.getReverse(carAccessEnc), "Era esperado verdadeiro, mas " + result3575 + " <edge1.getReverse(carAccessEnc)> é falso")
chamada antiga: assertTrue(edge0.get(carAccessEnc))
nova chamada: assertTrue(edge0.get(carAccessEnc), "Era esperado verdadeiro, mas " + result3576 + " <edge0.get(carAccessEnc)> é falso")
chamada antiga: assertTrue(edge.getReverse(REVERSE_STATE))
nova chamada: assertTrue(edge.getReverse(REVERSE_STATE), "Era esperado verdadeiro, mas " + result3577 + " <edge.getReverse(REVERSE_STATE)> é falso")
chamada antiga: assertTrue(edge.get(REVERSE_STATE))
nova chamada: assertTrue(edge.get(REVERSE_STATE), "Era esperado verdadeiro, mas " + result3578 + " <edge.get(REVERSE_STATE)> é falso")
chamada antiga: assertTrue(iter.next())
nova chamada: assertTrue(iter.next(), "Era esperado verdadeiro, mas " + result3579 + " <iter.next()> é falso")
chamada antiga: assertTrue(iter.next())
nova chamada: assertTrue(iter.next(), "Era esperado verdadeiro, mas " + result3580 + " <iter.next()> é falso")
chamada antiga: assertEquals(44, iter.getFlags().ints[0])
nova chamada: assertEquals(44, iter.getFlags().ints[0], "Era esperado valores iguais, mas  44 é diferente de " + " iter.getFlags().ints[0]")
chamada antiga: assertEquals(13, edge1.getFlags().ints[0])
nova chamada: assertEquals(13, edge1.getFlags().ints[0], "Era esperado valores iguais, mas  13 é diferente de " + " edge1.getFlags().ints[0]")
chamada antiga: assertEquals(base, edge.getBaseNode())
nova chamada: assertEquals(base, edge.getBaseNode(), "Era esperado valores iguais, mas  base é diferente de " + result3581 + " <edge.getBaseNode()>")
chamada antiga: assertEquals(adj, edge.getAdjNode())
nova chamada: assertEquals(adj, edge.getAdjNode(), "Era esperado valores iguais, mas  adj é diferente de " + result3582 + " <edge.getAdjNode()>")
chamada antiga: assertEquals(reverse, edge.get(REVERSE_STATE))
nova chamada: assertEquals(reverse, edge.get(REVERSE_STATE), "Era esperado valores iguais, mas  reverse é diferente de " + result3583 + " <edge.get(REVERSE_STATE)>")
chamada antiga: assertEquals(edgeId, edge.getEdge())
nova chamada: assertEquals(edgeId, edge.getEdge(), "Era esperado valores iguais, mas  edgeId é diferente de " + result3584 + " <edge.getEdge()>")
chamada antiga: assertEquals(key, edge.getEdgeKey())
nova chamada: assertEquals(key, edge.getEdgeKey(), "Era esperado valores iguais, mas  key é diferente de " + result3585 + " <edge.getEdgeKey()>")
chamada antiga: assertEquals(10, edge.getFlags().ints[0])
nova chamada: assertEquals(10, edge.getFlags().ints[0], "Era esperado valores iguais, mas  10 é diferente de " + " edge.getFlags().ints[0]")
chamada antiga: assertEquals(9, edge.getFlags().ints[0])
nova chamada: assertEquals(9, edge.getFlags().ints[0], "Era esperado valores iguais, mas  9 é diferente de " + " edge.getFlags().ints[0]")
chamada antiga: assertEquals(RoadClass.BRIDLEWAY, edge.get(rcEnc))
nova chamada: assertEquals(RoadClass.BRIDLEWAY, edge.get(rcEnc), "Era esperado valores iguais, mas  RoadClass.BRIDLEWAY é diferente de " + result3586 + " <edge.get(rcEnc)>")
chamada antiga: assertEquals(RoadClass.CORRIDOR, edge.get(rcEnc))
nova chamada: assertEquals(RoadClass.CORRIDOR, edge.get(rcEnc), "Era esperado valores iguais, mas  RoadClass.CORRIDOR é diferente de " + result3587 + " <edge.get(rcEnc)>")
chamada antiga: assertFalse(isClockwise(c, b, a))
nova chamada: assertFalse(isClockwise(c, b, a), "Era esperado falso, mas " + result3588 + " <isClockwise(c, b, a)> é verdadeiro ")
chamada antiga: assertFalse(isClockwise(a, c, b))
nova chamada: assertFalse(isClockwise(a, c, b), "Era esperado falso, mas " + result3589 + " <isClockwise(a, c, b)> é verdadeiro ")
chamada antiga: assertFalse(isClockwise(b, a, c))
nova chamada: assertFalse(isClockwise(b, a, c), "Era esperado falso, mas " + result3590 + " <isClockwise(b, a, c)> é verdadeiro ")
chamada antiga: assertFalse(dc.validEdgeDistance(49.935119, 11.541649, 49.937964, 11.541824, 49.942272, 11.555643))
nova chamada: assertFalse(dc.validEdgeDistance(49.935119, 11.541649, 49.937964, 11.541824, 49.942272, 11.555643), "Era esperado falso, mas " + result3591 + " <dc.validEdgeDistance(49.935119, 11.541649, 49.937964, 11.541824, 49.942272, 11.555643)> é verdadeiro ")
chamada antiga: assertFalse(dc.validEdgeDistance(49.939317, 11.539675, 49.937964, 11.541824, 49.942272, 11.555643))
nova chamada: assertFalse(dc.validEdgeDistance(49.939317, 11.539675, 49.937964, 11.541824, 49.942272, 11.555643), "Era esperado falso, mas " + result3592 + " <dc.validEdgeDistance(49.939317, 11.539675, 49.937964, 11.541824, 49.942272, 11.555643)> é verdadeiro ")
chamada antiga: assertFalse(dc.validEdgeDistance(49.944482, 11.555446, 49.937964, 11.541824, 49.942272, 11.555643))
nova chamada: assertFalse(dc.validEdgeDistance(49.944482, 11.555446, 49.937964, 11.541824, 49.942272, 11.555643), "Era esperado falso, mas " + result3593 + " <dc.validEdgeDistance(49.944482, 11.555446, 49.937964, 11.541824, 49.942272, 11.555643)> é verdadeiro ")
chamada antiga: assertFalse(dc.validEdgeDistance(49.94085, 11.557356, 49.937964, 11.541824, 49.942272, 11.555643))
nova chamada: assertFalse(dc.validEdgeDistance(49.94085, 11.557356, 49.937964, 11.541824, 49.942272, 11.555643), "Era esperado falso, mas " + result3594 + " <dc.validEdgeDistance(49.94085, 11.557356, 49.937964, 11.541824, 49.942272, 11.555643)> é verdadeiro ")
chamada antiga: assertFalse(ArrayUtil.isPermutation(IntArrayList.from(1, 2)))
nova chamada: assertFalse(ArrayUtil.isPermutation(IntArrayList.from(1, 2)), "Era esperado falso, mas " + result3595 + " <ArrayUtil.isPermutation(IntArrayList.from(1, 2))> é verdadeiro ")
chamada antiga: assertFalse(ArrayUtil.isPermutation(IntArrayList.from(-1)))
nova chamada: assertFalse(ArrayUtil.isPermutation(IntArrayList.from(-1)), "Era esperado falso, mas " + result3596 + " <ArrayUtil.isPermutation(IntArrayList.from(-1))> é verdadeiro ")
chamada antiga: assertFalse(ArrayUtil.isPermutation(IntArrayList.from(1)))
nova chamada: assertFalse(ArrayUtil.isPermutation(IntArrayList.from(1)), "Era esperado falso, mas " + result3597 + " <ArrayUtil.isPermutation(IntArrayList.from(1))> é verdadeiro ")
chamada antiga: assertFalse(ArrayUtil.isPermutation(IntArrayList.from(3, 4, 0, 1)))
nova chamada: assertFalse(ArrayUtil.isPermutation(IntArrayList.from(3, 4, 0, 1)), "Era esperado falso, mas " + result3598 + " <ArrayUtil.isPermutation(IntArrayList.from(3, 4, 0, 1))> é verdadeiro ")
chamada antiga: assertFalse(ArrayUtil.isPermutation(IntArrayList.from(0, 1, 3, 3, 4, 4, 6)))
nova chamada: assertFalse(ArrayUtil.isPermutation(IntArrayList.from(0, 1, 3, 3, 4, 4, 6)), "Era esperado falso, mas " + result3599 + " <ArrayUtil.isPermutation(IntArrayList.from(0, 1, 3, 3, 4, 4, 6))> é verdadeiro ")
chamada antiga: assertFalse(map1.containsKey(0))
nova chamada: assertFalse(map1.containsKey(0), "Era esperado falso, mas " + result3600 + " <map1.containsKey(0)> é verdadeiro ")
chamada antiga: assertFalse(edge1.get(carAccessEnc))
nova chamada: assertFalse(edge1.get(carAccessEnc), "Era esperado falso, mas " + result3601 + " <edge1.get(carAccessEnc)> é verdadeiro ")
chamada antiga: assertFalse(edge0.getReverse(carAccessEnc))
nova chamada: assertFalse(edge0.getReverse(carAccessEnc), "Era esperado falso, mas " + result3602 + " <edge0.getReverse(carAccessEnc)> é verdadeiro ")
chamada antiga: assertFalse(edge.get(REVERSE_STATE))
nova chamada: assertFalse(edge.get(REVERSE_STATE), "Era esperado falso, mas " + result3603 + " <edge.get(REVERSE_STATE)> é verdadeiro ")
chamada antiga: assertFalse(edge.get(REVERSE_STATE))
nova chamada: assertFalse(edge.get(REVERSE_STATE), "Era esperado falso, mas " + result3604 + " <edge.get(REVERSE_STATE)> é verdadeiro ")
chamada antiga: assertFalse(edge.getReverse(REVERSE_STATE))
nova chamada: assertFalse(edge.getReverse(REVERSE_STATE), "Era esperado falso, mas " + result3605 + " <edge.getReverse(REVERSE_STATE)> é verdadeiro ")
chamada antiga: assertEquals("[0]", blockArea.toString(0))
nova chamada: assertEquals("[0]", blockArea.toString(0), "Era esperado valores iguais, mas  '[0]' é diferente de " + result3606 + " <blockArea.toString(0)>")
chamada antiga: assertFalse(blockArea.hasCachedEdgeIds(0))
nova chamada: assertFalse(blockArea.hasCachedEdgeIds(0), "Era esperado falso, mas " + result3607 + " <blockArea.hasCachedEdgeIds(0)> é verdadeiro ")
chamada antiga: assertEquals("[1, 2, 6, 7, 11, 12]", blockArea.toString(0))
nova chamada: assertEquals("[1, 2, 6, 7, 11, 12]", blockArea.toString(0), "Era esperado valores iguais, mas  '[1, 2, 6, 7, 11, 12]' é diferente de " + result3608 + " <blockArea.toString(0)>")
chamada antiga: assertFalse(blockArea.hasCachedEdgeIds(0))
nova chamada: assertFalse(blockArea.hasCachedEdgeIds(0), "Era esperado falso, mas " + result3609 + " <blockArea.hasCachedEdgeIds(0)> é verdadeiro ")
chamada antiga: assertEquals("[2, 7]", blockArea.toString(0))
nova chamada: assertEquals("[2, 7]", blockArea.toString(0), "Era esperado valores iguais, mas  '[2, 7]' é diferente de " + result3610 + " <blockArea.toString(0)>")
chamada antiga: assertEquals(assertSetContent, blockedEdges.toString())
nova chamada: assertEquals(assertSetContent, blockedEdges.toString(), "Era esperado valores iguais, mas  assertSetContent é diferente de " + result3611 + " <blockedEdges.toString()>")
chamada antiga: assertTrue(na.is3D())
nova chamada: assertTrue(na.is3D(), "Era esperado verdadeiro, mas " + result3612 + " <na.is3D()> é falso")
chamada antiga: assertEquals(12, graph.getNodes())
nova chamada: assertEquals(12, graph.getNodes(), "Era esperado valores iguais, mas  12 é diferente de " + result3613 + " <graph.getNodes()>")
chamada antiga: assertEquals("named street1", graph.getEdgeIteratorState(iter1.getEdge(), iter1.getAdjNode()).getName())
nova chamada: assertEquals("named street1", graph.getEdgeIteratorState(iter1.getEdge(), iter1.getAdjNode()).getName(), "Era esperado valores iguais, mas  'named street1' é diferente de " + result3614 + " <graph.getEdgeIteratorState(iter1.getEdge(), iter1.getAdjNode()).getName()>")
chamada antiga: assertEquals("named street2", graph.getEdgeIteratorState(iter2.getEdge(), iter2.getAdjNode()).getName())
nova chamada: assertEquals("named street2", graph.getEdgeIteratorState(iter2.getEdge(), iter2.getAdjNode()).getName(), "Era esperado valores iguais, mas  'named street2' é diferente de " + result3615 + " <graph.getEdgeIteratorState(iter2.getEdge(), iter2.getAdjNode()).getName()>")
chamada antiga: assertEquals(128, turnCostStorage.getCapacity())
nova chamada: assertEquals(128, turnCostStorage.getCapacity(), "Era esperado valores iguais, mas  128 é diferente de " + result3616 + " <turnCostStorage.getCapacity()>")
chamada antiga: assertEquals(104, turnCostStorage.getCapacity() / 16)
nova chamada: assertEquals(104, turnCostStorage.getCapacity() / 16, "Era esperado valores iguais, mas  104 é diferente de " + " turnCostStorage.getCapacity() / 16")
chamada antiga: assertEquals(112, turnCostStorage.getCapacity() / 16)
nova chamada: assertEquals(112, turnCostStorage.getCapacity() / 16, "Era esperado valores iguais, mas  112 é diferente de " + " turnCostStorage.getCapacity() / 16")
chamada antiga: assertEquals(TurnCostStorage.NO_TURN_ENTRY, na.getTurnCostIndex(4001))
nova chamada: assertEquals(TurnCostStorage.NO_TURN_ENTRY, na.getTurnCostIndex(4001), "Era esperado valores iguais, mas  TurnCostStorage.NO_TURN_ENTRY é diferente de " + result3617 + " <na.getTurnCostIndex(4001)>")
chamada antiga: assertEquals(12, na.getTurnCostIndex(4000))
nova chamada: assertEquals(12, na.getTurnCostIndex(4000), "Era esperado valores iguais, mas  12 é diferente de " + result3618 + " <na.getTurnCostIndex(4000)>")
chamada antiga: assertEquals(0, store.getLevel(store.toNodePointer(10)))
nova chamada: assertEquals(0, store.getLevel(store.toNodePointer(10)), "Era esperado valores iguais, mas  0 é diferente de " + result3619 + " <store.getLevel(store.toNodePointer(10))>")
chamada antiga: assertEquals(100, store.getLevel(store.toNodePointer(10)))
nova chamada: assertEquals(100, store.getLevel(store.toNodePointer(10)), "Era esperado valores iguais, mas  100 é diferente de " + result3620 + " <store.getLevel(store.toNodePointer(10))>")
chamada antiga: assertEquals(300, store.getLevel(store.toNodePointer(29)))
nova chamada: assertEquals(300, store.getLevel(store.toNodePointer(29)), "Era esperado valores iguais, mas  300 é diferente de " + result3621 + " <store.getLevel(store.toNodePointer(29))>")
chamada antiga: assertEquals(Integer.MAX_VALUE / 1000d + 1000, g.getWeight(0))
nova chamada: assertEquals(Integer.MAX_VALUE / 1000d + 1000, g.getWeight(0), "Era esperado valores iguais, mas  Integer.MAX_VALUE / 1000d + 1000 é diferente de " + result3622 + " <g.getWeight(0)>")
chamada antiga: assertTrue(Double.isInfinite(g.getWeight(0)))
nova chamada: assertTrue(Double.isInfinite(g.getWeight(0)), "Era esperado verdadeiro, mas " + result3623 + " <Double.isInfinite(g.getWeight(0))> é falso")
chamada antiga: assertTrue(Double.isInfinite(g.getWeight(0)))
nova chamada: assertTrue(Double.isInfinite(g.getWeight(0)), "Era esperado verdadeiro, mas " + result3624 + " <Double.isInfinite(g.getWeight(0))> é falso")
chamada antiga: assertTrue(Double.isInfinite(g.getWeight(0)))
nova chamada: assertTrue(Double.isInfinite(g.getWeight(0)), "Era esperado verdadeiro, mas " + result3625 + " <Double.isInfinite(g.getWeight(0))> é falso")
chamada antiga: assertTrue(access.getInt(0) < 0)
nova chamada: assertTrue(access.getInt(0) < 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(Integer.MAX_VALUE, access.getInt(0) >>> 1)
nova chamada: assertEquals(Integer.MAX_VALUE, access.getInt(0) >>> 1, "Era esperado valores iguais, mas  Integer.MAX_VALUE é diferente de " + " access.getInt(0)  1")
chamada antiga: assertTrue(writeLock1.tryLock())
nova chamada: assertTrue(writeLock1.tryLock(), "Era esperado verdadeiro, mas " + result3626 + " <writeLock1.tryLock()> é falso")
chamada antiga: assertTrue(lock2.tryLock())
nova chamada: assertTrue(lock2.tryLock(), "Era esperado verdadeiro, mas " + result3627 + " <lock2.tryLock()> é falso")
chamada antiga: assertTrue(lock2.isLocked())
nova chamada: assertTrue(lock2.isLocked(), "Era esperado verdadeiro, mas " + result3628 + " <lock2.isLocked()> é falso")
chamada antiga: assertEquals(OverlappingFileLockException.class, writeLock4.getObtainFailedReason().getClass())
nova chamada: assertEquals(OverlappingFileLockException.class, writeLock4.getObtainFailedReason().getClass(), "Era esperado valores iguais, mas  OverlappingFileLockException.class é diferente de " + result3629 + " <writeLock4.getObtainFailedReason().getClass()>")
chamada antiga: assertTrue(lock2.isLocked())
nova chamada: assertTrue(lock2.isLocked(), "Era esperado verdadeiro, mas " + result3630 + " <lock2.isLocked()> é falso")
chamada antiga: assertEquals(DAType.MMAP, dir.getDefaultType("nodes", true))
nova chamada: assertEquals(DAType.MMAP, dir.getDefaultType("nodes", true), "Era esperado valores iguais, mas  DAType.MMAP é diferente de " + result3631 + " <dir.getDefaultType('nodes', true)>")
chamada antiga: assertEquals(10, dir.getPreload("nodes"))
nova chamada: assertEquals(10, dir.getPreload("nodes"), "Era esperado valores iguais, mas  10 é diferente de " + result3632 + " <dir.getPreload('nodes')>")
chamada antiga: assertEquals(DAType.RAM_STORE, dir.getDefaultType("nodes", false))
nova chamada: assertEquals(DAType.RAM_STORE, dir.getDefaultType("nodes", false), "Era esperado valores iguais, mas  DAType.RAM_STORE é diferente de " + result3633 + " <dir.getDefaultType('nodes', false)>")
chamada antiga: assertEquals(DAType.MMAP, dir.getDefaultType("nodes_ch_car", false))
nova chamada: assertEquals(DAType.MMAP, dir.getDefaultType("nodes_ch_car", false), "Era esperado valores iguais, mas  DAType.MMAP é diferente de " + result3634 + " <dir.getDefaultType('nodes_ch_car', false)>")
chamada antiga: assertEquals(123, da.getInt(7 * 4))
nova chamada: assertEquals(123, da.getInt(7 * 4), "Era esperado valores iguais, mas  123 é diferente de " + result3635 + " <da.getInt(7 * 4)>")
chamada antiga: assertEquals(Integer.MAX_VALUE / 3, da.getInt(10 * 4))
nova chamada: assertEquals(Integer.MAX_VALUE / 3, da.getInt(10 * 4), "Era esperado valores iguais, mas  Integer.MAX_VALUE / 3 é diferente de " + result3636 + " <da.getInt(10 * 4)>")
chamada antiga: assertEquals(0, da.getInt(2 * 4))
nova chamada: assertEquals(0, da.getInt(2 * 4), "Era esperado valores iguais, mas  0 é diferente de " + result3637 + " <da.getInt(2 * 4)>")
chamada antiga: assertEquals(0, da.getInt(3 * 4))
nova chamada: assertEquals(0, da.getInt(3 * 4), "Era esperado valores iguais, mas  0 é diferente de " + result3638 + " <da.getInt(3 * 4)>")
chamada antiga: assertEquals(123, da.getInt(7 * 4))
nova chamada: assertEquals(123, da.getInt(7 * 4), "Era esperado valores iguais, mas  123 é diferente de " + result3639 + " <da.getInt(7 * 4)>")
chamada antiga: assertEquals(Integer.MAX_VALUE / 3, da.getInt(10 * 4))
nova chamada: assertEquals(Integer.MAX_VALUE / 3, da.getInt(10 * 4), "Era esperado valores iguais, mas  Integer.MAX_VALUE / 3 é diferente de " + result3640 + " <da.getInt(10 * 4)>")
chamada antiga: assertTrue(da.loadExisting())
nova chamada: assertTrue(da.loadExisting(), "Era esperado verdadeiro, mas " + result3641 + " <da.loadExisting()> é falso")
chamada antiga: assertEquals(123, da.getInt(7 * 4))
nova chamada: assertEquals(123, da.getInt(7 * 4), "Era esperado valores iguais, mas  123 é diferente de " + result3642 + " <da.getInt(7 * 4)>")
chamada antiga: assertTrue(da.loadExisting())
nova chamada: assertTrue(da.loadExisting(), "Era esperado verdadeiro, mas " + result3643 + " <da.loadExisting()> é falso")
chamada antiga: assertEquals(321, da.getInt(2 * 4))
nova chamada: assertEquals(321, da.getInt(2 * 4), "Era esperado valores iguais, mas  321 é diferente de " + result3644 + " <da.getInt(2 * 4)>")
chamada antiga: assertEquals(123, da.getHeader(7 * 4))
nova chamada: assertEquals(123, da.getHeader(7 * 4), "Era esperado valores iguais, mas  123 é diferente de " + result3645 + " <da.getHeader(7 * 4)>")
chamada antiga: assertEquals(Integer.MAX_VALUE / 3, da.getHeader(10 * 4))
nova chamada: assertEquals(Integer.MAX_VALUE / 3, da.getHeader(10 * 4), "Era esperado valores iguais, mas  Integer.MAX_VALUE / 3 é diferente de " + result3646 + " <da.getHeader(10 * 4)>")
chamada antiga: assertTrue(da.loadExisting())
nova chamada: assertTrue(da.loadExisting(), "Era esperado verdadeiro, mas " + result3647 + " <da.loadExisting()> é falso")
chamada antiga: assertEquals(123, da.getHeader(7 * 4))
nova chamada: assertEquals(123, da.getHeader(7 * 4), "Era esperado valores iguais, mas  123 é diferente de " + result3648 + " <da.getHeader(7 * 4)>")
chamada antiga: assertEquals(200, da.getInt(31 * 4))
nova chamada: assertEquals(200, da.getInt(31 * 4), "Era esperado valores iguais, mas  200 é diferente de " + result3649 + " <da.getInt(31 * 4)>")
chamada antiga: assertEquals(200, da.getInt(31 * 4))
nova chamada: assertEquals(200, da.getInt(31 * 4), "Era esperado valores iguais, mas  200 é diferente de " + result3650 + " <da.getInt(31 * 4)>")
chamada antiga: assertEquals(220, da.getInt(32 * 4))
nova chamada: assertEquals(220, da.getInt(32 * 4), "Era esperado valores iguais, mas  220 é diferente de " + result3651 + " <da.getInt(32 * 4)>")
chamada antiga: assertEquals(1, da.getSegments())
nova chamada: assertEquals(1, da.getSegments(), "Era esperado valores iguais, mas  1 é diferente de " + result3652 + " <da.getSegments()>")
chamada antiga: assertTrue(olds > 3)
nova chamada: assertTrue(olds > 3, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(da.loadExisting())
nova chamada: assertTrue(da.loadExisting(), "Era esperado verdadeiro, mas " + result3653 + " <da.loadExisting()> é falso")
chamada antiga: assertEquals(olds, da.getSegments())
nova chamada: assertEquals(olds, da.getSegments(), "Era esperado valores iguais, mas  olds é diferente de " + result3654 + " <da.getSegments()>")
chamada antiga: assertEquals(321, da.getInt(400))
nova chamada: assertEquals(321, da.getInt(400), "Era esperado valores iguais, mas  321 é diferente de " + result3655 + " <da.getInt(400)>")
chamada antiga: assertEquals(128, da.getSegmentSize())
nova chamada: assertEquals(128, da.getSegmentSize(), "Era esperado valores iguais, mas  128 é diferente de " + result3656 + " <da.getSegmentSize()>")
chamada antiga: assertEquals(128, da.getSegmentSize())
nova chamada: assertEquals(128, da.getSegmentSize(), "Era esperado valores iguais, mas  128 é diferente de " + result3657 + " <da.getSegmentSize()>")
chamada antiga: assertEquals(128, da.getSegmentSize())
nova chamada: assertEquals(128, da.getSegmentSize(), "Era esperado valores iguais, mas  128 é diferente de " + result3658 + " <da.getSegmentSize()>")
chamada antiga: assertEquals(Integer.MAX_VALUE / 3, BitUtil.LITTLE.toInt(bytes))
nova chamada: assertEquals(Integer.MAX_VALUE / 3, BitUtil.LITTLE.toInt(bytes), "Era esperado valores iguais, mas  Integer.MAX_VALUE / 3 é diferente de " + result3659 + " <BitUtil.LITTLE.toInt(bytes)>")
chamada antiga: assertEquals(Integer.MAX_VALUE / 3, BitUtil.LITTLE.toInt(bytes))
nova chamada: assertEquals(Integer.MAX_VALUE / 3, BitUtil.LITTLE.toInt(bytes), "Era esperado valores iguais, mas  Integer.MAX_VALUE / 3 é diferente de " + result3660 + " <BitUtil.LITTLE.toInt(bytes)>")
chamada antiga: assertEquals(256, bufferIndex)
nova chamada: assertEquals(256, bufferIndex, "Era esperado valores iguais, mas  256 é diferente de " + " bufferIndex")
chamada antiga: assertEquals(11111, index)
nova chamada: assertEquals(11111, index, "Era esperado valores iguais, mas  11111 é diferente de " + " index")
chamada antiga: assertEquals(120, da.getByte(8))
nova chamada: assertEquals(120, da.getByte(8), "Era esperado valores iguais, mas  120 é diferente de " + result3661 + " <da.getByte(8)>")
chamada antiga: assertEquals(Short.MAX_VALUE / 5, da.getShort(6))
nova chamada: assertEquals(Short.MAX_VALUE / 5, da.getShort(6), "Era esperado valores iguais, mas  Short.MAX_VALUE / 5 é diferente de " + result3662 + " <da.getShort(6)>")
chamada antiga: assertEquals(Short.MAX_VALUE / 7, da.getShort(8))
nova chamada: assertEquals(Short.MAX_VALUE / 7, da.getShort(8), "Era esperado valores iguais, mas  Short.MAX_VALUE / 7 é diferente de " + result3663 + " <da.getShort(8)>")
chamada antiga: assertEquals(Short.MAX_VALUE / 9, da.getShort(10))
nova chamada: assertEquals(Short.MAX_VALUE / 9, da.getShort(10), "Era esperado valores iguais, mas  Short.MAX_VALUE / 9 é diferente de " + result3664 + " <da.getShort(10)>")
chamada antiga: assertEquals(Short.MAX_VALUE / 10, da.getShort(14))
nova chamada: assertEquals(Short.MAX_VALUE / 10, da.getShort(14), "Era esperado valores iguais, mas  Short.MAX_VALUE / 10 é diferente de " + result3665 + " <da.getShort(14)>")
chamada antiga: assertEquals(unsignedShort, (int) da.getShort(12) & 0x0000FFFF)
nova chamada: assertEquals(unsignedShort, (int) da.getShort(12) & 0x0000FFFF, "Era esperado valores iguais, mas  unsignedShort é diferente de " + " (int) da.getShort(12) & 0x0000FFFF")
chamada antiga: assertTrue(da.loadExisting())
nova chamada: assertTrue(da.loadExisting(), "Era esperado verdadeiro, mas " + result3666 + " <da.loadExisting()> é falso")
chamada antiga: assertEquals(123, da.getInt(7 * 4))
nova chamada: assertEquals(123, da.getInt(7 * 4), "Era esperado valores iguais, mas  123 é diferente de " + result3667 + " <da.getInt(7 * 4)>")
chamada antiga: assertTrue(da.loadExisting())
nova chamada: assertTrue(da.loadExisting(), "Era esperado verdadeiro, mas " + result3668 + " <da.loadExisting()> é falso")
chamada antiga: assertEquals(123, da.getInt(7 * 4))
nova chamada: assertEquals(123, da.getInt(7 * 4), "Era esperado valores iguais, mas  123 é diferente de " + result3669 + " <da.getInt(7 * 4)>")
chamada antiga: assertEquals(2, getCountAll(defaultSize + 1))
nova chamada: assertEquals(2, getCountAll(defaultSize + 1), "Era esperado valores iguais, mas  2 é diferente de " + result3670 + " <getCountAll(defaultSize + 1)>")
chamada antiga: assertEquals(0, graph.edge(0, 1).getFlags().ints[0])
nova chamada: assertEquals(0, graph.edge(0, 1).getFlags().ints[0], "Era esperado valores iguais, mas  0 é diferente de " + " graph.edge(0, 1).getFlags().ints[0]")
chamada antiga: assertEquals(1, getCountOut(1))
nova chamada: assertEquals(1, getCountOut(1), "Era esperado valores iguais, mas  1 é diferente de " + result3671 + " <getCountOut(1)>")
chamada antiga: assertEquals(2, getCountOut(1))
nova chamada: assertEquals(2, getCountOut(1), "Era esperado valores iguais, mas  2 é diferente de " + result3672 + " <getCountOut(1)>")
chamada antiga: assertEquals(1, getCountOut(2))
nova chamada: assertEquals(1, getCountOut(2), "Era esperado valores iguais, mas  1 é diferente de " + result3673 + " <getCountOut(2)>")
chamada antiga: assertEquals(1, getCountOut(1))
nova chamada: assertEquals(1, getCountOut(1), "Era esperado valores iguais, mas  1 é diferente de " + result3674 + " <getCountOut(1)>")
chamada antiga: assertEquals(2, getCountOut(2))
nova chamada: assertEquals(2, getCountOut(2), "Era esperado valores iguais, mas  2 é diferente de " + result3675 + " <getCountOut(2)>")
chamada antiga: assertEquals(1, getCountOut(3))
nova chamada: assertEquals(1, getCountOut(3), "Era esperado valores iguais, mas  1 é diferente de " + result3676 + " <getCountOut(3)>")
chamada antiga: assertEquals(1, getCountIn(1))
nova chamada: assertEquals(1, getCountIn(1), "Era esperado valores iguais, mas  1 é diferente de " + result3677 + " <getCountIn(1)>")
chamada antiga: assertEquals(2, getCountIn(2))
nova chamada: assertEquals(2, getCountIn(2), "Era esperado valores iguais, mas  2 é diferente de " + result3678 + " <getCountIn(2)>")
chamada antiga: assertEquals(0, getCountIn(3))
nova chamada: assertEquals(0, getCountIn(3), "Era esperado valores iguais, mas  0 é diferente de " + result3679 + " <getCountIn(3)>")
chamada antiga: assertEquals(3, getCountOut(1))
nova chamada: assertEquals(3, getCountOut(1), "Era esperado valores iguais, mas  3 é diferente de " + result3680 + " <getCountOut(1)>")
chamada antiga: assertEquals(0, getCountOut(2))
nova chamada: assertEquals(0, getCountOut(2), "Era esperado valores iguais, mas  0 é diferente de " + result3681 + " <getCountOut(2)>")
chamada antiga: assertEquals(1, getCountOut(3))
nova chamada: assertEquals(1, getCountOut(3), "Era esperado valores iguais, mas  1 é diferente de " + result3682 + " <getCountOut(3)>")
chamada antiga: assertEquals(2, i.getAdjNode())
nova chamada: assertEquals(2, i.getAdjNode(), "Era esperado valores iguais, mas  2 é diferente de " + result3683 + " <i.getAdjNode()>")
chamada antiga: assertTrue(i.next())
nova chamada: assertTrue(i.next(), "Era esperado verdadeiro, mas " + result3684 + " <i.next()> é falso")
chamada antiga: assertEquals(12, i.getAdjNode())
nova chamada: assertEquals(12, i.getAdjNode(), "Era esperado valores iguais, mas  12 é diferente de " + result3685 + " <i.getAdjNode()>")
chamada antiga: assertTrue(i.next())
nova chamada: assertTrue(i.next(), "Era esperado verdadeiro, mas " + result3686 + " <i.next()> é falso")
chamada antiga: assertEquals(11, i.getAdjNode())
nova chamada: assertEquals(11, i.getAdjNode(), "Era esperado valores iguais, mas  11 é diferente de " + result3687 + " <i.getAdjNode()>")
chamada antiga: assertTrue(i.next())
nova chamada: assertTrue(i.next(), "Era esperado verdadeiro, mas " + result3688 + " <i.next()> é falso")
chamada antiga: assertEquals(2, i.getAdjNode())
nova chamada: assertEquals(2, i.getAdjNode(), "Era esperado valores iguais, mas  2 é diferente de " + result3689 + " <i.getAdjNode()>")
chamada antiga: assertEquals(4, getCountAll(1))
nova chamada: assertEquals(4, getCountAll(1), "Era esperado valores iguais, mas  4 é diferente de " + result3690 + " <getCountAll(1)>")
chamada antiga: assertEquals(1, getCountIn(1))
nova chamada: assertEquals(1, getCountIn(1), "Era esperado valores iguais, mas  1 é diferente de " + result3691 + " <getCountIn(1)>")
chamada antiga: assertEquals(2, getCountIn(2))
nova chamada: assertEquals(2, getCountIn(2), "Era esperado valores iguais, mas  2 é diferente de " + result3692 + " <getCountIn(2)>")
chamada antiga: assertEquals(0, getCountIn(3))
nova chamada: assertEquals(0, getCountIn(3), "Era esperado valores iguais, mas  0 é diferente de " + result3693 + " <getCountIn(3)>")
chamada antiga: assertEquals(3, getCountOut(1))
nova chamada: assertEquals(3, getCountOut(1), "Era esperado valores iguais, mas  3 é diferente de " + result3694 + " <getCountOut(1)>")
chamada antiga: assertEquals(0, getCountOut(2))
nova chamada: assertEquals(0, getCountOut(2), "Era esperado valores iguais, mas  0 é diferente de " + result3695 + " <getCountOut(2)>")
chamada antiga: assertEquals(1, getCountOut(3))
nova chamada: assertEquals(1, getCountOut(3), "Era esperado valores iguais, mas  1 é diferente de " + result3696 + " <getCountOut(3)>")
chamada antiga: assertEquals(2, i.getAdjNode())
nova chamada: assertEquals(2, i.getAdjNode(), "Era esperado valores iguais, mas  2 é diferente de " + result3697 + " <i.getAdjNode()>")
chamada antiga: assertTrue(i.next())
nova chamada: assertTrue(i.next(), "Era esperado verdadeiro, mas " + result3698 + " <i.next()> é falso")
chamada antiga: assertEquals(12, i.getAdjNode())
nova chamada: assertEquals(12, i.getAdjNode(), "Era esperado valores iguais, mas  12 é diferente de " + result3699 + " <i.getAdjNode()>")
chamada antiga: assertTrue(i.next())
nova chamada: assertTrue(i.next(), "Era esperado verdadeiro, mas " + result3700 + " <i.next()> é falso")
chamada antiga: assertEquals(11, i.getAdjNode())
nova chamada: assertEquals(11, i.getAdjNode(), "Era esperado valores iguais, mas  11 é diferente de " + result3701 + " <i.getAdjNode()>")
chamada antiga: assertTrue(i.next())
nova chamada: assertTrue(i.next(), "Era esperado verdadeiro, mas " + result3702 + " <i.next()> é falso")
chamada antiga: assertEquals(2, i.getAdjNode())
nova chamada: assertEquals(2, i.getAdjNode(), "Era esperado valores iguais, mas  2 é diferente de " + result3703 + " <i.getAdjNode()>")
chamada antiga: assertTrue(i.next())
nova chamada: assertTrue(i.next(), "Era esperado verdadeiro, mas " + result3704 + " <i.next()> é falso")
chamada antiga: assertEquals(2, i.getAdjNode())
nova chamada: assertEquals(2, i.getAdjNode(), "Era esperado valores iguais, mas  2 é diferente de " + result3705 + " <i.getAdjNode()>")
chamada antiga: assertTrue(i.next())
nova chamada: assertTrue(i.next(), "Era esperado verdadeiro, mas " + result3706 + " <i.next()> é falso")
chamada antiga: assertEquals(3, i.getAdjNode())
nova chamada: assertEquals(3, i.getAdjNode(), "Era esperado valores iguais, mas  3 é diferente de " + result3707 + " <i.getAdjNode()>")
chamada antiga: assertEquals(2, i.getAdjNode())
nova chamada: assertEquals(2, i.getAdjNode(), "Era esperado valores iguais, mas  2 é diferente de " + result3708 + " <i.getAdjNode()>")
chamada antiga: assertEquals(edge.getName(), newEdge.getName())
nova chamada: assertEquals(edge.getName(), newEdge.getName(), "Era esperado valores iguais, mas " + result3709 + " <edge.getName()> é diferente de " + result3710 + " <newEdge.getName()>")
chamada antiga: assertEquals(edge.getFlags(), newEdge.getFlags())
nova chamada: assertEquals(edge.getFlags(), newEdge.getFlags(), "Era esperado valores iguais, mas " + result3711 + " <edge.getFlags()> é diferente de " + result3712 + " <newEdge.getFlags()>")
chamada antiga: assertEquals(edge.fetchWayGeometry(FetchMode.PILLAR_ONLY), newEdge.fetchWayGeometry(FetchMode.PILLAR_ONLY))
nova chamada: assertEquals(edge.fetchWayGeometry(FetchMode.PILLAR_ONLY), newEdge.fetchWayGeometry(FetchMode.PILLAR_ONLY), "Era esperado valores iguais, mas " + result3713 + " <edge.fetchWayGeometry(FetchMode.PILLAR_ONLY)> é diferente de " + result3714 + " <newEdge.fetchWayGeometry(FetchMode.PILLAR_ONLY)>")
chamada antiga: assertEquals(2, graph.getNodes())
nova chamada: assertEquals(2, graph.getNodes(), "Era esperado valores iguais, mas  2 é diferente de " + result3715 + " <graph.getNodes()>")
chamada antiga: assertEquals(2, graph.getNodes())
nova chamada: assertEquals(2, graph.getNodes(), "Era esperado valores iguais, mas  2 é diferente de " + result3716 + " <graph.getNodes()>")
chamada antiga: assertEquals(3, graph.getNodes())
nova chamada: assertEquals(3, graph.getNodes(), "Era esperado valores iguais, mas  3 é diferente de " + result3717 + " <graph.getNodes()>")
chamada antiga: assertEquals(0, graph.getNodes())
nova chamada: assertEquals(0, graph.getNodes(), "Era esperado valores iguais, mas  0 é diferente de " + result3718 + " <graph.getNodes()>")
chamada antiga: assertEquals(GHUtility.asSet(0), GHUtility.getNeighbors(carOutExplorer.setBaseNode((1))))
nova chamada: assertEquals(GHUtility.asSet(0), GHUtility.getNeighbors(carOutExplorer.setBaseNode((1))), "Era esperado valores iguais, mas " + result3719 + " <GHUtility.asSet(0)> é diferente de " + result3720 + " <GHUtility.getNeighbors(carOutExplorer.setBaseNode((1)))>")
chamada antiga: assertEquals(GHUtility.asSet(5, 4, 3, 2, 1), GHUtility.getNeighbors(carOutExplorer.setBaseNode(0)))
nova chamada: assertEquals(GHUtility.asSet(5, 4, 3, 2, 1), GHUtility.getNeighbors(carOutExplorer.setBaseNode(0)), "Era esperado valores iguais, mas " + result3721 + " <GHUtility.asSet(5, 4, 3, 2, 1)> é diferente de " + result3722 + " <GHUtility.getNeighbors(carOutExplorer.setBaseNode(0))>")
chamada antiga: assertEquals(1, getCountAll(1))
nova chamada: assertEquals(1, getCountAll(1), "Era esperado valores iguais, mas  1 é diferente de " + result3723 + " <getCountAll(1)>")
chamada antiga: assertEquals(1, getCountIn(1))
nova chamada: assertEquals(1, getCountIn(1), "Era esperado valores iguais, mas  1 é diferente de " + result3724 + " <getCountIn(1)>")
chamada antiga: assertEquals(1, getCountOut(1))
nova chamada: assertEquals(1, getCountOut(1), "Era esperado valores iguais, mas  1 é diferente de " + result3725 + " <getCountOut(1)>")
chamada antiga: assertEquals(2, getCountAll(2))
nova chamada: assertEquals(2, getCountAll(2), "Era esperado valores iguais, mas  2 é diferente de " + result3726 + " <getCountAll(2)>")
chamada antiga: assertEquals(1, getCountIn(2))
nova chamada: assertEquals(1, getCountIn(2), "Era esperado valores iguais, mas  1 é diferente de " + result3727 + " <getCountIn(2)>")
chamada antiga: assertEquals(2, getCountOut(2))
nova chamada: assertEquals(2, getCountOut(2), "Era esperado valores iguais, mas  2 é diferente de " + result3728 + " <getCountOut(2)>")
chamada antiga: assertEquals(4, getCountAll(3))
nova chamada: assertEquals(4, getCountAll(3), "Era esperado valores iguais, mas  4 é diferente de " + result3729 + " <getCountAll(3)>")
chamada antiga: assertEquals(3, getCountIn(3))
nova chamada: assertEquals(3, getCountIn(3), "Era esperado valores iguais, mas  3 é diferente de " + result3730 + " <getCountIn(3)>")
chamada antiga: assertEquals(2, getCountOut(3))
nova chamada: assertEquals(2, getCountOut(3), "Era esperado valores iguais, mas  2 é diferente de " + result3731 + " <getCountOut(3)>")
chamada antiga: assertEquals(1, getCountAll(4))
nova chamada: assertEquals(1, getCountAll(4), "Era esperado valores iguais, mas  1 é diferente de " + result3732 + " <getCountAll(4)>")
chamada antiga: assertEquals(1, getCountIn(4))
nova chamada: assertEquals(1, getCountIn(4), "Era esperado valores iguais, mas  1 é diferente de " + result3733 + " <getCountIn(4)>")
chamada antiga: assertEquals(0, getCountOut(4))
nova chamada: assertEquals(0, getCountOut(4), "Era esperado valores iguais, mas  0 é diferente de " + result3734 + " <getCountOut(4)>")
chamada antiga: assertEquals(1, getCountAll(5))
nova chamada: assertEquals(1, getCountAll(5), "Era esperado valores iguais, mas  1 é diferente de " + result3735 + " <getCountAll(5)>")
chamada antiga: assertEquals(1, getCountIn(5))
nova chamada: assertEquals(1, getCountIn(5), "Era esperado valores iguais, mas  1 é diferente de " + result3736 + " <getCountIn(5)>")
chamada antiga: assertEquals(1, getCountOut(5))
nova chamada: assertEquals(1, getCountOut(5), "Era esperado valores iguais, mas  1 é diferente de " + result3737 + " <getCountOut(5)>")
chamada antiga: assertEquals(1, getCountAll(nn))
nova chamada: assertEquals(1, getCountAll(nn), "Era esperado valores iguais, mas  1 é diferente de " + result3738 + " <getCountAll(nn)>")
chamada antiga: assertEquals(2, getCountAll(1))
nova chamada: assertEquals(2, getCountAll(1), "Era esperado valores iguais, mas  2 é diferente de " + result3739 + " <getCountAll(1)>")
chamada antiga: assertEquals(3, getCountAll(1))
nova chamada: assertEquals(3, getCountAll(1), "Era esperado valores iguais, mas  3 é diferente de " + result3740 + " <getCountAll(1)>")
chamada antiga: assertEquals(4, getCountAll(1))
nova chamada: assertEquals(4, getCountAll(1), "Era esperado valores iguais, mas  4 é diferente de " + result3741 + " <getCountAll(1)>")
chamada antiga: assertEquals(5, getCountAll(1))
nova chamada: assertEquals(5, getCountAll(1), "Era esperado valores iguais, mas  5 é diferente de " + result3742 + " <getCountAll(1)>")
chamada antiga: assertEquals(6, getCountAll(1))
nova chamada: assertEquals(6, getCountAll(1), "Era esperado valores iguais, mas  6 é diferente de " + result3743 + " <getCountAll(1)>")
chamada antiga: assertEquals(7, getCountAll(1))
nova chamada: assertEquals(7, getCountAll(1), "Era esperado valores iguais, mas  7 é diferente de " + result3744 + " <getCountAll(1)>")
chamada antiga: assertEquals(8, getCountAll(1))
nova chamada: assertEquals(8, getCountAll(1), "Era esperado valores iguais, mas  8 é diferente de " + result3745 + " <getCountAll(1)>")
chamada antiga: assertEquals(8, getCountOut(1))
nova chamada: assertEquals(8, getCountOut(1), "Era esperado valores iguais, mas  8 é diferente de " + result3746 + " <getCountOut(1)>")
chamada antiga: assertEquals(1, getCountIn(1))
nova chamada: assertEquals(1, getCountIn(1), "Era esperado valores iguais, mas  1 é diferente de " + result3747 + " <getCountIn(1)>")
chamada antiga: assertEquals(1, getCountIn(2))
nova chamada: assertEquals(1, getCountIn(2), "Era esperado valores iguais, mas  1 é diferente de " + result3748 + " <getCountIn(2)>")
chamada antiga: assertEquals(0, getCountAll(1))
nova chamada: assertEquals(0, getCountAll(1), "Era esperado valores iguais, mas  0 é diferente de " + result3749 + " <getCountAll(1)>")
chamada antiga: assertEquals(1, getCountAll(1))
nova chamada: assertEquals(1, getCountAll(1), "Era esperado valores iguais, mas  1 é diferente de " + result3750 + " <getCountAll(1)>")
chamada antiga: assertTrue(iter.next())
nova chamada: assertTrue(iter.next(), "Era esperado verdadeiro, mas " + result3751 + " <iter.next()> é falso")
chamada antiga: assertTrue(iter.get(carAccessEnc))
nova chamada: assertTrue(iter.get(carAccessEnc), "Era esperado verdadeiro, mas " + result3752 + " <iter.get(carAccessEnc)> é falso")
chamada antiga: assertTrue(iter.getReverse(carAccessEnc))
nova chamada: assertTrue(iter.getReverse(carAccessEnc), "Era esperado verdadeiro, mas " + result3753 + " <iter.getReverse(carAccessEnc)> é falso")
chamada antiga: assertTrue(iter.next())
nova chamada: assertTrue(iter.next(), "Era esperado verdadeiro, mas " + result3754 + " <iter.next()> é falso")
chamada antiga: assertTrue(iter.get(carAccessEnc))
nova chamada: assertTrue(iter.get(carAccessEnc), "Era esperado verdadeiro, mas " + result3755 + " <iter.get(carAccessEnc)> é falso")
chamada antiga: assertEquals(2, iter.getBaseNode())
nova chamada: assertEquals(2, iter.getBaseNode(), "Era esperado valores iguais, mas  2 é diferente de " + result3756 + " <iter.getBaseNode()>")
chamada antiga: assertEquals(0, iter.getAdjNode())
nova chamada: assertEquals(0, iter.getAdjNode(), "Era esperado valores iguais, mas  0 é diferente de " + result3757 + " <iter.getAdjNode()>")
chamada antiga: assertEquals(0, iter.getBaseNode())
nova chamada: assertEquals(0, iter.getBaseNode(), "Era esperado valores iguais, mas  0 é diferente de " + result3758 + " <iter.getBaseNode()>")
chamada antiga: assertEquals(2, iter.getAdjNode())
nova chamada: assertEquals(2, iter.getAdjNode(), "Era esperado valores iguais, mas  2 é diferente de " + result3759 + " <iter.getAdjNode()>")
chamada antiga: assertNotNull(iter)
nova chamada: assertNotNull(iter, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(0, iter.getBaseNode())
nova chamada: assertEquals(0, iter.getBaseNode(), "Era esperado valores iguais, mas  0 é diferente de " + result3760 + " <iter.getBaseNode()>")
chamada antiga: assertEquals(2, iter.getAdjNode())
nova chamada: assertEquals(2, iter.getAdjNode(), "Era esperado valores iguais, mas  2 é diferente de " + result3761 + " <iter.getAdjNode()>")
chamada antiga: assertNull(iter)
nova chamada: assertNull(iter, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(3, getCountOut(2))
nova chamada: assertEquals(3, getCountOut(2), "Era esperado valores iguais, mas  3 é diferente de " + result3762 + " <getCountOut(2)>")
chamada antiga: assertTrue(iter.next())
nova chamada: assertTrue(iter.next(), "Era esperado verdadeiro, mas " + result3763 + " <iter.next()> é falso")
chamada antiga: assertEquals(2, oneIter.getBaseNode())
nova chamada: assertEquals(2, oneIter.getBaseNode(), "Era esperado valores iguais, mas  2 é diferente de " + result3764 + " <oneIter.getBaseNode()>")
chamada antiga: assertTrue(oneIter.get(carAccessEnc))
nova chamada: assertTrue(oneIter.get(carAccessEnc), "Era esperado verdadeiro, mas " + result3765 + " <oneIter.get(carAccessEnc)> é falso")
chamada antiga: assertEquals(3, oneIter.getBaseNode())
nova chamada: assertEquals(3, oneIter.getBaseNode(), "Era esperado valores iguais, mas  3 é diferente de " + result3766 + " <oneIter.getBaseNode()>")
chamada antiga: assertTrue(oneIter.getReverse(carAccessEnc))
nova chamada: assertTrue(oneIter.getReverse(carAccessEnc), "Era esperado verdadeiro, mas " + result3767 + " <oneIter.getReverse(carAccessEnc)> é falso")
chamada antiga: assertEquals(4, getCountOut(2))
nova chamada: assertEquals(4, getCountOut(2), "Era esperado valores iguais, mas  4 é diferente de " + result3768 + " <getCountOut(2)>")
chamada antiga: assertEquals(1, getCountAll(0))
nova chamada: assertEquals(1, getCountAll(0), "Era esperado valores iguais, mas  1 é diferente de " + result3769 + " <getCountAll(0)>")
chamada antiga: assertEquals(2, getCountAll(0))
nova chamada: assertEquals(2, getCountAll(0), "Era esperado valores iguais, mas  2 é diferente de " + result3770 + " <getCountAll(0)>")
chamada antiga: assertEquals(4, iter.getBaseNode())
nova chamada: assertEquals(4, iter.getBaseNode(), "Era esperado valores iguais, mas  4 é diferente de " + result3771 + " <iter.getBaseNode()>")
chamada antiga: assertEquals(10, iter.getAdjNode())
nova chamada: assertEquals(10, iter.getAdjNode(), "Era esperado valores iguais, mas  10 é diferente de " + result3772 + " <iter.getAdjNode()>")
chamada antiga: assertEquals(14, iter.getBaseNode())
nova chamada: assertEquals(14, iter.getBaseNode(), "Era esperado valores iguais, mas  14 é diferente de " + result3773 + " <iter.getBaseNode()>")
chamada antiga: assertEquals(10, iter.getAdjNode())
nova chamada: assertEquals(10, iter.getAdjNode(), "Era esperado valores iguais, mas  10 é diferente de " + result3774 + " <iter.getAdjNode()>")
chamada antiga: assertTrue(iter.next())
nova chamada: assertTrue(iter.next(), "Era esperado verdadeiro, mas " + result3775 + " <iter.next()> é falso")
chamada antiga: assertEquals(14, iter.getAdjNode())
nova chamada: assertEquals(14, iter.getAdjNode(), "Era esperado valores iguais, mas  14 é diferente de " + result3776 + " <iter.getAdjNode()>")
chamada antiga: assertTrue(iter.next())
nova chamada: assertTrue(iter.next(), "Era esperado verdadeiro, mas " + result3777 + " <iter.next()> é falso")
chamada antiga: assertEquals(4, iter.getAdjNode())
nova chamada: assertEquals(4, iter.getAdjNode(), "Era esperado valores iguais, mas  4 é diferente de " + result3778 + " <iter.getAdjNode()>")
chamada antiga: assertTrue(iter.next())
nova chamada: assertTrue(iter.next(), "Era esperado verdadeiro, mas " + result3779 + " <iter.next()> é falso")
chamada antiga: assertEquals(4, iter.getAdjNode())
nova chamada: assertEquals(4, iter.getAdjNode(), "Era esperado valores iguais, mas  4 é diferente de " + result3780 + " <iter.getAdjNode()>")
chamada antiga: assertTrue(iter.next())
nova chamada: assertTrue(iter.next(), "Era esperado verdadeiro, mas " + result3781 + " <iter.next()> é falso")
chamada antiga: assertEquals(4, iter.getAdjNode())
nova chamada: assertEquals(4, iter.getAdjNode(), "Era esperado valores iguais, mas  4 é diferente de " + result3782 + " <iter.getAdjNode()>")
chamada antiga: assertEquals(GHUtility.asSet(3, 1), GHUtility.getNeighbors(footOutExplorer.setBaseNode(0)))
nova chamada: assertEquals(GHUtility.asSet(3, 1), GHUtility.getNeighbors(footOutExplorer.setBaseNode(0)), "Era esperado valores iguais, mas " + result3783 + " <GHUtility.asSet(3, 1)> é diferente de " + result3784 + " <GHUtility.getNeighbors(footOutExplorer.setBaseNode(0))>")
chamada antiga: assertEquals(GHUtility.asSet(3, 2), GHUtility.getNeighbors(carOutExplorer.setBaseNode(0)))
nova chamada: assertEquals(GHUtility.asSet(3, 2), GHUtility.getNeighbors(carOutExplorer.setBaseNode(0)), "Era esperado valores iguais, mas " + result3785 + " <GHUtility.asSet(3, 2)> é diferente de " + result3786 + " <GHUtility.getNeighbors(carOutExplorer.setBaseNode(0))>")
chamada antiga: assertTrue(iter.next())
nova chamada: assertTrue(iter.next(), "Era esperado verdadeiro, mas " + result3787 + " <iter.next()> é falso")
chamada antiga: assertEquals(0, iter.getBaseNode())
nova chamada: assertEquals(0, iter.getBaseNode(), "Era esperado valores iguais, mas  0 é diferente de " + result3788 + " <iter.getBaseNode()>")
chamada antiga: assertEquals(1, iter.getAdjNode())
nova chamada: assertEquals(1, iter.getAdjNode(), "Era esperado valores iguais, mas  1 é diferente de " + result3789 + " <iter.getAdjNode()>")
chamada antiga: assertTrue(iter.next())
nova chamada: assertTrue(iter.next(), "Era esperado verdadeiro, mas " + result3790 + " <iter.next()> é falso")
chamada antiga: assertEquals(1, edgeId2 - edgeId)
nova chamada: assertEquals(1, edgeId2 - edgeId, "Era esperado valores iguais, mas  1 é diferente de " + " edgeId2 - edgeId")
chamada antiga: assertEquals(3, iter.getBaseNode())
nova chamada: assertEquals(3, iter.getBaseNode(), "Era esperado valores iguais, mas  3 é diferente de " + result3791 + " <iter.getBaseNode()>")
chamada antiga: assertEquals(1, iter.getAdjNode())
nova chamada: assertEquals(1, iter.getAdjNode(), "Era esperado valores iguais, mas  1 é diferente de " + result3792 + " <iter.getAdjNode()>")
chamada antiga: assertTrue(iter.next())
nova chamada: assertTrue(iter.next(), "Era esperado verdadeiro, mas " + result3793 + " <iter.next()> é falso")
chamada antiga: assertEquals(3, iter.getBaseNode())
nova chamada: assertEquals(3, iter.getBaseNode(), "Era esperado valores iguais, mas  3 é diferente de " + result3794 + " <iter.getBaseNode()>")
chamada antiga: assertEquals(2, iter.getAdjNode())
nova chamada: assertEquals(2, iter.getAdjNode(), "Era esperado valores iguais, mas  2 é diferente de " + result3795 + " <iter.getAdjNode()>")
chamada antiga: assertEquals(graph.getEdgeIteratorState(iter1.getEdge(), iter1.getAdjNode()).getName(), "named street1")
nova chamada: assertEquals(graph.getEdgeIteratorState(iter1.getEdge(), iter1.getAdjNode()).getName(), "named street1", "Era esperado valores iguais, mas " + result3796 + " <graph.getEdgeIteratorState(iter1.getEdge(), iter1.getAdjNode()).getName()> é diferente de " + " 'named street1'")
chamada antiga: assertEquals(graph.getEdgeIteratorState(iter2.getEdge(), iter2.getAdjNode()).getName(), "named street2")
nova chamada: assertEquals(graph.getEdgeIteratorState(iter2.getEdge(), iter2.getAdjNode()).getName(), "named street2", "Era esperado valores iguais, mas " + result3797 + " <graph.getEdgeIteratorState(iter2.getEdge(), iter2.getAdjNode()).getName()> é diferente de " + " 'named street2'")
chamada antiga: assertEquals(Integer.MAX_VALUE / 3, edge.getFlags().ints[0])
nova chamada: assertEquals(Integer.MAX_VALUE / 3, edge.getFlags().ints[0], "Era esperado valores iguais, mas  Integer.MAX_VALUE / 3 é diferente de " + " edge.getFlags().ints[0]")
chamada antiga: assertTrue(edgeIter.get(access0Enc))
nova chamada: assertTrue(edgeIter.get(access0Enc), "Era esperado verdadeiro, mas " + result3798 + " <edgeIter.get(access0Enc)> é falso")
chamada antiga: assertTrue(edgeIter.getReverse(access0Enc))
nova chamada: assertTrue(edgeIter.getReverse(access0Enc), "Era esperado verdadeiro, mas " + result3799 + " <edgeIter.getReverse(access0Enc)> é falso")
chamada antiga: assertTrue(edgeIter.getReverse(access1Enc))
nova chamada: assertTrue(edgeIter.getReverse(access1Enc), "Era esperado verdadeiro, mas " + result3800 + " <edgeIter.getReverse(access1Enc)> é falso")
chamada antiga: assertTrue(edgeIter.get(access0Enc))
nova chamada: assertTrue(edgeIter.get(access0Enc), "Era esperado verdadeiro, mas " + result3801 + " <edgeIter.get(access0Enc)> é falso")
chamada antiga: assertTrue(na.is3D())
nova chamada: assertTrue(na.is3D(), "Era esperado verdadeiro, mas " + result3802 + " <na.is3D()> é falso")
chamada antiga: assertEquals(Helper.createPointList3D(10, 27, 72, 11, 20, 1), GHUtility.getEdge(graph, 0, 1).fetchWayGeometry(FetchMode.PILLAR_ONLY))
nova chamada: assertEquals(Helper.createPointList3D(10, 27, 72, 11, 20, 1), GHUtility.getEdge(graph, 0, 1).fetchWayGeometry(FetchMode.PILLAR_ONLY), "Era esperado valores iguais, mas " + result3803 + " <Helper.createPointList3D(10, 27, 72, 11, 20, 1)> é diferente de " + result3804 + " <GHUtility.getEdge(graph, 0, 1).fetchWayGeometry(FetchMode.PILLAR_ONLY)>")
chamada antiga: assertEquals(Helper.createPointList3D(10, 20, -10, 10, 27, 72, 11, 20, 1, 11, 2, 100), GHUtility.getEdge(graph, 0, 1).fetchWayGeometry(FetchMode.ALL))
nova chamada: assertEquals(Helper.createPointList3D(10, 20, -10, 10, 27, 72, 11, 20, 1, 11, 2, 100), GHUtility.getEdge(graph, 0, 1).fetchWayGeometry(FetchMode.ALL), "Era esperado valores iguais, mas " + result3805 + " <Helper.createPointList3D(10, 20, -10, 10, 27, 72, 11, 20, 1, 11, 2, 100)> é diferente de " + result3806 + " <GHUtility.getEdge(graph, 0, 1).fetchWayGeometry(FetchMode.ALL)>")
chamada antiga: assertEquals(Helper.createPointList3D(11, 2, 100, 11, 20, 1, 10, 27, 72, 10, 20, -10), GHUtility.getEdge(graph, 1, 0).fetchWayGeometry(FetchMode.ALL))
nova chamada: assertEquals(Helper.createPointList3D(11, 2, 100, 11, 20, 1, 10, 27, 72, 10, 20, -10), GHUtility.getEdge(graph, 1, 0).fetchWayGeometry(FetchMode.ALL), "Era esperado valores iguais, mas " + result3807 + " <Helper.createPointList3D(11, 2, 100, 11, 20, 1, 10, 27, 72, 10, 20, -10)> é diferente de " + result3808 + " <GHUtility.getEdge(graph, 1, 0).fetchWayGeometry(FetchMode.ALL)>")
chamada antiga: assertTrue(na.is3D())
nova chamada: assertTrue(na.is3D(), "Era esperado verdadeiro, mas " + result3809 + " <na.is3D()> é falso")
chamada antiga: assertEquals(4, baseGraph.getMaxGeoRef())
nova chamada: assertEquals(4, baseGraph.getMaxGeoRef(), "Era esperado valores iguais, mas  4 é diferente de " + result3810 + " <baseGraph.getMaxGeoRef()>")
chamada antiga: assertEquals(4 + (1 + 12), baseGraph.getMaxGeoRef())
nova chamada: assertEquals(4 + (1 + 12), baseGraph.getMaxGeoRef(), "Era esperado valores iguais, mas  4 + (1 + 12) é diferente de " + result3811 + " <baseGraph.getMaxGeoRef()>")
chamada antiga: assertEquals(4 + (1 + 12), baseGraph.getMaxGeoRef())
nova chamada: assertEquals(4 + (1 + 12), baseGraph.getMaxGeoRef(), "Era esperado valores iguais, mas  4 + (1 + 12) é diferente de " + result3812 + " <baseGraph.getMaxGeoRef()>")
chamada antiga: assertEquals(4 + (1 + 12), baseGraph.getMaxGeoRef())
nova chamada: assertEquals(4 + (1 + 12), baseGraph.getMaxGeoRef(), "Era esperado valores iguais, mas  4 + (1 + 12) é diferente de " + result3813 + " <baseGraph.getMaxGeoRef()>")
chamada antiga: assertEquals(4 + (1 + 12), baseGraph.getMaxGeoRef())
nova chamada: assertEquals(4 + (1 + 12), baseGraph.getMaxGeoRef(), "Era esperado valores iguais, mas  4 + (1 + 12) é diferente de " + result3814 + " <baseGraph.getMaxGeoRef()>")
chamada antiga: assertEquals(4 + (1 + 12) + (1 + 6), baseGraph.getMaxGeoRef())
nova chamada: assertEquals(4 + (1 + 12) + (1 + 6), baseGraph.getMaxGeoRef(), "Era esperado valores iguais, mas  4 + (1 + 12) + (1 + 6) é diferente de " + result3815 + " <baseGraph.getMaxGeoRef()>")
chamada antiga: assertEquals(4 + (1 + 12) + (1 + 6) + (1 + 6), baseGraph.getMaxGeoRef())
nova chamada: assertEquals(4 + (1 + 12) + (1 + 6) + (1 + 6), baseGraph.getMaxGeoRef(), "Era esperado valores iguais, mas  4 + (1 + 12) + (1 + 6) + (1 + 6) é diferente de " + result3816 + " <baseGraph.getMaxGeoRef()>")
chamada antiga: assertEquals(2, iter.getAdjNode())
nova chamada: assertEquals(2, iter.getAdjNode(), "Era esperado valores iguais, mas  2 é diferente de " + result3817 + " <iter.getAdjNode()>")
chamada antiga: assertEquals(2, edgeState02.getAdjNode())
nova chamada: assertEquals(2, edgeState02.getAdjNode(), "Era esperado valores iguais, mas  2 é diferente de " + result3818 + " <edgeState02.getAdjNode()>")
chamada antiga: assertTrue(edgeState02.get(carAccessEnc))
nova chamada: assertTrue(edgeState02.get(carAccessEnc), "Era esperado verdadeiro, mas " + result3819 + " <edgeState02.get(carAccessEnc)> é falso")
chamada antiga: assertEquals(0, edgeState20.getAdjNode())
nova chamada: assertEquals(0, edgeState20.getAdjNode(), "Era esperado valores iguais, mas  0 é diferente de " + result3820 + " <edgeState20.getAdjNode()>")
chamada antiga: assertEquals(2, edgeState20.getBaseNode())
nova chamada: assertEquals(2, edgeState20.getBaseNode(), "Era esperado valores iguais, mas  2 é diferente de " + result3821 + " <edgeState20.getBaseNode()>")
chamada antiga: assertEquals(GHUtility.getEdge(graph, 0, 2).getFlags(), edgeState02.getFlags())
nova chamada: assertEquals(GHUtility.getEdge(graph, 0, 2).getFlags(), edgeState02.getFlags(), "Era esperado valores iguais, mas " + result3822 + " <GHUtility.getEdge(graph, 0, 2).getFlags()> é diferente de " + result3823 + " <edgeState02.getFlags()>")
chamada antiga: assertEquals(GHUtility.getEdge(graph, 2, 0).getFlags(), edgeState20.getFlags())
nova chamada: assertEquals(GHUtility.getEdge(graph, 2, 0).getFlags(), edgeState20.getFlags(), "Era esperado valores iguais, mas " + result3824 + " <GHUtility.getEdge(graph, 2, 0).getFlags()> é diferente de " + result3825 + " <edgeState20.getFlags()>")
chamada antiga: assertEquals(1, iter.getAdjNode())
nova chamada: assertEquals(1, iter.getAdjNode(), "Era esperado valores iguais, mas  1 é diferente de " + result3826 + " <iter.getAdjNode()>")
chamada antiga: assertEquals(2, edgeState02.getAdjNode())
nova chamada: assertEquals(2, edgeState02.getAdjNode(), "Era esperado valores iguais, mas  2 é diferente de " + result3827 + " <edgeState02.getAdjNode()>")
chamada antiga: assertEquals(2, edgeState20.getBaseNode())
nova chamada: assertEquals(2, edgeState20.getBaseNode(), "Era esperado valores iguais, mas  2 é diferente de " + result3828 + " <edgeState20.getBaseNode()>")
chamada antiga: assertEquals(0, iter.fetchWayGeometry(FetchMode.PILLAR_ONLY).size())
nova chamada: assertEquals(0, iter.fetchWayGeometry(FetchMode.PILLAR_ONLY).size(), "Era esperado valores iguais, mas  0 é diferente de " + result3829 + " <iter.fetchWayGeometry(FetchMode.PILLAR_ONLY).size()>")
chamada antiga: assertEquals(3, edgeState33.getBaseNode())
nova chamada: assertEquals(3, edgeState33.getBaseNode(), "Era esperado valores iguais, mas  3 é diferente de " + result3830 + " <edgeState33.getBaseNode()>")
chamada antiga: assertEquals(3, edgeState33.getAdjNode())
nova chamada: assertEquals(3, edgeState33.getAdjNode(), "Era esperado valores iguais, mas  3 é diferente de " + result3831 + " <edgeState33.getAdjNode()>")
chamada antiga: assertEquals(edgeState02.getFlags(), edgeState33.detach(false).getFlags())
nova chamada: assertEquals(edgeState02.getFlags(), edgeState33.detach(false).getFlags(), "Era esperado valores iguais, mas " + result3832 + " <edgeState02.getFlags()> é diferente de " + result3833 + " <edgeState33.detach(false).getFlags()>")
chamada antiga: assertEquals(edgeState20.getFlags(), edgeState33.detach(true).getFlags())
nova chamada: assertEquals(edgeState20.getFlags(), edgeState33.detach(true).getFlags(), "Era esperado valores iguais, mas " + result3834 + " <edgeState20.getFlags()> é diferente de " + result3835 + " <edgeState33.detach(true).getFlags()>")
chamada antiga: assertTrue(instance.loadExisting())
nova chamada: assertTrue(instance.loadExisting(), "Era esperado verdadeiro, mas " + result3836 + " <instance.loadExisting()> é falso")
chamada antiga: assertEquals("123", instance.get("test.min"))
nova chamada: assertEquals("123", instance.get("test.min"), "Era esperado valores iguais, mas  '123' é diferente de " + result3837 + " <instance.get('test.min')>")
chamada antiga: assertEquals("321", instance.get("test.max"))
nova chamada: assertEquals("321", instance.get("test.max"), "Era esperado valores iguais, mas  '321' é diferente de " + result3838 + " <instance.get('test.max')>")
chamada antiga: assertEquals("test", map.get("blup"))
nova chamada: assertEquals("test", map.get("blup"), "Era esperado valores iguais, mas  'test' é diferente de " + result3839 + " <map.get('blup')>")
chamada antiga: assertEquals("xy", map.get("blup2"))
nova chamada: assertEquals("xy", map.get("blup2"), "Era esperado valores iguais, mas  'xy' é diferente de " + result3840 + " <map.get('blup2')>")
chamada antiga: assertFalse(lock2.tryLock())
nova chamada: assertFalse(lock2.tryLock(), "Era esperado falso, mas " + result3841 + " <lock2.tryLock()> é verdadeiro ")
chamada antiga: assertFalse(writeLock4.tryLock())
nova chamada: assertFalse(writeLock4.tryLock(), "Era esperado falso, mas " + result3842 + " <writeLock4.tryLock()> é verdadeiro ")
chamada antiga: assertFalse(da.loadExisting())
nova chamada: assertFalse(da.loadExisting(), "Era esperado falso, mas " + result3843 + " <da.loadExisting()> é verdadeiro ")
chamada antiga: assertFalse(da.loadExisting())
nova chamada: assertFalse(da.loadExisting(), "Era esperado falso, mas " + result3844 + " <da.loadExisting()> é verdadeiro ")
chamada antiga: assertFalse(da.loadExisting())
nova chamada: assertFalse(da.loadExisting(), "Era esperado falso, mas " + result3845 + " <da.loadExisting()> é verdadeiro ")
chamada antiga: assertFalse(da.loadExisting())
nova chamada: assertFalse(da.loadExisting(), "Era esperado falso, mas " + result3846 + " <da.loadExisting()> é verdadeiro ")
chamada antiga: assertFalse(i.next())
nova chamada: assertFalse(i.next(), "Era esperado falso, mas " + result3847 + " <i.next()> é verdadeiro ")
chamada antiga: assertFalse(i.next())
nova chamada: assertFalse(i.next(), "Era esperado falso, mas " + result3848 + " <i.next()> é verdadeiro ")
chamada antiga: assertFalse(i.next())
nova chamada: assertFalse(i.next(), "Era esperado falso, mas " + result3849 + " <i.next()> é verdadeiro ")
chamada antiga: assertFalse(i.next())
nova chamada: assertFalse(i.next(), "Era esperado falso, mas " + result3850 + " <i.next()> é verdadeiro ")
chamada antiga: assertFalse(i.next())
nova chamada: assertFalse(i.next(), "Era esperado falso, mas " + result3851 + " <i.next()> é verdadeiro ")
chamada antiga: assertFalse(i.next())
nova chamada: assertFalse(i.next(), "Era esperado falso, mas " + result3852 + " <i.next()> é verdadeiro ")
chamada antiga: assertFalse(i.next())
nova chamada: assertFalse(i.next(), "Era esperado falso, mas " + result3853 + " <i.next()> é verdadeiro ")
chamada antiga: assertFalse(iter.getReverse(carAccessEnc))
nova chamada: assertFalse(iter.getReverse(carAccessEnc), "Era esperado falso, mas " + result3854 + " <iter.getReverse(carAccessEnc)> é verdadeiro ")
chamada antiga: assertFalse(oneIter.getReverse(carAccessEnc))
nova chamada: assertFalse(oneIter.getReverse(carAccessEnc), "Era esperado falso, mas " + result3855 + " <oneIter.getReverse(carAccessEnc)> é verdadeiro ")
chamada antiga: assertFalse(oneIter.get(carAccessEnc))
nova chamada: assertFalse(oneIter.get(carAccessEnc), "Era esperado falso, mas " + result3856 + " <oneIter.get(carAccessEnc)> é verdadeiro ")
chamada antiga: assertFalse(iter.next())
nova chamada: assertFalse(iter.next(), "Era esperado falso, mas " + result3857 + " <iter.next()> é verdadeiro ")
chamada antiga: assertFalse(iter.next())
nova chamada: assertFalse(iter.next(), "Era esperado falso, mas " + result3858 + " <iter.next()> é verdadeiro ")
chamada antiga: assertFalse(iter.next())
nova chamada: assertFalse(iter.next(), "Era esperado falso, mas " + result3859 + " <iter.next()> é verdadeiro ")
chamada antiga: assertFalse(iter.next())
nova chamada: assertFalse(iter.next(), "Era esperado falso, mas " + result3860 + " <iter.next()> é verdadeiro ")
chamada antiga: assertFalse(edgeIter.get(access1Enc))
nova chamada: assertFalse(edgeIter.get(access1Enc), "Era esperado falso, mas " + result3861 + " <edgeIter.get(access1Enc)> é verdadeiro ")
chamada antiga: assertFalse(edgeIter.getReverse(access0Enc))
nova chamada: assertFalse(edgeIter.getReverse(access0Enc), "Era esperado falso, mas " + result3862 + " <edgeIter.getReverse(access0Enc)> é verdadeiro ")
chamada antiga: assertFalse(edgeState20.get(carAccessEnc))
nova chamada: assertFalse(edgeState20.get(carAccessEnc), "Era esperado falso, mas " + result3863 + " <edgeState20.get(carAccessEnc)> é verdadeiro ")
chamada antiga: assertFalse(instance.loadExisting())
nova chamada: assertFalse(instance.loadExisting(), "Era esperado falso, mas " + result3864 + " <instance.loadExisting()> é verdadeiro ")
chamada antiga: assertFalse(instance.loadExisting())
nova chamada: assertFalse(instance.loadExisting(), "Era esperado falso, mas " + result3865 + " <instance.loadExisting()> é verdadeiro ")
chamada antiga: assertTrue(lock.tryLock())
nova chamada: assertTrue(lock.tryLock(), "Era esperado verdadeiro, mas " + result3866 + " <lock.tryLock()> é falso")
chamada antiga: assertTrue(lock.isLocked())
nova chamada: assertTrue(lock.isLocked(), "Era esperado verdadeiro, mas " + result3867 + " <lock.isLocked()> é falso")
chamada antiga: assertFalse(lock.tryLock())
nova chamada: assertFalse(lock.tryLock(), "Era esperado falso, mas " + result3868 + " <lock.tryLock()> é verdadeiro ")
chamada antiga: assertTrue(lock.isLocked())
nova chamada: assertTrue(lock.isLocked(), "Era esperado verdadeiro, mas " + result3869 + " <lock.isLocked()> é falso")
chamada antiga: assertFalse(lock2.tryLock())
nova chamada: assertFalse(lock2.tryLock(), "Era esperado falso, mas " + result3870 + " <lock2.tryLock()> é verdadeiro ")
chamada antiga: assertTrue(lock2.isLocked())
nova chamada: assertTrue(lock2.isLocked(), "Era esperado verdadeiro, mas " + result3871 + " <lock2.isLocked()> é falso")
chamada antiga: assertFalse(lock.isLocked())
nova chamada: assertFalse(lock.isLocked(), "Era esperado falso, mas " + result3872 + " <lock.isLocked()> é verdadeiro ")
chamada antiga: assertTrue(lock.tryLock())
nova chamada: assertTrue(lock.tryLock(), "Era esperado verdadeiro, mas " + result3873 + " <lock.tryLock()> é falso")
chamada antiga: assertTrue(lock.isLocked())
nova chamada: assertTrue(lock.isLocked(), "Era esperado verdadeiro, mas " + result3874 + " <lock.isLocked()> é falso")
chamada antiga: assertFalse(lock.isLocked())
nova chamada: assertFalse(lock.isLocked(), "Era esperado falso, mas " + result3875 + " <lock.isLocked()> é verdadeiro ")
chamada antiga: assertEquals(expected, actual)
nova chamada: assertEquals(expected, actual, "Era esperado valores iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertTrue(res.isValid())
nova chamada: assertTrue(res.isValid(), "Era esperado verdadeiro, mas " + result3876 + " <res.isValid()> é falso")
chamada antiga: assertEquals(new GHPoint(-0.4, 0.9), res.getSnappedPoint())
nova chamada: assertEquals(new GHPoint(-0.4, 0.9), res.getSnappedPoint(), "Era esperado valores iguais, mas  new GHPoint(-0.4, 0.9) é diferente de " + result3877 + " <res.getSnappedPoint()>")
chamada antiga: assertTrue(res.isValid())
nova chamada: assertTrue(res.isValid(), "Era esperado verdadeiro, mas " + result3878 + " <res.isValid()> é falso")
chamada antiga: assertEquals(new GHPoint(-0.6, 1.6), res.getSnappedPoint())
nova chamada: assertEquals(new GHPoint(-0.6, 1.6), res.getSnappedPoint(), "Era esperado valores iguais, mas  new GHPoint(-0.6, 1.6) é diferente de " + result3879 + " <res.getSnappedPoint()>")
chamada antiga: assertTrue(res.isValid())
nova chamada: assertTrue(res.isValid(), "Era esperado verdadeiro, mas " + result3880 + " <res.isValid()> é falso")
chamada antiga: assertEquals(new GHPoint(-0.441624, 0.317259), res.getSnappedPoint())
nova chamada: assertEquals(new GHPoint(-0.441624, 0.317259), res.getSnappedPoint(), "Era esperado valores iguais, mas  new GHPoint(-0.441624, 0.317259) é diferente de " + result3881 + " <res.getSnappedPoint()>")
chamada antiga: assertEquals(edges.size(), graph.getEdges())
nova chamada: assertEquals(edges.size(), graph.getEdges(), "Era esperado valores iguais, mas " + result3882 + " <edges.size()> é diferente de " + result3883 + " <graph.getEdges()>")
chamada antiga: assertEquals(edges.size(), graph.getEdges())
nova chamada: assertEquals(edges.size(), graph.getEdges(), "Era esperado valores iguais, mas " + result3884 + " <edges.size()> é diferente de " + result3885 + " <graph.getEdges()>")
chamada antiga: assertEquals(1, findClosestEdge(index, 51.2, 9.4))
nova chamada: assertEquals(1, findClosestEdge(index, 51.2, 9.4), "Era esperado valores iguais, mas  1 é diferente de " + result3886 + " <findClosestEdge(index, 51.2, 9.4)>")
chamada antiga: assertEquals(3, findClosestEdge(index, 0, 0))
nova chamada: assertEquals(3, findClosestEdge(index, 0, 0), "Era esperado valores iguais, mas  3 é diferente de " + result3887 + " <findClosestEdge(index, 0, 0)>")
chamada antiga: assertEquals(3, findClosestEdge(index, 0, 0.1))
nova chamada: assertEquals(3, findClosestEdge(index, 0, 0.1), "Era esperado valores iguais, mas  3 é diferente de " + result3888 + " <findClosestEdge(index, 0, 0.1)>")
chamada antiga: assertEquals(3, findClosestEdge(index, 0.1, 0.1))
nova chamada: assertEquals(3, findClosestEdge(index, 0.1, 0.1), "Era esperado valores iguais, mas  3 é diferente de " + result3889 + " <findClosestEdge(index, 0.1, 0.1)>")
chamada antiga: assertEquals(1, findClosestNode(index, -0.5, -0.5))
nova chamada: assertEquals(1, findClosestNode(index, -0.5, -0.5), "Era esperado valores iguais, mas  1 é diferente de " + result3890 + " <findClosestNode(index, -0.5, -0.5)>")
chamada antiga: assertEquals(0, findClosestEdge(index, 51.25, 9.43))
nova chamada: assertEquals(0, findClosestEdge(index, 51.25, 9.43), "Era esperado valores iguais, mas  0 é diferente de " + result3891 + " <findClosestEdge(index, 51.25, 9.43)>")
chamada antiga: assertEquals(1, index.findClosest(-.6, -.6, EdgeFilter.ALL_EDGES).getClosestNode())
nova chamada: assertEquals(1, index.findClosest(-.6, -.6, EdgeFilter.ALL_EDGES).getClosestNode(), "Era esperado valores iguais, mas  1 é diferente de " + result3892 + " <index.findClosest(-.6, -.6, EdgeFilter.ALL_EDGES).getClosestNode()>")
chamada antiga: assertEquals(2, index.findClosest(-.6, -.6, iter -> iter.getBaseNode() == 2 || iter.getAdjNode() == 2).getClosestNode())
nova chamada: assertEquals(2, index.findClosest(-.6, -.6, iter -> iter.getBaseNode() == 2 || iter.getAdjNode() == 2).getClosestNode(), "Era esperado valores iguais, mas  2 é diferente de " + result3893 + " <index.findClosest(-.6, -.6, iter -> iter.getBaseNode() == 2 || iter.getAdjNode() == 2).getClosestNode()>")
chamada antiga: assertTrue((rmin2 - check2) < 0.0001)
nova chamada: assertTrue((rmin2 - check2) < 0.0001, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(snap.isValid())
nova chamada: assertTrue(snap.isValid(), "Era esperado verdadeiro, mas " + result3894 + " <snap.isValid()> é falso")
chamada antiga: assertEquals(33, snap.getClosestNode())
nova chamada: assertEquals(33, snap.getClosestNode(), "Era esperado valores iguais, mas  33 é diferente de " + result3895 + " <snap.getClosestNode()>")
chamada antiga: assertTrue(snap.isValid())
nova chamada: assertTrue(snap.isValid(), "Era esperado verdadeiro, mas " + result3896 + " <snap.isValid()> é falso")
chamada antiga: assertEquals(2, snap.getClosestNode())
nova chamada: assertEquals(2, snap.getClosestNode(), "Era esperado valores iguais, mas  2 é diferente de " + result3897 + " <snap.getClosestNode()>")
chamada antiga: assertTrue(graph.getNodes() > 0)
nova chamada: assertTrue(graph.getNodes() > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(3, findClosestEdge(idx, 5, 2))
nova chamada: assertEquals(3, findClosestEdge(idx, 5, 2), "Era esperado valores iguais, mas  3 é diferente de " + result3898 + " <findClosestEdge(idx, 5, 2)>")
chamada antiga: assertEquals(3, findClosestEdge(idx, 1.5, 2))
nova chamada: assertEquals(3, findClosestEdge(idx, 1.5, 2), "Era esperado valores iguais, mas  3 é diferente de " + result3899 + " <findClosestEdge(idx, 1.5, 2)>")
chamada antiga: assertEquals(1, findClosestEdge(idx, -1, -1))
nova chamada: assertEquals(1, findClosestEdge(idx, -1, -1), "Era esperado valores iguais, mas  1 é diferente de " + result3900 + " <findClosestEdge(idx, -1, -1)>")
chamada antiga: assertEquals(4, findClosestEdge(idx, 4, 0))
nova chamada: assertEquals(4, findClosestEdge(idx, 4, 0), "Era esperado valores iguais, mas  4 é diferente de " + result3901 + " <findClosestEdge(idx, 4, 0)>")
chamada antiga: assertEquals(3, findClosestEdge(idx, 5, 2))
nova chamada: assertEquals(3, findClosestEdge(idx, 5, 2), "Era esperado valores iguais, mas  3 é diferente de " + result3902 + " <findClosestEdge(idx, 5, 2)>")
chamada antiga: assertEquals(3, findClosestEdge(idx, 1.5, 2))
nova chamada: assertEquals(3, findClosestEdge(idx, 1.5, 2), "Era esperado valores iguais, mas  3 é diferente de " + result3903 + " <findClosestEdge(idx, 1.5, 2)>")
chamada antiga: assertEquals(1, findClosestEdge(idx, -1, -1))
nova chamada: assertEquals(1, findClosestEdge(idx, -1, -1), "Era esperado valores iguais, mas  1 é diferente de " + result3904 + " <findClosestEdge(idx, -1, -1)>")
chamada antiga: assertEquals(6, findClosestNode(idx, 4.5, -0.5))
nova chamada: assertEquals(6, findClosestNode(idx, 4.5, -0.5), "Era esperado valores iguais, mas  6 é diferente de " + result3905 + " <findClosestNode(idx, 4.5, -0.5)>")
chamada antiga: assertEquals(3, findClosestEdge(idx, 4, 1))
nova chamada: assertEquals(3, findClosestEdge(idx, 4, 1), "Era esperado valores iguais, mas  3 é diferente de " + result3906 + " <findClosestEdge(idx, 4, 1)>")
chamada antiga: assertEquals(4, findClosestEdge(idx, 4, 0))
nova chamada: assertEquals(4, findClosestEdge(idx, 4, 0), "Era esperado valores iguais, mas  4 é diferente de " + result3907 + " <findClosestEdge(idx, 4, 0)>")
chamada antiga: assertEquals(6, findClosestNode(idx, 4, -2))
nova chamada: assertEquals(6, findClosestNode(idx, 4, -2), "Era esperado valores iguais, mas  6 é diferente de " + result3908 + " <findClosestNode(idx, 4, -2)>")
chamada antiga: assertEquals(5, findClosestEdge(idx, 3, 3))
nova chamada: assertEquals(5, findClosestEdge(idx, 3, 3), "Era esperado valores iguais, mas  5 é diferente de " + result3909 + " <findClosestEdge(idx, 3, 3)>")
chamada antiga: assertEquals(3, findClosestEdge(idx, 1.637, 2.23))
nova chamada: assertEquals(3, findClosestEdge(idx, 1.637, 2.23), "Era esperado valores iguais, mas  3 é diferente de " + result3910 + " <findClosestEdge(idx, 1.637, 2.23)>")
chamada antiga: assertEquals(10, findClosestEdge(idx, 3.649, 1.375))
nova chamada: assertEquals(10, findClosestEdge(idx, 3.649, 1.375), "Era esperado valores iguais, mas  10 é diferente de " + result3911 + " <findClosestEdge(idx, 3.649, 1.375)>")
chamada antiga: assertEquals(9, findClosestNode(idx, 3.3, 2.2))
nova chamada: assertEquals(9, findClosestNode(idx, 3.3, 2.2), "Era esperado valores iguais, mas  9 é diferente de " + result3912 + " <findClosestNode(idx, 3.3, 2.2)>")
chamada antiga: assertEquals(6, findClosestNode(idx, 3.0, 1.5))
nova chamada: assertEquals(6, findClosestNode(idx, 3.0, 1.5), "Era esperado valores iguais, mas  6 é diferente de " + result3913 + " <findClosestNode(idx, 3.0, 1.5)>")
chamada antiga: assertEquals(15, findClosestEdge(idx, 3.8, 0))
nova chamada: assertEquals(15, findClosestEdge(idx, 3.8, 0), "Era esperado valores iguais, mas  15 é diferente de " + result3914 + " <findClosestEdge(idx, 3.8, 0)>")
chamada antiga: assertEquals(15, findClosestEdge(idx, 3.8466, 0.021))
nova chamada: assertEquals(15, findClosestEdge(idx, 3.8466, 0.021), "Era esperado valores iguais, mas  15 é diferente de " + result3915 + " <findClosestEdge(idx, 3.8466, 0.021)>")
chamada antiga: assertEquals(10, findClosestEdge(idx, 3.649, 1.375))
nova chamada: assertEquals(10, findClosestEdge(idx, 3.649, 1.375), "Era esperado valores iguais, mas  10 é diferente de " + result3916 + " <findClosestEdge(idx, 3.649, 1.375)>")
chamada antiga: assertEquals(15, findClosestEdge(idx, 3.8465748, 0.021762699))
nova chamada: assertEquals(15, findClosestEdge(idx, 3.8465748, 0.021762699), "Era esperado valores iguais, mas  15 é diferente de " + result3917 + " <findClosestEdge(idx, 3.8465748, 0.021762699)>")
chamada antiga: assertEquals(4, findClosestEdge(idx, 2.485, 1.373))
nova chamada: assertEquals(4, findClosestEdge(idx, 2.485, 1.373), "Era esperado valores iguais, mas  4 é diferente de " + result3918 + " <findClosestEdge(idx, 2.485, 1.373)>")
chamada antiga: assertEquals(0, findClosestEdge(idx, 0.64628404, 0.53006625))
nova chamada: assertEquals(0, findClosestEdge(idx, 0.64628404, 0.53006625), "Era esperado valores iguais, mas  0 é diferente de " + result3919 + " <findClosestEdge(idx, 0.64628404, 0.53006625)>")
chamada antiga: assertEquals(0, findClosestEdge(idx, 1, -1))
nova chamada: assertEquals(0, findClosestEdge(idx, 1, -1), "Era esperado valores iguais, mas  0 é diferente de " + result3920 + " <findClosestEdge(idx, 1, -1)>")
chamada antiga: assertEquals(2, idx.findClosest(1, -1, AccessFilter.allEdges(footAccessEnc)).getClosestNode())
nova chamada: assertEquals(2, idx.findClosest(1, -1, AccessFilter.allEdges(footAccessEnc)).getClosestNode(), "Era esperado valores iguais, mas  2 é diferente de " + result3921 + " <idx.findClosest(1, -1, AccessFilter.allEdges(footAccessEnc)).getClosestNode()>")
chamada antiga: assertTrue(distFromTower < 0.1)
nova chamada: assertTrue(distFromTower < 0.1, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(Snap.Position.TOWER, snap.getSnappedPosition())
nova chamada: assertEquals(Snap.Position.TOWER, snap.getSnappedPosition(), "Era esperado valores iguais, mas  Snap.Position.TOWER é diferente de " + result3922 + " <snap.getSnappedPosition()>")
chamada antiga: assertEquals(2, store.getPosition())
nova chamada: assertEquals(2, store.getPosition(), "Era esperado valores iguais, mas  2 é diferente de " + result3923 + " <store.getPosition()>")
chamada antiga: assertEquals(7, store.getPosition())
nova chamada: assertEquals(7, store.getPosition(), "Era esperado valores iguais, mas  7 é diferente de " + result3924 + " <store.getPosition()>")
chamada antiga: assertEquals(1L, store.readVLong())
nova chamada: assertEquals(1L, store.readVLong(), "Era esperado valores iguais, mas  1L é diferente de " + result3925 + " <store.readVLong()>")
chamada antiga: assertEquals(7L, store.readVLong())
nova chamada: assertEquals(7L, store.readVLong(), "Era esperado valores iguais, mas  7L é diferente de " + result3926 + " <store.readVLong()>")
chamada antiga: assertEquals(777666555L, store.readVLong())
nova chamada: assertEquals(777666555L, store.readVLong(), "Era esperado valores iguais, mas  777666555L é diferente de " + result3927 + " <store.readVLong()>")
chamada antiga: assertEquals(1, store.getPosition())
nova chamada: assertEquals(1, store.getPosition(), "Era esperado valores iguais, mas  1 é diferente de " + result3928 + " <store.getPosition()>")
chamada antiga: assertEquals(2, store.getPosition())
nova chamada: assertEquals(2, store.getPosition(), "Era esperado valores iguais, mas  2 é diferente de " + result3929 + " <store.getPosition()>")
chamada antiga: assertEquals(7, store.getPosition())
nova chamada: assertEquals(7, store.getPosition(), "Era esperado valores iguais, mas  7 é diferente de " + result3930 + " <store.getPosition()>")
chamada antiga: assertEquals(1L, store.readVLong())
nova chamada: assertEquals(1L, store.readVLong(), "Era esperado valores iguais, mas  1L é diferente de " + result3931 + " <store.readVLong()>")
chamada antiga: assertEquals(7L, store.readVLong())
nova chamada: assertEquals(7L, store.readVLong(), "Era esperado valores iguais, mas  7L é diferente de " + result3932 + " <store.readVLong()>")
chamada antiga: assertEquals(777666555L, store.readVLong())
nova chamada: assertEquals(777666555L, store.readVLong(), "Era esperado valores iguais, mas  777666555L é diferente de " + result3933 + " <store.readVLong()>")
chamada antiga: assertEquals(expectedTurnRelations, allTurnRelations)
nova chamada: assertEquals(expectedTurnRelations, allTurnRelations, "Era esperado valores iguais, mas  expectedTurnRelations é diferente de " + " allTurnRelations")
chamada antiga: assertEquals(expectedTurnRelations, allTurnRelations)
nova chamada: assertEquals(expectedTurnRelations, allTurnRelations, "Era esperado valores iguais, mas  expectedTurnRelations é diferente de " + " allTurnRelations")
chamada antiga: assertFalse(iterator.next())
nova chamada: assertFalse(iterator.next(), "Era esperado falso, mas " + result3934 + " <iterator.next()> é verdadeiro ")
Total asserts: 6225
Asserts sem descrição: 4304
Asserts com descrição: 1920
Assertion Roulette: 4124

Após do refactor: 
Total asserts: 6228
Asserts sem descrição: 737
Asserts com descrição: 5490
Assertion Roulette: 711
