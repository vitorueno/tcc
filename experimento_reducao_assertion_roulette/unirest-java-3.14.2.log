
Projeto: /home/vitor-otto/opensource/unirest-java-3.14.2

Antes do refactor: 
chamada antiga: assertEquals("Hey Ma", body)
nova chamada: assertEquals("Hey Ma", body, "Era esperado valores iguais, mas  'Hey Ma' é diferente de " + " body")
chamada antiga: assertNull(Unirest.post(path).asString().getBody())
nova chamada: assertNull(Unirest.post(path).asString().getBody(), "Era esperado nulo, mas " + result0 + " <Unirest.post(path).asString().getBody()> não é nulo")
chamada antiga: assertEquals("bar", Unirest.post(path).body("foo").asString().getBody())
nova chamada: assertEquals("bar", Unirest.post(path).body("foo").asString().getBody(), "Era esperado valores iguais, mas  'bar' é diferente de " + result1 + " <Unirest.post(path).body('foo').asString().getBody()>")
chamada antiga: assertThrows(UnirestAssertion.class, () -> client.assertThat(POST, path).hadBody("I'm a big ol beat"))
nova chamada: assertThrows(UnirestAssertion.class, () -> client.assertThat(POST, path).hadBody("I'm a big ol beat"), "Era esperado que a exceção  UnirestAssertion.class fosse lançada, mas não foi")
chamada antiga: assertThrows(UnirestAssertion.class, () -> client.assertThat(POST, path).hadField("nope", "buddy"))
nova chamada: assertThrows(UnirestAssertion.class, () -> client.assertThat(POST, path).hadField("nope", "buddy"), "Era esperado que a exceção  UnirestAssertion.class fosse lançada, mas não foi")
chamada antiga: assertThrows(UnirestAssertion.class, () -> client.assertThat(POST, path).hadField("hey", "nope"))
nova chamada: assertThrows(UnirestAssertion.class, () -> client.assertThat(POST, path).hadField("hey", "nope"), "Era esperado que a exceção  UnirestAssertion.class fosse lançada, mas não foi")
chamada antiga: assertEquals(null, Unirest.get(path).asString().getBody())
nova chamada: assertEquals(null, Unirest.get(path).asString().getBody(), "Era esperado valores iguais, mas  null é diferente de " + result2 + " <Unirest.get(path).asString().getBody()>")
chamada antiga: assertEquals(400, res.getStatus())
nova chamada: assertEquals(400, res.getStatus(), "Era esperado valores iguais, mas  400 é diferente de " + result3 + " <res.getStatus()>")
chamada antiga: assertEquals("wtf", res.getStatusText())
nova chamada: assertEquals("wtf", res.getStatusText(), "Era esperado valores iguais, mas  'wtf' é diferente de " + result4 + " <res.getStatusText()>")
chamada antiga: assertEquals("boo", res.getBody())
nova chamada: assertEquals("boo", res.getBody(), "Era esperado valores iguais, mas  'boo' é diferente de " + result5 + " <res.getBody()>")
chamada antiga: assertEquals("Hi", Unirest.get(otherPath).asString().getBody())
nova chamada: assertEquals("Hi", Unirest.get(otherPath).asString().getBody(), "Era esperado valores iguais, mas  'Hi' é diferente de " + result6 + " <Unirest.get(otherPath).asString().getBody()>")
chamada antiga: assertEquals("Hey Buddy", Unirest.get(path).asString().getBody())
nova chamada: assertEquals("Hey Buddy", Unirest.get(path).asString().getBody(), "Era esperado valores iguais, mas  'Hey Buddy' é diferente de " + result7 + " <Unirest.get(path).asString().getBody()>")
chamada antiga: assertEquals("Yeaaaah Buddy", Unirest.get(path).asString().getBody())
nova chamada: assertEquals("Yeaaaah Buddy", Unirest.get(path).asString().getBody(), "Era esperado valores iguais, mas  'Yeaaaah Buddy' é diferente de " + result8 + " <Unirest.get(path).asString().getBody()>")
chamada antiga: assertEquals("Call Result", response.getBody())
nova chamada: assertEquals("Call Result", response.getBody(), "Era esperado valores iguais, mas  'Call Result' é diferente de " + result9 + " <response.getBody()>")
chamada antiga: assertSame(response, interceptor.response)
nova chamada: assertSame(response, interceptor.response, "Era esperado objetos iguais, mas  response é diferente de " + " interceptor.response")
chamada antiga: assertEquals("two", result)
nova chamada: assertEquals("two", result, "Era esperado valores iguais, mas  'two' é diferente de " + " result")
chamada antiga: assertEquals("Boo!", err.say)
nova chamada: assertEquals("Boo!", err.say, "Era esperado valores iguais, mas  'Boo!' é diferente de " + " err.say")
chamada antiga: assertEquals("cool", result)
nova chamada: assertEquals("cool", result, "Era esperado valores iguais, mas  'cool' é diferente de " + " result")
chamada antiga: assertTrue(wasCalled)
nova chamada: assertTrue(wasCalled, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("http://localhost/get/cheese/passed?fruit=apples", sum.getUrl())
nova chamada: assertEquals("http://localhost/get/cheese/passed?fruit=apples", sum.getUrl(), "Era esperado valores iguais, mas  'http://localhost/get/cheese/passed?fruit=apples' é diferente de " + result10 + " <sum.getUrl()>")
chamada antiga: assertEquals("http://localhost/get/{params}/passed", sum.getRawPath())
nova chamada: assertEquals("http://localhost/get/{params}/passed", sum.getRawPath(), "Era esperado valores iguais, mas  'http://localhost/get/{params}/passed' é diferente de " + result11 + " <sum.getRawPath()>")
chamada antiga: assertEquals(HttpMethod.GET, sum.getHttpMethod())
nova chamada: assertEquals(HttpMethod.GET, sum.getHttpMethod(), "Era esperado valores iguais, mas  HttpMethod.GET é diferente de " + result12 + " <sum.getHttpMethod()>")
chamada antiga: assertEquals(BAD_REQUEST, response.getStatus())
nova chamada: assertEquals(BAD_REQUEST, response.getStatus(), "Era esperado valores iguais, mas  BAD_REQUEST é diferente de " + result13 + " <response.getStatus()>")
chamada antiga: assertEquals("oh noes", response.getStatusText())
nova chamada: assertEquals("oh noes", response.getStatusText(), "Era esperado valores iguais, mas  'oh noes' é diferente de " + result14 + " <response.getStatusText()>")
chamada antiga: assertEquals(BAD_REQUEST, response.getStatus())
nova chamada: assertEquals(BAD_REQUEST, response.getStatus(), "Era esperado valores iguais, mas  BAD_REQUEST é diferente de " + result15 + " <response.getStatus()>")
chamada antiga: assertEquals("", response.getStatusText())
nova chamada: assertEquals("", response.getStatusText(), "Era esperado valores iguais, mas  '' é diferente de " + result16 + " <response.getStatusText()>")
chamada antiga: assertEquals("Hello World", Unirest.get(path).asString().getBody())
nova chamada: assertEquals("Hello World", Unirest.get(path).asString().getBody(), "Era esperado valores iguais, mas  'Hello World' é diferente de " + result17 + " <Unirest.get(path).asString().getBody()>")
chamada antiga: assertEquals("Hello World", new String(body))
nova chamada: assertEquals("Hello World", new String(body), "Era esperado valores iguais, mas  'Hello World' é diferente de " + " new String(body)")
chamada antiga: assertEquals("apple", Unirest.get(path).asJson().getBody().getObject().getString("fruit"))
nova chamada: assertEquals("apple", Unirest.get(path).asJson().getBody().getObject().getString("fruit"), "Era esperado valores iguais, mas  'apple' é diferente de " + result18 + " <Unirest.get(path).asJson().getBody().getObject().getString('fruit')>")
chamada antiga: assertEquals("apple", Unirest.get(path).asJson().getBody().getObject().getString("fruit"))
nova chamada: assertEquals("apple", Unirest.get(path).asJson().getBody().getObject().getString("fruit"), "Era esperado valores iguais, mas  'apple' é diferente de " + result19 + " <Unirest.get(path).asJson().getBody().getObject().getString('fruit')>")
chamada antiga: assertEquals("apple", pojo.fruit)
nova chamada: assertEquals("apple", pojo.fruit, "Era esperado valores iguais, mas  'apple' é diferente de " + " pojo.fruit")
chamada antiga: assertEquals("derp", pojo)
nova chamada: assertEquals("derp", pojo, "Era esperado valores iguais, mas  'derp' é diferente de " + " pojo")
chamada antiga: assertEquals("derp", pojo)
nova chamada: assertEquals("derp", pojo, "Era esperado valores iguais, mas  'derp' é diferente de " + " pojo")
chamada antiga: assertEquals("foo", rez.getBody())
nova chamada: assertEquals("foo", rez.getBody(), "Era esperado valores iguais, mas  'foo' é diferente de " + result20 + " <rez.getBody()>")
chamada antiga: assertEquals("grover", rez.getHeaders().getFirst("monster"))
nova chamada: assertEquals("grover", rez.getHeaders().getFirst("monster"), "Era esperado valores iguais, mas  'grover' é diferente de " + result21 + " <rez.getHeaders().getFirst('monster')>")
chamada antiga: assertEquals(null, rez.getBody())
nova chamada: assertEquals(null, rez.getBody(), "Era esperado valores iguais, mas  null é diferente de " + result22 + " <rez.getBody()>")
chamada antiga: assertEquals("grover", rez.getHeaders().getFirst("monster"))
nova chamada: assertEquals("grover", rez.getHeaders().getFirst("monster"), "Era esperado valores iguais, mas  'grover' é diferente de " + result23 + " <rez.getHeaders().getFirst('monster')>")
chamada antiga: assertEquals(400, httpResponse.getStatus())
nova chamada: assertEquals(400, httpResponse.getStatus(), "Era esperado valores iguais, mas  400 é diferente de " + result24 + " <httpResponse.getStatus()>")
chamada antiga: assertEquals("Bad Request", httpResponse.getBody())
nova chamada: assertEquals("Bad Request", httpResponse.getBody(), "Era esperado valores iguais, mas  'Bad Request' é diferente de " + result25 + " <httpResponse.getBody()>")
chamada antiga: assertEquals(400, httpResponse.getStatus())
nova chamada: assertEquals(400, httpResponse.getStatus(), "Era esperado valores iguais, mas  400 é diferente de " + result26 + " <httpResponse.getStatus()>")
chamada antiga: assertEquals("howdy", httpResponse.getBody().getObject().getString("message"))
nova chamada: assertEquals("howdy", httpResponse.getBody().getObject().getString("message"), "Era esperado valores iguais, mas  'howdy' é diferente de " + result27 + " <httpResponse.getBody().getObject().getString('message')>")
chamada antiga: assertEquals(400, httpResponse.getStatus())
nova chamada: assertEquals(400, httpResponse.getStatus(), "Era esperado valores iguais, mas  400 é diferente de " + result28 + " <httpResponse.getStatus()>")
chamada antiga: assertEquals("Pears", httpResponse.getBody().fruit)
nova chamada: assertEquals("Pears", httpResponse.getBody().fruit, "Era esperado valores iguais, mas  'Pears' é diferente de " + " httpResponse.getBody().fruit")
chamada antiga: assertSame(client, Unirest.primaryInstance().config().getClient())
nova chamada: assertSame(client, Unirest.primaryInstance().config().getClient(), "Era esperado objetos iguais, mas  client é diferente de " + result29 + " <Unirest.primaryInstance().config().getClient()>")
chamada antiga: assertSame(client, Unirest.primaryInstance().config().getAsyncClient())
nova chamada: assertSame(client, Unirest.primaryInstance().config().getAsyncClient(), "Era esperado objetos iguais, mas  client é diferente de " + result30 + " <Unirest.primaryInstance().config().getAsyncClient()>")
chamada antiga: assertFalse(Unirest.primaryInstance().config().getClient() instanceof MockClient)
nova chamada: assertFalse(Unirest.primaryInstance().config().getClient() instanceof MockClient, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: assertFalse(Unirest.primaryInstance().config().getAsyncClient() instanceof MockClient)
nova chamada: assertFalse(Unirest.primaryInstance().config().getAsyncClient() instanceof MockClient, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: assertSame(client, i.config().getClient())
nova chamada: assertSame(client, i.config().getClient(), "Era esperado objetos iguais, mas  client é diferente de " + result31 + " <i.config().getClient()>")
chamada antiga: assertSame(client, i.config().getAsyncClient())
nova chamada: assertSame(client, i.config().getAsyncClient(), "Era esperado objetos iguais, mas  client é diferente de " + result32 + " <i.config().getAsyncClient()>")
chamada antiga: assertFalse(i.config().getClient() instanceof MockClient)
nova chamada: assertFalse(i.config().getClient() instanceof MockClient, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: assertFalse(i.config().getAsyncClient() instanceof MockClient)
nova chamada: assertFalse(i.config().getAsyncClient() instanceof MockClient, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: assertEquals(200, response.getStatus())
nova chamada: assertEquals(200, response.getStatus(), "Era esperado valores iguais, mas  200 é diferente de " + result33 + " <response.getStatus()>")
chamada antiga: assertEquals("Hi Mom", response.getBody())
nova chamada: assertEquals("Hi Mom", response.getBody(), "Era esperado valores iguais, mas  'Hi Mom' é diferente de " + result34 + " <response.getBody()>")
chamada antiga: assertEquals("application/xml", response.getHeaders().getFirst("Accept"))
nova chamada: assertEquals("application/xml", response.getHeaders().getFirst("Accept"), "Era esperado valores iguais, mas  'application/xml' é diferente de " + result35 + " <response.getHeaders().getFirst('Accept')>")
chamada antiga: assertEquals(400, response.getStatus())
nova chamada: assertEquals(400, response.getStatus(), "Era esperado valores iguais, mas  400 é diferente de " + result36 + " <response.getStatus()>")
chamada antiga: assertEquals("Hi Mom", response.getParsingError().get().getOriginalBody())
nova chamada: assertEquals("Hi Mom", response.getParsingError().get().getOriginalBody(), "Era esperado valores iguais, mas  'Hi Mom' é diferente de " + result37 + " <response.getParsingError().get().getOriginalBody()>")
chamada antiga: assertEquals("Transformed!", response.mapError(TransformedError.class).message)
nova chamada: assertEquals("Transformed!", response.mapError(TransformedError.class).message, "Era esperado valores iguais, mas  'Transformed!' é diferente de " + " response.mapError(TransformedError.class).message")
chamada antiga: assertEquals("foo", test.text)
nova chamada: assertEquals("foo", test.text, "Era esperado valores iguais, mas  'foo' é diferente de " + " test.text")
chamada antiga: assertEquals(42, test.nmbr.intValue())
nova chamada: assertEquals(42, test.nmbr.intValue(), "Era esperado valores iguais, mas  42 é diferente de " + result38 + " <test.nmbr.intValue()>")
chamada antiga: assertEquals("bar", test.another.text)
nova chamada: assertEquals("bar", test.another.text, "Era esperado valores iguais, mas  'bar' é diferente de " + " test.another.text")
chamada antiga: assertEquals(666, test.another.nmbr.intValue())
nova chamada: assertEquals(666, test.another.nmbr.intValue(), "Era esperado valores iguais, mas  666 é diferente de " + result39 + " <test.another.nmbr.intValue()>")
chamada antiga: assertEquals(null, test.another.another)
nova chamada: assertEquals(null, test.another.another, "Era esperado valores iguais, mas  null é diferente de " + " test.another.another")
chamada antiga: assertEquals("foo", test.text)
nova chamada: assertEquals("foo", test.text, "Era esperado valores iguais, mas  'foo' é diferente de " + " test.text")
chamada antiga: assertEquals(42, test.nmbr.intValue())
nova chamada: assertEquals(42, test.nmbr.intValue(), "Era esperado valores iguais, mas  42 é diferente de " + result40 + " <test.nmbr.intValue()>")
chamada antiga: assertEquals("bar", test.another.text)
nova chamada: assertEquals("bar", test.another.text, "Era esperado valores iguais, mas  'bar' é diferente de " + " test.another.text")
chamada antiga: assertEquals(666, test.another.nmbr.intValue())
nova chamada: assertEquals(666, test.another.nmbr.intValue(), "Era esperado valores iguais, mas  666 é diferente de " + result41 + " <test.another.nmbr.intValue()>")
chamada antiga: assertEquals(null, test.another.another)
nova chamada: assertEquals(null, test.another.another, "Era esperado valores iguais, mas  null é diferente de " + " test.another.another")
chamada antiga: assertEquals("{\"text\":null,\"nmbr\":null,\"another\":null}", om.writeValue(testMe))
nova chamada: assertEquals("{\"text\":null,\"nmbr\":null,\"another\":null}", om.writeValue(testMe), "Era esperado valores iguais, mas  '{\'text\':null,\'nmbr\':null,\'another\':null}' é diferente de " + result42 + " <om.writeValue(testMe)>")
chamada antiga: assertEquals(200, response)
nova chamada: assertEquals(200, response, "Era esperado valores iguais, mas  200 é diferente de " + " response")
chamada antiga: assertEquals(200, response)
nova chamada: assertEquals(200, response, "Era esperado valores iguais, mas  200 é diferente de " + " response")
chamada antiga: assertEquals(200, response)
nova chamada: assertEquals(200, response, "Era esperado valores iguais, mas  200 é diferente de " + " response")
chamada antiga: assertEquals(200, response)
nova chamada: assertEquals(200, response, "Era esperado valores iguais, mas  200 é diferente de " + " response")
chamada antiga: assertThrows(UnirestException.class, request::asEmpty)
nova chamada: assertThrows(UnirestException.class, request::asEmpty, "Era esperado que a exceção  UnirestException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(UnirestException.class, request::asEmpty)
nova chamada: assertThrows(UnirestException.class, request::asEmpty, "Era esperado que a exceção  UnirestException.class fosse lançada, mas não foi")
chamada antiga: assertEquals(200, response)
nova chamada: assertEquals(200, response, "Era esperado valores iguais, mas  200 é diferente de " + " response")
chamada antiga: Assertions.assertEquals(200, Unirest.get(url).asEmpty().getStatus())
nova chamada: assertEquals(200, Unirest.get(url).asEmpty().getStatus(), "Era esperado valores iguais, mas  200 é diferente de " + result43 + " <Unirest.get(url).asEmpty().getStatus()>")
chamada antiga: assertEquals(s, message)
nova chamada: assertEquals(s, message, "Era esperado valores iguais, mas  s é diferente de " + " message")
chamada antiga: assertEquals("{\"message\":\"boom!\"}", e)
nova chamada: assertEquals("{\"message\":\"boom!\"}", e, "Era esperado valores iguais, mas  '{\'message\':\'boom!\'}' é diferente de " + " e")
chamada antiga: assertNull(error)
nova chamada: assertNull(error, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(error.merp)
nova chamada: assertNull(error.merp, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: Assertions.assertEquals("{\"message\":\"boom!\"}", request.getParsingError().get().getOriginalBody())
nova chamada: assertEquals("{\"message\":\"boom!\"}", request.getParsingError().get().getOriginalBody(), "Era esperado valores iguais, mas  '{\'message\':\'boom!\'}' é diferente de " + result44 + " <request.getParsingError().get().getOriginalBody()>")
chamada antiga: assertTrue(errorCalled)
nova chamada: assertTrue(errorCalled, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("boom!", e.getMessage())
nova chamada: assertEquals("boom!", e.getMessage(), "Era esperado valores iguais, mas  'boom!' é diferente de " + result45 + " <e.getMessage()>")
chamada antiga: assertEquals("java.io.IOException: " + "Something horrible happened", ex.getMessage())
nova chamada: assertEquals("java.io.IOException: " + "Something horrible happened", ex.getMessage(), "Era esperado valores iguais, mas  'java.io.IOException: ' + 'Something horrible happened' é diferente de " + result46 + " <ex.getMessage()>")
chamada antiga: assertEquals(200, response.getStatusLine().getStatusCode())
nova chamada: assertEquals(200, response.getStatusLine().getStatusCode(), "Era esperado valores iguais, mas  200 é diferente de " + result47 + " <response.getStatusLine().getStatusCode()>")
chamada antiga: assertTrue(Unirest.isRunning())
nova chamada: assertTrue(Unirest.isRunning(), "Era esperado verdadeiro, mas " + result48 + " <Unirest.isRunning()> é falso")
chamada antiga: assertFalse(Unirest.isRunning())
nova chamada: assertFalse(Unirest.isRunning(), "Era esperado falso, mas " + result49 + " <Unirest.isRunning()> é verdadeiro ")
chamada antiga: assertTrue(Unirest.isRunning())
nova chamada: assertTrue(Unirest.isRunning(), "Era esperado verdadeiro, mas " + result50 + " <Unirest.isRunning()> é falso")
chamada antiga: assertFalse(Unirest.isRunning())
nova chamada: assertFalse(Unirest.isRunning(), "Era esperado falso, mas " + result51 + " <Unirest.isRunning()> é verdadeiro ")
chamada antiga: assertTrue(Unirest.isRunning())
nova chamada: assertTrue(Unirest.isRunning(), "Era esperado verdadeiro, mas " + result52 + " <Unirest.isRunning()> é falso")
chamada antiga: assertSame(Unirest.primaryInstance(), Unirest.primaryInstance())
nova chamada: assertSame(Unirest.primaryInstance(), Unirest.primaryInstance(), "Era esperado objetos iguais, mas " + result53 + " <Unirest.primaryInstance()> é diferente de " + result54 + " <Unirest.primaryInstance()>")
chamada antiga: assertNotSame(Unirest.primaryInstance(), Unirest.spawnInstance())
nova chamada: assertNotSame(Unirest.primaryInstance(), Unirest.spawnInstance(), "Era esperado objetos diferentes, mas " + result55 + " <Unirest.primaryInstance()> é igual a " + result56 + " <Unirest.spawnInstance()>")
chamada antiga: assertNotSame(Unirest.spawnInstance(), Unirest.spawnInstance())
nova chamada: assertNotSame(Unirest.spawnInstance(), Unirest.spawnInstance(), "Era esperado objetos diferentes, mas " + result57 + " <Unirest.spawnInstance()> é igual a " + result58 + " <Unirest.spawnInstance()>")
chamada antiga: assertTrue(ManagementFactory.getThreadMXBean().getThreadCount() <= startingCount + 10)
nova chamada: assertTrue(ManagementFactory.getThreadMXBean().getThreadCount() <= startingCount + 10, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(0, reference.config().getDefaultHeaders().size())
nova chamada: assertEquals(0, reference.config().getDefaultHeaders().size(), "Era esperado valores iguais, mas  0 é diferente de " + result59 + " <reference.config().getDefaultHeaders().size()>")
chamada antiga: assertNotSame(first, second)
nova chamada: assertNotSame(first, second, "Era esperado objetos diferentes, mas  first é igual a " + " second")
chamada antiga: assertNotEquals(c, Unirest.config().getAsyncClient())
nova chamada: assertNotEquals(c, Unirest.config().getAsyncClient(), "Era esperado valores diferentes, mas  c é igual a " + result60 + " <Unirest.config().getAsyncClient()>")
chamada antiga: assertEquals(i, Unirest.config().getInterceptor().get(0))
nova chamada: assertEquals(i, Unirest.config().getInterceptor().get(0), "Era esperado valores iguais, mas  i é diferente de " + result61 + " <Unirest.config().getInterceptor().get(0)>")
chamada antiga: assertEquals(4000, Unirest.config().getConnectionTimeout())
nova chamada: assertEquals(4000, Unirest.config().getConnectionTimeout(), "Era esperado valores iguais, mas  4000 é diferente de " + result62 + " <Unirest.config().getConnectionTimeout()>")
chamada antiga: assertEquals(200, result.getStatus())
nova chamada: assertEquals(200, result.getStatus(), "Era esperado valores iguais, mas  200 é diferente de " + result63 + " <result.getStatus()>")
chamada antiga: assertEquals("Howdy Ho!", result.getBody())
nova chamada: assertEquals("Howdy Ho!", result.getBody(), "Era esperado valores iguais, mas  'Howdy Ho!' é diferente de " + result64 + " <result.getBody()>")
chamada antiga: assertTrue(requestConfigUsed)
nova chamada: assertTrue(requestConfigUsed, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(interceptorCalled)
nova chamada: assertTrue(interceptorCalled, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertEquals(1, request.getHeaders().size())
nova chamada: assertEquals(1, request.getHeaders().size(), "Era esperado valores iguais, mas  1 é diferente de " + result65 + " <request.getHeaders().size()>")
chamada antiga: Assertions.assertEquals("Marco", request.getHeaders().get("name").get(0))
nova chamada: assertEquals("Marco", request.getHeaders().get("name").get(0), "Era esperado valores iguais, mas  'Marco' é diferente de " + result66 + " <request.getHeaders().get('name').get(0)>")
chamada antiga: Assertions.assertEquals("Marco", request.getHeaders().get("NAme").get(0))
nova chamada: assertEquals("Marco", request.getHeaders().get("NAme").get(0), "Era esperado valores iguais, mas  'Marco' é diferente de " + result67 + " <request.getHeaders().get('NAme').get(0)>")
chamada antiga: Assertions.assertEquals("Marco", request.getHeaders().get("Name").get(0))
nova chamada: assertEquals("Marco", request.getHeaders().get("Name").get(0), "Era esperado valores iguais, mas  'Marco' é diferente de " + result68 + " <request.getHeaders().get('Name').get(0)>")
chamada antiga: Assertions.assertEquals(1, request.getHeaders().size())
nova chamada: assertEquals(1, request.getHeaders().size(), "Era esperado valores iguais, mas  1 é diferente de " + result69 + " <request.getHeaders().size()>")
chamada antiga: Assertions.assertEquals("Marco", request.getHeaders().get("name").get(0))
nova chamada: assertEquals("Marco", request.getHeaders().get("name").get(0), "Era esperado valores iguais, mas  'Marco' é diferente de " + result70 + " <request.getHeaders().get('name').get(0)>")
chamada antiga: Assertions.assertEquals("John", request.getHeaders().get("name").get(1))
nova chamada: assertEquals("John", request.getHeaders().get("name").get(1), "Era esperado valores iguais, mas  'John' é diferente de " + result71 + " <request.getHeaders().get('name').get(1)>")
chamada antiga: Assertions.assertEquals("Marco", request.getHeaders().get("NAme").get(0))
nova chamada: assertEquals("Marco", request.getHeaders().get("NAme").get(0), "Era esperado valores iguais, mas  'Marco' é diferente de " + result72 + " <request.getHeaders().get('NAme').get(0)>")
chamada antiga: Assertions.assertEquals("John", request.getHeaders().get("NAme").get(1))
nova chamada: assertEquals("John", request.getHeaders().get("NAme").get(1), "Era esperado valores iguais, mas  'John' é diferente de " + result73 + " <request.getHeaders().get('NAme').get(1)>")
chamada antiga: Assertions.assertEquals("Marco", request.getHeaders().get("Name").get(0))
nova chamada: assertEquals("Marco", request.getHeaders().get("Name").get(0), "Era esperado valores iguais, mas  'Marco' é diferente de " + result74 + " <request.getHeaders().get('Name').get(0)>")
chamada antiga: Assertions.assertEquals("John", request.getHeaders().get("Name").get(1))
nova chamada: assertEquals("John", request.getHeaders().get("Name").get(1), "Era esperado valores iguais, mas  'John' é diferente de " + result75 + " <request.getHeaders().get('Name').get(1)>")
chamada antiga: assertEquals("user2" + ":" + "pass2", new String(Base64.getDecoder().decode(credentials)))
nova chamada: assertEquals("user2" + ":" + "pass2", new String(Base64.getDecoder().decode(credentials)), "Era esperado valores iguais, mas  'user2' + ':' + 'pass2' é diferente de " + " new String(Base64.getDecoder().decode(credentials))")
chamada antiga: Assertions.assertEquals(301, response.getStatus())
nova chamada: assertEquals(301, response.getStatus(), "Era esperado valores iguais, mas  301 é diferente de " + result76 + " <response.getStatus()>")
chamada antiga: Assertions.assertEquals(301, response.getStatus())
nova chamada: assertEquals(301, response.getStatus(), "Era esperado valores iguais, mas  301 é diferente de " + result77 + " <response.getStatus()>")
chamada antiga: Assertions.assertEquals("ABC123", response.getCookies().getNamed("JSESSIONID").getValue())
nova chamada: assertEquals("ABC123", response.getCookies().getNamed("JSESSIONID").getValue(), "Era esperado valores iguais, mas  'ABC123' é diferente de " + result78 + " <response.getCookies().getNamed('JSESSIONID').getValue()>")
chamada antiga: Assertions.assertEquals("ruby", response.getCookies().getNamed("color").getValue())
nova chamada: assertEquals("ruby", response.getCookies().getNamed("color").getValue(), "Era esperado valores iguais, mas  'ruby' é diferente de " + result79 + " <response.getCookies().getNamed('color').getValue()>")
chamada antiga: Assertions.assertEquals("फनकी", response.getCookies().getNamed("nepali").getUrlDecodedValue())
nova chamada: assertEquals("फनकी", response.getCookies().getNamed("nepali").getUrlDecodedValue(), "Era esperado valores iguais, mas  'फनकी' é diferente de " + result80 + " <response.getCookies().getNamed('nepali').getUrlDecodedValue()>")
chamada antiga: Assertions.assertEquals("1=2;3=4", response.getCookies().getNamed("odd").getUrlDecodedValue())
nova chamada: assertEquals("1=2;3=4", response.getCookies().getNamed("odd").getUrlDecodedValue(), "Era esperado valores iguais, mas  '1=2;3=4' é diferente de " + result81 + " <response.getCookies().getNamed('odd').getUrlDecodedValue()>")
chamada antiga: Assertions.assertEquals("blue", back.getValue())
nova chamada: assertEquals("blue", back.getValue(), "Era esperado valores iguais, mas  'blue' é diferente de " + result82 + " <back.getValue()>")
chamada antiga: Assertions.assertEquals("localhost", back.getDomain())
nova chamada: assertEquals("localhost", back.getDomain(), "Era esperado valores iguais, mas  'localhost' é diferente de " + result83 + " <back.getDomain()>")
chamada antiga: Assertions.assertEquals("/get", back.getPath())
nova chamada: assertEquals("/get", back.getPath(), "Era esperado valores iguais, mas  '/get' é diferente de " + result84 + " <back.getPath()>")
chamada antiga: Assertions.assertTrue(back.isHttpOnly())
nova chamada: assertTrue(back.isHttpOnly(), "Era esperado verdadeiro, mas " + result85 + " <back.isHttpOnly()> é falso")
chamada antiga: Assertions.assertFalse(back.isSecure())
nova chamada: assertFalse(back.isSecure(), "Era esperado falso, mas " + result86 + " <back.isSecure()> é verdadeiro ")
chamada antiga: Assertions.assertEquals(42, back.getMaxAge())
nova chamada: assertEquals(42, back.getMaxAge(), "Era esperado valores iguais, mas  42 é diferente de " + result87 + " <back.getMaxAge()>")
chamada antiga: assertNotNull(r1.getCookies().getNamed("color"))
nova chamada: assertNotNull(r1.getCookies().getNamed("color"), "Era esperado não nulo, mas " + result88 + " <r1.getCookies().getNamed('color')> é nulo")
chamada antiga: assertNotNull(r1.getCookies().getNamed("color"))
nova chamada: assertNotNull(r1.getCookies().getNamed("color"), "Era esperado não nulo, mas " + result89 + " <r1.getCookies().getNamed('color')> é nulo")
chamada antiga: Assertions.assertEquals("bar", cookie.getValue())
nova chamada: assertEquals("bar", cookie.getValue(), "Era esperado valores iguais, mas  'bar' é diferente de " + result90 + " <cookie.getValue()>")
chamada antiga: assertNotNull(r1.getCookies().getNamed("color"))
nova chamada: assertNotNull(r1.getCookies().getNamed("color"), "Era esperado não nulo, mas " + result91 + " <r1.getCookies().getNamed('color')> é nulo")
chamada antiga: assertNotNull(r1.getCookies().getNamed("color"))
nova chamada: assertNotNull(r1.getCookies().getNamed("color"), "Era esperado não nulo, mas " + result92 + " <r1.getCookies().getNamed('color')> é nulo")
chamada antiga: Assertions.assertEquals("bar", r1.getCookies().getNamed("foo").getValue())
nova chamada: assertEquals("bar", r1.getCookies().getNamed("foo").getValue(), "Era esperado valores iguais, mas  'bar' é diferente de " + result93 + " <r1.getCookies().getNamed('foo').getValue()>")
chamada antiga: assertNotNull(response.getCookies().getNamed("cookie_name"))
nova chamada: assertNotNull(response.getCookies().getNamed("cookie_name"), "Era esperado não nulo, mas " + result94 + " <response.getCookies().getNamed('cookie_name')> é nulo")
chamada antiga: assertTrue(stat.timesCalled > 1)
nova chamada: assertTrue(stat.timesCalled > 1, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(stat.timesCalled > 1)
nova chamada: assertTrue(stat.timesCalled > 1, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertEquals("text/plain;charset=utf-8", h.getFirst("Content-Type"))
nova chamada: assertEquals("text/plain;charset=utf-8", h.getFirst("Content-Type"), "Era esperado valores iguais, mas  'text/plain;charset=utf-8' é diferente de " + result95 + " <h.getFirst('Content-Type')>")
chamada antiga: Assertions.assertEquals("JSESSIONID=ABC123; Path=/", h.getFirst("Set-Cookie"))
nova chamada: assertEquals("JSESSIONID=ABC123; Path=/", h.getFirst("Set-Cookie"), "Era esperado valores iguais, mas  'JSESSIONID=ABC123; Path=/' é diferente de " + result96 + " <h.getFirst('Set-Cookie')>")
chamada antiga: Assertions.assertEquals("Thu, 01 Jan 1970 00:00:00 GMT", h.getFirst("Expires"))
nova chamada: assertEquals("Thu, 01 Jan 1970 00:00:00 GMT", h.getFirst("Expires"), "Era esperado valores iguais, mas  'Thu, 01 Jan 1970 00:00:00 GMT' é diferente de " + result97 + " <h.getFirst('Expires')>")
chamada antiga: Assertions.assertEquals(Lists.newArrayList("oranges", "grapes"), h.get("zed"))
nova chamada: assertEquals(Lists.newArrayList("oranges", "grapes"), h.get("zed"), "Era esperado valores iguais, mas " + result98 + " <Lists.newArrayList('oranges', 'grapes')> é diferente de " + result99 + " <h.get('zed')>")
chamada antiga: Assertions.assertEquals("apples", h.getFirst("alpha"))
nova chamada: assertEquals("apples", h.getFirst("alpha"), "Era esperado valores iguais, mas  'apples' é diferente de " + result100 + " <h.getFirst('alpha')>")
chamada antiga: Assertions.assertEquals(200, response.getStatus())
nova chamada: assertEquals(200, response.getStatus(), "Era esperado valores iguais, mas  200 é diferente de " + result101 + " <response.getStatus()>")
chamada antiga: Assertions.assertEquals("text/plain;charset=utf-8", response.getHeaders().getFirst("Content-Type"))
nova chamada: assertEquals("text/plain;charset=utf-8", response.getHeaders().getFirst("Content-Type"), "Era esperado valores iguais, mas  'text/plain;charset=utf-8' é diferente de " + result102 + " <response.getHeaders().getFirst('Content-Type')>")
chamada antiga: Assertions.assertEquals(true, body.getBoolean("gzipped"))
nova chamada: assertEquals(true, body.getBoolean("gzipped"), "Era esperado valores iguais, mas  true é diferente de " + result103 + " <body.getBoolean('gzipped')>")
chamada antiga: Assertions.assertEquals("gzip", body.getJSONObject("headers").getString("Accept-Encoding"))
nova chamada: assertEquals("gzip", body.getJSONObject("headers").getString("Accept-Encoding"), "Era esperado valores iguais, mas  'gzip' é diferente de " + result104 + " <body.getJSONObject('headers').getString('Accept-Encoding')>")
chamada antiga: assertEquals(2, body.getAllFilesByInput("file").size())
nova chamada: assertEquals(2, body.getAllFilesByInput("file").size(), "Era esperado valores iguais, mas  2 é diferente de " + result105 + " <body.getAllFilesByInput('file').size()>")
chamada antiga: assertEquals(expected, body)
nova chamada: assertEquals(expected, body, "Era esperado valores iguais, mas  expected é diferente de " + " body")
chamada antiga: assertEquals("blue", c.getValue())
nova chamada: assertEquals("blue", c.getValue(), "Era esperado valores iguais, mas  'blue' é diferente de " + result106 + " <c.getValue()>")
chamada antiga: assertEquals("localhost", c.getDomain())
nova chamada: assertEquals("localhost", c.getDomain(), "Era esperado valores iguais, mas  'localhost' é diferente de " + result107 + " <c.getDomain()>")
chamada antiga: assertEquals("/get", c.getPath())
nova chamada: assertEquals("/get", c.getPath(), "Era esperado valores iguais, mas  '/get' é diferente de " + result108 + " <c.getPath()>")
chamada antiga: assertEquals(ZonedDateTime.of(2020, 1, 5, 15, 0, 20, 0, ZoneId.of("GMT")), c.getExpiration())
nova chamada: assertEquals(ZonedDateTime.of(2020, 1, 5, 15, 0, 20, 0, ZoneId.of("GMT")), c.getExpiration(), "Era esperado valores iguais, mas " + result109 + " <ZonedDateTime.of(2020, 1, 5, 15, 0, 20, 0, ZoneId.of('GMT'))> é diferente de " + result110 + " <c.getExpiration()>")
chamada antiga: assertTrue(c.isHttpOnly())
nova chamada: assertTrue(c.isHttpOnly(), "Era esperado verdadeiro, mas " + result111 + " <c.isHttpOnly()> é falso")
chamada antiga: assertFalse(c.isSecure())
nova chamada: assertFalse(c.isSecure(), "Era esperado falso, mas " + result112 + " <c.isSecure()> é verdadeiro ")
chamada antiga: assertEquals(42, c.getMaxAge())
nova chamada: assertEquals(42, c.getMaxAge(), "Era esperado valores iguais, mas  42 é diferente de " + result113 + " <c.getMaxAge()>")
chamada antiga: assertNull(c.getSameSite())
nova chamada: assertNull(c.getSameSite(), "Era esperado nulo, mas " + result114 + " <c.getSameSite()> não é nulo")
chamada antiga: assertEquals(ZonedDateTime.of(2020, 1, 5, 15, 0, 20, 0, ZoneId.of("GMT")), c.getExpiration())
nova chamada: assertEquals(ZonedDateTime.of(2020, 1, 5, 15, 0, 20, 0, ZoneId.of("GMT")), c.getExpiration(), "Era esperado valores iguais, mas " + result115 + " <ZonedDateTime.of(2020, 1, 5, 15, 0, 20, 0, ZoneId.of('GMT'))> é diferente de " + result116 + " <c.getExpiration()>")
chamada antiga: assertEquals(v, c.toString())
nova chamada: assertEquals(v, c.toString(), "Era esperado valores iguais, mas  v é diferente de " + result117 + " <c.toString()>")
chamada antiga: assertEquals(Cookie.SameSite.Strict, c.getSameSite())
nova chamada: assertEquals(Cookie.SameSite.Strict, c.getSameSite(), "Era esperado valores iguais, mas  Cookie.SameSite.Strict é diferente de " + result118 + " <c.getSameSite()>")
chamada antiga: assertTrue(c.isSecure())
nova chamada: assertTrue(c.isSecure(), "Era esperado verdadeiro, mas " + result119 + " <c.isSecure()> é falso")
chamada antiga: assertEquals("color=blue;Secure", c.toString())
nova chamada: assertEquals("color=blue;Secure", c.toString(), "Era esperado valores iguais, mas  'color=blue;Secure' é diferente de " + result120 + " <c.toString()>")
chamada antiga: assertEquals(jetty.getValue(), unirest.getValue())
nova chamada: assertEquals(jetty.getValue(), unirest.getValue(), "Era esperado valores iguais, mas " + result121 + " <jetty.getValue()> é diferente de " + result122 + " <unirest.getValue()>")
chamada antiga: assertEquals("color=blue", c.toString())
nova chamada: assertEquals("color=blue", c.toString(), "Era esperado valores iguais, mas  'color=blue' é diferente de " + result123 + " <c.toString()>")
chamada antiga: assertEquals("", c.getValue())
nova chamada: assertEquals("", c.getValue(), "Era esperado valores iguais, mas  '' é diferente de " + result124 + " <c.getValue()>")
chamada antiga: assertTrue(c.isHttpOnly())
nova chamada: assertTrue(c.isHttpOnly(), "Era esperado verdadeiro, mas " + result125 + " <c.isHttpOnly()> é falso")
chamada antiga: assertEquals(".admin.virginia.edu", c.getDomain())
nova chamada: assertEquals(".admin.virginia.edu", c.getDomain(), "Era esperado valores iguais, mas  '.admin.virginia.edu' é diferente de " + result126 + " <c.getDomain()>")
chamada antiga: assertEquals(" woh ", c.getValue())
nova chamada: assertEquals(" woh ", c.getValue(), "Era esperado valores iguais, mas  ' woh ' é diferente de " + result127 + " <c.getValue()>")
chamada antiga: assertEquals("", c.getValue())
nova chamada: assertEquals("", c.getValue(), "Era esperado valores iguais, mas  '' é diferente de " + result128 + " <c.getValue()>")
chamada antiga: assertEquals("===", c.getValue())
nova chamada: assertEquals("===", c.getValue(), "Era esperado valores iguais, mas  '===' é diferente de " + result129 + " <c.getValue()>")
chamada antiga: assertEquals("\"", c.getValue())
nova chamada: assertEquals("\"", c.getValue(), "Era esperado valores iguais, mas  '\'' é diferente de " + result130 + " <c.getValue()>")
chamada antiga: assertEquals("\"foo", c.getValue())
nova chamada: assertEquals("\"foo", c.getValue(), "Era esperado valores iguais, mas  '\'foo' é diferente de " + result131 + " <c.getValue()>")
chamada antiga: assertEquals(content, getFileByInput(input).body)
nova chamada: assertEquals(content, getFileByInput(input).body, "Era esperado valores iguais, mas  content é diferente de " + " getFileByInput(input).body")
chamada antiga: assertEquals(username + ":" + password, new String(Base64.getDecoder().decode(credentials)))
nova chamada: assertEquals(username + ":" + password, new String(Base64.getDecoder().decode(credentials)), "Era esperado valores iguais, mas  username + ':' + password é diferente de " + " new String(Base64.getDecoder().decode(credentials))")
chamada antiga: assertEquals(s, queryString)
nova chamada: assertEquals(s, queryString, "Era esperado valores iguais, mas  s é diferente de " + " queryString")
chamada antiga: Assertions.assertEquals(get, method)
nova chamada: assertEquals(get, method, "Era esperado valores iguais, mas  get é diferente de " + " method")
chamada antiga: assertEquals(value, routeParams.get(name))
nova chamada: assertEquals(value, routeParams.get(name), "Era esperado valores iguais, mas  value é diferente de " + result132 + " <routeParams.get(name)>")
chamada antiga: assertEquals(s, url)
nova chamada: assertEquals(s, url, "Era esperado valores iguais, mas  s é diferente de " + " url")
chamada antiga: Assertions.assertTrue(jsonPatches.getOperations().contains(new JsonPatchItem(op, path, value)))
nova chamada: assertTrue(jsonPatches.getOperations().contains(new JsonPatchItem(op, path, value)), "Era esperado verdadeiro, mas " + result133 + " <jsonPatches.getOperations().contains(new JsonPatchItem(op, path, value))> é falso")
chamada antiga: assertEquals(i, status)
nova chamada: assertEquals(i, status, "Era esperado valores iguais, mas  i é diferente de " + " status")
chamada antiga: assertEquals(b, isProxied)
nova chamada: assertEquals(b, isProxied, "Era esperado valores iguais, mas  b é diferente de " + " isProxied")
chamada antiga: assertEquals(size, headers.get(foo).size())
nova chamada: assertEquals(size, headers.get(foo).size(), "Era esperado valores iguais, mas  size é diferente de " + result134 + " <headers.get(foo).size()>")
chamada antiga: assertEquals(o, body)
nova chamada: assertEquals(o, body, "Era esperado valores iguais, mas  o é diferente de " + " body")
chamada antiga: assertEquals("multipart/form-data", parts.get(0))
nova chamada: assertEquals("multipart/form-data", parts.get(0), "Era esperado valores iguais, mas  'multipart/form-data' é diferente de " + result135 + " <parts.get(0)>")
chamada antiga: assertTrue(parts.get(1).startsWith("boundary="))
nova chamada: assertTrue(parts.get(1).startsWith("boundary="), "Era esperado verdadeiro, mas " + result136 + " <parts.get(1).startsWith('boundary=')> é falso")
chamada antiga: assertEquals("charset=UTF-8", parts.get(2))
nova chamada: assertEquals("charset=UTF-8", parts.get(2), "Era esperado valores iguais, mas  'charset=UTF-8' é diferente de " + result137 + " <parts.get(2)>")
chamada antiga: assertEquals(value, c)
nova chamada: assertEquals(value, c, "Era esperado valores iguais, mas  value é diferente de " + " c")
chamada antiga: assertEquals(content, body)
nova chamada: assertEquals(content, body, "Era esperado valores iguais, mas  content é diferente de " + " body")
chamada antiga: assertEquals(type, this.fileType)
nova chamada: assertEquals(type, this.fileType, "Era esperado valores iguais, mas  type é diferente de " + " this.fileType")
chamada antiga: assertEquals(s, fileName)
nova chamada: assertEquals(s, fileName, "Era esperado valores iguais, mas  s é diferente de " + " fileName")
chamada antiga: assertEquals(expected, this.size)
nova chamada: assertEquals(expected, this.size, "Era esperado valores iguais, mas  expected é diferente de " + " this.size")
chamada antiga: assertTrue(this.size > 0)
nova chamada: assertTrue(this.size > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(wasCalled)
nova chamada: assertTrue(wasCalled, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(wasCalled)
nova chamada: assertTrue(wasCalled, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertEquals(10, result.size())
nova chamada: assertEquals(10, result.size(), "Era esperado valores iguais, mas  10 é diferente de " + result138 + " <result.size()>")
chamada antiga: Assertions.assertEquals(10, result.size())
nova chamada: assertEquals(10, result.size(), "Era esperado valores iguais, mas  10 é diferente de " + result139 + " <result.size()>")
chamada antiga: Assertions.assertEquals(1, result.size())
nova chamada: assertEquals(1, result.size(), "Era esperado valores iguais, mas  1 é diferente de " + result140 + " <result.size()>")
chamada antiga: assertNull(res.getBody())
nova chamada: assertNull(res.getBody(), "Era esperado nulo, mas " + result141 + " <res.getBody()> não é nulo")
chamada antiga: Assertions.assertEquals(200, res.getStatus())
nova chamada: assertEquals(200, res.getStatus(), "Era esperado valores iguais, mas  200 é diferente de " + result142 + " <res.getStatus()>")
chamada antiga: Assertions.assertEquals("json;charset=utf-8", res.getHeaders().getFirst("Content-Type"))
nova chamada: assertEquals("json;charset=utf-8", res.getHeaders().getFirst("Content-Type"), "Era esperado valores iguais, mas  'json;charset=utf-8' é diferente de " + result143 + " <res.getHeaders().getFirst('Content-Type')>")
chamada antiga: assertNull(res.getBody())
nova chamada: assertNull(res.getBody(), "Era esperado nulo, mas " + result144 + " <res.getBody()> não é nulo")
chamada antiga: Assertions.assertEquals(200, res.getStatus())
nova chamada: assertEquals(200, res.getStatus(), "Era esperado valores iguais, mas  200 é diferente de " + result145 + " <res.getStatus()>")
chamada antiga: Assertions.assertEquals("json;charset=utf-8", res.getHeaders().getFirst("Content-Type"))
nova chamada: assertEquals("json;charset=utf-8", res.getHeaders().getFirst("Content-Type"), "Era esperado valores iguais, mas  'json;charset=utf-8' é diferente de " + result146 + " <res.getHeaders().getFirst('Content-Type')>")
chamada antiga: Assertions.assertEquals(HttpStatus.OK, i.getStatus())
nova chamada: assertEquals(HttpStatus.OK, i.getStatus(), "Era esperado valores iguais, mas  HttpStatus.OK é diferente de " + result147 + " <i.getStatus()>")
chamada antiga: Assertions.assertEquals("{}", i.getBody().toString())
nova chamada: assertEquals("{}", i.getBody().toString(), "Era esperado valores iguais, mas  '{}' é diferente de " + result148 + " <i.getBody().toString()>")
chamada antiga: Assertions.assertEquals("{\"f\":1,\"a\":[2,3,4]}", i.getBody().toString())
nova chamada: assertEquals("{\"f\":1,\"a\":[2,3,4]}", i.getBody().toString(), "Era esperado valores iguais, mas  '{\'f\':1,\'a\':[2,3,4]}' é diferente de " + result149 + " <i.getBody().toString()>")
chamada antiga: Assertions.assertEquals("{\n" + "  \"f\": 1,\n" + "  \"a\": [\n" + "    2,\n" + "    3,\n" + "    4\n" + "  ]\n" + "}", i.getBody().toPrettyString())
nova chamada: assertEquals("{\n" + "  \"f\": 1,\n" + "  \"a\": [\n" + "    2,\n" + "    3,\n" + "    4\n" + "  ]\n" + "}", i.getBody().toPrettyString(), "Era esperado valores iguais, mas  '{\n' + '  \'f\': 1,\n' + '  \'a\': [\n' + '    2,\n' + '    3,\n' + '    4\n' + '  ]\n' + '}' é diferente de " + result150 + " <i.getBody().toPrettyString()>")
chamada antiga: Assertions.assertEquals(HttpStatus.BAD_REQUEST, response.getStatus())
nova chamada: assertEquals(HttpStatus.BAD_REQUEST, response.getStatus(), "Era esperado valores iguais, mas  HttpStatus.BAD_REQUEST é diferente de " + result151 + " <response.getStatus()>")
chamada antiga: assertNull(response.getBody())
nova chamada: assertNull(response.getBody(), "Era esperado nulo, mas " + result152 + " <response.getBody()> não é nulo")
chamada antiga: Assertions.assertTrue(response.getParsingError().isPresent())
nova chamada: assertTrue(response.getParsingError().isPresent(), "Era esperado verdadeiro, mas " + result153 + " <response.getParsingError().isPresent()> é falso")
chamada antiga: Assertions.assertEquals("You did something bad", ex.getOriginalBody())
nova chamada: assertEquals("You did something bad", ex.getOriginalBody(), "Era esperado valores iguais, mas  'You did something bad' é diferente de " + result154 + " <ex.getOriginalBody()>")
chamada antiga: Assertions.assertEquals("kong.unirest.json.JSONException: Invalid JSON", response.getParsingError().get().getMessage())
nova chamada: assertEquals("kong.unirest.json.JSONException: Invalid JSON", response.getParsingError().get().getMessage(), "Era esperado valores iguais, mas  'kong.unirest.json.JSONException: Invalid JSON' é diferente de " + result155 + " <response.getParsingError().get().getMessage()>")
chamada antiga: Assertions.assertEquals("{\"test\":\"it's a && b || c + 1!?\"}", test.toString())
nova chamada: assertEquals("{\"test\":\"it's a && b || c + 1!?\"}", test.toString(), "Era esperado valores iguais, mas  '{\'test\':\'it's a && b || c + 1!?\'}' é diferente de " + result156 + " <test.toString()>")
chamada antiga: Assertions.assertEquals("bar", body.getObject().getJSONObject("params").getJSONArray("foo").get(0))
nova chamada: assertEquals("bar", body.getObject().getJSONObject("params").getJSONArray("foo").get(0), "Era esperado valores iguais, mas  'bar' é diferente de " + result157 + " <body.getObject().getJSONObject('params').getJSONArray('foo').get(0)>")
chamada antiga: Assertions.assertEquals("Can't find route parameter name \"method222\"", ex.getMessage())
nova chamada: assertEquals("Can't find route parameter name \"method222\"", ex.getMessage(), "Era esperado valores iguais, mas  'Can't find route parameter name \'method222\'' é diferente de " + result158 + " <ex.getMessage()>")
chamada antiga: Assertions.assertEquals("java.lang.IllegalArgumentException: Illegal character in path at index 22: http://localhost:4567/{method}?name=Mark", ex.getMessage())
nova chamada: assertEquals("java.lang.IllegalArgumentException: Illegal character in path at index 22: http://localhost:4567/{method}?name=Mark", ex.getMessage(), "Era esperado valores iguais, mas  'java.lang.IllegalArgumentException: Illegal character in path at index 22: http://localhost:4567/{method}?name=Mark' é diferente de " + result159 + " <ex.getMessage()>")
chamada antiga: assertEquals("http://localhost:4567/get/cheese/passed?fruit=apples", sum.getUrl())
nova chamada: assertEquals("http://localhost:4567/get/cheese/passed?fruit=apples", sum.getUrl(), "Era esperado valores iguais, mas  'http://localhost:4567/get/cheese/passed?fruit=apples' é diferente de " + result160 + " <sum.getUrl()>")
chamada antiga: assertEquals("http://localhost:4567/get/{params}/passed", sum.getRawPath())
nova chamada: assertEquals("http://localhost:4567/get/{params}/passed", sum.getRawPath(), "Era esperado valores iguais, mas  'http://localhost:4567/get/{params}/passed' é diferente de " + result161 + " <sum.getRawPath()>")
chamada antiga: assertEquals(HttpMethod.GET, sum.getHttpMethod())
nova chamada: assertEquals(HttpMethod.GET, sum.getHttpMethod(), "Era esperado valores iguais, mas  HttpMethod.GET é diferente de " + result162 + " <sum.getHttpMethod()>")
chamada antiga: assertEquals("http://localhost:4567/get/cheese/passed?fruit=apples", sum.getUrl())
nova chamada: assertEquals("http://localhost:4567/get/cheese/passed?fruit=apples", sum.getUrl(), "Era esperado valores iguais, mas  'http://localhost:4567/get/cheese/passed?fruit=apples' é diferente de " + result163 + " <sum.getUrl()>")
chamada antiga: assertEquals("http://localhost:4567/get/{params}/passed", sum.getRawPath())
nova chamada: assertEquals("http://localhost:4567/get/{params}/passed", sum.getRawPath(), "Era esperado valores iguais, mas  'http://localhost:4567/get/{params}/passed' é diferente de " + result164 + " <sum.getRawPath()>")
chamada antiga: assertEquals(HttpMethod.GET, sum.getHttpMethod())
nova chamada: assertEquals(HttpMethod.GET, sum.getHttpMethod(), "Era esperado valores iguais, mas  HttpMethod.GET é diferente de " + result165 + " <sum.getHttpMethod()>")
chamada antiga: assertEquals(MockServer.GET, interceptor.reqSum.getUrl())
nova chamada: assertEquals(MockServer.GET, interceptor.reqSum.getUrl(), "Era esperado valores iguais, mas  MockServer.GET é diferente de " + result166 + " <interceptor.reqSum.getUrl()>")
chamada antiga: Assertions.assertEquals("java.io.IOException: " + "Something horrible happened", ex.getMessage())
nova chamada: assertEquals("java.io.IOException: " + "Something horrible happened", ex.getMessage(), "Era esperado valores iguais, mas  'java.io.IOException: ' + 'Something horrible happened' é diferente de " + result167 + " <ex.getMessage()>")
chamada antiga: Assertions.assertEquals(542, response.getStatus())
nova chamada: assertEquals(542, response.getStatus(), "Era esperado valores iguais, mas  542 é diferente de " + result168 + " <response.getStatus()>")
chamada antiga: Assertions.assertEquals("Something horrible happened", response.getStatusText())
nova chamada: assertEquals("Something horrible happened", response.getStatusText(), "Era esperado valores iguais, mas  'Something horrible happened' é diferente de " + result169 + " <response.getStatusText()>")
chamada antiga: Assertions.assertEquals(542, response.getStatus())
nova chamada: assertEquals(542, response.getStatus(), "Era esperado valores iguais, mas  542 é diferente de " + result170 + " <response.getStatus()>")
chamada antiga: Assertions.assertEquals("Something horrible happened", response.getStatusText())
nova chamada: assertEquals("Something horrible happened", response.getStatusText(), "Era esperado valores iguais, mas  'Something horrible happened' é diferente de " + result171 + " <response.getStatusText()>")
chamada antiga: assertEquals(newHashSet("file=spidey.jpg", "fruit=apples"), values)
nova chamada: assertEquals(newHashSet("file=spidey.jpg", "fruit=apples"), values, "Era esperado valores iguais, mas " + result172 + " <newHashSet('file=spidey.jpg', 'fruit=apples')> é diferente de " + " values")
chamada antiga: assertNotNull(captured)
nova chamada: assertNotNull(captured, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(captured)
nova chamada: assertNotNull(captured, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: Assertions.assertEquals(400, captured.getStatus())
nova chamada: assertEquals(400, captured.getStatus(), "Era esperado valores iguais, mas  400 é diferente de " + result173 + " <captured.getStatus()>")
chamada antiga: assertNotNull(captured)
nova chamada: assertNotNull(captured, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: Assertions.assertEquals(200, captured.getStatus())
nova chamada: assertEquals(200, captured.getStatus(), "Era esperado valores iguais, mas  200 é diferente de " + result174 + " <captured.getStatus()>")
chamada antiga: Assertions.assertTrue(captured.getParsingError().isPresent())
nova chamada: assertTrue(captured.getParsingError().isPresent(), "Era esperado verdadeiro, mas " + result175 + " <captured.getParsingError().isPresent()> é falso")
chamada antiga: Assertions.assertEquals("not what you expect", captured.getParsingError().get().getOriginalBody())
nova chamada: assertEquals("not what you expect", captured.getParsingError().get().getOriginalBody(), "Era esperado valores iguais, mas  'not what you expect' é diferente de " + result176 + " <captured.getParsingError().get().getOriginalBody()>")
chamada antiga: Assertions.assertEquals(400, error.httpResponse.getStatus())
nova chamada: assertEquals(400, error.httpResponse.getStatus(), "Era esperado valores iguais, mas  400 é diferente de " + result177 + " <error.httpResponse.getStatus()>")
chamada antiga: Assertions.assertEquals(400, error.httpResponse.getStatus())
nova chamada: assertEquals(400, error.httpResponse.getStatus(), "Era esperado valores iguais, mas  400 é diferente de " + result178 + " <error.httpResponse.getStatus()>")
chamada antiga: Assertions.assertTrue(response.isSuccess())
nova chamada: assertTrue(response.isSuccess(), "Era esperado verdadeiro, mas " + result179 + " <response.isSuccess()> é falso")
chamada antiga: Assertions.assertFalse(response.isSuccess())
nova chamada: assertFalse(response.isSuccess(), "Era esperado falso, mas " + result180 + " <response.isSuccess()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(response.isSuccess())
nova chamada: assertFalse(response.isSuccess(), "Era esperado falso, mas " + result181 + " <response.isSuccess()> é verdadeiro ")
chamada antiga: Assertions.assertEquals(200, s.getStatus())
nova chamada: assertEquals(200, s.getStatus(), "Era esperado valores iguais, mas  200 é diferente de " + result182 + " <s.getStatus()>")
chamada antiga: assertEquals("GET http://somewhere/beans?fruit=apple\n" + "Accept=image/raw\n" + "===================================", log)
nova chamada: assertEquals("GET http://somewhere/beans?fruit=apple\n" + "Accept=image/raw\n" + "===================================", log, "Era esperado valores iguais, mas  'GET http://somewhere/beans?fruit=apple\n' + 'Accept=image/raw\n' + '===================================' é diferente de " + " log")
chamada antiga: assertEquals("POST http://somewhere/beans?fruit=apple\n" + "Accept=image/raw\n" + "===================================\n" + "this is the body", log)
nova chamada: assertEquals("POST http://somewhere/beans?fruit=apple\n" + "Accept=image/raw\n" + "===================================\n" + "this is the body", log, "Era esperado valores iguais, mas  'POST http://somewhere/beans?fruit=apple\n' + 'Accept=image/raw\n' + '===================================\n' + 'this is the body' é diferente de " + " log")
chamada antiga: assertEquals("POST http://somewhere/beans?fruit=apple\n" + "Accept=image/raw\n" + "===================================\n" + "{\"muppet\":\"Gonzo\"}", log)
nova chamada: assertEquals("POST http://somewhere/beans?fruit=apple\n" + "Accept=image/raw\n" + "===================================\n" + "{\"muppet\":\"Gonzo\"}", log, "Era esperado valores iguais, mas  'POST http://somewhere/beans?fruit=apple\n' + 'Accept=image/raw\n' + '===================================\n' + '{\'muppet\':\'Gonzo\'}' é diferente de " + " log")
chamada antiga: assertEquals("POST http://somewhere/beans?fruit=apple\n" + "Accept=image/raw\n" + "===================================\n" + "{\"bar\":\"zip\"}", log)
nova chamada: assertEquals("POST http://somewhere/beans?fruit=apple\n" + "Accept=image/raw\n" + "===================================\n" + "{\"bar\":\"zip\"}", log, "Era esperado valores iguais, mas  'POST http://somewhere/beans?fruit=apple\n' + 'Accept=image/raw\n' + '===================================\n' + '{\'bar\':\'zip\'}' é diferente de " + " log")
chamada antiga: assertEquals("POST http://somewhere/beans?fruit=apple\n" + "Accept=image/raw\n" + "===================================\n" + "album=77&band=Talking+Heads", log)
nova chamada: assertEquals("POST http://somewhere/beans?fruit=apple\n" + "Accept=image/raw\n" + "===================================\n" + "album=77&band=Talking+Heads", log, "Era esperado valores iguais, mas  'POST http://somewhere/beans?fruit=apple\n' + 'Accept=image/raw\n' + '===================================\n' + 'album=77&band=Talking+Heads' é diferente de " + " log")
chamada antiga: assertEquals("POST http://localhost:4567/raw\n" + "Accept=image/raw\n" + "===================================\n" + "--5798a3ff-ed92-4e9e-a9fe-bd7853cea758\n" + "Content-Disposition: form-data; name:\"album\"\n" + "77\n" + "\n" + "--0ad6dbf7-c5b6-453e-a28c-4a3a8fab7017\n" + "Content-Disposition: form-data; name:\"band\"\n" + "Talking Heads\n" + "\n" + "--453a52b3-2811-4bf6-8950-6395efe72ef7\n" + "Content-Disposition: form-data; name=\"file\"; filename=\"null\"\n" + "Content-Type: application/octet-stream\n" + "<BINARY DATA>\n", body)
nova chamada: assertEquals("POST http://localhost:4567/raw\n" + "Accept=image/raw\n" + "===================================\n" + "--5798a3ff-ed92-4e9e-a9fe-bd7853cea758\n" + "Content-Disposition: form-data; name:\"album\"\n" + "77\n" + "\n" + "--0ad6dbf7-c5b6-453e-a28c-4a3a8fab7017\n" + "Content-Disposition: form-data; name:\"band\"\n" + "Talking Heads\n" + "\n" + "--453a52b3-2811-4bf6-8950-6395efe72ef7\n" + "Content-Disposition: form-data; name=\"file\"; filename=\"null\"\n" + "Content-Type: application/octet-stream\n" + "<BINARY DATA>\n", body, "Era esperado valores iguais, mas  'POST http://localhost:4567/raw\n' + 'Accept=image/raw\n' + '===================================\n' + '--5798a3ff-ed92-4e9e-a9fe-bd7853cea758\n' + 'Content-Disposition: form-data; name:\'album\'\n' + '77\n' + '\n' + '--0ad6dbf7-c5b6-453e-a28c-4a3a8fab7017\n' + 'Content-Disposition: form-data; name:\'band\'\n' + 'Talking Heads\n' + '\n' + '--453a52b3-2811-4bf6-8950-6395efe72ef7\n' + 'Content-Disposition: form-data; name=\'file\'; filename=\'null\'\n' + 'Content-Type: application/octet-stream\n' + 'BINARY DATA\n' é diferente de " + " body")
chamada antiga: assertEquals(expected, threads.stream().filter(t -> "Unirest Apache Client Shutdown Hook".equals(t.getName())).count())
nova chamada: assertEquals(expected, threads.stream().filter(t -> "Unirest Apache Client Shutdown Hook".equals(t.getName())).count(), "Era esperado valores iguais, mas  expected é diferente de " + result183 + " <threads.stream().filter(t -> 'Unirest Apache Client Shutdown Hook'.equals(t.getName())).count()>")
chamada antiga: assertEquals(expected, threads.stream().filter(t -> "Unirest Apache Async Client Shutdown Hook".equals(t.getName())).count())
nova chamada: assertEquals(expected, threads.stream().filter(t -> "Unirest Apache Async Client Shutdown Hook".equals(t.getName())).count(), "Era esperado valores iguais, mas  expected é diferente de " + result184 + " <threads.stream().filter(t -> 'Unirest Apache Async Client Shutdown Hook'.equals(t.getName())).count()>")
chamada antiga: Assertions.assertEquals("No Object Mapper Configured. Please config one with Unirest.config().setObjectMapper", ex.getMessage())
nova chamada: assertEquals("No Object Mapper Configured. Please config one with Unirest.config().setObjectMapper", ex.getMessage(), "Era esperado valores iguais, mas  'No Object Mapper Configured. Please config one with Unirest.config().setObjectMapper' é diferente de " + result185 + " <ex.getMessage()>")
chamada antiga: assertEquals("{\"body\": \"sample\"}", value)
nova chamada: assertEquals("{\"body\": \"sample\"}", value, "Era esperado valores iguais, mas  '{\'body\': \'sample\'}' é diferente de " + " value")
chamada antiga: assertEquals("{\"body\": \"sample\"}", value)
nova chamada: assertEquals("{\"body\": \"sample\"}", value, "Era esperado valores iguais, mas  '{\'body\': \'sample\'}' é diferente de " + " value")
chamada antiga: assertEquals("{\"body\":\"sample\"}", value)
nova chamada: assertEquals("{\"body\":\"sample\"}", value, "Era esperado valores iguais, mas  '{\'body\':\'sample\'}' é diferente de " + " value")
chamada antiga: assertEquals("{\"body\":\"sample\"}", value)
nova chamada: assertEquals("{\"body\":\"sample\"}", value, "Era esperado valores iguais, mas  '{\'body\':\'sample\'}' é diferente de " + " value")
chamada antiga: assertEquals("[\"body\",\"sample\"]", value)
nova chamada: assertEquals("[\"body\",\"sample\"]", value, "Era esperado valores iguais, mas  '[\'body\',\'sample\']' é diferente de " + " value")
chamada antiga: Assertions.assertEquals(429, Unirest.get(MockServer.GET).asEmpty().getStatus())
nova chamada: assertEquals(429, Unirest.get(MockServer.GET).asEmpty().getStatus(), "Era esperado valores iguais, mas  429 é diferente de " + result186 + " <Unirest.get(MockServer.GET).asEmpty().getStatus()>")
chamada antiga: Assertions.assertEquals(429, Unirest.get(MockServer.GET).asString().getStatus())
nova chamada: assertEquals(429, Unirest.get(MockServer.GET).asString().getStatus(), "Era esperado valores iguais, mas  429 é diferente de " + result187 + " <Unirest.get(MockServer.GET).asString().getStatus()>")
chamada antiga: Assertions.assertEquals(429, Unirest.get(MockServer.GET).asBytes().getStatus())
nova chamada: assertEquals(429, Unirest.get(MockServer.GET).asBytes().getStatus(), "Era esperado valores iguais, mas  429 é diferente de " + result188 + " <Unirest.get(MockServer.GET).asBytes().getStatus()>")
chamada antiga: assertEquals(429, Unirest.get(MockServer.GET).asObject(RequestCapture.class).getStatus())
nova chamada: assertEquals(429, Unirest.get(MockServer.GET).asObject(RequestCapture.class).getStatus(), "Era esperado valores iguais, mas  429 é diferente de " + result189 + " <Unirest.get(MockServer.GET).asObject(RequestCapture.class).getStatus()>")
chamada antiga: assertEquals(o, cap)
nova chamada: assertEquals(o, cap, "Era esperado valores iguais, mas  o é diferente de " + " cap")
chamada antiga: assertEquals("Hi Mom", cap)
nova chamada: assertEquals("Hi Mom", cap, "Era esperado valores iguais, mas  'Hi Mom' é diferente de " + " cap")
chamada antiga: Assertions.assertEquals("Hi Mom", cap.getObject().getString("message"))
nova chamada: assertEquals("Hi Mom", cap.getObject().getString("message"), "Era esperado valores iguais, mas  'Hi Mom' é diferente de " + result190 + " <cap.getObject().getString('message')>")
chamada antiga: assertEquals("Hi Mom", new String(cap))
nova chamada: assertEquals("Hi Mom", new String(cap), "Era esperado valores iguais, mas  'Hi Mom' é diferente de " + " new String(cap)")
chamada antiga: assertTrue(cap.exists())
nova chamada: assertTrue(cap.exists(), "Era esperado verdadeiro, mas " + result191 + " <cap.exists()> é falso")
chamada antiga: Assertions.assertEquals(429, resp.getStatus())
nova chamada: assertEquals(429, resp.getStatus(), "Era esperado valores iguais, mas  429 é diferente de " + result192 + " <resp.getStatus()>")
chamada antiga: Assertions.assertEquals(429, Unirest.get(MockServer.GET).asEmpty().getStatus())
nova chamada: assertEquals(429, Unirest.get(MockServer.GET).asEmpty().getStatus(), "Era esperado valores iguais, mas  429 é diferente de " + result193 + " <Unirest.get(MockServer.GET).asEmpty().getStatus()>")
chamada antiga: Assertions.assertEquals(200, response.getStatus())
nova chamada: assertEquals(200, response.getStatus(), "Era esperado valores iguais, mas  200 é diferente de " + result194 + " <response.getStatus()>")
chamada antiga: assertEquals(1, stat.timesCalled)
nova chamada: assertEquals(1, stat.timesCalled, "Era esperado valores iguais, mas  1 é diferente de " + " stat.timesCalled")
chamada antiga: assertEquals(asList(19L), stat.progress)
nova chamada: assertEquals(asList(19L), stat.progress, "Era esperado valores iguais, mas " + result195 + " <asList(19L)> é diferente de " + " stat.progress")
chamada antiga: assertEquals(19L, stat.total)
nova chamada: assertEquals(19L, stat.total, "Era esperado valores iguais, mas  19L é diferente de " + " stat.total")
chamada antiga: assertEquals(i, timesCalled)
nova chamada: assertEquals(i, timesCalled, "Era esperado valores iguais, mas  i é diferente de " + " timesCalled")
chamada antiga: assertEquals("bar", r.get("foo"))
nova chamada: assertEquals("bar", r.get("foo"), "Era esperado valores iguais, mas  'bar' é diferente de " + result196 + " <r.get('foo')>")
chamada antiga: assertEquals("bar", r.get("foo"))
nova chamada: assertEquals("bar", r.get("foo"), "Era esperado valores iguais, mas  'bar' é diferente de " + result197 + " <r.get('foo')>")
chamada antiga: Assertions.assertEquals(200, r.getStatus())
nova chamada: assertEquals(200, r.getStatus(), "Era esperado valores iguais, mas  200 é diferente de " + result198 + " <r.getStatus()>")
chamada antiga: Assertions.assertTrue(r.getParsingError().isPresent())
nova chamada: assertTrue(r.getParsingError().isPresent(), "Era esperado verdadeiro, mas " + result199 + " <r.getParsingError().isPresent()> é falso")
chamada antiga: Assertions.assertEquals(ohNoes, r.getParsingError().get().getCause())
nova chamada: assertEquals(ohNoes, r.getParsingError().get().getCause(), "Era esperado valores iguais, mas  ohNoes é diferente de " + result200 + " <r.getParsingError().get().getCause()>")
chamada antiga: Assertions.assertEquals("call me ishmael", r.getParsingError().get().getOriginalBody())
nova chamada: assertEquals("call me ishmael", r.getParsingError().get().getOriginalBody(), "Era esperado valores iguais, mas  'call me ishmael' é diferente de " + result201 + " <r.getParsingError().get().getOriginalBody()>")
chamada antiga: Assertions.assertEquals(200, r.getStatus())
nova chamada: assertEquals(200, r.getStatus(), "Era esperado valores iguais, mas  200 é diferente de " + result202 + " <r.getStatus()>")
chamada antiga: Assertions.assertTrue(r.getParsingError().isPresent())
nova chamada: assertTrue(r.getParsingError().isPresent(), "Era esperado verdadeiro, mas " + result203 + " <r.getParsingError().isPresent()> é falso")
chamada antiga: Assertions.assertEquals(ohNoes, r.getParsingError().get().getCause())
nova chamada: assertEquals(ohNoes, r.getParsingError().get().getCause(), "Era esperado valores iguais, mas  ohNoes é diferente de " + result204 + " <r.getParsingError().get().getCause()>")
chamada antiga: Assertions.assertEquals("call me ishmael", r.getParsingError().get().getOriginalBody())
nova chamada: assertEquals("call me ishmael", r.getParsingError().get().getOriginalBody(), "Era esperado valores iguais, mas  'call me ishmael' é diferente de " + result205 + " <r.getParsingError().get().getOriginalBody()>")
chamada antiga: assertTrue(JankyProxy.wasUsed())
nova chamada: assertTrue(JankyProxy.wasUsed(), "Era esperado verdadeiro, mas " + result206 + " <JankyProxy.wasUsed()> é falso")
chamada antiga: assertTrue(JankyProxy.wasUsed())
nova chamada: assertTrue(JankyProxy.wasUsed(), "Era esperado verdadeiro, mas " + result207 + " <JankyProxy.wasUsed()> é falso")
chamada antiga: assertTrue(JankyProxy.wasUsed())
nova chamada: assertTrue(JankyProxy.wasUsed(), "Era esperado verdadeiro, mas " + result208 + " <JankyProxy.wasUsed()> é falso")
chamada antiga: assertTrue(JankyProxy.wasUsed())
nova chamada: assertTrue(JankyProxy.wasUsed(), "Era esperado verdadeiro, mas " + result209 + " <JankyProxy.wasUsed()> é falso")
chamada antiga: assertTrue(JankyProxy.wasUsed())
nova chamada: assertTrue(JankyProxy.wasUsed(), "Era esperado verdadeiro, mas " + result210 + " <JankyProxy.wasUsed()> é falso")
chamada antiga: assertTrue(JankyProxy.wasUsed())
nova chamada: assertTrue(JankyProxy.wasUsed(), "Era esperado verdadeiro, mas " + result211 + " <JankyProxy.wasUsed()> é falso")
chamada antiga: assertTrue(higherConcurrencyTime < smallerConcurrencyTime)
nova chamada: assertTrue(higherConcurrencyTime < smallerConcurrencyTime, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(3, someTees.size())
nova chamada: assertEquals(3, someTees.size(), "Era esperado valores iguais, mas  3 é diferente de " + result212 + " <someTees.size()>")
chamada antiga: assertEquals("foo", someTees.get(0).bar)
nova chamada: assertEquals("foo", someTees.get(0).bar, "Era esperado valores iguais, mas  'foo' é diferente de " + " someTees.get(0).bar")
chamada antiga: assertEquals("bar", someTees.get(1).bar)
nova chamada: assertEquals("bar", someTees.get(1).bar, "Era esperado valores iguais, mas  'bar' é diferente de " + " someTees.get(1).bar")
chamada antiga: assertEquals("baz", someTees.get(2).bar)
nova chamada: assertEquals("baz", someTees.get(2).bar, "Era esperado valores iguais, mas  'baz' é diferente de " + " someTees.get(2).bar")
chamada antiga: assertEquals("Hi Mom", body)
nova chamada: assertEquals("Hi Mom", body, "Era esperado valores iguais, mas  'Hi Mom' é diferente de " + " body")
chamada antiga: Assertions.assertEquals(200, i.getStatus())
nova chamada: assertEquals(200, i.getStatus(), "Era esperado valores iguais, mas  200 é diferente de " + result213 + " <i.getStatus()>")
chamada antiga: Assertions.assertEquals("", i.getBody())
nova chamada: assertEquals("", i.getBody(), "Era esperado valores iguais, mas  '' é diferente de " + result214 + " <i.getBody()>")
chamada antiga: Assertions.assertEquals(200, i.getStatus())
nova chamada: assertEquals(200, i.getStatus(), "Era esperado valores iguais, mas  200 é diferente de " + result215 + " <i.getStatus()>")
chamada antiga: Assertions.assertEquals(200, i.getStatus())
nova chamada: assertEquals(200, i.getStatus(), "Era esperado valores iguais, mas  200 é diferente de " + result216 + " <i.getStatus()>")
chamada antiga: Assertions.assertEquals("ěščřžýáíé", Unirest.get(MockServer.GET).asString().getBody())
nova chamada: assertEquals("ěščřžýáíé", Unirest.get(MockServer.GET).asString().getBody(), "Era esperado valores iguais, mas  'ěščřžýáíé' é diferente de " + result217 + " <Unirest.get(MockServer.GET).asString().getBody()>")
chamada antiga: Assertions.assertEquals(200, response.getStatus())
nova chamada: assertEquals(200, response.getStatus(), "Era esperado valores iguais, mas  200 é diferente de " + result218 + " <response.getStatus()>")
chamada antiga: Assertions.assertEquals("šžýáíé", response.getBody())
nova chamada: assertEquals("šžýáíé", response.getBody(), "Era esperado valores iguais, mas  'šžýáíé' é diferente de " + result219 + " <response.getBody()>")
chamada antiga: Assertions.assertEquals(200, response.getStatus())
nova chamada: assertEquals(200, response.getStatus(), "Era esperado valores iguais, mas  200 é diferente de " + result220 + " <response.getStatus()>")
chamada antiga: Assertions.assertEquals("šžýáíé", response.getBody())
nova chamada: assertEquals("šžýáíé", response.getBody(), "Era esperado valores iguais, mas  'šžýáíé' é diferente de " + result221 + " <response.getBody()>")
chamada antiga: assertEquals(message, fail)
nova chamada: assertEquals(message, fail, "Era esperado valores iguais, mas  message é diferente de " + " fail")
chamada antiga: Assertions.assertEquals(200, response.getStatus())
nova chamada: assertEquals(200, response.getStatus(), "Era esperado valores iguais, mas  200 é diferente de " + result222 + " <response.getStatus()>")
chamada antiga: assertEquals("howdy", r)
nova chamada: assertEquals("howdy", r, "Era esperado valores iguais, mas  'howdy' é diferente de " + " r")
chamada antiga: assertEquals("howdy", r.bar)
nova chamada: assertEquals("howdy", r.bar, "Era esperado valores iguais, mas  'howdy' é diferente de " + " r.bar")
chamada antiga: assertEquals(200, status)
nova chamada: assertEquals(200, status, "Era esperado valores iguais, mas  200 é diferente de " + " status")
chamada antiga: assertEquals(null, error)
nova chamada: assertEquals(null, error, "Era esperado valores iguais, mas  null é diferente de " + " error")
chamada antiga: assertEquals(200, status)
nova chamada: assertEquals(200, status, "Era esperado valores iguais, mas  200 é diferente de " + " status")
chamada antiga: assertTrue(test.toFile().exists())
nova chamada: assertTrue(test.toFile().exists(), "Era esperado verdadeiro, mas " + result223 + " <test.toFile().exists()> é falso")
chamada antiga: assertEquals(null, error)
nova chamada: assertEquals(null, error, "Era esperado valores iguais, mas  null é diferente de " + " error")
chamada antiga: assertEquals(200, status)
nova chamada: assertEquals(200, status, "Era esperado valores iguais, mas  200 é diferente de " + " status")
chamada antiga: assertTrue(test.toFile().exists())
nova chamada: assertTrue(test.toFile().exists(), "Era esperado verdadeiro, mas " + result224 + " <test.toFile().exists()> é falso")
chamada antiga: assertEquals(200, status)
nova chamada: assertEquals(200, status, "Era esperado valores iguais, mas  200 é diferente de " + " status")
chamada antiga: assertEquals(123456, body)
nova chamada: assertEquals(123456, body, "Era esperado valores iguais, mas  123456 é diferente de " + " body")
chamada antiga: Assertions.assertEquals(123456, response.getBody().intValue())
nova chamada: assertEquals(123456, response.getBody().intValue(), "Era esperado valores iguais, mas  123456 é diferente de " + result225 + " <response.getBody().intValue()>")
chamada antiga: Assertions.assertEquals(200, response.getStatus())
nova chamada: assertEquals(200, response.getStatus(), "Era esperado valores iguais, mas  200 é diferente de " + result226 + " <response.getStatus()>")
chamada antiga: Assertions.assertEquals("cheddar", response.getHeaders().getFirst("cheese"))
nova chamada: assertEquals("cheddar", response.getHeaders().getFirst("cheese"), "Era esperado valores iguais, mas  'cheddar' é diferente de " + result227 + " <response.getHeaders().getFirst('cheese')>")
chamada antiga: assertEquals(2, MockServer.timesCalled)
nova chamada: assertEquals(2, MockServer.timesCalled, "Era esperado valores iguais, mas  2 é diferente de " + " MockServer.timesCalled")
chamada antiga: assertEquals(1, MockServer.timesCalled)
nova chamada: assertEquals(1, MockServer.timesCalled, "Era esperado valores iguais, mas  1 é diferente de " + " MockServer.timesCalled")
chamada antiga: assertEquals(r1, r2)
nova chamada: assertEquals(r1, r2, "Era esperado valores iguais, mas  r1 é diferente de " + " r2")
chamada antiga: assertEquals(1, MockServer.timesCalled)
nova chamada: assertEquals(1, MockServer.timesCalled, "Era esperado valores iguais, mas  1 é diferente de " + " MockServer.timesCalled")
chamada antiga: assertEquals(r1, r2)
nova chamada: assertEquals(r1, r2, "Era esperado valores iguais, mas  r1 é diferente de " + " r2")
chamada antiga: assertSame(Unirest.get(MockServer.GET).asString(), Unirest.get(MockServer.GET).asString())
nova chamada: assertSame(Unirest.get(MockServer.GET).asString(), Unirest.get(MockServer.GET).asString(), "Era esperado objetos iguais, mas " + result228 + " <Unirest.get(MockServer.GET).asString()> é diferente de " + result229 + " <Unirest.get(MockServer.GET).asString()>")
chamada antiga: assertNotSame(Unirest.get(MockServer.GET).asString(), Unirest.get(MockServer.GET).asObject(RequestCapture.class))
nova chamada: assertNotSame(Unirest.get(MockServer.GET).asString(), Unirest.get(MockServer.GET).asObject(RequestCapture.class), "Era esperado objetos diferentes, mas " + result230 + " <Unirest.get(MockServer.GET).asString()> é igual a " + result231 + " <Unirest.get(MockServer.GET).asObject(RequestCapture.class)>")
chamada antiga: assertEquals(2, MockServer.timesCalled)
nova chamada: assertEquals(2, MockServer.timesCalled, "Era esperado valores iguais, mas  2 é diferente de " + " MockServer.timesCalled")
chamada antiga: assertNull(Unirest.get(MockServer.GET).asEmpty().getBody())
nova chamada: assertNull(Unirest.get(MockServer.GET).asEmpty().getBody(), "Era esperado nulo, mas " + result232 + " <Unirest.get(MockServer.GET).asEmpty().getBody()> não é nulo")
chamada antiga: assertNull(Unirest.get(MockServer.GET).asEmpty().getBody())
nova chamada: assertNull(Unirest.get(MockServer.GET).asEmpty().getBody(), "Era esperado nulo, mas " + result233 + " <Unirest.get(MockServer.GET).asEmpty().getBody()> não é nulo")
chamada antiga: assertNotNull(Unirest.get(MockServer.GET).asObject(RequestCapture.class).getBody())
nova chamada: assertNotNull(Unirest.get(MockServer.GET).asObject(RequestCapture.class).getBody(), "Era esperado não nulo, mas " + result234 + " <Unirest.get(MockServer.GET).asObject(RequestCapture.class).getBody()> é nulo")
chamada antiga: assertNotNull(Unirest.get(MockServer.GET).asObject(RequestCapture.class).getBody())
nova chamada: assertNotNull(Unirest.get(MockServer.GET).asObject(RequestCapture.class).getBody(), "Era esperado não nulo, mas " + result235 + " <Unirest.get(MockServer.GET).asObject(RequestCapture.class).getBody()> é nulo")
chamada antiga: assertNotNull(Unirest.get(MockServer.GET).asString().getBody())
nova chamada: assertNotNull(Unirest.get(MockServer.GET).asString().getBody(), "Era esperado não nulo, mas " + result236 + " <Unirest.get(MockServer.GET).asString().getBody()> é nulo")
chamada antiga: assertNotNull(Unirest.get(MockServer.GET).asString().getBody())
nova chamada: assertNotNull(Unirest.get(MockServer.GET).asString().getBody(), "Era esperado não nulo, mas " + result237 + " <Unirest.get(MockServer.GET).asString().getBody()> é nulo")
chamada antiga: assertNotNull(Unirest.get(MockServer.GET).asJson().getBody())
nova chamada: assertNotNull(Unirest.get(MockServer.GET).asJson().getBody(), "Era esperado não nulo, mas " + result238 + " <Unirest.get(MockServer.GET).asJson().getBody()> é nulo")
chamada antiga: assertNotNull(Unirest.get(MockServer.GET).asJson().getBody())
nova chamada: assertNotNull(Unirest.get(MockServer.GET).asJson().getBody(), "Era esperado não nulo, mas " + result239 + " <Unirest.get(MockServer.GET).asJson().getBody()> é nulo")
chamada antiga: assertNotNull(Unirest.get(MockServer.GET).asBytes().getBody())
nova chamada: assertNotNull(Unirest.get(MockServer.GET).asBytes().getBody(), "Era esperado não nulo, mas " + result240 + " <Unirest.get(MockServer.GET).asBytes().getBody()> é nulo")
chamada antiga: assertNotNull(Unirest.get(MockServer.GET).asBytes().getBody())
nova chamada: assertNotNull(Unirest.get(MockServer.GET).asBytes().getBody(), "Era esperado não nulo, mas " + result241 + " <Unirest.get(MockServer.GET).asBytes().getBody()> é nulo")
chamada antiga: assertEquals(5, MockServer.timesCalled)
nova chamada: assertEquals(5, MockServer.timesCalled, "Era esperado valores iguais, mas  5 é diferente de " + " MockServer.timesCalled")
chamada antiga: assertEquals(10, MockServer.timesCalled)
nova chamada: assertEquals(10, MockServer.timesCalled, "Era esperado valores iguais, mas  10 é diferente de " + " MockServer.timesCalled")
chamada antiga: assertEquals(11, MockServer.timesCalled)
nova chamada: assertEquals(11, MockServer.timesCalled, "Era esperado valores iguais, mas  11 é diferente de " + " MockServer.timesCalled")
chamada antiga: assertEquals(1, MockServer.timesCalled)
nova chamada: assertEquals(1, MockServer.timesCalled, "Era esperado valores iguais, mas  1 é diferente de " + " MockServer.timesCalled")
chamada antiga: assertEquals(2, MockServer.timesCalled)
nova chamada: assertEquals(2, MockServer.timesCalled, "Era esperado valores iguais, mas  2 é diferente de " + " MockServer.timesCalled")
chamada antiga: Assertions.assertNotEquals(response1.getBody().getObject().getString("requestId"), response2.getBody().getObject().getString("requestId"))
nova chamada: assertNotEquals(response1.getBody().getObject().getString("requestId"), response2.getBody().getObject().getString("requestId"), "Era esperado valores diferentes, mas " + result242 + " <response1.getBody().getObject().getString('requestId')> é igual a " + result243 + " <response2.getBody().getObject().getString('requestId')>")
chamada antiga: assertEquals(2, MockServer.timesCalled)
nova chamada: assertEquals(2, MockServer.timesCalled, "Era esperado valores iguais, mas  2 é diferente de " + " MockServer.timesCalled")
chamada antiga: Assertions.assertEquals(response1.getBody().getObject().getString("requestId"), response2.getBody().getObject().getString("requestId"))
nova chamada: assertEquals(response1.getBody().getObject().getString("requestId"), response2.getBody().getObject().getString("requestId"), "Era esperado valores iguais, mas " + result244 + " <response1.getBody().getObject().getString('requestId')> é diferente de " + result245 + " <response2.getBody().getObject().getString('requestId')>")
chamada antiga: assertEquals(1, MockServer.timesCalled)
nova chamada: assertEquals(1, MockServer.timesCalled, "Era esperado valores iguais, mas  1 é diferente de " + " MockServer.timesCalled")
chamada antiga: Assertions.assertFalse(result.getParsingError().isPresent())
nova chamada: assertFalse(result.getParsingError().isPresent(), "Era esperado falso, mas " + result246 + " <result.getParsingError().isPresent()> é verdadeiro ")
chamada antiga: Assertions.assertEquals("", result.getBody())
nova chamada: assertEquals("", result.getBody(), "Era esperado valores iguais, mas  '' é diferente de " + result247 + " <result.getBody()>")
chamada antiga: Assertions.assertEquals(0, resp.getHeaders().get("Content-Encoding").size())
nova chamada: assertEquals(0, resp.getHeaders().get("Content-Encoding").size(), "Era esperado valores iguais, mas  0 é diferente de " + result248 + " <resp.getHeaders().get('Content-Encoding').size()>")
chamada antiga: Assertions.assertEquals(0, resp.getHeaders().get("Content-Encoding").size())
nova chamada: assertEquals(0, resp.getHeaders().get("Content-Encoding").size(), "Era esperado valores iguais, mas  0 é diferente de " + result249 + " <resp.getHeaders().get('Content-Encoding').size()>")
chamada antiga: assertEquals(2, metric.routes.get(GET).size())
nova chamada: assertEquals(2, metric.routes.get(GET).size(), "Era esperado valores iguais, mas  2 é diferente de " + result250 + " <metric.routes.get(GET).size()>")
chamada antiga: assertEquals(1, metric.routes.get("http://localhost:4567/get/foo/passed?fruit=orange").size())
nova chamada: assertEquals(1, metric.routes.get("http://localhost:4567/get/foo/passed?fruit=orange").size(), "Era esperado valores iguais, mas  1 é diferente de " + result251 + " <metric.routes.get('http://localhost:4567/get/foo/passed?fruit=orange').size()>")
chamada antiga: assertEquals(1, metric.routes.get("http://localhost:4567/get/{params}/passed").size())
nova chamada: assertEquals(1, metric.routes.get("http://localhost:4567/get/{params}/passed").size(), "Era esperado valores iguais, mas  1 é diferente de " + result252 + " <metric.routes.get('http://localhost:4567/get/{params}/passed').size()>")
chamada antiga: assertEquals(2, metric.routes.get("GET").size())
nova chamada: assertEquals(2, metric.routes.get("GET").size(), "Era esperado valores iguais, mas  2 é diferente de " + result253 + " <metric.routes.get('GET').size()>")
chamada antiga: assertEquals(1, metric.routes.get("DELETE").size())
nova chamada: assertEquals(1, metric.routes.get("DELETE").size(), "Era esperado valores iguais, mas  1 é diferente de " + result254 + " <metric.routes.get('DELETE').size()>")
chamada antiga: assertEquals(1L, metric.countResponses(200))
nova chamada: assertEquals(1L, metric.countResponses(200), "Era esperado valores iguais, mas  1L é diferente de " + result255 + " <metric.countResponses(200)>")
chamada antiga: assertEquals(2L, metric.countResponses(301))
nova chamada: assertEquals(2L, metric.countResponses(301), "Era esperado valores iguais, mas  2L é diferente de " + result256 + " <metric.countResponses(301)>")
chamada antiga: assertEquals(1L, metric.countResponses(400))
nova chamada: assertEquals(1L, metric.countResponses(400), "Era esperado valores iguais, mas  1L é diferente de " + result257 + " <metric.countResponses(400)>")
chamada antiga: assertEquals(1L, metric.countResponses(200))
nova chamada: assertEquals(1L, metric.countResponses(200), "Era esperado valores iguais, mas  1L é diferente de " + result258 + " <metric.countResponses(200)>")
chamada antiga: assertEquals(1L, metric.countResponses(200))
nova chamada: assertEquals(1L, metric.countResponses(200), "Era esperado valores iguais, mas  1L é diferente de " + result259 + " <metric.countResponses(200)>")
chamada antiga: assertEquals("Something horrible happened", metric.routes.get(GET).get(0).e.getMessage())
nova chamada: assertEquals("Something horrible happened", metric.routes.get(GET).get(0).e.getMessage(), "Era esperado valores iguais, mas  'Something horrible happened' é diferente de " + result260 + " <metric.routes.get(GET).get(0).e.getMessage()>")
chamada antiga: assertEquals("Connection refused", metric.routes.get("http://localhost:0000").get(0).e.getMessage())
nova chamada: assertEquals("Connection refused", metric.routes.get("http://localhost:0000").get(0).e.getMessage(), "Era esperado valores iguais, mas  'Connection refused' é diferente de " + result261 + " <metric.routes.get('http://localhost:0000').get(0).e.getMessage()>")
chamada antiga: assertEquals(1, metric.routes.get("http://localhost:0000").size())
nova chamada: assertEquals(1, metric.routes.get("http://localhost:0000").size(), "Era esperado valores iguais, mas  1 é diferente de " + result262 + " <metric.routes.get('http://localhost:0000').size()>")
chamada antiga: assertTrue(exTime > 0L)
nova chamada: assertTrue(exTime > 0L, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("localhost:4567", map.get("host()"))
nova chamada: assertEquals("localhost:4567", map.get("host()"), "Era esperado valores iguais, mas  'localhost:4567' é diferente de " + result263 + " <map.get('host()')>")
chamada antiga: assertEquals("/sparkle/joy/yippy", map.get("uri()"))
nova chamada: assertEquals("/sparkle/joy/yippy", map.get("uri()"), "Era esperado valores iguais, mas  '/sparkle/joy/yippy' é diferente de " + result264 + " <map.get('uri()')>")
chamada antiga: assertEquals("http://localhost:4567/sparkle/joy/yippy", map.get("url()"))
nova chamada: assertEquals("http://localhost:4567/sparkle/joy/yippy", map.get("url()"), "Era esperado valores iguais, mas  'http://localhost:4567/sparkle/joy/yippy' é diferente de " + result265 + " <map.get('url()')>")
chamada antiga: assertEquals("", map.get("contextPath()"))
nova chamada: assertEquals("", map.get("contextPath()"), "Era esperado valores iguais, mas  '' é diferente de " + result266 + " <map.get('contextPath()')>")
chamada antiga: assertEquals("/sparkle/joy/yippy", map.get("pathInfo()"))
nova chamada: assertEquals("/sparkle/joy/yippy", map.get("pathInfo()"), "Era esperado valores iguais, mas  '/sparkle/joy/yippy' é diferente de " + result267 + " <map.get('pathInfo()')>")
chamada antiga: assertEquals("food=hamberders&colour=red", map.get("queryString()"))
nova chamada: assertEquals("food=hamberders&colour=red", map.get("queryString()"), "Era esperado valores iguais, mas  'food=hamberders&colour=red' é diferente de " + result268 + " <map.get('queryString()')>")
chamada antiga: assertSame(Unirest.get(MockServer.GET).asString(), Unirest.get(MockServer.GET).asString())
nova chamada: assertSame(Unirest.get(MockServer.GET).asString(), Unirest.get(MockServer.GET).asString(), "Era esperado objetos iguais, mas " + result269 + " <Unirest.get(MockServer.GET).asString()> é diferente de " + result270 + " <Unirest.get(MockServer.GET).asString()>")
chamada antiga: assertNotSame(Unirest.get(MockServer.GET).asString(), Unirest.get(MockServer.GET).asObject(RequestCapture.class))
nova chamada: assertNotSame(Unirest.get(MockServer.GET).asString(), Unirest.get(MockServer.GET).asObject(RequestCapture.class), "Era esperado objetos diferentes, mas " + result271 + " <Unirest.get(MockServer.GET).asString()> é igual a " + result272 + " <Unirest.get(MockServer.GET).asObject(RequestCapture.class)>")
chamada antiga: assertEquals(2, MockServer.timesCalled)
nova chamada: assertEquals(2, MockServer.timesCalled, "Era esperado valores iguais, mas  2 é diferente de " + " MockServer.timesCalled")
chamada antiga: assertSame(Unirest.get(MockServer.GET).asString(), Unirest.get(MockServer.GET).asString())
nova chamada: assertSame(Unirest.get(MockServer.GET).asString(), Unirest.get(MockServer.GET).asString(), "Era esperado objetos iguais, mas " + result273 + " <Unirest.get(MockServer.GET).asString()> é diferente de " + result274 + " <Unirest.get(MockServer.GET).asString()>")
chamada antiga: assertEquals(3, MockServer.timesCalled)
nova chamada: assertEquals(3, MockServer.timesCalled, "Era esperado valores iguais, mas  3 é diferente de " + " MockServer.timesCalled")
chamada antiga: assertSame(Unirest.get(MockServer.GET).asString(), Unirest.get(MockServer.POST).asString())
nova chamada: assertSame(Unirest.get(MockServer.GET).asString(), Unirest.get(MockServer.POST).asString(), "Era esperado objetos iguais, mas " + result275 + " <Unirest.get(MockServer.GET).asString()> é diferente de " + result276 + " <Unirest.get(MockServer.POST).asString()>")
chamada antiga: assertEquals(1, MockServer.timesCalled)
nova chamada: assertEquals(1, MockServer.timesCalled, "Era esperado valores iguais, mas  1 é diferente de " + " MockServer.timesCalled")
chamada antiga: assertTrue(Unirest.config().getObjectMapper() instanceof JsonObjectMapper)
nova chamada: assertTrue(Unirest.config().getObjectMapper() instanceof JsonObjectMapper, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("bar", f.bar)
nova chamada: assertEquals("bar", f.bar, "Era esperado valores iguais, mas  'bar' é diferente de " + " f.bar")
chamada antiga: Assertions.assertEquals(200, i.getStatus())
nova chamada: assertEquals(200, i.getStatus(), "Era esperado valores iguais, mas  200 é diferente de " + result277 + " <i.getStatus()>")
chamada antiga: Assertions.assertEquals(null, i.getBody())
nova chamada: assertEquals(null, i.getBody(), "Era esperado valores iguais, mas  null é diferente de " + result278 + " <i.getBody()>")
chamada antiga: assertTrue(mapper.readWasCalled)
nova chamada: assertTrue(mapper.readWasCalled, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(mapper.writeWasCalled)
nova chamada: assertTrue(mapper.writeWasCalled, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNull(request.getBody())
nova chamada: assertNull(request.getBody(), "Era esperado nulo, mas " + result279 + " <request.getBody()> não é nulo")
chamada antiga: Assertions.assertTrue(request.getParsingError().isPresent())
nova chamada: assertTrue(request.getParsingError().isPresent(), "Era esperado verdadeiro, mas " + result280 + " <request.getParsingError().isPresent()> é falso")
chamada antiga: Assertions.assertEquals("kong.unirest.UnirestException: com.fasterxml.jackson.core.JsonParseException: Unrecognized token 'You': was expecting (JSON String, Number, Array, Object or token 'null', 'true' or 'false')\n" + " at [Source: (String)\"You did something bad\"; line: 1, column: 4]", request.getParsingError().get().getMessage())
nova chamada: assertEquals("kong.unirest.UnirestException: com.fasterxml.jackson.core.JsonParseException: Unrecognized token 'You': was expecting (JSON String, Number, Array, Object or token 'null', 'true' or 'false')\n" + " at [Source: (String)\"You did something bad\"; line: 1, column: 4]", request.getParsingError().get().getMessage(), "Era esperado valores iguais, mas  'kong.unirest.UnirestException: com.fasterxml.jackson.core.JsonParseException: Unrecognized token 'You': was expecting (JSON String, Number, Array, Object or token 'null', 'true' or 'false')\n' + ' at [Source: (String)\'You did something bad\'; line: 1, column: 4]' é diferente de " + result281 + " <request.getParsingError().get().getMessage()>")
chamada antiga: Assertions.assertEquals("You did something bad", request.getParsingError().get().getOriginalBody())
nova chamada: assertEquals("You did something bad", request.getParsingError().get().getOriginalBody(), "Era esperado valores iguais, mas  'You did something bad' é diferente de " + result282 + " <request.getParsingError().get().getOriginalBody()>")
chamada antiga: assertNull(request.getBody())
nova chamada: assertNull(request.getBody(), "Era esperado nulo, mas " + result283 + " <request.getBody()> não é nulo")
chamada antiga: Assertions.assertTrue(request.getParsingError().isPresent())
nova chamada: assertTrue(request.getParsingError().isPresent(), "Era esperado verdadeiro, mas " + result284 + " <request.getParsingError().isPresent()> é falso")
chamada antiga: Assertions.assertEquals("kong.unirest.UnirestException: com.fasterxml.jackson.core.JsonParseException: Unrecognized token 'You': was expecting (JSON String, Number, Array, Object or token 'null', 'true' or 'false')\n" + " at [Source: (String)\"You did something bad\"; line: 1, column: 4]", request.getParsingError().get().getMessage())
nova chamada: assertEquals("kong.unirest.UnirestException: com.fasterxml.jackson.core.JsonParseException: Unrecognized token 'You': was expecting (JSON String, Number, Array, Object or token 'null', 'true' or 'false')\n" + " at [Source: (String)\"You did something bad\"; line: 1, column: 4]", request.getParsingError().get().getMessage(), "Era esperado valores iguais, mas  'kong.unirest.UnirestException: com.fasterxml.jackson.core.JsonParseException: Unrecognized token 'You': was expecting (JSON String, Number, Array, Object or token 'null', 'true' or 'false')\n' + ' at [Source: (String)\'You did something bad\'; line: 1, column: 4]' é diferente de " + result285 + " <request.getParsingError().get().getMessage()>")
chamada antiga: Assertions.assertEquals("You did something bad", request.getParsingError().get().getOriginalBody())
nova chamada: assertEquals("You did something bad", request.getParsingError().get().getOriginalBody(), "Era esperado valores iguais, mas  'You did something bad' é diferente de " + result286 + " <request.getParsingError().get().getOriginalBody()>")
chamada antiga: assertNull(request.getBody())
nova chamada: assertNull(request.getBody(), "Era esperado nulo, mas " + result287 + " <request.getBody()> não é nulo")
chamada antiga: Assertions.assertTrue(request.getParsingError().isPresent())
nova chamada: assertTrue(request.getParsingError().isPresent(), "Era esperado verdadeiro, mas " + result288 + " <request.getParsingError().isPresent()> é falso")
chamada antiga: Assertions.assertEquals("kong.unirest.UnirestException: com.fasterxml.jackson.core.JsonParseException: Unrecognized token 'You': was expecting (JSON String, Number, Array, Object or token 'null', 'true' or 'false')\n" + " at [Source: (String)\"You did something bad\"; line: 1, column: 4]", request.getParsingError().get().getMessage())
nova chamada: assertEquals("kong.unirest.UnirestException: com.fasterxml.jackson.core.JsonParseException: Unrecognized token 'You': was expecting (JSON String, Number, Array, Object or token 'null', 'true' or 'false')\n" + " at [Source: (String)\"You did something bad\"; line: 1, column: 4]", request.getParsingError().get().getMessage(), "Era esperado valores iguais, mas  'kong.unirest.UnirestException: com.fasterxml.jackson.core.JsonParseException: Unrecognized token 'You': was expecting (JSON String, Number, Array, Object or token 'null', 'true' or 'false')\n' + ' at [Source: (String)\'You did something bad\'; line: 1, column: 4]' é diferente de " + result289 + " <request.getParsingError().get().getMessage()>")
chamada antiga: Assertions.assertEquals("You did something bad", request.getParsingError().get().getOriginalBody())
nova chamada: assertEquals("You did something bad", request.getParsingError().get().getOriginalBody(), "Era esperado valores iguais, mas  'You did something bad' é diferente de " + result290 + " <request.getParsingError().get().getOriginalBody()>")
chamada antiga: assertEquals(Arrays.asList(1, 2, 3), error.foo)
nova chamada: assertEquals(Arrays.asList(1, 2, 3), error.foo, "Era esperado valores iguais, mas " + result291 + " <Arrays.asList(1, 2, 3)> é diferente de " + " error.foo")
chamada antiga: assertEquals(test.toFile().getPath(), result.getPath())
nova chamada: assertEquals(test.toFile().getPath(), result.getPath(), "Era esperado valores iguais, mas " + result292 + " <test.toFile().getPath()> é diferente de " + result293 + " <result.getPath()>")
chamada antiga: assertEquals(test.toFile().getPath(), result.getPath())
nova chamada: assertEquals(test.toFile().getPath(), result.getPath(), "Era esperado valores iguais, mas " + result294 + " <test.toFile().getPath()> é diferente de " + result295 + " <result.getPath()>")
chamada antiga: assertTrue(com.google.common.io.Files.equal(f1, f2))
nova chamada: assertTrue(com.google.common.io.Files.equal(f1, f2), "Era esperado verdadeiro, mas " + result296 + " <com.google.common.io.Files.equal(f1, f2)> é falso")
chamada antiga: Assertions.assertTrue(f2.getParsingError().isPresent())
nova chamada: assertTrue(f2.getParsingError().isPresent(), "Era esperado verdadeiro, mas " + result297 + " <f2.getParsingError().isPresent()> é falso")
chamada antiga: assertTrue(f2.getParsingError().get().getCause().getCause() instanceof FileAlreadyExistsException)
nova chamada: assertTrue(f2.getParsingError().get().getCause().getCause() instanceof FileAlreadyExistsException, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(f1, f2)
nova chamada: assertEquals(f1, f2, "Era esperado valores iguais, mas  f1 é diferente de " + " f2")
chamada antiga: assertEquals(f1, f2)
nova chamada: assertEquals(f1, f2, "Era esperado valores iguais, mas  f1 é diferente de " + " f2")
chamada antiga: Assertions.assertEquals(mock, Unirest.get("http://localhost/getme").asEmpty())
nova chamada: assertEquals(mock, Unirest.get("http://localhost/getme").asEmpty(), "Era esperado valores iguais, mas  mock é diferente de " + result298 + " <Unirest.get('http://localhost/getme').asEmpty()>")
chamada antiga: assertTrue(ManagementFactory.getThreadMXBean().getThreadCount() < startingCount + 10)
nova chamada: assertTrue(ManagementFactory.getThreadMXBean().getThreadCount() < startingCount + 10, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("Tron", part.getValue())
nova chamada: assertEquals("Tron", part.getValue(), "Era esperado valores iguais, mas  'Tron' é diferente de " + result299 + " <part.getValue()>")
chamada antiga: assertNull(b.getField("Movie"))
nova chamada: assertNull(b.getField("Movie"), "Era esperado nulo, mas " + result300 + " <b.getField('Movie')> não é nulo")
chamada antiga: assertFalse(part.isFile())
nova chamada: assertFalse(part.isFile(), "Era esperado falso, mas " + result301 + " <part.isFile()> é verdadeiro ")
chamada antiga: assertEquals("band=Talking+Heads", part.toString())
nova chamada: assertEquals("band=Talking+Heads", part.toString(), "Era esperado valores iguais, mas  'band=Talking+Heads' é diferente de " + result302 + " <part.toString()>")
chamada antiga: assertEquals("Talking Heads", part.getValue())
nova chamada: assertEquals("Talking Heads", part.getValue(), "Era esperado valores iguais, mas  'Talking Heads' é diferente de " + result303 + " <part.getValue()>")
chamada antiga: assertEquals("application/x-www-form-urlencoded; charset=UTF-8", part.getContentType())
nova chamada: assertEquals("application/x-www-form-urlencoded; charset=UTF-8", part.getContentType(), "Era esperado valores iguais, mas  'application/x-www-form-urlencoded; charset=UTF-8' é diferente de " + result304 + " <part.getContentType()>")
chamada antiga: assertEquals(String.class, part.getPartType())
nova chamada: assertEquals(String.class, part.getPartType(), "Era esperado valores iguais, mas  String.class é diferente de " + result305 + " <part.getPartType()>")
chamada antiga: assertFalse(bytes.isFile())
nova chamada: assertFalse(bytes.isFile(), "Era esperado falso, mas " + result306 + " <bytes.isFile()> é verdadeiro ")
chamada antiga: assertEquals("[binary data length=0]", bytes.toString())
nova chamada: assertEquals("[binary data length=0]", bytes.toString(), "Era esperado valores iguais, mas  '[binary data length=0]' é diferente de " + result307 + " <bytes.toString()>")
chamada antiga: assertEquals("zombo.com", host.getHostName())
nova chamada: assertEquals("zombo.com", host.getHostName(), "Era esperado valores iguais, mas  'zombo.com' é diferente de " + result308 + " <host.getHostName()>")
chamada antiga: assertNull(host.getAddress())
nova chamada: assertNull(host.getAddress(), "Era esperado nulo, mas " + result309 + " <host.getAddress()> não é nulo")
chamada antiga: assertEquals(-1, host.getPort())
nova chamada: assertEquals(-1, host.getPort(), "Era esperado valores iguais, mas  -1 é diferente de " + result310 + " <host.getPort()>")
chamada antiga: assertEquals("http", host.getSchemeName())
nova chamada: assertEquals("http", host.getSchemeName(), "Era esperado valores iguais, mas  'http' é diferente de " + result311 + " <host.getSchemeName()>")
chamada antiga: assertEquals("zombo.com", host.getHostName())
nova chamada: assertEquals("zombo.com", host.getHostName(), "Era esperado valores iguais, mas  'zombo.com' é diferente de " + result312 + " <host.getHostName()>")
chamada antiga: assertNull(host.getAddress())
nova chamada: assertNull(host.getAddress(), "Era esperado nulo, mas " + result313 + " <host.getAddress()> não é nulo")
chamada antiga: assertEquals(8080, host.getPort())
nova chamada: assertEquals(8080, host.getPort(), "Era esperado valores iguais, mas  8080 é diferente de " + result314 + " <host.getPort()>")
chamada antiga: assertEquals("http", host.getSchemeName())
nova chamada: assertEquals("http", host.getSchemeName(), "Era esperado valores iguais, mas  'http' é diferente de " + result315 + " <host.getSchemeName()>")
chamada antiga: assertEquals("zombo.com", host.getHostName())
nova chamada: assertEquals("zombo.com", host.getHostName(), "Era esperado valores iguais, mas  'zombo.com' é diferente de " + result316 + " <host.getHostName()>")
chamada antiga: assertEquals("homestarrunner.com", host.getHostName())
nova chamada: assertEquals("homestarrunner.com", host.getHostName(), "Era esperado valores iguais, mas  'homestarrunner.com' é diferente de " + result317 + " <host.getHostName()>")
chamada antiga: assertEquals(InetAddress.getByName("127.0.0.1"), host.getAddress())
nova chamada: assertEquals(InetAddress.getByName("127.0.0.1"), host.getAddress(), "Era esperado valores iguais, mas " + result318 + " <InetAddress.getByName('127.0.0.1')> é diferente de " + result319 + " <host.getAddress()>")
chamada antiga: assertNull(host)
nova chamada: assertNull(host, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertTrue(fooCast.isPresent())
nova chamada: assertTrue(fooCast.isPresent(), "Era esperado verdadeiro, mas " + result320 + " <fooCast.isPresent()> é falso")
chamada antiga: assertEquals(foo, fooCast.get())
nova chamada: assertEquals(foo, fooCast.get(), "Era esperado valores iguais, mas  foo é diferente de " + result321 + " <fooCast.get()>")
chamada antiga: assertFalse(Util.tryCast("foo", Foo.class).isPresent())
nova chamada: assertFalse(Util.tryCast("foo", Foo.class).isPresent(), "Era esperado falso, mas " + result322 + " <Util.tryCast('foo', Foo.class).isPresent()> é verdadeiro ")
chamada antiga: assertFalse(Util.tryCast(null, Foo.class).isPresent())
nova chamada: assertFalse(Util.tryCast(null, Foo.class).isPresent(), "Era esperado falso, mas " + result323 + " <Util.tryCast(null, Foo.class).isPresent()> é verdadeiro ")
chamada antiga: assertTrue(Util.tryCast(new Bar(), Foo.class).isPresent())
nova chamada: assertTrue(Util.tryCast(new Bar(), Foo.class).isPresent(), "Era esperado verdadeiro, mas " + result324 + " <Util.tryCast(new Bar(), Foo.class).isPresent()> é falso")
chamada antiga: assertEquals(88, manager.getMaxTotal())
nova chamada: assertEquals(88, manager.getMaxTotal(), "Era esperado valores iguais, mas  88 é diferente de " + result325 + " <manager.getMaxTotal()>")
chamada antiga: assertEquals(42, manager.getDefaultMaxPerRoute())
nova chamada: assertEquals(42, manager.getDefaultMaxPerRoute(), "Era esperado valores iguais, mas  42 é diferente de " + result326 + " <manager.getDefaultMaxPerRoute()>")
chamada antiga: assertEquals(apache.toString(), unirest.toString())
nova chamada: assertEquals(apache.toString(), unirest.toString(), "Era esperado valores iguais, mas " + result327 + " <apache.toString()> é diferente de " + result328 + " <unirest.toString()>")
chamada antiga: assertEquals(apache.toString(), org.apache.http.entity.ContentType.parse(unirest.toString()).toString())
nova chamada: assertEquals(apache.toString(), org.apache.http.entity.ContentType.parse(unirest.toString()).toString(), "Era esperado valores iguais, mas " + result329 + " <apache.toString()> é diferente de " + result330 + " <org.apache.http.entity.ContentType.parse(unirest.toString()).toString()>")
chamada antiga: assertEquals(p, o)
nova chamada: assertEquals(p, o, "Era esperado valores iguais, mas  p é diferente de " + " o")
chamada antiga: assertEquals(q, w)
nova chamada: assertEquals(q, w, "Era esperado valores iguais, mas  q é diferente de " + " w")
chamada antiga: assertNotEquals(q, e)
nova chamada: assertNotEquals(q, e, "Era esperado valores diferentes, mas  q é igual a " + " e")
chamada antiga: assertEquals(q, w)
nova chamada: assertEquals(q, w, "Era esperado valores iguais, mas  q é diferente de " + " w")
chamada antiga: assertNotEquals(q, e)
nova chamada: assertNotEquals(q, e, "Era esperado valores diferentes, mas  q é igual a " + " e")
chamada antiga: assertEquals("http://somwhere/fruit", new Path("/fruit", "http://somwhere").toString())
nova chamada: assertEquals("http://somwhere/fruit", new Path("/fruit", "http://somwhere").toString(), "Era esperado valores iguais, mas  'http://somwhere/fruit' é diferente de " + result331 + " <new Path('/fruit', 'http://somwhere').toString()>")
chamada antiga: assertEquals("http://somwhere/fruit", new Path("http://somwhere/fruit", "http://elsewhere/rocks").toString())
nova chamada: assertEquals("http://somwhere/fruit", new Path("http://somwhere/fruit", "http://elsewhere/rocks").toString(), "Era esperado valores iguais, mas  'http://somwhere/fruit' é diferente de " + result332 + " <new Path('http://somwhere/fruit', 'http://elsewhere/rocks').toString()>")
chamada antiga: assertSame(cache.wrap(client).request(new HttpRequestNoBody(config, GET, "/"), null, Object.class), cache.wrap(client).request(new HttpRequestNoBody(config, GET, "/"), null, Object.class))
nova chamada: assertSame(cache.wrap(client).request(new HttpRequestNoBody(config, GET, "/"), null, Object.class), cache.wrap(client).request(new HttpRequestNoBody(config, GET, "/"), null, Object.class), "Era esperado objetos iguais, mas " + result333 + " <cache.wrap(client).request(new HttpRequestNoBody(config, GET, '/'), null, Object.class)> é diferente de " + result334 + " <cache.wrap(client).request(new HttpRequestNoBody(config, GET, '/'), null, Object.class)>")
chamada antiga: assertEquals(1, client.invokes)
nova chamada: assertEquals(1, client.invokes, "Era esperado valores iguais, mas  1 é diferente de " + " client.invokes")
chamada antiga: assertSame(cache.wrapAsync(client).request(new HttpRequestNoBody(config, GET, "/"), null, null, Empty.class), cache.wrapAsync(client).request(new HttpRequestNoBody(config, GET, "/"), null, null, Empty.class))
nova chamada: assertSame(cache.wrapAsync(client).request(new HttpRequestNoBody(config, GET, "/"), null, null, Empty.class), cache.wrapAsync(client).request(new HttpRequestNoBody(config, GET, "/"), null, null, Empty.class), "Era esperado objetos iguais, mas " + result335 + " <cache.wrapAsync(client).request(new HttpRequestNoBody(config, GET, '/'), null, null, Empty.class)> é diferente de " + result336 + " <cache.wrapAsync(client).request(new HttpRequestNoBody(config, GET, '/'), null, null, Empty.class)>")
chamada antiga: assertEquals(1, client.invokes)
nova chamada: assertEquals(1, client.invokes, "Era esperado valores iguais, mas  1 é diferente de " + " client.invokes")
chamada antiga: assertNotSame(cache.wrap(client).request(new HttpRequestNoBody(config, GET, "/"), null, Object.class), cache.wrapAsync(client).request(new HttpRequestNoBody(config, GET, "/"), null, null, Object.class))
nova chamada: assertNotSame(cache.wrap(client).request(new HttpRequestNoBody(config, GET, "/"), null, Object.class), cache.wrapAsync(client).request(new HttpRequestNoBody(config, GET, "/"), null, null, Object.class), "Era esperado objetos diferentes, mas " + result337 + " <cache.wrap(client).request(new HttpRequestNoBody(config, GET, '/'), null, Object.class)> é igual a " + result338 + " <cache.wrapAsync(client).request(new HttpRequestNoBody(config, GET, '/'), null, null, Object.class)>")
chamada antiga: assertEquals(2, client.invokes)
nova chamada: assertEquals(2, client.invokes, "Era esperado valores iguais, mas  2 é diferente de " + " client.invokes")
chamada antiga: assertNotSame(cache.wrap(client).request(new HttpRequestNoBody(config, GET, "/"), r -> new StringResponse(new TestRawResponse(config), ""), String.class), cache.wrap(client).request(new HttpRequestNoBody(config, GET, "/"), r -> new BasicResponse(new TestRawResponse(config), ""), Empty.class))
nova chamada: assertNotSame(cache.wrap(client).request(new HttpRequestNoBody(config, GET, "/"), r -> new StringResponse(new TestRawResponse(config), ""), String.class), cache.wrap(client).request(new HttpRequestNoBody(config, GET, "/"), r -> new BasicResponse(new TestRawResponse(config), ""), Empty.class), "Era esperado objetos diferentes, mas " + result339 + " <cache.wrap(client).request(new HttpRequestNoBody(config, GET, '/'), r -> new StringResponse(new TestRawResponse(config), ''), String.class)> é igual a " + result340 + " <cache.wrap(client).request(new HttpRequestNoBody(config, GET, '/'), r -> new BasicResponse(new TestRawResponse(config), ''), Empty.class)>")
chamada antiga: assertEquals(2, client.invokes)
nova chamada: assertEquals(2, client.invokes, "Era esperado valores iguais, mas  2 é diferente de " + " client.invokes")
chamada antiga: assertFalse(body.isFile())
nova chamada: assertFalse(body.isFile(), "Era esperado falso, mas " + result341 + " <body.isFile()> é verdadeiro ")
chamada antiga: assertEquals("Hi Mom", body.toString())
nova chamada: assertEquals("Hi Mom", body.toString(), "Era esperado valores iguais, mas  'Hi Mom' é diferente de " + result342 + " <body.toString()>")
chamada antiga: assertEquals("Hi Mom", body.getValue())
nova chamada: assertEquals("Hi Mom", body.getValue(), "Era esperado valores iguais, mas  'Hi Mom' é diferente de " + result343 + " <body.getValue()>")
chamada antiga: assertEquals(String.class, body.getPartType())
nova chamada: assertEquals(String.class, body.getPartType(), "Era esperado valores iguais, mas  String.class é diferente de " + result344 + " <body.getPartType()>")
chamada antiga: assertEquals(Config.DEFAULT_CONNECT_TIMEOUT, config.getConnectionTimeout())
nova chamada: assertEquals(Config.DEFAULT_CONNECT_TIMEOUT, config.getConnectionTimeout(), "Era esperado valores iguais, mas  Config.DEFAULT_CONNECT_TIMEOUT é diferente de " + result345 + " <config.getConnectionTimeout()>")
chamada antiga: assertEquals(Config.DEFAULT_SOCKET_TIMEOUT, config.getSocketTimeout())
nova chamada: assertEquals(Config.DEFAULT_SOCKET_TIMEOUT, config.getSocketTimeout(), "Era esperado valores iguais, mas  Config.DEFAULT_SOCKET_TIMEOUT é diferente de " + result346 + " <config.getSocketTimeout()>")
chamada antiga: assertEquals(Config.DEFAULT_MAX_CONNECTIONS, config.getMaxConnections())
nova chamada: assertEquals(Config.DEFAULT_MAX_CONNECTIONS, config.getMaxConnections(), "Era esperado valores iguais, mas  Config.DEFAULT_MAX_CONNECTIONS é diferente de " + result347 + " <config.getMaxConnections()>")
chamada antiga: assertEquals(Config.DEFAULT_MAX_PER_ROUTE, config.getMaxPerRoutes())
nova chamada: assertEquals(Config.DEFAULT_MAX_PER_ROUTE, config.getMaxPerRoutes(), "Era esperado valores iguais, mas  Config.DEFAULT_MAX_PER_ROUTE é diferente de " + result348 + " <config.getMaxPerRoutes()>")
chamada antiga: assertEquals("Http Clients are already built in order to build a new config execute Unirest.config().reset() " + "before changing settings. \n" + "This should be done rarely.", ex.getMessage())
nova chamada: assertEquals("Http Clients are already built in order to build a new config execute Unirest.config().reset() " + "before changing settings. \n" + "This should be done rarely.", ex.getMessage(), "Era esperado valores iguais, mas  'Http Clients are already built in order to build a new config execute Unirest.config().reset() ' + 'before changing settings. \n' + 'This should be done rarely.' é diferente de " + result349 + " <ex.getMessage()>")
chamada antiga: assertSame(c, config.getAsyncClient().getClient())
nova chamada: assertSame(c, config.getAsyncClient().getClient(), "Era esperado objetos iguais, mas  c é diferente de " + result350 + " <config.getAsyncClient().getClient()>")
chamada antiga: assertSame(c, config.getAsyncClient().getClient())
nova chamada: assertSame(c, config.getAsyncClient().getClient(), "Era esperado objetos iguais, mas  c é diferente de " + result351 + " <config.getAsyncClient().getClient()>")
chamada antiga: assertSame(config.getAsyncClient(), config.getAsyncClient())
nova chamada: assertSame(config.getAsyncClient(), config.getAsyncClient(), "Era esperado objetos iguais, mas " + result352 + " <config.getAsyncClient()> é diferente de " + result353 + " <config.getAsyncClient()>")
chamada antiga: assertNotSame(c, config.getAsyncClient())
nova chamada: assertNotSame(c, config.getAsyncClient(), "Era esperado objetos diferentes, mas  c é igual a " + result354 + " <config.getAsyncClient()>")
chamada antiga: assertEquals(-1, config.getTTL())
nova chamada: assertEquals(-1, config.getTTL(), "Era esperado valores iguais, mas  -1 é diferente de " + result355 + " <config.getTTL()>")
chamada antiga: assertEquals(42, config.connectionTTL(42, TimeUnit.MILLISECONDS).getTTL())
nova chamada: assertEquals(42, config.connectionTTL(42, TimeUnit.MILLISECONDS).getTTL(), "Era esperado valores iguais, mas  42 é diferente de " + result356 + " <config.connectionTTL(42, TimeUnit.MILLISECONDS).getTTL()>")
chamada antiga: assertEquals(2520000, config.connectionTTL(42, TimeUnit.MINUTES).getTTL())
nova chamada: assertEquals(2520000, config.connectionTTL(42, TimeUnit.MINUTES).getTTL(), "Era esperado valores iguais, mas  2520000 é diferente de " + result357 + " <config.connectionTTL(42, TimeUnit.MINUTES).getTTL()>")
chamada antiga: assertEquals(43, config.connectionTTL(Duration.ofMillis(43)).getTTL())
nova chamada: assertEquals(43, config.connectionTTL(Duration.ofMillis(43)).getTTL(), "Era esperado valores iguais, mas  43 é diferente de " + result358 + " <config.connectionTTL(Duration.ofMillis(43)).getTTL()>")
chamada antiga: assertEquals(2580000, config.connectionTTL(Duration.ofMinutes(43)).getTTL())
nova chamada: assertEquals(2580000, config.connectionTTL(Duration.ofMinutes(43)).getTTL(), "Era esperado valores iguais, mas  2580000 é diferente de " + result359 + " <config.connectionTTL(Duration.ofMinutes(43)).getTTL()>")
chamada antiga: assertEquals("java.io.IOException 1\n" + "java.lang.RuntimeException 2\n" + "java.io.IOException 4\n" + "java.lang.RuntimeException 5", ex.getMessage())
nova chamada: assertEquals("java.io.IOException 1\n" + "java.lang.RuntimeException 2\n" + "java.io.IOException 4\n" + "java.lang.RuntimeException 5", ex.getMessage(), "Era esperado valores iguais, mas  'java.io.IOException 1\n' + 'java.lang.RuntimeException 2\n' + 'java.io.IOException 4\n' + 'java.lang.RuntimeException 5' é diferente de " + result360 + " <ex.getMessage()>")
chamada antiga: assertEquals("Attempted to get a new async client but it was not started. Please ensure it is", ex.getMessage())
nova chamada: assertEquals("Attempted to get a new async client but it was not started. Please ensure it is", ex.getMessage(), "Era esperado valores iguais, mas  'Attempted to get a new async client but it was not started. Please ensure it is' é diferente de " + result361 + " <ex.getMessage()>")
chamada antiga: assertSame(c, config.getAsyncClient().getClient())
nova chamada: assertSame(c, config.getAsyncClient().getClient(), "Era esperado objetos iguais, mas  c é diferente de " + result362 + " <config.getAsyncClient().getClient()>")
chamada antiga: assertSame(cli, config.getClient())
nova chamada: assertSame(cli, config.getClient(), "Era esperado objetos iguais, mas  cli é diferente de " + result363 + " <config.getClient()>")
chamada antiga: assertFalse(config.shouldAddShutdownHook())
nova chamada: assertFalse(config.shouldAddShutdownHook(), "Era esperado falso, mas " + result364 + " <config.shouldAddShutdownHook()> é verdadeiro ")
chamada antiga: assertTrue(config.shouldAddShutdownHook())
nova chamada: assertTrue(config.shouldAddShutdownHook(), "Era esperado verdadeiro, mas " + result365 + " <config.shouldAddShutdownHook()> é falso")
chamada antiga: assertTrue(config.isRequestCompressionOn())
nova chamada: assertTrue(config.isRequestCompressionOn(), "Era esperado verdadeiro, mas " + result366 + " <config.isRequestCompressionOn()> é falso")
chamada antiga: assertFalse(config.isRequestCompressionOn())
nova chamada: assertFalse(config.isRequestCompressionOn(), "Era esperado falso, mas " + result367 + " <config.isRequestCompressionOn()> é verdadeiro ")
chamada antiga: assertTrue(config.isAutomaticRetries())
nova chamada: assertTrue(config.isAutomaticRetries(), "Era esperado verdadeiro, mas " + result368 + " <config.isAutomaticRetries()> é falso")
chamada antiga: assertFalse(config.isAutomaticRetries())
nova chamada: assertFalse(config.isAutomaticRetries(), "Era esperado falso, mas " + result369 + " <config.isAutomaticRetries()> é verdadeiro ")
chamada antiga: assertSame(cli, config.getAsyncClient())
nova chamada: assertSame(cli, config.getAsyncClient(), "Era esperado objetos iguais, mas  cli é diferente de " + result370 + " <config.getAsyncClient()>")
chamada antiga: assertEquals("You may only configure a SSLContext OR a Keystore, but not both", ex.getMessage())
nova chamada: assertEquals("You may only configure a SSLContext OR a Keystore, but not both", ex.getMessage(), "Era esperado valores iguais, mas  'You may only configure a SSLContext OR a Keystore, but not both' é diferente de " + result371 + " <ex.getMessage()>")
chamada antiga: assertEquals("You may only configure a SSLContext OR a Keystore, but not both", ex1.getMessage())
nova chamada: assertEquals("You may only configure a SSLContext OR a Keystore, but not both", ex1.getMessage(), "Era esperado valores iguais, mas  'You may only configure a SSLContext OR a Keystore, but not both' é diferente de " + result372 + " <ex1.getMessage()>")
chamada antiga: assertEquals("You may only configure a SSLContext OR a Keystore, but not both", ex.getMessage())
nova chamada: assertEquals("You may only configure a SSLContext OR a Keystore, but not both", ex.getMessage(), "Era esperado valores iguais, mas  'You may only configure a SSLContext OR a Keystore, but not both' é diferente de " + result373 + " <ex.getMessage()>")
chamada antiga: assertFalse(config.isRunning())
nova chamada: assertFalse(config.isRunning(), "Era esperado falso, mas " + result374 + " <config.isRunning()> é verdadeiro ")
chamada antiga: assertTrue(config.isRunning())
nova chamada: assertTrue(config.isRunning(), "Era esperado verdadeiro, mas " + result375 + " <config.isRunning()> é falso")
chamada antiga: assertFalse(config.isRunning())
nova chamada: assertFalse(config.isRunning(), "Era esperado falso, mas " + result376 + " <config.isRunning()> é verdadeiro ")
chamada antiga: assertTrue(config.isRunning())
nova chamada: assertTrue(config.isRunning(), "Era esperado verdadeiro, mas " + result377 + " <config.isRunning()> é falso")
chamada antiga: assertEquals(host, config.getProxy().getHost())
nova chamada: assertEquals(host, config.getProxy().getHost(), "Era esperado valores iguais, mas  host é diferente de " + result378 + " <config.getProxy().getHost()>")
chamada antiga: assertEquals(port, config.getProxy().getPort())
nova chamada: assertEquals(port, config.getProxy().getPort(), "Era esperado valores iguais, mas  port é diferente de " + result379 + " <config.getProxy().getPort()>")
chamada antiga: assertEquals(username, config.getProxy().getUsername())
nova chamada: assertEquals(username, config.getProxy().getUsername(), "Era esperado valores iguais, mas  username é diferente de " + result380 + " <config.getProxy().getUsername()>")
chamada antiga: assertEquals(password, config.getProxy().getPassword())
nova chamada: assertEquals(password, config.getProxy().getPassword(), "Era esperado valores iguais, mas  password é diferente de " + result381 + " <config.getProxy().getPassword()>")
chamada antiga: assertTrue(part.isFile())
nova chamada: assertTrue(part.isFile(), "Era esperado verdadeiro, mas " + result382 + " <part.isFile()> é falso")
chamada antiga: assertEquals("uploadfile=foo.xml", part.toString())
nova chamada: assertEquals("uploadfile=foo.xml", part.toString(), "Era esperado valores iguais, mas  'uploadfile=foo.xml' é diferente de " + result383 + " <part.toString()>")
chamada antiga: assertTrue(part.isFile())
nova chamada: assertTrue(part.isFile(), "Era esperado verdadeiro, mas " + result384 + " <part.isFile()> é falso")
chamada antiga: assertEquals("uploadFile=foo.xml", part.toString())
nova chamada: assertEquals("uploadFile=foo.xml", part.toString(), "Era esperado valores iguais, mas  'uploadFile=foo.xml' é diferente de " + result385 + " <part.toString()>")
chamada antiga: assertEquals("pointer cannot be null", ex.getMessage())
nova chamada: assertEquals("pointer cannot be null", ex.getMessage(), "Era esperado valores iguais, mas  'pointer cannot be null' é diferente de " + result386 + " <ex.getMessage()>")
chamada antiga: assertEquals("a JSON pointer should start with '/' or '#/'", ex.getMessage())
nova chamada: assertEquals("a JSON pointer should start with '/' or '#/'", ex.getMessage(), "Era esperado valores iguais, mas  'a JSON pointer should start with '/' or '#/'' é diferente de " + result387 + " <ex.getMessage()>")
chamada antiga: assertEquals("Path Segment Missing: shwoop", ex.getMessage())
nova chamada: assertEquals("Path Segment Missing: shwoop", ex.getMessage(), "Era esperado valores iguais, mas  'Path Segment Missing: shwoop' é diferente de " + result388 + " <ex.getMessage()>")
chamada antiga: assertEquals("index 5 is out of bounds - the array has 2 elements", ex.getMessage())
nova chamada: assertEquals("index 5 is out of bounds - the array has 2 elements", ex.getMessage(), "Era esperado valores iguais, mas  'index 5 is out of bounds - the array has 2 elements' é diferente de " + result389 + " <ex.getMessage()>")
chamada antiga: assertEquals("bar is not an array index", ex.getMessage())
nova chamada: assertEquals("bar is not an array index", ex.getMessage(), "Era esperado valores iguais, mas  'bar is not an array index' é diferente de " + result390 + " <ex.getMessage()>")
chamada antiga: assertEquals("pointer cannot be null", ex.getMessage())
nova chamada: assertEquals("pointer cannot be null", ex.getMessage(), "Era esperado valores iguais, mas  'pointer cannot be null' é diferente de " + result391 + " <ex.getMessage()>")
chamada antiga: assertEquals("/foo/g~0h/baz", new JSONPointer("/foo/g~h/baz").toString())
nova chamada: assertEquals("/foo/g~0h/baz", new JSONPointer("/foo/g~h/baz").toString(), "Era esperado valores iguais, mas  '/foo/g~0h/baz' é diferente de " + result392 + " <new JSONPointer('/foo/g~h/baz').toString()>")
chamada antiga: assertEquals("/foo/g~0h/baz", JSONPointer.compile("/foo/g~h/baz").toString())
nova chamada: assertEquals("/foo/g~0h/baz", JSONPointer.compile("/foo/g~h/baz").toString(), "Era esperado valores iguais, mas  '/foo/g~0h/baz' é diferente de " + result393 + " <JSONPointer.compile('/foo/g~h/baz').toString()>")
chamada antiga: assertEquals("#/foo/g%7Eh/baz", new JSONPointer("/foo/g~h/baz").toURIFragment())
nova chamada: assertEquals("#/foo/g%7Eh/baz", new JSONPointer("/foo/g~h/baz").toURIFragment(), "Era esperado valores iguais, mas  '#/foo/g%7Eh/baz' é diferente de " + result394 + " <new JSONPointer('/foo/g~h/baz').toURIFragment()>")
chamada antiga: assertNull(obj.query("/derpa"))
nova chamada: assertNull(obj.query("/derpa"), "Era esperado nulo, mas " + result395 + " <obj.query('/derpa')> não é nulo")
chamada antiga: assertEquals("bar", obj.query("/foo/0").toString())
nova chamada: assertEquals("bar", obj.query("/foo/0").toString(), "Era esperado valores iguais, mas  'bar' é diferente de " + result396 + " <obj.query('/foo/0').toString()>")
chamada antiga: assertEquals(0, obj.query("/"))
nova chamada: assertEquals(0, obj.query("/"), "Era esperado valores iguais, mas  0 é diferente de " + result397 + " <obj.query('/')>")
chamada antiga: assertEquals(1, obj.query("/a~1b"))
nova chamada: assertEquals(1, obj.query("/a~1b"), "Era esperado valores iguais, mas  1 é diferente de " + result398 + " <obj.query('/a~1b')>")
chamada antiga: assertEquals(2, obj.query("/c%d"))
nova chamada: assertEquals(2, obj.query("/c%d"), "Era esperado valores iguais, mas  2 é diferente de " + result399 + " <obj.query('/c%d')>")
chamada antiga: assertEquals(3, obj.query("/e^f"))
nova chamada: assertEquals(3, obj.query("/e^f"), "Era esperado valores iguais, mas  3 é diferente de " + result400 + " <obj.query('/e^f')>")
chamada antiga: assertEquals(4, obj.query("/g|h"))
nova chamada: assertEquals(4, obj.query("/g|h"), "Era esperado valores iguais, mas  4 é diferente de " + result401 + " <obj.query('/g|h')>")
chamada antiga: assertEquals(5, obj.query("/i\\j"))
nova chamada: assertEquals(5, obj.query("/i\\j"), "Era esperado valores iguais, mas  5 é diferente de " + result402 + " <obj.query('/i\\j')>")
chamada antiga: assertEquals(6, obj.query("/k\"l"))
nova chamada: assertEquals(6, obj.query("/k\"l"), "Era esperado valores iguais, mas  6 é diferente de " + result403 + " <obj.query('/k\'l')>")
chamada antiga: assertEquals(7, obj.query("/ "))
nova chamada: assertEquals(7, obj.query("/ "), "Era esperado valores iguais, mas  7 é diferente de " + result404 + " <obj.query('/ ')>")
chamada antiga: assertEquals(8, obj.query("/m~0n"))
nova chamada: assertEquals(8, obj.query("/m~0n"), "Era esperado valores iguais, mas  8 é diferente de " + result405 + " <obj.query('/m~0n')>")
chamada antiga: assertEquals(true, obj.query("/cucu/0/banana/pants"))
nova chamada: assertEquals(true, obj.query("/cucu/0/banana/pants"), "Era esperado valores iguais, mas  true é diferente de " + result406 + " <obj.query('/cucu/0/banana/pants')>")
chamada antiga: assertEquals(new JSONPointer("/foo/4/n~0t/bar/1").toString(), pointer.toString())
nova chamada: assertEquals(new JSONPointer("/foo/4/n~0t/bar/1").toString(), pointer.toString(), "Era esperado valores iguais, mas " + result407 + " <new JSONPointer('/foo/4/n~0t/bar/1').toString()> é diferente de " + result408 + " <pointer.toString()>")
chamada antiga: assertEquals(true, o.optBoolean("aBoolean"))
nova chamada: assertEquals(true, o.optBoolean("aBoolean"), "Era esperado valores iguais, mas  true é diferente de " + result409 + " <o.optBoolean('aBoolean')>")
chamada antiga: assertEquals("Wakk Wakka", o.optString("aSillyString"))
nova chamada: assertEquals("Wakk Wakka", o.optString("aSillyString"), "Era esperado valores iguais, mas  'Wakk Wakka' é diferente de " + result410 + " <o.optString('aSillyString')>")
chamada antiga: assertEquals(42, o.optNumber("aNumber"))
nova chamada: assertEquals(42, o.optNumber("aNumber"), "Era esperado valores iguais, mas  42 é diferente de " + result411 + " <o.optNumber('aNumber')>")
chamada antiga: assertNotNull(o.optJSONObject("aSub"))
nova chamada: assertNotNull(o.optJSONObject("aSub"), "Era esperado não nulo, mas " + result412 + " <o.optJSONObject('aSub')> é nulo")
chamada antiga: assertTrue(o.isEmpty())
nova chamada: assertTrue(o.isEmpty(), "Era esperado verdadeiro, mas " + result413 + " <o.isEmpty()> é falso")
chamada antiga: assertFalse(o.isEmpty())
nova chamada: assertFalse(o.isEmpty(), "Era esperado falso, mas " + result414 + " <o.isEmpty()> é verdadeiro ")
chamada antiga: assertTrue(o.isNull("foo"))
nova chamada: assertTrue(o.isNull("foo"), "Era esperado verdadeiro, mas " + result415 + " <o.isNull('foo')> é falso")
chamada antiga: assertTrue(o.isNull("foo"))
nova chamada: assertTrue(o.isNull("foo"), "Era esperado verdadeiro, mas " + result416 + " <o.isNull('foo')> é falso")
chamada antiga: assertFalse(o.isNull("foo"))
nova chamada: assertFalse(o.isNull("foo"), "Era esperado falso, mas " + result417 + " <o.isNull('foo')> é verdadeiro ")
chamada antiga: assertEquals("Invalid JSON", ex.getMessage())
nova chamada: assertEquals("Invalid JSON", ex.getMessage(), "Era esperado valores iguais, mas  'Invalid JSON' é diferente de " + result418 + " <ex.getMessage()>")
chamada antiga: assertTrue(obj.has("foo"))
nova chamada: assertTrue(obj.has("foo"), "Era esperado verdadeiro, mas " + result419 + " <obj.has('foo')> é falso")
chamada antiga: assertEquals(1, obj.length())
nova chamada: assertEquals(1, obj.length(), "Era esperado valores iguais, mas  1 é diferente de " + result420 + " <obj.length()>")
chamada antiga: assertEquals(42, obj.getJSONObject("foo").getInt("baz"))
nova chamada: assertEquals(42, obj.getJSONObject("foo").getInt("baz"), "Era esperado valores iguais, mas  42 é diferente de " + result421 + " <obj.getJSONObject('foo').getInt('baz')>")
chamada antiga: assertEquals("{\"key1\":\"value\",\"key2\":null}", obj.toString())
nova chamada: assertEquals("{\"key1\":\"value\",\"key2\":null}", obj.toString(), "Era esperado valores iguais, mas  '{\'key1\':\'value\',\'key2\':null}' é diferente de " + result422 + " <obj.toString()>")
chamada antiga: assertEquals("{\"status\":\"OK\",\"message\":\"hive_1597818501335\"}", jsonObject.toString())
nova chamada: assertEquals("{\"status\":\"OK\",\"message\":\"hive_1597818501335\"}", jsonObject.toString(), "Era esperado valores iguais, mas  '{\'status\':\'OK\',\'message\':\'hive_1597818501335\'}' é diferente de " + result423 + " <jsonObject.toString()>")
chamada antiga: assertEquals("{\n" + "  \"key1\": \"value\",\n" + "  \"key2\": null\n" + "}", obj.toString(3))
nova chamada: assertEquals("{\n" + "  \"key1\": \"value\",\n" + "  \"key2\": null\n" + "}", obj.toString(3), "Era esperado valores iguais, mas  '{\n' + '  \'key1\': \'value\',\n' + '  \'key2\': null\n' + '}' é diferente de " + result424 + " <obj.toString(3)>")
chamada antiga: assertEquals(Long.MAX_VALUE, obj.getLong("key"))
nova chamada: assertEquals(Long.MAX_VALUE, obj.getLong("key"), "Era esperado valores iguais, mas  Long.MAX_VALUE é diferente de " + result425 + " <obj.getLong('key')>")
chamada antiga: assertEquals(Long.MAX_VALUE, obj.optLong("key"))
nova chamada: assertEquals(Long.MAX_VALUE, obj.optLong("key"), "Era esperado valores iguais, mas  Long.MAX_VALUE é diferente de " + result426 + " <obj.optLong('key')>")
chamada antiga: assertEquals(66L, obj.optLong("boo", 66))
nova chamada: assertEquals(66L, obj.optLong("boo", 66), "Era esperado valores iguais, mas  66L é diferente de " + result427 + " <obj.optLong('boo', 66)>")
chamada antiga: assertEquals(0L, obj.optLong("boo"))
nova chamada: assertEquals(0L, obj.optLong("boo"), "Era esperado valores iguais, mas  0L é diferente de " + result428 + " <obj.optLong('boo')>")
chamada antiga: assertTrue(obj.getBoolean("key"))
nova chamada: assertTrue(obj.getBoolean("key"), "Era esperado verdadeiro, mas " + result429 + " <obj.getBoolean('key')> é falso")
chamada antiga: assertTrue(obj.optBoolean("key"))
nova chamada: assertTrue(obj.optBoolean("key"), "Era esperado verdadeiro, mas " + result430 + " <obj.optBoolean('key')> é falso")
chamada antiga: assertTrue(obj.optBoolean("boo", true))
nova chamada: assertTrue(obj.optBoolean("boo", true), "Era esperado verdadeiro, mas " + result431 + " <obj.optBoolean('boo', true)> é falso")
chamada antiga: assertFalse(obj.optBoolean("boo"))
nova chamada: assertFalse(obj.optBoolean("boo"), "Era esperado falso, mas " + result432 + " <obj.optBoolean('boo')> é verdadeiro ")
chamada antiga: assertEquals(33, obj.getInt("key"))
nova chamada: assertEquals(33, obj.getInt("key"), "Era esperado valores iguais, mas  33 é diferente de " + result433 + " <obj.getInt('key')>")
chamada antiga: assertEquals(33, obj.optInt("key"))
nova chamada: assertEquals(33, obj.optInt("key"), "Era esperado valores iguais, mas  33 é diferente de " + result434 + " <obj.optInt('key')>")
chamada antiga: assertEquals(66, obj.optInt("boo", 66))
nova chamada: assertEquals(66, obj.optInt("boo", 66), "Era esperado valores iguais, mas  66 é diferente de " + result435 + " <obj.optInt('boo', 66)>")
chamada antiga: assertEquals(0, obj.optInt("boo"))
nova chamada: assertEquals(0, obj.optInt("boo"), "Era esperado valores iguais, mas  0 é diferente de " + result436 + " <obj.optInt('boo')>")
chamada antiga: assertEquals(tt, obj.getNumber("key"))
nova chamada: assertEquals(tt, obj.getNumber("key"), "Era esperado valores iguais, mas  tt é diferente de " + result437 + " <obj.getNumber('key')>")
chamada antiga: assertEquals(tt, obj.optNumber("key"))
nova chamada: assertEquals(tt, obj.optNumber("key"), "Era esperado valores iguais, mas  tt é diferente de " + result438 + " <obj.optNumber('key')>")
chamada antiga: assertEquals(66, obj.optNumber("boo", 66))
nova chamada: assertEquals(66, obj.optNumber("boo", 66), "Era esperado valores iguais, mas  66 é diferente de " + result439 + " <obj.optNumber('boo', 66)>")
chamada antiga: assertEquals(0, obj.optNumber("boo"))
nova chamada: assertEquals(0, obj.optNumber("boo"), "Era esperado valores iguais, mas  0 é diferente de " + result440 + " <obj.optNumber('boo')>")
chamada antiga: assertEquals(BigInteger.valueOf(33), obj.getBigInteger("key"))
nova chamada: assertEquals(BigInteger.valueOf(33), obj.getBigInteger("key"), "Era esperado valores iguais, mas " + result441 + " <BigInteger.valueOf(33)> é diferente de " + result442 + " <obj.getBigInteger('key')>")
chamada antiga: assertEquals(BigInteger.valueOf(33), obj.optBigInteger("key", BigInteger.TEN))
nova chamada: assertEquals(BigInteger.valueOf(33), obj.optBigInteger("key", BigInteger.TEN), "Era esperado valores iguais, mas " + result443 + " <BigInteger.valueOf(33)> é diferente de " + result444 + " <obj.optBigInteger('key', BigInteger.TEN)>")
chamada antiga: assertEquals(BigInteger.TEN, obj.optBigInteger("boo", BigInteger.TEN))
nova chamada: assertEquals(BigInteger.TEN, obj.optBigInteger("boo", BigInteger.TEN), "Era esperado valores iguais, mas  BigInteger.TEN é diferente de " + result445 + " <obj.optBigInteger('boo', BigInteger.TEN)>")
chamada antiga: assertEquals(value, obj.getBigDecimal("key"))
nova chamada: assertEquals(value, obj.getBigDecimal("key"), "Era esperado valores iguais, mas  value é diferente de " + result446 + " <obj.getBigDecimal('key')>")
chamada antiga: assertEquals(value, obj.optBigDecimal("key", BigDecimal.TEN))
nova chamada: assertEquals(value, obj.optBigDecimal("key", BigDecimal.TEN), "Era esperado valores iguais, mas  value é diferente de " + result447 + " <obj.optBigDecimal('key', BigDecimal.TEN)>")
chamada antiga: assertEquals(BigDecimal.TEN, obj.optBigDecimal("boo", BigDecimal.TEN))
nova chamada: assertEquals(BigDecimal.TEN, obj.optBigDecimal("boo", BigDecimal.TEN), "Era esperado valores iguais, mas  BigDecimal.TEN é diferente de " + result448 + " <obj.optBigDecimal('boo', BigDecimal.TEN)>")
chamada antiga: assertEquals("cheese", obj.getString("key"))
nova chamada: assertEquals("cheese", obj.getString("key"), "Era esperado valores iguais, mas  'cheese' é diferente de " + result449 + " <obj.getString('key')>")
chamada antiga: assertEquals("45", obj.getString("not"))
nova chamada: assertEquals("45", obj.getString("not"), "Era esperado valores iguais, mas  '45' é diferente de " + result450 + " <obj.getString('not')>")
chamada antiga: assertEquals("cheese", obj.optString("key"))
nova chamada: assertEquals("cheese", obj.optString("key"), "Era esperado valores iguais, mas  'cheese' é diferente de " + result451 + " <obj.optString('key')>")
chamada antiga: assertEquals("logs", obj.optString("boo", "logs"))
nova chamada: assertEquals("logs", obj.optString("boo", "logs"), "Era esperado valores iguais, mas  'logs' é diferente de " + result452 + " <obj.optString('boo', 'logs')>")
chamada antiga: assertEquals("", obj.optString("boo"))
nova chamada: assertEquals("", obj.optString("boo"), "Era esperado valores iguais, mas  '' é diferente de " + result453 + " <obj.optString('boo')>")
chamada antiga: assertNull(obj.optJSONObject("boo"))
nova chamada: assertNull(obj.optJSONObject("boo"), "Era esperado nulo, mas " + result454 + " <obj.optJSONObject('boo')> não é nulo")
chamada antiga: assertTrue(subObj.similar(obj.get("key")))
nova chamada: assertTrue(subObj.similar(obj.get("key")), "Era esperado verdadeiro, mas " + result455 + " <subObj.similar(obj.get('key'))> é falso")
chamada antiga: assertNull(obj.optJSONArray("boo"))
nova chamada: assertNull(obj.optJSONArray("boo"), "Era esperado nulo, mas " + result456 + " <obj.optJSONArray('boo')> não é nulo")
chamada antiga: assertTrue(subObj.similar(obj.get("key")))
nova chamada: assertTrue(subObj.similar(obj.get("key")), "Era esperado verdadeiro, mas " + result457 + " <subObj.similar(obj.get('key'))> é falso")
chamada antiga: assertEquals(fruit.orange, obj.getEnum(fruit.class, "key"))
nova chamada: assertEquals(fruit.orange, obj.getEnum(fruit.class, "key"), "Era esperado valores iguais, mas  fruit.orange é diferente de " + result458 + " <obj.getEnum(fruit.class, 'key')>")
chamada antiga: assertEquals(fruit.orange, obj.optEnum(fruit.class, "key"))
nova chamada: assertEquals(fruit.orange, obj.optEnum(fruit.class, "key"), "Era esperado valores iguais, mas  fruit.orange é diferente de " + result459 + " <obj.optEnum(fruit.class, 'key')>")
chamada antiga: assertEquals(fruit.apple, obj.optEnum(fruit.class, "boo", fruit.apple))
nova chamada: assertEquals(fruit.apple, obj.optEnum(fruit.class, "boo", fruit.apple), "Era esperado valores iguais, mas  fruit.apple é diferente de " + result460 + " <obj.optEnum(fruit.class, 'boo', fruit.apple)>")
chamada antiga: assertNull(obj.optEnum(fruit.class, "boo"))
nova chamada: assertNull(obj.optEnum(fruit.class, "boo"), "Era esperado nulo, mas " + result461 + " <obj.optEnum(fruit.class, 'boo')> não é nulo")
chamada antiga: assertEquals("{\"foo\":42}", obj.toString())
nova chamada: assertEquals("{\"foo\":42}", obj.toString(), "Era esperado valores iguais, mas  '{\'foo\':42}' é diferente de " + result462 + " <obj.toString()>")
chamada antiga: assertEquals("{\n" + "  \"foo\": 42,\n" + "  \"bar\": true\n" + "}", obj.toString(3))
nova chamada: assertEquals("{\n" + "  \"foo\": 42,\n" + "  \"bar\": true\n" + "}", obj.toString(3), "Era esperado valores iguais, mas  '{\n' + '  \'foo\': 42,\n' + '  \'bar\': true\n' + '}' é diferente de " + result463 + " <obj.toString(3)>")
chamada antiga: assertEquals(7, obj.getJSONArray("foos").get(1))
nova chamada: assertEquals(7, obj.getJSONArray("foos").get(1), "Era esperado valores iguais, mas  7 é diferente de " + result464 + " <obj.getJSONArray('foos').get(1)>")
chamada antiga: assertEquals(7, obj.optJSONArray("foos").get(1))
nova chamada: assertEquals(7, obj.optJSONArray("foos").get(1), "Era esperado valores iguais, mas  7 é diferente de " + result465 + " <obj.optJSONArray('foos').get(1)>")
chamada antiga: assertNull(obj.optJSONArray("bars"))
nova chamada: assertNull(obj.optJSONArray("bars"), "Era esperado nulo, mas " + result466 + " <obj.optJSONArray('bars')> não é nulo")
chamada antiga: assertEquals(str, sw.toString())
nova chamada: assertEquals(str, sw.toString(), "Era esperado valores iguais, mas  str é diferente de " + result467 + " <sw.toString()>")
chamada antiga: assertEquals("{\n" + "  \"foo\": 42,\n" + "  \"bar\": true\n" + "}", sw.toString())
nova chamada: assertEquals("{\n" + "  \"foo\": 42,\n" + "  \"bar\": true\n" + "}", sw.toString(), "Era esperado valores iguais, mas  '{\n' + '  \'foo\': 42,\n' + '  \'bar\': true\n' + '}' é diferente de " + result468 + " <sw.toString()>")
chamada antiga: assertEquals(42, obj.remove("foo"))
nova chamada: assertEquals(42, obj.remove("foo"), "Era esperado valores iguais, mas  42 é diferente de " + result469 + " <obj.remove('foo')>")
chamada antiga: assertNull(obj.remove("nothing"))
nova chamada: assertNull(obj.remove("nothing"), "Era esperado nulo, mas " + result470 + " <obj.remove('nothing')> não é nulo")
chamada antiga: assertEquals("{\"bar\":true}", obj.toString())
nova chamada: assertEquals("{\"bar\":true}", obj.toString(), "Era esperado valores iguais, mas  '{\'bar\':true}' é diferente de " + result471 + " <obj.toString()>")
chamada antiga: assertEquals(0, obj.length())
nova chamada: assertEquals(0, obj.length(), "Era esperado valores iguais, mas  0 é diferente de " + result472 + " <obj.length()>")
chamada antiga: assertEquals(42, obj.get("bar"))
nova chamada: assertEquals(42, obj.get("bar"), "Era esperado valores iguais, mas  42 é diferente de " + result473 + " <obj.get('bar')>")
chamada antiga: assertSame(obj, obj.put("bar", 33))
nova chamada: assertSame(obj, obj.put("bar", 33), "Era esperado objetos iguais, mas  obj é diferente de " + result474 + " <obj.put('bar', 33)>")
chamada antiga: assertEquals(33, obj.get("bar"))
nova chamada: assertEquals(33, obj.get("bar"), "Era esperado valores iguais, mas  33 é diferente de " + result475 + " <obj.get('bar')>")
chamada antiga: assertEquals("key == null", ex.getMessage())
nova chamada: assertEquals("key == null", ex.getMessage(), "Era esperado valores iguais, mas  'key == null' é diferente de " + result476 + " <ex.getMessage()>")
chamada antiga: assertSame(obj, obj.accumulate("bar", 42))
nova chamada: assertSame(obj, obj.accumulate("bar", 42), "Era esperado objetos iguais, mas  obj é diferente de " + result477 + " <obj.accumulate('bar', 42)>")
chamada antiga: assertEquals(0, obj.length())
nova chamada: assertEquals(0, obj.length(), "Era esperado valores iguais, mas  0 é diferente de " + result478 + " <obj.length()>")
chamada antiga: assertSame(obj, obj.accumulate("bar", 33))
nova chamada: assertSame(obj, obj.accumulate("bar", 33), "Era esperado objetos iguais, mas  obj é diferente de " + result479 + " <obj.accumulate('bar', 33)>")
chamada antiga: assertEquals(2, obj.getJSONArray("bar").length())
nova chamada: assertEquals(2, obj.getJSONArray("bar").length(), "Era esperado valores iguais, mas  2 é diferente de " + result480 + " <obj.getJSONArray('bar').length()>")
chamada antiga: assertEquals(42, obj.getJSONArray("bar").get(0))
nova chamada: assertEquals(42, obj.getJSONArray("bar").get(0), "Era esperado valores iguais, mas  42 é diferente de " + result481 + " <obj.getJSONArray('bar').get(0)>")
chamada antiga: assertEquals(33, obj.getJSONArray("bar").get(1))
nova chamada: assertEquals(33, obj.getJSONArray("bar").get(1), "Era esperado valores iguais, mas  33 é diferente de " + result482 + " <obj.getJSONArray('bar').get(1)>")
chamada antiga: assertEquals("Null key.", ex.getMessage())
nova chamada: assertEquals("Null key.", ex.getMessage(), "Era esperado valores iguais, mas  'Null key.' é diferente de " + result483 + " <ex.getMessage()>")
chamada antiga: assertSame(obj, obj.append("bar", 42))
nova chamada: assertSame(obj, obj.append("bar", 42), "Era esperado objetos iguais, mas  obj é diferente de " + result484 + " <obj.append('bar', 42)>")
chamada antiga: assertEquals(2, obj.getJSONArray("bar").length())
nova chamada: assertEquals(2, obj.getJSONArray("bar").length(), "Era esperado valores iguais, mas  2 é diferente de " + result485 + " <obj.getJSONArray('bar').length()>")
chamada antiga: assertEquals(42, obj.getJSONArray("bar").get(0))
nova chamada: assertEquals(42, obj.getJSONArray("bar").get(0), "Era esperado valores iguais, mas  42 é diferente de " + result486 + " <obj.getJSONArray('bar').get(0)>")
chamada antiga: assertEquals(33, obj.getJSONArray("bar").get(1))
nova chamada: assertEquals(33, obj.getJSONArray("bar").get(1), "Era esperado valores iguais, mas  33 é diferente de " + result487 + " <obj.getJSONArray('bar').get(1)>")
chamada antiga: assertEquals("Null key.", ex.getMessage())
nova chamada: assertEquals("Null key.", ex.getMessage(), "Era esperado valores iguais, mas  'Null key.' é diferente de " + result488 + " <ex.getMessage()>")
chamada antiga: assertSame(obj, obj.put("bar", "not"))
nova chamada: assertSame(obj, obj.put("bar", "not"), "Era esperado objetos iguais, mas  obj é diferente de " + result489 + " <obj.put('bar', 'not')>")
chamada antiga: assertEquals("JSONObject[\"bar\"] is not a JSONArray.", ex.getMessage())
nova chamada: assertEquals("JSONObject[\"bar\"] is not a JSONArray.", ex.getMessage(), "Era esperado valores iguais, mas  'JSONObject[\'bar\'] is not a JSONArray.' é diferente de " + result490 + " <ex.getMessage()>")
chamada antiga: assertSame(obj, obj.increment("cool-beans"))
nova chamada: assertSame(obj, obj.increment("cool-beans"), "Era esperado objetos iguais, mas  obj é diferente de " + result491 + " <obj.increment('cool-beans')>")
chamada antiga: assertEquals(1, obj.get("cool-beans"))
nova chamada: assertEquals(1, obj.get("cool-beans"), "Era esperado valores iguais, mas  1 é diferente de " + result492 + " <obj.get('cool-beans')>")
chamada antiga: assertEquals(4, obj.get("cool-beans"))
nova chamada: assertEquals(4, obj.get("cool-beans"), "Era esperado valores iguais, mas  4 é diferente de " + result493 + " <obj.get('cool-beans')>")
chamada antiga: assertSame(obj, obj.put("cool-beans", 1.5))
nova chamada: assertSame(obj, obj.put("cool-beans", 1.5), "Era esperado objetos iguais, mas  obj é diferente de " + result494 + " <obj.put('cool-beans', 1.5)>")
chamada antiga: assertEquals(2.5, obj.get("cool-beans"))
nova chamada: assertEquals(2.5, obj.get("cool-beans"), "Era esperado valores iguais, mas  2.5 é diferente de " + result495 + " <obj.get('cool-beans')>")
chamada antiga: assertSame(obj, obj.putOnce("foo", "bar"))
nova chamada: assertSame(obj, obj.putOnce("foo", "bar"), "Era esperado objetos iguais, mas  obj é diferente de " + result496 + " <obj.putOnce('foo', 'bar')>")
chamada antiga: assertEquals("bar", obj.getString("foo"))
nova chamada: assertEquals("bar", obj.getString("foo"), "Era esperado valores iguais, mas  'bar' é diferente de " + result497 + " <obj.getString('foo')>")
chamada antiga: assertSame(obj, obj.putOpt("foo", "bar"))
nova chamada: assertSame(obj, obj.putOpt("foo", "bar"), "Era esperado objetos iguais, mas  obj é diferente de " + result498 + " <obj.putOpt('foo', 'bar')>")
chamada antiga: assertEquals("bar", obj.get("foo"))
nova chamada: assertEquals("bar", obj.get("foo"), "Era esperado valores iguais, mas  'bar' é diferente de " + result499 + " <obj.get('foo')>")
chamada antiga: assertEquals("qux", obj.get("foo"))
nova chamada: assertEquals("qux", obj.get("foo"), "Era esperado valores iguais, mas  'qux' é diferente de " + result500 + " <obj.get('foo')>")
chamada antiga: assertEquals(exp, obj.keySet())
nova chamada: assertEquals(exp, obj.keySet(), "Era esperado valores iguais, mas  exp é diferente de " + result501 + " <obj.keySet()>")
chamada antiga: assertEquals(exp, newHashSet(obj.keys()))
nova chamada: assertEquals(exp, newHashSet(obj.keys()), "Era esperado valores iguais, mas  exp é diferente de " + result502 + " <newHashSet(obj.keys())>")
chamada antiga: assertTrue(obj1.similar(obj2))
nova chamada: assertTrue(obj1.similar(obj2), "Era esperado verdadeiro, mas " + result503 + " <obj1.similar(obj2)> é falso")
chamada antiga: assertFalse(obj1.similar(obj2))
nova chamada: assertFalse(obj1.similar(obj2), "Era esperado falso, mas " + result504 + " <obj1.similar(obj2)> é verdadeiro ")
chamada antiga: assertEquals(42, obj.query("/a/b"))
nova chamada: assertEquals(42, obj.query("/a/b"), "Era esperado valores iguais, mas  42 é diferente de " + result505 + " <obj.query('/a/b')>")
chamada antiga: assertEquals(55, map.get("baz"))
nova chamada: assertEquals(55, map.get("baz"), "Era esperado valores iguais, mas  55 é diferente de " + result506 + " <map.get('baz')>")
chamada antiga: assertEquals(21474836475L, map.get("qux"))
nova chamada: assertEquals(21474836475L, map.get("qux"), "Era esperado valores iguais, mas  21474836475L é diferente de " + result507 + " <map.get('qux')>")
chamada antiga: assertEquals(42, sub.get("bar"))
nova chamada: assertEquals(42, sub.get("bar"), "Era esperado valores iguais, mas  42 é diferente de " + result508 + " <sub.get('bar')>")
chamada antiga: assertEquals(newHashSet("foo", "bar", "baz"), newHashSet(names.toList()))
nova chamada: assertEquals(newHashSet("foo", "bar", "baz"), newHashSet(names.toList()), "Era esperado valores iguais, mas " + result509 + " <newHashSet('foo', 'bar', 'baz')> é diferente de " + result510 + " <newHashSet(names.toList())>")
chamada antiga: assertNull(o.toJSONArray(new JSONArray()))
nova chamada: assertNull(o.toJSONArray(new JSONArray()), "Era esperado nulo, mas " + result511 + " <o.toJSONArray(new JSONArray())> não é nulo")
chamada antiga: assertEquals(new JSONArray(asList("bar", 42)), o.toJSONArray(new JSONArray(asList("foo", "baz"))))
nova chamada: assertEquals(new JSONArray(asList("bar", 42)), o.toJSONArray(new JSONArray(asList("foo", "baz"))), "Era esperado valores iguais, mas  new JSONArray(asList('bar', 42)) é diferente de " + result512 + " <o.toJSONArray(new JSONArray(asList('foo', 'baz')))>")
chamada antiga: assertEquals(new JSONArray(asList(null, null)), new JSONObject().toJSONArray(new JSONArray(asList("foo", "baz"))))
nova chamada: assertEquals(new JSONArray(asList(null, null)), new JSONObject().toJSONArray(new JSONArray(asList("foo", "baz"))), "Era esperado valores iguais, mas  new JSONArray(asList(null, null)) é diferente de " + result513 + " <new JSONObject().toJSONArray(new JSONArray(asList('foo', 'baz')))>")
chamada antiga: assertEquals("{\"foo\":[1,2,3]}", o.toString())
nova chamada: assertEquals("{\"foo\":[1,2,3]}", o.toString(), "Era esperado valores iguais, mas  '{\'foo\':[1,2,3]}' é diferente de " + result514 + " <o.toString()>")
chamada antiga: assertEquals("{\"foo\":{\"baz\":42}}", o.toString())
nova chamada: assertEquals("{\"foo\":{\"baz\":42}}", o.toString(), "Era esperado valores iguais, mas  '{\'foo\':{\'baz\':42}}' é diferente de " + result515 + " <o.toString()>")
chamada antiga: assertSame(JSONObject.NULL, JSONObject.stringToValue("null"))
nova chamada: assertSame(JSONObject.NULL, JSONObject.stringToValue("null"), "Era esperado objetos iguais, mas  JSONObject.NULL é diferente de " + result516 + " <JSONObject.stringToValue('null')>")
chamada antiga: assertEquals(true, JSONObject.stringToValue("true"))
nova chamada: assertEquals(true, JSONObject.stringToValue("true"), "Era esperado valores iguais, mas  true é diferente de " + result517 + " <JSONObject.stringToValue('true')>")
chamada antiga: assertEquals(false, JSONObject.stringToValue("false"))
nova chamada: assertEquals(false, JSONObject.stringToValue("false"), "Era esperado valores iguais, mas  false é diferente de " + result518 + " <JSONObject.stringToValue('false')>")
chamada antiga: assertEquals(42, JSONObject.stringToValue("42"))
nova chamada: assertEquals(42, JSONObject.stringToValue("42"), "Era esperado valores iguais, mas  42 é diferente de " + result519 + " <JSONObject.stringToValue('42')>")
chamada antiga: assertEquals(45.25, JSONObject.stringToValue("45.25"))
nova chamada: assertEquals(45.25, JSONObject.stringToValue("45.25"), "Era esperado valores iguais, mas  45.25 é diferente de " + result520 + " <JSONObject.stringToValue('45.25')>")
chamada antiga: assertEquals(-45.25, JSONObject.stringToValue("-45.25"))
nova chamada: assertEquals(-45.25, JSONObject.stringToValue("-45.25"), "Era esperado valores iguais, mas  -45.25 é diferente de " + result521 + " <JSONObject.stringToValue('-45.25')>")
chamada antiga: assertEquals("\"\\\"foo\\\"hoo\"", JSONObject.quote("\"foo\"hoo"))
nova chamada: assertEquals("\"\\\"foo\\\"hoo\"", JSONObject.quote("\"foo\"hoo"), "Era esperado valores iguais, mas  '\'\\\'foo\\\'hoo\'' é diferente de " + result522 + " <JSONObject.quote('\'foo\'hoo')>")
chamada antiga: assertEquals("\"\\\"foo\\\"hoo\"", quote.toString())
nova chamada: assertEquals("\"\\\"foo\\\"hoo\"", quote.toString(), "Era esperado valores iguais, mas  '\'\\\'foo\\\'hoo\'' é diferente de " + result523 + " <quote.toString()>")
chamada antiga: assertEquals(42, JSONObject.wrap(42))
nova chamada: assertEquals(42, JSONObject.wrap(42), "Era esperado valores iguais, mas  42 é diferente de " + result524 + " <JSONObject.wrap(42)>")
chamada antiga: assertEquals(42.5, JSONObject.wrap(42.5))
nova chamada: assertEquals(42.5, JSONObject.wrap(42.5), "Era esperado valores iguais, mas  42.5 é diferente de " + result525 + " <JSONObject.wrap(42.5)>")
chamada antiga: assertSame(JSONObject.NULL, JSONObject.wrap(null))
nova chamada: assertSame(JSONObject.NULL, JSONObject.wrap(null), "Era esperado objetos iguais, mas  JSONObject.NULL é diferente de " + result526 + " <JSONObject.wrap(null)>")
chamada antiga: assertEquals(true, JSONObject.wrap(true))
nova chamada: assertEquals(true, JSONObject.wrap(true), "Era esperado valores iguais, mas  true é diferente de " + result527 + " <JSONObject.wrap(true)>")
chamada antiga: assertTrue(new JSONArray(asList(1, 2, 3)).similar(JSONObject.wrap(asList(1, 2, 3))))
nova chamada: assertTrue(new JSONArray(asList(1, 2, 3)).similar(JSONObject.wrap(asList(1, 2, 3))), "Era esperado verdadeiro, mas " + result528 + " <new JSONArray(asList(1, 2, 3)).similar(JSONObject.wrap(asList(1, 2, 3)))> é falso")
chamada antiga: assertTrue(new JSONArray(asList(1, 2, 3)).similar(JSONObject.wrap(new int[] { 1, 2, 3 })))
nova chamada: assertTrue(new JSONArray(asList(1, 2, 3)).similar(JSONObject.wrap(new int[] { 1, 2, 3 })), "Era esperado verdadeiro, mas " + result529 + " <new JSONArray(asList(1, 2, 3)).similar(JSONObject.wrap(new int[] { 1, 2, 3 }))> é falso")
chamada antiga: assertTrue(new JSONObject(of("f", 1)).similar(JSONObject.wrap(of("f", 1))))
nova chamada: assertTrue(new JSONObject(of("f", 1)).similar(JSONObject.wrap(of("f", 1))), "Era esperado verdadeiro, mas " + result530 + " <new JSONObject(of('f', 1)).similar(JSONObject.wrap(of('f', 1)))> é falso")
chamada antiga: assertTrue(new JSONObject().similar(JSONObject.wrap(new Foo("hi"))))
nova chamada: assertTrue(new JSONObject().similar(JSONObject.wrap(new Foo("hi"))), "Era esperado verdadeiro, mas " + result531 + " <new JSONObject().similar(JSONObject.wrap(new Foo('hi')))> é falso")
chamada antiga: assertEquals("42", JSONObject.doubleToString(42))
nova chamada: assertEquals("42", JSONObject.doubleToString(42), "Era esperado valores iguais, mas  '42' é diferente de " + result532 + " <JSONObject.doubleToString(42)>")
chamada antiga: assertEquals("42.5643", JSONObject.doubleToString(42.5643))
nova chamada: assertEquals("42.5643", JSONObject.doubleToString(42.5643), "Era esperado valores iguais, mas  '42.5643' é diferente de " + result533 + " <JSONObject.doubleToString(42.5643)>")
chamada antiga: assertEquals("42", JSONObject.numberToString(42))
nova chamada: assertEquals("42", JSONObject.numberToString(42), "Era esperado valores iguais, mas  '42' é diferente de " + result534 + " <JSONObject.numberToString(42)>")
chamada antiga: assertEquals("42.5643", JSONObject.numberToString(42.5643f))
nova chamada: assertEquals("42.5643", JSONObject.numberToString(42.5643f), "Era esperado valores iguais, mas  '42.5643' é diferente de " + result535 + " <JSONObject.numberToString(42.5643f)>")
chamada antiga: assertEquals("null", JSONObject.valueToString(null))
nova chamada: assertEquals("null", JSONObject.valueToString(null), "Era esperado valores iguais, mas  'null' é diferente de " + result536 + " <JSONObject.valueToString(null)>")
chamada antiga: assertEquals("42", JSONObject.valueToString(42))
nova chamada: assertEquals("42", JSONObject.valueToString(42), "Era esperado valores iguais, mas  '42' é diferente de " + result537 + " <JSONObject.valueToString(42)>")
chamada antiga: assertEquals("42.5643", JSONObject.valueToString(42.5643f))
nova chamada: assertEquals("42.5643", JSONObject.valueToString(42.5643f), "Era esperado valores iguais, mas  '42.5643' é diferente de " + result538 + " <JSONObject.valueToString(42.5643f)>")
chamada antiga: assertEquals("\"Hello World\"", JSONObject.valueToString("Hello World"))
nova chamada: assertEquals("\"Hello World\"", JSONObject.valueToString("Hello World"), "Era esperado valores iguais, mas  '\'Hello World\'' é diferente de " + result539 + " <JSONObject.valueToString('Hello World')>")
chamada antiga: assertEquals(ImmaJson.HI_MOM, JSONObject.valueToString(new ImmaJson()))
nova chamada: assertEquals(ImmaJson.HI_MOM, JSONObject.valueToString(new ImmaJson()), "Era esperado valores iguais, mas  ImmaJson.HI_MOM é diferente de " + result540 + " <JSONObject.valueToString(new ImmaJson())>")
chamada antiga: assertEquals("{\"bar\":\"me\"}", JSONObject.valueToString(new Foo("me")))
nova chamada: assertEquals("{\"bar\":\"me\"}", JSONObject.valueToString(new Foo("me")), "Era esperado valores iguais, mas  '{\'bar\':\'me\'}' é diferente de " + result541 + " <JSONObject.valueToString(new Foo('me'))>")
chamada antiga: assertEquals("{}", JSONObject.valueToString(new JSONObject()))
nova chamada: assertEquals("{}", JSONObject.valueToString(new JSONObject()), "Era esperado valores iguais, mas  '{}' é diferente de " + result542 + " <JSONObject.valueToString(new JSONObject())>")
chamada antiga: assertEquals("[]", JSONObject.valueToString(new JSONArray()))
nova chamada: assertEquals("[]", JSONObject.valueToString(new JSONArray()), "Era esperado valores iguais, mas  '[]' é diferente de " + result543 + " <JSONObject.valueToString(new JSONArray())>")
chamada antiga: assertArrayEquals(null, JSONObject.getNames(new JSONObject()))
nova chamada: assertArrayEquals(null, JSONObject.getNames(new JSONObject()), "Era esperado arrays iguais, mas  null é diferente de " + result544 + " <JSONObject.getNames(new JSONObject())>")
chamada antiga: assertArrayEquals(new String[] { "a", "b" }, JSONObject.getNames(new JSONObject(of("a", 1, "b", 2))))
nova chamada: assertArrayEquals(new String[] { "a", "b" }, JSONObject.getNames(new JSONObject(of("a", 1, "b", 2))), "Era esperado arrays iguais, mas  new String[] { 'a', 'b' } é diferente de " + result545 + " <JSONObject.getNames(new JSONObject(of('a', 1, 'b', 2)))>")
chamada antiga: assertEquals(message, ex.getMessage())
nova chamada: assertEquals(message, ex.getMessage(), "Era esperado valores iguais, mas  message é diferente de " + result546 + " <ex.getMessage()>")
chamada antiga: assertEquals(o, value)
nova chamada: assertEquals(o, value, "Era esperado valores iguais, mas  o é diferente de " + " value")
chamada antiga: assertTrue(type.isInstance(o))
nova chamada: assertTrue(type.isInstance(o), "Era esperado verdadeiro, mas " + result547 + " <type.isInstance(o)> é falso")
chamada antiga: assertNull(array.toJSONObject(new JSONArray(Collections.singletonList("foo"))))
nova chamada: assertNull(array.toJSONObject(new JSONArray(Collections.singletonList("foo"))), "Era esperado nulo, mas " + result548 + " <array.toJSONObject(new JSONArray(Collections.singletonList('foo')))> não é nulo")
chamada antiga: assertNull(array.toJSONObject(null))
nova chamada: assertNull(array.toJSONObject(null), "Era esperado nulo, mas " + result549 + " <array.toJSONObject(null)> não é nulo")
chamada antiga: assertNull(array.toJSONObject(new JSONArray()))
nova chamada: assertNull(array.toJSONObject(new JSONArray()), "Era esperado nulo, mas " + result550 + " <array.toJSONObject(new JSONArray())> não é nulo")
chamada antiga: assertEquals("[1,null]", obj.toString())
nova chamada: assertEquals("[1,null]", obj.toString(), "Era esperado valores iguais, mas  '[1,null]' é diferente de " + result551 + " <obj.toString()>")
chamada antiga: assertEquals("JSONArray[0] not a string.", ex.getMessage())
nova chamada: assertEquals("JSONArray[0] not a string.", ex.getMessage(), "Era esperado valores iguais, mas  'JSONArray[0] not a string.' é diferente de " + result552 + " <ex.getMessage()>")
chamada antiga: assertEquals(1, zipped.get("one"))
nova chamada: assertEquals(1, zipped.get("one"), "Era esperado valores iguais, mas  1 é diferente de " + result553 + " <zipped.get('one')>")
chamada antiga: assertEquals("foo", zipped.get("two"))
nova chamada: assertEquals("foo", zipped.get("two"), "Era esperado valores iguais, mas  'foo' é diferente de " + result554 + " <zipped.get('two')>")
chamada antiga: assertEquals(false, zipped.get("three"))
nova chamada: assertEquals(false, zipped.get("three"), "Era esperado valores iguais, mas  false é diferente de " + result555 + " <zipped.get('three')>")
chamada antiga: assertEquals("Foo{bar=fooooo}", array.get(0).toString())
nova chamada: assertEquals("Foo{bar=fooooo}", array.get(0).toString(), "Era esperado valores iguais, mas  'Foo{bar=fooooo}' é diferente de " + result556 + " <array.get(0).toString()>")
chamada antiga: assertEquals("abc", array.get(1))
nova chamada: assertEquals("abc", array.get(1), "Era esperado valores iguais, mas  'abc' é diferente de " + result557 + " <array.get(1)>")
chamada antiga: assertEquals("{\"foo\":\"bar\"}", array.get(2).toString())
nova chamada: assertEquals("{\"foo\":\"bar\"}", array.get(2).toString(), "Era esperado valores iguais, mas  '{\'foo\':\'bar\'}' é diferente de " + result558 + " <array.get(2).toString()>")
chamada antiga: assertEquals(2, array.length())
nova chamada: assertEquals(2, array.length(), "Era esperado valores iguais, mas  2 é diferente de " + result559 + " <array.length()>")
chamada antiga: assertEquals("bar", array.getJSONObject(0).getString("foo"))
nova chamada: assertEquals("bar", array.getJSONObject(0).getString("foo"), "Era esperado valores iguais, mas  'bar' é diferente de " + result560 + " <array.getJSONObject(0).getString('foo')>")
chamada antiga: assertEquals(42, array.getJSONObject(1).getInt("baz"))
nova chamada: assertEquals(42, array.getJSONObject(1).getInt("baz"), "Era esperado valores iguais, mas  42 é diferente de " + result561 + " <array.getJSONObject(1).getInt('baz')>")
chamada antiga: assertEquals(nul, array.get(0))
nova chamada: assertEquals(nul, array.get(0), "Era esperado valores iguais, mas  nul é diferente de " + result562 + " <array.get(0)>")
chamada antiga: assertEquals(num, array.get(1))
nova chamada: assertEquals(num, array.get(1), "Era esperado valores iguais, mas  num é diferente de " + result563 + " <array.get(1)>")
chamada antiga: assertEquals(str, array.get(2))
nova chamada: assertEquals(str, array.get(2), "Era esperado valores iguais, mas  str é diferente de " + result564 + " <array.get(2)>")
chamada antiga: assertEquals(bool, array.get(3))
nova chamada: assertEquals(bool, array.get(3), "Era esperado valores iguais, mas  bool é diferente de " + result565 + " <array.get(3)>")
chamada antiga: assertEquals(arr, array.get(4))
nova chamada: assertEquals(arr, array.get(4), "Era esperado valores iguais, mas  arr é diferente de " + result566 + " <array.get(4)>")
chamada antiga: assertEquals(obj, array.get(5))
nova chamada: assertEquals(obj, array.get(5), "Era esperado valores iguais, mas  obj é diferente de " + result567 + " <array.get(5)>")
chamada antiga: assertSame(obj, obj.put((Number) 33))
nova chamada: assertSame(obj, obj.put((Number) 33), "Era esperado objetos iguais, mas  obj é diferente de " + result568 + " <obj.put((Number) 33)>")
chamada antiga: assertEquals(33, obj.getNumber(0))
nova chamada: assertEquals(33, obj.getNumber(0), "Era esperado valores iguais, mas  33 é diferente de " + result569 + " <obj.getNumber(0)>")
chamada antiga: assertEquals(33, obj.optNumber(0))
nova chamada: assertEquals(33, obj.optNumber(0), "Era esperado valores iguais, mas  33 é diferente de " + result570 + " <obj.optNumber(0)>")
chamada antiga: assertEquals(66.6d, obj.optNumber(1, 66.6d))
nova chamada: assertEquals(66.6d, obj.optNumber(1, 66.6d), "Era esperado valores iguais, mas  66.6d é diferente de " + result571 + " <obj.optNumber(1, 66.6d)>")
chamada antiga: assertNull(obj.optNumber(5))
nova chamada: assertNull(obj.optNumber(5), "Era esperado nulo, mas " + result572 + " <obj.optNumber(5)> não é nulo")
chamada antiga: assertSame(obj, obj.put(33.5d))
nova chamada: assertSame(obj, obj.put(33.5d), "Era esperado objetos iguais, mas  obj é diferente de " + result573 + " <obj.put(33.5d)>")
chamada antiga: assertSame(obj, obj.put(33.5f))
nova chamada: assertSame(obj, obj.put(33.5f), "Era esperado objetos iguais, mas  obj é diferente de " + result574 + " <obj.put(33.5f)>")
chamada antiga: assertSame(obj, obj.put(33L))
nova chamada: assertSame(obj, obj.put(33L), "Era esperado objetos iguais, mas  obj é diferente de " + result575 + " <obj.put(33L)>")
chamada antiga: assertEquals(33L, obj.getLong(0))
nova chamada: assertEquals(33L, obj.getLong(0), "Era esperado valores iguais, mas  33L é diferente de " + result576 + " <obj.getLong(0)>")
chamada antiga: assertEquals(33L, obj.optLong(0))
nova chamada: assertEquals(33L, obj.optLong(0), "Era esperado valores iguais, mas  33L é diferente de " + result577 + " <obj.optLong(0)>")
chamada antiga: assertEquals(66L, obj.optLong(5, 66))
nova chamada: assertEquals(66L, obj.optLong(5, 66), "Era esperado valores iguais, mas  66L é diferente de " + result578 + " <obj.optLong(5, 66)>")
chamada antiga: assertEquals(0L, obj.optLong(5))
nova chamada: assertEquals(0L, obj.optLong(5), "Era esperado valores iguais, mas  0L é diferente de " + result579 + " <obj.optLong(5)>")
chamada antiga: assertSame(obj, obj.put(true))
nova chamada: assertSame(obj, obj.put(true), "Era esperado objetos iguais, mas  obj é diferente de " + result580 + " <obj.put(true)>")
chamada antiga: assertTrue(obj.getBoolean(0))
nova chamada: assertTrue(obj.getBoolean(0), "Era esperado verdadeiro, mas " + result581 + " <obj.getBoolean(0)> é falso")
chamada antiga: assertFalse(obj.getBoolean(2))
nova chamada: assertFalse(obj.getBoolean(2), "Era esperado falso, mas " + result582 + " <obj.getBoolean(2)> é verdadeiro ")
chamada antiga: assertTrue(obj.optBoolean(0))
nova chamada: assertTrue(obj.optBoolean(0), "Era esperado verdadeiro, mas " + result583 + " <obj.optBoolean(0)> é falso")
chamada antiga: assertTrue(obj.optBoolean(5, true))
nova chamada: assertTrue(obj.optBoolean(5, true), "Era esperado verdadeiro, mas " + result584 + " <obj.optBoolean(5, true)> é falso")
chamada antiga: assertFalse(obj.optBoolean(5))
nova chamada: assertFalse(obj.optBoolean(5), "Era esperado falso, mas " + result585 + " <obj.optBoolean(5)> é verdadeiro ")
chamada antiga: assertSame(obj, obj.put(33))
nova chamada: assertSame(obj, obj.put(33), "Era esperado objetos iguais, mas  obj é diferente de " + result586 + " <obj.put(33)>")
chamada antiga: assertEquals(33, obj.getInt(0))
nova chamada: assertEquals(33, obj.getInt(0), "Era esperado valores iguais, mas  33 é diferente de " + result587 + " <obj.getInt(0)>")
chamada antiga: assertEquals(33, obj.optInt(0))
nova chamada: assertEquals(33, obj.optInt(0), "Era esperado valores iguais, mas  33 é diferente de " + result588 + " <obj.optInt(0)>")
chamada antiga: assertEquals(66, obj.optInt(5, 66))
nova chamada: assertEquals(66, obj.optInt(5, 66), "Era esperado valores iguais, mas  66 é diferente de " + result589 + " <obj.optInt(5, 66)>")
chamada antiga: assertEquals(0, obj.optInt(5))
nova chamada: assertEquals(0, obj.optInt(5), "Era esperado valores iguais, mas  0 é diferente de " + result590 + " <obj.optInt(5)>")
chamada antiga: assertSame(obj, obj.put(BigInteger.valueOf(33)))
nova chamada: assertSame(obj, obj.put(BigInteger.valueOf(33)), "Era esperado objetos iguais, mas  obj é diferente de " + result591 + " <obj.put(BigInteger.valueOf(33))>")
chamada antiga: assertEquals(BigInteger.valueOf(33), obj.getBigInteger(0))
nova chamada: assertEquals(BigInteger.valueOf(33), obj.getBigInteger(0), "Era esperado valores iguais, mas " + result592 + " <BigInteger.valueOf(33)> é diferente de " + result593 + " <obj.getBigInteger(0)>")
chamada antiga: assertEquals(BigInteger.valueOf(33), obj.optBigInteger(0, BigInteger.TEN))
nova chamada: assertEquals(BigInteger.valueOf(33), obj.optBigInteger(0, BigInteger.TEN), "Era esperado valores iguais, mas " + result594 + " <BigInteger.valueOf(33)> é diferente de " + result595 + " <obj.optBigInteger(0, BigInteger.TEN)>")
chamada antiga: assertEquals(BigInteger.TEN, obj.optBigInteger(5, BigInteger.TEN))
nova chamada: assertEquals(BigInteger.TEN, obj.optBigInteger(5, BigInteger.TEN), "Era esperado valores iguais, mas  BigInteger.TEN é diferente de " + result596 + " <obj.optBigInteger(5, BigInteger.TEN)>")
chamada antiga: assertSame(obj, obj.put(value))
nova chamada: assertSame(obj, obj.put(value), "Era esperado objetos iguais, mas  obj é diferente de " + result597 + " <obj.put(value)>")
chamada antiga: assertEquals(value, obj.getBigDecimal(0))
nova chamada: assertEquals(value, obj.getBigDecimal(0), "Era esperado valores iguais, mas  value é diferente de " + result598 + " <obj.getBigDecimal(0)>")
chamada antiga: assertEquals(value, obj.optBigDecimal(0, BigDecimal.TEN))
nova chamada: assertEquals(value, obj.optBigDecimal(0, BigDecimal.TEN), "Era esperado valores iguais, mas  value é diferente de " + result599 + " <obj.optBigDecimal(0, BigDecimal.TEN)>")
chamada antiga: assertEquals(BigDecimal.TEN, obj.optBigDecimal(5, BigDecimal.TEN))
nova chamada: assertEquals(BigDecimal.TEN, obj.optBigDecimal(5, BigDecimal.TEN), "Era esperado valores iguais, mas  BigDecimal.TEN é diferente de " + result600 + " <obj.optBigDecimal(5, BigDecimal.TEN)>")
chamada antiga: assertSame(obj, obj.put("cheese"))
nova chamada: assertSame(obj, obj.put("cheese"), "Era esperado objetos iguais, mas  obj é diferente de " + result601 + " <obj.put('cheese')>")
chamada antiga: assertEquals("cheese", obj.getString(0))
nova chamada: assertEquals("cheese", obj.getString(0), "Era esperado valores iguais, mas  'cheese' é diferente de " + result602 + " <obj.getString(0)>")
chamada antiga: assertEquals("45", obj.getString(1))
nova chamada: assertEquals("45", obj.getString(1), "Era esperado valores iguais, mas  '45' é diferente de " + result603 + " <obj.getString(1)>")
chamada antiga: assertEquals("cheese", obj.optString(0))
nova chamada: assertEquals("cheese", obj.optString(0), "Era esperado valores iguais, mas  'cheese' é diferente de " + result604 + " <obj.optString(0)>")
chamada antiga: assertEquals("logs", obj.optString(5, "logs"))
nova chamada: assertEquals("logs", obj.optString(5, "logs"), "Era esperado valores iguais, mas  'logs' é diferente de " + result605 + " <obj.optString(5, 'logs')>")
chamada antiga: assertEquals("", obj.optString(5))
nova chamada: assertEquals("", obj.optString(5), "Era esperado valores iguais, mas  '' é diferente de " + result606 + " <obj.optString(5)>")
chamada antiga: assertSame(obj, obj.put(subObj))
nova chamada: assertSame(obj, obj.put(subObj), "Era esperado objetos iguais, mas  obj é diferente de " + result607 + " <obj.put(subObj)>")
chamada antiga: assertNull(obj.optJSONObject(5))
nova chamada: assertNull(obj.optJSONObject(5), "Era esperado nulo, mas " + result608 + " <obj.optJSONObject(5)> não é nulo")
chamada antiga: assertSame(obj, obj.put(subObj))
nova chamada: assertSame(obj, obj.put(subObj), "Era esperado objetos iguais, mas  obj é diferente de " + result609 + " <obj.put(subObj)>")
chamada antiga: assertNull(obj.optJSONArray(5))
nova chamada: assertNull(obj.optJSONArray(5), "Era esperado nulo, mas " + result610 + " <obj.optJSONArray(5)> não é nulo")
chamada antiga: assertSame(obj, obj.put(fruit.orange))
nova chamada: assertSame(obj, obj.put(fruit.orange), "Era esperado objetos iguais, mas  obj é diferente de " + result611 + " <obj.put(fruit.orange)>")
chamada antiga: assertEquals(fruit.orange, obj.getEnum(fruit.class, 0))
nova chamada: assertEquals(fruit.orange, obj.getEnum(fruit.class, 0), "Era esperado valores iguais, mas  fruit.orange é diferente de " + result612 + " <obj.getEnum(fruit.class, 0)>")
chamada antiga: assertEquals(fruit.orange, obj.optEnum(fruit.class, 0))
nova chamada: assertEquals(fruit.orange, obj.optEnum(fruit.class, 0), "Era esperado valores iguais, mas  fruit.orange é diferente de " + result613 + " <obj.optEnum(fruit.class, 0)>")
chamada antiga: assertEquals(fruit.apple, obj.optEnum(fruit.class, 1, fruit.apple))
nova chamada: assertEquals(fruit.apple, obj.optEnum(fruit.class, 1, fruit.apple), "Era esperado valores iguais, mas  fruit.apple é diferente de " + result614 + " <obj.optEnum(fruit.class, 1, fruit.apple)>")
chamada antiga: assertNull(obj.optEnum(fruit.class, 5))
nova chamada: assertNull(obj.optEnum(fruit.class, 5), "Era esperado nulo, mas " + result615 + " <obj.optEnum(fruit.class, 5)> não é nulo")
chamada antiga: assertEquals("33.5, 42, \"foo\", true, \"apple\"", array.join(", "))
nova chamada: assertEquals("33.5, 42, \"foo\", true, \"apple\"", array.join(", "), "Era esperado valores iguais, mas  '33.5, 42, \'foo\', true, \'apple\'' é diferente de " + result616 + " <array.join(', ')>")
chamada antiga: assertEquals("[33.5,42,\"foo\",true,\"apple\"]", array.toString())
nova chamada: assertEquals("[33.5,42,\"foo\",true,\"apple\"]", array.toString(), "Era esperado valores iguais, mas  '[33.5,42,\'foo\',true,\'apple\']' é diferente de " + result617 + " <array.toString()>")
chamada antiga: assertEquals("[\n" + "  33.5,\n" + "  42,\n" + "  \"foo\",\n" + "  true,\n" + "  \"apple\"\n" + "]", array.toString(3))
nova chamada: assertEquals("[\n" + "  33.5,\n" + "  42,\n" + "  \"foo\",\n" + "  true,\n" + "  \"apple\"\n" + "]", array.toString(3), "Era esperado valores iguais, mas  '[\n' + '  33.5,\n' + '  42,\n' + '  \'foo\',\n' + '  true,\n' + '  \'apple\'\n' + ']' é diferente de " + result618 + " <array.toString(3)>")
chamada antiga: assertTrue(array.get(0) instanceof Double)
nova chamada: assertTrue(array.get(0) instanceof Double, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(array.get(1) instanceof Integer)
nova chamada: assertTrue(array.get(1) instanceof Integer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(array.get(2) instanceof String)
nova chamada: assertTrue(array.get(2) instanceof String, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(array.get(3) instanceof JSONObject)
nova chamada: assertTrue(array.get(3) instanceof JSONObject, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(array.get(4) instanceof JSONArray)
nova chamada: assertTrue(array.get(4) instanceof JSONArray, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(2, array.getJSONArray(0).get(1))
nova chamada: assertEquals(2, array.getJSONArray(0).get(1), "Era esperado valores iguais, mas  2 é diferente de " + result619 + " <array.getJSONArray(0).get(1)>")
chamada antiga: assertNull(array.optJSONArray(2))
nova chamada: assertNull(array.optJSONArray(2), "Era esperado nulo, mas " + result620 + " <array.optJSONArray(2)> não é nulo")
chamada antiga: assertEquals(str, sw.toString())
nova chamada: assertEquals(str, sw.toString(), "Era esperado valores iguais, mas  str é diferente de " + result621 + " <sw.toString()>")
chamada antiga: assertEquals("[\n" + "  1,\n" + "  2,\n" + "  3\n" + "]", sw.toString())
nova chamada: assertEquals("[\n" + "  1,\n" + "  2,\n" + "  3\n" + "]", sw.toString(), "Era esperado valores iguais, mas  '[\n' + '  1,\n' + '  2,\n' + '  3\n' + ']' é diferente de " + result622 + " <sw.toString()>")
chamada antiga: assertTrue(remove instanceof JSONObject)
nova chamada: assertTrue(remove instanceof JSONObject, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(o, remove)
nova chamada: assertEquals(o, remove, "Era esperado valores iguais, mas  o é diferente de " + " remove")
chamada antiga: assertEquals(1, array.length())
nova chamada: assertEquals(1, array.length(), "Era esperado valores iguais, mas  1 é diferente de " + result623 + " <array.length()>")
chamada antiga: assertNull(array.remove(55))
nova chamada: assertNull(array.remove(55), "Era esperado nulo, mas " + result624 + " <array.remove(55)> não é nulo")
chamada antiga: assertNull(array.remove(55))
nova chamada: assertNull(array.remove(55), "Era esperado nulo, mas " + result625 + " <array.remove(55)> não é nulo")
chamada antiga: assertEquals(1, array.get(0))
nova chamada: assertEquals(1, array.get(0), "Era esperado valores iguais, mas  1 é diferente de " + result626 + " <array.get(0)>")
chamada antiga: assertEquals(Long.MAX_VALUE, array.get(1))
nova chamada: assertEquals(Long.MAX_VALUE, array.get(1), "Era esperado valores iguais, mas  Long.MAX_VALUE é diferente de " + result627 + " <array.get(1)>")
chamada antiga: assertEquals(3.5d, array.get(2))
nova chamada: assertEquals(3.5d, array.get(2), "Era esperado valores iguais, mas  3.5d é diferente de " + result628 + " <array.get(2)>")
chamada antiga: assertEquals("howdy", array.get(4))
nova chamada: assertEquals("howdy", array.get(4), "Era esperado valores iguais, mas  'howdy' é diferente de " + result629 + " <array.get(4)>")
chamada antiga: assertEquals("pear", array.get(5))
nova chamada: assertEquals("pear", array.get(5), "Era esperado valores iguais, mas  'pear' é diferente de " + result630 + " <array.get(5)>")
chamada antiga: assertTrue(new JSONObject(of("foo", 22)).similar(array.get(6)))
nova chamada: assertTrue(new JSONObject(of("foo", 22)).similar(array.get(6)), "Era esperado verdadeiro, mas " + result631 + " <new JSONObject(of('foo', 22)).similar(array.get(6))> é falso")
chamada antiga: assertTrue(new JSONArray(asList(1, 2, 3)).similar(array.get(7)))
nova chamada: assertTrue(new JSONArray(asList(1, 2, 3)).similar(array.get(7)), "Era esperado verdadeiro, mas " + result632 + " <new JSONArray(asList(1, 2, 3)).similar(array.get(7))> é falso")
chamada antiga: assertEquals("[1,9223372036854775807,3.5,6.4,\"howdy\",\"pear\",{\"foo\":22},[1,2,3]]", array.toString())
nova chamada: assertEquals("[1,9223372036854775807,3.5,6.4,\"howdy\",\"pear\",{\"foo\":22},[1,2,3]]", array.toString(), "Era esperado valores iguais, mas  '[1,9223372036854775807,3.5,6.4,\'howdy\',\'pear\',{\'foo\':22},[1,2,3]]' é diferente de " + result633 + " <array.toString()>")
chamada antiga: assertEquals(1, array.get(0))
nova chamada: assertEquals(1, array.get(0), "Era esperado valores iguais, mas  1 é diferente de " + result634 + " <array.get(0)>")
chamada antiga: assertEquals(Long.MAX_VALUE, array.get(1))
nova chamada: assertEquals(Long.MAX_VALUE, array.get(1), "Era esperado valores iguais, mas  Long.MAX_VALUE é diferente de " + result635 + " <array.get(1)>")
chamada antiga: assertEquals(3.5d, array.get(2))
nova chamada: assertEquals(3.5d, array.get(2), "Era esperado valores iguais, mas  3.5d é diferente de " + result636 + " <array.get(2)>")
chamada antiga: assertEquals("howdy", array.get(4))
nova chamada: assertEquals("howdy", array.get(4), "Era esperado valores iguais, mas  'howdy' é diferente de " + result637 + " <array.get(4)>")
chamada antiga: assertEquals("pear", array.get(5))
nova chamada: assertEquals("pear", array.get(5), "Era esperado valores iguais, mas  'pear' é diferente de " + result638 + " <array.get(5)>")
chamada antiga: assertTrue(new JSONObject(of("foo", 22)).similar(array.get(6)))
nova chamada: assertTrue(new JSONObject(of("foo", 22)).similar(array.get(6)), "Era esperado verdadeiro, mas " + result639 + " <new JSONObject(of('foo', 22)).similar(array.get(6))> é falso")
chamada antiga: assertTrue(new JSONArray(asList(1, 2, 3)).similar(array.get(7)))
nova chamada: assertTrue(new JSONArray(asList(1, 2, 3)).similar(array.get(7)), "Era esperado verdadeiro, mas " + result640 + " <new JSONArray(asList(1, 2, 3)).similar(array.get(7))> é falso")
chamada antiga: assertEquals("[1,9223372036854775807,3.5,6.4,\"howdy\",\"pear\",{\"foo\":22},[1,2,3]]", array.toString())
nova chamada: assertEquals("[1,9223372036854775807,3.5,6.4,\"howdy\",\"pear\",{\"foo\":22},[1,2,3]]", array.toString(), "Era esperado valores iguais, mas  '[1,9223372036854775807,3.5,6.4,\'howdy\',\'pear\',{\'foo\':22},[1,2,3]]' é diferente de " + result641 + " <array.toString()>")
chamada antiga: assertEquals(42, obj.query("/0/a/b"))
nova chamada: assertEquals(42, obj.query("/0/a/b"), "Era esperado valores iguais, mas  42 é diferente de " + result642 + " <obj.query('/0/a/b')>")
chamada antiga: assertEquals(1, array.length())
nova chamada: assertEquals(1, array.length(), "Era esperado valores iguais, mas  1 é diferente de " + result643 + " <array.length()>")
chamada antiga: assertEquals(ints, array.getJSONArray(0).toList())
nova chamada: assertEquals(ints, array.getJSONArray(0).toList(), "Era esperado valores iguais, mas  ints é diferente de " + result644 + " <array.getJSONArray(0).toList()>")
chamada antiga: assertEquals(4, array.length())
nova chamada: assertEquals(4, array.length(), "Era esperado valores iguais, mas  4 é diferente de " + result645 + " <array.length()>")
chamada antiga: assertEquals(ints, array.toList())
nova chamada: assertEquals(ints, array.toList(), "Era esperado valores iguais, mas  ints é diferente de " + result646 + " <array.toList()>")
chamada antiga: assertEquals(4, array.length())
nova chamada: assertEquals(4, array.length(), "Era esperado valores iguais, mas  4 é diferente de " + result647 + " <array.length()>")
chamada antiga: assertEquals(ints, array.toList())
nova chamada: assertEquals(ints, array.toList(), "Era esperado valores iguais, mas  ints é diferente de " + result648 + " <array.toList()>")
chamada antiga: assertEquals("JSONArray initial value should be a string or collection or array.", ex.getMessage())
nova chamada: assertEquals("JSONArray initial value should be a string or collection or array.", ex.getMessage(), "Era esperado valores iguais, mas  'JSONArray initial value should be a string or collection or array.' é diferente de " + result649 + " <ex.getMessage()>")
chamada antiga: assertFalse(array.isNull(0))
nova chamada: assertFalse(array.isNull(0), "Era esperado falso, mas " + result650 + " <array.isNull(0)> é verdadeiro ")
chamada antiga: assertTrue(array.isNull(1))
nova chamada: assertTrue(array.isNull(1), "Era esperado verdadeiro, mas " + result651 + " <array.isNull(1)> é falso")
chamada antiga: assertTrue(array.isNull(2))
nova chamada: assertTrue(array.isNull(2), "Era esperado verdadeiro, mas " + result652 + " <array.isNull(2)> é falso")
chamada antiga: assertTrue(array.isNull(33))
nova chamada: assertTrue(array.isNull(33), "Era esperado verdadeiro, mas " + result653 + " <array.isNull(33)> é falso")
chamada antiga: assertEquals("[\"Hello World\"]", array.toString())
nova chamada: assertEquals("[\"Hello World\"]", array.toString(), "Era esperado valores iguais, mas  '[\'Hello World\']' é diferente de " + result654 + " <array.toString()>")
chamada antiga: assertTrue(a1.equals(a1))
nova chamada: assertTrue(a1.equals(a1), "Era esperado verdadeiro, mas " + result655 + " <a1.equals(a1)> é falso")
chamada antiga: assertTrue(a1.equals(a2))
nova chamada: assertTrue(a1.equals(a2), "Era esperado verdadeiro, mas " + result656 + " <a1.equals(a2)> é falso")
chamada antiga: assertFalse(a1.equals("moop"))
nova chamada: assertFalse(a1.equals("moop"), "Era esperado falso, mas " + result657 + " <a1.equals('moop')> é verdadeiro ")
chamada antiga: assertFalse(a1.equals(a3))
nova chamada: assertFalse(a1.equals(a3), "Era esperado falso, mas " + result658 + " <a1.equals(a3)> é verdadeiro ")
chamada antiga: assertEquals(message, ex.getMessage())
nova chamada: assertEquals(message, ex.getMessage(), "Era esperado valores iguais, mas  message é diferente de " + result659 + " <ex.getMessage()>")
chamada antiga: assertEquals(HttpMethod.valueOf("GET"), HttpMethod.valueOf("GET"))
nova chamada: assertEquals(HttpMethod.valueOf("GET"), HttpMethod.valueOf("GET"), "Era esperado valores iguais, mas " + result660 + " <HttpMethod.valueOf('GET')> é diferente de " + result661 + " <HttpMethod.valueOf('GET')>")
chamada antiga: assertEquals(HttpMethod.GET, HttpMethod.GET)
nova chamada: assertEquals(HttpMethod.GET, HttpMethod.GET, "Era esperado valores iguais, mas  HttpMethod.GET é diferente de " + " HttpMethod.GET")
chamada antiga: assertNotEquals(HttpMethod.valueOf("GET"), HttpMethod.valueOf("PUT"))
nova chamada: assertNotEquals(HttpMethod.valueOf("GET"), HttpMethod.valueOf("PUT"), "Era esperado valores diferentes, mas " + result662 + " <HttpMethod.valueOf('GET')> é igual a " + result663 + " <HttpMethod.valueOf('PUT')>")
chamada antiga: assertNotEquals(HttpMethod.GET, HttpMethod.PUT)
nova chamada: assertNotEquals(HttpMethod.GET, HttpMethod.PUT, "Era esperado valores diferentes, mas  HttpMethod.GET é igual a " + " HttpMethod.PUT")
chamada antiga: assertEquals(HttpMethod.valueOf("GET"), HttpMethod.valueOf("get"))
nova chamada: assertEquals(HttpMethod.valueOf("GET"), HttpMethod.valueOf("get"), "Era esperado valores iguais, mas " + result664 + " <HttpMethod.valueOf('GET')> é diferente de " + result665 + " <HttpMethod.valueOf('get')>")
chamada antiga: assertEquals(HttpMethod.GET.all(), HttpMethod.all())
nova chamada: assertEquals(HttpMethod.GET.all(), HttpMethod.all(), "Era esperado valores iguais, mas " + result666 + " <HttpMethod.GET.all()> é diferente de " + result667 + " <HttpMethod.all()>")
chamada antiga: assertEquals("UTF-8", getCharSet(null))
nova chamada: assertEquals("UTF-8", getCharSet(null), "Era esperado valores iguais, mas  'UTF-8' é diferente de " + result668 + " <getCharSet(null)>")
chamada antiga: assertEquals("UTF-8", getCharSet(""))
nova chamada: assertEquals("UTF-8", getCharSet(""), "Era esperado valores iguais, mas  'UTF-8' é diferente de " + result669 + " <getCharSet('')>")
chamada antiga: assertEquals("UTF-8", getCharSet("         "))
nova chamada: assertEquals("UTF-8", getCharSet("         "), "Era esperado valores iguais, mas  'UTF-8' é diferente de " + result670 + " <getCharSet('         ')>")
chamada antiga: assertEquals("UTF-8", getCharSet("Content-Type: text/html;"))
nova chamada: assertEquals("UTF-8", getCharSet("Content-Type: text/html;"), "Era esperado valores iguais, mas  'UTF-8' é diferente de " + result671 + " <getCharSet('Content-Type: text/html;')>")
chamada antiga: assertEquals("UTF-8", getCharSet("Content-Type: text/html; charset="))
nova chamada: assertEquals("UTF-8", getCharSet("Content-Type: text/html; charset="), "Era esperado valores iguais, mas  'UTF-8' é diferente de " + result672 + " <getCharSet('Content-Type: text/html; charset=')>")
chamada antiga: assertEquals("LATIN-1", getCharSet("Content-Type: text/html; charset=latin-1"))
nova chamada: assertEquals("LATIN-1", getCharSet("Content-Type: text/html; charset=latin-1"), "Era esperado valores iguais, mas  'LATIN-1' é diferente de " + result673 + " <getCharSet('Content-Type: text/html; charset=latin-1')>")
chamada antiga: assertEquals("KINGON-1", getCharSet(null))
nova chamada: assertEquals("KINGON-1", getCharSet(null), "Era esperado valores iguais, mas  'KINGON-1' é diferente de " + result674 + " <getCharSet(null)>")
chamada antiga: assertEquals("SINDARIN-42", getCharSet(null))
nova chamada: assertEquals("SINDARIN-42", getCharSet(null), "Era esperado valores iguais, mas  'SINDARIN-42' é diferente de " + result675 + " <getCharSet(null)>")
chamada antiga: assertEquals("Accepts", h.getName())
nova chamada: assertEquals("Accepts", h.getName(), "Era esperado valores iguais, mas  'Accepts' é diferente de " + result676 + " <h.getName()>")
chamada antiga: assertEquals("application/json", h.getValue())
nova chamada: assertEquals("application/json", h.getValue(), "Era esperado valores iguais, mas  'application/json' é diferente de " + result677 + " <h.getValue()>")
chamada antiga: assertEquals(0, h.size())
nova chamada: assertEquals(0, h.size(), "Era esperado valores iguais, mas  0 é diferente de " + result678 + " <h.size()>")
chamada antiga: assertEquals("a: 1" + ls + "c: 3" + ls + "d: null", toString)
nova chamada: assertEquals("a: 1" + ls + "c: 3" + ls + "d: null", toString, "Era esperado valores iguais, mas  'a: 1' + ls + 'c: 3' + ls + 'd: null' é diferente de " + " toString")
chamada antiga: assertEquals(h, j)
nova chamada: assertEquals(h, j, "Era esperado valores iguais, mas  h é diferente de " + " j")
chamada antiga: assertNotEquals(h, j)
nova chamada: assertNotEquals(h, j, "Era esperado valores diferentes, mas  h é igual a " + " j")
chamada antiga: assertEquals("application/json", h.getFirst("Accepts"))
nova chamada: assertEquals("application/json", h.getFirst("Accepts"), "Era esperado valores iguais, mas  'application/json' é diferente de " + result679 + " <h.getFirst('Accepts')>")
chamada antiga: assertEquals("application/xml", h.getFirst("Content-Type"))
nova chamada: assertEquals("application/xml", h.getFirst("Content-Type"), "Era esperado valores iguais, mas  'application/xml' é diferente de " + result680 + " <h.getFirst('Content-Type')>")
chamada antiga: assertNotEquals(entry("foo", "qux"), entry("foo", "bar"))
nova chamada: assertNotEquals(entry("foo", "qux"), entry("foo", "bar"), "Era esperado valores diferentes, mas " + result681 + " <entry('foo', 'qux')> é igual a " + result682 + " <entry('foo', 'bar')>")
chamada antiga: assertNotEquals(entry("qux", "bar"), entry("foo", "bar"))
nova chamada: assertNotEquals(entry("qux", "bar"), entry("foo", "bar"), "Era esperado valores diferentes, mas " + result683 + " <entry('qux', 'bar')> é igual a " + result684 + " <entry('foo', 'bar')>")
chamada antiga: assertEquals(entry("foo", "bar"), entry("foo", "bar"))
nova chamada: assertEquals(entry("foo", "bar"), entry("foo", "bar"), "Era esperado valores iguais, mas " + result685 + " <entry('foo', 'bar')> é diferente de " + result686 + " <entry('foo', 'bar')>")
chamada antiga: assertEquals(entry("foo", () -> "bar"), entry("foo", "bar"))
nova chamada: assertEquals(entry("foo", () -> "bar"), entry("foo", "bar"), "Era esperado valores iguais, mas " + result687 + " <entry('foo', () -> 'bar')> é diferente de " + result688 + " <entry('foo', 'bar')>")
chamada antiga: assertEquals(entry("foo", () -> "bar"), entry("foo", () -> "bar"))
nova chamada: assertEquals(entry("foo", () -> "bar"), entry("foo", () -> "bar"), "Era esperado valores iguais, mas " + result689 + " <entry('foo', () -> 'bar')> é diferente de " + result690 + " <entry('foo', () -> 'bar')>")
chamada antiga: assertNull(entry("foo", (Supplier<String>) null).getValue())
nova chamada: assertNull(entry("foo", (Supplier<String>) null).getValue(), "Era esperado nulo, mas " + result691 + " <entry('foo', (Supplier<String>) null).getValue()> não é nulo")
chamada antiga: assertEquals(ZonedDateTime.of(2020, 1, 5, 15, 0, 20, 0, ZoneId.of("GMT")), Util.tryParseToDate("Sun, 05-Jan-2020 15:00:20 GMT"))
nova chamada: assertEquals(ZonedDateTime.of(2020, 1, 5, 15, 0, 20, 0, ZoneId.of("GMT")), Util.tryParseToDate("Sun, 05-Jan-2020 15:00:20 GMT"), "Era esperado valores iguais, mas " + result692 + " <ZonedDateTime.of(2020, 1, 5, 15, 0, 20, 0, ZoneId.of('GMT'))> é diferente de " + result693 + " <Util.tryParseToDate('Sun, 05-Jan-2020 15:00:20 GMT')>")
chamada antiga: assertEquals(ZonedDateTime.of(2020, 3, 6, 16, 5, 35, 0, ZoneId.of("GMT")), Util.tryParseToDate("Fri, 06 Mar 2020 16:05:35 GMT"))
nova chamada: assertEquals(ZonedDateTime.of(2020, 3, 6, 16, 5, 35, 0, ZoneId.of("GMT")), Util.tryParseToDate("Fri, 06 Mar 2020 16:05:35 GMT"), "Era esperado valores iguais, mas " + result694 + " <ZonedDateTime.of(2020, 3, 6, 16, 5, 35, 0, ZoneId.of('GMT'))> é diferente de " + result695 + " <Util.tryParseToDate('Fri, 06 Mar 2020 16:05:35 GMT')>")
chamada antiga: assertEquals(ZonedDateTime.of(2020, 1, 5, 15, 0, 20, 0, ZoneId.of("GMT")), Util.tryParseToDate("Sun, 05-Jan-2020 15:00:20 GMT"))
nova chamada: assertEquals(ZonedDateTime.of(2020, 1, 5, 15, 0, 20, 0, ZoneId.of("GMT")), Util.tryParseToDate("Sun, 05-Jan-2020 15:00:20 GMT"), "Era esperado valores iguais, mas " + result696 + " <ZonedDateTime.of(2020, 1, 5, 15, 0, 20, 0, ZoneId.of('GMT'))> é diferente de " + result697 + " <Util.tryParseToDate('Sun, 05-Jan-2020 15:00:20 GMT')>")
chamada antiga: assertEquals(ZonedDateTime.of(2020, 3, 6, 16, 5, 35, 0, ZoneId.of("GMT")), Util.tryParseToDate("Fri, 06 Mar 2020 16:05:35 GMT"))
nova chamada: assertEquals(ZonedDateTime.of(2020, 3, 6, 16, 5, 35, 0, ZoneId.of("GMT")), Util.tryParseToDate("Fri, 06 Mar 2020 16:05:35 GMT"), "Era esperado valores iguais, mas " + result698 + " <ZonedDateTime.of(2020, 3, 6, 16, 5, 35, 0, ZoneId.of('GMT'))> é diferente de " + result699 + " <Util.tryParseToDate('Fri, 06 Mar 2020 16:05:35 GMT')>")
chamada antiga: assertEquals(Arrays.asList("foo", "bar", "baz"), bodies)
nova chamada: assertEquals(Arrays.asList("foo", "bar", "baz"), bodies, "Era esperado valores iguais, mas " + result700 + " <Arrays.asList('foo', 'bar', 'baz')> é diferente de " + " bodies")
chamada antiga: assertEquals(Arrays.asList("foo", "baz"), bodies)
nova chamada: assertEquals(Arrays.asList("foo", "baz"), bodies, "Era esperado valores iguais, mas " + result701 + " <Arrays.asList('foo', 'baz')> é diferente de " + " bodies")
chamada antiga: assertEquals(Arrays.asList("foo", "baz"), processed)
nova chamada: assertEquals(Arrays.asList("foo", "baz"), processed, "Era esperado valores iguais, mas " + result702 + " <Arrays.asList('foo', 'baz')> é diferente de " + " processed")
chamada antiga: assertNull(processed.get(0))
nova chamada: assertNull(processed.get(0), "Era esperado nulo, mas " + result703 + " <processed.get(0)> não é nulo")
chamada antiga: assertEquals("hello", result)
nova chamada: assertEquals("hello", result, "Era esperado valores iguais, mas  'hello' é diferente de " + " result")
chamada antiga: assertEquals(5, recorder.bytesWritten)
nova chamada: assertEquals(5, recorder.bytesWritten, "Era esperado valores iguais, mas  5 é diferente de " + " recorder.bytesWritten")
chamada antiga: assertEquals(5, recorder.totalBytes)
nova chamada: assertEquals(5, recorder.totalBytes, "Era esperado valores iguais, mas  5 é diferente de " + " recorder.totalBytes")
chamada antiga: assertEquals(5, recorder.bytesWritten)
nova chamada: assertEquals(5, recorder.bytesWritten, "Era esperado valores iguais, mas  5 é diferente de " + " recorder.bytesWritten")
chamada antiga: assertEquals(5, recorder.totalBytes)
nova chamada: assertEquals(5, recorder.totalBytes, "Era esperado valores iguais, mas  5 é diferente de " + " recorder.totalBytes")
chamada antiga: assertEquals(5, recorder.bytesWritten)
nova chamada: assertEquals(5, recorder.bytesWritten, "Era esperado valores iguais, mas  5 é diferente de " + " recorder.bytesWritten")
chamada antiga: assertEquals(5, recorder.totalBytes)
nova chamada: assertEquals(5, recorder.totalBytes, "Era esperado valores iguais, mas  5 é diferente de " + " recorder.totalBytes")
chamada antiga: assertEquals(5, recorder.bytesWritten)
nova chamada: assertEquals(5, recorder.bytesWritten, "Era esperado valores iguais, mas  5 é diferente de " + " recorder.bytesWritten")
chamada antiga: assertEquals(5, recorder.totalBytes)
nova chamada: assertEquals(5, recorder.totalBytes, "Era esperado valores iguais, mas  5 é diferente de " + " recorder.totalBytes")
chamada antiga: assertTrue(r instanceof MockResponse)
nova chamada: assertTrue(r instanceof MockResponse, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertSame(e, u.getCause())
nova chamada: assertSame(e, u.getCause(), "Era esperado objetos iguais, mas  e é diferente de " + result704 + " <u.getCause()>")
chamada antiga: assertEquals(1, compound.size())
nova chamada: assertEquals(1, compound.size(), "Era esperado valores iguais, mas  1 é diferente de " + result705 + " <compound.size()>")
chamada antiga: assertTrue(compound.getInterceptors().get(0) instanceof DefaultInterceptor)
nova chamada: assertTrue(compound.getInterceptors().get(0) instanceof DefaultInterceptor, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(0, compound.size())
nova chamada: assertEquals(0, compound.size(), "Era esperado valores iguais, mas  0 é diferente de " + result706 + " <compound.size()>")
chamada antiga: assertEquals(2, compound.size())
nova chamada: assertEquals(2, compound.size(), "Era esperado valores iguais, mas  2 é diferente de " + result707 + " <compound.size()>")
chamada antiga: assertSame(t1, compound.getInterceptors().get(0))
nova chamada: assertSame(t1, compound.getInterceptors().get(0), "Era esperado objetos iguais, mas  t1 é diferente de " + result708 + " <compound.getInterceptors().get(0)>")
chamada antiga: assertSame(t2, compound.getInterceptors().get(1))
nova chamada: assertSame(t2, compound.getInterceptors().get(1), "Era esperado objetos iguais, mas  t2 é diferente de " + result709 + " <compound.getInterceptors().get(1)>")
chamada antiga: assertEquals(1, compound.size())
nova chamada: assertEquals(1, compound.size(), "Era esperado valores iguais, mas  1 é diferente de " + result710 + " <compound.size()>")
chamada antiga: assertEquals(s, new BaseRequest(new Config(), HttpMethod.GET, s) {
}.url.toString())
nova chamada: assertEquals(s, new BaseRequest(new Config(), HttpMethod.GET, s) {
}.url.toString(), "Era esperado valores iguais, mas  s é diferente de " + result711 + " <new BaseRequest(new Config(), HttpMethod.GET, s) {\n}.url.toString()>")
chamada antiga: assertEquals("{}", actual)
nova chamada: assertEquals("{}", actual, "Era esperado valores iguais, mas  '{}' é diferente de " + " actual")
chamada antiga: assertEquals("{\"date\":\"1985-07-03T18:00:00.042Z\"}", actual)
nova chamada: assertEquals("{\"date\":\"1985-07-03T18:00:00.042Z\"}", actual, "Era esperado valores iguais, mas  '{\'date\':\'1985-07-03T18:00:00.042Z\'}' é diferente de " + " actual")
chamada antiga: assertEquals("{\"date\":\"1985-07-03T00:00:00Z\"}", actual)
nova chamada: assertEquals("{\"date\":\"1985-07-03T00:00:00Z\"}", actual, "Era esperado valores iguais, mas  '{\'date\':\'1985-07-03T00:00:00Z\'}' é diferente de " + " actual")
chamada antiga: assertNull(back.getDate())
nova chamada: assertNull(back.getDate(), "Era esperado nulo, mas " + result712 + " <back.getDate()> não é nulo")
chamada antiga: assertEquals(489263400042L, back.getDate().getTime())
nova chamada: assertEquals(489263400042L, back.getDate().getTime(), "Era esperado valores iguais, mas  489263400042L é diferente de " + result713 + " <back.getDate().getTime()>")
chamada antiga: assertEquals(489196800000L, back.getDate().getTime())
nova chamada: assertEquals(489196800000L, back.getDate().getTime(), "Era esperado valores iguais, mas  489196800000L é diferente de " + result714 + " <back.getDate().getTime()>")
chamada antiga: assertEquals(489263400000L, back.getDate().getTime())
nova chamada: assertEquals(489263400000L, back.getDate().getTime(), "Era esperado valores iguais, mas  489263400000L é diferente de " + result715 + " <back.getDate().getTime()>")
chamada antiga: assertEquals("Could Not Parse as java.util.Date: Leeeeeeeroy Jenkins!", ex.getMessage())
nova chamada: assertEquals("Could Not Parse as java.util.Date: Leeeeeeeroy Jenkins!", ex.getMessage(), "Era esperado valores iguais, mas  'Could Not Parse as java.util.Date: Leeeeeeeroy Jenkins!' é diferente de " + result716 + " <ex.getMessage()>")
chamada antiga: assertEquals(489263400000L, back.getDate().getTime())
nova chamada: assertEquals(489263400000L, back.getDate().getTime(), "Era esperado valores iguais, mas  489263400000L é diferente de " + result717 + " <back.getDate().getTime()>")
chamada antiga: assertEquals(new Date(42), back.getDate())
nova chamada: assertEquals(new Date(42), back.getDate(), "Era esperado valores iguais, mas  new Date(42) é diferente de " + result718 + " <back.getDate()>")
chamada antiga: assertEquals("{\"calendar\":\"1985-07-03T18:00:00.042Z\"}", actual)
nova chamada: assertEquals("{\"calendar\":\"1985-07-03T18:00:00.042Z\"}", actual, "Era esperado valores iguais, mas  '{\'calendar\':\'1985-07-03T18:00:00.042Z\'}' é diferente de " + " actual")
chamada antiga: assertEquals("{\"calendar\":\"1985-07-03T00:00:00Z\"}", actual)
nova chamada: assertEquals("{\"calendar\":\"1985-07-03T00:00:00Z\"}", actual, "Era esperado valores iguais, mas  '{\'calendar\':\'1985-07-03T00:00:00Z\'}' é diferente de " + " actual")
chamada antiga: assertEquals(489263400042L, back.getCalendar().getTimeInMillis())
nova chamada: assertEquals(489263400042L, back.getCalendar().getTimeInMillis(), "Era esperado valores iguais, mas  489263400042L é diferente de " + result719 + " <back.getCalendar().getTimeInMillis()>")
chamada antiga: assertEquals(489263400000L, back.getCalendar().getTimeInMillis())
nova chamada: assertEquals(489263400000L, back.getCalendar().getTimeInMillis(), "Era esperado valores iguais, mas  489263400000L é diferente de " + result720 + " <back.getCalendar().getTimeInMillis()>")
chamada antiga: assertEquals(489263400000L, back.getCalendar().getTimeInMillis())
nova chamada: assertEquals(489263400000L, back.getCalendar().getTimeInMillis(), "Era esperado valores iguais, mas  489263400000L é diferente de " + result721 + " <back.getCalendar().getTimeInMillis()>")
chamada antiga: assertEquals(489196800000L, back.getCalendar().getTimeInMillis())
nova chamada: assertEquals(489196800000L, back.getCalendar().getTimeInMillis(), "Era esperado valores iguais, mas  489196800000L é diferente de " + result722 + " <back.getCalendar().getTimeInMillis()>")
chamada antiga: assertEquals("Could Not Parse as java.util.Calendar: Leeeeeeeroy Jenkins!", ex.getMessage())
nova chamada: assertEquals("Could Not Parse as java.util.Calendar: Leeeeeeeroy Jenkins!", ex.getMessage(), "Era esperado valores iguais, mas  'Could Not Parse as java.util.Calendar: Leeeeeeeroy Jenkins!' é diferente de " + result723 + " <ex.getMessage()>")
chamada antiga: assertEquals("{\"zonedDateTime\":\"1985-07-03T18:00:00.042Z\"}", actual)
nova chamada: assertEquals("{\"zonedDateTime\":\"1985-07-03T18:00:00.042Z\"}", actual, "Era esperado valores iguais, mas  '{\'zonedDateTime\':\'1985-07-03T18:00:00.042Z\'}' é diferente de " + " actual")
chamada antiga: assertEquals(ZonedDateTime.parse("1985-07-03T18:30:00.042Z"), back.getZonedDateTime())
nova chamada: assertEquals(ZonedDateTime.parse("1985-07-03T18:30:00.042Z"), back.getZonedDateTime(), "Era esperado valores iguais, mas " + result724 + " <ZonedDateTime.parse('1985-07-03T18:30:00.042Z')> é diferente de " + result725 + " <back.getZonedDateTime()>")
chamada antiga: assertEquals(ZonedDateTime.parse("1985-07-03T18:30:00.042+02:00"), back.getZonedDateTime())
nova chamada: assertEquals(ZonedDateTime.parse("1985-07-03T18:30:00.042+02:00"), back.getZonedDateTime(), "Era esperado valores iguais, mas " + result726 + " <ZonedDateTime.parse('1985-07-03T18:30:00.042+02:00')> é diferente de " + result727 + " <back.getZonedDateTime()>")
chamada antiga: assertEquals("{\"localDateTime\":\"1985-07-03T18:00:00.042\"}", actual)
nova chamada: assertEquals("{\"localDateTime\":\"1985-07-03T18:00:00.042\"}", actual, "Era esperado valores iguais, mas  '{\'localDateTime\':\'1985-07-03T18:00:00.042\'}' é diferente de " + " actual")
chamada antiga: assertEquals(LocalDateTime.parse("1985-07-03T18:00:00.042"), back.getLocalDateTime())
nova chamada: assertEquals(LocalDateTime.parse("1985-07-03T18:00:00.042"), back.getLocalDateTime(), "Era esperado valores iguais, mas " + result728 + " <LocalDateTime.parse('1985-07-03T18:00:00.042')> é diferente de " + result729 + " <back.getLocalDateTime()>")
chamada antiga: assertEquals(LocalDateTime.parse("1985-07-03T00:00"), back.getLocalDateTime())
nova chamada: assertEquals(LocalDateTime.parse("1985-07-03T00:00"), back.getLocalDateTime(), "Era esperado valores iguais, mas " + result730 + " <LocalDateTime.parse('1985-07-03T00:00')> é diferente de " + result731 + " <back.getLocalDateTime()>")
chamada antiga: assertEquals("{\"localDate\":\"1985-07-03\"}", actual)
nova chamada: assertEquals("{\"localDate\":\"1985-07-03\"}", actual, "Era esperado valores iguais, mas  '{\'localDate\':\'1985-07-03\'}' é diferente de " + " actual")
chamada antiga: assertEquals(LocalDate.parse("1985-07-03"), back.getLocalDate())
nova chamada: assertEquals(LocalDate.parse("1985-07-03"), back.getLocalDate(), "Era esperado valores iguais, mas " + result732 + " <LocalDate.parse('1985-07-03')> é diferente de " + result733 + " <back.getLocalDate()>")
chamada antiga: assertEquals(LocalDate.parse("1985-07-03"), back.getLocalDate())
nova chamada: assertEquals(LocalDate.parse("1985-07-03"), back.getLocalDate(), "Era esperado valores iguais, mas " + result734 + " <LocalDate.parse('1985-07-03')> é diferente de " + result735 + " <back.getLocalDate()>")
chamada antiga: assertEquals("{\"test\":\"it's a && b || c + 1!?\"}", res)
nova chamada: assertEquals("{\"test\":\"it's a && b || c + 1!?\"}", res, "Era esperado valores iguais, mas  '{\'test\':\'it's a && b || c + 1!?\'}' é diferente de " + " res")
chamada antiga: assertEquals(1000, parseToMillies("1"))
nova chamada: assertEquals(1000, parseToMillies("1"), "Era esperado valores iguais, mas  1000 é diferente de " + result736 + " <parseToMillies('1')>")
chamada antiga: assertEquals(10000, parseToMillies("10"))
nova chamada: assertEquals(10000, parseToMillies("10"), "Era esperado valores iguais, mas  10000 é diferente de " + result737 + " <parseToMillies('10')>")
chamada antiga: assertEquals(1500, parseToMillies("1.5"))
nova chamada: assertEquals(1500, parseToMillies("1.5"), "Era esperado valores iguais, mas  1500 é diferente de " + result738 + " <parseToMillies('1.5')>")
chamada antiga: assertEquals(50, parseToMillies(".05"))
nova chamada: assertEquals(50, parseToMillies(".05"), "Era esperado valores iguais, mas  50 é diferente de " + result739 + " <parseToMillies('.05')>")
chamada antiga: assertEquals(1000, parseToMillies("Wed, 21 Oct 2015 07:28:01 GMT"))
nova chamada: assertEquals(1000, parseToMillies("Wed, 21 Oct 2015 07:28:01 GMT"), "Era esperado valores iguais, mas  1000 é diferente de " + result740 + " <parseToMillies('Wed, 21 Oct 2015 07:28:01 GMT')>")
chamada antiga: assertFalse(node.isArray())
nova chamada: assertFalse(node.isArray(), "Era esperado falso, mas " + result741 + " <node.isArray()> é verdadeiro ")
chamada antiga: assertEquals("bar", node.getObject().getString("foo"))
nova chamada: assertEquals("bar", node.getObject().getString("foo"), "Era esperado valores iguais, mas  'bar' é diferente de " + result742 + " <node.getObject().getString('foo')>")
chamada antiga: assertEquals("bar", node.getArray().getJSONObject(0).getString("foo"))
nova chamada: assertEquals("bar", node.getArray().getJSONObject(0).getString("foo"), "Era esperado valores iguais, mas  'bar' é diferente de " + result743 + " <node.getArray().getJSONObject(0).getString('foo')>")
chamada antiga: assertEquals(json, node.toString())
nova chamada: assertEquals(json, node.toString(), "Era esperado valores iguais, mas  json é diferente de " + result744 + " <node.toString()>")
chamada antiga: assertTrue(node.isArray())
nova chamada: assertTrue(node.isArray(), "Era esperado verdadeiro, mas " + result745 + " <node.isArray()> é falso")
chamada antiga: assertEquals("bar", node.getArray().getJSONObject(0).getString("foo"))
nova chamada: assertEquals("bar", node.getArray().getJSONObject(0).getString("foo"), "Era esperado valores iguais, mas  'bar' é diferente de " + result746 + " <node.getArray().getJSONObject(0).getString('foo')>")
chamada antiga: assertNull(node.getObject())
nova chamada: assertNull(node.getObject(), "Era esperado nulo, mas " + result747 + " <node.getObject()> não é nulo")
chamada antiga: assertEquals(json, node.toString())
nova chamada: assertEquals(json, node.toString(), "Era esperado valores iguais, mas  json é diferente de " + result748 + " <node.toString()>")
chamada antiga: assertEquals("{}", new JsonNode("").toString())
nova chamada: assertEquals("{}", new JsonNode("").toString(), "Era esperado valores iguais, mas  '{}' é diferente de " + result749 + " <new JsonNode('').toString()>")
chamada antiga: assertEquals("{}", new JsonNode(null).toString())
nova chamada: assertEquals("{}", new JsonNode(null).toString(), "Era esperado valores iguais, mas  '{}' é diferente de " + result750 + " <new JsonNode(null).toString()>")
chamada antiga: assertEquals(new JsonPatchItem(add, "/foo", "bar"), new JsonPatchItem(add, "/foo", "bar"))
nova chamada: assertEquals(new JsonPatchItem(add, "/foo", "bar"), new JsonPatchItem(add, "/foo", "bar"), "Era esperado valores iguais, mas  new JsonPatchItem(add, '/foo', 'bar') é diferente de " + " new JsonPatchItem(add, '/foo', 'bar')")
chamada antiga: assertEquals(new JsonPatchItem(remove, "/foo"), new JsonPatchItem(remove, "/foo"))
nova chamada: assertEquals(new JsonPatchItem(remove, "/foo"), new JsonPatchItem(remove, "/foo"), "Era esperado valores iguais, mas  new JsonPatchItem(remove, '/foo') é diferente de " + " new JsonPatchItem(remove, '/foo')")
chamada antiga: assertNotEquals(new JsonPatchItem(add, "/foo", "bar"), new JsonPatchItem(add, "/foo", "baz"))
nova chamada: assertNotEquals(new JsonPatchItem(add, "/foo", "bar"), new JsonPatchItem(add, "/foo", "baz"), "Era esperado valores diferentes, mas  new JsonPatchItem(add, '/foo', 'bar') é igual a " + " new JsonPatchItem(add, '/foo', 'baz')")
chamada antiga: assertNotEquals(new JsonPatchItem(add, "/foo", "bar"), new JsonPatchItem(replace, "/foo", "bar"))
nova chamada: assertNotEquals(new JsonPatchItem(add, "/foo", "bar"), new JsonPatchItem(replace, "/foo", "bar"), "Era esperado valores diferentes, mas  new JsonPatchItem(add, '/foo', 'bar') é igual a " + " new JsonPatchItem(replace, '/foo', 'bar')")
chamada antiga: assertNotEquals(new JsonPatchItem(remove, "/foo"), new JsonPatchItem(remove, "/foo", "baz"))
nova chamada: assertNotEquals(new JsonPatchItem(remove, "/foo"), new JsonPatchItem(remove, "/foo", "baz"), "Era esperado valores diferentes, mas  new JsonPatchItem(remove, '/foo') é igual a " + " new JsonPatchItem(remove, '/foo', 'baz')")
chamada antiga: assertEquals(1, s.size())
nova chamada: assertEquals(1, s.size(), "Era esperado valores iguais, mas  1 é diferente de " + result751 + " <s.size()>")
chamada antiga: assertEquals(i, i)
nova chamada: assertEquals(i, i, "Era esperado valores iguais, mas  i é diferente de " + " i")
chamada antiga: assertNotEquals(null, i)
nova chamada: assertNotEquals(null, i, "Era esperado valores diferentes, mas  null é igual a " + " i")
chamada antiga: assertNotEquals(new Object(), i)
nova chamada: assertNotEquals(new Object(), i, "Era esperado valores diferentes, mas  new Object() é igual a " + " i")
chamada antiga: assertEquals(add, i.getOp())
nova chamada: assertEquals(add, i.getOp(), "Era esperado valores iguais, mas  add é diferente de " + result752 + " <i.getOp()>")
chamada antiga: assertEquals("/foo", i.getPath())
nova chamada: assertEquals("/foo", i.getPath(), "Era esperado valores iguais, mas  '/foo' é diferente de " + result753 + " <i.getPath()>")
chamada antiga: assertEquals("bar", i.getValue())
nova chamada: assertEquals("bar", i.getValue(), "Era esperado valores iguais, mas  'bar' é diferente de " + result754 + " <i.getValue()>")
chamada antiga: assertEquals(42, request.getSocketTimeout())
nova chamada: assertEquals(42, request.getSocketTimeout(), "Era esperado valores iguais, mas  42 é diferente de " + result755 + " <request.getSocketTimeout()>")
chamada antiga: assertEquals(111, request.getSocketTimeout())
nova chamada: assertEquals(111, request.getSocketTimeout(), "Era esperado valores iguais, mas  111 é diferente de " + result756 + " <request.getSocketTimeout()>")
chamada antiga: assertEquals(42, request.getConnectTimeout())
nova chamada: assertEquals(42, request.getConnectTimeout(), "Era esperado valores iguais, mas  42 é diferente de " + result757 + " <request.getConnectTimeout()>")
chamada antiga: assertEquals(111, request.getConnectTimeout())
nova chamada: assertEquals(111, request.getConnectTimeout(), "Era esperado valores iguais, mas  111 é diferente de " + result758 + " <request.getConnectTimeout()>")
chamada antiga: assertEquals(111, copy.getSocketTimeout())
nova chamada: assertEquals(111, copy.getSocketTimeout(), "Era esperado valores iguais, mas  111 é diferente de " + result759 + " <copy.getSocketTimeout()>")
chamada antiga: assertEquals(222, copy.getConnectTimeout())
nova chamada: assertEquals(222, copy.getConnectTimeout(), "Era esperado valores iguais, mas  222 é diferente de " + result760 + " <copy.getConnectTimeout()>")
chamada antiga: assertEquals(cp, request.getProxy())
nova chamada: assertEquals(cp, request.getProxy(), "Era esperado valores iguais, mas  cp é diferente de " + result761 + " <request.getProxy()>")
chamada antiga: assertEquals("bar", request.getProxy().getHost())
nova chamada: assertEquals("bar", request.getProxy().getHost(), "Era esperado valores iguais, mas  'bar' é diferente de " + result762 + " <request.getProxy().getHost()>")
chamada antiga: assertEquals(7979, request.getProxy().getPort().intValue())
nova chamada: assertEquals(7979, request.getProxy().getPort().intValue(), "Era esperado valores iguais, mas  7979 é diferente de " + result763 + " <request.getProxy().getPort().intValue()>")
chamada antiga: assertEquals(new TestRequest(GET, "/path"), new TestRequest(GET, "/path"))
nova chamada: assertEquals(new TestRequest(GET, "/path"), new TestRequest(GET, "/path"), "Era esperado valores iguais, mas  new TestRequest(GET, '/path') é diferente de " + " new TestRequest(GET, '/path')")
chamada antiga: assertNotEquals(new TestRequest(GET, "/path"), new TestRequest(HttpMethod.HEAD, "/path"))
nova chamada: assertNotEquals(new TestRequest(GET, "/path"), new TestRequest(HttpMethod.HEAD, "/path"), "Era esperado valores diferentes, mas  new TestRequest(GET, '/path') é igual a " + " new TestRequest(HttpMethod.HEAD, '/path')")
chamada antiga: assertNotEquals(new TestRequest(GET, "/path"), new TestRequest(GET, "/derp"))
nova chamada: assertNotEquals(new TestRequest(GET, "/path"), new TestRequest(GET, "/derp"), "Era esperado valores diferentes, mas  new TestRequest(GET, '/path') é igual a " + " new TestRequest(GET, '/derp')")
chamada antiga: assertEquals(new TestRequest(of("Accept", "json")), new TestRequest(of("Accept", "json")))
nova chamada: assertEquals(new TestRequest(of("Accept", "json")), new TestRequest(of("Accept", "json")), "Era esperado valores iguais, mas  new TestRequest(of('Accept', 'json')) é diferente de " + " new TestRequest(of('Accept', 'json'))")
chamada antiga: assertNotEquals(new TestRequest(of("Accept", "json")), new TestRequest(of("Accept", "xml")))
nova chamada: assertNotEquals(new TestRequest(of("Accept", "json")), new TestRequest(of("Accept", "xml")), "Era esperado valores diferentes, mas  new TestRequest(of('Accept', 'json')) é igual a " + " new TestRequest(of('Accept', 'xml'))")
chamada antiga: assertNotEquals(new TestRequest(of("Accept", "json")), new TestRequest(of("Accept", "json", "x-header", "cheese")))
nova chamada: assertNotEquals(new TestRequest(of("Accept", "json")), new TestRequest(of("Accept", "json", "x-header", "cheese")), "Era esperado valores diferentes, mas  new TestRequest(of('Accept', 'json')) é igual a " + " new TestRequest(of('Accept', 'json', 'x-header', 'cheese'))")
chamada antiga: assertTrue(ChronoUnit.MILLIS.between(request.getCreationTime(), Instant.now()) < 10)
nova chamada: assertTrue(ChronoUnit.MILLIS.between(request.getCreationTime(), Instant.now()) < 10, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(r1.getCreationTime(), r2.getCreationTime())
nova chamada: assertEquals(r1.getCreationTime(), r2.getCreationTime(), "Era esperado valores iguais, mas " + result764 + " <r1.getCreationTime()> é diferente de " + result765 + " <r2.getCreationTime()>")
chamada antiga: assertEquals(50L, ChronoUnit.MINUTES.between(r1.getCreationTime(), r3.getCreationTime()))
nova chamada: assertEquals(50L, ChronoUnit.MINUTES.between(r1.getCreationTime(), r3.getCreationTime()), "Era esperado valores iguais, mas  50L é diferente de " + result766 + " <ChronoUnit.MINUTES.between(r1.getCreationTime(), r3.getCreationTime())>")
chamada antiga: assertTrue(part.isFile())
nova chamada: assertTrue(part.isFile(), "Era esperado verdadeiro, mas " + result767 + " <part.isFile()> é falso")
chamada antiga: assertEquals("uploadFile=foo.xml", part.toString())
nova chamada: assertEquals("uploadFile=foo.xml", part.toString(), "Era esperado valores iguais, mas  'uploadFile=foo.xml' é diferente de " + result768 + " <part.toString()>")
chamada antiga: assertEquals("foo", test.text)
nova chamada: assertEquals("foo", test.text, "Era esperado valores iguais, mas  'foo' é diferente de " + " test.text")
chamada antiga: assertEquals(42, test.nmbr)
nova chamada: assertEquals(42, test.nmbr, "Era esperado valores iguais, mas  42 é diferente de " + " test.nmbr")
chamada antiga: assertEquals("bar", test.another.text)
nova chamada: assertEquals("bar", test.another.text, "Era esperado valores iguais, mas  'bar' é diferente de " + " test.another.text")
chamada antiga: assertEquals(666, test.another.nmbr)
nova chamada: assertEquals(666, test.another.nmbr, "Era esperado valores iguais, mas  666 é diferente de " + " test.another.nmbr")
chamada antiga: assertEquals(null, test.another.another)
nova chamada: assertEquals(null, test.another.another, "Era esperado valores iguais, mas  null é diferente de " + " test.another.another")
chamada antiga: assertEquals("foo", test.text)
nova chamada: assertEquals("foo", test.text, "Era esperado valores iguais, mas  'foo' é diferente de " + " test.text")
chamada antiga: assertEquals(42, test.nmbr)
nova chamada: assertEquals(42, test.nmbr, "Era esperado valores iguais, mas  42 é diferente de " + " test.nmbr")
chamada antiga: assertEquals("bar", test.another.text)
nova chamada: assertEquals("bar", test.another.text, "Era esperado valores iguais, mas  'bar' é diferente de " + " test.another.text")
chamada antiga: assertEquals(666, test.another.nmbr)
nova chamada: assertEquals(666, test.another.nmbr, "Era esperado valores iguais, mas  666 é diferente de " + " test.another.nmbr")
chamada antiga: assertEquals(null, test.another.another)
nova chamada: assertEquals(null, test.another.another, "Era esperado valores iguais, mas  null é diferente de " + " test.another.another")
Total asserts: 1043
Asserts sem descrição: 988
Asserts com descrição: 55
Assertion Roulette: 706

Após do refactor: 
Total asserts: 1043
Asserts sem descrição: 81
Asserts com descrição: 962
Assertion Roulette: 61
