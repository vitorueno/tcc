
Projeto: /home/vitor-otto/opensource/optaplanner-9.35.0.Beta2

Antes do refactor: 
chamada antiga: Assertions.assertEquals("0", result.get("score"))
nova chamada: assertEquals("0", result.get("score"), "Era esperado valores iguais, mas  '0' é diferente de " + result0 + " <result.get('score')>")
chamada antiga: Assertions.assertNotNull(result.get("entity.0.fullValue"))
nova chamada: assertNotNull(result.get("entity.0.fullValue"), "Era esperado não nulo, mas " + result1 + " <result.get('entity.0.fullValue')> é nulo")
chamada antiga: Assertions.assertNotNull(result.get("entity.1.fullValue"))
nova chamada: assertNotNull(result.get("entity.1.fullValue"), "Era esperado não nulo, mas " + result2 + " <result.get('entity.1.fullValue')> é nulo")
chamada antiga: assertNotNull(solverConfig)
nova chamada: assertNotNull(solverConfig, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(DomainAccessType.GIZMO, solverConfig.getDomainAccessType())
nova chamada: assertEquals(DomainAccessType.GIZMO, solverConfig.getDomainAccessType(), "Era esperado valores iguais, mas  DomainAccessType.GIZMO é diferente de " + result3 + " <solverConfig.getDomainAccessType()>")
chamada antiga: assertEquals(TestdataQuarkusSolution.class, solverConfig.getSolutionClass())
nova chamada: assertEquals(TestdataQuarkusSolution.class, solverConfig.getSolutionClass(), "Era esperado valores iguais, mas  TestdataQuarkusSolution.class é diferente de " + result4 + " <solverConfig.getSolutionClass()>")
chamada antiga: assertEquals(Collections.singletonList(TestdataQuarkusEntity.class), solverConfig.getEntityClassList())
nova chamada: assertEquals(Collections.singletonList(TestdataQuarkusEntity.class), solverConfig.getEntityClassList(), "Era esperado valores iguais, mas " + result5 + " <Collections.singletonList(TestdataQuarkusEntity.class)> é diferente de " + result6 + " <solverConfig.getEntityClassList()>")
chamada antiga: assertEquals(TestdataQuarkusConstraintProvider.class, solverConfig.getScoreDirectorFactoryConfig().getConstraintProviderClass())
nova chamada: assertEquals(TestdataQuarkusConstraintProvider.class, solverConfig.getScoreDirectorFactoryConfig().getConstraintProviderClass(), "Era esperado valores iguais, mas  TestdataQuarkusConstraintProvider.class é diferente de " + result7 + " <solverConfig.getScoreDirectorFactoryConfig().getConstraintProviderClass()>")
chamada antiga: assertEquals(3L, solverConfig.getTerminationConfig().getSecondsSpentLimit().longValue())
nova chamada: assertEquals(3L, solverConfig.getTerminationConfig().getSecondsSpentLimit().longValue(), "Era esperado valores iguais, mas  3L é diferente de " + result8 + " <solverConfig.getTerminationConfig().getSecondsSpentLimit().longValue()>")
chamada antiga: assertNotNull(solverFactory)
nova chamada: assertNotNull(solverFactory, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(solverFactory.buildSolver())
nova chamada: assertNotNull(solverFactory.buildSolver(), "Era esperado não nulo, mas " + result9 + " <solverFactory.buildSolver()> é nulo")
chamada antiga: assertNotNull(solverConfig)
nova chamada: assertNotNull(solverConfig, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(TestdataQuarkusSolution.class, solverConfig.getSolutionClass())
nova chamada: assertEquals(TestdataQuarkusSolution.class, solverConfig.getSolutionClass(), "Era esperado valores iguais, mas  TestdataQuarkusSolution.class é diferente de " + result10 + " <solverConfig.getSolutionClass()>")
chamada antiga: assertEquals(DomainAccessType.GIZMO, solverConfig.getDomainAccessType())
nova chamada: assertEquals(DomainAccessType.GIZMO, solverConfig.getDomainAccessType(), "Era esperado valores iguais, mas  DomainAccessType.GIZMO é diferente de " + result11 + " <solverConfig.getDomainAccessType()>")
chamada antiga: assertEquals(Collections.singletonList(TestdataQuarkusEntity.class), solverConfig.getEntityClassList())
nova chamada: assertEquals(Collections.singletonList(TestdataQuarkusEntity.class), solverConfig.getEntityClassList(), "Era esperado valores iguais, mas " + result12 + " <Collections.singletonList(TestdataQuarkusEntity.class)> é diferente de " + result13 + " <solverConfig.getEntityClassList()>")
chamada antiga: assertEquals(TestdataQuarkusConstraintProvider.class, solverConfig.getScoreDirectorFactoryConfig().getConstraintProviderClass())
nova chamada: assertEquals(TestdataQuarkusConstraintProvider.class, solverConfig.getScoreDirectorFactoryConfig().getConstraintProviderClass(), "Era esperado valores iguais, mas  TestdataQuarkusConstraintProvider.class é diferente de " + result14 + " <solverConfig.getScoreDirectorFactoryConfig().getConstraintProviderClass()>")
chamada antiga: assertEquals(2L, solverConfig.getTerminationConfig().getSecondsSpentLimit().longValue())
nova chamada: assertEquals(2L, solverConfig.getTerminationConfig().getSecondsSpentLimit().longValue(), "Era esperado valores iguais, mas  2L é diferente de " + result15 + " <solverConfig.getTerminationConfig().getSecondsSpentLimit().longValue()>")
chamada antiga: assertNotNull(solverFactory)
nova chamada: assertNotNull(solverFactory, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(solverFactory.buildSolver())
nova chamada: assertNotNull(solverFactory.buildSolver(), "Era esperado não nulo, mas " + result16 + " <solverFactory.buildSolver()> é nulo")
chamada antiga: assertEquals(EnvironmentMode.FULL_ASSERT, solverConfig.getEnvironmentMode())
nova chamada: assertEquals(EnvironmentMode.FULL_ASSERT, solverConfig.getEnvironmentMode(), "Era esperado valores iguais, mas  EnvironmentMode.FULL_ASSERT é diferente de " + result17 + " <solverConfig.getEnvironmentMode()>")
chamada antiga: assertTrue(solverConfig.getDaemon())
nova chamada: assertTrue(solverConfig.getDaemon(), "Era esperado verdadeiro, mas " + result18 + " <solverConfig.getDaemon()> é falso")
chamada antiga: assertEquals("2", solverConfig.getMoveThreadCount())
nova chamada: assertEquals("2", solverConfig.getMoveThreadCount(), "Era esperado valores iguais, mas  '2' é diferente de " + result19 + " <solverConfig.getMoveThreadCount()>")
chamada antiga: assertEquals(DomainAccessType.REFLECTION, solverConfig.getDomainAccessType())
nova chamada: assertEquals(DomainAccessType.REFLECTION, solverConfig.getDomainAccessType(), "Era esperado valores iguais, mas  DomainAccessType.REFLECTION é diferente de " + result20 + " <solverConfig.getDomainAccessType()>")
chamada antiga: assertEquals(null, solverConfig.getScoreDirectorFactoryConfig().getConstraintStreamImplType())
nova chamada: assertEquals(null, solverConfig.getScoreDirectorFactoryConfig().getConstraintStreamImplType(), "Era esperado valores iguais, mas  null é diferente de " + result21 + " <solverConfig.getScoreDirectorFactoryConfig().getConstraintStreamImplType()>")
chamada antiga: assertNotNull(solverFactory)
nova chamada: assertNotNull(solverFactory, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(Duration.ofHours(4), solverConfig.getTerminationConfig().getSpentLimit())
nova chamada: assertEquals(Duration.ofHours(4), solverConfig.getTerminationConfig().getSpentLimit(), "Era esperado valores iguais, mas " + result22 + " <Duration.ofHours(4)> é diferente de " + result23 + " <solverConfig.getTerminationConfig().getSpentLimit()>")
chamada antiga: assertEquals(Duration.ofHours(5), solverConfig.getTerminationConfig().getUnimprovedSpentLimit())
nova chamada: assertEquals(Duration.ofHours(5), solverConfig.getTerminationConfig().getUnimprovedSpentLimit(), "Era esperado valores iguais, mas " + result24 + " <Duration.ofHours(5)> é diferente de " + result25 + " <solverConfig.getTerminationConfig().getUnimprovedSpentLimit()>")
chamada antiga: assertEquals(SimpleScore.of(0).toString(), solverConfig.getTerminationConfig().getBestScoreLimit())
nova chamada: assertEquals(SimpleScore.of(0).toString(), solverConfig.getTerminationConfig().getBestScoreLimit(), "Era esperado valores iguais, mas " + result26 + " <SimpleScore.of(0).toString()> é diferente de " + result27 + " <solverConfig.getTerminationConfig().getBestScoreLimit()>")
chamada antiga: assertNotNull(solverConfig)
nova chamada: assertNotNull(solverConfig, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(TestdataQuarkusSolution.class, solverConfig.getSolutionClass())
nova chamada: assertEquals(TestdataQuarkusSolution.class, solverConfig.getSolutionClass(), "Era esperado valores iguais, mas  TestdataQuarkusSolution.class é diferente de " + result28 + " <solverConfig.getSolutionClass()>")
chamada antiga: assertEquals(DomainAccessType.GIZMO, solverConfig.getDomainAccessType())
nova chamada: assertEquals(DomainAccessType.GIZMO, solverConfig.getDomainAccessType(), "Era esperado valores iguais, mas  DomainAccessType.GIZMO é diferente de " + result29 + " <solverConfig.getDomainAccessType()>")
chamada antiga: assertEquals(Collections.singletonList(TestdataQuarkusEntity.class), solverConfig.getEntityClassList())
nova chamada: assertEquals(Collections.singletonList(TestdataQuarkusEntity.class), solverConfig.getEntityClassList(), "Era esperado valores iguais, mas " + result30 + " <Collections.singletonList(TestdataQuarkusEntity.class)> é diferente de " + result31 + " <solverConfig.getEntityClassList()>")
chamada antiga: assertEquals(TestdataQuarkusConstraintProvider.class, solverConfig.getScoreDirectorFactoryConfig().getConstraintProviderClass())
nova chamada: assertEquals(TestdataQuarkusConstraintProvider.class, solverConfig.getScoreDirectorFactoryConfig().getConstraintProviderClass(), "Era esperado valores iguais, mas  TestdataQuarkusConstraintProvider.class é diferente de " + result32 + " <solverConfig.getScoreDirectorFactoryConfig().getConstraintProviderClass()>")
chamada antiga: assertNull(solverConfig.getTerminationConfig().getSecondsSpentLimit())
nova chamada: assertNull(solverConfig.getTerminationConfig().getSecondsSpentLimit(), "Era esperado nulo, mas " + result33 + " <solverConfig.getTerminationConfig().getSecondsSpentLimit()> não é nulo")
chamada antiga: assertNotNull(solverFactory)
nova chamada: assertNotNull(solverFactory, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(solverFactory.buildSolver())
nova chamada: assertNotNull(solverFactory.buildSolver(), "Era esperado não nulo, mas " + result34 + " <solverFactory.buildSolver()> é nulo")
chamada antiga: assertNotNull(solution)
nova chamada: assertNotNull(solution, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: Assertions.assertEquals("secondsSpentLimit=2", resp)
nova chamada: assertEquals("secondsSpentLimit=2", resp, "Era esperado valores iguais, mas  'secondsSpentLimit=2' é diferente de " + " resp")
chamada antiga: Assertions.assertEquals("secondsSpentLimit=9", resp)
nova chamada: assertEquals("secondsSpentLimit=9", resp, "Era esperado valores iguais, mas  'secondsSpentLimit=9' é diferente de " + " resp")
chamada antiga: assertNotNull(solution)
nova chamada: assertNotNull(solution, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(entityList.size(), solution.getEntityList().size())
nova chamada: assertEquals(entityList.size(), solution.getEntityList().size(), "Era esperado valores iguais, mas " + result35 + " <entityList.size()> é diferente de " + result36 + " <solution.getEntityList().size()>")
chamada antiga: fail("Build should fail")
nova chamada: fail("Build should fail", "A execução falhou por uma causa deliberada")
chamada antiga: assertNotNull(solverFactory)
nova chamada: assertNotNull(solverFactory, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(scoreManager)
nova chamada: assertNotNull(scoreManager, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertSame(((DefaultSolverFactory<?>) solverFactory).getScoreDirectorFactory(), ((DefaultSolutionManager<?, ?>) solutionManager).getScoreDirectorFactory())
nova chamada: assertSame(((DefaultSolverFactory<?>) solverFactory).getScoreDirectorFactory(), ((DefaultSolutionManager<?, ?>) solutionManager).getScoreDirectorFactory(), "Era esperado objetos iguais, mas " + result37 + " <((DefaultSolverFactory<?>) solverFactory).getScoreDirectorFactory()> é diferente de " + result38 + " <((DefaultSolutionManager<?, ?>) solutionManager).getScoreDirectorFactory()>")
chamada antiga: assertNotNull(solverManager)
nova chamada: assertNotNull(solverManager, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertSame(solverFactory, ((DefaultSolverManager<TestDataKitchenSinkSolution, Long>) solverManager).getSolverFactory())
nova chamada: assertSame(solverFactory, ((DefaultSolverManager<TestDataKitchenSinkSolution, Long>) solverManager).getSolverFactory(), "Era esperado objetos iguais, mas  solverFactory é diferente de " + result39 + " <((DefaultSolverManager<TestDataKitchenSinkSolution, Long>) solverManager).getSolverFactory()>")
chamada antiga: assertNotNull(solution)
nova chamada: assertNotNull(solution, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(1, solution.getPlanningEntityProperty().testGetIntVariable())
nova chamada: assertEquals(1, solution.getPlanningEntityProperty().testGetIntVariable(), "Era esperado valores iguais, mas  1 é diferente de " + result40 + " <solution.getPlanningEntityProperty().testGetIntVariable()>")
chamada antiga: assertEquals("A", solution.getPlanningEntityProperty().testGetStringVariable())
nova chamada: assertEquals("A", solution.getPlanningEntityProperty().testGetStringVariable(), "Era esperado valores iguais, mas  'A' é diferente de " + result41 + " <solution.getPlanningEntityProperty().testGetStringVariable()>")
chamada antiga: assertNotNull(solverFactory)
nova chamada: assertNotNull(solverFactory, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertSame(((DefaultSolverFactory<TestdataQuarkusSolution>) solverFactory).getScoreDirectorFactory(), ((DefaultSolutionManager<TestdataQuarkusSolution, SimpleScore>) solutionManager).getScoreDirectorFactory())
nova chamada: assertSame(((DefaultSolverFactory<TestdataQuarkusSolution>) solverFactory).getScoreDirectorFactory(), ((DefaultSolutionManager<TestdataQuarkusSolution, SimpleScore>) solutionManager).getScoreDirectorFactory(), "Era esperado objetos iguais, mas " + result42 + " <((DefaultSolverFactory<TestdataQuarkusSolution>) solverFactory).getScoreDirectorFactory()> é diferente de " + result43 + " <((DefaultSolutionManager<TestdataQuarkusSolution, SimpleScore>) solutionManager).getScoreDirectorFactory()>")
chamada antiga: assertNotNull(solverManager)
nova chamada: assertNotNull(solverManager, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertSame(solverFactory, ((DefaultSolverManager<TestdataQuarkusSolution, Long>) solverManager).getSolverFactory())
nova chamada: assertSame(solverFactory, ((DefaultSolverManager<TestdataQuarkusSolution, Long>) solverManager).getSolverFactory(), "Era esperado objetos iguais, mas  solverFactory é diferente de " + result44 + " <((DefaultSolverManager<TestdataQuarkusSolution, Long>) solverManager).getSolverFactory()>")
chamada antiga: assertNotNull(solutionManager)
nova chamada: assertNotNull(solutionManager, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(solution)
nova chamada: assertNotNull(solution, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(solution.getScore().score() >= 0)
nova chamada: assertTrue(solution.getScore().score() >= 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertEquals(solution.score.score(), 0)
nova chamada: assertEquals(solution.score.score(), 0, "Era esperado valores iguais, mas " + result45 + " <solution.score.score()> é diferente de " + " 0")
chamada antiga: assertEquals("7", solverConfigProperties.get("termination.bestScoreLimit"))
nova chamada: assertEquals("7", solverConfigProperties.get("termination.bestScoreLimit"), "Era esperado valores iguais, mas  '7' é diferente de " + result46 + " <solverConfigProperties.get('termination.bestScoreLimit')>")
chamada antiga: assertEquals("3", solverConfigProperties.get("moveThreadCount"))
nova chamada: assertEquals("3", solverConfigProperties.get("moveThreadCount"), "Era esperado valores iguais, mas  '3' é diferente de " + result47 + " <solverConfigProperties.get('moveThreadCount')>")
chamada antiga: assertEquals("10", solverManagerProperties.get("parallelSolverCount"))
nova chamada: assertEquals("10", solverManagerProperties.get("parallelSolverCount"), "Era esperado valores iguais, mas  '10' é diferente de " + result48 + " <solverManagerProperties.get('parallelSolverCount')>")
chamada antiga: assertEquals(TestdataQuarkusConstraintProvider.class, solverConfig.getScoreDirectorFactoryConfig().getConstraintProviderClass())
nova chamada: assertEquals(TestdataQuarkusConstraintProvider.class, solverConfig.getScoreDirectorFactoryConfig().getConstraintProviderClass(), "Era esperado valores iguais, mas  TestdataQuarkusConstraintProvider.class é diferente de " + result49 + " <solverConfig.getScoreDirectorFactoryConfig().getConstraintProviderClass()>")
chamada antiga: assertNotNull(solverFactory.buildSolver())
nova chamada: assertNotNull(solverFactory.buildSolver(), "Era esperado não nulo, mas " + result50 + " <solverFactory.buildSolver()> é nulo")
chamada antiga: assertEquals(Collections.singletonList(CONSTRAINTS_DRL), solverConfig.getScoreDirectorFactoryConfig().getScoreDrlList())
nova chamada: assertEquals(Collections.singletonList(CONSTRAINTS_DRL), solverConfig.getScoreDirectorFactoryConfig().getScoreDrlList(), "Era esperado valores iguais, mas " + result51 + " <Collections.singletonList(CONSTRAINTS_DRL)> é diferente de " + result52 + " <solverConfig.getScoreDirectorFactoryConfig().getScoreDrlList()>")
chamada antiga: assertNotNull(solverFactory.buildSolver())
nova chamada: assertNotNull(solverFactory.buildSolver(), "Era esperado não nulo, mas " + result53 + " <solverFactory.buildSolver()> é nulo")
chamada antiga: assertEquals(Collections.singletonList("constraints.drl"), solverConfig.getScoreDirectorFactoryConfig().getScoreDrlList())
nova chamada: assertEquals(Collections.singletonList("constraints.drl"), solverConfig.getScoreDirectorFactoryConfig().getScoreDrlList(), "Era esperado valores iguais, mas " + result54 + " <Collections.singletonList('constraints.drl')> é diferente de " + result55 + " <solverConfig.getScoreDirectorFactoryConfig().getScoreDrlList()>")
chamada antiga: assertNotNull(solverFactory.buildSolver())
nova chamada: assertNotNull(solverFactory.buildSolver(), "Era esperado não nulo, mas " + result56 + " <solverFactory.buildSolver()> é nulo")
chamada antiga: assertNotNull(solverFactory)
nova chamada: assertNotNull(solverFactory, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertSame(((DefaultSolverFactory<TestdataQuarkusSolution>) solverFactory).getScoreDirectorFactory(), ((DefaultSolutionManager<TestdataQuarkusSolution, SimpleScore>) solutionManager).getScoreDirectorFactory())
nova chamada: assertSame(((DefaultSolverFactory<TestdataQuarkusSolution>) solverFactory).getScoreDirectorFactory(), ((DefaultSolutionManager<TestdataQuarkusSolution, SimpleScore>) solutionManager).getScoreDirectorFactory(), "Era esperado objetos iguais, mas " + result57 + " <((DefaultSolverFactory<TestdataQuarkusSolution>) solverFactory).getScoreDirectorFactory()> é diferente de " + result58 + " <((DefaultSolutionManager<TestdataQuarkusSolution, SimpleScore>) solutionManager).getScoreDirectorFactory()>")
chamada antiga: assertNotNull(solverManager)
nova chamada: assertNotNull(solverManager, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertSame(solverFactory, ((DefaultSolverManager<TestdataQuarkusSolution, Long>) solverManager).getSolverFactory())
nova chamada: assertSame(solverFactory, ((DefaultSolverManager<TestdataQuarkusSolution, Long>) solverManager).getSolverFactory(), "Era esperado objetos iguais, mas  solverFactory é diferente de " + result59 + " <((DefaultSolverManager<TestdataQuarkusSolution, Long>) solverManager).getSolverFactory()>")
chamada antiga: assertNotNull(scoreManager)
nova chamada: assertNotNull(scoreManager, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(solution)
nova chamada: assertNotNull(solution, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(solution.getScore().score() >= 0)
nova chamada: assertTrue(solution.getScore().score() >= 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("Extra Data", solution.getExtraData())
nova chamada: assertEquals("Extra Data", solution.getExtraData(), "Era esperado valores iguais, mas  'Extra Data' é diferente de " + result60 + " <solution.getExtraData()>")
chamada antiga: assertEquals(ConstraintStreamImplType.BAVET, solverConfig.getScoreDirectorFactoryConfig().getConstraintStreamImplType())
nova chamada: assertEquals(ConstraintStreamImplType.BAVET, solverConfig.getScoreDirectorFactoryConfig().getConstraintStreamImplType(), "Era esperado valores iguais, mas  ConstraintStreamImplType.BAVET é diferente de " + result61 + " <solverConfig.getScoreDirectorFactoryConfig().getConstraintStreamImplType()>")
chamada antiga: assertNotNull(solverFactory)
nova chamada: assertNotNull(solverFactory, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: fail("Build should fail", "A execução falhou por uma causa deliberada")
nova chamada: fail("Build should fail", "A execução falhou por uma causa deliberada", "A execução falhou por uma causa deliberada")
chamada antiga: Assertions.assertEquals(ConstraintStreamImplType.DROOLS, ((DefaultConstraintVerifier<?, ?, ?>) constraintVerifier).getConstraintStreamImplType())
nova chamada: assertEquals(ConstraintStreamImplType.DROOLS, ((DefaultConstraintVerifier<?, ?, ?>) constraintVerifier).getConstraintStreamImplType(), "Era esperado valores iguais, mas  ConstraintStreamImplType.DROOLS é diferente de " + result62 + " <((DefaultConstraintVerifier<?, ?, ?>) constraintVerifier).getConstraintStreamImplType()>")
chamada antiga: Assertions.assertEquals(!ConfigUtils.isNativeImage(), ((DefaultConstraintVerifier<?, ?, ?>) constraintVerifier).isDroolsAlphaNetworkCompilationEnabled())
nova chamada: assertEquals(!ConfigUtils.isNativeImage(), ((DefaultConstraintVerifier<?, ?, ?>) constraintVerifier).isDroolsAlphaNetworkCompilationEnabled(), "Era esperado valores iguais, mas  !ConfigUtils.isNativeImage() é diferente de " + result63 + " <((DefaultConstraintVerifier<?, ?, ?>) constraintVerifier).isDroolsAlphaNetworkCompilationEnabled()>")
chamada antiga: Assertions.assertEquals(ConstraintStreamImplType.BAVET, ((DefaultConstraintVerifier<?, ?, ?>) constraintVerifier).getConstraintStreamImplType())
nova chamada: assertEquals(ConstraintStreamImplType.BAVET, ((DefaultConstraintVerifier<?, ?, ?>) constraintVerifier).getConstraintStreamImplType(), "Era esperado valores iguais, mas  ConstraintStreamImplType.BAVET é diferente de " + result64 + " <((DefaultConstraintVerifier<?, ?, ?>) constraintVerifier).getConstraintStreamImplType()>")
chamada antiga: Assertions.assertNotNull(benchmarkResultDirectory)
nova chamada: assertNotNull(benchmarkResultDirectory, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: Assertions.assertTrue(Files.isDirectory(benchmarkResultDirectoryPath))
nova chamada: assertTrue(Files.isDirectory(benchmarkResultDirectoryPath), "Era esperado verdadeiro, mas " + result65 + " <Files.isDirectory(benchmarkResultDirectoryPath)> é falso")
chamada antiga: Assertions.assertTrue(Files.isRegularFile(benchmarkResultPath))
nova chamada: assertTrue(Files.isRegularFile(benchmarkResultPath), "Era esperado verdadeiro, mas " + result66 + " <Files.isRegularFile(benchmarkResultPath)> é falso")
chamada antiga: Assertions.assertTrue(xmlPath.getBoolean("plannerBenchmarkResult.solverBenchmarkResult.singleBenchmarkResult.subSingleBenchmarkResult.succeeded"))
nova chamada: assertTrue(xmlPath.getBoolean("plannerBenchmarkResult.solverBenchmarkResult.singleBenchmarkResult.subSingleBenchmarkResult.succeeded"), "Era esperado verdadeiro, mas " + result67 + " <xmlPath.getBoolean('plannerBenchmarkResult.solverBenchmarkResult.singleBenchmarkResult.subSingleBenchmarkResult.succeeded')> é falso")
chamada antiga: Assertions.assertEquals(TestdataQuarkusSolution.class, solverConfig.getSolutionClass())
nova chamada: assertEquals(TestdataQuarkusSolution.class, solverConfig.getSolutionClass(), "Era esperado valores iguais, mas  TestdataQuarkusSolution.class é diferente de " + result68 + " <solverConfig.getSolutionClass()>")
chamada antiga: Assertions.assertEquals(2, solverConfig.getEntityClassList().size())
nova chamada: assertEquals(2, solverConfig.getEntityClassList().size(), "Era esperado valores iguais, mas  2 é diferente de " + result69 + " <solverConfig.getEntityClassList().size()>")
chamada antiga: Assertions.assertTrue(solverConfig.getEntityClassList().contains(TestdataQuarkusEntity.class))
nova chamada: assertTrue(solverConfig.getEntityClassList().contains(TestdataQuarkusEntity.class), "Era esperado verdadeiro, mas " + result70 + " <solverConfig.getEntityClassList().contains(TestdataQuarkusEntity.class)> é falso")
chamada antiga: Assertions.assertTrue(solverConfig.getEntityClassList().contains(TestdataQuarkusOtherEntity.class))
nova chamada: assertTrue(solverConfig.getEntityClassList().contains(TestdataQuarkusOtherEntity.class), "Era esperado verdadeiro, mas " + result71 + " <solverConfig.getEntityClassList().contains(TestdataQuarkusOtherEntity.class)> é falso")
chamada antiga: Assertions.assertEquals(5, plannerBenchmarkConfig.getInheritedSolverBenchmarkConfig().getSolverConfig().getTerminationConfig().getMillisecondsSpentLimit())
nova chamada: assertEquals(5, plannerBenchmarkConfig.getInheritedSolverBenchmarkConfig().getSolverConfig().getTerminationConfig().getMillisecondsSpentLimit(), "Era esperado valores iguais, mas  5 é diferente de " + result72 + " <plannerBenchmarkConfig.getInheritedSolverBenchmarkConfig().getSolverConfig().getTerminationConfig().getMillisecondsSpentLimit()>")
chamada antiga: Assertions.assertEquals(List.of(TestdataQuarkusEntity.class), plannerBenchmarkConfig.getInheritedSolverBenchmarkConfig().getSolverConfig().getEntityClassList())
nova chamada: assertEquals(List.of(TestdataQuarkusEntity.class), plannerBenchmarkConfig.getInheritedSolverBenchmarkConfig().getSolverConfig().getEntityClassList(), "Era esperado valores iguais, mas " + result73 + " <List.of(TestdataQuarkusEntity.class)> é diferente de " + result74 + " <plannerBenchmarkConfig.getInheritedSolverBenchmarkConfig().getSolverConfig().getEntityClassList()>")
chamada antiga: Assertions.assertEquals(TestdataQuarkusSolution.class, childBenchmarkConfig.getSolverConfig().getSolutionClass())
nova chamada: assertEquals(TestdataQuarkusSolution.class, childBenchmarkConfig.getSolverConfig().getSolutionClass(), "Era esperado valores iguais, mas  TestdataQuarkusSolution.class é diferente de " + result75 + " <childBenchmarkConfig.getSolverConfig().getSolutionClass()>")
chamada antiga: Assertions.assertNull(childBenchmarkConfig.getSolverConfig().getEntityClassList())
nova chamada: assertNull(childBenchmarkConfig.getSolverConfig().getEntityClassList(), "Era esperado nulo, mas " + result76 + " <childBenchmarkConfig.getSolverConfig().getEntityClassList()> não é nulo")
chamada antiga: Assertions.assertEquals(TestdataQuarkusConstraintProvider.class, childBenchmarkConfig.getSolverConfig().getScoreDirectorFactoryConfig().getConstraintProviderClass())
nova chamada: assertEquals(TestdataQuarkusConstraintProvider.class, childBenchmarkConfig.getSolverConfig().getScoreDirectorFactoryConfig().getConstraintProviderClass(), "Era esperado valores iguais, mas  TestdataQuarkusConstraintProvider.class é diferente de " + result77 + " <childBenchmarkConfig.getSolverConfig().getScoreDirectorFactoryConfig().getConstraintProviderClass()>")
chamada antiga: Assertions.assertEquals(TestdataQuarkusConstraintProvider.class, childBenchmarkConfig.getSolverConfig().getSolutionClass())
nova chamada: assertEquals(TestdataQuarkusConstraintProvider.class, childBenchmarkConfig.getSolverConfig().getSolutionClass(), "Era esperado valores iguais, mas  TestdataQuarkusConstraintProvider.class é diferente de " + result78 + " <childBenchmarkConfig.getSolverConfig().getSolutionClass()>")
chamada antiga: Assertions.assertNull(childBenchmarkConfig.getSolverConfig().getEntityClassList())
nova chamada: assertNull(childBenchmarkConfig.getSolverConfig().getEntityClassList(), "Era esperado nulo, mas " + result79 + " <childBenchmarkConfig.getSolverConfig().getEntityClassList()> não é nulo")
chamada antiga: Assertions.assertEquals(TestdataQuarkusConstraintProvider.class, childBenchmarkConfig.getSolverConfig().getScoreDirectorFactoryConfig().getConstraintProviderClass())
nova chamada: assertEquals(TestdataQuarkusConstraintProvider.class, childBenchmarkConfig.getSolverConfig().getScoreDirectorFactoryConfig().getConstraintProviderClass(), "Era esperado valores iguais, mas  TestdataQuarkusConstraintProvider.class é diferente de " + result80 + " <childBenchmarkConfig.getSolverConfig().getScoreDirectorFactoryConfig().getConstraintProviderClass()>")
chamada antiga: Assertions.assertEquals(2, plannerBenchmarkConfig.getSolverBenchmarkConfigList().get(0).getSolverConfig().getPhaseConfigList().size())
nova chamada: assertEquals(2, plannerBenchmarkConfig.getSolverBenchmarkConfigList().get(0).getSolverConfig().getPhaseConfigList().size(), "Era esperado valores iguais, mas  2 é diferente de " + result81 + " <plannerBenchmarkConfig.getSolverBenchmarkConfigList().get(0).getSolverConfig().getPhaseConfigList().size()>")
chamada antiga: Assertions.assertEquals(3, plannerBenchmarkConfig.getSolverBenchmarkConfigList().get(1).getSolverConfig().getPhaseConfigList().size())
nova chamada: assertEquals(3, plannerBenchmarkConfig.getSolverBenchmarkConfigList().get(1).getSolverConfig().getPhaseConfigList().size(), "Era esperado valores iguais, mas  3 é diferente de " + result82 + " <plannerBenchmarkConfig.getSolverBenchmarkConfigList().get(1).getSolverConfig().getPhaseConfigList().size()>")
chamada antiga: Assertions.assertEquals("The following " + SolverBenchmarkConfig.class.getSimpleName() + " do not " + "have termination configured: [First Fit and Local Search without Termination]. " + "At least one of the properties " + "quarkus.optaplanner.benchmark.solver.termination.spent-limit, " + "quarkus.optaplanner.benchmark.solver.termination.best-score-limit, " + "quarkus.optaplanner.benchmark.solver.termination.unimproved-spent-limit " + "is required if termination is not configured in a solver benchmark and the " + "inherited solver benchmark config.", exception.getMessage())
nova chamada: assertEquals("The following " + SolverBenchmarkConfig.class.getSimpleName() + " do not " + "have termination configured: [First Fit and Local Search without Termination]. " + "At least one of the properties " + "quarkus.optaplanner.benchmark.solver.termination.spent-limit, " + "quarkus.optaplanner.benchmark.solver.termination.best-score-limit, " + "quarkus.optaplanner.benchmark.solver.termination.unimproved-spent-limit " + "is required if termination is not configured in a solver benchmark and the " + "inherited solver benchmark config.", exception.getMessage(), "Era esperado valores iguais, mas  'The following ' + SolverBenchmarkConfig.class.getSimpleName() + ' do not ' + 'have termination configured: [First Fit and Local Search without Termination]. ' + 'At least one of the properties ' + 'quarkus.optaplanner.benchmark.solver.termination.spent-limit, ' + 'quarkus.optaplanner.benchmark.solver.termination.best-score-limit, ' + 'quarkus.optaplanner.benchmark.solver.termination.unimproved-spent-limit ' + 'is required if termination is not configured in a solver benchmark and the ' + 'inherited solver benchmark config.' é diferente de " + result83 + " <exception.getMessage()>")
chamada antiga: Assertions.assertEquals("At least one of the properties quarkus.optaplanner.benchmark.solver.termination.spent-limit, quarkus.optaplanner.benchmark.solver.termination.best-score-limit, quarkus.optaplanner.benchmark.solver.termination.unimproved-spent-limit is required if termination is not configured in the inherited solver benchmark config and solverBenchmarkBluePrint is used.", exception.getMessage())
nova chamada: assertEquals("At least one of the properties quarkus.optaplanner.benchmark.solver.termination.spent-limit, quarkus.optaplanner.benchmark.solver.termination.best-score-limit, quarkus.optaplanner.benchmark.solver.termination.unimproved-spent-limit is required if termination is not configured in the inherited solver benchmark config and solverBenchmarkBluePrint is used.", exception.getMessage(), "Era esperado valores iguais, mas  'At least one of the properties quarkus.optaplanner.benchmark.solver.termination.spent-limit, quarkus.optaplanner.benchmark.solver.termination.best-score-limit, quarkus.optaplanner.benchmark.solver.termination.unimproved-spent-limit is required if termination is not configured in the inherited solver benchmark config and solverBenchmarkBluePrint is used.' é diferente de " + result84 + " <exception.getMessage()>")
Total asserts: 5214
Asserts sem descrição: 5208
Asserts com descrição: 3
Assertion Roulette: 4762

Após do refactor: 
Total asserts: 5214
Asserts sem descrição: 5138
Asserts com descrição: 73
Assertion Roulette: 4694
