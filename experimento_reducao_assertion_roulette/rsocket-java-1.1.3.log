
Projeto: /home/vitor-otto/opensource/rsocket-java-1.1.3

Antes do refactor: 
chamada antiga: assertEquals(2, s.nextStreamId(map))
nova chamada: assertEquals(2, s.nextStreamId(map), "Era esperado valores iguais, mas  2 é diferente de " + result0 + " <s.nextStreamId(map)>")
chamada antiga: assertEquals(4, s.nextStreamId(map))
nova chamada: assertEquals(4, s.nextStreamId(map), "Era esperado valores iguais, mas  4 é diferente de " + result1 + " <s.nextStreamId(map)>")
chamada antiga: assertEquals(6, s.nextStreamId(map))
nova chamada: assertEquals(6, s.nextStreamId(map), "Era esperado valores iguais, mas  6 é diferente de " + result2 + " <s.nextStreamId(map)>")
chamada antiga: assertFalse(s.isBeforeOrCurrent(1))
nova chamada: assertFalse(s.isBeforeOrCurrent(1), "Era esperado falso, mas " + result3 + " <s.isBeforeOrCurrent(1)> é verdadeiro ")
chamada antiga: assertFalse(s.isBeforeOrCurrent(3))
nova chamada: assertFalse(s.isBeforeOrCurrent(3), "Era esperado falso, mas " + result4 + " <s.isBeforeOrCurrent(3)> é verdadeiro ")
chamada antiga: assertTrue(s.isBeforeOrCurrent(1))
nova chamada: assertTrue(s.isBeforeOrCurrent(1), "Era esperado verdadeiro, mas " + result5 + " <s.isBeforeOrCurrent(1)> é falso")
chamada antiga: assertFalse(s.isBeforeOrCurrent(3))
nova chamada: assertFalse(s.isBeforeOrCurrent(3), "Era esperado falso, mas " + result6 + " <s.isBeforeOrCurrent(3)> é verdadeiro ")
chamada antiga: assertTrue(s.isBeforeOrCurrent(3))
nova chamada: assertTrue(s.isBeforeOrCurrent(3), "Era esperado verdadeiro, mas " + result7 + " <s.isBeforeOrCurrent(3)> é falso")
chamada antiga: assertFalse(s.isBeforeOrCurrent(-1))
nova chamada: assertFalse(s.isBeforeOrCurrent(-1), "Era esperado falso, mas " + result8 + " <s.isBeforeOrCurrent(-1)> é verdadeiro ")
chamada antiga: assertFalse(s.isBeforeOrCurrent(0))
nova chamada: assertFalse(s.isBeforeOrCurrent(0), "Era esperado falso, mas " + result9 + " <s.isBeforeOrCurrent(0)> é verdadeiro ")
chamada antiga: assertTrue(s.isBeforeOrCurrent(2))
nova chamada: assertTrue(s.isBeforeOrCurrent(2), "Era esperado verdadeiro, mas " + result10 + " <s.isBeforeOrCurrent(2)> é falso")
chamada antiga: assertFalse(s.isBeforeOrCurrent(2))
nova chamada: assertFalse(s.isBeforeOrCurrent(2), "Era esperado falso, mas " + result11 + " <s.isBeforeOrCurrent(2)> é verdadeiro ")
chamada antiga: assertFalse(s.isBeforeOrCurrent(4))
nova chamada: assertFalse(s.isBeforeOrCurrent(4), "Era esperado falso, mas " + result12 + " <s.isBeforeOrCurrent(4)> é verdadeiro ")
chamada antiga: assertTrue(s.isBeforeOrCurrent(2))
nova chamada: assertTrue(s.isBeforeOrCurrent(2), "Era esperado verdadeiro, mas " + result13 + " <s.isBeforeOrCurrent(2)> é falso")
chamada antiga: assertFalse(s.isBeforeOrCurrent(4))
nova chamada: assertFalse(s.isBeforeOrCurrent(4), "Era esperado falso, mas " + result14 + " <s.isBeforeOrCurrent(4)> é verdadeiro ")
chamada antiga: assertTrue(s.isBeforeOrCurrent(4))
nova chamada: assertTrue(s.isBeforeOrCurrent(4), "Era esperado verdadeiro, mas " + result15 + " <s.isBeforeOrCurrent(4)> é falso")
chamada antiga: assertFalse(s.isBeforeOrCurrent(-2))
nova chamada: assertFalse(s.isBeforeOrCurrent(-2), "Era esperado falso, mas " + result16 + " <s.isBeforeOrCurrent(-2)> é verdadeiro ")
chamada antiga: assertFalse(s.isBeforeOrCurrent(0))
nova chamada: assertFalse(s.isBeforeOrCurrent(0), "Era esperado falso, mas " + result17 + " <s.isBeforeOrCurrent(0)> é verdadeiro ")
chamada antiga: assertTrue(s.isBeforeOrCurrent(1))
nova chamada: assertTrue(s.isBeforeOrCurrent(1), "Era esperado verdadeiro, mas " + result18 + " <s.isBeforeOrCurrent(1)> é falso")
chamada antiga: assertEquals(2147483646, s.nextStreamId(map))
nova chamada: assertEquals(2147483646, s.nextStreamId(map), "Era esperado valores iguais, mas  2147483646 é diferente de " + result19 + " <s.nextStreamId(map)>")
chamada antiga: assertEquals(2, s.nextStreamId(map))
nova chamada: assertEquals(2, s.nextStreamId(map), "Era esperado valores iguais, mas  2 é diferente de " + result20 + " <s.nextStreamId(map)>")
chamada antiga: assertEquals(4, s.nextStreamId(map))
nova chamada: assertEquals(4, s.nextStreamId(map), "Era esperado valores iguais, mas  4 é diferente de " + result21 + " <s.nextStreamId(map)>")
chamada antiga: assertEquals(2147483647, s.nextStreamId(map))
nova chamada: assertEquals(2147483647, s.nextStreamId(map), "Era esperado valores iguais, mas  2147483647 é diferente de " + result22 + " <s.nextStreamId(map)>")
chamada antiga: assertEquals(1, s.nextStreamId(map))
nova chamada: assertEquals(1, s.nextStreamId(map), "Era esperado valores iguais, mas  1 é diferente de " + result23 + " <s.nextStreamId(map)>")
chamada antiga: assertEquals(3, s.nextStreamId(map))
nova chamada: assertEquals(3, s.nextStreamId(map), "Era esperado valores iguais, mas  3 é diferente de " + result24 + " <s.nextStreamId(map)>")
chamada antiga: assertEquals(1, s.nextStreamId(map))
nova chamada: assertEquals(1, s.nextStreamId(map), "Era esperado valores iguais, mas  1 é diferente de " + result25 + " <s.nextStreamId(map)>")
chamada antiga: assertEquals(3, s.nextStreamId(map))
nova chamada: assertEquals(3, s.nextStreamId(map), "Era esperado valores iguais, mas  3 é diferente de " + result26 + " <s.nextStreamId(map)>")
chamada antiga: assertEquals(7, s.nextStreamId(map))
nova chamada: assertEquals(7, s.nextStreamId(map), "Era esperado valores iguais, mas  7 é diferente de " + result27 + " <s.nextStreamId(map)>")
chamada antiga: assertEquals(11, s.nextStreamId(map))
nova chamada: assertEquals(11, s.nextStreamId(map), "Era esperado valores iguais, mas  11 é diferente de " + result28 + " <s.nextStreamId(map)>")
chamada antiga: assertTrue(setupPayload.willClientHonorLease())
nova chamada: assertTrue(setupPayload.willClientHonorLease(), "Era esperado verdadeiro, mas " + result29 + " <setupPayload.willClientHonorLease()> é falso")
chamada antiga: assertEquals(KEEP_ALIVE_INTERVAL, setupPayload.keepAliveInterval())
nova chamada: assertEquals(KEEP_ALIVE_INTERVAL, setupPayload.keepAliveInterval(), "Era esperado valores iguais, mas  KEEP_ALIVE_INTERVAL é diferente de " + result30 + " <setupPayload.keepAliveInterval()>")
chamada antiga: assertEquals(KEEP_ALIVE_MAX_LIFETIME, setupPayload.keepAliveMaxLifetime())
nova chamada: assertEquals(KEEP_ALIVE_MAX_LIFETIME, setupPayload.keepAliveMaxLifetime(), "Era esperado valores iguais, mas  KEEP_ALIVE_MAX_LIFETIME é diferente de " + result31 + " <setupPayload.keepAliveMaxLifetime()>")
chamada antiga: assertEquals(METADATA_TYPE, SetupFrameCodec.metadataMimeType(frame))
nova chamada: assertEquals(METADATA_TYPE, SetupFrameCodec.metadataMimeType(frame), "Era esperado valores iguais, mas  METADATA_TYPE é diferente de " + result32 + " <SetupFrameCodec.metadataMimeType(frame)>")
chamada antiga: assertEquals(DATA_TYPE, SetupFrameCodec.dataMimeType(frame))
nova chamada: assertEquals(DATA_TYPE, SetupFrameCodec.dataMimeType(frame), "Era esperado valores iguais, mas  DATA_TYPE é diferente de " + result33 + " <SetupFrameCodec.dataMimeType(frame)>")
chamada antiga: assertTrue(setupPayload.hasMetadata())
nova chamada: assertTrue(setupPayload.hasMetadata(), "Era esperado verdadeiro, mas " + result34 + " <setupPayload.hasMetadata()> é falso")
chamada antiga: assertNotNull(setupPayload.metadata())
nova chamada: assertNotNull(setupPayload.metadata(), "Era esperado não nulo, mas " + result35 + " <setupPayload.metadata()> é nulo")
chamada antiga: assertEquals(payload.metadata(), setupPayload.metadata())
nova chamada: assertEquals(payload.metadata(), setupPayload.metadata(), "Era esperado valores iguais, mas " + result36 + " <payload.metadata()> é diferente de " + result37 + " <setupPayload.metadata()>")
chamada antiga: assertEquals(payload.data(), setupPayload.data())
nova chamada: assertEquals(payload.data(), setupPayload.data(), "Era esperado valores iguais, mas " + result38 + " <payload.data()> é diferente de " + result39 + " <setupPayload.data()>")
chamada antiga: assertFalse(setupPayload.willClientHonorLease())
nova chamada: assertFalse(setupPayload.willClientHonorLease(), "Era esperado falso, mas " + result40 + " <setupPayload.willClientHonorLease()> é verdadeiro ")
chamada antiga: assertFalse(setupPayload.hasMetadata())
nova chamada: assertFalse(setupPayload.hasMetadata(), "Era esperado falso, mas " + result41 + " <setupPayload.hasMetadata()> é verdadeiro ")
chamada antiga: assertNotNull(setupPayload.metadata())
nova chamada: assertNotNull(setupPayload.metadata(), "Era esperado não nulo, mas " + result42 + " <setupPayload.metadata()> é nulo")
chamada antiga: assertEquals(0, setupPayload.metadata().readableBytes())
nova chamada: assertEquals(0, setupPayload.metadata().readableBytes(), "Era esperado valores iguais, mas  0 é diferente de " + result43 + " <setupPayload.metadata().readableBytes()>")
chamada antiga: assertEquals(payload.data(), setupPayload.data())
nova chamada: assertEquals(payload.data(), setupPayload.data(), "Era esperado valores iguais, mas " + result44 + " <payload.data()> é diferente de " + result45 + " <setupPayload.data()>")
chamada antiga: assertFalse(setupPayload.willClientHonorLease())
nova chamada: assertFalse(setupPayload.willClientHonorLease(), "Era esperado falso, mas " + result46 + " <setupPayload.willClientHonorLease()> é verdadeiro ")
chamada antiga: assertTrue(setupPayload.hasMetadata())
nova chamada: assertTrue(setupPayload.hasMetadata(), "Era esperado verdadeiro, mas " + result47 + " <setupPayload.hasMetadata()> é falso")
chamada antiga: assertNotNull(setupPayload.metadata())
nova chamada: assertNotNull(setupPayload.metadata(), "Era esperado não nulo, mas " + result48 + " <setupPayload.metadata()> é nulo")
chamada antiga: assertEquals(0, setupPayload.metadata().readableBytes())
nova chamada: assertEquals(0, setupPayload.metadata().readableBytes(), "Era esperado valores iguais, mas  0 é diferente de " + result49 + " <setupPayload.metadata().readableBytes()>")
chamada antiga: assertEquals(payload.data(), setupPayload.data())
nova chamada: assertEquals(payload.data(), setupPayload.data(), "Era esperado valores iguais, mas " + result50 + " <payload.data()> é diferente de " + result51 + " <setupPayload.data()>")
chamada antiga: assertEquals("00000b000000012c000000020164", ByteBufUtil.hexDump(frame))
nova chamada: assertEquals("00000b000000012c000000020164", ByteBufUtil.hexDump(frame), "Era esperado valores iguais, mas  '00000b000000012c000000020164' é diferente de " + result52 + " <ByteBufUtil.hexDump(frame)>")
chamada antiga: Assertions.assertEquals(ttl, LeaseFrameCodec.ttl(lease))
nova chamada: assertEquals(ttl, LeaseFrameCodec.ttl(lease), "Era esperado valores iguais, mas  ttl é diferente de " + result53 + " <LeaseFrameCodec.ttl(lease)>")
chamada antiga: Assertions.assertEquals(numRequests, LeaseFrameCodec.numRequests(lease))
nova chamada: assertEquals(numRequests, LeaseFrameCodec.numRequests(lease), "Era esperado valores iguais, mas  numRequests é diferente de " + result54 + " <LeaseFrameCodec.numRequests(lease)>")
chamada antiga: Assertions.assertEquals(metadata, LeaseFrameCodec.metadata(lease))
nova chamada: assertEquals(metadata, LeaseFrameCodec.metadata(lease), "Era esperado valores iguais, mas  metadata é diferente de " + result55 + " <LeaseFrameCodec.metadata(lease)>")
chamada antiga: Assertions.assertEquals(ttl, LeaseFrameCodec.ttl(lease))
nova chamada: assertEquals(ttl, LeaseFrameCodec.ttl(lease), "Era esperado valores iguais, mas  ttl é diferente de " + result56 + " <LeaseFrameCodec.ttl(lease)>")
chamada antiga: Assertions.assertEquals(numRequests, LeaseFrameCodec.numRequests(lease))
nova chamada: assertEquals(numRequests, LeaseFrameCodec.numRequests(lease), "Era esperado valores iguais, mas  numRequests é diferente de " + result57 + " <LeaseFrameCodec.numRequests(lease)>")
chamada antiga: assertEquals("00000a00000001200000000005", ByteBufUtil.hexDump(frame))
nova chamada: assertEquals("00000a00000001200000000005", ByteBufUtil.hexDump(frame), "Era esperado valores iguais, mas  '00000a00000001200000000005' é diferente de " + result58 + " <ByteBufUtil.hexDump(frame)>")
chamada antiga: assertEquals(flags, FrameHeaderCodec.flags(header))
nova chamada: assertEquals(flags, FrameHeaderCodec.flags(header), "Era esperado valores iguais, mas  flags é diferente de " + result59 + " <FrameHeaderCodec.flags(header)>")
chamada antiga: assertEquals(frameType, FrameHeaderCodec.frameType(header))
nova chamada: assertEquals(frameType, FrameHeaderCodec.frameType(header), "Era esperado valores iguais, mas  frameType é diferente de " + result60 + " <FrameHeaderCodec.frameType(header)>")
chamada antiga: assertNotEquals(flags, FrameHeaderCodec.flags(header))
nova chamada: assertNotEquals(flags, FrameHeaderCodec.flags(header), "Era esperado valores diferentes, mas  flags é igual a " + result61 + " <FrameHeaderCodec.flags(header)>")
chamada antiga: assertEquals(flags & 0b0000_0011_1111_1111, FrameHeaderCodec.flags(header))
nova chamada: assertEquals(flags & 0b0000_0011_1111_1111, FrameHeaderCodec.flags(header), "Era esperado valores iguais, mas  flags & 0b0000_0011_1111_1111 é diferente de " + result62 + " <FrameHeaderCodec.flags(header)>")
chamada antiga: assertEquals(frameType, FrameHeaderCodec.frameType(header))
nova chamada: assertEquals(frameType, FrameHeaderCodec.frameType(header), "Era esperado valores iguais, mas  frameType é diferente de " + result63 + " <FrameHeaderCodec.frameType(header)>")
chamada antiga: Assertions.assertTrue(FrameHeaderCodec.hasMetadata(lease))
nova chamada: assertTrue(FrameHeaderCodec.hasMetadata(lease), "Era esperado verdadeiro, mas " + result64 + " <FrameHeaderCodec.hasMetadata(lease)> é falso")
chamada antiga: Assertions.assertFalse(FrameHeaderCodec.hasMetadata(lease))
nova chamada: assertFalse(FrameHeaderCodec.hasMetadata(lease), "Era esperado falso, mas " + result65 + " <FrameHeaderCodec.hasMetadata(lease)> é verdadeiro ")
chamada antiga: Assertions.assertNull(LeaseFrameCodec.metadata(lease))
nova chamada: assertNull(LeaseFrameCodec.metadata(lease), "Era esperado nulo, mas " + result66 + " <LeaseFrameCodec.metadata(lease)> não é nulo")
chamada antiga: Assertions.assertTrue(FrameHeaderCodec.hasMetadata(extension))
nova chamada: assertTrue(FrameHeaderCodec.hasMetadata(extension), "Era esperado verdadeiro, mas " + result67 + " <FrameHeaderCodec.hasMetadata(extension)> é falso")
chamada antiga: Assertions.assertEquals(extendedType, ExtensionFrameCodec.extendedType(extension))
nova chamada: assertEquals(extendedType, ExtensionFrameCodec.extendedType(extension), "Era esperado valores iguais, mas  extendedType é diferente de " + result68 + " <ExtensionFrameCodec.extendedType(extension)>")
chamada antiga: Assertions.assertEquals(metadata, ExtensionFrameCodec.metadata(extension))
nova chamada: assertEquals(metadata, ExtensionFrameCodec.metadata(extension), "Era esperado valores iguais, mas  metadata é diferente de " + result69 + " <ExtensionFrameCodec.metadata(extension)>")
chamada antiga: Assertions.assertEquals(data, ExtensionFrameCodec.data(extension))
nova chamada: assertEquals(data, ExtensionFrameCodec.data(extension), "Era esperado valores iguais, mas  data é diferente de " + result70 + " <ExtensionFrameCodec.data(extension)>")
chamada antiga: Assertions.assertFalse(FrameHeaderCodec.hasMetadata(extension))
nova chamada: assertFalse(FrameHeaderCodec.hasMetadata(extension), "Era esperado falso, mas " + result71 + " <FrameHeaderCodec.hasMetadata(extension)> é verdadeiro ")
chamada antiga: Assertions.assertEquals(extendedType, ExtensionFrameCodec.extendedType(extension))
nova chamada: assertEquals(extendedType, ExtensionFrameCodec.extendedType(extension), "Era esperado valores iguais, mas  extendedType é diferente de " + result72 + " <ExtensionFrameCodec.extendedType(extension)>")
chamada antiga: Assertions.assertNull(ExtensionFrameCodec.metadata(extension))
nova chamada: assertNull(ExtensionFrameCodec.metadata(extension), "Era esperado nulo, mas " + result73 + " <ExtensionFrameCodec.metadata(extension)> não é nulo")
chamada antiga: Assertions.assertEquals(data, ExtensionFrameCodec.data(extension))
nova chamada: assertEquals(data, ExtensionFrameCodec.data(extension), "Era esperado valores iguais, mas  data é diferente de " + result74 + " <ExtensionFrameCodec.data(extension)>")
chamada antiga: Assertions.assertTrue(FrameHeaderCodec.hasMetadata(extension))
nova chamada: assertTrue(FrameHeaderCodec.hasMetadata(extension), "Era esperado verdadeiro, mas " + result75 + " <FrameHeaderCodec.hasMetadata(extension)> é falso")
chamada antiga: Assertions.assertEquals(extendedType, ExtensionFrameCodec.extendedType(extension))
nova chamada: assertEquals(extendedType, ExtensionFrameCodec.extendedType(extension), "Era esperado valores iguais, mas  extendedType é diferente de " + result76 + " <ExtensionFrameCodec.extendedType(extension)>")
chamada antiga: Assertions.assertEquals(metadata, ExtensionFrameCodec.metadata(extension))
nova chamada: assertEquals(metadata, ExtensionFrameCodec.metadata(extension), "Era esperado valores iguais, mas  metadata é diferente de " + result77 + " <ExtensionFrameCodec.metadata(extension)>")
chamada antiga: Assertions.assertEquals(0, ExtensionFrameCodec.data(extension).readableBytes())
nova chamada: assertEquals(0, ExtensionFrameCodec.data(extension).readableBytes(), "Era esperado valores iguais, mas  0 é diferente de " + result78 + " <ExtensionFrameCodec.data(extension).readableBytes()>")
chamada antiga: Assertions.assertEquals("d", data)
nova chamada: assertEquals("d", data, "Era esperado valores iguais, mas  'd' é diferente de " + " data")
chamada antiga: Assertions.assertEquals("md", metadata)
nova chamada: assertEquals("md", metadata, "Era esperado valores iguais, mas  'md' é diferente de " + " metadata")
chamada antiga: Assertions.assertEquals("d", data)
nova chamada: assertEquals("d", data, "Era esperado valores iguais, mas  'd' é diferente de " + " data")
chamada antiga: Assertions.assertNull(metadata)
nova chamada: assertNull(metadata, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: Assertions.assertTrue(data.readableBytes() == 0)
nova chamada: assertTrue(data.readableBytes() == 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertEquals("md", metadata)
nova chamada: assertEquals("md", metadata, "Era esperado valores iguais, mas  'md' é diferente de " + " metadata")
chamada antiga: Assertions.assertEquals("d", data)
nova chamada: assertEquals("d", data, "Era esperado valores iguais, mas  'd' é diferente de " + " data")
chamada antiga: Assertions.assertEquals("md", metadata)
nova chamada: assertEquals("md", metadata, "Era esperado valores iguais, mas  'md' é diferente de " + " metadata")
chamada antiga: Assertions.assertEquals("d", data)
nova chamada: assertEquals("d", data, "Era esperado valores iguais, mas  'd' é diferente de " + " data")
chamada antiga: Assertions.assertNull(metadata)
nova chamada: assertNull(metadata, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: Assertions.assertEquals("d", data)
nova chamada: assertEquals("d", data, "Era esperado valores iguais, mas  'd' é diferente de " + " data")
chamada antiga: Assertions.assertEquals(metadata.readableBytes(), 0)
nova chamada: assertEquals(metadata.readableBytes(), 0, "Era esperado valores iguais, mas " + result79 + " <metadata.readableBytes()> é diferente de " + " 0")
chamada antiga: assertEquals(expected, ByteBufUtil.hexDump(frame))
nova chamada: assertEquals(expected, ByteBufUtil.hexDump(frame), "Era esperado valores iguais, mas  expected é diferente de " + result80 + " <ByteBufUtil.hexDump(frame)>")
chamada antiga: assertEquals(expected, ByteBufUtil.hexDump(frame))
nova chamada: assertEquals(expected, ByteBufUtil.hexDump(frame), "Era esperado valores iguais, mas  expected é diferente de " + result81 + " <ByteBufUtil.hexDump(frame)>")
chamada antiga: assertEquals(expected, ByteBufUtil.hexDump(frame))
nova chamada: assertEquals(expected, ByteBufUtil.hexDump(frame), "Era esperado valores iguais, mas  expected é diferente de " + result82 + " <ByteBufUtil.hexDump(frame)>")
chamada antiga: assertTrue(FrameHeaderCodec.hasMetadata(request))
nova chamada: assertTrue(FrameHeaderCodec.hasMetadata(request), "Era esperado verdadeiro, mas " + result83 + " <FrameHeaderCodec.hasMetadata(request)> é falso")
chamada antiga: assertEquals("d", data)
nova chamada: assertEquals("d", data, "Era esperado valores iguais, mas  'd' é diferente de " + " data")
chamada antiga: assertEquals("md", metadata)
nova chamada: assertEquals("md", metadata, "Era esperado valores iguais, mas  'md' é diferente de " + " metadata")
chamada antiga: assertFalse(FrameHeaderCodec.hasMetadata(request))
nova chamada: assertFalse(FrameHeaderCodec.hasMetadata(request), "Era esperado falso, mas " + result84 + " <FrameHeaderCodec.hasMetadata(request)> é verdadeiro ")
chamada antiga: assertEquals("d", data)
nova chamada: assertEquals("d", data, "Era esperado valores iguais, mas  'd' é diferente de " + " data")
chamada antiga: assertNull(metadata)
nova chamada: assertNull(metadata, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertTrue(FrameHeaderCodec.hasMetadata(request))
nova chamada: assertTrue(FrameHeaderCodec.hasMetadata(request), "Era esperado verdadeiro, mas " + result85 + " <FrameHeaderCodec.hasMetadata(request)> é falso")
chamada antiga: assertTrue(data.readableBytes() == 0)
nova chamada: assertTrue(data.readableBytes() == 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("md", metadata)
nova chamada: assertEquals("md", metadata, "Era esperado valores iguais, mas  'md' é diferente de " + " metadata")
chamada antiga: assertTrue(FrameHeaderCodec.hasMetadata(request))
nova chamada: assertTrue(FrameHeaderCodec.hasMetadata(request), "Era esperado verdadeiro, mas " + result86 + " <FrameHeaderCodec.hasMetadata(request)> é falso")
chamada antiga: assertEquals(Long.MAX_VALUE, actualRequest)
nova chamada: assertEquals(Long.MAX_VALUE, actualRequest, "Era esperado valores iguais, mas  Long.MAX_VALUE é diferente de " + " actualRequest")
chamada antiga: assertEquals("md", metadata)
nova chamada: assertEquals("md", metadata, "Era esperado valores iguais, mas  'md' é diferente de " + " metadata")
chamada antiga: assertEquals("d", data)
nova chamada: assertEquals("d", data, "Era esperado valores iguais, mas  'd' é diferente de " + " data")
chamada antiga: assertFalse(FrameHeaderCodec.hasMetadata(request))
nova chamada: assertFalse(FrameHeaderCodec.hasMetadata(request), "Era esperado falso, mas " + result87 + " <FrameHeaderCodec.hasMetadata(request)> é verdadeiro ")
chamada antiga: assertEquals(42L, actualRequest)
nova chamada: assertEquals(42L, actualRequest, "Era esperado valores iguais, mas  42L é diferente de " + " actualRequest")
chamada antiga: assertNull(metadata)
nova chamada: assertNull(metadata, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals("d", data)
nova chamada: assertEquals("d", data, "Era esperado valores iguais, mas  'd' é diferente de " + " data")
chamada antiga: assertTrue(FrameHeaderCodec.hasMetadata(request))
nova chamada: assertTrue(FrameHeaderCodec.hasMetadata(request), "Era esperado verdadeiro, mas " + result88 + " <FrameHeaderCodec.hasMetadata(request)> é falso")
chamada antiga: assertEquals(42L, actualRequest)
nova chamada: assertEquals(42L, actualRequest, "Era esperado valores iguais, mas  42L é diferente de " + " actualRequest")
chamada antiga: assertTrue(data.readableBytes() == 0)
nova chamada: assertTrue(data.readableBytes() == 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("md", metadata)
nova chamada: assertEquals("md", metadata, "Era esperado valores iguais, mas  'md' é diferente de " + " metadata")
chamada antiga: assertTrue(FrameHeaderCodec.hasMetadata(request))
nova chamada: assertTrue(FrameHeaderCodec.hasMetadata(request), "Era esperado verdadeiro, mas " + result89 + " <FrameHeaderCodec.hasMetadata(request)> é falso")
chamada antiga: assertEquals("d", data)
nova chamada: assertEquals("d", data, "Era esperado valores iguais, mas  'd' é diferente de " + " data")
chamada antiga: assertEquals("md", metadata)
nova chamada: assertEquals("md", metadata, "Era esperado valores iguais, mas  'md' é diferente de " + " metadata")
chamada antiga: assertFalse(FrameHeaderCodec.hasMetadata(request))
nova chamada: assertFalse(FrameHeaderCodec.hasMetadata(request), "Era esperado falso, mas " + result90 + " <FrameHeaderCodec.hasMetadata(request)> é verdadeiro ")
chamada antiga: assertEquals("d", data)
nova chamada: assertEquals("d", data, "Era esperado valores iguais, mas  'd' é diferente de " + " data")
chamada antiga: assertNull(metadata)
nova chamada: assertNull(metadata, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertTrue(FrameHeaderCodec.hasMetadata(request))
nova chamada: assertTrue(FrameHeaderCodec.hasMetadata(request), "Era esperado verdadeiro, mas " + result91 + " <FrameHeaderCodec.hasMetadata(request)> é falso")
chamada antiga: assertEquals("md", metadata)
nova chamada: assertEquals("md", metadata, "Era esperado valores iguais, mas  'md' é diferente de " + " metadata")
chamada antiga: assertTrue(data.readableBytes() == 0)
nova chamada: assertTrue(data.readableBytes() == 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(1, VersionCodec.major(version))
nova chamada: assertEquals(1, VersionCodec.major(version), "Era esperado valores iguais, mas  1 é diferente de " + result92 + " <VersionCodec.major(version)>")
chamada antiga: assertEquals(0, VersionCodec.minor(version))
nova chamada: assertEquals(0, VersionCodec.minor(version), "Era esperado valores iguais, mas  0 é diferente de " + result93 + " <VersionCodec.minor(version)>")
chamada antiga: assertEquals(0x00010000, version)
nova chamada: assertEquals(0x00010000, version, "Era esperado valores iguais, mas  0x00010000 é diferente de " + " version")
chamada antiga: assertEquals("1.0", VersionCodec.toString(version))
nova chamada: assertEquals("1.0", VersionCodec.toString(version), "Era esperado valores iguais, mas  '1.0' é diferente de " + result94 + " <VersionCodec.toString(version)>")
chamada antiga: assertEquals(0x1234, VersionCodec.major(version))
nova chamada: assertEquals(0x1234, VersionCodec.major(version), "Era esperado valores iguais, mas  0x1234 é diferente de " + result95 + " <VersionCodec.major(version)>")
chamada antiga: assertEquals(0x5678, VersionCodec.minor(version))
nova chamada: assertEquals(0x5678, VersionCodec.minor(version), "Era esperado valores iguais, mas  0x5678 é diferente de " + result96 + " <VersionCodec.minor(version)>")
chamada antiga: assertEquals(0x12345678, version)
nova chamada: assertEquals(0x12345678, version, "Era esperado valores iguais, mas  0x12345678 é diferente de " + " version")
chamada antiga: assertEquals("4660.22136", VersionCodec.toString(version))
nova chamada: assertEquals("4660.22136", VersionCodec.toString(version), "Era esperado valores iguais, mas  '4660.22136' é diferente de " + result97 + " <VersionCodec.toString(version)>")
chamada antiga: assertEquals(43210, VersionCodec.major(version))
nova chamada: assertEquals(43210, VersionCodec.major(version), "Era esperado valores iguais, mas  43210 é diferente de " + result98 + " <VersionCodec.major(version)>")
chamada antiga: assertEquals(43211, VersionCodec.minor(version))
nova chamada: assertEquals(43211, VersionCodec.minor(version), "Era esperado valores iguais, mas  43211 é diferente de " + result99 + " <VersionCodec.minor(version)>")
chamada antiga: assertEquals(FrameType.SETUP, FrameHeaderCodec.frameType(frame))
nova chamada: assertEquals(FrameType.SETUP, FrameHeaderCodec.frameType(frame), "Era esperado valores iguais, mas  FrameType.SETUP é diferente de " + result100 + " <FrameHeaderCodec.frameType(frame)>")
chamada antiga: assertFalse(SetupFrameCodec.resumeEnabled(frame))
nova chamada: assertFalse(SetupFrameCodec.resumeEnabled(frame), "Era esperado falso, mas " + result101 + " <SetupFrameCodec.resumeEnabled(frame)> é verdadeiro ")
chamada antiga: assertEquals(0, SetupFrameCodec.resumeToken(frame).readableBytes())
nova chamada: assertEquals(0, SetupFrameCodec.resumeToken(frame).readableBytes(), "Era esperado valores iguais, mas  0 é diferente de " + result102 + " <SetupFrameCodec.resumeToken(frame).readableBytes()>")
chamada antiga: assertEquals("metadata_type", SetupFrameCodec.metadataMimeType(frame))
nova chamada: assertEquals("metadata_type", SetupFrameCodec.metadataMimeType(frame), "Era esperado valores iguais, mas  'metadata_type' é diferente de " + result103 + " <SetupFrameCodec.metadataMimeType(frame)>")
chamada antiga: assertEquals("data_type", SetupFrameCodec.dataMimeType(frame))
nova chamada: assertEquals("data_type", SetupFrameCodec.dataMimeType(frame), "Era esperado valores iguais, mas  'data_type' é diferente de " + result104 + " <SetupFrameCodec.dataMimeType(frame)>")
chamada antiga: assertEquals(payload.metadata(), SetupFrameCodec.metadata(frame))
nova chamada: assertEquals(payload.metadata(), SetupFrameCodec.metadata(frame), "Era esperado valores iguais, mas " + result105 + " <payload.metadata()> é diferente de " + result106 + " <SetupFrameCodec.metadata(frame)>")
chamada antiga: assertEquals(payload.data(), SetupFrameCodec.data(frame))
nova chamada: assertEquals(payload.data(), SetupFrameCodec.data(frame), "Era esperado valores iguais, mas " + result107 + " <payload.data()> é diferente de " + result108 + " <SetupFrameCodec.data(frame)>")
chamada antiga: assertEquals(SetupFrameCodec.CURRENT_VERSION, SetupFrameCodec.version(frame))
nova chamada: assertEquals(SetupFrameCodec.CURRENT_VERSION, SetupFrameCodec.version(frame), "Era esperado valores iguais, mas  SetupFrameCodec.CURRENT_VERSION é diferente de " + result109 + " <SetupFrameCodec.version(frame)>")
chamada antiga: assertEquals(FrameType.SETUP, FrameHeaderCodec.frameType(frame))
nova chamada: assertEquals(FrameType.SETUP, FrameHeaderCodec.frameType(frame), "Era esperado valores iguais, mas  FrameType.SETUP é diferente de " + result110 + " <FrameHeaderCodec.frameType(frame)>")
chamada antiga: assertTrue(SetupFrameCodec.honorLease(frame))
nova chamada: assertTrue(SetupFrameCodec.honorLease(frame), "Era esperado verdadeiro, mas " + result111 + " <SetupFrameCodec.honorLease(frame)> é falso")
chamada antiga: assertTrue(SetupFrameCodec.resumeEnabled(frame))
nova chamada: assertTrue(SetupFrameCodec.resumeEnabled(frame), "Era esperado verdadeiro, mas " + result112 + " <SetupFrameCodec.resumeEnabled(frame)> é falso")
chamada antiga: assertEquals(token, SetupFrameCodec.resumeToken(frame))
nova chamada: assertEquals(token, SetupFrameCodec.resumeToken(frame), "Era esperado valores iguais, mas  token é diferente de " + result113 + " <SetupFrameCodec.resumeToken(frame)>")
chamada antiga: assertEquals("metadata_type", SetupFrameCodec.metadataMimeType(frame))
nova chamada: assertEquals("metadata_type", SetupFrameCodec.metadataMimeType(frame), "Era esperado valores iguais, mas  'metadata_type' é diferente de " + result114 + " <SetupFrameCodec.metadataMimeType(frame)>")
chamada antiga: assertEquals("data_type", SetupFrameCodec.dataMimeType(frame))
nova chamada: assertEquals("data_type", SetupFrameCodec.dataMimeType(frame), "Era esperado valores iguais, mas  'data_type' é diferente de " + result115 + " <SetupFrameCodec.dataMimeType(frame)>")
chamada antiga: assertEquals(payload.metadata(), SetupFrameCodec.metadata(frame))
nova chamada: assertEquals(payload.metadata(), SetupFrameCodec.metadata(frame), "Era esperado valores iguais, mas " + result116 + " <payload.metadata()> é diferente de " + result117 + " <SetupFrameCodec.metadata(frame)>")
chamada antiga: assertEquals(payload.data(), SetupFrameCodec.data(frame))
nova chamada: assertEquals(payload.data(), SetupFrameCodec.data(frame), "Era esperado valores iguais, mas " + result118 + " <payload.data()> é diferente de " + result119 + " <SetupFrameCodec.data(frame)>")
chamada antiga: assertEquals(SetupFrameCodec.CURRENT_VERSION, SetupFrameCodec.version(frame))
nova chamada: assertEquals(SetupFrameCodec.CURRENT_VERSION, SetupFrameCodec.version(frame), "Era esperado valores iguais, mas  SetupFrameCodec.CURRENT_VERSION é diferente de " + result120 + " <SetupFrameCodec.version(frame)>")
chamada antiga: assertTrue(KeepAliveFrameCodec.respondFlag(frame))
nova chamada: assertTrue(KeepAliveFrameCodec.respondFlag(frame), "Era esperado verdadeiro, mas " + result121 + " <KeepAliveFrameCodec.respondFlag(frame)> é falso")
chamada antiga: assertEquals(data, KeepAliveFrameCodec.data(frame))
nova chamada: assertEquals(data, KeepAliveFrameCodec.data(frame), "Era esperado valores iguais, mas  data é diferente de " + result122 + " <KeepAliveFrameCodec.data(frame)>")
chamada antiga: assertEquals("00000f000000000c80000000000000000064", ByteBufUtil.hexDump(frame))
nova chamada: assertEquals("00000f000000000c80000000000000000064", ByteBufUtil.hexDump(frame), "Era esperado valores iguais, mas  '00000f000000000c80000000000000000064' é diferente de " + result123 + " <ByteBufUtil.hexDump(frame)>")

chamada antiga: fail()
nova chamada: fail("A execução falhou por uma causa deliberada")
Total asserts: 1542
Asserts sem descrição: 1540
Asserts com descrição: 2
Assertion Roulette: 1366

Após do refactor: 
Total asserts: 1542
Asserts sem descrição: 1421
Asserts com descrição: 121
Assertion Roulette: 1254
