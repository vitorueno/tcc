
Projeto: /home/vitor-otto/opensource/simple-binary-encoding-1.27.0

Antes do refactor: 
chamada antiga: assertEquals("{\n" + "    \"serialNumber\": 1234,\n" + "    \"modelYear\": 2013,\n" + "    \"available\": \"T\",\n" + "    \"code\": \"A\",\n" + "    \"someNumbers\": [0, 1, 2, 3, 4],\n" + "    \"vehicleCode\": \"ab\\\"def\",\n" + "    \"extras\": { \"sunRoof\": false, \"sportsPack\": true, \"cruiseControl\": true },\n" + "    \"engine\": \n" + "    {\n" + "        \"capacity\": 2000,\n" + "        \"numCylinders\": 4,\n" + "        \"maxRpm\": 9000,\n" + "        \"manufacturerCode\": \"123\",\n" + "        \"fuel\": \"Petrol\"\n" + "    },\n" + "    \"uuid\": [7, 3],\n" + "    \"cupHolderCount\": 5,\n" + "    \"fuelFigures\": [\n" + "    {\n" + "        \"speed\": 30,\n" + "        \"mpg\": 35.9\n" + "    },\n" + "    {\n" + "        \"speed\": 55,\n" + "        \"mpg\": 49.0\n" + "    },\n" + "    {\n" + "        \"speed\": 75,\n" + "        \"mpg\": 40.0\n" + "    }],\n" + "    \"performanceFigures\": [\n" + "    {\n" + "        \"octaneRating\": 95,\n" + "        \"acceleration\": [\n" + "        {\n" + "            \"mph\": 30,\n" + "            \"seconds\": 4.0\n" + "        },\n" + "        {\n" + "            \"mph\": 60,\n" + "            \"seconds\": 7.5\n" + "        },\n" + "        {\n" + "            \"mph\": 100,\n" + "            \"seconds\": 12.2\n" + "        }]\n" + "    },\n" + "    {\n" + "        \"octaneRating\": 99,\n" + "        \"acceleration\": [\n" + "        {\n" + "            \"mph\": 30,\n" + "            \"seconds\": 3.8\n" + "        },\n" + "        {\n" + "            \"mph\": 60,\n" + "            \"seconds\": 7.1\n" + "        },\n" + "        {\n" + "            \"mph\": 100,\n" + "            \"seconds\": 11.8\n" + "        }]\n" + "    }],\n" + "    \"manufacturer\": \"Honda\",\n" + "    \"model\": \"Civic VTi\",\n" + "    \"activationCode\": \"315\\\\8\"\n" + "}", result)
nova chamada: assertEquals("{\n" + "    \"serialNumber\": 1234,\n" + "    \"modelYear\": 2013,\n" + "    \"available\": \"T\",\n" + "    \"code\": \"A\",\n" + "    \"someNumbers\": [0, 1, 2, 3, 4],\n" + "    \"vehicleCode\": \"ab\\\"def\",\n" + "    \"extras\": { \"sunRoof\": false, \"sportsPack\": true, \"cruiseControl\": true },\n" + "    \"engine\": \n" + "    {\n" + "        \"capacity\": 2000,\n" + "        \"numCylinders\": 4,\n" + "        \"maxRpm\": 9000,\n" + "        \"manufacturerCode\": \"123\",\n" + "        \"fuel\": \"Petrol\"\n" + "    },\n" + "    \"uuid\": [7, 3],\n" + "    \"cupHolderCount\": 5,\n" + "    \"fuelFigures\": [\n" + "    {\n" + "        \"speed\": 30,\n" + "        \"mpg\": 35.9\n" + "    },\n" + "    {\n" + "        \"speed\": 55,\n" + "        \"mpg\": 49.0\n" + "    },\n" + "    {\n" + "        \"speed\": 75,\n" + "        \"mpg\": 40.0\n" + "    }],\n" + "    \"performanceFigures\": [\n" + "    {\n" + "        \"octaneRating\": 95,\n" + "        \"acceleration\": [\n" + "        {\n" + "            \"mph\": 30,\n" + "            \"seconds\": 4.0\n" + "        },\n" + "        {\n" + "            \"mph\": 60,\n" + "            \"seconds\": 7.5\n" + "        },\n" + "        {\n" + "            \"mph\": 100,\n" + "            \"seconds\": 12.2\n" + "        }]\n" + "    },\n" + "    {\n" + "        \"octaneRating\": 99,\n" + "        \"acceleration\": [\n" + "        {\n" + "            \"mph\": 30,\n" + "            \"seconds\": 3.8\n" + "        },\n" + "        {\n" + "            \"mph\": 60,\n" + "            \"seconds\": 7.1\n" + "        },\n" + "        {\n" + "            \"mph\": 100,\n" + "            \"seconds\": 11.8\n" + "        }]\n" + "    }],\n" + "    \"manufacturer\": \"Honda\",\n" + "    \"model\": \"Civic VTi\",\n" + "    \"activationCode\": \"315\\\\8\"\n" + "}", result, "Era esperado valores iguais, mas  '{\n' + '    \'serialNumber\': 1234,\n' + '    \'modelYear\': 2013,\n' + '    \'available\': \'T\',\n' + '    \'code\': \'A\',\n' + '    \'someNumbers\': [0, 1, 2, 3, 4],\n' + '    \'vehicleCode\': \'ab\\\'def\',\n' + '    \'extras\': { \'sunRoof\': false, \'sportsPack\': true, \'cruiseControl\': true },\n' + '    \'engine\': \n' + '    {\n' + '        \'capacity\': 2000,\n' + '        \'numCylinders\': 4,\n' + '        \'maxRpm\': 9000,\n' + '        \'manufacturerCode\': \'123\',\n' + '        \'fuel\': \'Petrol\'\n' + '    },\n' + '    \'uuid\': [7, 3],\n' + '    \'cupHolderCount\': 5,\n' + '    \'fuelFigures\': [\n' + '    {\n' + '        \'speed\': 30,\n' + '        \'mpg\': 35.9\n' + '    },\n' + '    {\n' + '        \'speed\': 55,\n' + '        \'mpg\': 49.0\n' + '    },\n' + '    {\n' + '        \'speed\': 75,\n' + '        \'mpg\': 40.0\n' + '    }],\n' + '    \'performanceFigures\': [\n' + '    {\n' + '        \'octaneRating\': 95,\n' + '        \'acceleration\': [\n' + '        {\n' + '            \'mph\': 30,\n' + '            \'seconds\': 4.0\n' + '        },\n' + '        {\n' + '            \'mph\': 60,\n' + '            \'seconds\': 7.5\n' + '        },\n' + '        {\n' + '            \'mph\': 100,\n' + '            \'seconds\': 12.2\n' + '        }]\n' + '    },\n' + '    {\n' + '        \'octaneRating\': 99,\n' + '        \'acceleration\': [\n' + '        {\n' + '            \'mph\': 30,\n' + '            \'seconds\': 3.8\n' + '        },\n' + '        {\n' + '            \'mph\': 60,\n' + '            \'seconds\': 7.1\n' + '        },\n' + '        {\n' + '            \'mph\': 100,\n' + '            \'seconds\': 11.8\n' + '        }]\n' + '    }],\n' + '    \'manufacturer\': \'Honda\',\n' + '    \'model\': \'Civic VTi\',\n' + '    \'activationCode\': \'315\\\\8\'\n' + '}' é diferente de " + " result")
chamada antiga: assertEquals("{\n" + "    \"login\": \"example\",\n" + "    \"encryptedPassword\": \"0b004061\"\n" + "}", result)
nova chamada: assertEquals("{\n" + "    \"login\": \"example\",\n" + "    \"encryptedPassword\": \"0b004061\"\n" + "}", result, "Era esperado valores iguais, mas  '{\n' + '    \'login\': \'example\',\n' + '    \'encryptedPassword\': \'0b004061\'\n' + '}' é diferente de " + " result")
chamada antiga: assertEquals("For input string: \"" + value + "\"", exception.getMessage())
nova chamada: assertEquals("For input string: \"" + value + "\"", exception.getMessage(), "Era esperado valores iguais, mas  'For input string: \'' + value + '\'' é diferente de " + result0 + " <exception.getMessage()>")
chamada antiga: assertEquals("had 4 errors", exception.getMessage())
nova chamada: assertEquals("had 4 errors", exception.getMessage(), "Era esperado valores iguais, mas  'had 4 errors' é diferente de " + result1 + " <exception.getMessage()>")
chamada antiga: assertNotNull(fields)
nova chamada: assertNotNull(fields, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(filteringVersion, transformedSchema.version())
nova chamada: assertEquals(filteringVersion, transformedSchema.version(), "Era esperado valores iguais, mas  filteringVersion é diferente de " + result2 + " <transformedSchema.version()>")
chamada antiga: assertNull(description)
nova chamada: assertNull(description, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(map.get("testType").semanticType())
nova chamada: assertNull(map.get("testType").semanticType(), "Era esperado nulo, mas " + result3 + " <map.get('testType').semanticType()> não é nulo")
chamada antiga: assertNull(((EncodedDataType) map.get("testTypeDefaultCharMinValue")).minValue())
nova chamada: assertNull(((EncodedDataType) map.get("testTypeDefaultCharMinValue")).minValue(), "Era esperado nulo, mas " + result4 + " <((EncodedDataType) map.get('testTypeDefaultCharMinValue')).minValue()> não é nulo")
chamada antiga: assertNull(((EncodedDataType) map.get("testTypeDefaultCharMaxValue")).maxValue())
nova chamada: assertNull(((EncodedDataType) map.get("testTypeDefaultCharMaxValue")).maxValue(), "Era esperado nulo, mas " + result5 + " <((EncodedDataType) map.get('testTypeDefaultCharMaxValue')).maxValue()> não é nulo")
chamada antiga: assertNull(((EncodedDataType) map.get("testTypeDefaultCharNullValue")).nullValue())
nova chamada: assertNull(((EncodedDataType) map.get("testTypeDefaultCharNullValue")).nullValue(), "Era esperado nulo, mas " + result6 + " <((EncodedDataType) map.get('testTypeDefaultCharNullValue')).nullValue()> não é nulo")
chamada antiga: fail("Expected IllegalStateException")
nova chamada: fail("Expected IllegalStateException", "A execução falhou por uma causa deliberada")
chamada antiga: assertNotNull(fields)
nova chamada: assertNotNull(fields, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(fields.get(1).dimensionType())
nova chamada: assertNotNull(fields.get(1).dimensionType(), "Era esperado não nulo, mas " + result7 + " <fields.get(1).dimensionType()> é nulo")
chamada antiga: assertNotNull(groupFields)
nova chamada: assertNotNull(groupFields, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(testResource)
nova chamada: assertNotNull(testResource, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(messageSchema.getType("Symbol"))
nova chamada: assertNotNull(messageSchema.getType("Symbol"), "Era esperado não nulo, mas " + result8 + " <messageSchema.getType('Symbol')> é nulo")
chamada antiga: fail("Expected IllegalStateException", "A execução falhou por uma causa deliberada")
nova chamada: fail("Expected IllegalStateException", "A execução falhou por uma causa deliberada", "A execução falhou por uma causa deliberada")
chamada antiga: fail("expected IllegalStateException")
nova chamada: fail("expected IllegalStateException", "A execução falhou por uma causa deliberada")
chamada antiga: fail("expected IllegalStateException")
nova chamada: fail("expected IllegalStateException", "A execução falhou por uma causa deliberada")
chamada antiga: fail("expected IllegalStateException")
nova chamada: fail("expected IllegalStateException", "A execução falhou por uma causa deliberada")
chamada antiga: fail("expected IllegalStateException")
nova chamada: fail("expected IllegalStateException", "A execução falhou por uma causa deliberada")
chamada antiga: fail("expected IllegalStateException")
nova chamada: fail("expected IllegalStateException", "A execução falhou por uma causa deliberada")
chamada antiga: fail("expected IllegalStateException")
nova chamada: fail("expected IllegalStateException", "A execução falhou por uma causa deliberada")
chamada antiga: fail("expected IllegalStateException")
nova chamada: fail("expected IllegalStateException", "A execução falhou por uma causa deliberada")
chamada antiga: fail("expected IllegalStateException")
nova chamada: fail("expected IllegalStateException", "A execução falhou por uma causa deliberada")
chamada antiga: assertTrue(varDataField.isVariableLength())
nova chamada: assertTrue(varDataField.isVariableLength(), "Era esperado verdadeiro, mas " + result9 + " <varDataField.isVariableLength()> é falso")
chamada antiga: assertNull(fields.get(1).type())
nova chamada: assertNull(fields.get(1).type(), "Era esperado nulo, mas " + result10 + " <fields.get(1).type()> não é nulo")
chamada antiga: assertNull(fields.get(1).type())
nova chamada: assertNull(fields.get(1).type(), "Era esperado nulo, mas " + result11 + " <fields.get(1).type()> não é nulo")
chamada antiga: assertNull(fields.get(1).type())
nova chamada: assertNull(fields.get(1).type(), "Era esperado nulo, mas " + result12 + " <fields.get(1).type()> não é nulo")
chamada antiga: fail("expected IllegalStateException", "A execução falhou por uma causa deliberada")
nova chamada: fail("expected IllegalStateException", "A execução falhou por uma causa deliberada", "A execução falhou por uma causa deliberada")
chamada antiga: fail("expected IllegalStateException", "A execução falhou por uma causa deliberada")
nova chamada: fail("expected IllegalStateException", "A execução falhou por uma causa deliberada", "A execução falhou por uma causa deliberada")
chamada antiga: fail("expected IllegalStateException", "A execução falhou por uma causa deliberada")
nova chamada: fail("expected IllegalStateException", "A execução falhou por uma causa deliberada", "A execução falhou por uma causa deliberada")
chamada antiga: fail("expected IllegalStateException", "A execução falhou por uma causa deliberada")
nova chamada: fail("expected IllegalStateException", "A execução falhou por uma causa deliberada", "A execução falhou por uma causa deliberada")
chamada antiga: fail("expected IllegalStateException", "A execução falhou por uma causa deliberada")
nova chamada: fail("expected IllegalStateException", "A execução falhou por uma causa deliberada", "A execução falhou por uma causa deliberada")
chamada antiga: fail("expected IllegalStateException", "A execução falhou por uma causa deliberada")
nova chamada: fail("expected IllegalStateException", "A execução falhou por uma causa deliberada", "A execução falhou por uma causa deliberada")
chamada antiga: fail("expected IllegalStateException", "A execução falhou por uma causa deliberada")
nova chamada: fail("expected IllegalStateException", "A execução falhou por uma causa deliberada", "A execução falhou por uma causa deliberada")
chamada antiga: fail("expected IllegalStateException", "A execução falhou por uma causa deliberada")
nova chamada: fail("expected IllegalStateException", "A execução falhou por uma causa deliberada", "A execução falhou por uma causa deliberada")
chamada antiga: assertSame(SchemaTransformer.IDENTITY_TRANSFORMER, schemaTransformerFactory.delegate())
nova chamada: assertSame(SchemaTransformer.IDENTITY_TRANSFORMER, schemaTransformerFactory.delegate(), "Era esperado objetos iguais, mas  SchemaTransformer.IDENTITY_TRANSFORMER é diferente de " + result13 + " <schemaTransformerFactory.delegate()>")
chamada antiga: assertSame(SchemaTransformer.IDENTITY_TRANSFORMER, schemaTransformerFactory.delegate())
nova chamada: assertSame(SchemaTransformer.IDENTITY_TRANSFORMER, schemaTransformerFactory.delegate(), "Era esperado objetos iguais, mas  SchemaTransformer.IDENTITY_TRANSFORMER é diferente de " + result14 + " <schemaTransformerFactory.delegate()>")
chamada antiga: assertInstanceOf(SinceVersionSchemaTransformer.class, delegate)
nova chamada: assertInstanceOf(SinceVersionSchemaTransformer.class, delegate, "Era esperado que   SinceVersionSchemaTransformer.class fosse uma instancia de " + " delegate, mas não é")
chamada antiga: assertEquals(5, transformer.sinceVersion())
nova chamada: assertEquals(5, transformer.sinceVersion(), "Era esperado valores iguais, mas  5 é diferente de " + result15 + " <transformer.sinceVersion()>")
chamada antiga: assertInstanceOf(IdKeyedSchemaTransformer.class, delegate)
nova chamada: assertInstanceOf(IdKeyedSchemaTransformer.class, delegate, "Era esperado que   IdKeyedSchemaTransformer.class fosse uma instancia de " + " delegate, mas não é")
chamada antiga: assertEquals(20, schemaTransformer1.sinceVersion())
nova chamada: assertEquals(20, schemaTransformer1.sinceVersion(), "Era esperado valores iguais, mas  20 é diferente de " + result16 + " <schemaTransformer1.sinceVersion()>")
chamada antiga: assertEquals(32, schemaTransformer4.sinceVersion())
nova chamada: assertEquals(32, schemaTransformer4.sinceVersion(), "Era esperado valores iguais, mas  32 é diferente de " + result17 + " <schemaTransformer4.sinceVersion()>")
chamada antiga: assertEquals(5, schemaTransformerDefault.sinceVersion())
nova chamada: assertEquals(5, schemaTransformerDefault.sinceVersion(), "Era esperado valores iguais, mas  5 é diferente de " + result18 + " <schemaTransformerDefault.sinceVersion()>")
chamada antiga: assertEquals('a', (char) aByte)
nova chamada: assertEquals('a', (char) aByte, "Era esperado valores iguais, mas  'a' é diferente de " + " (char) aByte")
chamada antiga: assertEquals("97", Byte.toString(aByte))
nova chamada: assertEquals("97", Byte.toString(aByte), "Era esperado valores iguais, mas  '97' é diferente de " + result19 + " <Byte.toString(aByte)>")
chamada antiga: assertEquals("65_u8", generateRustLiteral(CHAR, "65"))
nova chamada: assertEquals("65_u8", generateRustLiteral(CHAR, "65"), "Era esperado valores iguais, mas  '65_u8' é diferente de " + result20 + " <generateRustLiteral(CHAR, '65')>")
chamada antiga: assertEquals("64.1_f64", generateRustLiteral(DOUBLE, "64.1"))
nova chamada: assertEquals("64.1_f64", generateRustLiteral(DOUBLE, "64.1"), "Era esperado valores iguais, mas  '64.1_f64' é diferente de " + result21 + " <generateRustLiteral(DOUBLE, '64.1')>")
chamada antiga: assertEquals("f64::NAN", generateRustLiteral(DOUBLE, "NaN"))
nova chamada: assertEquals("f64::NAN", generateRustLiteral(DOUBLE, "NaN"), "Era esperado valores iguais, mas  'f64::NAN' é diferente de " + result22 + " <generateRustLiteral(DOUBLE, 'NaN')>")
chamada antiga: assertEquals("64.1_f32", generateRustLiteral(FLOAT, "64.1"))
nova chamada: assertEquals("64.1_f32", generateRustLiteral(FLOAT, "64.1"), "Era esperado valores iguais, mas  '64.1_f32' é diferente de " + result23 + " <generateRustLiteral(FLOAT, '64.1')>")
chamada antiga: assertEquals("f32::NAN", generateRustLiteral(FLOAT, "NaN"))
nova chamada: assertEquals("f32::NAN", generateRustLiteral(FLOAT, "NaN"), "Era esperado valores iguais, mas  'f32::NAN' é diferente de " + result24 + " <generateRustLiteral(FLOAT, 'NaN')>")
chamada antiga: assertEquals("65_i8", generateRustLiteral(INT8, "65"))
nova chamada: assertEquals("65_i8", generateRustLiteral(INT8, "65"), "Era esperado valores iguais, mas  '65_i8' é diferente de " + result25 + " <generateRustLiteral(INT8, '65')>")
chamada antiga: assertEquals("65_i16", generateRustLiteral(INT16, "65"))
nova chamada: assertEquals("65_i16", generateRustLiteral(INT16, "65"), "Era esperado valores iguais, mas  '65_i16' é diferente de " + result26 + " <generateRustLiteral(INT16, '65')>")
chamada antiga: assertEquals("65_i32", generateRustLiteral(INT32, "65"))
nova chamada: assertEquals("65_i32", generateRustLiteral(INT32, "65"), "Era esperado valores iguais, mas  '65_i32' é diferente de " + result27 + " <generateRustLiteral(INT32, '65')>")
chamada antiga: assertEquals("65_i64", generateRustLiteral(INT64, "65"))
nova chamada: assertEquals("65_i64", generateRustLiteral(INT64, "65"), "Era esperado valores iguais, mas  '65_i64' é diferente de " + result28 + " <generateRustLiteral(INT64, '65')>")
chamada antiga: assertEquals("0x41_u8", generateRustLiteral(UINT8, "65"))
nova chamada: assertEquals("0x41_u8", generateRustLiteral(UINT8, "65"), "Era esperado valores iguais, mas  '0x41_u8' é diferente de " + result29 + " <generateRustLiteral(UINT8, '65')>")
chamada antiga: assertEquals("0x41_u16", generateRustLiteral(UINT16, "65"))
nova chamada: assertEquals("0x41_u16", generateRustLiteral(UINT16, "65"), "Era esperado valores iguais, mas  '0x41_u16' é diferente de " + result30 + " <generateRustLiteral(UINT16, '65')>")
chamada antiga: assertEquals("0x41_u32", generateRustLiteral(UINT32, "65"))
nova chamada: assertEquals("0x41_u32", generateRustLiteral(UINT32, "65"), "Era esperado valores iguais, mas  '0x41_u32' é diferente de " + result31 + " <generateRustLiteral(UINT32, '65')>")
chamada antiga: assertEquals("0x41_u64", generateRustLiteral(UINT64, "65"))
nova chamada: assertEquals("0x41_u64", generateRustLiteral(UINT64, "65"), "Era esperado valores iguais, mas  '0x41_u64' é diferente de " + result32 + " <generateRustLiteral(UINT64, '65')>")
chamada antiga: assertEquals("0xff_u8", generateRustLiteral(UINT8, UINT8.nullValue().toString()))
nova chamada: assertEquals("0xff_u8", generateRustLiteral(UINT8, UINT8.nullValue().toString()), "Era esperado valores iguais, mas  '0xff_u8' é diferente de " + result33 + " <generateRustLiteral(UINT8, UINT8.nullValue().toString())>")
chamada antiga: assertEquals("0xffff_u16", generateRustLiteral(UINT16, UINT16.nullValue().toString()))
nova chamada: assertEquals("0xffff_u16", generateRustLiteral(UINT16, UINT16.nullValue().toString()), "Era esperado valores iguais, mas  '0xffff_u16' é diferente de " + result34 + " <generateRustLiteral(UINT16, UINT16.nullValue().toString())>")
chamada antiga: assertEquals("0xffffffff_u32", generateRustLiteral(UINT32, UINT32.nullValue().toString()))
nova chamada: assertEquals("0xffffffff_u32", generateRustLiteral(UINT32, UINT32.nullValue().toString()), "Era esperado valores iguais, mas  '0xffffffff_u32' é diferente de " + result35 + " <generateRustLiteral(UINT32, UINT32.nullValue().toString())>")
chamada antiga: assertEquals("0xffffffffffffffff_u64", generateRustLiteral(UINT64, UINT64.nullValue().toString()))
nova chamada: assertEquals("0xffffffffffffffff_u64", generateRustLiteral(UINT64, UINT64.nullValue().toString()), "Era esperado valores iguais, mas  '0xffffffffffffffff_u64' é diferente de " + result36 + " <generateRustLiteral(UINT64, UINT64.nullValue().toString())>")
chamada antiga: assertEquals("ABee", cleanUpperAcronyms("ABee"))
nova chamada: assertEquals("ABee", cleanUpperAcronyms("ABee"), "Era esperado valores iguais, mas  'ABee' é diferente de " + result37 + " <cleanUpperAcronyms('ABee')>")
chamada antiga: assertEquals("mdEntryTypeBook", cleanUpperAcronyms("MDEntryTypeBook"))
nova chamada: assertEquals("mdEntryTypeBook", cleanUpperAcronyms("MDEntryTypeBook"), "Era esperado valores iguais, mas  'mdEntryTypeBook' é diferente de " + result38 + " <cleanUpperAcronyms('MDEntryTypeBook')>")
chamada antiga: assertEquals("MD_EntryTypeBook", cleanUpperAcronyms("MD_EntryTypeBook"))
nova chamada: assertEquals("MD_EntryTypeBook", cleanUpperAcronyms("MD_EntryTypeBook"), "Era esperado valores iguais, mas  'MD_EntryTypeBook' é diferente de " + result39 + " <cleanUpperAcronyms('MD_EntryTypeBook')>")
chamada antiga: assertEquals("price9Book", cleanUpperAcronyms("PRICE9Book"))
nova chamada: assertEquals("price9Book", cleanUpperAcronyms("PRICE9Book"), "Era esperado valores iguais, mas  'price9Book' é diferente de " + result40 + " <cleanUpperAcronyms('PRICE9Book')>")
chamada antiga: assertEquals("", formatFunctionName(""))
nova chamada: assertEquals("", formatFunctionName(""), "Era esperado valores iguais, mas  '' é diferente de " + result41 + " <formatFunctionName('')>")
chamada antiga: assertEquals("a", formatFunctionName("a"))
nova chamada: assertEquals("a", formatFunctionName("a"), "Era esperado valores iguais, mas  'a' é diferente de " + result42 + " <formatFunctionName('a')>")
chamada antiga: assertEquals("a", formatFunctionName("A"))
nova chamada: assertEquals("a", formatFunctionName("A"), "Era esperado valores iguais, mas  'a' é diferente de " + result43 + " <formatFunctionName('A')>")
chamada antiga: assertEquals("car", formatFunctionName("Car"))
nova chamada: assertEquals("car", formatFunctionName("Car"), "Era esperado valores iguais, mas  'car' é diferente de " + result44 + " <formatFunctionName('Car')>")
chamada antiga: assertEquals("car", formatFunctionName("car"))
nova chamada: assertEquals("car", formatFunctionName("car"), "Era esperado valores iguais, mas  'car' é diferente de " + result45 + " <formatFunctionName('car')>")
chamada antiga: assertEquals("decode_car", formatFunctionName("DecodeCar"))
nova chamada: assertEquals("decode_car", formatFunctionName("DecodeCar"), "Era esperado valores iguais, mas  'decode_car' é diferente de " + result46 + " <formatFunctionName('DecodeCar')>")
chamada antiga: assertEquals("decode_car", formatFunctionName("decodeCar"))
nova chamada: assertEquals("decode_car", formatFunctionName("decodeCar"), "Era esperado valores iguais, mas  'decode_car' é diferente de " + result47 + " <formatFunctionName('decodeCar')>")
chamada antiga: assertEquals("decode_car", formatFunctionName("decode_car"))
nova chamada: assertEquals("decode_car", formatFunctionName("decode_car"), "Era esperado valores iguais, mas  'decode_car' é diferente de " + result48 + " <formatFunctionName('decode_car')>")
chamada antiga: assertEquals("decode_car", formatFunctionName("Decode_car"))
nova chamada: assertEquals("decode_car", formatFunctionName("Decode_car"), "Era esperado valores iguais, mas  'decode_car' é diferente de " + result49 + " <formatFunctionName('Decode_car')>")
chamada antiga: assertEquals("decode_car", formatFunctionName("decode_Car"))
nova chamada: assertEquals("decode_car", formatFunctionName("decode_Car"), "Era esperado valores iguais, mas  'decode_car' é diferente de " + result50 + " <formatFunctionName('decode_Car')>")
chamada antiga: assertEquals("decode_car", formatFunctionName("Decode_Car"))
nova chamada: assertEquals("decode_car", formatFunctionName("Decode_Car"), "Era esperado valores iguais, mas  'decode_car' é diferente de " + result51 + " <formatFunctionName('Decode_Car')>")
chamada antiga: assertEquals("decode_car", formatFunctionName("DECODE_Car"))
nova chamada: assertEquals("decode_car", formatFunctionName("DECODE_Car"), "Era esperado valores iguais, mas  'decode_car' é diferente de " + result52 + " <formatFunctionName('DECODE_Car')>")
chamada antiga: assertEquals("decode_car", formatFunctionName("DECODE_car"))
nova chamada: assertEquals("decode_car", formatFunctionName("DECODE_car"), "Era esperado valores iguais, mas  'decode_car' é diferente de " + result53 + " <formatFunctionName('DECODE_car')>")
chamada antiga: assertEquals("decode_car", formatFunctionName("DECODECar"))
nova chamada: assertEquals("decode_car", formatFunctionName("DECODECar"), "Era esperado valores iguais, mas  'decode_car' é diferente de " + result54 + " <formatFunctionName('DECODECar')>")
chamada antiga: assertEquals("decode_car", formatFunctionName("DECODE_CAR"))
nova chamada: assertEquals("decode_car", formatFunctionName("DECODE_CAR"), "Era esperado valores iguais, mas  'decode_car' é diferente de " + result55 + " <formatFunctionName('DECODE_CAR')>")
chamada antiga: assertEquals("decode_ca_r", formatFunctionName("DECODE_caR"))
nova chamada: assertEquals("decode_ca_r", formatFunctionName("DECODE_caR"), "Era esperado valores iguais, mas  'decode_ca_r' é diferente de " + result56 + " <formatFunctionName('DECODE_caR')>")
chamada antiga: assertEquals("pricenull_9", formatFunctionName("PRICENULL9"))
nova chamada: assertEquals("pricenull_9", formatFunctionName("PRICENULL9"), "Era esperado valores iguais, mas  'pricenull_9' é diferente de " + result57 + " <formatFunctionName('PRICENULL9')>")
chamada antiga: assertEquals("price_9_book", formatFunctionName("PRICE9Book"))
nova chamada: assertEquals("price_9_book", formatFunctionName("PRICE9Book"), "Era esperado valores iguais, mas  'price_9_book' é diferente de " + result58 + " <formatFunctionName('PRICE9Book')>")
chamada antiga: assertEquals("issue_435", formatFunctionName("issue435"))
nova chamada: assertEquals("issue_435", formatFunctionName("issue435"), "Era esperado valores iguais, mas  'issue_435' é diferente de " + result59 + " <formatFunctionName('issue435')>")
chamada antiga: assertEquals("upper_case", formatFunctionName("UPPERCase"))
nova chamada: assertEquals("upper_case", formatFunctionName("UPPERCase"), "Era esperado valores iguais, mas  'upper_case' é diferente de " + result60 + " <formatFunctionName('UPPERCase')>")
chamada antiga: assertEquals("no_md_entries", formatFunctionName("NoMDEntries"))
nova chamada: assertEquals("no_md_entries", formatFunctionName("NoMDEntries"), "Era esperado valores iguais, mas  'no_md_entries' é diferente de " + result61 + " <formatFunctionName('NoMDEntries')>")
chamada antiga: assertEquals("md_entry_type_book", formatFunctionName("MD_EntryTYPEBook"))
nova chamada: assertEquals("md_entry_type_book", formatFunctionName("MD_EntryTYPEBook"), "Era esperado valores iguais, mas  'md_entry_type_book' é diferente de " + result62 + " <formatFunctionName('MD_EntryTYPEBook')>")
chamada antiga: assertEquals("cl_ord_id", formatFunctionName("ClOrdID"))
nova chamada: assertEquals("cl_ord_id", formatFunctionName("ClOrdID"), "Era esperado valores iguais, mas  'cl_ord_id' é diferente de " + result63 + " <formatFunctionName('ClOrdID')>")
chamada antiga: assertEquals("ab_c", formatFunctionName("aBc"))
nova chamada: assertEquals("ab_c", formatFunctionName("aBc"), "Era esperado valores iguais, mas  'ab_c' é diferente de " + result64 + " <formatFunctionName('aBc')>")
chamada antiga: assertEquals("ab_cd", formatFunctionName("aBcD"))
nova chamada: assertEquals("ab_cd", formatFunctionName("aBcD"), "Era esperado valores iguais, mas  'ab_cd' é diferente de " + result65 + " <formatFunctionName('aBcD')>")
chamada antiga: assertEquals("ab_cd", formatFunctionName("aB_cD"))
nova chamada: assertEquals("ab_cd", formatFunctionName("aB_cD"), "Era esperado valores iguais, mas  'ab_cd' é diferente de " + result66 + " <formatFunctionName('aB_cD')>")
chamada antiga: assertEquals("ab_cd", formatFunctionName("AbCd"))
nova chamada: assertEquals("ab_cd", formatFunctionName("AbCd"), "Era esperado valores iguais, mas  'ab_cd' é diferente de " + result67 + " <formatFunctionName('AbCd')>")
chamada antiga: assertTrue(containsCodeWithSinceVersion(sources, versionIncluded))
nova chamada: assertTrue(containsCodeWithSinceVersion(sources, versionIncluded), "Era esperado verdadeiro, mas " + result68 + " <containsCodeWithSinceVersion(sources, versionIncluded)> é falso")
chamada antiga: assertTrue(doesNotContainsCodeWithSinceVersion(sources, versionExcluded))
nova chamada: assertTrue(doesNotContainsCodeWithSinceVersion(sources, versionExcluded), "Era esperado verdadeiro, mas " + result69 + " <doesNotContainsCodeWithSinceVersion(sources, versionExcluded)> é falso")
chamada antiga: assertEquals("[Car]" + "(sbeTemplateId=1|sbeSchemaId=1|sbeSchemaVersion=2|sbeBlockLength=62):" + "serialNumber=1234|modelYear=2013|available=T|code=A|" + "someNumbers=[0,1,2,3,4]|" + "vehicleCode=ab\"def|" + "extras={sportsPack,cruiseControl}|" + "engine=(capacity=2000|numCylinders=4|manufacturerCode=123|)|" + "uuid=[7,3]|" + "cupHolderCount=5|" + "fuelFigures=[" + "(speed=30|mpg=35.9)," + "(speed=55|mpg=49.0)," + "(speed=75|mpg=40.0)]|" + "performanceFigures=[" + "(octaneRating=95|acceleration=[(mph=30|seconds=4.0),(mph=60|seconds=7.5),(mph=100|seconds=12.2)])," + "(octaneRating=99|acceleration=[(mph=30|seconds=3.8),(mph=60|seconds=7.1),(mph=100|seconds=11.8)])]|" + "manufacturer='Honda'|model='Civic VTi'|activationCode='315\\8'", result)
nova chamada: assertEquals("[Car]" + "(sbeTemplateId=1|sbeSchemaId=1|sbeSchemaVersion=2|sbeBlockLength=62):" + "serialNumber=1234|modelYear=2013|available=T|code=A|" + "someNumbers=[0,1,2,3,4]|" + "vehicleCode=ab\"def|" + "extras={sportsPack,cruiseControl}|" + "engine=(capacity=2000|numCylinders=4|manufacturerCode=123|)|" + "uuid=[7,3]|" + "cupHolderCount=5|" + "fuelFigures=[" + "(speed=30|mpg=35.9)," + "(speed=55|mpg=49.0)," + "(speed=75|mpg=40.0)]|" + "performanceFigures=[" + "(octaneRating=95|acceleration=[(mph=30|seconds=4.0),(mph=60|seconds=7.5),(mph=100|seconds=12.2)])," + "(octaneRating=99|acceleration=[(mph=30|seconds=3.8),(mph=60|seconds=7.1),(mph=100|seconds=11.8)])]|" + "manufacturer='Honda'|model='Civic VTi'|activationCode='315\\8'", result, "Era esperado valores iguais, mas  '[Car]' + '(sbeTemplateId=1|sbeSchemaId=1|sbeSchemaVersion=2|sbeBlockLength=62):' + 'serialNumber=1234|modelYear=2013|available=T|code=A|' + 'someNumbers=[0,1,2,3,4]|' + 'vehicleCode=ab\'def|' + 'extras={sportsPack,cruiseControl}|' + 'engine=(capacity=2000|numCylinders=4|manufacturerCode=123|)|' + 'uuid=[7,3]|' + 'cupHolderCount=5|' + 'fuelFigures=[' + '(speed=30|mpg=35.9),' + '(speed=55|mpg=49.0),' + '(speed=75|mpg=40.0)]|' + 'performanceFigures=[' + '(octaneRating=95|acceleration=[(mph=30|seconds=4.0),(mph=60|seconds=7.5),(mph=100|seconds=12.2)]),' + '(octaneRating=99|acceleration=[(mph=30|seconds=3.8),(mph=60|seconds=7.1),(mph=100|seconds=11.8)])]|' + 'manufacturer='Honda'|model='Civic VTi'|activationCode='315\\8'' é diferente de " + " result")
chamada antiga: assertEquals("[Car]" + "(sbeTemplateId=1|sbeSchemaId=1|sbeSchemaVersion=2|sbeBlockLength=62):" + "serialNumber=0|modelYear=0|available=F|code=NULL_VAL|someNumbers=[0,0,0,0,0]|vehicleCode=|extras={}|" + "engine=(capacity=0|numCylinders=0|manufacturerCode=|)|" + "uuid=[0,0]|cupHolderCount=0|" + "fuelFigures=[]|performanceFigures=[]|manufacturer=''|model=''|activationCode=''", result)
nova chamada: assertEquals("[Car]" + "(sbeTemplateId=1|sbeSchemaId=1|sbeSchemaVersion=2|sbeBlockLength=62):" + "serialNumber=0|modelYear=0|available=F|code=NULL_VAL|someNumbers=[0,0,0,0,0]|vehicleCode=|extras={}|" + "engine=(capacity=0|numCylinders=0|manufacturerCode=|)|" + "uuid=[0,0]|cupHolderCount=0|" + "fuelFigures=[]|performanceFigures=[]|manufacturer=''|model=''|activationCode=''", result, "Era esperado valores iguais, mas  '[Car]' + '(sbeTemplateId=1|sbeSchemaId=1|sbeSchemaVersion=2|sbeBlockLength=62):' + 'serialNumber=0|modelYear=0|available=F|code=NULL_VAL|someNumbers=[0,0,0,0,0]|vehicleCode=|extras={}|' + 'engine=(capacity=0|numCylinders=0|manufacturerCode=|)|' + 'uuid=[0,0]|cupHolderCount=0|' + 'fuelFigures=[]|performanceFigures=[]|manufacturer=''|model=''|activationCode=''' é diferente de " + " result")
chamada antiga: assertNotNull(aClass)
nova chamada: assertNotNull(aClass, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(ir.id(), decodedIr.id())
nova chamada: assertEquals(ir.id(), decodedIr.id(), "Era esperado valores iguais, mas " + result70 + " <ir.id()> é diferente de " + result71 + " <decodedIr.id()>")
chamada antiga: assertEquals(ir.version(), decodedIr.version())
nova chamada: assertEquals(ir.version(), decodedIr.version(), "Era esperado valores iguais, mas " + result72 + " <ir.version()> é diferente de " + result73 + " <decodedIr.version()>")
chamada antiga: assertEquals(ir.byteOrder(), decodedIr.byteOrder())
nova chamada: assertEquals(ir.byteOrder(), decodedIr.byteOrder(), "Era esperado valores iguais, mas " + result74 + " <ir.byteOrder()> é diferente de " + result75 + " <decodedIr.byteOrder()>")
chamada antiga: assertEquals(ir.applicableNamespace(), decodedIr.applicableNamespace())
nova chamada: assertEquals(ir.applicableNamespace(), decodedIr.applicableNamespace(), "Era esperado valores iguais, mas " + result76 + " <ir.applicableNamespace()> é diferente de " + result77 + " <decodedIr.applicableNamespace()>")
chamada antiga: assertEquals(ir.packageName(), decodedIr.packageName())
nova chamada: assertEquals(ir.packageName(), decodedIr.packageName(), "Era esperado valores iguais, mas " + result78 + " <ir.packageName()> é diferente de " + result79 + " <decodedIr.packageName()>")
chamada antiga: assertEquals(ir.types().size(), decodedIr.types().size())
nova chamada: assertEquals(ir.types().size(), decodedIr.types().size(), "Era esperado valores iguais, mas " + result80 + " <ir.types().size()> é diferente de " + result81 + " <decodedIr.types().size()>")
chamada antiga: assertEquals(ir.messages().size(), decodedIr.messages().size())
nova chamada: assertEquals(ir.messages().size(), decodedIr.messages().size(), "Era esperado valores iguais, mas " + result82 + " <ir.messages().size()> é diferente de " + result83 + " <decodedIr.messages().size()>")
chamada antiga: assertEquals(passOne, passTwo)
nova chamada: assertEquals(passOne, passTwo, "Era esperado valores iguais, mas  passOne é diferente de " + " passTwo")
chamada antiga: assertNotEquals(passOne, partialPassOne)
nova chamada: assertNotEquals(passOne, partialPassOne, "Era esperado valores diferentes, mas  passOne é igual a " + " partialPassOne")
chamada antiga: assertEquals(partialPassOne, partialPassTwo)
nova chamada: assertEquals(partialPassOne, partialPassTwo, "Era esperado valores iguais, mas  partialPassOne é diferente de " + " partialPassTwo")
chamada antiga: assertEquals(passOne, passThree)
nova chamada: assertEquals(passOne, passThree, "Era esperado valores iguais, mas  passOne é diferente de " + " passThree")
chamada antiga: assertNotNull(clazz)
nova chamada: assertNotNull(clazz, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(clazz)
nova chamada: assertNotNull(clazz, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(clazz)
nova chamada: assertNotNull(clazz, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(clazz)
nova chamada: assertNotNull(clazz, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(clazz)
nova chamada: assertNotNull(clazz, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(clazz)
nova chamada: assertNotNull(clazz, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(groupFlyweight)
nova chamada: assertNotNull(groupFlyweight, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(expectedSerialNumber, serialNumber)
nova chamada: assertEquals(expectedSerialNumber, serialNumber, "Era esperado valores iguais, mas  expectedSerialNumber é diferente de " + " serialNumber")
chamada antiga: assertEquals(expectedManufacturer, manufacturer)
nova chamada: assertEquals(expectedManufacturer, manufacturer, "Era esperado valores iguais, mas  expectedManufacturer é diferente de " + " manufacturer")
chamada antiga: assertEquals(expectedEngineCapacity, getCapacity(engineDecoder))
nova chamada: assertEquals(expectedEngineCapacity, getCapacity(engineDecoder), "Era esperado valores iguais, mas  expectedEngineCapacity é diferente de " + result84 + " <getCapacity(engineDecoder)>")
chamada antiga: assertTrue(getCruiseControl(extrasDecoder))
nova chamada: assertTrue(getCruiseControl(extrasDecoder), "Era esperado verdadeiro, mas " + result85 + " <getCruiseControl(extrasDecoder)> é falso")
chamada antiga: assertNotNull(minValue)
nova chamada: assertNotNull(minValue, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(0, minValue.invoke(null))
nova chamada: assertEquals(0, minValue.invoke(null), "Era esperado valores iguais, mas  0 é diferente de " + result86 + " <minValue.invoke(null)>")
chamada antiga: assertNotNull(maxValue)
nova chamada: assertNotNull(maxValue, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(65534, maxValue.invoke(null))
nova chamada: assertEquals(65534, maxValue.invoke(null), "Era esperado valores iguais, mas  65534 é diferente de " + result87 + " <maxValue.invoke(null)>")
chamada antiga: assertNotNull(encoderClazz)
nova chamada: assertNotNull(encoderClazz, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(encoderClazz.isAnnotationPresent(Deprecated.class))
nova chamada: assertTrue(encoderClazz.isAnnotationPresent(Deprecated.class), "Era esperado verdadeiro, mas " + result88 + " <encoderClazz.isAnnotationPresent(Deprecated.class)> é falso")
chamada antiga: assertNotNull(decoderClazz)
nova chamada: assertNotNull(decoderClazz, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(decoderClazz.isAnnotationPresent(Deprecated.class))
nova chamada: assertTrue(decoderClazz.isAnnotationPresent(Deprecated.class), "Era esperado verdadeiro, mas " + result89 + " <decoderClazz.isAnnotationPresent(Deprecated.class)> é falso")
chamada antiga: assertNotNull(encoderClazz)
nova chamada: assertNotNull(encoderClazz, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(decoderClazz)
nova chamada: assertNotNull(decoderClazz, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(sources.get("test.message.schema.common.CarEncoder"))
nova chamada: assertNotNull(sources.get("test.message.schema.common.CarEncoder"), "Era esperado não nulo, mas " + result90 + " <sources.get('test.message.schema.common.CarEncoder')> é nulo")
chamada antiga: assertNotNull(sources.get("test.message.schema.common.CarDecoder"))
nova chamada: assertNotNull(sources.get("test.message.schema.common.CarDecoder"), "Era esperado não nulo, mas " + result91 + " <sources.get('test.message.schema.common.CarDecoder')> é nulo")
chamada antiga: assertNotNull(sources.get("outside.schema.BooleanType"))
nova chamada: assertNotNull(sources.get("outside.schema.BooleanType"), "Era esperado não nulo, mas " + result92 + " <sources.get('outside.schema.BooleanType')> é nulo")
chamada antiga: assertNotNull(sources.get("outside.schema.DaysEncoder"))
nova chamada: assertNotNull(sources.get("outside.schema.DaysEncoder"), "Era esperado não nulo, mas " + result93 + " <sources.get('outside.schema.DaysEncoder')> é nulo")
chamada antiga: assertNotNull(sources.get("outside.schema.DaysDecoder"))
nova chamada: assertNotNull(sources.get("outside.schema.DaysDecoder"), "Era esperado não nulo, mas " + result94 + " <sources.get('outside.schema.DaysDecoder')> é nulo")
chamada antiga: assertNotNull(sources.get(ir.applicableNamespace() + ".MessageHeaderEncoder"))
nova chamada: assertNotNull(sources.get(ir.applicableNamespace() + ".MessageHeaderEncoder"), "Era esperado não nulo, mas " + result95 + " <sources.get(ir.applicableNamespace() + '.MessageHeaderEncoder')> é nulo")
chamada antiga: assertNotNull(encoderClazz)
nova chamada: assertNotNull(encoderClazz, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(decoderClazz)
nova chamada: assertNotNull(decoderClazz, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(sources.get(ir.applicableNamespace() + ".CarEncoder"))
nova chamada: assertNotNull(sources.get(ir.applicableNamespace() + ".CarEncoder"), "Era esperado não nulo, mas " + result96 + " <sources.get(ir.applicableNamespace() + '.CarEncoder')> é nulo")
chamada antiga: assertNotNull(sources.get(ir.applicableNamespace() + ".CarDecoder"))
nova chamada: assertNotNull(sources.get(ir.applicableNamespace() + ".CarDecoder"), "Era esperado não nulo, mas " + result97 + " <sources.get(ir.applicableNamespace() + '.CarDecoder')> é nulo")
chamada antiga: assertNotNull(sources.get(ir.applicableNamespace() + ".BooleanType"))
nova chamada: assertNotNull(sources.get(ir.applicableNamespace() + ".BooleanType"), "Era esperado não nulo, mas " + result98 + " <sources.get(ir.applicableNamespace() + '.BooleanType')> é nulo")
chamada antiga: assertNotNull(sources.get(ir.applicableNamespace() + ".DaysEncoder"))
nova chamada: assertNotNull(sources.get(ir.applicableNamespace() + ".DaysEncoder"), "Era esperado não nulo, mas " + result99 + " <sources.get(ir.applicableNamespace() + '.DaysEncoder')> é nulo")
chamada antiga: assertNotNull(sources.get(ir.applicableNamespace() + ".DaysDecoder"))
nova chamada: assertNotNull(sources.get(ir.applicableNamespace() + ".DaysDecoder"), "Era esperado não nulo, mas " + result100 + " <sources.get(ir.applicableNamespace() + '.DaysDecoder')> é nulo")
chamada antiga: assertNotNull(sources.get(ir.applicableNamespace() + ".MessageHeaderEncoder"))
nova chamada: assertNotNull(sources.get(ir.applicableNamespace() + ".MessageHeaderEncoder"), "Era esperado não nulo, mas " + result101 + " <sources.get(ir.applicableNamespace() + '.MessageHeaderEncoder')> é nulo")
chamada antiga: assertNotNull(clazz)
nova chamada: assertNotNull(clazz, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(readerClass)
nova chamada: assertNotNull(readerClass, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(clazz)
nova chamada: assertNotNull(clazz, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(initialLimit, rewindLimit)
nova chamada: assertEquals(initialLimit, rewindLimit, "Era esperado valores iguais, mas  initialLimit é diferente de " + " rewindLimit")
chamada antiga: assertEquals(readLimit, skipLimit)
nova chamada: assertEquals(readLimit, skipLimit, "Era esperado valores iguais, mas  readLimit é diferente de " + " skipLimit")
chamada antiga: assertEquals(encodedLength, decodedLengthNoRead)
nova chamada: assertEquals(encodedLength, decodedLengthNoRead, "Era esperado valores iguais, mas  encodedLength é diferente de " + " decodedLengthNoRead")
chamada antiga: assertEquals(encodedLength, decodedLengthFullSkip)
nova chamada: assertEquals(encodedLength, decodedLengthFullSkip, "Era esperado valores iguais, mas  encodedLength é diferente de " + " decodedLengthFullSkip")
chamada antiga: assertEquals(encodedLength, decodedLengthAfterRewind)
nova chamada: assertEquals(encodedLength, decodedLengthAfterRewind, "Era esperado valores iguais, mas  encodedLength é diferente de " + " decodedLengthAfterRewind")
chamada antiga: assertEquals(encodedLength, decodedLengthPartialRead)
nova chamada: assertEquals(encodedLength, decodedLengthPartialRead, "Era esperado valores iguais, mas  encodedLength é diferente de " + " decodedLengthPartialRead")
chamada antiga: assertEquals(ir.id(), decodedIr.id())
nova chamada: assertEquals(ir.id(), decodedIr.id(), "Era esperado valores iguais, mas " + result102 + " <ir.id()> é diferente de " + result103 + " <decodedIr.id()>")
chamada antiga: assertEquals(ir.version(), decodedIr.version())
nova chamada: assertEquals(ir.version(), decodedIr.version(), "Era esperado valores iguais, mas " + result104 + " <ir.version()> é diferente de " + result105 + " <decodedIr.version()>")
chamada antiga: assertEquals(ir.byteOrder(), decodedIr.byteOrder())
nova chamada: assertEquals(ir.byteOrder(), decodedIr.byteOrder(), "Era esperado valores iguais, mas " + result106 + " <ir.byteOrder()> é diferente de " + result107 + " <decodedIr.byteOrder()>")
chamada antiga: assertEquals(ir.applicableNamespace(), decodedIr.applicableNamespace())
nova chamada: assertEquals(ir.applicableNamespace(), decodedIr.applicableNamespace(), "Era esperado valores iguais, mas " + result108 + " <ir.applicableNamespace()> é diferente de " + result109 + " <decodedIr.applicableNamespace()>")
chamada antiga: assertEquals(ir.packageName(), decodedIr.packageName())
nova chamada: assertEquals(ir.packageName(), decodedIr.packageName(), "Era esperado valores iguais, mas " + result110 + " <ir.packageName()> é diferente de " + result111 + " <decodedIr.packageName()>")
chamada antiga: assertEquals(ir.types().size(), decodedIr.types().size())
nova chamada: assertEquals(ir.types().size(), decodedIr.types().size(), "Era esperado valores iguais, mas " + result112 + " <ir.types().size()> é diferente de " + result113 + " <decodedIr.types().size()>")
chamada antiga: assertEquals(ir.messages().size(), decodedIr.messages().size())
nova chamada: assertEquals(ir.messages().size(), decodedIr.messages().size(), "Era esperado valores iguais, mas " + result114 + " <ir.messages().size()> é diferente de " + result115 + " <decodedIr.messages().size()>")
chamada antiga: assertTrue(exists)
nova chamada: assertTrue(exists, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(exists)
nova chamada: assertTrue(exists, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(TestTargetLanguage.ir, ir)
nova chamada: assertEquals(TestTargetLanguage.ir, ir, "Era esperado valores iguais, mas  TestTargetLanguage.ir é diferente de " + " ir")
chamada antiga: assertEquals(TestTargetLanguage.outputDir, outputDir)
nova chamada: assertEquals(TestTargetLanguage.outputDir, outputDir, "Era esperado valores iguais, mas  TestTargetLanguage.outputDir é diferente de " + " outputDir")
chamada antiga: fail("expected IllegalStateException")
nova chamada: fail("expected IllegalStateException", "A execução falhou por uma causa deliberada")
chamada antiga: assertNotNull(ir.getType("compositeOne"))
nova chamada: assertNotNull(ir.getType("compositeOne"), "Era esperado não nulo, mas " + result116 + " <ir.getType('compositeOne')> é nulo")
chamada antiga: assertNotNull(ir.getType("compositeTwo"))
nova chamada: assertNotNull(ir.getType("compositeTwo"), "Era esperado não nulo, mas " + result117 + " <ir.getType('compositeTwo')> é nulo")
chamada antiga: assertNotNull(ir.getType("compositeThree"))
nova chamada: assertNotNull(ir.getType("compositeThree"), "Era esperado não nulo, mas " + result118 + " <ir.getType('compositeThree')> é nulo")
Total asserts: 937
Asserts sem descrição: 896
Asserts com descrição: 41
Assertion Roulette: 850

Após do refactor: 
Total asserts: 937
Asserts sem descrição: 744
Asserts com descrição: 193
Assertion Roulette: 721
