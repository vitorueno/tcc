
Projeto: /home/vitor-otto/opensource/simplify-1.3.0

Antes do refactor: 
chamada antiga: assertEquals(expectedRegisterCount, actualRegisterCount)
nova chamada: assertEquals(expectedRegisterCount, actualRegisterCount, "Era esperado valores iguais, mas  expectedRegisterCount é diferente de " + " actualRegisterCount")
chamada antiga: assertArrayEquals(expectedLines, actualLines)
nova chamada: assertArrayEquals(expectedLines, actualLines, "Era esperado arrays iguais, mas  expectedLines é diferente de " + " actualLines")
chamada antiga: assertEquals(Opcode.IGET, UnreflectionStrategy.getGetOpcode("I", isStatic))
nova chamada: assertEquals(Opcode.IGET, UnreflectionStrategy.getGetOpcode("I", isStatic), "Era esperado valores iguais, mas  Opcode.IGET é diferente de " + result0 + " <UnreflectionStrategy.getGetOpcode('I', isStatic)>")
chamada antiga: assertEquals(Opcode.IGET_BOOLEAN, UnreflectionStrategy.getGetOpcode("Z", isStatic))
nova chamada: assertEquals(Opcode.IGET_BOOLEAN, UnreflectionStrategy.getGetOpcode("Z", isStatic), "Era esperado valores iguais, mas  Opcode.IGET_BOOLEAN é diferente de " + result1 + " <UnreflectionStrategy.getGetOpcode('Z', isStatic)>")
chamada antiga: assertEquals(Opcode.IGET_BYTE, UnreflectionStrategy.getGetOpcode("B", isStatic))
nova chamada: assertEquals(Opcode.IGET_BYTE, UnreflectionStrategy.getGetOpcode("B", isStatic), "Era esperado valores iguais, mas  Opcode.IGET_BYTE é diferente de " + result2 + " <UnreflectionStrategy.getGetOpcode('B', isStatic)>")
chamada antiga: assertEquals(Opcode.IGET_CHAR, UnreflectionStrategy.getGetOpcode("C", isStatic))
nova chamada: assertEquals(Opcode.IGET_CHAR, UnreflectionStrategy.getGetOpcode("C", isStatic), "Era esperado valores iguais, mas  Opcode.IGET_CHAR é diferente de " + result3 + " <UnreflectionStrategy.getGetOpcode('C', isStatic)>")
chamada antiga: assertEquals(Opcode.IGET_OBJECT, UnreflectionStrategy.getGetOpcode("Ljava/lang/Object;", isStatic))
nova chamada: assertEquals(Opcode.IGET_OBJECT, UnreflectionStrategy.getGetOpcode("Ljava/lang/Object;", isStatic), "Era esperado valores iguais, mas  Opcode.IGET_OBJECT é diferente de " + result4 + " <UnreflectionStrategy.getGetOpcode('Ljava/lang/Object;', isStatic)>")
chamada antiga: assertEquals(Opcode.IGET_SHORT, UnreflectionStrategy.getGetOpcode("S", isStatic))
nova chamada: assertEquals(Opcode.IGET_SHORT, UnreflectionStrategy.getGetOpcode("S", isStatic), "Era esperado valores iguais, mas  Opcode.IGET_SHORT é diferente de " + result5 + " <UnreflectionStrategy.getGetOpcode('S', isStatic)>")
chamada antiga: assertEquals(Opcode.IGET_WIDE, UnreflectionStrategy.getGetOpcode("J", isStatic))
nova chamada: assertEquals(Opcode.IGET_WIDE, UnreflectionStrategy.getGetOpcode("J", isStatic), "Era esperado valores iguais, mas  Opcode.IGET_WIDE é diferente de " + result6 + " <UnreflectionStrategy.getGetOpcode('J', isStatic)>")
chamada antiga: assertEquals(Opcode.IGET_WIDE, UnreflectionStrategy.getGetOpcode("D", isStatic))
nova chamada: assertEquals(Opcode.IGET_WIDE, UnreflectionStrategy.getGetOpcode("D", isStatic), "Era esperado valores iguais, mas  Opcode.IGET_WIDE é diferente de " + result7 + " <UnreflectionStrategy.getGetOpcode('D', isStatic)>")
chamada antiga: assertEquals(Opcode.SGET, UnreflectionStrategy.getGetOpcode("I", isStatic))
nova chamada: assertEquals(Opcode.SGET, UnreflectionStrategy.getGetOpcode("I", isStatic), "Era esperado valores iguais, mas  Opcode.SGET é diferente de " + result8 + " <UnreflectionStrategy.getGetOpcode('I', isStatic)>")
chamada antiga: assertEquals(Opcode.SGET_BOOLEAN, UnreflectionStrategy.getGetOpcode("Z", isStatic))
nova chamada: assertEquals(Opcode.SGET_BOOLEAN, UnreflectionStrategy.getGetOpcode("Z", isStatic), "Era esperado valores iguais, mas  Opcode.SGET_BOOLEAN é diferente de " + result9 + " <UnreflectionStrategy.getGetOpcode('Z', isStatic)>")
chamada antiga: assertEquals(Opcode.SGET_BYTE, UnreflectionStrategy.getGetOpcode("B", isStatic))
nova chamada: assertEquals(Opcode.SGET_BYTE, UnreflectionStrategy.getGetOpcode("B", isStatic), "Era esperado valores iguais, mas  Opcode.SGET_BYTE é diferente de " + result10 + " <UnreflectionStrategy.getGetOpcode('B', isStatic)>")
chamada antiga: assertEquals(Opcode.SGET_CHAR, UnreflectionStrategy.getGetOpcode("C", isStatic))
nova chamada: assertEquals(Opcode.SGET_CHAR, UnreflectionStrategy.getGetOpcode("C", isStatic), "Era esperado valores iguais, mas  Opcode.SGET_CHAR é diferente de " + result11 + " <UnreflectionStrategy.getGetOpcode('C', isStatic)>")
chamada antiga: assertEquals(Opcode.SGET_OBJECT, UnreflectionStrategy.getGetOpcode("Ljava/lang/Object;", isStatic))
nova chamada: assertEquals(Opcode.SGET_OBJECT, UnreflectionStrategy.getGetOpcode("Ljava/lang/Object;", isStatic), "Era esperado valores iguais, mas  Opcode.SGET_OBJECT é diferente de " + result12 + " <UnreflectionStrategy.getGetOpcode('Ljava/lang/Object;', isStatic)>")
chamada antiga: assertEquals(Opcode.SGET_SHORT, UnreflectionStrategy.getGetOpcode("S", isStatic))
nova chamada: assertEquals(Opcode.SGET_SHORT, UnreflectionStrategy.getGetOpcode("S", isStatic), "Era esperado valores iguais, mas  Opcode.SGET_SHORT é diferente de " + result13 + " <UnreflectionStrategy.getGetOpcode('S', isStatic)>")
chamada antiga: assertEquals(Opcode.SGET_WIDE, UnreflectionStrategy.getGetOpcode("J", isStatic))
nova chamada: assertEquals(Opcode.SGET_WIDE, UnreflectionStrategy.getGetOpcode("J", isStatic), "Era esperado valores iguais, mas  Opcode.SGET_WIDE é diferente de " + result14 + " <UnreflectionStrategy.getGetOpcode('J', isStatic)>")
chamada antiga: assertEquals(Opcode.SGET_WIDE, UnreflectionStrategy.getGetOpcode("D", isStatic))
nova chamada: assertEquals(Opcode.SGET_WIDE, UnreflectionStrategy.getGetOpcode("D", isStatic), "Era esperado valores iguais, mas  Opcode.SGET_WIDE é diferente de " + result15 + " <UnreflectionStrategy.getGetOpcode('D', isStatic)>")
chamada antiga: assertEquals(expected.getOpcode(), actual.getOpcode())
nova chamada: assertEquals(expected.getOpcode(), actual.getOpcode(), "Era esperado valores iguais, mas " + result16 + " <expected.getOpcode()> é diferente de " + result17 + " <actual.getOpcode()>")
chamada antiga: assertFalse(changesMade)
nova chamada: assertFalse(changesMade, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: assertEquals(before.toSmali(), after.toSmali())
nova chamada: assertEquals(before.toSmali(), after.toSmali(), "Era esperado valores iguais, mas " + result18 + " <before.toSmali()> é diferente de " + result19 + " <after.toSmali()>")
chamada antiga: assertEquals(Opcode.GOTO_32, instruction.getOpcode())
nova chamada: assertEquals(Opcode.GOTO_32, instruction.getOpcode(), "Era esperado valores iguais, mas  Opcode.GOTO_32 é diferente de " + result20 + " <instruction.getOpcode()>")
chamada antiga: assertEquals(4, ((OffsetInstruction) instruction).getCodeOffset())
nova chamada: assertEquals(4, ((OffsetInstruction) instruction).getCodeOffset(), "Era esperado valores iguais, mas  4 é diferente de " + result21 + " <((OffsetInstruction) instruction).getCodeOffset()>")
chamada antiga: assertEquals("Ljava/lang/Class;->forName(Ljava/lang/String;)Ljava/lang/Class;", methodDescriptor)
nova chamada: assertEquals("Ljava/lang/Class;->forName(Ljava/lang/String;)Ljava/lang/Class;", methodDescriptor, "Era esperado valores iguais, mas  'Ljava/lang/Class;-forName(Ljava/lang/String;)Ljava/lang/Class;' é diferente de " + " methodDescriptor")
chamada antiga: assertEquals(Opcode.CONST_CLASS, instruction.getOpcode())
nova chamada: assertEquals(Opcode.CONST_CLASS, instruction.getOpcode(), "Era esperado valores iguais, mas  Opcode.CONST_CLASS é diferente de " + result22 + " <instruction.getOpcode()>")
chamada antiga: assertEquals(0, instruction.getRegisterA())
nova chamada: assertEquals(0, instruction.getRegisterA(), "Era esperado valores iguais, mas  0 é diferente de " + result23 + " <instruction.getRegisterA()>")
chamada antiga: assertEquals(expectedClassName, actualClassName)
nova chamada: assertEquals(expectedClassName, actualClassName, "Era esperado valores iguais, mas  expectedClassName é diferente de " + " actualClassName")
chamada antiga: assertArrayEquals(new int[] { 0 }, manipulator.getAddresses())
nova chamada: assertArrayEquals(new int[] { 0 }, manipulator.getAddresses(), "Era esperado arrays iguais, mas  new int[] { 0 } é diferente de " + result24 + " <manipulator.getAddresses()>")
chamada antiga: assertEquals("return-void", manipulator.getOp(0).toString())
nova chamada: assertEquals("return-void", manipulator.getOp(0).toString(), "Era esperado valores iguais, mas  'return-void' é diferente de " + result25 + " <manipulator.getOp(0).toString()>")
chamada antiga: assertArrayEquals(new int[] { 0, 2, 4 }, addresses)
nova chamada: assertArrayEquals(new int[] { 0, 2, 4 }, addresses, "Era esperado arrays iguais, mas  new int[] { 0, 2, 4 } é diferente de " + " addresses")
chamada antiga: assertEquals("if-eqz r0, :addr_4", manipulator.getOp(0).toString())
nova chamada: assertEquals("if-eqz r0, :addr_4", manipulator.getOp(0).toString(), "Era esperado valores iguais, mas  'if-eqz r0, :addr_4' é diferente de " + result26 + " <manipulator.getOp(0).toString()>")
chamada antiga: assertEquals("sget r0, Ljava/lang/Integer;->MAX_VALUE:I", manipulator.getOp(2).toString())
nova chamada: assertEquals("sget r0, Ljava/lang/Integer;->MAX_VALUE:I", manipulator.getOp(2).toString(), "Era esperado valores iguais, mas  'sget r0, Ljava/lang/Integer;-MAX_VALUE:I' é diferente de " + result27 + " <manipulator.getOp(2).toString()>")
chamada antiga: assertEquals("return-void", manipulator.getOp(4).toString())
nova chamada: assertEquals("return-void", manipulator.getOp(4).toString(), "Era esperado valores iguais, mas  'return-void' é diferente de " + result28 + " <manipulator.getOp(4).toString()>")
chamada antiga: assertArrayEquals(new int[] { 0, 2 }, manipulator.getAddresses())
nova chamada: assertArrayEquals(new int[] { 0, 2 }, manipulator.getAddresses(), "Era esperado arrays iguais, mas  new int[] { 0, 2 } é diferente de " + result29 + " <manipulator.getAddresses()>")
chamada antiga: assertEquals("check-cast r0, Ljava/lang/Integer;", manipulator.getOp(0).toString())
nova chamada: assertEquals("check-cast r0, Ljava/lang/Integer;", manipulator.getOp(0).toString(), "Era esperado valores iguais, mas  'check-cast r0, Ljava/lang/Integer;' é diferente de " + result30 + " <manipulator.getOp(0).toString()>")
chamada antiga: assertEquals("return-void", manipulator.getOp(2).toString())
nova chamada: assertEquals("return-void", manipulator.getOp(2).toString(), "Era esperado valores iguais, mas  'return-void' é diferente de " + result31 + " <manipulator.getOp(2).toString()>")
chamada antiga: assertArrayEquals(new int[] { 0, 2, 3, 6, 7, 9 }, manipulator.getAddresses())
nova chamada: assertArrayEquals(new int[] { 0, 2, 3, 6, 7, 9 }, manipulator.getAddresses(), "Era esperado arrays iguais, mas  new int[] { 0, 2, 3, 6, 7, 9 } é diferente de " + result32 + " <manipulator.getAddresses()>")
chamada antiga: assertEquals("if-eqz r1, :addr_7", manipulator.getOp(0).toString())
nova chamada: assertEquals("if-eqz r1, :addr_7", manipulator.getOp(0).toString(), "Era esperado valores iguais, mas  'if-eqz r1, :addr_7' é diferente de " + result33 + " <manipulator.getOp(0).toString()>")
chamada antiga: assertEquals("const/4 r0, 0x0", manipulator.getOp(2).toString())
nova chamada: assertEquals("const/4 r0, 0x0", manipulator.getOp(2).toString(), "Era esperado valores iguais, mas  'const/4 r0, 0x0' é diferente de " + result34 + " <manipulator.getOp(2).toString()>")
chamada antiga: assertEquals("invoke-static {r0}, Ljava/lang/Integer;->valueOf(I)Ljava/lang/Integer;", manipulator.getOp(3).toString())
nova chamada: assertEquals("invoke-static {r0}, Ljava/lang/Integer;->valueOf(I)Ljava/lang/Integer;", manipulator.getOp(3).toString(), "Era esperado valores iguais, mas  'invoke-static {r0}, Ljava/lang/Integer;-valueOf(I)Ljava/lang/Integer;' é diferente de " + result35 + " <manipulator.getOp(3).toString()>")
chamada antiga: assertEquals("move-result r1", manipulator.getOp(6).toString())
nova chamada: assertEquals("move-result r1", manipulator.getOp(6).toString(), "Era esperado valores iguais, mas  'move-result r1' é diferente de " + result36 + " <manipulator.getOp(6).toString()>")
chamada antiga: assertEquals("check-cast r1, Ljava/lang/Integer;", manipulator.getOp(7).toString())
nova chamada: assertEquals("check-cast r1, Ljava/lang/Integer;", manipulator.getOp(7).toString(), "Era esperado valores iguais, mas  'check-cast r1, Ljava/lang/Integer;' é diferente de " + result37 + " <manipulator.getOp(7).toString()>")
chamada antiga: assertEquals("return-void", manipulator.getOp(9).toString())
nova chamada: assertEquals("return-void", manipulator.getOp(9).toString(), "Era esperado valores iguais, mas  'return-void' é diferente de " + result38 + " <manipulator.getOp(9).toString()>")
chamada antiga: assertEquals("Ljava/lang/String;-><init>([B)V", methodDescriptor)
nova chamada: assertEquals("Ljava/lang/String;-><init>([B)V", methodDescriptor, "Era esperado valores iguais, mas  'Ljava/lang/String;-init([B)V' é diferente de " + " methodDescriptor")
chamada antiga: assertEquals(Opcode.CONST_STRING, instruction.getOpcode())
nova chamada: assertEquals(Opcode.CONST_STRING, instruction.getOpcode(), "Era esperado valores iguais, mas  Opcode.CONST_STRING é diferente de " + result39 + " <instruction.getOpcode()>")
chamada antiga: assertEquals(0, instruction.getRegisterA())
nova chamada: assertEquals(0, instruction.getRegisterA(), "Era esperado valores iguais, mas  0 é diferente de " + result40 + " <instruction.getRegisterA()>")
chamada antiga: assertEquals(expectedConstant, actualConstant)
nova chamada: assertEquals(expectedConstant, actualConstant, "Era esperado valores iguais, mas  expectedConstant é diferente de " + " actualConstant")
chamada antiga: assertEquals(BuilderInstruction21c.class, manipulator.getInstruction(ADDRESS).getClass())
nova chamada: assertEquals(BuilderInstruction21c.class, manipulator.getInstruction(ADDRESS).getClass(), "Era esperado valores iguais, mas  BuilderInstruction21c.class é diferente de " + result41 + " <manipulator.getInstruction(ADDRESS).getClass()>")
chamada antiga: assertEquals(Opcode.CONST_CLASS, instruction.getOpcode())
nova chamada: assertEquals(Opcode.CONST_CLASS, instruction.getOpcode(), "Era esperado valores iguais, mas  Opcode.CONST_CLASS é diferente de " + result42 + " <instruction.getOpcode()>")
chamada antiga: assertEquals(0, instruction.getRegisterA())
nova chamada: assertEquals(0, instruction.getRegisterA(), "Era esperado valores iguais, mas  0 é diferente de " + result43 + " <instruction.getRegisterA()>")
chamada antiga: assertEquals(CLASS_NAME, actualClassName)
nova chamada: assertEquals(CLASS_NAME, actualClassName, "Era esperado valores iguais, mas  CLASS_NAME é diferente de " + " actualClassName")
chamada antiga: assertEquals(BuilderInstruction21c.class, manipulator.getInstruction(ADDRESS).getClass())
nova chamada: assertEquals(BuilderInstruction21c.class, manipulator.getInstruction(ADDRESS).getClass(), "Era esperado valores iguais, mas  BuilderInstruction21c.class é diferente de " + result44 + " <manipulator.getInstruction(ADDRESS).getClass()>")
chamada antiga: assertEquals(Opcode.CONST_CLASS, instruction.getOpcode())
nova chamada: assertEquals(Opcode.CONST_CLASS, instruction.getOpcode(), "Era esperado valores iguais, mas  Opcode.CONST_CLASS é diferente de " + result45 + " <instruction.getOpcode()>")
chamada antiga: assertEquals(0, instruction.getRegisterA())
nova chamada: assertEquals(0, instruction.getRegisterA(), "Era esperado valores iguais, mas  0 é diferente de " + result46 + " <instruction.getRegisterA()>")
chamada antiga: assertEquals(CLASS_NAME, actualClassName)
nova chamada: assertEquals(CLASS_NAME, actualClassName, "Era esperado valores iguais, mas  CLASS_NAME é diferente de " + " actualClassName")
chamada antiga: assertEquals(expected, found)
nova chamada: assertEquals(expected, found, "Era esperado valores iguais, mas  expected é diferente de " + " found")
chamada antiga: assertEquals(Opcode.INVOKE_DIRECT, instruction.getOpcode())
nova chamada: assertEquals(Opcode.INVOKE_DIRECT, instruction.getOpcode(), "Era esperado valores iguais, mas  Opcode.INVOKE_DIRECT é diferente de " + result47 + " <instruction.getOpcode()>")
chamada antiga: assertEquals(0, found.size())
nova chamada: assertEquals(0, found.size(), "Era esperado valores iguais, mas  0 é diferente de " + result48 + " <found.size()>")
chamada antiga: assertEquals(expected, found)
nova chamada: assertEquals(expected, found, "Era esperado valores iguais, mas  expected é diferente de " + " found")
chamada antiga: assertEquals(expected, found)
nova chamada: assertEquals(expected, found, "Era esperado valores iguais, mas  expected é diferente de " + " found")
chamada antiga: assertEquals(expected, found)
nova chamada: assertEquals(expected, found, "Era esperado valores iguais, mas  expected é diferente de " + " found")
chamada antiga: assertEquals(expected, found)
nova chamada: assertEquals(expected, found, "Era esperado valores iguais, mas  expected é diferente de " + " found")
chamada antiga: assertEquals(expected, found)
nova chamada: assertEquals(expected, found, "Era esperado valores iguais, mas  expected é diferente de " + " found")
chamada antiga: assertEquals(expected, found)
nova chamada: assertEquals(expected, found, "Era esperado valores iguais, mas  expected é diferente de " + " found")
chamada antiga: assertEquals(expected, found)
nova chamada: assertEquals(expected, found, "Era esperado valores iguais, mas  expected é diferente de " + " found")
chamada antiga: assertEquals(expected, found)
nova chamada: assertEquals(expected, found, "Era esperado valores iguais, mas  expected é diferente de " + " found")
chamada antiga: assertEquals(expected, found)
nova chamada: assertEquals(expected, found, "Era esperado valores iguais, mas  expected é diferente de " + " found")
chamada antiga: assertEquals(expectedInstr.getOpcode(), actualInstr.getOpcode())
nova chamada: assertEquals(expectedInstr.getOpcode(), actualInstr.getOpcode(), "Era esperado valores iguais, mas " + result49 + " <expectedInstr.getOpcode()> é diferente de " + result50 + " <actualInstr.getOpcode()>")
chamada antiga: assertTrue(outFile.exists())
nova chamada: assertTrue(outFile.exists(), "Era esperado verdadeiro, mas " + result51 + " <outFile.exists()> é falso")
chamada antiga: assertTrue(outFile.exists())
nova chamada: assertTrue(outFile.exists(), "Era esperado verdadeiro, mas " + result52 + " <outFile.exists()> é falso")
chamada antiga: assertEquals(0, template.getChildren().size())
nova chamada: assertEquals(0, template.getChildren().size(), "Era esperado valores iguais, mas  0 é diferente de " + result53 + " <template.getChildren().size()>")
chamada antiga: assertNotNull(template.getOp().getChildren())
nova chamada: assertNotNull(template.getOp().getChildren(), "Era esperado não nulo, mas " + result54 + " <template.getOp().getChildren()> é nulo")
chamada antiga: assertEquals(template.getOp(), node.getOp())
nova chamada: assertEquals(template.getOp(), node.getOp(), "Era esperado valores iguais, mas " + result55 + " <template.getOp()> é diferente de " + result56 + " <node.getOp()>")
chamada antiga: assertEquals(1, children.size())
nova chamada: assertEquals(1, children.size(), "Era esperado valores iguais, mas  1 é diferente de " + result57 + " <children.size()>")
chamada antiga: assertEquals(1, childLocations.length)
nova chamada: assertEquals(1, childLocations.length, "Era esperado valores iguais, mas  1 é diferente de " + " childLocations.length")
chamada antiga: assertEquals(node, child.getParent())
nova chamada: assertEquals(node, child.getParent(), "Era esperado valores iguais, mas  node é diferente de " + result58 + " <child.getParent()>")
chamada antiga: assertEquals(node.getContext(), child.getContext().getParent())
nova chamada: assertEquals(node.getContext(), child.getContext().getParent(), "Era esperado valores iguais, mas " + result59 + " <node.getContext()> é diferente de " + result60 + " <child.getContext().getParent()>")
chamada antiga: assertEquals(childOp.getLocation(), childLocations[0])
nova chamada: assertEquals(childOp.getLocation(), childLocations[0], "Era esperado valores iguais, mas " + result61 + " <childOp.getLocation()> é diferente de " + " childLocations[0]")
chamada antiga: assertEquals(childOp.getLocation(), node.getOp().getChildren()[0])
nova chamada: assertEquals(childOp.getLocation(), node.getOp().getChildren()[0], "Era esperado valores iguais, mas " + result62 + " <childOp.getLocation()> é diferente de " + " node.getOp().getChildren()[0]")
chamada antiga: assertArrayEquals(expectedAddresses, actualAddresses)
nova chamada: assertArrayEquals(expectedAddresses, actualAddresses, "Era esperado arrays iguais, mas  expectedAddresses é diferente de " + " actualAddresses")
chamada antiga: assertArrayEquals(new int[] { 0 }, parentState.getRegistersAssigned())
nova chamada: assertArrayEquals(new int[] { 0 }, parentState.getRegistersAssigned(), "Era esperado arrays iguais, mas  new int[] { 0 } é diferente de " + result63 + " <parentState.getRegistersAssigned()>")
chamada antiga: assertArrayEquals(new int[] { 2 }, childState.getRegistersAssigned())
nova chamada: assertArrayEquals(new int[] { 2 }, childState.getRegistersAssigned(), "Era esperado arrays iguais, mas  new int[] { 2 } é diferente de " + result64 + " <childState.getRegistersAssigned()>")
chamada antiga: assertArrayEquals(new int[] { 3 }, grandchildState.getRegistersAssigned())
nova chamada: assertArrayEquals(new int[] { 3 }, grandchildState.getRegistersAssigned(), "Era esperado arrays iguais, mas  new int[] { 3 } é diferente de " + result65 + " <grandchildState.getRegistersAssigned()>")
chamada antiga: assertEquals(2, manipulator.getTryBlocks().size())
nova chamada: assertEquals(2, manipulator.getTryBlocks().size(), "Era esperado valores iguais, mas  2 é diferente de " + result66 + " <manipulator.getTryBlocks().size()>")
chamada antiga: assertEquals(0, manipulator.getTryBlocks().size())
nova chamada: assertEquals(0, manipulator.getTryBlocks().size(), "Era esperado valores iguais, mas  0 é diferente de " + result67 + " <manipulator.getTryBlocks().size()>")
chamada antiga: assertEquals(0, consensus.getValue())
nova chamada: assertEquals(0, consensus.getValue(), "Era esperado valores iguais, mas  0 é diferente de " + result68 + " <consensus.getValue()>")
chamada antiga: assertEquals(1, consensus.getValue())
nova chamada: assertEquals(1, consensus.getValue(), "Era esperado valores iguais, mas  1 é diferente de " + result69 + " <consensus.getValue()>")
chamada antiga: assertEquals(2, consensus.getValue())
nova chamada: assertEquals(2, consensus.getValue(), "Era esperado valores iguais, mas  2 é diferente de " + result70 + " <consensus.getValue()>")
chamada antiga: assertEquals(1, manipulator.getInstruction(3).getLocation().getLabels().size())
nova chamada: assertEquals(1, manipulator.getInstruction(3).getLocation().getLabels().size(), "Era esperado valores iguais, mas  1 é diferente de " + result71 + " <manipulator.getInstruction(3).getLocation().getLabels().size()>")
chamada antiga: assertEquals(1, manipulator.getInstruction(3).getLocation().getLabels().size())
nova chamada: assertEquals(1, manipulator.getInstruction(3).getLocation().getLabels().size(), "Era esperado valores iguais, mas  1 é diferente de " + result72 + " <manipulator.getInstruction(3).getLocation().getLabels().size()>")
chamada antiga: assertTrue(configuration.isImmutable("Ljava/lang/String;"))
nova chamada: assertTrue(configuration.isImmutable("Ljava/lang/String;"), "Era esperado verdadeiro, mas " + result73 + " <configuration.isImmutable('Ljava/lang/String;')> é falso")
chamada antiga: assertFalse(configuration.isImmutable("[Ljava/lang/String;"))
nova chamada: assertFalse(configuration.isImmutable("[Ljava/lang/String;"), "Era esperado falso, mas " + result74 + " <configuration.isImmutable('[Ljava/lang/String;')> é verdadeiro ")
chamada antiga: assertFalse(configuration.isImmutable("Ljava/lang/StringBuilder;"))
nova chamada: assertFalse(configuration.isImmutable("Ljava/lang/StringBuilder;"), "Era esperado falso, mas " + result75 + " <configuration.isImmutable('Ljava/lang/StringBuilder;')> é verdadeiro ")
chamada antiga: assertEquals(cmpValue.getClass(), setItem.getValue().getValue().getClass())
nova chamada: assertEquals(cmpValue.getClass(), setItem.getValue().getValue().getClass(), "Era esperado valores iguais, mas " + result76 + " <cmpValue.getClass()> é diferente de " + result77 + " <setItem.getValue().getValue().getClass()>")
chamada antiga: assertEquals(CMP_TYPE, setItem.getValue().getType())
nova chamada: assertEquals(CMP_TYPE, setItem.getValue().getType(), "Era esperado valores iguais, mas  CMP_TYPE é diferente de " + result78 + " <setItem.getValue().getType()>")
chamada antiga: assertEquals("cmp-long r0, r2, r4", op.toString())
nova chamada: assertEquals("cmp-long r0, r2, r4", op.toString(), "Era esperado valores iguais, mas  'cmp-long r0, r2, r4' é diferente de " + result79 + " <op.toString()>")
chamada antiga: assertEquals(cmpValue.getClass(), setItem.getValue().getValue().getClass())
nova chamada: assertEquals(cmpValue.getClass(), setItem.getValue().getValue().getClass(), "Era esperado valores iguais, mas " + result80 + " <cmpValue.getClass()> é diferente de " + result81 + " <setItem.getValue().getValue().getClass()>")
chamada antiga: assertEquals(CMP_TYPE, setItem.getValue().getType())
nova chamada: assertEquals(CMP_TYPE, setItem.getValue().getType(), "Era esperado valores iguais, mas  CMP_TYPE é diferente de " + result82 + " <setItem.getValue().getType()>")
chamada antiga: assertEquals(cmpValue, setItem.getValue().getValue())
nova chamada: assertEquals(cmpValue, setItem.getValue().getValue(), "Era esperado valores iguais, mas  cmpValue é diferente de " + result83 + " <setItem.getValue().getValue()>")
chamada antiga: assertEquals(CMP_TYPE, setItem.getValue().getType())
nova chamada: assertEquals(CMP_TYPE, setItem.getValue().getType(), "Era esperado valores iguais, mas  CMP_TYPE é diferente de " + result84 + " <setItem.getValue().getType()>")
chamada antiga: assertEquals(exceptionClass, item.getValue().getClass())
nova chamada: assertEquals(exceptionClass, item.getValue().getClass(), "Era esperado valores iguais, mas  exceptionClass é diferente de " + result85 + " <item.getValue().getClass()>")
chamada antiga: assertEquals(ClassNameUtils.toInternal(exceptionClass), item.getType())
nova chamada: assertEquals(ClassNameUtils.toInternal(exceptionClass), item.getType(), "Era esperado valores iguais, mas " + result86 + " <ClassNameUtils.toInternal(exceptionClass)> é diferente de " + result87 + " <item.getType()>")
chamada antiga: assertEquals(exceptionMessage, ((Throwable) item.getValue()).getMessage())
nova chamada: assertEquals(exceptionMessage, ((Throwable) item.getValue()).getMessage(), "Era esperado valores iguais, mas  exceptionMessage é diferente de " + result88 + " <((Throwable) item.getValue()).getMessage()>")
chamada antiga: assertEquals(0, mState.getRegistersAssigned().length)
nova chamada: assertEquals(0, mState.getRegistersAssigned().length, "Era esperado valores iguais, mas  0 é diferente de " + " mState.getRegistersAssigned().length")
chamada antiga: assertEquals("[[" + CLASS_NAME, consensus.getType())
nova chamada: assertEquals("[[" + CLASS_NAME, consensus.getType(), "Era esperado valores iguais, mas  '[[' + CLASS_NAME é diferente de " + result89 + " <consensus.getType()>")
chamada antiga: assertEquals(length, Array.getLength(consensus.getValue()))
nova chamada: assertEquals(length, Array.getLength(consensus.getValue()), "Era esperado valores iguais, mas  length é diferente de " + result90 + " <Array.getLength(consensus.getValue())>")
chamada antiga: assertEquals("[[" + CLASS_NAME, actualClass.getName())
nova chamada: assertEquals("[[" + CLASS_NAME, actualClass.getName(), "Era esperado valores iguais, mas  '[[' + CLASS_NAME é diferente de " + result91 + " <actualClass.getName()>")
chamada antiga: assertEquals("[" + CLASS_NAME, consensus.getType())
nova chamada: assertEquals("[" + CLASS_NAME, consensus.getType(), "Era esperado valores iguais, mas  '[' + CLASS_NAME é diferente de " + result92 + " <consensus.getType()>")
chamada antiga: assertEquals(length, Array.getLength(consensus.getValue()))
nova chamada: assertEquals(length, Array.getLength(consensus.getValue()), "Era esperado valores iguais, mas  length é diferente de " + result93 + " <Array.getLength(consensus.getValue())>")
chamada antiga: assertEquals("[" + CLASS_NAME, actualClass.getName())
nova chamada: assertEquals("[" + CLASS_NAME, actualClass.getName(), "Era esperado valores iguais, mas  '[' + CLASS_NAME é diferente de " + result94 + " <actualClass.getName()>")
chamada antiga: assertEquals(exceptionClass, item.getValue().getClass())
nova chamada: assertEquals(exceptionClass, item.getValue().getClass(), "Era esperado valores iguais, mas  exceptionClass é diferente de " + result95 + " <item.getValue().getClass()>")
chamada antiga: assertEquals(ClassNameUtils.toInternal(exceptionClass), item.getType())
nova chamada: assertEquals(ClassNameUtils.toInternal(exceptionClass), item.getType(), "Era esperado valores iguais, mas " + result96 + " <ClassNameUtils.toInternal(exceptionClass)> é diferente de " + result97 + " <item.getType()>")
chamada antiga: assertEquals(0, mState.getRegistersAssigned().length)
nova chamada: assertEquals(0, mState.getRegistersAssigned().length, "Era esperado valores iguais, mas  0 é diferente de " + " mState.getRegistersAssigned().length")
chamada antiga: assertEquals("div-long r" + DEST_REGISTER + ", r" + ARG1_REGISTER + ", r" + ARG2_REGISTER, op.toString())
nova chamada: assertEquals("div-long r" + DEST_REGISTER + ", r" + ARG1_REGISTER + ", r" + ARG2_REGISTER, op.toString(), "Era esperado valores iguais, mas  'div-long r' + DEST_REGISTER + ', r' + ARG1_REGISTER + ', r' + ARG2_REGISTER é diferente de " + result98 + " <op.toString()>")
chamada antiga: assertEquals("double-to-float r" + REGISTER_A + ", r" + REGISTER_B, op.toString())
nova chamada: assertEquals("double-to-float r" + REGISTER_A + ", r" + REGISTER_B, op.toString(), "Era esperado valores iguais, mas  'double-to-float r' + REGISTER_A + ', r' + REGISTER_B é diferente de " + result99 + " <op.toString()>")
chamada antiga: assertSame(register0, register1)
nova chamada: assertSame(register0, register1, "Era esperado objetos iguais, mas  register0 é diferente de " + " register1")
chamada antiga: assertTrue(register0 instanceof Object)
nova chamada: assertTrue(register0 instanceof Object, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("packed-switch-payload [1 -> :addr_10, 2 -> :addr_20]", op.toString())
nova chamada: assertEquals("packed-switch-payload [1 -> :addr_10, 2 -> :addr_20]", op.toString(), "Era esperado valores iguais, mas  'packed-switch-payload [1 - :addr_10, 2 - :addr_20]' é diferente de " + result100 + " <op.toString()>")
chamada antiga: assertEquals(exceptionClass, item.getValue().getClass())
nova chamada: assertEquals(exceptionClass, item.getValue().getClass(), "Era esperado valores iguais, mas  exceptionClass é diferente de " + result101 + " <item.getValue().getClass()>")
chamada antiga: assertEquals(ClassNameUtils.toInternal(exceptionClass), item.getType())
nova chamada: assertEquals(ClassNameUtils.toInternal(exceptionClass), item.getType(), "Era esperado valores iguais, mas " + result102 + " <ClassNameUtils.toInternal(exceptionClass)> é diferente de " + result103 + " <item.getType()>")
chamada antiga: assertEquals(0, mState.getRegistersAssigned().length)
nova chamada: assertEquals(0, mState.getRegistersAssigned().length, "Era esperado valores iguais, mas  0 é diferente de " + " mState.getRegistersAssigned().length")
chamada antiga: assertEquals(2, exceptions.size())
nova chamada: assertEquals(2, exceptions.size(), "Era esperado valores iguais, mas  2 é diferente de " + result104 + " <exceptions.size()>")
chamada antiga: assertTrue(exceptionClasses.contains(ArrayIndexOutOfBoundsException.class))
nova chamada: assertTrue(exceptionClasses.contains(ArrayIndexOutOfBoundsException.class), "Era esperado verdadeiro, mas " + result105 + " <exceptionClasses.contains(ArrayIndexOutOfBoundsException.class)> é falso")
chamada antiga: assertTrue(exceptionClasses.contains(NullPointerException.class))
nova chamada: assertTrue(exceptionClasses.contains(NullPointerException.class), "Era esperado verdadeiro, mas " + result106 + " <exceptionClasses.contains(NullPointerException.class)> é falso")
chamada antiga: assertEquals(CommonTypes.OBJECT, item.getType())
nova chamada: assertEquals(CommonTypes.OBJECT, item.getType(), "Era esperado valores iguais, mas  CommonTypes.OBJECT é diferente de " + result107 + " <item.getType()>")
chamada antiga: assertEquals(UnknownValue.class, item.getValue().getClass())
nova chamada: assertEquals(UnknownValue.class, item.getValue().getClass(), "Era esperado valores iguais, mas  UnknownValue.class é diferente de " + result108 + " <item.getValue().getClass()>")
chamada antiga: assertEquals(exceptionClass, item.getValue().getClass())
nova chamada: assertEquals(exceptionClass, item.getValue().getClass(), "Era esperado valores iguais, mas  exceptionClass é diferente de " + result109 + " <item.getValue().getClass()>")
chamada antiga: assertEquals(ClassNameUtils.toInternal(exceptionClass), item.getType())
nova chamada: assertEquals(ClassNameUtils.toInternal(exceptionClass), item.getType(), "Era esperado valores iguais, mas " + result110 + " <ClassNameUtils.toInternal(exceptionClass)> é diferente de " + result111 + " <item.getType()>")
chamada antiga: assertEquals(item, throwItem)
nova chamada: assertEquals(item, throwItem, "Era esperado valores iguais, mas  item é diferente de " + " throwItem")
chamada antiga: assertEquals(exceptionClass, item.getValue().getClass())
nova chamada: assertEquals(exceptionClass, item.getValue().getClass(), "Era esperado valores iguais, mas  exceptionClass é diferente de " + result112 + " <item.getValue().getClass()>")
chamada antiga: assertEquals(ClassNameUtils.toInternal(exceptionClass), item.getType())
nova chamada: assertEquals(ClassNameUtils.toInternal(exceptionClass), item.getType(), "Era esperado valores iguais, mas " + result113 + " <ClassNameUtils.toInternal(exceptionClass)> é diferente de " + result114 + " <item.getType()>")
chamada antiga: assertFalse(graph.wasAddressReached(2))
nova chamada: assertFalse(graph.wasAddressReached(2), "Era esperado falso, mas " + result115 + " <graph.wasAddressReached(2)> é verdadeiro ")
chamada antiga: assertEquals(0, mState.getRegistersAssigned().length)
nova chamada: assertEquals(0, mState.getRegistersAssigned().length, "Era esperado valores iguais, mas  0 é diferente de " + " mState.getRegistersAssigned().length")
chamada antiga: assertEquals("monitor-exit r0", node.getOp().toString())
nova chamada: assertEquals("monitor-exit r0", node.getOp().toString(), "Era esperado valores iguais, mas  'monitor-exit r0' é diferente de " + result116 + " <node.getOp().toString()>")
chamada antiga: assertEquals("monitor-enter r0", node.getOp().toString())
nova chamada: assertEquals("monitor-enter r0", node.getOp().toString(), "Era esperado valores iguais, mas  'monitor-enter r0' é diferente de " + result117 + " <node.getOp().toString()>")
chamada antiga: assertEquals(UnknownValue.class, setItem.getValue().getValue().getClass())
nova chamada: assertEquals(UnknownValue.class, setItem.getValue().getValue().getClass(), "Era esperado valores iguais, mas  UnknownValue.class é diferente de " + result118 + " <setItem.getValue().getValue().getClass()>")
chamada antiga: assertEquals("[I", setItem.getValue().getType())
nova chamada: assertEquals("[I", setItem.getValue().getType(), "Era esperado valores iguais, mas  '[I' é diferente de " + result119 + " <setItem.getValue().getType()>")
chamada antiga: assertEquals("filled-new-array {r0, r1}, [I", op.toString())
nova chamada: assertEquals("filled-new-array {r0, r1}, [I", op.toString(), "Era esperado valores iguais, mas  'filled-new-array {r0, r1}, [I' é diferente de " + result120 + " <op.toString()>")
chamada antiga: assertEquals(UnknownValue.class, setItem.getValue().getValue().getClass())
nova chamada: assertEquals(UnknownValue.class, setItem.getValue().getValue().getClass(), "Era esperado valores iguais, mas  UnknownValue.class é diferente de " + result121 + " <setItem.getValue().getValue().getClass()>")
chamada antiga: assertEquals("[I", setItem.getValue().getType())
nova chamada: assertEquals("[I", setItem.getValue().getType(), "Era esperado valores iguais, mas  '[I' é diferente de " + result122 + " <setItem.getValue().getType()>")
chamada antiga: assertEquals("filled-new-array/range {r0 .. r5}, [I", op.toString())
nova chamada: assertEquals("filled-new-array/range {r0 .. r5}, [I", op.toString(), "Era esperado valores iguais, mas  'filled-new-array/range {r0 .. r5}, [I' é diferente de " + result123 + " <op.toString()>")
chamada antiga: assertEquals("iput r" + REGISTER_A + ", r" + REGISTER_B + ", Lsome/class;->someMethod:I", op.toString())
nova chamada: assertEquals("iput r" + REGISTER_A + ", r" + REGISTER_B + ", Lsome/class;->someMethod:I", op.toString(), "Era esperado valores iguais, mas  'iput r' + REGISTER_A + ', r' + REGISTER_B + ', Lsome/class;-someMethod:I' é diferente de " + result124 + " <op.toString()>")
chamada antiga: assertEquals("Lhash_code;", consensus.getType())
nova chamada: assertEquals("Lhash_code;", consensus.getType(), "Era esperado valores iguais, mas  'Lhash_code;' é diferente de " + result125 + " <consensus.getType()>")
chamada antiga: assertEquals("Lextends_enum;", consensus.getType())
nova chamada: assertEquals("Lextends_enum;", consensus.getType(), "Era esperado valores iguais, mas  'Lextends_enum;' é diferente de " + result126 + " <consensus.getType()>")
chamada antiga: assertEquals(exceptionClass, item.getValue().getClass())
nova chamada: assertEquals(exceptionClass, item.getValue().getClass(), "Era esperado valores iguais, mas  exceptionClass é diferente de " + result127 + " <item.getValue().getClass()>")
chamada antiga: assertEquals(ClassNameUtils.toInternal(exceptionClass), item.getType())
nova chamada: assertEquals(ClassNameUtils.toInternal(exceptionClass), item.getType(), "Era esperado valores iguais, mas " + result128 + " <ClassNameUtils.toInternal(exceptionClass)> é diferente de " + result129 + " <item.getType()>")
chamada antiga: assertEquals(item, throwItem)
nova chamada: assertEquals(item, throwItem, "Era esperado valores iguais, mas  item é diferente de " + " throwItem")
chamada antiga: assertEquals(instanceClassName, consensus.getType())
nova chamada: assertEquals(instanceClassName, consensus.getType(), "Era esperado valores iguais, mas  instanceClassName é diferente de " + result130 + " <consensus.getType()>")
chamada antiga: assertEquals(virtualClass.getName(), consensus.getValue().getClass().getName())
nova chamada: assertEquals(virtualClass.getName(), consensus.getValue().getClass().getName(), "Era esperado valores iguais, mas " + result131 + " <virtualClass.getName()> é diferente de " + result132 + " <consensus.getValue().getClass().getName()>")
chamada antiga: assertEquals(instanceClassName, consensus.getType())
nova chamada: assertEquals(instanceClassName, consensus.getType(), "Era esperado valores iguais, mas  instanceClassName é diferente de " + result133 + " <consensus.getType()>")
chamada antiga: assertEquals(virtualClass.getName(), consensus.getValue().getClass().getName())
nova chamada: assertEquals(virtualClass.getName(), consensus.getValue().getClass().getName(), "Era esperado valores iguais, mas " + result134 + " <virtualClass.getName()> é diferente de " + result135 + " <consensus.getValue().getClass().getName()>")
chamada antiga: assertEquals(instanceClassName, consensus.getType())
nova chamada: assertEquals(instanceClassName, consensus.getType(), "Era esperado valores iguais, mas  instanceClassName é diferente de " + result136 + " <consensus.getType()>")
chamada antiga: assertEquals(virtualClass.getName(), consensus.getValue().getClass().getName())
nova chamada: assertEquals(virtualClass.getName(), consensus.getValue().getClass().getName(), "Era esperado valores iguais, mas " + result137 + " <virtualClass.getName()> é diferente de " + result138 + " <consensus.getValue().getClass().getName()>")
chamada antiga: assertEquals(exceptionClass, item.getValue().getClass())
nova chamada: assertEquals(exceptionClass, item.getValue().getClass(), "Era esperado valores iguais, mas  exceptionClass é diferente de " + result139 + " <item.getValue().getClass()>")
chamada antiga: assertEquals(ClassNameUtils.toInternal(exceptionClass), item.getType())
nova chamada: assertEquals(ClassNameUtils.toInternal(exceptionClass), item.getType(), "Era esperado valores iguais, mas " + result140 + " <ClassNameUtils.toInternal(exceptionClass)> é diferente de " + result141 + " <item.getType()>")
chamada antiga: assertEquals(CLASS_NAME, consensus.getType())
nova chamada: assertEquals(CLASS_NAME, consensus.getType(), "Era esperado valores iguais, mas  CLASS_NAME é diferente de " + result142 + " <consensus.getType()>")
chamada antiga: assertEquals(virtualClass, consensus.getValue().getClass())
nova chamada: assertEquals(virtualClass, consensus.getValue().getClass(), "Era esperado valores iguais, mas  virtualClass é diferente de " + result143 + " <consensus.getValue().getClass()>")
chamada antiga: assertEquals(CLASS_NAME, consensus.getType())
nova chamada: assertEquals(CLASS_NAME, consensus.getType(), "Era esperado valores iguais, mas  CLASS_NAME é diferente de " + result144 + " <consensus.getType()>")
chamada antiga: assertEquals(virtualClass.getName(), consensus.getValue().getClass().getName())
nova chamada: assertEquals(virtualClass.getName(), consensus.getValue().getClass().getName(), "Era esperado valores iguais, mas " + result145 + " <virtualClass.getName()> é diferente de " + result146 + " <consensus.getValue().getClass().getName()>")
chamada antiga: assertNull(consensus)
nova chamada: assertNull(consensus, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(instance.getClass(), consensus.getValue())
nova chamada: assertEquals(instance.getClass(), consensus.getValue(), "Era esperado valores iguais, mas " + result147 + " <instance.getClass()> é diferente de " + result148 + " <consensus.getValue()>")
chamada antiga: assertEquals(exception.getMessage(), "Can't find Smali file for Lim_not_your_friend_buddy;")
nova chamada: assertEquals(exception.getMessage(), "Can't find Smali file for Lim_not_your_friend_buddy;", "Era esperado valores iguais, mas " + result149 + " <exception.getMessage()> é diferente de " + " 'Can't find Smali file for Lim_not_your_friend_buddy;'")
chamada antiga: assertEquals("invoke-static {}, " + CLASS_NAME + "->returnVoid()V", op.toString())
nova chamada: assertEquals("invoke-static {}, " + CLASS_NAME + "->returnVoid()V", op.toString(), "Era esperado valores iguais, mas  'invoke-static {}, ' + CLASS_NAME + '-returnVoid()V' é diferente de " + result150 + " <op.toString()>")
chamada antiga: assertEquals(exception.getMessage(), "Can't find Smali file for Lsome/unknown/classzzzzz;")
nova chamada: assertEquals(exception.getMessage(), "Can't find Smali file for Lsome/unknown/classzzzzz;", "Era esperado valores iguais, mas " + result151 + " <exception.getMessage()> é diferente de " + " 'Can't find Smali file for Lsome/unknown/classzzzzz;'")
chamada antiga: assertEquals(1, graph.getNodePile(ADDRESS_NOP).size())
nova chamada: assertEquals(1, graph.getNodePile(ADDRESS_NOP).size(), "Era esperado valores iguais, mas  1 é diferente de " + result152 + " <graph.getNodePile(ADDRESS_NOP).size()>")
chamada antiga: assertEquals(2, graph.getNodePile(ADDRESS_RETURN).size())
nova chamada: assertEquals(2, graph.getNodePile(ADDRESS_RETURN).size(), "Era esperado valores iguais, mas  2 é diferente de " + result153 + " <graph.getNodePile(ADDRESS_RETURN).size()>")
chamada antiga: assertEquals("if-ge r2, r4, :addr_0", op.toString())
nova chamada: assertEquals("if-ge r2, r4, :addr_0", op.toString(), "Era esperado valores iguais, mas  'if-ge r2, r4, :addr_0' é diferente de " + result154 + " <op.toString()>")
chamada antiga: assertEquals(exceptionClass, item.getValue().getClass())
nova chamada: assertEquals(exceptionClass, item.getValue().getClass(), "Era esperado valores iguais, mas  exceptionClass é diferente de " + result155 + " <item.getValue().getClass()>")
chamada antiga: assertEquals(ClassNameUtils.toInternal(exceptionClass), item.getType())
nova chamada: assertEquals(ClassNameUtils.toInternal(exceptionClass), item.getType(), "Era esperado valores iguais, mas " + result156 + " <ClassNameUtils.toInternal(exceptionClass)> é diferente de " + result157 + " <item.getType()>")
chamada antiga: assertEquals(exceptionMessage, ((Throwable) item.getValue()).getMessage())
nova chamada: assertEquals(exceptionMessage, ((Throwable) item.getValue()).getMessage(), "Era esperado valores iguais, mas  exceptionMessage é diferente de " + result158 + " <((Throwable) item.getValue()).getMessage()>")
chamada antiga: assertEquals(0, mState.getRegistersAssigned().length)
nova chamada: assertEquals(0, mState.getRegistersAssigned().length, "Era esperado valores iguais, mas  0 é diferente de " + " mState.getRegistersAssigned().length")
chamada antiga: assertEquals(exceptionClass, item.getValue().getClass())
nova chamada: assertEquals(exceptionClass, item.getValue().getClass(), "Era esperado valores iguais, mas  exceptionClass é diferente de " + result159 + " <item.getValue().getClass()>")
chamada antiga: assertEquals(ClassNameUtils.toInternal(exceptionClass), item.getType())
nova chamada: assertEquals(ClassNameUtils.toInternal(exceptionClass), item.getType(), "Era esperado valores iguais, mas " + result160 + " <ClassNameUtils.toInternal(exceptionClass)> é diferente de " + result161 + " <item.getType()>")
chamada antiga: assertEquals(exceptionMessage, ((Throwable) item.getValue()).getMessage())
nova chamada: assertEquals(exceptionMessage, ((Throwable) item.getValue()).getMessage(), "Era esperado valores iguais, mas  exceptionMessage é diferente de " + result162 + " <((Throwable) item.getValue()).getMessage()>")
chamada antiga: assertEquals(0, mState.getRegistersAssigned().length)
nova chamada: assertEquals(0, mState.getRegistersAssigned().length, "Era esperado valores iguais, mas  0 é diferente de " + " mState.getRegistersAssigned().length")
chamada antiga: assertEquals(UnknownValue.class, setItem.getValue().getValue().getClass())
nova chamada: assertEquals(UnknownValue.class, setItem.getValue().getValue().getClass(), "Era esperado valores iguais, mas  UnknownValue.class é diferente de " + result163 + " <setItem.getValue().getValue().getClass()>")
chamada antiga: assertEquals("I", setItem.getValue().getType())
nova chamada: assertEquals("I", setItem.getValue().getType(), "Era esperado valores iguais, mas  'I' é diferente de " + result164 + " <setItem.getValue().getType()>")
chamada antiga: assertEquals("iget r" + REGISTER_A + ", r" + REGISTER_B + ", Lsome/class;->someMethod:I", op.toString())
nova chamada: assertEquals("iget r" + REGISTER_A + ", r" + REGISTER_B + ", Lsome/class;->someMethod:I", op.toString(), "Era esperado valores iguais, mas  'iget r' + REGISTER_A + ', r' + REGISTER_B + ', Lsome/class;-someMethod:I' é diferente de " + result165 + " <op.toString()>")
chamada antiga: assertEquals(expected, state.toString())
nova chamada: assertEquals(expected, state.toString(), "Era esperado valores iguais, mas  expected é diferente de " + result166 + " <state.toString()>")
chamada antiga: assertEquals(expected, state.toString(false))
nova chamada: assertEquals(expected, state.toString(false), "Era esperado valores iguais, mas  expected é diferente de " + result167 + " <state.toString(false)>")
chamada antiga: assertArrayEquals(expected, actual)
nova chamada: assertArrayEquals(expected, actual, "Era esperado arrays iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertEquals(CommonTypes.OBJECT, item.getType())
nova chamada: assertEquals(CommonTypes.OBJECT, item.getType(), "Era esperado valores iguais, mas  CommonTypes.OBJECT é diferente de " + result168 + " <item.getType()>")
chamada antiga: assertEquals(CommonTypes.OBJECT, item.getType())
nova chamada: assertEquals(CommonTypes.OBJECT, item.getType(), "Era esperado valores iguais, mas  CommonTypes.OBJECT é diferente de " + result169 + " <item.getType()>")
chamada antiga: assertEquals(CommonTypes.STRING, item.getType())
nova chamada: assertEquals(CommonTypes.STRING, item.getType(), "Era esperado valores iguais, mas  CommonTypes.STRING é diferente de " + result170 + " <item.getType()>")
chamada antiga: assertEquals(CommonTypes.OBJECT, item.getType())
nova chamada: assertEquals(CommonTypes.OBJECT, item.getType(), "Era esperado valores iguais, mas  CommonTypes.OBJECT é diferente de " + result171 + " <item.getType()>")
chamada antiga: assertEquals(CommonTypes.UNKNOWN, item.getType())
nova chamada: assertEquals(CommonTypes.UNKNOWN, item.getType(), "Era esperado valores iguais, mas  CommonTypes.UNKNOWN é diferente de " + result172 + " <item.getType()>")
chamada antiga: assertEquals("[" + CommonTypes.OBJECT, item.getType())
nova chamada: assertEquals("[" + CommonTypes.OBJECT, item.getType(), "Era esperado valores iguais, mas  '[' + CommonTypes.OBJECT é diferente de " + result173 + " <item.getType()>")
chamada antiga: assertEquals(expected, digraph)
nova chamada: assertEquals(expected, digraph, "Era esperado valores iguais, mas  expected é diferente de " + " digraph")
chamada antiga: fail("Not yet implemented")
nova chamada: fail("Not yet implemented", "A execução falhou por uma causa deliberada")
chamada antiga: assertEquals(handlerCodeAddress2, actual)
nova chamada: assertEquals(handlerCodeAddress2, actual, "Era esperado valores iguais, mas  handlerCodeAddress2 é diferente de " + " actual")
chamada antiga: assertEquals(handlerCodeAddress1, actual)
nova chamada: assertEquals(handlerCodeAddress1, actual, "Era esperado valores iguais, mas  handlerCodeAddress1 é diferente de " + " actual")
chamada antiga: assertEquals(handlerCodeAddress, actual)
nova chamada: assertEquals(handlerCodeAddress, actual, "Era esperado valores iguais, mas  handlerCodeAddress é diferente de " + " actual")
chamada antiga: assertEquals(expectedValue, instance.getValue())
nova chamada: assertEquals(expectedValue, instance.getValue(), "Era esperado valores iguais, mas  expectedValue é diferente de " + result174 + " <instance.getValue()>")
chamada antiga: assertEquals(expectedValue, instance.getValue())
nova chamada: assertEquals(expectedValue, instance.getValue(), "Era esperado valores iguais, mas  expectedValue é diferente de " + result175 + " <instance.getValue()>")
chamada antiga: assertEquals(2, templateMethodState.getRegisterCount())
nova chamada: assertEquals(2, templateMethodState.getRegisterCount(), "Era esperado valores iguais, mas  2 é diferente de " + result176 + " <templateMethodState.getRegisterCount()>")
chamada antiga: assertEquals(1, templateMethodState.getParameterCount())
nova chamada: assertEquals(1, templateMethodState.getParameterCount(), "Era esperado valores iguais, mas  1 é diferente de " + result177 + " <templateMethodState.getParameterCount()>")
chamada antiga: assertEquals(1, instanceRegister)
nova chamada: assertEquals(1, instanceRegister, "Era esperado valores iguais, mas  1 é diferente de " + " instanceRegister")
chamada antiga: assertEquals(CLASS_NAME, instanceItem.getType())
nova chamada: assertEquals(CLASS_NAME, instanceItem.getType(), "Era esperado valores iguais, mas  CLASS_NAME é diferente de " + result178 + " <instanceItem.getType()>")
chamada antiga: assertEquals(UnknownValue.class, instanceItem.getValue().getClass())
nova chamada: assertEquals(UnknownValue.class, instanceItem.getValue().getClass(), "Era esperado valores iguais, mas  UnknownValue.class é diferente de " + result179 + " <instanceItem.getValue().getClass()>")
chamada antiga: assertEquals(1, templateMethodState.getRegisterCount())
nova chamada: assertEquals(1, templateMethodState.getRegisterCount(), "Era esperado valores iguais, mas  1 é diferente de " + result180 + " <templateMethodState.getRegisterCount()>")
chamada antiga: assertEquals(1, templateMethodState.getParameterCount())
nova chamada: assertEquals(1, templateMethodState.getParameterCount(), "Era esperado valores iguais, mas  1 é diferente de " + result181 + " <templateMethodState.getParameterCount()>")
chamada antiga: assertEquals(0, instanceRegister)
nova chamada: assertEquals(0, instanceRegister, "Era esperado valores iguais, mas  0 é diferente de " + " instanceRegister")
chamada antiga: assertEquals(CLASS_NAME, instanceItem.getType())
nova chamada: assertEquals(CLASS_NAME, instanceItem.getType(), "Era esperado valores iguais, mas  CLASS_NAME é diferente de " + result182 + " <instanceItem.getType()>")
chamada antiga: assertEquals(UninitializedInstance.class, instanceItem.getValue().getClass())
nova chamada: assertEquals(UninitializedInstance.class, instanceItem.getValue().getClass(), "Era esperado valores iguais, mas  UninitializedInstance.class é diferente de " + result183 + " <instanceItem.getValue().getClass()>")
chamada antiga: assertEquals(CommonTypes.STRING, virtualClass.getName())
nova chamada: assertEquals(CommonTypes.STRING, virtualClass.getName(), "Era esperado valores iguais, mas  CommonTypes.STRING é diferente de " + result184 + " <virtualClass.getName()>")
chamada antiga: assertEquals(CommonTypes.STRING, virtualClass.getName())
nova chamada: assertEquals(CommonTypes.STRING, virtualClass.getName(), "Era esperado valores iguais, mas  CommonTypes.STRING é diferente de " + result185 + " <virtualClass.getName()>")
chamada antiga: assertEquals(CommonTypes.INTEGER, virtualType.getName())
nova chamada: assertEquals(CommonTypes.INTEGER, virtualType.getName(), "Era esperado valores iguais, mas  CommonTypes.INTEGER é diferente de " + result186 + " <virtualType.getName()>")
chamada antiga: assertTrue(virtualType instanceof VirtualPrimitive)
nova chamada: assertTrue(virtualType instanceof VirtualPrimitive, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(CommonTypes.INTEGER, virtualType.getName())
nova chamada: assertEquals(CommonTypes.INTEGER, virtualType.getName(), "Era esperado valores iguais, mas  CommonTypes.INTEGER é diferente de " + result187 + " <virtualType.getName()>")
chamada antiga: assertTrue(virtualType instanceof VirtualPrimitive)
nova chamada: assertTrue(virtualType instanceof VirtualPrimitive, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(typeSignature, virtualType.getName())
nova chamada: assertEquals(typeSignature, virtualType.getName(), "Era esperado valores iguais, mas  typeSignature é diferente de " + result188 + " <virtualType.getName()>")
chamada antiga: assertTrue(virtualType instanceof VirtualArray)
nova chamada: assertTrue(virtualType instanceof VirtualArray, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("[" + CommonTypes.STRING, virtualType.getName())
nova chamada: assertEquals("[" + CommonTypes.STRING, virtualType.getName(), "Era esperado valores iguais, mas  '[' + CommonTypes.STRING é diferente de " + result189 + " <virtualType.getName()>")
chamada antiga: assertTrue(virtualType instanceof VirtualArray)
nova chamada: assertTrue(virtualType instanceof VirtualArray, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(classDefs.size() > 0)
nova chamada: assertTrue(classDefs.size() > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(klazz, enumConstant.getClass())
nova chamada: assertEquals(klazz, enumConstant.getClass(), "Era esperado valores iguais, mas  klazz é diferente de " + result190 + " <enumConstant.getClass()>")
chamada antiga: assertArrayEquals(expectedEnumStrings, enumStrings)
nova chamada: assertArrayEquals(expectedEnumStrings, enumStrings, "Era esperado arrays iguais, mas  expectedEnumStrings é diferente de " + " enumStrings")
chamada antiga: assertEquals(klazz, enumConstant.getClass())
nova chamada: assertEquals(klazz, enumConstant.getClass(), "Era esperado valores iguais, mas  klazz é diferente de " + result191 + " <enumConstant.getClass()>")
chamada antiga: assertEquals(exception.getMessage(), "does/not/exist")
nova chamada: assertEquals(exception.getMessage(), "does/not/exist", "Era esperado valores iguais, mas " + result192 + " <exception.getMessage()> é diferente de " + " 'does/not/exist'")
chamada antiga: assertEquals(1, methods1.size())
nova chamada: assertEquals(1, methods1.size(), "Era esperado valores iguais, mas  1 é diferente de " + result193 + " <methods1.size()>")
chamada antiga: assertEquals(1, methods2.size())
nova chamada: assertEquals(1, methods2.size(), "Era esperado valores iguais, mas  1 é diferente de " + result194 + " <methods2.size()>")
chamada antiga: assertEquals(methods1.get(0).getReturnType(), klazz2)
nova chamada: assertEquals(methods1.get(0).getReturnType(), klazz2, "Era esperado valores iguais, mas " + result195 + " <methods1.get(0).getReturnType()> é diferente de " + " klazz2")
chamada antiga: assertEquals(methods2.get(0).getReturnType(), klazz1)
nova chamada: assertEquals(methods2.get(0).getReturnType(), klazz1, "Era esperado valores iguais, mas " + result196 + " <methods2.get(0).getReturnType()> é diferente de " + " klazz1")
chamada antiga: assertEquals(2, fields.size())
nova chamada: assertEquals(2, fields.size(), "Era esperado valores iguais, mas  2 é diferente de " + result197 + " <fields.size()>")
chamada antiga: assertEquals("public static int org.cf.test.OverloadedFields.field1", fields.get(0).toString())
nova chamada: assertEquals("public static int org.cf.test.OverloadedFields.field1", fields.get(0).toString(), "Era esperado valores iguais, mas  'public static int org.cf.test.OverloadedFields.field1' é diferente de " + result198 + " <fields.get(0).toString()>")
chamada antiga: assertEquals("public static java.lang.Object org.cf.test.OverloadedFields.field1", fields.get(1).toString())
nova chamada: assertEquals("public static java.lang.Object org.cf.test.OverloadedFields.field1", fields.get(1).toString(), "Era esperado valores iguais, mas  'public static java.lang.Object org.cf.test.OverloadedFields.field1' é diferente de " + result199 + " <fields.get(1).toString()>")
chamada antiga: assertEquals(superName, superClass.getName())
nova chamada: assertEquals(superName, superClass.getName(), "Era esperado valores iguais, mas  superName é diferente de " + result200 + " <superClass.getName()>")
chamada antiga: assertEquals(superClass, klazz.getSuperclass())
nova chamada: assertEquals(superClass, klazz.getSuperclass(), "Era esperado valores iguais, mas  superClass é diferente de " + result201 + " <klazz.getSuperclass()>")
chamada antiga: assertEquals(6, methods.size())
nova chamada: assertEquals(6, methods.size(), "Era esperado valores iguais, mas  6 é diferente de " + result202 + " <methods.size()>")
chamada antiga: assertEquals(1, fields.size())
nova chamada: assertEquals(1, fields.size(), "Era esperado valores iguais, mas  1 é diferente de " + result203 + " <fields.size()>")
chamada antiga: assertEquals(1, fields.size())
nova chamada: assertEquals(1, fields.size(), "Era esperado valores iguais, mas  1 é diferente de " + result204 + " <fields.size()>")
chamada antiga: assertEquals(arrayClass, fields.get(0).getType())
nova chamada: assertEquals(arrayClass, fields.get(0).getType(), "Era esperado valores iguais, mas  arrayClass é diferente de " + result205 + " <fields.get(0).getType()>")
chamada antiga: assertEquals(1, methods.size())
nova chamada: assertEquals(1, methods.size(), "Era esperado valores iguais, mas  1 é diferente de " + result206 + " <methods.size()>")
chamada antiga: assertEquals(1, parameterTypes.length)
nova chamada: assertEquals(1, parameterTypes.length, "Era esperado valores iguais, mas  1 é diferente de " + " parameterTypes.length")
chamada antiga: assertEquals(klazz, parameterTypes[0])
nova chamada: assertEquals(klazz, parameterTypes[0], "Era esperado valores iguais, mas  klazz é diferente de " + " parameterTypes[0]")
chamada antiga: assertEquals(1, methods.size())
nova chamada: assertEquals(1, methods.size(), "Era esperado valores iguais, mas  1 é diferente de " + result207 + " <methods.size()>")
chamada antiga: assertEquals("public static void " + className + ".simpleLoop(int,java.lang.Object)", methods.get(0).toString())
nova chamada: assertEquals("public static void " + className + ".simpleLoop(int,java.lang.Object)", methods.get(0).toString(), "Era esperado valores iguais, mas  'public static void ' + className + '.simpleLoop(int,java.lang.Object)' é diferente de " + result208 + " <methods.get(0).toString()>")
chamada antiga: assertEquals(exception.getMessage(), nonExistentClassName)
nova chamada: assertEquals(exception.getMessage(), nonExistentClassName, "Era esperado valores iguais, mas " + result209 + " <exception.getMessage()> é diferente de " + " nonExistentClassName")
chamada antiga: assertEquals(exception.getMessage(), nonExistentClassName)
nova chamada: assertEquals(exception.getMessage(), nonExistentClassName, "Era esperado valores iguais, mas " + result210 + " <exception.getMessage()> é diferente de " + " nonExistentClassName")
chamada antiga: assertEquals(0, alwaysZeroItem.getValue())
nova chamada: assertEquals(0, alwaysZeroItem.getValue(), "Era esperado valores iguais, mas  0 é diferente de " + result211 + " <alwaysZeroItem.getValue()>")
chamada antiga: assertEquals(0, testInt1Item.getValue())
nova chamada: assertEquals(0, testInt1Item.getValue(), "Era esperado valores iguais, mas  0 é diferente de " + result212 + " <testInt1Item.getValue()>")
chamada antiga: assertEquals(1, testInt2Item.getValue())
nova chamada: assertEquals(1, testInt2Item.getValue(), "Era esperado valores iguais, mas  1 é diferente de " + result213 + " <testInt2Item.getValue()>")
chamada antiga: assertEquals(ArrayList.class, item.getValue().getClass())
nova chamada: assertEquals(ArrayList.class, item.getValue().getClass(), "Era esperado valores iguais, mas  ArrayList.class é diferente de " + result214 + " <item.getValue().getClass()>")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result215 + " <list.size()>")
chamada antiga: assertEquals("added item!", list.get(0))
nova chamada: assertEquals("added item!", list.get(0), "Era esperado valores iguais, mas  'added item!' é diferente de " + result216 + " <list.get(0)>")
chamada antiga: assertEquals(item, fieldItem)
nova chamada: assertEquals(item, fieldItem, "Era esperado valores iguais, mas  item é diferente de " + " fieldItem")
chamada antiga: assertEquals(ArrayList.class, item.getValue().getClass())
nova chamada: assertEquals(ArrayList.class, item.getValue().getClass(), "Era esperado valores iguais, mas  ArrayList.class é diferente de " + result217 + " <item.getValue().getClass()>")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result218 + " <list.size()>")
chamada antiga: assertEquals("added item!", list.get(0))
nova chamada: assertEquals("added item!", list.get(0), "Era esperado valores iguais, mas  'added item!' é diferente de " + result219 + " <list.get(0)>")
chamada antiga: assertEquals(item, fieldItem)
nova chamada: assertEquals(item, fieldItem, "Era esperado valores iguais, mas  item é diferente de " + " fieldItem")
chamada antiga: assertEquals(expectedImmediateAncestors, ancestors)
nova chamada: assertEquals(expectedImmediateAncestors, ancestors, "Era esperado valores iguais, mas  expectedImmediateAncestors é diferente de " + " ancestors")
chamada antiga: assertEquals(expectedImmediateAncestors, ancestors)
nova chamada: assertEquals(expectedImmediateAncestors, ancestors, "Era esperado valores iguais, mas  expectedImmediateAncestors é diferente de " + " ancestors")
chamada antiga: assertEquals(expectedAncestors, ancestors)
nova chamada: assertEquals(expectedAncestors, ancestors, "Era esperado valores iguais, mas  expectedAncestors é diferente de " + " ancestors")
chamada antiga: assertEquals(expectedAncestors, ancestors)
nova chamada: assertEquals(expectedAncestors, ancestors, "Era esperado valores iguais, mas  expectedAncestors é diferente de " + " ancestors")
chamada antiga: assertEquals(fieldType, returnItem.getType())
nova chamada: assertEquals(fieldType, returnItem.getType(), "Era esperado valores iguais, mas  fieldType é diferente de " + result220 + " <returnItem.getType()>")
chamada antiga: assertEquals(IllegalAccessException.class, actualException.getClass())
nova chamada: assertEquals(IllegalAccessException.class, actualException.getClass(), "Era esperado valores iguais, mas  IllegalAccessException.class é diferente de " + result221 + " <actualException.getClass()>")
chamada antiga: assertEquals(error, actualException.getMessage())
nova chamada: assertEquals(error, actualException.getMessage(), "Era esperado valores iguais, mas  error é diferente de " + result222 + " <actualException.getMessage()>")
chamada antiga: assertEquals(level, method.getSideEffectLevel())
nova chamada: assertEquals(level, method.getSideEffectLevel(), "Era esperado valores iguais, mas  level é diferente de " + result223 + " <method.getSideEffectLevel()>")
chamada antiga: assertEquals(level, method.getSideEffectLevel())
nova chamada: assertEquals(level, method.getSideEffectLevel(), "Era esperado valores iguais, mas  level é diferente de " + result224 + " <method.getSideEffectLevel()>")
chamada antiga: assertEquals(level, method.getSideEffectLevel())
nova chamada: assertEquals(level, method.getSideEffectLevel(), "Era esperado valores iguais, mas  level é diferente de " + result225 + " <method.getSideEffectLevel()>")
chamada antiga: assertEquals(1, method.getExceptions().size())
nova chamada: assertEquals(1, method.getExceptions().size(), "Era esperado valores iguais, mas  1 é diferente de " + result226 + " <method.getExceptions().size()>")
chamada antiga: assertEquals(exception, actualException)
nova chamada: assertEquals(exception, actualException, "Era esperado valores iguais, mas  exception é diferente de " + " actualException")
chamada antiga: assertEquals(SideEffect.Level.NONE, method.getSideEffectLevel())
nova chamada: assertEquals(SideEffect.Level.NONE, method.getSideEffectLevel(), "Era esperado valores iguais, mas  SideEffect.Level.NONE é diferente de " + result227 + " <method.getSideEffectLevel()>")
chamada antiga: assertEquals(SideEffect.Level.NONE, graph.getHighestSideEffectLevel())
nova chamada: assertEquals(SideEffect.Level.NONE, graph.getHighestSideEffectLevel(), "Era esperado valores iguais, mas  SideEffect.Level.NONE é diferente de " + result228 + " <graph.getHighestSideEffectLevel()>")
chamada antiga: assertEquals(SideEffect.Level.NONE, graph.getHighestSideEffectLevel())
nova chamada: assertEquals(SideEffect.Level.NONE, graph.getHighestSideEffectLevel(), "Era esperado valores iguais, mas  SideEffect.Level.NONE é diferente de " + result229 + " <graph.getHighestSideEffectLevel()>")
chamada antiga: assertEquals(SideEffect.Level.NONE, graph.getHighestSideEffectLevel())
nova chamada: assertEquals(SideEffect.Level.NONE, graph.getHighestSideEffectLevel(), "Era esperado valores iguais, mas  SideEffect.Level.NONE é diferente de " + result230 + " <graph.getHighestSideEffectLevel()>")
chamada antiga: assertEquals(SideEffect.Level.STRONG, graph.getHighestSideEffectLevel())
nova chamada: assertEquals(SideEffect.Level.STRONG, graph.getHighestSideEffectLevel(), "Era esperado valores iguais, mas  SideEffect.Level.STRONG é diferente de " + result231 + " <graph.getHighestSideEffectLevel()>")
chamada antiga: assertEquals(SideEffect.Level.STRONG, graph.getHighestSideEffectLevel())
nova chamada: assertEquals(SideEffect.Level.STRONG, graph.getHighestSideEffectLevel(), "Era esperado valores iguais, mas  SideEffect.Level.STRONG é diferente de " + result232 + " <graph.getHighestSideEffectLevel()>")
chamada antiga: assertEquals(SideEffect.Level.NONE, graph.getHighestSideEffectLevel())
nova chamada: assertEquals(SideEffect.Level.NONE, graph.getHighestSideEffectLevel(), "Era esperado valores iguais, mas  SideEffect.Level.NONE é diferente de " + result233 + " <graph.getHighestSideEffectLevel()>")
chamada antiga: assertEquals(SideEffect.Level.WEAK, graph.getHighestSideEffectLevel())
nova chamada: assertEquals(SideEffect.Level.WEAK, graph.getHighestSideEffectLevel(), "Era esperado valores iguais, mas  SideEffect.Level.WEAK é diferente de " + result234 + " <graph.getHighestSideEffectLevel()>")
chamada antiga: assertEquals(SideEffect.Level.NONE, graph.getHighestSideEffectLevel())
nova chamada: assertEquals(SideEffect.Level.NONE, graph.getHighestSideEffectLevel(), "Era esperado valores iguais, mas  SideEffect.Level.NONE é diferente de " + result235 + " <graph.getHighestSideEffectLevel()>")
chamada antiga: assertEquals(SideEffect.Level.STRONG, graph.getHighestSideEffectLevel())
nova chamada: assertEquals(SideEffect.Level.STRONG, graph.getHighestSideEffectLevel(), "Era esperado valores iguais, mas  SideEffect.Level.STRONG é diferente de " + result236 + " <graph.getHighestSideEffectLevel()>")
chamada antiga: assertEquals(SideEffect.Level.WEAK, graph.getHighestSideEffectLevel())
nova chamada: assertEquals(SideEffect.Level.WEAK, graph.getHighestSideEffectLevel(), "Era esperado valores iguais, mas  SideEffect.Level.WEAK é diferente de " + result237 + " <graph.getHighestSideEffectLevel()>")
chamada antiga: assertEquals(SideEffect.Level.NONE, graph.getHighestSideEffectLevel())
nova chamada: assertEquals(SideEffect.Level.NONE, graph.getHighestSideEffectLevel(), "Era esperado valores iguais, mas  SideEffect.Level.NONE é diferente de " + result238 + " <graph.getHighestSideEffectLevel()>")
chamada antiga: assertEquals(SideEffect.Level.NONE, graph.getHighestSideEffectLevel())
nova chamada: assertEquals(SideEffect.Level.NONE, graph.getHighestSideEffectLevel(), "Era esperado valores iguais, mas  SideEffect.Level.NONE é diferente de " + result239 + " <graph.getHighestSideEffectLevel()>")
chamada antiga: assertEquals(SideEffect.Level.STRONG, graph.getHighestSideEffectLevel())
nova chamada: assertEquals(SideEffect.Level.STRONG, graph.getHighestSideEffectLevel(), "Era esperado valores iguais, mas  SideEffect.Level.STRONG é diferente de " + result240 + " <graph.getHighestSideEffectLevel()>")
chamada antiga: assertEquals(EXCEPTION_CLASS_NAME, item.getType())
nova chamada: assertEquals(EXCEPTION_CLASS_NAME, item.getType(), "Era esperado valores iguais, mas  EXCEPTION_CLASS_NAME é diferente de " + result241 + " <item.getType()>")
chamada antiga: assertEquals(UninitializedInstance.class, item.getValue().getClass())
nova chamada: assertEquals(UninitializedInstance.class, item.getValue().getClass(), "Era esperado valores iguais, mas  UninitializedInstance.class é diferente de " + result242 + " <item.getValue().getClass()>")
chamada antiga: assertEquals(EXCEPTION_CLASS_NAME, instance.getType().getName())
nova chamada: assertEquals(EXCEPTION_CLASS_NAME, instance.getType().getName(), "Era esperado valores iguais, mas  EXCEPTION_CLASS_NAME é diferente de " + result243 + " <instance.getType().getName()>")
chamada antiga: assertEquals(CommonTypes.UNKNOWN, item.getType())
nova chamada: assertEquals(CommonTypes.UNKNOWN, item.getType(), "Era esperado valores iguais, mas  CommonTypes.UNKNOWN é diferente de " + result244 + " <item.getType()>")
chamada antiga: assertTrue(item.isUnknown())
nova chamada: assertTrue(item.isUnknown(), "Era esperado verdadeiro, mas " + result245 + " <item.isUnknown()> é falso")
chamada antiga: assertEquals(expectedValue, fieldItem.getValue())
nova chamada: assertEquals(expectedValue, fieldItem.getValue(), "Era esperado valores iguais, mas  expectedValue é diferente de " + result246 + " <fieldItem.getValue()>")
chamada antiga: assertEquals(expectedValue, fieldItem.getValue())
nova chamada: assertEquals(expectedValue, fieldItem.getValue(), "Era esperado valores iguais, mas  expectedValue é diferente de " + result247 + " <fieldItem.getValue()>")
chamada antiga: assertEquals(expectedValue, fieldItem.getValue())
nova chamada: assertEquals(expectedValue, fieldItem.getValue(), "Era esperado valores iguais, mas  expectedValue é diferente de " + result248 + " <fieldItem.getValue()>")
chamada antiga: assertEquals(expectedValue, fieldItem.getValue())
nova chamada: assertEquals(expectedValue, fieldItem.getValue(), "Era esperado valores iguais, mas  expectedValue é diferente de " + result249 + " <fieldItem.getValue()>")
chamada antiga: assertEquals(expectedValue, fieldItem.getValue())
nova chamada: assertEquals(expectedValue, fieldItem.getValue(), "Era esperado valores iguais, mas  expectedValue é diferente de " + result250 + " <fieldItem.getValue()>")
chamada antiga: assertEquals(expectedValue, fieldItem.getValue())
nova chamada: assertEquals(expectedValue, fieldItem.getValue(), "Era esperado valores iguais, mas  expectedValue é diferente de " + result251 + " <fieldItem.getValue()>")
chamada antiga: assertEquals(expectedValue, fieldItem.getValue())
nova chamada: assertEquals(expectedValue, fieldItem.getValue(), "Era esperado valores iguais, mas  expectedValue é diferente de " + result252 + " <fieldItem.getValue()>")
chamada antiga: assertEquals(expectedValue, fieldItem.getValue())
nova chamada: assertEquals(expectedValue, fieldItem.getValue(), "Era esperado valores iguais, mas  expectedValue é diferente de " + result253 + " <fieldItem.getValue()>")
chamada antiga: assertEquals(EXPECTED_VALUE, item.getValue())
nova chamada: assertEquals(EXPECTED_VALUE, item.getValue(), "Era esperado valores iguais, mas  EXPECTED_VALUE é diferente de " + result254 + " <item.getValue()>")
chamada antiga: assertEquals(EXPECTED_VALUE, value)
nova chamada: assertEquals(EXPECTED_VALUE, value, "Era esperado valores iguais, mas  EXPECTED_VALUE é diferente de " + " value")
chamada antiga: assertEquals("parentMethod", item.getValue())
nova chamada: assertEquals("parentMethod", item.getValue(), "Era esperado valores iguais, mas  'parentMethod' é diferente de " + result255 + " <item.getValue()>")
chamada antiga: assertArrayEquals(expectedAddresses, actualAddresses)
nova chamada: assertArrayEquals(expectedAddresses, actualAddresses, "Era esperado arrays iguais, mas  expectedAddresses é diferente de " + " actualAddresses")
chamada antiga: assertEquals(exceptionClass, argument.getValue().getClass())
nova chamada: assertEquals(exceptionClass, argument.getValue().getClass(), "Era esperado valores iguais, mas  exceptionClass é diferente de " + result256 + " <argument.getValue().getClass()>")
chamada antiga: assertEquals(message, argument.getValue().getMessage())
nova chamada: assertEquals(message, argument.getValue().getMessage(), "Era esperado valores iguais, mas  message é diferente de " + result257 + " <argument.getValue().getMessage()>")
chamada antiga: assertEquals("Lsome/class;", componentBase)
nova chamada: assertEquals("Lsome/class;", componentBase, "Era esperado valores iguais, mas  'Lsome/class;' é diferente de " + " componentBase")
chamada antiga: assertEquals("Lsome.class;", componentBase)
nova chamada: assertEquals("Lsome.class;", componentBase, "Era esperado valores iguais, mas  'Lsome.class;' é diferente de " + " componentBase")
chamada antiga: assertEquals("some.class", componentBase)
nova chamada: assertEquals("some.class", componentBase, "Era esperado valores iguais, mas  'some.class' é diferente de " + " componentBase")
chamada antiga: assertEquals("[[[[[Lsome/class;", componentType)
nova chamada: assertEquals("[[[[[Lsome/class;", componentType, "Era esperado valores iguais, mas  '[[[[[Lsome/class;' é diferente de " + " componentType")
chamada antiga: assertEquals("[[Lsome.class;", componentType)
nova chamada: assertEquals("[[Lsome.class;", componentType, "Era esperado valores iguais, mas  '[[Lsome.class;' é diferente de " + " componentType")
chamada antiga: assertEquals("some.class[][]", componentType)
nova chamada: assertEquals("some.class[][]", componentType, "Era esperado valores iguais, mas  'some.class[][]' é diferente de " + " componentType")
chamada antiga: assertEquals("some.package", ClassNameUtils.getPackageName("Lsome/package/Class;"))
nova chamada: assertEquals("some.package", ClassNameUtils.getPackageName("Lsome/package/Class;"), "Era esperado valores iguais, mas  'some.package' é diferente de " + result258 + " <ClassNameUtils.getPackageName('Lsome/package/Class;')>")
chamada antiga: assertEquals("", ClassNameUtils.getPackageName("LSomeClass;"))
nova chamada: assertEquals("", ClassNameUtils.getPackageName("LSomeClass;"), "Era esperado valores iguais, mas  '' é diferente de " + result259 + " <ClassNameUtils.getPackageName('LSomeClass;')>")
chamada antiga: assertEquals("", ClassNameUtils.getPackageName("SomeClass"))
nova chamada: assertEquals("", ClassNameUtils.getPackageName("SomeClass"), "Era esperado valores iguais, mas  '' é diferente de " + result260 + " <ClassNameUtils.getPackageName('SomeClass')>")
chamada antiga: assertEquals("", ClassNameUtils.getPackageName("SomeClass[]"))
nova chamada: assertEquals("", ClassNameUtils.getPackageName("SomeClass[]"), "Era esperado valores iguais, mas  '' é diferente de " + result261 + " <ClassNameUtils.getPackageName('SomeClass[]')>")
chamada antiga: assertEquals("", ClassNameUtils.getPackageName("[LSomeClass;"))
nova chamada: assertEquals("", ClassNameUtils.getPackageName("[LSomeClass;"), "Era esperado valores iguais, mas  '' é diferente de " + result262 + " <ClassNameUtils.getPackageName('[LSomeClass;')>")
chamada antiga: assertEquals("J", primitive)
nova chamada: assertEquals("J", primitive, "Era esperado valores iguais, mas  'J' é diferente de " + " primitive")
chamada antiga: assertEquals("J", primitive)
nova chamada: assertEquals("J", primitive, "Era esperado valores iguais, mas  'J' é diferente de " + " primitive")
chamada antiga: assertEquals("J", primitive)
nova chamada: assertEquals("J", primitive, "Era esperado valores iguais, mas  'J' é diferente de " + " primitive")
chamada antiga: assertEquals("[[[I", primitive)
nova chamada: assertEquals("[[[I", primitive, "Era esperado valores iguais, mas  '[[[I' é diferente de " + " primitive")
chamada antiga: assertEquals(3, actual)
nova chamada: assertEquals(3, actual, "Era esperado valores iguais, mas  3 é diferente de " + " actual")
chamada antiga: assertEquals("java.lang.Object", ClassNameUtils.toFormat("Ljava/lang/Object;", TypeFormat.SOURCE))
nova chamada: assertEquals("java.lang.Object", ClassNameUtils.toFormat("Ljava/lang/Object;", TypeFormat.SOURCE), "Era esperado valores iguais, mas  'java.lang.Object' é diferente de " + result263 + " <ClassNameUtils.toFormat('Ljava/lang/Object;', TypeFormat.SOURCE)>")
chamada antiga: assertEquals("java.lang.Object", ClassNameUtils.toFormat("java.lang.Object", TypeFormat.SOURCE))
nova chamada: assertEquals("java.lang.Object", ClassNameUtils.toFormat("java.lang.Object", TypeFormat.SOURCE), "Era esperado valores iguais, mas  'java.lang.Object' é diferente de " + result264 + " <ClassNameUtils.toFormat('java.lang.Object', TypeFormat.SOURCE)>")
chamada antiga: assertEquals("java.lang.Object[]", ClassNameUtils.toFormat("[Ljava.lang.Object;", TypeFormat.SOURCE))
nova chamada: assertEquals("java.lang.Object[]", ClassNameUtils.toFormat("[Ljava.lang.Object;", TypeFormat.SOURCE), "Era esperado valores iguais, mas  'java.lang.Object[]' é diferente de " + result265 + " <ClassNameUtils.toFormat('[Ljava.lang.Object;', TypeFormat.SOURCE)>")
chamada antiga: assertEquals("SomeClass", ClassNameUtils.toFormat("LSomeClass;", TypeFormat.SOURCE))
nova chamada: assertEquals("SomeClass", ClassNameUtils.toFormat("LSomeClass;", TypeFormat.SOURCE), "Era esperado valores iguais, mas  'SomeClass' é diferente de " + result266 + " <ClassNameUtils.toFormat('LSomeClass;', TypeFormat.SOURCE)>")
chamada antiga: assertEquals("SomeClass", ClassNameUtils.toFormat("SomeClass", TypeFormat.SOURCE))
nova chamada: assertEquals("SomeClass", ClassNameUtils.toFormat("SomeClass", TypeFormat.SOURCE), "Era esperado valores iguais, mas  'SomeClass' é diferente de " + result267 + " <ClassNameUtils.toFormat('SomeClass', TypeFormat.SOURCE)>")
chamada antiga: assertEquals("SomeClass[]", ClassNameUtils.toFormat("[LSomeClass;", TypeFormat.SOURCE))
nova chamada: assertEquals("SomeClass[]", ClassNameUtils.toFormat("[LSomeClass;", TypeFormat.SOURCE), "Era esperado valores iguais, mas  'SomeClass[]' é diferente de " + result268 + " <ClassNameUtils.toFormat('[LSomeClass;', TypeFormat.SOURCE)>")
chamada antiga: assertEquals("[Ljava/lang/Object;", ClassNameUtils.toFormat("java.lang.Object[]", TypeFormat.INTERNAL))
nova chamada: assertEquals("[Ljava/lang/Object;", ClassNameUtils.toFormat("java.lang.Object[]", TypeFormat.INTERNAL), "Era esperado valores iguais, mas  '[Ljava/lang/Object;' é diferente de " + result269 + " <ClassNameUtils.toFormat('java.lang.Object[]', TypeFormat.INTERNAL)>")
chamada antiga: assertEquals("I", ClassNameUtils.toFormat("int", TypeFormat.INTERNAL))
nova chamada: assertEquals("I", ClassNameUtils.toFormat("int", TypeFormat.INTERNAL), "Era esperado valores iguais, mas  'I' é diferente de " + result270 + " <ClassNameUtils.toFormat('int', TypeFormat.INTERNAL)>")
chamada antiga: assertEquals("[I", ClassNameUtils.toFormat("int[]", TypeFormat.INTERNAL))
nova chamada: assertEquals("[I", ClassNameUtils.toFormat("int[]", TypeFormat.INTERNAL), "Era esperado valores iguais, mas  '[I' é diferente de " + result271 + " <ClassNameUtils.toFormat('int[]', TypeFormat.INTERNAL)>")
chamada antiga: assertEquals("[Ljava/lang/Object;", ClassNameUtils.toFormat("[Ljava.lang.Object;", TypeFormat.INTERNAL))
nova chamada: assertEquals("[Ljava/lang/Object;", ClassNameUtils.toFormat("[Ljava.lang.Object;", TypeFormat.INTERNAL), "Era esperado valores iguais, mas  '[Ljava/lang/Object;' é diferente de " + result272 + " <ClassNameUtils.toFormat('[Ljava.lang.Object;', TypeFormat.INTERNAL)>")
chamada antiga: assertEquals("[Ljava/lang/Object;", ClassNameUtils.toFormat("[Ljava/lang/Object;", TypeFormat.INTERNAL))
nova chamada: assertEquals("[Ljava/lang/Object;", ClassNameUtils.toFormat("[Ljava/lang/Object;", TypeFormat.INTERNAL), "Era esperado valores iguais, mas  '[Ljava/lang/Object;' é diferente de " + result273 + " <ClassNameUtils.toFormat('[Ljava/lang/Object;', TypeFormat.INTERNAL)>")
chamada antiga: assertEquals("[Ljava.lang.Object;", ClassNameUtils.toFormat("java.lang.Object[]", TypeFormat.BINARY))
nova chamada: assertEquals("[Ljava.lang.Object;", ClassNameUtils.toFormat("java.lang.Object[]", TypeFormat.BINARY), "Era esperado valores iguais, mas  '[Ljava.lang.Object;' é diferente de " + result274 + " <ClassNameUtils.toFormat('java.lang.Object[]', TypeFormat.BINARY)>")
chamada antiga: assertEquals("java.lang.Object", ClassNameUtils.toFormat("java.lang.Object", TypeFormat.BINARY))
nova chamada: assertEquals("java.lang.Object", ClassNameUtils.toFormat("java.lang.Object", TypeFormat.BINARY), "Era esperado valores iguais, mas  'java.lang.Object' é diferente de " + result275 + " <ClassNameUtils.toFormat('java.lang.Object', TypeFormat.BINARY)>")
chamada antiga: assertEquals("java.lang.Object", ClassNameUtils.toFormat("Ljava/lang/Object;", TypeFormat.BINARY))
nova chamada: assertEquals("java.lang.Object", ClassNameUtils.toFormat("Ljava/lang/Object;", TypeFormat.BINARY), "Era esperado valores iguais, mas  'java.lang.Object' é diferente de " + result276 + " <ClassNameUtils.toFormat('Ljava/lang/Object;', TypeFormat.BINARY)>")
chamada antiga: assertEquals("int", ClassNameUtils.toFormat("I", TypeFormat.BINARY))
nova chamada: assertEquals("int", ClassNameUtils.toFormat("I", TypeFormat.BINARY), "Era esperado valores iguais, mas  'int' é diferente de " + result277 + " <ClassNameUtils.toFormat('I', TypeFormat.BINARY)>")
chamada antiga: assertEquals("[I", ClassNameUtils.toFormat("[I", TypeFormat.BINARY))
nova chamada: assertEquals("[I", ClassNameUtils.toFormat("[I", TypeFormat.BINARY), "Era esperado valores iguais, mas  '[I' é diferente de " + result278 + " <ClassNameUtils.toFormat('[I', TypeFormat.BINARY)>")
chamada antiga: assertEquals(expected, actual)
nova chamada: assertEquals(expected, actual, "Era esperado valores iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertEquals(expected, actual)
nova chamada: assertEquals(expected, actual, "Era esperado valores iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertEquals(expected, actual)
nova chamada: assertEquals(expected, actual, "Era esperado valores iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertArrayEquals(expected, (int[]) actual)
nova chamada: assertArrayEquals(expected, (int[]) actual, "Era esperado arrays iguais, mas  expected é diferente de " + " (int[]) actual")
chamada antiga: assertArrayEquals(expected, (int[][]) actual)
nova chamada: assertArrayEquals(expected, (int[][]) actual, "Era esperado arrays iguais, mas  expected é diferente de " + " (int[][]) actual")
chamada antiga: assertArrayEquals(expected, (String[][][]) actual)
nova chamada: assertArrayEquals(expected, (String[][][]) actual, "Era esperado arrays iguais, mas  expected é diferente de " + " (String[][][]) actual")
chamada antiga: assertEquals(expected, actual)
nova chamada: assertEquals(expected, actual, "Era esperado valores iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertEquals(expected, actual)
nova chamada: assertEquals(expected, actual, "Era esperado valores iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertEquals(3, intToObject.size())
nova chamada: assertEquals(3, intToObject.size(), "Era esperado valores iguais, mas  3 é diferente de " + result279 + " <intToObject.size()>")
chamada antiga: assertEquals("one", intToObject.get(1))
nova chamada: assertEquals("one", intToObject.get(1), "Era esperado valores iguais, mas  'one' é diferente de " + result280 + " <intToObject.get(1)>")
chamada antiga: assertEquals("two", intToObject.get(4))
nova chamada: assertEquals("two", intToObject.get(4), "Era esperado valores iguais, mas  'two' é diferente de " + result281 + " <intToObject.get(4)>")
chamada antiga: assertEquals("three", intToObject.get(5))
nova chamada: assertEquals("three", intToObject.get(5), "Era esperado valores iguais, mas  'three' é diferente de " + result282 + " <intToObject.get(5)>")
chamada antiga: assertEquals(2, intToObject.size())
nova chamada: assertEquals(2, intToObject.size(), "Era esperado valores iguais, mas  2 é diferente de " + result283 + " <intToObject.size()>")
chamada antiga: assertEquals("two", intToObject.get(1))
nova chamada: assertEquals("two", intToObject.get(1), "Era esperado valores iguais, mas  'two' é diferente de " + result284 + " <intToObject.get(1)>")
chamada antiga: assertEquals("three", intToObject.get(2))
nova chamada: assertEquals("three", intToObject.get(2), "Era esperado valores iguais, mas  'three' é diferente de " + result285 + " <intToObject.get(2)>")
chamada antiga: assertEquals(2, typeNames.size())
nova chamada: assertEquals(2, typeNames.size(), "Era esperado valores iguais, mas  2 é diferente de " + result286 + " <typeNames.size()>")
chamada antiga: assertEquals("typeRef1", typeNames.get(0))
nova chamada: assertEquals("typeRef1", typeNames.get(0), "Era esperado valores iguais, mas  'typeRef1' é diferente de " + result287 + " <typeNames.get(0)>")
chamada antiga: assertEquals("typeRef2", typeNames.get(1))
nova chamada: assertEquals("typeRef2", typeNames.get(1), "Era esperado valores iguais, mas  'typeRef2' é diferente de " + result288 + " <typeNames.get(1)>")
chamada antiga: assertEquals(3, registerSize)
nova chamada: assertEquals(3, registerSize, "Era esperado valores iguais, mas  3 é diferente de " + " registerSize")
chamada antiga: assertEquals(true, Utils.castToPrimitive(Boolean.TRUE, "Z"))
nova chamada: assertEquals(true, Utils.castToPrimitive(Boolean.TRUE, "Z"), "Era esperado valores iguais, mas  true é diferente de " + result289 + " <Utils.castToPrimitive(Boolean.TRUE, 'Z')>")
chamada antiga: assertEquals(false, Utils.castToPrimitive(Boolean.FALSE, "Ljava/lang/Boolean;"))
nova chamada: assertEquals(false, Utils.castToPrimitive(Boolean.FALSE, "Ljava/lang/Boolean;"), "Era esperado valores iguais, mas  false é diferente de " + result290 + " <Utils.castToPrimitive(Boolean.FALSE, 'Ljava/lang/Boolean;')>")
chamada antiga: assertEquals((byte) 1, Utils.castToPrimitive(Boolean.TRUE, "B"))
nova chamada: assertEquals((byte) 1, Utils.castToPrimitive(Boolean.TRUE, "B"), "Era esperado valores iguais, mas  (byte) 1 é diferente de " + result291 + " <Utils.castToPrimitive(Boolean.TRUE, 'B')>")
chamada antiga: assertEquals((byte) 0, Utils.castToPrimitive(Boolean.FALSE, "Ljava/lang/Byte;"))
nova chamada: assertEquals((byte) 0, Utils.castToPrimitive(Boolean.FALSE, "Ljava/lang/Byte;"), "Era esperado valores iguais, mas  (byte) 0 é diferente de " + result292 + " <Utils.castToPrimitive(Boolean.FALSE, 'Ljava/lang/Byte;')>")
chamada antiga: assertEquals(1, Utils.castToPrimitive(Boolean.TRUE, "I"))
nova chamada: assertEquals(1, Utils.castToPrimitive(Boolean.TRUE, "I"), "Era esperado valores iguais, mas  1 é diferente de " + result293 + " <Utils.castToPrimitive(Boolean.TRUE, 'I')>")
chamada antiga: assertEquals(0, Utils.castToPrimitive(Boolean.FALSE, "Ljava/lang/Integer;"))
nova chamada: assertEquals(0, Utils.castToPrimitive(Boolean.FALSE, "Ljava/lang/Integer;"), "Era esperado valores iguais, mas  0 é diferente de " + result294 + " <Utils.castToPrimitive(Boolean.FALSE, 'Ljava/lang/Integer;')>")
chamada antiga: assertEquals((short) 1, Utils.castToPrimitive(Boolean.TRUE, "S"))
nova chamada: assertEquals((short) 1, Utils.castToPrimitive(Boolean.TRUE, "S"), "Era esperado valores iguais, mas  (short) 1 é diferente de " + result295 + " <Utils.castToPrimitive(Boolean.TRUE, 'S')>")
chamada antiga: assertEquals((short) 0, Utils.castToPrimitive(Boolean.FALSE, "Ljava/lang/Short;"))
nova chamada: assertEquals((short) 0, Utils.castToPrimitive(Boolean.FALSE, "Ljava/lang/Short;"), "Era esperado valores iguais, mas  (short) 0 é diferente de " + result296 + " <Utils.castToPrimitive(Boolean.FALSE, 'Ljava/lang/Short;')>")
chamada antiga: assertEquals(value1, Utils.castToPrimitive(value1, "C"))
nova chamada: assertEquals(value1, Utils.castToPrimitive(value1, "C"), "Era esperado valores iguais, mas  value1 é diferente de " + result297 + " <Utils.castToPrimitive(value1, 'C')>")
chamada antiga: assertEquals(value2, Utils.castToPrimitive(Character.valueOf(value2), "Ljava/lang/Character;"))
nova chamada: assertEquals(value2, Utils.castToPrimitive(Character.valueOf(value2), "Ljava/lang/Character;"), "Era esperado valores iguais, mas  value2 é diferente de " + result298 + " <Utils.castToPrimitive(Character.valueOf(value2), 'Ljava/lang/Character;')>")
chamada antiga: assertEquals(true, Utils.castToPrimitive((char) 1, "Z"))
nova chamada: assertEquals(true, Utils.castToPrimitive((char) 1, "Z"), "Era esperado valores iguais, mas  true é diferente de " + result299 + " <Utils.castToPrimitive((char) 1, 'Z')>")
chamada antiga: assertEquals(false, Utils.castToPrimitive((char) 0, "Ljava/lang/Boolean;"))
nova chamada: assertEquals(false, Utils.castToPrimitive((char) 0, "Ljava/lang/Boolean;"), "Era esperado valores iguais, mas  false é diferente de " + result300 + " <Utils.castToPrimitive((char) 0, 'Ljava/lang/Boolean;')>")
chamada antiga: assertEquals((byte) value1, Utils.castToPrimitive(value1, "B"))
nova chamada: assertEquals((byte) value1, Utils.castToPrimitive(value1, "B"), "Era esperado valores iguais, mas  (byte) value1 é diferente de " + result301 + " <Utils.castToPrimitive(value1, 'B')>")
chamada antiga: assertEquals((byte) value2, Utils.castToPrimitive(value2, "Ljava/lang/Byte;"))
nova chamada: assertEquals((byte) value2, Utils.castToPrimitive(value2, "Ljava/lang/Byte;"), "Era esperado valores iguais, mas  (byte) value2 é diferente de " + result302 + " <Utils.castToPrimitive(value2, 'Ljava/lang/Byte;')>")
chamada antiga: assertEquals((int) value1, Utils.castToPrimitive(value1, "I"))
nova chamada: assertEquals((int) value1, Utils.castToPrimitive(value1, "I"), "Era esperado valores iguais, mas  (int) value1 é diferente de " + result303 + " <Utils.castToPrimitive(value1, 'I')>")
chamada antiga: assertEquals((int) value2, Utils.castToPrimitive(value2, "Ljava/lang/Integer;"))
nova chamada: assertEquals((int) value2, Utils.castToPrimitive(value2, "Ljava/lang/Integer;"), "Era esperado valores iguais, mas  (int) value2 é diferente de " + result304 + " <Utils.castToPrimitive(value2, 'Ljava/lang/Integer;')>")
chamada antiga: assertEquals((short) value1, Utils.castToPrimitive(value1, "S"))
nova chamada: assertEquals((short) value1, Utils.castToPrimitive(value1, "S"), "Era esperado valores iguais, mas  (short) value1 é diferente de " + result305 + " <Utils.castToPrimitive(value1, 'S')>")
chamada antiga: assertEquals((short) value2, Utils.castToPrimitive(value2, "Ljava/lang/Short;"))
nova chamada: assertEquals((short) value2, Utils.castToPrimitive(value2, "Ljava/lang/Short;"), "Era esperado valores iguais, mas  (short) value2 é diferente de " + result306 + " <Utils.castToPrimitive(value2, 'Ljava/lang/Short;')>")
chamada antiga: assertEquals((byte) value1, Utils.castToPrimitive(Byte.valueOf((byte) value1), "B"))
nova chamada: assertEquals((byte) value1, Utils.castToPrimitive(Byte.valueOf((byte) value1), "B"), "Era esperado valores iguais, mas  (byte) value1 é diferente de " + result307 + " <Utils.castToPrimitive(Byte.valueOf((byte) value1), 'B')>")
chamada antiga: assertEquals((byte) value2, Utils.castToPrimitive(Byte.valueOf((byte) value2), "Ljava/lang/Byte;"))
nova chamada: assertEquals((byte) value2, Utils.castToPrimitive(Byte.valueOf((byte) value2), "Ljava/lang/Byte;"), "Era esperado valores iguais, mas  (byte) value2 é diferente de " + result308 + " <Utils.castToPrimitive(Byte.valueOf((byte) value2), 'Ljava/lang/Byte;')>")
chamada antiga: assertEquals((double) value1, Utils.castToPrimitive(Double.valueOf(value1), "D"))
nova chamada: assertEquals((double) value1, Utils.castToPrimitive(Double.valueOf(value1), "D"), "Era esperado valores iguais, mas  (double) value1 é diferente de " + result309 + " <Utils.castToPrimitive(Double.valueOf(value1), 'D')>")
chamada antiga: assertEquals((double) value2, Utils.castToPrimitive(Double.valueOf(value2), "Ljava/lang/Double;"))
nova chamada: assertEquals((double) value2, Utils.castToPrimitive(Double.valueOf(value2), "Ljava/lang/Double;"), "Era esperado valores iguais, mas  (double) value2 é diferente de " + result310 + " <Utils.castToPrimitive(Double.valueOf(value2), 'Ljava/lang/Double;')>")
chamada antiga: assertEquals((float) value1, Utils.castToPrimitive(Float.valueOf(value1), "F"))
nova chamada: assertEquals((float) value1, Utils.castToPrimitive(Float.valueOf(value1), "F"), "Era esperado valores iguais, mas  (float) value1 é diferente de " + result311 + " <Utils.castToPrimitive(Float.valueOf(value1), 'F')>")
chamada antiga: assertEquals((float) value2, Utils.castToPrimitive(Float.valueOf(value2), "Ljava/lang/Float;"))
nova chamada: assertEquals((float) value2, Utils.castToPrimitive(Float.valueOf(value2), "Ljava/lang/Float;"), "Era esperado valores iguais, mas  (float) value2 é diferente de " + result312 + " <Utils.castToPrimitive(Float.valueOf(value2), 'Ljava/lang/Float;')>")
chamada antiga: assertEquals(value1, Utils.castToPrimitive(value1, "I"))
nova chamada: assertEquals(value1, Utils.castToPrimitive(value1, "I"), "Era esperado valores iguais, mas  value1 é diferente de " + result313 + " <Utils.castToPrimitive(value1, 'I')>")
chamada antiga: assertEquals(value2, Utils.castToPrimitive(value2, "Ljava/lang/Integer;"))
nova chamada: assertEquals(value2, Utils.castToPrimitive(value2, "Ljava/lang/Integer;"), "Era esperado valores iguais, mas  value2 é diferente de " + result314 + " <Utils.castToPrimitive(value2, 'Ljava/lang/Integer;')>")
chamada antiga: assertEquals((long) value1, Utils.castToPrimitive(Long.valueOf(value1), "J"))
nova chamada: assertEquals((long) value1, Utils.castToPrimitive(Long.valueOf(value1), "J"), "Era esperado valores iguais, mas  (long) value1 é diferente de " + result315 + " <Utils.castToPrimitive(Long.valueOf(value1), 'J')>")
chamada antiga: assertEquals((long) value2, Utils.castToPrimitive(Long.valueOf(value2), "Ljava/lang/Long;"))
nova chamada: assertEquals((long) value2, Utils.castToPrimitive(Long.valueOf(value2), "Ljava/lang/Long;"), "Era esperado valores iguais, mas  (long) value2 é diferente de " + result316 + " <Utils.castToPrimitive(Long.valueOf(value2), 'Ljava/lang/Long;')>")
chamada antiga: assertEquals((short) value1, Utils.castToPrimitive(Short.valueOf((short) value1), "S"))
nova chamada: assertEquals((short) value1, Utils.castToPrimitive(Short.valueOf((short) value1), "S"), "Era esperado valores iguais, mas  (short) value1 é diferente de " + result317 + " <Utils.castToPrimitive(Short.valueOf((short) value1), 'S')>")
chamada antiga: assertEquals((short) value2, Utils.castToPrimitive(Short.valueOf((short) value2), "Ljava/lang/Short;"))
nova chamada: assertEquals((short) value2, Utils.castToPrimitive(Short.valueOf((short) value2), "Ljava/lang/Short;"), "Era esperado valores iguais, mas  (short) value2 é diferente de " + result318 + " <Utils.castToPrimitive(Short.valueOf((short) value2), 'Ljava/lang/Short;')>")
chamada antiga: assertEquals((char) value1, Utils.castToPrimitive(value1, "C"))
nova chamada: assertEquals((char) value1, Utils.castToPrimitive(value1, "C"), "Era esperado valores iguais, mas  (char) value1 é diferente de " + result319 + " <Utils.castToPrimitive(value1, 'C')>")
chamada antiga: assertEquals((char) value2, Utils.castToPrimitive(value2, "Ljava/lang/Character;"))
nova chamada: assertEquals((char) value2, Utils.castToPrimitive(value2, "Ljava/lang/Character;"), "Era esperado valores iguais, mas  (char) value2 é diferente de " + result320 + " <Utils.castToPrimitive(value2, 'Ljava/lang/Character;')>")
chamada antiga: assertEquals(true, Utils.castToPrimitive(1, "Z"))
nova chamada: assertEquals(true, Utils.castToPrimitive(1, "Z"), "Era esperado valores iguais, mas  true é diferente de " + result321 + " <Utils.castToPrimitive(1, 'Z')>")
chamada antiga: assertEquals(false, Utils.castToPrimitive(0, "Ljava/lang/Boolean;"))
nova chamada: assertEquals(false, Utils.castToPrimitive(0, "Ljava/lang/Boolean;"), "Era esperado valores iguais, mas  false é diferente de " + result322 + " <Utils.castToPrimitive(0, 'Ljava/lang/Boolean;')>")
Total asserts: 444
Asserts sem descrição: 418
Asserts com descrição: 26
Assertion Roulette: 318

Após do refactor: 
Total asserts: 444
Asserts sem descrição: 39
Asserts com descrição: 405
Assertion Roulette: 29
