Antes do refactor: 


Projeto: /home/vitor-otto/opensource/disruptor-4.0.0.RC1

Total asserts: 290
Asserts sem descrição: 218
Asserts com descrição: 72
Assertion Roulette: 148

Após o refactor: 


Projeto: /home/vitor-otto/opensource/disruptor-4.0.0.RC1

chamada antiga: assertNotNull(eventHandlerGroup)
nova chamada: assertNotNull(eventHandlerGroup, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertSame(testException, actualException)
nova chamada: assertSame(testException, actualException, "Era esperado objetos iguais, mas  testException é diferente de " + " actualException")
chamada antiga: assertSame(testException, actualException)
nova chamada: assertSame(testException, actualException, "Era esperado objetos iguais, mas  testException é diferente de " + " actualException")
chamada antiga: assertSame(testException, actualException)
nova chamada: assertSame(testException, actualException, "Era esperado objetos iguais, mas  testException é diferente de " + " actualException")
chamada antiga: assertSame(testException, actualException)
nova chamada: assertSame(testException, actualException, "Era esperado objetos iguais, mas  testException é diferente de " + " actualException")
chamada antiga: assertEquals(0, sequencer.next())
nova chamada: assertEquals(0, sequencer.next(), "Era esperado valores iguais, mas  0 é diferente de " + result0 + " <sequencer.next()>")
chamada antiga: assertEquals(3, sequencer.next(4))
nova chamada: assertEquals(3, sequencer.next(4), "Era esperado valores iguais, mas  3 é diferente de " + result1 + " <sequencer.next(4)>")
chamada antiga: assertTrue(sequencer.hasAvailableCapacity(1))
nova chamada: assertTrue(sequencer.hasAvailableCapacity(1), "Era esperado verdadeiro, mas " + result2 + " <sequencer.hasAvailableCapacity(1)> é falso")
chamada antiga: assertTrue(sequencer.hasAvailableCapacity(BUFFER_SIZE))
nova chamada: assertTrue(sequencer.hasAvailableCapacity(BUFFER_SIZE), "Era esperado verdadeiro, mas " + result3 + " <sequencer.hasAvailableCapacity(BUFFER_SIZE)> é falso")
chamada antiga: assertFalse(sequencer.hasAvailableCapacity(BUFFER_SIZE + 1))
nova chamada: assertFalse(sequencer.hasAvailableCapacity(BUFFER_SIZE + 1), "Era esperado falso, mas " + result4 + " <sequencer.hasAvailableCapacity(BUFFER_SIZE + 1)> é verdadeiro ")
chamada antiga: assertTrue(sequencer.hasAvailableCapacity(BUFFER_SIZE - 1))
nova chamada: assertTrue(sequencer.hasAvailableCapacity(BUFFER_SIZE - 1), "Era esperado verdadeiro, mas " + result5 + " <sequencer.hasAvailableCapacity(BUFFER_SIZE - 1)> é falso")
chamada antiga: assertFalse(sequencer.hasAvailableCapacity(BUFFER_SIZE))
nova chamada: assertFalse(sequencer.hasAvailableCapacity(BUFFER_SIZE), "Era esperado falso, mas " + result6 + " <sequencer.hasAvailableCapacity(BUFFER_SIZE)> é verdadeiro ")
chamada antiga: assertFalse(sequencer.hasAvailableCapacity(1))
nova chamada: assertFalse(sequencer.hasAvailableCapacity(1), "Era esperado falso, mas " + result7 + " <sequencer.hasAvailableCapacity(1)> é verdadeiro ")
chamada antiga: assertFalse(sequencer.isAvailable(seq))
nova chamada: assertFalse(sequencer.isAvailable(seq), "Era esperado falso, mas " + result8 + " <sequencer.isAvailable(seq)> é verdadeiro ")
chamada antiga: assertTrue(sequencer.isAvailable(seq))
nova chamada: assertTrue(sequencer.isAvailable(seq), "Era esperado verdadeiro, mas " + result9 + " <sequencer.isAvailable(seq)> é falso")
chamada antiga: assertTrue(sequencer.isAvailable(seq))
nova chamada: assertTrue(sequencer.isAvailable(seq), "Era esperado verdadeiro, mas " + result10 + " <sequencer.isAvailable(seq)> é falso")
chamada antiga: assertFalse(sequencer.isAvailable(seq))
nova chamada: assertFalse(sequencer.isAvailable(seq), "Era esperado falso, mas " + result11 + " <sequencer.isAvailable(seq)> é verdadeiro ")
chamada antiga: assertTrue(eventLatch.await(2, TimeUnit.SECONDS))
nova chamada: assertTrue(eventLatch.await(2, TimeUnit.SECONDS), "Era esperado verdadeiro, mas " + result12 + " <eventLatch.await(2, TimeUnit.SECONDS)> é falso")
chamada antiga: assertTrue(exceptionLatch.await(2, TimeUnit.SECONDS))
nova chamada: assertTrue(exceptionLatch.await(2, TimeUnit.SECONDS), "Era esperado verdadeiro, mas " + result13 + " <exceptionLatch.await(2, TimeUnit.SECONDS)> é falso")
chamada antiga: assertEquals(Arrays.asList(3L, 2L, 1L), batchSizes)
nova chamada: assertEquals(Arrays.asList(3L, 2L, 1L), batchSizes, "Era esperado valores iguais, mas " + result14 + " <Arrays.asList(3L, 2L, 1L)> é diferente de " + " batchSizes")
chamada antiga: assertTrue(h1.awaitStart(2, TimeUnit.SECONDS))
nova chamada: assertTrue(h1.awaitStart(2, TimeUnit.SECONDS), "Era esperado verdadeiro, mas " + result15 + " <h1.awaitStart(2, TimeUnit.SECONDS)> é falso")
chamada antiga: assertTrue(h1.awaitStop(2, TimeUnit.SECONDS))
nova chamada: assertTrue(h1.awaitStop(2, TimeUnit.SECONDS), "Era esperado verdadeiro, mas " + result16 + " <h1.awaitStop(2, TimeUnit.SECONDS)> é falso")
chamada antiga: assertTrue(timeWaiting >= theTimeout)
nova chamada: assertTrue(timeWaiting >= theTimeout, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(10, sequence.addAndGet(10))
nova chamada: assertEquals(10, sequence.addAndGet(10), "Era esperado valores iguais, mas  10 é diferente de " + result17 + " <sequence.addAndGet(10)>")
chamada antiga: assertEquals(10, sequence.get())
nova chamada: assertEquals(10, sequence.get(), "Era esperado valores iguais, mas  10 é diferente de " + result18 + " <sequence.get()>")
chamada antiga: assertEquals(1, sequence.incrementAndGet())
nova chamada: assertEquals(1, sequence.incrementAndGet(), "Era esperado valores iguais, mas  1 é diferente de " + result19 + " <sequence.incrementAndGet()>")
chamada antiga: assertEquals(1, sequence.get())
nova chamada: assertEquals(1, sequence.get(), "Era esperado valores iguais, mas  1 é diferente de " + result20 + " <sequence.get()>")
chamada antiga: assertEquals(0, sequence.getAndAdd(1))
nova chamada: assertEquals(0, sequence.getAndAdd(1), "Era esperado valores iguais, mas  0 é diferente de " + result21 + " <sequence.getAndAdd(1)>")
chamada antiga: assertEquals(1, sequence.get())
nova chamada: assertEquals(1, sequence.get(), "Era esperado valores iguais, mas  1 é diferente de " + result22 + " <sequence.get()>")
chamada antiga: assertEquals(-1L, batchEventProcessor.getSequence().get())
nova chamada: assertEquals(-1L, batchEventProcessor.getSequence().get(), "Era esperado valores iguais, mas  -1L é diferente de " + result23 + " <batchEventProcessor.getSequence().get()>")
chamada antiga: assertEquals(0L, batchEventProcessor.getSequence().get())
nova chamada: assertEquals(0L, batchEventProcessor.getSequence().get(), "Era esperado valores iguais, mas  0L é diferente de " + result24 + " <batchEventProcessor.getSequence().get()>")
chamada antiga: assertEquals(0L, batchEventProcessor.getSequence().get())
nova chamada: assertEquals(0L, batchEventProcessor.getSequence().get(), "Era esperado valores iguais, mas  0L é diferente de " + result25 + " <batchEventProcessor.getSequence().get()>")
chamada antiga: assertEquals(TEST_VALUE, event.getTestString())
nova chamada: assertEquals(TEST_VALUE, event.getTestString(), "Era esperado valores iguais, mas  TEST_VALUE é diferente de " + result26 + " <event.getTestString()>")
chamada antiga: assertEquals(SingleProducerSequencer.INITIAL_CURSOR_VALUE, ringBuffer.getCursor())
nova chamada: assertEquals(SingleProducerSequencer.INITIAL_CURSOR_VALUE, ringBuffer.getCursor(), "Era esperado valores iguais, mas  SingleProducerSequencer.INITIAL_CURSOR_VALUE é diferente de " + result27 + " <ringBuffer.getCursor()>")
chamada antiga: assertEquals(0, sequence)
nova chamada: assertEquals(0, sequence, "Era esperado valores iguais, mas  0 é diferente de " + " sequence")
chamada antiga: assertEquals(expectedEvent, event)
nova chamada: assertEquals(expectedEvent, event, "Era esperado valores iguais, mas  expectedEvent é diferente de " + " event")
chamada antiga: assertEquals(0L, ringBuffer.getCursor())
nova chamada: assertEquals(0L, ringBuffer.getCursor(), "Era esperado valores iguais, mas  0L é diferente de " + result28 + " <ringBuffer.getCursor()>")
chamada antiga: assertEquals(expectedEvent, messages.get().get(0))
nova chamada: assertEquals(expectedEvent, messages.get().get(0), "Era esperado valores iguais, mas  expectedEvent é diferente de " + result29 + " <messages.get().get(0)>")
chamada antiga: assertEquals(expectedSequence, available)
nova chamada: assertEquals(expectedSequence, available, "Era esperado valores iguais, mas  expectedSequence é diferente de " + " available")
chamada antiga: assertEquals(expectedSequence, available)
nova chamada: assertEquals(expectedSequence, available, "Era esperado valores iguais, mas  expectedSequence é diferente de " + " available")
chamada antiga: assertFalse(ringBuffer.tryPublishEvent(StubEvent.TRANSLATOR, 3, "3"))
nova chamada: assertFalse(ringBuffer.tryPublishEvent(StubEvent.TRANSLATOR, 3, "3"), "Era esperado falso, mas " + result30 + " <ringBuffer.tryPublishEvent(StubEvent.TRANSLATOR, 3, '3')> é verdadeiro ")
chamada antiga: assertFalse(publisherComplete.get())
nova chamada: assertFalse(publisherComplete.get(), "Era esperado falso, mas " + result31 + " <publisherComplete.get()> é verdadeiro ")
chamada antiga: assertTrue(publisherComplete.get())
nova chamada: assertTrue(publisherComplete.get(), "Era esperado verdadeiro, mas " + result32 + " <publisherComplete.get()> é falso")
chamada antiga: assertTrue(ringBuffer.tryPublishEvents(translators))
nova chamada: assertTrue(ringBuffer.tryPublishEvents(translators), "Era esperado verdadeiro, mas " + result33 + " <ringBuffer.tryPublishEvents(translators)> é falso")
chamada antiga: assertTrue(ringBuffer.tryPublishEvents(translators, 0, 1))
nova chamada: assertTrue(ringBuffer.tryPublishEvents(translators, 0, 1), "Era esperado verdadeiro, mas " + result34 + " <ringBuffer.tryPublishEvents(translators, 0, 1)> é falso")
chamada antiga: assertTrue(ringBuffer.tryPublishEvents(translators, 1, 2))
nova chamada: assertTrue(ringBuffer.tryPublishEvents(translators, 1, 2), "Era esperado verdadeiro, mas " + result35 + " <ringBuffer.tryPublishEvents(translators, 1, 2)> é falso")
chamada antiga: assertTrue(ringBuffer.tryPublishEvents(translator, new String[] { "Foo", "Foo" }))
nova chamada: assertTrue(ringBuffer.tryPublishEvents(translator, new String[] { "Foo", "Foo" }), "Era esperado verdadeiro, mas " + result36 + " <ringBuffer.tryPublishEvents(translator, new String[] { 'Foo', 'Foo' })> é falso")
chamada antiga: assertTrue(ringBuffer.tryPublishEvents(translator, 0, 1, new String[] { "Foo", "Foo" }))
nova chamada: assertTrue(ringBuffer.tryPublishEvents(translator, 0, 1, new String[] { "Foo", "Foo" }), "Era esperado verdadeiro, mas " + result37 + " <ringBuffer.tryPublishEvents(translator, 0, 1, new String[] { 'Foo', 'Foo' })> é falso")
chamada antiga: assertTrue(ringBuffer.tryPublishEvents(translator, 1, 2, new String[] { "Foo", "Foo", "Foo" }))
nova chamada: assertTrue(ringBuffer.tryPublishEvents(translator, 1, 2, new String[] { "Foo", "Foo", "Foo" }), "Era esperado verdadeiro, mas " + result38 + " <ringBuffer.tryPublishEvents(translator, 1, 2, new String[] { 'Foo', 'Foo', 'Foo' })> é falso")
chamada antiga: assertTrue(ringBuffer.tryPublishEvents(translator, 1, 2, new String[] { "Foo3", "Foo4", "Foo5" }, new String[] { "Bar3", "Bar4", "Bar5" }, new String[] { "Baz3", "Baz4", "Baz5" }))
nova chamada: assertTrue(ringBuffer.tryPublishEvents(translator, 1, 2, new String[] { "Foo3", "Foo4", "Foo5" }, new String[] { "Bar3", "Bar4", "Bar5" }, new String[] { "Baz3", "Baz4", "Baz5" }), "Era esperado verdadeiro, mas " + result39 + " <ringBuffer.tryPublishEvents(translator, 1, 2, new String[] { 'Foo3', 'Foo4', 'Foo5' }, new String[] { 'Bar3', 'Bar4', 'Bar5' }, new String[] { 'Baz3', 'Baz4', 'Baz5' })> é falso")
chamada antiga: assertTrue(ringBuffer.tryPublishEvents(translator, new String[] { "Foo", "Bar", "Baz", "Bam" }, new String[] { "Foo", "Bar", "Baz", "Bam" }))
nova chamada: assertTrue(ringBuffer.tryPublishEvents(translator, new String[] { "Foo", "Bar", "Baz", "Bam" }, new String[] { "Foo", "Bar", "Baz", "Bam" }), "Era esperado verdadeiro, mas " + result40 + " <ringBuffer.tryPublishEvents(translator, new String[] { 'Foo', 'Bar', 'Baz', 'Bam' }, new String[] { 'Foo', 'Bar', 'Baz', 'Bam' })> é falso")
chamada antiga: assertTrue(ringBuffer.tryPublishEvents(translator, 0, 1, new String[] { "Foo", "Bar", "Baz", "Bam" }, new String[] { "Foo", "Bar", "Baz", "Bam" }))
nova chamada: assertTrue(ringBuffer.tryPublishEvents(translator, 0, 1, new String[] { "Foo", "Bar", "Baz", "Bam" }, new String[] { "Foo", "Bar", "Baz", "Bam" }), "Era esperado verdadeiro, mas " + result41 + " <ringBuffer.tryPublishEvents(translator, 0, 1, new String[] { 'Foo', 'Bar', 'Baz', 'Bam' }, new String[] { 'Foo', 'Bar', 'Baz', 'Bam' })> é falso")
chamada antiga: assertTrue(ringBuffer.tryPublishEvents(translator, 1, 2, new String[] { "Foo3", "Bar3", "Baz3", "Bam3" }, new String[] { "Foo4", "Bar4", "Baz4", "Bam4" }, new String[] { "Foo5", "Bar5", "Baz5", "Bam5" }))
nova chamada: assertTrue(ringBuffer.tryPublishEvents(translator, 1, 2, new String[] { "Foo3", "Bar3", "Baz3", "Bam3" }, new String[] { "Foo4", "Bar4", "Baz4", "Bam4" }, new String[] { "Foo5", "Bar5", "Baz5", "Bam5" }), "Era esperado verdadeiro, mas " + result42 + " <ringBuffer.tryPublishEvents(translator, 1, 2, new String[] { 'Foo3', 'Bar3', 'Baz3', 'Bam3' }, new String[] { 'Foo4', 'Bar4', 'Baz4', 'Bam4' }, new String[] { 'Foo5', 'Bar5', 'Baz5', 'Bam5' })> é falso")
chamada antiga: assertTrue(ringBuffer.removeGatingSequence(sequenceThree))
nova chamada: assertTrue(ringBuffer.removeGatingSequence(sequenceThree), "Era esperado verdadeiro, mas " + result43 + " <ringBuffer.removeGatingSequence(sequenceThree)> é falso")
chamada antiga: assertEquals(Long.MAX_VALUE, sequenceGroup.get())
nova chamada: assertEquals(Long.MAX_VALUE, sequenceGroup.get(), "Era esperado valores iguais, mas  Long.MAX_VALUE é diferente de " + result44 + " <sequenceGroup.get()>")
chamada antiga: assertEquals(sequence.get(), sequenceGroup.get())
nova chamada: assertEquals(sequence.get(), sequenceGroup.get(), "Era esperado valores iguais, mas " + result45 + " <sequence.get()> é diferente de " + result46 + " <sequenceGroup.get()>")
chamada antiga: assertEquals(sequenceThree.get(), sequenceGroup.get())
nova chamada: assertEquals(sequenceThree.get(), sequenceGroup.get(), "Era esperado valores iguais, mas " + result47 + " <sequenceThree.get()> é diferente de " + result48 + " <sequenceGroup.get()>")
chamada antiga: assertEquals(3, sequenceGroup.size())
nova chamada: assertEquals(3, sequenceGroup.size(), "Era esperado valores iguais, mas  3 é diferente de " + result49 + " <sequenceGroup.size()>")
chamada antiga: assertEquals(sequenceThree.get(), sequenceGroup.get())
nova chamada: assertEquals(sequenceThree.get(), sequenceGroup.get(), "Era esperado valores iguais, mas " + result50 + " <sequenceThree.get()> é diferente de " + result51 + " <sequenceGroup.get()>")
chamada antiga: assertTrue(sequenceGroup.remove(sequenceThree))
nova chamada: assertTrue(sequenceGroup.remove(sequenceThree), "Era esperado verdadeiro, mas " + result52 + " <sequenceGroup.remove(sequenceThree)> é falso")
chamada antiga: assertEquals(sequenceSeven.get(), sequenceGroup.get())
nova chamada: assertEquals(sequenceSeven.get(), sequenceGroup.get(), "Era esperado valores iguais, mas " + result53 + " <sequenceSeven.get()> é diferente de " + result54 + " <sequenceGroup.get()>")
chamada antiga: assertEquals(1, sequenceGroup.size())
nova chamada: assertEquals(1, sequenceGroup.size(), "Era esperado valores iguais, mas  1 é diferente de " + result55 + " <sequenceGroup.size()>")
chamada antiga: assertEquals(sequenceThree.get(), sequenceGroup.get())
nova chamada: assertEquals(sequenceThree.get(), sequenceGroup.get(), "Era esperado valores iguais, mas " + result56 + " <sequenceThree.get()> é diferente de " + result57 + " <sequenceGroup.get()>")
chamada antiga: assertTrue(sequenceGroup.remove(sequenceThree))
nova chamada: assertTrue(sequenceGroup.remove(sequenceThree), "Era esperado verdadeiro, mas " + result58 + " <sequenceGroup.remove(sequenceThree)> é falso")
chamada antiga: assertEquals(sequenceSeven.get(), sequenceGroup.get())
nova chamada: assertEquals(sequenceSeven.get(), sequenceGroup.get(), "Era esperado valores iguais, mas " + result59 + " <sequenceSeven.get()> é diferente de " + result60 + " <sequenceGroup.get()>")
chamada antiga: assertEquals(1, sequenceGroup.size())
nova chamada: assertEquals(1, sequenceGroup.size(), "Era esperado valores iguais, mas  1 é diferente de " + result61 + " <sequenceGroup.size()>")
chamada antiga: assertEquals(expectedSequence, sequenceThree.get())
nova chamada: assertEquals(expectedSequence, sequenceThree.get(), "Era esperado valores iguais, mas  expectedSequence é diferente de " + result62 + " <sequenceThree.get()>")
chamada antiga: assertEquals(expectedSequence, sequenceSeven.get())
nova chamada: assertEquals(expectedSequence, sequenceSeven.get(), "Era esperado valores iguais, mas  expectedSequence é diferente de " + result63 + " <sequenceSeven.get()>")
chamada antiga: assertTrue(completedWorkSequence >= expectedWorkSequence)
nova chamada: assertTrue(completedWorkSequence >= expectedWorkSequence, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(completedWorkSequence >= expectedWorkSequence)
nova chamada: assertTrue(completedWorkSequence >= expectedWorkSequence, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(completedWorkSequence >= expectedWorkSequence)
nova chamada: assertTrue(completedWorkSequence >= expectedWorkSequence, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertFalse(sequenceBarrier.isAlerted())
nova chamada: assertFalse(sequenceBarrier.isAlerted(), "Era esperado falso, mas " + result64 + " <sequenceBarrier.isAlerted()> é verdadeiro ")
chamada antiga: assertTrue(sequenceBarrier.isAlerted())
nova chamada: assertTrue(sequenceBarrier.isAlerted(), "Era esperado verdadeiro, mas " + result65 + " <sequenceBarrier.isAlerted()> é falso")
chamada antiga: assertFalse(sequenceBarrier.isAlerted())
nova chamada: assertFalse(sequenceBarrier.isAlerted(), "Era esperado falso, mas " + result66 + " <sequenceBarrier.isAlerted()> é verdadeiro ")
chamada antiga: assertTrue(timeWaiting >= theTimeout)
nova chamada: assertTrue(timeWaiting >= theTimeout, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("not rewindable", exceptionHandled.get().getMessage())
nova chamada: assertEquals("not rewindable", exceptionHandled.get().getMessage(), "Era esperado valores iguais, mas  'not rewindable' é diferente de " + result67 + " <exceptionHandled.get().getMessage()>")
chamada antiga: assertEquals(3, rewindPauseStrategy.count)
nova chamada: assertEquals(3, rewindPauseStrategy.count, "Era esperado valores iguais, mas  3 é diferente de " + " rewindPauseStrategy.count")
chamada antiga: assertEquals(0, rewindPauseStrategy.count)
nova chamada: assertEquals(0, rewindPauseStrategy.count, "Era esperado valores iguais, mas  0 é diferente de " + " rewindPauseStrategy.count")
chamada antiga: assertEquals(1024, powerOfTwo)
nova chamada: assertEquals(1024, powerOfTwo, "Era esperado valores iguais, mas  1024 é diferente de " + " powerOfTwo")
chamada antiga: assertEquals(1024, powerOfTwo)
nova chamada: assertEquals(1024, powerOfTwo, "Era esperado valores iguais, mas  1024 é diferente de " + " powerOfTwo")
chamada antiga: assertEquals(3L, Util.getMinimumSequence(sequences))
nova chamada: assertEquals(3L, Util.getMinimumSequence(sequences), "Era esperado valores iguais, mas  3L é diferente de " + result68 + " <Util.getMinimumSequence(sequences)>")
chamada antiga: assertEquals(Long.MAX_VALUE, Util.getMinimumSequence(sequences))
nova chamada: assertEquals(Long.MAX_VALUE, Util.getMinimumSequence(sequences), "Era esperado valores iguais, mas  Long.MAX_VALUE é diferente de " + result69 + " <Util.getMinimumSequence(sequences)>")
chamada antiga: assertEquals(causeException, ex.getCause())
nova chamada: assertEquals(causeException, ex.getCause(), "Era esperado valores iguais, mas  causeException é diferente de " + result70 + " <ex.getCause()>")
Total asserts: 290
Asserts sem descrição: 218
Asserts com descrição: 72
Assertion Roulette: 148
