
Projeto: /home/vitor-otto/opensource/RoaringBitmap-0.9.39

Antes do refactor: 
chamada antiga: assertFalse(RoaringBitmap.bitmapOf().stream().iterator().hasNext())
nova chamada: assertFalse(RoaringBitmap.bitmapOf().stream().iterator().hasNext(), "Era esperado falso, mas " + result0 + " <RoaringBitmap.bitmapOf().stream().iterator().hasNext()> é verdadeiro ")
chamada antiga: assertFalse(RoaringBitmap.bitmapOf().reverseStream().iterator().hasNext())
nova chamada: assertFalse(RoaringBitmap.bitmapOf().reverseStream().iterator().hasNext(), "Era esperado falso, mas " + result1 + " <RoaringBitmap.bitmapOf().reverseStream().iterator().hasNext()> é verdadeiro ")
chamada antiga: assertEquals(bitmap.getCardinality(), iteratorCopy.size())
nova chamada: assertEquals(bitmap.getCardinality(), iteratorCopy.size(), "Era esperado valores iguais, mas " + result2 + " <bitmap.getCardinality()> é diferente de " + result3 + " <iteratorCopy.size()>")
chamada antiga: assertEquals(bitmap.getCardinality(), intIteratorCopy.size())
nova chamada: assertEquals(bitmap.getCardinality(), intIteratorCopy.size(), "Era esperado valores iguais, mas " + result4 + " <bitmap.getCardinality()> é diferente de " + result5 + " <intIteratorCopy.size()>")
chamada antiga: assertEquals(bitmap.getCardinality(), reverseIntIteratorCopy.size())
nova chamada: assertEquals(bitmap.getCardinality(), reverseIntIteratorCopy.size(), "Era esperado valores iguais, mas " + result6 + " <bitmap.getCardinality()> é diferente de " + result7 + " <reverseIntIteratorCopy.size()>")
chamada antiga: assertEquals(Ints.asList(data), iteratorCopy)
nova chamada: assertEquals(Ints.asList(data), iteratorCopy, "Era esperado valores iguais, mas " + result8 + " <Ints.asList(data)> é diferente de " + " iteratorCopy")
chamada antiga: assertEquals(Ints.asList(data), intIteratorCopy)
nova chamada: assertEquals(Ints.asList(data), intIteratorCopy, "Era esperado valores iguais, mas " + result9 + " <Ints.asList(data)> é diferente de " + " intIteratorCopy")
chamada antiga: assertEquals(Lists.reverse(Ints.asList(data)), reverseIntIteratorCopy)
nova chamada: assertEquals(Lists.reverse(Ints.asList(data)), reverseIntIteratorCopy, "Era esperado valores iguais, mas " + result10 + " <Lists.reverse(Ints.asList(data))> é diferente de " + " reverseIntIteratorCopy")
chamada antiga: assertEquals(ImmutableList.of(1, 2, 3), iteratorCopy)
nova chamada: assertEquals(ImmutableList.of(1, 2, 3), iteratorCopy, "Era esperado valores iguais, mas " + result11 + " <ImmutableList.of(1, 2, 3)> é diferente de " + " iteratorCopy")
chamada antiga: assertEquals(ImmutableList.of(1, 2, 3), intIteratorCopy)
nova chamada: assertEquals(ImmutableList.of(1, 2, 3), intIteratorCopy, "Era esperado valores iguais, mas " + result12 + " <ImmutableList.of(1, 2, 3)> é diferente de " + " intIteratorCopy")
chamada antiga: assertEquals(ImmutableList.of(3, 2, 1), reverseIntIteratorCopy)
nova chamada: assertEquals(ImmutableList.of(3, 2, 1), reverseIntIteratorCopy, "Era esperado valores iguais, mas " + result13 + " <ImmutableList.of(3, 2, 1)> é diferente de " + " reverseIntIteratorCopy")
chamada antiga: assertEquals(bitmap.last(), bitmap.reverseStream().max().getAsInt())
nova chamada: assertEquals(bitmap.last(), bitmap.reverseStream().max().getAsInt(), "Era esperado valores iguais, mas " + result14 + " <bitmap.last()> é diferente de " + result15 + " <bitmap.reverseStream().max().getAsInt()>")
chamada antiga: assertEquals(bitmap.last(), bitmap.stream().max().getAsInt())
nova chamada: assertEquals(bitmap.last(), bitmap.stream().max().getAsInt(), "Era esperado valores iguais, mas " + result16 + " <bitmap.last()> é diferente de " + result17 + " <bitmap.stream().max().getAsInt()>")
chamada antiga: Assertions.assertEquals(total, source.size())
nova chamada: assertEquals(total, source.size(), "Era esperado valores iguais, mas  total é diferente de " + result18 + " <source.size()>")
chamada antiga: assertEquals(rb1, rb2)
nova chamada: assertEquals(rb1, rb2, "Era esperado valores iguais, mas  rb1 é diferente de " + " rb2")
chamada antiga: assertNotEquals(rb1, rb2)
nova chamada: assertNotEquals(rb1, rb2, "Era esperado valores diferentes, mas  rb1 é igual a " + " rb2")
chamada antiga: assertEquals(rb1, rb2)
nova chamada: assertEquals(rb1, rb2, "Era esperado valores iguais, mas  rb1 é diferente de " + " rb2")
chamada antiga: Assertions.assertEquals(total, i)
nova chamada: assertEquals(total, i, "Era esperado valores iguais, mas  total é diferente de " + " i")
chamada antiga: Assertions.assertEquals(source.size(), i)
nova chamada: assertEquals(source.size(), i, "Era esperado valores iguais, mas " + result19 + " <source.size()> é diferente de " + " i")
chamada antiga: Assertions.assertEquals(select2, deserStreamOne.select(2))
nova chamada: assertEquals(select2, deserStreamOne.select(2), "Era esperado valores iguais, mas  select2 é diferente de " + result20 + " <deserStreamOne.select(2)>")
chamada antiga: Assertions.assertEquals(select2, deserBBOne.select(2))
nova chamada: assertEquals(select2, deserBBOne.select(2), "Era esperado valores iguais, mas  select2 é diferente de " + result21 + " <deserBBOne.select(2)>")
chamada antiga: assertFalse(map.getLongIterator().hasNext())
nova chamada: assertFalse(map.getLongIterator().hasNext(), "Era esperado falso, mas " + result22 + " <map.getLongIterator().hasNext()> é verdadeiro ")
chamada antiga: assertEquals(0, map.getLongCardinality())
nova chamada: assertEquals(0, map.getLongCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result23 + " <map.getLongCardinality()>")
chamada antiga: assertTrue(map.isEmpty())
nova chamada: assertTrue(map.isEmpty(), "Era esperado verdadeiro, mas " + result24 + " <map.isEmpty()> é falso")
chamada antiga: assertFalse(map.contains(0))
nova chamada: assertFalse(map.contains(0), "Era esperado falso, mas " + result25 + " <map.contains(0)> é verdadeiro ")
chamada antiga: assertEquals(0, map.rankLong(Long.MIN_VALUE))
nova chamada: assertEquals(0, map.rankLong(Long.MIN_VALUE), "Era esperado valores iguais, mas  0 é diferente de " + result26 + " <map.rankLong(Long.MIN_VALUE)>")
chamada antiga: assertEquals(0, map.rankLong(Long.MIN_VALUE + 1))
nova chamada: assertEquals(0, map.rankLong(Long.MIN_VALUE + 1), "Era esperado valores iguais, mas  0 é diferente de " + result27 + " <map.rankLong(Long.MIN_VALUE + 1)>")
chamada antiga: assertEquals(0, map.rankLong(-1))
nova chamada: assertEquals(0, map.rankLong(-1), "Era esperado valores iguais, mas  0 é diferente de " + result28 + " <map.rankLong(-1)>")
chamada antiga: assertEquals(0, map.rankLong(0))
nova chamada: assertEquals(0, map.rankLong(0), "Era esperado valores iguais, mas  0 é diferente de " + result29 + " <map.rankLong(0)>")
chamada antiga: assertEquals(0, map.rankLong(1))
nova chamada: assertEquals(0, map.rankLong(1), "Era esperado valores iguais, mas  0 é diferente de " + result30 + " <map.rankLong(1)>")
chamada antiga: assertEquals(0, map.rankLong(Long.MAX_VALUE - 1))
nova chamada: assertEquals(0, map.rankLong(Long.MAX_VALUE - 1), "Era esperado valores iguais, mas  0 é diferente de " + result31 + " <map.rankLong(Long.MAX_VALUE - 1)>")
chamada antiga: assertEquals(0, map.rankLong(Long.MAX_VALUE))
nova chamada: assertEquals(0, map.rankLong(Long.MAX_VALUE), "Era esperado valores iguais, mas  0 é diferente de " + result32 + " <map.rankLong(Long.MAX_VALUE)>")
chamada antiga: assertTrue(iterator.hasNext())
nova chamada: assertTrue(iterator.hasNext(), "Era esperado verdadeiro, mas " + result33 + " <iterator.hasNext()> é falso")
chamada antiga: assertEquals(0, iterator.next())
nova chamada: assertEquals(0, iterator.next(), "Era esperado valores iguais, mas  0 é diferente de " + result34 + " <iterator.next()>")
chamada antiga: assertEquals(0, map.select(0))
nova chamada: assertEquals(0, map.select(0), "Era esperado valores iguais, mas  0 é diferente de " + result35 + " <map.select(0)>")
chamada antiga: assertTrue(map.contains(0))
nova chamada: assertTrue(map.contains(0), "Era esperado verdadeiro, mas " + result36 + " <map.contains(0)> é falso")
chamada antiga: assertFalse(iterator.hasNext())
nova chamada: assertFalse(iterator.hasNext(), "Era esperado falso, mas " + result37 + " <iterator.hasNext()> é verdadeiro ")
chamada antiga: assertEquals(1, map.getLongCardinality())
nova chamada: assertEquals(1, map.getLongCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result38 + " <map.getLongCardinality()>")
chamada antiga: assertFalse(map.isEmpty())
nova chamada: assertFalse(map.isEmpty(), "Era esperado falso, mas " + result39 + " <map.isEmpty()> é verdadeiro ")
chamada antiga: assertEquals(1, map.rankLong(Long.MIN_VALUE))
nova chamada: assertEquals(1, map.rankLong(Long.MIN_VALUE), "Era esperado valores iguais, mas  1 é diferente de " + result40 + " <map.rankLong(Long.MIN_VALUE)>")
chamada antiga: assertEquals(1, map.rankLong(Integer.MIN_VALUE - 1L))
nova chamada: assertEquals(1, map.rankLong(Integer.MIN_VALUE - 1L), "Era esperado valores iguais, mas  1 é diferente de " + result41 + " <map.rankLong(Integer.MIN_VALUE - 1L)>")
chamada antiga: assertEquals(1, map.rankLong(-1))
nova chamada: assertEquals(1, map.rankLong(-1), "Era esperado valores iguais, mas  1 é diferente de " + result42 + " <map.rankLong(-1)>")
chamada antiga: assertEquals(1, map.rankLong(0))
nova chamada: assertEquals(1, map.rankLong(0), "Era esperado valores iguais, mas  1 é diferente de " + result43 + " <map.rankLong(0)>")
chamada antiga: assertEquals(1, map.rankLong(1))
nova chamada: assertEquals(1, map.rankLong(1), "Era esperado valores iguais, mas  1 é diferente de " + result44 + " <map.rankLong(1)>")
chamada antiga: assertEquals(1, map.rankLong(Integer.MAX_VALUE + 1L))
nova chamada: assertEquals(1, map.rankLong(Integer.MAX_VALUE + 1L), "Era esperado valores iguais, mas  1 é diferente de " + result45 + " <map.rankLong(Integer.MAX_VALUE + 1L)>")
chamada antiga: assertEquals(1, map.rankLong(Long.MAX_VALUE))
nova chamada: assertEquals(1, map.rankLong(Long.MAX_VALUE), "Era esperado valores iguais, mas  1 é diferente de " + result46 + " <map.rankLong(Long.MAX_VALUE)>")
chamada antiga: assertTrue(iterator.hasNext())
nova chamada: assertTrue(iterator.hasNext(), "Era esperado verdadeiro, mas " + result47 + " <iterator.hasNext()> é falso")
chamada antiga: assertEquals(-1, iterator.next())
nova chamada: assertEquals(-1, iterator.next(), "Era esperado valores iguais, mas  -1 é diferente de " + result48 + " <iterator.next()>")
chamada antiga: assertEquals(-1, map.select(0))
nova chamada: assertEquals(-1, map.select(0), "Era esperado valores iguais, mas  -1 é diferente de " + result49 + " <map.select(0)>")
chamada antiga: assertTrue(map.contains(-1))
nova chamada: assertTrue(map.contains(-1), "Era esperado verdadeiro, mas " + result50 + " <map.contains(-1)> é falso")
chamada antiga: assertFalse(iterator.hasNext())
nova chamada: assertFalse(iterator.hasNext(), "Era esperado falso, mas " + result51 + " <iterator.hasNext()> é verdadeiro ")
chamada antiga: assertEquals(1, map.getLongCardinality())
nova chamada: assertEquals(1, map.getLongCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result52 + " <map.getLongCardinality()>")
chamada antiga: assertFalse(map.isEmpty())
nova chamada: assertFalse(map.isEmpty(), "Era esperado falso, mas " + result53 + " <map.isEmpty()> é verdadeiro ")
chamada antiga: assertEquals(0, map.rankLong(Long.MIN_VALUE))
nova chamada: assertEquals(0, map.rankLong(Long.MIN_VALUE), "Era esperado valores iguais, mas  0 é diferente de " + result54 + " <map.rankLong(Long.MIN_VALUE)>")
chamada antiga: assertEquals(0, map.rankLong(Integer.MIN_VALUE - 1L))
nova chamada: assertEquals(0, map.rankLong(Integer.MIN_VALUE - 1L), "Era esperado valores iguais, mas  0 é diferente de " + result55 + " <map.rankLong(Integer.MIN_VALUE - 1L)>")
chamada antiga: assertEquals(0, map.rankLong(0))
nova chamada: assertEquals(0, map.rankLong(0), "Era esperado valores iguais, mas  0 é diferente de " + result56 + " <map.rankLong(0)>")
chamada antiga: assertEquals(0, map.rankLong(1))
nova chamada: assertEquals(0, map.rankLong(1), "Era esperado valores iguais, mas  0 é diferente de " + result57 + " <map.rankLong(1)>")
chamada antiga: assertEquals(0, map.rankLong(Integer.MAX_VALUE + 1L))
nova chamada: assertEquals(0, map.rankLong(Integer.MAX_VALUE + 1L), "Era esperado valores iguais, mas  0 é diferente de " + result58 + " <map.rankLong(Integer.MAX_VALUE + 1L)>")
chamada antiga: assertEquals(0, map.rankLong(Long.MAX_VALUE))
nova chamada: assertEquals(0, map.rankLong(Long.MAX_VALUE), "Era esperado valores iguais, mas  0 é diferente de " + result59 + " <map.rankLong(Long.MAX_VALUE)>")
chamada antiga: assertEquals(0, map.rankLong(-2))
nova chamada: assertEquals(0, map.rankLong(-2), "Era esperado valores iguais, mas  0 é diferente de " + result60 + " <map.rankLong(-2)>")
chamada antiga: assertEquals(1, map.rankLong(-1))
nova chamada: assertEquals(1, map.rankLong(-1), "Era esperado valores iguais, mas  1 é diferente de " + result61 + " <map.rankLong(-1)>")
chamada antiga: assertArrayEquals(new long[] { -1L }, map.toArray())
nova chamada: assertArrayEquals(new long[] { -1L }, map.toArray(), "Era esperado arrays iguais, mas  new long[] { -1L } é diferente de " + result62 + " <map.toArray()>")
chamada antiga: assertTrue(iterator.hasNext())
nova chamada: assertTrue(iterator.hasNext(), "Era esperado verdadeiro, mas " + result63 + " <iterator.hasNext()> é falso")
chamada antiga: assertEquals(123, iterator.next())
nova chamada: assertEquals(123, iterator.next(), "Era esperado valores iguais, mas  123 é diferente de " + result64 + " <iterator.next()>")
chamada antiga: assertEquals(123, map.select(0))
nova chamada: assertEquals(123, map.select(0), "Era esperado valores iguais, mas  123 é diferente de " + result65 + " <map.select(0)>")
chamada antiga: assertTrue(map.contains(123))
nova chamada: assertTrue(map.contains(123), "Era esperado verdadeiro, mas " + result66 + " <map.contains(123)> é falso")
chamada antiga: assertTrue(iterator.hasNext())
nova chamada: assertTrue(iterator.hasNext(), "Era esperado verdadeiro, mas " + result67 + " <iterator.hasNext()> é falso")
chamada antiga: assertEquals(234, iterator.next())
nova chamada: assertEquals(234, iterator.next(), "Era esperado valores iguais, mas  234 é diferente de " + result68 + " <iterator.next()>")
chamada antiga: assertEquals(234, map.select(1))
nova chamada: assertEquals(234, map.select(1), "Era esperado valores iguais, mas  234 é diferente de " + result69 + " <map.select(1)>")
chamada antiga: assertTrue(map.contains(234))
nova chamada: assertTrue(map.contains(234), "Era esperado verdadeiro, mas " + result70 + " <map.contains(234)> é falso")
chamada antiga: assertFalse(iterator.hasNext())
nova chamada: assertFalse(iterator.hasNext(), "Era esperado falso, mas " + result71 + " <iterator.hasNext()> é verdadeiro ")
chamada antiga: assertFalse(map.contains(345))
nova chamada: assertFalse(map.contains(345), "Era esperado falso, mas " + result72 + " <map.contains(345)> é verdadeiro ")
chamada antiga: assertEquals(2, map.getLongCardinality())
nova chamada: assertEquals(2, map.getLongCardinality(), "Era esperado valores iguais, mas  2 é diferente de " + result73 + " <map.getLongCardinality()>")
chamada antiga: assertEquals(0, map.rankLong(0))
nova chamada: assertEquals(0, map.rankLong(0), "Era esperado valores iguais, mas  0 é diferente de " + result74 + " <map.rankLong(0)>")
chamada antiga: assertEquals(1, map.rankLong(123))
nova chamada: assertEquals(1, map.rankLong(123), "Era esperado valores iguais, mas  1 é diferente de " + result75 + " <map.rankLong(123)>")
chamada antiga: assertEquals(1, map.rankLong(233))
nova chamada: assertEquals(1, map.rankLong(233), "Era esperado valores iguais, mas  1 é diferente de " + result76 + " <map.rankLong(233)>")
chamada antiga: assertEquals(2, map.rankLong(234))
nova chamada: assertEquals(2, map.rankLong(234), "Era esperado valores iguais, mas  2 é diferente de " + result77 + " <map.rankLong(234)>")
chamada antiga: assertEquals(2, map.rankLong(235))
nova chamada: assertEquals(2, map.rankLong(235), "Era esperado valores iguais, mas  2 é diferente de " + result78 + " <map.rankLong(235)>")
chamada antiga: assertEquals(2, map.rankLong(Integer.MAX_VALUE + 1L))
nova chamada: assertEquals(2, map.rankLong(Integer.MAX_VALUE + 1L), "Era esperado valores iguais, mas  2 é diferente de " + result79 + " <map.rankLong(Integer.MAX_VALUE + 1L)>")
chamada antiga: assertEquals(2, map.rankLong(Long.MAX_VALUE))
nova chamada: assertEquals(2, map.rankLong(Long.MAX_VALUE), "Era esperado valores iguais, mas  2 é diferente de " + result80 + " <map.rankLong(Long.MAX_VALUE)>")
chamada antiga: assertArrayEquals(new long[] { 123L, 234L }, map.toArray())
nova chamada: assertArrayEquals(new long[] { 123L, 234L }, map.toArray(), "Era esperado arrays iguais, mas  new long[] { 123L, 234L } é diferente de " + result81 + " <map.toArray()>")
chamada antiga: assertThrows(IllegalArgumentException.class, () -> {
    Roaring64Bitmap map = newDefaultCtor();
    map.addLong(123);
    map.select(1);
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    Roaring64Bitmap map = newDefaultCtor();
    map.addLong(123);
    map.select(1);
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: assertEquals(0xFFFFFFFFL, map.select(0))
nova chamada: assertEquals(0xFFFFFFFFL, map.select(0), "Era esperado valores iguais, mas  0xFFFFFFFFL é diferente de " + result82 + " <map.select(0)>")
chamada antiga: assertTrue(map.getLongIterator().hasNext())
nova chamada: assertTrue(map.getLongIterator().hasNext(), "Era esperado verdadeiro, mas " + result83 + " <map.getLongIterator().hasNext()> é falso")
chamada antiga: assertEquals(0, map.getLongIterator().next())
nova chamada: assertEquals(0, map.getLongIterator().next(), "Era esperado valores iguais, mas  0 é diferente de " + result84 + " <map.getLongIterator().next()>")
chamada antiga: assertThrows(IllegalStateException.class, () -> {
    Roaring64Bitmap map = newDefaultCtor();
    map.getLongIterator().next();
})
nova chamada: assertThrows(IllegalStateException.class, () -> {
    Roaring64Bitmap map = newDefaultCtor();
    map.getLongIterator().next();
}, "Era esperado que a exceção  IllegalStateException.class fosse lançada, mas não foi")
chamada antiga: assertTrue(iterator.hasNext())
nova chamada: assertTrue(iterator.hasNext(), "Era esperado verdadeiro, mas " + result85 + " <iterator.hasNext()> é falso")
chamada antiga: assertEquals(Long.MAX_VALUE, iterator.next())
nova chamada: assertEquals(Long.MAX_VALUE, iterator.next(), "Era esperado valores iguais, mas  Long.MAX_VALUE é diferente de " + result86 + " <iterator.next()>")
chamada antiga: assertEquals(Long.MAX_VALUE, map.select(0))
nova chamada: assertEquals(Long.MAX_VALUE, map.select(0), "Era esperado valores iguais, mas  Long.MAX_VALUE é diferente de " + result87 + " <map.select(0)>")
chamada antiga: assertFalse(iterator.hasNext())
nova chamada: assertFalse(iterator.hasNext(), "Era esperado falso, mas " + result88 + " <iterator.hasNext()> é verdadeiro ")
chamada antiga: assertEquals(1, map.getLongCardinality())
nova chamada: assertEquals(1, map.getLongCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result89 + " <map.getLongCardinality()>")
chamada antiga: assertEquals(1, map.rankLong(Long.MIN_VALUE))
nova chamada: assertEquals(1, map.rankLong(Long.MIN_VALUE), "Era esperado valores iguais, mas  1 é diferente de " + result90 + " <map.rankLong(Long.MIN_VALUE)>")
chamada antiga: assertEquals(1, map.rankLong(Long.MIN_VALUE + 1))
nova chamada: assertEquals(1, map.rankLong(Long.MIN_VALUE + 1), "Era esperado valores iguais, mas  1 é diferente de " + result91 + " <map.rankLong(Long.MIN_VALUE + 1)>")
chamada antiga: assertEquals(1, map.rankLong(-1))
nova chamada: assertEquals(1, map.rankLong(-1), "Era esperado valores iguais, mas  1 é diferente de " + result92 + " <map.rankLong(-1)>")
chamada antiga: assertEquals(0, map.rankLong(0))
nova chamada: assertEquals(0, map.rankLong(0), "Era esperado valores iguais, mas  0 é diferente de " + result93 + " <map.rankLong(0)>")
chamada antiga: assertEquals(0, map.rankLong(1))
nova chamada: assertEquals(0, map.rankLong(1), "Era esperado valores iguais, mas  0 é diferente de " + result94 + " <map.rankLong(1)>")
chamada antiga: assertEquals(0, map.rankLong(Long.MAX_VALUE - 1))
nova chamada: assertEquals(0, map.rankLong(Long.MAX_VALUE - 1), "Era esperado valores iguais, mas  0 é diferente de " + result95 + " <map.rankLong(Long.MAX_VALUE - 1)>")
chamada antiga: assertEquals(1, map.rankLong(Long.MAX_VALUE))
nova chamada: assertEquals(1, map.rankLong(Long.MAX_VALUE), "Era esperado valores iguais, mas  1 é diferente de " + result96 + " <map.rankLong(Long.MAX_VALUE)>")
chamada antiga: assertArrayEquals(new long[] { Long.MAX_VALUE }, map.toArray())
nova chamada: assertArrayEquals(new long[] { Long.MAX_VALUE }, map.toArray(), "Era esperado arrays iguais, mas  new long[] { Long.MAX_VALUE } é diferente de " + result97 + " <map.toArray()>")
chamada antiga: assertTrue(iterator.hasNext())
nova chamada: assertTrue(iterator.hasNext(), "Era esperado verdadeiro, mas " + result98 + " <iterator.hasNext()> é falso")
chamada antiga: assertEquals(Long.MIN_VALUE, iterator.next())
nova chamada: assertEquals(Long.MIN_VALUE, iterator.next(), "Era esperado valores iguais, mas  Long.MIN_VALUE é diferente de " + result99 + " <iterator.next()>")
chamada antiga: assertEquals(Long.MIN_VALUE, map.select(0))
nova chamada: assertEquals(Long.MIN_VALUE, map.select(0), "Era esperado valores iguais, mas  Long.MIN_VALUE é diferente de " + result100 + " <map.select(0)>")
chamada antiga: assertFalse(iterator.hasNext())
nova chamada: assertFalse(iterator.hasNext(), "Era esperado falso, mas " + result101 + " <iterator.hasNext()> é verdadeiro ")
chamada antiga: assertEquals(1, map.getLongCardinality())
nova chamada: assertEquals(1, map.getLongCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result102 + " <map.getLongCardinality()>")
chamada antiga: assertEquals(1, map.rankLong(Long.MIN_VALUE))
nova chamada: assertEquals(1, map.rankLong(Long.MIN_VALUE), "Era esperado valores iguais, mas  1 é diferente de " + result103 + " <map.rankLong(Long.MIN_VALUE)>")
chamada antiga: assertEquals(1, map.rankLong(Long.MIN_VALUE + 1))
nova chamada: assertEquals(1, map.rankLong(Long.MIN_VALUE + 1), "Era esperado valores iguais, mas  1 é diferente de " + result104 + " <map.rankLong(Long.MIN_VALUE + 1)>")
chamada antiga: assertEquals(1, map.rankLong(-1))
nova chamada: assertEquals(1, map.rankLong(-1), "Era esperado valores iguais, mas  1 é diferente de " + result105 + " <map.rankLong(-1)>")
chamada antiga: assertEquals(0, map.rankLong(0))
nova chamada: assertEquals(0, map.rankLong(0), "Era esperado valores iguais, mas  0 é diferente de " + result106 + " <map.rankLong(0)>")
chamada antiga: assertEquals(0, map.rankLong(1))
nova chamada: assertEquals(0, map.rankLong(1), "Era esperado valores iguais, mas  0 é diferente de " + result107 + " <map.rankLong(1)>")
chamada antiga: assertEquals(0, map.rankLong(Long.MAX_VALUE - 1))
nova chamada: assertEquals(0, map.rankLong(Long.MAX_VALUE - 1), "Era esperado valores iguais, mas  0 é diferente de " + result108 + " <map.rankLong(Long.MAX_VALUE - 1)>")
chamada antiga: assertEquals(0, map.rankLong(Long.MAX_VALUE))
nova chamada: assertEquals(0, map.rankLong(Long.MAX_VALUE), "Era esperado valores iguais, mas  0 é diferente de " + result109 + " <map.rankLong(Long.MAX_VALUE)>")
chamada antiga: assertEquals(0, iterator.next())
nova chamada: assertEquals(0, iterator.next(), "Era esperado valores iguais, mas  0 é diferente de " + result110 + " <iterator.next()>")
chamada antiga: assertEquals(0, map.select(0))
nova chamada: assertEquals(0, map.select(0), "Era esperado valores iguais, mas  0 é diferente de " + result111 + " <map.select(0)>")
chamada antiga: assertEquals(1, iterator.next())
nova chamada: assertEquals(1, iterator.next(), "Era esperado valores iguais, mas  1 é diferente de " + result112 + " <iterator.next()>")
chamada antiga: assertEquals(1, map.select(1))
nova chamada: assertEquals(1, map.select(1), "Era esperado valores iguais, mas  1 é diferente de " + result113 + " <map.select(1)>")
chamada antiga: assertEquals(Long.MAX_VALUE, iterator.next())
nova chamada: assertEquals(Long.MAX_VALUE, iterator.next(), "Era esperado valores iguais, mas  Long.MAX_VALUE é diferente de " + result114 + " <iterator.next()>")
chamada antiga: assertEquals(Long.MAX_VALUE, map.select(2))
nova chamada: assertEquals(Long.MAX_VALUE, map.select(2), "Era esperado valores iguais, mas  Long.MAX_VALUE é diferente de " + result115 + " <map.select(2)>")
chamada antiga: assertEquals(Long.MIN_VALUE, iterator.next())
nova chamada: assertEquals(Long.MIN_VALUE, iterator.next(), "Era esperado valores iguais, mas  Long.MIN_VALUE é diferente de " + result116 + " <iterator.next()>")
chamada antiga: assertEquals(Long.MIN_VALUE, map.select(3))
nova chamada: assertEquals(Long.MIN_VALUE, map.select(3), "Era esperado valores iguais, mas  Long.MIN_VALUE é diferente de " + result117 + " <map.select(3)>")
chamada antiga: assertFalse(iterator.hasNext())
nova chamada: assertFalse(iterator.hasNext(), "Era esperado falso, mas " + result118 + " <iterator.hasNext()> é verdadeiro ")
chamada antiga: assertEquals(4, map.getLongCardinality())
nova chamada: assertEquals(4, map.getLongCardinality(), "Era esperado valores iguais, mas  4 é diferente de " + result119 + " <map.getLongCardinality()>")
chamada antiga: assertEquals(4, map.rankLong(Long.MIN_VALUE))
nova chamada: assertEquals(4, map.rankLong(Long.MIN_VALUE), "Era esperado valores iguais, mas  4 é diferente de " + result120 + " <map.rankLong(Long.MIN_VALUE)>")
chamada antiga: assertEquals(4, map.rankLong(Long.MIN_VALUE + 1))
nova chamada: assertEquals(4, map.rankLong(Long.MIN_VALUE + 1), "Era esperado valores iguais, mas  4 é diferente de " + result121 + " <map.rankLong(Long.MIN_VALUE + 1)>")
chamada antiga: assertEquals(4, map.rankLong(-1))
nova chamada: assertEquals(4, map.rankLong(-1), "Era esperado valores iguais, mas  4 é diferente de " + result122 + " <map.rankLong(-1)>")
chamada antiga: assertEquals(1, map.rankLong(0))
nova chamada: assertEquals(1, map.rankLong(0), "Era esperado valores iguais, mas  1 é diferente de " + result123 + " <map.rankLong(0)>")
chamada antiga: assertEquals(2, map.rankLong(1))
nova chamada: assertEquals(2, map.rankLong(1), "Era esperado valores iguais, mas  2 é diferente de " + result124 + " <map.rankLong(1)>")
chamada antiga: assertEquals(2, map.rankLong(2))
nova chamada: assertEquals(2, map.rankLong(2), "Era esperado valores iguais, mas  2 é diferente de " + result125 + " <map.rankLong(2)>")
chamada antiga: assertEquals(2, map.rankLong(Long.MAX_VALUE - 1))
nova chamada: assertEquals(2, map.rankLong(Long.MAX_VALUE - 1), "Era esperado valores iguais, mas  2 é diferente de " + result126 + " <map.rankLong(Long.MAX_VALUE - 1)>")
chamada antiga: assertEquals(3, map.rankLong(Long.MAX_VALUE))
nova chamada: assertEquals(3, map.rankLong(Long.MAX_VALUE), "Era esperado valores iguais, mas  3 é diferente de " + result127 + " <map.rankLong(Long.MAX_VALUE)>")
chamada antiga: assertEquals(Arrays.asList(0L, 1L, Long.MAX_VALUE, Long.MIN_VALUE), foreach)
nova chamada: assertEquals(Arrays.asList(0L, 1L, Long.MAX_VALUE, Long.MIN_VALUE), foreach, "Era esperado valores iguais, mas " + result128 + " <Arrays.asList(0L, 1L, Long.MAX_VALUE, Long.MIN_VALUE)> é diferente de " + " foreach")
chamada antiga: assertTrue(iterator.hasNext())
nova chamada: assertTrue(iterator.hasNext(), "Era esperado verdadeiro, mas " + result129 + " <iterator.hasNext()> é falso")
chamada antiga: assertEquals(234, iterator.next())
nova chamada: assertEquals(234, iterator.next(), "Era esperado valores iguais, mas  234 é diferente de " + result130 + " <iterator.next()>")
chamada antiga: assertTrue(iterator.hasNext())
nova chamada: assertTrue(iterator.hasNext(), "Era esperado verdadeiro, mas " + result131 + " <iterator.hasNext()> é falso")
chamada antiga: assertEquals(123, iterator.next())
nova chamada: assertEquals(123, iterator.next(), "Era esperado valores iguais, mas  123 é diferente de " + result132 + " <iterator.next()>")
chamada antiga: assertFalse(iterator.hasNext())
nova chamada: assertFalse(iterator.hasNext(), "Era esperado falso, mas " + result133 + " <iterator.hasNext()> é verdadeiro ")
chamada antiga: assertTrue(iterator.hasNext())
nova chamada: assertTrue(iterator.hasNext(), "Era esperado verdadeiro, mas " + result134 + " <iterator.hasNext()> é falso")
chamada antiga: assertEquals(Long.MAX_VALUE, iterator.next())
nova chamada: assertEquals(Long.MAX_VALUE, iterator.next(), "Era esperado valores iguais, mas  Long.MAX_VALUE é diferente de " + result135 + " <iterator.next()>")
chamada antiga: assertTrue(iterator.hasNext())
nova chamada: assertTrue(iterator.hasNext(), "Era esperado verdadeiro, mas " + result136 + " <iterator.hasNext()> é falso")
chamada antiga: assertEquals(123, iterator.next())
nova chamada: assertEquals(123, iterator.next(), "Era esperado valores iguais, mas  123 é diferente de " + result137 + " <iterator.next()>")
chamada antiga: assertFalse(iterator.hasNext())
nova chamada: assertFalse(iterator.hasNext(), "Era esperado falso, mas " + result138 + " <iterator.hasNext()> é verdadeiro ")
chamada antiga: assertEquals(1L, map.getLongCardinality())
nova chamada: assertEquals(1L, map.getLongCardinality(), "Era esperado valores iguais, mas  1L é diferente de " + result139 + " <map.getLongCardinality()>")
chamada antiga: assertEquals(0L, map.getLongCardinality())
nova chamada: assertEquals(0L, map.getLongCardinality(), "Era esperado valores iguais, mas  0L é diferente de " + result140 + " <map.getLongCardinality()>")
chamada antiga: assertTrue(map.isEmpty())
nova chamada: assertTrue(map.isEmpty(), "Era esperado verdadeiro, mas " + result141 + " <map.isEmpty()> é falso")
chamada antiga: assertEquals(1L, map.getLongCardinality())
nova chamada: assertEquals(1L, map.getLongCardinality(), "Era esperado valores iguais, mas  1L é diferente de " + result142 + " <map.getLongCardinality()>")
chamada antiga: assertEquals(2L, map.getLongCardinality())
nova chamada: assertEquals(2L, map.getLongCardinality(), "Era esperado valores iguais, mas  2L é diferente de " + result143 + " <map.getLongCardinality()>")
chamada antiga: assertEquals(1L, map.getLongCardinality())
nova chamada: assertEquals(1L, map.getLongCardinality(), "Era esperado valores iguais, mas  1L é diferente de " + result144 + " <map.getLongCardinality()>")
chamada antiga: assertEquals(123L, map.select(0))
nova chamada: assertEquals(123L, map.select(0), "Era esperado valores iguais, mas  123L é diferente de " + result145 + " <map.select(0)>")
chamada antiga: assertEquals(2L, map.getLongCardinality())
nova chamada: assertEquals(2L, map.getLongCardinality(), "Era esperado valores iguais, mas  2L é diferente de " + result146 + " <map.getLongCardinality()>")
chamada antiga: assertEquals(123L, map.select(0))
nova chamada: assertEquals(123L, map.select(0), "Era esperado valores iguais, mas  123L é diferente de " + result147 + " <map.select(0)>")
chamada antiga: assertEquals(Long.MAX_VALUE, map.select(1))
nova chamada: assertEquals(Long.MAX_VALUE, map.select(1), "Era esperado valores iguais, mas  Long.MAX_VALUE é diferente de " + result148 + " <map.select(1)>")
chamada antiga: assertEquals(2L, map.getLongCardinality())
nova chamada: assertEquals(2L, map.getLongCardinality(), "Era esperado valores iguais, mas  2L é diferente de " + result149 + " <map.getLongCardinality()>")
chamada antiga: assertEquals(1L, map.getLongCardinality())
nova chamada: assertEquals(1L, map.getLongCardinality(), "Era esperado valores iguais, mas  1L é diferente de " + result150 + " <map.getLongCardinality()>")
chamada antiga: assertEquals(123L, map.select(0))
nova chamada: assertEquals(123L, map.select(0), "Era esperado valores iguais, mas  123L é diferente de " + result151 + " <map.select(0)>")
chamada antiga: assertEquals(2L, map.getLongCardinality())
nova chamada: assertEquals(2L, map.getLongCardinality(), "Era esperado valores iguais, mas  2L é diferente de " + result152 + " <map.getLongCardinality()>")
chamada antiga: assertEquals(123L, map.select(0))
nova chamada: assertEquals(123L, map.select(0), "Era esperado valores iguais, mas  123L é diferente de " + result153 + " <map.select(0)>")
chamada antiga: assertEquals(Long.MAX_VALUE / 2L, map.select(1))
nova chamada: assertEquals(Long.MAX_VALUE / 2L, map.select(1), "Era esperado valores iguais, mas  Long.MAX_VALUE / 2L é diferente de " + result154 + " <map.select(1)>")
chamada antiga: assertEquals(2L, map.getLongCardinality())
nova chamada: assertEquals(2L, map.getLongCardinality(), "Era esperado valores iguais, mas  2L é diferente de " + result155 + " <map.getLongCardinality()>")
chamada antiga: assertEquals(1L, map.getLongCardinality())
nova chamada: assertEquals(1L, map.getLongCardinality(), "Era esperado valores iguais, mas  1L é diferente de " + result156 + " <map.getLongCardinality()>")
chamada antiga: assertEquals(123L, map.select(0))
nova chamada: assertEquals(123L, map.select(0), "Era esperado valores iguais, mas  123L é diferente de " + result157 + " <map.select(0)>")
chamada antiga: assertEquals(2L, map.getLongCardinality())
nova chamada: assertEquals(2L, map.getLongCardinality(), "Era esperado valores iguais, mas  2L é diferente de " + result158 + " <map.getLongCardinality()>")
chamada antiga: assertEquals(123L, map.select(0))
nova chamada: assertEquals(123L, map.select(0), "Era esperado valores iguais, mas  123L é diferente de " + result159 + " <map.select(0)>")
chamada antiga: assertEquals(Long.MAX_VALUE, map.select(1))
nova chamada: assertEquals(Long.MAX_VALUE, map.select(1), "Era esperado valores iguais, mas  Long.MAX_VALUE é diferente de " + result160 + " <map.select(1)>")
chamada antiga: assertEquals(problemSize, cardinality)
nova chamada: assertEquals(problemSize, cardinality, "Era esperado valores iguais, mas  problemSize é diferente de " + " cardinality")
chamada antiga: assertEquals(cardinality, map.rankLong(last))
nova chamada: assertEquals(cardinality, map.rankLong(last), "Era esperado valores iguais, mas  cardinality é diferente de " + result161 + " <map.rankLong(last)>")
chamada antiga: assertEquals(positive, first)
nova chamada: assertEquals(positive, first, "Era esperado valores iguais, mas  positive é diferente de " + " first")
chamada antiga: assertEquals(negative, last)
nova chamada: assertEquals(negative, last, "Era esperado valores iguais, mas  negative é diferente de " + " last")
chamada antiga: assertEquals(2, map.rankLong(negative))
nova chamada: assertEquals(2, map.rankLong(negative), "Era esperado valores iguais, mas  2 é diferente de " + result162 + " <map.rankLong(negative)>")
chamada antiga: assertEquals(positive, first)
nova chamada: assertEquals(positive, first, "Era esperado valores iguais, mas  positive é diferente de " + " first")
chamada antiga: assertEquals(negative, last)
nova chamada: assertEquals(negative, last, "Era esperado valores iguais, mas  negative é diferente de " + " last")
chamada antiga: assertEquals(Long.MAX_VALUE, map.select(0))
nova chamada: assertEquals(Long.MAX_VALUE, map.select(0), "Era esperado valores iguais, mas  Long.MAX_VALUE é diferente de " + result163 + " <map.select(0)>")
chamada antiga: assertEquals(666, map.select(0))
nova chamada: assertEquals(666, map.select(0), "Era esperado valores iguais, mas  666 é diferente de " + result164 + " <map.select(0)>")
chamada antiga: assertEquals(Long.MAX_VALUE, map.select(1))
nova chamada: assertEquals(Long.MAX_VALUE, map.select(1), "Era esperado valores iguais, mas  Long.MAX_VALUE é diferente de " + result165 + " <map.select(1)>")
chamada antiga: assertNotSame(map, clone)
nova chamada: assertNotSame(map, clone, "Era esperado objetos diferentes, mas  map é igual a " + " clone")
chamada antiga: assertEquals(0, clone.getLongCardinality())
nova chamada: assertEquals(0, clone.getLongCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result166 + " <clone.getLongCardinality()>")
chamada antiga: assertEquals(map.serializedSizeInBytes(), buffer.position())
nova chamada: assertEquals(map.serializedSizeInBytes(), buffer.position(), "Era esperado valores iguais, mas " + result167 + " <map.serializedSizeInBytes()> é diferente de " + result168 + " <buffer.position()>")
chamada antiga: assertNotSame(map, clone)
nova chamada: assertNotSame(map, clone, "Era esperado objetos diferentes, mas  map é igual a " + " clone")
chamada antiga: assertEquals(1, clone.getLongCardinality())
nova chamada: assertEquals(1, clone.getLongCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result169 + " <clone.getLongCardinality()>")
chamada antiga: assertEquals(123, clone.select(0))
nova chamada: assertEquals(123, clone.select(0), "Era esperado valores iguais, mas  123 é diferente de " + result170 + " <clone.select(0)>")
chamada antiga: assertNotSame(map, clone)
nova chamada: assertNotSame(map, clone, "Era esperado objetos diferentes, mas  map é igual a " + " clone")
chamada antiga: assertEquals(1, clone.getLongCardinality())
nova chamada: assertEquals(1, clone.getLongCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result171 + " <clone.getLongCardinality()>")
chamada antiga: assertEquals(123, clone.select(0))
nova chamada: assertEquals(123, clone.select(0), "Era esperado valores iguais, mas  123 é diferente de " + result172 + " <clone.select(0)>")
chamada antiga: assertNotSame(map, clone)
nova chamada: assertNotSame(map, clone, "Era esperado objetos diferentes, mas  map é igual a " + " clone")
chamada antiga: assertEquals(3, clone.getLongCardinality())
nova chamada: assertEquals(3, clone.getLongCardinality(), "Era esperado valores iguais, mas  3 é diferente de " + result173 + " <clone.getLongCardinality()>")
chamada antiga: assertEquals(123, clone.select(0))
nova chamada: assertEquals(123, clone.select(0), "Era esperado valores iguais, mas  123 é diferente de " + result174 + " <clone.select(0)>")
chamada antiga: assertEquals(Long.MAX_VALUE, clone.select(1))
nova chamada: assertEquals(Long.MAX_VALUE, clone.select(1), "Era esperado valores iguais, mas  Long.MAX_VALUE é diferente de " + result175 + " <clone.select(1)>")
chamada antiga: assertEquals(-123, clone.select(2))
nova chamada: assertEquals(-123, clone.select(2), "Era esperado valores iguais, mas  -123 é diferente de " + result176 + " <clone.select(2)>")
chamada antiga: assertEquals(3, anotherDeserMap.getLongCardinality())
nova chamada: assertEquals(3, anotherDeserMap.getLongCardinality(), "Era esperado valores iguais, mas  3 é diferente de " + result177 + " <anotherDeserMap.getLongCardinality()>")
chamada antiga: assertEquals(123, anotherDeserMap.select(0))
nova chamada: assertEquals(123, anotherDeserMap.select(0), "Era esperado valores iguais, mas  123 é diferente de " + result178 + " <anotherDeserMap.select(0)>")
chamada antiga: assertEquals(Long.MAX_VALUE, anotherDeserMap.select(1))
nova chamada: assertEquals(Long.MAX_VALUE, anotherDeserMap.select(1), "Era esperado valores iguais, mas  Long.MAX_VALUE é diferente de " + result179 + " <anotherDeserMap.select(1)>")
chamada antiga: assertEquals(-123, anotherDeserMap.select(2))
nova chamada: assertEquals(-123, anotherDeserMap.select(2), "Era esperado valores iguais, mas  -123 é diferente de " + result180 + " <anotherDeserMap.select(2)>")
chamada antiga: assertEquals(2, left.getLongCardinality())
nova chamada: assertEquals(2, left.getLongCardinality(), "Era esperado valores iguais, mas  2 é diferente de " + result181 + " <left.getLongCardinality()>")
chamada antiga: assertEquals(123, left.select(0))
nova chamada: assertEquals(123, left.select(0), "Era esperado valores iguais, mas  123 é diferente de " + result182 + " <left.select(0)>")
chamada antiga: assertEquals(234, left.select(1))
nova chamada: assertEquals(234, left.select(1), "Era esperado valores iguais, mas  234 é diferente de " + result183 + " <left.select(1)>")
chamada antiga: assertEquals(3, left.getLongCardinality())
nova chamada: assertEquals(3, left.getLongCardinality(), "Era esperado valores iguais, mas  3 é diferente de " + result184 + " <left.getLongCardinality()>")
chamada antiga: assertEquals(123, left.select(0))
nova chamada: assertEquals(123, left.select(0), "Era esperado valores iguais, mas  123 é diferente de " + result185 + " <left.select(0)>")
chamada antiga: assertEquals(234, left.select(1))
nova chamada: assertEquals(234, left.select(1), "Era esperado valores iguais, mas  234 é diferente de " + result186 + " <left.select(1)>")
chamada antiga: assertEquals(Long.MAX_VALUE, left.select(2))
nova chamada: assertEquals(Long.MAX_VALUE, left.select(2), "Era esperado valores iguais, mas  Long.MAX_VALUE é diferente de " + result187 + " <left.select(2)>")
chamada antiga: assertEquals(2, left.getLongCardinality())
nova chamada: assertEquals(2, left.getLongCardinality(), "Era esperado valores iguais, mas  2 é diferente de " + result188 + " <left.getLongCardinality()>")
chamada antiga: assertEquals(123, left.select(0))
nova chamada: assertEquals(123, left.select(0), "Era esperado valores iguais, mas  123 é diferente de " + result189 + " <left.select(0)>")
chamada antiga: assertEquals(Long.MAX_VALUE / 2, left.select(1))
nova chamada: assertEquals(Long.MAX_VALUE / 2, left.select(1), "Era esperado valores iguais, mas  Long.MAX_VALUE / 2 é diferente de " + result190 + " <left.select(1)>")
chamada antiga: assertEquals(2, left.getLongCardinality())
nova chamada: assertEquals(2, left.getLongCardinality(), "Era esperado valores iguais, mas  2 é diferente de " + result191 + " <left.getLongCardinality()>")
chamada antiga: assertEquals(123, left.select(0))
nova chamada: assertEquals(123, left.select(0), "Era esperado valores iguais, mas  123 é diferente de " + result192 + " <left.select(0)>")
chamada antiga: assertEquals(Long.MAX_VALUE, left.select(1))
nova chamada: assertEquals(Long.MAX_VALUE, left.select(1), "Era esperado valores iguais, mas  Long.MAX_VALUE é diferente de " + result193 + " <left.select(1)>")
chamada antiga: assertEquals(2, left.getLongCardinality())
nova chamada: assertEquals(2, left.getLongCardinality(), "Era esperado valores iguais, mas  2 é diferente de " + result194 + " <left.getLongCardinality()>")
chamada antiga: assertEquals(123, left.select(0))
nova chamada: assertEquals(123, left.select(0), "Era esperado valores iguais, mas  123 é diferente de " + result195 + " <left.select(0)>")
chamada antiga: assertEquals(234, left.select(1))
nova chamada: assertEquals(234, left.select(1), "Era esperado valores iguais, mas  234 é diferente de " + result196 + " <left.select(1)>")
chamada antiga: assertEquals(1, right.getLongCardinality())
nova chamada: assertEquals(1, right.getLongCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result197 + " <right.getLongCardinality()>")
chamada antiga: assertEquals(123, right.select(0))
nova chamada: assertEquals(123, right.select(0), "Era esperado valores iguais, mas  123 é diferente de " + result198 + " <right.select(0)>")
chamada antiga: assertEquals(2, left.getLongCardinality())
nova chamada: assertEquals(2, left.getLongCardinality(), "Era esperado valores iguais, mas  2 é diferente de " + result199 + " <left.getLongCardinality()>")
chamada antiga: assertEquals(123, left.select(0))
nova chamada: assertEquals(123, left.select(0), "Era esperado valores iguais, mas  123 é diferente de " + result200 + " <left.select(0)>")
chamada antiga: assertEquals(345, left.select(1))
nova chamada: assertEquals(345, left.select(1), "Era esperado valores iguais, mas  345 é diferente de " + result201 + " <left.select(1)>")
chamada antiga: assertEquals(2, left.getLongCardinality())
nova chamada: assertEquals(2, left.getLongCardinality(), "Era esperado valores iguais, mas  2 é diferente de " + result202 + " <left.getLongCardinality()>")
chamada antiga: assertEquals(123, left.select(0))
nova chamada: assertEquals(123, left.select(0), "Era esperado valores iguais, mas  123 é diferente de " + result203 + " <left.select(0)>")
chamada antiga: assertEquals(345, left.select(1))
nova chamada: assertEquals(345, left.select(1), "Era esperado valores iguais, mas  345 é diferente de " + result204 + " <left.select(1)>")
chamada antiga: assertEquals(2, left.getLongCardinality())
nova chamada: assertEquals(2, left.getLongCardinality(), "Era esperado valores iguais, mas  2 é diferente de " + result205 + " <left.getLongCardinality()>")
chamada antiga: assertEquals(123, left.select(0))
nova chamada: assertEquals(123, left.select(0), "Era esperado valores iguais, mas  123 é diferente de " + result206 + " <left.select(0)>")
chamada antiga: assertEquals(Long.MAX_VALUE, left.select(1))
nova chamada: assertEquals(Long.MAX_VALUE, left.select(1), "Era esperado valores iguais, mas  Long.MAX_VALUE é diferente de " + result207 + " <left.select(1)>")
chamada antiga: assertEquals(1, left.getLongCardinality())
nova chamada: assertEquals(1, left.getLongCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result208 + " <left.getLongCardinality()>")
chamada antiga: assertEquals(123, left.select(0))
nova chamada: assertEquals(123, left.select(0), "Era esperado valores iguais, mas  123 é diferente de " + result209 + " <left.select(0)>")
chamada antiga: assertEquals(1, left.getLongCardinality())
nova chamada: assertEquals(1, left.getLongCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result210 + " <left.getLongCardinality()>")
chamada antiga: assertEquals(234, left.select(0))
nova chamada: assertEquals(234, left.select(0), "Era esperado valores iguais, mas  234 é diferente de " + result211 + " <left.select(0)>")
chamada antiga: assertEquals(1, left.getLongCardinality())
nova chamada: assertEquals(1, left.getLongCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result212 + " <left.getLongCardinality()>")
chamada antiga: assertEquals(123, left.select(0))
nova chamada: assertEquals(123, left.select(0), "Era esperado valores iguais, mas  123 é diferente de " + result213 + " <left.select(0)>")
chamada antiga: assertEquals(0, left.getLongCardinality())
nova chamada: assertEquals(0, left.getLongCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result214 + " <left.getLongCardinality()>")
chamada antiga: assertEquals(0, swapLeft.getLongCardinality())
nova chamada: assertEquals(0, swapLeft.getLongCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result215 + " <swapLeft.getLongCardinality()>")
chamada antiga: assertThrows(IllegalArgumentException.class, () -> left.select(0))
nova chamada: assertThrows(IllegalArgumentException.class, () -> left.select(0), "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(IllegalArgumentException.class, () -> swapLeft.select(0))
nova chamada: assertThrows(IllegalArgumentException.class, () -> swapLeft.select(0), "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: assertEquals(0, left.getLongCardinality())
nova chamada: assertEquals(0, left.getLongCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result216 + " <left.getLongCardinality()>")
chamada antiga: assertEquals(1, left.getLongCardinality())
nova chamada: assertEquals(1, left.getLongCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result217 + " <left.getLongCardinality()>")
chamada antiga: assertEquals(Long.MAX_VALUE, left.select(0))
nova chamada: assertEquals(Long.MAX_VALUE, left.select(0), "Era esperado valores iguais, mas  Long.MAX_VALUE é diferente de " + result218 + " <left.select(0)>")
chamada antiga: assertEquals(1, left.getLongCardinality())
nova chamada: assertEquals(1, left.getLongCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result219 + " <left.getLongCardinality()>")
chamada antiga: assertEquals(123, left.select(0))
nova chamada: assertEquals(123, left.select(0), "Era esperado valores iguais, mas  123 é diferente de " + result220 + " <left.select(0)>")
chamada antiga: assertEquals(1, left.getLongCardinality())
nova chamada: assertEquals(1, left.getLongCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result221 + " <left.getLongCardinality()>")
chamada antiga: assertEquals(123, left.select(0))
nova chamada: assertEquals(123, left.select(0), "Era esperado valores iguais, mas  123 é diferente de " + result222 + " <left.select(0)>")
chamada antiga: assertEquals(1, left.getLongCardinality())
nova chamada: assertEquals(1, left.getLongCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result223 + " <left.getLongCardinality()>")
chamada antiga: assertEquals(123, left.select(0))
nova chamada: assertEquals(123, left.select(0), "Era esperado valores iguais, mas  123 é diferente de " + result224 + " <left.select(0)>")
chamada antiga: assertEquals(1, left.getLongCardinality())
nova chamada: assertEquals(1, left.getLongCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result225 + " <left.getLongCardinality()>")
chamada antiga: assertEquals(123, left.select(0))
nova chamada: assertEquals(123, left.select(0), "Era esperado valores iguais, mas  123 é diferente de " + result226 + " <left.select(0)>")
chamada antiga: assertEquals(2, map.getLongCardinality())
nova chamada: assertEquals(2, map.getLongCardinality(), "Era esperado valores iguais, mas  2 é diferente de " + result227 + " <map.getLongCardinality()>")
chamada antiga: assertEquals(1, map.select(1))
nova chamada: assertEquals(1, map.select(1), "Era esperado valores iguais, mas  1 é diferente de " + result228 + " <map.select(1)>")
chamada antiga: assertEquals(3, map.getLongCardinality())
nova chamada: assertEquals(3, map.getLongCardinality(), "Era esperado valores iguais, mas  3 é diferente de " + result229 + " <map.getLongCardinality()>")
chamada antiga: assertEquals(0x10001, map.select(1))
nova chamada: assertEquals(0x10001, map.select(1), "Era esperado valores iguais, mas  0x10001 é diferente de " + result230 + " <map.select(1)>")
chamada antiga: assertEquals(2, map.getLongCardinality())
nova chamada: assertEquals(2, map.getLongCardinality(), "Era esperado valores iguais, mas  2 é diferente de " + result231 + " <map.getLongCardinality()>")
chamada antiga: assertEquals(0x10001, map.select(1))
nova chamada: assertEquals(0x10001, map.select(1), "Era esperado valores iguais, mas  0x10001 é diferente de " + result232 + " <map.select(1)>")
chamada antiga: assertEquals(2, map.getLongCardinality())
nova chamada: assertEquals(2, map.getLongCardinality(), "Era esperado valores iguais, mas  2 é diferente de " + result233 + " <map.getLongCardinality()>")
chamada antiga: assertEquals(0xFFFF, map.select(1))
nova chamada: assertEquals(0xFFFF, map.select(1), "Era esperado valores iguais, mas  0xFFFF é diferente de " + result234 + " <map.select(1)>")
chamada antiga: assertEquals(4, map.getLongCardinality())
nova chamada: assertEquals(4, map.getLongCardinality(), "Era esperado valores iguais, mas  4 é diferente de " + result235 + " <map.getLongCardinality()>")
chamada antiga: assertEquals(0x10001, map.select(3))
nova chamada: assertEquals(0x10001, map.select(3), "Era esperado valores iguais, mas  0x10001 é diferente de " + result236 + " <map.select(3)>")
chamada antiga: assertEquals(2, map.getLongCardinality())
nova chamada: assertEquals(2, map.getLongCardinality(), "Era esperado valores iguais, mas  2 é diferente de " + result237 + " <map.getLongCardinality()>")
chamada antiga: assertEquals(1, map.select(0))
nova chamada: assertEquals(1, map.select(0), "Era esperado valores iguais, mas  1 é diferente de " + result238 + " <map.select(0)>")
chamada antiga: assertEquals(0x10001, map.select(1))
nova chamada: assertEquals(0x10001, map.select(1), "Era esperado valores iguais, mas  0x10001 é diferente de " + result239 + " <map.select(1)>")
chamada antiga: assertEquals(1, map.getLongCardinality())
nova chamada: assertEquals(1, map.getLongCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result240 + " <map.getLongCardinality()>")
chamada antiga: assertEquals(0, map.select(0))
nova chamada: assertEquals(0, map.select(0), "Era esperado valores iguais, mas  0 é diferente de " + result241 + " <map.select(0)>")
chamada antiga: assertEquals(1, map.getLongCardinality())
nova chamada: assertEquals(1, map.getLongCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result242 + " <map.getLongCardinality()>")
chamada antiga: assertEquals(0, map.select(0))
nova chamada: assertEquals(0, map.select(0), "Era esperado valores iguais, mas  0 é diferente de " + result243 + " <map.select(0)>")
chamada antiga: assertEquals(1, map.getLongCardinality())
nova chamada: assertEquals(1, map.getLongCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result244 + " <map.getLongCardinality()>")
chamada antiga: assertEquals(0, map.select(0))
nova chamada: assertEquals(0, map.select(0), "Era esperado valores iguais, mas  0 é diferente de " + result245 + " <map.select(0)>")
chamada antiga: assertEquals(1, map.getLongCardinality())
nova chamada: assertEquals(1, map.getLongCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result246 + " <map.getLongCardinality()>")
chamada antiga: assertEquals(0, map.select(0))
nova chamada: assertEquals(0, map.select(0), "Era esperado valores iguais, mas  0 é diferente de " + result247 + " <map.select(0)>")
chamada antiga: assertEquals(3, map.getLongCardinality())
nova chamada: assertEquals(3, map.getLongCardinality(), "Era esperado valores iguais, mas  3 é diferente de " + result248 + " <map.getLongCardinality()>")
chamada antiga: assertEquals(0L, map.select(0))
nova chamada: assertEquals(0L, map.select(0), "Era esperado valores iguais, mas  0L é diferente de " + result249 + " <map.select(0)>")
chamada antiga: assertEquals(0x7FffFFffFFffFFffL, map.select(1))
nova chamada: assertEquals(0x7FffFFffFFffFFffL, map.select(1), "Era esperado valores iguais, mas  0x7FffFFffFFffFFffL é diferente de " + result250 + " <map.select(1)>")
chamada antiga: assertEquals(0x8000000000000000L, map.select(2))
nova chamada: assertEquals(0x8000000000000000L, map.select(2), "Era esperado valores iguais, mas  0x8000000000000000L é diferente de " + result251 + " <map.select(2)>")
chamada antiga: assertEquals(3, map.getLongCardinality())
nova chamada: assertEquals(3, map.getLongCardinality(), "Era esperado valores iguais, mas  3 é diferente de " + result252 + " <map.getLongCardinality()>")
chamada antiga: assertEquals(0L, map.select(0))
nova chamada: assertEquals(0L, map.select(0), "Era esperado valores iguais, mas  0L é diferente de " + result253 + " <map.select(0)>")
chamada antiga: assertEquals(9223372036854775807L, map.select(1))
nova chamada: assertEquals(9223372036854775807L, map.select(1), "Era esperado valores iguais, mas  9223372036854775807L é diferente de " + result254 + " <map.select(1)>")
chamada antiga: assertEquals(-9223372036854775808L, map.select(2))
nova chamada: assertEquals(-9223372036854775808L, map.select(2), "Era esperado valores iguais, mas  -9223372036854775808L é diferente de " + result255 + " <map.select(2)>")
chamada antiga: assertEquals(2, map.getLongCardinality())
nova chamada: assertEquals(2, map.getLongCardinality(), "Era esperado valores iguais, mas  2 é diferente de " + result256 + " <map.getLongCardinality()>")
chamada antiga: assertEquals(0L, map.select(0))
nova chamada: assertEquals(0L, map.select(0), "Era esperado valores iguais, mas  0L é diferente de " + result257 + " <map.select(0)>")
chamada antiga: assertEquals(-4294967297L, map.select(1))
nova chamada: assertEquals(-4294967297L, map.select(1), "Era esperado valores iguais, mas  -4294967297L é diferente de " + result258 + " <map.select(1)>")
chamada antiga: assertEquals(3, map.getLongCardinality())
nova chamada: assertEquals(3, map.getLongCardinality(), "Era esperado valores iguais, mas  3 é diferente de " + result259 + " <map.getLongCardinality()>")
chamada antiga: assertEquals(0L, map.select(0))
nova chamada: assertEquals(0L, map.select(0), "Era esperado valores iguais, mas  0L é diferente de " + result260 + " <map.select(0)>")
chamada antiga: assertEquals(-2L, map.select(1))
nova chamada: assertEquals(-2L, map.select(1), "Era esperado valores iguais, mas  -2L é diferente de " + result261 + " <map.select(1)>")
chamada antiga: assertEquals("{123,9223372036854775807,-9223372036854775808}", map.toString())
nova chamada: assertEquals("{123,9223372036854775807,-9223372036854775808}", map.toString(), "Era esperado valores iguais, mas  '{123,9223372036854775807,-9223372036854775808}' é diferente de " + result262 + " <map.toString()>")
chamada antiga: assertEquals(map.getIntCardinality(), 1)
nova chamada: assertEquals(map.getIntCardinality(), 1, "Era esperado valores iguais, mas " + result263 + " <map.getIntCardinality()> é diferente de " + " 1")
chamada antiga: assertEquals(0xFFFFFFFFL, addedInt)
nova chamada: assertEquals(0xFFFFFFFFL, addedInt, "Era esperado valores iguais, mas  0xFFFFFFFFL é diferente de " + " addedInt")
chamada antiga: assertThrows(IllegalArgumentException.class, () -> map.add(0L, 0L))
nova chamada: assertThrows(IllegalArgumentException.class, () -> map.add(0L, 0L), "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(IllegalArgumentException.class, () -> map.add(1L, 0L))
nova chamada: assertThrows(IllegalArgumentException.class, () -> map.add(1L, 0L), "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(IllegalArgumentException.class, () -> map.add(-1, -2))
nova chamada: assertThrows(IllegalArgumentException.class, () -> map.add(-1, -2), "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(IllegalArgumentException.class, () -> map.add(Long.MAX_VALUE, 0L))
nova chamada: assertThrows(IllegalArgumentException.class, () -> map.add(Long.MAX_VALUE, 0L), "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(IllegalArgumentException.class, () -> map.add(Long.MIN_VALUE, Long.MAX_VALUE))
nova chamada: assertThrows(IllegalArgumentException.class, () -> map.add(Long.MIN_VALUE, Long.MAX_VALUE), "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: assertEquals(7L, map.getLongCardinality())
nova chamada: assertEquals(7L, map.getLongCardinality(), "Era esperado valores iguais, mas  7L é diferente de " + result264 + " <map.getLongCardinality()>")
chamada antiga: assertEquals(5L, map.select(0))
nova chamada: assertEquals(5L, map.select(0), "Era esperado valores iguais, mas  5L é diferente de " + result265 + " <map.select(0)>")
chamada antiga: assertEquals(11L, map.select(6L))
nova chamada: assertEquals(11L, map.select(6L), "Era esperado valores iguais, mas  11L é diferente de " + result266 + " <map.select(6L)>")
chamada antiga: assertEquals(2, map.getLongCardinality())
nova chamada: assertEquals(2, map.getLongCardinality(), "Era esperado valores iguais, mas  2 é diferente de " + result267 + " <map.getLongCardinality()>")
chamada antiga: assertEquals(end - 2, map.select(0))
nova chamada: assertEquals(end - 2, map.select(0), "Era esperado valores iguais, mas  end - 2 é diferente de " + result268 + " <map.select(0)>")
chamada antiga: assertEquals(end - 1, map.select(1))
nova chamada: assertEquals(end - 1, map.select(1), "Era esperado valores iguais, mas  end - 1 é diferente de " + result269 + " <map.select(1)>")
chamada antiga: assertEquals(nbItems, map.getLongCardinality())
nova chamada: assertEquals(nbItems, map.getLongCardinality(), "Era esperado valores iguais, mas  nbItems é diferente de " + result270 + " <map.getLongCardinality()>")
chamada antiga: assertEquals(from, map.select(0))
nova chamada: assertEquals(from, map.select(0), "Era esperado valores iguais, mas  from é diferente de " + result271 + " <map.select(0)>")
chamada antiga: assertEquals(to - 1, map.select(nbItems - 1))
nova chamada: assertEquals(to - 1, map.select(nbItems - 1), "Era esperado valores iguais, mas  to - 1 é diferente de " + result272 + " <map.select(nbItems - 1)>")
chamada antiga: assertThrows(IllegalArgumentException.class, () -> {
    RoaringBitmap map = new RoaringBitmap();
    map.add(0L, outOfRoaringBitmapRange);
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    RoaringBitmap map = new RoaringBitmap();
    map.add(0L, outOfRoaringBitmapRange);
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: assertEquals(outOfSingleRoaring, map.getLongCardinality())
nova chamada: assertEquals(outOfSingleRoaring, map.getLongCardinality(), "Era esperado valores iguais, mas  outOfSingleRoaring é diferente de " + result273 + " <map.getLongCardinality()>")
chamada antiga: assertEquals(outOfSingleRoaring, map.getLongCardinality())
nova chamada: assertEquals(outOfSingleRoaring, map.getLongCardinality(), "Era esperado valores iguais, mas  outOfSingleRoaring é diferente de " + result274 + " <map.getLongCardinality()>")
chamada antiga: assertEquals(0, map.select(0))
nova chamada: assertEquals(0, map.select(0), "Era esperado valores iguais, mas  0 é diferente de " + result275 + " <map.select(0)>")
chamada antiga: assertEquals(outOfSingleRoaring - 1, map.select(outOfSingleRoaring - 1))
nova chamada: assertEquals(outOfSingleRoaring - 1, map.select(outOfSingleRoaring - 1), "Era esperado valores iguais, mas  outOfSingleRoaring - 1 é diferente de " + result276 + " <map.select(outOfSingleRoaring - 1)>")
chamada antiga: assertEquals(maxForRoaringBitmap, map.getLongCardinality())
nova chamada: assertEquals(maxForRoaringBitmap, map.getLongCardinality(), "Era esperado valores iguais, mas  maxForRoaringBitmap é diferente de " + result277 + " <map.getLongCardinality()>")
chamada antiga: assertEquals(-1, map.select(-1))
nova chamada: assertEquals(-1, map.select(-1), "Era esperado valores iguais, mas  -1 é diferente de " + result278 + " <map.select(-1)>")
chamada antiga: assertNotEquals(RoaringIntPacking.high(to), RoaringIntPacking.high(from))
nova chamada: assertNotEquals(RoaringIntPacking.high(to), RoaringIntPacking.high(from), "Era esperado valores diferentes, mas " + result279 + " <RoaringIntPacking.high(to)> é igual a " + result280 + " <RoaringIntPacking.high(from)>")
chamada antiga: assertTrue(it.hasNext())
nova chamada: assertTrue(it.hasNext(), "Era esperado verdadeiro, mas " + result281 + " <it.hasNext()> é falso")
chamada antiga: assertEquals(123L, it.next().longValue())
nova chamada: assertEquals(123L, it.next().longValue(), "Era esperado valores iguais, mas  123L é diferente de " + result282 + " <it.next().longValue()>")
chamada antiga: assertTrue(it.hasNext())
nova chamada: assertTrue(it.hasNext(), "Era esperado verdadeiro, mas " + result283 + " <it.hasNext()> é falso")
chamada antiga: assertEquals(234, it.next().longValue())
nova chamada: assertEquals(234, it.next().longValue(), "Era esperado valores iguais, mas  234 é diferente de " + result284 + " <it.next().longValue()>")
chamada antiga: assertFalse(it.hasNext())
nova chamada: assertFalse(it.hasNext(), "Era esperado falso, mas " + result285 + " <it.hasNext()> é verdadeiro ")
chamada antiga: assertThrows(UnsupportedOperationException.class, () -> {
    Roaring64Bitmap map = newDefaultCtor();
    map.addLong(123);
    map.addLong(234);
    Iterator<Long> it = map.iterator();
    assertTrue(it.hasNext());
    it.remove();
})
nova chamada: assertThrows(UnsupportedOperationException.class, () -> {
    Roaring64Bitmap map = newDefaultCtor();
    map.addLong(123);
    map.addLong(234);
    Iterator<Long> it = map.iterator();
    assertTrue(it.hasNext());
    it.remove();
}, "Era esperado que a exceção  UnsupportedOperationException.class fosse lançada, mas não foi")
chamada antiga: assertEquals(123L, map.select(0))
nova chamada: assertEquals(123L, map.select(0), "Era esperado valores iguais, mas  123L é diferente de " + result286 + " <map.select(0)>")
chamada antiga: assertEquals(Long.MAX_VALUE, map.select(1))
nova chamada: assertEquals(Long.MAX_VALUE, map.select(1), "Era esperado valores iguais, mas  Long.MAX_VALUE é diferente de " + result287 + " <map.select(1)>")
chamada antiga: assertThrows(IllegalArgumentException.class, () -> {
    Roaring64Bitmap map = newDefaultCtor();
    map.select(0);
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    Roaring64Bitmap map = newDefaultCtor();
    map.select(0);
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(IllegalArgumentException.class, () -> {
    Roaring64Bitmap map = newDefaultCtor();
    map.addLong(123);
    map.select(1);
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    Roaring64Bitmap map = newDefaultCtor();
    map.addLong(123);
    map.select(1);
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(IllegalArgumentException.class, () -> {
    Roaring64Bitmap map = newDefaultCtor();
    map.addLong(123);
    map.select(2);
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    Roaring64Bitmap map = newDefaultCtor();
    map.addLong(123);
    map.select(2);
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: assertEquals(0, map.rankLong(0))
nova chamada: assertEquals(0, map.rankLong(0), "Era esperado valores iguais, mas  0 é diferente de " + result288 + " <map.rankLong(0)>")
chamada antiga: assertEquals(1, map.rankLong(123))
nova chamada: assertEquals(1, map.rankLong(123), "Era esperado valores iguais, mas  1 é diferente de " + result289 + " <map.rankLong(123)>")
chamada antiga: assertEquals(1, map.rankLong(Long.MAX_VALUE - 1))
nova chamada: assertEquals(1, map.rankLong(Long.MAX_VALUE - 1), "Era esperado valores iguais, mas  1 é diferente de " + result290 + " <map.rankLong(Long.MAX_VALUE - 1)>")
chamada antiga: assertEquals(2, map.rankLong(Long.MAX_VALUE))
nova chamada: assertEquals(2, map.rankLong(Long.MAX_VALUE), "Era esperado valores iguais, mas  2 é diferente de " + result291 + " <map.rankLong(Long.MAX_VALUE)>")
chamada antiga: assertEquals(1, map.rankLong(Long.MAX_VALUE / 2L))
nova chamada: assertEquals(1, map.rankLong(Long.MAX_VALUE / 2L), "Era esperado valores iguais, mas  1 é diferente de " + result292 + " <map.rankLong(Long.MAX_VALUE / 2L)>")
chamada antiga: assertEquals(1, r.getLongCardinality())
nova chamada: assertEquals(1, r.getLongCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result293 + " <r.getLongCardinality()>")
chamada antiga: assertEquals(0, r.getLongCardinality())
nova chamada: assertEquals(0, r.getLongCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result294 + " <r.getLongCardinality()>")
chamada antiga: assertFalse(map.contains(0))
nova chamada: assertFalse(map.contains(0), "Era esperado falso, mas " + result295 + " <map.contains(0)> é verdadeiro ")
chamada antiga: assertTrue(map.getLongCardinality() == 0)
nova chamada: assertTrue(map.getLongCardinality() == 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertArrayEquals(bitmapAsIntArray, Ints.toArray(Longs.asList(longBitmapAsArray)))
nova chamada: assertArrayEquals(bitmapAsIntArray, Ints.toArray(Longs.asList(longBitmapAsArray)), "Era esperado arrays iguais, mas  bitmapAsIntArray é diferente de " + result296 + " <Ints.toArray(Longs.asList(longBitmapAsArray))>")
chamada antiga: assertArrayEquals(Longs.toArray(Ints.asList(bitmapAsIntArray)), longBitmapAsArray)
nova chamada: assertArrayEquals(Longs.toArray(Ints.asList(bitmapAsIntArray)), longBitmapAsArray, "Era esperado arrays iguais, mas " + result297 + " <Longs.toArray(Ints.asList(bitmapAsIntArray))> é diferente de " + " longBitmapAsArray")
chamada antiga: assertTrue(map.isEmpty())
nova chamada: assertTrue(map.isEmpty(), "Era esperado verdadeiro, mas " + result298 + " <map.isEmpty()> é falso")
chamada antiga: assertEquals(left.hashCode(), right.hashCode())
nova chamada: assertEquals(left.hashCode(), right.hashCode(), "Era esperado valores iguais, mas " + result299 + " <left.hashCode()> é diferente de " + result300 + " <right.hashCode()>")
chamada antiga: assertEquals(left, right)
nova chamada: assertEquals(left, right, "Era esperado valores iguais, mas  left é diferente de " + " right")
chamada antiga: assertEquals(right, left)
nova chamada: assertEquals(right, left, "Era esperado valores iguais, mas  right é diferente de " + " left")
chamada antiga: assertEquals(0, compareRB.getIntCardinality())
nova chamada: assertEquals(0, compareRB.getIntCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result301 + " <compareRB.getIntCardinality()>")
chamada antiga: assertEquals(14, compareRB.getIntCardinality())
nova chamada: assertEquals(14, compareRB.getIntCardinality(), "Era esperado valores iguais, mas  14 é diferente de " + result302 + " <compareRB.getIntCardinality()>")
chamada antiga: assertEquals(13, compareRB.getIntCardinality())
nova chamada: assertEquals(13, compareRB.getIntCardinality(), "Era esperado valores iguais, mas  13 é diferente de " + result303 + " <compareRB.getIntCardinality()>")
chamada antiga: assertEquals(0, crossRB.getIntCardinality())
nova chamada: assertEquals(0, crossRB.getIntCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result304 + " <crossRB.getIntCardinality()>")
chamada antiga: assertEquals(0, crossRB.getIntCardinality())
nova chamada: assertEquals(0, crossRB.getIntCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result305 + " <crossRB.getIntCardinality()>")
chamada antiga: assertEquals(0, crossRB.getIntCardinality())
nova chamada: assertEquals(0, crossRB.getIntCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result306 + " <crossRB.getIntCardinality()>")
chamada antiga: assertEquals(b1, bitIt.peekNext())
nova chamada: assertEquals(b1, bitIt.peekNext(), "Era esperado valores iguais, mas  b1 é diferente de " + result307 + " <bitIt.peekNext()>")
chamada antiga: assertEquals(b1, bitIt.next())
nova chamada: assertEquals(b1, bitIt.next(), "Era esperado valores iguais, mas  b1 é diferente de " + result308 + " <bitIt.next()>")
chamada antiga: assertTrue(bitset.contains(p2))
nova chamada: assertTrue(bitset.contains(p2), "Era esperado verdadeiro, mas " + result309 + " <bitset.contains(p2)> é falso")
chamada antiga: assertEquals(p2, bitIt.peekNext())
nova chamada: assertEquals(p2, bitIt.peekNext(), "Era esperado valores iguais, mas  p2 é diferente de " + result310 + " <bitIt.peekNext()>")
chamada antiga: assertEquals(p2, bitIt.next())
nova chamada: assertEquals(p2, bitIt.next(), "Era esperado valores iguais, mas  p2 é diferente de " + result311 + " <bitIt.next()>")
chamada antiga: assertFalse(bitset.contains(pgap))
nova chamada: assertFalse(bitset.contains(pgap), "Era esperado falso, mas " + result312 + " <bitset.contains(pgap)> é verdadeiro ")
chamada antiga: assertTrue(bitset.contains(b2))
nova chamada: assertTrue(bitset.contains(b2), "Era esperado verdadeiro, mas " + result313 + " <bitset.contains(b2)> é falso")
chamada antiga: assertTrue(bitset.contains(b2e - 1L))
nova chamada: assertTrue(bitset.contains(b2e - 1L), "Era esperado verdadeiro, mas " + result314 + " <bitset.contains(b2e - 1L)> é falso")
chamada antiga: assertEquals(b2, bitIt.peekNext())
nova chamada: assertEquals(b2, bitIt.peekNext(), "Era esperado valores iguais, mas  b2 é diferente de " + result315 + " <bitIt.peekNext()>")
chamada antiga: assertTrue(bitset.contains(b2))
nova chamada: assertTrue(bitset.contains(b2), "Era esperado verdadeiro, mas " + result316 + " <bitset.contains(b2)> é falso")
chamada antiga: assertEquals(b2, bitIt.peekNext())
nova chamada: assertEquals(b2, bitIt.peekNext(), "Era esperado valores iguais, mas  b2 é diferente de " + result317 + " <bitIt.peekNext()>")
chamada antiga: assertEquals(b2, bitIt.next())
nova chamada: assertEquals(b2, bitIt.next(), "Era esperado valores iguais, mas  b2 é diferente de " + result318 + " <bitIt.next()>")
chamada antiga: assertEquals(b1, bitIt.peekNext())
nova chamada: assertEquals(b1, bitIt.peekNext(), "Era esperado valores iguais, mas  b1 é diferente de " + result319 + " <bitIt.peekNext()>")
chamada antiga: assertEquals(b1, bitIt.next())
nova chamada: assertEquals(b1, bitIt.next(), "Era esperado valores iguais, mas  b1 é diferente de " + result320 + " <bitIt.next()>")
chamada antiga: assertTrue(bitset.contains(p2))
nova chamada: assertTrue(bitset.contains(p2), "Era esperado verdadeiro, mas " + result321 + " <bitset.contains(p2)> é falso")
chamada antiga: assertEquals(p2, bitIt.peekNext())
nova chamada: assertEquals(p2, bitIt.peekNext(), "Era esperado valores iguais, mas  p2 é diferente de " + result322 + " <bitIt.peekNext()>")
chamada antiga: assertEquals(p2, bitIt.next())
nova chamada: assertEquals(p2, bitIt.next(), "Era esperado valores iguais, mas  p2 é diferente de " + result323 + " <bitIt.next()>")
chamada antiga: assertFalse(bitset.contains(pgapSameContainer))
nova chamada: assertFalse(bitset.contains(pgapSameContainer), "Era esperado falso, mas " + result324 + " <bitset.contains(pgapSameContainer)> é verdadeiro ")
chamada antiga: assertTrue(bitset.contains(b3))
nova chamada: assertTrue(bitset.contains(b3), "Era esperado verdadeiro, mas " + result325 + " <bitset.contains(b3)> é falso")
chamada antiga: assertTrue(bitset.contains(b3e - 1L))
nova chamada: assertTrue(bitset.contains(b3e - 1L), "Era esperado verdadeiro, mas " + result326 + " <bitset.contains(b3e - 1L)> é falso")
chamada antiga: assertEquals(b3, bitIt.peekNext())
nova chamada: assertEquals(b3, bitIt.peekNext(), "Era esperado valores iguais, mas  b3 é diferente de " + result327 + " <bitIt.peekNext()>")
chamada antiga: assertTrue(bitset.contains(b3))
nova chamada: assertTrue(bitset.contains(b3), "Era esperado verdadeiro, mas " + result328 + " <bitset.contains(b3)> é falso")
chamada antiga: assertEquals(b3, bitIt.peekNext())
nova chamada: assertEquals(b3, bitIt.peekNext(), "Era esperado valores iguais, mas  b3 é diferente de " + result329 + " <bitIt.peekNext()>")
chamada antiga: assertEquals(b3, bitIt.next())
nova chamada: assertEquals(b3, bitIt.next(), "Era esperado valores iguais, mas  b3 é diferente de " + result330 + " <bitIt.next()>")
chamada antiga: assertFalse(bitset.contains(pgapNextContainer))
nova chamada: assertFalse(bitset.contains(pgapNextContainer), "Era esperado falso, mas " + result331 + " <bitset.contains(pgapNextContainer)> é verdadeiro ")
chamada antiga: assertEquals(b3, bitIt.peekNext())
nova chamada: assertEquals(b3, bitIt.peekNext(), "Era esperado valores iguais, mas  b3 é diferente de " + result332 + " <bitIt.peekNext()>")
chamada antiga: assertEquals(b3, bitIt.peekNext())
nova chamada: assertEquals(b3, bitIt.peekNext(), "Era esperado valores iguais, mas  b3 é diferente de " + result333 + " <bitIt.peekNext()>")
chamada antiga: assertEquals(b3, bitIt.next())
nova chamada: assertEquals(b3, bitIt.next(), "Era esperado valores iguais, mas  b3 é diferente de " + result334 + " <bitIt.next()>")
chamada antiga: assertEquals(b2e - 1L, bitIt.peekNext())
nova chamada: assertEquals(b2e - 1L, bitIt.peekNext(), "Era esperado valores iguais, mas  b2e - 1L é diferente de " + result335 + " <bitIt.peekNext()>")
chamada antiga: assertEquals(b2e - 1L, bitIt.next())
nova chamada: assertEquals(b2e - 1L, bitIt.next(), "Era esperado valores iguais, mas  b2e - 1L é diferente de " + result336 + " <bitIt.next()>")
chamada antiga: assertTrue(bitset.contains(p2))
nova chamada: assertTrue(bitset.contains(p2), "Era esperado verdadeiro, mas " + result337 + " <bitset.contains(p2)> é falso")
chamada antiga: assertEquals(p2, bitIt.peekNext())
nova chamada: assertEquals(p2, bitIt.peekNext(), "Era esperado valores iguais, mas  p2 é diferente de " + result338 + " <bitIt.peekNext()>")
chamada antiga: assertEquals(p2, bitIt.next())
nova chamada: assertEquals(p2, bitIt.next(), "Era esperado valores iguais, mas  p2 é diferente de " + result339 + " <bitIt.next()>")
chamada antiga: assertFalse(bitset.contains(pgap))
nova chamada: assertFalse(bitset.contains(pgap), "Era esperado falso, mas " + result340 + " <bitset.contains(pgap)> é verdadeiro ")
chamada antiga: assertTrue(bitset.contains(b1))
nova chamada: assertTrue(bitset.contains(b1), "Era esperado verdadeiro, mas " + result341 + " <bitset.contains(b1)> é falso")
chamada antiga: assertTrue(bitset.contains(b1e - 1L))
nova chamada: assertTrue(bitset.contains(b1e - 1L), "Era esperado verdadeiro, mas " + result342 + " <bitset.contains(b1e - 1L)> é falso")
chamada antiga: assertEquals(b1e - 1L, bitIt.peekNext())
nova chamada: assertEquals(b1e - 1L, bitIt.peekNext(), "Era esperado valores iguais, mas  b1e - 1L é diferente de " + result343 + " <bitIt.peekNext()>")
chamada antiga: assertTrue(bitset.contains(b2))
nova chamada: assertTrue(bitset.contains(b2), "Era esperado verdadeiro, mas " + result344 + " <bitset.contains(b2)> é falso")
chamada antiga: assertEquals(b1e - 1L, bitIt.peekNext())
nova chamada: assertEquals(b1e - 1L, bitIt.peekNext(), "Era esperado valores iguais, mas  b1e - 1L é diferente de " + result345 + " <bitIt.peekNext()>")
chamada antiga: assertEquals(b1e - 1L, bitIt.next())
nova chamada: assertEquals(b1e - 1L, bitIt.next(), "Era esperado valores iguais, mas  b1e - 1L é diferente de " + result346 + " <bitIt.next()>")
chamada antiga: assertEquals(b3e - 1L, bitIt.peekNext())
nova chamada: assertEquals(b3e - 1L, bitIt.peekNext(), "Era esperado valores iguais, mas  b3e - 1L é diferente de " + result347 + " <bitIt.peekNext()>")
chamada antiga: assertEquals(b3e - 1L, bitIt.next())
nova chamada: assertEquals(b3e - 1L, bitIt.next(), "Era esperado valores iguais, mas  b3e - 1L é diferente de " + result348 + " <bitIt.next()>")
chamada antiga: assertTrue(bitset.contains(p3))
nova chamada: assertTrue(bitset.contains(p3), "Era esperado verdadeiro, mas " + result349 + " <bitset.contains(p3)> é falso")
chamada antiga: assertEquals(p3, bitIt.peekNext())
nova chamada: assertEquals(p3, bitIt.peekNext(), "Era esperado valores iguais, mas  p3 é diferente de " + result350 + " <bitIt.peekNext()>")
chamada antiga: assertEquals(p3, bitIt.next())
nova chamada: assertEquals(p3, bitIt.next(), "Era esperado valores iguais, mas  p3 é diferente de " + result351 + " <bitIt.next()>")
chamada antiga: assertFalse(bitset.contains(pgapSameContainer))
nova chamada: assertFalse(bitset.contains(pgapSameContainer), "Era esperado falso, mas " + result352 + " <bitset.contains(pgapSameContainer)> é verdadeiro ")
chamada antiga: assertTrue(bitset.contains(b1))
nova chamada: assertTrue(bitset.contains(b1), "Era esperado verdadeiro, mas " + result353 + " <bitset.contains(b1)> é falso")
chamada antiga: assertTrue(bitset.contains(b1e - 1L))
nova chamada: assertTrue(bitset.contains(b1e - 1L), "Era esperado verdadeiro, mas " + result354 + " <bitset.contains(b1e - 1L)> é falso")
chamada antiga: assertEquals(b1e - 1L, bitIt.peekNext())
nova chamada: assertEquals(b1e - 1L, bitIt.peekNext(), "Era esperado valores iguais, mas  b1e - 1L é diferente de " + result355 + " <bitIt.peekNext()>")
chamada antiga: assertTrue(bitset.contains(b1))
nova chamada: assertTrue(bitset.contains(b1), "Era esperado verdadeiro, mas " + result356 + " <bitset.contains(b1)> é falso")
chamada antiga: assertEquals(b1e - 1L, bitIt.peekNext())
nova chamada: assertEquals(b1e - 1L, bitIt.peekNext(), "Era esperado valores iguais, mas  b1e - 1L é diferente de " + result357 + " <bitIt.peekNext()>")
chamada antiga: assertEquals(b1e - 1L, bitIt.next())
nova chamada: assertEquals(b1e - 1L, bitIt.next(), "Era esperado valores iguais, mas  b1e - 1L é diferente de " + result358 + " <bitIt.next()>")
chamada antiga: assertFalse(bitset.contains(pgapNextContainer))
nova chamada: assertFalse(bitset.contains(pgapNextContainer), "Era esperado falso, mas " + result359 + " <bitset.contains(pgapNextContainer)> é verdadeiro ")
chamada antiga: assertEquals(b1e - 1L, bitIt.peekNext())
nova chamada: assertEquals(b1e - 1L, bitIt.peekNext(), "Era esperado valores iguais, mas  b1e - 1L é diferente de " + result360 + " <bitIt.peekNext()>")
chamada antiga: assertEquals(b1e - 1L, bitIt.peekNext())
nova chamada: assertEquals(b1e - 1L, bitIt.peekNext(), "Era esperado valores iguais, mas  b1e - 1L é diferente de " + result361 + " <bitIt.peekNext()>")
chamada antiga: assertEquals(b1e - 1L, bitIt.next())
nova chamada: assertEquals(b1e - 1L, bitIt.next(), "Era esperado valores iguais, mas  b1e - 1L é diferente de " + result362 + " <bitIt.next()>")
chamada antiga: assertEquals(Long.MAX_VALUE, bitIt.peekNext())
nova chamada: assertEquals(Long.MAX_VALUE, bitIt.peekNext(), "Era esperado valores iguais, mas  Long.MAX_VALUE é diferente de " + result363 + " <bitIt.peekNext()>")
chamada antiga: assertEquals(Long.MIN_VALUE + 1, bitIt.peekNext())
nova chamada: assertEquals(Long.MIN_VALUE + 1, bitIt.peekNext(), "Era esperado valores iguais, mas  Long.MIN_VALUE + 1 é diferente de " + result364 + " <bitIt.peekNext()>")
chamada antiga: assertEquals(Long.MIN_VALUE + 1, bitIt.peekNext())
nova chamada: assertEquals(Long.MIN_VALUE + 1, bitIt.peekNext(), "Era esperado valores iguais, mas  Long.MIN_VALUE + 1 é diferente de " + result365 + " <bitIt.peekNext()>")
chamada antiga: assertEquals(Long.MAX_VALUE, bitIt.peekNext())
nova chamada: assertEquals(Long.MAX_VALUE, bitIt.peekNext(), "Era esperado valores iguais, mas  Long.MAX_VALUE é diferente de " + result366 + " <bitIt.peekNext()>")
chamada antiga: assertThrows(NoSuchElementException.class, () -> lni.peekNext())
nova chamada: assertThrows(NoSuchElementException.class, () -> lni.peekNext(), "Era esperado que a exceção  NoSuchElementException.class fosse lançada, mas não foi")
chamada antiga: assertEquals(9900, consumer.getNumberOfValuesConsumed())
nova chamada: assertEquals(9900, consumer.getNumberOfValuesConsumed(), "Era esperado valores iguais, mas  9900 é diferente de " + result367 + " <consumer.getNumberOfValuesConsumed()>")
chamada antiga: assertEquals(1000, consumer2.getNumberOfValuesConsumed())
nova chamada: assertEquals(1000, consumer2.getNumberOfValuesConsumed(), "Era esperado valores iguais, mas  1000 é diferente de " + result368 + " <consumer2.getNumberOfValuesConsumed()>")
chamada antiga: assertEquals(5, consumer3.getNumberOfValuesConsumed())
nova chamada: assertEquals(5, consumer3.getNumberOfValuesConsumed(), "Era esperado valores iguais, mas  5 é diferente de " + result369 + " <consumer3.getNumberOfValuesConsumed()>")
chamada antiga: assertEquals(5, consumer4.getNumberOfValuesConsumed())
nova chamada: assertEquals(5, consumer4.getNumberOfValuesConsumed(), "Era esperado valores iguais, mas  5 é diferente de " + result370 + " <consumer4.getNumberOfValuesConsumed()>")
chamada antiga: assertEquals(100000, consumer.getNumberOfValuesConsumed())
nova chamada: assertEquals(100000, consumer.getNumberOfValuesConsumed(), "Era esperado valores iguais, mas  100000 é diferente de " + result371 + " <consumer.getNumberOfValuesConsumed()>")
chamada antiga: assertEquals(3500, consumer2.getNumberOfValuesConsumed())
nova chamada: assertEquals(3500, consumer2.getNumberOfValuesConsumed(), "Era esperado valores iguais, mas  3500 é diferente de " + result372 + " <consumer2.getNumberOfValuesConsumed()>")
chamada antiga: assertEquals(6, consumer3.getNumberOfValuesConsumed())
nova chamada: assertEquals(6, consumer3.getNumberOfValuesConsumed(), "Era esperado valores iguais, mas  6 é diferente de " + result373 + " <consumer3.getNumberOfValuesConsumed()>")
chamada antiga: assertEquals(100000, consumer.getNumberOfValuesConsumed())
nova chamada: assertEquals(100000, consumer.getNumberOfValuesConsumed(), "Era esperado valores iguais, mas  100000 é diferente de " + result374 + " <consumer.getNumberOfValuesConsumed()>")
chamada antiga: assertEquals(3500, consumer2.getNumberOfValuesConsumed())
nova chamada: assertEquals(3500, consumer2.getNumberOfValuesConsumed(), "Era esperado valores iguais, mas  3500 é diferente de " + result375 + " <consumer2.getNumberOfValuesConsumed()>")
chamada antiga: assertEquals(1000, consumer3.getNumberOfValuesConsumed())
nova chamada: assertEquals(1000, consumer3.getNumberOfValuesConsumed(), "Era esperado valores iguais, mas  1000 é diferente de " + result376 + " <consumer3.getNumberOfValuesConsumed()>")
chamada antiga: assertFalse(c.contains(275846320L))
nova chamada: assertFalse(c.contains(275846320L), "Era esperado falso, mas " + result377 + " <c.contains(275846320L)> é verdadeiro ")
chamada antiga: assertFalse(c.contains(275846320L))
nova chamada: assertFalse(c.contains(275846320L), "Era esperado falso, mas " + result378 + " <c.contains(275846320L)> é verdadeiro ")
chamada antiga: assertEquals(maxLong, 45011744312L)
nova chamada: assertEquals(maxLong, 45011744312L, "Era esperado valores iguais, mas  maxLong é diferente de " + " 45011744312L")
chamada antiga: assertEquals(expected[offset], value)
nova chamada: assertEquals(expected[offset], value, "Era esperado valores iguais, mas  expected[offset] é diferente de " + " value")
chamada antiga: assertTrue(b1.equals(Roaring64Bitmap.bitmapOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))
nova chamada: assertTrue(b1.equals(Roaring64Bitmap.bitmapOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)), "Era esperado verdadeiro, mas " + result379 + " <b1.equals(Roaring64Bitmap.bitmapOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))> é falso")
chamada antiga: assertTrue(b1.isEmpty())
nova chamada: assertTrue(b1.isEmpty(), "Era esperado verdadeiro, mas " + result380 + " <b1.isEmpty()> é falso")
chamada antiga: assertTrue(b1.equals(Roaring64Bitmap.bitmapOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))
nova chamada: assertTrue(b1.equals(Roaring64Bitmap.bitmapOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)), "Era esperado verdadeiro, mas " + result381 + " <b1.equals(Roaring64Bitmap.bitmapOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))> é falso")
chamada antiga: assertTrue(b1.isEmpty())
nova chamada: assertTrue(b1.isEmpty(), "Era esperado verdadeiro, mas " + result382 + " <b1.isEmpty()> é falso")
chamada antiga: assertEquals(count, 7)
nova chamada: assertEquals(count, 7, "Era esperado valores iguais, mas  count é diferente de " + " 7")
chamada antiga: Assertions.assertEquals(3L, x.getLongCardinality())
nova chamada: assertEquals(3L, x.getLongCardinality(), "Era esperado valores iguais, mas  3L é diferente de " + result383 + " <x.getLongCardinality()>")
chamada antiga: Assertions.assertArrayEquals(x.toArray(), new long[] { 0, Long.MAX_VALUE, -1L })
nova chamada: assertArrayEquals(x.toArray(), new long[] { 0, Long.MAX_VALUE, -1L }, "Era esperado arrays iguais, mas " + result384 + " <x.toArray()> é diferente de " + " new long[] { 0, Long.MAX_VALUE, -1L }")
chamada antiga: Assertions.assertEquals(4L, x.getLongCardinality())
nova chamada: assertEquals(4L, x.getLongCardinality(), "Era esperado valores iguais, mas  4L é diferente de " + result385 + " <x.getLongCardinality()>")
chamada antiga: Assertions.assertArrayEquals(x.toArray(), new long[] { Long.MAX_VALUE - 1L, Long.MAX_VALUE, Long.MIN_VALUE, Long.MIN_VALUE + 1L })
nova chamada: assertArrayEquals(x.toArray(), new long[] { Long.MAX_VALUE - 1L, Long.MAX_VALUE, Long.MIN_VALUE, Long.MIN_VALUE + 1L }, "Era esperado arrays iguais, mas " + result386 + " <x.toArray()> é diferente de " + " new long[] { Long.MAX_VALUE - 1L, Long.MAX_VALUE, Long.MIN_VALUE, Long.MIN_VALUE + 1L }")
chamada antiga: Assertions.assertEquals(2L, x.getLongCardinality())
nova chamada: assertEquals(2L, x.getLongCardinality(), "Era esperado valores iguais, mas  2L é diferente de " + result387 + " <x.getLongCardinality()>")
chamada antiga: Assertions.assertArrayEquals(new long[] { -3L, -2L }, x.toArray())
nova chamada: assertArrayEquals(new long[] { -3L, -2L }, x.toArray(), "Era esperado arrays iguais, mas  new long[] { -3L, -2L } é diferente de " + result388 + " <x.toArray()>")
chamada antiga: assertThrows(NoSuchElementException.class, () -> newDefaultCtor().first())
nova chamada: assertThrows(NoSuchElementException.class, () -> newDefaultCtor().first(), "Era esperado que a exceção  NoSuchElementException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(NoSuchElementException.class, () -> newDefaultCtor().last())
nova chamada: assertThrows(NoSuchElementException.class, () -> newDefaultCtor().last(), "Era esperado que a exceção  NoSuchElementException.class fosse lançada, mas não foi")
chamada antiga: assertEquals(2, rb.first())
nova chamada: assertEquals(2, rb.first(), "Era esperado valores iguais, mas  2 é diferente de " + result389 + " <rb.first()>")
chamada antiga: assertEquals(8, rb.last())
nova chamada: assertEquals(8, rb.last(), "Era esperado valores iguais, mas  8 é diferente de " + result390 + " <rb.last()>")
chamada antiga: assertEquals(-128, rb.first())
nova chamada: assertEquals(-128, rb.first(), "Era esperado valores iguais, mas  -128 é diferente de " + result391 + " <rb.first()>")
chamada antiga: assertEquals(-32, rb.last())
nova chamada: assertEquals(-32, rb.last(), "Era esperado valores iguais, mas  -32 é diferente de " + result392 + " <rb.last()>")
chamada antiga: assertEquals(2, rb.first())
nova chamada: assertEquals(2, rb.first(), "Era esperado valores iguais, mas  2 é diferente de " + result393 + " <rb.first()>")
chamada antiga: assertEquals(-32, rb.last())
nova chamada: assertEquals(-32, rb.last(), "Era esperado valores iguais, mas  -32 é diferente de " + result394 + " <rb.last()>")
chamada antiga: assertEquals(source.stream().min((l, r) -> Long.compareUnsigned(l, r)).get(), rb.first())
nova chamada: assertEquals(source.stream().min((l, r) -> Long.compareUnsigned(l, r)).get(), rb.first(), "Era esperado valores iguais, mas " + result395 + " <source.stream().min((l, r) -> Long.compareUnsigned(l, r)).get()> é diferente de " + result396 + " <rb.first()>")
chamada antiga: assertEquals(source.stream().max((l, r) -> Long.compareUnsigned(l, r)).get(), rb.last())
nova chamada: assertEquals(source.stream().max((l, r) -> Long.compareUnsigned(l, r)).get(), rb.last(), "Era esperado valores iguais, mas " + result397 + " <source.stream().max((l, r) -> Long.compareUnsigned(l, r)).get()> é diferente de " + result398 + " <rb.last()>")
chamada antiga: Assertions.assertEquals(0, leafNode.getContainerIdx())
nova chamada: assertEquals(0, leafNode.getContainerIdx(), "Era esperado valores iguais, mas  0 é diferente de " + result399 + " <leafNode.getContainerIdx()>")
chamada antiga: Assertions.assertEquals(1, leafNode.getContainerIdx())
nova chamada: assertEquals(1, leafNode.getContainerIdx(), "Era esperado valores iguais, mas  1 é diferente de " + result400 + " <leafNode.getContainerIdx()>")
chamada antiga: Assertions.assertEquals(1, containerIdx2)
nova chamada: assertEquals(1, containerIdx2, "Era esperado valores iguais, mas  1 é diferente de " + " containerIdx2")
chamada antiga: Assertions.assertEquals(0, leafNode.getContainerIdx())
nova chamada: assertEquals(0, leafNode.getContainerIdx(), "Era esperado valores iguais, mas  0 é diferente de " + result401 + " <leafNode.getContainerIdx()>")
chamada antiga: Assertions.assertEquals(1, leafNode.getContainerIdx())
nova chamada: assertEquals(1, leafNode.getContainerIdx(), "Era esperado valores iguais, mas  1 é diferente de " + result402 + " <leafNode.getContainerIdx()>")
chamada antiga: Assertions.assertEquals(3, containerIdx)
nova chamada: assertEquals(3, containerIdx, "Era esperado valores iguais, mas  3 é diferente de " + " containerIdx")
chamada antiga: Assertions.assertEquals(4, containerIdx)
nova chamada: assertEquals(4, containerIdx, "Era esperado valores iguais, mas  4 é diferente de " + " containerIdx")
chamada antiga: Assertions.assertEquals(art.findByKey(key5), deserArt.findByKey(key5))
nova chamada: assertEquals(art.findByKey(key5), deserArt.findByKey(key5), "Era esperado valores iguais, mas " + result403 + " <art.findByKey(key5)> é diferente de " + result404 + " <deserArt.findByKey(key5)>")
chamada antiga: Assertions.assertEquals(art.findByKey(key5), deserArt.findByKey(key5))
nova chamada: assertEquals(art.findByKey(key5), deserArt.findByKey(key5), "Era esperado valores iguais, mas " + result405 + " <art.findByKey(key5)> é diferente de " + result406 + " <deserArt.findByKey(key5)>")
chamada antiga: Assertions.assertEquals(2, containerIdx4)
nova chamada: assertEquals(2, containerIdx4, "Era esperado valores iguais, mas  2 é diferente de " + " containerIdx4")
chamada antiga: Assertions.assertEquals(art.findByKey(key13), deserArt.findByKey(key13))
nova chamada: assertEquals(art.findByKey(key13), deserArt.findByKey(key13), "Era esperado valores iguais, mas " + result407 + " <art.findByKey(key13)> é diferente de " + result408 + " <deserArt.findByKey(key13)>")
chamada antiga: Assertions.assertEquals(art.findByKey(key13), deserArt.findByKey(key13))
nova chamada: assertEquals(art.findByKey(key13), deserArt.findByKey(key13), "Era esperado valores iguais, mas " + result409 + " <art.findByKey(key13)> é diferente de " + result410 + " <deserArt.findByKey(key13)>")
chamada antiga: Assertions.assertEquals(art.getKeySize(), deserArt.getKeySize())
nova chamada: assertEquals(art.getKeySize(), deserArt.getKeySize(), "Era esperado valores iguais, mas " + result411 + " <art.getKeySize()> é diferente de " + result412 + " <deserArt.getKeySize()>")
chamada antiga: Assertions.assertEquals(11, containerIdx12)
nova chamada: assertEquals(11, containerIdx12, "Era esperado valores iguais, mas  11 é diferente de " + " containerIdx12")
chamada antiga: Assertions.assertEquals(10, containerIdx)
nova chamada: assertEquals(10, containerIdx, "Era esperado valores iguais, mas  10 é diferente de " + " containerIdx")
chamada antiga: Assertions.assertEquals(sizeInBytesI, byteArrayOutputStream.toByteArray().length)
nova chamada: assertEquals(sizeInBytesI, byteArrayOutputStream.toByteArray().length, "Era esperado valores iguais, mas  sizeInBytesI é diferente de " + " byteArrayOutputStream.toByteArray().length")
chamada antiga: Assertions.assertEquals(36, containerIdx)
nova chamada: assertEquals(36, containerIdx, "Era esperado valores iguais, mas  36 é diferente de " + " containerIdx")
chamada antiga: Assertions.assertEquals(36, containerIdx)
nova chamada: assertEquals(36, containerIdx, "Era esperado valores iguais, mas  36 é diferente de " + " containerIdx")
chamada antiga: assertEquals(revertVal, v)
nova chamada: assertEquals(revertVal, v, "Era esperado valores iguais, mas  revertVal é diferente de " + " v")
chamada antiga: assertEquals(revertVal, v)
nova chamada: assertEquals(revertVal, v, "Era esperado valores iguais, mas  revertVal é diferente de " + " v")
chamada antiga: assertEquals(revertVal, v)
nova chamada: assertEquals(revertVal, v, "Era esperado valores iguais, mas  revertVal é diferente de " + " v")
chamada antiga: assertEquals(0xBBCCDDDD, IntegerUtil.shiftLeftFromSpecifiedPosition(0xAABBCCDD, 0, 3))
nova chamada: assertEquals(0xBBCCDDDD, IntegerUtil.shiftLeftFromSpecifiedPosition(0xAABBCCDD, 0, 3), "Era esperado valores iguais, mas  0xBBCCDDDD é diferente de " + result413 + " <IntegerUtil.shiftLeftFromSpecifiedPosition(0xAABBCCDD, 0, 3)>")
chamada antiga: assertEquals(0xBBCCCCDD, IntegerUtil.shiftLeftFromSpecifiedPosition(0xAABBCCDD, 0, 2))
nova chamada: assertEquals(0xBBCCCCDD, IntegerUtil.shiftLeftFromSpecifiedPosition(0xAABBCCDD, 0, 2), "Era esperado valores iguais, mas  0xBBCCCCDD é diferente de " + result414 + " <IntegerUtil.shiftLeftFromSpecifiedPosition(0xAABBCCDD, 0, 2)>")
chamada antiga: assertEquals(0xBBBBCCDD, IntegerUtil.shiftLeftFromSpecifiedPosition(0xAABBCCDD, 0, 1))
nova chamada: assertEquals(0xBBBBCCDD, IntegerUtil.shiftLeftFromSpecifiedPosition(0xAABBCCDD, 0, 1), "Era esperado valores iguais, mas  0xBBBBCCDD é diferente de " + result415 + " <IntegerUtil.shiftLeftFromSpecifiedPosition(0xAABBCCDD, 0, 1)>")
chamada antiga: assertEquals(0xAABBCCDD, IntegerUtil.shiftLeftFromSpecifiedPosition(0xAABBCCDD, 0, 0))
nova chamada: assertEquals(0xAABBCCDD, IntegerUtil.shiftLeftFromSpecifiedPosition(0xAABBCCDD, 0, 0), "Era esperado valores iguais, mas  0xAABBCCDD é diferente de " + result416 + " <IntegerUtil.shiftLeftFromSpecifiedPosition(0xAABBCCDD, 0, 0)>")
chamada antiga: assertEquals(0xAACCDDDD, IntegerUtil.shiftLeftFromSpecifiedPosition(0xAABBCCDD, 1, 2))
nova chamada: assertEquals(0xAACCDDDD, IntegerUtil.shiftLeftFromSpecifiedPosition(0xAABBCCDD, 1, 2), "Era esperado valores iguais, mas  0xAACCDDDD é diferente de " + result417 + " <IntegerUtil.shiftLeftFromSpecifiedPosition(0xAABBCCDD, 1, 2)>")
chamada antiga: assertEquals(0xAACCCCDD, IntegerUtil.shiftLeftFromSpecifiedPosition(0xAABBCCDD, 1, 1))
nova chamada: assertEquals(0xAACCCCDD, IntegerUtil.shiftLeftFromSpecifiedPosition(0xAABBCCDD, 1, 1), "Era esperado valores iguais, mas  0xAACCCCDD é diferente de " + result418 + " <IntegerUtil.shiftLeftFromSpecifiedPosition(0xAABBCCDD, 1, 1)>")
chamada antiga: assertEquals(0xAABBCCDD, IntegerUtil.shiftLeftFromSpecifiedPosition(0xAABBCCDD, 1, 0))
nova chamada: assertEquals(0xAABBCCDD, IntegerUtil.shiftLeftFromSpecifiedPosition(0xAABBCCDD, 1, 0), "Era esperado valores iguais, mas  0xAABBCCDD é diferente de " + result419 + " <IntegerUtil.shiftLeftFromSpecifiedPosition(0xAABBCCDD, 1, 0)>")
chamada antiga: assertEquals(0xAABBDDDD, IntegerUtil.shiftLeftFromSpecifiedPosition(0xAABBCCDD, 2, 1))
nova chamada: assertEquals(0xAABBDDDD, IntegerUtil.shiftLeftFromSpecifiedPosition(0xAABBCCDD, 2, 1), "Era esperado valores iguais, mas  0xAABBDDDD é diferente de " + result420 + " <IntegerUtil.shiftLeftFromSpecifiedPosition(0xAABBCCDD, 2, 1)>")
chamada antiga: assertEquals(0xAABBCCDD, IntegerUtil.shiftLeftFromSpecifiedPosition(0xAABBCCDD, 2, 0))
nova chamada: assertEquals(0xAABBCCDD, IntegerUtil.shiftLeftFromSpecifiedPosition(0xAABBCCDD, 2, 0), "Era esperado valores iguais, mas  0xAABBCCDD é diferente de " + result421 + " <IntegerUtil.shiftLeftFromSpecifiedPosition(0xAABBCCDD, 2, 0)>")
chamada antiga: assertEquals(0xAABBCCDD, IntegerUtil.shiftLeftFromSpecifiedPosition(0xAABBCCDD, 3, 0))
nova chamada: assertEquals(0xAABBCCDD, IntegerUtil.shiftLeftFromSpecifiedPosition(0xAABBCCDD, 3, 0), "Era esperado valores iguais, mas  0xAABBCCDD é diferente de " + result422 + " <IntegerUtil.shiftLeftFromSpecifiedPosition(0xAABBCCDD, 3, 0)>")
chamada antiga: Assertions.assertDoesNotThrow(bitmap::toArray)
nova chamada: assertDoesNotThrow(bitmap::toArray, "Era esperado que nenhuma exceção fosse lançada, mas  bitmap::toArray foi lançada")
chamada antiga: Assertions.assertTrue(hasNext)
nova chamada: assertTrue(hasNext, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(BytesUtil.same(leafNode.getKeyBytes(), key1))
nova chamada: assertTrue(BytesUtil.same(leafNode.getKeyBytes(), key1), "Era esperado verdadeiro, mas " + result423 + " <BytesUtil.same(leafNode.getKeyBytes(), key1)> é falso")
chamada antiga: Assertions.assertTrue(leafNode.getContainerIdx() == 0)
nova chamada: assertTrue(leafNode.getContainerIdx() == 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(!hasNext)
nova chamada: assertTrue(!hasNext, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(art.findByKey(key1) == Node.ILLEGAL_IDX)
nova chamada: assertTrue(art.findByKey(key1) == Node.ILLEGAL_IDX, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(hasNext)
nova chamada: assertTrue(hasNext, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(BytesUtil.same(leafNode.getKeyBytes(), key1))
nova chamada: assertTrue(BytesUtil.same(leafNode.getKeyBytes(), key1), "Era esperado verdadeiro, mas " + result424 + " <BytesUtil.same(leafNode.getKeyBytes(), key1)> é falso")
chamada antiga: Assertions.assertTrue(hasNext)
nova chamada: assertTrue(hasNext, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(BytesUtil.same(leafNode.getKeyBytes(), key2))
nova chamada: assertTrue(BytesUtil.same(leafNode.getKeyBytes(), key2), "Era esperado verdadeiro, mas " + result425 + " <BytesUtil.same(leafNode.getKeyBytes(), key2)> é falso")
chamada antiga: Assertions.assertTrue(!hasNext)
nova chamada: assertTrue(!hasNext, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(hasNext)
nova chamada: assertTrue(hasNext, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(BytesUtil.same(leafNode.getKeyBytes(), key1))
nova chamada: assertTrue(BytesUtil.same(leafNode.getKeyBytes(), key1), "Era esperado verdadeiro, mas " + result426 + " <BytesUtil.same(leafNode.getKeyBytes(), key1)> é falso")
chamada antiga: Assertions.assertTrue(hasNext)
nova chamada: assertTrue(hasNext, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(BytesUtil.same(leafNode.getKeyBytes(), key2))
nova chamada: assertTrue(BytesUtil.same(leafNode.getKeyBytes(), key2), "Era esperado verdadeiro, mas " + result427 + " <BytesUtil.same(leafNode.getKeyBytes(), key2)> é falso")
chamada antiga: Assertions.assertTrue(hasNext)
nova chamada: assertTrue(hasNext, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(containerIdx == 0)
nova chamada: assertTrue(containerIdx == 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(containerIdx == 10)
nova chamada: assertTrue(containerIdx == 10, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(containerIdx == 12)
nova chamada: assertTrue(containerIdx == 12, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(containerIdx == 0)
nova chamada: assertTrue(containerIdx == 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(containerIdx == 16)
nova chamada: assertTrue(containerIdx == 16, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(containerIdx == 36)
nova chamada: assertTrue(containerIdx == 36, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(containerIdx == Node.ILLEGAL_IDX)
nova chamada: assertTrue(containerIdx == Node.ILLEGAL_IDX, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(containerIdx == 10)
nova chamada: assertTrue(containerIdx == 10, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(hasNext)
nova chamada: assertTrue(hasNext, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key0))
nova chamada: assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key0), "Era esperado verdadeiro, mas " + result428 + " <BytesUtil.same(lnIt.peekNext().getKeyBytes(), key0)> é falso")
chamada antiga: Assertions.assertTrue(lnIt.hasNext())
nova chamada: assertTrue(lnIt.hasNext(), "Era esperado verdadeiro, mas " + result429 + " <lnIt.hasNext()> é falso")
chamada antiga: Assertions.assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key0))
nova chamada: assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key0), "Era esperado verdadeiro, mas " + result430 + " <BytesUtil.same(lnIt.peekNext().getKeyBytes(), key0)> é falso")
chamada antiga: Assertions.assertTrue(lnIt.hasNext())
nova chamada: assertTrue(lnIt.hasNext(), "Era esperado verdadeiro, mas " + result431 + " <lnIt.hasNext()> é falso")
chamada antiga: Assertions.assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key1))
nova chamada: assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key1), "Era esperado verdadeiro, mas " + result432 + " <BytesUtil.same(lnIt.peekNext().getKeyBytes(), key1)> é falso")
chamada antiga: Assertions.assertTrue(lnIt.hasNext())
nova chamada: assertTrue(lnIt.hasNext(), "Era esperado verdadeiro, mas " + result433 + " <lnIt.hasNext()> é falso")
chamada antiga: Assertions.assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key2))
nova chamada: assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key2), "Era esperado verdadeiro, mas " + result434 + " <BytesUtil.same(lnIt.peekNext().getKeyBytes(), key2)> é falso")
chamada antiga: Assertions.assertTrue(BytesUtil.same(lnIt.next().getKeyBytes(), key2))
nova chamada: assertTrue(BytesUtil.same(lnIt.next().getKeyBytes(), key2), "Era esperado verdadeiro, mas " + result435 + " <BytesUtil.same(lnIt.next().getKeyBytes(), key2)> é falso")
chamada antiga: Assertions.assertFalse(lnIt.hasNext())
nova chamada: assertFalse(lnIt.hasNext(), "Era esperado falso, mas " + result436 + " <lnIt.hasNext()> é verdadeiro ")
chamada antiga: Assertions.assertTrue(lnIt.hasNext())
nova chamada: assertTrue(lnIt.hasNext(), "Era esperado verdadeiro, mas " + result437 + " <lnIt.hasNext()> é falso")
chamada antiga: Assertions.assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key1))
nova chamada: assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key1), "Era esperado verdadeiro, mas " + result438 + " <BytesUtil.same(lnIt.peekNext().getKeyBytes(), key1)> é falso")
chamada antiga: Assertions.assertTrue(hasNext)
nova chamada: assertTrue(hasNext, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key2))
nova chamada: assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key2), "Era esperado verdadeiro, mas " + result439 + " <BytesUtil.same(lnIt.peekNext().getKeyBytes(), key2)> é falso")
chamada antiga: Assertions.assertTrue(lnIt.hasNext())
nova chamada: assertTrue(lnIt.hasNext(), "Era esperado verdadeiro, mas " + result440 + " <lnIt.hasNext()> é falso")
chamada antiga: Assertions.assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key2))
nova chamada: assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key2), "Era esperado verdadeiro, mas " + result441 + " <BytesUtil.same(lnIt.peekNext().getKeyBytes(), key2)> é falso")
chamada antiga: Assertions.assertTrue(lnIt.hasNext())
nova chamada: assertTrue(lnIt.hasNext(), "Era esperado verdadeiro, mas " + result442 + " <lnIt.hasNext()> é falso")
chamada antiga: Assertions.assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key1))
nova chamada: assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key1), "Era esperado verdadeiro, mas " + result443 + " <BytesUtil.same(lnIt.peekNext().getKeyBytes(), key1)> é falso")
chamada antiga: Assertions.assertTrue(lnIt.hasNext())
nova chamada: assertTrue(lnIt.hasNext(), "Era esperado verdadeiro, mas " + result444 + " <lnIt.hasNext()> é falso")
chamada antiga: Assertions.assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key0))
nova chamada: assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key0), "Era esperado verdadeiro, mas " + result445 + " <BytesUtil.same(lnIt.peekNext().getKeyBytes(), key0)> é falso")
chamada antiga: Assertions.assertTrue(BytesUtil.same(lnIt.next().getKeyBytes(), key0))
nova chamada: assertTrue(BytesUtil.same(lnIt.next().getKeyBytes(), key0), "Era esperado verdadeiro, mas " + result446 + " <BytesUtil.same(lnIt.next().getKeyBytes(), key0)> é falso")
chamada antiga: Assertions.assertFalse(lnIt.hasNext())
nova chamada: assertFalse(lnIt.hasNext(), "Era esperado falso, mas " + result447 + " <lnIt.hasNext()> é verdadeiro ")
chamada antiga: Assertions.assertTrue(lnIt.hasNext())
nova chamada: assertTrue(lnIt.hasNext(), "Era esperado verdadeiro, mas " + result448 + " <lnIt.hasNext()> é falso")
chamada antiga: Assertions.assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key1))
nova chamada: assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key1), "Era esperado verdadeiro, mas " + result449 + " <BytesUtil.same(lnIt.peekNext().getKeyBytes(), key1)> é falso")
chamada antiga: Assertions.assertTrue(hasNext)
nova chamada: assertTrue(hasNext, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key0))
nova chamada: assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key0), "Era esperado verdadeiro, mas " + result450 + " <BytesUtil.same(lnIt.peekNext().getKeyBytes(), key0)> é falso")
chamada antiga: Assertions.assertTrue(lnIt.hasNext())
nova chamada: assertTrue(lnIt.hasNext(), "Era esperado verdadeiro, mas " + result451 + " <lnIt.hasNext()> é falso")
chamada antiga: Assertions.assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key0))
nova chamada: assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key0), "Era esperado verdadeiro, mas " + result452 + " <BytesUtil.same(lnIt.peekNext().getKeyBytes(), key0)> é falso")
chamada antiga: Assertions.assertTrue(lnIt.hasNext())
nova chamada: assertTrue(lnIt.hasNext(), "Era esperado verdadeiro, mas " + result453 + " <lnIt.hasNext()> é falso")
chamada antiga: Assertions.assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key1))
nova chamada: assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key1), "Era esperado verdadeiro, mas " + result454 + " <BytesUtil.same(lnIt.peekNext().getKeyBytes(), key1)> é falso")
chamada antiga: Assertions.assertTrue(lnIt.hasNext())
nova chamada: assertTrue(lnIt.hasNext(), "Era esperado verdadeiro, mas " + result455 + " <lnIt.hasNext()> é falso")
chamada antiga: Assertions.assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key2))
nova chamada: assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key2), "Era esperado verdadeiro, mas " + result456 + " <BytesUtil.same(lnIt.peekNext().getKeyBytes(), key2)> é falso")
chamada antiga: Assertions.assertTrue(BytesUtil.same(lnIt.next().getKeyBytes(), key2))
nova chamada: assertTrue(BytesUtil.same(lnIt.next().getKeyBytes(), key2), "Era esperado verdadeiro, mas " + result457 + " <BytesUtil.same(lnIt.next().getKeyBytes(), key2)> é falso")
chamada antiga: Assertions.assertFalse(lnIt.hasNext())
nova chamada: assertFalse(lnIt.hasNext(), "Era esperado falso, mas " + result458 + " <lnIt.hasNext()> é verdadeiro ")
chamada antiga: Assertions.assertTrue(lnIt.hasNext())
nova chamada: assertTrue(lnIt.hasNext(), "Era esperado verdadeiro, mas " + result459 + " <lnIt.hasNext()> é falso")
chamada antiga: Assertions.assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key0))
nova chamada: assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key0), "Era esperado verdadeiro, mas " + result460 + " <BytesUtil.same(lnIt.peekNext().getKeyBytes(), key0)> é falso")
chamada antiga: Assertions.assertTrue(lnIt.hasNext())
nova chamada: assertTrue(lnIt.hasNext(), "Era esperado verdadeiro, mas " + result461 + " <lnIt.hasNext()> é falso")
chamada antiga: Assertions.assertFalse(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key0))
nova chamada: assertFalse(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key0), "Era esperado falso, mas " + result462 + " <BytesUtil.same(lnIt.peekNext().getKeyBytes(), key0)> é verdadeiro ")
chamada antiga: Assertions.assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key1))
nova chamada: assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key1), "Era esperado verdadeiro, mas " + result463 + " <BytesUtil.same(lnIt.peekNext().getKeyBytes(), key1)> é falso")
chamada antiga: Assertions.assertTrue(lnIt.hasNext())
nova chamada: assertTrue(lnIt.hasNext(), "Era esperado verdadeiro, mas " + result464 + " <lnIt.hasNext()> é falso")
chamada antiga: Assertions.assertFalse(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key0))
nova chamada: assertFalse(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key0), "Era esperado falso, mas " + result465 + " <BytesUtil.same(lnIt.peekNext().getKeyBytes(), key0)> é verdadeiro ")
chamada antiga: Assertions.assertFalse(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key1))
nova chamada: assertFalse(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key1), "Era esperado falso, mas " + result466 + " <BytesUtil.same(lnIt.peekNext().getKeyBytes(), key1)> é verdadeiro ")
chamada antiga: Assertions.assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key2))
nova chamada: assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key2), "Era esperado verdadeiro, mas " + result467 + " <BytesUtil.same(lnIt.peekNext().getKeyBytes(), key2)> é falso")
chamada antiga: Assertions.assertFalse(lnIt.hasNext())
nova chamada: assertFalse(lnIt.hasNext(), "Era esperado falso, mas " + result468 + " <lnIt.hasNext()> é verdadeiro ")
chamada antiga: Assertions.assertTrue(lnIt.hasNext())
nova chamada: assertTrue(lnIt.hasNext(), "Era esperado verdadeiro, mas " + result469 + " <lnIt.hasNext()> é falso")
chamada antiga: Assertions.assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key0))
nova chamada: assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key0), "Era esperado verdadeiro, mas " + result470 + " <BytesUtil.same(lnIt.peekNext().getKeyBytes(), key0)> é falso")
chamada antiga: Assertions.assertTrue(hasNext)
nova chamada: assertTrue(hasNext, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key0))
nova chamada: assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key0), "Era esperado verdadeiro, mas " + result471 + " <BytesUtil.same(lnIt.peekNext().getKeyBytes(), key0)> é falso")
chamada antiga: Assertions.assertTrue(lnIt.hasNext())
nova chamada: assertTrue(lnIt.hasNext(), "Era esperado verdadeiro, mas " + result472 + " <lnIt.hasNext()> é falso")
chamada antiga: Assertions.assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key0))
nova chamada: assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key0), "Era esperado verdadeiro, mas " + result473 + " <BytesUtil.same(lnIt.peekNext().getKeyBytes(), key0)> é falso")
chamada antiga: Assertions.assertTrue(lnIt.hasNext())
nova chamada: assertTrue(lnIt.hasNext(), "Era esperado verdadeiro, mas " + result474 + " <lnIt.hasNext()> é falso")
chamada antiga: Assertions.assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key1))
nova chamada: assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key1), "Era esperado verdadeiro, mas " + result475 + " <BytesUtil.same(lnIt.peekNext().getKeyBytes(), key1)> é falso")
chamada antiga: Assertions.assertTrue(lnIt.hasNext())
nova chamada: assertTrue(lnIt.hasNext(), "Era esperado verdadeiro, mas " + result476 + " <lnIt.hasNext()> é falso")
chamada antiga: Assertions.assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key2))
nova chamada: assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key2), "Era esperado verdadeiro, mas " + result477 + " <BytesUtil.same(lnIt.peekNext().getKeyBytes(), key2)> é falso")
chamada antiga: Assertions.assertTrue(BytesUtil.same(lnIt.next().getKeyBytes(), key2))
nova chamada: assertTrue(BytesUtil.same(lnIt.next().getKeyBytes(), key2), "Era esperado verdadeiro, mas " + result478 + " <BytesUtil.same(lnIt.next().getKeyBytes(), key2)> é falso")
chamada antiga: Assertions.assertFalse(lnIt.hasNext())
nova chamada: assertFalse(lnIt.hasNext(), "Era esperado falso, mas " + result479 + " <lnIt.hasNext()> é verdadeiro ")
chamada antiga: Assertions.assertTrue(lnIt.hasNext())
nova chamada: assertTrue(lnIt.hasNext(), "Era esperado verdadeiro, mas " + result480 + " <lnIt.hasNext()> é falso")
chamada antiga: Assertions.assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key0))
nova chamada: assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key0), "Era esperado verdadeiro, mas " + result481 + " <BytesUtil.same(lnIt.peekNext().getKeyBytes(), key0)> é falso")
chamada antiga: Assertions.assertTrue(lnIt.hasNext())
nova chamada: assertTrue(lnIt.hasNext(), "Era esperado verdadeiro, mas " + result482 + " <lnIt.hasNext()> é falso")
chamada antiga: Assertions.assertFalse(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key0))
nova chamada: assertFalse(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key0), "Era esperado falso, mas " + result483 + " <BytesUtil.same(lnIt.peekNext().getKeyBytes(), key0)> é verdadeiro ")
chamada antiga: Assertions.assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key1))
nova chamada: assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key1), "Era esperado verdadeiro, mas " + result484 + " <BytesUtil.same(lnIt.peekNext().getKeyBytes(), key1)> é falso")
chamada antiga: Assertions.assertTrue(lnIt.hasNext())
nova chamada: assertTrue(lnIt.hasNext(), "Era esperado verdadeiro, mas " + result485 + " <lnIt.hasNext()> é falso")
chamada antiga: Assertions.assertFalse(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key0))
nova chamada: assertFalse(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key0), "Era esperado falso, mas " + result486 + " <BytesUtil.same(lnIt.peekNext().getKeyBytes(), key0)> é verdadeiro ")
chamada antiga: Assertions.assertFalse(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key1))
nova chamada: assertFalse(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key1), "Era esperado falso, mas " + result487 + " <BytesUtil.same(lnIt.peekNext().getKeyBytes(), key1)> é verdadeiro ")
chamada antiga: Assertions.assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key2))
nova chamada: assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key2), "Era esperado verdadeiro, mas " + result488 + " <BytesUtil.same(lnIt.peekNext().getKeyBytes(), key2)> é falso")
chamada antiga: Assertions.assertFalse(lnIt.hasNext())
nova chamada: assertFalse(lnIt.hasNext(), "Era esperado falso, mas " + result489 + " <lnIt.hasNext()> é verdadeiro ")
chamada antiga: Assertions.assertTrue(lnIt.hasNext())
nova chamada: assertTrue(lnIt.hasNext(), "Era esperado verdadeiro, mas " + result490 + " <lnIt.hasNext()> é falso")
chamada antiga: Assertions.assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key0))
nova chamada: assertTrue(BytesUtil.same(lnIt.peekNext().getKeyBytes(), key0), "Era esperado verdadeiro, mas " + result491 + " <BytesUtil.same(lnIt.peekNext().getKeyBytes(), key0)> é falso")
chamada antiga: Assertions.assertTrue(container == arrayContainer)
nova chamada: assertTrue(container == arrayContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(container == bitmapContainer)
nova chamada: assertTrue(container == bitmapContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(container == runContainer)
nova chamada: assertTrue(container == runContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(containerSize == 3)
nova chamada: assertTrue(containerSize == 3, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(container != arrayContainer)
nova chamada: assertTrue(container != arrayContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(container == anotherArrayContainer)
nova chamada: assertTrue(container == anotherArrayContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(i == 3)
nova chamada: assertTrue(i == 3, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertEquals(23, replacedContainer.select(0))
nova chamada: assertEquals(23, replacedContainer.select(0), "Era esperado valores iguais, mas  23 é diferente de " + result492 + " <replacedContainer.select(0)>")
chamada antiga: Assertions.assertTrue(replacedContainer == arrayContainer1)
nova chamada: assertTrue(replacedContainer == arrayContainer1, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertEquals(1, containerSize)
nova chamada: assertEquals(1, containerSize, "Era esperado valores iguais, mas  1 é diferente de " + " containerSize")
chamada antiga: Assertions.assertTrue(container instanceof ArrayContainer)
nova chamada: assertTrue(container instanceof ArrayContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertEquals(20, deseredArrayContainer.getCardinality())
nova chamada: assertEquals(20, deseredArrayContainer.getCardinality(), "Era esperado valores iguais, mas  20 é diferente de " + result493 + " <deseredArrayContainer.getCardinality()>")
chamada antiga: Assertions.assertEquals(1, containerSize)
nova chamada: assertEquals(1, containerSize, "Era esperado valores iguais, mas  1 é diferente de " + " containerSize")
chamada antiga: Assertions.assertTrue(container instanceof ArrayContainer)
nova chamada: assertTrue(container instanceof ArrayContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertEquals(20, container.getCardinality())
nova chamada: assertEquals(20, container.getCardinality(), "Era esperado valores iguais, mas  20 é diferente de " + result494 + " <container.getCardinality()>")
chamada antiga: Assertions.assertFalse(LongUtils.isMaxHigh(LongUtils.highPart(0)))
nova chamada: assertFalse(LongUtils.isMaxHigh(LongUtils.highPart(0)), "Era esperado falso, mas " + result495 + " <LongUtils.isMaxHigh(LongUtils.highPart(0))> é verdadeiro ")
chamada antiga: Assertions.assertFalse(LongUtils.isMaxHigh(LongUtils.highPart(Long.MAX_VALUE)))
nova chamada: assertFalse(LongUtils.isMaxHigh(LongUtils.highPart(Long.MAX_VALUE)), "Era esperado falso, mas " + result496 + " <LongUtils.isMaxHigh(LongUtils.highPart(Long.MAX_VALUE))> é verdadeiro ")
chamada antiga: Assertions.assertFalse(LongUtils.isMaxHigh(LongUtils.highPart(Long.MIN_VALUE)))
nova chamada: assertFalse(LongUtils.isMaxHigh(LongUtils.highPart(Long.MIN_VALUE)), "Era esperado falso, mas " + result497 + " <LongUtils.isMaxHigh(LongUtils.highPart(Long.MIN_VALUE))> é verdadeiro ")
chamada antiga: Assertions.assertTrue(LongUtils.isMaxHigh(LongUtils.highPart(-1L)))
nova chamada: assertTrue(LongUtils.isMaxHigh(LongUtils.highPart(-1L)), "Era esperado verdadeiro, mas " + result498 + " <LongUtils.isMaxHigh(LongUtils.highPart(-1L))> é falso")
chamada antiga: assertArrayEquals(expectedCardinalities, Arrays.copyOf(bitmap.getSortedCumulatedCardinality(), expectedCardinalities.length))
nova chamada: assertArrayEquals(expectedCardinalities, Arrays.copyOf(bitmap.getSortedCumulatedCardinality(), expectedCardinalities.length), "Era esperado arrays iguais, mas  expectedCardinalities é diferente de " + result499 + " <Arrays.copyOf(bitmap.getSortedCumulatedCardinality(), expectedCardinalities.length)>")
chamada antiga: assertEquals(baos.toByteArray().length, bitmap.serializedSizeInBytes())
nova chamada: assertEquals(baos.toByteArray().length, bitmap.serializedSizeInBytes(), "Era esperado valores iguais, mas  baos.toByteArray().length é diferente de " + result500 + " <bitmap.serializedSizeInBytes()>")
chamada antiga: assertNotNull(new RoaringIntPacking())
nova chamada: assertNotNull(new RoaringIntPacking(), "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertFalse(map.getLongIterator().hasNext())
nova chamada: assertFalse(map.getLongIterator().hasNext(), "Era esperado falso, mas " + result501 + " <map.getLongIterator().hasNext()> é verdadeiro ")
chamada antiga: assertEquals(0, map.getLongCardinality())
nova chamada: assertEquals(0, map.getLongCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result502 + " <map.getLongCardinality()>")
chamada antiga: assertTrue(map.isEmpty())
nova chamada: assertTrue(map.isEmpty(), "Era esperado verdadeiro, mas " + result503 + " <map.isEmpty()> é falso")
chamada antiga: assertFalse(map.contains(0))
nova chamada: assertFalse(map.contains(0), "Era esperado falso, mas " + result504 + " <map.contains(0)> é verdadeiro ")
chamada antiga: assertEquals(0, map.rankLong(Long.MIN_VALUE))
nova chamada: assertEquals(0, map.rankLong(Long.MIN_VALUE), "Era esperado valores iguais, mas  0 é diferente de " + result505 + " <map.rankLong(Long.MIN_VALUE)>")
chamada antiga: assertEquals(0, map.rankLong(Long.MIN_VALUE + 1))
nova chamada: assertEquals(0, map.rankLong(Long.MIN_VALUE + 1), "Era esperado valores iguais, mas  0 é diferente de " + result506 + " <map.rankLong(Long.MIN_VALUE + 1)>")
chamada antiga: assertEquals(0, map.rankLong(-1))
nova chamada: assertEquals(0, map.rankLong(-1), "Era esperado valores iguais, mas  0 é diferente de " + result507 + " <map.rankLong(-1)>")
chamada antiga: assertEquals(0, map.rankLong(0))
nova chamada: assertEquals(0, map.rankLong(0), "Era esperado valores iguais, mas  0 é diferente de " + result508 + " <map.rankLong(0)>")
chamada antiga: assertEquals(0, map.rankLong(1))
nova chamada: assertEquals(0, map.rankLong(1), "Era esperado valores iguais, mas  0 é diferente de " + result509 + " <map.rankLong(1)>")
chamada antiga: assertEquals(0, map.rankLong(Long.MAX_VALUE - 1))
nova chamada: assertEquals(0, map.rankLong(Long.MAX_VALUE - 1), "Era esperado valores iguais, mas  0 é diferente de " + result510 + " <map.rankLong(Long.MAX_VALUE - 1)>")
chamada antiga: assertEquals(0, map.rankLong(Long.MAX_VALUE))
nova chamada: assertEquals(0, map.rankLong(Long.MAX_VALUE), "Era esperado valores iguais, mas  0 é diferente de " + result511 + " <map.rankLong(Long.MAX_VALUE)>")
chamada antiga: assertEquals(1, map.getLongCardinality())
nova chamada: assertEquals(1, map.getLongCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result512 + " <map.getLongCardinality()>")
chamada antiga: assertFalse(map.isEmpty())
nova chamada: assertFalse(map.isEmpty(), "Era esperado falso, mas " + result513 + " <map.isEmpty()> é verdadeiro ")
chamada antiga: assertEquals(0, map.rankLong(Long.MIN_VALUE))
nova chamada: assertEquals(0, map.rankLong(Long.MIN_VALUE), "Era esperado valores iguais, mas  0 é diferente de " + result514 + " <map.rankLong(Long.MIN_VALUE)>")
chamada antiga: assertEquals(0, map.rankLong(Integer.MIN_VALUE - 1L))
nova chamada: assertEquals(0, map.rankLong(Integer.MIN_VALUE - 1L), "Era esperado valores iguais, mas  0 é diferente de " + result515 + " <map.rankLong(Integer.MIN_VALUE - 1L)>")
chamada antiga: assertEquals(0, map.rankLong(-1))
nova chamada: assertEquals(0, map.rankLong(-1), "Era esperado valores iguais, mas  0 é diferente de " + result516 + " <map.rankLong(-1)>")
chamada antiga: assertEquals(1, map.rankLong(0))
nova chamada: assertEquals(1, map.rankLong(0), "Era esperado valores iguais, mas  1 é diferente de " + result517 + " <map.rankLong(0)>")
chamada antiga: assertEquals(1, map.rankLong(1))
nova chamada: assertEquals(1, map.rankLong(1), "Era esperado valores iguais, mas  1 é diferente de " + result518 + " <map.rankLong(1)>")
chamada antiga: assertEquals(1, map.rankLong(Integer.MAX_VALUE + 1L))
nova chamada: assertEquals(1, map.rankLong(Integer.MAX_VALUE + 1L), "Era esperado valores iguais, mas  1 é diferente de " + result519 + " <map.rankLong(Integer.MAX_VALUE + 1L)>")
chamada antiga: assertEquals(1, map.rankLong(Long.MAX_VALUE))
nova chamada: assertEquals(1, map.rankLong(Long.MAX_VALUE), "Era esperado valores iguais, mas  1 é diferente de " + result520 + " <map.rankLong(Long.MAX_VALUE)>")
chamada antiga: assertEquals(1, map.getLongCardinality())
nova chamada: assertEquals(1, map.getLongCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result521 + " <map.getLongCardinality()>")
chamada antiga: assertFalse(map.isEmpty())
nova chamada: assertFalse(map.isEmpty(), "Era esperado falso, mas " + result522 + " <map.isEmpty()> é verdadeiro ")
chamada antiga: assertEquals(0, map.rankLong(Long.MIN_VALUE))
nova chamada: assertEquals(0, map.rankLong(Long.MIN_VALUE), "Era esperado valores iguais, mas  0 é diferente de " + result523 + " <map.rankLong(Long.MIN_VALUE)>")
chamada antiga: assertEquals(0, map.rankLong(Integer.MIN_VALUE - 1L))
nova chamada: assertEquals(0, map.rankLong(Integer.MIN_VALUE - 1L), "Era esperado valores iguais, mas  0 é diferente de " + result524 + " <map.rankLong(Integer.MIN_VALUE - 1L)>")
chamada antiga: assertEquals(0, map.rankLong(0))
nova chamada: assertEquals(0, map.rankLong(0), "Era esperado valores iguais, mas  0 é diferente de " + result525 + " <map.rankLong(0)>")
chamada antiga: assertEquals(0, map.rankLong(1))
nova chamada: assertEquals(0, map.rankLong(1), "Era esperado valores iguais, mas  0 é diferente de " + result526 + " <map.rankLong(1)>")
chamada antiga: assertEquals(0, map.rankLong(Integer.MAX_VALUE + 1L))
nova chamada: assertEquals(0, map.rankLong(Integer.MAX_VALUE + 1L), "Era esperado valores iguais, mas  0 é diferente de " + result527 + " <map.rankLong(Integer.MAX_VALUE + 1L)>")
chamada antiga: assertEquals(0, map.rankLong(Long.MAX_VALUE))
nova chamada: assertEquals(0, map.rankLong(Long.MAX_VALUE), "Era esperado valores iguais, mas  0 é diferente de " + result528 + " <map.rankLong(Long.MAX_VALUE)>")
chamada antiga: assertEquals(0, map.rankLong(-2))
nova chamada: assertEquals(0, map.rankLong(-2), "Era esperado valores iguais, mas  0 é diferente de " + result529 + " <map.rankLong(-2)>")
chamada antiga: assertEquals(1, map.rankLong(-1))
nova chamada: assertEquals(1, map.rankLong(-1), "Era esperado valores iguais, mas  1 é diferente de " + result530 + " <map.rankLong(-1)>")
chamada antiga: assertArrayEquals(new long[] { -1L }, map.toArray())
nova chamada: assertArrayEquals(new long[] { -1L }, map.toArray(), "Era esperado arrays iguais, mas  new long[] { -1L } é diferente de " + result531 + " <map.toArray()>")
chamada antiga: assertEquals(1, map.getLongCardinality())
nova chamada: assertEquals(1, map.getLongCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result532 + " <map.getLongCardinality()>")
chamada antiga: assertFalse(map.isEmpty())
nova chamada: assertFalse(map.isEmpty(), "Era esperado falso, mas " + result533 + " <map.isEmpty()> é verdadeiro ")
chamada antiga: assertEquals(0, map.rankLong(Long.MIN_VALUE))
nova chamada: assertEquals(0, map.rankLong(Long.MIN_VALUE), "Era esperado valores iguais, mas  0 é diferente de " + result534 + " <map.rankLong(Long.MIN_VALUE)>")
chamada antiga: assertEquals(0, map.rankLong(Integer.MIN_VALUE - 1L))
nova chamada: assertEquals(0, map.rankLong(Integer.MIN_VALUE - 1L), "Era esperado valores iguais, mas  0 é diferente de " + result535 + " <map.rankLong(Integer.MIN_VALUE - 1L)>")
chamada antiga: assertEquals(0, map.rankLong(-1))
nova chamada: assertEquals(0, map.rankLong(-1), "Era esperado valores iguais, mas  0 é diferente de " + result536 + " <map.rankLong(-1)>")
chamada antiga: assertEquals(1, map.rankLong(0))
nova chamada: assertEquals(1, map.rankLong(0), "Era esperado valores iguais, mas  1 é diferente de " + result537 + " <map.rankLong(0)>")
chamada antiga: assertEquals(1, map.rankLong(1))
nova chamada: assertEquals(1, map.rankLong(1), "Era esperado valores iguais, mas  1 é diferente de " + result538 + " <map.rankLong(1)>")
chamada antiga: assertEquals(1, map.rankLong(Integer.MAX_VALUE + 1L))
nova chamada: assertEquals(1, map.rankLong(Integer.MAX_VALUE + 1L), "Era esperado valores iguais, mas  1 é diferente de " + result539 + " <map.rankLong(Integer.MAX_VALUE + 1L)>")
chamada antiga: assertEquals(1, map.rankLong(Long.MAX_VALUE))
nova chamada: assertEquals(1, map.rankLong(Long.MAX_VALUE), "Era esperado valores iguais, mas  1 é diferente de " + result540 + " <map.rankLong(Long.MAX_VALUE)>")
chamada antiga: assertFalse(map.contains(345))
nova chamada: assertFalse(map.contains(345), "Era esperado falso, mas " + result541 + " <map.contains(345)> é verdadeiro ")
chamada antiga: assertEquals(2, map.getLongCardinality())
nova chamada: assertEquals(2, map.getLongCardinality(), "Era esperado valores iguais, mas  2 é diferente de " + result542 + " <map.getLongCardinality()>")
chamada antiga: assertEquals(0, map.rankLong(0))
nova chamada: assertEquals(0, map.rankLong(0), "Era esperado valores iguais, mas  0 é diferente de " + result543 + " <map.rankLong(0)>")
chamada antiga: assertEquals(1, map.rankLong(123))
nova chamada: assertEquals(1, map.rankLong(123), "Era esperado valores iguais, mas  1 é diferente de " + result544 + " <map.rankLong(123)>")
chamada antiga: assertEquals(1, map.rankLong(233))
nova chamada: assertEquals(1, map.rankLong(233), "Era esperado valores iguais, mas  1 é diferente de " + result545 + " <map.rankLong(233)>")
chamada antiga: assertEquals(2, map.rankLong(234))
nova chamada: assertEquals(2, map.rankLong(234), "Era esperado valores iguais, mas  2 é diferente de " + result546 + " <map.rankLong(234)>")
chamada antiga: assertEquals(2, map.rankLong(235))
nova chamada: assertEquals(2, map.rankLong(235), "Era esperado valores iguais, mas  2 é diferente de " + result547 + " <map.rankLong(235)>")
chamada antiga: assertEquals(2, map.rankLong(Integer.MAX_VALUE + 1L))
nova chamada: assertEquals(2, map.rankLong(Integer.MAX_VALUE + 1L), "Era esperado valores iguais, mas  2 é diferente de " + result548 + " <map.rankLong(Integer.MAX_VALUE + 1L)>")
chamada antiga: assertEquals(2, map.rankLong(Long.MAX_VALUE))
nova chamada: assertEquals(2, map.rankLong(Long.MAX_VALUE), "Era esperado valores iguais, mas  2 é diferente de " + result549 + " <map.rankLong(Long.MAX_VALUE)>")
chamada antiga: assertArrayEquals(new long[] { 123L, 234L }, map.toArray())
nova chamada: assertArrayEquals(new long[] { 123L, 234L }, map.toArray(), "Era esperado arrays iguais, mas  new long[] { 123L, 234L } é diferente de " + result550 + " <map.toArray()>")
chamada antiga: assertEquals(left.hashCode(), right.hashCode())
nova chamada: assertEquals(left.hashCode(), right.hashCode(), "Era esperado valores iguais, mas " + result551 + " <left.hashCode()> é diferente de " + result552 + " <right.hashCode()>")
chamada antiga: assertEquals(left, right)
nova chamada: assertEquals(left, right, "Era esperado valores iguais, mas  left é diferente de " + " right")
chamada antiga: assertEquals(right, left)
nova chamada: assertEquals(right, left, "Era esperado valores iguais, mas  right é diferente de " + " left")
chamada antiga: assertThrows(IllegalArgumentException.class, () -> {
    Roaring64NavigableMap map = newDefaultCtor();
    map.addLong(123);
    map.select(1);
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    Roaring64NavigableMap map = newDefaultCtor();
    map.addLong(123);
    map.select(1);
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: assertEquals(Util.toUnsignedLong(-1), map.select(0))
nova chamada: assertEquals(Util.toUnsignedLong(-1), map.select(0), "Era esperado valores iguais, mas " + result553 + " <Util.toUnsignedLong(-1)> é diferente de " + result554 + " <map.select(0)>")
chamada antiga: assertTrue(map.getLongIterator().hasNext())
nova chamada: assertTrue(map.getLongIterator().hasNext(), "Era esperado verdadeiro, mas " + result555 + " <map.getLongIterator().hasNext()> é falso")
chamada antiga: assertEquals(0, map.getLongIterator().next())
nova chamada: assertEquals(0, map.getLongIterator().next(), "Era esperado valores iguais, mas  0 é diferente de " + result556 + " <map.getLongIterator().next()>")
chamada antiga: assertThrows(IllegalStateException.class, () -> {
    Roaring64NavigableMap map = newDefaultCtor();
    map.getLongIterator().next();
})
nova chamada: assertThrows(IllegalStateException.class, () -> {
    Roaring64NavigableMap map = newDefaultCtor();
    map.getLongIterator().next();
}, "Era esperado que a exceção  IllegalStateException.class fosse lançada, mas não foi")
chamada antiga: assertEquals(1, map.getLongCardinality())
nova chamada: assertEquals(1, map.getLongCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result557 + " <map.getLongCardinality()>")
chamada antiga: assertEquals(0, map.rankLong(Long.MIN_VALUE))
nova chamada: assertEquals(0, map.rankLong(Long.MIN_VALUE), "Era esperado valores iguais, mas  0 é diferente de " + result558 + " <map.rankLong(Long.MIN_VALUE)>")
chamada antiga: assertEquals(0, map.rankLong(Long.MIN_VALUE + 1))
nova chamada: assertEquals(0, map.rankLong(Long.MIN_VALUE + 1), "Era esperado valores iguais, mas  0 é diferente de " + result559 + " <map.rankLong(Long.MIN_VALUE + 1)>")
chamada antiga: assertEquals(0, map.rankLong(-1))
nova chamada: assertEquals(0, map.rankLong(-1), "Era esperado valores iguais, mas  0 é diferente de " + result560 + " <map.rankLong(-1)>")
chamada antiga: assertEquals(0, map.rankLong(0))
nova chamada: assertEquals(0, map.rankLong(0), "Era esperado valores iguais, mas  0 é diferente de " + result561 + " <map.rankLong(0)>")
chamada antiga: assertEquals(0, map.rankLong(1))
nova chamada: assertEquals(0, map.rankLong(1), "Era esperado valores iguais, mas  0 é diferente de " + result562 + " <map.rankLong(1)>")
chamada antiga: assertEquals(0, map.rankLong(Long.MAX_VALUE - 1))
nova chamada: assertEquals(0, map.rankLong(Long.MAX_VALUE - 1), "Era esperado valores iguais, mas  0 é diferente de " + result563 + " <map.rankLong(Long.MAX_VALUE - 1)>")
chamada antiga: assertEquals(1, map.rankLong(Long.MAX_VALUE))
nova chamada: assertEquals(1, map.rankLong(Long.MAX_VALUE), "Era esperado valores iguais, mas  1 é diferente de " + result564 + " <map.rankLong(Long.MAX_VALUE)>")
chamada antiga: assertArrayEquals(new long[] { Long.MAX_VALUE }, map.toArray())
nova chamada: assertArrayEquals(new long[] { Long.MAX_VALUE }, map.toArray(), "Era esperado arrays iguais, mas  new long[] { Long.MAX_VALUE } é diferente de " + result565 + " <map.toArray()>")
chamada antiga: assertEquals(1, map.getLongCardinality())
nova chamada: assertEquals(1, map.getLongCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result566 + " <map.getLongCardinality()>")
chamada antiga: assertEquals(1, map.rankLong(Long.MIN_VALUE))
nova chamada: assertEquals(1, map.rankLong(Long.MIN_VALUE), "Era esperado valores iguais, mas  1 é diferente de " + result567 + " <map.rankLong(Long.MIN_VALUE)>")
chamada antiga: assertEquals(1, map.rankLong(Long.MIN_VALUE + 1))
nova chamada: assertEquals(1, map.rankLong(Long.MIN_VALUE + 1), "Era esperado valores iguais, mas  1 é diferente de " + result568 + " <map.rankLong(Long.MIN_VALUE + 1)>")
chamada antiga: assertEquals(1, map.rankLong(-1))
nova chamada: assertEquals(1, map.rankLong(-1), "Era esperado valores iguais, mas  1 é diferente de " + result569 + " <map.rankLong(-1)>")
chamada antiga: assertEquals(1, map.rankLong(0))
nova chamada: assertEquals(1, map.rankLong(0), "Era esperado valores iguais, mas  1 é diferente de " + result570 + " <map.rankLong(0)>")
chamada antiga: assertEquals(1, map.rankLong(1))
nova chamada: assertEquals(1, map.rankLong(1), "Era esperado valores iguais, mas  1 é diferente de " + result571 + " <map.rankLong(1)>")
chamada antiga: assertEquals(1, map.rankLong(Long.MAX_VALUE - 1))
nova chamada: assertEquals(1, map.rankLong(Long.MAX_VALUE - 1), "Era esperado valores iguais, mas  1 é diferente de " + result572 + " <map.rankLong(Long.MAX_VALUE - 1)>")
chamada antiga: assertEquals(1, map.rankLong(Long.MAX_VALUE))
nova chamada: assertEquals(1, map.rankLong(Long.MAX_VALUE), "Era esperado valores iguais, mas  1 é diferente de " + result573 + " <map.rankLong(Long.MAX_VALUE)>")
chamada antiga: assertEquals(4, map.getLongCardinality())
nova chamada: assertEquals(4, map.getLongCardinality(), "Era esperado valores iguais, mas  4 é diferente de " + result574 + " <map.getLongCardinality()>")
chamada antiga: assertEquals(1, map.rankLong(Long.MIN_VALUE))
nova chamada: assertEquals(1, map.rankLong(Long.MIN_VALUE), "Era esperado valores iguais, mas  1 é diferente de " + result575 + " <map.rankLong(Long.MIN_VALUE)>")
chamada antiga: assertEquals(1, map.rankLong(Long.MIN_VALUE + 1))
nova chamada: assertEquals(1, map.rankLong(Long.MIN_VALUE + 1), "Era esperado valores iguais, mas  1 é diferente de " + result576 + " <map.rankLong(Long.MIN_VALUE + 1)>")
chamada antiga: assertEquals(1, map.rankLong(-1))
nova chamada: assertEquals(1, map.rankLong(-1), "Era esperado valores iguais, mas  1 é diferente de " + result577 + " <map.rankLong(-1)>")
chamada antiga: assertEquals(2, map.rankLong(0))
nova chamada: assertEquals(2, map.rankLong(0), "Era esperado valores iguais, mas  2 é diferente de " + result578 + " <map.rankLong(0)>")
chamada antiga: assertEquals(3, map.rankLong(1))
nova chamada: assertEquals(3, map.rankLong(1), "Era esperado valores iguais, mas  3 é diferente de " + result579 + " <map.rankLong(1)>")
chamada antiga: assertEquals(3, map.rankLong(2))
nova chamada: assertEquals(3, map.rankLong(2), "Era esperado valores iguais, mas  3 é diferente de " + result580 + " <map.rankLong(2)>")
chamada antiga: assertEquals(3, map.rankLong(Long.MAX_VALUE - 1))
nova chamada: assertEquals(3, map.rankLong(Long.MAX_VALUE - 1), "Era esperado valores iguais, mas  3 é diferente de " + result581 + " <map.rankLong(Long.MAX_VALUE - 1)>")
chamada antiga: assertEquals(4, map.rankLong(Long.MAX_VALUE))
nova chamada: assertEquals(4, map.rankLong(Long.MAX_VALUE), "Era esperado valores iguais, mas  4 é diferente de " + result582 + " <map.rankLong(Long.MAX_VALUE)>")
chamada antiga: assertEquals(Arrays.asList(Long.MIN_VALUE, 0L, 1L, Long.MAX_VALUE), foreach)
nova chamada: assertEquals(Arrays.asList(Long.MIN_VALUE, 0L, 1L, Long.MAX_VALUE), foreach, "Era esperado valores iguais, mas " + result583 + " <Arrays.asList(Long.MIN_VALUE, 0L, 1L, Long.MAX_VALUE)> é diferente de " + " foreach")
chamada antiga: assertEquals(rbm.getHighToBitmap().size(), 1)
nova chamada: assertEquals(rbm.getHighToBitmap().size(), 1, "Era esperado valores iguais, mas " + result584 + " <rbm.getHighToBitmap().size()> é diferente de " + " 1")
chamada antiga: assertTrue(rbm.getHighToBitmap().isEmpty())
nova chamada: assertTrue(rbm.getHighToBitmap().isEmpty(), "Era esperado verdadeiro, mas " + result585 + " <rbm.getHighToBitmap().isEmpty()> é falso")
chamada antiga: assertEquals(rbm, empty)
nova chamada: assertEquals(rbm, empty, "Era esperado valores iguais, mas  rbm é diferente de " + " empty")
chamada antiga: assertEquals(rbm.getHighToBitmap().size(), 1)
nova chamada: assertEquals(rbm.getHighToBitmap().size(), 1, "Era esperado valores iguais, mas " + result586 + " <rbm.getHighToBitmap().size()> é diferente de " + " 1")
chamada antiga: assertEquals(rbm.getHighToBitmap().size(), 2)
nova chamada: assertEquals(rbm.getHighToBitmap().size(), 2, "Era esperado valores iguais, mas " + result587 + " <rbm.getHighToBitmap().size()> é diferente de " + " 2")
chamada antiga: assertEquals(rbm.getHighToBitmap().size(), 1)
nova chamada: assertEquals(rbm.getHighToBitmap().size(), 1, "Era esperado valores iguais, mas " + result588 + " <rbm.getHighToBitmap().size()> é diferente de " + " 1")
chamada antiga: assertEquals(rbm.getHighToBitmap().size(), 2)
nova chamada: assertEquals(rbm.getHighToBitmap().size(), 2, "Era esperado valores iguais, mas " + result589 + " <rbm.getHighToBitmap().size()> é diferente de " + " 2")
chamada antiga: assertEquals(1L, map.getLongCardinality())
nova chamada: assertEquals(1L, map.getLongCardinality(), "Era esperado valores iguais, mas  1L é diferente de " + result590 + " <map.getLongCardinality()>")
chamada antiga: assertEquals(0L, map.getLongCardinality())
nova chamada: assertEquals(0L, map.getLongCardinality(), "Era esperado valores iguais, mas  0L é diferente de " + result591 + " <map.getLongCardinality()>")
chamada antiga: assertTrue(map.isEmpty())
nova chamada: assertTrue(map.isEmpty(), "Era esperado verdadeiro, mas " + result592 + " <map.isEmpty()> é falso")
chamada antiga: assertEquals(1L, map.getLongCardinality())
nova chamada: assertEquals(1L, map.getLongCardinality(), "Era esperado valores iguais, mas  1L é diferente de " + result593 + " <map.getLongCardinality()>")
chamada antiga: assertEquals(1L, map.getLongCardinality())
nova chamada: assertEquals(1L, map.getLongCardinality(), "Era esperado valores iguais, mas  1L é diferente de " + result594 + " <map.getLongCardinality()>")
chamada antiga: assertEquals(0L, map.getLongCardinality())
nova chamada: assertEquals(0L, map.getLongCardinality(), "Era esperado valores iguais, mas  0L é diferente de " + result595 + " <map.getLongCardinality()>")
chamada antiga: assertTrue(map.isEmpty())
nova chamada: assertTrue(map.isEmpty(), "Era esperado verdadeiro, mas " + result596 + " <map.isEmpty()> é falso")
chamada antiga: assertEquals(1L, map.getLongCardinality())
nova chamada: assertEquals(1L, map.getLongCardinality(), "Era esperado valores iguais, mas  1L é diferente de " + result597 + " <map.getLongCardinality()>")
chamada antiga: assertEquals(2L, map.getLongCardinality())
nova chamada: assertEquals(2L, map.getLongCardinality(), "Era esperado valores iguais, mas  2L é diferente de " + result598 + " <map.getLongCardinality()>")
chamada antiga: assertEquals(1L, map.getLongCardinality())
nova chamada: assertEquals(1L, map.getLongCardinality(), "Era esperado valores iguais, mas  1L é diferente de " + result599 + " <map.getLongCardinality()>")
chamada antiga: assertEquals(123L, map.select(0))
nova chamada: assertEquals(123L, map.select(0), "Era esperado valores iguais, mas  123L é diferente de " + result600 + " <map.select(0)>")
chamada antiga: assertEquals(2L, map.getLongCardinality())
nova chamada: assertEquals(2L, map.getLongCardinality(), "Era esperado valores iguais, mas  2L é diferente de " + result601 + " <map.getLongCardinality()>")
chamada antiga: assertEquals(123L, map.select(0))
nova chamada: assertEquals(123L, map.select(0), "Era esperado valores iguais, mas  123L é diferente de " + result602 + " <map.select(0)>")
chamada antiga: assertEquals(Long.MAX_VALUE, map.select(1))
nova chamada: assertEquals(Long.MAX_VALUE, map.select(1), "Era esperado valores iguais, mas  Long.MAX_VALUE é diferente de " + result603 + " <map.select(1)>")
chamada antiga: assertEquals(2L, map.getLongCardinality())
nova chamada: assertEquals(2L, map.getLongCardinality(), "Era esperado valores iguais, mas  2L é diferente de " + result604 + " <map.getLongCardinality()>")
chamada antiga: assertEquals(1L, map.getLongCardinality())
nova chamada: assertEquals(1L, map.getLongCardinality(), "Era esperado valores iguais, mas  1L é diferente de " + result605 + " <map.getLongCardinality()>")
chamada antiga: assertEquals(123L, map.select(0))
nova chamada: assertEquals(123L, map.select(0), "Era esperado valores iguais, mas  123L é diferente de " + result606 + " <map.select(0)>")
chamada antiga: assertEquals(2L, map.getLongCardinality())
nova chamada: assertEquals(2L, map.getLongCardinality(), "Era esperado valores iguais, mas  2L é diferente de " + result607 + " <map.getLongCardinality()>")
chamada antiga: assertEquals(123L, map.select(0))
nova chamada: assertEquals(123L, map.select(0), "Era esperado valores iguais, mas  123L é diferente de " + result608 + " <map.select(0)>")
chamada antiga: assertEquals(Long.MAX_VALUE / 2L, map.select(1))
nova chamada: assertEquals(Long.MAX_VALUE / 2L, map.select(1), "Era esperado valores iguais, mas  Long.MAX_VALUE / 2L é diferente de " + result609 + " <map.select(1)>")
chamada antiga: assertEquals(2L, map.getLongCardinality())
nova chamada: assertEquals(2L, map.getLongCardinality(), "Era esperado valores iguais, mas  2L é diferente de " + result610 + " <map.getLongCardinality()>")
chamada antiga: assertEquals(1L, map.getLongCardinality())
nova chamada: assertEquals(1L, map.getLongCardinality(), "Era esperado valores iguais, mas  1L é diferente de " + result611 + " <map.getLongCardinality()>")
chamada antiga: assertEquals(123L, map.select(0))
nova chamada: assertEquals(123L, map.select(0), "Era esperado valores iguais, mas  123L é diferente de " + result612 + " <map.select(0)>")
chamada antiga: assertEquals(2L, map.getLongCardinality())
nova chamada: assertEquals(2L, map.getLongCardinality(), "Era esperado valores iguais, mas  2L é diferente de " + result613 + " <map.getLongCardinality()>")
chamada antiga: assertEquals(123L, map.select(0))
nova chamada: assertEquals(123L, map.select(0), "Era esperado valores iguais, mas  123L é diferente de " + result614 + " <map.select(0)>")
chamada antiga: assertEquals(Long.MAX_VALUE, map.select(1))
nova chamada: assertEquals(Long.MAX_VALUE, map.select(1), "Era esperado valores iguais, mas  Long.MAX_VALUE é diferente de " + result615 + " <map.select(1)>")
chamada antiga: assertEquals(problemSize, cardinality)
nova chamada: assertEquals(problemSize, cardinality, "Era esperado valores iguais, mas  problemSize é diferente de " + " cardinality")
chamada antiga: assertEquals(problemSize * Integer.MAX_VALUE + 1L, last)
nova chamada: assertEquals(problemSize * Integer.MAX_VALUE + 1L, last, "Era esperado valores iguais, mas  problemSize * Integer.MAX_VALUE + 1L é diferente de " + " last")
chamada antiga: assertEquals(cardinality, map.rankLong(last))
nova chamada: assertEquals(cardinality, map.rankLong(last), "Era esperado valores iguais, mas  cardinality é diferente de " + result616 + " <map.rankLong(last)>")
chamada antiga: assertEquals(problemSize, cardinality)
nova chamada: assertEquals(problemSize, cardinality, "Era esperado valores iguais, mas  problemSize é diferente de " + " cardinality")
chamada antiga: assertEquals(problemSize * Integer.MAX_VALUE + 1L, last)
nova chamada: assertEquals(problemSize * Integer.MAX_VALUE + 1L, last, "Era esperado valores iguais, mas  problemSize * Integer.MAX_VALUE + 1L é diferente de " + " last")
chamada antiga: assertEquals(cardinality, map.rankLong(last))
nova chamada: assertEquals(cardinality, map.rankLong(last), "Era esperado valores iguais, mas  cardinality é diferente de " + result617 + " <map.rankLong(last)>")
chamada antiga: assertTrue(natural.compare(-1, 1) < 0)
nova chamada: assertTrue(natural.compare(-1, 1) < 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertFalse(unsigned.compare(-1, 1) < 0)
nova chamada: assertFalse(unsigned.compare(-1, 1) < 0, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: assertTrue(natural.compare(Integer.MAX_VALUE, Integer.MAX_VALUE + 1) > 0)
nova chamada: assertTrue(natural.compare(Integer.MAX_VALUE, Integer.MAX_VALUE + 1) > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertFalse(unsigned.compare(Integer.MAX_VALUE, Integer.MAX_VALUE + 1) > 0)
nova chamada: assertFalse(unsigned.compare(Integer.MAX_VALUE, Integer.MAX_VALUE + 1) > 0, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: assertTrue(unsigned.compare(Integer.MAX_VALUE + 1, Integer.MAX_VALUE + 2) < 0)
nova chamada: assertTrue(unsigned.compare(Integer.MAX_VALUE + 1, Integer.MAX_VALUE + 2) < 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(negative, first)
nova chamada: assertEquals(negative, first, "Era esperado valores iguais, mas  negative é diferente de " + " first")
chamada antiga: assertEquals(positive, last)
nova chamada: assertEquals(positive, last, "Era esperado valores iguais, mas  positive é diferente de " + " last")
chamada antiga: assertEquals(positive, first)
nova chamada: assertEquals(positive, first, "Era esperado valores iguais, mas  positive é diferente de " + " first")
chamada antiga: assertEquals(negative, last)
nova chamada: assertEquals(negative, last, "Era esperado valores iguais, mas  negative é diferente de " + " last")
chamada antiga: assertEquals(1, map.rankLong(negative))
nova chamada: assertEquals(1, map.rankLong(negative), "Era esperado valores iguais, mas  1 é diferente de " + result618 + " <map.rankLong(negative)>")
chamada antiga: assertEquals(2, map.rankLong(negative))
nova chamada: assertEquals(2, map.rankLong(negative), "Era esperado valores iguais, mas  2 é diferente de " + result619 + " <map.rankLong(negative)>")
chamada antiga: assertEquals(negative, first)
nova chamada: assertEquals(negative, first, "Era esperado valores iguais, mas  negative é diferente de " + " first")
chamada antiga: assertEquals(positive, last)
nova chamada: assertEquals(positive, last, "Era esperado valores iguais, mas  positive é diferente de " + " last")
chamada antiga: assertEquals(positive, first)
nova chamada: assertEquals(positive, first, "Era esperado valores iguais, mas  positive é diferente de " + " first")
chamada antiga: assertEquals(negative, last)
nova chamada: assertEquals(negative, last, "Era esperado valores iguais, mas  negative é diferente de " + " last")
chamada antiga: assertEquals(Long.MAX_VALUE, map.select(0))
nova chamada: assertEquals(Long.MAX_VALUE, map.select(0), "Era esperado valores iguais, mas  Long.MAX_VALUE é diferente de " + result620 + " <map.select(0)>")
chamada antiga: assertEquals(666, map.select(0))
nova chamada: assertEquals(666, map.select(0), "Era esperado valores iguais, mas  666 é diferente de " + result621 + " <map.select(0)>")
chamada antiga: assertEquals(Long.MAX_VALUE, map.select(1))
nova chamada: assertEquals(Long.MAX_VALUE, map.select(1), "Era esperado valores iguais, mas  Long.MAX_VALUE é diferente de " + result622 + " <map.select(1)>")
chamada antiga: assertNotSame(map, clone)
nova chamada: assertNotSame(map, clone, "Era esperado objetos diferentes, mas  map é igual a " + " clone")
chamada antiga: assertEquals(0, clone.getLongCardinality())
nova chamada: assertEquals(0, clone.getLongCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result623 + " <clone.getLongCardinality()>")
chamada antiga: assertNotSame(map, clone)
nova chamada: assertNotSame(map, clone, "Era esperado objetos diferentes, mas  map é igual a " + " clone")
chamada antiga: assertEquals(1, clone.getLongCardinality())
nova chamada: assertEquals(1, clone.getLongCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result624 + " <clone.getLongCardinality()>")
chamada antiga: assertEquals(123, clone.select(0))
nova chamada: assertEquals(123, clone.select(0), "Era esperado valores iguais, mas  123 é diferente de " + result625 + " <clone.select(0)>")
chamada antiga: assertNotSame(map, clone)
nova chamada: assertNotSame(map, clone, "Era esperado objetos diferentes, mas  map é igual a " + " clone")
chamada antiga: assertEquals(1, clone.getLongCardinality())
nova chamada: assertEquals(1, clone.getLongCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result626 + " <clone.getLongCardinality()>")
chamada antiga: assertEquals(123, clone.select(0))
nova chamada: assertEquals(123, clone.select(0), "Era esperado valores iguais, mas  123 é diferente de " + result627 + " <clone.select(0)>")
chamada antiga: assertNotSame(map, clone)
nova chamada: assertNotSame(map, clone, "Era esperado objetos diferentes, mas  map é igual a " + " clone")
chamada antiga: assertEquals(3, clone.getLongCardinality())
nova chamada: assertEquals(3, clone.getLongCardinality(), "Era esperado valores iguais, mas  3 é diferente de " + result628 + " <clone.getLongCardinality()>")
chamada antiga: assertEquals(-123, clone.select(0))
nova chamada: assertEquals(-123, clone.select(0), "Era esperado valores iguais, mas  -123 é diferente de " + result629 + " <clone.select(0)>")
chamada antiga: assertEquals(123, clone.select(1))
nova chamada: assertEquals(123, clone.select(1), "Era esperado valores iguais, mas  123 é diferente de " + result630 + " <clone.select(1)>")
chamada antiga: assertEquals(Long.MAX_VALUE, clone.select(2))
nova chamada: assertEquals(Long.MAX_VALUE, clone.select(2), "Era esperado valores iguais, mas  Long.MAX_VALUE é diferente de " + result631 + " <clone.select(2)>")
chamada antiga: assertNotSame(map, clone)
nova chamada: assertNotSame(map, clone, "Era esperado objetos diferentes, mas  map é igual a " + " clone")
chamada antiga: assertEquals(3, clone.getLongCardinality())
nova chamada: assertEquals(3, clone.getLongCardinality(), "Era esperado valores iguais, mas  3 é diferente de " + result632 + " <clone.getLongCardinality()>")
chamada antiga: assertEquals(123, clone.select(0))
nova chamada: assertEquals(123, clone.select(0), "Era esperado valores iguais, mas  123 é diferente de " + result633 + " <clone.select(0)>")
chamada antiga: assertEquals(Long.MAX_VALUE, clone.select(1))
nova chamada: assertEquals(Long.MAX_VALUE, clone.select(1), "Era esperado valores iguais, mas  Long.MAX_VALUE é diferente de " + result634 + " <clone.select(1)>")
chamada antiga: assertEquals(-123, clone.select(2))
nova chamada: assertEquals(-123, clone.select(2), "Era esperado valores iguais, mas  -123 é diferente de " + result635 + " <clone.select(2)>")
chamada antiga: Assertions.assertTrue(map.getHighToBitmap().firstEntry().getValue() instanceof MutableRoaringBitmap)
nova chamada: assertTrue(map.getHighToBitmap().firstEntry().getValue() instanceof MutableRoaringBitmap, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(clone.getHighToBitmap().firstEntry().getValue() instanceof RoaringBitmap)
nova chamada: assertTrue(clone.getHighToBitmap().firstEntry().getValue() instanceof RoaringBitmap, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(2, left.getLongCardinality())
nova chamada: assertEquals(2, left.getLongCardinality(), "Era esperado valores iguais, mas  2 é diferente de " + result636 + " <left.getLongCardinality()>")
chamada antiga: assertEquals(123, left.select(0))
nova chamada: assertEquals(123, left.select(0), "Era esperado valores iguais, mas  123 é diferente de " + result637 + " <left.select(0)>")
chamada antiga: assertEquals(234, left.select(1))
nova chamada: assertEquals(234, left.select(1), "Era esperado valores iguais, mas  234 é diferente de " + result638 + " <left.select(1)>")
chamada antiga: assertEquals(3, left.getLongCardinality())
nova chamada: assertEquals(3, left.getLongCardinality(), "Era esperado valores iguais, mas  3 é diferente de " + result639 + " <left.getLongCardinality()>")
chamada antiga: assertEquals(123, left.select(0))
nova chamada: assertEquals(123, left.select(0), "Era esperado valores iguais, mas  123 é diferente de " + result640 + " <left.select(0)>")
chamada antiga: assertEquals(234, left.select(1))
nova chamada: assertEquals(234, left.select(1), "Era esperado valores iguais, mas  234 é diferente de " + result641 + " <left.select(1)>")
chamada antiga: assertEquals(Long.MAX_VALUE, left.select(2))
nova chamada: assertEquals(Long.MAX_VALUE, left.select(2), "Era esperado valores iguais, mas  Long.MAX_VALUE é diferente de " + result642 + " <left.select(2)>")
chamada antiga: assertEquals(2, left.getLongCardinality())
nova chamada: assertEquals(2, left.getLongCardinality(), "Era esperado valores iguais, mas  2 é diferente de " + result643 + " <left.getLongCardinality()>")
chamada antiga: assertEquals(123, left.select(0))
nova chamada: assertEquals(123, left.select(0), "Era esperado valores iguais, mas  123 é diferente de " + result644 + " <left.select(0)>")
chamada antiga: assertEquals(Long.MAX_VALUE / 2, left.select(1))
nova chamada: assertEquals(Long.MAX_VALUE / 2, left.select(1), "Era esperado valores iguais, mas  Long.MAX_VALUE / 2 é diferente de " + result645 + " <left.select(1)>")
chamada antiga: assertEquals(2, left.getLongCardinality())
nova chamada: assertEquals(2, left.getLongCardinality(), "Era esperado valores iguais, mas  2 é diferente de " + result646 + " <left.getLongCardinality()>")
chamada antiga: assertEquals(123, left.select(0))
nova chamada: assertEquals(123, left.select(0), "Era esperado valores iguais, mas  123 é diferente de " + result647 + " <left.select(0)>")
chamada antiga: assertEquals(234, left.select(1))
nova chamada: assertEquals(234, left.select(1), "Era esperado valores iguais, mas  234 é diferente de " + result648 + " <left.select(1)>")
chamada antiga: assertEquals(2, left.getLongCardinality())
nova chamada: assertEquals(2, left.getLongCardinality(), "Era esperado valores iguais, mas  2 é diferente de " + result649 + " <left.getLongCardinality()>")
chamada antiga: assertEquals(123, left.select(0))
nova chamada: assertEquals(123, left.select(0), "Era esperado valores iguais, mas  123 é diferente de " + result650 + " <left.select(0)>")
chamada antiga: assertEquals(Long.MAX_VALUE, left.select(1))
nova chamada: assertEquals(Long.MAX_VALUE, left.select(1), "Era esperado valores iguais, mas  Long.MAX_VALUE é diferente de " + result651 + " <left.select(1)>")
chamada antiga: assertEquals(2, left.getLongCardinality())
nova chamada: assertEquals(2, left.getLongCardinality(), "Era esperado valores iguais, mas  2 é diferente de " + result652 + " <left.getLongCardinality()>")
chamada antiga: assertEquals(123, left.select(0))
nova chamada: assertEquals(123, left.select(0), "Era esperado valores iguais, mas  123 é diferente de " + result653 + " <left.select(0)>")
chamada antiga: assertEquals(234, left.select(1))
nova chamada: assertEquals(234, left.select(1), "Era esperado valores iguais, mas  234 é diferente de " + result654 + " <left.select(1)>")
chamada antiga: assertEquals(2, left.getLongCardinality())
nova chamada: assertEquals(2, left.getLongCardinality(), "Era esperado valores iguais, mas  2 é diferente de " + result655 + " <left.getLongCardinality()>")
chamada antiga: assertEquals(123, left.select(0))
nova chamada: assertEquals(123, left.select(0), "Era esperado valores iguais, mas  123 é diferente de " + result656 + " <left.select(0)>")
chamada antiga: assertEquals(234, left.select(1))
nova chamada: assertEquals(234, left.select(1), "Era esperado valores iguais, mas  234 é diferente de " + result657 + " <left.select(1)>")
chamada antiga: assertEquals(1, right.getLongCardinality())
nova chamada: assertEquals(1, right.getLongCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result658 + " <right.getLongCardinality()>")
chamada antiga: assertEquals(123, right.select(0))
nova chamada: assertEquals(123, right.select(0), "Era esperado valores iguais, mas  123 é diferente de " + result659 + " <right.select(0)>")
chamada antiga: assertEquals(2, left.getLongCardinality())
nova chamada: assertEquals(2, left.getLongCardinality(), "Era esperado valores iguais, mas  2 é diferente de " + result660 + " <left.getLongCardinality()>")
chamada antiga: assertEquals(123, left.select(0))
nova chamada: assertEquals(123, left.select(0), "Era esperado valores iguais, mas  123 é diferente de " + result661 + " <left.select(0)>")
chamada antiga: assertEquals(345, left.select(1))
nova chamada: assertEquals(345, left.select(1), "Era esperado valores iguais, mas  345 é diferente de " + result662 + " <left.select(1)>")
chamada antiga: assertEquals(2, left.getLongCardinality())
nova chamada: assertEquals(2, left.getLongCardinality(), "Era esperado valores iguais, mas  2 é diferente de " + result663 + " <left.getLongCardinality()>")
chamada antiga: assertEquals(123, left.select(0))
nova chamada: assertEquals(123, left.select(0), "Era esperado valores iguais, mas  123 é diferente de " + result664 + " <left.select(0)>")
chamada antiga: assertEquals(345, left.select(1))
nova chamada: assertEquals(345, left.select(1), "Era esperado valores iguais, mas  345 é diferente de " + result665 + " <left.select(1)>")
chamada antiga: assertEquals(2, left.getLongCardinality())
nova chamada: assertEquals(2, left.getLongCardinality(), "Era esperado valores iguais, mas  2 é diferente de " + result666 + " <left.getLongCardinality()>")
chamada antiga: assertEquals(123, left.select(0))
nova chamada: assertEquals(123, left.select(0), "Era esperado valores iguais, mas  123 é diferente de " + result667 + " <left.select(0)>")
chamada antiga: assertEquals(Long.MAX_VALUE, left.select(1))
nova chamada: assertEquals(Long.MAX_VALUE, left.select(1), "Era esperado valores iguais, mas  Long.MAX_VALUE é diferente de " + result668 + " <left.select(1)>")
chamada antiga: assertEquals(1, left.getLongCardinality())
nova chamada: assertEquals(1, left.getLongCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result669 + " <left.getLongCardinality()>")
chamada antiga: assertEquals(123, left.select(0))
nova chamada: assertEquals(123, left.select(0), "Era esperado valores iguais, mas  123 é diferente de " + result670 + " <left.select(0)>")
chamada antiga: assertEquals(1, left.getLongCardinality())
nova chamada: assertEquals(1, left.getLongCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result671 + " <left.getLongCardinality()>")
chamada antiga: assertEquals(234, left.select(0))
nova chamada: assertEquals(234, left.select(0), "Era esperado valores iguais, mas  234 é diferente de " + result672 + " <left.select(0)>")
chamada antiga: assertEquals(1, left.getLongCardinality())
nova chamada: assertEquals(1, left.getLongCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result673 + " <left.getLongCardinality()>")
chamada antiga: assertEquals(123, left.select(0))
nova chamada: assertEquals(123, left.select(0), "Era esperado valores iguais, mas  123 é diferente de " + result674 + " <left.select(0)>")
chamada antiga: assertEquals(0, left.getLongCardinality())
nova chamada: assertEquals(0, left.getLongCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result675 + " <left.getLongCardinality()>")
chamada antiga: assertEquals(1, left.getLongCardinality())
nova chamada: assertEquals(1, left.getLongCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result676 + " <left.getLongCardinality()>")
chamada antiga: assertEquals(Long.MAX_VALUE, left.select(0))
nova chamada: assertEquals(Long.MAX_VALUE, left.select(0), "Era esperado valores iguais, mas  Long.MAX_VALUE é diferente de " + result677 + " <left.select(0)>")
chamada antiga: assertEquals(1, left.getLongCardinality())
nova chamada: assertEquals(1, left.getLongCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result678 + " <left.getLongCardinality()>")
chamada antiga: assertEquals(123, left.select(0))
nova chamada: assertEquals(123, left.select(0), "Era esperado valores iguais, mas  123 é diferente de " + result679 + " <left.select(0)>")
chamada antiga: assertEquals(1, left.getLongCardinality())
nova chamada: assertEquals(1, left.getLongCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result680 + " <left.getLongCardinality()>")
chamada antiga: assertEquals(123, left.select(0))
nova chamada: assertEquals(123, left.select(0), "Era esperado valores iguais, mas  123 é diferente de " + result681 + " <left.select(0)>")
chamada antiga: assertEquals(1, left.getLongCardinality())
nova chamada: assertEquals(1, left.getLongCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result682 + " <left.getLongCardinality()>")
chamada antiga: assertEquals(123, left.select(0))
nova chamada: assertEquals(123, left.select(0), "Era esperado valores iguais, mas  123 é diferente de " + result683 + " <left.select(0)>")
chamada antiga: assertEquals(1, left.getLongCardinality())
nova chamada: assertEquals(1, left.getLongCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result684 + " <left.getLongCardinality()>")
chamada antiga: assertEquals(123, left.select(0))
nova chamada: assertEquals(123, left.select(0), "Era esperado valores iguais, mas  123 é diferente de " + result685 + " <left.select(0)>")
chamada antiga: assertEquals("{-9223372036854775808,123,9223372036854775807}", map.toString())
nova chamada: assertEquals("{-9223372036854775808,123,9223372036854775807}", map.toString(), "Era esperado valores iguais, mas  '{-9223372036854775808,123,9223372036854775807}' é diferente de " + result686 + " <map.toString()>")
chamada antiga: assertEquals("{123,9223372036854775807,9223372036854775808}", map.toString())
nova chamada: assertEquals("{123,9223372036854775807,9223372036854775808}", map.toString(), "Era esperado valores iguais, mas  '{123,9223372036854775807,9223372036854775808}' é diferente de " + result687 + " <map.toString()>")
chamada antiga: assertEquals(7L, map.getLongCardinality())
nova chamada: assertEquals(7L, map.getLongCardinality(), "Era esperado valores iguais, mas  7L é diferente de " + result688 + " <map.getLongCardinality()>")
chamada antiga: assertEquals(5L, map.select(0))
nova chamada: assertEquals(5L, map.select(0), "Era esperado valores iguais, mas  5L é diferente de " + result689 + " <map.select(0)>")
chamada antiga: assertEquals(11L, map.select(6L))
nova chamada: assertEquals(11L, map.select(6L), "Era esperado valores iguais, mas  11L é diferente de " + result690 + " <map.select(6L)>")
chamada antiga: assertEquals(7L, map.getLongCardinality())
nova chamada: assertEquals(7L, map.getLongCardinality(), "Era esperado valores iguais, mas  7L é diferente de " + result691 + " <map.getLongCardinality()>")
chamada antiga: assertEquals(5L, map.select(0))
nova chamada: assertEquals(5L, map.select(0), "Era esperado valores iguais, mas  5L é diferente de " + result692 + " <map.select(0)>")
chamada antiga: assertEquals(11L, map.select(6L))
nova chamada: assertEquals(11L, map.select(6L), "Era esperado valores iguais, mas  11L é diferente de " + result693 + " <map.select(6L)>")
chamada antiga: assertEquals(2, map.getLongCardinality())
nova chamada: assertEquals(2, map.getLongCardinality(), "Era esperado valores iguais, mas  2 é diferente de " + result694 + " <map.getLongCardinality()>")
chamada antiga: assertEquals(end - 2, map.select(0))
nova chamada: assertEquals(end - 2, map.select(0), "Era esperado valores iguais, mas  end - 2 é diferente de " + result695 + " <map.select(0)>")
chamada antiga: assertEquals(end - 1, map.select(1))
nova chamada: assertEquals(end - 1, map.select(1), "Era esperado valores iguais, mas  end - 1 é diferente de " + result696 + " <map.select(1)>")
chamada antiga: assertEquals(nbItems, map.getLongCardinality())
nova chamada: assertEquals(nbItems, map.getLongCardinality(), "Era esperado valores iguais, mas  nbItems é diferente de " + result697 + " <map.getLongCardinality()>")
chamada antiga: assertEquals(from, map.select(0))
nova chamada: assertEquals(from, map.select(0), "Era esperado valores iguais, mas  from é diferente de " + result698 + " <map.select(0)>")
chamada antiga: assertEquals(to - 1, map.select(nbItems - 1))
nova chamada: assertEquals(to - 1, map.select(nbItems - 1), "Era esperado valores iguais, mas  to - 1 é diferente de " + result699 + " <map.select(nbItems - 1)>")
chamada antiga: assertThrows(IllegalArgumentException.class, () -> {
    RoaringBitmap map = new RoaringBitmap();
    map.add(0L, outOfRoaringBitmapRange);
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    RoaringBitmap map = new RoaringBitmap();
    map.add(0L, outOfRoaringBitmapRange);
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: assertEquals(outOfSingleRoaring, map.getLongCardinality())
nova chamada: assertEquals(outOfSingleRoaring, map.getLongCardinality(), "Era esperado valores iguais, mas  outOfSingleRoaring é diferente de " + result700 + " <map.getLongCardinality()>")
chamada antiga: assertEquals(outOfSingleRoaring, map.getLongCardinality())
nova chamada: assertEquals(outOfSingleRoaring, map.getLongCardinality(), "Era esperado valores iguais, mas  outOfSingleRoaring é diferente de " + result701 + " <map.getLongCardinality()>")
chamada antiga: assertEquals(0, map.select(0))
nova chamada: assertEquals(0, map.select(0), "Era esperado valores iguais, mas  0 é diferente de " + result702 + " <map.select(0)>")
chamada antiga: assertEquals(outOfSingleRoaring - 1, map.select(outOfSingleRoaring - 1))
nova chamada: assertEquals(outOfSingleRoaring - 1, map.select(outOfSingleRoaring - 1), "Era esperado valores iguais, mas  outOfSingleRoaring - 1 é diferente de " + result703 + " <map.select(outOfSingleRoaring - 1)>")
chamada antiga: assertEquals(maxForRoaringBitmap, map.getLongCardinality())
nova chamada: assertEquals(maxForRoaringBitmap, map.getLongCardinality(), "Era esperado valores iguais, mas  maxForRoaringBitmap é diferente de " + result704 + " <map.getLongCardinality()>")
chamada antiga: assertEquals(-1, map.select(-1))
nova chamada: assertEquals(-1, map.select(-1), "Era esperado valores iguais, mas  -1 é diferente de " + result705 + " <map.select(-1)>")
chamada antiga: assertEquals(maxForRoaringBitmap, map.getLongCardinality())
nova chamada: assertEquals(maxForRoaringBitmap, map.getLongCardinality(), "Era esperado valores iguais, mas  maxForRoaringBitmap é diferente de " + result706 + " <map.getLongCardinality()>")
chamada antiga: assertEquals(-1, map.select(-1))
nova chamada: assertEquals(-1, map.select(-1), "Era esperado valores iguais, mas  -1 é diferente de " + result707 + " <map.select(-1)>")
chamada antiga: assertNotEquals(RoaringIntPacking.high(to), RoaringIntPacking.high(from))
nova chamada: assertNotEquals(RoaringIntPacking.high(to), RoaringIntPacking.high(from), "Era esperado valores diferentes, mas " + result708 + " <RoaringIntPacking.high(to)> é igual a " + result709 + " <RoaringIntPacking.high(from)>")
chamada antiga: assertTrue(it.hasNext())
nova chamada: assertTrue(it.hasNext(), "Era esperado verdadeiro, mas " + result710 + " <it.hasNext()> é falso")
chamada antiga: assertEquals(123L, it.next().longValue())
nova chamada: assertEquals(123L, it.next().longValue(), "Era esperado valores iguais, mas  123L é diferente de " + result711 + " <it.next().longValue()>")
chamada antiga: assertTrue(it.hasNext())
nova chamada: assertTrue(it.hasNext(), "Era esperado verdadeiro, mas " + result712 + " <it.hasNext()> é falso")
chamada antiga: assertEquals(234, it.next().longValue())
nova chamada: assertEquals(234, it.next().longValue(), "Era esperado valores iguais, mas  234 é diferente de " + result713 + " <it.next().longValue()>")
chamada antiga: assertFalse(it.hasNext())
nova chamada: assertFalse(it.hasNext(), "Era esperado falso, mas " + result714 + " <it.hasNext()> é verdadeiro ")
chamada antiga: assertThrows(UnsupportedOperationException.class, () -> {
    Roaring64NavigableMap map = newUnsignedHeap();
    map.addLong(123);
    map.addLong(234);
    Iterator<Long> it = map.iterator();
    assertTrue(it.hasNext());
    it.remove();
})
nova chamada: assertThrows(UnsupportedOperationException.class, () -> {
    Roaring64NavigableMap map = newUnsignedHeap();
    map.addLong(123);
    map.addLong(234);
    Iterator<Long> it = map.iterator();
    assertTrue(it.hasNext());
    it.remove();
}, "Era esperado que a exceção  UnsupportedOperationException.class fosse lançada, mas não foi")
chamada antiga: assertEquals(123L, map.select(0))
nova chamada: assertEquals(123L, map.select(0), "Era esperado valores iguais, mas  123L é diferente de " + result715 + " <map.select(0)>")
chamada antiga: assertEquals(Long.MAX_VALUE, map.select(1))
nova chamada: assertEquals(Long.MAX_VALUE, map.select(1), "Era esperado valores iguais, mas  Long.MAX_VALUE é diferente de " + result716 + " <map.select(1)>")
chamada antiga: assertThrows(IllegalArgumentException.class, () -> {
    Roaring64NavigableMap map = newUnsignedHeap();
    map.select(0);
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    Roaring64NavigableMap map = newUnsignedHeap();
    map.select(0);
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(IllegalArgumentException.class, () -> {
    Roaring64NavigableMap map = newUnsignedHeap();
    map.addLong(123);
    map.select(1);
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    Roaring64NavigableMap map = newUnsignedHeap();
    map.addLong(123);
    map.select(1);
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(IllegalArgumentException.class, () -> {
    Roaring64NavigableMap map = newUnsignedHeap();
    map.addLong(123);
    map.select(2);
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    Roaring64NavigableMap map = newUnsignedHeap();
    map.addLong(123);
    map.select(2);
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: assertEquals(0, map.rankLong(0))
nova chamada: assertEquals(0, map.rankLong(0), "Era esperado valores iguais, mas  0 é diferente de " + result717 + " <map.rankLong(0)>")
chamada antiga: assertEquals(1, map.rankLong(123))
nova chamada: assertEquals(1, map.rankLong(123), "Era esperado valores iguais, mas  1 é diferente de " + result718 + " <map.rankLong(123)>")
chamada antiga: assertEquals(1, map.rankLong(Long.MAX_VALUE - 1))
nova chamada: assertEquals(1, map.rankLong(Long.MAX_VALUE - 1), "Era esperado valores iguais, mas  1 é diferente de " + result719 + " <map.rankLong(Long.MAX_VALUE - 1)>")
chamada antiga: assertEquals(2, map.rankLong(Long.MAX_VALUE))
nova chamada: assertEquals(2, map.rankLong(Long.MAX_VALUE), "Era esperado valores iguais, mas  2 é diferente de " + result720 + " <map.rankLong(Long.MAX_VALUE)>")
chamada antiga: assertEquals(1, map.rankLong(Long.MAX_VALUE / 2L))
nova chamada: assertEquals(1, map.rankLong(Long.MAX_VALUE / 2L), "Era esperado valores iguais, mas  1 é diferente de " + result721 + " <map.rankLong(Long.MAX_VALUE / 2L)>")
chamada antiga: assertEquals(1, r.getLongCardinality())
nova chamada: assertEquals(1, r.getLongCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result722 + " <r.getLongCardinality()>")
chamada antiga: assertEquals(0, r.getLongCardinality())
nova chamada: assertEquals(0, r.getLongCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result723 + " <r.getLongCardinality()>")
chamada antiga: assertFalse(map.contains(0))
nova chamada: assertFalse(map.contains(0), "Era esperado falso, mas " + result724 + " <map.contains(0)> é verdadeiro ")
chamada antiga: assertFalse(map.contains(0))
nova chamada: assertFalse(map.contains(0), "Era esperado falso, mas " + result725 + " <map.contains(0)> é verdadeiro ")
chamada antiga: assertArrayEquals(bitmapAsIntArray, Ints.toArray(Longs.asList(longBitmapAsArray)))
nova chamada: assertArrayEquals(bitmapAsIntArray, Ints.toArray(Longs.asList(longBitmapAsArray)), "Era esperado arrays iguais, mas  bitmapAsIntArray é diferente de " + result726 + " <Ints.toArray(Longs.asList(longBitmapAsArray))>")
chamada antiga: assertArrayEquals(Longs.toArray(Ints.asList(bitmapAsIntArray)), longBitmapAsArray)
nova chamada: assertArrayEquals(Longs.toArray(Ints.asList(bitmapAsIntArray)), longBitmapAsArray, "Era esperado arrays iguais, mas " + result727 + " <Longs.toArray(Ints.asList(bitmapAsIntArray))> é diferente de " + " longBitmapAsArray")
chamada antiga: assertEquals(bitmap.select(0), longBitmap.select(0))
nova chamada: assertEquals(bitmap.select(0), longBitmap.select(0), "Era esperado valores iguais, mas " + result728 + " <bitmap.select(0)> é diferente de " + result729 + " <longBitmap.select(0)>")
chamada antiga: assertEquals(Util.toUnsignedLong(bitmap.select(0)), longBitmap.select(0))
nova chamada: assertEquals(Util.toUnsignedLong(bitmap.select(0)), longBitmap.select(0), "Era esperado valores iguais, mas " + result730 + " <Util.toUnsignedLong(bitmap.select(0))> é diferente de " + result731 + " <longBitmap.select(0)>")
chamada antiga: assertTrue(map.isEmpty())
nova chamada: assertTrue(map.isEmpty(), "Era esperado verdadeiro, mas " + result732 + " <map.isEmpty()> é falso")
chamada antiga: assertEquals(16, map.getLongSizeInBytes())
nova chamada: assertEquals(16, map.getLongSizeInBytes(), "Era esperado valores iguais, mas  16 é diferente de " + result733 + " <map.getLongSizeInBytes()>")
chamada antiga: assertEquals(3, map.getHighToBitmap().size())
nova chamada: assertEquals(3, map.getHighToBitmap().size(), "Era esperado valores iguais, mas  3 é diferente de " + result734 + " <map.getHighToBitmap().size()>")
chamada antiga: assertEquals(228, map.getLongSizeInBytes())
nova chamada: assertEquals(228, map.getLongSizeInBytes(), "Era esperado valores iguais, mas  228 é diferente de " + result735 + " <map.getLongSizeInBytes()>")
chamada antiga: assertEquals(264, map.getLongSizeInBytes())
nova chamada: assertEquals(264, map.getLongSizeInBytes(), "Era esperado valores iguais, mas  264 é diferente de " + result736 + " <map.getLongSizeInBytes()>")
chamada antiga: assertEquals(map2, map1)
nova chamada: assertEquals(map2, map1, "Era esperado valores iguais, mas  map2 é diferente de " + " map1")
chamada antiga: Assertions.assertTrue(x.getHighToBitmap().values().iterator().next() instanceof RoaringBitmap)
nova chamada: assertTrue(x.getHighToBitmap().values().iterator().next() instanceof RoaringBitmap, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(y.getHighToBitmap().values().iterator().next() instanceof RoaringBitmap)
nova chamada: assertTrue(y.getHighToBitmap().values().iterator().next() instanceof RoaringBitmap, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertEquals(16L, x.getLongCardinality())
nova chamada: assertEquals(16L, x.getLongCardinality(), "Era esperado valores iguais, mas  16L é diferente de " + result737 + " <x.getLongCardinality()>")
chamada antiga: Assertions.assertEquals(8L, x.getLongCardinality())
nova chamada: assertEquals(8L, x.getLongCardinality(), "Era esperado valores iguais, mas  8L é diferente de " + result738 + " <x.getLongCardinality()>")
chamada antiga: Assertions.assertThrows(UnsupportedOperationException.class, () -> x.and(y))
nova chamada: assertThrows(UnsupportedOperationException.class, () -> x.and(y), "Era esperado que a exceção  UnsupportedOperationException.class fosse lançada, mas não foi")
chamada antiga: Assertions.assertEquals(reference.length, bitmap.serializedSizeInBytes())
nova chamada: assertEquals(reference.length, bitmap.serializedSizeInBytes(), "Era esperado valores iguais, mas  reference.length é diferente de " + result739 + " <bitmap.serializedSizeInBytes()>")
chamada antiga: Assertions.assertArrayEquals(reference, baos.toByteArray())
nova chamada: assertArrayEquals(reference, baos.toByteArray(), "Era esperado arrays iguais, mas  reference é diferente de " + result740 + " <baos.toByteArray()>")
chamada antiga: Assertions.assertEquals(0, bitmap.getLongCardinality())
nova chamada: assertEquals(0, bitmap.getLongCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result741 + " <bitmap.getLongCardinality()>")
chamada antiga: Assertions.assertEquals(0, bitmap.getHighToBitmap().size())
nova chamada: assertEquals(0, bitmap.getHighToBitmap().size(), "Era esperado valores iguais, mas  0 é diferente de " + result742 + " <bitmap.getHighToBitmap().size()>")
chamada antiga: Assertions.assertEquals(10, bitmap.getLongCardinality())
nova chamada: assertEquals(10, bitmap.getLongCardinality(), "Era esperado valores iguais, mas  10 é diferente de " + result743 + " <bitmap.getLongCardinality()>")
chamada antiga: Assertions.assertEquals(1, bitmap.getHighToBitmap().size())
nova chamada: assertEquals(1, bitmap.getHighToBitmap().size(), "Era esperado valores iguais, mas  1 é diferente de " + result744 + " <bitmap.getHighToBitmap().size()>")
chamada antiga: Assertions.assertEquals(0, bitmap.select(0))
nova chamada: assertEquals(0, bitmap.select(0), "Era esperado valores iguais, mas  0 é diferente de " + result745 + " <bitmap.select(0)>")
chamada antiga: Assertions.assertEquals(9, bitmap.select(9))
nova chamada: assertEquals(9, bitmap.select(9), "Era esperado valores iguais, mas  9 é diferente de " + result746 + " <bitmap.select(9)>")
chamada antiga: Assertions.assertEquals(100, bitmap.getLongCardinality())
nova chamada: assertEquals(100, bitmap.getLongCardinality(), "Era esperado valores iguais, mas  100 é diferente de " + result747 + " <bitmap.getLongCardinality()>")
chamada antiga: Assertions.assertEquals(10, bitmap.getHighToBitmap().size())
nova chamada: assertEquals(10, bitmap.getHighToBitmap().size(), "Era esperado valores iguais, mas  10 é diferente de " + result748 + " <bitmap.getHighToBitmap().size()>")
chamada antiga: Assertions.assertEquals(0, bitmap.select(0))
nova chamada: assertEquals(0, bitmap.select(0), "Era esperado valores iguais, mas  0 é diferente de " + result749 + " <bitmap.select(0)>")
chamada antiga: Assertions.assertEquals(9, bitmap.select(9))
nova chamada: assertEquals(9, bitmap.select(9), "Era esperado valores iguais, mas  9 é diferente de " + result750 + " <bitmap.select(9)>")
chamada antiga: Assertions.assertEquals((9L << 32) + 0L, bitmap.select(90))
nova chamada: assertEquals((9L << 32) + 0L, bitmap.select(90), "Era esperado valores iguais, mas  (9L  32) + 0L é diferente de " + result751 + " <bitmap.select(90)>")
chamada antiga: Assertions.assertEquals((9L << 32) + 1L, bitmap.select(91))
nova chamada: assertEquals((9L << 32) + 1L, bitmap.select(91), "Era esperado valores iguais, mas  (9L  32) + 1L é diferente de " + result752 + " <bitmap.select(91)>")
chamada antiga: Assertions.assertEquals((9L << 32) + 9L, bitmap.select(99))
nova chamada: assertEquals((9L << 32) + 9L, bitmap.select(99), "Era esperado valores iguais, mas  (9L  32) + 9L é diferente de " + result753 + " <bitmap.select(99)>")
chamada antiga: Assertions.assertEquals(121, bitmap.getLongCardinality())
nova chamada: assertEquals(121, bitmap.getLongCardinality(), "Era esperado valores iguais, mas  121 é diferente de " + result754 + " <bitmap.getLongCardinality()>")
chamada antiga: Assertions.assertEquals(11, bitmap.getHighToBitmap().size())
nova chamada: assertEquals(11, bitmap.getHighToBitmap().size(), "Era esperado valores iguais, mas  11 é diferente de " + result755 + " <bitmap.getHighToBitmap().size()>")
chamada antiga: Assertions.assertEquals(((maxInt - 10L) << 32) + (maxInt - 10), bitmap.select(0))
nova chamada: assertEquals(((maxInt - 10L) << 32) + (maxInt - 10), bitmap.select(0), "Era esperado valores iguais, mas  ((maxInt - 10L)  32) + (maxInt - 10) é diferente de " + result756 + " <bitmap.select(0)>")
chamada antiga: Assertions.assertEquals(((maxInt - 10L) << 32) + (maxInt - 0), bitmap.select(10))
nova chamada: assertEquals(((maxInt - 10L) << 32) + (maxInt - 0), bitmap.select(10), "Era esperado valores iguais, mas  ((maxInt - 10L)  32) + (maxInt - 0) é diferente de " + result757 + " <bitmap.select(10)>")
chamada antiga: Assertions.assertEquals(((maxInt - 0L) << 32) + (maxInt - 10), bitmap.select(110))
nova chamada: assertEquals(((maxInt - 0L) << 32) + (maxInt - 10), bitmap.select(110), "Era esperado valores iguais, mas  ((maxInt - 0L)  32) + (maxInt - 10) é diferente de " + result758 + " <bitmap.select(110)>")
chamada antiga: Assertions.assertEquals(((maxInt - 0L) << 32) + (maxInt - 9), bitmap.select(111))
nova chamada: assertEquals(((maxInt - 0L) << 32) + (maxInt - 9), bitmap.select(111), "Era esperado valores iguais, mas  ((maxInt - 0L)  32) + (maxInt - 9) é diferente de " + result759 + " <bitmap.select(111)>")
chamada antiga: Assertions.assertEquals(((maxInt - 0L) << 32) + (maxInt - 0), bitmap.select(120))
nova chamada: assertEquals(((maxInt - 0L) << 32) + (maxInt - 0), bitmap.select(120), "Era esperado valores iguais, mas  ((maxInt - 0L)  32) + (maxInt - 0) é diferente de " + result760 + " <bitmap.select(120)>")
chamada antiga: Assertions.assertEquals(3L, x.getLongCardinality())
nova chamada: assertEquals(3L, x.getLongCardinality(), "Era esperado valores iguais, mas  3L é diferente de " + result761 + " <x.getLongCardinality()>")
chamada antiga: Assertions.assertArrayEquals(new long[] { 0, Long.MAX_VALUE, -1L }, x.toArray())
nova chamada: assertArrayEquals(new long[] { 0, Long.MAX_VALUE, -1L }, x.toArray(), "Era esperado arrays iguais, mas  new long[] { 0, Long.MAX_VALUE, -1L } é diferente de " + result762 + " <x.toArray()>")
chamada antiga: Assertions.assertEquals(3L, x.getLongCardinality())
nova chamada: assertEquals(3L, x.getLongCardinality(), "Era esperado valores iguais, mas  3L é diferente de " + result763 + " <x.getLongCardinality()>")
chamada antiga: Assertions.assertArrayEquals(new long[] { -1L, 0, Long.MAX_VALUE }, x.toArray())
nova chamada: assertArrayEquals(new long[] { -1L, 0, Long.MAX_VALUE }, x.toArray(), "Era esperado arrays iguais, mas  new long[] { -1L, 0, Long.MAX_VALUE } é diferente de " + result764 + " <x.toArray()>")
chamada antiga: Assertions.assertEquals(2L, x.getLongCardinality())
nova chamada: assertEquals(2L, x.getLongCardinality(), "Era esperado valores iguais, mas  2L é diferente de " + result765 + " <x.getLongCardinality()>")
chamada antiga: Assertions.assertArrayEquals(new long[] { -3L, -2L }, x.toArray())
nova chamada: assertArrayEquals(new long[] { -3L, -2L }, x.toArray(), "Era esperado arrays iguais, mas  new long[] { -3L, -2L } é diferente de " + result766 + " <x.toArray()>")
chamada antiga: Assertions.assertEquals(2L, x.getLongCardinality())
nova chamada: assertEquals(2L, x.getLongCardinality(), "Era esperado valores iguais, mas  2L é diferente de " + result767 + " <x.getLongCardinality()>")
chamada antiga: Assertions.assertArrayEquals(new long[] { -3L, -2L }, x.toArray())
nova chamada: assertArrayEquals(new long[] { -3L, -2L }, x.toArray(), "Era esperado arrays iguais, mas  new long[] { -3L, -2L } é diferente de " + result768 + " <x.toArray()>")
chamada antiga: Assertions.assertEquals(4L, x.getLongCardinality())
nova chamada: assertEquals(4L, x.getLongCardinality(), "Era esperado valores iguais, mas  4L é diferente de " + result769 + " <x.getLongCardinality()>")
chamada antiga: Assertions.assertEquals(1L, x.getHighToBitmap().size())
nova chamada: assertEquals(1L, x.getHighToBitmap().size(), "Era esperado valores iguais, mas  1L é diferente de " + result770 + " <x.getHighToBitmap().size()>")
chamada antiga: Assertions.assertArrayEquals(new long[] { Integer.MAX_VALUE - 1L, Integer.MAX_VALUE, Integer.MAX_VALUE + 1L, Integer.MAX_VALUE + 2L }, x.toArray())
nova chamada: assertArrayEquals(new long[] { Integer.MAX_VALUE - 1L, Integer.MAX_VALUE, Integer.MAX_VALUE + 1L, Integer.MAX_VALUE + 2L }, x.toArray(), "Era esperado arrays iguais, mas  new long[] { Integer.MAX_VALUE - 1L, Integer.MAX_VALUE, Integer.MAX_VALUE + 1L, Integer.MAX_VALUE + 2L } é diferente de " + result771 + " <x.toArray()>")
chamada antiga: Assertions.assertEquals(4L, x.getLongCardinality())
nova chamada: assertEquals(4L, x.getLongCardinality(), "Era esperado valores iguais, mas  4L é diferente de " + result772 + " <x.getLongCardinality()>")
chamada antiga: Assertions.assertEquals(2L, x.getHighToBitmap().size())
nova chamada: assertEquals(2L, x.getHighToBitmap().size(), "Era esperado valores iguais, mas  2L é diferente de " + result773 + " <x.getHighToBitmap().size()>")
chamada antiga: Assertions.assertArrayEquals(new long[] { rangeStart, rangeStart + 1L, rangeStart + 2L, rangeStart + 3L }, x.toArray())
nova chamada: assertArrayEquals(new long[] { rangeStart, rangeStart + 1L, rangeStart + 2L, rangeStart + 3L }, x.toArray(), "Era esperado arrays iguais, mas  new long[] { rangeStart, rangeStart + 1L, rangeStart + 2L, rangeStart + 3L } é diferente de " + result774 + " <x.toArray()>")
chamada antiga: Assertions.assertEquals(4L, x.getLongCardinality())
nova chamada: assertEquals(4L, x.getLongCardinality(), "Era esperado valores iguais, mas  4L é diferente de " + result775 + " <x.getLongCardinality()>")
chamada antiga: Assertions.assertArrayEquals(new long[] { Long.MAX_VALUE - 1L, Long.MAX_VALUE, Long.MIN_VALUE, Long.MIN_VALUE + 1L }, x.toArray())
nova chamada: assertArrayEquals(new long[] { Long.MAX_VALUE - 1L, Long.MAX_VALUE, Long.MIN_VALUE, Long.MIN_VALUE + 1L }, x.toArray(), "Era esperado arrays iguais, mas  new long[] { Long.MAX_VALUE - 1L, Long.MAX_VALUE, Long.MIN_VALUE, Long.MIN_VALUE + 1L } é diferente de " + result776 + " <x.toArray()>")
chamada antiga: Assertions.assertThrows(IllegalArgumentException.class, () -> {
    x.addRange(Long.MAX_VALUE - 1L, Long.MAX_VALUE + 3L);
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    x.addRange(Long.MAX_VALUE - 1L, Long.MAX_VALUE + 3L);
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(NoSuchElementException.class, () -> newDefaultCtor().first())
nova chamada: assertThrows(NoSuchElementException.class, () -> newDefaultCtor().first(), "Era esperado que a exceção  NoSuchElementException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(NoSuchElementException.class, () -> newDefaultCtor().last())
nova chamada: assertThrows(NoSuchElementException.class, () -> newDefaultCtor().last(), "Era esperado que a exceção  NoSuchElementException.class fosse lançada, mas não foi")
chamada antiga: assertEquals(2, rb.first())
nova chamada: assertEquals(2, rb.first(), "Era esperado valores iguais, mas  2 é diferente de " + result777 + " <rb.first()>")
chamada antiga: assertEquals(8, rb.last())
nova chamada: assertEquals(8, rb.last(), "Era esperado valores iguais, mas  8 é diferente de " + result778 + " <rb.last()>")
chamada antiga: assertEquals(-128, rb.first())
nova chamada: assertEquals(-128, rb.first(), "Era esperado valores iguais, mas  -128 é diferente de " + result779 + " <rb.first()>")
chamada antiga: assertEquals(-32, rb.last())
nova chamada: assertEquals(-32, rb.last(), "Era esperado valores iguais, mas  -32 é diferente de " + result780 + " <rb.last()>")
chamada antiga: assertEquals(2, rb.first())
nova chamada: assertEquals(2, rb.first(), "Era esperado valores iguais, mas  2 é diferente de " + result781 + " <rb.first()>")
chamada antiga: assertEquals(-32, rb.last())
nova chamada: assertEquals(-32, rb.last(), "Era esperado valores iguais, mas  -32 é diferente de " + result782 + " <rb.last()>")
chamada antiga: assertEquals(presentValues.length, expectedValueIndex)
nova chamada: assertEquals(presentValues.length, expectedValueIndex, "Era esperado valores iguais, mas  presentValues.length é diferente de " + " expectedValueIndex")
chamada antiga: assertTrue(BitSetUtil.equals(bitset, bitmap))
nova chamada: assertTrue(BitSetUtil.equals(bitset, bitmap), "Era esperado verdadeiro, mas " + result783 + " <BitSetUtil.equals(bitset, bitmap)> é falso")
chamada antiga: assertEquals(-2, map.select(-2))
nova chamada: assertEquals(-2, map.select(-2), "Era esperado valores iguais, mas  -2 é diferente de " + result784 + " <map.select(-2)>")
chamada antiga: assertEquals(-1, map.select(-1))
nova chamada: assertEquals(-1, map.select(-1), "Era esperado valores iguais, mas  -1 é diferente de " + result785 + " <map.select(-1)>")
chamada antiga: assertEquals(imrempty.isEmpty(), true)
nova chamada: assertEquals(imrempty.isEmpty(), true, "Era esperado valores iguais, mas " + result786 + " <imrempty.isEmpty()> é diferente de " + " true")
chamada antiga: assertEquals(count1, count2)
nova chamada: assertEquals(count1, count2, "Era esperado valores iguais, mas  count1 é diferente de " + " count2")
chamada antiga: assertEquals(cksum1, cksum2)
nova chamada: assertEquals(cksum1, cksum2, "Era esperado valores iguais, mas  cksum1 é diferente de " + " cksum2")
chamada antiga: assertEquals(count1, count2)
nova chamada: assertEquals(count1, count2, "Era esperado valores iguais, mas  count1 é diferente de " + " count2")
chamada antiga: assertEquals(cksum1, cksum2)
nova chamada: assertEquals(cksum1, cksum2, "Era esperado valores iguais, mas  cksum1 é diferente de " + " cksum2")
chamada antiga: assertEquals(bitmap_emptyr.isEmpty(), true)
nova chamada: assertEquals(bitmap_emptyr.isEmpty(), true, "Era esperado valores iguais, mas " + result787 + " <bitmap_emptyr.isEmpty()> é diferente de " + " true")
chamada antiga: assertEquals(bitmap_empty.isEmpty(), true)
nova chamada: assertEquals(bitmap_empty.isEmpty(), true, "Era esperado valores iguais, mas " + result788 + " <bitmap_empty.isEmpty()> é diferente de " + " true")
chamada antiga: assertEquals(cksum1, cksum2)
nova chamada: assertEquals(cksum1, cksum2, "Era esperado valores iguais, mas  cksum1 é diferente de " + " cksum2")
chamada antiga: assertEquals(emptyt.isEmpty(), true)
nova chamada: assertEquals(emptyt.isEmpty(), true, "Era esperado valores iguais, mas " + result789 + " <emptyt.isEmpty()> é diferente de " + " true")
chamada antiga: assertEquals(cksum1, cksum2)
nova chamada: assertEquals(cksum1, cksum2, "Era esperado valores iguais, mas  cksum1 é diferente de " + " cksum2")
chamada antiga: assertEquals(bitmap_a, bitmap_ar)
nova chamada: assertEquals(bitmap_a, bitmap_ar, "Era esperado valores iguais, mas  bitmap_a é diferente de " + " bitmap_ar")
chamada antiga: assertEquals(bitmap_am, bitmap_amr)
nova chamada: assertEquals(bitmap_am, bitmap_amr, "Era esperado valores iguais, mas  bitmap_am é diferente de " + " bitmap_amr")
chamada antiga: assertEquals(bitmap_am.serializedSizeInBytes(), bitmap_a.serializedSizeInBytes())
nova chamada: assertEquals(bitmap_am.serializedSizeInBytes(), bitmap_a.serializedSizeInBytes(), "Era esperado valores iguais, mas " + result790 + " <bitmap_am.serializedSizeInBytes()> é diferente de " + result791 + " <bitmap_a.serializedSizeInBytes()>")
chamada antiga: assertEquals(bitmap_amr.serializedSizeInBytes(), bitmap_ar.serializedSizeInBytes())
nova chamada: assertEquals(bitmap_amr.serializedSizeInBytes(), bitmap_ar.serializedSizeInBytes(), "Era esperado valores iguais, mas " + result792 + " <bitmap_amr.serializedSizeInBytes()> é diferente de " + result793 + " <bitmap_ar.serializedSizeInBytes()>")
chamada antiga: assertEquals(bitmap_a, bitmap_c1)
nova chamada: assertEquals(bitmap_a, bitmap_c1, "Era esperado valores iguais, mas  bitmap_a é diferente de " + " bitmap_c1")
chamada antiga: assertEquals(bitmap_a, bitmap_c2)
nova chamada: assertEquals(bitmap_a, bitmap_c2, "Era esperado valores iguais, mas  bitmap_a é diferente de " + " bitmap_c2")
chamada antiga: assertEquals(bitmap_a, bitmap_c3)
nova chamada: assertEquals(bitmap_a, bitmap_c3, "Era esperado valores iguais, mas  bitmap_a é diferente de " + " bitmap_c3")
chamada antiga: assertEquals(bitmap_a, bitmap_c4)
nova chamada: assertEquals(bitmap_a, bitmap_c4, "Era esperado valores iguais, mas  bitmap_a é diferente de " + " bitmap_c4")
chamada antiga: assertEquals(bitmap_ar, bitmap_c1)
nova chamada: assertEquals(bitmap_ar, bitmap_c1, "Era esperado valores iguais, mas  bitmap_ar é diferente de " + " bitmap_c1")
chamada antiga: assertEquals(bitmap_ar, bitmap_c2)
nova chamada: assertEquals(bitmap_ar, bitmap_c2, "Era esperado valores iguais, mas  bitmap_ar é diferente de " + " bitmap_c2")
chamada antiga: assertEquals(bitmap_ar, bitmap_c3)
nova chamada: assertEquals(bitmap_ar, bitmap_c3, "Era esperado valores iguais, mas  bitmap_ar é diferente de " + " bitmap_c3")
chamada antiga: assertEquals(bitmap_ar, bitmap_c4)
nova chamada: assertEquals(bitmap_ar, bitmap_c4, "Era esperado valores iguais, mas  bitmap_ar é diferente de " + " bitmap_c4")
chamada antiga: assertEquals(bitmap_a, bitmap_c)
nova chamada: assertEquals(bitmap_a, bitmap_c, "Era esperado valores iguais, mas  bitmap_a é diferente de " + " bitmap_c")
chamada antiga: assertEquals(expected, Util.cardinalityInBitmapRange(bc.bitmap, begin, end))
nova chamada: assertEquals(expected, Util.cardinalityInBitmapRange(bc.bitmap, begin, end), "Era esperado valores iguais, mas  expected é diferente de " + result794 + " <Util.cardinalityInBitmapRange(bc.bitmap, begin, end)>")
chamada antiga: assertEquals("{5,6,7,8,9,10,11,12,13,14,65517,65533}", bc2.toString())
nova chamada: assertEquals("{5,6,7,8,9,10,11,12,13,14,65517,65533}", bc2.toString(), "Era esperado valores iguais, mas  '{5,6,7,8,9,10,11,12,13,14,65517,65533}' é diferente de " + result795 + " <bc2.toString()>")
chamada antiga: assertEquals(0, bc.ixor(bc3).getCardinality())
nova chamada: assertEquals(0, bc.ixor(bc3).getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result796 + " <bc.ixor(bc3).getCardinality()>")
chamada antiga: assertEquals(bc, bc3)
nova chamada: assertEquals(bc, bc3, "Era esperado valores iguais, mas  bc é diferente de " + " bc3")
chamada antiga: assertEquals(bc.hashCode(), bc3.hashCode())
nova chamada: assertEquals(bc.hashCode(), bc3.hashCode(), "Era esperado valores iguais, mas " + result797 + " <bc.hashCode()> é diferente de " + result798 + " <bc3.hashCode()>")
chamada antiga: assertEquals(0, bc.iandNot(bc3).getCardinality())
nova chamada: assertEquals(0, bc.iandNot(bc3).getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result799 + " <bc.iandNot(bc3).getCardinality()>")
chamada antiga: assertEquals(0, bc3.getCardinality())
nova chamada: assertEquals(0, bc3.getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result800 + " <bc3.getCardinality()>")
chamada antiga: assertEquals(bc, bc2)
nova chamada: assertEquals(bc, bc2, "Era esperado valores iguais, mas  bc é diferente de " + " bc2")
chamada antiga: assertEquals(0, bc.iand(bc3).getCardinality())
nova chamada: assertEquals(0, bc.iand(bc3).getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result801 + " <bc.iand(bc3).getCardinality()>")
chamada antiga: assertEquals(bc, bc2)
nova chamada: assertEquals(bc, bc2, "Era esperado valores iguais, mas  bc é diferente de " + " bc2")
chamada antiga: assertEquals(bc, bc2)
nova chamada: assertEquals(bc, bc2, "Era esperado valores iguais, mas  bc é diferente de " + " bc2")
chamada antiga: assertEquals(0, bc.iandNot(rc).getCardinality())
nova chamada: assertEquals(0, bc.iandNot(rc).getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result802 + " <bc.iandNot(rc).getCardinality()>")
chamada antiga: assertEquals(-1, result.getCardinality())
nova chamada: assertEquals(-1, result.getCardinality(), "Era esperado valores iguais, mas  -1 é diferente de " + result803 + " <result.getCardinality()>")
chamada antiga: assertEquals(-1, iresult.getCardinality())
nova chamada: assertEquals(-1, iresult.getCardinality(), "Era esperado valores iguais, mas  -1 é diferente de " + result804 + " <iresult.getCardinality()>")
chamada antiga: assertEquals(1 << 16, repaired.getCardinality())
nova chamada: assertEquals(1 << 16, repaired.getCardinality(), "Era esperado valores iguais, mas  1  16 é diferente de " + result805 + " <repaired.getCardinality()>")
chamada antiga: assertEquals(1 << 16, irepaired.getCardinality())
nova chamada: assertEquals(1 << 16, irepaired.getCardinality(), "Era esperado valores iguais, mas  1  16 é diferente de " + result806 + " <irepaired.getCardinality()>")
chamada antiga: assertTrue(repaired instanceof RunContainer)
nova chamada: assertTrue(repaired instanceof RunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(irepaired instanceof RunContainer)
nova chamada: assertTrue(irepaired instanceof RunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(-1, result.getCardinality())
nova chamada: assertEquals(-1, result.getCardinality(), "Era esperado valores iguais, mas  -1 é diferente de " + result807 + " <result.getCardinality()>")
chamada antiga: assertEquals(-1, iresult.getCardinality())
nova chamada: assertEquals(-1, iresult.getCardinality(), "Era esperado valores iguais, mas  -1 é diferente de " + result808 + " <iresult.getCardinality()>")
chamada antiga: assertEquals(1 << 16, repaired.getCardinality())
nova chamada: assertEquals(1 << 16, repaired.getCardinality(), "Era esperado valores iguais, mas  1  16 é diferente de " + result809 + " <repaired.getCardinality()>")
chamada antiga: assertEquals(1 << 16, irepaired.getCardinality())
nova chamada: assertEquals(1 << 16, irepaired.getCardinality(), "Era esperado valores iguais, mas  1  16 é diferente de " + result810 + " <irepaired.getCardinality()>")
chamada antiga: assertTrue(repaired instanceof RunContainer)
nova chamada: assertTrue(repaired instanceof RunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(irepaired instanceof RunContainer)
nova chamada: assertTrue(irepaired instanceof RunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(-1, result.getCardinality())
nova chamada: assertEquals(-1, result.getCardinality(), "Era esperado valores iguais, mas  -1 é diferente de " + result811 + " <result.getCardinality()>")
chamada antiga: assertEquals(-1, iresult.getCardinality())
nova chamada: assertEquals(-1, iresult.getCardinality(), "Era esperado valores iguais, mas  -1 é diferente de " + result812 + " <iresult.getCardinality()>")
chamada antiga: assertEquals(1 << 16, repaired.getCardinality())
nova chamada: assertEquals(1 << 16, repaired.getCardinality(), "Era esperado valores iguais, mas  1  16 é diferente de " + result813 + " <repaired.getCardinality()>")
chamada antiga: assertEquals(1 << 16, irepaired.getCardinality())
nova chamada: assertEquals(1 << 16, irepaired.getCardinality(), "Era esperado valores iguais, mas  1  16 é diferente de " + result814 + " <irepaired.getCardinality()>")
chamada antiga: assertTrue(repaired instanceof RunContainer)
nova chamada: assertTrue(repaired instanceof RunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(irepaired instanceof RunContainer)
nova chamada: assertTrue(irepaired instanceof RunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(8280, bc.cardinality)
nova chamada: assertEquals(8280, bc.cardinality, "Era esperado valores iguais, mas  8280 é diferente de " + " bc.cardinality")
chamada antiga: assertEquals(8280, bc.cardinality)
nova chamada: assertEquals(8280, bc.cardinality, "Era esperado valores iguais, mas  8280 é diferente de " + " bc.cardinality")
chamada antiga: assertEquals(8677, bc.cardinality)
nova chamada: assertEquals(8677, bc.cardinality, "Era esperado valores iguais, mas  8677 é diferente de " + " bc.cardinality")
chamada antiga: assertEquals(5274, bc.cardinality)
nova chamada: assertEquals(5274, bc.cardinality, "Era esperado valores iguais, mas  5274 é diferente de " + " bc.cardinality")
chamada antiga: assertEquals(5274, bc.cardinality)
nova chamada: assertEquals(5274, bc.cardinality, "Era esperado valores iguais, mas  5274 é diferente de " + " bc.cardinality")
chamada antiga: assertEquals(5046, bc.cardinality)
nova chamada: assertEquals(5046, bc.cardinality, "Era esperado valores iguais, mas  5046 é diferente de " + " bc.cardinality")
chamada antiga: assertEquals(6031, bc.cardinality)
nova chamada: assertEquals(6031, bc.cardinality, "Era esperado valores iguais, mas  6031 é diferente de " + " bc.cardinality")
chamada antiga: assertThrows(ArrayIndexOutOfBoundsException.class, () -> emptyContainer().nextSetBit(Short.MAX_VALUE + 1))
nova chamada: assertThrows(ArrayIndexOutOfBoundsException.class, () -> emptyContainer().nextSetBit(Short.MAX_VALUE + 1), "Era esperado que a exceção  ArrayIndexOutOfBoundsException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(ArrayIndexOutOfBoundsException.class, () -> emptyContainer().nextSetBit(-1))
nova chamada: assertThrows(ArrayIndexOutOfBoundsException.class, () -> emptyContainer().nextSetBit(-1), "Era esperado que a exceção  ArrayIndexOutOfBoundsException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(ArrayIndexOutOfBoundsException.class, () -> emptyContainer().prevSetBit(Short.MAX_VALUE + 1))
nova chamada: assertThrows(ArrayIndexOutOfBoundsException.class, () -> emptyContainer().prevSetBit(Short.MAX_VALUE + 1), "Era esperado que a exceção  ArrayIndexOutOfBoundsException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(ArrayIndexOutOfBoundsException.class, () -> emptyContainer().prevSetBit(-1))
nova chamada: assertThrows(ArrayIndexOutOfBoundsException.class, () -> emptyContainer().prevSetBit(-1), "Era esperado que a exceção  ArrayIndexOutOfBoundsException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(IllegalArgumentException.class, () -> {
    Container bc = new BitmapContainer();
    bc.add(13, 1);
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    Container bc = new BitmapContainer();
    bc.add(13, 1);
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(IllegalArgumentException.class, () -> {
    Container bc = new BitmapContainer();
    bc.iadd(13, 1);
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    Container bc = new BitmapContainer();
    bc.iadd(13, 1);
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: assertEquals(4, bc2.getCardinality())
nova chamada: assertEquals(4, bc2.getCardinality(), "Era esperado valores iguais, mas  4 é diferente de " + result815 + " <bc2.getCardinality()>")
chamada antiga: assertEquals(130, rc1.getCardinality())
nova chamada: assertEquals(130, rc1.getCardinality(), "Era esperado valores iguais, mas  130 é diferente de " + result816 + " <rc1.getCardinality()>")
chamada antiga: assertTrue(iterator.hasNext())
nova chamada: assertTrue(iterator.hasNext(), "Era esperado verdadeiro, mas " + result817 + " <iterator.hasNext()> é falso")
chamada antiga: assertEquals(256, iterator.next())
nova chamada: assertEquals(256, iterator.next(), "Era esperado valores iguais, mas  256 é diferente de " + result818 + " <iterator.next()>")
chamada antiga: assertTrue(iterator.hasNext())
nova chamada: assertTrue(iterator.hasNext(), "Era esperado verdadeiro, mas " + result819 + " <iterator.hasNext()> é falso")
chamada antiga: assertEquals(257, iterator.next())
nova chamada: assertEquals(257, iterator.next(), "Era esperado valores iguais, mas  257 é diferente de " + result820 + " <iterator.next()>")
chamada antiga: assertFalse(iterator.hasNext())
nova chamada: assertFalse(iterator.hasNext(), "Era esperado falso, mas " + result821 + " <iterator.hasNext()> é verdadeiro ")
chamada antiga: assertEquals(130, rc1.getCardinality())
nova chamada: assertEquals(130, rc1.getCardinality(), "Era esperado valores iguais, mas  130 é diferente de " + result822 + " <rc1.getCardinality()>")
chamada antiga: assertTrue(iterator.hasNext())
nova chamada: assertTrue(iterator.hasNext(), "Era esperado verdadeiro, mas " + result823 + " <iterator.hasNext()> é falso")
chamada antiga: assertEquals(256, iterator.next())
nova chamada: assertEquals(256, iterator.next(), "Era esperado valores iguais, mas  256 é diferente de " + result824 + " <iterator.next()>")
chamada antiga: assertTrue(iterator.hasNext())
nova chamada: assertTrue(iterator.hasNext(), "Era esperado verdadeiro, mas " + result825 + " <iterator.hasNext()> é falso")
chamada antiga: assertEquals(260, iterator.next())
nova chamada: assertEquals(260, iterator.next(), "Era esperado valores iguais, mas  260 é diferente de " + result826 + " <iterator.next()>")
chamada antiga: assertFalse(iterator.hasNext())
nova chamada: assertFalse(iterator.hasNext(), "Era esperado falso, mas " + result827 + " <iterator.hasNext()> é verdadeiro ")
chamada antiga: assertEquals(130, rc1.getCardinality())
nova chamada: assertEquals(130, rc1.getCardinality(), "Era esperado valores iguais, mas  130 é diferente de " + result828 + " <rc1.getCardinality()>")
chamada antiga: assertTrue(iterator.hasNext())
nova chamada: assertTrue(iterator.hasNext(), "Era esperado verdadeiro, mas " + result829 + " <iterator.hasNext()> é falso")
chamada antiga: assertEquals(256, iterator.next())
nova chamada: assertEquals(256, iterator.next(), "Era esperado valores iguais, mas  256 é diferente de " + result830 + " <iterator.next()>")
chamada antiga: assertTrue(iterator.hasNext())
nova chamada: assertTrue(iterator.hasNext(), "Era esperado verdadeiro, mas " + result831 + " <iterator.hasNext()> é falso")
chamada antiga: assertEquals(257, iterator.next())
nova chamada: assertEquals(257, iterator.next(), "Era esperado valores iguais, mas  257 é diferente de " + result832 + " <iterator.next()>")
chamada antiga: assertFalse(iterator.hasNext())
nova chamada: assertFalse(iterator.hasNext(), "Era esperado falso, mas " + result833 + " <iterator.hasNext()> é verdadeiro ")
chamada antiga: assertEquals(130, rc1.getCardinality())
nova chamada: assertEquals(130, rc1.getCardinality(), "Era esperado valores iguais, mas  130 é diferente de " + result834 + " <rc1.getCardinality()>")
chamada antiga: assertTrue(iterator.hasNext())
nova chamada: assertTrue(iterator.hasNext(), "Era esperado verdadeiro, mas " + result835 + " <iterator.hasNext()> é falso")
chamada antiga: assertEquals(256, iterator.next())
nova chamada: assertEquals(256, iterator.next(), "Era esperado valores iguais, mas  256 é diferente de " + result836 + " <iterator.next()>")
chamada antiga: assertTrue(iterator.hasNext())
nova chamada: assertTrue(iterator.hasNext(), "Era esperado verdadeiro, mas " + result837 + " <iterator.hasNext()> é falso")
chamada antiga: assertEquals(257, iterator.next())
nova chamada: assertEquals(257, iterator.next(), "Era esperado valores iguais, mas  257 é diferente de " + result838 + " <iterator.next()>")
chamada antiga: assertFalse(iterator.hasNext())
nova chamada: assertFalse(iterator.hasNext(), "Era esperado falso, mas " + result839 + " <iterator.hasNext()> é verdadeiro ")
chamada antiga: assertEquals(130, rc1.getCardinality())
nova chamada: assertEquals(130, rc1.getCardinality(), "Era esperado valores iguais, mas  130 é diferente de " + result840 + " <rc1.getCardinality()>")
chamada antiga: assertTrue(iterator.hasNext())
nova chamada: assertTrue(iterator.hasNext(), "Era esperado verdadeiro, mas " + result841 + " <iterator.hasNext()> é falso")
chamada antiga: assertEquals(256, iterator.next())
nova chamada: assertEquals(256, iterator.next(), "Era esperado valores iguais, mas  256 é diferente de " + result842 + " <iterator.next()>")
chamada antiga: assertTrue(iterator.hasNext())
nova chamada: assertTrue(iterator.hasNext(), "Era esperado verdadeiro, mas " + result843 + " <iterator.hasNext()> é falso")
chamada antiga: assertEquals(260, iterator.next())
nova chamada: assertEquals(260, iterator.next(), "Era esperado valores iguais, mas  260 é diferente de " + result844 + " <iterator.next()>")
chamada antiga: assertFalse(iterator.hasNext())
nova chamada: assertFalse(iterator.hasNext(), "Era esperado falso, mas " + result845 + " <iterator.hasNext()> é verdadeiro ")
chamada antiga: assertEquals(9, bc.getCardinality())
nova chamada: assertEquals(9, bc.getCardinality(), "Era esperado valores iguais, mas  9 é diferente de " + result846 + " <bc.getCardinality()>")
chamada antiga: assertEquals(1 << 16, result.getCardinality())
nova chamada: assertEquals(1 << 16, result.getCardinality(), "Era esperado valores iguais, mas  1  16 é diferente de " + result847 + " <result.getCardinality()>")
chamada antiga: assertTrue(result instanceof RunContainer)
nova chamada: assertTrue(result instanceof RunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(1 << 16, result.getCardinality())
nova chamada: assertEquals(1 << 16, result.getCardinality(), "Era esperado valores iguais, mas  1  16 é diferente de " + result848 + " <result.getCardinality()>")
chamada antiga: assertTrue(result instanceof RunContainer)
nova chamada: assertTrue(result instanceof RunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(1 << 16, result.getCardinality())
nova chamada: assertEquals(1 << 16, result.getCardinality(), "Era esperado valores iguais, mas  1  16 é diferente de " + result849 + " <result.getCardinality()>")
chamada antiga: assertEquals(1 << 16, iresult.getCardinality())
nova chamada: assertEquals(1 << 16, iresult.getCardinality(), "Era esperado valores iguais, mas  1  16 é diferente de " + result850 + " <iresult.getCardinality()>")
chamada antiga: assertTrue(result instanceof RunContainer)
nova chamada: assertTrue(result instanceof RunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(iresult instanceof RunContainer)
nova chamada: assertTrue(iresult instanceof RunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(1 << 16, iresult.getCardinality())
nova chamada: assertEquals(1 << 16, iresult.getCardinality(), "Era esperado valores iguais, mas  1  16 é diferente de " + result851 + " <iresult.getCardinality()>")
chamada antiga: assertTrue(iresult instanceof RunContainer)
nova chamada: assertTrue(iresult instanceof RunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(0, bc.getCardinality())
nova chamada: assertEquals(0, bc.getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result852 + " <bc.getCardinality()>")
chamada antiga: assertThrows(IllegalArgumentException.class, () -> {
    Container ac = new BitmapContainer();
    ac.iremove(13, 1);
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    Container ac = new BitmapContainer();
    ac.iremove(13, 1);
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: assertEquals(4, bc.getCardinality())
nova chamada: assertEquals(4, bc.getCardinality(), "Era esperado valores iguais, mas  4 é diferente de " + result853 + " <bc.getCardinality()>")
chamada antiga: assertEquals(8082, bc.getCardinality())
nova chamada: assertEquals(8082, bc.getCardinality(), "Era esperado valores iguais, mas  8082 é diferente de " + result854 + " <bc.getCardinality()>")
chamada antiga: assertEquals(9, bc.getCardinality())
nova chamada: assertEquals(9, bc.getCardinality(), "Era esperado valores iguais, mas  9 é diferente de " + result855 + " <bc.getCardinality()>")
chamada antiga: assertEquals(8082, bc.getCardinality())
nova chamada: assertEquals(8082, bc.getCardinality(), "Era esperado valores iguais, mas  8082 é diferente de " + result856 + " <bc.getCardinality()>")
chamada antiga: assertThrows(IllegalArgumentException.class, () -> {
    Container bc = new BitmapContainer();
    bc = bc.add(1, 13);
    bc.select(100);
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    Container bc = new BitmapContainer();
    bc = bc.add(1, 13);
    bc.select(100);
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(IllegalArgumentException.class, () -> {
    Container ac = new BitmapContainer();
    ac.remove(13, 1);
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    Container ac = new BitmapContainer();
    ac.remove(13, 1);
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: assertEquals(8082, bc.getCardinality())
nova chamada: assertEquals(8082, bc.getCardinality(), "Era esperado valores iguais, mas  8082 é diferente de " + result857 + " <bc.getCardinality()>")
chamada antiga: assertEquals(9, bc.getCardinality())
nova chamada: assertEquals(9, bc.getCardinality(), "Era esperado valores iguais, mas  9 é diferente de " + result858 + " <bc.getCardinality()>")
chamada antiga: assertThrows(NoSuchElementException.class, () -> new BitmapContainer().first())
nova chamada: assertThrows(NoSuchElementException.class, () -> new BitmapContainer().first(), "Era esperado que a exceção  NoSuchElementException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(NoSuchElementException.class, () -> new BitmapContainer().last())
nova chamada: assertThrows(NoSuchElementException.class, () -> new BitmapContainer().last(), "Era esperado que a exceção  NoSuchElementException.class fosse lançada, mas não foi")
chamada antiga: assertTrue(bc.contains(subset))
nova chamada: assertTrue(bc.contains(subset), "Era esperado verdadeiro, mas " + result859 + " <bc.contains(subset)> é falso")
chamada antiga: assertTrue(bc.contains(subset))
nova chamada: assertTrue(bc.contains(subset), "Era esperado verdadeiro, mas " + result860 + " <bc.contains(subset)> é falso")
chamada antiga: assertTrue(bc.contains(subset))
nova chamada: assertTrue(bc.contains(subset), "Era esperado verdadeiro, mas " + result861 + " <bc.contains(subset)> é falso")
chamada antiga: assertFalse(bc.contains(superset))
nova chamada: assertFalse(bc.contains(superset), "Era esperado falso, mas " + result862 + " <bc.contains(superset)> é verdadeiro ")
chamada antiga: assertTrue(bc.contains(subset))
nova chamada: assertTrue(bc.contains(subset), "Era esperado verdadeiro, mas " + result863 + " <bc.contains(subset)> é falso")
chamada antiga: assertFalse(bc.contains(shifted))
nova chamada: assertFalse(bc.contains(shifted), "Era esperado falso, mas " + result864 + " <bc.contains(shifted)> é verdadeiro ")
chamada antiga: assertFalse(bc.contains(disjoint))
nova chamada: assertFalse(bc.contains(disjoint), "Era esperado falso, mas " + result865 + " <bc.contains(disjoint)> é verdadeiro ")
chamada antiga: assertFalse(disjoint.contains(bc))
nova chamada: assertFalse(disjoint.contains(bc), "Era esperado falso, mas " + result866 + " <disjoint.contains(bc)> é verdadeiro ")
chamada antiga: assertTrue(bc.contains(subset))
nova chamada: assertTrue(bc.contains(subset), "Era esperado verdadeiro, mas " + result867 + " <bc.contains(subset)> é falso")
chamada antiga: assertTrue(bc.contains(subset))
nova chamada: assertTrue(bc.contains(subset), "Era esperado verdadeiro, mas " + result868 + " <bc.contains(subset)> é falso")
chamada antiga: assertTrue(bc.contains(subset))
nova chamada: assertTrue(bc.contains(subset), "Era esperado verdadeiro, mas " + result869 + " <bc.contains(subset)> é falso")
chamada antiga: assertFalse(bc.contains(superset))
nova chamada: assertFalse(bc.contains(superset), "Era esperado falso, mas " + result870 + " <bc.contains(superset)> é verdadeiro ")
chamada antiga: assertTrue(bc.contains(subset))
nova chamada: assertTrue(bc.contains(subset), "Era esperado verdadeiro, mas " + result871 + " <bc.contains(subset)> é falso")
chamada antiga: assertFalse(bc.contains(shifted))
nova chamada: assertFalse(bc.contains(shifted), "Era esperado falso, mas " + result872 + " <bc.contains(shifted)> é verdadeiro ")
chamada antiga: assertFalse(bc.contains(disjoint))
nova chamada: assertFalse(bc.contains(disjoint), "Era esperado falso, mas " + result873 + " <bc.contains(disjoint)> é verdadeiro ")
chamada antiga: assertFalse(disjoint.contains(bc))
nova chamada: assertFalse(disjoint.contains(bc), "Era esperado falso, mas " + result874 + " <disjoint.contains(bc)> é verdadeiro ")
chamada antiga: assertTrue(bc.contains(subset))
nova chamada: assertTrue(bc.contains(subset), "Era esperado verdadeiro, mas " + result875 + " <bc.contains(subset)> é falso")
chamada antiga: assertTrue(bc.contains(subset))
nova chamada: assertTrue(bc.contains(subset), "Era esperado verdadeiro, mas " + result876 + " <bc.contains(subset)> é falso")
chamada antiga: assertTrue(bc.contains(subset))
nova chamada: assertTrue(bc.contains(subset), "Era esperado verdadeiro, mas " + result877 + " <bc.contains(subset)> é falso")
chamada antiga: assertFalse(bc.contains(superset))
nova chamada: assertFalse(bc.contains(superset), "Era esperado falso, mas " + result878 + " <bc.contains(superset)> é verdadeiro ")
chamada antiga: assertTrue(bc.contains(subset))
nova chamada: assertTrue(bc.contains(subset), "Era esperado verdadeiro, mas " + result879 + " <bc.contains(subset)> é falso")
chamada antiga: assertFalse(bc.contains(shifted))
nova chamada: assertFalse(bc.contains(shifted), "Era esperado falso, mas " + result880 + " <bc.contains(shifted)> é verdadeiro ")
chamada antiga: assertFalse(bc.contains(disjoint))
nova chamada: assertFalse(bc.contains(disjoint), "Era esperado falso, mas " + result881 + " <bc.contains(disjoint)> é verdadeiro ")
chamada antiga: assertFalse(disjoint.contains(bc))
nova chamada: assertFalse(disjoint.contains(bc), "Era esperado falso, mas " + result882 + " <disjoint.contains(bc)> é verdadeiro ")
chamada antiga: assertTrue(container.intersects(0, 1))
nova chamada: assertTrue(container.intersects(0, 1), "Era esperado verdadeiro, mas " + result883 + " <container.intersects(0, 1)> é falso")
chamada antiga: assertTrue(container.intersects(0, 101))
nova chamada: assertTrue(container.intersects(0, 101), "Era esperado verdadeiro, mas " + result884 + " <container.intersects(0, 101)> é falso")
chamada antiga: assertTrue(container.intersects(0, 1 << 16))
nova chamada: assertTrue(container.intersects(0, 1 << 16), "Era esperado verdadeiro, mas " + result885 + " <container.intersects(0, 1 << 16)> é falso")
chamada antiga: assertFalse(container.intersects(11, lower16Bits(-1)))
nova chamada: assertFalse(container.intersects(11, lower16Bits(-1)), "Era esperado falso, mas " + result886 + " <container.intersects(11, lower16Bits(-1))> é verdadeiro ")
chamada antiga: assertEquals(intersects, container.intersects(min, sup))
nova chamada: assertEquals(intersects, container.intersects(min, sup), "Era esperado valores iguais, mas  intersects é diferente de " + result887 + " <container.intersects(min, sup)>")
chamada antiga: assertTrue(container.intersects(0, 1))
nova chamada: assertTrue(container.intersects(0, 1), "Era esperado verdadeiro, mas " + result888 + " <container.intersects(0, 1)> é falso")
chamada antiga: assertTrue(container.intersects(0, 101))
nova chamada: assertTrue(container.intersects(0, 101), "Era esperado verdadeiro, mas " + result889 + " <container.intersects(0, 101)> é falso")
chamada antiga: assertTrue(container.intersects(0, 1 << 16))
nova chamada: assertTrue(container.intersects(0, 1 << 16), "Era esperado verdadeiro, mas " + result890 + " <container.intersects(0, 1 << 16)> é falso")
chamada antiga: assertTrue(container.intersects(11, 1 << 16))
nova chamada: assertTrue(container.intersects(11, 1 << 16), "Era esperado verdadeiro, mas " + result891 + " <container.intersects(11, 1 << 16)> é falso")
chamada antiga: assertTrue(container.intersects(501, 511))
nova chamada: assertTrue(container.intersects(501, 511), "Era esperado verdadeiro, mas " + result892 + " <container.intersects(501, 511)> é falso")
chamada antiga: assertFalse(container.intersects(0, 1))
nova chamada: assertFalse(container.intersects(0, 1), "Era esperado falso, mas " + result893 + " <container.intersects(0, 1)> é verdadeiro ")
chamada antiga: assertTrue(container.intersects(0, lower16Bits(-40)))
nova chamada: assertTrue(container.intersects(0, lower16Bits(-40)), "Era esperado verdadeiro, mas " + result894 + " <container.intersects(0, lower16Bits(-40))> é falso")
chamada antiga: assertFalse(container.intersects(lower16Bits(-100), lower16Bits(-55)))
nova chamada: assertFalse(container.intersects(lower16Bits(-100), lower16Bits(-55)), "Era esperado falso, mas " + result895 + " <container.intersects(lower16Bits(-100), lower16Bits(-55))> é verdadeiro ")
chamada antiga: assertFalse(container.intersects(lower16Bits(-9), lower16Bits(-1)))
nova chamada: assertFalse(container.intersects(lower16Bits(-9), lower16Bits(-1)), "Era esperado falso, mas " + result896 + " <container.intersects(lower16Bits(-9), lower16Bits(-1))> é verdadeiro ")
chamada antiga: assertTrue(container.intersects(lower16Bits(-50), lower16Bits(-10)))
nova chamada: assertTrue(container.intersects(lower16Bits(-50), lower16Bits(-10)), "Era esperado verdadeiro, mas " + result897 + " <container.intersects(lower16Bits(-50), lower16Bits(-10))> é falso")
chamada antiga: assertTrue(container.intersects(lower16Bits(-400), lower16Bits(-11)))
nova chamada: assertTrue(container.intersects(lower16Bits(-400), lower16Bits(-11)), "Era esperado verdadeiro, mas " + result898 + " <container.intersects(lower16Bits(-400), lower16Bits(-11))> é falso")
chamada antiga: assertTrue(container.intersects(lower16Bits(-11), lower16Bits(-1)))
nova chamada: assertTrue(container.intersects(lower16Bits(-11), lower16Bits(-1)), "Era esperado verdadeiro, mas " + result899 + " <container.intersects(lower16Bits(-11), lower16Bits(-1))> é falso")
chamada antiga: assertFalse(container.intersects(lower16Bits(-10), lower16Bits(-1)))
nova chamada: assertFalse(container.intersects(lower16Bits(-10), lower16Bits(-1)), "Era esperado falso, mas " + result900 + " <container.intersects(lower16Bits(-10), lower16Bits(-1))> é verdadeiro ")
chamada antiga: assertTrue(container.intersects(lower16Bits(-650), lower16Bits(-500)))
nova chamada: assertTrue(container.intersects(lower16Bits(-650), lower16Bits(-500)), "Era esperado verdadeiro, mas " + result901 + " <container.intersects(lower16Bits(-650), lower16Bits(-500))> é falso")
chamada antiga: assertTrue(container.intersects(lower16Bits(-501), lower16Bits(-1)))
nova chamada: assertTrue(container.intersects(lower16Bits(-501), lower16Bits(-1)), "Era esperado verdadeiro, mas " + result902 + " <container.intersects(lower16Bits(-501), lower16Bits(-1))> é falso")
chamada antiga: assertFalse(container.intersects(lower16Bits(-500), lower16Bits(-1)))
nova chamada: assertFalse(container.intersects(lower16Bits(-500), lower16Bits(-1)), "Era esperado falso, mas " + result903 + " <container.intersects(lower16Bits(-500), lower16Bits(-1))> é verdadeiro ")
chamada antiga: assertFalse(container.intersects(lower16Bits(-499), 1 << 16))
nova chamada: assertFalse(container.intersects(lower16Bits(-499), 1 << 16), "Era esperado falso, mas " + result904 + " <container.intersects(lower16Bits(-499), 1 << 16)> é verdadeiro ")
chamada antiga: assertTrue(container.contains(0, 1))
nova chamada: assertTrue(container.contains(0, 1), "Era esperado verdadeiro, mas " + result905 + " <container.contains(0, 1)> é falso")
chamada antiga: assertTrue(container.contains(64 * 10, 64 * 11))
nova chamada: assertTrue(container.contains(64 * 10, 64 * 11), "Era esperado verdadeiro, mas " + result906 + " <container.contains(64 * 10, 64 * 11)> é falso")
chamada antiga: assertFalse(container.contains(64 * 10, 2 + 64 * 11))
nova chamada: assertFalse(container.contains(64 * 10, 2 + 64 * 11), "Era esperado falso, mas " + result907 + " <container.contains(64 * 10, 2 + 64 * 11)> é verdadeiro ")
chamada antiga: assertTrue(container.contains(1 + 64 * 10, (64 * 11) - 1))
nova chamada: assertTrue(container.contains(1 + 64 * 10, (64 * 11) - 1), "Era esperado verdadeiro, mas " + result908 + " <container.contains(1 + 64 * 10, (64 * 11) - 1)> é falso")
chamada antiga: assertTrue(container.contains(0, 1))
nova chamada: assertTrue(container.contains(0, 1), "Era esperado verdadeiro, mas " + result909 + " <container.contains(0, 1)> é falso")
chamada antiga: assertFalse(container.contains(64 * 10, (64 * 13) - 30))
nova chamada: assertFalse(container.contains(64 * 10, (64 * 13) - 30), "Era esperado falso, mas " + result910 + " <container.contains(64 * 10, (64 * 13) - 30)> é verdadeiro ")
chamada antiga: assertTrue(container.contains(64 * 10, (64 * 13) - 31))
nova chamada: assertTrue(container.contains(64 * 10, (64 * 13) - 31), "Era esperado verdadeiro, mas " + result911 + " <container.contains(64 * 10, (64 * 13) - 31)> é falso")
chamada antiga: assertTrue(container.contains(1 + 64 * 10, (64 * 13) - 32))
nova chamada: assertTrue(container.contains(1 + 64 * 10, (64 * 13) - 32), "Era esperado verdadeiro, mas " + result912 + " <container.contains(1 + 64 * 10, (64 * 13) - 32)> é falso")
chamada antiga: assertTrue(container.contains(64 * 10, 64 * 12))
nova chamada: assertTrue(container.contains(64 * 10, 64 * 12), "Era esperado verdadeiro, mas " + result913 + " <container.contains(64 * 10, 64 * 12)> é falso")
chamada antiga: assertFalse(container.contains(64 * 10, 2 + 64 * 13))
nova chamada: assertFalse(container.contains(64 * 10, 2 + 64 * 13), "Era esperado falso, mas " + result914 + " <container.contains(64 * 10, 2 + 64 * 13)> é verdadeiro ")
chamada antiga: assertFalse(container.contains(64 * 1023, 64 * 1024))
nova chamada: assertFalse(container.contains(64 * 1023, 64 * 1024), "Era esperado falso, mas " + result915 + " <container.contains(64 * 1023, 64 * 1024)> é verdadeiro ")
chamada antiga: assertFalse(container.contains(64 * 1023, 64 * 1024 - 1))
nova chamada: assertFalse(container.contains(64 * 1023, 64 * 1024 - 1), "Era esperado falso, mas " + result916 + " <container.contains(64 * 1023, 64 * 1024 - 1)> é verdadeiro ")
chamada antiga: assertTrue(container.contains(1 + 64 * 1023, 64 * 1024 - 1))
nova chamada: assertTrue(container.contains(1 + 64 * 1023, 64 * 1024 - 1), "Era esperado verdadeiro, mas " + result917 + " <container.contains(1 + 64 * 1023, 64 * 1024 - 1)> é falso")
chamada antiga: assertTrue(container.contains(1 + 64 * 1023, 64 * 1024 - 2))
nova chamada: assertTrue(container.contains(1 + 64 * 1023, 64 * 1024 - 2), "Era esperado verdadeiro, mas " + result918 + " <container.contains(1 + 64 * 1023, 64 * 1024 - 2)> é falso")
chamada antiga: assertFalse(container.contains(64 * 1023, 64 * 1023 + 2))
nova chamada: assertFalse(container.contains(64 * 1023, 64 * 1023 + 2), "Era esperado falso, mas " + result919 + " <container.contains(64 * 1023, 64 * 1023 + 2)> é verdadeiro ")
chamada antiga: assertTrue(container.contains(64 * 1023 + 1, 64 * 1023 + 2))
nova chamada: assertTrue(container.contains(64 * 1023 + 1, 64 * 1023 + 2), "Era esperado verdadeiro, mas " + result920 + " <container.contains(64 * 1023 + 1, 64 * 1023 + 2)> é falso")
chamada antiga: assertEquals(0, container.nextSetBit(0))
nova chamada: assertEquals(0, container.nextSetBit(0), "Era esperado valores iguais, mas  0 é diferente de " + result921 + " <container.nextSetBit(0)>")
chamada antiga: assertEquals(2, container.nextSetBit(1))
nova chamada: assertEquals(2, container.nextSetBit(1), "Era esperado valores iguais, mas  2 é diferente de " + result922 + " <container.nextSetBit(1)>")
chamada antiga: assertEquals(2, container.nextSetBit(2))
nova chamada: assertEquals(2, container.nextSetBit(2), "Era esperado valores iguais, mas  2 é diferente de " + result923 + " <container.nextSetBit(2)>")
chamada antiga: assertEquals(4, container.nextSetBit(3))
nova chamada: assertEquals(4, container.nextSetBit(3), "Era esperado valores iguais, mas  4 é diferente de " + result924 + " <container.nextSetBit(3)>")
chamada antiga: assertEquals(-1, container.nextSetBit((64 * 1023) + 5))
nova chamada: assertEquals(-1, container.nextSetBit((64 * 1023) + 5), "Era esperado valores iguais, mas  -1 é diferente de " + result925 + " <container.nextSetBit((64 * 1023) + 5)>")
chamada antiga: assertEquals(64, container.nextSetBit(1))
nova chamada: assertEquals(64, container.nextSetBit(1), "Era esperado valores iguais, mas  64 é diferente de " + result926 + " <container.nextSetBit(1)>")
chamada antiga: assertEquals(10, container.nextValue((char) 10))
nova chamada: assertEquals(10, container.nextValue((char) 10), "Era esperado valores iguais, mas  10 é diferente de " + result927 + " <container.nextValue((char) 10)>")
chamada antiga: assertEquals(20, container.nextValue((char) 11))
nova chamada: assertEquals(20, container.nextValue((char) 11), "Era esperado valores iguais, mas  20 é diferente de " + result928 + " <container.nextValue((char) 11)>")
chamada antiga: assertEquals(30, container.nextValue((char) 30))
nova chamada: assertEquals(30, container.nextValue((char) 30), "Era esperado valores iguais, mas  30 é diferente de " + result929 + " <container.nextValue((char) 30)>")
chamada antiga: assertEquals(-1, container.nextValue((char) 31))
nova chamada: assertEquals(-1, container.nextValue((char) 31), "Era esperado valores iguais, mas  -1 é diferente de " + result930 + " <container.nextValue((char) 31)>")
chamada antiga: assertEquals(64, container.nextValue((char) 0))
nova chamada: assertEquals(64, container.nextValue((char) 0), "Era esperado valores iguais, mas  64 é diferente de " + result931 + " <container.nextValue((char) 0)>")
chamada antiga: assertEquals(64, container.nextValue((char) 64))
nova chamada: assertEquals(64, container.nextValue((char) 64), "Era esperado valores iguais, mas  64 é diferente de " + result932 + " <container.nextValue((char) 64)>")
chamada antiga: assertEquals(65, container.nextValue((char) 65))
nova chamada: assertEquals(65, container.nextValue((char) 65), "Era esperado valores iguais, mas  65 é diferente de " + result933 + " <container.nextValue((char) 65)>")
chamada antiga: assertEquals(128, container.nextValue((char) 128))
nova chamada: assertEquals(128, container.nextValue((char) 128), "Era esperado valores iguais, mas  128 é diferente de " + result934 + " <container.nextValue((char) 128)>")
chamada antiga: assertEquals(-1, container.nextValue((char) 129))
nova chamada: assertEquals(-1, container.nextValue((char) 129), "Era esperado valores iguais, mas  -1 é diferente de " + result935 + " <container.nextValue((char) 129)>")
chamada antiga: assertEquals(-1, container.nextValue((char) 5000))
nova chamada: assertEquals(-1, container.nextValue((char) 5000), "Era esperado valores iguais, mas  -1 é diferente de " + result936 + " <container.nextValue((char) 5000)>")
chamada antiga: assertEquals(64, container.nextValue((char) 0))
nova chamada: assertEquals(64, container.nextValue((char) 0), "Era esperado valores iguais, mas  64 é diferente de " + result937 + " <container.nextValue((char) 0)>")
chamada antiga: assertEquals(64, container.nextValue((char) 64))
nova chamada: assertEquals(64, container.nextValue((char) 64), "Era esperado valores iguais, mas  64 é diferente de " + result938 + " <container.nextValue((char) 64)>")
chamada antiga: assertEquals(65, container.nextValue((char) 65))
nova chamada: assertEquals(65, container.nextValue((char) 65), "Era esperado valores iguais, mas  65 é diferente de " + result939 + " <container.nextValue((char) 65)>")
chamada antiga: assertEquals(128, container.nextValue((char) 128))
nova chamada: assertEquals(128, container.nextValue((char) 128), "Era esperado valores iguais, mas  128 é diferente de " + result940 + " <container.nextValue((char) 128)>")
chamada antiga: assertEquals(256, container.nextValue((char) 129))
nova chamada: assertEquals(256, container.nextValue((char) 129), "Era esperado valores iguais, mas  256 é diferente de " + result941 + " <container.nextValue((char) 129)>")
chamada antiga: assertEquals(-1, container.nextValue((char) 512))
nova chamada: assertEquals(-1, container.nextValue((char) 512), "Era esperado valores iguais, mas  -1 é diferente de " + result942 + " <container.nextValue((char) 512)>")
chamada antiga: assertEquals(64, container.nextValue((char) 0))
nova chamada: assertEquals(64, container.nextValue((char) 0), "Era esperado valores iguais, mas  64 é diferente de " + result943 + " <container.nextValue((char) 0)>")
chamada antiga: assertEquals(64, container.nextValue((char) 63))
nova chamada: assertEquals(64, container.nextValue((char) 63), "Era esperado valores iguais, mas  64 é diferente de " + result944 + " <container.nextValue((char) 63)>")
chamada antiga: assertEquals(64, container.nextValue((char) 64))
nova chamada: assertEquals(64, container.nextValue((char) 64), "Era esperado valores iguais, mas  64 é diferente de " + result945 + " <container.nextValue((char) 64)>")
chamada antiga: assertEquals(65, container.nextValue((char) 65))
nova chamada: assertEquals(65, container.nextValue((char) 65), "Era esperado valores iguais, mas  65 é diferente de " + result946 + " <container.nextValue((char) 65)>")
chamada antiga: assertEquals(128, container.nextValue((char) 128))
nova chamada: assertEquals(128, container.nextValue((char) 128), "Era esperado valores iguais, mas  128 é diferente de " + result947 + " <container.nextValue((char) 128)>")
chamada antiga: assertEquals(200, container.nextValue((char) 129))
nova chamada: assertEquals(200, container.nextValue((char) 129), "Era esperado valores iguais, mas  200 é diferente de " + result948 + " <container.nextValue((char) 129)>")
chamada antiga: assertEquals(200, container.nextValue((char) 199))
nova chamada: assertEquals(200, container.nextValue((char) 199), "Era esperado valores iguais, mas  200 é diferente de " + result949 + " <container.nextValue((char) 199)>")
chamada antiga: assertEquals(200, container.nextValue((char) 200))
nova chamada: assertEquals(200, container.nextValue((char) 200), "Era esperado valores iguais, mas  200 é diferente de " + result950 + " <container.nextValue((char) 200)>")
chamada antiga: assertEquals(250, container.nextValue((char) 250))
nova chamada: assertEquals(250, container.nextValue((char) 250), "Era esperado valores iguais, mas  250 é diferente de " + result951 + " <container.nextValue((char) 250)>")
chamada antiga: assertEquals(5000, container.nextValue((char) 2500))
nova chamada: assertEquals(5000, container.nextValue((char) 2500), "Era esperado valores iguais, mas  5000 é diferente de " + result952 + " <container.nextValue((char) 2500)>")
chamada antiga: assertEquals(5000, container.nextValue((char) 5000))
nova chamada: assertEquals(5000, container.nextValue((char) 5000), "Era esperado valores iguais, mas  5000 é diferente de " + result953 + " <container.nextValue((char) 5000)>")
chamada antiga: assertEquals(5200, container.nextValue((char) 5200))
nova chamada: assertEquals(5200, container.nextValue((char) 5200), "Era esperado valores iguais, mas  5200 é diferente de " + result954 + " <container.nextValue((char) 5200)>")
chamada antiga: assertEquals(-1, container.nextValue((char) 5201))
nova chamada: assertEquals(-1, container.nextValue((char) 5201), "Era esperado valores iguais, mas  -1 é diferente de " + result955 + " <container.nextValue((char) 5201)>")
chamada antiga: assertEquals(((1 << 15) | 5), container.nextValue((char) ((1 << 15) | 4)))
nova chamada: assertEquals(((1 << 15) | 5), container.nextValue((char) ((1 << 15) | 4)), "Era esperado valores iguais, mas  ((1  15) | 5) é diferente de " + result956 + " <container.nextValue((char) ((1 << 15) | 4))>")
chamada antiga: assertEquals(((1 << 15) | 5), container.nextValue((char) ((1 << 15) | 5)))
nova chamada: assertEquals(((1 << 15) | 5), container.nextValue((char) ((1 << 15) | 5)), "Era esperado valores iguais, mas  ((1  15) | 5) é diferente de " + result957 + " <container.nextValue((char) ((1 << 15) | 5))>")
chamada antiga: assertEquals(((1 << 15) | 7), container.nextValue((char) ((1 << 15) | 6)))
nova chamada: assertEquals(((1 << 15) | 7), container.nextValue((char) ((1 << 15) | 6)), "Era esperado valores iguais, mas  ((1  15) | 7) é diferente de " + result958 + " <container.nextValue((char) ((1 << 15) | 6))>")
chamada antiga: assertEquals(((1 << 15) | 7), container.nextValue((char) ((1 << 15) | 7)))
nova chamada: assertEquals(((1 << 15) | 7), container.nextValue((char) ((1 << 15) | 7)), "Era esperado valores iguais, mas  ((1  15) | 7) é diferente de " + result959 + " <container.nextValue((char) ((1 << 15) | 7))>")
chamada antiga: assertEquals(-1, container.nextValue((char) ((1 << 15) | 8)))
nova chamada: assertEquals(-1, container.nextValue((char) ((1 << 15) | 8)), "Era esperado valores iguais, mas  -1 é diferente de " + result960 + " <container.nextValue((char) ((1 << 15) | 8))>")
chamada antiga: assertEquals(-1, container.previousValue((char) 0))
nova chamada: assertEquals(-1, container.previousValue((char) 0), "Era esperado valores iguais, mas  -1 é diferente de " + result961 + " <container.previousValue((char) 0)>")
chamada antiga: assertEquals(-1, container.previousValue((char) 63))
nova chamada: assertEquals(-1, container.previousValue((char) 63), "Era esperado valores iguais, mas  -1 é diferente de " + result962 + " <container.previousValue((char) 63)>")
chamada antiga: assertEquals(64, container.previousValue((char) 64))
nova chamada: assertEquals(64, container.previousValue((char) 64), "Era esperado valores iguais, mas  64 é diferente de " + result963 + " <container.previousValue((char) 64)>")
chamada antiga: assertEquals(65, container.previousValue((char) 65))
nova chamada: assertEquals(65, container.previousValue((char) 65), "Era esperado valores iguais, mas  65 é diferente de " + result964 + " <container.previousValue((char) 65)>")
chamada antiga: assertEquals(128, container.previousValue((char) 128))
nova chamada: assertEquals(128, container.previousValue((char) 128), "Era esperado valores iguais, mas  128 é diferente de " + result965 + " <container.previousValue((char) 128)>")
chamada antiga: assertEquals(128, container.previousValue((char) 129))
nova chamada: assertEquals(128, container.previousValue((char) 129), "Era esperado valores iguais, mas  128 é diferente de " + result966 + " <container.previousValue((char) 129)>")
chamada antiga: assertEquals(-1, container.previousValue((char) 0))
nova chamada: assertEquals(-1, container.previousValue((char) 0), "Era esperado valores iguais, mas  -1 é diferente de " + result967 + " <container.previousValue((char) 0)>")
chamada antiga: assertEquals(-1, container.previousValue((char) 63))
nova chamada: assertEquals(-1, container.previousValue((char) 63), "Era esperado valores iguais, mas  -1 é diferente de " + result968 + " <container.previousValue((char) 63)>")
chamada antiga: assertEquals(64, container.previousValue((char) 64))
nova chamada: assertEquals(64, container.previousValue((char) 64), "Era esperado valores iguais, mas  64 é diferente de " + result969 + " <container.previousValue((char) 64)>")
chamada antiga: assertEquals(65, container.previousValue((char) 65))
nova chamada: assertEquals(65, container.previousValue((char) 65), "Era esperado valores iguais, mas  65 é diferente de " + result970 + " <container.previousValue((char) 65)>")
chamada antiga: assertEquals(128, container.previousValue((char) 128))
nova chamada: assertEquals(128, container.previousValue((char) 128), "Era esperado valores iguais, mas  128 é diferente de " + result971 + " <container.previousValue((char) 128)>")
chamada antiga: assertEquals(128, container.previousValue((char) 129))
nova chamada: assertEquals(128, container.previousValue((char) 129), "Era esperado valores iguais, mas  128 é diferente de " + result972 + " <container.previousValue((char) 129)>")
chamada antiga: assertEquals(128, container.previousValue((char) 199))
nova chamada: assertEquals(128, container.previousValue((char) 199), "Era esperado valores iguais, mas  128 é diferente de " + result973 + " <container.previousValue((char) 199)>")
chamada antiga: assertEquals(200, container.previousValue((char) 200))
nova chamada: assertEquals(200, container.previousValue((char) 200), "Era esperado valores iguais, mas  200 é diferente de " + result974 + " <container.previousValue((char) 200)>")
chamada antiga: assertEquals(250, container.previousValue((char) 250))
nova chamada: assertEquals(250, container.previousValue((char) 250), "Era esperado valores iguais, mas  250 é diferente de " + result975 + " <container.previousValue((char) 250)>")
chamada antiga: assertEquals(500, container.previousValue((char) 2500))
nova chamada: assertEquals(500, container.previousValue((char) 2500), "Era esperado valores iguais, mas  500 é diferente de " + result976 + " <container.previousValue((char) 2500)>")
chamada antiga: assertEquals(5000, container.previousValue((char) 5000))
nova chamada: assertEquals(5000, container.previousValue((char) 5000), "Era esperado valores iguais, mas  5000 é diferente de " + result977 + " <container.previousValue((char) 5000)>")
chamada antiga: assertEquals(5200, container.previousValue((char) 5200))
nova chamada: assertEquals(5200, container.previousValue((char) 5200), "Era esperado valores iguais, mas  5200 é diferente de " + result978 + " <container.previousValue((char) 5200)>")
chamada antiga: assertEquals(-1, container.previousValue((char) 5))
nova chamada: assertEquals(-1, container.previousValue((char) 5), "Era esperado valores iguais, mas  -1 é diferente de " + result979 + " <container.previousValue((char) 5)>")
chamada antiga: assertEquals(-1, container.previousValue((char) 9))
nova chamada: assertEquals(-1, container.previousValue((char) 9), "Era esperado valores iguais, mas  -1 é diferente de " + result980 + " <container.previousValue((char) 9)>")
chamada antiga: assertEquals(10, container.previousValue((char) 10))
nova chamada: assertEquals(10, container.previousValue((char) 10), "Era esperado valores iguais, mas  10 é diferente de " + result981 + " <container.previousValue((char) 10)>")
chamada antiga: assertEquals(10, container.previousValue((char) 11))
nova chamada: assertEquals(10, container.previousValue((char) 11), "Era esperado valores iguais, mas  10 é diferente de " + result982 + " <container.previousValue((char) 11)>")
chamada antiga: assertEquals(20, container.previousValue((char) 21))
nova chamada: assertEquals(20, container.previousValue((char) 21), "Era esperado valores iguais, mas  20 é diferente de " + result983 + " <container.previousValue((char) 21)>")
chamada antiga: assertEquals(30, container.previousValue((char) 30))
nova chamada: assertEquals(30, container.previousValue((char) 30), "Era esperado valores iguais, mas  30 é diferente de " + result984 + " <container.previousValue((char) 30)>")
chamada antiga: assertEquals(30, container.previousValue((char) 31))
nova chamada: assertEquals(30, container.previousValue((char) 31), "Era esperado valores iguais, mas  30 é diferente de " + result985 + " <container.previousValue((char) 31)>")
chamada antiga: assertEquals(0, container.previousValue((char) 0))
nova chamada: assertEquals(0, container.previousValue((char) 0), "Era esperado valores iguais, mas  0 é diferente de " + result986 + " <container.previousValue((char) 0)>")
chamada antiga: assertEquals(0, container.previousValue((char) 1))
nova chamada: assertEquals(0, container.previousValue((char) 1), "Era esperado valores iguais, mas  0 é diferente de " + result987 + " <container.previousValue((char) 1)>")
chamada antiga: assertEquals(2, container.previousValue((char) 2))
nova chamada: assertEquals(2, container.previousValue((char) 2), "Era esperado valores iguais, mas  2 é diferente de " + result988 + " <container.previousValue((char) 2)>")
chamada antiga: assertEquals(2, container.previousValue((char) 3))
nova chamada: assertEquals(2, container.previousValue((char) 3), "Era esperado valores iguais, mas  2 é diferente de " + result989 + " <container.previousValue((char) 3)>")
chamada antiga: assertEquals(-1, container.previousValue((char) ((1 << 15) | 4)))
nova chamada: assertEquals(-1, container.previousValue((char) ((1 << 15) | 4)), "Era esperado valores iguais, mas  -1 é diferente de " + result990 + " <container.previousValue((char) ((1 << 15) | 4))>")
chamada antiga: assertEquals(((1 << 15) | 5), container.previousValue((char) ((1 << 15) | 5)))
nova chamada: assertEquals(((1 << 15) | 5), container.previousValue((char) ((1 << 15) | 5)), "Era esperado valores iguais, mas  ((1  15) | 5) é diferente de " + result991 + " <container.previousValue((char) ((1 << 15) | 5))>")
chamada antiga: assertEquals(((1 << 15) | 5), container.previousValue((char) ((1 << 15) | 6)))
nova chamada: assertEquals(((1 << 15) | 5), container.previousValue((char) ((1 << 15) | 6)), "Era esperado valores iguais, mas  ((1  15) | 5) é diferente de " + result992 + " <container.previousValue((char) ((1 << 15) | 6))>")
chamada antiga: assertEquals(((1 << 15) | 7), container.previousValue((char) ((1 << 15) | 7)))
nova chamada: assertEquals(((1 << 15) | 7), container.previousValue((char) ((1 << 15) | 7)), "Era esperado valores iguais, mas  ((1  15) | 7) é diferente de " + result993 + " <container.previousValue((char) ((1 << 15) | 7))>")
chamada antiga: assertEquals(((1 << 15) | 7), container.previousValue((char) ((1 << 15) | 8)))
nova chamada: assertEquals(((1 << 15) | 7), container.previousValue((char) ((1 << 15) | 8)), "Era esperado valores iguais, mas  ((1  15) | 7) é diferente de " + result994 + " <container.previousValue((char) ((1 << 15) | 8))>")
chamada antiga: assertEquals(0, container.previousAbsentValue((char) 0))
nova chamada: assertEquals(0, container.previousAbsentValue((char) 0), "Era esperado valores iguais, mas  0 é diferente de " + result995 + " <container.previousAbsentValue((char) 0)>")
chamada antiga: assertEquals(63, container.previousAbsentValue((char) 63))
nova chamada: assertEquals(63, container.previousAbsentValue((char) 63), "Era esperado valores iguais, mas  63 é diferente de " + result996 + " <container.previousAbsentValue((char) 63)>")
chamada antiga: assertEquals(63, container.previousAbsentValue((char) 64))
nova chamada: assertEquals(63, container.previousAbsentValue((char) 64), "Era esperado valores iguais, mas  63 é diferente de " + result997 + " <container.previousAbsentValue((char) 64)>")
chamada antiga: assertEquals(63, container.previousAbsentValue((char) 65))
nova chamada: assertEquals(63, container.previousAbsentValue((char) 65), "Era esperado valores iguais, mas  63 é diferente de " + result998 + " <container.previousAbsentValue((char) 65)>")
chamada antiga: assertEquals(63, container.previousAbsentValue((char) 128))
nova chamada: assertEquals(63, container.previousAbsentValue((char) 128), "Era esperado valores iguais, mas  63 é diferente de " + result999 + " <container.previousAbsentValue((char) 128)>")
chamada antiga: assertEquals(129, container.previousAbsentValue((char) 129))
nova chamada: assertEquals(129, container.previousAbsentValue((char) 129), "Era esperado valores iguais, mas  129 é diferente de " + result1000 + " <container.previousAbsentValue((char) 129)>")
chamada antiga: assertEquals(0, container.previousAbsentValue((char) 0))
nova chamada: assertEquals(0, container.previousAbsentValue((char) 0), "Era esperado valores iguais, mas  0 é diferente de " + result1001 + " <container.previousAbsentValue((char) 0)>")
chamada antiga: assertEquals(63, container.previousAbsentValue((char) 63))
nova chamada: assertEquals(63, container.previousAbsentValue((char) 63), "Era esperado valores iguais, mas  63 é diferente de " + result1002 + " <container.previousAbsentValue((char) 63)>")
chamada antiga: assertEquals(63, container.previousAbsentValue((char) 64))
nova chamada: assertEquals(63, container.previousAbsentValue((char) 64), "Era esperado valores iguais, mas  63 é diferente de " + result1003 + " <container.previousAbsentValue((char) 64)>")
chamada antiga: assertEquals(63, container.previousAbsentValue((char) 65))
nova chamada: assertEquals(63, container.previousAbsentValue((char) 65), "Era esperado valores iguais, mas  63 é diferente de " + result1004 + " <container.previousAbsentValue((char) 65)>")
chamada antiga: assertEquals(63, container.previousAbsentValue((char) 128))
nova chamada: assertEquals(63, container.previousAbsentValue((char) 128), "Era esperado valores iguais, mas  63 é diferente de " + result1005 + " <container.previousAbsentValue((char) 128)>")
chamada antiga: assertEquals(129, container.previousAbsentValue((char) 129))
nova chamada: assertEquals(129, container.previousAbsentValue((char) 129), "Era esperado valores iguais, mas  129 é diferente de " + result1006 + " <container.previousAbsentValue((char) 129)>")
chamada antiga: assertEquals(199, container.previousAbsentValue((char) 199))
nova chamada: assertEquals(199, container.previousAbsentValue((char) 199), "Era esperado valores iguais, mas  199 é diferente de " + result1007 + " <container.previousAbsentValue((char) 199)>")
chamada antiga: assertEquals(199, container.previousAbsentValue((char) 200))
nova chamada: assertEquals(199, container.previousAbsentValue((char) 200), "Era esperado valores iguais, mas  199 é diferente de " + result1008 + " <container.previousAbsentValue((char) 200)>")
chamada antiga: assertEquals(199, container.previousAbsentValue((char) 250))
nova chamada: assertEquals(199, container.previousAbsentValue((char) 250), "Era esperado valores iguais, mas  199 é diferente de " + result1009 + " <container.previousAbsentValue((char) 250)>")
chamada antiga: assertEquals(2500, container.previousAbsentValue((char) 2500))
nova chamada: assertEquals(2500, container.previousAbsentValue((char) 2500), "Era esperado valores iguais, mas  2500 é diferente de " + result1010 + " <container.previousAbsentValue((char) 2500)>")
chamada antiga: assertEquals(4999, container.previousAbsentValue((char) 5000))
nova chamada: assertEquals(4999, container.previousAbsentValue((char) 5000), "Era esperado valores iguais, mas  4999 é diferente de " + result1011 + " <container.previousAbsentValue((char) 5000)>")
chamada antiga: assertEquals(4999, container.previousAbsentValue((char) 5200))
nova chamada: assertEquals(4999, container.previousAbsentValue((char) 5200), "Era esperado valores iguais, mas  4999 é diferente de " + result1012 + " <container.previousAbsentValue((char) 5200)>")
chamada antiga: assertEquals(9, container.previousAbsentValue((char) 9))
nova chamada: assertEquals(9, container.previousAbsentValue((char) 9), "Era esperado valores iguais, mas  9 é diferente de " + result1013 + " <container.previousAbsentValue((char) 9)>")
chamada antiga: assertEquals(9, container.previousAbsentValue((char) 10))
nova chamada: assertEquals(9, container.previousAbsentValue((char) 10), "Era esperado valores iguais, mas  9 é diferente de " + result1014 + " <container.previousAbsentValue((char) 10)>")
chamada antiga: assertEquals(11, container.previousAbsentValue((char) 11))
nova chamada: assertEquals(11, container.previousAbsentValue((char) 11), "Era esperado valores iguais, mas  11 é diferente de " + result1015 + " <container.previousAbsentValue((char) 11)>")
chamada antiga: assertEquals(21, container.previousAbsentValue((char) 21))
nova chamada: assertEquals(21, container.previousAbsentValue((char) 21), "Era esperado valores iguais, mas  21 é diferente de " + result1016 + " <container.previousAbsentValue((char) 21)>")
chamada antiga: assertEquals(29, container.previousAbsentValue((char) 30))
nova chamada: assertEquals(29, container.previousAbsentValue((char) 30), "Era esperado valores iguais, mas  29 é diferente de " + result1017 + " <container.previousAbsentValue((char) 30)>")
chamada antiga: assertEquals(((1 << 15) | 4), container.previousAbsentValue((char) ((1 << 15) | 4)))
nova chamada: assertEquals(((1 << 15) | 4), container.previousAbsentValue((char) ((1 << 15) | 4)), "Era esperado valores iguais, mas  ((1  15) | 4) é diferente de " + result1018 + " <container.previousAbsentValue((char) ((1 << 15) | 4))>")
chamada antiga: assertEquals(((1 << 15) | 4), container.previousAbsentValue((char) ((1 << 15) | 5)))
nova chamada: assertEquals(((1 << 15) | 4), container.previousAbsentValue((char) ((1 << 15) | 5)), "Era esperado valores iguais, mas  ((1  15) | 4) é diferente de " + result1019 + " <container.previousAbsentValue((char) ((1 << 15) | 5))>")
chamada antiga: assertEquals(((1 << 15) | 6), container.previousAbsentValue((char) ((1 << 15) | 6)))
nova chamada: assertEquals(((1 << 15) | 6), container.previousAbsentValue((char) ((1 << 15) | 6)), "Era esperado valores iguais, mas  ((1  15) | 6) é diferente de " + result1020 + " <container.previousAbsentValue((char) ((1 << 15) | 6))>")
chamada antiga: assertEquals(((1 << 15) | 6), container.previousAbsentValue((char) ((1 << 15) | 7)))
nova chamada: assertEquals(((1 << 15) | 6), container.previousAbsentValue((char) ((1 << 15) | 7)), "Era esperado valores iguais, mas  ((1  15) | 6) é diferente de " + result1021 + " <container.previousAbsentValue((char) ((1 << 15) | 7))>")
chamada antiga: assertEquals(((1 << 15) | 8), container.previousAbsentValue((char) ((1 << 15) | 8)))
nova chamada: assertEquals(((1 << 15) | 8), container.previousAbsentValue((char) ((1 << 15) | 8)), "Era esperado valores iguais, mas  ((1  15) | 8) é diferente de " + result1022 + " <container.previousAbsentValue((char) ((1 << 15) | 8))>")
chamada antiga: assertEquals(0, container.nextAbsentValue((char) 0))
nova chamada: assertEquals(0, container.nextAbsentValue((char) 0), "Era esperado valores iguais, mas  0 é diferente de " + result1023 + " <container.nextAbsentValue((char) 0)>")
chamada antiga: assertEquals(63, container.nextAbsentValue((char) 63))
nova chamada: assertEquals(63, container.nextAbsentValue((char) 63), "Era esperado valores iguais, mas  63 é diferente de " + result1024 + " <container.nextAbsentValue((char) 63)>")
chamada antiga: assertEquals(129, container.nextAbsentValue((char) 64))
nova chamada: assertEquals(129, container.nextAbsentValue((char) 64), "Era esperado valores iguais, mas  129 é diferente de " + result1025 + " <container.nextAbsentValue((char) 64)>")
chamada antiga: assertEquals(129, container.nextAbsentValue((char) 65))
nova chamada: assertEquals(129, container.nextAbsentValue((char) 65), "Era esperado valores iguais, mas  129 é diferente de " + result1026 + " <container.nextAbsentValue((char) 65)>")
chamada antiga: assertEquals(129, container.nextAbsentValue((char) 128))
nova chamada: assertEquals(129, container.nextAbsentValue((char) 128), "Era esperado valores iguais, mas  129 é diferente de " + result1027 + " <container.nextAbsentValue((char) 128)>")
chamada antiga: assertEquals(129, container.nextAbsentValue((char) 129))
nova chamada: assertEquals(129, container.nextAbsentValue((char) 129), "Era esperado valores iguais, mas  129 é diferente de " + result1028 + " <container.nextAbsentValue((char) 129)>")
chamada antiga: assertEquals(0, container.nextAbsentValue((char) 0))
nova chamada: assertEquals(0, container.nextAbsentValue((char) 0), "Era esperado valores iguais, mas  0 é diferente de " + result1029 + " <container.nextAbsentValue((char) 0)>")
chamada antiga: assertEquals(63, container.nextAbsentValue((char) 63))
nova chamada: assertEquals(63, container.nextAbsentValue((char) 63), "Era esperado valores iguais, mas  63 é diferente de " + result1030 + " <container.nextAbsentValue((char) 63)>")
chamada antiga: assertEquals(129, container.nextAbsentValue((char) 64))
nova chamada: assertEquals(129, container.nextAbsentValue((char) 64), "Era esperado valores iguais, mas  129 é diferente de " + result1031 + " <container.nextAbsentValue((char) 64)>")
chamada antiga: assertEquals(129, container.nextAbsentValue((char) 65))
nova chamada: assertEquals(129, container.nextAbsentValue((char) 65), "Era esperado valores iguais, mas  129 é diferente de " + result1032 + " <container.nextAbsentValue((char) 65)>")
chamada antiga: assertEquals(129, container.nextAbsentValue((char) 128))
nova chamada: assertEquals(129, container.nextAbsentValue((char) 128), "Era esperado valores iguais, mas  129 é diferente de " + result1033 + " <container.nextAbsentValue((char) 128)>")
chamada antiga: assertEquals(129, container.nextAbsentValue((char) 129))
nova chamada: assertEquals(129, container.nextAbsentValue((char) 129), "Era esperado valores iguais, mas  129 é diferente de " + result1034 + " <container.nextAbsentValue((char) 129)>")
chamada antiga: assertEquals(199, container.nextAbsentValue((char) 199))
nova chamada: assertEquals(199, container.nextAbsentValue((char) 199), "Era esperado valores iguais, mas  199 é diferente de " + result1035 + " <container.nextAbsentValue((char) 199)>")
chamada antiga: assertEquals(501, container.nextAbsentValue((char) 200))
nova chamada: assertEquals(501, container.nextAbsentValue((char) 200), "Era esperado valores iguais, mas  501 é diferente de " + result1036 + " <container.nextAbsentValue((char) 200)>")
chamada antiga: assertEquals(501, container.nextAbsentValue((char) 250))
nova chamada: assertEquals(501, container.nextAbsentValue((char) 250), "Era esperado valores iguais, mas  501 é diferente de " + result1037 + " <container.nextAbsentValue((char) 250)>")
chamada antiga: assertEquals(2500, container.nextAbsentValue((char) 2500))
nova chamada: assertEquals(2500, container.nextAbsentValue((char) 2500), "Era esperado valores iguais, mas  2500 é diferente de " + result1038 + " <container.nextAbsentValue((char) 2500)>")
chamada antiga: assertEquals(5201, container.nextAbsentValue((char) 5000))
nova chamada: assertEquals(5201, container.nextAbsentValue((char) 5000), "Era esperado valores iguais, mas  5201 é diferente de " + result1039 + " <container.nextAbsentValue((char) 5000)>")
chamada antiga: assertEquals(5201, container.nextAbsentValue((char) 5200))
nova chamada: assertEquals(5201, container.nextAbsentValue((char) 5200), "Era esperado valores iguais, mas  5201 é diferente de " + result1040 + " <container.nextAbsentValue((char) 5200)>")
chamada antiga: assertEquals(9, container.nextAbsentValue((char) 9))
nova chamada: assertEquals(9, container.nextAbsentValue((char) 9), "Era esperado valores iguais, mas  9 é diferente de " + result1041 + " <container.nextAbsentValue((char) 9)>")
chamada antiga: assertEquals(11, container.nextAbsentValue((char) 10))
nova chamada: assertEquals(11, container.nextAbsentValue((char) 10), "Era esperado valores iguais, mas  11 é diferente de " + result1042 + " <container.nextAbsentValue((char) 10)>")
chamada antiga: assertEquals(11, container.nextAbsentValue((char) 11))
nova chamada: assertEquals(11, container.nextAbsentValue((char) 11), "Era esperado valores iguais, mas  11 é diferente de " + result1043 + " <container.nextAbsentValue((char) 11)>")
chamada antiga: assertEquals(21, container.nextAbsentValue((char) 21))
nova chamada: assertEquals(21, container.nextAbsentValue((char) 21), "Era esperado valores iguais, mas  21 é diferente de " + result1044 + " <container.nextAbsentValue((char) 21)>")
chamada antiga: assertEquals(31, container.nextAbsentValue((char) 30))
nova chamada: assertEquals(31, container.nextAbsentValue((char) 30), "Era esperado valores iguais, mas  31 é diferente de " + result1045 + " <container.nextAbsentValue((char) 30)>")
chamada antiga: assertEquals(((1 << 15) | 4), container.nextAbsentValue((char) ((1 << 15) | 4)))
nova chamada: assertEquals(((1 << 15) | 4), container.nextAbsentValue((char) ((1 << 15) | 4)), "Era esperado valores iguais, mas  ((1  15) | 4) é diferente de " + result1046 + " <container.nextAbsentValue((char) ((1 << 15) | 4))>")
chamada antiga: assertEquals(((1 << 15) | 6), container.nextAbsentValue((char) ((1 << 15) | 5)))
nova chamada: assertEquals(((1 << 15) | 6), container.nextAbsentValue((char) ((1 << 15) | 5)), "Era esperado valores iguais, mas  ((1  15) | 6) é diferente de " + result1047 + " <container.nextAbsentValue((char) ((1 << 15) | 5))>")
chamada antiga: assertEquals(((1 << 15) | 6), container.nextAbsentValue((char) ((1 << 15) | 6)))
nova chamada: assertEquals(((1 << 15) | 6), container.nextAbsentValue((char) ((1 << 15) | 6)), "Era esperado valores iguais, mas  ((1  15) | 6) é diferente de " + result1048 + " <container.nextAbsentValue((char) ((1 << 15) | 6))>")
chamada antiga: assertEquals(((1 << 15) | 8), container.nextAbsentValue((char) ((1 << 15) | 7)))
nova chamada: assertEquals(((1 << 15) | 8), container.nextAbsentValue((char) ((1 << 15) | 7)), "Era esperado valores iguais, mas  ((1  15) | 8) é diferente de " + result1049 + " <container.nextAbsentValue((char) ((1 << 15) | 7))>")
chamada antiga: assertEquals(((1 << 15) | 8), container.nextAbsentValue((char) ((1 << 15) | 8)))
nova chamada: assertEquals(((1 << 15) | 8), container.nextAbsentValue((char) ((1 << 15) | 8)), "Era esperado valores iguais, mas  ((1  15) | 8) é diferente de " + result1050 + " <container.nextAbsentValue((char) ((1 << 15) | 8))>")
chamada antiga: assertEquals(11, consumer.getNumberOfValuesConsumed())
nova chamada: assertEquals(11, consumer.getNumberOfValuesConsumed(), "Era esperado valores iguais, mas  11 é diferente de " + result1051 + " <consumer.getNumberOfValuesConsumed()>")
chamada antiga: assertEquals(5, consumer2.getNumberOfValuesConsumed())
nova chamada: assertEquals(5, consumer2.getNumberOfValuesConsumed(), "Era esperado valores iguais, mas  5 é diferente de " + result1052 + " <consumer2.getNumberOfValuesConsumed()>")
chamada antiga: assertEquals(6, consumer3.getNumberOfValuesConsumed())
nova chamada: assertEquals(6, consumer3.getNumberOfValuesConsumed(), "Era esperado valores iguais, mas  6 é diferente de " + result1053 + " <consumer3.getNumberOfValuesConsumed()>")
chamada antiga: assertEquals(bitmap.last(), bitmap.previousValue(testValue))
nova chamada: assertEquals(bitmap.last(), bitmap.previousValue(testValue), "Era esperado valores iguais, mas " + result1054 + " <bitmap.last()> é diferente de " + result1055 + " <bitmap.previousValue(testValue)>")
chamada antiga: assertEquals(mutable.last(), bitmap.previousValue(testValue))
nova chamada: assertEquals(mutable.last(), bitmap.previousValue(testValue), "Era esperado valores iguais, mas " + result1056 + " <mutable.last()> é diferente de " + result1057 + " <bitmap.previousValue(testValue)>")
chamada antiga: assertEquals(1, array.size)
nova chamada: assertEquals(1, array.size, "Era esperado valores iguais, mas  1 é diferente de " + " array.size")
chamada antiga: assertEquals(2, array.keys.length)
nova chamada: assertEquals(2, array.keys.length, "Era esperado valores iguais, mas  2 é diferente de " + " array.keys.length")
chamada antiga: assertEquals(3, array.size)
nova chamada: assertEquals(3, array.size, "Era esperado valores iguais, mas  3 é diferente de " + " array.size")
chamada antiga: assertEquals(4, array.keys.length)
nova chamada: assertEquals(4, array.keys.length, "Era esperado valores iguais, mas  4 é diferente de " + " array.keys.length")
chamada antiga: assertEquals(5, array.size)
nova chamada: assertEquals(5, array.size, "Era esperado valores iguais, mas  5 é diferente de " + " array.size")
chamada antiga: assertArrayEquals(new char[] { 0, 2, 5, 6, 7 }, array.keys)
nova chamada: assertArrayEquals(new char[] { 0, 2, 5, 6, 7 }, array.keys, "Era esperado arrays iguais, mas  new char[] { 0, 2, 5, 6, 7 } é diferente de " + " array.keys")
chamada antiga: assertFalse(rr1.intersects((1 << 15), 0xFFFF))
nova chamada: assertFalse(rr1.intersects((1 << 15), 0xFFFF), "Era esperado falso, mas " + result1058 + " <rr1.intersects((1 << 15), 0xFFFF)> é verdadeiro ")
chamada antiga: assertEquals("{1,2,3,4294967294,4294967295}", bitmap.toString())
nova chamada: assertEquals("{1,2,3,4294967294,4294967295}", bitmap.toString(), "Era esperado valores iguais, mas  '{1,2,3,4294967294,4294967295}' é diferente de " + result1059 + " <bitmap.toString()>")
chamada antiga: assertEquals("{2,3,4}", bitmap.toString())
nova chamada: assertEquals("{2,3,4}", bitmap.toString(), "Era esperado valores iguais, mas  '{2,3,4}' é diferente de " + result1060 + " <bitmap.toString()>")
chamada antiga: assertEquals("{1,2,3,4294967295}", bitmap.toString())
nova chamada: assertEquals("{1,2,3,4294967295}", bitmap.toString(), "Era esperado valores iguais, mas  '{1,2,3,4294967295}' é diferente de " + result1061 + " <bitmap.toString()>")
chamada antiga: assertTrue(it.hasNext())
nova chamada: assertTrue(it.hasNext(), "Era esperado verdadeiro, mas " + result1062 + " <it.hasNext()> é falso")
chamada antiga: assertEquals(101993170, it.next())
nova chamada: assertEquals(101993170, it.next(), "Era esperado valores iguais, mas  101993170 é diferente de " + result1063 + " <it.next()>")
chamada antiga: assertFalse(it.hasNext())
nova chamada: assertFalse(it.hasNext(), "Era esperado falso, mas " + result1064 + " <it.hasNext()> é verdadeiro ")
chamada antiga: assertTrue(it.hasNext())
nova chamada: assertTrue(it.hasNext(), "Era esperado verdadeiro, mas " + result1065 + " <it.hasNext()> é falso")
chamada antiga: assertEquals(101993170, it.next())
nova chamada: assertEquals(101993170, it.next(), "Era esperado valores iguais, mas  101993170 é diferente de " + result1066 + " <it.next()>")
chamada antiga: assertFalse(it.hasNext())
nova chamada: assertFalse(it.hasNext(), "Era esperado falso, mas " + result1067 + " <it.hasNext()> é verdadeiro ")
chamada antiga: assertEquals(1000000, limited.getCardinality())
nova chamada: assertEquals(1000000, limited.getCardinality(), "Era esperado valores iguais, mas  1000000 é diferente de " + result1068 + " <limited.getCardinality()>")
chamada antiga: assertEquals(1000000, c.count)
nova chamada: assertEquals(1000000, c.count, "Era esperado valores iguais, mas  1000000 é diferente de " + " c.count")
chamada antiga: assertEquals(1000000, limited.toArray().length)
nova chamada: assertEquals(1000000, limited.toArray().length, "Era esperado valores iguais, mas  1000000 é diferente de " + " limited.toArray().length")
chamada antiga: assertEquals(1, r.limit(1).getCardinality())
nova chamada: assertEquals(1, r.limit(1).getCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result1069 + " <r.limit(1).getCardinality()>")
chamada antiga: assertEquals(10, r.limit(10).getCardinality())
nova chamada: assertEquals(10, r.limit(10).getCardinality(), "Era esperado valores iguais, mas  10 é diferente de " + result1070 + " <r.limit(10).getCardinality()>")
chamada antiga: assertEquals(100, r.limit(100).getCardinality())
nova chamada: assertEquals(100, r.limit(100).getCardinality(), "Era esperado valores iguais, mas  100 é diferente de " + result1071 + " <r.limit(100).getCardinality()>")
chamada antiga: assertEquals(1000, r.limit(1000).getCardinality())
nova chamada: assertEquals(1000, r.limit(1000).getCardinality(), "Era esperado valores iguais, mas  1000 é diferente de " + result1072 + " <r.limit(1000).getCardinality()>")
chamada antiga: assertEquals(10000, r.limit(10000).getCardinality())
nova chamada: assertEquals(10000, r.limit(10000).getCardinality(), "Era esperado valores iguais, mas  10000 é diferente de " + result1073 + " <r.limit(10000).getCardinality()>")
chamada antiga: assertEquals(100000, r.limit(100000).getCardinality())
nova chamada: assertEquals(100000, r.limit(100000).getCardinality(), "Era esperado valores iguais, mas  100000 é diferente de " + result1074 + " <r.limit(100000).getCardinality()>")
chamada antiga: assertEquals(1000000, r.limit(1000000).getCardinality())
nova chamada: assertEquals(1000000, r.limit(1000000).getCardinality(), "Era esperado valores iguais, mas  1000000 é diferente de " + result1075 + " <r.limit(1000000).getCardinality()>")
chamada antiga: assertNotEquals(cp.getContainer(), null)
nova chamada: assertNotEquals(cp.getContainer(), null, "Era esperado valores diferentes, mas " + result1076 + " <cp.getContainer()> é igual a " + " null")
chamada antiga: assertNotEquals(cpo.getContainer(), null)
nova chamada: assertNotEquals(cpo.getContainer(), null, "Era esperado valores diferentes, mas " + result1077 + " <cpo.getContainer()> é igual a " + " null")
chamada antiga: assertEquals(cp.compareTo(cpo), 0)
nova chamada: assertEquals(cp.compareTo(cpo), 0, "Era esperado valores iguais, mas " + result1078 + " <cp.compareTo(cpo)> é diferente de " + " 0")
chamada antiga: assertEquals(cp.getCardinality(), (1 << 16) / 2)
nova chamada: assertEquals(cp.getCardinality(), (1 << 16) / 2, "Era esperado valores iguais, mas " + result1079 + " <cp.getCardinality()> é diferente de " + " (1  16) / 2")
chamada antiga: assertTrue(cp.isBitmapContainer())
nova chamada: assertTrue(cp.isBitmapContainer(), "Era esperado verdadeiro, mas " + result1080 + " <cp.isBitmapContainer()> é falso")
chamada antiga: assertFalse(cp.isRunContainer())
nova chamada: assertFalse(cp.isRunContainer(), "Era esperado falso, mas " + result1081 + " <cp.isRunContainer()> é verdadeiro ")
chamada antiga: assertTrue(cp.compareTo(cpo) > 0)
nova chamada: assertTrue(cp.compareTo(cpo) > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNotEquals(cp.getContainer(), null)
nova chamada: assertNotEquals(cp.getContainer(), null, "Era esperado valores diferentes, mas " + result1082 + " <cp.getContainer()> é igual a " + " null")
chamada antiga: assertEquals(cp.getCardinality(), (1 << 16) / 512)
nova chamada: assertEquals(cp.getCardinality(), (1 << 16) / 512, "Era esperado valores iguais, mas " + result1083 + " <cp.getCardinality()> é diferente de " + " (1  16) / 512")
chamada antiga: assertFalse(cp.isBitmapContainer())
nova chamada: assertFalse(cp.isBitmapContainer(), "Era esperado falso, mas " + result1084 + " <cp.isBitmapContainer()> é verdadeiro ")
chamada antiga: assertFalse(cp.isRunContainer())
nova chamada: assertFalse(cp.isRunContainer(), "Era esperado falso, mas " + result1085 + " <cp.isRunContainer()> é verdadeiro ")
chamada antiga: assertTrue(cp.compareTo(cpo) > 0)
nova chamada: assertTrue(cp.compareTo(cpo) > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNotEquals(cp.getContainer(), null)
nova chamada: assertNotEquals(cp.getContainer(), null, "Era esperado valores diferentes, mas " + result1086 + " <cp.getContainer()> é igual a " + " null")
chamada antiga: assertEquals(cp.getCardinality(), (1 << 16))
nova chamada: assertEquals(cp.getCardinality(), (1 << 16), "Era esperado valores iguais, mas " + result1087 + " <cp.getCardinality()> é diferente de " + " (1  16)")
chamada antiga: assertFalse(cp.isBitmapContainer())
nova chamada: assertFalse(cp.isBitmapContainer(), "Era esperado falso, mas " + result1088 + " <cp.isBitmapContainer()> é verdadeiro ")
chamada antiga: assertTrue(cp.isRunContainer())
nova chamada: assertTrue(cp.isRunContainer(), "Era esperado verdadeiro, mas " + result1089 + " <cp.isRunContainer()> é falso")
chamada antiga: assertTrue(cp.compareTo(cpo) > 0)
nova chamada: assertTrue(cp.compareTo(cpo) > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(0, cp.compareTo(cpo))
nova chamada: assertEquals(0, cp.compareTo(cpo), "Era esperado valores iguais, mas  0 é diferente de " + result1090 + " <cp.compareTo(cpo)>")
chamada antiga: assertNull(cp.getContainer())
nova chamada: assertNull(cp.getContainer(), "Era esperado nulo, mas " + result1091 + " <cp.getContainer()> não é nulo")
chamada antiga: assertArrayEquals(correct, resand)
nova chamada: assertArrayEquals(correct, resand, "Era esperado arrays iguais, mas  correct é diferente de " + " resand")
chamada antiga: assertEquals(rrand.getCardinality(), RoaringBitmap.andCardinality(rr, rr2))
nova chamada: assertEquals(rrand.getCardinality(), RoaringBitmap.andCardinality(rr, rr2), "Era esperado valores iguais, mas " + result1092 + " <rrand.getCardinality()> é diferente de " + result1093 + " <RoaringBitmap.andCardinality(rr, rr2)>")
chamada antiga: assertEquals(rrand.getCardinality(), RoaringBitmap.andCardinality(rr2, rr))
nova chamada: assertEquals(rrand.getCardinality(), RoaringBitmap.andCardinality(rr2, rr), "Era esperado valores iguais, mas " + result1094 + " <rrand.getCardinality()> é diferente de " + result1095 + " <RoaringBitmap.andCardinality(rr2, rr)>")
chamada antiga: assertEquals(rrand.getCardinality(), RoaringBitmap.andCardinality(rr2, rr))
nova chamada: assertEquals(rrand.getCardinality(), RoaringBitmap.andCardinality(rr2, rr), "Era esperado valores iguais, mas " + result1096 + " <rrand.getCardinality()> é diferente de " + result1097 + " <RoaringBitmap.andCardinality(rr2, rr)>")
chamada antiga: assertEquals(rrand.getCardinality(), rrandCount)
nova chamada: assertEquals(rrand.getCardinality(), rrandCount, "Era esperado valores iguais, mas " + result1098 + " <rrand.getCardinality()> é diferente de " + " rrandCount")
chamada antiga: assertTrue(i.hasNext())
nova chamada: assertTrue(i.hasNext(), "Era esperado verdadeiro, mas " + result1099 + " <i.hasNext()> é falso")
chamada antiga: assertEquals(1, i.next())
nova chamada: assertEquals(1, i.next(), "Era esperado valores iguais, mas  1 é diferente de " + result1100 + " <i.next()>")
chamada antiga: assertTrue(i.hasNext())
nova chamada: assertTrue(i.hasNext(), "Era esperado verdadeiro, mas " + result1101 + " <i.hasNext()> é falso")
chamada antiga: assertEquals(2 << 16, i.next())
nova chamada: assertEquals(2 << 16, i.next(), "Era esperado valores iguais, mas  2  16 é diferente de " + result1102 + " <i.next()>")
chamada antiga: assertFalse(i.hasNext())
nova chamada: assertFalse(i.hasNext(), "Era esperado falso, mas " + result1103 + " <i.hasNext()> é verdadeiro ")
chamada antiga: assertArrayEquals(correct, resandNot)
nova chamada: assertArrayEquals(correct, resandNot, "Era esperado arrays iguais, mas  correct é diferente de " + " resandNot")
chamada antiga: assertEquals(correct, rr)
nova chamada: assertEquals(correct, rr, "Era esperado valores iguais, mas  correct é diferente de " + " rr")
chamada antiga: assertEquals(rb, andNotresult)
nova chamada: assertEquals(rb, andNotresult, "Era esperado valores iguais, mas  rb é diferente de " + " andNotresult")
chamada antiga: assertEquals(rb2, off)
nova chamada: assertEquals(rb2, off, "Era esperado valores iguais, mas  rb2 é diferente de " + " off")
chamada antiga: assertEquals(rb2, off)
nova chamada: assertEquals(rb2, off, "Era esperado valores iguais, mas  rb2 é diferente de " + " off")
chamada antiga: assertEquals(array.length, 1)
nova chamada: assertEquals(array.length, 1, "Era esperado valores iguais, mas  array.length é diferente de " + " 1")
chamada antiga: assertEquals(array[0], 13)
nova chamada: assertEquals(array[0], 13, "Era esperado valores iguais, mas  array[0] é diferente de " + " 13")
chamada antiga: assertEquals(array.length, 1)
nova chamada: assertEquals(array.length, 1, "Era esperado valores iguais, mas  array.length é diferente de " + " 1")
chamada antiga: assertEquals(array[0], 13)
nova chamada: assertEquals(array[0], 13, "Era esperado valores iguais, mas  array[0] é diferente de " + " 13")
chamada antiga: assertEquals(correct, rr)
nova chamada: assertEquals(correct, rr, "Era esperado valores iguais, mas  correct é diferente de " + " rr")
chamada antiga: assertEquals(array.length, 1)
nova chamada: assertEquals(array.length, 1, "Era esperado valores iguais, mas  array.length é diferente de " + " 1")
chamada antiga: assertEquals(array[0], 13)
nova chamada: assertEquals(array[0], 13, "Era esperado valores iguais, mas  array[0] é diferente de " + " 13")
chamada antiga: assertArrayEquals(arrayand, arrayres)
nova chamada: assertArrayEquals(arrayand, arrayres, "Era esperado arrays iguais, mas  arrayand é diferente de " + " arrayres")
chamada antiga: assertEquals(andresult, off)
nova chamada: assertEquals(andresult, off, "Era esperado valores iguais, mas  andresult é diferente de " + " off")
chamada antiga: assertEquals(0, andresult.getCardinality())
nova chamada: assertEquals(0, andresult.getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result1104 + " <andresult.getCardinality()>")
chamada antiga: assertEquals(0, andresult.getCardinality())
nova chamada: assertEquals(0, andresult.getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result1105 + " <andresult.getCardinality()>")
chamada antiga: assertEquals(0, andresult2.getCardinality())
nova chamada: assertEquals(0, andresult2.getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result1106 + " <andresult2.getCardinality()>")
chamada antiga: assertEquals(0, andresult.getCardinality())
nova chamada: assertEquals(0, andresult.getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result1107 + " <andresult.getCardinality()>")
chamada antiga: assertEquals(rc.getCardinality(), rb.getCardinality())
nova chamada: assertEquals(rc.getCardinality(), rb.getCardinality(), "Era esperado valores iguais, mas " + result1108 + " <rc.getCardinality()> é diferente de " + result1109 + " <rb.getCardinality()>")
chamada antiga: assertEquals(array[0], (char) 110)
nova chamada: assertEquals(array[0], (char) 110, "Era esperado valores iguais, mas  array[0] é diferente de " + " (char) 110")
chamada antiga: assertEquals(array[1], (char) 114)
nova chamada: assertEquals(array[1], (char) 114, "Era esperado valores iguais, mas  array[1] é diferente de " + " (char) 114")
chamada antiga: assertEquals(array[2], (char) 115)
nova chamada: assertEquals(array[2], (char) 115, "Era esperado valores iguais, mas  array[2] é diferente de " + " (char) 115")
chamada antiga: assertArrayEquals(array, a)
nova chamada: assertArrayEquals(array, a, "Era esperado arrays iguais, mas  array é diferente de " + " a")
chamada antiga: assertArrayEquals(cuiRelsArray, back)
nova chamada: assertArrayEquals(cuiRelsArray, back, "Era esperado arrays iguais, mas  cuiRelsArray é diferente de " + " back")
chamada antiga: assertEquals(array[0], (char) 110)
nova chamada: assertEquals(array[0], (char) 110, "Era esperado valores iguais, mas  array[0] é diferente de " + " (char) 110")
chamada antiga: assertEquals(array[1], (char) 114)
nova chamada: assertEquals(array[1], (char) 114, "Era esperado valores iguais, mas  array[1] é diferente de " + " (char) 114")
chamada antiga: assertEquals(array[2], (char) 115)
nova chamada: assertEquals(array[2], (char) 115, "Era esperado valores iguais, mas  array[2] é diferente de " + " (char) 115")
chamada antiga: assertEquals(0, rb.getCardinality())
nova chamada: assertEquals(0, rb.getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result1110 + " <rb.getCardinality()>")
chamada antiga: assertTrue(0 != rb2.getCardinality())
nova chamada: assertTrue(0 != rb2.getCardinality(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(1, andresult.getCardinality())
nova chamada: assertEquals(1, andresult.getCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result1111 + " <andresult.getCardinality()>")
chamada antiga: assertEquals(rb2.getCardinality(), orresult.getCardinality())
nova chamada: assertEquals(rb2.getCardinality(), orresult.getCardinality(), "Era esperado valores iguais, mas " + result1112 + " <rb2.getCardinality()> é diferente de " + result1113 + " <orresult.getCardinality()>")
chamada antiga: assertArrayEquals(arrayrr, arrayrr3)
nova chamada: assertArrayEquals(arrayrr, arrayrr3, "Era esperado arrays iguais, mas  arrayrr é diferente de " + " arrayrr3")
chamada antiga: assertTrue(validate(rbc, ac1))
nova chamada: assertTrue(validate(rbc, ac1), "Era esperado verdadeiro, mas " + result1114 + " <validate(rbc, ac1)> é falso")
chamada antiga: assertTrue(validate(rbc, ac2))
nova chamada: assertTrue(validate(rbc, ac2), "Era esperado verdadeiro, mas " + result1115 + " <validate(rbc, ac2)> é falso")
chamada antiga: assertTrue(validate(rbc, ac3))
nova chamada: assertTrue(validate(rbc, ac3), "Era esperado verdadeiro, mas " + result1116 + " <validate(rbc, ac3)> é falso")
chamada antiga: assertFalse(r1.contains(killingPosition))
nova chamada: assertFalse(r1.contains(killingPosition), "Era esperado falso, mas " + result1117 + " <r1.contains(killingPosition)> é verdadeiro ")
chamada antiga: assertTrue(r2.contains(131000))
nova chamada: assertTrue(r2.contains(131000), "Era esperado verdadeiro, mas " + result1118 + " <r2.contains(131000)> é falso")
chamada antiga: assertFalse(r1.contains(killingPosition))
nova chamada: assertFalse(r1.contains(killingPosition), "Era esperado falso, mas " + result1119 + " <r1.contains(killingPosition)> é verdadeiro ")
chamada antiga: assertTrue(r2.contains(131000))
nova chamada: assertTrue(r2.contains(131000), "Era esperado verdadeiro, mas " + result1120 + " <r2.contains(131000)> é falso")
chamada antiga: assertTrue(r2.contains(killingPosition))
nova chamada: assertTrue(r2.contains(killingPosition), "Era esperado verdadeiro, mas " + result1121 + " <r2.contains(killingPosition)> é falso")
chamada antiga: assertFalse(r1.contains(killingPosition))
nova chamada: assertFalse(r1.contains(killingPosition), "Era esperado falso, mas " + result1122 + " <r1.contains(killingPosition)> é verdadeiro ")
chamada antiga: assertEquals(182, bitmap.getCardinality())
nova chamada: assertEquals(182, bitmap.getCardinality(), "Era esperado valores iguais, mas  182 é diferente de " + result1123 + " <bitmap.getCardinality()>")
chamada antiga: assertEquals(100000, rbcard)
nova chamada: assertEquals(100000, rbcard, "Era esperado valores iguais, mas  100000 é diferente de " + " rbcard")
chamada antiga: assertTrue(equals(bs, rb))
nova chamada: assertTrue(equals(bs, rb), "Era esperado verdadeiro, mas " + result1124 + " <equals(bs, rb)> é falso")
chamada antiga: assertEquals(100000, rbcard)
nova chamada: assertEquals(100000, rbcard, "Era esperado valores iguais, mas  100000 é diferente de " + " rbcard")
chamada antiga: assertEquals(0, rb.getCardinality())
nova chamada: assertEquals(0, rb.getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result1125 + " <rb.getCardinality()>")
chamada antiga: assertTrue(equals(bs, rb))
nova chamada: assertTrue(equals(bs, rb), "Era esperado verdadeiro, mas " + result1126 + " <equals(bs, rb)> é falso")
chamada antiga: assertTrue(equals(bs, rb1))
nova chamada: assertTrue(equals(bs, rb1), "Era esperado verdadeiro, mas " + result1127 + " <equals(bs, rb1)> é falso")
chamada antiga: assertEquals(0, rbcard)
nova chamada: assertEquals(0, rbcard, "Era esperado valores iguais, mas  0 é diferente de " + " rbcard")
chamada antiga: assertTrue(equals(bs, rb))
nova chamada: assertTrue(equals(bs, rb), "Era esperado verdadeiro, mas " + result1128 + " <equals(bs, rb)> é falso")
chamada antiga: assertEquals(0, rbcard)
nova chamada: assertEquals(0, rbcard, "Era esperado valores iguais, mas  0 é diferente de " + " rbcard")
chamada antiga: assertEquals(1, rb.getCardinality())
nova chamada: assertEquals(1, rb.getCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result1129 + " <rb.getCardinality()>")
chamada antiga: assertTrue(equals(bs, rb1))
nova chamada: assertTrue(equals(bs, rb1), "Era esperado verdadeiro, mas " + result1130 + " <equals(bs, rb1)> é falso")
chamada antiga: assertTrue(equals(bs, rb))
nova chamada: assertTrue(equals(bs, rb), "Era esperado verdadeiro, mas " + result1131 + " <equals(bs, rb)> é falso")
chamada antiga: assertEquals(9, rbcard)
nova chamada: assertEquals(9, rbcard, "Era esperado valores iguais, mas  9 é diferente de " + " rbcard")
chamada antiga: assertTrue(equals(bs, rb))
nova chamada: assertTrue(equals(bs, rb), "Era esperado verdadeiro, mas " + result1132 + " <equals(bs, rb)> é falso")
chamada antiga: assertEquals(9, rbcard)
nova chamada: assertEquals(9, rbcard, "Era esperado valores iguais, mas  9 é diferente de " + " rbcard")
chamada antiga: assertTrue(equals(bs, rb2))
nova chamada: assertTrue(equals(bs, rb2), "Era esperado verdadeiro, mas " + result1133 + " <equals(bs, rb2)> é falso")
chamada antiga: assertEquals(96608, rbcard)
nova chamada: assertEquals(96608, rbcard, "Era esperado valores iguais, mas  96608 é diferente de " + " rbcard")
chamada antiga: assertTrue(equals(bs, rb))
nova chamada: assertTrue(equals(bs, rb), "Era esperado verdadeiro, mas " + result1134 + " <equals(bs, rb)> é falso")
chamada antiga: assertEquals(96608, rbcard)
nova chamada: assertEquals(96608, rbcard, "Era esperado valores iguais, mas  96608 é diferente de " + " rbcard")
chamada antiga: assertTrue(equals(bs, rb2))
nova chamada: assertTrue(equals(bs, rb2), "Era esperado verdadeiro, mas " + result1135 + " <equals(bs, rb2)> é falso")
chamada antiga: assertEquals(46464, rbcard)
nova chamada: assertEquals(46464, rbcard, "Era esperado valores iguais, mas  46464 é diferente de " + " rbcard")
chamada antiga: assertTrue(equals(bs, rb))
nova chamada: assertTrue(equals(bs, rb), "Era esperado verdadeiro, mas " + result1136 + " <equals(bs, rb)> é falso")
chamada antiga: assertEquals(46464, rbcard)
nova chamada: assertEquals(46464, rbcard, "Era esperado valores iguais, mas  46464 é diferente de " + " rbcard")
chamada antiga: assertTrue(equals(bs, rb2))
nova chamada: assertTrue(equals(bs, rb2), "Era esperado verdadeiro, mas " + result1137 + " <equals(bs, rb2)> é falso")
chamada antiga: assertEquals(1928, rbcard)
nova chamada: assertEquals(1928, rbcard, "Era esperado valores iguais, mas  1928 é diferente de " + " rbcard")
chamada antiga: assertTrue(equals(bs, rb))
nova chamada: assertTrue(equals(bs, rb), "Era esperado verdadeiro, mas " + result1138 + " <equals(bs, rb)> é falso")
chamada antiga: assertEquals(1928, rbcard)
nova chamada: assertEquals(1928, rbcard, "Era esperado valores iguais, mas  1928 é diferente de " + " rbcard")
chamada antiga: assertTrue(equals(bs, rb2))
nova chamada: assertTrue(equals(bs, rb2), "Era esperado verdadeiro, mas " + result1139 + " <equals(bs, rb2)> é falso")
chamada antiga: assertEquals(132000 - 651 + 2, rbcard)
nova chamada: assertEquals(132000 - 651 + 2, rbcard, "Era esperado valores iguais, mas  132000 - 651 + 2 é diferente de " + " rbcard")
chamada antiga: assertTrue(equals(bs, rb))
nova chamada: assertTrue(equals(bs, rb), "Era esperado verdadeiro, mas " + result1140 + " <equals(bs, rb)> é falso")
chamada antiga: assertEquals(132000 - 651 + 2, rbcard)
nova chamada: assertEquals(132000 - 651 + 2, rbcard, "Era esperado valores iguais, mas  132000 - 651 + 2 é diferente de " + " rbcard")
chamada antiga: assertTrue(equals(bs, rb2))
nova chamada: assertTrue(equals(bs, rb2), "Era esperado verdadeiro, mas " + result1141 + " <equals(bs, rb2)> é falso")
chamada antiga: assertTrue(equals(bs, rb2))
nova chamada: assertTrue(equals(bs, rb2), "Era esperado verdadeiro, mas " + result1142 + " <equals(bs, rb2)> é falso")
chamada antiga: assertEquals(99999, rb2.getCardinality())
nova chamada: assertEquals(99999, rb2.getCardinality(), "Era esperado valores iguais, mas  99999 é diferente de " + result1143 + " <rb2.getCardinality()>")
chamada antiga: assertTrue(rb2.contains(Integer.MAX_VALUE + 100000))
nova chamada: assertTrue(rb2.contains(Integer.MAX_VALUE + 100000), "Era esperado verdadeiro, mas " + result1144 + " <rb2.contains(Integer.MAX_VALUE + 100000)> é falso")
chamada antiga: assertFalse(rb2.contains(Integer.MAX_VALUE + 100002))
nova chamada: assertFalse(rb2.contains(Integer.MAX_VALUE + 100002), "Era esperado falso, mas " + result1145 + " <rb2.contains(Integer.MAX_VALUE + 100002)> é verdadeiro ")
chamada antiga: assertTrue(rb2.contains(Integer.MAX_VALUE + 199999))
nova chamada: assertTrue(rb2.contains(Integer.MAX_VALUE + 199999), "Era esperado verdadeiro, mas " + result1146 + " <rb2.contains(Integer.MAX_VALUE + 199999)> é falso")
chamada antiga: assertFalse(RoaringBitmap.intersects(rr1, rr2))
nova chamada: assertFalse(RoaringBitmap.intersects(rr1, rr2), "Era esperado falso, mas " + result1147 + " <RoaringBitmap.intersects(rr1, rr2)> é verdadeiro ")
chamada antiga: assertTrue(RoaringBitmap.intersects(rr1, rr2))
nova chamada: assertTrue(RoaringBitmap.intersects(rr1, rr2), "Era esperado verdadeiro, mas " + result1148 + " <RoaringBitmap.intersects(rr1, rr2)> é falso")
chamada antiga: assertTrue(RoaringBitmap.intersects(rr3, rr2))
nova chamada: assertTrue(RoaringBitmap.intersects(rr3, rr2), "Era esperado verdadeiro, mas " + result1149 + " <RoaringBitmap.intersects(rr3, rr2)> é falso")
chamada antiga: assertFalse(RoaringBitmap.intersects(rr3, rr1))
nova chamada: assertFalse(RoaringBitmap.intersects(rr3, rr1), "Era esperado falso, mas " + result1150 + " <RoaringBitmap.intersects(rr3, rr1)> é verdadeiro ")
chamada antiga: assertTrue(RoaringBitmap.intersects(rr1, rr2))
nova chamada: assertTrue(RoaringBitmap.intersects(rr1, rr2), "Era esperado verdadeiro, mas " + result1151 + " <RoaringBitmap.intersects(rr1, rr2)> é falso")
chamada antiga: assertFalse(rr1.intersects(0, 1))
nova chamada: assertFalse(rr1.intersects(0, 1), "Era esperado falso, mas " + result1152 + " <rr1.intersects(0, 1)> é verdadeiro ")
chamada antiga: assertTrue(rr1.intersects(0, 3))
nova chamada: assertTrue(rr1.intersects(0, 3), "Era esperado verdadeiro, mas " + result1153 + " <rr1.intersects(0, 3)> é falso")
chamada antiga: assertTrue(rr1.intersects(0, 11))
nova chamada: assertTrue(rr1.intersects(0, 11), "Era esperado verdadeiro, mas " + result1154 + " <rr1.intersects(0, 11)> é falso")
chamada antiga: assertFalse(rr1.intersects(12, 14))
nova chamada: assertFalse(rr1.intersects(12, 14), "Era esperado falso, mas " + result1155 + " <rr1.intersects(12, 14)> é verdadeiro ")
chamada antiga: assertFalse(rr1.intersects(4, 5))
nova chamada: assertFalse(rr1.intersects(4, 5), "Era esperado falso, mas " + result1156 + " <rr1.intersects(4, 5)> é verdadeiro ")
chamada antiga: assertTrue(rr1.intersects(2, 3))
nova chamada: assertTrue(rr1.intersects(2, 3), "Era esperado verdadeiro, mas " + result1157 + " <rr1.intersects(2, 3)> é falso")
chamada antiga: assertTrue(rr1.intersects(4, 8))
nova chamada: assertTrue(rr1.intersects(4, 8), "Era esperado verdadeiro, mas " + result1158 + " <rr1.intersects(4, 8)> é falso")
chamada antiga: assertTrue(rr1.intersects(8, 12))
nova chamada: assertTrue(rr1.intersects(8, 12), "Era esperado verdadeiro, mas " + result1159 + " <rr1.intersects(8, 12)> é falso")
chamada antiga: assertTrue(rr2.intersects(0, 11))
nova chamada: assertTrue(rr2.intersects(0, 11), "Era esperado verdadeiro, mas " + result1160 + " <rr2.intersects(0, 11)> é falso")
chamada antiga: assertFalse(rr2.intersects(12, 14))
nova chamada: assertFalse(rr2.intersects(12, 14), "Era esperado falso, mas " + result1161 + " <rr2.intersects(12, 14)> é verdadeiro ")
chamada antiga: assertFalse(rr2.intersects(4, 5))
nova chamada: assertFalse(rr2.intersects(4, 5), "Era esperado falso, mas " + result1162 + " <rr2.intersects(4, 5)> é verdadeiro ")
chamada antiga: assertTrue(rr2.intersects(2, 3))
nova chamada: assertTrue(rr2.intersects(2, 3), "Era esperado verdadeiro, mas " + result1163 + " <rr2.intersects(2, 3)> é falso")
chamada antiga: assertTrue(rr2.intersects(4, 8))
nova chamada: assertTrue(rr2.intersects(4, 8), "Era esperado verdadeiro, mas " + result1164 + " <rr2.intersects(4, 8)> é falso")
chamada antiga: assertTrue(rr2.intersects(8, 12))
nova chamada: assertTrue(rr2.intersects(8, 12), "Era esperado verdadeiro, mas " + result1165 + " <rr2.intersects(8, 12)> é falso")
chamada antiga: assertTrue(rr3.intersects(5, 10))
nova chamada: assertTrue(rr3.intersects(5, 10), "Era esperado verdadeiro, mas " + result1166 + " <rr3.intersects(5, 10)> é falso")
chamada antiga: assertFalse(bitmap.intersects(0, bitmap.first() & 0xFFFFFFFFL))
nova chamada: assertFalse(bitmap.intersects(0, bitmap.first() & 0xFFFFFFFFL), "Era esperado falso, mas " + result1167 + " <bitmap.intersects(0, bitmap.first() & 0xFFFFFFFFL)> é verdadeiro ")
chamada antiga: assertTrue(bitmap.intersects(first - 1, first + 1))
nova chamada: assertTrue(bitmap.intersects(first - 1, first + 1), "Era esperado verdadeiro, mas " + result1168 + " <bitmap.intersects(first - 1, first + 1)> é falso")
chamada antiga: assertTrue(bitmap.intersects(first, first + 1))
nova chamada: assertTrue(bitmap.intersects(first, first + 1), "Era esperado verdadeiro, mas " + result1169 + " <bitmap.intersects(first, first + 1)> é falso")
chamada antiga: assertFalse(bitmap.intersects(first - 1, first))
nova chamada: assertFalse(bitmap.intersects(first - 1, first), "Era esperado falso, mas " + result1170 + " <bitmap.intersects(first - 1, first)> é verdadeiro ")
chamada antiga: assertArrayEquals(correct, resor)
nova chamada: assertArrayEquals(correct, resor, "Era esperado arrays iguais, mas  correct é diferente de " + " resor")
chamada antiga: assertEquals(rror.getCardinality(), RoaringBitmap.orCardinality(rr, rr2))
nova chamada: assertEquals(rror.getCardinality(), RoaringBitmap.orCardinality(rr, rr2), "Era esperado valores iguais, mas " + result1171 + " <rror.getCardinality()> é diferente de " + result1172 + " <RoaringBitmap.orCardinality(rr, rr2)>")
chamada antiga: assertEquals(xor.getCardinality(), RoaringBitmap.xorCardinality(rb, rb2))
nova chamada: assertEquals(xor.getCardinality(), RoaringBitmap.xorCardinality(rb, rb2), "Era esperado valores iguais, mas " + result1173 + " <xor.getCardinality()> é diferente de " + result1174 + " <RoaringBitmap.xorCardinality(rb, rb2)>")
chamada antiga: assertEquals(andNot.getCardinality(), RoaringBitmap.andNotCardinality(rb, rb2))
nova chamada: assertEquals(andNot.getCardinality(), RoaringBitmap.andNotCardinality(rb, rb2), "Era esperado valores iguais, mas " + result1175 + " <andNot.getCardinality()> é diferente de " + result1176 + " <RoaringBitmap.andNotCardinality(rb, rb2)>")
chamada antiga: assertEquals(andNot.getCardinality(), RoaringBitmap.andNotCardinality(big, small))
nova chamada: assertEquals(andNot.getCardinality(), RoaringBitmap.andNotCardinality(big, small), "Era esperado valores iguais, mas " + result1177 + " <andNot.getCardinality()> é diferente de " + result1178 + " <RoaringBitmap.andNotCardinality(big, small)>")
chamada antiga: assertEquals(andNot.getCardinality(), RoaringBitmap.andNotCardinality(small, big))
nova chamada: assertEquals(andNot.getCardinality(), RoaringBitmap.andNotCardinality(small, big), "Era esperado valores iguais, mas " + result1179 + " <andNot.getCardinality()> é diferente de " + result1180 + " <RoaringBitmap.andNotCardinality(small, big)>")
chamada antiga: assertArrayEquals(array, arrayrr)
nova chamada: assertArrayEquals(array, arrayrr, "Era esperado arrays iguais, mas  array é diferente de " + " arrayrr")
chamada antiga: assertArrayEquals(array, arrayirr)
nova chamada: assertArrayEquals(array, arrayirr, "Era esperado arrays iguais, mas  array é diferente de " + " arrayirr")
chamada antiga: assertEquals(correct, rr)
nova chamada: assertEquals(correct, rr, "Era esperado valores iguais, mas  correct é diferente de " + " rr")
chamada antiga: assertArrayEquals(arrayor, arrayrr)
nova chamada: assertArrayEquals(arrayor, arrayrr, "Era esperado arrays iguais, mas  arrayor é diferente de " + " arrayrr")
chamada antiga: assertTrue(valide)
nova chamada: assertTrue(valide, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(orresult, off)
nova chamada: assertEquals(orresult, off, "Era esperado valores iguais, mas  orresult é diferente de " + " off")
chamada antiga: assertEquals(rb2card, orresult.getCardinality())
nova chamada: assertEquals(rb2card, orresult.getCardinality(), "Era esperado valores iguais, mas  rb2card é diferente de " + result1181 + " <orresult.getCardinality()>")
chamada antiga: assertEquals(rb2card, orresult.getCardinality())
nova chamada: assertEquals(rb2card, orresult.getCardinality(), "Era esperado valores iguais, mas  rb2card é diferente de " + result1182 + " <orresult.getCardinality()>")
chamada antiga: assertEquals(rb2.getCardinality() + rb.getCardinality(), orresult2.getCardinality())
nova chamada: assertEquals(rb2.getCardinality() + rb.getCardinality(), orresult2.getCardinality(), "Era esperado valores iguais, mas  rb2.getCardinality() + rb.getCardinality() é diferente de " + result1183 + " <orresult2.getCardinality()>")
chamada antiga: assertEquals(rb, orresult2)
nova chamada: assertEquals(rb, orresult2, "Era esperado valores iguais, mas  rb é diferente de " + " orresult2")
chamada antiga: assertEquals((4 << 16) - 1, rb.getCardinality())
nova chamada: assertEquals((4 << 16) - 1, rb.getCardinality(), "Era esperado valores iguais, mas  (4  16) - 1 é diferente de " + result1184 + " <rb.getCardinality()>")
chamada antiga: assertFalse(iterator.hasNext())
nova chamada: assertFalse(iterator.hasNext(), "Era esperado falso, mas " + result1185 + " <iterator.hasNext()> é verdadeiro ")
chamada antiga: assertEquals(one, RoaringBitmap.bitmapOf(32))
nova chamada: assertEquals(one, RoaringBitmap.bitmapOf(32), "Era esperado valores iguais, mas  one é diferente de " + result1186 + " <RoaringBitmap.bitmapOf(32)>")
chamada antiga: assertEquals(one, RoaringBitmap.bitmapOf(32))
nova chamada: assertEquals(one, RoaringBitmap.bitmapOf(32), "Era esperado valores iguais, mas  one é diferente de " + result1187 + " <RoaringBitmap.bitmapOf(32)>")
chamada antiga: assertEquals(one, RoaringBitmap.bitmapOf(32))
nova chamada: assertEquals(one, RoaringBitmap.bitmapOf(32), "Era esperado valores iguais, mas  one é diferente de " + result1188 + " <RoaringBitmap.bitmapOf(32)>")
chamada antiga: assertEquals((4 << 16) - 1, rb.getCardinality())
nova chamada: assertEquals((4 << 16) - 1, rb.getCardinality(), "Era esperado valores iguais, mas  (4  16) - 1 é diferente de " + result1189 + " <rb.getCardinality()>")
chamada antiga: assertFalse(iterator.hasNext())
nova chamada: assertFalse(iterator.hasNext(), "Era esperado falso, mas " + result1190 + " <iterator.hasNext()> é verdadeiro ")
chamada antiga: assertEquals((5 << 16) - 2, rb.getCardinality())
nova chamada: assertEquals((5 << 16) - 2, rb.getCardinality(), "Era esperado valores iguais, mas  (5  16) - 2 é diferente de " + result1191 + " <rb.getCardinality()>")
chamada antiga: assertFalse(iterator.hasNext())
nova chamada: assertFalse(iterator.hasNext(), "Era esperado falso, mas " + result1192 + " <iterator.hasNext()> é verdadeiro ")
chamada antiga: assertEquals((2 << 16) + (2 << 14), rb.getCardinality())
nova chamada: assertEquals((2 << 16) + (2 << 14), rb.getCardinality(), "Era esperado valores iguais, mas  (2  16) + (2  14) é diferente de " + result1193 + " <rb.getCardinality()>")
chamada antiga: assertFalse(iterator.hasNext())
nova chamada: assertFalse(iterator.hasNext(), "Era esperado falso, mas " + result1194 + " <iterator.hasNext()> é verdadeiro ")
chamada antiga: assertEquals((5 << 16), rb.getCardinality())
nova chamada: assertEquals((5 << 16), rb.getCardinality(), "Era esperado valores iguais, mas  (5  16) é diferente de " + result1195 + " <rb.getCardinality()>")
chamada antiga: assertFalse(iterator.hasNext())
nova chamada: assertFalse(iterator.hasNext(), "Era esperado falso, mas " + result1196 + " <iterator.hasNext()> é verdadeiro ")
chamada antiga: assertEquals((1 << 14) + 4, rb.getCardinality())
nova chamada: assertEquals((1 << 14) + 4, rb.getCardinality(), "Era esperado valores iguais, mas  (1  14) + 4 é diferente de " + result1197 + " <rb.getCardinality()>")
chamada antiga: assertTrue(iterator.hasNext())
nova chamada: assertTrue(iterator.hasNext(), "Era esperado verdadeiro, mas " + result1198 + " <iterator.hasNext()> é falso")
chamada antiga: assertEquals((1 << 16) - 1, iterator.next())
nova chamada: assertEquals((1 << 16) - 1, iterator.next(), "Era esperado valores iguais, mas  (1  16) - 1 é diferente de " + result1199 + " <iterator.next()>")
chamada antiga: assertTrue(iterator.hasNext())
nova chamada: assertTrue(iterator.hasNext(), "Era esperado verdadeiro, mas " + result1200 + " <iterator.hasNext()> é falso")
chamada antiga: assertEquals(1 << 16, iterator.next())
nova chamada: assertEquals(1 << 16, iterator.next(), "Era esperado valores iguais, mas  1  16 é diferente de " + result1201 + " <iterator.next()>")
chamada antiga: assertTrue(iterator.hasNext())
nova chamada: assertTrue(iterator.hasNext(), "Era esperado verdadeiro, mas " + result1202 + " <iterator.hasNext()> é falso")
chamada antiga: assertEquals(2 << 16, iterator.next())
nova chamada: assertEquals(2 << 16, iterator.next(), "Era esperado valores iguais, mas  2  16 é diferente de " + result1203 + " <iterator.next()>")
chamada antiga: assertTrue(iterator.hasNext())
nova chamada: assertTrue(iterator.hasNext(), "Era esperado verdadeiro, mas " + result1204 + " <iterator.hasNext()> é falso")
chamada antiga: assertEquals(3 << 16, iterator.next())
nova chamada: assertEquals(3 << 16, iterator.next(), "Era esperado valores iguais, mas  3  16 é diferente de " + result1205 + " <iterator.next()>")
chamada antiga: assertFalse(iterator.hasNext())
nova chamada: assertFalse(iterator.hasNext(), "Era esperado falso, mas " + result1206 + " <iterator.hasNext()> é verdadeiro ")
chamada antiga: assertEquals(0, array[0])
nova chamada: assertEquals(0, array[0], "Era esperado valores iguais, mas  0 é diferente de " + " array[0]")
chamada antiga: assertEquals(array[1], -1)
nova chamada: assertEquals(array[1], -1, "Era esperado valores iguais, mas  array[1] é diferente de " + " -1")
chamada antiga: assertEquals(rb.getCardinality(), N)
nova chamada: assertEquals(rb.getCardinality(), N, "Era esperado valores iguais, mas " + result1207 + " <rb.getCardinality()> é diferente de " + " N")
chamada antiga: assertEquals(1, and.getCardinality())
nova chamada: assertEquals(1, and.getCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result1208 + " <and.getCardinality()>")
chamada antiga: assertTrue(and.contains(1 << 31))
nova chamada: assertTrue(and.contains(1 << 31), "Era esperado verdadeiro, mas " + result1209 + " <and.contains(1 << 31)> é falso")
chamada antiga: assertEquals(1, rr1.getCardinality())
nova chamada: assertEquals(1, rr1.getCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result1210 + " <rr1.getCardinality()>")
chamada antiga: assertTrue(and.contains(1 << 31))
nova chamada: assertTrue(and.contains(1 << 31), "Era esperado verdadeiro, mas " + result1211 + " <and.contains(1 << 31)> é falso")
chamada antiga: assertEquals(1, andNot.getCardinality())
nova chamada: assertEquals(1, andNot.getCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result1212 + " <andNot.getCardinality()>")
chamada antiga: assertTrue(andNot.contains(1))
nova chamada: assertTrue(andNot.contains(1), "Era esperado verdadeiro, mas " + result1213 + " <andNot.contains(1)> é falso")
chamada antiga: assertEquals(1, rr1.getCardinality())
nova chamada: assertEquals(1, rr1.getCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result1214 + " <rr1.getCardinality()>")
chamada antiga: assertTrue(andNot.contains(1))
nova chamada: assertTrue(andNot.contains(1), "Era esperado verdadeiro, mas " + result1215 + " <andNot.contains(1)> é falso")
chamada antiga: assertEquals(2, or.getCardinality())
nova chamada: assertEquals(2, or.getCardinality(), "Era esperado valores iguais, mas  2 é diferente de " + result1216 + " <or.getCardinality()>")
chamada antiga: assertTrue(or.contains(1))
nova chamada: assertTrue(or.contains(1), "Era esperado verdadeiro, mas " + result1217 + " <or.contains(1)> é falso")
chamada antiga: assertTrue(or.contains(1 << 31))
nova chamada: assertTrue(or.contains(1 << 31), "Era esperado verdadeiro, mas " + result1218 + " <or.contains(1 << 31)> é falso")
chamada antiga: assertEquals(2, rr1.getCardinality())
nova chamada: assertEquals(2, rr1.getCardinality(), "Era esperado valores iguais, mas  2 é diferente de " + result1219 + " <rr1.getCardinality()>")
chamada antiga: assertTrue(or.contains(1))
nova chamada: assertTrue(or.contains(1), "Era esperado verdadeiro, mas " + result1220 + " <or.contains(1)> é falso")
chamada antiga: assertTrue(or.contains(1 << 31))
nova chamada: assertTrue(or.contains(1 << 31), "Era esperado verdadeiro, mas " + result1221 + " <or.contains(1 << 31)> é falso")
chamada antiga: assertEquals(1, xor.getCardinality())
nova chamada: assertEquals(1, xor.getCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result1222 + " <xor.getCardinality()>")
chamada antiga: assertTrue(xor.contains(1))
nova chamada: assertTrue(xor.contains(1), "Era esperado verdadeiro, mas " + result1223 + " <xor.contains(1)> é falso")
chamada antiga: assertEquals(1, rr1.getCardinality())
nova chamada: assertEquals(1, rr1.getCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result1224 + " <rr1.getCardinality()>")
chamada antiga: assertTrue(xor.contains(1))
nova chamada: assertTrue(xor.contains(1), "Era esperado verdadeiro, mas " + result1225 + " <xor.contains(1)> é falso")
chamada antiga: assertEquals(answer.getCardinality(), array1.length)
nova chamada: assertEquals(answer.getCardinality(), array1.length, "Era esperado valores iguais, mas " + result1226 + " <answer.getCardinality()> é diferente de " + " array1.length")
chamada antiga: assertFalse(r1.contains(killingPosition))
nova chamada: assertFalse(r1.contains(killingPosition), "Era esperado falso, mas " + result1227 + " <r1.contains(killingPosition)> é verdadeiro ")
chamada antiga: assertFalse(r1.contains(killingPosition))
nova chamada: assertFalse(r1.contains(killingPosition), "Era esperado falso, mas " + result1228 + " <r1.contains(killingPosition)> é verdadeiro ")
chamada antiga: assertFalse(r1.contains(killingPosition))
nova chamada: assertFalse(r1.contains(killingPosition), "Era esperado falso, mas " + result1229 + " <r1.contains(killingPosition)> é verdadeiro ")
chamada antiga: assertEquals(rr1, rr3)
nova chamada: assertEquals(rr1, rr3, "Era esperado valores iguais, mas  rr1 é diferente de " + " rr3")
chamada antiga: assertNotEquals(rr1, rr2)
nova chamada: assertNotEquals(rr1, rr2, "Era esperado valores diferentes, mas  rr1 é igual a " + " rr2")
chamada antiga: assertNotEquals(rr3, rr2)
nova chamada: assertNotEquals(rr3, rr2, "Era esperado valores diferentes, mas  rr3 é igual a " + " rr2")
chamada antiga: assertEquals(10, r1.getCardinality())
nova chamada: assertEquals(10, r1.getCardinality(), "Era esperado valores iguais, mas  10 é diferente de " + result1230 + " <r1.getCardinality()>")
chamada antiga: assertEquals(rbm1.hashCode(), rbm2.hashCode())
nova chamada: assertEquals(rbm1.hashCode(), rbm2.hashCode(), "Era esperado valores iguais, mas " + result1231 + " <rbm1.hashCode()> é diferente de " + result1232 + " <rbm2.hashCode()>")
chamada antiga: assertEquals(rbm1.hashCode(), rbm2.hashCode())
nova chamada: assertEquals(rbm1.hashCode(), rbm2.hashCode(), "Era esperado valores iguais, mas " + result1233 + " <rbm1.hashCode()> é diferente de " + result1234 + " <rbm2.hashCode()>")
chamada antiga: assertEquals(8, a.getCardinality())
nova chamada: assertEquals(8, a.getCardinality(), "Era esperado valores iguais, mas  8 é diferente de " + result1235 + " <a.getCardinality()>")
chamada antiga: assertEquals(8, a.getCardinality())
nova chamada: assertEquals(8, a.getCardinality(), "Era esperado valores iguais, mas  8 é diferente de " + result1236 + " <a.getCardinality()>")
chamada antiga: assertEquals(copy1, rb)
nova chamada: assertEquals(copy1, rb, "Era esperado valores iguais, mas  copy1 é diferente de " + " rb")
chamada antiga: assertEquals(copy2, rb)
nova chamada: assertEquals(copy2, rb, "Era esperado valores iguais, mas  copy2 é diferente de " + " rb")
chamada antiga: assertEquals(copy1, rb)
nova chamada: assertEquals(copy1, rb, "Era esperado valores iguais, mas  copy1 é diferente de " + " rb")
chamada antiga: assertEquals(copy2, rb)
nova chamada: assertEquals(copy2, rb, "Era esperado valores iguais, mas  copy2 é diferente de " + " rb")
chamada antiga: assertTrue(result.contains(13))
nova chamada: assertTrue(result.contains(13), "Era esperado verdadeiro, mas " + result1237 + " <result.contains(13)> é falso")
chamada antiga: assertTrue(result.contains(42))
nova chamada: assertTrue(result.contains(42), "Era esperado verdadeiro, mas " + result1238 + " <result.contains(42)> é falso")
chamada antiga: assertTrue(result.contains(1))
nova chamada: assertTrue(result.contains(1), "Era esperado verdadeiro, mas " + result1239 + " <result.contains(1)> é falso")
chamada antiga: assertTrue(result.contains(2))
nova chamada: assertTrue(result.contains(2), "Era esperado verdadeiro, mas " + result1240 + " <result.contains(2)> é falso")
chamada antiga: assertEquals(RoaringBitmap.or(rb1, rb2), RoaringBitmap.or(rrb1, rrb2))
nova chamada: assertEquals(RoaringBitmap.or(rb1, rb2), RoaringBitmap.or(rrb1, rrb2), "Era esperado valores iguais, mas " + result1241 + " <RoaringBitmap.or(rb1, rb2)> é diferente de " + result1242 + " <RoaringBitmap.or(rrb1, rrb2)>")
chamada antiga: assertEquals(rbor, FastAggregation.horizontal_or(rb1, rb2))
nova chamada: assertEquals(rbor, FastAggregation.horizontal_or(rb1, rb2), "Era esperado valores iguais, mas  rbor é diferente de " + result1243 + " <FastAggregation.horizontal_or(rb1, rb2)>")
chamada antiga: assertEquals(0, Util.select(1, 0))
nova chamada: assertEquals(0, Util.select(1, 0), "Era esperado valores iguais, mas  0 é diferente de " + result1244 + " <Util.select(1, 0)>")
chamada antiga: assertEquals(0, Util.select(5, 0))
nova chamada: assertEquals(0, Util.select(5, 0), "Era esperado valores iguais, mas  0 é diferente de " + result1245 + " <Util.select(5, 0)>")
chamada antiga: assertEquals(2, Util.select(5, 1))
nova chamada: assertEquals(2, Util.select(5, 1), "Era esperado valores iguais, mas  2 é diferente de " + result1246 + " <Util.select(5, 1)>")
chamada antiga: assertEquals(rr.getCardinality(), rrback.getCardinality())
nova chamada: assertEquals(rr.getCardinality(), rrback.getCardinality(), "Era esperado valores iguais, mas " + result1247 + " <rr.getCardinality()> é diferente de " + result1248 + " <rrback.getCardinality()>")
chamada antiga: assertEquals(rr, rrback)
nova chamada: assertEquals(rr, rrback, "Era esperado valores iguais, mas  rr é diferente de " + " rrback")
chamada antiga: assertEquals(rr.getCardinality(), rrback.getCardinality())
nova chamada: assertEquals(rr.getCardinality(), rrback.getCardinality(), "Era esperado valores iguais, mas " + result1249 + " <rr.getCardinality()> é diferente de " + result1250 + " <rrback.getCardinality()>")
chamada antiga: assertEquals(rr, rrback)
nova chamada: assertEquals(rr, rrback, "Era esperado valores iguais, mas  rr é diferente de " + " rrback")
chamada antiga: assertEquals(rr.getCardinality(), rrback.getCardinality())
nova chamada: assertEquals(rr.getCardinality(), rrback.getCardinality(), "Era esperado valores iguais, mas " + result1251 + " <rr.getCardinality()> é diferente de " + result1252 + " <rrback.getCardinality()>")
chamada antiga: assertEquals(rr, rrback)
nova chamada: assertEquals(rr, rrback, "Era esperado valores iguais, mas  rr é diferente de " + " rrback")
chamada antiga: assertEquals(howmuch, bos.toByteArray().length)
nova chamada: assertEquals(howmuch, bos.toByteArray().length, "Era esperado valores iguais, mas  howmuch é diferente de " + " bos.toByteArray().length")
chamada antiga: assertEquals(rr.getCardinality(), rrback.getCardinality())
nova chamada: assertEquals(rr.getCardinality(), rrback.getCardinality(), "Era esperado valores iguais, mas " + result1253 + " <rr.getCardinality()> é diferente de " + result1254 + " <rrback.getCardinality()>")
chamada antiga: assertEquals(rr, rrback)
nova chamada: assertEquals(rr, rrback, "Era esperado valores iguais, mas  rr é diferente de " + " rrback")
chamada antiga: assertEquals(rr.getCardinality(), rrback.getCardinality())
nova chamada: assertEquals(rr.getCardinality(), rrback.getCardinality(), "Era esperado valores iguais, mas " + result1255 + " <rr.getCardinality()> é diferente de " + result1256 + " <rrback.getCardinality()>")
chamada antiga: assertEquals(rr, rrback)
nova chamada: assertEquals(rr, rrback, "Era esperado valores iguais, mas  rr é diferente de " + " rrback")
chamada antiga: assertEquals(howmuch, bos.toByteArray().length)
nova chamada: assertEquals(howmuch, bos.toByteArray().length, "Era esperado valores iguais, mas  howmuch é diferente de " + " bos.toByteArray().length")
chamada antiga: assertEquals(rr.getCardinality(), rrback.getCardinality())
nova chamada: assertEquals(rr.getCardinality(), rrback.getCardinality(), "Era esperado valores iguais, mas " + result1257 + " <rr.getCardinality()> é diferente de " + result1258 + " <rrback.getCardinality()>")
chamada antiga: assertEquals(rr, rrback)
nova chamada: assertEquals(rr, rrback, "Era esperado valores iguais, mas  rr é diferente de " + " rrback")
chamada antiga: assertEquals(rr.getCardinality(), rrback.getCardinality())
nova chamada: assertEquals(rr.getCardinality(), rrback.getCardinality(), "Era esperado valores iguais, mas " + result1259 + " <rr.getCardinality()> é diferente de " + result1260 + " <rrback.getCardinality()>")
chamada antiga: assertEquals(rr, rrback)
nova chamada: assertEquals(rr, rrback, "Era esperado valores iguais, mas  rr é diferente de " + " rrback")
chamada antiga: assertEquals(howmuch, bos.toByteArray().length)
nova chamada: assertEquals(howmuch, bos.toByteArray().length, "Era esperado valores iguais, mas  howmuch é diferente de " + " bos.toByteArray().length")
chamada antiga: assertEquals(rr.getCardinality(), rrback.getCardinality())
nova chamada: assertEquals(rr.getCardinality(), rrback.getCardinality(), "Era esperado valores iguais, mas " + result1261 + " <rr.getCardinality()> é diferente de " + result1262 + " <rrback.getCardinality()>")
chamada antiga: assertEquals(rr, rrback)
nova chamada: assertEquals(rr, rrback, "Era esperado valores iguais, mas  rr é diferente de " + " rrback")
chamada antiga: assertEquals(howmuch, bos.toByteArray().length)
nova chamada: assertEquals(howmuch, bos.toByteArray().length, "Era esperado valores iguais, mas  howmuch é diferente de " + " bos.toByteArray().length")
chamada antiga: assertEquals(rr.getCardinality(), rrback.getCardinality())
nova chamada: assertEquals(rr.getCardinality(), rrback.getCardinality(), "Era esperado valores iguais, mas " + result1263 + " <rr.getCardinality()> é diferente de " + result1264 + " <rrback.getCardinality()>")
chamada antiga: assertEquals(rr, rrback)
nova chamada: assertEquals(rr, rrback, "Era esperado valores iguais, mas  rr é diferente de " + " rrback")
chamada antiga: assertEquals(howmuch, bos.toByteArray().length)
nova chamada: assertEquals(howmuch, bos.toByteArray().length, "Era esperado valores iguais, mas  howmuch é diferente de " + " bos.toByteArray().length")
chamada antiga: assertEquals(rr.getCardinality(), rrback.getCardinality())
nova chamada: assertEquals(rr.getCardinality(), rrback.getCardinality(), "Era esperado valores iguais, mas " + result1265 + " <rr.getCardinality()> é diferente de " + result1266 + " <rrback.getCardinality()>")
chamada antiga: assertEquals(rr, rrback)
nova chamada: assertEquals(rr, rrback, "Era esperado valores iguais, mas  rr é diferente de " + " rrback")
chamada antiga: assertEquals(howmuch, bos.toByteArray().length)
nova chamada: assertEquals(howmuch, bos.toByteArray().length, "Era esperado valores iguais, mas  howmuch é diferente de " + " bos.toByteArray().length")
chamada antiga: assertEquals(rr.getCardinality(), rrback.getCardinality())
nova chamada: assertEquals(rr.getCardinality(), rrback.getCardinality(), "Era esperado valores iguais, mas " + result1267 + " <rr.getCardinality()> é diferente de " + result1268 + " <rrback.getCardinality()>")
chamada antiga: assertEquals(rr, rrback)
nova chamada: assertEquals(rr, rrback, "Era esperado valores iguais, mas  rr é diferente de " + " rrback")
chamada antiga: assertEquals(howmuch, bos.toByteArray().length)
nova chamada: assertEquals(howmuch, bos.toByteArray().length, "Era esperado valores iguais, mas  howmuch é diferente de " + " bos.toByteArray().length")
chamada antiga: assertEquals(rr.getCardinality(), rrback.getCardinality())
nova chamada: assertEquals(rr.getCardinality(), rrback.getCardinality(), "Era esperado valores iguais, mas " + result1269 + " <rr.getCardinality()> é diferente de " + result1270 + " <rrback.getCardinality()>")
chamada antiga: assertEquals(rr, rrback)
nova chamada: assertEquals(rr, rrback, "Era esperado valores iguais, mas  rr é diferente de " + " rrback")
chamada antiga: assertEquals(howmuch, bos.toByteArray().length)
nova chamada: assertEquals(howmuch, bos.toByteArray().length, "Era esperado valores iguais, mas  howmuch é diferente de " + " bos.toByteArray().length")
chamada antiga: assertEquals(rr.getCardinality(), rrback.getCardinality())
nova chamada: assertEquals(rr.getCardinality(), rrback.getCardinality(), "Era esperado valores iguais, mas " + result1271 + " <rr.getCardinality()> é diferente de " + result1272 + " <rrback.getCardinality()>")
chamada antiga: assertEquals(rr, rrback)
nova chamada: assertEquals(rr, rrback, "Era esperado valores iguais, mas  rr é diferente de " + " rrback")
chamada antiga: assertEquals(howmuch, bos.toByteArray().length)
nova chamada: assertEquals(howmuch, bos.toByteArray().length, "Era esperado valores iguais, mas  howmuch é diferente de " + " bos.toByteArray().length")
chamada antiga: assertEquals(rr.getCardinality(), rrback.getCardinality())
nova chamada: assertEquals(rr.getCardinality(), rrback.getCardinality(), "Era esperado valores iguais, mas " + result1273 + " <rr.getCardinality()> é diferente de " + result1274 + " <rrback.getCardinality()>")
chamada antiga: assertEquals(rr, rrback)
nova chamada: assertEquals(rr, rrback, "Era esperado valores iguais, mas  rr é diferente de " + " rrback")
chamada antiga: assertEquals(howmuch, bos.toByteArray().length)
nova chamada: assertEquals(howmuch, bos.toByteArray().length, "Era esperado valores iguais, mas  howmuch é diferente de " + " bos.toByteArray().length")
chamada antiga: assertEquals(rr.getCardinality(), rrback.getCardinality())
nova chamada: assertEquals(rr.getCardinality(), rrback.getCardinality(), "Era esperado valores iguais, mas " + result1275 + " <rr.getCardinality()> é diferente de " + result1276 + " <rrback.getCardinality()>")
chamada antiga: assertEquals(rr, rrback)
nova chamada: assertEquals(rr, rrback, "Era esperado valores iguais, mas  rr é diferente de " + " rrback")
chamada antiga: assertEquals(howmuch, bos.toByteArray().length)
nova chamada: assertEquals(howmuch, bos.toByteArray().length, "Era esperado valores iguais, mas  howmuch é diferente de " + " bos.toByteArray().length")
chamada antiga: assertEquals(rr.getCardinality(), rrback.getCardinality())
nova chamada: assertEquals(rr.getCardinality(), rrback.getCardinality(), "Era esperado valores iguais, mas " + result1277 + " <rr.getCardinality()> é diferente de " + result1278 + " <rrback.getCardinality()>")
chamada antiga: assertEquals(rr, rrback)
nova chamada: assertEquals(rr, rrback, "Era esperado valores iguais, mas  rr é diferente de " + " rrback")
chamada antiga: assertEquals(howmuch, bos.toByteArray().length)
nova chamada: assertEquals(howmuch, bos.toByteArray().length, "Era esperado valores iguais, mas  howmuch é diferente de " + " bos.toByteArray().length")
chamada antiga: assertEquals(rr.getCardinality(), rrback.getCardinality())
nova chamada: assertEquals(rr.getCardinality(), rrback.getCardinality(), "Era esperado valores iguais, mas " + result1279 + " <rr.getCardinality()> é diferente de " + result1280 + " <rrback.getCardinality()>")
chamada antiga: assertEquals(rr, rrback)
nova chamada: assertEquals(rr, rrback, "Era esperado valores iguais, mas  rr é diferente de " + " rrback")
chamada antiga: assertArrayEquals(expectedresult, result)
nova chamada: assertArrayEquals(expectedresult, result, "Era esperado arrays iguais, mas  expectedresult é diferente de " + " result")
chamada antiga: assertEquals(rxor, ror)
nova chamada: assertEquals(rxor, ror, "Era esperado valores iguais, mas  rxor é diferente de " + " ror")
chamada antiga: assertEquals(0, wastedBytes)
nova chamada: assertEquals(0, wastedBytes, "Era esperado valores iguais, mas  0 é diferente de " + " wastedBytes")
chamada antiga: assertArrayEquals(correct, resxor)
nova chamada: assertArrayEquals(correct, resxor, "Era esperado arrays iguais, mas  correct é diferente de " + " resxor")
chamada antiga: assertEquals(correct, rr)
nova chamada: assertEquals(correct, rr, "Era esperado valores iguais, mas  correct é diferente de " + " rr")
chamada antiga: assertTrue(valide)
nova chamada: assertTrue(valide, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(xorresult, off)
nova chamada: assertEquals(xorresult, off, "Era esperado valores iguais, mas  xorresult é diferente de " + " off")
chamada antiga: assertEquals(rb2card, xorresult.getCardinality())
nova chamada: assertEquals(rb2card, xorresult.getCardinality(), "Era esperado valores iguais, mas  rb2card é diferente de " + result1281 + " <xorresult.getCardinality()>")
chamada antiga: assertEquals(rb2card, xorresult.getCardinality())
nova chamada: assertEquals(rb2card, xorresult.getCardinality(), "Era esperado valores iguais, mas  rb2card é diferente de " + result1282 + " <xorresult.getCardinality()>")
chamada antiga: assertEquals(rb2.getCardinality() + rb.getCardinality(), xorresult2.getCardinality())
nova chamada: assertEquals(rb2.getCardinality() + rb.getCardinality(), xorresult2.getCardinality(), "Era esperado valores iguais, mas  rb2.getCardinality() + rb.getCardinality() é diferente de " + result1283 + " <xorresult2.getCardinality()>")
chamada antiga: assertEquals(xorresult2, rb)
nova chamada: assertEquals(xorresult2, rb, "Era esperado valores iguais, mas  xorresult2 é diferente de " + " rb")
chamada antiga: assertEquals(rb4, RoaringBitmap.lazyorfromlazyinputs(rb1, rb2))
nova chamada: assertEquals(rb4, RoaringBitmap.lazyorfromlazyinputs(rb1, rb2), "Era esperado valores iguais, mas  rb4 é diferente de " + result1284 + " <RoaringBitmap.lazyorfromlazyinputs(rb1, rb2)>")
chamada antiga: assertEquals(rb5, RoaringBitmap.or(rb1, rb2, rb3))
nova chamada: assertEquals(rb5, RoaringBitmap.or(rb1, rb2, rb3), "Era esperado valores iguais, mas  rb5 é diferente de " + result1285 + " <RoaringBitmap.or(rb1, rb2, rb3)>")
chamada antiga: assertEquals(rb2, rb1)
nova chamada: assertEquals(rb2, rb1, "Era esperado valores iguais, mas  rb2 é diferente de " + " rb1")
chamada antiga: assertEquals(1, rb.first())
nova chamada: assertEquals(1, rb.first(), "Era esperado valores iguais, mas  1 é diferente de " + result1286 + " <rb.first()>")
chamada antiga: assertEquals(7, rb.last())
nova chamada: assertEquals(7, rb.last(), "Era esperado valores iguais, mas  7 é diferente de " + result1287 + " <rb.last()>")
chamada antiga: assertEquals(0, rb.first())
nova chamada: assertEquals(0, rb.first(), "Era esperado valores iguais, mas  0 é diferente de " + result1288 + " <rb.first()>")
chamada antiga: assertEquals(8, rb.last())
nova chamada: assertEquals(8, rb.last(), "Era esperado valores iguais, mas  8 é diferente de " + result1289 + " <rb.last()>")
chamada antiga: assertEquals(3, rb.first())
nova chamada: assertEquals(3, rb.first(), "Era esperado valores iguais, mas  3 é diferente de " + result1290 + " <rb.first()>")
chamada antiga: assertEquals(max, rb.last())
nova chamada: assertEquals(max, rb.last(), "Era esperado valores iguais, mas  max é diferente de " + result1291 + " <rb.last()>")
chamada antiga: assertEquals(0, rb.first())
nova chamada: assertEquals(0, rb.first(), "Era esperado valores iguais, mas  0 é diferente de " + result1292 + " <rb.first()>")
chamada antiga: assertEquals(max, rb.last())
nova chamada: assertEquals(max, rb.last(), "Era esperado valores iguais, mas  max é diferente de " + result1293 + " <rb.last()>")
chamada antiga: assertThrows(NoSuchElementException.class, () -> new RoaringBitmap().first())
nova chamada: assertThrows(NoSuchElementException.class, () -> new RoaringBitmap().first(), "Era esperado que a exceção  NoSuchElementException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(NoSuchElementException.class, () -> new RoaringBitmap().last())
nova chamada: assertThrows(NoSuchElementException.class, () -> new RoaringBitmap().last(), "Era esperado que a exceção  NoSuchElementException.class fosse lançada, mas não foi")
chamada antiga: assertEquals(2, rb.first())
nova chamada: assertEquals(2, rb.first(), "Era esperado valores iguais, mas  2 é diferente de " + result1294 + " <rb.first()>")
chamada antiga: assertEquals(8, rb.last())
nova chamada: assertEquals(8, rb.last(), "Era esperado valores iguais, mas  8 é diferente de " + result1295 + " <rb.last()>")
chamada antiga: assertEquals(2, rb.first())
nova chamada: assertEquals(2, rb.first(), "Era esperado valores iguais, mas  2 é diferente de " + result1296 + " <rb.first()>")
chamada antiga: assertEquals((1 << 14) - 1, rb.last())
nova chamada: assertEquals((1 << 14) - 1, rb.last(), "Era esperado valores iguais, mas  (1  14) - 1 é diferente de " + result1297 + " <rb.last()>")
chamada antiga: assertEquals(2, rb.first())
nova chamada: assertEquals(2, rb.first(), "Era esperado valores iguais, mas  2 é diferente de " + result1298 + " <rb.first()>")
chamada antiga: assertEquals((1L << 30) - 1, rb.last())
nova chamada: assertEquals((1L << 30) - 1, rb.last(), "Era esperado valores iguais, mas  (1L  30) - 1 é diferente de " + result1299 + " <rb.last()>")
chamada antiga: assertTrue(baseline.isHammingSimilar(baseline, 0))
nova chamada: assertTrue(baseline.isHammingSimilar(baseline, 0), "Era esperado verdadeiro, mas " + result1300 + " <baseline.isHammingSimilar(baseline, 0)> é falso")
chamada antiga: assertTrue(baseline.isHammingSimilar(other, 9))
nova chamada: assertTrue(baseline.isHammingSimilar(other, 9), "Era esperado verdadeiro, mas " + result1301 + " <baseline.isHammingSimilar(other, 9)> é falso")
chamada antiga: assertTrue(baseline.isHammingSimilar(other, 6))
nova chamada: assertTrue(baseline.isHammingSimilar(other, 6), "Era esperado verdadeiro, mas " + result1302 + " <baseline.isHammingSimilar(other, 6)> é falso")
chamada antiga: assertFalse(small.isHammingSimilar(big, 1))
nova chamada: assertFalse(small.isHammingSimilar(big, 1), "Era esperado falso, mas " + result1303 + " <small.isHammingSimilar(big, 1)> é verdadeiro ")
chamada antiga: assertFalse(big.isHammingSimilar(small, 1))
nova chamada: assertFalse(big.isHammingSimilar(small, 1), "Era esperado falso, mas " + result1304 + " <big.isHammingSimilar(small, 1)> é verdadeiro ")
chamada antiga: assertFalse(baseline.isHammingSimilar(shifted, 0))
nova chamada: assertFalse(baseline.isHammingSimilar(shifted, 0), "Era esperado falso, mas " + result1305 + " <baseline.isHammingSimilar(shifted, 0)> é verdadeiro ")
chamada antiga: assertEquals(baseline.getCardinality(), RoaringBitmap.andCardinality(baseline, baseline))
nova chamada: assertEquals(baseline.getCardinality(), RoaringBitmap.andCardinality(baseline, baseline), "Era esperado valores iguais, mas " + result1306 + " <baseline.getCardinality()> é diferente de " + result1307 + " <RoaringBitmap.andCardinality(baseline, baseline)>")
chamada antiga: assertTrue(baseline.isHammingSimilar(baseline, 0))
nova chamada: assertTrue(baseline.isHammingSimilar(baseline, 0), "Era esperado verdadeiro, mas " + result1308 + " <baseline.isHammingSimilar(baseline, 0)> é falso")
chamada antiga: assertTrue(baseline.isHammingSimilar(other, 1))
nova chamada: assertTrue(baseline.isHammingSimilar(other, 1), "Era esperado verdadeiro, mas " + result1309 + " <baseline.isHammingSimilar(other, 1)> é falso")
chamada antiga: assertFalse(baseline.isHammingSimilar(other, 0))
nova chamada: assertFalse(baseline.isHammingSimilar(other, 0), "Era esperado falso, mas " + result1310 + " <baseline.isHammingSimilar(other, 0)> é verdadeiro ")
chamada antiga: assertTrue(baseline.isHammingSimilar(other, 2))
nova chamada: assertTrue(baseline.isHammingSimilar(other, 2), "Era esperado verdadeiro, mas " + result1311 + " <baseline.isHammingSimilar(other, 2)> é falso")
chamada antiga: assertFalse(baseline.isHammingSimilar(other, 1))
nova chamada: assertFalse(baseline.isHammingSimilar(other, 1), "Era esperado falso, mas " + result1312 + " <baseline.isHammingSimilar(other, 1)> é verdadeiro ")
chamada antiga: assertTrue(baseline.isHammingSimilar(other, 3))
nova chamada: assertTrue(baseline.isHammingSimilar(other, 3), "Era esperado verdadeiro, mas " + result1313 + " <baseline.isHammingSimilar(other, 3)> é falso")
chamada antiga: assertFalse(baseline.isHammingSimilar(other, 2))
nova chamada: assertFalse(baseline.isHammingSimilar(other, 2), "Era esperado falso, mas " + result1314 + " <baseline.isHammingSimilar(other, 2)> é verdadeiro ")
chamada antiga: assertEquals(baseline, RoaringBitmap.and(baseline, baseline))
nova chamada: assertEquals(baseline, RoaringBitmap.and(baseline, baseline), "Era esperado valores iguais, mas  baseline é diferente de " + result1315 + " <RoaringBitmap.and(baseline, baseline)>")
chamada antiga: assertEquals(baseline.getCardinality(), RoaringBitmap.andCardinality(baseline, baseline))
nova chamada: assertEquals(baseline.getCardinality(), RoaringBitmap.andCardinality(baseline, baseline), "Era esperado valores iguais, mas " + result1316 + " <baseline.getCardinality()> é diferente de " + result1317 + " <RoaringBitmap.andCardinality(baseline, baseline)>")
chamada antiga: assertEquals(0, RoaringBitmap.bitmapOf(65537).rank(1))
nova chamada: assertEquals(0, RoaringBitmap.bitmapOf(65537).rank(1), "Era esperado valores iguais, mas  0 é diferente de " + result1318 + " <RoaringBitmap.bitmapOf(65537).rank(1)>")
chamada antiga: assertEquals(1, RoaringBitmap.bitmapOf(65537).rank(65537))
nova chamada: assertEquals(1, RoaringBitmap.bitmapOf(65537).rank(65537), "Era esperado valores iguais, mas  1 é diferente de " + result1319 + " <RoaringBitmap.bitmapOf(65537).rank(65537)>")
chamada antiga: assertEquals(1, RoaringBitmap.bitmapOf(65537).rank(65538))
nova chamada: assertEquals(1, RoaringBitmap.bitmapOf(65537).rank(65538), "Era esperado valores iguais, mas  1 é diferente de " + result1320 + " <RoaringBitmap.bitmapOf(65537).rank(65538)>")
chamada antiga: assertEquals("{4294967289}", bitmap.toString())
nova chamada: assertEquals("{4294967289}", bitmap.toString(), "Era esperado valores iguais, mas  '{4294967289}' é diferente de " + result1321 + " <bitmap.toString()>")
chamada antiga: assertEquals(-7, bitmap.last())
nova chamada: assertEquals(-7, bitmap.last(), "Era esperado valores iguais, mas  -7 é diferente de " + result1322 + " <bitmap.last()>")
chamada antiga: assertTrue(bitmap.contains(1L, 999_999L))
nova chamada: assertTrue(bitmap.contains(1L, 999_999L), "Era esperado verdadeiro, mas " + result1323 + " <bitmap.contains(1L, 999_999L)> é falso")
chamada antiga: assertFalse(bitmap.contains(1L, 1_000_001L))
nova chamada: assertFalse(bitmap.contains(1L, 1_000_001L), "Era esperado falso, mas " + result1324 + " <bitmap.contains(1L, 1_000_001L)> é verdadeiro ")
chamada antiga: assertFalse(bitmap.contains(1L, 999_999L))
nova chamada: assertFalse(bitmap.contains(1L, 999_999L), "Era esperado falso, mas " + result1325 + " <bitmap.contains(1L, 999_999L)> é verdadeiro ")
chamada antiga: assertFalse(bitmap.contains(1L, 999_999L))
nova chamada: assertFalse(bitmap.contains(1L, 999_999L), "Era esperado falso, mas " + result1326 + " <bitmap.contains(1L, 999_999L)> é verdadeiro ")
chamada antiga: assertTrue(bitmap.contains(0L, 500_000L))
nova chamada: assertTrue(bitmap.contains(0L, 500_000L), "Era esperado verdadeiro, mas " + result1327 + " <bitmap.contains(0L, 500_000L)> é falso")
chamada antiga: assertFalse(bitmap.contains(2_000_001L, 10_000_000L))
nova chamada: assertFalse(bitmap.contains(2_000_001L, 10_000_000L), "Era esperado falso, mas " + result1328 + " <bitmap.contains(2_000_001L, 10_000_000L)> é verdadeiro ")
chamada antiga: assertTrue(bitmap.contains(1, 6))
nova chamada: assertTrue(bitmap.contains(1, 6), "Era esperado verdadeiro, mas " + result1329 + " <bitmap.contains(1, 6)> é falso")
chamada antiga: assertTrue(bitmap.contains(1, 5))
nova chamada: assertTrue(bitmap.contains(1, 5), "Era esperado verdadeiro, mas " + result1330 + " <bitmap.contains(1, 5)> é falso")
chamada antiga: assertTrue(bitmap.contains(2, 6))
nova chamada: assertTrue(bitmap.contains(2, 6), "Era esperado verdadeiro, mas " + result1331 + " <bitmap.contains(2, 6)> é falso")
chamada antiga: assertTrue(bitmap.contains(2, 7))
nova chamada: assertTrue(bitmap.contains(2, 7), "Era esperado verdadeiro, mas " + result1332 + " <bitmap.contains(2, 7)> é falso")
chamada antiga: assertFalse(bitmap.contains(2, 8))
nova chamada: assertFalse(bitmap.contains(2, 8), "Era esperado falso, mas " + result1333 + " <bitmap.contains(2, 8)> é verdadeiro ")
chamada antiga: assertFalse(bitmap.contains(0, 6))
nova chamada: assertFalse(bitmap.contains(0, 6), "Era esperado falso, mas " + result1334 + " <bitmap.contains(0, 6)> é verdadeiro ")
chamada antiga: assertFalse(bitmap.contains(0, 1))
nova chamada: assertFalse(bitmap.contains(0, 1), "Era esperado falso, mas " + result1335 + " <bitmap.contains(0, 1)> é verdadeiro ")
chamada antiga: assertFalse(bitmap.contains(6, 10))
nova chamada: assertFalse(bitmap.contains(6, 10), "Era esperado falso, mas " + result1336 + " <bitmap.contains(6, 10)> é verdadeiro ")
chamada antiga: assertFalse(bitmap.contains(7, 1 << 16))
nova chamada: assertFalse(bitmap.contains(7, 1 << 16), "Era esperado falso, mas " + result1337 + " <bitmap.contains(7, 1 << 16)> é verdadeiro ")
chamada antiga: assertFalse(bitmap.contains(1 << 17, 1 << 19))
nova chamada: assertFalse(bitmap.contains(1 << 17, 1 << 19), "Era esperado falso, mas " + result1338 + " <bitmap.contains(1 << 17, 1 << 19)> é verdadeiro ")
chamada antiga: assertFalse(bitmap.contains(0L, 2_000_000L))
nova chamada: assertFalse(bitmap.contains(0L, 2_000_000L), "Era esperado falso, mas " + result1339 + " <bitmap.contains(0L, 2_000_000L)> é verdadeiro ")
chamada antiga: assertFalse(bitmap.contains(0L, 2L))
nova chamada: assertFalse(bitmap.contains(0L, 2L), "Era esperado falso, mas " + result1340 + " <bitmap.contains(0L, 2L)> é verdadeiro ")
chamada antiga: assertTrue(bitmap.contains(0L, 1L))
nova chamada: assertTrue(bitmap.contains(0L, 1L), "Era esperado verdadeiro, mas " + result1341 + " <bitmap.contains(0L, 1L)> é falso")
chamada antiga: assertTrue(bitmap.contains(1L << 10, 1 | (1L << 10)))
nova chamada: assertTrue(bitmap.contains(1L << 10, 1 | (1L << 10)), "Era esperado verdadeiro, mas " + result1342 + " <bitmap.contains(1L << 10, 1 | (1L << 10))> é falso")
chamada antiga: assertFalse(bitmap.contains(1L << 31, 1L << 32))
nova chamada: assertFalse(bitmap.contains(1L << 31, 1L << 32), "Era esperado falso, mas " + result1343 + " <bitmap.contains(1L << 31, 1L << 32)> é verdadeiro ")
chamada antiga: assertEquals(rb.contains(0), true)
nova chamada: assertEquals(rb.contains(0), true, "Era esperado valores iguais, mas " + result1344 + " <rb.contains(0)> é diferente de " + " true")
chamada antiga: assertEquals(rb.getCardinality(), 1)
nova chamada: assertEquals(rb.getCardinality(), 1, "Era esperado valores iguais, mas " + result1345 + " <rb.getCardinality()> é diferente de " + " 1")
chamada antiga: assertEquals(-1, RoaringBitmap.bitmapOf(27399807).previousValue(403042))
nova chamada: assertEquals(-1, RoaringBitmap.bitmapOf(27399807).previousValue(403042), "Era esperado valores iguais, mas  -1 é diferente de " + result1346 + " <RoaringBitmap.bitmapOf(27399807).previousValue(403042)>")
chamada antiga: assertEquals(-1, RoaringBitmap.bitmapOf().previousValue(403042))
nova chamada: assertEquals(-1, RoaringBitmap.bitmapOf().previousValue(403042), "Era esperado valores iguais, mas  -1 é diferente de " + result1347 + " <RoaringBitmap.bitmapOf().previousValue(403042)>")
chamada antiga: assertEquals(1, r.rangeCardinality(60000, 70000))
nova chamada: assertEquals(1, r.rangeCardinality(60000, 70000), "Era esperado valores iguais, mas  1 é diferente de " + result1348 + " <r.rangeCardinality(60000, 70000)>")
chamada antiga: assertEquals(-1, r.nextValue(7))
nova chamada: assertEquals(-1, r.nextValue(7), "Era esperado valores iguais, mas  -1 é diferente de " + result1349 + " <r.nextValue(7)>")
chamada antiga: assertNotEquals(rbB, rbA)
nova chamada: assertNotEquals(rbB, rbA, "Era esperado valores diferentes, mas  rbB é igual a " + " rbA")
chamada antiga: assertNotEquals(rbB, rbA)
nova chamada: assertNotEquals(rbB, rbA, "Era esperado valores diferentes, mas  rbB é igual a " + " rbA")
chamada antiga: assertNotEquals(rbB, rbA)
nova chamada: assertNotEquals(rbB, rbA, "Era esperado valores diferentes, mas  rbB é igual a " + " rbA")
chamada antiga: assertFalse(map.contains(30))
nova chamada: assertFalse(map.contains(30), "Era esperado falso, mas " + result1350 + " <map.contains(30)> é verdadeiro ")
chamada antiga: assertTrue(map.contains(32))
nova chamada: assertTrue(map.contains(32), "Era esperado verdadeiro, mas " + result1351 + " <map.contains(32)> é falso")
chamada antiga: assertThrows(IOException.class, () -> {
    RoaringBitmap bitmap = new RoaringBitmap();
    bitmap.deserialize(ByteBuffer.allocate(4));
})
nova chamada: assertThrows(IOException.class, () -> {
    RoaringBitmap bitmap = new RoaringBitmap();
    bitmap.deserialize(ByteBuffer.allocate(4));
}, "Era esperado que a exceção  IOException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(IOException.class, () -> {
    RoaringBitmap bitmap = new RoaringBitmap();
    bitmap.deserialize(new DataInputStream(new ByteArrayInputStream(new byte[4])));
})
nova chamada: assertThrows(IOException.class, () -> {
    RoaringBitmap bitmap = new RoaringBitmap();
    bitmap.deserialize(new DataInputStream(new ByteArrayInputStream(new byte[4])));
}, "Era esperado que a exceção  IOException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(IOException.class, () -> {
    RoaringBitmap bitmap = new RoaringBitmap();
    bitmap.deserialize(new DataInputStream(new ByteArrayInputStream(new byte[4])), new byte[8]);
})
nova chamada: assertThrows(IOException.class, () -> {
    RoaringBitmap bitmap = new RoaringBitmap();
    bitmap.deserialize(new DataInputStream(new ByteArrayInputStream(new byte[4])), new byte[8]);
}, "Era esperado que a exceção  IOException.class fosse lançada, mas não foi")
chamada antiga: assertFalse(bitmap.cardinalityExceeds(Integer.MAX_VALUE))
nova chamada: assertFalse(bitmap.cardinalityExceeds(Integer.MAX_VALUE), "Era esperado falso, mas " + result1352 + " <bitmap.cardinalityExceeds(Integer.MAX_VALUE)> é verdadeiro ")
chamada antiga: assertFalse(bitmap.cardinalityExceeds(runLength + bitmapCount + arrayCount))
nova chamada: assertFalse(bitmap.cardinalityExceeds(runLength + bitmapCount + arrayCount), "Era esperado falso, mas " + result1353 + " <bitmap.cardinalityExceeds(runLength + bitmapCount + arrayCount)> é verdadeiro ")
chamada antiga: assertTrue(bitmap.cardinalityExceeds(runLength + bitmapCount + 1))
nova chamada: assertTrue(bitmap.cardinalityExceeds(runLength + bitmapCount + 1), "Era esperado verdadeiro, mas " + result1354 + " <bitmap.cardinalityExceeds(runLength + bitmapCount + 1)> é falso")
chamada antiga: assertTrue(bitmap.cardinalityExceeds(runLength + bitmapCount - 1))
nova chamada: assertTrue(bitmap.cardinalityExceeds(runLength + bitmapCount - 1), "Era esperado verdadeiro, mas " + result1355 + " <bitmap.cardinalityExceeds(runLength + bitmapCount - 1)> é falso")
chamada antiga: assertTrue(bitmap.cardinalityExceeds(runLength - 1))
nova chamada: assertTrue(bitmap.cardinalityExceeds(runLength - 1), "Era esperado verdadeiro, mas " + result1356 + " <bitmap.cardinalityExceeds(runLength - 1)> é falso")
chamada antiga: assertTrue(b1.equals(RoaringBitmap.bitmapOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))
nova chamada: assertTrue(b1.equals(RoaringBitmap.bitmapOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)), "Era esperado verdadeiro, mas " + result1357 + " <b1.equals(RoaringBitmap.bitmapOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))> é falso")
chamada antiga: assertTrue(b1.isEmpty())
nova chamada: assertTrue(b1.isEmpty(), "Era esperado verdadeiro, mas " + result1358 + " <b1.isEmpty()> é falso")
chamada antiga: assertTrue(b1.equals(RoaringBitmap.bitmapOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))
nova chamada: assertTrue(b1.equals(RoaringBitmap.bitmapOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)), "Era esperado verdadeiro, mas " + result1359 + " <b1.equals(RoaringBitmap.bitmapOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))> é falso")
chamada antiga: assertTrue(b1.isEmpty())
nova chamada: assertTrue(b1.isEmpty(), "Era esperado verdadeiro, mas " + result1360 + " <b1.isEmpty()> é falso")
chamada antiga: assertTrue(roaringbits < bitsetbits)
nova chamada: assertTrue(roaringbits < bitsetbits, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertArrayEquals(RoaringBitmap.bitmapOf(0, 1 << 17).toArray(), writer.getUnderlying().toArray())
nova chamada: assertArrayEquals(RoaringBitmap.bitmapOf(0, 1 << 17).toArray(), writer.getUnderlying().toArray(), "Era esperado arrays iguais, mas " + result1361 + " <RoaringBitmap.bitmapOf(0, 1 << 17).toArray()> é diferente de " + result1362 + " <writer.getUnderlying().toArray()>")
chamada antiga: assertTrue(writer.getUnderlying().contains(0))
nova chamada: assertTrue(writer.getUnderlying().contains(0), "Era esperado verdadeiro, mas " + result1363 + " <writer.getUnderlying().contains(0)> é falso")
chamada antiga: assertTrue(writer.getUnderlying().contains(1 << 17))
nova chamada: assertTrue(writer.getUnderlying().contains(1 << 17), "Era esperado verdadeiro, mas " + result1364 + " <writer.getUnderlying().contains(1 << 17)> é falso")
chamada antiga: assertTrue(writer.getUnderlying().contains(0))
nova chamada: assertTrue(writer.getUnderlying().contains(0), "Era esperado verdadeiro, mas " + result1365 + " <writer.getUnderlying().contains(0)> é falso")
chamada antiga: assertTrue(writer.getUnderlying().contains(1 << 17))
nova chamada: assertTrue(writer.getUnderlying().contains(1 << 17), "Era esperado verdadeiro, mas " + result1366 + " <writer.getUnderlying().contains(1 << 17)> é falso")
chamada antiga: assertArrayEquals(RoaringBitmap.bitmapOf(0, 1).toArray(), writer.getUnderlying().toArray())
nova chamada: assertArrayEquals(RoaringBitmap.bitmapOf(0, 1).toArray(), writer.getUnderlying().toArray(), "Era esperado arrays iguais, mas " + result1367 + " <RoaringBitmap.bitmapOf(0, 1).toArray()> é diferente de " + result1368 + " <writer.getUnderlying().toArray()>")
chamada antiga: assertArrayEquals(expected.toArray(), writer.getUnderlying().toArray())
nova chamada: assertArrayEquals(expected.toArray(), writer.getUnderlying().toArray(), "Era esperado arrays iguais, mas " + result1369 + " <expected.toArray()> é diferente de " + result1370 + " <writer.getUnderlying().toArray()>")
chamada antiga: assertArrayEquals(RoaringBitmap.bitmapOf(0, -2).toArray(), writer.get().toArray())
nova chamada: assertArrayEquals(RoaringBitmap.bitmapOf(0, -2).toArray(), writer.get().toArray(), "Era esperado arrays iguais, mas " + result1371 + " <RoaringBitmap.bitmapOf(0, -2).toArray()> é diferente de " + result1372 + " <writer.get().toArray()>")
chamada antiga: assertArrayEquals(RoaringBitmap.bitmapOf(0, -2, -1).toArray(), writer.get().toArray())
nova chamada: assertArrayEquals(RoaringBitmap.bitmapOf(0, -2, -1).toArray(), writer.get().toArray(), "Era esperado arrays iguais, mas " + result1373 + " <RoaringBitmap.bitmapOf(0, -2, -1).toArray()> é diferente de " + result1374 + " <writer.get().toArray()>")
chamada antiga: assertArrayEquals(new int[] { 0, -2 }, writer.get().toArray())
nova chamada: assertArrayEquals(new int[] { 0, -2 }, writer.get().toArray(), "Era esperado arrays iguais, mas  new int[] { 0, -2 } é diferente de " + result1375 + " <writer.get().toArray()>")
chamada antiga: assertArrayEquals(new int[] { 4, 5, 6, 100 }, writer.get().toArray())
nova chamada: assertArrayEquals(new int[] { 4, 5, 6, 100 }, writer.get().toArray(), "Era esperado arrays iguais, mas  new int[] { 4, 5, 6, 100 } é diferente de " + result1376 + " <writer.get().toArray()>")
chamada antiga: assertEquals(asList(bits.getCharIterator()), ImmutableList.of(0, 127))
nova chamada: assertEquals(asList(bits.getCharIterator()), ImmutableList.of(0, 127), "Era esperado valores iguais, mas " + result1377 + " <asList(bits.getCharIterator())> é diferente de " + result1378 + " <ImmutableList.of(0, 127)>")
chamada antiga: assertEquals(asList(bits.getReverseCharIterator()), ImmutableList.of(127, 0))
nova chamada: assertEquals(asList(bits.getReverseCharIterator()), ImmutableList.of(127, 0), "Era esperado valores iguais, mas " + result1379 + " <asList(bits.getReverseCharIterator())> é diferente de " + result1380 + " <ImmutableList.of(127, 0)>")
chamada antiga: assertFalse(RoaringBitmap.bitmapOf().iterator().hasNext())
nova chamada: assertFalse(RoaringBitmap.bitmapOf().iterator().hasNext(), "Era esperado falso, mas " + result1381 + " <RoaringBitmap.bitmapOf().iterator().hasNext()> é verdadeiro ")
chamada antiga: assertFalse(RoaringBitmap.bitmapOf().getIntIterator().hasNext())
nova chamada: assertFalse(RoaringBitmap.bitmapOf().getIntIterator().hasNext(), "Era esperado falso, mas " + result1382 + " <RoaringBitmap.bitmapOf().getIntIterator().hasNext()> é verdadeiro ")
chamada antiga: assertFalse(RoaringBitmap.bitmapOf().getReverseIntIterator().hasNext())
nova chamada: assertFalse(RoaringBitmap.bitmapOf().getReverseIntIterator().hasNext(), "Era esperado falso, mas " + result1383 + " <RoaringBitmap.bitmapOf().getReverseIntIterator().hasNext()> é verdadeiro ")
chamada antiga: assertEquals(bitmap.getCardinality(), iteratorCopy.size())
nova chamada: assertEquals(bitmap.getCardinality(), iteratorCopy.size(), "Era esperado valores iguais, mas " + result1384 + " <bitmap.getCardinality()> é diferente de " + result1385 + " <iteratorCopy.size()>")
chamada antiga: assertEquals(bitmap.getCardinality(), intIteratorCopy.size())
nova chamada: assertEquals(bitmap.getCardinality(), intIteratorCopy.size(), "Era esperado valores iguais, mas " + result1386 + " <bitmap.getCardinality()> é diferente de " + result1387 + " <intIteratorCopy.size()>")
chamada antiga: assertEquals(bitmap.getCardinality(), reverseIntIteratorCopy.size())
nova chamada: assertEquals(bitmap.getCardinality(), reverseIntIteratorCopy.size(), "Era esperado valores iguais, mas " + result1388 + " <bitmap.getCardinality()> é diferente de " + result1389 + " <reverseIntIteratorCopy.size()>")
chamada antiga: assertEquals(Ints.asList(data), iteratorCopy)
nova chamada: assertEquals(Ints.asList(data), iteratorCopy, "Era esperado valores iguais, mas " + result1390 + " <Ints.asList(data)> é diferente de " + " iteratorCopy")
chamada antiga: assertEquals(Ints.asList(data), intIteratorCopy)
nova chamada: assertEquals(Ints.asList(data), intIteratorCopy, "Era esperado valores iguais, mas " + result1391 + " <Ints.asList(data)> é diferente de " + " intIteratorCopy")
chamada antiga: assertEquals(Lists.reverse(Ints.asList(data)), reverseIntIteratorCopy)
nova chamada: assertEquals(Lists.reverse(Ints.asList(data)), reverseIntIteratorCopy, "Era esperado valores iguais, mas " + result1392 + " <Lists.reverse(Ints.asList(data))> é diferente de " + " reverseIntIteratorCopy")
chamada antiga: assertEquals(ImmutableList.of(1, 2, 3), iteratorCopy)
nova chamada: assertEquals(ImmutableList.of(1, 2, 3), iteratorCopy, "Era esperado valores iguais, mas " + result1393 + " <ImmutableList.of(1, 2, 3)> é diferente de " + " iteratorCopy")
chamada antiga: assertEquals(ImmutableList.of(1, 2, 3), intIteratorCopy)
nova chamada: assertEquals(ImmutableList.of(1, 2, 3), intIteratorCopy, "Era esperado valores iguais, mas " + result1394 + " <ImmutableList.of(1, 2, 3)> é diferente de " + " intIteratorCopy")
chamada antiga: assertEquals(ImmutableList.of(3, 2, 1), reverseIntIteratorCopy)
nova chamada: assertEquals(ImmutableList.of(3, 2, 1), reverseIntIteratorCopy, "Era esperado valores iguais, mas " + result1395 + " <ImmutableList.of(3, 2, 1)> é diferente de " + " reverseIntIteratorCopy")
chamada antiga: assertEquals(2000000, bitIt.peekNext())
nova chamada: assertEquals(2000000, bitIt.peekNext(), "Era esperado valores iguais, mas  2000000 é diferente de " + result1396 + " <bitIt.peekNext()>")
chamada antiga: assertEquals(2000000, bitIt.next())
nova chamada: assertEquals(2000000, bitIt.next(), "Era esperado valores iguais, mas  2000000 é diferente de " + result1397 + " <bitIt.next()>")
chamada antiga: assertTrue(bitset.contains(2100000))
nova chamada: assertTrue(bitset.contains(2100000), "Era esperado verdadeiro, mas " + result1398 + " <bitset.contains(2100000)> é falso")
chamada antiga: assertEquals(2100000, bitIt.peekNext())
nova chamada: assertEquals(2100000, bitIt.peekNext(), "Era esperado valores iguais, mas  2100000 é diferente de " + result1399 + " <bitIt.peekNext()>")
chamada antiga: assertEquals(2100000, bitIt.next())
nova chamada: assertEquals(2100000, bitIt.next(), "Era esperado valores iguais, mas  2100000 é diferente de " + result1400 + " <bitIt.next()>")
chamada antiga: assertFalse(bitset.contains(2300000))
nova chamada: assertFalse(bitset.contains(2300000), "Era esperado falso, mas " + result1401 + " <bitset.contains(2300000)> é verdadeiro ")
chamada antiga: assertEquals(4000000, bitIt.peekNext())
nova chamada: assertEquals(4000000, bitIt.peekNext(), "Era esperado valores iguais, mas  4000000 é diferente de " + result1402 + " <bitIt.peekNext()>")
chamada antiga: assertTrue(bitset.contains(4000000))
nova chamada: assertTrue(bitset.contains(4000000), "Era esperado verdadeiro, mas " + result1403 + " <bitset.contains(4000000)> é falso")
chamada antiga: assertEquals(4000000, bitIt.peekNext())
nova chamada: assertEquals(4000000, bitIt.peekNext(), "Era esperado valores iguais, mas  4000000 é diferente de " + result1404 + " <bitIt.peekNext()>")
chamada antiga: assertEquals(4000000, bitIt.next())
nova chamada: assertEquals(4000000, bitIt.next(), "Era esperado valores iguais, mas  4000000 é diferente de " + result1405 + " <bitIt.next()>")
chamada antiga: assertEquals(2000000, bitIt.peekNext())
nova chamada: assertEquals(2000000, bitIt.peekNext(), "Era esperado valores iguais, mas  2000000 é diferente de " + result1406 + " <bitIt.peekNext()>")
chamada antiga: assertEquals(2000000, bitIt.next())
nova chamada: assertEquals(2000000, bitIt.next(), "Era esperado valores iguais, mas  2000000 é diferente de " + result1407 + " <bitIt.next()>")
chamada antiga: assertTrue(bitset.contains(2100000))
nova chamada: assertTrue(bitset.contains(2100000), "Era esperado verdadeiro, mas " + result1408 + " <bitset.contains(2100000)> é falso")
chamada antiga: assertEquals(2100000, bitIt.peekNext())
nova chamada: assertEquals(2100000, bitIt.peekNext(), "Era esperado valores iguais, mas  2100000 é diferente de " + result1409 + " <bitIt.peekNext()>")
chamada antiga: assertEquals(2100000, bitIt.next())
nova chamada: assertEquals(2100000, bitIt.next(), "Era esperado valores iguais, mas  2100000 é diferente de " + result1410 + " <bitIt.next()>")
chamada antiga: assertFalse(bitset.contains(4325376 - 5))
nova chamada: assertFalse(bitset.contains(4325376 - 5), "Era esperado falso, mas " + result1411 + " <bitset.contains(4325376 - 5)> é verdadeiro ")
chamada antiga: assertEquals(6000000, bitIt.peekNext())
nova chamada: assertEquals(6000000, bitIt.peekNext(), "Era esperado valores iguais, mas  6000000 é diferente de " + result1412 + " <bitIt.peekNext()>")
chamada antiga: assertTrue(bitset.contains(6000000))
nova chamada: assertTrue(bitset.contains(6000000), "Era esperado verdadeiro, mas " + result1413 + " <bitset.contains(6000000)> é falso")
chamada antiga: assertEquals(6000000, bitIt.peekNext())
nova chamada: assertEquals(6000000, bitIt.peekNext(), "Era esperado valores iguais, mas  6000000 é diferente de " + result1414 + " <bitIt.peekNext()>")
chamada antiga: assertEquals(6000000, bitIt.next())
nova chamada: assertEquals(6000000, bitIt.next(), "Era esperado valores iguais, mas  6000000 é diferente de " + result1415 + " <bitIt.next()>")
chamada antiga: assertEquals(2000000, bitIt.peekNext())
nova chamada: assertEquals(2000000, bitIt.peekNext(), "Era esperado valores iguais, mas  2000000 é diferente de " + result1416 + " <bitIt.peekNext()>")
chamada antiga: assertEquals(2000000, bitIt.next())
nova chamada: assertEquals(2000000, bitIt.next(), "Era esperado valores iguais, mas  2000000 é diferente de " + result1417 + " <bitIt.next()>")
chamada antiga: assertEquals(2100000, bitIt.peekNext())
nova chamada: assertEquals(2100000, bitIt.peekNext(), "Era esperado valores iguais, mas  2100000 é diferente de " + result1418 + " <bitIt.peekNext()>")
chamada antiga: assertEquals(2100000, bitIt.next())
nova chamada: assertEquals(2100000, bitIt.next(), "Era esperado valores iguais, mas  2100000 é diferente de " + result1419 + " <bitIt.next()>")
chamada antiga: assertFalse(bitset.contains(4325376 + 5))
nova chamada: assertFalse(bitset.contains(4325376 + 5), "Era esperado falso, mas " + result1420 + " <bitset.contains(4325376 + 5)> é verdadeiro ")
chamada antiga: assertEquals(6000000, bitIt.peekNext())
nova chamada: assertEquals(6000000, bitIt.peekNext(), "Era esperado valores iguais, mas  6000000 é diferente de " + result1421 + " <bitIt.peekNext()>")
chamada antiga: assertEquals(6000000, bitIt.peekNext())
nova chamada: assertEquals(6000000, bitIt.peekNext(), "Era esperado valores iguais, mas  6000000 é diferente de " + result1422 + " <bitIt.peekNext()>")
chamada antiga: assertEquals(6000000, bitIt.next())
nova chamada: assertEquals(6000000, bitIt.next(), "Era esperado valores iguais, mas  6000000 é diferente de " + result1423 + " <bitIt.next()>")
chamada antiga: assertTrue(one.contains(10))
nova chamada: assertTrue(one.contains(10), "Era esperado verdadeiro, mas " + result1424 + " <one.contains(10)> é falso")
chamada antiga: assertEquals(bitmap, copy)
nova chamada: assertEquals(bitmap, copy, "Era esperado valores iguais, mas  bitmap é diferente de " + " copy")
chamada antiga: assertEquals(bitmap, result)
nova chamada: assertEquals(bitmap, result, "Era esperado valores iguais, mas  bitmap é diferente de " + " result")
chamada antiga: assertEquals(bitmap.getCardinality(), cardinality)
nova chamada: assertEquals(bitmap.getCardinality(), cardinality, "Era esperado valores iguais, mas " + result1425 + " <bitmap.getCardinality()> é diferente de " + " cardinality")
chamada antiga: assertEquals(expected, result)
nova chamada: assertEquals(expected, result, "Era esperado valores iguais, mas  expected é diferente de " + " result")
chamada antiga: assertEquals(expected.getCardinality(), consumed)
nova chamada: assertEquals(expected.getCardinality(), consumed, "Era esperado valores iguais, mas " + result1426 + " <expected.getCardinality()> é diferente de " + " consumed")
chamada antiga: assertEquals(expected, result)
nova chamada: assertEquals(expected, result, "Era esperado valores iguais, mas  expected é diferente de " + " result")
chamada antiga: assertEquals(expected.getCardinality(), consumed)
nova chamada: assertEquals(expected.getCardinality(), consumed, "Era esperado valores iguais, mas " + result1427 + " <expected.getCardinality()> é diferente de " + " consumed")
chamada antiga: assertEquals(0, consumed)
nova chamada: assertEquals(0, consumed, "Era esperado valores iguais, mas  0 é diferente de " + " consumed")
chamada antiga: assertTrue(result.isEmpty())
nova chamada: assertTrue(result.isEmpty(), "Era esperado verdadeiro, mas " + result1428 + " <result.isEmpty()> é falso")
chamada antiga: assertTrue(bi.hasNext())
nova chamada: assertTrue(bi.hasNext(), "Era esperado verdadeiro, mas " + result1429 + " <bi.hasNext()> é falso")
chamada antiga: assertEquals(n, 1)
nova chamada: assertEquals(n, 1, "Era esperado valores iguais, mas  n é diferente de " + " 1")
chamada antiga: assertEquals(batch[0], 8511)
nova chamada: assertEquals(batch[0], 8511, "Era esperado valores iguais, mas  batch[0] é diferente de " + " 8511")
chamada antiga: assertFalse(bi.hasNext())
nova chamada: assertFalse(bi.hasNext(), "Era esperado falso, mas " + result1430 + " <bi.hasNext()> é verdadeiro ")
chamada antiga: assertTrue(bi.hasNext())
nova chamada: assertTrue(bi.hasNext(), "Era esperado verdadeiro, mas " + result1431 + " <bi.hasNext()> é falso")
chamada antiga: assertFalse(bi.hasNext())
nova chamada: assertFalse(bi.hasNext(), "Era esperado falso, mas " + result1432 + " <bi.hasNext()> é verdadeiro ")
chamada antiga: assertTrue(it.hasNext())
nova chamada: assertTrue(it.hasNext(), "Era esperado verdadeiro, mas " + result1433 + " <it.hasNext()> é falso")
chamada antiga: assertEquals(n, 3)
nova chamada: assertEquals(n, 3, "Era esperado valores iguais, mas  n é diferente de " + " 3")
chamada antiga: assertEquals(batch[0], 3 << 16)
nova chamada: assertEquals(batch[0], 3 << 16, "Era esperado valores iguais, mas  batch[0] é diferente de " + " 3  16")
chamada antiga: assertEquals(batch[1], (3 << 16) + 5)
nova chamada: assertEquals(batch[1], (3 << 16) + 5, "Era esperado valores iguais, mas  batch[1] é diferente de " + " (3  16) + 5")
chamada antiga: assertEquals(batch[2], (3 << 16) + 10)
nova chamada: assertEquals(batch[2], (3 << 16) + 10, "Era esperado valores iguais, mas  batch[2] é diferente de " + " (3  16) + 10")
chamada antiga: assertEquals(1, b.rank(123))
nova chamada: assertEquals(1, b.rank(123), "Era esperado valores iguais, mas  1 é diferente de " + result1434 + " <b.rank(123)>")
chamada antiga: assertEquals(2, b.rank(123))
nova chamada: assertEquals(2, b.rank(123), "Era esperado valores iguais, mas  2 é diferente de " + result1435 + " <b.rank(123)>")
chamada antiga: assertEquals(1, b.rank(123))
nova chamada: assertEquals(1, b.rank(123), "Era esperado valores iguais, mas  1 é diferente de " + result1436 + " <b.rank(123)>")
chamada antiga: assertEquals(1, b.rank(123))
nova chamada: assertEquals(1, b.rank(123), "Era esperado valores iguais, mas  1 é diferente de " + result1437 + " <b.rank(123)>")
chamada antiga: assertEquals(123, b.select(0))
nova chamada: assertEquals(123, b.select(0), "Era esperado valores iguais, mas  123 é diferente de " + result1438 + " <b.select(0)>")
chamada antiga: assertEquals(123, b.select(0))
nova chamada: assertEquals(123, b.select(0), "Era esperado valores iguais, mas  123 é diferente de " + result1439 + " <b.select(0)>")
chamada antiga: assertEquals(Integer.MAX_VALUE, b.select(1))
nova chamada: assertEquals(Integer.MAX_VALUE, b.select(1), "Era esperado valores iguais, mas  Integer.MAX_VALUE é diferente de " + result1440 + " <b.select(1)>")
chamada antiga: assertEquals(0, b.rank(123 - 1))
nova chamada: assertEquals(0, b.rank(123 - 1), "Era esperado valores iguais, mas  0 é diferente de " + result1441 + " <b.rank(123 - 1)>")
chamada antiga: assertEquals(1, b.rank(123))
nova chamada: assertEquals(1, b.rank(123), "Era esperado valores iguais, mas  1 é diferente de " + result1442 + " <b.rank(123)>")
chamada antiga: assertEquals(1, b.rank(123 + 1))
nova chamada: assertEquals(1, b.rank(123 + 1), "Era esperado valores iguais, mas  1 é diferente de " + result1443 + " <b.rank(123 + 1)>")
chamada antiga: assertEquals(1, b.rank(Integer.MAX_VALUE - 1))
nova chamada: assertEquals(1, b.rank(Integer.MAX_VALUE - 1), "Era esperado valores iguais, mas  1 é diferente de " + result1444 + " <b.rank(Integer.MAX_VALUE - 1)>")
chamada antiga: assertEquals(2, b.rank(Integer.MAX_VALUE))
nova chamada: assertEquals(2, b.rank(Integer.MAX_VALUE), "Era esperado valores iguais, mas  2 é diferente de " + result1445 + " <b.rank(Integer.MAX_VALUE)>")
chamada antiga: assertEquals(2, b.rank(Integer.MAX_VALUE + 1))
nova chamada: assertEquals(2, b.rank(Integer.MAX_VALUE + 1), "Era esperado valores iguais, mas  2 é diferente de " + result1446 + " <b.rank(Integer.MAX_VALUE + 1)>")
chamada antiga: assertEquals(Integer.MAX_VALUE, b.select(0))
nova chamada: assertEquals(Integer.MAX_VALUE, b.select(0), "Era esperado valores iguais, mas  Integer.MAX_VALUE é diferente de " + result1447 + " <b.select(0)>")
chamada antiga: assertEquals(0, b.rank(Integer.MAX_VALUE - 1))
nova chamada: assertEquals(0, b.rank(Integer.MAX_VALUE - 1), "Era esperado valores iguais, mas  0 é diferente de " + result1448 + " <b.rank(Integer.MAX_VALUE - 1)>")
chamada antiga: assertEquals(1, b.rank(Integer.MAX_VALUE))
nova chamada: assertEquals(1, b.rank(Integer.MAX_VALUE), "Era esperado valores iguais, mas  1 é diferente de " + result1449 + " <b.rank(Integer.MAX_VALUE)>")
chamada antiga: assertEquals(1, b.rank(Integer.MAX_VALUE + 1))
nova chamada: assertEquals(1, b.rank(Integer.MAX_VALUE + 1), "Era esperado valores iguais, mas  1 é diferente de " + result1450 + " <b.rank(Integer.MAX_VALUE + 1)>")
chamada antiga: assertEquals(123, b.select(0))
nova chamada: assertEquals(123, b.select(0), "Era esperado valores iguais, mas  123 é diferente de " + result1451 + " <b.select(0)>")
chamada antiga: assertEquals(123, b.select(0))
nova chamada: assertEquals(123, b.select(0), "Era esperado valores iguais, mas  123 é diferente de " + result1452 + " <b.select(0)>")
chamada antiga: assertEquals(Integer.MAX_VALUE, b.select(1))
nova chamada: assertEquals(Integer.MAX_VALUE, b.select(1), "Era esperado valores iguais, mas  Integer.MAX_VALUE é diferente de " + result1453 + " <b.select(1)>")
chamada antiga: assertEquals(0, b.rank(123 - 1))
nova chamada: assertEquals(0, b.rank(123 - 1), "Era esperado valores iguais, mas  0 é diferente de " + result1454 + " <b.rank(123 - 1)>")
chamada antiga: assertEquals(1, b.rank(123))
nova chamada: assertEquals(1, b.rank(123), "Era esperado valores iguais, mas  1 é diferente de " + result1455 + " <b.rank(123)>")
chamada antiga: assertEquals(1, b.rank(123 + 1))
nova chamada: assertEquals(1, b.rank(123 + 1), "Era esperado valores iguais, mas  1 é diferente de " + result1456 + " <b.rank(123 + 1)>")
chamada antiga: assertEquals(1, b.rank(Integer.MAX_VALUE - 1))
nova chamada: assertEquals(1, b.rank(Integer.MAX_VALUE - 1), "Era esperado valores iguais, mas  1 é diferente de " + result1457 + " <b.rank(Integer.MAX_VALUE - 1)>")
chamada antiga: assertEquals(2, b.rank(Integer.MAX_VALUE))
nova chamada: assertEquals(2, b.rank(Integer.MAX_VALUE), "Era esperado valores iguais, mas  2 é diferente de " + result1458 + " <b.rank(Integer.MAX_VALUE)>")
chamada antiga: assertEquals(2, b.rank(Integer.MAX_VALUE + 1))
nova chamada: assertEquals(2, b.rank(Integer.MAX_VALUE + 1), "Era esperado valores iguais, mas  2 é diferente de " + result1459 + " <b.rank(Integer.MAX_VALUE + 1)>")
chamada antiga: assertEquals(123, b.select(0))
nova chamada: assertEquals(123, b.select(0), "Era esperado valores iguais, mas  123 é diferente de " + result1460 + " <b.select(0)>")
chamada antiga: assertEquals(0, b.rank(123 - 1))
nova chamada: assertEquals(0, b.rank(123 - 1), "Era esperado valores iguais, mas  0 é diferente de " + result1461 + " <b.rank(123 - 1)>")
chamada antiga: assertEquals(1, b.rank(123))
nova chamada: assertEquals(1, b.rank(123), "Era esperado valores iguais, mas  1 é diferente de " + result1462 + " <b.rank(123)>")
chamada antiga: assertEquals(1, b.rank(123 + 1))
nova chamada: assertEquals(1, b.rank(123 + 1), "Era esperado valores iguais, mas  1 é diferente de " + result1463 + " <b.rank(123 + 1)>")
chamada antiga: assertEquals(1, b.rank(123))
nova chamada: assertEquals(1, b.rank(123), "Era esperado valores iguais, mas  1 é diferente de " + result1464 + " <b.rank(123)>")
chamada antiga: assertEquals(123, b.select(0))
nova chamada: assertEquals(123, b.select(0), "Era esperado valores iguais, mas  123 é diferente de " + result1465 + " <b.select(0)>")
chamada antiga: assertEquals(123, b.select(0))
nova chamada: assertEquals(123, b.select(0), "Era esperado valores iguais, mas  123 é diferente de " + result1466 + " <b.select(0)>")
chamada antiga: assertEquals(-234, b.select(1))
nova chamada: assertEquals(-234, b.select(1), "Era esperado valores iguais, mas  -234 é diferente de " + result1467 + " <b.select(1)>")
chamada antiga: assertEquals(0, b.rank(123 - 1))
nova chamada: assertEquals(0, b.rank(123 - 1), "Era esperado valores iguais, mas  0 é diferente de " + result1468 + " <b.rank(123 - 1)>")
chamada antiga: assertEquals(1, b.rank(123))
nova chamada: assertEquals(1, b.rank(123), "Era esperado valores iguais, mas  1 é diferente de " + result1469 + " <b.rank(123)>")
chamada antiga: assertEquals(1, b.rank(123 + 1))
nova chamada: assertEquals(1, b.rank(123 + 1), "Era esperado valores iguais, mas  1 é diferente de " + result1470 + " <b.rank(123 + 1)>")
chamada antiga: assertEquals(1, b.rank(-234 - 1))
nova chamada: assertEquals(1, b.rank(-234 - 1), "Era esperado valores iguais, mas  1 é diferente de " + result1471 + " <b.rank(-234 - 1)>")
chamada antiga: assertEquals(2, b.rank(-234))
nova chamada: assertEquals(2, b.rank(-234), "Era esperado valores iguais, mas  2 é diferente de " + result1472 + " <b.rank(-234)>")
chamada antiga: assertEquals(2, b.rank(-234 + 1))
nova chamada: assertEquals(2, b.rank(-234 + 1), "Era esperado valores iguais, mas  2 é diferente de " + result1473 + " <b.rank(-234 + 1)>")
chamada antiga: assertEquals(-234, b.select(0))
nova chamada: assertEquals(-234, b.select(0), "Era esperado valores iguais, mas  -234 é diferente de " + result1474 + " <b.select(0)>")
chamada antiga: assertEquals(0, b.rank(-234 - 1))
nova chamada: assertEquals(0, b.rank(-234 - 1), "Era esperado valores iguais, mas  0 é diferente de " + result1475 + " <b.rank(-234 - 1)>")
chamada antiga: assertEquals(1, b.rank(-234))
nova chamada: assertEquals(1, b.rank(-234), "Era esperado valores iguais, mas  1 é diferente de " + result1476 + " <b.rank(-234)>")
chamada antiga: assertEquals(1, b.rank(-234 + 1))
nova chamada: assertEquals(1, b.rank(-234 + 1), "Era esperado valores iguais, mas  1 é diferente de " + result1477 + " <b.rank(-234 + 1)>")
chamada antiga: assertEquals(123, b.select(0))
nova chamada: assertEquals(123, b.select(0), "Era esperado valores iguais, mas  123 é diferente de " + result1478 + " <b.select(0)>")
chamada antiga: assertEquals(123, b.select(0))
nova chamada: assertEquals(123, b.select(0), "Era esperado valores iguais, mas  123 é diferente de " + result1479 + " <b.select(0)>")
chamada antiga: assertEquals(-234, b.select(1))
nova chamada: assertEquals(-234, b.select(1), "Era esperado valores iguais, mas  -234 é diferente de " + result1480 + " <b.select(1)>")
chamada antiga: assertEquals(0, b.rank(123 - 1))
nova chamada: assertEquals(0, b.rank(123 - 1), "Era esperado valores iguais, mas  0 é diferente de " + result1481 + " <b.rank(123 - 1)>")
chamada antiga: assertEquals(1, b.rank(123))
nova chamada: assertEquals(1, b.rank(123), "Era esperado valores iguais, mas  1 é diferente de " + result1482 + " <b.rank(123)>")
chamada antiga: assertEquals(1, b.rank(123 + 1))
nova chamada: assertEquals(1, b.rank(123 + 1), "Era esperado valores iguais, mas  1 é diferente de " + result1483 + " <b.rank(123 + 1)>")
chamada antiga: assertEquals(1, b.rank(-234 - 1))
nova chamada: assertEquals(1, b.rank(-234 - 1), "Era esperado valores iguais, mas  1 é diferente de " + result1484 + " <b.rank(-234 - 1)>")
chamada antiga: assertEquals(2, b.rank(-234))
nova chamada: assertEquals(2, b.rank(-234), "Era esperado valores iguais, mas  2 é diferente de " + result1485 + " <b.rank(-234)>")
chamada antiga: assertEquals(2, b.rank(-234 + 1))
nova chamada: assertEquals(2, b.rank(-234 + 1), "Era esperado valores iguais, mas  2 é diferente de " + result1486 + " <b.rank(-234 + 1)>")
chamada antiga: assertEquals(123, b.select(0))
nova chamada: assertEquals(123, b.select(0), "Era esperado valores iguais, mas  123 é diferente de " + result1487 + " <b.select(0)>")
chamada antiga: assertEquals(0, b.rank(123 - 1))
nova chamada: assertEquals(0, b.rank(123 - 1), "Era esperado valores iguais, mas  0 é diferente de " + result1488 + " <b.rank(123 - 1)>")
chamada antiga: assertEquals(1, b.rank(123))
nova chamada: assertEquals(1, b.rank(123), "Era esperado valores iguais, mas  1 é diferente de " + result1489 + " <b.rank(123)>")
chamada antiga: assertEquals(1, b.rank(123 + 1))
nova chamada: assertEquals(1, b.rank(123 + 1), "Era esperado valores iguais, mas  1 é diferente de " + result1490 + " <b.rank(123 + 1)>")
chamada antiga: assertEquals(0, b.getLongCardinality())
nova chamada: assertEquals(0, b.getLongCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result1491 + " <b.getLongCardinality()>")
chamada antiga: assertEquals(nbReallyAdded, b.getLongCardinality())
nova chamada: assertEquals(nbReallyAdded, b.getLongCardinality(), "Era esperado valores iguais, mas  nbReallyAdded é diferente de " + result1492 + " <b.getLongCardinality()>")
chamada antiga: assertThrows(IllegalArgumentException.class, () -> {
    FastRankRoaringBitmap b = new FastRankRoaringBitmap();
    b.select(0);
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    FastRankRoaringBitmap b = new FastRankRoaringBitmap();
    b.select(0);
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: assertFalse(fast.isCacheDismissed())
nova chamada: assertFalse(fast.isCacheDismissed(), "Era esperado falso, mas " + result1493 + " <fast.isCacheDismissed()> é verdadeiro ")
chamada antiga: assertTrue(fast.isCacheDismissed())
nova chamada: assertTrue(fast.isCacheDismissed(), "Era esperado verdadeiro, mas " + result1494 + " <fast.isCacheDismissed()> é falso")
chamada antiga: assertTrue(fast.isCacheDismissed())
nova chamada: assertTrue(fast.isCacheDismissed(), "Era esperado verdadeiro, mas " + result1495 + " <fast.isCacheDismissed()> é falso")
chamada antiga: assertTrue(fast.isCacheDismissed())
nova chamada: assertTrue(fast.isCacheDismissed(), "Era esperado verdadeiro, mas " + result1496 + " <fast.isCacheDismissed()> é falso")
chamada antiga: assertTrue(fast.isCacheDismissed())
nova chamada: assertTrue(fast.isCacheDismissed(), "Era esperado verdadeiro, mas " + result1497 + " <fast.isCacheDismissed()> é falso")
chamada antiga: assertTrue(fast.isCacheDismissed())
nova chamada: assertTrue(fast.isCacheDismissed(), "Era esperado verdadeiro, mas " + result1498 + " <fast.isCacheDismissed()> é falso")
chamada antiga: assertTrue(fast.isCacheDismissed())
nova chamada: assertTrue(fast.isCacheDismissed(), "Era esperado verdadeiro, mas " + result1499 + " <fast.isCacheDismissed()> é falso")
chamada antiga: assertTrue(fast.isCacheDismissed())
nova chamada: assertTrue(fast.isCacheDismissed(), "Era esperado verdadeiro, mas " + result1500 + " <fast.isCacheDismissed()> é falso")
chamada antiga: assertTrue(fast.isCacheDismissed())
nova chamada: assertTrue(fast.isCacheDismissed(), "Era esperado verdadeiro, mas " + result1501 + " <fast.isCacheDismissed()> é falso")
chamada antiga: assertTrue(fast.isCacheDismissed())
nova chamada: assertTrue(fast.isCacheDismissed(), "Era esperado verdadeiro, mas " + result1502 + " <fast.isCacheDismissed()> é falso")
chamada antiga: assertTrue(fast.isCacheDismissed())
nova chamada: assertTrue(fast.isCacheDismissed(), "Era esperado verdadeiro, mas " + result1503 + " <fast.isCacheDismissed()> é falso")
chamada antiga: assertTrue(fast.isCacheDismissed())
nova chamada: assertTrue(fast.isCacheDismissed(), "Era esperado verdadeiro, mas " + result1504 + " <fast.isCacheDismissed()> é falso")
chamada antiga: assertTrue(fast.isCacheDismissed())
nova chamada: assertTrue(fast.isCacheDismissed(), "Era esperado verdadeiro, mas " + result1505 + " <fast.isCacheDismissed()> é falso")
chamada antiga: assertTrue(fast.isCacheDismissed())
nova chamada: assertTrue(fast.isCacheDismissed(), "Era esperado verdadeiro, mas " + result1506 + " <fast.isCacheDismissed()> é falso")
chamada antiga: assertTrue(fast.isCacheDismissed())
nova chamada: assertTrue(fast.isCacheDismissed(), "Era esperado verdadeiro, mas " + result1507 + " <fast.isCacheDismissed()> é falso")
chamada antiga: assertTrue(fast.isCacheDismissed())
nova chamada: assertTrue(fast.isCacheDismissed(), "Era esperado verdadeiro, mas " + result1508 + " <fast.isCacheDismissed()> é falso")
chamada antiga: assertTrue(fast.isCacheDismissed())
nova chamada: assertTrue(fast.isCacheDismissed(), "Era esperado verdadeiro, mas " + result1509 + " <fast.isCacheDismissed()> é falso")
chamada antiga: assertTrue(fast.isCacheDismissed())
nova chamada: assertTrue(fast.isCacheDismissed(), "Era esperado verdadeiro, mas " + result1510 + " <fast.isCacheDismissed()> é falso")
chamada antiga: assertEquals(16, fast.getLongSizeInBytes())
nova chamada: assertEquals(16, fast.getLongSizeInBytes(), "Era esperado valores iguais, mas  16 é diferente de " + result1511 + " <fast.getLongSizeInBytes()>")
chamada antiga: assertEquals(34, fast.getLongSizeInBytes())
nova chamada: assertEquals(34, fast.getLongSizeInBytes(), "Era esperado valores iguais, mas  34 é diferente de " + result1512 + " <fast.getLongSizeInBytes()>")
chamada antiga: assertEquals(42, fast.getLongSizeInBytes())
nova chamada: assertEquals(42, fast.getLongSizeInBytes(), "Era esperado valores iguais, mas  42 é diferente de " + result1513 + " <fast.getLongSizeInBytes()>")
chamada antiga: assertEquals(0, rankRoaringBitmap.rank(3))
nova chamada: assertEquals(0, rankRoaringBitmap.rank(3), "Era esperado valores iguais, mas  0 é diferente de " + result1514 + " <rankRoaringBitmap.rank(3)>")
chamada antiga: assertEquals(3, rankRoaringBitmap.select(0))
nova chamada: assertEquals(3, rankRoaringBitmap.select(0), "Era esperado valores iguais, mas  3 é diferente de " + result1515 + " <rankRoaringBitmap.select(0)>")
chamada antiga: assertEquals(5, rankRoaringBitmap.select(1))
nova chamada: assertEquals(5, rankRoaringBitmap.select(1), "Era esperado valores iguais, mas  5 é diferente de " + result1516 + " <rankRoaringBitmap.select(1)>")
chamada antiga: assertEquals(5, roaringBitmap.select(roaringBitmap.getCardinality() - 1))
nova chamada: assertEquals(5, roaringBitmap.select(roaringBitmap.getCardinality() - 1), "Era esperado valores iguais, mas  5 é diferente de " + result1517 + " <roaringBitmap.select(roaringBitmap.getCardinality() - 1)>")
chamada antiga: assertThrows(IllegalArgumentException.class, () -> roaringBitmap.select(roaringBitmap.getCardinality()))
nova chamada: assertThrows(IllegalArgumentException.class, () -> roaringBitmap.select(roaringBitmap.getCardinality()), "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(IllegalArgumentException.class, () -> roaringBitmap.select(roaringBitmap.getCardinality() + 1))
nova chamada: assertThrows(IllegalArgumentException.class, () -> roaringBitmap.select(roaringBitmap.getCardinality() + 1), "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: assertEquals(5, rankRoaringBitmap.select(rankRoaringBitmap.getCardinality() - 1))
nova chamada: assertEquals(5, rankRoaringBitmap.select(rankRoaringBitmap.getCardinality() - 1), "Era esperado valores iguais, mas  5 é diferente de " + result1518 + " <rankRoaringBitmap.select(rankRoaringBitmap.getCardinality() - 1)>")
chamada antiga: assertThrows(IllegalArgumentException.class, () -> rankRoaringBitmap.select(rankRoaringBitmap.getCardinality()))
nova chamada: assertThrows(IllegalArgumentException.class, () -> rankRoaringBitmap.select(rankRoaringBitmap.getCardinality()), "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(IllegalArgumentException.class, () -> rankRoaringBitmap.select(rankRoaringBitmap.getCardinality() + 1))
nova chamada: assertThrows(IllegalArgumentException.class, () -> rankRoaringBitmap.select(rankRoaringBitmap.getCardinality() + 1), "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: assertEquals(expected, xor)
nova chamada: assertEquals(expected, xor, "Era esperado valores iguais, mas  expected é diferente de " + " xor")
chamada antiga: assertEquals(expected, ImmutableRoaringBitmap.or(a, b))
nova chamada: assertEquals(expected, ImmutableRoaringBitmap.or(a, b), "Era esperado valores iguais, mas  expected é diferente de " + result1519 + " <ImmutableRoaringBitmap.or(a, b)>")
chamada antiga: assertEquals(expected, ImmutableRoaringBitmap.or(b, a))
nova chamada: assertEquals(expected, ImmutableRoaringBitmap.or(b, a), "Era esperado valores iguais, mas  expected é diferente de " + result1520 + " <ImmutableRoaringBitmap.or(b, a)>")
chamada antiga: assertEquals(expected, andNot)
nova chamada: assertEquals(expected, andNot, "Era esperado valores iguais, mas  expected é diferente de " + " andNot")
chamada antiga: assertThrows(RuntimeException.class, () -> {
    ImmutableRoaringBitmap a = ImmutableRoaringBitmap.bitmapOf(1, 5, 7, 13);
    ImmutableRoaringBitmap.flip(a, 7L, 5L);
})
nova chamada: assertThrows(RuntimeException.class, () -> {
    ImmutableRoaringBitmap a = ImmutableRoaringBitmap.bitmapOf(1, 5, 7, 13);
    ImmutableRoaringBitmap.flip(a, 7L, 5L);
}, "Era esperado que a exceção  RuntimeException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(IllegalArgumentException.class, () -> {
    ImmutableRoaringBitmap a = ImmutableRoaringBitmap.bitmapOf(1, 5, 7, 13);
    ImmutableRoaringBitmap.flip(a, 1L << 32, 1L << 33);
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    ImmutableRoaringBitmap a = ImmutableRoaringBitmap.bitmapOf(1, 5, 7, 13);
    ImmutableRoaringBitmap.flip(a, 1L << 32, 1L << 33);
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(IllegalArgumentException.class, () -> {
    ImmutableRoaringBitmap a = ImmutableRoaringBitmap.bitmapOf(1, 5, 7, 13);
    ImmutableRoaringBitmap.flip(a, 1L, 1L << 33);
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    ImmutableRoaringBitmap a = ImmutableRoaringBitmap.bitmapOf(1, 5, 7, 13);
    ImmutableRoaringBitmap.flip(a, 1L, 1L << 33);
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: assertEquals((4 << 16) - 1, rb.getCardinality())
nova chamada: assertEquals((4 << 16) - 1, rb.getCardinality(), "Era esperado valores iguais, mas  (4  16) - 1 é diferente de " + result1521 + " <rb.getCardinality()>")
chamada antiga: assertFalse(iterator.hasNext())
nova chamada: assertFalse(iterator.hasNext(), "Era esperado falso, mas " + result1522 + " <iterator.hasNext()> é verdadeiro ")
chamada antiga: assertEquals((4 << 16) - 1, rb.getCardinality())
nova chamada: assertEquals((4 << 16) - 1, rb.getCardinality(), "Era esperado valores iguais, mas  (4  16) - 1 é diferente de " + result1523 + " <rb.getCardinality()>")
chamada antiga: assertFalse(iterator.hasNext())
nova chamada: assertFalse(iterator.hasNext(), "Era esperado falso, mas " + result1524 + " <iterator.hasNext()> é verdadeiro ")
chamada antiga: assertEquals((5 << 16) - 2, rb.getCardinality())
nova chamada: assertEquals((5 << 16) - 2, rb.getCardinality(), "Era esperado valores iguais, mas  (5  16) - 2 é diferente de " + result1525 + " <rb.getCardinality()>")
chamada antiga: assertFalse(iterator.hasNext())
nova chamada: assertFalse(iterator.hasNext(), "Era esperado falso, mas " + result1526 + " <iterator.hasNext()> é verdadeiro ")
chamada antiga: assertEquals((2 << 16) + (2 << 14), rb.getCardinality())
nova chamada: assertEquals((2 << 16) + (2 << 14), rb.getCardinality(), "Era esperado valores iguais, mas  (2  16) + (2  14) é diferente de " + result1527 + " <rb.getCardinality()>")
chamada antiga: assertFalse(iterator.hasNext())
nova chamada: assertFalse(iterator.hasNext(), "Era esperado falso, mas " + result1528 + " <iterator.hasNext()> é verdadeiro ")
chamada antiga: assertEquals((5 << 16), rb.getCardinality())
nova chamada: assertEquals((5 << 16), rb.getCardinality(), "Era esperado valores iguais, mas  (5  16) é diferente de " + result1529 + " <rb.getCardinality()>")
chamada antiga: assertFalse(iterator.hasNext())
nova chamada: assertFalse(iterator.hasNext(), "Era esperado falso, mas " + result1530 + " <iterator.hasNext()> é verdadeiro ")
chamada antiga: assertEquals((1 << 14) + 4, rb.getCardinality())
nova chamada: assertEquals((1 << 14) + 4, rb.getCardinality(), "Era esperado valores iguais, mas  (1  14) + 4 é diferente de " + result1531 + " <rb.getCardinality()>")
chamada antiga: assertTrue(iterator.hasNext())
nova chamada: assertTrue(iterator.hasNext(), "Era esperado verdadeiro, mas " + result1532 + " <iterator.hasNext()> é falso")
chamada antiga: assertEquals((1 << 16) - 1, iterator.next())
nova chamada: assertEquals((1 << 16) - 1, iterator.next(), "Era esperado valores iguais, mas  (1  16) - 1 é diferente de " + result1533 + " <iterator.next()>")
chamada antiga: assertTrue(iterator.hasNext())
nova chamada: assertTrue(iterator.hasNext(), "Era esperado verdadeiro, mas " + result1534 + " <iterator.hasNext()> é falso")
chamada antiga: assertEquals(1 << 16, iterator.next())
nova chamada: assertEquals(1 << 16, iterator.next(), "Era esperado valores iguais, mas  1  16 é diferente de " + result1535 + " <iterator.next()>")
chamada antiga: assertTrue(iterator.hasNext())
nova chamada: assertTrue(iterator.hasNext(), "Era esperado verdadeiro, mas " + result1536 + " <iterator.hasNext()> é falso")
chamada antiga: assertEquals(2 << 16, iterator.next())
nova chamada: assertEquals(2 << 16, iterator.next(), "Era esperado valores iguais, mas  2  16 é diferente de " + result1537 + " <iterator.next()>")
chamada antiga: assertTrue(iterator.hasNext())
nova chamada: assertTrue(iterator.hasNext(), "Era esperado verdadeiro, mas " + result1538 + " <iterator.hasNext()> é falso")
chamada antiga: assertEquals(3 << 16, iterator.next())
nova chamada: assertEquals(3 << 16, iterator.next(), "Era esperado valores iguais, mas  3  16 é diferente de " + result1539 + " <iterator.next()>")
chamada antiga: assertFalse(iterator.hasNext())
nova chamada: assertFalse(iterator.hasNext(), "Era esperado falso, mas " + result1540 + " <iterator.hasNext()> é verdadeiro ")
chamada antiga: assertEquals((1 << 14) + 3, rb.getCardinality())
nova chamada: assertEquals((1 << 14) + 3, rb.getCardinality(), "Era esperado valores iguais, mas  (1  14) + 3 é diferente de " + result1541 + " <rb.getCardinality()>")
chamada antiga: assertTrue(iterator.hasNext())
nova chamada: assertTrue(iterator.hasNext(), "Era esperado verdadeiro, mas " + result1542 + " <iterator.hasNext()> é falso")
chamada antiga: assertEquals(1 << 16, iterator.next())
nova chamada: assertEquals(1 << 16, iterator.next(), "Era esperado valores iguais, mas  1  16 é diferente de " + result1543 + " <iterator.next()>")
chamada antiga: assertTrue(iterator.hasNext())
nova chamada: assertTrue(iterator.hasNext(), "Era esperado verdadeiro, mas " + result1544 + " <iterator.hasNext()> é falso")
chamada antiga: assertEquals(2 << 16, iterator.next())
nova chamada: assertEquals(2 << 16, iterator.next(), "Era esperado valores iguais, mas  2  16 é diferente de " + result1545 + " <iterator.next()>")
chamada antiga: assertTrue(iterator.hasNext())
nova chamada: assertTrue(iterator.hasNext(), "Era esperado verdadeiro, mas " + result1546 + " <iterator.hasNext()> é falso")
chamada antiga: assertEquals(3 << 16, iterator.next())
nova chamada: assertEquals(3 << 16, iterator.next(), "Era esperado valores iguais, mas  3  16 é diferente de " + result1547 + " <iterator.next()>")
chamada antiga: assertFalse(iterator.hasNext())
nova chamada: assertFalse(iterator.hasNext(), "Era esperado falso, mas " + result1548 + " <iterator.hasNext()> é verdadeiro ")
chamada antiga: assertEquals(5, rb.last())
nova chamada: assertEquals(5, rb.last(), "Era esperado valores iguais, mas  5 é diferente de " + result1549 + " <rb.last()>")
chamada antiga: assertEquals((int) (65535L * 65536L + 65523), rb3.last())
nova chamada: assertEquals((int) (65535L * 65536L + 65523), rb3.last(), "Era esperado valores iguais, mas  (int) (65535L * 65536L + 65523) é diferente de " + result1550 + " <rb3.last()>")
chamada antiga: assertTrue(rb.isEmpty())
nova chamada: assertTrue(rb.isEmpty(), "Era esperado verdadeiro, mas " + result1551 + " <rb.isEmpty()> é falso")
chamada antiga: assertEquals(RoaringBitmap.bitmapOf(1, 0x10001, 0x20001), rb)
nova chamada: assertEquals(RoaringBitmap.bitmapOf(1, 0x10001, 0x20001), rb, "Era esperado valores iguais, mas " + result1552 + " <RoaringBitmap.bitmapOf(1, 0x10001, 0x20001)> é diferente de " + " rb")
chamada antiga: assertTrue(result.isEmpty())
nova chamada: assertTrue(result.isEmpty(), "Era esperado verdadeiro, mas " + result1553 + " <result.isEmpty()> é falso")
chamada antiga: assertEquals(RoaringBitmap.bitmapOf(1, 0x10001, 0x20001), RoaringBitmap.orNot(rb, full, 0x30000L))
nova chamada: assertEquals(RoaringBitmap.bitmapOf(1, 0x10001, 0x20001), RoaringBitmap.orNot(rb, full, 0x30000L), "Era esperado valores iguais, mas " + result1554 + " <RoaringBitmap.bitmapOf(1, 0x10001, 0x20001)> é diferente de " + result1555 + " <RoaringBitmap.orNot(rb, full, 0x30000L)>")
chamada antiga: assertEquals(expected, actual)
nova chamada: assertEquals(expected, actual, "Era esperado valores iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertEquals(expected, actual)
nova chamada: assertEquals(expected, actual, "Era esperado valores iguais, mas  expected é diferente de " + " actual")
chamada antiga: Assertions.assertEquals(0, minPos)
nova chamada: assertEquals(0, minPos, "Era esperado valores iguais, mas  0 é diferente de " + " minPos")
chamada antiga: Assertions.assertEquals(255, maxPos)
nova chamada: assertEquals(255, maxPos, "Era esperado valores iguais, mas  255 é diferente de " + " maxPos")
chamada antiga: Assertions.assertEquals((byte) 119, node256.getChildKey(pos119))
nova chamada: assertEquals((byte) 119, node256.getChildKey(pos119), "Era esperado valores iguais, mas  (byte) 119 é diferente de " + result1556 + " <node256.getChildKey(pos119)>")
chamada antiga: Assertions.assertEquals(119, pos119)
nova chamada: assertEquals(119, pos119, "Era esperado valores iguais, mas  119 é diferente de " + " pos119")
chamada antiga: Assertions.assertEquals(121, pos121)
nova chamada: assertEquals(121, pos121, "Era esperado valores iguais, mas  121 é diferente de " + " pos121")
chamada antiga: Assertions.assertEquals(119, nextPos119)
nova chamada: assertEquals(119, nextPos119, "Era esperado valores iguais, mas  119 é diferente de " + " nextPos119")
chamada antiga: Assertions.assertEquals(minLeafNode256, minLeafNode48)
nova chamada: assertEquals(minLeafNode256, minLeafNode48, "Era esperado valores iguais, mas  minLeafNode256 é diferente de " + " minLeafNode48")
chamada antiga: Assertions.assertEquals(offset, nodes.getMinPos())
nova chamada: assertEquals(offset, nodes.getMinPos(), "Era esperado valores iguais, mas  offset é diferente de " + result1557 + " <nodes.getMinPos()>")
chamada antiga: Assertions.assertEquals(Node.ILLEGAL_IDX, nodes.getNextSmallerPos(nodes.getMinPos()))
nova chamada: assertEquals(Node.ILLEGAL_IDX, nodes.getNextSmallerPos(nodes.getMinPos()), "Era esperado valores iguais, mas  Node.ILLEGAL_IDX é diferente de " + result1558 + " <nodes.getNextSmallerPos(nodes.getMinPos())>")
chamada antiga: Assertions.assertEquals(Node.ILLEGAL_IDX, nodes.getNextLargerPos(nodes.getMaxPos()))
nova chamada: assertEquals(Node.ILLEGAL_IDX, nodes.getNextLargerPos(nodes.getMaxPos()), "Era esperado valores iguais, mas  Node.ILLEGAL_IDX é diferente de " + result1559 + " <nodes.getNextLargerPos(nodes.getMaxPos())>")
chamada antiga: Assertions.assertEquals(offset, nodes.getMinPos())
nova chamada: assertEquals(offset, nodes.getMinPos(), "Era esperado valores iguais, mas  offset é diferente de " + result1560 + " <nodes.getMinPos()>")
chamada antiga: Assertions.assertEquals(Node.ILLEGAL_IDX, nodes.getNextSmallerPos(nodes.getMinPos()))
nova chamada: assertEquals(Node.ILLEGAL_IDX, nodes.getNextSmallerPos(nodes.getMinPos()), "Era esperado valores iguais, mas  Node.ILLEGAL_IDX é diferente de " + result1561 + " <nodes.getNextSmallerPos(nodes.getMinPos())>")
chamada antiga: Assertions.assertEquals(Node.ILLEGAL_IDX, nodes.getNextLargerPos(nodes.getMaxPos()))
nova chamada: assertEquals(Node.ILLEGAL_IDX, nodes.getNextLargerPos(nodes.getMaxPos()), "Era esperado valores iguais, mas  Node.ILLEGAL_IDX é diferente de " + result1562 + " <nodes.getNextLargerPos(nodes.getMaxPos())>")
chamada antiga: Assertions.assertEquals(SearchResult.Outcome.NOT_FOUND, sr.outcome)
nova chamada: assertEquals(SearchResult.Outcome.NOT_FOUND, sr.outcome, "Era esperado valores iguais, mas  SearchResult.Outcome.NOT_FOUND é diferente de " + " sr.outcome")
chamada antiga: Assertions.assertEquals(Node.ILLEGAL_IDX, sr.getNextSmallerPos())
nova chamada: assertEquals(Node.ILLEGAL_IDX, sr.getNextSmallerPos(), "Era esperado valores iguais, mas  Node.ILLEGAL_IDX é diferente de " + result1563 + " <sr.getNextSmallerPos()>")
chamada antiga: Assertions.assertEquals(SearchResult.Outcome.NOT_FOUND, sr.outcome)
nova chamada: assertEquals(SearchResult.Outcome.NOT_FOUND, sr.outcome, "Era esperado valores iguais, mas  SearchResult.Outcome.NOT_FOUND é diferente de " + " sr.outcome")
chamada antiga: Assertions.assertEquals(Node.ILLEGAL_IDX, sr.getNextLargerPos())
nova chamada: assertEquals(Node.ILLEGAL_IDX, sr.getNextLargerPos(), "Era esperado valores iguais, mas  Node.ILLEGAL_IDX é diferente de " + result1564 + " <sr.getNextLargerPos()>")
chamada antiga: Assertions.assertEquals(SearchResult.Outcome.NOT_FOUND, sr.outcome)
nova chamada: assertEquals(SearchResult.Outcome.NOT_FOUND, sr.outcome, "Era esperado valores iguais, mas  SearchResult.Outcome.NOT_FOUND é diferente de " + " sr.outcome")
chamada antiga: Assertions.assertEquals(Node.ILLEGAL_IDX, sr.getNextSmallerPos())
nova chamada: assertEquals(Node.ILLEGAL_IDX, sr.getNextSmallerPos(), "Era esperado valores iguais, mas  Node.ILLEGAL_IDX é diferente de " + result1565 + " <sr.getNextSmallerPos()>")
chamada antiga: Assertions.assertEquals(SearchResult.Outcome.NOT_FOUND, sr.outcome)
nova chamada: assertEquals(SearchResult.Outcome.NOT_FOUND, sr.outcome, "Era esperado valores iguais, mas  SearchResult.Outcome.NOT_FOUND é diferente de " + " sr.outcome")
chamada antiga: Assertions.assertEquals(Node.ILLEGAL_IDX, sr.getNextLargerPos())
nova chamada: assertEquals(Node.ILLEGAL_IDX, sr.getNextLargerPos(), "Era esperado valores iguais, mas  Node.ILLEGAL_IDX é diferente de " + result1566 + " <sr.getNextLargerPos()>")
chamada antiga: Assertions.assertEquals(12, node16.getChildPos(key))
nova chamada: assertEquals(12, node16.getChildPos(key), "Era esperado valores iguais, mas  12 é diferente de " + result1567 + " <node16.getChildPos(key)>")
chamada antiga: Assertions.assertEquals(key, node16.getChildKey(12))
nova chamada: assertEquals(key, node16.getChildKey(12), "Era esperado valores iguais, mas  key é diferente de " + result1568 + " <node16.getChildKey(12)>")
chamada antiga: Assertions.assertEquals(12, node16.getChildPos(key12))
nova chamada: assertEquals(12, node16.getChildPos(key12), "Era esperado valores iguais, mas  12 é diferente de " + result1569 + " <node16.getChildPos(key12)>")
chamada antiga: Assertions.assertEquals(key12, node16.getChildKey(12))
nova chamada: assertEquals(key12, node16.getChildKey(12), "Era esperado valores iguais, mas  key12 é diferente de " + result1570 + " <node16.getChildKey(12)>")
chamada antiga: Assertions.assertEquals(13, node16.getChildPos(key))
nova chamada: assertEquals(13, node16.getChildPos(key), "Era esperado valores iguais, mas  13 é diferente de " + result1571 + " <node16.getChildPos(key)>")
chamada antiga: Assertions.assertEquals(key, node16.getChildKey(13))
nova chamada: assertEquals(key, node16.getChildKey(13), "Era esperado valores iguais, mas  key é diferente de " + result1572 + " <node16.getChildKey(13)>")
chamada antiga: Assertions.assertEquals(16, maxPos)
nova chamada: assertEquals(16, maxPos, "Era esperado valores iguais, mas  16 é diferente de " + " maxPos")
chamada antiga: Assertions.assertEquals(maxPos, pos)
nova chamada: assertEquals(maxPos, pos, "Era esperado valores iguais, mas  maxPos é diferente de " + " pos")
chamada antiga: Assertions.assertEquals(0, node16.getMinPos())
nova chamada: assertEquals(0, node16.getMinPos(), "Era esperado valores iguais, mas  0 é diferente de " + result1573 + " <node16.getMinPos()>")
chamada antiga: Assertions.assertEquals(lastValue, node16.getMaxPos())
nova chamada: assertEquals(lastValue, node16.getMaxPos(), "Era esperado valores iguais, mas  lastValue é diferente de " + result1574 + " <node16.getMaxPos()>")
chamada antiga: Assertions.assertEquals(Node.ILLEGAL_IDX, node16.getNextSmallerPos(0))
nova chamada: assertEquals(Node.ILLEGAL_IDX, node16.getNextSmallerPos(0), "Era esperado valores iguais, mas  Node.ILLEGAL_IDX é diferente de " + result1575 + " <node16.getNextSmallerPos(0)>")
chamada antiga: Assertions.assertEquals(SearchResult.Outcome.NOT_FOUND, sr.outcome)
nova chamada: assertEquals(SearchResult.Outcome.NOT_FOUND, sr.outcome, "Era esperado valores iguais, mas  SearchResult.Outcome.NOT_FOUND é diferente de " + " sr.outcome")
chamada antiga: Assertions.assertEquals(Node.ILLEGAL_IDX, sr.getNextSmallerPos())
nova chamada: assertEquals(Node.ILLEGAL_IDX, sr.getNextSmallerPos(), "Era esperado valores iguais, mas  Node.ILLEGAL_IDX é diferente de " + result1576 + " <sr.getNextSmallerPos()>")
chamada antiga: Assertions.assertEquals(SearchResult.Outcome.NOT_FOUND, sr.outcome)
nova chamada: assertEquals(SearchResult.Outcome.NOT_FOUND, sr.outcome, "Era esperado valores iguais, mas  SearchResult.Outcome.NOT_FOUND é diferente de " + " sr.outcome")
chamada antiga: Assertions.assertEquals(Node.ILLEGAL_IDX, sr.getNextLargerPos())
nova chamada: assertEquals(Node.ILLEGAL_IDX, sr.getNextLargerPos(), "Era esperado valores iguais, mas  Node.ILLEGAL_IDX é diferente de " + result1577 + " <sr.getNextLargerPos()>")
chamada antiga: Assertions.assertEquals(SearchResult.Outcome.NOT_FOUND, sr.outcome)
nova chamada: assertEquals(SearchResult.Outcome.NOT_FOUND, sr.outcome, "Era esperado valores iguais, mas  SearchResult.Outcome.NOT_FOUND é diferente de " + " sr.outcome")
chamada antiga: Assertions.assertEquals(Node.ILLEGAL_IDX, sr.getNextSmallerPos())
nova chamada: assertEquals(Node.ILLEGAL_IDX, sr.getNextSmallerPos(), "Era esperado valores iguais, mas  Node.ILLEGAL_IDX é diferente de " + result1578 + " <sr.getNextSmallerPos()>")
chamada antiga: Assertions.assertEquals(SearchResult.Outcome.NOT_FOUND, sr.outcome)
nova chamada: assertEquals(SearchResult.Outcome.NOT_FOUND, sr.outcome, "Era esperado valores iguais, mas  SearchResult.Outcome.NOT_FOUND é diferente de " + " sr.outcome")
chamada antiga: Assertions.assertEquals(Node.ILLEGAL_IDX, sr.getNextLargerPos())
nova chamada: assertEquals(Node.ILLEGAL_IDX, sr.getNextLargerPos(), "Era esperado valores iguais, mas  Node.ILLEGAL_IDX é diferente de " + result1579 + " <sr.getNextLargerPos()>")
chamada antiga: Assertions.assertEquals(Node.ILLEGAL_IDX, nodes.getNextSmallerPos(nodes.getMinPos()))
nova chamada: assertEquals(Node.ILLEGAL_IDX, nodes.getNextSmallerPos(nodes.getMinPos()), "Era esperado valores iguais, mas  Node.ILLEGAL_IDX é diferente de " + result1580 + " <nodes.getNextSmallerPos(nodes.getMinPos())>")
chamada antiga: Assertions.assertEquals(Node.ILLEGAL_IDX, nodes.getNextLargerPos(nodes.getMaxPos()))
nova chamada: assertEquals(Node.ILLEGAL_IDX, nodes.getNextLargerPos(nodes.getMaxPos()), "Era esperado valores iguais, mas  Node.ILLEGAL_IDX é diferente de " + result1581 + " <nodes.getNextLargerPos(nodes.getMaxPos())>")
chamada antiga: Assertions.assertEquals(Node.ILLEGAL_IDX, nodes.getNextSmallerPos(nodes.getMinPos()))
nova chamada: assertEquals(Node.ILLEGAL_IDX, nodes.getNextSmallerPos(nodes.getMinPos()), "Era esperado valores iguais, mas  Node.ILLEGAL_IDX é diferente de " + result1582 + " <nodes.getNextSmallerPos(nodes.getMinPos())>")
chamada antiga: Assertions.assertEquals(Node.ILLEGAL_IDX, nodes.getNextLargerPos(nodes.getMaxPos()))
nova chamada: assertEquals(Node.ILLEGAL_IDX, nodes.getNextLargerPos(nodes.getMaxPos()), "Era esperado valores iguais, mas  Node.ILLEGAL_IDX é diferente de " + result1583 + " <nodes.getNextLargerPos(nodes.getMaxPos())>")
chamada antiga: Assertions.assertEquals(0, minPos)
nova chamada: assertEquals(0, minPos, "Era esperado valores iguais, mas  0 é diferente de " + " minPos")
chamada antiga: Assertions.assertEquals(0, ((LeafNode) node48.getChild(minPos)).getContainerIdx())
nova chamada: assertEquals(0, ((LeafNode) node48.getChild(minPos)).getContainerIdx(), "Era esperado valores iguais, mas  0 é diferente de " + result1584 + " <((LeafNode) node48.getChild(minPos)).getContainerIdx()>")
chamada antiga: Assertions.assertEquals(47, maxPos)
nova chamada: assertEquals(47, maxPos, "Era esperado valores iguais, mas  47 é diferente de " + " maxPos")
chamada antiga: Assertions.assertEquals(sizeInBytes, byteArrayOutputStream.toByteArray().length)
nova chamada: assertEquals(sizeInBytes, byteArrayOutputStream.toByteArray().length, "Era esperado valores iguais, mas  sizeInBytes é diferente de " + " byteArrayOutputStream.toByteArray().length")
chamada antiga: Assertions.assertEquals(1, newMinPos)
nova chamada: assertEquals(1, newMinPos, "Era esperado valores iguais, mas  1 é diferente de " + " newMinPos")
chamada antiga: Assertions.assertEquals(offset, nodes.getMinPos())
nova chamada: assertEquals(offset, nodes.getMinPos(), "Era esperado valores iguais, mas  offset é diferente de " + result1585 + " <nodes.getMinPos()>")
chamada antiga: Assertions.assertEquals(Node.ILLEGAL_IDX, nodes.getNextSmallerPos(nodes.getMinPos()))
nova chamada: assertEquals(Node.ILLEGAL_IDX, nodes.getNextSmallerPos(nodes.getMinPos()), "Era esperado valores iguais, mas  Node.ILLEGAL_IDX é diferente de " + result1586 + " <nodes.getNextSmallerPos(nodes.getMinPos())>")
chamada antiga: Assertions.assertEquals(Node.ILLEGAL_IDX, nodes.getNextLargerPos(nodes.getMaxPos()))
nova chamada: assertEquals(Node.ILLEGAL_IDX, nodes.getNextLargerPos(nodes.getMaxPos()), "Era esperado valores iguais, mas  Node.ILLEGAL_IDX é diferente de " + result1587 + " <nodes.getNextLargerPos(nodes.getMaxPos())>")
chamada antiga: Assertions.assertEquals(offset, nodes.getMinPos())
nova chamada: assertEquals(offset, nodes.getMinPos(), "Era esperado valores iguais, mas  offset é diferente de " + result1588 + " <nodes.getMinPos()>")
chamada antiga: Assertions.assertEquals(Node.ILLEGAL_IDX, nodes.getNextSmallerPos(nodes.getMinPos()))
nova chamada: assertEquals(Node.ILLEGAL_IDX, nodes.getNextSmallerPos(nodes.getMinPos()), "Era esperado valores iguais, mas  Node.ILLEGAL_IDX é diferente de " + result1589 + " <nodes.getNextSmallerPos(nodes.getMinPos())>")
chamada antiga: Assertions.assertEquals(Node.ILLEGAL_IDX, nodes.getNextLargerPos(nodes.getMaxPos()))
nova chamada: assertEquals(Node.ILLEGAL_IDX, nodes.getNextLargerPos(nodes.getMaxPos()), "Era esperado valores iguais, mas  Node.ILLEGAL_IDX é diferente de " + result1590 + " <nodes.getNextLargerPos(nodes.getMaxPos())>")
chamada antiga: Assertions.assertEquals(48, pos48)
nova chamada: assertEquals(48, pos48, "Era esperado valores iguais, mas  48 é diferente de " + " pos48")
chamada antiga: Assertions.assertEquals(48, node256.getMaxPos())
nova chamada: assertEquals(48, node256.getMaxPos(), "Era esperado valores iguais, mas  48 é diferente de " + result1591 + " <node256.getMaxPos()>")
chamada antiga: Assertions.assertEquals(47, node256.getNextSmallerPos(48))
nova chamada: assertEquals(47, node256.getNextSmallerPos(48), "Era esperado valores iguais, mas  47 é diferente de " + result1592 + " <node256.getNextSmallerPos(48)>")
chamada antiga: Assertions.assertEquals(12, maxPos)
nova chamada: assertEquals(12, maxPos, "Era esperado valores iguais, mas  12 é diferente de " + " maxPos")
chamada antiga: Assertions.assertEquals(0, pos)
nova chamada: assertEquals(0, pos, "Era esperado valores iguais, mas  0 é diferente de " + " pos")
chamada antiga: Assertions.assertEquals(Node.ILLEGAL_IDX, pos)
nova chamada: assertEquals(Node.ILLEGAL_IDX, pos, "Era esperado valores iguais, mas  Node.ILLEGAL_IDX é diferente de " + " pos")
chamada antiga: Assertions.assertEquals(11, pos)
nova chamada: assertEquals(11, pos, "Era esperado valores iguais, mas  11 é diferente de " + " pos")
chamada antiga: Assertions.assertEquals(128, minPos)
nova chamada: assertEquals(128, minPos, "Era esperado valores iguais, mas  128 é diferente de " + " minPos")
chamada antiga: Assertions.assertEquals(0, ((LeafNode) node48.getChild(minPos)).getContainerIdx())
nova chamada: assertEquals(0, ((LeafNode) node48.getChild(minPos)).getContainerIdx(), "Era esperado valores iguais, mas  0 é diferente de " + result1593 + " <((LeafNode) node48.getChild(minPos)).getContainerIdx()>")
chamada antiga: Assertions.assertEquals(175, maxPos)
nova chamada: assertEquals(175, maxPos, "Era esperado valores iguais, mas  175 é diferente de " + " maxPos")
chamada antiga: Assertions.assertEquals(129, newMinPos)
nova chamada: assertEquals(129, newMinPos, "Era esperado valores iguais, mas  129 é diferente de " + " newMinPos")
chamada antiga: Assertions.assertEquals(SearchResult.Outcome.NOT_FOUND, sr.outcome)
nova chamada: assertEquals(SearchResult.Outcome.NOT_FOUND, sr.outcome, "Era esperado valores iguais, mas  SearchResult.Outcome.NOT_FOUND é diferente de " + " sr.outcome")
chamada antiga: Assertions.assertEquals(Node.ILLEGAL_IDX, sr.getNextSmallerPos())
nova chamada: assertEquals(Node.ILLEGAL_IDX, sr.getNextSmallerPos(), "Era esperado valores iguais, mas  Node.ILLEGAL_IDX é diferente de " + result1594 + " <sr.getNextSmallerPos()>")
chamada antiga: Assertions.assertEquals(SearchResult.Outcome.NOT_FOUND, sr.outcome)
nova chamada: assertEquals(SearchResult.Outcome.NOT_FOUND, sr.outcome, "Era esperado valores iguais, mas  SearchResult.Outcome.NOT_FOUND é diferente de " + " sr.outcome")
chamada antiga: Assertions.assertEquals(Node.ILLEGAL_IDX, sr.getNextLargerPos())
nova chamada: assertEquals(Node.ILLEGAL_IDX, sr.getNextLargerPos(), "Era esperado valores iguais, mas  Node.ILLEGAL_IDX é diferente de " + result1595 + " <sr.getNextLargerPos()>")
chamada antiga: Assertions.assertEquals(SearchResult.Outcome.NOT_FOUND, sr.outcome)
nova chamada: assertEquals(SearchResult.Outcome.NOT_FOUND, sr.outcome, "Era esperado valores iguais, mas  SearchResult.Outcome.NOT_FOUND é diferente de " + " sr.outcome")
chamada antiga: Assertions.assertEquals(Node.ILLEGAL_IDX, sr.getNextSmallerPos())
nova chamada: assertEquals(Node.ILLEGAL_IDX, sr.getNextSmallerPos(), "Era esperado valores iguais, mas  Node.ILLEGAL_IDX é diferente de " + result1596 + " <sr.getNextSmallerPos()>")
chamada antiga: Assertions.assertEquals(SearchResult.Outcome.NOT_FOUND, sr.outcome)
nova chamada: assertEquals(SearchResult.Outcome.NOT_FOUND, sr.outcome, "Era esperado valores iguais, mas  SearchResult.Outcome.NOT_FOUND é diferente de " + " sr.outcome")
chamada antiga: Assertions.assertEquals(Node.ILLEGAL_IDX, sr.getNextLargerPos())
nova chamada: assertEquals(Node.ILLEGAL_IDX, sr.getNextLargerPos(), "Era esperado valores iguais, mas  Node.ILLEGAL_IDX é diferente de " + result1597 + " <sr.getNextLargerPos()>")
chamada antiga: Assertions.assertEquals(Node.ILLEGAL_IDX, nodes.getNextSmallerPos(66))
nova chamada: assertEquals(Node.ILLEGAL_IDX, nodes.getNextSmallerPos(66), "Era esperado valores iguais, mas  Node.ILLEGAL_IDX é diferente de " + result1598 + " <nodes.getNextSmallerPos(66)>")
chamada antiga: Assertions.assertEquals(67, nodes.getChildKey(nodes.getNextSmallerPos(74)))
nova chamada: assertEquals(67, nodes.getChildKey(nodes.getNextSmallerPos(74)), "Era esperado valores iguais, mas  67 é diferente de " + result1599 + " <nodes.getChildKey(nodes.getNextSmallerPos(74))>")
chamada antiga: Assertions.assertEquals(Node.ILLEGAL_IDX, nodes.getNextLargerPos(68))
nova chamada: assertEquals(Node.ILLEGAL_IDX, nodes.getNextLargerPos(68), "Era esperado valores iguais, mas  Node.ILLEGAL_IDX é diferente de " + result1600 + " <nodes.getNextLargerPos(68)>")
chamada antiga: Assertions.assertEquals(67, nodes.getChildKey(nodes.getNextLargerPos(60)))
nova chamada: assertEquals(67, nodes.getChildKey(nodes.getNextLargerPos(60)), "Era esperado valores iguais, mas  67 é diferente de " + result1601 + " <nodes.getChildKey(nodes.getNextLargerPos(60))>")
chamada antiga: Assertions.assertEquals(0x6700_0000_0000_0000L, longs[0])
nova chamada: assertEquals(0x6700_0000_0000_0000L, longs[0], "Era esperado valores iguais, mas  0x6700_0000_0000_0000L é diferente de " + " longs[0]")
chamada antiga: Assertions.assertEquals(0x6723_0000_0000_0000L, longs[0])
nova chamada: assertEquals(0x6723_0000_0000_0000L, longs[0], "Era esperado valores iguais, mas  0x6723_0000_0000_0000L é diferente de " + " longs[0]")
chamada antiga: Assertions.assertEquals(0x6723_1400_0000_0000L, longs[0])
nova chamada: assertEquals(0x6723_1400_0000_0000L, longs[0], "Era esperado valores iguais, mas  0x6723_1400_0000_0000L é diferente de " + " longs[0]")
chamada antiga: Assertions.assertEquals(0x6723_1498_0000_0000L, longs[0])
nova chamada: assertEquals(0x6723_1498_0000_0000L, longs[0], "Era esperado valores iguais, mas  0x6723_1498_0000_0000L é diferente de " + " longs[0]")
chamada antiga: Assertions.assertEquals(0x0067_0000_0000_0000L, longs[31])
nova chamada: assertEquals(0x0067_0000_0000_0000L, longs[31], "Era esperado valores iguais, mas  0x0067_0000_0000_0000L é diferente de " + " longs[31]")
chamada antiga: Assertions.assertEquals(0x0067_2300_0000_0000L, longs[31])
nova chamada: assertEquals(0x0067_2300_0000_0000L, longs[31], "Era esperado valores iguais, mas  0x0067_2300_0000_0000L é diferente de " + " longs[31]")
chamada antiga: Assertions.assertEquals(0x0067_2314_0000_0000L, longs[31])
nova chamada: assertEquals(0x0067_2314_0000_0000L, longs[31], "Era esperado valores iguais, mas  0x0067_2314_0000_0000L é diferente de " + " longs[31]")
chamada antiga: Assertions.assertEquals(0x0067_2314_9800_0000L, longs[31])
nova chamada: assertEquals(0x0067_2314_9800_0000L, longs[31], "Era esperado valores iguais, mas  0x0067_2314_9800_0000L é diferente de " + " longs[31]")
chamada antiga: Assertions.assertEquals(bytesSize, byteArrayOutputStream.toByteArray().length)
nova chamada: assertEquals(bytesSize, byteArrayOutputStream.toByteArray().length, "Era esperado valores iguais, mas  bytesSize é diferente de " + " byteArrayOutputStream.toByteArray().length")
chamada antiga: Assertions.assertEquals(0, deserializedNode4.getChildPos(key2))
nova chamada: assertEquals(0, deserializedNode4.getChildPos(key2), "Era esperado valores iguais, mas  0 é diferente de " + result1602 + " <deserializedNode4.getChildPos(key2)>")
chamada antiga: Assertions.assertEquals(1, deserializedNode4.getChildPos(key3))
nova chamada: assertEquals(1, deserializedNode4.getChildPos(key3), "Era esperado valores iguais, mas  1 é diferente de " + result1603 + " <deserializedNode4.getChildPos(key3)>")
chamada antiga: Assertions.assertEquals(Node.ILLEGAL_IDX, deserializedNode4.getChildPos(key1))
nova chamada: assertEquals(Node.ILLEGAL_IDX, deserializedNode4.getChildPos(key1), "Era esperado valores iguais, mas  Node.ILLEGAL_IDX é diferente de " + result1604 + " <deserializedNode4.getChildPos(key1)>")
chamada antiga: Assertions.assertEquals(SearchResult.Outcome.FOUND, sr.outcome)
nova chamada: assertEquals(SearchResult.Outcome.FOUND, sr.outcome, "Era esperado valores iguais, mas  SearchResult.Outcome.FOUND é diferente de " + " sr.outcome")
chamada antiga: Assertions.assertEquals(key1Pos, sr.getKeyPos())
nova chamada: assertEquals(key1Pos, sr.getKeyPos(), "Era esperado valores iguais, mas  key1Pos é diferente de " + result1605 + " <sr.getKeyPos()>")
chamada antiga: Assertions.assertEquals(key1, node.getChildKey(sr.getKeyPos()))
nova chamada: assertEquals(key1, node.getChildKey(sr.getKeyPos()), "Era esperado valores iguais, mas  key1 é diferente de " + result1606 + " <node.getChildKey(sr.getKeyPos())>")
chamada antiga: Assertions.assertEquals(SearchResult.Outcome.NOT_FOUND, sr.outcome)
nova chamada: assertEquals(SearchResult.Outcome.NOT_FOUND, sr.outcome, "Era esperado valores iguais, mas  SearchResult.Outcome.NOT_FOUND é diferente de " + " sr.outcome")
chamada antiga: Assertions.assertEquals(key1Pos, sr.getNextSmallerPos())
nova chamada: assertEquals(key1Pos, sr.getNextSmallerPos(), "Era esperado valores iguais, mas  key1Pos é diferente de " + result1607 + " <sr.getNextSmallerPos()>")
chamada antiga: Assertions.assertEquals(Node.ILLEGAL_IDX, sr.getNextLargerPos())
nova chamada: assertEquals(Node.ILLEGAL_IDX, sr.getNextLargerPos(), "Era esperado valores iguais, mas  Node.ILLEGAL_IDX é diferente de " + result1608 + " <sr.getNextLargerPos()>")
chamada antiga: Assertions.assertEquals(SearchResult.Outcome.NOT_FOUND, sr.outcome)
nova chamada: assertEquals(SearchResult.Outcome.NOT_FOUND, sr.outcome, "Era esperado valores iguais, mas  SearchResult.Outcome.NOT_FOUND é diferente de " + " sr.outcome")
chamada antiga: Assertions.assertEquals(Node.ILLEGAL_IDX, sr.getNextSmallerPos())
nova chamada: assertEquals(Node.ILLEGAL_IDX, sr.getNextSmallerPos(), "Era esperado valores iguais, mas  Node.ILLEGAL_IDX é diferente de " + result1609 + " <sr.getNextSmallerPos()>")
chamada antiga: Assertions.assertEquals(key1Pos, sr.getNextLargerPos())
nova chamada: assertEquals(key1Pos, sr.getNextLargerPos(), "Era esperado valores iguais, mas  key1Pos é diferente de " + result1610 + " <sr.getNextLargerPos()>")
chamada antiga: Assertions.assertEquals(SearchResult.Outcome.FOUND, sr.outcome)
nova chamada: assertEquals(SearchResult.Outcome.FOUND, sr.outcome, "Era esperado valores iguais, mas  SearchResult.Outcome.FOUND é diferente de " + " sr.outcome")
chamada antiga: Assertions.assertEquals(key1Pos, sr.getKeyPos())
nova chamada: assertEquals(key1Pos, sr.getKeyPos(), "Era esperado valores iguais, mas  key1Pos é diferente de " + result1611 + " <sr.getKeyPos()>")
chamada antiga: Assertions.assertEquals(SearchResult.Outcome.FOUND, sr.outcome)
nova chamada: assertEquals(SearchResult.Outcome.FOUND, sr.outcome, "Era esperado valores iguais, mas  SearchResult.Outcome.FOUND é diferente de " + " sr.outcome")
chamada antiga: Assertions.assertEquals(key2Pos, sr.getKeyPos())
nova chamada: assertEquals(key2Pos, sr.getKeyPos(), "Era esperado valores iguais, mas  key2Pos é diferente de " + result1612 + " <sr.getKeyPos()>")
chamada antiga: Assertions.assertEquals(SearchResult.Outcome.NOT_FOUND, sr.outcome)
nova chamada: assertEquals(SearchResult.Outcome.NOT_FOUND, sr.outcome, "Era esperado valores iguais, mas  SearchResult.Outcome.NOT_FOUND é diferente de " + " sr.outcome")
chamada antiga: Assertions.assertEquals(key1Pos, sr.getNextSmallerPos())
nova chamada: assertEquals(key1Pos, sr.getNextSmallerPos(), "Era esperado valores iguais, mas  key1Pos é diferente de " + result1613 + " <sr.getNextSmallerPos()>")
chamada antiga: Assertions.assertEquals(key2Pos, sr.getNextLargerPos())
nova chamada: assertEquals(key2Pos, sr.getNextLargerPos(), "Era esperado valores iguais, mas  key2Pos é diferente de " + result1614 + " <sr.getNextLargerPos()>")
chamada antiga: Assertions.assertEquals(SearchResult.Outcome.NOT_FOUND, sr.outcome)
nova chamada: assertEquals(SearchResult.Outcome.NOT_FOUND, sr.outcome, "Era esperado valores iguais, mas  SearchResult.Outcome.NOT_FOUND é diferente de " + " sr.outcome")
chamada antiga: Assertions.assertEquals(Node.ILLEGAL_IDX, sr.getNextSmallerPos())
nova chamada: assertEquals(Node.ILLEGAL_IDX, sr.getNextSmallerPos(), "Era esperado valores iguais, mas  Node.ILLEGAL_IDX é diferente de " + result1615 + " <sr.getNextSmallerPos()>")
chamada antiga: Assertions.assertEquals(key1Pos, sr.getNextLargerPos())
nova chamada: assertEquals(key1Pos, sr.getNextLargerPos(), "Era esperado valores iguais, mas  key1Pos é diferente de " + result1616 + " <sr.getNextLargerPos()>")
chamada antiga: Assertions.assertEquals(SearchResult.Outcome.NOT_FOUND, sr.outcome)
nova chamada: assertEquals(SearchResult.Outcome.NOT_FOUND, sr.outcome, "Era esperado valores iguais, mas  SearchResult.Outcome.NOT_FOUND é diferente de " + " sr.outcome")
chamada antiga: Assertions.assertEquals(key1Pos, sr.getNextSmallerPos())
nova chamada: assertEquals(key1Pos, sr.getNextSmallerPos(), "Era esperado valores iguais, mas  key1Pos é diferente de " + result1617 + " <sr.getNextSmallerPos()>")
chamada antiga: Assertions.assertEquals(key2Pos, sr.getNextLargerPos())
nova chamada: assertEquals(key2Pos, sr.getNextLargerPos(), "Era esperado valores iguais, mas  key2Pos é diferente de " + result1618 + " <sr.getNextLargerPos()>")
chamada antiga: Assertions.assertEquals(SearchResult.Outcome.NOT_FOUND, sr.outcome)
nova chamada: assertEquals(SearchResult.Outcome.NOT_FOUND, sr.outcome, "Era esperado valores iguais, mas  SearchResult.Outcome.NOT_FOUND é diferente de " + " sr.outcome")
chamada antiga: Assertions.assertEquals(key2Pos, sr.getNextSmallerPos())
nova chamada: assertEquals(key2Pos, sr.getNextSmallerPos(), "Era esperado valores iguais, mas  key2Pos é diferente de " + result1619 + " <sr.getNextSmallerPos()>")
chamada antiga: Assertions.assertEquals(Node.ILLEGAL_IDX, sr.getNextLargerPos())
nova chamada: assertEquals(Node.ILLEGAL_IDX, sr.getNextLargerPos(), "Era esperado valores iguais, mas  Node.ILLEGAL_IDX é diferente de " + result1620 + " <sr.getNextLargerPos()>")
chamada antiga: Assertions.assertEquals(SearchResult.Outcome.NOT_FOUND, sr.outcome)
nova chamada: assertEquals(SearchResult.Outcome.NOT_FOUND, sr.outcome, "Era esperado valores iguais, mas  SearchResult.Outcome.NOT_FOUND é diferente de " + " sr.outcome")
chamada antiga: Assertions.assertEquals(Node.ILLEGAL_IDX, sr.getNextSmallerPos())
nova chamada: assertEquals(Node.ILLEGAL_IDX, sr.getNextSmallerPos(), "Era esperado valores iguais, mas  Node.ILLEGAL_IDX é diferente de " + result1621 + " <sr.getNextSmallerPos()>")
chamada antiga: Assertions.assertEquals(SearchResult.Outcome.NOT_FOUND, sr.outcome)
nova chamada: assertEquals(SearchResult.Outcome.NOT_FOUND, sr.outcome, "Era esperado valores iguais, mas  SearchResult.Outcome.NOT_FOUND é diferente de " + " sr.outcome")
chamada antiga: Assertions.assertEquals(Node.ILLEGAL_IDX, sr.getNextLargerPos())
nova chamada: assertEquals(Node.ILLEGAL_IDX, sr.getNextLargerPos(), "Era esperado valores iguais, mas  Node.ILLEGAL_IDX é diferente de " + result1622 + " <sr.getNextLargerPos()>")
chamada antiga: Assertions.assertEquals(SearchResult.Outcome.NOT_FOUND, sr.outcome)
nova chamada: assertEquals(SearchResult.Outcome.NOT_FOUND, sr.outcome, "Era esperado valores iguais, mas  SearchResult.Outcome.NOT_FOUND é diferente de " + " sr.outcome")
chamada antiga: Assertions.assertEquals(Node.ILLEGAL_IDX, sr.getNextSmallerPos())
nova chamada: assertEquals(Node.ILLEGAL_IDX, sr.getNextSmallerPos(), "Era esperado valores iguais, mas  Node.ILLEGAL_IDX é diferente de " + result1623 + " <sr.getNextSmallerPos()>")
chamada antiga: Assertions.assertEquals(SearchResult.Outcome.NOT_FOUND, sr.outcome)
nova chamada: assertEquals(SearchResult.Outcome.NOT_FOUND, sr.outcome, "Era esperado valores iguais, mas  SearchResult.Outcome.NOT_FOUND é diferente de " + " sr.outcome")
chamada antiga: Assertions.assertEquals(Node.ILLEGAL_IDX, sr.getNextLargerPos())
nova chamada: assertEquals(Node.ILLEGAL_IDX, sr.getNextLargerPos(), "Era esperado valores iguais, mas  Node.ILLEGAL_IDX é diferente de " + result1624 + " <sr.getNextLargerPos()>")
chamada antiga: Assertions.assertEquals(Node.ILLEGAL_IDX, nodes.getNextSmallerPos(nodes.getMinPos()))
nova chamada: assertEquals(Node.ILLEGAL_IDX, nodes.getNextSmallerPos(nodes.getMinPos()), "Era esperado valores iguais, mas  Node.ILLEGAL_IDX é diferente de " + result1625 + " <nodes.getNextSmallerPos(nodes.getMinPos())>")
chamada antiga: Assertions.assertEquals(Node.ILLEGAL_IDX, nodes.getNextLargerPos(nodes.getMaxPos()))
nova chamada: assertEquals(Node.ILLEGAL_IDX, nodes.getNextLargerPos(nodes.getMaxPos()), "Era esperado valores iguais, mas  Node.ILLEGAL_IDX é diferente de " + result1626 + " <nodes.getNextLargerPos(nodes.getMaxPos())>")
chamada antiga: Assertions.assertEquals(Node.ILLEGAL_IDX, nodes.getNextSmallerPos(nodes.getMinPos()))
nova chamada: assertEquals(Node.ILLEGAL_IDX, nodes.getNextSmallerPos(nodes.getMinPos()), "Era esperado valores iguais, mas  Node.ILLEGAL_IDX é diferente de " + result1627 + " <nodes.getNextSmallerPos(nodes.getMinPos())>")
chamada antiga: Assertions.assertEquals(Node.ILLEGAL_IDX, nodes.getNextLargerPos(nodes.getMaxPos()))
nova chamada: assertEquals(Node.ILLEGAL_IDX, nodes.getNextLargerPos(nodes.getMaxPos()), "Era esperado valores iguais, mas  Node.ILLEGAL_IDX é diferente de " + result1628 + " <nodes.getNextLargerPos(nodes.getMaxPos())>")
chamada antiga: assertEquals(input, deserialised)
nova chamada: assertEquals(input, deserialised, "Era esperado valores iguais, mas  input é diferente de " + " deserialised")
chamada antiga: assertEquals(input, deserialised)
nova chamada: assertEquals(input, deserialised, "Era esperado valores iguais, mas  input é diferente de " + " deserialised")
chamada antiga: assertEquals(input, deserialised)
nova chamada: assertEquals(input, deserialised, "Era esperado valores iguais, mas  input é diferente de " + " deserialised")
chamada antiga: assertEquals(10 + serialisedSize, buffer.position())
nova chamada: assertEquals(10 + serialisedSize, buffer.position(), "Era esperado valores iguais, mas  10 + serialisedSize é diferente de " + result1629 + " <buffer.position()>")
chamada antiga: assertEquals(0, buffer.remaining())
nova chamada: assertEquals(0, buffer.remaining(), "Era esperado valores iguais, mas  0 é diferente de " + result1630 + " <buffer.remaining()>")
chamada antiga: assertEquals(input, roundtrip)
nova chamada: assertEquals(input, roundtrip, "Era esperado valores iguais, mas  input é diferente de " + " roundtrip")
chamada antiga: assertEquals(0, buffer.remaining())
nova chamada: assertEquals(0, buffer.remaining(), "Era esperado valores iguais, mas  0 é diferente de " + result1631 + " <buffer.remaining()>")
chamada antiga: assertEquals(input, roundtrip)
nova chamada: assertEquals(input, roundtrip, "Era esperado valores iguais, mas  input é diferente de " + " roundtrip")
chamada antiga: assertEquals(rb.getCardinality(), 200100)
nova chamada: assertEquals(rb.getCardinality(), 200100, "Era esperado valores iguais, mas " + result1632 + " <rb.getCardinality()> é diferente de " + " 200100")
chamada antiga: assertEquals(rb.getCardinality(), 200100)
nova chamada: assertEquals(rb.getCardinality(), 200100, "Era esperado valores iguais, mas " + result1633 + " <rb.getCardinality()> é diferente de " + " 200100")
chamada antiga: assertThrows(IOException.class, () -> deserialize(fileName))
nova chamada: assertThrows(IOException.class, () -> deserialize(fileName), "Era esperado que a exceção  IOException.class fosse lançada, mas não foi")
chamada antiga: assertEquals(superSet.containsAll(subSet), superSetRB.contains(subSetRB))
nova chamada: assertEquals(superSet.containsAll(subSet), superSetRB.contains(subSetRB), "Era esperado valores iguais, mas " + result1634 + " <superSet.containsAll(subSet)> é diferente de " + result1635 + " <superSetRB.contains(subSetRB)>")
chamada antiga: assertEquals(subSet.containsAll(superSet), subSetRB.contains(superSetRB))
nova chamada: assertEquals(subSet.containsAll(superSet), subSetRB.contains(superSetRB), "Era esperado valores iguais, mas " + result1636 + " <subSet.containsAll(superSet)> é diferente de " + result1637 + " <subSetRB.contains(superSetRB)>")
chamada antiga: assertEquals(3, it2.nextBatch(buffer))
nova chamada: assertEquals(3, it2.nextBatch(buffer), "Era esperado valores iguais, mas  3 é diferente de " + result1638 + " <it2.nextBatch(buffer)>")
chamada antiga: assertArrayEquals(c1, Arrays.copyOfRange(buffer, 0, 3))
nova chamada: assertArrayEquals(c1, Arrays.copyOfRange(buffer, 0, 3), "Era esperado arrays iguais, mas  c1 é diferente de " + result1639 + " <Arrays.copyOfRange(buffer, 0, 3)>")
chamada antiga: assertEquals(2, it2.nextBatch(buffer))
nova chamada: assertEquals(2, it2.nextBatch(buffer), "Era esperado valores iguais, mas  2 é diferente de " + result1640 + " <it2.nextBatch(buffer)>")
chamada antiga: assertArrayEquals(c2, Arrays.copyOfRange(buffer, 0, 2))
nova chamada: assertArrayEquals(c2, Arrays.copyOfRange(buffer, 0, 2), "Era esperado arrays iguais, mas  c2 é diferente de " + result1641 + " <Arrays.copyOfRange(buffer, 0, 2)>")
chamada antiga: assertEquals(0, it2.nextBatch(buffer))
nova chamada: assertEquals(0, it2.nextBatch(buffer), "Era esperado valores iguais, mas  0 é diferente de " + result1642 + " <it2.nextBatch(buffer)>")
chamada antiga: assertEquals(3, it1.nextBatch(buffer))
nova chamada: assertEquals(3, it1.nextBatch(buffer), "Era esperado valores iguais, mas  3 é diferente de " + result1643 + " <it1.nextBatch(buffer)>")
chamada antiga: assertArrayEquals(c1, Arrays.copyOfRange(buffer, 0, 3))
nova chamada: assertArrayEquals(c1, Arrays.copyOfRange(buffer, 0, 3), "Era esperado arrays iguais, mas  c1 é diferente de " + result1644 + " <Arrays.copyOfRange(buffer, 0, 3)>")
chamada antiga: assertEquals(2, it1.nextBatch(buffer))
nova chamada: assertEquals(2, it1.nextBatch(buffer), "Era esperado valores iguais, mas  2 é diferente de " + result1645 + " <it1.nextBatch(buffer)>")
chamada antiga: assertArrayEquals(c2, Arrays.copyOfRange(buffer, 0, 2))
nova chamada: assertArrayEquals(c2, Arrays.copyOfRange(buffer, 0, 2), "Era esperado arrays iguais, mas  c2 é diferente de " + result1646 + " <Arrays.copyOfRange(buffer, 0, 2)>")
chamada antiga: assertEquals(0, it1.nextBatch(buffer))
nova chamada: assertEquals(0, it1.nextBatch(buffer), "Era esperado valores iguais, mas  0 é diferente de " + result1647 + " <it1.nextBatch(buffer)>")
chamada antiga: Assertions.assertTrue(node instanceof Node48)
nova chamada: assertTrue(node instanceof Node48, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(nodes instanceof Node256)
nova chamada: assertTrue(nodes instanceof Node256, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(nodes instanceof Node256)
nova chamada: assertTrue(nodes instanceof Node256, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(nodes instanceof Node256)
nova chamada: assertTrue(nodes instanceof Node256, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(nodes instanceof Node256)
nova chamada: assertTrue(nodes instanceof Node256, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(degenerativeNode instanceof Node4)
nova chamada: assertTrue(degenerativeNode instanceof Node4, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(node16.getChildPos(key) == 4)
nova chamada: assertTrue(node16.getChildPos(key) == 4, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(node16.getChildKey(4) == key)
nova chamada: assertTrue(node16.getChildKey(4) == key, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(node instanceof Node48)
nova chamada: assertTrue(node instanceof Node48, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(nodes instanceof Node16)
nova chamada: assertTrue(nodes instanceof Node16, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(nodes instanceof Node16)
nova chamada: assertTrue(nodes instanceof Node16, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(nodes instanceof Node16)
nova chamada: assertTrue(nodes instanceof Node16, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(nodes instanceof Node16)
nova chamada: assertTrue(nodes instanceof Node16, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(nodes instanceof Node48)
nova chamada: assertTrue(nodes instanceof Node48, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(nodes instanceof Node48)
nova chamada: assertTrue(nodes instanceof Node48, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(node instanceof Node256)
nova chamada: assertTrue(node instanceof Node256, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(node instanceof Node16)
nova chamada: assertTrue(node instanceof Node16, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(nodes instanceof Node48)
nova chamada: assertTrue(nodes instanceof Node48, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(nodes instanceof Node48)
nova chamada: assertTrue(nodes instanceof Node48, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(nodes instanceof Node48)
nova chamada: assertTrue(nodes instanceof Node48, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(node4.getMaxPos() == 0)
nova chamada: assertTrue(node4.getMaxPos() == 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(node4.getMinPos() == 0)
nova chamada: assertTrue(node4.getMinPos() == 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(node4.getChildPos(key1) == 0)
nova chamada: assertTrue(node4.getChildPos(key1) == 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(node4.getChildKey(0) == key1)
nova chamada: assertTrue(node4.getChildKey(0) == key1, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(node4.getChildPos(key2) == 0)
nova chamada: assertTrue(node4.getChildPos(key2) == 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(node4.getChildPos(key1) == 1)
nova chamada: assertTrue(node4.getChildPos(key1) == 1, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(node4.getChildKey(0) == key2)
nova chamada: assertTrue(node4.getChildKey(0) == key2, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(node4.getChildPos(key3) == 2)
nova chamada: assertTrue(node4.getChildPos(key3) == 2, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(node4.getChildKey(2) == key3)
nova chamada: assertTrue(node4.getChildKey(2) == key3, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(node4.getChildPos(key2) == 0)
nova chamada: assertTrue(node4.getChildPos(key2) == 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(node4.getChildPos(key3) == 1)
nova chamada: assertTrue(node4.getChildPos(key3) == 1, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(node4.getChildKey(1) == key3)
nova chamada: assertTrue(node4.getChildKey(1) == key3, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(node4.getChildPos(key1) == Node.ILLEGAL_IDX)
nova chamada: assertTrue(node4.getChildPos(key1) == Node.ILLEGAL_IDX, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(node instanceof LeafNode)
nova chamada: assertTrue(node instanceof LeafNode, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(sr.hasKeyPos())
nova chamada: assertTrue(sr.hasKeyPos(), "Era esperado verdadeiro, mas " + result1648 + " <sr.hasKeyPos()> é falso")
chamada antiga: Assertions.assertTrue((key1 + 1) < (key2 - 1))
nova chamada: assertTrue((key1 + 1) < (key2 - 1), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(node instanceof Node4)
nova chamada: assertTrue(node instanceof Node4, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(nodes instanceof Node4)
nova chamada: assertTrue(nodes instanceof Node4, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(nodes instanceof Node4)
nova chamada: assertTrue(nodes instanceof Node4, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(nodes instanceof Node4)
nova chamada: assertTrue(nodes instanceof Node4, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assertions.assertTrue(nodes instanceof Node4)
nova chamada: assertTrue(nodes instanceof Node4, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(string.contains(BitmapStatistics.class.getSimpleName()))
nova chamada: assertTrue(string.contains(BitmapStatistics.class.getSimpleName()), "Era esperado verdadeiro, mas " + result1649 + " <string.contains(BitmapStatistics.class.getSimpleName())> é falso")
chamada antiga: assertTrue(Double.isNaN(bitmapFraction))
nova chamada: assertTrue(Double.isNaN(bitmapFraction), "Era esperado verdadeiro, mas " + result1650 + " <Double.isNaN(bitmapFraction)> é falso")
chamada antiga: assertEquals(Long.MAX_VALUE, averageArraysCardinality)
nova chamada: assertEquals(Long.MAX_VALUE, averageArraysCardinality, "Era esperado valores iguais, mas  Long.MAX_VALUE é diferente de " + " averageArraysCardinality")
chamada antiga: Assertions.assertFalse(sr.hasKeyPos())
nova chamada: assertFalse(sr.hasKeyPos(), "Era esperado falso, mas " + result1651 + " <sr.hasKeyPos()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(sr.hasKeyPos())
nova chamada: assertFalse(sr.hasKeyPos(), "Era esperado falso, mas " + result1652 + " <sr.hasKeyPos()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(sr.hasKeyPos())
nova chamada: assertFalse(sr.hasKeyPos(), "Era esperado falso, mas " + result1653 + " <sr.hasKeyPos()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(sr.hasKeyPos())
nova chamada: assertFalse(sr.hasKeyPos(), "Era esperado falso, mas " + result1654 + " <sr.hasKeyPos()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(sr.hasKeyPos())
nova chamada: assertFalse(sr.hasKeyPos(), "Era esperado falso, mas " + result1655 + " <sr.hasKeyPos()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(sr.hasKeyPos())
nova chamada: assertFalse(sr.hasKeyPos(), "Era esperado falso, mas " + result1656 + " <sr.hasKeyPos()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(sr.hasKeyPos())
nova chamada: assertFalse(sr.hasKeyPos(), "Era esperado falso, mas " + result1657 + " <sr.hasKeyPos()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(sr.hasKeyPos())
nova chamada: assertFalse(sr.hasKeyPos(), "Era esperado falso, mas " + result1658 + " <sr.hasKeyPos()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(sr.hasKeyPos())
nova chamada: assertFalse(sr.hasKeyPos(), "Era esperado falso, mas " + result1659 + " <sr.hasKeyPos()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(sr.hasKeyPos())
nova chamada: assertFalse(sr.hasKeyPos(), "Era esperado falso, mas " + result1660 + " <sr.hasKeyPos()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(sr.hasKeyPos())
nova chamada: assertFalse(sr.hasKeyPos(), "Era esperado falso, mas " + result1661 + " <sr.hasKeyPos()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(sr.hasKeyPos())
nova chamada: assertFalse(sr.hasKeyPos(), "Era esperado falso, mas " + result1662 + " <sr.hasKeyPos()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(sr.hasKeyPos())
nova chamada: assertFalse(sr.hasKeyPos(), "Era esperado falso, mas " + result1663 + " <sr.hasKeyPos()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(sr.hasKeyPos())
nova chamada: assertFalse(sr.hasKeyPos(), "Era esperado falso, mas " + result1664 + " <sr.hasKeyPos()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(sr.hasKeyPos())
nova chamada: assertFalse(sr.hasKeyPos(), "Era esperado falso, mas " + result1665 + " <sr.hasKeyPos()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(sr.hasKeyPos())
nova chamada: assertFalse(sr.hasKeyPos(), "Era esperado falso, mas " + result1666 + " <sr.hasKeyPos()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(sr.hasKeyPos())
nova chamada: assertFalse(sr.hasKeyPos(), "Era esperado falso, mas " + result1667 + " <sr.hasKeyPos()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(sr.hasKeyPos())
nova chamada: assertFalse(sr.hasKeyPos(), "Era esperado falso, mas " + result1668 + " <sr.hasKeyPos()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(sr.hasKeyPos())
nova chamada: assertFalse(sr.hasKeyPos(), "Era esperado falso, mas " + result1669 + " <sr.hasKeyPos()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(sr.hasKeyPos())
nova chamada: assertFalse(sr.hasKeyPos(), "Era esperado falso, mas " + result1670 + " <sr.hasKeyPos()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(sr.hasKeyPos())
nova chamada: assertFalse(sr.hasKeyPos(), "Era esperado falso, mas " + result1671 + " <sr.hasKeyPos()> é verdadeiro ")
chamada antiga: Assertions.assertFalse(sr.hasKeyPos())
nova chamada: assertFalse(sr.hasKeyPos(), "Era esperado falso, mas " + result1672 + " <sr.hasKeyPos()> é verdadeiro ")
chamada antiga: assertTrue(recommendation.contains(".initialCapacity(2005)"))
nova chamada: assertTrue(recommendation.contains(".initialCapacity(2005)"), "Era esperado verdadeiro, mas " + result1673 + " <recommendation.contains('.initialCapacity(2005)')> é falso")
chamada antiga: assertTrue(recommendation.contains(".optimiseForArrays()"))
nova chamada: assertTrue(recommendation.contains(".optimiseForArrays()"), "Era esperado verdadeiro, mas " + result1674 + " <recommendation.contains('.optimiseForArrays()')> é falso")
chamada antiga: assertTrue(recommendation.contains(".expectedContainerSize(10)"))
nova chamada: assertTrue(recommendation.contains(".expectedContainerSize(10)"), "Era esperado verdadeiro, mas " + result1675 + " <recommendation.contains('.expectedContainerSize(10)')> é falso")
chamada antiga: assertTrue(recommendation.contains(".constantMemory()"))
nova chamada: assertTrue(recommendation.contains(".constantMemory()"), "Era esperado verdadeiro, mas " + result1676 + " <recommendation.contains('.constantMemory()')> é falso")
chamada antiga: assertTrue(recommendation.contains(".initialCapacity(718)"))
nova chamada: assertTrue(recommendation.contains(".initialCapacity(718)"), "Era esperado verdadeiro, mas " + result1677 + " <recommendation.contains('.initialCapacity(718)')> é falso")
chamada antiga: assertTrue(recommendation.contains(".optimiseForRuns()"))
nova chamada: assertTrue(recommendation.contains(".optimiseForRuns()"), "Era esperado verdadeiro, mas " + result1678 + " <recommendation.contains('.optimiseForRuns()')> é falso")
chamada antiga: assertTrue(recommendation.contains(".initialCapacity(250)"))
nova chamada: assertTrue(recommendation.contains(".initialCapacity(250)"), "Era esperado verdadeiro, mas " + result1679 + " <recommendation.contains('.initialCapacity(250)')> é falso")
chamada antiga: assertTrue(recommendation.contains(".constantMemory()"))
nova chamada: assertTrue(recommendation.contains(".constantMemory()"), "Era esperado verdadeiro, mas " + result1680 + " <recommendation.contains('.constantMemory()')> é falso")
chamada antiga: assertTrue(recommendation.contains(".initialCapacity(526)"))
nova chamada: assertTrue(recommendation.contains(".initialCapacity(526)"), "Era esperado verdadeiro, mas " + result1681 + " <recommendation.contains('.initialCapacity(526)')> é falso")
chamada antiga: assertTrue(recommendation.contains(".constantMemory()"))
nova chamada: assertTrue(recommendation.contains(".constantMemory()"), "Era esperado verdadeiro, mas " + result1682 + " <recommendation.contains('.constantMemory()')> é falso")
chamada antiga: assertFalse(recommendation.contains(".initialCapacity"))
nova chamada: assertFalse(recommendation.contains(".initialCapacity"), "Era esperado falso, mas " + result1683 + " <recommendation.contains('.initialCapacity')> é verdadeiro ")
chamada antiga: assertEquals(expected, result)
nova chamada: assertEquals(expected, result, "Era esperado valores iguais, mas  expected é diferente de " + " result")
chamada antiga: assertEquals(totalBitmaps, result.getBitmapsCount())
nova chamada: assertEquals(totalBitmaps, result.getBitmapsCount(), "Era esperado valores iguais, mas  totalBitmaps é diferente de " + result1684 + " <result.getBitmapsCount()>")
chamada antiga: Assertions.assertNotEquals(Node.ILLEGAL_IDX, nodes.getNextSmallerPos(74))
nova chamada: assertNotEquals(Node.ILLEGAL_IDX, nodes.getNextSmallerPos(74), "Era esperado valores diferentes, mas  Node.ILLEGAL_IDX é igual a " + result1685 + " <nodes.getNextSmallerPos(74)>")
chamada antiga: Assertions.assertNotEquals(Node.ILLEGAL_IDX, nodes.getNextLargerPos(60))
nova chamada: assertNotEquals(Node.ILLEGAL_IDX, nodes.getNextLargerPos(60), "Era esperado valores diferentes, mas  Node.ILLEGAL_IDX é igual a " + result1686 + " <nodes.getNextLargerPos(60)>")
chamada antiga: assertEquals(new BitmapContainer().getContainerName(), Container.ContainerNames[0])
nova chamada: assertEquals(new BitmapContainer().getContainerName(), Container.ContainerNames[0], "Era esperado valores iguais, mas " + result1687 + " <new BitmapContainer().getContainerName()> é diferente de " + " Container.ContainerNames[0]")
chamada antiga: assertEquals(new ArrayContainer().getContainerName(), Container.ContainerNames[1])
nova chamada: assertEquals(new ArrayContainer().getContainerName(), Container.ContainerNames[1], "Era esperado valores iguais, mas " + result1688 + " <new ArrayContainer().getContainerName()> é diferente de " + " Container.ContainerNames[1]")
chamada antiga: assertEquals(new RunContainer().getContainerName(), Container.ContainerNames[2])
nova chamada: assertEquals(new RunContainer().getContainerName(), Container.ContainerNames[2], "Era esperado valores iguais, mas " + result1689 + " <new RunContainer().getContainerName()> é diferente de " + " Container.ContainerNames[2]")
chamada antiga: assertTrue(checkContent(c, s))
nova chamada: assertTrue(checkContent(c, s), "Era esperado verdadeiro, mas " + result1690 + " <checkContent(c, s)> é falso")
chamada antiga: assertTrue(c1 instanceof ArrayContainer)
nova chamada: assertTrue(c1 instanceof ArrayContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(14, c1.getCardinality())
nova chamada: assertEquals(14, c1.getCardinality(), "Era esperado valores iguais, mas  14 é diferente de " + result1691 + " <c1.getCardinality()>")
chamada antiga: assertTrue(checkContent(c1, new char[] { 0, 2, 4, (char) 65190, (char) 65191, (char) 65192, (char) 65193, (char) 65194, (char) 65195, (char) 65196, (char) 65197, (char) 65198, (char) 65199, (char) 65200 }))
nova chamada: assertTrue(checkContent(c1, new char[] { 0, 2, 4, (char) 65190, (char) 65191, (char) 65192, (char) 65193, (char) 65194, (char) 65195, (char) 65196, (char) 65197, (char) 65198, (char) 65199, (char) 65200 }), "Era esperado verdadeiro, mas " + result1692 + " <checkContent(c1, new char[] { 0, 2, 4, (char) 65190, (char) 65191, (char) 65192, (char) 65193, (char) 65194, (char) 65195, (char) 65196, (char) 65197, (char) 65198, (char) 65199, (char) 65200 })> é falso")
chamada antiga: assertTrue(checkContent(c, content))
nova chamada: assertTrue(checkContent(c, content), "Era esperado verdadeiro, mas " + result1693 + " <checkContent(c, content)> é falso")
chamada antiga: assertTrue(c.contains((char) 3) && !c.contains((char) 4))
nova chamada: assertTrue(c.contains((char) 3) && !c.contains((char) 4), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(32768, c.getCardinality())
nova chamada: assertEquals(32768, c.getCardinality(), "Era esperado valores iguais, mas  32768 é diferente de " + result1694 + " <c.getCardinality()>")
chamada antiga: assertTrue(c instanceof ArrayContainer)
nova chamada: assertTrue(c instanceof ArrayContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(999 - 4 + 1 - 3 + 2, c.getCardinality())
nova chamada: assertEquals(999 - 4 + 1 - 3 + 2, c.getCardinality(), "Era esperado valores iguais, mas  999 - 4 + 1 - 3 + 2 é diferente de " + result1695 + " <c.getCardinality()>")
chamada antiga: assertTrue(checkContent(c, content))
nova chamada: assertTrue(checkContent(c, content), "Era esperado verdadeiro, mas " + result1696 + " <checkContent(c, content)> é falso")
chamada antiga: assertTrue(c instanceof BitmapContainer)
nova chamada: assertTrue(c instanceof BitmapContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(31773, c.getCardinality())
nova chamada: assertEquals(31773, c.getCardinality(), "Era esperado valores iguais, mas  31773 é diferente de " + result1697 + " <c.getCardinality()>")
chamada antiga: assertTrue(c instanceof BitmapContainer)
nova chamada: assertTrue(c instanceof BitmapContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(checkContent(c, content))
nova chamada: assertTrue(checkContent(c, content), "Era esperado verdadeiro, mas " + result1698 + " <checkContent(c, content)> é falso")
chamada antiga: assertTrue(c instanceof BitmapContainer)
nova chamada: assertTrue(c instanceof BitmapContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(32762, c.getCardinality())
nova chamada: assertEquals(32762, c.getCardinality(), "Era esperado valores iguais, mas  32762 é diferente de " + result1699 + " <c.getCardinality()>")
chamada antiga: assertTrue(c instanceof BitmapContainer)
nova chamada: assertTrue(c instanceof BitmapContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(checkContent(c, content))
nova chamada: assertTrue(checkContent(c, content), "Era esperado verdadeiro, mas " + result1700 + " <checkContent(c, content)> é falso")
chamada antiga: assertEquals(1773, c.getCardinality())
nova chamada: assertEquals(1773, c.getCardinality(), "Era esperado valores iguais, mas  1773 é diferente de " + result1701 + " <c.getCardinality()>")
chamada antiga: assertTrue(checkContent(c, content))
nova chamada: assertTrue(checkContent(c, content), "Era esperado verdadeiro, mas " + result1702 + " <checkContent(c, content)> é falso")
chamada antiga: assertTrue(c instanceof ArrayContainer)
nova chamada: assertTrue(c instanceof ArrayContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(10, c.getCardinality())
nova chamada: assertEquals(10, c.getCardinality(), "Era esperado valores iguais, mas  10 é diferente de " + result1703 + " <c.getCardinality()>")
chamada antiga: assertTrue(c instanceof ArrayContainer)
nova chamada: assertTrue(c instanceof ArrayContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(checkContent(c, content))
nova chamada: assertTrue(checkContent(c, content), "Era esperado verdadeiro, mas " + result1704 + " <checkContent(c, content)> é falso")
chamada antiga: assertTrue(checkContent(c1, s))
nova chamada: assertTrue(checkContent(c1, s), "Era esperado verdadeiro, mas " + result1705 + " <checkContent(c1, s)> é falso")
chamada antiga: assertTrue(checkContent(c, content))
nova chamada: assertTrue(checkContent(c, content), "Era esperado verdadeiro, mas " + result1706 + " <checkContent(c, content)> é falso")
chamada antiga: assertTrue(c1 instanceof ArrayContainer)
nova chamada: assertTrue(c1 instanceof ArrayContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(40 + 58, c1.getCardinality())
nova chamada: assertEquals(40 + 58, c1.getCardinality(), "Era esperado valores iguais, mas  40 + 58 é diferente de " + result1707 + " <c1.getCardinality()>")
chamada antiga: assertTrue(checkContent(c1, rightAns))
nova chamada: assertTrue(checkContent(c1, rightAns), "Era esperado verdadeiro, mas " + result1708 + " <checkContent(c1, rightAns)> é falso")
chamada antiga: assertTrue(c1 instanceof ArrayContainer)
nova chamada: assertTrue(c1 instanceof ArrayContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(40 + 58, c1.getCardinality())
nova chamada: assertEquals(40 + 58, c1.getCardinality(), "Era esperado valores iguais, mas  40 + 58 é diferente de " + result1709 + " <c1.getCardinality()>")
chamada antiga: assertTrue(checkContent(c1, rightAns))
nova chamada: assertTrue(checkContent(c1, rightAns), "Era esperado verdadeiro, mas " + result1710 + " <checkContent(c1, rightAns)> é falso")
chamada antiga: assertTrue(checkContent(c2, content))
nova chamada: assertTrue(checkContent(c2, content), "Era esperado verdadeiro, mas " + result1711 + " <checkContent(c2, content)> é falso")
chamada antiga: assertTrue(c1.contains((char) 3) && !c1.contains((char) 4))
nova chamada: assertTrue(c1.contains((char) 3) && !c1.contains((char) 4), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(32768, c1.getCardinality())
nova chamada: assertEquals(32768, c1.getCardinality(), "Era esperado valores iguais, mas  32768 é diferente de " + result1712 + " <c1.getCardinality()>")
chamada antiga: assertTrue(c1 instanceof ArrayContainer)
nova chamada: assertTrue(c1 instanceof ArrayContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(999 - 4 + 1 - 3 + 2, c1.getCardinality())
nova chamada: assertEquals(999 - 4 + 1 - 3 + 2, c1.getCardinality(), "Era esperado valores iguais, mas  999 - 4 + 1 - 3 + 2 é diferente de " + result1713 + " <c1.getCardinality()>")
chamada antiga: assertTrue(checkContent(c2, content))
nova chamada: assertTrue(checkContent(c2, content), "Era esperado verdadeiro, mas " + result1714 + " <checkContent(c2, content)> é falso")
chamada antiga: assertTrue(c1 instanceof BitmapContainer)
nova chamada: assertTrue(c1 instanceof BitmapContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(31773, c1.getCardinality())
nova chamada: assertEquals(31773, c1.getCardinality(), "Era esperado valores iguais, mas  31773 é diferente de " + result1715 + " <c1.getCardinality()>")
chamada antiga: assertTrue(c2 instanceof BitmapContainer)
nova chamada: assertTrue(c2 instanceof BitmapContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(checkContent(c2, content))
nova chamada: assertTrue(checkContent(c2, content), "Era esperado verdadeiro, mas " + result1716 + " <checkContent(c2, content)> é falso")
chamada antiga: assertTrue(c1 instanceof BitmapContainer)
nova chamada: assertTrue(c1 instanceof BitmapContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(32762, c1.getCardinality())
nova chamada: assertEquals(32762, c1.getCardinality(), "Era esperado valores iguais, mas  32762 é diferente de " + result1717 + " <c1.getCardinality()>")
chamada antiga: assertTrue(c2 instanceof BitmapContainer)
nova chamada: assertTrue(c2 instanceof BitmapContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(checkContent(c2, content))
nova chamada: assertTrue(checkContent(c2, content), "Era esperado verdadeiro, mas " + result1718 + " <checkContent(c2, content)> é falso")
chamada antiga: assertEquals(1773, c1.getCardinality())
nova chamada: assertEquals(1773, c1.getCardinality(), "Era esperado valores iguais, mas  1773 é diferente de " + result1719 + " <c1.getCardinality()>")
chamada antiga: assertTrue(checkContent(c2, content))
nova chamada: assertTrue(checkContent(c2, content), "Era esperado verdadeiro, mas " + result1720 + " <checkContent(c2, content)> é falso")
chamada antiga: assertTrue(c1 instanceof BitmapContainer)
nova chamada: assertTrue(c1 instanceof BitmapContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(32773, c1.getCardinality())
nova chamada: assertEquals(32773, c1.getCardinality(), "Era esperado valores iguais, mas  32773 é diferente de " + result1721 + " <c1.getCardinality()>")
chamada antiga: assertTrue(c2 instanceof BitmapContainer)
nova chamada: assertTrue(c2 instanceof BitmapContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(checkContent(c2, content))
nova chamada: assertTrue(checkContent(c2, content), "Era esperado verdadeiro, mas " + result1722 + " <checkContent(c2, content)> é falso")
chamada antiga: assertTrue(c1 instanceof BitmapContainer)
nova chamada: assertTrue(c1 instanceof BitmapContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(32438, c1.getCardinality())
nova chamada: assertEquals(32438, c1.getCardinality(), "Era esperado valores iguais, mas  32438 é diferente de " + result1723 + " <c1.getCardinality()>")
chamada antiga: assertTrue(c2 instanceof BitmapContainer)
nova chamada: assertTrue(c2 instanceof BitmapContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(checkContent(c2, content))
nova chamada: assertTrue(checkContent(c2, content), "Era esperado verdadeiro, mas " + result1724 + " <checkContent(c2, content)> é falso")
chamada antiga: assertEquals(rc.numberOfRuns(), ac.numberOfRuns())
nova chamada: assertEquals(rc.numberOfRuns(), ac.numberOfRuns(), "Era esperado valores iguais, mas " + result1725 + " <rc.numberOfRuns()> é diferente de " + result1726 + " <ac.numberOfRuns()>")
chamada antiga: assertEquals(rc.numberOfRuns(), bc.numberOfRuns())
nova chamada: assertEquals(rc.numberOfRuns(), bc.numberOfRuns(), "Era esperado valores iguais, mas " + result1727 + " <rc.numberOfRuns()> é diferente de " + result1728 + " <bc.numberOfRuns()>")
chamada antiga: assertTrue(checkContent(result, new char[] { 1, 3, 5, (char) 50000, (char) 50001 }))
nova chamada: assertTrue(checkContent(result, new char[] { 1, 3, 5, (char) 50000, (char) 50001 }), "Era esperado verdadeiro, mas " + result1729 + " <checkContent(result, new char[] { 1, 3, 5, (char) 50000, (char) 50001 })> é falso")
chamada antiga: assertTrue(checkContent(result, new char[] { 1, 4, 5, (char) 50000, (char) 50002, (char) 50003, (char) 50004 }))
nova chamada: assertTrue(checkContent(result, new char[] { 1, 4, 5, (char) 50000, (char) 50002, (char) 50003, (char) 50004 }), "Era esperado verdadeiro, mas " + result1730 + " <checkContent(result, new char[] { 1, 4, 5, (char) 50000, (char) 50002, (char) 50003, (char) 50004 })> é falso")
chamada antiga: assertTrue(checkContent(result, new char[] { 1, 3, 4, 5, (char) 50000, (char) 50001, (char) 50002, (char) 50003, (char) 50004 }))
nova chamada: assertTrue(checkContent(result, new char[] { 1, 3, 4, 5, (char) 50000, (char) 50001, (char) 50002, (char) 50003, (char) 50004 }), "Era esperado verdadeiro, mas " + result1731 + " <checkContent(result, new char[] { 1, 3, 4, 5, (char) 50000, (char) 50001, (char) 50002, (char) 50003, (char) 50004 })> é falso")
chamada antiga: assertTrue(checkContent(result, new char[] { 1, 3, 4, 5, (char) 50000, (char) 50001, (char) 50002, (char) 50003, (char) 50004, (char) 50011 }))
nova chamada: assertTrue(checkContent(result, new char[] { 1, 3, 4, 5, (char) 50000, (char) 50001, (char) 50002, (char) 50003, (char) 50004, (char) 50011 }), "Era esperado verdadeiro, mas " + result1732 + " <checkContent(result, new char[] { 1, 3, 4, 5, (char) 50000, (char) 50001, (char) 50002, (char) 50003, (char) 50004, (char) 50011 })> é falso")
chamada antiga: assertTrue(checkContent(result, new char[] { 1, 3, 4, 5, (char) 50000, (char) 50001 }))
nova chamada: assertTrue(checkContent(result, new char[] { 1, 3, 4, 5, (char) 50000, (char) 50001 }), "Era esperado verdadeiro, mas " + result1733 + " <checkContent(result, new char[] { 1, 3, 4, 5, (char) 50000, (char) 50001 })> é falso")
chamada antiga: assertEquals(10 - 4 + 1, c.getCardinality())
nova chamada: assertEquals(10 - 4 + 1, c.getCardinality(), "Era esperado valores iguais, mas  10 - 4 + 1 é diferente de " + result1734 + " <c.getCardinality()>")
chamada antiga: assertTrue(checkContent(c, new char[] { 4, 5, 6, 7, 8, 9, 10 }))
nova chamada: assertTrue(checkContent(c, new char[] { 4, 5, 6, 7, 8, 9, 10 }), "Era esperado verdadeiro, mas " + result1735 + " <checkContent(c, new char[] { 4, 5, 6, 7, 8, 9, 10 })> é falso")
chamada antiga: assertEquals(35000 - 1000 + 1, c.getCardinality())
nova chamada: assertEquals(35000 - 1000 + 1, c.getCardinality(), "Era esperado valores iguais, mas  35000 - 1000 + 1 é diferente de " + result1736 + " <c.getCardinality()>")
chamada antiga: assertTrue(checkContent(c, s))
nova chamada: assertTrue(checkContent(c, s), "Era esperado verdadeiro, mas " + result1737 + " <checkContent(c, s)> é falso")
chamada antiga: assertTrue(c instanceof RunContainer)
nova chamada: assertTrue(c instanceof RunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(ac, c)
nova chamada: assertEquals(ac, c, "Era esperado valores iguais, mas  ac é diferente de " + " c")
chamada antiga: assertTrue(c instanceof ArrayContainer)
nova chamada: assertTrue(c instanceof ArrayContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertSame(ac, c)
nova chamada: assertSame(ac, c, "Era esperado objetos iguais, mas  ac é diferente de " + " c")
chamada antiga: assertTrue(c instanceof RunContainer)
nova chamada: assertTrue(c instanceof RunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(bc, c)
nova chamada: assertEquals(bc, c, "Era esperado valores iguais, mas  bc é diferente de " + " c")
chamada antiga: assertTrue(c instanceof BitmapContainer)
nova chamada: assertTrue(c instanceof BitmapContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertSame(c, bc)
nova chamada: assertSame(c, bc, "Era esperado objetos iguais, mas  c é diferente de " + " bc")
chamada antiga: assertTrue(c instanceof RunContainer)
nova chamada: assertTrue(c instanceof RunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertSame(c, rc)
nova chamada: assertSame(c, rc, "Era esperado objetos iguais, mas  c é diferente de " + " rc")
chamada antiga: assertTrue(c instanceof ArrayContainer)
nova chamada: assertTrue(c instanceof ArrayContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(c, rc)
nova chamada: assertEquals(c, rc, "Era esperado valores iguais, mas  c é diferente de " + " rc")
chamada antiga: assertTrue(c instanceof BitmapContainer)
nova chamada: assertTrue(c instanceof BitmapContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(c, rc)
nova chamada: assertEquals(c, rc, "Era esperado valores iguais, mas  c é diferente de " + " rc")
chamada antiga: assertEquals(c.getCardinality(), 4096)
nova chamada: assertEquals(c.getCardinality(), 4096, "Era esperado valores iguais, mas " + result1738 + " <c.getCardinality()> é diferente de " + " 4096")
chamada antiga: assertTrue(c instanceof ArrayContainer)
nova chamada: assertTrue(c instanceof ArrayContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(c.getCardinality(), 4096)
nova chamada: assertEquals(c.getCardinality(), 4096, "Era esperado valores iguais, mas " + result1739 + " <c.getCardinality()> é diferente de " + " 4096")
chamada antiga: assertTrue(c instanceof ArrayContainer)
nova chamada: assertTrue(c instanceof ArrayContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(c.getCardinality(), 4097)
nova chamada: assertEquals(c.getCardinality(), 4097, "Era esperado valores iguais, mas " + result1740 + " <c.getCardinality()> é diferente de " + " 4097")
chamada antiga: assertTrue(c instanceof BitmapContainer)
nova chamada: assertTrue(c instanceof BitmapContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(c.getCardinality(), 4096)
nova chamada: assertEquals(c.getCardinality(), 4096, "Era esperado valores iguais, mas " + result1741 + " <c.getCardinality()> é diferente de " + " 4096")
chamada antiga: assertTrue(c instanceof ArrayContainer)
nova chamada: assertTrue(c instanceof ArrayContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(checkContent(result, new char[] { 1, 3, 5, (char) 50000, (char) 50001 }))
nova chamada: assertTrue(checkContent(result, new char[] { 1, 3, 5, (char) 50000, (char) 50001 }), "Era esperado verdadeiro, mas " + result1742 + " <checkContent(result, new char[] { 1, 3, 5, (char) 50000, (char) 50001 })> é falso")
chamada antiga: assertTrue(checkContent(result, new char[] { 1, 4, 5, (char) 50000, (char) 50002, (char) 50003, (char) 50004 }))
nova chamada: assertTrue(checkContent(result, new char[] { 1, 4, 5, (char) 50000, (char) 50002, (char) 50003, (char) 50004 }), "Era esperado verdadeiro, mas " + result1743 + " <checkContent(result, new char[] { 1, 4, 5, (char) 50000, (char) 50002, (char) 50003, (char) 50004 })> é falso")
chamada antiga: assertTrue(checkContent(result, new char[] { 3, 4, (char) 50001, (char) 50002, (char) 50003, (char) 50004 }))
nova chamada: assertTrue(checkContent(result, new char[] { 3, 4, (char) 50001, (char) 50002, (char) 50003, (char) 50004 }), "Era esperado verdadeiro, mas " + result1744 + " <checkContent(result, new char[] { 3, 4, (char) 50001, (char) 50002, (char) 50003, (char) 50004 })> é falso")
chamada antiga: assertEquals(expected, ac.toString())
nova chamada: assertEquals(expected, ac.toString(), "Era esperado valores iguais, mas  expected é diferente de " + result1745 + " <ac.toString()>")
chamada antiga: assertEquals(expected, bc.toString())
nova chamada: assertEquals(expected, bc.toString(), "Era esperado valores iguais, mas  expected é diferente de " + result1746 + " <bc.toString()>")
chamada antiga: assertEquals(expected, normalizedRCstr)
nova chamada: assertEquals(expected, normalizedRCstr, "Era esperado valores iguais, mas  expected é diferente de " + " normalizedRCstr")
chamada antiga: assertTrue(checkContent(result, new char[] { 3, 4, (char) 50001, (char) 50002, (char) 50003, (char) 50004, (char) 50011 }))
nova chamada: assertTrue(checkContent(result, new char[] { 3, 4, (char) 50001, (char) 50002, (char) 50003, (char) 50004, (char) 50011 }), "Era esperado verdadeiro, mas " + result1747 + " <checkContent(result, new char[] { 3, 4, (char) 50001, (char) 50002, (char) 50003, (char) 50004, (char) 50011 })> é falso")
chamada antiga: assertTrue(checkContent(result, new char[] { 3, 4 }))
nova chamada: assertTrue(checkContent(result, new char[] { 3, 4 }), "Era esperado verdadeiro, mas " + result1748 + " <checkContent(result, new char[] { 3, 4 })> é falso")
chamada antiga: assertEquals(container.getCardinality(), data.length)
nova chamada: assertEquals(container.getCardinality(), data.length, "Era esperado valores iguais, mas " + result1749 + " <container.getCardinality()> é diferente de " + " data.length")
chamada antiga: assertEquals(expected.length, consumer.getNumberOfValuesConsumed())
nova chamada: assertEquals(expected.length, consumer.getNumberOfValuesConsumed(), "Era esperado valores iguais, mas  expected.length é diferente de " + result1750 + " <consumer.getNumberOfValuesConsumed()>")
chamada antiga: assertEquals(value, expected++)
nova chamada: assertEquals(value, expected++, "Era esperado valores iguais, mas  value é diferente de " + " expected++")
chamada antiga: assertEquals(cardinality.value, bitmap.getCardinality())
nova chamada: assertEquals(cardinality.value, bitmap.getCardinality(), "Era esperado valores iguais, mas  cardinality.value é diferente de " + result1751 + " <bitmap.getCardinality()>")
chamada antiga: assertEquals(value, expected)
nova chamada: assertEquals(value, expected, "Era esperado valores iguais, mas  value é diferente de " + " expected")
chamada antiga: assertEquals(cardinality.value, bitmap.getCardinality())
nova chamada: assertEquals(cardinality.value, bitmap.getCardinality(), "Era esperado valores iguais, mas  cardinality.value é diferente de " + result1752 + " <bitmap.getCardinality()>")
chamada antiga: assertEquals(value, expected)
nova chamada: assertEquals(value, expected, "Era esperado valores iguais, mas  value é diferente de " + " expected")
chamada antiga: assertEquals(cardinality.value, bitmap.getCardinality())
nova chamada: assertEquals(cardinality.value, bitmap.getCardinality(), "Era esperado valores iguais, mas  cardinality.value é diferente de " + result1753 + " <bitmap.getCardinality()>")
chamada antiga: assertEquals(expectedValues.length, cardinality)
nova chamada: assertEquals(expectedValues.length, cardinality, "Era esperado valores iguais, mas  expectedValues.length é diferente de " + " cardinality")
chamada antiga: assertEquals(expectedValues.length, cardinality)
nova chamada: assertEquals(expectedValues.length, cardinality, "Era esperado valores iguais, mas  expectedValues.length é diferente de " + " cardinality")
chamada antiga: assertEquals(baselineHLC.size, rbHLC.size)
nova chamada: assertEquals(baselineHLC.size, rbHLC.size, "Era esperado valores iguais, mas  baselineHLC.size é diferente de " + " rbHLC.size")
chamada antiga: assertEquals(baseline, rb)
nova chamada: assertEquals(baseline, rb, "Era esperado valores iguais, mas  baseline é diferente de " + " rb")
chamada antiga: assertFalse(iter.hasNext())
nova chamada: assertFalse(iter.hasNext(), "Era esperado falso, mas " + result1754 + " <iter.hasNext()> é verdadeiro ")
chamada antiga: assertFalse(reverseIter.hasNext())
nova chamada: assertFalse(reverseIter.hasNext(), "Era esperado falso, mas " + result1755 + " <reverseIter.hasNext()> é verdadeiro ")
chamada antiga: assertEquals(bitmap.getCardinality(), intIteratorCopy.size())
nova chamada: assertEquals(bitmap.getCardinality(), intIteratorCopy.size(), "Era esperado valores iguais, mas " + result1756 + " <bitmap.getCardinality()> é diferente de " + result1757 + " <intIteratorCopy.size()>")
chamada antiga: assertEquals(bitmap.getCardinality(), reverseIntIteratorCopy.size())
nova chamada: assertEquals(bitmap.getCardinality(), reverseIntIteratorCopy.size(), "Era esperado valores iguais, mas " + result1758 + " <bitmap.getCardinality()> é diferente de " + result1759 + " <reverseIntIteratorCopy.size()>")
chamada antiga: assertEquals(Ints.asList(data), intIteratorCopy)
nova chamada: assertEquals(Ints.asList(data), intIteratorCopy, "Era esperado valores iguais, mas " + result1760 + " <Ints.asList(data)> é diferente de " + " intIteratorCopy")
chamada antiga: assertEquals(Lists.reverse(Ints.asList(data)), reverseIntIteratorCopy)
nova chamada: assertEquals(Lists.reverse(Ints.asList(data)), reverseIntIteratorCopy, "Era esperado valores iguais, mas " + result1761 + " <Lists.reverse(Ints.asList(data))> é diferente de " + " reverseIntIteratorCopy")
chamada antiga: assertEquals(iter.peekNext(), data[0])
nova chamada: assertEquals(iter.peekNext(), data[0], "Era esperado valores iguais, mas " + result1762 + " <iter.peekNext()> é diferente de " + " data[0]")
chamada antiga: assertEquals(iter.peekNext(), data[0])
nova chamada: assertEquals(iter.peekNext(), data[0], "Era esperado valores iguais, mas " + result1763 + " <iter.peekNext()> é diferente de " + " data[0]")
chamada antiga: assertEquals(bitmap.getCardinality(), intIteratorCopy.size())
nova chamada: assertEquals(bitmap.getCardinality(), intIteratorCopy.size(), "Era esperado valores iguais, mas " + result1764 + " <bitmap.getCardinality()> é diferente de " + result1765 + " <intIteratorCopy.size()>")
chamada antiga: assertEquals(bitmap.getCardinality(), reverseIntIteratorCopy.size())
nova chamada: assertEquals(bitmap.getCardinality(), reverseIntIteratorCopy.size(), "Era esperado valores iguais, mas " + result1766 + " <bitmap.getCardinality()> é diferente de " + result1767 + " <reverseIntIteratorCopy.size()>")
chamada antiga: assertEquals(Ints.asList(data), intIteratorCopy)
nova chamada: assertEquals(Ints.asList(data), intIteratorCopy, "Era esperado valores iguais, mas " + result1768 + " <Ints.asList(data)> é diferente de " + " intIteratorCopy")
chamada antiga: assertEquals(Lists.reverse(Ints.asList(data)), reverseIntIteratorCopy)
nova chamada: assertEquals(Lists.reverse(Ints.asList(data)), reverseIntIteratorCopy, "Era esperado valores iguais, mas " + result1769 + " <Lists.reverse(Ints.asList(data))> é diferente de " + " reverseIntIteratorCopy")
chamada antiga: assertEquals(bitmap.getCardinality(), intIteratorCopy.size())
nova chamada: assertEquals(bitmap.getCardinality(), intIteratorCopy.size(), "Era esperado valores iguais, mas " + result1770 + " <bitmap.getCardinality()> é diferente de " + result1771 + " <intIteratorCopy.size()>")
chamada antiga: assertEquals(bitmap.getCardinality(), reverseIntIteratorCopy.size())
nova chamada: assertEquals(bitmap.getCardinality(), reverseIntIteratorCopy.size(), "Era esperado valores iguais, mas " + result1772 + " <bitmap.getCardinality()> é diferente de " + result1773 + " <reverseIntIteratorCopy.size()>")
chamada antiga: assertEquals(Ints.asList(data), intIteratorCopy)
nova chamada: assertEquals(Ints.asList(data), intIteratorCopy, "Era esperado valores iguais, mas " + result1774 + " <Ints.asList(data)> é diferente de " + " intIteratorCopy")
chamada antiga: assertEquals(Lists.reverse(Ints.asList(data)), reverseIntIteratorCopy)
nova chamada: assertEquals(Lists.reverse(Ints.asList(data)), reverseIntIteratorCopy, "Era esperado valores iguais, mas " + result1775 + " <Lists.reverse(Ints.asList(data))> é diferente de " + " reverseIntIteratorCopy")
chamada antiga: assertEquals(bitmap.getCardinality(), intIteratorCopy.size())
nova chamada: assertEquals(bitmap.getCardinality(), intIteratorCopy.size(), "Era esperado valores iguais, mas " + result1776 + " <bitmap.getCardinality()> é diferente de " + result1777 + " <intIteratorCopy.size()>")
chamada antiga: assertEquals(bitmap.getCardinality(), reverseIntIteratorCopy.size())
nova chamada: assertEquals(bitmap.getCardinality(), reverseIntIteratorCopy.size(), "Era esperado valores iguais, mas " + result1778 + " <bitmap.getCardinality()> é diferente de " + result1779 + " <reverseIntIteratorCopy.size()>")
chamada antiga: assertEquals(Ints.asList(data), intIteratorCopy)
nova chamada: assertEquals(Ints.asList(data), intIteratorCopy, "Era esperado valores iguais, mas " + result1780 + " <Ints.asList(data)> é diferente de " + " intIteratorCopy")
chamada antiga: assertEquals(Lists.reverse(Ints.asList(data)), reverseIntIteratorCopy)
nova chamada: assertEquals(Lists.reverse(Ints.asList(data)), reverseIntIteratorCopy, "Era esperado valores iguais, mas " + result1781 + " <Lists.reverse(Ints.asList(data))> é diferente de " + " reverseIntIteratorCopy")
chamada antiga: assertEquals(ImmutableList.of(1, 2, 3), intIteratorCopy)
nova chamada: assertEquals(ImmutableList.of(1, 2, 3), intIteratorCopy, "Era esperado valores iguais, mas " + result1782 + " <ImmutableList.of(1, 2, 3)> é diferente de " + " intIteratorCopy")
chamada antiga: assertEquals(ImmutableList.of(3, 2, 1), reverseIntIteratorCopy)
nova chamada: assertEquals(ImmutableList.of(3, 2, 1), reverseIntIteratorCopy, "Era esperado valores iguais, mas " + result1783 + " <ImmutableList.of(3, 2, 1)> é diferente de " + " reverseIntIteratorCopy")
chamada antiga: assertEquals(iterList.toString(), iterCloneList.toString())
nova chamada: assertEquals(iterList.toString(), iterCloneList.toString(), "Era esperado valores iguais, mas " + result1784 + " <iterList.toString()> é diferente de " + result1785 + " <iterCloneList.toString()>")
chamada antiga: assertEquals(denseRoaringFromFile, roaringDense)
nova chamada: assertEquals(denseRoaringFromFile, roaringDense, "Era esperado valores iguais, mas  denseRoaringFromFile é diferente de " + " roaringDense")
chamada antiga: assertEquals(sparseRoaringFromFile, roaringSparse)
nova chamada: assertEquals(sparseRoaringFromFile, roaringSparse, "Era esperado valores iguais, mas  sparseRoaringFromFile é diferente de " + " roaringSparse")
chamada antiga: assertEquals(RoaringBitmap.intersects(bitmap, test), bitmap.intersects(minimum, supremum))
nova chamada: assertEquals(RoaringBitmap.intersects(bitmap, test), bitmap.intersects(minimum, supremum), "Era esperado valores iguais, mas " + result1786 + " <RoaringBitmap.intersects(bitmap, test)> é diferente de " + result1787 + " <bitmap.intersects(minimum, supremum)>")
chamada antiga: assertEquals(!test.isEmpty() && bitmap.contains(test), bitmap.contains(minimum, supremum))
nova chamada: assertEquals(!test.isEmpty() && bitmap.contains(test), bitmap.contains(minimum, supremum), "Era esperado valores iguais, mas  !test.isEmpty() && bitmap.contains(test) é diferente de " + result1788 + " <bitmap.contains(minimum, supremum)>")
chamada antiga: assertTrue(test.isEmpty() || test.contains(minimum, supremum))
nova chamada: assertTrue(test.isEmpty() || test.contains(minimum, supremum), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(!contains || intersects)
nova chamada: assertTrue(!contains || intersects, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(m2.getCardinality(), count)
nova chamada: assertEquals(m2.getCardinality(), count, "Era esperado valores iguais, mas " + result1789 + " <m2.getCardinality()> é diferente de " + " count")
chamada antiga: assertEquals(mrb.getCardinality(), count)
nova chamada: assertEquals(mrb.getCardinality(), count, "Era esperado valores iguais, mas " + result1790 + " <mrb.getCardinality()> é diferente de " + " count")
chamada antiga: assertTrue(m2.serializedSizeInBytes() < mrb.serializedSizeInBytes())
nova chamada: assertTrue(m2.serializedSizeInBytes() < mrb.serializedSizeInBytes(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(m2, mrb)
nova chamada: assertEquals(m2, mrb, "Era esperado valores iguais, mas  m2 é diferente de " + " mrb")
chamada antiga: assertEquals(r1, b1)
nova chamada: assertEquals(r1, b1, "Era esperado valores iguais, mas  r1 é diferente de " + " b1")
chamada antiga: assertEquals(r2, b2)
nova chamada: assertEquals(r2, b2, "Era esperado valores iguais, mas  r2 é diferente de " + " b2")
chamada antiga: assertEquals(r3, b3)
nova chamada: assertEquals(r3, b3, "Era esperado valores iguais, mas  r3 é diferente de " + " b3")
chamada antiga: assertEquals(r4, b4)
nova chamada: assertEquals(r4, b4, "Era esperado valores iguais, mas  r4 é diferente de " + " b4")
chamada antiga: assertEquals(r5, b5)
nova chamada: assertEquals(r5, b5, "Era esperado valores iguais, mas  r5 é diferente de " + " b5")
chamada antiga: assertEquals(r6, b6)
nova chamada: assertEquals(r6, b6, "Era esperado valores iguais, mas  r6 é diferente de " + " b6")
chamada antiga: assertEquals(r7, b7)
nova chamada: assertEquals(r7, b7, "Era esperado valores iguais, mas  r7 é diferente de " + " b7")
chamada antiga: assertEquals(12, container.getSizeInBytes())
nova chamada: assertEquals(12, container.getSizeInBytes(), "Era esperado valores iguais, mas  12 é diferente de " + result1791 + " <container.getSizeInBytes()>")
chamada antiga: assertEquals(4, container.getCardinality())
nova chamada: assertEquals(4, container.getCardinality(), "Era esperado valores iguais, mas  4 é diferente de " + result1792 + " <container.getCardinality()>")
chamada antiga: assertTrue(container.contains((char) 0))
nova chamada: assertTrue(container.contains((char) 0), "Era esperado verdadeiro, mas " + result1793 + " <container.contains((char) 0)> é falso")
chamada antiga: assertTrue(container.contains((char) 1))
nova chamada: assertTrue(container.contains((char) 1), "Era esperado verdadeiro, mas " + result1794 + " <container.contains((char) 1)> é falso")
chamada antiga: assertTrue(container.contains((char) 2))
nova chamada: assertTrue(container.contains((char) 2), "Era esperado verdadeiro, mas " + result1795 + " <container.contains((char) 2)> é falso")
chamada antiga: assertTrue(container.contains((char) 55))
nova chamada: assertTrue(container.contains((char) 55), "Era esperado verdadeiro, mas " + result1796 + " <container.contains((char) 55)> é falso")
chamada antiga: assertNotSame(container, newContainer)
nova chamada: assertNotSame(container, newContainer, "Era esperado objetos diferentes, mas  container é igual a " + " newContainer")
chamada antiga: assertEquals(20, newContainer.getCardinality())
nova chamada: assertEquals(20, newContainer.getCardinality(), "Era esperado valores iguais, mas  20 é diferente de " + result1797 + " <newContainer.getCardinality()>")
chamada antiga: assertEquals(8, newContainer.getSizeInBytes())
nova chamada: assertEquals(8, newContainer.getSizeInBytes(), "Era esperado valores iguais, mas  8 é diferente de " + result1798 + " <newContainer.getSizeInBytes()>")
chamada antiga: assertNotSame(container, newContainer)
nova chamada: assertNotSame(container, newContainer, "Era esperado objetos diferentes, mas  container é igual a " + " newContainer")
chamada antiga: assertEquals(20, newContainer.getCardinality())
nova chamada: assertEquals(20, newContainer.getCardinality(), "Era esperado valores iguais, mas  20 é diferente de " + result1799 + " <newContainer.getCardinality()>")
chamada antiga: assertEquals(8, newContainer.getSizeInBytes())
nova chamada: assertEquals(8, newContainer.getSizeInBytes(), "Era esperado valores iguais, mas  8 é diferente de " + result1800 + " <newContainer.getSizeInBytes()>")
chamada antiga: assertNotSame(container, newContainer)
nova chamada: assertNotSame(container, newContainer, "Era esperado objetos diferentes, mas  container é igual a " + " newContainer")
chamada antiga: assertEquals(90, newContainer.getCardinality())
nova chamada: assertEquals(90, newContainer.getCardinality(), "Era esperado valores iguais, mas  90 é diferente de " + result1801 + " <newContainer.getCardinality()>")
chamada antiga: assertNotSame(container, newContainer)
nova chamada: assertNotSame(container, newContainer, "Era esperado objetos diferentes, mas  container é igual a " + " newContainer")
chamada antiga: assertEquals(92, newContainer.getCardinality())
nova chamada: assertEquals(92, newContainer.getCardinality(), "Era esperado valores iguais, mas  92 é diferente de " + result1802 + " <newContainer.getCardinality()>")
chamada antiga: assertTrue(newContainer.contains((char) 1))
nova chamada: assertTrue(newContainer.contains((char) 1), "Era esperado verdadeiro, mas " + result1803 + " <newContainer.contains((char) 1)> é falso")
chamada antiga: assertTrue(newContainer.contains((char) 256))
nova chamada: assertTrue(newContainer.contains((char) 256), "Era esperado verdadeiro, mas " + result1804 + " <newContainer.contains((char) 256)> é falso")
chamada antiga: assertNotSame(container, newContainer)
nova chamada: assertNotSame(container, newContainer, "Era esperado objetos diferentes, mas  container é igual a " + " newContainer")
chamada antiga: assertEquals(119, newContainer.getCardinality())
nova chamada: assertEquals(119, newContainer.getCardinality(), "Era esperado valores iguais, mas  119 é diferente de " + result1805 + " <newContainer.getCardinality()>")
chamada antiga: assertNotSame(container, newContainer)
nova chamada: assertNotSame(container, newContainer, "Era esperado objetos diferentes, mas  container é igual a " + " newContainer")
chamada antiga: assertEquals(90, newContainer.getCardinality())
nova chamada: assertEquals(90, newContainer.getCardinality(), "Era esperado valores iguais, mas  90 é diferente de " + result1806 + " <newContainer.getCardinality()>")
chamada antiga: assertNotSame(container, newContainer)
nova chamada: assertNotSame(container, newContainer, "Era esperado objetos diferentes, mas  container é igual a " + " newContainer")
chamada antiga: assertEquals(92, newContainer.getCardinality())
nova chamada: assertEquals(92, newContainer.getCardinality(), "Era esperado valores iguais, mas  92 é diferente de " + result1807 + " <newContainer.getCardinality()>")
chamada antiga: assertEquals(rc, result)
nova chamada: assertEquals(rc, result, "Era esperado valores iguais, mas  rc é diferente de " + " result")
chamada antiga: assertEquals(1, result.getCardinality())
nova chamada: assertEquals(1, result.getCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result1808 + " <result.getCardinality()>")
chamada antiga: assertTrue(result.contains((char) 1))
nova chamada: assertTrue(result.contains((char) 1), "Era esperado verdadeiro, mas " + result1809 + " <result.contains((char) 1)> é falso")
chamada antiga: assertEquals(0, result.getCardinality())
nova chamada: assertEquals(0, result.getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result1810 + " <result.getCardinality()>")
chamada antiga: assertEquals(100, intersectionNOT.getCardinality())
nova chamada: assertEquals(100, intersectionNOT.getCardinality(), "Era esperado valores iguais, mas  100 é diferente de " + result1811 + " <intersectionNOT.getCardinality()>")
chamada antiga: assertEquals(200, bc.getCardinality())
nova chamada: assertEquals(200, bc.getCardinality(), "Era esperado valores iguais, mas  200 é diferente de " + result1812 + " <bc.getCardinality()>")
chamada antiga: assertEquals(200, rc.getCardinality())
nova chamada: assertEquals(200, rc.getCardinality(), "Era esperado valores iguais, mas  200 é diferente de " + result1813 + " <rc.getCardinality()>")
chamada antiga: assertEquals(100, intersectionNOT.getCardinality())
nova chamada: assertEquals(100, intersectionNOT.getCardinality(), "Era esperado valores iguais, mas  100 é diferente de " + result1814 + " <intersectionNOT.getCardinality()>")
chamada antiga: assertEquals(200, ac.getCardinality())
nova chamada: assertEquals(200, ac.getCardinality(), "Era esperado valores iguais, mas  200 é diferente de " + result1815 + " <ac.getCardinality()>")
chamada antiga: assertEquals(200, rc.getCardinality())
nova chamada: assertEquals(200, rc.getCardinality(), "Era esperado valores iguais, mas  200 é diferente de " + result1816 + " <rc.getCardinality()>")
chamada antiga: assertEquals(1, rc.getCardinality())
nova chamada: assertEquals(1, rc.getCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result1817 + " <rc.getCardinality()>")
chamada antiga: assertEquals(0, rc.getCardinality())
nova chamada: assertEquals(0, rc.getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result1818 + " <rc.getCardinality()>")
chamada antiga: assertEquals(ac, ar)
nova chamada: assertEquals(ac, ar, "Era esperado valores iguais, mas  ac é diferente de " + " ar")
chamada antiga: assertEquals(ac, ar)
nova chamada: assertEquals(ac, ar, "Era esperado valores iguais, mas  ac é diferente de " + " ar")
chamada antiga: assertEquals(0, array[0])
nova chamada: assertEquals(0, array[0], "Era esperado valores iguais, mas  0 é diferente de " + " array[0]")
chamada antiga: assertEquals(1, array[1])
nova chamada: assertEquals(1, array[1], "Era esperado valores iguais, mas  1 é diferente de " + " array[1]")
chamada antiga: assertEquals(3, array[2])
nova chamada: assertEquals(3, array[2], "Era esperado valores iguais, mas  3 é diferente de " + " array[2]")
chamada antiga: assertEquals(12, array[3])
nova chamada: assertEquals(12, array[3], "Era esperado valores iguais, mas  12 é diferente de " + " array[3]")
chamada antiga: assertTrue(rc.contains((char) 1))
nova chamada: assertTrue(rc.contains((char) 1), "Era esperado verdadeiro, mas " + result1819 + " <rc.contains((char) 1)> é falso")
chamada antiga: assertFalse(rc.contains((char) 1))
nova chamada: assertFalse(rc.contains((char) 1), "Era esperado falso, mas " + result1820 + " <rc.contains((char) 1)> é verdadeiro ")
chamada antiga: assertThrows(IllegalArgumentException.class, () -> {
    Container rc = new RunContainer();
    rc.iadd(10, 9);
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    Container rc = new RunContainer();
    rc.iadd(10, 9);
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(IllegalArgumentException.class, () -> {
    Container rc = new RunContainer();
    rc.iadd(0, 1 << 20);
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    Container rc = new RunContainer();
    rc.iadd(0, 1 << 20);
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: assertEquals(40, rc.getCardinality())
nova chamada: assertEquals(40, rc.getCardinality(), "Era esperado valores iguais, mas  40 é diferente de " + result1821 + " <rc.getCardinality()>")
chamada antiga: assertEquals(12, rc.getSizeInBytes())
nova chamada: assertEquals(12, rc.getSizeInBytes(), "Era esperado valores iguais, mas  12 é diferente de " + result1822 + " <rc.getSizeInBytes()>")
chamada antiga: assertEquals(30, rc.getCardinality())
nova chamada: assertEquals(30, rc.getCardinality(), "Era esperado valores iguais, mas  30 é diferente de " + result1823 + " <rc.getCardinality()>")
chamada antiga: assertEquals(12, rc.getSizeInBytes())
nova chamada: assertEquals(12, rc.getSizeInBytes(), "Era esperado valores iguais, mas  12 é diferente de " + result1824 + " <rc.getSizeInBytes()>")
chamada antiga: assertEquals(30, rc.getCardinality())
nova chamada: assertEquals(30, rc.getCardinality(), "Era esperado valores iguais, mas  30 é diferente de " + result1825 + " <rc.getCardinality()>")
chamada antiga: assertEquals(8, rc.getSizeInBytes())
nova chamada: assertEquals(8, rc.getSizeInBytes(), "Era esperado valores iguais, mas  8 é diferente de " + result1826 + " <rc.getSizeInBytes()>")
chamada antiga: assertEquals(35, rc.getCardinality())
nova chamada: assertEquals(35, rc.getCardinality(), "Era esperado valores iguais, mas  35 é diferente de " + result1827 + " <rc.getCardinality()>")
chamada antiga: assertEquals(8, rc.getSizeInBytes())
nova chamada: assertEquals(8, rc.getSizeInBytes(), "Era esperado valores iguais, mas  8 é diferente de " + result1828 + " <rc.getSizeInBytes()>")
chamada antiga: assertEquals(40, rc.getCardinality())
nova chamada: assertEquals(40, rc.getCardinality(), "Era esperado valores iguais, mas  40 é diferente de " + result1829 + " <rc.getCardinality()>")
chamada antiga: assertEquals(12, rc.getSizeInBytes())
nova chamada: assertEquals(12, rc.getSizeInBytes(), "Era esperado valores iguais, mas  12 é diferente de " + result1830 + " <rc.getSizeInBytes()>")
chamada antiga: assertEquals(40, rc.getCardinality())
nova chamada: assertEquals(40, rc.getCardinality(), "Era esperado valores iguais, mas  40 é diferente de " + result1831 + " <rc.getCardinality()>")
chamada antiga: assertEquals(12, rc.getSizeInBytes())
nova chamada: assertEquals(12, rc.getSizeInBytes(), "Era esperado valores iguais, mas  12 é diferente de " + result1832 + " <rc.getSizeInBytes()>")
chamada antiga: assertEquals(40, rc.getCardinality())
nova chamada: assertEquals(40, rc.getCardinality(), "Era esperado valores iguais, mas  40 é diferente de " + result1833 + " <rc.getCardinality()>")
chamada antiga: assertEquals(12, rc.getSizeInBytes())
nova chamada: assertEquals(12, rc.getSizeInBytes(), "Era esperado valores iguais, mas  12 é diferente de " + result1834 + " <rc.getSizeInBytes()>")
chamada antiga: assertEquals(35, rc.getCardinality())
nova chamada: assertEquals(35, rc.getCardinality(), "Era esperado valores iguais, mas  35 é diferente de " + result1835 + " <rc.getCardinality()>")
chamada antiga: assertEquals(16, rc.getSizeInBytes())
nova chamada: assertEquals(16, rc.getSizeInBytes(), "Era esperado valores iguais, mas  16 é diferente de " + result1836 + " <rc.getSizeInBytes()>")
chamada antiga: assertEquals(40, rc.getCardinality())
nova chamada: assertEquals(40, rc.getCardinality(), "Era esperado valores iguais, mas  40 é diferente de " + result1837 + " <rc.getCardinality()>")
chamada antiga: assertEquals(12, rc.getSizeInBytes())
nova chamada: assertEquals(12, rc.getSizeInBytes(), "Era esperado valores iguais, mas  12 é diferente de " + result1838 + " <rc.getSizeInBytes()>")
chamada antiga: assertEquals(35, rc.getCardinality())
nova chamada: assertEquals(35, rc.getCardinality(), "Era esperado valores iguais, mas  35 é diferente de " + result1839 + " <rc.getCardinality()>")
chamada antiga: assertEquals(16, rc.getSizeInBytes())
nova chamada: assertEquals(16, rc.getSizeInBytes(), "Era esperado valores iguais, mas  16 é diferente de " + result1840 + " <rc.getSizeInBytes()>")
chamada antiga: assertEquals(45, rc.getCardinality())
nova chamada: assertEquals(45, rc.getCardinality(), "Era esperado valores iguais, mas  45 é diferente de " + result1841 + " <rc.getCardinality()>")
chamada antiga: assertEquals(12, rc.getSizeInBytes())
nova chamada: assertEquals(12, rc.getSizeInBytes(), "Era esperado valores iguais, mas  12 é diferente de " + result1842 + " <rc.getSizeInBytes()>")
chamada antiga: assertEquals(20, container.getCardinality())
nova chamada: assertEquals(20, container.getCardinality(), "Era esperado valores iguais, mas  20 é diferente de " + result1843 + " <container.getCardinality()>")
chamada antiga: assertEquals(8, container.getSizeInBytes())
nova chamada: assertEquals(8, container.getSizeInBytes(), "Era esperado valores iguais, mas  8 é diferente de " + result1844 + " <container.getSizeInBytes()>")
chamada antiga: assertEquals(119, container.getCardinality())
nova chamada: assertEquals(119, container.getCardinality(), "Era esperado valores iguais, mas  119 é diferente de " + result1845 + " <container.getCardinality()>")
chamada antiga: assertEquals(90, container.getCardinality())
nova chamada: assertEquals(90, container.getCardinality(), "Era esperado valores iguais, mas  90 é diferente de " + result1846 + " <container.getCardinality()>")
chamada antiga: assertSame(container, result)
nova chamada: assertSame(container, result, "Era esperado objetos iguais, mas  container é diferente de " + " result")
chamada antiga: assertEquals(5, container.getCardinality())
nova chamada: assertEquals(5, container.getCardinality(), "Era esperado valores iguais, mas  5 é diferente de " + result1847 + " <container.getCardinality()>")
chamada antiga: assertEquals(5, result.getCardinality())
nova chamada: assertEquals(5, result.getCardinality(), "Era esperado valores iguais, mas  5 é diferente de " + result1848 + " <result.getCardinality()>")
chamada antiga: assertEquals(7, result.getCardinality())
nova chamada: assertEquals(7, result.getCardinality(), "Era esperado valores iguais, mas  7 é diferente de " + result1849 + " <result.getCardinality()>")
chamada antiga: assertEquals(9, result.getCardinality())
nova chamada: assertEquals(9, result.getCardinality(), "Era esperado valores iguais, mas  9 é diferente de " + result1850 + " <result.getCardinality()>")
chamada antiga: assertEquals(2, result.getCardinality())
nova chamada: assertEquals(2, result.getCardinality(), "Era esperado valores iguais, mas  2 é diferente de " + result1851 + " <result.getCardinality()>")
chamada antiga: assertEquals(10, result.getCardinality())
nova chamada: assertEquals(10, result.getCardinality(), "Era esperado valores iguais, mas  10 é diferente de " + result1852 + " <result.getCardinality()>")
chamada antiga: assertTrue(container instanceof RunContainer)
nova chamada: assertTrue(container instanceof RunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertSame(container, result)
nova chamada: assertSame(container, result, "Era esperado objetos iguais, mas  container é diferente de " + " result")
chamada antiga: assertEquals(5, result.getCardinality())
nova chamada: assertEquals(5, result.getCardinality(), "Era esperado valores iguais, mas  5 é diferente de " + result1853 + " <result.getCardinality()>")
chamada antiga: assertEquals(4, result.getCardinality())
nova chamada: assertEquals(4, result.getCardinality(), "Era esperado valores iguais, mas  4 é diferente de " + result1854 + " <result.getCardinality()>")
chamada antiga: assertEquals(8, result.getCardinality())
nova chamada: assertEquals(8, result.getCardinality(), "Era esperado valores iguais, mas  8 é diferente de " + result1855 + " <result.getCardinality()>")
chamada antiga: assertEquals(8, result.getCardinality())
nova chamada: assertEquals(8, result.getCardinality(), "Era esperado valores iguais, mas  8 é diferente de " + result1856 + " <result.getCardinality()>")
chamada antiga: assertEquals(2, result.getCardinality())
nova chamada: assertEquals(2, result.getCardinality(), "Era esperado valores iguais, mas  2 é diferente de " + result1857 + " <result.getCardinality()>")
chamada antiga: assertEquals(4, result.getCardinality())
nova chamada: assertEquals(4, result.getCardinality(), "Era esperado valores iguais, mas  4 é diferente de " + result1858 + " <result.getCardinality()>")
chamada antiga: assertEquals(5, result.getCardinality())
nova chamada: assertEquals(5, result.getCardinality(), "Era esperado valores iguais, mas  5 é diferente de " + result1859 + " <result.getCardinality()>")
chamada antiga: assertEquals(4, result.getCardinality())
nova chamada: assertEquals(4, result.getCardinality(), "Era esperado valores iguais, mas  4 é diferente de " + result1860 + " <result.getCardinality()>")
chamada antiga: assertEquals(ac, ac.and(rc))
nova chamada: assertEquals(ac, ac.and(rc), "Era esperado valores iguais, mas  ac é diferente de " + result1861 + " <ac.and(rc)>")
chamada antiga: assertEquals(ac, rc.and(ac))
nova chamada: assertEquals(ac, rc.and(ac), "Era esperado valores iguais, mas  ac é diferente de " + result1862 + " <rc.and(ac)>")
chamada antiga: assertEquals(ac, ac.and(rc))
nova chamada: assertEquals(ac, ac.and(rc), "Era esperado valores iguais, mas  ac é diferente de " + result1863 + " <ac.and(rc)>")
chamada antiga: assertEquals(ac, rc.and(ac))
nova chamada: assertEquals(ac, rc.and(ac), "Era esperado valores iguais, mas  ac é diferente de " + result1864 + " <rc.and(ac)>")
chamada antiga: assertEquals(0, rc.and(ac).getCardinality())
nova chamada: assertEquals(0, rc.and(ac).getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result1865 + " <rc.and(ac).getCardinality()>")
chamada antiga: assertEquals(100, intersection.getCardinality())
nova chamada: assertEquals(100, intersection.getCardinality(), "Era esperado valores iguais, mas  100 é diferente de " + result1866 + " <intersection.getCardinality()>")
chamada antiga: assertEquals(200, bc.getCardinality())
nova chamada: assertEquals(200, bc.getCardinality(), "Era esperado valores iguais, mas  200 é diferente de " + result1867 + " <bc.getCardinality()>")
chamada antiga: assertEquals(200, rc.getCardinality())
nova chamada: assertEquals(200, rc.getCardinality(), "Era esperado valores iguais, mas  200 é diferente de " + result1868 + " <rc.getCardinality()>")
chamada antiga: assertEquals(256, rc1.getCardinality())
nova chamada: assertEquals(256, rc1.getCardinality(), "Era esperado valores iguais, mas  256 é diferente de " + result1869 + " <rc1.getCardinality()>")
chamada antiga: assertEquals(512, rc.getCardinality())
nova chamada: assertEquals(512, rc.getCardinality(), "Era esperado valores iguais, mas  512 é diferente de " + result1870 + " <rc.getCardinality()>")
chamada antiga: assertEquals(130, rc1.getCardinality())
nova chamada: assertEquals(130, rc1.getCardinality(), "Era esperado valores iguais, mas  130 é diferente de " + result1871 + " <rc1.getCardinality()>")
chamada antiga: assertTrue(iterator.hasNext())
nova chamada: assertTrue(iterator.hasNext(), "Era esperado verdadeiro, mas " + result1872 + " <iterator.hasNext()> é falso")
chamada antiga: assertEquals(256, iterator.next())
nova chamada: assertEquals(256, iterator.next(), "Era esperado valores iguais, mas  256 é diferente de " + result1873 + " <iterator.next()>")
chamada antiga: assertTrue(iterator.hasNext())
nova chamada: assertTrue(iterator.hasNext(), "Era esperado verdadeiro, mas " + result1874 + " <iterator.hasNext()> é falso")
chamada antiga: assertEquals(257, iterator.next())
nova chamada: assertEquals(257, iterator.next(), "Era esperado valores iguais, mas  257 é diferente de " + result1875 + " <iterator.next()>")
chamada antiga: assertFalse(iterator.hasNext())
nova chamada: assertFalse(iterator.hasNext(), "Era esperado falso, mas " + result1876 + " <iterator.hasNext()> é verdadeiro ")
chamada antiga: assertEquals(130, rc1.getCardinality())
nova chamada: assertEquals(130, rc1.getCardinality(), "Era esperado valores iguais, mas  130 é diferente de " + result1877 + " <rc1.getCardinality()>")
chamada antiga: assertTrue(iterator.hasNext())
nova chamada: assertTrue(iterator.hasNext(), "Era esperado verdadeiro, mas " + result1878 + " <iterator.hasNext()> é falso")
chamada antiga: assertEquals(256, iterator.next())
nova chamada: assertEquals(256, iterator.next(), "Era esperado valores iguais, mas  256 é diferente de " + result1879 + " <iterator.next()>")
chamada antiga: assertTrue(iterator.hasNext())
nova chamada: assertTrue(iterator.hasNext(), "Era esperado verdadeiro, mas " + result1880 + " <iterator.hasNext()> é falso")
chamada antiga: assertEquals(260, iterator.next())
nova chamada: assertEquals(260, iterator.next(), "Era esperado valores iguais, mas  260 é diferente de " + result1881 + " <iterator.next()>")
chamada antiga: assertFalse(iterator.hasNext())
nova chamada: assertFalse(iterator.hasNext(), "Era esperado falso, mas " + result1882 + " <iterator.hasNext()> é verdadeiro ")
chamada antiga: assertEquals(130, rc1.getCardinality())
nova chamada: assertEquals(130, rc1.getCardinality(), "Era esperado valores iguais, mas  130 é diferente de " + result1883 + " <rc1.getCardinality()>")
chamada antiga: assertTrue(iterator.hasNext())
nova chamada: assertTrue(iterator.hasNext(), "Era esperado verdadeiro, mas " + result1884 + " <iterator.hasNext()> é falso")
chamada antiga: assertEquals(256, iterator.next())
nova chamada: assertEquals(256, iterator.next(), "Era esperado valores iguais, mas  256 é diferente de " + result1885 + " <iterator.next()>")
chamada antiga: assertTrue(iterator.hasNext())
nova chamada: assertTrue(iterator.hasNext(), "Era esperado verdadeiro, mas " + result1886 + " <iterator.hasNext()> é falso")
chamada antiga: assertEquals(257, iterator.next())
nova chamada: assertEquals(257, iterator.next(), "Era esperado valores iguais, mas  257 é diferente de " + result1887 + " <iterator.next()>")
chamada antiga: assertFalse(iterator.hasNext())
nova chamada: assertFalse(iterator.hasNext(), "Era esperado falso, mas " + result1888 + " <iterator.hasNext()> é verdadeiro ")
chamada antiga: assertEquals(130, rc1.getCardinality())
nova chamada: assertEquals(130, rc1.getCardinality(), "Era esperado valores iguais, mas  130 é diferente de " + result1889 + " <rc1.getCardinality()>")
chamada antiga: assertTrue(iterator.hasNext())
nova chamada: assertTrue(iterator.hasNext(), "Era esperado verdadeiro, mas " + result1890 + " <iterator.hasNext()> é falso")
chamada antiga: assertEquals(256, iterator.next())
nova chamada: assertEquals(256, iterator.next(), "Era esperado valores iguais, mas  256 é diferente de " + result1891 + " <iterator.next()>")
chamada antiga: assertTrue(iterator.hasNext())
nova chamada: assertTrue(iterator.hasNext(), "Era esperado verdadeiro, mas " + result1892 + " <iterator.hasNext()> é falso")
chamada antiga: assertEquals(257, iterator.next())
nova chamada: assertEquals(257, iterator.next(), "Era esperado valores iguais, mas  257 é diferente de " + result1893 + " <iterator.next()>")
chamada antiga: assertFalse(iterator.hasNext())
nova chamada: assertFalse(iterator.hasNext(), "Era esperado falso, mas " + result1894 + " <iterator.hasNext()> é verdadeiro ")
chamada antiga: assertEquals(130, rc1.getCardinality())
nova chamada: assertEquals(130, rc1.getCardinality(), "Era esperado valores iguais, mas  130 é diferente de " + result1895 + " <rc1.getCardinality()>")
chamada antiga: assertTrue(iterator.hasNext())
nova chamada: assertTrue(iterator.hasNext(), "Era esperado verdadeiro, mas " + result1896 + " <iterator.hasNext()> é falso")
chamada antiga: assertEquals(256, iterator.next())
nova chamada: assertEquals(256, iterator.next(), "Era esperado valores iguais, mas  256 é diferente de " + result1897 + " <iterator.next()>")
chamada antiga: assertTrue(iterator.hasNext())
nova chamada: assertTrue(iterator.hasNext(), "Era esperado verdadeiro, mas " + result1898 + " <iterator.hasNext()> é falso")
chamada antiga: assertEquals(260, iterator.next())
nova chamada: assertEquals(260, iterator.next(), "Era esperado valores iguais, mas  260 é diferente de " + result1899 + " <iterator.next()>")
chamada antiga: assertFalse(iterator.hasNext())
nova chamada: assertFalse(iterator.hasNext(), "Era esperado falso, mas " + result1900 + " <iterator.hasNext()> é verdadeiro ")
chamada antiga: assertEquals(0, rc.getCardinality())
nova chamada: assertEquals(0, rc.getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result1901 + " <rc.getCardinality()>")
chamada antiga: assertEquals(5, rc.getCardinality())
nova chamada: assertEquals(5, rc.getCardinality(), "Era esperado valores iguais, mas  5 é diferente de " + result1902 + " <rc.getCardinality()>")
chamada antiga: assertEquals(8, rc.getSizeInBytes())
nova chamada: assertEquals(8, rc.getSizeInBytes(), "Era esperado valores iguais, mas  8 é diferente de " + result1903 + " <rc.getSizeInBytes()>")
chamada antiga: assertEquals(0, rc.getCardinality())
nova chamada: assertEquals(0, rc.getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result1904 + " <rc.getCardinality()>")
chamada antiga: assertEquals(0, rc.getCardinality())
nova chamada: assertEquals(0, rc.getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result1905 + " <rc.getCardinality()>")
chamada antiga: assertEquals(10, rc.getCardinality())
nova chamada: assertEquals(10, rc.getCardinality(), "Era esperado valores iguais, mas  10 é diferente de " + result1906 + " <rc.getCardinality()>")
chamada antiga: assertEquals(12, rc.getSizeInBytes())
nova chamada: assertEquals(12, rc.getSizeInBytes(), "Era esperado valores iguais, mas  12 é diferente de " + result1907 + " <rc.getSizeInBytes()>")
chamada antiga: assertEquals(5, rc.getCardinality())
nova chamada: assertEquals(5, rc.getCardinality(), "Era esperado valores iguais, mas  5 é diferente de " + result1908 + " <rc.getCardinality()>")
chamada antiga: assertEquals(8, rc.getSizeInBytes())
nova chamada: assertEquals(8, rc.getSizeInBytes(), "Era esperado valores iguais, mas  8 é diferente de " + result1909 + " <rc.getSizeInBytes()>")
chamada antiga: assertEquals(10, rc.getCardinality())
nova chamada: assertEquals(10, rc.getCardinality(), "Era esperado valores iguais, mas  10 é diferente de " + result1910 + " <rc.getCardinality()>")
chamada antiga: assertEquals(12, rc.getSizeInBytes())
nova chamada: assertEquals(12, rc.getSizeInBytes(), "Era esperado valores iguais, mas  12 é diferente de " + result1911 + " <rc.getSizeInBytes()>")
chamada antiga: assertEquals(5, rc.getCardinality())
nova chamada: assertEquals(5, rc.getCardinality(), "Era esperado valores iguais, mas  5 é diferente de " + result1912 + " <rc.getCardinality()>")
chamada antiga: assertEquals(8, rc.getSizeInBytes())
nova chamada: assertEquals(8, rc.getSizeInBytes(), "Era esperado valores iguais, mas  8 é diferente de " + result1913 + " <rc.getSizeInBytes()>")
chamada antiga: assertEquals(0, rc.getCardinality())
nova chamada: assertEquals(0, rc.getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result1914 + " <rc.getCardinality()>")
chamada antiga: assertEquals(100, rc.getCardinality())
nova chamada: assertEquals(100, rc.getCardinality(), "Era esperado valores iguais, mas  100 é diferente de " + result1915 + " <rc.getCardinality()>")
chamada antiga: assertEquals(1150, rc.getCardinality())
nova chamada: assertEquals(1150, rc.getCardinality(), "Era esperado valores iguais, mas  1150 é diferente de " + result1916 + " <rc.getCardinality()>")
chamada antiga: assertEquals(9, rc.getCardinality())
nova chamada: assertEquals(9, rc.getCardinality(), "Era esperado valores iguais, mas  9 é diferente de " + result1917 + " <rc.getCardinality()>")
chamada antiga: assertEquals(8, rc.getSizeInBytes())
nova chamada: assertEquals(8, rc.getSizeInBytes(), "Era esperado valores iguais, mas  8 é diferente de " + result1918 + " <rc.getSizeInBytes()>")
chamada antiga: assertEquals(1149, rc.getCardinality())
nova chamada: assertEquals(1149, rc.getCardinality(), "Era esperado valores iguais, mas  1149 é diferente de " + result1919 + " <rc.getCardinality()>")
chamada antiga: assertEquals(19, rc.getCardinality())
nova chamada: assertEquals(19, rc.getCardinality(), "Era esperado valores iguais, mas  19 é diferente de " + result1920 + " <rc.getCardinality()>")
chamada antiga: assertEquals(12, rc.getSizeInBytes())
nova chamada: assertEquals(12, rc.getSizeInBytes(), "Era esperado valores iguais, mas  12 é diferente de " + result1921 + " <rc.getSizeInBytes()>")
chamada antiga: assertEquals(5, rc.getCardinality())
nova chamada: assertEquals(5, rc.getCardinality(), "Era esperado valores iguais, mas  5 é diferente de " + result1922 + " <rc.getCardinality()>")
chamada antiga: assertEquals(8, rc.getSizeInBytes())
nova chamada: assertEquals(8, rc.getSizeInBytes(), "Era esperado valores iguais, mas  8 é diferente de " + result1923 + " <rc.getSizeInBytes()>")
chamada antiga: assertEquals(0, rc.getCardinality())
nova chamada: assertEquals(0, rc.getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result1924 + " <rc.getCardinality()>")
chamada antiga: assertEquals(5, rc.getCardinality())
nova chamada: assertEquals(5, rc.getCardinality(), "Era esperado valores iguais, mas  5 é diferente de " + result1925 + " <rc.getCardinality()>")
chamada antiga: assertEquals(8, rc.getSizeInBytes())
nova chamada: assertEquals(8, rc.getSizeInBytes(), "Era esperado valores iguais, mas  8 é diferente de " + result1926 + " <rc.getSizeInBytes()>")
chamada antiga: assertEquals(0, rc.getCardinality())
nova chamada: assertEquals(0, rc.getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result1927 + " <rc.getCardinality()>")
chamada antiga: assertEquals(14, rc.getCardinality())
nova chamada: assertEquals(14, rc.getCardinality(), "Era esperado valores iguais, mas  14 é diferente de " + result1928 + " <rc.getCardinality()>")
chamada antiga: assertEquals(12, rc.getSizeInBytes())
nova chamada: assertEquals(12, rc.getSizeInBytes(), "Era esperado valores iguais, mas  12 é diferente de " + result1929 + " <rc.getSizeInBytes()>")
chamada antiga: assertEquals(19, rc.getCardinality())
nova chamada: assertEquals(19, rc.getCardinality(), "Era esperado valores iguais, mas  19 é diferente de " + result1930 + " <rc.getCardinality()>")
chamada antiga: assertEquals(12, rc.getSizeInBytes())
nova chamada: assertEquals(12, rc.getSizeInBytes(), "Era esperado valores iguais, mas  12 é diferente de " + result1931 + " <rc.getSizeInBytes()>")
chamada antiga: assertThrows(IllegalArgumentException.class, () -> {
    Container rc = new RunContainer();
    rc.iremove(10, 9);
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    Container rc = new RunContainer();
    rc.iremove(10, 9);
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(IllegalArgumentException.class, () -> {
    Container rc = new RunContainer();
    rc.remove(0, 1 << 20);
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    Container rc = new RunContainer();
    rc.remove(0, 1 << 20);
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: assertEquals(0, container.getCardinality())
nova chamada: assertEquals(0, container.getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result1932 + " <container.getCardinality()>")
chamada antiga: assertEquals(0, container.getCardinality())
nova chamada: assertEquals(0, container.getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result1933 + " <container.getCardinality()>")
chamada antiga: assertFalse(i.hasNext())
nova chamada: assertFalse(i.hasNext(), "Era esperado falso, mas " + result1934 + " <i.hasNext()> é verdadeiro ")
chamada antiga: assertNotSame(container, limit)
nova chamada: assertNotSame(container, limit, "Era esperado objetos diferentes, mas  container é igual a " + " limit")
chamada antiga: assertEquals(container, limit)
nova chamada: assertEquals(container, limit, "Era esperado valores iguais, mas  container é diferente de " + " limit")
chamada antiga: assertNotSame(container, limit)
nova chamada: assertNotSame(container, limit, "Era esperado objetos diferentes, mas  container é igual a " + " limit")
chamada antiga: assertEquals(3, limit.getCardinality())
nova chamada: assertEquals(3, limit.getCardinality(), "Era esperado valores iguais, mas  3 é diferente de " + result1935 + " <limit.getCardinality()>")
chamada antiga: assertTrue(limit.contains((char) 0))
nova chamada: assertTrue(limit.contains((char) 0), "Era esperado verdadeiro, mas " + result1936 + " <limit.contains((char) 0)> é falso")
chamada antiga: assertTrue(limit.contains((char) 2))
nova chamada: assertTrue(limit.contains((char) 2), "Era esperado verdadeiro, mas " + result1937 + " <limit.contains((char) 2)> é falso")
chamada antiga: assertTrue(limit.contains((char) 55))
nova chamada: assertTrue(limit.contains((char) 55), "Era esperado verdadeiro, mas " + result1938 + " <limit.contains((char) 55)> é falso")
chamada antiga: assertFalse(i.hasNext())
nova chamada: assertFalse(i.hasNext(), "Era esperado falso, mas " + result1939 + " <i.hasNext()> é verdadeiro ")
chamada antiga: assertFalse(i.hasNext())
nova chamada: assertFalse(i.hasNext(), "Era esperado falso, mas " + result1940 + " <i.hasNext()> é verdadeiro ")
chamada antiga: assertFalse(i.hasNext())
nova chamada: assertFalse(i.hasNext(), "Era esperado falso, mas " + result1941 + " <i.hasNext()> é verdadeiro ")
chamada antiga: assertNotSame(container, result)
nova chamada: assertNotSame(container, result, "Era esperado objetos diferentes, mas  container é igual a " + " result")
chamada antiga: assertEquals(container, result)
nova chamada: assertEquals(container, result, "Era esperado valores iguais, mas  container é diferente de " + " result")
chamada antiga: assertEquals(5, result.getCardinality())
nova chamada: assertEquals(5, result.getCardinality(), "Era esperado valores iguais, mas  5 é diferente de " + result1942 + " <result.getCardinality()>")
chamada antiga: assertEquals(7, result.getCardinality())
nova chamada: assertEquals(7, result.getCardinality(), "Era esperado valores iguais, mas  7 é diferente de " + result1943 + " <result.getCardinality()>")
chamada antiga: assertEquals(9, result.getCardinality())
nova chamada: assertEquals(9, result.getCardinality(), "Era esperado valores iguais, mas  9 é diferente de " + result1944 + " <result.getCardinality()>")
chamada antiga: assertEquals(2, result.getCardinality())
nova chamada: assertEquals(2, result.getCardinality(), "Era esperado valores iguais, mas  2 é diferente de " + result1945 + " <result.getCardinality()>")
chamada antiga: assertEquals(10, result.getCardinality())
nova chamada: assertEquals(10, result.getCardinality(), "Era esperado valores iguais, mas  10 é diferente de " + result1946 + " <result.getCardinality()>")
chamada antiga: assertTrue(container instanceof RunContainer)
nova chamada: assertTrue(container instanceof RunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(result instanceof RunContainer)
nova chamada: assertTrue(result instanceof RunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(5, result.getCardinality())
nova chamada: assertEquals(5, result.getCardinality(), "Era esperado valores iguais, mas  5 é diferente de " + result1947 + " <result.getCardinality()>")
chamada antiga: assertEquals(4, result.getCardinality())
nova chamada: assertEquals(4, result.getCardinality(), "Era esperado valores iguais, mas  4 é diferente de " + result1948 + " <result.getCardinality()>")
chamada antiga: assertEquals(8, result.getCardinality())
nova chamada: assertEquals(8, result.getCardinality(), "Era esperado valores iguais, mas  8 é diferente de " + result1949 + " <result.getCardinality()>")
chamada antiga: assertEquals(8, result.getCardinality())
nova chamada: assertEquals(8, result.getCardinality(), "Era esperado valores iguais, mas  8 é diferente de " + result1950 + " <result.getCardinality()>")
chamada antiga: assertEquals(2, result.getCardinality())
nova chamada: assertEquals(2, result.getCardinality(), "Era esperado valores iguais, mas  2 é diferente de " + result1951 + " <result.getCardinality()>")
chamada antiga: assertEquals(4, result.getCardinality())
nova chamada: assertEquals(4, result.getCardinality(), "Era esperado valores iguais, mas  4 é diferente de " + result1952 + " <result.getCardinality()>")
chamada antiga: assertEquals(5, result.getCardinality())
nova chamada: assertEquals(5, result.getCardinality(), "Era esperado valores iguais, mas  5 é diferente de " + result1953 + " <result.getCardinality()>")
chamada antiga: assertEquals(4, result.getCardinality())
nova chamada: assertEquals(4, result.getCardinality(), "Era esperado valores iguais, mas  4 é diferente de " + result1954 + " <result.getCardinality()>")
chamada antiga: assertEquals(1, container.rank((char) 0))
nova chamada: assertEquals(1, container.rank((char) 0), "Era esperado valores iguais, mas  1 é diferente de " + result1955 + " <container.rank((char) 0)>")
chamada antiga: assertEquals(2, container.rank((char) 10))
nova chamada: assertEquals(2, container.rank((char) 10), "Era esperado valores iguais, mas  2 é diferente de " + result1956 + " <container.rank((char) 10)>")
chamada antiga: assertEquals(4, container.rank((char) 128))
nova chamada: assertEquals(4, container.rank((char) 128), "Era esperado valores iguais, mas  4 é diferente de " + result1957 + " <container.rank((char) 128)>")
chamada antiga: assertEquals(5, container.rank((char) 1024))
nova chamada: assertEquals(5, container.rank((char) 1024), "Era esperado valores iguais, mas  5 é diferente de " + result1958 + " <container.rank((char) 1024)>")
chamada antiga: assertTrue(container instanceof RunContainer)
nova chamada: assertTrue(container instanceof RunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(16, container.rank((char) 32))
nova chamada: assertEquals(16, container.rank((char) 32), "Era esperado valores iguais, mas  16 é diferente de " + result1959 + " <container.rank((char) 32)>")
chamada antiga: assertEquals(0, newContainer.getCardinality())
nova chamada: assertEquals(0, newContainer.getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result1960 + " <newContainer.getCardinality()>")
chamada antiga: assertTrue(atLeastOneArray)
nova chamada: assertTrue(atLeastOneArray, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(atLeastOneArray)
nova chamada: assertTrue(atLeastOneArray, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(new ArrayContainer(8, new char[] { 0, 2, 4, 15, 16, 48, 50, 80 }), ac.andNot(rc))
nova chamada: assertEquals(new ArrayContainer(8, new char[] { 0, 2, 4, 15, 16, 48, 50, 80 }), ac.andNot(rc), "Era esperado valores iguais, mas  new ArrayContainer(8, new char[] { 0, 2, 4, 15, 16, 48, 50, 80 }) é diferente de " + result1961 + " <ac.andNot(rc)>")
chamada antiga: assertEquals(new ArrayContainer(), ac.andNot(rc))
nova chamada: assertEquals(new ArrayContainer(), ac.andNot(rc), "Era esperado valores iguais, mas  new ArrayContainer() é diferente de " + result1962 + " <ac.andNot(rc)>")
chamada antiga: assertEquals(new ArrayContainer(), ac.andNot(rc))
nova chamada: assertEquals(new ArrayContainer(), ac.andNot(rc), "Era esperado valores iguais, mas  new ArrayContainer() é diferente de " + result1963 + " <ac.andNot(rc)>")
chamada antiga: assertTrue(atLeastOneArray)
nova chamada: assertTrue(atLeastOneArray, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(atLeastOneArray)
nova chamada: assertTrue(atLeastOneArray, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(rc, rc2)
nova chamada: assertEquals(rc, rc2, "Era esperado valores iguais, mas  rc é diferente de " + " rc2")
chamada antiga: assertEquals(rc, rc2)
nova chamada: assertEquals(rc, rc2, "Era esperado valores iguais, mas  rc é diferente de " + " rc2")
chamada antiga: assertEquals(rc, rc2)
nova chamada: assertEquals(rc, rc2, "Era esperado valores iguais, mas  rc é diferente de " + " rc2")
chamada antiga: assertEquals(rc, rc2)
nova chamada: assertEquals(rc, rc2, "Era esperado valores iguais, mas  rc é diferente de " + " rc2")
chamada antiga: assertTrue(rc instanceof RunContainer)
nova chamada: assertTrue(rc instanceof RunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(1 << 16, result.getCardinality())
nova chamada: assertEquals(1 << 16, result.getCardinality(), "Era esperado valores iguais, mas  1  16 é diferente de " + result1964 + " <result.getCardinality()>")
chamada antiga: assertTrue(result instanceof RunContainer)
nova chamada: assertTrue(result instanceof RunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(rc instanceof RunContainer)
nova chamada: assertTrue(rc instanceof RunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(1 << 16, result.getCardinality())
nova chamada: assertEquals(1 << 16, result.getCardinality(), "Era esperado valores iguais, mas  1  16 é diferente de " + result1965 + " <result.getCardinality()>")
chamada antiga: assertTrue(result instanceof RunContainer)
nova chamada: assertTrue(result instanceof RunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(rc instanceof RunContainer)
nova chamada: assertTrue(rc instanceof RunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(1 << 16, result.getCardinality())
nova chamada: assertEquals(1 << 16, result.getCardinality(), "Era esperado valores iguais, mas  1  16 é diferente de " + result1966 + " <result.getCardinality()>")
chamada antiga: assertTrue(result instanceof RunContainer)
nova chamada: assertTrue(result instanceof RunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(container, newContainer)
nova chamada: assertEquals(container, newContainer, "Era esperado valores iguais, mas  container é diferente de " + " newContainer")
chamada antiga: assertEquals(container.serializedSizeInBytes(), newContainer.serializedSizeInBytes())
nova chamada: assertEquals(container.serializedSizeInBytes(), newContainer.serializedSizeInBytes(), "Era esperado valores iguais, mas " + result1967 + " <container.serializedSizeInBytes()> é diferente de " + result1968 + " <newContainer.serializedSizeInBytes()>")
chamada antiga: assertEquals(0, container.select(0))
nova chamada: assertEquals(0, container.select(0), "Era esperado valores iguais, mas  0 é diferente de " + result1969 + " <container.select(0)>")
chamada antiga: assertEquals(2, container.select(1))
nova chamada: assertEquals(2, container.select(1), "Era esperado valores iguais, mas  2 é diferente de " + result1970 + " <container.select(1)>")
chamada antiga: assertEquals(55, container.select(2))
nova chamada: assertEquals(55, container.select(2), "Era esperado valores iguais, mas  55 é diferente de " + result1971 + " <container.select(2)>")
chamada antiga: assertEquals(64, container.select(3))
nova chamada: assertEquals(64, container.select(3), "Era esperado valores iguais, mas  64 é diferente de " + result1972 + " <container.select(3)>")
chamada antiga: assertEquals(256, container.select(4))
nova chamada: assertEquals(256, container.select(4), "Era esperado valores iguais, mas  256 é diferente de " + result1973 + " <container.select(4)>")
chamada antiga: assertThrows(IllegalArgumentException.class, () -> {
    RunContainer container = new RunContainer();
    container.add((char) 0);
    container.add((char) 3);
    container.add((char) 118);
    container.select(666);
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    RunContainer container = new RunContainer();
    container.add((char) 0);
    container.add((char) 3);
    container.add((char) 118);
    container.select(666);
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: assertFalse(i.hasNext())
nova chamada: assertFalse(i.hasNext(), "Era esperado falso, mas " + result1974 + " <i.hasNext()> é verdadeiro ")
chamada antiga: assertEquals(answer.getCardinality(), array1.length)
nova chamada: assertEquals(answer.getCardinality(), array1.length, "Era esperado valores iguais, mas " + result1975 + " <answer.getCardinality()> é diferente de " + " array1.length")
chamada antiga: assertEquals(1, setWithOptimize.size())
nova chamada: assertEquals(1, setWithOptimize.size(), "Era esperado valores iguais, mas  1 é diferente de " + result1976 + " <setWithOptimize.size()>")
chamada antiga: assertEquals(1, setWithoutOptimize.size())
nova chamada: assertEquals(1, setWithoutOptimize.size(), "Era esperado valores iguais, mas  1 é diferente de " + result1977 + " <setWithoutOptimize.size()>")
chamada antiga: assertTrue(ac instanceof ArrayContainer)
nova chamada: assertTrue(ac instanceof ArrayContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(DEFAULT_MAX_SIZE / 2, ac.getCardinality())
nova chamada: assertEquals(DEFAULT_MAX_SIZE / 2, ac.getCardinality(), "Era esperado valores iguais, mas  DEFAULT_MAX_SIZE / 2 é diferente de " + result1978 + " <ac.getCardinality()>")
chamada antiga: assertTrue(bc instanceof BitmapContainer)
nova chamada: assertTrue(bc instanceof BitmapContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(2 * DEFAULT_MAX_SIZE, bc.getCardinality())
nova chamada: assertEquals(2 * DEFAULT_MAX_SIZE, bc.getCardinality(), "Era esperado valores iguais, mas  2 * DEFAULT_MAX_SIZE é diferente de " + result1979 + " <bc.getCardinality()>")
chamada antiga: assertEquals(200, union.getCardinality())
nova chamada: assertEquals(200, union.getCardinality(), "Era esperado valores iguais, mas  200 é diferente de " + result1980 + " <union.getCardinality()>")
chamada antiga: assertEquals(100, bc.getCardinality())
nova chamada: assertEquals(100, bc.getCardinality(), "Era esperado valores iguais, mas  100 é diferente de " + result1981 + " <bc.getCardinality()>")
chamada antiga: assertEquals(100, rc.getCardinality())
nova chamada: assertEquals(100, rc.getCardinality(), "Era esperado valores iguais, mas  100 é diferente de " + result1982 + " <rc.getCardinality()>")
chamada antiga: assertEquals(200, union.getCardinality())
nova chamada: assertEquals(200, union.getCardinality(), "Era esperado valores iguais, mas  200 é diferente de " + result1983 + " <union.getCardinality()>")
chamada antiga: assertEquals(100, ac.getCardinality())
nova chamada: assertEquals(100, ac.getCardinality(), "Era esperado valores iguais, mas  100 é diferente de " + result1984 + " <ac.getCardinality()>")
chamada antiga: assertEquals(100, rc.getCardinality())
nova chamada: assertEquals(100, rc.getCardinality(), "Era esperado valores iguais, mas  100 é diferente de " + result1985 + " <rc.getCardinality()>")
chamada antiga: assertEquals(4 * DEFAULT_MAX_SIZE, result.getCardinality())
nova chamada: assertEquals(4 * DEFAULT_MAX_SIZE, result.getCardinality(), "Era esperado valores iguais, mas  4 * DEFAULT_MAX_SIZE é diferente de " + result1986 + " <result.getCardinality()>")
chamada antiga: assertEquals(4 * DEFAULT_MAX_SIZE, bc.getCardinality())
nova chamada: assertEquals(4 * DEFAULT_MAX_SIZE, bc.getCardinality(), "Era esperado valores iguais, mas  4 * DEFAULT_MAX_SIZE é diferente de " + result1987 + " <bc.getCardinality()>")
chamada antiga: assertEquals(4 * DEFAULT_MAX_SIZE, rc.getCardinality())
nova chamada: assertEquals(4 * DEFAULT_MAX_SIZE, rc.getCardinality(), "Era esperado valores iguais, mas  4 * DEFAULT_MAX_SIZE é diferente de " + result1988 + " <rc.getCardinality()>")
chamada antiga: assertEquals(4 * DEFAULT_MAX_SIZE, result.getCardinality())
nova chamada: assertEquals(4 * DEFAULT_MAX_SIZE, result.getCardinality(), "Era esperado valores iguais, mas  4 * DEFAULT_MAX_SIZE é diferente de " + result1989 + " <result.getCardinality()>")
chamada antiga: assertEquals(4 * DEFAULT_MAX_SIZE, bc.getCardinality())
nova chamada: assertEquals(4 * DEFAULT_MAX_SIZE, bc.getCardinality(), "Era esperado valores iguais, mas  4 * DEFAULT_MAX_SIZE é diferente de " + result1990 + " <bc.getCardinality()>")
chamada antiga: assertEquals(4 * DEFAULT_MAX_SIZE, rc.getCardinality())
nova chamada: assertEquals(4 * DEFAULT_MAX_SIZE, rc.getCardinality(), "Era esperado valores iguais, mas  4 * DEFAULT_MAX_SIZE é diferente de " + result1991 + " <rc.getCardinality()>")
chamada antiga: assertTrue(bc instanceof ArrayContainer)
nova chamada: assertTrue(bc instanceof ArrayContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(rc instanceof RunContainer)
nova chamada: assertTrue(rc instanceof RunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(rcSize, rc.getCardinality())
nova chamada: assertEquals(rcSize, rc.getCardinality(), "Era esperado valores iguais, mas  rcSize é diferente de " + result1992 + " <rc.getCardinality()>")
chamada antiga: assertEquals(bcSize, bc.getCardinality())
nova chamada: assertEquals(bcSize, bc.getCardinality(), "Era esperado valores iguais, mas  bcSize é diferente de " + result1993 + " <bc.getCardinality()>")
chamada antiga: assertEquals(rcSize, result.getCardinality())
nova chamada: assertEquals(rcSize, result.getCardinality(), "Era esperado valores iguais, mas  rcSize é diferente de " + result1994 + " <result.getCardinality()>")
chamada antiga: assertTrue(bc instanceof ArrayContainer)
nova chamada: assertTrue(bc instanceof ArrayContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(rc instanceof RunContainer)
nova chamada: assertTrue(rc instanceof RunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(rcSize, rc.getCardinality())
nova chamada: assertEquals(rcSize, rc.getCardinality(), "Era esperado valores iguais, mas  rcSize é diferente de " + result1995 + " <rc.getCardinality()>")
chamada antiga: assertEquals(bcSize, bc.getCardinality())
nova chamada: assertEquals(bcSize, bc.getCardinality(), "Era esperado valores iguais, mas  bcSize é diferente de " + result1996 + " <bc.getCardinality()>")
chamada antiga: assertEquals(rcSize - bcSize, result.getCardinality())
nova chamada: assertEquals(rcSize - bcSize, result.getCardinality(), "Era esperado valores iguais, mas  rcSize - bcSize é diferente de " + result1997 + " <result.getCardinality()>")
chamada antiga: assertTrue(bc instanceof ArrayContainer)
nova chamada: assertTrue(bc instanceof ArrayContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(rc instanceof RunContainer)
nova chamada: assertTrue(rc instanceof RunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(rcSize, rc.getCardinality())
nova chamada: assertEquals(rcSize, rc.getCardinality(), "Era esperado valores iguais, mas  rcSize é diferente de " + result1998 + " <rc.getCardinality()>")
chamada antiga: assertEquals(bcSize, bc.getCardinality())
nova chamada: assertEquals(bcSize, bc.getCardinality(), "Era esperado valores iguais, mas  bcSize é diferente de " + result1999 + " <bc.getCardinality()>")
chamada antiga: assertEquals(rcSize - 3, result.getCardinality())
nova chamada: assertEquals(rcSize - 3, result.getCardinality(), "Era esperado valores iguais, mas  rcSize - 3 é diferente de " + result2000 + " <result.getCardinality()>")
chamada antiga: assertTrue(result.contains((char) 5))
nova chamada: assertTrue(result.contains((char) 5), "Era esperado verdadeiro, mas " + result2001 + " <result.contains((char) 5)> é falso")
chamada antiga: assertTrue(result.contains((char) 0))
nova chamada: assertTrue(result.contains((char) 0), "Era esperado verdadeiro, mas " + result2002 + " <result.contains((char) 0)> é falso")
chamada antiga: assertEquals(1, result.getCardinality())
nova chamada: assertEquals(1, result.getCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result2003 + " <result.getCardinality()>")
chamada antiga: assertTrue(result.contains((char) 1))
nova chamada: assertTrue(result.contains((char) 1), "Era esperado verdadeiro, mas " + result2004 + " <result.contains((char) 1)> é falso")
chamada antiga: assertEquals(1, result.getCardinality())
nova chamada: assertEquals(1, result.getCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result2005 + " <result.getCardinality()>")
chamada antiga: assertTrue(result.contains((char) 1))
nova chamada: assertTrue(result.contains((char) 1), "Era esperado verdadeiro, mas " + result2006 + " <result.contains((char) 1)> é falso")
chamada antiga: assertEquals(1, result.getCardinality())
nova chamada: assertEquals(1, result.getCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result2007 + " <result.getCardinality()>")
chamada antiga: assertTrue(result.contains((char) 1))
nova chamada: assertTrue(result.contains((char) 1), "Era esperado verdadeiro, mas " + result2008 + " <result.contains((char) 1)> é falso")
chamada antiga: assertEquals(1, result.getCardinality())
nova chamada: assertEquals(1, result.getCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result2009 + " <result.getCardinality()>")
chamada antiga: assertTrue(result.contains((char) 1))
nova chamada: assertTrue(result.contains((char) 1), "Era esperado verdadeiro, mas " + result2010 + " <result.contains((char) 1)> é falso")
chamada antiga: assertEquals(0, result.getCardinality())
nova chamada: assertEquals(0, result.getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result2011 + " <result.getCardinality()>")
chamada antiga: assertEquals(0, result.getCardinality())
nova chamada: assertEquals(0, result.getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result2012 + " <result.getCardinality()>")
chamada antiga: assertEquals(answer, result)
nova chamada: assertEquals(answer, result, "Era esperado valores iguais, mas  answer é diferente de " + " result")
chamada antiga: assertEquals(rc2, rc1.xor(rc2))
nova chamada: assertEquals(rc2, rc1.xor(rc2), "Era esperado valores iguais, mas  rc2 é diferente de " + result2013 + " <rc1.xor(rc2)>")
chamada antiga: assertEquals(rc2, rc2.xor(rc1))
nova chamada: assertEquals(rc2, rc2.xor(rc1), "Era esperado valores iguais, mas  rc2 é diferente de " + result2014 + " <rc2.xor(rc1)>")
chamada antiga: assertFalse(rc.intersects(ac))
nova chamada: assertFalse(rc.intersects(ac), "Era esperado falso, mas " + result2015 + " <rc.intersects(ac)> é verdadeiro ")
chamada antiga: assertFalse(ac.intersects(rc))
nova chamada: assertFalse(ac.intersects(rc), "Era esperado falso, mas " + result2016 + " <ac.intersects(rc)> é verdadeiro ")
chamada antiga: assertFalse(rc.intersects(ac))
nova chamada: assertFalse(rc.intersects(ac), "Era esperado falso, mas " + result2017 + " <rc.intersects(ac)> é verdadeiro ")
chamada antiga: assertFalse(ac.intersects(rc))
nova chamada: assertFalse(ac.intersects(rc), "Era esperado falso, mas " + result2018 + " <ac.intersects(rc)> é verdadeiro ")
chamada antiga: assertFalse(rc.intersects(ac))
nova chamada: assertFalse(rc.intersects(ac), "Era esperado falso, mas " + result2019 + " <rc.intersects(ac)> é verdadeiro ")
chamada antiga: assertFalse(ac.intersects(rc))
nova chamada: assertFalse(ac.intersects(rc), "Era esperado falso, mas " + result2020 + " <ac.intersects(rc)> é verdadeiro ")
chamada antiga: assertTrue(rc.intersects(ac))
nova chamada: assertTrue(rc.intersects(ac), "Era esperado verdadeiro, mas " + result2021 + " <rc.intersects(ac)> é falso")
chamada antiga: assertTrue(ac.intersects(rc))
nova chamada: assertTrue(ac.intersects(rc), "Era esperado verdadeiro, mas " + result2022 + " <ac.intersects(rc)> é falso")
chamada antiga: assertFalse(rc1.intersects(rc2))
nova chamada: assertFalse(rc1.intersects(rc2), "Era esperado falso, mas " + result2023 + " <rc1.intersects(rc2)> é verdadeiro ")
chamada antiga: assertFalse(rc1.intersects(rc2))
nova chamada: assertFalse(rc1.intersects(rc2), "Era esperado falso, mas " + result2024 + " <rc1.intersects(rc2)> é verdadeiro ")
chamada antiga: assertFalse(rc1.intersects(rc2))
nova chamada: assertFalse(rc1.intersects(rc2), "Era esperado falso, mas " + result2025 + " <rc1.intersects(rc2)> é verdadeiro ")
chamada antiga: assertFalse(rc1.intersects(rc2))
nova chamada: assertFalse(rc1.intersects(rc2), "Era esperado falso, mas " + result2026 + " <rc1.intersects(rc2)> é verdadeiro ")
chamada antiga: assertTrue(rc1.intersects(rc2))
nova chamada: assertTrue(rc1.intersects(rc2), "Era esperado verdadeiro, mas " + result2027 + " <rc1.intersects(rc2)> é falso")
chamada antiga: assertFalse(rc.intersects(bc))
nova chamada: assertFalse(rc.intersects(bc), "Era esperado falso, mas " + result2028 + " <rc.intersects(bc)> é verdadeiro ")
chamada antiga: assertThrows(RuntimeException.class, () -> new RunContainer(new char[] { 1, 2, 10, 3 }, 5))
nova chamada: assertThrows(RuntimeException.class, () -> new RunContainer(new char[] { 1, 2, 10, 3 }, 5), "Era esperado que a exceção  RuntimeException.class fosse lançada, mas não foi")
chamada antiga: assertTrue(rc.contains((char) 13))
nova chamada: assertTrue(rc.contains((char) 13), "Era esperado verdadeiro, mas " + result2029 + " <rc.contains((char) 13)> é falso")
chamada antiga: assertTrue(rc.contains((char) 13))
nova chamada: assertTrue(rc.contains((char) 13), "Era esperado verdadeiro, mas " + result2030 + " <rc.contains((char) 13)> é falso")
chamada antiga: assertEquals("[32200,34999][65535,65535]", rc.toString())
nova chamada: assertEquals("[32200,34999][65535,65535]", rc.toString(), "Era esperado valores iguais, mas  '[32200,34999][65535,65535]' é diferente de " + result2031 + " <rc.toString()>")
chamada antiga: assertEquals(1, rc.getCardinality())
nova chamada: assertEquals(1, rc.getCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result2032 + " <rc.getCardinality()>")
chamada antiga: assertEquals(13, rc.getCardinality())
nova chamada: assertEquals(13, rc.getCardinality(), "Era esperado valores iguais, mas  13 é diferente de " + result2033 + " <rc.getCardinality()>")
chamada antiga: assertEquals(1 << 16, rc.getCardinality())
nova chamada: assertEquals(1 << 16, rc.getCardinality(), "Era esperado valores iguais, mas  1  16 é diferente de " + result2034 + " <rc.getCardinality()>")
chamada antiga: assertEquals(1, rc.getCardinality())
nova chamada: assertEquals(1, rc.getCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result2035 + " <rc.getCardinality()>")
chamada antiga: assertEquals(13, rc.getCardinality())
nova chamada: assertEquals(13, rc.getCardinality(), "Era esperado valores iguais, mas  13 é diferente de " + result2036 + " <rc.getCardinality()>")
chamada antiga: assertEquals(1 << 16, rc.getCardinality())
nova chamada: assertEquals(1 << 16, rc.getCardinality(), "Era esperado valores iguais, mas  1  16 é diferente de " + result2037 + " <rc.getCardinality()>")
chamada antiga: assertEquals(-1, rbc.getCardinality())
nova chamada: assertEquals(-1, rbc.getCardinality(), "Era esperado valores iguais, mas  -1 é diferente de " + result2038 + " <rbc.getCardinality()>")
chamada antiga: assertEquals(1 << 16, repaired.getCardinality())
nova chamada: assertEquals(1 << 16, repaired.getCardinality(), "Era esperado valores iguais, mas  1  16 é diferente de " + result2039 + " <repaired.getCardinality()>")
chamada antiga: assertTrue(repaired instanceof RunContainer)
nova chamada: assertTrue(repaired instanceof RunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(1 << 16, rbc.getCardinality())
nova chamada: assertEquals(1 << 16, rbc.getCardinality(), "Era esperado valores iguais, mas  1  16 é diferente de " + result2040 + " <rbc.getCardinality()>")
chamada antiga: assertTrue(rbc instanceof RunContainer)
nova chamada: assertTrue(rbc instanceof RunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(1 << 16, result.getCardinality())
nova chamada: assertEquals(1 << 16, result.getCardinality(), "Era esperado valores iguais, mas  1  16 é diferente de " + result2041 + " <result.getCardinality()>")
chamada antiga: assertEquals(1 << 16, iresult.getCardinality())
nova chamada: assertEquals(1 << 16, iresult.getCardinality(), "Era esperado valores iguais, mas  1  16 é diferente de " + result2042 + " <iresult.getCardinality()>")
chamada antiga: assertTrue(result instanceof RunContainer)
nova chamada: assertTrue(result instanceof RunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(iresult instanceof RunContainer)
nova chamada: assertTrue(iresult instanceof RunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(8677, result.getCardinality())
nova chamada: assertEquals(8677, result.getCardinality(), "Era esperado valores iguais, mas  8677 é diferente de " + result2043 + " <result.getCardinality()>")
chamada antiga: assertTrue(rc.getCardinality() > ArrayContainer.DEFAULT_MAX_SIZE)
nova chamada: assertTrue(rc.getCardinality() > ArrayContainer.DEFAULT_MAX_SIZE, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(11437, result.getCardinality())
nova chamada: assertEquals(11437, result.getCardinality(), "Era esperado valores iguais, mas  11437 é diferente de " + result2044 + " <result.getCardinality()>")
chamada antiga: assertEquals(5046, result.getCardinality())
nova chamada: assertEquals(5046, result.getCardinality(), "Era esperado valores iguais, mas  5046 é diferente de " + result2045 + " <result.getCardinality()>")
chamada antiga: assertEquals(6031, result.getCardinality())
nova chamada: assertEquals(6031, result.getCardinality(), "Era esperado valores iguais, mas  6031 é diferente de " + result2046 + " <result.getCardinality()>")
chamada antiga: assertThrows(NoSuchElementException.class, () -> new RunContainer().first())
nova chamada: assertThrows(NoSuchElementException.class, () -> new RunContainer().first(), "Era esperado que a exceção  NoSuchElementException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(NoSuchElementException.class, () -> new RunContainer().last())
nova chamada: assertThrows(NoSuchElementException.class, () -> new RunContainer().last(), "Era esperado que a exceção  NoSuchElementException.class fosse lançada, mas não foi")
chamada antiga: assertEquals(roaringWithRun.first(), 32768)
nova chamada: assertEquals(roaringWithRun.first(), 32768, "Era esperado valores iguais, mas " + result2047 + " <roaringWithRun.first()> é diferente de " + " 32768")
chamada antiga: assertTrue(rc.contains(subset))
nova chamada: assertTrue(rc.contains(subset), "Era esperado verdadeiro, mas " + result2048 + " <rc.contains(subset)> é falso")
chamada antiga: assertTrue(rc.contains(subset))
nova chamada: assertTrue(rc.contains(subset), "Era esperado verdadeiro, mas " + result2049 + " <rc.contains(subset)> é falso")
chamada antiga: assertTrue(rc.contains(subset))
nova chamada: assertTrue(rc.contains(subset), "Era esperado verdadeiro, mas " + result2050 + " <rc.contains(subset)> é falso")
chamada antiga: assertFalse(rc.contains(subset))
nova chamada: assertFalse(rc.contains(subset), "Era esperado falso, mas " + result2051 + " <rc.contains(subset)> é verdadeiro ")
chamada antiga: assertTrue(rc.contains(subset))
nova chamada: assertTrue(rc.contains(subset), "Era esperado verdadeiro, mas " + result2052 + " <rc.contains(subset)> é falso")
chamada antiga: assertFalse(rc.contains(superset))
nova chamada: assertFalse(rc.contains(superset), "Era esperado falso, mas " + result2053 + " <rc.contains(superset)> é verdadeiro ")
chamada antiga: assertFalse(rc.contains(disjoint))
nova chamada: assertFalse(rc.contains(disjoint), "Era esperado falso, mas " + result2054 + " <rc.contains(disjoint)> é verdadeiro ")
chamada antiga: assertFalse(disjoint.contains(rc))
nova chamada: assertFalse(disjoint.contains(rc), "Era esperado falso, mas " + result2055 + " <disjoint.contains(rc)> é verdadeiro ")
chamada antiga: assertTrue(rc.contains(subset))
nova chamada: assertTrue(rc.contains(subset), "Era esperado verdadeiro, mas " + result2056 + " <rc.contains(subset)> é falso")
chamada antiga: assertTrue(rc.contains(subset))
nova chamada: assertTrue(rc.contains(subset), "Era esperado verdadeiro, mas " + result2057 + " <rc.contains(subset)> é falso")
chamada antiga: assertTrue(rc.contains(subset))
nova chamada: assertTrue(rc.contains(subset), "Era esperado verdadeiro, mas " + result2058 + " <rc.contains(subset)> é falso")
chamada antiga: assertFalse(rc.contains(superset))
nova chamada: assertFalse(rc.contains(superset), "Era esperado falso, mas " + result2059 + " <rc.contains(superset)> é verdadeiro ")
chamada antiga: assertTrue(rc.contains(subset))
nova chamada: assertTrue(rc.contains(subset), "Era esperado verdadeiro, mas " + result2060 + " <rc.contains(subset)> é falso")
chamada antiga: assertFalse(rc.contains(subset))
nova chamada: assertFalse(rc.contains(subset), "Era esperado falso, mas " + result2061 + " <rc.contains(subset)> é verdadeiro ")
chamada antiga: assertFalse(rc.contains(disjoint))
nova chamada: assertFalse(rc.contains(disjoint), "Era esperado falso, mas " + result2062 + " <rc.contains(disjoint)> é verdadeiro ")
chamada antiga: assertFalse(disjoint.contains(rc))
nova chamada: assertFalse(disjoint.contains(rc), "Era esperado falso, mas " + result2063 + " <disjoint.contains(rc)> é verdadeiro ")
chamada antiga: assertTrue(rc.contains(subset))
nova chamada: assertTrue(rc.contains(subset), "Era esperado verdadeiro, mas " + result2064 + " <rc.contains(subset)> é falso")
chamada antiga: assertTrue(rc.contains(subset))
nova chamada: assertTrue(rc.contains(subset), "Era esperado verdadeiro, mas " + result2065 + " <rc.contains(subset)> é falso")
chamada antiga: assertTrue(rc.contains(subset))
nova chamada: assertTrue(rc.contains(subset), "Era esperado verdadeiro, mas " + result2066 + " <rc.contains(subset)> é falso")
chamada antiga: assertFalse(rc.contains(shifted))
nova chamada: assertFalse(rc.contains(shifted), "Era esperado falso, mas " + result2067 + " <rc.contains(shifted)> é verdadeiro ")
chamada antiga: assertTrue(rc.contains(subset))
nova chamada: assertTrue(rc.contains(subset), "Era esperado verdadeiro, mas " + result2068 + " <rc.contains(subset)> é falso")
chamada antiga: assertFalse(rc.contains(superset))
nova chamada: assertFalse(rc.contains(superset), "Era esperado falso, mas " + result2069 + " <rc.contains(superset)> é verdadeiro ")
chamada antiga: assertFalse(rc.contains(disjoint))
nova chamada: assertFalse(rc.contains(disjoint), "Era esperado falso, mas " + result2070 + " <rc.contains(disjoint)> é verdadeiro ")
chamada antiga: assertFalse(disjoint.contains(rc))
nova chamada: assertFalse(disjoint.contains(rc), "Era esperado falso, mas " + result2071 + " <disjoint.contains(rc)> é verdadeiro ")
chamada antiga: assertFalse(rc.contains(disjoint))
nova chamada: assertFalse(rc.contains(disjoint), "Era esperado falso, mas " + result2072 + " <rc.contains(disjoint)> é verdadeiro ")
chamada antiga: assertFalse(disjoint.contains(rc))
nova chamada: assertFalse(disjoint.contains(rc), "Era esperado falso, mas " + result2073 + " <disjoint.contains(rc)> é verdadeiro ")
chamada antiga: assertFalse(rc.contains(disjoint))
nova chamada: assertFalse(rc.contains(disjoint), "Era esperado falso, mas " + result2074 + " <rc.contains(disjoint)> é verdadeiro ")
chamada antiga: assertFalse(disjoint.contains(rc))
nova chamada: assertFalse(disjoint.contains(rc), "Era esperado falso, mas " + result2075 + " <disjoint.contains(rc)> é verdadeiro ")
chamada antiga: assertFalse(rc.contains(disjoint))
nova chamada: assertFalse(rc.contains(disjoint), "Era esperado falso, mas " + result2076 + " <rc.contains(disjoint)> é verdadeiro ")
chamada antiga: assertFalse(disjoint.contains(rc))
nova chamada: assertFalse(disjoint.contains(rc), "Era esperado falso, mas " + result2077 + " <disjoint.contains(rc)> é verdadeiro ")
chamada antiga: assertEquals(rc, ac)
nova chamada: assertEquals(rc, ac, "Era esperado valores iguais, mas  rc é diferente de " + " ac")
chamada antiga: assertEquals(ac, rc)
nova chamada: assertEquals(ac, rc, "Era esperado valores iguais, mas  ac é diferente de " + " rc")
chamada antiga: assertNotEquals(rc, ac)
nova chamada: assertNotEquals(rc, ac, "Era esperado valores diferentes, mas  rc é igual a " + " ac")
chamada antiga: assertNotEquals(ac, rc)
nova chamada: assertNotEquals(ac, rc, "Era esperado valores diferentes, mas  ac é igual a " + " rc")
chamada antiga: assertNotEquals(rc, ac)
nova chamada: assertNotEquals(rc, ac, "Era esperado valores diferentes, mas  rc é igual a " + " ac")
chamada antiga: assertNotEquals(ac, rc)
nova chamada: assertNotEquals(ac, rc, "Era esperado valores diferentes, mas  ac é igual a " + " rc")
chamada antiga: assertNotEquals(rc, ac)
nova chamada: assertNotEquals(rc, ac, "Era esperado valores diferentes, mas  rc é igual a " + " ac")
chamada antiga: assertNotEquals(ac, rc)
nova chamada: assertNotEquals(ac, rc, "Era esperado valores diferentes, mas  ac é igual a " + " rc")
chamada antiga: assertNotEquals(rc, ac)
nova chamada: assertNotEquals(rc, ac, "Era esperado valores diferentes, mas  rc é igual a " + " ac")
chamada antiga: assertNotEquals(ac, rc)
nova chamada: assertNotEquals(ac, rc, "Era esperado valores diferentes, mas  ac é igual a " + " rc")
chamada antiga: assertNotEquals(full, new ArrayContainer().add(0, 10))
nova chamada: assertNotEquals(full, new ArrayContainer().add(0, 10), "Era esperado valores diferentes, mas  full é igual a " + result2078 + " <new ArrayContainer().add(0, 10)>")
chamada antiga: assertTrue(RunContainer.full().isFull())
nova chamada: assertTrue(RunContainer.full().isFull(), "Era esperado verdadeiro, mas " + result2079 + " <RunContainer.full().isFull()> é falso")
chamada antiga: assertTrue(c.isFull())
nova chamada: assertTrue(c.isFull(), "Era esperado verdadeiro, mas " + result2080 + " <c.isFull()> é falso")
chamada antiga: assertEquals(65536, c.getCardinality())
nova chamada: assertEquals(65536, c.getCardinality(), "Era esperado valores iguais, mas  65536 é diferente de " + result2081 + " <c.getCardinality()>")
chamada antiga: assertEquals(983, c.getCardinality())
nova chamada: assertEquals(983, c.getCardinality(), "Era esperado valores iguais, mas  983 é diferente de " + result2082 + " <c.getCardinality()>")
chamada antiga: assertEquals(a, b)
nova chamada: assertEquals(a, b, "Era esperado valores iguais, mas  a é diferente de " + " b")
chamada antiga: assertEquals(45679, c.getCardinality())
nova chamada: assertEquals(45679, c.getCardinality(), "Era esperado valores iguais, mas  45679 é diferente de " + result2083 + " <c.getCardinality()>")
chamada antiga: assertEquals(2, c.getCardinality())
nova chamada: assertEquals(2, c.getCardinality(), "Era esperado valores iguais, mas  2 é diferente de " + result2084 + " <c.getCardinality()>")
chamada antiga: assertTrue(container.intersects(0, 1))
nova chamada: assertTrue(container.intersects(0, 1), "Era esperado verdadeiro, mas " + result2085 + " <container.intersects(0, 1)> é falso")
chamada antiga: assertTrue(container.intersects(0, 101))
nova chamada: assertTrue(container.intersects(0, 101), "Era esperado verdadeiro, mas " + result2086 + " <container.intersects(0, 101)> é falso")
chamada antiga: assertTrue(container.intersects(0, 1 << 16))
nova chamada: assertTrue(container.intersects(0, 1 << 16), "Era esperado verdadeiro, mas " + result2087 + " <container.intersects(0, 1 << 16)> é falso")
chamada antiga: assertFalse(container.intersects(11, 1 << 16))
nova chamada: assertFalse(container.intersects(11, 1 << 16), "Era esperado falso, mas " + result2088 + " <container.intersects(11, 1 << 16)> é verdadeiro ")
chamada antiga: assertFalse(container.intersects(0, 1))
nova chamada: assertFalse(container.intersects(0, 1), "Era esperado falso, mas " + result2089 + " <container.intersects(0, 1)> é verdadeiro ")
chamada antiga: assertTrue(container.intersects(0, lower16Bits(-40)))
nova chamada: assertTrue(container.intersects(0, lower16Bits(-40)), "Era esperado verdadeiro, mas " + result2090 + " <container.intersects(0, lower16Bits(-40))> é falso")
chamada antiga: assertFalse(container.intersects(lower16Bits(-100), lower16Bits(-55)))
nova chamada: assertFalse(container.intersects(lower16Bits(-100), lower16Bits(-55)), "Era esperado falso, mas " + result2091 + " <container.intersects(lower16Bits(-100), lower16Bits(-55))> é verdadeiro ")
chamada antiga: assertTrue(container.intersects(11, 1 << 16))
nova chamada: assertTrue(container.intersects(11, 1 << 16), "Era esperado verdadeiro, mas " + result2092 + " <container.intersects(11, 1 << 16)> é falso")
chamada antiga: assertTrue(container.intersects(0, 1))
nova chamada: assertTrue(container.intersects(0, 1), "Era esperado verdadeiro, mas " + result2093 + " <container.intersects(0, 1)> é falso")
chamada antiga: assertTrue(container.intersects(0, 101))
nova chamada: assertTrue(container.intersects(0, 101), "Era esperado verdadeiro, mas " + result2094 + " <container.intersects(0, 101)> é falso")
chamada antiga: assertTrue(container.intersects(0, lower16Bits(-1)))
nova chamada: assertTrue(container.intersects(0, lower16Bits(-1)), "Era esperado verdadeiro, mas " + result2095 + " <container.intersects(0, lower16Bits(-1))> é falso")
chamada antiga: assertTrue(container.intersects(11, lower16Bits(-1)))
nova chamada: assertTrue(container.intersects(11, lower16Bits(-1)), "Era esperado verdadeiro, mas " + result2096 + " <container.intersects(11, lower16Bits(-1))> é falso")
chamada antiga: assertTrue(container.intersects(0, lower16Bits(-40)))
nova chamada: assertTrue(container.intersects(0, lower16Bits(-40)), "Era esperado verdadeiro, mas " + result2097 + " <container.intersects(0, lower16Bits(-40))> é falso")
chamada antiga: assertFalse(container.intersects(lower16Bits(-100), lower16Bits(-55)))
nova chamada: assertFalse(container.intersects(lower16Bits(-100), lower16Bits(-55)), "Era esperado falso, mas " + result2098 + " <container.intersects(lower16Bits(-100), lower16Bits(-55))> é verdadeiro ")
chamada antiga: assertFalse(container.intersects(lower16Bits(-9), lower16Bits(-1)))
nova chamada: assertFalse(container.intersects(lower16Bits(-9), lower16Bits(-1)), "Era esperado falso, mas " + result2099 + " <container.intersects(lower16Bits(-9), lower16Bits(-1))> é verdadeiro ")
chamada antiga: assertTrue(container.intersects(11, 1 << 16))
nova chamada: assertTrue(container.intersects(11, 1 << 16), "Era esperado verdadeiro, mas " + result2100 + " <container.intersects(11, 1 << 16)> é falso")
chamada antiga: assertTrue(RunContainer.full().contains(0, 1 << 16))
nova chamada: assertTrue(RunContainer.full().contains(0, 1 << 16), "Era esperado verdadeiro, mas " + result2101 + " <RunContainer.full().contains(0, 1 << 16)> é falso")
chamada antiga: assertFalse(RunContainer.full().flip((char) (1 << 15)).contains(0, 1 << 16))
nova chamada: assertFalse(RunContainer.full().flip((char) (1 << 15)).contains(0, 1 << 16), "Era esperado falso, mas " + result2102 + " <RunContainer.full().flip((char) (1 << 15)).contains(0, 1 << 16)> é verdadeiro ")
chamada antiga: assertFalse(rc.contains(0, 100))
nova chamada: assertFalse(rc.contains(0, 100), "Era esperado falso, mas " + result2103 + " <rc.contains(0, 100)> é verdadeiro ")
chamada antiga: assertFalse(rc.contains(0, 100000))
nova chamada: assertFalse(rc.contains(0, 100000), "Era esperado falso, mas " + result2104 + " <rc.contains(0, 100000)> é verdadeiro ")
chamada antiga: assertTrue(rc.contains(1, 100))
nova chamada: assertTrue(rc.contains(1, 100), "Era esperado verdadeiro, mas " + result2105 + " <rc.contains(1, 100)> é falso")
chamada antiga: assertTrue(rc.contains(1, 99))
nova chamada: assertTrue(rc.contains(1, 99), "Era esperado verdadeiro, mas " + result2106 + " <rc.contains(1, 99)> é falso")
chamada antiga: assertTrue(rc.contains(2, 100))
nova chamada: assertTrue(rc.contains(2, 100), "Era esperado verdadeiro, mas " + result2107 + " <rc.contains(2, 100)> é falso")
chamada antiga: assertTrue(rc.contains(5000, 10000))
nova chamada: assertTrue(rc.contains(5000, 10000), "Era esperado verdadeiro, mas " + result2108 + " <rc.contains(5000, 10000)> é falso")
chamada antiga: assertTrue(rc.contains(5000, 9999))
nova chamada: assertTrue(rc.contains(5000, 9999), "Era esperado verdadeiro, mas " + result2109 + " <rc.contains(5000, 9999)> é falso")
chamada antiga: assertTrue(rc.contains(5001, 9999))
nova chamada: assertTrue(rc.contains(5001, 9999), "Era esperado verdadeiro, mas " + result2110 + " <rc.contains(5001, 9999)> é falso")
chamada antiga: assertTrue(rc.contains(5001, 10000))
nova chamada: assertTrue(rc.contains(5001, 10000), "Era esperado verdadeiro, mas " + result2111 + " <rc.contains(5001, 10000)> é falso")
chamada antiga: assertFalse(rc.contains(100, 5000))
nova chamada: assertFalse(rc.contains(100, 5000), "Era esperado falso, mas " + result2112 + " <rc.contains(100, 5000)> é verdadeiro ")
chamada antiga: assertFalse(rc.contains(50, 5000))
nova chamada: assertFalse(rc.contains(50, 5000), "Era esperado falso, mas " + result2113 + " <rc.contains(50, 5000)> é verdadeiro ")
chamada antiga: assertFalse(rc.contains(4000, 6000))
nova chamada: assertFalse(rc.contains(4000, 6000), "Era esperado falso, mas " + result2114 + " <rc.contains(4000, 6000)> é verdadeiro ")
chamada antiga: assertFalse(rc.contains(10001, 20000))
nova chamada: assertFalse(rc.contains(10001, 20000), "Era esperado falso, mas " + result2115 + " <rc.contains(10001, 20000)> é verdadeiro ")
chamada antiga: assertFalse(rc.contains(0, 100))
nova chamada: assertFalse(rc.contains(0, 100), "Era esperado falso, mas " + result2116 + " <rc.contains(0, 100)> é verdadeiro ")
chamada antiga: assertFalse(rc.contains(500, 600))
nova chamada: assertFalse(rc.contains(500, 600), "Era esperado falso, mas " + result2117 + " <rc.contains(500, 600)> é verdadeiro ")
chamada antiga: assertFalse(rc.contains(501, 600))
nova chamada: assertFalse(rc.contains(501, 600), "Era esperado falso, mas " + result2118 + " <rc.contains(501, 600)> é verdadeiro ")
chamada antiga: assertTrue(rc.contains(502, 600))
nova chamada: assertTrue(rc.contains(502, 600), "Era esperado verdadeiro, mas " + result2119 + " <rc.contains(502, 600)> é falso")
chamada antiga: assertFalse(rc.contains(600, 700))
nova chamada: assertFalse(rc.contains(600, 700), "Era esperado falso, mas " + result2120 + " <rc.contains(600, 700)> é verdadeiro ")
chamada antiga: assertTrue(rc.contains(9999, 10000))
nova chamada: assertTrue(rc.contains(9999, 10000), "Era esperado verdadeiro, mas " + result2121 + " <rc.contains(9999, 10000)> é falso")
chamada antiga: assertFalse(rc.contains(9999, 10001))
nova chamada: assertFalse(rc.contains(9999, 10001), "Era esperado falso, mas " + result2122 + " <rc.contains(9999, 10001)> é verdadeiro ")
chamada antiga: assertEquals(64, container.nextValue((char) 0))
nova chamada: assertEquals(64, container.nextValue((char) 0), "Era esperado valores iguais, mas  64 é diferente de " + result2123 + " <container.nextValue((char) 0)>")
chamada antiga: assertEquals(64, container.nextValue((char) 64))
nova chamada: assertEquals(64, container.nextValue((char) 64), "Era esperado valores iguais, mas  64 é diferente de " + result2124 + " <container.nextValue((char) 64)>")
chamada antiga: assertEquals(65, container.nextValue((char) 65))
nova chamada: assertEquals(65, container.nextValue((char) 65), "Era esperado valores iguais, mas  65 é diferente de " + result2125 + " <container.nextValue((char) 65)>")
chamada antiga: assertEquals(128, container.nextValue((char) 128))
nova chamada: assertEquals(128, container.nextValue((char) 128), "Era esperado valores iguais, mas  128 é diferente de " + result2126 + " <container.nextValue((char) 128)>")
chamada antiga: assertEquals(-1, container.nextValue((char) 129))
nova chamada: assertEquals(-1, container.nextValue((char) 129), "Era esperado valores iguais, mas  -1 é diferente de " + result2127 + " <container.nextValue((char) 129)>")
chamada antiga: assertEquals(64, container.nextValue((char) 0))
nova chamada: assertEquals(64, container.nextValue((char) 0), "Era esperado valores iguais, mas  64 é diferente de " + result2128 + " <container.nextValue((char) 0)>")
chamada antiga: assertEquals(64, container.nextValue((char) 64))
nova chamada: assertEquals(64, container.nextValue((char) 64), "Era esperado valores iguais, mas  64 é diferente de " + result2129 + " <container.nextValue((char) 64)>")
chamada antiga: assertEquals(65, container.nextValue((char) 65))
nova chamada: assertEquals(65, container.nextValue((char) 65), "Era esperado valores iguais, mas  65 é diferente de " + result2130 + " <container.nextValue((char) 65)>")
chamada antiga: assertEquals(128, container.nextValue((char) 128))
nova chamada: assertEquals(128, container.nextValue((char) 128), "Era esperado valores iguais, mas  128 é diferente de " + result2131 + " <container.nextValue((char) 128)>")
chamada antiga: assertEquals(256, container.nextValue((char) 129))
nova chamada: assertEquals(256, container.nextValue((char) 129), "Era esperado valores iguais, mas  256 é diferente de " + result2132 + " <container.nextValue((char) 129)>")
chamada antiga: assertEquals(-1, container.nextValue((char) 512))
nova chamada: assertEquals(-1, container.nextValue((char) 512), "Era esperado valores iguais, mas  -1 é diferente de " + result2133 + " <container.nextValue((char) 512)>")
chamada antiga: assertEquals(64, container.nextValue((char) 0))
nova chamada: assertEquals(64, container.nextValue((char) 0), "Era esperado valores iguais, mas  64 é diferente de " + result2134 + " <container.nextValue((char) 0)>")
chamada antiga: assertEquals(64, container.nextValue((char) 63))
nova chamada: assertEquals(64, container.nextValue((char) 63), "Era esperado valores iguais, mas  64 é diferente de " + result2135 + " <container.nextValue((char) 63)>")
chamada antiga: assertEquals(64, container.nextValue((char) 64))
nova chamada: assertEquals(64, container.nextValue((char) 64), "Era esperado valores iguais, mas  64 é diferente de " + result2136 + " <container.nextValue((char) 64)>")
chamada antiga: assertEquals(65, container.nextValue((char) 65))
nova chamada: assertEquals(65, container.nextValue((char) 65), "Era esperado valores iguais, mas  65 é diferente de " + result2137 + " <container.nextValue((char) 65)>")
chamada antiga: assertEquals(128, container.nextValue((char) 128))
nova chamada: assertEquals(128, container.nextValue((char) 128), "Era esperado valores iguais, mas  128 é diferente de " + result2138 + " <container.nextValue((char) 128)>")
chamada antiga: assertEquals(200, container.nextValue((char) 129))
nova chamada: assertEquals(200, container.nextValue((char) 129), "Era esperado valores iguais, mas  200 é diferente de " + result2139 + " <container.nextValue((char) 129)>")
chamada antiga: assertEquals(200, container.nextValue((char) 199))
nova chamada: assertEquals(200, container.nextValue((char) 199), "Era esperado valores iguais, mas  200 é diferente de " + result2140 + " <container.nextValue((char) 199)>")
chamada antiga: assertEquals(200, container.nextValue((char) 200))
nova chamada: assertEquals(200, container.nextValue((char) 200), "Era esperado valores iguais, mas  200 é diferente de " + result2141 + " <container.nextValue((char) 200)>")
chamada antiga: assertEquals(250, container.nextValue((char) 250))
nova chamada: assertEquals(250, container.nextValue((char) 250), "Era esperado valores iguais, mas  250 é diferente de " + result2142 + " <container.nextValue((char) 250)>")
chamada antiga: assertEquals(5000, container.nextValue((char) 2500))
nova chamada: assertEquals(5000, container.nextValue((char) 2500), "Era esperado valores iguais, mas  5000 é diferente de " + result2143 + " <container.nextValue((char) 2500)>")
chamada antiga: assertEquals(5000, container.nextValue((char) 5000))
nova chamada: assertEquals(5000, container.nextValue((char) 5000), "Era esperado valores iguais, mas  5000 é diferente de " + result2144 + " <container.nextValue((char) 5000)>")
chamada antiga: assertEquals(5200, container.nextValue((char) 5200))
nova chamada: assertEquals(5200, container.nextValue((char) 5200), "Era esperado valores iguais, mas  5200 é diferente de " + result2145 + " <container.nextValue((char) 5200)>")
chamada antiga: assertEquals(-1, container.nextValue((char) 5201))
nova chamada: assertEquals(-1, container.nextValue((char) 5201), "Era esperado valores iguais, mas  -1 é diferente de " + result2146 + " <container.nextValue((char) 5201)>")
chamada antiga: assertEquals(-1, container.previousValue((char) 0))
nova chamada: assertEquals(-1, container.previousValue((char) 0), "Era esperado valores iguais, mas  -1 é diferente de " + result2147 + " <container.previousValue((char) 0)>")
chamada antiga: assertEquals(-1, container.previousValue((char) 63))
nova chamada: assertEquals(-1, container.previousValue((char) 63), "Era esperado valores iguais, mas  -1 é diferente de " + result2148 + " <container.previousValue((char) 63)>")
chamada antiga: assertEquals(64, container.previousValue((char) 64))
nova chamada: assertEquals(64, container.previousValue((char) 64), "Era esperado valores iguais, mas  64 é diferente de " + result2149 + " <container.previousValue((char) 64)>")
chamada antiga: assertEquals(65, container.previousValue((char) 65))
nova chamada: assertEquals(65, container.previousValue((char) 65), "Era esperado valores iguais, mas  65 é diferente de " + result2150 + " <container.previousValue((char) 65)>")
chamada antiga: assertEquals(128, container.previousValue((char) 128))
nova chamada: assertEquals(128, container.previousValue((char) 128), "Era esperado valores iguais, mas  128 é diferente de " + result2151 + " <container.previousValue((char) 128)>")
chamada antiga: assertEquals(128, container.previousValue((char) 129))
nova chamada: assertEquals(128, container.previousValue((char) 129), "Era esperado valores iguais, mas  128 é diferente de " + result2152 + " <container.previousValue((char) 129)>")
chamada antiga: assertEquals(-1, container.previousValue((char) 0))
nova chamada: assertEquals(-1, container.previousValue((char) 0), "Era esperado valores iguais, mas  -1 é diferente de " + result2153 + " <container.previousValue((char) 0)>")
chamada antiga: assertEquals(-1, container.previousValue((char) 63))
nova chamada: assertEquals(-1, container.previousValue((char) 63), "Era esperado valores iguais, mas  -1 é diferente de " + result2154 + " <container.previousValue((char) 63)>")
chamada antiga: assertEquals(64, container.previousValue((char) 64))
nova chamada: assertEquals(64, container.previousValue((char) 64), "Era esperado valores iguais, mas  64 é diferente de " + result2155 + " <container.previousValue((char) 64)>")
chamada antiga: assertEquals(65, container.previousValue((char) 65))
nova chamada: assertEquals(65, container.previousValue((char) 65), "Era esperado valores iguais, mas  65 é diferente de " + result2156 + " <container.previousValue((char) 65)>")
chamada antiga: assertEquals(128, container.previousValue((char) 128))
nova chamada: assertEquals(128, container.previousValue((char) 128), "Era esperado valores iguais, mas  128 é diferente de " + result2157 + " <container.previousValue((char) 128)>")
chamada antiga: assertEquals(128, container.previousValue((char) 129))
nova chamada: assertEquals(128, container.previousValue((char) 129), "Era esperado valores iguais, mas  128 é diferente de " + result2158 + " <container.previousValue((char) 129)>")
chamada antiga: assertEquals(128, container.previousValue((char) 199))
nova chamada: assertEquals(128, container.previousValue((char) 199), "Era esperado valores iguais, mas  128 é diferente de " + result2159 + " <container.previousValue((char) 199)>")
chamada antiga: assertEquals(200, container.previousValue((char) 200))
nova chamada: assertEquals(200, container.previousValue((char) 200), "Era esperado valores iguais, mas  200 é diferente de " + result2160 + " <container.previousValue((char) 200)>")
chamada antiga: assertEquals(250, container.previousValue((char) 250))
nova chamada: assertEquals(250, container.previousValue((char) 250), "Era esperado valores iguais, mas  250 é diferente de " + result2161 + " <container.previousValue((char) 250)>")
chamada antiga: assertEquals(500, container.previousValue((char) 2500))
nova chamada: assertEquals(500, container.previousValue((char) 2500), "Era esperado valores iguais, mas  500 é diferente de " + result2162 + " <container.previousValue((char) 2500)>")
chamada antiga: assertEquals(5000, container.previousValue((char) 5000))
nova chamada: assertEquals(5000, container.previousValue((char) 5000), "Era esperado valores iguais, mas  5000 é diferente de " + result2163 + " <container.previousValue((char) 5000)>")
chamada antiga: assertEquals(5200, container.previousValue((char) 5200))
nova chamada: assertEquals(5200, container.previousValue((char) 5200), "Era esperado valores iguais, mas  5200 é diferente de " + result2164 + " <container.previousValue((char) 5200)>")
chamada antiga: assertEquals(-1, container.previousValue((char) ((1 << 15) | 4)))
nova chamada: assertEquals(-1, container.previousValue((char) ((1 << 15) | 4)), "Era esperado valores iguais, mas  -1 é diferente de " + result2165 + " <container.previousValue((char) ((1 << 15) | 4))>")
chamada antiga: assertEquals(((1 << 15) | 5), container.previousValue((char) ((1 << 15) | 5)))
nova chamada: assertEquals(((1 << 15) | 5), container.previousValue((char) ((1 << 15) | 5)), "Era esperado valores iguais, mas  ((1  15) | 5) é diferente de " + result2166 + " <container.previousValue((char) ((1 << 15) | 5))>")
chamada antiga: assertEquals(((1 << 15) | 5), container.previousValue((char) ((1 << 15) | 6)))
nova chamada: assertEquals(((1 << 15) | 5), container.previousValue((char) ((1 << 15) | 6)), "Era esperado valores iguais, mas  ((1  15) | 5) é diferente de " + result2167 + " <container.previousValue((char) ((1 << 15) | 6))>")
chamada antiga: assertEquals(((1 << 15) | 7), container.previousValue((char) ((1 << 15) | 7)))
nova chamada: assertEquals(((1 << 15) | 7), container.previousValue((char) ((1 << 15) | 7)), "Era esperado valores iguais, mas  ((1  15) | 7) é diferente de " + result2168 + " <container.previousValue((char) ((1 << 15) | 7))>")
chamada antiga: assertEquals(((1 << 15) | 7), container.previousValue((char) ((1 << 15) | 8)))
nova chamada: assertEquals(((1 << 15) | 7), container.previousValue((char) ((1 << 15) | 8)), "Era esperado valores iguais, mas  ((1  15) | 7) é diferente de " + result2169 + " <container.previousValue((char) ((1 << 15) | 8))>")
chamada antiga: assertEquals(((1 << 15) | 5), container.nextValue((char) ((1 << 15) | 4)))
nova chamada: assertEquals(((1 << 15) | 5), container.nextValue((char) ((1 << 15) | 4)), "Era esperado valores iguais, mas  ((1  15) | 5) é diferente de " + result2170 + " <container.nextValue((char) ((1 << 15) | 4))>")
chamada antiga: assertEquals(((1 << 15) | 5), container.nextValue((char) ((1 << 15) | 5)))
nova chamada: assertEquals(((1 << 15) | 5), container.nextValue((char) ((1 << 15) | 5)), "Era esperado valores iguais, mas  ((1  15) | 5) é diferente de " + result2171 + " <container.nextValue((char) ((1 << 15) | 5))>")
chamada antiga: assertEquals(((1 << 15) | 7), container.nextValue((char) ((1 << 15) | 6)))
nova chamada: assertEquals(((1 << 15) | 7), container.nextValue((char) ((1 << 15) | 6)), "Era esperado valores iguais, mas  ((1  15) | 7) é diferente de " + result2172 + " <container.nextValue((char) ((1 << 15) | 6))>")
chamada antiga: assertEquals(((1 << 15) | 7), container.nextValue((char) ((1 << 15) | 7)))
nova chamada: assertEquals(((1 << 15) | 7), container.nextValue((char) ((1 << 15) | 7)), "Era esperado valores iguais, mas  ((1  15) | 7) é diferente de " + result2173 + " <container.nextValue((char) ((1 << 15) | 7))>")
chamada antiga: assertEquals(-1, container.nextValue((char) ((1 << 15) | 8)))
nova chamada: assertEquals(-1, container.nextValue((char) ((1 << 15) | 8)), "Era esperado valores iguais, mas  -1 é diferente de " + result2174 + " <container.nextValue((char) ((1 << 15) | 8))>")
chamada antiga: assertEquals(0, container.previousAbsentValue((char) 0))
nova chamada: assertEquals(0, container.previousAbsentValue((char) 0), "Era esperado valores iguais, mas  0 é diferente de " + result2175 + " <container.previousAbsentValue((char) 0)>")
chamada antiga: assertEquals(63, container.previousAbsentValue((char) 63))
nova chamada: assertEquals(63, container.previousAbsentValue((char) 63), "Era esperado valores iguais, mas  63 é diferente de " + result2176 + " <container.previousAbsentValue((char) 63)>")
chamada antiga: assertEquals(63, container.previousAbsentValue((char) 64))
nova chamada: assertEquals(63, container.previousAbsentValue((char) 64), "Era esperado valores iguais, mas  63 é diferente de " + result2177 + " <container.previousAbsentValue((char) 64)>")
chamada antiga: assertEquals(63, container.previousAbsentValue((char) 65))
nova chamada: assertEquals(63, container.previousAbsentValue((char) 65), "Era esperado valores iguais, mas  63 é diferente de " + result2178 + " <container.previousAbsentValue((char) 65)>")
chamada antiga: assertEquals(63, container.previousAbsentValue((char) 128))
nova chamada: assertEquals(63, container.previousAbsentValue((char) 128), "Era esperado valores iguais, mas  63 é diferente de " + result2179 + " <container.previousAbsentValue((char) 128)>")
chamada antiga: assertEquals(129, container.previousAbsentValue((char) 129))
nova chamada: assertEquals(129, container.previousAbsentValue((char) 129), "Era esperado valores iguais, mas  129 é diferente de " + result2180 + " <container.previousAbsentValue((char) 129)>")
chamada antiga: assertEquals(0, container.previousAbsentValue((char) 0))
nova chamada: assertEquals(0, container.previousAbsentValue((char) 0), "Era esperado valores iguais, mas  0 é diferente de " + result2181 + " <container.previousAbsentValue((char) 0)>")
chamada antiga: assertEquals(63, container.previousAbsentValue((char) 63))
nova chamada: assertEquals(63, container.previousAbsentValue((char) 63), "Era esperado valores iguais, mas  63 é diferente de " + result2182 + " <container.previousAbsentValue((char) 63)>")
chamada antiga: assertEquals(63, container.previousAbsentValue((char) 64))
nova chamada: assertEquals(63, container.previousAbsentValue((char) 64), "Era esperado valores iguais, mas  63 é diferente de " + result2183 + " <container.previousAbsentValue((char) 64)>")
chamada antiga: assertEquals(63, container.previousAbsentValue((char) 65))
nova chamada: assertEquals(63, container.previousAbsentValue((char) 65), "Era esperado valores iguais, mas  63 é diferente de " + result2184 + " <container.previousAbsentValue((char) 65)>")
chamada antiga: assertEquals(63, container.previousAbsentValue((char) 128))
nova chamada: assertEquals(63, container.previousAbsentValue((char) 128), "Era esperado valores iguais, mas  63 é diferente de " + result2185 + " <container.previousAbsentValue((char) 128)>")
chamada antiga: assertEquals(129, container.previousAbsentValue((char) 129))
nova chamada: assertEquals(129, container.previousAbsentValue((char) 129), "Era esperado valores iguais, mas  129 é diferente de " + result2186 + " <container.previousAbsentValue((char) 129)>")
chamada antiga: assertEquals(199, container.previousAbsentValue((char) 199))
nova chamada: assertEquals(199, container.previousAbsentValue((char) 199), "Era esperado valores iguais, mas  199 é diferente de " + result2187 + " <container.previousAbsentValue((char) 199)>")
chamada antiga: assertEquals(199, container.previousAbsentValue((char) 200))
nova chamada: assertEquals(199, container.previousAbsentValue((char) 200), "Era esperado valores iguais, mas  199 é diferente de " + result2188 + " <container.previousAbsentValue((char) 200)>")
chamada antiga: assertEquals(199, container.previousAbsentValue((char) 250))
nova chamada: assertEquals(199, container.previousAbsentValue((char) 250), "Era esperado valores iguais, mas  199 é diferente de " + result2189 + " <container.previousAbsentValue((char) 250)>")
chamada antiga: assertEquals(2500, container.previousAbsentValue((char) 2500))
nova chamada: assertEquals(2500, container.previousAbsentValue((char) 2500), "Era esperado valores iguais, mas  2500 é diferente de " + result2190 + " <container.previousAbsentValue((char) 2500)>")
chamada antiga: assertEquals(4999, container.previousAbsentValue((char) 5000))
nova chamada: assertEquals(4999, container.previousAbsentValue((char) 5000), "Era esperado valores iguais, mas  4999 é diferente de " + result2191 + " <container.previousAbsentValue((char) 5000)>")
chamada antiga: assertEquals(4999, container.previousAbsentValue((char) 5200))
nova chamada: assertEquals(4999, container.previousAbsentValue((char) 5200), "Era esperado valores iguais, mas  4999 é diferente de " + result2192 + " <container.previousAbsentValue((char) 5200)>")
chamada antiga: assertEquals(9, container.previousAbsentValue((char) 9))
nova chamada: assertEquals(9, container.previousAbsentValue((char) 9), "Era esperado valores iguais, mas  9 é diferente de " + result2193 + " <container.previousAbsentValue((char) 9)>")
chamada antiga: assertEquals(9, container.previousAbsentValue((char) 10))
nova chamada: assertEquals(9, container.previousAbsentValue((char) 10), "Era esperado valores iguais, mas  9 é diferente de " + result2194 + " <container.previousAbsentValue((char) 10)>")
chamada antiga: assertEquals(11, container.previousAbsentValue((char) 11))
nova chamada: assertEquals(11, container.previousAbsentValue((char) 11), "Era esperado valores iguais, mas  11 é diferente de " + result2195 + " <container.previousAbsentValue((char) 11)>")
chamada antiga: assertEquals(21, container.previousAbsentValue((char) 21))
nova chamada: assertEquals(21, container.previousAbsentValue((char) 21), "Era esperado valores iguais, mas  21 é diferente de " + result2196 + " <container.previousAbsentValue((char) 21)>")
chamada antiga: assertEquals(29, container.previousAbsentValue((char) 30))
nova chamada: assertEquals(29, container.previousAbsentValue((char) 30), "Era esperado valores iguais, mas  29 é diferente de " + result2197 + " <container.previousAbsentValue((char) 30)>")
chamada antiga: assertEquals(((1 << 15) | 4), container.previousAbsentValue((char) ((1 << 15) | 4)))
nova chamada: assertEquals(((1 << 15) | 4), container.previousAbsentValue((char) ((1 << 15) | 4)), "Era esperado valores iguais, mas  ((1  15) | 4) é diferente de " + result2198 + " <container.previousAbsentValue((char) ((1 << 15) | 4))>")
chamada antiga: assertEquals(((1 << 15) | 4), container.previousAbsentValue((char) ((1 << 15) | 5)))
nova chamada: assertEquals(((1 << 15) | 4), container.previousAbsentValue((char) ((1 << 15) | 5)), "Era esperado valores iguais, mas  ((1  15) | 4) é diferente de " + result2199 + " <container.previousAbsentValue((char) ((1 << 15) | 5))>")
chamada antiga: assertEquals(((1 << 15) | 6), container.previousAbsentValue((char) ((1 << 15) | 6)))
nova chamada: assertEquals(((1 << 15) | 6), container.previousAbsentValue((char) ((1 << 15) | 6)), "Era esperado valores iguais, mas  ((1  15) | 6) é diferente de " + result2200 + " <container.previousAbsentValue((char) ((1 << 15) | 6))>")
chamada antiga: assertEquals(((1 << 15) | 6), container.previousAbsentValue((char) ((1 << 15) | 7)))
nova chamada: assertEquals(((1 << 15) | 6), container.previousAbsentValue((char) ((1 << 15) | 7)), "Era esperado valores iguais, mas  ((1  15) | 6) é diferente de " + result2201 + " <container.previousAbsentValue((char) ((1 << 15) | 7))>")
chamada antiga: assertEquals(((1 << 15) | 8), container.previousAbsentValue((char) ((1 << 15) | 8)))
nova chamada: assertEquals(((1 << 15) | 8), container.previousAbsentValue((char) ((1 << 15) | 8)), "Era esperado valores iguais, mas  ((1  15) | 8) é diferente de " + result2202 + " <container.previousAbsentValue((char) ((1 << 15) | 8))>")
chamada antiga: assertEquals(0, container.nextAbsentValue((char) 0))
nova chamada: assertEquals(0, container.nextAbsentValue((char) 0), "Era esperado valores iguais, mas  0 é diferente de " + result2203 + " <container.nextAbsentValue((char) 0)>")
chamada antiga: assertEquals(63, container.nextAbsentValue((char) 63))
nova chamada: assertEquals(63, container.nextAbsentValue((char) 63), "Era esperado valores iguais, mas  63 é diferente de " + result2204 + " <container.nextAbsentValue((char) 63)>")
chamada antiga: assertEquals(129, container.nextAbsentValue((char) 64))
nova chamada: assertEquals(129, container.nextAbsentValue((char) 64), "Era esperado valores iguais, mas  129 é diferente de " + result2205 + " <container.nextAbsentValue((char) 64)>")
chamada antiga: assertEquals(129, container.nextAbsentValue((char) 65))
nova chamada: assertEquals(129, container.nextAbsentValue((char) 65), "Era esperado valores iguais, mas  129 é diferente de " + result2206 + " <container.nextAbsentValue((char) 65)>")
chamada antiga: assertEquals(129, container.nextAbsentValue((char) 128))
nova chamada: assertEquals(129, container.nextAbsentValue((char) 128), "Era esperado valores iguais, mas  129 é diferente de " + result2207 + " <container.nextAbsentValue((char) 128)>")
chamada antiga: assertEquals(129, container.nextAbsentValue((char) 129))
nova chamada: assertEquals(129, container.nextAbsentValue((char) 129), "Era esperado valores iguais, mas  129 é diferente de " + result2208 + " <container.nextAbsentValue((char) 129)>")
chamada antiga: assertEquals(0, container.nextAbsentValue((char) 0))
nova chamada: assertEquals(0, container.nextAbsentValue((char) 0), "Era esperado valores iguais, mas  0 é diferente de " + result2209 + " <container.nextAbsentValue((char) 0)>")
chamada antiga: assertEquals(63, container.nextAbsentValue((char) 63))
nova chamada: assertEquals(63, container.nextAbsentValue((char) 63), "Era esperado valores iguais, mas  63 é diferente de " + result2210 + " <container.nextAbsentValue((char) 63)>")
chamada antiga: assertEquals(129, container.nextAbsentValue((char) 64))
nova chamada: assertEquals(129, container.nextAbsentValue((char) 64), "Era esperado valores iguais, mas  129 é diferente de " + result2211 + " <container.nextAbsentValue((char) 64)>")
chamada antiga: assertEquals(129, container.nextAbsentValue((char) 65))
nova chamada: assertEquals(129, container.nextAbsentValue((char) 65), "Era esperado valores iguais, mas  129 é diferente de " + result2212 + " <container.nextAbsentValue((char) 65)>")
chamada antiga: assertEquals(129, container.nextAbsentValue((char) 128))
nova chamada: assertEquals(129, container.nextAbsentValue((char) 128), "Era esperado valores iguais, mas  129 é diferente de " + result2213 + " <container.nextAbsentValue((char) 128)>")
chamada antiga: assertEquals(129, container.nextAbsentValue((char) 129))
nova chamada: assertEquals(129, container.nextAbsentValue((char) 129), "Era esperado valores iguais, mas  129 é diferente de " + result2214 + " <container.nextAbsentValue((char) 129)>")
chamada antiga: assertEquals(199, container.nextAbsentValue((char) 199))
nova chamada: assertEquals(199, container.nextAbsentValue((char) 199), "Era esperado valores iguais, mas  199 é diferente de " + result2215 + " <container.nextAbsentValue((char) 199)>")
chamada antiga: assertEquals(501, container.nextAbsentValue((char) 200))
nova chamada: assertEquals(501, container.nextAbsentValue((char) 200), "Era esperado valores iguais, mas  501 é diferente de " + result2216 + " <container.nextAbsentValue((char) 200)>")
chamada antiga: assertEquals(501, container.nextAbsentValue((char) 250))
nova chamada: assertEquals(501, container.nextAbsentValue((char) 250), "Era esperado valores iguais, mas  501 é diferente de " + result2217 + " <container.nextAbsentValue((char) 250)>")
chamada antiga: assertEquals(2500, container.nextAbsentValue((char) 2500))
nova chamada: assertEquals(2500, container.nextAbsentValue((char) 2500), "Era esperado valores iguais, mas  2500 é diferente de " + result2218 + " <container.nextAbsentValue((char) 2500)>")
chamada antiga: assertEquals(5201, container.nextAbsentValue((char) 5000))
nova chamada: assertEquals(5201, container.nextAbsentValue((char) 5000), "Era esperado valores iguais, mas  5201 é diferente de " + result2219 + " <container.nextAbsentValue((char) 5000)>")
chamada antiga: assertEquals(5201, container.nextAbsentValue((char) 5200))
nova chamada: assertEquals(5201, container.nextAbsentValue((char) 5200), "Era esperado valores iguais, mas  5201 é diferente de " + result2220 + " <container.nextAbsentValue((char) 5200)>")
chamada antiga: assertEquals(9, container.nextAbsentValue((char) 9))
nova chamada: assertEquals(9, container.nextAbsentValue((char) 9), "Era esperado valores iguais, mas  9 é diferente de " + result2221 + " <container.nextAbsentValue((char) 9)>")
chamada antiga: assertEquals(11, container.nextAbsentValue((char) 10))
nova chamada: assertEquals(11, container.nextAbsentValue((char) 10), "Era esperado valores iguais, mas  11 é diferente de " + result2222 + " <container.nextAbsentValue((char) 10)>")
chamada antiga: assertEquals(11, container.nextAbsentValue((char) 11))
nova chamada: assertEquals(11, container.nextAbsentValue((char) 11), "Era esperado valores iguais, mas  11 é diferente de " + result2223 + " <container.nextAbsentValue((char) 11)>")
chamada antiga: assertEquals(21, container.nextAbsentValue((char) 21))
nova chamada: assertEquals(21, container.nextAbsentValue((char) 21), "Era esperado valores iguais, mas  21 é diferente de " + result2224 + " <container.nextAbsentValue((char) 21)>")
chamada antiga: assertEquals(31, container.nextAbsentValue((char) 30))
nova chamada: assertEquals(31, container.nextAbsentValue((char) 30), "Era esperado valores iguais, mas  31 é diferente de " + result2225 + " <container.nextAbsentValue((char) 30)>")
chamada antiga: assertEquals(((1 << 15) | 4), container.nextAbsentValue((char) ((1 << 15) | 4)))
nova chamada: assertEquals(((1 << 15) | 4), container.nextAbsentValue((char) ((1 << 15) | 4)), "Era esperado valores iguais, mas  ((1  15) | 4) é diferente de " + result2226 + " <container.nextAbsentValue((char) ((1 << 15) | 4))>")
chamada antiga: assertEquals(((1 << 15) | 6), container.nextAbsentValue((char) ((1 << 15) | 5)))
nova chamada: assertEquals(((1 << 15) | 6), container.nextAbsentValue((char) ((1 << 15) | 5)), "Era esperado valores iguais, mas  ((1  15) | 6) é diferente de " + result2227 + " <container.nextAbsentValue((char) ((1 << 15) | 5))>")
chamada antiga: assertEquals(((1 << 15) | 6), container.nextAbsentValue((char) ((1 << 15) | 6)))
nova chamada: assertEquals(((1 << 15) | 6), container.nextAbsentValue((char) ((1 << 15) | 6)), "Era esperado valores iguais, mas  ((1  15) | 6) é diferente de " + result2228 + " <container.nextAbsentValue((char) ((1 << 15) | 6))>")
chamada antiga: assertEquals(((1 << 15) | 8), container.nextAbsentValue((char) ((1 << 15) | 7)))
nova chamada: assertEquals(((1 << 15) | 8), container.nextAbsentValue((char) ((1 << 15) | 7)), "Era esperado valores iguais, mas  ((1  15) | 8) é diferente de " + result2229 + " <container.nextAbsentValue((char) ((1 << 15) | 7))>")
chamada antiga: assertEquals(((1 << 15) | 8), container.nextAbsentValue((char) ((1 << 15) | 8)))
nova chamada: assertEquals(((1 << 15) | 8), container.nextAbsentValue((char) ((1 << 15) | 8)), "Era esperado valores iguais, mas  ((1  15) | 8) é diferente de " + result2230 + " <container.nextAbsentValue((char) ((1 << 15) | 8))>")
chamada antiga: assertFalse(rc.contains(48, 49))
nova chamada: assertFalse(rc.contains(48, 49), "Era esperado falso, mas " + result2231 + " <rc.contains(48, 49)> é verdadeiro ")
chamada antiga: assertFalse(rc.intersects(57, 215))
nova chamada: assertFalse(rc.intersects(57, 215), "Era esperado falso, mas " + result2232 + " <rc.intersects(57, 215)> é verdadeiro ")
chamada antiga: assertEquals(11, consumer.getNumberOfValuesConsumed())
nova chamada: assertEquals(11, consumer.getNumberOfValuesConsumed(), "Era esperado valores iguais, mas  11 é diferente de " + result2233 + " <consumer.getNumberOfValuesConsumed()>")
chamada antiga: assertEquals(5, consumer2.getNumberOfValuesConsumed())
nova chamada: assertEquals(5, consumer2.getNumberOfValuesConsumed(), "Era esperado valores iguais, mas  5 é diferente de " + result2234 + " <consumer2.getNumberOfValuesConsumed()>")
chamada antiga: assertEquals(6, consumer3.getNumberOfValuesConsumed())
nova chamada: assertEquals(6, consumer3.getNumberOfValuesConsumed(), "Era esperado valores iguais, mas  6 é diferente de " + result2235 + " <consumer3.getNumberOfValuesConsumed()>")
chamada antiga: assertEquals(expected, result)
nova chamada: assertEquals(expected, result, "Era esperado valores iguais, mas  expected é diferente de " + " result")
chamada antiga: assertEquals(expected, result)
nova chamada: assertEquals(expected, result, "Era esperado valores iguais, mas  expected é diferente de " + " result")
chamada antiga: assertEquals(expected, result)
nova chamada: assertEquals(expected, result, "Era esperado valores iguais, mas  expected é diferente de " + " result")
chamada antiga: assertEquals(expected, result)
nova chamada: assertEquals(expected, result, "Era esperado valores iguais, mas  expected é diferente de " + " result")
chamada antiga: assertEquals(expected, result)
nova chamada: assertEquals(expected, result, "Era esperado valores iguais, mas  expected é diferente de " + " result")
chamada antiga: assertFalse(bResult.contains(1))
nova chamada: assertFalse(bResult.contains(1), "Era esperado falso, mas " + result2236 + " <bResult.contains(1)> é verdadeiro ")
chamada antiga: assertTrue(bResult.contains(2))
nova chamada: assertTrue(bResult.contains(2), "Era esperado verdadeiro, mas " + result2237 + " <bResult.contains(2)> é falso")
chamada antiga: assertFalse(bResult.contains(3))
nova chamada: assertFalse(bResult.contains(3), "Era esperado falso, mas " + result2238 + " <bResult.contains(3)> é verdadeiro ")
chamada antiga: assertFalse(bResult.contains(1))
nova chamada: assertFalse(bResult.contains(1), "Era esperado falso, mas " + result2239 + " <bResult.contains(1)> é verdadeiro ")
chamada antiga: assertTrue(bResult.contains(2))
nova chamada: assertTrue(bResult.contains(2), "Era esperado verdadeiro, mas " + result2240 + " <bResult.contains(2)> é falso")
chamada antiga: assertFalse(bResult.contains(3))
nova chamada: assertFalse(bResult.contains(3), "Era esperado falso, mas " + result2241 + " <bResult.contains(3)> é verdadeiro ")
chamada antiga: assertFalse(ebResult.contains(1))
nova chamada: assertFalse(ebResult.contains(1), "Era esperado falso, mas " + result2242 + " <ebResult.contains(1)> é verdadeiro ")
chamada antiga: assertTrue(ebResult.contains(2))
nova chamada: assertTrue(ebResult.contains(2), "Era esperado verdadeiro, mas " + result2243 + " <ebResult.contains(2)> é falso")
chamada antiga: assertFalse(ebResult.contains(3))
nova chamada: assertFalse(ebResult.contains(3), "Era esperado falso, mas " + result2244 + " <ebResult.contains(3)> é verdadeiro ")
chamada antiga: assertFalse(bResult.contains(1))
nova chamada: assertFalse(bResult.contains(1), "Era esperado falso, mas " + result2245 + " <bResult.contains(1)> é verdadeiro ")
chamada antiga: assertTrue(bResult.contains(2))
nova chamada: assertTrue(bResult.contains(2), "Era esperado verdadeiro, mas " + result2246 + " <bResult.contains(2)> é falso")
chamada antiga: assertFalse(bResult.contains(3))
nova chamada: assertFalse(bResult.contains(3), "Era esperado falso, mas " + result2247 + " <bResult.contains(3)> é verdadeiro ")
chamada antiga: assertFalse(ebResult.contains(1))
nova chamada: assertFalse(ebResult.contains(1), "Era esperado falso, mas " + result2248 + " <ebResult.contains(1)> é verdadeiro ")
chamada antiga: assertTrue(ebResult.contains(2))
nova chamada: assertTrue(ebResult.contains(2), "Era esperado verdadeiro, mas " + result2249 + " <ebResult.contains(2)> é falso")
chamada antiga: assertFalse(ebResult.contains(3))
nova chamada: assertFalse(ebResult.contains(3), "Era esperado falso, mas " + result2250 + " <ebResult.contains(3)> é verdadeiro ")
chamada antiga: assertTrue(bItResult.contains(1))
nova chamada: assertTrue(bItResult.contains(1), "Era esperado verdadeiro, mas " + result2251 + " <bItResult.contains(1)> é falso")
chamada antiga: assertTrue(bItResult.contains(2))
nova chamada: assertTrue(bItResult.contains(2), "Era esperado verdadeiro, mas " + result2252 + " <bItResult.contains(2)> é falso")
chamada antiga: assertTrue(bItResult.contains(3))
nova chamada: assertTrue(bItResult.contains(3), "Era esperado verdadeiro, mas " + result2253 + " <bItResult.contains(3)> é falso")
chamada antiga: assertTrue(ebItResult.contains(1))
nova chamada: assertTrue(ebItResult.contains(1), "Era esperado verdadeiro, mas " + result2254 + " <ebItResult.contains(1)> é falso")
chamada antiga: assertTrue(ebItResult.contains(2))
nova chamada: assertTrue(ebItResult.contains(2), "Era esperado verdadeiro, mas " + result2255 + " <ebItResult.contains(2)> é falso")
chamada antiga: assertTrue(ebItResult.contains(3))
nova chamada: assertTrue(ebItResult.contains(3), "Era esperado verdadeiro, mas " + result2256 + " <ebItResult.contains(3)> é falso")
chamada antiga: assertTrue(bResult.contains(1))
nova chamada: assertTrue(bResult.contains(1), "Era esperado verdadeiro, mas " + result2257 + " <bResult.contains(1)> é falso")
chamada antiga: assertTrue(bResult.contains(2))
nova chamada: assertTrue(bResult.contains(2), "Era esperado verdadeiro, mas " + result2258 + " <bResult.contains(2)> é falso")
chamada antiga: assertTrue(bResult.contains(3))
nova chamada: assertTrue(bResult.contains(3), "Era esperado verdadeiro, mas " + result2259 + " <bResult.contains(3)> é falso")
chamada antiga: assertTrue(ebResult.contains(1))
nova chamada: assertTrue(ebResult.contains(1), "Era esperado verdadeiro, mas " + result2260 + " <ebResult.contains(1)> é falso")
chamada antiga: assertTrue(ebResult.contains(2))
nova chamada: assertTrue(ebResult.contains(2), "Era esperado verdadeiro, mas " + result2261 + " <ebResult.contains(2)> é falso")
chamada antiga: assertTrue(ebResult.contains(3))
nova chamada: assertTrue(ebResult.contains(3), "Era esperado verdadeiro, mas " + result2262 + " <ebResult.contains(3)> é falso")
chamada antiga: assertTrue(bResult.contains(1))
nova chamada: assertTrue(bResult.contains(1), "Era esperado verdadeiro, mas " + result2263 + " <bResult.contains(1)> é falso")
chamada antiga: assertFalse(bResult.contains(2))
nova chamada: assertFalse(bResult.contains(2), "Era esperado falso, mas " + result2264 + " <bResult.contains(2)> é verdadeiro ")
chamada antiga: assertTrue(bResult.contains(3))
nova chamada: assertTrue(bResult.contains(3), "Era esperado verdadeiro, mas " + result2265 + " <bResult.contains(3)> é falso")
chamada antiga: assertTrue(ebResult.contains(1))
nova chamada: assertTrue(ebResult.contains(1), "Era esperado verdadeiro, mas " + result2266 + " <ebResult.contains(1)> é falso")
chamada antiga: assertFalse(ebResult.contains(2))
nova chamada: assertFalse(ebResult.contains(2), "Era esperado falso, mas " + result2267 + " <ebResult.contains(2)> é verdadeiro ")
chamada antiga: assertTrue(ebResult.contains(3))
nova chamada: assertTrue(ebResult.contains(3), "Era esperado verdadeiro, mas " + result2268 + " <ebResult.contains(3)> é falso")
chamada antiga: assertEquals(expected, result)
nova chamada: assertEquals(expected, result, "Era esperado valores iguais, mas  expected é diferente de " + " result")
chamada antiga: assertEquals(expected, result)
nova chamada: assertEquals(expected, result, "Era esperado valores iguais, mas  expected é diferente de " + " result")
chamada antiga: assertEquals(expected, result)
nova chamada: assertEquals(expected, result, "Era esperado valores iguais, mas  expected é diferente de " + " result")
chamada antiga: assertTrue(BufferBitSetUtil.equals(bitset, bitmap))
nova chamada: assertTrue(BufferBitSetUtil.equals(bitset, bitmap), "Era esperado verdadeiro, mas " + result2269 + " <BufferBitSetUtil.equals(bitset, bitmap)> é falso")
chamada antiga: assertEquals(-2, map.select(-2))
nova chamada: assertEquals(-2, map.select(-2), "Era esperado valores iguais, mas  -2 é diferente de " + result2270 + " <map.select(-2)>")
chamada antiga: assertEquals(-1, map.select(-1))
nova chamada: assertEquals(-1, map.select(-1), "Era esperado valores iguais, mas  -1 é diferente de " + result2271 + " <map.select(-1)>")
chamada antiga: assertEquals(expectedValues.length, cardinality)
nova chamada: assertEquals(expectedValues.length, cardinality, "Era esperado valores iguais, mas  expectedValues.length é diferente de " + " cardinality")
chamada antiga: assertEquals(expectedValues.length, cardinality)
nova chamada: assertEquals(expectedValues.length, cardinality, "Era esperado valores iguais, mas  expectedValues.length é diferente de " + " cardinality")
chamada antiga: assertEquals("{1,2,3,4294967294,4294967295}", bitmap.toString())
nova chamada: assertEquals("{1,2,3,4294967294,4294967295}", bitmap.toString(), "Era esperado valores iguais, mas  '{1,2,3,4294967294,4294967295}' é diferente de " + result2272 + " <bitmap.toString()>")
chamada antiga: assertEquals("{1,2,3,4294967295}", bitmap.toString())
nova chamada: assertEquals("{1,2,3,4294967295}", bitmap.toString(), "Era esperado valores iguais, mas  '{1,2,3,4294967295}' é diferente de " + result2273 + " <bitmap.toString()>")
chamada antiga: assertTrue(it.hasNext())
nova chamada: assertTrue(it.hasNext(), "Era esperado verdadeiro, mas " + result2274 + " <it.hasNext()> é falso")
chamada antiga: assertEquals(101993170, it.next())
nova chamada: assertEquals(101993170, it.next(), "Era esperado valores iguais, mas  101993170 é diferente de " + result2275 + " <it.next()>")
chamada antiga: assertFalse(it.hasNext())
nova chamada: assertFalse(it.hasNext(), "Era esperado falso, mas " + result2276 + " <it.hasNext()> é verdadeiro ")
chamada antiga: assertTrue(it.hasNext())
nova chamada: assertTrue(it.hasNext(), "Era esperado verdadeiro, mas " + result2277 + " <it.hasNext()> é falso")
chamada antiga: assertEquals(101993170, it.next())
nova chamada: assertEquals(101993170, it.next(), "Era esperado valores iguais, mas  101993170 é diferente de " + result2278 + " <it.next()>")
chamada antiga: assertFalse(it.hasNext())
nova chamada: assertFalse(it.hasNext(), "Era esperado falso, mas " + result2279 + " <it.hasNext()> é verdadeiro ")
chamada antiga: assertEquals(1000000, limited.getCardinality())
nova chamada: assertEquals(1000000, limited.getCardinality(), "Era esperado valores iguais, mas  1000000 é diferente de " + result2280 + " <limited.getCardinality()>")
chamada antiga: assertEquals(1000000, c.count)
nova chamada: assertEquals(1000000, c.count, "Era esperado valores iguais, mas  1000000 é diferente de " + " c.count")
chamada antiga: assertEquals(1000000, limited.toArray().length)
nova chamada: assertEquals(1000000, limited.toArray().length, "Era esperado valores iguais, mas  1000000 é diferente de " + " limited.toArray().length")
chamada antiga: assertEquals(1, r.limit(1).getCardinality())
nova chamada: assertEquals(1, r.limit(1).getCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result2281 + " <r.limit(1).getCardinality()>")
chamada antiga: assertEquals(10, r.limit(10).getCardinality())
nova chamada: assertEquals(10, r.limit(10).getCardinality(), "Era esperado valores iguais, mas  10 é diferente de " + result2282 + " <r.limit(10).getCardinality()>")
chamada antiga: assertEquals(100, r.limit(100).getCardinality())
nova chamada: assertEquals(100, r.limit(100).getCardinality(), "Era esperado valores iguais, mas  100 é diferente de " + result2283 + " <r.limit(100).getCardinality()>")
chamada antiga: assertEquals(1000, r.limit(1000).getCardinality())
nova chamada: assertEquals(1000, r.limit(1000).getCardinality(), "Era esperado valores iguais, mas  1000 é diferente de " + result2284 + " <r.limit(1000).getCardinality()>")
chamada antiga: assertEquals(10000, r.limit(10000).getCardinality())
nova chamada: assertEquals(10000, r.limit(10000).getCardinality(), "Era esperado valores iguais, mas  10000 é diferente de " + result2285 + " <r.limit(10000).getCardinality()>")
chamada antiga: assertEquals(100000, r.limit(100000).getCardinality())
nova chamada: assertEquals(100000, r.limit(100000).getCardinality(), "Era esperado valores iguais, mas  100000 é diferente de " + result2286 + " <r.limit(100000).getCardinality()>")
chamada antiga: assertEquals(1000000, r.limit(1000000).getCardinality())
nova chamada: assertEquals(1000000, r.limit(1000000).getCardinality(), "Era esperado valores iguais, mas  1000000 é diferente de " + result2287 + " <r.limit(1000000).getCardinality()>")
chamada antiga: assertNotEquals(cp.getContainer(), null)
nova chamada: assertNotEquals(cp.getContainer(), null, "Era esperado valores diferentes, mas " + result2288 + " <cp.getContainer()> é igual a " + " null")
chamada antiga: assertNotEquals(cpo.getContainer(), null)
nova chamada: assertNotEquals(cpo.getContainer(), null, "Era esperado valores diferentes, mas " + result2289 + " <cpo.getContainer()> é igual a " + " null")
chamada antiga: assertEquals(cp.compareTo(cpo), 0)
nova chamada: assertEquals(cp.compareTo(cpo), 0, "Era esperado valores iguais, mas " + result2290 + " <cp.compareTo(cpo)> é diferente de " + " 0")
chamada antiga: assertEquals(cp.getCardinality(), (1 << 16) / 2)
nova chamada: assertEquals(cp.getCardinality(), (1 << 16) / 2, "Era esperado valores iguais, mas " + result2291 + " <cp.getCardinality()> é diferente de " + " (1  16) / 2")
chamada antiga: assertTrue(cp.isBitmapContainer())
nova chamada: assertTrue(cp.isBitmapContainer(), "Era esperado verdadeiro, mas " + result2292 + " <cp.isBitmapContainer()> é falso")
chamada antiga: assertFalse(cp.isRunContainer())
nova chamada: assertFalse(cp.isRunContainer(), "Era esperado falso, mas " + result2293 + " <cp.isRunContainer()> é verdadeiro ")
chamada antiga: assertTrue(cp.compareTo(cpo) > 0)
nova chamada: assertTrue(cp.compareTo(cpo) > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNotEquals(cp.getContainer(), null)
nova chamada: assertNotEquals(cp.getContainer(), null, "Era esperado valores diferentes, mas " + result2294 + " <cp.getContainer()> é igual a " + " null")
chamada antiga: assertEquals(cp.getCardinality(), (1 << 16) / 512)
nova chamada: assertEquals(cp.getCardinality(), (1 << 16) / 512, "Era esperado valores iguais, mas " + result2295 + " <cp.getCardinality()> é diferente de " + " (1  16) / 512")
chamada antiga: assertFalse(cp.isBitmapContainer())
nova chamada: assertFalse(cp.isBitmapContainer(), "Era esperado falso, mas " + result2296 + " <cp.isBitmapContainer()> é verdadeiro ")
chamada antiga: assertFalse(cp.isRunContainer())
nova chamada: assertFalse(cp.isRunContainer(), "Era esperado falso, mas " + result2297 + " <cp.isRunContainer()> é verdadeiro ")
chamada antiga: assertTrue(cp.compareTo(cpo) > 0)
nova chamada: assertTrue(cp.compareTo(cpo) > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNotEquals(cp.getContainer(), null)
nova chamada: assertNotEquals(cp.getContainer(), null, "Era esperado valores diferentes, mas " + result2298 + " <cp.getContainer()> é igual a " + " null")
chamada antiga: assertEquals(cp.getCardinality(), (1 << 16))
nova chamada: assertEquals(cp.getCardinality(), (1 << 16), "Era esperado valores iguais, mas " + result2299 + " <cp.getCardinality()> é diferente de " + " (1  16)")
chamada antiga: assertFalse(cp.isBitmapContainer())
nova chamada: assertFalse(cp.isBitmapContainer(), "Era esperado falso, mas " + result2300 + " <cp.isBitmapContainer()> é verdadeiro ")
chamada antiga: assertTrue(cp.isRunContainer())
nova chamada: assertTrue(cp.isRunContainer(), "Era esperado verdadeiro, mas " + result2301 + " <cp.isRunContainer()> é falso")
chamada antiga: assertTrue(cp.compareTo(cpo) > 0)
nova chamada: assertTrue(cp.compareTo(cpo) > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(cp.compareTo(cpo) == 0)
nova chamada: assertTrue(cp.compareTo(cpo) == 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(cp.getContainer(), null)
nova chamada: assertEquals(cp.getContainer(), null, "Era esperado valores iguais, mas " + result2302 + " <cp.getContainer()> é diferente de " + " null")
chamada antiga: assertNotEquals(cp.getContainer(), null)
nova chamada: assertNotEquals(cp.getContainer(), null, "Era esperado valores diferentes, mas " + result2303 + " <cp.getContainer()> é igual a " + " null")
chamada antiga: assertNotEquals(cpo.getContainer(), null)
nova chamada: assertNotEquals(cpo.getContainer(), null, "Era esperado valores diferentes, mas " + result2304 + " <cpo.getContainer()> é igual a " + " null")
chamada antiga: assertEquals(cp.compareTo(cpo), 0)
nova chamada: assertEquals(cp.compareTo(cpo), 0, "Era esperado valores iguais, mas " + result2305 + " <cp.compareTo(cpo)> é diferente de " + " 0")
chamada antiga: assertEquals(cp.getCardinality(), (1 << 16) / 2)
nova chamada: assertEquals(cp.getCardinality(), (1 << 16) / 2, "Era esperado valores iguais, mas " + result2306 + " <cp.getCardinality()> é diferente de " + " (1  16) / 2")
chamada antiga: assertTrue(cp.isBitmapContainer())
nova chamada: assertTrue(cp.isBitmapContainer(), "Era esperado verdadeiro, mas " + result2307 + " <cp.isBitmapContainer()> é falso")
chamada antiga: assertFalse(cp.isRunContainer())
nova chamada: assertFalse(cp.isRunContainer(), "Era esperado falso, mas " + result2308 + " <cp.isRunContainer()> é verdadeiro ")
chamada antiga: assertTrue(cp.compareTo(cpo) > 0)
nova chamada: assertTrue(cp.compareTo(cpo) > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNotEquals(cp.getContainer(), null)
nova chamada: assertNotEquals(cp.getContainer(), null, "Era esperado valores diferentes, mas " + result2309 + " <cp.getContainer()> é igual a " + " null")
chamada antiga: assertEquals(cp.getCardinality(), (1 << 16) / 512)
nova chamada: assertEquals(cp.getCardinality(), (1 << 16) / 512, "Era esperado valores iguais, mas " + result2310 + " <cp.getCardinality()> é diferente de " + " (1  16) / 512")
chamada antiga: assertFalse(cp.isBitmapContainer())
nova chamada: assertFalse(cp.isBitmapContainer(), "Era esperado falso, mas " + result2311 + " <cp.isBitmapContainer()> é verdadeiro ")
chamada antiga: assertFalse(cp.isRunContainer())
nova chamada: assertFalse(cp.isRunContainer(), "Era esperado falso, mas " + result2312 + " <cp.isRunContainer()> é verdadeiro ")
chamada antiga: assertTrue(cp.compareTo(cpo) > 0)
nova chamada: assertTrue(cp.compareTo(cpo) > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNotEquals(cp.getContainer(), null)
nova chamada: assertNotEquals(cp.getContainer(), null, "Era esperado valores diferentes, mas " + result2313 + " <cp.getContainer()> é igual a " + " null")
chamada antiga: assertEquals(cp.getCardinality(), (1 << 16))
nova chamada: assertEquals(cp.getCardinality(), (1 << 16), "Era esperado valores iguais, mas " + result2314 + " <cp.getCardinality()> é diferente de " + " (1  16)")
chamada antiga: assertFalse(cp.isBitmapContainer())
nova chamada: assertFalse(cp.isBitmapContainer(), "Era esperado falso, mas " + result2315 + " <cp.isBitmapContainer()> é verdadeiro ")
chamada antiga: assertTrue(cp.isRunContainer())
nova chamada: assertTrue(cp.isRunContainer(), "Era esperado verdadeiro, mas " + result2316 + " <cp.isRunContainer()> é falso")
chamada antiga: assertTrue(cp.compareTo(cpo) > 0)
nova chamada: assertTrue(cp.compareTo(cpo) > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(cp.compareTo(cpo) == 0)
nova chamada: assertTrue(cp.compareTo(cpo) == 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(cp.getContainer(), null)
nova chamada: assertEquals(cp.getContainer(), null, "Era esperado valores iguais, mas " + result2317 + " <cp.getContainer()> é diferente de " + " null")
chamada antiga: assertEquals(rb, rb2)
nova chamada: assertEquals(rb, rb2, "Era esperado valores iguais, mas  rb é diferente de " + " rb2")
chamada antiga: assertEquals(irb.toRoaringBitmap(), rb2)
nova chamada: assertEquals(irb.toRoaringBitmap(), rb2, "Era esperado valores iguais, mas " + result2318 + " <irb.toRoaringBitmap()> é diferente de " + " rb2")
chamada antiga: assertTrue(r1.getCardinality() == 10)
nova chamada: assertTrue(r1.getCardinality() == 10, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertFalse(r1.contains(killingPosition))
nova chamada: assertFalse(r1.contains(killingPosition), "Era esperado falso, mas " + result2319 + " <r1.contains(killingPosition)> é verdadeiro ")
chamada antiga: assertTrue(r2.contains(131000))
nova chamada: assertTrue(r2.contains(131000), "Era esperado verdadeiro, mas " + result2320 + " <r2.contains(131000)> é falso")
chamada antiga: assertFalse(r1.contains(killingPosition))
nova chamada: assertFalse(r1.contains(killingPosition), "Era esperado falso, mas " + result2321 + " <r1.contains(killingPosition)> é verdadeiro ")
chamada antiga: assertTrue(r2.contains(131000))
nova chamada: assertTrue(r2.contains(131000), "Era esperado verdadeiro, mas " + result2322 + " <r2.contains(131000)> é falso")
chamada antiga: assertTrue(r2.contains(killingPosition))
nova chamada: assertTrue(r2.contains(killingPosition), "Era esperado verdadeiro, mas " + result2323 + " <r2.contains(killingPosition)> é falso")
chamada antiga: assertFalse(r1.contains(killingPosition))
nova chamada: assertFalse(r1.contains(killingPosition), "Era esperado falso, mas " + result2324 + " <r1.contains(killingPosition)> é verdadeiro ")
chamada antiga: assertFalse(r1.contains(killingPosition))
nova chamada: assertFalse(r1.contains(killingPosition), "Era esperado falso, mas " + result2325 + " <r1.contains(killingPosition)> é verdadeiro ")
chamada antiga: assertFalse(r1.contains(killingPosition))
nova chamada: assertFalse(r1.contains(killingPosition), "Era esperado falso, mas " + result2326 + " <r1.contains(killingPosition)> é verdadeiro ")
chamada antiga: assertFalse(r1.contains(killingPosition))
nova chamada: assertFalse(r1.contains(killingPosition), "Era esperado falso, mas " + result2327 + " <r1.contains(killingPosition)> é verdadeiro ")
chamada antiga: assertEquals(MutableRoaringBitmap.or(rb1, rb2), MutableRoaringBitmap.or(rrb1, rrb2))
nova chamada: assertEquals(MutableRoaringBitmap.or(rb1, rb2), MutableRoaringBitmap.or(rrb1, rrb2), "Era esperado valores iguais, mas " + result2328 + " <MutableRoaringBitmap.or(rb1, rb2)> é diferente de " + result2329 + " <MutableRoaringBitmap.or(rrb1, rrb2)>")
chamada antiga: assertEquals(answer.getCardinality(), array1.length)
nova chamada: assertEquals(answer.getCardinality(), array1.length, "Era esperado valores iguais, mas " + result2330 + " <answer.getCardinality()> é diferente de " + " array1.length")
chamada antiga: assertEquals(rr1, rr3)
nova chamada: assertEquals(rr1, rr3, "Era esperado valores iguais, mas  rr1 é diferente de " + " rr3")
chamada antiga: assertNotEquals(rr1, rr2)
nova chamada: assertNotEquals(rr1, rr2, "Era esperado valores diferentes, mas  rr1 é igual a " + " rr2")
chamada antiga: assertNotEquals(rr3, rr2)
nova chamada: assertNotEquals(rr3, rr2, "Era esperado valores diferentes, mas  rr3 é igual a " + " rr2")
chamada antiga: assertArrayEquals(cuiRelsArray, back)
nova chamada: assertArrayEquals(cuiRelsArray, back, "Era esperado arrays iguais, mas  cuiRelsArray é diferente de " + " back")
chamada antiga: assertTrue(Arrays.equals(expectedresult, result))
nova chamada: assertTrue(Arrays.equals(expectedresult, result), "Era esperado verdadeiro, mas " + result2331 + " <Arrays.equals(expectedresult, result)> é falso")
chamada antiga: assertTrue(rxor.equals(ror))
nova chamada: assertTrue(rxor.equals(ror), "Era esperado verdadeiro, mas " + result2332 + " <rxor.equals(ror)> é falso")
chamada antiga: assertEquals(8, a.getCardinality())
nova chamada: assertEquals(8, a.getCardinality(), "Era esperado valores iguais, mas  8 é diferente de " + result2333 + " <a.getCardinality()>")
chamada antiga: assertEquals(8, a.getCardinality())
nova chamada: assertEquals(8, a.getCardinality(), "Era esperado valores iguais, mas  8 é diferente de " + result2334 + " <a.getCardinality()>")
chamada antiga: assertTrue(rbm1.hashCode() == rbm2.hashCode())
nova chamada: assertTrue(rbm1.hashCode() == rbm2.hashCode(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(rbm1.hashCode() == rbm2.hashCode())
nova chamada: assertTrue(rbm1.hashCode() == rbm2.hashCode(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(1, andNot.getCardinality())
nova chamada: assertEquals(1, andNot.getCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result2335 + " <andNot.getCardinality()>")
chamada antiga: assertTrue(andNot.contains(1))
nova chamada: assertTrue(andNot.contains(1), "Era esperado verdadeiro, mas " + result2336 + " <andNot.contains(1)> é falso")
chamada antiga: assertEquals(1, rr1.getCardinality())
nova chamada: assertEquals(1, rr1.getCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result2337 + " <rr1.getCardinality()>")
chamada antiga: assertTrue(andNot.contains(1))
nova chamada: assertTrue(andNot.contains(1), "Era esperado verdadeiro, mas " + result2338 + " <andNot.contains(1)> é falso")
chamada antiga: assertTrue(correct.equals(rr))
nova chamada: assertTrue(correct.equals(rr), "Era esperado verdadeiro, mas " + result2339 + " <correct.equals(rr)> é falso")
chamada antiga: assertEquals(rb, andNotresult)
nova chamada: assertEquals(rb, andNotresult, "Era esperado valores iguais, mas  rb é diferente de " + " andNotresult")
chamada antiga: assertEquals(rb2, off)
nova chamada: assertEquals(rb2, off, "Era esperado valores iguais, mas  rb2 é diferente de " + " off")
chamada antiga: assertEquals(rb2, off)
nova chamada: assertEquals(rb2, off, "Era esperado valores iguais, mas  rb2 é diferente de " + " off")
chamada antiga: assertEquals(1, and.getCardinality())
nova chamada: assertEquals(1, and.getCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result2340 + " <and.getCardinality()>")
chamada antiga: assertTrue(and.contains(1 << 31))
nova chamada: assertTrue(and.contains(1 << 31), "Era esperado verdadeiro, mas " + result2341 + " <and.contains(1 << 31)> é falso")
chamada antiga: assertEquals(1, rr1.getCardinality())
nova chamada: assertEquals(1, rr1.getCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result2342 + " <rr1.getCardinality()>")
chamada antiga: assertTrue(and.contains(1 << 31))
nova chamada: assertTrue(and.contains(1 << 31), "Era esperado verdadeiro, mas " + result2343 + " <and.contains(1 << 31)> é falso")
chamada antiga: assertEquals(array.length, 1)
nova chamada: assertEquals(array.length, 1, "Era esperado valores iguais, mas  array.length é diferente de " + " 1")
chamada antiga: assertEquals(array[0], 13)
nova chamada: assertEquals(array[0], 13, "Era esperado valores iguais, mas  array[0] é diferente de " + " 13")
chamada antiga: assertEquals(array.length, 1)
nova chamada: assertEquals(array.length, 1, "Era esperado valores iguais, mas  array.length é diferente de " + " 1")
chamada antiga: assertEquals(array[0], 13)
nova chamada: assertEquals(array[0], 13, "Era esperado valores iguais, mas  array[0] é diferente de " + " 13")
chamada antiga: assertTrue(correct.equals(rr))
nova chamada: assertTrue(correct.equals(rr), "Era esperado verdadeiro, mas " + result2344 + " <correct.equals(rr)> é falso")
chamada antiga: assertEquals(array.length, 1)
nova chamada: assertEquals(array.length, 1, "Era esperado valores iguais, mas  array.length é diferente de " + " 1")
chamada antiga: assertEquals(array[0], 13)
nova chamada: assertEquals(array[0], 13, "Era esperado valores iguais, mas  array[0] é diferente de " + " 13")
chamada antiga: assertTrue(Arrays.equals(arrayand, arrayres))
nova chamada: assertTrue(Arrays.equals(arrayand, arrayres), "Era esperado verdadeiro, mas " + result2345 + " <Arrays.equals(arrayand, arrayres)> é falso")
chamada antiga: assertTrue(andresult.equals(off))
nova chamada: assertTrue(andresult.equals(off), "Era esperado verdadeiro, mas " + result2346 + " <andresult.equals(off)> é falso")
chamada antiga: assertEquals(0, andresult.getCardinality())
nova chamada: assertEquals(0, andresult.getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result2347 + " <andresult.getCardinality()>")
chamada antiga: assertEquals(0, andresult.getCardinality())
nova chamada: assertEquals(0, andresult.getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result2348 + " <andresult.getCardinality()>")
chamada antiga: assertEquals(0, andresult2.getCardinality())
nova chamada: assertEquals(0, andresult2.getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result2349 + " <andresult2.getCardinality()>")
chamada antiga: assertEquals(0, andresult.getCardinality())
nova chamada: assertEquals(0, andresult.getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result2350 + " <andresult.getCardinality()>")
chamada antiga: assertEquals(rc.getCardinality(), rb.getCardinality())
nova chamada: assertEquals(rc.getCardinality(), rb.getCardinality(), "Era esperado valores iguais, mas " + result2351 + " <rc.getCardinality()> é diferente de " + result2352 + " <rb.getCardinality()>")
chamada antiga: assertEquals(0, wastedBytes)
nova chamada: assertEquals(0, wastedBytes, "Era esperado valores iguais, mas  0 é diferente de " + " wastedBytes")
chamada antiga: assertEquals(array[0], (char) 110)
nova chamada: assertEquals(array[0], (char) 110, "Era esperado valores iguais, mas  array[0] é diferente de " + " (char) 110")
chamada antiga: assertEquals(array[1], (char) 114)
nova chamada: assertEquals(array[1], (char) 114, "Era esperado valores iguais, mas  array[1] é diferente de " + " (char) 114")
chamada antiga: assertEquals(array[2], (char) 115)
nova chamada: assertEquals(array[2], (char) 115, "Era esperado valores iguais, mas  array[2] é diferente de " + " (char) 115")
chamada antiga: assertTrue(Arrays.equals(array, a))
nova chamada: assertTrue(Arrays.equals(array, a), "Era esperado verdadeiro, mas " + result2353 + " <Arrays.equals(array, a)> é falso")
chamada antiga: assertEquals(array[0], (char) 110)
nova chamada: assertEquals(array[0], (char) 110, "Era esperado valores iguais, mas  array[0] é diferente de " + " (char) 110")
chamada antiga: assertEquals(array[1], (char) 114)
nova chamada: assertEquals(array[1], (char) 114, "Era esperado valores iguais, mas  array[1] é diferente de " + " (char) 114")
chamada antiga: assertEquals(array[2], (char) 115)
nova chamada: assertEquals(array[2], (char) 115, "Era esperado valores iguais, mas  array[2] é diferente de " + " (char) 115")
chamada antiga: assertEquals(0, rb.getCardinality())
nova chamada: assertEquals(0, rb.getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result2354 + " <rb.getCardinality()>")
chamada antiga: assertTrue(0 != rb2.getCardinality())
nova chamada: assertTrue(0 != rb2.getCardinality(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(1, andresult.getCardinality())
nova chamada: assertEquals(1, andresult.getCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result2355 + " <andresult.getCardinality()>")
chamada antiga: assertEquals(rb2.getCardinality(), orresult.getCardinality())
nova chamada: assertEquals(rb2.getCardinality(), orresult.getCardinality(), "Era esperado valores iguais, mas " + result2356 + " <rb2.getCardinality()> é diferente de " + result2357 + " <orresult.getCardinality()>")
chamada antiga: assertTrue(Arrays.equals(arrayrr, arrayrr3))
nova chamada: assertTrue(Arrays.equals(arrayrr, arrayrr3), "Era esperado verdadeiro, mas " + result2358 + " <Arrays.equals(arrayrr, arrayrr3)> é falso")
chamada antiga: assertTrue(validate(rbc, ac1))
nova chamada: assertTrue(validate(rbc, ac1), "Era esperado verdadeiro, mas " + result2359 + " <validate(rbc, ac1)> é falso")
chamada antiga: assertTrue(validate(rbc, ac2))
nova chamada: assertTrue(validate(rbc, ac2), "Era esperado verdadeiro, mas " + result2360 + " <validate(rbc, ac2)> é falso")
chamada antiga: assertTrue(validate(rbc, ac3))
nova chamada: assertTrue(validate(rbc, ac3), "Era esperado verdadeiro, mas " + result2361 + " <validate(rbc, ac3)> é falso")
chamada antiga: assertEquals(100000, rbcard)
nova chamada: assertEquals(100000, rbcard, "Era esperado valores iguais, mas  100000 é diferente de " + " rbcard")
chamada antiga: assertTrue(equals(bs, rb))
nova chamada: assertTrue(equals(bs, rb), "Era esperado verdadeiro, mas " + result2362 + " <equals(bs, rb)> é falso")
chamada antiga: assertEquals(100000, rbcard)
nova chamada: assertEquals(100000, rbcard, "Era esperado valores iguais, mas  100000 é diferente de " + " rbcard")
chamada antiga: assertEquals(0, rb.getCardinality())
nova chamada: assertEquals(0, rb.getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result2363 + " <rb.getCardinality()>")
chamada antiga: assertTrue(equals(bs, rb))
nova chamada: assertTrue(equals(bs, rb), "Era esperado verdadeiro, mas " + result2364 + " <equals(bs, rb)> é falso")
chamada antiga: assertTrue(equals(bs, rb1))
nova chamada: assertTrue(equals(bs, rb1), "Era esperado verdadeiro, mas " + result2365 + " <equals(bs, rb1)> é falso")
chamada antiga: assertEquals(0, rbcard)
nova chamada: assertEquals(0, rbcard, "Era esperado valores iguais, mas  0 é diferente de " + " rbcard")
chamada antiga: assertTrue(equals(bs, rb))
nova chamada: assertTrue(equals(bs, rb), "Era esperado verdadeiro, mas " + result2366 + " <equals(bs, rb)> é falso")
chamada antiga: assertEquals(0, rbcard)
nova chamada: assertEquals(0, rbcard, "Era esperado valores iguais, mas  0 é diferente de " + " rbcard")
chamada antiga: assertEquals(1, rb.getCardinality())
nova chamada: assertEquals(1, rb.getCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result2367 + " <rb.getCardinality()>")
chamada antiga: assertTrue(equals(bs, rb1))
nova chamada: assertTrue(equals(bs, rb1), "Era esperado verdadeiro, mas " + result2368 + " <equals(bs, rb1)> é falso")
chamada antiga: assertTrue(equals(bs, rb))
nova chamada: assertTrue(equals(bs, rb), "Era esperado verdadeiro, mas " + result2369 + " <equals(bs, rb)> é falso")
chamada antiga: assertEquals(9, rbcard)
nova chamada: assertEquals(9, rbcard, "Era esperado valores iguais, mas  9 é diferente de " + " rbcard")
chamada antiga: assertTrue(equals(bs, rb))
nova chamada: assertTrue(equals(bs, rb), "Era esperado verdadeiro, mas " + result2370 + " <equals(bs, rb)> é falso")
chamada antiga: assertEquals(9, rbcard)
nova chamada: assertEquals(9, rbcard, "Era esperado valores iguais, mas  9 é diferente de " + " rbcard")
chamada antiga: assertTrue(equals(bs, rb2))
nova chamada: assertTrue(equals(bs, rb2), "Era esperado verdadeiro, mas " + result2371 + " <equals(bs, rb2)> é falso")
chamada antiga: assertEquals(96608, rbcard)
nova chamada: assertEquals(96608, rbcard, "Era esperado valores iguais, mas  96608 é diferente de " + " rbcard")
chamada antiga: assertTrue(equals(bs, rb))
nova chamada: assertTrue(equals(bs, rb), "Era esperado verdadeiro, mas " + result2372 + " <equals(bs, rb)> é falso")
chamada antiga: assertEquals(96608, rbcard)
nova chamada: assertEquals(96608, rbcard, "Era esperado valores iguais, mas  96608 é diferente de " + " rbcard")
chamada antiga: assertTrue(equals(bs, rb2))
nova chamada: assertTrue(equals(bs, rb2), "Era esperado verdadeiro, mas " + result2373 + " <equals(bs, rb2)> é falso")
chamada antiga: assertEquals(46464, rbcard)
nova chamada: assertEquals(46464, rbcard, "Era esperado valores iguais, mas  46464 é diferente de " + " rbcard")
chamada antiga: assertTrue(equals(bs, rb))
nova chamada: assertTrue(equals(bs, rb), "Era esperado verdadeiro, mas " + result2374 + " <equals(bs, rb)> é falso")
chamada antiga: assertEquals(46464, rbcard)
nova chamada: assertEquals(46464, rbcard, "Era esperado valores iguais, mas  46464 é diferente de " + " rbcard")
chamada antiga: assertTrue(equals(bs, rb2))
nova chamada: assertTrue(equals(bs, rb2), "Era esperado verdadeiro, mas " + result2375 + " <equals(bs, rb2)> é falso")
chamada antiga: assertEquals(1928, rbcard)
nova chamada: assertEquals(1928, rbcard, "Era esperado valores iguais, mas  1928 é diferente de " + " rbcard")
chamada antiga: assertTrue(equals(bs, rb))
nova chamada: assertTrue(equals(bs, rb), "Era esperado verdadeiro, mas " + result2376 + " <equals(bs, rb)> é falso")
chamada antiga: assertEquals(1928, rbcard)
nova chamada: assertEquals(1928, rbcard, "Era esperado valores iguais, mas  1928 é diferente de " + " rbcard")
chamada antiga: assertTrue(equals(bs, rb2))
nova chamada: assertTrue(equals(bs, rb2), "Era esperado verdadeiro, mas " + result2377 + " <equals(bs, rb2)> é falso")
chamada antiga: assertEquals(132000 - 651 + 2, rbcard)
nova chamada: assertEquals(132000 - 651 + 2, rbcard, "Era esperado valores iguais, mas  132000 - 651 + 2 é diferente de " + " rbcard")
chamada antiga: assertTrue(equals(bs, rb))
nova chamada: assertTrue(equals(bs, rb), "Era esperado verdadeiro, mas " + result2378 + " <equals(bs, rb)> é falso")
chamada antiga: assertEquals(132000 - 651 + 2, rbcard)
nova chamada: assertEquals(132000 - 651 + 2, rbcard, "Era esperado valores iguais, mas  132000 - 651 + 2 é diferente de " + " rbcard")
chamada antiga: assertTrue(equals(bs, rb2))
nova chamada: assertTrue(equals(bs, rb2), "Era esperado verdadeiro, mas " + result2379 + " <equals(bs, rb2)> é falso")
chamada antiga: assertEquals(99999, rb2.getCardinality())
nova chamada: assertEquals(99999, rb2.getCardinality(), "Era esperado valores iguais, mas  99999 é diferente de " + result2380 + " <rb2.getCardinality()>")
chamada antiga: assertTrue(rb2.contains(Integer.MAX_VALUE + 100000))
nova chamada: assertTrue(rb2.contains(Integer.MAX_VALUE + 100000), "Era esperado verdadeiro, mas " + result2381 + " <rb2.contains(Integer.MAX_VALUE + 100000)> é falso")
chamada antiga: assertFalse(rb2.contains(Integer.MAX_VALUE + 100002))
nova chamada: assertFalse(rb2.contains(Integer.MAX_VALUE + 100002), "Era esperado falso, mas " + result2382 + " <rb2.contains(Integer.MAX_VALUE + 100002)> é verdadeiro ")
chamada antiga: assertTrue(rb2.contains(Integer.MAX_VALUE + 199999))
nova chamada: assertTrue(rb2.contains(Integer.MAX_VALUE + 199999), "Era esperado verdadeiro, mas " + result2383 + " <rb2.contains(Integer.MAX_VALUE + 199999)> é falso")
chamada antiga: assertEquals(2, or.getCardinality())
nova chamada: assertEquals(2, or.getCardinality(), "Era esperado valores iguais, mas  2 é diferente de " + result2384 + " <or.getCardinality()>")
chamada antiga: assertTrue(or.contains(1))
nova chamada: assertTrue(or.contains(1), "Era esperado verdadeiro, mas " + result2385 + " <or.contains(1)> é falso")
chamada antiga: assertTrue(or.contains(1 << 31))
nova chamada: assertTrue(or.contains(1 << 31), "Era esperado verdadeiro, mas " + result2386 + " <or.contains(1 << 31)> é falso")
chamada antiga: assertEquals(2, rr1.getCardinality())
nova chamada: assertEquals(2, rr1.getCardinality(), "Era esperado valores iguais, mas  2 é diferente de " + result2387 + " <rr1.getCardinality()>")
chamada antiga: assertTrue(or.contains(1))
nova chamada: assertTrue(or.contains(1), "Era esperado verdadeiro, mas " + result2388 + " <or.contains(1)> é falso")
chamada antiga: assertTrue(or.contains(1 << 31))
nova chamada: assertTrue(or.contains(1 << 31), "Era esperado verdadeiro, mas " + result2389 + " <or.contains(1 << 31)> é falso")
chamada antiga: assertTrue(Arrays.equals(array, arrayrr))
nova chamada: assertTrue(Arrays.equals(array, arrayrr), "Era esperado verdadeiro, mas " + result2390 + " <Arrays.equals(array, arrayrr)> é falso")
chamada antiga: assertTrue(Arrays.equals(array, arrayirr))
nova chamada: assertTrue(Arrays.equals(array, arrayirr), "Era esperado verdadeiro, mas " + result2391 + " <Arrays.equals(array, arrayirr)> é falso")
chamada antiga: assertTrue(correct.equals(rr))
nova chamada: assertTrue(correct.equals(rr), "Era esperado verdadeiro, mas " + result2392 + " <correct.equals(rr)> é falso")
chamada antiga: assertTrue(Arrays.equals(arrayor, arrayrr))
nova chamada: assertTrue(Arrays.equals(arrayor, arrayrr), "Era esperado verdadeiro, mas " + result2393 + " <Arrays.equals(arrayor, arrayrr)> é falso")
chamada antiga: assertEquals(valide, true)
nova chamada: assertEquals(valide, true, "Era esperado valores iguais, mas  valide é diferente de " + " true")
chamada antiga: assertTrue(orresult.equals(off))
nova chamada: assertTrue(orresult.equals(off), "Era esperado verdadeiro, mas " + result2394 + " <orresult.equals(off)> é falso")
chamada antiga: assertEquals(rb2card, orresult.getCardinality())
nova chamada: assertEquals(rb2card, orresult.getCardinality(), "Era esperado valores iguais, mas  rb2card é diferente de " + result2395 + " <orresult.getCardinality()>")
chamada antiga: assertEquals(rb2card, orresult.getCardinality())
nova chamada: assertEquals(rb2card, orresult.getCardinality(), "Era esperado valores iguais, mas  rb2card é diferente de " + result2396 + " <orresult.getCardinality()>")
chamada antiga: assertEquals(rb2.getCardinality() + rb.getCardinality(), orresult2.getCardinality())
nova chamada: assertEquals(rb2.getCardinality() + rb.getCardinality(), orresult2.getCardinality(), "Era esperado valores iguais, mas  rb2.getCardinality() + rb.getCardinality() é diferente de " + result2397 + " <orresult2.getCardinality()>")
chamada antiga: assertTrue(rb.equals(orresult2))
nova chamada: assertTrue(rb.equals(orresult2), "Era esperado verdadeiro, mas " + result2398 + " <rb.equals(orresult2)> é falso")
chamada antiga: assertEquals((4 << 16) - 1, rb.getCardinality())
nova chamada: assertEquals((4 << 16) - 1, rb.getCardinality(), "Era esperado valores iguais, mas  (4  16) - 1 é diferente de " + result2399 + " <rb.getCardinality()>")
chamada antiga: assertFalse(iterator.hasNext())
nova chamada: assertFalse(iterator.hasNext(), "Era esperado falso, mas " + result2400 + " <iterator.hasNext()> é verdadeiro ")
chamada antiga: assertEquals(one, MutableRoaringBitmap.bitmapOf(32))
nova chamada: assertEquals(one, MutableRoaringBitmap.bitmapOf(32), "Era esperado valores iguais, mas  one é diferente de " + result2401 + " <MutableRoaringBitmap.bitmapOf(32)>")
chamada antiga: assertEquals(one, MutableRoaringBitmap.bitmapOf(32))
nova chamada: assertEquals(one, MutableRoaringBitmap.bitmapOf(32), "Era esperado valores iguais, mas  one é diferente de " + result2402 + " <MutableRoaringBitmap.bitmapOf(32)>")
chamada antiga: assertEquals(one, MutableRoaringBitmap.bitmapOf(32))
nova chamada: assertEquals(one, MutableRoaringBitmap.bitmapOf(32), "Era esperado valores iguais, mas  one é diferente de " + result2403 + " <MutableRoaringBitmap.bitmapOf(32)>")
chamada antiga: assertEquals((4 << 16) - 1, rb.getCardinality())
nova chamada: assertEquals((4 << 16) - 1, rb.getCardinality(), "Era esperado valores iguais, mas  (4  16) - 1 é diferente de " + result2404 + " <rb.getCardinality()>")
chamada antiga: assertFalse(iterator.hasNext())
nova chamada: assertFalse(iterator.hasNext(), "Era esperado falso, mas " + result2405 + " <iterator.hasNext()> é verdadeiro ")
chamada antiga: assertEquals((5 << 16) - 2, rb.getCardinality())
nova chamada: assertEquals((5 << 16) - 2, rb.getCardinality(), "Era esperado valores iguais, mas  (5  16) - 2 é diferente de " + result2406 + " <rb.getCardinality()>")
chamada antiga: assertFalse(iterator.hasNext())
nova chamada: assertFalse(iterator.hasNext(), "Era esperado falso, mas " + result2407 + " <iterator.hasNext()> é verdadeiro ")
chamada antiga: assertEquals((2 << 16) + (2 << 14), rb.getCardinality())
nova chamada: assertEquals((2 << 16) + (2 << 14), rb.getCardinality(), "Era esperado valores iguais, mas  (2  16) + (2  14) é diferente de " + result2408 + " <rb.getCardinality()>")
chamada antiga: assertFalse(iterator.hasNext())
nova chamada: assertFalse(iterator.hasNext(), "Era esperado falso, mas " + result2409 + " <iterator.hasNext()> é verdadeiro ")
chamada antiga: assertEquals((5 << 16), rb.getCardinality())
nova chamada: assertEquals((5 << 16), rb.getCardinality(), "Era esperado valores iguais, mas  (5  16) é diferente de " + result2410 + " <rb.getCardinality()>")
chamada antiga: assertFalse(iterator.hasNext())
nova chamada: assertFalse(iterator.hasNext(), "Era esperado falso, mas " + result2411 + " <iterator.hasNext()> é verdadeiro ")
chamada antiga: assertEquals((1 << 14) + 4, rb.getCardinality())
nova chamada: assertEquals((1 << 14) + 4, rb.getCardinality(), "Era esperado valores iguais, mas  (1  14) + 4 é diferente de " + result2412 + " <rb.getCardinality()>")
chamada antiga: assertTrue(iterator.hasNext())
nova chamada: assertTrue(iterator.hasNext(), "Era esperado verdadeiro, mas " + result2413 + " <iterator.hasNext()> é falso")
chamada antiga: assertEquals((1 << 16) - 1, iterator.next())
nova chamada: assertEquals((1 << 16) - 1, iterator.next(), "Era esperado valores iguais, mas  (1  16) - 1 é diferente de " + result2414 + " <iterator.next()>")
chamada antiga: assertTrue(iterator.hasNext())
nova chamada: assertTrue(iterator.hasNext(), "Era esperado verdadeiro, mas " + result2415 + " <iterator.hasNext()> é falso")
chamada antiga: assertEquals(1 << 16, iterator.next())
nova chamada: assertEquals(1 << 16, iterator.next(), "Era esperado valores iguais, mas  1  16 é diferente de " + result2416 + " <iterator.next()>")
chamada antiga: assertTrue(iterator.hasNext())
nova chamada: assertTrue(iterator.hasNext(), "Era esperado verdadeiro, mas " + result2417 + " <iterator.hasNext()> é falso")
chamada antiga: assertEquals(2 << 16, iterator.next())
nova chamada: assertEquals(2 << 16, iterator.next(), "Era esperado valores iguais, mas  2  16 é diferente de " + result2418 + " <iterator.next()>")
chamada antiga: assertTrue(iterator.hasNext())
nova chamada: assertTrue(iterator.hasNext(), "Era esperado verdadeiro, mas " + result2419 + " <iterator.hasNext()> é falso")
chamada antiga: assertEquals(3 << 16, iterator.next())
nova chamada: assertEquals(3 << 16, iterator.next(), "Era esperado valores iguais, mas  3  16 é diferente de " + result2420 + " <iterator.next()>")
chamada antiga: assertFalse(iterator.hasNext())
nova chamada: assertFalse(iterator.hasNext(), "Era esperado falso, mas " + result2421 + " <iterator.hasNext()> é verdadeiro ")
chamada antiga: assertEquals(rb.getCardinality(), N)
nova chamada: assertEquals(rb.getCardinality(), N, "Era esperado valores iguais, mas " + result2422 + " <rb.getCardinality()> é diferente de " + " N")
chamada antiga: assertTrue(rr.equals(rrback))
nova chamada: assertTrue(rr.equals(rrback), "Era esperado verdadeiro, mas " + result2423 + " <rr.equals(rrback)> é falso")
chamada antiga: assertEquals(rr.getCardinality(), rrback.getCardinality())
nova chamada: assertEquals(rr.getCardinality(), rrback.getCardinality(), "Era esperado valores iguais, mas " + result2424 + " <rr.getCardinality()> é diferente de " + result2425 + " <rrback.getCardinality()>")
chamada antiga: assertTrue(rr.equals(rrback))
nova chamada: assertTrue(rr.equals(rrback), "Era esperado verdadeiro, mas " + result2426 + " <rr.equals(rrback)> é falso")
chamada antiga: assertEquals(rr.getCardinality(), rrback.getCardinality())
nova chamada: assertEquals(rr.getCardinality(), rrback.getCardinality(), "Era esperado valores iguais, mas " + result2427 + " <rr.getCardinality()> é diferente de " + result2428 + " <rrback.getCardinality()>")
chamada antiga: assertTrue(rr.equals(rrback))
nova chamada: assertTrue(rr.equals(rrback), "Era esperado verdadeiro, mas " + result2429 + " <rr.equals(rrback)> é falso")
chamada antiga: assertEquals(rr.getCardinality(), rrback.getCardinality())
nova chamada: assertEquals(rr.getCardinality(), rrback.getCardinality(), "Era esperado valores iguais, mas " + result2430 + " <rr.getCardinality()> é diferente de " + result2431 + " <rrback.getCardinality()>")
chamada antiga: assertTrue(rr.equals(rrback))
nova chamada: assertTrue(rr.equals(rrback), "Era esperado verdadeiro, mas " + result2432 + " <rr.equals(rrback)> é falso")
chamada antiga: assertEquals(howmuch, bos.toByteArray().length)
nova chamada: assertEquals(howmuch, bos.toByteArray().length, "Era esperado valores iguais, mas  howmuch é diferente de " + " bos.toByteArray().length")
chamada antiga: assertEquals(rr.getCardinality(), rrback.getCardinality())
nova chamada: assertEquals(rr.getCardinality(), rrback.getCardinality(), "Era esperado valores iguais, mas " + result2433 + " <rr.getCardinality()> é diferente de " + result2434 + " <rrback.getCardinality()>")
chamada antiga: assertTrue(rr.equals(rrback))
nova chamada: assertTrue(rr.equals(rrback), "Era esperado verdadeiro, mas " + result2435 + " <rr.equals(rrback)> é falso")
chamada antiga: assertEquals(howmuch, bos.toByteArray().length)
nova chamada: assertEquals(howmuch, bos.toByteArray().length, "Era esperado valores iguais, mas  howmuch é diferente de " + " bos.toByteArray().length")
chamada antiga: assertEquals(rr.getCardinality(), rrback.getCardinality())
nova chamada: assertEquals(rr.getCardinality(), rrback.getCardinality(), "Era esperado valores iguais, mas " + result2436 + " <rr.getCardinality()> é diferente de " + result2437 + " <rrback.getCardinality()>")
chamada antiga: assertTrue(rr.equals(rrback))
nova chamada: assertTrue(rr.equals(rrback), "Era esperado verdadeiro, mas " + result2438 + " <rr.equals(rrback)> é falso")
chamada antiga: assertEquals(1, xor.getCardinality())
nova chamada: assertEquals(1, xor.getCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result2439 + " <xor.getCardinality()>")
chamada antiga: assertTrue(xor.contains(1))
nova chamada: assertTrue(xor.contains(1), "Era esperado verdadeiro, mas " + result2440 + " <xor.contains(1)> é falso")
chamada antiga: assertEquals(1, rr1.getCardinality())
nova chamada: assertEquals(1, rr1.getCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result2441 + " <rr1.getCardinality()>")
chamada antiga: assertTrue(xor.contains(1))
nova chamada: assertTrue(xor.contains(1), "Era esperado verdadeiro, mas " + result2442 + " <xor.contains(1)> é falso")
chamada antiga: assertTrue(correct.equals(rr))
nova chamada: assertTrue(correct.equals(rr), "Era esperado verdadeiro, mas " + result2443 + " <correct.equals(rr)> é falso")
chamada antiga: assertTrue(copy1.equals(rb))
nova chamada: assertTrue(copy1.equals(rb), "Era esperado verdadeiro, mas " + result2444 + " <copy1.equals(rb)> é falso")
chamada antiga: assertTrue(copy2.equals(rb))
nova chamada: assertTrue(copy2.equals(rb), "Era esperado verdadeiro, mas " + result2445 + " <copy2.equals(rb)> é falso")
chamada antiga: assertTrue(copy1.equals(rb))
nova chamada: assertTrue(copy1.equals(rb), "Era esperado verdadeiro, mas " + result2446 + " <copy1.equals(rb)> é falso")
chamada antiga: assertTrue(copy2.equals(rb))
nova chamada: assertTrue(copy2.equals(rb), "Era esperado verdadeiro, mas " + result2447 + " <copy2.equals(rb)> é falso")
chamada antiga: assertTrue(ocopy1.equals(orb))
nova chamada: assertTrue(ocopy1.equals(orb), "Era esperado verdadeiro, mas " + result2448 + " <ocopy1.equals(orb)> é falso")
chamada antiga: assertTrue(copy2.equals(toMapped(orb)))
nova chamada: assertTrue(copy2.equals(toMapped(orb)), "Era esperado verdadeiro, mas " + result2449 + " <copy2.equals(toMapped(orb))> é falso")
chamada antiga: assertTrue(ocopy1.equals(orb))
nova chamada: assertTrue(ocopy1.equals(orb), "Era esperado verdadeiro, mas " + result2450 + " <ocopy1.equals(orb)> é falso")
chamada antiga: assertTrue(copy2.equals(toMapped(orb)))
nova chamada: assertTrue(copy2.equals(toMapped(orb)), "Era esperado verdadeiro, mas " + result2451 + " <copy2.equals(toMapped(orb))> é falso")
chamada antiga: assertEquals(valide, true)
nova chamada: assertEquals(valide, true, "Era esperado valores iguais, mas  valide é diferente de " + " true")
chamada antiga: assertTrue(xorresult.equals(off))
nova chamada: assertTrue(xorresult.equals(off), "Era esperado verdadeiro, mas " + result2452 + " <xorresult.equals(off)> é falso")
chamada antiga: assertEquals(rb2card, xorresult.getCardinality())
nova chamada: assertEquals(rb2card, xorresult.getCardinality(), "Era esperado valores iguais, mas  rb2card é diferente de " + result2453 + " <xorresult.getCardinality()>")
chamada antiga: assertEquals(rb2card, xorresult.getCardinality())
nova chamada: assertEquals(rb2card, xorresult.getCardinality(), "Era esperado valores iguais, mas  rb2card é diferente de " + result2454 + " <xorresult.getCardinality()>")
chamada antiga: assertEquals(rb2.getCardinality() + rb.getCardinality(), xorresult2.getCardinality())
nova chamada: assertEquals(rb2.getCardinality() + rb.getCardinality(), xorresult2.getCardinality(), "Era esperado valores iguais, mas  rb2.getCardinality() + rb.getCardinality() é diferente de " + result2455 + " <xorresult2.getCardinality()>")
chamada antiga: assertTrue(xorresult2.equals(rb))
nova chamada: assertTrue(xorresult2.equals(rb), "Era esperado verdadeiro, mas " + result2456 + " <xorresult2.equals(rb)> é falso")
chamada antiga: assertFalse(rr1.intersects(0, 1))
nova chamada: assertFalse(rr1.intersects(0, 1), "Era esperado falso, mas " + result2457 + " <rr1.intersects(0, 1)> é verdadeiro ")
chamada antiga: assertTrue(rr1.intersects(0, 3))
nova chamada: assertTrue(rr1.intersects(0, 3), "Era esperado verdadeiro, mas " + result2458 + " <rr1.intersects(0, 3)> é falso")
chamada antiga: assertTrue(rr1.intersects(0, 11))
nova chamada: assertTrue(rr1.intersects(0, 11), "Era esperado verdadeiro, mas " + result2459 + " <rr1.intersects(0, 11)> é falso")
chamada antiga: assertFalse(rr1.intersects(12, 14))
nova chamada: assertFalse(rr1.intersects(12, 14), "Era esperado falso, mas " + result2460 + " <rr1.intersects(12, 14)> é verdadeiro ")
chamada antiga: assertFalse(rr1.intersects(4, 5))
nova chamada: assertFalse(rr1.intersects(4, 5), "Era esperado falso, mas " + result2461 + " <rr1.intersects(4, 5)> é verdadeiro ")
chamada antiga: assertTrue(rr1.intersects(2, 3))
nova chamada: assertTrue(rr1.intersects(2, 3), "Era esperado verdadeiro, mas " + result2462 + " <rr1.intersects(2, 3)> é falso")
chamada antiga: assertTrue(rr1.intersects(4, 8))
nova chamada: assertTrue(rr1.intersects(4, 8), "Era esperado verdadeiro, mas " + result2463 + " <rr1.intersects(4, 8)> é falso")
chamada antiga: assertTrue(rr1.intersects(8, 12))
nova chamada: assertTrue(rr1.intersects(8, 12), "Era esperado verdadeiro, mas " + result2464 + " <rr1.intersects(8, 12)> é falso")
chamada antiga: assertTrue(rr2.intersects(0, 11))
nova chamada: assertTrue(rr2.intersects(0, 11), "Era esperado verdadeiro, mas " + result2465 + " <rr2.intersects(0, 11)> é falso")
chamada antiga: assertFalse(rr2.intersects(12, 14))
nova chamada: assertFalse(rr2.intersects(12, 14), "Era esperado falso, mas " + result2466 + " <rr2.intersects(12, 14)> é verdadeiro ")
chamada antiga: assertFalse(rr2.intersects(4, 5))
nova chamada: assertFalse(rr2.intersects(4, 5), "Era esperado falso, mas " + result2467 + " <rr2.intersects(4, 5)> é verdadeiro ")
chamada antiga: assertTrue(rr2.intersects(2, 3))
nova chamada: assertTrue(rr2.intersects(2, 3), "Era esperado verdadeiro, mas " + result2468 + " <rr2.intersects(2, 3)> é falso")
chamada antiga: assertTrue(rr2.intersects(4, 8))
nova chamada: assertTrue(rr2.intersects(4, 8), "Era esperado verdadeiro, mas " + result2469 + " <rr2.intersects(4, 8)> é falso")
chamada antiga: assertTrue(rr2.intersects(8, 12))
nova chamada: assertTrue(rr2.intersects(8, 12), "Era esperado verdadeiro, mas " + result2470 + " <rr2.intersects(8, 12)> é falso")
chamada antiga: assertTrue(rr3.intersects(5, 10))
nova chamada: assertTrue(rr3.intersects(5, 10), "Era esperado verdadeiro, mas " + result2471 + " <rr3.intersects(5, 10)> é falso")
chamada antiga: assertTrue(rbor.equals(BufferFastAggregation.horizontal_or(rb1, rb2)))
nova chamada: assertTrue(rbor.equals(BufferFastAggregation.horizontal_or(rb1, rb2)), "Era esperado verdadeiro, mas " + result2472 + " <rbor.equals(BufferFastAggregation.horizontal_or(rb1, rb2))> é falso")
chamada antiga: assertEquals(ImmutableRoaringBitmap.intersects(rr1, rr2), false)
nova chamada: assertEquals(ImmutableRoaringBitmap.intersects(rr1, rr2), false, "Era esperado valores iguais, mas " + result2473 + " <ImmutableRoaringBitmap.intersects(rr1, rr2)> é diferente de " + " false")
chamada antiga: assertEquals(ImmutableRoaringBitmap.intersects(rr1, rr2), true)
nova chamada: assertEquals(ImmutableRoaringBitmap.intersects(rr1, rr2), true, "Era esperado valores iguais, mas " + result2474 + " <ImmutableRoaringBitmap.intersects(rr1, rr2)> é diferente de " + " true")
chamada antiga: assertEquals(ImmutableRoaringBitmap.intersects(rr3, rr2), true)
nova chamada: assertEquals(ImmutableRoaringBitmap.intersects(rr3, rr2), true, "Era esperado valores iguais, mas " + result2475 + " <ImmutableRoaringBitmap.intersects(rr3, rr2)> é diferente de " + " true")
chamada antiga: assertEquals(ImmutableRoaringBitmap.intersects(rr3, rr1), false)
nova chamada: assertEquals(ImmutableRoaringBitmap.intersects(rr3, rr1), false, "Era esperado valores iguais, mas " + result2476 + " <ImmutableRoaringBitmap.intersects(rr3, rr1)> é diferente de " + " false")
chamada antiga: assertEquals(ImmutableRoaringBitmap.intersects(rr1, rr2), true)
nova chamada: assertEquals(ImmutableRoaringBitmap.intersects(rr1, rr2), true, "Era esperado valores iguais, mas " + result2477 + " <ImmutableRoaringBitmap.intersects(rr1, rr2)> é diferente de " + " true")
chamada antiga: assertEquals(182, bitmap.getCardinality())
nova chamada: assertEquals(182, bitmap.getCardinality(), "Era esperado valores iguais, mas  182 é diferente de " + result2478 + " <bitmap.getCardinality()>")
chamada antiga: assertEquals(rrand.getCardinality(), rrandCount)
nova chamada: assertEquals(rrand.getCardinality(), rrandCount, "Era esperado valores iguais, mas " + result2479 + " <rrand.getCardinality()> é diferente de " + " rrandCount")
chamada antiga: assertEquals(rrand.getCardinality(), rrandCountm)
nova chamada: assertEquals(rrand.getCardinality(), rrandCountm, "Era esperado valores iguais, mas " + result2480 + " <rrand.getCardinality()> é diferente de " + " rrandCountm")
chamada antiga: assertEquals(rrand.getCardinality(), ImmutableRoaringBitmap.andCardinality(rr, rr2))
nova chamada: assertEquals(rrand.getCardinality(), ImmutableRoaringBitmap.andCardinality(rr, rr2), "Era esperado valores iguais, mas " + result2481 + " <rrand.getCardinality()> é diferente de " + result2482 + " <ImmutableRoaringBitmap.andCardinality(rr, rr2)>")
chamada antiga: assertEquals(rrand.getCardinality(), ImmutableRoaringBitmap.andCardinality(rr2, rr))
nova chamada: assertEquals(rrand.getCardinality(), ImmutableRoaringBitmap.andCardinality(rr2, rr), "Era esperado valores iguais, mas " + result2483 + " <rrand.getCardinality()> é diferente de " + result2484 + " <ImmutableRoaringBitmap.andCardinality(rr2, rr)>")
chamada antiga: assertEquals(rrand.getCardinality(), ImmutableRoaringBitmap.andCardinality(rrm, rr2))
nova chamada: assertEquals(rrand.getCardinality(), ImmutableRoaringBitmap.andCardinality(rrm, rr2), "Era esperado valores iguais, mas " + result2485 + " <rrand.getCardinality()> é diferente de " + result2486 + " <ImmutableRoaringBitmap.andCardinality(rrm, rr2)>")
chamada antiga: assertEquals(rrand.getCardinality(), ImmutableRoaringBitmap.andCardinality(rr2, rrm))
nova chamada: assertEquals(rrand.getCardinality(), ImmutableRoaringBitmap.andCardinality(rr2, rrm), "Era esperado valores iguais, mas " + result2487 + " <rrand.getCardinality()> é diferente de " + result2488 + " <ImmutableRoaringBitmap.andCardinality(rr2, rrm)>")
chamada antiga: assertEquals(rrand.getCardinality(), ImmutableRoaringBitmap.andCardinality(rr2, rr))
nova chamada: assertEquals(rrand.getCardinality(), ImmutableRoaringBitmap.andCardinality(rr2, rr), "Era esperado valores iguais, mas " + result2489 + " <rrand.getCardinality()> é diferente de " + result2490 + " <ImmutableRoaringBitmap.andCardinality(rr2, rr)>")
chamada antiga: assertEquals(rrand.getCardinality(), ImmutableRoaringBitmap.andCardinality(rr2, rrm))
nova chamada: assertEquals(rrand.getCardinality(), ImmutableRoaringBitmap.andCardinality(rr2, rrm), "Era esperado valores iguais, mas " + result2491 + " <rrand.getCardinality()> é diferente de " + result2492 + " <ImmutableRoaringBitmap.andCardinality(rr2, rrm)>")
chamada antiga: assertEquals(rror.getCardinality(), ImmutableRoaringBitmap.orCardinality(rr, rr2))
nova chamada: assertEquals(rror.getCardinality(), ImmutableRoaringBitmap.orCardinality(rr, rr2), "Era esperado valores iguais, mas " + result2493 + " <rror.getCardinality()> é diferente de " + result2494 + " <ImmutableRoaringBitmap.orCardinality(rr, rr2)>")
chamada antiga: assertEquals(rb4, rb1)
nova chamada: assertEquals(rb4, rb1, "Era esperado valores iguais, mas  rb4 é diferente de " + " rb1")
chamada antiga: assertThrows(NoSuchElementException.class, () -> new MutableRoaringBitmap().first())
nova chamada: assertThrows(NoSuchElementException.class, () -> new MutableRoaringBitmap().first(), "Era esperado que a exceção  NoSuchElementException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(NoSuchElementException.class, () -> new MutableRoaringBitmap().last())
nova chamada: assertThrows(NoSuchElementException.class, () -> new MutableRoaringBitmap().last(), "Era esperado que a exceção  NoSuchElementException.class fosse lançada, mas não foi")
chamada antiga: assertEquals(2, rb.first())
nova chamada: assertEquals(2, rb.first(), "Era esperado valores iguais, mas  2 é diferente de " + result2495 + " <rb.first()>")
chamada antiga: assertEquals(8, rb.last())
nova chamada: assertEquals(8, rb.last(), "Era esperado valores iguais, mas  8 é diferente de " + result2496 + " <rb.last()>")
chamada antiga: assertEquals(2, rb.first())
nova chamada: assertEquals(2, rb.first(), "Era esperado valores iguais, mas  2 é diferente de " + result2497 + " <rb.first()>")
chamada antiga: assertEquals((1 << 14) - 1, rb.last())
nova chamada: assertEquals((1 << 14) - 1, rb.last(), "Era esperado valores iguais, mas  (1  14) - 1 é diferente de " + result2498 + " <rb.last()>")
chamada antiga: assertEquals(2, rb.first())
nova chamada: assertEquals(2, rb.first(), "Era esperado valores iguais, mas  2 é diferente de " + result2499 + " <rb.first()>")
chamada antiga: assertEquals((1L << 30) - 1, rb.last())
nova chamada: assertEquals((1L << 30) - 1, rb.last(), "Era esperado valores iguais, mas  (1L  30) - 1 é diferente de " + result2500 + " <rb.last()>")
chamada antiga: assertEquals(baseline, MutableRoaringBitmap.and(baseline, baseline))
nova chamada: assertEquals(baseline, MutableRoaringBitmap.and(baseline, baseline), "Era esperado valores iguais, mas  baseline é diferente de " + result2501 + " <MutableRoaringBitmap.and(baseline, baseline)>")
chamada antiga: assertEquals(baseline.getCardinality(), MutableRoaringBitmap.andCardinality(baseline, baseline))
nova chamada: assertEquals(baseline.getCardinality(), MutableRoaringBitmap.andCardinality(baseline, baseline), "Era esperado valores iguais, mas " + result2502 + " <baseline.getCardinality()> é diferente de " + result2503 + " <MutableRoaringBitmap.andCardinality(baseline, baseline)>")
chamada antiga: assertEquals(rb.contains(0), true)
nova chamada: assertEquals(rb.contains(0), true, "Era esperado valores iguais, mas " + result2504 + " <rb.contains(0)> é diferente de " + " true")
chamada antiga: assertEquals(rb.getCardinality(), 1)
nova chamada: assertEquals(rb.getCardinality(), 1, "Era esperado valores iguais, mas " + result2505 + " <rb.getCardinality()> é diferente de " + " 1")
chamada antiga: assertEquals(-1, r.nextValue(7))
nova chamada: assertEquals(-1, r.nextValue(7), "Era esperado valores iguais, mas  -1 é diferente de " + result2506 + " <r.nextValue(7)>")
chamada antiga: assertNotEquals(rbB, rbA)
nova chamada: assertNotEquals(rbB, rbA, "Era esperado valores diferentes, mas  rbB é igual a " + " rbA")
chamada antiga: assertNotEquals(rbB, rbA)
nova chamada: assertNotEquals(rbB, rbA, "Era esperado valores diferentes, mas  rbB é igual a " + " rbA")
chamada antiga: assertNotEquals(rbB, rbA)
nova chamada: assertNotEquals(rbB, rbA, "Era esperado valores diferentes, mas  rbB é igual a " + " rbA")
chamada antiga: assertFalse(map.contains(30))
nova chamada: assertFalse(map.contains(30), "Era esperado falso, mas " + result2507 + " <map.contains(30)> é verdadeiro ")
chamada antiga: assertTrue(map.contains(32))
nova chamada: assertTrue(map.contains(32), "Era esperado verdadeiro, mas " + result2508 + " <map.contains(32)> é falso")
chamada antiga: assertThrows(IOException.class, () -> {
    MutableRoaringBitmap bitmap = new MutableRoaringBitmap();
    bitmap.deserialize(ByteBuffer.allocate(4));
})
nova chamada: assertThrows(IOException.class, () -> {
    MutableRoaringBitmap bitmap = new MutableRoaringBitmap();
    bitmap.deserialize(ByteBuffer.allocate(4));
}, "Era esperado que a exceção  IOException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(IOException.class, () -> {
    MutableRoaringBitmap bitmap = new MutableRoaringBitmap();
    bitmap.deserialize(new DataInputStream(new ByteArrayInputStream(new byte[4])));
})
nova chamada: assertThrows(IOException.class, () -> {
    MutableRoaringBitmap bitmap = new MutableRoaringBitmap();
    bitmap.deserialize(new DataInputStream(new ByteArrayInputStream(new byte[4])));
}, "Era esperado que a exceção  IOException.class fosse lançada, mas não foi")
chamada antiga: assertFalse(bitmap.cardinalityExceeds(Integer.MAX_VALUE))
nova chamada: assertFalse(bitmap.cardinalityExceeds(Integer.MAX_VALUE), "Era esperado falso, mas " + result2509 + " <bitmap.cardinalityExceeds(Integer.MAX_VALUE)> é verdadeiro ")
chamada antiga: assertFalse(bitmap.cardinalityExceeds(runLength + bitmapCount + arrayCount))
nova chamada: assertFalse(bitmap.cardinalityExceeds(runLength + bitmapCount + arrayCount), "Era esperado falso, mas " + result2510 + " <bitmap.cardinalityExceeds(runLength + bitmapCount + arrayCount)> é verdadeiro ")
chamada antiga: assertTrue(bitmap.cardinalityExceeds(runLength + bitmapCount + 1))
nova chamada: assertTrue(bitmap.cardinalityExceeds(runLength + bitmapCount + 1), "Era esperado verdadeiro, mas " + result2511 + " <bitmap.cardinalityExceeds(runLength + bitmapCount + 1)> é falso")
chamada antiga: assertTrue(bitmap.cardinalityExceeds(runLength + bitmapCount - 1))
nova chamada: assertTrue(bitmap.cardinalityExceeds(runLength + bitmapCount - 1), "Era esperado verdadeiro, mas " + result2512 + " <bitmap.cardinalityExceeds(runLength + bitmapCount - 1)> é falso")
chamada antiga: assertTrue(bitmap.cardinalityExceeds(runLength - 1))
nova chamada: assertTrue(bitmap.cardinalityExceeds(runLength - 1), "Era esperado verdadeiro, mas " + result2513 + " <bitmap.cardinalityExceeds(runLength - 1)> é falso")
chamada antiga: assertTrue(b1.equals(MutableRoaringBitmap.bitmapOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))
nova chamada: assertTrue(b1.equals(MutableRoaringBitmap.bitmapOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)), "Era esperado verdadeiro, mas " + result2514 + " <b1.equals(MutableRoaringBitmap.bitmapOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))> é falso")
chamada antiga: assertTrue(b1.isEmpty())
nova chamada: assertTrue(b1.isEmpty(), "Era esperado verdadeiro, mas " + result2515 + " <b1.isEmpty()> é falso")
chamada antiga: assertTrue(b1.equals(MutableRoaringBitmap.bitmapOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))
nova chamada: assertTrue(b1.equals(MutableRoaringBitmap.bitmapOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)), "Era esperado verdadeiro, mas " + result2516 + " <b1.equals(MutableRoaringBitmap.bitmapOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))> é falso")
chamada antiga: assertTrue(b1.isEmpty())
nova chamada: assertTrue(b1.isEmpty(), "Era esperado verdadeiro, mas " + result2517 + " <b1.isEmpty()> é falso")
chamada antiga: assertEquals(-1, ImmutableRoaringBitmap.bitmapOf(27399807).previousValue(403042))
nova chamada: assertEquals(-1, ImmutableRoaringBitmap.bitmapOf(27399807).previousValue(403042), "Era esperado valores iguais, mas  -1 é diferente de " + result2518 + " <ImmutableRoaringBitmap.bitmapOf(27399807).previousValue(403042)>")
chamada antiga: assertEquals(-1, ImmutableRoaringBitmap.bitmapOf().previousValue(403042))
nova chamada: assertEquals(-1, ImmutableRoaringBitmap.bitmapOf().previousValue(403042), "Era esperado valores iguais, mas  -1 é diferente de " + result2519 + " <ImmutableRoaringBitmap.bitmapOf().previousValue(403042)>")
chamada antiga: Assertions.assertEquals(2L, x.getLongCardinality())
nova chamada: assertEquals(2L, x.getLongCardinality(), "Era esperado valores iguais, mas  2L é diferente de " + result2520 + " <x.getLongCardinality()>")
chamada antiga: Assertions.assertArrayEquals(new int[] { -2, -1 }, x.toArray())
nova chamada: assertArrayEquals(new int[] { -2, -1 }, x.toArray(), "Era esperado arrays iguais, mas  new int[] { -2, -1 } é diferente de " + result2521 + " <x.toArray()>")
chamada antiga: assertEquals(bitmap, copy)
nova chamada: assertEquals(bitmap, copy, "Era esperado valores iguais, mas  bitmap é diferente de " + " copy")
chamada antiga: assertEquals(bitmap, result)
nova chamada: assertEquals(bitmap, result, "Era esperado valores iguais, mas  bitmap é diferente de " + " result")
chamada antiga: assertEquals(bitmap.getCardinality(), cardinality)
nova chamada: assertEquals(bitmap.getCardinality(), cardinality, "Era esperado valores iguais, mas " + result2522 + " <bitmap.getCardinality()> é diferente de " + " cardinality")
chamada antiga: assertEquals(expected, result)
nova chamada: assertEquals(expected, result, "Era esperado valores iguais, mas  expected é diferente de " + " result")
chamada antiga: assertEquals(expected.getCardinality(), consumed)
nova chamada: assertEquals(expected.getCardinality(), consumed, "Era esperado valores iguais, mas " + result2523 + " <expected.getCardinality()> é diferente de " + " consumed")
chamada antiga: assertEquals(expected, result)
nova chamada: assertEquals(expected, result, "Era esperado valores iguais, mas  expected é diferente de " + " result")
chamada antiga: assertEquals(expected.getCardinality(), consumed)
nova chamada: assertEquals(expected.getCardinality(), consumed, "Era esperado valores iguais, mas " + result2524 + " <expected.getCardinality()> é diferente de " + " consumed")
chamada antiga: assertEquals(0, consumed)
nova chamada: assertEquals(0, consumed, "Era esperado valores iguais, mas  0 é diferente de " + " consumed")
chamada antiga: assertTrue(result.isEmpty())
nova chamada: assertTrue(result.isEmpty(), "Era esperado verdadeiro, mas " + result2525 + " <result.isEmpty()> é falso")
chamada antiga: assertTrue(bi.hasNext())
nova chamada: assertTrue(bi.hasNext(), "Era esperado verdadeiro, mas " + result2526 + " <bi.hasNext()> é falso")
chamada antiga: assertEquals(n, 1)
nova chamada: assertEquals(n, 1, "Era esperado valores iguais, mas  n é diferente de " + " 1")
chamada antiga: assertEquals(batch[0], 8511)
nova chamada: assertEquals(batch[0], 8511, "Era esperado valores iguais, mas  batch[0] é diferente de " + " 8511")
chamada antiga: assertFalse(bi.hasNext())
nova chamada: assertFalse(bi.hasNext(), "Era esperado falso, mas " + result2527 + " <bi.hasNext()> é verdadeiro ")
chamada antiga: assertTrue(bi.hasNext())
nova chamada: assertTrue(bi.hasNext(), "Era esperado verdadeiro, mas " + result2528 + " <bi.hasNext()> é falso")
chamada antiga: assertFalse(bi.hasNext())
nova chamada: assertFalse(bi.hasNext(), "Era esperado falso, mas " + result2529 + " <bi.hasNext()> é verdadeiro ")
chamada antiga: assertTrue(it.hasNext())
nova chamada: assertTrue(it.hasNext(), "Era esperado verdadeiro, mas " + result2530 + " <it.hasNext()> é falso")
chamada antiga: assertEquals(n, 3)
nova chamada: assertEquals(n, 3, "Era esperado valores iguais, mas  n é diferente de " + " 3")
chamada antiga: assertEquals(batch[0], 3 << 16)
nova chamada: assertEquals(batch[0], 3 << 16, "Era esperado valores iguais, mas  batch[0] é diferente de " + " 3  16")
chamada antiga: assertEquals(batch[1], (3 << 16) + 5)
nova chamada: assertEquals(batch[1], (3 << 16) + 5, "Era esperado valores iguais, mas  batch[1] é diferente de " + " (3  16) + 5")
chamada antiga: assertEquals(batch[2], (3 << 16) + 10)
nova chamada: assertEquals(batch[2], (3 << 16) + 10, "Era esperado valores iguais, mas  batch[2] é diferente de " + " (3  16) + 10")
chamada antiga: assertEquals(asList(bits.getCharIterator()), ImmutableList.of(0, 127))
nova chamada: assertEquals(asList(bits.getCharIterator()), ImmutableList.of(0, 127), "Era esperado valores iguais, mas " + result2531 + " <asList(bits.getCharIterator())> é diferente de " + result2532 + " <ImmutableList.of(0, 127)>")
chamada antiga: assertEquals(asList(bits.getReverseCharIterator()), ImmutableList.of(127, 0))
nova chamada: assertEquals(asList(bits.getReverseCharIterator()), ImmutableList.of(127, 0), "Era esperado valores iguais, mas " + result2533 + " <asList(bits.getReverseCharIterator())> é diferente de " + result2534 + " <ImmutableList.of(127, 0)>")
chamada antiga: assertFalse(MutableRoaringBitmap.bitmapOf().iterator().hasNext())
nova chamada: assertFalse(MutableRoaringBitmap.bitmapOf().iterator().hasNext(), "Era esperado falso, mas " + result2535 + " <MutableRoaringBitmap.bitmapOf().iterator().hasNext()> é verdadeiro ")
chamada antiga: assertFalse(MutableRoaringBitmap.bitmapOf().getIntIterator().hasNext())
nova chamada: assertFalse(MutableRoaringBitmap.bitmapOf().getIntIterator().hasNext(), "Era esperado falso, mas " + result2536 + " <MutableRoaringBitmap.bitmapOf().getIntIterator().hasNext()> é verdadeiro ")
chamada antiga: assertFalse(MutableRoaringBitmap.bitmapOf().getReverseIntIterator().hasNext())
nova chamada: assertFalse(MutableRoaringBitmap.bitmapOf().getReverseIntIterator().hasNext(), "Era esperado falso, mas " + result2537 + " <MutableRoaringBitmap.bitmapOf().getReverseIntIterator().hasNext()> é verdadeiro ")
chamada antiga: assertEquals(bitmap.getCardinality(), iteratorCopy.size())
nova chamada: assertEquals(bitmap.getCardinality(), iteratorCopy.size(), "Era esperado valores iguais, mas " + result2538 + " <bitmap.getCardinality()> é diferente de " + result2539 + " <iteratorCopy.size()>")
chamada antiga: assertEquals(bitmap.getCardinality(), intIteratorCopy.size())
nova chamada: assertEquals(bitmap.getCardinality(), intIteratorCopy.size(), "Era esperado valores iguais, mas " + result2540 + " <bitmap.getCardinality()> é diferente de " + result2541 + " <intIteratorCopy.size()>")
chamada antiga: assertEquals(bitmap.getCardinality(), reverseIntIteratorCopy.size())
nova chamada: assertEquals(bitmap.getCardinality(), reverseIntIteratorCopy.size(), "Era esperado valores iguais, mas " + result2542 + " <bitmap.getCardinality()> é diferente de " + result2543 + " <reverseIntIteratorCopy.size()>")
chamada antiga: assertEquals(Ints.asList(data), iteratorCopy)
nova chamada: assertEquals(Ints.asList(data), iteratorCopy, "Era esperado valores iguais, mas " + result2544 + " <Ints.asList(data)> é diferente de " + " iteratorCopy")
chamada antiga: assertEquals(Ints.asList(data), intIteratorCopy)
nova chamada: assertEquals(Ints.asList(data), intIteratorCopy, "Era esperado valores iguais, mas " + result2545 + " <Ints.asList(data)> é diferente de " + " intIteratorCopy")
chamada antiga: assertEquals(Lists.reverse(Ints.asList(data)), reverseIntIteratorCopy)
nova chamada: assertEquals(Lists.reverse(Ints.asList(data)), reverseIntIteratorCopy, "Era esperado valores iguais, mas " + result2546 + " <Lists.reverse(Ints.asList(data))> é diferente de " + " reverseIntIteratorCopy")
chamada antiga: assertEquals(bitmap.getCardinality(), iteratorCopy.size())
nova chamada: assertEquals(bitmap.getCardinality(), iteratorCopy.size(), "Era esperado valores iguais, mas " + result2547 + " <bitmap.getCardinality()> é diferente de " + result2548 + " <iteratorCopy.size()>")
chamada antiga: assertEquals(bitmap.getCardinality(), intIteratorCopy.size())
nova chamada: assertEquals(bitmap.getCardinality(), intIteratorCopy.size(), "Era esperado valores iguais, mas " + result2549 + " <bitmap.getCardinality()> é diferente de " + result2550 + " <intIteratorCopy.size()>")
chamada antiga: assertEquals(bitmap.getCardinality(), reverseIntIteratorCopy.size())
nova chamada: assertEquals(bitmap.getCardinality(), reverseIntIteratorCopy.size(), "Era esperado valores iguais, mas " + result2551 + " <bitmap.getCardinality()> é diferente de " + result2552 + " <reverseIntIteratorCopy.size()>")
chamada antiga: assertEquals(Ints.asList(data), iteratorCopy)
nova chamada: assertEquals(Ints.asList(data), iteratorCopy, "Era esperado valores iguais, mas " + result2553 + " <Ints.asList(data)> é diferente de " + " iteratorCopy")
chamada antiga: assertEquals(Ints.asList(data), intIteratorCopy)
nova chamada: assertEquals(Ints.asList(data), intIteratorCopy, "Era esperado valores iguais, mas " + result2554 + " <Ints.asList(data)> é diferente de " + " intIteratorCopy")
chamada antiga: assertEquals(Lists.reverse(Ints.asList(data)), reverseIntIteratorCopy)
nova chamada: assertEquals(Lists.reverse(Ints.asList(data)), reverseIntIteratorCopy, "Era esperado valores iguais, mas " + result2555 + " <Lists.reverse(Ints.asList(data))> é diferente de " + " reverseIntIteratorCopy")
chamada antiga: assertEquals(ImmutableList.of(1, 2, 3), iteratorCopy)
nova chamada: assertEquals(ImmutableList.of(1, 2, 3), iteratorCopy, "Era esperado valores iguais, mas " + result2556 + " <ImmutableList.of(1, 2, 3)> é diferente de " + " iteratorCopy")
chamada antiga: assertEquals(ImmutableList.of(1, 2, 3), intIteratorCopy)
nova chamada: assertEquals(ImmutableList.of(1, 2, 3), intIteratorCopy, "Era esperado valores iguais, mas " + result2557 + " <ImmutableList.of(1, 2, 3)> é diferente de " + " intIteratorCopy")
chamada antiga: assertEquals(ImmutableList.of(3, 2, 1), reverseIntIteratorCopy)
nova chamada: assertEquals(ImmutableList.of(3, 2, 1), reverseIntIteratorCopy, "Era esperado valores iguais, mas " + result2558 + " <ImmutableList.of(3, 2, 1)> é diferente de " + " reverseIntIteratorCopy")
chamada antiga: assertEquals(ImmutableList.of(1, 2, 3), iteratorCopy)
nova chamada: assertEquals(ImmutableList.of(1, 2, 3), iteratorCopy, "Era esperado valores iguais, mas " + result2559 + " <ImmutableList.of(1, 2, 3)> é diferente de " + " iteratorCopy")
chamada antiga: assertEquals(ImmutableList.of(1, 2, 3), intIteratorCopy)
nova chamada: assertEquals(ImmutableList.of(1, 2, 3), intIteratorCopy, "Era esperado valores iguais, mas " + result2560 + " <ImmutableList.of(1, 2, 3)> é diferente de " + " intIteratorCopy")
chamada antiga: assertEquals(ImmutableList.of(3, 2, 1), reverseIntIteratorCopy)
nova chamada: assertEquals(ImmutableList.of(3, 2, 1), reverseIntIteratorCopy, "Era esperado valores iguais, mas " + result2561 + " <ImmutableList.of(3, 2, 1)> é diferente de " + " reverseIntIteratorCopy")
chamada antiga: assertEquals(j, jj)
nova chamada: assertEquals(j, jj, "Era esperado valores iguais, mas  j é diferente de " + " jj")
chamada antiga: assertEquals((4 << 16) - 1, rb.getCardinality())
nova chamada: assertEquals((4 << 16) - 1, rb.getCardinality(), "Era esperado valores iguais, mas  (4  16) - 1 é diferente de " + result2562 + " <rb.getCardinality()>")
chamada antiga: assertFalse(iterator.hasNext())
nova chamada: assertFalse(iterator.hasNext(), "Era esperado falso, mas " + result2563 + " <iterator.hasNext()> é verdadeiro ")
chamada antiga: assertEquals((4 << 16) - 1, rb.getCardinality())
nova chamada: assertEquals((4 << 16) - 1, rb.getCardinality(), "Era esperado valores iguais, mas  (4  16) - 1 é diferente de " + result2564 + " <rb.getCardinality()>")
chamada antiga: assertFalse(iterator.hasNext())
nova chamada: assertFalse(iterator.hasNext(), "Era esperado falso, mas " + result2565 + " <iterator.hasNext()> é verdadeiro ")
chamada antiga: assertEquals((5 << 16) - 2, rb.getCardinality())
nova chamada: assertEquals((5 << 16) - 2, rb.getCardinality(), "Era esperado valores iguais, mas  (5  16) - 2 é diferente de " + result2566 + " <rb.getCardinality()>")
chamada antiga: assertFalse(iterator.hasNext())
nova chamada: assertFalse(iterator.hasNext(), "Era esperado falso, mas " + result2567 + " <iterator.hasNext()> é verdadeiro ")
chamada antiga: assertEquals((2 << 16) + (2 << 14), rb.getCardinality())
nova chamada: assertEquals((2 << 16) + (2 << 14), rb.getCardinality(), "Era esperado valores iguais, mas  (2  16) + (2  14) é diferente de " + result2568 + " <rb.getCardinality()>")
chamada antiga: assertFalse(iterator.hasNext())
nova chamada: assertFalse(iterator.hasNext(), "Era esperado falso, mas " + result2569 + " <iterator.hasNext()> é verdadeiro ")
chamada antiga: assertEquals((5 << 16), rb.getCardinality())
nova chamada: assertEquals((5 << 16), rb.getCardinality(), "Era esperado valores iguais, mas  (5  16) é diferente de " + result2570 + " <rb.getCardinality()>")
chamada antiga: assertFalse(iterator.hasNext())
nova chamada: assertFalse(iterator.hasNext(), "Era esperado falso, mas " + result2571 + " <iterator.hasNext()> é verdadeiro ")
chamada antiga: assertEquals((1 << 14) + 4, rb.getCardinality())
nova chamada: assertEquals((1 << 14) + 4, rb.getCardinality(), "Era esperado valores iguais, mas  (1  14) + 4 é diferente de " + result2572 + " <rb.getCardinality()>")
chamada antiga: assertTrue(iterator.hasNext())
nova chamada: assertTrue(iterator.hasNext(), "Era esperado verdadeiro, mas " + result2573 + " <iterator.hasNext()> é falso")
chamada antiga: assertEquals((1 << 16) - 1, iterator.next())
nova chamada: assertEquals((1 << 16) - 1, iterator.next(), "Era esperado valores iguais, mas  (1  16) - 1 é diferente de " + result2574 + " <iterator.next()>")
chamada antiga: assertTrue(iterator.hasNext())
nova chamada: assertTrue(iterator.hasNext(), "Era esperado verdadeiro, mas " + result2575 + " <iterator.hasNext()> é falso")
chamada antiga: assertEquals(1 << 16, iterator.next())
nova chamada: assertEquals(1 << 16, iterator.next(), "Era esperado valores iguais, mas  1  16 é diferente de " + result2576 + " <iterator.next()>")
chamada antiga: assertTrue(iterator.hasNext())
nova chamada: assertTrue(iterator.hasNext(), "Era esperado verdadeiro, mas " + result2577 + " <iterator.hasNext()> é falso")
chamada antiga: assertEquals(2 << 16, iterator.next())
nova chamada: assertEquals(2 << 16, iterator.next(), "Era esperado valores iguais, mas  2  16 é diferente de " + result2578 + " <iterator.next()>")
chamada antiga: assertTrue(iterator.hasNext())
nova chamada: assertTrue(iterator.hasNext(), "Era esperado verdadeiro, mas " + result2579 + " <iterator.hasNext()> é falso")
chamada antiga: assertEquals(3 << 16, iterator.next())
nova chamada: assertEquals(3 << 16, iterator.next(), "Era esperado valores iguais, mas  3  16 é diferente de " + result2580 + " <iterator.next()>")
chamada antiga: assertFalse(iterator.hasNext())
nova chamada: assertFalse(iterator.hasNext(), "Era esperado falso, mas " + result2581 + " <iterator.hasNext()> é verdadeiro ")
chamada antiga: assertEquals((1 << 14) + 3, rb.getCardinality())
nova chamada: assertEquals((1 << 14) + 3, rb.getCardinality(), "Era esperado valores iguais, mas  (1  14) + 3 é diferente de " + result2582 + " <rb.getCardinality()>")
chamada antiga: assertTrue(iterator.hasNext())
nova chamada: assertTrue(iterator.hasNext(), "Era esperado verdadeiro, mas " + result2583 + " <iterator.hasNext()> é falso")
chamada antiga: assertEquals(1 << 16, iterator.next())
nova chamada: assertEquals(1 << 16, iterator.next(), "Era esperado valores iguais, mas  1  16 é diferente de " + result2584 + " <iterator.next()>")
chamada antiga: assertTrue(iterator.hasNext())
nova chamada: assertTrue(iterator.hasNext(), "Era esperado verdadeiro, mas " + result2585 + " <iterator.hasNext()> é falso")
chamada antiga: assertEquals(2 << 16, iterator.next())
nova chamada: assertEquals(2 << 16, iterator.next(), "Era esperado valores iguais, mas  2  16 é diferente de " + result2586 + " <iterator.next()>")
chamada antiga: assertTrue(iterator.hasNext())
nova chamada: assertTrue(iterator.hasNext(), "Era esperado verdadeiro, mas " + result2587 + " <iterator.hasNext()> é falso")
chamada antiga: assertEquals(3 << 16, iterator.next())
nova chamada: assertEquals(3 << 16, iterator.next(), "Era esperado valores iguais, mas  3  16 é diferente de " + result2588 + " <iterator.next()>")
chamada antiga: assertFalse(iterator.hasNext())
nova chamada: assertFalse(iterator.hasNext(), "Era esperado falso, mas " + result2589 + " <iterator.hasNext()> é verdadeiro ")
chamada antiga: assertEquals(5, rb.last())
nova chamada: assertEquals(5, rb.last(), "Era esperado valores iguais, mas  5 é diferente de " + result2590 + " <rb.last()>")
chamada antiga: assertEquals((int) (65535L * 65536L + 65523), rb3.last())
nova chamada: assertEquals((int) (65535L * 65536L + 65523), rb3.last(), "Era esperado valores iguais, mas  (int) (65535L * 65536L + 65523) é diferente de " + result2591 + " <rb3.last()>")
chamada antiga: assertTrue(rb.isEmpty())
nova chamada: assertTrue(rb.isEmpty(), "Era esperado verdadeiro, mas " + result2592 + " <rb.isEmpty()> é falso")
chamada antiga: assertEquals(MutableRoaringBitmap.bitmapOf(1, 0x10001, 0x20001), rb)
nova chamada: assertEquals(MutableRoaringBitmap.bitmapOf(1, 0x10001, 0x20001), rb, "Era esperado valores iguais, mas " + result2593 + " <MutableRoaringBitmap.bitmapOf(1, 0x10001, 0x20001)> é diferente de " + " rb")
chamada antiga: assertTrue(result.isEmpty())
nova chamada: assertTrue(result.isEmpty(), "Era esperado verdadeiro, mas " + result2594 + " <result.isEmpty()> é falso")
chamada antiga: assertEquals(MutableRoaringBitmap.bitmapOf(1, 0x10001, 0x20001), ImmutableRoaringBitmap.orNot(rb, full, 0x30000L))
nova chamada: assertEquals(MutableRoaringBitmap.bitmapOf(1, 0x10001, 0x20001), ImmutableRoaringBitmap.orNot(rb, full, 0x30000L), "Era esperado valores iguais, mas " + result2595 + " <MutableRoaringBitmap.bitmapOf(1, 0x10001, 0x20001)> é diferente de " + result2596 + " <ImmutableRoaringBitmap.orNot(rb, full, 0x30000L)>")
chamada antiga: assertEquals(expected, actual)
nova chamada: assertEquals(expected, actual, "Era esperado valores iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertEquals(expected, actual)
nova chamada: assertEquals(expected, actual, "Era esperado valores iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertEquals(correct, rr)
nova chamada: assertEquals(correct, rr, "Era esperado valores iguais, mas  correct é diferente de " + " rr")
chamada antiga: assertEquals(correct.hashCode(), rr.hashCode())
nova chamada: assertEquals(correct.hashCode(), rr.hashCode(), "Era esperado valores iguais, mas " + result2597 + " <correct.hashCode()> é diferente de " + result2598 + " <rr.hashCode()>")
chamada antiga: assertEquals(rb, andNotresult)
nova chamada: assertEquals(rb, andNotresult, "Era esperado valores iguais, mas  rb é diferente de " + " andNotresult")
chamada antiga: assertEquals(rb2, off)
nova chamada: assertEquals(rb2, off, "Era esperado valores iguais, mas  rb2 é diferente de " + " off")
chamada antiga: assertEquals(rb2, off)
nova chamada: assertEquals(rb2, off, "Era esperado valores iguais, mas  rb2 é diferente de " + " off")
chamada antiga: assertEquals(rb, andNotresult)
nova chamada: assertEquals(rb, andNotresult, "Era esperado valores iguais, mas  rb é diferente de " + " andNotresult")
chamada antiga: assertEquals(rb2, off)
nova chamada: assertEquals(rb2, off, "Era esperado valores iguais, mas  rb2 é diferente de " + " off")
chamada antiga: assertEquals(rb2, off)
nova chamada: assertEquals(rb2, off, "Era esperado valores iguais, mas  rb2 é diferente de " + " off")
chamada antiga: assertEquals(correct, rr)
nova chamada: assertEquals(correct, rr, "Era esperado valores iguais, mas  correct é diferente de " + " rr")
chamada antiga: assertEquals(correct.hashCode(), rr.hashCode())
nova chamada: assertEquals(correct.hashCode(), rr.hashCode(), "Era esperado valores iguais, mas " + result2599 + " <correct.hashCode()> é diferente de " + result2600 + " <rr.hashCode()>")
chamada antiga: assertEquals(correct, rr)
nova chamada: assertEquals(correct, rr, "Era esperado valores iguais, mas  correct é diferente de " + " rr")
chamada antiga: assertEquals(correct.hashCode(), rr.hashCode())
nova chamada: assertEquals(correct.hashCode(), rr.hashCode(), "Era esperado valores iguais, mas " + result2601 + " <correct.hashCode()> é diferente de " + result2602 + " <rr.hashCode()>")
chamada antiga: assertEquals(correct, rr)
nova chamada: assertEquals(correct, rr, "Era esperado valores iguais, mas  correct é diferente de " + " rr")
chamada antiga: assertEquals(correct.hashCode(), rr.hashCode())
nova chamada: assertEquals(correct.hashCode(), rr.hashCode(), "Era esperado valores iguais, mas " + result2603 + " <correct.hashCode()> é diferente de " + result2604 + " <rr.hashCode()>")
chamada antiga: assertEquals(result, rb2)
nova chamada: assertEquals(result, rb2, "Era esperado valores iguais, mas  result é diferente de " + " rb2")
chamada antiga: assertEquals(result, rb2)
nova chamada: assertEquals(result, rb2, "Era esperado valores iguais, mas  result é diferente de " + " rb2")
chamada antiga: assertTrue((mr.getMappeableRoaringArray().getContainerAtIndex(0)) instanceof MappeableArrayContainer)
nova chamada: assertTrue((mr.getMappeableRoaringArray().getContainerAtIndex(0)) instanceof MappeableArrayContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue((mr.getMappeableRoaringArray().getContainerAtIndex(1)) instanceof MappeableArrayContainer)
nova chamada: assertTrue((mr.getMappeableRoaringArray().getContainerAtIndex(1)) instanceof MappeableArrayContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue((mr.getMappeableRoaringArray().getContainerAtIndex(2)) instanceof MappeableBitmapContainer)
nova chamada: assertTrue((mr.getMappeableRoaringArray().getContainerAtIndex(2)) instanceof MappeableBitmapContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue((mr.getMappeableRoaringArray().getContainerAtIndex(3)) instanceof MappeableBitmapContainer)
nova chamada: assertTrue((mr.getMappeableRoaringArray().getContainerAtIndex(3)) instanceof MappeableBitmapContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue((mr.getMappeableRoaringArray().getContainerAtIndex(4)) instanceof MappeableBitmapContainer)
nova chamada: assertTrue((mr.getMappeableRoaringArray().getContainerAtIndex(4)) instanceof MappeableBitmapContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue((mr.getMappeableRoaringArray().getContainerAtIndex(5)) instanceof MappeableArrayContainer)
nova chamada: assertTrue((mr.getMappeableRoaringArray().getContainerAtIndex(5)) instanceof MappeableArrayContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue((mr.getMappeableRoaringArray().getContainerAtIndex(6)) instanceof MappeableBitmapContainer)
nova chamada: assertTrue((mr.getMappeableRoaringArray().getContainerAtIndex(6)) instanceof MappeableBitmapContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(256, mr.getMappeableRoaringArray().getContainerAtIndex(0).getCardinality())
nova chamada: assertEquals(256, mr.getMappeableRoaringArray().getContainerAtIndex(0).getCardinality(), "Era esperado valores iguais, mas  256 é diferente de " + result2605 + " <mr.getMappeableRoaringArray().getContainerAtIndex(0).getCardinality()>")
chamada antiga: assertEquals(4000, mr.getMappeableRoaringArray().getContainerAtIndex(1).getCardinality())
nova chamada: assertEquals(4000, mr.getMappeableRoaringArray().getContainerAtIndex(1).getCardinality(), "Era esperado valores iguais, mas  4000 é diferente de " + result2606 + " <mr.getMappeableRoaringArray().getContainerAtIndex(1).getCardinality()>")
chamada antiga: assertEquals(9000, mr.getMappeableRoaringArray().getContainerAtIndex(2).getCardinality())
nova chamada: assertEquals(9000, mr.getMappeableRoaringArray().getContainerAtIndex(2).getCardinality(), "Era esperado valores iguais, mas  9000 é diferente de " + result2607 + " <mr.getMappeableRoaringArray().getContainerAtIndex(2).getCardinality()>")
chamada antiga: assertEquals(7000, mr.getMappeableRoaringArray().getContainerAtIndex(3).getCardinality())
nova chamada: assertEquals(7000, mr.getMappeableRoaringArray().getContainerAtIndex(3).getCardinality(), "Era esperado valores iguais, mas  7000 é diferente de " + result2608 + " <mr.getMappeableRoaringArray().getContainerAtIndex(3).getCardinality()>")
chamada antiga: assertEquals(10000, mr.getMappeableRoaringArray().getContainerAtIndex(4).getCardinality())
nova chamada: assertEquals(10000, mr.getMappeableRoaringArray().getContainerAtIndex(4).getCardinality(), "Era esperado valores iguais, mas  10000 é diferente de " + result2609 + " <mr.getMappeableRoaringArray().getContainerAtIndex(4).getCardinality()>")
chamada antiga: assertEquals(1000, mr.getMappeableRoaringArray().getContainerAtIndex(5).getCardinality())
nova chamada: assertEquals(1000, mr.getMappeableRoaringArray().getContainerAtIndex(5).getCardinality(), "Era esperado valores iguais, mas  1000 é diferente de " + result2610 + " <mr.getMappeableRoaringArray().getContainerAtIndex(5).getCardinality()>")
chamada antiga: assertEquals(30000, mr.getMappeableRoaringArray().getContainerAtIndex(6).getCardinality())
nova chamada: assertEquals(30000, mr.getMappeableRoaringArray().getContainerAtIndex(6).getCardinality(), "Era esperado valores iguais, mas  30000 é diferente de " + result2611 + " <mr.getMappeableRoaringArray().getContainerAtIndex(6).getCardinality()>")
chamada antiga: assertTrue((mr2.getMappeableRoaringArray().getContainerAtIndex(0)) instanceof MappeableArrayContainer)
nova chamada: assertTrue((mr2.getMappeableRoaringArray().getContainerAtIndex(0)) instanceof MappeableArrayContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue((mr2.getMappeableRoaringArray().getContainerAtIndex(1)) instanceof MappeableArrayContainer)
nova chamada: assertTrue((mr2.getMappeableRoaringArray().getContainerAtIndex(1)) instanceof MappeableArrayContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue((mr2.getMappeableRoaringArray().getContainerAtIndex(2)) instanceof MappeableBitmapContainer)
nova chamada: assertTrue((mr2.getMappeableRoaringArray().getContainerAtIndex(2)) instanceof MappeableBitmapContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue((mr2.getMappeableRoaringArray().getContainerAtIndex(3)) instanceof MappeableArrayContainer)
nova chamada: assertTrue((mr2.getMappeableRoaringArray().getContainerAtIndex(3)) instanceof MappeableArrayContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue((mr2.getMappeableRoaringArray().getContainerAtIndex(4)) instanceof MappeableArrayContainer)
nova chamada: assertTrue((mr2.getMappeableRoaringArray().getContainerAtIndex(4)) instanceof MappeableArrayContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue((mr2.getMappeableRoaringArray().getContainerAtIndex(5)) instanceof MappeableBitmapContainer)
nova chamada: assertTrue((mr2.getMappeableRoaringArray().getContainerAtIndex(5)) instanceof MappeableBitmapContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(256, mr2.getMappeableRoaringArray().getContainerAtIndex(0).getCardinality())
nova chamada: assertEquals(256, mr2.getMappeableRoaringArray().getContainerAtIndex(0).getCardinality(), "Era esperado valores iguais, mas  256 é diferente de " + result2612 + " <mr2.getMappeableRoaringArray().getContainerAtIndex(0).getCardinality()>")
chamada antiga: assertEquals(4000, mr2.getMappeableRoaringArray().getContainerAtIndex(1).getCardinality())
nova chamada: assertEquals(4000, mr2.getMappeableRoaringArray().getContainerAtIndex(1).getCardinality(), "Era esperado valores iguais, mas  4000 é diferente de " + result2613 + " <mr2.getMappeableRoaringArray().getContainerAtIndex(1).getCardinality()>")
chamada antiga: assertEquals(6000, mr2.getMappeableRoaringArray().getContainerAtIndex(2).getCardinality())
nova chamada: assertEquals(6000, mr2.getMappeableRoaringArray().getContainerAtIndex(2).getCardinality(), "Era esperado valores iguais, mas  6000 é diferente de " + result2614 + " <mr2.getMappeableRoaringArray().getContainerAtIndex(2).getCardinality()>")
chamada antiga: assertEquals(1000, mr2.getMappeableRoaringArray().getContainerAtIndex(3).getCardinality())
nova chamada: assertEquals(1000, mr2.getMappeableRoaringArray().getContainerAtIndex(3).getCardinality(), "Era esperado valores iguais, mas  1000 é diferente de " + result2615 + " <mr2.getMappeableRoaringArray().getContainerAtIndex(3).getCardinality()>")
chamada antiga: assertEquals(2000, mr2.getMappeableRoaringArray().getContainerAtIndex(4).getCardinality())
nova chamada: assertEquals(2000, mr2.getMappeableRoaringArray().getContainerAtIndex(4).getCardinality(), "Era esperado valores iguais, mas  2000 é diferente de " + result2616 + " <mr2.getMappeableRoaringArray().getContainerAtIndex(4).getCardinality()>")
chamada antiga: assertEquals(5000, mr2.getMappeableRoaringArray().getContainerAtIndex(5).getCardinality())
nova chamada: assertEquals(5000, mr2.getMappeableRoaringArray().getContainerAtIndex(5).getCardinality(), "Era esperado valores iguais, mas  5000 é diferente de " + result2617 + " <mr2.getMappeableRoaringArray().getContainerAtIndex(5).getCardinality()>")
chamada antiga: assertEquals(0, mr3.getCardinality())
nova chamada: assertEquals(0, mr3.getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result2618 + " <mr3.getCardinality()>")
chamada antiga: assertTrue((mr.getMappeableRoaringArray().getContainerAtIndex(0)) instanceof MappeableRunContainer)
nova chamada: assertTrue((mr.getMappeableRoaringArray().getContainerAtIndex(0)) instanceof MappeableRunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue((mr.getMappeableRoaringArray().getContainerAtIndex(1)) instanceof MappeableRunContainer)
nova chamada: assertTrue((mr.getMappeableRoaringArray().getContainerAtIndex(1)) instanceof MappeableRunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue((mr.getMappeableRoaringArray().getContainerAtIndex(2)) instanceof MappeableRunContainer)
nova chamada: assertTrue((mr.getMappeableRoaringArray().getContainerAtIndex(2)) instanceof MappeableRunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue((mr.getMappeableRoaringArray().getContainerAtIndex(3)) instanceof MappeableRunContainer)
nova chamada: assertTrue((mr.getMappeableRoaringArray().getContainerAtIndex(3)) instanceof MappeableRunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue((mr.getMappeableRoaringArray().getContainerAtIndex(4)) instanceof MappeableRunContainer)
nova chamada: assertTrue((mr.getMappeableRoaringArray().getContainerAtIndex(4)) instanceof MappeableRunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue((mr.getMappeableRoaringArray().getContainerAtIndex(5)) instanceof MappeableRunContainer)
nova chamada: assertTrue((mr.getMappeableRoaringArray().getContainerAtIndex(5)) instanceof MappeableRunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue((mr.getMappeableRoaringArray().getContainerAtIndex(6)) instanceof MappeableRunContainer)
nova chamada: assertTrue((mr.getMappeableRoaringArray().getContainerAtIndex(6)) instanceof MappeableRunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(256, mr.getMappeableRoaringArray().getContainerAtIndex(0).getCardinality())
nova chamada: assertEquals(256, mr.getMappeableRoaringArray().getContainerAtIndex(0).getCardinality(), "Era esperado valores iguais, mas  256 é diferente de " + result2619 + " <mr.getMappeableRoaringArray().getContainerAtIndex(0).getCardinality()>")
chamada antiga: assertEquals(4000, mr.getMappeableRoaringArray().getContainerAtIndex(1).getCardinality())
nova chamada: assertEquals(4000, mr.getMappeableRoaringArray().getContainerAtIndex(1).getCardinality(), "Era esperado valores iguais, mas  4000 é diferente de " + result2620 + " <mr.getMappeableRoaringArray().getContainerAtIndex(1).getCardinality()>")
chamada antiga: assertEquals(9000, mr.getMappeableRoaringArray().getContainerAtIndex(2).getCardinality())
nova chamada: assertEquals(9000, mr.getMappeableRoaringArray().getContainerAtIndex(2).getCardinality(), "Era esperado valores iguais, mas  9000 é diferente de " + result2621 + " <mr.getMappeableRoaringArray().getContainerAtIndex(2).getCardinality()>")
chamada antiga: assertEquals(7000, mr.getMappeableRoaringArray().getContainerAtIndex(3).getCardinality())
nova chamada: assertEquals(7000, mr.getMappeableRoaringArray().getContainerAtIndex(3).getCardinality(), "Era esperado valores iguais, mas  7000 é diferente de " + result2622 + " <mr.getMappeableRoaringArray().getContainerAtIndex(3).getCardinality()>")
chamada antiga: assertEquals(10000, mr.getMappeableRoaringArray().getContainerAtIndex(4).getCardinality())
nova chamada: assertEquals(10000, mr.getMappeableRoaringArray().getContainerAtIndex(4).getCardinality(), "Era esperado valores iguais, mas  10000 é diferente de " + result2623 + " <mr.getMappeableRoaringArray().getContainerAtIndex(4).getCardinality()>")
chamada antiga: assertEquals(1000, mr.getMappeableRoaringArray().getContainerAtIndex(5).getCardinality())
nova chamada: assertEquals(1000, mr.getMappeableRoaringArray().getContainerAtIndex(5).getCardinality(), "Era esperado valores iguais, mas  1000 é diferente de " + result2624 + " <mr.getMappeableRoaringArray().getContainerAtIndex(5).getCardinality()>")
chamada antiga: assertEquals(30000, mr.getMappeableRoaringArray().getContainerAtIndex(6).getCardinality())
nova chamada: assertEquals(30000, mr.getMappeableRoaringArray().getContainerAtIndex(6).getCardinality(), "Era esperado valores iguais, mas  30000 é diferente de " + result2625 + " <mr.getMappeableRoaringArray().getContainerAtIndex(6).getCardinality()>")
chamada antiga: assertTrue((mr2.getMappeableRoaringArray().getContainerAtIndex(0)) instanceof MappeableRunContainer)
nova chamada: assertTrue((mr2.getMappeableRoaringArray().getContainerAtIndex(0)) instanceof MappeableRunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue((mr2.getMappeableRoaringArray().getContainerAtIndex(1)) instanceof MappeableRunContainer)
nova chamada: assertTrue((mr2.getMappeableRoaringArray().getContainerAtIndex(1)) instanceof MappeableRunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue((mr2.getMappeableRoaringArray().getContainerAtIndex(2)) instanceof MappeableRunContainer)
nova chamada: assertTrue((mr2.getMappeableRoaringArray().getContainerAtIndex(2)) instanceof MappeableRunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue((mr2.getMappeableRoaringArray().getContainerAtIndex(3)) instanceof MappeableRunContainer)
nova chamada: assertTrue((mr2.getMappeableRoaringArray().getContainerAtIndex(3)) instanceof MappeableRunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue((mr2.getMappeableRoaringArray().getContainerAtIndex(4)) instanceof MappeableRunContainer)
nova chamada: assertTrue((mr2.getMappeableRoaringArray().getContainerAtIndex(4)) instanceof MappeableRunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue((mr2.getMappeableRoaringArray().getContainerAtIndex(5)) instanceof MappeableRunContainer)
nova chamada: assertTrue((mr2.getMappeableRoaringArray().getContainerAtIndex(5)) instanceof MappeableRunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(256, mr2.getMappeableRoaringArray().getContainerAtIndex(0).getCardinality())
nova chamada: assertEquals(256, mr2.getMappeableRoaringArray().getContainerAtIndex(0).getCardinality(), "Era esperado valores iguais, mas  256 é diferente de " + result2626 + " <mr2.getMappeableRoaringArray().getContainerAtIndex(0).getCardinality()>")
chamada antiga: assertEquals(4000, mr2.getMappeableRoaringArray().getContainerAtIndex(1).getCardinality())
nova chamada: assertEquals(4000, mr2.getMappeableRoaringArray().getContainerAtIndex(1).getCardinality(), "Era esperado valores iguais, mas  4000 é diferente de " + result2627 + " <mr2.getMappeableRoaringArray().getContainerAtIndex(1).getCardinality()>")
chamada antiga: assertEquals(6000, mr2.getMappeableRoaringArray().getContainerAtIndex(2).getCardinality())
nova chamada: assertEquals(6000, mr2.getMappeableRoaringArray().getContainerAtIndex(2).getCardinality(), "Era esperado valores iguais, mas  6000 é diferente de " + result2628 + " <mr2.getMappeableRoaringArray().getContainerAtIndex(2).getCardinality()>")
chamada antiga: assertEquals(1000, mr2.getMappeableRoaringArray().getContainerAtIndex(3).getCardinality())
nova chamada: assertEquals(1000, mr2.getMappeableRoaringArray().getContainerAtIndex(3).getCardinality(), "Era esperado valores iguais, mas  1000 é diferente de " + result2629 + " <mr2.getMappeableRoaringArray().getContainerAtIndex(3).getCardinality()>")
chamada antiga: assertEquals(2000, mr2.getMappeableRoaringArray().getContainerAtIndex(4).getCardinality())
nova chamada: assertEquals(2000, mr2.getMappeableRoaringArray().getContainerAtIndex(4).getCardinality(), "Era esperado valores iguais, mas  2000 é diferente de " + result2630 + " <mr2.getMappeableRoaringArray().getContainerAtIndex(4).getCardinality()>")
chamada antiga: assertEquals(5000, mr2.getMappeableRoaringArray().getContainerAtIndex(5).getCardinality())
nova chamada: assertEquals(5000, mr2.getMappeableRoaringArray().getContainerAtIndex(5).getCardinality(), "Era esperado valores iguais, mas  5000 é diferente de " + result2631 + " <mr2.getMappeableRoaringArray().getContainerAtIndex(5).getCardinality()>")
chamada antiga: assertEquals(0, mr3.getCardinality())
nova chamada: assertEquals(0, mr3.getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result2632 + " <mr3.getCardinality()>")
chamada antiga: assertEquals(rbm1.hashCode(), rbm2.hashCode())
nova chamada: assertEquals(rbm1.hashCode(), rbm2.hashCode(), "Era esperado valores iguais, mas " + result2633 + " <rbm1.hashCode()> é diferente de " + result2634 + " <rbm2.hashCode()>")
chamada antiga: assertEquals(rbm1.hashCode(), rbm2.hashCode())
nova chamada: assertEquals(rbm1.hashCode(), rbm2.hashCode(), "Era esperado valores iguais, mas " + result2635 + " <rbm1.hashCode()> é diferente de " + result2636 + " <rbm2.hashCode()>")
chamada antiga: assertTrue(ir.contains(5))
nova chamada: assertTrue(ir.contains(5), "Era esperado verdadeiro, mas " + result2637 + " <ir.contains(5)> é falso")
chamada antiga: assertFalse(ir.contains(5))
nova chamada: assertFalse(ir.contains(5), "Era esperado falso, mas " + result2638 + " <ir.contains(5)> é verdadeiro ")
chamada antiga: assertEquals(result, resultInt)
nova chamada: assertEquals(result, resultInt, "Era esperado valores iguais, mas  result é diferente de " + " resultInt")
chamada antiga: assertEquals(50000, result.getCardinality())
nova chamada: assertEquals(50000, result.getCardinality(), "Era esperado valores iguais, mas  50000 é diferente de " + result2639 + " <result.getCardinality()>")
chamada antiga: assertEquals(result, resultInt)
nova chamada: assertEquals(result, resultInt, "Era esperado valores iguais, mas  result é diferente de " + " resultInt")
chamada antiga: assertEquals(0, resultInt.getCardinality())
nova chamada: assertEquals(0, resultInt.getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result2640 + " <resultInt.getCardinality()>")
chamada antiga: assertEquals(result, resultInt)
nova chamada: assertEquals(result, resultInt, "Era esperado valores iguais, mas  result é diferente de " + " resultInt")
chamada antiga: assertEquals(250000, result.getCardinality())
nova chamada: assertEquals(250000, result.getCardinality(), "Era esperado valores iguais, mas  250000 é diferente de " + result2641 + " <result.getCardinality()>")
chamada antiga: assertEquals(result, resultInt)
nova chamada: assertEquals(result, resultInt, "Era esperado valores iguais, mas  result é diferente de " + " resultInt")
chamada antiga: assertEquals(0, resultInt.getCardinality())
nova chamada: assertEquals(0, resultInt.getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result2642 + " <resultInt.getCardinality()>")
chamada antiga: assertEquals(result, resultInt)
nova chamada: assertEquals(result, resultInt, "Era esperado valores iguais, mas  result é diferente de " + " resultInt")
chamada antiga: assertEquals(50000, result.getCardinality())
nova chamada: assertEquals(50000, result.getCardinality(), "Era esperado valores iguais, mas  50000 é diferente de " + result2643 + " <result.getCardinality()>")
chamada antiga: assertEquals(result, resultInt)
nova chamada: assertEquals(result, resultInt, "Era esperado valores iguais, mas  result é diferente de " + " resultInt")
chamada antiga: assertEquals(0, resultInt.getCardinality())
nova chamada: assertEquals(0, resultInt.getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result2644 + " <resultInt.getCardinality()>")
chamada antiga: assertEquals(result, resultInt)
nova chamada: assertEquals(result, resultInt, "Era esperado valores iguais, mas  result é diferente de " + " resultInt")
chamada antiga: assertEquals(100000, result.getCardinality())
nova chamada: assertEquals(100000, result.getCardinality(), "Era esperado valores iguais, mas  100000 é diferente de " + result2645 + " <result.getCardinality()>")
chamada antiga: assertEquals(result, resultInt)
nova chamada: assertEquals(result, resultInt, "Era esperado valores iguais, mas  result é diferente de " + " resultInt")
chamada antiga: assertEquals(0, resultInt.getCardinality())
nova chamada: assertEquals(0, resultInt.getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result2646 + " <resultInt.getCardinality()>")
chamada antiga: assertThrows(NoSuchElementException.class, () -> new MutableRoaringBitmap().toImmutableRoaringBitmap().first())
nova chamada: assertThrows(NoSuchElementException.class, () -> new MutableRoaringBitmap().toImmutableRoaringBitmap().first(), "Era esperado que a exceção  NoSuchElementException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(NoSuchElementException.class, () -> new MutableRoaringBitmap().toImmutableRoaringBitmap().last())
nova chamada: assertThrows(NoSuchElementException.class, () -> new MutableRoaringBitmap().toImmutableRoaringBitmap().last(), "Era esperado que a exceção  NoSuchElementException.class fosse lançada, mas não foi")
chamada antiga: assertEquals(2, rb.toImmutableRoaringBitmap().first())
nova chamada: assertEquals(2, rb.toImmutableRoaringBitmap().first(), "Era esperado valores iguais, mas  2 é diferente de " + result2647 + " <rb.toImmutableRoaringBitmap().first()>")
chamada antiga: assertEquals(8, rb.toImmutableRoaringBitmap().last())
nova chamada: assertEquals(8, rb.toImmutableRoaringBitmap().last(), "Era esperado valores iguais, mas  8 é diferente de " + result2648 + " <rb.toImmutableRoaringBitmap().last()>")
chamada antiga: assertEquals(2, rb.toImmutableRoaringBitmap().first())
nova chamada: assertEquals(2, rb.toImmutableRoaringBitmap().first(), "Era esperado valores iguais, mas  2 é diferente de " + result2649 + " <rb.toImmutableRoaringBitmap().first()>")
chamada antiga: assertEquals((1 << 14) - 1, rb.toImmutableRoaringBitmap().last())
nova chamada: assertEquals((1 << 14) - 1, rb.toImmutableRoaringBitmap().last(), "Era esperado valores iguais, mas  (1  14) - 1 é diferente de " + result2650 + " <rb.toImmutableRoaringBitmap().last()>")
chamada antiga: assertEquals(2, rb.toImmutableRoaringBitmap().first())
nova chamada: assertEquals(2, rb.toImmutableRoaringBitmap().first(), "Era esperado valores iguais, mas  2 é diferente de " + result2651 + " <rb.toImmutableRoaringBitmap().first()>")
chamada antiga: assertEquals((1L << 30) - 1, rb.toImmutableRoaringBitmap().last())
nova chamada: assertEquals((1L << 30) - 1, rb.toImmutableRoaringBitmap().last(), "Era esperado valores iguais, mas  (1L  30) - 1 é diferente de " + result2652 + " <rb.toImmutableRoaringBitmap().last()>")
chamada antiga: assertTrue(baseline.isHammingSimilar(baseline, 0))
nova chamada: assertTrue(baseline.isHammingSimilar(baseline, 0), "Era esperado verdadeiro, mas " + result2653 + " <baseline.isHammingSimilar(baseline, 0)> é falso")
chamada antiga: assertTrue(baseline.isHammingSimilar(other, 9))
nova chamada: assertTrue(baseline.isHammingSimilar(other, 9), "Era esperado verdadeiro, mas " + result2654 + " <baseline.isHammingSimilar(other, 9)> é falso")
chamada antiga: assertTrue(baseline.isHammingSimilar(other, 6))
nova chamada: assertTrue(baseline.isHammingSimilar(other, 6), "Era esperado verdadeiro, mas " + result2655 + " <baseline.isHammingSimilar(other, 6)> é falso")
chamada antiga: assertFalse(small.isHammingSimilar(big, 1))
nova chamada: assertFalse(small.isHammingSimilar(big, 1), "Era esperado falso, mas " + result2656 + " <small.isHammingSimilar(big, 1)> é verdadeiro ")
chamada antiga: assertFalse(big.isHammingSimilar(small, 1))
nova chamada: assertFalse(big.isHammingSimilar(small, 1), "Era esperado falso, mas " + result2657 + " <big.isHammingSimilar(small, 1)> é verdadeiro ")
chamada antiga: assertFalse(baseline.isHammingSimilar(shifted, 0))
nova chamada: assertFalse(baseline.isHammingSimilar(shifted, 0), "Era esperado falso, mas " + result2658 + " <baseline.isHammingSimilar(shifted, 0)> é verdadeiro ")
chamada antiga: assertTrue(baseline.isHammingSimilar(baseline, 0))
nova chamada: assertTrue(baseline.isHammingSimilar(baseline, 0), "Era esperado verdadeiro, mas " + result2659 + " <baseline.isHammingSimilar(baseline, 0)> é falso")
chamada antiga: assertTrue(baseline.isHammingSimilar(other, 1))
nova chamada: assertTrue(baseline.isHammingSimilar(other, 1), "Era esperado verdadeiro, mas " + result2660 + " <baseline.isHammingSimilar(other, 1)> é falso")
chamada antiga: assertFalse(baseline.isHammingSimilar(other, 0))
nova chamada: assertFalse(baseline.isHammingSimilar(other, 0), "Era esperado falso, mas " + result2661 + " <baseline.isHammingSimilar(other, 0)> é verdadeiro ")
chamada antiga: assertTrue(baseline.isHammingSimilar(other, 2))
nova chamada: assertTrue(baseline.isHammingSimilar(other, 2), "Era esperado verdadeiro, mas " + result2662 + " <baseline.isHammingSimilar(other, 2)> é falso")
chamada antiga: assertFalse(baseline.isHammingSimilar(other, 1))
nova chamada: assertFalse(baseline.isHammingSimilar(other, 1), "Era esperado falso, mas " + result2663 + " <baseline.isHammingSimilar(other, 1)> é verdadeiro ")
chamada antiga: assertTrue(baseline.isHammingSimilar(other, 3))
nova chamada: assertTrue(baseline.isHammingSimilar(other, 3), "Era esperado verdadeiro, mas " + result2664 + " <baseline.isHammingSimilar(other, 3)> é falso")
chamada antiga: assertFalse(baseline.isHammingSimilar(other, 2))
nova chamada: assertFalse(baseline.isHammingSimilar(other, 2), "Era esperado falso, mas " + result2665 + " <baseline.isHammingSimilar(other, 2)> é verdadeiro ")
chamada antiga: assertEquals(xor.getCardinality(), ImmutableRoaringBitmap.xorCardinality(rb, rb2))
nova chamada: assertEquals(xor.getCardinality(), ImmutableRoaringBitmap.xorCardinality(rb, rb2), "Era esperado valores iguais, mas " + result2666 + " <xor.getCardinality()> é diferente de " + result2667 + " <ImmutableRoaringBitmap.xorCardinality(rb, rb2)>")
chamada antiga: assertEquals(andNot.getCardinality(), ImmutableRoaringBitmap.andNotCardinality(rb, rb2))
nova chamada: assertEquals(andNot.getCardinality(), ImmutableRoaringBitmap.andNotCardinality(rb, rb2), "Era esperado valores iguais, mas " + result2668 + " <andNot.getCardinality()> é diferente de " + result2669 + " <ImmutableRoaringBitmap.andNotCardinality(rb, rb2)>")
chamada antiga: assertEquals(0, ImmutableRoaringBitmap.bitmapOf(65537).rank(1))
nova chamada: assertEquals(0, ImmutableRoaringBitmap.bitmapOf(65537).rank(1), "Era esperado valores iguais, mas  0 é diferente de " + result2670 + " <ImmutableRoaringBitmap.bitmapOf(65537).rank(1)>")
chamada antiga: assertEquals(1, ImmutableRoaringBitmap.bitmapOf(65537).rank(65537))
nova chamada: assertEquals(1, ImmutableRoaringBitmap.bitmapOf(65537).rank(65537), "Era esperado valores iguais, mas  1 é diferente de " + result2671 + " <ImmutableRoaringBitmap.bitmapOf(65537).rank(65537)>")
chamada antiga: assertEquals(1, ImmutableRoaringBitmap.bitmapOf(65537).rank(65538))
nova chamada: assertEquals(1, ImmutableRoaringBitmap.bitmapOf(65537).rank(65538), "Era esperado valores iguais, mas  1 é diferente de " + result2672 + " <ImmutableRoaringBitmap.bitmapOf(65537).rank(65538)>")
chamada antiga: assertEquals("{4294967289}", bitmap.toString())
nova chamada: assertEquals("{4294967289}", bitmap.toString(), "Era esperado valores iguais, mas  '{4294967289}' é diferente de " + result2673 + " <bitmap.toString()>")
chamada antiga: assertEquals(-7, bitmap.last())
nova chamada: assertEquals(-7, bitmap.last(), "Era esperado valores iguais, mas  -7 é diferente de " + result2674 + " <bitmap.last()>")
chamada antiga: assertTrue(bitmap.contains(1L, 999_999L))
nova chamada: assertTrue(bitmap.contains(1L, 999_999L), "Era esperado verdadeiro, mas " + result2675 + " <bitmap.contains(1L, 999_999L)> é falso")
chamada antiga: assertFalse(bitmap.contains(1L, 1_000_001L))
nova chamada: assertFalse(bitmap.contains(1L, 1_000_001L), "Era esperado falso, mas " + result2676 + " <bitmap.contains(1L, 1_000_001L)> é verdadeiro ")
chamada antiga: assertFalse(bitmap.contains(1L, 999_999L))
nova chamada: assertFalse(bitmap.contains(1L, 999_999L), "Era esperado falso, mas " + result2677 + " <bitmap.contains(1L, 999_999L)> é verdadeiro ")
chamada antiga: assertFalse(bitmap.contains(1L, 999_999L))
nova chamada: assertFalse(bitmap.contains(1L, 999_999L), "Era esperado falso, mas " + result2678 + " <bitmap.contains(1L, 999_999L)> é verdadeiro ")
chamada antiga: assertTrue(bitmap.contains(0L, 500_000L))
nova chamada: assertTrue(bitmap.contains(0L, 500_000L), "Era esperado verdadeiro, mas " + result2679 + " <bitmap.contains(0L, 500_000L)> é falso")
chamada antiga: assertFalse(bitmap.contains(2_000_001L, 10_000_000L))
nova chamada: assertFalse(bitmap.contains(2_000_001L, 10_000_000L), "Era esperado falso, mas " + result2680 + " <bitmap.contains(2_000_001L, 10_000_000L)> é verdadeiro ")
chamada antiga: assertTrue(bitmap.contains(1, 6))
nova chamada: assertTrue(bitmap.contains(1, 6), "Era esperado verdadeiro, mas " + result2681 + " <bitmap.contains(1, 6)> é falso")
chamada antiga: assertTrue(bitmap.contains(1, 5))
nova chamada: assertTrue(bitmap.contains(1, 5), "Era esperado verdadeiro, mas " + result2682 + " <bitmap.contains(1, 5)> é falso")
chamada antiga: assertTrue(bitmap.contains(2, 6))
nova chamada: assertTrue(bitmap.contains(2, 6), "Era esperado verdadeiro, mas " + result2683 + " <bitmap.contains(2, 6)> é falso")
chamada antiga: assertTrue(bitmap.contains(2, 7))
nova chamada: assertTrue(bitmap.contains(2, 7), "Era esperado verdadeiro, mas " + result2684 + " <bitmap.contains(2, 7)> é falso")
chamada antiga: assertFalse(bitmap.contains(2, 8))
nova chamada: assertFalse(bitmap.contains(2, 8), "Era esperado falso, mas " + result2685 + " <bitmap.contains(2, 8)> é verdadeiro ")
chamada antiga: assertFalse(bitmap.contains(0, 6))
nova chamada: assertFalse(bitmap.contains(0, 6), "Era esperado falso, mas " + result2686 + " <bitmap.contains(0, 6)> é verdadeiro ")
chamada antiga: assertFalse(bitmap.contains(0, 1))
nova chamada: assertFalse(bitmap.contains(0, 1), "Era esperado falso, mas " + result2687 + " <bitmap.contains(0, 1)> é verdadeiro ")
chamada antiga: assertFalse(bitmap.contains(6, 10))
nova chamada: assertFalse(bitmap.contains(6, 10), "Era esperado falso, mas " + result2688 + " <bitmap.contains(6, 10)> é verdadeiro ")
chamada antiga: assertFalse(bitmap.contains(7, 1 << 16))
nova chamada: assertFalse(bitmap.contains(7, 1 << 16), "Era esperado falso, mas " + result2689 + " <bitmap.contains(7, 1 << 16)> é verdadeiro ")
chamada antiga: assertFalse(bitmap.contains(1 << 17, 1 << 19))
nova chamada: assertFalse(bitmap.contains(1 << 17, 1 << 19), "Era esperado falso, mas " + result2690 + " <bitmap.contains(1 << 17, 1 << 19)> é verdadeiro ")
chamada antiga: assertFalse(bitmap.contains(0L, 2_000_000L))
nova chamada: assertFalse(bitmap.contains(0L, 2_000_000L), "Era esperado falso, mas " + result2691 + " <bitmap.contains(0L, 2_000_000L)> é verdadeiro ")
chamada antiga: assertFalse(bitmap.contains(0L, 2L))
nova chamada: assertFalse(bitmap.contains(0L, 2L), "Era esperado falso, mas " + result2692 + " <bitmap.contains(0L, 2L)> é verdadeiro ")
chamada antiga: assertTrue(bitmap.contains(0L, 1L))
nova chamada: assertTrue(bitmap.contains(0L, 1L), "Era esperado verdadeiro, mas " + result2693 + " <bitmap.contains(0L, 1L)> é falso")
chamada antiga: assertTrue(bitmap.contains(1L << 10, 1 | (1L << 10)))
nova chamada: assertTrue(bitmap.contains(1L << 10, 1 | (1L << 10)), "Era esperado verdadeiro, mas " + result2694 + " <bitmap.contains(1L << 10, 1 | (1L << 10))> é falso")
chamada antiga: assertFalse(bitmap.contains(1L << 31, 1L << 32))
nova chamada: assertFalse(bitmap.contains(1L << 31, 1L << 32), "Era esperado falso, mas " + result2695 + " <bitmap.contains(1L << 31, 1L << 32)> é verdadeiro ")
chamada antiga: assertEquals(1, r.rangeCardinality(60000, 70000))
nova chamada: assertEquals(1, r.rangeCardinality(60000, 70000), "Era esperado valores iguais, mas  1 é diferente de " + result2696 + " <r.rangeCardinality(60000, 70000)>")
chamada antiga: assertThrows(InvalidRoaringFormat.class, () -> new ImmutableRoaringBitmap(ByteBuffer.allocate(8)))
nova chamada: assertThrows(InvalidRoaringFormat.class, () -> new ImmutableRoaringBitmap(ByteBuffer.allocate(8)), "Era esperado que a exceção  InvalidRoaringFormat.class fosse lançada, mas não foi")
chamada antiga: assertEquals(99, rc.getCardinality())
nova chamada: assertEquals(99, rc.getCardinality(), "Era esperado valores iguais, mas  99 é diferente de " + result2697 + " <rc.getCardinality()>")
chamada antiga: assertEquals(64, rc.getCardinality())
nova chamada: assertEquals(64, rc.getCardinality(), "Era esperado valores iguais, mas  64 é diferente de " + result2698 + " <rc.getCardinality()>")
chamada antiga: assertEquals(9, result.getCardinality())
nova chamada: assertEquals(9, result.getCardinality(), "Era esperado valores iguais, mas  9 é diferente de " + result2699 + " <result.getCardinality()>")
chamada antiga: assertThrows(IllegalArgumentException.class, () -> {
    MappeableContainer bc = new MappeableRunContainer();
    bc = bc.add(1, 13);
    bc.select(100);
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    MappeableContainer bc = new MappeableRunContainer();
    bc = bc.add(1, 13);
    bc.select(100);
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: assertEquals(4, rc.getCardinality())
nova chamada: assertEquals(4, rc.getCardinality(), "Era esperado valores iguais, mas  4 é diferente de " + result2700 + " <rc.getCardinality()>")
chamada antiga: assertEquals(4, rc2.getCardinality())
nova chamada: assertEquals(4, rc2.getCardinality(), "Era esperado valores iguais, mas  4 é diferente de " + result2701 + " <rc2.getCardinality()>")
chamada antiga: assertEquals(0, rc.andCardinality(ac))
nova chamada: assertEquals(0, rc.andCardinality(ac), "Era esperado valores iguais, mas  0 é diferente de " + result2702 + " <rc.andCardinality(ac)>")
chamada antiga: assertEquals(5, rc.andCardinality(ac))
nova chamada: assertEquals(5, rc.andCardinality(ac), "Era esperado valores iguais, mas  5 é diferente de " + result2703 + " <rc.andCardinality(ac)>")
chamada antiga: assertEquals(6, rc.andCardinality(ac))
nova chamada: assertEquals(6, rc.andCardinality(ac), "Era esperado valores iguais, mas  6 é diferente de " + result2704 + " <rc.andCardinality(ac)>")
chamada antiga: assertEquals(0, rc.andCardinality(ac))
nova chamada: assertEquals(0, rc.andCardinality(ac), "Era esperado valores iguais, mas  0 é diferente de " + result2705 + " <rc.andCardinality(ac)>")
chamada antiga: assertEquals(5, rc.andCardinality(ac))
nova chamada: assertEquals(5, rc.andCardinality(ac), "Era esperado valores iguais, mas  5 é diferente de " + result2706 + " <rc.andCardinality(ac)>")
chamada antiga: assertEquals(6, rc.andCardinality(ac))
nova chamada: assertEquals(6, rc.andCardinality(ac), "Era esperado valores iguais, mas  6 é diferente de " + result2707 + " <rc.andCardinality(ac)>")
chamada antiga: assertEquals(0, rc1.andCardinality(rc2))
nova chamada: assertEquals(0, rc1.andCardinality(rc2), "Era esperado valores iguais, mas  0 é diferente de " + result2708 + " <rc1.andCardinality(rc2)>")
chamada antiga: assertEquals(0, rc2.andCardinality(rc1))
nova chamada: assertEquals(0, rc2.andCardinality(rc1), "Era esperado valores iguais, mas  0 é diferente de " + result2709 + " <rc2.andCardinality(rc1)>")
chamada antiga: assertEquals(5, rc1.andCardinality(rc2))
nova chamada: assertEquals(5, rc1.andCardinality(rc2), "Era esperado valores iguais, mas  5 é diferente de " + result2710 + " <rc1.andCardinality(rc2)>")
chamada antiga: assertEquals(5, rc2.andCardinality(rc1))
nova chamada: assertEquals(5, rc2.andCardinality(rc1), "Era esperado valores iguais, mas  5 é diferente de " + result2711 + " <rc2.andCardinality(rc1)>")
chamada antiga: assertEquals(6, rc1.andCardinality(rc2))
nova chamada: assertEquals(6, rc1.andCardinality(rc2), "Era esperado valores iguais, mas  6 é diferente de " + result2712 + " <rc1.andCardinality(rc2)>")
chamada antiga: assertEquals(6, rc2.andCardinality(rc1))
nova chamada: assertEquals(6, rc2.andCardinality(rc1), "Era esperado valores iguais, mas  6 é diferente de " + result2713 + " <rc2.andCardinality(rc1)>")
chamada antiga: assertEquals(6, rc1.andCardinality(rc2))
nova chamada: assertEquals(6, rc1.andCardinality(rc2), "Era esperado valores iguais, mas  6 é diferente de " + result2714 + " <rc1.andCardinality(rc2)>")
chamada antiga: assertEquals(6, rc2.andCardinality(rc1))
nova chamada: assertEquals(6, rc2.andCardinality(rc1), "Era esperado valores iguais, mas  6 é diferente de " + result2715 + " <rc2.andCardinality(rc1)>")
chamada antiga: assertEquals(16, rc1.andCardinality(rc2))
nova chamada: assertEquals(16, rc1.andCardinality(rc2), "Era esperado valores iguais, mas  16 é diferente de " + result2716 + " <rc1.andCardinality(rc2)>")
chamada antiga: assertEquals(16, rc2.andCardinality(rc1))
nova chamada: assertEquals(16, rc2.andCardinality(rc1), "Era esperado valores iguais, mas  16 é diferente de " + result2717 + " <rc2.andCardinality(rc1)>")
chamada antiga: assertTrue(rc instanceof MappeableRunContainer)
nova chamada: assertTrue(rc instanceof MappeableRunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(1 << 16, result.getCardinality())
nova chamada: assertEquals(1 << 16, result.getCardinality(), "Era esperado valores iguais, mas  1  16 é diferente de " + result2718 + " <result.getCardinality()>")
chamada antiga: assertTrue(result instanceof MappeableRunContainer)
nova chamada: assertTrue(result instanceof MappeableRunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(rc instanceof MappeableRunContainer)
nova chamada: assertTrue(rc instanceof MappeableRunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(1 << 16, result.getCardinality())
nova chamada: assertEquals(1 << 16, result.getCardinality(), "Era esperado valores iguais, mas  1  16 é diferente de " + result2719 + " <result.getCardinality()>")
chamada antiga: assertTrue(result instanceof MappeableRunContainer)
nova chamada: assertTrue(result instanceof MappeableRunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(rc instanceof MappeableRunContainer)
nova chamada: assertTrue(rc instanceof MappeableRunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(1 << 16, result.getCardinality())
nova chamada: assertEquals(1 << 16, result.getCardinality(), "Era esperado valores iguais, mas  1  16 é diferente de " + result2720 + " <result.getCardinality()>")
chamada antiga: assertTrue(result instanceof MappeableRunContainer)
nova chamada: assertTrue(result instanceof MappeableRunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(-1, rbc.getCardinality())
nova chamada: assertEquals(-1, rbc.getCardinality(), "Era esperado valores iguais, mas  -1 é diferente de " + result2721 + " <rbc.getCardinality()>")
chamada antiga: assertEquals(1 << 16, repaired.getCardinality())
nova chamada: assertEquals(1 << 16, repaired.getCardinality(), "Era esperado valores iguais, mas  1  16 é diferente de " + result2722 + " <repaired.getCardinality()>")
chamada antiga: assertTrue(repaired instanceof MappeableRunContainer)
nova chamada: assertTrue(repaired instanceof MappeableRunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(1 << 16, rbc.getCardinality())
nova chamada: assertEquals(1 << 16, rbc.getCardinality(), "Era esperado valores iguais, mas  1  16 é diferente de " + result2723 + " <rbc.getCardinality()>")
chamada antiga: assertTrue(rbc instanceof MappeableRunContainer)
nova chamada: assertTrue(rbc instanceof MappeableRunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(1 << 16, result.getCardinality())
nova chamada: assertEquals(1 << 16, result.getCardinality(), "Era esperado valores iguais, mas  1  16 é diferente de " + result2724 + " <result.getCardinality()>")
chamada antiga: assertEquals(1 << 16, iresult.getCardinality())
nova chamada: assertEquals(1 << 16, iresult.getCardinality(), "Era esperado valores iguais, mas  1  16 é diferente de " + result2725 + " <iresult.getCardinality()>")
chamada antiga: assertTrue(result instanceof MappeableRunContainer)
nova chamada: assertTrue(result instanceof MappeableRunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(iresult instanceof MappeableRunContainer)
nova chamada: assertTrue(iresult instanceof MappeableRunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(8677, result.getCardinality())
nova chamada: assertEquals(8677, result.getCardinality(), "Era esperado valores iguais, mas  8677 é diferente de " + result2726 + " <result.getCardinality()>")
chamada antiga: assertTrue(rc.getCardinality() > MappeableArrayContainer.DEFAULT_MAX_SIZE)
nova chamada: assertTrue(rc.getCardinality() > MappeableArrayContainer.DEFAULT_MAX_SIZE, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(11437, result.getCardinality())
nova chamada: assertEquals(11437, result.getCardinality(), "Era esperado valores iguais, mas  11437 é diferente de " + result2727 + " <result.getCardinality()>")
chamada antiga: assertEquals(5046, result.getCardinality())
nova chamada: assertEquals(5046, result.getCardinality(), "Era esperado valores iguais, mas  5046 é diferente de " + result2728 + " <result.getCardinality()>")
chamada antiga: assertEquals(6031, result.getCardinality())
nova chamada: assertEquals(6031, result.getCardinality(), "Era esperado valores iguais, mas  6031 é diferente de " + result2729 + " <result.getCardinality()>")
chamada antiga: assertTrue(rc.equals(ac))
nova chamada: assertTrue(rc.equals(ac), "Era esperado verdadeiro, mas " + result2730 + " <rc.equals(ac)> é falso")
chamada antiga: assertTrue(ac.equals(rc))
nova chamada: assertTrue(ac.equals(rc), "Era esperado verdadeiro, mas " + result2731 + " <ac.equals(rc)> é falso")
chamada antiga: assertFalse(rc.equals(ac))
nova chamada: assertFalse(rc.equals(ac), "Era esperado falso, mas " + result2732 + " <rc.equals(ac)> é verdadeiro ")
chamada antiga: assertFalse(ac.equals(rc))
nova chamada: assertFalse(ac.equals(rc), "Era esperado falso, mas " + result2733 + " <ac.equals(rc)> é verdadeiro ")
chamada antiga: assertFalse(rc.equals(ac))
nova chamada: assertFalse(rc.equals(ac), "Era esperado falso, mas " + result2734 + " <rc.equals(ac)> é verdadeiro ")
chamada antiga: assertFalse(ac.equals(rc))
nova chamada: assertFalse(ac.equals(rc), "Era esperado falso, mas " + result2735 + " <ac.equals(rc)> é verdadeiro ")
chamada antiga: assertFalse(rc.equals(ac))
nova chamada: assertFalse(rc.equals(ac), "Era esperado falso, mas " + result2736 + " <rc.equals(ac)> é verdadeiro ")
chamada antiga: assertFalse(ac.equals(rc))
nova chamada: assertFalse(ac.equals(rc), "Era esperado falso, mas " + result2737 + " <ac.equals(rc)> é verdadeiro ")
chamada antiga: assertFalse(rc.equals(ac))
nova chamada: assertFalse(rc.equals(ac), "Era esperado falso, mas " + result2738 + " <rc.equals(ac)> é verdadeiro ")
chamada antiga: assertFalse(ac.equals(rc))
nova chamada: assertFalse(ac.equals(rc), "Era esperado falso, mas " + result2739 + " <ac.equals(rc)> é verdadeiro ")
chamada antiga: assertEquals(0xAAAAAAAAAAAAAAAAL, bits[0])
nova chamada: assertEquals(0xAAAAAAAAAAAAAAAAL, bits[0], "Era esperado valores iguais, mas  0xAAAAAAAAAAAAAAAAL é diferente de " + " bits[0]")
chamada antiga: assertEquals(0L, bits[0])
nova chamada: assertEquals(0L, bits[0], "Era esperado valores iguais, mas  0L é diferente de " + " bits[0]")
chamada antiga: assertEquals(0xAAAAAAAAAAAAAAAAL, bits[0])
nova chamada: assertEquals(0xAAAAAAAAAAAAAAAAL, bits[0], "Era esperado valores iguais, mas  0xAAAAAAAAAAAAAAAAL é diferente de " + " bits[0]")
chamada antiga: assertEquals(-1L, bits[0])
nova chamada: assertEquals(-1L, bits[0], "Era esperado valores iguais, mas  -1L é diferente de " + " bits[0]")
chamada antiga: assertEquals(rb.getCardinality(), 200100)
nova chamada: assertEquals(rb.getCardinality(), 200100, "Era esperado valores iguais, mas " + result2740 + " <rb.getCardinality()> é diferente de " + " 200100")
chamada antiga: assertEquals(rb.getCardinality(), 200100)
nova chamada: assertEquals(rb.getCardinality(), 200100, "Era esperado valores iguais, mas " + result2741 + " <rb.getCardinality()> é diferente de " + " 200100")
chamada antiga: assertEquals(rb.getCardinality(), 200100)
nova chamada: assertEquals(rb.getCardinality(), 200100, "Era esperado valores iguais, mas " + result2742 + " <rb.getCardinality()> é diferente de " + " 200100")
chamada antiga: assertEquals(rb.getCardinality(), 200100)
nova chamada: assertEquals(rb.getCardinality(), 200100, "Era esperado valores iguais, mas " + result2743 + " <rb.getCardinality()> é diferente de " + " 200100")
chamada antiga: assertThrows(IOException.class, () -> deserialize(file))
nova chamada: assertThrows(IOException.class, () -> deserialize(file), "Era esperado que a exceção  IOException.class fosse lançada, mas não foi")
chamada antiga: assertEquals(input, deserialised)
nova chamada: assertEquals(input, deserialised, "Era esperado valores iguais, mas  input é diferente de " + " deserialised")
chamada antiga: assertEquals(input, deserialised)
nova chamada: assertEquals(input, deserialised, "Era esperado valores iguais, mas  input é diferente de " + " deserialised")
chamada antiga: assertEquals(input, deserialised)
nova chamada: assertEquals(input, deserialised, "Era esperado valores iguais, mas  input é diferente de " + " deserialised")
chamada antiga: assertEquals(10 + serialisedSize, buffer.position())
nova chamada: assertEquals(10 + serialisedSize, buffer.position(), "Era esperado valores iguais, mas  10 + serialisedSize é diferente de " + result2744 + " <buffer.position()>")
chamada antiga: assertEquals(0, buffer.remaining())
nova chamada: assertEquals(0, buffer.remaining(), "Era esperado valores iguais, mas  0 é diferente de " + result2745 + " <buffer.remaining()>")
chamada antiga: assertEquals(input, roundtrip)
nova chamada: assertEquals(input, roundtrip, "Era esperado valores iguais, mas  input é diferente de " + " roundtrip")
chamada antiga: assertEquals(0, buffer.remaining())
nova chamada: assertEquals(0, buffer.remaining(), "Era esperado valores iguais, mas  0 é diferente de " + result2746 + " <buffer.remaining()>")
chamada antiga: assertEquals(input, roundtrip)
nova chamada: assertEquals(input, roundtrip, "Era esperado valores iguais, mas  input é diferente de " + " roundtrip")
chamada antiga: assertEquals(superSet.containsAll(subSet), superSetRB.contains(subSetRB))
nova chamada: assertEquals(superSet.containsAll(subSet), superSetRB.contains(subSetRB), "Era esperado valores iguais, mas " + result2747 + " <superSet.containsAll(subSet)> é diferente de " + result2748 + " <superSetRB.contains(subSetRB)>")
chamada antiga: assertEquals(subSet.containsAll(superSet), subSetRB.contains(superSetRB))
nova chamada: assertEquals(subSet.containsAll(superSet), subSetRB.contains(superSetRB), "Era esperado valores iguais, mas " + result2749 + " <subSet.containsAll(superSet)> é diferente de " + result2750 + " <subSetRB.contains(superSetRB)>")
chamada antiga: assertEquals(0, ac.getCardinality())
nova chamada: assertEquals(0, ac.getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result2751 + " <ac.getCardinality()>")
chamada antiga: assertThrows(IllegalArgumentException.class, () -> {
    MappeableContainer ac = new MappeableArrayContainer();
    ac.add(13, 1);
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    MappeableContainer ac = new MappeableArrayContainer();
    ac.add(13, 1);
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(IllegalArgumentException.class, () -> {
    MappeableContainer ac = new MappeableArrayContainer();
    ac.iadd(13, 1);
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    MappeableContainer ac = new MappeableArrayContainer();
    ac.iadd(13, 1);
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: assertEquals(79, ac.getCardinality())
nova chamada: assertEquals(79, ac.getCardinality(), "Era esperado valores iguais, mas  79 é diferente de " + result2752 + " <ac.getCardinality()>")
chamada antiga: assertEquals(1, ac.getCardinality())
nova chamada: assertEquals(1, ac.getCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result2753 + " <ac.getCardinality()>")
chamada antiga: assertTrue(ac.contains((char) 1))
nova chamada: assertTrue(ac.contains((char) 1), "Era esperado verdadeiro, mas " + result2754 + " <ac.contains((char) 1)> é falso")
chamada antiga: assertThrows(IllegalArgumentException.class, () -> {
    MappeableContainer ac = new MappeableArrayContainer();
    ac.remove(13, 1);
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    MappeableContainer ac = new MappeableArrayContainer();
    ac.remove(13, 1);
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: assertEquals(0, ac.getCardinality())
nova chamada: assertEquals(0, ac.getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result2755 + " <ac.getCardinality()>")
chamada antiga: assertThrows(IllegalArgumentException.class, () -> {
    MappeableContainer ac = new MappeableArrayContainer();
    ac.iremove(13, 1);
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    MappeableContainer ac = new MappeableArrayContainer();
    ac.iremove(13, 1);
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: assertEquals(12, ac.getCardinality())
nova chamada: assertEquals(12, ac.getCardinality(), "Era esperado valores iguais, mas  12 é diferente de " + result2756 + " <ac.getCardinality()>")
chamada antiga: assertEquals(5, ac.getCardinality())
nova chamada: assertEquals(5, ac.getCardinality(), "Era esperado valores iguais, mas  5 é diferente de " + result2757 + " <ac.getCardinality()>")
chamada antiga: assertEquals(5000, ac.getCardinality())
nova chamada: assertEquals(5000, ac.getCardinality(), "Era esperado valores iguais, mas  5000 é diferente de " + result2758 + " <ac.getCardinality()>")
chamada antiga: assertTrue(ac.contains((char) 7000))
nova chamada: assertTrue(ac.contains((char) 7000), "Era esperado verdadeiro, mas " + result2759 + " <ac.contains((char) 7000)> é falso")
chamada antiga: assertEquals(5, ac.getCardinality())
nova chamada: assertEquals(5, ac.getCardinality(), "Era esperado valores iguais, mas  5 é diferente de " + result2760 + " <ac.getCardinality()>")
chamada antiga: assertEquals(4, ac.getCardinality())
nova chamada: assertEquals(4, ac.getCardinality(), "Era esperado valores iguais, mas  4 é diferente de " + result2761 + " <ac.getCardinality()>")
chamada antiga: assertEquals(5000, ac.getCardinality())
nova chamada: assertEquals(5000, ac.getCardinality(), "Era esperado valores iguais, mas  5000 é diferente de " + result2762 + " <ac.getCardinality()>")
chamada antiga: assertTrue(ac.contains((char) 7000))
nova chamada: assertTrue(ac.contains((char) 7000), "Era esperado verdadeiro, mas " + result2763 + " <ac.contains((char) 7000)> é falso")
chamada antiga: assertEquals(5, ac.getCardinality())
nova chamada: assertEquals(5, ac.getCardinality(), "Era esperado valores iguais, mas  5 é diferente de " + result2764 + " <ac.getCardinality()>")
chamada antiga: assertEquals(5, ac.getCardinality())
nova chamada: assertEquals(5, ac.getCardinality(), "Era esperado valores iguais, mas  5 é diferente de " + result2765 + " <ac.getCardinality()>")
chamada antiga: assertEquals(5, ac.getCardinality())
nova chamada: assertEquals(5, ac.getCardinality(), "Era esperado valores iguais, mas  5 é diferente de " + result2766 + " <ac.getCardinality()>")
chamada antiga: assertTrue(ac1.intersects(ac2))
nova chamada: assertTrue(ac1.intersects(ac2), "Era esperado verdadeiro, mas " + result2767 + " <ac1.intersects(ac2)> é falso")
chamada antiga: assertEquals(1, ac.numberOfRuns())
nova chamada: assertEquals(1, ac.numberOfRuns(), "Era esperado valores iguais, mas  1 é diferente de " + result2768 + " <ac.numberOfRuns()>")
chamada antiga: assertEquals(4, ac2.getCardinality())
nova chamada: assertEquals(4, ac2.getCardinality(), "Era esperado valores iguais, mas  4 é diferente de " + result2769 + " <ac2.getCardinality()>")
chamada antiga: assertEquals(8192, ac.getCardinality())
nova chamada: assertEquals(8192, ac.getCardinality(), "Era esperado valores iguais, mas  8192 é diferente de " + result2770 + " <ac.getCardinality()>")
chamada antiga: assertEquals(8182, ac.getCardinality())
nova chamada: assertEquals(8182, ac.getCardinality(), "Era esperado valores iguais, mas  8182 é diferente de " + result2771 + " <ac.getCardinality()>")
chamada antiga: assertEquals(value, expected++)
nova chamada: assertEquals(value, expected++, "Era esperado valores iguais, mas  value é diferente de " + " expected++")
chamada antiga: assertEquals(1 << 16, result.getCardinality())
nova chamada: assertEquals(1 << 16, result.getCardinality(), "Era esperado valores iguais, mas  1  16 é diferente de " + result2772 + " <result.getCardinality()>")
chamada antiga: assertTrue(result instanceof MappeableRunContainer)
nova chamada: assertTrue(result instanceof MappeableRunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(1 << 16, result.getCardinality())
nova chamada: assertEquals(1 << 16, result.getCardinality(), "Era esperado valores iguais, mas  1  16 é diferente de " + result2773 + " <result.getCardinality()>")
chamada antiga: assertTrue(result instanceof MappeableRunContainer)
nova chamada: assertTrue(result instanceof MappeableRunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(-1, rbc.getCardinality())
nova chamada: assertEquals(-1, rbc.getCardinality(), "Era esperado valores iguais, mas  -1 é diferente de " + result2774 + " <rbc.getCardinality()>")
chamada antiga: assertEquals(1 << 16, repaired.getCardinality())
nova chamada: assertEquals(1 << 16, repaired.getCardinality(), "Era esperado valores iguais, mas  1  16 é diferente de " + result2775 + " <repaired.getCardinality()>")
chamada antiga: assertTrue(repaired instanceof MappeableRunContainer)
nova chamada: assertTrue(repaired instanceof MappeableRunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertFalse(new MappeableArrayContainer().add('a').isFull())
nova chamada: assertFalse(new MappeableArrayContainer().add('a').isFull(), "Era esperado falso, mas " + result2776 + " <new MappeableArrayContainer().add('a').isFull()> é verdadeiro ")
chamada antiga: assertEquals("{5,6,7,8,9,10,11,12,13,14,65519,65533}", ac1.toString())
nova chamada: assertEquals("{5,6,7,8,9,10,11,12,13,14,65519,65533}", ac1.toString(), "Era esperado valores iguais, mas  '{5,6,7,8,9,10,11,12,13,14,65519,65533}' é diferente de " + result2777 + " <ac1.toString()>")
chamada antiga: assertTrue(ac1.contains((char) 128))
nova chamada: assertTrue(ac1.contains((char) 128), "Era esperado verdadeiro, mas " + result2778 + " <ac1.contains((char) 128)> é falso")
chamada antiga: assertTrue(ac1.contains((char) 256))
nova chamada: assertTrue(ac1.contains((char) 256), "Era esperado verdadeiro, mas " + result2779 + " <ac1.contains((char) 256)> é falso")
chamada antiga: assertTrue(ac1.contains((char) 1024))
nova chamada: assertTrue(ac1.contains((char) 1024), "Era esperado verdadeiro, mas " + result2780 + " <ac1.contains((char) 1024)> é falso")
chamada antiga: assertTrue(ac1.contains((char) 128))
nova chamada: assertTrue(ac1.contains((char) 128), "Era esperado verdadeiro, mas " + result2781 + " <ac1.contains((char) 128)> é falso")
chamada antiga: assertTrue(ac1.contains((char) 256))
nova chamada: assertTrue(ac1.contains((char) 256), "Era esperado verdadeiro, mas " + result2782 + " <ac1.contains((char) 256)> é falso")
chamada antiga: assertTrue(ac1.contains((char) 512))
nova chamada: assertTrue(ac1.contains((char) 512), "Era esperado verdadeiro, mas " + result2783 + " <ac1.contains((char) 512)> é falso")
chamada antiga: assertTrue(ac1.contains((char) 513))
nova chamada: assertTrue(ac1.contains((char) 513), "Era esperado verdadeiro, mas " + result2784 + " <ac1.contains((char) 513)> é falso")
chamada antiga: assertTrue(ac1.contains((char) 1024))
nova chamada: assertTrue(ac1.contains((char) 1024), "Era esperado verdadeiro, mas " + result2785 + " <ac1.contains((char) 1024)> é falso")
chamada antiga: assertTrue(ac.contains(disjoint))
nova chamada: assertTrue(ac.contains(disjoint), "Era esperado verdadeiro, mas " + result2786 + " <ac.contains(disjoint)> é falso")
chamada antiga: assertTrue(container.intersects(0, 1))
nova chamada: assertTrue(container.intersects(0, 1), "Era esperado verdadeiro, mas " + result2787 + " <container.intersects(0, 1)> é falso")
chamada antiga: assertTrue(container.intersects(0, 101))
nova chamada: assertTrue(container.intersects(0, 101), "Era esperado verdadeiro, mas " + result2788 + " <container.intersects(0, 101)> é falso")
chamada antiga: assertTrue(container.intersects(0, lower16Bits(-1)))
nova chamada: assertTrue(container.intersects(0, lower16Bits(-1)), "Era esperado verdadeiro, mas " + result2789 + " <container.intersects(0, lower16Bits(-1))> é falso")
chamada antiga: assertFalse(container.intersects(11, lower16Bits(-1)))
nova chamada: assertFalse(container.intersects(11, lower16Bits(-1)), "Era esperado falso, mas " + result2790 + " <container.intersects(11, lower16Bits(-1))> é verdadeiro ")
chamada antiga: assertFalse(container.intersects(0, 1))
nova chamada: assertFalse(container.intersects(0, 1), "Era esperado falso, mas " + result2791 + " <container.intersects(0, 1)> é verdadeiro ")
chamada antiga: assertTrue(container.intersects(0, lower16Bits(-40)))
nova chamada: assertTrue(container.intersects(0, lower16Bits(-40)), "Era esperado verdadeiro, mas " + result2792 + " <container.intersects(0, lower16Bits(-40))> é falso")
chamada antiga: assertFalse(container.intersects(lower16Bits(-100), lower16Bits(-55)))
nova chamada: assertFalse(container.intersects(lower16Bits(-100), lower16Bits(-55)), "Era esperado falso, mas " + result2793 + " <container.intersects(lower16Bits(-100), lower16Bits(-55))> é verdadeiro ")
chamada antiga: assertFalse(container.intersects(lower16Bits(-9), lower16Bits(-1)))
nova chamada: assertFalse(container.intersects(lower16Bits(-9), lower16Bits(-1)), "Era esperado falso, mas " + result2794 + " <container.intersects(lower16Bits(-9), lower16Bits(-1))> é verdadeiro ")
chamada antiga: assertTrue(container.intersects(11, 1 << 16))
nova chamada: assertTrue(container.intersects(11, 1 << 16), "Era esperado verdadeiro, mas " + result2795 + " <container.intersects(11, 1 << 16)> é falso")
chamada antiga: assertTrue(container.intersects(0, 300))
nova chamada: assertTrue(container.intersects(0, 300), "Era esperado verdadeiro, mas " + result2796 + " <container.intersects(0, 300)> é falso")
chamada antiga: assertTrue(container.intersects(1, 300))
nova chamada: assertTrue(container.intersects(1, 300), "Era esperado verdadeiro, mas " + result2797 + " <container.intersects(1, 300)> é falso")
chamada antiga: assertFalse(container.intersects(2, 300))
nova chamada: assertFalse(container.intersects(2, 300), "Era esperado falso, mas " + result2798 + " <container.intersects(2, 300)> é verdadeiro ")
chamada antiga: assertFalse(container.intersects(2, 299))
nova chamada: assertFalse(container.intersects(2, 299), "Era esperado falso, mas " + result2799 + " <container.intersects(2, 299)> é verdadeiro ")
chamada antiga: assertTrue(container.intersects(0, lower16Bits(-1)))
nova chamada: assertTrue(container.intersects(0, lower16Bits(-1)), "Era esperado verdadeiro, mas " + result2800 + " <container.intersects(0, lower16Bits(-1))> é falso")
chamada antiga: assertFalse(container.intersects(1025, 1 << 16))
nova chamada: assertFalse(container.intersects(1025, 1 << 16), "Era esperado falso, mas " + result2801 + " <container.intersects(1025, 1 << 16)> é verdadeiro ")
chamada antiga: assertFalse(ac.contains(1, 21))
nova chamada: assertFalse(ac.contains(1, 21), "Era esperado falso, mas " + result2802 + " <ac.contains(1, 21)> é verdadeiro ")
chamada antiga: assertFalse(ac.contains(1, 19))
nova chamada: assertFalse(ac.contains(1, 19), "Era esperado falso, mas " + result2803 + " <ac.contains(1, 19)> é verdadeiro ")
chamada antiga: assertTrue(ac.contains(20, 100))
nova chamada: assertTrue(ac.contains(20, 100), "Era esperado verdadeiro, mas " + result2804 + " <ac.contains(20, 100)> é falso")
chamada antiga: assertTrue(ac.contains(20, 99))
nova chamada: assertTrue(ac.contains(20, 99), "Era esperado verdadeiro, mas " + result2805 + " <ac.contains(20, 99)> é falso")
chamada antiga: assertTrue(ac.contains(21, 100))
nova chamada: assertTrue(ac.contains(21, 100), "Era esperado verdadeiro, mas " + result2806 + " <ac.contains(21, 100)> é falso")
chamada antiga: assertFalse(ac.contains(21, 101))
nova chamada: assertFalse(ac.contains(21, 101), "Era esperado falso, mas " + result2807 + " <ac.contains(21, 101)> é verdadeiro ")
chamada antiga: assertFalse(ac.contains(19, 99))
nova chamada: assertFalse(ac.contains(19, 99), "Era esperado falso, mas " + result2808 + " <ac.contains(19, 99)> é verdadeiro ")
chamada antiga: assertFalse(ac.contains(190, 9999))
nova chamada: assertFalse(ac.contains(190, 9999), "Era esperado falso, mas " + result2809 + " <ac.contains(190, 9999)> é verdadeiro ")
chamada antiga: assertFalse(ac.contains(1, 21))
nova chamada: assertFalse(ac.contains(1, 21), "Era esperado falso, mas " + result2810 + " <ac.contains(1, 21)> é verdadeiro ")
chamada antiga: assertFalse(ac.contains(1, 20))
nova chamada: assertFalse(ac.contains(1, 20), "Era esperado falso, mas " + result2811 + " <ac.contains(1, 20)> é verdadeiro ")
chamada antiga: assertTrue(ac.contains(1, 2))
nova chamada: assertTrue(ac.contains(1, 2), "Era esperado verdadeiro, mas " + result2812 + " <ac.contains(1, 2)> é falso")
chamada antiga: assertTrue(ac.contains(1 << 15, 1 << 8 | 1 << 15))
nova chamada: assertTrue(ac.contains(1 << 15, 1 << 8 | 1 << 15), "Era esperado verdadeiro, mas " + result2813 + " <ac.contains(1 << 15, 1 << 8 | 1 << 15)> é falso")
chamada antiga: assertTrue(ac.contains(1 + (1 << 15), (1 << 8 | 1 << 15) - 1))
nova chamada: assertTrue(ac.contains(1 + (1 << 15), (1 << 8 | 1 << 15) - 1), "Era esperado verdadeiro, mas " + result2814 + " <ac.contains(1 + (1 << 15), (1 << 8 | 1 << 15) - 1)> é falso")
chamada antiga: assertFalse(ac.contains(1 + (1 << 15), (1 << 8 | 1 << 15) + 1))
nova chamada: assertFalse(ac.contains(1 + (1 << 15), (1 << 8 | 1 << 15) + 1), "Era esperado falso, mas " + result2815 + " <ac.contains(1 + (1 << 15), (1 << 8 | 1 << 15) + 1)> é verdadeiro ")
chamada antiga: assertFalse(ac.contains((1 << 15) - 1, (1 << 8 | 1 << 15) - 1))
nova chamada: assertFalse(ac.contains((1 << 15) - 1, (1 << 8 | 1 << 15) - 1), "Era esperado falso, mas " + result2816 + " <ac.contains((1 << 15) - 1, (1 << 8 | 1 << 15) - 1)> é verdadeiro ")
chamada antiga: assertFalse(ac.contains(0, 1 << 15))
nova chamada: assertFalse(ac.contains(0, 1 << 15), "Era esperado falso, mas " + result2817 + " <ac.contains(0, 1 << 15)> é verdadeiro ")
chamada antiga: assertFalse(ac.contains(1 << 8 | 1 << 15 | 1, 1 << 16))
nova chamada: assertFalse(ac.contains(1 << 8 | 1 << 15 | 1, 1 << 16), "Era esperado falso, mas " + result2818 + " <ac.contains(1 << 8 | 1 << 15 | 1, 1 << 16)> é verdadeiro ")
chamada antiga: assertEquals(10, container.nextValue((char) 5))
nova chamada: assertEquals(10, container.nextValue((char) 5), "Era esperado valores iguais, mas  10 é diferente de " + result2819 + " <container.nextValue((char) 5)>")
chamada antiga: assertEquals(10, container.nextValue((char) 10))
nova chamada: assertEquals(10, container.nextValue((char) 10), "Era esperado valores iguais, mas  10 é diferente de " + result2820 + " <container.nextValue((char) 10)>")
chamada antiga: assertEquals(20, container.nextValue((char) 11))
nova chamada: assertEquals(20, container.nextValue((char) 11), "Era esperado valores iguais, mas  20 é diferente de " + result2821 + " <container.nextValue((char) 11)>")
chamada antiga: assertEquals(30, container.nextValue((char) 30))
nova chamada: assertEquals(30, container.nextValue((char) 30), "Era esperado valores iguais, mas  30 é diferente de " + result2822 + " <container.nextValue((char) 30)>")
chamada antiga: assertEquals(-1, container.nextValue((char) 31))
nova chamada: assertEquals(-1, container.nextValue((char) 31), "Era esperado valores iguais, mas  -1 é diferente de " + result2823 + " <container.nextValue((char) 31)>")
chamada antiga: assertTrue(container instanceof MappeableArrayContainer)
nova chamada: assertTrue(container instanceof MappeableArrayContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(64, container.nextValue((char) 0))
nova chamada: assertEquals(64, container.nextValue((char) 0), "Era esperado valores iguais, mas  64 é diferente de " + result2824 + " <container.nextValue((char) 0)>")
chamada antiga: assertEquals(64, container.nextValue((char) 64))
nova chamada: assertEquals(64, container.nextValue((char) 64), "Era esperado valores iguais, mas  64 é diferente de " + result2825 + " <container.nextValue((char) 64)>")
chamada antiga: assertEquals(65, container.nextValue((char) 65))
nova chamada: assertEquals(65, container.nextValue((char) 65), "Era esperado valores iguais, mas  65 é diferente de " + result2826 + " <container.nextValue((char) 65)>")
chamada antiga: assertEquals(128, container.nextValue((char) 128))
nova chamada: assertEquals(128, container.nextValue((char) 128), "Era esperado valores iguais, mas  128 é diferente de " + result2827 + " <container.nextValue((char) 128)>")
chamada antiga: assertEquals(-1, container.nextValue((char) 129))
nova chamada: assertEquals(-1, container.nextValue((char) 129), "Era esperado valores iguais, mas  -1 é diferente de " + result2828 + " <container.nextValue((char) 129)>")
chamada antiga: assertEquals(-1, container.nextValue((char) 5000))
nova chamada: assertEquals(-1, container.nextValue((char) 5000), "Era esperado valores iguais, mas  -1 é diferente de " + result2829 + " <container.nextValue((char) 5000)>")
chamada antiga: assertTrue(container instanceof MappeableArrayContainer)
nova chamada: assertTrue(container instanceof MappeableArrayContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(64, container.nextValue((char) 0))
nova chamada: assertEquals(64, container.nextValue((char) 0), "Era esperado valores iguais, mas  64 é diferente de " + result2830 + " <container.nextValue((char) 0)>")
chamada antiga: assertEquals(64, container.nextValue((char) 64))
nova chamada: assertEquals(64, container.nextValue((char) 64), "Era esperado valores iguais, mas  64 é diferente de " + result2831 + " <container.nextValue((char) 64)>")
chamada antiga: assertEquals(65, container.nextValue((char) 65))
nova chamada: assertEquals(65, container.nextValue((char) 65), "Era esperado valores iguais, mas  65 é diferente de " + result2832 + " <container.nextValue((char) 65)>")
chamada antiga: assertEquals(128, container.nextValue((char) 128))
nova chamada: assertEquals(128, container.nextValue((char) 128), "Era esperado valores iguais, mas  128 é diferente de " + result2833 + " <container.nextValue((char) 128)>")
chamada antiga: assertEquals(256, container.nextValue((char) 129))
nova chamada: assertEquals(256, container.nextValue((char) 129), "Era esperado valores iguais, mas  256 é diferente de " + result2834 + " <container.nextValue((char) 129)>")
chamada antiga: assertEquals(-1, container.nextValue((char) 512))
nova chamada: assertEquals(-1, container.nextValue((char) 512), "Era esperado valores iguais, mas  -1 é diferente de " + result2835 + " <container.nextValue((char) 512)>")
chamada antiga: assertTrue(container instanceof MappeableArrayContainer)
nova chamada: assertTrue(container instanceof MappeableArrayContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(64, container.nextValue((char) 0))
nova chamada: assertEquals(64, container.nextValue((char) 0), "Era esperado valores iguais, mas  64 é diferente de " + result2836 + " <container.nextValue((char) 0)>")
chamada antiga: assertEquals(64, container.nextValue((char) 63))
nova chamada: assertEquals(64, container.nextValue((char) 63), "Era esperado valores iguais, mas  64 é diferente de " + result2837 + " <container.nextValue((char) 63)>")
chamada antiga: assertEquals(64, container.nextValue((char) 64))
nova chamada: assertEquals(64, container.nextValue((char) 64), "Era esperado valores iguais, mas  64 é diferente de " + result2838 + " <container.nextValue((char) 64)>")
chamada antiga: assertEquals(65, container.nextValue((char) 65))
nova chamada: assertEquals(65, container.nextValue((char) 65), "Era esperado valores iguais, mas  65 é diferente de " + result2839 + " <container.nextValue((char) 65)>")
chamada antiga: assertEquals(128, container.nextValue((char) 128))
nova chamada: assertEquals(128, container.nextValue((char) 128), "Era esperado valores iguais, mas  128 é diferente de " + result2840 + " <container.nextValue((char) 128)>")
chamada antiga: assertEquals(200, container.nextValue((char) 129))
nova chamada: assertEquals(200, container.nextValue((char) 129), "Era esperado valores iguais, mas  200 é diferente de " + result2841 + " <container.nextValue((char) 129)>")
chamada antiga: assertEquals(200, container.nextValue((char) 199))
nova chamada: assertEquals(200, container.nextValue((char) 199), "Era esperado valores iguais, mas  200 é diferente de " + result2842 + " <container.nextValue((char) 199)>")
chamada antiga: assertEquals(200, container.nextValue((char) 200))
nova chamada: assertEquals(200, container.nextValue((char) 200), "Era esperado valores iguais, mas  200 é diferente de " + result2843 + " <container.nextValue((char) 200)>")
chamada antiga: assertEquals(250, container.nextValue((char) 250))
nova chamada: assertEquals(250, container.nextValue((char) 250), "Era esperado valores iguais, mas  250 é diferente de " + result2844 + " <container.nextValue((char) 250)>")
chamada antiga: assertEquals(5000, container.nextValue((char) 2500))
nova chamada: assertEquals(5000, container.nextValue((char) 2500), "Era esperado valores iguais, mas  5000 é diferente de " + result2845 + " <container.nextValue((char) 2500)>")
chamada antiga: assertEquals(5000, container.nextValue((char) 5000))
nova chamada: assertEquals(5000, container.nextValue((char) 5000), "Era esperado valores iguais, mas  5000 é diferente de " + result2846 + " <container.nextValue((char) 5000)>")
chamada antiga: assertEquals(5200, container.nextValue((char) 5200))
nova chamada: assertEquals(5200, container.nextValue((char) 5200), "Era esperado valores iguais, mas  5200 é diferente de " + result2847 + " <container.nextValue((char) 5200)>")
chamada antiga: assertEquals(-1, container.nextValue((char) 5201))
nova chamada: assertEquals(-1, container.nextValue((char) 5201), "Era esperado valores iguais, mas  -1 é diferente de " + result2848 + " <container.nextValue((char) 5201)>")
chamada antiga: assertTrue(container instanceof MappeableArrayContainer)
nova chamada: assertTrue(container instanceof MappeableArrayContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(-1, container.previousValue((char) 0))
nova chamada: assertEquals(-1, container.previousValue((char) 0), "Era esperado valores iguais, mas  -1 é diferente de " + result2849 + " <container.previousValue((char) 0)>")
chamada antiga: assertEquals(-1, container.previousValue((char) 63))
nova chamada: assertEquals(-1, container.previousValue((char) 63), "Era esperado valores iguais, mas  -1 é diferente de " + result2850 + " <container.previousValue((char) 63)>")
chamada antiga: assertEquals(64, container.previousValue((char) 64))
nova chamada: assertEquals(64, container.previousValue((char) 64), "Era esperado valores iguais, mas  64 é diferente de " + result2851 + " <container.previousValue((char) 64)>")
chamada antiga: assertEquals(65, container.previousValue((char) 65))
nova chamada: assertEquals(65, container.previousValue((char) 65), "Era esperado valores iguais, mas  65 é diferente de " + result2852 + " <container.previousValue((char) 65)>")
chamada antiga: assertEquals(128, container.previousValue((char) 128))
nova chamada: assertEquals(128, container.previousValue((char) 128), "Era esperado valores iguais, mas  128 é diferente de " + result2853 + " <container.previousValue((char) 128)>")
chamada antiga: assertEquals(128, container.previousValue((char) 129))
nova chamada: assertEquals(128, container.previousValue((char) 129), "Era esperado valores iguais, mas  128 é diferente de " + result2854 + " <container.previousValue((char) 129)>")
chamada antiga: assertTrue(container instanceof MappeableArrayContainer)
nova chamada: assertTrue(container instanceof MappeableArrayContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(-1, container.previousValue((char) 0))
nova chamada: assertEquals(-1, container.previousValue((char) 0), "Era esperado valores iguais, mas  -1 é diferente de " + result2855 + " <container.previousValue((char) 0)>")
chamada antiga: assertEquals(-1, container.previousValue((char) 63))
nova chamada: assertEquals(-1, container.previousValue((char) 63), "Era esperado valores iguais, mas  -1 é diferente de " + result2856 + " <container.previousValue((char) 63)>")
chamada antiga: assertEquals(64, container.previousValue((char) 64))
nova chamada: assertEquals(64, container.previousValue((char) 64), "Era esperado valores iguais, mas  64 é diferente de " + result2857 + " <container.previousValue((char) 64)>")
chamada antiga: assertEquals(65, container.previousValue((char) 65))
nova chamada: assertEquals(65, container.previousValue((char) 65), "Era esperado valores iguais, mas  65 é diferente de " + result2858 + " <container.previousValue((char) 65)>")
chamada antiga: assertEquals(128, container.previousValue((char) 128))
nova chamada: assertEquals(128, container.previousValue((char) 128), "Era esperado valores iguais, mas  128 é diferente de " + result2859 + " <container.previousValue((char) 128)>")
chamada antiga: assertEquals(128, container.previousValue((char) 129))
nova chamada: assertEquals(128, container.previousValue((char) 129), "Era esperado valores iguais, mas  128 é diferente de " + result2860 + " <container.previousValue((char) 129)>")
chamada antiga: assertEquals(128, container.previousValue((char) 199))
nova chamada: assertEquals(128, container.previousValue((char) 199), "Era esperado valores iguais, mas  128 é diferente de " + result2861 + " <container.previousValue((char) 199)>")
chamada antiga: assertEquals(200, container.previousValue((char) 200))
nova chamada: assertEquals(200, container.previousValue((char) 200), "Era esperado valores iguais, mas  200 é diferente de " + result2862 + " <container.previousValue((char) 200)>")
chamada antiga: assertEquals(250, container.previousValue((char) 250))
nova chamada: assertEquals(250, container.previousValue((char) 250), "Era esperado valores iguais, mas  250 é diferente de " + result2863 + " <container.previousValue((char) 250)>")
chamada antiga: assertEquals(500, container.previousValue((char) 2500))
nova chamada: assertEquals(500, container.previousValue((char) 2500), "Era esperado valores iguais, mas  500 é diferente de " + result2864 + " <container.previousValue((char) 2500)>")
chamada antiga: assertEquals(5000, container.previousValue((char) 5000))
nova chamada: assertEquals(5000, container.previousValue((char) 5000), "Era esperado valores iguais, mas  5000 é diferente de " + result2865 + " <container.previousValue((char) 5000)>")
chamada antiga: assertEquals(5200, container.previousValue((char) 5200))
nova chamada: assertEquals(5200, container.previousValue((char) 5200), "Era esperado valores iguais, mas  5200 é diferente de " + result2866 + " <container.previousValue((char) 5200)>")
chamada antiga: assertEquals(-1, container.previousValue((char) 5))
nova chamada: assertEquals(-1, container.previousValue((char) 5), "Era esperado valores iguais, mas  -1 é diferente de " + result2867 + " <container.previousValue((char) 5)>")
chamada antiga: assertEquals(-1, container.previousValue((char) 9))
nova chamada: assertEquals(-1, container.previousValue((char) 9), "Era esperado valores iguais, mas  -1 é diferente de " + result2868 + " <container.previousValue((char) 9)>")
chamada antiga: assertEquals(10, container.previousValue((char) 10))
nova chamada: assertEquals(10, container.previousValue((char) 10), "Era esperado valores iguais, mas  10 é diferente de " + result2869 + " <container.previousValue((char) 10)>")
chamada antiga: assertEquals(10, container.previousValue((char) 11))
nova chamada: assertEquals(10, container.previousValue((char) 11), "Era esperado valores iguais, mas  10 é diferente de " + result2870 + " <container.previousValue((char) 11)>")
chamada antiga: assertEquals(20, container.previousValue((char) 21))
nova chamada: assertEquals(20, container.previousValue((char) 21), "Era esperado valores iguais, mas  20 é diferente de " + result2871 + " <container.previousValue((char) 21)>")
chamada antiga: assertEquals(30, container.previousValue((char) 30))
nova chamada: assertEquals(30, container.previousValue((char) 30), "Era esperado valores iguais, mas  30 é diferente de " + result2872 + " <container.previousValue((char) 30)>")
chamada antiga: assertEquals(-1, container.previousValue((char) ((1 << 15) | 4)))
nova chamada: assertEquals(-1, container.previousValue((char) ((1 << 15) | 4)), "Era esperado valores iguais, mas  -1 é diferente de " + result2873 + " <container.previousValue((char) ((1 << 15) | 4))>")
chamada antiga: assertEquals(((1 << 15) | 5), container.previousValue((char) ((1 << 15) | 5)))
nova chamada: assertEquals(((1 << 15) | 5), container.previousValue((char) ((1 << 15) | 5)), "Era esperado valores iguais, mas  ((1  15) | 5) é diferente de " + result2874 + " <container.previousValue((char) ((1 << 15) | 5))>")
chamada antiga: assertEquals(((1 << 15) | 5), container.previousValue((char) ((1 << 15) | 6)))
nova chamada: assertEquals(((1 << 15) | 5), container.previousValue((char) ((1 << 15) | 6)), "Era esperado valores iguais, mas  ((1  15) | 5) é diferente de " + result2875 + " <container.previousValue((char) ((1 << 15) | 6))>")
chamada antiga: assertEquals(((1 << 15) | 7), container.previousValue((char) ((1 << 15) | 7)))
nova chamada: assertEquals(((1 << 15) | 7), container.previousValue((char) ((1 << 15) | 7)), "Era esperado valores iguais, mas  ((1  15) | 7) é diferente de " + result2876 + " <container.previousValue((char) ((1 << 15) | 7))>")
chamada antiga: assertEquals(((1 << 15) | 7), container.previousValue((char) ((1 << 15) | 8)))
nova chamada: assertEquals(((1 << 15) | 7), container.previousValue((char) ((1 << 15) | 8)), "Era esperado valores iguais, mas  ((1  15) | 7) é diferente de " + result2877 + " <container.previousValue((char) ((1 << 15) | 8))>")
chamada antiga: assertEquals(((1 << 15) | 5), container.nextValue((char) ((1 << 15) | 4)))
nova chamada: assertEquals(((1 << 15) | 5), container.nextValue((char) ((1 << 15) | 4)), "Era esperado valores iguais, mas  ((1  15) | 5) é diferente de " + result2878 + " <container.nextValue((char) ((1 << 15) | 4))>")
chamada antiga: assertEquals(((1 << 15) | 5), container.nextValue((char) ((1 << 15) | 5)))
nova chamada: assertEquals(((1 << 15) | 5), container.nextValue((char) ((1 << 15) | 5)), "Era esperado valores iguais, mas  ((1  15) | 5) é diferente de " + result2879 + " <container.nextValue((char) ((1 << 15) | 5))>")
chamada antiga: assertEquals(((1 << 15) | 7), container.nextValue((char) ((1 << 15) | 6)))
nova chamada: assertEquals(((1 << 15) | 7), container.nextValue((char) ((1 << 15) | 6)), "Era esperado valores iguais, mas  ((1  15) | 7) é diferente de " + result2880 + " <container.nextValue((char) ((1 << 15) | 6))>")
chamada antiga: assertEquals(((1 << 15) | 7), container.nextValue((char) ((1 << 15) | 7)))
nova chamada: assertEquals(((1 << 15) | 7), container.nextValue((char) ((1 << 15) | 7)), "Era esperado valores iguais, mas  ((1  15) | 7) é diferente de " + result2881 + " <container.nextValue((char) ((1 << 15) | 7))>")
chamada antiga: assertEquals(-1, container.nextValue((char) ((1 << 15) | 8)))
nova chamada: assertEquals(-1, container.nextValue((char) ((1 << 15) | 8)), "Era esperado valores iguais, mas  -1 é diferente de " + result2882 + " <container.nextValue((char) ((1 << 15) | 8))>")
chamada antiga: assertEquals(30, container.previousValue((char) 31))
nova chamada: assertEquals(30, container.previousValue((char) 31), "Era esperado valores iguais, mas  30 é diferente de " + result2883 + " <container.previousValue((char) 31)>")
chamada antiga: assertEquals(0, container.previousAbsentValue((char) 0))
nova chamada: assertEquals(0, container.previousAbsentValue((char) 0), "Era esperado valores iguais, mas  0 é diferente de " + result2884 + " <container.previousAbsentValue((char) 0)>")
chamada antiga: assertEquals(63, container.previousAbsentValue((char) 63))
nova chamada: assertEquals(63, container.previousAbsentValue((char) 63), "Era esperado valores iguais, mas  63 é diferente de " + result2885 + " <container.previousAbsentValue((char) 63)>")
chamada antiga: assertEquals(63, container.previousAbsentValue((char) 64))
nova chamada: assertEquals(63, container.previousAbsentValue((char) 64), "Era esperado valores iguais, mas  63 é diferente de " + result2886 + " <container.previousAbsentValue((char) 64)>")
chamada antiga: assertEquals(63, container.previousAbsentValue((char) 65))
nova chamada: assertEquals(63, container.previousAbsentValue((char) 65), "Era esperado valores iguais, mas  63 é diferente de " + result2887 + " <container.previousAbsentValue((char) 65)>")
chamada antiga: assertEquals(63, container.previousAbsentValue((char) 128))
nova chamada: assertEquals(63, container.previousAbsentValue((char) 128), "Era esperado valores iguais, mas  63 é diferente de " + result2888 + " <container.previousAbsentValue((char) 128)>")
chamada antiga: assertEquals(129, container.previousAbsentValue((char) 129))
nova chamada: assertEquals(129, container.previousAbsentValue((char) 129), "Era esperado valores iguais, mas  129 é diferente de " + result2889 + " <container.previousAbsentValue((char) 129)>")
chamada antiga: assertEquals(0, container.previousAbsentValue((char) 0))
nova chamada: assertEquals(0, container.previousAbsentValue((char) 0), "Era esperado valores iguais, mas  0 é diferente de " + result2890 + " <container.previousAbsentValue((char) 0)>")
chamada antiga: assertEquals(63, container.previousAbsentValue((char) 63))
nova chamada: assertEquals(63, container.previousAbsentValue((char) 63), "Era esperado valores iguais, mas  63 é diferente de " + result2891 + " <container.previousAbsentValue((char) 63)>")
chamada antiga: assertEquals(63, container.previousAbsentValue((char) 64))
nova chamada: assertEquals(63, container.previousAbsentValue((char) 64), "Era esperado valores iguais, mas  63 é diferente de " + result2892 + " <container.previousAbsentValue((char) 64)>")
chamada antiga: assertEquals(63, container.previousAbsentValue((char) 65))
nova chamada: assertEquals(63, container.previousAbsentValue((char) 65), "Era esperado valores iguais, mas  63 é diferente de " + result2893 + " <container.previousAbsentValue((char) 65)>")
chamada antiga: assertEquals(63, container.previousAbsentValue((char) 128))
nova chamada: assertEquals(63, container.previousAbsentValue((char) 128), "Era esperado valores iguais, mas  63 é diferente de " + result2894 + " <container.previousAbsentValue((char) 128)>")
chamada antiga: assertEquals(129, container.previousAbsentValue((char) 129))
nova chamada: assertEquals(129, container.previousAbsentValue((char) 129), "Era esperado valores iguais, mas  129 é diferente de " + result2895 + " <container.previousAbsentValue((char) 129)>")
chamada antiga: assertEquals(199, container.previousAbsentValue((char) 199))
nova chamada: assertEquals(199, container.previousAbsentValue((char) 199), "Era esperado valores iguais, mas  199 é diferente de " + result2896 + " <container.previousAbsentValue((char) 199)>")
chamada antiga: assertEquals(199, container.previousAbsentValue((char) 200))
nova chamada: assertEquals(199, container.previousAbsentValue((char) 200), "Era esperado valores iguais, mas  199 é diferente de " + result2897 + " <container.previousAbsentValue((char) 200)>")
chamada antiga: assertEquals(199, container.previousAbsentValue((char) 250))
nova chamada: assertEquals(199, container.previousAbsentValue((char) 250), "Era esperado valores iguais, mas  199 é diferente de " + result2898 + " <container.previousAbsentValue((char) 250)>")
chamada antiga: assertEquals(2500, container.previousAbsentValue((char) 2500))
nova chamada: assertEquals(2500, container.previousAbsentValue((char) 2500), "Era esperado valores iguais, mas  2500 é diferente de " + result2899 + " <container.previousAbsentValue((char) 2500)>")
chamada antiga: assertEquals(4999, container.previousAbsentValue((char) 5000))
nova chamada: assertEquals(4999, container.previousAbsentValue((char) 5000), "Era esperado valores iguais, mas  4999 é diferente de " + result2900 + " <container.previousAbsentValue((char) 5000)>")
chamada antiga: assertEquals(4999, container.previousAbsentValue((char) 5200))
nova chamada: assertEquals(4999, container.previousAbsentValue((char) 5200), "Era esperado valores iguais, mas  4999 é diferente de " + result2901 + " <container.previousAbsentValue((char) 5200)>")
chamada antiga: assertEquals(9, container.previousAbsentValue((char) 9))
nova chamada: assertEquals(9, container.previousAbsentValue((char) 9), "Era esperado valores iguais, mas  9 é diferente de " + result2902 + " <container.previousAbsentValue((char) 9)>")
chamada antiga: assertEquals(9, container.previousAbsentValue((char) 10))
nova chamada: assertEquals(9, container.previousAbsentValue((char) 10), "Era esperado valores iguais, mas  9 é diferente de " + result2903 + " <container.previousAbsentValue((char) 10)>")
chamada antiga: assertEquals(11, container.previousAbsentValue((char) 11))
nova chamada: assertEquals(11, container.previousAbsentValue((char) 11), "Era esperado valores iguais, mas  11 é diferente de " + result2904 + " <container.previousAbsentValue((char) 11)>")
chamada antiga: assertEquals(21, container.previousAbsentValue((char) 21))
nova chamada: assertEquals(21, container.previousAbsentValue((char) 21), "Era esperado valores iguais, mas  21 é diferente de " + result2905 + " <container.previousAbsentValue((char) 21)>")
chamada antiga: assertEquals(29, container.previousAbsentValue((char) 30))
nova chamada: assertEquals(29, container.previousAbsentValue((char) 30), "Era esperado valores iguais, mas  29 é diferente de " + result2906 + " <container.previousAbsentValue((char) 30)>")
chamada antiga: assertEquals(((1 << 15) | 4), container.previousAbsentValue((char) ((1 << 15) | 4)))
nova chamada: assertEquals(((1 << 15) | 4), container.previousAbsentValue((char) ((1 << 15) | 4)), "Era esperado valores iguais, mas  ((1  15) | 4) é diferente de " + result2907 + " <container.previousAbsentValue((char) ((1 << 15) | 4))>")
chamada antiga: assertEquals(((1 << 15) | 4), container.previousAbsentValue((char) ((1 << 15) | 5)))
nova chamada: assertEquals(((1 << 15) | 4), container.previousAbsentValue((char) ((1 << 15) | 5)), "Era esperado valores iguais, mas  ((1  15) | 4) é diferente de " + result2908 + " <container.previousAbsentValue((char) ((1 << 15) | 5))>")
chamada antiga: assertEquals(((1 << 15) | 6), container.previousAbsentValue((char) ((1 << 15) | 6)))
nova chamada: assertEquals(((1 << 15) | 6), container.previousAbsentValue((char) ((1 << 15) | 6)), "Era esperado valores iguais, mas  ((1  15) | 6) é diferente de " + result2909 + " <container.previousAbsentValue((char) ((1 << 15) | 6))>")
chamada antiga: assertEquals(((1 << 15) | 6), container.previousAbsentValue((char) ((1 << 15) | 7)))
nova chamada: assertEquals(((1 << 15) | 6), container.previousAbsentValue((char) ((1 << 15) | 7)), "Era esperado valores iguais, mas  ((1  15) | 6) é diferente de " + result2910 + " <container.previousAbsentValue((char) ((1 << 15) | 7))>")
chamada antiga: assertEquals(((1 << 15) | 8), container.previousAbsentValue((char) ((1 << 15) | 8)))
nova chamada: assertEquals(((1 << 15) | 8), container.previousAbsentValue((char) ((1 << 15) | 8)), "Era esperado valores iguais, mas  ((1  15) | 8) é diferente de " + result2911 + " <container.previousAbsentValue((char) ((1 << 15) | 8))>")
chamada antiga: assertEquals(0, container.nextAbsentValue((char) 0))
nova chamada: assertEquals(0, container.nextAbsentValue((char) 0), "Era esperado valores iguais, mas  0 é diferente de " + result2912 + " <container.nextAbsentValue((char) 0)>")
chamada antiga: assertEquals(63, container.nextAbsentValue((char) 63))
nova chamada: assertEquals(63, container.nextAbsentValue((char) 63), "Era esperado valores iguais, mas  63 é diferente de " + result2913 + " <container.nextAbsentValue((char) 63)>")
chamada antiga: assertEquals(129, container.nextAbsentValue((char) 64))
nova chamada: assertEquals(129, container.nextAbsentValue((char) 64), "Era esperado valores iguais, mas  129 é diferente de " + result2914 + " <container.nextAbsentValue((char) 64)>")
chamada antiga: assertEquals(129, container.nextAbsentValue((char) 65))
nova chamada: assertEquals(129, container.nextAbsentValue((char) 65), "Era esperado valores iguais, mas  129 é diferente de " + result2915 + " <container.nextAbsentValue((char) 65)>")
chamada antiga: assertEquals(129, container.nextAbsentValue((char) 128))
nova chamada: assertEquals(129, container.nextAbsentValue((char) 128), "Era esperado valores iguais, mas  129 é diferente de " + result2916 + " <container.nextAbsentValue((char) 128)>")
chamada antiga: assertEquals(129, container.nextAbsentValue((char) 129))
nova chamada: assertEquals(129, container.nextAbsentValue((char) 129), "Era esperado valores iguais, mas  129 é diferente de " + result2917 + " <container.nextAbsentValue((char) 129)>")
chamada antiga: assertEquals(0, container.nextAbsentValue((char) 0))
nova chamada: assertEquals(0, container.nextAbsentValue((char) 0), "Era esperado valores iguais, mas  0 é diferente de " + result2918 + " <container.nextAbsentValue((char) 0)>")
chamada antiga: assertEquals(63, container.nextAbsentValue((char) 63))
nova chamada: assertEquals(63, container.nextAbsentValue((char) 63), "Era esperado valores iguais, mas  63 é diferente de " + result2919 + " <container.nextAbsentValue((char) 63)>")
chamada antiga: assertEquals(129, container.nextAbsentValue((char) 64))
nova chamada: assertEquals(129, container.nextAbsentValue((char) 64), "Era esperado valores iguais, mas  129 é diferente de " + result2920 + " <container.nextAbsentValue((char) 64)>")
chamada antiga: assertEquals(129, container.nextAbsentValue((char) 65))
nova chamada: assertEquals(129, container.nextAbsentValue((char) 65), "Era esperado valores iguais, mas  129 é diferente de " + result2921 + " <container.nextAbsentValue((char) 65)>")
chamada antiga: assertEquals(129, container.nextAbsentValue((char) 128))
nova chamada: assertEquals(129, container.nextAbsentValue((char) 128), "Era esperado valores iguais, mas  129 é diferente de " + result2922 + " <container.nextAbsentValue((char) 128)>")
chamada antiga: assertEquals(129, container.nextAbsentValue((char) 129))
nova chamada: assertEquals(129, container.nextAbsentValue((char) 129), "Era esperado valores iguais, mas  129 é diferente de " + result2923 + " <container.nextAbsentValue((char) 129)>")
chamada antiga: assertEquals(199, container.nextAbsentValue((char) 199))
nova chamada: assertEquals(199, container.nextAbsentValue((char) 199), "Era esperado valores iguais, mas  199 é diferente de " + result2924 + " <container.nextAbsentValue((char) 199)>")
chamada antiga: assertEquals(501, container.nextAbsentValue((char) 200))
nova chamada: assertEquals(501, container.nextAbsentValue((char) 200), "Era esperado valores iguais, mas  501 é diferente de " + result2925 + " <container.nextAbsentValue((char) 200)>")
chamada antiga: assertEquals(501, container.nextAbsentValue((char) 250))
nova chamada: assertEquals(501, container.nextAbsentValue((char) 250), "Era esperado valores iguais, mas  501 é diferente de " + result2926 + " <container.nextAbsentValue((char) 250)>")
chamada antiga: assertEquals(2500, container.nextAbsentValue((char) 2500))
nova chamada: assertEquals(2500, container.nextAbsentValue((char) 2500), "Era esperado valores iguais, mas  2500 é diferente de " + result2927 + " <container.nextAbsentValue((char) 2500)>")
chamada antiga: assertEquals(5201, container.nextAbsentValue((char) 5000))
nova chamada: assertEquals(5201, container.nextAbsentValue((char) 5000), "Era esperado valores iguais, mas  5201 é diferente de " + result2928 + " <container.nextAbsentValue((char) 5000)>")
chamada antiga: assertEquals(5201, container.nextAbsentValue((char) 5200))
nova chamada: assertEquals(5201, container.nextAbsentValue((char) 5200), "Era esperado valores iguais, mas  5201 é diferente de " + result2929 + " <container.nextAbsentValue((char) 5200)>")
chamada antiga: assertEquals(9, container.nextAbsentValue((char) 9))
nova chamada: assertEquals(9, container.nextAbsentValue((char) 9), "Era esperado valores iguais, mas  9 é diferente de " + result2930 + " <container.nextAbsentValue((char) 9)>")
chamada antiga: assertEquals(11, container.nextAbsentValue((char) 10))
nova chamada: assertEquals(11, container.nextAbsentValue((char) 10), "Era esperado valores iguais, mas  11 é diferente de " + result2931 + " <container.nextAbsentValue((char) 10)>")
chamada antiga: assertEquals(11, container.nextAbsentValue((char) 11))
nova chamada: assertEquals(11, container.nextAbsentValue((char) 11), "Era esperado valores iguais, mas  11 é diferente de " + result2932 + " <container.nextAbsentValue((char) 11)>")
chamada antiga: assertEquals(21, container.nextAbsentValue((char) 21))
nova chamada: assertEquals(21, container.nextAbsentValue((char) 21), "Era esperado valores iguais, mas  21 é diferente de " + result2933 + " <container.nextAbsentValue((char) 21)>")
chamada antiga: assertEquals(31, container.nextAbsentValue((char) 30))
nova chamada: assertEquals(31, container.nextAbsentValue((char) 30), "Era esperado valores iguais, mas  31 é diferente de " + result2934 + " <container.nextAbsentValue((char) 30)>")
chamada antiga: assertEquals(((1 << 15) | 4), container.nextAbsentValue((char) ((1 << 15) | 4)))
nova chamada: assertEquals(((1 << 15) | 4), container.nextAbsentValue((char) ((1 << 15) | 4)), "Era esperado valores iguais, mas  ((1  15) | 4) é diferente de " + result2935 + " <container.nextAbsentValue((char) ((1 << 15) | 4))>")
chamada antiga: assertEquals(((1 << 15) | 6), container.nextAbsentValue((char) ((1 << 15) | 5)))
nova chamada: assertEquals(((1 << 15) | 6), container.nextAbsentValue((char) ((1 << 15) | 5)), "Era esperado valores iguais, mas  ((1  15) | 6) é diferente de " + result2936 + " <container.nextAbsentValue((char) ((1 << 15) | 5))>")
chamada antiga: assertEquals(((1 << 15) | 6), container.nextAbsentValue((char) ((1 << 15) | 6)))
nova chamada: assertEquals(((1 << 15) | 6), container.nextAbsentValue((char) ((1 << 15) | 6)), "Era esperado valores iguais, mas  ((1  15) | 6) é diferente de " + result2937 + " <container.nextAbsentValue((char) ((1 << 15) | 6))>")
chamada antiga: assertEquals(((1 << 15) | 8), container.nextAbsentValue((char) ((1 << 15) | 7)))
nova chamada: assertEquals(((1 << 15) | 8), container.nextAbsentValue((char) ((1 << 15) | 7)), "Era esperado valores iguais, mas  ((1  15) | 8) é diferente de " + result2938 + " <container.nextAbsentValue((char) ((1 << 15) | 7))>")
chamada antiga: assertEquals(((1 << 15) | 8), container.nextAbsentValue((char) ((1 << 15) | 8)))
nova chamada: assertEquals(((1 << 15) | 8), container.nextAbsentValue((char) ((1 << 15) | 8)), "Era esperado valores iguais, mas  ((1  15) | 8) é diferente de " + result2939 + " <container.nextAbsentValue((char) ((1 << 15) | 8))>")
chamada antiga: assertEquals(0xAAAAAAAAAAAAAAAAL, bits[0])
nova chamada: assertEquals(0xAAAAAAAAAAAAAAAAL, bits[0], "Era esperado valores iguais, mas  0xAAAAAAAAAAAAAAAAL é diferente de " + " bits[0]")
chamada antiga: assertEquals(0L, bits[0])
nova chamada: assertEquals(0L, bits[0], "Era esperado valores iguais, mas  0L é diferente de " + " bits[0]")
chamada antiga: assertEquals(0xAAAAAAAAAAAAAAAAL, bits[0])
nova chamada: assertEquals(0xAAAAAAAAAAAAAAAAL, bits[0], "Era esperado valores iguais, mas  0xAAAAAAAAAAAAAAAAL é diferente de " + " bits[0]")
chamada antiga: assertEquals(-1L, bits[0])
nova chamada: assertEquals(-1L, bits[0], "Era esperado valores iguais, mas  -1L é diferente de " + " bits[0]")
chamada antiga: assertEquals(3, it2.nextBatch(buffer))
nova chamada: assertEquals(3, it2.nextBatch(buffer), "Era esperado valores iguais, mas  3 é diferente de " + result2940 + " <it2.nextBatch(buffer)>")
chamada antiga: assertArrayEquals(c1, Arrays.copyOfRange(buffer, 0, 3))
nova chamada: assertArrayEquals(c1, Arrays.copyOfRange(buffer, 0, 3), "Era esperado arrays iguais, mas  c1 é diferente de " + result2941 + " <Arrays.copyOfRange(buffer, 0, 3)>")
chamada antiga: assertEquals(2, it2.nextBatch(buffer))
nova chamada: assertEquals(2, it2.nextBatch(buffer), "Era esperado valores iguais, mas  2 é diferente de " + result2942 + " <it2.nextBatch(buffer)>")
chamada antiga: assertArrayEquals(c2, Arrays.copyOfRange(buffer, 0, 2))
nova chamada: assertArrayEquals(c2, Arrays.copyOfRange(buffer, 0, 2), "Era esperado arrays iguais, mas  c2 é diferente de " + result2943 + " <Arrays.copyOfRange(buffer, 0, 2)>")
chamada antiga: assertEquals(0, it2.nextBatch(buffer))
nova chamada: assertEquals(0, it2.nextBatch(buffer), "Era esperado valores iguais, mas  0 é diferente de " + result2944 + " <it2.nextBatch(buffer)>")
chamada antiga: assertEquals(3, it1.nextBatch(buffer))
nova chamada: assertEquals(3, it1.nextBatch(buffer), "Era esperado valores iguais, mas  3 é diferente de " + result2945 + " <it1.nextBatch(buffer)>")
chamada antiga: assertArrayEquals(c1, Arrays.copyOfRange(buffer, 0, 3))
nova chamada: assertArrayEquals(c1, Arrays.copyOfRange(buffer, 0, 3), "Era esperado arrays iguais, mas  c1 é diferente de " + result2946 + " <Arrays.copyOfRange(buffer, 0, 3)>")
chamada antiga: assertEquals(2, it1.nextBatch(buffer))
nova chamada: assertEquals(2, it1.nextBatch(buffer), "Era esperado valores iguais, mas  2 é diferente de " + result2947 + " <it1.nextBatch(buffer)>")
chamada antiga: assertArrayEquals(c2, Arrays.copyOfRange(buffer, 0, 2))
nova chamada: assertArrayEquals(c2, Arrays.copyOfRange(buffer, 0, 2), "Era esperado arrays iguais, mas  c2 é diferente de " + result2948 + " <Arrays.copyOfRange(buffer, 0, 2)>")
chamada antiga: assertEquals(0, it1.nextBatch(buffer))
nova chamada: assertEquals(0, it1.nextBatch(buffer), "Era esperado valores iguais, mas  0 é diferente de " + result2949 + " <it1.nextBatch(buffer)>")
chamada antiga: assertNotNull(tmbcClone)
nova chamada: assertNotNull(tmbcClone, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(tmbcList, tmbcCloneList)
nova chamada: assertEquals(tmbcList, tmbcCloneList, "Era esperado valores iguais, mas  tmbcList é diferente de " + " tmbcCloneList")
chamada antiga: assertEquals(new MappeableBitmapContainer().getContainerName(), MappeableContainer.ContainerNames[0])
nova chamada: assertEquals(new MappeableBitmapContainer().getContainerName(), MappeableContainer.ContainerNames[0], "Era esperado valores iguais, mas " + result2950 + " <new MappeableBitmapContainer().getContainerName()> é diferente de " + " MappeableContainer.ContainerNames[0]")
chamada antiga: assertEquals(new MappeableArrayContainer().getContainerName(), MappeableContainer.ContainerNames[1])
nova chamada: assertEquals(new MappeableArrayContainer().getContainerName(), MappeableContainer.ContainerNames[1], "Era esperado valores iguais, mas " + result2951 + " <new MappeableArrayContainer().getContainerName()> é diferente de " + " MappeableContainer.ContainerNames[1]")
chamada antiga: assertEquals(new MappeableRunContainer().getContainerName(), MappeableContainer.ContainerNames[2])
nova chamada: assertEquals(new MappeableRunContainer().getContainerName(), MappeableContainer.ContainerNames[2], "Era esperado valores iguais, mas " + result2952 + " <new MappeableRunContainer().getContainerName()> é diferente de " + " MappeableContainer.ContainerNames[2]")
chamada antiga: assertTrue(checkContent(c, s))
nova chamada: assertTrue(checkContent(c, s), "Era esperado verdadeiro, mas " + result2953 + " <checkContent(c, s)> é falso")
chamada antiga: assertTrue(c1 instanceof MappeableArrayContainer)
nova chamada: assertTrue(c1 instanceof MappeableArrayContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(14, c1.getCardinality())
nova chamada: assertEquals(14, c1.getCardinality(), "Era esperado valores iguais, mas  14 é diferente de " + result2954 + " <c1.getCardinality()>")
chamada antiga: assertTrue(checkContent(c1, new char[] { 0, 2, 4, (char) 65190, (char) 65191, (char) 65192, (char) 65193, (char) 65194, (char) 65195, (char) 65196, (char) 65197, (char) 65198, (char) 65199, (char) 65200 }))
nova chamada: assertTrue(checkContent(c1, new char[] { 0, 2, 4, (char) 65190, (char) 65191, (char) 65192, (char) 65193, (char) 65194, (char) 65195, (char) 65196, (char) 65197, (char) 65198, (char) 65199, (char) 65200 }), "Era esperado verdadeiro, mas " + result2955 + " <checkContent(c1, new char[] { 0, 2, 4, (char) 65190, (char) 65191, (char) 65192, (char) 65193, (char) 65194, (char) 65195, (char) 65196, (char) 65197, (char) 65198, (char) 65199, (char) 65200 })> é falso")
chamada antiga: assertTrue(c instanceof MappeableRunContainer)
nova chamada: assertTrue(c instanceof MappeableRunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(c1 instanceof MappeableRunContainer)
nova chamada: assertTrue(c1 instanceof MappeableRunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(16, c1.getCardinality())
nova chamada: assertEquals(16, c1.getCardinality(), "Era esperado valores iguais, mas  16 é diferente de " + result2956 + " <c1.getCardinality()>")
chamada antiga: assertTrue(checkContent(c1, new char[] { 1, 2, 3, 4, 5, (char) 65190, (char) 65191, (char) 65192, (char) 65193, (char) 65194, (char) 65195, (char) 65196, (char) 65197, (char) 65198, (char) 65199, (char) 65200 }))
nova chamada: assertTrue(checkContent(c1, new char[] { 1, 2, 3, 4, 5, (char) 65190, (char) 65191, (char) 65192, (char) 65193, (char) 65194, (char) 65195, (char) 65196, (char) 65197, (char) 65198, (char) 65199, (char) 65200 }), "Era esperado verdadeiro, mas " + result2957 + " <checkContent(c1, new char[] { 1, 2, 3, 4, 5, (char) 65190, (char) 65191, (char) 65192, (char) 65193, (char) 65194, (char) 65195, (char) 65196, (char) 65197, (char) 65198, (char) 65199, (char) 65200 })> é falso")
chamada antiga: assertTrue(checkContent(c, s))
nova chamada: assertTrue(checkContent(c, s), "Era esperado verdadeiro, mas " + result2958 + " <checkContent(c, s)> é falso")
chamada antiga: assertTrue(checkContent(c, content))
nova chamada: assertTrue(checkContent(c, content), "Era esperado verdadeiro, mas " + result2959 + " <checkContent(c, content)> é falso")
chamada antiga: assertTrue(c instanceof MappeableRunContainer)
nova chamada: assertTrue(c instanceof MappeableRunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(c instanceof MappeableRunContainer)
nova chamada: assertTrue(c instanceof MappeableRunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(checkContent(c, content))
nova chamada: assertTrue(checkContent(c, content), "Era esperado verdadeiro, mas " + result2960 + " <checkContent(c, content)> é falso")
chamada antiga: assertTrue(c.contains((char) 3) && !c.contains((char) 4))
nova chamada: assertTrue(c.contains((char) 3) && !c.contains((char) 4), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(32768, c.getCardinality())
nova chamada: assertEquals(32768, c.getCardinality(), "Era esperado valores iguais, mas  32768 é diferente de " + result2961 + " <c.getCardinality()>")
chamada antiga: assertTrue(c instanceof MappeableArrayContainer)
nova chamada: assertTrue(c instanceof MappeableArrayContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(999 - 4 + 1 - 3 + 2, c.getCardinality())
nova chamada: assertEquals(999 - 4 + 1 - 3 + 2, c.getCardinality(), "Era esperado valores iguais, mas  999 - 4 + 1 - 3 + 2 é diferente de " + result2962 + " <c.getCardinality()>")
chamada antiga: assertTrue(checkContent(c, content))
nova chamada: assertTrue(checkContent(c, content), "Era esperado verdadeiro, mas " + result2963 + " <checkContent(c, content)> é falso")
chamada antiga: assertTrue(c instanceof MappeableRunContainer)
nova chamada: assertTrue(c instanceof MappeableRunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(995, c.getCardinality())
nova chamada: assertEquals(995, c.getCardinality(), "Era esperado valores iguais, mas  995 é diferente de " + result2964 + " <c.getCardinality()>")
chamada antiga: assertTrue(checkContent(c, content))
nova chamada: assertTrue(checkContent(c, content), "Era esperado verdadeiro, mas " + result2965 + " <checkContent(c, content)> é falso")
chamada antiga: assertTrue(c instanceof MappeableBitmapContainer)
nova chamada: assertTrue(c instanceof MappeableBitmapContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(31773, c.getCardinality())
nova chamada: assertEquals(31773, c.getCardinality(), "Era esperado valores iguais, mas  31773 é diferente de " + result2966 + " <c.getCardinality()>")
chamada antiga: assertTrue(c instanceof MappeableBitmapContainer)
nova chamada: assertTrue(c instanceof MappeableBitmapContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(checkContent(c, content))
nova chamada: assertTrue(checkContent(c, content), "Era esperado verdadeiro, mas " + result2967 + " <checkContent(c, content)> é falso")
chamada antiga: assertTrue(c instanceof MappeableRunContainer)
nova chamada: assertTrue(c instanceof MappeableRunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(31773, c.getCardinality())
nova chamada: assertEquals(31773, c.getCardinality(), "Era esperado valores iguais, mas  31773 é diferente de " + result2968 + " <c.getCardinality()>")
chamada antiga: assertTrue(c instanceof MappeableRunContainer)
nova chamada: assertTrue(c instanceof MappeableRunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(checkContent(c, content))
nova chamada: assertTrue(checkContent(c, content), "Era esperado verdadeiro, mas " + result2969 + " <checkContent(c, content)> é falso")
chamada antiga: assertTrue(c instanceof MappeableBitmapContainer)
nova chamada: assertTrue(c instanceof MappeableBitmapContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(32762, c.getCardinality())
nova chamada: assertEquals(32762, c.getCardinality(), "Era esperado valores iguais, mas  32762 é diferente de " + result2970 + " <c.getCardinality()>")
chamada antiga: assertTrue(c instanceof MappeableBitmapContainer)
nova chamada: assertTrue(c instanceof MappeableBitmapContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(checkContent(c, content))
nova chamada: assertTrue(checkContent(c, content), "Era esperado verdadeiro, mas " + result2971 + " <checkContent(c, content)> é falso")
chamada antiga: assertEquals(1773, c.getCardinality())
nova chamada: assertEquals(1773, c.getCardinality(), "Era esperado valores iguais, mas  1773 é diferente de " + result2972 + " <c.getCardinality()>")
chamada antiga: assertTrue(checkContent(c, content))
nova chamada: assertTrue(checkContent(c, content), "Era esperado verdadeiro, mas " + result2973 + " <checkContent(c, content)> é falso")
chamada antiga: assertTrue(c instanceof MappeableArrayContainer)
nova chamada: assertTrue(c instanceof MappeableArrayContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(10, c.getCardinality())
nova chamada: assertEquals(10, c.getCardinality(), "Era esperado valores iguais, mas  10 é diferente de " + result2974 + " <c.getCardinality()>")
chamada antiga: assertTrue(c instanceof MappeableArrayContainer)
nova chamada: assertTrue(c instanceof MappeableArrayContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(checkContent(c, content))
nova chamada: assertTrue(checkContent(c, content), "Era esperado verdadeiro, mas " + result2975 + " <checkContent(c, content)> é falso")
chamada antiga: assertTrue(checkContent(c1, s))
nova chamada: assertTrue(checkContent(c1, s), "Era esperado verdadeiro, mas " + result2976 + " <checkContent(c1, s)> é falso")
chamada antiga: assertTrue(checkContent(c, content))
nova chamada: assertTrue(checkContent(c, content), "Era esperado verdadeiro, mas " + result2977 + " <checkContent(c, content)> é falso")
chamada antiga: assertTrue(c1 instanceof MappeableArrayContainer)
nova chamada: assertTrue(c1 instanceof MappeableArrayContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(40 + 58, c1.getCardinality())
nova chamada: assertEquals(40 + 58, c1.getCardinality(), "Era esperado valores iguais, mas  40 + 58 é diferente de " + result2978 + " <c1.getCardinality()>")
chamada antiga: assertTrue(checkContent(c1, rightAns))
nova chamada: assertTrue(checkContent(c1, rightAns), "Era esperado verdadeiro, mas " + result2979 + " <checkContent(c1, rightAns)> é falso")
chamada antiga: assertTrue(c1 instanceof MappeableArrayContainer)
nova chamada: assertTrue(c1 instanceof MappeableArrayContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(40 + 58, c1.getCardinality())
nova chamada: assertEquals(40 + 58, c1.getCardinality(), "Era esperado valores iguais, mas  40 + 58 é diferente de " + result2980 + " <c1.getCardinality()>")
chamada antiga: assertTrue(checkContent(c1, rightAns))
nova chamada: assertTrue(checkContent(c1, rightAns), "Era esperado verdadeiro, mas " + result2981 + " <checkContent(c1, rightAns)> é falso")
chamada antiga: assertTrue(checkContent(c1, s))
nova chamada: assertTrue(checkContent(c1, s), "Era esperado verdadeiro, mas " + result2982 + " <checkContent(c1, s)> é falso")
chamada antiga: assertTrue(checkContent(c, content))
nova chamada: assertTrue(checkContent(c, content), "Era esperado verdadeiro, mas " + result2983 + " <checkContent(c, content)> é falso")
chamada antiga: assertTrue(checkContent(c2, content))
nova chamada: assertTrue(checkContent(c2, content), "Era esperado verdadeiro, mas " + result2984 + " <checkContent(c2, content)> é falso")
chamada antiga: assertTrue(checkContent(c2, content))
nova chamada: assertTrue(checkContent(c2, content), "Era esperado verdadeiro, mas " + result2985 + " <checkContent(c2, content)> é falso")
chamada antiga: assertTrue(c1.contains((char) 3) && !c1.contains((char) 4))
nova chamada: assertTrue(c1.contains((char) 3) && !c1.contains((char) 4), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(32768, c1.getCardinality())
nova chamada: assertEquals(32768, c1.getCardinality(), "Era esperado valores iguais, mas  32768 é diferente de " + result2986 + " <c1.getCardinality()>")
chamada antiga: assertTrue(c1 instanceof MappeableArrayContainer)
nova chamada: assertTrue(c1 instanceof MappeableArrayContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(999 - 4 + 1 - 3 + 2, c1.getCardinality())
nova chamada: assertEquals(999 - 4 + 1 - 3 + 2, c1.getCardinality(), "Era esperado valores iguais, mas  999 - 4 + 1 - 3 + 2 é diferente de " + result2987 + " <c1.getCardinality()>")
chamada antiga: assertTrue(checkContent(c2, content))
nova chamada: assertTrue(checkContent(c2, content), "Era esperado verdadeiro, mas " + result2988 + " <checkContent(c2, content)> é falso")
chamada antiga: assertTrue(c1 instanceof MappeableRunContainer)
nova chamada: assertTrue(c1 instanceof MappeableRunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(995, c1.getCardinality())
nova chamada: assertEquals(995, c1.getCardinality(), "Era esperado valores iguais, mas  995 é diferente de " + result2989 + " <c1.getCardinality()>")
chamada antiga: assertTrue(checkContent(c2, content))
nova chamada: assertTrue(checkContent(c2, content), "Era esperado verdadeiro, mas " + result2990 + " <checkContent(c2, content)> é falso")
chamada antiga: assertTrue(c1 instanceof MappeableBitmapContainer)
nova chamada: assertTrue(c1 instanceof MappeableBitmapContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(31773, c1.getCardinality())
nova chamada: assertEquals(31773, c1.getCardinality(), "Era esperado valores iguais, mas  31773 é diferente de " + result2991 + " <c1.getCardinality()>")
chamada antiga: assertTrue(c2 instanceof MappeableBitmapContainer)
nova chamada: assertTrue(c2 instanceof MappeableBitmapContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(checkContent(c2, content))
nova chamada: assertTrue(checkContent(c2, content), "Era esperado verdadeiro, mas " + result2992 + " <checkContent(c2, content)> é falso")
chamada antiga: assertTrue(c1 instanceof MappeableBitmapContainer)
nova chamada: assertTrue(c1 instanceof MappeableBitmapContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(32762, c1.getCardinality())
nova chamada: assertEquals(32762, c1.getCardinality(), "Era esperado valores iguais, mas  32762 é diferente de " + result2993 + " <c1.getCardinality()>")
chamada antiga: assertTrue(c2 instanceof MappeableBitmapContainer)
nova chamada: assertTrue(c2 instanceof MappeableBitmapContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(checkContent(c2, content))
nova chamada: assertTrue(checkContent(c2, content), "Era esperado verdadeiro, mas " + result2994 + " <checkContent(c2, content)> é falso")
chamada antiga: assertEquals(1773, c1.getCardinality())
nova chamada: assertEquals(1773, c1.getCardinality(), "Era esperado valores iguais, mas  1773 é diferente de " + result2995 + " <c1.getCardinality()>")
chamada antiga: assertTrue(checkContent(c2, content))
nova chamada: assertTrue(checkContent(c2, content), "Era esperado verdadeiro, mas " + result2996 + " <checkContent(c2, content)> é falso")
chamada antiga: assertTrue(c1 instanceof MappeableRunContainer)
nova chamada: assertTrue(c1 instanceof MappeableRunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(c1 instanceof MappeableRunContainer)
nova chamada: assertTrue(c1 instanceof MappeableRunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(1773, c1.getCardinality())
nova chamada: assertEquals(1773, c1.getCardinality(), "Era esperado valores iguais, mas  1773 é diferente de " + result2997 + " <c1.getCardinality()>")
chamada antiga: assertTrue(c2 instanceof MappeableRunContainer)
nova chamada: assertTrue(c2 instanceof MappeableRunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(checkContent(c2, content))
nova chamada: assertTrue(checkContent(c2, content), "Era esperado verdadeiro, mas " + result2998 + " <checkContent(c2, content)> é falso")
chamada antiga: assertTrue(c1 instanceof MappeableBitmapContainer)
nova chamada: assertTrue(c1 instanceof MappeableBitmapContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(32773, c1.getCardinality())
nova chamada: assertEquals(32773, c1.getCardinality(), "Era esperado valores iguais, mas  32773 é diferente de " + result2999 + " <c1.getCardinality()>")
chamada antiga: assertTrue(c2 instanceof MappeableBitmapContainer)
nova chamada: assertTrue(c2 instanceof MappeableBitmapContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(checkContent(c2, content))
nova chamada: assertTrue(checkContent(c2, content), "Era esperado verdadeiro, mas " + result3000 + " <checkContent(c2, content)> é falso")
chamada antiga: assertTrue(c1 instanceof MappeableBitmapContainer)
nova chamada: assertTrue(c1 instanceof MappeableBitmapContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(32438, c1.getCardinality())
nova chamada: assertEquals(32438, c1.getCardinality(), "Era esperado valores iguais, mas  32438 é diferente de " + result3001 + " <c1.getCardinality()>")
chamada antiga: assertTrue(c2 instanceof MappeableBitmapContainer)
nova chamada: assertTrue(c2 instanceof MappeableBitmapContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(checkContent(c2, content))
nova chamada: assertTrue(checkContent(c2, content), "Era esperado verdadeiro, mas " + result3002 + " <checkContent(c2, content)> é falso")
chamada antiga: assertEquals(rc.numberOfRuns(), ac.numberOfRuns())
nova chamada: assertEquals(rc.numberOfRuns(), ac.numberOfRuns(), "Era esperado valores iguais, mas " + result3003 + " <rc.numberOfRuns()> é diferente de " + result3004 + " <ac.numberOfRuns()>")
chamada antiga: assertEquals(rc.numberOfRuns(), bc.numberOfRuns())
nova chamada: assertEquals(rc.numberOfRuns(), bc.numberOfRuns(), "Era esperado valores iguais, mas " + result3005 + " <rc.numberOfRuns()> é diferente de " + result3006 + " <bc.numberOfRuns()>")
chamada antiga: assertEquals(10 - 4 + 1, c.getCardinality())
nova chamada: assertEquals(10 - 4 + 1, c.getCardinality(), "Era esperado valores iguais, mas  10 - 4 + 1 é diferente de " + result3007 + " <c.getCardinality()>")
chamada antiga: assertTrue(checkContent(c, new char[] { 4, 5, 6, 7, 8, 9, 10 }))
nova chamada: assertTrue(checkContent(c, new char[] { 4, 5, 6, 7, 8, 9, 10 }), "Era esperado verdadeiro, mas " + result3008 + " <checkContent(c, new char[] { 4, 5, 6, 7, 8, 9, 10 })> é falso")
chamada antiga: assertTrue(c instanceof MappeableRunContainer)
nova chamada: assertTrue(c instanceof MappeableRunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(checkContent(c, new char[] { 4, 5, 6, 7, 8, 9, 10 }))
nova chamada: assertTrue(checkContent(c, new char[] { 4, 5, 6, 7, 8, 9, 10 }), "Era esperado verdadeiro, mas " + result3009 + " <checkContent(c, new char[] { 4, 5, 6, 7, 8, 9, 10 })> é falso")
chamada antiga: assertEquals(35000 - 1000 + 1, c.getCardinality())
nova chamada: assertEquals(35000 - 1000 + 1, c.getCardinality(), "Era esperado valores iguais, mas  35000 - 1000 + 1 é diferente de " + result3010 + " <c.getCardinality()>")
chamada antiga: assertTrue(checkContent(c, s))
nova chamada: assertTrue(checkContent(c, s), "Era esperado verdadeiro, mas " + result3011 + " <checkContent(c, s)> é falso")
chamada antiga: assertTrue(checkContent(c, s))
nova chamada: assertTrue(checkContent(c, s), "Era esperado verdadeiro, mas " + result3012 + " <checkContent(c, s)> é falso")
chamada antiga: assertEquals(c.getCardinality(), 4096)
nova chamada: assertEquals(c.getCardinality(), 4096, "Era esperado valores iguais, mas " + result3013 + " <c.getCardinality()> é diferente de " + " 4096")
chamada antiga: assertTrue(c instanceof MappeableArrayContainer)
nova chamada: assertTrue(c instanceof MappeableArrayContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(c.getCardinality(), 4096)
nova chamada: assertEquals(c.getCardinality(), 4096, "Era esperado valores iguais, mas " + result3014 + " <c.getCardinality()> é diferente de " + " 4096")
chamada antiga: assertTrue(c instanceof MappeableArrayContainer)
nova chamada: assertTrue(c instanceof MappeableArrayContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(c.getCardinality(), 4097)
nova chamada: assertEquals(c.getCardinality(), 4097, "Era esperado valores iguais, mas " + result3015 + " <c.getCardinality()> é diferente de " + " 4097")
chamada antiga: assertTrue(c instanceof MappeableBitmapContainer)
nova chamada: assertTrue(c instanceof MappeableBitmapContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(c.getCardinality(), 4096)
nova chamada: assertEquals(c.getCardinality(), 4096, "Era esperado valores iguais, mas " + result3016 + " <c.getCardinality()> é diferente de " + " 4096")
chamada antiga: assertTrue(c instanceof MappeableArrayContainer)
nova chamada: assertTrue(c instanceof MappeableArrayContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(c.getCardinality(), 4096)
nova chamada: assertEquals(c.getCardinality(), 4096, "Era esperado valores iguais, mas " + result3017 + " <c.getCardinality()> é diferente de " + " 4096")
chamada antiga: assertTrue(c instanceof MappeableRunContainer)
nova chamada: assertTrue(c instanceof MappeableRunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(c.getCardinality(), 1)
nova chamada: assertEquals(c.getCardinality(), 1, "Era esperado valores iguais, mas " + result3018 + " <c.getCardinality()> é diferente de " + " 1")
chamada antiga: assertTrue(c instanceof MappeableArrayContainer)
nova chamada: assertTrue(c instanceof MappeableArrayContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertThrows(NoSuchElementException.class, () -> new MappeableArrayContainer().first())
nova chamada: assertThrows(NoSuchElementException.class, () -> new MappeableArrayContainer().first(), "Era esperado que a exceção  NoSuchElementException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(NoSuchElementException.class, () -> new MappeableArrayContainer().last())
nova chamada: assertThrows(NoSuchElementException.class, () -> new MappeableArrayContainer().last(), "Era esperado que a exceção  NoSuchElementException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(NoSuchElementException.class, () -> new MappeableRunContainer().first())
nova chamada: assertThrows(NoSuchElementException.class, () -> new MappeableRunContainer().first(), "Era esperado que a exceção  NoSuchElementException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(NoSuchElementException.class, () -> new MappeableRunContainer().last())
nova chamada: assertThrows(NoSuchElementException.class, () -> new MappeableRunContainer().last(), "Era esperado que a exceção  NoSuchElementException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(NoSuchElementException.class, () -> new MappeableBitmapContainer().first())
nova chamada: assertThrows(NoSuchElementException.class, () -> new MappeableBitmapContainer().first(), "Era esperado que a exceção  NoSuchElementException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(NoSuchElementException.class, () -> new MappeableBitmapContainer().last())
nova chamada: assertThrows(NoSuchElementException.class, () -> new MappeableBitmapContainer().last(), "Era esperado que a exceção  NoSuchElementException.class fosse lançada, mas não foi")
chamada antiga: assertEquals(expected, ac.toString())
nova chamada: assertEquals(expected, ac.toString(), "Era esperado valores iguais, mas  expected é diferente de " + result3019 + " <ac.toString()>")
chamada antiga: assertEquals(expected, bc.toString())
nova chamada: assertEquals(expected, bc.toString(), "Era esperado valores iguais, mas  expected é diferente de " + result3020 + " <bc.toString()>")
chamada antiga: assertEquals(expected, normalizedRCstr)
nova chamada: assertEquals(expected, normalizedRCstr, "Era esperado valores iguais, mas  expected é diferente de " + " normalizedRCstr")
chamada antiga: assertEquals(value, expected++)
nova chamada: assertEquals(value, expected++, "Era esperado valores iguais, mas  value é diferente de " + " expected++")
chamada antiga: assertEquals(cardinality.value, bitmap.getCardinality())
nova chamada: assertEquals(cardinality.value, bitmap.getCardinality(), "Era esperado valores iguais, mas  cardinality.value é diferente de " + result3021 + " <bitmap.getCardinality()>")
chamada antiga: assertEquals(value, expected)
nova chamada: assertEquals(value, expected, "Era esperado valores iguais, mas  value é diferente de " + " expected")
chamada antiga: assertEquals(cardinality.value, bitmap.getCardinality())
nova chamada: assertEquals(cardinality.value, bitmap.getCardinality(), "Era esperado valores iguais, mas  cardinality.value é diferente de " + result3022 + " <bitmap.getCardinality()>")
chamada antiga: assertEquals(value, expected)
nova chamada: assertEquals(value, expected, "Era esperado valores iguais, mas  value é diferente de " + " expected")
chamada antiga: assertEquals(cardinality.value, bitmap.getCardinality())
nova chamada: assertEquals(cardinality.value, bitmap.getCardinality(), "Era esperado valores iguais, mas  cardinality.value é diferente de " + result3023 + " <bitmap.getCardinality()>")
chamada antiga: assertFalse(bc.isArrayBacked())
nova chamada: assertFalse(bc.isArrayBacked(), "Era esperado falso, mas " + result3024 + " <bc.isArrayBacked()> é verdadeiro ")
chamada antiga: assertEquals(expected, BufferUtil.cardinalityInBitmapRange(bc.bitmap, begin, end))
nova chamada: assertEquals(expected, BufferUtil.cardinalityInBitmapRange(bc.bitmap, begin, end), "Era esperado valores iguais, mas  expected é diferente de " + result3025 + " <BufferUtil.cardinalityInBitmapRange(bc.bitmap, begin, end)>")
chamada antiga: assertFalse(iter.hasNext())
nova chamada: assertFalse(iter.hasNext(), "Era esperado falso, mas " + result3026 + " <iter.hasNext()> é verdadeiro ")
chamada antiga: assertFalse(reverseIter.hasNext())
nova chamada: assertFalse(reverseIter.hasNext(), "Era esperado falso, mas " + result3027 + " <reverseIter.hasNext()> é verdadeiro ")
chamada antiga: assertEquals(bitmap.getCardinality(), intIteratorCopy.size())
nova chamada: assertEquals(bitmap.getCardinality(), intIteratorCopy.size(), "Era esperado valores iguais, mas " + result3028 + " <bitmap.getCardinality()> é diferente de " + result3029 + " <intIteratorCopy.size()>")
chamada antiga: assertEquals(bitmap.getCardinality(), reverseIntIteratorCopy.size())
nova chamada: assertEquals(bitmap.getCardinality(), reverseIntIteratorCopy.size(), "Era esperado valores iguais, mas " + result3030 + " <bitmap.getCardinality()> é diferente de " + result3031 + " <reverseIntIteratorCopy.size()>")
chamada antiga: assertEquals(Ints.asList(data), intIteratorCopy)
nova chamada: assertEquals(Ints.asList(data), intIteratorCopy, "Era esperado valores iguais, mas " + result3032 + " <Ints.asList(data)> é diferente de " + " intIteratorCopy")
chamada antiga: assertEquals(Lists.reverse(Ints.asList(data)), reverseIntIteratorCopy)
nova chamada: assertEquals(Lists.reverse(Ints.asList(data)), reverseIntIteratorCopy, "Era esperado valores iguais, mas " + result3033 + " <Lists.reverse(Ints.asList(data))> é diferente de " + " reverseIntIteratorCopy")
chamada antiga: assertEquals(iter.peekNext(), data[0])
nova chamada: assertEquals(iter.peekNext(), data[0], "Era esperado valores iguais, mas " + result3034 + " <iter.peekNext()> é diferente de " + " data[0]")
chamada antiga: assertEquals(iter.peekNext(), data[0])
nova chamada: assertEquals(iter.peekNext(), data[0], "Era esperado valores iguais, mas " + result3035 + " <iter.peekNext()> é diferente de " + " data[0]")
chamada antiga: assertEquals(bitmap.getCardinality(), intIteratorCopy.size())
nova chamada: assertEquals(bitmap.getCardinality(), intIteratorCopy.size(), "Era esperado valores iguais, mas " + result3036 + " <bitmap.getCardinality()> é diferente de " + result3037 + " <intIteratorCopy.size()>")
chamada antiga: assertEquals(bitmap.getCardinality(), reverseIntIteratorCopy.size())
nova chamada: assertEquals(bitmap.getCardinality(), reverseIntIteratorCopy.size(), "Era esperado valores iguais, mas " + result3038 + " <bitmap.getCardinality()> é diferente de " + result3039 + " <reverseIntIteratorCopy.size()>")
chamada antiga: assertEquals(Ints.asList(data), intIteratorCopy)
nova chamada: assertEquals(Ints.asList(data), intIteratorCopy, "Era esperado valores iguais, mas " + result3040 + " <Ints.asList(data)> é diferente de " + " intIteratorCopy")
chamada antiga: assertEquals(Lists.reverse(Ints.asList(data)), reverseIntIteratorCopy)
nova chamada: assertEquals(Lists.reverse(Ints.asList(data)), reverseIntIteratorCopy, "Era esperado valores iguais, mas " + result3041 + " <Lists.reverse(Ints.asList(data))> é diferente de " + " reverseIntIteratorCopy")
chamada antiga: assertEquals(bitmap.getCardinality(), intIteratorCopy.size())
nova chamada: assertEquals(bitmap.getCardinality(), intIteratorCopy.size(), "Era esperado valores iguais, mas " + result3042 + " <bitmap.getCardinality()> é diferente de " + result3043 + " <intIteratorCopy.size()>")
chamada antiga: assertEquals(bitmap.getCardinality(), reverseIntIteratorCopy.size())
nova chamada: assertEquals(bitmap.getCardinality(), reverseIntIteratorCopy.size(), "Era esperado valores iguais, mas " + result3044 + " <bitmap.getCardinality()> é diferente de " + result3045 + " <reverseIntIteratorCopy.size()>")
chamada antiga: assertEquals(Ints.asList(data), intIteratorCopy)
nova chamada: assertEquals(Ints.asList(data), intIteratorCopy, "Era esperado valores iguais, mas " + result3046 + " <Ints.asList(data)> é diferente de " + " intIteratorCopy")
chamada antiga: assertEquals(Lists.reverse(Ints.asList(data)), reverseIntIteratorCopy)
nova chamada: assertEquals(Lists.reverse(Ints.asList(data)), reverseIntIteratorCopy, "Era esperado valores iguais, mas " + result3047 + " <Lists.reverse(Ints.asList(data))> é diferente de " + " reverseIntIteratorCopy")
chamada antiga: assertEquals(bitmap.getCardinality(), intIteratorCopy.size())
nova chamada: assertEquals(bitmap.getCardinality(), intIteratorCopy.size(), "Era esperado valores iguais, mas " + result3048 + " <bitmap.getCardinality()> é diferente de " + result3049 + " <intIteratorCopy.size()>")
chamada antiga: assertEquals(bitmap.getCardinality(), reverseIntIteratorCopy.size())
nova chamada: assertEquals(bitmap.getCardinality(), reverseIntIteratorCopy.size(), "Era esperado valores iguais, mas " + result3050 + " <bitmap.getCardinality()> é diferente de " + result3051 + " <reverseIntIteratorCopy.size()>")
chamada antiga: assertEquals(Ints.asList(data), intIteratorCopy)
nova chamada: assertEquals(Ints.asList(data), intIteratorCopy, "Era esperado valores iguais, mas " + result3052 + " <Ints.asList(data)> é diferente de " + " intIteratorCopy")
chamada antiga: assertEquals(Lists.reverse(Ints.asList(data)), reverseIntIteratorCopy)
nova chamada: assertEquals(Lists.reverse(Ints.asList(data)), reverseIntIteratorCopy, "Era esperado valores iguais, mas " + result3053 + " <Lists.reverse(Ints.asList(data))> é diferente de " + " reverseIntIteratorCopy")
chamada antiga: assertEquals(ImmutableList.of(1, 2, 3), intIteratorCopy)
nova chamada: assertEquals(ImmutableList.of(1, 2, 3), intIteratorCopy, "Era esperado valores iguais, mas " + result3054 + " <ImmutableList.of(1, 2, 3)> é diferente de " + " intIteratorCopy")
chamada antiga: assertEquals(ImmutableList.of(3, 2, 1), reverseIntIteratorCopy)
nova chamada: assertEquals(ImmutableList.of(3, 2, 1), reverseIntIteratorCopy, "Era esperado valores iguais, mas " + result3055 + " <ImmutableList.of(3, 2, 1)> é diferente de " + " reverseIntIteratorCopy")
chamada antiga: assertEquals(ImmutableRoaringBitmap.intersects(bitmap, test), bitmap.intersects(minimum, supremum))
nova chamada: assertEquals(ImmutableRoaringBitmap.intersects(bitmap, test), bitmap.intersects(minimum, supremum), "Era esperado valores iguais, mas " + result3056 + " <ImmutableRoaringBitmap.intersects(bitmap, test)> é diferente de " + result3057 + " <bitmap.intersects(minimum, supremum)>")
chamada antiga: assertEquals(MutableRoaringBitmap.intersects(bitmap, test), bitmap.intersects(minimum, supremum))
nova chamada: assertEquals(MutableRoaringBitmap.intersects(bitmap, test), bitmap.intersects(minimum, supremum), "Era esperado valores iguais, mas " + result3058 + " <MutableRoaringBitmap.intersects(bitmap, test)> é diferente de " + result3059 + " <bitmap.intersects(minimum, supremum)>")
chamada antiga: assertEquals(!test.isEmpty() && bitmap.contains(test), bitmap.contains(minimum, supremum))
nova chamada: assertEquals(!test.isEmpty() && bitmap.contains(test), bitmap.contains(minimum, supremum), "Era esperado valores iguais, mas  !test.isEmpty() && bitmap.contains(test) é diferente de " + result3060 + " <bitmap.contains(minimum, supremum)>")
chamada antiga: assertTrue(test.isEmpty() || test.contains(minimum, supremum))
nova chamada: assertTrue(test.isEmpty() || test.contains(minimum, supremum), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(!contains || intersects)
nova chamada: assertTrue(!contains || intersects, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("[32200,34999][65535,65535]", rc.toString())
nova chamada: assertEquals("[32200,34999][65535,65535]", rc.toString(), "Era esperado valores iguais, mas  '[32200,34999][65535,65535]' é diferente de " + result3061 + " <rc.toString()>")
chamada antiga: assertEquals(m2.getCardinality(), count)
nova chamada: assertEquals(m2.getCardinality(), count, "Era esperado valores iguais, mas " + result3062 + " <m2.getCardinality()> é diferente de " + " count")
chamada antiga: assertEquals(mrb.getCardinality(), count)
nova chamada: assertEquals(mrb.getCardinality(), count, "Era esperado valores iguais, mas " + result3063 + " <mrb.getCardinality()> é diferente de " + " count")
chamada antiga: assertTrue(m2.serializedSizeInBytes() < mrb.serializedSizeInBytes())
nova chamada: assertTrue(m2.serializedSizeInBytes() < mrb.serializedSizeInBytes(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(m2, mrb)
nova chamada: assertEquals(m2, mrb, "Era esperado valores iguais, mas  m2 é diferente de " + " mrb")
chamada antiga: assertEquals(toMapped(m2), mrb)
nova chamada: assertEquals(toMapped(m2), mrb, "Era esperado valores iguais, mas " + result3064 + " <toMapped(m2)> é diferente de " + " mrb")
chamada antiga: assertEquals(toMapped(m2), toMapped(mrb))
nova chamada: assertEquals(toMapped(m2), toMapped(mrb), "Era esperado valores iguais, mas " + result3065 + " <toMapped(m2)> é diferente de " + result3066 + " <toMapped(mrb)>")
chamada antiga: assertEquals(m2, toMapped(mrb))
nova chamada: assertEquals(m2, toMapped(mrb), "Era esperado valores iguais, mas  m2 é diferente de " + result3067 + " <toMapped(mrb)>")
chamada antiga: assertEquals(r1, b1)
nova chamada: assertEquals(r1, b1, "Era esperado valores iguais, mas  r1 é diferente de " + " b1")
chamada antiga: assertEquals(r2, b2)
nova chamada: assertEquals(r2, b2, "Era esperado valores iguais, mas  r2 é diferente de " + " b2")
chamada antiga: assertEquals(r3, b3)
nova chamada: assertEquals(r3, b3, "Era esperado valores iguais, mas  r3 é diferente de " + " b3")
chamada antiga: assertEquals(r4, b4)
nova chamada: assertEquals(r4, b4, "Era esperado valores iguais, mas  r4 é diferente de " + " b4")
chamada antiga: assertEquals(r5, b5)
nova chamada: assertEquals(r5, b5, "Era esperado valores iguais, mas  r5 é diferente de " + " b5")
chamada antiga: assertEquals(r6, b6)
nova chamada: assertEquals(r6, b6, "Era esperado valores iguais, mas  r6 é diferente de " + " b6")
chamada antiga: assertEquals(r7, b7)
nova chamada: assertEquals(r7, b7, "Era esperado valores iguais, mas  r7 é diferente de " + " b7")
chamada antiga: assertEquals(12, container.getSizeInBytes())
nova chamada: assertEquals(12, container.getSizeInBytes(), "Era esperado valores iguais, mas  12 é diferente de " + result3068 + " <container.getSizeInBytes()>")
chamada antiga: assertEquals(4, container.getCardinality())
nova chamada: assertEquals(4, container.getCardinality(), "Era esperado valores iguais, mas  4 é diferente de " + result3069 + " <container.getCardinality()>")
chamada antiga: assertTrue(container.contains((char) 0))
nova chamada: assertTrue(container.contains((char) 0), "Era esperado verdadeiro, mas " + result3070 + " <container.contains((char) 0)> é falso")
chamada antiga: assertTrue(container.contains((char) 1))
nova chamada: assertTrue(container.contains((char) 1), "Era esperado verdadeiro, mas " + result3071 + " <container.contains((char) 1)> é falso")
chamada antiga: assertTrue(container.contains((char) 2))
nova chamada: assertTrue(container.contains((char) 2), "Era esperado verdadeiro, mas " + result3072 + " <container.contains((char) 2)> é falso")
chamada antiga: assertTrue(container.contains((char) 55))
nova chamada: assertTrue(container.contains((char) 55), "Era esperado verdadeiro, mas " + result3073 + " <container.contains((char) 55)> é falso")
chamada antiga: assertNotSame(container, newContainer)
nova chamada: assertNotSame(container, newContainer, "Era esperado objetos diferentes, mas  container é igual a " + " newContainer")
chamada antiga: assertEquals(20, newContainer.getCardinality())
nova chamada: assertEquals(20, newContainer.getCardinality(), "Era esperado valores iguais, mas  20 é diferente de " + result3074 + " <newContainer.getCardinality()>")
chamada antiga: assertEquals(8, newContainer.getSizeInBytes())
nova chamada: assertEquals(8, newContainer.getSizeInBytes(), "Era esperado valores iguais, mas  8 é diferente de " + result3075 + " <newContainer.getSizeInBytes()>")
chamada antiga: assertNotSame(container, newContainer)
nova chamada: assertNotSame(container, newContainer, "Era esperado objetos diferentes, mas  container é igual a " + " newContainer")
chamada antiga: assertEquals(20, newContainer.getCardinality())
nova chamada: assertEquals(20, newContainer.getCardinality(), "Era esperado valores iguais, mas  20 é diferente de " + result3076 + " <newContainer.getCardinality()>")
chamada antiga: assertEquals(8, newContainer.getSizeInBytes())
nova chamada: assertEquals(8, newContainer.getSizeInBytes(), "Era esperado valores iguais, mas  8 é diferente de " + result3077 + " <newContainer.getSizeInBytes()>")
chamada antiga: assertNotSame(container, newContainer)
nova chamada: assertNotSame(container, newContainer, "Era esperado objetos diferentes, mas  container é igual a " + " newContainer")
chamada antiga: assertEquals(90, newContainer.getCardinality())
nova chamada: assertEquals(90, newContainer.getCardinality(), "Era esperado valores iguais, mas  90 é diferente de " + result3078 + " <newContainer.getCardinality()>")
chamada antiga: assertNotSame(container, newContainer)
nova chamada: assertNotSame(container, newContainer, "Era esperado objetos diferentes, mas  container é igual a " + " newContainer")
chamada antiga: assertEquals(92, newContainer.getCardinality())
nova chamada: assertEquals(92, newContainer.getCardinality(), "Era esperado valores iguais, mas  92 é diferente de " + result3079 + " <newContainer.getCardinality()>")
chamada antiga: assertTrue(newContainer.contains((char) 1))
nova chamada: assertTrue(newContainer.contains((char) 1), "Era esperado verdadeiro, mas " + result3080 + " <newContainer.contains((char) 1)> é falso")
chamada antiga: assertTrue(newContainer.contains((char) 256))
nova chamada: assertTrue(newContainer.contains((char) 256), "Era esperado verdadeiro, mas " + result3081 + " <newContainer.contains((char) 256)> é falso")
chamada antiga: assertNotSame(container, newContainer)
nova chamada: assertNotSame(container, newContainer, "Era esperado objetos diferentes, mas  container é igual a " + " newContainer")
chamada antiga: assertEquals(119, newContainer.getCardinality())
nova chamada: assertEquals(119, newContainer.getCardinality(), "Era esperado valores iguais, mas  119 é diferente de " + result3082 + " <newContainer.getCardinality()>")
chamada antiga: assertNotSame(container, newContainer)
nova chamada: assertNotSame(container, newContainer, "Era esperado objetos diferentes, mas  container é igual a " + " newContainer")
chamada antiga: assertEquals(90, newContainer.getCardinality())
nova chamada: assertEquals(90, newContainer.getCardinality(), "Era esperado valores iguais, mas  90 é diferente de " + result3083 + " <newContainer.getCardinality()>")
chamada antiga: assertNotSame(container, newContainer)
nova chamada: assertNotSame(container, newContainer, "Era esperado objetos diferentes, mas  container é igual a " + " newContainer")
chamada antiga: assertEquals(92, newContainer.getCardinality())
nova chamada: assertEquals(92, newContainer.getCardinality(), "Era esperado valores iguais, mas  92 é diferente de " + result3084 + " <newContainer.getCardinality()>")
chamada antiga: assertEquals(rc, result)
nova chamada: assertEquals(rc, result, "Era esperado valores iguais, mas  rc é diferente de " + " result")
chamada antiga: assertEquals(1, result.getCardinality())
nova chamada: assertEquals(1, result.getCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result3085 + " <result.getCardinality()>")
chamada antiga: assertTrue(result.contains((char) 1))
nova chamada: assertTrue(result.contains((char) 1), "Era esperado verdadeiro, mas " + result3086 + " <result.contains((char) 1)> é falso")
chamada antiga: assertEquals(0, result.getCardinality())
nova chamada: assertEquals(0, result.getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result3087 + " <result.getCardinality()>")
chamada antiga: assertEquals(100, intersectionNOT.getCardinality())
nova chamada: assertEquals(100, intersectionNOT.getCardinality(), "Era esperado valores iguais, mas  100 é diferente de " + result3088 + " <intersectionNOT.getCardinality()>")
chamada antiga: assertEquals(200, bc.getCardinality())
nova chamada: assertEquals(200, bc.getCardinality(), "Era esperado valores iguais, mas  200 é diferente de " + result3089 + " <bc.getCardinality()>")
chamada antiga: assertEquals(200, rc.getCardinality())
nova chamada: assertEquals(200, rc.getCardinality(), "Era esperado valores iguais, mas  200 é diferente de " + result3090 + " <rc.getCardinality()>")
chamada antiga: assertEquals(100, intersectionNOT.getCardinality())
nova chamada: assertEquals(100, intersectionNOT.getCardinality(), "Era esperado valores iguais, mas  100 é diferente de " + result3091 + " <intersectionNOT.getCardinality()>")
chamada antiga: assertEquals(200, ac.getCardinality())
nova chamada: assertEquals(200, ac.getCardinality(), "Era esperado valores iguais, mas  200 é diferente de " + result3092 + " <ac.getCardinality()>")
chamada antiga: assertEquals(200, rc.getCardinality())
nova chamada: assertEquals(200, rc.getCardinality(), "Era esperado valores iguais, mas  200 é diferente de " + result3093 + " <rc.getCardinality()>")
chamada antiga: assertEquals(1, rc.getCardinality())
nova chamada: assertEquals(1, rc.getCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result3094 + " <rc.getCardinality()>")
chamada antiga: assertEquals(0, rc.getCardinality())
nova chamada: assertEquals(0, rc.getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result3095 + " <rc.getCardinality()>")
chamada antiga: assertEquals(ac, ar)
nova chamada: assertEquals(ac, ar, "Era esperado valores iguais, mas  ac é diferente de " + " ar")
chamada antiga: assertEquals(ac, ar)
nova chamada: assertEquals(ac, ar, "Era esperado valores iguais, mas  ac é diferente de " + " ar")
chamada antiga: assertEquals(0, array[0])
nova chamada: assertEquals(0, array[0], "Era esperado valores iguais, mas  0 é diferente de " + " array[0]")
chamada antiga: assertEquals(1, array[1])
nova chamada: assertEquals(1, array[1], "Era esperado valores iguais, mas  1 é diferente de " + " array[1]")
chamada antiga: assertEquals(3, array[2])
nova chamada: assertEquals(3, array[2], "Era esperado valores iguais, mas  3 é diferente de " + " array[2]")
chamada antiga: assertEquals(12, array[3])
nova chamada: assertEquals(12, array[3], "Era esperado valores iguais, mas  12 é diferente de " + " array[3]")
chamada antiga: assertTrue(rc.contains((char) 1))
nova chamada: assertTrue(rc.contains((char) 1), "Era esperado verdadeiro, mas " + result3096 + " <rc.contains((char) 1)> é falso")
chamada antiga: assertFalse(rc.contains((char) 1))
nova chamada: assertFalse(rc.contains((char) 1), "Era esperado falso, mas " + result3097 + " <rc.contains((char) 1)> é verdadeiro ")
chamada antiga: assertThrows(IllegalArgumentException.class, () -> {
    MappeableContainer rc = new MappeableRunContainer();
    rc.iadd(10, 9);
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    MappeableContainer rc = new MappeableRunContainer();
    rc.iadd(10, 9);
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(IllegalArgumentException.class, () -> {
    MappeableContainer rc = new MappeableRunContainer();
    rc.iadd(0, 1 << 20);
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    MappeableContainer rc = new MappeableRunContainer();
    rc.iadd(0, 1 << 20);
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: assertEquals(40, rc.getCardinality())
nova chamada: assertEquals(40, rc.getCardinality(), "Era esperado valores iguais, mas  40 é diferente de " + result3098 + " <rc.getCardinality()>")
chamada antiga: assertEquals(12, rc.getSizeInBytes())
nova chamada: assertEquals(12, rc.getSizeInBytes(), "Era esperado valores iguais, mas  12 é diferente de " + result3099 + " <rc.getSizeInBytes()>")
chamada antiga: assertEquals(30, rc.getCardinality())
nova chamada: assertEquals(30, rc.getCardinality(), "Era esperado valores iguais, mas  30 é diferente de " + result3100 + " <rc.getCardinality()>")
chamada antiga: assertEquals(12, rc.getSizeInBytes())
nova chamada: assertEquals(12, rc.getSizeInBytes(), "Era esperado valores iguais, mas  12 é diferente de " + result3101 + " <rc.getSizeInBytes()>")
chamada antiga: assertEquals(30, rc.getCardinality())
nova chamada: assertEquals(30, rc.getCardinality(), "Era esperado valores iguais, mas  30 é diferente de " + result3102 + " <rc.getCardinality()>")
chamada antiga: assertEquals(8, rc.getSizeInBytes())
nova chamada: assertEquals(8, rc.getSizeInBytes(), "Era esperado valores iguais, mas  8 é diferente de " + result3103 + " <rc.getSizeInBytes()>")
chamada antiga: assertEquals(35, rc.getCardinality())
nova chamada: assertEquals(35, rc.getCardinality(), "Era esperado valores iguais, mas  35 é diferente de " + result3104 + " <rc.getCardinality()>")
chamada antiga: assertEquals(8, rc.getSizeInBytes())
nova chamada: assertEquals(8, rc.getSizeInBytes(), "Era esperado valores iguais, mas  8 é diferente de " + result3105 + " <rc.getSizeInBytes()>")
chamada antiga: assertEquals(40, rc.getCardinality())
nova chamada: assertEquals(40, rc.getCardinality(), "Era esperado valores iguais, mas  40 é diferente de " + result3106 + " <rc.getCardinality()>")
chamada antiga: assertEquals(12, rc.getSizeInBytes())
nova chamada: assertEquals(12, rc.getSizeInBytes(), "Era esperado valores iguais, mas  12 é diferente de " + result3107 + " <rc.getSizeInBytes()>")
chamada antiga: assertEquals(40, rc.getCardinality())
nova chamada: assertEquals(40, rc.getCardinality(), "Era esperado valores iguais, mas  40 é diferente de " + result3108 + " <rc.getCardinality()>")
chamada antiga: assertEquals(12, rc.getSizeInBytes())
nova chamada: assertEquals(12, rc.getSizeInBytes(), "Era esperado valores iguais, mas  12 é diferente de " + result3109 + " <rc.getSizeInBytes()>")
chamada antiga: assertEquals(40, rc.getCardinality())
nova chamada: assertEquals(40, rc.getCardinality(), "Era esperado valores iguais, mas  40 é diferente de " + result3110 + " <rc.getCardinality()>")
chamada antiga: assertEquals(12, rc.getSizeInBytes())
nova chamada: assertEquals(12, rc.getSizeInBytes(), "Era esperado valores iguais, mas  12 é diferente de " + result3111 + " <rc.getSizeInBytes()>")
chamada antiga: assertEquals(35, rc.getCardinality())
nova chamada: assertEquals(35, rc.getCardinality(), "Era esperado valores iguais, mas  35 é diferente de " + result3112 + " <rc.getCardinality()>")
chamada antiga: assertEquals(16, rc.getSizeInBytes())
nova chamada: assertEquals(16, rc.getSizeInBytes(), "Era esperado valores iguais, mas  16 é diferente de " + result3113 + " <rc.getSizeInBytes()>")
chamada antiga: assertEquals(40, rc.getCardinality())
nova chamada: assertEquals(40, rc.getCardinality(), "Era esperado valores iguais, mas  40 é diferente de " + result3114 + " <rc.getCardinality()>")
chamada antiga: assertEquals(12, rc.getSizeInBytes())
nova chamada: assertEquals(12, rc.getSizeInBytes(), "Era esperado valores iguais, mas  12 é diferente de " + result3115 + " <rc.getSizeInBytes()>")
chamada antiga: assertEquals(35, rc.getCardinality())
nova chamada: assertEquals(35, rc.getCardinality(), "Era esperado valores iguais, mas  35 é diferente de " + result3116 + " <rc.getCardinality()>")
chamada antiga: assertEquals(16, rc.getSizeInBytes())
nova chamada: assertEquals(16, rc.getSizeInBytes(), "Era esperado valores iguais, mas  16 é diferente de " + result3117 + " <rc.getSizeInBytes()>")
chamada antiga: assertEquals(45, rc.getCardinality())
nova chamada: assertEquals(45, rc.getCardinality(), "Era esperado valores iguais, mas  45 é diferente de " + result3118 + " <rc.getCardinality()>")
chamada antiga: assertEquals(12, rc.getSizeInBytes())
nova chamada: assertEquals(12, rc.getSizeInBytes(), "Era esperado valores iguais, mas  12 é diferente de " + result3119 + " <rc.getSizeInBytes()>")
chamada antiga: assertEquals(20, container.getCardinality())
nova chamada: assertEquals(20, container.getCardinality(), "Era esperado valores iguais, mas  20 é diferente de " + result3120 + " <container.getCardinality()>")
chamada antiga: assertEquals(8, container.getSizeInBytes())
nova chamada: assertEquals(8, container.getSizeInBytes(), "Era esperado valores iguais, mas  8 é diferente de " + result3121 + " <container.getSizeInBytes()>")
chamada antiga: assertEquals(119, container.getCardinality())
nova chamada: assertEquals(119, container.getCardinality(), "Era esperado valores iguais, mas  119 é diferente de " + result3122 + " <container.getCardinality()>")
chamada antiga: assertEquals(90, container.getCardinality())
nova chamada: assertEquals(90, container.getCardinality(), "Era esperado valores iguais, mas  90 é diferente de " + result3123 + " <container.getCardinality()>")
chamada antiga: assertEquals(ac, ac.and(rc))
nova chamada: assertEquals(ac, ac.and(rc), "Era esperado valores iguais, mas  ac é diferente de " + result3124 + " <ac.and(rc)>")
chamada antiga: assertEquals(ac, rc.and(ac))
nova chamada: assertEquals(ac, rc.and(ac), "Era esperado valores iguais, mas  ac é diferente de " + result3125 + " <rc.and(ac)>")
chamada antiga: assertEquals(ac, ac.and(rc))
nova chamada: assertEquals(ac, ac.and(rc), "Era esperado valores iguais, mas  ac é diferente de " + result3126 + " <ac.and(rc)>")
chamada antiga: assertEquals(ac, rc.and(ac))
nova chamada: assertEquals(ac, rc.and(ac), "Era esperado valores iguais, mas  ac é diferente de " + result3127 + " <rc.and(ac)>")
chamada antiga: assertEquals(0, rc.and(ac).getCardinality())
nova chamada: assertEquals(0, rc.and(ac).getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result3128 + " <rc.and(ac).getCardinality()>")
chamada antiga: assertEquals(100, intersection.getCardinality())
nova chamada: assertEquals(100, intersection.getCardinality(), "Era esperado valores iguais, mas  100 é diferente de " + result3129 + " <intersection.getCardinality()>")
chamada antiga: assertEquals(200, bc.getCardinality())
nova chamada: assertEquals(200, bc.getCardinality(), "Era esperado valores iguais, mas  200 é diferente de " + result3130 + " <bc.getCardinality()>")
chamada antiga: assertEquals(200, rc.getCardinality())
nova chamada: assertEquals(200, rc.getCardinality(), "Era esperado valores iguais, mas  200 é diferente de " + result3131 + " <rc.getCardinality()>")
chamada antiga: assertEquals(256, rc1.getCardinality())
nova chamada: assertEquals(256, rc1.getCardinality(), "Era esperado valores iguais, mas  256 é diferente de " + result3132 + " <rc1.getCardinality()>")
chamada antiga: assertEquals(0, rc.getCardinality())
nova chamada: assertEquals(0, rc.getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result3133 + " <rc.getCardinality()>")
chamada antiga: assertEquals(5, rc.getCardinality())
nova chamada: assertEquals(5, rc.getCardinality(), "Era esperado valores iguais, mas  5 é diferente de " + result3134 + " <rc.getCardinality()>")
chamada antiga: assertEquals(8, rc.getSizeInBytes())
nova chamada: assertEquals(8, rc.getSizeInBytes(), "Era esperado valores iguais, mas  8 é diferente de " + result3135 + " <rc.getSizeInBytes()>")
chamada antiga: assertEquals(0, rc.getCardinality())
nova chamada: assertEquals(0, rc.getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result3136 + " <rc.getCardinality()>")
chamada antiga: assertEquals(0, rc.getCardinality())
nova chamada: assertEquals(0, rc.getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result3137 + " <rc.getCardinality()>")
chamada antiga: assertEquals(10, rc.getCardinality())
nova chamada: assertEquals(10, rc.getCardinality(), "Era esperado valores iguais, mas  10 é diferente de " + result3138 + " <rc.getCardinality()>")
chamada antiga: assertEquals(12, rc.getSizeInBytes())
nova chamada: assertEquals(12, rc.getSizeInBytes(), "Era esperado valores iguais, mas  12 é diferente de " + result3139 + " <rc.getSizeInBytes()>")
chamada antiga: assertEquals(5, rc.getCardinality())
nova chamada: assertEquals(5, rc.getCardinality(), "Era esperado valores iguais, mas  5 é diferente de " + result3140 + " <rc.getCardinality()>")
chamada antiga: assertEquals(8, rc.getSizeInBytes())
nova chamada: assertEquals(8, rc.getSizeInBytes(), "Era esperado valores iguais, mas  8 é diferente de " + result3141 + " <rc.getSizeInBytes()>")
chamada antiga: assertEquals(10, rc.getCardinality())
nova chamada: assertEquals(10, rc.getCardinality(), "Era esperado valores iguais, mas  10 é diferente de " + result3142 + " <rc.getCardinality()>")
chamada antiga: assertEquals(12, rc.getSizeInBytes())
nova chamada: assertEquals(12, rc.getSizeInBytes(), "Era esperado valores iguais, mas  12 é diferente de " + result3143 + " <rc.getSizeInBytes()>")
chamada antiga: assertEquals(5, rc.getCardinality())
nova chamada: assertEquals(5, rc.getCardinality(), "Era esperado valores iguais, mas  5 é diferente de " + result3144 + " <rc.getCardinality()>")
chamada antiga: assertEquals(8, rc.getSizeInBytes())
nova chamada: assertEquals(8, rc.getSizeInBytes(), "Era esperado valores iguais, mas  8 é diferente de " + result3145 + " <rc.getSizeInBytes()>")
chamada antiga: assertEquals(rc.getCardinality(), 0)
nova chamada: assertEquals(rc.getCardinality(), 0, "Era esperado valores iguais, mas " + result3146 + " <rc.getCardinality()> é diferente de " + " 0")
chamada antiga: assertEquals(9, rc.getCardinality())
nova chamada: assertEquals(9, rc.getCardinality(), "Era esperado valores iguais, mas  9 é diferente de " + result3147 + " <rc.getCardinality()>")
chamada antiga: assertEquals(8, rc.getSizeInBytes())
nova chamada: assertEquals(8, rc.getSizeInBytes(), "Era esperado valores iguais, mas  8 é diferente de " + result3148 + " <rc.getSizeInBytes()>")
chamada antiga: assertEquals(19, rc.getCardinality())
nova chamada: assertEquals(19, rc.getCardinality(), "Era esperado valores iguais, mas  19 é diferente de " + result3149 + " <rc.getCardinality()>")
chamada antiga: assertEquals(12, rc.getSizeInBytes())
nova chamada: assertEquals(12, rc.getSizeInBytes(), "Era esperado valores iguais, mas  12 é diferente de " + result3150 + " <rc.getSizeInBytes()>")
chamada antiga: assertEquals(5, rc.getCardinality())
nova chamada: assertEquals(5, rc.getCardinality(), "Era esperado valores iguais, mas  5 é diferente de " + result3151 + " <rc.getCardinality()>")
chamada antiga: assertEquals(8, rc.getSizeInBytes())
nova chamada: assertEquals(8, rc.getSizeInBytes(), "Era esperado valores iguais, mas  8 é diferente de " + result3152 + " <rc.getSizeInBytes()>")
chamada antiga: assertEquals(0, rc.getCardinality())
nova chamada: assertEquals(0, rc.getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result3153 + " <rc.getCardinality()>")
chamada antiga: assertEquals(5, rc.getCardinality())
nova chamada: assertEquals(5, rc.getCardinality(), "Era esperado valores iguais, mas  5 é diferente de " + result3154 + " <rc.getCardinality()>")
chamada antiga: assertEquals(8, rc.getSizeInBytes())
nova chamada: assertEquals(8, rc.getSizeInBytes(), "Era esperado valores iguais, mas  8 é diferente de " + result3155 + " <rc.getSizeInBytes()>")
chamada antiga: assertEquals(0, rc.getCardinality())
nova chamada: assertEquals(0, rc.getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result3156 + " <rc.getCardinality()>")
chamada antiga: assertEquals(14, rc.getCardinality())
nova chamada: assertEquals(14, rc.getCardinality(), "Era esperado valores iguais, mas  14 é diferente de " + result3157 + " <rc.getCardinality()>")
chamada antiga: assertEquals(12, rc.getSizeInBytes())
nova chamada: assertEquals(12, rc.getSizeInBytes(), "Era esperado valores iguais, mas  12 é diferente de " + result3158 + " <rc.getSizeInBytes()>")
chamada antiga: assertEquals(19, rc.getCardinality())
nova chamada: assertEquals(19, rc.getCardinality(), "Era esperado valores iguais, mas  19 é diferente de " + result3159 + " <rc.getCardinality()>")
chamada antiga: assertEquals(12, rc.getSizeInBytes())
nova chamada: assertEquals(12, rc.getSizeInBytes(), "Era esperado valores iguais, mas  12 é diferente de " + result3160 + " <rc.getSizeInBytes()>")
chamada antiga: assertThrows(IllegalArgumentException.class, () -> {
    MappeableContainer rc = new MappeableRunContainer();
    rc.iremove(10, 9);
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    MappeableContainer rc = new MappeableRunContainer();
    rc.iremove(10, 9);
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(IllegalArgumentException.class, () -> {
    MappeableContainer rc = new MappeableRunContainer();
    rc.remove(0, 1 << 20);
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    MappeableContainer rc = new MappeableRunContainer();
    rc.remove(0, 1 << 20);
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: assertFalse(i.hasNext())
nova chamada: assertFalse(i.hasNext(), "Era esperado falso, mas " + result3161 + " <i.hasNext()> é verdadeiro ")
chamada antiga: assertNotSame(container, limit)
nova chamada: assertNotSame(container, limit, "Era esperado objetos diferentes, mas  container é igual a " + " limit")
chamada antiga: assertEquals(container, limit)
nova chamada: assertEquals(container, limit, "Era esperado valores iguais, mas  container é diferente de " + " limit")
chamada antiga: assertNotSame(container, limit)
nova chamada: assertNotSame(container, limit, "Era esperado objetos diferentes, mas  container é igual a " + " limit")
chamada antiga: assertEquals(3, limit.getCardinality())
nova chamada: assertEquals(3, limit.getCardinality(), "Era esperado valores iguais, mas  3 é diferente de " + result3162 + " <limit.getCardinality()>")
chamada antiga: assertTrue(limit.contains((char) 0))
nova chamada: assertTrue(limit.contains((char) 0), "Era esperado verdadeiro, mas " + result3163 + " <limit.contains((char) 0)> é falso")
chamada antiga: assertTrue(limit.contains((char) 2))
nova chamada: assertTrue(limit.contains((char) 2), "Era esperado verdadeiro, mas " + result3164 + " <limit.contains((char) 2)> é falso")
chamada antiga: assertTrue(limit.contains((char) 55))
nova chamada: assertTrue(limit.contains((char) 55), "Era esperado verdadeiro, mas " + result3165 + " <limit.contains((char) 55)> é falso")
chamada antiga: assertFalse(i.hasNext())
nova chamada: assertFalse(i.hasNext(), "Era esperado falso, mas " + result3166 + " <i.hasNext()> é verdadeiro ")
chamada antiga: assertFalse(i.hasNext())
nova chamada: assertFalse(i.hasNext(), "Era esperado falso, mas " + result3167 + " <i.hasNext()> é verdadeiro ")
chamada antiga: assertFalse(i.hasNext())
nova chamada: assertFalse(i.hasNext(), "Era esperado falso, mas " + result3168 + " <i.hasNext()> é verdadeiro ")
chamada antiga: assertTrue(atLeastOneArray)
nova chamada: assertTrue(atLeastOneArray, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(atLeastOneArray)
nova chamada: assertTrue(atLeastOneArray, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(new MappeableArrayContainer(CharBuffer.wrap(new char[] { 0, 2, 4, 15, 16, 48, 50, 80 }), 8), ac.andNot(rc))
nova chamada: assertEquals(new MappeableArrayContainer(CharBuffer.wrap(new char[] { 0, 2, 4, 15, 16, 48, 50, 80 }), 8), ac.andNot(rc), "Era esperado valores iguais, mas  new MappeableArrayContainer(CharBuffer.wrap(new char[] { 0, 2, 4, 15, 16, 48, 50, 80 }), 8) é diferente de " + result3169 + " <ac.andNot(rc)>")
chamada antiga: assertEquals(new MappeableArrayContainer(), ac.andNot(rc))
nova chamada: assertEquals(new MappeableArrayContainer(), ac.andNot(rc), "Era esperado valores iguais, mas  new MappeableArrayContainer() é diferente de " + result3170 + " <ac.andNot(rc)>")
chamada antiga: assertEquals(new MappeableArrayContainer(), ac.andNot(rc))
nova chamada: assertEquals(new MappeableArrayContainer(), ac.andNot(rc), "Era esperado valores iguais, mas  new MappeableArrayContainer() é diferente de " + result3171 + " <ac.andNot(rc)>")
chamada antiga: assertTrue(atLeastOneArray)
nova chamada: assertTrue(atLeastOneArray, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(atLeastOneArray)
nova chamada: assertTrue(atLeastOneArray, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNotSame(container, result)
nova chamada: assertNotSame(container, result, "Era esperado objetos diferentes, mas  container é igual a " + " result")
chamada antiga: assertEquals(container, result)
nova chamada: assertEquals(container, result, "Era esperado valores iguais, mas  container é diferente de " + " result")
chamada antiga: assertEquals(5, result.getCardinality())
nova chamada: assertEquals(5, result.getCardinality(), "Era esperado valores iguais, mas  5 é diferente de " + result3172 + " <result.getCardinality()>")
chamada antiga: assertEquals(7, result.getCardinality())
nova chamada: assertEquals(7, result.getCardinality(), "Era esperado valores iguais, mas  7 é diferente de " + result3173 + " <result.getCardinality()>")
chamada antiga: assertEquals(9, result.getCardinality())
nova chamada: assertEquals(9, result.getCardinality(), "Era esperado valores iguais, mas  9 é diferente de " + result3174 + " <result.getCardinality()>")
chamada antiga: assertEquals(2, result.getCardinality())
nova chamada: assertEquals(2, result.getCardinality(), "Era esperado valores iguais, mas  2 é diferente de " + result3175 + " <result.getCardinality()>")
chamada antiga: assertEquals(10, result.getCardinality())
nova chamada: assertEquals(10, result.getCardinality(), "Era esperado valores iguais, mas  10 é diferente de " + result3176 + " <result.getCardinality()>")
chamada antiga: assertTrue(result instanceof MappeableRunContainer)
nova chamada: assertTrue(result instanceof MappeableRunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(5, result.getCardinality())
nova chamada: assertEquals(5, result.getCardinality(), "Era esperado valores iguais, mas  5 é diferente de " + result3177 + " <result.getCardinality()>")
chamada antiga: assertEquals(4, result.getCardinality())
nova chamada: assertEquals(4, result.getCardinality(), "Era esperado valores iguais, mas  4 é diferente de " + result3178 + " <result.getCardinality()>")
chamada antiga: assertEquals(8, result.getCardinality())
nova chamada: assertEquals(8, result.getCardinality(), "Era esperado valores iguais, mas  8 é diferente de " + result3179 + " <result.getCardinality()>")
chamada antiga: assertEquals(8, result.getCardinality())
nova chamada: assertEquals(8, result.getCardinality(), "Era esperado valores iguais, mas  8 é diferente de " + result3180 + " <result.getCardinality()>")
chamada antiga: assertEquals(2, result.getCardinality())
nova chamada: assertEquals(2, result.getCardinality(), "Era esperado valores iguais, mas  2 é diferente de " + result3181 + " <result.getCardinality()>")
chamada antiga: assertEquals(4, result.getCardinality())
nova chamada: assertEquals(4, result.getCardinality(), "Era esperado valores iguais, mas  4 é diferente de " + result3182 + " <result.getCardinality()>")
chamada antiga: assertEquals(5, result.getCardinality())
nova chamada: assertEquals(5, result.getCardinality(), "Era esperado valores iguais, mas  5 é diferente de " + result3183 + " <result.getCardinality()>")
chamada antiga: assertEquals(4, result.getCardinality())
nova chamada: assertEquals(4, result.getCardinality(), "Era esperado valores iguais, mas  4 é diferente de " + result3184 + " <result.getCardinality()>")
chamada antiga: assertEquals(1, container.rank((char) 0))
nova chamada: assertEquals(1, container.rank((char) 0), "Era esperado valores iguais, mas  1 é diferente de " + result3185 + " <container.rank((char) 0)>")
chamada antiga: assertEquals(2, container.rank((char) 10))
nova chamada: assertEquals(2, container.rank((char) 10), "Era esperado valores iguais, mas  2 é diferente de " + result3186 + " <container.rank((char) 10)>")
chamada antiga: assertEquals(4, container.rank((char) 128))
nova chamada: assertEquals(4, container.rank((char) 128), "Era esperado valores iguais, mas  4 é diferente de " + result3187 + " <container.rank((char) 128)>")
chamada antiga: assertEquals(5, container.rank((char) 1024))
nova chamada: assertEquals(5, container.rank((char) 1024), "Era esperado valores iguais, mas  5 é diferente de " + result3188 + " <container.rank((char) 1024)>")
chamada antiga: assertTrue(container instanceof MappeableRunContainer)
nova chamada: assertTrue(container instanceof MappeableRunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(16, container.rank((char) 32))
nova chamada: assertEquals(16, container.rank((char) 32), "Era esperado valores iguais, mas  16 é diferente de " + result3189 + " <container.rank((char) 32)>")
chamada antiga: assertEquals(0, newContainer.getCardinality())
nova chamada: assertEquals(0, newContainer.getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result3190 + " <newContainer.getCardinality()>")
chamada antiga: assertEquals(0, container.select(0))
nova chamada: assertEquals(0, container.select(0), "Era esperado valores iguais, mas  0 é diferente de " + result3191 + " <container.select(0)>")
chamada antiga: assertEquals(2, container.select(1))
nova chamada: assertEquals(2, container.select(1), "Era esperado valores iguais, mas  2 é diferente de " + result3192 + " <container.select(1)>")
chamada antiga: assertEquals(55, container.select(2))
nova chamada: assertEquals(55, container.select(2), "Era esperado valores iguais, mas  55 é diferente de " + result3193 + " <container.select(2)>")
chamada antiga: assertEquals(64, container.select(3))
nova chamada: assertEquals(64, container.select(3), "Era esperado valores iguais, mas  64 é diferente de " + result3194 + " <container.select(3)>")
chamada antiga: assertEquals(256, container.select(4))
nova chamada: assertEquals(256, container.select(4), "Era esperado valores iguais, mas  256 é diferente de " + result3195 + " <container.select(4)>")
chamada antiga: assertFalse(i.hasNext())
nova chamada: assertFalse(i.hasNext(), "Era esperado falso, mas " + result3196 + " <i.hasNext()> é verdadeiro ")
chamada antiga: assertEquals(answer.getCardinality(), array1.length)
nova chamada: assertEquals(answer.getCardinality(), array1.length, "Era esperado valores iguais, mas " + result3197 + " <answer.getCardinality()> é diferente de " + " array1.length")
chamada antiga: assertEquals(1, setWithOptimize.size())
nova chamada: assertEquals(1, setWithOptimize.size(), "Era esperado valores iguais, mas  1 é diferente de " + result3198 + " <setWithOptimize.size()>")
chamada antiga: assertEquals(1, setWithoutOptimize.size())
nova chamada: assertEquals(1, setWithoutOptimize.size(), "Era esperado valores iguais, mas  1 é diferente de " + result3199 + " <setWithoutOptimize.size()>")
chamada antiga: assertTrue(ac instanceof MappeableArrayContainer)
nova chamada: assertTrue(ac instanceof MappeableArrayContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(DEFAULT_MAX_SIZE / 2, ac.getCardinality())
nova chamada: assertEquals(DEFAULT_MAX_SIZE / 2, ac.getCardinality(), "Era esperado valores iguais, mas  DEFAULT_MAX_SIZE / 2 é diferente de " + result3200 + " <ac.getCardinality()>")
chamada antiga: assertTrue(bc instanceof MappeableBitmapContainer)
nova chamada: assertTrue(bc instanceof MappeableBitmapContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(2 * DEFAULT_MAX_SIZE, bc.getCardinality())
nova chamada: assertEquals(2 * DEFAULT_MAX_SIZE, bc.getCardinality(), "Era esperado valores iguais, mas  2 * DEFAULT_MAX_SIZE é diferente de " + result3201 + " <bc.getCardinality()>")
chamada antiga: assertEquals(200, union.getCardinality())
nova chamada: assertEquals(200, union.getCardinality(), "Era esperado valores iguais, mas  200 é diferente de " + result3202 + " <union.getCardinality()>")
chamada antiga: assertEquals(100, bc.getCardinality())
nova chamada: assertEquals(100, bc.getCardinality(), "Era esperado valores iguais, mas  100 é diferente de " + result3203 + " <bc.getCardinality()>")
chamada antiga: assertEquals(100, rc.getCardinality())
nova chamada: assertEquals(100, rc.getCardinality(), "Era esperado valores iguais, mas  100 é diferente de " + result3204 + " <rc.getCardinality()>")
chamada antiga: assertEquals(2 * N, union.getCardinality())
nova chamada: assertEquals(2 * N, union.getCardinality(), "Era esperado valores iguais, mas  2 * N é diferente de " + result3205 + " <union.getCardinality()>")
chamada antiga: assertEquals(N, ac.getCardinality())
nova chamada: assertEquals(N, ac.getCardinality(), "Era esperado valores iguais, mas  N é diferente de " + result3206 + " <ac.getCardinality()>")
chamada antiga: assertEquals(N, rc.getCardinality())
nova chamada: assertEquals(N, rc.getCardinality(), "Era esperado valores iguais, mas  N é diferente de " + result3207 + " <rc.getCardinality()>")
chamada antiga: assertEquals(4 * DEFAULT_MAX_SIZE, result.getCardinality())
nova chamada: assertEquals(4 * DEFAULT_MAX_SIZE, result.getCardinality(), "Era esperado valores iguais, mas  4 * DEFAULT_MAX_SIZE é diferente de " + result3208 + " <result.getCardinality()>")
chamada antiga: assertEquals(4 * DEFAULT_MAX_SIZE, bc.getCardinality())
nova chamada: assertEquals(4 * DEFAULT_MAX_SIZE, bc.getCardinality(), "Era esperado valores iguais, mas  4 * DEFAULT_MAX_SIZE é diferente de " + result3209 + " <bc.getCardinality()>")
chamada antiga: assertEquals(4 * DEFAULT_MAX_SIZE, rc.getCardinality())
nova chamada: assertEquals(4 * DEFAULT_MAX_SIZE, rc.getCardinality(), "Era esperado valores iguais, mas  4 * DEFAULT_MAX_SIZE é diferente de " + result3210 + " <rc.getCardinality()>")
chamada antiga: assertEquals(4 * DEFAULT_MAX_SIZE, result.getCardinality())
nova chamada: assertEquals(4 * DEFAULT_MAX_SIZE, result.getCardinality(), "Era esperado valores iguais, mas  4 * DEFAULT_MAX_SIZE é diferente de " + result3211 + " <result.getCardinality()>")
chamada antiga: assertEquals(4 * DEFAULT_MAX_SIZE, bc.getCardinality())
nova chamada: assertEquals(4 * DEFAULT_MAX_SIZE, bc.getCardinality(), "Era esperado valores iguais, mas  4 * DEFAULT_MAX_SIZE é diferente de " + result3212 + " <bc.getCardinality()>")
chamada antiga: assertEquals(4 * DEFAULT_MAX_SIZE, rc.getCardinality())
nova chamada: assertEquals(4 * DEFAULT_MAX_SIZE, rc.getCardinality(), "Era esperado valores iguais, mas  4 * DEFAULT_MAX_SIZE é diferente de " + result3213 + " <rc.getCardinality()>")
chamada antiga: assertEquals(1, result.getCardinality())
nova chamada: assertEquals(1, result.getCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result3214 + " <result.getCardinality()>")
chamada antiga: assertTrue(result.contains((char) 1))
nova chamada: assertTrue(result.contains((char) 1), "Era esperado verdadeiro, mas " + result3215 + " <result.contains((char) 1)> é falso")
chamada antiga: assertEquals(1, result.getCardinality())
nova chamada: assertEquals(1, result.getCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result3216 + " <result.getCardinality()>")
chamada antiga: assertTrue(result.contains((char) 1))
nova chamada: assertTrue(result.contains((char) 1), "Era esperado verdadeiro, mas " + result3217 + " <result.contains((char) 1)> é falso")
chamada antiga: assertEquals(1, result.getCardinality())
nova chamada: assertEquals(1, result.getCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result3218 + " <result.getCardinality()>")
chamada antiga: assertTrue(result.contains((char) 1))
nova chamada: assertTrue(result.contains((char) 1), "Era esperado verdadeiro, mas " + result3219 + " <result.contains((char) 1)> é falso")
chamada antiga: assertEquals(1, result.getCardinality())
nova chamada: assertEquals(1, result.getCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result3220 + " <result.getCardinality()>")
chamada antiga: assertTrue(result.contains((char) 1))
nova chamada: assertTrue(result.contains((char) 1), "Era esperado verdadeiro, mas " + result3221 + " <result.contains((char) 1)> é falso")
chamada antiga: assertEquals(0, result.getCardinality())
nova chamada: assertEquals(0, result.getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result3222 + " <result.getCardinality()>")
chamada antiga: assertEquals(0, result.getCardinality())
nova chamada: assertEquals(0, result.getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result3223 + " <result.getCardinality()>")
chamada antiga: assertEquals(answer, result)
nova chamada: assertEquals(answer, result, "Era esperado valores iguais, mas  answer é diferente de " + " result")
chamada antiga: assertEquals(1, rc.getCardinality())
nova chamada: assertEquals(1, rc.getCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result3224 + " <rc.getCardinality()>")
chamada antiga: assertEquals(13, rc.getCardinality())
nova chamada: assertEquals(13, rc.getCardinality(), "Era esperado valores iguais, mas  13 é diferente de " + result3225 + " <rc.getCardinality()>")
chamada antiga: assertEquals(1 << 16, rc.getCardinality())
nova chamada: assertEquals(1 << 16, rc.getCardinality(), "Era esperado valores iguais, mas  1  16 é diferente de " + result3226 + " <rc.getCardinality()>")
chamada antiga: assertEquals(1, rc.getCardinality())
nova chamada: assertEquals(1, rc.getCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result3227 + " <rc.getCardinality()>")
chamada antiga: assertEquals(1 << 16, rc.getCardinality())
nova chamada: assertEquals(1 << 16, rc.getCardinality(), "Era esperado valores iguais, mas  1  16 é diferente de " + result3228 + " <rc.getCardinality()>")
chamada antiga: assertEquals(1, rc1.getCardinality())
nova chamada: assertEquals(1, rc1.getCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result3229 + " <rc1.getCardinality()>")
chamada antiga: assertEquals(13, rc1.getCardinality())
nova chamada: assertEquals(13, rc1.getCardinality(), "Era esperado valores iguais, mas  13 é diferente de " + result3230 + " <rc1.getCardinality()>")
chamada antiga: assertEquals(1 << 16, rc1.getCardinality())
nova chamada: assertEquals(1 << 16, rc1.getCardinality(), "Era esperado valores iguais, mas  1  16 é diferente de " + result3231 + " <rc1.getCardinality()>")
chamada antiga: assertFalse(rc1.intersects(rc2))
nova chamada: assertFalse(rc1.intersects(rc2), "Era esperado falso, mas " + result3232 + " <rc1.intersects(rc2)> é verdadeiro ")
chamada antiga: assertFalse(rc1.intersects(rc2))
nova chamada: assertFalse(rc1.intersects(rc2), "Era esperado falso, mas " + result3233 + " <rc1.intersects(rc2)> é verdadeiro ")
chamada antiga: assertFalse(rc2.intersects(rc1))
nova chamada: assertFalse(rc2.intersects(rc1), "Era esperado falso, mas " + result3234 + " <rc2.intersects(rc1)> é verdadeiro ")
chamada antiga: assertTrue(rc1.intersects(rc2))
nova chamada: assertTrue(rc1.intersects(rc2), "Era esperado verdadeiro, mas " + result3235 + " <rc1.intersects(rc2)> é falso")
chamada antiga: assertFalse(rc.intersects(ac))
nova chamada: assertFalse(rc.intersects(ac), "Era esperado falso, mas " + result3236 + " <rc.intersects(ac)> é verdadeiro ")
chamada antiga: assertFalse(rc.intersects(ac))
nova chamada: assertFalse(rc.intersects(ac), "Era esperado falso, mas " + result3237 + " <rc.intersects(ac)> é verdadeiro ")
chamada antiga: assertTrue(rc.intersects(ac))
nova chamada: assertTrue(rc.intersects(ac), "Era esperado verdadeiro, mas " + result3238 + " <rc.intersects(ac)> é falso")
chamada antiga: assertEquals(roaringWithRun.first(), 32768)
nova chamada: assertEquals(roaringWithRun.first(), 32768, "Era esperado valores iguais, mas " + result3239 + " <roaringWithRun.first()> é diferente de " + " 32768")
chamada antiga: assertTrue(rc.contains(subset))
nova chamada: assertTrue(rc.contains(subset), "Era esperado verdadeiro, mas " + result3240 + " <rc.contains(subset)> é falso")
chamada antiga: assertTrue(rc.contains(subset))
nova chamada: assertTrue(rc.contains(subset), "Era esperado verdadeiro, mas " + result3241 + " <rc.contains(subset)> é falso")
chamada antiga: assertTrue(rc.contains(subset))
nova chamada: assertTrue(rc.contains(subset), "Era esperado verdadeiro, mas " + result3242 + " <rc.contains(subset)> é falso")
chamada antiga: assertFalse(rc.contains(subset))
nova chamada: assertFalse(rc.contains(subset), "Era esperado falso, mas " + result3243 + " <rc.contains(subset)> é verdadeiro ")
chamada antiga: assertTrue(rc.contains(subset))
nova chamada: assertTrue(rc.contains(subset), "Era esperado verdadeiro, mas " + result3244 + " <rc.contains(subset)> é falso")
chamada antiga: assertFalse(rc.contains(superset))
nova chamada: assertFalse(rc.contains(superset), "Era esperado falso, mas " + result3245 + " <rc.contains(superset)> é verdadeiro ")
chamada antiga: assertFalse(rc.contains(disjoint))
nova chamada: assertFalse(rc.contains(disjoint), "Era esperado falso, mas " + result3246 + " <rc.contains(disjoint)> é verdadeiro ")
chamada antiga: assertFalse(disjoint.contains(rc))
nova chamada: assertFalse(disjoint.contains(rc), "Era esperado falso, mas " + result3247 + " <disjoint.contains(rc)> é verdadeiro ")
chamada antiga: assertTrue(rc.contains(subset))
nova chamada: assertTrue(rc.contains(subset), "Era esperado verdadeiro, mas " + result3248 + " <rc.contains(subset)> é falso")
chamada antiga: assertTrue(rc.contains(subset))
nova chamada: assertTrue(rc.contains(subset), "Era esperado verdadeiro, mas " + result3249 + " <rc.contains(subset)> é falso")
chamada antiga: assertTrue(rc.contains(subset))
nova chamada: assertTrue(rc.contains(subset), "Era esperado verdadeiro, mas " + result3250 + " <rc.contains(subset)> é falso")
chamada antiga: assertFalse(rc.contains(superset))
nova chamada: assertFalse(rc.contains(superset), "Era esperado falso, mas " + result3251 + " <rc.contains(superset)> é verdadeiro ")
chamada antiga: assertTrue(rc.contains(subset))
nova chamada: assertTrue(rc.contains(subset), "Era esperado verdadeiro, mas " + result3252 + " <rc.contains(subset)> é falso")
chamada antiga: assertFalse(rc.contains(subset))
nova chamada: assertFalse(rc.contains(subset), "Era esperado falso, mas " + result3253 + " <rc.contains(subset)> é verdadeiro ")
chamada antiga: assertFalse(rc.contains(disjoint))
nova chamada: assertFalse(rc.contains(disjoint), "Era esperado falso, mas " + result3254 + " <rc.contains(disjoint)> é verdadeiro ")
chamada antiga: assertFalse(disjoint.contains(rc))
nova chamada: assertFalse(disjoint.contains(rc), "Era esperado falso, mas " + result3255 + " <disjoint.contains(rc)> é verdadeiro ")
chamada antiga: assertTrue(rc.contains(subset))
nova chamada: assertTrue(rc.contains(subset), "Era esperado verdadeiro, mas " + result3256 + " <rc.contains(subset)> é falso")
chamada antiga: assertTrue(rc.contains(subset))
nova chamada: assertTrue(rc.contains(subset), "Era esperado verdadeiro, mas " + result3257 + " <rc.contains(subset)> é falso")
chamada antiga: assertTrue(rc.contains(subset))
nova chamada: assertTrue(rc.contains(subset), "Era esperado verdadeiro, mas " + result3258 + " <rc.contains(subset)> é falso")
chamada antiga: assertFalse(rc.contains(shifted))
nova chamada: assertFalse(rc.contains(shifted), "Era esperado falso, mas " + result3259 + " <rc.contains(shifted)> é verdadeiro ")
chamada antiga: assertTrue(rc.contains(subset))
nova chamada: assertTrue(rc.contains(subset), "Era esperado verdadeiro, mas " + result3260 + " <rc.contains(subset)> é falso")
chamada antiga: assertFalse(rc.contains(superset))
nova chamada: assertFalse(rc.contains(superset), "Era esperado falso, mas " + result3261 + " <rc.contains(superset)> é verdadeiro ")
chamada antiga: assertFalse(rc.contains(disjoint))
nova chamada: assertFalse(rc.contains(disjoint), "Era esperado falso, mas " + result3262 + " <rc.contains(disjoint)> é verdadeiro ")
chamada antiga: assertFalse(disjoint.contains(rc))
nova chamada: assertFalse(disjoint.contains(rc), "Era esperado falso, mas " + result3263 + " <disjoint.contains(rc)> é verdadeiro ")
chamada antiga: assertEquals(rc, ac)
nova chamada: assertEquals(rc, ac, "Era esperado valores iguais, mas  rc é diferente de " + " ac")
chamada antiga: assertEquals(ac, rc)
nova chamada: assertEquals(ac, rc, "Era esperado valores iguais, mas  ac é diferente de " + " rc")
chamada antiga: assertNotEquals(rc, ac)
nova chamada: assertNotEquals(rc, ac, "Era esperado valores diferentes, mas  rc é igual a " + " ac")
chamada antiga: assertNotEquals(ac, rc)
nova chamada: assertNotEquals(ac, rc, "Era esperado valores diferentes, mas  ac é igual a " + " rc")
chamada antiga: assertNotEquals(rc, ac)
nova chamada: assertNotEquals(rc, ac, "Era esperado valores diferentes, mas  rc é igual a " + " ac")
chamada antiga: assertNotEquals(ac, rc)
nova chamada: assertNotEquals(ac, rc, "Era esperado valores diferentes, mas  ac é igual a " + " rc")
chamada antiga: assertNotEquals(rc, ac)
nova chamada: assertNotEquals(rc, ac, "Era esperado valores diferentes, mas  rc é igual a " + " ac")
chamada antiga: assertNotEquals(ac, rc)
nova chamada: assertNotEquals(ac, rc, "Era esperado valores diferentes, mas  ac é igual a " + " rc")
chamada antiga: assertNotEquals(rc, ac)
nova chamada: assertNotEquals(rc, ac, "Era esperado valores diferentes, mas  rc é igual a " + " ac")
chamada antiga: assertNotEquals(ac, rc)
nova chamada: assertNotEquals(ac, rc, "Era esperado valores diferentes, mas  ac é igual a " + " rc")
chamada antiga: assertNotEquals(full, new MappeableArrayContainer().add(0, 10))
nova chamada: assertNotEquals(full, new MappeableArrayContainer().add(0, 10), "Era esperado valores diferentes, mas  full é igual a " + result3264 + " <new MappeableArrayContainer().add(0, 10)>")
chamada antiga: assertTrue(MappeableRunContainer.full().isFull())
nova chamada: assertTrue(MappeableRunContainer.full().isFull(), "Era esperado verdadeiro, mas " + result3265 + " <MappeableRunContainer.full().isFull()> é falso")
chamada antiga: assertTrue(full.isFull())
nova chamada: assertTrue(full.isFull(), "Era esperado verdadeiro, mas " + result3266 + " <full.isFull()> é falso")
chamada antiga: assertEquals(65536, full.getCardinality())
nova chamada: assertEquals(65536, full.getCardinality(), "Era esperado valores iguais, mas  65536 é diferente de " + result3267 + " <full.getCardinality()>")
chamada antiga: assertEquals(983, c.getCardinality())
nova chamada: assertEquals(983, c.getCardinality(), "Era esperado valores iguais, mas  983 é diferente de " + result3268 + " <c.getCardinality()>")
chamada antiga: assertEquals(a, b)
nova chamada: assertEquals(a, b, "Era esperado valores iguais, mas  a é diferente de " + " b")
chamada antiga: assertEquals(45679, c.getCardinality())
nova chamada: assertEquals(45679, c.getCardinality(), "Era esperado valores iguais, mas  45679 é diferente de " + result3269 + " <c.getCardinality()>")
chamada antiga: assertEquals(2, c.getCardinality())
nova chamada: assertEquals(2, c.getCardinality(), "Era esperado valores iguais, mas  2 é diferente de " + result3270 + " <c.getCardinality()>")
chamada antiga: assertTrue(container.intersects(0, 1))
nova chamada: assertTrue(container.intersects(0, 1), "Era esperado verdadeiro, mas " + result3271 + " <container.intersects(0, 1)> é falso")
chamada antiga: assertTrue(container.intersects(0, 101))
nova chamada: assertTrue(container.intersects(0, 101), "Era esperado verdadeiro, mas " + result3272 + " <container.intersects(0, 101)> é falso")
chamada antiga: assertTrue(container.intersects(0, 1 << 16))
nova chamada: assertTrue(container.intersects(0, 1 << 16), "Era esperado verdadeiro, mas " + result3273 + " <container.intersects(0, 1 << 16)> é falso")
chamada antiga: assertFalse(container.intersects(11, 1 << 16))
nova chamada: assertFalse(container.intersects(11, 1 << 16), "Era esperado falso, mas " + result3274 + " <container.intersects(11, 1 << 16)> é verdadeiro ")
chamada antiga: assertFalse(container.intersects(0, 1))
nova chamada: assertFalse(container.intersects(0, 1), "Era esperado falso, mas " + result3275 + " <container.intersects(0, 1)> é verdadeiro ")
chamada antiga: assertTrue(container.intersects(0, lower16Bits(-40)))
nova chamada: assertTrue(container.intersects(0, lower16Bits(-40)), "Era esperado verdadeiro, mas " + result3276 + " <container.intersects(0, lower16Bits(-40))> é falso")
chamada antiga: assertFalse(container.intersects(lower16Bits(-100), lower16Bits(-55)))
nova chamada: assertFalse(container.intersects(lower16Bits(-100), lower16Bits(-55)), "Era esperado falso, mas " + result3277 + " <container.intersects(lower16Bits(-100), lower16Bits(-55))> é verdadeiro ")
chamada antiga: assertTrue(container.intersects(11, 1 << 16))
nova chamada: assertTrue(container.intersects(11, 1 << 16), "Era esperado verdadeiro, mas " + result3278 + " <container.intersects(11, 1 << 16)> é falso")
chamada antiga: assertTrue(container.intersects(0, 1))
nova chamada: assertTrue(container.intersects(0, 1), "Era esperado verdadeiro, mas " + result3279 + " <container.intersects(0, 1)> é falso")
chamada antiga: assertTrue(container.intersects(0, 101))
nova chamada: assertTrue(container.intersects(0, 101), "Era esperado verdadeiro, mas " + result3280 + " <container.intersects(0, 101)> é falso")
chamada antiga: assertTrue(container.intersects(0, lower16Bits(-1)))
nova chamada: assertTrue(container.intersects(0, lower16Bits(-1)), "Era esperado verdadeiro, mas " + result3281 + " <container.intersects(0, lower16Bits(-1))> é falso")
chamada antiga: assertTrue(container.intersects(11, lower16Bits(-1)))
nova chamada: assertTrue(container.intersects(11, lower16Bits(-1)), "Era esperado verdadeiro, mas " + result3282 + " <container.intersects(11, lower16Bits(-1))> é falso")
chamada antiga: assertTrue(container.intersects(0, lower16Bits(-40)))
nova chamada: assertTrue(container.intersects(0, lower16Bits(-40)), "Era esperado verdadeiro, mas " + result3283 + " <container.intersects(0, lower16Bits(-40))> é falso")
chamada antiga: assertFalse(container.intersects(lower16Bits(-100), lower16Bits(-55)))
nova chamada: assertFalse(container.intersects(lower16Bits(-100), lower16Bits(-55)), "Era esperado falso, mas " + result3284 + " <container.intersects(lower16Bits(-100), lower16Bits(-55))> é verdadeiro ")
chamada antiga: assertFalse(container.intersects(lower16Bits(-9), lower16Bits(-1)))
nova chamada: assertFalse(container.intersects(lower16Bits(-9), lower16Bits(-1)), "Era esperado falso, mas " + result3285 + " <container.intersects(lower16Bits(-9), lower16Bits(-1))> é verdadeiro ")
chamada antiga: assertTrue(container.intersects(11, 1 << 16))
nova chamada: assertTrue(container.intersects(11, 1 << 16), "Era esperado verdadeiro, mas " + result3286 + " <container.intersects(11, 1 << 16)> é falso")
chamada antiga: assertTrue(MappeableRunContainer.full().contains(0, 1 << 16))
nova chamada: assertTrue(MappeableRunContainer.full().contains(0, 1 << 16), "Era esperado verdadeiro, mas " + result3287 + " <MappeableRunContainer.full().contains(0, 1 << 16)> é falso")
chamada antiga: assertFalse(MappeableRunContainer.full().flip((char) (1 << 15)).contains(0, 1 << 16))
nova chamada: assertFalse(MappeableRunContainer.full().flip((char) (1 << 15)).contains(0, 1 << 16), "Era esperado falso, mas " + result3288 + " <MappeableRunContainer.full().flip((char) (1 << 15)).contains(0, 1 << 16)> é verdadeiro ")
chamada antiga: assertFalse(rc.contains(0, 100))
nova chamada: assertFalse(rc.contains(0, 100), "Era esperado falso, mas " + result3289 + " <rc.contains(0, 100)> é verdadeiro ")
chamada antiga: assertFalse(rc.contains(0, 100000))
nova chamada: assertFalse(rc.contains(0, 100000), "Era esperado falso, mas " + result3290 + " <rc.contains(0, 100000)> é verdadeiro ")
chamada antiga: assertTrue(rc.contains(1, 100))
nova chamada: assertTrue(rc.contains(1, 100), "Era esperado verdadeiro, mas " + result3291 + " <rc.contains(1, 100)> é falso")
chamada antiga: assertTrue(rc.contains(1, 99))
nova chamada: assertTrue(rc.contains(1, 99), "Era esperado verdadeiro, mas " + result3292 + " <rc.contains(1, 99)> é falso")
chamada antiga: assertTrue(rc.contains(2, 100))
nova chamada: assertTrue(rc.contains(2, 100), "Era esperado verdadeiro, mas " + result3293 + " <rc.contains(2, 100)> é falso")
chamada antiga: assertTrue(rc.contains(5000, 10000))
nova chamada: assertTrue(rc.contains(5000, 10000), "Era esperado verdadeiro, mas " + result3294 + " <rc.contains(5000, 10000)> é falso")
chamada antiga: assertTrue(rc.contains(5000, 9999))
nova chamada: assertTrue(rc.contains(5000, 9999), "Era esperado verdadeiro, mas " + result3295 + " <rc.contains(5000, 9999)> é falso")
chamada antiga: assertTrue(rc.contains(5001, 9999))
nova chamada: assertTrue(rc.contains(5001, 9999), "Era esperado verdadeiro, mas " + result3296 + " <rc.contains(5001, 9999)> é falso")
chamada antiga: assertTrue(rc.contains(5001, 10000))
nova chamada: assertTrue(rc.contains(5001, 10000), "Era esperado verdadeiro, mas " + result3297 + " <rc.contains(5001, 10000)> é falso")
chamada antiga: assertFalse(rc.contains(100, 5000))
nova chamada: assertFalse(rc.contains(100, 5000), "Era esperado falso, mas " + result3298 + " <rc.contains(100, 5000)> é verdadeiro ")
chamada antiga: assertFalse(rc.contains(50, 5000))
nova chamada: assertFalse(rc.contains(50, 5000), "Era esperado falso, mas " + result3299 + " <rc.contains(50, 5000)> é verdadeiro ")
chamada antiga: assertFalse(rc.contains(4000, 6000))
nova chamada: assertFalse(rc.contains(4000, 6000), "Era esperado falso, mas " + result3300 + " <rc.contains(4000, 6000)> é verdadeiro ")
chamada antiga: assertFalse(rc.contains(10001, 20000))
nova chamada: assertFalse(rc.contains(10001, 20000), "Era esperado falso, mas " + result3301 + " <rc.contains(10001, 20000)> é verdadeiro ")
chamada antiga: assertFalse(rc.contains(0, 100))
nova chamada: assertFalse(rc.contains(0, 100), "Era esperado falso, mas " + result3302 + " <rc.contains(0, 100)> é verdadeiro ")
chamada antiga: assertFalse(rc.contains(0, 100000))
nova chamada: assertFalse(rc.contains(0, 100000), "Era esperado falso, mas " + result3303 + " <rc.contains(0, 100000)> é verdadeiro ")
chamada antiga: assertTrue(rc.contains(1, 100))
nova chamada: assertTrue(rc.contains(1, 100), "Era esperado verdadeiro, mas " + result3304 + " <rc.contains(1, 100)> é falso")
chamada antiga: assertTrue(rc.contains(1, 99))
nova chamada: assertTrue(rc.contains(1, 99), "Era esperado verdadeiro, mas " + result3305 + " <rc.contains(1, 99)> é falso")
chamada antiga: assertTrue(rc.contains(300, 400))
nova chamada: assertTrue(rc.contains(300, 400), "Era esperado verdadeiro, mas " + result3306 + " <rc.contains(300, 400)> é falso")
chamada antiga: assertTrue(rc.contains(2, 100))
nova chamada: assertTrue(rc.contains(2, 100), "Era esperado verdadeiro, mas " + result3307 + " <rc.contains(2, 100)> é falso")
chamada antiga: assertTrue(rc.contains(5000, 10000))
nova chamada: assertTrue(rc.contains(5000, 10000), "Era esperado verdadeiro, mas " + result3308 + " <rc.contains(5000, 10000)> é falso")
chamada antiga: assertTrue(rc.contains(5000, 9999))
nova chamada: assertTrue(rc.contains(5000, 9999), "Era esperado verdadeiro, mas " + result3309 + " <rc.contains(5000, 9999)> é falso")
chamada antiga: assertTrue(rc.contains(5001, 9999))
nova chamada: assertTrue(rc.contains(5001, 9999), "Era esperado verdadeiro, mas " + result3310 + " <rc.contains(5001, 9999)> é falso")
chamada antiga: assertTrue(rc.contains(5001, 10000))
nova chamada: assertTrue(rc.contains(5001, 10000), "Era esperado verdadeiro, mas " + result3311 + " <rc.contains(5001, 10000)> é falso")
chamada antiga: assertFalse(rc.contains(100, 5000))
nova chamada: assertFalse(rc.contains(100, 5000), "Era esperado falso, mas " + result3312 + " <rc.contains(100, 5000)> é verdadeiro ")
chamada antiga: assertFalse(rc.contains(50, 5000))
nova chamada: assertFalse(rc.contains(50, 5000), "Era esperado falso, mas " + result3313 + " <rc.contains(50, 5000)> é verdadeiro ")
chamada antiga: assertFalse(rc.contains(4000, 6000))
nova chamada: assertFalse(rc.contains(4000, 6000), "Era esperado falso, mas " + result3314 + " <rc.contains(4000, 6000)> é verdadeiro ")
chamada antiga: assertFalse(rc.contains(10001, 20000))
nova chamada: assertFalse(rc.contains(10001, 20000), "Era esperado falso, mas " + result3315 + " <rc.contains(10001, 20000)> é verdadeiro ")
chamada antiga: assertFalse(rc.contains(0, 100))
nova chamada: assertFalse(rc.contains(0, 100), "Era esperado falso, mas " + result3316 + " <rc.contains(0, 100)> é verdadeiro ")
chamada antiga: assertFalse(rc.contains(500, 600))
nova chamada: assertFalse(rc.contains(500, 600), "Era esperado falso, mas " + result3317 + " <rc.contains(500, 600)> é verdadeiro ")
chamada antiga: assertFalse(rc.contains(501, 600))
nova chamada: assertFalse(rc.contains(501, 600), "Era esperado falso, mas " + result3318 + " <rc.contains(501, 600)> é verdadeiro ")
chamada antiga: assertTrue(rc.contains(502, 600))
nova chamada: assertTrue(rc.contains(502, 600), "Era esperado verdadeiro, mas " + result3319 + " <rc.contains(502, 600)> é falso")
chamada antiga: assertFalse(rc.contains(600, 700))
nova chamada: assertFalse(rc.contains(600, 700), "Era esperado falso, mas " + result3320 + " <rc.contains(600, 700)> é verdadeiro ")
chamada antiga: assertTrue(rc.contains(9999, 10000))
nova chamada: assertTrue(rc.contains(9999, 10000), "Era esperado verdadeiro, mas " + result3321 + " <rc.contains(9999, 10000)> é falso")
chamada antiga: assertFalse(rc.contains(9999, 10001))
nova chamada: assertFalse(rc.contains(9999, 10001), "Era esperado falso, mas " + result3322 + " <rc.contains(9999, 10001)> é verdadeiro ")
chamada antiga: assertEquals(64, container.nextValue((char) 0))
nova chamada: assertEquals(64, container.nextValue((char) 0), "Era esperado valores iguais, mas  64 é diferente de " + result3323 + " <container.nextValue((char) 0)>")
chamada antiga: assertEquals(64, container.nextValue((char) 64))
nova chamada: assertEquals(64, container.nextValue((char) 64), "Era esperado valores iguais, mas  64 é diferente de " + result3324 + " <container.nextValue((char) 64)>")
chamada antiga: assertEquals(65, container.nextValue((char) 65))
nova chamada: assertEquals(65, container.nextValue((char) 65), "Era esperado valores iguais, mas  65 é diferente de " + result3325 + " <container.nextValue((char) 65)>")
chamada antiga: assertEquals(128, container.nextValue((char) 128))
nova chamada: assertEquals(128, container.nextValue((char) 128), "Era esperado valores iguais, mas  128 é diferente de " + result3326 + " <container.nextValue((char) 128)>")
chamada antiga: assertEquals(-1, container.nextValue((char) 129))
nova chamada: assertEquals(-1, container.nextValue((char) 129), "Era esperado valores iguais, mas  -1 é diferente de " + result3327 + " <container.nextValue((char) 129)>")
chamada antiga: assertEquals(64, container.nextValue((char) 0))
nova chamada: assertEquals(64, container.nextValue((char) 0), "Era esperado valores iguais, mas  64 é diferente de " + result3328 + " <container.nextValue((char) 0)>")
chamada antiga: assertEquals(64, container.nextValue((char) 64))
nova chamada: assertEquals(64, container.nextValue((char) 64), "Era esperado valores iguais, mas  64 é diferente de " + result3329 + " <container.nextValue((char) 64)>")
chamada antiga: assertEquals(65, container.nextValue((char) 65))
nova chamada: assertEquals(65, container.nextValue((char) 65), "Era esperado valores iguais, mas  65 é diferente de " + result3330 + " <container.nextValue((char) 65)>")
chamada antiga: assertEquals(128, container.nextValue((char) 128))
nova chamada: assertEquals(128, container.nextValue((char) 128), "Era esperado valores iguais, mas  128 é diferente de " + result3331 + " <container.nextValue((char) 128)>")
chamada antiga: assertEquals(256, container.nextValue((char) 129))
nova chamada: assertEquals(256, container.nextValue((char) 129), "Era esperado valores iguais, mas  256 é diferente de " + result3332 + " <container.nextValue((char) 129)>")
chamada antiga: assertEquals(-1, container.nextValue((char) 512))
nova chamada: assertEquals(-1, container.nextValue((char) 512), "Era esperado valores iguais, mas  -1 é diferente de " + result3333 + " <container.nextValue((char) 512)>")
chamada antiga: assertEquals(64, container.nextValue((char) 0))
nova chamada: assertEquals(64, container.nextValue((char) 0), "Era esperado valores iguais, mas  64 é diferente de " + result3334 + " <container.nextValue((char) 0)>")
chamada antiga: assertEquals(64, container.nextValue((char) 63))
nova chamada: assertEquals(64, container.nextValue((char) 63), "Era esperado valores iguais, mas  64 é diferente de " + result3335 + " <container.nextValue((char) 63)>")
chamada antiga: assertEquals(64, container.nextValue((char) 64))
nova chamada: assertEquals(64, container.nextValue((char) 64), "Era esperado valores iguais, mas  64 é diferente de " + result3336 + " <container.nextValue((char) 64)>")
chamada antiga: assertEquals(65, container.nextValue((char) 65))
nova chamada: assertEquals(65, container.nextValue((char) 65), "Era esperado valores iguais, mas  65 é diferente de " + result3337 + " <container.nextValue((char) 65)>")
chamada antiga: assertEquals(128, container.nextValue((char) 128))
nova chamada: assertEquals(128, container.nextValue((char) 128), "Era esperado valores iguais, mas  128 é diferente de " + result3338 + " <container.nextValue((char) 128)>")
chamada antiga: assertEquals(200, container.nextValue((char) 129))
nova chamada: assertEquals(200, container.nextValue((char) 129), "Era esperado valores iguais, mas  200 é diferente de " + result3339 + " <container.nextValue((char) 129)>")
chamada antiga: assertEquals(200, container.nextValue((char) 199))
nova chamada: assertEquals(200, container.nextValue((char) 199), "Era esperado valores iguais, mas  200 é diferente de " + result3340 + " <container.nextValue((char) 199)>")
chamada antiga: assertEquals(200, container.nextValue((char) 200))
nova chamada: assertEquals(200, container.nextValue((char) 200), "Era esperado valores iguais, mas  200 é diferente de " + result3341 + " <container.nextValue((char) 200)>")
chamada antiga: assertEquals(250, container.nextValue((char) 250))
nova chamada: assertEquals(250, container.nextValue((char) 250), "Era esperado valores iguais, mas  250 é diferente de " + result3342 + " <container.nextValue((char) 250)>")
chamada antiga: assertEquals(5000, container.nextValue((char) 2500))
nova chamada: assertEquals(5000, container.nextValue((char) 2500), "Era esperado valores iguais, mas  5000 é diferente de " + result3343 + " <container.nextValue((char) 2500)>")
chamada antiga: assertEquals(5000, container.nextValue((char) 5000))
nova chamada: assertEquals(5000, container.nextValue((char) 5000), "Era esperado valores iguais, mas  5000 é diferente de " + result3344 + " <container.nextValue((char) 5000)>")
chamada antiga: assertEquals(5200, container.nextValue((char) 5200))
nova chamada: assertEquals(5200, container.nextValue((char) 5200), "Era esperado valores iguais, mas  5200 é diferente de " + result3345 + " <container.nextValue((char) 5200)>")
chamada antiga: assertEquals(-1, container.nextValue((char) 5201))
nova chamada: assertEquals(-1, container.nextValue((char) 5201), "Era esperado valores iguais, mas  -1 é diferente de " + result3346 + " <container.nextValue((char) 5201)>")
chamada antiga: assertEquals(-1, container.previousValue((char) 0))
nova chamada: assertEquals(-1, container.previousValue((char) 0), "Era esperado valores iguais, mas  -1 é diferente de " + result3347 + " <container.previousValue((char) 0)>")
chamada antiga: assertEquals(-1, container.previousValue((char) 63))
nova chamada: assertEquals(-1, container.previousValue((char) 63), "Era esperado valores iguais, mas  -1 é diferente de " + result3348 + " <container.previousValue((char) 63)>")
chamada antiga: assertEquals(64, container.previousValue((char) 64))
nova chamada: assertEquals(64, container.previousValue((char) 64), "Era esperado valores iguais, mas  64 é diferente de " + result3349 + " <container.previousValue((char) 64)>")
chamada antiga: assertEquals(65, container.previousValue((char) 65))
nova chamada: assertEquals(65, container.previousValue((char) 65), "Era esperado valores iguais, mas  65 é diferente de " + result3350 + " <container.previousValue((char) 65)>")
chamada antiga: assertEquals(128, container.previousValue((char) 128))
nova chamada: assertEquals(128, container.previousValue((char) 128), "Era esperado valores iguais, mas  128 é diferente de " + result3351 + " <container.previousValue((char) 128)>")
chamada antiga: assertEquals(128, container.previousValue((char) 129))
nova chamada: assertEquals(128, container.previousValue((char) 129), "Era esperado valores iguais, mas  128 é diferente de " + result3352 + " <container.previousValue((char) 129)>")
chamada antiga: assertEquals(-1, container.previousValue((char) 0))
nova chamada: assertEquals(-1, container.previousValue((char) 0), "Era esperado valores iguais, mas  -1 é diferente de " + result3353 + " <container.previousValue((char) 0)>")
chamada antiga: assertEquals(-1, container.previousValue((char) 63))
nova chamada: assertEquals(-1, container.previousValue((char) 63), "Era esperado valores iguais, mas  -1 é diferente de " + result3354 + " <container.previousValue((char) 63)>")
chamada antiga: assertEquals(64, container.previousValue((char) 64))
nova chamada: assertEquals(64, container.previousValue((char) 64), "Era esperado valores iguais, mas  64 é diferente de " + result3355 + " <container.previousValue((char) 64)>")
chamada antiga: assertEquals(65, container.previousValue((char) 65))
nova chamada: assertEquals(65, container.previousValue((char) 65), "Era esperado valores iguais, mas  65 é diferente de " + result3356 + " <container.previousValue((char) 65)>")
chamada antiga: assertEquals(128, container.previousValue((char) 128))
nova chamada: assertEquals(128, container.previousValue((char) 128), "Era esperado valores iguais, mas  128 é diferente de " + result3357 + " <container.previousValue((char) 128)>")
chamada antiga: assertEquals(128, container.previousValue((char) 129))
nova chamada: assertEquals(128, container.previousValue((char) 129), "Era esperado valores iguais, mas  128 é diferente de " + result3358 + " <container.previousValue((char) 129)>")
chamada antiga: assertEquals(128, container.previousValue((char) 199))
nova chamada: assertEquals(128, container.previousValue((char) 199), "Era esperado valores iguais, mas  128 é diferente de " + result3359 + " <container.previousValue((char) 199)>")
chamada antiga: assertEquals(200, container.previousValue((char) 200))
nova chamada: assertEquals(200, container.previousValue((char) 200), "Era esperado valores iguais, mas  200 é diferente de " + result3360 + " <container.previousValue((char) 200)>")
chamada antiga: assertEquals(250, container.previousValue((char) 250))
nova chamada: assertEquals(250, container.previousValue((char) 250), "Era esperado valores iguais, mas  250 é diferente de " + result3361 + " <container.previousValue((char) 250)>")
chamada antiga: assertEquals(500, container.previousValue((char) 2500))
nova chamada: assertEquals(500, container.previousValue((char) 2500), "Era esperado valores iguais, mas  500 é diferente de " + result3362 + " <container.previousValue((char) 2500)>")
chamada antiga: assertEquals(5000, container.previousValue((char) 5000))
nova chamada: assertEquals(5000, container.previousValue((char) 5000), "Era esperado valores iguais, mas  5000 é diferente de " + result3363 + " <container.previousValue((char) 5000)>")
chamada antiga: assertEquals(5200, container.previousValue((char) 5200))
nova chamada: assertEquals(5200, container.previousValue((char) 5200), "Era esperado valores iguais, mas  5200 é diferente de " + result3364 + " <container.previousValue((char) 5200)>")
chamada antiga: assertEquals(-1, container.previousValue((char) ((1 << 15) | 4)))
nova chamada: assertEquals(-1, container.previousValue((char) ((1 << 15) | 4)), "Era esperado valores iguais, mas  -1 é diferente de " + result3365 + " <container.previousValue((char) ((1 << 15) | 4))>")
chamada antiga: assertEquals(((1 << 15) | 5), container.previousValue((char) ((1 << 15) | 5)))
nova chamada: assertEquals(((1 << 15) | 5), container.previousValue((char) ((1 << 15) | 5)), "Era esperado valores iguais, mas  ((1  15) | 5) é diferente de " + result3366 + " <container.previousValue((char) ((1 << 15) | 5))>")
chamada antiga: assertEquals(((1 << 15) | 5), container.previousValue((char) ((1 << 15) | 6)))
nova chamada: assertEquals(((1 << 15) | 5), container.previousValue((char) ((1 << 15) | 6)), "Era esperado valores iguais, mas  ((1  15) | 5) é diferente de " + result3367 + " <container.previousValue((char) ((1 << 15) | 6))>")
chamada antiga: assertEquals(((1 << 15) | 7), container.previousValue((char) ((1 << 15) | 7)))
nova chamada: assertEquals(((1 << 15) | 7), container.previousValue((char) ((1 << 15) | 7)), "Era esperado valores iguais, mas  ((1  15) | 7) é diferente de " + result3368 + " <container.previousValue((char) ((1 << 15) | 7))>")
chamada antiga: assertEquals(((1 << 15) | 7), container.previousValue((char) ((1 << 15) | 8)))
nova chamada: assertEquals(((1 << 15) | 7), container.previousValue((char) ((1 << 15) | 8)), "Era esperado valores iguais, mas  ((1  15) | 7) é diferente de " + result3369 + " <container.previousValue((char) ((1 << 15) | 8))>")
chamada antiga: assertEquals(((1 << 15) | 5), container.nextValue((char) ((1 << 15) | 4)))
nova chamada: assertEquals(((1 << 15) | 5), container.nextValue((char) ((1 << 15) | 4)), "Era esperado valores iguais, mas  ((1  15) | 5) é diferente de " + result3370 + " <container.nextValue((char) ((1 << 15) | 4))>")
chamada antiga: assertEquals(((1 << 15) | 5), container.nextValue((char) ((1 << 15) | 5)))
nova chamada: assertEquals(((1 << 15) | 5), container.nextValue((char) ((1 << 15) | 5)), "Era esperado valores iguais, mas  ((1  15) | 5) é diferente de " + result3371 + " <container.nextValue((char) ((1 << 15) | 5))>")
chamada antiga: assertEquals(((1 << 15) | 7), container.nextValue((char) ((1 << 15) | 6)))
nova chamada: assertEquals(((1 << 15) | 7), container.nextValue((char) ((1 << 15) | 6)), "Era esperado valores iguais, mas  ((1  15) | 7) é diferente de " + result3372 + " <container.nextValue((char) ((1 << 15) | 6))>")
chamada antiga: assertEquals(((1 << 15) | 7), container.nextValue((char) ((1 << 15) | 7)))
nova chamada: assertEquals(((1 << 15) | 7), container.nextValue((char) ((1 << 15) | 7)), "Era esperado valores iguais, mas  ((1  15) | 7) é diferente de " + result3373 + " <container.nextValue((char) ((1 << 15) | 7))>")
chamada antiga: assertEquals(-1, container.nextValue((char) ((1 << 15) | 8)))
nova chamada: assertEquals(-1, container.nextValue((char) ((1 << 15) | 8)), "Era esperado valores iguais, mas  -1 é diferente de " + result3374 + " <container.nextValue((char) ((1 << 15) | 8))>")
chamada antiga: assertEquals(0, container.previousAbsentValue((char) 0))
nova chamada: assertEquals(0, container.previousAbsentValue((char) 0), "Era esperado valores iguais, mas  0 é diferente de " + result3375 + " <container.previousAbsentValue((char) 0)>")
chamada antiga: assertEquals(63, container.previousAbsentValue((char) 63))
nova chamada: assertEquals(63, container.previousAbsentValue((char) 63), "Era esperado valores iguais, mas  63 é diferente de " + result3376 + " <container.previousAbsentValue((char) 63)>")
chamada antiga: assertEquals(63, container.previousAbsentValue((char) 64))
nova chamada: assertEquals(63, container.previousAbsentValue((char) 64), "Era esperado valores iguais, mas  63 é diferente de " + result3377 + " <container.previousAbsentValue((char) 64)>")
chamada antiga: assertEquals(63, container.previousAbsentValue((char) 65))
nova chamada: assertEquals(63, container.previousAbsentValue((char) 65), "Era esperado valores iguais, mas  63 é diferente de " + result3378 + " <container.previousAbsentValue((char) 65)>")
chamada antiga: assertEquals(63, container.previousAbsentValue((char) 128))
nova chamada: assertEquals(63, container.previousAbsentValue((char) 128), "Era esperado valores iguais, mas  63 é diferente de " + result3379 + " <container.previousAbsentValue((char) 128)>")
chamada antiga: assertEquals(129, container.previousAbsentValue((char) 129))
nova chamada: assertEquals(129, container.previousAbsentValue((char) 129), "Era esperado valores iguais, mas  129 é diferente de " + result3380 + " <container.previousAbsentValue((char) 129)>")
chamada antiga: assertEquals(0, container.previousAbsentValue((char) 0))
nova chamada: assertEquals(0, container.previousAbsentValue((char) 0), "Era esperado valores iguais, mas  0 é diferente de " + result3381 + " <container.previousAbsentValue((char) 0)>")
chamada antiga: assertEquals(63, container.previousAbsentValue((char) 63))
nova chamada: assertEquals(63, container.previousAbsentValue((char) 63), "Era esperado valores iguais, mas  63 é diferente de " + result3382 + " <container.previousAbsentValue((char) 63)>")
chamada antiga: assertEquals(63, container.previousAbsentValue((char) 64))
nova chamada: assertEquals(63, container.previousAbsentValue((char) 64), "Era esperado valores iguais, mas  63 é diferente de " + result3383 + " <container.previousAbsentValue((char) 64)>")
chamada antiga: assertEquals(63, container.previousAbsentValue((char) 65))
nova chamada: assertEquals(63, container.previousAbsentValue((char) 65), "Era esperado valores iguais, mas  63 é diferente de " + result3384 + " <container.previousAbsentValue((char) 65)>")
chamada antiga: assertEquals(63, container.previousAbsentValue((char) 128))
nova chamada: assertEquals(63, container.previousAbsentValue((char) 128), "Era esperado valores iguais, mas  63 é diferente de " + result3385 + " <container.previousAbsentValue((char) 128)>")
chamada antiga: assertEquals(129, container.previousAbsentValue((char) 129))
nova chamada: assertEquals(129, container.previousAbsentValue((char) 129), "Era esperado valores iguais, mas  129 é diferente de " + result3386 + " <container.previousAbsentValue((char) 129)>")
chamada antiga: assertEquals(199, container.previousAbsentValue((char) 199))
nova chamada: assertEquals(199, container.previousAbsentValue((char) 199), "Era esperado valores iguais, mas  199 é diferente de " + result3387 + " <container.previousAbsentValue((char) 199)>")
chamada antiga: assertEquals(199, container.previousAbsentValue((char) 200))
nova chamada: assertEquals(199, container.previousAbsentValue((char) 200), "Era esperado valores iguais, mas  199 é diferente de " + result3388 + " <container.previousAbsentValue((char) 200)>")
chamada antiga: assertEquals(199, container.previousAbsentValue((char) 250))
nova chamada: assertEquals(199, container.previousAbsentValue((char) 250), "Era esperado valores iguais, mas  199 é diferente de " + result3389 + " <container.previousAbsentValue((char) 250)>")
chamada antiga: assertEquals(2500, container.previousAbsentValue((char) 2500))
nova chamada: assertEquals(2500, container.previousAbsentValue((char) 2500), "Era esperado valores iguais, mas  2500 é diferente de " + result3390 + " <container.previousAbsentValue((char) 2500)>")
chamada antiga: assertEquals(4999, container.previousAbsentValue((char) 5000))
nova chamada: assertEquals(4999, container.previousAbsentValue((char) 5000), "Era esperado valores iguais, mas  4999 é diferente de " + result3391 + " <container.previousAbsentValue((char) 5000)>")
chamada antiga: assertEquals(4999, container.previousAbsentValue((char) 5200))
nova chamada: assertEquals(4999, container.previousAbsentValue((char) 5200), "Era esperado valores iguais, mas  4999 é diferente de " + result3392 + " <container.previousAbsentValue((char) 5200)>")
chamada antiga: assertEquals(9, container.previousAbsentValue((char) 9))
nova chamada: assertEquals(9, container.previousAbsentValue((char) 9), "Era esperado valores iguais, mas  9 é diferente de " + result3393 + " <container.previousAbsentValue((char) 9)>")
chamada antiga: assertEquals(9, container.previousAbsentValue((char) 10))
nova chamada: assertEquals(9, container.previousAbsentValue((char) 10), "Era esperado valores iguais, mas  9 é diferente de " + result3394 + " <container.previousAbsentValue((char) 10)>")
chamada antiga: assertEquals(11, container.previousAbsentValue((char) 11))
nova chamada: assertEquals(11, container.previousAbsentValue((char) 11), "Era esperado valores iguais, mas  11 é diferente de " + result3395 + " <container.previousAbsentValue((char) 11)>")
chamada antiga: assertEquals(21, container.previousAbsentValue((char) 21))
nova chamada: assertEquals(21, container.previousAbsentValue((char) 21), "Era esperado valores iguais, mas  21 é diferente de " + result3396 + " <container.previousAbsentValue((char) 21)>")
chamada antiga: assertEquals(29, container.previousAbsentValue((char) 30))
nova chamada: assertEquals(29, container.previousAbsentValue((char) 30), "Era esperado valores iguais, mas  29 é diferente de " + result3397 + " <container.previousAbsentValue((char) 30)>")
chamada antiga: assertEquals(((1 << 15) | 4), container.previousAbsentValue((char) ((1 << 15) | 4)))
nova chamada: assertEquals(((1 << 15) | 4), container.previousAbsentValue((char) ((1 << 15) | 4)), "Era esperado valores iguais, mas  ((1  15) | 4) é diferente de " + result3398 + " <container.previousAbsentValue((char) ((1 << 15) | 4))>")
chamada antiga: assertEquals(((1 << 15) | 4), container.previousAbsentValue((char) ((1 << 15) | 5)))
nova chamada: assertEquals(((1 << 15) | 4), container.previousAbsentValue((char) ((1 << 15) | 5)), "Era esperado valores iguais, mas  ((1  15) | 4) é diferente de " + result3399 + " <container.previousAbsentValue((char) ((1 << 15) | 5))>")
chamada antiga: assertEquals(((1 << 15) | 6), container.previousAbsentValue((char) ((1 << 15) | 6)))
nova chamada: assertEquals(((1 << 15) | 6), container.previousAbsentValue((char) ((1 << 15) | 6)), "Era esperado valores iguais, mas  ((1  15) | 6) é diferente de " + result3400 + " <container.previousAbsentValue((char) ((1 << 15) | 6))>")
chamada antiga: assertEquals(((1 << 15) | 6), container.previousAbsentValue((char) ((1 << 15) | 7)))
nova chamada: assertEquals(((1 << 15) | 6), container.previousAbsentValue((char) ((1 << 15) | 7)), "Era esperado valores iguais, mas  ((1  15) | 6) é diferente de " + result3401 + " <container.previousAbsentValue((char) ((1 << 15) | 7))>")
chamada antiga: assertEquals(((1 << 15) | 8), container.previousAbsentValue((char) ((1 << 15) | 8)))
nova chamada: assertEquals(((1 << 15) | 8), container.previousAbsentValue((char) ((1 << 15) | 8)), "Era esperado valores iguais, mas  ((1  15) | 8) é diferente de " + result3402 + " <container.previousAbsentValue((char) ((1 << 15) | 8))>")
chamada antiga: assertEquals(0, container.nextAbsentValue((char) 0))
nova chamada: assertEquals(0, container.nextAbsentValue((char) 0), "Era esperado valores iguais, mas  0 é diferente de " + result3403 + " <container.nextAbsentValue((char) 0)>")
chamada antiga: assertEquals(63, container.nextAbsentValue((char) 63))
nova chamada: assertEquals(63, container.nextAbsentValue((char) 63), "Era esperado valores iguais, mas  63 é diferente de " + result3404 + " <container.nextAbsentValue((char) 63)>")
chamada antiga: assertEquals(129, container.nextAbsentValue((char) 64))
nova chamada: assertEquals(129, container.nextAbsentValue((char) 64), "Era esperado valores iguais, mas  129 é diferente de " + result3405 + " <container.nextAbsentValue((char) 64)>")
chamada antiga: assertEquals(129, container.nextAbsentValue((char) 65))
nova chamada: assertEquals(129, container.nextAbsentValue((char) 65), "Era esperado valores iguais, mas  129 é diferente de " + result3406 + " <container.nextAbsentValue((char) 65)>")
chamada antiga: assertEquals(129, container.nextAbsentValue((char) 128))
nova chamada: assertEquals(129, container.nextAbsentValue((char) 128), "Era esperado valores iguais, mas  129 é diferente de " + result3407 + " <container.nextAbsentValue((char) 128)>")
chamada antiga: assertEquals(129, container.nextAbsentValue((char) 129))
nova chamada: assertEquals(129, container.nextAbsentValue((char) 129), "Era esperado valores iguais, mas  129 é diferente de " + result3408 + " <container.nextAbsentValue((char) 129)>")
chamada antiga: assertEquals(0, container.nextAbsentValue((char) 0))
nova chamada: assertEquals(0, container.nextAbsentValue((char) 0), "Era esperado valores iguais, mas  0 é diferente de " + result3409 + " <container.nextAbsentValue((char) 0)>")
chamada antiga: assertEquals(63, container.nextAbsentValue((char) 63))
nova chamada: assertEquals(63, container.nextAbsentValue((char) 63), "Era esperado valores iguais, mas  63 é diferente de " + result3410 + " <container.nextAbsentValue((char) 63)>")
chamada antiga: assertEquals(129, container.nextAbsentValue((char) 64))
nova chamada: assertEquals(129, container.nextAbsentValue((char) 64), "Era esperado valores iguais, mas  129 é diferente de " + result3411 + " <container.nextAbsentValue((char) 64)>")
chamada antiga: assertEquals(129, container.nextAbsentValue((char) 65))
nova chamada: assertEquals(129, container.nextAbsentValue((char) 65), "Era esperado valores iguais, mas  129 é diferente de " + result3412 + " <container.nextAbsentValue((char) 65)>")
chamada antiga: assertEquals(129, container.nextAbsentValue((char) 128))
nova chamada: assertEquals(129, container.nextAbsentValue((char) 128), "Era esperado valores iguais, mas  129 é diferente de " + result3413 + " <container.nextAbsentValue((char) 128)>")
chamada antiga: assertEquals(129, container.nextAbsentValue((char) 129))
nova chamada: assertEquals(129, container.nextAbsentValue((char) 129), "Era esperado valores iguais, mas  129 é diferente de " + result3414 + " <container.nextAbsentValue((char) 129)>")
chamada antiga: assertEquals(199, container.nextAbsentValue((char) 199))
nova chamada: assertEquals(199, container.nextAbsentValue((char) 199), "Era esperado valores iguais, mas  199 é diferente de " + result3415 + " <container.nextAbsentValue((char) 199)>")
chamada antiga: assertEquals(501, container.nextAbsentValue((char) 200))
nova chamada: assertEquals(501, container.nextAbsentValue((char) 200), "Era esperado valores iguais, mas  501 é diferente de " + result3416 + " <container.nextAbsentValue((char) 200)>")
chamada antiga: assertEquals(501, container.nextAbsentValue((char) 250))
nova chamada: assertEquals(501, container.nextAbsentValue((char) 250), "Era esperado valores iguais, mas  501 é diferente de " + result3417 + " <container.nextAbsentValue((char) 250)>")
chamada antiga: assertEquals(2500, container.nextAbsentValue((char) 2500))
nova chamada: assertEquals(2500, container.nextAbsentValue((char) 2500), "Era esperado valores iguais, mas  2500 é diferente de " + result3418 + " <container.nextAbsentValue((char) 2500)>")
chamada antiga: assertEquals(5201, container.nextAbsentValue((char) 5000))
nova chamada: assertEquals(5201, container.nextAbsentValue((char) 5000), "Era esperado valores iguais, mas  5201 é diferente de " + result3419 + " <container.nextAbsentValue((char) 5000)>")
chamada antiga: assertEquals(5201, container.nextAbsentValue((char) 5200))
nova chamada: assertEquals(5201, container.nextAbsentValue((char) 5200), "Era esperado valores iguais, mas  5201 é diferente de " + result3420 + " <container.nextAbsentValue((char) 5200)>")
chamada antiga: assertEquals(9, container.nextAbsentValue((char) 9))
nova chamada: assertEquals(9, container.nextAbsentValue((char) 9), "Era esperado valores iguais, mas  9 é diferente de " + result3421 + " <container.nextAbsentValue((char) 9)>")
chamada antiga: assertEquals(11, container.nextAbsentValue((char) 10))
nova chamada: assertEquals(11, container.nextAbsentValue((char) 10), "Era esperado valores iguais, mas  11 é diferente de " + result3422 + " <container.nextAbsentValue((char) 10)>")
chamada antiga: assertEquals(11, container.nextAbsentValue((char) 11))
nova chamada: assertEquals(11, container.nextAbsentValue((char) 11), "Era esperado valores iguais, mas  11 é diferente de " + result3423 + " <container.nextAbsentValue((char) 11)>")
chamada antiga: assertEquals(21, container.nextAbsentValue((char) 21))
nova chamada: assertEquals(21, container.nextAbsentValue((char) 21), "Era esperado valores iguais, mas  21 é diferente de " + result3424 + " <container.nextAbsentValue((char) 21)>")
chamada antiga: assertEquals(31, container.nextAbsentValue((char) 30))
nova chamada: assertEquals(31, container.nextAbsentValue((char) 30), "Era esperado valores iguais, mas  31 é diferente de " + result3425 + " <container.nextAbsentValue((char) 30)>")
chamada antiga: assertEquals(((1 << 15) | 4), container.nextAbsentValue((char) ((1 << 15) | 4)))
nova chamada: assertEquals(((1 << 15) | 4), container.nextAbsentValue((char) ((1 << 15) | 4)), "Era esperado valores iguais, mas  ((1  15) | 4) é diferente de " + result3426 + " <container.nextAbsentValue((char) ((1 << 15) | 4))>")
chamada antiga: assertEquals(((1 << 15) | 6), container.nextAbsentValue((char) ((1 << 15) | 5)))
nova chamada: assertEquals(((1 << 15) | 6), container.nextAbsentValue((char) ((1 << 15) | 5)), "Era esperado valores iguais, mas  ((1  15) | 6) é diferente de " + result3427 + " <container.nextAbsentValue((char) ((1 << 15) | 5))>")
chamada antiga: assertEquals(((1 << 15) | 6), container.nextAbsentValue((char) ((1 << 15) | 6)))
nova chamada: assertEquals(((1 << 15) | 6), container.nextAbsentValue((char) ((1 << 15) | 6)), "Era esperado valores iguais, mas  ((1  15) | 6) é diferente de " + result3428 + " <container.nextAbsentValue((char) ((1 << 15) | 6))>")
chamada antiga: assertEquals(((1 << 15) | 8), container.nextAbsentValue((char) ((1 << 15) | 7)))
nova chamada: assertEquals(((1 << 15) | 8), container.nextAbsentValue((char) ((1 << 15) | 7)), "Era esperado valores iguais, mas  ((1  15) | 8) é diferente de " + result3429 + " <container.nextAbsentValue((char) ((1 << 15) | 7))>")
chamada antiga: assertEquals(((1 << 15) | 8), container.nextAbsentValue((char) ((1 << 15) | 8)))
nova chamada: assertEquals(((1 << 15) | 8), container.nextAbsentValue((char) ((1 << 15) | 8)), "Era esperado valores iguais, mas  ((1  15) | 8) é diferente de " + result3430 + " <container.nextAbsentValue((char) ((1 << 15) | 8))>")
chamada antiga: assertFalse(rc.contains(48, 49))
nova chamada: assertFalse(rc.contains(48, 49), "Era esperado falso, mas " + result3431 + " <rc.contains(48, 49)> é verdadeiro ")
chamada antiga: assertEquals(data3, BufferFastAggregation.naive_and(data1, data2))
nova chamada: assertEquals(data3, BufferFastAggregation.naive_and(data1, data2), "Era esperado valores iguais, mas  data3 é diferente de " + result3432 + " <BufferFastAggregation.naive_and(data1, data2)>")
chamada antiga: assertEquals(new MutableRoaringBitmap(), BufferFastAggregation.naive_and(data4))
nova chamada: assertEquals(new MutableRoaringBitmap(), BufferFastAggregation.naive_and(data4), "Era esperado valores iguais, mas  new MutableRoaringBitmap() é diferente de " + result3433 + " <BufferFastAggregation.naive_and(data4)>")
chamada antiga: assertEquals(data3, BufferFastAggregation.priorityqueue_or(data1, data2))
nova chamada: assertEquals(data3, BufferFastAggregation.priorityqueue_or(data1, data2), "Era esperado valores iguais, mas  data3 é diferente de " + result3434 + " <BufferFastAggregation.priorityqueue_or(data1, data2)>")
chamada antiga: assertEquals(data1, BufferFastAggregation.priorityqueue_or(data1))
nova chamada: assertEquals(data1, BufferFastAggregation.priorityqueue_or(data1), "Era esperado valores iguais, mas  data1 é diferente de " + result3435 + " <BufferFastAggregation.priorityqueue_or(data1)>")
chamada antiga: assertEquals(data1, BufferFastAggregation.priorityqueue_or(data1, data4))
nova chamada: assertEquals(data1, BufferFastAggregation.priorityqueue_or(data1, data4), "Era esperado valores iguais, mas  data1 é diferente de " + result3436 + " <BufferFastAggregation.priorityqueue_or(data1, data4)>")
chamada antiga: assertEquals(data3, BufferFastAggregation.priorityqueue_or(data5.iterator()))
nova chamada: assertEquals(data3, BufferFastAggregation.priorityqueue_or(data5.iterator()), "Era esperado valores iguais, mas  data3 é diferente de " + result3437 + " <BufferFastAggregation.priorityqueue_or(data5.iterator())>")
chamada antiga: assertEquals(new MutableRoaringBitmap(), BufferFastAggregation.priorityqueue_or(data6.iterator()))
nova chamada: assertEquals(new MutableRoaringBitmap(), BufferFastAggregation.priorityqueue_or(data6.iterator()), "Era esperado valores iguais, mas  new MutableRoaringBitmap() é diferente de " + result3438 + " <BufferFastAggregation.priorityqueue_or(data6.iterator())>")
chamada antiga: assertEquals(data1, BufferFastAggregation.priorityqueue_or(data6.iterator()))
nova chamada: assertEquals(data1, BufferFastAggregation.priorityqueue_or(data6.iterator()), "Era esperado valores iguais, mas  data1 é diferente de " + result3439 + " <BufferFastAggregation.priorityqueue_or(data6.iterator())>")
chamada antiga: assertThrows(IllegalArgumentException.class, () -> {
    int[] array1 = { 1232, 3324, 123, 43243, 1322, 7897, 8767 };
    int[] array2 = { 39173, 39174, 39175, 39176, 39177, 39178, 39179 };
    int[] array3 = { 1232, 3324, 123, 43243, 1322, 7897, 8767, 39173, 39174, 39175, 39176, 39177, 39178, 39179 };
    ImmutableRoaringBitmap data1 = MutableRoaringBitmap.bitmapOf(array1);
    ImmutableRoaringBitmap data2 = MutableRoaringBitmap.bitmapOf(array2);
    ImmutableRoaringBitmap data3 = MutableRoaringBitmap.bitmapOf(array3);
    assertEquals(data3, BufferFastAggregation.priorityqueue_xor(data1, data2));
    BufferFastAggregation.priorityqueue_xor(data1);
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    int[] array1 = { 1232, 3324, 123, 43243, 1322, 7897, 8767 };
    int[] array2 = { 39173, 39174, 39175, 39176, 39177, 39178, 39179 };
    int[] array3 = { 1232, 3324, 123, 43243, 1322, 7897, 8767, 39173, 39174, 39175, 39176, 39177, 39178, 39179 };
    ImmutableRoaringBitmap data1 = MutableRoaringBitmap.bitmapOf(array1);
    ImmutableRoaringBitmap data2 = MutableRoaringBitmap.bitmapOf(array2);
    ImmutableRoaringBitmap data3 = MutableRoaringBitmap.bitmapOf(array3);
    assertEquals(data3, BufferFastAggregation.priorityqueue_xor(data1, data2));
    BufferFastAggregation.priorityqueue_xor(data1);
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: assertEquals(data3, BufferFastAggregation.naive_and(data1, data2))
nova chamada: assertEquals(data3, BufferFastAggregation.naive_and(data1, data2), "Era esperado valores iguais, mas  data3 é diferente de " + result3440 + " <BufferFastAggregation.naive_and(data1, data2)>")
chamada antiga: assertEquals(new MutableRoaringBitmap(), BufferFastAggregation.naive_and(data4))
nova chamada: assertEquals(new MutableRoaringBitmap(), BufferFastAggregation.naive_and(data4), "Era esperado valores iguais, mas  new MutableRoaringBitmap() é diferente de " + result3441 + " <BufferFastAggregation.naive_and(data4)>")
chamada antiga: assertEquals(data3, BufferFastAggregation.priorityqueue_or(data1, data2))
nova chamada: assertEquals(data3, BufferFastAggregation.priorityqueue_or(data1, data2), "Era esperado valores iguais, mas  data3 é diferente de " + result3442 + " <BufferFastAggregation.priorityqueue_or(data1, data2)>")
chamada antiga: assertEquals(data1, BufferFastAggregation.priorityqueue_or(data1))
nova chamada: assertEquals(data1, BufferFastAggregation.priorityqueue_or(data1), "Era esperado valores iguais, mas  data1 é diferente de " + result3443 + " <BufferFastAggregation.priorityqueue_or(data1)>")
chamada antiga: assertEquals(data1, BufferFastAggregation.priorityqueue_or(data1, data4))
nova chamada: assertEquals(data1, BufferFastAggregation.priorityqueue_or(data1, data4), "Era esperado valores iguais, mas  data1 é diferente de " + result3444 + " <BufferFastAggregation.priorityqueue_or(data1, data4)>")
chamada antiga: assertEquals(data3, BufferFastAggregation.priorityqueue_or(data5.iterator()))
nova chamada: assertEquals(data3, BufferFastAggregation.priorityqueue_or(data5.iterator()), "Era esperado valores iguais, mas  data3 é diferente de " + result3445 + " <BufferFastAggregation.priorityqueue_or(data5.iterator())>")
chamada antiga: assertEquals(new MutableRoaringBitmap(), BufferFastAggregation.priorityqueue_or(data6.iterator()))
nova chamada: assertEquals(new MutableRoaringBitmap(), BufferFastAggregation.priorityqueue_or(data6.iterator()), "Era esperado valores iguais, mas  new MutableRoaringBitmap() é diferente de " + result3446 + " <BufferFastAggregation.priorityqueue_or(data6.iterator())>")
chamada antiga: assertEquals(data1, BufferFastAggregation.priorityqueue_or(data6.iterator()))
nova chamada: assertEquals(data1, BufferFastAggregation.priorityqueue_or(data6.iterator()), "Era esperado valores iguais, mas  data1 é diferente de " + result3447 + " <BufferFastAggregation.priorityqueue_or(data6.iterator())>")
chamada antiga: assertEquals(mrb, BufferFastAggregation.or(data1, data2, data3))
nova chamada: assertEquals(mrb, BufferFastAggregation.or(data1, data2, data3), "Era esperado valores iguais, mas  mrb é diferente de " + result3448 + " <BufferFastAggregation.or(data1, data2, data3)>")
chamada antiga: assertThrows(IllegalArgumentException.class, () -> {
    int[] array1 = { 1232, 3324, 123, 43243, 1322, 7897, 8767 };
    int[] array2 = { 39173, 39174, 39175, 39176, 39177, 39178, 39179 };
    int[] array3 = { 1232, 3324, 123, 43243, 1322, 7897, 8767, 39173, 39174, 39175, 39176, 39177, 39178, 39179 };
    ImmutableRoaringBitmap data1 = toMapped(MutableRoaringBitmap.bitmapOf(array1));
    ImmutableRoaringBitmap data2 = toMapped(MutableRoaringBitmap.bitmapOf(array2));
    ImmutableRoaringBitmap data3 = toMapped(MutableRoaringBitmap.bitmapOf(array3));
    assertEquals(data3, BufferFastAggregation.priorityqueue_xor(data1, data2));
    BufferFastAggregation.priorityqueue_xor(data1);
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    int[] array1 = { 1232, 3324, 123, 43243, 1322, 7897, 8767 };
    int[] array2 = { 39173, 39174, 39175, 39176, 39177, 39178, 39179 };
    int[] array3 = { 1232, 3324, 123, 43243, 1322, 7897, 8767, 39173, 39174, 39175, 39176, 39177, 39178, 39179 };
    ImmutableRoaringBitmap data1 = toMapped(MutableRoaringBitmap.bitmapOf(array1));
    ImmutableRoaringBitmap data2 = toMapped(MutableRoaringBitmap.bitmapOf(array2));
    ImmutableRoaringBitmap data3 = toMapped(MutableRoaringBitmap.bitmapOf(array3));
    assertEquals(data3, BufferFastAggregation.priorityqueue_xor(data1, data2));
    BufferFastAggregation.priorityqueue_xor(data1);
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: assertEquals(expected, result)
nova chamada: assertEquals(expected, result, "Era esperado valores iguais, mas  expected é diferente de " + " result")
chamada antiga: assertEquals(expected, result)
nova chamada: assertEquals(expected, result, "Era esperado valores iguais, mas  expected é diferente de " + " result")
chamada antiga: assertEquals(expected, result)
nova chamada: assertEquals(expected, result, "Era esperado valores iguais, mas  expected é diferente de " + " result")
chamada antiga: assertEquals(expected, result)
nova chamada: assertEquals(expected, result, "Era esperado valores iguais, mas  expected é diferente de " + " result")
chamada antiga: assertEquals(expected, result)
nova chamada: assertEquals(expected, result, "Era esperado valores iguais, mas  expected é diferente de " + " result")
chamada antiga: assertEquals(expected, result)
nova chamada: assertEquals(expected, result, "Era esperado valores iguais, mas  expected é diferente de " + " result")
chamada antiga: assertEquals(expected, result)
nova chamada: assertEquals(expected, result, "Era esperado valores iguais, mas  expected é diferente de " + " result")
chamada antiga: assertEquals(expected, result)
nova chamada: assertEquals(expected, result, "Era esperado valores iguais, mas  expected é diferente de " + " result")
chamada antiga: assertEquals("{5,6,7,8,9,10,11,12,13,14,65517,65533}", s)
nova chamada: assertEquals("{5,6,7,8,9,10,11,12,13,14,65517,65533}", s, "Era esperado valores iguais, mas  '{5,6,7,8,9,10,11,12,13,14,65517,65533}' é diferente de " + " s")
chamada antiga: assertEquals(0, bc.ixor(bc3).getCardinality())
nova chamada: assertEquals(0, bc.ixor(bc3).getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result3449 + " <bc.ixor(bc3).getCardinality()>")
chamada antiga: assertEquals(bc, bc3)
nova chamada: assertEquals(bc, bc3, "Era esperado valores iguais, mas  bc é diferente de " + " bc3")
chamada antiga: assertEquals(bc.hashCode(), bc3.hashCode())
nova chamada: assertEquals(bc.hashCode(), bc3.hashCode(), "Era esperado valores iguais, mas " + result3450 + " <bc.hashCode()> é diferente de " + result3451 + " <bc3.hashCode()>")
chamada antiga: assertEquals(0, bc.iandNot(bc3).getCardinality())
nova chamada: assertEquals(0, bc.iandNot(bc3).getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result3452 + " <bc.iandNot(bc3).getCardinality()>")
chamada antiga: assertEquals(0, bc3.getCardinality())
nova chamada: assertEquals(0, bc3.getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result3453 + " <bc3.getCardinality()>")
chamada antiga: assertEquals(bc, bc2)
nova chamada: assertEquals(bc, bc2, "Era esperado valores iguais, mas  bc é diferente de " + " bc2")
chamada antiga: assertEquals(0, bc.iand(bc3).getCardinality())
nova chamada: assertEquals(0, bc.iand(bc3).getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result3454 + " <bc.iand(bc3).getCardinality()>")
chamada antiga: assertEquals(bc, bc2)
nova chamada: assertEquals(bc, bc2, "Era esperado valores iguais, mas  bc é diferente de " + " bc2")
chamada antiga: assertEquals(bc, bc2)
nova chamada: assertEquals(bc, bc2, "Era esperado valores iguais, mas  bc é diferente de " + " bc2")
chamada antiga: assertEquals(0, bc.iandNot(rc).getCardinality())
nova chamada: assertEquals(0, bc.iandNot(rc).getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result3455 + " <bc.iandNot(rc).getCardinality()>")
chamada antiga: assertEquals(0, bc.ixor(bc3).getCardinality())
nova chamada: assertEquals(0, bc.ixor(bc3).getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result3456 + " <bc.ixor(bc3).getCardinality()>")
chamada antiga: assertEquals(bc, bc3)
nova chamada: assertEquals(bc, bc3, "Era esperado valores iguais, mas  bc é diferente de " + " bc3")
chamada antiga: assertEquals(bc, bc2)
nova chamada: assertEquals(bc, bc2, "Era esperado valores iguais, mas  bc é diferente de " + " bc2")
chamada antiga: assertEquals(0, bc.iand(bc3).getCardinality())
nova chamada: assertEquals(0, bc.iand(bc3).getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result3457 + " <bc.iand(bc3).getCardinality()>")
chamada antiga: assertEquals(bc, bc2)
nova chamada: assertEquals(bc, bc2, "Era esperado valores iguais, mas  bc é diferente de " + " bc2")
chamada antiga: assertEquals(bc, bc2)
nova chamada: assertEquals(bc, bc2, "Era esperado valores iguais, mas  bc é diferente de " + " bc2")
chamada antiga: assertEquals(8280, bc.cardinality)
nova chamada: assertEquals(8280, bc.cardinality, "Era esperado valores iguais, mas  8280 é diferente de " + " bc.cardinality")
chamada antiga: assertEquals(8280, bc.cardinality)
nova chamada: assertEquals(8280, bc.cardinality, "Era esperado valores iguais, mas  8280 é diferente de " + " bc.cardinality")
chamada antiga: assertEquals(8677, bc.cardinality)
nova chamada: assertEquals(8677, bc.cardinality, "Era esperado valores iguais, mas  8677 é diferente de " + " bc.cardinality")
chamada antiga: assertEquals(5274, bc.cardinality)
nova chamada: assertEquals(5274, bc.cardinality, "Era esperado valores iguais, mas  5274 é diferente de " + " bc.cardinality")
chamada antiga: assertEquals(5274, bc.cardinality)
nova chamada: assertEquals(5274, bc.cardinality, "Era esperado valores iguais, mas  5274 é diferente de " + " bc.cardinality")
chamada antiga: assertEquals(5046, bc.cardinality)
nova chamada: assertEquals(5046, bc.cardinality, "Era esperado valores iguais, mas  5046 é diferente de " + " bc.cardinality")
chamada antiga: assertEquals(6031, bc.cardinality)
nova chamada: assertEquals(6031, bc.cardinality, "Era esperado valores iguais, mas  6031 é diferente de " + " bc.cardinality")
chamada antiga: assertThrows(IndexOutOfBoundsException.class, () -> emptyContainer().nextSetBit(Short.MAX_VALUE + 1))
nova chamada: assertThrows(IndexOutOfBoundsException.class, () -> emptyContainer().nextSetBit(Short.MAX_VALUE + 1), "Era esperado que a exceção  IndexOutOfBoundsException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(IndexOutOfBoundsException.class, () -> emptyContainer().nextSetBit(-1))
nova chamada: assertThrows(IndexOutOfBoundsException.class, () -> emptyContainer().nextSetBit(-1), "Era esperado que a exceção  IndexOutOfBoundsException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(IndexOutOfBoundsException.class, () -> emptyContainer().prevSetBit(Short.MAX_VALUE + 1))
nova chamada: assertThrows(IndexOutOfBoundsException.class, () -> emptyContainer().prevSetBit(Short.MAX_VALUE + 1), "Era esperado que a exceção  IndexOutOfBoundsException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(IndexOutOfBoundsException.class, () -> emptyContainer().prevSetBit(-1))
nova chamada: assertThrows(IndexOutOfBoundsException.class, () -> emptyContainer().prevSetBit(-1), "Era esperado que a exceção  IndexOutOfBoundsException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(RuntimeException.class, () -> {
    MappeableBitmapContainer bc = new MappeableBitmapContainer();
    bc.add(10, 1);
})
nova chamada: assertThrows(RuntimeException.class, () -> {
    MappeableBitmapContainer bc = new MappeableBitmapContainer();
    bc.add(10, 1);
}, "Era esperado que a exceção  RuntimeException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(RuntimeException.class, () -> {
    MappeableBitmapContainer bc = new MappeableBitmapContainer();
    bc.iadd(10, 1);
})
nova chamada: assertThrows(RuntimeException.class, () -> {
    MappeableBitmapContainer bc = new MappeableBitmapContainer();
    bc.iadd(10, 1);
}, "Era esperado que a exceção  RuntimeException.class fosse lançada, mas não foi")
chamada antiga: assertEquals(8, result.getCardinality())
nova chamada: assertEquals(8, result.getCardinality(), "Era esperado valores iguais, mas  8 é diferente de " + result3458 + " <result.getCardinality()>")
chamada antiga: assertEquals(26, result.getCardinality())
nova chamada: assertEquals(26, result.getCardinality(), "Era esperado valores iguais, mas  26 é diferente de " + result3459 + " <result.getCardinality()>")
chamada antiga: assertEquals(0, bc.getCardinality())
nova chamada: assertEquals(0, bc.getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result3460 + " <bc.getCardinality()>")
chamada antiga: assertThrows(IllegalArgumentException.class, () -> {
    MappeableBitmapContainer bc = new MappeableBitmapContainer();
    bc.iremove(13, 1);
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    MappeableBitmapContainer bc = new MappeableBitmapContainer();
    bc.iremove(13, 1);
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: assertEquals(0, bc.getCardinality())
nova chamada: assertEquals(0, bc.getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result3461 + " <bc.getCardinality()>")
chamada antiga: assertEquals(8182, bc.getCardinality())
nova chamada: assertEquals(8182, bc.getCardinality(), "Era esperado valores iguais, mas  8182 é diferente de " + result3462 + " <bc.getCardinality()>")
chamada antiga: assertEquals(2, bc.numberOfRuns())
nova chamada: assertEquals(2, bc.numberOfRuns(), "Era esperado valores iguais, mas  2 é diferente de " + result3463 + " <bc.numberOfRuns()>")
chamada antiga: assertEquals(2, bc.numberOfRuns())
nova chamada: assertEquals(2, bc.numberOfRuns(), "Era esperado valores iguais, mas  2 é diferente de " + result3464 + " <bc.numberOfRuns()>")
chamada antiga: assertThrows(IllegalArgumentException.class, () -> {
    MappeableContainer bc = new MappeableBitmapContainer();
    bc = bc.add(1, 13);
    bc.select(100);
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    MappeableContainer bc = new MappeableBitmapContainer();
    bc = bc.add(1, 13);
    bc.select(100);
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: assertEquals(100, bc.select(100))
nova chamada: assertEquals(100, bc.select(100), "Era esperado valores iguais, mas  100 é diferente de " + result3465 + " <bc.select(100)>")
chamada antiga: assertFalse(iterator.hasNext())
nova chamada: assertFalse(iterator.hasNext(), "Era esperado falso, mas " + result3466 + " <iterator.hasNext()> é verdadeiro ")
chamada antiga: assertEquals(32, bc.getCardinality())
nova chamada: assertEquals(32, bc.getCardinality(), "Era esperado valores iguais, mas  32 é diferente de " + result3467 + " <bc.getCardinality()>")
chamada antiga: assertEquals(32, bc.getCardinality())
nova chamada: assertEquals(32, bc.getCardinality(), "Era esperado valores iguais, mas  32 é diferente de " + result3468 + " <bc.getCardinality()>")
chamada antiga: assertTrue(bc.intersects(ac))
nova chamada: assertTrue(bc.intersects(ac), "Era esperado verdadeiro, mas " + result3469 + " <bc.intersects(ac)> é falso")
chamada antiga: assertTrue(bc.intersects(bc2))
nova chamada: assertTrue(bc.intersects(bc2), "Era esperado verdadeiro, mas " + result3470 + " <bc.intersects(bc2)> é falso")
chamada antiga: assertEquals(14, bc.getCardinality())
nova chamada: assertEquals(14, bc.getCardinality(), "Era esperado valores iguais, mas  14 é diferente de " + result3471 + " <bc.getCardinality()>")
chamada antiga: assertEquals(14, bc.getCardinality())
nova chamada: assertEquals(14, bc.getCardinality(), "Era esperado valores iguais, mas  14 é diferente de " + result3472 + " <bc.getCardinality()>")
chamada antiga: assertEquals(54, bc.getCardinality())
nova chamada: assertEquals(54, bc.getCardinality(), "Era esperado valores iguais, mas  54 é diferente de " + result3473 + " <bc.getCardinality()>")
chamada antiga: assertEquals(10, bc.getCardinality())
nova chamada: assertEquals(10, bc.getCardinality(), "Era esperado valores iguais, mas  10 é diferente de " + result3474 + " <bc.getCardinality()>")
chamada antiga: assertEquals(5000, bc.getCardinality())
nova chamada: assertEquals(5000, bc.getCardinality(), "Era esperado valores iguais, mas  5000 é diferente de " + result3475 + " <bc.getCardinality()>")
chamada antiga: assertEquals(value, expected++)
nova chamada: assertEquals(value, expected++, "Era esperado valores iguais, mas  value é diferente de " + " expected++")
chamada antiga: assertEquals(64, bc2.getCardinality())
nova chamada: assertEquals(64, bc2.getCardinality(), "Era esperado valores iguais, mas  64 é diferente de " + result3476 + " <bc2.getCardinality()>")
chamada antiga: assertEquals(1 << 16, result.getCardinality())
nova chamada: assertEquals(1 << 16, result.getCardinality(), "Era esperado valores iguais, mas  1  16 é diferente de " + result3477 + " <result.getCardinality()>")
chamada antiga: assertTrue(result instanceof MappeableRunContainer)
nova chamada: assertTrue(result instanceof MappeableRunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(1 << 16, result.getCardinality())
nova chamada: assertEquals(1 << 16, result.getCardinality(), "Era esperado valores iguais, mas  1  16 é diferente de " + result3478 + " <result.getCardinality()>")
chamada antiga: assertTrue(result instanceof MappeableRunContainer)
nova chamada: assertTrue(result instanceof MappeableRunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(-1, result.getCardinality())
nova chamada: assertEquals(-1, result.getCardinality(), "Era esperado valores iguais, mas  -1 é diferente de " + result3479 + " <result.getCardinality()>")
chamada antiga: assertEquals(-1, iresult.getCardinality())
nova chamada: assertEquals(-1, iresult.getCardinality(), "Era esperado valores iguais, mas  -1 é diferente de " + result3480 + " <iresult.getCardinality()>")
chamada antiga: assertEquals(1 << 16, repaired.getCardinality())
nova chamada: assertEquals(1 << 16, repaired.getCardinality(), "Era esperado valores iguais, mas  1  16 é diferente de " + result3481 + " <repaired.getCardinality()>")
chamada antiga: assertEquals(1 << 16, irepaired.getCardinality())
nova chamada: assertEquals(1 << 16, irepaired.getCardinality(), "Era esperado valores iguais, mas  1  16 é diferente de " + result3482 + " <irepaired.getCardinality()>")
chamada antiga: assertTrue(repaired instanceof MappeableRunContainer)
nova chamada: assertTrue(repaired instanceof MappeableRunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(irepaired instanceof MappeableRunContainer)
nova chamada: assertTrue(irepaired instanceof MappeableRunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(1 << 16, iresult.getCardinality())
nova chamada: assertEquals(1 << 16, iresult.getCardinality(), "Era esperado valores iguais, mas  1  16 é diferente de " + result3483 + " <iresult.getCardinality()>")
chamada antiga: assertTrue(iresult instanceof MappeableRunContainer)
nova chamada: assertTrue(iresult instanceof MappeableRunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(-1, result.getCardinality())
nova chamada: assertEquals(-1, result.getCardinality(), "Era esperado valores iguais, mas  -1 é diferente de " + result3484 + " <result.getCardinality()>")
chamada antiga: assertEquals(-1, iresult.getCardinality())
nova chamada: assertEquals(-1, iresult.getCardinality(), "Era esperado valores iguais, mas  -1 é diferente de " + result3485 + " <iresult.getCardinality()>")
chamada antiga: assertEquals(1 << 16, repaired.getCardinality())
nova chamada: assertEquals(1 << 16, repaired.getCardinality(), "Era esperado valores iguais, mas  1  16 é diferente de " + result3486 + " <repaired.getCardinality()>")
chamada antiga: assertEquals(1 << 16, irepaired.getCardinality())
nova chamada: assertEquals(1 << 16, irepaired.getCardinality(), "Era esperado valores iguais, mas  1  16 é diferente de " + result3487 + " <irepaired.getCardinality()>")
chamada antiga: assertTrue(repaired instanceof MappeableRunContainer)
nova chamada: assertTrue(repaired instanceof MappeableRunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(irepaired instanceof MappeableRunContainer)
nova chamada: assertTrue(irepaired instanceof MappeableRunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(-1, result.getCardinality())
nova chamada: assertEquals(-1, result.getCardinality(), "Era esperado valores iguais, mas  -1 é diferente de " + result3488 + " <result.getCardinality()>")
chamada antiga: assertEquals(-1, iresult.getCardinality())
nova chamada: assertEquals(-1, iresult.getCardinality(), "Era esperado valores iguais, mas  -1 é diferente de " + result3489 + " <iresult.getCardinality()>")
chamada antiga: assertEquals(1 << 16, repaired.getCardinality())
nova chamada: assertEquals(1 << 16, repaired.getCardinality(), "Era esperado valores iguais, mas  1  16 é diferente de " + result3490 + " <repaired.getCardinality()>")
chamada antiga: assertEquals(1 << 16, irepaired.getCardinality())
nova chamada: assertEquals(1 << 16, irepaired.getCardinality(), "Era esperado valores iguais, mas  1  16 é diferente de " + result3491 + " <irepaired.getCardinality()>")
chamada antiga: assertTrue(repaired instanceof MappeableRunContainer)
nova chamada: assertTrue(repaired instanceof MappeableRunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(irepaired instanceof MappeableRunContainer)
nova chamada: assertTrue(irepaired instanceof MappeableRunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(62, mbc.first())
nova chamada: assertEquals(62, mbc.first(), "Era esperado valores iguais, mas  62 é diferente de " + result3492 + " <mbc.first()>")
chamada antiga: assertEquals(96, mbc.last())
nova chamada: assertEquals(96, mbc.last(), "Era esperado valores iguais, mas  96 é diferente de " + result3493 + " <mbc.last()>")
chamada antiga: assertTrue(container.intersects(0, 1))
nova chamada: assertTrue(container.intersects(0, 1), "Era esperado verdadeiro, mas " + result3494 + " <container.intersects(0, 1)> é falso")
chamada antiga: assertTrue(container.intersects(0, 101))
nova chamada: assertTrue(container.intersects(0, 101), "Era esperado verdadeiro, mas " + result3495 + " <container.intersects(0, 101)> é falso")
chamada antiga: assertTrue(container.intersects(0, 1 << 16))
nova chamada: assertTrue(container.intersects(0, 1 << 16), "Era esperado verdadeiro, mas " + result3496 + " <container.intersects(0, 1 << 16)> é falso")
chamada antiga: assertFalse(container.intersects(11, lower16Bits(-1)))
nova chamada: assertFalse(container.intersects(11, lower16Bits(-1)), "Era esperado falso, mas " + result3497 + " <container.intersects(11, lower16Bits(-1))> é verdadeiro ")
chamada antiga: assertEquals(intersects, container.intersects(min, sup))
nova chamada: assertEquals(intersects, container.intersects(min, sup), "Era esperado valores iguais, mas  intersects é diferente de " + result3498 + " <container.intersects(min, sup)>")
chamada antiga: assertTrue(container.intersects(0, 1))
nova chamada: assertTrue(container.intersects(0, 1), "Era esperado verdadeiro, mas " + result3499 + " <container.intersects(0, 1)> é falso")
chamada antiga: assertTrue(container.intersects(0, 101))
nova chamada: assertTrue(container.intersects(0, 101), "Era esperado verdadeiro, mas " + result3500 + " <container.intersects(0, 101)> é falso")
chamada antiga: assertTrue(container.intersects(0, 1 << 16))
nova chamada: assertTrue(container.intersects(0, 1 << 16), "Era esperado verdadeiro, mas " + result3501 + " <container.intersects(0, 1 << 16)> é falso")
chamada antiga: assertTrue(container.intersects(11, 1 << 16))
nova chamada: assertTrue(container.intersects(11, 1 << 16), "Era esperado verdadeiro, mas " + result3502 + " <container.intersects(11, 1 << 16)> é falso")
chamada antiga: assertTrue(container.intersects(501, 511))
nova chamada: assertTrue(container.intersects(501, 511), "Era esperado verdadeiro, mas " + result3503 + " <container.intersects(501, 511)> é falso")
chamada antiga: assertFalse(container.intersects(0, 1))
nova chamada: assertFalse(container.intersects(0, 1), "Era esperado falso, mas " + result3504 + " <container.intersects(0, 1)> é verdadeiro ")
chamada antiga: assertTrue(container.intersects(0, lower16Bits(-40)))
nova chamada: assertTrue(container.intersects(0, lower16Bits(-40)), "Era esperado verdadeiro, mas " + result3505 + " <container.intersects(0, lower16Bits(-40))> é falso")
chamada antiga: assertFalse(container.intersects(lower16Bits(-100), lower16Bits(-55)))
nova chamada: assertFalse(container.intersects(lower16Bits(-100), lower16Bits(-55)), "Era esperado falso, mas " + result3506 + " <container.intersects(lower16Bits(-100), lower16Bits(-55))> é verdadeiro ")
chamada antiga: assertFalse(container.intersects(lower16Bits(-9), lower16Bits(-1)))
nova chamada: assertFalse(container.intersects(lower16Bits(-9), lower16Bits(-1)), "Era esperado falso, mas " + result3507 + " <container.intersects(lower16Bits(-9), lower16Bits(-1))> é verdadeiro ")
chamada antiga: assertTrue(container.intersects(lower16Bits(-50), lower16Bits(-10)))
nova chamada: assertTrue(container.intersects(lower16Bits(-50), lower16Bits(-10)), "Era esperado verdadeiro, mas " + result3508 + " <container.intersects(lower16Bits(-50), lower16Bits(-10))> é falso")
chamada antiga: assertTrue(container.intersects(lower16Bits(-400), lower16Bits(-11)))
nova chamada: assertTrue(container.intersects(lower16Bits(-400), lower16Bits(-11)), "Era esperado verdadeiro, mas " + result3509 + " <container.intersects(lower16Bits(-400), lower16Bits(-11))> é falso")
chamada antiga: assertTrue(container.intersects(lower16Bits(-11), lower16Bits(-1)))
nova chamada: assertTrue(container.intersects(lower16Bits(-11), lower16Bits(-1)), "Era esperado verdadeiro, mas " + result3510 + " <container.intersects(lower16Bits(-11), lower16Bits(-1))> é falso")
chamada antiga: assertFalse(container.intersects(lower16Bits(-10), lower16Bits(-1)))
nova chamada: assertFalse(container.intersects(lower16Bits(-10), lower16Bits(-1)), "Era esperado falso, mas " + result3511 + " <container.intersects(lower16Bits(-10), lower16Bits(-1))> é verdadeiro ")
chamada antiga: assertTrue(container.intersects(lower16Bits(-650), lower16Bits(-500)))
nova chamada: assertTrue(container.intersects(lower16Bits(-650), lower16Bits(-500)), "Era esperado verdadeiro, mas " + result3512 + " <container.intersects(lower16Bits(-650), lower16Bits(-500))> é falso")
chamada antiga: assertTrue(container.intersects(lower16Bits(-501), lower16Bits(-1)))
nova chamada: assertTrue(container.intersects(lower16Bits(-501), lower16Bits(-1)), "Era esperado verdadeiro, mas " + result3513 + " <container.intersects(lower16Bits(-501), lower16Bits(-1))> é falso")
chamada antiga: assertFalse(container.intersects(lower16Bits(-500), lower16Bits(-1)))
nova chamada: assertFalse(container.intersects(lower16Bits(-500), lower16Bits(-1)), "Era esperado falso, mas " + result3514 + " <container.intersects(lower16Bits(-500), lower16Bits(-1))> é verdadeiro ")
chamada antiga: assertFalse(container.intersects(lower16Bits(-499), 1 << 16))
nova chamada: assertFalse(container.intersects(lower16Bits(-499), 1 << 16), "Era esperado falso, mas " + result3515 + " <container.intersects(lower16Bits(-499), 1 << 16)> é verdadeiro ")
chamada antiga: assertTrue(container.contains(0, 1))
nova chamada: assertTrue(container.contains(0, 1), "Era esperado verdadeiro, mas " + result3516 + " <container.contains(0, 1)> é falso")
chamada antiga: assertTrue(container.contains(64 * 10, 64 * 11))
nova chamada: assertTrue(container.contains(64 * 10, 64 * 11), "Era esperado verdadeiro, mas " + result3517 + " <container.contains(64 * 10, 64 * 11)> é falso")
chamada antiga: assertFalse(container.contains(64 * 10, 2 + 64 * 11))
nova chamada: assertFalse(container.contains(64 * 10, 2 + 64 * 11), "Era esperado falso, mas " + result3518 + " <container.contains(64 * 10, 2 + 64 * 11)> é verdadeiro ")
chamada antiga: assertTrue(container.contains(1 + 64 * 10, (64 * 11) - 1))
nova chamada: assertTrue(container.contains(1 + 64 * 10, (64 * 11) - 1), "Era esperado verdadeiro, mas " + result3519 + " <container.contains(1 + 64 * 10, (64 * 11) - 1)> é falso")
chamada antiga: assertTrue(container.contains(0, 1))
nova chamada: assertTrue(container.contains(0, 1), "Era esperado verdadeiro, mas " + result3520 + " <container.contains(0, 1)> é falso")
chamada antiga: assertFalse(container.contains(64 * 10, (64 * 13) - 30))
nova chamada: assertFalse(container.contains(64 * 10, (64 * 13) - 30), "Era esperado falso, mas " + result3521 + " <container.contains(64 * 10, (64 * 13) - 30)> é verdadeiro ")
chamada antiga: assertTrue(container.contains(64 * 10, (64 * 13) - 31))
nova chamada: assertTrue(container.contains(64 * 10, (64 * 13) - 31), "Era esperado verdadeiro, mas " + result3522 + " <container.contains(64 * 10, (64 * 13) - 31)> é falso")
chamada antiga: assertTrue(container.contains(1 + 64 * 10, (64 * 13) - 32))
nova chamada: assertTrue(container.contains(1 + 64 * 10, (64 * 13) - 32), "Era esperado verdadeiro, mas " + result3523 + " <container.contains(1 + 64 * 10, (64 * 13) - 32)> é falso")
chamada antiga: assertTrue(container.contains(64 * 10, 64 * 12))
nova chamada: assertTrue(container.contains(64 * 10, 64 * 12), "Era esperado verdadeiro, mas " + result3524 + " <container.contains(64 * 10, 64 * 12)> é falso")
chamada antiga: assertFalse(container.contains(64 * 10, 2 + 64 * 13))
nova chamada: assertFalse(container.contains(64 * 10, 2 + 64 * 13), "Era esperado falso, mas " + result3525 + " <container.contains(64 * 10, 2 + 64 * 13)> é verdadeiro ")
chamada antiga: assertFalse(container.contains(64 * 1023, 64 * 1024))
nova chamada: assertFalse(container.contains(64 * 1023, 64 * 1024), "Era esperado falso, mas " + result3526 + " <container.contains(64 * 1023, 64 * 1024)> é verdadeiro ")
chamada antiga: assertFalse(container.contains(64 * 1023, 64 * 1024 - 1))
nova chamada: assertFalse(container.contains(64 * 1023, 64 * 1024 - 1), "Era esperado falso, mas " + result3527 + " <container.contains(64 * 1023, 64 * 1024 - 1)> é verdadeiro ")
chamada antiga: assertTrue(container.contains(1 + 64 * 1023, 64 * 1024 - 1))
nova chamada: assertTrue(container.contains(1 + 64 * 1023, 64 * 1024 - 1), "Era esperado verdadeiro, mas " + result3528 + " <container.contains(1 + 64 * 1023, 64 * 1024 - 1)> é falso")
chamada antiga: assertTrue(container.contains(1 + 64 * 1023, 64 * 1024 - 2))
nova chamada: assertTrue(container.contains(1 + 64 * 1023, 64 * 1024 - 2), "Era esperado verdadeiro, mas " + result3529 + " <container.contains(1 + 64 * 1023, 64 * 1024 - 2)> é falso")
chamada antiga: assertFalse(container.contains(64 * 1023, 64 * 1023 + 2))
nova chamada: assertFalse(container.contains(64 * 1023, 64 * 1023 + 2), "Era esperado falso, mas " + result3530 + " <container.contains(64 * 1023, 64 * 1023 + 2)> é verdadeiro ")
chamada antiga: assertTrue(container.contains(64 * 1023 + 1, 64 * 1023 + 2))
nova chamada: assertTrue(container.contains(64 * 1023 + 1, 64 * 1023 + 2), "Era esperado verdadeiro, mas " + result3531 + " <container.contains(64 * 1023 + 1, 64 * 1023 + 2)> é falso")
chamada antiga: assertEquals(10, container.nextValue((char) 10))
nova chamada: assertEquals(10, container.nextValue((char) 10), "Era esperado valores iguais, mas  10 é diferente de " + result3532 + " <container.nextValue((char) 10)>")
chamada antiga: assertEquals(20, container.nextValue((char) 11))
nova chamada: assertEquals(20, container.nextValue((char) 11), "Era esperado valores iguais, mas  20 é diferente de " + result3533 + " <container.nextValue((char) 11)>")
chamada antiga: assertEquals(30, container.nextValue((char) 30))
nova chamada: assertEquals(30, container.nextValue((char) 30), "Era esperado valores iguais, mas  30 é diferente de " + result3534 + " <container.nextValue((char) 30)>")
chamada antiga: assertEquals(-1, container.nextValue((char) 31))
nova chamada: assertEquals(-1, container.nextValue((char) 31), "Era esperado valores iguais, mas  -1 é diferente de " + result3535 + " <container.nextValue((char) 31)>")
chamada antiga: assertEquals(64, container.nextValue((char) 0))
nova chamada: assertEquals(64, container.nextValue((char) 0), "Era esperado valores iguais, mas  64 é diferente de " + result3536 + " <container.nextValue((char) 0)>")
chamada antiga: assertEquals(64, container.nextValue((char) 64))
nova chamada: assertEquals(64, container.nextValue((char) 64), "Era esperado valores iguais, mas  64 é diferente de " + result3537 + " <container.nextValue((char) 64)>")
chamada antiga: assertEquals(65, container.nextValue((char) 65))
nova chamada: assertEquals(65, container.nextValue((char) 65), "Era esperado valores iguais, mas  65 é diferente de " + result3538 + " <container.nextValue((char) 65)>")
chamada antiga: assertEquals(128, container.nextValue((char) 128))
nova chamada: assertEquals(128, container.nextValue((char) 128), "Era esperado valores iguais, mas  128 é diferente de " + result3539 + " <container.nextValue((char) 128)>")
chamada antiga: assertEquals(-1, container.nextValue((char) 129))
nova chamada: assertEquals(-1, container.nextValue((char) 129), "Era esperado valores iguais, mas  -1 é diferente de " + result3540 + " <container.nextValue((char) 129)>")
chamada antiga: assertEquals(-1, container.nextValue((char) 5000))
nova chamada: assertEquals(-1, container.nextValue((char) 5000), "Era esperado valores iguais, mas  -1 é diferente de " + result3541 + " <container.nextValue((char) 5000)>")
chamada antiga: assertEquals(64, container.nextValue((char) 0))
nova chamada: assertEquals(64, container.nextValue((char) 0), "Era esperado valores iguais, mas  64 é diferente de " + result3542 + " <container.nextValue((char) 0)>")
chamada antiga: assertEquals(64, container.nextValue((char) 64))
nova chamada: assertEquals(64, container.nextValue((char) 64), "Era esperado valores iguais, mas  64 é diferente de " + result3543 + " <container.nextValue((char) 64)>")
chamada antiga: assertEquals(65, container.nextValue((char) 65))
nova chamada: assertEquals(65, container.nextValue((char) 65), "Era esperado valores iguais, mas  65 é diferente de " + result3544 + " <container.nextValue((char) 65)>")
chamada antiga: assertEquals(128, container.nextValue((char) 128))
nova chamada: assertEquals(128, container.nextValue((char) 128), "Era esperado valores iguais, mas  128 é diferente de " + result3545 + " <container.nextValue((char) 128)>")
chamada antiga: assertEquals(256, container.nextValue((char) 129))
nova chamada: assertEquals(256, container.nextValue((char) 129), "Era esperado valores iguais, mas  256 é diferente de " + result3546 + " <container.nextValue((char) 129)>")
chamada antiga: assertEquals(-1, container.nextValue((char) 512))
nova chamada: assertEquals(-1, container.nextValue((char) 512), "Era esperado valores iguais, mas  -1 é diferente de " + result3547 + " <container.nextValue((char) 512)>")
chamada antiga: assertEquals(64, container.nextValue((char) 0))
nova chamada: assertEquals(64, container.nextValue((char) 0), "Era esperado valores iguais, mas  64 é diferente de " + result3548 + " <container.nextValue((char) 0)>")
chamada antiga: assertEquals(64, container.nextValue((char) 63))
nova chamada: assertEquals(64, container.nextValue((char) 63), "Era esperado valores iguais, mas  64 é diferente de " + result3549 + " <container.nextValue((char) 63)>")
chamada antiga: assertEquals(64, container.nextValue((char) 64))
nova chamada: assertEquals(64, container.nextValue((char) 64), "Era esperado valores iguais, mas  64 é diferente de " + result3550 + " <container.nextValue((char) 64)>")
chamada antiga: assertEquals(65, container.nextValue((char) 65))
nova chamada: assertEquals(65, container.nextValue((char) 65), "Era esperado valores iguais, mas  65 é diferente de " + result3551 + " <container.nextValue((char) 65)>")
chamada antiga: assertEquals(128, container.nextValue((char) 128))
nova chamada: assertEquals(128, container.nextValue((char) 128), "Era esperado valores iguais, mas  128 é diferente de " + result3552 + " <container.nextValue((char) 128)>")
chamada antiga: assertEquals(200, container.nextValue((char) 129))
nova chamada: assertEquals(200, container.nextValue((char) 129), "Era esperado valores iguais, mas  200 é diferente de " + result3553 + " <container.nextValue((char) 129)>")
chamada antiga: assertEquals(200, container.nextValue((char) 199))
nova chamada: assertEquals(200, container.nextValue((char) 199), "Era esperado valores iguais, mas  200 é diferente de " + result3554 + " <container.nextValue((char) 199)>")
chamada antiga: assertEquals(200, container.nextValue((char) 200))
nova chamada: assertEquals(200, container.nextValue((char) 200), "Era esperado valores iguais, mas  200 é diferente de " + result3555 + " <container.nextValue((char) 200)>")
chamada antiga: assertEquals(250, container.nextValue((char) 250))
nova chamada: assertEquals(250, container.nextValue((char) 250), "Era esperado valores iguais, mas  250 é diferente de " + result3556 + " <container.nextValue((char) 250)>")
chamada antiga: assertEquals(5000, container.nextValue((char) 2500))
nova chamada: assertEquals(5000, container.nextValue((char) 2500), "Era esperado valores iguais, mas  5000 é diferente de " + result3557 + " <container.nextValue((char) 2500)>")
chamada antiga: assertEquals(5000, container.nextValue((char) 5000))
nova chamada: assertEquals(5000, container.nextValue((char) 5000), "Era esperado valores iguais, mas  5000 é diferente de " + result3558 + " <container.nextValue((char) 5000)>")
chamada antiga: assertEquals(5200, container.nextValue((char) 5200))
nova chamada: assertEquals(5200, container.nextValue((char) 5200), "Era esperado valores iguais, mas  5200 é diferente de " + result3559 + " <container.nextValue((char) 5200)>")
chamada antiga: assertEquals(-1, container.nextValue((char) 5201))
nova chamada: assertEquals(-1, container.nextValue((char) 5201), "Era esperado valores iguais, mas  -1 é diferente de " + result3560 + " <container.nextValue((char) 5201)>")
chamada antiga: assertEquals(-1, container.previousValue((char) 0))
nova chamada: assertEquals(-1, container.previousValue((char) 0), "Era esperado valores iguais, mas  -1 é diferente de " + result3561 + " <container.previousValue((char) 0)>")
chamada antiga: assertEquals(-1, container.previousValue((char) 63))
nova chamada: assertEquals(-1, container.previousValue((char) 63), "Era esperado valores iguais, mas  -1 é diferente de " + result3562 + " <container.previousValue((char) 63)>")
chamada antiga: assertEquals(64, container.previousValue((char) 64))
nova chamada: assertEquals(64, container.previousValue((char) 64), "Era esperado valores iguais, mas  64 é diferente de " + result3563 + " <container.previousValue((char) 64)>")
chamada antiga: assertEquals(65, container.previousValue((char) 65))
nova chamada: assertEquals(65, container.previousValue((char) 65), "Era esperado valores iguais, mas  65 é diferente de " + result3564 + " <container.previousValue((char) 65)>")
chamada antiga: assertEquals(128, container.previousValue((char) 128))
nova chamada: assertEquals(128, container.previousValue((char) 128), "Era esperado valores iguais, mas  128 é diferente de " + result3565 + " <container.previousValue((char) 128)>")
chamada antiga: assertEquals(128, container.previousValue((char) 129))
nova chamada: assertEquals(128, container.previousValue((char) 129), "Era esperado valores iguais, mas  128 é diferente de " + result3566 + " <container.previousValue((char) 129)>")
chamada antiga: assertEquals(-1, container.previousValue((char) 0))
nova chamada: assertEquals(-1, container.previousValue((char) 0), "Era esperado valores iguais, mas  -1 é diferente de " + result3567 + " <container.previousValue((char) 0)>")
chamada antiga: assertEquals(-1, container.previousValue((char) 63))
nova chamada: assertEquals(-1, container.previousValue((char) 63), "Era esperado valores iguais, mas  -1 é diferente de " + result3568 + " <container.previousValue((char) 63)>")
chamada antiga: assertEquals(64, container.previousValue((char) 64))
nova chamada: assertEquals(64, container.previousValue((char) 64), "Era esperado valores iguais, mas  64 é diferente de " + result3569 + " <container.previousValue((char) 64)>")
chamada antiga: assertEquals(65, container.previousValue((char) 65))
nova chamada: assertEquals(65, container.previousValue((char) 65), "Era esperado valores iguais, mas  65 é diferente de " + result3570 + " <container.previousValue((char) 65)>")
chamada antiga: assertEquals(128, container.previousValue((char) 128))
nova chamada: assertEquals(128, container.previousValue((char) 128), "Era esperado valores iguais, mas  128 é diferente de " + result3571 + " <container.previousValue((char) 128)>")
chamada antiga: assertEquals(128, container.previousValue((char) 129))
nova chamada: assertEquals(128, container.previousValue((char) 129), "Era esperado valores iguais, mas  128 é diferente de " + result3572 + " <container.previousValue((char) 129)>")
chamada antiga: assertEquals(128, container.previousValue((char) 199))
nova chamada: assertEquals(128, container.previousValue((char) 199), "Era esperado valores iguais, mas  128 é diferente de " + result3573 + " <container.previousValue((char) 199)>")
chamada antiga: assertEquals(200, container.previousValue((char) 200))
nova chamada: assertEquals(200, container.previousValue((char) 200), "Era esperado valores iguais, mas  200 é diferente de " + result3574 + " <container.previousValue((char) 200)>")
chamada antiga: assertEquals(250, container.previousValue((char) 250))
nova chamada: assertEquals(250, container.previousValue((char) 250), "Era esperado valores iguais, mas  250 é diferente de " + result3575 + " <container.previousValue((char) 250)>")
chamada antiga: assertEquals(500, container.previousValue((char) 2500))
nova chamada: assertEquals(500, container.previousValue((char) 2500), "Era esperado valores iguais, mas  500 é diferente de " + result3576 + " <container.previousValue((char) 2500)>")
chamada antiga: assertEquals(5000, container.previousValue((char) 5000))
nova chamada: assertEquals(5000, container.previousValue((char) 5000), "Era esperado valores iguais, mas  5000 é diferente de " + result3577 + " <container.previousValue((char) 5000)>")
chamada antiga: assertEquals(5200, container.previousValue((char) 5200))
nova chamada: assertEquals(5200, container.previousValue((char) 5200), "Era esperado valores iguais, mas  5200 é diferente de " + result3578 + " <container.previousValue((char) 5200)>")
chamada antiga: assertEquals(-1, container.previousValue((char) 5))
nova chamada: assertEquals(-1, container.previousValue((char) 5), "Era esperado valores iguais, mas  -1 é diferente de " + result3579 + " <container.previousValue((char) 5)>")
chamada antiga: assertEquals(-1, container.previousValue((char) 9))
nova chamada: assertEquals(-1, container.previousValue((char) 9), "Era esperado valores iguais, mas  -1 é diferente de " + result3580 + " <container.previousValue((char) 9)>")
chamada antiga: assertEquals(10, container.previousValue((char) 10))
nova chamada: assertEquals(10, container.previousValue((char) 10), "Era esperado valores iguais, mas  10 é diferente de " + result3581 + " <container.previousValue((char) 10)>")
chamada antiga: assertEquals(10, container.previousValue((char) 11))
nova chamada: assertEquals(10, container.previousValue((char) 11), "Era esperado valores iguais, mas  10 é diferente de " + result3582 + " <container.previousValue((char) 11)>")
chamada antiga: assertEquals(20, container.previousValue((char) 21))
nova chamada: assertEquals(20, container.previousValue((char) 21), "Era esperado valores iguais, mas  20 é diferente de " + result3583 + " <container.previousValue((char) 21)>")
chamada antiga: assertEquals(30, container.previousValue((char) 30))
nova chamada: assertEquals(30, container.previousValue((char) 30), "Era esperado valores iguais, mas  30 é diferente de " + result3584 + " <container.previousValue((char) 30)>")
chamada antiga: assertEquals(30, container.previousValue((char) 31))
nova chamada: assertEquals(30, container.previousValue((char) 31), "Era esperado valores iguais, mas  30 é diferente de " + result3585 + " <container.previousValue((char) 31)>")
chamada antiga: assertEquals(0, container.previousValue((char) 0))
nova chamada: assertEquals(0, container.previousValue((char) 0), "Era esperado valores iguais, mas  0 é diferente de " + result3586 + " <container.previousValue((char) 0)>")
chamada antiga: assertEquals(0, container.previousValue((char) 1))
nova chamada: assertEquals(0, container.previousValue((char) 1), "Era esperado valores iguais, mas  0 é diferente de " + result3587 + " <container.previousValue((char) 1)>")
chamada antiga: assertEquals(2, container.previousValue((char) 2))
nova chamada: assertEquals(2, container.previousValue((char) 2), "Era esperado valores iguais, mas  2 é diferente de " + result3588 + " <container.previousValue((char) 2)>")
chamada antiga: assertEquals(2, container.previousValue((char) 3))
nova chamada: assertEquals(2, container.previousValue((char) 3), "Era esperado valores iguais, mas  2 é diferente de " + result3589 + " <container.previousValue((char) 3)>")
chamada antiga: assertEquals(-1, container.previousValue((char) ((1 << 15) | 4)))
nova chamada: assertEquals(-1, container.previousValue((char) ((1 << 15) | 4)), "Era esperado valores iguais, mas  -1 é diferente de " + result3590 + " <container.previousValue((char) ((1 << 15) | 4))>")
chamada antiga: assertEquals(((1 << 15) | 5), container.previousValue((char) ((1 << 15) | 5)))
nova chamada: assertEquals(((1 << 15) | 5), container.previousValue((char) ((1 << 15) | 5)), "Era esperado valores iguais, mas  ((1  15) | 5) é diferente de " + result3591 + " <container.previousValue((char) ((1 << 15) | 5))>")
chamada antiga: assertEquals(((1 << 15) | 5), container.previousValue((char) ((1 << 15) | 6)))
nova chamada: assertEquals(((1 << 15) | 5), container.previousValue((char) ((1 << 15) | 6)), "Era esperado valores iguais, mas  ((1  15) | 5) é diferente de " + result3592 + " <container.previousValue((char) ((1 << 15) | 6))>")
chamada antiga: assertEquals(((1 << 15) | 7), container.previousValue((char) ((1 << 15) | 7)))
nova chamada: assertEquals(((1 << 15) | 7), container.previousValue((char) ((1 << 15) | 7)), "Era esperado valores iguais, mas  ((1  15) | 7) é diferente de " + result3593 + " <container.previousValue((char) ((1 << 15) | 7))>")
chamada antiga: assertEquals(((1 << 15) | 7), container.previousValue((char) ((1 << 15) | 8)))
nova chamada: assertEquals(((1 << 15) | 7), container.previousValue((char) ((1 << 15) | 8)), "Era esperado valores iguais, mas  ((1  15) | 7) é diferente de " + result3594 + " <container.previousValue((char) ((1 << 15) | 8))>")
chamada antiga: assertEquals(((1 << 15) | 5), container.nextValue((char) ((1 << 15) | 4)))
nova chamada: assertEquals(((1 << 15) | 5), container.nextValue((char) ((1 << 15) | 4)), "Era esperado valores iguais, mas  ((1  15) | 5) é diferente de " + result3595 + " <container.nextValue((char) ((1 << 15) | 4))>")
chamada antiga: assertEquals(((1 << 15) | 5), container.nextValue((char) ((1 << 15) | 5)))
nova chamada: assertEquals(((1 << 15) | 5), container.nextValue((char) ((1 << 15) | 5)), "Era esperado valores iguais, mas  ((1  15) | 5) é diferente de " + result3596 + " <container.nextValue((char) ((1 << 15) | 5))>")
chamada antiga: assertEquals(((1 << 15) | 7), container.nextValue((char) ((1 << 15) | 6)))
nova chamada: assertEquals(((1 << 15) | 7), container.nextValue((char) ((1 << 15) | 6)), "Era esperado valores iguais, mas  ((1  15) | 7) é diferente de " + result3597 + " <container.nextValue((char) ((1 << 15) | 6))>")
chamada antiga: assertEquals(((1 << 15) | 7), container.nextValue((char) ((1 << 15) | 7)))
nova chamada: assertEquals(((1 << 15) | 7), container.nextValue((char) ((1 << 15) | 7)), "Era esperado valores iguais, mas  ((1  15) | 7) é diferente de " + result3598 + " <container.nextValue((char) ((1 << 15) | 7))>")
chamada antiga: assertEquals(-1, container.nextValue((char) ((1 << 15) | 8)))
nova chamada: assertEquals(-1, container.nextValue((char) ((1 << 15) | 8)), "Era esperado valores iguais, mas  -1 é diferente de " + result3599 + " <container.nextValue((char) ((1 << 15) | 8))>")
chamada antiga: assertEquals(0, container.previousAbsentValue((char) 0))
nova chamada: assertEquals(0, container.previousAbsentValue((char) 0), "Era esperado valores iguais, mas  0 é diferente de " + result3600 + " <container.previousAbsentValue((char) 0)>")
chamada antiga: assertEquals(63, container.previousAbsentValue((char) 63))
nova chamada: assertEquals(63, container.previousAbsentValue((char) 63), "Era esperado valores iguais, mas  63 é diferente de " + result3601 + " <container.previousAbsentValue((char) 63)>")
chamada antiga: assertEquals(63, container.previousAbsentValue((char) 64))
nova chamada: assertEquals(63, container.previousAbsentValue((char) 64), "Era esperado valores iguais, mas  63 é diferente de " + result3602 + " <container.previousAbsentValue((char) 64)>")
chamada antiga: assertEquals(63, container.previousAbsentValue((char) 65))
nova chamada: assertEquals(63, container.previousAbsentValue((char) 65), "Era esperado valores iguais, mas  63 é diferente de " + result3603 + " <container.previousAbsentValue((char) 65)>")
chamada antiga: assertEquals(63, container.previousAbsentValue((char) 128))
nova chamada: assertEquals(63, container.previousAbsentValue((char) 128), "Era esperado valores iguais, mas  63 é diferente de " + result3604 + " <container.previousAbsentValue((char) 128)>")
chamada antiga: assertEquals(129, container.previousAbsentValue((char) 129))
nova chamada: assertEquals(129, container.previousAbsentValue((char) 129), "Era esperado valores iguais, mas  129 é diferente de " + result3605 + " <container.previousAbsentValue((char) 129)>")
chamada antiga: assertEquals(0, container.previousAbsentValue((char) 0))
nova chamada: assertEquals(0, container.previousAbsentValue((char) 0), "Era esperado valores iguais, mas  0 é diferente de " + result3606 + " <container.previousAbsentValue((char) 0)>")
chamada antiga: assertEquals(63, container.previousAbsentValue((char) 63))
nova chamada: assertEquals(63, container.previousAbsentValue((char) 63), "Era esperado valores iguais, mas  63 é diferente de " + result3607 + " <container.previousAbsentValue((char) 63)>")
chamada antiga: assertEquals(63, container.previousAbsentValue((char) 64))
nova chamada: assertEquals(63, container.previousAbsentValue((char) 64), "Era esperado valores iguais, mas  63 é diferente de " + result3608 + " <container.previousAbsentValue((char) 64)>")
chamada antiga: assertEquals(63, container.previousAbsentValue((char) 65))
nova chamada: assertEquals(63, container.previousAbsentValue((char) 65), "Era esperado valores iguais, mas  63 é diferente de " + result3609 + " <container.previousAbsentValue((char) 65)>")
chamada antiga: assertEquals(63, container.previousAbsentValue((char) 128))
nova chamada: assertEquals(63, container.previousAbsentValue((char) 128), "Era esperado valores iguais, mas  63 é diferente de " + result3610 + " <container.previousAbsentValue((char) 128)>")
chamada antiga: assertEquals(129, container.previousAbsentValue((char) 129))
nova chamada: assertEquals(129, container.previousAbsentValue((char) 129), "Era esperado valores iguais, mas  129 é diferente de " + result3611 + " <container.previousAbsentValue((char) 129)>")
chamada antiga: assertEquals(199, container.previousAbsentValue((char) 199))
nova chamada: assertEquals(199, container.previousAbsentValue((char) 199), "Era esperado valores iguais, mas  199 é diferente de " + result3612 + " <container.previousAbsentValue((char) 199)>")
chamada antiga: assertEquals(199, container.previousAbsentValue((char) 200))
nova chamada: assertEquals(199, container.previousAbsentValue((char) 200), "Era esperado valores iguais, mas  199 é diferente de " + result3613 + " <container.previousAbsentValue((char) 200)>")
chamada antiga: assertEquals(199, container.previousAbsentValue((char) 250))
nova chamada: assertEquals(199, container.previousAbsentValue((char) 250), "Era esperado valores iguais, mas  199 é diferente de " + result3614 + " <container.previousAbsentValue((char) 250)>")
chamada antiga: assertEquals(2500, container.previousAbsentValue((char) 2500))
nova chamada: assertEquals(2500, container.previousAbsentValue((char) 2500), "Era esperado valores iguais, mas  2500 é diferente de " + result3615 + " <container.previousAbsentValue((char) 2500)>")
chamada antiga: assertEquals(4999, container.previousAbsentValue((char) 5000))
nova chamada: assertEquals(4999, container.previousAbsentValue((char) 5000), "Era esperado valores iguais, mas  4999 é diferente de " + result3616 + " <container.previousAbsentValue((char) 5000)>")
chamada antiga: assertEquals(4999, container.previousAbsentValue((char) 5200))
nova chamada: assertEquals(4999, container.previousAbsentValue((char) 5200), "Era esperado valores iguais, mas  4999 é diferente de " + result3617 + " <container.previousAbsentValue((char) 5200)>")
chamada antiga: assertEquals(9, container.previousAbsentValue((char) 9))
nova chamada: assertEquals(9, container.previousAbsentValue((char) 9), "Era esperado valores iguais, mas  9 é diferente de " + result3618 + " <container.previousAbsentValue((char) 9)>")
chamada antiga: assertEquals(9, container.previousAbsentValue((char) 10))
nova chamada: assertEquals(9, container.previousAbsentValue((char) 10), "Era esperado valores iguais, mas  9 é diferente de " + result3619 + " <container.previousAbsentValue((char) 10)>")
chamada antiga: assertEquals(11, container.previousAbsentValue((char) 11))
nova chamada: assertEquals(11, container.previousAbsentValue((char) 11), "Era esperado valores iguais, mas  11 é diferente de " + result3620 + " <container.previousAbsentValue((char) 11)>")
chamada antiga: assertEquals(21, container.previousAbsentValue((char) 21))
nova chamada: assertEquals(21, container.previousAbsentValue((char) 21), "Era esperado valores iguais, mas  21 é diferente de " + result3621 + " <container.previousAbsentValue((char) 21)>")
chamada antiga: assertEquals(29, container.previousAbsentValue((char) 30))
nova chamada: assertEquals(29, container.previousAbsentValue((char) 30), "Era esperado valores iguais, mas  29 é diferente de " + result3622 + " <container.previousAbsentValue((char) 30)>")
chamada antiga: assertEquals(((1 << 15) | 4), container.previousAbsentValue((char) ((1 << 15) | 4)))
nova chamada: assertEquals(((1 << 15) | 4), container.previousAbsentValue((char) ((1 << 15) | 4)), "Era esperado valores iguais, mas  ((1  15) | 4) é diferente de " + result3623 + " <container.previousAbsentValue((char) ((1 << 15) | 4))>")
chamada antiga: assertEquals(((1 << 15) | 4), container.previousAbsentValue((char) ((1 << 15) | 5)))
nova chamada: assertEquals(((1 << 15) | 4), container.previousAbsentValue((char) ((1 << 15) | 5)), "Era esperado valores iguais, mas  ((1  15) | 4) é diferente de " + result3624 + " <container.previousAbsentValue((char) ((1 << 15) | 5))>")
chamada antiga: assertEquals(((1 << 15) | 6), container.previousAbsentValue((char) ((1 << 15) | 6)))
nova chamada: assertEquals(((1 << 15) | 6), container.previousAbsentValue((char) ((1 << 15) | 6)), "Era esperado valores iguais, mas  ((1  15) | 6) é diferente de " + result3625 + " <container.previousAbsentValue((char) ((1 << 15) | 6))>")
chamada antiga: assertEquals(((1 << 15) | 6), container.previousAbsentValue((char) ((1 << 15) | 7)))
nova chamada: assertEquals(((1 << 15) | 6), container.previousAbsentValue((char) ((1 << 15) | 7)), "Era esperado valores iguais, mas  ((1  15) | 6) é diferente de " + result3626 + " <container.previousAbsentValue((char) ((1 << 15) | 7))>")
chamada antiga: assertEquals(((1 << 15) | 8), container.previousAbsentValue((char) ((1 << 15) | 8)))
nova chamada: assertEquals(((1 << 15) | 8), container.previousAbsentValue((char) ((1 << 15) | 8)), "Era esperado valores iguais, mas  ((1  15) | 8) é diferente de " + result3627 + " <container.previousAbsentValue((char) ((1 << 15) | 8))>")
chamada antiga: assertEquals(0, container.nextAbsentValue((char) 0))
nova chamada: assertEquals(0, container.nextAbsentValue((char) 0), "Era esperado valores iguais, mas  0 é diferente de " + result3628 + " <container.nextAbsentValue((char) 0)>")
chamada antiga: assertEquals(63, container.nextAbsentValue((char) 63))
nova chamada: assertEquals(63, container.nextAbsentValue((char) 63), "Era esperado valores iguais, mas  63 é diferente de " + result3629 + " <container.nextAbsentValue((char) 63)>")
chamada antiga: assertEquals(129, container.nextAbsentValue((char) 64))
nova chamada: assertEquals(129, container.nextAbsentValue((char) 64), "Era esperado valores iguais, mas  129 é diferente de " + result3630 + " <container.nextAbsentValue((char) 64)>")
chamada antiga: assertEquals(129, container.nextAbsentValue((char) 65))
nova chamada: assertEquals(129, container.nextAbsentValue((char) 65), "Era esperado valores iguais, mas  129 é diferente de " + result3631 + " <container.nextAbsentValue((char) 65)>")
chamada antiga: assertEquals(129, container.nextAbsentValue((char) 128))
nova chamada: assertEquals(129, container.nextAbsentValue((char) 128), "Era esperado valores iguais, mas  129 é diferente de " + result3632 + " <container.nextAbsentValue((char) 128)>")
chamada antiga: assertEquals(129, container.nextAbsentValue((char) 129))
nova chamada: assertEquals(129, container.nextAbsentValue((char) 129), "Era esperado valores iguais, mas  129 é diferente de " + result3633 + " <container.nextAbsentValue((char) 129)>")
chamada antiga: assertEquals(0, container.nextAbsentValue((char) 0))
nova chamada: assertEquals(0, container.nextAbsentValue((char) 0), "Era esperado valores iguais, mas  0 é diferente de " + result3634 + " <container.nextAbsentValue((char) 0)>")
chamada antiga: assertEquals(63, container.nextAbsentValue((char) 63))
nova chamada: assertEquals(63, container.nextAbsentValue((char) 63), "Era esperado valores iguais, mas  63 é diferente de " + result3635 + " <container.nextAbsentValue((char) 63)>")
chamada antiga: assertEquals(129, container.nextAbsentValue((char) 64))
nova chamada: assertEquals(129, container.nextAbsentValue((char) 64), "Era esperado valores iguais, mas  129 é diferente de " + result3636 + " <container.nextAbsentValue((char) 64)>")
chamada antiga: assertEquals(129, container.nextAbsentValue((char) 65))
nova chamada: assertEquals(129, container.nextAbsentValue((char) 65), "Era esperado valores iguais, mas  129 é diferente de " + result3637 + " <container.nextAbsentValue((char) 65)>")
chamada antiga: assertEquals(129, container.nextAbsentValue((char) 128))
nova chamada: assertEquals(129, container.nextAbsentValue((char) 128), "Era esperado valores iguais, mas  129 é diferente de " + result3638 + " <container.nextAbsentValue((char) 128)>")
chamada antiga: assertEquals(129, container.nextAbsentValue((char) 129))
nova chamada: assertEquals(129, container.nextAbsentValue((char) 129), "Era esperado valores iguais, mas  129 é diferente de " + result3639 + " <container.nextAbsentValue((char) 129)>")
chamada antiga: assertEquals(199, container.nextAbsentValue((char) 199))
nova chamada: assertEquals(199, container.nextAbsentValue((char) 199), "Era esperado valores iguais, mas  199 é diferente de " + result3640 + " <container.nextAbsentValue((char) 199)>")
chamada antiga: assertEquals(501, container.nextAbsentValue((char) 200))
nova chamada: assertEquals(501, container.nextAbsentValue((char) 200), "Era esperado valores iguais, mas  501 é diferente de " + result3641 + " <container.nextAbsentValue((char) 200)>")
chamada antiga: assertEquals(501, container.nextAbsentValue((char) 250))
nova chamada: assertEquals(501, container.nextAbsentValue((char) 250), "Era esperado valores iguais, mas  501 é diferente de " + result3642 + " <container.nextAbsentValue((char) 250)>")
chamada antiga: assertEquals(2500, container.nextAbsentValue((char) 2500))
nova chamada: assertEquals(2500, container.nextAbsentValue((char) 2500), "Era esperado valores iguais, mas  2500 é diferente de " + result3643 + " <container.nextAbsentValue((char) 2500)>")
chamada antiga: assertEquals(5201, container.nextAbsentValue((char) 5000))
nova chamada: assertEquals(5201, container.nextAbsentValue((char) 5000), "Era esperado valores iguais, mas  5201 é diferente de " + result3644 + " <container.nextAbsentValue((char) 5000)>")
chamada antiga: assertEquals(5201, container.nextAbsentValue((char) 5200))
nova chamada: assertEquals(5201, container.nextAbsentValue((char) 5200), "Era esperado valores iguais, mas  5201 é diferente de " + result3645 + " <container.nextAbsentValue((char) 5200)>")
chamada antiga: assertEquals(9, container.nextAbsentValue((char) 9))
nova chamada: assertEquals(9, container.nextAbsentValue((char) 9), "Era esperado valores iguais, mas  9 é diferente de " + result3646 + " <container.nextAbsentValue((char) 9)>")
chamada antiga: assertEquals(11, container.nextAbsentValue((char) 10))
nova chamada: assertEquals(11, container.nextAbsentValue((char) 10), "Era esperado valores iguais, mas  11 é diferente de " + result3647 + " <container.nextAbsentValue((char) 10)>")
chamada antiga: assertEquals(11, container.nextAbsentValue((char) 11))
nova chamada: assertEquals(11, container.nextAbsentValue((char) 11), "Era esperado valores iguais, mas  11 é diferente de " + result3648 + " <container.nextAbsentValue((char) 11)>")
chamada antiga: assertEquals(21, container.nextAbsentValue((char) 21))
nova chamada: assertEquals(21, container.nextAbsentValue((char) 21), "Era esperado valores iguais, mas  21 é diferente de " + result3649 + " <container.nextAbsentValue((char) 21)>")
chamada antiga: assertEquals(31, container.nextAbsentValue((char) 30))
nova chamada: assertEquals(31, container.nextAbsentValue((char) 30), "Era esperado valores iguais, mas  31 é diferente de " + result3650 + " <container.nextAbsentValue((char) 30)>")
chamada antiga: assertEquals(((1 << 15) | 4), container.nextAbsentValue((char) ((1 << 15) | 4)))
nova chamada: assertEquals(((1 << 15) | 4), container.nextAbsentValue((char) ((1 << 15) | 4)), "Era esperado valores iguais, mas  ((1  15) | 4) é diferente de " + result3651 + " <container.nextAbsentValue((char) ((1 << 15) | 4))>")
chamada antiga: assertEquals(((1 << 15) | 6), container.nextAbsentValue((char) ((1 << 15) | 5)))
nova chamada: assertEquals(((1 << 15) | 6), container.nextAbsentValue((char) ((1 << 15) | 5)), "Era esperado valores iguais, mas  ((1  15) | 6) é diferente de " + result3652 + " <container.nextAbsentValue((char) ((1 << 15) | 5))>")
chamada antiga: assertEquals(((1 << 15) | 6), container.nextAbsentValue((char) ((1 << 15) | 6)))
nova chamada: assertEquals(((1 << 15) | 6), container.nextAbsentValue((char) ((1 << 15) | 6)), "Era esperado valores iguais, mas  ((1  15) | 6) é diferente de " + result3653 + " <container.nextAbsentValue((char) ((1 << 15) | 6))>")
chamada antiga: assertEquals(((1 << 15) | 8), container.nextAbsentValue((char) ((1 << 15) | 7)))
nova chamada: assertEquals(((1 << 15) | 8), container.nextAbsentValue((char) ((1 << 15) | 7)), "Era esperado valores iguais, mas  ((1  15) | 8) é diferente de " + result3654 + " <container.nextAbsentValue((char) ((1 << 15) | 7))>")
chamada antiga: assertEquals(((1 << 15) | 8), container.nextAbsentValue((char) ((1 << 15) | 8)))
nova chamada: assertEquals(((1 << 15) | 8), container.nextAbsentValue((char) ((1 << 15) | 8)), "Era esperado valores iguais, mas  ((1  15) | 8) é diferente de " + result3655 + " <container.nextAbsentValue((char) ((1 << 15) | 8))>")
chamada antiga: assertEquals(0xAAAAAAAAAAAAAAAAL, bits[0])
nova chamada: assertEquals(0xAAAAAAAAAAAAAAAAL, bits[0], "Era esperado valores iguais, mas  0xAAAAAAAAAAAAAAAAL é diferente de " + " bits[0]")
chamada antiga: assertEquals(0L, bits[0])
nova chamada: assertEquals(0L, bits[0], "Era esperado valores iguais, mas  0L é diferente de " + " bits[0]")
chamada antiga: assertEquals(0xAAAAAAAAAAAAAAAAL, bits[0])
nova chamada: assertEquals(0xAAAAAAAAAAAAAAAAL, bits[0], "Era esperado valores iguais, mas  0xAAAAAAAAAAAAAAAAL é diferente de " + " bits[0]")
chamada antiga: assertEquals(-1L, bits[0])
nova chamada: assertEquals(-1L, bits[0], "Era esperado valores iguais, mas  -1L é diferente de " + " bits[0]")
chamada antiga: assertTrue(Arrays.equals(content, result))
nova chamada: assertTrue(Arrays.equals(content, result), "Era esperado verdadeiro, mas " + result3656 + " <Arrays.equals(content, result)> é falso")
chamada antiga: assertThrows(IllegalArgumentException.class, () -> {
    LongBuffer data1 = LongBuffer.wrap(new long[] { 1, 2, 4, 8, 16 });
    LongBuffer data2 = LongBuffer.wrap(new long[] { 2, 1, 3, 7 });
    char[] content = new char[5];
    BufferUtil.fillArrayANDNOT(content, data1, data2);
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    LongBuffer data1 = LongBuffer.wrap(new long[] { 1, 2, 4, 8, 16 });
    LongBuffer data2 = LongBuffer.wrap(new long[] { 2, 1, 3, 7 });
    char[] content = new char[5];
    BufferUtil.fillArrayANDNOT(content, data1, data2);
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: assertFalse(BufferUtil.unsignedIntersects(data1, data1.limit(), data2, data2.limit()))
nova chamada: assertFalse(BufferUtil.unsignedIntersects(data1, data1.limit(), data2, data2.limit()), "Era esperado falso, mas " + result3657 + " <BufferUtil.unsignedIntersects(data1, data1.limit(), data2, data2.limit())> é verdadeiro ")
chamada antiga: assertTrue(BufferUtil.unsignedIntersects(data1, data1.limit(), data3, data3.limit()))
nova chamada: assertTrue(BufferUtil.unsignedIntersects(data1, data1.limit(), data3, data3.limit()), "Era esperado verdadeiro, mas " + result3658 + " <BufferUtil.unsignedIntersects(data1, data1.limit(), data3, data3.limit())> é falso")
chamada antiga: assertFalse(BufferUtil.unsignedIntersects(data4, data4.limit(), data5, data5.limit()))
nova chamada: assertFalse(BufferUtil.unsignedIntersects(data4, data4.limit(), data5, data5.limit()), "Era esperado falso, mas " + result3659 + " <BufferUtil.unsignedIntersects(data4, data4.limit(), data5, data5.limit())> é verdadeiro ")
chamada antiga: assertEquals(1, BufferUtil.advanceUntil(data, -1, data.limit(), (char) 3))
nova chamada: assertEquals(1, BufferUtil.advanceUntil(data, -1, data.limit(), (char) 3), "Era esperado valores iguais, mas  1 é diferente de " + result3660 + " <BufferUtil.advanceUntil(data, -1, data.limit(), (char) 3)>")
chamada antiga: assertEquals(5, BufferUtil.advanceUntil(data, -1, data.limit(), (char) 28))
nova chamada: assertEquals(5, BufferUtil.advanceUntil(data, -1, data.limit(), (char) 28), "Era esperado valores iguais, mas  5 é diferente de " + result3661 + " <BufferUtil.advanceUntil(data, -1, data.limit(), (char) 28)>")
chamada antiga: assertEquals(5, BufferUtil.advanceUntil(data, -1, data.limit(), (char) 29))
nova chamada: assertEquals(5, BufferUtil.advanceUntil(data, -1, data.limit(), (char) 29), "Era esperado valores iguais, mas  5 é diferente de " + result3662 + " <BufferUtil.advanceUntil(data, -1, data.limit(), (char) 29)>")
chamada antiga: assertEquals(7, BufferUtil.advanceUntil(data, -1, data.limit(), (char) -342))
nova chamada: assertEquals(7, BufferUtil.advanceUntil(data, -1, data.limit(), (char) -342), "Era esperado valores iguais, mas  7 é diferente de " + result3663 + " <BufferUtil.advanceUntil(data, -1, data.limit(), (char) -342)>")
chamada antiga: assertEquals(1, BufferUtil.iterateUntil(data, 0, data.limit(), ((char) 3)))
nova chamada: assertEquals(1, BufferUtil.iterateUntil(data, 0, data.limit(), ((char) 3)), "Era esperado valores iguais, mas  1 é diferente de " + result3664 + " <BufferUtil.iterateUntil(data, 0, data.limit(), ((char) 3))>")
chamada antiga: assertEquals(5, BufferUtil.iterateUntil(data, 0, data.limit(), ((char) 28)))
nova chamada: assertEquals(5, BufferUtil.iterateUntil(data, 0, data.limit(), ((char) 28)), "Era esperado valores iguais, mas  5 é diferente de " + result3665 + " <BufferUtil.iterateUntil(data, 0, data.limit(), ((char) 28))>")
chamada antiga: assertEquals(5, BufferUtil.iterateUntil(data, 0, data.limit(), ((char) 29)))
nova chamada: assertEquals(5, BufferUtil.iterateUntil(data, 0, data.limit(), ((char) 29)), "Era esperado valores iguais, mas  5 é diferente de " + result3666 + " <BufferUtil.iterateUntil(data, 0, data.limit(), ((char) 29))>")
chamada antiga: assertEquals(7, BufferUtil.iterateUntil(data, 0, data.limit(), ((char) -342)))
nova chamada: assertEquals(7, BufferUtil.iterateUntil(data, 0, data.limit(), ((char) -342)), "Era esperado valores iguais, mas  7 é diferente de " + result3667 + " <BufferUtil.iterateUntil(data, 0, data.limit(), ((char) -342))>")
chamada antiga: assertEquals(expectedCardinality, cardinality)
nova chamada: assertEquals(expectedCardinality, cardinality, "Era esperado valores iguais, mas  expectedCardinality é diferente de " + " cardinality")
chamada antiga: assertTrue(ac <= c)
nova chamada: assertTrue(ac <= c, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(rac <= c)
nova chamada: assertTrue(rac <= c, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNotNull(rmrClone)
nova chamada: assertNotNull(rmrClone, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(rmrList, rmrCloneList)
nova chamada: assertEquals(rmrList, rmrCloneList, "Era esperado valores iguais, mas  rmrList é diferente de " + " rmrCloneList")
chamada antiga: assertEquals(14, rmr.nextAsInt())
nova chamada: assertEquals(14, rmr.nextAsInt(), "Era esperado valores iguais, mas  14 é diferente de " + result3668 + " <rmr.nextAsInt()>")
chamada antiga: assertEquals(13, rmr.nextAsInt())
nova chamada: assertEquals(13, rmr.nextAsInt(), "Era esperado valores iguais, mas  13 é diferente de " + result3669 + " <rmr.nextAsInt()>")
chamada antiga: assertEquals(0, i.next())
nova chamada: assertEquals(0, i.next(), "Era esperado valores iguais, mas  0 é diferente de " + result3670 + " <i.next()>")
chamada antiga: assertEquals(1, i.next())
nova chamada: assertEquals(1, i.next(), "Era esperado valores iguais, mas  1 é diferente de " + result3671 + " <i.next()>")
chamada antiga: assertFalse(i.hasNext())
nova chamada: assertFalse(i.hasNext(), "Era esperado falso, mas " + result3672 + " <i.hasNext()> é verdadeiro ")
chamada antiga: assertEquals(rb1, rb2)
nova chamada: assertEquals(rb1, rb2, "Era esperado valores iguais, mas  rb1 é diferente de " + " rb2")
chamada antiga: assertEquals(rb1, rb2)
nova chamada: assertEquals(rb1, rb2, "Era esperado valores iguais, mas  rb1 é diferente de " + " rb2")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rb))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rb), "Era esperado verdadeiro, mas " + result3673 + " <TestRoaringBitmap.equals(bs, rb)> é falso")
chamada antiga: assertEquals(0, rb.getCardinality())
nova chamada: assertEquals(0, rb.getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result3674 + " <rb.getCardinality()>")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rbstatic))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rbstatic), "Era esperado verdadeiro, mas " + result3675 + " <TestRoaringBitmap.equals(bs, rbstatic)> é falso")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rbinplace))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rbinplace), "Era esperado verdadeiro, mas " + result3676 + " <TestRoaringBitmap.equals(bs, rbinplace)> é falso")
chamada antiga: assertEquals(rbinplace, rbstatic)
nova chamada: assertEquals(rbinplace, rbstatic, "Era esperado valores iguais, mas  rbinplace é diferente de " + " rbstatic")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rb))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rb), "Era esperado verdadeiro, mas " + result3677 + " <TestRoaringBitmap.equals(bs, rb)> é falso")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rb))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rb), "Era esperado verdadeiro, mas " + result3678 + " <TestRoaringBitmap.equals(bs, rb)> é falso")
chamada antiga: assertEquals(100000, rbcard)
nova chamada: assertEquals(100000, rbcard, "Era esperado valores iguais, mas  100000 é diferente de " + " rbcard")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rb))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rb), "Era esperado verdadeiro, mas " + result3679 + " <TestRoaringBitmap.equals(bs, rb)> é falso")
chamada antiga: assertEquals(100000, rbcard)
nova chamada: assertEquals(100000, rbcard, "Era esperado valores iguais, mas  100000 é diferente de " + " rbcard")
chamada antiga: assertEquals(0, rb.getCardinality())
nova chamada: assertEquals(0, rb.getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result3680 + " <rb.getCardinality()>")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rb))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rb), "Era esperado verdadeiro, mas " + result3681 + " <TestRoaringBitmap.equals(bs, rb)> é falso")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rb1))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rb1), "Era esperado verdadeiro, mas " + result3682 + " <TestRoaringBitmap.equals(bs, rb1)> é falso")
chamada antiga: assertEquals(0, rbcard)
nova chamada: assertEquals(0, rbcard, "Era esperado valores iguais, mas  0 é diferente de " + " rbcard")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rb))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rb), "Era esperado verdadeiro, mas " + result3683 + " <TestRoaringBitmap.equals(bs, rb)> é falso")
chamada antiga: assertEquals(0, rbcard)
nova chamada: assertEquals(0, rbcard, "Era esperado valores iguais, mas  0 é diferente de " + " rbcard")
chamada antiga: assertEquals(1, rb.getCardinality())
nova chamada: assertEquals(1, rb.getCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result3684 + " <rb.getCardinality()>")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rb1))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rb1), "Era esperado verdadeiro, mas " + result3685 + " <TestRoaringBitmap.equals(bs, rb1)> é falso")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rb))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rb), "Era esperado verdadeiro, mas " + result3686 + " <TestRoaringBitmap.equals(bs, rb)> é falso")
chamada antiga: assertEquals(65536, rbcard)
nova chamada: assertEquals(65536, rbcard, "Era esperado valores iguais, mas  65536 é diferente de " + " rbcard")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rb))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rb), "Era esperado verdadeiro, mas " + result3687 + " <TestRoaringBitmap.equals(bs, rb)> é falso")
chamada antiga: assertEquals(200000, rbcard)
nova chamada: assertEquals(200000, rbcard, "Era esperado valores iguais, mas  200000 é diferente de " + " rbcard")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rb2))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rb2), "Era esperado verdadeiro, mas " + result3688 + " <TestRoaringBitmap.equals(bs, rb2)> é falso")
chamada antiga: assertEquals(196608, rbcard)
nova chamada: assertEquals(196608, rbcard, "Era esperado valores iguais, mas  196608 é diferente de " + " rbcard")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rb))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rb), "Era esperado verdadeiro, mas " + result3689 + " <TestRoaringBitmap.equals(bs, rb)> é falso")
chamada antiga: assertEquals(196608, rbcard)
nova chamada: assertEquals(196608, rbcard, "Era esperado valores iguais, mas  196608 é diferente de " + " rbcard")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rb2))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rb2), "Era esperado verdadeiro, mas " + result3690 + " <TestRoaringBitmap.equals(bs, rb2)> é falso")
chamada antiga: assertEquals(196608, rbcard)
nova chamada: assertEquals(196608, rbcard, "Era esperado valores iguais, mas  196608 é diferente de " + " rbcard")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rb))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rb), "Era esperado verdadeiro, mas " + result3691 + " <TestRoaringBitmap.equals(bs, rb)> é falso")
chamada antiga: assertEquals(434464, rbcard)
nova chamada: assertEquals(434464, rbcard, "Era esperado valores iguais, mas  434464 é diferente de " + " rbcard")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rb2))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rb2), "Era esperado verdadeiro, mas " + result3692 + " <TestRoaringBitmap.equals(bs, rb2)> é falso")
chamada antiga: assertEquals(97536, rbcard)
nova chamada: assertEquals(97536, rbcard, "Era esperado valores iguais, mas  97536 é diferente de " + " rbcard")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rb))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rb), "Era esperado verdadeiro, mas " + result3693 + " <TestRoaringBitmap.equals(bs, rb)> é falso")
chamada antiga: assertEquals(97536, rbcard)
nova chamada: assertEquals(97536, rbcard, "Era esperado valores iguais, mas  97536 é diferente de " + " rbcard")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rb2))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rb2), "Era esperado verdadeiro, mas " + result3694 + " <TestRoaringBitmap.equals(bs, rb2)> é falso")
chamada antiga: assertEquals(318, rbcard)
nova chamada: assertEquals(318, rbcard, "Era esperado valores iguais, mas  318 é diferente de " + " rbcard")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rb))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rb), "Era esperado verdadeiro, mas " + result3695 + " <TestRoaringBitmap.equals(bs, rb)> é falso")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rb))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rb), "Era esperado verdadeiro, mas " + result3696 + " <TestRoaringBitmap.equals(bs, rb)> é falso")
chamada antiga: assertEquals(rb1, rb)
nova chamada: assertEquals(rb1, rb, "Era esperado valores iguais, mas  rb1 é diferente de " + " rb")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rb1))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rb1), "Era esperado verdadeiro, mas " + result3697 + " <TestRoaringBitmap.equals(bs, rb1)> é falso")
chamada antiga: assertEquals(rb2, rb)
nova chamada: assertEquals(rb2, rb, "Era esperado valores iguais, mas  rb2 é diferente de " + " rb")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rb2))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rb2), "Era esperado verdadeiro, mas " + result3698 + " <TestRoaringBitmap.equals(bs, rb2)> é falso")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rb3))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rb3), "Era esperado verdadeiro, mas " + result3699 + " <TestRoaringBitmap.equals(bs, rb3)> é falso")
chamada antiga: assertEquals(rb2, rb3)
nova chamada: assertEquals(rb2, rb3, "Era esperado valores iguais, mas  rb2 é diferente de " + " rb3")
chamada antiga: assertEquals(rb2, rb3)
nova chamada: assertEquals(rb2, rb3, "Era esperado valores iguais, mas  rb2 é diferente de " + " rb3")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rb3))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rb3), "Era esperado verdadeiro, mas " + result3700 + " <TestRoaringBitmap.equals(bs, rb3)> é falso")
chamada antiga: assertEquals(rb2, rb3)
nova chamada: assertEquals(rb2, rb3, "Era esperado valores iguais, mas  rb2 é diferente de " + " rb3")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rb3))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rb3), "Era esperado verdadeiro, mas " + result3701 + " <TestRoaringBitmap.equals(bs, rb3)> é falso")
chamada antiga: assertEquals(255, rbcard)
nova chamada: assertEquals(255, rbcard, "Era esperado valores iguais, mas  255 é diferente de " + " rbcard")
chamada antiga: assertEquals(rb2, rb3)
nova chamada: assertEquals(rb2, rb3, "Era esperado valores iguais, mas  rb2 é diferente de " + " rb3")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rb3))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rb3), "Era esperado verdadeiro, mas " + result3702 + " <TestRoaringBitmap.equals(bs, rb3)> é falso")
chamada antiga: assertEquals(rb2, rb3)
nova chamada: assertEquals(rb2, rb3, "Era esperado valores iguais, mas  rb2 é diferente de " + " rb3")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rb3))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rb3), "Era esperado verdadeiro, mas " + result3703 + " <TestRoaringBitmap.equals(bs, rb3)> é falso")
chamada antiga: assertEquals(rb2, rb3)
nova chamada: assertEquals(rb2, rb3, "Era esperado valores iguais, mas  rb2 é diferente de " + " rb3")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rb3))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rb3), "Era esperado verdadeiro, mas " + result3704 + " <TestRoaringBitmap.equals(bs, rb3)> é falso")
chamada antiga: assertEquals(rb2, rb)
nova chamada: assertEquals(rb2, rb, "Era esperado valores iguais, mas  rb2 é diferente de " + " rb")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rb2))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rb2), "Era esperado verdadeiro, mas " + result3705 + " <TestRoaringBitmap.equals(bs, rb2)> é falso")
chamada antiga: assertEquals(312320, rbcard)
nova chamada: assertEquals(312320, rbcard, "Era esperado valores iguais, mas  312320 é diferente de " + " rbcard")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rb))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rb), "Era esperado verdadeiro, mas " + result3706 + " <TestRoaringBitmap.equals(bs, rb)> é falso")
chamada antiga: assertEquals(2964, rbcard)
nova chamada: assertEquals(2964, rbcard, "Era esperado valores iguais, mas  2964 é diferente de " + " rbcard")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rb))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rb), "Era esperado verdadeiro, mas " + result3707 + " <TestRoaringBitmap.equals(bs, rb)> é falso")
chamada antiga: assertEquals(2964, rbcard)
nova chamada: assertEquals(2964, rbcard, "Era esperado valores iguais, mas  2964 é diferente de " + " rbcard")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rb2))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rb2), "Era esperado verdadeiro, mas " + result3708 + " <TestRoaringBitmap.equals(bs, rb2)> é falso")
chamada antiga: assertEquals(2, rbcard)
nova chamada: assertEquals(2, rbcard, "Era esperado valores iguais, mas  2 é diferente de " + " rbcard")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rb))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rb), "Era esperado verdadeiro, mas " + result3709 + " <TestRoaringBitmap.equals(bs, rb)> é falso")
chamada antiga: assertEquals(2, rbcard)
nova chamada: assertEquals(2, rbcard, "Era esperado valores iguais, mas  2 é diferente de " + " rbcard")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rb2))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rb2), "Era esperado verdadeiro, mas " + result3710 + " <TestRoaringBitmap.equals(bs, rb2)> é falso")
chamada antiga: assertTrue((bitmap.getCardinality() == 1) && bitmap.contains(1))
nova chamada: assertTrue((bitmap.getCardinality() == 1) && bitmap.contains(1), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue((bitmap.getCardinality() == 1) && bitmap.contains(1))
nova chamada: assertTrue((bitmap.getCardinality() == 1) && bitmap.contains(1), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue((bitmap.getCardinality() == 1) && bitmap.contains(1))
nova chamada: assertTrue((bitmap.getCardinality() == 1) && bitmap.contains(1), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue((bitmap.getCardinality() == 1) && bitmap.contains(1))
nova chamada: assertTrue((bitmap.getCardinality() == 1) && bitmap.contains(1), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(bitmap.isEmpty())
nova chamada: assertTrue(bitmap.isEmpty(), "Era esperado verdadeiro, mas " + result3711 + " <bitmap.isEmpty()> é falso")
chamada antiga: assertTrue(bitmap.isEmpty())
nova chamada: assertTrue(bitmap.isEmpty(), "Era esperado verdadeiro, mas " + result3712 + " <bitmap.isEmpty()> é falso")
chamada antiga: assertFalse(bitmap.hasRunCompression())
nova chamada: assertFalse(bitmap.hasRunCompression(), "Era esperado falso, mas " + result3713 + " <bitmap.hasRunCompression()> é verdadeiro ")
chamada antiga: assertTrue(bitmap.isEmpty())
nova chamada: assertTrue(bitmap.isEmpty(), "Era esperado verdadeiro, mas " + result3714 + " <bitmap.isEmpty()> é falso")
chamada antiga: assertEquals(rb1, rb2)
nova chamada: assertEquals(rb1, rb2, "Era esperado valores iguais, mas  rb1 é diferente de " + " rb2")
chamada antiga: assertEquals(rb1, rb2)
nova chamada: assertEquals(rb1, rb2, "Era esperado valores iguais, mas  rb1 é diferente de " + " rb2")
chamada antiga: assertEquals(rb1, rb2)
nova chamada: assertEquals(rb1, rb2, "Era esperado valores iguais, mas  rb1 é diferente de " + " rb2")
chamada antiga: assertEquals(rb1, rb2)
nova chamada: assertEquals(rb1, rb2, "Era esperado valores iguais, mas  rb1 é diferente de " + " rb2")
chamada antiga: assertEquals(rb1, rb2)
nova chamada: assertEquals(rb1, rb2, "Era esperado valores iguais, mas  rb1 é diferente de " + " rb2")
chamada antiga: assertEquals(rb1, rb2)
nova chamada: assertEquals(rb1, rb2, "Era esperado valores iguais, mas  rb1 é diferente de " + " rb2")
chamada antiga: assertEquals(rb1, rb2)
nova chamada: assertEquals(rb1, rb2, "Era esperado valores iguais, mas  rb1 é diferente de " + " rb2")
chamada antiga: assertEquals(rb1, rb2)
nova chamada: assertEquals(rb1, rb2, "Era esperado valores iguais, mas  rb1 é diferente de " + " rb2")
chamada antiga: assertEquals(rb1, rb2)
nova chamada: assertEquals(rb1, rb2, "Era esperado valores iguais, mas  rb1 é diferente de " + " rb2")
chamada antiga: assertEquals(rb1, rb2)
nova chamada: assertEquals(rb1, rb2, "Era esperado valores iguais, mas  rb1 é diferente de " + " rb2")
chamada antiga: assertTrue(bitmap.intersects(minValueThatWorks, baseValue))
nova chamada: assertTrue(bitmap.intersects(minValueThatWorks, baseValue), "Era esperado verdadeiro, mas " + result3715 + " <bitmap.intersects(minValueThatWorks, baseValue)> é falso")
chamada antiga: assertTrue(bitmap.intersects(minValueThatWorks - 1, baseValue))
nova chamada: assertTrue(bitmap.intersects(minValueThatWorks - 1, baseValue), "Era esperado verdadeiro, mas " + result3716 + " <bitmap.intersects(minValueThatWorks - 1, baseValue)> é falso")
chamada antiga: assertTrue(rr1.equals(rrback1))
nova chamada: assertTrue(rr1.equals(rrback1), "Era esperado verdadeiro, mas " + result3717 + " <rr1.equals(rrback1)> é falso")
chamada antiga: assertTrue(rr1.equals(rrback1))
nova chamada: assertTrue(rr1.equals(rrback1), "Era esperado verdadeiro, mas " + result3718 + " <rr1.equals(rrback1)> é falso")
chamada antiga: assertTrue(rr2.equals(rrback2))
nova chamada: assertTrue(rr2.equals(rrback2), "Era esperado verdadeiro, mas " + result3719 + " <rr2.equals(rrback2)> é falso")
chamada antiga: assertTrue(rr1.equals(rrback1))
nova chamada: assertTrue(rr1.equals(rrback1), "Era esperado verdadeiro, mas " + result3720 + " <rr1.equals(rrback1)> é falso")
chamada antiga: assertTrue(rr1.equals(rrback1))
nova chamada: assertTrue(rr1.equals(rrback1), "Era esperado verdadeiro, mas " + result3721 + " <rr1.equals(rrback1)> é falso")
chamada antiga: assertTrue(rr2.equals(rrback2))
nova chamada: assertTrue(rr2.equals(rrback2), "Era esperado verdadeiro, mas " + result3722 + " <rr2.equals(rrback2)> é falso")
chamada antiga: assertTrue(rr1.equals(rrback1c))
nova chamada: assertTrue(rr1.equals(rrback1c), "Era esperado verdadeiro, mas " + result3723 + " <rr1.equals(rrback1c)> é falso")
chamada antiga: assertTrue(rr2.equals(rrback2c))
nova chamada: assertTrue(rr2.equals(rrback2c), "Era esperado verdadeiro, mas " + result3724 + " <rr2.equals(rrback2c)> é falso")
chamada antiga: assertTrue(rrback1.equals(rrback1c))
nova chamada: assertTrue(rrback1.equals(rrback1c), "Era esperado verdadeiro, mas " + result3725 + " <rrback1.equals(rrback1c)> é falso")
chamada antiga: assertTrue(rrback2.equals(rrback2c))
nova chamada: assertTrue(rrback2.equals(rrback2c), "Era esperado verdadeiro, mas " + result3726 + " <rrback2.equals(rrback2c)> é falso")
chamada antiga: assertEquals(rr1.hashCode(), rrback1.hashCode())
nova chamada: assertEquals(rr1.hashCode(), rrback1.hashCode(), "Era esperado valores iguais, mas " + result3727 + " <rr1.hashCode()> é diferente de " + result3728 + " <rrback1.hashCode()>")
chamada antiga: assertEquals(rr1.hashCode(), rrback1c.hashCode())
nova chamada: assertEquals(rr1.hashCode(), rrback1c.hashCode(), "Era esperado valores iguais, mas " + result3729 + " <rr1.hashCode()> é diferente de " + result3730 + " <rrback1c.hashCode()>")
chamada antiga: assertEquals(rr2.hashCode(), rrback2.hashCode())
nova chamada: assertEquals(rr2.hashCode(), rrback2.hashCode(), "Era esperado valores iguais, mas " + result3731 + " <rr2.hashCode()> é diferente de " + result3732 + " <rrback2.hashCode()>")
chamada antiga: assertEquals(rr2.hashCode(), rrback2c.hashCode())
nova chamada: assertEquals(rr2.hashCode(), rrback2c.hashCode(), "Era esperado valores iguais, mas " + result3733 + " <rr2.hashCode()> é diferente de " + result3734 + " <rrback2c.hashCode()>")
chamada antiga: assertTrue(copy1.equals(rb))
nova chamada: assertTrue(copy1.equals(rb), "Era esperado verdadeiro, mas " + result3735 + " <copy1.equals(rb)> é falso")
chamada antiga: assertTrue(copy2.equals(rb))
nova chamada: assertTrue(copy2.equals(rb), "Era esperado verdadeiro, mas " + result3736 + " <copy2.equals(rb)> é falso")
chamada antiga: assertEquals(totalcard, M)
nova chamada: assertEquals(totalcard, M, "Era esperado valores iguais, mas  totalcard é diferente de " + " M")
chamada antiga: assertEquals(FastAggregation.or(one, two, three), ParallelAggregation.or(one, two, three))
nova chamada: assertEquals(FastAggregation.or(one, two, three), ParallelAggregation.or(one, two, three), "Era esperado valores iguais, mas " + result3737 + " <FastAggregation.or(one, two, three)> é diferente de " + result3738 + " <ParallelAggregation.or(one, two, three)>")
chamada antiga: assertEquals(FastAggregation.or(one, two, three), ParallelAggregation.or(one, two, three))
nova chamada: assertEquals(FastAggregation.or(one, two, three), ParallelAggregation.or(one, two, three), "Era esperado valores iguais, mas " + result3739 + " <FastAggregation.or(one, two, three)> é diferente de " + result3740 + " <ParallelAggregation.or(one, two, three)>")
chamada antiga: assertEquals(FastAggregation.or(one, two, three), ParallelAggregation.or(one, two, three))
nova chamada: assertEquals(FastAggregation.or(one, two, three), ParallelAggregation.or(one, two, three), "Era esperado valores iguais, mas " + result3741 + " <FastAggregation.or(one, two, three)> é diferente de " + result3742 + " <ParallelAggregation.or(one, two, three)>")
chamada antiga: assertEquals(FastAggregation.or(input), ParallelAggregation.or(input))
nova chamada: assertEquals(FastAggregation.or(input), ParallelAggregation.or(input), "Era esperado valores iguais, mas " + result3743 + " <FastAggregation.or(input)> é diferente de " + result3744 + " <ParallelAggregation.or(input)>")
chamada antiga: assertEquals(FastAggregation.or(input), ParallelAggregation.or(input))
nova chamada: assertEquals(FastAggregation.or(input), ParallelAggregation.or(input), "Era esperado valores iguais, mas " + result3745 + " <FastAggregation.or(input)> é diferente de " + result3746 + " <ParallelAggregation.or(input)>")
chamada antiga: assertEquals(FastAggregation.or(input), ParallelAggregation.or(input))
nova chamada: assertEquals(FastAggregation.or(input), ParallelAggregation.or(input), "Era esperado valores iguais, mas " + result3747 + " <FastAggregation.or(input)> é diferente de " + result3748 + " <ParallelAggregation.or(input)>")
chamada antiga: assertEquals(FastAggregation.or(input), ParallelAggregation.or(input))
nova chamada: assertEquals(FastAggregation.or(input), ParallelAggregation.or(input), "Era esperado valores iguais, mas " + result3749 + " <FastAggregation.or(input)> é diferente de " + result3750 + " <ParallelAggregation.or(input)>")
chamada antiga: assertEquals(FastAggregation.or(input), NO_PARALLELISM_AVAILABLE.submit(() -> ParallelAggregation.or(input)).join())
nova chamada: assertEquals(FastAggregation.or(input), NO_PARALLELISM_AVAILABLE.submit(() -> ParallelAggregation.or(input)).join(), "Era esperado valores iguais, mas " + result3751 + " <FastAggregation.or(input)> é diferente de " + result3752 + " <NO_PARALLELISM_AVAILABLE.submit(() -> ParallelAggregation.or(input)).join()>")
chamada antiga: assertEquals(FastAggregation.or(input), NO_PARALLELISM_AVAILABLE.submit(() -> ParallelAggregation.or(input)).join())
nova chamada: assertEquals(FastAggregation.or(input), NO_PARALLELISM_AVAILABLE.submit(() -> ParallelAggregation.or(input)).join(), "Era esperado valores iguais, mas " + result3753 + " <FastAggregation.or(input)> é diferente de " + result3754 + " <NO_PARALLELISM_AVAILABLE.submit(() -> ParallelAggregation.or(input)).join()>")
chamada antiga: assertEquals(FastAggregation.or(input), NO_PARALLELISM_AVAILABLE.submit(() -> ParallelAggregation.or(input)).join())
nova chamada: assertEquals(FastAggregation.or(input), NO_PARALLELISM_AVAILABLE.submit(() -> ParallelAggregation.or(input)).join(), "Era esperado valores iguais, mas " + result3755 + " <FastAggregation.or(input)> é diferente de " + result3756 + " <NO_PARALLELISM_AVAILABLE.submit(() -> ParallelAggregation.or(input)).join()>")
chamada antiga: assertEquals(FastAggregation.or(input), POOL.submit(() -> ParallelAggregation.or(input)).join())
nova chamada: assertEquals(FastAggregation.or(input), POOL.submit(() -> ParallelAggregation.or(input)).join(), "Era esperado valores iguais, mas " + result3757 + " <FastAggregation.or(input)> é diferente de " + result3758 + " <POOL.submit(() -> ParallelAggregation.or(input)).join()>")
chamada antiga: assertEquals(FastAggregation.or(input), BIG_POOL.submit(() -> ParallelAggregation.or(input)).join())
nova chamada: assertEquals(FastAggregation.or(input), BIG_POOL.submit(() -> ParallelAggregation.or(input)).join(), "Era esperado valores iguais, mas " + result3759 + " <FastAggregation.or(input)> é diferente de " + result3760 + " <BIG_POOL.submit(() -> ParallelAggregation.or(input)).join()>")
chamada antiga: assertEquals(FastAggregation.or(input), POOL.submit(() -> ParallelAggregation.or(input)).join())
nova chamada: assertEquals(FastAggregation.or(input), POOL.submit(() -> ParallelAggregation.or(input)).join(), "Era esperado valores iguais, mas " + result3761 + " <FastAggregation.or(input)> é diferente de " + result3762 + " <POOL.submit(() -> ParallelAggregation.or(input)).join()>")
chamada antiga: assertEquals(FastAggregation.or(input), POOL.submit(() -> ParallelAggregation.or(input)).join())
nova chamada: assertEquals(FastAggregation.or(input), POOL.submit(() -> ParallelAggregation.or(input)).join(), "Era esperado valores iguais, mas " + result3763 + " <FastAggregation.or(input)> é diferente de " + result3764 + " <POOL.submit(() -> ParallelAggregation.or(input)).join()>")
chamada antiga: assertEquals(FastAggregation.or(one, two, three), ParallelAggregation.or(one, two, three))
nova chamada: assertEquals(FastAggregation.or(one, two, three), ParallelAggregation.or(one, two, three), "Era esperado valores iguais, mas " + result3765 + " <FastAggregation.or(one, two, three)> é diferente de " + result3766 + " <ParallelAggregation.or(one, two, three)>")
chamada antiga: assertEquals(FastAggregation.xor(one, two, three), ParallelAggregation.xor(one, two, three))
nova chamada: assertEquals(FastAggregation.xor(one, two, three), ParallelAggregation.xor(one, two, three), "Era esperado valores iguais, mas " + result3767 + " <FastAggregation.xor(one, two, three)> é diferente de " + result3768 + " <ParallelAggregation.xor(one, two, three)>")
chamada antiga: assertEquals(FastAggregation.xor(one, two, three), ParallelAggregation.xor(one, two, three))
nova chamada: assertEquals(FastAggregation.xor(one, two, three), ParallelAggregation.xor(one, two, three), "Era esperado valores iguais, mas " + result3769 + " <FastAggregation.xor(one, two, three)> é diferente de " + result3770 + " <ParallelAggregation.xor(one, two, three)>")
chamada antiga: assertEquals(FastAggregation.xor(one, two, three), ParallelAggregation.xor(one, two, three))
nova chamada: assertEquals(FastAggregation.xor(one, two, three), ParallelAggregation.xor(one, two, three), "Era esperado valores iguais, mas " + result3771 + " <FastAggregation.xor(one, two, three)> é diferente de " + result3772 + " <ParallelAggregation.xor(one, two, three)>")
chamada antiga: assertEquals(FastAggregation.xor(one, two, three), ParallelAggregation.xor(one, two, three))
nova chamada: assertEquals(FastAggregation.xor(one, two, three), ParallelAggregation.xor(one, two, three), "Era esperado valores iguais, mas " + result3773 + " <FastAggregation.xor(one, two, three)> é diferente de " + result3774 + " <ParallelAggregation.xor(one, two, three)>")
chamada antiga: assertEquals(FastAggregation.xor(one, two, three), ParallelAggregation.xor(one, two, three))
nova chamada: assertEquals(FastAggregation.xor(one, two, three), ParallelAggregation.xor(one, two, three), "Era esperado valores iguais, mas " + result3775 + " <FastAggregation.xor(one, two, three)> é diferente de " + result3776 + " <ParallelAggregation.xor(one, two, three)>")
chamada antiga: assertEquals(BufferFastAggregation.or(one, two, three), BufferParallelAggregation.or(one, two, three))
nova chamada: assertEquals(BufferFastAggregation.or(one, two, three), BufferParallelAggregation.or(one, two, three), "Era esperado valores iguais, mas " + result3777 + " <BufferFastAggregation.or(one, two, three)> é diferente de " + result3778 + " <BufferParallelAggregation.or(one, two, three)>")
chamada antiga: assertEquals(BufferFastAggregation.or(one, two, three), BufferParallelAggregation.or(one, two, three))
nova chamada: assertEquals(BufferFastAggregation.or(one, two, three), BufferParallelAggregation.or(one, two, three), "Era esperado valores iguais, mas " + result3779 + " <BufferFastAggregation.or(one, two, three)> é diferente de " + result3780 + " <BufferParallelAggregation.or(one, two, three)>")
chamada antiga: assertEquals(BufferFastAggregation.or(one, two, three), BufferParallelAggregation.or(one, two, three))
nova chamada: assertEquals(BufferFastAggregation.or(one, two, three), BufferParallelAggregation.or(one, two, three), "Era esperado valores iguais, mas " + result3781 + " <BufferFastAggregation.or(one, two, three)> é diferente de " + result3782 + " <BufferParallelAggregation.or(one, two, three)>")
chamada antiga: assertEquals(BufferFastAggregation.or(one, two, three), BufferParallelAggregation.or(one, two, three))
nova chamada: assertEquals(BufferFastAggregation.or(one, two, three), BufferParallelAggregation.or(one, two, three), "Era esperado valores iguais, mas " + result3783 + " <BufferFastAggregation.or(one, two, three)> é diferente de " + result3784 + " <BufferParallelAggregation.or(one, two, three)>")
chamada antiga: assertEquals(BufferFastAggregation.or(input), BufferParallelAggregation.or(input))
nova chamada: assertEquals(BufferFastAggregation.or(input), BufferParallelAggregation.or(input), "Era esperado valores iguais, mas " + result3785 + " <BufferFastAggregation.or(input)> é diferente de " + result3786 + " <BufferParallelAggregation.or(input)>")
chamada antiga: assertEquals(BufferFastAggregation.or(input), BufferParallelAggregation.or(input))
nova chamada: assertEquals(BufferFastAggregation.or(input), BufferParallelAggregation.or(input), "Era esperado valores iguais, mas " + result3787 + " <BufferFastAggregation.or(input)> é diferente de " + result3788 + " <BufferParallelAggregation.or(input)>")
chamada antiga: assertEquals(BufferFastAggregation.or(input), BufferParallelAggregation.or(input))
nova chamada: assertEquals(BufferFastAggregation.or(input), BufferParallelAggregation.or(input), "Era esperado valores iguais, mas " + result3789 + " <BufferFastAggregation.or(input)> é diferente de " + result3790 + " <BufferParallelAggregation.or(input)>")
chamada antiga: assertEquals(BufferFastAggregation.or(input), BufferParallelAggregation.or(input))
nova chamada: assertEquals(BufferFastAggregation.or(input), BufferParallelAggregation.or(input), "Era esperado valores iguais, mas " + result3791 + " <BufferFastAggregation.or(input)> é diferente de " + result3792 + " <BufferParallelAggregation.or(input)>")
chamada antiga: assertEquals(BufferFastAggregation.or(input), NO_PARALLELISM_AVAILABLE.submit(() -> BufferParallelAggregation.or(input)).join())
nova chamada: assertEquals(BufferFastAggregation.or(input), NO_PARALLELISM_AVAILABLE.submit(() -> BufferParallelAggregation.or(input)).join(), "Era esperado valores iguais, mas " + result3793 + " <BufferFastAggregation.or(input)> é diferente de " + result3794 + " <NO_PARALLELISM_AVAILABLE.submit(() -> BufferParallelAggregation.or(input)).join()>")
chamada antiga: assertEquals(BufferFastAggregation.or(input), NO_PARALLELISM_AVAILABLE.submit(() -> BufferParallelAggregation.or(input)).join())
nova chamada: assertEquals(BufferFastAggregation.or(input), NO_PARALLELISM_AVAILABLE.submit(() -> BufferParallelAggregation.or(input)).join(), "Era esperado valores iguais, mas " + result3795 + " <BufferFastAggregation.or(input)> é diferente de " + result3796 + " <NO_PARALLELISM_AVAILABLE.submit(() -> BufferParallelAggregation.or(input)).join()>")
chamada antiga: assertEquals(BufferFastAggregation.or(input), NO_PARALLELISM_AVAILABLE.submit(() -> BufferParallelAggregation.or(input)).join())
nova chamada: assertEquals(BufferFastAggregation.or(input), NO_PARALLELISM_AVAILABLE.submit(() -> BufferParallelAggregation.or(input)).join(), "Era esperado valores iguais, mas " + result3797 + " <BufferFastAggregation.or(input)> é diferente de " + result3798 + " <NO_PARALLELISM_AVAILABLE.submit(() -> BufferParallelAggregation.or(input)).join()>")
chamada antiga: assertEquals(BufferFastAggregation.or(input), POOL.submit(() -> BufferParallelAggregation.or(input)).join())
nova chamada: assertEquals(BufferFastAggregation.or(input), POOL.submit(() -> BufferParallelAggregation.or(input)).join(), "Era esperado valores iguais, mas " + result3799 + " <BufferFastAggregation.or(input)> é diferente de " + result3800 + " <POOL.submit(() -> BufferParallelAggregation.or(input)).join()>")
chamada antiga: assertEquals(BufferFastAggregation.or(input), POOL.submit(() -> BufferParallelAggregation.or(input)).join())
nova chamada: assertEquals(BufferFastAggregation.or(input), POOL.submit(() -> BufferParallelAggregation.or(input)).join(), "Era esperado valores iguais, mas " + result3801 + " <BufferFastAggregation.or(input)> é diferente de " + result3802 + " <POOL.submit(() -> BufferParallelAggregation.or(input)).join()>")
chamada antiga: assertEquals(BufferFastAggregation.or(input), POOL.submit(() -> BufferParallelAggregation.or(input)).join())
nova chamada: assertEquals(BufferFastAggregation.or(input), POOL.submit(() -> BufferParallelAggregation.or(input)).join(), "Era esperado valores iguais, mas " + result3803 + " <BufferFastAggregation.or(input)> é diferente de " + result3804 + " <POOL.submit(() -> BufferParallelAggregation.or(input)).join()>")
chamada antiga: assertEquals(BufferFastAggregation.xor(one, two, three), BufferParallelAggregation.xor(one, two, three))
nova chamada: assertEquals(BufferFastAggregation.xor(one, two, three), BufferParallelAggregation.xor(one, two, three), "Era esperado valores iguais, mas " + result3805 + " <BufferFastAggregation.xor(one, two, three)> é diferente de " + result3806 + " <BufferParallelAggregation.xor(one, two, three)>")
chamada antiga: assertEquals(BufferFastAggregation.xor(one, two, three), BufferParallelAggregation.xor(one, two, three))
nova chamada: assertEquals(BufferFastAggregation.xor(one, two, three), BufferParallelAggregation.xor(one, two, three), "Era esperado valores iguais, mas " + result3807 + " <BufferFastAggregation.xor(one, two, three)> é diferente de " + result3808 + " <BufferParallelAggregation.xor(one, two, three)>")
chamada antiga: assertEquals(BufferFastAggregation.xor(one, two, three), BufferParallelAggregation.xor(one, two, three))
nova chamada: assertEquals(BufferFastAggregation.xor(one, two, three), BufferParallelAggregation.xor(one, two, three), "Era esperado valores iguais, mas " + result3809 + " <BufferFastAggregation.xor(one, two, three)> é diferente de " + result3810 + " <BufferParallelAggregation.xor(one, two, three)>")
chamada antiga: assertEquals(BufferFastAggregation.xor(one, two, three), BufferParallelAggregation.xor(one, two, three))
nova chamada: assertEquals(BufferFastAggregation.xor(one, two, three), BufferParallelAggregation.xor(one, two, three), "Era esperado valores iguais, mas " + result3811 + " <BufferFastAggregation.xor(one, two, three)> é diferente de " + result3812 + " <BufferParallelAggregation.xor(one, two, three)>")
chamada antiga: assertEquals(BufferFastAggregation.xor(one, two, three), BufferParallelAggregation.xor(one, two, three))
nova chamada: assertEquals(BufferFastAggregation.xor(one, two, three), BufferParallelAggregation.xor(one, two, three), "Era esperado valores iguais, mas " + result3813 + " <BufferFastAggregation.xor(one, two, three)> é diferente de " + result3814 + " <BufferParallelAggregation.xor(one, two, three)>")
chamada antiga: assertEquals(0, cnt)
nova chamada: assertEquals(0, cnt, "Era esperado valores iguais, mas  0 é diferente de " + " cnt")
chamada antiga: assertEquals(1, cnt)
nova chamada: assertEquals(1, cnt, "Era esperado valores iguais, mas  1 é diferente de " + " cnt")
chamada antiga: assertEquals(0, cnt)
nova chamada: assertEquals(0, cnt, "Era esperado valores iguais, mas  0 é diferente de " + " cnt")
chamada antiga: assertEquals(1, cnt)
nova chamada: assertEquals(1, cnt, "Era esperado valores iguais, mas  1 é diferente de " + " cnt")
chamada antiga: assertEquals(0, cnt)
nova chamada: assertEquals(0, cnt, "Era esperado valores iguais, mas  0 é diferente de " + " cnt")
chamada antiga: assertEquals(1, cnt)
nova chamada: assertEquals(1, cnt, "Era esperado valores iguais, mas  1 é diferente de " + " cnt")
chamada antiga: assertTrue(writer().constantMemory().get() instanceof ConstantMemoryContainerAppender)
nova chamada: assertTrue(writer().constantMemory().get() instanceof ConstantMemoryContainerAppender, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNotNull(writer().fastRank().get().getUnderlying())
nova chamada: assertNotNull(writer().fastRank().get().getUnderlying(), "Era esperado não nulo, mas " + result3815 + " <writer().fastRank().get().getUnderlying()> é nulo")
chamada antiga: assertThrows(IllegalStateException.class, () -> bufferWriter().fastRank().get().getUnderlying())
nova chamada: assertThrows(IllegalStateException.class, () -> bufferWriter().fastRank().get().getUnderlying(), "Era esperado que a exceção  IllegalStateException.class fosse lançada, mas não foi")
chamada antiga: assertEquals(20, writer().initialCapacity(20).get().getUnderlying().highLowContainer.keys.length)
nova chamada: assertEquals(20, writer().initialCapacity(20).get().getUnderlying().highLowContainer.keys.length, "Era esperado valores iguais, mas  20 é diferente de " + " writer().initialCapacity(20).get().getUnderlying().highLowContainer.keys.length")
chamada antiga: assertEquals(baselineHLC.size, testHLC.size)
nova chamada: assertEquals(baselineHLC.size, testHLC.size, "Era esperado valores iguais, mas  baselineHLC.size é diferente de " + " testHLC.size")
chamada antiga: assertEquals(baseline, test)
nova chamada: assertEquals(baseline, test, "Era esperado valores iguais, mas  baseline é diferente de " + " test")
chamada antiga: assertTrue(Util.unsignedIntersects(data1, data1.length, data2, data2.length))
nova chamada: assertTrue(Util.unsignedIntersects(data1, data1.length, data2, data2.length), "Era esperado verdadeiro, mas " + result3816 + " <Util.unsignedIntersects(data1, data1.length, data2, data2.length)> é falso")
chamada antiga: assertFalse(Util.unsignedIntersects(data3, data3.length, data4, data4.length))
nova chamada: assertFalse(Util.unsignedIntersects(data3, data3.length, data4, data4.length), "Era esperado falso, mas " + result3817 + " <Util.unsignedIntersects(data3, data3.length, data4, data4.length)> é verdadeiro ")
chamada antiga: assertFalse(Util.unsignedIntersects(data5, data5.length, data6, data6.length))
nova chamada: assertFalse(Util.unsignedIntersects(data5, data5.length, data6, data6.length), "Era esperado falso, mas " + result3818 + " <Util.unsignedIntersects(data5, data5.length, data6, data6.length)> é verdadeiro ")
chamada antiga: assertEquals(8, Util.branchyUnsignedBinarySearch(data1, 0, data1.length, data1[8]))
nova chamada: assertEquals(8, Util.branchyUnsignedBinarySearch(data1, 0, data1.length, data1[8]), "Era esperado valores iguais, mas  8 é diferente de " + result3819 + " <Util.branchyUnsignedBinarySearch(data1, 0, data1.length, data1[8])>")
chamada antiga: assertEquals(0, Util.branchyUnsignedBinarySearch(data1, 0, data1.length, data1[0]))
nova chamada: assertEquals(0, Util.branchyUnsignedBinarySearch(data1, 0, data1.length, data1[0]), "Era esperado valores iguais, mas  0 é diferente de " + result3820 + " <Util.branchyUnsignedBinarySearch(data1, 0, data1.length, data1[0])>")
chamada antiga: assertEquals(data1.length - 1, Util.branchyUnsignedBinarySearch(data1, data1.length - 1, data1.length, data1[data1.length - 1]))
nova chamada: assertEquals(data1.length - 1, Util.branchyUnsignedBinarySearch(data1, data1.length - 1, data1.length, data1[data1.length - 1]), "Era esperado valores iguais, mas  data1.length - 1 é diferente de " + result3821 + " <Util.branchyUnsignedBinarySearch(data1, data1.length - 1, data1.length, data1[data1.length - 1])>")
chamada antiga: assertEquals(-1, Util.branchyUnsignedBinarySearch(data1, 0, 0, (char) 0))
nova chamada: assertEquals(-1, Util.branchyUnsignedBinarySearch(data1, 0, 0, (char) 0), "Era esperado valores iguais, mas  -1 é diferente de " + result3822 + " <Util.branchyUnsignedBinarySearch(data1, 0, 0, (char) 0)>")
chamada antiga: assertEquals(-10, Util.branchyUnsignedBinarySearch(data1, 0, data1.length, (char) -1))
nova chamada: assertEquals(-10, Util.branchyUnsignedBinarySearch(data1, 0, data1.length, (char) -1), "Era esperado valores iguais, mas  -10 é diferente de " + result3823 + " <Util.branchyUnsignedBinarySearch(data1, 0, data1.length, (char) -1)>")
chamada antiga: assertArrayEquals(data, test)
nova chamada: assertArrayEquals(data, test, "Era esperado arrays iguais, mas  data é diferente de " + " test")
chamada antiga: assertEquals(1, Util.advanceUntil(data, -1, data.length, (char) 3))
nova chamada: assertEquals(1, Util.advanceUntil(data, -1, data.length, (char) 3), "Era esperado valores iguais, mas  1 é diferente de " + result3824 + " <Util.advanceUntil(data, -1, data.length, (char) 3)>")
chamada antiga: assertEquals(5, Util.advanceUntil(data, -1, data.length, (char) 28))
nova chamada: assertEquals(5, Util.advanceUntil(data, -1, data.length, (char) 28), "Era esperado valores iguais, mas  5 é diferente de " + result3825 + " <Util.advanceUntil(data, -1, data.length, (char) 28)>")
chamada antiga: assertEquals(5, Util.advanceUntil(data, -1, data.length, (char) 29))
nova chamada: assertEquals(5, Util.advanceUntil(data, -1, data.length, (char) 29), "Era esperado valores iguais, mas  5 é diferente de " + result3826 + " <Util.advanceUntil(data, -1, data.length, (char) 29)>")
chamada antiga: assertEquals(7, Util.advanceUntil(data, -1, data.length, (char) -342))
nova chamada: assertEquals(7, Util.advanceUntil(data, -1, data.length, (char) -342), "Era esperado valores iguais, mas  7 é diferente de " + result3827 + " <Util.advanceUntil(data, -1, data.length, (char) -342)>")
chamada antiga: assertEquals(0, Util.reverseUntil(data, data.length, data.length, (char) 0))
nova chamada: assertEquals(0, Util.reverseUntil(data, data.length, data.length, (char) 0), "Era esperado valores iguais, mas  0 é diferente de " + result3828 + " <Util.reverseUntil(data, data.length, data.length, (char) 0)>")
chamada antiga: assertEquals(1, Util.reverseUntil(data, data.length, data.length, (char) 3))
nova chamada: assertEquals(1, Util.reverseUntil(data, data.length, data.length, (char) 3), "Era esperado valores iguais, mas  1 é diferente de " + result3829 + " <Util.reverseUntil(data, data.length, data.length, (char) 3)>")
chamada antiga: assertEquals(4, Util.reverseUntil(data, data.length, data.length, (char) 28))
nova chamada: assertEquals(4, Util.reverseUntil(data, data.length, data.length, (char) 28), "Era esperado valores iguais, mas  4 é diferente de " + result3830 + " <Util.reverseUntil(data, data.length, data.length, (char) 28)>")
chamada antiga: assertEquals(5, Util.reverseUntil(data, data.length, data.length, (char) 29))
nova chamada: assertEquals(5, Util.reverseUntil(data, data.length, data.length, (char) 29), "Era esperado valores iguais, mas  5 é diferente de " + result3831 + " <Util.reverseUntil(data, data.length, data.length, (char) 29)>")
chamada antiga: assertEquals(6, Util.reverseUntil(data, data.length, data.length, (char) 30))
nova chamada: assertEquals(6, Util.reverseUntil(data, data.length, data.length, (char) 30), "Era esperado valores iguais, mas  6 é diferente de " + result3832 + " <Util.reverseUntil(data, data.length, data.length, (char) 30)>")
chamada antiga: assertEquals(6, Util.reverseUntil(data, data.length, data.length, (char) 31))
nova chamada: assertEquals(6, Util.reverseUntil(data, data.length, data.length, (char) 31), "Era esperado valores iguais, mas  6 é diferente de " + result3833 + " <Util.reverseUntil(data, data.length, data.length, (char) 31)>")
chamada antiga: assertEquals(7, Util.reverseUntil(data, data.length, data.length, (char) -342))
nova chamada: assertEquals(7, Util.reverseUntil(data, data.length, data.length, (char) -342), "Era esperado valores iguais, mas  7 é diferente de " + result3834 + " <Util.reverseUntil(data, data.length, data.length, (char) -342)>")
chamada antiga: assertEquals(1, Util.iterateUntil(data, 0, data.length, ((char) 3)))
nova chamada: assertEquals(1, Util.iterateUntil(data, 0, data.length, ((char) 3)), "Era esperado valores iguais, mas  1 é diferente de " + result3835 + " <Util.iterateUntil(data, 0, data.length, ((char) 3))>")
chamada antiga: assertEquals(5, Util.iterateUntil(data, 0, data.length, ((char) 28)))
nova chamada: assertEquals(5, Util.iterateUntil(data, 0, data.length, ((char) 28)), "Era esperado valores iguais, mas  5 é diferente de " + result3836 + " <Util.iterateUntil(data, 0, data.length, ((char) 28))>")
chamada antiga: assertEquals(5, Util.iterateUntil(data, 0, data.length, ((char) 29)))
nova chamada: assertEquals(5, Util.iterateUntil(data, 0, data.length, ((char) 29)), "Era esperado valores iguais, mas  5 é diferente de " + result3837 + " <Util.iterateUntil(data, 0, data.length, ((char) 29))>")
chamada antiga: assertEquals(7, Util.iterateUntil(data, 0, data.length, ((char) -342)))
nova chamada: assertEquals(7, Util.iterateUntil(data, 0, data.length, ((char) -342)), "Era esperado valores iguais, mas  7 é diferente de " + result3838 + " <Util.iterateUntil(data, 0, data.length, ((char) -342))>")
chamada antiga: assertEquals(expectedCardinality, cardinality)
nova chamada: assertEquals(expectedCardinality, cardinality, "Era esperado valores iguais, mas  expectedCardinality é diferente de " + " cardinality")
chamada antiga: assertArrayEquals(referenceBitmap, bitmap)
nova chamada: assertArrayEquals(referenceBitmap, bitmap, "Era esperado arrays iguais, mas  referenceBitmap é diferente de " + " bitmap")
chamada antiga: assertTrue(rb.getSizeInBytes() <= 50)
nova chamada: assertTrue(rb.getSizeInBytes() <= 50, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(ac <= c)
nova chamada: assertTrue(ac <= c, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(rac <= c)
nova chamada: assertTrue(rac <= c, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(9900, consumer.getNumberOfValuesConsumed())
nova chamada: assertEquals(9900, consumer.getNumberOfValuesConsumed(), "Era esperado valores iguais, mas  9900 é diferente de " + result3839 + " <consumer.getNumberOfValuesConsumed()>")
chamada antiga: assertEquals(1000, consumer2.getNumberOfValuesConsumed())
nova chamada: assertEquals(1000, consumer2.getNumberOfValuesConsumed(), "Era esperado valores iguais, mas  1000 é diferente de " + result3840 + " <consumer2.getNumberOfValuesConsumed()>")
chamada antiga: assertEquals(5, consumer3.getNumberOfValuesConsumed())
nova chamada: assertEquals(5, consumer3.getNumberOfValuesConsumed(), "Era esperado valores iguais, mas  5 é diferente de " + result3841 + " <consumer3.getNumberOfValuesConsumed()>")
chamada antiga: assertEquals(5, consumer4.getNumberOfValuesConsumed())
nova chamada: assertEquals(5, consumer4.getNumberOfValuesConsumed(), "Era esperado valores iguais, mas  5 é diferente de " + result3842 + " <consumer4.getNumberOfValuesConsumed()>")
chamada antiga: assertEquals(100000, consumer.getNumberOfValuesConsumed())
nova chamada: assertEquals(100000, consumer.getNumberOfValuesConsumed(), "Era esperado valores iguais, mas  100000 é diferente de " + result3843 + " <consumer.getNumberOfValuesConsumed()>")
chamada antiga: assertEquals(3500, consumer2.getNumberOfValuesConsumed())
nova chamada: assertEquals(3500, consumer2.getNumberOfValuesConsumed(), "Era esperado valores iguais, mas  3500 é diferente de " + result3844 + " <consumer2.getNumberOfValuesConsumed()>")
chamada antiga: assertEquals(6, consumer3.getNumberOfValuesConsumed())
nova chamada: assertEquals(6, consumer3.getNumberOfValuesConsumed(), "Era esperado valores iguais, mas  6 é diferente de " + result3845 + " <consumer3.getNumberOfValuesConsumed()>")
chamada antiga: assertEquals(100000, consumer.getNumberOfValuesConsumed())
nova chamada: assertEquals(100000, consumer.getNumberOfValuesConsumed(), "Era esperado valores iguais, mas  100000 é diferente de " + result3846 + " <consumer.getNumberOfValuesConsumed()>")
chamada antiga: assertEquals(3500, consumer2.getNumberOfValuesConsumed())
nova chamada: assertEquals(3500, consumer2.getNumberOfValuesConsumed(), "Era esperado valores iguais, mas  3500 é diferente de " + result3847 + " <consumer2.getNumberOfValuesConsumed()>")
chamada antiga: assertEquals(1000, consumer3.getNumberOfValuesConsumed())
nova chamada: assertEquals(1000, consumer3.getNumberOfValuesConsumed(), "Era esperado valores iguais, mas  1000 é diferente de " + result3848 + " <consumer3.getNumberOfValuesConsumed()>")
chamada antiga: assertEquals(2, consumer.getNumberOfValuesConsumed())
nova chamada: assertEquals(2, consumer.getNumberOfValuesConsumed(), "Era esperado valores iguais, mas  2 é diferente de " + result3849 + " <consumer.getNumberOfValuesConsumed()>")
chamada antiga: assertEquals(2, consumer2.getNumberOfValuesConsumed())
nova chamada: assertEquals(2, consumer2.getNumberOfValuesConsumed(), "Era esperado valores iguais, mas  2 é diferente de " + result3850 + " <consumer2.getNumberOfValuesConsumed()>")
chamada antiga: assertEquals(2, consumer3.getNumberOfValuesConsumed())
nova chamada: assertEquals(2, consumer3.getNumberOfValuesConsumed(), "Era esperado valores iguais, mas  2 é diferente de " + result3851 + " <consumer3.getNumberOfValuesConsumed()>")
chamada antiga: assertThrows(IllegalArgumentException.class, () -> {
    bitmap.forAllInRange(0xFFFFFFFE, 3, ValidationRangeConsumer.ofSize(3));
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    bitmap.forAllInRange(0xFFFFFFFE, 3, ValidationRangeConsumer.ofSize(3));
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: assertEquals(2, consumer.getNumberOfValuesConsumed())
nova chamada: assertEquals(2, consumer.getNumberOfValuesConsumed(), "Era esperado valores iguais, mas  2 é diferente de " + result3852 + " <consumer.getNumberOfValuesConsumed()>")
chamada antiga: assertEquals(2, consumer2.getNumberOfValuesConsumed())
nova chamada: assertEquals(2, consumer2.getNumberOfValuesConsumed(), "Era esperado valores iguais, mas  2 é diferente de " + result3853 + " <consumer2.getNumberOfValuesConsumed()>")
chamada antiga: assertEquals(2, consumer3.getNumberOfValuesConsumed())
nova chamada: assertEquals(2, consumer3.getNumberOfValuesConsumed(), "Era esperado valores iguais, mas  2 é diferente de " + result3854 + " <consumer3.getNumberOfValuesConsumed()>")
chamada antiga: assertEquals(RoaringBitmap.bitmapOfRange(0, size), range.lte(size))
nova chamada: assertEquals(RoaringBitmap.bitmapOfRange(0, size), range.lte(size), "Era esperado valores iguais, mas " + result3855 + " <RoaringBitmap.bitmapOfRange(0, size)> é diferente de " + result3856 + " <range.lte(size)>")
chamada antiga: assertEquals(expected, range.lt(0))
nova chamada: assertEquals(expected, range.lt(0), "Era esperado valores iguais, mas  expected é diferente de " + result3857 + " <range.lt(0)>")
chamada antiga: assertEquals(expected.getCardinality(), range.ltCardinality(0))
nova chamada: assertEquals(expected.getCardinality(), range.ltCardinality(0), "Era esperado valores iguais, mas " + result3858 + " <expected.getCardinality()> é diferente de " + result3859 + " <range.ltCardinality(0)>")
chamada antiga: assertEquals(expected, range.lte(999_999))
nova chamada: assertEquals(expected, range.lte(999_999), "Era esperado valores iguais, mas  expected é diferente de " + result3860 + " <range.lte(999_999)>")
chamada antiga: assertEquals(expected.getCardinality(), range.lteCardinality(999_999))
nova chamada: assertEquals(expected.getCardinality(), range.lteCardinality(999_999), "Era esperado valores iguais, mas " + result3861 + " <expected.getCardinality()> é diferente de " + result3862 + " <range.lteCardinality(999_999)>")
chamada antiga: assertEquals(expected, range.lte(1_000_000))
nova chamada: assertEquals(expected, range.lte(1_000_000), "Era esperado valores iguais, mas  expected é diferente de " + result3863 + " <range.lte(1_000_000)>")
chamada antiga: assertEquals(expected.getCardinality(), range.lteCardinality(1_000_000))
nova chamada: assertEquals(expected.getCardinality(), range.lteCardinality(1_000_000), "Era esperado valores iguais, mas " + result3864 + " <expected.getCardinality()> é diferente de " + result3865 + " <range.lteCardinality(1_000_000)>")
chamada antiga: assertEquals(expected, range.lt(1_000_000))
nova chamada: assertEquals(expected, range.lt(1_000_000), "Era esperado valores iguais, mas  expected é diferente de " + result3866 + " <range.lt(1_000_000)>")
chamada antiga: assertEquals(expected.getCardinality(), range.ltCardinality(1_000_000))
nova chamada: assertEquals(expected.getCardinality(), range.ltCardinality(1_000_000), "Era esperado valores iguais, mas " + result3867 + " <expected.getCardinality()> é diferente de " + result3868 + " <range.ltCardinality(1_000_000)>")
chamada antiga: assertEquals(expected, range.lte(1_000_000_000))
nova chamada: assertEquals(expected, range.lte(1_000_000_000), "Era esperado valores iguais, mas  expected é diferente de " + result3869 + " <range.lte(1_000_000_000)>")
chamada antiga: assertEquals(expected.getCardinality(), range.lteCardinality(1_000_000_000))
nova chamada: assertEquals(expected.getCardinality(), range.lteCardinality(1_000_000_000), "Era esperado valores iguais, mas " + result3870 + " <expected.getCardinality()> é diferente de " + result3871 + " <range.lteCardinality(1_000_000_000)>")
chamada antiga: assertEquals(expected, range.lt(1_000_000_000))
nova chamada: assertEquals(expected, range.lt(1_000_000_000), "Era esperado valores iguais, mas  expected é diferente de " + result3872 + " <range.lt(1_000_000_000)>")
chamada antiga: assertEquals(expected.getCardinality(), range.ltCardinality(1_000_000_000))
nova chamada: assertEquals(expected.getCardinality(), range.ltCardinality(1_000_000_000), "Era esperado valores iguais, mas " + result3873 + " <expected.getCardinality()> é diferente de " + result3874 + " <range.ltCardinality(1_000_000_000)>")
chamada antiga: assertEquals(RoaringBitmap.bitmapOfRange(0, size), range.lte(size))
nova chamada: assertEquals(RoaringBitmap.bitmapOfRange(0, size), range.lte(size), "Era esperado valores iguais, mas " + result3875 + " <RoaringBitmap.bitmapOfRange(0, size)> é diferente de " + result3876 + " <range.lte(size)>")
chamada antiga: assertEquals(size, range.lteCardinality(size))
nova chamada: assertEquals(size, range.lteCardinality(size), "Era esperado valores iguais, mas  size é diferente de " + result3877 + " <range.lteCardinality(size)>")
chamada antiga: assertEquals(RoaringBitmap.bitmapOfRange(0, size), range.lte(size + 1))
nova chamada: assertEquals(RoaringBitmap.bitmapOfRange(0, size), range.lte(size + 1), "Era esperado valores iguais, mas " + result3878 + " <RoaringBitmap.bitmapOfRange(0, size)> é diferente de " + result3879 + " <range.lte(size + 1)>")
chamada antiga: assertEquals(size, range.lteCardinality(size + 1))
nova chamada: assertEquals(size, range.lteCardinality(size + 1), "Era esperado valores iguais, mas  size é diferente de " + result3880 + " <range.lteCardinality(size + 1)>")
chamada antiga: assertEquals(RoaringBitmap.bitmapOfRange(0, size), range.lte(size * 10L))
nova chamada: assertEquals(RoaringBitmap.bitmapOfRange(0, size), range.lte(size * 10L), "Era esperado valores iguais, mas " + result3881 + " <RoaringBitmap.bitmapOfRange(0, size)> é diferente de " + result3882 + " <range.lte(size * 10L)>")
chamada antiga: assertEquals(size, range.lteCardinality(size * 10L))
nova chamada: assertEquals(size, range.lteCardinality(size * 10L), "Era esperado valores iguais, mas  size é diferente de " + result3883 + " <range.lteCardinality(size * 10L)>")
chamada antiga: assertFalse(bitmap.lte(Long.MIN_VALUE).isEmpty())
nova chamada: assertFalse(bitmap.lte(Long.MIN_VALUE).isEmpty(), "Era esperado falso, mas " + result3884 + " <bitmap.lte(Long.MIN_VALUE).isEmpty()> é verdadeiro ")
chamada antiga: assertTrue(bitmap.lteCardinality(Long.MIN_VALUE) > 0)
nova chamada: assertTrue(bitmap.lteCardinality(Long.MIN_VALUE) > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(bitmap.lte(Long.MIN_VALUE).isEmpty())
nova chamada: assertTrue(bitmap.lte(Long.MIN_VALUE).isEmpty(), "Era esperado verdadeiro, mas " + result3885 + " <bitmap.lte(Long.MIN_VALUE).isEmpty()> é falso")
chamada antiga: assertEquals(0, bitmap.lteCardinality(Long.MIN_VALUE))
nova chamada: assertEquals(0, bitmap.lteCardinality(Long.MIN_VALUE), "Era esperado valores iguais, mas  0 é diferente de " + result3886 + " <bitmap.lteCardinality(Long.MIN_VALUE)>")
chamada antiga: assertEquals(values.length, bitmap.lte(max).getCardinality())
nova chamada: assertEquals(values.length, bitmap.lte(max).getCardinality(), "Era esperado valores iguais, mas  values.length é diferente de " + result3887 + " <bitmap.lte(max).getCardinality()>")
chamada antiga: assertEquals(values.length, bitmap.lteCardinality(max))
nova chamada: assertEquals(values.length, bitmap.lteCardinality(max), "Era esperado valores iguais, mas  values.length é diferente de " + result3888 + " <bitmap.lteCardinality(max)>")
chamada antiga: assertEquals(values.length, bitmap.gte(0).getCardinality())
nova chamada: assertEquals(values.length, bitmap.gte(0).getCardinality(), "Era esperado valores iguais, mas  values.length é diferente de " + result3889 + " <bitmap.gte(0).getCardinality()>")
chamada antiga: assertEquals(values.length, bitmap.gteCardinality(0))
nova chamada: assertEquals(values.length, bitmap.gteCardinality(0), "Era esperado valores iguais, mas  values.length é diferente de " + result3890 + " <bitmap.gteCardinality(0)>")
chamada antiga: assertAll(LongStream.range(0, 7).map(i -> (long) Math.pow(10, i)).mapToObj(threshold -> () -> {
    assertEquals(referenceImplementation.lessThanOrEqualTo(threshold), sut.lte(threshold));
    assertEquals(referenceImplementation.lessThanOrEqualTo(threshold).getCardinality(), sut.lteCardinality(threshold));
}))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", LongStream.range(0, 7).map(i -> (long) Math.pow(10, i)).mapToObj(threshold -> () -> {
    assertEquals(referenceImplementation.lessThanOrEqualTo(threshold), sut.lte(threshold));
    assertEquals(referenceImplementation.lessThanOrEqualTo(threshold).getCardinality(), sut.lteCardinality(threshold));
}))
chamada antiga: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", LongStream.range(0, 7).map(i -> (long) Math.pow(10, i)).mapToObj(threshold -> () -> {
    assertEquals(referenceImplementation.lessThanOrEqualTo(threshold), sut.lte(threshold));
    assertEquals(referenceImplementation.lessThanOrEqualTo(threshold).getCardinality(), sut.lteCardinality(threshold));
}))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", "Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", LongStream.range(0, 7).map(i -> (long) Math.pow(10, i)).mapToObj(threshold -> () -> {
    assertEquals(referenceImplementation.lessThanOrEqualTo(threshold), sut.lte(threshold));
    assertEquals(referenceImplementation.lessThanOrEqualTo(threshold).getCardinality(), sut.lteCardinality(threshold));
}))
chamada antiga: assertAll(IntStream.range(0, 7).mapToObj(i -> () -> {
    assertEquals(precomputed[i], sut.lte((long) Math.pow(10, i)));
    assertEquals(precomputed[i].getCardinality(), sut.lteCardinality((long) Math.pow(10, i)));
}))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", IntStream.range(0, 7).mapToObj(i -> () -> {
    assertEquals(precomputed[i], sut.lte((long) Math.pow(10, i)));
    assertEquals(precomputed[i].getCardinality(), sut.lteCardinality((long) Math.pow(10, i)));
}))
chamada antiga: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", IntStream.range(0, 7).mapToObj(i -> () -> {
    assertEquals(precomputed[i], sut.lte((long) Math.pow(10, i)));
    assertEquals(precomputed[i].getCardinality(), sut.lteCardinality((long) Math.pow(10, i)));
}))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", "Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", IntStream.range(0, 7).mapToObj(i -> () -> {
    assertEquals(precomputed[i], sut.lte((long) Math.pow(10, i)));
    assertEquals(precomputed[i].getCardinality(), sut.lteCardinality((long) Math.pow(10, i)));
}))
chamada antiga: assertAll(IntStream.range(0, 7).mapToObj(i -> () -> {
    assertEquals(all, RoaringBitmap.or((sut.lte((long) Math.pow(10, i))), sut.gt((long) Math.pow(10, i))));
    assertEquals(all.getCardinality(), sut.lteCardinality((long) Math.pow(10, i)) + sut.gtCardinality((long) Math.pow(10, i)));
}))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", IntStream.range(0, 7).mapToObj(i -> () -> {
    assertEquals(all, RoaringBitmap.or((sut.lte((long) Math.pow(10, i))), sut.gt((long) Math.pow(10, i))));
    assertEquals(all.getCardinality(), sut.lteCardinality((long) Math.pow(10, i)) + sut.gtCardinality((long) Math.pow(10, i)));
}))
chamada antiga: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", IntStream.range(0, 7).mapToObj(i -> () -> {
    assertEquals(all, RoaringBitmap.or((sut.lte((long) Math.pow(10, i))), sut.gt((long) Math.pow(10, i))));
    assertEquals(all.getCardinality(), sut.lteCardinality((long) Math.pow(10, i)) + sut.gtCardinality((long) Math.pow(10, i)));
}))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", "Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", IntStream.range(0, 7).mapToObj(i -> () -> {
    assertEquals(all, RoaringBitmap.or((sut.lte((long) Math.pow(10, i))), sut.gt((long) Math.pow(10, i))));
    assertEquals(all.getCardinality(), sut.lteCardinality((long) Math.pow(10, i)) + sut.gtCardinality((long) Math.pow(10, i)));
}))
chamada antiga: assertAll(IntStream.range(0, 7).mapToObj(i -> () -> {
    assertEquals(all, RoaringBitmap.or((sut.lt((long) Math.pow(10, i))), sut.gte((long) Math.pow(10, i))));
    assertEquals(all.getCardinality(), sut.ltCardinality((long) Math.pow(10, i)) + sut.gteCardinality((long) Math.pow(10, i)));
}))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", IntStream.range(0, 7).mapToObj(i -> () -> {
    assertEquals(all, RoaringBitmap.or((sut.lt((long) Math.pow(10, i))), sut.gte((long) Math.pow(10, i))));
    assertEquals(all.getCardinality(), sut.ltCardinality((long) Math.pow(10, i)) + sut.gteCardinality((long) Math.pow(10, i)));
}))
chamada antiga: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", IntStream.range(0, 7).mapToObj(i -> () -> {
    assertEquals(all, RoaringBitmap.or((sut.lt((long) Math.pow(10, i))), sut.gte((long) Math.pow(10, i))));
    assertEquals(all.getCardinality(), sut.ltCardinality((long) Math.pow(10, i)) + sut.gteCardinality((long) Math.pow(10, i)));
}))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", "Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", IntStream.range(0, 7).mapToObj(i -> () -> {
    assertEquals(all, RoaringBitmap.or((sut.lt((long) Math.pow(10, i))), sut.gte((long) Math.pow(10, i))));
    assertEquals(all.getCardinality(), sut.ltCardinality((long) Math.pow(10, i)) + sut.gteCardinality((long) Math.pow(10, i)));
}))
chamada antiga: assertAll(IntStream.range(0, 7).mapToObj(i -> () -> {
    assertEquals(RoaringBitmap.andNot(all, precomputed[i]), sut.gt((long) Math.pow(10, i)));
    assertEquals(RoaringBitmap.andNot(all, precomputed[i]).getCardinality(), sut.gtCardinality((long) Math.pow(10, i)));
}))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", IntStream.range(0, 7).mapToObj(i -> () -> {
    assertEquals(RoaringBitmap.andNot(all, precomputed[i]), sut.gt((long) Math.pow(10, i)));
    assertEquals(RoaringBitmap.andNot(all, precomputed[i]).getCardinality(), sut.gtCardinality((long) Math.pow(10, i)));
}))
chamada antiga: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", IntStream.range(0, 7).mapToObj(i -> () -> {
    assertEquals(RoaringBitmap.andNot(all, precomputed[i]), sut.gt((long) Math.pow(10, i)));
    assertEquals(RoaringBitmap.andNot(all, precomputed[i]).getCardinality(), sut.gtCardinality((long) Math.pow(10, i)));
}))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", "Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", IntStream.range(0, 7).mapToObj(i -> () -> {
    assertEquals(RoaringBitmap.andNot(all, precomputed[i]), sut.gt((long) Math.pow(10, i)));
    assertEquals(RoaringBitmap.andNot(all, precomputed[i]).getCardinality(), sut.gtCardinality((long) Math.pow(10, i)));
}))
chamada antiga: assertEquals(sut.between(0, 10), RoaringBitmap.bitmapOfRange(0, 10))
nova chamada: assertEquals(sut.between(0, 10), RoaringBitmap.bitmapOfRange(0, 10), "Era esperado valores iguais, mas " + result3901 + " <sut.between(0, 10)> é diferente de " + result3902 + " <RoaringBitmap.bitmapOfRange(0, 10)>")
chamada antiga: assertEquals(sut.betweenCardinality(0, 10), 10)
nova chamada: assertEquals(sut.betweenCardinality(0, 10), 10, "Era esperado valores iguais, mas " + result3903 + " <sut.betweenCardinality(0, 10)> é diferente de " + " 10")
chamada antiga: assertEquals(sut.between(1, 10), RoaringBitmap.bitmapOfRange(1, 10))
nova chamada: assertEquals(sut.between(1, 10), RoaringBitmap.bitmapOfRange(1, 10), "Era esperado valores iguais, mas " + result3904 + " <sut.between(1, 10)> é diferente de " + result3905 + " <RoaringBitmap.bitmapOfRange(1, 10)>")
chamada antiga: assertEquals(sut.betweenCardinality(1, 10), 9)
nova chamada: assertEquals(sut.betweenCardinality(1, 10), 9, "Era esperado valores iguais, mas " + result3906 + " <sut.betweenCardinality(1, 10)> é diferente de " + " 9")
chamada antiga: assertEquals(sut.between(1, 9), RoaringBitmap.bitmapOfRange(1, 10))
nova chamada: assertEquals(sut.between(1, 9), RoaringBitmap.bitmapOfRange(1, 10), "Era esperado valores iguais, mas " + result3907 + " <sut.between(1, 9)> é diferente de " + result3908 + " <RoaringBitmap.bitmapOfRange(1, 10)>")
chamada antiga: assertEquals(sut.betweenCardinality(1, 9), 9)
nova chamada: assertEquals(sut.betweenCardinality(1, 9), 9, "Era esperado valores iguais, mas " + result3909 + " <sut.betweenCardinality(1, 9)> é diferente de " + " 9")
chamada antiga: assertEquals(sut.between(1, 9), RoaringBitmap.bitmapOfRange(1, 10))
nova chamada: assertEquals(sut.between(1, 9), RoaringBitmap.bitmapOfRange(1, 10), "Era esperado valores iguais, mas " + result3910 + " <sut.between(1, 9)> é diferente de " + result3911 + " <RoaringBitmap.bitmapOfRange(1, 10)>")
chamada antiga: assertEquals(sut.betweenCardinality(1, 9), 9)
nova chamada: assertEquals(sut.betweenCardinality(1, 9), 9, "Era esperado valores iguais, mas " + result3912 + " <sut.betweenCardinality(1, 9)> é diferente de " + " 9")
chamada antiga: assertEquals(sut.between(2, 8), RoaringBitmap.bitmapOfRange(2, 9))
nova chamada: assertEquals(sut.between(2, 8), RoaringBitmap.bitmapOfRange(2, 9), "Era esperado valores iguais, mas " + result3913 + " <sut.between(2, 8)> é diferente de " + result3914 + " <RoaringBitmap.bitmapOfRange(2, 9)>")
chamada antiga: assertEquals(sut.betweenCardinality(2, 8), 7)
nova chamada: assertEquals(sut.betweenCardinality(2, 8), 7, "Era esperado valores iguais, mas " + result3915 + " <sut.betweenCardinality(2, 8)> é diferente de " + " 7")
chamada antiga: assertEquals(sut.between(3, 7), RoaringBitmap.bitmapOfRange(3, 8))
nova chamada: assertEquals(sut.between(3, 7), RoaringBitmap.bitmapOfRange(3, 8), "Era esperado valores iguais, mas " + result3916 + " <sut.between(3, 7)> é diferente de " + result3917 + " <RoaringBitmap.bitmapOfRange(3, 8)>")
chamada antiga: assertEquals(sut.betweenCardinality(3, 7), 5)
nova chamada: assertEquals(sut.betweenCardinality(3, 7), 5, "Era esperado valores iguais, mas " + result3918 + " <sut.betweenCardinality(3, 7)> é diferente de " + " 5")
chamada antiga: assertEquals(RoaringBitmap.bitmapOfRange(0, 11), sut.between(0, 10))
nova chamada: assertEquals(RoaringBitmap.bitmapOfRange(0, 11), sut.between(0, 10), "Era esperado valores iguais, mas " + result3919 + " <RoaringBitmap.bitmapOfRange(0, 11)> é diferente de " + result3920 + " <sut.between(0, 10)>")
chamada antiga: assertEquals(11, sut.betweenCardinality(0, 10))
nova chamada: assertEquals(11, sut.betweenCardinality(0, 10), "Era esperado valores iguais, mas  11 é diferente de " + result3921 + " <sut.betweenCardinality(0, 10)>")
chamada antiga: assertEquals(RoaringBitmap.bitmapOfRange(1, 11), sut.between(1, 10))
nova chamada: assertEquals(RoaringBitmap.bitmapOfRange(1, 11), sut.between(1, 10), "Era esperado valores iguais, mas " + result3922 + " <RoaringBitmap.bitmapOfRange(1, 11)> é diferente de " + result3923 + " <sut.between(1, 10)>")
chamada antiga: assertEquals(10, sut.betweenCardinality(1, 10))
nova chamada: assertEquals(10, sut.betweenCardinality(1, 10), "Era esperado valores iguais, mas  10 é diferente de " + result3924 + " <sut.betweenCardinality(1, 10)>")
chamada antiga: assertEquals(RoaringBitmap.bitmapOfRange(1, 10), sut.between(1, 9))
nova chamada: assertEquals(RoaringBitmap.bitmapOfRange(1, 10), sut.between(1, 9), "Era esperado valores iguais, mas " + result3925 + " <RoaringBitmap.bitmapOfRange(1, 10)> é diferente de " + result3926 + " <sut.between(1, 9)>")
chamada antiga: assertEquals(9, sut.betweenCardinality(1, 9))
nova chamada: assertEquals(9, sut.betweenCardinality(1, 9), "Era esperado valores iguais, mas  9 é diferente de " + result3927 + " <sut.betweenCardinality(1, 9)>")
chamada antiga: assertEquals(RoaringBitmap.bitmapOfRange(1, 10), sut.between(1, 9))
nova chamada: assertEquals(RoaringBitmap.bitmapOfRange(1, 10), sut.between(1, 9), "Era esperado valores iguais, mas " + result3928 + " <RoaringBitmap.bitmapOfRange(1, 10)> é diferente de " + result3929 + " <sut.between(1, 9)>")
chamada antiga: assertEquals(9, sut.betweenCardinality(1, 9))
nova chamada: assertEquals(9, sut.betweenCardinality(1, 9), "Era esperado valores iguais, mas  9 é diferente de " + result3930 + " <sut.betweenCardinality(1, 9)>")
chamada antiga: assertEquals(RoaringBitmap.bitmapOfRange(2, 9), sut.between(2, 8))
nova chamada: assertEquals(RoaringBitmap.bitmapOfRange(2, 9), sut.between(2, 8), "Era esperado valores iguais, mas " + result3931 + " <RoaringBitmap.bitmapOfRange(2, 9)> é diferente de " + result3932 + " <sut.between(2, 8)>")
chamada antiga: assertEquals(7, sut.betweenCardinality(2, 8))
nova chamada: assertEquals(7, sut.betweenCardinality(2, 8), "Era esperado valores iguais, mas  7 é diferente de " + result3933 + " <sut.betweenCardinality(2, 8)>")
chamada antiga: assertEquals(RoaringBitmap.bitmapOfRange(3, 8), sut.between(3, 7))
nova chamada: assertEquals(RoaringBitmap.bitmapOfRange(3, 8), sut.between(3, 7), "Era esperado valores iguais, mas " + result3934 + " <RoaringBitmap.bitmapOfRange(3, 8)> é diferente de " + result3935 + " <sut.between(3, 7)>")
chamada antiga: assertEquals(5, sut.betweenCardinality(3, 7))
nova chamada: assertEquals(5, sut.betweenCardinality(3, 7), "Era esperado valores iguais, mas  5 é diferente de " + result3936 + " <sut.betweenCardinality(3, 7)>")
chamada antiga: assertEquals(RoaringBitmap.bitmapOfRange(0x10000 - 5, 0x10000 + 6), sut.between(0x10000 - 5, 0x10000 + 5))
nova chamada: assertEquals(RoaringBitmap.bitmapOfRange(0x10000 - 5, 0x10000 + 6), sut.between(0x10000 - 5, 0x10000 + 5), "Era esperado valores iguais, mas " + result3937 + " <RoaringBitmap.bitmapOfRange(0x10000 - 5, 0x10000 + 6)> é diferente de " + result3938 + " <sut.between(0x10000 - 5, 0x10000 + 5)>")
chamada antiga: assertEquals(11, RoaringBitmap.bitmapOfRange(0x10000 - 5, 0x10000 + 6).getCardinality())
nova chamada: assertEquals(11, RoaringBitmap.bitmapOfRange(0x10000 - 5, 0x10000 + 6).getCardinality(), "Era esperado valores iguais, mas  11 é diferente de " + result3939 + " <RoaringBitmap.bitmapOfRange(0x10000 - 5, 0x10000 + 6).getCardinality()>")
chamada antiga: assertEquals(11, sut.betweenCardinality(0x10000 - 5, 0x10000 + 5))
nova chamada: assertEquals(11, sut.betweenCardinality(0x10000 - 5, 0x10000 + 5), "Era esperado valores iguais, mas  11 é diferente de " + result3940 + " <sut.betweenCardinality(0x10000 - 5, 0x10000 + 5)>")
chamada antiga: assertEquals(RoaringBitmap.bitmapOf(0), sut.between(-4620693217682128896L, -4616189618054758400L))
nova chamada: assertEquals(RoaringBitmap.bitmapOf(0), sut.between(-4620693217682128896L, -4616189618054758400L), "Era esperado valores iguais, mas " + result3941 + " <RoaringBitmap.bitmapOf(0)> é diferente de " + result3942 + " <sut.between(-4620693217682128896L, -4616189618054758400L)>")
chamada antiga: assertEquals(1, sut.betweenCardinality(-4620693217682128896L, -4616189618054758400L))
nova chamada: assertEquals(1, sut.betweenCardinality(-4620693217682128896L, -4616189618054758400L), "Era esperado valores iguais, mas  1 é diferente de " + result3943 + " <sut.betweenCardinality(-4620693217682128896L, -4616189618054758400L)>")
chamada antiga: assertEquals(RoaringBitmap.bitmapOfRange(5, 47), sut.between(1, 42))
nova chamada: assertEquals(RoaringBitmap.bitmapOfRange(5, 47), sut.between(1, 42), "Era esperado valores iguais, mas " + result3944 + " <RoaringBitmap.bitmapOfRange(5, 47)> é diferente de " + result3945 + " <sut.between(1, 42)>")
chamada antiga: assertEquals(42, sut.betweenCardinality(1, 42))
nova chamada: assertEquals(42, sut.betweenCardinality(1, 42), "Era esperado valores iguais, mas  42 é diferente de " + result3946 + " <sut.betweenCardinality(1, 42)>")
chamada antiga: assertEquals(RoaringBitmap.or(RoaringBitmap.bitmapOf(3), sequentialValues), sut.between(0, 4571364728013586431L))
nova chamada: assertEquals(RoaringBitmap.or(RoaringBitmap.bitmapOf(3), sequentialValues), sut.between(0, 4571364728013586431L), "Era esperado valores iguais, mas " + result3947 + " <RoaringBitmap.or(RoaringBitmap.bitmapOf(3), sequentialValues)> é diferente de " + result3948 + " <sut.between(0, 4571364728013586431L)>")
chamada antiga: assertEquals(RoaringBitmap.or(RoaringBitmap.bitmapOf(3), sequentialValues).getCardinality(), sut.betweenCardinality(0, 4571364728013586431L))
nova chamada: assertEquals(RoaringBitmap.or(RoaringBitmap.bitmapOf(3), sequentialValues).getCardinality(), sut.betweenCardinality(0, 4571364728013586431L), "Era esperado valores iguais, mas " + result3949 + " <RoaringBitmap.or(RoaringBitmap.bitmapOf(3), sequentialValues).getCardinality()> é diferente de " + result3950 + " <sut.betweenCardinality(0, 4571364728013586431L)>")
chamada antiga: assertEquals(RoaringBitmap.or(RoaringBitmap.bitmapOf(1, 3), sequentialValues), sut.between(0, 4601552919265804287L))
nova chamada: assertEquals(RoaringBitmap.or(RoaringBitmap.bitmapOf(1, 3), sequentialValues), sut.between(0, 4601552919265804287L), "Era esperado valores iguais, mas " + result3951 + " <RoaringBitmap.or(RoaringBitmap.bitmapOf(1, 3), sequentialValues)> é diferente de " + result3952 + " <sut.between(0, 4601552919265804287L)>")
chamada antiga: assertEquals(RoaringBitmap.or(RoaringBitmap.bitmapOf(1, 3), sequentialValues).getCardinality(), sut.betweenCardinality(0, 4601552919265804287L))
nova chamada: assertEquals(RoaringBitmap.or(RoaringBitmap.bitmapOf(1, 3), sequentialValues).getCardinality(), sut.betweenCardinality(0, 4601552919265804287L), "Era esperado valores iguais, mas " + result3953 + " <RoaringBitmap.or(RoaringBitmap.bitmapOf(1, 3), sequentialValues).getCardinality()> é diferente de " + result3954 + " <sut.betweenCardinality(0, 4601552919265804287L)>")
chamada antiga: assertEquals(RoaringBitmap.bitmapOf(0), sut.between(Long.MAX_VALUE, -4616189618054758400L))
nova chamada: assertEquals(RoaringBitmap.bitmapOf(0), sut.between(Long.MAX_VALUE, -4616189618054758400L), "Era esperado valores iguais, mas " + result3955 + " <RoaringBitmap.bitmapOf(0)> é diferente de " + result3956 + " <sut.between(Long.MAX_VALUE, -4616189618054758400L)>")
chamada antiga: assertEquals(1, sut.betweenCardinality(Long.MAX_VALUE, -4616189618054758400L))
nova chamada: assertEquals(1, sut.betweenCardinality(Long.MAX_VALUE, -4616189618054758400L), "Era esperado valores iguais, mas  1 é diferente de " + result3957 + " <sut.betweenCardinality(Long.MAX_VALUE, -4616189618054758400L)>")
chamada antiga: assertEquals(RoaringBitmap.bitmapOf(0, 2), sut.between(Long.MAX_VALUE, -4586634745500139520L))
nova chamada: assertEquals(RoaringBitmap.bitmapOf(0, 2), sut.between(Long.MAX_VALUE, -4586634745500139520L), "Era esperado valores iguais, mas " + result3958 + " <RoaringBitmap.bitmapOf(0, 2)> é diferente de " + result3959 + " <sut.between(Long.MAX_VALUE, -4586634745500139520L)>")
chamada antiga: assertEquals(2, sut.betweenCardinality(Long.MAX_VALUE, -4586634745500139520L))
nova chamada: assertEquals(2, sut.betweenCardinality(Long.MAX_VALUE, -4586634745500139520L), "Era esperado valores iguais, mas  2 é diferente de " + result3960 + " <sut.betweenCardinality(Long.MAX_VALUE, -4586634745500139520L)>")
chamada antiga: assertEquals(RoaringBitmap.bitmapOfRange(0, numSequentialValues + 4), sut.between(0, 0xFFFFFFFFFFFFFFFFL))
nova chamada: assertEquals(RoaringBitmap.bitmapOfRange(0, numSequentialValues + 4), sut.between(0, 0xFFFFFFFFFFFFFFFFL), "Era esperado valores iguais, mas " + result3961 + " <RoaringBitmap.bitmapOfRange(0, numSequentialValues + 4)> é diferente de " + result3962 + " <sut.between(0, 0xFFFFFFFFFFFFFFFFL)>")
chamada antiga: assertEquals(RoaringBitmap.bitmapOfRange(0, numSequentialValues + 4).getCardinality(), sut.betweenCardinality(0, 0xFFFFFFFFFFFFFFFFL))
nova chamada: assertEquals(RoaringBitmap.bitmapOfRange(0, numSequentialValues + 4).getCardinality(), sut.betweenCardinality(0, 0xFFFFFFFFFFFFFFFFL), "Era esperado valores iguais, mas " + result3963 + " <RoaringBitmap.bitmapOfRange(0, numSequentialValues + 4).getCardinality()> é diferente de " + result3964 + " <sut.betweenCardinality(0, 0xFFFFFFFFFFFFFFFFL)>")
chamada antiga: assertEquals(RoaringBitmap.bitmapOfRange(0, 4), sut.between(4571364728013586431L, -4586634745500139520L))
nova chamada: assertEquals(RoaringBitmap.bitmapOfRange(0, 4), sut.between(4571364728013586431L, -4586634745500139520L), "Era esperado valores iguais, mas " + result3965 + " <RoaringBitmap.bitmapOfRange(0, 4)> é diferente de " + result3966 + " <sut.between(4571364728013586431L, -4586634745500139520L)>")
chamada antiga: assertEquals(4, sut.betweenCardinality(4571364728013586431L, -4586634745500139520L))
nova chamada: assertEquals(4, sut.betweenCardinality(4571364728013586431L, -4586634745500139520L), "Era esperado valores iguais, mas  4 é diferente de " + result3967 + " <sut.betweenCardinality(4571364728013586431L, -4586634745500139520L)>")
chamada antiga: assertEquals(RoaringBitmap.bitmapOf(0, 2), sut.between(Long.MAX_VALUE, 0xFFFFFFFFFFFFFFFFL))
nova chamada: assertEquals(RoaringBitmap.bitmapOf(0, 2), sut.between(Long.MAX_VALUE, 0xFFFFFFFFFFFFFFFFL), "Era esperado valores iguais, mas " + result3968 + " <RoaringBitmap.bitmapOf(0, 2)> é diferente de " + result3969 + " <sut.between(Long.MAX_VALUE, 0xFFFFFFFFFFFFFFFFL)>")
chamada antiga: assertEquals(2, sut.betweenCardinality(Long.MAX_VALUE, 0xFFFFFFFFFFFFFFFFL))
nova chamada: assertEquals(2, sut.betweenCardinality(Long.MAX_VALUE, 0xFFFFFFFFFFFFFFFFL), "Era esperado valores iguais, mas  2 é diferente de " + result3970 + " <sut.betweenCardinality(Long.MAX_VALUE, 0xFFFFFFFFFFFFFFFFL)>")
chamada antiga: assertEquals(RoaringBitmap.or(RoaringBitmap.bitmapOf(1, 3), sequentialValues), sut.between(0, Long.MAX_VALUE))
nova chamada: assertEquals(RoaringBitmap.or(RoaringBitmap.bitmapOf(1, 3), sequentialValues), sut.between(0, Long.MAX_VALUE), "Era esperado valores iguais, mas " + result3971 + " <RoaringBitmap.or(RoaringBitmap.bitmapOf(1, 3), sequentialValues)> é diferente de " + result3972 + " <sut.between(0, Long.MAX_VALUE)>")
chamada antiga: assertEquals(RoaringBitmap.orCardinality(RoaringBitmap.bitmapOf(1, 3), sequentialValues), sut.betweenCardinality(0, Long.MAX_VALUE))
nova chamada: assertEquals(RoaringBitmap.orCardinality(RoaringBitmap.bitmapOf(1, 3), sequentialValues), sut.betweenCardinality(0, Long.MAX_VALUE), "Era esperado valores iguais, mas " + result3973 + " <RoaringBitmap.orCardinality(RoaringBitmap.bitmapOf(1, 3), sequentialValues)> é diferente de " + result3974 + " <sut.betweenCardinality(0, Long.MAX_VALUE)>")
chamada antiga: assertEquals(new RoaringBitmap(), sut.between(-42, 0xFFFFFFFFFFFFFFFFL))
nova chamada: assertEquals(new RoaringBitmap(), sut.between(-42, 0xFFFFFFFFFFFFFFFFL), "Era esperado valores iguais, mas  new RoaringBitmap() é diferente de " + result3975 + " <sut.between(-42, 0xFFFFFFFFFFFFFFFFL)>")
chamada antiga: assertEquals(0, sut.betweenCardinality(-42, 0xFFFFFFFFFFFFFFFFL))
nova chamada: assertEquals(0, sut.betweenCardinality(-42, 0xFFFFFFFFFFFFFFFFL), "Era esperado valores iguais, mas  0 é diferente de " + result3976 + " <sut.betweenCardinality(-42, 0xFFFFFFFFFFFFFFFFL)>")
chamada antiga: assertEquals(RoaringBitmap.bitmapOf(0), sut.between(-4620693217682128896L, -4616189618054758400L))
nova chamada: assertEquals(RoaringBitmap.bitmapOf(0), sut.between(-4620693217682128896L, -4616189618054758400L), "Era esperado valores iguais, mas " + result3977 + " <RoaringBitmap.bitmapOf(0)> é diferente de " + result3978 + " <sut.between(-4620693217682128896L, -4616189618054758400L)>")
chamada antiga: assertEquals(1, sut.betweenCardinality(-4620693217682128896L, -4616189618054758400L))
nova chamada: assertEquals(1, sut.betweenCardinality(-4620693217682128896L, -4616189618054758400L), "Era esperado valores iguais, mas  1 é diferente de " + result3979 + " <sut.betweenCardinality(-4620693217682128896L, -4616189618054758400L)>")
chamada antiga: assertEquals(new RoaringBitmap(), empty.lte(10, nonEmpty))
nova chamada: assertEquals(new RoaringBitmap(), empty.lte(10, nonEmpty), "Era esperado valores iguais, mas  new RoaringBitmap() é diferente de " + result3980 + " <empty.lte(10, nonEmpty)>")
chamada antiga: assertEquals(0, empty.lteCardinality(10, nonEmpty))
nova chamada: assertEquals(0, empty.lteCardinality(10, nonEmpty), "Era esperado valores iguais, mas  0 é diferente de " + result3981 + " <empty.lteCardinality(10, nonEmpty)>")
chamada antiga: assertEquals(new RoaringBitmap(), empty.lt(10, nonEmpty))
nova chamada: assertEquals(new RoaringBitmap(), empty.lt(10, nonEmpty), "Era esperado valores iguais, mas  new RoaringBitmap() é diferente de " + result3982 + " <empty.lt(10, nonEmpty)>")
chamada antiga: assertEquals(0, empty.ltCardinality(10, nonEmpty))
nova chamada: assertEquals(0, empty.ltCardinality(10, nonEmpty), "Era esperado valores iguais, mas  0 é diferente de " + result3983 + " <empty.ltCardinality(10, nonEmpty)>")
chamada antiga: assertEquals(new RoaringBitmap(), empty.gt(10, nonEmpty))
nova chamada: assertEquals(new RoaringBitmap(), empty.gt(10, nonEmpty), "Era esperado valores iguais, mas  new RoaringBitmap() é diferente de " + result3984 + " <empty.gt(10, nonEmpty)>")
chamada antiga: assertEquals(0, empty.gtCardinality(10, nonEmpty))
nova chamada: assertEquals(0, empty.gtCardinality(10, nonEmpty), "Era esperado valores iguais, mas  0 é diferente de " + result3985 + " <empty.gtCardinality(10, nonEmpty)>")
chamada antiga: assertEquals(new RoaringBitmap(), empty.gte(10, nonEmpty))
nova chamada: assertEquals(new RoaringBitmap(), empty.gte(10, nonEmpty), "Era esperado valores iguais, mas  new RoaringBitmap() é diferente de " + result3986 + " <empty.gte(10, nonEmpty)>")
chamada antiga: assertEquals(0, empty.gteCardinality(10, nonEmpty))
nova chamada: assertEquals(0, empty.gteCardinality(10, nonEmpty), "Era esperado valores iguais, mas  0 é diferente de " + result3987 + " <empty.gteCardinality(10, nonEmpty)>")
chamada antiga: assertEquals(RoaringBitmap.bitmapOf(), bitmap.gt(-1L))
nova chamada: assertEquals(RoaringBitmap.bitmapOf(), bitmap.gt(-1L), "Era esperado valores iguais, mas " + result3988 + " <RoaringBitmap.bitmapOf()> é diferente de " + result3989 + " <bitmap.gt(-1L)>")
chamada antiga: assertEquals(0, bitmap.gtCardinality(-1L))
nova chamada: assertEquals(0, bitmap.gtCardinality(-1L), "Era esperado valores iguais, mas  0 é diferente de " + result3990 + " <bitmap.gtCardinality(-1L)>")
chamada antiga: assertEquals(RoaringBitmap.bitmapOf(2), bitmap.gte(-1L))
nova chamada: assertEquals(RoaringBitmap.bitmapOf(2), bitmap.gte(-1L), "Era esperado valores iguais, mas " + result3991 + " <RoaringBitmap.bitmapOf(2)> é diferente de " + result3992 + " <bitmap.gte(-1L)>")
chamada antiga: assertEquals(1, bitmap.gteCardinality(-1L))
nova chamada: assertEquals(1, bitmap.gteCardinality(-1L), "Era esperado valores iguais, mas  1 é diferente de " + result3993 + " <bitmap.gteCardinality(-1L)>")
chamada antiga: assertEquals(RoaringBitmap.bitmapOf(0, 1, 2), bitmap.lte(-1L))
nova chamada: assertEquals(RoaringBitmap.bitmapOf(0, 1, 2), bitmap.lte(-1L), "Era esperado valores iguais, mas " + result3994 + " <RoaringBitmap.bitmapOf(0, 1, 2)> é diferente de " + result3995 + " <bitmap.lte(-1L)>")
chamada antiga: assertEquals(3, bitmap.lteCardinality(-1L))
nova chamada: assertEquals(3, bitmap.lteCardinality(-1L), "Era esperado valores iguais, mas  3 é diferente de " + result3996 + " <bitmap.lteCardinality(-1L)>")
chamada antiga: assertEquals(RoaringBitmap.bitmapOf(0, 1), bitmap.lte(-2L))
nova chamada: assertEquals(RoaringBitmap.bitmapOf(0, 1), bitmap.lte(-2L), "Era esperado valores iguais, mas " + result3997 + " <RoaringBitmap.bitmapOf(0, 1)> é diferente de " + result3998 + " <bitmap.lte(-2L)>")
chamada antiga: assertEquals(2, bitmap.lteCardinality(-2L))
nova chamada: assertEquals(2, bitmap.lteCardinality(-2L), "Era esperado valores iguais, mas  2 é diferente de " + result3999 + " <bitmap.lteCardinality(-2L)>")
chamada antiga: assertEquals(RoaringBitmap.bitmapOf(0, 1), bitmap.lt(-1L))
nova chamada: assertEquals(RoaringBitmap.bitmapOf(0, 1), bitmap.lt(-1L), "Era esperado valores iguais, mas " + result4000 + " <RoaringBitmap.bitmapOf(0, 1)> é diferente de " + result4001 + " <bitmap.lt(-1L)>")
chamada antiga: assertEquals(2, bitmap.ltCardinality(-1L))
nova chamada: assertEquals(2, bitmap.ltCardinality(-1L), "Era esperado valores iguais, mas  2 é diferente de " + result4002 + " <bitmap.ltCardinality(-1L)>")
chamada antiga: assertEquals(RoaringBitmap.bitmapOf(0, 1), bitmap.lt(-2L))
nova chamada: assertEquals(RoaringBitmap.bitmapOf(0, 1), bitmap.lt(-2L), "Era esperado valores iguais, mas " + result4003 + " <RoaringBitmap.bitmapOf(0, 1)> é diferente de " + result4004 + " <bitmap.lt(-2L)>")
chamada antiga: assertEquals(2, bitmap.ltCardinality(-2L))
nova chamada: assertEquals(2, bitmap.ltCardinality(-2L), "Era esperado valores iguais, mas  2 é diferente de " + result4005 + " <bitmap.ltCardinality(-2L)>")
chamada antiga: assertEquals(RoaringBitmap.bitmapOf(0, 1), bitmap.lte(Long.MIN_VALUE))
nova chamada: assertEquals(RoaringBitmap.bitmapOf(0, 1), bitmap.lte(Long.MIN_VALUE), "Era esperado valores iguais, mas " + result4006 + " <RoaringBitmap.bitmapOf(0, 1)> é diferente de " + result4007 + " <bitmap.lte(Long.MIN_VALUE)>")
chamada antiga: assertEquals(2, bitmap.lteCardinality(Long.MIN_VALUE))
nova chamada: assertEquals(2, bitmap.lteCardinality(Long.MIN_VALUE), "Era esperado valores iguais, mas  2 é diferente de " + result4008 + " <bitmap.lteCardinality(Long.MIN_VALUE)>")
chamada antiga: assertEquals(RoaringBitmap.bitmapOf(0), bitmap.lt(Long.MIN_VALUE))
nova chamada: assertEquals(RoaringBitmap.bitmapOf(0), bitmap.lt(Long.MIN_VALUE), "Era esperado valores iguais, mas " + result4009 + " <RoaringBitmap.bitmapOf(0)> é diferente de " + result4010 + " <bitmap.lt(Long.MIN_VALUE)>")
chamada antiga: assertEquals(1, bitmap.ltCardinality(Long.MIN_VALUE))
nova chamada: assertEquals(1, bitmap.ltCardinality(Long.MIN_VALUE), "Era esperado valores iguais, mas  1 é diferente de " + result4011 + " <bitmap.ltCardinality(Long.MIN_VALUE)>")
chamada antiga: assertEquals(RoaringBitmap.bitmapOf(2), bitmap.gt(Long.MIN_VALUE))
nova chamada: assertEquals(RoaringBitmap.bitmapOf(2), bitmap.gt(Long.MIN_VALUE), "Era esperado valores iguais, mas " + result4012 + " <RoaringBitmap.bitmapOf(2)> é diferente de " + result4013 + " <bitmap.gt(Long.MIN_VALUE)>")
chamada antiga: assertEquals(1, bitmap.gtCardinality(Long.MIN_VALUE))
nova chamada: assertEquals(1, bitmap.gtCardinality(Long.MIN_VALUE), "Era esperado valores iguais, mas  1 é diferente de " + result4014 + " <bitmap.gtCardinality(Long.MIN_VALUE)>")
chamada antiga: assertEquals(RoaringBitmap.bitmapOf(1, 2), bitmap.gte(Long.MIN_VALUE))
nova chamada: assertEquals(RoaringBitmap.bitmapOf(1, 2), bitmap.gte(Long.MIN_VALUE), "Era esperado valores iguais, mas " + result4015 + " <RoaringBitmap.bitmapOf(1, 2)> é diferente de " + result4016 + " <bitmap.gte(Long.MIN_VALUE)>")
chamada antiga: assertEquals(2, bitmap.gteCardinality(Long.MIN_VALUE))
nova chamada: assertEquals(2, bitmap.gteCardinality(Long.MIN_VALUE), "Era esperado valores iguais, mas  2 é diferente de " + result4017 + " <bitmap.gteCardinality(Long.MIN_VALUE)>")
chamada antiga: assertEquals(RoaringBitmap.bitmapOf(0), bitmap.lte(0))
nova chamada: assertEquals(RoaringBitmap.bitmapOf(0), bitmap.lte(0), "Era esperado valores iguais, mas " + result4018 + " <RoaringBitmap.bitmapOf(0)> é diferente de " + result4019 + " <bitmap.lte(0)>")
chamada antiga: assertEquals(1, bitmap.lteCardinality(0))
nova chamada: assertEquals(1, bitmap.lteCardinality(0), "Era esperado valores iguais, mas  1 é diferente de " + result4020 + " <bitmap.lteCardinality(0)>")
chamada antiga: assertEquals(RoaringBitmap.bitmapOf(), bitmap.lt(0))
nova chamada: assertEquals(RoaringBitmap.bitmapOf(), bitmap.lt(0), "Era esperado valores iguais, mas " + result4021 + " <RoaringBitmap.bitmapOf()> é diferente de " + result4022 + " <bitmap.lt(0)>")
chamada antiga: assertEquals(0, bitmap.ltCardinality(0))
nova chamada: assertEquals(0, bitmap.ltCardinality(0), "Era esperado valores iguais, mas  0 é diferente de " + result4023 + " <bitmap.ltCardinality(0)>")
chamada antiga: assertEquals(RoaringBitmap.bitmapOf(0, 1, 2), bitmap.gte(0))
nova chamada: assertEquals(RoaringBitmap.bitmapOf(0, 1, 2), bitmap.gte(0), "Era esperado valores iguais, mas " + result4024 + " <RoaringBitmap.bitmapOf(0, 1, 2)> é diferente de " + result4025 + " <bitmap.gte(0)>")
chamada antiga: assertEquals(3, bitmap.gteCardinality(0))
nova chamada: assertEquals(3, bitmap.gteCardinality(0), "Era esperado valores iguais, mas  3 é diferente de " + result4026 + " <bitmap.gteCardinality(0)>")
chamada antiga: assertEquals(RoaringBitmap.bitmapOf(1, 2), bitmap.gt(0))
nova chamada: assertEquals(RoaringBitmap.bitmapOf(1, 2), bitmap.gt(0), "Era esperado valores iguais, mas " + result4027 + " <RoaringBitmap.bitmapOf(1, 2)> é diferente de " + result4028 + " <bitmap.gt(0)>")
chamada antiga: assertEquals(2, bitmap.gtCardinality(0))
nova chamada: assertEquals(2, bitmap.gtCardinality(0), "Era esperado valores iguais, mas  2 é diferente de " + result4029 + " <bitmap.gtCardinality(0)>")
chamada antiga: assertEquals(RoaringBitmap.bitmapOf(), bitmap.eq(2L))
nova chamada: assertEquals(RoaringBitmap.bitmapOf(), bitmap.eq(2L), "Era esperado valores iguais, mas " + result4030 + " <RoaringBitmap.bitmapOf()> é diferente de " + result4031 + " <bitmap.eq(2L)>")
chamada antiga: assertEquals(RoaringBitmap.bitmapOf(0, 1, 2), bitmap.neq(2L))
nova chamada: assertEquals(RoaringBitmap.bitmapOf(0, 1, 2), bitmap.neq(2L), "Era esperado valores iguais, mas " + result4032 + " <RoaringBitmap.bitmapOf(0, 1, 2)> é diferente de " + result4033 + " <bitmap.neq(2L)>")
chamada antiga: assertEquals(RoaringBitmap.bitmapOf(0), bitmap.eq(0L))
nova chamada: assertEquals(RoaringBitmap.bitmapOf(0), bitmap.eq(0L), "Era esperado valores iguais, mas " + result4034 + " <RoaringBitmap.bitmapOf(0)> é diferente de " + result4035 + " <bitmap.eq(0L)>")
chamada antiga: assertEquals(RoaringBitmap.bitmapOf(1), bitmap.eq(Long.MIN_VALUE))
nova chamada: assertEquals(RoaringBitmap.bitmapOf(1), bitmap.eq(Long.MIN_VALUE), "Era esperado valores iguais, mas " + result4036 + " <RoaringBitmap.bitmapOf(1)> é diferente de " + result4037 + " <bitmap.eq(Long.MIN_VALUE)>")
chamada antiga: assertEquals(RoaringBitmap.bitmapOf(2), bitmap.eq(-1L))
nova chamada: assertEquals(RoaringBitmap.bitmapOf(2), bitmap.eq(-1L), "Era esperado valores iguais, mas " + result4038 + " <RoaringBitmap.bitmapOf(2)> é diferente de " + result4039 + " <bitmap.eq(-1L)>")
chamada antiga: assertEquals(RoaringBitmap.bitmapOf(1, 2), bitmap.neq(0L))
nova chamada: assertEquals(RoaringBitmap.bitmapOf(1, 2), bitmap.neq(0L), "Era esperado valores iguais, mas " + result4040 + " <RoaringBitmap.bitmapOf(1, 2)> é diferente de " + result4041 + " <bitmap.neq(0L)>")
chamada antiga: assertEquals(RoaringBitmap.bitmapOf(0, 2), bitmap.neq(Long.MIN_VALUE))
nova chamada: assertEquals(RoaringBitmap.bitmapOf(0, 2), bitmap.neq(Long.MIN_VALUE), "Era esperado valores iguais, mas " + result4042 + " <RoaringBitmap.bitmapOf(0, 2)> é diferente de " + result4043 + " <bitmap.neq(Long.MIN_VALUE)>")
chamada antiga: assertEquals(RoaringBitmap.bitmapOf(0, 1), bitmap.neq(-1L))
nova chamada: assertEquals(RoaringBitmap.bitmapOf(0, 1), bitmap.neq(-1L), "Era esperado valores iguais, mas " + result4044 + " <RoaringBitmap.bitmapOf(0, 1)> é diferente de " + result4045 + " <bitmap.neq(-1L)>")
chamada antiga: assertEquals(accumulator.build().gte(value).getCardinality(), 1)
nova chamada: assertEquals(accumulator.build().gte(value).getCardinality(), 1, "Era esperado valores iguais, mas " + result4046 + " <accumulator.build().gte(value).getCardinality()> é diferente de " + " 1")
chamada antiga: assertEquals(accumulator.build().gteCardinality(value), 1)
nova chamada: assertEquals(accumulator.build().gteCardinality(value), 1, "Era esperado valores iguais, mas " + result4047 + " <accumulator.build().gteCardinality(value)> é diferente de " + " 1")
chamada antiga: assertEquals(accumulator.build().lte(value).getCardinality(), 1)
nova chamada: assertEquals(accumulator.build().lte(value).getCardinality(), 1, "Era esperado valores iguais, mas " + result4048 + " <accumulator.build().lte(value).getCardinality()> é diferente de " + " 1")
chamada antiga: assertEquals(accumulator.build().lteCardinality(value), 1)
nova chamada: assertEquals(accumulator.build().lteCardinality(value), 1, "Era esperado valores iguais, mas " + result4049 + " <accumulator.build().lteCardinality(value)> é diferente de " + " 1")
chamada antiga: assertEquals(accumulator.build().between(value, value).getCardinality(), 1)
nova chamada: assertEquals(accumulator.build().between(value, value).getCardinality(), 1, "Era esperado valores iguais, mas " + result4050 + " <accumulator.build().between(value, value).getCardinality()> é diferente de " + " 1")
chamada antiga: assertEquals(accumulator.build().betweenCardinality(value, value), 1)
nova chamada: assertEquals(accumulator.build().betweenCardinality(value, value), 1, "Era esperado valores iguais, mas " + result4051 + " <accumulator.build().betweenCardinality(value, value)> é diferente de " + " 1")
chamada antiga: assertEquals(accumulator.build().gte(value).getCardinality(), count)
nova chamada: assertEquals(accumulator.build().gte(value).getCardinality(), count, "Era esperado valores iguais, mas " + result4052 + " <accumulator.build().gte(value).getCardinality()> é diferente de " + " count")
chamada antiga: assertEquals(accumulator.build().gteCardinality(value), count)
nova chamada: assertEquals(accumulator.build().gteCardinality(value), count, "Era esperado valores iguais, mas " + result4053 + " <accumulator.build().gteCardinality(value)> é diferente de " + " count")
chamada antiga: assertEquals(accumulator.build().lte(value).getCardinality(), count)
nova chamada: assertEquals(accumulator.build().lte(value).getCardinality(), count, "Era esperado valores iguais, mas " + result4054 + " <accumulator.build().lte(value).getCardinality()> é diferente de " + " count")
chamada antiga: assertEquals(accumulator.build().lteCardinality(value), count)
nova chamada: assertEquals(accumulator.build().lteCardinality(value), count, "Era esperado valores iguais, mas " + result4055 + " <accumulator.build().lteCardinality(value)> é diferente de " + " count")
chamada antiga: assertEquals(accumulator.build().between(value, value).getCardinality(), count)
nova chamada: assertEquals(accumulator.build().between(value, value).getCardinality(), count, "Era esperado valores iguais, mas " + result4056 + " <accumulator.build().between(value, value).getCardinality()> é diferente de " + " count")
chamada antiga: assertEquals(accumulator.build().betweenCardinality(value, value), count)
nova chamada: assertEquals(accumulator.build().betweenCardinality(value, value), count, "Era esperado valores iguais, mas " + result4057 + " <accumulator.build().betweenCardinality(value, value)> é diferente de " + " count")
chamada antiga: assertTrue(bitmap.intersects(minValueThatWorks, baseValue))
nova chamada: assertTrue(bitmap.intersects(minValueThatWorks, baseValue), "Era esperado verdadeiro, mas " + result4058 + " <bitmap.intersects(minValueThatWorks, baseValue)> é falso")
chamada antiga: assertTrue(bitmap.intersects(minValueThatWorks - 1, baseValue))
nova chamada: assertTrue(bitmap.intersects(minValueThatWorks - 1, baseValue), "Era esperado verdadeiro, mas " + result4059 + " <bitmap.intersects(minValueThatWorks - 1, baseValue)> é falso")
chamada antiga: assertEquals(rangeBitmap.gte(low, rangeBitmap.lte(high)), rangeBitmap.between(low, high))
nova chamada: assertEquals(rangeBitmap.gte(low, rangeBitmap.lte(high)), rangeBitmap.between(low, high), "Era esperado valores iguais, mas " + result4060 + " <rangeBitmap.gte(low, rangeBitmap.lte(high))> é diferente de " + result4061 + " <rangeBitmap.between(low, high)>")
chamada antiga: assertEquals(1, rangeBitmap.between(low, high).getCardinality())
nova chamada: assertEquals(1, rangeBitmap.between(low, high).getCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result4062 + " <rangeBitmap.between(low, high).getCardinality()>")
chamada antiga: assertTrue(fast.isCacheDismissed())
nova chamada: assertTrue(fast.isCacheDismissed(), "Era esperado verdadeiro, mas " + result4063 + " <fast.isCacheDismissed()> é falso")
chamada antiga: assertTrue(bitmap.isCacheDismissed())
nova chamada: assertTrue(bitmap.isCacheDismissed(), "Era esperado verdadeiro, mas " + result4064 + " <bitmap.isCacheDismissed()> é falso")
chamada antiga: assertEquals(0, i.next())
nova chamada: assertEquals(0, i.next(), "Era esperado valores iguais, mas  0 é diferente de " + result4065 + " <i.next()>")
chamada antiga: assertEquals(1, i.next())
nova chamada: assertEquals(1, i.next(), "Era esperado valores iguais, mas  1 é diferente de " + result4066 + " <i.next()>")
chamada antiga: assertFalse(i.hasNext())
nova chamada: assertFalse(i.hasNext(), "Era esperado falso, mas " + result4067 + " <i.hasNext()> é verdadeiro ")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rb))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rb), "Era esperado verdadeiro, mas " + result4068 + " <TestRoaringBitmap.equals(bs, rb)> é falso")
chamada antiga: assertEquals(0, rb.getCardinality())
nova chamada: assertEquals(0, rb.getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result4069 + " <rb.getCardinality()>")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rbstatic))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rbstatic), "Era esperado verdadeiro, mas " + result4070 + " <TestRoaringBitmap.equals(bs, rbstatic)> é falso")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rbinplace))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rbinplace), "Era esperado verdadeiro, mas " + result4071 + " <TestRoaringBitmap.equals(bs, rbinplace)> é falso")
chamada antiga: assertEquals(rbinplace, rbstatic)
nova chamada: assertEquals(rbinplace, rbstatic, "Era esperado valores iguais, mas  rbinplace é diferente de " + " rbstatic")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rb))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rb), "Era esperado verdadeiro, mas " + result4072 + " <TestRoaringBitmap.equals(bs, rb)> é falso")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rb))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rb), "Era esperado verdadeiro, mas " + result4073 + " <TestRoaringBitmap.equals(bs, rb)> é falso")
chamada antiga: assertEquals(100000, rbcard)
nova chamada: assertEquals(100000, rbcard, "Era esperado valores iguais, mas  100000 é diferente de " + " rbcard")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rb))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rb), "Era esperado verdadeiro, mas " + result4074 + " <TestRoaringBitmap.equals(bs, rb)> é falso")
chamada antiga: assertEquals(100000, rbcard)
nova chamada: assertEquals(100000, rbcard, "Era esperado valores iguais, mas  100000 é diferente de " + " rbcard")
chamada antiga: assertEquals(0, rb.getCardinality())
nova chamada: assertEquals(0, rb.getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result4075 + " <rb.getCardinality()>")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rb))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rb), "Era esperado verdadeiro, mas " + result4076 + " <TestRoaringBitmap.equals(bs, rb)> é falso")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rb1))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rb1), "Era esperado verdadeiro, mas " + result4077 + " <TestRoaringBitmap.equals(bs, rb1)> é falso")
chamada antiga: assertEquals(0, rbcard)
nova chamada: assertEquals(0, rbcard, "Era esperado valores iguais, mas  0 é diferente de " + " rbcard")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rb))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rb), "Era esperado verdadeiro, mas " + result4078 + " <TestRoaringBitmap.equals(bs, rb)> é falso")
chamada antiga: assertEquals(0, rbcard)
nova chamada: assertEquals(0, rbcard, "Era esperado valores iguais, mas  0 é diferente de " + " rbcard")
chamada antiga: assertEquals(1, rb.getCardinality())
nova chamada: assertEquals(1, rb.getCardinality(), "Era esperado valores iguais, mas  1 é diferente de " + result4079 + " <rb.getCardinality()>")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rb1))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rb1), "Era esperado verdadeiro, mas " + result4080 + " <TestRoaringBitmap.equals(bs, rb1)> é falso")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rb))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rb), "Era esperado verdadeiro, mas " + result4081 + " <TestRoaringBitmap.equals(bs, rb)> é falso")
chamada antiga: assertEquals(65536, rbcard)
nova chamada: assertEquals(65536, rbcard, "Era esperado valores iguais, mas  65536 é diferente de " + " rbcard")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rb))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rb), "Era esperado verdadeiro, mas " + result4082 + " <TestRoaringBitmap.equals(bs, rb)> é falso")
chamada antiga: assertEquals(200000, rbcard)
nova chamada: assertEquals(200000, rbcard, "Era esperado valores iguais, mas  200000 é diferente de " + " rbcard")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rb2))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rb2), "Era esperado verdadeiro, mas " + result4083 + " <TestRoaringBitmap.equals(bs, rb2)> é falso")
chamada antiga: assertEquals(196608, rbcard)
nova chamada: assertEquals(196608, rbcard, "Era esperado valores iguais, mas  196608 é diferente de " + " rbcard")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rb))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rb), "Era esperado verdadeiro, mas " + result4084 + " <TestRoaringBitmap.equals(bs, rb)> é falso")
chamada antiga: assertEquals(196608, rbcard)
nova chamada: assertEquals(196608, rbcard, "Era esperado valores iguais, mas  196608 é diferente de " + " rbcard")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rb2))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rb2), "Era esperado verdadeiro, mas " + result4085 + " <TestRoaringBitmap.equals(bs, rb2)> é falso")
chamada antiga: assertEquals(196608, rbcard)
nova chamada: assertEquals(196608, rbcard, "Era esperado valores iguais, mas  196608 é diferente de " + " rbcard")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rb))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rb), "Era esperado verdadeiro, mas " + result4086 + " <TestRoaringBitmap.equals(bs, rb)> é falso")
chamada antiga: assertEquals(434464, rbcard)
nova chamada: assertEquals(434464, rbcard, "Era esperado valores iguais, mas  434464 é diferente de " + " rbcard")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rb2))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rb2), "Era esperado verdadeiro, mas " + result4087 + " <TestRoaringBitmap.equals(bs, rb2)> é falso")
chamada antiga: assertEquals(97536, rbcard)
nova chamada: assertEquals(97536, rbcard, "Era esperado valores iguais, mas  97536 é diferente de " + " rbcard")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rb))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rb), "Era esperado verdadeiro, mas " + result4088 + " <TestRoaringBitmap.equals(bs, rb)> é falso")
chamada antiga: assertEquals(97536, rbcard)
nova chamada: assertEquals(97536, rbcard, "Era esperado valores iguais, mas  97536 é diferente de " + " rbcard")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rb2))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rb2), "Era esperado verdadeiro, mas " + result4089 + " <TestRoaringBitmap.equals(bs, rb2)> é falso")
chamada antiga: assertEquals(318, rbcard)
nova chamada: assertEquals(318, rbcard, "Era esperado valores iguais, mas  318 é diferente de " + " rbcard")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rb))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rb), "Era esperado verdadeiro, mas " + result4090 + " <TestRoaringBitmap.equals(bs, rb)> é falso")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rb))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rb), "Era esperado verdadeiro, mas " + result4091 + " <TestRoaringBitmap.equals(bs, rb)> é falso")
chamada antiga: assertEquals(rb1, rb)
nova chamada: assertEquals(rb1, rb, "Era esperado valores iguais, mas  rb1 é diferente de " + " rb")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rb1))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rb1), "Era esperado verdadeiro, mas " + result4092 + " <TestRoaringBitmap.equals(bs, rb1)> é falso")
chamada antiga: assertEquals(rb2, rb)
nova chamada: assertEquals(rb2, rb, "Era esperado valores iguais, mas  rb2 é diferente de " + " rb")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rb2))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rb2), "Era esperado verdadeiro, mas " + result4093 + " <TestRoaringBitmap.equals(bs, rb2)> é falso")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rb3))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rb3), "Era esperado verdadeiro, mas " + result4094 + " <TestRoaringBitmap.equals(bs, rb3)> é falso")
chamada antiga: assertEquals(rb2, rb3)
nova chamada: assertEquals(rb2, rb3, "Era esperado valores iguais, mas  rb2 é diferente de " + " rb3")
chamada antiga: assertEquals(rb2, rb3)
nova chamada: assertEquals(rb2, rb3, "Era esperado valores iguais, mas  rb2 é diferente de " + " rb3")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rb3))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rb3), "Era esperado verdadeiro, mas " + result4095 + " <TestRoaringBitmap.equals(bs, rb3)> é falso")
chamada antiga: assertEquals(rb2, rb3)
nova chamada: assertEquals(rb2, rb3, "Era esperado valores iguais, mas  rb2 é diferente de " + " rb3")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rb3))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rb3), "Era esperado verdadeiro, mas " + result4096 + " <TestRoaringBitmap.equals(bs, rb3)> é falso")
chamada antiga: assertEquals(255, rbcard)
nova chamada: assertEquals(255, rbcard, "Era esperado valores iguais, mas  255 é diferente de " + " rbcard")
chamada antiga: assertEquals(rb2, rb3)
nova chamada: assertEquals(rb2, rb3, "Era esperado valores iguais, mas  rb2 é diferente de " + " rb3")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rb3))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rb3), "Era esperado verdadeiro, mas " + result4097 + " <TestRoaringBitmap.equals(bs, rb3)> é falso")
chamada antiga: assertEquals(rb2, rb3)
nova chamada: assertEquals(rb2, rb3, "Era esperado valores iguais, mas  rb2 é diferente de " + " rb3")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rb3))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rb3), "Era esperado verdadeiro, mas " + result4098 + " <TestRoaringBitmap.equals(bs, rb3)> é falso")
chamada antiga: assertEquals(rb2, rb3)
nova chamada: assertEquals(rb2, rb3, "Era esperado valores iguais, mas  rb2 é diferente de " + " rb3")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rb3))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rb3), "Era esperado verdadeiro, mas " + result4099 + " <TestRoaringBitmap.equals(bs, rb3)> é falso")
chamada antiga: assertEquals(rb2, rb)
nova chamada: assertEquals(rb2, rb, "Era esperado valores iguais, mas  rb2 é diferente de " + " rb")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rb2))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rb2), "Era esperado verdadeiro, mas " + result4100 + " <TestRoaringBitmap.equals(bs, rb2)> é falso")
chamada antiga: assertEquals(312320, rbcard)
nova chamada: assertEquals(312320, rbcard, "Era esperado valores iguais, mas  312320 é diferente de " + " rbcard")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rb))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rb), "Era esperado verdadeiro, mas " + result4101 + " <TestRoaringBitmap.equals(bs, rb)> é falso")
chamada antiga: assertEquals(2964, rbcard)
nova chamada: assertEquals(2964, rbcard, "Era esperado valores iguais, mas  2964 é diferente de " + " rbcard")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rb))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rb), "Era esperado verdadeiro, mas " + result4102 + " <TestRoaringBitmap.equals(bs, rb)> é falso")
chamada antiga: assertEquals(2964, rbcard)
nova chamada: assertEquals(2964, rbcard, "Era esperado valores iguais, mas  2964 é diferente de " + " rbcard")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rb2))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rb2), "Era esperado verdadeiro, mas " + result4103 + " <TestRoaringBitmap.equals(bs, rb2)> é falso")
chamada antiga: assertEquals(2, rbcard)
nova chamada: assertEquals(2, rbcard, "Era esperado valores iguais, mas  2 é diferente de " + " rbcard")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rb))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rb), "Era esperado verdadeiro, mas " + result4104 + " <TestRoaringBitmap.equals(bs, rb)> é falso")
chamada antiga: assertEquals(2, rbcard)
nova chamada: assertEquals(2, rbcard, "Era esperado valores iguais, mas  2 é diferente de " + " rbcard")
chamada antiga: assertTrue(TestRoaringBitmap.equals(bs, rb2))
nova chamada: assertTrue(TestRoaringBitmap.equals(bs, rb2), "Era esperado verdadeiro, mas " + result4105 + " <TestRoaringBitmap.equals(bs, rb2)> é falso")
chamada antiga: assertTrue((bitmap.getCardinality() == 1) && bitmap.contains(1))
nova chamada: assertTrue((bitmap.getCardinality() == 1) && bitmap.contains(1), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue((bitmap.getCardinality() == 1) && bitmap.contains(1))
nova chamada: assertTrue((bitmap.getCardinality() == 1) && bitmap.contains(1), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue((bitmap.getCardinality() == 1) && bitmap.contains(1))
nova chamada: assertTrue((bitmap.getCardinality() == 1) && bitmap.contains(1), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue((bitmap.getCardinality() == 1) && bitmap.contains(1))
nova chamada: assertTrue((bitmap.getCardinality() == 1) && bitmap.contains(1), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(bitmap.isEmpty())
nova chamada: assertTrue(bitmap.isEmpty(), "Era esperado verdadeiro, mas " + result4106 + " <bitmap.isEmpty()> é falso")
chamada antiga: assertTrue(bitmap.isEmpty())
nova chamada: assertTrue(bitmap.isEmpty(), "Era esperado verdadeiro, mas " + result4107 + " <bitmap.isEmpty()> é falso")
chamada antiga: assertFalse(bitmap.hasRunCompression())
nova chamada: assertFalse(bitmap.hasRunCompression(), "Era esperado falso, mas " + result4108 + " <bitmap.hasRunCompression()> é verdadeiro ")
chamada antiga: assertTrue(bitmap.isEmpty())
nova chamada: assertTrue(bitmap.isEmpty(), "Era esperado verdadeiro, mas " + result4109 + " <bitmap.isEmpty()> é falso")
chamada antiga: assertEquals(rb1, rb2)
nova chamada: assertEquals(rb1, rb2, "Era esperado valores iguais, mas  rb1 é diferente de " + " rb2")
chamada antiga: assertEquals(rb1, rb2)
nova chamada: assertEquals(rb1, rb2, "Era esperado valores iguais, mas  rb1 é diferente de " + " rb2")
chamada antiga: assertEquals(rb1, rb2)
nova chamada: assertEquals(rb1, rb2, "Era esperado valores iguais, mas  rb1 é diferente de " + " rb2")
chamada antiga: assertEquals(rb1, rb2)
nova chamada: assertEquals(rb1, rb2, "Era esperado valores iguais, mas  rb1 é diferente de " + " rb2")
chamada antiga: assertEquals(rb1, rb2)
nova chamada: assertEquals(rb1, rb2, "Era esperado valores iguais, mas  rb1 é diferente de " + " rb2")
chamada antiga: assertEquals(rb1, rb2)
nova chamada: assertEquals(rb1, rb2, "Era esperado valores iguais, mas  rb1 é diferente de " + " rb2")
chamada antiga: assertEquals(rb1, rb2)
nova chamada: assertEquals(rb1, rb2, "Era esperado valores iguais, mas  rb1 é diferente de " + " rb2")
chamada antiga: assertEquals(rb1, rb2)
nova chamada: assertEquals(rb1, rb2, "Era esperado valores iguais, mas  rb1 é diferente de " + " rb2")
chamada antiga: assertEquals(rb1, rb2)
nova chamada: assertEquals(rb1, rb2, "Era esperado valores iguais, mas  rb1 é diferente de " + " rb2")
chamada antiga: assertEquals(rb1, rb2)
nova chamada: assertEquals(rb1, rb2, "Era esperado valores iguais, mas  rb1 é diferente de " + " rb2")
chamada antiga: assertEquals(rb1, rb2)
nova chamada: assertEquals(rb1, rb2, "Era esperado valores iguais, mas  rb1 é diferente de " + " rb2")
chamada antiga: assertEquals(rb1, rb2)
nova chamada: assertEquals(rb1, rb2, "Era esperado valores iguais, mas  rb1 é diferente de " + " rb2")
chamada antiga: assertEquals(result, resultInt)
nova chamada: assertEquals(result, resultInt, "Era esperado valores iguais, mas  result é diferente de " + " resultInt")
chamada antiga: assertEquals(50000, result.getCardinality())
nova chamada: assertEquals(50000, result.getCardinality(), "Era esperado valores iguais, mas  50000 é diferente de " + result4110 + " <result.getCardinality()>")
chamada antiga: assertEquals(result, resultInt)
nova chamada: assertEquals(result, resultInt, "Era esperado valores iguais, mas  result é diferente de " + " resultInt")
chamada antiga: assertEquals(0, resultInt.getCardinality())
nova chamada: assertEquals(0, resultInt.getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result4111 + " <resultInt.getCardinality()>")
chamada antiga: assertEquals(result, resultInt)
nova chamada: assertEquals(result, resultInt, "Era esperado valores iguais, mas  result é diferente de " + " resultInt")
chamada antiga: assertEquals(250000, result.getCardinality())
nova chamada: assertEquals(250000, result.getCardinality(), "Era esperado valores iguais, mas  250000 é diferente de " + result4112 + " <result.getCardinality()>")
chamada antiga: assertEquals(result, resultInt)
nova chamada: assertEquals(result, resultInt, "Era esperado valores iguais, mas  result é diferente de " + " resultInt")
chamada antiga: assertEquals(0, resultInt.getCardinality())
nova chamada: assertEquals(0, resultInt.getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result4113 + " <resultInt.getCardinality()>")
chamada antiga: assertEquals(result, resultInt)
nova chamada: assertEquals(result, resultInt, "Era esperado valores iguais, mas  result é diferente de " + " resultInt")
chamada antiga: assertEquals(50000, result.getCardinality())
nova chamada: assertEquals(50000, result.getCardinality(), "Era esperado valores iguais, mas  50000 é diferente de " + result4114 + " <result.getCardinality()>")
chamada antiga: assertEquals(result, resultInt)
nova chamada: assertEquals(result, resultInt, "Era esperado valores iguais, mas  result é diferente de " + " resultInt")
chamada antiga: assertEquals(0, resultInt.getCardinality())
nova chamada: assertEquals(0, resultInt.getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result4115 + " <resultInt.getCardinality()>")
chamada antiga: assertEquals(result, resultInt)
nova chamada: assertEquals(result, resultInt, "Era esperado valores iguais, mas  result é diferente de " + " resultInt")
chamada antiga: assertEquals(100000, result.getCardinality())
nova chamada: assertEquals(100000, result.getCardinality(), "Era esperado valores iguais, mas  100000 é diferente de " + result4116 + " <result.getCardinality()>")
chamada antiga: assertEquals(result, resultInt)
nova chamada: assertEquals(result, resultInt, "Era esperado valores iguais, mas  result é diferente de " + " resultInt")
chamada antiga: assertEquals(0, resultInt.getCardinality())
nova chamada: assertEquals(0, resultInt.getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result4117 + " <resultInt.getCardinality()>")
chamada antiga: assertEquals(ac1, ac2)
nova chamada: assertEquals(ac1, ac2, "Era esperado valores iguais, mas  ac1 é diferente de " + " ac2")
chamada antiga: assertEquals(ac1, ac2)
nova chamada: assertEquals(ac1, ac2, "Era esperado valores iguais, mas  ac1 é diferente de " + " ac2")
chamada antiga: assertFalse(new ArrayContainer(5, 15).isFull())
nova chamada: assertFalse(new ArrayContainer(5, 15).isFull(), "Era esperado falso, mas " + result4118 + " <new ArrayContainer(5, 15).isFull()> é verdadeiro ")
chamada antiga: assertEquals("{5,6,7,8,9,10,11,12,13,14,65519,65533}", ac1.toString())
nova chamada: assertEquals("{5,6,7,8,9,10,11,12,13,14,65519,65533}", ac1.toString(), "Era esperado valores iguais, mas  '{5,6,7,8,9,10,11,12,13,14,65519,65533}' é diferente de " + result4119 + " <ac1.toString()>")
chamada antiga: assertEquals(ac2, ac3)
nova chamada: assertEquals(ac2, ac3, "Era esperado valores iguais, mas  ac2 é diferente de " + " ac3")
chamada antiga: assertNotNull(rac2)
nova chamada: assertNotNull(rac2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(asList(rac1), asList(rac2))
nova chamada: assertEquals(asList(rac1), asList(rac2), "Era esperado valores iguais, mas " + result4120 + " <asList(rac1)> é diferente de " + result4121 + " <asList(rac2)>")
chamada antiga: assertEquals(4, ac2.getCardinality())
nova chamada: assertEquals(4, ac2.getCardinality(), "Era esperado valores iguais, mas  4 é diferente de " + result4122 + " <ac2.getCardinality()>")
chamada antiga: assertTrue(ac.intersects(ac2))
nova chamada: assertTrue(ac.intersects(ac2), "Era esperado verdadeiro, mas " + result4123 + " <ac.intersects(ac2)> é falso")
chamada antiga: assertEquals(1 << 16, result.getCardinality())
nova chamada: assertEquals(1 << 16, result.getCardinality(), "Era esperado valores iguais, mas  1  16 é diferente de " + result4124 + " <result.getCardinality()>")
chamada antiga: assertTrue(result instanceof RunContainer)
nova chamada: assertTrue(result instanceof RunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(1 << 16, result.getCardinality())
nova chamada: assertEquals(1 << 16, result.getCardinality(), "Era esperado valores iguais, mas  1  16 é diferente de " + result4125 + " <result.getCardinality()>")
chamada antiga: assertTrue(result instanceof RunContainer)
nova chamada: assertTrue(result instanceof RunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(5, ac.getCardinality())
nova chamada: assertEquals(5, ac.getCardinality(), "Era esperado valores iguais, mas  5 é diferente de " + result4126 + " <ac.getCardinality()>")
chamada antiga: assertEquals(5, ac.getCardinality())
nova chamada: assertEquals(5, ac.getCardinality(), "Era esperado valores iguais, mas  5 é diferente de " + result4127 + " <ac.getCardinality()>")
chamada antiga: assertEquals(0, ac.getCardinality())
nova chamada: assertEquals(0, ac.getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result4128 + " <ac.getCardinality()>")
chamada antiga: assertThrows(IllegalArgumentException.class, () -> {
    Container ac = new ArrayContainer();
    ac.add(13, 1);
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    Container ac = new ArrayContainer();
    ac.add(13, 1);
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: assertEquals(0, ac.getCardinality())
nova chamada: assertEquals(0, ac.getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result4129 + " <ac.getCardinality()>")
chamada antiga: assertThrows(IllegalArgumentException.class, () -> {
    Container ac = new ArrayContainer();
    ac.iadd(13, 1);
})
nova chamada: assertThrows(IllegalArgumentException.class, () -> {
    Container ac = new ArrayContainer();
    ac.iadd(13, 1);
}, "Era esperado que a exceção  IllegalArgumentException.class fosse lançada, mas não foi")
chamada antiga: assertEquals(79, ac.getCardinality())
nova chamada: assertEquals(79, ac.getCardinality(), "Era esperado valores iguais, mas  79 é diferente de " + result4130 + " <ac.getCardinality()>")
chamada antiga: assertEquals(0, ac.getCardinality())
nova chamada: assertEquals(0, ac.getCardinality(), "Era esperado valores iguais, mas  0 é diferente de " + result4131 + " <ac.getCardinality()>")
chamada antiga: assertEquals(-1, rbc.getCardinality())
nova chamada: assertEquals(-1, rbc.getCardinality(), "Era esperado valores iguais, mas  -1 é diferente de " + result4132 + " <rbc.getCardinality()>")
chamada antiga: assertEquals(1 << 16, repaired.getCardinality())
nova chamada: assertEquals(1 << 16, repaired.getCardinality(), "Era esperado valores iguais, mas  1  16 é diferente de " + result4133 + " <repaired.getCardinality()>")
chamada antiga: assertTrue(repaired instanceof RunContainer)
nova chamada: assertTrue(repaired instanceof RunContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertThrows(NoSuchElementException.class, () -> new ArrayContainer().first())
nova chamada: assertThrows(NoSuchElementException.class, () -> new ArrayContainer().first(), "Era esperado que a exceção  NoSuchElementException.class fosse lançada, mas não foi")
chamada antiga: assertThrows(NoSuchElementException.class, () -> new ArrayContainer().last())
nova chamada: assertThrows(NoSuchElementException.class, () -> new ArrayContainer().last(), "Era esperado que a exceção  NoSuchElementException.class fosse lançada, mas não foi")
chamada antiga: assertFalse(ac.contains(subset))
nova chamada: assertFalse(ac.contains(subset), "Era esperado falso, mas " + result4134 + " <ac.contains(subset)> é verdadeiro ")
chamada antiga: assertFalse(ac.contains(subset))
nova chamada: assertFalse(ac.contains(subset), "Era esperado falso, mas " + result4135 + " <ac.contains(subset)> é verdadeiro ")
chamada antiga: assertFalse(ac.contains(superset))
nova chamada: assertFalse(ac.contains(superset), "Era esperado falso, mas " + result4136 + " <ac.contains(superset)> é verdadeiro ")
chamada antiga: assertFalse(ac.contains(disjoint))
nova chamada: assertFalse(ac.contains(disjoint), "Era esperado falso, mas " + result4137 + " <ac.contains(disjoint)> é verdadeiro ")
chamada antiga: assertFalse(disjoint.contains(ac))
nova chamada: assertFalse(disjoint.contains(ac), "Era esperado falso, mas " + result4138 + " <disjoint.contains(ac)> é verdadeiro ")
chamada antiga: assertTrue(ac.contains(subset))
nova chamada: assertTrue(ac.contains(subset), "Era esperado verdadeiro, mas " + result4139 + " <ac.contains(subset)> é falso")
chamada antiga: assertTrue(ac.contains(subset))
nova chamada: assertTrue(ac.contains(subset), "Era esperado verdadeiro, mas " + result4140 + " <ac.contains(subset)> é falso")
chamada antiga: assertTrue(ac.contains(subset))
nova chamada: assertTrue(ac.contains(subset), "Era esperado verdadeiro, mas " + result4141 + " <ac.contains(subset)> é falso")
chamada antiga: assertFalse(ac.contains(superset))
nova chamada: assertFalse(ac.contains(superset), "Era esperado falso, mas " + result4142 + " <ac.contains(superset)> é verdadeiro ")
chamada antiga: assertTrue(ac.contains(subset))
nova chamada: assertTrue(ac.contains(subset), "Era esperado verdadeiro, mas " + result4143 + " <ac.contains(subset)> é falso")
chamada antiga: assertFalse(ac.contains(subset))
nova chamada: assertFalse(ac.contains(subset), "Era esperado falso, mas " + result4144 + " <ac.contains(subset)> é verdadeiro ")
chamada antiga: assertFalse(ac.contains(disjoint))
nova chamada: assertFalse(ac.contains(disjoint), "Era esperado falso, mas " + result4145 + " <ac.contains(disjoint)> é verdadeiro ")
chamada antiga: assertFalse(disjoint.contains(ac))
nova chamada: assertFalse(disjoint.contains(ac), "Era esperado falso, mas " + result4146 + " <disjoint.contains(ac)> é verdadeiro ")
chamada antiga: assertTrue(ac.contains(subset))
nova chamada: assertTrue(ac.contains(subset), "Era esperado verdadeiro, mas " + result4147 + " <ac.contains(subset)> é falso")
chamada antiga: assertTrue(ac.contains(subset))
nova chamada: assertTrue(ac.contains(subset), "Era esperado verdadeiro, mas " + result4148 + " <ac.contains(subset)> é falso")
chamada antiga: assertTrue(ac.contains(subset))
nova chamada: assertTrue(ac.contains(subset), "Era esperado verdadeiro, mas " + result4149 + " <ac.contains(subset)> é falso")
chamada antiga: assertFalse(ac.contains(shifted))
nova chamada: assertFalse(ac.contains(shifted), "Era esperado falso, mas " + result4150 + " <ac.contains(shifted)> é verdadeiro ")
chamada antiga: assertTrue(ac.contains(subset))
nova chamada: assertTrue(ac.contains(subset), "Era esperado verdadeiro, mas " + result4151 + " <ac.contains(subset)> é falso")
chamada antiga: assertFalse(ac.contains(superset))
nova chamada: assertFalse(ac.contains(superset), "Era esperado falso, mas " + result4152 + " <ac.contains(superset)> é verdadeiro ")
chamada antiga: assertFalse(ac.contains(disjoint))
nova chamada: assertFalse(ac.contains(disjoint), "Era esperado falso, mas " + result4153 + " <ac.contains(disjoint)> é verdadeiro ")
chamada antiga: assertFalse(disjoint.contains(ac))
nova chamada: assertFalse(disjoint.contains(ac), "Era esperado falso, mas " + result4154 + " <disjoint.contains(ac)> é verdadeiro ")
chamada antiga: assertTrue(ac1.contains((char) 128))
nova chamada: assertTrue(ac1.contains((char) 128), "Era esperado verdadeiro, mas " + result4155 + " <ac1.contains((char) 128)> é falso")
chamada antiga: assertTrue(ac1.contains((char) 256))
nova chamada: assertTrue(ac1.contains((char) 256), "Era esperado verdadeiro, mas " + result4156 + " <ac1.contains((char) 256)> é falso")
chamada antiga: assertTrue(ac1.contains((char) 1024))
nova chamada: assertTrue(ac1.contains((char) 1024), "Era esperado verdadeiro, mas " + result4157 + " <ac1.contains((char) 1024)> é falso")
chamada antiga: assertTrue(ac1.contains((char) 128))
nova chamada: assertTrue(ac1.contains((char) 128), "Era esperado verdadeiro, mas " + result4158 + " <ac1.contains((char) 128)> é falso")
chamada antiga: assertTrue(ac1.contains((char) 256))
nova chamada: assertTrue(ac1.contains((char) 256), "Era esperado verdadeiro, mas " + result4159 + " <ac1.contains((char) 256)> é falso")
chamada antiga: assertTrue(ac1.contains((char) 512))
nova chamada: assertTrue(ac1.contains((char) 512), "Era esperado verdadeiro, mas " + result4160 + " <ac1.contains((char) 512)> é falso")
chamada antiga: assertTrue(ac1.contains((char) 513))
nova chamada: assertTrue(ac1.contains((char) 513), "Era esperado verdadeiro, mas " + result4161 + " <ac1.contains((char) 513)> é falso")
chamada antiga: assertTrue(ac1.contains((char) 1024))
nova chamada: assertTrue(ac1.contains((char) 1024), "Era esperado verdadeiro, mas " + result4162 + " <ac1.contains((char) 1024)> é falso")
chamada antiga: assertTrue(ac.contains(disjoint))
nova chamada: assertTrue(ac.contains(disjoint), "Era esperado verdadeiro, mas " + result4163 + " <ac.contains(disjoint)> é falso")
chamada antiga: assertEquals(130, rc1.getCardinality())
nova chamada: assertEquals(130, rc1.getCardinality(), "Era esperado valores iguais, mas  130 é diferente de " + result4164 + " <rc1.getCardinality()>")
chamada antiga: assertTrue(iterator.hasNext())
nova chamada: assertTrue(iterator.hasNext(), "Era esperado verdadeiro, mas " + result4165 + " <iterator.hasNext()> é falso")
chamada antiga: assertEquals(256, iterator.next())
nova chamada: assertEquals(256, iterator.next(), "Era esperado valores iguais, mas  256 é diferente de " + result4166 + " <iterator.next()>")
chamada antiga: assertTrue(iterator.hasNext())
nova chamada: assertTrue(iterator.hasNext(), "Era esperado verdadeiro, mas " + result4167 + " <iterator.hasNext()> é falso")
chamada antiga: assertEquals(257, iterator.next())
nova chamada: assertEquals(257, iterator.next(), "Era esperado valores iguais, mas  257 é diferente de " + result4168 + " <iterator.next()>")
chamada antiga: assertFalse(iterator.hasNext())
nova chamada: assertFalse(iterator.hasNext(), "Era esperado falso, mas " + result4169 + " <iterator.hasNext()> é verdadeiro ")
chamada antiga: assertEquals(130, rc1.getCardinality())
nova chamada: assertEquals(130, rc1.getCardinality(), "Era esperado valores iguais, mas  130 é diferente de " + result4170 + " <rc1.getCardinality()>")
chamada antiga: assertTrue(iterator.hasNext())
nova chamada: assertTrue(iterator.hasNext(), "Era esperado verdadeiro, mas " + result4171 + " <iterator.hasNext()> é falso")
chamada antiga: assertEquals(256, iterator.next())
nova chamada: assertEquals(256, iterator.next(), "Era esperado valores iguais, mas  256 é diferente de " + result4172 + " <iterator.next()>")
chamada antiga: assertTrue(iterator.hasNext())
nova chamada: assertTrue(iterator.hasNext(), "Era esperado verdadeiro, mas " + result4173 + " <iterator.hasNext()> é falso")
chamada antiga: assertEquals(260, iterator.next())
nova chamada: assertEquals(260, iterator.next(), "Era esperado valores iguais, mas  260 é diferente de " + result4174 + " <iterator.next()>")
chamada antiga: assertFalse(iterator.hasNext())
nova chamada: assertFalse(iterator.hasNext(), "Era esperado falso, mas " + result4175 + " <iterator.hasNext()> é verdadeiro ")
chamada antiga: assertEquals(130, rc1.getCardinality())
nova chamada: assertEquals(130, rc1.getCardinality(), "Era esperado valores iguais, mas  130 é diferente de " + result4176 + " <rc1.getCardinality()>")
chamada antiga: assertTrue(iterator.hasNext())
nova chamada: assertTrue(iterator.hasNext(), "Era esperado verdadeiro, mas " + result4177 + " <iterator.hasNext()> é falso")
chamada antiga: assertEquals(256, iterator.next())
nova chamada: assertEquals(256, iterator.next(), "Era esperado valores iguais, mas  256 é diferente de " + result4178 + " <iterator.next()>")
chamada antiga: assertTrue(iterator.hasNext())
nova chamada: assertTrue(iterator.hasNext(), "Era esperado verdadeiro, mas " + result4179 + " <iterator.hasNext()> é falso")
chamada antiga: assertEquals(257, iterator.next())
nova chamada: assertEquals(257, iterator.next(), "Era esperado valores iguais, mas  257 é diferente de " + result4180 + " <iterator.next()>")
chamada antiga: assertFalse(iterator.hasNext())
nova chamada: assertFalse(iterator.hasNext(), "Era esperado falso, mas " + result4181 + " <iterator.hasNext()> é verdadeiro ")
chamada antiga: assertEquals(130, rc1.getCardinality())
nova chamada: assertEquals(130, rc1.getCardinality(), "Era esperado valores iguais, mas  130 é diferente de " + result4182 + " <rc1.getCardinality()>")
chamada antiga: assertTrue(iterator.hasNext())
nova chamada: assertTrue(iterator.hasNext(), "Era esperado verdadeiro, mas " + result4183 + " <iterator.hasNext()> é falso")
chamada antiga: assertEquals(256, iterator.next())
nova chamada: assertEquals(256, iterator.next(), "Era esperado valores iguais, mas  256 é diferente de " + result4184 + " <iterator.next()>")
chamada antiga: assertTrue(iterator.hasNext())
nova chamada: assertTrue(iterator.hasNext(), "Era esperado verdadeiro, mas " + result4185 + " <iterator.hasNext()> é falso")
chamada antiga: assertEquals(257, iterator.next())
nova chamada: assertEquals(257, iterator.next(), "Era esperado valores iguais, mas  257 é diferente de " + result4186 + " <iterator.next()>")
chamada antiga: assertFalse(iterator.hasNext())
nova chamada: assertFalse(iterator.hasNext(), "Era esperado falso, mas " + result4187 + " <iterator.hasNext()> é verdadeiro ")
chamada antiga: assertEquals(130, rc1.getCardinality())
nova chamada: assertEquals(130, rc1.getCardinality(), "Era esperado valores iguais, mas  130 é diferente de " + result4188 + " <rc1.getCardinality()>")
chamada antiga: assertTrue(iterator.hasNext())
nova chamada: assertTrue(iterator.hasNext(), "Era esperado verdadeiro, mas " + result4189 + " <iterator.hasNext()> é falso")
chamada antiga: assertEquals(256, iterator.next())
nova chamada: assertEquals(256, iterator.next(), "Era esperado valores iguais, mas  256 é diferente de " + result4190 + " <iterator.next()>")
chamada antiga: assertTrue(iterator.hasNext())
nova chamada: assertTrue(iterator.hasNext(), "Era esperado verdadeiro, mas " + result4191 + " <iterator.hasNext()> é falso")
chamada antiga: assertEquals(260, iterator.next())
nova chamada: assertEquals(260, iterator.next(), "Era esperado valores iguais, mas  260 é diferente de " + result4192 + " <iterator.next()>")
chamada antiga: assertFalse(iterator.hasNext())
nova chamada: assertFalse(iterator.hasNext(), "Era esperado falso, mas " + result4193 + " <iterator.hasNext()> é verdadeiro ")
chamada antiga: assertTrue(container.intersects(0, 1))
nova chamada: assertTrue(container.intersects(0, 1), "Era esperado verdadeiro, mas " + result4194 + " <container.intersects(0, 1)> é falso")
chamada antiga: assertTrue(container.intersects(0, 101))
nova chamada: assertTrue(container.intersects(0, 101), "Era esperado verdadeiro, mas " + result4195 + " <container.intersects(0, 101)> é falso")
chamada antiga: assertTrue(container.intersects(0, lower16Bits(-1)))
nova chamada: assertTrue(container.intersects(0, lower16Bits(-1)), "Era esperado verdadeiro, mas " + result4196 + " <container.intersects(0, lower16Bits(-1))> é falso")
chamada antiga: assertFalse(container.intersects(11, lower16Bits(-1)))
nova chamada: assertFalse(container.intersects(11, lower16Bits(-1)), "Era esperado falso, mas " + result4197 + " <container.intersects(11, lower16Bits(-1))> é verdadeiro ")
chamada antiga: assertFalse(container.intersects(0, 1))
nova chamada: assertFalse(container.intersects(0, 1), "Era esperado falso, mas " + result4198 + " <container.intersects(0, 1)> é verdadeiro ")
chamada antiga: assertTrue(container.intersects(0, lower16Bits(-40)))
nova chamada: assertTrue(container.intersects(0, lower16Bits(-40)), "Era esperado verdadeiro, mas " + result4199 + " <container.intersects(0, lower16Bits(-40))> é falso")
chamada antiga: assertFalse(container.intersects(lower16Bits(-100), lower16Bits(-55)))
nova chamada: assertFalse(container.intersects(lower16Bits(-100), lower16Bits(-55)), "Era esperado falso, mas " + result4200 + " <container.intersects(lower16Bits(-100), lower16Bits(-55))> é verdadeiro ")
chamada antiga: assertFalse(container.intersects(lower16Bits(-9), lower16Bits(-1)))
nova chamada: assertFalse(container.intersects(lower16Bits(-9), lower16Bits(-1)), "Era esperado falso, mas " + result4201 + " <container.intersects(lower16Bits(-9), lower16Bits(-1))> é verdadeiro ")
chamada antiga: assertTrue(container.intersects(11, 1 << 16))
nova chamada: assertTrue(container.intersects(11, 1 << 16), "Era esperado verdadeiro, mas " + result4202 + " <container.intersects(11, 1 << 16)> é falso")
chamada antiga: assertTrue(container.intersects(0, 300))
nova chamada: assertTrue(container.intersects(0, 300), "Era esperado verdadeiro, mas " + result4203 + " <container.intersects(0, 300)> é falso")
chamada antiga: assertTrue(container.intersects(1, 300))
nova chamada: assertTrue(container.intersects(1, 300), "Era esperado verdadeiro, mas " + result4204 + " <container.intersects(1, 300)> é falso")
chamada antiga: assertFalse(container.intersects(2, 300))
nova chamada: assertFalse(container.intersects(2, 300), "Era esperado falso, mas " + result4205 + " <container.intersects(2, 300)> é verdadeiro ")
chamada antiga: assertFalse(container.intersects(2, 299))
nova chamada: assertFalse(container.intersects(2, 299), "Era esperado falso, mas " + result4206 + " <container.intersects(2, 299)> é verdadeiro ")
chamada antiga: assertTrue(container.intersects(0, lower16Bits(-1)))
nova chamada: assertTrue(container.intersects(0, lower16Bits(-1)), "Era esperado verdadeiro, mas " + result4207 + " <container.intersects(0, lower16Bits(-1))> é falso")
chamada antiga: assertFalse(container.intersects(1025, 1 << 16))
nova chamada: assertFalse(container.intersects(1025, 1 << 16), "Era esperado falso, mas " + result4208 + " <container.intersects(1025, 1 << 16)> é verdadeiro ")
chamada antiga: assertFalse(ac.contains(1, 21))
nova chamada: assertFalse(ac.contains(1, 21), "Era esperado falso, mas " + result4209 + " <ac.contains(1, 21)> é verdadeiro ")
chamada antiga: assertFalse(ac.contains(1, 19))
nova chamada: assertFalse(ac.contains(1, 19), "Era esperado falso, mas " + result4210 + " <ac.contains(1, 19)> é verdadeiro ")
chamada antiga: assertTrue(ac.contains(20, 100))
nova chamada: assertTrue(ac.contains(20, 100), "Era esperado verdadeiro, mas " + result4211 + " <ac.contains(20, 100)> é falso")
chamada antiga: assertTrue(ac.contains(20, 99))
nova chamada: assertTrue(ac.contains(20, 99), "Era esperado verdadeiro, mas " + result4212 + " <ac.contains(20, 99)> é falso")
chamada antiga: assertTrue(ac.contains(21, 100))
nova chamada: assertTrue(ac.contains(21, 100), "Era esperado verdadeiro, mas " + result4213 + " <ac.contains(21, 100)> é falso")
chamada antiga: assertFalse(ac.contains(21, 101))
nova chamada: assertFalse(ac.contains(21, 101), "Era esperado falso, mas " + result4214 + " <ac.contains(21, 101)> é verdadeiro ")
chamada antiga: assertFalse(ac.contains(19, 99))
nova chamada: assertFalse(ac.contains(19, 99), "Era esperado falso, mas " + result4215 + " <ac.contains(19, 99)> é verdadeiro ")
chamada antiga: assertFalse(ac.contains(190, 9999))
nova chamada: assertFalse(ac.contains(190, 9999), "Era esperado falso, mas " + result4216 + " <ac.contains(190, 9999)> é verdadeiro ")
chamada antiga: assertFalse(ac.contains(1, 21))
nova chamada: assertFalse(ac.contains(1, 21), "Era esperado falso, mas " + result4217 + " <ac.contains(1, 21)> é verdadeiro ")
chamada antiga: assertFalse(ac.contains(1, 20))
nova chamada: assertFalse(ac.contains(1, 20), "Era esperado falso, mas " + result4218 + " <ac.contains(1, 20)> é verdadeiro ")
chamada antiga: assertTrue(ac.contains(1, 2))
nova chamada: assertTrue(ac.contains(1, 2), "Era esperado verdadeiro, mas " + result4219 + " <ac.contains(1, 2)> é falso")
chamada antiga: assertTrue(ac.contains(1 << 15, 1 << 8 | 1 << 15))
nova chamada: assertTrue(ac.contains(1 << 15, 1 << 8 | 1 << 15), "Era esperado verdadeiro, mas " + result4220 + " <ac.contains(1 << 15, 1 << 8 | 1 << 15)> é falso")
chamada antiga: assertTrue(ac.contains(1 + (1 << 15), (1 << 8 | 1 << 15) - 1))
nova chamada: assertTrue(ac.contains(1 + (1 << 15), (1 << 8 | 1 << 15) - 1), "Era esperado verdadeiro, mas " + result4221 + " <ac.contains(1 + (1 << 15), (1 << 8 | 1 << 15) - 1)> é falso")
chamada antiga: assertFalse(ac.contains(1 + (1 << 15), (1 << 8 | 1 << 15) + 1))
nova chamada: assertFalse(ac.contains(1 + (1 << 15), (1 << 8 | 1 << 15) + 1), "Era esperado falso, mas " + result4222 + " <ac.contains(1 + (1 << 15), (1 << 8 | 1 << 15) + 1)> é verdadeiro ")
chamada antiga: assertFalse(ac.contains((1 << 15) - 1, (1 << 8 | 1 << 15) - 1))
nova chamada: assertFalse(ac.contains((1 << 15) - 1, (1 << 8 | 1 << 15) - 1), "Era esperado falso, mas " + result4223 + " <ac.contains((1 << 15) - 1, (1 << 8 | 1 << 15) - 1)> é verdadeiro ")
chamada antiga: assertFalse(ac.contains(0, 1 << 15))
nova chamada: assertFalse(ac.contains(0, 1 << 15), "Era esperado falso, mas " + result4224 + " <ac.contains(0, 1 << 15)> é verdadeiro ")
chamada antiga: assertFalse(ac.contains(1 << 8 | 1 << 15 | 1, 1 << 16))
nova chamada: assertFalse(ac.contains(1 << 8 | 1 << 15 | 1, 1 << 16), "Era esperado falso, mas " + result4225 + " <ac.contains(1 << 8 | 1 << 15 | 1, 1 << 16)> é verdadeiro ")
chamada antiga: assertEquals(10, container.nextValue((char) 5))
nova chamada: assertEquals(10, container.nextValue((char) 5), "Era esperado valores iguais, mas  10 é diferente de " + result4226 + " <container.nextValue((char) 5)>")
chamada antiga: assertEquals(10, container.nextValue((char) 10))
nova chamada: assertEquals(10, container.nextValue((char) 10), "Era esperado valores iguais, mas  10 é diferente de " + result4227 + " <container.nextValue((char) 10)>")
chamada antiga: assertEquals(20, container.nextValue((char) 11))
nova chamada: assertEquals(20, container.nextValue((char) 11), "Era esperado valores iguais, mas  20 é diferente de " + result4228 + " <container.nextValue((char) 11)>")
chamada antiga: assertEquals(30, container.nextValue((char) 30))
nova chamada: assertEquals(30, container.nextValue((char) 30), "Era esperado valores iguais, mas  30 é diferente de " + result4229 + " <container.nextValue((char) 30)>")
chamada antiga: assertEquals(-1, container.nextValue((char) 31))
nova chamada: assertEquals(-1, container.nextValue((char) 31), "Era esperado valores iguais, mas  -1 é diferente de " + result4230 + " <container.nextValue((char) 31)>")
chamada antiga: assertTrue(container instanceof ArrayContainer)
nova chamada: assertTrue(container instanceof ArrayContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(64, container.nextValue((char) 0))
nova chamada: assertEquals(64, container.nextValue((char) 0), "Era esperado valores iguais, mas  64 é diferente de " + result4231 + " <container.nextValue((char) 0)>")
chamada antiga: assertEquals(64, container.nextValue((char) 64))
nova chamada: assertEquals(64, container.nextValue((char) 64), "Era esperado valores iguais, mas  64 é diferente de " + result4232 + " <container.nextValue((char) 64)>")
chamada antiga: assertEquals(65, container.nextValue((char) 65))
nova chamada: assertEquals(65, container.nextValue((char) 65), "Era esperado valores iguais, mas  65 é diferente de " + result4233 + " <container.nextValue((char) 65)>")
chamada antiga: assertEquals(128, container.nextValue((char) 128))
nova chamada: assertEquals(128, container.nextValue((char) 128), "Era esperado valores iguais, mas  128 é diferente de " + result4234 + " <container.nextValue((char) 128)>")
chamada antiga: assertEquals(-1, container.nextValue((char) 129))
nova chamada: assertEquals(-1, container.nextValue((char) 129), "Era esperado valores iguais, mas  -1 é diferente de " + result4235 + " <container.nextValue((char) 129)>")
chamada antiga: assertEquals(-1, container.nextValue((char) 5000))
nova chamada: assertEquals(-1, container.nextValue((char) 5000), "Era esperado valores iguais, mas  -1 é diferente de " + result4236 + " <container.nextValue((char) 5000)>")
chamada antiga: assertTrue(container instanceof ArrayContainer)
nova chamada: assertTrue(container instanceof ArrayContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(64, container.nextValue((char) 0))
nova chamada: assertEquals(64, container.nextValue((char) 0), "Era esperado valores iguais, mas  64 é diferente de " + result4237 + " <container.nextValue((char) 0)>")
chamada antiga: assertEquals(64, container.nextValue((char) 64))
nova chamada: assertEquals(64, container.nextValue((char) 64), "Era esperado valores iguais, mas  64 é diferente de " + result4238 + " <container.nextValue((char) 64)>")
chamada antiga: assertEquals(65, container.nextValue((char) 65))
nova chamada: assertEquals(65, container.nextValue((char) 65), "Era esperado valores iguais, mas  65 é diferente de " + result4239 + " <container.nextValue((char) 65)>")
chamada antiga: assertEquals(128, container.nextValue((char) 128))
nova chamada: assertEquals(128, container.nextValue((char) 128), "Era esperado valores iguais, mas  128 é diferente de " + result4240 + " <container.nextValue((char) 128)>")
chamada antiga: assertEquals(256, container.nextValue((char) 129))
nova chamada: assertEquals(256, container.nextValue((char) 129), "Era esperado valores iguais, mas  256 é diferente de " + result4241 + " <container.nextValue((char) 129)>")
chamada antiga: assertEquals(-1, container.nextValue((char) 512))
nova chamada: assertEquals(-1, container.nextValue((char) 512), "Era esperado valores iguais, mas  -1 é diferente de " + result4242 + " <container.nextValue((char) 512)>")
chamada antiga: assertTrue(container instanceof ArrayContainer)
nova chamada: assertTrue(container instanceof ArrayContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(64, container.nextValue((char) 0))
nova chamada: assertEquals(64, container.nextValue((char) 0), "Era esperado valores iguais, mas  64 é diferente de " + result4243 + " <container.nextValue((char) 0)>")
chamada antiga: assertEquals(64, container.nextValue((char) 63))
nova chamada: assertEquals(64, container.nextValue((char) 63), "Era esperado valores iguais, mas  64 é diferente de " + result4244 + " <container.nextValue((char) 63)>")
chamada antiga: assertEquals(64, container.nextValue((char) 64))
nova chamada: assertEquals(64, container.nextValue((char) 64), "Era esperado valores iguais, mas  64 é diferente de " + result4245 + " <container.nextValue((char) 64)>")
chamada antiga: assertEquals(65, container.nextValue((char) 65))
nova chamada: assertEquals(65, container.nextValue((char) 65), "Era esperado valores iguais, mas  65 é diferente de " + result4246 + " <container.nextValue((char) 65)>")
chamada antiga: assertEquals(128, container.nextValue((char) 128))
nova chamada: assertEquals(128, container.nextValue((char) 128), "Era esperado valores iguais, mas  128 é diferente de " + result4247 + " <container.nextValue((char) 128)>")
chamada antiga: assertEquals(200, container.nextValue((char) 129))
nova chamada: assertEquals(200, container.nextValue((char) 129), "Era esperado valores iguais, mas  200 é diferente de " + result4248 + " <container.nextValue((char) 129)>")
chamada antiga: assertEquals(200, container.nextValue((char) 199))
nova chamada: assertEquals(200, container.nextValue((char) 199), "Era esperado valores iguais, mas  200 é diferente de " + result4249 + " <container.nextValue((char) 199)>")
chamada antiga: assertEquals(200, container.nextValue((char) 200))
nova chamada: assertEquals(200, container.nextValue((char) 200), "Era esperado valores iguais, mas  200 é diferente de " + result4250 + " <container.nextValue((char) 200)>")
chamada antiga: assertEquals(250, container.nextValue((char) 250))
nova chamada: assertEquals(250, container.nextValue((char) 250), "Era esperado valores iguais, mas  250 é diferente de " + result4251 + " <container.nextValue((char) 250)>")
chamada antiga: assertEquals(5000, container.nextValue((char) 2500))
nova chamada: assertEquals(5000, container.nextValue((char) 2500), "Era esperado valores iguais, mas  5000 é diferente de " + result4252 + " <container.nextValue((char) 2500)>")
chamada antiga: assertEquals(5000, container.nextValue((char) 5000))
nova chamada: assertEquals(5000, container.nextValue((char) 5000), "Era esperado valores iguais, mas  5000 é diferente de " + result4253 + " <container.nextValue((char) 5000)>")
chamada antiga: assertEquals(5200, container.nextValue((char) 5200))
nova chamada: assertEquals(5200, container.nextValue((char) 5200), "Era esperado valores iguais, mas  5200 é diferente de " + result4254 + " <container.nextValue((char) 5200)>")
chamada antiga: assertEquals(-1, container.nextValue((char) 5201))
nova chamada: assertEquals(-1, container.nextValue((char) 5201), "Era esperado valores iguais, mas  -1 é diferente de " + result4255 + " <container.nextValue((char) 5201)>")
chamada antiga: assertTrue(container instanceof ArrayContainer)
nova chamada: assertTrue(container instanceof ArrayContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(-1, container.previousValue((char) 0))
nova chamada: assertEquals(-1, container.previousValue((char) 0), "Era esperado valores iguais, mas  -1 é diferente de " + result4256 + " <container.previousValue((char) 0)>")
chamada antiga: assertEquals(-1, container.previousValue((char) 63))
nova chamada: assertEquals(-1, container.previousValue((char) 63), "Era esperado valores iguais, mas  -1 é diferente de " + result4257 + " <container.previousValue((char) 63)>")
chamada antiga: assertEquals(64, container.previousValue((char) 64))
nova chamada: assertEquals(64, container.previousValue((char) 64), "Era esperado valores iguais, mas  64 é diferente de " + result4258 + " <container.previousValue((char) 64)>")
chamada antiga: assertEquals(65, container.previousValue((char) 65))
nova chamada: assertEquals(65, container.previousValue((char) 65), "Era esperado valores iguais, mas  65 é diferente de " + result4259 + " <container.previousValue((char) 65)>")
chamada antiga: assertEquals(128, container.previousValue((char) 128))
nova chamada: assertEquals(128, container.previousValue((char) 128), "Era esperado valores iguais, mas  128 é diferente de " + result4260 + " <container.previousValue((char) 128)>")
chamada antiga: assertEquals(128, container.previousValue((char) 129))
nova chamada: assertEquals(128, container.previousValue((char) 129), "Era esperado valores iguais, mas  128 é diferente de " + result4261 + " <container.previousValue((char) 129)>")
chamada antiga: assertTrue(container instanceof ArrayContainer)
nova chamada: assertTrue(container instanceof ArrayContainer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(-1, container.previousValue((char) 0))
nova chamada: assertEquals(-1, container.previousValue((char) 0), "Era esperado valores iguais, mas  -1 é diferente de " + result4262 + " <container.previousValue((char) 0)>")
chamada antiga: assertEquals(-1, container.previousValue((char) 63))
nova chamada: assertEquals(-1, container.previousValue((char) 63), "Era esperado valores iguais, mas  -1 é diferente de " + result4263 + " <container.previousValue((char) 63)>")
chamada antiga: assertEquals(64, container.previousValue((char) 64))
nova chamada: assertEquals(64, container.previousValue((char) 64), "Era esperado valores iguais, mas  64 é diferente de " + result4264 + " <container.previousValue((char) 64)>")
chamada antiga: assertEquals(65, container.previousValue((char) 65))
nova chamada: assertEquals(65, container.previousValue((char) 65), "Era esperado valores iguais, mas  65 é diferente de " + result4265 + " <container.previousValue((char) 65)>")
chamada antiga: assertEquals(128, container.previousValue((char) 128))
nova chamada: assertEquals(128, container.previousValue((char) 128), "Era esperado valores iguais, mas  128 é diferente de " + result4266 + " <container.previousValue((char) 128)>")
chamada antiga: assertEquals(128, container.previousValue((char) 129))
nova chamada: assertEquals(128, container.previousValue((char) 129), "Era esperado valores iguais, mas  128 é diferente de " + result4267 + " <container.previousValue((char) 129)>")
chamada antiga: assertEquals(128, container.previousValue((char) 199))
nova chamada: assertEquals(128, container.previousValue((char) 199), "Era esperado valores iguais, mas  128 é diferente de " + result4268 + " <container.previousValue((char) 199)>")
chamada antiga: assertEquals(200, container.previousValue((char) 200))
nova chamada: assertEquals(200, container.previousValue((char) 200), "Era esperado valores iguais, mas  200 é diferente de " + result4269 + " <container.previousValue((char) 200)>")
chamada antiga: assertEquals(250, container.previousValue((char) 250))
nova chamada: assertEquals(250, container.previousValue((char) 250), "Era esperado valores iguais, mas  250 é diferente de " + result4270 + " <container.previousValue((char) 250)>")
chamada antiga: assertEquals(500, container.previousValue((char) 2500))
nova chamada: assertEquals(500, container.previousValue((char) 2500), "Era esperado valores iguais, mas  500 é diferente de " + result4271 + " <container.previousValue((char) 2500)>")
chamada antiga: assertEquals(5000, container.previousValue((char) 5000))
nova chamada: assertEquals(5000, container.previousValue((char) 5000), "Era esperado valores iguais, mas  5000 é diferente de " + result4272 + " <container.previousValue((char) 5000)>")
chamada antiga: assertEquals(5200, container.previousValue((char) 5200))
nova chamada: assertEquals(5200, container.previousValue((char) 5200), "Era esperado valores iguais, mas  5200 é diferente de " + result4273 + " <container.previousValue((char) 5200)>")
chamada antiga: assertEquals(-1, container.previousValue((char) 5))
nova chamada: assertEquals(-1, container.previousValue((char) 5), "Era esperado valores iguais, mas  -1 é diferente de " + result4274 + " <container.previousValue((char) 5)>")
chamada antiga: assertEquals(-1, container.previousValue((char) 9))
nova chamada: assertEquals(-1, container.previousValue((char) 9), "Era esperado valores iguais, mas  -1 é diferente de " + result4275 + " <container.previousValue((char) 9)>")
chamada antiga: assertEquals(10, container.previousValue((char) 10))
nova chamada: assertEquals(10, container.previousValue((char) 10), "Era esperado valores iguais, mas  10 é diferente de " + result4276 + " <container.previousValue((char) 10)>")
chamada antiga: assertEquals(10, container.previousValue((char) 11))
nova chamada: assertEquals(10, container.previousValue((char) 11), "Era esperado valores iguais, mas  10 é diferente de " + result4277 + " <container.previousValue((char) 11)>")
chamada antiga: assertEquals(20, container.previousValue((char) 21))
nova chamada: assertEquals(20, container.previousValue((char) 21), "Era esperado valores iguais, mas  20 é diferente de " + result4278 + " <container.previousValue((char) 21)>")
chamada antiga: assertEquals(30, container.previousValue((char) 30))
nova chamada: assertEquals(30, container.previousValue((char) 30), "Era esperado valores iguais, mas  30 é diferente de " + result4279 + " <container.previousValue((char) 30)>")
chamada antiga: assertEquals(-1, container.previousValue((char) ((1 << 15) | 4)))
nova chamada: assertEquals(-1, container.previousValue((char) ((1 << 15) | 4)), "Era esperado valores iguais, mas  -1 é diferente de " + result4280 + " <container.previousValue((char) ((1 << 15) | 4))>")
chamada antiga: assertEquals(((1 << 15) | 5), container.previousValue((char) ((1 << 15) | 5)))
nova chamada: assertEquals(((1 << 15) | 5), container.previousValue((char) ((1 << 15) | 5)), "Era esperado valores iguais, mas  ((1  15) | 5) é diferente de " + result4281 + " <container.previousValue((char) ((1 << 15) | 5))>")
chamada antiga: assertEquals(((1 << 15) | 5), container.previousValue((char) ((1 << 15) | 6)))
nova chamada: assertEquals(((1 << 15) | 5), container.previousValue((char) ((1 << 15) | 6)), "Era esperado valores iguais, mas  ((1  15) | 5) é diferente de " + result4282 + " <container.previousValue((char) ((1 << 15) | 6))>")
chamada antiga: assertEquals(((1 << 15) | 7), container.previousValue((char) ((1 << 15) | 7)))
nova chamada: assertEquals(((1 << 15) | 7), container.previousValue((char) ((1 << 15) | 7)), "Era esperado valores iguais, mas  ((1  15) | 7) é diferente de " + result4283 + " <container.previousValue((char) ((1 << 15) | 7))>")
chamada antiga: assertEquals(((1 << 15) | 7), container.previousValue((char) ((1 << 15) | 8)))
nova chamada: assertEquals(((1 << 15) | 7), container.previousValue((char) ((1 << 15) | 8)), "Era esperado valores iguais, mas  ((1  15) | 7) é diferente de " + result4284 + " <container.previousValue((char) ((1 << 15) | 8))>")
chamada antiga: assertEquals(((1 << 15) | 5), container.nextValue((char) ((1 << 15) | 4)))
nova chamada: assertEquals(((1 << 15) | 5), container.nextValue((char) ((1 << 15) | 4)), "Era esperado valores iguais, mas  ((1  15) | 5) é diferente de " + result4285 + " <container.nextValue((char) ((1 << 15) | 4))>")
chamada antiga: assertEquals(((1 << 15) | 5), container.nextValue((char) ((1 << 15) | 5)))
nova chamada: assertEquals(((1 << 15) | 5), container.nextValue((char) ((1 << 15) | 5)), "Era esperado valores iguais, mas  ((1  15) | 5) é diferente de " + result4286 + " <container.nextValue((char) ((1 << 15) | 5))>")
chamada antiga: assertEquals(((1 << 15) | 7), container.nextValue((char) ((1 << 15) | 6)))
nova chamada: assertEquals(((1 << 15) | 7), container.nextValue((char) ((1 << 15) | 6)), "Era esperado valores iguais, mas  ((1  15) | 7) é diferente de " + result4287 + " <container.nextValue((char) ((1 << 15) | 6))>")
chamada antiga: assertEquals(((1 << 15) | 7), container.nextValue((char) ((1 << 15) | 7)))
nova chamada: assertEquals(((1 << 15) | 7), container.nextValue((char) ((1 << 15) | 7)), "Era esperado valores iguais, mas  ((1  15) | 7) é diferente de " + result4288 + " <container.nextValue((char) ((1 << 15) | 7))>")
chamada antiga: assertEquals(-1, container.nextValue((char) ((1 << 15) | 8)))
nova chamada: assertEquals(-1, container.nextValue((char) ((1 << 15) | 8)), "Era esperado valores iguais, mas  -1 é diferente de " + result4289 + " <container.nextValue((char) ((1 << 15) | 8))>")
chamada antiga: assertEquals(30, container.previousValue((char) 31))
nova chamada: assertEquals(30, container.previousValue((char) 31), "Era esperado valores iguais, mas  30 é diferente de " + result4290 + " <container.previousValue((char) 31)>")
chamada antiga: assertEquals(0, container.previousAbsentValue((char) 0))
nova chamada: assertEquals(0, container.previousAbsentValue((char) 0), "Era esperado valores iguais, mas  0 é diferente de " + result4291 + " <container.previousAbsentValue((char) 0)>")
chamada antiga: assertEquals(63, container.previousAbsentValue((char) 63))
nova chamada: assertEquals(63, container.previousAbsentValue((char) 63), "Era esperado valores iguais, mas  63 é diferente de " + result4292 + " <container.previousAbsentValue((char) 63)>")
chamada antiga: assertEquals(63, container.previousAbsentValue((char) 64))
nova chamada: assertEquals(63, container.previousAbsentValue((char) 64), "Era esperado valores iguais, mas  63 é diferente de " + result4293 + " <container.previousAbsentValue((char) 64)>")
chamada antiga: assertEquals(63, container.previousAbsentValue((char) 65))
nova chamada: assertEquals(63, container.previousAbsentValue((char) 65), "Era esperado valores iguais, mas  63 é diferente de " + result4294 + " <container.previousAbsentValue((char) 65)>")
chamada antiga: assertEquals(63, container.previousAbsentValue((char) 128))
nova chamada: assertEquals(63, container.previousAbsentValue((char) 128), "Era esperado valores iguais, mas  63 é diferente de " + result4295 + " <container.previousAbsentValue((char) 128)>")
chamada antiga: assertEquals(129, container.previousAbsentValue((char) 129))
nova chamada: assertEquals(129, container.previousAbsentValue((char) 129), "Era esperado valores iguais, mas  129 é diferente de " + result4296 + " <container.previousAbsentValue((char) 129)>")
chamada antiga: assertEquals(0, container.previousAbsentValue((char) 0))
nova chamada: assertEquals(0, container.previousAbsentValue((char) 0), "Era esperado valores iguais, mas  0 é diferente de " + result4297 + " <container.previousAbsentValue((char) 0)>")
chamada antiga: assertEquals(63, container.previousAbsentValue((char) 63))
nova chamada: assertEquals(63, container.previousAbsentValue((char) 63), "Era esperado valores iguais, mas  63 é diferente de " + result4298 + " <container.previousAbsentValue((char) 63)>")
chamada antiga: assertEquals(63, container.previousAbsentValue((char) 64))
nova chamada: assertEquals(63, container.previousAbsentValue((char) 64), "Era esperado valores iguais, mas  63 é diferente de " + result4299 + " <container.previousAbsentValue((char) 64)>")
chamada antiga: assertEquals(63, container.previousAbsentValue((char) 65))
nova chamada: assertEquals(63, container.previousAbsentValue((char) 65), "Era esperado valores iguais, mas  63 é diferente de " + result4300 + " <container.previousAbsentValue((char) 65)>")
chamada antiga: assertEquals(63, container.previousAbsentValue((char) 128))
nova chamada: assertEquals(63, container.previousAbsentValue((char) 128), "Era esperado valores iguais, mas  63 é diferente de " + result4301 + " <container.previousAbsentValue((char) 128)>")
chamada antiga: assertEquals(129, container.previousAbsentValue((char) 129))
nova chamada: assertEquals(129, container.previousAbsentValue((char) 129), "Era esperado valores iguais, mas  129 é diferente de " + result4302 + " <container.previousAbsentValue((char) 129)>")
chamada antiga: assertEquals(199, container.previousAbsentValue((char) 199))
nova chamada: assertEquals(199, container.previousAbsentValue((char) 199), "Era esperado valores iguais, mas  199 é diferente de " + result4303 + " <container.previousAbsentValue((char) 199)>")
chamada antiga: assertEquals(199, container.previousAbsentValue((char) 200))
nova chamada: assertEquals(199, container.previousAbsentValue((char) 200), "Era esperado valores iguais, mas  199 é diferente de " + result4304 + " <container.previousAbsentValue((char) 200)>")
chamada antiga: assertEquals(199, container.previousAbsentValue((char) 250))
nova chamada: assertEquals(199, container.previousAbsentValue((char) 250), "Era esperado valores iguais, mas  199 é diferente de " + result4305 + " <container.previousAbsentValue((char) 250)>")
chamada antiga: assertEquals(2500, container.previousAbsentValue((char) 2500))
nova chamada: assertEquals(2500, container.previousAbsentValue((char) 2500), "Era esperado valores iguais, mas  2500 é diferente de " + result4306 + " <container.previousAbsentValue((char) 2500)>")
chamada antiga: assertEquals(4999, container.previousAbsentValue((char) 5000))
nova chamada: assertEquals(4999, container.previousAbsentValue((char) 5000), "Era esperado valores iguais, mas  4999 é diferente de " + result4307 + " <container.previousAbsentValue((char) 5000)>")
chamada antiga: assertEquals(4999, container.previousAbsentValue((char) 5200))
nova chamada: assertEquals(4999, container.previousAbsentValue((char) 5200), "Era esperado valores iguais, mas  4999 é diferente de " + result4308 + " <container.previousAbsentValue((char) 5200)>")
chamada antiga: assertEquals(9, container.previousAbsentValue((char) 9))
nova chamada: assertEquals(9, container.previousAbsentValue((char) 9), "Era esperado valores iguais, mas  9 é diferente de " + result4309 + " <container.previousAbsentValue((char) 9)>")
chamada antiga: assertEquals(9, container.previousAbsentValue((char) 10))
nova chamada: assertEquals(9, container.previousAbsentValue((char) 10), "Era esperado valores iguais, mas  9 é diferente de " + result4310 + " <container.previousAbsentValue((char) 10)>")
chamada antiga: assertEquals(11, container.previousAbsentValue((char) 11))
nova chamada: assertEquals(11, container.previousAbsentValue((char) 11), "Era esperado valores iguais, mas  11 é diferente de " + result4311 + " <container.previousAbsentValue((char) 11)>")
chamada antiga: assertEquals(21, container.previousAbsentValue((char) 21))
nova chamada: assertEquals(21, container.previousAbsentValue((char) 21), "Era esperado valores iguais, mas  21 é diferente de " + result4312 + " <container.previousAbsentValue((char) 21)>")
chamada antiga: assertEquals(29, container.previousAbsentValue((char) 30))
nova chamada: assertEquals(29, container.previousAbsentValue((char) 30), "Era esperado valores iguais, mas  29 é diferente de " + result4313 + " <container.previousAbsentValue((char) 30)>")
chamada antiga: assertEquals(((1 << 15) | 4), container.previousAbsentValue((char) ((1 << 15) | 4)))
nova chamada: assertEquals(((1 << 15) | 4), container.previousAbsentValue((char) ((1 << 15) | 4)), "Era esperado valores iguais, mas  ((1  15) | 4) é diferente de " + result4314 + " <container.previousAbsentValue((char) ((1 << 15) | 4))>")
chamada antiga: assertEquals(((1 << 15) | 4), container.previousAbsentValue((char) ((1 << 15) | 5)))
nova chamada: assertEquals(((1 << 15) | 4), container.previousAbsentValue((char) ((1 << 15) | 5)), "Era esperado valores iguais, mas  ((1  15) | 4) é diferente de " + result4315 + " <container.previousAbsentValue((char) ((1 << 15) | 5))>")
chamada antiga: assertEquals(((1 << 15) | 6), container.previousAbsentValue((char) ((1 << 15) | 6)))
nova chamada: assertEquals(((1 << 15) | 6), container.previousAbsentValue((char) ((1 << 15) | 6)), "Era esperado valores iguais, mas  ((1  15) | 6) é diferente de " + result4316 + " <container.previousAbsentValue((char) ((1 << 15) | 6))>")
chamada antiga: assertEquals(((1 << 15) | 6), container.previousAbsentValue((char) ((1 << 15) | 7)))
nova chamada: assertEquals(((1 << 15) | 6), container.previousAbsentValue((char) ((1 << 15) | 7)), "Era esperado valores iguais, mas  ((1  15) | 6) é diferente de " + result4317 + " <container.previousAbsentValue((char) ((1 << 15) | 7))>")
chamada antiga: assertEquals(((1 << 15) | 8), container.previousAbsentValue((char) ((1 << 15) | 8)))
nova chamada: assertEquals(((1 << 15) | 8), container.previousAbsentValue((char) ((1 << 15) | 8)), "Era esperado valores iguais, mas  ((1  15) | 8) é diferente de " + result4318 + " <container.previousAbsentValue((char) ((1 << 15) | 8))>")
chamada antiga: assertEquals(0, container.nextAbsentValue((char) 0))
nova chamada: assertEquals(0, container.nextAbsentValue((char) 0), "Era esperado valores iguais, mas  0 é diferente de " + result4319 + " <container.nextAbsentValue((char) 0)>")
chamada antiga: assertEquals(63, container.nextAbsentValue((char) 63))
nova chamada: assertEquals(63, container.nextAbsentValue((char) 63), "Era esperado valores iguais, mas  63 é diferente de " + result4320 + " <container.nextAbsentValue((char) 63)>")
chamada antiga: assertEquals(129, container.nextAbsentValue((char) 64))
nova chamada: assertEquals(129, container.nextAbsentValue((char) 64), "Era esperado valores iguais, mas  129 é diferente de " + result4321 + " <container.nextAbsentValue((char) 64)>")
chamada antiga: assertEquals(129, container.nextAbsentValue((char) 65))
nova chamada: assertEquals(129, container.nextAbsentValue((char) 65), "Era esperado valores iguais, mas  129 é diferente de " + result4322 + " <container.nextAbsentValue((char) 65)>")
chamada antiga: assertEquals(129, container.nextAbsentValue((char) 128))
nova chamada: assertEquals(129, container.nextAbsentValue((char) 128), "Era esperado valores iguais, mas  129 é diferente de " + result4323 + " <container.nextAbsentValue((char) 128)>")
chamada antiga: assertEquals(129, container.nextAbsentValue((char) 129))
nova chamada: assertEquals(129, container.nextAbsentValue((char) 129), "Era esperado valores iguais, mas  129 é diferente de " + result4324 + " <container.nextAbsentValue((char) 129)>")
chamada antiga: assertEquals(0, container.nextAbsentValue((char) 0))
nova chamada: assertEquals(0, container.nextAbsentValue((char) 0), "Era esperado valores iguais, mas  0 é diferente de " + result4325 + " <container.nextAbsentValue((char) 0)>")
chamada antiga: assertEquals(63, container.nextAbsentValue((char) 63))
nova chamada: assertEquals(63, container.nextAbsentValue((char) 63), "Era esperado valores iguais, mas  63 é diferente de " + result4326 + " <container.nextAbsentValue((char) 63)>")
chamada antiga: assertEquals(129, container.nextAbsentValue((char) 64))
nova chamada: assertEquals(129, container.nextAbsentValue((char) 64), "Era esperado valores iguais, mas  129 é diferente de " + result4327 + " <container.nextAbsentValue((char) 64)>")
chamada antiga: assertEquals(129, container.nextAbsentValue((char) 65))
nova chamada: assertEquals(129, container.nextAbsentValue((char) 65), "Era esperado valores iguais, mas  129 é diferente de " + result4328 + " <container.nextAbsentValue((char) 65)>")
chamada antiga: assertEquals(129, container.nextAbsentValue((char) 128))
nova chamada: assertEquals(129, container.nextAbsentValue((char) 128), "Era esperado valores iguais, mas  129 é diferente de " + result4329 + " <container.nextAbsentValue((char) 128)>")
chamada antiga: assertEquals(129, container.nextAbsentValue((char) 129))
nova chamada: assertEquals(129, container.nextAbsentValue((char) 129), "Era esperado valores iguais, mas  129 é diferente de " + result4330 + " <container.nextAbsentValue((char) 129)>")
chamada antiga: assertEquals(199, container.nextAbsentValue((char) 199))
nova chamada: assertEquals(199, container.nextAbsentValue((char) 199), "Era esperado valores iguais, mas  199 é diferente de " + result4331 + " <container.nextAbsentValue((char) 199)>")
chamada antiga: assertEquals(501, container.nextAbsentValue((char) 200))
nova chamada: assertEquals(501, container.nextAbsentValue((char) 200), "Era esperado valores iguais, mas  501 é diferente de " + result4332 + " <container.nextAbsentValue((char) 200)>")
chamada antiga: assertEquals(501, container.nextAbsentValue((char) 250))
nova chamada: assertEquals(501, container.nextAbsentValue((char) 250), "Era esperado valores iguais, mas  501 é diferente de " + result4333 + " <container.nextAbsentValue((char) 250)>")
chamada antiga: assertEquals(2500, container.nextAbsentValue((char) 2500))
nova chamada: assertEquals(2500, container.nextAbsentValue((char) 2500), "Era esperado valores iguais, mas  2500 é diferente de " + result4334 + " <container.nextAbsentValue((char) 2500)>")
chamada antiga: assertEquals(5201, container.nextAbsentValue((char) 5000))
nova chamada: assertEquals(5201, container.nextAbsentValue((char) 5000), "Era esperado valores iguais, mas  5201 é diferente de " + result4335 + " <container.nextAbsentValue((char) 5000)>")
chamada antiga: assertEquals(5201, container.nextAbsentValue((char) 5200))
nova chamada: assertEquals(5201, container.nextAbsentValue((char) 5200), "Era esperado valores iguais, mas  5201 é diferente de " + result4336 + " <container.nextAbsentValue((char) 5200)>")
chamada antiga: assertEquals(9, container.nextAbsentValue((char) 9))
nova chamada: assertEquals(9, container.nextAbsentValue((char) 9), "Era esperado valores iguais, mas  9 é diferente de " + result4337 + " <container.nextAbsentValue((char) 9)>")
chamada antiga: assertEquals(11, container.nextAbsentValue((char) 10))
nova chamada: assertEquals(11, container.nextAbsentValue((char) 10), "Era esperado valores iguais, mas  11 é diferente de " + result4338 + " <container.nextAbsentValue((char) 10)>")
chamada antiga: assertEquals(11, container.nextAbsentValue((char) 11))
nova chamada: assertEquals(11, container.nextAbsentValue((char) 11), "Era esperado valores iguais, mas  11 é diferente de " + result4339 + " <container.nextAbsentValue((char) 11)>")
chamada antiga: assertEquals(21, container.nextAbsentValue((char) 21))
nova chamada: assertEquals(21, container.nextAbsentValue((char) 21), "Era esperado valores iguais, mas  21 é diferente de " + result4340 + " <container.nextAbsentValue((char) 21)>")
chamada antiga: assertEquals(31, container.nextAbsentValue((char) 30))
nova chamada: assertEquals(31, container.nextAbsentValue((char) 30), "Era esperado valores iguais, mas  31 é diferente de " + result4341 + " <container.nextAbsentValue((char) 30)>")
chamada antiga: assertEquals(((1 << 15) | 4), container.nextAbsentValue((char) ((1 << 15) | 4)))
nova chamada: assertEquals(((1 << 15) | 4), container.nextAbsentValue((char) ((1 << 15) | 4)), "Era esperado valores iguais, mas  ((1  15) | 4) é diferente de " + result4342 + " <container.nextAbsentValue((char) ((1 << 15) | 4))>")
chamada antiga: assertEquals(((1 << 15) | 6), container.nextAbsentValue((char) ((1 << 15) | 5)))
nova chamada: assertEquals(((1 << 15) | 6), container.nextAbsentValue((char) ((1 << 15) | 5)), "Era esperado valores iguais, mas  ((1  15) | 6) é diferente de " + result4343 + " <container.nextAbsentValue((char) ((1 << 15) | 5))>")
chamada antiga: assertEquals(((1 << 15) | 6), container.nextAbsentValue((char) ((1 << 15) | 6)))
nova chamada: assertEquals(((1 << 15) | 6), container.nextAbsentValue((char) ((1 << 15) | 6)), "Era esperado valores iguais, mas  ((1  15) | 6) é diferente de " + result4344 + " <container.nextAbsentValue((char) ((1 << 15) | 6))>")
chamada antiga: assertEquals(((1 << 15) | 8), container.nextAbsentValue((char) ((1 << 15) | 7)))
nova chamada: assertEquals(((1 << 15) | 8), container.nextAbsentValue((char) ((1 << 15) | 7)), "Era esperado valores iguais, mas  ((1  15) | 8) é diferente de " + result4345 + " <container.nextAbsentValue((char) ((1 << 15) | 7))>")
chamada antiga: assertEquals(((1 << 15) | 8), container.nextAbsentValue((char) ((1 << 15) | 8)))
nova chamada: assertEquals(((1 << 15) | 8), container.nextAbsentValue((char) ((1 << 15) | 8)), "Era esperado valores iguais, mas  ((1  15) | 8) é diferente de " + result4346 + " <container.nextAbsentValue((char) ((1 << 15) | 8))>")
chamada antiga: assertEquals(11, consumer.getNumberOfValuesConsumed())
nova chamada: assertEquals(11, consumer.getNumberOfValuesConsumed(), "Era esperado valores iguais, mas  11 é diferente de " + result4347 + " <consumer.getNumberOfValuesConsumed()>")
chamada antiga: assertEquals(5, consumer2.getNumberOfValuesConsumed())
nova chamada: assertEquals(5, consumer2.getNumberOfValuesConsumed(), "Era esperado valores iguais, mas  5 é diferente de " + result4348 + " <consumer2.getNumberOfValuesConsumed()>")
chamada antiga: assertEquals(6, consumer3.getNumberOfValuesConsumed())
nova chamada: assertEquals(6, consumer3.getNumberOfValuesConsumed(), "Era esperado valores iguais, mas  6 é diferente de " + result4349 + " <consumer3.getNumberOfValuesConsumed()>")
chamada antiga: assertEquals(totalcard, M)
nova chamada: assertEquals(totalcard, M, "Era esperado valores iguais, mas  totalcard é diferente de " + " M")
chamada antiga: assertEquals(expected, bench.pairwiseAndNot(bs))
nova chamada: assertEquals(expected, bench.pairwiseAndNot(bs), "Era esperado valores iguais, mas  expected é diferente de " + result4350 + " <bench.pairwiseAndNot(bs)>")
chamada antiga: assertEquals(0, bench.wideAnd_naive(bs))
nova chamada: assertEquals(0, bench.wideAnd_naive(bs), "Era esperado valores iguais, mas  0 é diferente de " + result4351 + " <bench.wideAnd_naive(bs)>")
chamada antiga: assertEquals(expected, bench.wideOr_naive(bs))
nova chamada: assertEquals(expected, bench.wideOr_naive(bs), "Era esperado valores iguais, mas  expected é diferente de " + result4352 + " <bench.wideOr_naive(bs)>")
chamada antiga: assertEquals(expected, bench.iterate(bs))
nova chamada: assertEquals(expected, bench.iterate(bs), "Era esperado valores iguais, mas  expected é diferente de " + result4353 + " <bench.iterate(bs)>")
chamada antiga: assertEquals(expected, bench.pairwiseIOr(bs))
nova chamada: assertEquals(expected, bench.pairwiseIOr(bs), "Era esperado valores iguais, mas  expected é diferente de " + result4354 + " <bench.pairwiseIOr(bs)>")
chamada antiga: assertEquals((int) EXPECTED_RESULTS.get(dataset), bench.pairwiseOr(bs))
nova chamada: assertEquals((int) EXPECTED_RESULTS.get(dataset), bench.pairwiseOr(bs), "Era esperado valores iguais, mas  (int) EXPECTED_RESULTS.get(dataset) é diferente de " + result4355 + " <bench.pairwiseOr(bs)>")
chamada antiga: assertEquals((int) EXPECTED_RESULTS_NO_CARDINALITY.get(dataset), bench.pairwiseOr_NoCardinality(bs))
nova chamada: assertEquals((int) EXPECTED_RESULTS_NO_CARDINALITY.get(dataset), bench.pairwiseOr_NoCardinality(bs), "Era esperado valores iguais, mas  (int) EXPECTED_RESULTS_NO_CARDINALITY.get(dataset) é diferente de " + result4356 + " <bench.pairwiseOr_NoCardinality(bs)>")
chamada antiga: assertEquals(expected, bench.forEach(bs))
nova chamada: assertEquals(expected, bench.forEach(bs), "Era esperado valores iguais, mas  expected é diferente de " + result4357 + " <bench.forEach(bs)>")
chamada antiga: assertEquals(expected, bench.reverseIterate(bs))
nova chamada: assertEquals(expected, bench.reverseIterate(bs), "Era esperado valores iguais, mas  expected é diferente de " + result4358 + " <bench.reverseIterate(bs)>")
chamada antiga: assertEquals(expected, bench.wideOr_pq(bs))
nova chamada: assertEquals(expected, bench.wideOr_pq(bs), "Era esperado valores iguais, mas  expected é diferente de " + result4359 + " <bench.wideOr_pq(bs)>")
chamada antiga: assertEquals(expected, bench.pairwiseXor(bs))
nova chamada: assertEquals(expected, bench.pairwiseXor(bs), "Era esperado valores iguais, mas  expected é diferente de " + result4360 + " <bench.pairwiseXor(bs)>")
chamada antiga: assertEquals(expected, bench.pairwiseAnd(bs))
nova chamada: assertEquals(expected, bench.pairwiseAnd(bs), "Era esperado valores iguais, mas  expected é diferente de " + result4361 + " <bench.pairwiseAnd(bs)>")
Total asserts: 6627
Asserts sem descrição: 6507
Asserts com descrição: 120
Assertion Roulette: 5821

Após do refactor: 
Total asserts: 6627
Asserts sem descrição: 1712
Asserts com descrição: 4935
Assertion Roulette: 1616
