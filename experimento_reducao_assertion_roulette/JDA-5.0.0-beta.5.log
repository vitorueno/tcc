
Projeto: /home/vitor-otto/opensource/JDA-5.0.0-beta.5

Antes do refactor: 
chamada antiga: Assertions.assertEquals(10, object.getInt("int", 0))
nova chamada: assertEquals(10, object.getInt("int", 0), "Era esperado valores iguais, mas  10 é diferente de " + result0 + " <object.getInt('int', 0)>")
chamada antiga: Assertions.assertEquals(100, object.getLong("long", 0))
nova chamada: assertEquals(100, object.getLong("long", 0), "Era esperado valores iguais, mas  100 é diferente de " + result1 + " <object.getLong('long', 0)>")
chamada antiga: Assertions.assertEquals(true, object.getBoolean("boolean", false))
nova chamada: assertEquals(true, object.getBoolean("boolean", false), "Era esperado valores iguais, mas  true é diferente de " + result2 + " <object.getBoolean('boolean', false)>")
chamada antiga: Assertions.assertEquals("test", object.getString("string", null))
nova chamada: assertEquals("test", object.getString("string", null), "Era esperado valores iguais, mas  'test' é diferente de " + result3 + " <object.getString('string', null)>")
chamada antiga: Assertions.assertEquals(object.toMap(), symmetric.toMap())
nova chamada: assertEquals(object.toMap(), symmetric.toMap(), "Era esperado valores iguais, mas " + result4 + " <object.toMap()> é diferente de " + result5 + " <symmetric.toMap()>")
chamada antiga: Assertions.assertEquals("ABCDEF", markdown.compute("**A_B||C~~D__E`F`__~~||_**"))
nova chamada: assertEquals("ABCDEF", markdown.compute("**A_B||C~~D__E`F`__~~||_**"), "Era esperado valores iguais, mas  'ABCDEF' é diferente de " + result6 + " <markdown.compute('**A_B||C~~D__E`F`__~~||_**')>")
chamada antiga: Assertions.assertEquals("", markdown.compute(""))
nova chamada: assertEquals("", markdown.compute(""), "Era esperado valores iguais, mas  '' é diferente de " + result7 + " <markdown.compute('')>")
chamada antiga: Assertions.assertEquals("Hello World ~~~~", markdown.compute("Hello World ~~~~"))
nova chamada: assertEquals("Hello World ~~~~", markdown.compute("Hello World ~~~~"), "Era esperado valores iguais, mas  'Hello World ~~~~' é diferente de " + result8 + " <markdown.compute('Hello World ~~~~')>")
chamada antiga: Assertions.assertEquals("Hello World ~", markdown.compute("Hello World ~~~~~"))
nova chamada: assertEquals("Hello World ~", markdown.compute("Hello World ~~~~~"), "Era esperado valores iguais, mas  'Hello World ~' é diferente de " + result9 + " <markdown.compute('Hello World ~~~~~')>")
chamada antiga: Assertions.assertEquals("Hello", markdown.compute("**Hello**"))
nova chamada: assertEquals("Hello", markdown.compute("**Hello**"), "Era esperado valores iguais, mas  'Hello' é diferente de " + result10 + " <markdown.compute('**Hello**')>")
chamada antiga: Assertions.assertEquals("**Hello", markdown.compute("**Hello"))
nova chamada: assertEquals("**Hello", markdown.compute("**Hello"), "Era esperado valores iguais, mas  '**Hello' é diferente de " + result11 + " <markdown.compute('**Hello')>")
chamada antiga: Assertions.assertEquals("\\**Hello**", markdown.compute("\\**Hello**"))
nova chamada: assertEquals("\\**Hello**", markdown.compute("\\**Hello**"), "Era esperado valores iguais, mas  '\\**Hello**' é diferente de " + result12 + " <markdown.compute('\\**Hello**')>")
chamada antiga: Assertions.assertEquals("Hello", markdown.compute("*Hello*"))
nova chamada: assertEquals("Hello", markdown.compute("*Hello*"), "Era esperado valores iguais, mas  'Hello' é diferente de " + result13 + " <markdown.compute('*Hello*')>")
chamada antiga: Assertions.assertEquals("Hello", markdown.compute("_Hello_"))
nova chamada: assertEquals("Hello", markdown.compute("_Hello_"), "Era esperado valores iguais, mas  'Hello' é diferente de " + result14 + " <markdown.compute('_Hello_')>")
chamada antiga: Assertions.assertEquals("*Hello", markdown.compute("*Hello"))
nova chamada: assertEquals("*Hello", markdown.compute("*Hello"), "Era esperado valores iguais, mas  '*Hello' é diferente de " + result15 + " <markdown.compute('*Hello')>")
chamada antiga: Assertions.assertEquals("_Hello", markdown.compute("_Hello"))
nova chamada: assertEquals("_Hello", markdown.compute("_Hello"), "Era esperado valores iguais, mas  '_Hello' é diferente de " + result16 + " <markdown.compute('_Hello')>")
chamada antiga: Assertions.assertEquals("\\*Hello*", markdown.compute("\\*Hello*"))
nova chamada: assertEquals("\\*Hello*", markdown.compute("\\*Hello*"), "Era esperado valores iguais, mas  '\\*Hello*' é diferente de " + result17 + " <markdown.compute('\\*Hello*')>")
chamada antiga: Assertions.assertEquals("\\_Hello_", markdown.compute("\\_Hello_"))
nova chamada: assertEquals("\\_Hello_", markdown.compute("\\_Hello_"), "Era esperado valores iguais, mas  '\\_Hello_' é diferente de " + result18 + " <markdown.compute('\\_Hello_')>")
chamada antiga: Assertions.assertEquals("Hello", markdown.compute("***Hello***"))
nova chamada: assertEquals("Hello", markdown.compute("***Hello***"), "Era esperado valores iguais, mas  'Hello' é diferente de " + result19 + " <markdown.compute('***Hello***')>")
chamada antiga: Assertions.assertEquals("***Hello", markdown.compute("***Hello"))
nova chamada: assertEquals("***Hello", markdown.compute("***Hello"), "Era esperado valores iguais, mas  '***Hello' é diferente de " + result20 + " <markdown.compute('***Hello')>")
chamada antiga: Assertions.assertEquals("\\***Hello***", markdown.compute("\\***Hello***"))
nova chamada: assertEquals("\\***Hello***", markdown.compute("\\***Hello***"), "Era esperado valores iguais, mas  '\\***Hello***' é diferente de " + result21 + " <markdown.compute('\\***Hello***')>")
chamada antiga: Assertions.assertEquals("Hello", markdown.compute("__Hello__"))
nova chamada: assertEquals("Hello", markdown.compute("__Hello__"), "Era esperado valores iguais, mas  'Hello' é diferente de " + result22 + " <markdown.compute('__Hello__')>")
chamada antiga: Assertions.assertEquals("__Hello", markdown.compute("__Hello"))
nova chamada: assertEquals("__Hello", markdown.compute("__Hello"), "Era esperado valores iguais, mas  '__Hello' é diferente de " + result23 + " <markdown.compute('__Hello')>")
chamada antiga: Assertions.assertEquals("\\__Hello__", markdown.compute("\\__Hello__"))
nova chamada: assertEquals("\\__Hello__", markdown.compute("\\__Hello__"), "Era esperado valores iguais, mas  '\\__Hello__' é diferente de " + result24 + " <markdown.compute('\\__Hello__')>")
chamada antiga: Assertions.assertEquals("Hello", markdown.compute("~~Hello~~"))
nova chamada: assertEquals("Hello", markdown.compute("~~Hello~~"), "Era esperado valores iguais, mas  'Hello' é diferente de " + result25 + " <markdown.compute('~~Hello~~')>")
chamada antiga: Assertions.assertEquals("~~Hello", markdown.compute("~~Hello"))
nova chamada: assertEquals("~~Hello", markdown.compute("~~Hello"), "Era esperado valores iguais, mas  '~~Hello' é diferente de " + result26 + " <markdown.compute('~~Hello')>")
chamada antiga: Assertions.assertEquals("\\~~Hello~~", markdown.compute("\\~~Hello~~"))
nova chamada: assertEquals("\\~~Hello~~", markdown.compute("\\~~Hello~~"), "Era esperado valores iguais, mas  '\\~~Hello~~' é diferente de " + result27 + " <markdown.compute('\\~~Hello~~')>")
chamada antiga: Assertions.assertEquals("Hello", markdown.compute("||Hello||"))
nova chamada: assertEquals("Hello", markdown.compute("||Hello||"), "Era esperado valores iguais, mas  'Hello' é diferente de " + result28 + " <markdown.compute('||Hello||')>")
chamada antiga: Assertions.assertEquals("||Hello", markdown.compute("||Hello"))
nova chamada: assertEquals("||Hello", markdown.compute("||Hello"), "Era esperado valores iguais, mas  '||Hello' é diferente de " + result29 + " <markdown.compute('||Hello')>")
chamada antiga: Assertions.assertEquals("\\||Hello||", markdown.compute("\\||Hello||"))
nova chamada: assertEquals("\\||Hello||", markdown.compute("\\||Hello||"), "Era esperado valores iguais, mas  '\\||Hello||' é diferente de " + result30 + " <markdown.compute('\\||Hello||')>")
chamada antiga: Assertions.assertEquals("Hello", markdown.compute("`Hello`"))
nova chamada: assertEquals("Hello", markdown.compute("`Hello`"), "Era esperado valores iguais, mas  'Hello' é diferente de " + result31 + " <markdown.compute('`Hello`')>")
chamada antiga: Assertions.assertEquals("`Hello", markdown.compute("`Hello"))
nova chamada: assertEquals("`Hello", markdown.compute("`Hello"), "Era esperado valores iguais, mas  '`Hello' é diferente de " + result32 + " <markdown.compute('`Hello')>")
chamada antiga: Assertions.assertEquals("\\`Hello`", markdown.compute("\\`Hello`"))
nova chamada: assertEquals("\\`Hello`", markdown.compute("\\`Hello`"), "Era esperado valores iguais, mas  '\\`Hello`' é diferente de " + result33 + " <markdown.compute('\\`Hello`')>")
chamada antiga: Assertions.assertEquals("Hello **World**", markdown.compute("`Hello **World**`"))
nova chamada: assertEquals("Hello **World**", markdown.compute("`Hello **World**`"), "Era esperado valores iguais, mas  'Hello **World**' é diferente de " + result34 + " <markdown.compute('`Hello **World**`')>")
chamada antiga: Assertions.assertEquals("`Hello World", markdown.compute("`Hello **World**"))
nova chamada: assertEquals("`Hello World", markdown.compute("`Hello **World**"), "Era esperado valores iguais, mas  '`Hello World' é diferente de " + result35 + " <markdown.compute('`Hello **World**')>")
chamada antiga: Assertions.assertEquals("\\`Hello World`", markdown.compute("\\`Hello **World**`"))
nova chamada: assertEquals("\\`Hello World`", markdown.compute("\\`Hello **World**`"), "Era esperado valores iguais, mas  '\\`Hello World`' é diferente de " + result36 + " <markdown.compute('\\`Hello **World**`')>")
chamada antiga: Assertions.assertEquals("Hello", markdown.compute("``Hello``"))
nova chamada: assertEquals("Hello", markdown.compute("``Hello``"), "Era esperado valores iguais, mas  'Hello' é diferente de " + result37 + " <markdown.compute('``Hello``')>")
chamada antiga: Assertions.assertEquals("``Hello", markdown.compute("``Hello"))
nova chamada: assertEquals("``Hello", markdown.compute("``Hello"), "Era esperado valores iguais, mas  '``Hello' é diferente de " + result38 + " <markdown.compute('``Hello')>")
chamada antiga: Assertions.assertEquals("\\``Hello``", markdown.compute("\\``Hello``"))
nova chamada: assertEquals("\\``Hello``", markdown.compute("\\``Hello``"), "Era esperado valores iguais, mas  '\\``Hello``' é diferente de " + result39 + " <markdown.compute('\\``Hello``')>")
chamada antiga: Assertions.assertEquals("Hello **World**", markdown.compute("``Hello **World**``"))
nova chamada: assertEquals("Hello **World**", markdown.compute("``Hello **World**``"), "Era esperado valores iguais, mas  'Hello **World**' é diferente de " + result40 + " <markdown.compute('``Hello **World**``')>")
chamada antiga: Assertions.assertEquals("``Hello World", markdown.compute("``Hello **World**"))
nova chamada: assertEquals("``Hello World", markdown.compute("``Hello **World**"), "Era esperado valores iguais, mas  '``Hello World' é diferente de " + result41 + " <markdown.compute('``Hello **World**')>")
chamada antiga: Assertions.assertEquals("\\``Hello World``", markdown.compute("\\``Hello **World**``"))
nova chamada: assertEquals("\\``Hello World``", markdown.compute("\\``Hello **World**``"), "Era esperado valores iguais, mas  '\\``Hello World``' é diferente de " + result42 + " <markdown.compute('\\``Hello **World**``')>")
chamada antiga: Assertions.assertEquals("Hello `to` World", markdown.compute("``Hello `to` World``"))
nova chamada: assertEquals("Hello `to` World", markdown.compute("``Hello `to` World``"), "Era esperado valores iguais, mas  'Hello `to` World' é diferente de " + result43 + " <markdown.compute('``Hello `to` World``')>")
chamada antiga: Assertions.assertEquals("``Hello to World", markdown.compute("``Hello `to` World"))
nova chamada: assertEquals("``Hello to World", markdown.compute("``Hello `to` World"), "Era esperado valores iguais, mas  '``Hello to World' é diferente de " + result44 + " <markdown.compute('``Hello `to` World')>")
chamada antiga: Assertions.assertEquals("\\``Hello to World``", markdown.compute("\\``Hello `to` World``"))
nova chamada: assertEquals("\\``Hello to World``", markdown.compute("\\``Hello `to` World``"), "Era esperado valores iguais, mas  '\\``Hello to World``' é diferente de " + result45 + " <markdown.compute('\\``Hello `to` World``')>")
chamada antiga: Assertions.assertEquals("Hello", markdown.compute("```Hello```"))
nova chamada: assertEquals("Hello", markdown.compute("```Hello```"), "Era esperado valores iguais, mas  'Hello' é diferente de " + result46 + " <markdown.compute('```Hello```')>")
chamada antiga: Assertions.assertEquals("```Hello", markdown.compute("```Hello"))
nova chamada: assertEquals("```Hello", markdown.compute("```Hello"), "Era esperado valores iguais, mas  '```Hello' é diferente de " + result47 + " <markdown.compute('```Hello')>")
chamada antiga: Assertions.assertEquals("\\```Hello```", markdown.compute("\\```Hello```"))
nova chamada: assertEquals("\\```Hello```", markdown.compute("\\```Hello```"), "Era esperado valores iguais, mas  '\\```Hello```' é diferente de " + result48 + " <markdown.compute('\\```Hello```')>")
chamada antiga: Assertions.assertEquals("Hello **World**", markdown.compute("```Hello **World**```"))
nova chamada: assertEquals("Hello **World**", markdown.compute("```Hello **World**```"), "Era esperado valores iguais, mas  'Hello **World**' é diferente de " + result49 + " <markdown.compute('```Hello **World**```')>")
chamada antiga: Assertions.assertEquals("```Hello World", markdown.compute("```Hello **World**"))
nova chamada: assertEquals("```Hello World", markdown.compute("```Hello **World**"), "Era esperado valores iguais, mas  '```Hello World' é diferente de " + result50 + " <markdown.compute('```Hello **World**')>")
chamada antiga: Assertions.assertEquals("\\```Hello World```", markdown.compute("\\```Hello **World**```"))
nova chamada: assertEquals("\\```Hello World```", markdown.compute("\\```Hello **World**```"), "Era esperado valores iguais, mas  '\\```Hello World```' é diferente de " + result51 + " <markdown.compute('\\```Hello **World**```')>")
chamada antiga: Assertions.assertEquals("Hello `to` World", markdown.compute("```Hello `to` World```"))
nova chamada: assertEquals("Hello `to` World", markdown.compute("```Hello `to` World```"), "Era esperado valores iguais, mas  'Hello `to` World' é diferente de " + result52 + " <markdown.compute('```Hello `to` World```')>")
chamada antiga: Assertions.assertEquals("```Hello to World", markdown.compute("```Hello `to` World"))
nova chamada: assertEquals("```Hello to World", markdown.compute("```Hello `to` World"), "Era esperado valores iguais, mas  '```Hello to World' é diferente de " + result53 + " <markdown.compute('```Hello `to` World')>")
chamada antiga: Assertions.assertEquals("\\```Hello to World```", markdown.compute("\\```Hello `to` World```"))
nova chamada: assertEquals("\\```Hello to World```", markdown.compute("\\```Hello `to` World```"), "Era esperado valores iguais, mas  '\\```Hello to World```' é diferente de " + result54 + " <markdown.compute('\\```Hello `to` World```')>")
chamada antiga: Assertions.assertEquals("Test", markdown.compute("```java\nTest```"))
nova chamada: assertEquals("Test", markdown.compute("```java\nTest```"), "Era esperado valores iguais, mas  'Test' é diferente de " + result55 + " <markdown.compute('```java\nTest```')>")
chamada antiga: Assertions.assertEquals("Hello > World", markdown.compute("> Hello > World"))
nova chamada: assertEquals("Hello > World", markdown.compute("> Hello > World"), "Era esperado valores iguais, mas  'Hello  World' é diferente de " + result56 + " <markdown.compute('> Hello > World')>")
chamada antiga: Assertions.assertEquals("Hello\nWorld", markdown.compute("> Hello\n> World"))
nova chamada: assertEquals("Hello\nWorld", markdown.compute("> Hello\n> World"), "Era esperado valores iguais, mas  'Hello\nWorld' é diferente de " + result57 + " <markdown.compute('> Hello\n> World')>")
chamada antiga: Assertions.assertEquals("Hello\nWorld", markdown.compute(">>> Hello\nWorld"))
nova chamada: assertEquals("Hello\nWorld", markdown.compute(">>> Hello\nWorld"), "Era esperado valores iguais, mas  'Hello\nWorld' é diferente de " + result58 + " <markdown.compute('>>> Hello\nWorld')>")
chamada antiga: Assertions.assertEquals("Hello\nWorld", markdown.compute(">>>\nHello\nWorld"))
nova chamada: assertEquals("Hello\nWorld", markdown.compute(">>>\nHello\nWorld"), "Era esperado valores iguais, mas  'Hello\nWorld' é diferente de " + result59 + " <markdown.compute('>>>\nHello\nWorld')>")
chamada antiga: Assertions.assertEquals("Hello > World", markdown.compute(">>>\nHello > World"))
nova chamada: assertEquals("Hello > World", markdown.compute(">>>\nHello > World"), "Era esperado valores iguais, mas  'Hello  World' é diferente de " + result60 + " <markdown.compute('>>>\nHello > World')>")
chamada antiga: Assertions.assertEquals("**A_B||C~~D__E`F`__~~||_**", markdown.compute("**A_B||C~~D__E`F`__~~||_**"))
nova chamada: assertEquals("**A_B||C~~D__E`F`__~~||_**", markdown.compute("**A_B||C~~D__E`F`__~~||_**"), "Era esperado valores iguais, mas  '**A_B||C~~D__E`F`__~~||_**' é diferente de " + result61 + " <markdown.compute('**A_B||C~~D__E`F`__~~||_**')>")
chamada antiga: Assertions.assertEquals("**Hello**", markdown.compute("**Hello**"))
nova chamada: assertEquals("**Hello**", markdown.compute("**Hello**"), "Era esperado valores iguais, mas  '**Hello**' é diferente de " + result62 + " <markdown.compute('**Hello**')>")
chamada antiga: Assertions.assertEquals("**Hello", markdown.compute("**Hello"))
nova chamada: assertEquals("**Hello", markdown.compute("**Hello"), "Era esperado valores iguais, mas  '**Hello' é diferente de " + result63 + " <markdown.compute('**Hello')>")
chamada antiga: Assertions.assertEquals("*Hello*", markdown.compute("*Hello*"))
nova chamada: assertEquals("*Hello*", markdown.compute("*Hello*"), "Era esperado valores iguais, mas  '*Hello*' é diferente de " + result64 + " <markdown.compute('*Hello*')>")
chamada antiga: Assertions.assertEquals("_Hello_", markdown.compute("_Hello_"))
nova chamada: assertEquals("_Hello_", markdown.compute("_Hello_"), "Era esperado valores iguais, mas  '_Hello_' é diferente de " + result65 + " <markdown.compute('_Hello_')>")
chamada antiga: Assertions.assertEquals("*Hello", markdown.compute("*Hello"))
nova chamada: assertEquals("*Hello", markdown.compute("*Hello"), "Era esperado valores iguais, mas  '*Hello' é diferente de " + result66 + " <markdown.compute('*Hello')>")
chamada antiga: Assertions.assertEquals("_Hello", markdown.compute("_Hello"))
nova chamada: assertEquals("_Hello", markdown.compute("_Hello"), "Era esperado valores iguais, mas  '_Hello' é diferente de " + result67 + " <markdown.compute('_Hello')>")
chamada antiga: Assertions.assertEquals("***Hello***", markdown.compute("***Hello***"))
nova chamada: assertEquals("***Hello***", markdown.compute("***Hello***"), "Era esperado valores iguais, mas  '***Hello***' é diferente de " + result68 + " <markdown.compute('***Hello***')>")
chamada antiga: Assertions.assertEquals("***Hello", markdown.compute("***Hello"))
nova chamada: assertEquals("***Hello", markdown.compute("***Hello"), "Era esperado valores iguais, mas  '***Hello' é diferente de " + result69 + " <markdown.compute('***Hello')>")
chamada antiga: Assertions.assertEquals("\\***Hello***", markdown.compute("\\***Hello***"))
nova chamada: assertEquals("\\***Hello***", markdown.compute("\\***Hello***"), "Era esperado valores iguais, mas  '\\***Hello***' é diferente de " + result70 + " <markdown.compute('\\***Hello***')>")
chamada antiga: Assertions.assertEquals("__Hello__", markdown.compute("__Hello__"))
nova chamada: assertEquals("__Hello__", markdown.compute("__Hello__"), "Era esperado valores iguais, mas  '__Hello__' é diferente de " + result71 + " <markdown.compute('__Hello__')>")
chamada antiga: Assertions.assertEquals("__Hello", markdown.compute("__Hello"))
nova chamada: assertEquals("__Hello", markdown.compute("__Hello"), "Era esperado valores iguais, mas  '__Hello' é diferente de " + result72 + " <markdown.compute('__Hello')>")
chamada antiga: Assertions.assertEquals("~~Hello~~", markdown.compute("~~Hello~~"))
nova chamada: assertEquals("~~Hello~~", markdown.compute("~~Hello~~"), "Era esperado valores iguais, mas  '~~Hello~~' é diferente de " + result73 + " <markdown.compute('~~Hello~~')>")
chamada antiga: Assertions.assertEquals("~~Hello", markdown.compute("~~Hello"))
nova chamada: assertEquals("~~Hello", markdown.compute("~~Hello"), "Era esperado valores iguais, mas  '~~Hello' é diferente de " + result74 + " <markdown.compute('~~Hello')>")
chamada antiga: Assertions.assertEquals("||Hello||", markdown.compute("||Hello||"))
nova chamada: assertEquals("||Hello||", markdown.compute("||Hello||"), "Era esperado valores iguais, mas  '||Hello||' é diferente de " + result75 + " <markdown.compute('||Hello||')>")
chamada antiga: Assertions.assertEquals("||Hello", markdown.compute("||Hello"))
nova chamada: assertEquals("||Hello", markdown.compute("||Hello"), "Era esperado valores iguais, mas  '||Hello' é diferente de " + result76 + " <markdown.compute('||Hello')>")
chamada antiga: Assertions.assertEquals("`Hello`", markdown.compute("`Hello`"))
nova chamada: assertEquals("`Hello`", markdown.compute("`Hello`"), "Era esperado valores iguais, mas  '`Hello`' é diferente de " + result77 + " <markdown.compute('`Hello`')>")
chamada antiga: Assertions.assertEquals("`Hello", markdown.compute("`Hello"))
nova chamada: assertEquals("`Hello", markdown.compute("`Hello"), "Era esperado valores iguais, mas  '`Hello' é diferente de " + result78 + " <markdown.compute('`Hello')>")
chamada antiga: Assertions.assertEquals("`Hello **World**`", markdown.compute("`Hello **World**`"))
nova chamada: assertEquals("`Hello **World**`", markdown.compute("`Hello **World**`"), "Era esperado valores iguais, mas  '`Hello **World**`' é diferente de " + result79 + " <markdown.compute('`Hello **World**`')>")
chamada antiga: Assertions.assertEquals("`Hello **World**", markdown.compute("`Hello **World**"))
nova chamada: assertEquals("`Hello **World**", markdown.compute("`Hello **World**"), "Era esperado valores iguais, mas  '`Hello **World**' é diferente de " + result80 + " <markdown.compute('`Hello **World**')>")
chamada antiga: Assertions.assertEquals("``Hello``", markdown.compute("``Hello``"))
nova chamada: assertEquals("``Hello``", markdown.compute("``Hello``"), "Era esperado valores iguais, mas  '``Hello``' é diferente de " + result81 + " <markdown.compute('``Hello``')>")
chamada antiga: Assertions.assertEquals("``Hello", markdown.compute("``Hello"))
nova chamada: assertEquals("``Hello", markdown.compute("``Hello"), "Era esperado valores iguais, mas  '``Hello' é diferente de " + result82 + " <markdown.compute('``Hello')>")
chamada antiga: Assertions.assertEquals("``Hello **World**``", markdown.compute("``Hello **World**``"))
nova chamada: assertEquals("``Hello **World**``", markdown.compute("``Hello **World**``"), "Era esperado valores iguais, mas  '``Hello **World**``' é diferente de " + result83 + " <markdown.compute('``Hello **World**``')>")
chamada antiga: Assertions.assertEquals("``Hello **World**", markdown.compute("``Hello **World**"))
nova chamada: assertEquals("``Hello **World**", markdown.compute("``Hello **World**"), "Era esperado valores iguais, mas  '``Hello **World**' é diferente de " + result84 + " <markdown.compute('``Hello **World**')>")
chamada antiga: Assertions.assertEquals("``Hello `to` World``", markdown.compute("``Hello `to` World``"))
nova chamada: assertEquals("``Hello `to` World``", markdown.compute("``Hello `to` World``"), "Era esperado valores iguais, mas  '``Hello `to` World``' é diferente de " + result85 + " <markdown.compute('``Hello `to` World``')>")
chamada antiga: Assertions.assertEquals("``Hello `to` World", markdown.compute("``Hello `to` World"))
nova chamada: assertEquals("``Hello `to` World", markdown.compute("``Hello `to` World"), "Era esperado valores iguais, mas  '``Hello `to` World' é diferente de " + result86 + " <markdown.compute('``Hello `to` World')>")
chamada antiga: Assertions.assertEquals("```Hello```", markdown.compute("```Hello```"))
nova chamada: assertEquals("```Hello```", markdown.compute("```Hello```"), "Era esperado valores iguais, mas  '```Hello```' é diferente de " + result87 + " <markdown.compute('```Hello```')>")
chamada antiga: Assertions.assertEquals("```Hello", markdown.compute("```Hello"))
nova chamada: assertEquals("```Hello", markdown.compute("```Hello"), "Era esperado valores iguais, mas  '```Hello' é diferente de " + result88 + " <markdown.compute('```Hello')>")
chamada antiga: Assertions.assertEquals("```Hello **World**```", markdown.compute("```Hello **World**```"))
nova chamada: assertEquals("```Hello **World**```", markdown.compute("```Hello **World**```"), "Era esperado valores iguais, mas  '```Hello **World**```' é diferente de " + result89 + " <markdown.compute('```Hello **World**```')>")
chamada antiga: Assertions.assertEquals("```Hello **World**", markdown.compute("```Hello **World**"))
nova chamada: assertEquals("```Hello **World**", markdown.compute("```Hello **World**"), "Era esperado valores iguais, mas  '```Hello **World**' é diferente de " + result90 + " <markdown.compute('```Hello **World**')>")
chamada antiga: Assertions.assertEquals("```Hello `to` World```", markdown.compute("```Hello `to` World```"))
nova chamada: assertEquals("```Hello `to` World```", markdown.compute("```Hello `to` World```"), "Era esperado valores iguais, mas  '```Hello `to` World```' é diferente de " + result91 + " <markdown.compute('```Hello `to` World```')>")
chamada antiga: Assertions.assertEquals("```Hello `to` World", markdown.compute("```Hello `to` World"))
nova chamada: assertEquals("```Hello `to` World", markdown.compute("```Hello `to` World"), "Era esperado valores iguais, mas  '```Hello `to` World' é diferente de " + result92 + " <markdown.compute('```Hello `to` World')>")
chamada antiga: Assertions.assertEquals("```java\nTest```", markdown.compute("```java\nTest```"))
nova chamada: assertEquals("```java\nTest```", markdown.compute("```java\nTest```"), "Era esperado valores iguais, mas  '```java\nTest```' é diferente de " + result93 + " <markdown.compute('```java\nTest```')>")
chamada antiga: Assertions.assertEquals("> Hello > World", markdown.compute("> Hello > World"))
nova chamada: assertEquals("> Hello > World", markdown.compute("> Hello > World"), "Era esperado valores iguais, mas  ' Hello  World' é diferente de " + result94 + " <markdown.compute('> Hello > World')>")
chamada antiga: Assertions.assertEquals("> Hello\n> World", markdown.compute("> Hello\n> World"))
nova chamada: assertEquals("> Hello\n> World", markdown.compute("> Hello\n> World"), "Era esperado valores iguais, mas  ' Hello\n World' é diferente de " + result95 + " <markdown.compute('> Hello\n> World')>")
chamada antiga: Assertions.assertEquals(">>> Hello\nWorld", markdown.compute(">>> Hello\nWorld"))
nova chamada: assertEquals(">>> Hello\nWorld", markdown.compute(">>> Hello\nWorld"), "Era esperado valores iguais, mas  ' Hello\nWorld' é diferente de " + result96 + " <markdown.compute('>>> Hello\nWorld')>")
chamada antiga: Assertions.assertEquals(">>>\nHello\nWorld", markdown.compute(">>>\nHello\nWorld"))
nova chamada: assertEquals(">>>\nHello\nWorld", markdown.compute(">>>\nHello\nWorld"), "Era esperado valores iguais, mas  '\nHello\nWorld' é diferente de " + result97 + " <markdown.compute('>>>\nHello\nWorld')>")
chamada antiga: Assertions.assertEquals(">>>\nHello > World", markdown.compute(">>>\nHello > World"))
nova chamada: assertEquals(">>>\nHello > World", markdown.compute(">>>\nHello > World"), "Era esperado valores iguais, mas  '\nHello  World' é diferente de " + result98 + " <markdown.compute('>>>\nHello > World')>")
chamada antiga: Assertions.assertEquals("\\*\\*A\\_B\\||C\\~~D\\_\\_E\\`F\\`\\_\\_\\~~\\||\\_\\*\\*", markdown.compute("**A_B||C~~D__E`F`__~~||_**"))
nova chamada: assertEquals("\\*\\*A\\_B\\||C\\~~D\\_\\_E\\`F\\`\\_\\_\\~~\\||\\_\\*\\*", markdown.compute("**A_B||C~~D__E`F`__~~||_**"), "Era esperado valores iguais, mas  '\\*\\*A\\_B\\||C\\~~D\\_\\_E\\`F\\`\\_\\_\\~~\\||\\_\\*\\*' é diferente de " + result99 + " <markdown.compute('**A_B||C~~D__E`F`__~~||_**')>")
chamada antiga: Assertions.assertEquals("\\*\\*Hello\\*\\*", markdown.compute("**Hello**"))
nova chamada: assertEquals("\\*\\*Hello\\*\\*", markdown.compute("**Hello**"), "Era esperado valores iguais, mas  '\\*\\*Hello\\*\\*' é diferente de " + result100 + " <markdown.compute('**Hello**')>")
chamada antiga: Assertions.assertEquals("**Hello", markdown.compute("**Hello"))
nova chamada: assertEquals("**Hello", markdown.compute("**Hello"), "Era esperado valores iguais, mas  '**Hello' é diferente de " + result101 + " <markdown.compute('**Hello')>")
chamada antiga: Assertions.assertEquals("\\**Hello**", markdown.compute("\\**Hello**"))
nova chamada: assertEquals("\\**Hello**", markdown.compute("\\**Hello**"), "Era esperado valores iguais, mas  '\\**Hello**' é diferente de " + result102 + " <markdown.compute('\\**Hello**')>")
chamada antiga: Assertions.assertEquals("\\*Hello\\*", markdown.compute("*Hello*"))
nova chamada: assertEquals("\\*Hello\\*", markdown.compute("*Hello*"), "Era esperado valores iguais, mas  '\\*Hello\\*' é diferente de " + result103 + " <markdown.compute('*Hello*')>")
chamada antiga: Assertions.assertEquals("\\_Hello\\_", markdown.compute("_Hello_"))
nova chamada: assertEquals("\\_Hello\\_", markdown.compute("_Hello_"), "Era esperado valores iguais, mas  '\\_Hello\\_' é diferente de " + result104 + " <markdown.compute('_Hello_')>")
chamada antiga: Assertions.assertEquals("*Hello", markdown.compute("*Hello"))
nova chamada: assertEquals("*Hello", markdown.compute("*Hello"), "Era esperado valores iguais, mas  '*Hello' é diferente de " + result105 + " <markdown.compute('*Hello')>")
chamada antiga: Assertions.assertEquals("_Hello", markdown.compute("_Hello"))
nova chamada: assertEquals("_Hello", markdown.compute("_Hello"), "Era esperado valores iguais, mas  '_Hello' é diferente de " + result106 + " <markdown.compute('_Hello')>")
chamada antiga: Assertions.assertEquals("\\*Hello*", markdown.compute("\\*Hello*"))
nova chamada: assertEquals("\\*Hello*", markdown.compute("\\*Hello*"), "Era esperado valores iguais, mas  '\\*Hello*' é diferente de " + result107 + " <markdown.compute('\\*Hello*')>")
chamada antiga: Assertions.assertEquals("\\_Hello_", markdown.compute("\\_Hello_"))
nova chamada: assertEquals("\\_Hello_", markdown.compute("\\_Hello_"), "Era esperado valores iguais, mas  '\\_Hello_' é diferente de " + result108 + " <markdown.compute('\\_Hello_')>")
chamada antiga: Assertions.assertEquals("\\*\\*\\*Hello\\*\\*\\*", markdown.compute("***Hello***"))
nova chamada: assertEquals("\\*\\*\\*Hello\\*\\*\\*", markdown.compute("***Hello***"), "Era esperado valores iguais, mas  '\\*\\*\\*Hello\\*\\*\\*' é diferente de " + result109 + " <markdown.compute('***Hello***')>")
chamada antiga: Assertions.assertEquals("***Hello", markdown.compute("***Hello"))
nova chamada: assertEquals("***Hello", markdown.compute("***Hello"), "Era esperado valores iguais, mas  '***Hello' é diferente de " + result110 + " <markdown.compute('***Hello')>")
chamada antiga: Assertions.assertEquals("\\***Hello***", markdown.compute("\\***Hello***"))
nova chamada: assertEquals("\\***Hello***", markdown.compute("\\***Hello***"), "Era esperado valores iguais, mas  '\\***Hello***' é diferente de " + result111 + " <markdown.compute('\\***Hello***')>")
chamada antiga: Assertions.assertEquals("\\_\\_Hello\\_\\_", markdown.compute("__Hello__"))
nova chamada: assertEquals("\\_\\_Hello\\_\\_", markdown.compute("__Hello__"), "Era esperado valores iguais, mas  '\\_\\_Hello\\_\\_' é diferente de " + result112 + " <markdown.compute('__Hello__')>")
chamada antiga: Assertions.assertEquals("__Hello", markdown.compute("__Hello"))
nova chamada: assertEquals("__Hello", markdown.compute("__Hello"), "Era esperado valores iguais, mas  '__Hello' é diferente de " + result113 + " <markdown.compute('__Hello')>")
chamada antiga: Assertions.assertEquals("\\__Hello__", markdown.compute("\\__Hello__"))
nova chamada: assertEquals("\\__Hello__", markdown.compute("\\__Hello__"), "Era esperado valores iguais, mas  '\\__Hello__' é diferente de " + result114 + " <markdown.compute('\\__Hello__')>")
chamada antiga: Assertions.assertEquals("\\~~Hello\\~~", markdown.compute("~~Hello~~"))
nova chamada: assertEquals("\\~~Hello\\~~", markdown.compute("~~Hello~~"), "Era esperado valores iguais, mas  '\\~~Hello\\~~' é diferente de " + result115 + " <markdown.compute('~~Hello~~')>")
chamada antiga: Assertions.assertEquals("~~Hello", markdown.compute("~~Hello"))
nova chamada: assertEquals("~~Hello", markdown.compute("~~Hello"), "Era esperado valores iguais, mas  '~~Hello' é diferente de " + result116 + " <markdown.compute('~~Hello')>")
chamada antiga: Assertions.assertEquals("\\~~Hello~~", markdown.compute("\\~~Hello~~"))
nova chamada: assertEquals("\\~~Hello~~", markdown.compute("\\~~Hello~~"), "Era esperado valores iguais, mas  '\\~~Hello~~' é diferente de " + result117 + " <markdown.compute('\\~~Hello~~')>")
chamada antiga: Assertions.assertEquals("\\||Hello\\||", markdown.compute("||Hello||"))
nova chamada: assertEquals("\\||Hello\\||", markdown.compute("||Hello||"), "Era esperado valores iguais, mas  '\\||Hello\\||' é diferente de " + result118 + " <markdown.compute('||Hello||')>")
chamada antiga: Assertions.assertEquals("||Hello", markdown.compute("||Hello"))
nova chamada: assertEquals("||Hello", markdown.compute("||Hello"), "Era esperado valores iguais, mas  '||Hello' é diferente de " + result119 + " <markdown.compute('||Hello')>")
chamada antiga: Assertions.assertEquals("\\||Hello||", markdown.compute("\\||Hello||"))
nova chamada: assertEquals("\\||Hello||", markdown.compute("\\||Hello||"), "Era esperado valores iguais, mas  '\\||Hello||' é diferente de " + result120 + " <markdown.compute('\\||Hello||')>")
chamada antiga: Assertions.assertEquals("\\`Hello\\`", markdown.compute("`Hello`"))
nova chamada: assertEquals("\\`Hello\\`", markdown.compute("`Hello`"), "Era esperado valores iguais, mas  '\\`Hello\\`' é diferente de " + result121 + " <markdown.compute('`Hello`')>")
chamada antiga: Assertions.assertEquals("`Hello", markdown.compute("`Hello"))
nova chamada: assertEquals("`Hello", markdown.compute("`Hello"), "Era esperado valores iguais, mas  '`Hello' é diferente de " + result122 + " <markdown.compute('`Hello')>")
chamada antiga: Assertions.assertEquals("\\`Hello`", markdown.compute("\\`Hello`"))
nova chamada: assertEquals("\\`Hello`", markdown.compute("\\`Hello`"), "Era esperado valores iguais, mas  '\\`Hello`' é diferente de " + result123 + " <markdown.compute('\\`Hello`')>")
chamada antiga: Assertions.assertEquals("\\`Hello **World**\\`", markdown.compute("`Hello **World**`"))
nova chamada: assertEquals("\\`Hello **World**\\`", markdown.compute("`Hello **World**`"), "Era esperado valores iguais, mas  '\\`Hello **World**\\`' é diferente de " + result124 + " <markdown.compute('`Hello **World**`')>")
chamada antiga: Assertions.assertEquals("`Hello \\*\\*World\\*\\*", markdown.compute("`Hello **World**"))
nova chamada: assertEquals("`Hello \\*\\*World\\*\\*", markdown.compute("`Hello **World**"), "Era esperado valores iguais, mas  '`Hello \\*\\*World\\*\\*' é diferente de " + result125 + " <markdown.compute('`Hello **World**')>")
chamada antiga: Assertions.assertEquals("\\`Hello \\*\\*World\\*\\*`", markdown.compute("\\`Hello **World**`"))
nova chamada: assertEquals("\\`Hello \\*\\*World\\*\\*`", markdown.compute("\\`Hello **World**`"), "Era esperado valores iguais, mas  '\\`Hello \\*\\*World\\*\\*`' é diferente de " + result126 + " <markdown.compute('\\`Hello **World**`')>")
chamada antiga: Assertions.assertEquals("\\``Hello\\``", markdown.compute("``Hello``"))
nova chamada: assertEquals("\\``Hello\\``", markdown.compute("``Hello``"), "Era esperado valores iguais, mas  '\\``Hello\\``' é diferente de " + result127 + " <markdown.compute('``Hello``')>")
chamada antiga: Assertions.assertEquals("``Hello", markdown.compute("``Hello"))
nova chamada: assertEquals("``Hello", markdown.compute("``Hello"), "Era esperado valores iguais, mas  '``Hello' é diferente de " + result128 + " <markdown.compute('``Hello')>")
chamada antiga: Assertions.assertEquals("\\``Hello``", markdown.compute("\\``Hello``"))
nova chamada: assertEquals("\\``Hello``", markdown.compute("\\``Hello``"), "Era esperado valores iguais, mas  '\\``Hello``' é diferente de " + result129 + " <markdown.compute('\\``Hello``')>")
chamada antiga: Assertions.assertEquals("\\``Hello **World**\\``", markdown.compute("``Hello **World**``"))
nova chamada: assertEquals("\\``Hello **World**\\``", markdown.compute("``Hello **World**``"), "Era esperado valores iguais, mas  '\\``Hello **World**\\``' é diferente de " + result130 + " <markdown.compute('``Hello **World**``')>")
chamada antiga: Assertions.assertEquals("``Hello \\*\\*World\\*\\*", markdown.compute("``Hello **World**"))
nova chamada: assertEquals("``Hello \\*\\*World\\*\\*", markdown.compute("``Hello **World**"), "Era esperado valores iguais, mas  '``Hello \\*\\*World\\*\\*' é diferente de " + result131 + " <markdown.compute('``Hello **World**')>")
chamada antiga: Assertions.assertEquals("\\``Hello \\*\\*World\\*\\*``", markdown.compute("\\``Hello **World**``"))
nova chamada: assertEquals("\\``Hello \\*\\*World\\*\\*``", markdown.compute("\\``Hello **World**``"), "Era esperado valores iguais, mas  '\\``Hello \\*\\*World\\*\\*``' é diferente de " + result132 + " <markdown.compute('\\``Hello **World**``')>")
chamada antiga: Assertions.assertEquals("\\``Hello `to` World\\``", markdown.compute("``Hello `to` World``"))
nova chamada: assertEquals("\\``Hello `to` World\\``", markdown.compute("``Hello `to` World``"), "Era esperado valores iguais, mas  '\\``Hello `to` World\\``' é diferente de " + result133 + " <markdown.compute('``Hello `to` World``')>")
chamada antiga: Assertions.assertEquals("``Hello \\`to\\` World", markdown.compute("``Hello `to` World"))
nova chamada: assertEquals("``Hello \\`to\\` World", markdown.compute("``Hello `to` World"), "Era esperado valores iguais, mas  '``Hello \\`to\\` World' é diferente de " + result134 + " <markdown.compute('``Hello `to` World')>")
chamada antiga: Assertions.assertEquals("\\``Hello \\`to\\` World", markdown.compute("\\``Hello `to` World"))
nova chamada: assertEquals("\\``Hello \\`to\\` World", markdown.compute("\\``Hello `to` World"), "Era esperado valores iguais, mas  '\\``Hello \\`to\\` World' é diferente de " + result135 + " <markdown.compute('\\``Hello `to` World')>")
chamada antiga: Assertions.assertEquals("\\```Hello\\```", markdown.compute("```Hello```"))
nova chamada: assertEquals("\\```Hello\\```", markdown.compute("```Hello```"), "Era esperado valores iguais, mas  '\\```Hello\\```' é diferente de " + result136 + " <markdown.compute('```Hello```')>")
chamada antiga: Assertions.assertEquals("```Hello", markdown.compute("```Hello"))
nova chamada: assertEquals("```Hello", markdown.compute("```Hello"), "Era esperado valores iguais, mas  '```Hello' é diferente de " + result137 + " <markdown.compute('```Hello')>")
chamada antiga: Assertions.assertEquals("\\```Hello", markdown.compute("\\```Hello"))
nova chamada: assertEquals("\\```Hello", markdown.compute("\\```Hello"), "Era esperado valores iguais, mas  '\\```Hello' é diferente de " + result138 + " <markdown.compute('\\```Hello')>")
chamada antiga: Assertions.assertEquals("\\```Hello **World**\\```", markdown.compute("```Hello **World**```"))
nova chamada: assertEquals("\\```Hello **World**\\```", markdown.compute("```Hello **World**```"), "Era esperado valores iguais, mas  '\\```Hello **World**\\```' é diferente de " + result139 + " <markdown.compute('```Hello **World**```')>")
chamada antiga: Assertions.assertEquals("```Hello \\*\\*World\\*\\*", markdown.compute("```Hello **World**"))
nova chamada: assertEquals("```Hello \\*\\*World\\*\\*", markdown.compute("```Hello **World**"), "Era esperado valores iguais, mas  '```Hello \\*\\*World\\*\\*' é diferente de " + result140 + " <markdown.compute('```Hello **World**')>")
chamada antiga: Assertions.assertEquals("\\```Hello \\*\\*World\\*\\*", markdown.compute("\\```Hello **World**"))
nova chamada: assertEquals("\\```Hello \\*\\*World\\*\\*", markdown.compute("\\```Hello **World**"), "Era esperado valores iguais, mas  '\\```Hello \\*\\*World\\*\\*' é diferente de " + result141 + " <markdown.compute('\\```Hello **World**')>")
chamada antiga: Assertions.assertEquals("\\```Hello `to` World\\```", markdown.compute("```Hello `to` World```"))
nova chamada: assertEquals("\\```Hello `to` World\\```", markdown.compute("```Hello `to` World```"), "Era esperado valores iguais, mas  '\\```Hello `to` World\\```' é diferente de " + result142 + " <markdown.compute('```Hello `to` World```')>")
chamada antiga: Assertions.assertEquals("```Hello \\`to\\` World", markdown.compute("```Hello `to` World"))
nova chamada: assertEquals("```Hello \\`to\\` World", markdown.compute("```Hello `to` World"), "Era esperado valores iguais, mas  '```Hello \\`to\\` World' é diferente de " + result143 + " <markdown.compute('```Hello `to` World')>")
chamada antiga: Assertions.assertEquals("\\```Hello \\`to\\` World", markdown.compute("\\```Hello `to` World"))
nova chamada: assertEquals("\\```Hello \\`to\\` World", markdown.compute("\\```Hello `to` World"), "Era esperado valores iguais, mas  '\\```Hello \\`to\\` World' é diferente de " + result144 + " <markdown.compute('\\```Hello `to` World')>")
chamada antiga: Assertions.assertEquals("\\```java\nTest\\```", markdown.compute("```java\nTest```"))
nova chamada: assertEquals("\\```java\nTest\\```", markdown.compute("```java\nTest```"), "Era esperado valores iguais, mas  '\\```java\nTest\\```' é diferente de " + result145 + " <markdown.compute('```java\nTest```')>")
chamada antiga: Assertions.assertEquals("\\> Hello > World", markdown.compute("> Hello > World"))
nova chamada: assertEquals("\\> Hello > World", markdown.compute("> Hello > World"), "Era esperado valores iguais, mas  '\\ Hello  World' é diferente de " + result146 + " <markdown.compute('> Hello > World')>")
chamada antiga: Assertions.assertEquals("\\> Hello\n\\> World", markdown.compute("> Hello\n> World"))
nova chamada: assertEquals("\\> Hello\n\\> World", markdown.compute("> Hello\n> World"), "Era esperado valores iguais, mas  '\\ Hello\n\\ World' é diferente de " + result147 + " <markdown.compute('> Hello\n> World')>")
chamada antiga: Assertions.assertEquals("\\>>> Hello\nWorld", markdown.compute(">>> Hello\nWorld"))
nova chamada: assertEquals("\\>>> Hello\nWorld", markdown.compute(">>> Hello\nWorld"), "Era esperado valores iguais, mas  '\\ Hello\nWorld' é diferente de " + result148 + " <markdown.compute('>>> Hello\nWorld')>")
chamada antiga: Assertions.assertEquals("\\>>>\nHello\nWorld", markdown.compute(">>>\nHello\nWorld"))
nova chamada: assertEquals("\\>>>\nHello\nWorld", markdown.compute(">>>\nHello\nWorld"), "Era esperado valores iguais, mas  '\\\nHello\nWorld' é diferente de " + result149 + " <markdown.compute('>>>\nHello\nWorld')>")
chamada antiga: Assertions.assertEquals("\\>>>\nHello > World", markdown.compute(">>>\nHello > World"))
nova chamada: assertEquals("\\>>>\nHello > World", markdown.compute(">>>\nHello > World"), "Era esperado valores iguais, mas  '\\\nHello  World' é diferente de " + result150 + " <markdown.compute('>>>\nHello > World')>")
chamada antiga: Assertions.assertEquals("\\> \\_Hello \n\\> World\\_", markdown.compute("> _Hello \n> World_"))
nova chamada: assertEquals("\\> \\_Hello \n\\> World\\_", markdown.compute("> _Hello \n> World_"), "Era esperado valores iguais, mas  '\\ \\_Hello \n\\ World\\_' é diferente de " + result151 + " <markdown.compute('> _Hello \n> World_')>")
chamada antiga: Assertions.assertEquals("Hello\\*World", MarkdownSanitizer.escape("Hello*World", true))
nova chamada: assertEquals("Hello\\*World", MarkdownSanitizer.escape("Hello*World", true), "Era esperado valores iguais, mas  'Hello\\*World' é diferente de " + result152 + " <MarkdownSanitizer.escape('Hello*World', true)>")
chamada antiga: Assertions.assertEquals("Hello\\*\\*World", MarkdownSanitizer.escape("Hello**World", true))
nova chamada: assertEquals("Hello\\*\\*World", MarkdownSanitizer.escape("Hello**World", true), "Era esperado valores iguais, mas  'Hello\\*\\*World' é diferente de " + result153 + " <MarkdownSanitizer.escape('Hello**World', true)>")
chamada antiga: Assertions.assertEquals("Hello\\*\\*\\*World", MarkdownSanitizer.escape("Hello***World", true))
nova chamada: assertEquals("Hello\\*\\*\\*World", MarkdownSanitizer.escape("Hello***World", true), "Era esperado valores iguais, mas  'Hello\\*\\*\\*World' é diferente de " + result154 + " <MarkdownSanitizer.escape('Hello***World', true)>")
chamada antiga: Assertions.assertEquals("Hello\\*World", MarkdownSanitizer.escape("Hello\\*World", true))
nova chamada: assertEquals("Hello\\*World", MarkdownSanitizer.escape("Hello\\*World", true), "Era esperado valores iguais, mas  'Hello\\*World' é diferente de " + result155 + " <MarkdownSanitizer.escape('Hello\\*World', true)>")
chamada antiga: Assertions.assertEquals("Hello\\*\\*World", MarkdownSanitizer.escape("Hello\\*\\*World", true))
nova chamada: assertEquals("Hello\\*\\*World", MarkdownSanitizer.escape("Hello\\*\\*World", true), "Era esperado valores iguais, mas  'Hello\\*\\*World' é diferente de " + result156 + " <MarkdownSanitizer.escape('Hello\\*\\*World', true)>")
chamada antiga: Assertions.assertEquals("Hello\\*\\*\\*World", MarkdownSanitizer.escape("Hello\\*\\*\\*World", true))
nova chamada: assertEquals("Hello\\*\\*\\*World", MarkdownSanitizer.escape("Hello\\*\\*\\*World", true), "Era esperado valores iguais, mas  'Hello\\*\\*\\*World' é diferente de " + result157 + " <MarkdownSanitizer.escape('Hello\\*\\*\\*World', true)>")
chamada antiga: Assertions.assertEquals("Hello\\_World", MarkdownSanitizer.escape("Hello_World", true))
nova chamada: assertEquals("Hello\\_World", MarkdownSanitizer.escape("Hello_World", true), "Era esperado valores iguais, mas  'Hello\\_World' é diferente de " + result158 + " <MarkdownSanitizer.escape('Hello_World', true)>")
chamada antiga: Assertions.assertEquals("Hello\\_\\_World", MarkdownSanitizer.escape("Hello__World", true))
nova chamada: assertEquals("Hello\\_\\_World", MarkdownSanitizer.escape("Hello__World", true), "Era esperado valores iguais, mas  'Hello\\_\\_World' é diferente de " + result159 + " <MarkdownSanitizer.escape('Hello__World', true)>")
chamada antiga: Assertions.assertEquals("Hello\\_\\_\\_World", MarkdownSanitizer.escape("Hello___World", true))
nova chamada: assertEquals("Hello\\_\\_\\_World", MarkdownSanitizer.escape("Hello___World", true), "Era esperado valores iguais, mas  'Hello\\_\\_\\_World' é diferente de " + result160 + " <MarkdownSanitizer.escape('Hello___World', true)>")
chamada antiga: Assertions.assertEquals("Hello\\_World", MarkdownSanitizer.escape("Hello\\_World", true))
nova chamada: assertEquals("Hello\\_World", MarkdownSanitizer.escape("Hello\\_World", true), "Era esperado valores iguais, mas  'Hello\\_World' é diferente de " + result161 + " <MarkdownSanitizer.escape('Hello\\_World', true)>")
chamada antiga: Assertions.assertEquals("Hello\\_\\_World", MarkdownSanitizer.escape("Hello\\_\\_World", true))
nova chamada: assertEquals("Hello\\_\\_World", MarkdownSanitizer.escape("Hello\\_\\_World", true), "Era esperado valores iguais, mas  'Hello\\_\\_World' é diferente de " + result162 + " <MarkdownSanitizer.escape('Hello\\_\\_World', true)>")
chamada antiga: Assertions.assertEquals("Hello\\_\\_\\_World", MarkdownSanitizer.escape("Hello\\_\\_\\_World", true))
nova chamada: assertEquals("Hello\\_\\_\\_World", MarkdownSanitizer.escape("Hello\\_\\_\\_World", true), "Era esperado valores iguais, mas  'Hello\\_\\_\\_World' é diferente de " + result163 + " <MarkdownSanitizer.escape('Hello\\_\\_\\_World', true)>")
chamada antiga: Assertions.assertEquals("Hello\\`World", MarkdownSanitizer.escape("Hello`World", true))
nova chamada: assertEquals("Hello\\`World", MarkdownSanitizer.escape("Hello`World", true), "Era esperado valores iguais, mas  'Hello\\`World' é diferente de " + result164 + " <MarkdownSanitizer.escape('Hello`World', true)>")
chamada antiga: Assertions.assertEquals("Hello\\`\\`World", MarkdownSanitizer.escape("Hello``World", true))
nova chamada: assertEquals("Hello\\`\\`World", MarkdownSanitizer.escape("Hello``World", true), "Era esperado valores iguais, mas  'Hello\\`\\`World' é diferente de " + result165 + " <MarkdownSanitizer.escape('Hello``World', true)>")
chamada antiga: Assertions.assertEquals("Hello\\`\\`\\`World", MarkdownSanitizer.escape("Hello```World", true))
nova chamada: assertEquals("Hello\\`\\`\\`World", MarkdownSanitizer.escape("Hello```World", true), "Era esperado valores iguais, mas  'Hello\\`\\`\\`World' é diferente de " + result166 + " <MarkdownSanitizer.escape('Hello```World', true)>")
chamada antiga: Assertions.assertEquals("Hello\\`World", MarkdownSanitizer.escape("Hello\\`World", true))
nova chamada: assertEquals("Hello\\`World", MarkdownSanitizer.escape("Hello\\`World", true), "Era esperado valores iguais, mas  'Hello\\`World' é diferente de " + result167 + " <MarkdownSanitizer.escape('Hello\\`World', true)>")
chamada antiga: Assertions.assertEquals("Hello\\`\\`World", MarkdownSanitizer.escape("Hello\\`\\`World", true))
nova chamada: assertEquals("Hello\\`\\`World", MarkdownSanitizer.escape("Hello\\`\\`World", true), "Era esperado valores iguais, mas  'Hello\\`\\`World' é diferente de " + result168 + " <MarkdownSanitizer.escape('Hello\\`\\`World', true)>")
chamada antiga: Assertions.assertEquals("Hello\\`\\`\\`World", MarkdownSanitizer.escape("Hello\\`\\`\\`World", true))
nova chamada: assertEquals("Hello\\`\\`\\`World", MarkdownSanitizer.escape("Hello\\`\\`\\`World", true), "Era esperado valores iguais, mas  'Hello\\`\\`\\`World' é diferente de " + result169 + " <MarkdownSanitizer.escape('Hello\\`\\`\\`World', true)>")
chamada antiga: Assertions.assertEquals("Hello\\|\\|World", MarkdownSanitizer.escape("Hello||World", true))
nova chamada: assertEquals("Hello\\|\\|World", MarkdownSanitizer.escape("Hello||World", true), "Era esperado valores iguais, mas  'Hello\\|\\|World' é diferente de " + result170 + " <MarkdownSanitizer.escape('Hello||World', true)>")
chamada antiga: Assertions.assertEquals("Hello|World", MarkdownSanitizer.escape("Hello|World", true))
nova chamada: assertEquals("Hello|World", MarkdownSanitizer.escape("Hello|World", true), "Era esperado valores iguais, mas  'Hello|World' é diferente de " + result171 + " <MarkdownSanitizer.escape('Hello|World', true)>")
chamada antiga: Assertions.assertEquals("Hello\\|\\|World", MarkdownSanitizer.escape("Hello\\|\\|World", true))
nova chamada: assertEquals("Hello\\|\\|World", MarkdownSanitizer.escape("Hello\\|\\|World", true), "Era esperado valores iguais, mas  'Hello\\|\\|World' é diferente de " + result172 + " <MarkdownSanitizer.escape('Hello\\|\\|World', true)>")
chamada antiga: Assertions.assertEquals("Hello\\|World", MarkdownSanitizer.escape("Hello\\|World", true))
nova chamada: assertEquals("Hello\\|World", MarkdownSanitizer.escape("Hello\\|World", true), "Era esperado valores iguais, mas  'Hello\\|World' é diferente de " + result173 + " <MarkdownSanitizer.escape('Hello\\|World', true)>")
chamada antiga: Assertions.assertEquals("Hello\\~\\~World", MarkdownSanitizer.escape("Hello~~World", true))
nova chamada: assertEquals("Hello\\~\\~World", MarkdownSanitizer.escape("Hello~~World", true), "Era esperado valores iguais, mas  'Hello\\~\\~World' é diferente de " + result174 + " <MarkdownSanitizer.escape('Hello~~World', true)>")
chamada antiga: Assertions.assertEquals("Hello\\~\\~World", MarkdownSanitizer.escape("Hello\\~\\~World", true))
nova chamada: assertEquals("Hello\\~\\~World", MarkdownSanitizer.escape("Hello\\~\\~World", true), "Era esperado valores iguais, mas  'Hello\\~\\~World' é diferente de " + result175 + " <MarkdownSanitizer.escape('Hello\\~\\~World', true)>")
chamada antiga: Assertions.assertEquals("\\> Hello World", MarkdownSanitizer.escape("> Hello World", true))
nova chamada: assertEquals("\\> Hello World", MarkdownSanitizer.escape("> Hello World", true), "Era esperado valores iguais, mas  '\\ Hello World' é diferente de " + result176 + " <MarkdownSanitizer.escape('> Hello World', true)>")
chamada antiga: Assertions.assertEquals(">Hello World", MarkdownSanitizer.escape(">Hello World", true))
nova chamada: assertEquals(">Hello World", MarkdownSanitizer.escape(">Hello World", true), "Era esperado valores iguais, mas  'Hello World' é diferente de " + result177 + " <MarkdownSanitizer.escape('>Hello World', true)>")
chamada antiga: Assertions.assertEquals("\\>\\>\\> Hello World", MarkdownSanitizer.escape(">>> Hello World", true))
nova chamada: assertEquals("\\>\\>\\> Hello World", MarkdownSanitizer.escape(">>> Hello World", true), "Era esperado valores iguais, mas  '\\\\\\ Hello World' é diferente de " + result178 + " <MarkdownSanitizer.escape('>>> Hello World', true)>")
chamada antiga: Assertions.assertEquals(">>>Hello World", MarkdownSanitizer.escape(">>>Hello World", true))
nova chamada: assertEquals(">>>Hello World", MarkdownSanitizer.escape(">>>Hello World", true), "Era esperado valores iguais, mas  'Hello World' é diferente de " + result179 + " <MarkdownSanitizer.escape('>>>Hello World', true)>")
chamada antiga: Assertions.assertEquals("\\>\\>\\> Hello > World\n\\> Hello >>> World\n<@12345> > Hello\n \\> Hello world", MarkdownSanitizer.escape(">>> Hello > World\n> Hello >>> World\n<@12345> > Hello\n > Hello world", true))
nova chamada: assertEquals("\\>\\>\\> Hello > World\n\\> Hello >>> World\n<@12345> > Hello\n \\> Hello world", MarkdownSanitizer.escape(">>> Hello > World\n> Hello >>> World\n<@12345> > Hello\n > Hello world", true), "Era esperado valores iguais, mas  '\\\\\\ Hello  World\n\\ Hello  World\n@12345  Hello\n \\ Hello world' é diferente de " + result180 + " <MarkdownSanitizer.escape('>>> Hello > World\n> Hello >>> World\n<@12345> > Hello\n > Hello world', true)>")
chamada antiga: Assertions.assertEquals("\\> Hello World", MarkdownSanitizer.escape("\\> Hello World", true))
nova chamada: assertEquals("\\> Hello World", MarkdownSanitizer.escape("\\> Hello World", true), "Era esperado valores iguais, mas  '\\ Hello World' é diferente de " + result181 + " <MarkdownSanitizer.escape('\\> Hello World', true)>")
chamada antiga: Assertions.assertEquals("\\>\\>\\> Hello World", MarkdownSanitizer.escape("\\>\\>\\> Hello World", true))
nova chamada: assertEquals("\\>\\>\\> Hello World", MarkdownSanitizer.escape("\\>\\>\\> Hello World", true), "Era esperado valores iguais, mas  '\\\\\\ Hello World' é diferente de " + result182 + " <MarkdownSanitizer.escape('\\>\\>\\> Hello World', true)>")
chamada antiga: Assertions.assertEquals("Hello > World", MarkdownSanitizer.escape("Hello > World"))
nova chamada: assertEquals("Hello > World", MarkdownSanitizer.escape("Hello > World"), "Era esperado valores iguais, mas  'Hello  World' é diferente de " + result183 + " <MarkdownSanitizer.escape('Hello > World')>")
chamada antiga: Assertions.assertEquals(3, Helpers.countMatches("Hello World", 'l'))
nova chamada: assertEquals(3, Helpers.countMatches("Hello World", 'l'), "Era esperado valores iguais, mas  3 é diferente de " + result184 + " <Helpers.countMatches('Hello World', 'l')>")
chamada antiga: Assertions.assertEquals(1, Helpers.countMatches("Hello World", ' '))
nova chamada: assertEquals(1, Helpers.countMatches("Hello World", ' '), "Era esperado valores iguais, mas  1 é diferente de " + result185 + " <Helpers.countMatches('Hello World', ' ')>")
chamada antiga: Assertions.assertEquals(0, Helpers.countMatches("Hello World", '_'))
nova chamada: assertEquals(0, Helpers.countMatches("Hello World", '_'), "Era esperado valores iguais, mas  0 é diferente de " + result186 + " <Helpers.countMatches('Hello World', '_')>")
chamada antiga: Assertions.assertEquals(0, Helpers.countMatches("", '!'))
nova chamada: assertEquals(0, Helpers.countMatches("", '!'), "Era esperado valores iguais, mas  0 é diferente de " + result187 + " <Helpers.countMatches('', '!')>")
chamada antiga: Assertions.assertEquals(0, Helpers.countMatches(null, '?'))
nova chamada: assertEquals(0, Helpers.countMatches(null, '?'), "Era esperado valores iguais, mas  0 é diferente de " + result188 + " <Helpers.countMatches(null, '?')>")
chamada antiga: Assertions.assertEquals("Hello", Helpers.truncate("Hello World", 5))
nova chamada: assertEquals("Hello", Helpers.truncate("Hello World", 5), "Era esperado valores iguais, mas  'Hello' é diferente de " + result189 + " <Helpers.truncate('Hello World', 5)>")
chamada antiga: Assertions.assertEquals("Hello", Helpers.truncate("Hello", 5))
nova chamada: assertEquals("Hello", Helpers.truncate("Hello", 5), "Era esperado valores iguais, mas  'Hello' é diferente de " + result190 + " <Helpers.truncate('Hello', 5)>")
chamada antiga: Assertions.assertEquals("Hello", Helpers.truncate("Hello", 10))
nova chamada: assertEquals("Hello", Helpers.truncate("Hello", 10), "Era esperado valores iguais, mas  'Hello' é diferente de " + result191 + " <Helpers.truncate('Hello', 10)>")
chamada antiga: Assertions.assertEquals("", Helpers.truncate("", 10))
nova chamada: assertEquals("", Helpers.truncate("", 10), "Era esperado valores iguais, mas  '' é diferente de " + result192 + " <Helpers.truncate('', 10)>")
chamada antiga: Assertions.assertEquals("", Helpers.truncate("Test", 0))
nova chamada: assertEquals("", Helpers.truncate("Test", 0), "Era esperado valores iguais, mas  '' é diferente de " + result193 + " <Helpers.truncate('Test', 0)>")
chamada antiga: Assertions.assertEquals("Hello    ", Helpers.rightPad("Hello", 9))
nova chamada: assertEquals("Hello    ", Helpers.rightPad("Hello", 9), "Era esperado valores iguais, mas  'Hello    ' é diferente de " + result194 + " <Helpers.rightPad('Hello', 9)>")
chamada antiga: Assertions.assertEquals("Hello World", Helpers.rightPad("Hello World", 9))
nova chamada: assertEquals("Hello World", Helpers.rightPad("Hello World", 9), "Era esperado valores iguais, mas  'Hello World' é diferente de " + result195 + " <Helpers.rightPad('Hello World', 9)>")
chamada antiga: Assertions.assertEquals("Hello", Helpers.rightPad("Hello", 5))
nova chamada: assertEquals("Hello", Helpers.rightPad("Hello", 5), "Era esperado valores iguais, mas  'Hello' é diferente de " + result196 + " <Helpers.rightPad('Hello', 5)>")
chamada antiga: Assertions.assertEquals("    Hello", Helpers.leftPad("Hello", 9))
nova chamada: assertEquals("    Hello", Helpers.leftPad("Hello", 9), "Era esperado valores iguais, mas  '    Hello' é diferente de " + result197 + " <Helpers.leftPad('Hello', 9)>")
chamada antiga: Assertions.assertEquals("Hello World", Helpers.leftPad("Hello World", 9))
nova chamada: assertEquals("Hello World", Helpers.leftPad("Hello World", 9), "Era esperado valores iguais, mas  'Hello World' é diferente de " + result198 + " <Helpers.leftPad('Hello World', 9)>")
chamada antiga: Assertions.assertEquals("Hello", Helpers.leftPad("Hello", 5))
nova chamada: assertEquals("Hello", Helpers.leftPad("Hello", 5), "Era esperado valores iguais, mas  'Hello' é diferente de " + result199 + " <Helpers.leftPad('Hello', 5)>")
chamada antiga: Assertions.assertEquals("ban", data.getString("name"))
nova chamada: assertEquals("ban", data.getString("name"), "Era esperado valores iguais, mas  'ban' é diferente de " + result200 + " <data.getString('name')>")
chamada antiga: Assertions.assertEquals("Ban a user from this server", data.getString("description"))
nova chamada: assertEquals("Ban a user from this server", data.getString("description"), "Era esperado valores iguais, mas  'Ban a user from this server' é diferente de " + result201 + " <data.getString('description')>")
chamada antiga: Assertions.assertEquals(Permission.BAN_MEMBERS.getRawValue(), data.getUnsignedLong("default_member_permissions"))
nova chamada: assertEquals(Permission.BAN_MEMBERS.getRawValue(), data.getUnsignedLong("default_member_permissions"), "Era esperado valores iguais, mas " + result202 + " <Permission.BAN_MEMBERS.getRawValue()> é diferente de " + result203 + " <data.getUnsignedLong('default_member_permissions')>")
chamada antiga: Assertions.assertEquals("user", option.getString("name"))
nova chamada: assertEquals("user", option.getString("name"), "Era esperado valores iguais, mas  'user' é diferente de " + result204 + " <option.getString('name')>")
chamada antiga: Assertions.assertEquals("The user to ban", option.getString("description"))
nova chamada: assertEquals("The user to ban", option.getString("description"), "Era esperado valores iguais, mas  'The user to ban' é diferente de " + result205 + " <option.getString('description')>")
chamada antiga: Assertions.assertEquals("reason", option.getString("name"))
nova chamada: assertEquals("reason", option.getString("name"), "Era esperado valores iguais, mas  'reason' é diferente de " + result206 + " <option.getString('name')>")
chamada antiga: Assertions.assertEquals("The ban reason", option.getString("description"))
nova chamada: assertEquals("The ban reason", option.getString("description"), "Era esperado valores iguais, mas  'The ban reason' é diferente de " + result207 + " <option.getString('description')>")
chamada antiga: Assertions.assertEquals("days", option.getString("name"))
nova chamada: assertEquals("days", option.getString("name"), "Era esperado valores iguais, mas  'days' é diferente de " + result208 + " <option.getString('name')>")
chamada antiga: Assertions.assertEquals("The duration of the ban", option.getString("description"))
nova chamada: assertEquals("The duration of the ban", option.getString("description"), "Era esperado valores iguais, mas  'The duration of the ban' é diferente de " + result209 + " <option.getString('description')>")
chamada antiga: Assertions.assertEquals(0, data.getUnsignedLong("default_member_permissions"))
nova chamada: assertEquals(0, data.getUnsignedLong("default_member_permissions"), "Era esperado valores iguais, mas  0 é diferente de " + result210 + " <data.getUnsignedLong('default_member_permissions')>")
chamada antiga: Assertions.assertEquals("mod", data.getString("name"))
nova chamada: assertEquals("mod", data.getString("name"), "Era esperado valores iguais, mas  'mod' é diferente de " + result211 + " <data.getString('name')>")
chamada antiga: Assertions.assertEquals("Moderation commands", data.getString("description"))
nova chamada: assertEquals("Moderation commands", data.getString("description"), "Era esperado valores iguais, mas  'Moderation commands' é diferente de " + result212 + " <data.getString('description')>")
chamada antiga: Assertions.assertEquals("ban", subdata.getString("name"))
nova chamada: assertEquals("ban", subdata.getString("name"), "Era esperado valores iguais, mas  'ban' é diferente de " + result213 + " <subdata.getString('name')>")
chamada antiga: Assertions.assertEquals("Ban a user from this server", subdata.getString("description"))
nova chamada: assertEquals("Ban a user from this server", subdata.getString("description"), "Era esperado valores iguais, mas  'Ban a user from this server' é diferente de " + result214 + " <subdata.getString('description')>")
chamada antiga: Assertions.assertEquals("user", option.getString("name"))
nova chamada: assertEquals("user", option.getString("name"), "Era esperado valores iguais, mas  'user' é diferente de " + result215 + " <option.getString('name')>")
chamada antiga: Assertions.assertEquals("The user to ban", option.getString("description"))
nova chamada: assertEquals("The user to ban", option.getString("description"), "Era esperado valores iguais, mas  'The user to ban' é diferente de " + result216 + " <option.getString('description')>")
chamada antiga: Assertions.assertEquals("reason", option.getString("name"))
nova chamada: assertEquals("reason", option.getString("name"), "Era esperado valores iguais, mas  'reason' é diferente de " + result217 + " <option.getString('name')>")
chamada antiga: Assertions.assertEquals("The ban reason", option.getString("description"))
nova chamada: assertEquals("The ban reason", option.getString("description"), "Era esperado valores iguais, mas  'The ban reason' é diferente de " + result218 + " <option.getString('description')>")
chamada antiga: Assertions.assertEquals("days", option.getString("name"))
nova chamada: assertEquals("days", option.getString("name"), "Era esperado valores iguais, mas  'days' é diferente de " + result219 + " <option.getString('name')>")
chamada antiga: Assertions.assertEquals("The duration of the ban", option.getString("description"))
nova chamada: assertEquals("The duration of the ban", option.getString("description"), "Era esperado valores iguais, mas  'The duration of the ban' é diferente de " + result220 + " <option.getString('description')>")
chamada antiga: Assertions.assertEquals("mod", data.getString("name"))
nova chamada: assertEquals("mod", data.getString("name"), "Era esperado valores iguais, mas  'mod' é diferente de " + result221 + " <data.getString('name')>")
chamada antiga: Assertions.assertEquals("Moderation commands", data.getString("description"))
nova chamada: assertEquals("Moderation commands", data.getString("description"), "Era esperado valores iguais, mas  'Moderation commands' é diferente de " + result222 + " <data.getString('description')>")
chamada antiga: Assertions.assertEquals("ban", group.getString("name"))
nova chamada: assertEquals("ban", group.getString("name"), "Era esperado valores iguais, mas  'ban' é diferente de " + result223 + " <group.getString('name')>")
chamada antiga: Assertions.assertEquals("Ban or unban a user from this server", group.getString("description"))
nova chamada: assertEquals("Ban or unban a user from this server", group.getString("description"), "Era esperado valores iguais, mas  'Ban or unban a user from this server' é diferente de " + result224 + " <group.getString('description')>")
chamada antiga: Assertions.assertEquals("add", subdata.getString("name"))
nova chamada: assertEquals("add", subdata.getString("name"), "Era esperado valores iguais, mas  'add' é diferente de " + result225 + " <subdata.getString('name')>")
chamada antiga: Assertions.assertEquals("Ban a user from this server", subdata.getString("description"))
nova chamada: assertEquals("Ban a user from this server", subdata.getString("description"), "Era esperado valores iguais, mas  'Ban a user from this server' é diferente de " + result226 + " <subdata.getString('description')>")
chamada antiga: Assertions.assertEquals("user", option.getString("name"))
nova chamada: assertEquals("user", option.getString("name"), "Era esperado valores iguais, mas  'user' é diferente de " + result227 + " <option.getString('name')>")
chamada antiga: Assertions.assertEquals("The user to ban", option.getString("description"))
nova chamada: assertEquals("The user to ban", option.getString("description"), "Era esperado valores iguais, mas  'The user to ban' é diferente de " + result228 + " <option.getString('description')>")
chamada antiga: Assertions.assertEquals("reason", option.getString("name"))
nova chamada: assertEquals("reason", option.getString("name"), "Era esperado valores iguais, mas  'reason' é diferente de " + result229 + " <option.getString('name')>")
chamada antiga: Assertions.assertEquals("The ban reason", option.getString("description"))
nova chamada: assertEquals("The ban reason", option.getString("description"), "Era esperado valores iguais, mas  'The ban reason' é diferente de " + result230 + " <option.getString('description')>")
chamada antiga: Assertions.assertEquals("days", option.getString("name"))
nova chamada: assertEquals("days", option.getString("name"), "Era esperado valores iguais, mas  'days' é diferente de " + result231 + " <option.getString('name')>")
chamada antiga: Assertions.assertEquals("The duration of the ban", option.getString("description"))
nova chamada: assertEquals("The duration of the ban", option.getString("description"), "Era esperado valores iguais, mas  'The duration of the ban' é diferente de " + result232 + " <option.getString('description')>")
chamada antiga: Assertions.assertEquals(25, option.getChoices().size())
nova chamada: assertEquals(25, option.getChoices().size(), "Era esperado valores iguais, mas  25 é diferente de " + result233 + " <option.getChoices().size()>")
chamada antiga: Assertions.assertEquals(choices, option.getChoices())
nova chamada: assertEquals(choices, option.getChoices(), "Era esperado valores iguais, mas  choices é diferente de " + result234 + " <option.getChoices()>")
chamada antiga: Assertions.assertEquals("**Hello World**", bold("Hello World"))
nova chamada: assertEquals("**Hello World**", bold("Hello World"), "Era esperado valores iguais, mas  '**Hello World**' é diferente de " + result235 + " <bold('Hello World')>")
chamada antiga: Assertions.assertEquals("**Hello \\*\\*Test\\*\\* World**", bold("Hello **Test** World"))
nova chamada: assertEquals("**Hello \\*\\*Test\\*\\* World**", bold("Hello **Test** World"), "Era esperado valores iguais, mas  '**Hello \\*\\*Test\\*\\* World**' é diferente de " + result236 + " <bold('Hello **Test** World')>")
chamada antiga: Assertions.assertEquals("**Hello *Test* World**", bold("Hello *Test* World"))
nova chamada: assertEquals("**Hello *Test* World**", bold("Hello *Test* World"), "Era esperado valores iguais, mas  '**Hello *Test* World**' é diferente de " + result237 + " <bold('Hello *Test* World')>")
chamada antiga: Assertions.assertEquals("_Hello World_", italics("Hello World"))
nova chamada: assertEquals("_Hello World_", italics("Hello World"), "Era esperado valores iguais, mas  '_Hello World_' é diferente de " + result238 + " <italics('Hello World')>")
chamada antiga: Assertions.assertEquals("_Hello \\_Test\\_ World_", italics("Hello _Test_ World"))
nova chamada: assertEquals("_Hello \\_Test\\_ World_", italics("Hello _Test_ World"), "Era esperado valores iguais, mas  '_Hello \\_Test\\_ World_' é diferente de " + result239 + " <italics('Hello _Test_ World')>")
chamada antiga: Assertions.assertEquals("_Hello __Test__ World_", italics("Hello __Test__ World"))
nova chamada: assertEquals("_Hello __Test__ World_", italics("Hello __Test__ World"), "Era esperado valores iguais, mas  '_Hello __Test__ World_' é diferente de " + result240 + " <italics('Hello __Test__ World')>")
chamada antiga: Assertions.assertEquals("__Hello World__", underline("Hello World"))
nova chamada: assertEquals("__Hello World__", underline("Hello World"), "Era esperado valores iguais, mas  '__Hello World__' é diferente de " + result241 + " <underline('Hello World')>")
chamada antiga: Assertions.assertEquals("__Hello \\_\\_Test\\_\\_ World__", underline("Hello __Test__ World"))
nova chamada: assertEquals("__Hello \\_\\_Test\\_\\_ World__", underline("Hello __Test__ World"), "Era esperado valores iguais, mas  '__Hello \\_\\_Test\\_\\_ World__' é diferente de " + result242 + " <underline('Hello __Test__ World')>")
chamada antiga: Assertions.assertEquals("__Hello _Test_ World__", underline("Hello _Test_ World"))
nova chamada: assertEquals("__Hello _Test_ World__", underline("Hello _Test_ World"), "Era esperado valores iguais, mas  '__Hello _Test_ World__' é diferente de " + result243 + " <underline('Hello _Test_ World')>")
chamada antiga: Assertions.assertEquals("`Hello World`", monospace("Hello World"))
nova chamada: assertEquals("`Hello World`", monospace("Hello World"), "Era esperado valores iguais, mas  '`Hello World`' é diferente de " + result244 + " <monospace('Hello World')>")
chamada antiga: Assertions.assertEquals("`Hello \\`Test\\` World`", monospace("Hello `Test` World"))
nova chamada: assertEquals("`Hello \\`Test\\` World`", monospace("Hello `Test` World"), "Era esperado valores iguais, mas  '`Hello \\`Test\\` World`' é diferente de " + result245 + " <monospace('Hello `Test` World')>")
chamada antiga: Assertions.assertEquals("`Hello ``Test`` World`", monospace("Hello ``Test`` World"))
nova chamada: assertEquals("`Hello ``Test`` World`", monospace("Hello ``Test`` World"), "Era esperado valores iguais, mas  '`Hello ``Test`` World`' é diferente de " + result246 + " <monospace('Hello ``Test`` World')>")
chamada antiga: Assertions.assertEquals("```java\nHello World```", codeblock("java", "Hello World"))
nova chamada: assertEquals("```java\nHello World```", codeblock("java", "Hello World"), "Era esperado valores iguais, mas  '```java\nHello World```' é diferente de " + result247 + " <codeblock('java', 'Hello World')>")
chamada antiga: Assertions.assertEquals("```java\nHello \\```java\nTest\\``` World```", codeblock("java", "Hello ```java\nTest``` World"))
nova chamada: assertEquals("```java\nHello \\```java\nTest\\``` World```", codeblock("java", "Hello ```java\nTest``` World"), "Era esperado valores iguais, mas  '```java\nHello \\```java\nTest\\``` World```' é diferente de " + result248 + " <codeblock('java', 'Hello ```java\nTest``` World')>")
chamada antiga: Assertions.assertEquals("```java\nHello `Test` World```", codeblock("java", "Hello `Test` World"))
nova chamada: assertEquals("```java\nHello `Test` World```", codeblock("java", "Hello `Test` World"), "Era esperado valores iguais, mas  '```java\nHello `Test` World```' é diferente de " + result249 + " <codeblock('java', 'Hello `Test` World')>")
chamada antiga: Assertions.assertEquals("```Hello World```", codeblock("Hello World"))
nova chamada: assertEquals("```Hello World```", codeblock("Hello World"), "Era esperado valores iguais, mas  '```Hello World```' é diferente de " + result250 + " <codeblock('Hello World')>")
chamada antiga: Assertions.assertEquals("```Hello \\```java\nTest\\``` World```", codeblock("Hello ```java\nTest``` World"))
nova chamada: assertEquals("```Hello \\```java\nTest\\``` World```", codeblock("Hello ```java\nTest``` World"), "Era esperado valores iguais, mas  '```Hello \\```java\nTest\\``` World```' é diferente de " + result251 + " <codeblock('Hello ```java\nTest``` World')>")
chamada antiga: Assertions.assertEquals("```Hello `Test` World```", codeblock("Hello `Test` World"))
nova chamada: assertEquals("```Hello `Test` World```", codeblock("Hello `Test` World"), "Era esperado valores iguais, mas  '```Hello `Test` World```' é diferente de " + result252 + " <codeblock('Hello `Test` World')>")
chamada antiga: Assertions.assertEquals("||Hello World||", spoiler("Hello World"))
nova chamada: assertEquals("||Hello World||", spoiler("Hello World"), "Era esperado valores iguais, mas  '||Hello World||' é diferente de " + result253 + " <spoiler('Hello World')>")
chamada antiga: Assertions.assertEquals("||Hello \\||Test\\|| World||", spoiler("Hello ||Test|| World"))
nova chamada: assertEquals("||Hello \\||Test\\|| World||", spoiler("Hello ||Test|| World"), "Era esperado valores iguais, mas  '||Hello \\||Test\\|| World||' é diferente de " + result254 + " <spoiler('Hello ||Test|| World')>")
chamada antiga: Assertions.assertEquals("||Hello |Test| World||", spoiler("Hello |Test| World"))
nova chamada: assertEquals("||Hello |Test| World||", spoiler("Hello |Test| World"), "Era esperado valores iguais, mas  '||Hello |Test| World||' é diferente de " + result255 + " <spoiler('Hello |Test| World')>")
chamada antiga: Assertions.assertEquals("~~Hello World~~", strike("Hello World"))
nova chamada: assertEquals("~~Hello World~~", strike("Hello World"), "Era esperado valores iguais, mas  '~~Hello World~~' é diferente de " + result256 + " <strike('Hello World')>")
chamada antiga: Assertions.assertEquals("~~Hello \\~~Test\\~~ World~~", strike("Hello ~~Test~~ World"))
nova chamada: assertEquals("~~Hello \\~~Test\\~~ World~~", strike("Hello ~~Test~~ World"), "Era esperado valores iguais, mas  '~~Hello \\~~Test\\~~ World~~' é diferente de " + result257 + " <strike('Hello ~~Test~~ World')>")
chamada antiga: Assertions.assertEquals("~~Hello ~Test~ World~~", strike("Hello ~Test~ World"))
nova chamada: assertEquals("~~Hello ~Test~ World~~", strike("Hello ~Test~ World"), "Era esperado valores iguais, mas  '~~Hello ~Test~ World~~' é diferente de " + result258 + " <strike('Hello ~Test~ World')>")
chamada antiga: Assertions.assertEquals("> Hello World", quote("Hello World"))
nova chamada: assertEquals("> Hello World", quote("Hello World"), "Era esperado valores iguais, mas  ' Hello World' é diferente de " + result259 + " <quote('Hello World')>")
chamada antiga: Assertions.assertEquals("> Hello \n> \\> Test World", quote("Hello \n> Test World"))
nova chamada: assertEquals("> Hello \n> \\> Test World", quote("Hello \n> Test World"), "Era esperado valores iguais, mas  ' Hello \n \\ Test World' é diferente de " + result260 + " <quote('Hello \n> Test World')>")
chamada antiga: Assertions.assertEquals("> Hello > Test World", quote("Hello > Test World"))
nova chamada: assertEquals("> Hello > Test World", quote("Hello > Test World"), "Era esperado valores iguais, mas  ' Hello  Test World' é diferente de " + result261 + " <quote('Hello > Test World')>")
chamada antiga: Assertions.assertEquals(">>> Hello World", quoteBlock("Hello World"))
nova chamada: assertEquals(">>> Hello World", quoteBlock("Hello World"), "Era esperado valores iguais, mas  ' Hello World' é diferente de " + result262 + " <quoteBlock('Hello World')>")
chamada antiga: Assertions.assertEquals(">>> Hello \n>>> Test World", quoteBlock("Hello \n>>> Test World"))
nova chamada: assertEquals(">>> Hello \n>>> Test World", quoteBlock("Hello \n>>> Test World"), "Era esperado valores iguais, mas  ' Hello \n Test World' é diferente de " + result263 + " <quoteBlock('Hello \n>>> Test World')>")
chamada antiga: Assertions.assertEquals("[Hello](World)", maskedLink("Hello", "World"))
nova chamada: assertEquals("[Hello](World)", maskedLink("Hello", "World"), "Era esperado valores iguais, mas  '[Hello](World)' é diferente de " + result264 + " <maskedLink('Hello', 'World')>")
chamada antiga: Assertions.assertEquals("[Hello](World%29)", maskedLink("Hello", "World)"))
nova chamada: assertEquals("[Hello](World%29)", maskedLink("Hello", "World)"), "Era esperado valores iguais, mas  '[Hello](World%29)' é diferente de " + result265 + " <maskedLink('Hello', 'World)')>")
chamada antiga: Assertions.assertEquals("[Hello\\]](World%29)", maskedLink("Hello]", "World)"))
nova chamada: assertEquals("[Hello\\]](World%29)", maskedLink("Hello]", "World)"), "Era esperado valores iguais, mas  '[Hello\\]](World%29)' é diferente de " + result266 + " <maskedLink('Hello]', 'World)')>")
chamada antiga: assertEquals("AnEntity", new EntityString(new AnEntity()).toString())
nova chamada: assertEquals("AnEntity", new EntityString(new AnEntity()).toString(), "Era esperado valores iguais, mas  'AnEntity' é diferente de " + result267 + " <new EntityString(new AnEntity()).toString()>")
chamada antiga: assertEquals("AnEntity:AName", new EntityString(new AnEntity()).setName("AName").toString())
nova chamada: assertEquals("AnEntity:AName", new EntityString(new AnEntity()).setName("AName").toString(), "Era esperado valores iguais, mas  'AnEntity:AName' é diferente de " + result268 + " <new EntityString(new AnEntity()).setName('AName').toString()>")
chamada antiga: assertEquals("NotAnEntity", new EntityString("NotAnEntity").toString())
nova chamada: assertEquals("NotAnEntity", new EntityString("NotAnEntity").toString(), "Era esperado valores iguais, mas  'NotAnEntity' é diferente de " + result269 + " <new EntityString('NotAnEntity').toString()>")
chamada antiga: assertEquals("NotAnEntity:AName", new EntityString("NotAnEntity").setName("AName").toString())
nova chamada: assertEquals("NotAnEntity:AName", new EntityString("NotAnEntity").setName("AName").toString(), "Era esperado valores iguais, mas  'NotAnEntity:AName' é diferente de " + result270 + " <new EntityString('NotAnEntity').setName('AName').toString()>")
chamada antiga: assertEquals("AnEntity[AType]", new EntityString(new AnEntity()).setType("AType").toString())
nova chamada: assertEquals("AnEntity[AType]", new EntityString(new AnEntity()).setType("AType").toString(), "Era esperado valores iguais, mas  'AnEntity[AType]' é diferente de " + result271 + " <new EntityString(new AnEntity()).setType('AType').toString()>")
chamada antiga: assertEquals("AnEntity[AType]:AName", new EntityString(new AnEntity()).setType("AType").setName("AName").toString())
nova chamada: assertEquals("AnEntity[AType]:AName", new EntityString(new AnEntity()).setType("AType").setName("AName").toString(), "Era esperado valores iguais, mas  'AnEntity[AType]:AName' é diferente de " + result272 + " <new EntityString(new AnEntity()).setType('AType').setName('AName').toString()>")
chamada antiga: assertEquals("AnEntity[NEWS]:AName", new EntityString(new AnEntity()).setType(ChannelType.NEWS).setName("AName").toString())
nova chamada: assertEquals("AnEntity[NEWS]:AName", new EntityString(new AnEntity()).setType(ChannelType.NEWS).setName("AName").toString(), "Era esperado valores iguais, mas  'AnEntity[NEWS]:AName' é diferente de " + result273 + " <new EntityString(new AnEntity()).setType(ChannelType.NEWS).setName('AName').toString()>")
chamada antiga: assertEquals("AnEntity(Metadata1)", new EntityString(new AnEntity()).addMetadata(null, "Metadata1").toString())
nova chamada: assertEquals("AnEntity(Metadata1)", new EntityString(new AnEntity()).addMetadata(null, "Metadata1").toString(), "Era esperado valores iguais, mas  'AnEntity(Metadata1)' é diferente de " + result274 + " <new EntityString(new AnEntity()).addMetadata(null, 'Metadata1').toString()>")
chamada antiga: assertEquals("AnEntity(MetaKey=Metadata1)", new EntityString(new AnEntity()).addMetadata("MetaKey", "Metadata1").toString())
nova chamada: assertEquals("AnEntity(MetaKey=Metadata1)", new EntityString(new AnEntity()).addMetadata("MetaKey", "Metadata1").toString(), "Era esperado valores iguais, mas  'AnEntity(MetaKey=Metadata1)' é diferente de " + result275 + " <new EntityString(new AnEntity()).addMetadata('MetaKey', 'Metadata1').toString()>")
chamada antiga: assertEquals("AnEntity(MetaKey=42)", new EntityString(new AnEntity()).addMetadata("MetaKey", 42).toString())
nova chamada: assertEquals("AnEntity(MetaKey=42)", new EntityString(new AnEntity()).addMetadata("MetaKey", 42).toString(), "Era esperado valores iguais, mas  'AnEntity(MetaKey=42)' é diferente de " + result276 + " <new EntityString(new AnEntity()).addMetadata('MetaKey', 42).toString()>")
chamada antiga: assertEquals("AnEntity(MetaKey1=Metadata1, MetaKey2=Metadata2)", new EntityString(new AnEntity()).addMetadata("MetaKey1", "Metadata1").addMetadata("MetaKey2", "Metadata2").toString())
nova chamada: assertEquals("AnEntity(MetaKey1=Metadata1, MetaKey2=Metadata2)", new EntityString(new AnEntity()).addMetadata("MetaKey1", "Metadata1").addMetadata("MetaKey2", "Metadata2").toString(), "Era esperado valores iguais, mas  'AnEntity(MetaKey1=Metadata1, MetaKey2=Metadata2)' é diferente de " + result277 + " <new EntityString(new AnEntity()).addMetadata('MetaKey1', 'Metadata1').addMetadata('MetaKey2', 'Metadata2').toString()>")
chamada antiga: assertEquals("AnEntity:AName(Metadata1)", new EntityString(new AnEntity()).setName("AName").addMetadata(null, "Metadata1").toString())
nova chamada: assertEquals("AnEntity:AName(Metadata1)", new EntityString(new AnEntity()).setName("AName").addMetadata(null, "Metadata1").toString(), "Era esperado valores iguais, mas  'AnEntity:AName(Metadata1)' é diferente de " + result278 + " <new EntityString(new AnEntity()).setName('AName').addMetadata(null, 'Metadata1').toString()>")
chamada antiga: assertEquals("AnEntity:AName(MetaKey=Metadata1)", new EntityString(new AnEntity()).setName("AName").addMetadata("MetaKey", "Metadata1").toString())
nova chamada: assertEquals("AnEntity:AName(MetaKey=Metadata1)", new EntityString(new AnEntity()).setName("AName").addMetadata("MetaKey", "Metadata1").toString(), "Era esperado valores iguais, mas  'AnEntity:AName(MetaKey=Metadata1)' é diferente de " + result279 + " <new EntityString(new AnEntity()).setName('AName').addMetadata('MetaKey', 'Metadata1').toString()>")
chamada antiga: assertEquals("AnEntity:AName(MetaKey=42)", new EntityString(new AnEntity()).setName("AName").addMetadata("MetaKey", 42).toString())
nova chamada: assertEquals("AnEntity:AName(MetaKey=42)", new EntityString(new AnEntity()).setName("AName").addMetadata("MetaKey", 42).toString(), "Era esperado valores iguais, mas  'AnEntity:AName(MetaKey=42)' é diferente de " + result280 + " <new EntityString(new AnEntity()).setName('AName').addMetadata('MetaKey', 42).toString()>")
chamada antiga: assertEquals("AnEntity:AName(MetaKey1=Metadata1, MetaKey2=Metadata2)", new EntityString(new AnEntity()).setName("AName").addMetadata("MetaKey1", "Metadata1").addMetadata("MetaKey2", "Metadata2").toString())
nova chamada: assertEquals("AnEntity:AName(MetaKey1=Metadata1, MetaKey2=Metadata2)", new EntityString(new AnEntity()).setName("AName").addMetadata("MetaKey1", "Metadata1").addMetadata("MetaKey2", "Metadata2").toString(), "Era esperado valores iguais, mas  'AnEntity:AName(MetaKey1=Metadata1, MetaKey2=Metadata2)' é diferente de " + result281 + " <new EntityString(new AnEntity()).setName('AName').addMetadata('MetaKey1', 'Metadata1').addMetadata('MetaKey2', 'Metadata2').toString()>")
chamada antiga: assertEquals("AnEntity[Type]:AName(Metadata1)", new EntityString(new AnEntity()).setName("AName").setType("Type").addMetadata(null, "Metadata1").toString())
nova chamada: assertEquals("AnEntity[Type]:AName(Metadata1)", new EntityString(new AnEntity()).setName("AName").setType("Type").addMetadata(null, "Metadata1").toString(), "Era esperado valores iguais, mas  'AnEntity[Type]:AName(Metadata1)' é diferente de " + result282 + " <new EntityString(new AnEntity()).setName('AName').setType('Type').addMetadata(null, 'Metadata1').toString()>")
chamada antiga: assertEquals("AnEntity[Type]:AName(MetaKey=Metadata1)", new EntityString(new AnEntity()).setName("AName").setType("Type").addMetadata("MetaKey", "Metadata1").toString())
nova chamada: assertEquals("AnEntity[Type]:AName(MetaKey=Metadata1)", new EntityString(new AnEntity()).setName("AName").setType("Type").addMetadata("MetaKey", "Metadata1").toString(), "Era esperado valores iguais, mas  'AnEntity[Type]:AName(MetaKey=Metadata1)' é diferente de " + result283 + " <new EntityString(new AnEntity()).setName('AName').setType('Type').addMetadata('MetaKey', 'Metadata1').toString()>")
chamada antiga: assertEquals("AnEntity[Type]:AName(MetaKey=42)", new EntityString(new AnEntity()).setName("AName").setType("Type").addMetadata("MetaKey", 42).toString())
nova chamada: assertEquals("AnEntity[Type]:AName(MetaKey=42)", new EntityString(new AnEntity()).setName("AName").setType("Type").addMetadata("MetaKey", 42).toString(), "Era esperado valores iguais, mas  'AnEntity[Type]:AName(MetaKey=42)' é diferente de " + result284 + " <new EntityString(new AnEntity()).setName('AName').setType('Type').addMetadata('MetaKey', 42).toString()>")
chamada antiga: assertEquals("AnEntity[Type]:AName(MetaKey1=Metadata1, MetaKey2=Metadata2)", new EntityString(new AnEntity()).setName("AName").setType("Type").addMetadata("MetaKey1", "Metadata1").addMetadata("MetaKey2", "Metadata2").toString())
nova chamada: assertEquals("AnEntity[Type]:AName(MetaKey1=Metadata1, MetaKey2=Metadata2)", new EntityString(new AnEntity()).setName("AName").setType("Type").addMetadata("MetaKey1", "Metadata1").addMetadata("MetaKey2", "Metadata2").toString(), "Era esperado valores iguais, mas  'AnEntity[Type]:AName(MetaKey1=Metadata1, MetaKey2=Metadata2)' é diferente de " + result285 + " <new EntityString(new AnEntity()).setName('AName').setType('Type').addMetadata('MetaKey1', 'Metadata1').addMetadata('MetaKey2', 'Metadata2').toString()>")
chamada antiga: assertEquals("ASnowflake(id=42)", new EntityString(new ASnowflake()).toString())
nova chamada: assertEquals("ASnowflake(id=42)", new EntityString(new ASnowflake()).toString(), "Era esperado valores iguais, mas  'ASnowflake(id=42)' é diferente de " + result286 + " <new EntityString(new ASnowflake()).toString()>")
chamada antiga: assertEquals("ASnowflake:AName(id=42)", new EntityString(new ASnowflake()).setName("AName").toString())
nova chamada: assertEquals("ASnowflake:AName(id=42)", new EntityString(new ASnowflake()).setName("AName").toString(), "Era esperado valores iguais, mas  'ASnowflake:AName(id=42)' é diferente de " + result287 + " <new EntityString(new ASnowflake()).setName('AName').toString()>")
chamada antiga: assertEquals("ASnowflake[AType](id=42)", new EntityString(new ASnowflake()).setType("AType").toString())
nova chamada: assertEquals("ASnowflake[AType](id=42)", new EntityString(new ASnowflake()).setType("AType").toString(), "Era esperado valores iguais, mas  'ASnowflake[AType](id=42)' é diferente de " + result288 + " <new EntityString(new ASnowflake()).setType('AType').toString()>")
chamada antiga: assertEquals("ASnowflake[AType]:AName(id=42)", new EntityString(new ASnowflake()).setType("AType").setName("AName").toString())
nova chamada: assertEquals("ASnowflake[AType]:AName(id=42)", new EntityString(new ASnowflake()).setType("AType").setName("AName").toString(), "Era esperado valores iguais, mas  'ASnowflake[AType]:AName(id=42)' é diferente de " + result289 + " <new EntityString(new ASnowflake()).setType('AType').setName('AName').toString()>")
chamada antiga: assertEquals("ASnowflake[NEWS]:AName(id=42)", new EntityString(new ASnowflake()).setType(ChannelType.NEWS).setName("AName").toString())
nova chamada: assertEquals("ASnowflake[NEWS]:AName(id=42)", new EntityString(new ASnowflake()).setType(ChannelType.NEWS).setName("AName").toString(), "Era esperado valores iguais, mas  'ASnowflake[NEWS]:AName(id=42)' é diferente de " + result290 + " <new EntityString(new ASnowflake()).setType(ChannelType.NEWS).setName('AName').toString()>")
chamada antiga: assertEquals("ASnowflake(id=42, Metadata1)", new EntityString(new ASnowflake()).addMetadata(null, "Metadata1").toString())
nova chamada: assertEquals("ASnowflake(id=42, Metadata1)", new EntityString(new ASnowflake()).addMetadata(null, "Metadata1").toString(), "Era esperado valores iguais, mas  'ASnowflake(id=42, Metadata1)' é diferente de " + result291 + " <new EntityString(new ASnowflake()).addMetadata(null, 'Metadata1').toString()>")
chamada antiga: assertEquals("ASnowflake(id=42, MetaKey=Metadata1)", new EntityString(new ASnowflake()).addMetadata("MetaKey", "Metadata1").toString())
nova chamada: assertEquals("ASnowflake(id=42, MetaKey=Metadata1)", new EntityString(new ASnowflake()).addMetadata("MetaKey", "Metadata1").toString(), "Era esperado valores iguais, mas  'ASnowflake(id=42, MetaKey=Metadata1)' é diferente de " + result292 + " <new EntityString(new ASnowflake()).addMetadata('MetaKey', 'Metadata1').toString()>")
chamada antiga: assertEquals("ASnowflake(id=42, MetaKey=42)", new EntityString(new ASnowflake()).addMetadata("MetaKey", 42).toString())
nova chamada: assertEquals("ASnowflake(id=42, MetaKey=42)", new EntityString(new ASnowflake()).addMetadata("MetaKey", 42).toString(), "Era esperado valores iguais, mas  'ASnowflake(id=42, MetaKey=42)' é diferente de " + result293 + " <new EntityString(new ASnowflake()).addMetadata('MetaKey', 42).toString()>")
chamada antiga: assertEquals("ASnowflake(id=42, MetaKey1=Metadata1, MetaKey2=Metadata2)", new EntityString(new ASnowflake()).addMetadata("MetaKey1", "Metadata1").addMetadata("MetaKey2", "Metadata2").toString())
nova chamada: assertEquals("ASnowflake(id=42, MetaKey1=Metadata1, MetaKey2=Metadata2)", new EntityString(new ASnowflake()).addMetadata("MetaKey1", "Metadata1").addMetadata("MetaKey2", "Metadata2").toString(), "Era esperado valores iguais, mas  'ASnowflake(id=42, MetaKey1=Metadata1, MetaKey2=Metadata2)' é diferente de " + result294 + " <new EntityString(new ASnowflake()).addMetadata('MetaKey1', 'Metadata1').addMetadata('MetaKey2', 'Metadata2').toString()>")
chamada antiga: assertEquals("ASnowflake:AName(id=42, Metadata1)", new EntityString(new ASnowflake()).setName("AName").addMetadata(null, "Metadata1").toString())
nova chamada: assertEquals("ASnowflake:AName(id=42, Metadata1)", new EntityString(new ASnowflake()).setName("AName").addMetadata(null, "Metadata1").toString(), "Era esperado valores iguais, mas  'ASnowflake:AName(id=42, Metadata1)' é diferente de " + result295 + " <new EntityString(new ASnowflake()).setName('AName').addMetadata(null, 'Metadata1').toString()>")
chamada antiga: assertEquals("ASnowflake:AName(id=42, MetaKey=Metadata1)", new EntityString(new ASnowflake()).setName("AName").addMetadata("MetaKey", "Metadata1").toString())
nova chamada: assertEquals("ASnowflake:AName(id=42, MetaKey=Metadata1)", new EntityString(new ASnowflake()).setName("AName").addMetadata("MetaKey", "Metadata1").toString(), "Era esperado valores iguais, mas  'ASnowflake:AName(id=42, MetaKey=Metadata1)' é diferente de " + result296 + " <new EntityString(new ASnowflake()).setName('AName').addMetadata('MetaKey', 'Metadata1').toString()>")
chamada antiga: assertEquals("ASnowflake:AName(id=42, MetaKey=42)", new EntityString(new ASnowflake()).setName("AName").addMetadata("MetaKey", 42).toString())
nova chamada: assertEquals("ASnowflake:AName(id=42, MetaKey=42)", new EntityString(new ASnowflake()).setName("AName").addMetadata("MetaKey", 42).toString(), "Era esperado valores iguais, mas  'ASnowflake:AName(id=42, MetaKey=42)' é diferente de " + result297 + " <new EntityString(new ASnowflake()).setName('AName').addMetadata('MetaKey', 42).toString()>")
chamada antiga: assertEquals("ASnowflake:AName(id=42, MetaKey1=Metadata1, MetaKey2=Metadata2)", new EntityString(new ASnowflake()).setName("AName").addMetadata("MetaKey1", "Metadata1").addMetadata("MetaKey2", "Metadata2").toString())
nova chamada: assertEquals("ASnowflake:AName(id=42, MetaKey1=Metadata1, MetaKey2=Metadata2)", new EntityString(new ASnowflake()).setName("AName").addMetadata("MetaKey1", "Metadata1").addMetadata("MetaKey2", "Metadata2").toString(), "Era esperado valores iguais, mas  'ASnowflake:AName(id=42, MetaKey1=Metadata1, MetaKey2=Metadata2)' é diferente de " + result298 + " <new EntityString(new ASnowflake()).setName('AName').addMetadata('MetaKey1', 'Metadata1').addMetadata('MetaKey2', 'Metadata2').toString()>")
chamada antiga: assertEquals("ASnowflake[Type]:AName(id=42, Metadata1)", new EntityString(new ASnowflake()).setName("AName").setType("Type").addMetadata(null, "Metadata1").toString())
nova chamada: assertEquals("ASnowflake[Type]:AName(id=42, Metadata1)", new EntityString(new ASnowflake()).setName("AName").setType("Type").addMetadata(null, "Metadata1").toString(), "Era esperado valores iguais, mas  'ASnowflake[Type]:AName(id=42, Metadata1)' é diferente de " + result299 + " <new EntityString(new ASnowflake()).setName('AName').setType('Type').addMetadata(null, 'Metadata1').toString()>")
chamada antiga: assertEquals("ASnowflake[Type]:AName(id=42, MetaKey=Metadata1)", new EntityString(new ASnowflake()).setName("AName").setType("Type").addMetadata("MetaKey", "Metadata1").toString())
nova chamada: assertEquals("ASnowflake[Type]:AName(id=42, MetaKey=Metadata1)", new EntityString(new ASnowflake()).setName("AName").setType("Type").addMetadata("MetaKey", "Metadata1").toString(), "Era esperado valores iguais, mas  'ASnowflake[Type]:AName(id=42, MetaKey=Metadata1)' é diferente de " + result300 + " <new EntityString(new ASnowflake()).setName('AName').setType('Type').addMetadata('MetaKey', 'Metadata1').toString()>")
chamada antiga: assertEquals("ASnowflake[Type]:AName(id=42, MetaKey=42)", new EntityString(new ASnowflake()).setName("AName").setType("Type").addMetadata("MetaKey", 42).toString())
nova chamada: assertEquals("ASnowflake[Type]:AName(id=42, MetaKey=42)", new EntityString(new ASnowflake()).setName("AName").setType("Type").addMetadata("MetaKey", 42).toString(), "Era esperado valores iguais, mas  'ASnowflake[Type]:AName(id=42, MetaKey=42)' é diferente de " + result301 + " <new EntityString(new ASnowflake()).setName('AName').setType('Type').addMetadata('MetaKey', 42).toString()>")
chamada antiga: assertEquals("ASnowflake[Type]:AName(id=42, MetaKey1=Metadata1, MetaKey2=Metadata2)", new EntityString(new ASnowflake()).setName("AName").setType("Type").addMetadata("MetaKey1", "Metadata1").addMetadata("MetaKey2", "Metadata2").toString())
nova chamada: assertEquals("ASnowflake[Type]:AName(id=42, MetaKey1=Metadata1, MetaKey2=Metadata2)", new EntityString(new ASnowflake()).setName("AName").setType("Type").addMetadata("MetaKey1", "Metadata1").addMetadata("MetaKey2", "Metadata2").toString(), "Era esperado valores iguais, mas  'ASnowflake[Type]:AName(id=42, MetaKey1=Metadata1, MetaKey2=Metadata2)' é diferente de " + result302 + " <new EntityString(new ASnowflake()).setName('AName').setType('Type').addMetadata('MetaKey1', 'Metadata1').addMetadata('MetaKey2', 'Metadata2').toString()>")
Total asserts: 388
Asserts sem descrição: 379
Asserts com descrição: 8
Assertion Roulette: 375

Após do refactor: 
Total asserts: 388
Asserts sem descrição: 343
Asserts com descrição: 44
Assertion Roulette: 339
